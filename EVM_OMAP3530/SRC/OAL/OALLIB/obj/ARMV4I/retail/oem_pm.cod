; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\EVM_OMAP3530\SRC\OAL\OALLIB\oem_pm.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_PrcmDebugSuspendResume| [ DATA ]
	EXPORT	|g_pTimerRegs| [ DATA ]
	EXPORT	|g_pGPMCRegs| [ DATA ]
	EXPORT	|g_pSDRCRegs| [ DATA ]
	EXPORT	|g_pSMSRegs| [ DATA ]
	EXPORT	|g_pVRFBRegs| [ DATA ]
	EXPORT	|g_pContextRestore| [ DATA ]
	EXPORT	|g_pSdrcRestore| [ DATA ]
	EXPORT	|g_pPrcmRestore| [ DATA ]
	EXPORT	|g_ffContextSaveMask| [ DATA ]
	EXPORT	|g_pSyscPadWkupRegs| [ DATA ]
	EXPORT	|g_pSyscPadConfsRegs| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_PrcmCm|, 0x38

	 COMMON	|g_pIdCodeReg|, 0x4

	 COMMON	|g_PrcmPrm|, 0x38


  00000			 AREA	 |.bss|, NOINIT
|g_PrcmDebugSuspendResume| % 0x4
|g_pTimerRegs| % 0x4
|g_pGPMCRegs| %	0x4
|g_pSDRCRegs| %	0x4
|g_pSMSRegs| %	0x4
|g_pVRFBRegs| %	0x4
|g_pContextRestore| % 0x4
|g_pSdrcRestore| % 0x4
|g_pPrcmRestore| % 0x4
|g_ffContextSaveMask| % 0x4
|s_pSyscIFContext| % 0x4
|g_pSyscPadWkupRegs| % 0x4
|g_pSyscPadConfsRegs| % 0x4
|s_pDmaController| % 0x4
|s_bCoreOffModeSet| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|TWLWriteRegs|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T49383| DCD	|$LN5@TWLWriteBy|
	DCD	0x40000803
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteByteReg| PROC

; 57   : {

  00000		 |$LN5@TWLWriteBy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M49380|

; 58   :     return TWLWriteRegs(hTWL,address,&data,sizeof(data));

  0000c	e3a03001	 mov         r3, #1
  00010	e28d2010	 add         r2, sp, #0x10
  00014	eb000000	 bl          TWLWriteRegs

; 59   : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M49381|

			 ENDP  ; |TWLWriteByteReg|

	EXPORT	|OALIoCtlPrcmDeviceSetAutoIdleState|
	EXPORT	|??_C@_1FO@JLFGCFEN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@EIPOCMLO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt@| [ DATA ] ; `string'
	IMPORT	|PrcmDeviceEnableAutoIdle|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\evm_omap3530\src\oal\oallib\oem_pm.c

  00000			 AREA	 |.pdata|, PDATA
|$T49400| DCD	|$LN12@OALIoCtlPr|
	DCD	0x40002501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@JLFGCFEN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t"
	DCB	0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@EIPOCMLO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "u", 0x0, "t"
	DCB	0x0, "o", 0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmDeviceSetAutoIdleState| PROC

; 532  : {

  00000		 |$LN12@OALIoCtlPr|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49397|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1

; 533  :     BOOL rc = FALSE;
; 534  :     IOCTL_PRCM_DEVICE_ENABLE_IN *pInfo;
; 535  : 
; 536  :     UNREFERENCED_PARAMETER(outSize);
; 537  :     UNREFERENCED_PARAMETER(code);
; 538  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 539  : 
; 540  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDeviceSetAutoIdleState\r\n"));

  0000c	e59f607c	 ldr         r6, [pc, #0x7C]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN6@OALIoCtlPr|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN6@OALIoCtlPr|
  00028	e59f005c	 ldr         r0, [pc, #0x5C]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5963440	 ldr         r3, [r6, #0x440]
  00034		 |$LN6@OALIoCtlPr|

; 541  :     if (pInBuffer == NULL || inSize < sizeof(IOCTL_PRCM_DEVICE_ENABLE_IN))

  00034	e3550000	 cmp         r5, #0
  00038	0a00000a	 beq         |$cleanUp$47680|
  0003c	e3570018	 cmp         r7, #0x18
  00040	3a000008	 bcc         |$cleanUp$47680|

; 542  :         {
; 543  :         goto cleanUp;
; 544  :         }
; 545  : 
; 546  :     // update info and call appropriate routine
; 547  :     //
; 548  :     if (pOutSize != NULL) *pOutSize = 0;

  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e3530000	 cmp         r3, #0
  0004c	13a02000	 movne       r2, #0
  00050	15832000	 strne       r2, [r3]

; 549  :     pInfo = (IOCTL_PRCM_DEVICE_ENABLE_IN*)(pInBuffer);        
; 550  :     PrcmDeviceEnableAutoIdle(pInfo->devId, pInfo->bEnable);

  00054	e5951014	 ldr         r1, [r5, #0x14]
  00058	e5950010	 ldr         r0, [r5, #0x10]
  0005c	eb000000	 bl          PrcmDeviceEnableAutoIdle

; 551  : 
; 552  :     rc = TRUE;

  00060	e5963440	 ldr         r3, [r6, #0x440]
  00064	e3a04001	 mov         r4, #1
  00068		 |$cleanUp$47680|

; 553  : 
; 554  : cleanUp:
; 555  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDeviceSetAutoIdleState(rc = %d)\r\n", rc));

  00068	e3130901	 tst         r3, #1, 18
  0006c	13130004	 tstne       r3, #4
  00070	159f0010	 ldrne       r0, [pc, #0x10]
  00074	11a01004	 movne       r1, r4
  00078	1b000000	 blne        NKDbgPrintfW

; 556  :     return rc;
; 557  : }

  0007c	e1a00004	 mov         r0, r4
  00080	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN13@OALIoCtlPr|
  00088		 |$LN14@OALIoCtlPr|
  00088	00000000	 DCD         |??_C@_1FO@JLFGCFEN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt@|
  0008c		 |$LN15@OALIoCtlPr|
  0008c	00000000	 DCD         |??_C@_1EM@EIPOCMLO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAe?$AAt?$AAA?$AAu?$AAt?$AAo?$AAI?$AAd?$AAl?$AAe?$AAS?$AAt@|
  00090		 |$LN16@OALIoCtlPr|
  00090	00000000	 DCD         |dpCurSettings|
  00094		 |$M49398|

			 ENDP  ; |OALIoCtlPrcmDeviceSetAutoIdleState|

	EXPORT	|OALIoCtlPrcmDeviceGetDeviceStatus|
	EXPORT	|??_C@_1FM@LBIPKPNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@IDKGDIPB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt@| [ DATA ] ; `string'
	IMPORT	|PrcmDeviceGetAutoIdleState|
	IMPORT	|PrcmDeviceGetEnabledState|

  00000			 AREA	 |.pdata|, PDATA
|$T49423| DCD	|$LN15@OALIoCtlPr@2|
	DCD	0x40003101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@LBIPKPNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@IDKGDIPB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmDeviceGetDeviceStatus| PROC

; 573  : {

  00000		 |$LN15@OALIoCtlPr@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M49420|
  00004	e1a06003	 mov         r6, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a07001	 mov         r7, r1

; 574  :     BOOL rc = FALSE;
; 575  :     IOCTL_PRCM_DEVICE_GET_DEVICESTATUS_OUT *pOut;
; 576  : 
; 577  :     UNREFERENCED_PARAMETER(code);
; 578  : 
; 579  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDeviceGetDeviceStatus\r\n"));

  00010	e59f50a8	 ldr         r5, [pc, #0xA8]
  00014	e3a04000	 mov         r4, #0
  00018	e5950440	 ldr         r0, [r5, #0x440]
  0001c	e3100a01	 tst         r0, #1, 20
  00020	0a000004	 beq         |$LN8@OALIoCtlPr@2|
  00024	e3100004	 tst         r0, #4
  00028	0a000002	 beq         |$LN8@OALIoCtlPr@2|
  0002c	e59f0088	 ldr         r0, [pc, #0x88]
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e5950440	 ldr         r0, [r5, #0x440]
  00038		 |$LN8@OALIoCtlPr@2|

; 580  :     
; 581  :     // validate parameters
; 582  :     //
; 583  :     if (pInBuffer == NULL || inSize != sizeof(UINT) ||
; 584  :         pOutBuffer == NULL || outSize != sizeof(IOCTL_PRCM_DEVICE_GET_DEVICESTATUS_OUT))

  00038	e3570000	 cmp         r7, #0
  0003c	0a000015	 beq         |$cleanUp$47709|
  00040	e3580004	 cmp         r8, #4
  00044	1a000013	 bne         |$cleanUp$47709|
  00048	e3560000	 cmp         r6, #0
  0004c	0a000011	 beq         |$cleanUp$47709|
  00050	e59d3018	 ldr         r3, [sp, #0x18]
  00054	e3530008	 cmp         r3, #8
  00058	1a00000e	 bne         |$cleanUp$47709|

; 585  :         {
; 586  :         goto cleanUp;
; 587  :         }
; 588  : 
; 589  :     if (pOutSize != NULL) *pOutSize = 0;

  0005c	e59d301c	 ldr         r3, [sp, #0x1C]

; 590  :     
; 591  :     // update function pointers
; 592  :     //
; 593  :     pOut = (IOCTL_PRCM_DEVICE_GET_DEVICESTATUS_OUT*)pOutBuffer;
; 594  :     if (PrcmDeviceGetEnabledState(*(UINT*)pInBuffer, &pOut->bEnabled) == FALSE ||
; 595  :         PrcmDeviceGetAutoIdleState(*(UINT*)pInBuffer, &pOut->bAutoIdle) == FALSE)

  00060	e1a01006	 mov         r1, r6
  00064	e3530000	 cmp         r3, #0
  00068	13a02000	 movne       r2, #0
  0006c	15832000	 strne       r2, [r3]
  00070	e5970000	 ldr         r0, [r7]
  00074	eb000000	 bl          PrcmDeviceGetEnabledState
  00078	e3500000	 cmp         r0, #0
  0007c	0a000004	 beq         |$LN12@OALIoCtlPr@2|
  00080	e5970000	 ldr         r0, [r7]
  00084	e2861004	 add         r1, r6, #4
  00088	eb000000	 bl          PrcmDeviceGetAutoIdleState
  0008c	e3500000	 cmp         r0, #0

; 596  :         {
; 597  :         goto cleanUp;
; 598  :         }
; 599  : 
; 600  :     rc = TRUE;

  00090	13a04001	 movne       r4, #1
  00094		 |$LN12@OALIoCtlPr@2|
  00094	e5950440	 ldr         r0, [r5, #0x440]
  00098		 |$cleanUp$47709|

; 601  : cleanUp:
; 602  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDeviceGetDeviceStatus(rc = %d)\r\n", rc));

  00098	e3100901	 tst         r0, #1, 18
  0009c	13100004	 tstne       r0, #4
  000a0	159f0010	 ldrne       r0, [pc, #0x10]
  000a4	11a01004	 movne       r1, r4
  000a8	1b000000	 blne        NKDbgPrintfW

; 603  :     return rc;
; 604  : }

  000ac	e1a00004	 mov         r0, r4
  000b0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN16@OALIoCtlPr@2|
  000b8		 |$LN17@OALIoCtlPr@2|
  000b8	00000000	 DCD         |??_C@_1FM@LBIPKPNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt@|
  000bc		 |$LN18@OALIoCtlPr@2|
  000bc	00000000	 DCD         |??_C@_1EK@IDKGDIPB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAS?$AAt?$AAa?$AAt@|
  000c0		 |$LN19@OALIoCtlPr@2|
  000c0	00000000	 DCD         |dpCurSettings|
  000c4		 |$M49421|

			 ENDP  ; |OALIoCtlPrcmDeviceGetDeviceStatus|

	EXPORT	|OALIoCtlPrcmDeviceGetSourceClockInfo|
	EXPORT	|??_C@_1GC@PIMMNGGL@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@ECEPPKCB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	IMPORT	|PrcmDeviceGetSourceClockInfo|

  00000			 AREA	 |.pdata|, PDATA
|$T49445| DCD	|$LN12@OALIoCtlPr@3|
	DCD	0x40002b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@PIMMNGGL@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u"
	DCB	0x0, "r", 0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@ECEPPKCB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u"
	DCB	0x0, "r", 0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmDeviceGetSourceClockInfo| PROC

; 620  : {

  00000		 |$LN12@OALIoCtlPr@3|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M49442|
  00004	e1a05003	 mov         r5, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a07001	 mov         r7, r1

; 621  :     BOOL rc = FALSE;
; 622  :     IOCTL_PRCM_DEVICE_GET_SOURCECLOCKINFO_OUT *pOut;
; 623  : 
; 624  :     UNREFERENCED_PARAMETER(code);
; 625  : 
; 626  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDeviceGetSourceClockInfo\r\n"));

  00010	e59f6090	 ldr         r6, [pc, #0x90]
  00014	e3a04000	 mov         r4, #0
  00018	e5960440	 ldr         r0, [r6, #0x440]
  0001c	e3100a01	 tst         r0, #1, 20
  00020	0a000004	 beq         |$LN6@OALIoCtlPr@3|
  00024	e3100004	 tst         r0, #4
  00028	0a000002	 beq         |$LN6@OALIoCtlPr@3|
  0002c	e59f0070	 ldr         r0, [pc, #0x70]
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e5960440	 ldr         r0, [r6, #0x440]
  00038		 |$LN6@OALIoCtlPr@3|

; 627  :     
; 628  :     if (pInBuffer == NULL || inSize != sizeof(UINT) ||
; 629  :         pOutBuffer == NULL || outSize != sizeof(IOCTL_PRCM_DEVICE_GET_SOURCECLOCKINFO_OUT))

  00038	e3570000	 cmp         r7, #0
  0003c	0a00000f	 beq         |$cleanUp$47742|
  00040	e3580004	 cmp         r8, #4
  00044	1a00000d	 bne         |$cleanUp$47742|
  00048	e3550000	 cmp         r5, #0
  0004c	0a00000b	 beq         |$cleanUp$47742|
  00050	e59d3018	 ldr         r3, [sp, #0x18]
  00054	e3530028	 cmp         r3, #0x28
  00058	1a000008	 bne         |$cleanUp$47742|

; 630  :         {
; 631  :         goto cleanUp;
; 632  :         }
; 633  : 
; 634  :     // update info and call appropriate routine
; 635  :     //
; 636  :     if (pOutSize != NULL) *pOutSize = 0;

  0005c	e59d301c	 ldr         r3, [sp, #0x1C]

; 637  :     pOut = (IOCTL_PRCM_DEVICE_GET_SOURCECLOCKINFO_OUT*)(pOutBuffer);        
; 638  :     rc = PrcmDeviceGetSourceClockInfo(*(UINT*)pInBuffer, pOut);

  00060	e1a01005	 mov         r1, r5
  00064	e3530000	 cmp         r3, #0
  00068	13a02000	 movne       r2, #0
  0006c	15832000	 strne       r2, [r3]
  00070	e5970000	 ldr         r0, [r7]
  00074	eb000000	 bl          PrcmDeviceGetSourceClockInfo
  00078	e1a04000	 mov         r4, r0
  0007c	e5960440	 ldr         r0, [r6, #0x440]
  00080		 |$cleanUp$47742|

; 639  : 
; 640  : cleanUp:
; 641  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDeviceGetSourceClockInfo(rc = %d)\r\n", rc));

  00080	e3100901	 tst         r0, #1, 18
  00084	13100004	 tstne       r0, #4
  00088	159f0010	 ldrne       r0, [pc, #0x10]
  0008c	11a01004	 movne       r1, r4
  00090	1b000000	 blne        NKDbgPrintfW

; 642  :     return rc;
; 643  : }

  00094	e1a00004	 mov         r0, r4
  00098	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN13@OALIoCtlPr@3|
  000a0		 |$LN14@OALIoCtlPr@3|
  000a0	00000000	 DCD         |??_C@_1GC@PIMMNGGL@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc@|
  000a4		 |$LN15@OALIoCtlPr@3|
  000a4	00000000	 DCD         |??_C@_1FA@ECEPPKCB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc@|
  000a8		 |$LN16@OALIoCtlPr@3|
  000a8	00000000	 DCD         |dpCurSettings|
  000ac		 |$M49443|

			 ENDP  ; |OALIoCtlPrcmDeviceGetSourceClockInfo|

	EXPORT	|OALIoCtlPrcmClockGetSourceClockInfo|
	EXPORT	|??_C@_1GA@NDMNMIPM@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@HHGONEEA@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| [ DATA ] ; `string'
	IMPORT	|PrcmClockGetParentClockInfo|
	IMPORT	|PrcmClockGetParentClockRefcount|

  00000			 AREA	 |.pdata|, PDATA
|$T49468| DCD	|$LN14@OALIoCtlPr@4|
	DCD	0x40003e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@NDMNMIPM@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@HHGONEEA@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmClockGetSourceClockInfo| PROC

; 659  : {

  00000		 |$LN14@OALIoCtlPr@4|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M49465|
  00008	e1a04003	 mov         r4, r3
  0000c	e1a08002	 mov         r8, r2
  00010	e1a07001	 mov         r7, r1

; 660  :     BOOL rc = FALSE;
; 661  :     SourceClockInfo_t info;
; 662  :     IOCTL_PRCM_CLOCK_GET_SOURCECLOCKINFO_IN *pIn;
; 663  :     IOCTL_PRCM_CLOCK_GET_SOURCECLOCKINFO_OUT *pOut;
; 664  : 
; 665  :     UNREFERENCED_PARAMETER(code);
; 666  : 
; 667  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmClockGetSourceClockInfo\r\n"));

  00014	e59f50d8	 ldr         r5, [pc, #0xD8]
  00018	e3a06000	 mov         r6, #0
  0001c	e5950440	 ldr         r0, [r5, #0x440]
  00020	e3100a01	 tst         r0, #1, 20
  00024	0a000004	 beq         |$LN7@OALIoCtlPr@4|
  00028	e3100004	 tst         r0, #4
  0002c	0a000002	 beq         |$LN7@OALIoCtlPr@4|
  00030	e59f00b8	 ldr         r0, [pc, #0xB8]
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e5950440	 ldr         r0, [r5, #0x440]
  0003c		 |$LN7@OALIoCtlPr@4|

; 668  :     
; 669  :     if (pInBuffer == NULL || inSize != sizeof(IOCTL_PRCM_CLOCK_GET_SOURCECLOCKINFO_IN) ||
; 670  :         pOutBuffer == NULL || outSize != sizeof(IOCTL_PRCM_CLOCK_GET_SOURCECLOCKINFO_OUT))

  0003c	e3570000	 cmp         r7, #0
  00040	0a000020	 beq         |$cleanUp$47774|
  00044	e3580008	 cmp         r8, #8
  00048	1a00001e	 bne         |$cleanUp$47774|
  0004c	e3540000	 cmp         r4, #0
  00050	0a00001c	 beq         |$cleanUp$47774|
  00054	e59d3024	 ldr         r3, [sp, #0x24]
  00058	e3530010	 cmp         r3, #0x10
  0005c	1a000019	 bne         |$cleanUp$47774|

; 671  :         {
; 672  :         goto cleanUp;
; 673  :         }
; 674  : 
; 675  :     // update info and call appropriate routine
; 676  :     //
; 677  :     if (pOutSize != NULL) *pOutSize = 0;

  00060	e59d3028	 ldr         r3, [sp, #0x28]
  00064	e3530000	 cmp         r3, #0
  00068	13a02000	 movne       r2, #0
  0006c	15832000	 strne       r2, [r3]

; 678  :     pIn = (IOCTL_PRCM_CLOCK_GET_SOURCECLOCKINFO_IN*)pInBuffer;
; 679  :     pOut = (IOCTL_PRCM_CLOCK_GET_SOURCECLOCKINFO_OUT*)pOutBuffer;
; 680  : 
; 681  :     memset(pOut, 0, sizeof(IOCTL_PRCM_CLOCK_GET_SOURCECLOCKINFO_OUT));

  00070	e3a03000	 mov         r3, #0
  00074	e5843000	 str         r3, [r4]
  00078	e5843004	 str         r3, [r4, #4]
  0007c	e5843008	 str         r3, [r4, #8]
  00080	e584300c	 str         r3, [r4, #0xC]

; 682  :     rc = PrcmClockGetParentClockRefcount(pIn->clockId, pIn->clockLevel, &pOut->refCount);

  00084	e5971004	 ldr         r1, [r7, #4]
  00088	e5970000	 ldr         r0, [r7]
  0008c	e1a02004	 mov         r2, r4
  00090	eb000000	 bl          PrcmClockGetParentClockRefcount

; 683  :     if (PrcmClockGetParentClockInfo(pIn->clockId, pIn->clockLevel, &info))

  00094	e5971004	 ldr         r1, [r7, #4]
  00098	e1a06000	 mov         r6, r0
  0009c	e5970000	 ldr         r0, [r7]
  000a0	e28d2000	 add         r2, sp, #0
  000a4	eb000000	 bl          PrcmClockGetParentClockInfo
  000a8	e3500000	 cmp         r0, #0

; 684  :         {        
; 685  :         pOut->parentId = info.clockId;

  000ac	159d3000	 ldrne       r3, [sp]

; 686  :         pOut->parentLevel = info.nLevel;

  000b0	159d2008	 ldrne       r2, [sp, #8]

; 687  :         pOut->parentRefCount = info.refCount;

  000b4	159d1004	 ldrne       r1, [sp, #4]
  000b8	15843004	 strne       r3, [r4, #4]
  000bc	15842008	 strne       r2, [r4, #8]
  000c0	1584100c	 strne       r1, [r4, #0xC]
  000c4	e5950440	 ldr         r0, [r5, #0x440]
  000c8		 |$cleanUp$47774|

; 688  :         }
; 689  : 
; 690  : cleanUp:
; 691  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmClockGetSourceClockInfo(rc = %d)\r\n", rc));

  000c8	e3100901	 tst         r0, #1, 18
  000cc	13100004	 tstne       r0, #4
  000d0	159f0014	 ldrne       r0, [pc, #0x14]
  000d4	11a01006	 movne       r1, r6
  000d8	1b000000	 blne        NKDbgPrintfW

; 692  :     return rc;
; 693  : }

  000dc	e1a00006	 mov         r0, r6
  000e0	e28dd00c	 add         sp, sp, #0xC
  000e4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN15@OALIoCtlPr@4|
  000ec		 |$LN16@OALIoCtlPr@4|
  000ec	00000000	 DCD         |??_C@_1GA@NDMNMIPM@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@|
  000f0		 |$LN17@OALIoCtlPr@4|
  000f0	00000000	 DCD         |??_C@_1EO@HHGONEEA@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAG?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@|
  000f4		 |$LN18@OALIoCtlPr@4|
  000f4	00000000	 DCD         |dpCurSettings|
  000f8		 |$M49466|

			 ENDP  ; |OALIoCtlPrcmClockGetSourceClockInfo|

	EXPORT	|OALIoCtlPrcmClockSetSourceClock|
	EXPORT	|??_C@_1FI@LHKECLHF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@GJHFLHDM@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| [ DATA ] ; `string'
	IMPORT	|PrcmClockSetParent|

  00000			 AREA	 |.pdata|, PDATA
|$T49489| DCD	|$LN12@OALIoCtlPr@5|
	DCD	0x40002501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@LHKECLHF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GJHFLHDM@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmClockSetSourceClock| PROC

; 709  : {

  00000		 |$LN12@OALIoCtlPr@5|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49486|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1

; 710  :     BOOL rc = FALSE;
; 711  :     IOCTL_PRCM_CLOCK_SET_SOURCECLOCK_IN *pIn;
; 712  : 
; 713  :     UNREFERENCED_PARAMETER(outSize);
; 714  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 715  :     UNREFERENCED_PARAMETER(code);
; 716  : 
; 717  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmClockSetSourceClock\r\n"));

  0000c	e59f607c	 ldr         r6, [pc, #0x7C]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN6@OALIoCtlPr@5|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN6@OALIoCtlPr@5|
  00028	e59f005c	 ldr         r0, [pc, #0x5C]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5963440	 ldr         r3, [r6, #0x440]
  00034		 |$LN6@OALIoCtlPr@5|

; 718  :     
; 719  :     if (pInBuffer == NULL || inSize != sizeof(IOCTL_PRCM_CLOCK_SET_SOURCECLOCK_IN))

  00034	e3550000	 cmp         r5, #0
  00038	0a00000a	 beq         |$cleanUp$47804|
  0003c	e3570008	 cmp         r7, #8
  00040	1a000008	 bne         |$cleanUp$47804|

; 720  :         {
; 721  :         goto cleanUp;
; 722  :         }
; 723  : 
; 724  :     // update info and call appropriate routine
; 725  :     //
; 726  :     if (pOutSize != NULL) *pOutSize = 0;

  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e3530000	 cmp         r3, #0
  0004c	13a02000	 movne       r2, #0
  00050	15832000	 strne       r2, [r3]

; 727  :     pIn = (IOCTL_PRCM_CLOCK_SET_SOURCECLOCK_IN*)pInBuffer;
; 728  :     rc = PrcmClockSetParent(pIn->clkId, pIn->newParentClkId);

  00054	e5951004	 ldr         r1, [r5, #4]
  00058	e5950000	 ldr         r0, [r5]
  0005c	eb000000	 bl          PrcmClockSetParent
  00060	e5963440	 ldr         r3, [r6, #0x440]
  00064	e1a04000	 mov         r4, r0
  00068		 |$cleanUp$47804|

; 729  : 
; 730  : cleanUp:
; 731  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmClockSetSourceClock(rc = %d)\r\n", rc));

  00068	e3130901	 tst         r3, #1, 18
  0006c	13130004	 tstne       r3, #4
  00070	159f0010	 ldrne       r0, [pc, #0x10]
  00074	11a01004	 movne       r1, r4
  00078	1b000000	 blne        NKDbgPrintfW

; 732  :     return rc;
; 733  : }

  0007c	e1a00004	 mov         r0, r4
  00080	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN13@OALIoCtlPr@5|
  00088		 |$LN14@OALIoCtlPr@5|
  00088	00000000	 DCD         |??_C@_1FI@LHKECLHF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@|
  0008c		 |$LN15@OALIoCtlPr@5|
  0008c	00000000	 DCD         |??_C@_1EG@GJHFLHDM@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@|
  00090		 |$LN16@OALIoCtlPr@5|
  00090	00000000	 DCD         |dpCurSettings|
  00094		 |$M49487|

			 ENDP  ; |OALIoCtlPrcmClockSetSourceClock|

	EXPORT	|OALIoCtlPrcmClockSetSourceClockDivisor|
	EXPORT	|??_C@_1GG@PFIOPLFN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@OMCINOEK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| [ DATA ] ; `string'
	IMPORT	|PrcmClockSetDivisor|

  00000			 AREA	 |.pdata|, PDATA
|$T49510| DCD	|$LN12@OALIoCtlPr@6|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@PFIOPLFN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "D", 0x0, "i", 0x0, "v", 0x0, "i", 0x0, "s"
	DCB	0x0, "o", 0x0, "r", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@OMCINOEK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "o", 0x0, "u", 0x0, "r"
	DCB	0x0, "c", 0x0, "e", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "D", 0x0, "i", 0x0, "v", 0x0, "i", 0x0, "s"
	DCB	0x0, "o", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmClockSetSourceClockDivisor| PROC

; 749  : {

  00000		 |$LN12@OALIoCtlPr@6|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49507|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1

; 750  :     BOOL rc = FALSE;
; 751  :     IOCTL_PRCM_CLOCK_SET_SOURCECLOCKDIVISOR_IN *pIn;
; 752  : 
; 753  :     UNREFERENCED_PARAMETER(outSize);
; 754  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 755  :     UNREFERENCED_PARAMETER(code);
; 756  : 
; 757  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmClockSetSourceClockDivisor\r\n"));

  0000c	e59f6080	 ldr         r6, [pc, #0x80]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN6@OALIoCtlPr@6|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN6@OALIoCtlPr@6|
  00028	e59f0060	 ldr         r0, [pc, #0x60]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5963440	 ldr         r3, [r6, #0x440]
  00034		 |$LN6@OALIoCtlPr@6|

; 758  :     
; 759  :     if (pInBuffer == NULL || inSize != sizeof(IOCTL_PRCM_CLOCK_SET_SOURCECLOCKDIVISOR_IN))

  00034	e3550000	 cmp         r5, #0
  00038	0a00000b	 beq         |$cleanUp$47831|
  0003c	e357000c	 cmp         r7, #0xC
  00040	1a000009	 bne         |$cleanUp$47831|

; 760  :         {
; 761  :         goto cleanUp;
; 762  :         }
; 763  : 
; 764  :     // update info and call appropriate routine
; 765  :     //
; 766  :     if (pOutSize != NULL) *pOutSize = 0;

  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e3530000	 cmp         r3, #0
  0004c	13a02000	 movne       r2, #0
  00050	15832000	 strne       r2, [r3]

; 767  :     pIn = (IOCTL_PRCM_CLOCK_SET_SOURCECLOCKDIVISOR_IN*)pInBuffer;
; 768  :     rc = PrcmClockSetDivisor(pIn->clkId, pIn->parentClkId, pIn->divisor);

  00054	e5952008	 ldr         r2, [r5, #8]
  00058	e5951004	 ldr         r1, [r5, #4]
  0005c	e5950000	 ldr         r0, [r5]
  00060	eb000000	 bl          PrcmClockSetDivisor
  00064	e5963440	 ldr         r3, [r6, #0x440]
  00068	e1a04000	 mov         r4, r0
  0006c		 |$cleanUp$47831|

; 769  : 
; 770  : cleanUp:
; 771  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmClockSetSourceClockDivisor(rc = %d)\r\n", rc));

  0006c	e3130901	 tst         r3, #1, 18
  00070	13130004	 tstne       r3, #4
  00074	159f0010	 ldrne       r0, [pc, #0x10]
  00078	11a01004	 movne       r1, r4
  0007c	1b000000	 blne        NKDbgPrintfW

; 772  :     return rc;
; 773  : }

  00080	e1a00004	 mov         r0, r4
  00084	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN13@OALIoCtlPr@6|
  0008c		 |$LN14@OALIoCtlPr@6|
  0008c	00000000	 DCD         |??_C@_1GG@PFIOPLFN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@|
  00090		 |$LN15@OALIoCtlPr@6|
  00090	00000000	 DCD         |??_C@_1FE@OMCINOEK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAC?$AAl?$AAo?$AAc?$AAk@|
  00094		 |$LN16@OALIoCtlPr@6|
  00094	00000000	 DCD         |dpCurSettings|
  00098		 |$M49508|

			 ENDP  ; |OALIoCtlPrcmClockSetSourceClockDivisor|

	EXPORT	|OALIoCtlPrcmClockSetDpllState|
	EXPORT	|??_C@_1FE@GNONCHJN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAD?$AAp?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@CIFBIGJI@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAD?$AAp?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	IMPORT	|PrcmClockSetDpllState|

  00000			 AREA	 |.pdata|, PDATA
|$T49531| DCD	|$LN12@OALIoCtlPr@7|
	DCD	0x40002401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@GNONCHJN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAD?$AAp?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAr@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "D", 0x0, "p", 0x0, "l", 0x0, "l"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@CIFBIGJI@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAD?$AAp?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AN?$AA?6@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "D", 0x0, "p", 0x0, "l", 0x0, "l"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmClockSetDpllState| PROC

; 790  : {

  00000		 |$LN12@OALIoCtlPr@7|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49528|
  00004	e1a07002	 mov         r7, r2
  00008	e1a06001	 mov         r6, r1

; 791  :     BOOL rc = FALSE;
; 792  :     IOCTL_PRCM_CLOCK_SET_DPLLSTATE_IN *pIn;
; 793  : 
; 794  :     UNREFERENCED_PARAMETER(outSize);
; 795  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 796  :     UNREFERENCED_PARAMETER(code);
; 797  : 
; 798  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmClockSetDpllState\r\n"));

  0000c	e59f5078	 ldr         r5, [pc, #0x78]
  00010	e3a04000	 mov         r4, #0
  00014	e5953440	 ldr         r3, [r5, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN6@OALIoCtlPr@7|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN6@OALIoCtlPr@7|
  00028	e59f0058	 ldr         r0, [pc, #0x58]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5953440	 ldr         r3, [r5, #0x440]
  00034		 |$LN6@OALIoCtlPr@7|

; 799  :     
; 800  :     if (pInBuffer == NULL || inSize != sizeof(IOCTL_PRCM_CLOCK_SET_DPLLSTATE_IN))

  00034	e3560000	 cmp         r6, #0
  00038	0a000009	 beq         |$cleanUp$47858|
  0003c	e3570020	 cmp         r7, #0x20
  00040	1a000007	 bne         |$cleanUp$47858|

; 801  :         {
; 802  :         goto cleanUp;
; 803  :         }
; 804  : 
; 805  :     // update info and call appropriate routine
; 806  :     //
; 807  :     if (pOutSize != NULL) *pOutSize = 0;

  00044	e59d3018	 ldr         r3, [sp, #0x18]

; 808  :     pIn = (IOCTL_PRCM_CLOCK_SET_DPLLSTATE_IN*)pInBuffer;
; 809  :     rc = PrcmClockSetDpllState(pIn);

  00048	e1a00006	 mov         r0, r6
  0004c	e3530000	 cmp         r3, #0
  00050	13a02000	 movne       r2, #0
  00054	15832000	 strne       r2, [r3]
  00058	eb000000	 bl          PrcmClockSetDpllState
  0005c	e5953440	 ldr         r3, [r5, #0x440]
  00060	e1a04000	 mov         r4, r0
  00064		 |$cleanUp$47858|

; 810  : 
; 811  : cleanUp:
; 812  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmClockSetDpllState(rc = %d)\r\n", rc));

  00064	e3130901	 tst         r3, #1, 18
  00068	13130004	 tstne       r3, #4
  0006c	159f0010	 ldrne       r0, [pc, #0x10]
  00070	11a01004	 movne       r1, r4
  00074	1b000000	 blne        NKDbgPrintfW

; 813  :     return rc;
; 814  : }

  00078	e1a00004	 mov         r0, r4
  0007c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN13@OALIoCtlPr@7|
  00084		 |$LN14@OALIoCtlPr@7|
  00084	00000000	 DCD         |??_C@_1FE@GNONCHJN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAD?$AAp?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAr@|
  00088		 |$LN15@OALIoCtlPr@7|
  00088	00000000	 DCD         |??_C@_1EC@CIFBIGJI@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAe?$AAt?$AAD?$AAp?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AN?$AA?6@|
  0008c		 |$LN16@OALIoCtlPr@7|
  0008c	00000000	 DCD         |dpCurSettings|
  00090		 |$M49529|

			 ENDP  ; |OALIoCtlPrcmClockSetDpllState|

	EXPORT	|OALIoCtlPrcmDomainSetWakeupDependency|
	EXPORT	|??_C@_1GE@IAGKICDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@IFJLFJMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe@| [ DATA ] ; `string'
	IMPORT	|PrcmDomainSetWakeupDependency|

  00000			 AREA	 |.pdata|, PDATA
|$T49552| DCD	|$LN12@OALIoCtlPr@8|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@IAGKICDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k"
	DCB	0x0, "e", 0x0, "u", 0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c"
	DCB	0x0, "y", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@IFJLFJMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k"
	DCB	0x0, "e", 0x0, "u", 0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c"
	DCB	0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmDomainSetWakeupDependency| PROC

; 831  : {

  00000		 |$LN12@OALIoCtlPr@8|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49549|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1

; 832  :     BOOL rc = FALSE;
; 833  :     IOCTL_PRCM_DOMAIN_SET_WAKEUPDEP_IN *pIn;
; 834  : 
; 835  :     UNREFERENCED_PARAMETER(outSize);
; 836  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 837  :     UNREFERENCED_PARAMETER(code);
; 838  : 
; 839  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDomainSetWakeupDependency\r\n"));

  0000c	e59f6080	 ldr         r6, [pc, #0x80]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN6@OALIoCtlPr@8|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN6@OALIoCtlPr@8|
  00028	e59f0060	 ldr         r0, [pc, #0x60]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5963440	 ldr         r3, [r6, #0x440]
  00034		 |$LN6@OALIoCtlPr@8|

; 840  :     
; 841  :     if (pInBuffer == NULL || inSize != sizeof(IOCTL_PRCM_DOMAIN_SET_WAKEUPDEP_IN))

  00034	e3550000	 cmp         r5, #0
  00038	0a00000b	 beq         |$cleanUp$47885|
  0003c	e3570010	 cmp         r7, #0x10
  00040	1a000009	 bne         |$cleanUp$47885|

; 842  :         {
; 843  :         goto cleanUp;
; 844  :         }
; 845  : 
; 846  :     // update info and call appropriate routine
; 847  :     //
; 848  :     if (pOutSize != NULL) *pOutSize = 0;

  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e3530000	 cmp         r3, #0
  0004c	13a02000	 movne       r2, #0
  00050	15832000	 strne       r2, [r3]

; 849  :     pIn = (IOCTL_PRCM_DOMAIN_SET_WAKEUPDEP_IN*)pInBuffer;
; 850  :     rc = PrcmDomainSetWakeupDependency(pIn->powerDomain, pIn->ffWakeDep, pIn->bEnable);

  00054	e595200c	 ldr         r2, [r5, #0xC]
  00058	e5951008	 ldr         r1, [r5, #8]
  0005c	e5950004	 ldr         r0, [r5, #4]
  00060	eb000000	 bl          PrcmDomainSetWakeupDependency
  00064	e5963440	 ldr         r3, [r6, #0x440]
  00068	e1a04000	 mov         r4, r0
  0006c		 |$cleanUp$47885|

; 851  : 
; 852  : cleanUp:
; 853  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDomainSetWakeupDependency(rc = %d)\r\n", rc));

  0006c	e3130901	 tst         r3, #1, 18
  00070	13130004	 tstne       r3, #4
  00074	159f0010	 ldrne       r0, [pc, #0x10]
  00078	11a01004	 movne       r1, r4
  0007c	1b000000	 blne        NKDbgPrintfW

; 854  :     return rc;
; 855  : }

  00080	e1a00004	 mov         r0, r4
  00084	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN13@OALIoCtlPr@8|
  0008c		 |$LN14@OALIoCtlPr@8|
  0008c	00000000	 DCD         |??_C@_1GE@IAGKICDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe@|
  00090		 |$LN15@OALIoCtlPr@8|
  00090	00000000	 DCD         |??_C@_1FC@IFJLFJMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe@|
  00094		 |$LN16@OALIoCtlPr@8|
  00094	00000000	 DCD         |dpCurSettings|
  00098		 |$M49550|

			 ENDP  ; |OALIoCtlPrcmDomainSetWakeupDependency|

	EXPORT	|OALIoCtlPrcmDomainSetSleepDependency|
	EXPORT	|??_C@_1GC@OENIKAAG@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@DCKFFJGO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn@| [ DATA ] ; `string'
	IMPORT	|PrcmDomainSetSleepDependency|

  00000			 AREA	 |.pdata|, PDATA
|$T49573| DCD	|$LN12@OALIoCtlPr@9|
	DCD	0x40002601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@OENIKAAG@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "l", 0x0, "e"
	DCB	0x0, "e", 0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@DCKFFJGO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "l", 0x0, "e"
	DCB	0x0, "e", 0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmDomainSetSleepDependency| PROC

; 872  : {

  00000		 |$LN12@OALIoCtlPr@9|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49570|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1

; 873  :     BOOL rc = FALSE;
; 874  :     IOCTL_PRCM_DOMAIN_SET_SLEEPDEP_IN *pIn;
; 875  :     
; 876  :     UNREFERENCED_PARAMETER(outSize);
; 877  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 878  :     UNREFERENCED_PARAMETER(code);
; 879  : 
; 880  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDomainSetSleepDependency\r\n"));

  0000c	e59f6080	 ldr         r6, [pc, #0x80]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN6@OALIoCtlPr@9|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN6@OALIoCtlPr@9|
  00028	e59f0060	 ldr         r0, [pc, #0x60]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5963440	 ldr         r3, [r6, #0x440]
  00034		 |$LN6@OALIoCtlPr@9|

; 881  :     
; 882  :     if (pInBuffer == NULL || inSize != sizeof(IOCTL_PRCM_DOMAIN_SET_SLEEPDEP_IN))

  00034	e3550000	 cmp         r5, #0
  00038	0a00000b	 beq         |$cleanUp$47912|
  0003c	e3570010	 cmp         r7, #0x10
  00040	1a000009	 bne         |$cleanUp$47912|

; 883  :         {
; 884  :         goto cleanUp;
; 885  :         }
; 886  : 
; 887  :     // update info and call appropriate routine
; 888  :     //
; 889  :     if (pOutSize != NULL) *pOutSize = 0;

  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e3530000	 cmp         r3, #0
  0004c	13a02000	 movne       r2, #0
  00050	15832000	 strne       r2, [r3]

; 890  :     pIn = (IOCTL_PRCM_DOMAIN_SET_SLEEPDEP_IN*)pInBuffer;
; 891  :     rc = PrcmDomainSetSleepDependency(pIn->powerDomain, pIn->ffSleepDep, pIn->bEnable);

  00054	e595200c	 ldr         r2, [r5, #0xC]
  00058	e5951008	 ldr         r1, [r5, #8]
  0005c	e5950004	 ldr         r0, [r5, #4]
  00060	eb000000	 bl          PrcmDomainSetSleepDependency
  00064	e5963440	 ldr         r3, [r6, #0x440]
  00068	e1a04000	 mov         r4, r0
  0006c		 |$cleanUp$47912|

; 892  : 
; 893  : cleanUp:
; 894  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDomainSetSleepDependency(rc = %d)\r\n", rc));

  0006c	e3130901	 tst         r3, #1, 18
  00070	13130004	 tstne       r3, #4
  00074	159f0010	 ldrne       r0, [pc, #0x10]
  00078	11a01004	 movne       r1, r4
  0007c	1b000000	 blne        NKDbgPrintfW

; 895  :     return rc;
; 896  : }

  00080	e1a00004	 mov         r0, r4
  00084	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN13@OALIoCtlPr@9|
  0008c		 |$LN14@OALIoCtlPr@9|
  0008c	00000000	 DCD         |??_C@_1GC@OENIKAAG@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn@|
  00090		 |$LN15@OALIoCtlPr@9|
  00090	00000000	 DCD         |??_C@_1FA@DCKFFJGO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn@|
  00094		 |$LN16@OALIoCtlPr@9|
  00094	00000000	 DCD         |dpCurSettings|
  00098		 |$M49571|

			 ENDP  ; |OALIoCtlPrcmDomainSetSleepDependency|

	EXPORT	|OALIoCtlPrcmDomainSetPowerState|
	EXPORT	|??_C@_1FI@HLFNCHGP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@FCCADHII@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	IMPORT	|OALWakeupLatency_UpdateDomainState|
	IMPORT	|PrcmDomainSetPowerState|

  00000			 AREA	 |.pdata|, PDATA
|$T49598| DCD	|$LN25@OALIoCtlPr@10|
	DCD	0x40003f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@HLFNCHGP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@FCCADHII@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmDomainSetPowerState| PROC

; 913  : {

  00000		 |$LN25@OALIoCtlPr@10|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49595|
  00004	e1a07002	 mov         r7, r2
  00008	e1a04001	 mov         r4, r1

; 914  :     BOOL rc = TRUE;
; 915  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN *pIn;
; 916  : 
; 917  :     UNREFERENCED_PARAMETER(outSize);
; 918  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 919  :     UNREFERENCED_PARAMETER(code);
; 920  : 
; 921  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDomainSetPowerState\r\n"));

  0000c	e59f60e4	 ldr         r6, [pc, #0xE4]
  00010	e3a05001	 mov         r5, #1
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	13130004	 tstne       r3, #4
  00020	159f00cc	 ldrne       r0, [pc, #0xCC]
  00024	1b000000	 blne        NKDbgPrintfW

; 922  :     
; 923  :     if (pInBuffer == NULL || inSize != sizeof(IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN))

  00028	e3540000	 cmp         r4, #0
  0002c	0a000025	 beq         |$LN11@OALIoCtlPr@10|
  00030	e3570010	 cmp         r7, #0x10
  00034	1a000023	 bne         |$LN11@OALIoCtlPr@10|

; 926  :         goto cleanUp;
; 927  :         }
; 928  : 
; 929  :     // update info and call appropriate routine
; 930  :     //
; 931  :     if (pOutSize != NULL) *pOutSize = 0;

  00038	e59d3018	 ldr         r3, [sp, #0x18]
  0003c	e3530000	 cmp         r3, #0
  00040	13a02000	 movne       r2, #0
  00044	15832000	 strne       r2, [r3]

; 932  :     pIn = (IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN*)pInBuffer;
; 933  : 
; 934  :     switch (pIn->powerDomain)

  00048	e5940004	 ldr         r0, [r4, #4]
  0004c	e3500001	 cmp         r0, #1
  00050	0a000014	 beq         |$LN4@OALIoCtlPr@10|
  00054	e3500002	 cmp         r0, #2
  00058	0a000003	 beq         |$LN7@OALIoCtlPr@10|
  0005c	e3500005	 cmp         r0, #5
  00060	13500007	 cmpne       r0, #7

; 978  :                 {
; 979  :                 PrcmDomainSetPowerState(pIn->powerDomain,
; 980  :                     pIn->powerState,
; 981  :                     pIn->logicState
; 982  :                     );
; 983  :                 }
; 984  :             break;
; 985  : 
; 986  :         default:
; 987  :             PrcmDomainSetPowerState(pIn->powerDomain,
; 988  :                     pIn->powerState,
; 989  :                     pIn->logicState
; 990  :                     );

  00064	15941008	 ldrne       r1, [r4, #8]
  00068	1a00000b	 bne         |$LN21@OALIoCtlPr@10|
  0006c		 |$LN7@OALIoCtlPr@10|

; 935  :         {
; 936  :         case POWERDOMAIN_MPU:
; 937  :         case POWERDOMAIN_NEON:
; 938  :         case POWERDOMAIN_PERIPHERAL:
; 939  :             if (pIn->powerState == POWERSTATE_OFF)

  0006c	e5943008	 ldr         r3, [r4, #8]
  00070	e3530000	 cmp         r3, #0
  00074	1a000007	 bne         |$LN6@OALIoCtlPr@10|

; 940  :                 {
; 941  :                 PrcmDomainSetPowerState(pIn->powerDomain,
; 942  :                     POWERSTATE_RETENTION,
; 943  :                     LOGICRETSTATE_LOGICRET_DOMAINRET
; 944  :                     );

  00078	e3a02004	 mov         r2, #4
  0007c	e3a01001	 mov         r1, #1
  00080	eb000000	 bl          PrcmDomainSetPowerState

; 945  : 
; 946  :                 // need to notify wakeup latency framework
; 947  :                 // what the actual power domain state will be
; 948  :                 OALWakeupLatency_UpdateDomainState(pIn->powerDomain,
; 949  :                     POWERSTATE_OFF,
; 950  :                     pIn->logicState
; 951  :                     );

  00084	e594200c	 ldr         r2, [r4, #0xC]
  00088		 |$LN22@OALIoCtlPr@10|
  00088	e5940004	 ldr         r0, [r4, #4]
  0008c	e3a01000	 mov         r1, #0
  00090	eb000000	 bl          OALWakeupLatency_UpdateDomainState

; 952  :                 }
; 953  :             else

  00094	ea00000c	 b           |$cleanUp$47939|
  00098		 |$LN6@OALIoCtlPr@10|

; 954  :                 {
; 955  :                 PrcmDomainSetPowerState(pIn->powerDomain,
; 956  :                     pIn->powerState,
; 957  :                     pIn->logicState
; 958  :                     );

  00098	e1a01003	 mov         r1, r3
  0009c		 |$LN21@OALIoCtlPr@10|
  0009c	e594200c	 ldr         r2, [r4, #0xC]
  000a0	eb000000	 bl          PrcmDomainSetPowerState

; 959  :                 }
; 960  :             break;

  000a4	ea000008	 b           |$cleanUp$47939|
  000a8		 |$LN4@OALIoCtlPr@10|

; 961  : 
; 962  :         case POWERDOMAIN_CORE:
; 963  :             if (pIn->powerState == POWERSTATE_OFF)

  000a8	e5943008	 ldr         r3, [r4, #8]
  000ac	e3530000	 cmp         r3, #0
  000b0	1afffff8	 bne         |$LN6@OALIoCtlPr@10|

; 964  :                 {
; 965  :                 PrcmDomainSetPowerState(pIn->powerDomain,
; 966  :                     POWERSTATE_RETENTION,
; 967  :                     LOGICRETSTATE_LOGICOFF_DOMAINRET
; 968  :                     );

  000b4	e3a02000	 mov         r2, #0
  000b8	e3a01001	 mov         r1, #1
  000bc	eb000000	 bl          PrcmDomainSetPowerState

; 969  : 
; 970  :                 // need to notify wakeup latency framework
; 971  :                 // what the actual power domain state will be
; 972  :                 OALWakeupLatency_UpdateDomainState(pIn->powerDomain,
; 973  :                     POWERSTATE_OFF,
; 974  :                     LOGICRETSTATE_LOGICOFF_DOMAINRET
; 975  :                     );

  000c0	e3a02000	 mov         r2, #0

; 976  :                 }
; 977  :             else

  000c4	eaffffef	 b           |$LN22@OALIoCtlPr@10|
  000c8		 |$LN11@OALIoCtlPr@10|

; 924  :         {
; 925  :         rc = FALSE;

  000c8	e3a05000	 mov         r5, #0
  000cc		 |$cleanUp$47939|

; 914  :     BOOL rc = TRUE;
; 915  :     IOCTL_PRCM_DOMAIN_SET_POWERSTATE_IN *pIn;
; 916  : 
; 917  :     UNREFERENCED_PARAMETER(outSize);
; 918  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 919  :     UNREFERENCED_PARAMETER(code);
; 920  : 
; 921  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDomainSetPowerState\r\n"));

  000cc	e5963440	 ldr         r3, [r6, #0x440]

; 991  :         }
; 992  : 
; 993  : cleanUp:
; 994  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDomainSetPowerState(rc = %d)\r\n", rc));

  000d0	e3130901	 tst         r3, #1, 18
  000d4	13130004	 tstne       r3, #4
  000d8	159f0010	 ldrne       r0, [pc, #0x10]
  000dc	11a01005	 movne       r1, r5
  000e0	1b000000	 blne        NKDbgPrintfW

; 995  :     return rc;
; 996  : }

  000e4	e1a00005	 mov         r0, r5
  000e8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$LN26@OALIoCtlPr@10|
  000f0		 |$LN27@OALIoCtlPr@10|
  000f0	00000000	 DCD         |??_C@_1FI@HLFNCHGP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe@|
  000f4		 |$LN28@OALIoCtlPr@10|
  000f4	00000000	 DCD         |??_C@_1EG@FCCADHII@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe@|
  000f8		 |$LN29@OALIoCtlPr@10|
  000f8	00000000	 DCD         |dpCurSettings|
  000fc		 |$M49596|

			 ENDP  ; |OALIoCtlPrcmDomainSetPowerState|

	EXPORT	|OALIoCtlPrcmSetSuspendState|
	EXPORT	|??_C@_1FA@LOEOCPDH@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAS?$AAe?$AAt?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@DKNNCPML@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAS?$AAe?$AAt?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALWakeupLatency_SetSuspendState|

  00000			 AREA	 |.pdata|, PDATA
|$T49618| DCD	|$LN11@OALIoCtlPr@11|
	DCD	0x40002001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LOEOCPDH@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAS?$AAe?$AAt?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "u", 0x0, "s"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@DKNNCPML@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAS?$AAe?$AAt?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "u", 0x0, "s"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPrcmSetSuspendState| PROC

; 1013 : {

  00000		 |$LN11@OALIoCtlPr@11|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49615|
  00004	e1a07002	 mov         r7, r2
  00008	e1a06001	 mov         r6, r1

; 1014 :     BOOL rc = FALSE;
; 1015 :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmSetSuspendState\r\n"));

  0000c	e59f5068	 ldr         r5, [pc, #0x68]
  00010	e3a04000	 mov         r4, #0
  00014	e5953440	 ldr         r3, [r5, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN5@OALIoCtlPr@11|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN5@OALIoCtlPr@11|
  00028	e59f0048	 ldr         r0, [pc, #0x48]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5953440	 ldr         r3, [r5, #0x440]
  00034		 |$LN5@OALIoCtlPr@11|

; 1016 : 
; 1017 :     UNREFERENCED_PARAMETER(outSize);
; 1018 :     UNREFERENCED_PARAMETER(pOutSize);
; 1019 :     UNREFERENCED_PARAMETER(pOutBuffer);
; 1020 :     UNREFERENCED_PARAMETER(code);
; 1021 : 
; 1022 :     if (pInBuffer == NULL || inSize != sizeof(DWORD)) goto cleanUp;

  00034	e3560000	 cmp         r6, #0
  00038	0a000005	 beq         |$cleanUp$47976|
  0003c	e3570004	 cmp         r7, #4
  00040	1a000003	 bne         |$cleanUp$47976|

; 1023 : 
; 1024 :     rc = OALWakeupLatency_SetSuspendState(*(DWORD*)pInBuffer);

  00044	e5960000	 ldr         r0, [r6]
  00048	eb000000	 bl          OALWakeupLatency_SetSuspendState
  0004c	e5953440	 ldr         r3, [r5, #0x440]
  00050	e1a04000	 mov         r4, r0
  00054		 |$cleanUp$47976|

; 1025 : 
; 1026 : cleanUp:
; 1027 :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmSetSuspendState(rc = %d)\r\n", rc));

  00054	e3130901	 tst         r3, #1, 18
  00058	13130004	 tstne       r3, #4
  0005c	159f0010	 ldrne       r0, [pc, #0x10]
  00060	11a01004	 movne       r1, r4
  00064	1b000000	 blne        NKDbgPrintfW

; 1028 :     return rc;
; 1029 : }

  00068	e1a00004	 mov         r0, r4
  0006c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN12@OALIoCtlPr@11|
  00074		 |$LN13@OALIoCtlPr@11|
  00074	00000000	 DCD         |??_C@_1FA@LOEOCPDH@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAS?$AAe?$AAt?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5@|
  00078		 |$LN14@OALIoCtlPr@11|
  00078	00000000	 DCD         |??_C@_1DO@DKNNCPML@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAS?$AAe?$AAt?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  0007c		 |$LN15@OALIoCtlPr@11|
  0007c	00000000	 DCD         |dpCurSettings|
  00080		 |$M49616|

			 ENDP  ; |OALIoCtlPrcmSetSuspendState|

	EXPORT	|OALIoCtlOppRequest|
	EXPORT	|??_C@_1DO@PHDKNHBH@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAO?$AAp?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@LGFHCAO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAO?$AAp?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SetOpp|

  00000			 AREA	 |.pdata|, PDATA
|$T49638| DCD	|$LN12@OALIoCtlOp|
	DCD	0x40002401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@PHDKNHBH@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAO?$AAp?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "O", 0x0, "p", 0x0, "p", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@LGFHCAO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAO?$AAp?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "O", 0x0, "p", 0x0, "p", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlOppRequest| PROC

; 1046 : {

  00000		 |$LN12@OALIoCtlOp|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49635|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1

; 1047 :     BOOL rc = FALSE;
; 1048 :     IOCTL_OPP_REQUEST_IN *pOppRequest;
; 1049 :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlOppRequest\r\n"));

  0000c	e59f6078	 ldr         r6, [pc, #0x78]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN6@OALIoCtlOp|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN6@OALIoCtlOp|
  00028	e59f0058	 ldr         r0, [pc, #0x58]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5963440	 ldr         r3, [r6, #0x440]
  00034		 |$LN6@OALIoCtlOp|

; 1050 : 
; 1051 :     UNREFERENCED_PARAMETER(outSize);
; 1052 :     UNREFERENCED_PARAMETER(pOutSize);
; 1053 :     UNREFERENCED_PARAMETER(pOutBuffer);
; 1054 :     UNREFERENCED_PARAMETER(code);
; 1055 : 
; 1056 :     if (pInBuffer == NULL || inSize != sizeof(IOCTL_OPP_REQUEST_IN)) goto cleanUp;

  00034	e3550000	 cmp         r5, #0
  00038	0a000009	 beq         |$cleanUp$48001|
  0003c	e3570048	 cmp         r7, #0x48
  00040	1a000007	 bne         |$cleanUp$48001|

; 1057 :     
; 1058 :     pOppRequest = (IOCTL_OPP_REQUEST_IN*)pInBuffer;
; 1059 :     if (pOppRequest->dwCount > MAX_DVFS_DOMAINS) goto cleanUp;

  00044	e5952004	 ldr         r2, [r5, #4]
  00048	e3520008	 cmp         r2, #8
  0004c	8a000004	 bhi         |$cleanUp$48001|

; 1060 :     
; 1061 :     rc = SetOpp(pOppRequest->rgDomains, 
; 1062 :             pOppRequest->rgOpps, 
; 1063 :             pOppRequest->dwCount
; 1064 :             );

  00050	e2851028	 add         r1, r5, #0x28
  00054	e2850008	 add         r0, r5, #8
  00058	eb000000	 bl          SetOpp
  0005c	e5963440	 ldr         r3, [r6, #0x440]
  00060	e1a04000	 mov         r4, r0
  00064		 |$cleanUp$48001|

; 1065 : 
; 1066 : cleanUp:    
; 1067 :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlOppRequest(rc = %d)\r\n", rc));

  00064	e3130901	 tst         r3, #1, 18
  00068	13130004	 tstne       r3, #4
  0006c	159f0010	 ldrne       r0, [pc, #0x10]
  00070	11a01004	 movne       r1, r4
  00074	1b000000	 blne        NKDbgPrintfW

; 1068 :     return rc;
; 1069 : }

  00078	e1a00004	 mov         r0, r4
  0007c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN13@OALIoCtlOp|
  00084		 |$LN14@OALIoCtlOp|
  00084	00000000	 DCD         |??_C@_1DO@PHDKNHBH@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAO?$AAp?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00088		 |$LN15@OALIoCtlOp|
  00088	00000000	 DCD         |??_C@_1CM@LGFHCAO@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAO?$AAp?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0008c		 |$LN16@OALIoCtlOp|
  0008c	00000000	 DCD         |dpCurSettings|
  00090		 |$M49636|

			 ENDP  ; |OALIoCtlOppRequest|

	EXPORT	|OALIoCtlSmartReflexControl|
	EXPORT	|??_C@_1EO@KHFBABJJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@DBFHMFOM@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SmartReflex_EnableMonitor|

  00000			 AREA	 |.pdata|, PDATA
|$T49658| DCD	|$LN11@OALIoCtlSm|
	DCD	0x40002401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KHFBABJJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "S", 0x0, "m", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "l", 0x0, "e"
	DCB	0x0, "x", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@DBFHMFOM@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "S", 0x0, "m", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "l", 0x0, "e"
	DCB	0x0, "x", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlSmartReflexControl| PROC

; 1086 : {

  00000		 |$LN11@OALIoCtlSm|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49655|
  00004	e1a07002	 mov         r7, r2
  00008	e1a05001	 mov         r5, r1

; 1087 :     BOOL rc = FALSE;
; 1088 :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlSmartReflexControl\r\n"));

  0000c	e59f6078	 ldr         r6, [pc, #0x78]
  00010	e3a04000	 mov         r4, #0
  00014	e5963440	 ldr         r3, [r6, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN5@OALIoCtlSm|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN5@OALIoCtlSm|
  00028	e59f0058	 ldr         r0, [pc, #0x58]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5963440	 ldr         r3, [r6, #0x440]
  00034		 |$LN5@OALIoCtlSm|

; 1089 :     
; 1090 :     UNREFERENCED_PARAMETER(outSize);
; 1091 :     UNREFERENCED_PARAMETER(pOutSize);
; 1092 :     UNREFERENCED_PARAMETER(pOutBuffer);
; 1093 :     UNREFERENCED_PARAMETER(code);
; 1094 : 
; 1095 :     if (pInBuffer == NULL || inSize < sizeof(BOOL)) goto cleanUp;

  00034	e3550000	 cmp         r5, #0
  00038	0a000009	 beq         |$cleanUp$48026|
  0003c	e3570004	 cmp         r7, #4
  00040	3a000007	 bcc         |$cleanUp$48026|

; 1096 : 
; 1097 :     SmartReflex_EnableMonitor(kSmartReflex_Channel1, *(BOOL*)pInBuffer);

  00044	e5951000	 ldr         r1, [r5]
  00048	e3a00000	 mov         r0, #0
  0004c	eb000000	 bl          SmartReflex_EnableMonitor

; 1098 :     SmartReflex_EnableMonitor(kSmartReflex_Channel2, *(BOOL*)pInBuffer);

  00050	e5951000	 ldr         r1, [r5]
  00054	e3a00001	 mov         r0, #1
  00058	eb000000	 bl          SmartReflex_EnableMonitor

; 1099 : 
; 1100 :     rc = TRUE;

  0005c	e5963440	 ldr         r3, [r6, #0x440]
  00060	e3a04001	 mov         r4, #1
  00064		 |$cleanUp$48026|

; 1101 : 
; 1102 : cleanUp:    
; 1103 :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlSmartReflexControl(rc = %d)\r\n", rc));

  00064	e3130901	 tst         r3, #1, 18
  00068	13130004	 tstne       r3, #4
  0006c	159f0010	 ldrne       r0, [pc, #0x10]
  00070	11a01004	 movne       r1, r4
  00074	1b000000	 blne        NKDbgPrintfW

; 1104 :     return rc;
; 1105 : }

  00078	e1a00004	 mov         r0, r4
  0007c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00080	e12fff1e	 bx          lr
  00084		 |$LN12@OALIoCtlSm|
  00084		 |$LN13@OALIoCtlSm|
  00084	00000000	 DCD         |??_C@_1EO@KHFBABJJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN@|
  00088		 |$LN14@OALIoCtlSm|
  00088	00000000	 DCD         |??_C@_1DM@DBFHMFOM@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  0008c		 |$LN15@OALIoCtlSm|
  0008c	00000000	 DCD         |dpCurSettings|
  00090		 |$M49656|

			 ENDP  ; |OALIoCtlSmartReflexControl|

	EXPORT	|OALIoCtlUpdateRetentionVoltages|
	EXPORT	|??_C@_1FI@NIAMEIGG@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAt?$AAe?$AAn?$AAt?$AAi?$AAo?$AAn?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@LLINCBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAt?$AAe?$AAn?$AAt?$AAi?$AAo?$AAn?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs@| [ DATA ] ; `string'
	IMPORT	|UpdateRetentionVoltages|

  00000			 AREA	 |.pdata|, PDATA
|$T49678| DCD	|$LN11@OALIoCtlUp|
	DCD	0x40002001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@NIAMEIGG@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAt?$AAe?$AAn?$AAt?$AAi?$AAo?$AAn?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "V"
	DCB	0x0, "o", 0x0, "l", 0x0, "t", 0x0, "a", 0x0, "g", 0x0, "e"
	DCB	0x0, "s", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@LLINCBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAt?$AAe?$AAn?$AAt?$AAi?$AAo?$AAn?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "V"
	DCB	0x0, "o", 0x0, "l", 0x0, "t", 0x0, "a", 0x0, "g", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlUpdateRetentionVoltages| PROC

; 1122 : {

  00000		 |$LN11@OALIoCtlUp|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49675|
  00004	e1a07002	 mov         r7, r2
  00008	e1a06001	 mov         r6, r1

; 1123 :     IOCTL_RETENTION_VOLTAGES *pData;
; 1124 :     BOOL rc = FALSE;
; 1125 : 
; 1126 :     UNREFERENCED_PARAMETER(code);
; 1127 :     UNREFERENCED_PARAMETER(pOutSize);
; 1128 :     UNREFERENCED_PARAMETER(outSize);
; 1129 :     UNREFERENCED_PARAMETER(pOutBuffer);
; 1130 : 
; 1131 :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlUpdateRetentionVoltages\r\n"));

  0000c	e59f5068	 ldr         r5, [pc, #0x68]
  00010	e3a04000	 mov         r4, #0
  00014	e5953440	 ldr         r3, [r5, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN5@OALIoCtlUp|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN5@OALIoCtlUp|
  00028	e59f0048	 ldr         r0, [pc, #0x48]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5953440	 ldr         r3, [r5, #0x440]
  00034		 |$LN5@OALIoCtlUp|

; 1132 : 
; 1133 :     if (pInBuffer == NULL || inSize < sizeof(IOCTL_RETENTION_VOLTAGES)) goto cleanUp;

  00034	e3560000	 cmp         r6, #0
  00038	0a000005	 beq         |$cleanUp$48052|
  0003c	e3570008	 cmp         r7, #8
  00040	3a000003	 bcc         |$cleanUp$48052|

; 1134 : 
; 1135 :     pData = (IOCTL_RETENTION_VOLTAGES *)pInBuffer;
; 1136 :     UpdateRetentionVoltages(pData);

  00044	e1a00006	 mov         r0, r6
  00048	eb000000	 bl          UpdateRetentionVoltages

; 1137 : 
; 1138 :     rc = TRUE;

  0004c	e5953440	 ldr         r3, [r5, #0x440]
  00050	e3a04001	 mov         r4, #1
  00054		 |$cleanUp$48052|

; 1139 : 
; 1140 : cleanUp:
; 1141 :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlUpdateRetentionVoltages(rc = %d)\r\n", rc));

  00054	e3130901	 tst         r3, #1, 18
  00058	13130004	 tstne       r3, #4
  0005c	159f0010	 ldrne       r0, [pc, #0x10]
  00060	11a01004	 movne       r1, r4
  00064	1b000000	 blne        NKDbgPrintfW

; 1142 :     return rc;
; 1143 : }

  00068	e1a00004	 mov         r0, r4
  0006c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN12@OALIoCtlUp|
  00074		 |$LN13@OALIoCtlUp|
  00074	00000000	 DCD         |??_C@_1FI@NIAMEIGG@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAt?$AAe?$AAn?$AAt?$AAi?$AAo?$AAn?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs@|
  00078		 |$LN14@OALIoCtlUp|
  00078	00000000	 DCD         |??_C@_1EG@LLINCBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAR?$AAe?$AAt?$AAe?$AAn?$AAt?$AAi?$AAo?$AAn?$AAV?$AAo?$AAl?$AAt?$AAa?$AAg?$AAe?$AAs@|
  0007c		 |$LN15@OALIoCtlUp|
  0007c	00000000	 DCD         |dpCurSettings|
  00080		 |$M49676|

			 ENDP  ; |OALIoCtlUpdateRetentionVoltages|

	EXPORT	|OALIoCtlHalContextSaveGetBuffer|
	EXPORT	|??_C@_1FI@JNLFHLFE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAa?$AAv?$AAe?$AAG?$AAe?$AAt?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@NGBNIFNG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAa?$AAv?$AAe?$AAG?$AAe?$AAt?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49697| DCD	|$LN11@OALIoCtlHa|
	DCD	0x40002001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@JNLFHLFE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAa?$AAv?$AAe?$AAG?$AAe?$AAt?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t"
	DCB	0x0, "S", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@NGBNIFNG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAa?$AAv?$AAe?$AAG?$AAe?$AAt?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t"
	DCB	0x0, "S", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, "G", 0x0, "e"
	DCB	0x0, "t", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalContextSaveGetBuffer| PROC

; 1162 : {

  00000		 |$LN11@OALIoCtlHa|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M49694|
  00004	e1a06003	 mov         r6, r3

; 1163 :     BOOL rc = FALSE;
; 1164 :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlHalContextSaveGetBuffer\r\n"));

  00008	e59f506c	 ldr         r5, [pc, #0x6C]
  0000c	e3a04000	 mov         r4, #0
  00010	e5951440	 ldr         r1, [r5, #0x440]
  00014	e3110a01	 tst         r1, #1, 20
  00018	0a000004	 beq         |$LN5@OALIoCtlHa|
  0001c	e3110004	 tst         r1, #4
  00020	0a000002	 beq         |$LN5@OALIoCtlHa|
  00024	e59f004c	 ldr         r0, [pc, #0x4C]
  00028	eb000000	 bl          NKDbgPrintfW
  0002c	e5951440	 ldr         r1, [r5, #0x440]
  00030		 |$LN5@OALIoCtlHa|

; 1165 : 
; 1166 :     UNREFERENCED_PARAMETER(inSize);
; 1167 :     UNREFERENCED_PARAMETER(pOutSize);
; 1168 :     UNREFERENCED_PARAMETER(pInBuffer);
; 1169 :     UNREFERENCED_PARAMETER(code);
; 1170 : 
; 1171 : 
; 1172 :     if (pOutBuffer == NULL || outSize < sizeof(UINT32**)) goto cleanUp;

  00030	e3560000	 cmp         r6, #0
  00034	0a000005	 beq         |$cleanUp$48076|
  00038	e59d2010	 ldr         r2, [sp, #0x10]
  0003c	e3520004	 cmp         r2, #4

; 1173 : 
; 1174 :     *(UINT32**)pOutBuffer = &g_ffContextSaveMask;

  00040	259f302c	 ldrcs       r3, [pc, #0x2C]

; 1175 : 
; 1176 :     rc = TRUE;

  00044	23a04001	 movcs       r4, #1
  00048	25863000	 strcs       r3, [r6]
  0004c	25951440	 ldrcs       r1, [r5, #0x440]
  00050		 |$cleanUp$48076|

; 1177 : 
; 1178 : cleanUp:
; 1179 :     OALMSG(OAL_INTR&&OAL_FUNC,
; 1180 :         (L"-OALIoCtlHalContextSaveGetBuffer(rc = %d)\r\n", rc)
; 1181 :         );

  00050	e3110901	 tst         r1, #1, 18
  00054	13110004	 tstne       r1, #4
  00058	159f0010	 ldrne       r0, [pc, #0x10]
  0005c	11a01004	 movne       r1, r4
  00060	1b000000	 blne        NKDbgPrintfW

; 1182 :     return rc;
; 1183 : }

  00064	e1a00004	 mov         r0, r4
  00068	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$LN12@OALIoCtlHa|
  00070		 |$LN13@OALIoCtlHa|
  00070	00000000	 DCD         |??_C@_1FI@JNLFHLFE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAa?$AAv?$AAe?$AAG?$AAe?$AAt?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr@|
  00074		 |$LN14@OALIoCtlHa|
  00074	00000000	 DCD         |g_ffContextSaveMask|
  00078		 |$LN15@OALIoCtlHa|
  00078	00000000	 DCD         |??_C@_1EG@NGBNIFNG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAS?$AAa?$AAv?$AAe?$AAG?$AAe?$AAt?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr@|
  0007c		 |$LN16@OALIoCtlHa|
  0007c	00000000	 DCD         |dpCurSettings|
  00080		 |$M49695|

			 ENDP  ; |OALIoCtlHalContextSaveGetBuffer|

	EXPORT	|ForceStandbyUSB|
	IMPORT	|g_pSysCtrlGenReg|
	IMPORT	|PrcmDeviceEnableClocks|

  00000			 AREA	 |.pdata|, PDATA
|$T49709| DCD	|$LN5@ForceStand|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ForceStandbyUSB| PROC

; 1193 : {

  00000		 |$LN5@ForceStand|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M49706|

; 1194 :     // ES1.0 only
; 1195 :     //force_standby_usb(void)
; 1196 :     PrcmDeviceEnableClocks(OMAP_DEVICE_OMAPCTRL, TRUE);

  00004	e3a01001	 mov         r1, #1
  00008	e3a00004	 mov         r0, #4
  0000c	eb000000	 bl          PrcmDeviceEnableClocks

; 1197 :     SETREG32(&g_pSysCtrlGenReg->CONTROL_DEVCONF0, (1 << 15));

  00010	e59f3020	 ldr         r3, [pc, #0x20]

; 1198 :     PrcmDeviceEnableClocks(OMAP_DEVICE_OMAPCTRL, FALSE);

  00014	e3a01000	 mov         r1, #0
  00018	e3a00004	 mov         r0, #4
  0001c	e5932000	 ldr         r2, [r3]
  00020	e5923004	 ldr         r3, [r2, #4]
  00024	e3833902	 orr         r3, r3, #2, 18
  00028	e5823004	 str         r3, [r2, #4]
  0002c	eb000000	 bl          PrcmDeviceEnableClocks

; 1199 : }

  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN6@ForceStand|
  00038		 |$LN7@ForceStand|
  00038	00000000	 DCD         |g_pSysCtrlGenReg|
  0003c		 |$M49707|

			 ENDP  ; |ForceStandbyUSB|

	EXPORT	|ReleaseIvaReset|
	IMPORT	|PrcmDomainResetRelease|
	IMPORT	|PrcmClockSetDpllAutoIdleState|

  00000			 AREA	 |.pdata|, PDATA
|$T49718| DCD	|$LN5@ReleaseIva|
	DCD	0x40002401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReleaseIvaReset| PROC

; 1209 : {

  00000		 |$LN5@ReleaseIva|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M49715|

; 1210 :     // ES 1.0 only
; 1211 :     // workaround for errata 1.27
; 1212 :     //
; 1213 :     PrcmDeviceEnableClocks(OMAP_DEVICE_OMAPCTRL, TRUE);

  00004	e3a01001	 mov         r1, #1
  00008	e3a00004	 mov         r0, #4
  0000c	eb000000	 bl          PrcmDeviceEnableClocks

; 1214 :     
; 1215 :     PrcmClockSetDpllAutoIdleState(kDPLL2, DPLL_AUTOIDLE_DISABLED);

  00010	e3a01000	 mov         r1, #0
  00014	e3a00001	 mov         r0, #1
  00018	eb000000	 bl          PrcmClockSetDpllAutoIdleState

; 1216 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_IVA2_BOOTMOD, 1);

  0001c	e59f4068	 ldr         r4, [pc, #0x68]
  00020	e3a02001	 mov         r2, #1

; 1217 :     PrcmDomainResetRelease(POWERDOMAIN_IVA2, RST2_IVA2);

  00024	e3a01002	 mov         r1, #2
  00028	e5943000	 ldr         r3, [r4]
  0002c	e3a00008	 mov         r0, #8
  00030	e5832194	 str         r2, [r3, #0x194]
  00034	eb000000	 bl          PrcmDomainResetRelease

; 1218 :     PrcmDomainResetRelease(POWERDOMAIN_IVA2, RST1_IVA2);

  00038	e3a01001	 mov         r1, #1
  0003c	e3a00008	 mov         r0, #8
  00040	eb000000	 bl          PrcmDomainResetRelease

; 1219 :     PrcmClockSetDpllAutoIdleState(kDPLL2, DPLL_AUTOIDLE_LOWPOWERSTOPMODE);

  00044	e3a01001	 mov         r1, #1
  00048	e3a00001	 mov         r0, #1
  0004c	eb000000	 bl          PrcmClockSetDpllAutoIdleState

; 1220 : 
; 1221 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_IVA2_BOOTMOD, 0);

  00050	e5943000	 ldr         r3, [r4]

; 1222 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTCTRL_IVA2, 0);

  00054	e59f202c	 ldr         r2, [pc, #0x2C]
  00058	e3a0e000	 mov         lr, #0
  0005c	e583e194	 str         lr, [r3, #0x194]
  00060	e5923020	 ldr         r3, [r2, #0x20]

; 1223 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTST_IVA2, INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTST_IVA2));    
; 1224 : 
; 1225 :     PrcmDeviceEnableClocks(OMAP_DEVICE_OMAPCTRL, FALSE);

  00064	e3a01000	 mov         r1, #0
  00068	e3a00004	 mov         r0, #4
  0006c	e583e050	 str         lr, [r3, #0x50]
  00070	e5922020	 ldr         r2, [r2, #0x20]
  00074	e5923058	 ldr         r3, [r2, #0x58]
  00078	e5823058	 str         r3, [r2, #0x58]
  0007c	eb000000	 bl          PrcmDeviceEnableClocks

; 1226 : }

  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN6@ReleaseIva|
  00088		 |$LN7@ReleaseIva|
  00088	00000000	 DCD         |g_PrcmPrm|
  0008c		 |$LN8@ReleaseIva|
  0008c	00000000	 DCD         |g_pSysCtrlGenReg|
  00090		 |$M49716|

			 ENDP  ; |ReleaseIvaReset|

	EXPORT	|ResetDisplay|
	IMPORT	|OALTimerGetReg|
	IMPORT	|OALPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T49738| DCD	|$LN18@ResetDispl|
	DCD	0x40004d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetDisplay| PROC

; 1236 : {

  00000		 |$LN18@ResetDispl|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M49735|

; 1237 :     unsigned int        val;
; 1238 :     unsigned int        tcrr;
; 1239 :     OMAP_DISPC_REGS    *pDispRegs = OALPAtoUA(OMAP_DISC1_REGS_PA);

  00004	e59f0124	 ldr         r0, [pc, #0x124]
  00008	e3a01000	 mov         r1, #0
  0000c	eb000000	 bl          OALPAtoVA
  00010	e1a04000	 mov         r4, r0

; 1240 : 
; 1241 :     // enable all the interface and functional clocks
; 1242 :     PrcmDeviceEnableClocks(OMAP_DEVICE_DSS, TRUE);

  00014	e3a0003f	 mov         r0, #0x3F
  00018	e3a01001	 mov         r1, #1
  0001c	eb000000	 bl          PrcmDeviceEnableClocks

; 1243 :     PrcmDeviceEnableClocks(OMAP_DEVICE_DSS1, TRUE);

  00020	e3a01001	 mov         r1, #1
  00024	e3a00040	 mov         r0, #0x40
  00028	eb000000	 bl          PrcmDeviceEnableClocks

; 1244 :     PrcmDeviceEnableClocks(OMAP_DEVICE_DSS2, TRUE);

  0002c	e3a01001	 mov         r1, #1
  00030	e3a00041	 mov         r0, #0x41
  00034	eb000000	 bl          PrcmDeviceEnableClocks

; 1245 :     PrcmDeviceEnableClocks(OMAP_DEVICE_TVOUT, TRUE);

  00038	e3a01001	 mov         r1, #1
  0003c	e3a00042	 mov         r0, #0x42
  00040	eb000000	 bl          PrcmDeviceEnableClocks

; 1246 : 
; 1247 :     // check if digital output or the lcd output are enabled
; 1248 :     val = INREG16(&pDispRegs->DISPC_CONTROL);

  00044	e1d434b0	 ldrh        r3, [r4, #0x40]

; 1249 :     if(val & (DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE))

  00048	e59f50dc	 ldr         r5, [pc, #0xDC]
  0004c	e3a02b01	 mov         r2, #1, 22
  00050	e3130003	 tst         r3, #3
  00054	e382604c	 orr         r6, r2, #0x4C
  00058	0a000011	 beq         |$LN14@ResetDispl|

; 1250 :     {
; 1251 :         // disable the lcd output and digital output
; 1252 :         val &= ~(DISPC_CONTROL_DIGITALENABLE | DISPC_CONTROL_LCDENABLE);

  0005c	e3c33003	 bic         r3, r3, #3

; 1253 :         OUTREG32(&pDispRegs->DISPC_CONTROL, val);

  00060	e5843040	 str         r3, [r4, #0x40]

; 1254 : 
; 1255 :         // wait until frame is done
; 1256 :         tcrr = OALTimerGetReg(&g_pTimerRegs->TCRR);

  00064	e5953000	 ldr         r3, [r5]
  00068	e2830028	 add         r0, r3, #0x28
  0006c	eb000000	 bl          OALTimerGetReg

; 1257 :         OUTREG32(&pDispRegs->DISPC_IRQSTATUS, DISPC_IRQSTATUS_FRAMEDONE);                

  00070	e3a03001	 mov         r3, #1
  00074	e5843018	 str         r3, [r4, #0x18]

; 1258 :         while ((INREG32(&pDispRegs->DISPC_IRQSTATUS) & DISPC_IRQSTATUS_FRAMEDONE) == 0)

  00078	e5943018	 ldr         r3, [r4, #0x18]
  0007c	e3130001	 tst         r3, #1
  00080	1a000007	 bne         |$LN14@ResetDispl|
  00084	e5952000	 ldr         r2, [r5]
  00088		 |$LL6@ResetDispl|

; 1259 :         {
; 1260 :            if ((g_pTimerRegs->TCRR - tcrr) > DISPLAY_TIMEOUT) break;

  00088	e5923028	 ldr         r3, [r2, #0x28]
  0008c	e0433000	 sub         r3, r3, r0
  00090	e1530006	 cmp         r3, r6
  00094	8a000002	 bhi         |$LN14@ResetDispl|
  00098	e5943018	 ldr         r3, [r4, #0x18]
  0009c	e3130001	 tst         r3, #1
  000a0	0afffff8	 beq         |$LL6@ResetDispl|
  000a4		 |$LN14@ResetDispl|

; 1261 :         }        
; 1262 :     }
; 1263 : 
; 1264 :     // reset the display controller
; 1265 :     SETREG32(&pDispRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_SOFTRESET);

  000a4	e5943010	 ldr         r3, [r4, #0x10]
  000a8	e3833002	 orr         r3, r3, #2
  000ac	e5843010	 str         r3, [r4, #0x10]

; 1266 :     
; 1267 :     // wait until reset completes OR timeout occurs   
; 1268 :     tcrr = OALTimerGetReg(&g_pTimerRegs->TCRR);

  000b0	e5953000	 ldr         r3, [r5]
  000b4	e2830028	 add         r0, r3, #0x28
  000b8	eb000000	 bl          OALTimerGetReg

; 1269 :     while ((INREG32(&pDispRegs->DISPC_SYSSTATUS) & DISPC_SYSSTATUS_RESETDONE) == 0)

  000bc	e5943014	 ldr         r3, [r4, #0x14]
  000c0	e3130001	 tst         r3, #1
  000c4	1a000007	 bne         |$LN15@ResetDispl|
  000c8	e5952000	 ldr         r2, [r5]
  000cc		 |$LL3@ResetDispl|

; 1270 :     {
; 1271 :         // delay
; 1272 :         if ((g_pTimerRegs->TCRR - tcrr) > DISPLAY_TIMEOUT) break;

  000cc	e5923028	 ldr         r3, [r2, #0x28]
  000d0	e0433000	 sub         r3, r3, r0
  000d4	e1530006	 cmp         r3, r6
  000d8	8a000002	 bhi         |$LN15@ResetDispl|
  000dc	e5943014	 ldr         r3, [r4, #0x14]
  000e0	e3130001	 tst         r3, #1
  000e4	0afffff8	 beq         |$LL3@ResetDispl|
  000e8		 |$LN15@ResetDispl|
  000e8	e3a03c22	 mov         r3, #0x22, 24

; 1273 :     }
; 1274 : 
; 1275 :     // Configure for smart-idle mode
; 1276 :     OUTREG32( &pDispRegs->DISPC_SYSCONFIG,
; 1277 :                   DISPC_SYSCONFIG_AUTOIDLE |
; 1278 :                   SYSCONFIG_SMARTIDLE |
; 1279 :                   SYSCONFIG_ENAWAKEUP |
; 1280 :                   SYSCONFIG_CLOCKACTIVITY_I_ON |
; 1281 :                   SYSCONFIG_SMARTSTANDBY
; 1282 :                   );

  000ec	e3833015	 orr         r3, r3, #0x15

; 1283 : 
; 1284 :     // restore old clock settings
; 1285 :     PrcmDeviceEnableClocks(OMAP_DEVICE_DSS, FALSE);

  000f0	e3a01000	 mov         r1, #0
  000f4	e3a0003f	 mov         r0, #0x3F
  000f8	e5843010	 str         r3, [r4, #0x10]
  000fc	eb000000	 bl          PrcmDeviceEnableClocks

; 1286 :     PrcmDeviceEnableClocks(OMAP_DEVICE_DSS1, FALSE);

  00100	e3a01000	 mov         r1, #0
  00104	e3a00040	 mov         r0, #0x40
  00108	eb000000	 bl          PrcmDeviceEnableClocks

; 1287 :     PrcmDeviceEnableClocks(OMAP_DEVICE_DSS2, FALSE);

  0010c	e3a01000	 mov         r1, #0
  00110	e3a00041	 mov         r0, #0x41
  00114	eb000000	 bl          PrcmDeviceEnableClocks

; 1288 :     PrcmDeviceEnableClocks(OMAP_DEVICE_TVOUT, FALSE);

  00118	e3a01000	 mov         r1, #0
  0011c	e3a00042	 mov         r0, #0x42
  00120	eb000000	 bl          PrcmDeviceEnableClocks

; 1289 : 
; 1290 : }

  00124	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00128	e12fff1e	 bx          lr
  0012c		 |$LN19@ResetDispl|
  0012c		 |$LN20@ResetDispl|
  0012c	00000000	 DCD         |g_pTimerRegs|
  00130		 |$LN21@ResetDispl|
  00130	48050400	 DCD         0x48050400
  00134		 |$M49736|

			 ENDP  ; |ResetDisplay|

	EXPORT	|PrcmSetIVA2OffMode|
	EXPORT	|??_C@_1FK@FIFKBPFK@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAa?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@HMFNDBFB@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAO?$AAF?$AAF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@ELNCGKNN@?$AAl?$AAp?$AAm?$AA?4?$AAk?$AAo?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA_?$AAR?$AAS?$AAT?$AA1?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@PFIDHFBP@?$AAl?$AAp?$AAm?$AA?4?$AAk?$AAo?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAd?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAb?$AAe?$AAc?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@ENJPGDMG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAO?$AAN?$AA?5@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T49770| DCD	|$LN38@PrcmSetIVA|
	DCD	0x40006f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FIFKBPFK@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAa?$AAt?$AAi@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "V", 0x0, "A", 0x0, "2", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@HMFNDBFB@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAO?$AAF?$AAF@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "V", 0x0, "A", 0x0, "2", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "O", 0x0, "F"
	DCB	0x0, "F", 0x0, " ", 0x0, "(", 0x0, "2", 0x0, ")", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@ELNCGKNN@?$AAl?$AAp?$AAm?$AA?4?$AAk?$AAo?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA_?$AAR?$AAS?$AAT?$AA1?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5@| DCB "l"
	DCB	0x0, "p", 0x0, "m", 0x0, ".", 0x0, "k", 0x0, "o", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "V", 0x0, "A", 0x0, "2"
	DCB	0x0, "_", 0x0, "R", 0x0, "S", 0x0, "T", 0x0, "1", 0x0, " "
	DCB	0x0, "s", 0x0, "i", 0x0, "g", 0x0, "n", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "w", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@PFIDHFBP@?$AAl?$AAp?$AAm?$AA?4?$AAk?$AAo?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAd?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAb?$AAe?$AAc?$AAo@| DCB "l"
	DCB	0x0, "p", 0x0, "m", 0x0, ".", 0x0, "k", 0x0, "o", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "V", 0x0, "A", 0x0, "2"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "e", 0x0, " ", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@ENJPGDMG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAO?$AAN?$AA?5@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "V", 0x0, "A", 0x0, "2", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "O", 0x0, "N"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "L", 0x0, "P"
	DCB	0x0, "M", 0x0, "_", 0x0, "o", 0x0, "n", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmSetIVA2OffMode| PROC

; 1304 : {

  00000		 |$LN38@PrcmSetIVA|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M49767|

; 1305 :     UINT32 data, i;
; 1306 : 	
; 1307 :      /* MPU controlled ON + ACTIVE */
; 1308 :     // set next IVA2 power state to ON
; 1309 : 
; 1310 :     data = INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->PM_PWSTCTRL_IVA2);

  00004	e59f51ac	 ldr         r5, [pc, #0x1AC]

; 1311 :     data |= (3 << 0);
; 1312 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->PM_PWSTCTRL_IVA2, data);
; 1313 : 
; 1314 :     // start a software supervised wake-up transition
; 1315 :     OUTREG32(&g_PrcmCm.pOMAP_IVA2_CM->CM_CLKSTCTRL_IVA2, 0x2);

  00008	e59f41a4	 ldr         r4, [pc, #0x1A4]
  0000c	e3a00002	 mov         r0, #2
  00010	e5952020	 ldr         r2, [r5, #0x20]

; 1316 : 
; 1317 :     // wait for IVA2 power domain to switch ON
; 1318 :     for (i = 0; i < MAX_IVA2_WAIT_COUNT; i++) {

  00014	e3a01000	 mov         r1, #0
  00018	e59230e0	 ldr         r3, [r2, #0xE0]
  0001c	e3833003	 orr         r3, r3, #3
  00020	e58230e0	 str         r3, [r2, #0xE0]
  00024	e5943020	 ldr         r3, [r4, #0x20]
  00028	e5830048	 str         r0, [r3, #0x48]
  0002c	e5952020	 ldr         r2, [r5, #0x20]
  00030		 |$LL20@PrcmSetIVA|

; 1319 :        if((INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->PM_PWSTST_IVA2) & 0x3) == 0x3 ) {

  00030	e59230e4	 ldr         r3, [r2, #0xE4]
  00034	e2033003	 and         r3, r3, #3
  00038	e3530003	 cmp         r3, #3
  0003c	0a000002	 beq         |$LN27@PrcmSetIVA|
  00040	e2811001	 add         r1, r1, #1
  00044	e3510805	 cmp         r1, #5, 16
  00048	3afffff8	 bcc         |$LL20@PrcmSetIVA|
  0004c		 |$LN27@PrcmSetIVA|

; 1320 :        
; 1321 :             break;
; 1322 :         }
; 1323 :     }
; 1324 :     if (i == MAX_IVA2_WAIT_COUNT) {

  0004c	e3510805	 cmp         r1, #5, 16
  00050	1a000002	 bne         |$LN16@PrcmSetIVA|

; 1325 :         RETAILMSG(1, (L"Error: IVA2 power domain not ON in LPM_on\n"));

  00054	e59f0154	 ldr         r0, [pc, #0x154]
  00058	eb000000	 bl          NKDbgPrintfW

; 1326 :         goto fail;

  0005c	ea00004a	 b           |$fail$48139|
  00060		 |$LN16@PrcmSetIVA|

; 1327 :     }
; 1328 :     // clear power-on transition request
; 1329 :     OUTREG32(&g_PrcmCm.pOMAP_IVA2_CM->CM_CLKSTCTRL_IVA2, 0);

  00060	e5943020	 ldr         r3, [r4, #0x20]
  00064	e3a06000	 mov         r6, #0

; 1330 : 
; 1331 :     // turn on IVA2 domain functional clock
; 1332 :     OUTREG32(&g_PrcmCm.pOMAP_IVA2_CM->CM_FCLKEN_IVA2, 1);

  00068	e3a07001	 mov         r7, #1
  0006c	e5836048	 str         r6, [r3, #0x48]
  00070	e5943020	 ldr         r3, [r4, #0x20]

; 1333 : 
; 1334 :     PrcmDomainResetRelease(POWERDOMAIN_IVA2, RST2_IVA2);

  00074	e3a01002	 mov         r1, #2
  00078	e3a00008	 mov         r0, #8
  0007c	e5837000	 str         r7, [r3]
  00080	eb000000	 bl          PrcmDomainResetRelease

; 1335 : 	
; 1336 :     // first wait for IVA2 state to become active
; 1337 :     for (i = 0; i < MAX_IVA2_WAIT_COUNT; i++) {

  00084	e5941020	 ldr         r1, [r4, #0x20]
  00088	e3a02000	 mov         r2, #0
  0008c		 |$LL15@PrcmSetIVA|

; 1338 :          if ((INREG32(&g_PrcmCm.pOMAP_IVA2_CM->CM_IDLEST_IVA2) & 0x1) ==0)  {        

  0008c	e5913020	 ldr         r3, [r1, #0x20]
  00090	e3130001	 tst         r3, #1
  00094	0a000002	 beq         |$LN28@PrcmSetIVA|
  00098	e2822001	 add         r2, r2, #1
  0009c	e3520805	 cmp         r2, #5, 16
  000a0	3afffff9	 bcc         |$LL15@PrcmSetIVA|
  000a4		 |$LN28@PrcmSetIVA|

; 1339 :             break;
; 1340 :         }
; 1341 :     }
; 1342 :     if (i == MAX_IVA2_WAIT_COUNT) {

  000a4	e3520805	 cmp         r2, #5, 16
  000a8	1a000002	 bne         |$LN11@PrcmSetIVA|

; 1343 :         RETAILMSG(1, (L"lpm.ko: Error: IVA2 did not become active\n"));

  000ac	e59f00f8	 ldr         r0, [pc, #0xF8]
  000b0	eb000000	 bl          NKDbgPrintfW
  000b4	ea000034	 b           |$fail$48139|
  000b8		 |$LN11@PrcmSetIVA|

; 1344 :         goto fail;
; 1345 :     }
; 1346 : 
; 1347 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_IVA2_BOOTMOD, 1);

  000b8	e59f30e8	 ldr         r3, [pc, #0xE8]

; 1348 : 
; 1349 :     // enable automatic clock gating
; 1350 :     OUTREG32(&g_PrcmCm.pOMAP_IVA2_CM->CM_CLKSTCTRL_IVA2, 0x3);

  000bc	e3a02003	 mov         r2, #3

; 1351 : 
; 1352 :     // set next IVA2 power state to OFF
; 1353 :     data = INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->PM_PWSTCTRL_IVA2);
; 1354 :     data &= ~(0x3);
; 1355 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->PM_PWSTCTRL_IVA2, data);
; 1356 : 
; 1357 :     // ensure the IVA2_SW_RST1 status bit is cleared
; 1358 :     data = INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTST_IVA2);
; 1359 :     data |= (1 << 8);
; 1360 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTST_IVA2, data);
; 1361 : 
; 1362 :     // release DSP from reset
; 1363 :     data = INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTCTRL_IVA2);
; 1364 :     data &= ~(1 << 0);
; 1365 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTCTRL_IVA2, data);
; 1366 : 
; 1367 :     // wait for IVA2_RST1 signal to be released
; 1368 :     for (i = 0; i < MAX_IVA2_WAIT_COUNT; i++) {

  000c0	e3a01000	 mov         r1, #0
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e5837194	 str         r7, [r3, #0x194]
  000cc	e5943020	 ldr         r3, [r4, #0x20]
  000d0	e5832048	 str         r2, [r3, #0x48]
  000d4	e5952020	 ldr         r2, [r5, #0x20]
  000d8	e59230e0	 ldr         r3, [r2, #0xE0]
  000dc	e3c33003	 bic         r3, r3, #3
  000e0	e58230e0	 str         r3, [r2, #0xE0]
  000e4	e5952020	 ldr         r2, [r5, #0x20]
  000e8	e5923058	 ldr         r3, [r2, #0x58]
  000ec	e3833c01	 orr         r3, r3, #1, 24
  000f0	e5823058	 str         r3, [r2, #0x58]
  000f4	e5952020	 ldr         r2, [r5, #0x20]
  000f8	e5923050	 ldr         r3, [r2, #0x50]
  000fc	e3c33001	 bic         r3, r3, #1
  00100	e5823050	 str         r3, [r2, #0x50]
  00104	e5950020	 ldr         r0, [r5, #0x20]
  00108		 |$LL10@PrcmSetIVA|

; 1369 :          if ((INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTST_IVA2) & (1 << 8)))  {        

  00108	e5903058	 ldr         r3, [r0, #0x58]
  0010c	e3130c01	 tst         r3, #1, 24
  00110	1a000002	 bne         |$LN29@PrcmSetIVA|
  00114	e2811001	 add         r1, r1, #1
  00118	e3510805	 cmp         r1, #5, 16
  0011c	3afffff9	 bcc         |$LL10@PrcmSetIVA|
  00120		 |$LN29@PrcmSetIVA|

; 1370 :             break;
; 1371 :         }
; 1372 :     }
; 1373 :     if (i == MAX_IVA2_WAIT_COUNT) {

  00120	e3510805	 cmp         r1, #5, 16
  00124	1a000002	 bne         |$LN6@PrcmSetIVA|

; 1374 :         RETAILMSG(1, (L"lpm.ko: Error: IVA2_RST1 signal was not released\n"));

  00128	e59f0074	 ldr         r0, [pc, #0x74]
  0012c	eb000000	 bl          NKDbgPrintfW
  00130	ea000015	 b           |$fail$48139|
  00134		 |$LN6@PrcmSetIVA|

; 1375 :         goto fail;
; 1376 :     }
; 1377 : 
; 1378 :     // clear the IVA2_SW_RST1 status bit
; 1379 :     data = INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTST_IVA2);

  00134	e5903058	 ldr         r3, [r0, #0x58]

; 1380 :     data |= (1 << 8);
; 1381 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTST_IVA2, data);
; 1382 : 
; 1383 :     // wait for IVA2 power domain to switch OFF (~7 loops @ 312MHz)
; 1384 :     for (i = 0; i < MAX_IVA2_WAIT_COUNT; i++) {

  00138	e3a02000	 mov         r2, #0
  0013c	e3833c01	 orr         r3, r3, #1, 24
  00140	e5803058	 str         r3, [r0, #0x58]
  00144	e5951020	 ldr         r1, [r5, #0x20]
  00148		 |$LL5@PrcmSetIVA|

; 1385 :        if((INREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->PM_PWSTST_IVA2) & 0x3) == 0 ) {

  00148	e59130e4	 ldr         r3, [r1, #0xE4]
  0014c	e3130003	 tst         r3, #3
  00150	0a000002	 beq         |$LN30@PrcmSetIVA|
  00154	e2822001	 add         r2, r2, #1
  00158	e3520805	 cmp         r2, #5, 16
  0015c	3afffff9	 bcc         |$LL5@PrcmSetIVA|
  00160		 |$LN30@PrcmSetIVA|

; 1386 :             break;
; 1387 :         }
; 1388 :     }
; 1389 :     if (i == MAX_IVA2_WAIT_COUNT) {

  00160	e3520805	 cmp         r2, #5, 16
  00164	1a000002	 bne         |$LN1@PrcmSetIVA|

; 1390 :         RETAILMSG(1, (L"Error: IVA2 power domain not OFF (2)\n"));

  00168	e59f0030	 ldr         r0, [pc, #0x30]
  0016c	eb000000	 bl          NKDbgPrintfW
  00170	ea000005	 b           |$fail$48139|
  00174		 |$LN1@PrcmSetIVA|

; 1391 :         goto fail;
; 1392 :     }
; 1393 : 	
; 1394 :     // assert reset on DSP, SEQ
; 1395 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->RM_RSTCTRL_IVA2, 0x7);

  00174	e3a03007	 mov         r3, #7
  00178	e5813050	 str         r3, [r1, #0x50]

; 1396 : 	
; 1397 :     // disable automatic clock gating
; 1398 :     OUTREG32(&g_PrcmCm.pOMAP_IVA2_CM->CM_CLKSTCTRL_IVA2, 0);

  0017c	e5943020	 ldr         r3, [r4, #0x20]
  00180	e5836048	 str         r6, [r3, #0x48]

; 1399 : 
; 1400 :     // turn off IVA2 domain functional clock
; 1401 :     OUTREG32(&g_PrcmCm.pOMAP_IVA2_CM->CM_FCLKEN_IVA2, 0);

  00184	e5943020	 ldr         r3, [r4, #0x20]
  00188	e5836000	 str         r6, [r3]
  0018c		 |$fail$48139|

; 1402 : 	
; 1403 : fail:
; 1404 :     RETAILMSG(1, (L"Error: IVA2 power domain funcation failed \r\n"));

  0018c	e59f0008	 ldr         r0, [pc, #8]
  00190	eb000000	 bl          NKDbgPrintfW

; 1405 :     return;
; 1406 :    
; 1407 : }

  00194	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00198	e12fff1e	 bx          lr
  0019c		 |$LN39@PrcmSetIVA|
  0019c		 |$LN40@PrcmSetIVA|
  0019c	00000000	 DCD         |??_C@_1FK@FIFKBPFK@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAf?$AAu?$AAn?$AAc?$AAa?$AAt?$AAi@|
  001a0		 |$LN41@PrcmSetIVA|
  001a0	00000000	 DCD         |??_C@_1EM@HMFNDBFB@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAO?$AAF?$AAF@|
  001a4		 |$LN42@PrcmSetIVA|
  001a4	00000000	 DCD         |??_C@_1GE@ELNCGKNN@?$AAl?$AAp?$AAm?$AA?4?$AAk?$AAo?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA_?$AAR?$AAS?$AAT?$AA1?$AA?5?$AAs?$AAi?$AAg?$AAn?$AAa?$AAl?$AA?5@|
  001a8		 |$LN43@PrcmSetIVA|
  001a8	00000000	 DCD         |g_pSysCtrlGenReg|
  001ac		 |$LN44@PrcmSetIVA|
  001ac	00000000	 DCD         |??_C@_1FG@PFIDHFBP@?$AAl?$AAp?$AAm?$AA?4?$AAk?$AAo?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAd?$AAi?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAb?$AAe?$AAc?$AAo@|
  001b0		 |$LN45@PrcmSetIVA|
  001b0	00000000	 DCD         |??_C@_1FG@ENJPGDMG@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAI?$AAV?$AAA?$AA2?$AA?5?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AAd?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAO?$AAN?$AA?5@|
  001b4		 |$LN46@PrcmSetIVA|
  001b4	00000000	 DCD         |g_PrcmCm|
  001b8		 |$LN47@PrcmSetIVA|
  001b8	00000000	 DCD         |g_PrcmPrm|
  001bc		 |$M49768|

			 ENDP  ; |PrcmSetIVA2OffMode|

	EXPORT	|ForceIdleMMC|

  00000			 AREA	 |.pdata|, PDATA
|$T49786| DCD	|$LN5@ForceIdleM|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ForceIdleMMC| PROC

; 1418 : {

  00000		 |$LN5@ForceIdleM|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M49783|

; 1419 :     OMAP_MMCHS_REGS    *pMmcRegs;
; 1420 :     
; 1421 :     PrcmDeviceEnableClocks(OMAP_DEVICE_MMC1, TRUE);

  00004	e3a01001	 mov         r1, #1
  00008	e3a00015	 mov         r0, #0x15
  0000c	eb000000	 bl          PrcmDeviceEnableClocks
  00010	e3a05312	 mov         r5, #0x12, 6

; 1422 :     pMmcRegs = OALPAtoUA(OMAP_MMCHS1_REGS_PA);

  00014	e3850927	 orr         r0, r5, #0x27, 18
  00018	e3a01000	 mov         r1, #0
  0001c	eb000000	 bl          OALPAtoVA

; 1423 :     OUTREG32(&pMmcRegs->MMCHS_SYSCONFIG, SYSCONFIG_FORCEIDLE);

  00020	e3a04000	 mov         r4, #0
  00024	e5804010	 str         r4, [r0, #0x10]

; 1424 :     PrcmDeviceEnableClocks(OMAP_DEVICE_MMC1, FALSE);

  00028	e3a00015	 mov         r0, #0x15
  0002c	e3a01000	 mov         r1, #0
  00030	eb000000	 bl          PrcmDeviceEnableClocks

; 1425 : 
; 1426 :     PrcmDeviceEnableClocks(OMAP_DEVICE_MMC2, TRUE);

  00034	e3a01001	 mov         r1, #1
  00038	e3a00016	 mov         r0, #0x16
  0003c	eb000000	 bl          PrcmDeviceEnableClocks

; 1427 :     pMmcRegs = OALPAtoUA(OMAP_MMCHS2_REGS_PA);

  00040	e3a01000	 mov         r1, #0
  00044	e385092d	 orr         r0, r5, #0x2D, 18
  00048	eb000000	 bl          OALPAtoVA

; 1428 :     OUTREG32(&pMmcRegs->MMCHS_SYSCONFIG, SYSCONFIG_FORCEIDLE);

  0004c	e5804010	 str         r4, [r0, #0x10]

; 1429 :     PrcmDeviceEnableClocks(OMAP_DEVICE_MMC2, FALSE);

  00050	e3a00016	 mov         r0, #0x16
  00054	e3a01000	 mov         r1, #0
  00058	eb000000	 bl          PrcmDeviceEnableClocks

; 1430 : }

  0005c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M49784|

			 ENDP  ; |ForceIdleMMC|

	IMPORT	|TWLClose|
	IMPORT	|TWLReadRegs|
	IMPORT	|TWLOpen|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T49820| DCD	|$LN18@TWLconfigO|
	DCD	0x40003d02
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\oal\oallib\oem_pm.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLconfigOFFmode| PROC

; 1477 : {

  00000		 |$LN18@TWLconfigO|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M49817|

; 1478 :     void *hTwl;
; 1479 :     UINT8 data;
; 1480 :    
; 1481 :     hTwl = TWLOpen();

  00008	eb000000	 bl          TWLOpen
  0000c	e1b04000	 movs        r4, r0

; 1482 :     if (hTwl == NULL) return;

  00010	0a000034	 beq         |$LN2@TWLconfigO|

; 1483 : 
; 1484 :     // unsecure registers
; 1485 :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0xCE);

  00014	e3a030ce	 mov         r3, #0xCE
  00018	e3a05803	 mov         r5, #3, 16
  0001c	e5cd3004	 strb        r3, [sp, #4]
  00020	e3a03001	 mov         r3, #1
  00024	e3851044	 orr         r1, r5, #0x44
  00028	e28d2004	 add         r2, sp, #4
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          TWLWriteRegs

; 1486 :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0xEC);

  00034	e3a030ec	 mov         r3, #0xEC
  00038	e5cd3004	 strb        r3, [sp, #4]
  0003c	e3a03001	 mov         r3, #1
  00040	e28d2004	 add         r2, sp, #4
  00044	e3851044	 orr         r1, r5, #0x44
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          TWLWriteRegs

; 1487 : 
; 1488 :     TWLReadRegs(hTwl, TWL_CFG_P1_TRANSITION, &data, sizeof(data));          

  00050	e3851036	 orr         r1, r5, #0x36
  00054	e3a03001	 mov         r3, #1
  00058	e28d2000	 add         r2, sp, #0
  0005c	e1a00004	 mov         r0, r4
  00060	eb000000	 bl          TWLReadRegs

; 1489 :     data &= ~STARTON_CHG;                                       

  00064	e5dd3000	 ldrb        r3, [sp]

; 1490 :     TWLWriteByteReg(hTwl, TWL_CFG_P1_TRANSITION, data);          

  00068	e28d2004	 add         r2, sp, #4
  0006c	e3851036	 orr         r1, r5, #0x36
  00070	e20330fd	 and         r3, r3, #0xFD
  00074	e5cd3000	 strb        r3, [sp]
  00078	e5cd3004	 strb        r3, [sp, #4]
  0007c	e3a03001	 mov         r3, #1
  00080	e1a00004	 mov         r0, r4
  00084	eb000000	 bl          TWLWriteRegs

; 1491 : 
; 1492 :      // secure registers
; 1493 :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0x00);

  00088	e3a03000	 mov         r3, #0
  0008c	e5cd3004	 strb        r3, [sp, #4]
  00090	e3a03001	 mov         r3, #1
  00094	e28d2004	 add         r2, sp, #4
  00098	e3851044	 orr         r1, r5, #0x44
  0009c	e1a00004	 mov         r0, r4
  000a0	eb000000	 bl          TWLWriteRegs
  000a4	e3a05803	 mov         r5, #3, 16

; 1494 : 
; 1495 :     TWLWriteByteReg(hTwl, TWL_VDD1_REMAP, 0);

  000a8	e3a0e000	 mov         lr, #0
  000ac	e38510b2	 orr         r1, r5, #0xB2
  000b0	e3a03001	 mov         r3, #1
  000b4	e28d2004	 add         r2, sp, #4
  000b8	e1a00004	 mov         r0, r4
  000bc	e5cde004	 strb        lr, [sp, #4]
  000c0	eb000000	 bl          TWLWriteRegs

; 1496 : 
; 1497 :     TWLWriteByteReg(hTwl, TWL_VDD2_REMAP, 0);

  000c4	e3a03000	 mov         r3, #0
  000c8	e5cd3004	 strb        r3, [sp, #4]
  000cc	e3a03001	 mov         r3, #1
  000d0	e28d2004	 add         r2, sp, #4
  000d4	e38510c0	 orr         r1, r5, #0xC0
  000d8	e1a00004	 mov         r0, r4
  000dc	eb000000	 bl          TWLWriteRegs

; 1498 : 	 
; 1499 :     TWLClose(hTwl);

  000e0	e1a00004	 mov         r0, r4
  000e4	eb000000	 bl          TWLClose
  000e8		 |$LN2@TWLconfigO|

; 1500 : }

  000e8	e28dd008	 add         sp, sp, #8
  000ec	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$M49818|

			 ENDP  ; |TWLconfigOFFmode|


  0003c			 AREA	 |.bss|, NOINIT
|s_pT2WarmResetSeqWords| % 0x18
|s_pT2WarmResetSeqWords| % 0x18
|s_pT2WakeOnSeqWords| % 0x10
|s_pT2SleepOffSeqWords| % 0x10
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T50007| DCD	|$LN118@InitT2Powe|
	DCD	0x40017e02
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\oal\oallib\oem_pm.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitT2PowerSequence| PROC

; 1510 : {    

  00000		 |$LN118@InitT2Powe|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M50004|

; 1511 :     int i, j;
; 1512 :     void *hTwl;
; 1513 : 	UCHAR addr = 0;
; 1514 :    
; 1515 :     hTwl = TWLOpen();

  00008	eb000000	 bl          TWLOpen
  0000c	e1b04000	 movs        r4, r0

; 1516 :     if (hTwl == NULL) return;

  00010	0a000165	 beq         |$LN20@InitT2Powe|

; 1517 :     
; 1518 :     //  Initialize interrupts of T2 to all off
; 1519 :     TWLWriteByteReg(hTwl, TWL_PWR_ISR1, 0xFF);

  00014	e3a030ff	 mov         r3, #0xFF
  00018	e3a07803	 mov         r7, #3, 16
  0001c	e5cd3000	 strb        r3, [sp]
  00020	e3a03001	 mov         r3, #1
  00024	e387102e	 orr         r1, r7, #0x2E
  00028	e28d2000	 add         r2, sp, #0
  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          TWLWriteRegs
  00034	e3a0b803	 mov         r11, #3, 16

; 1520 :     TWLWriteByteReg(hTwl, TWL_PWR_IMR1, 0xFF);

  00038	e3a0e0ff	 mov         lr, #0xFF
  0003c	e38b102f	 orr         r1, r11, #0x2F
  00040	e3a03001	 mov         r3, #1
  00044	e28d2000	 add         r2, sp, #0
  00048	e1a00004	 mov         r0, r4
  0004c	e5cde000	 strb        lr, [sp]
  00050	eb000000	 bl          TWLWriteRegs

; 1521 :     
; 1522 :     TWLWriteByteReg(hTwl, TWL_PWR_ISR2, 0xFF);

  00054	e3a030ff	 mov         r3, #0xFF
  00058	e5cd3000	 strb        r3, [sp]
  0005c	e3a03001	 mov         r3, #1
  00060	e38b1030	 orr         r1, r11, #0x30
  00064	e28d2000	 add         r2, sp, #0
  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          TWLWriteRegs

; 1523 :     TWLWriteByteReg(hTwl, TWL_PWR_IMR2, 0xFF);

  00070	e3a030ff	 mov         r3, #0xFF
  00074	e5cd3000	 strb        r3, [sp]
  00078	e3a03001	 mov         r3, #1
  0007c	e28d2000	 add         r2, sp, #0
  00080	e38b1031	 orr         r1, r11, #0x31
  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          TWLWriteRegs
  0008c	e3a06802	 mov         r6, #2, 16

; 1524 : 
; 1525 :     TWLWriteByteReg(hTwl, TWL_BCIIMR1A, 0xFF);

  00090	e3a0e0ff	 mov         lr, #0xFF
  00094	e38610bb	 orr         r1, r6, #0xBB
  00098	e3a03001	 mov         r3, #1
  0009c	e28d2000	 add         r2, sp, #0
  000a0	e1a00004	 mov         r0, r4
  000a4	e5cde000	 strb        lr, [sp]
  000a8	eb000000	 bl          TWLWriteRegs

; 1526 :     TWLWriteByteReg(hTwl, TWL_BCIIMR2A, 0xFF);

  000ac	e3a030ff	 mov         r3, #0xFF
  000b0	e5cd3000	 strb        r3, [sp]
  000b4	e3a03001	 mov         r3, #1
  000b8	e28d2000	 add         r2, sp, #0
  000bc	e38610bc	 orr         r1, r6, #0xBC
  000c0	e1a00004	 mov         r0, r4
  000c4	eb000000	 bl          TWLWriteRegs

; 1527 :     TWLWriteByteReg(hTwl, TWL_BCIIMR1B, 0xFF);

  000c8	e3a030ff	 mov         r3, #0xFF
  000cc	e5cd3000	 strb        r3, [sp]
  000d0	e3a03001	 mov         r3, #1
  000d4	e28d2000	 add         r2, sp, #0
  000d8	e38610bf	 orr         r1, r6, #0xBF
  000dc	e1a00004	 mov         r0, r4
  000e0	eb000000	 bl          TWLWriteRegs

; 1528 :     TWLWriteByteReg(hTwl, TWL_BCIIMR2B, 0xFF);

  000e4	e3a030ff	 mov         r3, #0xFF
  000e8	e5cd3000	 strb        r3, [sp]
  000ec	e3a03001	 mov         r3, #1
  000f0	e28d2000	 add         r2, sp, #0
  000f4	e38610c0	 orr         r1, r6, #0xC0
  000f8	e1a00004	 mov         r0, r4
  000fc	eb000000	 bl          TWLWriteRegs

; 1529 : 
; 1530 :     TWLWriteByteReg(hTwl, TWL_MADC_ISR1, 0xFF);

  00100	e3a030ff	 mov         r3, #0xFF
  00104	e5cd3000	 strb        r3, [sp]
  00108	e3a03001	 mov         r3, #1
  0010c	e3861061	 orr         r1, r6, #0x61
  00110	e28d2000	 add         r2, sp, #0
  00114	e1a00004	 mov         r0, r4
  00118	eb000000	 bl          TWLWriteRegs

; 1531 :     TWLWriteByteReg(hTwl, TWL_MADC_IMR1, 0xFF);

  0011c	e3a030ff	 mov         r3, #0xFF
  00120	e5cd3000	 strb        r3, [sp]
  00124	e3a03001	 mov         r3, #1
  00128	e28d2000	 add         r2, sp, #0
  0012c	e3861062	 orr         r1, r6, #0x62
  00130	e1a00004	 mov         r0, r4
  00134	eb000000	 bl          TWLWriteRegs

; 1532 :     TWLWriteByteReg(hTwl, TWL_MADC_ISR2, 0xFF);

  00138	e3a030ff	 mov         r3, #0xFF
  0013c	e5cd3000	 strb        r3, [sp]
  00140	e3a03001	 mov         r3, #1
  00144	e28d2000	 add         r2, sp, #0
  00148	e3861063	 orr         r1, r6, #0x63
  0014c	e1a00004	 mov         r0, r4
  00150	eb000000	 bl          TWLWriteRegs

; 1533 :     TWLWriteByteReg(hTwl, TWL_MADC_IMR2, 0xFF);

  00154	e3a030ff	 mov         r3, #0xFF
  00158	e5cd3000	 strb        r3, [sp]
  0015c	e3a03001	 mov         r3, #1
  00160	e28d2000	 add         r2, sp, #0
  00164	e3861064	 orr         r1, r6, #0x64
  00168	e1a00004	 mov         r0, r4
  0016c	eb000000	 bl          TWLWriteRegs

; 1534 : 
; 1535 :     TWLWriteByteReg(hTwl, TWL_KEYP_IMR1, 0xFF);

  00170	e3a030ff	 mov         r3, #0xFF
  00174	e5cd3000	 strb        r3, [sp]
  00178	e3a03001	 mov         r3, #1
  0017c	e28d2000	 add         r2, sp, #0
  00180	e38610e4	 orr         r1, r6, #0xE4
  00184	e1a00004	 mov         r0, r4
  00188	eb000000	 bl          TWLWriteRegs

; 1536 :     TWLWriteByteReg(hTwl, TWL_KEYP_IMR2, 0xFF);

  0018c	e3a030ff	 mov         r3, #0xFF
  00190	e5cd3000	 strb        r3, [sp]
  00194	e3a03001	 mov         r3, #1
  00198	e28d2000	 add         r2, sp, #0
  0019c	e38610e6	 orr         r1, r6, #0xE6
  001a0	e1a00004	 mov         r0, r4
  001a4	eb000000	 bl          TWLWriteRegs
  001a8	e3a05801	 mov         r5, #1, 16

; 1537 : 
; 1538 :     TWLWriteByteReg(hTwl, TWL_GPIO_IMR1A, 0xFF);

  001ac	e3a0e0ff	 mov         lr, #0xFF
  001b0	e38510b4	 orr         r1, r5, #0xB4
  001b4	e3a03001	 mov         r3, #1
  001b8	e28d2000	 add         r2, sp, #0
  001bc	e1a00004	 mov         r0, r4
  001c0	e5cde000	 strb        lr, [sp]
  001c4	eb000000	 bl          TWLWriteRegs

; 1539 :     TWLWriteByteReg(hTwl, TWL_GPIO_IMR2A, 0xFF);

  001c8	e3a030ff	 mov         r3, #0xFF
  001cc	e5cd3000	 strb        r3, [sp]
  001d0	e3a03001	 mov         r3, #1
  001d4	e28d2000	 add         r2, sp, #0
  001d8	e38510b5	 orr         r1, r5, #0xB5
  001dc	e1a00004	 mov         r0, r4
  001e0	eb000000	 bl          TWLWriteRegs

; 1540 :     TWLWriteByteReg(hTwl, TWL_GPIO_IMR3A, 0xFF);

  001e4	e3a030ff	 mov         r3, #0xFF
  001e8	e5cd3000	 strb        r3, [sp]
  001ec	e3a03001	 mov         r3, #1
  001f0	e28d2000	 add         r2, sp, #0
  001f4	e38510b6	 orr         r1, r5, #0xB6
  001f8	e1a00004	 mov         r0, r4
  001fc	eb000000	 bl          TWLWriteRegs

; 1541 :     TWLWriteByteReg(hTwl, TWL_GPIO_IMR1B, 0xFF);

  00200	e3a030ff	 mov         r3, #0xFF
  00204	e5cd3000	 strb        r3, [sp]
  00208	e3a03001	 mov         r3, #1
  0020c	e28d2000	 add         r2, sp, #0
  00210	e38510ba	 orr         r1, r5, #0xBA
  00214	e1a00004	 mov         r0, r4
  00218	eb000000	 bl          TWLWriteRegs

; 1542 :     TWLWriteByteReg(hTwl, TWL_GPIO_IMR2B, 0xFF);

  0021c	e3a030ff	 mov         r3, #0xFF
  00220	e5cd3000	 strb        r3, [sp]
  00224	e3a03001	 mov         r3, #1
  00228	e28d2000	 add         r2, sp, #0
  0022c	e38510bb	 orr         r1, r5, #0xBB
  00230	e1a00004	 mov         r0, r4
  00234	eb000000	 bl          TWLWriteRegs

; 1543 :     TWLWriteByteReg(hTwl, TWL_GPIO_IMR3B, 0xFF);

  00238	e3a030ff	 mov         r3, #0xFF
  0023c	e5cd3000	 strb        r3, [sp]
  00240	e3a03001	 mov         r3, #1
  00244	e28d2000	 add         r2, sp, #0
  00248	e38510bc	 orr         r1, r5, #0xBC
  0024c	e1a00004	 mov         r0, r4
  00250	eb000000	 bl          TWLWriteRegs

; 1544 : 
; 1545 :     //  Ensure that that there are no pending interrupts
; 1546 :     //  on power and MADC
; 1547 :     TWLWriteByteReg(hTwl, TWL_PWR_ISR1, 0xFF);

  00254	e3a030ff	 mov         r3, #0xFF
  00258	e5cd3000	 strb        r3, [sp]
  0025c	e3a03001	 mov         r3, #1
  00260	e28d2000	 add         r2, sp, #0
  00264	e387102e	 orr         r1, r7, #0x2E
  00268	e1a00004	 mov         r0, r4
  0026c	eb000000	 bl          TWLWriteRegs

; 1548 :     TWLWriteByteReg(hTwl, TWL_PWR_ISR2, 0xFF);

  00270	e3a030ff	 mov         r3, #0xFF
  00274	e5cd3000	 strb        r3, [sp]
  00278	e3a03001	 mov         r3, #1
  0027c	e28d2000	 add         r2, sp, #0
  00280	e38b1030	 orr         r1, r11, #0x30
  00284	e1a00004	 mov         r0, r4
  00288	eb000000	 bl          TWLWriteRegs

; 1549 :     TWLWriteByteReg(hTwl, TWL_MADC_ISR1, 0xFF);

  0028c	e3a030ff	 mov         r3, #0xFF
  00290	e5cd3000	 strb        r3, [sp]
  00294	e3a03001	 mov         r3, #1
  00298	e28d2000	 add         r2, sp, #0
  0029c	e3861061	 orr         r1, r6, #0x61
  002a0	e1a00004	 mov         r0, r4
  002a4	eb000000	 bl          TWLWriteRegs

; 1550 :     TWLWriteByteReg(hTwl, TWL_MADC_ISR2, 0xFF);

  002a8	e3a030ff	 mov         r3, #0xFF
  002ac	e5cd3000	 strb        r3, [sp]
  002b0	e3a03001	 mov         r3, #1
  002b4	e28d2000	 add         r2, sp, #0
  002b8	e3861063	 orr         r1, r6, #0x63
  002bc	e1a00004	 mov         r0, r4
  002c0	eb000000	 bl          TWLWriteRegs

; 1551 :     
; 1552 :     // Resources in T2 are allocated to one or more of 
; 1553 :     // three groups.  Each group has a control input that
; 1554 :     // tells causes the resources in that group to transition
; 1555 :     // between Sleep and Active states.  Groups and control
; 1556 :     // signals are as follows:
; 1557 :     // P1 (Controlled by nSLEEP1) Intended for resources needed by the processor itself
; 1558 :     // P2 (Controlled by nSLEEP2) Intended for resources needed by the external modem (not used)
; 1559 :     // P3 (Controlled by CLKREQ) Intended for resources used by peripherals
; 1560 :     
; 1561 :     // EVM3530  has sys_clkreq connected to nSLEEP1, nSLEEP2 is floating, CLKREQ is pulled high and goes 
; 1562 :     // only to expansion connector.  So any resource allocated in group P2/P3 will never go to sleep 
; 1563 :     // mode when the processor drops sys_clkreq.  
; 1564 :     // Therefore all resources needed by the BSP need to be allocated to P1, only.
; 1565 :     // Change HFCLKOUT and CLKEN to P1 only instead of default P1/P2/P3 so it shuts off in suspend
; 1566 : 	TWLWriteByteReg(hTwl, TWL_HFCLKOUT_DEV_GRP, TWL_DEV_GROUP_P1);

  002c4	e3a03020	 mov         r3, #0x20
  002c8	e5cd3000	 strb        r3, [sp]
  002cc	e3a03001	 mov         r3, #1
  002d0	e28d2000	 add         r2, sp, #0
  002d4	e38b10e6	 orr         r1, r11, #0xE6
  002d8	e1a00004	 mov         r0, r4
  002dc	eb000000	 bl          TWLWriteRegs

; 1567 : 
; 1568 :     // unsecure registers
; 1569 :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0xCE);

  002e0	e3a030ce	 mov         r3, #0xCE
  002e4	e5cd3000	 strb        r3, [sp]
  002e8	e3a03001	 mov         r3, #1
  002ec	e38b1044	 orr         r1, r11, #0x44
  002f0	e28d2000	 add         r2, sp, #0
  002f4	e1a00004	 mov         r0, r4
  002f8	eb000000	 bl          TWLWriteRegs

; 1570 :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0xEC);

  002fc	e3a030ec	 mov         r3, #0xEC
  00300	e5cd3000	 strb        r3, [sp]
  00304	e3a03001	 mov         r3, #1
  00308	e28d2000	 add         r2, sp, #0
  0030c	e38b1044	 orr         r1, r11, #0x44
  00310	e1a00004	 mov         r0, r4
  00314	eb000000	 bl          TWLWriteRegs

; 1571 : 
; 1572 :     //Set ACTIVE to SLEEP SEQ address
; 1573 :     TWLWriteByteReg(hTwl, TWL_SEQ_ADD_A2S, T2_A2S_SEQ_START_ADDR);

  00318	e3a0302b	 mov         r3, #0x2B
  0031c	e5cd3000	 strb        r3, [sp]
  00320	e3a03001	 mov         r3, #1
  00324	e28d2000	 add         r2, sp, #0
  00328	e38b1055	 orr         r1, r11, #0x55
  0032c	e1a00004	 mov         r0, r4
  00330	eb000000	 bl          TWLWriteRegs

; 1574 : 
; 1575 :     //Set SLEEP to ACTIVE SEQ address for P1 and P2
; 1576 :     TWLWriteByteReg(hTwl, TWL_SEQ_ADD_S2A12, T2_S2A_SEQ_START_ADDR);

  00334	e3a03030	 mov         r3, #0x30
  00338	e5cd3000	 strb        r3, [sp]
  0033c	e3a03001	 mov         r3, #1
  00340	e28d2000	 add         r2, sp, #0
  00344	e38b1056	 orr         r1, r11, #0x56
  00348	e1a00004	 mov         r0, r4
  0034c	eb000000	 bl          TWLWriteRegs

; 1577 : 
; 1578 :     //Set SLEEP to ACTIVE SEQ address for P3
; 1579 :     TWLWriteByteReg(hTwl, TWL_SEQ_ADD_S2A3, T2_S2A_SEQ_START_ADDR);

  00350	e3a03030	 mov         r3, #0x30
  00354	e5cd3000	 strb        r3, [sp]
  00358	e3a03001	 mov         r3, #1
  0035c	e28d2000	 add         r2, sp, #0
  00360	e38b1057	 orr         r1, r11, #0x57
  00364	e1a00004	 mov         r0, r4
  00368	eb000000	 bl          TWLWriteRegs

; 1580 : 
; 1581 :     // P1 LVL_WAKEUP should be on LEVEL
; 1582 :     TWLWriteByteReg(hTwl, TWL_P1_SW_EVENTS, 0x08);

  0036c	e3a03008	 mov         r3, #8
  00370	e5cd3000	 strb        r3, [sp]
  00374	e3a03001	 mov         r3, #1
  00378	e28d2000	 add         r2, sp, #0
  0037c	e38b1046	 orr         r1, r11, #0x46
  00380	e1a00004	 mov         r0, r4
  00384	eb000000	 bl          TWLWriteRegs

; 1583 : 
; 1584 :     // P2 LVL_WAKEUP should be on LEVEL
; 1585 :     TWLWriteByteReg(hTwl, TWL_P2_SW_EVENTS, 0x08);

  00388	e3a03008	 mov         r3, #8
  0038c	e5cd3000	 strb        r3, [sp]
  00390	e3a03001	 mov         r3, #1
  00394	e28d2000	 add         r2, sp, #0
  00398	e38b1047	 orr         r1, r11, #0x47
  0039c	e1a00004	 mov         r0, r4
  003a0	eb000000	 bl          TWLWriteRegs

; 1586 :     
; 1587 :     // P3 LVL_WAKEUP should be on LEVEL 
; 1588 :     TWLWriteByteReg(hTwl, TWL_P3_SW_EVENTS, 0x08);    

  003a4	e3a03008	 mov         r3, #8
  003a8	e5cd3000	 strb        r3, [sp]
  003ac	e3a03001	 mov         r3, #1
  003b0	e28d2000	 add         r2, sp, #0
  003b4	e38b1048	 orr         r1, r11, #0x48
  003b8	e1a00004	 mov         r0, r4
  003bc	eb000000	 bl          TWLWriteRegs

; 1589 : 
; 1590 :     // Should generate correct sequence for EVM, using new method
; 1591 :     // Program Active to Sleep sequence
; 1592 :     s_pT2SleepOffSeqWords[0].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1593 : 														 TWL_VDD1_RES_ID,
; 1594 :                                                          TWL_RES_OFF,
; 1595 :                                                          4,
; 1596 :                                                          (T2_A2S_SEQ_START_ADDR+1));

  003c0	e59f522c	 ldr         r5, [pc, #0x22C]
  003c4	e59f3224	 ldr         r3, [pc, #0x224]

; 1597 : 
; 1598 :     s_pT2SleepOffSeqWords[1].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1599 : 														 TWL_VDD2_RES_ID,
; 1600 :                                                          TWL_RES_OFF,
; 1601 :                                                          2,
; 1602 :                                                          (T2_A2S_SEQ_START_ADDR+2));
; 1603 : 
; 1604 :     s_pT2SleepOffSeqWords[2].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1605 : 														 TWL_VPLL1_RES_ID,
; 1606 :                                                          TWL_RES_OFF,
; 1607 :                                                          3,
; 1608 :                                                          (T2_A2S_SEQ_START_ADDR+3));

  003c8	e59f221c	 ldr         r2, [pc, #0x21C]

; 1609 : 
; 1610 :     s_pT2SleepOffSeqWords[3].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1611 : 														 TWL_HFCLKOUT_RES_ID,
; 1612 :                                                          TWL_RES_OFF,
; 1613 :                                                          3,
; 1614 :                                                          0x3F);

  003cc	e59f1214	 ldr         r1, [pc, #0x214]
  003d0	e58536a0	 str         r3, [r5, #0x6A0]
  003d4	e59f3208	 ldr         r3, [pc, #0x208]
  003d8	e58536a4	 str         r3, [r5, #0x6A4]
  003dc	e58526a8	 str         r2, [r5, #0x6A8]
  003e0	e58516ac	 str         r1, [r5, #0x6AC]

; 1615 : 
; 1616 : 	// Set sequence start memory address for Active to Sleep
; 1617 : 	addr = T2_A2S_SEQ_START_ADDR << 2;

  003e4	e3a090ac	 mov         r9, #0xAC
  003e8	e2857e6a	 add         r7, r5, #0x6A, 28
  003ec	e3a0a004	 mov         r10, #4
  003f0		 |$LL18@InitT2Powe|

; 1618 : 
; 1619 : 	// write Active to Sleep sequence to memory
; 1620 : 	for (i = 0; i < T2_SLEEPOFF_COUNT; ++i)
; 1621 : 	{
; 1622 : 		for (j = 0; j < 4; ++j)

  003f0	e1a06007	 mov         r6, r7
  003f4	e3a08004	 mov         r8, #4
  003f8		 |$LL15@InitT2Powe|

; 1623 : 		{
; 1624 : 			TWLWriteByteReg(hTwl, TWL_MEMORY_ADDRESS,  addr++);

  003f8	e3a03001	 mov         r3, #1
  003fc	e28d2000	 add         r2, sp, #0
  00400	e38b1059	 orr         r1, r11, #0x59
  00404	e1a00004	 mov         r0, r4
  00408	e5cd9000	 strb        r9, [sp]
  0040c	eb000000	 bl          TWLWriteRegs

; 1625 : 			TWLWriteByteReg(hTwl, TWL_MEMORY_DATA, s_pT2SleepOffSeqWords[i].msgByte[3-j]);

  00410	e5d62003	 ldrb        r2, [r6, #3]
  00414	e289e001	 add         lr, r9, #1
  00418	e3a03001	 mov         r3, #1
  0041c	e5cd2000	 strb        r2, [sp]
  00420	e28d2000	 add         r2, sp, #0
  00424	e38b105a	 orr         r1, r11, #0x5A
  00428	e1a00004	 mov         r0, r4
  0042c	e20e90ff	 and         r9, lr, #0xFF
  00430	eb000000	 bl          TWLWriteRegs
  00434	e2466001	 sub         r6, r6, #1
  00438	e2588001	 subs        r8, r8, #1
  0043c	1affffed	 bne         |$LL15@InitT2Powe|
  00440	e2877004	 add         r7, r7, #4
  00444	e25aa001	 subs        r10, r10, #1
  00448	1affffe8	 bne         |$LL18@InitT2Powe|

; 1626 : 		}
; 1627 : 	}
; 1628 : 
; 1629 :     s_pT2WakeOnSeqWords[0].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1630 : 														 TWL_VPLL1_RES_ID,
; 1631 :                                                          TWL_RES_ACTIVE,
; 1632 :                                                          0x30,
; 1633 :                                                          (T2_S2A_SEQ_START_ADDR+1));

  0044c	e59f618c	 ldr         r6, [pc, #0x18C]
  00450	e59f3184	 ldr         r3, [pc, #0x184]

; 1634 : 
; 1635 :     s_pT2WakeOnSeqWords[1].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1636 : 														 TWL_VDD1_RES_ID,
; 1637 :                                                          TWL_RES_ACTIVE,
; 1638 :                                                          0x30,
; 1639 :                                                          (T2_S2A_SEQ_START_ADDR+2));

  00454	e59f217c	 ldr         r2, [pc, #0x17C]

; 1640 : 
; 1641 :     s_pT2WakeOnSeqWords[2].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1642 : 														 TWL_VDD2_RES_ID,
; 1643 :                                                          TWL_RES_ACTIVE,
; 1644 :                                                          0x37,
; 1645 :                                                          (T2_S2A_SEQ_START_ADDR+3));

  00458	e59f1174	 ldr         r1, [pc, #0x174]

; 1646 : 
; 1647 :     s_pT2WakeOnSeqWords[3].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1648 : 														 TWL_HFCLKOUT_RES_ID,
; 1649 :                                                          TWL_RES_ACTIVE,
; 1650 :                                                          3,
; 1651 :                                                          0x3F);

  0045c	e59f016c	 ldr         r0, [pc, #0x16C]
  00460	e5863000	 str         r3, [r6]
  00464	e5862004	 str         r2, [r6, #4]
  00468	e5861008	 str         r1, [r6, #8]
  0046c	e586000c	 str         r0, [r6, #0xC]

; 1652 : 
; 1653 :     // Set sequence start memory address for Sleep to Active
; 1654 : 	addr = T2_S2A_SEQ_START_ADDR << 2;

  00470	e3a080c0	 mov         r8, #0xC0
  00474	e3a09004	 mov         r9, #4
  00478		 |$LL12@InitT2Powe|

; 1655 : 
; 1656 : 	// write Active to Sleep sequence to memory
; 1657 : 	for (i = 0; i < T2_WAKEON_COUNT; ++i)
; 1658 : 	{
; 1659 : 		for (j = 0; j < 4; ++j)

  00478	e1a07006	 mov         r7, r6
  0047c	e3a0a004	 mov         r10, #4
  00480		 |$LL9@InitT2Powe|

; 1660 : 		{
; 1661 : 			TWLWriteByteReg(hTwl, TWL_MEMORY_ADDRESS,  addr++);

  00480	e3a03001	 mov         r3, #1
  00484	e28d2000	 add         r2, sp, #0
  00488	e38b1059	 orr         r1, r11, #0x59
  0048c	e1a00004	 mov         r0, r4
  00490	e5cd8000	 strb        r8, [sp]
  00494	eb000000	 bl          TWLWriteRegs

; 1662 : 			TWLWriteByteReg(hTwl, TWL_MEMORY_DATA, s_pT2WakeOnSeqWords[i].msgByte[3-j]);

  00498	e5d72003	 ldrb        r2, [r7, #3]
  0049c	e288e001	 add         lr, r8, #1
  004a0	e3a03001	 mov         r3, #1
  004a4	e5cd2000	 strb        r2, [sp]
  004a8	e28d2000	 add         r2, sp, #0
  004ac	e38b105a	 orr         r1, r11, #0x5A
  004b0	e1a00004	 mov         r0, r4
  004b4	e20e80ff	 and         r8, lr, #0xFF
  004b8	eb000000	 bl          TWLWriteRegs
  004bc	e2477001	 sub         r7, r7, #1
  004c0	e25aa001	 subs        r10, r10, #1
  004c4	1affffed	 bne         |$LL9@InitT2Powe|
  004c8	e2866004	 add         r6, r6, #4
  004cc	e2599001	 subs        r9, r9, #1
  004d0	1affffe8	 bne         |$LL12@InitT2Powe|
  004d4	e3a03803	 mov         r3, #3, 16

; 1663 : 		}
; 1664 : 	}
; 1665 : 
; 1666 :     // Program Warm Reset Sequence
; 1667 :     //Set WARM RESET SEQ address for WARM RESET
; 1668 :     TWLWriteByteReg(hTwl, TWL_SEQ_ADD_WARM, T2_WARMRESET_SEQ_START_ADDR);

  004d8	e3831058	 orr         r1, r3, #0x58
  004dc	e3a0e038	 mov         lr, #0x38
  004e0	e3a03001	 mov         r3, #1
  004e4	e28d2000	 add         r2, sp, #0
  004e8	e1a00004	 mov         r0, r4
  004ec	e5cde000	 strb        lr, [sp]
  004f0	eb000000	 bl          TWLWriteRegs

; 1669 : 
; 1670 :     s_pT2WarmResetSeqWords[0].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP_NULL,
; 1671 :                                                             TWL_TRITON_RESET_RES_ID,
; 1672 :                                                             TWL_RES_OFF,
; 1673 :                                                             0x02,
; 1674 :                                                             (T2_WARMRESET_SEQ_START_ADDR+1));

  004f4	e59f30d0	 ldr         r3, [pc, #0xD0]

; 1675 : 
; 1676 :     s_pT2WarmResetSeqWords[1].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1677 :                                                             TWL_VDD1_RES_ID,
; 1678 :                                                             TWL_RES_WRST,
; 1679 :                                                             0x0E,
; 1680 :                                                             (T2_WARMRESET_SEQ_START_ADDR+2));

  004f8	e59f20c8	 ldr         r2, [pc, #0xC8]

; 1681 : 
; 1682 :     s_pT2WarmResetSeqWords[2].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1683 :                                                             TWL_VDD2_RES_ID,
; 1684 :                                                             TWL_RES_WRST,
; 1685 :                                                             0x0E,
; 1686 :                                                             (T2_WARMRESET_SEQ_START_ADDR+3));

  004fc	e59f00c0	 ldr         r0, [pc, #0xC0]

; 1687 : 
; 1688 :     s_pT2WarmResetSeqWords[3].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1689 :                                                             TWL_VPLL1_RES_ID,
; 1690 :                                                             TWL_RES_WRST,
; 1691 :                                                             0x60,
; 1692 :                                                             (T2_WARMRESET_SEQ_START_ADDR+4));

  00500	e59fe0b8	 ldr         lr, [pc, #0xB8]

; 1693 : 
; 1694 :     s_pT2WarmResetSeqWords[4].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP1,
; 1695 :                                                             TWL_32KCLK_OUT_RES_ID,
; 1696 :                                                             TWL_RES_ACTIVE,
; 1697 :                                                             0x02,
; 1698 :                                                             (T2_WARMRESET_SEQ_START_ADDR+5));

  00504	e59f10b0	 ldr         r1, [pc, #0xB0]
  00508	e5853000	 str         r3, [r5]

; 1699 : 
; 1700 :     s_pT2WarmResetSeqWords[5].msgWord = TwlSingularMsgSequence(TWL_PROCESSOR_GRP_NULL,
; 1701 :                                                             TWL_TRITON_RESET_RES_ID,
; 1702 :                                                             TWL_RES_ACTIVE,
; 1703 :                                                             0x02,
; 1704 :                                                             0x3F);

  0050c	e59f30a4	 ldr         r3, [pc, #0xA4]
  00510	e5852004	 str         r2, [r5, #4]
  00514	e5850008	 str         r0, [r5, #8]
  00518	e585e00c	 str         lr, [r5, #0xC]
  0051c	e5851010	 str         r1, [r5, #0x10]
  00520	e5853014	 str         r3, [r5, #0x14]

; 1705 : 
; 1706 :     // Set sequence start memory address for WARM RESET
; 1707 : 	addr = T2_WARMRESET_SEQ_START_ADDR << 2;

  00524	e3a070e0	 mov         r7, #0xE0
  00528	e3a08006	 mov         r8, #6
  0052c		 |$LL6@InitT2Powe|

; 1708 : 
; 1709 :     // write WARM RESET SEQ to memory
; 1710 : 	for (i = 0; i < T2_WARMRESET_COUNT; ++i)
; 1711 : 	{
; 1712 : 		for (j = 0; j < 4; ++j)

  0052c	e1a06005	 mov         r6, r5
  00530	e3a09004	 mov         r9, #4
  00534		 |$LL3@InitT2Powe|

; 1713 : 		{
; 1714 : 			TWLWriteByteReg(hTwl, TWL_MEMORY_ADDRESS,  addr++);

  00534	e3a03001	 mov         r3, #1
  00538	e28d2000	 add         r2, sp, #0
  0053c	e38b1059	 orr         r1, r11, #0x59
  00540	e1a00004	 mov         r0, r4
  00544	e5cd7000	 strb        r7, [sp]
  00548	eb000000	 bl          TWLWriteRegs

; 1715 : 			TWLWriteByteReg(hTwl, TWL_MEMORY_DATA, s_pT2WarmResetSeqWords[i].msgByte[3-j]);

  0054c	e5d62003	 ldrb        r2, [r6, #3]
  00550	e287e001	 add         lr, r7, #1
  00554	e3a03001	 mov         r3, #1
  00558	e5cd2000	 strb        r2, [sp]
  0055c	e28d2000	 add         r2, sp, #0
  00560	e38b105a	 orr         r1, r11, #0x5A
  00564	e1a00004	 mov         r0, r4
  00568	e20e70ff	 and         r7, lr, #0xFF
  0056c	eb000000	 bl          TWLWriteRegs
  00570	e2466001	 sub         r6, r6, #1
  00574	e2599001	 subs        r9, r9, #1
  00578	1affffed	 bne         |$LL3@InitT2Powe|
  0057c	e2855004	 add         r5, r5, #4
  00580	e2588001	 subs        r8, r8, #1
  00584	1affffe8	 bne         |$LL6@InitT2Powe|

; 1716 : 		}
; 1717 : 	}
; 1718 : 
; 1719 :     // secure registers
; 1720 :     TWLWriteByteReg(hTwl, TWL_PROTECT_KEY, 0x00);

  00588	e3a03000	 mov         r3, #0
  0058c	e5cd3000	 strb        r3, [sp]
  00590	e3a03001	 mov         r3, #1
  00594	e28d2000	 add         r2, sp, #0
  00598	e38b1044	 orr         r1, r11, #0x44
  0059c	e1a00004	 mov         r0, r4
  005a0	eb000000	 bl          TWLWriteRegs

; 1721 :     
; 1722 :     TWLClose(hTwl);

  005a4	e1a00004	 mov         r0, r4
  005a8	eb000000	 bl          TWLClose
  005ac		 |$LN20@InitT2Powe|

; 1723 : }

  005ac	e28dd004	 add         sp, sp, #4
  005b0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  005b4	e12fff1e	 bx          lr
  005b8		 |$LN119@InitT2Powe|
  005b8		 |$LN120@InitT2Powe|
  005b8	01be023f	 DCD         0x1be023f
  005bc		 |$LN121@InitT2Powe|
  005bc	21ae023d	 DCD         0x21ae023d
  005c0		 |$LN122@InitT2Powe|
  005c0	207f603c	 DCD         0x207f603c
  005c4		 |$LN123@InitT2Powe|
  005c4	210f0e3b	 DCD         0x210f0e3b
  005c8		 |$LN124@InitT2Powe|
  005c8	20ff0e3a	 DCD         0x20ff0e3a
  005cc		 |$LN125@InitT2Powe|
  005cc	01b00239	 DCD         0x1b00239
  005d0		 |$LN126@InitT2Powe|
  005d0	219e033f	 DCD         0x219e033f
  005d4		 |$LN127@InitT2Powe|
  005d4	210e3733	 DCD         0x210e3733
  005d8		 |$LN128@InitT2Powe|
  005d8	20fe3032	 DCD         0x20fe3032
  005dc		 |$LN129@InitT2Powe|
  005dc	207e3031	 DCD         0x207e3031
  005e0		 |$LN130@InitT2Powe|
  005e0	00000000	 DCD         |s_pT2WakeOnSeqWords|
  005e4		 |$LN131@InitT2Powe|
  005e4	2100022d	 DCD         0x2100022d
  005e8		 |$LN132@InitT2Powe|
  005e8	2190033f	 DCD         0x2190033f
  005ec		 |$LN133@InitT2Powe|
  005ec	2070032e	 DCD         0x2070032e
  005f0		 |$LN134@InitT2Powe|
  005f0	20f0042c	 DCD         0x20f0042c
  005f4		 |$LN135@InitT2Powe|
  005f4	00000000	 DCD         |s_pT2WarmResetSeqWords|
  005f8		 |$M50005|

			 ENDP  ; |InitT2PowerSequence|

	EXPORT	|OALPowerVFP|

  00000			 AREA	 |.pdata|, PDATA
|$T50033| DCD	|$LN5@OALPowerVF|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPowerVFP| PROC

; 2125 : {

  00000		 |$LN5@OALPowerVF|
  00000		 |$M50030|

; 2126 : #if 1
; 2127 :     UNREFERENCED_PARAMETER(dwCommand);
; 2128 : #else
; 2129 :     switch (dwCommand)
; 2130 :     {
; 2131 :     case VFP_CONTROL_POWER_ON:
; 2132 :         PrcmDomainSetPowerState(POWERDOMAIN_NEON, POWERSTATE_ON, LOGICRETSTATE);
; 2133 :         return TRUE;
; 2134 : 
; 2135 :     case VFP_CONTROL_POWER_OFF:
; 2136 :         PrcmDomainSetPowerState(POWERDOMAIN_NEON, POWERSTATE_OFF, LOGICRETSTATE);
; 2137 :         return TRUE;
; 2138 : 
; 2139 :     case VFP_CONTROL_POWER_RETENTION:
; 2140 :         PrcmDomainSetPowerState(POWERDOMAIN_NEON, POWERSTATE_RETENTION, LOGICRETSTATE);
; 2141 :         return TRUE;
; 2142 :     }
; 2143 : #endif
; 2144 :     return FALSE;

  00000	e3a00000	 mov         r0, #0

; 2145 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M50031|

			 ENDP  ; |OALPowerVFP|

	EXPORT	|OALPrcmIntrHandler|
	EXPORT	|??_C@_1CM@JBCMAKOK@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@GNNMJLKG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|PrcmInterruptProcess|

  00000			 AREA	 |.pdata|, PDATA
|$T50047| DCD	|$LN9@OALPrcmInt|
	DCD	0x40001401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JBCMAKOK@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "r", 0x0, "c"
	DCB	0x0, "m", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GNNMJLKG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "r", 0x0, "c"
	DCB	0x0, "m", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPrcmIntrHandler| PROC

; 2156 : {

  00000		 |$LN9@OALPrcmInt|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50044|

; 2157 :     const UINT clear_mask = PRM_IRQENABLE_VP1_NOSMPSACK_EN |
; 2158 :                             PRM_IRQENABLE_VP2_NOSMPSACK_EN |
; 2159 :                             PRM_IRQENABLE_VC_SAERR_EN |
; 2160 :                             PRM_IRQENABLE_VC_RAERR_EN |
; 2161 :                             PRM_IRQENABLE_VC_TIMEOUTERR_EN |
; 2162 :                             PRM_IRQENABLE_WKUP_EN |
; 2163 :                             PRM_IRQENABLE_TRANSITION_EN |
; 2164 :                             PRM_IRQENABLE_MPU_DPLL_RECAL_EN |
; 2165 :                             PRM_IRQENABLE_CORE_DPLL_RECAL_EN |
; 2166 :                             PRM_IRQENABLE_VP1_OPPCHANGEDONE_EN |
; 2167 :                             PRM_IRQENABLE_VP2_OPPCHANGEDONE_EN |
; 2168 :                             PRM_IRQENABLE_IO_EN ;
; 2169 :     UINT sysIntr = SYSINTR_NOP;
; 2170 : 
; 2171 :     OALMSG(OAL_FUNC, (L"+OALPrcmIntrHandler\r\n"));

  00004	e59f4040	 ldr         r4, [pc, #0x40]
  00008	e5943440	 ldr         r3, [r4, #0x440]
  0000c	e3130004	 tst         r3, #4
  00010	159f0030	 ldrne       r0, [pc, #0x30]
  00014	1b000000	 blne        NKDbgPrintfW

; 2172 : 
; 2173 :     // get cause of interrupt
; 2174 :     sysIntr = PrcmInterruptProcess(clear_mask);

  00018	e59f0024	 ldr         r0, [pc, #0x24]
  0001c	eb000000	 bl          PrcmInterruptProcess

; 2175 : 
; 2176 :     OALMSG(OAL_FUNC, (L"-OALPrcmIntrHandler\r\n"));

  00020	e5943440	 ldr         r3, [r4, #0x440]
  00024	e1a04000	 mov         r4, r0
  00028	e3130004	 tst         r3, #4
  0002c	159f000c	 ldrne       r0, [pc, #0xC]
  00030	1b000000	 blne        NKDbgPrintfW

; 2177 :     return sysIntr;
; 2178 : }

  00034	e1a00004	 mov         r0, r4
  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN10@OALPrcmInt|
  00040		 |$LN11@OALPrcmInt|
  00040	00000000	 DCD         |??_C@_1CM@JBCMAKOK@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00044		 |$LN12@OALPrcmInt|
  00044	01c926b1	 DCD         0x1c926b1
  00048		 |$LN13@OALPrcmInt|
  00048	00000000	 DCD         |??_C@_1CM@GNNMJLKG@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAt?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  0004c		 |$LN14@OALPrcmInt|
  0004c	00000000	 DCD         |dpCurSettings|
  00050		 |$M50045|

			 ENDP  ; |OALPrcmIntrHandler|

	EXPORT	|OALSmartReflex1Intr|
	EXPORT	|??_C@_1CO@OILFLAEL@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@BPEDMOIJ@?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@DDHBOPGA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SmartReflex_funcs|

  00000			 AREA	 |.pdata|, PDATA
|$T50066| DCD	|$LN9@OALSmartRe|
	DCD	0x40001d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@OILFLAEL@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "m", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "l"
	DCB	0x0, "e", 0x0, "x", 0x0, "1", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@BPEDMOIJ@?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA0@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "S", 0x0, "m", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "l", 0x0, "e"
	DCB	0x0, "x", 0x0, "1", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@DDHBOPGA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "m", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "l"
	DCB	0x0, "e", 0x0, "x", 0x0, "1", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALSmartReflex1Intr| PROC

; 2190 : {

  00000		 |$LN9@OALSmartRe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50063|

; 2191 :     UINT intrStatus;
; 2192 :     OALMSG(OAL_FUNC, (L"+OALSmartReflex1Intr\r\n"));

  00004	e59f4064	 ldr         r4, [pc, #0x64]
  00008	e5943440	 ldr         r3, [r4, #0x440]
  0000c	e3130004	 tst         r3, #4
  00010	159f0054	 ldrne       r0, [pc, #0x54]
  00014	1b000000	 blne        NKDbgPrintfW

; 2193 : 
; 2194 :     // get cause of interrupt
; 2195 :     intrStatus = SmartReflex_funcs->ClearInterruptStatus(kSmartReflex_Channel1,
; 2196 :                     ERRCONFIG_INTR_SR_MASK
; 2197 :                     );

  00018	e59f3048	 ldr         r3, [pc, #0x48]
  0001c	e3a02455	 mov         r2, #0x55, 8
  00020	e3821501	 orr         r1, r2, #1, 10
  00024	e5933000	 ldr         r3, [r3]
  00028	e3a00000	 mov         r0, #0
  0002c	e593302c	 ldr         r3, [r3, #0x2C]
  00030	e1a0e00f	 mov         lr, pc
  00034	e12fff13	 bx          r3
  00038	e1a01000	 mov         r1, r0

; 2198 :     
; 2199 :     OALMSG(TRUE, (L"OALSmartReflex1Intr intrStatus=0x%08X\r\n", intrStatus));

  0003c	e59f0020	 ldr         r0, [pc, #0x20]
  00040	eb000000	 bl          NKDbgPrintfW

; 2200 :     OALMSG(OAL_FUNC, (L"-OALSmartReflex1Intr\r\n"));

  00044	e5943440	 ldr         r3, [r4, #0x440]
  00048	e3130004	 tst         r3, #4
  0004c	159f000c	 ldrne       r0, [pc, #0xC]
  00050	1b000000	 blne        NKDbgPrintfW

; 2201 :     return SYSINTR_NOP;

  00054	e3a00000	 mov         r0, #0

; 2202 : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN10@OALSmartRe|
  00060		 |$LN11@OALSmartRe|
  00060	00000000	 DCD         |??_C@_1CO@OILFLAEL@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00064		 |$LN12@OALSmartRe|
  00064	00000000	 DCD         |??_C@_1FA@BPEDMOIJ@?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA0@|
  00068		 |$LN13@OALSmartRe|
  00068	00000000	 DCD         |SmartReflex_funcs|
  0006c		 |$LN14@OALSmartRe|
  0006c	00000000	 DCD         |??_C@_1CO@DDHBOPGA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA1?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00070		 |$LN15@OALSmartRe|
  00070	00000000	 DCD         |dpCurSettings|
  00074		 |$M50064|

			 ENDP  ; |OALSmartReflex1Intr|

	EXPORT	|OALSmartReflex2Intr|
	EXPORT	|??_C@_1CO@MBHNAELJ@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@KFBGMKJO@?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@BKLJFLJC@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T50086| DCD	|$LN9@OALSmartRe@2|
	DCD	0x40001d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MBHNAELJ@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "m", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "l"
	DCB	0x0, "e", 0x0, "x", 0x0, "2", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@KFBGMKJO@?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA0@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "S", 0x0, "m", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "l", 0x0, "e"
	DCB	0x0, "x", 0x0, "2", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@BKLJFLJC@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "m", 0x0, "a"
	DCB	0x0, "r", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "l"
	DCB	0x0, "e", 0x0, "x", 0x0, "2", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALSmartReflex2Intr| PROC

; 2214 : {

  00000		 |$LN9@OALSmartRe@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50083|

; 2215 :     UINT intrStatus;
; 2216 :     OALMSG(OAL_FUNC, (L"+OALSmartReflex2Intr\r\n"));

  00004	e59f4064	 ldr         r4, [pc, #0x64]
  00008	e5943440	 ldr         r3, [r4, #0x440]
  0000c	e3130004	 tst         r3, #4
  00010	159f0054	 ldrne       r0, [pc, #0x54]
  00014	1b000000	 blne        NKDbgPrintfW

; 2217 : 
; 2218 :     // get cause of interrupt
; 2219 :     intrStatus = SmartReflex_funcs->ClearInterruptStatus(kSmartReflex_Channel2,
; 2220 :                     ERRCONFIG_INTR_SR_MASK
; 2221 :                     );

  00018	e59f3048	 ldr         r3, [pc, #0x48]
  0001c	e3a02455	 mov         r2, #0x55, 8
  00020	e3821501	 orr         r1, r2, #1, 10
  00024	e5933000	 ldr         r3, [r3]
  00028	e3a00001	 mov         r0, #1
  0002c	e593302c	 ldr         r3, [r3, #0x2C]
  00030	e1a0e00f	 mov         lr, pc
  00034	e12fff13	 bx          r3
  00038	e1a01000	 mov         r1, r0

; 2222 :     
; 2223 :     OALMSG(TRUE, (L"OALSmartReflex2Intr intrStatus=0x%08X\r\n", intrStatus));

  0003c	e59f0020	 ldr         r0, [pc, #0x20]
  00040	eb000000	 bl          NKDbgPrintfW

; 2224 :     OALMSG(OAL_FUNC, (L"-OALSmartReflex2Intr\r\n"));

  00044	e5943440	 ldr         r3, [r4, #0x440]
  00048	e3130004	 tst         r3, #4
  0004c	159f000c	 ldrne       r0, [pc, #0xC]
  00050	1b000000	 blne        NKDbgPrintfW

; 2225 :     return SYSINTR_NOP;

  00054	e3a00000	 mov         r0, #0

; 2226 : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN10@OALSmartRe@2|
  00060		 |$LN11@OALSmartRe@2|
  00060	00000000	 DCD         |??_C@_1CO@MBHNAELJ@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00064		 |$LN12@OALSmartRe@2|
  00064	00000000	 DCD         |??_C@_1FA@KFBGMKJO@?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?5?$AAi?$AAn?$AAt?$AAr?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?$DN?$AA0@|
  00068		 |$LN13@OALSmartRe@2|
  00068	00000000	 DCD         |SmartReflex_funcs|
  0006c		 |$LN14@OALSmartRe@2|
  0006c	00000000	 DCD         |??_C@_1CO@BKLJFLJC@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAm?$AAa?$AAr?$AAt?$AAR?$AAe?$AAf?$AAl?$AAe?$AAx?$AA2?$AAI?$AAn?$AAt?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00070		 |$LN15@OALSmartRe@2|
  00070	00000000	 DCD         |dpCurSettings|
  00074		 |$M50084|

			 ENDP  ; |OALSmartReflex2Intr|

	EXPORT	|OALContextSaveGPIO|

  0008c			 AREA	 |.bss|, NOINIT
|s_rgGpioContext| % 0x3c0
|s_rgGpioRegsAddr| % 0x18
|s_rgGpioContext| % 0x3c0

  00000			 AREA	 |.pdata|, PDATA
|$T50101| DCD	|$LN10@OALContext|
	DCD	0x40002f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSaveGPIO| PROC

; 2236 : {

  00000		 |$LN10@OALContext|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M50098|

; 2237 :     UINT32 i;
; 2238 : 
; 2239 :     for(i=0; i< OMAP_GPIO_BANK_TO_RESTORE; i++)

  00004	e59f30ac	 ldr         r3, [pc, #0xAC]
  00008	e59f50a4	 ldr         r5, [pc, #0xA4]
  0000c	e3a06006	 mov         r6, #6
  00010	e2834010	 add         r4, r3, #0x10
  00014		 |$LL3@OALContext|

; 2240 :         {
; 2241 :         // disable gpio clocks
; 2242 :         s_rgGpioContext[i].SYSCONFIG        =   INREG32(&s_rgGpioRegsAddr[i]->SYSCONFIG);

  00014	e495e004	 ldr         lr, [r5], #4

; 2243 :         s_rgGpioContext[i].IRQENABLE1       =   INREG32(&s_rgGpioRegsAddr[i]->IRQENABLE1);
; 2244 :         s_rgGpioContext[i].WAKEUPENABLE     =   INREG32(&s_rgGpioRegsAddr[i]->WAKEUPENABLE);
; 2245 :         s_rgGpioContext[i].IRQENABLE2       =   INREG32(&s_rgGpioRegsAddr[i]->IRQENABLE2);
; 2246 :         s_rgGpioContext[i].CTRL             =   INREG32(&s_rgGpioRegsAddr[i]->CTRL);
; 2247 :         s_rgGpioContext[i].OE               =   INREG32(&s_rgGpioRegsAddr[i]->OE);
; 2248 :         s_rgGpioContext[i].LEVELDETECT0     =   INREG32(&s_rgGpioRegsAddr[i]->LEVELDETECT0);
; 2249 :         s_rgGpioContext[i].LEVELDETECT1     =   INREG32(&s_rgGpioRegsAddr[i]->LEVELDETECT1);
; 2250 :         s_rgGpioContext[i].RISINGDETECT     =   INREG32(&s_rgGpioRegsAddr[i]->RISINGDETECT);
; 2251 :         s_rgGpioContext[i].FALLINGDETECT    =   INREG32(&s_rgGpioRegsAddr[i]->FALLINGDETECT);
; 2252 :         s_rgGpioContext[i].DEBOUNCENABLE    =   INREG32(&s_rgGpioRegsAddr[i]->DEBOUNCENABLE);

  00018	e2840040	 add         r0, r4, #0x40

; 2253 :         s_rgGpioContext[i].DEBOUNCINGTIME   =   INREG32(&s_rgGpioRegsAddr[i]->DEBOUNCINGTIME);

  0001c	e2841044	 add         r1, r4, #0x44

; 2254 :         s_rgGpioContext[i].DATAOUT          =   INREG32(&s_rgGpioRegsAddr[i]->DATAOUT);

  00020	e284202c	 add         r2, r4, #0x2C
  00024	e59e3010	 ldr         r3, [lr, #0x10]
  00028	e2566001	 subs        r6, r6, #1
  0002c	e5843000	 str         r3, [r4]
  00030	e59e301c	 ldr         r3, [lr, #0x1C]
  00034	e584300c	 str         r3, [r4, #0xC]
  00038	e59e3020	 ldr         r3, [lr, #0x20]
  0003c	e5843010	 str         r3, [r4, #0x10]
  00040	e59e302c	 ldr         r3, [lr, #0x2C]
  00044	e584301c	 str         r3, [r4, #0x1C]
  00048	e59e3030	 ldr         r3, [lr, #0x30]
  0004c	e5843020	 str         r3, [r4, #0x20]
  00050	e59e3034	 ldr         r3, [lr, #0x34]
  00054	e5843024	 str         r3, [r4, #0x24]
  00058	e59e3040	 ldr         r3, [lr, #0x40]
  0005c	e5843030	 str         r3, [r4, #0x30]
  00060	e59e3044	 ldr         r3, [lr, #0x44]
  00064	e5843034	 str         r3, [r4, #0x34]
  00068	e59e3048	 ldr         r3, [lr, #0x48]
  0006c	e5843038	 str         r3, [r4, #0x38]
  00070	e59e304c	 ldr         r3, [lr, #0x4C]
  00074	e584303c	 str         r3, [r4, #0x3C]
  00078	e59e3050	 ldr         r3, [lr, #0x50]
  0007c	e28440a0	 add         r4, r4, #0xA0
  00080	e5803000	 str         r3, [r0]
  00084	e59e3054	 ldr         r3, [lr, #0x54]
  00088	e5813000	 str         r3, [r1]
  0008c	e59e303c	 ldr         r3, [lr, #0x3C]
  00090	e5823000	 str         r3, [r2]
  00094	1affffde	 bne         |$LL3@OALContext|

; 2255 :         }
; 2256 : 
; 2257 :     // clear dirty bit for gpio
; 2258 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_GPIO;

  00098	e59f2010	 ldr         r2, [pc, #0x10]
  0009c	e5923000	 ldr         r3, [r2]
  000a0	e3c33001	 bic         r3, r3, #1
  000a4	e5823000	 str         r3, [r2]

; 2259 : }

  000a8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN11@OALContext|
  000b0		 |$LN12@OALContext|
  000b0	00000000	 DCD         |g_ffContextSaveMask|
  000b4		 |$LN13@OALContext|
  000b4	00000000	 DCD         |s_rgGpioRegsAddr|
  000b8		 |$LN14@OALContext|
  000b8	00000000	 DCD         |s_rgGpioContext|
  000bc		 |$M50099|

			 ENDP  ; |OALContextSaveGPIO|

	EXPORT	|OALContextSaveGPMC|

  00824			 AREA	 |.bss|, NOINIT
|s_gpmcContext| % 0x2c0
|s_gpmcContext| % 0x2c0

  00000			 AREA	 |.pdata|, PDATA
|$T50112| DCD	|$LN13@OALContext@2|
	DCD	0x4000a100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSaveGPMC| PROC

; 2269 : {

  00000		 |$LN13@OALContext@2|
  00000		 |$M50109|

; 2270 :     // Read the GPMC registers value and store it in shadow variable.
; 2271 :     s_gpmcContext.GPMC_SYSCONFIG = INREG32(&g_pGPMCRegs->GPMC_SYSCONFIG);

  00000	e59f3278	 ldr         r3, [pc, #0x278]
  00004	e59f1270	 ldr         r1, [pc, #0x270]
  00008	e5932000	 ldr         r2, [r3]
  0000c	e5923010	 ldr         r3, [r2, #0x10]

; 2272 :     s_gpmcContext.GPMC_IRQENABLE = INREG32(&g_pGPMCRegs->GPMC_IRQENABLE);
; 2273 :     s_gpmcContext.GPMC_TIMEOUT_CONTROL = INREG32(&g_pGPMCRegs->GPMC_TIMEOUT_CONTROL);

  00010	e5813010	 str         r3, [r1, #0x10]
  00014	e592301c	 ldr         r3, [r2, #0x1C]

; 2274 :     s_gpmcContext.GPMC_CONFIG = INREG32(&g_pGPMCRegs->GPMC_CONFIG);
; 2275 :     s_gpmcContext.GPMC_PREFETCH_CONFIG1 = INREG32(&g_pGPMCRegs->GPMC_PREFETCH_CONFIG1);

  00018	e581301c	 str         r3, [r1, #0x1C]
  0001c	e5923040	 ldr         r3, [r2, #0x40]

; 2276 :     s_gpmcContext.GPMC_PREFETCH_CONFIG2 = INREG32(&g_pGPMCRegs->GPMC_PREFETCH_CONFIG2);
; 2277 :     s_gpmcContext.GPMC_PREFETCH_CONTROL = INREG32(&g_pGPMCRegs->GPMC_PREFETCH_CONTROL);

  00020	e5813040	 str         r3, [r1, #0x40]
  00024	e5923050	 ldr         r3, [r2, #0x50]

; 2278 : 
; 2279 :     // Store the GPMC CS0 group only if it is enabled.
; 2280 :     if(INREG32(&g_pGPMCRegs->GPMC_CONFIG7_0) & GPMC_CSVALID)

  00028	e5813050	 str         r3, [r1, #0x50]
  0002c	e59231e0	 ldr         r3, [r2, #0x1E0]
  00030	e58131e0	 str         r3, [r1, #0x1E0]
  00034	e59231e4	 ldr         r3, [r2, #0x1E4]
  00038	e58131e4	 str         r3, [r1, #0x1E4]
  0003c	e59231ec	 ldr         r3, [r2, #0x1EC]
  00040	e58131ec	 str         r3, [r1, #0x1EC]
  00044	e5923078	 ldr         r3, [r2, #0x78]
  00048	e3130040	 tst         r3, #0x40
  0004c	0a00000d	 beq         |$LN8@OALContext@2|

; 2281 :     {
; 2282 :         s_gpmcContext.GPMC_CONFIG1_0 = INREG32(&g_pGPMCRegs->GPMC_CONFIG1_0);

  00050	e5923060	 ldr         r3, [r2, #0x60]

; 2283 :         s_gpmcContext.GPMC_CONFIG2_0 = INREG32(&g_pGPMCRegs->GPMC_CONFIG2_0);
; 2284 :         s_gpmcContext.GPMC_CONFIG3_0 = INREG32(&g_pGPMCRegs->GPMC_CONFIG3_0);

  00054	e5813060	 str         r3, [r1, #0x60]
  00058	e5923064	 ldr         r3, [r2, #0x64]

; 2285 :         s_gpmcContext.GPMC_CONFIG4_0 = INREG32(&g_pGPMCRegs->GPMC_CONFIG4_0);
; 2286 :         s_gpmcContext.GPMC_CONFIG5_0 = INREG32(&g_pGPMCRegs->GPMC_CONFIG5_0);

  0005c	e5813064	 str         r3, [r1, #0x64]
  00060	e5923068	 ldr         r3, [r2, #0x68]

; 2287 :         s_gpmcContext.GPMC_CONFIG6_0 = INREG32(&g_pGPMCRegs->GPMC_CONFIG6_0);

  00064	e5813068	 str         r3, [r1, #0x68]
  00068	e592306c	 ldr         r3, [r2, #0x6C]
  0006c	e581306c	 str         r3, [r1, #0x6C]
  00070	e5923070	 ldr         r3, [r2, #0x70]
  00074	e5813070	 str         r3, [r1, #0x70]
  00078	e5923074	 ldr         r3, [r2, #0x74]
  0007c	e5813074	 str         r3, [r1, #0x74]

; 2288 :         s_gpmcContext.GPMC_CONFIG7_0 = INREG32(&g_pGPMCRegs->GPMC_CONFIG7_0);

  00080	e5923078	 ldr         r3, [r2, #0x78]
  00084	e5813078	 str         r3, [r1, #0x78]
  00088		 |$LN8@OALContext@2|

; 2289 :     }
; 2290 : 
; 2291 :     // Store the GPMC CS1 group only if it is enabled.
; 2292 :     if(INREG32(&g_pGPMCRegs->GPMC_CONFIG7_1) & GPMC_CSVALID)

  00088	e59230a8	 ldr         r3, [r2, #0xA8]
  0008c	e3130040	 tst         r3, #0x40
  00090	0a00000d	 beq         |$LN7@OALContext@2|

; 2293 :     {
; 2294 :         s_gpmcContext.GPMC_CONFIG1_1 = INREG32(&g_pGPMCRegs->GPMC_CONFIG1_1);

  00094	e5923090	 ldr         r3, [r2, #0x90]

; 2295 :         s_gpmcContext.GPMC_CONFIG2_1 = INREG32(&g_pGPMCRegs->GPMC_CONFIG2_1);
; 2296 :         s_gpmcContext.GPMC_CONFIG3_1 = INREG32(&g_pGPMCRegs->GPMC_CONFIG3_1);

  00098	e5813090	 str         r3, [r1, #0x90]
  0009c	e5923094	 ldr         r3, [r2, #0x94]

; 2297 :         s_gpmcContext.GPMC_CONFIG4_1 = INREG32(&g_pGPMCRegs->GPMC_CONFIG4_1);
; 2298 :         s_gpmcContext.GPMC_CONFIG5_1 = INREG32(&g_pGPMCRegs->GPMC_CONFIG5_1);

  000a0	e5813094	 str         r3, [r1, #0x94]
  000a4	e5923098	 ldr         r3, [r2, #0x98]

; 2299 :         s_gpmcContext.GPMC_CONFIG6_1 = INREG32(&g_pGPMCRegs->GPMC_CONFIG6_1);

  000a8	e5813098	 str         r3, [r1, #0x98]
  000ac	e592309c	 ldr         r3, [r2, #0x9C]
  000b0	e581309c	 str         r3, [r1, #0x9C]
  000b4	e59230a0	 ldr         r3, [r2, #0xA0]
  000b8	e58130a0	 str         r3, [r1, #0xA0]
  000bc	e59230a4	 ldr         r3, [r2, #0xA4]
  000c0	e58130a4	 str         r3, [r1, #0xA4]

; 2300 :         s_gpmcContext.GPMC_CONFIG7_1 = INREG32(&g_pGPMCRegs->GPMC_CONFIG7_1);

  000c4	e59230a8	 ldr         r3, [r2, #0xA8]
  000c8	e58130a8	 str         r3, [r1, #0xA8]
  000cc		 |$LN7@OALContext@2|

; 2301 :     }
; 2302 : 
; 2303 :     // Store the GPMC CS2 group only if it is enabled.
; 2304 :     if(INREG32(&g_pGPMCRegs->GPMC_CONFIG7_2) & GPMC_CSVALID)

  000cc	e59230d8	 ldr         r3, [r2, #0xD8]
  000d0	e3130040	 tst         r3, #0x40
  000d4	0a00000d	 beq         |$LN6@OALContext@2|

; 2305 :     {
; 2306 :         s_gpmcContext.GPMC_CONFIG1_2 = INREG32(&g_pGPMCRegs->GPMC_CONFIG1_2);

  000d8	e59230c0	 ldr         r3, [r2, #0xC0]

; 2307 :         s_gpmcContext.GPMC_CONFIG2_2 = INREG32(&g_pGPMCRegs->GPMC_CONFIG2_2);
; 2308 :         s_gpmcContext.GPMC_CONFIG3_2 = INREG32(&g_pGPMCRegs->GPMC_CONFIG3_2);

  000dc	e58130c0	 str         r3, [r1, #0xC0]
  000e0	e59230c4	 ldr         r3, [r2, #0xC4]

; 2309 :         s_gpmcContext.GPMC_CONFIG4_2 = INREG32(&g_pGPMCRegs->GPMC_CONFIG4_2);
; 2310 :         s_gpmcContext.GPMC_CONFIG5_2 = INREG32(&g_pGPMCRegs->GPMC_CONFIG5_2);

  000e4	e58130c4	 str         r3, [r1, #0xC4]
  000e8	e59230c8	 ldr         r3, [r2, #0xC8]

; 2311 :         s_gpmcContext.GPMC_CONFIG6_2 = INREG32(&g_pGPMCRegs->GPMC_CONFIG6_2);

  000ec	e58130c8	 str         r3, [r1, #0xC8]
  000f0	e59230cc	 ldr         r3, [r2, #0xCC]
  000f4	e58130cc	 str         r3, [r1, #0xCC]
  000f8	e59230d0	 ldr         r3, [r2, #0xD0]
  000fc	e58130d0	 str         r3, [r1, #0xD0]
  00100	e59230d4	 ldr         r3, [r2, #0xD4]
  00104	e58130d4	 str         r3, [r1, #0xD4]

; 2312 :         s_gpmcContext.GPMC_CONFIG7_2 = INREG32(&g_pGPMCRegs->GPMC_CONFIG7_2);

  00108	e59230d8	 ldr         r3, [r2, #0xD8]
  0010c	e58130d8	 str         r3, [r1, #0xD8]
  00110		 |$LN6@OALContext@2|

; 2313 :     }
; 2314 : 
; 2315 :     // Store the GPMC CS3 group only if it is enabled.
; 2316 :     if(INREG32(&g_pGPMCRegs->GPMC_CONFIG7_3) & GPMC_CSVALID)

  00110	e5923108	 ldr         r3, [r2, #0x108]
  00114	e3130040	 tst         r3, #0x40
  00118	0a00000d	 beq         |$LN5@OALContext@2|

; 2317 :     {
; 2318 :         s_gpmcContext.GPMC_CONFIG1_3 = INREG32(&g_pGPMCRegs->GPMC_CONFIG1_3);

  0011c	e59230f0	 ldr         r3, [r2, #0xF0]

; 2319 :         s_gpmcContext.GPMC_CONFIG2_3 = INREG32(&g_pGPMCRegs->GPMC_CONFIG2_3);
; 2320 :         s_gpmcContext.GPMC_CONFIG3_3 = INREG32(&g_pGPMCRegs->GPMC_CONFIG3_3);

  00120	e58130f0	 str         r3, [r1, #0xF0]
  00124	e59230f4	 ldr         r3, [r2, #0xF4]

; 2321 :         s_gpmcContext.GPMC_CONFIG4_3 = INREG32(&g_pGPMCRegs->GPMC_CONFIG4_3);
; 2322 :         s_gpmcContext.GPMC_CONFIG5_3 = INREG32(&g_pGPMCRegs->GPMC_CONFIG5_3);

  00128	e58130f4	 str         r3, [r1, #0xF4]
  0012c	e59230f8	 ldr         r3, [r2, #0xF8]

; 2323 :         s_gpmcContext.GPMC_CONFIG6_3 = INREG32(&g_pGPMCRegs->GPMC_CONFIG6_3);

  00130	e58130f8	 str         r3, [r1, #0xF8]
  00134	e59230fc	 ldr         r3, [r2, #0xFC]
  00138	e58130fc	 str         r3, [r1, #0xFC]
  0013c	e5923100	 ldr         r3, [r2, #0x100]
  00140	e5813100	 str         r3, [r1, #0x100]
  00144	e5923104	 ldr         r3, [r2, #0x104]
  00148	e5813104	 str         r3, [r1, #0x104]

; 2324 :         s_gpmcContext.GPMC_CONFIG7_3 = INREG32(&g_pGPMCRegs->GPMC_CONFIG7_3);

  0014c	e5923108	 ldr         r3, [r2, #0x108]
  00150	e5813108	 str         r3, [r1, #0x108]
  00154		 |$LN5@OALContext@2|

; 2325 :     }
; 2326 : 
; 2327 :     // Store the GPMC CS4 group only if it is enabled.
; 2328 :     if(INREG32(&g_pGPMCRegs->GPMC_CONFIG7_4) & GPMC_CSVALID)

  00154	e5923138	 ldr         r3, [r2, #0x138]
  00158	e3130040	 tst         r3, #0x40
  0015c	0a00000d	 beq         |$LN4@OALContext@2|

; 2329 :     {
; 2330 :         s_gpmcContext.GPMC_CONFIG1_4 = INREG32(&g_pGPMCRegs->GPMC_CONFIG1_4);

  00160	e5923120	 ldr         r3, [r2, #0x120]

; 2331 :         s_gpmcContext.GPMC_CONFIG2_4 = INREG32(&g_pGPMCRegs->GPMC_CONFIG2_4);
; 2332 :         s_gpmcContext.GPMC_CONFIG3_4 = INREG32(&g_pGPMCRegs->GPMC_CONFIG3_4);

  00164	e5813120	 str         r3, [r1, #0x120]
  00168	e5923124	 ldr         r3, [r2, #0x124]

; 2333 :         s_gpmcContext.GPMC_CONFIG4_4 = INREG32(&g_pGPMCRegs->GPMC_CONFIG4_4);
; 2334 :         s_gpmcContext.GPMC_CONFIG5_4 = INREG32(&g_pGPMCRegs->GPMC_CONFIG5_4);

  0016c	e5813124	 str         r3, [r1, #0x124]
  00170	e5923128	 ldr         r3, [r2, #0x128]

; 2335 :         s_gpmcContext.GPMC_CONFIG6_4 = INREG32(&g_pGPMCRegs->GPMC_CONFIG6_4);

  00174	e5813128	 str         r3, [r1, #0x128]
  00178	e592312c	 ldr         r3, [r2, #0x12C]
  0017c	e581312c	 str         r3, [r1, #0x12C]
  00180	e5923130	 ldr         r3, [r2, #0x130]
  00184	e5813130	 str         r3, [r1, #0x130]
  00188	e5923134	 ldr         r3, [r2, #0x134]
  0018c	e5813134	 str         r3, [r1, #0x134]

; 2336 :         s_gpmcContext.GPMC_CONFIG7_4 = INREG32(&g_pGPMCRegs->GPMC_CONFIG7_4);

  00190	e5923138	 ldr         r3, [r2, #0x138]
  00194	e5813138	 str         r3, [r1, #0x138]
  00198		 |$LN4@OALContext@2|

; 2337 :     }
; 2338 : 
; 2339 :     // Store the GPMC CS5 group only if it is enabled.
; 2340 :     if(INREG32(&g_pGPMCRegs->GPMC_CONFIG7_5) & GPMC_CSVALID)

  00198	e5923168	 ldr         r3, [r2, #0x168]
  0019c	e3130040	 tst         r3, #0x40
  001a0	0a00000d	 beq         |$LN3@OALContext@2|

; 2341 :     {
; 2342 :         s_gpmcContext.GPMC_CONFIG1_5 = INREG32(&g_pGPMCRegs->GPMC_CONFIG1_5);

  001a4	e5923150	 ldr         r3, [r2, #0x150]

; 2343 :         s_gpmcContext.GPMC_CONFIG2_5 = INREG32(&g_pGPMCRegs->GPMC_CONFIG2_5);
; 2344 :         s_gpmcContext.GPMC_CONFIG3_5 = INREG32(&g_pGPMCRegs->GPMC_CONFIG3_5);

  001a8	e5813150	 str         r3, [r1, #0x150]
  001ac	e5923154	 ldr         r3, [r2, #0x154]

; 2345 :         s_gpmcContext.GPMC_CONFIG4_5 = INREG32(&g_pGPMCRegs->GPMC_CONFIG4_5);
; 2346 :         s_gpmcContext.GPMC_CONFIG5_5 = INREG32(&g_pGPMCRegs->GPMC_CONFIG5_5);

  001b0	e5813154	 str         r3, [r1, #0x154]
  001b4	e5923158	 ldr         r3, [r2, #0x158]

; 2347 :         s_gpmcContext.GPMC_CONFIG6_5 = INREG32(&g_pGPMCRegs->GPMC_CONFIG6_5);

  001b8	e5813158	 str         r3, [r1, #0x158]
  001bc	e592315c	 ldr         r3, [r2, #0x15C]
  001c0	e581315c	 str         r3, [r1, #0x15C]
  001c4	e5923160	 ldr         r3, [r2, #0x160]
  001c8	e5813160	 str         r3, [r1, #0x160]
  001cc	e5923164	 ldr         r3, [r2, #0x164]
  001d0	e5813164	 str         r3, [r1, #0x164]

; 2348 :         s_gpmcContext.GPMC_CONFIG7_5 = INREG32(&g_pGPMCRegs->GPMC_CONFIG7_5);

  001d4	e5923168	 ldr         r3, [r2, #0x168]
  001d8	e5813168	 str         r3, [r1, #0x168]
  001dc		 |$LN3@OALContext@2|

; 2349 :     }
; 2350 : 
; 2351 :     // Store the GPMC CS6 group only if it is enabled.
; 2352 :     if(INREG32(&g_pGPMCRegs->GPMC_CONFIG7_6) & GPMC_CSVALID)

  001dc	e5923198	 ldr         r3, [r2, #0x198]
  001e0	e3130040	 tst         r3, #0x40
  001e4	0a00000d	 beq         |$LN2@OALContext@2|

; 2353 :     {
; 2354 :         s_gpmcContext.GPMC_CONFIG1_6 = INREG32(&g_pGPMCRegs->GPMC_CONFIG1_6);

  001e8	e5923180	 ldr         r3, [r2, #0x180]

; 2355 :         s_gpmcContext.GPMC_CONFIG2_6 = INREG32(&g_pGPMCRegs->GPMC_CONFIG2_6);
; 2356 :         s_gpmcContext.GPMC_CONFIG3_6 = INREG32(&g_pGPMCRegs->GPMC_CONFIG3_6);

  001ec	e5813180	 str         r3, [r1, #0x180]
  001f0	e5923184	 ldr         r3, [r2, #0x184]

; 2357 :         s_gpmcContext.GPMC_CONFIG4_6 = INREG32(&g_pGPMCRegs->GPMC_CONFIG4_6);
; 2358 :         s_gpmcContext.GPMC_CONFIG5_6 = INREG32(&g_pGPMCRegs->GPMC_CONFIG5_6);

  001f4	e5813184	 str         r3, [r1, #0x184]
  001f8	e5923188	 ldr         r3, [r2, #0x188]

; 2359 :         s_gpmcContext.GPMC_CONFIG6_6 = INREG32(&g_pGPMCRegs->GPMC_CONFIG6_6);

  001fc	e5813188	 str         r3, [r1, #0x188]
  00200	e592318c	 ldr         r3, [r2, #0x18C]
  00204	e581318c	 str         r3, [r1, #0x18C]
  00208	e5923190	 ldr         r3, [r2, #0x190]
  0020c	e5813190	 str         r3, [r1, #0x190]
  00210	e5923194	 ldr         r3, [r2, #0x194]
  00214	e5813194	 str         r3, [r1, #0x194]

; 2360 :         s_gpmcContext.GPMC_CONFIG7_6 = INREG32(&g_pGPMCRegs->GPMC_CONFIG7_6);

  00218	e5923198	 ldr         r3, [r2, #0x198]
  0021c	e5813198	 str         r3, [r1, #0x198]
  00220		 |$LN2@OALContext@2|

; 2361 :     }
; 2362 : 
; 2363 :     // Store the GPMC CS7 group only if it is enabled.
; 2364 :     if(INREG32(&g_pGPMCRegs->GPMC_CONFIG7_7) & GPMC_CSVALID)

  00220	e59231c8	 ldr         r3, [r2, #0x1C8]
  00224	e3130040	 tst         r3, #0x40
  00228	0a00000d	 beq         |$LN1@OALContext@2|

; 2365 :     {
; 2366 :         s_gpmcContext.GPMC_CONFIG1_7 = INREG32(&g_pGPMCRegs->GPMC_CONFIG1_7);

  0022c	e59231b0	 ldr         r3, [r2, #0x1B0]

; 2367 :         s_gpmcContext.GPMC_CONFIG2_7 = INREG32(&g_pGPMCRegs->GPMC_CONFIG2_7);
; 2368 :         s_gpmcContext.GPMC_CONFIG3_7 = INREG32(&g_pGPMCRegs->GPMC_CONFIG3_7);

  00230	e58131b0	 str         r3, [r1, #0x1B0]
  00234	e59231b4	 ldr         r3, [r2, #0x1B4]

; 2369 :         s_gpmcContext.GPMC_CONFIG4_7 = INREG32(&g_pGPMCRegs->GPMC_CONFIG4_7);
; 2370 :         s_gpmcContext.GPMC_CONFIG5_7 = INREG32(&g_pGPMCRegs->GPMC_CONFIG5_7);

  00238	e58131b4	 str         r3, [r1, #0x1B4]
  0023c	e59231b8	 ldr         r3, [r2, #0x1B8]

; 2371 :         s_gpmcContext.GPMC_CONFIG6_7 = INREG32(&g_pGPMCRegs->GPMC_CONFIG6_7);

  00240	e58131b8	 str         r3, [r1, #0x1B8]
  00244	e59231bc	 ldr         r3, [r2, #0x1BC]
  00248	e58131bc	 str         r3, [r1, #0x1BC]
  0024c	e59231c0	 ldr         r3, [r2, #0x1C0]
  00250	e58131c0	 str         r3, [r1, #0x1C0]
  00254	e59231c4	 ldr         r3, [r2, #0x1C4]
  00258	e58131c4	 str         r3, [r1, #0x1C4]

; 2372 :         s_gpmcContext.GPMC_CONFIG7_7 = INREG32(&g_pGPMCRegs->GPMC_CONFIG7_7);

  0025c	e59231c8	 ldr         r3, [r2, #0x1C8]
  00260	e58131c8	 str         r3, [r1, #0x1C8]
  00264		 |$LN1@OALContext@2|

; 2373 :     }
; 2374 : 
; 2375 :     // clear dirty bit
; 2376 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_GPMC;

  00264	e59f200c	 ldr         r2, [pc, #0xC]
  00268	e5923000	 ldr         r3, [r2]
  0026c	e3c33010	 bic         r3, r3, #0x10
  00270	e5823000	 str         r3, [r2]

; 2377 : }

  00274	e12fff1e	 bx          lr
  00278		 |$LN14@OALContext@2|
  00278		 |$LN15@OALContext@2|
  00278	00000000	 DCD         |g_ffContextSaveMask|
  0027c		 |$LN16@OALContext@2|
  0027c	00000000	 DCD         |s_gpmcContext|
  00280		 |$LN17@OALContext@2|
  00280	00000000	 DCD         |g_pGPMCRegs|
  00284		 |$M50110|

			 ENDP  ; |OALContextSaveGPMC|

	EXPORT	|OALContextSaveSCM|

  00da4			 AREA	 |.bss|, NOINIT
|s_syscGenContext| % 0x2d4
|s_syscIntContext| % 0x14
|s_syscGenContext| % 0x2d4

  00000			 AREA	 |.pdata|, PDATA
|$T50123| DCD	|$LN5@OALContext@3|
	DCD	0x40005601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSaveSCM| PROC

; 2387 : {

  00000		 |$LN5@OALContext@3|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M50120|

; 2388 :     // Read the SCM registers value and store it in shadow variable.
; 2389 : 
; 2390 :     s_syscIntContext.CONTROL_SYSCONFIG = INREG32(&s_pSyscIFContext->CONTROL_SYSCONFIG);

  00004	e59f3148	 ldr         r3, [pc, #0x148]

; 2391 : 
; 2392 :     s_syscGenContext.CONTROL_DEVCONF0      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEVCONF0);

  00008	e59f2140	 ldr         r2, [pc, #0x140]
  0000c	e59fe138	 ldr         lr, [pc, #0x138]
  00010	e5933000	 ldr         r3, [r3]
  00014	e5920000	 ldr         r0, [r2]

; 2393 :     s_syscGenContext.CONTROL_MEM_DFTRW0    = INREG32(&g_pSysCtrlGenReg->CONTROL_MEM_DFTRW0);
; 2394 :     s_syscGenContext.CONTROL_MEM_DFTRW1    = INREG32(&g_pSysCtrlGenReg->CONTROL_MEM_DFTRW1);
; 2395 :     s_syscGenContext.CONTROL_MSUSPENDMUX_0 = INREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_0);
; 2396 :     s_syscGenContext.CONTROL_MSUSPENDMUX_1 = INREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_1);
; 2397 :     s_syscGenContext.CONTROL_MSUSPENDMUX_2 = INREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_2);
; 2398 :     s_syscGenContext.CONTROL_MSUSPENDMUX_3 = INREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_3);
; 2399 :     s_syscGenContext.CONTROL_MSUSPENDMUX_4 = INREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_4);
; 2400 :     s_syscGenContext.CONTROL_MSUSPENDMUX_5 = INREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_5);
; 2401 :     s_syscGenContext.CONTROL_SEC_CTRL      = INREG32(&g_pSysCtrlGenReg->CONTROL_SEC_CTRL);
; 2402 :     s_syscGenContext.CONTROL_DEVCONF1      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEVCONF1);
; 2403 :     s_syscGenContext.CONTROL_CSIRXFE       = INREG32(&g_pSysCtrlGenReg->CONTROL_CSIRXFE);
; 2404 :     s_syscGenContext.CONTROL_IVA2_BOOTADDR = INREG32(&g_pSysCtrlGenReg->CONTROL_IVA2_BOOTADDR);
; 2405 :     s_syscGenContext.CONTROL_IVA2_BOOTMOD  = INREG32(&g_pSysCtrlGenReg->CONTROL_IVA2_BOOTMOD);
; 2406 :     s_syscGenContext.CONTROL_DEBOBS_0      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_0);
; 2407 :     s_syscGenContext.CONTROL_DEBOBS_1      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_1);
; 2408 :     s_syscGenContext.CONTROL_DEBOBS_2      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_2);
; 2409 :     s_syscGenContext.CONTROL_DEBOBS_3      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_3);
; 2410 :     s_syscGenContext.CONTROL_DEBOBS_4      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_4);
; 2411 :     s_syscGenContext.CONTROL_DEBOBS_5      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_5);
; 2412 :     s_syscGenContext.CONTROL_DEBOBS_6      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_6);
; 2413 :     s_syscGenContext.CONTROL_DEBOBS_7      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_7);
; 2414 :     s_syscGenContext.CONTROL_DEBOBS_8      = INREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_8);
; 2415 :     s_syscGenContext.CONTROL_PROG_IO0      = INREG32(&g_pSysCtrlGenReg->CONTROL_PROG_IO0);
; 2416 :     s_syscGenContext.CONTROL_PROG_IO1      = INREG32(&g_pSysCtrlGenReg->CONTROL_PROG_IO1);
; 2417 : 
; 2418 :     s_syscGenContext.CONTROL_DSS_DPLL_SPREADING     = INREG32(&g_pSysCtrlGenReg->CONTROL_DSS_DPLL_SPREADING);
; 2419 :     s_syscGenContext.CONTROL_CORE_DPLL_SPREADING    = INREG32(&g_pSysCtrlGenReg->CONTROL_CORE_DPLL_SPREADING);
; 2420 :     s_syscGenContext.CONTROL_PER_DPLL_SPREADING     = INREG32(&g_pSysCtrlGenReg->CONTROL_PER_DPLL_SPREADING);
; 2421 :     s_syscGenContext.CONTROL_USBHOST_DPLL_SPREADING = INREG32(&g_pSysCtrlGenReg->CONTROL_USBHOST_DPLL_SPREADING);
; 2422 :     s_syscGenContext.CONTROL_PBIAS_LITE             = INREG32(&g_pSysCtrlGenReg->CONTROL_PBIAS_LITE);
; 2423 :     s_syscGenContext.CONTROL_TEMP_SENSOR            = INREG32(&g_pSysCtrlGenReg->CONTROL_TEMP_SENSOR);
; 2424 :     s_syscGenContext.CONTROL_SRAMLDO4               = INREG32(&g_pSysCtrlGenReg->CONTROL_SRAMLDO4);
; 2425 :     s_syscGenContext.CONTROL_SRAMLDO5               = INREG32(&g_pSysCtrlGenReg->CONTROL_SRAMLDO5);
; 2426 :     s_syscGenContext.CONTROL_CSI                    = INREG32(&g_pSysCtrlGenReg->CONTROL_CSI);
; 2427 : 
; 2428 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_SCM;

  00018	e59f1128	 ldr         r1, [pc, #0x128]
  0001c	e5933010	 ldr         r3, [r3, #0x10]
  00020	e5912000	 ldr         r2, [r1]
  00024	e58e333c	 str         r3, [lr, #0x33C]
  00028	e5903004	 ldr         r3, [r0, #4]
  0002c	e3c22002	 bic         r2, r2, #2
  00030	e58e3004	 str         r3, [lr, #4]
  00034	e5903008	 ldr         r3, [r0, #8]
  00038	e58e3008	 str         r3, [lr, #8]
  0003c	e590300c	 ldr         r3, [r0, #0xC]
  00040	e58e300c	 str         r3, [lr, #0xC]
  00044	e5903020	 ldr         r3, [r0, #0x20]
  00048	e58e3020	 str         r3, [lr, #0x20]
  0004c	e5903024	 ldr         r3, [r0, #0x24]
  00050	e58e3024	 str         r3, [lr, #0x24]
  00054	e5903028	 ldr         r3, [r0, #0x28]
  00058	e58e3028	 str         r3, [lr, #0x28]
  0005c	e590302c	 ldr         r3, [r0, #0x2C]
  00060	e58e302c	 str         r3, [lr, #0x2C]
  00064	e5903030	 ldr         r3, [r0, #0x30]
  00068	e58e3030	 str         r3, [lr, #0x30]
  0006c	e5903034	 ldr         r3, [r0, #0x34]
  00070	e58e3034	 str         r3, [lr, #0x34]
  00074	e5903040	 ldr         r3, [r0, #0x40]
  00078	e58e3040	 str         r3, [lr, #0x40]
  0007c	e5903068	 ldr         r3, [r0, #0x68]
  00080	e58e3068	 str         r3, [lr, #0x68]
  00084	e590306c	 ldr         r3, [r0, #0x6C]
  00088	e58e306c	 str         r3, [lr, #0x6C]
  0008c	e5903190	 ldr         r3, [r0, #0x190]
  00090	e58e3190	 str         r3, [lr, #0x190]
  00094	e5903194	 ldr         r3, [r0, #0x194]
  00098	e58e3194	 str         r3, [lr, #0x194]
  0009c	e59031b0	 ldr         r3, [r0, #0x1B0]
  000a0	e58e31b0	 str         r3, [lr, #0x1B0]
  000a4	e59031b4	 ldr         r3, [r0, #0x1B4]
  000a8	e58e31b4	 str         r3, [lr, #0x1B4]
  000ac	e59031b8	 ldr         r3, [r0, #0x1B8]
  000b0	e58e31b8	 str         r3, [lr, #0x1B8]
  000b4	e59031bc	 ldr         r3, [r0, #0x1BC]
  000b8	e58e31bc	 str         r3, [lr, #0x1BC]
  000bc	e59031c0	 ldr         r3, [r0, #0x1C0]
  000c0	e58e31c0	 str         r3, [lr, #0x1C0]
  000c4	e59031c4	 ldr         r3, [r0, #0x1C4]
  000c8	e58e31c4	 str         r3, [lr, #0x1C4]
  000cc	e59031c8	 ldr         r3, [r0, #0x1C8]
  000d0	e58e31c8	 str         r3, [lr, #0x1C8]
  000d4	e59031cc	 ldr         r3, [r0, #0x1CC]
  000d8	e58e31cc	 str         r3, [lr, #0x1CC]
  000dc	e59031d0	 ldr         r3, [r0, #0x1D0]
  000e0	e58e31d0	 str         r3, [lr, #0x1D0]
  000e4	e59031d4	 ldr         r3, [r0, #0x1D4]
  000e8	e58e31d4	 str         r3, [lr, #0x1D4]
  000ec	e59031d8	 ldr         r3, [r0, #0x1D8]
  000f0	e58e31d8	 str         r3, [lr, #0x1D8]
  000f4	e59031e0	 ldr         r3, [r0, #0x1E0]
  000f8	e58e31e0	 str         r3, [lr, #0x1E0]
  000fc	e59031e4	 ldr         r3, [r0, #0x1E4]
  00100	e58e31e4	 str         r3, [lr, #0x1E4]
  00104	e59031e8	 ldr         r3, [r0, #0x1E8]
  00108	e58e31e8	 str         r3, [lr, #0x1E8]
  0010c	e59031ec	 ldr         r3, [r0, #0x1EC]
  00110	e58e31ec	 str         r3, [lr, #0x1EC]
  00114	e59032b0	 ldr         r3, [r0, #0x2B0]
  00118	e58e32b0	 str         r3, [lr, #0x2B0]
  0011c	e59032b4	 ldr         r3, [r0, #0x2B4]
  00120	e58e32b4	 str         r3, [lr, #0x2B4]
  00124	e59032b8	 ldr         r3, [r0, #0x2B8]
  00128	e58e32b8	 str         r3, [lr, #0x2B8]
  0012c	e59032bc	 ldr         r3, [r0, #0x2BC]
  00130	e58e32bc	 str         r3, [lr, #0x2BC]
  00134	e59032c0	 ldr         r3, [r0, #0x2C0]
  00138	e5812000	 str         r2, [r1]
  0013c	e58e32c0	 str         r3, [lr, #0x2C0]

; 2429 : }

  00140	e49de004	 ldr         lr, [sp], #4
  00144	e12fff1e	 bx          lr
  00148		 |$LN6@OALContext@3|
  00148		 |$LN7@OALContext@3|
  00148	00000000	 DCD         |g_ffContextSaveMask|
  0014c		 |$LN8@OALContext@3|
  0014c	00000000	 DCD         |s_syscGenContext|
  00150		 |$LN9@OALContext@3|
  00150	00000000	 DCD         |g_pSysCtrlGenReg|
  00154		 |$LN10@OALContext@3|
  00154	00000000	 DCD         |s_pSyscIFContext|
  00158		 |$M50121|

			 ENDP  ; |OALContextSaveSCM|

	EXPORT	|OALContextSavePRCM|

  01360			 AREA	 |.bss|, NOINIT
|s_ocpSysCmContext| % 0x14
|s_ocpSysCmContext| % 0x14
|s_coreCmContext| % 0x50
|s_wkupCmContext| % 0x44
|s_globalCmContext| % 0xa0
|s_clkCtrlCmContext| % 0x74
|s_emuCmContext| % 0x58

  00000			 AREA	 |.pdata|, PDATA
|$T50135| DCD	|$LN5@OALContext@4|
	DCD	0x40003e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSavePRCM| PROC

; 2439 : {

  00000		 |$LN5@OALContext@4|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M50132|

; 2440 :     s_ocpSysCmContext.CM_SYSCONFIG  = INREG32(&g_PrcmCm.pOMAP_OCP_SYSTEM_CM->CM_SYSCONFIG);

  00004	e59f60e8	 ldr         r6, [pc, #0xE8]
  00008	e59fe0e0	 ldr         lr, [pc, #0xE0]

; 2441 : 
; 2442 :     s_coreCmContext.CM_AUTOIDLE1_CORE = INREG32(&g_PrcmCm.pOMAP_CORE_CM->CM_AUTOIDLE1_CORE);

  0000c	e59f10d8	 ldr         r1, [pc, #0xD8]
  00010	e5963030	 ldr         r3, [r6, #0x30]
  00014	e5962004	 ldr         r2, [r6, #4]

; 2443 :     s_coreCmContext.CM_AUTOIDLE2_CORE = INREG32(&g_PrcmCm.pOMAP_CORE_CM->CM_AUTOIDLE2_CORE);
; 2444 :     s_coreCmContext.CM_AUTOIDLE3_CORE = INREG32(&g_PrcmCm.pOMAP_CORE_CM->CM_AUTOIDLE3_CORE);
; 2445 : 
; 2446 :     s_wkupCmContext.CM_FCLKEN_WKUP    = INREG32(&g_PrcmCm.pOMAP_WKUP_CM->CM_FCLKEN_WKUP);

  00018	e5960000	 ldr         r0, [r6]
  0001c	e5933010	 ldr         r3, [r3, #0x10]

; 2447 :     s_wkupCmContext.CM_ICLKEN_WKUP    = INREG32(&g_PrcmCm.pOMAP_WKUP_CM->CM_ICLKEN_WKUP);
; 2448 :     s_wkupCmContext.CM_AUTOIDLE_WKUP  = INREG32(&g_PrcmCm.pOMAP_WKUP_CM->CM_AUTOIDLE_WKUP);
; 2449 : 
; 2450 :     s_clkCtrlCmContext.CM_CLKEN2_PLL = INREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_CLKEN2_PLL);

  00020	e5965034	 ldr         r5, [r6, #0x34]
  00024	e59f40bc	 ldr         r4, [pc, #0xBC]
  00028	e58e3010	 str         r3, [lr, #0x10]
  0002c	e5923030	 ldr         r3, [r2, #0x30]
  00030	e5813030	 str         r3, [r1, #0x30]
  00034	e5923034	 ldr         r3, [r2, #0x34]
  00038	e5813034	 str         r3, [r1, #0x34]
  0003c	e5923038	 ldr         r3, [r2, #0x38]

; 2451 :     s_clkCtrlCmContext.CM_CLKSEL4_PLL = INREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL4_PLL);
; 2452 :     s_clkCtrlCmContext.CM_CLKSEL5_PLL = INREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL5_PLL);
; 2453 :     s_clkCtrlCmContext.CM_AUTOIDLE2_PLL = INREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_AUTOIDLE2_PLL);
; 2454 : 
; 2455 :     s_globalCmContext.CM_POLCTRL = INREG32(&g_PrcmCm.pOMAP_GLOBAL_CM->CM_POLCTRL);

  00040	e59f209c	 ldr         r2, [pc, #0x9C]
  00044	e5813038	 str         r3, [r1, #0x38]
  00048	e5903000	 ldr         r3, [r0]
  0004c	e596102c	 ldr         r1, [r6, #0x2C]
  00050	e58e3014	 str         r3, [lr, #0x14]
  00054	e5903010	 ldr         r3, [r0, #0x10]
  00058	e58e3024	 str         r3, [lr, #0x24]
  0005c	e5903030	 ldr         r3, [r0, #0x30]

; 2456 : 
; 2457 :     s_clkCtrlCmContext.CM_CLKOUT_CTRL = INREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_CLKOUT_CTRL);
; 2458 :     s_clkCtrlCmContext.CM_AUTOIDLE_PLL = INREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_AUTOIDLE_PLL);
; 2459 : 
; 2460 :     s_emuCmContext.CM_CLKSEL1_EMU = INREG32(&g_PrcmCm.pOMAP_EMU_CM->CM_CLKSEL1_EMU);

  00060	e5960010	 ldr         r0, [r6, #0x10]
  00064	e58e3044	 str         r3, [lr, #0x44]
  00068	e5953004	 ldr         r3, [r5, #4]
  0006c	e59fe06c	 ldr         lr, [pc, #0x6C]
  00070	e5843004	 str         r3, [r4, #4]
  00074	e595304c	 ldr         r3, [r5, #0x4C]
  00078	e584304c	 str         r3, [r4, #0x4C]
  0007c	e5953050	 ldr         r3, [r5, #0x50]
  00080	e5843050	 str         r3, [r4, #0x50]
  00084	e5953034	 ldr         r3, [r5, #0x34]

; 2461 :     s_emuCmContext.CM_CLKSTCTRL_EMU = INREG32(&g_PrcmCm.pOMAP_EMU_CM->CM_CLKSTCTRL_EMU);

  00088	e5843034	 str         r3, [r4, #0x34]
  0008c	e591309c	 ldr         r3, [r1, #0x9C]

; 2462 :     s_emuCmContext.CM_CLKSEL2_EMU = INREG32(&g_PrcmCm.pOMAP_EMU_CM->CM_CLKSEL2_EMU);
; 2463 :     s_emuCmContext.CM_CLKSEL3_EMU = INREG32(&g_PrcmCm.pOMAP_EMU_CM->CM_CLKSEL3_EMU);
; 2464 : 
; 2465 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_PRCM;

  00090	e59f1044	 ldr         r1, [pc, #0x44]
  00094	e582309c	 str         r3, [r2, #0x9C]
  00098	e5953070	 ldr         r3, [r5, #0x70]
  0009c	e5912000	 ldr         r2, [r1]
  000a0	e5843070	 str         r3, [r4, #0x70]
  000a4	e5953030	 ldr         r3, [r5, #0x30]
  000a8	e3c22040	 bic         r2, r2, #0x40
  000ac	e5843030	 str         r3, [r4, #0x30]
  000b0	e5903040	 ldr         r3, [r0, #0x40]
  000b4	e58e3040	 str         r3, [lr, #0x40]
  000b8	e5903048	 ldr         r3, [r0, #0x48]
  000bc	e58e3048	 str         r3, [lr, #0x48]
  000c0	e5903050	 ldr         r3, [r0, #0x50]
  000c4	e58e3050	 str         r3, [lr, #0x50]
  000c8	e5903054	 ldr         r3, [r0, #0x54]
  000cc	e5812000	 str         r2, [r1]
  000d0	e58e3054	 str         r3, [lr, #0x54]

; 2466 : }

  000d4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN6@OALContext@4|
  000dc		 |$LN7@OALContext@4|
  000dc	00000000	 DCD         |g_ffContextSaveMask|
  000e0		 |$LN8@OALContext@4|
  000e0	00000000	 DCD         |s_emuCmContext|
  000e4		 |$LN9@OALContext@4|
  000e4	00000000	 DCD         |s_globalCmContext|
  000e8		 |$LN10@OALContext@4|
  000e8	00000000	 DCD         |s_clkCtrlCmContext|
  000ec		 |$LN11@OALContext@4|
  000ec	00000000	 DCD         |s_coreCmContext|
  000f0		 |$LN12@OALContext@4|
  000f0	00000000	 DCD         |s_ocpSysCmContext|
  000f4		 |$LN13@OALContext@4|
  000f4	00000000	 DCD         |g_PrcmCm|
  000f8		 |$M50133|

			 ENDP  ; |OALContextSavePRCM|

	EXPORT	|OALContextSaveINTC|
	IMPORT	|g_pIntr|

  01588			 AREA	 |.bss|, NOINIT
|s_intcContext| % 0x280
|s_intcContext| % 0x280

  00000			 AREA	 |.pdata|, PDATA
|$T50152| DCD	|$LN10@OALContext@5|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSaveINTC| PROC

; 2476 : {

  00000		 |$LN10@OALContext@5|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50149|

; 2477 :     UINT32 i;
; 2478 : 
; 2479 :     s_intcContext.INTC_SYSCONFIG = INREG32(&g_pIntr->pICLRegs->INTC_SYSCONFIG);

  00004	e59f307c	 ldr         r3, [pc, #0x7C]
  00008	e59fe074	 ldr         lr, [pc, #0x74]
  0000c	e3a02060	 mov         r2, #0x60
  00010	e5933000	 ldr         r3, [r3]
  00014	e28e1c01	 add         r1, lr, #1, 24
  00018	e5934000	 ldr         r4, [r3]
  0001c	e5943010	 ldr         r3, [r4, #0x10]

; 2480 :     s_intcContext.INTC_PROTECTION = INREG32(&g_pIntr->pICLRegs->INTC_PROTECTION);
; 2481 :     s_intcContext.INTC_IDLE = INREG32(&g_pIntr->pICLRegs->INTC_IDLE);
; 2482 :     s_intcContext.INTC_THRESHOLD = INREG32(&g_pIntr->pICLRegs->INTC_THRESHOLD);

  00020	e2840c01	 add         r0, r4, #1, 24
  00024	e58e3010	 str         r3, [lr, #0x10]
  00028	e594304c	 ldr         r3, [r4, #0x4C]
  0002c	e58e304c	 str         r3, [lr, #0x4C]
  00030	e5943050	 ldr         r3, [r4, #0x50]
  00034	e58e3050	 str         r3, [lr, #0x50]
  00038	e5943068	 ldr         r3, [r4, #0x68]
  0003c	e58e3068	 str         r3, [lr, #0x68]
  00040		 |$LL3@OALContext@5|

; 2483 : 
; 2484 :     for (i = 0; i < dimof(g_pIntr->pICLRegs->INTC_ILR); i++)
; 2485 :         s_intcContext.INTC_ILR[i] = INREG32(&g_pIntr->pICLRegs->INTC_ILR[i]);

  00040	e4903004	 ldr         r3, [r0], #4
  00044	e2522001	 subs        r2, r2, #1
  00048	e4813004	 str         r3, [r1], #4
  0004c	1afffffb	 bne         |$LL3@OALContext@5|

; 2486 : 
; 2487 :     s_intcContext.INTC_MIR0 = INREG32(&g_pIntr->pICLRegs->INTC_MIR0);

  00050	e5943084	 ldr         r3, [r4, #0x84]

; 2488 :     s_intcContext.INTC_MIR1 = INREG32(&g_pIntr->pICLRegs->INTC_MIR1);
; 2489 :     s_intcContext.INTC_MIR2 = INREG32(&g_pIntr->pICLRegs->INTC_MIR2);
; 2490 : 
; 2491 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_INTC;

  00054	e59f0024	 ldr         r0, [pc, #0x24]
  00058	e58e3084	 str         r3, [lr, #0x84]
  0005c	e59430a4	 ldr         r3, [r4, #0xA4]
  00060	e5901000	 ldr         r1, [r0]
  00064	e58e30a4	 str         r3, [lr, #0xA4]
  00068	e59420c4	 ldr         r2, [r4, #0xC4]
  0006c	e3c13020	 bic         r3, r1, #0x20
  00070	e5803000	 str         r3, [r0]
  00074	e58e20c4	 str         r2, [lr, #0xC4]

; 2492 : }

  00078	e8bd4010	 ldmia       sp!, {r4, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN11@OALContext@5|
  00080		 |$LN12@OALContext@5|
  00080	00000000	 DCD         |g_ffContextSaveMask|
  00084		 |$LN13@OALContext@5|
  00084	00000000	 DCD         |s_intcContext|
  00088		 |$LN14@OALContext@5|
  00088	00000000	 DCD         |g_pIntr|
  0008c		 |$M50150|

			 ENDP  ; |OALContextSaveINTC|

	EXPORT	|OALContextSaveDMA|

  01a88			 AREA	 |.bss|, NOINIT
|s_dmaController| % 0xc80
|s_dmaController| % 0xc80

  00000			 AREA	 |.pdata|, PDATA
|$T50163| DCD	|$LN5@OALContext@6|
	DCD	0x40001300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSaveDMA| PROC

; 2502 : {

  00000		 |$LN5@OALContext@6|
  00000		 |$M50160|

; 2503 :     s_dmaController.DMA4_GCR           = INREG32(&s_pDmaController->DMA4_GCR);

  00000	e59f0040	 ldr         r0, [pc, #0x40]

; 2504 :     s_dmaController.DMA4_OCP_SYSCONFIG = INREG32(&s_pDmaController->DMA4_OCP_SYSCONFIG);
; 2505 :     s_dmaController.DMA4_IRQENABLE_L0  = INREG32(&s_pDmaController->DMA4_IRQENABLE_L0);
; 2506 :     s_dmaController.DMA4_IRQENABLE_L1  = INREG32(&s_pDmaController->DMA4_IRQENABLE_L1);
; 2507 :     s_dmaController.DMA4_IRQENABLE_L2  = INREG32(&s_pDmaController->DMA4_IRQENABLE_L2);
; 2508 :     s_dmaController.DMA4_IRQENABLE_L3  = INREG32(&s_pDmaController->DMA4_IRQENABLE_L3);
; 2509 : 
; 2510 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_DMA;

  00004	e5901d7c	 ldr         r1, [r0, #0xD7C]
  00008	e5902d6c	 ldr         r2, [r0, #0xD6C]
  0000c	e5913078	 ldr         r3, [r1, #0x78]
  00010	e3c22004	 bic         r2, r2, #4
  00014	e5803078	 str         r3, [r0, #0x78]
  00018	e591302c	 ldr         r3, [r1, #0x2C]
  0001c	e580302c	 str         r3, [r0, #0x2C]
  00020	e5913018	 ldr         r3, [r1, #0x18]
  00024	e5803018	 str         r3, [r0, #0x18]
  00028	e591301c	 ldr         r3, [r1, #0x1C]
  0002c	e580301c	 str         r3, [r0, #0x1C]
  00030	e5913020	 ldr         r3, [r1, #0x20]
  00034	e5803020	 str         r3, [r0, #0x20]
  00038	e5913024	 ldr         r3, [r1, #0x24]
  0003c	e5802d6c	 str         r2, [r0, #0xD6C]
  00040	e5803024	 str         r3, [r0, #0x24]

; 2511 : }

  00044	e12fff1e	 bx          lr
  00048		 |$LN6@OALContext@6|
  00048		 |$LN7@OALContext@6|
  00048	00000000	 DCD         |s_dmaController|
  0004c		 |$M50161|

			 ENDP  ; |OALContextSaveDMA|

	EXPORT	|OALContextSaveSMS|

  03388			 AREA	 |.bss|, NOINIT
|s_smsContext| % 0x164
|s_smsContext| % 0x164

  00000			 AREA	 |.pdata|, PDATA
|$T50172| DCD	|$LN5@OALContext@7|
	DCD	0x40000d00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSaveSMS| PROC

; 2521 : {

  00000		 |$LN5@OALContext@7|
  00000		 |$M50169|

; 2522 :     s_smsContext.SMS_SYSCONFIG         = INREG32(&g_pSMSRegs->SMS_SYSCONFIG);

  00000	e59f3028	 ldr         r3, [pc, #0x28]

; 2523 : 
; 2524 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_SMS;

  00004	e59f1020	 ldr         r1, [pc, #0x20]
  00008	e59f0018	 ldr         r0, [pc, #0x18]
  0000c	e5932000	 ldr         r2, [r3]
  00010	e5913000	 ldr         r3, [r1]
  00014	e5922010	 ldr         r2, [r2, #0x10]
  00018	e3c33c02	 bic         r3, r3, #2, 24
  0001c	e5813000	 str         r3, [r1]
  00020	e5802010	 str         r2, [r0, #0x10]

; 2525 : }

  00024	e12fff1e	 bx          lr
  00028		 |$LN6@OALContext@7|
  00028		 |$LN7@OALContext@7|
  00028	00000000	 DCD         |s_smsContext|
  0002c		 |$LN8@OALContext@7|
  0002c	00000000	 DCD         |g_ffContextSaveMask|
  00030		 |$LN9@OALContext@7|
  00030	00000000	 DCD         |g_pSMSRegs|
  00034		 |$M50170|

			 ENDP  ; |OALContextSaveSMS|

	EXPORT	|OALContextSaveVRFB|

  03650			 AREA	 |.bss|, NOINIT
|s_vrfbContext| % 0xdc
|s_vrfbContext| % 0xdc

  00000			 AREA	 |.pdata|, PDATA
|$T50185| DCD	|$LN10@OALContext@8|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSaveVRFB| PROC

; 2535 : {

  00000		 |$LN10@OALContext@8|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M50182|

; 2536 :     int i;
; 2537 : 
; 2538 :     for (i = 0; i < VRFB_ROTATION_CONTEXTS; ++i)

  00004	e59f1058	 ldr         r1, [pc, #0x58]
  00008	e3a0e00c	 mov         lr, #0xC
  0000c	e5912ea4	 ldr         r2, [r1, #0xEA4]
  00010	e2813004	 add         r3, r1, #4
  00014	e281401c	 add         r4, r1, #0x1C
  00018	e2820020	 add         r0, r2, #0x20
  0001c	e0415002	 sub         r5, r1, r2
  00020	e0436002	 sub         r6, r3, r2
  00024		 |$LL3@OALContext@8|

; 2539 :         {
; 2540 :         s_vrfbContext.aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_CONTROL =
; 2541 :             INREG32(&g_pVRFBRegs->aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_CONTROL);

  00024	e2403004	 sub         r3, r0, #4
  00028	e5933000	 ldr         r3, [r3]

; 2542 : 
; 2543 :         s_vrfbContext.aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_SIZE =
; 2544 :             INREG32(&g_pVRFBRegs->aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_SIZE);
; 2545 : 
; 2546 :         s_vrfbContext.aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_PHYSICAL_BA =
; 2547 :             INREG32(&g_pVRFBRegs->aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_PHYSICAL_BA);

  0002c	e0862000	 add         r2, r6, r0
  00030	e25ee001	 subs        lr, lr, #1
  00034	e4843010	 str         r3, [r4], #0x10
  00038	e5903000	 ldr         r3, [r0]
  0003c	e7853000	 str         r3, [r5, +r0]
  00040	e5903004	 ldr         r3, [r0, #4]
  00044	e2800010	 add         r0, r0, #0x10
  00048	e5823000	 str         r3, [r2]
  0004c	1afffff4	 bne         |$LL3@OALContext@8|

; 2548 :         }
; 2549 : 
; 2550 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_VRFB;

  00050	e5913eb4	 ldr         r3, [r1, #0xEB4]
  00054	e3c33080	 bic         r3, r3, #0x80
  00058	e5813eb4	 str         r3, [r1, #0xEB4]

; 2551 : }

  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN11@OALContext@8|
  00064		 |$LN12@OALContext@8|
  00064	00000000	 DCD         |s_vrfbContext|
  00068		 |$M50183|

			 ENDP  ; |OALContextSaveVRFB|

	EXPORT	|OALContextSavePerfTimer|
	IMPORT	|g_pPerfTimer|

  03808			 AREA	 |.bss|, NOINIT
|s_perfTimerContext| % 0x5c
|s_perfTimerContext| % 0x5c

  00000			 AREA	 |.pdata|, PDATA
|$T50194| DCD	|$LN5@OALContext@9|
	DCD	0x40002e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSavePerfTimer| PROC

; 2562 : {	

  00000		 |$LN5@OALContext@9|
  00000		 |$M50191|

; 2563 : 	s_perfTimerContext.TIDR = INREG32(&g_pPerfTimer->TIDR);                // 0000

  00000	e59f30ac	 ldr         r3, [pc, #0xAC]
  00004	e59f10a4	 ldr         r1, [pc, #0xA4]
  00008	e5932000	 ldr         r2, [r3]
  0000c	e5923000	 ldr         r3, [r2]

; 2564 : 	s_perfTimerContext.TIOCP = INREG32(&g_pPerfTimer->TIOCP);               // 0010
; 2565 : 	s_perfTimerContext.TISTAT = INREG32(&g_pPerfTimer->TISTAT);              // 0014
; 2566 : 	s_perfTimerContext.TISR = INREG32(&g_pPerfTimer->TISR);                // 0018

  00010	e5813000	 str         r3, [r1]
  00014	e5923010	 ldr         r3, [r2, #0x10]

; 2567 : 	s_perfTimerContext.TIER = INREG32(&g_pPerfTimer->TIER);                // 001C
; 2568 : 	s_perfTimerContext.TWER = INREG32(&g_pPerfTimer->TWER);                // 0020

  00018	e5813010	 str         r3, [r1, #0x10]
  0001c	e5923014	 ldr         r3, [r2, #0x14]

; 2569 : 	s_perfTimerContext.TCLR = INREG32(&g_pPerfTimer->TCLR);                // 0024
; 2570 : 	s_perfTimerContext.TCRR = INREG32(&g_pPerfTimer->TCRR);                // 0028

  00020	e5813014	 str         r3, [r1, #0x14]
  00024	e5923018	 ldr         r3, [r2, #0x18]

; 2571 : 	s_perfTimerContext.TLDR = INREG32(&g_pPerfTimer->TLDR);                // 002C
; 2572 : 	s_perfTimerContext.TTGR = INREG32(&g_pPerfTimer->TTGR);                // 0030

  00028	e5813018	 str         r3, [r1, #0x18]
  0002c	e592301c	 ldr         r3, [r2, #0x1C]

; 2573 : 	s_perfTimerContext.TWPS = INREG32(&g_pPerfTimer->TWPS);                // 0034
; 2574 : 	s_perfTimerContext.TMAR = INREG32(&g_pPerfTimer->TMAR);                // 0038

  00030	e581301c	 str         r3, [r1, #0x1C]
  00034	e5923020	 ldr         r3, [r2, #0x20]

; 2575 : 	s_perfTimerContext.TCAR1 = INREG32(&g_pPerfTimer->TCAR1);               // 003C
; 2576 : 	s_perfTimerContext.TSICR = INREG32(&g_pPerfTimer->TSICR);               // 0040

  00038	e5813020	 str         r3, [r1, #0x20]
  0003c	e5923024	 ldr         r3, [r2, #0x24]

; 2577 : 	s_perfTimerContext.TCAR2 = INREG32(&g_pPerfTimer->TCAR2);               // 0044
; 2578 : 	s_perfTimerContext.TPIR = INREG32(&g_pPerfTimer->TPIR);                // 0x48

  00040	e5813024	 str         r3, [r1, #0x24]
  00044	e5923028	 ldr         r3, [r2, #0x28]

; 2579 : 	s_perfTimerContext.TNIR = INREG32(&g_pPerfTimer->TNIR);                // 0x4C
; 2580 : 	s_perfTimerContext.TCVR = INREG32(&g_pPerfTimer->TCVR);                // 0x50

  00048	e5813028	 str         r3, [r1, #0x28]
  0004c	e592302c	 ldr         r3, [r2, #0x2C]

; 2581 : 	s_perfTimerContext.TOCR = INREG32(&g_pPerfTimer->TOCR);                // 0x54
; 2582 : 	s_perfTimerContext.TOWR = INREG32(&g_pPerfTimer->TOWR);                // 0x58

  00050	e581302c	 str         r3, [r1, #0x2C]
  00054	e5923030	 ldr         r3, [r2, #0x30]
  00058	e5813030	 str         r3, [r1, #0x30]
  0005c	e5923034	 ldr         r3, [r2, #0x34]
  00060	e5813034	 str         r3, [r1, #0x34]
  00064	e5923038	 ldr         r3, [r2, #0x38]
  00068	e5813038	 str         r3, [r1, #0x38]
  0006c	e592303c	 ldr         r3, [r2, #0x3C]
  00070	e581303c	 str         r3, [r1, #0x3C]
  00074	e5923040	 ldr         r3, [r2, #0x40]
  00078	e5813040	 str         r3, [r1, #0x40]
  0007c	e5923044	 ldr         r3, [r2, #0x44]
  00080	e5813044	 str         r3, [r1, #0x44]
  00084	e5923048	 ldr         r3, [r2, #0x48]
  00088	e5813048	 str         r3, [r1, #0x48]
  0008c	e592304c	 ldr         r3, [r2, #0x4C]
  00090	e581304c	 str         r3, [r1, #0x4C]
  00094	e5923050	 ldr         r3, [r2, #0x50]
  00098	e5813050	 str         r3, [r1, #0x50]
  0009c	e5923054	 ldr         r3, [r2, #0x54]
  000a0	e5813054	 str         r3, [r1, #0x54]
  000a4	e5923058	 ldr         r3, [r2, #0x58]
  000a8	e5813058	 str         r3, [r1, #0x58]

; 2583 : }

  000ac	e12fff1e	 bx          lr
  000b0		 |$LN6@OALContext@9|
  000b0		 |$LN7@OALContext@9|
  000b0	00000000	 DCD         |s_perfTimerContext|
  000b4		 |$LN8@OALContext@9|
  000b4	00000000	 DCD         |g_pPerfTimer|
  000b8		 |$M50192|

			 ENDP  ; |OALContextSavePerfTimer|

	EXPORT	|OALContextSaveMux|

  00000			 AREA	 |.pdata|, PDATA
|$T50205| DCD	|$LN8@OALContext@10|
	DCD	0x40000f00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSaveMux| PROC

; 2593 : {

  00000		 |$LN8@OALContext@10|
  00000		 |$M50202|

; 2594 :     // Save all the PADCONF so the values are retained on wakeup from CORE OFF
; 2595 :     SETREG32(&g_pSysCtrlGenReg->CONTROL_PADCONF_OFF, STARTSAVE);

  00000	e59f3030	 ldr         r3, [pc, #0x30]
  00004	e5932000	 ldr         r2, [r3]
  00008	e5923000	 ldr         r3, [r2]
  0000c	e3833002	 orr         r3, r3, #2
  00010	e4823084	 str         r3, [r2], #0x84
  00014		 |$LL2@OALContext@10|

; 2596 :     while ((INREG32(&g_pSysCtrlGenReg->CONTROL_GENERAL_PURPOSE_STATUS) & SAVEDONE) == 0);

  00014	e5923000	 ldr         r3, [r2]
  00018	e3130001	 tst         r3, #1
  0001c	0afffffc	 beq         |$LL2@OALContext@10|

; 2597 : 
; 2598 :     g_ffContextSaveMask &= ~HAL_CONTEXTSAVE_PINMUX;

  00020	e59f200c	 ldr         r2, [pc, #0xC]
  00024	e5923000	 ldr         r3, [r2]
  00028	e3c33c01	 bic         r3, r3, #1, 24
  0002c	e5823000	 str         r3, [r2]

; 2599 : }

  00030	e12fff1e	 bx          lr
  00034		 |$LN9@OALContext@10|
  00034		 |$LN10@OALContext@10|
  00034	00000000	 DCD         |g_ffContextSaveMask|
  00038		 |$LN11@OALContext@10|
  00038	00000000	 DCD         |g_pSysCtrlGenReg|
  0003c		 |$M50203|

			 ENDP  ; |OALContextSaveMux|

	EXPORT	|OALContextRestoreGPIO|

  00000			 AREA	 |.pdata|, PDATA
|$T50217| DCD	|$LN10@OALContext@11|
	DCD	0x40003401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestoreGPIO| PROC

; 2609 : {

  00000		 |$LN10@OALContext@11|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50214|

; 2610 :     UINT32 i;
; 2611 : 
; 2612 :     for(i=0; i< OMAP_GPIO_BANK_TO_RESTORE; i++)

  00004	e59f30c0	 ldr         r3, [pc, #0xC0]
  00008	e59fe0b8	 ldr         lr, [pc, #0xB8]
  0000c	e3a04006	 mov         r4, #6
  00010	e2830010	 add         r0, r3, #0x10
  00014		 |$LL3@OALContext@11|

; 2613 :         {
; 2614 :         OUTREG32(&s_rgGpioRegsAddr[i]->SYSCONFIG, s_rgGpioContext[i].SYSCONFIG );

  00014	e59e2000	 ldr         r2, [lr]
  00018	e5903000	 ldr         r3, [r0]

; 2615 :         OUTREG32(&s_rgGpioRegsAddr[i]->CTRL, s_rgGpioContext[i].CTRL);
; 2616 :         OUTREG32(&s_rgGpioRegsAddr[i]->DATAOUT, s_rgGpioContext[i].DATAOUT);
; 2617 :         OUTREG32(&s_rgGpioRegsAddr[i]->OE, s_rgGpioContext[i].OE);
; 2618 :         OUTREG32(&s_rgGpioRegsAddr[i]->LEVELDETECT0, s_rgGpioContext[i].LEVELDETECT0);
; 2619 :         OUTREG32(&s_rgGpioRegsAddr[i]->LEVELDETECT1, s_rgGpioContext[i].LEVELDETECT1);
; 2620 :         OUTREG32(&s_rgGpioRegsAddr[i]->RISINGDETECT, s_rgGpioContext[i].RISINGDETECT);
; 2621 :         OUTREG32(&s_rgGpioRegsAddr[i]->FALLINGDETECT, s_rgGpioContext[i].FALLINGDETECT);
; 2622 : 
; 2623 :         // Note : Context restore of debouncing register is removed since no modules are 
; 2624 :         // using h/w debouncing. If debounce registers are restored, gpio fclk should be 
; 2625 :         // enabled and enough delay should be provided before disabling the gpio fclk
; 2626 :         // so that debouncing logic sync in h/w and Per domain acks idle request.
; 2627 : 
; 2628 :         OUTREG32(&s_rgGpioRegsAddr[i]->DEBOUNCENABLE, s_rgGpioContext[i].DEBOUNCENABLE);
; 2629 :         OUTREG32(&s_rgGpioRegsAddr[i]->DEBOUNCINGTIME, s_rgGpioContext[i].DEBOUNCINGTIME);
; 2630 : 
; 2631 :         OUTREG32(&s_rgGpioRegsAddr[i]->IRQENABLE1, s_rgGpioContext[i].IRQENABLE1);
; 2632 :         OUTREG32(&s_rgGpioRegsAddr[i]->WAKEUPENABLE, s_rgGpioContext[i].WAKEUPENABLE);
; 2633 :         OUTREG32(&s_rgGpioRegsAddr[i]->IRQENABLE2, s_rgGpioContext[i].IRQENABLE2);

  0001c	e280101c	 add         r1, r0, #0x1C
  00020	e2544001	 subs        r4, r4, #1
  00024	e5823010	 str         r3, [r2, #0x10]
  00028	e59e2000	 ldr         r2, [lr]
  0002c	e5903020	 ldr         r3, [r0, #0x20]
  00030	e5823030	 str         r3, [r2, #0x30]
  00034	e59e2000	 ldr         r2, [lr]
  00038	e590302c	 ldr         r3, [r0, #0x2C]
  0003c	e582303c	 str         r3, [r2, #0x3C]
  00040	e59e2000	 ldr         r2, [lr]
  00044	e5903024	 ldr         r3, [r0, #0x24]
  00048	e5823034	 str         r3, [r2, #0x34]
  0004c	e59e2000	 ldr         r2, [lr]
  00050	e5903030	 ldr         r3, [r0, #0x30]
  00054	e5823040	 str         r3, [r2, #0x40]
  00058	e59e2000	 ldr         r2, [lr]
  0005c	e5903034	 ldr         r3, [r0, #0x34]
  00060	e5823044	 str         r3, [r2, #0x44]
  00064	e59e2000	 ldr         r2, [lr]
  00068	e5903038	 ldr         r3, [r0, #0x38]
  0006c	e5823048	 str         r3, [r2, #0x48]
  00070	e59e2000	 ldr         r2, [lr]
  00074	e590303c	 ldr         r3, [r0, #0x3C]
  00078	e582304c	 str         r3, [r2, #0x4C]
  0007c	e59e2000	 ldr         r2, [lr]
  00080	e5903040	 ldr         r3, [r0, #0x40]
  00084	e5823050	 str         r3, [r2, #0x50]
  00088	e59e2000	 ldr         r2, [lr]
  0008c	e5903044	 ldr         r3, [r0, #0x44]
  00090	e5823054	 str         r3, [r2, #0x54]
  00094	e59e2000	 ldr         r2, [lr]
  00098	e590300c	 ldr         r3, [r0, #0xC]
  0009c	e582301c	 str         r3, [r2, #0x1C]
  000a0	e59e2000	 ldr         r2, [lr]
  000a4	e5903010	 ldr         r3, [r0, #0x10]
  000a8	e28000a0	 add         r0, r0, #0xA0
  000ac	e5823020	 str         r3, [r2, #0x20]
  000b0	e49e2004	 ldr         r2, [lr], #4
  000b4	e5913000	 ldr         r3, [r1]
  000b8	e582302c	 str         r3, [r2, #0x2C]
  000bc	1affffd4	 bne         |$LL3@OALContext@11|

; 2634 :         }
; 2635 : }

  000c0	e8bd4010	 ldmia       sp!, {r4, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$LN11@OALContext@11|
  000c8		 |$LN12@OALContext@11|
  000c8	00000000	 DCD         |s_rgGpioRegsAddr|
  000cc		 |$LN13@OALContext@11|
  000cc	00000000	 DCD         |s_rgGpioContext|
  000d0		 |$M50215|

			 ENDP  ; |OALContextRestoreGPIO|

	EXPORT	|OALContextRestoreINTC|

  00000			 AREA	 |.pdata|, PDATA
|$T50229| DCD	|$LN10@OALContext@12|
	DCD	0x40003001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestoreINTC| PROC

; 2645 : {

  00000		 |$LN10@OALContext@12|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50226|

; 2646 :     UINT32 i;
; 2647 : 
; 2648 :     OUTREG32(&g_pIntr->pICLRegs->INTC_SYSCONFIG, s_intcContext.INTC_SYSCONFIG);

  00004	e59f00b0	 ldr         r0, [pc, #0xB0]
  00008	e59fe0a8	 ldr         lr, [pc, #0xA8]

; 2649 :     OUTREG32(&g_pIntr->pICLRegs->INTC_PROTECTION, s_intcContext.INTC_PROTECTION);
; 2650 :     OUTREG32(&g_pIntr->pICLRegs->INTC_IDLE, s_intcContext.INTC_IDLE);
; 2651 :     OUTREG32(&g_pIntr->pICLRegs->INTC_THRESHOLD, s_intcContext.INTC_THRESHOLD);
; 2652 : 
; 2653 :     for (i = 0; i < dimof(g_pIntr->pICLRegs->INTC_ILR); i++)

  0000c	e3a01000	 mov         r1, #0
  00010	e5903000	 ldr         r3, [r0]
  00014	e59e2010	 ldr         r2, [lr, #0x10]
  00018	e28e4c01	 add         r4, lr, #1, 24
  0001c	e5933000	 ldr         r3, [r3]
  00020	e5832010	 str         r2, [r3, #0x10]
  00024	e5903000	 ldr         r3, [r0]
  00028	e59e204c	 ldr         r2, [lr, #0x4C]
  0002c	e5933000	 ldr         r3, [r3]
  00030	e583204c	 str         r2, [r3, #0x4C]
  00034	e5903000	 ldr         r3, [r0]
  00038	e59e2050	 ldr         r2, [lr, #0x50]
  0003c	e5933000	 ldr         r3, [r3]
  00040	e5832050	 str         r2, [r3, #0x50]
  00044	e5903000	 ldr         r3, [r0]
  00048	e59e2068	 ldr         r2, [lr, #0x68]
  0004c	e5933000	 ldr         r3, [r3]
  00050	e5832068	 str         r2, [r3, #0x68]
  00054		 |$LL3@OALContext@12|
  00054	e5903000	 ldr         r3, [r0]

; 2654 :         OUTREG32(&g_pIntr->pICLRegs->INTC_ILR[i], s_intcContext.INTC_ILR[i]);

  00058	e7912004	 ldr         r2, [r1, +r4]
  0005c	e5933000	 ldr         r3, [r3]
  00060	e0813003	 add         r3, r1, r3
  00064	e2811004	 add         r1, r1, #4
  00068	e3510d06	 cmp         r1, #6, 26
  0006c	e5832100	 str         r2, [r3, #0x100]
  00070	3afffff7	 bcc         |$LL3@OALContext@12|

; 2655 : 
; 2656 :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR0, ~s_intcContext.INTC_MIR0);

  00074	e5902000	 ldr         r2, [r0]
  00078	e59e3084	 ldr         r3, [lr, #0x84]
  0007c	e5922000	 ldr         r2, [r2]
  00080	e1e03003	 mvn         r3, r3
  00084	e5823088	 str         r3, [r2, #0x88]

; 2657 :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR1, ~s_intcContext.INTC_MIR1);

  00088	e5902000	 ldr         r2, [r0]
  0008c	e59e30a4	 ldr         r3, [lr, #0xA4]
  00090	e5922000	 ldr         r2, [r2]
  00094	e1e03003	 mvn         r3, r3
  00098	e58230a8	 str         r3, [r2, #0xA8]

; 2658 :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR2, ~s_intcContext.INTC_MIR2);

  0009c	e5902000	 ldr         r2, [r0]
  000a0	e59e30c4	 ldr         r3, [lr, #0xC4]
  000a4	e5922000	 ldr         r2, [r2]
  000a8	e1e03003	 mvn         r3, r3
  000ac	e58230c8	 str         r3, [r2, #0xC8]

; 2659 : }

  000b0	e8bd4010	 ldmia       sp!, {r4, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN11@OALContext@12|
  000b8		 |$LN12@OALContext@12|
  000b8	00000000	 DCD         |s_intcContext|
  000bc		 |$LN13@OALContext@12|
  000bc	00000000	 DCD         |g_pIntr|
  000c0		 |$M50227|

			 ENDP  ; |OALContextRestoreINTC|

	EXPORT	|OALContextRestorePRCM|
	IMPORT	|PrcmDomainSetClockState|
	IMPORT	|PrcmContextRestore|

  00000			 AREA	 |.pdata|, PDATA
|$T50239| DCD	|$LN5@OALContext@13|
	DCD	0x40005201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestorePRCM| PROC

; 2669 : {

  00000		 |$LN5@OALContext@13|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M50236|

; 2670 :     PrcmContextRestore();

  00004	eb000000	 bl          PrcmContextRestore

; 2671 :     
; 2672 :     OUTREG32(&g_PrcmCm.pOMAP_OCP_SYSTEM_CM->CM_SYSCONFIG, s_ocpSysCmContext.CM_SYSCONFIG);

  00008	e59fe134	 ldr         lr, [pc, #0x134]
  0000c	e59f612c	 ldr         r6, [pc, #0x12C]

; 2673 : 
; 2674 :     OUTREG32(&g_PrcmCm.pOMAP_CORE_CM->CM_AUTOIDLE1_CORE, s_coreCmContext.CM_AUTOIDLE1_CORE);

  00010	e59f1124	 ldr         r1, [pc, #0x124]
  00014	e59e3010	 ldr         r3, [lr, #0x10]
  00018	e5962030	 ldr         r2, [r6, #0x30]

; 2675 :     OUTREG32(&g_PrcmCm.pOMAP_CORE_CM->CM_AUTOIDLE2_CORE, s_coreCmContext.CM_AUTOIDLE2_CORE);
; 2676 :     OUTREG32(&g_PrcmCm.pOMAP_CORE_CM->CM_AUTOIDLE3_CORE, s_coreCmContext.CM_AUTOIDLE3_CORE);
; 2677 : 
; 2678 :     OUTREG32(&g_PrcmCm.pOMAP_WKUP_CM->CM_FCLKEN_WKUP, s_wkupCmContext.CM_FCLKEN_WKUP);
; 2679 :     OUTREG32(&g_PrcmCm.pOMAP_WKUP_CM->CM_ICLKEN_WKUP, s_wkupCmContext.CM_ICLKEN_WKUP);
; 2680 :     OUTREG32(&g_PrcmCm.pOMAP_WKUP_CM->CM_AUTOIDLE_WKUP, s_wkupCmContext.CM_AUTOIDLE_WKUP);
; 2681 : 
; 2682 :     OUTREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_AUTOIDLE2_PLL, DPLL_AUTOIDLE_DISABLED);
; 2683 :     OUTREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL4_PLL, s_clkCtrlCmContext.CM_CLKSEL4_PLL);

  0001c	e59f4114	 ldr         r4, [pc, #0x114]
  00020	e3a07000	 mov         r7, #0
  00024	e5823010	 str         r3, [r2, #0x10]
  00028	e5913030	 ldr         r3, [r1, #0x30]
  0002c	e5962004	 ldr         r2, [r6, #4]

; 2684 :     OUTREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL5_PLL, s_clkCtrlCmContext.CM_CLKSEL5_PLL);
; 2685 :     OUTREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_CLKEN2_PLL, s_clkCtrlCmContext.CM_CLKEN2_PLL);
; 2686 :     OUTREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_AUTOIDLE2_PLL, s_clkCtrlCmContext.CM_AUTOIDLE2_PLL);
; 2687 : 
; 2688 :     OUTREG32(&g_PrcmCm.pOMAP_GLOBAL_CM->CM_POLCTRL, s_globalCmContext.CM_POLCTRL);

  00030	e59f00fc	 ldr         r0, [pc, #0xFC]

; 2689 : 
; 2690 :     OUTREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_CLKOUT_CTRL, s_clkCtrlCmContext.CM_CLKOUT_CTRL);
; 2691 : 
; 2692 :     // Restore EMU CM Registers
; 2693 :     OUTREG32(&g_PrcmCm.pOMAP_EMU_CM->CM_CLKSEL1_EMU,  s_emuCmContext.CM_CLKSEL1_EMU);

  00034	e59f50f4	 ldr         r5, [pc, #0xF4]
  00038	e5823030	 str         r3, [r2, #0x30]
  0003c	e5962004	 ldr         r2, [r6, #4]
  00040	e5913034	 ldr         r3, [r1, #0x34]
  00044	e5823034	 str         r3, [r2, #0x34]
  00048	e5962004	 ldr         r2, [r6, #4]
  0004c	e5913038	 ldr         r3, [r1, #0x38]
  00050	e5823038	 str         r3, [r2, #0x38]
  00054	e59e2014	 ldr         r2, [lr, #0x14]
  00058	e5963000	 ldr         r3, [r6]
  0005c	e5832000	 str         r2, [r3]
  00060	e59e1024	 ldr         r1, [lr, #0x24]
  00064	e5963000	 ldr         r3, [r6]

; 2694 :     OUTREG32(&g_PrcmCm.pOMAP_EMU_CM->CM_CLKSTCTRL_EMU, s_emuCmContext.CM_CLKSTCTRL_EMU);
; 2695 :     OUTREG32(&g_PrcmCm.pOMAP_EMU_CM->CM_CLKSEL2_EMU, s_emuCmContext.CM_CLKSEL2_EMU);
; 2696 :     OUTREG32(&g_PrcmCm.pOMAP_EMU_CM->CM_CLKSEL3_EMU, s_emuCmContext.CM_CLKSEL3_EMU);
; 2697 : 
; 2698 :     PrcmDomainSetClockState(POWERDOMAIN_EMULATION, CLOCKDOMAIN_EMULATION, CLKSTCTRL_AUTOMATIC);

  00068	e3a02003	 mov         r2, #3
  0006c	e5831010	 str         r1, [r3, #0x10]
  00070	e5961000	 ldr         r1, [r6]
  00074	e59e3044	 ldr         r3, [lr, #0x44]
  00078	e5813030	 str         r3, [r1, #0x30]
  0007c	e5963034	 ldr         r3, [r6, #0x34]
  00080	e5837034	 str         r7, [r3, #0x34]
  00084	e5961034	 ldr         r1, [r6, #0x34]
  00088	e594304c	 ldr         r3, [r4, #0x4C]
  0008c	e581304c	 str         r3, [r1, #0x4C]
  00090	e5961034	 ldr         r1, [r6, #0x34]
  00094	e5943050	 ldr         r3, [r4, #0x50]
  00098	e5813050	 str         r3, [r1, #0x50]
  0009c	e5961034	 ldr         r1, [r6, #0x34]
  000a0	e5943004	 ldr         r3, [r4, #4]
  000a4	e5813004	 str         r3, [r1, #4]
  000a8	e5961034	 ldr         r1, [r6, #0x34]
  000ac	e5943034	 ldr         r3, [r4, #0x34]
  000b0	e5813034	 str         r3, [r1, #0x34]
  000b4	e596102c	 ldr         r1, [r6, #0x2C]
  000b8	e590309c	 ldr         r3, [r0, #0x9C]
  000bc	e3a00004	 mov         r0, #4
  000c0	e581309c	 str         r3, [r1, #0x9C]
  000c4	e5961034	 ldr         r1, [r6, #0x34]
  000c8	e5943070	 ldr         r3, [r4, #0x70]
  000cc	e5813070	 str         r3, [r1, #0x70]
  000d0	e5961010	 ldr         r1, [r6, #0x10]
  000d4	e5953040	 ldr         r3, [r5, #0x40]
  000d8	e5813040	 str         r3, [r1, #0x40]
  000dc	e5961010	 ldr         r1, [r6, #0x10]
  000e0	e5953048	 ldr         r3, [r5, #0x48]
  000e4	e5813048	 str         r3, [r1, #0x48]
  000e8	e5961010	 ldr         r1, [r6, #0x10]
  000ec	e5953050	 ldr         r3, [r5, #0x50]
  000f0	e5813050	 str         r3, [r1, #0x50]
  000f4	e5961010	 ldr         r1, [r6, #0x10]
  000f8	e5953054	 ldr         r3, [r5, #0x54]
  000fc	e5813054	 str         r3, [r1, #0x54]
  00100	e3a01004	 mov         r1, #4
  00104	eb000000	 bl          PrcmDomainSetClockState

; 2699 :     PrcmDomainSetClockState(POWERDOMAIN_NEON, CLOCKDOMAIN_NEON, CLKSTCTRL_AUTOMATIC);

  00108	e3a02003	 mov         r2, #3
  0010c	e3a01007	 mov         r1, #7
  00110	e3a00007	 mov         r0, #7
  00114	eb000000	 bl          PrcmDomainSetClockState

; 2700 :     PrcmDomainSetClockState(POWERDOMAIN_IVA2, CLOCKDOMAIN_IVA2, CLKSTCTRL_AUTOMATIC);

  00118	e3a02003	 mov         r2, #3
  0011c	e3a01008	 mov         r1, #8
  00120	e3a00008	 mov         r0, #8
  00124	eb000000	 bl          PrcmDomainSetClockState

; 2701 : }

  00128	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN6@OALContext@13|
  00130		 |$LN7@OALContext@13|
  00130	00000000	 DCD         |s_emuCmContext|
  00134		 |$LN8@OALContext@13|
  00134	00000000	 DCD         |s_globalCmContext|
  00138		 |$LN9@OALContext@13|
  00138	00000000	 DCD         |s_clkCtrlCmContext|
  0013c		 |$LN10@OALContext@13|
  0013c	00000000	 DCD         |s_coreCmContext|
  00140		 |$LN11@OALContext@13|
  00140	00000000	 DCD         |g_PrcmCm|
  00144		 |$LN12@OALContext@13|
  00144	00000000	 DCD         |s_ocpSysCmContext|
  00148		 |$M50237|

			 ENDP  ; |OALContextRestorePRCM|

	EXPORT	|OALContextRestoreGPMC|

  00000			 AREA	 |.pdata|, PDATA
|$T50253| DCD	|$LN13@OALContext@14|
	DCD	0x4000da00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestoreGPMC| PROC

; 2711 : {

  00000		 |$LN13@OALContext@14|
  00000		 |$M50250|

; 2712 : 
; 2713 :     OUTREG32(&g_pGPMCRegs->GPMC_SYSCONFIG, s_gpmcContext.GPMC_SYSCONFIG);

  00000	e59f035c	 ldr         r0, [pc, #0x35C]
  00004	e59f1354	 ldr         r1, [pc, #0x354]
  00008	e5902000	 ldr         r2, [r0]
  0000c	e5913010	 ldr         r3, [r1, #0x10]
  00010	e5823010	 str         r3, [r2, #0x10]

; 2714 :     OUTREG32(&g_pGPMCRegs->GPMC_IRQENABLE, s_gpmcContext.GPMC_IRQENABLE);

  00014	e5902000	 ldr         r2, [r0]
  00018	e591301c	 ldr         r3, [r1, #0x1C]
  0001c	e582301c	 str         r3, [r2, #0x1C]

; 2715 :     OUTREG32(&g_pGPMCRegs->GPMC_TIMEOUT_CONTROL, s_gpmcContext.GPMC_TIMEOUT_CONTROL);

  00020	e5902000	 ldr         r2, [r0]
  00024	e5913040	 ldr         r3, [r1, #0x40]
  00028	e5823040	 str         r3, [r2, #0x40]

; 2716 :     OUTREG32(&g_pGPMCRegs->GPMC_CONFIG, s_gpmcContext.GPMC_CONFIG);

  0002c	e5902000	 ldr         r2, [r0]
  00030	e5913050	 ldr         r3, [r1, #0x50]
  00034	e5823050	 str         r3, [r2, #0x50]

; 2717 :     OUTREG32(&g_pGPMCRegs->GPMC_PREFETCH_CONFIG1, s_gpmcContext.GPMC_PREFETCH_CONFIG1);

  00038	e5902000	 ldr         r2, [r0]
  0003c	e59131e0	 ldr         r3, [r1, #0x1E0]
  00040	e58231e0	 str         r3, [r2, #0x1E0]

; 2718 :     OUTREG32(&g_pGPMCRegs->GPMC_PREFETCH_CONFIG2, s_gpmcContext.GPMC_PREFETCH_CONFIG2);

  00044	e5902000	 ldr         r2, [r0]
  00048	e59131e4	 ldr         r3, [r1, #0x1E4]
  0004c	e58231e4	 str         r3, [r2, #0x1E4]

; 2719 :     OUTREG32(&g_pGPMCRegs->GPMC_PREFETCH_CONTROL, s_gpmcContext.GPMC_PREFETCH_CONTROL);

  00050	e5902000	 ldr         r2, [r0]
  00054	e59131ec	 ldr         r3, [r1, #0x1EC]
  00058	e58231ec	 str         r3, [r2, #0x1EC]

; 2720 :     if(s_gpmcContext.GPMC_CONFIG7_0 & GPMC_CSVALID)

  0005c	e5913078	 ldr         r3, [r1, #0x78]
  00060	e3130040	 tst         r3, #0x40
  00064	0a000014	 beq         |$LN8@OALContext@14|

; 2721 :     {
; 2722 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG1_0, s_gpmcContext.GPMC_CONFIG1_0);

  00068	e5902000	 ldr         r2, [r0]
  0006c	e5913060	 ldr         r3, [r1, #0x60]
  00070	e5823060	 str         r3, [r2, #0x60]

; 2723 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG2_0, s_gpmcContext.GPMC_CONFIG2_0);

  00074	e5902000	 ldr         r2, [r0]
  00078	e5913064	 ldr         r3, [r1, #0x64]
  0007c	e5823064	 str         r3, [r2, #0x64]

; 2724 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG3_0, s_gpmcContext.GPMC_CONFIG3_0);

  00080	e5902000	 ldr         r2, [r0]
  00084	e5913068	 ldr         r3, [r1, #0x68]
  00088	e5823068	 str         r3, [r2, #0x68]

; 2725 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG4_0, s_gpmcContext.GPMC_CONFIG4_0);

  0008c	e5902000	 ldr         r2, [r0]
  00090	e591306c	 ldr         r3, [r1, #0x6C]
  00094	e582306c	 str         r3, [r2, #0x6C]

; 2726 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG5_0, s_gpmcContext.GPMC_CONFIG5_0);

  00098	e5902000	 ldr         r2, [r0]
  0009c	e5913070	 ldr         r3, [r1, #0x70]
  000a0	e5823070	 str         r3, [r2, #0x70]

; 2727 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG6_0, s_gpmcContext.GPMC_CONFIG6_0);

  000a4	e5902000	 ldr         r2, [r0]
  000a8	e5913074	 ldr         r3, [r1, #0x74]
  000ac	e5823074	 str         r3, [r2, #0x74]

; 2728 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG7_0, s_gpmcContext.GPMC_CONFIG7_0);

  000b0	e5902000	 ldr         r2, [r0]
  000b4	e5913078	 ldr         r3, [r1, #0x78]
  000b8	e5823078	 str         r3, [r2, #0x78]
  000bc		 |$LN8@OALContext@14|

; 2729 :     }
; 2730 :     if(s_gpmcContext.GPMC_CONFIG7_1 & GPMC_CSVALID)

  000bc	e59130a8	 ldr         r3, [r1, #0xA8]
  000c0	e3130040	 tst         r3, #0x40
  000c4	0a000014	 beq         |$LN7@OALContext@14|

; 2731 :     {
; 2732 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG1_1, s_gpmcContext.GPMC_CONFIG1_1);

  000c8	e5902000	 ldr         r2, [r0]
  000cc	e5913090	 ldr         r3, [r1, #0x90]
  000d0	e5823090	 str         r3, [r2, #0x90]

; 2733 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG2_1, s_gpmcContext.GPMC_CONFIG2_1);

  000d4	e5902000	 ldr         r2, [r0]
  000d8	e5913094	 ldr         r3, [r1, #0x94]
  000dc	e5823094	 str         r3, [r2, #0x94]

; 2734 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG3_1, s_gpmcContext.GPMC_CONFIG3_1);

  000e0	e5902000	 ldr         r2, [r0]
  000e4	e5913098	 ldr         r3, [r1, #0x98]
  000e8	e5823098	 str         r3, [r2, #0x98]

; 2735 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG4_1, s_gpmcContext.GPMC_CONFIG4_1);

  000ec	e5902000	 ldr         r2, [r0]
  000f0	e591309c	 ldr         r3, [r1, #0x9C]
  000f4	e582309c	 str         r3, [r2, #0x9C]

; 2736 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG5_1, s_gpmcContext.GPMC_CONFIG5_1);

  000f8	e5902000	 ldr         r2, [r0]
  000fc	e59130a0	 ldr         r3, [r1, #0xA0]
  00100	e58230a0	 str         r3, [r2, #0xA0]

; 2737 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG6_1, s_gpmcContext.GPMC_CONFIG6_1);

  00104	e5902000	 ldr         r2, [r0]
  00108	e59130a4	 ldr         r3, [r1, #0xA4]
  0010c	e58230a4	 str         r3, [r2, #0xA4]

; 2738 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG7_1, s_gpmcContext.GPMC_CONFIG7_1);

  00110	e5902000	 ldr         r2, [r0]
  00114	e59130a8	 ldr         r3, [r1, #0xA8]
  00118	e58230a8	 str         r3, [r2, #0xA8]
  0011c		 |$LN7@OALContext@14|

; 2739 :     }
; 2740 :     if(s_gpmcContext.GPMC_CONFIG7_2 & GPMC_CSVALID)

  0011c	e59130d8	 ldr         r3, [r1, #0xD8]
  00120	e3130040	 tst         r3, #0x40
  00124	0a000014	 beq         |$LN6@OALContext@14|

; 2741 :     {
; 2742 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG1_2, s_gpmcContext.GPMC_CONFIG1_2);

  00128	e5902000	 ldr         r2, [r0]
  0012c	e59130c0	 ldr         r3, [r1, #0xC0]
  00130	e58230c0	 str         r3, [r2, #0xC0]

; 2743 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG2_2, s_gpmcContext.GPMC_CONFIG2_2);

  00134	e5902000	 ldr         r2, [r0]
  00138	e59130c4	 ldr         r3, [r1, #0xC4]
  0013c	e58230c4	 str         r3, [r2, #0xC4]

; 2744 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG3_2, s_gpmcContext.GPMC_CONFIG3_2);

  00140	e5902000	 ldr         r2, [r0]
  00144	e59130c8	 ldr         r3, [r1, #0xC8]
  00148	e58230c8	 str         r3, [r2, #0xC8]

; 2745 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG4_2, s_gpmcContext.GPMC_CONFIG4_2);

  0014c	e5902000	 ldr         r2, [r0]
  00150	e59130cc	 ldr         r3, [r1, #0xCC]
  00154	e58230cc	 str         r3, [r2, #0xCC]

; 2746 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG5_2, s_gpmcContext.GPMC_CONFIG5_2);

  00158	e5902000	 ldr         r2, [r0]
  0015c	e59130d0	 ldr         r3, [r1, #0xD0]
  00160	e58230d0	 str         r3, [r2, #0xD0]

; 2747 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG6_2, s_gpmcContext.GPMC_CONFIG6_2);

  00164	e5902000	 ldr         r2, [r0]
  00168	e59130d4	 ldr         r3, [r1, #0xD4]
  0016c	e58230d4	 str         r3, [r2, #0xD4]

; 2748 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG7_2, s_gpmcContext.GPMC_CONFIG7_2);

  00170	e5902000	 ldr         r2, [r0]
  00174	e59130d8	 ldr         r3, [r1, #0xD8]
  00178	e58230d8	 str         r3, [r2, #0xD8]
  0017c		 |$LN6@OALContext@14|

; 2749 :     }
; 2750 :     if(s_gpmcContext.GPMC_CONFIG7_3 & GPMC_CSVALID)

  0017c	e5913108	 ldr         r3, [r1, #0x108]
  00180	e3130040	 tst         r3, #0x40
  00184	0a000014	 beq         |$LN5@OALContext@14|

; 2751 :     {
; 2752 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG1_3, s_gpmcContext.GPMC_CONFIG1_3);

  00188	e5902000	 ldr         r2, [r0]
  0018c	e59130f0	 ldr         r3, [r1, #0xF0]
  00190	e58230f0	 str         r3, [r2, #0xF0]

; 2753 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG2_3, s_gpmcContext.GPMC_CONFIG2_3);

  00194	e5902000	 ldr         r2, [r0]
  00198	e59130f4	 ldr         r3, [r1, #0xF4]
  0019c	e58230f4	 str         r3, [r2, #0xF4]

; 2754 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG3_3, s_gpmcContext.GPMC_CONFIG3_3);

  001a0	e5902000	 ldr         r2, [r0]
  001a4	e59130f8	 ldr         r3, [r1, #0xF8]
  001a8	e58230f8	 str         r3, [r2, #0xF8]

; 2755 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG4_3, s_gpmcContext.GPMC_CONFIG4_3);

  001ac	e5902000	 ldr         r2, [r0]
  001b0	e59130fc	 ldr         r3, [r1, #0xFC]
  001b4	e58230fc	 str         r3, [r2, #0xFC]

; 2756 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG5_3, s_gpmcContext.GPMC_CONFIG5_3);

  001b8	e5902000	 ldr         r2, [r0]
  001bc	e5913100	 ldr         r3, [r1, #0x100]
  001c0	e5823100	 str         r3, [r2, #0x100]

; 2757 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG6_3, s_gpmcContext.GPMC_CONFIG6_3);

  001c4	e5902000	 ldr         r2, [r0]
  001c8	e5913104	 ldr         r3, [r1, #0x104]
  001cc	e5823104	 str         r3, [r2, #0x104]

; 2758 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG7_3, s_gpmcContext.GPMC_CONFIG7_3);

  001d0	e5902000	 ldr         r2, [r0]
  001d4	e5913108	 ldr         r3, [r1, #0x108]
  001d8	e5823108	 str         r3, [r2, #0x108]
  001dc		 |$LN5@OALContext@14|

; 2759 :     }
; 2760 :     if(s_gpmcContext.GPMC_CONFIG7_4 & GPMC_CSVALID)

  001dc	e5913138	 ldr         r3, [r1, #0x138]
  001e0	e3130040	 tst         r3, #0x40
  001e4	0a000014	 beq         |$LN4@OALContext@14|

; 2761 :     {
; 2762 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG1_4, s_gpmcContext.GPMC_CONFIG1_4);

  001e8	e5902000	 ldr         r2, [r0]
  001ec	e5913120	 ldr         r3, [r1, #0x120]
  001f0	e5823120	 str         r3, [r2, #0x120]

; 2763 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG2_4, s_gpmcContext.GPMC_CONFIG2_4);

  001f4	e5902000	 ldr         r2, [r0]
  001f8	e5913124	 ldr         r3, [r1, #0x124]
  001fc	e5823124	 str         r3, [r2, #0x124]

; 2764 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG3_4, s_gpmcContext.GPMC_CONFIG3_4);

  00200	e5902000	 ldr         r2, [r0]
  00204	e5913128	 ldr         r3, [r1, #0x128]
  00208	e5823128	 str         r3, [r2, #0x128]

; 2765 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG4_4, s_gpmcContext.GPMC_CONFIG4_4);

  0020c	e5902000	 ldr         r2, [r0]
  00210	e591312c	 ldr         r3, [r1, #0x12C]
  00214	e582312c	 str         r3, [r2, #0x12C]

; 2766 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG5_4, s_gpmcContext.GPMC_CONFIG5_4);

  00218	e5902000	 ldr         r2, [r0]
  0021c	e5913130	 ldr         r3, [r1, #0x130]
  00220	e5823130	 str         r3, [r2, #0x130]

; 2767 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG6_4, s_gpmcContext.GPMC_CONFIG6_4);

  00224	e5902000	 ldr         r2, [r0]
  00228	e5913134	 ldr         r3, [r1, #0x134]
  0022c	e5823134	 str         r3, [r2, #0x134]

; 2768 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG7_4, s_gpmcContext.GPMC_CONFIG7_4);

  00230	e5902000	 ldr         r2, [r0]
  00234	e5913138	 ldr         r3, [r1, #0x138]
  00238	e5823138	 str         r3, [r2, #0x138]
  0023c		 |$LN4@OALContext@14|

; 2769 :     }
; 2770 :     if(s_gpmcContext.GPMC_CONFIG7_5 & GPMC_CSVALID)

  0023c	e5913168	 ldr         r3, [r1, #0x168]
  00240	e3130040	 tst         r3, #0x40
  00244	0a000014	 beq         |$LN3@OALContext@14|

; 2771 :     {
; 2772 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG1_5, s_gpmcContext.GPMC_CONFIG1_5);

  00248	e5902000	 ldr         r2, [r0]
  0024c	e5913150	 ldr         r3, [r1, #0x150]
  00250	e5823150	 str         r3, [r2, #0x150]

; 2773 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG2_5, s_gpmcContext.GPMC_CONFIG2_5);

  00254	e5902000	 ldr         r2, [r0]
  00258	e5913154	 ldr         r3, [r1, #0x154]
  0025c	e5823154	 str         r3, [r2, #0x154]

; 2774 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG3_5, s_gpmcContext.GPMC_CONFIG3_5);

  00260	e5902000	 ldr         r2, [r0]
  00264	e5913158	 ldr         r3, [r1, #0x158]
  00268	e5823158	 str         r3, [r2, #0x158]

; 2775 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG4_5, s_gpmcContext.GPMC_CONFIG4_5);

  0026c	e5902000	 ldr         r2, [r0]
  00270	e591315c	 ldr         r3, [r1, #0x15C]
  00274	e582315c	 str         r3, [r2, #0x15C]

; 2776 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG5_5, s_gpmcContext.GPMC_CONFIG5_5);

  00278	e5902000	 ldr         r2, [r0]
  0027c	e5913160	 ldr         r3, [r1, #0x160]
  00280	e5823160	 str         r3, [r2, #0x160]

; 2777 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG6_5, s_gpmcContext.GPMC_CONFIG6_5);

  00284	e5902000	 ldr         r2, [r0]
  00288	e5913164	 ldr         r3, [r1, #0x164]
  0028c	e5823164	 str         r3, [r2, #0x164]

; 2778 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG7_5, s_gpmcContext.GPMC_CONFIG7_5);

  00290	e5902000	 ldr         r2, [r0]
  00294	e5913168	 ldr         r3, [r1, #0x168]
  00298	e5823168	 str         r3, [r2, #0x168]
  0029c		 |$LN3@OALContext@14|

; 2779 :     }
; 2780 :     if(s_gpmcContext.GPMC_CONFIG7_6 & GPMC_CSVALID)

  0029c	e5913198	 ldr         r3, [r1, #0x198]
  002a0	e3130040	 tst         r3, #0x40
  002a4	0a000014	 beq         |$LN2@OALContext@14|

; 2781 :     {
; 2782 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG1_6, s_gpmcContext.GPMC_CONFIG1_6);

  002a8	e5902000	 ldr         r2, [r0]
  002ac	e5913180	 ldr         r3, [r1, #0x180]
  002b0	e5823180	 str         r3, [r2, #0x180]

; 2783 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG2_6, s_gpmcContext.GPMC_CONFIG2_6);

  002b4	e5902000	 ldr         r2, [r0]
  002b8	e5913184	 ldr         r3, [r1, #0x184]
  002bc	e5823184	 str         r3, [r2, #0x184]

; 2784 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG3_6, s_gpmcContext.GPMC_CONFIG3_6);

  002c0	e5902000	 ldr         r2, [r0]
  002c4	e5913188	 ldr         r3, [r1, #0x188]
  002c8	e5823188	 str         r3, [r2, #0x188]

; 2785 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG4_6, s_gpmcContext.GPMC_CONFIG4_6);

  002cc	e5902000	 ldr         r2, [r0]
  002d0	e591318c	 ldr         r3, [r1, #0x18C]
  002d4	e582318c	 str         r3, [r2, #0x18C]

; 2786 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG5_6, s_gpmcContext.GPMC_CONFIG5_6);

  002d8	e5902000	 ldr         r2, [r0]
  002dc	e5913190	 ldr         r3, [r1, #0x190]
  002e0	e5823190	 str         r3, [r2, #0x190]

; 2787 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG6_6, s_gpmcContext.GPMC_CONFIG6_6);

  002e4	e5902000	 ldr         r2, [r0]
  002e8	e5913194	 ldr         r3, [r1, #0x194]
  002ec	e5823194	 str         r3, [r2, #0x194]

; 2788 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG7_6, s_gpmcContext.GPMC_CONFIG7_6);

  002f0	e5902000	 ldr         r2, [r0]
  002f4	e5913198	 ldr         r3, [r1, #0x198]
  002f8	e5823198	 str         r3, [r2, #0x198]
  002fc		 |$LN2@OALContext@14|

; 2789 :     }
; 2790 :     if(s_gpmcContext.GPMC_CONFIG7_7 & GPMC_CSVALID)

  002fc	e59131c8	 ldr         r3, [r1, #0x1C8]
  00300	e3130040	 tst         r3, #0x40
  00304	0a000014	 beq         |$LN1@OALContext@14|

; 2791 :     {
; 2792 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG1_7, s_gpmcContext.GPMC_CONFIG1_7);

  00308	e5902000	 ldr         r2, [r0]
  0030c	e59131b0	 ldr         r3, [r1, #0x1B0]
  00310	e58231b0	 str         r3, [r2, #0x1B0]

; 2793 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG2_7, s_gpmcContext.GPMC_CONFIG2_7);

  00314	e5902000	 ldr         r2, [r0]
  00318	e59131b4	 ldr         r3, [r1, #0x1B4]
  0031c	e58231b4	 str         r3, [r2, #0x1B4]

; 2794 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG3_7, s_gpmcContext.GPMC_CONFIG3_7);

  00320	e5902000	 ldr         r2, [r0]
  00324	e59131b8	 ldr         r3, [r1, #0x1B8]
  00328	e58231b8	 str         r3, [r2, #0x1B8]

; 2795 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG4_7, s_gpmcContext.GPMC_CONFIG4_7);

  0032c	e5902000	 ldr         r2, [r0]
  00330	e59131bc	 ldr         r3, [r1, #0x1BC]
  00334	e58231bc	 str         r3, [r2, #0x1BC]

; 2796 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG5_7, s_gpmcContext.GPMC_CONFIG5_7);

  00338	e5902000	 ldr         r2, [r0]
  0033c	e59131c0	 ldr         r3, [r1, #0x1C0]
  00340	e58231c0	 str         r3, [r2, #0x1C0]

; 2797 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG6_7, s_gpmcContext.GPMC_CONFIG6_7);

  00344	e5902000	 ldr         r2, [r0]
  00348	e59131c4	 ldr         r3, [r1, #0x1C4]
  0034c	e58231c4	 str         r3, [r2, #0x1C4]

; 2798 :         OUTREG32(&g_pGPMCRegs->GPMC_CONFIG7_7, s_gpmcContext.GPMC_CONFIG7_7);

  00350	e5902000	 ldr         r2, [r0]
  00354	e59131c8	 ldr         r3, [r1, #0x1C8]
  00358	e58231c8	 str         r3, [r2, #0x1C8]
  0035c		 |$LN1@OALContext@14|

; 2799 :     }
; 2800 : }

  0035c	e12fff1e	 bx          lr
  00360		 |$LN14@OALContext@14|
  00360		 |$LN15@OALContext@14|
  00360	00000000	 DCD         |s_gpmcContext|
  00364		 |$LN16@OALContext@14|
  00364	00000000	 DCD         |g_pGPMCRegs|
  00368		 |$M50251|

			 ENDP  ; |OALContextRestoreGPMC|

	EXPORT	|OALContextRestoreSCM|

  00000			 AREA	 |.pdata|, PDATA
|$T50263| DCD	|$LN5@OALContext@15|
	DCD	0x40007000
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestoreSCM| PROC

; 2810 : {

  00000		 |$LN5@OALContext@15|
  00000		 |$M50260|

; 2811 :     OUTREG32(&s_pSyscIFContext->CONTROL_SYSCONFIG, s_syscIntContext.CONTROL_SYSCONFIG);

  00000	e59f31b4	 ldr         r3, [pc, #0x1B4]
  00004	e59f01ac	 ldr         r0, [pc, #0x1AC]

; 2812 : 
; 2813 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEVCONF0, s_syscGenContext.CONTROL_DEVCONF0);

  00008	e59f11a4	 ldr         r1, [pc, #0x1A4]
  0000c	e5932000	 ldr         r2, [r3]
  00010	e590333c	 ldr         r3, [r0, #0x33C]
  00014	e5823010	 str         r3, [r2, #0x10]
  00018	e5912000	 ldr         r2, [r1]
  0001c	e5903004	 ldr         r3, [r0, #4]
  00020	e5823004	 str         r3, [r2, #4]

; 2814 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_MEM_DFTRW0, s_syscGenContext.CONTROL_MEM_DFTRW0);

  00024	e5912000	 ldr         r2, [r1]
  00028	e5903008	 ldr         r3, [r0, #8]
  0002c	e5823008	 str         r3, [r2, #8]

; 2815 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_MEM_DFTRW1, s_syscGenContext.CONTROL_MEM_DFTRW1);

  00030	e5912000	 ldr         r2, [r1]
  00034	e590300c	 ldr         r3, [r0, #0xC]
  00038	e582300c	 str         r3, [r2, #0xC]

; 2816 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_0, s_syscGenContext.CONTROL_MSUSPENDMUX_0);

  0003c	e5912000	 ldr         r2, [r1]
  00040	e5903020	 ldr         r3, [r0, #0x20]
  00044	e5823020	 str         r3, [r2, #0x20]

; 2817 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_1, s_syscGenContext.CONTROL_MSUSPENDMUX_1);

  00048	e5912000	 ldr         r2, [r1]
  0004c	e5903024	 ldr         r3, [r0, #0x24]
  00050	e5823024	 str         r3, [r2, #0x24]

; 2818 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_2, s_syscGenContext.CONTROL_MSUSPENDMUX_2);

  00054	e5912000	 ldr         r2, [r1]
  00058	e5903028	 ldr         r3, [r0, #0x28]
  0005c	e5823028	 str         r3, [r2, #0x28]

; 2819 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_3, s_syscGenContext.CONTROL_MSUSPENDMUX_3);

  00060	e5912000	 ldr         r2, [r1]
  00064	e590302c	 ldr         r3, [r0, #0x2C]
  00068	e582302c	 str         r3, [r2, #0x2C]

; 2820 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_4, s_syscGenContext.CONTROL_MSUSPENDMUX_4);

  0006c	e5912000	 ldr         r2, [r1]
  00070	e5903030	 ldr         r3, [r0, #0x30]
  00074	e5823030	 str         r3, [r2, #0x30]

; 2821 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_MSUSPENDMUX_5, s_syscGenContext.CONTROL_MSUSPENDMUX_5);

  00078	e5912000	 ldr         r2, [r1]
  0007c	e5903034	 ldr         r3, [r0, #0x34]
  00080	e5823034	 str         r3, [r2, #0x34]

; 2822 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_SEC_CTRL, s_syscGenContext.CONTROL_SEC_CTRL);

  00084	e5912000	 ldr         r2, [r1]
  00088	e5903040	 ldr         r3, [r0, #0x40]
  0008c	e5823040	 str         r3, [r2, #0x40]

; 2823 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEVCONF1, s_syscGenContext.CONTROL_DEVCONF1);

  00090	e5912000	 ldr         r2, [r1]
  00094	e5903068	 ldr         r3, [r0, #0x68]
  00098	e5823068	 str         r3, [r2, #0x68]

; 2824 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_CSIRXFE, s_syscGenContext.CONTROL_CSIRXFE);

  0009c	e5912000	 ldr         r2, [r1]
  000a0	e590306c	 ldr         r3, [r0, #0x6C]
  000a4	e582306c	 str         r3, [r2, #0x6C]

; 2825 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_IVA2_BOOTADDR, s_syscGenContext.CONTROL_IVA2_BOOTADDR);

  000a8	e5912000	 ldr         r2, [r1]
  000ac	e5903190	 ldr         r3, [r0, #0x190]
  000b0	e5823190	 str         r3, [r2, #0x190]

; 2826 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_IVA2_BOOTMOD, s_syscGenContext.CONTROL_IVA2_BOOTMOD);

  000b4	e5912000	 ldr         r2, [r1]
  000b8	e5903194	 ldr         r3, [r0, #0x194]
  000bc	e5823194	 str         r3, [r2, #0x194]

; 2827 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_0, s_syscGenContext.CONTROL_DEBOBS_0);

  000c0	e5912000	 ldr         r2, [r1]
  000c4	e59031b0	 ldr         r3, [r0, #0x1B0]
  000c8	e58231b0	 str         r3, [r2, #0x1B0]

; 2828 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_1, s_syscGenContext.CONTROL_DEBOBS_1);

  000cc	e5912000	 ldr         r2, [r1]
  000d0	e59031b4	 ldr         r3, [r0, #0x1B4]
  000d4	e58231b4	 str         r3, [r2, #0x1B4]

; 2829 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_2, s_syscGenContext.CONTROL_DEBOBS_2);

  000d8	e5912000	 ldr         r2, [r1]
  000dc	e59031b8	 ldr         r3, [r0, #0x1B8]
  000e0	e58231b8	 str         r3, [r2, #0x1B8]

; 2830 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_3, s_syscGenContext.CONTROL_DEBOBS_3);

  000e4	e5912000	 ldr         r2, [r1]
  000e8	e59031bc	 ldr         r3, [r0, #0x1BC]
  000ec	e58231bc	 str         r3, [r2, #0x1BC]

; 2831 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_4, s_syscGenContext.CONTROL_DEBOBS_4);

  000f0	e5912000	 ldr         r2, [r1]
  000f4	e59031c0	 ldr         r3, [r0, #0x1C0]
  000f8	e58231c0	 str         r3, [r2, #0x1C0]

; 2832 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_5, s_syscGenContext.CONTROL_DEBOBS_5);

  000fc	e5912000	 ldr         r2, [r1]
  00100	e59031c4	 ldr         r3, [r0, #0x1C4]
  00104	e58231c4	 str         r3, [r2, #0x1C4]

; 2833 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_6, s_syscGenContext.CONTROL_DEBOBS_6);

  00108	e5912000	 ldr         r2, [r1]
  0010c	e59031c8	 ldr         r3, [r0, #0x1C8]
  00110	e58231c8	 str         r3, [r2, #0x1C8]

; 2834 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_7, s_syscGenContext.CONTROL_DEBOBS_7);

  00114	e5912000	 ldr         r2, [r1]
  00118	e59031cc	 ldr         r3, [r0, #0x1CC]
  0011c	e58231cc	 str         r3, [r2, #0x1CC]

; 2835 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DEBOBS_8, s_syscGenContext.CONTROL_DEBOBS_8);

  00120	e5912000	 ldr         r2, [r1]
  00124	e59031d0	 ldr         r3, [r0, #0x1D0]
  00128	e58231d0	 str         r3, [r2, #0x1D0]

; 2836 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_PROG_IO0, s_syscGenContext.CONTROL_PROG_IO0);

  0012c	e5912000	 ldr         r2, [r1]
  00130	e59031d4	 ldr         r3, [r0, #0x1D4]
  00134	e58231d4	 str         r3, [r2, #0x1D4]

; 2837 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_PROG_IO1, s_syscGenContext.CONTROL_PROG_IO1);

  00138	e5912000	 ldr         r2, [r1]
  0013c	e59031d8	 ldr         r3, [r0, #0x1D8]
  00140	e58231d8	 str         r3, [r2, #0x1D8]

; 2838 : 
; 2839 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_DSS_DPLL_SPREADING, s_syscGenContext.CONTROL_DSS_DPLL_SPREADING);

  00144	e5912000	 ldr         r2, [r1]
  00148	e59031e0	 ldr         r3, [r0, #0x1E0]
  0014c	e58231e0	 str         r3, [r2, #0x1E0]

; 2840 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_CORE_DPLL_SPREADING, s_syscGenContext.CONTROL_CORE_DPLL_SPREADING);

  00150	e5912000	 ldr         r2, [r1]
  00154	e59031e4	 ldr         r3, [r0, #0x1E4]
  00158	e58231e4	 str         r3, [r2, #0x1E4]

; 2841 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_PER_DPLL_SPREADING, s_syscGenContext.CONTROL_PER_DPLL_SPREADING);

  0015c	e5912000	 ldr         r2, [r1]
  00160	e59031e8	 ldr         r3, [r0, #0x1E8]
  00164	e58231e8	 str         r3, [r2, #0x1E8]

; 2842 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_USBHOST_DPLL_SPREADING, s_syscGenContext.CONTROL_USBHOST_DPLL_SPREADING);

  00168	e5912000	 ldr         r2, [r1]
  0016c	e59031ec	 ldr         r3, [r0, #0x1EC]
  00170	e58231ec	 str         r3, [r2, #0x1EC]

; 2843 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_PBIAS_LITE, s_syscGenContext.CONTROL_PBIAS_LITE);

  00174	e5912000	 ldr         r2, [r1]
  00178	e59032b0	 ldr         r3, [r0, #0x2B0]
  0017c	e58232b0	 str         r3, [r2, #0x2B0]

; 2844 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_TEMP_SENSOR, s_syscGenContext.CONTROL_TEMP_SENSOR);

  00180	e5912000	 ldr         r2, [r1]
  00184	e59032b4	 ldr         r3, [r0, #0x2B4]
  00188	e58232b4	 str         r3, [r2, #0x2B4]

; 2845 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_SRAMLDO4, s_syscGenContext.CONTROL_SRAMLDO4);

  0018c	e5912000	 ldr         r2, [r1]
  00190	e59032b8	 ldr         r3, [r0, #0x2B8]
  00194	e58232b8	 str         r3, [r2, #0x2B8]

; 2846 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_SRAMLDO5, s_syscGenContext.CONTROL_SRAMLDO5);

  00198	e5912000	 ldr         r2, [r1]
  0019c	e59032bc	 ldr         r3, [r0, #0x2BC]
  001a0	e58232bc	 str         r3, [r2, #0x2BC]

; 2847 :     OUTREG32(&g_pSysCtrlGenReg->CONTROL_CSI, s_syscGenContext.CONTROL_CSI);

  001a4	e5912000	 ldr         r2, [r1]
  001a8	e59032c0	 ldr         r3, [r0, #0x2C0]
  001ac	e58232c0	 str         r3, [r2, #0x2C0]

; 2848 : }

  001b0	e12fff1e	 bx          lr
  001b4		 |$LN6@OALContext@15|
  001b4		 |$LN7@OALContext@15|
  001b4	00000000	 DCD         |g_pSysCtrlGenReg|
  001b8		 |$LN8@OALContext@15|
  001b8	00000000	 DCD         |s_syscGenContext|
  001bc		 |$LN9@OALContext@15|
  001bc	00000000	 DCD         |s_pSyscIFContext|
  001c0		 |$M50261|

			 ENDP  ; |OALContextRestoreSCM|

	EXPORT	|OALContextRestoreDMA|

  00000			 AREA	 |.pdata|, PDATA
|$T50274| DCD	|$LN5@OALContext@16|
	DCD	0x40001000
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestoreDMA| PROC

; 2858 : {

  00000		 |$LN5@OALContext@16|
  00000		 |$M50271|

; 2859 :     OUTREG32(&s_pDmaController->DMA4_GCR, s_dmaController.DMA4_GCR);

  00000	e59f2034	 ldr         r2, [pc, #0x34]
  00004	e5921d7c	 ldr         r1, [r2, #0xD7C]
  00008	e5923078	 ldr         r3, [r2, #0x78]
  0000c	e5813078	 str         r3, [r1, #0x78]

; 2860 :     OUTREG32(&s_pDmaController->DMA4_OCP_SYSCONFIG, s_dmaController.DMA4_OCP_SYSCONFIG);

  00010	e592302c	 ldr         r3, [r2, #0x2C]

; 2861 :     OUTREG32(&s_pDmaController->DMA4_IRQENABLE_L0, s_dmaController.DMA4_IRQENABLE_L0);

  00014	e581302c	 str         r3, [r1, #0x2C]
  00018	e5923018	 ldr         r3, [r2, #0x18]

; 2862 :     OUTREG32(&s_pDmaController->DMA4_IRQENABLE_L1, s_dmaController.DMA4_IRQENABLE_L1);
; 2863 :     OUTREG32(&s_pDmaController->DMA4_IRQENABLE_L2, s_dmaController.DMA4_IRQENABLE_L2);

  0001c	e5813018	 str         r3, [r1, #0x18]
  00020	e592301c	 ldr         r3, [r2, #0x1C]

; 2864 :     OUTREG32(&s_pDmaController->DMA4_IRQENABLE_L3, s_dmaController.DMA4_IRQENABLE_L3);

  00024	e581301c	 str         r3, [r1, #0x1C]
  00028	e5923020	 ldr         r3, [r2, #0x20]
  0002c	e5813020	 str         r3, [r1, #0x20]
  00030	e5923024	 ldr         r3, [r2, #0x24]
  00034	e5813024	 str         r3, [r1, #0x24]

; 2865 : }

  00038	e12fff1e	 bx          lr
  0003c		 |$LN6@OALContext@16|
  0003c		 |$LN7@OALContext@16|
  0003c	00000000	 DCD         |s_dmaController|
  00040		 |$M50272|

			 ENDP  ; |OALContextRestoreDMA|

	EXPORT	|OALContextRestoreSMS|

  00000			 AREA	 |.pdata|, PDATA
|$T50283| DCD	|$LN5@OALContext@17|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestoreSMS| PROC

; 2875 : {

  00000		 |$LN5@OALContext@17|
  00000		 |$M50280|

; 2876 :     OUTREG32(&g_pSMSRegs->SMS_SYSCONFIG, s_smsContext.SMS_SYSCONFIG);

  00000	e59f3014	 ldr         r3, [pc, #0x14]
  00004	e59f200c	 ldr         r2, [pc, #0xC]
  00008	e5931000	 ldr         r1, [r3]
  0000c	e5923010	 ldr         r3, [r2, #0x10]
  00010	e5813010	 str         r3, [r1, #0x10]

; 2877 :         }

  00014	e12fff1e	 bx          lr
  00018		 |$LN6@OALContext@17|
  00018		 |$LN7@OALContext@17|
  00018	00000000	 DCD         |s_smsContext|
  0001c		 |$LN8@OALContext@17|
  0001c	00000000	 DCD         |g_pSMSRegs|
  00020		 |$M50281|

			 ENDP  ; |OALContextRestoreSMS|

	EXPORT	|OALContextRestoreVRFB|

  00000			 AREA	 |.pdata|, PDATA
|$T50295| DCD	|$LN10@OALContext@18|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestoreVRFB| PROC

; 2887 : {

  00000		 |$LN10@OALContext@18|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M50292|

; 2888 :     int i;
; 2889 : 
; 2890 :     for (i = 0; i < VRFB_ROTATION_CONTEXTS; ++i)

  00004	e59fe054	 ldr         lr, [pc, #0x54]
  00008	e3a04000	 mov         r4, #0
  0000c	e3a05020	 mov         r5, #0x20
  00010	e28e6020	 add         r6, lr, #0x20
  00014		 |$LL3@OALContext@18|

; 2891 :         {
; 2892 :         OUTREG32(&g_pVRFBRegs->aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_CONTROL,
; 2893 :             s_vrfbContext.aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_CONTROL
; 2894 :             );

  00014	e0840006	 add         r0, r4, r6
  00018	e59e1ea4	 ldr         r1, [lr, #0xEA4]
  0001c	e2403004	 sub         r3, r0, #4
  00020	e5932000	 ldr         r2, [r3]
  00024	e0843001	 add         r3, r4, r1
  00028	e583201c	 str         r2, [r3, #0x1C]
  0002c	e59e2ea4	 ldr         r2, [lr, #0xEA4]

; 2895 : 
; 2896 :         OUTREG32(&g_pVRFBRegs->aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_SIZE,
; 2897 :             s_vrfbContext.aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_SIZE
; 2898 :             );

  00030	e5903000	 ldr         r3, [r0]
  00034	e7853002	 str         r3, [r5, +r2]

; 2899 : 
; 2900 :         OUTREG32(&g_pVRFBRegs->aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_PHYSICAL_BA,
; 2901 :             s_vrfbContext.aVRFB_SMS_ROT_CTRL[i].VRFB_SMS_ROT_PHYSICAL_BA
; 2902 :             );

  00038	e59e3ea4	 ldr         r3, [lr, #0xEA4]
  0003c	e5902004	 ldr         r2, [r0, #4]
  00040	e2855010	 add         r5, r5, #0x10
  00044	e0843003	 add         r3, r4, r3
  00048	e2844010	 add         r4, r4, #0x10
  0004c	e35400c0	 cmp         r4, #0xC0
  00050	e5832024	 str         r2, [r3, #0x24]
  00054	baffffee	 blt         |$LL3@OALContext@18|

; 2903 :         }
; 2904 : }

  00058	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN11@OALContext@18|
  00060		 |$LN12@OALContext@18|
  00060	00000000	 DCD         |s_vrfbContext|
  00064		 |$M50293|

			 ENDP  ; |OALContextRestoreVRFB|

	EXPORT	|OALContextRestorePerfTimer|

  00000			 AREA	 |.pdata|, PDATA
|$T50304| DCD	|$LN5@OALContext@19|
	DCD	0x40004100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestorePerfTimer| PROC

; 2914 : {	

  00000		 |$LN5@OALContext@19|
  00000		 |$M50301|

; 2915 : 	OUTREG32(&g_pPerfTimer->TIDR,s_perfTimerContext.TIDR);                // 0000

  00000	e59f00f8	 ldr         r0, [pc, #0xF8]
  00004	e59f10f0	 ldr         r1, [pc, #0xF0]
  00008	e5902000	 ldr         r2, [r0]
  0000c	e5913000	 ldr         r3, [r1]
  00010	e5832000	 str         r2, [r3]

; 2916 : 	OUTREG32(&g_pPerfTimer->TIOCP,s_perfTimerContext.TIOCP);               // 0010

  00014	e5902010	 ldr         r2, [r0, #0x10]
  00018	e5913000	 ldr         r3, [r1]
  0001c	e5832010	 str         r2, [r3, #0x10]

; 2917 : 	OUTREG32(&g_pPerfTimer->TISTAT,s_perfTimerContext.TISTAT);              // 0014

  00020	e5912000	 ldr         r2, [r1]
  00024	e5903014	 ldr         r3, [r0, #0x14]
  00028	e5823014	 str         r3, [r2, #0x14]

; 2918 : 	OUTREG32(&g_pPerfTimer->TISR,s_perfTimerContext.TISR);                // 0018

  0002c	e5912000	 ldr         r2, [r1]
  00030	e5903018	 ldr         r3, [r0, #0x18]
  00034	e5823018	 str         r3, [r2, #0x18]

; 2919 : 	OUTREG32(&g_pPerfTimer->TIER,s_perfTimerContext.TIER);                // 001C

  00038	e5912000	 ldr         r2, [r1]
  0003c	e590301c	 ldr         r3, [r0, #0x1C]
  00040	e582301c	 str         r3, [r2, #0x1C]

; 2920 : 	OUTREG32(&g_pPerfTimer->TWER,s_perfTimerContext.TWER);                // 0020

  00044	e5912000	 ldr         r2, [r1]
  00048	e5903020	 ldr         r3, [r0, #0x20]
  0004c	e5823020	 str         r3, [r2, #0x20]

; 2921 : 	OUTREG32(&g_pPerfTimer->TCLR,s_perfTimerContext.TCLR);                // 0024

  00050	e5912000	 ldr         r2, [r1]
  00054	e5903024	 ldr         r3, [r0, #0x24]
  00058	e5823024	 str         r3, [r2, #0x24]

; 2922 : 	OUTREG32(&g_pPerfTimer->TCRR,s_perfTimerContext.TCRR);                // 0028

  0005c	e5912000	 ldr         r2, [r1]
  00060	e5903028	 ldr         r3, [r0, #0x28]
  00064	e5823028	 str         r3, [r2, #0x28]

; 2923 : 	OUTREG32(&g_pPerfTimer->TLDR,s_perfTimerContext.TLDR);                // 002C

  00068	e5912000	 ldr         r2, [r1]
  0006c	e590302c	 ldr         r3, [r0, #0x2C]
  00070	e582302c	 str         r3, [r2, #0x2C]

; 2924 : 	OUTREG32(&g_pPerfTimer->TTGR,s_perfTimerContext.TTGR);                // 0030

  00074	e5912000	 ldr         r2, [r1]
  00078	e5903030	 ldr         r3, [r0, #0x30]
  0007c	e5823030	 str         r3, [r2, #0x30]

; 2925 : 	OUTREG32(&g_pPerfTimer->TWPS,s_perfTimerContext.TWPS);                // 0034

  00080	e5912000	 ldr         r2, [r1]
  00084	e5903034	 ldr         r3, [r0, #0x34]
  00088	e5823034	 str         r3, [r2, #0x34]

; 2926 : 	OUTREG32(&g_pPerfTimer->TMAR,s_perfTimerContext.TMAR);                // 0038

  0008c	e5912000	 ldr         r2, [r1]
  00090	e5903038	 ldr         r3, [r0, #0x38]
  00094	e5823038	 str         r3, [r2, #0x38]

; 2927 : 	OUTREG32(&g_pPerfTimer->TCAR1,s_perfTimerContext.TCAR1);               // 003C

  00098	e5912000	 ldr         r2, [r1]
  0009c	e590303c	 ldr         r3, [r0, #0x3C]
  000a0	e582303c	 str         r3, [r2, #0x3C]

; 2928 : 	OUTREG32(&g_pPerfTimer->TSICR,s_perfTimerContext.TSICR);               // 0040

  000a4	e5912000	 ldr         r2, [r1]
  000a8	e5903040	 ldr         r3, [r0, #0x40]
  000ac	e5823040	 str         r3, [r2, #0x40]

; 2929 : 	OUTREG32(&g_pPerfTimer->TCAR2,s_perfTimerContext.TCAR2);               // 0044

  000b0	e5912000	 ldr         r2, [r1]
  000b4	e5903044	 ldr         r3, [r0, #0x44]
  000b8	e5823044	 str         r3, [r2, #0x44]

; 2930 : 	OUTREG32(&g_pPerfTimer->TPIR,s_perfTimerContext.TPIR);                // 0x48

  000bc	e5912000	 ldr         r2, [r1]
  000c0	e5903048	 ldr         r3, [r0, #0x48]
  000c4	e5823048	 str         r3, [r2, #0x48]

; 2931 : 	OUTREG32(&g_pPerfTimer->TNIR,s_perfTimerContext.TNIR);                // 0x4C

  000c8	e5912000	 ldr         r2, [r1]
  000cc	e590304c	 ldr         r3, [r0, #0x4C]
  000d0	e582304c	 str         r3, [r2, #0x4C]

; 2932 : 	OUTREG32(&g_pPerfTimer->TCVR,s_perfTimerContext.TCVR);                // 0x50

  000d4	e5912000	 ldr         r2, [r1]
  000d8	e5903050	 ldr         r3, [r0, #0x50]
  000dc	e5823050	 str         r3, [r2, #0x50]

; 2933 : 	OUTREG32(&g_pPerfTimer->TOCR,s_perfTimerContext.TOCR);                // 0x54

  000e0	e5912000	 ldr         r2, [r1]
  000e4	e5903054	 ldr         r3, [r0, #0x54]
  000e8	e5823054	 str         r3, [r2, #0x54]

; 2934 : 	OUTREG32(&g_pPerfTimer->TOWR,s_perfTimerContext.TOWR);                // 0x58	

  000ec	e5912000	 ldr         r2, [r1]
  000f0	e5903058	 ldr         r3, [r0, #0x58]
  000f4	e5823058	 str         r3, [r2, #0x58]

; 2935 : }

  000f8	e12fff1e	 bx          lr
  000fc		 |$LN6@OALContext@19|
  000fc		 |$LN7@OALContext@19|
  000fc	00000000	 DCD         |g_pPerfTimer|
  00100		 |$LN8@OALContext@19|
  00100	00000000	 DCD         |s_perfTimerContext|
  00104		 |$M50302|

			 ENDP  ; |OALContextRestorePerfTimer|

	EXPORT	|OALContextRestoreInit|

  00000			 AREA	 |.pdata|, PDATA
|$T50314| DCD	|$LN5@OALContext@20|
	DCD	0x40003701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestoreInit| PROC

; 2946 : {

  00000		 |$LN5@OALContext@20|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M50311|
  00004	e3a05312	 mov         r5, #0x12, 6

; 2947 :     // Initalize
; 2948 :     s_pSyscIFContext = OALPAtoUA(OMAP_SYSC_INTERFACE_REGS_PA);

  00008	e3850a02	 orr         r0, r5, #2, 20
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e59f40bc	 ldr         r4, [pc, #0xBC]

; 2949 :     s_pDmaController = OALPAtoUA(OMAP_SDMA_REGS_PA);

  00018	e3a01000	 mov         r1, #0
  0001c	e5840050	 str         r0, [r4, #0x50]
  00020	e3850a56	 orr         r0, r5, #0x56, 20
  00024	eb000000	 bl          OALPAtoVA
  00028	e1a03000	 mov         r3, r0

; 2950 : 
; 2951 :     s_rgGpioRegsAddr[0] = OALPAtoUA(OMAP_GPIO1_REGS_PA);

  0002c	e3850831	 orr         r0, r5, #0x31, 16
  00030	e3a01000	 mov         r1, #0
  00034	e584305c	 str         r3, [r4, #0x5C]
  00038	eb000000	 bl          OALPAtoVA
  0003c	e3a05449	 mov         r5, #0x49, 8
  00040	e1a03000	 mov         r3, r0

; 2952 :     s_rgGpioRegsAddr[1] = OALPAtoUA(OMAP_GPIO2_REGS_PA);

  00044	e3850805	 orr         r0, r5, #5, 16
  00048	e3a01000	 mov         r1, #0
  0004c	e5843000	 str         r3, [r4]
  00050	eb000000	 bl          OALPAtoVA
  00054	e1a03000	 mov         r3, r0

; 2953 :     s_rgGpioRegsAddr[2] = OALPAtoUA(OMAP_GPIO3_REGS_PA);

  00058	e3850a52	 orr         r0, r5, #0x52, 20
  0005c	e3a01000	 mov         r1, #0
  00060	e5843004	 str         r3, [r4, #4]
  00064	eb000000	 bl          OALPAtoVA
  00068	e1a03000	 mov         r3, r0

; 2954 :     s_rgGpioRegsAddr[3] = OALPAtoUA(OMAP_GPIO4_REGS_PA);

  0006c	e3850915	 orr         r0, r5, #0x15, 18
  00070	e3a01000	 mov         r1, #0
  00074	e5843008	 str         r3, [r4, #8]
  00078	eb000000	 bl          OALPAtoVA
  0007c	e1a03000	 mov         r3, r0

; 2955 :     s_rgGpioRegsAddr[4] = OALPAtoUA(OMAP_GPIO5_REGS_PA);

  00080	e3850a56	 orr         r0, r5, #0x56, 20
  00084	e3a01000	 mov         r1, #0
  00088	e584300c	 str         r3, [r4, #0xC]
  0008c	eb000000	 bl          OALPAtoVA
  00090	e1a03000	 mov         r3, r0

; 2956 :     s_rgGpioRegsAddr[5] = OALPAtoUA(OMAP_GPIO6_REGS_PA);

  00094	e3850916	 orr         r0, r5, #0x16, 18
  00098	e3a01000	 mov         r1, #0
  0009c	e5843010	 str         r3, [r4, #0x10]
  000a0	eb000000	 bl          OALPAtoVA

; 2957 :     
; 2958 :     // Configure OMAP to send Sys OFF for OFF mode and I2C Command for RET.
; 2959 :     OUTREG32(&g_PrcmPrm.pOMAP_GLOBAL_PRM->PRM_VOLTCTRL, 
; 2960 :         (AUTO_OFF_ENABLED|SEL_OFF_SIGNALLINE|AUTO_RET_DISABLED));

  000a4	e59f3028	 ldr         r3, [pc, #0x28]
  000a8	e3a0100c	 mov         r1, #0xC
  000ac	e5840014	 str         r0, [r4, #0x14]
  000b0	e593302c	 ldr         r3, [r3, #0x2C]
  000b4	e3a02c77	 mov         r2, #0x77, 24

; 2961 : 
; 2962 :     // Configure the OFFMODE values for SYS_NIRQ to get wakeup from T2
; 2963 :     OUTREG16(&g_pSyscPadConfsRegs->CONTROL_PADCONF_SYS_NIRQ,
; 2964 :                        (OFF_WAKE_ENABLE | OFF_INPUT_PULL_UP | INPUT_ENABLE |
; 2965 :                         PULL_UP | MUX_MODE_4));    	

  000b8	e382201c	 orr         r2, r2, #0x1C
  000bc	e5831060	 str         r1, [r3, #0x60]
  000c0	e5943058	 ldr         r3, [r4, #0x58]
  000c4	e2833e1b	 add         r3, r3, #0x1B, 28
  000c8	e1c320b0	 strh        r2, [r3]

; 2966 : 
; 2967 : }

  000cc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN6@OALContext@20|
  000d4		 |$LN7@OALContext@20|
  000d4	00000000	 DCD         |g_PrcmPrm|
  000d8		 |$LN8@OALContext@20|
  000d8	00000000	 DCD         |s_rgGpioRegsAddr|
  000dc		 |$M50312|

			 ENDP  ; |OALContextRestoreInit|

	EXPORT	|OALContextUpdateDirtyRegister|

  00000			 AREA	 |.pdata|, PDATA
|$T50325| DCD	|$LN5@OALContext@21|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextUpdateDirtyRegister| PROC

; 2977 : {

  00000		 |$LN5@OALContext@21|
  00000		 |$M50322|

; 2978 :     g_ffContextSaveMask |= ffRegisterSet;

  00000	e59f200c	 ldr         r2, [pc, #0xC]
  00004	e5923000	 ldr         r3, [r2]
  00008	e1833000	 orr         r3, r3, r0
  0000c	e5823000	 str         r3, [r2]

; 2979 : }

  00010	e12fff1e	 bx          lr
  00014		 |$LN6@OALContext@21|
  00014		 |$LN7@OALContext@21|
  00014	00000000	 DCD         |g_ffContextSaveMask|
  00018		 |$M50323|

			 ENDP  ; |OALContextUpdateDirtyRegister|

	EXPORT	|OALContextUpdateCleanRegister|

  00000			 AREA	 |.pdata|, PDATA
|$T50344| DCD	|$LN20@OALContext@22|
	DCD	0x40003f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextUpdateCleanRegister| PROC

; 2989 : {

  00000		 |$LN20@OALContext@22|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M50341|

; 2990 :     switch (ffRegisterSet)

  00004	e3500001	 cmp         r0, #1
  00008	0a000034	 beq         |$LN7@OALContext@22|
  0000c	e3500002	 cmp         r0, #2
  00010	0a00002f	 beq         |$LN6@OALContext@22|
  00014	e3500004	 cmp         r0, #4
  00018	0a000018	 beq         |$LN4@OALContext@22|
  0001c	e3500010	 cmp         r0, #0x10
  00020	0a000013	 beq         |$LN5@OALContext@22|
  00024	e3500080	 cmp         r0, #0x80
  00028	0a00000e	 beq         |$LN1@OALContext@22|
  0002c	e3500c01	 cmp         r0, #1, 24
  00030	0a000012	 beq         |$LN4@OALContext@22|
  00034	e3500c02	 cmp         r0, #2, 24
  00038	1a000029	 bne         |$LN8@OALContext@22|

; 3006 :             break;
; 3007 : 
; 3008 :         case HAL_CONTEXTSAVE_PINMUX:
; 3009 :             OALContextSaveDMA();
; 3010 :             break;
; 3011 : 
; 3012 :         case HAL_CONTEXTSAVE_SMS:
; 3013 :             OALContextSaveSMS();

  0003c	e59f30b4	 ldr         r3, [pc, #0xB4]
  00040	e59f10a4	 ldr         r1, [pc, #0xA4]
  00044	e59f00a4	 ldr         r0, [pc, #0xA4]
  00048	e5932000	 ldr         r2, [r3]
  0004c	e5913000	 ldr         r3, [r1]
  00050	e5922010	 ldr         r2, [r2, #0x10]
  00054	e3c33c02	 bic         r3, r3, #2, 24
  00058	e5813000	 str         r3, [r1]
  0005c	e5802010	 str         r2, [r0, #0x10]

; 3018 :             break;
; 3019 : }
; 3020 : }

  00060	e49de004	 ldr         lr, [sp], #4
  00064	e12fff1e	 bx          lr
  00068		 |$LN1@OALContext@22|

; 3014 :             break;
; 3015 : 
; 3016 :         case HAL_CONTEXTSAVE_VRFB:
; 3017 :             OALContextSaveVRFB();

  00068	eb000000	 bl          OALContextSaveVRFB

; 3018 :             break;
; 3019 : }
; 3020 : }

  0006c	e49de004	 ldr         lr, [sp], #4
  00070	e12fff1e	 bx          lr
  00074		 |$LN5@OALContext@22|

; 2998 :             break;
; 2999 : 
; 3000 :         case HAL_CONTEXTSAVE_GPMC:
; 3001 :             OALContextSaveGPMC();

  00074	eb000000	 bl          OALContextSaveGPMC

; 3018 :             break;
; 3019 : }
; 3020 : }

  00078	e49de004	 ldr         lr, [sp], #4
  0007c	e12fff1e	 bx          lr
  00080		 |$LN4@OALContext@22|

; 3002 :             break;
; 3003 : 
; 3004 :         case HAL_CONTEXTSAVE_DMA:
; 3005 :             OALContextSaveDMA();

  00080	e59f306c	 ldr         r3, [pc, #0x6C]
  00084	e59f0064	 ldr         r0, [pc, #0x64]
  00088	e59fe05c	 ldr         lr, [pc, #0x5C]
  0008c	e5932000	 ldr         r2, [r3]
  00090	e59e1000	 ldr         r1, [lr]
  00094	e5923078	 ldr         r3, [r2, #0x78]
  00098	e5803638	 str         r3, [r0, #0x638]
  0009c	e592302c	 ldr         r3, [r2, #0x2C]
  000a0	e58035ec	 str         r3, [r0, #0x5EC]
  000a4	e5923018	 ldr         r3, [r2, #0x18]
  000a8	e58035d8	 str         r3, [r0, #0x5D8]
  000ac	e592301c	 ldr         r3, [r2, #0x1C]
  000b0	e58035dc	 str         r3, [r0, #0x5DC]
  000b4	e5923020	 ldr         r3, [r2, #0x20]
  000b8	e58035e0	 str         r3, [r0, #0x5E0]
  000bc	e5922024	 ldr         r2, [r2, #0x24]
  000c0	e3c13004	 bic         r3, r1, #4
  000c4	e58e3000	 str         r3, [lr]
  000c8	e58025e4	 str         r2, [r0, #0x5E4]

; 3018 :             break;
; 3019 : }
; 3020 : }

  000cc	e49de004	 ldr         lr, [sp], #4
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN6@OALContext@22|

; 2994 :             break;
; 2995 : 
; 2996 :         case HAL_CONTEXTSAVE_SCM:
; 2997 :             OALContextSaveSCM();

  000d4	eb000000	 bl          OALContextSaveSCM

; 3018 :             break;
; 3019 : }
; 3020 : }

  000d8	e49de004	 ldr         lr, [sp], #4
  000dc	e12fff1e	 bx          lr
  000e0		 |$LN7@OALContext@22|

; 2991 :         {
; 2992 :         case HAL_CONTEXTSAVE_GPIO:
; 2993 :             OALContextSaveGPIO();

  000e0	eb000000	 bl          OALContextSaveGPIO
  000e4		 |$LN8@OALContext@22|

; 3018 :             break;
; 3019 : }
; 3020 : }

  000e4	e49de004	 ldr         lr, [sp], #4
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN21@OALContext@22|
  000ec		 |$LN22@OALContext@22|
  000ec	00000000	 DCD         |g_ffContextSaveMask|
  000f0		 |$LN23@OALContext@22|
  000f0	00000000	 DCD         |s_smsContext|
  000f4		 |$LN24@OALContext@22|
  000f4	00000000	 DCD         |s_pDmaController|
  000f8		 |$LN25@OALContext@22|
  000f8	00000000	 DCD         |g_pSMSRegs|
  000fc		 |$M50342|

			 ENDP  ; |OALContextUpdateCleanRegister|

	EXPORT	|OALContextSave|

  00000			 AREA	 |.pdata|, PDATA
|$T50364| DCD	|$LN15@OALContext@23|
	DCD	0x40005001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextSave| PROC

; 3030 : {

  00000		 |$LN15@OALContext@23|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M50361|

; 3031 :     BOOL    rc = TRUE;
; 3032 :     
; 3033 :     // save dirty registers
; 3034 :     if (g_ffContextSaveMask != 0)

  00004	e59f4130	 ldr         r4, [pc, #0x130]
  00008	e59f6128	 ldr         r6, [pc, #0x128]
  0000c	e5943000	 ldr         r3, [r4]
  00010	e3530000	 cmp         r3, #0
  00014	0a000024	 beq         |$LN1@OALContext@23|

; 3035 :         {
; 3036 :            
; 3037 :         //if ((g_ffContextSaveMask & HAL_CONTEXTSAVE_GPIO) != 0)
; 3038 :             {
; 3039 :             OALContextSaveGPIO();

  00018	eb000000	 bl          OALContextSaveGPIO

; 3040 :             }
; 3041 : 
; 3042 :         if ((g_ffContextSaveMask & HAL_CONTEXTSAVE_SCM) != 0)

  0001c	e5943000	 ldr         r3, [r4]
  00020	e3130002	 tst         r3, #2

; 3043 :             {
; 3044 :             OALContextSaveSCM ();

  00024	1b000000	 blne        OALContextSaveSCM

; 3045 :             }
; 3046 :         // always save GPMC before suspend
; 3047 :         //if ((g_ffContextSaveMask & HAL_CONTEXTSAVE_GPMC) != 0)
; 3048 :             {
; 3049 :             OALContextSaveGPMC();

  00028	eb000000	 bl          OALContextSaveGPMC

; 3050 :             }
; 3051 : 
; 3052 :         if ((g_ffContextSaveMask & HAL_CONTEXTSAVE_DMA) != 0)

  0002c	e5941000	 ldr         r1, [r4]
  00030	e3110004	 tst         r1, #4
  00034	0a00000f	 beq         |$LN9@OALContext@23|

; 3053 :             {
; 3054 :             OALContextSaveDMA();

  00038	e59f30f4	 ldr         r3, [pc, #0xF4]
  0003c	e3c11004	 bic         r1, r1, #4
  00040	e5932000	 ldr         r2, [r3]
  00044	e5923078	 ldr         r3, [r2, #0x78]
  00048	e5863d68	 str         r3, [r6, #0xD68]
  0004c	e592302c	 ldr         r3, [r2, #0x2C]
  00050	e5863d1c	 str         r3, [r6, #0xD1C]
  00054	e5923018	 ldr         r3, [r2, #0x18]
  00058	e5863d08	 str         r3, [r6, #0xD08]
  0005c	e592301c	 ldr         r3, [r2, #0x1C]
  00060	e5863d0c	 str         r3, [r6, #0xD0C]
  00064	e5923020	 ldr         r3, [r2, #0x20]
  00068	e5863d10	 str         r3, [r6, #0xD10]
  0006c	e5923024	 ldr         r3, [r2, #0x24]
  00070	e5841000	 str         r1, [r4]
  00074	e5863d14	 str         r3, [r6, #0xD14]
  00078		 |$LN9@OALContext@23|

; 3055 :             }
; 3056 : 
; 3057 :         if ((g_ffContextSaveMask & HAL_CONTEXTSAVE_PINMUX) != 0)

  00078	e3110c01	 tst         r1, #1, 24
  0007c	0a000001	 beq         |$LN3@OALContext@23|

; 3058 :             {
; 3059 :             OALContextSaveMux();

  00080	eb000000	 bl          OALContextSaveMux
  00084	e5941000	 ldr         r1, [r4]
  00088		 |$LN3@OALContext@23|

; 3060 :             }
; 3061 : 
; 3062 :         if ((g_ffContextSaveMask & HAL_CONTEXTSAVE_SMS) != 0)

  00088	e3110c02	 tst         r1, #2, 24

; 3063 :             {
; 3064 :             OALContextSaveSMS();

  0008c	159f309c	 ldrne       r3, [pc, #0x9C]
  00090	13c11c02	 bicne       r1, r1, #2, 24
  00094	15933000	 ldrne       r3, [r3]
  00098	15933010	 ldrne       r3, [r3, #0x10]
  0009c	15841000	 strne       r1, [r4]
  000a0	15863740	 strne       r3, [r6, #0x740]

; 3065 :             }
; 3066 : 
; 3067 :         if ((g_ffContextSaveMask & HAL_CONTEXTSAVE_VRFB) != 0)

  000a4	e3110080	 tst         r1, #0x80

; 3068 :             {
; 3069 :             OALContextSaveVRFB();

  000a8	1b000000	 blne        OALContextSaveVRFB
  000ac		 |$LN1@OALContext@23|

; 3070 :             }
; 3071 :         }	
; 3072 : 
; 3073 :     // Save the MPU Interrupt controller MIR registers
; 3074 :     s_intcContext.INTC_MIR0 = INREG32(&g_pIntr->pICLRegs->INTC_MIR0);

  000ac	e59f3078	 ldr         r3, [pc, #0x78]

; 3075 :     s_intcContext.INTC_MIR1 = INREG32(&g_pIntr->pICLRegs->INTC_MIR1);
; 3076 :     s_intcContext.INTC_MIR2 = INREG32(&g_pIntr->pICLRegs->INTC_MIR2);
; 3077 : 
; 3078 :     // need to clear all gpio interface clocks for per to enter OFF
; 3079 :     CLRREG32(&g_PrcmCm.pOMAP_PER_CM->CM_ICLKEN_PER, 0x3E000);

  000b0	e59f5070	 ldr         r5, [pc, #0x70]

; 3080 : 	
; 3081 :     // need to clear all gpio functional clocks for per to enter OFF
; 3082 :     CLRREG32(&g_PrcmCm.pOMAP_PER_CM->CM_FCLKEN_PER, 0x3E000);
; 3083 : 
; 3084 :     // Errata 2.23. GPIO is driving random values when device is coming 
; 3085 :     // back from OFF mode.
; 3086 :     // Set PER domain sleep dependency with Wkup to avoid GPIO glitch
; 3087 :     SETREG32(&g_PrcmPrm.pOMAP_PER_PRM->PM_WKDEP_PER, SLEEPDEP_EN_WKUP);
; 3088 : 
; 3089 :     s_bCoreOffModeSet = TRUE;

  000b4	e59f2068	 ldr         r2, [pc, #0x68]
  000b8	e5933000	 ldr         r3, [r3]
  000bc	e595e008	 ldr         lr, [r5, #8]
  000c0	e3a00001	 mov         r0, #1
  000c4	e5931000	 ldr         r1, [r3]
  000c8	e5820000	 str         r0, [r2]
  000cc	e59f404c	 ldr         r4, [pc, #0x4C]
  000d0	e5913084	 ldr         r3, [r1, #0x84]

; 3090 : 
; 3091 :     return rc;    

  000d4	e3a00001	 mov         r0, #1
  000d8	e5863084	 str         r3, [r6, #0x84]
  000dc	e59130a4	 ldr         r3, [r1, #0xA4]
  000e0	e58630a4	 str         r3, [r6, #0xA4]
  000e4	e59130c4	 ldr         r3, [r1, #0xC4]
  000e8	e58630c4	 str         r3, [r6, #0xC4]
  000ec	e59e3010	 ldr         r3, [lr, #0x10]
  000f0	e3c33a3e	 bic         r3, r3, #0x3E, 20
  000f4	e58e3010	 str         r3, [lr, #0x10]
  000f8	e5952008	 ldr         r2, [r5, #8]
  000fc	e5923000	 ldr         r3, [r2]
  00100	e3c33a3e	 bic         r3, r3, #0x3E, 20
  00104	e5823000	 str         r3, [r2]
  00108	e5942008	 ldr         r2, [r4, #8]
  0010c	e59230c8	 ldr         r3, [r2, #0xC8]
  00110	e3833010	 orr         r3, r3, #0x10
  00114	e58230c8	 str         r3, [r2, #0xC8]

; 3092 : }

  00118	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN16@OALContext@23|
  00120		 |$LN17@OALContext@23|
  00120	00000000	 DCD         |g_PrcmPrm|
  00124		 |$LN18@OALContext@23|
  00124	00000000	 DCD         |s_bCoreOffModeSet|
  00128		 |$LN19@OALContext@23|
  00128	00000000	 DCD         |g_PrcmCm|
  0012c		 |$LN20@OALContext@23|
  0012c	00000000	 DCD         |g_pIntr|
  00130		 |$LN21@OALContext@23|
  00130	00000000	 DCD         |g_pSMSRegs|
  00134		 |$LN22@OALContext@23|
  00134	00000000	 DCD         |s_pDmaController|
  00138		 |$LN23@OALContext@23|
  00138	00000000	 DCD         |s_intcContext|
  0013c		 |$LN24@OALContext@23|
  0013c	00000000	 DCD         |g_ffContextSaveMask|
  00140		 |$M50362|

			 ENDP  ; |OALContextSave|

	EXPORT	|OALContextRestore|
	IMPORT	|g_dwCpuFamily|
	IMPORT	|PrcmRestoreDomain|
	IMPORT	|PrcmDomainClearReset|

  00000			 AREA	 |.pdata|, PDATA
|$T50389| DCD	|$LN18@OALContext@24|
	DCD	0x40006a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALContextRestore| PROC

; 3106 : {

  00000		 |$LN18@OALContext@24|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M50386|
  00004	e1a06002	 mov         r6, r2

; 3107 :     if(((prevMpuState & POWERSTATE_MASK) == POWERSTATE_OFF) ||
; 3108 :       (((prevMpuState & POWERSTATE_MASK) == POWERSTATE_RETENTION) &&
; 3109 :        ((prevMpuState & LOGICRETSTATE_MASK) == LOGICRETSTATE_LOGICOFF_DOMAINRET)))

  00008	e59f7194	 ldr         r7, [pc, #0x194]
  0000c	e59f518c	 ldr         r5, [pc, #0x18C]
  00010	e2103003	 ands        r3, r0, #3
  00014	0a000003	 beq         |$LN8@OALContext@24|
  00018	e3530001	 cmp         r3, #1
  0001c	1a000004	 bne         |$LN9@OALContext@24|
  00020	e3100004	 tst         r0, #4
  00024	1a000002	 bne         |$LN9@OALContext@24|
  00028		 |$LN8@OALContext@24|

; 3110 : 	{
; 3111 : 	    // ROMCODE restores the CM_AUTOIDLE_PLL register with value in scratchpad when
; 3112 : 	    // MPU is OFF. Since scratch pad value is set to 0 to reduce the wakeup
; 3113 : 	    // latency for off mode, restore CM_AUTOIDLE_PLL register with actual value.
; 3114 : 	    OUTREG32(&g_PrcmCm.pOMAP_CLOCK_CONTROL_CM->CM_AUTOIDLE_PLL,
; 3115 : 	                                   s_clkCtrlCmContext.CM_AUTOIDLE_PLL);

  00028	e5950034	 ldr         r0, [r5, #0x34]
  0002c	e5973030	 ldr         r3, [r7, #0x30]
  00030	e5803030	 str         r3, [r0, #0x30]
  00034		 |$LN9@OALContext@24|

; 3116 : 	}
; 3117 : 	/* WorkAround for EHCI/USBHost: Somehow touching the ICLKEN_WKUP register is causing USBHost 
; 3118 : 	     power domain to be up reliably */
; 3119 :     if(((prevCoreState & POWERSTATE_MASK) == POWERSTATE_OFF) ||
; 3120 :       (((prevCoreState & POWERSTATE_MASK) == POWERSTATE_RETENTION) &&
; 3121 :        ((prevCoreState & LOGICRETSTATE_MASK) == LOGICRETSTATE_LOGICOFF_DOMAINRET)))

  00034	e2114003	 ands        r4, r1, #3
  00038	0a000003	 beq         |$LN6@OALContext@24|
  0003c	e3540001	 cmp         r4, #1
  00040	1a000030	 bne         |$LN4@OALContext@24|
  00044	e3110004	 tst         r1, #4
  00048	1a00002e	 bne         |$LN4@OALContext@24|
  0004c		 |$LN6@OALContext@24|

; 3122 :         {
; 3123 :         	//UNDONE: should we need to do this all the time ?
; 3124 :             PrcmDomainClearReset();

  0004c	eb000000	 bl          PrcmDomainClearReset

; 3125 :         
; 3126 :             // Restore the PRCM Registers from shadow variable
; 3127 :             OALContextRestorePRCM();

  00050	eb000000	 bl          OALContextRestorePRCM

; 3128 :         
; 3129 :             // Handle CORE OFF case
; 3130 :             if((prevCoreState & POWERSTATE_MASK) == POWERSTATE_OFF)

  00054	e3540000	 cmp         r4, #0
  00058	1a00002a	 bne         |$LN4@OALContext@24|

; 3131 :         	{
; 3132 :                 // Restore the SMS Registers from shadow variable
; 3133 :                 OALContextRestoreSMS ();

  0005c	e59f3138	 ldr         r3, [pc, #0x138]
  00060	e5972088	 ldr         r2, [r7, #0x88]
  00064	e5933000	 ldr         r3, [r3]
  00068	e5832010	 str         r2, [r3, #0x10]

; 3134 :         
; 3135 :                 // Restore the VRFB Registers from shadow variable
; 3136 :                 OALContextRestoreVRFB ();

  0006c	eb000000	 bl          OALContextRestoreVRFB

; 3137 :         
; 3138 :                 // Restore the GPMC Registers from shadow variable
; 3139 :                 OALContextRestoreGPMC ();

  00070	eb000000	 bl          OALContextRestoreGPMC

; 3140 :         
; 3141 :                 // Restore the SCM Registers from shadow variable
; 3142 :                 OALContextRestoreSCM ();

  00074	eb000000	 bl          OALContextRestoreSCM

; 3143 :         
; 3144 :                 // Restore the MPU IC Registers from shadow variable
; 3145 :                 OALContextRestoreINTC ();

  00078	eb000000	 bl          OALContextRestoreINTC

; 3146 :         
; 3147 :                 // Restore DMA context
; 3148 :                 OALContextRestoreDMA ();		

  0007c	e59f3114	 ldr         r3, [pc, #0x114]
  00080	e59f110c	 ldr         r1, [pc, #0x10C]

; 3149 :         
; 3150 :                 // restore CM registers for all power domains
; 3151 :                 PrcmRestoreDomain(POWERDOMAIN_PERIPHERAL);

  00084	e3a00002	 mov         r0, #2
  00088	e5932000	 ldr         r2, [r3]
  0008c	e5913078	 ldr         r3, [r1, #0x78]
  00090	e5823078	 str         r3, [r2, #0x78]
  00094	e591302c	 ldr         r3, [r1, #0x2C]
  00098	e582302c	 str         r3, [r2, #0x2C]
  0009c	e5913018	 ldr         r3, [r1, #0x18]
  000a0	e5823018	 str         r3, [r2, #0x18]
  000a4	e591301c	 ldr         r3, [r1, #0x1C]
  000a8	e582301c	 str         r3, [r2, #0x1C]
  000ac	e5913020	 ldr         r3, [r1, #0x20]
  000b0	e5823020	 str         r3, [r2, #0x20]
  000b4	e5913024	 ldr         r3, [r1, #0x24]
  000b8	e5823024	 str         r3, [r2, #0x24]
  000bc	eb000000	 bl          PrcmRestoreDomain

; 3152 :                 PrcmRestoreDomain(POWERDOMAIN_DSS);

  000c0	e3a00006	 mov         r0, #6
  000c4	eb000000	 bl          PrcmRestoreDomain

; 3153 :                 PrcmRestoreDomain(POWERDOMAIN_CAMERA);

  000c8	e3a00009	 mov         r0, #9
  000cc	eb000000	 bl          PrcmRestoreDomain

; 3154 :                 PrcmRestoreDomain(POWERDOMAIN_USBHOST);

  000d0	e3a00003	 mov         r0, #3
  000d4	eb000000	 bl          PrcmRestoreDomain

; 3155 :                 PrcmRestoreDomain(POWERDOMAIN_SGX);

  000d8	e3a0000a	 mov         r0, #0xA
  000dc	eb000000	 bl          PrcmRestoreDomain

; 3156 :                 PrcmRestoreDomain(POWERDOMAIN_NEON);

  000e0	e3a00007	 mov         r0, #7
  000e4	eb000000	 bl          PrcmRestoreDomain

; 3157 :                 PrcmRestoreDomain(POWERDOMAIN_EMULATION);

  000e8	e3a00004	 mov         r0, #4
  000ec	eb000000	 bl          PrcmRestoreDomain

; 3158 :                 PrcmRestoreDomain(POWERDOMAIN_IVA2);

  000f0	e3a00008	 mov         r0, #8
  000f4	eb000000	 bl          PrcmRestoreDomain

; 3159 : 				
; 3160 : 		  // Workaround for 3730 VDD1/VDD2 drop to 0V issue, need to be re-visited 
; 3161 : 	         if(g_dwCpuFamily == CPU_FAMILY_DM37XX)

  000f8	e59f3090	 ldr         r3, [pc, #0x90]
  000fc	e5933000	 ldr         r3, [r3]
  00100	e3530001	 cmp         r3, #1

; 3162 :                     PrcmSetIVA2OffMode();

  00104	0b000000	 bleq        PrcmSetIVA2OffMode
  00108		 |$LN4@OALContext@24|

; 3163 :         	}
; 3164 :         }
; 3165 : 
; 3166 :     if (s_bCoreOffModeSet)

  00108	e59f007c	 ldr         r0, [pc, #0x7C]
  0010c	e5903000	 ldr         r3, [r0]
  00110	e3530000	 cmp         r3, #0
  00114	0a000012	 beq         |$LN3@OALContext@24|

; 3167 : 	{
; 3168 :         // enable GPIO ICLKs
; 3169 :         SETREG32(&g_PrcmCm.pOMAP_PER_CM->CM_AUTOIDLE_PER, 0x3E000);

  00118	e5952008	 ldr         r2, [r5, #8]

; 3170 :         SETREG32(&g_PrcmCm.pOMAP_PER_CM->CM_ICLKEN_PER, 0x3E000);
; 3171 :  	 SETREG32(&g_PrcmCm.pOMAP_PER_CM->CM_FCLKEN_PER, 0x3E000);		
; 3172 : 
; 3173 :         // Errata 2.23. GPIO is driving random values when device is coming 
; 3174 :         // back from OFF mode.
; 3175 :         // Set PER domain sleep dependency with Wkup to avoid GPIO glitch
; 3176 :         CLRREG32(&g_PrcmPrm.pOMAP_PER_PRM->PM_WKDEP_PER, SLEEPDEP_EN_WKUP);

  0011c	e59f1064	 ldr         r1, [pc, #0x64]

; 3177 :         
; 3178 :         s_bCoreOffModeSet = FALSE;

  00120	e3a0e000	 mov         lr, #0
  00124	e5923030	 ldr         r3, [r2, #0x30]
  00128	e580e000	 str         lr, [r0]
  0012c	e3833a3e	 orr         r3, r3, #0x3E, 20
  00130	e5823030	 str         r3, [r2, #0x30]
  00134	e5952008	 ldr         r2, [r5, #8]
  00138	e5923010	 ldr         r3, [r2, #0x10]
  0013c	e3833a3e	 orr         r3, r3, #0x3E, 20
  00140	e5823010	 str         r3, [r2, #0x10]
  00144	e5952008	 ldr         r2, [r5, #8]
  00148	e5923000	 ldr         r3, [r2]
  0014c	e3833a3e	 orr         r3, r3, #0x3E, 20
  00150	e5823000	 str         r3, [r2]
  00154	e5912008	 ldr         r2, [r1, #8]
  00158	e59230c8	 ldr         r3, [r2, #0xC8]
  0015c	e3c33010	 bic         r3, r3, #0x10
  00160	e58230c8	 str         r3, [r2, #0xC8]
  00164		 |$LN3@OALContext@24|

; 3179 : 	}
; 3180 : 
; 3181 :     if(((prevPerState & POWERSTATE_MASK) == POWERSTATE_OFF) ||
; 3182 :       (((prevPerState & POWERSTATE_MASK) == POWERSTATE_RETENTION) &&
; 3183 :        ((prevPerState & LOGICRETSTATE_MASK) == LOGICRETSTATE_LOGICOFF_DOMAINRET)))

  00164	e2163003	 ands        r3, r6, #3
  00168	0a000003	 beq         |$LN1@OALContext@24|
  0016c	e3530001	 cmp         r3, #1
  00170	1a000002	 bne         |$LN2@OALContext@24|
  00174	e3160004	 tst         r6, #4
  00178	1a000000	 bne         |$LN2@OALContext@24|
  0017c		 |$LN1@OALContext@24|

; 3184 : 	{
; 3185 :         // restore GPIO registers
; 3186 :         OALContextRestoreGPIO();

  0017c	eb000000	 bl          OALContextRestoreGPIO
  00180		 |$LN2@OALContext@24|

; 3187 : 	}
; 3188 :  }

  00180	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$LN19@OALContext@24|
  00188		 |$LN20@OALContext@24|
  00188	00000000	 DCD         |g_PrcmPrm|
  0018c		 |$LN21@OALContext@24|
  0018c	00000000	 DCD         |s_bCoreOffModeSet|
  00190		 |$LN22@OALContext@24|
  00190	00000000	 DCD         |g_dwCpuFamily|
  00194		 |$LN23@OALContext@24|
  00194	00000000	 DCD         |s_dmaController|
  00198		 |$LN24@OALContext@24|
  00198	00000000	 DCD         |s_pDmaController|
  0019c		 |$LN25@OALContext@24|
  0019c	00000000	 DCD         |g_pSMSRegs|
  001a0		 |$LN26@OALContext@24|
  001a0	00000000	 DCD         |g_PrcmCm|
  001a4		 |$LN27@OALContext@24|
  001a4	00000000	 DCD         |s_clkCtrlCmContext|
  001a8		 |$M50387|

			 ENDP  ; |OALContextRestore|

	EXPORT	|OutShadowReg32|

  00000			 AREA	 |.pdata|, PDATA
|$T50410| DCD	|$LN14@OutShadowR|
	DCD	0x40003501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OutShadowReg32| PROC

; 3203 : {

  00000		 |$LN14@OutShadowR|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M50407|
  00004	e1a0e002	 mov         lr, r2
  00008	e3a03312	 mov         r3, #0x12, 6

; 3204 :     UINT32 *pShadowRegBase = NULL;
; 3205 : 
; 3206 :     // change the byte offset to 4 bytes offset
; 3207 :     offset = offset/4;
; 3208 : 
; 3209 :     switch(deviceGroup)

  0000c	e3833b12	 orr         r3, r3, #0x12, 22
  00010	e1500003	 cmp         r0, r3
  00014	e1a01121	 mov         r1, r1, lsr #2
  00018	0a000020	 beq         |$LN6@OutShadowR|
  0001c	e3a03312	 mov         r3, #0x12, 6
  00020	e3833c4a	 orr         r3, r3, #0x4A, 24
  00024	e1500003	 cmp         r0, r3
  00028	0a000018	 beq         |$LN4@OutShadowR|
  0002c	e3a03312	 mov         r3, #0x12, 6
  00030	e3833b13	 orr         r3, r3, #0x13, 22
  00034	e1500003	 cmp         r0, r3
  00038	0a00000f	 beq         |$LN5@OutShadowR|
  0003c	e3a03312	 mov         r3, #0x12, 6
  00040	e3833c4d	 orr         r3, r3, #0x4D, 24
  00044	e1500003	 cmp         r0, r3
  00048	0a000007	 beq         |$LN3@OutShadowR|
  0004c	e3a03312	 mov         r3, #0x12, 6
  00050	e3833c52	 orr         r3, r3, #0x52, 24
  00054	e1500003	 cmp         r0, r3
  00058	1a000016	 bne         |$LN7@OutShadowR|

; 3255 : 
; 3256 :         case OMAP_PRCM_GLOBAL_CM_REGS_PA:
; 3257 :             pShadowRegBase = (UINT32 *)&s_globalCmContext;
; 3258 :             pShadowRegBase += offset;
; 3259 : 
; 3260 :             // Update the register content
; 3261 :             OUTREG32(((UINT32*)g_PrcmCm.pOMAP_GLOBAL_CM+offset), value);

  0005c	e59f3060	 ldr         r3, [pc, #0x60]

; 3262 : 
; 3263 :             // Update the shadow content.
; 3264 :             *pShadowRegBase = value;

  00060	e59f2068	 ldr         r2, [pc, #0x68]
  00064	e593302c	 ldr         r3, [r3, #0x2C]

; 3265 :             break;

  00068	ea00000f	 b           |$LN11@OutShadowR|
  0006c		 |$LN3@OutShadowR|

; 3243 : 
; 3244 : 
; 3245 :         case OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA:
; 3246 :             pShadowRegBase = (UINT32 *)&s_clkCtrlCmContext;
; 3247 :             pShadowRegBase += offset;
; 3248 : 
; 3249 :             // Update the register content
; 3250 :             OUTREG32(((UINT32*)g_PrcmCm.pOMAP_CLOCK_CONTROL_CM+offset), value);

  0006c	e59f3050	 ldr         r3, [pc, #0x50]

; 3251 : 
; 3252 :             // Update the shadow content.
; 3253 :             *pShadowRegBase = value;

  00070	e59f2054	 ldr         r2, [pc, #0x54]
  00074	e5933034	 ldr         r3, [r3, #0x34]

; 3254 :             break;

  00078	ea00000b	 b           |$LN11@OutShadowR|
  0007c		 |$LN5@OutShadowR|

; 3220 :             break;
; 3221 : 
; 3222 :         case OMAP_PRCM_WKUP_CM_REGS_PA:
; 3223 :             pShadowRegBase = (UINT32 *)&s_wkupCmContext;
; 3224 :             pShadowRegBase += offset;
; 3225 : 
; 3226 :             // Update the register content
; 3227 :             OUTREG32(((UINT32*)g_PrcmCm.pOMAP_WKUP_CM+offset), value);

  0007c	e59f3040	 ldr         r3, [pc, #0x40]

; 3228 : 
; 3229 :             // Update the shadow content.
; 3230 :             *pShadowRegBase = value;

  00080	e59f2038	 ldr         r2, [pc, #0x38]
  00084	e5933000	 ldr         r3, [r3]
  00088	e2822014	 add         r2, r2, #0x14

; 3231 :             break;

  0008c	ea000006	 b           |$LN11@OutShadowR|
  00090		 |$LN4@OutShadowR|

; 3232 : 
; 3233 :         case OMAP_PRCM_CORE_CM_REGS_PA:
; 3234 :             pShadowRegBase = (UINT32 *)&s_coreCmContext;
; 3235 :             pShadowRegBase += offset;
; 3236 : 
; 3237 :             // Update the register content
; 3238 :             OUTREG32(((UINT32*)g_PrcmCm.pOMAP_CORE_CM+offset), value);

  00090	e59f302c	 ldr         r3, [pc, #0x2C]

; 3239 : 
; 3240 :             // Update the shadow content.
; 3241 :             *pShadowRegBase = value;

  00094	e59f202c	 ldr         r2, [pc, #0x2C]
  00098	e5933004	 ldr         r3, [r3, #4]

; 3242 :             break;

  0009c	ea000002	 b           |$LN11@OutShadowR|
  000a0		 |$LN6@OutShadowR|

; 3210 :         {
; 3211 :         case OMAP_PRCM_OCP_SYSTEM_CM_REGS_PA:
; 3212 :             pShadowRegBase = (UINT32 *)&s_ocpSysCmContext;
; 3213 :             pShadowRegBase += offset;
; 3214 : 
; 3215 :             // Update the register content
; 3216 :             OUTREG32(((UINT32*)g_PrcmCm.pOMAP_OCP_SYSTEM_CM+offset), value);

  000a0	e59f301c	 ldr         r3, [pc, #0x1C]

; 3217 : 
; 3218 :             // Update the shadow content.
; 3219 :             *pShadowRegBase = value;

  000a4	e59f2014	 ldr         r2, [pc, #0x14]
  000a8	e5933030	 ldr         r3, [r3, #0x30]
  000ac		 |$LN11@OutShadowR|
  000ac	e0833101	 add         r3, r3, r1, lsl #2
  000b0	e583e000	 str         lr, [r3]
  000b4	e782e101	 str         lr, [r2, +r1, lsl #2]
  000b8		 |$LN7@OutShadowR|

; 3266 : 
; 3267 : 
; 3268 :         default:
; 3269 :             break;
; 3270 :         }
; 3271 : }

  000b8	e49de004	 ldr         lr, [sp], #4
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN15@OutShadowR|
  000c0		 |$LN16@OutShadowR|
  000c0	00000000	 DCD         |s_ocpSysCmContext|
  000c4		 |$LN17@OutShadowR|
  000c4	00000000	 DCD         |g_PrcmCm|
  000c8		 |$LN18@OutShadowR|
  000c8	00000000	 DCD         |s_coreCmContext|
  000cc		 |$LN19@OutShadowR|
  000cc	00000000	 DCD         |s_clkCtrlCmContext|
  000d0		 |$LN20@OutShadowR|
  000d0	00000000	 DCD         |s_globalCmContext|
  000d4		 |$M50408|

			 ENDP  ; |OutShadowReg32|

	EXPORT	|SetShadowReg32|

  00000			 AREA	 |.pdata|, PDATA
|$T50433| DCD	|$LN14@SetShadowR|
	DCD	0x40005201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetShadowReg32| PROC

; 3286 : {

  00000		 |$LN14@SetShadowR|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M50430|
  00004	e1a04002	 mov         r4, r2
  00008	e3a03312	 mov         r3, #0x12, 6

; 3287 :     UINT32 *pShadowRegBase = NULL;
; 3288 : 
; 3289 :     // change the byte offset to 4 bytes offset
; 3290 :     offset = offset/4;
; 3291 : 
; 3292 :     switch(deviceGroup)

  0000c	e3833b12	 orr         r3, r3, #0x12, 22
  00010	e1500003	 cmp         r0, r3
  00014	e1a02121	 mov         r2, r1, lsr #2
  00018	0a000038	 beq         |$LN6@SetShadowR|
  0001c	e3a03312	 mov         r3, #0x12, 6
  00020	e3833c4a	 orr         r3, r3, #0x4A, 24
  00024	e1500003	 cmp         r0, r3
  00028	0a00002b	 beq         |$LN4@SetShadowR|
  0002c	e3a03312	 mov         r3, #0x12, 6
  00030	e3833b13	 orr         r3, r3, #0x13, 22
  00034	e1500003	 cmp         r0, r3
  00038	0a000019	 beq         |$LN5@SetShadowR|
  0003c	e3a03312	 mov         r3, #0x12, 6
  00040	e3833c4d	 orr         r3, r3, #0x4D, 24
  00044	e1500003	 cmp         r0, r3
  00048	0a00000c	 beq         |$LN3@SetShadowR|
  0004c	e3a03312	 mov         r3, #0x12, 6
  00050	e3833c52	 orr         r3, r3, #0x52, 24
  00054	e1500003	 cmp         r0, r3
  00058	1a000033	 bne         |$LN7@SetShadowR|

; 3338 : 
; 3339 :         case OMAP_PRCM_GLOBAL_CM_REGS_PA:
; 3340 :             pShadowRegBase = (UINT32 *)&s_globalCmContext;
; 3341 :             pShadowRegBase += offset;
; 3342 : 
; 3343 :             // Update the register content
; 3344 :             SETREG32(((UINT32*)g_PrcmCm.pOMAP_GLOBAL_CM+offset), value);

  0005c	e59f10d4	 ldr         r1, [pc, #0xD4]
  00060	e1a0e102	 mov         lr, r2, lsl #2
  00064	e59f00d8	 ldr         r0, [pc, #0xD8]
  00068	e591202c	 ldr         r2, [r1, #0x2C]
  0006c	e79e3002	 ldr         r3, [lr, +r2]
  00070	e1833004	 orr         r3, r3, r4
  00074	e78e3002	 str         r3, [lr, +r2]

; 3345 : 
; 3346 :             // Update the shadow content.
; 3347 :             *pShadowRegBase = (INREG32((UINT32*)g_PrcmCm.pOMAP_GLOBAL_CM+offset)|value);

  00078	e591302c	 ldr         r3, [r1, #0x2C]

; 3348 :             break;

  0007c	ea000027	 b           |$LN11@SetShadowR|
  00080		 |$LN3@SetShadowR|

; 3326 : 
; 3327 : 
; 3328 :         case OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA:
; 3329 :             pShadowRegBase = (UINT32 *)&s_clkCtrlCmContext;
; 3330 :             pShadowRegBase += offset;
; 3331 : 
; 3332 :             // Update the register content
; 3333 :             SETREG32(((UINT32*)g_PrcmCm.pOMAP_CLOCK_CONTROL_CM+offset), value);

  00080	e59f10b0	 ldr         r1, [pc, #0xB0]
  00084	e1a0e102	 mov         lr, r2, lsl #2
  00088	e59f00b0	 ldr         r0, [pc, #0xB0]
  0008c	e5912034	 ldr         r2, [r1, #0x34]
  00090	e79e3002	 ldr         r3, [lr, +r2]
  00094	e1833004	 orr         r3, r3, r4
  00098	e78e3002	 str         r3, [lr, +r2]

; 3334 : 
; 3335 :             // Update the shadow content.
; 3336 :             *pShadowRegBase = (INREG32((UINT32*)g_PrcmCm.pOMAP_CLOCK_CONTROL_CM+offset)|value);

  0009c	e5913034	 ldr         r3, [r1, #0x34]

; 3337 :             break;

  000a0	ea00001e	 b           |$LN11@SetShadowR|
  000a4		 |$LN5@SetShadowR|

; 3303 :             break;
; 3304 : 
; 3305 :         case OMAP_PRCM_WKUP_CM_REGS_PA:
; 3306 :             pShadowRegBase = (UINT32 *)&s_wkupCmContext;
; 3307 :             pShadowRegBase += offset;
; 3308 : 
; 3309 :             // Update the register content
; 3310 :             SETREG32(((UINT32*)g_PrcmCm.pOMAP_WKUP_CM+offset), value);

  000a4	e59f008c	 ldr         r0, [pc, #0x8C]
  000a8	e59f3084	 ldr         r3, [pc, #0x84]
  000ac	e1a0e102	 mov         lr, r2, lsl #2
  000b0	e5902000	 ldr         r2, [r0]
  000b4	e2831014	 add         r1, r3, #0x14
  000b8	e79e3002	 ldr         r3, [lr, +r2]
  000bc	e1833004	 orr         r3, r3, r4
  000c0	e78e3002	 str         r3, [lr, +r2]

; 3311 : 
; 3312 :             // Update the shadow content.
; 3313 :             *pShadowRegBase = (INREG32((UINT32*)g_PrcmCm.pOMAP_WKUP_CM+offset)|value);

  000c4	e5903000	 ldr         r3, [r0]
  000c8	e79e3003	 ldr         r3, [lr, +r3]
  000cc	e1833004	 orr         r3, r3, r4
  000d0	e7ae3001	 str         r3, [lr, +r1]!

; 3349 : 
; 3350 :         default:
; 3351 :             break;
; 3352 :         }
; 3353 : }

  000d4	e8bd4010	 ldmia       sp!, {r4, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN4@SetShadowR|

; 3314 :             break;
; 3315 : 
; 3316 :         case OMAP_PRCM_CORE_CM_REGS_PA:
; 3317 :             pShadowRegBase = (UINT32 *)&s_coreCmContext;
; 3318 :             pShadowRegBase += offset;
; 3319 : 
; 3320 :             // Update the register content
; 3321 :             SETREG32(((UINT32*)g_PrcmCm.pOMAP_CORE_CM+offset), value);

  000dc	e59f1054	 ldr         r1, [pc, #0x54]
  000e0	e1a0e102	 mov         lr, r2, lsl #2
  000e4	e59f0050	 ldr         r0, [pc, #0x50]
  000e8	e5912004	 ldr         r2, [r1, #4]
  000ec	e79e3002	 ldr         r3, [lr, +r2]
  000f0	e1833004	 orr         r3, r3, r4
  000f4	e78e3002	 str         r3, [lr, +r2]

; 3322 : 
; 3323 :             // Update the shadow content.
; 3324 :             *pShadowRegBase = (INREG32((UINT32*)g_PrcmCm.pOMAP_CORE_CM+offset)|value);

  000f8	e5913004	 ldr         r3, [r1, #4]

; 3325 :             break;

  000fc	ea000007	 b           |$LN11@SetShadowR|
  00100		 |$LN6@SetShadowR|

; 3293 :         {
; 3294 :         case OMAP_PRCM_OCP_SYSTEM_CM_REGS_PA:
; 3295 :             pShadowRegBase = (UINT32 *)&s_ocpSysCmContext;
; 3296 :             pShadowRegBase += offset;
; 3297 : 
; 3298 :             // Update the register content
; 3299 :             SETREG32(((UINT32*)g_PrcmCm.pOMAP_OCP_SYSTEM_CM+offset), value);

  00100	e59f1030	 ldr         r1, [pc, #0x30]
  00104	e1a0e102	 mov         lr, r2, lsl #2
  00108	e59f0024	 ldr         r0, [pc, #0x24]
  0010c	e5912030	 ldr         r2, [r1, #0x30]
  00110	e79e3002	 ldr         r3, [lr, +r2]
  00114	e1833004	 orr         r3, r3, r4
  00118	e78e3002	 str         r3, [lr, +r2]

; 3300 : 
; 3301 :             // Update the shadow content.
; 3302 :             *pShadowRegBase = (INREG32((UINT32*)g_PrcmCm.pOMAP_OCP_SYSTEM_CM+offset)|value);

  0011c	e5913030	 ldr         r3, [r1, #0x30]
  00120		 |$LN11@SetShadowR|
  00120	e79e3003	 ldr         r3, [lr, +r3]
  00124	e1833004	 orr         r3, r3, r4
  00128	e7ae3000	 str         r3, [lr, +r0]!
  0012c		 |$LN7@SetShadowR|

; 3349 : 
; 3350 :         default:
; 3351 :             break;
; 3352 :         }
; 3353 : }

  0012c	e8bd4010	 ldmia       sp!, {r4, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$LN15@SetShadowR|
  00134		 |$LN16@SetShadowR|
  00134	00000000	 DCD         |s_ocpSysCmContext|
  00138		 |$LN17@SetShadowR|
  00138	00000000	 DCD         |g_PrcmCm|
  0013c		 |$LN18@SetShadowR|
  0013c	00000000	 DCD         |s_coreCmContext|
  00140		 |$LN19@SetShadowR|
  00140	00000000	 DCD         |s_clkCtrlCmContext|
  00144		 |$LN20@SetShadowR|
  00144	00000000	 DCD         |s_globalCmContext|
  00148		 |$M50431|

			 ENDP  ; |SetShadowReg32|

	EXPORT	|OALPowerInit|
	EXPORT	|??_C@_1CE@IPHHBGKL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@NIHPAAL@?$AA?5?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAd?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@BHHHHBMP@?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAd?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@EGLHOBFH@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|PrcmClockSetExternalClockRequestMode|
	IMPORT	|PrcmVoltSetControlPolarity|
	IMPORT	|PrcmVoltSetAutoControl|
	IMPORT	|PrcmClockSetSystemClockSetupTime|
	IMPORT	|OALMux_InitMuxTable|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|OALI2CInit|
	IMPORT	|PrcmInit|
	IMPORT	|OEMEnableDebugOutput|
	IMPORT	|dwOEMPRCMCLKSSetupTime|

  00000			 AREA	 |.pdata|, PDATA
|$T50506| DCD	|$LN53@OALPowerIn|
	DCD	0x4001cc02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@IPHHBGKL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@NIHPAAL@?$AA?5?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAd?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN@| DCB " "
	DCB	0x0, "S", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "b", 0x0, "u", 0x0, "g"
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "a"
	DCB	0x0, "g", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@BHHHHBMP@?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAd?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAd@| DCB " "
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "b"
	DCB	0x0, "u", 0x0, "g", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "s", 0x0, " "
	DCB	0x0, "d", 0x0, "u", 0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "P", 0x0, "R", 0x0, "C", 0x0, "M", 0x0, " "
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@EGLHOBFH@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPowerInit| PROC

; 1733 : { 

  00000		 |$LN53@OALPowerIn|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M50503|

; 1734 :     PrcmInitInfo info;
; 1735 :     OMAP_SYSC_INTERFACE_REGS   *pSyscIF;
; 1736 :     OALMSG(OAL_FUNC, (L"+OALPowerInit()\r\n"));

  00008	e59f671c	 ldr         r6, [pc, #0x71C]
  0000c	e5963440	 ldr         r3, [r6, #0x440]
  00010	e3130004	 tst         r3, #4
  00014	159f070c	 ldrne       r0, [pc, #0x70C]
  00018	1b000000	 blne        NKDbgPrintfW
  0001c	e3a0a312	 mov         r10, #0x12, 6

; 1737 : 
; 1738 :     pSyscIF                             = OALPAtoUA(OMAP_SYSC_INTERFACE_REGS_PA);

  00020	e38a0a02	 orr         r0, r10, #2, 20
  00024	e3a01000	 mov         r1, #0
  00028	eb000000	 bl          OALPAtoVA

; 1739 :     g_pGPMCRegs                         = OALPAtoUA(OMAP_GPMC_REGS_PA);

  0002c	e3a01000	 mov         r1, #0
  00030	e3a0046e	 mov         r0, #0x6E, 8
  00034	eb000000	 bl          OALPAtoVA
  00038	e59f76e4	 ldr         r7, [pc, #0x6E4]

; 1740 :     g_pSDRCRegs                         = OALPAtoUA(OMAP_SDRC_REGS_PA);

  0003c	e3a01000	 mov         r1, #0
  00040	e5870000	 str         r0, [r7]
  00044	e3a0046d	 mov         r0, #0x6D, 8
  00048	eb000000	 bl          OALPAtoVA
  0004c	e59f86cc	 ldr         r8, [pc, #0x6CC]

; 1741 :     g_pSMSRegs                          = OALPAtoUA(OMAP_SMS_REGS_PA);

  00050	e3a01000	 mov         r1, #0
  00054	e5880000	 str         r0, [r8]
  00058	e3a0031b	 mov         r0, #0x1B, 6
  0005c	eb000000	 bl          OALPAtoVA
  00060	e59f96b4	 ldr         r9, [pc, #0x6B4]
  00064	e3a0331b	 mov         r3, #0x1B, 6

; 1742 :     g_pVRFBRegs                         = OALPAtoUA(OMAP_VRFB_REGS_PA);

  00068	e3a01000	 mov         r1, #0
  0006c	e5890000	 str         r0, [r9]
  00070	e3830f59	 orr         r0, r3, #0x59, 30
  00074	eb000000	 bl          OALPAtoVA
  00078	e59f3698	 ldr         r3, [pc, #0x698]
  0007c	e1a02000	 mov         r2, r0

; 1743 :     g_pSysCtrlGenReg                    = OALPAtoUA(OMAP_SYSC_GENERAL_REGS_PA);

  00080	e59f068c	 ldr         r0, [pc, #0x68C]
  00084	e3a01000	 mov         r1, #0
  00088	e5832000	 str         r2, [r3]
  0008c	eb000000	 bl          OALPAtoVA
  00090	e59f3678	 ldr         r3, [pc, #0x678]
  00094	e1a02000	 mov         r2, r0

; 1744 : 
; 1745 :     g_PrcmPrm.pOMAP_GLOBAL_PRM          = OALPAtoUA(OMAP_PRCM_GLOBAL_PRM_REGS_PA);

  00098	e59f066c	 ldr         r0, [pc, #0x66C]
  0009c	e3a01000	 mov         r1, #0
  000a0	e5832000	 str         r2, [r3]
  000a4	eb000000	 bl          OALPAtoVA
  000a8	e59f5658	 ldr         r5, [pc, #0x658]
  000ac	e1a03000	 mov         r3, r0

; 1746 :     g_PrcmPrm.pOMAP_OCP_SYSTEM_PRM      = OALPAtoUA(OMAP_PRCM_OCP_SYSTEM_PRM_REGS_PA);

  000b0	e59f064c	 ldr         r0, [pc, #0x64C]
  000b4	e3a01000	 mov         r1, #0
  000b8	e585302c	 str         r3, [r5, #0x2C]
  000bc	eb000000	 bl          OALPAtoVA
  000c0	e1a03000	 mov         r3, r0

; 1747 :     g_PrcmPrm.pOMAP_CLOCK_CONTROL_PRM   = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_PRM_REGS_PA);

  000c4	e59f0634	 ldr         r0, [pc, #0x634]
  000c8	e3a01000	 mov         r1, #0
  000cc	e5853030	 str         r3, [r5, #0x30]
  000d0	eb000000	 bl          OALPAtoVA
  000d4	e1a03000	 mov         r3, r0

; 1748 :     g_PrcmPrm.pOMAP_WKUP_PRM            = OALPAtoUA(OMAP_PRCM_WKUP_PRM_REGS_PA);

  000d8	e59f061c	 ldr         r0, [pc, #0x61C]
  000dc	e3a01000	 mov         r1, #0
  000e0	e5853034	 str         r3, [r5, #0x34]
  000e4	eb000000	 bl          OALPAtoVA
  000e8	e1a03000	 mov         r3, r0

; 1749 :     g_PrcmPrm.pOMAP_PER_PRM             = OALPAtoUA(OMAP_PRCM_PER_PRM_REGS_PA);

  000ec	e59f0604	 ldr         r0, [pc, #0x604]
  000f0	e3a01000	 mov         r1, #0
  000f4	e5853000	 str         r3, [r5]
  000f8	eb000000	 bl          OALPAtoVA
  000fc	e1a03000	 mov         r3, r0

; 1750 :     g_PrcmPrm.pOMAP_CORE_PRM            = OALPAtoUA(OMAP_PRCM_CORE_PRM_REGS_PA);    

  00100	e59f05ec	 ldr         r0, [pc, #0x5EC]
  00104	e3a01000	 mov         r1, #0
  00108	e5853008	 str         r3, [r5, #8]
  0010c	eb000000	 bl          OALPAtoVA
  00110	e1a03000	 mov         r3, r0

; 1751 :     g_PrcmPrm.pOMAP_MPU_PRM             = OALPAtoUA(OMAP_PRCM_MPU_PRM_REGS_PA);

  00114	e59f05d4	 ldr         r0, [pc, #0x5D4]
  00118	e3a01000	 mov         r1, #0
  0011c	e5853004	 str         r3, [r5, #4]
  00120	eb000000	 bl          OALPAtoVA
  00124	e1a03000	 mov         r3, r0

; 1752 :     g_PrcmPrm.pOMAP_IVA2_PRM            = OALPAtoUA(OMAP_PRCM_IVA2_PRM_REGS_PA);

  00128	e59f05bc	 ldr         r0, [pc, #0x5BC]
  0012c	e3a01000	 mov         r1, #0
  00130	e5853014	 str         r3, [r5, #0x14]
  00134	eb000000	 bl          OALPAtoVA
  00138	e1a03000	 mov         r3, r0

; 1753 :     g_PrcmPrm.pOMAP_DSS_PRM             = OALPAtoUA(OMAP_PRCM_DSS_PRM_REGS_PA);

  0013c	e59f05a4	 ldr         r0, [pc, #0x5A4]
  00140	e5853020	 str         r3, [r5, #0x20]
  00144	e3a01000	 mov         r1, #0
  00148	eb000000	 bl          OALPAtoVA
  0014c	e5850018	 str         r0, [r5, #0x18]

; 1754 :     g_PrcmPrm.pOMAP_SGX_PRM             = OALPAtoUA(OMAP_PRCM_SGX_PRM_REGS_PA);

  00150	e59f058c	 ldr         r0, [pc, #0x58C]
  00154	e3a01000	 mov         r1, #0
  00158	eb000000	 bl          OALPAtoVA
  0015c	e1a03000	 mov         r3, r0

; 1755 :     g_PrcmPrm.pOMAP_CAM_PRM             = OALPAtoUA(OMAP_PRCM_CAM_PRM_REGS_PA);    

  00160	e59f0578	 ldr         r0, [pc, #0x578]
  00164	e3a01000	 mov         r1, #0
  00168	e5853028	 str         r3, [r5, #0x28]
  0016c	eb000000	 bl          OALPAtoVA
  00170	e1a03000	 mov         r3, r0

; 1756 :     g_PrcmPrm.pOMAP_NEON_PRM            = OALPAtoUA(OMAP_PRCM_NEON_PRM_REGS_PA);

  00174	e59f0560	 ldr         r0, [pc, #0x560]
  00178	e3a01000	 mov         r1, #0
  0017c	e5853024	 str         r3, [r5, #0x24]
  00180	eb000000	 bl          OALPAtoVA
  00184	e1a03000	 mov         r3, r0

; 1757 :     g_PrcmPrm.pOMAP_EMU_PRM             = OALPAtoUA(OMAP_PRCM_EMU_PRM_REGS_PA);

  00188	e59f0548	 ldr         r0, [pc, #0x548]
  0018c	e3a01000	 mov         r1, #0
  00190	e585301c	 str         r3, [r5, #0x1C]
  00194	eb000000	 bl          OALPAtoVA
  00198	e1a03000	 mov         r3, r0

; 1758 :     g_PrcmPrm.pOMAP_USBHOST_PRM         = OALPAtoUA(OMAP_PRCM_USBHOST_PRM_REGS_PA);

  0019c	e59f0530	 ldr         r0, [pc, #0x530]
  001a0	e3a01000	 mov         r1, #0
  001a4	e5853010	 str         r3, [r5, #0x10]
  001a8	eb000000	 bl          OALPAtoVA
  001ac	e1a03000	 mov         r3, r0

; 1759 :     
; 1760 :     g_PrcmCm.pOMAP_GLOBAL_CM            = OALPAtoUA(OMAP_PRCM_GLOBAL_CM_REGS_PA);

  001b0	e38a0c52	 orr         r0, r10, #0x52, 24
  001b4	e3a01000	 mov         r1, #0
  001b8	e585300c	 str         r3, [r5, #0xC]
  001bc	eb000000	 bl          OALPAtoVA
  001c0	e59f4508	 ldr         r4, [pc, #0x508]

; 1761 :     g_PrcmCm.pOMAP_OCP_SYSTEM_CM        = OALPAtoUA(OMAP_PRCM_OCP_SYSTEM_CM_REGS_PA);

  001c4	e3a01000	 mov         r1, #0
  001c8	e584002c	 str         r0, [r4, #0x2C]
  001cc	e38a0b12	 orr         r0, r10, #0x12, 22
  001d0	eb000000	 bl          OALPAtoVA
  001d4	e1a03000	 mov         r3, r0

; 1762 :     g_PrcmCm.pOMAP_CLOCK_CONTROL_CM     = OALPAtoUA(OMAP_PRCM_CLOCK_CONTROL_CM_REGS_PA);

  001d8	e38a0c4d	 orr         r0, r10, #0x4D, 24
  001dc	e3a01000	 mov         r1, #0
  001e0	e5843030	 str         r3, [r4, #0x30]
  001e4	eb000000	 bl          OALPAtoVA
  001e8	e1a03000	 mov         r3, r0

; 1763 :     g_PrcmCm.pOMAP_WKUP_CM              = OALPAtoUA(OMAP_PRCM_WKUP_CM_REGS_PA);

  001ec	e38a0b13	 orr         r0, r10, #0x13, 22
  001f0	e3a01000	 mov         r1, #0
  001f4	e5843034	 str         r3, [r4, #0x34]
  001f8	eb000000	 bl          OALPAtoVA
  001fc	e1a03000	 mov         r3, r0

; 1764 :     g_PrcmCm.pOMAP_PER_CM               = OALPAtoUA(OMAP_PRCM_PER_CM_REGS_PA);

  00200	e38a0a05	 orr         r0, r10, #5, 20
  00204	e3a01000	 mov         r1, #0
  00208	e5843000	 str         r3, [r4]
  0020c	eb000000	 bl          OALPAtoVA
  00210	e1a03000	 mov         r3, r0

; 1765 :     g_PrcmCm.pOMAP_CORE_CM              = OALPAtoUA(OMAP_PRCM_CORE_CM_REGS_PA);

  00214	e38a0c4a	 orr         r0, r10, #0x4A, 24
  00218	e3a01000	 mov         r1, #0
  0021c	e5843008	 str         r3, [r4, #8]
  00220	eb000000	 bl          OALPAtoVA
  00224	e1a03000	 mov         r3, r0

; 1766 :     g_PrcmCm.pOMAP_MPU_CM               = OALPAtoUA(OMAP_PRCM_MPU_CM_REGS_PA);

  00228	e38a0c49	 orr         r0, r10, #0x49, 24
  0022c	e3a01000	 mov         r1, #0
  00230	e5843004	 str         r3, [r4, #4]
  00234	eb000000	 bl          OALPAtoVA
  00238	e1a03000	 mov         r3, r0

; 1767 :     g_PrcmCm.pOMAP_DSS_CM               = OALPAtoUA(OMAP_PRCM_DSS_CM_REGS_PA);

  0023c	e38a0c4e	 orr         r0, r10, #0x4E, 24
  00240	e3a01000	 mov         r1, #0
  00244	e5843014	 str         r3, [r4, #0x14]
  00248	eb000000	 bl          OALPAtoVA
  0024c	e1a03000	 mov         r3, r0

; 1768 :     g_PrcmCm.pOMAP_SGX_CM               = OALPAtoUA(OMAP_PRCM_SGX_CM_REGS_PA);

  00250	e38a0c4b	 orr         r0, r10, #0x4B, 24
  00254	e3a01000	 mov         r1, #0
  00258	e5843018	 str         r3, [r4, #0x18]
  0025c	eb000000	 bl          OALPAtoVA
  00260	e1a03000	 mov         r3, r0

; 1769 :     g_PrcmCm.pOMAP_CAM_CM               = OALPAtoUA(OMAP_PRCM_CAM_CM_REGS_PA);    

  00264	e38a0c4f	 orr         r0, r10, #0x4F, 24
  00268	e3a01000	 mov         r1, #0
  0026c	e5843028	 str         r3, [r4, #0x28]
  00270	eb000000	 bl          OALPAtoVA
  00274	e1a03000	 mov         r3, r0

; 1770 :     g_PrcmCm.pOMAP_NEON_CM              = OALPAtoUA(OMAP_PRCM_NEON_CM_REGS_PA);

  00278	e38a0c53	 orr         r0, r10, #0x53, 24
  0027c	e3a01000	 mov         r1, #0
  00280	e5843024	 str         r3, [r4, #0x24]
  00284	eb000000	 bl          OALPAtoVA
  00288	e1a03000	 mov         r3, r0

; 1771 :     g_PrcmCm.pOMAP_EMU_CM               = OALPAtoUA(OMAP_PRCM_EMU_CM_REGS_PA); 

  0028c	e3a01000	 mov         r1, #0
  00290	e38a0c51	 orr         r0, r10, #0x51, 24
  00294	e584301c	 str         r3, [r4, #0x1C]
  00298	eb000000	 bl          OALPAtoVA
  0029c	e1a03000	 mov         r3, r0

; 1772 :     g_PrcmCm.pOMAP_IVA2_CM              = OALPAtoUA(OMAP_PRCM_IVA2_CM_REGS_PA);

  002a0	e38a0901	 orr         r0, r10, #1, 18
  002a4	e3a01000	 mov         r1, #0
  002a8	e5843010	 str         r3, [r4, #0x10]
  002ac	eb000000	 bl          OALPAtoVA
  002b0	e1a03000	 mov         r3, r0

; 1773 :     g_PrcmCm.pOMAP_USBHOST_CM           = OALPAtoUA(OMAP_PRCM_USBHOST_CM_REGS_PA);

  002b4	e38a0b15	 orr         r0, r10, #0x15, 22
  002b8	e3a01000	 mov         r1, #0
  002bc	e5843020	 str         r3, [r4, #0x20]
  002c0	eb000000	 bl          OALPAtoVA
  002c4	e1a03000	 mov         r3, r0

; 1774 : 
; 1775 :     g_pContextRestore                   = OALPAtoUA(OMAP_CONTEXT_RESTORE_REGS_PA);

  002c8	e59f03fc	 ldr         r0, [pc, #0x3FC]
  002cc	e3a01000	 mov         r1, #0
  002d0	e584300c	 str         r3, [r4, #0xC]
  002d4	eb000000	 bl          OALPAtoVA
  002d8	e59f33e8	 ldr         r3, [pc, #0x3E8]
  002dc	e1a02000	 mov         r2, r0

; 1776 :     g_pPrcmRestore                      = OALPAtoUA(OMAP_PRCM_RESTORE_REGS_PA);

  002e0	e59f03dc	 ldr         r0, [pc, #0x3DC]
  002e4	e3a01000	 mov         r1, #0
  002e8	e5832000	 str         r2, [r3]
  002ec	eb000000	 bl          OALPAtoVA
  002f0	e59f33c8	 ldr         r3, [pc, #0x3C8]
  002f4	e1a02000	 mov         r2, r0

; 1777 :     g_pSdrcRestore                      = OALPAtoUA(OMAP_SDRC_RESTORE_REGS_PA);

  002f8	e59f03bc	 ldr         r0, [pc, #0x3BC]
  002fc	e3a01000	 mov         r1, #0
  00300	e5832000	 str         r2, [r3]
  00304	eb000000	 bl          OALPAtoVA
  00308	e59f33a8	 ldr         r3, [pc, #0x3A8]

; 1778 :     g_pSyscPadWkupRegs                  = OALPAtoUA(OMAP_SYSC_PADCONFS_WKUP_REGS_PA);

  0030c	e3a01000	 mov         r1, #0
  00310	e5830000	 str         r0, [r3]
  00314	e38a0c2a	 orr         r0, r10, #0x2A, 24
  00318	eb000000	 bl          OALPAtoVA
  0031c	e59f3390	 ldr         r3, [pc, #0x390]
  00320	e1a02000	 mov         r2, r0

; 1779 :     g_pSyscPadConfsRegs                 = OALPAtoUA(OMAP_SYSC_PADCONFS_REGS_PA);

  00324	e59f0384	 ldr         r0, [pc, #0x384]
  00328	e3a01000	 mov         r1, #0
  0032c	e5832000	 str         r2, [r3]
  00330	eb000000	 bl          OALPAtoVA
  00334	e59f3370	 ldr         r3, [pc, #0x370]
  00338	e1a02000	 mov         r2, r0

; 1780 :     g_pIdCodeReg                        = OALPAtoUA(OMAP_IDCORE_REGS_PA);

  0033c	e59f0364	 ldr         r0, [pc, #0x364]
  00340	e3a01000	 mov         r1, #0
  00344	e5832000	 str         r2, [r3]
  00348	eb000000	 bl          OALPAtoVA
  0034c	e59f3350	 ldr         r3, [pc, #0x350]

; 1781 :     info.pPrcmPrm                       = &g_PrcmPrm;

  00350	e58d5000	 str         r5, [sp]

; 1782 :     info.pPrcmCm                        = &g_PrcmCm;

  00354	e58d4004	 str         r4, [sp, #4]
  00358	e5830000	 str         r0, [r3]

; 1783 : 
; 1784 :      // initialize the context restore module
; 1785 :     OALContextRestoreInit();

  0035c	eb000000	 bl          OALContextRestoreInit

; 1786 :     SETSYSREG32(OMAP_PRCM_CORE_CM_REGS, CM_ICLKEN1_CORE, CM_CLKEN_OMAPCTRL);

  00360	e3a02040	 mov         r2, #0x40
  00364	e3a01010	 mov         r1, #0x10
  00368	e38a0c4a	 orr         r0, r10, #0x4A, 24
  0036c	eb000000	 bl          SetShadowReg32

; 1787 :         
; 1788 :     // initialize all devices to autoidle
; 1789 :     OUTSYSREG32(OMAP_PRCM_CORE_CM_REGS, CM_AUTOIDLE1_CORE, CM_AUTOIDLE1_CORE_INIT);

  00370	e5943004	 ldr         r3, [r4, #4]
  00374	e3e0210a	 mvn         r2, #0xA, 2
  00378	e2222f4b	 eor         r2, r2, #0x4B, 30
  0037c	e59f131c	 ldr         r1, [pc, #0x31C]
  00380	e5832030	 str         r2, [r3, #0x30]

; 1790 :     OUTSYSREG32(OMAP_PRCM_CORE_CM_REGS, CM_AUTOIDLE2_CORE, CM_AUTOIDLE2_CORE_INIT);

  00384	e5943004	 ldr         r3, [r4, #4]
  00388	e3a0001f	 mov         r0, #0x1F
  0038c	e5812934	 str         r2, [r1, #0x934]
  00390	e5830034	 str         r0, [r3, #0x34]

; 1791 :     OUTSYSREG32(OMAP_PRCM_CORE_CM_REGS, CM_AUTOIDLE3_CORE, CM_AUTOIDLE3_CORE_INIT);

  00394	e5943004	 ldr         r3, [r4, #4]
  00398	e3a0201f	 mov         r2, #0x1F
  0039c	e5812938	 str         r2, [r1, #0x938]
  003a0	e3a02004	 mov         r2, #4
  003a4	e5832038	 str         r2, [r3, #0x38]

; 1792 : 
; 1793 :     OUTSYSREG32(OMAP_PRCM_WKUP_CM_REGS, CM_AUTOIDLE_WKUP, CM_AUTOIDLE_WKUP_INIT);

  003a8	e5943000	 ldr         r3, [r4]
  003ac	e3a02004	 mov         r2, #4
  003b0	e3a0003f	 mov         r0, #0x3F
  003b4	e581293c	 str         r2, [r1, #0x93C]
  003b8	e5830030	 str         r0, [r3, #0x30]

; 1794 : 
; 1795 :     OUTREG32(&g_PrcmCm.pOMAP_PER_CM->CM_AUTOIDLE_PER, CM_AUTOIDLE_PER_INIT);

  003bc	e3e034ff	 mvn         r3, #0xFF, 8
  003c0	e3a0003f	 mov         r0, #0x3F
  003c4	e5942008	 ldr         r2, [r4, #8]
  003c8	e223373e	 eor         r3, r3, #0x3E, 14
  003cc	e5810044	 str         r0, [r1, #0x44]
  003d0	e5823030	 str         r3, [r2, #0x30]

; 1796 :     OUTREG32(&g_PrcmCm.pOMAP_CAM_CM->CM_AUTOIDLE_CAM, CM_AUTOIDLE_CAM_INIT);

  003d4	e5943024	 ldr         r3, [r4, #0x24]
  003d8	e3a0b001	 mov         r11, #1

; 1797 :     OUTREG32(&g_PrcmCm.pOMAP_DSS_CM->CM_AUTOIDLE_DSS, CM_AUTOIDLE_DSS_INIT);
; 1798 :     OUTREG32(&g_PrcmCm.pOMAP_USBHOST_CM->CM_AUTOIDLE_USBHOST, CM_AUTOIDLE_USBHOST_INIT);
; 1799 : 
; 1800 :     // clear all sleep dependencies.
; 1801 :     OUTREG32(&g_PrcmCm.pOMAP_SGX_CM->CM_SLEEPDEP_SGX, CM_SLEEPDEP_SGX_INIT);

  003dc	e3a0a000	 mov         r10, #0
  003e0	e583b030	 str         r11, [r3, #0x30]
  003e4	e5943018	 ldr         r3, [r4, #0x18]

; 1802 :     OUTREG32(&g_PrcmCm.pOMAP_DSS_CM->CM_SLEEPDEP_DSS, CM_SLEEPDEP_DSS_INIT);
; 1803 :     OUTREG32(&g_PrcmCm.pOMAP_CAM_CM->CM_SLEEPDEP_CAM, CM_SLEEPDEP_CAM_INIT);
; 1804 :     OUTREG32(&g_PrcmCm.pOMAP_PER_CM->CM_SLEEPDEP_PER, CM_SLEEPDEP_PER_INIT);
; 1805 :     OUTREG32(&g_PrcmCm.pOMAP_USBHOST_CM->CM_SLEEPDEP_USBHOST, CM_SLEEPDEP_USBHOST_INIT);
; 1806 : 
; 1807 :     // clear all wake dependencies.
; 1808 :     OUTREG32(&g_PrcmPrm.pOMAP_IVA2_PRM->PM_WKDEP_IVA2, CM_WKDEP_IVA2_INIT);
; 1809 :     OUTREG32(&g_PrcmPrm.pOMAP_MPU_PRM->PM_WKDEP_MPU, CM_WKDEP_MPU_INIT);
; 1810 :     OUTREG32(&g_PrcmPrm.pOMAP_SGX_PRM->PM_WKDEP_SGX, CM_WKDEP_SGX_INIT);
; 1811 :     OUTREG32(&g_PrcmPrm.pOMAP_DSS_PRM->PM_WKDEP_DSS, CM_WKDEP_DSS_INIT);
; 1812 :     OUTREG32(&g_PrcmPrm.pOMAP_CAM_PRM->PM_WKDEP_CAM, CM_WKDEP_CAM_INIT);
; 1813 :     OUTREG32(&g_PrcmPrm.pOMAP_PER_PRM->PM_WKDEP_PER, CM_WKDEP_PER_INIT);
; 1814 :     OUTREG32(&g_PrcmPrm.pOMAP_NEON_PRM->PM_WKDEP_NEON, CM_WKDEP_NEON_INIT);

  003e8	e3a02002	 mov         r2, #2

; 1815 :     OUTREG32(&g_PrcmPrm.pOMAP_USBHOST_PRM->PM_WKDEP_USBHOST, CM_WKDEP_USBHOST_INIT);
; 1816 : 
; 1817 :     // clear all wake ability
; 1818 :     OUTREG32(&g_PrcmPrm.pOMAP_WKUP_PRM->PM_WKEN_WKUP, CM_WKEN_WKUP_INIT);

  003ec	e3a0ec01	 mov         lr, #1, 24
  003f0	e583b030	 str         r11, [r3, #0x30]
  003f4	e594300c	 ldr         r3, [r4, #0xC]

; 1819 :     OUTREG32(&g_PrcmPrm.pOMAP_CORE_PRM->PM_WKEN1_CORE, CM_WKEN1_CORE_INIT);
; 1820 :     OUTREG32(&g_PrcmPrm.pOMAP_PER_PRM->PM_WKEN_PER, CM_WKEN_PER_INIT);
; 1821 :     OUTREG32(&g_PrcmPrm.pOMAP_DSS_PRM->PM_WKEN_DSS, CM_WKEN_DSS_INIT);
; 1822 :     OUTREG32(&g_PrcmPrm.pOMAP_USBHOST_PRM->PM_WKEN_USBHOST, CM_WKEN_USBHOST_INIT);
; 1823 : 
; 1824 :     // UNDONE:
; 1825 :     // For now have allow all devices mpu wakeup cap.
; 1826 :     OUTREG32(OALPAtoVA(0x48306CA4, FALSE), 0x3CB);          // PM_MPUGRPSEL_WKUP

  003f8	e59f029c	 ldr         r0, [pc, #0x29C]
  003fc	e3a01000	 mov         r1, #0
  00400	e583b030	 str         r11, [r3, #0x30]
  00404	e5943028	 ldr         r3, [r4, #0x28]
  00408	e583a044	 str         r10, [r3, #0x44]
  0040c	e5943018	 ldr         r3, [r4, #0x18]
  00410	e583a044	 str         r10, [r3, #0x44]
  00414	e5943024	 ldr         r3, [r4, #0x24]
  00418	e583a044	 str         r10, [r3, #0x44]
  0041c	e5943008	 ldr         r3, [r4, #8]
  00420	e583a044	 str         r10, [r3, #0x44]
  00424	e594300c	 ldr         r3, [r4, #0xC]
  00428	e583a044	 str         r10, [r3, #0x44]
  0042c	e5953020	 ldr         r3, [r5, #0x20]
  00430	e583a0c8	 str         r10, [r3, #0xC8]
  00434	e5953014	 ldr         r3, [r5, #0x14]
  00438	e583a0c8	 str         r10, [r3, #0xC8]
  0043c	e5953028	 ldr         r3, [r5, #0x28]
  00440	e583a0c8	 str         r10, [r3, #0xC8]
  00444	e5953018	 ldr         r3, [r5, #0x18]
  00448	e583a0c8	 str         r10, [r3, #0xC8]
  0044c	e5953024	 ldr         r3, [r5, #0x24]
  00450	e583a0c8	 str         r10, [r3, #0xC8]
  00454	e5953008	 ldr         r3, [r5, #8]
  00458	e583a0c8	 str         r10, [r3, #0xC8]
  0045c	e595301c	 ldr         r3, [r5, #0x1C]
  00460	e58320c8	 str         r2, [r3, #0xC8]
  00464	e595300c	 ldr         r3, [r5, #0xC]
  00468	e583a0c8	 str         r10, [r3, #0xC8]
  0046c	e5953000	 ldr         r3, [r5]
  00470	e583e0a0	 str         lr, [r3, #0xA0]
  00474	e5953004	 ldr         r3, [r5, #4]
  00478	e583a0a0	 str         r10, [r3, #0xA0]
  0047c	e5953008	 ldr         r3, [r5, #8]
  00480	e583a0a0	 str         r10, [r3, #0xA0]
  00484	e5953018	 ldr         r3, [r5, #0x18]
  00488	e583a0a0	 str         r10, [r3, #0xA0]
  0048c	e595300c	 ldr         r3, [r5, #0xC]
  00490	e583a0a0	 str         r10, [r3, #0xA0]
  00494	eb000000	 bl          OALPAtoVA
  00498	e3a03c03	 mov         r3, #3, 24
  0049c	e38330cb	 orr         r3, r3, #0xCB
  004a0	e5803000	 str         r3, [r0]

; 1827 :     OUTREG32(OALPAtoVA(0x48306AA4, FALSE), 0xC33FFE18);     // PM_MPUGRPSEL1_CORE

  004a4	e59f01ec	 ldr         r0, [pc, #0x1EC]
  004a8	e3a01000	 mov         r1, #0
  004ac	eb000000	 bl          OALPAtoVA
  004b0	e59f31dc	 ldr         r3, [pc, #0x1DC]
  004b4	e1a02000	 mov         r2, r0

; 1828 :     OUTREG32(OALPAtoVA(0x48306AF8, FALSE), 0x00000004);     // PM_MPUGRPSEL3_CORE

  004b8	e59f01d0	 ldr         r0, [pc, #0x1D0]
  004bc	e3a01000	 mov         r1, #0
  004c0	e5823000	 str         r3, [r2]
  004c4	eb000000	 bl          OALPAtoVA
  004c8	e1a03000	 mov         r3, r0

; 1829 :     OUTREG32(OALPAtoVA(0x483070A4, FALSE), 0x0003EFFF);     // PM_MPUGRPSEL_PER

  004cc	e59f01b8	 ldr         r0, [pc, #0x1B8]
  004d0	e3a04004	 mov         r4, #4
  004d4	e3a01000	 mov         r1, #0
  004d8	e5834000	 str         r4, [r3]
  004dc	eb000000	 bl          OALPAtoVA
  004e0	e1a02000	 mov         r2, r0

; 1830 :     OUTREG32(OALPAtoVA(0x483074A4, FALSE), 0x00000001);     // PM_MPUGRPSEL_USBHOST

  004e4	e59f019c	 ldr         r0, [pc, #0x19C]
  004e8	e3a03a3f	 mov         r3, #0x3F, 20
  004ec	e2433001	 sub         r3, r3, #1
  004f0	e3a01000	 mov         r1, #0
  004f4	e5823000	 str         r3, [r2]
  004f8	eb000000	 bl          OALPAtoVA
  004fc	e580b000	 str         r11, [r0]

; 1831 : 
; 1832 :     // If a UART is used during the basic intialization, the system will lock up.
; 1833 :     // The problem appears to be cause by enabling domain power management as soon 
; 1834 :     // as the first device in the domain is initialized, instead of initializing all
; 1835 :     // devices in domain before enabling domain autoidle. Since the system is single
; 1836 :     // threaded when this function is called, the UART use during init is the only problem.
; 1837 :     OALMSG(OAL_FUNC, (L" Disable serial debug messages during PRCM DeviceInitialize\r\n"));

  00500	e5963440	 ldr         r3, [r6, #0x440]
  00504	e3130004	 tst         r3, #4
  00508	159f0174	 ldrne       r0, [pc, #0x174]
  0050c	1b000000	 blne        NKDbgPrintfW

; 1838 :     OEMEnableDebugOutput(FALSE);

  00510	e3a00000	 mov         r0, #0
  00514	eb000000	 bl          OEMEnableDebugOutput

; 1839 : 
; 1840 :     OUTREG32(&g_PrcmPrm.pOMAP_GLOBAL_PRM->PRM_RSTST,
; 1841 :         INREG32(&g_PrcmPrm.pOMAP_GLOBAL_PRM->PRM_RSTST)
; 1842 :         );

  00518	e595202c	 ldr         r2, [r5, #0x2C]

; 1843 : 
; 1844 :     // ERRATA WORKAROUND: 1.107
; 1845 :     // clear an EMU reserved bit so the EMU power domain
; 1846 :     // won't lock-up on wake-up
; 1847 :     OUTREG32(&g_PrcmPrm.pOMAP_EMU_PRM->PM_PWSTST_EMU, 0);
; 1848 : 
; 1849 :     // set SDRC_POWER_REG register
; 1850 :     OUTREG32(&g_pSDRCRegs->SDRC_POWER, BSP_SDRC_POWER_REG);

  0051c	e59f115c	 ldr         r1, [pc, #0x15C]

; 1851 : 
; 1852 :     // configure setup times for voltage and src clk
; 1853 :     OUTREG32(&g_PrcmPrm.pOMAP_GLOBAL_PRM->PRM_CLKSETUP, BSP_PRM_CLKSETUP);
; 1854 :     OUTREG32(&g_PrcmPrm.pOMAP_GLOBAL_PRM->PRM_VOLTSETUP1, BSP_PRM_VOLTSETUP1_INIT);

  00520	e59fe154	 ldr         lr, [pc, #0x154]
  00524	e5923058	 ldr         r3, [r2, #0x58]

; 1855 :     OUTREG32(&g_PrcmPrm.pOMAP_GLOBAL_PRM->PRM_VOLTSETUP2, BSP_PRM_VOLTSETUP2);
; 1856 :     OUTREG32(&g_PrcmPrm.pOMAP_GLOBAL_PRM->PRM_VOLTOFFSET, BSP_PRM_VOLTOFFSET);
; 1857 : 
; 1858 :     // initialize prcm library
; 1859 :     PrcmInit(&info);

  00528	e28d0000	 add         r0, sp, #0
  0052c	e5823058	 str         r3, [r2, #0x58]
  00530	e5953010	 ldr         r3, [r5, #0x10]
  00534	e583a0e4	 str         r10, [r3, #0xE4]
  00538	e5983000	 ldr         r3, [r8]
  0053c	e5831070	 str         r1, [r3, #0x70]
  00540	e595302c	 ldr         r3, [r5, #0x2C]
  00544	e5834098	 str         r4, [r3, #0x98]
  00548	e595302c	 ldr         r3, [r5, #0x2C]
  0054c	e583e090	 str         lr, [r3, #0x90]
  00550	e595302c	 ldr         r3, [r5, #0x2C]
  00554	e583a0a0	 str         r10, [r3, #0xA0]
  00558	e595302c	 ldr         r3, [r5, #0x2C]
  0055c	e583a094	 str         r10, [r3, #0x94]
  00560	eb000000	 bl          PrcmInit

; 1860 :     
; 1861 :     //----------------------------------------------------------------------
; 1862 :     // Initialize I2C devices
; 1863 :     //----------------------------------------------------------------------
; 1864 :     OALI2CInit(OMAP_DEVICE_I2C1);

  00564	e3a0000c	 mov         r0, #0xC
  00568	eb000000	 bl          OALI2CInit

; 1865 :     OALI2CInit(OMAP_DEVICE_I2C2);

  0056c	e3a0000d	 mov         r0, #0xD
  00570	eb000000	 bl          OALI2CInit

; 1866 :     OALI2CInit(OMAP_DEVICE_I2C3);

  00574	e3a0000e	 mov         r0, #0xE
  00578	eb000000	 bl          OALI2CInit

; 1867 : 
; 1868 :     //----------------------------------------------------------------------
; 1869 :     // clock GPIO banks
; 1870 :     //----------------------------------------------------------------------
; 1871 :     EnableDeviceClocks(OMAP_DEVICE_GPIO1,TRUE);

  0057c	e3a01001	 mov         r1, #1
  00580	e3a00029	 mov         r0, #0x29
  00584	eb000000	 bl          EnableDeviceClocks

; 1872 :     EnableDeviceClocks(OMAP_DEVICE_GPIO2,TRUE);

  00588	e3a01001	 mov         r1, #1
  0058c	e3a0002d	 mov         r0, #0x2D
  00590	eb000000	 bl          EnableDeviceClocks

; 1873 :     EnableDeviceClocks(OMAP_DEVICE_GPIO3,TRUE);

  00594	e3a01001	 mov         r1, #1
  00598	e3a0002e	 mov         r0, #0x2E
  0059c	eb000000	 bl          EnableDeviceClocks

; 1874 :     EnableDeviceClocks(OMAP_DEVICE_GPIO4,TRUE);

  005a0	e3a01001	 mov         r1, #1
  005a4	e3a0002f	 mov         r0, #0x2F
  005a8	eb000000	 bl          EnableDeviceClocks

; 1875 :     EnableDeviceClocks(OMAP_DEVICE_GPIO5,TRUE);

  005ac	e3a01001	 mov         r1, #1
  005b0	e3a00030	 mov         r0, #0x30
  005b4	eb000000	 bl          EnableDeviceClocks

; 1876 :     EnableDeviceClocks(OMAP_DEVICE_GPIO6,TRUE);

  005b8	e3a01001	 mov         r1, #1
  005bc	e3a00031	 mov         r0, #0x31
  005c0	eb000000	 bl          EnableDeviceClocks

; 1877 : 
; 1878 :     // initialize pin mux table
; 1879 :     OALMux_InitMuxTable();

  005c4	eb000000	 bl          OALMux_InitMuxTable

; 1880 :    
; 1881 :     // set clock transition delay
; 1882 :     PrcmClockSetSystemClockSetupTime((USHORT)dwOEMPRCMCLKSSetupTime);

  005c8	e59f30a8	 ldr         r3, [pc, #0xA8]
  005cc	e5933000	 ldr         r3, [r3]
  005d0	e1a00803	 mov         r0, r3, lsl #16
  005d4	e1a00820	 mov         r0, r0, lsr #16
  005d8	eb000000	 bl          PrcmClockSetSystemClockSetupTime

; 1883 : 
; 1884 :     // - Automatically send command for off, retention, sleep
; 1885 :     PrcmVoltSetAutoControl(
; 1886 :         AUTO_OFF_ENABLED | AUTO_RET_DISABLED | AUTO_SLEEP_DISABLED,
; 1887 :         AUTO_OFF | AUTO_RET | AUTO_SLEEP
; 1888 :         );

  005dc	e3a01007	 mov         r1, #7
  005e0	e3a00004	 mov         r0, #4
  005e4	eb000000	 bl          PrcmVoltSetAutoControl

; 1889 : 
; 1890 :     // - set polarity modes
; 1891 :     // - SYS_CLKREQ is active high
; 1892 :     PrcmVoltSetControlPolarity(
; 1893 :         CLKREQ_POL_ACTIVEHIGH | OFFMODE_POL_ACTIVELOW | CLKOUT_POL_INACTIVELOW | EXTVOL_POL_ACTIVELOW,
; 1894 :         OFFMODE_POL | CLKOUT_POL | CLKREQ_POL | EXTVOL_POL
; 1895 :         );

  005e8	e3a0100f	 mov         r1, #0xF
  005ec	e3a00002	 mov         r0, #2
  005f0	eb000000	 bl          PrcmVoltSetControlPolarity

; 1896 : 
; 1897 :     // de-assert external clk req on retention and off
; 1898 :     PrcmClockSetExternalClockRequestMode(AUTOEXTCLKMODE_INRETENTION);

  005f4	e3a00010	 mov         r0, #0x10
  005f8	eb000000	 bl          PrcmClockSetExternalClockRequestMode

; 1899 : 
; 1900 :     InitT2PowerSequence();

  005fc	eb000000	 bl          InitT2PowerSequence

; 1901 : 
; 1902 : 
; 1903 :     // we need to write FORCEIDLE to the GPMC register or else it will prevent
; 1904 :     // the core from entering retention.  After the write smartidle can be
; 1905 :     // selected
; 1906 :     OUTREG32(&g_pGPMCRegs->GPMC_SYSCONFIG, SYSCONFIG_FORCEIDLE | SYSCONFIG_AUTOIDLE);
; 1907 : 
; 1908 :     // configure SCM, SDRC, SMS, and GPMC to smartidle/autoidle
; 1909 :     OUTREG32(&s_pSyscIFContext->CONTROL_SYSCONFIG, SYSCONFIG_SMARTIDLE | SYSCONFIG_AUTOIDLE);

  00600	e59f306c	 ldr         r3, [pc, #0x6C]
  00604	e5972000	 ldr         r2, [r7]
  00608	e3a01011	 mov         r1, #0x11
  0060c	e5933000	 ldr         r3, [r3]
  00610	e582b010	 str         r11, [r2, #0x10]

; 1910 :     OUTREG32(&g_pSMSRegs->SMS_SYSCONFIG, SYSCONFIG_AUTOIDLE | SYSCONFIG_SMARTIDLE);
; 1911 :     OUTREG32(&g_pSDRCRegs->SDRC_SYSCONFIG, SYSCONFIG_SMARTIDLE);

  00614	e3a02010	 mov         r2, #0x10
  00618	e5831010	 str         r1, [r3, #0x10]
  0061c	e5993000	 ldr         r3, [r9]

; 1912 :     OUTREG32(&g_pGPMCRegs->GPMC_SYSCONFIG, SYSCONFIG_SMARTIDLE | SYSCONFIG_AUTOIDLE);
; 1913 : 
; 1914 :     #ifdef DEBUG_PRCM_SUSPEND_RESUME
; 1915 :         g_PrcmDebugSuspendResume = TRUE;
; 1916 :     #endif
; 1917 : 		
; 1918 :     // re-enable serial debug output
; 1919 :     OEMEnableDebugOutput(TRUE);

  00620	e3a00001	 mov         r0, #1
  00624	e5831010	 str         r1, [r3, #0x10]
  00628	e5983000	 ldr         r3, [r8]
  0062c	e5832010	 str         r2, [r3, #0x10]
  00630	e5973000	 ldr         r3, [r7]
  00634	e5831010	 str         r1, [r3, #0x10]
  00638	eb000000	 bl          OEMEnableDebugOutput

; 1920 :     OALMSG(OAL_FUNC, (L" Serial debug messages renabled\r\n"));

  0063c	e5963440	 ldr         r3, [r6, #0x440]
  00640	e3130004	 tst         r3, #4
  00644	0a000002	 beq         |$LN7@OALPowerIn|
  00648	e59f0020	 ldr         r0, [pc, #0x20]
  0064c	eb000000	 bl          NKDbgPrintfW
  00650	e5963440	 ldr         r3, [r6, #0x440]
  00654		 |$LN7@OALPowerIn|

; 1921 : 
; 1922 :     OALMSG(OAL_FUNC, (L"-OALPowerInit()\r\n"));

  00654	e3130004	 tst         r3, #4
  00658	159f000c	 ldrne       r0, [pc, #0xC]
  0065c	1b000000	 blne        NKDbgPrintfW

; 1923 : }

  00660	e28dd008	 add         sp, sp, #8
  00664	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00668	e12fff1e	 bx          lr
  0066c		 |$LN54@OALPowerIn|
  0066c		 |$LN55@OALPowerIn|
  0066c	00000000	 DCD         |??_C@_1CE@IPHHBGKL@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00670		 |$LN56@OALPowerIn|
  00670	00000000	 DCD         |??_C@_1EE@NIHPAAL@?$AA?5?$AAS?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAd?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN@|
  00674		 |$LN57@OALPowerIn|
  00674	00000000	 DCD         |s_pSyscIFContext|
  00678		 |$LN58@OALPowerIn|
  00678	00000000	 DCD         |dwOEMPRCMCLKSSetupTime|
  0067c		 |$LN59@OALPowerIn|
  0067c	01120112	 DCD         0x1120112
  00680		 |$LN60@OALPowerIn|
  00680	001112ed	 DCD         0x1112ed
  00684		 |$LN61@OALPowerIn|
  00684	00000000	 DCD         |??_C@_1HM@BHHHHBMP@?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAs?$AAe?$AAr?$AAi?$AAa?$AAl?$AA?5?$AAd?$AAe?$AAb?$AAu?$AAg?$AA?5?$AAm?$AAe?$AAs?$AAs?$AAa?$AAg?$AAe?$AAs?$AA?5?$AAd@|
  00688		 |$LN62@OALPowerIn|
  00688	483074a4	 DCD         0x483074a4
  0068c		 |$LN63@OALPowerIn|
  0068c	483070a4	 DCD         0x483070a4
  00690		 |$LN64@OALPowerIn|
  00690	48306af8	 DCD         0x48306af8
  00694		 |$LN65@OALPowerIn|
  00694	c33ffe18	 DCD         0xc33ffe18
  00698		 |$LN66@OALPowerIn|
  00698	48306aa4	 DCD         0x48306aa4
  0069c		 |$LN67@OALPowerIn|
  0069c	48306ca4	 DCD         0x48306ca4
  006a0		 |$LN68@OALPowerIn|
  006a0	00000000	 DCD         |s_ocpSysCmContext|
  006a4		 |$LN69@OALPowerIn|
  006a4	00000000	 DCD         |g_pIdCodeReg|
  006a8		 |$LN70@OALPowerIn|
  006a8	4830a204	 DCD         0x4830a204
  006ac		 |$LN71@OALPowerIn|
  006ac	00000000	 DCD         |g_pSyscPadConfsRegs|
  006b0		 |$LN72@OALPowerIn|
  006b0	48002030	 DCD         0x48002030
  006b4		 |$LN73@OALPowerIn|
  006b4	00000000	 DCD         |g_pSyscPadWkupRegs|
  006b8		 |$LN74@OALPowerIn|
  006b8	00000000	 DCD         |g_pSdrcRestore|
  006bc		 |$LN75@OALPowerIn|
  006bc	48002974	 DCD         0x48002974
  006c0		 |$LN76@OALPowerIn|
  006c0	00000000	 DCD         |g_pPrcmRestore|
  006c4		 |$LN77@OALPowerIn|
  006c4	48002934	 DCD         0x48002934
  006c8		 |$LN78@OALPowerIn|
  006c8	00000000	 DCD         |g_pContextRestore|
  006cc		 |$LN79@OALPowerIn|
  006cc	48002910	 DCD         0x48002910
  006d0		 |$LN80@OALPowerIn|
  006d0	00000000	 DCD         |g_PrcmCm|
  006d4		 |$LN81@OALPowerIn|
  006d4	48307400	 DCD         0x48307400
  006d8		 |$LN82@OALPowerIn|
  006d8	48307100	 DCD         0x48307100
  006dc		 |$LN83@OALPowerIn|
  006dc	48307300	 DCD         0x48307300
  006e0		 |$LN84@OALPowerIn|
  006e0	48306f00	 DCD         0x48306f00
  006e4		 |$LN85@OALPowerIn|
  006e4	48306b00	 DCD         0x48306b00
  006e8		 |$LN86@OALPowerIn|
  006e8	48306e00	 DCD         0x48306e00
  006ec		 |$LN87@OALPowerIn|
  006ec	48306000	 DCD         0x48306000
  006f0		 |$LN88@OALPowerIn|
  006f0	48306900	 DCD         0x48306900
  006f4		 |$LN89@OALPowerIn|
  006f4	48306a00	 DCD         0x48306a00
  006f8		 |$LN90@OALPowerIn|
  006f8	48307000	 DCD         0x48307000
  006fc		 |$LN91@OALPowerIn|
  006fc	48306c00	 DCD         0x48306c00
  00700		 |$LN92@OALPowerIn|
  00700	48306d00	 DCD         0x48306d00
  00704		 |$LN93@OALPowerIn|
  00704	48306800	 DCD         0x48306800
  00708		 |$LN94@OALPowerIn|
  00708	00000000	 DCD         |g_PrcmPrm|
  0070c		 |$LN95@OALPowerIn|
  0070c	48307200	 DCD         0x48307200
  00710		 |$LN96@OALPowerIn|
  00710	00000000	 DCD         |g_pSysCtrlGenReg|
  00714		 |$LN97@OALPowerIn|
  00714	48002270	 DCD         0x48002270
  00718		 |$LN98@OALPowerIn|
  00718	00000000	 DCD         |g_pVRFBRegs|
  0071c		 |$LN99@OALPowerIn|
  0071c	00000000	 DCD         |g_pSMSRegs|
  00720		 |$LN100@OALPowerIn|
  00720	00000000	 DCD         |g_pSDRCRegs|
  00724		 |$LN101@OALPowerIn|
  00724	00000000	 DCD         |g_pGPMCRegs|
  00728		 |$LN102@OALPowerIn|
  00728	00000000	 DCD         |??_C@_1CE@EGLHOBFH@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0072c		 |$LN103@OALPowerIn|
  0072c	00000000	 DCD         |dpCurSettings|
  00730		 |$M50504|

			 ENDP  ; |OALPowerInit|

	EXPORT	|OALPowerPostInit|
	EXPORT	|??_C@_1CI@CGLJHOCE@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@KBFDMENB@?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?4@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HDMABPDE@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|PrcmVoltScaleVoltageABB|
	IMPORT	|PrcmInterruptEnable|
	IMPORT	|OALWakeupLatency_Initialize|
	IMPORT	|g_dwCpuRevision|
	IMPORT	|PrcmDomainSetMemoryState|
	IMPORT	|PrcmVoltSetControlMode|
	IMPORT	|OALSDRCRefreshCounter|
	IMPORT	|SmartReflex_PostInitialize|
	IMPORT	|SmartReflex_Initialize|
	IMPORT	|Opp_init|
	IMPORT	|PrcmContextRestoreInit|
	IMPORT	|OALI2CPostInit|
	IMPORT	|PrcmPostInit|
	IMPORT	|OALArgsQuery|

  00000			 AREA	 |.pdata|, PDATA
|$T50622| DCD	|$LN37@OALPowerPo|
	DCD	0x40015102

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CGLJHOCE@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "P", 0x0, "o", 0x0, "s", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@KBFDMENB@?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?4@| DCB "C"
	DCB	0x0, "P", 0x0, "U", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "m"
	DCB	0x0, "i", 0x0, "l", 0x0, "y", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "S", 0x0, "u", 0x0, "p"
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HDMABPDE@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "P", 0x0, "o", 0x0, "s", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPowerPostInit| PROC

; 1934 : {

  00000		 |$LN37@OALPowerPo|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd02c	 sub         sp, sp, #0x2C
  00008		 |$M50619|

; 1935 :     IOCTL_PRCM_CLOCK_SET_DPLLSTATE_IN dpllInfo;
; 1936 :     
; 1937 :     DWORD rgDomain = DVFS_MPU1_OPP;

  00008	e3a03010	 mov         r3, #0x10

; 1938 :     DWORD * rgOpp = OALArgsQuery(OAL_ARGS_QUERY_OPP_MODE);    

  0000c	e3a00049	 mov         r0, #0x49
  00010	e58d3008	 str         r3, [sp, #8]
  00014	eb000000	 bl          OALArgsQuery

; 1939 : 
; 1940 :     OALMSG(OAL_FUNC, (L"+OALPowerPostInit\r\n"));

  00018	e59f6520	 ldr         r6, [pc, #0x520]
  0001c	e1a04000	 mov         r4, r0
  00020	e5963440	 ldr         r3, [r6, #0x440]
  00024	e3130004	 tst         r3, #4
  00028	159f050c	 ldrne       r0, [pc, #0x50C]
  0002c	1b000000	 blne        NKDbgPrintfW

; 1941 : 
; 1942 :     // Allow power compontents to initialize with a full featured kernel
; 1943 :     // before threads are scheduled
; 1944 :     PrcmPostInit();

  00030	eb000000	 bl          PrcmPostInit

; 1945 :     OALI2CPostInit();

  00034	eb000000	 bl          OALI2CPostInit

; 1946 :     PrcmContextRestoreInit();

  00038	eb000000	 bl          PrcmContextRestoreInit

; 1947 :     Opp_init();

  0003c	eb000000	 bl          Opp_init

; 1948 :     SmartReflex_Initialize();

  00040	eb000000	 bl          SmartReflex_Initialize

; 1949 :     SmartReflex_PostInitialize();

  00044	eb000000	 bl          SmartReflex_PostInitialize

; 1950 : 
; 1951 :     SetOpp(&rgDomain,rgOpp,1);

  00048	e3a02001	 mov         r2, #1
  0004c	e1a01004	 mov         r1, r4
  00050	e28d0008	 add         r0, sp, #8
  00054	eb000000	 bl          SetOpp

; 1952 : 
; 1953 :     if(g_dwCpuFamily == CPU_FAMILY_DM37XX)

  00058	e59f54d8	 ldr         r5, [pc, #0x4D8]
  0005c	e5951000	 ldr         r1, [r5]
  00060	e3510001	 cmp         r1, #1
  00064	1a000005	 bne         |$LN6@OALPowerPo|
  00068	e3a03c02	 mov         r3, #2, 24
  0006c	e3a02c05	 mov         r2, #5, 24

; 1954 :     {
; 1955 :         OALSDRCRefreshCounter(BSP_HYNIX_ARCV, BSP_HYNIX_ARCV_LOW);

  00070	e3831012	 orr         r1, r3, #0x12
  00074	e38200e6	 orr         r0, r2, #0xE6

; 1958 :     {
; 1959 :         OALSDRCRefreshCounter(BSP_MICRON_ARCV, BSP_MICRON_ARCV_LOW);

  00078	eb000000	 bl          OALSDRCRefreshCounter

; 1960 :     }
; 1961 :     else

  0007c	ea00000b	 b           |$LN11@OALPowerPo|
  00080		 |$LN6@OALPowerPo|

; 1956 :     }
; 1957 :     else if (g_dwCpuFamily == CPU_FAMILY_OMAP35XX)

  00080	e3510000	 cmp         r1, #0
  00084	1a000005	 bne         |$LN4@OALPowerPo|
  00088	e3a03c02	 mov         r3, #2, 24
  0008c	e3a02b01	 mov         r2, #1, 22

; 1958 :     {
; 1959 :         OALSDRCRefreshCounter(BSP_MICRON_ARCV, BSP_MICRON_ARCV_LOW);

  00090	e3831055	 orr         r1, r3, #0x55
  00094	e38200e2	 orr         r0, r2, #0xE2
  00098	eb000000	 bl          OALSDRCRefreshCounter

; 1960 :     }
; 1961 :     else

  0009c	ea000003	 b           |$LN11@OALPowerPo|
  000a0		 |$LN4@OALPowerPo|

; 1962 :     {
; 1963 :         OALMSG(OAL_ERROR, (L"CPU family(%d) is not Supported.\r\n", g_dwCpuFamily));

  000a0	e5963440	 ldr         r3, [r6, #0x440]
  000a4	e3130001	 tst         r3, #1
  000a8	159f0484	 ldrne       r0, [pc, #0x484]
  000ac	1b000000	 blne        NKDbgPrintfW
  000b0		 |$LN11@OALPowerPo|

; 1964 :     }
; 1965 : 
; 1966 :     // ES 1.0
; 1967 :     // Need to force USB into standby mode to allow OMAP to go
; 1968 :     // into full retention
; 1969 :     ForceStandbyUSB();

  000b0	eb000000	 bl          ForceStandbyUSB

; 1970 : 
; 1971 :     // Force MMC into idle
; 1972 :     ForceIdleMMC();

  000b4	eb000000	 bl          ForceIdleMMC

; 1973 : 
; 1974 :     // Disable clocks enabled by bootloader, except display
; 1975 :     PrcmDeviceEnableClocks(OMAP_DEVICE_MMC1, FALSE);

  000b8	e3a01000	 mov         r1, #0
  000bc	e3a00015	 mov         r0, #0x15
  000c0	eb000000	 bl          PrcmDeviceEnableClocks

; 1976 :     PrcmDeviceEnableClocks(OMAP_DEVICE_DSS2, FALSE);

  000c4	e3a01000	 mov         r1, #0
  000c8	e3a00041	 mov         r0, #0x41
  000cc	eb000000	 bl          PrcmDeviceEnableClocks

; 1977 :     PrcmDeviceEnableClocks(OMAP_DEVICE_TVOUT, FALSE);

  000d0	e3a01000	 mov         r1, #0
  000d4	e3a00042	 mov         r0, #0x42
  000d8	eb000000	 bl          PrcmDeviceEnableClocks

; 1978 :     PrcmDeviceEnableClocks(OMAP_DEVICE_WDT2, FALSE);

  000dc	e3a01000	 mov         r1, #0
  000e0	e3a00028	 mov         r0, #0x28
  000e4	eb000000	 bl          PrcmDeviceEnableClocks

; 1979 :     PrcmDeviceEnableClocks(OMAP_DEVICE_GPTIMER1, FALSE);

  000e8	e3a01000	 mov         r1, #0
  000ec	e3a00024	 mov         r0, #0x24
  000f0	eb000000	 bl          PrcmDeviceEnableClocks

; 1980 :     PrcmDeviceEnableClocks(OMAP_DEVICE_HSOTGUSB, FALSE);

  000f4	e3a01000	 mov         r1, #0
  000f8	e3a00003	 mov         r0, #3
  000fc	eb000000	 bl          PrcmDeviceEnableClocks

; 1981 : 
; 1982 :     // - PowerIC controlled via I2C
; 1983 :     // - T2 doesn't support OFF command via I2C
; 1984 :     PrcmVoltSetControlMode(
; 1985 :         SEL_VMODE_I2C | SEL_OFF_SIGNALLINE,
; 1986 :         SEL_VMODE | SEL_OFF
; 1987 :         );

  00100	e3a01018	 mov         r1, #0x18
  00104	e3a00008	 mov         r0, #8
  00108	eb000000	 bl          PrcmVoltSetControlMode

; 1988 : 
; 1989 :     // configure memory on/retention/off levels
; 1990 :     PrcmDomainSetMemoryState(POWERDOMAIN_MPU,
; 1991 :         L2CACHEONSTATE_MEMORYON_DOMAINON | L2CACHERETSTATE_MEMORYRET_DOMAINRET |
; 1992 :         LOGICRETSTATE_LOGICRET_DOMAINRET,
; 1993 :         L2CACHEONSTATE | L2CACHERETSTATE |
; 1994 :         LOGICRETSTATE
; 1995 :         );

  0010c	e3a03803	 mov         r3, #3, 16
  00110	e3832f41	 orr         r2, r3, #0x41, 30
  00114	e3831f41	 orr         r1, r3, #0x41, 30
  00118	e3a00005	 mov         r0, #5
  0011c	eb000000	 bl          PrcmDomainSetMemoryState

; 1996 : 
; 1997 :     PrcmDomainSetMemoryState(POWERDOMAIN_IVA2,
; 1998 :         L2FLATMEMONSTATE_MEMORYON_DOMAINON | SHAREDL2CACHEFLATONSTATE_MEMORYON_DOMAINON |
; 1999 :         L1FLATMEMONSTATE_MEMORYON_DOMAINON | SHAREDL1CACHEFLATONSTATE_MEMORYON_DOMAINON |
; 2000 :         L2FLATMEMRETSTATE_MEMORYRET_DOMAINRET | SHAREDL2CACHEFLATRETSTATE_MEMORYRET_DOMAINRET |
; 2001 :         L1FLATMEMRETSTATE_MEMORYRET_DOMAINRET | SHAREDL1CACHEFLATRETSTATE_MEMORYRET_DOMAINRET |
; 2002 :         LOGICRETSTATE_LOGICRET_DOMAINRET,
; 2003 :         L2FLATMEMONSTATE | SHAREDL2CACHEFLATONSTATE |
; 2004 :         L1FLATMEMONSTATE | SHAREDL1CACHEFLATONSTATE |
; 2005 :         L2FLATMEMRETSTATE | SHAREDL2CACHEFLATRETSTATE |
; 2006 :         L1FLATMEMRETSTATE | SHAREDL1CACHEFLATRETSTATE |
; 2007 :         LOGICRETSTATE
; 2008 :         );

  00120	e59f1408	 ldr         r1, [pc, #0x408]
  00124	e3a00008	 mov         r0, #8
  00128	e1a02001	 mov         r2, r1
  0012c	eb000000	 bl          PrcmDomainSetMemoryState

; 2009 : 
; 2010 :     PrcmDomainSetMemoryState(POWERDOMAIN_CORE,
; 2011 :         MEM2ONSTATE_MEMORYON_DOMAINON | MEM1ONSTATE_MEMORYON_DOMAINON |
; 2012 :         MEM2RETSTATE_MEMORYRET_DOMAINRET | MEM2RETSTATE_MEMORYRET_DOMAINRET |
; 2013 :         LOGICRETSTATE_LOGICRET_DOMAINRET,
; 2014 :         MEM2ONSTATE | MEM1ONSTATE |
; 2015 :         MEM2RETSTATE | MEM2RETSTATE |
; 2016 :         LOGICRETSTATE
; 2017 :         );

  00130	e3a0380f	 mov         r3, #0xF, 16
  00134	e3832f81	 orr         r2, r3, #0x81, 30
  00138	e3831f81	 orr         r1, r3, #0x81, 30
  0013c	e3a00001	 mov         r0, #1
  00140	eb000000	 bl          PrcmDomainSetMemoryState

; 2018 : 
; 2019 :     PrcmDomainSetMemoryState(POWERDOMAIN_PERIPHERAL,
; 2020 :         LOGICRETSTATE_LOGICRET_DOMAINRET,
; 2021 :         LOGICRETSTATE
; 2022 :         );

  00144	e3a02004	 mov         r2, #4
  00148	e3a01004	 mov         r1, #4
  0014c	e3a00002	 mov         r0, #2
  00150	eb000000	 bl          PrcmDomainSetMemoryState

; 2023 : 
; 2024 : 
; 2025 :     // ES3.1 fix
; 2026 :     if (g_dwCpuRevision == CPU_FAMILY_35XX_REVISION_ES_3_1)

  00154	e59f33d0	 ldr         r3, [pc, #0x3D0]
  00158	e5933000	 ldr         r3, [r3]
  0015c	e3530006	 cmp         r3, #6
  00160	1a000008	 bne         |$LN2@OALPowerPo|

; 2027 :         {
; 2028 :         // enable USBTLL SAR
; 2029 :         PrcmDomainSetMemoryState(POWERDOMAIN_CORE, SAVEANDRESTORE, SAVEANDRESTORE);

  00164	e3a02010	 mov         r2, #0x10
  00168	e3a01010	 mov         r1, #0x10
  0016c	e3a00001	 mov         r0, #1
  00170	eb000000	 bl          PrcmDomainSetMemoryState

; 2030 : 
; 2031 :         // configure USBHOST for memory on when domain is on, logic retained when domain is in retention
; 2032 :         PrcmDomainSetMemoryState(POWERDOMAIN_USBHOST,
; 2033 :             LOGICRETSTATE_LOGICRET_DOMAINRET | MEMONSTATE_MEMORYON_DOMAINON,
; 2034 :             LOGICRETSTATE | MEMONSTATE
; 2035 :             );

  00174	e3a03803	 mov         r3, #3, 16
  00178	e3832004	 orr         r2, r3, #4
  0017c	e3831004	 orr         r1, r3, #4
  00180	e3a00003	 mov         r0, #3
  00184	eb000000	 bl          PrcmDomainSetMemoryState
  00188		 |$LN2@OALPowerPo|

; 2036 :         }
; 2037 : 
; 2038 :     // update dpll settings    
; 2039 :     dpllInfo.size = sizeof(IOCTL_PRCM_CLOCK_SET_DPLLSTATE_IN);
; 2040 :     dpllInfo.lowPowerEnabled = FALSE;
; 2041 :     dpllInfo.driftGuardEnabled = FALSE;
; 2042 :     dpllInfo.dpllMode = DPLL_MODE_LOCK; 

  00188	e3a00007	 mov         r0, #7

; 2043 :     dpllInfo.ffMask = DPLL_UPDATE_ALL;
; 2044 :     dpllInfo.rampTime = DPLL_RAMPTIME_20;
; 2045 :     dpllInfo.dpllAutoidleState = DPLL_AUTOIDLE_LOWPOWERSTOPMODE;
; 2046 :    
; 2047 :     // dpll1
; 2048 :     dpllInfo.dpllId = kDPLL1;

  0018c	e58d0024	 str         r0, [sp, #0x24]
  00190	e3a03020	 mov         r3, #0x20
  00194	e3a02000	 mov         r2, #0
  00198	e3a01000	 mov         r1, #0
  0019c	e3a0e01f	 mov         lr, #0x1F
  001a0	e3a04c02	 mov         r4, #2, 24
  001a4	e3a07001	 mov         r7, #1
  001a8	e3a08000	 mov         r8, #0

; 2049 :     PrcmClockSetDpllState(&dpllInfo);

  001ac	e28d000c	 add         r0, sp, #0xC
  001b0	e58d300c	 str         r3, [sp, #0xC]
  001b4	e58d2018	 str         r2, [sp, #0x18]
  001b8	e58d1020	 str         r1, [sp, #0x20]
  001bc	e58de014	 str         lr, [sp, #0x14]
  001c0	e58d401c	 str         r4, [sp, #0x1C]
  001c4	e58d7028	 str         r7, [sp, #0x28]
  001c8	e58d8010	 str         r8, [sp, #0x10]
  001cc	eb000000	 bl          PrcmClockSetDpllState

; 2050 : 
; 2051 :     // dpll2
; 2052 :     dpllInfo.dpllId = kDPLL2;  

  001d0	e3a03001	 mov         r3, #1

; 2053 :     PrcmClockSetDpllState(&dpllInfo);

  001d4	e28d000c	 add         r0, sp, #0xC
  001d8	e58d3010	 str         r3, [sp, #0x10]
  001dc	eb000000	 bl          PrcmClockSetDpllState

; 2054 : 
; 2055 :     // dpll3
; 2056 :     dpllInfo.rampTime = DPLL_RAMPTIME_DISABLE;

  001e0	e3a03000	 mov         r3, #0

; 2057 :     dpllInfo.dpllId = kDPLL3;

  001e4	e3a02002	 mov         r2, #2

; 2058 :     PrcmClockSetDpllState(&dpllInfo);

  001e8	e28d000c	 add         r0, sp, #0xC
  001ec	e58d301c	 str         r3, [sp, #0x1C]
  001f0	e58d2010	 str         r2, [sp, #0x10]
  001f4	eb000000	 bl          PrcmClockSetDpllState

; 2059 : 
; 2060 :     // dpll4
; 2061 :     dpllInfo.dpllId = kDPLL4;

  001f8	e3a03003	 mov         r3, #3

; 2062 :     PrcmClockSetDpllState(&dpllInfo);

  001fc	e28d000c	 add         r0, sp, #0xC
  00200	e58d3010	 str         r3, [sp, #0x10]
  00204	eb000000	 bl          PrcmClockSetDpllState

; 2063 : 
; 2064 :     // dpll5
; 2065 :     dpllInfo.dpllId = kDPLL5;

  00208	e3a03004	 mov         r3, #4

; 2066 :     PrcmClockSetDpllState(&dpllInfo);

  0020c	e28d000c	 add         r0, sp, #0xC
  00210	e58d3010	 str         r3, [sp, #0x10]
  00214	eb000000	 bl          PrcmClockSetDpllState

; 2067 : 
; 2068 :     OALWakeupLatency_Initialize();

  00218	eb000000	 bl          OALWakeupLatency_Initialize

; 2069 : 
; 2070 :     // set the floor for powerdomains to be retention
; 2071 :     PrcmDomainSetPowerState(POWERDOMAIN_CORE, POWERSTATE_RETENTION, LOGICRETSTATE);

  0021c	e3a02004	 mov         r2, #4
  00220	e3a01001	 mov         r1, #1
  00224	e3a00001	 mov         r0, #1
  00228	eb000000	 bl          PrcmDomainSetPowerState

; 2072 :     PrcmDomainSetPowerState(POWERDOMAIN_MPU, POWERSTATE_RETENTION, LOGICRETSTATE);

  0022c	e3a02004	 mov         r2, #4
  00230	e3a01001	 mov         r1, #1
  00234	e3a00005	 mov         r0, #5
  00238	eb000000	 bl          PrcmDomainSetPowerState

; 2073 :     PrcmDomainSetPowerState(POWERDOMAIN_CAMERA, POWERSTATE_OFF, LOGICRETSTATE);

  0023c	e3a02004	 mov         r2, #4
  00240	e3a01000	 mov         r1, #0
  00244	e3a00009	 mov         r0, #9
  00248	eb000000	 bl          PrcmDomainSetPowerState

; 2074 :     PrcmDomainSetPowerState(POWERDOMAIN_PERIPHERAL, POWERSTATE_RETENTION, LOGICRETSTATE);

  0024c	e3a02004	 mov         r2, #4
  00250	e3a01001	 mov         r1, #1
  00254	e3a00002	 mov         r0, #2
  00258	eb000000	 bl          PrcmDomainSetPowerState

; 2075 :     PrcmDomainSetPowerState(POWERDOMAIN_DSS, POWERSTATE_RETENTION, LOGICRETSTATE);

  0025c	e3a02004	 mov         r2, #4
  00260	e3a01001	 mov         r1, #1
  00264	e3a00006	 mov         r0, #6
  00268	eb000000	 bl          PrcmDomainSetPowerState

; 2076 :     PrcmDomainSetPowerState(POWERDOMAIN_SGX, POWERSTATE_OFF, LOGICRETSTATE);

  0026c	e3a02004	 mov         r2, #4
  00270	e3a01000	 mov         r1, #0
  00274	e3a0000a	 mov         r0, #0xA
  00278	eb000000	 bl          PrcmDomainSetPowerState

; 2077 :     PrcmDomainSetPowerState(POWERDOMAIN_USBHOST, POWERSTATE_OFF, LOGICRETSTATE);

  0027c	e3a02004	 mov         r2, #4
  00280	e3a01000	 mov         r1, #0
  00284	e3a00003	 mov         r0, #3
  00288	eb000000	 bl          PrcmDomainSetPowerState

; 2078 :     PrcmDomainSetPowerState(POWERDOMAIN_EMULATION, POWERSTATE_OFF, LOGICRETSTATE);

  0028c	e3a02004	 mov         r2, #4
  00290	e3a01000	 mov         r1, #0
  00294	e3a00004	 mov         r0, #4
  00298	eb000000	 bl          PrcmDomainSetPowerState

; 2079 :     PrcmDomainSetPowerState(POWERDOMAIN_NEON, POWERSTATE_RETENTION, LOGICRETSTATE);

  0029c	e3a02004	 mov         r2, #4
  002a0	e3a01001	 mov         r1, #1
  002a4	e3a00007	 mov         r0, #7
  002a8	eb000000	 bl          PrcmDomainSetPowerState

; 2080 :     PrcmDomainSetPowerState(POWERDOMAIN_IVA2, POWERSTATE_OFF, LOGICRETSTATE);

  002ac	e3a02004	 mov         r2, #4
  002b0	e3a01000	 mov         r1, #0
  002b4	e3a00008	 mov         r0, #8
  002b8	eb000000	 bl          PrcmDomainSetPowerState

; 2081 : 
; 2082 :     PrcmDomainSetClockState(POWERDOMAIN_CORE, CLOCKDOMAIN_L3, CLKSTCTRL_AUTOMATIC);

  002bc	e3a02003	 mov         r2, #3
  002c0	e3a01000	 mov         r1, #0
  002c4	e3a00001	 mov         r0, #1
  002c8	eb000000	 bl          PrcmDomainSetClockState

; 2083 :     PrcmDomainSetClockState(POWERDOMAIN_CORE, CLOCKDOMAIN_L4, CLKSTCTRL_AUTOMATIC);

  002cc	e3a02003	 mov         r2, #3
  002d0	e3a01001	 mov         r1, #1
  002d4	e3a00001	 mov         r0, #1
  002d8	eb000000	 bl          PrcmDomainSetClockState

; 2084 :     PrcmDomainSetClockState(POWERDOMAIN_CORE, CLOCKDOMAIN_D2D, CLKSTCTRL_AUTOMATIC);

  002dc	e3a02003	 mov         r2, #3
  002e0	e3a0100b	 mov         r1, #0xB
  002e4	e3a00001	 mov         r0, #1
  002e8	eb000000	 bl          PrcmDomainSetClockState

; 2085 :     PrcmDomainSetClockState(POWERDOMAIN_MPU, CLOCKDOMAIN_MPU, CLKSTCTRL_AUTOMATIC);

  002ec	e3a02003	 mov         r2, #3
  002f0	e3a01005	 mov         r1, #5
  002f4	e3a00005	 mov         r0, #5
  002f8	eb000000	 bl          PrcmDomainSetClockState

; 2086 :     PrcmDomainSetClockState(POWERDOMAIN_CAMERA, CLOCKDOMAIN_CAMERA, CLKSTCTRL_AUTOMATIC);

  002fc	e3a02003	 mov         r2, #3
  00300	e3a01009	 mov         r1, #9
  00304	e3a00009	 mov         r0, #9
  00308	eb000000	 bl          PrcmDomainSetClockState

; 2087 :     PrcmDomainSetClockState(POWERDOMAIN_PERIPHERAL, CLOCKDOMAIN_PERIPHERAL, CLKSTCTRL_AUTOMATIC);

  0030c	e3a02003	 mov         r2, #3
  00310	e3a01002	 mov         r1, #2
  00314	e3a00002	 mov         r0, #2
  00318	eb000000	 bl          PrcmDomainSetClockState

; 2088 :     PrcmDomainSetClockState(POWERDOMAIN_DSS, CLOCKDOMAIN_DSS, CLKSTCTRL_AUTOMATIC);

  0031c	e3a02003	 mov         r2, #3
  00320	e3a01006	 mov         r1, #6
  00324	e3a00006	 mov         r0, #6
  00328	eb000000	 bl          PrcmDomainSetClockState

; 2089 :     PrcmDomainSetClockState(POWERDOMAIN_SGX, CLOCKDOMAIN_SGX, CLKSTCTRL_AUTOMATIC);

  0032c	e3a02003	 mov         r2, #3
  00330	e3a0100a	 mov         r1, #0xA
  00334	e3a0000a	 mov         r0, #0xA
  00338	eb000000	 bl          PrcmDomainSetClockState

; 2090 :     PrcmDomainSetClockState(POWERDOMAIN_USBHOST, CLOCKDOMAIN_USBHOST, CLKSTCTRL_AUTOMATIC);

  0033c	e3a02003	 mov         r2, #3
  00340	e3a01003	 mov         r1, #3
  00344	e3a00003	 mov         r0, #3
  00348	eb000000	 bl          PrcmDomainSetClockState

; 2091 :     PrcmDomainSetClockState(POWERDOMAIN_EMULATION, CLOCKDOMAIN_EMULATION, CLKSTCTRL_AUTOMATIC);

  0034c	e3a02003	 mov         r2, #3
  00350	e3a01004	 mov         r1, #4
  00354	e3a00004	 mov         r0, #4
  00358	eb000000	 bl          PrcmDomainSetClockState

; 2092 :     PrcmDomainSetClockState(POWERDOMAIN_NEON, CLOCKDOMAIN_NEON, CLKSTCTRL_AUTOMATIC);

  0035c	e3a02003	 mov         r2, #3
  00360	e3a01007	 mov         r1, #7
  00364	e3a00007	 mov         r0, #7
  00368	eb000000	 bl          PrcmDomainSetClockState

; 2093 :     PrcmDomainSetClockState(POWERDOMAIN_IVA2, CLOCKDOMAIN_IVA2, CLKSTCTRL_AUTOMATIC);

  0036c	e3a02003	 mov         r2, #3
  00370	e3a01008	 mov         r1, #8
  00374	e3a00008	 mov         r0, #8
  00378	eb000000	 bl          PrcmDomainSetClockState

; 2094 : 
; 2095 :     // Enable IO interrupt
; 2096 :     PrcmInterruptEnable(PRM_IRQENABLE_IO_EN, TRUE);

  0037c	e3a01001	 mov         r1, #1
  00380	e3a00c02	 mov         r0, #2, 24
  00384	eb000000	 bl          PrcmInterruptEnable

; 2097 :     TWLconfigOFFmode();

  00388	eb000000	 bl          TWLOpen
  0038c	e1b04000	 movs        r4, r0
  00390	0a000034	 beq         |$LN16@OALPowerPo|
  00394	e3a030ce	 mov         r3, #0xCE
  00398	e3a07803	 mov         r7, #3, 16
  0039c	e5cd3004	 strb        r3, [sp, #4]
  003a0	e3a03001	 mov         r3, #1
  003a4	e3871044	 orr         r1, r7, #0x44
  003a8	e28d2004	 add         r2, sp, #4
  003ac	e1a00004	 mov         r0, r4
  003b0	eb000000	 bl          TWLWriteRegs
  003b4	e3a030ec	 mov         r3, #0xEC
  003b8	e5cd3004	 strb        r3, [sp, #4]
  003bc	e3a03001	 mov         r3, #1
  003c0	e28d2004	 add         r2, sp, #4
  003c4	e3871044	 orr         r1, r7, #0x44
  003c8	e1a00004	 mov         r0, r4
  003cc	eb000000	 bl          TWLWriteRegs
  003d0	e3871036	 orr         r1, r7, #0x36
  003d4	e3a03001	 mov         r3, #1
  003d8	e28d2000	 add         r2, sp, #0
  003dc	e1a00004	 mov         r0, r4
  003e0	eb000000	 bl          TWLReadRegs
  003e4	e5dd3000	 ldrb        r3, [sp]
  003e8	e28d2004	 add         r2, sp, #4
  003ec	e3871036	 orr         r1, r7, #0x36
  003f0	e20330fd	 and         r3, r3, #0xFD
  003f4	e5cd3000	 strb        r3, [sp]
  003f8	e5cd3004	 strb        r3, [sp, #4]
  003fc	e3a03001	 mov         r3, #1
  00400	e1a00004	 mov         r0, r4
  00404	eb000000	 bl          TWLWriteRegs
  00408	e3a03000	 mov         r3, #0
  0040c	e5cd3004	 strb        r3, [sp, #4]
  00410	e3a03001	 mov         r3, #1
  00414	e28d2004	 add         r2, sp, #4
  00418	e3871044	 orr         r1, r7, #0x44
  0041c	e1a00004	 mov         r0, r4
  00420	eb000000	 bl          TWLWriteRegs
  00424	e3a07803	 mov         r7, #3, 16
  00428	e3a0e000	 mov         lr, #0
  0042c	e38710b2	 orr         r1, r7, #0xB2
  00430	e3a03001	 mov         r3, #1
  00434	e28d2004	 add         r2, sp, #4
  00438	e1a00004	 mov         r0, r4
  0043c	e5cde004	 strb        lr, [sp, #4]
  00440	eb000000	 bl          TWLWriteRegs
  00444	e3a03000	 mov         r3, #0
  00448	e5cd3004	 strb        r3, [sp, #4]
  0044c	e3a03001	 mov         r3, #1
  00450	e28d2004	 add         r2, sp, #4
  00454	e38710c0	 orr         r1, r7, #0xC0
  00458	e1a00004	 mov         r0, r4
  0045c	eb000000	 bl          TWLWriteRegs
  00460	e1a00004	 mov         r0, r4
  00464	eb000000	 bl          TWLClose
  00468		 |$LN16@OALPowerPo|

; 2098 : 	
; 2099 :     // Enable FBB for higher OPP on 37x
; 2100 :     if (g_dwCpuFamily == CPU_FAMILY_DM37XX)

  00468	e5953000	 ldr         r3, [r5]
  0046c	e3530001	 cmp         r3, #1

; 2101 :         PrcmVoltScaleVoltageABB(BSP_OPM_SELECT_37XX);

  00470	03a00004	 moveq       r0, #4
  00474	0b000000	 bleq        PrcmVoltScaleVoltageABB

; 2102 : 
; 2103 :     // save context for all registers restored by the kernel
; 2104 :     OALContextSaveSMS();

  00478	e59f30a8	 ldr         r3, [pc, #0xA8]
  0047c	e59f40a0	 ldr         r4, [pc, #0xA0]
  00480	e59f5098	 ldr         r5, [pc, #0x98]
  00484	e5932000	 ldr         r2, [r3]
  00488	e5943000	 ldr         r3, [r4]
  0048c	e5922010	 ldr         r2, [r2, #0x10]
  00490	e3c33c02	 bic         r3, r3, #2, 24
  00494	e5843000	 str         r3, [r4]
  00498	e5852010	 str         r2, [r5, #0x10]

; 2105 :     OALContextSaveGPMC();

  0049c	eb000000	 bl          OALContextSaveGPMC

; 2106 :     OALContextSaveINTC();

  004a0	eb000000	 bl          OALContextSaveINTC

; 2107 :     OALContextSavePRCM();

  004a4	eb000000	 bl          OALContextSavePRCM

; 2108 :     OALContextSaveGPIO();

  004a8	eb000000	 bl          OALContextSaveGPIO

; 2109 :     OALContextSaveSCM();

  004ac	eb000000	 bl          OALContextSaveSCM

; 2110 :     OALContextSaveDMA();

  004b0	e59f3064	 ldr         r3, [pc, #0x64]
  004b4	e5942000	 ldr         r2, [r4]
  004b8	e5931000	 ldr         r1, [r3]
  004bc	e3c22004	 bic         r2, r2, #4
  004c0	e5913078	 ldr         r3, [r1, #0x78]
  004c4	e5853638	 str         r3, [r5, #0x638]
  004c8	e591302c	 ldr         r3, [r1, #0x2C]
  004cc	e58535ec	 str         r3, [r5, #0x5EC]
  004d0	e5913018	 ldr         r3, [r1, #0x18]
  004d4	e58535d8	 str         r3, [r5, #0x5D8]
  004d8	e591301c	 ldr         r3, [r1, #0x1C]
  004dc	e58535dc	 str         r3, [r5, #0x5DC]
  004e0	e5913020	 ldr         r3, [r1, #0x20]
  004e4	e58535e0	 str         r3, [r5, #0x5E0]
  004e8	e5913024	 ldr         r3, [r1, #0x24]
  004ec	e5842000	 str         r2, [r4]
  004f0	e58535e4	 str         r3, [r5, #0x5E4]

; 2111 :     OALContextSaveMux();

  004f4	eb000000	 bl          OALContextSaveMux

; 2112 :     OALContextSaveVRFB();

  004f8	eb000000	 bl          OALContextSaveVRFB

; 2113 : 
; 2114 :     OALMSG(OAL_FUNC, (L"-OALPowerPostInit\r\n"));

  004fc	e5963440	 ldr         r3, [r6, #0x440]
  00500	e3130004	 tst         r3, #4
  00504	159f000c	 ldrne       r0, [pc, #0xC]
  00508	1b000000	 blne        NKDbgPrintfW

; 2115 : }

  0050c	e28dd02c	 add         sp, sp, #0x2C
  00510	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00514	e12fff1e	 bx          lr
  00518		 |$LN38@OALPowerPo|
  00518		 |$LN39@OALPowerPo|
  00518	00000000	 DCD         |??_C@_1CI@CGLJHOCE@?$AA?9?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0051c		 |$LN40@OALPowerPo|
  0051c	00000000	 DCD         |s_pDmaController|
  00520		 |$LN41@OALPowerPo|
  00520	00000000	 DCD         |s_smsContext|
  00524		 |$LN42@OALPowerPo|
  00524	00000000	 DCD         |g_ffContextSaveMask|
  00528		 |$LN43@OALPowerPo|
  00528	00000000	 DCD         |g_pSMSRegs|
  0052c		 |$LN44@OALPowerPo|
  0052c	00000000	 DCD         |g_dwCpuRevision|
  00530		 |$LN45@OALPowerPo|
  00530	00ff0f04	 DCD         0xff0f04
  00534		 |$LN46@OALPowerPo|
  00534	00000000	 DCD         |??_C@_1EG@KBFDMENB@?$AAC?$AAP?$AAU?$AA?5?$AAf?$AAa?$AAm?$AAi?$AAl?$AAy?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAS?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?4@|
  00538		 |$LN47@OALPowerPo|
  00538	00000000	 DCD         |g_dwCpuFamily|
  0053c		 |$LN48@OALPowerPo|
  0053c	00000000	 DCD         |??_C@_1CI@HDMABPDE@?$AA?$CL?$AAO?$AAA?$AAL?$AAP?$AAo?$AAw?$AAe?$AAr?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00540		 |$LN49@OALPowerPo|
  00540	00000000	 DCD         |dpCurSettings|
  00544		 |$M50620|

			 ENDP  ; |OALPowerPostInit|

	END
