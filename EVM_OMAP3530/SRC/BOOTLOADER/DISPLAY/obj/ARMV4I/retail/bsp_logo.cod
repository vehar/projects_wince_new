; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\EVM_OMAP3530\SRC\BOOTLOADER\DISPLAY\bsp_logo.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|g_dwLogoWidth|, 0x4

	 COMMON	|g_dwLogoHeight|, 0x4

	 COMMON	|g_dwLogoPosY|, 0x4

	 COMMON	|g_dwLogoPosX|, 0x4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	IMPORT	|TWLWriteRegs|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T48474| DCD	|$LN5@TWLWriteBy|
	DCD	0x40000803
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |TWLWriteByteReg| PROC

; 57   : {

  00000		 |$LN5@TWLWriteBy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M48471|

; 58   :     return TWLWriteRegs(hTWL,address,&data,sizeof(data));

  0000c	e3a03001	 mov         r3, #1
  00010	e28d2010	 add         r2, sp, #0x10
  00014	eb000000	 bl          TWLWriteRegs

; 59   : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M48472|

			 ENDP  ; |TWLWriteByteReg|

	IMPORT	|memcpy|
; File c:\wince600\platform\evm_omap3530\src\bootloader\display\bsp_logo.c

  00000			 AREA	 |.pdata|, PDATA
|$T48490| DCD	|$LN10@FlipFrameB|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |FlipFrameBuffer| PROC

; 79   : {

  00000		 |$LN10@FlipFrameB|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M48487|
  00004	e1a07003	 mov         r7, r3
  00008	e1a04002	 mov         r4, r2
  0000c	e1a05000	 mov         r5, r0

; 80   :     DWORD y;
; 81   :     PUCHAR top;
; 82   :     PUCHAR bottom;
; 83   : 
; 84   :     top = fb;
; 85   :     bottom = fb + ((h-1)*lineSize);

  00010	e241e001	 sub         lr, r1, #1
  00014	e026549e	 mla         r6, lr, r4, r5

; 86   :     
; 87   :     for (y=0;y<h/2;y++)

  00018	e1b080a1	 movs        r8, r1, lsr #1
  0001c	0a00000f	 beq         |$LN1@FlipFrameB|
  00020		 |$LL3@FlipFrameB|

; 88   :     {
; 89   :         memcpy(temporaryBuffer,top,lineSize);

  00020	e1a02004	 mov         r2, r4
  00024	e1a01005	 mov         r1, r5
  00028	e1a00007	 mov         r0, r7
  0002c	eb000000	 bl          memcpy

; 90   :         memcpy(top,bottom,lineSize);

  00030	e1a02004	 mov         r2, r4
  00034	e1a01006	 mov         r1, r6
  00038	e1a00005	 mov         r0, r5
  0003c	eb000000	 bl          memcpy

; 91   :         memcpy(bottom,temporaryBuffer,lineSize);

  00040	e1a02004	 mov         r2, r4
  00044	e1a01007	 mov         r1, r7
  00048	e1a00006	 mov         r0, r6
  0004c	eb000000	 bl          memcpy

; 92   :         top += lineSize;

  00050	e0855004	 add         r5, r5, r4

; 93   :         bottom -= lineSize;

  00054	e0466004	 sub         r6, r6, r4
  00058	e2588001	 subs        r8, r8, #1
  0005c	1affffef	 bne         |$LL3@FlipFrameB|
  00060		 |$LN1@FlipFrameB|

; 94   :     }
; 95   : }

  00060	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M48488|

			 ENDP  ; |FlipFrameBuffer|

	EXPORT	|disable_dss|

  00000			 AREA	 |.pdata|, PDATA
|$T48497| DCD	|$LN5@disable_ds|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |disable_dss| PROC

; 371  : {

  00000		 |$LN5@disable_ds|
  00000		 |$M48494|

; 372  :      //OALMSG(OAL_INFO, (L"disable_dss+\r\n"));
; 373  : 
; 374  :      //OALMSG(OAL_INFO, (L"disable_dss-\r\n"));
; 375  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M48495|

			 ENDP  ; |disable_dss|

	EXPORT	|enable_lcd_power|
	IMPORT	|OALPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T48507| DCD	|$LN5@enable_lcd|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |enable_lcd_power| PROC

; 384  : {

  00000		 |$LN5@enable_lcd|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48504|
  00004	e3a03312	 mov         r3, #0x12, 6

; 385  :     OMAP_PRCM_DSS_CM_REGS *pPrcmRegs = OALPAtoUA(OMAP_PRCM_DSS_CM_REGS_PA);

  00008	e3830c4e	 orr         r0, r3, #0x4E, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a02000	 mov         r2, r0

; 386  :     
; 387  :      //OALMSG(OAL_INFO, (L"enable_lcd_power+\r\n"));
; 388  : 
; 389  :     SETREG32(&pPrcmRegs->CM_FCLKEN_DSS, (CM_CLKEN_DSS1 | CM_CLKEN_DSS2));

  00018	e5923000	 ldr         r3, [r2]

; 390  :     SETREG32(&pPrcmRegs->CM_ICLKEN_DSS, (CM_CLKEN_DSS));
; 391  : 
; 392  :      //OALMSG(OAL_INFO, (L"enable_lcd_power-\r\n"));
; 393  : 
; 394  :     return ERROR_SUCCESS;

  0001c	e3a00000	 mov         r0, #0
  00020	e3833003	 orr         r3, r3, #3
  00024	e5823000	 str         r3, [r2]
  00028	e5b23010	 ldr         r3, [r2, #0x10]!
  0002c	e3833001	 orr         r3, r3, #1
  00030	e5823000	 str         r3, [r2]

; 395  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M48505|

			 ENDP  ; |enable_lcd_power|

	EXPORT	|disable_lcd_power|

  00000			 AREA	 |.pdata|, PDATA
|$T48517| DCD	|$LN5@disable_lc|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |disable_lcd_power| PROC

; 404  : {

  00000		 |$LN5@disable_lc|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48514|
  00004	e3a03312	 mov         r3, #0x12, 6

; 405  :     OMAP_PRCM_DSS_CM_REGS *pPrcmRegs = OALPAtoUA(OMAP_PRCM_DSS_CM_REGS_PA);

  00008	e3830c4e	 orr         r0, r3, #0x4E, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a02000	 mov         r2, r0

; 406  : 
; 407  :      //OALMSG(OAL_INFO, (L"disable_lcd_power+\r\n"));
; 408  : 
; 409  :     CLRREG32(&pPrcmRegs->CM_FCLKEN_DSS, (CM_CLKEN_DSS1 | CM_CLKEN_DSS2));

  00018	e5923000	 ldr         r3, [r2]

; 410  :     CLRREG32(&pPrcmRegs->CM_ICLKEN_DSS, (CM_CLKEN_DSS));
; 411  :     
; 412  :      //OALMSG(OAL_INFO, (L"disable_lcd_power-\r\n"));
; 413  :     return ERROR_SUCCESS;

  0001c	e3a00000	 mov         r0, #0
  00020	e3c33003	 bic         r3, r3, #3
  00024	e5823000	 str         r3, [r2]
  00028	e5b23010	 ldr         r3, [r2, #0x10]!
  0002c	e3c33001	 bic         r3, r3, #1
  00030	e5823000	 str         r3, [r2]

; 414  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M48515|

			 ENDP  ; |disable_lcd_power|

	EXPORT	|enable_lcd_backlight|
	IMPORT	|TWLClose|
	IMPORT	|TWLOpen|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T48539| DCD	|$LN11@enable_lcd@2|
	DCD	0x40001f02
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\bootloader\display\bsp_logo.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |enable_lcd_backlight| PROC

; 423  : {

  00000		 |$LN11@enable_lcd@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M48536|

; 424  :     void* hTwl;
; 425  :     
; 426  :      //OALMSG(OAL_INFO, (L"enable_lcd_backlight+\r\n"));
; 427  : 
; 428  :     // Enable LEDA on TPS659XX
; 429  :     hTwl = TWLOpen();

  00008	eb000000	 bl          TWLOpen
  0000c	e3a05802	 mov         r5, #2, 16

; 430  : 
; 431  : #ifdef BSP_EVM2
; 432  :     TWLWriteByteReg(hTwl, TWL_LEDEN, 0x11);

  00010	e3a0e011	 mov         lr, #0x11
  00014	e38510ee	 orr         r1, r5, #0xEE
  00018	e3a03001	 mov         r3, #1
  0001c	e28d2000	 add         r2, sp, #0
  00020	e5cde000	 strb        lr, [sp]
  00024	e1a04000	 mov         r4, r0
  00028	eb000000	 bl          TWLWriteRegs

; 433  :     // Set PWM registers to same value to trigger 100% duty cycle
; 434  :     TWLWriteByteReg(hTwl, TWL_PWMAOFF, 0x00);

  0002c	e3a03000	 mov         r3, #0
  00030	e5cd3000	 strb        r3, [sp]
  00034	e3a03001	 mov         r3, #1
  00038	e28d2000	 add         r2, sp, #0
  0003c	e38510f0	 orr         r1, r5, #0xF0
  00040	e1a00004	 mov         r0, r4
  00044	eb000000	 bl          TWLWriteRegs

; 435  :     TWLWriteByteReg(hTwl, TWL_PWMAON, 0x00);

  00048	e3a03000	 mov         r3, #0
  0004c	e5cd3000	 strb        r3, [sp]
  00050	e3a03001	 mov         r3, #1
  00054	e28d2000	 add         r2, sp, #0
  00058	e38510ef	 orr         r1, r5, #0xEF
  0005c	e1a00004	 mov         r0, r4
  00060	eb000000	 bl          TWLWriteRegs

; 436  : #else
; 437  :     // The hardware design is completely backwards.  
; 438  :     // In order to get 100% brightness, the LEDPWM must 
; 439  :     // be disabled.
; 440  :     // Clear LEDAON, LEDAPWM
; 441  :     TWLWriteByteReg(hTwl, TWL_LEDEN, 0x00);
; 442  : #endif    
; 443  :     TWLClose(hTwl);

  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          TWLClose

; 444  :     
; 445  :      //OALMSG(OAL_INFO, (L"enable_lcd_backlight-\r\n"));
; 446  :     return ERROR_SUCCESS;

  0006c	e3a00000	 mov         r0, #0

; 447  : }

  00070	e28dd004	 add         sp, sp, #4
  00074	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$M48537|

			 ENDP  ; |enable_lcd_backlight|

	EXPORT	|disable_lcd_backlight|
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  00000			 AREA	 |.pdata|, PDATA
|$T48553| DCD	|$LN7@disable_lc@2|
	DCD	0x40001102
; Function compile flags: /Ogspy
; File c:\wince600\platform\evm_omap3530\src\bootloader\display\bsp_logo.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |disable_lcd_backlight| PROC

; 456  : {

  00000		 |$LN7@disable_lc@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M48550|

; 457  :     HANDLE hTwl;
; 458  : 
; 459  :      //OALMSG(OAL_INFO, (L"disable_lcd_backlight+\r\n"));
; 460  :     // Enable LEDA on TPS659XX
; 461  :     hTwl = TWLOpen();

  00008	eb000000	 bl          TWLOpen
  0000c	e3a01802	 mov         r1, #2, 16

; 462  : 
; 463  : #ifdef BSP_EVM2
; 464  :     TWLWriteByteReg(hTwl, TWL_LEDEN, 0x00);

  00010	e3a0e000	 mov         lr, #0
  00014	e38110ee	 orr         r1, r1, #0xEE
  00018	e3a03001	 mov         r3, #1
  0001c	e28d2000	 add         r2, sp, #0
  00020	e5cde000	 strb        lr, [sp]
  00024	e1a04000	 mov         r4, r0
  00028	eb000000	 bl          TWLWriteRegs

; 465  : #else
; 466  :     // The hardware design is completely backwards.  In order
; 467  :     // to disable the LED control signal, the LEDPWM signal must 
; 468  :     // be enabled 100%
; 469  :     // Set LEDAON, LEDAPWM
; 470  :     TWLWriteByteReg(hTwl, TWL_LEDEN, 0x11);
; 471  :     // Set PWM registers to same value to trigger 100% duty cycle
; 472  :     TWLWriteByteReg(hTwl, TWL_PWMAOFF, 0x00);
; 473  :     TWLWriteByteReg(hTwl, TWL_PWMAON, 0x00);
; 474  : #endif
; 475  :     
; 476  :     TWLClose(hTwl);

  0002c	e1a00004	 mov         r0, r4
  00030	eb000000	 bl          TWLClose

; 477  :      //OALMSG(OAL_INFO, (L"disable_lcd_backlight-\r\n"));
; 478  :     return ERROR_SUCCESS;

  00034	e3a00000	 mov         r0, #0

; 479  : }

  00038	e28dd004	 add         sp, sp, #4
  0003c	e8bd4010	 ldmia       sp!, {r4, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M48551|

			 ENDP  ; |disable_lcd_backlight|

	EXPORT	|configure_dss|
	IMPORT	|GPIOClose|
	IMPORT	|LcdPdd_LCD_Initialize|
	IMPORT	|GPIOOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T48564| DCD	|$LN5@configure_|
	DCD	0x40003c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |configure_dss| PROC

; 488  : {

  00000		 |$LN5@configure_|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M48561|
  00004	e1a05000	 mov         r5, r0
  00008	e3a03312	 mov         r3, #0x12, 6

; 489  :     OMAP_DSS_REGS   *pDSSRegs = OALPAtoUA(OMAP_DSS1_REGS_PA);

  0000c	e3830805	 orr         r0, r3, #5, 16
  00010	e3a01000	 mov         r1, #0
  00014	eb000000	 bl          OALPAtoVA
  00018	e1a04000	 mov         r4, r0

; 490  :     OMAP_DISPC_REGS *pDisplayRegs = OALPAtoUA(OMAP_DISC1_REGS_PA);

  0001c	e59f00c8	 ldr         r0, [pc, #0xC8]
  00020	e3a01000	 mov         r1, #0
  00024	eb000000	 bl          OALPAtoVA
  00028	e1a07000	 mov         r7, r0

; 491  :     HANDLE hGpio = GPIOOpen();

  0002c	eb000000	 bl          GPIOOpen

; 492  : 
; 493  :     // OALMSG(OAL_INFO, (L"configure_dss+\r\n"));
; 494  : 
; 495  :     //  Configure the clock source
; 496  :     OUTREG32( &pDSSRegs->DSS_CONTROL, 
; 497  :                 DSS_CONTROL_DISPC_CLK_SWITCH_DSS1_ALWON |
; 498  :                 DSS_CONTROL_DSI_CLK_SWITCH_DSS1_ALWON
; 499  :                 );

  00030	e3a03a01	 mov         r3, #1, 20
  00034	e3a09000	 mov         r9, #0

; 500  :     
; 501  :     //  Configure interconnect parameters
; 502  :     OUTREG32( &pDSSRegs->DSS_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE );
; 503  :     OUTREG32( &pDisplayRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_AUTOIDLE|SYSCONFIG_NOIDLE|SYSCONFIG_NOSTANDBY );

  00038	e3a08001	 mov         r8, #1
  0003c	e5849040	 str         r9, [r4, #0x40]
  00040	e3833009	 orr         r3, r3, #9
  00044	e5848010	 str         r8, [r4, #0x10]
  00048	e5873010	 str         r3, [r7, #0x10]
  0004c	e1a06000	 mov         r6, r0

; 504  : 
; 505  :     // Not enabling any interrupts
; 506  :     OUTREG32( &pDisplayRegs->DISPC_IRQENABLE, 0x00000000 );
; 507  :     
; 508  :     
; 509  :     //  Configure the LCD
; 510  :     LcdPdd_LCD_Initialize( pDSSRegs, pDisplayRegs, NULL, NULL);

  00050	e3a03000	 mov         r3, #0
  00054	e3a02000	 mov         r2, #0
  00058	e1a01007	 mov         r1, r7
  0005c	e1a00004	 mov         r0, r4
  00060	e587901c	 str         r9, [r7, #0x1C]
  00064	eb000000	 bl          LcdPdd_LCD_Initialize

; 511  :     	
; 512  :     //  Over-ride default LCD config
; 513  :     OUTREG32(&pDisplayRegs->DISPC_CONFIG,BSP_LCD_CONFIG);
; 514  :     
; 515  :     
; 516  :     // Configure Graphics Window
; 517  :     //--------------------------
; 518  :     
; 519  :     OUTREG32(&pDisplayRegs->DISPC_GFX_BA0 ,framebuffer );
; 520  :  
; 521  :     // configure the position of graphics window
; 522  :     OUTREG32(&pDisplayRegs->DISPC_GFX_POSITION,BSP_GFX_POS);

  00068	e59f3078	 ldr         r3, [pc, #0x78]
  0006c	e59f2070	 ldr         r2, [pc, #0x70]
  00070	e3a01f81	 mov         r1, #0x81, 30
  00074	e5871044	 str         r1, [r7, #0x44]
  00078	e5875080	 str         r5, [r7, #0x80]
  0007c	e5931000	 ldr         r1, [r3]
  00080	e5923000	 ldr         r3, [r2]

; 523  :     
; 524  :     // size of graphics window
; 525  :     OUTREG32(&pDisplayRegs->DISPC_GFX_SIZE,BSP_GFX_SIZE);

  00084	e59f2054	 ldr         r2, [pc, #0x54]
  00088	e59fe04c	 ldr         lr, [pc, #0x4C]
  0008c	e1813803	 orr         r3, r1, r3, lsl #16
  00090	e5873088	 str         r3, [r7, #0x88]
  00094	e5922000	 ldr         r2, [r2]
  00098	e59e3000	 ldr         r3, [lr]

; 526  :     
; 527  :     // GW Enabled, RGB24 packed, Little Endian
; 528  :     OUTREG32(&pDisplayRegs->DISPC_GFX_ATTRIBUTES,LOGO_GFX_ATTRIBUTES);
; 529  :     
; 530  :     OUTREG32(&pDisplayRegs->DISPC_GFX_FIFO_THRESHOLD,BSP_GFX_FIFO_THRESHOLD);
; 531  :     OUTREG32(&pDisplayRegs->DISPC_GFX_ROW_INC,BSP_GFX_ROW_INC); 
; 532  :     OUTREG32(&pDisplayRegs->DISPC_GFX_PIXEL_INC,BSP_GFX_PIXEL_INC); 
; 533  :     OUTREG32(&pDisplayRegs->DISPC_GFX_WINDOW_SKIP,BSP_GFX_WINDOW_SKIP);
; 534  : 
; 535  :     // OALMSG(OAL_INFO, (L"configure_dss-\r\n"));
; 536  : 
; 537  : 	GPIOClose(hGpio);

  0009c	e1a00006	 mov         r0, r6
  000a0	e2422001	 sub         r2, r2, #1
  000a4	e2433001	 sub         r3, r3, #1
  000a8	e1833802	 orr         r3, r3, r2, lsl #16
  000ac	e587308c	 str         r3, [r7, #0x8C]
  000b0	e3a03013	 mov         r3, #0x13
  000b4	e3a0273f	 mov         r2, #0x3F, 14
  000b8	e58730a0	 str         r3, [r7, #0xA0]
  000bc	e38230c0	 orr         r3, r2, #0xC0
  000c0	e58730a4	 str         r3, [r7, #0xA4]
  000c4	e58780ac	 str         r8, [r7, #0xAC]
  000c8	e58780b0	 str         r8, [r7, #0xB0]
  000cc	e58790b4	 str         r9, [r7, #0xB4]
  000d0	eb000000	 bl          GPIOClose

; 538  : }

  000d4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN6@configure_|
  000dc		 |$LN7@configure_|
  000dc	00000000	 DCD         |g_dwLogoWidth|
  000e0		 |$LN8@configure_|
  000e0	00000000	 DCD         |g_dwLogoHeight|
  000e4		 |$LN9@configure_|
  000e4	00000000	 DCD         |g_dwLogoPosY|
  000e8		 |$LN10@configure_|
  000e8	00000000	 DCD         |g_dwLogoPosX|
  000ec		 |$LN11@configure_|
  000ec	48050400	 DCD         0x48050400
  000f0		 |$M48562|

			 ENDP  ; |configure_dss|

	EXPORT	|display_lcd_image|
	IMPORT	|LcdPdd_SetPowerLevel|

  00000			 AREA	 |.pdata|, PDATA
|$T48584| DCD	|$LN15@display_lc|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |display_lcd_image| PROC

; 547  : {

  00000		 |$LN15@display_lc|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48581|

; 548  :     UINT8  count, timeout = DELAY_COUNT  ;
; 549  :     UINT16 ctrl;
; 550  :     OMAP_DISPC_REGS *pDisplayRegs = OALPAtoUA(OMAP_DISC1_REGS_PA);

  00004	e59f0054	 ldr         r0, [pc, #0x54]
  00008	e3a01000	 mov         r1, #0
  0000c	e3a04064	 mov         r4, #0x64
  00010	eb000000	 bl          OALPAtoVA

; 551  :     
; 552  :     // Apply display configuration
; 553  :     SETREG32(&pDisplayRegs->DISPC_CONTROL,DISPC_CONTROL_GOLCD);

  00014	e5903040	 ldr         r3, [r0, #0x40]
  00018	e3833020	 orr         r3, r3, #0x20
  0001c	e5803040	 str         r3, [r0, #0x40]
  00020		 |$LL7@display_lc|

; 554  :     
; 555  :     // wait for configuration to take effect
; 556  :     do
; 557  :     {
; 558  :         for(count=0;count<DELAY_COUNT;++count);

  00020	e3a03000	 mov         r3, #0
  00024		 |$LL4@display_lc|
  00024	e2833001	 add         r3, r3, #1
  00028	e20330ff	 and         r3, r3, #0xFF
  0002c	e3530064	 cmp         r3, #0x64
  00030	3afffffb	 bcc         |$LL4@display_lc|

; 559  :         ctrl=INREG16(&pDisplayRegs->DISPC_CONTROL);

  00034	e1d024b0	 ldrh        r2, [r0, #0x40]

; 560  :         timeout-- ;

  00038	e28430ff	 add         r3, r4, #0xFF
  0003c	e20340ff	 and         r4, r3, #0xFF

; 561  :     }
; 562  :     while((ctrl & DISPC_CONTROL_GOLCD) && (timeout > 0));

  00040	e3120020	 tst         r2, #0x20
  00044	0a000001	 beq         |$LN1@display_lc|
  00048	e3540000	 cmp         r4, #0
  0004c	1afffff3	 bne         |$LL7@display_lc|
  00050		 |$LN1@display_lc|

; 563  :     
; 564  :     // Power up and start scanning
; 565  :     LcdPdd_SetPowerLevel(D0);   

  00050	e3a00000	 mov         r0, #0
  00054	eb000000	 bl          LcdPdd_SetPowerLevel

; 566  :     
; 567  :      //OALMSG(OAL_INFO, (L"display_lcd_image-\r\n"));
; 568  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN16@display_lc|
  00060		 |$LN17@display_lc|
  00060	48050400	 DCD         0x48050400
  00064		 |$M48582|

			 ENDP  ; |display_lcd_image|

	EXPORT	|LcdStall|
	IMPORT	|OALStall|

  00000			 AREA	 |.pdata|, PDATA
|$T48594| DCD	|$LN5@LcdStall|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdStall| PROC

; 572  : {

  00000		 |$LN5@LcdStall|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48591|

; 573  :     OALStall(dwMicroseconds);

  00004	eb000000	 bl          OALStall

; 574  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M48592|

			 ENDP  ; |LcdStall|

	EXPORT	|LcdSleep|

  00000			 AREA	 |.pdata|, PDATA
|$T48602| DCD	|$LN5@LcdSleep|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LcdSleep| PROC

; 577  : {

  00000		 |$LN5@LcdSleep|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48599|

; 578  :     OALStall(1000 * dwMilliseconds);

  00004	e3a02ffa	 mov         r2, #0xFA, 30
  00008	e0000092	 mul         r0, r2, r0
  0000c	eb000000	 bl          OALStall

; 579  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M48600|

			 ENDP  ; |LcdSleep|

	EXPORT	|reset_display_controller|

  00000			 AREA	 |.pdata|, PDATA
|$T48628| DCD	|$LN20@reset_disp|
	DCD	0x40002901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |reset_display_controller| PROC

; 273  : {

  00000		 |$LN20@reset_disp|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M48625|
  00004	e3a03312	 mov         r3, #0x12, 6

; 274  :     
; 275  :     UINT32 reg_val;
; 276  :     UINT16 count;
; 277  :     UINT32 timeout;
; 278  :     UINT32 fclk, iclk;
; 279  :     OMAP_PRCM_DSS_CM_REGS *pPrcmRegs = OALPAtoUA(OMAP_PRCM_DSS_CM_REGS_PA);

  00008	e3830c4e	 orr         r0, r3, #0x4E, 24
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA
  00014	e1a04000	 mov         r4, r0

; 280  :     OMAP_DISPC_REGS  *pDisplayRegs = OALPAtoUA(OMAP_DISC1_REGS_PA);

  00018	e59f0080	 ldr         r0, [pc, #0x80]
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          OALPAtoVA

; 281  :     
; 282  :      //OALMSG(OAL_INFO, (L"reset_display_controller+\r\n"));
; 283  : 
; 284  :     // enable all display clocks
; 285  :     fclk = INREG32(&pPrcmRegs->CM_FCLKEN_DSS);
; 286  :     iclk = INREG32(&pPrcmRegs->CM_ICLKEN_DSS);

  00024	e594e000	 ldr         lr, [r4]
  00028	e1a01004	 mov         r1, r4
  0002c	e5b15010	 ldr         r5, [r1, #0x10]!

; 287  : 
; 288  :     OUTREG32(&pPrcmRegs->CM_FCLKEN_DSS, (fclk | CM_CLKEN_DSS1 | CM_CLKEN_DSS2 | CM_CLKEN_TV));

  00030	e38e3007	 orr         r3, lr, #7
  00034	e5843000	 str         r3, [r4]

; 289  :     OUTREG32(&pPrcmRegs->CM_ICLKEN_DSS, (iclk | CM_CLKEN_DSS));
; 290  :   
; 291  :     // disable the display controller
; 292  :     disable_dss();
; 293  : 
; 294  :     // reset the display controller
; 295  :     OUTREG32(&pDisplayRegs->DISPC_SYSCONFIG, DISPC_SYSCONFIG_SOFTRESET);
; 296  :     
; 297  :     // wait until reset completes OR timeout occurs
; 298  :     timeout=10000;
; 299  :     while(!((reg_val=INREG32(&pDisplayRegs->DISPC_SYSSTATUS)) & DISPC_SYSSTATUS_RESETDONE) && (timeout > 0))

  00038	e3a02c27	 mov         r2, #0x27, 24
  0003c	e3853001	 orr         r3, r5, #1
  00040	e5813000	 str         r3, [r1]
  00044	e3a03002	 mov         r3, #2
  00048	e5803010	 str         r3, [r0, #0x10]
  0004c	e3822010	 orr         r2, r2, #0x10
  00050	ea000008	 b           |$LN17@reset_disp|
  00054		 |$LL6@reset_disp|
  00054	e3520000	 cmp         r2, #0
  00058	0a000009	 beq         |$LN15@reset_disp|

; 300  :     {
; 301  :         // delay
; 302  :         for(count=0;count<DELAY_COUNT;++count);

  0005c	e3a03000	 mov         r3, #0
  00060		 |$LL4@reset_disp|
  00060	e2833001	 add         r3, r3, #1
  00064	e1a03803	 mov         r3, r3, lsl #16
  00068	e1a03823	 mov         r3, r3, lsr #16
  0006c	e3530064	 cmp         r3, #0x64
  00070	3afffffa	 bcc         |$LL4@reset_disp|

; 303  :         timeout--;

  00074	e2422001	 sub         r2, r2, #1
  00078		 |$LN17@reset_disp|

; 300  :     {
; 301  :         // delay
; 302  :         for(count=0;count<DELAY_COUNT;++count);

  00078	e5903014	 ldr         r3, [r0, #0x14]

; 303  :         timeout--;

  0007c	e3130001	 tst         r3, #1
  00080	0afffff3	 beq         |$LL6@reset_disp|
  00084		 |$LN15@reset_disp|

; 304  :     }
; 305  : 
; 306  :     if(!(reg_val & DISPC_SYSSTATUS_RESETDONE))
; 307  :     {
; 308  :         // OALMSG(OAL_INFO, (L"reset_display_controller: DSS reset timeout\r\n"));
; 309  :     }
; 310  :     
; 311  :     reg_val=INREG32(&pDisplayRegs->DISPC_SYSCONFIG);

  00084	e5903010	 ldr         r3, [r0, #0x10]

; 312  :     reg_val &=~(DISPC_SYSCONFIG_SOFTRESET);

  00088	e3c33002	 bic         r3, r3, #2

; 313  :     OUTREG32(&pDisplayRegs->DISPC_SYSCONFIG,reg_val);

  0008c	e5803010	 str         r3, [r0, #0x10]

; 314  : 
; 315  : 
; 316  :     // restore old clock settings
; 317  :     OUTREG32(&pPrcmRegs->CM_FCLKEN_DSS, fclk);

  00090	e584e000	 str         lr, [r4]

; 318  :     OUTREG32(&pPrcmRegs->CM_ICLKEN_DSS, iclk);

  00094	e5815000	 str         r5, [r1]

; 319  :     
; 320  :      //OALMSG(OAL_INFO, (L"reset_display_controller-\r\n"));
; 321  : }

  00098	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN21@reset_disp|
  000a0		 |$LN22@reset_disp|
  000a0	48050400	 DCD         0x48050400
  000a4		 |$M48626|

			 ENDP  ; |reset_display_controller|

	EXPORT	|lcd_config|
	IMPORT	|IsDVIMode|

  00000			 AREA	 |.pdata|, PDATA
|$T48638| DCD	|$LN7@lcd_config|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |lcd_config| PROC

; 330  : {    

  00000		 |$LN7@lcd_config|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M48635|
  00004	e1a04000	 mov         r4, r0

; 331  :     reset_display_controller();

  00008	eb000000	 bl          reset_display_controller

; 332  : 
; 333  :     // Enable LCD clocks
; 334  :     enable_lcd_power();

  0000c	eb000000	 bl          enable_lcd_power

; 335  : 
; 336  :     // Configure the DSS registers
; 337  :     configure_dss(framebuffer);

  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          configure_dss

; 338  :       
; 339  :     // Display data on LCD
; 340  :     display_lcd_image() ;

  00018	eb000000	 bl          display_lcd_image

; 341  :     
; 342  :     if (IsDVIMode())

  0001c	eb000000	 bl          IsDVIMode
  00020	e3500000	 cmp         r0, #0
  00024	0a000002	 beq         |$LN2@lcd_config|

; 343  :         // DVI is selected, disable backlight
; 344  :         disable_lcd_backlight();

  00028	eb000000	 bl          disable_lcd_backlight

; 348  : 
; 349  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN2@lcd_config|

; 345  :     else
; 346  :         // Turn on backlight last
; 347  :         enable_lcd_backlight();

  00034	eb000000	 bl          enable_lcd_backlight

; 348  : 
; 349  : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M48636|

			 ENDP  ; |lcd_config|

	EXPORT	|lcd_shutdown|

  00000			 AREA	 |.pdata|, PDATA
|$T48645| DCD	|$LN5@lcd_shutdo|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |lcd_shutdown| PROC

; 358  : {

  00000		 |$LN5@lcd_shutdo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48642|

; 359  :     disable_lcd_backlight();

  00004	eb000000	 bl          disable_lcd_backlight

; 360  :     LcdPdd_SetPowerLevel(D4);

  00008	e3a00004	 mov         r0, #4
  0000c	eb000000	 bl          LcdPdd_SetPowerLevel

; 361  :     disable_lcd_power();

  00010	eb000000	 bl          disable_lcd_power

; 362  : }   

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M48643|

			 ENDP  ; |lcd_shutdown|

	EXPORT	|ShowLogo|
	IMPORT	|OALFlashStoreClose|
	IMPORT	|OALFlashStoreBufferedRead|
	IMPORT	|OALFlashStoreOpen|
	IMPORT	|LcdPdd_GetMemory|
	IMPORT	|LcdPdd_LCD_GetMode|

  00000			 AREA	 |.pdata|, PDATA
|$T48687| DCD	|$LN39@ShowLogo|
	DCD	0x40009302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ShowLogo| PROC

; 103  : {

  00000		 |$LN39@ShowLogo|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M48684|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a05000	 mov         r5, r0

; 104  :     HANDLE  hFlash = NULL;
; 105  :     DWORD  framebuffer;
; 106  :     DWORD  framebufferPA;
; 107  :     PUCHAR  pChar;
; 108  :     ULONG   x, y;
; 109  :     WORD    wSignature = 0;

  00010	e3a03000	 mov         r3, #0

; 110  :     DWORD   dwOffset = 0;

  00014	e3a02000	 mov         r2, #0
  00018	e1cd30b4	 strh        r3, [sp, #4]
  0001c	e58d2010	 str         r2, [sp, #0x10]

; 111  :     DWORD   dwLcdWidth,
; 112  :             dwLcdHeight;
; 113  :     DWORD   dwLength;
; 114  : 
; 115  : 
; 116  :     //  Get the LCD width and height
; 117  :     LcdPdd_LCD_GetMode( NULL, &dwLcdWidth, &dwLcdHeight, NULL );

  00020	e3a03000	 mov         r3, #0
  00024	e28d2008	 add         r2, sp, #8
  00028	e28d100c	 add         r1, sp, #0xC
  0002c	e3a00000	 mov         r0, #0
  00030	eb000000	 bl          LcdPdd_LCD_GetMode

; 118  : 
; 119  :     dwLength = BYTES_PER_PIXEL * LOGO_WIDTH * LOGO_HEIGHT;
; 120  : 
; 121  :     //  Get the video memory
; 122  :     LcdPdd_GetMemory( NULL, &framebufferPA );

  00034	e28d1014	 add         r1, sp, #0x14
  00038	e3a00000	 mov         r0, #0
  0003c	eb000000	 bl          LcdPdd_GetMemory

; 123  :     framebuffer = (DWORD) OALPAtoUA(framebufferPA);

  00040	e59d0014	 ldr         r0, [sp, #0x14]
  00044	e3a01000	 mov         r1, #0
  00048	eb000000	 bl          OALPAtoVA

; 124  :     pChar = (PUCHAR)framebuffer;
; 125  :     
; 126  :     if (flashAddr != -1)

  0004c	e3a03c4d	 mov         r3, #0x4D, 24
  00050	e59f91f0	 ldr         r9, [pc, #0x1F0]
  00054	e59fa1e8	 ldr         r10, [pc, #0x1E8]
  00058	e59fb1e0	 ldr         r11, [pc, #0x1E0]
  0005c	e59f81d8	 ldr         r8, [pc, #0x1D8]
  00060	e3837042	 orr         r7, r3, #0x42
  00064	e1a04000	 mov         r4, r0
  00068	e3a0e000	 mov         lr, #0
  0006c	e3750001	 cmn         r5, #1
  00070	0a000041	 beq         |$LN19@ShowLogo|

; 127  :     {
; 128  :         // Open flash storage
; 129  :         hFlash = OALFlashStoreOpen(flashAddr);

  00074	e1a00005	 mov         r0, r5
  00078	eb000000	 bl          OALFlashStoreOpen
  0007c	e1b05000	 movs        r5, r0

; 130  :         if( hFlash != NULL )
; 131  :         {
; 132  :             //  The LOGO reserved NAND flash region contains the BMP file
; 133  :             OALFlashStoreBufferedRead( hFlash, offset, (UCHAR*) &wSignature, sizeof(wSignature), FALSE );

  00080	e3a0e000	 mov         lr, #0
  00084	0a00003c	 beq         |$LN19@ShowLogo|
  00088	e3a03002	 mov         r3, #2
  0008c	e28d2004	 add         r2, sp, #4
  00090	e1a01006	 mov         r1, r6
  00094	e1a00005	 mov         r0, r5
  00098	e58de000	 str         lr, [sp]
  0009c	eb000000	 bl          OALFlashStoreBufferedRead

; 134  : 
; 135  :             //  Check for 'BM' signature
; 136  :             if( wSignature == 0x4D42 )  

  000a0	e1dd30b4	 ldrh        r3, [sp, #4]
  000a4	e1530007	 cmp         r3, r7
  000a8	1a00000e	 bne         |$LN14@ShowLogo|

; 137  :             {
; 138  :                 //  Read the offset to the pixel data
; 139  :                 OALFlashStoreBufferedRead( hFlash, offset + 10, (UCHAR*) &dwOffset, sizeof(dwOffset), FALSE );

  000ac	e3a0e000	 mov         lr, #0
  000b0	e3a03004	 mov         r3, #4
  000b4	e28d2010	 add         r2, sp, #0x10
  000b8	e286100a	 add         r1, r6, #0xA
  000bc	e1a00005	 mov         r0, r5
  000c0	e58de000	 str         lr, [sp]
  000c4	eb000000	 bl          OALFlashStoreBufferedRead

; 140  : 
; 141  :                 //  Read the pixel data with the given offset
; 142  :                 OALFlashStoreBufferedRead( hFlash, offset + dwOffset, pChar, dwLength, FALSE );

  000c8	e59d1010	 ldr         r1, [sp, #0x10]
  000cc	e3a0e000	 mov         lr, #0
  000d0	e3a03ae1	 mov         r3, #0xE1, 20
  000d4	e0811006	 add         r1, r1, r6
  000d8	e1a02004	 mov         r2, r4
  000dc	e1a00005	 mov         r0, r5
  000e0	e58de000	 str         lr, [sp]
  000e4	eb000000	 bl          OALFlashStoreBufferedRead
  000e8		 |$LN14@ShowLogo|

; 143  :             }
; 144  :            
; 145  :             //  Close store
; 146  :             OALFlashStoreClose(hFlash);

  000e8	e1a00005	 mov         r0, r5
  000ec	eb000000	 bl          OALFlashStoreClose

; 147  :         
; 148  :             //  Compute position and size of logo image 
; 149  :             g_dwLogoPosX   = (dwLcdWidth - LOGO_WIDTH)/2;

  000f0	e59d300c	 ldr         r3, [sp, #0xC]

; 150  :             g_dwLogoPosY   = (dwLcdHeight - LOGO_HEIGHT)/2;

  000f4	e59d2008	 ldr         r2, [sp, #8]
  000f8	e3a0180e	 mov         r1, #0xE, 16
  000fc	e2433e1e	 sub         r3, r3, #0x1E, 28
  00100	e2422d0a	 sub         r2, r2, #0xA, 26
  00104	e1a030a3	 mov         r3, r3, lsr #1
  00108	e1a020a2	 mov         r2, r2, lsr #1

; 151  :             g_dwLogoWidth  = LOGO_WIDTH;

  0010c	e3a00e1e	 mov         r0, #0x1E, 28

; 152  :             g_dwLogoHeight = LOGO_HEIGHT;

  00110	e3a0ed0a	 mov         lr, #0xA, 26

; 153  :             
; 154  :             //As BMP are stored upside down, we need to flip the frame buffer's content
; 155  :             FlipFrameBuffer((PUCHAR)framebuffer,LOGO_HEIGHT,LOGO_WIDTH*BYTES_PER_PIXEL,(PUCHAR)framebuffer + dwLength);

  00114	e3811ea6	 orr         r1, r1, #0xA6, 28
  00118	e5883000	 str         r3, [r8]
  0011c	e3a08d05	 mov         r8, #5, 26
  00120	e58b2000	 str         r2, [r11]
  00124	e58a0000	 str         r0, [r10]
  00128	e589e000	 str         lr, [r9]
  0012c	e1a05004	 mov         r5, r4
  00130	e0846001	 add         r6, r4, r1
  00134		 |$LL21@ShowLogo|
  00134	e3a02e5a	 mov         r2, #0x5A, 28
  00138	e1a01005	 mov         r1, r5
  0013c	e2840ae1	 add         r0, r4, #0xE1, 20
  00140	eb000000	 bl          memcpy
  00144	e3a02e5a	 mov         r2, #0x5A, 28
  00148	e1a01006	 mov         r1, r6
  0014c	e1a00005	 mov         r0, r5
  00150	eb000000	 bl          memcpy
  00154	e3a02e5a	 mov         r2, #0x5A, 28
  00158	e2841ae1	 add         r1, r4, #0xE1, 20
  0015c	e1a00006	 mov         r0, r6
  00160	eb000000	 bl          memcpy
  00164	e2855e5a	 add         r5, r5, #0x5A, 28
  00168	e2466e5a	 sub         r6, r6, #0x5A, 28
  0016c	e2588001	 subs        r8, r8, #1
  00170	1affffef	 bne         |$LL21@ShowLogo|
  00174	e59f80c0	 ldr         r8, [pc, #0xC0]
  00178	e3a0e000	 mov         lr, #0
  0017c		 |$LN19@ShowLogo|

; 156  :         }
; 157  :     }
; 158  : 
; 159  :     //  If bitmap signature is valid, display the logo, otherwise fill screen with pattern
; 160  :     if( wSignature != 0x4D42 )

  0017c	e1dd30b4	 ldrh        r3, [sp, #4]
  00180	e1530007	 cmp         r3, r7
  00184	0a000027	 beq         |$LN10@ShowLogo|

; 161  :     {
; 162  :         //  Adjust color bars to LCD size
; 163  :         g_dwLogoPosX   = 0;
; 164  :         g_dwLogoPosY   = 0;
; 165  :         g_dwLogoWidth  = dwLcdWidth;

  00188	e59d300c	 ldr         r3, [sp, #0xC]

; 166  :         g_dwLogoHeight = dwLcdHeight;

  0018c	e59d2008	 ldr         r2, [sp, #8]
  00190	e3a00000	 mov         r0, #0
  00194	e3a01000	 mov         r1, #0
  00198	e58b0000	 str         r0, [r11]
  0019c	e58a3000	 str         r3, [r10]
  001a0	e5892000	 str         r2, [r9]

; 167  :         
; 168  :         for (y= 0; y < dwLcdHeight; y++)

  001a4	e3520000	 cmp         r2, #0
  001a8	e5881000	 str         r1, [r8]
  001ac	e3a00000	 mov         r0, #0
  001b0	0a00001c	 beq         |$LN10@ShowLogo|
  001b4	e3a050ff	 mov         r5, #0xFF
  001b8		 |$LL12@ShowLogo|

; 169  :         {
; 170  :             for( x = 0; x < dwLcdWidth; x++ )

  001b8	e3a01000	 mov         r1, #0
  001bc	e3530000	 cmp         r3, #0
  001c0	0a000015	 beq         |$LN11@ShowLogo|
  001c4		 |$LL9@ShowLogo|

; 171  :             {
; 172  :                 if( y < dwLcdHeight/2 )

  001c4	e15000a2	 cmp         r0, r2, lsr #1
  001c8	2a000006	 bcs         |$LN6@ShowLogo|

; 173  :                 {
; 174  :                     if( x < dwLcdWidth/2 )
; 175  :                     {
; 176  :                         *pChar++ = 0x00;    //  Blue

  001cc	e4c4e001	 strb        lr, [r4], #1
  001d0	e15100a3	 cmp         r1, r3, lsr #1

; 177  :                         *pChar++ = 0x00;    //  Green

  001d4	34c4e001	 strccb      lr, [r4], #1
  001d8	3a000009	 bcc         |$LN35@ShowLogo|

; 178  :                         *pChar++ = 0xFF;    //  Red
; 179  :                     }
; 180  :                     else
; 181  :                     {
; 182  :                         *pChar++ = 0x00;    //  Blue
; 183  :                         *pChar++ = 0xFF;    //  Green

  001dc	e4c45001	 strb        r5, [r4], #1

; 193  :                         *pChar++ = 0x00;    //  Red

  001e0	e4c4e001	 strb        lr, [r4], #1

; 194  :                     }
; 195  :                     else

  001e4	ea000007	 b           |$LN8@ShowLogo|
  001e8		 |$LN6@ShowLogo|

; 184  :                         *pChar++ = 0x00;    //  Red
; 185  :                     }
; 186  :                 }
; 187  :                 else
; 188  :                 {
; 189  :                     if( x < dwLcdWidth/2 )

  001e8	e15100a3	 cmp         r1, r3, lsr #1

; 190  :                     {
; 191  :                         *pChar++ = 0xFF;    //  Blue

  001ec	34c45001	 strccb      r5, [r4], #1

; 192  :                         *pChar++ = 0x00;    //  Green

  001f0	34c4e001	 strccb      lr, [r4], #1

; 193  :                         *pChar++ = 0x00;    //  Red

  001f4	34c4e001	 strccb      lr, [r4], #1
  001f8	3a000002	 bcc         |$LN8@ShowLogo|

; 196  :                     {
; 197  :                         *pChar++ = 0x00;    //  Blue

  001fc	e4c4e001	 strb        lr, [r4], #1

; 198  :                         *pChar++ = 0xFF;    //  Green

  00200	e4c45001	 strb        r5, [r4], #1
  00204		 |$LN35@ShowLogo|

; 199  :                         *pChar++ = 0xFF;    //  Red

  00204	e4c45001	 strb        r5, [r4], #1
  00208		 |$LN8@ShowLogo|
  00208	e59d300c	 ldr         r3, [sp, #0xC]
  0020c	e2811001	 add         r1, r1, #1
  00210	e59d2008	 ldr         r2, [sp, #8]
  00214	e1510003	 cmp         r1, r3
  00218	3affffe9	 bcc         |$LL9@ShowLogo|
  0021c		 |$LN11@ShowLogo|

; 167  :         
; 168  :         for (y= 0; y < dwLcdHeight; y++)

  0021c	e2800001	 add         r0, r0, #1
  00220	e1500002	 cmp         r0, r2
  00224	3affffe3	 bcc         |$LL12@ShowLogo|
  00228		 |$LN10@ShowLogo|

; 200  :                     }
; 201  :                 }
; 202  :             }
; 203  :         }
; 204  :     }
; 205  : 
; 206  :     //  Fire up the LCD
; 207  :     lcd_config(framebufferPA);       

  00228	e59d0014	 ldr         r0, [sp, #0x14]
  0022c	eb000000	 bl          lcd_config

; 208  : }

  00230	e28dd018	 add         sp, sp, #0x18
  00234	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00238	e12fff1e	 bx          lr
  0023c		 |$LN40@ShowLogo|
  0023c		 |$LN41@ShowLogo|
  0023c	00000000	 DCD         |g_dwLogoPosX|
  00240		 |$LN42@ShowLogo|
  00240	00000000	 DCD         |g_dwLogoPosY|
  00244		 |$LN43@ShowLogo|
  00244	00000000	 DCD         |g_dwLogoWidth|
  00248		 |$LN44@ShowLogo|
  00248	00000000	 DCD         |g_dwLogoHeight|
  0024c		 |$M48685|

			 ENDP  ; |ShowLogo|

	EXPORT	|ShowSDLogo|
	EXPORT	|??_C@_1BC@CGOCCNEI@?$AAL?$AAo?$AAg?$AAo?$AA?4?$AAb?$AAm?$AAp?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|BLSDCardReadLogo|

  00000			 AREA	 |.pdata|, PDATA
|$T48717| DCD	|$LN13@ShowSDLogo|
	DCD	0x40004b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@CGOCCNEI@?$AAL?$AAo?$AAg?$AAo?$AA?4?$AAb?$AAm?$AAp?$AA?$AA@| DCB "L"
	DCB	0x0, "o", 0x0, "g", 0x0, "o", 0x0, ".", 0x0, "b", 0x0, "m"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ShowSDLogo| PROC

; 218  : {

  00000		 |$LN13@ShowSDLogo|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M48714|

; 219  :     DWORD framebuffer = 0;
; 220  :     DWORD  framebufferPA = 0;

  00008	e3a03000	 mov         r3, #0

; 221  :     DWORD dwLcdWidth = 0;

  0000c	e3a02000	 mov         r2, #0

; 222  :     DWORD dwLcdHeight = 0;

  00010	e3a01000	 mov         r1, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e58d2004	 str         r2, [sp, #4]
  0001c	e58d1008	 str         r1, [sp, #8]

; 223  : 	DWORD dwLength = 0;
; 224  : 
; 225  :     // Get the LCD width and height
; 226  :     LcdPdd_LCD_GetMode( NULL, &dwLcdWidth, &dwLcdHeight, NULL );

  00020	e3a03000	 mov         r3, #0
  00024	e28d2008	 add         r2, sp, #8
  00028	e28d1004	 add         r1, sp, #4
  0002c	e3a00000	 mov         r0, #0
  00030	eb000000	 bl          LcdPdd_LCD_GetMode

; 227  : 
; 228  : 	// Get the frame buffer
; 229  : 	LcdPdd_GetMemory( NULL, &framebufferPA );

  00034	e28d1000	 add         r1, sp, #0
  00038	e3a00000	 mov         r0, #0
  0003c	eb000000	 bl          LcdPdd_GetMemory

; 230  :     framebuffer = (DWORD) OALPAtoUA(framebufferPA);

  00040	e59d0000	 ldr         r0, [sp]
  00044	e3a01000	 mov         r1, #0
  00048	eb000000	 bl          OALPAtoVA
  0004c	e1a06000	 mov         r6, r0

; 231  : 
; 232  : 	// Compute the size
; 233  : 	dwLength = BYTES_PER_PIXEL * LOGO_WIDTH * LOGO_HEIGHT;
; 234  : 
; 235  : 	if (!BLSDCardReadLogo(L"Logo.bmp", (UCHAR*)framebuffer, dwLength))

  00050	e59f00d0	 ldr         r0, [pc, #0xD0]
  00054	e3a02ae1	 mov         r2, #0xE1, 20
  00058	e1a01006	 mov         r1, r6
  0005c	eb000000	 bl          BLSDCardReadLogo
  00060	e3500000	 cmp         r0, #0

; 236  : 	{
; 237  : 		return FALSE;

  00064	03a00000	 moveq       r0, #0
  00068	0a000027	 beq         |$LN2@ShowSDLogo|

; 238  : 	}
; 239  : 
; 240  :     //  Compute position and size of logo image 
; 241  :     g_dwLogoPosX   = (dwLcdWidth - LOGO_WIDTH)/2;

  0006c	e59d3004	 ldr         r3, [sp, #4]

; 242  :     g_dwLogoPosY   = (dwLcdHeight - LOGO_HEIGHT)/2;

  00070	e59d2008	 ldr         r2, [sp, #8]
  00074	e59f50a8	 ldr         r5, [pc, #0xA8]

; 243  :     g_dwLogoWidth  = LOGO_WIDTH;

  00078	e59fe0a0	 ldr         lr, [pc, #0xA0]

; 244  :     g_dwLogoHeight = LOGO_HEIGHT;

  0007c	e59f4098	 ldr         r4, [pc, #0x98]
  00080	e59f0090	 ldr         r0, [pc, #0x90]
  00084	e2433e1e	 sub         r3, r3, #0x1E, 28
  00088	e2422d0a	 sub         r2, r2, #0xA, 26
  0008c	e3a0180e	 mov         r1, #0xE, 16
  00090	e1a030a3	 mov         r3, r3, lsr #1
  00094	e3a07e1e	 mov         r7, #0x1E, 28
  00098	e3a08d0a	 mov         r8, #0xA, 26
  0009c	e1a020a2	 mov         r2, r2, lsr #1

; 245  : 
; 246  :     //As BMP are stored upside down, we need to flip the frame buffer's content
; 247  :     FlipFrameBuffer((PUCHAR)framebuffer,LOGO_HEIGHT,LOGO_WIDTH*BYTES_PER_PIXEL,(PUCHAR)framebuffer + dwLength);

  000a0	e3811ea6	 orr         r1, r1, #0xA6, 28
  000a4	e5853000	 str         r3, [r5]
  000a8	e58e7000	 str         r7, [lr]
  000ac	e5848000	 str         r8, [r4]
  000b0	e2865ae1	 add         r5, r6, #0xE1, 20
  000b4	e5802000	 str         r2, [r0]
  000b8	e0864001	 add         r4, r6, r1
  000bc	e3a07d05	 mov         r7, #5, 26
  000c0		 |$LL6@ShowSDLogo|
  000c0	e3a02e5a	 mov         r2, #0x5A, 28
  000c4	e1a01006	 mov         r1, r6
  000c8	e1a00005	 mov         r0, r5
  000cc	eb000000	 bl          memcpy
  000d0	e3a02e5a	 mov         r2, #0x5A, 28
  000d4	e1a01004	 mov         r1, r4
  000d8	e1a00006	 mov         r0, r6
  000dc	eb000000	 bl          memcpy
  000e0	e3a02e5a	 mov         r2, #0x5A, 28
  000e4	e1a01005	 mov         r1, r5
  000e8	e1a00004	 mov         r0, r4
  000ec	eb000000	 bl          memcpy
  000f0	e2866e5a	 add         r6, r6, #0x5A, 28
  000f4	e2444e5a	 sub         r4, r4, #0x5A, 28
  000f8	e2577001	 subs        r7, r7, #1
  000fc	1affffef	 bne         |$LL6@ShowSDLogo|

; 248  : 
; 249  :     //  Fire up the LCD
; 250  :     lcd_config(framebufferPA);

  00100	e59d0000	 ldr         r0, [sp]
  00104	eb000000	 bl          lcd_config

; 251  : 
; 252  : 	return TRUE;

  00108	e3a00001	 mov         r0, #1
  0010c		 |$LN2@ShowSDLogo|

; 253  : }

  0010c	e28dd00c	 add         sp, sp, #0xC
  00110	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$LN14@ShowSDLogo|
  00118		 |$LN15@ShowSDLogo|
  00118	00000000	 DCD         |g_dwLogoPosY|
  0011c		 |$LN16@ShowSDLogo|
  0011c	00000000	 DCD         |g_dwLogoHeight|
  00120		 |$LN17@ShowSDLogo|
  00120	00000000	 DCD         |g_dwLogoWidth|
  00124		 |$LN18@ShowSDLogo|
  00124	00000000	 DCD         |g_dwLogoPosX|
  00128		 |$LN19@ShowSDLogo|
  00128	00000000	 DCD         |??_C@_1BC@CGOCCNEI@?$AAL?$AAo?$AAg?$AAo?$AA?4?$AAb?$AAm?$AAp?$AA?$AA@|
  0012c		 |$M48715|

			 ENDP  ; |ShowSDLogo|

	EXPORT	|HideLogo|

  00000			 AREA	 |.pdata|, PDATA
|$T48733| DCD	|$LN7@HideLogo|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HideLogo| PROC

; 262  : {

  00000		 |$LN7@HideLogo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M48730|

; 263  :     lcd_shutdown();

  00004	eb000000	 bl          disable_lcd_backlight
  00008	e3a00004	 mov         r0, #4
  0000c	eb000000	 bl          LcdPdd_SetPowerLevel
  00010	eb000000	 bl          disable_lcd_power

; 264  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M48731|

			 ENDP  ; |HideLogo|

	END
