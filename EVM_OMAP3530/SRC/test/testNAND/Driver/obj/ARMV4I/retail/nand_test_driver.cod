; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\EVM_OMAP3530\SRC\test\testNAND\Driver\nand_test_driver.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|nand_ecc_test|
	EXPORT	|??_C@_1MC@PIPHFCFE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAn?$AAa?$AAn?$AAd?$AA_?$AAe?$AAc?$AAc?$AA_?$AAt?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAE?$AAA?$AAD?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|FMD_ReadSector|
	IMPORT	|FMD_WriteSector|
	IMPORT	|FMD_EraseBlock|
	IMPORT	|FMD_GetInfo|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memcpy|
	IMPORT	|memcmp|
	IMPORT	|__rt_udiv|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\evm_omap3530\src\test\testnand\driver\nand_test_driver.c

  00000			 AREA	 |.pdata|, PDATA
|$T45972| DCD	|$LN13@nand_ecc_t|
	DCD	0xc0005503

  00000			 AREA	 |.xdata|, DATA
|$T45968| DCD	0xffffffe8

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MC@PIPHFCFE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAn?$AAa?$AAn?$AAd?$AA_?$AAe?$AAc?$AAc?$AA_?$AAt?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAE?$AAA?$AAD?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "n", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "_", 0x0, "e"
	DCB	0x0, "c", 0x0, "c", 0x0, "_", 0x0, "t", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "R", 0x0, "E", 0x0, "A", 0x0, "D"
	DCB	0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " "
	DCB	0x0, "a", 0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "d"
	DCB	0x0, "o", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "t", 0x0, "c"
	DCB	0x0, "h", 0x0, " ", 0x0, "g", 0x0, "o", 0x0, "o", 0x0, "d"
	DCB	0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45968|

  00008		 |nand_ecc_test| PROC

; 56   : {

  00008		 |$LN13@nand_ecc_t|
  00008	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  0000c	e59fc144	 ldr         r12, [pc, #0x144]
  00010	e08dd00c	 add         sp, sp, r12
  00014		 |$M45969|
  00014	e1a07002	 mov         r7, r2
  00018	e1a06001	 mov         r6, r1
  0001c	e1a05000	 mov         r5, r0
  00020	e59f312c	 ldr         r3, [pc, #0x12C]
  00024	e5933000	 ldr         r3, [r3]
  00028	e58d3818	 str         r3, [sp, #0x818]

; 57   :     NANDTEST_CONTEXT *pContext = (NANDTEST_CONTEXT *)Context;
; 58   :     BOOL rc = FALSE;
; 59   :     DWORD block;
; 60   :     FlashInfo flashInfo;
; 61   :     UCHAR outBuf[SECTOR_SIZE];
; 62   :     SectorInfo secInfo;
; 63   :     UCHAR *p_gooddata, *p_baddata;
; 64   : 	
; 65   :     /* NAND ECC test
; 66   :          sector: pContext.test_sector
; 67   :          data: p_gooddata, p_baddata
; 68   :     */
; 69   :     p_gooddata = pInBuffer;
; 70   :     p_baddata = pInBuffer + SECTOR_SIZE;
; 71   : 	
; 72   :     DEBUGMSG(ZONE_FUNCTION, (L"+nand_ecc_test: p_gooddata=%x, p_baddata=%x\r\n", p_gooddata, p_baddata));
; 73   : 
; 74   :     /* Step 0: Erase block */
; 75   :     if (!FMD_GetInfo(&flashInfo))

  0002c	e28d0008	 add         r0, sp, #8
  00030	e3a04000	 mov         r4, #0
  00034	eb000000	 bl          FMD_GetInfo
  00038	e3500000	 cmp         r0, #0
  0003c	0a000037	 beq         |$cleanUp$45796|

; 76   :     {
; 77   :         DEBUGMSG(ZONE_ERROR,  (L"ERROR: FMD_GetInfo call failed!\r\n"));
; 78   :         goto cleanUp;
; 79   :     }
; 80   : 	
; 81   :     block  = pContext->test_sector / flashInfo.wSectorsPerBlock;

  00040	e5951004	 ldr         r1, [r5, #4]
  00044	e1dd01b4	 ldrh        r0, [sp, #0x14]
  00048	eb000000	 bl          __rt_udiv

; 82   : 	
; 83   :     rc = FMD_EraseBlock(block);

  0004c	eb000000	 bl          FMD_EraseBlock
  00050	e1b04000	 movs        r4, r0

; 84   :     if(!rc)

  00054	0a000031	 beq         |$cleanUp$45796|

; 85   :     {
; 86   :         DEBUGMSG(ZONE_ERROR,  (L"ERROR: nand_ecc_test ERASE block(%d) failed!\r\n", block));
; 87   :         goto cleanUp;
; 88   :     }
; 89   :     /* Step 1: flash the NAND with Good data */
; 90   :     rc = FMD_WriteSector(pContext->test_sector, p_gooddata, NULL, 1); 

  00058	e5950004	 ldr         r0, [r5, #4]
  0005c	e3a03001	 mov         r3, #1
  00060	e3a02000	 mov         r2, #0
  00064	e1a01006	 mov         r1, r6
  00068	eb000000	 bl          FMD_WriteSector
  0006c	e1b04000	 movs        r4, r0

; 91   :     if( !rc )

  00070	0a00002a	 beq         |$cleanUp$45796|

; 92   :     {
; 93   :         DEBUGMSG(ZONE_ERROR,  (L"ERROR: nand_ecc_test WRITE good data in sector(%d) failed!\r\n", pContext->test_sector));
; 94   :         goto cleanUp;
; 95   :     }
; 96   : 	
; 97   :     /* Step 2: read back to see if there are errors */
; 98   :     rc = FMD_ReadSector(pContext->test_sector, outBuf, NULL, 1); 

  00074	e5950004	 ldr         r0, [r5, #4]
  00078	e3a03001	 mov         r3, #1
  0007c	e3a02000	 mov         r2, #0
  00080	e28d1018	 add         r1, sp, #0x18
  00084	eb000000	 bl          FMD_ReadSector
  00088	e1b04000	 movs        r4, r0

; 99   : 
; 100  :     if( !rc )

  0008c	0a000023	 beq         |$cleanUp$45796|

; 101  :     {
; 102  :         DEBUGMSG(ZONE_ERROR,  (L"ERROR: nand_ecc_test READ good data in sector(%d) failed!\r\n", pContext->test_sector));
; 103  :         goto cleanUp;
; 104  :     }
; 105  :     if(memcmp(outBuf, p_gooddata, SECTOR_SIZE))

  00090	e3a02b02	 mov         r2, #2, 22
  00094	e1a01006	 mov         r1, r6
  00098	e28d0018	 add         r0, sp, #0x18
  0009c	eb000000	 bl          memcmp
  000a0	e3500000	 cmp         r0, #0
  000a4	1a00001d	 bne         |$cleanUp$45796|

; 106  :     {
; 107  :         DEBUGMSG(ZONE_ERROR,  (L"ERROR: nand_ecc_test READ data does not match good data in sector(%d) failed!\r\n", pContext->test_sector));
; 108  :         goto cleanUp;
; 109  :     }
; 110  : 
; 111  :     /* Step 3: flash the NAND with Bad data WITHOUT UPDATING ecc*/
; 112  :     memset (&secInfo, 0, sizeof(secInfo));

  000a8	e3a03000	 mov         r3, #0

; 113  :     secInfo.bOEMReserved = SKIP_ECC_WRITE_MAGIC_NUMBER;
; 114  :     rc = FMD_WriteSector(pContext->test_sector, p_baddata, &secInfo, 1); 

  000ac	e58d3000	 str         r3, [sp]
  000b0	e58d3004	 str         r3, [sp, #4]
  000b4	e5950004	 ldr         r0, [r5, #4]
  000b8	e3a0300f	 mov         r3, #0xF
  000bc	e5cd3004	 strb        r3, [sp, #4]
  000c0	e3a03001	 mov         r3, #1
  000c4	e28d2000	 add         r2, sp, #0
  000c8	e2861b02	 add         r1, r6, #2, 22
  000cc	eb000000	 bl          FMD_WriteSector
  000d0	e1b04000	 movs        r4, r0

; 115  :     if( !rc )

  000d4	0a000011	 beq         |$cleanUp$45796|

; 116  :     {
; 117  :         DEBUGMSG(ZONE_ERROR,  (L"ERROR: nand_ecc_test WRITE bad data in sector(%d) failed!\r\n", pContext->test_sector));
; 118  :         goto cleanUp;
; 119  :     }
; 120  : 	
; 121  :     /* Step 4: read back to see if there are errors */
; 122  :     rc = FMD_ReadSector(pContext->test_sector, outBuf, NULL, 1); 

  000d8	e5950004	 ldr         r0, [r5, #4]
  000dc	e3a03001	 mov         r3, #1
  000e0	e3a02000	 mov         r2, #0
  000e4	e28d1018	 add         r1, sp, #0x18
  000e8	eb000000	 bl          FMD_ReadSector
  000ec	e1b04000	 movs        r4, r0

; 123  :     if( !rc )

  000f0	0a00000a	 beq         |$cleanUp$45796|

; 124  :     {
; 125  :         DEBUGMSG(ZONE_ERROR,  (L"ERROR: nand_ecc_test READ good data in sector(%d) failed!\r\n", pContext->test_sector));
; 126  :         goto cleanUp; 
; 127  :     }
; 128  : 	
; 129  :     if(memcmp(outBuf, p_gooddata, SECTOR_SIZE))

  000f4	e3a02b02	 mov         r2, #2, 22
  000f8	e1a01006	 mov         r1, r6
  000fc	e28d0018	 add         r0, sp, #0x18
  00100	eb000000	 bl          memcmp
  00104	e3500000	 cmp         r0, #0
  00108	0a000003	 beq         |$LN1@nand_ecc_t|

; 130  :     {
; 131  :         RETAILMSG(TRUE,  (L"ERROR: nand_ecc_test READ data after correction does not match good data in sector(%d) failed!\r\n",
; 132  : 			pContext->test_sector));

  0010c	e5951004	 ldr         r1, [r5, #4]
  00110	e59f0038	 ldr         r0, [pc, #0x38]
  00114	eb000000	 bl          NKDbgPrintfW

; 133  :         goto cleanUp;

  00118	ea000000	 b           |$cleanUp$45796|
  0011c		 |$LN1@nand_ecc_t|

; 134  :     }
; 135  :     rc = TRUE;

  0011c	e3a04001	 mov         r4, #1
  00120		 |$cleanUp$45796|

; 136  : 	
; 137  : cleanUp:
; 138  :     memcpy(p_outbuf, outBuf, SECTOR_SIZE );

  00120	e28d1018	 add         r1, sp, #0x18
  00124	e3a02b02	 mov         r2, #2, 22
  00128	e1a00007	 mov         r0, r7
  0012c	eb000000	 bl          memcpy

; 139  : 	
; 140  :     return rc;

  00130	e59d0818	 ldr         r0, [sp, #0x818]
  00134	eb000000	 bl          __security_check_cookie

; 141  : }

  00138	e1a00004	 mov         r0, r4
  0013c	e3a0cb02	 mov         r12, #2, 22
  00140	e38cc01c	 orr         r12, r12, #0x1C
  00144	e08dd00c	 add         sp, sp, r12
  00148	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0014c	e12fff1e	 bx          lr
  00150		 |$LN14@nand_ecc_t|
  00150		 |$LN15@nand_ecc_t|
  00150	00000000	 DCD         |??_C@_1MC@PIPHFCFE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAn?$AAa?$AAn?$AAd?$AA_?$AAe?$AAc?$AAc?$AA_?$AAt?$AAe?$AAs?$AAt?$AA?5?$AAR?$AAE?$AAA?$AAD?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?5?$AAa@|
  00154		 |$LN16@nand_ecc_t|
  00154	00000000	 DCD         |__security_cookie|
  00158		 |$LN17@nand_ecc_t|
  00158	fffff7e4	 DCD         0xfffff7e4
  0015c		 |$M45970|

			 ENDP  ; |nand_ecc_test|

	EXPORT	|DFT_Init|
	IMPORT	|LocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T45987| DCD	|$LN7@DFT_Init|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DFT_Init| PROC

; 146  : {

  00000		 |$LN7@DFT_Init|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45984|

; 147  :     NANDTEST_CONTEXT *pContext = NULL;
; 148  :     UNREFERENCED_PARAMETER(szContext); 
; 149  :     UNREFERENCED_PARAMETER(pBusContext); 
; 150  : 
; 151  :     DEBUGMSG(ZONE_FUNCTION, (L"DFT_Init(0x%08x, 0x%08x)\r\n", szContext, pBusContext));
; 152  : 
; 153  :     pContext = (NANDTEST_CONTEXT *)LocalAlloc(LPTR, sizeof(NANDTEST_CONTEXT));

  00004	e3a01008	 mov         r1, #8
  00008	e3a00040	 mov         r0, #0x40
  0000c	eb000000	 bl          LocalAlloc
  00010	e3500000	 cmp         r0, #0

; 154  :     if (pContext == NULL)
; 155  :     {
; 156  :         DEBUGMSG(ZONE_ERROR,
; 157  :                  (L"DFT_Init: ERROR - Failed allocate DFT context structure\r\n"));
; 158  :     }
; 159  :     else
; 160  :     {
; 161  : 	 pContext->test_sector = 1280;

  00014	13a03c05	 movne       r3, #5, 24

; 162  : 	 pContext->hFMD = NULL;	 

  00018	13a02000	 movne       r2, #0
  0001c	1880000c	 stmneia     r0, {r2, r3}

; 163  :     }
; 164  : 	
; 165  :     return (DWORD)pContext;
; 166  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$M45985|

			 ENDP  ; |DFT_Init|

	EXPORT	|DFT_Deinit|
	IMPORT	|LocalFree|

  00000			 AREA	 |.pdata|, PDATA
|$T45997| DCD	|$LN6@DFT_Deinit|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DFT_Deinit| PROC

; 172  : {

  00000		 |$LN6@DFT_Deinit|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45994|
  00004	e3500000	 cmp         r0, #0

; 173  :     NANDTEST_CONTEXT *pContext = (NANDTEST_CONTEXT *)context;
; 174  : 
; 175  :     DEBUGMSG(ZONE_FUNCTION, (L"DFT_Deinit(0x%08x)\r\n", context));
; 176  : 
; 177  :     if (pContext)
; 178  :     {
; 179  : 	 pContext->hFMD = NULL;	 

  00008	13a03000	 movne       r3, #0
  0000c	15803000	 strne       r3, [r0]

; 180  :         LocalFree(pContext);

  00010	1b000000	 blne        LocalFree

; 181  :     }
; 182  : 
; 183  :     return TRUE;

  00014	e3a00001	 mov         r0, #1

; 184  : }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$M45995|

			 ENDP  ; |DFT_Deinit|

	EXPORT	|DFT_Open|

  00000			 AREA	 |.pdata|, PDATA
|$T46007| DCD	|$LN5@DFT_Open|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DFT_Open| PROC

; 190  : {

  00000		 |$LN5@DFT_Open|
  00000		 |$M46004|

; 191  :     NANDTEST_CONTEXT *pContext = (NANDTEST_CONTEXT *)context;
; 192  :     UNREFERENCED_PARAMETER(accessCode); 
; 193  :     UNREFERENCED_PARAMETER(shareMode); 
; 194  : 
; 195  :     DEBUGMSG(ZONE_FUNCTION, (L"DFT_Open(0x%08x, 0x%08x, 0x%08x)\r\n",
; 196  :                              context, accessCode, shareMode));
; 197  : 
; 198  :     return (DWORD)pContext;
; 199  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M46005|

			 ENDP  ; |DFT_Open|

	EXPORT	|DFT_Close|

  00000			 AREA	 |.pdata|, PDATA
|$T46016| DCD	|$LN5@DFT_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DFT_Close| PROC

; 205  : {

  00000		 |$LN5@DFT_Close|
  00000		 |$M46013|

; 206  : 
; 207  :     UNREFERENCED_PARAMETER(context); 
; 208  : 
; 209  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 210  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M46014|

			 ENDP  ; |DFT_Close|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|DFT_IOControl|
	IMPORT	|FMD_Deinit|
	IMPORT	|FMD_GetBlockStatus|
	IMPORT	|FMD_Init|

  00000			 AREA	 |.pdata|, PDATA
|$T46040| DCD	|$LN21@DFT_IOCont|
	DCD	0xc0005303

  00000			 AREA	 |.xdata|, DATA
|$T46036| DCD	0xffffffdc
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T46036|

  00008		 |DFT_IOControl| PROC

; 223  : {

  00008		 |$LN21@DFT_IOCont|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e59fc13c	 ldr         r12, [pc, #0x13C]
  00010	e08dd00c	 add         sp, sp, r12
  00014		 |$M46037|
  00014	e1a07003	 mov         r7, r3
  00018	e1a04002	 mov         r4, r2
  0001c	e1a06001	 mov         r6, r1
  00020	e1a09000	 mov         r9, r0
  00024	e59fe120	 ldr         lr, [pc, #0x120]
  00028	e59ee000	 ldr         lr, [lr]
  0002c	e28dca01	 add         r12, sp, #1, 20
  00030	e58ce390	 str         lr, [r12, #0x390]

; 224  :     NANDTEST_CONTEXT *pContext = (NANDTEST_CONTEXT *)context;
; 225  :     HANDLE hFMD;
; 226  :     PCI_REG_INFO regInfo;
; 227  :     FlashInfo flashInfo;
; 228  :     DWORD sector,block; 
; 229  :     BOOL rc=FALSE;
; 230  :     UCHAR p_goodata[SECTOR_SIZE*2];
; 231  : 
; 232  :     UNREFERENCED_PARAMETER(pOutSize); 
; 233  : 
; 234  :     DEBUGMSG(ZONE_FUNCTION,
; 235  :              (L"+DFT_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 236  :               context, dwCode, pInBuffer, inSize, pOutBuffer, outSize, pOutSize));
; 237  : 
; 238  :     regInfo.MemBase.Reg[0] = OMAP_GPMC_REGS_PA;
; 239  :     regInfo.MemLen.Reg[0] = 0x00001000;

  00034	e3a02a01	 mov         r2, #1, 20

; 240  :     regInfo.MemBase.Reg[1] = BSP_NAND_REGS_PA;

  00038	e3a01302	 mov         r1, #2, 6

; 241  :     regInfo.MemLen.Reg[1] = 0x00001000;

  0003c	e3a00a01	 mov         r0, #1, 20
  00040	e58d233c	 str         r2, [sp, #0x33C]
  00044	e58d1324	 str         r1, [sp, #0x324]
  00048	e58d0340	 str         r0, [sp, #0x340]
  0004c	e3a0346e	 mov         r3, #0x6E, 8
  00050	e59c83b4	 ldr         r8, [r12, #0x3B4]

; 242  : 	
; 243  :     hFMD  = FMD_Init(NULL, &regInfo, NULL);

  00054	e3a02000	 mov         r2, #0
  00058	e28d1010	 add         r1, sp, #0x10
  0005c	e3a00000	 mov         r0, #0
  00060	e58d3320	 str         r3, [sp, #0x320]
  00064	e3a05000	 mov         r5, #0
  00068	eb000000	 bl          FMD_Init
  0006c	e1b0a000	 movs        r10, r0

; 244  :     if (hFMD  == NULL)

  00070	0a00002c	 beq         |$LN1@DFT_IOCont|

; 245  :     {
; 246  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: FMD_Init call failed!\r\n"));
; 247  :         goto cleanUp;
; 248  :     }
; 249  : 
; 250  :     switch (dwCode)

  00074	e3560001	 cmp         r6, #1
  00078	0a000015	 beq         |$LN13@DFT_IOCont|
  0007c	e3560002	 cmp         r6, #2
  00080	1a000026	 bne         |$cleanUp$45887|

; 286  : 			
; 287  : 	     break;
; 288  : 			
; 289  :         case NAND_ECC_CORRECTION:
; 290  :             /* Expecting 2 * 2K data, first 2K is good data, 
; 291  : 			                             second 2K is bad data needs correction */
; 292  :             // Checking parameter
; 293  :             if (pInBuffer == NULL || inSize != SECTOR_SIZE *2)

  00084	e3540000	 cmp         r4, #0
  00088	0a000024	 beq         |$cleanUp$45887|
  0008c	e3570a01	 cmp         r7, #1, 20
  00090	1a000022	 bne         |$cleanUp$45887|

; 294  :             {
; 295  :                 DEBUGMSG(ZONE_ERROR, (L"+DFT_IOControl(%d): ERROR - invalid in parameters\r\n", dwCode));
; 296  :                 goto cleanUp;
; 297  :             }
; 298  :             memcpy(p_goodata, pInBuffer, SECTOR_SIZE * 2);

  00094	e28d0e39	 add         r0, sp, #0x39, 28
  00098	e3a02a01	 mov         r2, #1, 20
  0009c	e1a01004	 mov         r1, r4
  000a0	eb000000	 bl          memcpy

; 299  : 			
; 300  :             if (pOutBuffer == NULL || outSize != SECTOR_SIZE)

  000a4	e3580000	 cmp         r8, #0
  000a8	0a00001c	 beq         |$cleanUp$45887|
  000ac	e28d3a01	 add         r3, sp, #1, 20
  000b0	e59333b8	 ldr         r3, [r3, #0x3B8]
  000b4	e3530b02	 cmp         r3, #2, 22
  000b8	1a000018	 bne         |$cleanUp$45887|

; 301  :             {
; 302  :                 DEBUGMSG(ZONE_ERROR, (L"+DFT_IOControl(%d): ERROR - invalid out parameters\r\n", dwCode));
; 303  :                 goto cleanUp;
; 304  :             }
; 305  : 
; 306  :             /* Call ECC test routine */
; 307  :             rc = nand_ecc_test(context, p_goodata, pOutBuffer);

  000bc	e1a02008	 mov         r2, r8
  000c0	e28d1e39	 add         r1, sp, #0x39, 28
  000c4	e1a00009	 mov         r0, r9
  000c8	eb000000	 bl          nand_ecc_test
  000cc	e1a05000	 mov         r5, r0

; 308  : 	     break;

  000d0	ea000012	 b           |$cleanUp$45887|
  000d4		 |$LN13@DFT_IOCont|

; 251  :     {
; 252  :         case NAND_SET_SECTOR:
; 253  :             // Checking parameter
; 254  :             if (pInBuffer == NULL || inSize < sizeof(DWORD))

  000d4	e3540000	 cmp         r4, #0
  000d8	0a000010	 beq         |$cleanUp$45887|
  000dc	e3570004	 cmp         r7, #4
  000e0	3a00000e	 bcc         |$cleanUp$45887|

; 255  :             {
; 256  :                 DEBUGMSG(ZONE_ERROR, (L"+DFT_IOControl(%d): ERROR - invalid parameters\r\n", dwCode));
; 257  :                 goto cleanUp;
; 258  :             }
; 259  :             // Get flash info
; 260  :             if (!FMD_GetInfo(&flashInfo))

  000e4	e28d0000	 add         r0, sp, #0
  000e8	eb000000	 bl          FMD_GetInfo
  000ec	e3500000	 cmp         r0, #0
  000f0	0a00000a	 beq         |$cleanUp$45887|

; 261  :             {
; 262  :                 DEBUGMSG(ZONE_ERROR,  (L"ERROR: FMD_GetInfo call failed!\r\n"));
; 263  :                 goto cleanUp;
; 264  :             }
; 265  : 
; 266  :             pContext->test_sector = *(DWORD*)pInBuffer;

  000f4	e5943000	 ldr         r3, [r4]

; 267  :             block  =     pContext->test_sector / flashInfo.wSectorsPerBlock;

  000f8	e1dd00bc	 ldrh        r0, [sp, #0xC]
  000fc	e1a01003	 mov         r1, r3
  00100	e5893004	 str         r3, [r9, #4]
  00104	eb000000	 bl          __rt_udiv

; 268  :             sector = 	pContext->test_sector % flashInfo.wSectorsPerBlock;
; 269  : 
; 270  :             DEBUGMSG(ZONE_ERROR,  (L"Test section info: block=%d sector=%d !\r\n", block, sector));
; 271  : 
; 272  : 	     if(block >= flashInfo.dwNumBlocks)

  00108	e59d3004	 ldr         r3, [sp, #4]
  0010c	e1500003	 cmp         r0, r3
  00110	2a000002	 bcs         |$cleanUp$45887|

; 273  :             {
; 274  :                 DEBUGMSG(ZONE_ERROR,  (L"ERROR: invalid sector!\r\n"));
; 275  :                 goto cleanUp;
; 276  :             }
; 277  :             if(FMD_GetBlockStatus(block) & 
; 278  : 				(BLOCK_STATUS_BAD |BLOCK_STATUS_RESERVED |BLOCK_STATUS_READONLY))		

  00114	eb000000	 bl          FMD_GetBlockStatus
  00118	e310000e	 tst         r0, #0xE

; 279  : 
; 280  :             {
; 281  :                 DEBUGMSG(ZONE_ERROR,  (L"ERROR: invalid sector status:%x!\r\n", FMD_GetBlockStatus(block) ));
; 282  :                 goto cleanUp;
; 283  :             }
; 284  : 			
; 285  :             rc = TRUE;

  0011c	03a05001	 moveq       r5, #1
  00120		 |$cleanUp$45887|

; 309  : 			
; 310  : 	 default:
; 311  : 	     break;
; 312  :     }
; 313  : 	
; 314  : cleanUp:
; 315  :     if (hFMD  != NULL) FMD_Deinit(hFMD);

  00120	e1a0000a	 mov         r0, r10
  00124	eb000000	 bl          FMD_Deinit
  00128		 |$LN1@DFT_IOCont|

; 316  : 	
; 317  :     return rc;

  00128	e28d0a01	 add         r0, sp, #1, 20
  0012c	e5900390	 ldr         r0, [r0, #0x390]
  00130	eb000000	 bl          __security_check_cookie

; 318  : }

  00134	e1a00005	 mov         r0, r5
  00138	e3a0cc13	 mov         r12, #0x13, 24
  0013c	e38cc094	 orr         r12, r12, #0x94
  00140	e08dd00c	 add         sp, sp, r12
  00144	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00148	e12fff1e	 bx          lr
  0014c		 |$LN22@DFT_IOCont|
  0014c		 |$LN23@DFT_IOCont|
  0014c	00000000	 DCD         |__security_cookie|
  00150		 |$LN24@DFT_IOCont|
  00150	ffffec6c	 DCD         0xffffec6c
  00154		 |$M46038|

			 ENDP  ; |DFT_IOControl|

	END
