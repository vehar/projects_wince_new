; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\OTHER\ECC\ecc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?i@?1??ECC_IsDataValid@@9@9| % 0x1			; `ECC_IsDataValid'::`2'::i

  00000			 AREA	 |.rdata|, DATA, READONLY
|ByteToNumberOfOnes| DCB 0x0
	DCB	0x1
	DCB	0x1
	DCB	0x2
	DCB	0x1
	DCB	0x2
	DCB	0x2
	DCB	0x3
	DCB	0x1
	DCB	0x2
	DCB	0x2
	DCB	0x3
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x1
	DCB	0x2
	DCB	0x2
	DCB	0x3
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x1
	DCB	0x2
	DCB	0x2
	DCB	0x3
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x1
	DCB	0x2
	DCB	0x2
	DCB	0x3
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x5
	DCB	0x6
	DCB	0x6
	DCB	0x7
	DCB	0x1
	DCB	0x2
	DCB	0x2
	DCB	0x3
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x5
	DCB	0x6
	DCB	0x6
	DCB	0x7
	DCB	0x2
	DCB	0x3
	DCB	0x3
	DCB	0x4
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x5
	DCB	0x6
	DCB	0x6
	DCB	0x7
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x5
	DCB	0x6
	DCB	0x6
	DCB	0x7
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x5
	DCB	0x6
	DCB	0x6
	DCB	0x7
	DCB	0x5
	DCB	0x6
	DCB	0x6
	DCB	0x7
	DCB	0x6
	DCB	0x7
	DCB	0x7
	DCB	0x8
	EXPORT	|ECC_CorrectData|

  00000			 AREA	 |.pdata|, PDATA
|$T39014| DCD	|$LN18@ECC_Correc|
	DCD	0x40008204
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\other\ecc\ecc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ECC_CorrectData| PROC

; 72   : {

  00000		 |$LN18@ECC_Correc|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M39011|

; 73   :     DWORD i, numOnes, byteLocation, bitLocation;
; 74   :     BYTE xorECC[ECC_BUFF_LEN];
; 75   : 
; 76   :     //----- 1. Check the parameters -----
; 77   :     if ((pData == NULL) || (pExistingECC == NULL)) {

  00010	e59d3024	 ldr         r3, [sp, #0x24]
  00014	e3530000	 cmp         r3, #0
  00018	0a000002	 beq         |$LN12@ECC_Correc|
  0001c	e59d302c	 ldr         r3, [sp, #0x2C]
  00020	e3530000	 cmp         r3, #0
  00024	1a000002	 bne         |$LN13@ECC_Correc|
  00028		 |$LN12@ECC_Correc|

; 78   :         return FALSE;

  00028	e3a03000	 mov         r3, #0
  0002c	e58d3014	 str         r3, [sp, #0x14]
  00030	ea00006f	 b           |$LN14@ECC_Correc|
  00034		 |$LN13@ECC_Correc|

; 79   :     }
; 80   : 
; 81   :     //----- 2. First, determine if this is a single-bit, correctable, error ----
; 82   :     //         NOTE: To answer this question, the two ECC values are XOR'd 
; 83   :     //               together and the total # of 1 bits is counted, which 
; 84   :     //               then tell us if we can correct the erroneous single-bit 
; 85   :     //               transition in the data.
; 86   :     numOnes = 0;

  00034	e3a03000	 mov         r3, #0
  00038	e58d3008	 str         r3, [sp, #8]

; 87   :     for (i = 0; i < ECC_BUFF_LEN; i++) {

  0003c	e3a03000	 mov         r3, #0
  00040	e58d3000	 str         r3, [sp]
  00044	ea000002	 b           |$LN11@ECC_Correc|
  00048		 |$LN10@ECC_Correc|
  00048	e59d3000	 ldr         r3, [sp]
  0004c	e2833001	 add         r3, r3, #1
  00050	e58d3000	 str         r3, [sp]
  00054		 |$LN11@ECC_Correc|
  00054	e59d3000	 ldr         r3, [sp]
  00058	e3530003	 cmp         r3, #3
  0005c	2a00001b	 bcs         |$LN9@ECC_Correc|

; 88   :         xorECC[i] = pExistingECC[i] ^ pExistingECC[i+ECC_BUFF_LEN];

  00060	e59d202c	 ldr         r2, [sp, #0x2C]
  00064	e59d3000	 ldr         r3, [sp]
  00068	e0823003	 add         r3, r2, r3
  0006c	e5d33000	 ldrb        r3, [r3]
  00070	e1a01003	 mov         r1, r3
  00074	e59d3000	 ldr         r3, [sp]
  00078	e2832003	 add         r2, r3, #3
  0007c	e59d302c	 ldr         r3, [sp, #0x2C]
  00080	e0833002	 add         r3, r3, r2
  00084	e5d33000	 ldrb        r3, [r3]
  00088	e0211003	 eor         r1, r1, r3
  0008c	e28d2004	 add         r2, sp, #4
  00090	e59d3000	 ldr         r3, [sp]
  00094	e0822003	 add         r2, r2, r3
  00098	e20130ff	 and         r3, r1, #0xFF
  0009c	e5c23000	 strb        r3, [r2]

; 89   :         numOnes += CountNumberOfOnes(xorECC[i]);

  000a0	e28d2004	 add         r2, sp, #4
  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e0823003	 add         r3, r2, r3
  000ac	e5d33000	 ldrb        r3, [r3]
  000b0	e1a02003	 mov         r2, r3
  000b4	e59f3148	 ldr         r3, [pc, #0x148]
  000b8	e0833002	 add         r3, r3, r2
  000bc	e5d32000	 ldrb        r2, [r3]
  000c0	e59d3008	 ldr         r3, [sp, #8]
  000c4	e0833002	 add         r3, r3, r2
  000c8	e58d3008	 str         r3, [sp, #8]

; 90   :     }

  000cc	eaffffdd	 b           |$LN10@ECC_Correc|
  000d0		 |$LN9@ECC_Correc|

; 91   : 
; 92   :     switch (numOnes) {

  000d0	e59d3008	 ldr         r3, [sp, #8]
  000d4	e58d3018	 str         r3, [sp, #0x18]
  000d8	e59d3018	 ldr         r3, [sp, #0x18]
  000dc	e3530000	 cmp         r3, #0
  000e0	0a000006	 beq         |$LN6@ECC_Correc|
  000e4	e59d3018	 ldr         r3, [sp, #0x18]
  000e8	e3530001	 cmp         r3, #1
  000ec	0a000006	 beq         |$LN5@ECC_Correc|
  000f0	e59d3018	 ldr         r3, [sp, #0x18]
  000f4	e353000c	 cmp         r3, #0xC
  000f8	0a000006	 beq         |$LN4@ECC_Correc|
  000fc	ea000006	 b           |$LN3@ECC_Correc|
  00100		 |$LN6@ECC_Correc|

; 93   :     case NO_DATA_ERROR:                 // Data doesn't contain an error
; 94   :         return TRUE;

  00100	e3a03001	 mov         r3, #1
  00104	e58d3014	 str         r3, [sp, #0x14]
  00108	ea000039	 b           |$LN14@ECC_Correc|
  0010c		 |$LN5@ECC_Correc|

; 95   : 
; 96   :     case ECC_ERROR:                     // Existing ECC value has gone bad!
; 97   :         return FALSE;

  0010c	e3a03000	 mov         r3, #0
  00110	e58d3014	 str         r3, [sp, #0x14]
  00114	ea000036	 b           |$LN14@ECC_Correc|
  00118		 |$LN4@ECC_Correc|

; 98   : 
; 99   :     case CORRECTABLE_ERROR:             // Single-bit error
; 100  :         break;

  00118	ea000002	 b           |$LN7@ECC_Correc|
  0011c		 |$LN3@ECC_Correc|

; 101  : 
; 102  :     default:                            // More than a single-bit error
; 103  :         return FALSE;

  0011c	e3a03000	 mov         r3, #0
  00120	e58d3014	 str         r3, [sp, #0x14]
  00124	ea000032	 b           |$LN14@ECC_Correc|
  00128		 |$LN7@ECC_Correc|

; 104  :     }
; 105  :         
; 106  :     //----- 3. Compute the location of the single-bit error -----
; 107  :     byteLocation = ((xorECC[2]&0xf0)<<1) | ((xorECC[1]&0xf8)>>3);

  00128	e5dd3006	 ldrb        r3, [sp, #6]
  0012c	e20330f0	 and         r3, r3, #0xF0
  00130	e1a02083	 mov         r2, r3, lsl #1
  00134	e5dd3005	 ldrb        r3, [sp, #5]
  00138	e20330f8	 and         r3, r3, #0xF8
  0013c	e1a031c3	 mov         r3, r3, asr #3
  00140	e1823003	 orr         r3, r2, r3
  00144	e58d300c	 str         r3, [sp, #0xC]

; 108  :     bitLocation  = xorECC[1] & 0x7;

  00148	e5dd3005	 ldrb        r3, [sp, #5]
  0014c	e2033007	 and         r3, r3, #7
  00150	e58d3010	 str         r3, [sp, #0x10]

; 109  : 
; 110  :     //----- 4. Correct the single-bit error -----
; 111  :     if (pData[byteLocation] & (0x01 << bitLocation)) {

  00154	e59d2024	 ldr         r2, [sp, #0x24]
  00158	e59d300c	 ldr         r3, [sp, #0xC]
  0015c	e0823003	 add         r3, r2, r3
  00160	e5d33000	 ldrb        r3, [r3]
  00164	e1a01003	 mov         r1, r3
  00168	e59d2010	 ldr         r2, [sp, #0x10]
  0016c	e3a03001	 mov         r3, #1
  00170	e1a03213	 mov         r3, r3, lsl r2
  00174	e1110003	 tst         r1, r3
  00178	0a00000e	 beq         |$LN2@ECC_Correc|

; 112  :         pData[byteLocation] &= ~(0x01 << bitLocation);      // 0->1 error

  0017c	e59d2024	 ldr         r2, [sp, #0x24]
  00180	e59d300c	 ldr         r3, [sp, #0xC]
  00184	e0821003	 add         r1, r2, r3
  00188	e59d2010	 ldr         r2, [sp, #0x10]
  0018c	e3a03001	 mov         r3, #1
  00190	e1a03213	 mov         r3, r3, lsl r2
  00194	e1e02003	 mvn         r2, r3
  00198	e5d13000	 ldrb        r3, [r1]
  0019c	e0031002	 and         r1, r3, r2
  001a0	e59d2024	 ldr         r2, [sp, #0x24]
  001a4	e59d300c	 ldr         r3, [sp, #0xC]
  001a8	e0822003	 add         r2, r2, r3
  001ac	e20130ff	 and         r3, r1, #0xFF
  001b0	e5c23000	 strb        r3, [r2]

; 113  :     } else {

  001b4	ea00000c	 b           |$LN1@ECC_Correc|
  001b8		 |$LN2@ECC_Correc|

; 114  :         pData[byteLocation] |= (0x01 <<  bitLocation);      // 1->0 error

  001b8	e59d2024	 ldr         r2, [sp, #0x24]
  001bc	e59d300c	 ldr         r3, [sp, #0xC]
  001c0	e0821003	 add         r1, r2, r3
  001c4	e59d2010	 ldr         r2, [sp, #0x10]
  001c8	e3a03001	 mov         r3, #1
  001cc	e1a02213	 mov         r2, r3, lsl r2
  001d0	e5d13000	 ldrb        r3, [r1]
  001d4	e1831002	 orr         r1, r3, r2
  001d8	e59d2024	 ldr         r2, [sp, #0x24]
  001dc	e59d300c	 ldr         r3, [sp, #0xC]
  001e0	e0822003	 add         r2, r2, r3
  001e4	e20130ff	 and         r3, r1, #0xFF
  001e8	e5c23000	 strb        r3, [r2]
  001ec		 |$LN1@ECC_Correc|

; 115  :     }
; 116  : 
; 117  :     return TRUE;

  001ec	e3a03001	 mov         r3, #1
  001f0	e58d3014	 str         r3, [sp, #0x14]
  001f4		 |$LN14@ECC_Correc|

; 118  : }

  001f4	e59d0014	 ldr         r0, [sp, #0x14]
  001f8	e28dd01c	 add         sp, sp, #0x1C
  001fc	e89d6000	 ldmia       sp, {sp, lr}
  00200	e12fff1e	 bx          lr
  00204		 |$LN19@ECC_Correc|
  00204		 |$LN20@ECC_Correc|
  00204	00000000	 DCD         |ByteToNumberOfOnes|
  00208		 |$M39012|

			 ENDP  ; |ECC_CorrectData|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ECC_ComputeECC|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00008			 AREA	 |.pdata|, PDATA
|$T39027| DCD	|$LN14@ECC_Comput|
	DCD	0xc000a604

  00000			 AREA	 |.xdata|, DATA
|$T39023| DCD	0xffffffe0
; Function compile flags: /Odtp

  00208			 AREA	 |.text|, CODE, ARM

  00208	00000000	 DCD         |__GSHandlerCheck|
  0020c	00000000	 DCD         |$T39023|

  00210		 |ECC_ComputeECC| PROC

; 128  : {

  00210		 |$LN14@ECC_Comput|
  00210	e1a0c00d	 mov         r12, sp
  00214	e92d000f	 stmdb       sp!, {r0 - r3}
  00218	e92d5000	 stmdb       sp!, {r12, lr}
  0021c	e24dd020	 sub         sp, sp, #0x20
  00220		 |$M39024|
  00220	e59f327c	 ldr         r3, [pc, #0x27C]
  00224	e5933000	 ldr         r3, [r3]
  00228	e58d3018	 str         r3, [sp, #0x18]

; 129  :     ULONG   i;
; 130  :     ULONG   paritc = 0;

  0022c	e3a03000	 mov         r3, #0
  00230	e58d300c	 str         r3, [sp, #0xC]

; 131  :     BYTE    parity_bit;
; 132  :     BYTE    bitmask[6] = {0x55, 0xaa, 0x33, 0xcc, 0xf, 0xf0};

  00234	e3a03055	 mov         r3, #0x55
  00238	e5cd3004	 strb        r3, [sp, #4]
  0023c	e3a030aa	 mov         r3, #0xAA
  00240	e5cd3005	 strb        r3, [sp, #5]
  00244	e3a03033	 mov         r3, #0x33
  00248	e5cd3006	 strb        r3, [sp, #6]
  0024c	e3a030cc	 mov         r3, #0xCC
  00250	e5cd3007	 strb        r3, [sp, #7]
  00254	e3a0300f	 mov         r3, #0xF
  00258	e5cd3008	 strb        r3, [sp, #8]
  0025c	e3a030f0	 mov         r3, #0xF0
  00260	e5cd3009	 strb        r3, [sp, #9]

; 133  :     ULONG   ulEcc;
; 134  :     
; 135  :     ulEcc = 0;

  00264	e3a03000	 mov         r3, #0
  00268	e58d3010	 str         r3, [sp, #0x10]

; 136  :     for ( i = 0; i < 512; i++) {

  0026c	e3a03000	 mov         r3, #0
  00270	e58d3000	 str         r3, [sp]
  00274	ea000002	 b           |$LN9@ECC_Comput|
  00278		 |$LN8@ECC_Comput|
  00278	e59d3000	 ldr         r3, [sp]
  0027c	e2833001	 add         r3, r3, #1
  00280	e58d3000	 str         r3, [sp]
  00284		 |$LN9@ECC_Comput|
  00284	e59d3000	 ldr         r3, [sp]
  00288	e3530c02	 cmp         r3, #2, 24
  0028c	2a000015	 bcs         |$LN7@ECC_Comput|

; 137  :         paritc = paritc ^ pData[i];

  00290	e59d2028	 ldr         r2, [sp, #0x28]
  00294	e59d3000	 ldr         r3, [sp]
  00298	e0823003	 add         r3, r2, r3
  0029c	e5d32000	 ldrb        r2, [r3]
  002a0	e59d300c	 ldr         r3, [sp, #0xC]
  002a4	e0233002	 eor         r3, r3, r2
  002a8	e58d300c	 str         r3, [sp, #0xC]

; 138  :         if ((CountNumberOfOnes(pData[i] ) & 1) != 0) {

  002ac	e59d2028	 ldr         r2, [sp, #0x28]
  002b0	e59d3000	 ldr         r3, [sp]
  002b4	e0823003	 add         r3, r2, r3
  002b8	e5d33000	 ldrb        r3, [r3]
  002bc	e1a02003	 mov         r2, r3
  002c0	e59f31d8	 ldr         r3, [pc, #0x1D8]
  002c4	e0833002	 add         r3, r3, r2
  002c8	e5d33000	 ldrb        r3, [r3]
  002cc	e3130001	 tst         r3, #1
  002d0	0a000003	 beq         |$LN6@ECC_Comput|

; 139  :             ulEcc = ulEcc ^ i;

  002d4	e59d2010	 ldr         r2, [sp, #0x10]
  002d8	e59d3000	 ldr         r3, [sp]
  002dc	e0223003	 eor         r3, r2, r3
  002e0	e58d3010	 str         r3, [sp, #0x10]
  002e4		 |$LN6@ECC_Comput|

; 140  :         }
; 141  :     }

  002e4	eaffffe3	 b           |$LN8@ECC_Comput|
  002e8		 |$LN7@ECC_Comput|

; 142  : 
; 143  :     pECC[1] = (BYTE)(ulEcc << 3);

  002e8	e59d3010	 ldr         r3, [sp, #0x10]
  002ec	e1a03183	 mov         r3, r3, lsl #3
  002f0	e20320ff	 and         r2, r3, #0xFF
  002f4	e59d3030	 ldr         r3, [sp, #0x30]
  002f8	e2833001	 add         r3, r3, #1
  002fc	e5c32000	 strb        r2, [r3]

; 144  :     pECC[2] = (BYTE)(ulEcc >> 1) & 0xf0;

  00300	e59d3010	 ldr         r3, [sp, #0x10]
  00304	e1a030a3	 mov         r3, r3, lsr #1
  00308	e20330ff	 and         r3, r3, #0xFF
  0030c	e20310f0	 and         r1, r3, #0xF0
  00310	e59d3030	 ldr         r3, [sp, #0x30]
  00314	e2832002	 add         r2, r3, #2
  00318	e20130ff	 and         r3, r1, #0xFF
  0031c	e5c23000	 strb        r3, [r2]

; 145  : 
; 146  :     if ((CountNumberOfOnes( paritc ) & 1) != 0) {

  00320	e59f2178	 ldr         r2, [pc, #0x178]
  00324	e59d300c	 ldr         r3, [sp, #0xC]
  00328	e0823003	 add         r3, r2, r3
  0032c	e5d33000	 ldrb        r3, [r3]
  00330	e3130001	 tst         r3, #1
  00334	0a000015	 beq         |$LN5@ECC_Comput|

; 147  :         // Invert copied bits
; 148  :         pECC[0] = pECC[1] ^ 0xf8;

  00338	e59d3030	 ldr         r3, [sp, #0x30]
  0033c	e2833001	 add         r3, r3, #1
  00340	e5d33000	 ldrb        r3, [r3]
  00344	e22330f8	 eor         r3, r3, #0xF8
  00348	e20320ff	 and         r2, r3, #0xFF
  0034c	e59d3030	 ldr         r3, [sp, #0x30]
  00350	e5c32000	 strb        r2, [r3]

; 149  :         pECC[2] |= (((~pECC[2]) >> 4) & 0x0f) ;

  00354	e59d3030	 ldr         r3, [sp, #0x30]
  00358	e2831002	 add         r1, r3, #2
  0035c	e59d3030	 ldr         r3, [sp, #0x30]
  00360	e2833002	 add         r3, r3, #2
  00364	e5d33000	 ldrb        r3, [r3]
  00368	e1e03003	 mvn         r3, r3
  0036c	e1a03243	 mov         r3, r3, asr #4
  00370	e203200f	 and         r2, r3, #0xF
  00374	e5d13000	 ldrb        r3, [r1]
  00378	e1831002	 orr         r1, r3, r2
  0037c	e59d3030	 ldr         r3, [sp, #0x30]
  00380	e2832002	 add         r2, r3, #2
  00384	e20130ff	 and         r3, r1, #0xFF
  00388	e5c23000	 strb        r3, [r2]

; 150  :     } else {

  0038c	ea000010	 b           |$LN4@ECC_Comput|
  00390		 |$LN5@ECC_Comput|

; 151  :         pECC[0] = pECC[1];

  00390	e59d3030	 ldr         r3, [sp, #0x30]
  00394	e2833001	 add         r3, r3, #1
  00398	e5d32000	 ldrb        r2, [r3]
  0039c	e59d3030	 ldr         r3, [sp, #0x30]
  003a0	e5c32000	 strb        r2, [r3]

; 152  :         pECC[2] |= (pECC[2] >> 4);

  003a4	e59d3030	 ldr         r3, [sp, #0x30]
  003a8	e2831002	 add         r1, r3, #2
  003ac	e59d3030	 ldr         r3, [sp, #0x30]
  003b0	e2833002	 add         r3, r3, #2
  003b4	e5d33000	 ldrb        r3, [r3]
  003b8	e1a02243	 mov         r2, r3, asr #4
  003bc	e5d13000	 ldrb        r3, [r1]
  003c0	e1831002	 orr         r1, r3, r2
  003c4	e59d3030	 ldr         r3, [sp, #0x30]
  003c8	e2832002	 add         r2, r3, #2
  003cc	e20130ff	 and         r3, r1, #0xFF
  003d0	e5c23000	 strb        r3, [r2]
  003d4		 |$LN4@ECC_Comput|

; 153  :     }
; 154  : 
; 155  :     for (i = 0; i < 6; i++) {

  003d4	e3a03000	 mov         r3, #0
  003d8	e58d3000	 str         r3, [sp]
  003dc	ea000002	 b           |$LN3@ECC_Comput|
  003e0		 |$LN2@ECC_Comput|
  003e0	e59d3000	 ldr         r3, [sp]
  003e4	e2833001	 add         r3, r3, #1
  003e8	e58d3000	 str         r3, [sp]
  003ec		 |$LN3@ECC_Comput|
  003ec	e59d3000	 ldr         r3, [sp]
  003f0	e3530006	 cmp         r3, #6
  003f4	2a000021	 bcs         |$LN1@ECC_Comput|

; 156  :         parity_bit = CountNumberOfOnes(paritc & bitmask[i]) & 1;

  003f8	e28d2004	 add         r2, sp, #4
  003fc	e59d3000	 ldr         r3, [sp]
  00400	e0823003	 add         r3, r2, r3
  00404	e5d32000	 ldrb        r2, [r3]
  00408	e59d300c	 ldr         r3, [sp, #0xC]
  0040c	e0032002	 and         r2, r3, r2
  00410	e59f3088	 ldr         r3, [pc, #0x88]
  00414	e0833002	 add         r3, r3, r2
  00418	e5d33000	 ldrb        r3, [r3]
  0041c	e2033001	 and         r3, r3, #1
  00420	e20330ff	 and         r3, r3, #0xFF
  00424	e5cd3014	 strb        r3, [sp, #0x14]

; 157  :         parity_bit <<= (i >> 1);

  00428	e59d3000	 ldr         r3, [sp]
  0042c	e1a030a3	 mov         r3, r3, lsr #1
  00430	e20320ff	 and         r2, r3, #0xFF
  00434	e5dd3014	 ldrb        r3, [sp, #0x14]
  00438	e1a03213	 mov         r3, r3, lsl r2
  0043c	e20330ff	 and         r3, r3, #0xFF
  00440	e5cd3014	 strb        r3, [sp, #0x14]

; 158  :         pECC[(i & 1)] |= parity_bit;

  00444	e59d3000	 ldr         r3, [sp]
  00448	e2032001	 and         r2, r3, #1
  0044c	e59d3030	 ldr         r3, [sp, #0x30]
  00450	e0831002	 add         r1, r3, r2
  00454	e5dd3014	 ldrb        r3, [sp, #0x14]
  00458	e1a02003	 mov         r2, r3
  0045c	e5d13000	 ldrb        r3, [r1]
  00460	e1831002	 orr         r1, r3, r2
  00464	e59d3000	 ldr         r3, [sp]
  00468	e2032001	 and         r2, r3, #1
  0046c	e59d3030	 ldr         r3, [sp, #0x30]
  00470	e0832002	 add         r2, r3, r2
  00474	e20130ff	 and         r3, r1, #0xFF
  00478	e5c23000	 strb        r3, [r2]

; 159  :     }

  0047c	eaffffd7	 b           |$LN2@ECC_Comput|
  00480		 |$LN1@ECC_Comput|

; 160  :     return( TRUE );

  00480	e59d0018	 ldr         r0, [sp, #0x18]
  00484	eb000000	 bl          __security_check_cookie
  00488	e3a03001	 mov         r3, #1
  0048c	e58d301c	 str         r3, [sp, #0x1C]

; 161  : }

  00490	e59d001c	 ldr         r0, [sp, #0x1C]
  00494	e28dd020	 add         sp, sp, #0x20
  00498	e89d6000	 ldmia       sp, {sp, lr}
  0049c	e12fff1e	 bx          lr
  004a0		 |$LN15@ECC_Comput|
  004a0		 |$LN16@ECC_Comput|
  004a0	00000000	 DCD         |ByteToNumberOfOnes|
  004a4		 |$LN17@ECC_Comput|
  004a4	00000000	 DCD         |__security_cookie|
  004a8		 |$M39025|

			 ENDP  ; |ECC_ComputeECC|

	EXPORT	|ECC_IsDataValid|

  00001			 AREA	 |.bss|, NOINIT
|?newECC@?1??ECC_IsDataValid@@9@9| % 0x3		; `ECC_IsDataValid'::`2'::newECC

  00010			 AREA	 |.pdata|, PDATA
|$T39036| DCD	|$LN11@ECC_IsData|
	DCD	0x40003f04
; Function compile flags: /Odtp

  004a8			 AREA	 |.text|, CODE, ARM

  004a8		 |ECC_IsDataValid| PROC

; 178  : {

  004a8		 |$LN11@ECC_IsData|
  004a8	e1a0c00d	 mov         r12, sp
  004ac	e92d000f	 stmdb       sp!, {r0 - r3}
  004b0	e92d5000	 stmdb       sp!, {r12, lr}
  004b4	e24dd008	 sub         sp, sp, #8
  004b8		 |$M39033|

; 179  : 	static UCHAR i = 0;
; 180  : 	static UCHAR newECC[ECC_BUFF_LEN];
; 181  : 
; 182  : 
; 183  :     //----- 0. Compare ECC buf lengths
; 184  :     if( dwECCBuffLen != ECC_BUFF_LEN )

  004b8	e59d301c	 ldr         r3, [sp, #0x1C]
  004bc	e3530003	 cmp         r3, #3
  004c0	0a000002	 beq         |$LN6@ECC_IsData|

; 185  :     {
; 186  :         return FALSE;

  004c4	e3a03000	 mov         r3, #0
  004c8	e58d3000	 str         r3, [sp]
  004cc	ea00002e	 b           |$LN7@ECC_IsData|
  004d0		 |$LN6@ECC_IsData|

; 187  :     }
; 188  : 
; 189  : 	//----- 1. Compute the new ECC information for the data -----
; 190  : 	//         NOTE: We assume that the input data buffer is a sector (512 bytes)
; 191  : 	if(!ECC_ComputeECC(pData, dwDataBuffLen, newECC, ECC_BUFF_LEN))

  004d0	e3a03003	 mov         r3, #3
  004d4	e59f20c4	 ldr         r2, [pc, #0xC4]
  004d8	e59d1014	 ldr         r1, [sp, #0x14]
  004dc	e59d0010	 ldr         r0, [sp, #0x10]
  004e0	eb000000	 bl          ECC_ComputeECC
  004e4	e58d0004	 str         r0, [sp, #4]
  004e8	e59d3004	 ldr         r3, [sp, #4]
  004ec	e3530000	 cmp         r3, #0
  004f0	1a000002	 bne         |$LN5@ECC_IsData|

; 192  : 	{
; 193  : 		return FALSE;

  004f4	e3a03000	 mov         r3, #0
  004f8	e58d3000	 str         r3, [sp]
  004fc	ea000022	 b           |$LN7@ECC_IsData|
  00500		 |$LN5@ECC_IsData|

; 194  : 	}
; 195  : 
; 196  : 	//----- 2. Compare the generated ECC info with the existing ECC info  -----
; 197  : 	//         NOTE: The data is valid if XORing all the ECC info together equals zero
; 198  : 	for(i=0; i<ECC_BUFF_LEN; i++)

  00500	e59f2094	 ldr         r2, [pc, #0x94]
  00504	e3a03000	 mov         r3, #0
  00508	e5c23000	 strb        r3, [r2]
  0050c	ea000005	 b           |$LN4@ECC_IsData|
  00510		 |$LN3@ECC_IsData|
  00510	e59f3084	 ldr         r3, [pc, #0x84]
  00514	e5d33000	 ldrb        r3, [r3]
  00518	e2833001	 add         r3, r3, #1
  0051c	e20320ff	 and         r2, r3, #0xFF
  00520	e59f3074	 ldr         r3, [pc, #0x74]
  00524	e5c32000	 strb        r2, [r3]
  00528		 |$LN4@ECC_IsData|
  00528	e59f306c	 ldr         r3, [pc, #0x6C]
  0052c	e5d33000	 ldrb        r3, [r3]
  00530	e3530003	 cmp         r3, #3
  00534	aa000012	 bge         |$LN2@ECC_IsData|

; 199  : 	{
; 200  : 		if((newECC[i] != *(pExistingECC+i)))

  00538	e59f305c	 ldr         r3, [pc, #0x5C]
  0053c	e5d33000	 ldrb        r3, [r3]
  00540	e1a02003	 mov         r2, r3
  00544	e59f3054	 ldr         r3, [pc, #0x54]
  00548	e0833002	 add         r3, r3, r2
  0054c	e5d33000	 ldrb        r3, [r3]
  00550	e1a01003	 mov         r1, r3
  00554	e59f3040	 ldr         r3, [pc, #0x40]
  00558	e5d33000	 ldrb        r3, [r3]
  0055c	e1a02003	 mov         r2, r3
  00560	e59d3018	 ldr         r3, [sp, #0x18]
  00564	e0833002	 add         r3, r3, r2
  00568	e5d33000	 ldrb        r3, [r3]
  0056c	e1510003	 cmp         r1, r3
  00570	0a000002	 beq         |$LN1@ECC_IsData|

; 201  : 		{
; 202  : 			return FALSE;

  00574	e3a03000	 mov         r3, #0
  00578	e58d3000	 str         r3, [sp]
  0057c	ea000002	 b           |$LN7@ECC_IsData|
  00580		 |$LN1@ECC_IsData|

; 203  : 		}
; 204  : 	}

  00580	eaffffe2	 b           |$LN3@ECC_IsData|
  00584		 |$LN2@ECC_IsData|

; 205  : 
; 206  : 	return TRUE;	

  00584	e3a03001	 mov         r3, #1
  00588	e58d3000	 str         r3, [sp]
  0058c		 |$LN7@ECC_IsData|

; 207  : }

  0058c	e59d0000	 ldr         r0, [sp]
  00590	e28dd008	 add         sp, sp, #8
  00594	e89d6000	 ldmia       sp, {sp, lr}
  00598	e12fff1e	 bx          lr
  0059c		 |$LN12@ECC_IsData|
  0059c		 |$LN13@ECC_IsData|
  0059c	00000000	 DCD         |?i@?1??ECC_IsDataValid@@9@9|
  005a0		 |$LN14@ECC_IsData|
  005a0	00000000	 DCD         |?newECC@?1??ECC_IsDataValid@@9@9|
  005a4		 |$M39034|

			 ENDP  ; |ECC_IsDataValid|

	END
