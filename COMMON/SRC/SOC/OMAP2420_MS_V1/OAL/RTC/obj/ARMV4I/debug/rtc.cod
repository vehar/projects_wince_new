; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\RTC\rtc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|RTCDATA|, 0x8


  00000			 AREA	 |.bss|, NOINIT
|g_RTCBUSInitialized| % 0x4
|g_lastRTCTickCount| % 0x4
|?lastRetTime@?1??OEMGetRealTime@@9@9| % 0x8		; `OEMGetRealTime'::`2'::lastRetTime

  00000			 AREA	 |.data|, DATA
|g_fetchRTCViaI2c| DCD 0x1

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|g_rtcUpperBound| DCD 0x6302b800
	DCD	0x5f825a0
	EXPORT	|??_C@_1HA@LDCOIABC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAg?$AA_@| [ DATA ] ; `string'
	EXPORT	|OEMSetRealTime|
	EXPORT	|OEMGetRealTime|
	EXPORT	|??_C@_1BM@DPJPMBGD@?$AAR?$AAT?$AAC?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|InitializeRTC|
	EXPORT	|??_C@_1FM@KCNKCMKA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalInitRTC|
	IMPORT	|memcpy|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00010			 AREA	 |.bss|, NOINIT
|g_CritSecRTC| % 0x14
|g_lastRTCTime| % 0x10

  00000			 AREA	 |.pdata|, PDATA
|$T45774| DCD	|$LN19@OALIoCtlHa|
	DCD	0x40009704
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\rtc\rtc.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@LDCOIABC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAg?$AA_@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "g"
	DCB	0x0, "_", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, "R"
	DCB	0x0, "T", 0x0, "C", 0x0, "T", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@DPJPMBGD@?$AAR?$AAT?$AAC?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "T", 0x0, "C", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@KCNKCMKA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "N", 0x0, "V", 0x0, "A", 0x0, "L"
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "P", 0x0, "A", 0x0, "R"
	DCB	0x0, "A", 0x0, "M", 0x0, "E", 0x0, "T", 0x0, "E", 0x0, "R"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalInitRTC| PROC

; 105  : ) {

  00000		 |$LN19@OALIoCtlHa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M45771|

; 106  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 107  :     SYSTEMTIME *pTime = (SYSTEMTIME*)pInpBuffer;

  00018	e59d3034	 ldr         r3, [sp, #0x34]
  0001c	e58d3008	 str         r3, [sp, #8]

; 108  :     SYSTEMTIME *pRTCTime = &g_lastRTCTime;

  00020	e59f3230	 ldr         r3, [pc, #0x230]
  00024	e58d3004	 str         r3, [sp, #4]

; 109  : 
; 110  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OALIoCtlHalInitRTC(...)\r\n"));

  00028	e59f320c	 ldr         r3, [pc, #0x20C]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130040	 tst         r3, #0x40
  00034	0a000008	 beq         |$LN9@OALIoCtlHa|
  00038	e59f31fc	 ldr         r3, [pc, #0x1FC]
  0003c	e5933440	 ldr         r3, [r3, #0x440]
  00040	e3130004	 tst         r3, #4
  00044	0a000004	 beq         |$LN9@OALIoCtlHa|
  00048	e59f0204	 ldr         r0, [pc, #0x204]
  0004c	eb000000	 bl          NKDbgPrintfW
  00050	e3a03001	 mov         r3, #1
  00054	e58d3010	 str         r3, [sp, #0x10]
  00058	ea000001	 b           |$LN10@OALIoCtlHa|
  0005c		 |$LN9@OALIoCtlHa|
  0005c	e3a03000	 mov         r3, #0
  00060	e58d3010	 str         r3, [sp, #0x10]
  00064		 |$LN10@OALIoCtlHa|

; 111  : 
; 112  :     // Validate inputs
; 113  :     if (pInpBuffer == NULL || inpSize < sizeof(SYSTEMTIME)) {

  00064	e59d3034	 ldr         r3, [sp, #0x34]
  00068	e3530000	 cmp         r3, #0
  0006c	0a000002	 beq         |$LN5@OALIoCtlHa|
  00070	e59d3038	 ldr         r3, [sp, #0x38]
  00074	e3530010	 cmp         r3, #0x10
  00078	2a00000b	 bcs         |$LN6@OALIoCtlHa|
  0007c		 |$LN5@OALIoCtlHa|

; 114  :         OALMSG(OAL_ERROR, (L"ERROR:OALIoCtlHalInitRTC: INVALID PARAMETER\r\n"));

  0007c	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00080	e5933440	 ldr         r3, [r3, #0x440]
  00084	e3130001	 tst         r3, #1
  00088	0a000004	 beq         |$LN11@OALIoCtlHa|
  0008c	e59f01bc	 ldr         r0, [pc, #0x1BC]
  00090	eb000000	 bl          NKDbgPrintfW
  00094	e3a03001	 mov         r3, #1
  00098	e58d3014	 str         r3, [sp, #0x14]
  0009c	ea000001	 b           |$LN12@OALIoCtlHa|
  000a0		 |$LN11@OALIoCtlHa|
  000a0	e3a03000	 mov         r3, #0
  000a4	e58d3014	 str         r3, [sp, #0x14]
  000a8		 |$LN12@OALIoCtlHa|

; 115  :         goto cleanUp;

  000a8	ea000049	 b           |$cleanUp$45639|
  000ac		 |$LN6@OALIoCtlHa|

; 116  :     }
; 117  :     
; 118  :     if (!g_RTCBUSInitialized)

  000ac	e59f3194	 ldr         r3, [pc, #0x194]
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e3530000	 cmp         r3, #0
  000b8	1a000018	 bne         |$LN4@OALIoCtlHa|

; 119  :     {
; 120  :         // Init the critical section
; 121  :         InitializeCriticalSection(&g_CritSecRTC);

  000bc	e59f0188	 ldr         r0, [pc, #0x188]
  000c0	eb000000	 bl          InitializeCriticalSection

; 122  : 
; 123  :         EnterCriticalSection(&g_CritSecRTC);

  000c4	e59f0180	 ldr         r0, [pc, #0x180]
  000c8	eb000000	 bl          EnterCriticalSection

; 124  :         InitializeRTC();

  000cc	eb000000	 bl          InitializeRTC

; 125  :         LeaveCriticalSection(&g_CritSecRTC);

  000d0	e59f0174	 ldr         r0, [pc, #0x174]
  000d4	eb000000	 bl          LeaveCriticalSection

; 126  : 
; 127  :         g_RTCBUSInitialized = TRUE;

  000d8	e59f2168	 ldr         r2, [pc, #0x168]
  000dc	e3a03001	 mov         r3, #1
  000e0	e5823000	 str         r3, [r2]

; 128  :         OALMSG(OAL_RTC&&OAL_FUNC, (L"RTC Enabled\r\n")); 

  000e4	e59f3150	 ldr         r3, [pc, #0x150]
  000e8	e5933440	 ldr         r3, [r3, #0x440]
  000ec	e3130040	 tst         r3, #0x40
  000f0	0a000008	 beq         |$LN13@OALIoCtlHa|
  000f4	e59f3140	 ldr         r3, [pc, #0x140]
  000f8	e5933440	 ldr         r3, [r3, #0x440]
  000fc	e3130004	 tst         r3, #4
  00100	0a000004	 beq         |$LN13@OALIoCtlHa|
  00104	e59f0138	 ldr         r0, [pc, #0x138]
  00108	eb000000	 bl          NKDbgPrintfW
  0010c	e3a03001	 mov         r3, #1
  00110	e58d3018	 str         r3, [sp, #0x18]
  00114	ea000001	 b           |$LN14@OALIoCtlHa|
  00118		 |$LN13@OALIoCtlHa|
  00118	e3a03000	 mov         r3, #0
  0011c	e58d3018	 str         r3, [sp, #0x18]
  00120		 |$LN14@OALIoCtlHa|
  00120		 |$LN4@OALIoCtlHa|

; 129  :     }
; 130  : 
; 131  :     // The H4 Platform has a backup battery for the RTC. OEM requirements for the implementation
; 132  :     // of OALIoCtlHalInitRTC, one has to determine whether the current clock time is valid, and if so, ignore the time provided by the kernel.
; 133  :     // Otherwise, set the real-time clock to match the provided time.
; 134  :     // The RTC, when reset, would have the date 1/1/2004.
; 135  :     g_fetchRTCViaI2c = TRUE;

  00120	e59f2118	 ldr         r2, [pc, #0x118]
  00124	e3a03001	 mov         r3, #1
  00128	e5823000	 str         r3, [r2]

; 136  :     rc = OEMGetRealTime(pRTCTime);

  0012c	e59d0004	 ldr         r0, [sp, #4]
  00130	eb000000	 bl          OEMGetRealTime
  00134	e58d001c	 str         r0, [sp, #0x1C]
  00138	e59d301c	 ldr         r3, [sp, #0x1C]
  0013c	e58d3000	 str         r3, [sp]

; 137  :     if( ((pRTCTime->wYear==2004) && (pRTCTime->wMonth==1) && (pRTCTime->wDay==1))
; 138  :         || (pRTCTime->wYear > RTC_MAX_YEAR) 
; 139  :         || (pRTCTime->wYear < RTC_MIN_YEAR) )

  00140	e59d3004	 ldr         r3, [sp, #4]
  00144	e1d330b0	 ldrh        r3, [r3]
  00148	e1a02003	 mov         r2, r3
  0014c	e3a03c07	 mov         r3, #7, 24
  00150	e38330d4	 orr         r3, r3, #0xD4
  00154	e1520003	 cmp         r2, r3
  00158	1a000009	 bne         |$LN1@OALIoCtlHa|
  0015c	e59d3004	 ldr         r3, [sp, #4]
  00160	e2833002	 add         r3, r3, #2
  00164	e1d330b0	 ldrh        r3, [r3]
  00168	e3530001	 cmp         r3, #1
  0016c	1a000004	 bne         |$LN1@OALIoCtlHa|
  00170	e59d3004	 ldr         r3, [sp, #4]
  00174	e2833006	 add         r3, r3, #6
  00178	e1d330b0	 ldrh        r3, [r3]
  0017c	e3530001	 cmp         r3, #1
  00180	0a00000a	 beq         |$LN2@OALIoCtlHa|
  00184		 |$LN1@OALIoCtlHa|
  00184	e59d3004	 ldr         r3, [sp, #4]
  00188	e1d330b0	 ldrh        r3, [r3]
  0018c	e1a02003	 mov         r2, r3
  00190	e3a03b02	 mov         r3, #2, 22
  00194	e3833033	 orr         r3, r3, #0x33
  00198	e1520003	 cmp         r2, r3
  0019c	ca000003	 bgt         |$LN2@OALIoCtlHa|
  001a0	e59d3004	 ldr         r3, [sp, #4]
  001a4	e1d330b0	 ldrh        r3, [r3]
  001a8	e3530e7d	 cmp         r3, #0x7D, 28
  001ac	aa000008	 bge         |$LN3@OALIoCtlHa|
  001b0		 |$LN2@OALIoCtlHa|

; 140  :     {
; 141  :         // Set time
; 142  :         memcpy(pRTCTime, pTime, sizeof(SYSTEMTIME));

  001b0	e3a02010	 mov         r2, #0x10
  001b4	e59d1008	 ldr         r1, [sp, #8]
  001b8	e59d0004	 ldr         r0, [sp, #4]
  001bc	eb000000	 bl          memcpy

; 143  :         rc = OEMSetRealTime(pTime);

  001c0	e59d0008	 ldr         r0, [sp, #8]
  001c4	eb000000	 bl          OEMSetRealTime
  001c8	e58d0020	 str         r0, [sp, #0x20]
  001cc	e59d3020	 ldr         r3, [sp, #0x20]
  001d0	e58d3000	 str         r3, [sp]
  001d4		 |$LN3@OALIoCtlHa|
  001d4		 |$cleanUp$45639|

; 144  :     }
; 145  : 
; 146  : cleanUp:
; 147  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OALIoCtlHalInitRTC(rc = %d), g_lastRTCTickCount = %d\r\n", rc, g_lastRTCTickCount));

  001d4	e59f3060	 ldr         r3, [pc, #0x60]
  001d8	e5933440	 ldr         r3, [r3, #0x440]
  001dc	e3130040	 tst         r3, #0x40
  001e0	0a00000b	 beq         |$LN15@OALIoCtlHa|
  001e4	e59f3050	 ldr         r3, [pc, #0x50]
  001e8	e5933440	 ldr         r3, [r3, #0x440]
  001ec	e3130004	 tst         r3, #4
  001f0	0a000007	 beq         |$LN15@OALIoCtlHa|
  001f4	e59f303c	 ldr         r3, [pc, #0x3C]
  001f8	e5932000	 ldr         r2, [r3]
  001fc	e59d1000	 ldr         r1, [sp]
  00200	e59f002c	 ldr         r0, [pc, #0x2C]
  00204	eb000000	 bl          NKDbgPrintfW
  00208	e3a03001	 mov         r3, #1
  0020c	e58d3024	 str         r3, [sp, #0x24]
  00210	ea000001	 b           |$LN16@OALIoCtlHa|
  00214		 |$LN15@OALIoCtlHa|
  00214	e3a03000	 mov         r3, #0
  00218	e58d3024	 str         r3, [sp, #0x24]
  0021c		 |$LN16@OALIoCtlHa|

; 148  :     return rc;

  0021c	e59d3000	 ldr         r3, [sp]
  00220	e58d300c	 str         r3, [sp, #0xC]

; 149  : }

  00224	e59d000c	 ldr         r0, [sp, #0xC]
  00228	e28dd028	 add         sp, sp, #0x28
  0022c	e89d6000	 ldmia       sp, {sp, lr}
  00230	e12fff1e	 bx          lr
  00234		 |$LN20@OALIoCtlHa|
  00234		 |$LN21@OALIoCtlHa|
  00234	00000000	 DCD         |??_C@_1HA@LDCOIABC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAg?$AA_@|
  00238		 |$LN22@OALIoCtlHa|
  00238	00000000	 DCD         |g_lastRTCTickCount|
  0023c		 |$LN23@OALIoCtlHa|
  0023c	00000000	 DCD         |dpCurSettings|
  00240		 |$LN24@OALIoCtlHa|
  00240	00000000	 DCD         |g_fetchRTCViaI2c|
  00244		 |$LN25@OALIoCtlHa|
  00244	00000000	 DCD         |??_C@_1BM@DPJPMBGD@?$AAR?$AAT?$AAC?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00248		 |$LN26@OALIoCtlHa|
  00248	00000000	 DCD         |g_RTCBUSInitialized|
  0024c		 |$LN27@OALIoCtlHa|
  0024c	00000000	 DCD         |g_CritSecRTC|
  00250		 |$LN28@OALIoCtlHa|
  00250	00000000	 DCD         |??_C@_1FM@KCNKCMKA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI@|
  00254		 |$LN29@OALIoCtlHa|
  00254	00000000	 DCD         |??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00258		 |$LN30@OALIoCtlHa|
  00258	00000000	 DCD         |g_lastRTCTime|
  0025c		 |$M45772|

			 ENDP  ; |OALIoCtlHalInitRTC|

	EXPORT	|??_C@_1DO@LGKCENGE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@MHGJMHAE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalRtcAlarm|
	IMPORT	|NKSetInterruptEvent|
	IMPORT	|WriteRTCCtrlData|
	IMPORT	|ReadRTCCtrlData|

  00008			 AREA	 |.pdata|, PDATA
|$T45795| DCD	|$LN9@OALIoCtlHa@2|
	DCD	0x40004e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@LGKCENGE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "R"
	DCB	0x0, "t", 0x0, "c", 0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r"
	DCB	0x0, "m", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MHGJMHAE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "R"
	DCB	0x0, "t", 0x0, "c", 0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r"
	DCB	0x0, "m", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0025c			 AREA	 |.text|, CODE, ARM

  0025c		 |OALIoCtlHalRtcAlarm| PROC

; 166  : {

  0025c		 |$LN9@OALIoCtlHa@2|
  0025c	e1a0c00d	 mov         r12, sp
  00260	e92d000f	 stmdb       sp!, {r0 - r3}
  00264	e92d5000	 stmdb       sp!, {r12, lr}
  00268	e24dd010	 sub         sp, sp, #0x10
  0026c		 |$M45792|

; 167  :     UINT8 MaskData = RTCALM_MSK;

  0026c	e3a03002	 mov         r3, #2
  00270	e5cd3000	 strb        r3, [sp]

; 168  : 
; 169  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OALIoCtlHalRtcAlarm\r\n"));

  00274	e59f310c	 ldr         r3, [pc, #0x10C]
  00278	e5933440	 ldr         r3, [r3, #0x440]
  0027c	e3130040	 tst         r3, #0x40
  00280	0a000008	 beq         |$LN3@OALIoCtlHa@2|
  00284	e59f30fc	 ldr         r3, [pc, #0xFC]
  00288	e5933440	 ldr         r3, [r3, #0x440]
  0028c	e3130004	 tst         r3, #4
  00290	0a000004	 beq         |$LN3@OALIoCtlHa@2|
  00294	e59f00f4	 ldr         r0, [pc, #0xF4]
  00298	eb000000	 bl          NKDbgPrintfW
  0029c	e3a03001	 mov         r3, #1
  002a0	e58d3008	 str         r3, [sp, #8]
  002a4	ea000001	 b           |$LN4@OALIoCtlHa@2|
  002a8		 |$LN3@OALIoCtlHa@2|
  002a8	e3a03000	 mov         r3, #0
  002ac	e58d3008	 str         r3, [sp, #8]
  002b0		 |$LN4@OALIoCtlHa@2|

; 170  : 
; 171  :     EnterCriticalSection(&g_CritSecRTC);

  002b0	e59f00d4	 ldr         r0, [pc, #0xD4]
  002b4	eb000000	 bl          EnterCriticalSection

; 172  :     
; 173  : 
; 174  :     // clear status bit
; 175  :     ReadRTCCtrlData(MENELAUS_INTACK2_OFFSET, &MaskData);

  002b8	e28d1000	 add         r1, sp, #0
  002bc	e3a0001c	 mov         r0, #0x1C
  002c0	eb000000	 bl          ReadRTCCtrlData

; 176  :     WriteRTCCtrlData(MENELAUS_INTACK2_OFFSET, MaskData | RTCALM_MSK);

  002c4	e5dd3000	 ldrb        r3, [sp]
  002c8	e3833002	 orr         r3, r3, #2
  002cc	e20310ff	 and         r1, r3, #0xFF
  002d0	e3a0001c	 mov         r0, #0x1C
  002d4	eb000000	 bl          WriteRTCCtrlData

; 177  :     
; 178  :     // mask the RTC ALARM bit in the interrupt mask
; 179  :     ReadRTCCtrlData(MENELAUS_INTMASK2_OFFSET, &MaskData);

  002d8	e28d1000	 add         r1, sp, #0
  002dc	e3a00018	 mov         r0, #0x18
  002e0	eb000000	 bl          ReadRTCCtrlData

; 180  :     WriteRTCCtrlData(MENELAUS_INTMASK2_OFFSET, MaskData | RTCALM_MSK);

  002e4	e5dd3000	 ldrb        r3, [sp]
  002e8	e3833002	 orr         r3, r3, #2
  002ec	e20310ff	 and         r1, r3, #0xFF
  002f0	e3a00018	 mov         r0, #0x18
  002f4	eb000000	 bl          WriteRTCCtrlData

; 181  : 
; 182  :     // Disable alarm interrupt
; 183  :     ReadRTCCtrlData(MENELAUS_RTCCTRL_OFFSET, &MaskData);

  002f8	e28d1000	 add         r1, sp, #0
  002fc	e3a00021	 mov         r0, #0x21
  00300	eb000000	 bl          ReadRTCCtrlData

; 184  :     WriteRTCCtrlData (MENELAUS_RTCCTRL_OFFSET, MaskData & (~RTC_AL_EN));

  00304	e5dd3000	 ldrb        r3, [sp]
  00308	e1a02003	 mov         r2, r3
  0030c	e3e03002	 mvn         r3, #2
  00310	e0023003	 and         r3, r2, r3
  00314	e20310ff	 and         r1, r3, #0xFF
  00318	e3a00021	 mov         r0, #0x21
  0031c	eb000000	 bl          WriteRTCCtrlData

; 185  :     
; 186  :     LeaveCriticalSection(&g_CritSecRTC);

  00320	e59f0064	 ldr         r0, [pc, #0x64]
  00324	eb000000	 bl          LeaveCriticalSection

; 187  : 
; 188  :     NKSetInterruptEvent(SYSINTR_RTC_ALARM);

  00328	e3a0000d	 mov         r0, #0xD
  0032c	eb000000	 bl          NKSetInterruptEvent

; 189  : 
; 190  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OALIoCtlHalRtcAlarm(rc = 1)\r\n"));

  00330	e59f3050	 ldr         r3, [pc, #0x50]
  00334	e5933440	 ldr         r3, [r3, #0x440]
  00338	e3130040	 tst         r3, #0x40
  0033c	0a000008	 beq         |$LN5@OALIoCtlHa@2|
  00340	e59f3040	 ldr         r3, [pc, #0x40]
  00344	e5933440	 ldr         r3, [r3, #0x440]
  00348	e3130004	 tst         r3, #4
  0034c	0a000004	 beq         |$LN5@OALIoCtlHa@2|
  00350	e59f002c	 ldr         r0, [pc, #0x2C]
  00354	eb000000	 bl          NKDbgPrintfW
  00358	e3a03001	 mov         r3, #1
  0035c	e58d300c	 str         r3, [sp, #0xC]
  00360	ea000001	 b           |$LN6@OALIoCtlHa@2|
  00364		 |$LN5@OALIoCtlHa@2|
  00364	e3a03000	 mov         r3, #0
  00368	e58d300c	 str         r3, [sp, #0xC]
  0036c		 |$LN6@OALIoCtlHa@2|

; 191  :     return TRUE;

  0036c	e3a03001	 mov         r3, #1
  00370	e58d3004	 str         r3, [sp, #4]

; 192  : }

  00374	e59d0004	 ldr         r0, [sp, #4]
  00378	e28dd010	 add         sp, sp, #0x10
  0037c	e89d6000	 ldmia       sp, {sp, lr}
  00380	e12fff1e	 bx          lr
  00384		 |$LN10@OALIoCtlHa@2|
  00384		 |$LN11@OALIoCtlHa@2|
  00384	00000000	 DCD         |??_C@_1DO@LGKCENGE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00388		 |$LN12@OALIoCtlHa@2|
  00388	00000000	 DCD         |dpCurSettings|
  0038c		 |$LN13@OALIoCtlHa@2|
  0038c	00000000	 DCD         |g_CritSecRTC|
  00390		 |$LN14@OALIoCtlHa@2|
  00390	00000000	 DCD         |??_C@_1CO@MHGJMHAE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$AN?$AA?6?$AA?$AA@|
  00394		 |$M45793|

			 ENDP  ; |OALIoCtlHalRtcAlarm|

	EXPORT	|??_C@_1GE@BJKMJPKN@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKFileTimeToSystemTime|
	IMPORT	|NKSystemTimeToFileTime|
	IMPORT	|ReadRTCTimeData|
	IMPORT	|OEMGetTickCount|
	IMPORT	|__rt_udiv64by64|

  00010			 AREA	 |.pdata|, PDATA
|$T45817| DCD	|$LN18@OEMGetReal|
	DCD	0x40011f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@BJKMJPKN@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "1", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%"
	DCB	0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%"
	DCB	0x0, "0", 0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00394			 AREA	 |.text|, CODE, ARM

  00394		 |OEMGetRealTime| PROC

; 205  : {

  00394		 |$LN18@OEMGetReal|
  00394	e1a0c00d	 mov         r12, sp
  00398	e92d0001	 stmdb       sp!, {r0}
  0039c	e92d5000	 stmdb       sp!, {r12, lr}
  003a0	e24dd074	 sub         sp, sp, #0x74
  003a4		 |$M45814|

; 206  :     ULONGLONG delta, time;
; 207  :     static ULONGLONG lastRetTime = 0;	//last returned file time
; 208  :     UINT32 i=0;

  003a4	e3a03000	 mov         r3, #0
  003a8	e58d3010	 str         r3, [sp, #0x10]

; 209  : 
; 210  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OEMGetRealTime\r\n"));

  003ac	e59f3438	 ldr         r3, [pc, #0x438]
  003b0	e5933440	 ldr         r3, [r3, #0x440]
  003b4	e3130040	 tst         r3, #0x40
  003b8	0a000008	 beq         |$LN10@OEMGetReal|
  003bc	e59f3428	 ldr         r3, [pc, #0x428]
  003c0	e5933440	 ldr         r3, [r3, #0x440]
  003c4	e3130004	 tst         r3, #4
  003c8	0a000004	 beq         |$LN10@OEMGetReal|
  003cc	e59f0438	 ldr         r0, [pc, #0x438]
  003d0	eb000000	 bl          NKDbgPrintfW
  003d4	e3a03001	 mov         r3, #1
  003d8	e58d3038	 str         r3, [sp, #0x38]
  003dc	ea000001	 b           |$LN11@OEMGetReal|
  003e0		 |$LN10@OEMGetReal|
  003e0	e3a03000	 mov         r3, #0
  003e4	e58d3038	 str         r3, [sp, #0x38]
  003e8		 |$LN11@OEMGetReal|

; 211  : 
; 212  :     EnterCriticalSection(&g_CritSecRTC);

  003e8	e59f0400	 ldr         r0, [pc, #0x400]
  003ec	eb000000	 bl          EnterCriticalSection

; 213  :     
; 214  :     delta = OEMGetTickCount() - g_lastRTCTickCount; 

  003f0	eb000000	 bl          OEMGetTickCount
  003f4	e58d003c	 str         r0, [sp, #0x3C]
  003f8	e59d203c	 ldr         r2, [sp, #0x3C]
  003fc	e59f3400	 ldr         r3, [pc, #0x400]
  00400	e5933000	 ldr         r3, [r3]
  00404	e0423003	 sub         r3, r2, r3
  00408	e58d301c	 str         r3, [sp, #0x1C]
  0040c	e3a03000	 mov         r3, #0
  00410	e58d3020	 str         r3, [sp, #0x20]

; 215  :     if (delta >= RTC_MAX_PERIOD) g_fetchRTCViaI2c = TRUE;

  00414	e59d301c	 ldr         r3, [sp, #0x1C]
  00418	e58d3040	 str         r3, [sp, #0x40]
  0041c	e59d3020	 ldr         r3, [sp, #0x20]
  00420	e58d3044	 str         r3, [sp, #0x44]
  00424	e59d3040	 ldr         r3, [sp, #0x40]
  00428	e58d3048	 str         r3, [sp, #0x48]
  0042c	e59d3044	 ldr         r3, [sp, #0x44]
  00430	e3530000	 cmp         r3, #0
  00434	8a000004	 bhi         |$LN14@OEMGetReal|
  00438	e59d2048	 ldr         r2, [sp, #0x48]
  0043c	e3a03cea	 mov         r3, #0xEA, 24
  00440	e3833060	 orr         r3, r3, #0x60
  00444	e1520003	 cmp         r2, r3
  00448	3a000002	 bcc         |$LN7@OEMGetReal|
  0044c		 |$LN14@OEMGetReal|
  0044c	e59f23a4	 ldr         r2, [pc, #0x3A4]
  00450	e3a03001	 mov         r3, #1
  00454	e5823000	 str         r3, [r2]
  00458		 |$LN7@OEMGetReal|
  00458		 |$LN6@OEMGetReal|

; 216  : 
; 217  :     do {
; 218  :         // Fetch the RTC from the RTC in the Menalaus
; 219  : 	    if (g_fetchRTCViaI2c) { 

  00458	e59f3398	 ldr         r3, [pc, #0x398]
  0045c	e5933000	 ldr         r3, [r3]
  00460	e3530000	 cmp         r3, #0
  00464	0a000071	 beq         |$LN3@OEMGetReal|

; 220  : 	        RTCDATA.ADDR = RTC_TIMEREG_OFFSET;      // Set the RTC Start Address

  00468	e59f2398	 ldr         r2, [pc, #0x398]
  0046c	e3a03023	 mov         r3, #0x23
  00470	e5c23000	 strb        r3, [r2]

; 221  : 
; 222  : 	        // Read RTC time registers
; 223  : 	        if (ReadRTCTimeData( &RTCDATA, RTC_TIMEREG_SIZE )) {

  00474	e3a01007	 mov         r1, #7
  00478	e59f0388	 ldr         r0, [pc, #0x388]
  0047c	eb000000	 bl          ReadRTCTimeData
  00480	e58d004c	 str         r0, [sp, #0x4C]
  00484	e59d304c	 ldr         r3, [sp, #0x4C]
  00488	e3530000	 cmp         r3, #0
  0048c	0a000067	 beq         |$LN2@OEMGetReal|

; 224  : 	            //Convert the time to Binary format
; 225  :                 g_lastRTCTime.wMilliseconds = 0;

  00490	e59f2368	 ldr         r2, [pc, #0x368]
  00494	e3a03000	 mov         r3, #0
  00498	e1c230be	 strh        r3, [r2, #0xE]

; 226  :                 g_lastRTCTime.wDayOfWeek    = BCD2BIN(RTCDATA.RTC_WKDAY);

  0049c	e59f3364	 ldr         r3, [pc, #0x364]
  004a0	e5d33007	 ldrb        r3, [r3, #7]
  004a4	e1a01243	 mov         r1, r3, asr #4
  004a8	e3a0300a	 mov         r3, #0xA
  004ac	e0020391	 mul         r2, r1, r3
  004b0	e59f3350	 ldr         r3, [pc, #0x350]
  004b4	e5d33007	 ldrb        r3, [r3, #7]
  004b8	e203300f	 and         r3, r3, #0xF
  004bc	e0823003	 add         r3, r2, r3
  004c0	e1a02803	 mov         r2, r3, lsl #16
  004c4	e1a02822	 mov         r2, r2, lsr #16
  004c8	e59f3330	 ldr         r3, [pc, #0x330]
  004cc	e1c320b4	 strh        r2, [r3, #4]

; 227  :                 g_lastRTCTime.wYear         = BCD2BIN(RTCDATA.RTC_YR) + RTC_MIN_YEAR;

  004d0	e59f3330	 ldr         r3, [pc, #0x330]
  004d4	e5d33006	 ldrb        r3, [r3, #6]
  004d8	e1a01243	 mov         r1, r3, asr #4
  004dc	e3a0300a	 mov         r3, #0xA
  004e0	e0020391	 mul         r2, r1, r3
  004e4	e59f331c	 ldr         r3, [pc, #0x31C]
  004e8	e5d33006	 ldrb        r3, [r3, #6]
  004ec	e203300f	 and         r3, r3, #0xF
  004f0	e0823003	 add         r3, r2, r3
  004f4	e2833e7d	 add         r3, r3, #0x7D, 28
  004f8	e1a02803	 mov         r2, r3, lsl #16
  004fc	e1a02822	 mov         r2, r2, lsr #16
  00500	e59f32f8	 ldr         r3, [pc, #0x2F8]
  00504	e1c320b0	 strh        r2, [r3]

; 228  :                 g_lastRTCTime.wMonth        = BCD2BIN(RTCDATA.RTC_MON);

  00508	e59f32f8	 ldr         r3, [pc, #0x2F8]
  0050c	e5d33005	 ldrb        r3, [r3, #5]
  00510	e1a01243	 mov         r1, r3, asr #4
  00514	e3a0300a	 mov         r3, #0xA
  00518	e0020391	 mul         r2, r1, r3
  0051c	e59f32e4	 ldr         r3, [pc, #0x2E4]
  00520	e5d33005	 ldrb        r3, [r3, #5]
  00524	e203300f	 and         r3, r3, #0xF
  00528	e0823003	 add         r3, r2, r3
  0052c	e1a02803	 mov         r2, r3, lsl #16
  00530	e1a02822	 mov         r2, r2, lsr #16
  00534	e59f32c4	 ldr         r3, [pc, #0x2C4]
  00538	e1c320b2	 strh        r2, [r3, #2]

; 229  :                 g_lastRTCTime.wDay          = BCD2BIN(RTCDATA.RTC_DAY);

  0053c	e59f32c4	 ldr         r3, [pc, #0x2C4]
  00540	e5d33004	 ldrb        r3, [r3, #4]
  00544	e1a01243	 mov         r1, r3, asr #4
  00548	e3a0300a	 mov         r3, #0xA
  0054c	e0020391	 mul         r2, r1, r3
  00550	e59f32b0	 ldr         r3, [pc, #0x2B0]
  00554	e5d33004	 ldrb        r3, [r3, #4]
  00558	e203300f	 and         r3, r3, #0xF
  0055c	e0823003	 add         r3, r2, r3
  00560	e1a02803	 mov         r2, r3, lsl #16
  00564	e1a02822	 mov         r2, r2, lsr #16
  00568	e59f3290	 ldr         r3, [pc, #0x290]
  0056c	e1c320b6	 strh        r2, [r3, #6]

; 230  :                 g_lastRTCTime.wHour         = BCD2BIN(RTCDATA.RTC_HR);

  00570	e59f3290	 ldr         r3, [pc, #0x290]
  00574	e5d33003	 ldrb        r3, [r3, #3]
  00578	e1a01243	 mov         r1, r3, asr #4
  0057c	e3a0300a	 mov         r3, #0xA
  00580	e0020391	 mul         r2, r1, r3
  00584	e59f327c	 ldr         r3, [pc, #0x27C]
  00588	e5d33003	 ldrb        r3, [r3, #3]
  0058c	e203300f	 and         r3, r3, #0xF
  00590	e0823003	 add         r3, r2, r3
  00594	e1a02803	 mov         r2, r3, lsl #16
  00598	e1a02822	 mov         r2, r2, lsr #16
  0059c	e59f325c	 ldr         r3, [pc, #0x25C]
  005a0	e1c320b8	 strh        r2, [r3, #8]

; 231  :                 g_lastRTCTime.wMinute       = BCD2BIN(RTCDATA.RTC_MIN);

  005a4	e59f325c	 ldr         r3, [pc, #0x25C]
  005a8	e5d33002	 ldrb        r3, [r3, #2]
  005ac	e1a01243	 mov         r1, r3, asr #4
  005b0	e3a0300a	 mov         r3, #0xA
  005b4	e0020391	 mul         r2, r1, r3
  005b8	e59f3248	 ldr         r3, [pc, #0x248]
  005bc	e5d33002	 ldrb        r3, [r3, #2]
  005c0	e203300f	 and         r3, r3, #0xF
  005c4	e0823003	 add         r3, r2, r3
  005c8	e1a02803	 mov         r2, r3, lsl #16
  005cc	e1a02822	 mov         r2, r2, lsr #16
  005d0	e59f3228	 ldr         r3, [pc, #0x228]
  005d4	e1c320ba	 strh        r2, [r3, #0xA]

; 232  :                 g_lastRTCTime.wSecond       = BCD2BIN(RTCDATA.RTC_SEC);

  005d8	e59f3228	 ldr         r3, [pc, #0x228]
  005dc	e5d33001	 ldrb        r3, [r3, #1]
  005e0	e1a01243	 mov         r1, r3, asr #4
  005e4	e3a0300a	 mov         r3, #0xA
  005e8	e0020391	 mul         r2, r1, r3
  005ec	e59f3214	 ldr         r3, [pc, #0x214]
  005f0	e5d33001	 ldrb        r3, [r3, #1]
  005f4	e203300f	 and         r3, r3, #0xF
  005f8	e0823003	 add         r3, r2, r3
  005fc	e1a02803	 mov         r2, r3, lsl #16
  00600	e1a02822	 mov         r2, r2, lsr #16
  00604	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00608	e1c320bc	 strh        r2, [r3, #0xC]

; 233  : 
; 234  :                 // Update the tick count value for the latest RTC fetch
; 235  :                 g_lastRTCTickCount = OEMGetTickCount();

  0060c	eb000000	 bl          OEMGetTickCount
  00610	e58d0050	 str         r0, [sp, #0x50]
  00614	e59d2050	 ldr         r2, [sp, #0x50]
  00618	e59f31e4	 ldr         r3, [pc, #0x1E4]
  0061c	e5832000	 str         r2, [r3]

; 236  :                 delta = 0;

  00620	e3a03000	 mov         r3, #0
  00624	e58d301c	 str         r3, [sp, #0x1C]
  00628	e3a03000	 mov         r3, #0
  0062c	e58d3020	 str         r3, [sp, #0x20]
  00630		 |$LN2@OEMGetReal|
  00630		 |$LN3@OEMGetReal|

; 237  :             }
; 238  : 	    }
; 239  : 
; 240  :         NKSystemTimeToFileTime(&g_lastRTCTime, (FILETIME*)&time);

  00630	e28d1014	 add         r1, sp, #0x14
  00634	e59f01c4	 ldr         r0, [pc, #0x1C4]
  00638	eb000000	 bl          NKSystemTimeToFileTime

; 241  :         time += (delta/1000) * 10000000;

  0063c	e59d001c	 ldr         r0, [sp, #0x1C]
  00640	e59d1020	 ldr         r1, [sp, #0x20]
  00644	e3a02ffa	 mov         r2, #0xFA, 30
  00648	e3a03000	 mov         r3, #0
  0064c	eb000000	 bl          __rt_udiv64by64
  00650	e1a02001	 mov         r2, r1
  00654	e58d0054	 str         r0, [sp, #0x54]
  00658	e59f319c	 ldr         r3, [pc, #0x19C]
  0065c	e0010392	 mul         r1, r2, r3
  00660	e59d2054	 ldr         r2, [sp, #0x54]
  00664	e59f3190	 ldr         r3, [pc, #0x190]
  00668	e0830392	 umull       r0, r3, r2, r3
  0066c	e0811003	 add         r1, r1, r3
  00670	e59d2014	 ldr         r2, [sp, #0x14]
  00674	e59d3018	 ldr         r3, [sp, #0x18]
  00678	e0922000	 adds        r2, r2, r0
  0067c	e0a33001	 adc         r3, r3, r1
  00680	e58d2014	 str         r2, [sp, #0x14]
  00684	e58d3018	 str         r3, [sp, #0x18]

; 242  :         i++;

  00688	e59d3010	 ldr         r3, [sp, #0x10]
  0068c	e2833001	 add         r3, r3, #1
  00690	e58d3010	 str         r3, [sp, #0x10]

; 243  : 
; 244  :     // The while loop makes sure the rtc value is not going backward.
; 245  :     // If the RTC really wants to go backward, let it go, don't loop for ever.
; 246  :     } while ((time < lastRetTime) && (i<3));

  00694	e59d3014	 ldr         r3, [sp, #0x14]
  00698	e58d3058	 str         r3, [sp, #0x58]
  0069c	e59d3018	 ldr         r3, [sp, #0x18]
  006a0	e58d305c	 str         r3, [sp, #0x5C]
  006a4	e59f3148	 ldr         r3, [pc, #0x148]
  006a8	e5933000	 ldr         r3, [r3]
  006ac	e58d3060	 str         r3, [sp, #0x60]
  006b0	e59f313c	 ldr         r3, [pc, #0x13C]
  006b4	e5933004	 ldr         r3, [r3, #4]
  006b8	e58d3064	 str         r3, [sp, #0x64]
  006bc	e59d3058	 ldr         r3, [sp, #0x58]
  006c0	e58d3068	 str         r3, [sp, #0x68]
  006c4	e59d3060	 ldr         r3, [sp, #0x60]
  006c8	e58d306c	 str         r3, [sp, #0x6C]
  006cc	e59d205c	 ldr         r2, [sp, #0x5C]
  006d0	e59d3064	 ldr         r3, [sp, #0x64]
  006d4	e1520003	 cmp         r2, r3
  006d8	8a000007	 bhi         |$LN1@OEMGetReal|
  006dc	3a000003	 bcc         |$LN15@OEMGetReal|
  006e0	e59d2068	 ldr         r2, [sp, #0x68]
  006e4	e59d306c	 ldr         r3, [sp, #0x6C]
  006e8	e1520003	 cmp         r2, r3
  006ec	2a000002	 bcs         |$LN1@OEMGetReal|
  006f0		 |$LN15@OEMGetReal|
  006f0	e59d3010	 ldr         r3, [sp, #0x10]
  006f4	e3530003	 cmp         r3, #3
  006f8	3affff56	 bcc         |$LN6@OEMGetReal|
  006fc		 |$LN1@OEMGetReal|

; 247  : 
; 248  :     g_fetchRTCViaI2c = FALSE;

  006fc	e59f20f4	 ldr         r2, [pc, #0xF4]
  00700	e3a03000	 mov         r3, #0
  00704	e5823000	 str         r3, [r2]

; 249  : 
; 250  :     lastRetTime = time;

  00708	e59d2014	 ldr         r2, [sp, #0x14]
  0070c	e59f30e0	 ldr         r3, [pc, #0xE0]
  00710	e5832000	 str         r2, [r3]
  00714	e59d2018	 ldr         r2, [sp, #0x18]
  00718	e59f30d4	 ldr         r3, [pc, #0xD4]
  0071c	e5832004	 str         r2, [r3, #4]

; 251  : 
; 252  :     NKFileTimeToSystemTime((FILETIME*)&time, pTime);

  00720	e59d107c	 ldr         r1, [sp, #0x7C]
  00724	e28d0014	 add         r0, sp, #0x14
  00728	eb000000	 bl          NKFileTimeToSystemTime

; 253  : 
; 254  :     LeaveCriticalSection(&g_CritSecRTC);

  0072c	e59f00bc	 ldr         r0, [pc, #0xBC]
  00730	eb000000	 bl          LeaveCriticalSection

; 255  : 
; 256  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 257  :         L"-OEMGetRealTime(rc = 1, %d/%d/%d %d:%d:%d.%03d)\r\n", 
; 258  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 259  :         pTime->wSecond, pTime->wMilliseconds
; 260  :     ));

  00734	e59f30b0	 ldr         r3, [pc, #0xB0]
  00738	e5933440	 ldr         r3, [r3, #0x440]
  0073c	e3130040	 tst         r3, #0x40
  00740	0a000020	 beq         |$LN12@OEMGetReal|
  00744	e59f30a0	 ldr         r3, [pc, #0xA0]
  00748	e5933440	 ldr         r3, [r3, #0x440]
  0074c	e3130004	 tst         r3, #4
  00750	0a00001c	 beq         |$LN12@OEMGetReal|
  00754	e59d307c	 ldr         r3, [sp, #0x7C]
  00758	e283300e	 add         r3, r3, #0xE
  0075c	e1d330b0	 ldrh        r3, [r3]
  00760	e58d300c	 str         r3, [sp, #0xC]
  00764	e59d307c	 ldr         r3, [sp, #0x7C]
  00768	e283300c	 add         r3, r3, #0xC
  0076c	e1d330b0	 ldrh        r3, [r3]
  00770	e58d3008	 str         r3, [sp, #8]
  00774	e59d307c	 ldr         r3, [sp, #0x7C]
  00778	e283300a	 add         r3, r3, #0xA
  0077c	e1d330b0	 ldrh        r3, [r3]
  00780	e58d3004	 str         r3, [sp, #4]
  00784	e59d307c	 ldr         r3, [sp, #0x7C]
  00788	e2833008	 add         r3, r3, #8
  0078c	e1d330b0	 ldrh        r3, [r3]
  00790	e58d3000	 str         r3, [sp]
  00794	e59d307c	 ldr         r3, [sp, #0x7C]
  00798	e2833006	 add         r3, r3, #6
  0079c	e1d330b0	 ldrh        r3, [r3]
  007a0	e59d207c	 ldr         r2, [sp, #0x7C]
  007a4	e2822002	 add         r2, r2, #2
  007a8	e1d220b0	 ldrh        r2, [r2]
  007ac	e59d107c	 ldr         r1, [sp, #0x7C]
  007b0	e1d110b0	 ldrh        r1, [r1]
  007b4	e59f002c	 ldr         r0, [pc, #0x2C]
  007b8	eb000000	 bl          NKDbgPrintfW
  007bc	e3a03001	 mov         r3, #1
  007c0	e58d3070	 str         r3, [sp, #0x70]
  007c4	ea000001	 b           |$LN13@OEMGetReal|
  007c8		 |$LN12@OEMGetReal|
  007c8	e3a03000	 mov         r3, #0
  007cc	e58d3070	 str         r3, [sp, #0x70]
  007d0		 |$LN13@OEMGetReal|

; 261  : 
; 262  :     return TRUE;

  007d0	e3a03001	 mov         r3, #1
  007d4	e58d3034	 str         r3, [sp, #0x34]

; 263  : }

  007d8	e59d0034	 ldr         r0, [sp, #0x34]
  007dc	e28dd074	 add         sp, sp, #0x74
  007e0	e89d6000	 ldmia       sp, {sp, lr}
  007e4	e12fff1e	 bx          lr
  007e8		 |$LN19@OEMGetReal|
  007e8		 |$LN20@OEMGetReal|
  007e8	00000000	 DCD         |??_C@_1GE@BJKMJPKN@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd@|
  007ec		 |$LN21@OEMGetReal|
  007ec	00000000	 DCD         |dpCurSettings|
  007f0		 |$LN22@OEMGetReal|
  007f0	00000000	 DCD         |g_CritSecRTC|
  007f4		 |$LN23@OEMGetReal|
  007f4	00000000	 DCD         |?lastRetTime@?1??OEMGetRealTime@@9@9|
  007f8		 |$LN24@OEMGetReal|
  007f8	00000000	 DCD         |g_fetchRTCViaI2c|
  007fc		 |$LN25@OEMGetReal|
  007fc	00989680	 DCD         0x989680
  00800		 |$LN26@OEMGetReal|
  00800	00000000	 DCD         |g_lastRTCTime|
  00804		 |$LN27@OEMGetReal|
  00804	00000000	 DCD         |g_lastRTCTickCount|
  00808		 |$LN28@OEMGetReal|
  00808	00000000	 DCD         |RTCDATA|
  0080c		 |$LN29@OEMGetReal|
  0080c	00000000	 DCD         |??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00810		 |$M45815|

			 ENDP  ; |OEMGetRealTime|

	EXPORT	|??_C@_1DE@MMFDOKNE@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@DNBEFFJD@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd@| [ DATA ] ; `string'
	IMPORT	|WriteRTCTimeData|
	IMPORT	|__rt_sdiv|

  00018			 AREA	 |.pdata|, PDATA
|$T45843| DCD	|$LN13@OEMSetReal|
	DCD	0x4000fe04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@MMFDOKNE@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@DNBEFFJD@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%"
	DCB	0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "3", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00810			 AREA	 |.text|, CODE, ARM

  00810		 |OEMSetRealTime| PROC

; 272  : {

  00810		 |$LN13@OEMSetReal|
  00810	e1a0c00d	 mov         r12, sp
  00814	e92d0001	 stmdb       sp!, {r0}
  00818	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0081c	e24dd030	 sub         sp, sp, #0x30
  00820		 |$M45840|

; 273  :     UINT8 CtrlData = 0;

  00820	e3a03000	 mov         r3, #0
  00824	e5cd3010	 strb        r3, [sp, #0x10]

; 274  : 
; 275  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 276  :         L"OEMSetRealTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 277  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 278  :         pTime->wSecond, pTime->wMilliseconds
; 279  :     ));

  00828	e59f33c4	 ldr         r3, [pc, #0x3C4]
  0082c	e5933440	 ldr         r3, [r3, #0x440]
  00830	e3130040	 tst         r3, #0x40
  00834	0a000020	 beq         |$LN7@OEMSetReal|
  00838	e59f33b4	 ldr         r3, [pc, #0x3B4]
  0083c	e5933440	 ldr         r3, [r3, #0x440]
  00840	e3130004	 tst         r3, #4
  00844	0a00001c	 beq         |$LN7@OEMSetReal|
  00848	e59d303c	 ldr         r3, [sp, #0x3C]
  0084c	e283300e	 add         r3, r3, #0xE
  00850	e1d330b0	 ldrh        r3, [r3]
  00854	e58d300c	 str         r3, [sp, #0xC]
  00858	e59d303c	 ldr         r3, [sp, #0x3C]
  0085c	e283300c	 add         r3, r3, #0xC
  00860	e1d330b0	 ldrh        r3, [r3]
  00864	e58d3008	 str         r3, [sp, #8]
  00868	e59d303c	 ldr         r3, [sp, #0x3C]
  0086c	e283300a	 add         r3, r3, #0xA
  00870	e1d330b0	 ldrh        r3, [r3]
  00874	e58d3004	 str         r3, [sp, #4]
  00878	e59d303c	 ldr         r3, [sp, #0x3C]
  0087c	e2833008	 add         r3, r3, #8
  00880	e1d330b0	 ldrh        r3, [r3]
  00884	e58d3000	 str         r3, [sp]
  00888	e59d303c	 ldr         r3, [sp, #0x3C]
  0088c	e2833006	 add         r3, r3, #6
  00890	e1d330b0	 ldrh        r3, [r3]
  00894	e59d203c	 ldr         r2, [sp, #0x3C]
  00898	e2822002	 add         r2, r2, #2
  0089c	e1d220b0	 ldrh        r2, [r2]
  008a0	e59d103c	 ldr         r1, [sp, #0x3C]
  008a4	e1d110b0	 ldrh        r1, [r1]
  008a8	e59f0354	 ldr         r0, [pc, #0x354]
  008ac	eb000000	 bl          NKDbgPrintfW
  008b0	e3a03001	 mov         r3, #1
  008b4	e58d3028	 str         r3, [sp, #0x28]
  008b8	ea000001	 b           |$LN8@OEMSetReal|
  008bc		 |$LN7@OEMSetReal|
  008bc	e3a03000	 mov         r3, #0
  008c0	e58d3028	 str         r3, [sp, #0x28]
  008c4		 |$LN8@OEMSetReal|

; 280  : 
; 281  :     // Validate time range
; 282  :     if ((pTime->wYear > RTC_MAX_YEAR) || (pTime->wYear < RTC_MIN_YEAR)) return FALSE;

  008c4	e59d303c	 ldr         r3, [sp, #0x3C]
  008c8	e1d330b0	 ldrh        r3, [r3]
  008cc	e1a02003	 mov         r2, r3
  008d0	e3a03b02	 mov         r3, #2, 22
  008d4	e3833033	 orr         r3, r3, #0x33
  008d8	e1520003	 cmp         r2, r3
  008dc	ca000003	 bgt         |$LN3@OEMSetReal|
  008e0	e59d303c	 ldr         r3, [sp, #0x3C]
  008e4	e1d330b0	 ldrh        r3, [r3]
  008e8	e3530e7d	 cmp         r3, #0x7D, 28
  008ec	aa000002	 bge         |$LN4@OEMSetReal|
  008f0		 |$LN3@OEMSetReal|
  008f0	e3a03000	 mov         r3, #0
  008f4	e58d3024	 str         r3, [sp, #0x24]
  008f8	ea0000b8	 b           |$LN5@OEMSetReal|
  008fc		 |$LN4@OEMSetReal|

; 283  : 
; 284  :     // Convert from SYSTEMTIME structure to BCD
; 285  :     RTCDATA.ADDR      = RTC_TIMEREG_OFFSET; 

  008fc	e59f22fc	 ldr         r2, [pc, #0x2FC]
  00900	e3a03023	 mov         r3, #0x23
  00904	e5c23000	 strb        r3, [r2]

; 286  :     RTCDATA.RTC_SEC   = BIN2BCD(pTime->wSecond);  

  00908	e59d303c	 ldr         r3, [sp, #0x3C]
  0090c	e283300c	 add         r3, r3, #0xC
  00910	e1d330b0	 ldrh        r3, [r3]
  00914	e20330ff	 and         r3, r3, #0xFF
  00918	e1a01003	 mov         r1, r3
  0091c	e3a0000a	 mov         r0, #0xA
  00920	eb000000	 bl          __rt_sdiv
  00924	e1a04200	 mov         r4, r0, lsl #4
  00928	e59d303c	 ldr         r3, [sp, #0x3C]
  0092c	e283300c	 add         r3, r3, #0xC
  00930	e1d330b0	 ldrh        r3, [r3]
  00934	e20330ff	 and         r3, r3, #0xFF
  00938	e1a01003	 mov         r1, r3
  0093c	e3a0000a	 mov         r0, #0xA
  00940	eb000000	 bl          __rt_sdiv
  00944	e1843001	 orr         r3, r4, r1
  00948	e20320ff	 and         r2, r3, #0xFF
  0094c	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00950	e5c32001	 strb        r2, [r3, #1]

; 287  :     RTCDATA.RTC_MIN   = BIN2BCD(pTime->wMinute);  

  00954	e59d303c	 ldr         r3, [sp, #0x3C]
  00958	e283300a	 add         r3, r3, #0xA
  0095c	e1d330b0	 ldrh        r3, [r3]
  00960	e20330ff	 and         r3, r3, #0xFF
  00964	e1a01003	 mov         r1, r3
  00968	e3a0000a	 mov         r0, #0xA
  0096c	eb000000	 bl          __rt_sdiv
  00970	e1a04200	 mov         r4, r0, lsl #4
  00974	e59d303c	 ldr         r3, [sp, #0x3C]
  00978	e283300a	 add         r3, r3, #0xA
  0097c	e1d330b0	 ldrh        r3, [r3]
  00980	e20330ff	 and         r3, r3, #0xFF
  00984	e1a01003	 mov         r1, r3
  00988	e3a0000a	 mov         r0, #0xA
  0098c	eb000000	 bl          __rt_sdiv
  00990	e1843001	 orr         r3, r4, r1
  00994	e20320ff	 and         r2, r3, #0xFF
  00998	e59f3260	 ldr         r3, [pc, #0x260]
  0099c	e5c32002	 strb        r2, [r3, #2]

; 288  :     RTCDATA.RTC_HR    = BIN2BCD(pTime->wHour);  

  009a0	e59d303c	 ldr         r3, [sp, #0x3C]
  009a4	e2833008	 add         r3, r3, #8
  009a8	e1d330b0	 ldrh        r3, [r3]
  009ac	e20330ff	 and         r3, r3, #0xFF
  009b0	e1a01003	 mov         r1, r3
  009b4	e3a0000a	 mov         r0, #0xA
  009b8	eb000000	 bl          __rt_sdiv
  009bc	e1a04200	 mov         r4, r0, lsl #4
  009c0	e59d303c	 ldr         r3, [sp, #0x3C]
  009c4	e2833008	 add         r3, r3, #8
  009c8	e1d330b0	 ldrh        r3, [r3]
  009cc	e20330ff	 and         r3, r3, #0xFF
  009d0	e1a01003	 mov         r1, r3
  009d4	e3a0000a	 mov         r0, #0xA
  009d8	eb000000	 bl          __rt_sdiv
  009dc	e1843001	 orr         r3, r4, r1
  009e0	e20320ff	 and         r2, r3, #0xFF
  009e4	e59f3214	 ldr         r3, [pc, #0x214]
  009e8	e5c32003	 strb        r2, [r3, #3]

; 289  :     RTCDATA.RTC_DAY   = BIN2BCD(pTime->wDay);

  009ec	e59d303c	 ldr         r3, [sp, #0x3C]
  009f0	e2833006	 add         r3, r3, #6
  009f4	e1d330b0	 ldrh        r3, [r3]
  009f8	e20330ff	 and         r3, r3, #0xFF
  009fc	e1a01003	 mov         r1, r3
  00a00	e3a0000a	 mov         r0, #0xA
  00a04	eb000000	 bl          __rt_sdiv
  00a08	e1a04200	 mov         r4, r0, lsl #4
  00a0c	e59d303c	 ldr         r3, [sp, #0x3C]
  00a10	e2833006	 add         r3, r3, #6
  00a14	e1d330b0	 ldrh        r3, [r3]
  00a18	e20330ff	 and         r3, r3, #0xFF
  00a1c	e1a01003	 mov         r1, r3
  00a20	e3a0000a	 mov         r0, #0xA
  00a24	eb000000	 bl          __rt_sdiv
  00a28	e1843001	 orr         r3, r4, r1
  00a2c	e20320ff	 and         r2, r3, #0xFF
  00a30	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00a34	e5c32004	 strb        r2, [r3, #4]

; 290  :     RTCDATA.RTC_MON   = BIN2BCD(pTime->wMonth);

  00a38	e59d303c	 ldr         r3, [sp, #0x3C]
  00a3c	e2833002	 add         r3, r3, #2
  00a40	e1d330b0	 ldrh        r3, [r3]
  00a44	e20330ff	 and         r3, r3, #0xFF
  00a48	e1a01003	 mov         r1, r3
  00a4c	e3a0000a	 mov         r0, #0xA
  00a50	eb000000	 bl          __rt_sdiv
  00a54	e1a04200	 mov         r4, r0, lsl #4
  00a58	e59d303c	 ldr         r3, [sp, #0x3C]
  00a5c	e2833002	 add         r3, r3, #2
  00a60	e1d330b0	 ldrh        r3, [r3]
  00a64	e20330ff	 and         r3, r3, #0xFF
  00a68	e1a01003	 mov         r1, r3
  00a6c	e3a0000a	 mov         r0, #0xA
  00a70	eb000000	 bl          __rt_sdiv
  00a74	e1843001	 orr         r3, r4, r1
  00a78	e20320ff	 and         r2, r3, #0xFF
  00a7c	e59f317c	 ldr         r3, [pc, #0x17C]
  00a80	e5c32005	 strb        r2, [r3, #5]

; 291  :     RTCDATA.RTC_YR    = BIN2BCD(pTime->wYear - RTC_MIN_YEAR);

  00a84	e59d303c	 ldr         r3, [sp, #0x3C]
  00a88	e1d330b0	 ldrh        r3, [r3]
  00a8c	e2433e7d	 sub         r3, r3, #0x7D, 28
  00a90	e20330ff	 and         r3, r3, #0xFF
  00a94	e1a01003	 mov         r1, r3
  00a98	e3a0000a	 mov         r0, #0xA
  00a9c	eb000000	 bl          __rt_sdiv
  00aa0	e1a04200	 mov         r4, r0, lsl #4
  00aa4	e59d303c	 ldr         r3, [sp, #0x3C]
  00aa8	e1d330b0	 ldrh        r3, [r3]
  00aac	e2433e7d	 sub         r3, r3, #0x7D, 28
  00ab0	e20330ff	 and         r3, r3, #0xFF
  00ab4	e1a01003	 mov         r1, r3
  00ab8	e3a0000a	 mov         r0, #0xA
  00abc	eb000000	 bl          __rt_sdiv
  00ac0	e1843001	 orr         r3, r4, r1
  00ac4	e20320ff	 and         r2, r3, #0xFF
  00ac8	e59f3130	 ldr         r3, [pc, #0x130]
  00acc	e5c32006	 strb        r2, [r3, #6]

; 292  :     RTCDATA.RTC_WKDAY = BIN2BCD(pTime->wDayOfWeek);

  00ad0	e59d303c	 ldr         r3, [sp, #0x3C]
  00ad4	e2833004	 add         r3, r3, #4
  00ad8	e1d330b0	 ldrh        r3, [r3]
  00adc	e20330ff	 and         r3, r3, #0xFF
  00ae0	e1a01003	 mov         r1, r3
  00ae4	e3a0000a	 mov         r0, #0xA
  00ae8	eb000000	 bl          __rt_sdiv
  00aec	e1a04200	 mov         r4, r0, lsl #4
  00af0	e59d303c	 ldr         r3, [sp, #0x3C]
  00af4	e2833004	 add         r3, r3, #4
  00af8	e1d330b0	 ldrh        r3, [r3]
  00afc	e20330ff	 and         r3, r3, #0xFF
  00b00	e1a01003	 mov         r1, r3
  00b04	e3a0000a	 mov         r0, #0xA
  00b08	eb000000	 bl          __rt_sdiv
  00b0c	e1843001	 orr         r3, r4, r1
  00b10	e20320ff	 and         r2, r3, #0xFF
  00b14	e59f30e4	 ldr         r3, [pc, #0xE4]
  00b18	e5c32007	 strb        r2, [r3, #7]

; 293  : 
; 294  :     EnterCriticalSection(&g_CritSecRTC);

  00b1c	e59f00d4	 ldr         r0, [pc, #0xD4]
  00b20	eb000000	 bl          EnterCriticalSection

; 295  :     
; 296  :     // Enable RTC chip
; 297  :     ReadRTCCtrlData (MENELAUS_RTCCTRL_OFFSET, &CtrlData);

  00b24	e28d1010	 add         r1, sp, #0x10
  00b28	e3a00021	 mov         r0, #0x21
  00b2c	eb000000	 bl          ReadRTCCtrlData

; 298  :     
; 299  :     CtrlData |= RTC_EN;

  00b30	e5dd3010	 ldrb        r3, [sp, #0x10]
  00b34	e3833001	 orr         r3, r3, #1
  00b38	e20330ff	 and         r3, r3, #0xFF
  00b3c	e5cd3010	 strb        r3, [sp, #0x10]

; 300  : 
; 301  :     WriteRTCCtrlData(MENELAUS_RTCCTRL_OFFSET, CtrlData);

  00b40	e5dd1010	 ldrb        r1, [sp, #0x10]
  00b44	e3a00021	 mov         r0, #0x21
  00b48	eb000000	 bl          WriteRTCCtrlData

; 302  : 
; 303  :     // Write RTC time into the RTC device using I2C bus
; 304  :     WriteRTCTimeData(&RTCDATA, RTC_TIMEREG_SIZE);

  00b4c	e3a01007	 mov         r1, #7
  00b50	e59f00a8	 ldr         r0, [pc, #0xA8]
  00b54	eb000000	 bl          WriteRTCTimeData

; 305  :     
; 306  :     // Set the RTC_UPDATE bit to force the new RTC values into RTC
; 307  :     WriteRTCCtrlData( MENELAUS_RTCUPDATE_OFFSET, RTC_UPDATE_ALL);

  00b58	e3a01008	 mov         r1, #8
  00b5c	e3a00022	 mov         r0, #0x22
  00b60	eb000000	 bl          WriteRTCCtrlData

; 308  : 
; 309  :     // wait for the RTC update completed
; 310  :     CtrlData = RTC_UPDATE_ALL;

  00b64	e3a03008	 mov         r3, #8
  00b68	e5cd3010	 strb        r3, [sp, #0x10]
  00b6c		 |$LN2@OEMSetReal|

; 311  :     while (CtrlData & RTC_UPDATE_ALL)

  00b6c	e5dd3010	 ldrb        r3, [sp, #0x10]
  00b70	e3130008	 tst         r3, #8
  00b74	0a000003	 beq         |$LN1@OEMSetReal|

; 312  :     {
; 313  :         ReadRTCCtrlData(MENELAUS_RTCUPDATE_OFFSET, &CtrlData);

  00b78	e28d1010	 add         r1, sp, #0x10
  00b7c	e3a00022	 mov         r0, #0x22
  00b80	eb000000	 bl          ReadRTCCtrlData

; 314  :     }

  00b84	eafffff8	 b           |$LN2@OEMSetReal|
  00b88		 |$LN1@OEMSetReal|

; 315  : 
; 316  :     // Fetch real RTC vaule next time OEMGetRealtime() is called
; 317  :     g_fetchRTCViaI2c = TRUE;

  00b88	e59f206c	 ldr         r2, [pc, #0x6C]
  00b8c	e3a03001	 mov         r3, #1
  00b90	e5823000	 str         r3, [r2]

; 318  : 
; 319  :     LeaveCriticalSection(&g_CritSecRTC);

  00b94	e59f005c	 ldr         r0, [pc, #0x5C]
  00b98	eb000000	 bl          LeaveCriticalSection

; 320  : 
; 321  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetRealTime(rc = 1)\r\n"));

  00b9c	e59f3050	 ldr         r3, [pc, #0x50]
  00ba0	e5933440	 ldr         r3, [r3, #0x440]
  00ba4	e3130040	 tst         r3, #0x40
  00ba8	0a000008	 beq         |$LN9@OEMSetReal|
  00bac	e59f3040	 ldr         r3, [pc, #0x40]
  00bb0	e5933440	 ldr         r3, [r3, #0x440]
  00bb4	e3130004	 tst         r3, #4
  00bb8	0a000004	 beq         |$LN9@OEMSetReal|
  00bbc	e59f002c	 ldr         r0, [pc, #0x2C]
  00bc0	eb000000	 bl          NKDbgPrintfW
  00bc4	e3a03001	 mov         r3, #1
  00bc8	e58d302c	 str         r3, [sp, #0x2C]
  00bcc	ea000001	 b           |$LN10@OEMSetReal|
  00bd0		 |$LN9@OEMSetReal|
  00bd0	e3a03000	 mov         r3, #0
  00bd4	e58d302c	 str         r3, [sp, #0x2C]
  00bd8		 |$LN10@OEMSetReal|

; 322  :     return TRUE;

  00bd8	e3a03001	 mov         r3, #1
  00bdc	e58d3024	 str         r3, [sp, #0x24]
  00be0		 |$LN5@OEMSetReal|

; 323  : }

  00be0	e59d0024	 ldr         r0, [sp, #0x24]
  00be4	e28dd030	 add         sp, sp, #0x30
  00be8	e89d6010	 ldmia       sp, {r4, sp, lr}
  00bec	e12fff1e	 bx          lr
  00bf0		 |$LN14@OEMSetReal|
  00bf0		 |$LN15@OEMSetReal|
  00bf0	00000000	 DCD         |??_C@_1DE@MMFDOKNE@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00bf4		 |$LN16@OEMSetReal|
  00bf4	00000000	 DCD         |dpCurSettings|
  00bf8		 |$LN17@OEMSetReal|
  00bf8	00000000	 DCD         |g_CritSecRTC|
  00bfc		 |$LN18@OEMSetReal|
  00bfc	00000000	 DCD         |g_fetchRTCViaI2c|
  00c00		 |$LN19@OEMSetReal|
  00c00	00000000	 DCD         |RTCDATA|
  00c04		 |$LN20@OEMSetReal|
  00c04	00000000	 DCD         |??_C@_1FC@DNBEFFJD@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd@|
  00c08		 |$M45841|

			 ENDP  ; |OEMSetRealTime|

	EXPORT	|??_C@_1DG@ONAMAHPD@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| [ DATA ] ; `string'
	EXPORT	|OEMSetAlarmTime|
	IMPORT	|OEMInterruptDone|

  00020			 AREA	 |.pdata|, PDATA
|$T45864| DCD	|$LN12@OEMSetAlar|
	DCD	0x40010004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@ONAMAHPD@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00c08			 AREA	 |.text|, CODE, ARM

  00c08		 |OEMSetAlarmTime| PROC

; 333  : {

  00c08		 |$LN12@OEMSetAlar|
  00c08	e1a0c00d	 mov         r12, sp
  00c0c	e92d0001	 stmdb       sp!, {r0}
  00c10	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00c14	e24dd030	 sub         sp, sp, #0x30
  00c18		 |$M45861|

; 334  :     UINT8 CtrlData =0;

  00c18	e3a03000	 mov         r3, #0
  00c1c	e5cd3010	 strb        r3, [sp, #0x10]

; 335  :     UINT8 MaskData =0;

  00c20	e3a03000	 mov         r3, #0
  00c24	e5cd3011	 strb        r3, [sp, #0x11]

; 336  : 
; 337  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 338  :         L"+OEMSetAlarmTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 339  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 340  :         pTime->wSecond, pTime->wMilliseconds
; 341  :     ));

  00c28	e59f33c4	 ldr         r3, [pc, #0x3C4]
  00c2c	e5933440	 ldr         r3, [r3, #0x440]
  00c30	e3130040	 tst         r3, #0x40
  00c34	0a000020	 beq         |$LN6@OEMSetAlar|
  00c38	e59f33b4	 ldr         r3, [pc, #0x3B4]
  00c3c	e5933440	 ldr         r3, [r3, #0x440]
  00c40	e3130004	 tst         r3, #4
  00c44	0a00001c	 beq         |$LN6@OEMSetAlar|
  00c48	e59d303c	 ldr         r3, [sp, #0x3C]
  00c4c	e283300e	 add         r3, r3, #0xE
  00c50	e1d330b0	 ldrh        r3, [r3]
  00c54	e58d300c	 str         r3, [sp, #0xC]
  00c58	e59d303c	 ldr         r3, [sp, #0x3C]
  00c5c	e283300c	 add         r3, r3, #0xC
  00c60	e1d330b0	 ldrh        r3, [r3]
  00c64	e58d3008	 str         r3, [sp, #8]
  00c68	e59d303c	 ldr         r3, [sp, #0x3C]
  00c6c	e283300a	 add         r3, r3, #0xA
  00c70	e1d330b0	 ldrh        r3, [r3]
  00c74	e58d3004	 str         r3, [sp, #4]
  00c78	e59d303c	 ldr         r3, [sp, #0x3C]
  00c7c	e2833008	 add         r3, r3, #8
  00c80	e1d330b0	 ldrh        r3, [r3]
  00c84	e58d3000	 str         r3, [sp]
  00c88	e59d303c	 ldr         r3, [sp, #0x3C]
  00c8c	e2833006	 add         r3, r3, #6
  00c90	e1d330b0	 ldrh        r3, [r3]
  00c94	e59d203c	 ldr         r2, [sp, #0x3C]
  00c98	e2822002	 add         r2, r2, #2
  00c9c	e1d220b0	 ldrh        r2, [r2]
  00ca0	e59d103c	 ldr         r1, [sp, #0x3C]
  00ca4	e1d110b0	 ldrh        r1, [r1]
  00ca8	e59f0354	 ldr         r0, [pc, #0x354]
  00cac	eb000000	 bl          NKDbgPrintfW
  00cb0	e3a03001	 mov         r3, #1
  00cb4	e58d3028	 str         r3, [sp, #0x28]
  00cb8	ea000001	 b           |$LN7@OEMSetAlar|
  00cbc		 |$LN6@OEMSetAlar|
  00cbc	e3a03000	 mov         r3, #0
  00cc0	e58d3028	 str         r3, [sp, #0x28]
  00cc4		 |$LN7@OEMSetAlar|

; 342  : 
; 343  :     // Validate time range
; 344  :     if ((pTime->wYear > RTC_MAX_YEAR) || (pTime->wYear < RTC_MIN_YEAR)) return FALSE;

  00cc4	e59d303c	 ldr         r3, [sp, #0x3C]
  00cc8	e1d330b0	 ldrh        r3, [r3]
  00ccc	e1a02003	 mov         r2, r3
  00cd0	e3a03b02	 mov         r3, #2, 22
  00cd4	e3833033	 orr         r3, r3, #0x33
  00cd8	e1520003	 cmp         r2, r3
  00cdc	ca000003	 bgt         |$LN2@OEMSetAlar|
  00ce0	e59d303c	 ldr         r3, [sp, #0x3C]
  00ce4	e1d330b0	 ldrh        r3, [r3]
  00ce8	e3530e7d	 cmp         r3, #0x7D, 28
  00cec	aa000002	 bge         |$LN3@OEMSetAlar|
  00cf0		 |$LN2@OEMSetAlar|
  00cf0	e3a03000	 mov         r3, #0
  00cf4	e58d3024	 str         r3, [sp, #0x24]
  00cf8	ea0000b8	 b           |$LN4@OEMSetAlar|
  00cfc		 |$LN3@OEMSetAlar|

; 345  : 
; 346  :     if (!g_RTCBUSInitialized)

  00cfc	e59f32fc	 ldr         r3, [pc, #0x2FC]
  00d00	e5933000	 ldr         r3, [r3]
  00d04	e3530000	 cmp         r3, #0
  00d08	1a000009	 bne         |$LN1@OEMSetAlar|

; 347  :     {
; 348  :         // Init the critical section
; 349  :         InitializeCriticalSection(&g_CritSecRTC);

  00d0c	e59f02e4	 ldr         r0, [pc, #0x2E4]
  00d10	eb000000	 bl          InitializeCriticalSection

; 350  :         EnterCriticalSection(&g_CritSecRTC);

  00d14	e59f02dc	 ldr         r0, [pc, #0x2DC]
  00d18	eb000000	 bl          EnterCriticalSection

; 351  :         InitializeRTC();

  00d1c	eb000000	 bl          InitializeRTC

; 352  :         LeaveCriticalSection(&g_CritSecRTC);

  00d20	e59f02d0	 ldr         r0, [pc, #0x2D0]
  00d24	eb000000	 bl          LeaveCriticalSection

; 353  :         g_RTCBUSInitialized = TRUE;

  00d28	e59f22d0	 ldr         r2, [pc, #0x2D0]
  00d2c	e3a03001	 mov         r3, #1
  00d30	e5823000	 str         r3, [r2]
  00d34		 |$LN1@OEMSetAlar|

; 354  :     }
; 355  : 
; 356  :     // Convert from SYSTEMTIME structure to BCD
; 357  :     RTCDATA.ADDR      = RTC_ALARMREG_OFFSET; 

  00d34	e59f22c0	 ldr         r2, [pc, #0x2C0]
  00d38	e3a0302a	 mov         r3, #0x2A
  00d3c	e5c23000	 strb        r3, [r2]

; 358  :     RTCDATA.RTC_SEC   = BIN2BCD(pTime->wSecond);  

  00d40	e59d303c	 ldr         r3, [sp, #0x3C]
  00d44	e283300c	 add         r3, r3, #0xC
  00d48	e1d330b0	 ldrh        r3, [r3]
  00d4c	e20330ff	 and         r3, r3, #0xFF
  00d50	e1a01003	 mov         r1, r3
  00d54	e3a0000a	 mov         r0, #0xA
  00d58	eb000000	 bl          __rt_sdiv
  00d5c	e1a04200	 mov         r4, r0, lsl #4
  00d60	e59d303c	 ldr         r3, [sp, #0x3C]
  00d64	e283300c	 add         r3, r3, #0xC
  00d68	e1d330b0	 ldrh        r3, [r3]
  00d6c	e20330ff	 and         r3, r3, #0xFF
  00d70	e1a01003	 mov         r1, r3
  00d74	e3a0000a	 mov         r0, #0xA
  00d78	eb000000	 bl          __rt_sdiv
  00d7c	e1843001	 orr         r3, r4, r1
  00d80	e20320ff	 and         r2, r3, #0xFF
  00d84	e59f3270	 ldr         r3, [pc, #0x270]
  00d88	e5c32001	 strb        r2, [r3, #1]

; 359  :     RTCDATA.RTC_MIN   = BIN2BCD(pTime->wMinute);  

  00d8c	e59d303c	 ldr         r3, [sp, #0x3C]
  00d90	e283300a	 add         r3, r3, #0xA
  00d94	e1d330b0	 ldrh        r3, [r3]
  00d98	e20330ff	 and         r3, r3, #0xFF
  00d9c	e1a01003	 mov         r1, r3
  00da0	e3a0000a	 mov         r0, #0xA
  00da4	eb000000	 bl          __rt_sdiv
  00da8	e1a04200	 mov         r4, r0, lsl #4
  00dac	e59d303c	 ldr         r3, [sp, #0x3C]
  00db0	e283300a	 add         r3, r3, #0xA
  00db4	e1d330b0	 ldrh        r3, [r3]
  00db8	e20330ff	 and         r3, r3, #0xFF
  00dbc	e1a01003	 mov         r1, r3
  00dc0	e3a0000a	 mov         r0, #0xA
  00dc4	eb000000	 bl          __rt_sdiv
  00dc8	e1843001	 orr         r3, r4, r1
  00dcc	e20320ff	 and         r2, r3, #0xFF
  00dd0	e59f3224	 ldr         r3, [pc, #0x224]
  00dd4	e5c32002	 strb        r2, [r3, #2]

; 360  :     RTCDATA.RTC_HR    = BIN2BCD(pTime->wHour);  

  00dd8	e59d303c	 ldr         r3, [sp, #0x3C]
  00ddc	e2833008	 add         r3, r3, #8
  00de0	e1d330b0	 ldrh        r3, [r3]
  00de4	e20330ff	 and         r3, r3, #0xFF
  00de8	e1a01003	 mov         r1, r3
  00dec	e3a0000a	 mov         r0, #0xA
  00df0	eb000000	 bl          __rt_sdiv
  00df4	e1a04200	 mov         r4, r0, lsl #4
  00df8	e59d303c	 ldr         r3, [sp, #0x3C]
  00dfc	e2833008	 add         r3, r3, #8
  00e00	e1d330b0	 ldrh        r3, [r3]
  00e04	e20330ff	 and         r3, r3, #0xFF
  00e08	e1a01003	 mov         r1, r3
  00e0c	e3a0000a	 mov         r0, #0xA
  00e10	eb000000	 bl          __rt_sdiv
  00e14	e1843001	 orr         r3, r4, r1
  00e18	e20320ff	 and         r2, r3, #0xFF
  00e1c	e59f31d8	 ldr         r3, [pc, #0x1D8]
  00e20	e5c32003	 strb        r2, [r3, #3]

; 361  :     RTCDATA.RTC_DAY   = BIN2BCD(pTime->wDay);

  00e24	e59d303c	 ldr         r3, [sp, #0x3C]
  00e28	e2833006	 add         r3, r3, #6
  00e2c	e1d330b0	 ldrh        r3, [r3]
  00e30	e20330ff	 and         r3, r3, #0xFF
  00e34	e1a01003	 mov         r1, r3
  00e38	e3a0000a	 mov         r0, #0xA
  00e3c	eb000000	 bl          __rt_sdiv
  00e40	e1a04200	 mov         r4, r0, lsl #4
  00e44	e59d303c	 ldr         r3, [sp, #0x3C]
  00e48	e2833006	 add         r3, r3, #6
  00e4c	e1d330b0	 ldrh        r3, [r3]
  00e50	e20330ff	 and         r3, r3, #0xFF
  00e54	e1a01003	 mov         r1, r3
  00e58	e3a0000a	 mov         r0, #0xA
  00e5c	eb000000	 bl          __rt_sdiv
  00e60	e1843001	 orr         r3, r4, r1
  00e64	e20320ff	 and         r2, r3, #0xFF
  00e68	e59f318c	 ldr         r3, [pc, #0x18C]
  00e6c	e5c32004	 strb        r2, [r3, #4]

; 362  :     RTCDATA.RTC_MON   = BIN2BCD(pTime->wMonth);

  00e70	e59d303c	 ldr         r3, [sp, #0x3C]
  00e74	e2833002	 add         r3, r3, #2
  00e78	e1d330b0	 ldrh        r3, [r3]
  00e7c	e20330ff	 and         r3, r3, #0xFF
  00e80	e1a01003	 mov         r1, r3
  00e84	e3a0000a	 mov         r0, #0xA
  00e88	eb000000	 bl          __rt_sdiv
  00e8c	e1a04200	 mov         r4, r0, lsl #4
  00e90	e59d303c	 ldr         r3, [sp, #0x3C]
  00e94	e2833002	 add         r3, r3, #2
  00e98	e1d330b0	 ldrh        r3, [r3]
  00e9c	e20330ff	 and         r3, r3, #0xFF
  00ea0	e1a01003	 mov         r1, r3
  00ea4	e3a0000a	 mov         r0, #0xA
  00ea8	eb000000	 bl          __rt_sdiv
  00eac	e1843001	 orr         r3, r4, r1
  00eb0	e20320ff	 and         r2, r3, #0xFF
  00eb4	e59f3140	 ldr         r3, [pc, #0x140]
  00eb8	e5c32005	 strb        r2, [r3, #5]

; 363  :     RTCDATA.RTC_YR    = BIN2BCD(pTime->wYear - RTC_MIN_YEAR);

  00ebc	e59d303c	 ldr         r3, [sp, #0x3C]
  00ec0	e1d330b0	 ldrh        r3, [r3]
  00ec4	e2433e7d	 sub         r3, r3, #0x7D, 28
  00ec8	e20330ff	 and         r3, r3, #0xFF
  00ecc	e1a01003	 mov         r1, r3
  00ed0	e3a0000a	 mov         r0, #0xA
  00ed4	eb000000	 bl          __rt_sdiv
  00ed8	e1a04200	 mov         r4, r0, lsl #4
  00edc	e59d303c	 ldr         r3, [sp, #0x3C]
  00ee0	e1d330b0	 ldrh        r3, [r3]
  00ee4	e2433e7d	 sub         r3, r3, #0x7D, 28
  00ee8	e20330ff	 and         r3, r3, #0xFF
  00eec	e1a01003	 mov         r1, r3
  00ef0	e3a0000a	 mov         r0, #0xA
  00ef4	eb000000	 bl          __rt_sdiv
  00ef8	e1843001	 orr         r3, r4, r1
  00efc	e20320ff	 and         r2, r3, #0xFF
  00f00	e59f30f4	 ldr         r3, [pc, #0xF4]
  00f04	e5c32006	 strb        r2, [r3, #6]

; 364  : 
; 365  :     EnterCriticalSection(&g_CritSecRTC);

  00f08	e59f00e8	 ldr         r0, [pc, #0xE8]
  00f0c	eb000000	 bl          EnterCriticalSection

; 366  :     
; 367  :     ReadRTCCtrlData  (MENELAUS_RTCCTRL_OFFSET, &CtrlData);

  00f10	e28d1010	 add         r1, sp, #0x10
  00f14	e3a00021	 mov         r0, #0x21
  00f18	eb000000	 bl          ReadRTCCtrlData

; 368  : 
; 369  :     // Write RTC time into the RTC device using I2C bus
; 370  :     WriteRTCTimeData(&RTCDATA, RTC_ALARMREG_SIZE);

  00f1c	e3a01006	 mov         r1, #6
  00f20	e59f00d4	 ldr         r0, [pc, #0xD4]
  00f24	eb000000	 bl          WriteRTCTimeData

; 371  : 
; 372  : 	// MT - play safe, clear status bit
; 373  :     ReadRTCCtrlData(MENELAUS_INTACK2_OFFSET, &MaskData);

  00f28	e28d1011	 add         r1, sp, #0x11
  00f2c	e3a0001c	 mov         r0, #0x1C
  00f30	eb000000	 bl          ReadRTCCtrlData

; 374  :     WriteRTCCtrlData(MENELAUS_INTACK2_OFFSET, MaskData & RTCALM_MSK);

  00f34	e5dd3011	 ldrb        r3, [sp, #0x11]
  00f38	e2033002	 and         r3, r3, #2
  00f3c	e20310ff	 and         r1, r3, #0xFF
  00f40	e3a0001c	 mov         r0, #0x1C
  00f44	eb000000	 bl          WriteRTCCtrlData

; 375  :     
; 376  : 	// MT - Unmask the RTC ALARM bit in the interrupt mask
; 377  :     ReadRTCCtrlData(MENELAUS_INTMASK2_OFFSET, &MaskData);

  00f48	e28d1011	 add         r1, sp, #0x11
  00f4c	e3a00018	 mov         r0, #0x18
  00f50	eb000000	 bl          ReadRTCCtrlData

; 378  :     WriteRTCCtrlData(MENELAUS_INTMASK2_OFFSET, MaskData & (~RTCALM_MSK));

  00f54	e5dd3011	 ldrb        r3, [sp, #0x11]
  00f58	e1a02003	 mov         r2, r3
  00f5c	e3e03002	 mvn         r3, #2
  00f60	e0023003	 and         r3, r2, r3
  00f64	e20310ff	 and         r1, r3, #0xFF
  00f68	e3a00018	 mov         r0, #0x18
  00f6c	eb000000	 bl          WriteRTCCtrlData

; 379  : 
; 380  :     // Re-enable alarm interrupt
; 381  :     CtrlData |= RTC_AL_EN; 

  00f70	e5dd3010	 ldrb        r3, [sp, #0x10]
  00f74	e3833002	 orr         r3, r3, #2
  00f78	e20330ff	 and         r3, r3, #0xFF
  00f7c	e5cd3010	 strb        r3, [sp, #0x10]

; 382  :     WriteRTCCtrlData ( MENELAUS_RTCCTRL_OFFSET, CtrlData);

  00f80	e5dd1010	 ldrb        r1, [sp, #0x10]
  00f84	e3a00021	 mov         r0, #0x21
  00f88	eb000000	 bl          WriteRTCCtrlData

; 383  :     
; 384  :     LeaveCriticalSection(&g_CritSecRTC);

  00f8c	e59f0064	 ldr         r0, [pc, #0x64]
  00f90	eb000000	 bl          LeaveCriticalSection

; 385  : 
; 386  :     // Re-enable interrupt (it is disabled since last alarm occurs)
; 387  :     OEMInterruptDone(SYSINTR_RTC_ALARM);

  00f94	e3a0000d	 mov         r0, #0xD
  00f98	eb000000	 bl          OEMInterruptDone

; 388  : 
; 389  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetAlarmTime(rc = 1)\r\n"));

  00f9c	e59f3050	 ldr         r3, [pc, #0x50]
  00fa0	e5933440	 ldr         r3, [r3, #0x440]
  00fa4	e3130040	 tst         r3, #0x40
  00fa8	0a000008	 beq         |$LN8@OEMSetAlar|
  00fac	e59f3040	 ldr         r3, [pc, #0x40]
  00fb0	e5933440	 ldr         r3, [r3, #0x440]
  00fb4	e3130004	 tst         r3, #4
  00fb8	0a000004	 beq         |$LN8@OEMSetAlar|
  00fbc	e59f002c	 ldr         r0, [pc, #0x2C]
  00fc0	eb000000	 bl          NKDbgPrintfW
  00fc4	e3a03001	 mov         r3, #1
  00fc8	e58d302c	 str         r3, [sp, #0x2C]
  00fcc	ea000001	 b           |$LN9@OEMSetAlar|
  00fd0		 |$LN8@OEMSetAlar|
  00fd0	e3a03000	 mov         r3, #0
  00fd4	e58d302c	 str         r3, [sp, #0x2C]
  00fd8		 |$LN9@OEMSetAlar|

; 390  :     return TRUE;

  00fd8	e3a03001	 mov         r3, #1
  00fdc	e58d3024	 str         r3, [sp, #0x24]
  00fe0		 |$LN4@OEMSetAlar|

; 391  : }

  00fe0	e59d0024	 ldr         r0, [sp, #0x24]
  00fe4	e28dd030	 add         sp, sp, #0x30
  00fe8	e89d6010	 ldmia       sp, {r4, sp, lr}
  00fec	e12fff1e	 bx          lr
  00ff0		 |$LN13@OEMSetAlar|
  00ff0		 |$LN14@OEMSetAlar|
  00ff0	00000000	 DCD         |??_C@_1DG@ONAMAHPD@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00ff4		 |$LN15@OEMSetAlar|
  00ff4	00000000	 DCD         |dpCurSettings|
  00ff8		 |$LN16@OEMSetAlar|
  00ff8	00000000	 DCD         |g_CritSecRTC|
  00ffc		 |$LN17@OEMSetAlar|
  00ffc	00000000	 DCD         |RTCDATA|
  01000		 |$LN18@OEMSetAlar|
  01000	00000000	 DCD         |g_RTCBUSInitialized|
  01004		 |$LN19@OEMSetAlar|
  01004	00000000	 DCD         |??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@|
  01008		 |$M45862|

			 ENDP  ; |OEMSetAlarmTime|


  00028			 AREA	 |.pdata|, PDATA
|$T45877| DCD	|$LN5@Initialize|
	DCD	0x40002402
; Function compile flags: /Odtp

  01008			 AREA	 |.text|, CODE, ARM

  01008		 |InitializeRTC| PROC

; 399  : {

  01008		 |$LN5@Initialize|
  01008	e52de004	 str         lr, [sp, #-4]!
  0100c	e24dd008	 sub         sp, sp, #8
  01010		 |$M45874|

; 400  :    UINT8 CtrlData =0;

  01010	e3a03000	 mov         r3, #0
  01014	e5cd3000	 strb        r3, [sp]

; 401  : 
; 402  :    //Initialize RTC
; 403  :    //Settings: RTC Enabled
; 404  :    ReadRTCCtrlData  (MENELAUS_RTCCTRL_OFFSET, &CtrlData);

  01018	e28d1000	 add         r1, sp, #0
  0101c	e3a00021	 mov         r0, #0x21
  01020	eb000000	 bl          ReadRTCCtrlData

; 405  :    CtrlData |= RTC_EN;

  01024	e5dd3000	 ldrb        r3, [sp]
  01028	e3833001	 orr         r3, r3, #1
  0102c	e20330ff	 and         r3, r3, #0xFF
  01030	e5cd3000	 strb        r3, [sp]

; 406  :    CtrlData &= ~MODE12_N24;

  01034	e5dd3000	 ldrb        r3, [sp]
  01038	e1a02003	 mov         r2, r3
  0103c	e3e03004	 mvn         r3, #4
  01040	e0023003	 and         r3, r2, r3
  01044	e20330ff	 and         r3, r3, #0xFF
  01048	e5cd3000	 strb        r3, [sp]

; 407  :    WriteRTCCtrlData (MENELAUS_RTCCTRL_OFFSET, CtrlData);

  0104c	e5dd1000	 ldrb        r1, [sp]
  01050	e3a00021	 mov         r0, #0x21
  01054	eb000000	 bl          WriteRTCCtrlData

; 408  : 
; 409  :    // Turn on charging to backup battery
; 410  :    ReadRTCCtrlData  (MENELAUS_BBSMS_OFFSET, &CtrlData);

  01058	e28d1000	 add         r1, sp, #0
  0105c	e3a00020	 mov         r0, #0x20
  01060	eb000000	 bl          ReadRTCCtrlData

; 411  :    CtrlData |= 0x5;

  01064	e5dd3000	 ldrb        r3, [sp]
  01068	e3833005	 orr         r3, r3, #5
  0106c	e20330ff	 and         r3, r3, #0xFF
  01070	e5cd3000	 strb        r3, [sp]

; 412  :    WriteRTCCtrlData (MENELAUS_BBSMS_OFFSET, CtrlData);

  01074	e5dd1000	 ldrb        r1, [sp]
  01078	e3a00020	 mov         r0, #0x20
  0107c	eb000000	 bl          WriteRTCCtrlData

; 413  : 
; 414  :    return (TRUE);

  01080	e3a03001	 mov         r3, #1
  01084	e58d3004	 str         r3, [sp, #4]

; 415  : }   

  01088	e59d0004	 ldr         r0, [sp, #4]
  0108c	e28dd008	 add         sp, sp, #8
  01090	e49de004	 ldr         lr, [sp], #4
  01094	e12fff1e	 bx          lr
  01098		 |$M45875|

			 ENDP  ; |InitializeRTC|

	END
