; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\RTC\i2c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|WriteRTCCtrlData|
	IMPORT	|KERNELI2C_PreemptibleSubmit|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\rtc\i2c.c

  00000			 AREA	 |.pdata|, PDATA
|$T45577| DCD	|$LN7@WriteRTCCt|
	DCD	0xc0002402

  00000			 AREA	 |.xdata|, DATA
|$T45573| DCD	0xfffffff0
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45573|

  00008		 |WriteRTCCtrlData| PROC

; 35   : {

  00008		 |$LN7@WriteRTCCt|
  00008	e92d4030	 stmdb       sp!, {r4, r5, lr}
  0000c	e24ddf5d	 sub         sp, sp, #0x5D, 30
  00010		 |$M45574|
  00010	e1a05001	 mov         r5, r1
  00014	e1a04000	 mov         r4, r0
  00018	e59f3074	 ldr         r3, [pc, #0x74]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3170	 str         r3, [sp, #0x170]

; 36   :     I2CTRANS trans;
; 37   : 
; 38   :     ZeroMemory(&trans,sizeof(trans));

  00024	e3a02e17	 mov         r2, #0x17, 28
  00028	e3a01000	 mov         r1, #0
  0002c	e28d0000	 add         r0, sp, #0
  00030	eb000000	 bl          memset

; 39   :     
; 40   :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;
; 41   : 
; 42   :     /* just write the register # then the data in one shot */
; 43   :     trans.mOpCode[0] = I2C_OPCODE_WRITE;

  00034	e3a02002	 mov         r2, #2

; 44   :     trans.mBufferOffset[0] = 0;

  00038	e3a01000	 mov         r1, #0

; 45   :     trans.mTransLen[0] = 2;

  0003c	e3a00002	 mov         r0, #2
  00040	e58d200c	 str         r2, [sp, #0xC]
  00044	e58d102c	 str         r1, [sp, #0x2C]
  00048	e58d004c	 str         r0, [sp, #0x4C]
  0004c	e3a0303c	 mov         r3, #0x3C

; 46   :     trans.mBuffer[0] = reg;
; 47   :     trans.mBuffer[1] = data;
; 48   : 
; 49   :     KERNELI2C_PreemptibleSubmit(I2C_MENELAUS_ADDRESS,7,&trans);

  00050	e28d2000	 add         r2, sp, #0
  00054	e3a01007	 mov         r1, #7
  00058	e3a00072	 mov         r0, #0x72
  0005c	e58d3008	 str         r3, [sp, #8]
  00060	e5cd4070	 strb        r4, [sp, #0x70]
  00064	e5cd5071	 strb        r5, [sp, #0x71]
  00068	eb000000	 bl          KERNELI2C_PreemptibleSubmit

; 50   : 
; 51   :     return (trans.mErrorCode==0);

  0006c	e59d306c	 ldr         r3, [sp, #0x6C]
  00070	e3530000	 cmp         r3, #0
  00074	03a04001	 moveq       r4, #1
  00078	13a04000	 movne       r4, #0
  0007c	e59d0170	 ldr         r0, [sp, #0x170]
  00080	eb000000	 bl          __security_check_cookie

; 52   : }

  00084	e1a00004	 mov         r0, r4
  00088	e28ddf5d	 add         sp, sp, #0x5D, 30
  0008c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN8@WriteRTCCt|
  00094		 |$LN9@WriteRTCCt|
  00094	00000000	 DCD         |__security_cookie|
  00098		 |$M45575|

			 ENDP  ; |WriteRTCCtrlData|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ReadRTCCtrlData|

  00000			 AREA	 |.pdata|, PDATA
|$T45595| DCD	|$LN6@ReadRTCCtr|
	DCD	0xc0002e02

  00000			 AREA	 |.xdata|, DATA
|$T45591| DCD	0xffffffe8
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45591|

  00008		 |ReadRTCCtrlData| PROC

; 60   : {

  00008		 |$LN6@ReadRTCCtr|
  00008	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  0000c	e24ddf5d	 sub         sp, sp, #0x5D, 30
  00010		 |$M45592|
  00010	e1a05001	 mov         r5, r1
  00014	e1a04000	 mov         r4, r0
  00018	e59f309c	 ldr         r3, [pc, #0x9C]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3170	 str         r3, [sp, #0x170]

; 61   :     I2CTRANS trans;
; 62   : 
; 63   :     ZeroMemory(&trans,sizeof(trans));

  00024	e3a02e17	 mov         r2, #0x17, 28
  00028	e3a01000	 mov         r1, #0
  0002c	e28d0000	 add         r0, sp, #0
  00030	eb000000	 bl          memset

; 64   : 
; 65   :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;
; 66   :     /* first write register address */
; 67   :     trans.mOpCode[0] = I2C_OPCODE_WRITE;

  00034	e3a02002	 mov         r2, #2

; 68   :     trans.mBufferOffset[0] = 0;

  00038	e3a01000	 mov         r1, #0

; 69   :     trans.mTransLen[0] = 1;

  0003c	e3a00001	 mov         r0, #1

; 70   :     trans.mBuffer[0] = reg;
; 71   :     /* then read back data from that address */
; 72   :     trans.mOpCode[1] = I2C_OPCODE_READ;
; 73   :     trans.mBufferOffset[1] = 0;
; 74   :     trans.mTransLen[1] = 1;

  00040	e58d200c	 str         r2, [sp, #0xC]
  00044	e58d102c	 str         r1, [sp, #0x2C]
  00048	e58d004c	 str         r0, [sp, #0x4C]
  0004c	e3a0303c	 mov         r3, #0x3C
  00050	e3a0e001	 mov         lr, #1
  00054	e3a06000	 mov         r6, #0
  00058	e3a07001	 mov         r7, #1

; 75   : 
; 76   :     KERNELI2C_PreemptibleSubmit(I2C_MENELAUS_ADDRESS,7,&trans);

  0005c	e28d2000	 add         r2, sp, #0
  00060	e3a01007	 mov         r1, #7
  00064	e3a00072	 mov         r0, #0x72
  00068	e58d3008	 str         r3, [sp, #8]
  0006c	e58de010	 str         lr, [sp, #0x10]
  00070	e58d6030	 str         r6, [sp, #0x30]
  00074	e58d7050	 str         r7, [sp, #0x50]
  00078	e5cd4070	 strb        r4, [sp, #0x70]
  0007c	eb000000	 bl          KERNELI2C_PreemptibleSubmit

; 77   : 
; 78   :     if (trans.mErrorCode)

  00080	e59d306c	 ldr         r3, [sp, #0x6C]
  00084	e3530000	 cmp         r3, #0
  00088	0a000003	 beq         |$LN1@ReadRTCCtr|

; 79   :         return FALSE;

  0008c	e59d0170	 ldr         r0, [sp, #0x170]
  00090	eb000000	 bl          __security_check_cookie
  00094	e3a00000	 mov         r0, #0
  00098	ea000004	 b           |$LN2@ReadRTCCtr|
  0009c		 |$LN1@ReadRTCCtr|

; 80   : 
; 81   :     *pData = trans.mBuffer[0];

  0009c	e5dd3070	 ldrb        r3, [sp, #0x70]
  000a0	e5c53000	 strb        r3, [r5]

; 82   :     
; 83   :     return TRUE;

  000a4	e59d0170	 ldr         r0, [sp, #0x170]
  000a8	eb000000	 bl          __security_check_cookie
  000ac	e3a00001	 mov         r0, #1
  000b0		 |$LN2@ReadRTCCtr|

; 84   : }

  000b0	e28ddf5d	 add         sp, sp, #0x5D, 30
  000b4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN7@ReadRTCCtr|
  000bc		 |$LN8@ReadRTCCtr|
  000bc	00000000	 DCD         |__security_cookie|
  000c0		 |$M45593|

			 ENDP  ; |ReadRTCCtrlData|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ReadRTCTimeData|

  00000			 AREA	 |.pdata|, PDATA
|$T45622| DCD	|$LN15@ReadRTCTim|
	DCD	0xc0003d02

  00000			 AREA	 |.xdata|, DATA
|$T45618| DCD	0xffffffd8
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45618|

  00008		 |ReadRTCTimeData| PROC

; 93   : {

  00008		 |$LN15@ReadRTCTim|
  00008	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  0000c	e24ddf5d	 sub         sp, sp, #0x5D, 30
  00010		 |$M45619|
  00010	e1a05001	 mov         r5, r1
  00014	e1a04000	 mov         r4, r0
  00018	e59f30d8	 ldr         r3, [pc, #0xD8]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3170	 str         r3, [sp, #0x170]

; 94   :     I2CTRANS trans;
; 95   :     DWORD i;
; 96   :     UCHAR RegOffset;
; 97   :     UCHAR *pData;
; 98   : 
; 99   :     ZeroMemory(&trans,sizeof(trans));

  00024	e3a02e17	 mov         r2, #0x17, 28
  00028	e3a01000	 mov         r1, #0
  0002c	e28d0000	 add         r0, sp, #0
  00030	eb000000	 bl          memset

; 100  : 
; 101  :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  00034	e3a0303c	 mov         r3, #0x3C

; 102  : 
; 103  :     /* first byte in buffer is register # offset */
; 104  :     pData = (UCHAR *)pBuffer;
; 105  :     RegOffset = *pData;

  00038	e4d47001	 ldrb        r7, [r4], #1
  0003c	e58d3008	 str         r3, [sp, #8]

; 106  :     pData++;
; 107  : 
; 108  :     for (i=0;i<size;i++)

  00040	e3a06000	 mov         r6, #0
  00044	e3550000	 cmp         r5, #0
  00048	0a00001d	 beq         |$LN12@ReadRTCTim|
  0004c	e3a08002	 mov         r8, #2
  00050	e3a09000	 mov         r9, #0
  00054	e3a0a001	 mov         r10, #1
  00058	e3a0b001	 mov         r11, #1
  0005c	e3a03000	 mov         r3, #0
  00060	e3a0e001	 mov         lr, #1
  00064		 |$LL5@ReadRTCTim|

; 109  :     {
; 110  :         /* write register address */
; 111  :         trans.mOpCode[0] = I2C_OPCODE_WRITE;
; 112  :         trans.mBufferOffset[0] = 0;
; 113  :         trans.mTransLen[0] = 1;
; 114  :         trans.mBuffer[0] = RegOffset;
; 115  :         /* read data from that register */
; 116  :         trans.mOpCode[1] = I2C_OPCODE_READ;
; 117  :         trans.mBufferOffset[1] = 0;
; 118  :         trans.mTransLen[1] = 1;
; 119  : 
; 120  :         KERNELI2C_PreemptibleSubmit(I2C_MENELAUS_ADDRESS,7,&trans);

  00064	e28d2000	 add         r2, sp, #0
  00068	e3a01007	 mov         r1, #7
  0006c	e3a00072	 mov         r0, #0x72
  00070	e58d800c	 str         r8, [sp, #0xC]
  00074	e58d902c	 str         r9, [sp, #0x2C]
  00078	e58da04c	 str         r10, [sp, #0x4C]
  0007c	e5cd7070	 strb        r7, [sp, #0x70]
  00080	e58db010	 str         r11, [sp, #0x10]
  00084	e58d3030	 str         r3, [sp, #0x30]
  00088	e58de050	 str         lr, [sp, #0x50]
  0008c	eb000000	 bl          KERNELI2C_PreemptibleSubmit

; 121  : 
; 122  :         if (trans.mErrorCode)

  00090	e59d106c	 ldr         r1, [sp, #0x6C]
  00094	e3510000	 cmp         r1, #0
  00098	1a00000c	 bne         |$LN11@ReadRTCTim|

; 123  :             break;
; 124  : 
; 125  :         /* write returned data into the output buffer */
; 126  :         *pData = trans.mBuffer[0];

  0009c	e5dd3070	 ldrb        r3, [sp, #0x70]

; 127  :         pData++;
; 128  :         RegOffset++;

  000a0	e2872001	 add         r2, r7, #1
  000a4	e2866001	 add         r6, r6, #1
  000a8	e4c43001	 strb        r3, [r4], #1
  000ac	e3a03000	 mov         r3, #0
  000b0	e20270ff	 and         r7, r2, #0xFF
  000b4	e1560005	 cmp         r6, r5
  000b8	e3a0e001	 mov         lr, #1
  000bc	3affffe8	 bcc         |$LL5@ReadRTCTim|

; 106  :     pData++;
; 107  : 
; 108  :     for (i=0;i<size;i++)

  000c0	ea000000	 b           |$LN9@ReadRTCTim|
  000c4		 |$LN12@ReadRTCTim|
  000c4	e59d106c	 ldr         r1, [sp, #0x6C]
  000c8		 |$LN9@ReadRTCTim|

; 129  :     }
; 130  : 
; 131  :     if (trans.mErrorCode)

  000c8	e3510000	 cmp         r1, #0
  000cc	0a000003	 beq         |$LN1@ReadRTCTim|
  000d0		 |$LN11@ReadRTCTim|

; 132  :         return FALSE;

  000d0	e59d0170	 ldr         r0, [sp, #0x170]
  000d4	eb000000	 bl          __security_check_cookie
  000d8	e3a00000	 mov         r0, #0
  000dc	ea000002	 b           |$LN6@ReadRTCTim|
  000e0		 |$LN1@ReadRTCTim|

; 133  : 
; 134  :     return TRUE;

  000e0	e59d0170	 ldr         r0, [sp, #0x170]
  000e4	eb000000	 bl          __security_check_cookie
  000e8	e3a00001	 mov         r0, #1
  000ec		 |$LN6@ReadRTCTim|

; 135  : }

  000ec	e28ddf5d	 add         sp, sp, #0x5D, 30
  000f0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$LN16@ReadRTCTim|
  000f8		 |$LN17@ReadRTCTim|
  000f8	00000000	 DCD         |__security_cookie|
  000fc		 |$M45620|

			 ENDP  ; |ReadRTCTimeData|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|WriteRTCTimeData|

  00000			 AREA	 |.pdata|, PDATA
|$T45649| DCD	|$LN15@WriteRTCTi|
	DCD	0xc0003602

  00000			 AREA	 |.xdata|, DATA
|$T45645| DCD	0xffffffdc
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45645|

  00008		 |WriteRTCTimeData| PROC

; 144  : {

  00008		 |$LN15@WriteRTCTi|
  00008	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  0000c	e24ddf5d	 sub         sp, sp, #0x5D, 30
  00010		 |$M45646|
  00010	e1a07001	 mov         r7, r1
  00014	e1a04000	 mov         r4, r0
  00018	e59f30bc	 ldr         r3, [pc, #0xBC]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3170	 str         r3, [sp, #0x170]

; 145  :     I2CTRANS trans;
; 146  :     DWORD i;
; 147  :     UCHAR RegOffset;
; 148  :     UCHAR *pData;
; 149  : 
; 150  :     ZeroMemory(&trans,sizeof(trans));

  00024	e3a02e17	 mov         r2, #0x17, 28
  00028	e3a01000	 mov         r1, #0
  0002c	e28d0000	 add         r0, sp, #0
  00030	eb000000	 bl          memset

; 151  : 
; 152  :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  00034	e3a0303c	 mov         r3, #0x3C

; 153  : 
; 154  :     /* first byte in buffer is register # offset */
; 155  :     pData = (UCHAR *)pBuffer;
; 156  :     RegOffset = *pData;

  00038	e4d46001	 ldrb        r6, [r4], #1
  0003c	e58d3008	 str         r3, [sp, #8]

; 157  :     pData++;
; 158  : 
; 159  :     for (i=0;i<size;i++)

  00040	e3a05000	 mov         r5, #0
  00044	e3570000	 cmp         r7, #0
  00048	0a000016	 beq         |$LN12@WriteRTCTi|
  0004c	e3a08002	 mov         r8, #2
  00050	e3a09000	 mov         r9, #0
  00054	e3a0a002	 mov         r10, #2
  00058		 |$LL5@WriteRTCTi|

; 160  :     {
; 161  :         /* write register address, then data for that register */
; 162  :         trans.mOpCode[0] = I2C_OPCODE_WRITE;
; 163  :         trans.mBufferOffset[0] = 0;
; 164  :         trans.mTransLen[0] = 2;
; 165  :         trans.mBuffer[0] = RegOffset;
; 166  :         trans.mBuffer[1] = *pData;

  00058	e5d43000	 ldrb        r3, [r4]

; 167  : 
; 168  :         KERNELI2C_PreemptibleSubmit(I2C_MENELAUS_ADDRESS,7,&trans);

  0005c	e28d2000	 add         r2, sp, #0
  00060	e3a01007	 mov         r1, #7
  00064	e3a00072	 mov         r0, #0x72
  00068	e5cd3071	 strb        r3, [sp, #0x71]
  0006c	e58d800c	 str         r8, [sp, #0xC]
  00070	e58d902c	 str         r9, [sp, #0x2C]
  00074	e58da04c	 str         r10, [sp, #0x4C]
  00078	e5cd6070	 strb        r6, [sp, #0x70]
  0007c	eb000000	 bl          KERNELI2C_PreemptibleSubmit

; 169  : 
; 170  :         if (trans.mErrorCode)

  00080	e59d206c	 ldr         r2, [sp, #0x6C]
  00084	e3520000	 cmp         r2, #0
  00088	1a000009	 bne         |$LN11@WriteRTCTi|

; 171  :             break;
; 172  : 
; 173  :         /* update for next write */
; 174  :         pData++;
; 175  :         RegOffset++;

  0008c	e2863001	 add         r3, r6, #1
  00090	e2855001	 add         r5, r5, #1
  00094	e20360ff	 and         r6, r3, #0xFF
  00098	e1550007	 cmp         r5, r7
  0009c	e2844001	 add         r4, r4, #1
  000a0	3affffec	 bcc         |$LL5@WriteRTCTi|

; 157  :     pData++;
; 158  : 
; 159  :     for (i=0;i<size;i++)

  000a4	ea000000	 b           |$LN9@WriteRTCTi|
  000a8		 |$LN12@WriteRTCTi|
  000a8	e59d206c	 ldr         r2, [sp, #0x6C]
  000ac		 |$LN9@WriteRTCTi|

; 176  :     }
; 177  : 
; 178  :     if (trans.mErrorCode)

  000ac	e3520000	 cmp         r2, #0
  000b0	0a000003	 beq         |$LN1@WriteRTCTi|
  000b4		 |$LN11@WriteRTCTi|

; 179  :         return FALSE;

  000b4	e59d0170	 ldr         r0, [sp, #0x170]
  000b8	eb000000	 bl          __security_check_cookie
  000bc	e3a00000	 mov         r0, #0
  000c0	ea000002	 b           |$LN6@WriteRTCTi|
  000c4		 |$LN1@WriteRTCTi|

; 180  : 
; 181  :     return TRUE;

  000c4	e59d0170	 ldr         r0, [sp, #0x170]
  000c8	eb000000	 bl          __security_check_cookie
  000cc	e3a00001	 mov         r0, #1
  000d0		 |$LN6@WriteRTCTi|

; 182  : }   

  000d0	e28ddf5d	 add         sp, sp, #0x5D, 30
  000d4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN16@WriteRTCTi|
  000dc		 |$LN17@WriteRTCTi|
  000dc	00000000	 DCD         |__security_cookie|
  000e0		 |$M45647|

			 ENDP  ; |WriteRTCTimeData|

	END
