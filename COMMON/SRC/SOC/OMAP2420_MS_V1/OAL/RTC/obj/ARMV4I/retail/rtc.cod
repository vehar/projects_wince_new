; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\RTC\rtc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|RTCDATA|, 0x8


  00000			 AREA	 |.bss|, NOINIT
|g_RTCBUSInitialized| % 0x4
|g_lastRTCTickCount| % 0x4
|?lastRetTime@?1??OEMGetRealTime@@9@9| % 0x8		; `OEMGetRealTime'::`2'::lastRetTime

  00000			 AREA	 |.data|, DATA
|g_fetchRTCViaI2c| DCD 0x1

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|g_rtcUpperBound| DCD 0x6302b800
	DCD	0x5f825a0
	EXPORT	|OALIoCtlHalRtcAlarm|
	EXPORT	|??_C@_1DO@LGKCENGE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@MHGJMHAE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKSetInterruptEvent|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|WriteRTCCtrlData|
	IMPORT	|ReadRTCCtrlData|
	IMPORT	|EnterCriticalSection|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00010			 AREA	 |.bss|, NOINIT
|g_CritSecRTC| % 0x14
|g_CritSecRTC| % 0x14
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\rtc\rtc.c

  00000			 AREA	 |.pdata|, PDATA
|$T45815| DCD	|$LN9@OALIoCtlHa|
	DCD	0x40003202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@LGKCENGE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "R"
	DCB	0x0, "t", 0x0, "c", 0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r"
	DCB	0x0, "m", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MHGJMHAE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "R"
	DCB	0x0, "t", 0x0, "c", 0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r"
	DCB	0x0, "m", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalRtcAlarm| PROC

; 166  : {

  00000		 |$LN9@OALIoCtlHa|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45812|

; 167  :     UINT8 MaskData = RTCALM_MSK;
; 168  : 
; 169  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OALIoCtlHalRtcAlarm\r\n"));

  00008	e59f40b4	 ldr         r4, [pc, #0xB4]
  0000c	e3a03002	 mov         r3, #2
  00010	e5cd3000	 strb        r3, [sp]
  00014	e5943440	 ldr         r3, [r4, #0x440]
  00018	e3130040	 tst         r3, #0x40
  0001c	13130004	 tstne       r3, #4
  00020	159f0098	 ldrne       r0, [pc, #0x98]
  00024	1b000000	 blne        NKDbgPrintfW

; 170  : 
; 171  :     EnterCriticalSection(&g_CritSecRTC);

  00028	e59f008c	 ldr         r0, [pc, #0x8C]
  0002c	eb000000	 bl          EnterCriticalSection

; 172  :     
; 173  : 
; 174  :     // clear status bit
; 175  :     ReadRTCCtrlData(MENELAUS_INTACK2_OFFSET, &MaskData);

  00030	e28d1000	 add         r1, sp, #0
  00034	e3a0001c	 mov         r0, #0x1C
  00038	eb000000	 bl          ReadRTCCtrlData

; 176  :     WriteRTCCtrlData(MENELAUS_INTACK2_OFFSET, MaskData | RTCALM_MSK);

  0003c	e5dd3000	 ldrb        r3, [sp]
  00040	e3a0001c	 mov         r0, #0x1C
  00044	e3831002	 orr         r1, r3, #2
  00048	eb000000	 bl          WriteRTCCtrlData

; 177  :     
; 178  :     // mask the RTC ALARM bit in the interrupt mask
; 179  :     ReadRTCCtrlData(MENELAUS_INTMASK2_OFFSET, &MaskData);

  0004c	e28d1000	 add         r1, sp, #0
  00050	e3a00018	 mov         r0, #0x18
  00054	eb000000	 bl          ReadRTCCtrlData

; 180  :     WriteRTCCtrlData(MENELAUS_INTMASK2_OFFSET, MaskData | RTCALM_MSK);

  00058	e5dd3000	 ldrb        r3, [sp]
  0005c	e3a00018	 mov         r0, #0x18
  00060	e3831002	 orr         r1, r3, #2
  00064	eb000000	 bl          WriteRTCCtrlData

; 181  : 
; 182  :     // Disable alarm interrupt
; 183  :     ReadRTCCtrlData(MENELAUS_RTCCTRL_OFFSET, &MaskData);

  00068	e28d1000	 add         r1, sp, #0
  0006c	e3a00021	 mov         r0, #0x21
  00070	eb000000	 bl          ReadRTCCtrlData

; 184  :     WriteRTCCtrlData (MENELAUS_RTCCTRL_OFFSET, MaskData & (~RTC_AL_EN));

  00074	e5dd3000	 ldrb        r3, [sp]
  00078	e3a00021	 mov         r0, #0x21
  0007c	e20310fd	 and         r1, r3, #0xFD
  00080	eb000000	 bl          WriteRTCCtrlData

; 185  :     
; 186  :     LeaveCriticalSection(&g_CritSecRTC);

  00084	e59f0030	 ldr         r0, [pc, #0x30]
  00088	eb000000	 bl          LeaveCriticalSection

; 187  : 
; 188  :     NKSetInterruptEvent(SYSINTR_RTC_ALARM);

  0008c	e3a0000d	 mov         r0, #0xD
  00090	eb000000	 bl          NKSetInterruptEvent

; 189  : 
; 190  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OALIoCtlHalRtcAlarm(rc = 1)\r\n"));

  00094	e5943440	 ldr         r3, [r4, #0x440]
  00098	e3130040	 tst         r3, #0x40
  0009c	13130004	 tstne       r3, #4
  000a0	159f0010	 ldrne       r0, [pc, #0x10]
  000a4	1b000000	 blne        NKDbgPrintfW

; 191  :     return TRUE;

  000a8	e3a00001	 mov         r0, #1

; 192  : }

  000ac	e28dd004	 add         sp, sp, #4
  000b0	e8bd4010	 ldmia       sp!, {r4, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN10@OALIoCtlHa|
  000b8		 |$LN11@OALIoCtlHa|
  000b8	00000000	 DCD         |??_C@_1DO@LGKCENGE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000bc		 |$LN12@OALIoCtlHa|
  000bc	00000000	 DCD         |g_CritSecRTC|
  000c0		 |$LN13@OALIoCtlHa|
  000c0	00000000	 DCD         |??_C@_1CO@MHGJMHAE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$AN?$AA?6?$AA?$AA@|
  000c4		 |$LN14@OALIoCtlHa|
  000c4	00000000	 DCD         |dpCurSettings|
  000c8		 |$M45813|

			 ENDP  ; |OALIoCtlHalRtcAlarm|

	EXPORT	|OEMGetRealTime|
	EXPORT	|??_C@_1GE@BJKMJPKN@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKFileTimeToSystemTime|
	IMPORT	|NKSystemTimeToFileTime|
	IMPORT	|ReadRTCTimeData|
	IMPORT	|OEMGetTickCount|
	IMPORT	|__rt_udiv64by64|

  00038			 AREA	 |.bss|, NOINIT
|g_lastRTCTime| % 0x10
|g_lastRTCTime| % 0x10

  00000			 AREA	 |.pdata|, PDATA
|$T45850| DCD	|$LN24@OEMGetReal|
	DCD	0x4000af02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@BJKMJPKN@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "1", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%"
	DCB	0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%"
	DCB	0x0, "0", 0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMGetRealTime| PROC

; 205  : {

  00000		 |$LN24@OEMGetReal|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd028	 sub         sp, sp, #0x28
  00008		 |$M45847|
  00008	e58d0014	 str         r0, [sp, #0x14]

; 206  :     ULONGLONG delta, time;
; 207  :     static ULONGLONG lastRetTime = 0;	//last returned file time
; 208  :     UINT32 i=0;
; 209  : 
; 210  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OEMGetRealTime\r\n"));

  0000c	e59f3290	 ldr         r3, [pc, #0x290]
  00010	e3a05000	 mov         r5, #0
  00014	e58d5010	 str         r5, [sp, #0x10]
  00018	e5933440	 ldr         r3, [r3, #0x440]
  0001c	e3130040	 tst         r3, #0x40
  00020	13130004	 tstne       r3, #4
  00024	159f028c	 ldrne       r0, [pc, #0x28C]
  00028	1b000000	 blne        NKDbgPrintfW

; 211  : 
; 212  :     EnterCriticalSection(&g_CritSecRTC);

  0002c	e59f9280	 ldr         r9, [pc, #0x280]
  00030	e2890010	 add         r0, r9, #0x10
  00034	eb000000	 bl          EnterCriticalSection

; 213  :     
; 214  :     delta = OEMGetTickCount() - g_lastRTCTickCount; 

  00038	eb000000	 bl          OEMGetTickCount
  0003c	e5992028	 ldr         r2, [r9, #0x28]

; 215  :     if (delta >= RTC_MAX_PERIOD) g_fetchRTCViaI2c = TRUE;

  00040	e3b03000	 movs        r3, #0
  00044	e59f4260	 ldr         r4, [pc, #0x260]
  00048	e0406002	 sub         r6, r0, r2
  0004c	e58d3024	 str         r3, [sp, #0x24]
  00050	1a000003	 bne         |$LN16@OEMGetReal|
  00054	e3a03cea	 mov         r3, #0xEA, 24
  00058	e3833060	 orr         r3, r3, #0x60
  0005c	e1560003	 cmp         r6, r3
  00060	3a000001	 bcc         |$LN19@OEMGetReal|
  00064		 |$LN16@OEMGetReal|
  00064	e3a03001	 mov         r3, #1
  00068	e5843000	 str         r3, [r4]
  0006c		 |$LN19@OEMGetReal|
  0006c	e59f723c	 ldr         r7, [pc, #0x23C]
  00070		 |$LL6@OEMGetReal|
  00070	e5943000	 ldr         r3, [r4]

; 216  : 
; 217  :     do {
; 218  :         // Fetch the RTC from the RTC in the Menalaus
; 219  : 	    if (g_fetchRTCViaI2c) { 

  00074	e3530000	 cmp         r3, #0
  00078	0a00004b	 beq         |$LN2@OEMGetReal|

; 220  : 	        RTCDATA.ADDR = RTC_TIMEREG_OFFSET;      // Set the RTC Start Address

  0007c	e3a03023	 mov         r3, #0x23

; 221  : 
; 222  : 	        // Read RTC time registers
; 223  : 	        if (ReadRTCTimeData( &RTCDATA, RTC_TIMEREG_SIZE )) {

  00080	e3a01007	 mov         r1, #7
  00084	e1a00007	 mov         r0, r7
  00088	e5c73000	 strb        r3, [r7]
  0008c	eb000000	 bl          ReadRTCTimeData
  00090	e3500000	 cmp         r0, #0
  00094	0a000044	 beq         |$LN2@OEMGetReal|

; 224  : 	            //Convert the time to Binary format
; 225  :                 g_lastRTCTime.wMilliseconds = 0;
; 226  :                 g_lastRTCTime.wDayOfWeek    = BCD2BIN(RTCDATA.RTC_WKDAY);
; 227  :                 g_lastRTCTime.wYear         = BCD2BIN(RTCDATA.RTC_YR) + RTC_MIN_YEAR;

  00098	e5d75006	 ldrb        r5, [r7, #6]
  0009c	e5d71007	 ldrb        r1, [r7, #7]

; 228  :                 g_lastRTCTime.wMonth        = BCD2BIN(RTCDATA.RTC_MON);
; 229  :                 g_lastRTCTime.wDay          = BCD2BIN(RTCDATA.RTC_DAY);

  000a0	e5d7a004	 ldrb        r10, [r7, #4]
  000a4	e5d79005	 ldrb        r9, [r7, #5]
  000a8	e1a03225	 mov         r3, r5, lsr #4

; 230  :                 g_lastRTCTime.wHour         = BCD2BIN(RTCDATA.RTC_HR);

  000ac	e1a02221	 mov         r2, r1, lsr #4

; 231  :                 g_lastRTCTime.wMinute       = BCD2BIN(RTCDATA.RTC_MIN);

  000b0	e5d7e002	 ldrb        lr, [r7, #2]
  000b4	e28330c8	 add         r3, r3, #0xC8

; 232  :                 g_lastRTCTime.wSecond       = BCD2BIN(RTCDATA.RTC_SEC);

  000b8	e1a04802	 mov         r4, r2, lsl #16
  000bc	e5d7b003	 ldrb        r11, [r7, #3]
  000c0	e1a0222a	 mov         r2, r10, lsr #4
  000c4	e1a00803	 mov         r0, r3, lsl #16
  000c8	e1a03229	 mov         r3, r9, lsr #4
  000cc	e1a08802	 mov         r8, r2, lsl #16
  000d0	e1a0222e	 mov         r2, lr, lsr #4
  000d4	e59fe1d4	 ldr         lr, [pc, #0x1D4]
  000d8	e1a07803	 mov         r7, r3, lsl #16
  000dc	e1a0322b	 mov         r3, r11, lsr #4
  000e0	e1a06803	 mov         r6, r3, lsl #16
  000e4	e5de3001	 ldrb        r3, [lr, #1]
  000e8	e1a04824	 mov         r4, r4, lsr #16
  000ec	e201100f	 and         r1, r1, #0xF
  000f0	e1a0e223	 mov         lr, r3, lsr #4
  000f4	e205300f	 and         r3, r5, #0xF
  000f8	e1a05802	 mov         r5, r2, lsl #16
  000fc	e3a0200a	 mov         r2, #0xA
  00100	e0221294	 mla         r2, r4, r2, r1
  00104	e3a0100a	 mov         r1, #0xA
  00108	e1a00820	 mov         r0, r0, lsr #16
  0010c	e0233190	 mla         r3, r0, r1, r3
  00110	e209000f	 and         r0, r9, #0xF
  00114	e3a01000	 mov         r1, #0
  00118	e59f9194	 ldr         r9, [pc, #0x194]
  0011c	e1a07827	 mov         r7, r7, lsr #16
  00120	e1a08828	 mov         r8, r8, lsr #16
  00124	e1c910be	 strh        r1, [r9, #0xE]
  00128	e1c920b4	 strh        r2, [r9, #4]
  0012c	e1c930b0	 strh        r3, [r9]
  00130	e3a0300a	 mov         r3, #0xA
  00134	e0230397	 mla         r3, r7, r3, r0
  00138	e3a0000a	 mov         r0, #0xA
  0013c	e20a100f	 and         r1, r10, #0xF
  00140	e59f7168	 ldr         r7, [pc, #0x168]
  00144	e1a0480e	 mov         r4, lr, lsl #16
  00148	e02e1098	 mla         lr, r8, r0, r1
  0014c	e3a0100a	 mov         r1, #0xA
  00150	e1a06826	 mov         r6, r6, lsr #16
  00154	e20b200f	 and         r2, r11, #0xF
  00158	e0212196	 mla         r1, r6, r1, r2
  0015c	e5d72001	 ldrb        r2, [r7, #1]
  00160	e1c930b2	 strh        r3, [r9, #2]
  00164	e5d73002	 ldrb        r3, [r7, #2]
  00168	e202000f	 and         r0, r2, #0xF
  0016c	e3a0200a	 mov         r2, #0xA
  00170	e1a05825	 mov         r5, r5, lsr #16
  00174	e203300f	 and         r3, r3, #0xF
  00178	e0223295	 mla         r2, r5, r2, r3
  0017c	e3a0300a	 mov         r3, #0xA
  00180	e1a04824	 mov         r4, r4, lsr #16
  00184	e0230394	 mla         r3, r4, r3, r0
  00188	e1c9e0b6	 strh        lr, [r9, #6]
  0018c	e1c910b8	 strh        r1, [r9, #8]
  00190	e1c920ba	 strh        r2, [r9, #0xA]
  00194	e1c930bc	 strh        r3, [r9, #0xC]

; 233  : 
; 234  :                 // Update the tick count value for the latest RTC fetch
; 235  :                 g_lastRTCTickCount = OEMGetTickCount();

  00198	eb000000	 bl          OEMGetTickCount
  0019c	e59f4108	 ldr         r4, [pc, #0x108]

; 236  :                 delta = 0;
; 237  :             }
; 238  : 	    }
; 239  : 
; 240  :         NKSystemTimeToFileTime(&g_lastRTCTime, (FILETIME*)&time);
; 241  :         time += (delta/1000) * 10000000;
; 242  :         i++;
; 243  : 
; 244  :     // The while loop makes sure the rtc value is not going backward.
; 245  :     // If the RTC really wants to go backward, let it go, don't loop for ever.
; 246  :     } while ((time < lastRetTime) && (i<3));

  001a0	e59d5010	 ldr         r5, [sp, #0x10]
  001a4	e5890028	 str         r0, [r9, #0x28]
  001a8	e3a06000	 mov         r6, #0
  001ac		 |$LN2@OEMGetReal|
  001ac	e28d1018	 add         r1, sp, #0x18
  001b0	e1a00009	 mov         r0, r9
  001b4	eb000000	 bl          NKSystemTimeToFileTime
  001b8	e1a00006	 mov         r0, r6
  001bc	e3a01000	 mov         r1, #0
  001c0	e3a02ffa	 mov         r2, #0xFA, 30
  001c4	e3a03000	 mov         r3, #0
  001c8	eb000000	 bl          __rt_udiv64by64
  001cc	e59fe0d4	 ldr         lr, [pc, #0xD4]
  001d0	e2855001	 add         r5, r5, #1
  001d4	e58d5010	 str         r5, [sp, #0x10]
  001d8	e0832e90	 umull       r2, r3, r0, lr
  001dc	e0203e91	 mla         r0, r1, lr, r3
  001e0	e59d3018	 ldr         r3, [sp, #0x18]
  001e4	e5991034	 ldr         r1, [r9, #0x34]
  001e8	e0932002	 adds        r2, r3, r2
  001ec	e59d301c	 ldr         r3, [sp, #0x1C]
  001f0	e58d2018	 str         r2, [sp, #0x18]
  001f4	e0a33000	 adc         r3, r3, r0
  001f8	e1530001	 cmp         r3, r1
  001fc	e5991030	 ldr         r1, [r9, #0x30]
  00200	e58d301c	 str         r3, [sp, #0x1C]
  00204	8a000004	 bhi         |$LN1@OEMGetReal|
  00208	3a000001	 bcc         |$LN17@OEMGetReal|
  0020c	e1520001	 cmp         r2, r1
  00210	2a000001	 bcs         |$LN1@OEMGetReal|
  00214		 |$LN17@OEMGetReal|
  00214	e3550003	 cmp         r5, #3
  00218	3affff94	 bcc         |$LL6@OEMGetReal|
  0021c		 |$LN1@OEMGetReal|

; 247  : 
; 248  :     g_fetchRTCViaI2c = FALSE;
; 249  : 
; 250  :     lastRetTime = time;
; 251  : 
; 252  :     NKFileTimeToSystemTime((FILETIME*)&time, pTime);

  0021c	e59d7014	 ldr         r7, [sp, #0x14]
  00220	e3a01000	 mov         r1, #0
  00224	e5841000	 str         r1, [r4]
  00228	e1a01007	 mov         r1, r7
  0022c	e5892030	 str         r2, [r9, #0x30]
  00230	e28d0018	 add         r0, sp, #0x18
  00234	e5893034	 str         r3, [r9, #0x34]
  00238	eb000000	 bl          NKFileTimeToSystemTime

; 253  : 
; 254  :     LeaveCriticalSection(&g_CritSecRTC);

  0023c	e2890010	 add         r0, r9, #0x10
  00240	eb000000	 bl          LeaveCriticalSection

; 255  : 
; 256  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 257  :         L"-OEMGetRealTime(rc = 1, %d/%d/%d %d:%d:%d.%03d)\r\n", 
; 258  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 259  :         pTime->wSecond, pTime->wMilliseconds
; 260  :     ));

  00244	e59f2058	 ldr         r2, [pc, #0x58]
  00248	e5923440	 ldr         r3, [r2, #0x440]
  0024c	e3130040	 tst         r3, #0x40
  00250	0a00000e	 beq         |$LN12@OEMGetReal|
  00254	e3130004	 tst         r3, #4
  00258	0a00000c	 beq         |$LN12@OEMGetReal|
  0025c	e1d7e0be	 ldrh        lr, [r7, #0xE]
  00260	e1d740bc	 ldrh        r4, [r7, #0xC]
  00264	e1d750ba	 ldrh        r5, [r7, #0xA]
  00268	e1d760b8	 ldrh        r6, [r7, #8]
  0026c	e1d730b6	 ldrh        r3, [r7, #6]
  00270	e1d720b2	 ldrh        r2, [r7, #2]
  00274	e1d710b0	 ldrh        r1, [r7]
  00278	e59f0020	 ldr         r0, [pc, #0x20]
  0027c	e58de00c	 str         lr, [sp, #0xC]
  00280	e58d4008	 str         r4, [sp, #8]
  00284	e58d5004	 str         r5, [sp, #4]
  00288	e58d6000	 str         r6, [sp]
  0028c	eb000000	 bl          NKDbgPrintfW
  00290		 |$LN12@OEMGetReal|

; 261  : 
; 262  :     return TRUE;

  00290	e3a00001	 mov         r0, #1

; 263  : }

  00294	e28dd028	 add         sp, sp, #0x28
  00298	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0029c	e12fff1e	 bx          lr
  002a0		 |$LN25@OEMGetReal|
  002a0		 |$LN26@OEMGetReal|
  002a0	00000000	 DCD         |??_C@_1GE@BJKMJPKN@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd@|
  002a4		 |$LN27@OEMGetReal|
  002a4	00000000	 DCD         |dpCurSettings|
  002a8		 |$LN28@OEMGetReal|
  002a8	00989680	 DCD         0x989680
  002ac		 |$LN29@OEMGetReal|
  002ac	00000000	 DCD         |g_fetchRTCViaI2c|
  002b0		 |$LN30@OEMGetReal|
  002b0	00000000	 DCD         |RTCDATA|
  002b4		 |$LN31@OEMGetReal|
  002b4	00000000	 DCD         |g_lastRTCTime|
  002b8		 |$LN32@OEMGetReal|
  002b8	00000000	 DCD         |??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  002bc		 |$M45848|

			 ENDP  ; |OEMGetRealTime|

	EXPORT	|OEMSetRealTime|
	EXPORT	|??_C@_1DE@MMFDOKNE@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@DNBEFFJD@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd@| [ DATA ] ; `string'
	IMPORT	|WriteRTCTimeData|

  00000			 AREA	 |.pdata|, PDATA
|$T45876| DCD	|$LN15@OEMSetReal|
	DCD	0x40009002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@MMFDOKNE@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@DNBEFFJD@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%"
	DCB	0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%"
	DCB	0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "3", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMSetRealTime| PROC

; 272  : {

  00000		 |$LN15@OEMSetReal|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M45873|
  00008	e1a07000	 mov         r7, r0

; 273  :     UINT8 CtrlData = 0;
; 274  : 
; 275  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 276  :         L"OEMSetRealTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 277  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 278  :         pTime->wSecond, pTime->wMilliseconds
; 279  :     ));

  0000c	e59f8228	 ldr         r8, [pc, #0x228]
  00010	e3a03000	 mov         r3, #0
  00014	e5cd3010	 strb        r3, [sp, #0x10]
  00018	e5983440	 ldr         r3, [r8, #0x440]
  0001c	e3130040	 tst         r3, #0x40
  00020	0a00000e	 beq         |$LN7@OEMSetReal|
  00024	e3130004	 tst         r3, #4
  00028	0a00000c	 beq         |$LN7@OEMSetReal|
  0002c	e1d7e0be	 ldrh        lr, [r7, #0xE]
  00030	e1d740bc	 ldrh        r4, [r7, #0xC]
  00034	e1d750ba	 ldrh        r5, [r7, #0xA]
  00038	e1d760b8	 ldrh        r6, [r7, #8]
  0003c	e1d730b6	 ldrh        r3, [r7, #6]
  00040	e1d720b2	 ldrh        r2, [r7, #2]
  00044	e1d710b0	 ldrh        r1, [r7]
  00048	e59f01e8	 ldr         r0, [pc, #0x1E8]
  0004c	e58de00c	 str         lr, [sp, #0xC]
  00050	e58d4008	 str         r4, [sp, #8]
  00054	e58d5004	 str         r5, [sp, #4]
  00058	e58d6000	 str         r6, [sp]
  0005c	eb000000	 bl          NKDbgPrintfW
  00060		 |$LN7@OEMSetReal|

; 280  : 
; 281  :     // Validate time range
; 282  :     if ((pTime->wYear > RTC_MAX_YEAR) || (pTime->wYear < RTC_MIN_YEAR)) return FALSE;

  00060	e1d720b0	 ldrh        r2, [r7]
  00064	e3a03b02	 mov         r3, #2, 22
  00068	e3833033	 orr         r3, r3, #0x33
  0006c	e1520003	 cmp         r2, r3
  00070	8a000067	 bhi         |$LN3@OEMSetReal|
  00074	e3520e7d	 cmp         r2, #0x7D, 28
  00078	3a000065	 bcc         |$LN3@OEMSetReal|

; 283  : 
; 284  :     // Convert from SYSTEMTIME structure to BCD
; 285  :     RTCDATA.ADDR      = RTC_TIMEREG_OFFSET; 

  0007c	e59f51b0	 ldr         r5, [pc, #0x1B0]
  00080	e3a03023	 mov         r3, #0x23

; 286  :     RTCDATA.RTC_SEC   = BIN2BCD(pTime->wSecond);  

  00084	e59f41a4	 ldr         r4, [pc, #0x1A4]
  00088	e5c53000	 strb        r3, [r5]
  0008c	e5d7e00c	 ldrb        lr, [r7, #0xC]

; 287  :     RTCDATA.RTC_MIN   = BIN2BCD(pTime->wMinute);  
; 288  :     RTCDATA.RTC_HR    = BIN2BCD(pTime->wHour);  
; 289  :     RTCDATA.RTC_DAY   = BIN2BCD(pTime->wDay);
; 290  :     RTCDATA.RTC_MON   = BIN2BCD(pTime->wMonth);
; 291  :     RTCDATA.RTC_YR    = BIN2BCD(pTime->wYear - RTC_MIN_YEAR);
; 292  :     RTCDATA.RTC_WKDAY = BIN2BCD(pTime->wDayOfWeek);
; 293  : 
; 294  :     EnterCriticalSection(&g_CritSecRTC);

  00090	e59f0190	 ldr         r0, [pc, #0x190]
  00094	e0c3149e	 smull       r1, r3, lr, r4
  00098	e1a03143	 mov         r3, r3, asr #2
  0009c	e0832fa3	 add         r2, r3, r3, lsr #31
  000a0	e0823102	 add         r3, r2, r2, lsl #2
  000a4	e04e3083	 sub         r3, lr, r3, lsl #1
  000a8	e1833202	 orr         r3, r3, r2, lsl #4
  000ac	e5c53001	 strb        r3, [r5, #1]
  000b0	e5d7e00a	 ldrb        lr, [r7, #0xA]
  000b4	e0c3149e	 smull       r1, r3, lr, r4
  000b8	e1a03143	 mov         r3, r3, asr #2
  000bc	e0832fa3	 add         r2, r3, r3, lsr #31
  000c0	e0823102	 add         r3, r2, r2, lsl #2
  000c4	e04e3083	 sub         r3, lr, r3, lsl #1
  000c8	e1833202	 orr         r3, r3, r2, lsl #4
  000cc	e5c53002	 strb        r3, [r5, #2]
  000d0	e5d73008	 ldrb        r3, [r7, #8]
  000d4	e1a0e003	 mov         lr, r3
  000d8	e0c3149e	 smull       r1, r3, lr, r4
  000dc	e1a03143	 mov         r3, r3, asr #2
  000e0	e0832fa3	 add         r2, r3, r3, lsr #31
  000e4	e0823102	 add         r3, r2, r2, lsl #2
  000e8	e04e3083	 sub         r3, lr, r3, lsl #1
  000ec	e1833202	 orr         r3, r3, r2, lsl #4
  000f0	e5c53003	 strb        r3, [r5, #3]
  000f4	e5d73006	 ldrb        r3, [r7, #6]
  000f8	e1a0e003	 mov         lr, r3
  000fc	e0c3149e	 smull       r1, r3, lr, r4
  00100	e1a03143	 mov         r3, r3, asr #2
  00104	e0832fa3	 add         r2, r3, r3, lsr #31
  00108	e0823102	 add         r3, r2, r2, lsl #2
  0010c	e04e3083	 sub         r3, lr, r3, lsl #1
  00110	e1833202	 orr         r3, r3, r2, lsl #4
  00114	e5c53004	 strb        r3, [r5, #4]
  00118	e5d73002	 ldrb        r3, [r7, #2]
  0011c	e1a0e003	 mov         lr, r3
  00120	e0c3149e	 smull       r1, r3, lr, r4
  00124	e1a03143	 mov         r3, r3, asr #2
  00128	e0832fa3	 add         r2, r3, r3, lsr #31
  0012c	e0823102	 add         r3, r2, r2, lsl #2
  00130	e04e3083	 sub         r3, lr, r3, lsl #1
  00134	e1833202	 orr         r3, r3, r2, lsl #4
  00138	e5c53005	 strb        r3, [r5, #5]
  0013c	e1d730b0	 ldrh        r3, [r7]
  00140	e2833030	 add         r3, r3, #0x30
  00144	e203e0ff	 and         lr, r3, #0xFF
  00148	e0c3149e	 smull       r1, r3, lr, r4
  0014c	e1a03143	 mov         r3, r3, asr #2
  00150	e0832fa3	 add         r2, r3, r3, lsr #31
  00154	e0823102	 add         r3, r2, r2, lsl #2
  00158	e04e3083	 sub         r3, lr, r3, lsl #1
  0015c	e1833202	 orr         r3, r3, r2, lsl #4
  00160	e5c53006	 strb        r3, [r5, #6]
  00164	e5d73004	 ldrb        r3, [r7, #4]
  00168	e1a0e003	 mov         lr, r3
  0016c	e0c3149e	 smull       r1, r3, lr, r4
  00170	e1a03143	 mov         r3, r3, asr #2
  00174	e0832fa3	 add         r2, r3, r3, lsr #31
  00178	e0823102	 add         r3, r2, r2, lsl #2
  0017c	e04e3083	 sub         r3, lr, r3, lsl #1
  00180	e1833202	 orr         r3, r3, r2, lsl #4
  00184	e5c53007	 strb        r3, [r5, #7]
  00188	eb000000	 bl          EnterCriticalSection

; 295  :     
; 296  :     // Enable RTC chip
; 297  :     ReadRTCCtrlData (MENELAUS_RTCCTRL_OFFSET, &CtrlData);

  0018c	e28d1010	 add         r1, sp, #0x10
  00190	e3a00021	 mov         r0, #0x21
  00194	eb000000	 bl          ReadRTCCtrlData

; 298  :     
; 299  :     CtrlData |= RTC_EN;

  00198	e5dd3010	 ldrb        r3, [sp, #0x10]

; 300  : 
; 301  :     WriteRTCCtrlData(MENELAUS_RTCCTRL_OFFSET, CtrlData);

  0019c	e3a00021	 mov         r0, #0x21
  001a0	e3831001	 orr         r1, r3, #1
  001a4	e5cd1010	 strb        r1, [sp, #0x10]
  001a8	eb000000	 bl          WriteRTCCtrlData

; 302  : 
; 303  :     // Write RTC time into the RTC device using I2C bus
; 304  :     WriteRTCTimeData(&RTCDATA, RTC_TIMEREG_SIZE);

  001ac	e3a01007	 mov         r1, #7
  001b0	e1a00005	 mov         r0, r5
  001b4	eb000000	 bl          WriteRTCTimeData

; 305  :     
; 306  :     // Set the RTC_UPDATE bit to force the new RTC values into RTC
; 307  :     WriteRTCCtrlData( MENELAUS_RTCUPDATE_OFFSET, RTC_UPDATE_ALL);

  001b8	e3a01008	 mov         r1, #8
  001bc	e3a00022	 mov         r0, #0x22
  001c0	eb000000	 bl          WriteRTCCtrlData

; 308  : 
; 309  :     // wait for the RTC update completed
; 310  :     CtrlData = RTC_UPDATE_ALL;

  001c4	e3a03008	 mov         r3, #8
  001c8	e5cd3010	 strb        r3, [sp, #0x10]
  001cc		 |$LL2@OEMSetReal|

; 311  :     while (CtrlData & RTC_UPDATE_ALL)
; 312  :     {
; 313  :         ReadRTCCtrlData(MENELAUS_RTCUPDATE_OFFSET, &CtrlData);

  001cc	e28d1010	 add         r1, sp, #0x10
  001d0	e3a00022	 mov         r0, #0x22
  001d4	eb000000	 bl          ReadRTCCtrlData
  001d8	e5dd3010	 ldrb        r3, [sp, #0x10]
  001dc	e3130008	 tst         r3, #8
  001e0	1afffff9	 bne         |$LL2@OEMSetReal|

; 314  :     }
; 315  : 
; 316  :     // Fetch real RTC vaule next time OEMGetRealtime() is called
; 317  :     g_fetchRTCViaI2c = TRUE;

  001e4	e59f3040	 ldr         r3, [pc, #0x40]

; 318  : 
; 319  :     LeaveCriticalSection(&g_CritSecRTC);

  001e8	e59f0038	 ldr         r0, [pc, #0x38]
  001ec	e3a02001	 mov         r2, #1
  001f0	e5832000	 str         r2, [r3]
  001f4	eb000000	 bl          LeaveCriticalSection

; 320  : 
; 321  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetRealTime(rc = 1)\r\n"));

  001f8	e5983440	 ldr         r3, [r8, #0x440]
  001fc	e3130040	 tst         r3, #0x40
  00200	13130004	 tstne       r3, #4
  00204	159f0018	 ldrne       r0, [pc, #0x18]
  00208	1b000000	 blne        NKDbgPrintfW

; 322  :     return TRUE;

  0020c	e3a00001	 mov         r0, #1
  00210	ea000000	 b           |$LN5@OEMSetReal|
  00214		 |$LN3@OEMSetReal|

; 280  : 
; 281  :     // Validate time range
; 282  :     if ((pTime->wYear > RTC_MAX_YEAR) || (pTime->wYear < RTC_MIN_YEAR)) return FALSE;

  00214	e3a00000	 mov         r0, #0
  00218		 |$LN5@OEMSetReal|

; 323  : }

  00218	e28dd014	 add         sp, sp, #0x14
  0021c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00220	e12fff1e	 bx          lr
  00224		 |$LN16@OEMSetReal|
  00224		 |$LN17@OEMSetReal|
  00224	00000000	 DCD         |??_C@_1DE@MMFDOKNE@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00228		 |$LN18@OEMSetReal|
  00228	00000000	 DCD         |g_CritSecRTC|
  0022c		 |$LN19@OEMSetReal|
  0022c	00000000	 DCD         |g_fetchRTCViaI2c|
  00230		 |$LN20@OEMSetReal|
  00230	66666667	 DCD         0x66666667
  00234		 |$LN21@OEMSetReal|
  00234	00000000	 DCD         |RTCDATA|
  00238		 |$LN22@OEMSetReal|
  00238	00000000	 DCD         |??_C@_1FC@DNBEFFJD@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd@|
  0023c		 |$LN23@OEMSetReal|
  0023c	00000000	 DCD         |dpCurSettings|
  00240		 |$M45874|

			 ENDP  ; |OEMSetRealTime|

	EXPORT	|InitializeRTC|

  00000			 AREA	 |.pdata|, PDATA
|$T45896| DCD	|$LN5@Initialize|
	DCD	0x40001902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitializeRTC| PROC

; 399  : {

  00000		 |$LN5@Initialize|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45893|

; 400  :    UINT8 CtrlData =0;

  00008	e3a03000	 mov         r3, #0

; 401  : 
; 402  :    //Initialize RTC
; 403  :    //Settings: RTC Enabled
; 404  :    ReadRTCCtrlData  (MENELAUS_RTCCTRL_OFFSET, &CtrlData);

  0000c	e28d1000	 add         r1, sp, #0
  00010	e3a00021	 mov         r0, #0x21
  00014	e5cd3000	 strb        r3, [sp]
  00018	eb000000	 bl          ReadRTCCtrlData

; 405  :    CtrlData |= RTC_EN;

  0001c	e5dd3000	 ldrb        r3, [sp]

; 406  :    CtrlData &= ~MODE12_N24;
; 407  :    WriteRTCCtrlData (MENELAUS_RTCCTRL_OFFSET, CtrlData);

  00020	e3a00021	 mov         r0, #0x21
  00024	e20330fa	 and         r3, r3, #0xFA
  00028	e3831001	 orr         r1, r3, #1
  0002c	e5cd1000	 strb        r1, [sp]
  00030	eb000000	 bl          WriteRTCCtrlData

; 408  : 
; 409  :    // Turn on charging to backup battery
; 410  :    ReadRTCCtrlData  (MENELAUS_BBSMS_OFFSET, &CtrlData);

  00034	e28d1000	 add         r1, sp, #0
  00038	e3a00020	 mov         r0, #0x20
  0003c	eb000000	 bl          ReadRTCCtrlData

; 411  :    CtrlData |= 0x5;

  00040	e5dd3000	 ldrb        r3, [sp]

; 412  :    WriteRTCCtrlData (MENELAUS_BBSMS_OFFSET, CtrlData);

  00044	e3a00020	 mov         r0, #0x20
  00048	e3831005	 orr         r1, r3, #5
  0004c	e5cd1000	 strb        r1, [sp]
  00050	eb000000	 bl          WriteRTCCtrlData

; 413  : 
; 414  :    return (TRUE);

  00054	e3a00001	 mov         r0, #1

; 415  : }   

  00058	e28dd004	 add         sp, sp, #4
  0005c	e49de004	 ldr         lr, [sp], #4
  00060	e12fff1e	 bx          lr
  00064		 |$M45894|

			 ENDP  ; |InitializeRTC|

	EXPORT	|OALIoCtlHalInitRTC|
	EXPORT	|??_C@_1HA@LDCOIABC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAg?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@KCNKCMKA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@DPJPMBGD@?$AAR?$AAT?$AAC?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T45919| DCD	|$LN21@OALIoCtlHa@2|
	DCD	0x40005701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@LDCOIABC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAg?$AA_@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "g"
	DCB	0x0, "_", 0x0, "l", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, "R"
	DCB	0x0, "T", 0x0, "C", 0x0, "T", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@KCNKCMKA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "N", 0x0, "V", 0x0, "A", 0x0, "L"
	DCB	0x0, "I", 0x0, "D", 0x0, " ", 0x0, "P", 0x0, "A", 0x0, "R"
	DCB	0x0, "A", 0x0, "M", 0x0, "E", 0x0, "T", 0x0, "E", 0x0, "R"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@DPJPMBGD@?$AAR?$AAT?$AAC?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "T", 0x0, "C", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalInitRTC| PROC

; 105  : ) {

  00000		 |$LN21@OALIoCtlHa@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45916|
  00004	e1a07002	 mov         r7, r2
  00008	e1a08001	 mov         r8, r1

; 106  :     BOOL rc = FALSE;
; 107  :     SYSTEMTIME *pTime = (SYSTEMTIME*)pInpBuffer;
; 108  :     SYSTEMTIME *pRTCTime = &g_lastRTCTime;
; 109  : 
; 110  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OALIoCtlHalInitRTC(...)\r\n"));

  0000c	e59f5144	 ldr         r5, [pc, #0x144]
  00010	e3a06000	 mov         r6, #0
  00014	e5953440	 ldr         r3, [r5, #0x440]
  00018	e3130040	 tst         r3, #0x40
  0001c	0a000004	 beq         |$LN9@OALIoCtlHa@2|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN9@OALIoCtlHa@2|
  00028	e59f0124	 ldr         r0, [pc, #0x124]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5953440	 ldr         r3, [r5, #0x440]
  00034		 |$LN9@OALIoCtlHa@2|

; 111  : 
; 112  :     // Validate inputs
; 113  :     if (pInpBuffer == NULL || inpSize < sizeof(SYSTEMTIME)) {

  00034	e59f4114	 ldr         r4, [pc, #0x114]
  00038	e3580000	 cmp         r8, #0
  0003c	0a000031	 beq         |$LN5@OALIoCtlHa@2|
  00040	e3570010	 cmp         r7, #0x10
  00044	3a00002f	 bcc         |$LN5@OALIoCtlHa@2|

; 115  :         goto cleanUp;
; 116  :     }
; 117  :     
; 118  :     if (!g_RTCBUSInitialized)

  00048	e5943024	 ldr         r3, [r4, #0x24]
  0004c	e3530000	 cmp         r3, #0
  00050	1a00000d	 bne         |$LN13@OALIoCtlHa@2|

; 119  :     {
; 120  :         // Init the critical section
; 121  :         InitializeCriticalSection(&g_CritSecRTC);

  00054	e2840010	 add         r0, r4, #0x10
  00058	eb000000	 bl          InitializeCriticalSection

; 122  : 
; 123  :         EnterCriticalSection(&g_CritSecRTC);

  0005c	e2840010	 add         r0, r4, #0x10
  00060	eb000000	 bl          EnterCriticalSection

; 124  :         InitializeRTC();

  00064	eb000000	 bl          InitializeRTC

; 125  :         LeaveCriticalSection(&g_CritSecRTC);

  00068	e2840010	 add         r0, r4, #0x10
  0006c	eb000000	 bl          LeaveCriticalSection

; 126  : 
; 127  :         g_RTCBUSInitialized = TRUE;
; 128  :         OALMSG(OAL_RTC&&OAL_FUNC, (L"RTC Enabled\r\n")); 

  00070	e5953440	 ldr         r3, [r5, #0x440]
  00074	e3a02001	 mov         r2, #1
  00078	e5842024	 str         r2, [r4, #0x24]
  0007c	e3130040	 tst         r3, #0x40
  00080	13130004	 tstne       r3, #4
  00084	159f00c0	 ldrne       r0, [pc, #0xC0]
  00088	1b000000	 blne        NKDbgPrintfW
  0008c		 |$LN13@OALIoCtlHa@2|

; 129  :     }
; 130  : 
; 131  :     // The H4 Platform has a backup battery for the RTC. OEM requirements for the implementation
; 132  :     // of OALIoCtlHalInitRTC, one has to determine whether the current clock time is valid, and if so, ignore the time provided by the kernel.
; 133  :     // Otherwise, set the real-time clock to match the provided time.
; 134  :     // The RTC, when reset, would have the date 1/1/2004.
; 135  :     g_fetchRTCViaI2c = TRUE;

  0008c	e59f30b4	 ldr         r3, [pc, #0xB4]
  00090	e3a02001	 mov         r2, #1

; 136  :     rc = OEMGetRealTime(pRTCTime);

  00094	e1a00004	 mov         r0, r4
  00098	e5832000	 str         r2, [r3]
  0009c	eb000000	 bl          OEMGetRealTime

; 137  :     if( ((pRTCTime->wYear==2004) && (pRTCTime->wMonth==1) && (pRTCTime->wDay==1))
; 138  :         || (pRTCTime->wYear > RTC_MAX_YEAR) 
; 139  :         || (pRTCTime->wYear < RTC_MIN_YEAR) )

  000a0	e1d420b0	 ldrh        r2, [r4]
  000a4	e3a03c07	 mov         r3, #7, 24
  000a8	e38330d4	 orr         r3, r3, #0xD4
  000ac	e1520003	 cmp         r2, r3
  000b0	e1a06000	 mov         r6, r0
  000b4	1a000005	 bne         |$LN1@OALIoCtlHa@2|
  000b8	e1d430b2	 ldrh        r3, [r4, #2]
  000bc	e3530001	 cmp         r3, #1
  000c0	1a000002	 bne         |$LN1@OALIoCtlHa@2|
  000c4	e1d430b6	 ldrh        r3, [r4, #6]
  000c8	e3530001	 cmp         r3, #1
  000cc	0a000005	 beq         |$LN2@OALIoCtlHa@2|
  000d0		 |$LN1@OALIoCtlHa@2|
  000d0	e3a03b02	 mov         r3, #2, 22
  000d4	e3833033	 orr         r3, r3, #0x33
  000d8	e1520003	 cmp         r2, r3
  000dc	8a000001	 bhi         |$LN2@OALIoCtlHa@2|
  000e0	e3520e7d	 cmp         r2, #0x7D, 28

; 114  :         OALMSG(OAL_ERROR, (L"ERROR:OALIoCtlHalInitRTC: INVALID PARAMETER\r\n"));

  000e4	2a00000b	 bcs         |$LN18@OALIoCtlHa@2|
  000e8		 |$LN2@OALIoCtlHa@2|

; 140  :     {
; 141  :         // Set time
; 142  :         memcpy(pRTCTime, pTime, sizeof(SYSTEMTIME));

  000e8	e3a02010	 mov         r2, #0x10
  000ec	e1a01008	 mov         r1, r8
  000f0	e1a00004	 mov         r0, r4
  000f4	eb000000	 bl          memcpy

; 143  :         rc = OEMSetRealTime(pTime);

  000f8	e1a00008	 mov         r0, r8
  000fc	eb000000	 bl          OEMSetRealTime
  00100	e1a06000	 mov         r6, r0
  00104	ea000003	 b           |$LN18@OALIoCtlHa@2|
  00108		 |$LN5@OALIoCtlHa@2|

; 114  :         OALMSG(OAL_ERROR, (L"ERROR:OALIoCtlHalInitRTC: INVALID PARAMETER\r\n"));

  00108	e3130001	 tst         r3, #1
  0010c	0a000002	 beq         |$cleanUp$45663|
  00110	e59f002c	 ldr         r0, [pc, #0x2C]
  00114	eb000000	 bl          NKDbgPrintfW
  00118		 |$LN18@OALIoCtlHa@2|
  00118	e5953440	 ldr         r3, [r5, #0x440]
  0011c		 |$cleanUp$45663|

; 144  :     }
; 145  : 
; 146  : cleanUp:
; 147  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OALIoCtlHalInitRTC(rc = %d), g_lastRTCTickCount = %d\r\n", rc, g_lastRTCTickCount));

  0011c	e3130040	 tst         r3, #0x40
  00120	13130004	 tstne       r3, #4
  00124	15942028	 ldrne       r2, [r4, #0x28]
  00128	159f0010	 ldrne       r0, [pc, #0x10]
  0012c	11a01006	 movne       r1, r6
  00130	1b000000	 blne        NKDbgPrintfW

; 148  :     return rc;
; 149  : }

  00134	e1a00006	 mov         r0, r6
  00138	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0013c	e12fff1e	 bx          lr
  00140		 |$LN22@OALIoCtlHa@2|
  00140		 |$LN23@OALIoCtlHa@2|
  00140	00000000	 DCD         |??_C@_1HA@LDCOIABC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?0?$AA?5?$AAg?$AA_@|
  00144		 |$LN24@OALIoCtlHa@2|
  00144	00000000	 DCD         |??_C@_1FM@KCNKCMKA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI@|
  00148		 |$LN25@OALIoCtlHa@2|
  00148	00000000	 DCD         |g_fetchRTCViaI2c|
  0014c		 |$LN26@OALIoCtlHa@2|
  0014c	00000000	 DCD         |??_C@_1BM@DPJPMBGD@?$AAR?$AAT?$AAC?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00150		 |$LN27@OALIoCtlHa@2|
  00150	00000000	 DCD         |g_lastRTCTime|
  00154		 |$LN28@OALIoCtlHa@2|
  00154	00000000	 DCD         |??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00158		 |$LN29@OALIoCtlHa@2|
  00158	00000000	 DCD         |dpCurSettings|
  0015c		 |$M45917|

			 ENDP  ; |OALIoCtlHalInitRTC|

	EXPORT	|OEMSetAlarmTime|
	EXPORT	|??_C@_1DG@ONAMAHPD@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| [ DATA ] ; `string'
	IMPORT	|OEMInterruptDone|

  00000			 AREA	 |.pdata|, PDATA
|$T45943| DCD	|$LN12@OEMSetAlar|
	DCD	0x40009802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@ONAMAHPD@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "1", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMSetAlarmTime| PROC

; 333  : {

  00000		 |$LN12@OEMSetAlar|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M45940|
  00008	e1a07000	 mov         r7, r0

; 334  :     UINT8 CtrlData =0;
; 335  :     UINT8 MaskData =0;
; 336  : 
; 337  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 338  :         L"+OEMSetAlarmTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 339  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 340  :         pTime->wSecond, pTime->wMilliseconds
; 341  :     ));

  0000c	e59f8248	 ldr         r8, [pc, #0x248]
  00010	e3a02000	 mov         r2, #0
  00014	e3a01000	 mov         r1, #0
  00018	e5983440	 ldr         r3, [r8, #0x440]
  0001c	e5cd2011	 strb        r2, [sp, #0x11]
  00020	e5cd1010	 strb        r1, [sp, #0x10]
  00024	e3130040	 tst         r3, #0x40
  00028	0a00000e	 beq         |$LN6@OEMSetAlar|
  0002c	e3130004	 tst         r3, #4
  00030	0a00000c	 beq         |$LN6@OEMSetAlar|
  00034	e1d7e0be	 ldrh        lr, [r7, #0xE]
  00038	e1d740bc	 ldrh        r4, [r7, #0xC]
  0003c	e1d750ba	 ldrh        r5, [r7, #0xA]
  00040	e1d760b8	 ldrh        r6, [r7, #8]
  00044	e1d730b6	 ldrh        r3, [r7, #6]
  00048	e1d720b2	 ldrh        r2, [r7, #2]
  0004c	e1d710b0	 ldrh        r1, [r7]
  00050	e59f0200	 ldr         r0, [pc, #0x200]
  00054	e58de00c	 str         lr, [sp, #0xC]
  00058	e58d4008	 str         r4, [sp, #8]
  0005c	e58d5004	 str         r5, [sp, #4]
  00060	e58d6000	 str         r6, [sp]
  00064	eb000000	 bl          NKDbgPrintfW
  00068		 |$LN6@OEMSetAlar|

; 342  : 
; 343  :     // Validate time range
; 344  :     if ((pTime->wYear > RTC_MAX_YEAR) || (pTime->wYear < RTC_MIN_YEAR)) return FALSE;

  00068	e1d720b0	 ldrh        r2, [r7]
  0006c	e3a03b02	 mov         r3, #2, 22
  00070	e3833033	 orr         r3, r3, #0x33
  00074	e1520003	 cmp         r2, r3
  00078	8a00006e	 bhi         |$LN2@OEMSetAlar|
  0007c	e3520e7d	 cmp         r2, #0x7D, 28
  00080	3a00006c	 bcc         |$LN2@OEMSetAlar|

; 345  : 
; 346  :     if (!g_RTCBUSInitialized)

  00084	e59f61c8	 ldr         r6, [pc, #0x1C8]
  00088	e5963014	 ldr         r3, [r6, #0x14]
  0008c	e3530000	 cmp         r3, #0
  00090	1a000008	 bne         |$LN1@OEMSetAlar|

; 347  :     {
; 348  :         // Init the critical section
; 349  :         InitializeCriticalSection(&g_CritSecRTC);

  00094	e1a00006	 mov         r0, r6
  00098	eb000000	 bl          InitializeCriticalSection

; 350  :         EnterCriticalSection(&g_CritSecRTC);

  0009c	e1a00006	 mov         r0, r6
  000a0	eb000000	 bl          EnterCriticalSection

; 351  :         InitializeRTC();

  000a4	eb000000	 bl          InitializeRTC

; 352  :         LeaveCriticalSection(&g_CritSecRTC);

  000a8	e1a00006	 mov         r0, r6
  000ac	eb000000	 bl          LeaveCriticalSection

; 353  :         g_RTCBUSInitialized = TRUE;

  000b0	e3a03001	 mov         r3, #1
  000b4	e5863014	 str         r3, [r6, #0x14]
  000b8		 |$LN1@OEMSetAlar|

; 354  :     }
; 355  : 
; 356  :     // Convert from SYSTEMTIME structure to BCD
; 357  :     RTCDATA.ADDR      = RTC_ALARMREG_OFFSET; 

  000b8	e59f5190	 ldr         r5, [pc, #0x190]
  000bc	e3a0302a	 mov         r3, #0x2A

; 358  :     RTCDATA.RTC_SEC   = BIN2BCD(pTime->wSecond);  

  000c0	e59f4184	 ldr         r4, [pc, #0x184]
  000c4	e5c53000	 strb        r3, [r5]
  000c8	e5d7e00c	 ldrb        lr, [r7, #0xC]

; 359  :     RTCDATA.RTC_MIN   = BIN2BCD(pTime->wMinute);  
; 360  :     RTCDATA.RTC_HR    = BIN2BCD(pTime->wHour);  
; 361  :     RTCDATA.RTC_DAY   = BIN2BCD(pTime->wDay);
; 362  :     RTCDATA.RTC_MON   = BIN2BCD(pTime->wMonth);
; 363  :     RTCDATA.RTC_YR    = BIN2BCD(pTime->wYear - RTC_MIN_YEAR);
; 364  : 
; 365  :     EnterCriticalSection(&g_CritSecRTC);

  000cc	e1a00006	 mov         r0, r6
  000d0	e0c3149e	 smull       r1, r3, lr, r4
  000d4	e1a03143	 mov         r3, r3, asr #2
  000d8	e0832fa3	 add         r2, r3, r3, lsr #31
  000dc	e0823102	 add         r3, r2, r2, lsl #2
  000e0	e04e3083	 sub         r3, lr, r3, lsl #1
  000e4	e1833202	 orr         r3, r3, r2, lsl #4
  000e8	e5c53001	 strb        r3, [r5, #1]
  000ec	e5d7300a	 ldrb        r3, [r7, #0xA]
  000f0	e1a0e003	 mov         lr, r3
  000f4	e0c3149e	 smull       r1, r3, lr, r4
  000f8	e1a03143	 mov         r3, r3, asr #2
  000fc	e0832fa3	 add         r2, r3, r3, lsr #31
  00100	e0823102	 add         r3, r2, r2, lsl #2
  00104	e04e3083	 sub         r3, lr, r3, lsl #1
  00108	e1833202	 orr         r3, r3, r2, lsl #4
  0010c	e5c53002	 strb        r3, [r5, #2]
  00110	e5d73008	 ldrb        r3, [r7, #8]
  00114	e1a0e003	 mov         lr, r3
  00118	e0c3149e	 smull       r1, r3, lr, r4
  0011c	e1a03143	 mov         r3, r3, asr #2
  00120	e0832fa3	 add         r2, r3, r3, lsr #31
  00124	e0823102	 add         r3, r2, r2, lsl #2
  00128	e04e3083	 sub         r3, lr, r3, lsl #1
  0012c	e1833202	 orr         r3, r3, r2, lsl #4
  00130	e5c53003	 strb        r3, [r5, #3]
  00134	e5d73006	 ldrb        r3, [r7, #6]
  00138	e1a0e003	 mov         lr, r3
  0013c	e0c3149e	 smull       r1, r3, lr, r4
  00140	e1a03143	 mov         r3, r3, asr #2
  00144	e0832fa3	 add         r2, r3, r3, lsr #31
  00148	e0823102	 add         r3, r2, r2, lsl #2
  0014c	e04e3083	 sub         r3, lr, r3, lsl #1
  00150	e1833202	 orr         r3, r3, r2, lsl #4
  00154	e5c53004	 strb        r3, [r5, #4]
  00158	e5d73002	 ldrb        r3, [r7, #2]
  0015c	e1a0e003	 mov         lr, r3
  00160	e0c3149e	 smull       r1, r3, lr, r4
  00164	e1a03143	 mov         r3, r3, asr #2
  00168	e0832fa3	 add         r2, r3, r3, lsr #31
  0016c	e0823102	 add         r3, r2, r2, lsl #2
  00170	e04e3083	 sub         r3, lr, r3, lsl #1
  00174	e1833202	 orr         r3, r3, r2, lsl #4
  00178	e5c53005	 strb        r3, [r5, #5]
  0017c	e1d730b0	 ldrh        r3, [r7]
  00180	e2833030	 add         r3, r3, #0x30
  00184	e203e0ff	 and         lr, r3, #0xFF
  00188	e0c3149e	 smull       r1, r3, lr, r4
  0018c	e1a03143	 mov         r3, r3, asr #2
  00190	e0832fa3	 add         r2, r3, r3, lsr #31
  00194	e0823102	 add         r3, r2, r2, lsl #2
  00198	e04e3083	 sub         r3, lr, r3, lsl #1
  0019c	e1833202	 orr         r3, r3, r2, lsl #4
  001a0	e5c53006	 strb        r3, [r5, #6]
  001a4	eb000000	 bl          EnterCriticalSection

; 366  :     
; 367  :     ReadRTCCtrlData  (MENELAUS_RTCCTRL_OFFSET, &CtrlData);

  001a8	e28d1011	 add         r1, sp, #0x11
  001ac	e3a00021	 mov         r0, #0x21
  001b0	eb000000	 bl          ReadRTCCtrlData

; 368  : 
; 369  :     // Write RTC time into the RTC device using I2C bus
; 370  :     WriteRTCTimeData(&RTCDATA, RTC_ALARMREG_SIZE);

  001b4	e3a01006	 mov         r1, #6
  001b8	e1a00005	 mov         r0, r5
  001bc	eb000000	 bl          WriteRTCTimeData

; 371  : 
; 372  : 	// MT - play safe, clear status bit
; 373  :     ReadRTCCtrlData(MENELAUS_INTACK2_OFFSET, &MaskData);

  001c0	e28d1010	 add         r1, sp, #0x10
  001c4	e3a0001c	 mov         r0, #0x1C
  001c8	eb000000	 bl          ReadRTCCtrlData

; 374  :     WriteRTCCtrlData(MENELAUS_INTACK2_OFFSET, MaskData & RTCALM_MSK);

  001cc	e5dd3010	 ldrb        r3, [sp, #0x10]
  001d0	e3a0001c	 mov         r0, #0x1C
  001d4	e2031002	 and         r1, r3, #2
  001d8	eb000000	 bl          WriteRTCCtrlData

; 375  :     
; 376  : 	// MT - Unmask the RTC ALARM bit in the interrupt mask
; 377  :     ReadRTCCtrlData(MENELAUS_INTMASK2_OFFSET, &MaskData);

  001dc	e28d1010	 add         r1, sp, #0x10
  001e0	e3a00018	 mov         r0, #0x18
  001e4	eb000000	 bl          ReadRTCCtrlData

; 378  :     WriteRTCCtrlData(MENELAUS_INTMASK2_OFFSET, MaskData & (~RTCALM_MSK));

  001e8	e5dd3010	 ldrb        r3, [sp, #0x10]
  001ec	e3a00018	 mov         r0, #0x18
  001f0	e20310fd	 and         r1, r3, #0xFD
  001f4	eb000000	 bl          WriteRTCCtrlData

; 379  : 
; 380  :     // Re-enable alarm interrupt
; 381  :     CtrlData |= RTC_AL_EN; 

  001f8	e5dd3011	 ldrb        r3, [sp, #0x11]
  001fc	e3831002	 orr         r1, r3, #2

; 382  :     WriteRTCCtrlData ( MENELAUS_RTCCTRL_OFFSET, CtrlData);

  00200	e3a00021	 mov         r0, #0x21
  00204	e5cd1011	 strb        r1, [sp, #0x11]
  00208	eb000000	 bl          WriteRTCCtrlData

; 383  :     
; 384  :     LeaveCriticalSection(&g_CritSecRTC);

  0020c	e1a00006	 mov         r0, r6
  00210	eb000000	 bl          LeaveCriticalSection

; 385  : 
; 386  :     // Re-enable interrupt (it is disabled since last alarm occurs)
; 387  :     OEMInterruptDone(SYSINTR_RTC_ALARM);

  00214	e3a0000d	 mov         r0, #0xD
  00218	eb000000	 bl          OEMInterruptDone

; 388  : 
; 389  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetAlarmTime(rc = 1)\r\n"));

  0021c	e5983440	 ldr         r3, [r8, #0x440]
  00220	e3130040	 tst         r3, #0x40
  00224	13130004	 tstne       r3, #4
  00228	159f0018	 ldrne       r0, [pc, #0x18]
  0022c	1b000000	 blne        NKDbgPrintfW

; 390  :     return TRUE;

  00230	e3a00001	 mov         r0, #1
  00234	ea000000	 b           |$LN4@OEMSetAlar|
  00238		 |$LN2@OEMSetAlar|

; 342  : 
; 343  :     // Validate time range
; 344  :     if ((pTime->wYear > RTC_MAX_YEAR) || (pTime->wYear < RTC_MIN_YEAR)) return FALSE;

  00238	e3a00000	 mov         r0, #0
  0023c		 |$LN4@OEMSetAlar|

; 391  : }

  0023c	e28dd014	 add         sp, sp, #0x14
  00240	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00244	e12fff1e	 bx          lr
  00248		 |$LN13@OEMSetAlar|
  00248		 |$LN14@OEMSetAlar|
  00248	00000000	 DCD         |??_C@_1DG@ONAMAHPD@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA1?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0024c		 |$LN15@OEMSetAlar|
  0024c	66666667	 DCD         0x66666667
  00250		 |$LN16@OEMSetAlar|
  00250	00000000	 DCD         |RTCDATA|
  00254		 |$LN17@OEMSetAlar|
  00254	00000000	 DCD         |g_CritSecRTC|
  00258		 |$LN18@OEMSetAlar|
  00258	00000000	 DCD         |??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@|
  0025c		 |$LN19@OEMSetAlar|
  0025c	00000000	 DCD         |dpCurSettings|
  00260		 |$M45941|

			 ENDP  ; |OEMSetAlarmTime|

	END
