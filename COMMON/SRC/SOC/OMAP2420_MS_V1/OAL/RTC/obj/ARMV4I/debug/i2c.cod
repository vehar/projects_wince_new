; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\RTC\i2c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|WriteRTCCtrlData|
	IMPORT	|KERNELI2C_PreemptibleSubmit|
	IMPORT	|memset|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T45535| DCD	|$LN7@WriteRTCCt|
	DCD	0xc0002c04

  00000			 AREA	 |.xdata|, DATA
|$T45531| DCD	0xffffffe4
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\rtc\i2c.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T45531|

  00008		 |WriteRTCCtrlData| PROC

; 35   : {

  00008		 |$LN7@WriteRTCCt|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0003	 stmdb       sp!, {r0, r1}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24ddf5f	 sub         sp, sp, #0x5F, 30
  00018		 |$M45532|
  00018	e59f3094	 ldr         r3, [pc, #0x94]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3170	 str         r3, [sp, #0x170]

; 36   :     I2CTRANS trans;
; 37   : 
; 38   :     ZeroMemory(&trans,sizeof(trans));

  00024	e3a02e17	 mov         r2, #0x17, 28
  00028	e3a01000	 mov         r1, #0
  0002c	e28d0000	 add         r0, sp, #0
  00030	eb000000	 bl          memset

; 39   :     
; 40   :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  00034	e3a0303c	 mov         r3, #0x3C
  00038	e58d3008	 str         r3, [sp, #8]

; 41   : 
; 42   :     /* just write the register # then the data in one shot */
; 43   :     trans.mOpCode[0] = I2C_OPCODE_WRITE;

  0003c	e3a03002	 mov         r3, #2
  00040	e58d300c	 str         r3, [sp, #0xC]

; 44   :     trans.mBufferOffset[0] = 0;

  00044	e3a03000	 mov         r3, #0
  00048	e58d302c	 str         r3, [sp, #0x2C]

; 45   :     trans.mTransLen[0] = 2;

  0004c	e3a03002	 mov         r3, #2
  00050	e58d304c	 str         r3, [sp, #0x4C]

; 46   :     trans.mBuffer[0] = reg;

  00054	e5dd3184	 ldrb        r3, [sp, #0x184]
  00058	e5cd3070	 strb        r3, [sp, #0x70]

; 47   :     trans.mBuffer[1] = data;

  0005c	e5dd3188	 ldrb        r3, [sp, #0x188]
  00060	e5cd3071	 strb        r3, [sp, #0x71]

; 48   : 
; 49   :     KERNELI2C_PreemptibleSubmit(I2C_MENELAUS_ADDRESS,7,&trans);

  00064	e28d2000	 add         r2, sp, #0
  00068	e3a01007	 mov         r1, #7
  0006c	e3a00072	 mov         r0, #0x72
  00070	eb000000	 bl          KERNELI2C_PreemptibleSubmit

; 50   : 
; 51   :     return (trans.mErrorCode==0);

  00074	e59d306c	 ldr         r3, [sp, #0x6C]
  00078	e3530000	 cmp         r3, #0
  0007c	1a000002	 bne         |$LN3@WriteRTCCt|
  00080	e3a03001	 mov         r3, #1
  00084	e58d3178	 str         r3, [sp, #0x178]
  00088	ea000001	 b           |$LN4@WriteRTCCt|
  0008c		 |$LN3@WriteRTCCt|
  0008c	e3a03000	 mov         r3, #0
  00090	e58d3178	 str         r3, [sp, #0x178]
  00094		 |$LN4@WriteRTCCt|
  00094	e59d0170	 ldr         r0, [sp, #0x170]
  00098	eb000000	 bl          __security_check_cookie
  0009c	e59d3178	 ldr         r3, [sp, #0x178]
  000a0	e58d3174	 str         r3, [sp, #0x174]

; 52   : }

  000a4	e59d0174	 ldr         r0, [sp, #0x174]
  000a8	e28ddf5f	 add         sp, sp, #0x5F, 30
  000ac	e89d6000	 ldmia       sp, {sp, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN8@WriteRTCCt|
  000b4		 |$LN9@WriteRTCCt|
  000b4	00000000	 DCD         |__security_cookie|
  000b8		 |$M45533|

			 ENDP  ; |WriteRTCCtrlData|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ReadRTCCtrlData|

  00008			 AREA	 |.pdata|, PDATA
|$T45545| DCD	|$LN6@ReadRTCCtr|
	DCD	0xc0003304

  00004			 AREA	 |.xdata|, DATA
|$T45541| DCD	0xffffffe8
; Function compile flags: /Odtp

  000b8			 AREA	 |.text|, CODE, ARM

  000b8	00000000	 DCD         |__GSHandlerCheck|
  000bc	00000000	 DCD         |$T45541|

  000c0		 |ReadRTCCtrlData| PROC

; 60   : {

  000c0		 |$LN6@ReadRTCCtr|
  000c0	e1a0c00d	 mov         r12, sp
  000c4	e92d0003	 stmdb       sp!, {r0, r1}
  000c8	e92d5000	 stmdb       sp!, {r12, lr}
  000cc	e24ddf5e	 sub         sp, sp, #0x5E, 30
  000d0		 |$M45542|
  000d0	e59f30b0	 ldr         r3, [pc, #0xB0]
  000d4	e5933000	 ldr         r3, [r3]
  000d8	e58d3170	 str         r3, [sp, #0x170]

; 61   :     I2CTRANS trans;
; 62   : 
; 63   :     ZeroMemory(&trans,sizeof(trans));

  000dc	e3a02e17	 mov         r2, #0x17, 28
  000e0	e3a01000	 mov         r1, #0
  000e4	e28d0000	 add         r0, sp, #0
  000e8	eb000000	 bl          memset

; 64   : 
; 65   :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  000ec	e3a0303c	 mov         r3, #0x3C
  000f0	e58d3008	 str         r3, [sp, #8]

; 66   :     /* first write register address */
; 67   :     trans.mOpCode[0] = I2C_OPCODE_WRITE;

  000f4	e3a03002	 mov         r3, #2
  000f8	e58d300c	 str         r3, [sp, #0xC]

; 68   :     trans.mBufferOffset[0] = 0;

  000fc	e3a03000	 mov         r3, #0
  00100	e58d302c	 str         r3, [sp, #0x2C]

; 69   :     trans.mTransLen[0] = 1;

  00104	e3a03001	 mov         r3, #1
  00108	e58d304c	 str         r3, [sp, #0x4C]

; 70   :     trans.mBuffer[0] = reg;

  0010c	e5dd3180	 ldrb        r3, [sp, #0x180]
  00110	e5cd3070	 strb        r3, [sp, #0x70]

; 71   :     /* then read back data from that address */
; 72   :     trans.mOpCode[1] = I2C_OPCODE_READ;

  00114	e3a03001	 mov         r3, #1
  00118	e58d3010	 str         r3, [sp, #0x10]

; 73   :     trans.mBufferOffset[1] = 0;

  0011c	e3a03000	 mov         r3, #0
  00120	e58d3030	 str         r3, [sp, #0x30]

; 74   :     trans.mTransLen[1] = 1;

  00124	e3a03001	 mov         r3, #1
  00128	e58d3050	 str         r3, [sp, #0x50]

; 75   : 
; 76   :     KERNELI2C_PreemptibleSubmit(I2C_MENELAUS_ADDRESS,7,&trans);

  0012c	e28d2000	 add         r2, sp, #0
  00130	e3a01007	 mov         r1, #7
  00134	e3a00072	 mov         r0, #0x72
  00138	eb000000	 bl          KERNELI2C_PreemptibleSubmit

; 77   : 
; 78   :     if (trans.mErrorCode)

  0013c	e59d306c	 ldr         r3, [sp, #0x6C]
  00140	e3530000	 cmp         r3, #0
  00144	0a000004	 beq         |$LN1@ReadRTCCtr|

; 79   :         return FALSE;

  00148	e59d0170	 ldr         r0, [sp, #0x170]
  0014c	eb000000	 bl          __security_check_cookie
  00150	e3a03000	 mov         r3, #0
  00154	e58d3174	 str         r3, [sp, #0x174]
  00158	ea000006	 b           |$LN2@ReadRTCCtr|
  0015c		 |$LN1@ReadRTCCtr|

; 80   : 
; 81   :     *pData = trans.mBuffer[0];

  0015c	e5dd2070	 ldrb        r2, [sp, #0x70]
  00160	e59d3184	 ldr         r3, [sp, #0x184]
  00164	e5c32000	 strb        r2, [r3]

; 82   :     
; 83   :     return TRUE;

  00168	e59d0170	 ldr         r0, [sp, #0x170]
  0016c	eb000000	 bl          __security_check_cookie
  00170	e3a03001	 mov         r3, #1
  00174	e58d3174	 str         r3, [sp, #0x174]
  00178		 |$LN2@ReadRTCCtr|

; 84   : }

  00178	e59d0174	 ldr         r0, [sp, #0x174]
  0017c	e28ddf5e	 add         sp, sp, #0x5E, 30
  00180	e89d6000	 ldmia       sp, {sp, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$LN7@ReadRTCCtr|
  00188		 |$LN8@ReadRTCCtr|
  00188	00000000	 DCD         |__security_cookie|
  0018c		 |$M45543|

			 ENDP  ; |ReadRTCCtrlData|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ReadRTCTimeData|

  00010			 AREA	 |.pdata|, PDATA
|$T45555| DCD	|$LN10@ReadRTCTim|
	DCD	0xc0005104

  00008			 AREA	 |.xdata|, DATA
|$T45551| DCD	0xffffffe8
; Function compile flags: /Odtp

  0018c			 AREA	 |.text|, CODE, ARM

  0018c	00000000	 DCD         |__GSHandlerCheck|
  00190	00000000	 DCD         |$T45551|

  00194		 |ReadRTCTimeData| PROC

; 93   : {

  00194		 |$LN10@ReadRTCTim|
  00194	e1a0c00d	 mov         r12, sp
  00198	e92d0003	 stmdb       sp!, {r0, r1}
  0019c	e92d5000	 stmdb       sp!, {r12, lr}
  001a0	e24ddf61	 sub         sp, sp, #0x61, 30
  001a4		 |$M45552|
  001a4	e59f3128	 ldr         r3, [pc, #0x128]
  001a8	e5933000	 ldr         r3, [r3]
  001ac	e58d317c	 str         r3, [sp, #0x17C]

; 94   :     I2CTRANS trans;
; 95   :     DWORD i;
; 96   :     UCHAR RegOffset;
; 97   :     UCHAR *pData;
; 98   : 
; 99   :     ZeroMemory(&trans,sizeof(trans));

  001b0	e3a02e17	 mov         r2, #0x17, 28
  001b4	e3a01000	 mov         r1, #0
  001b8	e28d000c	 add         r0, sp, #0xC
  001bc	eb000000	 bl          memset

; 100  : 
; 101  :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  001c0	e3a0303c	 mov         r3, #0x3C
  001c4	e58d3014	 str         r3, [sp, #0x14]

; 102  : 
; 103  :     /* first byte in buffer is register # offset */
; 104  :     pData = (UCHAR *)pBuffer;

  001c8	e59d318c	 ldr         r3, [sp, #0x18C]
  001cc	e58d3004	 str         r3, [sp, #4]

; 105  :     RegOffset = *pData;

  001d0	e59d3004	 ldr         r3, [sp, #4]
  001d4	e5d33000	 ldrb        r3, [r3]
  001d8	e5cd3000	 strb        r3, [sp]

; 106  :     pData++;

  001dc	e59d3004	 ldr         r3, [sp, #4]
  001e0	e2833001	 add         r3, r3, #1
  001e4	e58d3004	 str         r3, [sp, #4]

; 107  : 
; 108  :     for (i=0;i<size;i++)

  001e8	e3a03000	 mov         r3, #0
  001ec	e58d3008	 str         r3, [sp, #8]
  001f0	ea000002	 b           |$LN5@ReadRTCTim|
  001f4		 |$LN4@ReadRTCTim|
  001f4	e59d3008	 ldr         r3, [sp, #8]
  001f8	e2833001	 add         r3, r3, #1
  001fc	e58d3008	 str         r3, [sp, #8]
  00200		 |$LN5@ReadRTCTim|
  00200	e59d2008	 ldr         r2, [sp, #8]
  00204	e59d3190	 ldr         r3, [sp, #0x190]
  00208	e1520003	 cmp         r2, r3
  0020c	2a000020	 bcs         |$LN3@ReadRTCTim|

; 109  :     {
; 110  :         /* write register address */
; 111  :         trans.mOpCode[0] = I2C_OPCODE_WRITE;

  00210	e3a03002	 mov         r3, #2
  00214	e58d3018	 str         r3, [sp, #0x18]

; 112  :         trans.mBufferOffset[0] = 0;

  00218	e3a03000	 mov         r3, #0
  0021c	e58d3038	 str         r3, [sp, #0x38]

; 113  :         trans.mTransLen[0] = 1;

  00220	e3a03001	 mov         r3, #1
  00224	e58d3058	 str         r3, [sp, #0x58]

; 114  :         trans.mBuffer[0] = RegOffset;

  00228	e5dd3000	 ldrb        r3, [sp]
  0022c	e5cd307c	 strb        r3, [sp, #0x7C]

; 115  :         /* read data from that register */
; 116  :         trans.mOpCode[1] = I2C_OPCODE_READ;

  00230	e3a03001	 mov         r3, #1
  00234	e58d301c	 str         r3, [sp, #0x1C]

; 117  :         trans.mBufferOffset[1] = 0;

  00238	e3a03000	 mov         r3, #0
  0023c	e58d303c	 str         r3, [sp, #0x3C]

; 118  :         trans.mTransLen[1] = 1;

  00240	e3a03001	 mov         r3, #1
  00244	e58d305c	 str         r3, [sp, #0x5C]

; 119  : 
; 120  :         KERNELI2C_PreemptibleSubmit(I2C_MENELAUS_ADDRESS,7,&trans);

  00248	e28d200c	 add         r2, sp, #0xC
  0024c	e3a01007	 mov         r1, #7
  00250	e3a00072	 mov         r0, #0x72
  00254	eb000000	 bl          KERNELI2C_PreemptibleSubmit

; 121  : 
; 122  :         if (trans.mErrorCode)

  00258	e59d3078	 ldr         r3, [sp, #0x78]
  0025c	e3530000	 cmp         r3, #0
  00260	0a000000	 beq         |$LN2@ReadRTCTim|

; 123  :             break;

  00264	ea00000a	 b           |$LN3@ReadRTCTim|
  00268		 |$LN2@ReadRTCTim|

; 124  : 
; 125  :         /* write returned data into the output buffer */
; 126  :         *pData = trans.mBuffer[0];

  00268	e5dd207c	 ldrb        r2, [sp, #0x7C]
  0026c	e59d3004	 ldr         r3, [sp, #4]
  00270	e5c32000	 strb        r2, [r3]

; 127  :         pData++;

  00274	e59d3004	 ldr         r3, [sp, #4]
  00278	e2833001	 add         r3, r3, #1
  0027c	e58d3004	 str         r3, [sp, #4]

; 128  :         RegOffset++;

  00280	e5dd3000	 ldrb        r3, [sp]
  00284	e2833001	 add         r3, r3, #1
  00288	e20330ff	 and         r3, r3, #0xFF
  0028c	e5cd3000	 strb        r3, [sp]

; 129  :     }

  00290	eaffffd7	 b           |$LN4@ReadRTCTim|
  00294		 |$LN3@ReadRTCTim|

; 130  : 
; 131  :     if (trans.mErrorCode)

  00294	e59d3078	 ldr         r3, [sp, #0x78]
  00298	e3530000	 cmp         r3, #0
  0029c	0a000004	 beq         |$LN1@ReadRTCTim|

; 132  :         return FALSE;

  002a0	e59d017c	 ldr         r0, [sp, #0x17C]
  002a4	eb000000	 bl          __security_check_cookie
  002a8	e3a03000	 mov         r3, #0
  002ac	e58d3180	 str         r3, [sp, #0x180]
  002b0	ea000003	 b           |$LN6@ReadRTCTim|
  002b4		 |$LN1@ReadRTCTim|

; 133  : 
; 134  :     return TRUE;

  002b4	e59d017c	 ldr         r0, [sp, #0x17C]
  002b8	eb000000	 bl          __security_check_cookie
  002bc	e3a03001	 mov         r3, #1
  002c0	e58d3180	 str         r3, [sp, #0x180]
  002c4		 |$LN6@ReadRTCTim|

; 135  : }

  002c4	e59d0180	 ldr         r0, [sp, #0x180]
  002c8	e28ddf61	 add         sp, sp, #0x61, 30
  002cc	e89d6000	 ldmia       sp, {sp, lr}
  002d0	e12fff1e	 bx          lr
  002d4		 |$LN11@ReadRTCTim|
  002d4		 |$LN12@ReadRTCTim|
  002d4	00000000	 DCD         |__security_cookie|
  002d8		 |$M45553|

			 ENDP  ; |ReadRTCTimeData|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|WriteRTCTimeData|

  00018			 AREA	 |.pdata|, PDATA
|$T45565| DCD	|$LN10@WriteRTCTi|
	DCD	0xc0004b04

  0000c			 AREA	 |.xdata|, DATA
|$T45561| DCD	0xffffffe8
; Function compile flags: /Odtp

  002d8			 AREA	 |.text|, CODE, ARM

  002d8	00000000	 DCD         |__GSHandlerCheck|
  002dc	00000000	 DCD         |$T45561|

  002e0		 |WriteRTCTimeData| PROC

; 144  : {

  002e0		 |$LN10@WriteRTCTi|
  002e0	e1a0c00d	 mov         r12, sp
  002e4	e92d0003	 stmdb       sp!, {r0, r1}
  002e8	e92d5000	 stmdb       sp!, {r12, lr}
  002ec	e24ddf61	 sub         sp, sp, #0x61, 30
  002f0		 |$M45562|
  002f0	e59f3110	 ldr         r3, [pc, #0x110]
  002f4	e5933000	 ldr         r3, [r3]
  002f8	e58d317c	 str         r3, [sp, #0x17C]

; 145  :     I2CTRANS trans;
; 146  :     DWORD i;
; 147  :     UCHAR RegOffset;
; 148  :     UCHAR *pData;
; 149  : 
; 150  :     ZeroMemory(&trans,sizeof(trans));

  002fc	e3a02e17	 mov         r2, #0x17, 28
  00300	e3a01000	 mov         r1, #0
  00304	e28d000c	 add         r0, sp, #0xC
  00308	eb000000	 bl          memset

; 151  : 
; 152  :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  0030c	e3a0303c	 mov         r3, #0x3C
  00310	e58d3014	 str         r3, [sp, #0x14]

; 153  : 
; 154  :     /* first byte in buffer is register # offset */
; 155  :     pData = (UCHAR *)pBuffer;

  00314	e59d318c	 ldr         r3, [sp, #0x18C]
  00318	e58d3004	 str         r3, [sp, #4]

; 156  :     RegOffset = *pData;

  0031c	e59d3004	 ldr         r3, [sp, #4]
  00320	e5d33000	 ldrb        r3, [r3]
  00324	e5cd3000	 strb        r3, [sp]

; 157  :     pData++;

  00328	e59d3004	 ldr         r3, [sp, #4]
  0032c	e2833001	 add         r3, r3, #1
  00330	e58d3004	 str         r3, [sp, #4]

; 158  : 
; 159  :     for (i=0;i<size;i++)

  00334	e3a03000	 mov         r3, #0
  00338	e58d3008	 str         r3, [sp, #8]
  0033c	ea000002	 b           |$LN5@WriteRTCTi|
  00340		 |$LN4@WriteRTCTi|
  00340	e59d3008	 ldr         r3, [sp, #8]
  00344	e2833001	 add         r3, r3, #1
  00348	e58d3008	 str         r3, [sp, #8]
  0034c		 |$LN5@WriteRTCTi|
  0034c	e59d2008	 ldr         r2, [sp, #8]
  00350	e59d3190	 ldr         r3, [sp, #0x190]
  00354	e1520003	 cmp         r2, r3
  00358	2a00001a	 bcs         |$LN3@WriteRTCTi|

; 160  :     {
; 161  :         /* write register address, then data for that register */
; 162  :         trans.mOpCode[0] = I2C_OPCODE_WRITE;

  0035c	e3a03002	 mov         r3, #2
  00360	e58d3018	 str         r3, [sp, #0x18]

; 163  :         trans.mBufferOffset[0] = 0;

  00364	e3a03000	 mov         r3, #0
  00368	e58d3038	 str         r3, [sp, #0x38]

; 164  :         trans.mTransLen[0] = 2;

  0036c	e3a03002	 mov         r3, #2
  00370	e58d3058	 str         r3, [sp, #0x58]

; 165  :         trans.mBuffer[0] = RegOffset;

  00374	e5dd3000	 ldrb        r3, [sp]
  00378	e5cd307c	 strb        r3, [sp, #0x7C]

; 166  :         trans.mBuffer[1] = *pData;

  0037c	e59d3004	 ldr         r3, [sp, #4]
  00380	e5d33000	 ldrb        r3, [r3]
  00384	e5cd307d	 strb        r3, [sp, #0x7D]

; 167  : 
; 168  :         KERNELI2C_PreemptibleSubmit(I2C_MENELAUS_ADDRESS,7,&trans);

  00388	e28d200c	 add         r2, sp, #0xC
  0038c	e3a01007	 mov         r1, #7
  00390	e3a00072	 mov         r0, #0x72
  00394	eb000000	 bl          KERNELI2C_PreemptibleSubmit

; 169  : 
; 170  :         if (trans.mErrorCode)

  00398	e59d3078	 ldr         r3, [sp, #0x78]
  0039c	e3530000	 cmp         r3, #0
  003a0	0a000000	 beq         |$LN2@WriteRTCTi|

; 171  :             break;

  003a4	ea000007	 b           |$LN3@WriteRTCTi|
  003a8		 |$LN2@WriteRTCTi|

; 172  : 
; 173  :         /* update for next write */
; 174  :         pData++;

  003a8	e59d3004	 ldr         r3, [sp, #4]
  003ac	e2833001	 add         r3, r3, #1
  003b0	e58d3004	 str         r3, [sp, #4]

; 175  :         RegOffset++;

  003b4	e5dd3000	 ldrb        r3, [sp]
  003b8	e2833001	 add         r3, r3, #1
  003bc	e20330ff	 and         r3, r3, #0xFF
  003c0	e5cd3000	 strb        r3, [sp]

; 176  :     }

  003c4	eaffffdd	 b           |$LN4@WriteRTCTi|
  003c8		 |$LN3@WriteRTCTi|

; 177  : 
; 178  :     if (trans.mErrorCode)

  003c8	e59d3078	 ldr         r3, [sp, #0x78]
  003cc	e3530000	 cmp         r3, #0
  003d0	0a000004	 beq         |$LN1@WriteRTCTi|

; 179  :         return FALSE;

  003d4	e59d017c	 ldr         r0, [sp, #0x17C]
  003d8	eb000000	 bl          __security_check_cookie
  003dc	e3a03000	 mov         r3, #0
  003e0	e58d3180	 str         r3, [sp, #0x180]
  003e4	ea000003	 b           |$LN6@WriteRTCTi|
  003e8		 |$LN1@WriteRTCTi|

; 180  : 
; 181  :     return TRUE;

  003e8	e59d017c	 ldr         r0, [sp, #0x17C]
  003ec	eb000000	 bl          __security_check_cookie
  003f0	e3a03001	 mov         r3, #1
  003f4	e58d3180	 str         r3, [sp, #0x180]
  003f8		 |$LN6@WriteRTCTi|

; 182  : }   

  003f8	e59d0180	 ldr         r0, [sp, #0x180]
  003fc	e28ddf61	 add         sp, sp, #0x61, 30
  00400	e89d6000	 ldmia       sp, {sp, lr}
  00404	e12fff1e	 bx          lr
  00408		 |$LN11@WriteRTCTi|
  00408		 |$LN12@WriteRTCTi|
  00408	00000000	 DCD         |__security_cookie|
  0040c		 |$M45563|

			 ENDP  ; |WriteRTCTimeData|

	END
