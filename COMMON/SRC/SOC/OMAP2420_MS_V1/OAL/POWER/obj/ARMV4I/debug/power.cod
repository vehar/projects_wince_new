; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|ulaRegisterContext|, 0xb4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1BO@JBBKKIFK@?$AA?9?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@CMMOMPH@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAp?$AAP?$AAR?$AAC?$AAM?$AAR?$AAe?$AAg?$AA?9?$AA?$DO?$AAu?$AAl?$AAP?$AAM?$AA_?$AAW?$AAK?$AAS?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@LPOMOEEB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAs?$AAl?$AAe?$AAe?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@GJBNLJCO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@KHIJKAFF@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@MBKDOABO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@PJIFMPOD@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt?$AAr?$AA?5?$AA?$CI?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@LMPKPHIB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@GPINFMBJ@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAK?$AAI?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@BEFEDDKA@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAI?$AAD?$AAC?$AAO?$AAD?$AAE?$AA_?$AAr?$AAe?$AAg?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@BIFIOCGK@?$AA?$CL?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMPowerOff|
	IMPORT	|OALKitlPowerOn|
	IMPORT	|OALFlushICache|
	IMPORT	|OALFlushDCache|
	IMPORT	|OALClearITLB|
	IMPORT	|OALClearDTLB|
	IMPORT	|memcpy|
	IMPORT	|OALCPUIdle|
	IMPORT	|OALCPUIdle_sz|
	IMPORT	|OALIntrEnableIrqs|
	IMPORT	|OALKitlPowerOff|
	IMPORT	|OALArgsQuery|
	IMPORT	|g_oalWakeSource|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALPAtoVA|

  00000			 AREA	 |.bss|, NOINIT
|?pSYSC1Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pSYSC1Regs
|?pGPMCRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pGPMCRegs
|?pSDRCRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pSDRCRegs
|?pSMSRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pSMSRegs
|?pPadConfRegs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pPadConfRegs
|?pPRCMReg@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pPRCMReg
|?pGPIO4Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO4Regs
|?pGPIO3Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO3Regs
|?pGPIO2Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO2Regs
|?pGPIO1Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO1Regs
|?pIntcRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pIntcRegs
|?pCpldRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pCpldRegs

  00000			 AREA	 |.pdata|, PDATA
|$T45736| DCD	|$LN8@OEMPowerOf|
	DCD	0x40050102
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\power\power.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@JBBKKIFK@?$AA?9?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@CMMOMPH@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAp?$AAP?$AAR?$AAC?$AAM?$AAR?$AAe?$AAg?$AA?9?$AA?$DO?$AAu?$AAl?$AAP?$AAM?$AA_?$AAW?$AAK?$AAS?$AAT@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "p", 0x0, "P", 0x0, "R", 0x0, "C", 0x0, "M", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "-", 0x0, ">", 0x0, "u", 0x0, "l"
	DCB	0x0, "P", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "K", 0x0, "S"
	DCB	0x0, "T", 0x0, "_", 0x0, "W", 0x0, "K", 0x0, "U", 0x0, "P"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@LPOMOEEB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAs?$AAl?$AAe?$AAe?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, " ", 0x0, "s", 0x0, "l"
	DCB	0x0, "e", 0x0, "e", 0x0, "p", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GJBNLJCO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, ":", 0x0, "O", 0x0, "A"
	DCB	0x0, "L", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, "I", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@KHIJKAFF@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "C", 0x0, "P", 0x0, "U"
	DCB	0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@MBKDOABO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, ":", 0x0, "s", 0x0, "u"
	DCB	0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "_"
	DCB	0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "_", 0x0, "p"
	DCB	0x0, "t", 0x0, "r", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@PJIFMPOD@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt?$AAr?$AA?5?$AA?$CI?$AA?$CF@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "s", 0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "_", 0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "_", 0x0, "p", 0x0, "t", 0x0, "r", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@LMPKPHIB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "s", 0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "_", 0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "_", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@GPINFMBJ@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAK?$AAI?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "I", 0x0, "T", 0x0, "L", 0x0, " ", 0x0, "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BEFEDDKA@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAI?$AAD?$AAC?$AAO?$AAD?$AAE?$AA_?$AAr?$AAe?$AAg?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, "C", 0x0, "O", 0x0, "D", 0x0, "E"
	DCB	0x0, "_", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@BIFIOCGK@?$AA?$CL?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPowerOff| PROC

; 134  : {

  00000		 |$LN8@OEMPowerOf|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd058	 sub         sp, sp, #0x58
  00008		 |$M45733|

; 135  :     void (*suspend_func_ptr)();
; 136  :     int suspend_func_size;
; 137  :     OAL_KITL_ARGS *pArgs;
; 138  :     void *pIDCODE_reg;
; 139  :     //Declare all register pointers
; 140  :     static CPLD_REGS *pCpldRegs;
; 141  :     static OMAP2420_MPUINTC_REGS *pIntcRegs;
; 142  :     static OMAP2420_GPIO_REGS *pGPIO1Regs;
; 143  :     static OMAP2420_GPIO_REGS *pGPIO2Regs;
; 144  :     static OMAP2420_GPIO_REGS *pGPIO3Regs;
; 145  :     static OMAP2420_GPIO_REGS *pGPIO4Regs;
; 146  :     static OMAP2420_PRCM_REGS *pPRCMReg;
; 147  :     static OMAP2420_CONTROL_PADCONF_REGS *pPadConfRegs;
; 148  :     static OMAP2420_SMS_REGS *pSMSRegs;
; 149  :     static OMAP2420_SDRC_REGS *pSDRCRegs;
; 150  :     static OMAP2420_GPMC_REGS *pGPMCRegs;
; 151  :     static OMAP2420_SYSC1_REGS *pSYSC1Regs;
; 152  :     UINT32 new_value = 0x00000000;

  00008	e3a03000	 mov         r3, #0
  0000c	e58d3004	 str         r3, [sp, #4]

; 153  :     
; 154  :     //Initialize all pointers
; 155  :     pCpldRegs    = (CPLD_REGS *) OALPAtoUA(BSP_CPLD_REGS_PA);

  00010	e3a01000	 mov         r1, #0
  00014	e3a00302	 mov         r0, #2, 6
  00018	eb000000	 bl          OALPAtoVA
  0001c	e58d0014	 str         r0, [sp, #0x14]
  00020	e59d2014	 ldr         r2, [sp, #0x14]
  00024	e59f33dc	 ldr         r3, [pc, #0x3DC]
  00028	e5832000	 str         r2, [r3]

; 156  :     pIntcRegs    = (OMAP2420_MPUINTC_REGS *) OALPAtoUA(OMAP2420_INTC_MPU_REGS_PA);

  0002c	e3a01000	 mov         r1, #0
  00030	e3a00312	 mov         r0, #0x12, 6
  00034	e3800afe	 orr         r0, r0, #0xFE, 20
  00038	eb000000	 bl          OALPAtoVA
  0003c	e58d0018	 str         r0, [sp, #0x18]
  00040	e59d2018	 ldr         r2, [sp, #0x18]
  00044	e59f338c	 ldr         r3, [pc, #0x38C]
  00048	e5832000	 str         r2, [r3]

; 157  :     pGPIO1Regs   = (OMAP2420_GPIO_REGS *) OALPAtoUA(OMAP2420_GPIO1_REGS_PA);

  0004c	e3a01000	 mov         r1, #0
  00050	e3a00312	 mov         r0, #0x12, 6
  00054	e3800906	 orr         r0, r0, #6, 18
  00058	eb000000	 bl          OALPAtoVA
  0005c	e58d001c	 str         r0, [sp, #0x1C]
  00060	e59d201c	 ldr         r2, [sp, #0x1C]
  00064	e59f3368	 ldr         r3, [pc, #0x368]
  00068	e5832000	 str         r2, [r3]

; 158  :     pGPIO2Regs   = (OMAP2420_GPIO_REGS *) OALPAtoUA(OMAP2420_GPIO2_REGS_PA);

  0006c	e3a01000	 mov         r1, #0
  00070	e3a00312	 mov         r0, #0x12, 6
  00074	e3800a1a	 orr         r0, r0, #0x1A, 20
  00078	eb000000	 bl          OALPAtoVA
  0007c	e58d0020	 str         r0, [sp, #0x20]
  00080	e59d2020	 ldr         r2, [sp, #0x20]
  00084	e59f3378	 ldr         r3, [pc, #0x378]
  00088	e5832000	 str         r2, [r3]

; 159  :     pGPIO3Regs   = (OMAP2420_GPIO_REGS *) OALPAtoUA(OMAP2420_GPIO3_REGS_PA);

  0008c	e3a01000	 mov         r1, #0
  00090	e3a00312	 mov         r0, #0x12, 6
  00094	e3800907	 orr         r0, r0, #7, 18
  00098	eb000000	 bl          OALPAtoVA
  0009c	e58d0024	 str         r0, [sp, #0x24]
  000a0	e59d2024	 ldr         r2, [sp, #0x24]
  000a4	e59f3320	 ldr         r3, [pc, #0x320]
  000a8	e5832000	 str         r2, [r3]

; 160  :     pGPIO4Regs   = (OMAP2420_GPIO_REGS *) OALPAtoUA(OMAP2420_GPIO4_REGS_PA);

  000ac	e3a01000	 mov         r1, #0
  000b0	e3a00312	 mov         r0, #0x12, 6
  000b4	e3800a1e	 orr         r0, r0, #0x1E, 20
  000b8	eb000000	 bl          OALPAtoVA
  000bc	e58d0028	 str         r0, [sp, #0x28]
  000c0	e59d2028	 ldr         r2, [sp, #0x28]
  000c4	e59f3334	 ldr         r3, [pc, #0x334]
  000c8	e5832000	 str         r2, [r3]

; 161  :     pPRCMReg     = (OMAP2420_PRCM_REGS *) OALPAtoUA(OMAP2420_PRCM_REGS_PA);

  000cc	e3a01000	 mov         r1, #0
  000d0	e3a00312	 mov         r0, #0x12, 6
  000d4	e3800902	 orr         r0, r0, #2, 18
  000d8	eb000000	 bl          OALPAtoVA
  000dc	e58d002c	 str         r0, [sp, #0x2C]
  000e0	e59d202c	 ldr         r2, [sp, #0x2C]
  000e4	e59f32d8	 ldr         r3, [pc, #0x2D8]
  000e8	e5832000	 str         r2, [r3]

; 162  :     pPadConfRegs = (OMAP2420_CONTROL_PADCONF_REGS *) OALPAtoUA(OMAP2420_SYSC1_REGS_PA+0x30);

  000ec	e3a01000	 mov         r1, #0
  000f0	e3a00312	 mov         r0, #0x12, 6
  000f4	e3800030	 orr         r0, r0, #0x30
  000f8	eb000000	 bl          OALPAtoVA
  000fc	e58d0030	 str         r0, [sp, #0x30]
  00100	e59d2030	 ldr         r2, [sp, #0x30]
  00104	e59f32c4	 ldr         r3, [pc, #0x2C4]
  00108	e5832000	 str         r2, [r3]

; 163  :     pSMSRegs     = (OMAP2420_SMS_REGS *) OALPAtoUA(OMAP2420_SMS_REGS_PA);

  0010c	e3a01000	 mov         r1, #0
  00110	e3a0031a	 mov         r0, #0x1A, 6
  00114	e3800902	 orr         r0, r0, #2, 18
  00118	eb000000	 bl          OALPAtoVA
  0011c	e58d0034	 str         r0, [sp, #0x34]
  00120	e59d2034	 ldr         r2, [sp, #0x34]
  00124	e59f32d0	 ldr         r3, [pc, #0x2D0]
  00128	e5832000	 str         r2, [r3]

; 164  :     pSDRCRegs    = (OMAP2420_SDRC_REGS *) OALPAtoUA(OMAP2420_SDRC_REGS_PA);

  0012c	e3a01000	 mov         r1, #0
  00130	e3a0031a	 mov         r0, #0x1A, 6
  00134	e3800a09	 orr         r0, r0, #9, 20
  00138	eb000000	 bl          OALPAtoVA
  0013c	e58d0038	 str         r0, [sp, #0x38]
  00140	e59d2038	 ldr         r2, [sp, #0x38]
  00144	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00148	e5832000	 str         r2, [r3]

; 165  :     pGPMCRegs    = (OMAP2420_GPMC_REGS *) OALPAtoUA(OMAP2420_GPMC_REGS_PA);

  0014c	e3a01000	 mov         r1, #0
  00150	e3a0031a	 mov         r0, #0x1A, 6
  00154	e3800a0a	 orr         r0, r0, #0xA, 20
  00158	eb000000	 bl          OALPAtoVA
  0015c	e58d003c	 str         r0, [sp, #0x3C]
  00160	e59d203c	 ldr         r2, [sp, #0x3C]
  00164	e59f3288	 ldr         r3, [pc, #0x288]
  00168	e5832000	 str         r2, [r3]

; 166  :     pSYSC1Regs   = (OMAP2420_SYSC1_REGS *) OALPAtoUA(OMAP2420_SYSC1_REGS_PA);

  0016c	e3a01000	 mov         r1, #0
  00170	e3a00312	 mov         r0, #0x12, 6
  00174	eb000000	 bl          OALPAtoVA
  00178	e58d0040	 str         r0, [sp, #0x40]
  0017c	e59d2040	 ldr         r2, [sp, #0x40]
  00180	e59f3268	 ldr         r3, [pc, #0x268]
  00184	e5832000	 str         r2, [r3]

; 167  : 
; 168  :     //Debug Start
; 169  :     //OUTREG16(&pCpldRegs->LED, 1);
; 170  :     OALMSG(1, (L"+OEMPowerOff\r\n"));

  00188	e59f025c	 ldr         r0, [pc, #0x25C]
  0018c	eb000000	 bl          NKDbgPrintfW

; 171  :     g_oalWakeSource = SYSWAKE_UNKNOWN;

  00190	e59f2250	 ldr         r2, [pc, #0x250]
  00194	e3e03000	 mvn         r3, #0
  00198	e5823000	 str         r3, [r2]

; 172  : 
; 173  :     //The IDCODE value is 0x0B5D902F for OMAP242x ES1.0.
; 174  :     //The IDCODE value is 0x1B5D902F for OMAP242x ES2.0.
; 175  :     //The IDCODE value is 0x2B5D902F for OMAP242x ES2.05.
; 176  :     //The IDCODE value is 0x3B5D902F for OMAP242x ES2.1 *** Tested PM on this ***
; 177  :     //The IDCODE value is 0x4B5D902F for OMAP242x ES2.1.1.
; 178  :     pIDCODE_reg = OALPAtoUA(0x48014204);

  0019c	e3a01000	 mov         r1, #0
  001a0	e59f023c	 ldr         r0, [pc, #0x23C]
  001a4	eb000000	 bl          OALPAtoVA
  001a8	e58d0044	 str         r0, [sp, #0x44]
  001ac	e59d3044	 ldr         r3, [sp, #0x44]
  001b0	e58d300c	 str         r3, [sp, #0xC]

; 179  :     OALMSG(1, (L"OEMPowerOff: IDCODE_reg (%x)\r\n", *(int*)pIDCODE_reg));

  001b4	e59d300c	 ldr         r3, [sp, #0xC]
  001b8	e5931000	 ldr         r1, [r3]
  001bc	e59f021c	 ldr         r0, [pc, #0x21C]
  001c0	eb000000	 bl          NKDbgPrintfW

; 180  :     
; 181  :     // Make sure that KITL is powered off
; 182  :     pArgs = (OAL_KITL_ARGS*)OALArgsQuery(OAL_ARGS_QUERY_KITL);

  001c4	e3a00002	 mov         r0, #2
  001c8	eb000000	 bl          OALArgsQuery
  001cc	e58d0048	 str         r0, [sp, #0x48]
  001d0	e59d3048	 ldr         r3, [sp, #0x48]
  001d4	e58d3008	 str         r3, [sp, #8]

; 183  :     if ((pArgs->flags & OAL_KITL_FLAGS_ENABLED) != 0)

  001d8	e59d3008	 ldr         r3, [sp, #8]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e3130001	 tst         r3, #1
  001e4	0a000002	 beq         |$LN3@OEMPowerOf|

; 184  :     {
; 185  :         OALKitlPowerOff();

  001e8	eb000000	 bl          OALKitlPowerOff

; 186  :         OALMSG(1, (L"OEMPowerOff: KITL Disabled\r\n"));

  001ec	e59f01e8	 ldr         r0, [pc, #0x1E8]
  001f0	eb000000	 bl          NKDbgPrintfW
  001f4		 |$LN3@OEMPowerOf|

; 187  :     }
; 188  : 
; 189  :     //Backup all used registers
; 190  :     ulaRegisterContext[ulINTC_MIR0] = pIntcRegs->ulINTC_MIR0; //restored

  001f4	e59f31dc	 ldr         r3, [pc, #0x1DC]
  001f8	e5933000	 ldr         r3, [r3]
  001fc	e2833084	 add         r3, r3, #0x84
  00200	e5932000	 ldr         r2, [r3]
  00204	e59f31bc	 ldr         r3, [pc, #0x1BC]
  00208	e5832000	 str         r2, [r3]

; 191  :     ulaRegisterContext[ulINTC_MIR1] = pIntcRegs->ulINTC_MIR1; //restored

  0020c	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00210	e5933000	 ldr         r3, [r3]
  00214	e28330a4	 add         r3, r3, #0xA4
  00218	e5932000	 ldr         r2, [r3]
  0021c	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00220	e5832004	 str         r2, [r3, #4]

; 192  :     ulaRegisterContext[ulINTC_MIR2] = pIntcRegs->ulINTC_MIR2; //restored

  00224	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00228	e5933000	 ldr         r3, [r3]
  0022c	e28330c4	 add         r3, r3, #0xC4
  00230	e5932000	 ldr         r2, [r3]
  00234	e59f318c	 ldr         r3, [pc, #0x18C]
  00238	e5832008	 str         r2, [r3, #8]

; 193  :     ulaRegisterContext[ulCM_FCLKEN_WKUP] = pPRCMReg->ulCM_FCLKEN_WKUP; //restored

  0023c	e59f3180	 ldr         r3, [pc, #0x180]
  00240	e5933000	 ldr         r3, [r3]
  00244	e2833b01	 add         r3, r3, #1, 22
  00248	e5932000	 ldr         r2, [r3]
  0024c	e59f3174	 ldr         r3, [pc, #0x174]
  00250	e583200c	 str         r2, [r3, #0xC]

; 194  :     ulaRegisterContext[ulCM_ICLKEN_WKUP] = pPRCMReg->ulCM_ICLKEN_WKUP; //restored

  00254	e59f3168	 ldr         r3, [pc, #0x168]
  00258	e5933000	 ldr         r3, [r3]
  0025c	e2833e41	 add         r3, r3, #0x41, 28
  00260	e5932000	 ldr         r2, [r3]
  00264	e59f315c	 ldr         r3, [pc, #0x15C]
  00268	e5832010	 str         r2, [r3, #0x10]

; 195  :     ulaRegisterContext[ulGPIO_DATAOUT] = pGPIO1Regs->ulGPIO_DATAOUT; //restored

  0026c	e59f3160	 ldr         r3, [pc, #0x160]
  00270	e5933000	 ldr         r3, [r3]
  00274	e283303c	 add         r3, r3, #0x3C
  00278	e5932000	 ldr         r2, [r3]
  0027c	e59f3144	 ldr         r3, [pc, #0x144]
  00280	e5832014	 str         r2, [r3, #0x14]

; 196  :     ulaRegisterContext[ulGPIO1_OE] = pGPIO1Regs->ulGPIO_OE; //restored

  00284	e59f3148	 ldr         r3, [pc, #0x148]
  00288	e5933000	 ldr         r3, [r3]
  0028c	e2833034	 add         r3, r3, #0x34
  00290	e5932000	 ldr         r2, [r3]
  00294	e59f312c	 ldr         r3, [pc, #0x12C]
  00298	e5832018	 str         r2, [r3, #0x18]

; 197  :     ulaRegisterContext[ulPADCONF_UART1_RX] = pPadConfRegs->ulPADCONF_UART1_RX; //restored

  0029c	e59f312c	 ldr         r3, [pc, #0x12C]
  002a0	e5933000	 ldr         r3, [r3]
  002a4	e2833098	 add         r3, r3, #0x98
  002a8	e5932000	 ldr         r2, [r3]
  002ac	e59f3114	 ldr         r3, [pc, #0x114]
  002b0	e583201c	 str         r2, [r3, #0x1C]

; 198  :     ulaRegisterContext[ulGPIO3_OE] = pGPIO3Regs->ulGPIO_OE; //restored

  002b4	e59f3110	 ldr         r3, [pc, #0x110]
  002b8	e5933000	 ldr         r3, [r3]
  002bc	e2833034	 add         r3, r3, #0x34
  002c0	e5932000	 ldr         r2, [r3]
  002c4	e59f30fc	 ldr         r3, [pc, #0xFC]
  002c8	e5832020	 str         r2, [r3, #0x20]

; 199  :     ulaRegisterContext[ulPADCONF_SPI1_NCS2] = pPadConfRegs->ulPADCONF_SPI1_NCS2; //restored

  002cc	e59f30fc	 ldr         r3, [pc, #0xFC]
  002d0	e5933000	 ldr         r3, [r3]
  002d4	e28330d4	 add         r3, r3, #0xD4
  002d8	e5932000	 ldr         r2, [r3]
  002dc	e59f30e4	 ldr         r3, [pc, #0xE4]
  002e0	e5832024	 str         r2, [r3, #0x24]

; 200  :     ulaRegisterContext[ulPM_WKEN_WKUP] = pPRCMReg->ulPM_WKEN_WKUP; //restored

  002e4	e59f30d8	 ldr         r3, [pc, #0xD8]
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e2833e4a	 add         r3, r3, #0x4A, 28
  002f0	e5932000	 ldr         r2, [r3]
  002f4	e59f30cc	 ldr         r3, [pc, #0xCC]
  002f8	e5832028	 str         r2, [r3, #0x28]

; 201  :     ulaRegisterContext[ulGPIO_FALLINGDETECT] = pGPIO3Regs->ulGPIO_FALLINGDETECT; //restored

  002fc	e59f30c8	 ldr         r3, [pc, #0xC8]
  00300	e5933000	 ldr         r3, [r3]
  00304	e283304c	 add         r3, r3, #0x4C
  00308	e5932000	 ldr         r2, [r3]
  0030c	e59f30b4	 ldr         r3, [pc, #0xB4]
  00310	e583202c	 str         r2, [r3, #0x2C]

; 202  :     ulaRegisterContext[ulGPIO_SYSCONFIG] = pGPIO3Regs->ulGPIO_SYSCONFIG; //restored

  00314	e59f30b0	 ldr         r3, [pc, #0xB0]
  00318	e5933000	 ldr         r3, [r3]
  0031c	e2833010	 add         r3, r3, #0x10
  00320	e5932000	 ldr         r2, [r3]
  00324	e59f309c	 ldr         r3, [pc, #0x9C]
  00328	e5832030	 str         r2, [r3, #0x30]

; 203  :     ulaRegisterContext[ulGPIO_WAKEUPENABLE] = pGPIO3Regs->ulGPIO_WAKEUPENABLE; //restored

  0032c	e59f3098	 ldr         r3, [pc, #0x98]
  00330	e5933000	 ldr         r3, [r3]
  00334	e2833020	 add         r3, r3, #0x20
  00338	e5932000	 ldr         r2, [r3]
  0033c	e59f3084	 ldr         r3, [pc, #0x84]
  00340	e5832034	 str         r2, [r3, #0x34]

; 204  :     ulaRegisterContext[ulGPIO_DEBOUNCINGTIME] = pGPIO3Regs->ulGPIO_DEBOUNCINGTIME; //restored

  00344	e59f3080	 ldr         r3, [pc, #0x80]
  00348	e5933000	 ldr         r3, [r3]
  0034c	e2833054	 add         r3, r3, #0x54
  00350	e5932000	 ldr         r2, [r3]
  00354	e59f306c	 ldr         r3, [pc, #0x6C]
  00358	e5832038	 str         r2, [r3, #0x38]

; 205  :     ulaRegisterContext[ulGPIO_DEBOUNCENABLE] = pGPIO3Regs->ulGPIO_DEBOUNCENABLE; //restored

  0035c	e59f3068	 ldr         r3, [pc, #0x68]
  00360	e5933000	 ldr         r3, [r3]
  00364	e2833050	 add         r3, r3, #0x50
  00368	e5932000	 ldr         r2, [r3]
  0036c	e59f3054	 ldr         r3, [pc, #0x54]
  00370	e583203c	 str         r2, [r3, #0x3C]

; 206  :     ulaRegisterContext[ulPM_WKEN1_CORE] = pPRCMReg->ulPM_WKEN1_CORE; //restored

  00374	e59f3048	 ldr         r3, [pc, #0x48]
  00378	e5933000	 ldr         r3, [r3]
  0037c	e2833e2a	 add         r3, r3, #0x2A, 28
  00380	e5932000	 ldr         r2, [r3]
  00384	e59f303c	 ldr         r3, [pc, #0x3C]
  00388	e5832040	 str         r2, [r3, #0x40]

; 207  :     ulaRegisterContext[ulPM_WKEN2_CORE] = pPRCMReg->ulPM_WKEN2_CORE; //restored

  0038c	e59f3030	 ldr         r3, [pc, #0x30]
  00390	e5933000	 ldr         r3, [r3]
  00394	e2833fa9	 add         r3, r3, #0xA9, 30
  00398	e5932000	 ldr         r2, [r3]
  0039c	e59f3024	 ldr         r3, [pc, #0x24]
  003a0	e5832044	 str         r2, [r3, #0x44]

; 208  :     ulaRegisterContext[ulCM_AUTOIDLE_PLL] = pPRCMReg->ulCM_AUTOIDLE_PLL; //restored

  003a4	e59f3018	 ldr         r3, [pc, #0x18]
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e2833e53	 add         r3, r3, #0x53, 28
  003b0	e5932000	 ldr         r2, [r3]
  003b4	e59f300c	 ldr         r3, [pc, #0xC]
  003b8	e5832048	 str         r2, [r3, #0x48]

; 209  :     ulaRegisterContext[ulPRCM_CLKSRC_CTRL] = pPRCMReg->ulPRCM_CLKSRC_CTRL; //restored

  003bc	e59f3000	 ldr         r3, [pc]
  003c0	ea000011	 b           |$LN32@OEMPowerOf|
  003c4		 |$LN33@OEMPowerOf|
  003c4		 |$LN34@OEMPowerOf|
  003c4	00000000	 DCD         |?pPRCMReg@?1??OEMPowerOff@@9@9|
  003c8		 |$LN35@OEMPowerOf|
  003c8	00000000	 DCD         |ulaRegisterContext|
  003cc		 |$LN36@OEMPowerOf|
  003cc	00000000	 DCD         |?pGPIO3Regs@?1??OEMPowerOff@@9@9|
  003d0		 |$LN37@OEMPowerOf|
  003d0	00000000	 DCD         |?pPadConfRegs@?1??OEMPowerOff@@9@9|
  003d4		 |$LN38@OEMPowerOf|
  003d4	00000000	 DCD         |?pGPIO1Regs@?1??OEMPowerOff@@9@9|
  003d8		 |$LN39@OEMPowerOf|
  003d8	00000000	 DCD         |?pIntcRegs@?1??OEMPowerOff@@9@9|
  003dc		 |$LN40@OEMPowerOf|
  003dc	00000000	 DCD         |??_C@_1DK@GPINFMBJ@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAK?$AAI?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  003e0		 |$LN41@OEMPowerOf|
  003e0	00000000	 DCD         |??_C@_1DO@BEFEDDKA@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAI?$AAD?$AAC?$AAO?$AAD?$AAE?$AA_?$AAr?$AAe?$AAg?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  003e4		 |$LN42@OEMPowerOf|
  003e4	48014204	 DCD         0x48014204
  003e8		 |$LN43@OEMPowerOf|
  003e8	00000000	 DCD         |g_oalWakeSource|
  003ec		 |$LN44@OEMPowerOf|
  003ec	00000000	 DCD         |??_C@_1BO@BIFIOCGK@?$AA?$CL?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  003f0		 |$LN45@OEMPowerOf|
  003f0	00000000	 DCD         |?pSYSC1Regs@?1??OEMPowerOff@@9@9|
  003f4		 |$LN46@OEMPowerOf|
  003f4	00000000	 DCD         |?pGPMCRegs@?1??OEMPowerOff@@9@9|
  003f8		 |$LN47@OEMPowerOf|
  003f8	00000000	 DCD         |?pSDRCRegs@?1??OEMPowerOff@@9@9|
  003fc		 |$LN48@OEMPowerOf|
  003fc	00000000	 DCD         |?pSMSRegs@?1??OEMPowerOff@@9@9|
  00400		 |$LN49@OEMPowerOf|
  00400	00000000	 DCD         |?pGPIO4Regs@?1??OEMPowerOff@@9@9|
  00404		 |$LN50@OEMPowerOf|
  00404	00000000	 DCD         |?pGPIO2Regs@?1??OEMPowerOff@@9@9|
  00408		 |$LN51@OEMPowerOf|
  00408	00000000	 DCD         |?pCpldRegs@?1??OEMPowerOff@@9@9|
  0040c		 |$LN32@OEMPowerOf|
  0040c	e5933000	 ldr         r3, [r3]
  00410	e2833060	 add         r3, r3, #0x60
  00414	e5932000	 ldr         r2, [r3]
  00418	e59f3f90	 ldr         r3, [pc, #0xF90]
  0041c	e583204c	 str         r2, [r3, #0x4C]

; 210  :     ulaRegisterContext[ulPRCM_CLKSSETUP] = pPRCMReg->ulPRCM_CLKSSETUP; //restored

  00420	e59f3f90	 ldr         r3, [pc, #0xF90]
  00424	e5933000	 ldr         r3, [r3]
  00428	e2833094	 add         r3, r3, #0x94
  0042c	e5932000	 ldr         r2, [r3]
  00430	e59f3f78	 ldr         r3, [pc, #0xF78]
  00434	e5832050	 str         r2, [r3, #0x50]

; 211  :     ulaRegisterContext[ulPM_PWSTCTRL_CORE] = pPRCMReg->ulPM_PWSTCTRL_CORE; //restored

  00438	e59f3f78	 ldr         r3, [pc, #0xF78]
  0043c	e5933000	 ldr         r3, [r3]
  00440	e2833e2e	 add         r3, r3, #0x2E, 28
  00444	e5932000	 ldr         r2, [r3]
  00448	e59f3f60	 ldr         r3, [pc, #0xF60]
  0044c	e5832054	 str         r2, [r3, #0x54]

; 212  :     ulaRegisterContext[ulPM_WKDEP_MPU] = pPRCMReg->ulPM_WKDEP_MPU; //restored

  00450	e59f3f60	 ldr         r3, [pc, #0xF60]
  00454	e5933000	 ldr         r3, [r3]
  00458	e2833f72	 add         r3, r3, #0x72, 30
  0045c	e5932000	 ldr         r2, [r3]
  00460	e59f3f48	 ldr         r3, [pc, #0xF48]
  00464	e5832058	 str         r2, [r3, #0x58]

; 213  :     ulaRegisterContext[ulPM_WKDEP_DSP] = pPRCMReg->ulPM_WKDEP_DSP; //restored

  00468	e59f3f48	 ldr         r3, [pc, #0xF48]
  0046c	e5933000	 ldr         r3, [r3]
  00470	e2833b02	 add         r3, r3, #2, 22
  00474	e28330c8	 add         r3, r3, #0xC8
  00478	e5932000	 ldr         r2, [r3]
  0047c	e59f3f2c	 ldr         r3, [pc, #0xF2C]
  00480	e583205c	 str         r2, [r3, #0x5C]

; 214  :     ulaRegisterContext[ulPM_WKDEP_GFX] = pPRCMReg->ulPM_WKDEP_GFX; //restored

  00484	e59f3f2c	 ldr         r3, [pc, #0xF2C]
  00488	e5933000	 ldr         r3, [r3]
  0048c	e2833ff2	 add         r3, r3, #0xF2, 30
  00490	e5932000	 ldr         r2, [r3]
  00494	e59f3f14	 ldr         r3, [pc, #0xF14]
  00498	e5832060	 str         r2, [r3, #0x60]

; 215  :     ulaRegisterContext[ulGPIO_IRQENABLE1] = pGPIO3Regs->ulGPIO_IRQENABLE1; //restored

  0049c	e59f3f18	 ldr         r3, [pc, #0xF18]
  004a0	e5933000	 ldr         r3, [r3]
  004a4	e283301c	 add         r3, r3, #0x1C
  004a8	e5932000	 ldr         r2, [r3]
  004ac	e59f3efc	 ldr         r3, [pc, #0xEFC]
  004b0	e5832064	 str         r2, [r3, #0x64]

; 216  :     ulaRegisterContext[ulPM_PWSTCTRL_MPU] = pPRCMReg->ulPM_PWSTCTRL_MPU; //restored

  004b4	e59f3efc	 ldr         r3, [pc, #0xEFC]
  004b8	e5933000	 ldr         r3, [r3]
  004bc	e2833e1e	 add         r3, r3, #0x1E, 28
  004c0	e5932000	 ldr         r2, [r3]
  004c4	e59f3ee4	 ldr         r3, [pc, #0xEE4]
  004c8	e5832068	 str         r2, [r3, #0x68]

; 217  :     ulaRegisterContext[ulPM_PWSTCTRL_DSP] = pPRCMReg->ulPM_PWSTCTRL_DSP; //restored

  004cc	e59f3ee4	 ldr         r3, [pc, #0xEE4]
  004d0	e5933000	 ldr         r3, [r3]
  004d4	e2833e8e	 add         r3, r3, #0x8E, 28
  004d8	e5932000	 ldr         r2, [r3]
  004dc	e59f3ecc	 ldr         r3, [pc, #0xECC]
  004e0	e583206c	 str         r2, [r3, #0x6C]

; 218  :     ulaRegisterContext[ulPM_PWSTCTRL_GFX] = pPRCMReg->ulPM_PWSTCTRL_GFX; //restored

  004e4	e59f3ecc	 ldr         r3, [pc, #0xECC]
  004e8	e5933000	 ldr         r3, [r3]
  004ec	e2833e3e	 add         r3, r3, #0x3E, 28
  004f0	e5932000	 ldr         r2, [r3]
  004f4	e59f3eb4	 ldr         r3, [pc, #0xEB4]
  004f8	e5832070	 str         r2, [r3, #0x70]

; 219  :     ulaRegisterContext[ulSDRC_POWER] = pSDRCRegs->ulSDRC_POWER;         //restored

  004fc	e59f3ec8	 ldr         r3, [pc, #0xEC8]
  00500	e5933000	 ldr         r3, [r3]
  00504	e2833070	 add         r3, r3, #0x70
  00508	e5932000	 ldr         r2, [r3]
  0050c	e59f3e9c	 ldr         r3, [pc, #0xE9C]
  00510	e5832074	 str         r2, [r3, #0x74]

; 220  :     ulaRegisterContext[ulSMS_SYSCONFIG] = pSMSRegs->ulSMS_SYSCONFIG;    //restored

  00514	e59f3eb4	 ldr         r3, [pc, #0xEB4]
  00518	e5933000	 ldr         r3, [r3]
  0051c	e2833010	 add         r3, r3, #0x10
  00520	e5932000	 ldr         r2, [r3]
  00524	e59f3e84	 ldr         r3, [pc, #0xE84]
  00528	e5832078	 str         r2, [r3, #0x78]

; 221  :     ulaRegisterContext[ulSDRC_SYSCONFIG] = pSDRCRegs->ulSDRC_SYSCONFIG; //restored

  0052c	e59f3e98	 ldr         r3, [pc, #0xE98]
  00530	e5933000	 ldr         r3, [r3]
  00534	e2833010	 add         r3, r3, #0x10
  00538	e5932000	 ldr         r2, [r3]
  0053c	e59f3e6c	 ldr         r3, [pc, #0xE6C]
  00540	e583207c	 str         r2, [r3, #0x7C]

; 222  :     ulaRegisterContext[ulGPMC_SYSCONFIG] = pGPMCRegs->ulGPMC_SYSCONFIG; //restored

  00544	e59f3e7c	 ldr         r3, [pc, #0xE7C]
  00548	e5933000	 ldr         r3, [r3]
  0054c	e2833010	 add         r3, r3, #0x10
  00550	e5932000	 ldr         r2, [r3]
  00554	e59f3e54	 ldr         r3, [pc, #0xE54]
  00558	e5832080	 str         r2, [r3, #0x80]

; 223  :     ulaRegisterContext[ulCM_CLKSTCTRL_MPU] = pPRCMReg->ulCM_CLKSTCTRL_MPU; //restored

  0055c	e59f3e54	 ldr         r3, [pc, #0xE54]
  00560	e5933000	 ldr         r3, [r3]
  00564	e2833f52	 add         r3, r3, #0x52, 30
  00568	e5932000	 ldr         r2, [r3]
  0056c	e59f3e3c	 ldr         r3, [pc, #0xE3C]
  00570	e5832084	 str         r2, [r3, #0x84]

; 224  :     ulaRegisterContext[ulCM_CLKSTCTRL_DSP] = pPRCMReg->ulCM_CLKSTCTRL_DSP; //restored

  00574	e59f3e3c	 ldr         r3, [pc, #0xE3C]
  00578	e5933000	 ldr         r3, [r3]
  0057c	e2833b02	 add         r3, r3, #2, 22
  00580	e2833048	 add         r3, r3, #0x48
  00584	e5932000	 ldr         r2, [r3]
  00588	e59f3e20	 ldr         r3, [pc, #0xE20]
  0058c	e5832088	 str         r2, [r3, #0x88]

; 225  :     ulaRegisterContext[ulCM_CLKSTCTRL_GFX] = pPRCMReg->ulCM_CLKSTCTRL_GFX;  //restored

  00590	e59f3e20	 ldr         r3, [pc, #0xE20]
  00594	e5933000	 ldr         r3, [r3]
  00598	e2833fd2	 add         r3, r3, #0xD2, 30
  0059c	e5932000	 ldr         r2, [r3]
  005a0	e59f3e08	 ldr         r3, [pc, #0xE08]
  005a4	e583208c	 str         r2, [r3, #0x8C]

; 226  :     ulaRegisterContext[ulCM_CLKSTCTRL_CORE] = pPRCMReg->ulCM_CLKSTCTRL_CORE; //restored

  005a8	e59f3e08	 ldr         r3, [pc, #0xE08]
  005ac	e5933000	 ldr         r3, [r3]
  005b0	e2833f92	 add         r3, r3, #0x92, 30
  005b4	e5932000	 ldr         r2, [r3]
  005b8	e59f3df0	 ldr         r3, [pc, #0xDF0]
  005bc	e5832090	 str         r2, [r3, #0x90]

; 227  :     ulaRegisterContext[ulCM_AUTOIDLE_DSP] = pPRCMReg->ulCM_AUTOIDLE_DSP;     //restored

  005c0	e59f3df0	 ldr         r3, [pc, #0xDF0]
  005c4	e5933000	 ldr         r3, [r3]
  005c8	e2833e83	 add         r3, r3, #0x83, 28
  005cc	e5932000	 ldr         r2, [r3]
  005d0	e59f3dd8	 ldr         r3, [pc, #0xDD8]
  005d4	e5832094	 str         r2, [r3, #0x94]

; 228  :     ulaRegisterContext[ulCM_AUTOIDLE1_CORE] = pPRCMReg->ulCM_AUTOIDLE1_CORE; //restored

  005d8	e59f3dd8	 ldr         r3, [pc, #0xDD8]
  005dc	e5933000	 ldr         r3, [r3]
  005e0	e2833e23	 add         r3, r3, #0x23, 28
  005e4	e5932000	 ldr         r2, [r3]
  005e8	e59f3dc0	 ldr         r3, [pc, #0xDC0]
  005ec	e5832098	 str         r2, [r3, #0x98]

; 229  :     ulaRegisterContext[ulCM_AUTOIDLE2_CORE] = pPRCMReg->ulCM_AUTOIDLE2_CORE; //restored

  005f0	e59f3dc0	 ldr         r3, [pc, #0xDC0]
  005f4	e5933000	 ldr         r3, [r3]
  005f8	e2833f8d	 add         r3, r3, #0x8D, 30
  005fc	e5932000	 ldr         r2, [r3]
  00600	e59f3da8	 ldr         r3, [pc, #0xDA8]
  00604	e583209c	 str         r2, [r3, #0x9C]

; 230  :     ulaRegisterContext[ulCM_AUTOIDLE3_CORE] = pPRCMReg->ulCM_AUTOIDLE3_CORE; //restored

  00608	e59f3da8	 ldr         r3, [pc, #0xDA8]
  0060c	e5933000	 ldr         r3, [r3]
  00610	e2833f8e	 add         r3, r3, #0x8E, 30
  00614	e5932000	 ldr         r2, [r3]
  00618	e59f3d90	 ldr         r3, [pc, #0xD90]
  0061c	e58320a0	 str         r2, [r3, #0xA0]

; 231  :     ulaRegisterContext[ulCM_AUTOIDLE4_CORE] = pPRCMReg->ulCM_AUTOIDLE4_CORE; //restored

  00620	e59f3d90	 ldr         r3, [pc, #0xD90]
  00624	e5933000	 ldr         r3, [r3]
  00628	e2833f8f	 add         r3, r3, #0x8F, 30
  0062c	e5932000	 ldr         r2, [r3]
  00630	e59f3d78	 ldr         r3, [pc, #0xD78]
  00634	e58320a4	 str         r2, [r3, #0xA4]

; 232  :     ulaRegisterContext[ulCM_AUTOIDLE_WKUP] = pPRCMReg->ulCM_AUTOIDLE_WKUP; //restored

  00638	e59f3d78	 ldr         r3, [pc, #0xD78]
  0063c	e5933000	 ldr         r3, [r3]
  00640	e2833e43	 add         r3, r3, #0x43, 28
  00644	e5932000	 ldr         r2, [r3]
  00648	e59f3d60	 ldr         r3, [pc, #0xD60]
  0064c	e58320a8	 str         r2, [r3, #0xA8]

; 233  :     ulaRegisterContext[ulCM_FCLKEN1_CORE] = pPRCMReg->ulCM_FCLKEN1_CORE; //restored

  00650	e59f3d60	 ldr         r3, [pc, #0xD60]
  00654	e5933000	 ldr         r3, [r3]
  00658	e2833c02	 add         r3, r3, #2, 24
  0065c	e5932000	 ldr         r2, [r3]
  00660	e59f3d48	 ldr         r3, [pc, #0xD48]
  00664	e58320ac	 str         r2, [r3, #0xAC]

; 234  :     ulaRegisterContext[ulCM_FCLKEN2_CORE] = pPRCMReg->ulCM_FCLKEN2_CORE; //restored

  00668	e59f3d48	 ldr         r3, [pc, #0xD48]
  0066c	e5933000	 ldr         r3, [r3]
  00670	e2833f81	 add         r3, r3, #0x81, 30
  00674	e5932000	 ldr         r2, [r3]
  00678	e59f3d30	 ldr         r3, [pc, #0xD30]
  0067c	e58320b0	 str         r2, [r3, #0xB0]

; 235  : 
; 236  : 
; 237  :     //Mask all interrupts
; 238  :     pIntcRegs->ulINTC_MIR_SET0 = OMAP2420_MPUINTC_MASKALL;

  00680	e59f3d2c	 ldr         r3, [pc, #0xD2C]
  00684	e5933000	 ldr         r3, [r3]
  00688	e283208c	 add         r2, r3, #0x8C
  0068c	e3e03000	 mvn         r3, #0
  00690	e5823000	 str         r3, [r2]

; 239  :     pIntcRegs->ulINTC_MIR_SET1 = OMAP2420_MPUINTC_MASKALL;

  00694	e59f3d18	 ldr         r3, [pc, #0xD18]
  00698	e5933000	 ldr         r3, [r3]
  0069c	e28320ac	 add         r2, r3, #0xAC
  006a0	e3e03000	 mvn         r3, #0
  006a4	e5823000	 str         r3, [r2]

; 240  :     pIntcRegs->ulINTC_MIR_SET2 = OMAP2420_MPUINTC_MASKALL;

  006a8	e59f3d04	 ldr         r3, [pc, #0xD04]
  006ac	e5933000	 ldr         r3, [r3]
  006b0	e28320cc	 add         r2, r3, #0xCC
  006b4	e3e03000	 mvn         r3, #0
  006b8	e5823000	 str         r3, [r2]

; 241  :     //Clear isr
; 242  :     pIntcRegs->ulINTC_ISR_CLEAR0 = OMAP2420_MPUINTC_MASKALL;

  006bc	e59f3cf0	 ldr         r3, [pc, #0xCF0]
  006c0	e5933000	 ldr         r3, [r3]
  006c4	e2832094	 add         r2, r3, #0x94
  006c8	e3e03000	 mvn         r3, #0
  006cc	e5823000	 str         r3, [r2]

; 243  :     pIntcRegs->ulINTC_ISR_CLEAR1 = OMAP2420_MPUINTC_MASKALL;

  006d0	e59f3cdc	 ldr         r3, [pc, #0xCDC]
  006d4	e5933000	 ldr         r3, [r3]
  006d8	e28320b4	 add         r2, r3, #0xB4
  006dc	e3e03000	 mvn         r3, #0
  006e0	e5823000	 str         r3, [r2]

; 244  :     pIntcRegs->ulINTC_ISR_CLEAR2 = OMAP2420_MPUINTC_MASKALL;

  006e4	e59f3cc8	 ldr         r3, [pc, #0xCC8]
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e28320d4	 add         r2, r3, #0xD4
  006f0	e3e03000	 mvn         r3, #0
  006f4	e5823000	 str         r3, [r2]

; 245  :     //Clear current pending isr
; 246  :     pIntcRegs->ulINTC_CONTROL = 0x3;

  006f8	e59f3cb4	 ldr         r3, [pc, #0xCB4]
  006fc	e5933000	 ldr         r3, [r3]
  00700	e2832048	 add         r2, r3, #0x48
  00704	e3a03003	 mov         r3, #3
  00708	e5823000	 str         r3, [r2]

; 247  : 
; 248  :     //functional_clock_control(PRCM_GPIOS, PRCM_ENABLE);
; 249  :    	pPRCMReg->ulCM_FCLKEN_WKUP |= PRCM_FCLKEN_WKUP_EN_GPIOS;

  0070c	e59f3ca4	 ldr         r3, [pc, #0xCA4]
  00710	e5933000	 ldr         r3, [r3]
  00714	e2833b01	 add         r3, r3, #1, 22
  00718	e5933000	 ldr         r3, [r3]
  0071c	e3832004	 orr         r2, r3, #4
  00720	e59f3c90	 ldr         r3, [pc, #0xC90]
  00724	e5933000	 ldr         r3, [r3]
  00728	e2833b01	 add         r3, r3, #1, 22
  0072c	e5832000	 str         r2, [r3]

; 250  :     //interface_clock_control(PRCM_GPIOS, PRCM_ENABLE);
; 251  : 	pPRCMReg->ulCM_ICLKEN_WKUP |= PRCM_ICLKEN_WKUP_EN_GPIOS;

  00730	e59f3c80	 ldr         r3, [pc, #0xC80]
  00734	e5933000	 ldr         r3, [r3]
  00738	e2833e41	 add         r3, r3, #0x41, 28
  0073c	e5933000	 ldr         r3, [r3]
  00740	e3832004	 orr         r2, r3, #4
  00744	e59f3c6c	 ldr         r3, [pc, #0xC6C]
  00748	e5933000	 ldr         r3, [r3]
  0074c	e2833e41	 add         r3, r3, #0x41, 28
  00750	e5832000	 str         r2, [r3]

; 252  : 
; 253  :     //This sets GPIO 12 to drive low
; 254  :     pGPIO1Regs->ulGPIO_DATAOUT &= 0xFFFFEFFF; 

  00754	e59f3c68	 ldr         r3, [pc, #0xC68]
  00758	e5933000	 ldr         r3, [r3]
  0075c	e283303c	 add         r3, r3, #0x3C
  00760	e5932000	 ldr         r2, [r3]
  00764	e3e03a01	 mvn         r3, #1, 20
  00768	e0022003	 and         r2, r2, r3
  0076c	e59f3c50	 ldr         r3, [pc, #0xC50]
  00770	e5933000	 ldr         r3, [r3]
  00774	e283303c	 add         r3, r3, #0x3C
  00778	e5832000	 str         r2, [r3]

; 255  : 
; 256  :     //This sets GPIO 12 as an output
; 257  :     pGPIO1Regs->ulGPIO_OE &= 0xFFFFEFFF; 

  0077c	e59f3c40	 ldr         r3, [pc, #0xC40]
  00780	e5933000	 ldr         r3, [r3]
  00784	e2833034	 add         r3, r3, #0x34
  00788	e5932000	 ldr         r2, [r3]
  0078c	e3e03a01	 mvn         r3, #1, 20
  00790	e0022003	 and         r2, r2, r3
  00794	e59f3c28	 ldr         r3, [pc, #0xC28]
  00798	e5933000	 ldr         r3, [r3]
  0079c	e2833034	 add         r3, r3, #0x34
  007a0	e5832000	 str         r2, [r3]

; 258  : 
; 259  :     //Set up GPIO 12 pin mux
; 260  :     //first clear bits for pin P21
; 261  :     pPadConfRegs->ulPADCONF_UART1_RX &= 0xFF00FFFF;

  007a4	e59f3c14	 ldr         r3, [pc, #0xC14]
  007a8	e5933000	 ldr         r3, [r3]
  007ac	e2833098	 add         r3, r3, #0x98
  007b0	e5932000	 ldr         r2, [r3]
  007b4	e3e038ff	 mvn         r3, #0xFF, 16
  007b8	e0022003	 and         r2, r2, r3
  007bc	e59f3bfc	 ldr         r3, [pc, #0xBFC]
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e2833098	 add         r3, r3, #0x98
  007c8	e5832000	 str         r2, [r3]

; 262  : 
; 263  :     //now set appropriate bits for P21 mode 3, pulldown enabled   
; 264  :     pPadConfRegs->ulPADCONF_UART1_RX |= 0x000B0000; 

  007cc	e59f3bec	 ldr         r3, [pc, #0xBEC]
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e2833098	 add         r3, r3, #0x98
  007d8	e5933000	 ldr         r3, [r3]
  007dc	e383280b	 orr         r2, r3, #0xB, 16
  007e0	e59f3bd8	 ldr         r3, [pc, #0xBD8]
  007e4	e5933000	 ldr         r3, [r3]
  007e8	e2833098	 add         r3, r3, #0x98
  007ec	e5832000	 str         r2, [r3]

; 265  : 
; 266  :     //Set GPIO 88 as an input.
; 267  :     pGPIO3Regs->ulGPIO_OE |= 0x01000000;

  007f0	e59f3bc4	 ldr         r3, [pc, #0xBC4]
  007f4	e5933000	 ldr         r3, [r3]
  007f8	e2833034	 add         r3, r3, #0x34
  007fc	e5933000	 ldr         r3, [r3]
  00800	e3832401	 orr         r2, r3, #1, 8
  00804	e59f3bb0	 ldr         r3, [pc, #0xBB0]
  00808	e5933000	 ldr         r3, [r3]
  0080c	e2833034	 add         r3, r3, #0x34
  00810	e5832000	 str         r2, [r3]

; 268  : 
; 269  :     //GPIO 88 pin mux.
; 270  :     //first clear bits for pin T19
; 271  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 &= 0xFF00FFFF;

  00814	e59f3ba4	 ldr         r3, [pc, #0xBA4]
  00818	e5933000	 ldr         r3, [r3]
  0081c	e28330d4	 add         r3, r3, #0xD4
  00820	e5932000	 ldr         r2, [r3]
  00824	e3e038ff	 mvn         r3, #0xFF, 16
  00828	e0022003	 and         r2, r2, r3
  0082c	e59f3b8c	 ldr         r3, [pc, #0xB8C]
  00830	e5933000	 ldr         r3, [r3]
  00834	e28330d4	 add         r3, r3, #0xD4
  00838	e5832000	 str         r2, [r3]

; 272  : 
; 273  :     //now set appropriate bits for T19 mode 3, pullup/pulldown disabled
; 274  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 |= 0x00030000;

  0083c	e59f3b7c	 ldr         r3, [pc, #0xB7C]
  00840	e5933000	 ldr         r3, [r3]
  00844	e28330d4	 add         r3, r3, #0xD4
  00848	e5933000	 ldr         r3, [r3]
  0084c	e3832803	 orr         r2, r3, #3, 16
  00850	e59f3b68	 ldr         r3, [pc, #0xB68]
  00854	e5933000	 ldr         r3, [r3]
  00858	e28330d4	 add         r3, r3, #0xD4
  0085c	e5832000	 str         r2, [r3]

; 275  : 
; 276  :     //GPIO 89 (S7) will be used to wake up the device
; 277  :     //wakeup_event_controller
; 278  :     pPRCMReg->ulPM_WKEN_WKUP |= 0x00000004;

  00860	e59f3b50	 ldr         r3, [pc, #0xB50]
  00864	e5933000	 ldr         r3, [r3]
  00868	e2833e4a	 add         r3, r3, #0x4A, 28
  0086c	e5933000	 ldr         r3, [r3]
  00870	e3832004	 orr         r2, r3, #4
  00874	e59f3b3c	 ldr         r3, [pc, #0xB3C]
  00878	e5933000	 ldr         r3, [r3]
  0087c	e2833e4a	 add         r3, r3, #0x4A, 28
  00880	e5832000	 str         r2, [r3]

; 279  : 
; 280  :     //This sets GPIO 89 as an input
; 281  :     pGPIO3Regs->ulGPIO_OE |= 0x02000000;

  00884	e59f3b30	 ldr         r3, [pc, #0xB30]
  00888	e5933000	 ldr         r3, [r3]
  0088c	e2833034	 add         r3, r3, #0x34
  00890	e5933000	 ldr         r3, [r3]
  00894	e3832402	 orr         r2, r3, #2, 8
  00898	e59f3b1c	 ldr         r3, [pc, #0xB1C]
  0089c	e5933000	 ldr         r3, [r3]
  008a0	e2833034	 add         r3, r3, #0x34
  008a4	e5832000	 str         r2, [r3]

; 282  : 
; 283  :     //This will enable the wakeup on the falling edge of GPIO 89
; 284  :     pGPIO3Regs->ulGPIO_FALLINGDETECT |= 0x02000000;

  008a8	e59f3b0c	 ldr         r3, [pc, #0xB0C]
  008ac	e5933000	 ldr         r3, [r3]
  008b0	e283304c	 add         r3, r3, #0x4C
  008b4	e5933000	 ldr         r3, [r3]
  008b8	e3832402	 orr         r2, r3, #2, 8
  008bc	e59f3af8	 ldr         r3, [pc, #0xAF8]
  008c0	e5933000	 ldr         r3, [r3]
  008c4	e283304c	 add         r3, r3, #0x4C
  008c8	e5832000	 str         r2, [r3]

; 285  : 
; 286  :     //Enable wake up capabilities for all GPIO3
; 287  :     pGPIO3Regs->ulGPIO_SYSCONFIG |= 0x00000004;

  008cc	e59f3ae8	 ldr         r3, [pc, #0xAE8]
  008d0	e5933000	 ldr         r3, [r3]
  008d4	e2833010	 add         r3, r3, #0x10
  008d8	e5933000	 ldr         r3, [r3]
  008dc	e3832004	 orr         r2, r3, #4
  008e0	e59f3ad4	 ldr         r3, [pc, #0xAD4]
  008e4	e5933000	 ldr         r3, [r3]
  008e8	e2833010	 add         r3, r3, #0x10
  008ec	e5832000	 str         r2, [r3]

; 288  : 
; 289  :     //Enable wake up for GPIO 89
; 290  :     pGPIO3Regs->ulGPIO_WAKEUPENABLE |= 0x02000000; 

  008f0	e59f3ac4	 ldr         r3, [pc, #0xAC4]
  008f4	e5933000	 ldr         r3, [r3]
  008f8	e2833020	 add         r3, r3, #0x20
  008fc	e5933000	 ldr         r3, [r3]
  00900	e3832402	 orr         r2, r3, #2, 8
  00904	e59f3ab0	 ldr         r3, [pc, #0xAB0]
  00908	e5933000	 ldr         r3, [r3]
  0090c	e2833020	 add         r3, r3, #0x20
  00910	e5832000	 str         r2, [r3]

; 291  : 
; 292  :     //Set GPIO 3 for smart idle.
; 293  :     pGPIO3Regs->ulGPIO_SYSCONFIG |= 0x00000010;

  00914	e59f3aa0	 ldr         r3, [pc, #0xAA0]
  00918	e5933000	 ldr         r3, [r3]
  0091c	e2833010	 add         r3, r3, #0x10
  00920	e5933000	 ldr         r3, [r3]
  00924	e3832010	 orr         r2, r3, #0x10
  00928	e59f3a8c	 ldr         r3, [pc, #0xA8C]
  0092c	e5933000	 ldr         r3, [r3]
  00930	e2833010	 add         r3, r3, #0x10
  00934	e5832000	 str         r2, [r3]

; 294  : 
; 295  :     //Set debouncing time for GPIO 89. 
; 296  :     pGPIO3Regs->ulGPIO_DEBOUNCINGTIME = 0x000000FF;

  00938	e59f3a7c	 ldr         r3, [pc, #0xA7C]
  0093c	e5933000	 ldr         r3, [r3]
  00940	e2832054	 add         r2, r3, #0x54
  00944	e3a030ff	 mov         r3, #0xFF
  00948	e5823000	 str         r3, [r2]

; 297  : 
; 298  :     //Enable debouncing for GPIO 89. 
; 299  :     pGPIO3Regs->ulGPIO_DEBOUNCENABLE |= 0x02000000;

  0094c	e59f3a68	 ldr         r3, [pc, #0xA68]
  00950	e5933000	 ldr         r3, [r3]
  00954	e2833050	 add         r3, r3, #0x50
  00958	e5933000	 ldr         r3, [r3]
  0095c	e3832402	 orr         r2, r3, #2, 8
  00960	e59f3a54	 ldr         r3, [pc, #0xA54]
  00964	e5933000	 ldr         r3, [r3]
  00968	e2833050	 add         r3, r3, #0x50
  0096c	e5832000	 str         r2, [r3]

; 300  : 
; 301  :     //GPIO 89 pin mux.
; 302  :     //first clear bits for pin R19
; 303  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 &= 0x00FFFFFF;

  00970	e59f3a48	 ldr         r3, [pc, #0xA48]
  00974	e5933000	 ldr         r3, [r3]
  00978	e28330d4	 add         r3, r3, #0xD4
  0097c	e5932000	 ldr         r2, [r3]
  00980	e3e034ff	 mvn         r3, #0xFF, 8
  00984	e0022003	 and         r2, r2, r3
  00988	e59f3a30	 ldr         r3, [pc, #0xA30]
  0098c	e5933000	 ldr         r3, [r3]
  00990	e28330d4	 add         r3, r3, #0xD4
  00994	e5832000	 str         r2, [r3]

; 304  :     //now set appropriate bits for R19 mode 3, pullup enabled
; 305  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 |= 0x1B000000;

  00998	e59f3a20	 ldr         r3, [pc, #0xA20]
  0099c	e5933000	 ldr         r3, [r3]
  009a0	e28330d4	 add         r3, r3, #0xD4
  009a4	e5933000	 ldr         r3, [r3]
  009a8	e383241b	 orr         r2, r3, #0x1B, 8
  009ac	e59f3a0c	 ldr         r3, [pc, #0xA0C]
  009b0	e5933000	 ldr         r3, [r3]
  009b4	e28330d4	 add         r3, r3, #0xD4
  009b8	e5832000	 str         r2, [r3]

; 306  : 
; 307  :     //Unmask GPIO 89 IRQ - IRQ31 for GPIO3 will wake the system
; 308  :     new_value = IRQ_GPIO_0 + 89;

  009bc	e3a030f9	 mov         r3, #0xF9
  009c0	e58d3004	 str         r3, [sp, #4]

; 309  :     OALIntrEnableIrqs(1, &new_value);

  009c4	e28d1004	 add         r1, sp, #4
  009c8	e3a00001	 mov         r0, #1
  009cc	eb000000	 bl          OALIntrEnableIrqs

; 310  : 
; 311  : //========================================//
; 312  : //= At this point the GPIO 89 is set     =//
; 313  : //= up to wakeup the MPU.  On the SDP    =//
; 314  : //= User Interface Module this is        =//
; 315  : //= keyboard S7.                         =//
; 316  : //========================================//      
; 317  : 
; 318  :     //Disable CORE wakeup events because we will use a WKUP domain wakeup event.   
; 319  :     pPRCMReg->ulPM_WKEN1_CORE = 0x00000000;

  009d0	e59f39e0	 ldr         r3, [pc, #0x9E0]
  009d4	e5933000	 ldr         r3, [r3]
  009d8	e2832e2a	 add         r2, r3, #0x2A, 28
  009dc	e3a03000	 mov         r3, #0
  009e0	e5823000	 str         r3, [r2]

; 320  :     pPRCMReg->ulPM_WKEN2_CORE = 0x00000000;

  009e4	e59f39cc	 ldr         r3, [pc, #0x9CC]
  009e8	e5933000	 ldr         r3, [r3]
  009ec	e2832fa9	 add         r2, r3, #0xA9, 30
  009f0	e3a03000	 mov         r3, #0
  009f4	e5823000	 str         r3, [r2]

; 321  : 
; 322  :     // Clear WKUP domain reset status register
; 323  :     pPRCMReg->ulRM_RSTST_WKUP = 0x0000007B;

  009f8	e59f39b8	 ldr         r3, [pc, #0x9B8]
  009fc	e5933000	 ldr         r3, [r3]
  00a00	e2833b01	 add         r3, r3, #1, 22
  00a04	e2832058	 add         r2, r3, #0x58
  00a08	e3a0307b	 mov         r3, #0x7B
  00a0c	e5823000	 str         r3, [r2]

; 324  :     pPRCMReg->ulRM_RSTST_MPU  = 0x0000000F; 

  00a10	e59f39a0	 ldr         r3, [pc, #0x9A0]
  00a14	e5933000	 ldr         r3, [r3]
  00a18	e2832f56	 add         r2, r3, #0x56, 30
  00a1c	e3a0300f	 mov         r3, #0xF
  00a20	e5823000	 str         r3, [r2]

; 325  : 
; 326  :     //prepare_for_idle
; 327  :     //apll_54M_clock_auto_control(PRCM_APLL_ENABLE);
; 328  :     new_value = pPRCMReg->ulCM_AUTOIDLE_PLL & 0xFFFFFF3F;

  00a24	e59f398c	 ldr         r3, [pc, #0x98C]
  00a28	e5933000	 ldr         r3, [r3]
  00a2c	e2833e53	 add         r3, r3, #0x53, 28
  00a30	e5932000	 ldr         r2, [r3]
  00a34	e3e030c0	 mvn         r3, #0xC0
  00a38	e0023003	 and         r3, r2, r3
  00a3c	e58d3004	 str         r3, [sp, #4]

; 329  :     pPRCMReg->ulCM_AUTOIDLE_PLL = new_value | PRCM_CM_AUTOIDLE_PLL_AUTO_54M_EN;

  00a40	e59d3004	 ldr         r3, [sp, #4]
  00a44	e38320c0	 orr         r2, r3, #0xC0
  00a48	e59f3968	 ldr         r3, [pc, #0x968]
  00a4c	e5933000	 ldr         r3, [r3]
  00a50	e2833e53	 add         r3, r3, #0x53, 28
  00a54	e5832000	 str         r2, [r3]

; 330  : 
; 331  :     //apll_96M_clock_auto_control(PRCM_APLL_ENABLE);
; 332  :     new_value = pPRCMReg->ulCM_AUTOIDLE_PLL & 0xFFFFFFF3;

  00a58	e59f3958	 ldr         r3, [pc, #0x958]
  00a5c	e5933000	 ldr         r3, [r3]
  00a60	e2833e53	 add         r3, r3, #0x53, 28
  00a64	e5932000	 ldr         r2, [r3]
  00a68	e3e0300c	 mvn         r3, #0xC
  00a6c	e0023003	 and         r3, r2, r3
  00a70	e58d3004	 str         r3, [sp, #4]

; 333  :     pPRCMReg->ulCM_AUTOIDLE_PLL = new_value | PRCM_CM_AUTOIDLE_PLL_AUTO_96M_EN;

  00a74	e59d3004	 ldr         r3, [sp, #4]
  00a78	e383200c	 orr         r2, r3, #0xC
  00a7c	e59f3934	 ldr         r3, [pc, #0x934]
  00a80	e5933000	 ldr         r3, [r3]
  00a84	e2833e53	 add         r3, r3, #0x53, 28
  00a88	e5832000	 str         r2, [r3]

; 334  : 
; 335  :     //dpll_clock_auto_control(PRCM_DPLL_ENABLE);
; 336  :     new_value = pPRCMReg->ulCM_AUTOIDLE_PLL & 0xFFFFFFFC;

  00a8c	e59f3924	 ldr         r3, [pc, #0x924]
  00a90	e5933000	 ldr         r3, [r3]
  00a94	e2833e53	 add         r3, r3, #0x53, 28
  00a98	e5932000	 ldr         r2, [r3]
  00a9c	e3e03003	 mvn         r3, #3
  00aa0	e0023003	 and         r3, r2, r3
  00aa4	e58d3004	 str         r3, [sp, #4]

; 337  :     pPRCMReg->ulCM_AUTOIDLE_PLL = new_value | PRCM_CM_AUTOIDLE_PLL_AUTO_DPLL_EN;

  00aa8	e59d3004	 ldr         r3, [sp, #4]
  00aac	e3832003	 orr         r2, r3, #3
  00ab0	e59f3900	 ldr         r3, [pc, #0x900]
  00ab4	e5933000	 ldr         r3, [r3]
  00ab8	e2833e53	 add         r3, r3, #0x53, 28
  00abc	e5832000	 str         r2, [r3]

; 338  : 
; 339  :     //setup_external_clock_control(PRCM_OFF_WHEN_RETENTION_OR_OFF); 
; 340  :     new_value = pPRCMReg->ulPRCM_CLKSRC_CTRL & 0xFFFFFFE7;

  00ac0	e59f38f0	 ldr         r3, [pc, #0x8F0]
  00ac4	e5933000	 ldr         r3, [r3]
  00ac8	e2833060	 add         r3, r3, #0x60
  00acc	e5932000	 ldr         r2, [r3]
  00ad0	e3e03018	 mvn         r3, #0x18
  00ad4	e0023003	 and         r3, r2, r3
  00ad8	e58d3004	 str         r3, [sp, #4]

; 341  :     pPRCMReg->ulPRCM_CLKSRC_CTRL = new_value | PRCM_CLKSRC_CTRL_OFF_WHEN_RETENTION_OR_OFF;

  00adc	e59d3004	 ldr         r3, [sp, #4]
  00ae0	e3832018	 orr         r2, r3, #0x18
  00ae4	e59f38cc	 ldr         r3, [pc, #0x8CC]
  00ae8	e5933000	 ldr         r3, [r3]
  00aec	e2833060	 add         r3, r3, #0x60
  00af0	e5832000	 str         r2, [r3]

; 342  : 
; 343  :     //set_system_clock_setup_time(0x0000);
; 344  :     pPRCMReg->ulPRCM_CLKSSETUP = 0;

  00af4	e59f38bc	 ldr         r3, [pc, #0x8BC]
  00af8	e5933000	 ldr         r3, [r3]
  00afc	e2832094	 add         r2, r3, #0x94
  00b00	e3a03000	 mov         r3, #0
  00b04	e5823000	 str         r3, [r2]

; 345  : 
; 346  :     //SKIPPED:setup_voltage_scaling_auto(PRCM_L1, PRCM_L1, 0x0000);
; 347  :     //SKIPPED: emulation_tools_control(PRCM_DISABLE); 
; 348  : 
; 349  :     //set_core_memory_retention_state
; 350  :     new_value = pPRCMReg->ulPM_PWSTCTRL_CORE & 0xFFFFFFC7;

  00b08	e59f38a8	 ldr         r3, [pc, #0x8A8]
  00b0c	e5933000	 ldr         r3, [r3]
  00b10	e2833e2e	 add         r3, r3, #0x2E, 28
  00b14	e5932000	 ldr         r2, [r3]
  00b18	e3e03038	 mvn         r3, #0x38
  00b1c	e0023003	 and         r3, r2, r3
  00b20	e58d3004	 str         r3, [sp, #4]

; 351  :     pPRCMReg->ulPM_PWSTCTRL_CORE = new_value | PRCM_PM_PWSTCTRL_CORE_MEM3RETSTATE_RETAIN |
; 352  :         PRCM_PM_PWSTCTRL_CORE_MEM2RETSTATE_RETAIN | PRCM_PM_PWSTCTRL_CORE_MEM1RETSTATE_RETAIN;

  00b24	e59d3004	 ldr         r3, [sp, #4]
  00b28	e3833020	 orr         r3, r3, #0x20
  00b2c	e3833010	 orr         r3, r3, #0x10
  00b30	e3832008	 orr         r2, r3, #8
  00b34	e59f387c	 ldr         r3, [pc, #0x87C]
  00b38	e5933000	 ldr         r3, [r3]
  00b3c	e2833e2e	 add         r3, r3, #0x2E, 28
  00b40	e5832000	 str         r2, [r3]

; 353  : 
; 354  :       //MPU dependant on WKUP domain
; 355  :     pPRCMReg->ulPM_WKDEP_MPU = 0x00000010;

  00b44	e59f386c	 ldr         r3, [pc, #0x86C]
  00b48	e5933000	 ldr         r3, [r3]
  00b4c	e2832f72	 add         r2, r3, #0x72, 30
  00b50	e3a03010	 mov         r3, #0x10
  00b54	e5823000	 str         r3, [r2]

; 356  :     pPRCMReg->ulPM_WKDEP_DSP = 0x00000000;

  00b58	e59f3858	 ldr         r3, [pc, #0x858]
  00b5c	e5933000	 ldr         r3, [r3]
  00b60	e2833b02	 add         r3, r3, #2, 22
  00b64	e28320c8	 add         r2, r3, #0xC8
  00b68	e3a03000	 mov         r3, #0
  00b6c	e5823000	 str         r3, [r2]

; 357  :     pPRCMReg->ulPM_WKDEP_GFX = 0x00000000;

  00b70	e59f3840	 ldr         r3, [pc, #0x840]
  00b74	e5933000	 ldr         r3, [r3]
  00b78	e2832ff2	 add         r2, r3, #0xF2, 30
  00b7c	e3a03000	 mov         r3, #0
  00b80	e5823000	 str         r3, [r2]

; 358  :     //END prepare_for_idle
; 359  : 
; 360  :     //Need to clear IRQ Status or will not enter idle.
; 361  :     pGPIO3Regs->ulGPIO_IRQSTATUS1 = 0x02000000;

  00b84	e59f3830	 ldr         r3, [pc, #0x830]
  00b88	e5933000	 ldr         r3, [r3]
  00b8c	e2832018	 add         r2, r3, #0x18
  00b90	e3a03402	 mov         r3, #2, 8
  00b94	e5823000	 str         r3, [r2]

; 362  :     pGPIO3Regs->ulGPIO_IRQSTATUS2 = 0x02000000;

  00b98	e59f381c	 ldr         r3, [pc, #0x81C]
  00b9c	e5933000	 ldr         r3, [r3]
  00ba0	e2832028	 add         r2, r3, #0x28
  00ba4	e3a03402	 mov         r3, #2, 8
  00ba8	e5823000	 str         r3, [r2]

; 363  : 
; 364  :     //enable GPIO3 interrupt
; 365  :     pGPIO3Regs->ulGPIO_IRQENABLE1 = 0x02000000;

  00bac	e59f3808	 ldr         r3, [pc, #0x808]
  00bb0	e5933000	 ldr         r3, [r3]
  00bb4	e283201c	 add         r2, r3, #0x1C
  00bb8	e3a03402	 mov         r3, #2, 8
  00bbc	e5823000	 str         r3, [r2]

; 366  : 
; 367  :     //enter_idle_mode(PRCM_CHIP, PRCM_DORMANT, PRCM_AUTO);
; 368  :     //set_powermode(PRCM_DORMANT)
; 369  :     //set_domain_powerstate(PRCM_MPU,  PRCM_RETENTION);   
; 370  :     new_value = pPRCMReg->ulPM_PWSTCTRL_MPU & 0xFFFFFFF8;

  00bc0	e59f37f0	 ldr         r3, [pc, #0x7F0]
  00bc4	e5933000	 ldr         r3, [r3]
  00bc8	e2833e1e	 add         r3, r3, #0x1E, 28
  00bcc	e5932000	 ldr         r2, [r3]
  00bd0	e3e03007	 mvn         r3, #7
  00bd4	e0023003	 and         r3, r2, r3
  00bd8	e58d3004	 str         r3, [sp, #4]

; 371  :     pPRCMReg->ulPM_PWSTCTRL_MPU = new_value | 0x00000005;

  00bdc	e59d3004	 ldr         r3, [sp, #4]
  00be0	e3832005	 orr         r2, r3, #5
  00be4	e59f37cc	 ldr         r3, [pc, #0x7CC]
  00be8	e5933000	 ldr         r3, [r3]
  00bec	e2833e1e	 add         r3, r3, #0x1E, 28
  00bf0	e5832000	 str         r2, [r3]

; 372  :     //NOTE: The current boot method is Overlay Boot rather than context restore
; 373  :     //So the processor ROM code does not excecute to be able to restore
; 374  :     //For now, we use a PRCM_RETENTION state for the MPU instead of PRCM_DORMANT
; 375  :     //which allows us to retain logic when we sleep (LOGICRETSTATE) and return here
; 376  : 
; 377  :     //set_domain_powerstate(PRCM_DSP,  PRCM_OFF);
; 378  :     pPRCMReg->ulPM_PWSTCTRL_DSP |= 0x00000003;

  00bf4	e59f37bc	 ldr         r3, [pc, #0x7BC]
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e2833e8e	 add         r3, r3, #0x8E, 28
  00c00	e5933000	 ldr         r3, [r3]
  00c04	e3832003	 orr         r2, r3, #3
  00c08	e59f37a8	 ldr         r3, [pc, #0x7A8]
  00c0c	e5933000	 ldr         r3, [r3]
  00c10	e2833e8e	 add         r3, r3, #0x8E, 28
  00c14	e5832000	 str         r2, [r3]

; 379  : 
; 380  :     //set_domain_powerstate(PRCM_GFX,  PRCM_OFF);
; 381  :     pPRCMReg->ulPM_PWSTCTRL_GFX |= 0x00000003;

  00c18	e59f3798	 ldr         r3, [pc, #0x798]
  00c1c	e5933000	 ldr         r3, [r3]
  00c20	e2833e3e	 add         r3, r3, #0x3E, 28
  00c24	e5933000	 ldr         r3, [r3]
  00c28	e3832003	 orr         r2, r3, #3
  00c2c	e59f3784	 ldr         r3, [pc, #0x784]
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e2833e3e	 add         r3, r3, #0x3E, 28
  00c38	e5832000	 str         r2, [r3]

; 382  : 
; 383  :     //set_domain_powerstate(PRCM_CORE, PRCM_RETENTION);
; 384  :     new_value = pPRCMReg->ulPM_PWSTCTRL_CORE & 0xFFFFFFFC;

  00c3c	e59f3774	 ldr         r3, [pc, #0x774]
  00c40	e5933000	 ldr         r3, [r3]
  00c44	e2833e2e	 add         r3, r3, #0x2E, 28
  00c48	e5932000	 ldr         r2, [r3]
  00c4c	e3e03003	 mvn         r3, #3
  00c50	e0023003	 and         r3, r2, r3
  00c54	e58d3004	 str         r3, [sp, #4]

; 385  :     pPRCMReg->ulPM_PWSTCTRL_CORE = new_value | 0x00000001;

  00c58	e59d3004	 ldr         r3, [sp, #4]
  00c5c	e3832001	 orr         r2, r3, #1
  00c60	e59f3750	 ldr         r3, [pc, #0x750]
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e2833e2e	 add         r3, r3, #0x2E, 28
  00c6c	e5832000	 str         r2, [r3]

; 386  :    
; 387  :     //SKIPPED: force_standby_usb();
; 388  : 
; 389  :     //sdram_self_refresh_on_idle_req(PRCM_ENABLE);
; 390  :     pSDRCRegs->ulSDRC_POWER |= 0x00000040;

  00c70	e59f3754	 ldr         r3, [pc, #0x754]
  00c74	e5933000	 ldr         r3, [r3]
  00c78	e2833070	 add         r3, r3, #0x70
  00c7c	e5933000	 ldr         r3, [r3]
  00c80	e3832040	 orr         r2, r3, #0x40
  00c84	e59f3740	 ldr         r3, [pc, #0x740]
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e2833070	 add         r3, r3, #0x70
  00c90	e5832000	 str         r2, [r3]

; 391  :     //set_smartidle_smartstandby
; 392  :     pSMSRegs->ulSMS_SYSCONFIG |= 0x00000010;

  00c94	e59f3734	 ldr         r3, [pc, #0x734]
  00c98	e5933000	 ldr         r3, [r3]
  00c9c	e2833010	 add         r3, r3, #0x10
  00ca0	e5933000	 ldr         r3, [r3]
  00ca4	e3832010	 orr         r2, r3, #0x10
  00ca8	e59f3720	 ldr         r3, [pc, #0x720]
  00cac	e5933000	 ldr         r3, [r3]
  00cb0	e2833010	 add         r3, r3, #0x10
  00cb4	e5832000	 str         r2, [r3]

; 393  :     pSDRCRegs->ulSDRC_SYSCONFIG |= 0x00000010;

  00cb8	e59f370c	 ldr         r3, [pc, #0x70C]
  00cbc	e5933000	 ldr         r3, [r3]
  00cc0	e2833010	 add         r3, r3, #0x10
  00cc4	e5933000	 ldr         r3, [r3]
  00cc8	e3832010	 orr         r2, r3, #0x10
  00ccc	e59f36f8	 ldr         r3, [pc, #0x6F8]
  00cd0	e5933000	 ldr         r3, [r3]
  00cd4	e2833010	 add         r3, r3, #0x10
  00cd8	e5832000	 str         r2, [r3]

; 394  :     pGPMCRegs->ulGPMC_SYSCONFIG |= 0x00000010;

  00cdc	e59f36e4	 ldr         r3, [pc, #0x6E4]
  00ce0	e5933000	 ldr         r3, [r3]
  00ce4	e2833010	 add         r3, r3, #0x10
  00ce8	e5933000	 ldr         r3, [r3]
  00cec	e3832010	 orr         r2, r3, #0x10
  00cf0	e59f36d0	 ldr         r3, [pc, #0x6D0]
  00cf4	e5933000	 ldr         r3, [r3]
  00cf8	e2833010	 add         r3, r3, #0x10
  00cfc	e5832000	 str         r2, [r3]

; 395  : 
; 396  :     //clock_auto_control(PRCM_CHIP, PRCM_ENABLE);
; 397  :     pPRCMReg->ulCM_CLKSTCTRL_MPU = 0x00000001;  //set AutoState for the MPU clock

  00d00	e59f36b0	 ldr         r3, [pc, #0x6B0]
  00d04	e5933000	 ldr         r3, [r3]
  00d08	e2832f52	 add         r2, r3, #0x52, 30
  00d0c	e3a03001	 mov         r3, #1
  00d10	e5823000	 str         r3, [r2]

; 398  :     pPRCMReg->ulCM_CLKSTCTRL_DSP = 0x00000101;  //set AutoState for the DSP and IVA clocks

  00d14	e59f369c	 ldr         r3, [pc, #0x69C]
  00d18	e5933000	 ldr         r3, [r3]
  00d1c	e2833b02	 add         r3, r3, #2, 22
  00d20	e2832048	 add         r2, r3, #0x48
  00d24	e3a03c01	 mov         r3, #1, 24
  00d28	e3833001	 orr         r3, r3, #1
  00d2c	e5823000	 str         r3, [r2]

; 399  :     pPRCMReg->ulCM_CLKSTCTRL_GFX = 0x00000001;  //set AutoState for the GFX clock

  00d30	e59f3680	 ldr         r3, [pc, #0x680]
  00d34	e5933000	 ldr         r3, [r3]
  00d38	e2832fd2	 add         r2, r3, #0xD2, 30
  00d3c	e3a03001	 mov         r3, #1
  00d40	e5823000	 str         r3, [r2]

; 400  :     pPRCMReg->ulCM_CLKSTCTRL_CORE = 0x00000007;  //set AutoState for the DSS, L3, and L4 clocks

  00d44	e59f366c	 ldr         r3, [pc, #0x66C]
  00d48	e5933000	 ldr         r3, [r3]
  00d4c	e2832f92	 add         r2, r3, #0x92, 30
  00d50	e3a03007	 mov         r3, #7
  00d54	e5823000	 str         r3, [r2]

; 401  : 
; 402  :     //set_domain_autoidle(PRCM_CHIP);
; 403  :     pPRCMReg->ulCM_AUTOIDLE_DSP = 0x00000002;  //set the AutoIdle for the DSP IPI interface clock

  00d58	e59f3658	 ldr         r3, [pc, #0x658]
  00d5c	e5933000	 ldr         r3, [r3]
  00d60	e2832e83	 add         r2, r3, #0x83, 28
  00d64	e3a03002	 mov         r3, #2
  00d68	e5823000	 str         r3, [r2]

; 404  :     pPRCMReg->ulCM_AUTOIDLE1_CORE = 0xFFFFFFF9;  //set AutoIdle all interface clocks in CORE

  00d6c	e59f3644	 ldr         r3, [pc, #0x644]
  00d70	e5933000	 ldr         r3, [r3]
  00d74	e2832e23	 add         r2, r3, #0x23, 28
  00d78	e3e03006	 mvn         r3, #6
  00d7c	e5823000	 str         r3, [r2]

; 405  :     pPRCMReg->ulCM_AUTOIDLE2_CORE = 0x00000007;

  00d80	e59f3630	 ldr         r3, [pc, #0x630]
  00d84	e5933000	 ldr         r3, [r3]
  00d88	e2832f8d	 add         r2, r3, #0x8D, 30
  00d8c	e3a03007	 mov         r3, #7
  00d90	e5823000	 str         r3, [r2]

; 406  :     pPRCMReg->ulCM_AUTOIDLE3_CORE = 0x00000007;

  00d94	e59f361c	 ldr         r3, [pc, #0x61C]
  00d98	e5933000	 ldr         r3, [r3]
  00d9c	e2832f8e	 add         r2, r3, #0x8E, 30
  00da0	e3a03007	 mov         r3, #7
  00da4	e5823000	 str         r3, [r2]

; 407  :     pPRCMReg->ulCM_AUTOIDLE4_CORE = 0x0000001F;

  00da8	e59f3608	 ldr         r3, [pc, #0x608]
  00dac	e5933000	 ldr         r3, [r3]
  00db0	e2832f8f	 add         r2, r3, #0x8F, 30
  00db4	e3a0301f	 mov         r3, #0x1F
  00db8	e5823000	 str         r3, [r2]

; 408  :     pPRCMReg->ulCM_AUTOIDLE_WKUP = 0x0000003F;  //set AutoIdle for all WKUP clocks

  00dbc	e59f35f4	 ldr         r3, [pc, #0x5F4]
  00dc0	e5933000	 ldr         r3, [r3]
  00dc4	e2832e43	 add         r2, r3, #0x43, 28
  00dc8	e3a0303f	 mov         r3, #0x3F
  00dcc	e5823000	 str         r3, [r2]

; 409  : 
; 410  :     pPRCMReg->ulCM_FCLKEN1_CORE,  0x00000000;

  00dd0	e59f35e0	 ldr         r3, [pc, #0x5E0]
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e2833c02	 add         r3, r3, #2, 24
  00ddc	e5933000	 ldr         r3, [r3]
  00de0	e58d304c	 str         r3, [sp, #0x4C]

; 411  :     pPRCMReg->ulCM_FCLKEN2_CORE,  0x00000000;

  00de4	e59f35cc	 ldr         r3, [pc, #0x5CC]
  00de8	e5933000	 ldr         r3, [r3]
  00dec	e2833f81	 add         r3, r3, #0x81, 30
  00df0	e5933000	 ldr         r3, [r3]
  00df4	e58d3050	 str         r3, [sp, #0x50]

; 412  : 
; 413  : 
; 414  : 
; 415  :     // **************************  BEFORE SLEEP  **********************************
; 416  :     //OUTREG16(&pCpldRegs->LED, 3);
; 417  :     
; 418  : 	//We copy the assembler sleep/wakeup routines to SRAM.
; 419  :     //These routines should be in SRAM as that's the only
; 420  :     //memory the MPU can see when it wakes up.
; 421  :     //IMPORTANT: Drivers using the SRAM should be aware that it's contents
; 422  :     //will be modified after a sleep (ie. if display driver used it as a frame buffer)
; 423  :     //Drivers should save/restore the SRAM contents when it gets the power IOCTL's D0-D4
; 424  :     suspend_func_ptr = (void*)(OMAP2420_SRAM_API_SUSPEND);

  00df8	e3a01001	 mov         r1, #1
  00dfc	e59f05fc	 ldr         r0, [pc, #0x5FC]
  00e00	eb000000	 bl          OALPAtoVA
  00e04	e58d0054	 str         r0, [sp, #0x54]
  00e08	e59d3054	 ldr         r3, [sp, #0x54]
  00e0c	e58d3000	 str         r3, [sp]

; 425  :     suspend_func_size = (UINT32)OALCPUIdle_sz - (UINT32)OALCPUIdle + 256;  //include constants

  00e10	e59f25e4	 ldr         r2, [pc, #0x5E4]
  00e14	e59f35cc	 ldr         r3, [pc, #0x5CC]
  00e18	e0423003	 sub         r3, r2, r3
  00e1c	e2833c01	 add         r3, r3, #1, 24
  00e20	e58d3010	 str         r3, [sp, #0x10]

; 426  :     memcpy(suspend_func_ptr, OALCPUIdle, suspend_func_size );

  00e24	e59d2010	 ldr         r2, [sp, #0x10]
  00e28	e59f15b8	 ldr         r1, [pc, #0x5B8]
  00e2c	e59d0000	 ldr         r0, [sp]
  00e30	eb000000	 bl          memcpy

; 427  : 
; 428  :     OALMSG(1, (L"OEMPowerOff: suspend_func_size (%d)\r\n", suspend_func_size));

  00e34	e59d1010	 ldr         r1, [sp, #0x10]
  00e38	e59f05b8	 ldr         r0, [pc, #0x5B8]
  00e3c	eb000000	 bl          NKDbgPrintfW

; 429  :     OALMSG(1, (L"OEMPowerOff: suspend_func_ptr (%x)\r\n", suspend_func_ptr));

  00e40	e59d1000	 ldr         r1, [sp]
  00e44	e59f05a8	 ldr         r0, [pc, #0x5A8]
  00e48	eb000000	 bl          NKDbgPrintfW

; 430  :     OALMSG(1, (L"OEMPowerOff: Val:suspend_func_ptr (%x)\r\n", *(int*)suspend_func_ptr));

  00e4c	e59d3000	 ldr         r3, [sp]
  00e50	e5931000	 ldr         r1, [r3]
  00e54	e59f0594	 ldr         r0, [pc, #0x594]
  00e58	eb000000	 bl          NKDbgPrintfW

; 431  :     OALMSG(1, (L"OEMPowerOff: OALCPUIdle (%x)\r\n", OALCPUIdle));

  00e5c	e59f1584	 ldr         r1, [pc, #0x584]
  00e60	e59f0584	 ldr         r0, [pc, #0x584]
  00e64	eb000000	 bl          NKDbgPrintfW

; 432  :     OALMSG(1, (L"OEMPowerOff: Val:OALCPUIdle (%x)\r\n", *(int*)OALCPUIdle));

  00e68	e59f3578	 ldr         r3, [pc, #0x578]
  00e6c	e5931000	 ldr         r1, [r3]
  00e70	e59f056c	 ldr         r0, [pc, #0x56C]
  00e74	eb000000	 bl          NKDbgPrintfW

; 433  : 
; 434  :     //IMPORTANT: Need to Clear TLB, I and D cache before a jump to cached SRAM
; 435  :     OALClearDTLB();

  00e78	eb000000	 bl          OALClearDTLB

; 436  :     OALClearITLB();

  00e7c	eb000000	 bl          OALClearITLB

; 437  :     OALFlushDCache();

  00e80	eb000000	 bl          OALFlushDCache

; 438  :     OALFlushICache();

  00e84	eb000000	 bl          OALFlushICache

; 439  :     //Call routines to save context and execute WFI (wait for interrupt) instruction
; 440  :     (*suspend_func_ptr)();

  00e88	e59d3000	 ldr         r3, [sp]
  00e8c	e1a0e00f	 mov         lr, pc
  00e90	e12fff13	 bx          r3

; 441  : 
; 442  :     //OUTREG16(&pCpldRegs->LED, 4);
; 443  :     // **************************  AFTER SLEEP  **********************************
; 444  : 
; 445  :     OALMSG(1, (L"OEMPowerOff: Back from sleep\r\n"));

  00e94	e59f0544	 ldr         r0, [pc, #0x544]
  00e98	eb000000	 bl          NKDbgPrintfW

; 446  : 
; 447  :     // Clear WKUP domain reset status registers
; 448  :     pPRCMReg->ulRM_RSTST_WKUP = 0x0000007B;

  00e9c	e59f3514	 ldr         r3, [pc, #0x514]
  00ea0	e5933000	 ldr         r3, [r3]
  00ea4	e2833b01	 add         r3, r3, #1, 22
  00ea8	e2832058	 add         r2, r3, #0x58
  00eac	e3a0307b	 mov         r3, #0x7B
  00eb0	e5823000	 str         r3, [r2]

; 449  :     pPRCMReg->ulRM_RSTST_MPU  = 0x0000000F; 

  00eb4	e59f34fc	 ldr         r3, [pc, #0x4FC]
  00eb8	e5933000	 ldr         r3, [r3]
  00ebc	e2832f56	 add         r2, r3, #0x56, 30
  00ec0	e3a0300f	 mov         r3, #0xF
  00ec4	e5823000	 str         r3, [r2]

; 450  :     //Clear CORE domain wakeup status registers
; 451  :     pPRCMReg->ulPM_WKST1_CORE = 0x04667FF8;

  00ec8	e59f34e8	 ldr         r3, [pc, #0x4E8]
  00ecc	e5933000	 ldr         r3, [r3]
  00ed0	e2832e2b	 add         r2, r3, #0x2B, 28
  00ed4	e59f3500	 ldr         r3, [pc, #0x500]
  00ed8	e5823000	 str         r3, [r2]

; 452  :     pPRCMReg->ulPM_WKST2_CORE = 0x00000005;

  00edc	e59f34d4	 ldr         r3, [pc, #0x4D4]
  00ee0	e5933000	 ldr         r3, [r3]
  00ee4	e2832fad	 add         r2, r3, #0xAD, 30
  00ee8	e3a03005	 mov         r3, #5
  00eec	e5823000	 str         r3, [r2]

; 453  : 
; 454  :     //Check for wake event
; 455  :     OALMSG(1, (L"OEMPowerOff: pPRCMReg->ulPM_WKST_WKUP (%x)\r\n", pPRCMReg->ulPM_WKST_WKUP ));

  00ef0	e59f34c0	 ldr         r3, [pc, #0x4C0]
  00ef4	e5933000	 ldr         r3, [r3]
  00ef8	e2833e4b	 add         r3, r3, #0x4B, 28
  00efc	e5931000	 ldr         r1, [r3]
  00f00	e59f04d0	 ldr         r0, [pc, #0x4D0]
  00f04	eb000000	 bl          NKDbgPrintfW

; 456  :     if(4 == pPRCMReg->ulPM_WKST_WKUP)

  00f08	e59f34a8	 ldr         r3, [pc, #0x4A8]
  00f0c	e5933000	 ldr         r3, [r3]
  00f10	e2833e4b	 add         r3, r3, #0x4B, 28
  00f14	e5933000	 ldr         r3, [r3]
  00f18	e3530004	 cmp         r3, #4
  00f1c	1a000008	 bne         |$LN2@OEMPowerOf|

; 457  :     {
; 458  :         //GPIO Wake up
; 459  :         g_oalWakeSource = SYSWAKE_POWER_BUTTON;

  00f20	e59f24ac	 ldr         r2, [pc, #0x4AC]
  00f24	e3a03b01	 mov         r3, #1, 22
  00f28	e3833003	 orr         r3, r3, #3
  00f2c	e5823000	 str         r3, [r2]

; 460  :         OUTREG32(&pPRCMReg->ulPM_WKST_WKUP, 0x00000005); //Clear MPU interrupt status 

  00f30	e59f3480	 ldr         r3, [pc, #0x480]
  00f34	e5933000	 ldr         r3, [r3]
  00f38	e2832e4b	 add         r2, r3, #0x4B, 28
  00f3c	e3a03005	 mov         r3, #5
  00f40	e5823000	 str         r3, [r2]
  00f44		 |$LN2@OEMPowerOf|

; 461  :     }
; 462  : 
; 463  :     //Restore SDRC regs used
; 464  :     pSDRCRegs->ulSDRC_POWER = ulaRegisterContext[ulSDRC_POWER];

  00f44	e59f3480	 ldr         r3, [pc, #0x480]
  00f48	e5933000	 ldr         r3, [r3]
  00f4c	e2832070	 add         r2, r3, #0x70
  00f50	e59f3458	 ldr         r3, [pc, #0x458]
  00f54	e5933074	 ldr         r3, [r3, #0x74]
  00f58	e5823000	 str         r3, [r2]

; 465  :     pSMSRegs->ulSMS_SYSCONFIG = ulaRegisterContext[ulSMS_SYSCONFIG];

  00f5c	e59f346c	 ldr         r3, [pc, #0x46C]
  00f60	e5933000	 ldr         r3, [r3]
  00f64	e2832010	 add         r2, r3, #0x10
  00f68	e59f3440	 ldr         r3, [pc, #0x440]
  00f6c	e5933078	 ldr         r3, [r3, #0x78]
  00f70	e5823000	 str         r3, [r2]

; 466  :     pSDRCRegs->ulSDRC_SYSCONFIG = ulaRegisterContext[ulSDRC_SYSCONFIG];

  00f74	e59f3450	 ldr         r3, [pc, #0x450]
  00f78	e5933000	 ldr         r3, [r3]
  00f7c	e2832010	 add         r2, r3, #0x10
  00f80	e59f3428	 ldr         r3, [pc, #0x428]
  00f84	e593307c	 ldr         r3, [r3, #0x7C]
  00f88	e5823000	 str         r3, [r2]

; 467  :     pGPMCRegs->ulGPMC_SYSCONFIG = ulaRegisterContext[ulGPMC_SYSCONFIG];

  00f8c	e59f3434	 ldr         r3, [pc, #0x434]
  00f90	e5933000	 ldr         r3, [r3]
  00f94	e2832010	 add         r2, r3, #0x10
  00f98	e59f3410	 ldr         r3, [pc, #0x410]
  00f9c	e5933080	 ldr         r3, [r3, #0x80]
  00fa0	e5823000	 str         r3, [r2]

; 468  : 
; 469  :     //Restore Clocks
; 470  :     pPRCMReg->ulCM_FCLKEN_WKUP = ulaRegisterContext[ulCM_FCLKEN_WKUP];

  00fa4	e59f340c	 ldr         r3, [pc, #0x40C]
  00fa8	e5933000	 ldr         r3, [r3]
  00fac	e2832b01	 add         r2, r3, #1, 22
  00fb0	e59f33f8	 ldr         r3, [pc, #0x3F8]
  00fb4	e593300c	 ldr         r3, [r3, #0xC]
  00fb8	e5823000	 str         r3, [r2]

; 471  :     pPRCMReg->ulCM_ICLKEN_WKUP = ulaRegisterContext[ulCM_ICLKEN_WKUP];

  00fbc	e59f33f4	 ldr         r3, [pc, #0x3F4]
  00fc0	e5933000	 ldr         r3, [r3]
  00fc4	e2832e41	 add         r2, r3, #0x41, 28
  00fc8	e59f33e0	 ldr         r3, [pc, #0x3E0]
  00fcc	e5933010	 ldr         r3, [r3, #0x10]
  00fd0	e5823000	 str         r3, [r2]

; 472  :     pPRCMReg->ulCM_CLKSTCTRL_MPU = ulaRegisterContext[ulCM_CLKSTCTRL_MPU];

  00fd4	e59f33dc	 ldr         r3, [pc, #0x3DC]
  00fd8	e5933000	 ldr         r3, [r3]
  00fdc	e2832f52	 add         r2, r3, #0x52, 30
  00fe0	e59f33c8	 ldr         r3, [pc, #0x3C8]
  00fe4	e5933084	 ldr         r3, [r3, #0x84]
  00fe8	e5823000	 str         r3, [r2]

; 473  :     pPRCMReg->ulCM_CLKSTCTRL_DSP = ulaRegisterContext[ulCM_CLKSTCTRL_DSP];

  00fec	e59f33c4	 ldr         r3, [pc, #0x3C4]
  00ff0	e5933000	 ldr         r3, [r3]
  00ff4	e2833b02	 add         r3, r3, #2, 22
  00ff8	e2832048	 add         r2, r3, #0x48
  00ffc	e59f33ac	 ldr         r3, [pc, #0x3AC]
  01000	e5933088	 ldr         r3, [r3, #0x88]
  01004	e5823000	 str         r3, [r2]

; 474  :     pPRCMReg->ulCM_CLKSTCTRL_GFX = ulaRegisterContext[ulCM_CLKSTCTRL_GFX];

  01008	e59f33a8	 ldr         r3, [pc, #0x3A8]
  0100c	e5933000	 ldr         r3, [r3]
  01010	e2832fd2	 add         r2, r3, #0xD2, 30
  01014	e59f3394	 ldr         r3, [pc, #0x394]
  01018	e593308c	 ldr         r3, [r3, #0x8C]
  0101c	e5823000	 str         r3, [r2]

; 475  :     pPRCMReg->ulCM_CLKSTCTRL_CORE = ulaRegisterContext[ulCM_CLKSTCTRL_CORE];

  01020	e59f3390	 ldr         r3, [pc, #0x390]
  01024	e5933000	 ldr         r3, [r3]
  01028	e2832f92	 add         r2, r3, #0x92, 30
  0102c	e59f337c	 ldr         r3, [pc, #0x37C]
  01030	e5933090	 ldr         r3, [r3, #0x90]
  01034	e5823000	 str         r3, [r2]

; 476  :     pPRCMReg->ulCM_AUTOIDLE_DSP = ulaRegisterContext[ulCM_AUTOIDLE_DSP];

  01038	e59f3378	 ldr         r3, [pc, #0x378]
  0103c	e5933000	 ldr         r3, [r3]
  01040	e2832e83	 add         r2, r3, #0x83, 28
  01044	e59f3364	 ldr         r3, [pc, #0x364]
  01048	e5933094	 ldr         r3, [r3, #0x94]
  0104c	e5823000	 str         r3, [r2]

; 477  :     pPRCMReg->ulCM_AUTOIDLE1_CORE = ulaRegisterContext[ulCM_AUTOIDLE1_CORE];

  01050	e59f3360	 ldr         r3, [pc, #0x360]
  01054	e5933000	 ldr         r3, [r3]
  01058	e2832e23	 add         r2, r3, #0x23, 28
  0105c	e59f334c	 ldr         r3, [pc, #0x34C]
  01060	e5933098	 ldr         r3, [r3, #0x98]
  01064	e5823000	 str         r3, [r2]

; 478  :     pPRCMReg->ulCM_AUTOIDLE2_CORE = ulaRegisterContext[ulCM_AUTOIDLE2_CORE];

  01068	e59f3348	 ldr         r3, [pc, #0x348]
  0106c	e5933000	 ldr         r3, [r3]
  01070	e2832f8d	 add         r2, r3, #0x8D, 30
  01074	e59f3334	 ldr         r3, [pc, #0x334]
  01078	e593309c	 ldr         r3, [r3, #0x9C]
  0107c	e5823000	 str         r3, [r2]

; 479  :     pPRCMReg->ulCM_AUTOIDLE3_CORE = ulaRegisterContext[ulCM_AUTOIDLE3_CORE];

  01080	e59f3330	 ldr         r3, [pc, #0x330]
  01084	e5933000	 ldr         r3, [r3]
  01088	e2832f8e	 add         r2, r3, #0x8E, 30
  0108c	e59f331c	 ldr         r3, [pc, #0x31C]
  01090	e59330a0	 ldr         r3, [r3, #0xA0]
  01094	e5823000	 str         r3, [r2]

; 480  :     pPRCMReg->ulCM_AUTOIDLE4_CORE = ulaRegisterContext[ulCM_AUTOIDLE4_CORE];

  01098	e59f3318	 ldr         r3, [pc, #0x318]
  0109c	e5933000	 ldr         r3, [r3]
  010a0	e2832f8f	 add         r2, r3, #0x8F, 30
  010a4	e59f3304	 ldr         r3, [pc, #0x304]
  010a8	e59330a4	 ldr         r3, [r3, #0xA4]
  010ac	e5823000	 str         r3, [r2]

; 481  :     pPRCMReg->ulCM_AUTOIDLE_WKUP = ulaRegisterContext[ulCM_AUTOIDLE_WKUP];

  010b0	e59f3300	 ldr         r3, [pc, #0x300]
  010b4	e5933000	 ldr         r3, [r3]
  010b8	e2832e43	 add         r2, r3, #0x43, 28
  010bc	e59f32ec	 ldr         r3, [pc, #0x2EC]
  010c0	e59330a8	 ldr         r3, [r3, #0xA8]
  010c4	e5823000	 str         r3, [r2]

; 482  :     pPRCMReg->ulCM_FCLKEN1_CORE = ulaRegisterContext[ulCM_FCLKEN1_CORE];

  010c8	e59f32e8	 ldr         r3, [pc, #0x2E8]
  010cc	e5933000	 ldr         r3, [r3]
  010d0	e2832c02	 add         r2, r3, #2, 24
  010d4	e59f32d4	 ldr         r3, [pc, #0x2D4]
  010d8	e59330ac	 ldr         r3, [r3, #0xAC]
  010dc	e5823000	 str         r3, [r2]

; 483  :     pPRCMReg->ulCM_FCLKEN2_CORE = ulaRegisterContext[ulCM_FCLKEN2_CORE];

  010e0	e59f32d0	 ldr         r3, [pc, #0x2D0]
  010e4	e5933000	 ldr         r3, [r3]
  010e8	e2832f81	 add         r2, r3, #0x81, 30
  010ec	e59f32bc	 ldr         r3, [pc, #0x2BC]
  010f0	e59330b0	 ldr         r3, [r3, #0xB0]
  010f4	e5823000	 str         r3, [r2]

; 484  : 
; 485  :     //Restore GPIO and wake regs
; 486  :     pGPIO1Regs->ulGPIO_DATAOUT = ulaRegisterContext[ulGPIO_DATAOUT];

  010f8	e59f32c4	 ldr         r3, [pc, #0x2C4]
  010fc	e5933000	 ldr         r3, [r3]
  01100	e283203c	 add         r2, r3, #0x3C
  01104	e59f32a4	 ldr         r3, [pc, #0x2A4]
  01108	e5933014	 ldr         r3, [r3, #0x14]
  0110c	e5823000	 str         r3, [r2]

; 487  :     pGPIO1Regs->ulGPIO_OE = ulaRegisterContext[ulGPIO1_OE];

  01110	e59f32ac	 ldr         r3, [pc, #0x2AC]
  01114	e5933000	 ldr         r3, [r3]
  01118	e2832034	 add         r2, r3, #0x34
  0111c	e59f328c	 ldr         r3, [pc, #0x28C]
  01120	e5933018	 ldr         r3, [r3, #0x18]
  01124	e5823000	 str         r3, [r2]

; 488  :     pPadConfRegs->ulPADCONF_UART1_RX = ulaRegisterContext[ulPADCONF_UART1_RX];

  01128	e59f3290	 ldr         r3, [pc, #0x290]
  0112c	e5933000	 ldr         r3, [r3]
  01130	e2832098	 add         r2, r3, #0x98
  01134	e59f3274	 ldr         r3, [pc, #0x274]
  01138	e593301c	 ldr         r3, [r3, #0x1C]
  0113c	e5823000	 str         r3, [r2]

; 489  :     pGPIO3Regs->ulGPIO_OE = ulaRegisterContext[ulGPIO3_OE];

  01140	e59f3274	 ldr         r3, [pc, #0x274]
  01144	e5933000	 ldr         r3, [r3]
  01148	e2832034	 add         r2, r3, #0x34
  0114c	e59f325c	 ldr         r3, [pc, #0x25C]
  01150	e5933020	 ldr         r3, [r3, #0x20]
  01154	e5823000	 str         r3, [r2]

; 490  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 = ulaRegisterContext[ulPADCONF_SPI1_NCS2];

  01158	e59f3260	 ldr         r3, [pc, #0x260]
  0115c	e5933000	 ldr         r3, [r3]
  01160	e28320d4	 add         r2, r3, #0xD4
  01164	e59f3244	 ldr         r3, [pc, #0x244]
  01168	e5933024	 ldr         r3, [r3, #0x24]
  0116c	e5823000	 str         r3, [r2]

; 491  :     pPRCMReg->ulPM_WKEN_WKUP = ulaRegisterContext[ulPM_WKEN_WKUP];

  01170	e59f3240	 ldr         r3, [pc, #0x240]
  01174	e5933000	 ldr         r3, [r3]
  01178	e2832e4a	 add         r2, r3, #0x4A, 28
  0117c	e59f322c	 ldr         r3, [pc, #0x22C]
  01180	e5933028	 ldr         r3, [r3, #0x28]
  01184	e5823000	 str         r3, [r2]

; 492  :     pGPIO3Regs->ulGPIO_FALLINGDETECT = ulaRegisterContext[ulGPIO_FALLINGDETECT];

  01188	e59f322c	 ldr         r3, [pc, #0x22C]
  0118c	e5933000	 ldr         r3, [r3]
  01190	e283204c	 add         r2, r3, #0x4C
  01194	e59f3214	 ldr         r3, [pc, #0x214]
  01198	e593302c	 ldr         r3, [r3, #0x2C]
  0119c	e5823000	 str         r3, [r2]

; 493  :     pGPIO3Regs->ulGPIO_SYSCONFIG = ulaRegisterContext[ulGPIO_SYSCONFIG];

  011a0	e59f3214	 ldr         r3, [pc, #0x214]
  011a4	e5933000	 ldr         r3, [r3]
  011a8	e2832010	 add         r2, r3, #0x10
  011ac	e59f31fc	 ldr         r3, [pc, #0x1FC]
  011b0	e5933030	 ldr         r3, [r3, #0x30]
  011b4	e5823000	 str         r3, [r2]

; 494  :     pGPIO3Regs->ulGPIO_WAKEUPENABLE = ulaRegisterContext[ulGPIO_WAKEUPENABLE];

  011b8	e59f31fc	 ldr         r3, [pc, #0x1FC]
  011bc	e5933000	 ldr         r3, [r3]
  011c0	e2832020	 add         r2, r3, #0x20
  011c4	e59f31e4	 ldr         r3, [pc, #0x1E4]
  011c8	e5933034	 ldr         r3, [r3, #0x34]
  011cc	e5823000	 str         r3, [r2]

; 495  :     pGPIO3Regs->ulGPIO_DEBOUNCINGTIME = ulaRegisterContext[ulGPIO_DEBOUNCINGTIME];

  011d0	e59f31e4	 ldr         r3, [pc, #0x1E4]
  011d4	e5933000	 ldr         r3, [r3]
  011d8	e2832054	 add         r2, r3, #0x54
  011dc	e59f31cc	 ldr         r3, [pc, #0x1CC]
  011e0	e5933038	 ldr         r3, [r3, #0x38]
  011e4	e5823000	 str         r3, [r2]

; 496  :     pGPIO3Regs->ulGPIO_DEBOUNCENABLE = ulaRegisterContext[ulGPIO_DEBOUNCENABLE];

  011e8	e59f31cc	 ldr         r3, [pc, #0x1CC]
  011ec	e5933000	 ldr         r3, [r3]
  011f0	e2832050	 add         r2, r3, #0x50
  011f4	e59f31b4	 ldr         r3, [pc, #0x1B4]
  011f8	e593303c	 ldr         r3, [r3, #0x3C]
  011fc	e5823000	 str         r3, [r2]

; 497  :     pPRCMReg->ulPM_WKEN1_CORE = ulaRegisterContext[ulPM_WKEN1_CORE];

  01200	e59f31b0	 ldr         r3, [pc, #0x1B0]
  01204	e5933000	 ldr         r3, [r3]
  01208	e2832e2a	 add         r2, r3, #0x2A, 28
  0120c	e59f319c	 ldr         r3, [pc, #0x19C]
  01210	e5933040	 ldr         r3, [r3, #0x40]
  01214	e5823000	 str         r3, [r2]

; 498  :     pPRCMReg->ulPM_WKEN2_CORE = ulaRegisterContext[ulPM_WKEN2_CORE];

  01218	e59f3198	 ldr         r3, [pc, #0x198]
  0121c	e5933000	 ldr         r3, [r3]
  01220	e2832fa9	 add         r2, r3, #0xA9, 30
  01224	e59f3184	 ldr         r3, [pc, #0x184]
  01228	e5933044	 ldr         r3, [r3, #0x44]
  0122c	e5823000	 str         r3, [r2]

; 499  :     pPRCMReg->ulCM_AUTOIDLE_PLL = ulaRegisterContext[ulCM_AUTOIDLE_PLL];

  01230	e59f3180	 ldr         r3, [pc, #0x180]
  01234	e5933000	 ldr         r3, [r3]
  01238	e2832e53	 add         r2, r3, #0x53, 28
  0123c	e59f316c	 ldr         r3, [pc, #0x16C]
  01240	e5933048	 ldr         r3, [r3, #0x48]
  01244	e5823000	 str         r3, [r2]

; 500  :     pPRCMReg->ulPRCM_CLKSRC_CTRL = ulaRegisterContext[ulPRCM_CLKSRC_CTRL];

  01248	e59f3168	 ldr         r3, [pc, #0x168]
  0124c	e5933000	 ldr         r3, [r3]
  01250	e2832060	 add         r2, r3, #0x60
  01254	e59f3154	 ldr         r3, [pc, #0x154]
  01258	e593304c	 ldr         r3, [r3, #0x4C]
  0125c	e5823000	 str         r3, [r2]

; 501  :     pPRCMReg->ulPRCM_CLKSSETUP = ulaRegisterContext[ulPRCM_CLKSSETUP];

  01260	e59f3150	 ldr         r3, [pc, #0x150]
  01264	e5933000	 ldr         r3, [r3]
  01268	e2832094	 add         r2, r3, #0x94
  0126c	e59f313c	 ldr         r3, [pc, #0x13C]
  01270	e5933050	 ldr         r3, [r3, #0x50]
  01274	e5823000	 str         r3, [r2]

; 502  :     pPRCMReg->ulPM_PWSTCTRL_CORE = ulaRegisterContext[ulPM_PWSTCTRL_CORE];

  01278	e59f3138	 ldr         r3, [pc, #0x138]
  0127c	e5933000	 ldr         r3, [r3]
  01280	e2832e2e	 add         r2, r3, #0x2E, 28
  01284	e59f3124	 ldr         r3, [pc, #0x124]
  01288	e5933054	 ldr         r3, [r3, #0x54]
  0128c	e5823000	 str         r3, [r2]

; 503  :     pPRCMReg->ulPM_WKDEP_MPU = ulaRegisterContext[ulPM_WKDEP_MPU];

  01290	e59f3120	 ldr         r3, [pc, #0x120]
  01294	e5933000	 ldr         r3, [r3]
  01298	e2832f72	 add         r2, r3, #0x72, 30
  0129c	e59f310c	 ldr         r3, [pc, #0x10C]
  012a0	e5933058	 ldr         r3, [r3, #0x58]
  012a4	e5823000	 str         r3, [r2]

; 504  :     pPRCMReg->ulPM_WKDEP_DSP = ulaRegisterContext[ulPM_WKDEP_DSP];

  012a8	e59f3108	 ldr         r3, [pc, #0x108]
  012ac	e5933000	 ldr         r3, [r3]
  012b0	e2833b02	 add         r3, r3, #2, 22
  012b4	e28320c8	 add         r2, r3, #0xC8
  012b8	e59f30f0	 ldr         r3, [pc, #0xF0]
  012bc	e593305c	 ldr         r3, [r3, #0x5C]
  012c0	e5823000	 str         r3, [r2]

; 505  :     pPRCMReg->ulPM_WKDEP_GFX = ulaRegisterContext[ulPM_WKDEP_GFX];

  012c4	e59f30ec	 ldr         r3, [pc, #0xEC]
  012c8	e5933000	 ldr         r3, [r3]
  012cc	e2832ff2	 add         r2, r3, #0xF2, 30
  012d0	e59f30d8	 ldr         r3, [pc, #0xD8]
  012d4	e5933060	 ldr         r3, [r3, #0x60]
  012d8	e5823000	 str         r3, [r2]

; 506  :     pGPIO3Regs->ulGPIO_IRQENABLE1 = ulaRegisterContext[ulGPIO_IRQENABLE1];

  012dc	e59f30d8	 ldr         r3, [pc, #0xD8]
  012e0	e5933000	 ldr         r3, [r3]
  012e4	e283201c	 add         r2, r3, #0x1C
  012e8	e59f30c0	 ldr         r3, [pc, #0xC0]
  012ec	e5933064	 ldr         r3, [r3, #0x64]
  012f0	e5823000	 str         r3, [r2]

; 507  : 
; 508  :     //Restore domain states
; 509  :     pPRCMReg->ulPM_PWSTCTRL_MPU = ulaRegisterContext[ulPM_PWSTCTRL_MPU];

  012f4	e59f30bc	 ldr         r3, [pc, #0xBC]
  012f8	e5933000	 ldr         r3, [r3]
  012fc	e2832e1e	 add         r2, r3, #0x1E, 28
  01300	e59f30a8	 ldr         r3, [pc, #0xA8]
  01304	e5933068	 ldr         r3, [r3, #0x68]
  01308	e5823000	 str         r3, [r2]

; 510  :     pPRCMReg->ulPM_PWSTCTRL_DSP = ulaRegisterContext[ulPM_PWSTCTRL_DSP];

  0130c	e59f30a4	 ldr         r3, [pc, #0xA4]
  01310	e5933000	 ldr         r3, [r3]
  01314	e2832e8e	 add         r2, r3, #0x8E, 28
  01318	e59f3090	 ldr         r3, [pc, #0x90]
  0131c	e593306c	 ldr         r3, [r3, #0x6C]
  01320	e5823000	 str         r3, [r2]

; 511  :     pPRCMReg->ulPM_PWSTCTRL_GFX = ulaRegisterContext[ulPM_PWSTCTRL_GFX];

  01324	e59f308c	 ldr         r3, [pc, #0x8C]
  01328	e5933000	 ldr         r3, [r3]
  0132c	e2832e3e	 add         r2, r3, #0x3E, 28
  01330	e59f3078	 ldr         r3, [pc, #0x78]
  01334	e5933070	 ldr         r3, [r3, #0x70]
  01338	e5823000	 str         r3, [r2]

; 512  : 
; 513  :     // Reinitialize KITL
; 514  :     if ((pArgs->flags & OAL_KITL_FLAGS_ENABLED) != 0)

  0133c	e59d3008	 ldr         r3, [sp, #8]
  01340	e5933000	 ldr         r3, [r3]
  01344	e3130001	 tst         r3, #1
  01348	0a000000	 beq         |$LN1@OEMPowerOf|

; 515  :     {
; 516  :         OALKitlPowerOn();

  0134c	eb000000	 bl          OALKitlPowerOn
  01350		 |$LN1@OEMPowerOf|

; 517  :     }
; 518  : 
; 519  :     //Restore interrupt masks
; 520  :     pIntcRegs->ulINTC_MIR0 = ulaRegisterContext[ulINTC_MIR0];

  01350	e59f305c	 ldr         r3, [pc, #0x5C]
  01354	e5933000	 ldr         r3, [r3]
  01358	e2832084	 add         r2, r3, #0x84
  0135c	e59f304c	 ldr         r3, [pc, #0x4C]
  01360	e5933000	 ldr         r3, [r3]
  01364	e5823000	 str         r3, [r2]

; 521  :     pIntcRegs->ulINTC_MIR1 = ulaRegisterContext[ulINTC_MIR1];

  01368	e59f3044	 ldr         r3, [pc, #0x44]
  0136c	e5933000	 ldr         r3, [r3]
  01370	e28320a4	 add         r2, r3, #0xA4
  01374	e59f3034	 ldr         r3, [pc, #0x34]
  01378	e5933004	 ldr         r3, [r3, #4]
  0137c	e5823000	 str         r3, [r2]

; 522  :     pIntcRegs->ulINTC_MIR2 = ulaRegisterContext[ulINTC_MIR2];

  01380	e59f302c	 ldr         r3, [pc, #0x2C]
  01384	e5933000	 ldr         r3, [r3]
  01388	e28320c4	 add         r2, r3, #0xC4
  0138c	e59f301c	 ldr         r3, [pc, #0x1C]
  01390	e5933008	 ldr         r3, [r3, #8]
  01394	e5823000	 str         r3, [r2]

; 523  : 
; 524  :     OALMSG(1, (L"-OEMPowerOff\r\n"));

  01398	e59f000c	 ldr         r0, [pc, #0xC]
  0139c	eb000000	 bl          NKDbgPrintfW

; 525  : }

  013a0	e28dd058	 add         sp, sp, #0x58
  013a4	e49de004	 ldr         lr, [sp], #4
  013a8	e12fff1e	 bx          lr
  013ac		 |$LN9@OEMPowerOf|
  013ac		 |$LN10@OEMPowerOf|
  013ac	00000000	 DCD         |??_C@_1BO@JBBKKIFK@?$AA?9?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  013b0		 |$LN11@OEMPowerOf|
  013b0	00000000	 DCD         |ulaRegisterContext|
  013b4		 |$LN12@OEMPowerOf|
  013b4	00000000	 DCD         |?pIntcRegs@?1??OEMPowerOff@@9@9|
  013b8		 |$LN13@OEMPowerOf|
  013b8	00000000	 DCD         |?pPRCMReg@?1??OEMPowerOff@@9@9|
  013bc		 |$LN14@OEMPowerOf|
  013bc	00000000	 DCD         |?pGPIO3Regs@?1??OEMPowerOff@@9@9|
  013c0		 |$LN15@OEMPowerOf|
  013c0	00000000	 DCD         |?pPadConfRegs@?1??OEMPowerOff@@9@9|
  013c4		 |$LN16@OEMPowerOf|
  013c4	00000000	 DCD         |?pGPIO1Regs@?1??OEMPowerOff@@9@9|
  013c8		 |$LN17@OEMPowerOf|
  013c8	00000000	 DCD         |?pGPMCRegs@?1??OEMPowerOff@@9@9|
  013cc		 |$LN18@OEMPowerOf|
  013cc	00000000	 DCD         |?pSDRCRegs@?1??OEMPowerOff@@9@9|
  013d0		 |$LN19@OEMPowerOf|
  013d0	00000000	 DCD         |?pSMSRegs@?1??OEMPowerOff@@9@9|
  013d4		 |$LN20@OEMPowerOf|
  013d4	00000000	 DCD         |g_oalWakeSource|
  013d8		 |$LN21@OEMPowerOf|
  013d8	00000000	 DCD         |??_C@_1FK@CMMOMPH@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAp?$AAP?$AAR?$AAC?$AAM?$AAR?$AAe?$AAg?$AA?9?$AA?$DO?$AAu?$AAl?$AAP?$AAM?$AA_?$AAW?$AAK?$AAS?$AAT@|
  013dc		 |$LN22@OEMPowerOf|
  013dc	04667ff8	 DCD         0x4667ff8
  013e0		 |$LN23@OEMPowerOf|
  013e0	00000000	 DCD         |??_C@_1DO@LPOMOEEB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAs?$AAl?$AAe?$AAe?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  013e4		 |$LN24@OEMPowerOf|
  013e4	00000000	 DCD         |??_C@_1EG@GJBNLJCO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ@|
  013e8		 |$LN25@OEMPowerOf|
  013e8	00000000	 DCD         |OALCPUIdle|
  013ec		 |$LN26@OEMPowerOf|
  013ec	00000000	 DCD         |??_C@_1DO@KHIJKAFF@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  013f0		 |$LN27@OEMPowerOf|
  013f0	00000000	 DCD         |??_C@_1FC@MBKDOABO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt@|
  013f4		 |$LN28@OEMPowerOf|
  013f4	00000000	 DCD         |??_C@_1EK@PJIFMPOD@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt?$AAr?$AA?5?$AA?$CI?$AA?$CF@|
  013f8		 |$LN29@OEMPowerOf|
  013f8	00000000	 DCD         |??_C@_1EM@LMPKPHIB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI@|
  013fc		 |$LN30@OEMPowerOf|
  013fc	00000000	 DCD         |OALCPUIdle_sz|
  01400		 |$LN31@OEMPowerOf|
  01400	4020f800	 DCD         0x4020f800
  01404		 |$M45734|

			 ENDP  ; |OEMPowerOff|

	EXPORT	|??_C@_1DA@CNMCBAAE@?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAP?$AAr?$AAe?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalPresuspend|

  00008			 AREA	 |.pdata|, PDATA
|$T45785| DCD	|$LN5@OALIoCtlHa|
	DCD	0x40000d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CNMCBAAE@?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAP?$AAr?$AAe?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01404			 AREA	 |.text|, CODE, ARM

  01404		 |OALIoCtlHalPresuspend| PROC

; 538  : {

  01404		 |$LN5@OALIoCtlHa|
  01404	e1a0c00d	 mov         r12, sp
  01408	e92d000f	 stmdb       sp!, {r0 - r3}
  0140c	e92d5000	 stmdb       sp!, {r12, lr}
  01410	e24dd004	 sub         sp, sp, #4
  01414		 |$M45782|

; 539  : 	OALMSG(1, (L"OALIoCtlHalPresuspend\r\n"));

  01414	e59f0018	 ldr         r0, [pc, #0x18]
  01418	eb000000	 bl          NKDbgPrintfW

; 540  :     return TRUE;

  0141c	e3a03001	 mov         r3, #1
  01420	e58d3000	 str         r3, [sp]

; 541  : }

  01424	e59d0000	 ldr         r0, [sp]
  01428	e28dd004	 add         sp, sp, #4
  0142c	e89d6000	 ldmia       sp, {sp, lr}
  01430	e12fff1e	 bx          lr
  01434		 |$LN6@OALIoCtlHa|
  01434		 |$LN7@OALIoCtlHa|
  01434	00000000	 DCD         |??_C@_1DA@CNMCBAAE@?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAP?$AAr?$AAe?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01438		 |$M45783|

			 ENDP  ; |OALIoCtlHalPresuspend|

	END
