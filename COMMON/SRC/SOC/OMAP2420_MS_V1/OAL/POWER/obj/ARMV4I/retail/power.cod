; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|ulaRegisterContext|, 0xb4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMPowerOff|
	EXPORT	|??_C@_1BO@JBBKKIFK@?$AA?9?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@LMPKPHIB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@PJIFMPOD@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt?$AAr?$AA?5?$AA?$CI?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@MBKDOABO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@KHIJKAFF@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@GJBNLJCO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@LPOMOEEB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAs?$AAl?$AAe?$AAe?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@CMMOMPH@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAp?$AAP?$AAR?$AAC?$AAM?$AAR?$AAe?$AAg?$AA?9?$AA?$DO?$AAu?$AAl?$AAP?$AAM?$AA_?$AAW?$AAK?$AAS?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@GPINFMBJ@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAK?$AAI?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@BIFIOCGK@?$AA?$CL?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@BEFEDDKA@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAI?$AAD?$AAC?$AAO?$AAD?$AAE?$AA_?$AAr?$AAe?$AAg?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALKitlPowerOn|
	IMPORT	|OALFlushICache|
	IMPORT	|OALFlushDCache|
	IMPORT	|OALClearITLB|
	IMPORT	|OALClearDTLB|
	IMPORT	|OALCPUIdle|
	IMPORT	|OALCPUIdle_sz|
	IMPORT	|OALIntrEnableIrqs|
	IMPORT	|OALKitlPowerOff|
	IMPORT	|OALArgsQuery|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALPAtoVA|
	IMPORT	|g_oalWakeSource|
	IMPORT	|memcpy|

  00000			 AREA	 |.bss|, NOINIT
|?pGPIO4Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO4Regs
|?pCpldRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pCpldRegs
|?pIntcRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pIntcRegs
|?pGPIO1Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO1Regs
|?pGPIO2Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO2Regs
|?pGPIO3Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO3Regs
|?pGPIO4Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pGPIO4Regs
|?pPRCMReg@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pPRCMReg
|?pPadConfRegs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pPadConfRegs
|?pSMSRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pSMSRegs
|?pSDRCRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pSDRCRegs
|?pGPMCRegs@?1??OEMPowerOff@@9@9| % 0x4			; `OEMPowerOff'::`2'::pGPMCRegs
|?pSYSC1Regs@?1??OEMPowerOff@@9@9| % 0x4		; `OEMPowerOff'::`2'::pSYSC1Regs
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\power\power.c

  00000			 AREA	 |.pdata|, PDATA
|$T45780| DCD	|$LN8@OEMPowerOf|
	DCD	0x40020c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@JBBKKIFK@?$AA?9?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@LMPKPHIB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "s", 0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "_", 0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "_", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@PJIFMPOD@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt?$AAr?$AA?5?$AA?$CI?$AA?$CF@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "s", 0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "_", 0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "_", 0x0, "p", 0x0, "t", 0x0, "r", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@MBKDOABO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, ":", 0x0, "s", 0x0, "u"
	DCB	0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "_"
	DCB	0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "_", 0x0, "p"
	DCB	0x0, "t", 0x0, "r", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@KHIJKAFF@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "C", 0x0, "P", 0x0, "U"
	DCB	0x0, "I", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GJBNLJCO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, ":", 0x0, "O", 0x0, "A"
	DCB	0x0, "L", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, "I", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@LPOMOEEB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAs?$AAl?$AAe?$AAe?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "B", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, " ", 0x0, "s", 0x0, "l"
	DCB	0x0, "e", 0x0, "e", 0x0, "p", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@CMMOMPH@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAp?$AAP?$AAR?$AAC?$AAM?$AAR?$AAe?$AAg?$AA?9?$AA?$DO?$AAu?$AAl?$AAP?$AAM?$AA_?$AAW?$AAK?$AAS?$AAT@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "p", 0x0, "P", 0x0, "R", 0x0, "C", 0x0, "M", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "-", 0x0, ">", 0x0, "u", 0x0, "l"
	DCB	0x0, "P", 0x0, "M", 0x0, "_", 0x0, "W", 0x0, "K", 0x0, "S"
	DCB	0x0, "T", 0x0, "_", 0x0, "W", 0x0, "K", 0x0, "U", 0x0, "P"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@GPINFMBJ@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAK?$AAI?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "I", 0x0, "T", 0x0, "L", 0x0, " ", 0x0, "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@BIFIOCGK@?$AA?$CL?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@BEFEDDKA@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAI?$AAD?$AAC?$AAO?$AAD?$AAE?$AA_?$AAr?$AAe?$AAg?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "D", 0x0, "C", 0x0, "O", 0x0, "D", 0x0, "E"
	DCB	0x0, "_", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, " ", 0x0, "("
	DCB	0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMPowerOff| PROC

; 134  : {

  00000		 |$LN8@OEMPowerOf|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45777|

; 135  :     void (*suspend_func_ptr)();
; 136  :     int suspend_func_size;
; 137  :     OAL_KITL_ARGS *pArgs;
; 138  :     void *pIDCODE_reg;
; 139  :     //Declare all register pointers
; 140  :     static CPLD_REGS *pCpldRegs;
; 141  :     static OMAP2420_MPUINTC_REGS *pIntcRegs;
; 142  :     static OMAP2420_GPIO_REGS *pGPIO1Regs;
; 143  :     static OMAP2420_GPIO_REGS *pGPIO2Regs;
; 144  :     static OMAP2420_GPIO_REGS *pGPIO3Regs;
; 145  :     static OMAP2420_GPIO_REGS *pGPIO4Regs;
; 146  :     static OMAP2420_PRCM_REGS *pPRCMReg;
; 147  :     static OMAP2420_CONTROL_PADCONF_REGS *pPadConfRegs;
; 148  :     static OMAP2420_SMS_REGS *pSMSRegs;
; 149  :     static OMAP2420_SDRC_REGS *pSDRCRegs;
; 150  :     static OMAP2420_GPMC_REGS *pGPMCRegs;
; 151  :     static OMAP2420_SYSC1_REGS *pSYSC1Regs;
; 152  :     UINT32 new_value = 0x00000000;

  00008	e3a03000	 mov         r3, #0

; 153  :     
; 154  :     //Initialize all pointers
; 155  :     pCpldRegs    = (CPLD_REGS *) OALPAtoUA(BSP_CPLD_REGS_PA);

  0000c	e3a01000	 mov         r1, #0
  00010	e3a00302	 mov         r0, #2, 6
  00014	e58d3000	 str         r3, [sp]
  00018	eb000000	 bl          OALPAtoVA
  0001c	e59f9808	 ldr         r9, [pc, #0x808]
  00020	e3a04312	 mov         r4, #0x12, 6

; 156  :     pIntcRegs    = (OMAP2420_MPUINTC_REGS *) OALPAtoUA(OMAP2420_INTC_MPU_REGS_PA);

  00024	e3a01000	 mov         r1, #0
  00028	e5890024	 str         r0, [r9, #0x24]
  0002c	e3840afe	 orr         r0, r4, #0xFE, 20
  00030	eb000000	 bl          OALPAtoVA
  00034	e1a03000	 mov         r3, r0

; 157  :     pGPIO1Regs   = (OMAP2420_GPIO_REGS *) OALPAtoUA(OMAP2420_GPIO1_REGS_PA);

  00038	e3840906	 orr         r0, r4, #6, 18
  0003c	e3a01000	 mov         r1, #0
  00040	e5893004	 str         r3, [r9, #4]
  00044	eb000000	 bl          OALPAtoVA
  00048	e1a03000	 mov         r3, r0

; 158  :     pGPIO2Regs   = (OMAP2420_GPIO_REGS *) OALPAtoUA(OMAP2420_GPIO2_REGS_PA);

  0004c	e3840a1a	 orr         r0, r4, #0x1A, 20
  00050	e3a01000	 mov         r1, #0
  00054	e5893020	 str         r3, [r9, #0x20]
  00058	eb000000	 bl          OALPAtoVA
  0005c	e1a03000	 mov         r3, r0

; 159  :     pGPIO3Regs   = (OMAP2420_GPIO_REGS *) OALPAtoUA(OMAP2420_GPIO3_REGS_PA);

  00060	e3840907	 orr         r0, r4, #7, 18
  00064	e3a01000	 mov         r1, #0
  00068	e5893018	 str         r3, [r9, #0x18]
  0006c	eb000000	 bl          OALPAtoVA
  00070	e1a03000	 mov         r3, r0

; 160  :     pGPIO4Regs   = (OMAP2420_GPIO_REGS *) OALPAtoUA(OMAP2420_GPIO4_REGS_PA);

  00074	e3840a1e	 orr         r0, r4, #0x1E, 20
  00078	e3a01000	 mov         r1, #0
  0007c	e5893028	 str         r3, [r9, #0x28]
  00080	eb000000	 bl          OALPAtoVA
  00084	e1a03000	 mov         r3, r0

; 161  :     pPRCMReg     = (OMAP2420_PRCM_REGS *) OALPAtoUA(OMAP2420_PRCM_REGS_PA);

  00088	e3840902	 orr         r0, r4, #2, 18
  0008c	e3a01000	 mov         r1, #0
  00090	e5893000	 str         r3, [r9]
  00094	eb000000	 bl          OALPAtoVA
  00098	e1a03000	 mov         r3, r0

; 162  :     pPadConfRegs = (OMAP2420_CONTROL_PADCONF_REGS *) OALPAtoUA(OMAP2420_SYSC1_REGS_PA+0x30);

  0009c	e3840030	 orr         r0, r4, #0x30
  000a0	e3a01000	 mov         r1, #0
  000a4	e5893008	 str         r3, [r9, #8]
  000a8	eb000000	 bl          OALPAtoVA
  000ac	e3a0431a	 mov         r4, #0x1A, 6
  000b0	e1a03000	 mov         r3, r0

; 163  :     pSMSRegs     = (OMAP2420_SMS_REGS *) OALPAtoUA(OMAP2420_SMS_REGS_PA);

  000b4	e3840902	 orr         r0, r4, #2, 18
  000b8	e3a01000	 mov         r1, #0
  000bc	e589301c	 str         r3, [r9, #0x1C]
  000c0	eb000000	 bl          OALPAtoVA
  000c4	e1a03000	 mov         r3, r0

; 164  :     pSDRCRegs    = (OMAP2420_SDRC_REGS *) OALPAtoUA(OMAP2420_SDRC_REGS_PA);

  000c8	e3840a09	 orr         r0, r4, #9, 20
  000cc	e3a01000	 mov         r1, #0
  000d0	e5893010	 str         r3, [r9, #0x10]
  000d4	eb000000	 bl          OALPAtoVA
  000d8	e1a03000	 mov         r3, r0

; 165  :     pGPMCRegs    = (OMAP2420_GPMC_REGS *) OALPAtoUA(OMAP2420_GPMC_REGS_PA);

  000dc	e3840a0a	 orr         r0, r4, #0xA, 20
  000e0	e3a01000	 mov         r1, #0
  000e4	e5893014	 str         r3, [r9, #0x14]
  000e8	eb000000	 bl          OALPAtoVA
  000ec	e1a03000	 mov         r3, r0

; 166  :     pSYSC1Regs   = (OMAP2420_SYSC1_REGS *) OALPAtoUA(OMAP2420_SYSC1_REGS_PA);

  000f0	e3a00312	 mov         r0, #0x12, 6
  000f4	e3a01000	 mov         r1, #0
  000f8	e589300c	 str         r3, [r9, #0xC]
  000fc	eb000000	 bl          OALPAtoVA
  00100	e1a03000	 mov         r3, r0

; 167  : 
; 168  :     //Debug Start
; 169  :     //OUTREG16(&pCpldRegs->LED, 1);
; 170  :     OALMSG(1, (L"+OEMPowerOff\r\n"));

  00104	e59f071c	 ldr         r0, [pc, #0x71C]
  00108	e589302c	 str         r3, [r9, #0x2C]
  0010c	eb000000	 bl          NKDbgPrintfW

; 171  :     g_oalWakeSource = SYSWAKE_UNKNOWN;

  00110	e59fa70c	 ldr         r10, [pc, #0x70C]

; 172  : 
; 173  :     //The IDCODE value is 0x0B5D902F for OMAP242x ES1.0.
; 174  :     //The IDCODE value is 0x1B5D902F for OMAP242x ES2.0.
; 175  :     //The IDCODE value is 0x2B5D902F for OMAP242x ES2.05.
; 176  :     //The IDCODE value is 0x3B5D902F for OMAP242x ES2.1 *** Tested PM on this ***
; 177  :     //The IDCODE value is 0x4B5D902F for OMAP242x ES2.1.1.
; 178  :     pIDCODE_reg = OALPAtoUA(0x48014204);

  00114	e59f0704	 ldr         r0, [pc, #0x704]
  00118	e3e03000	 mvn         r3, #0
  0011c	e3a01000	 mov         r1, #0
  00120	e58a3000	 str         r3, [r10]
  00124	eb000000	 bl          OALPAtoVA

; 179  :     OALMSG(1, (L"OEMPowerOff: IDCODE_reg (%x)\r\n", *(int*)pIDCODE_reg));

  00128	e5901000	 ldr         r1, [r0]
  0012c	e59f06e8	 ldr         r0, [pc, #0x6E8]
  00130	eb000000	 bl          NKDbgPrintfW

; 180  :     
; 181  :     // Make sure that KITL is powered off
; 182  :     pArgs = (OAL_KITL_ARGS*)OALArgsQuery(OAL_ARGS_QUERY_KITL);

  00134	e3a00002	 mov         r0, #2
  00138	eb000000	 bl          OALArgsQuery
  0013c	e1a0b000	 mov         r11, r0

; 183  :     if ((pArgs->flags & OAL_KITL_FLAGS_ENABLED) != 0)

  00140	e59b3000	 ldr         r3, [r11]
  00144	e3130001	 tst         r3, #1
  00148	0a000002	 beq         |$LN3@OEMPowerOf|

; 184  :     {
; 185  :         OALKitlPowerOff();

  0014c	eb000000	 bl          OALKitlPowerOff

; 186  :         OALMSG(1, (L"OEMPowerOff: KITL Disabled\r\n"));

  00150	e59f06c0	 ldr         r0, [pc, #0x6C0]
  00154	eb000000	 bl          NKDbgPrintfW
  00158		 |$LN3@OEMPowerOf|

; 187  :     }
; 188  : 
; 189  :     //Backup all used registers
; 190  :     ulaRegisterContext[ulINTC_MIR0] = pIntcRegs->ulINTC_MIR0; //restored

  00158	e599e004	 ldr         lr, [r9, #4]
  0015c	e59f86b0	 ldr         r8, [pc, #0x6B0]

; 191  :     ulaRegisterContext[ulINTC_MIR1] = pIntcRegs->ulINTC_MIR1; //restored
; 192  :     ulaRegisterContext[ulINTC_MIR2] = pIntcRegs->ulINTC_MIR2; //restored
; 193  :     ulaRegisterContext[ulCM_FCLKEN_WKUP] = pPRCMReg->ulCM_FCLKEN_WKUP; //restored

  00160	e5996008	 ldr         r6, [r9, #8]
  00164	e59e3084	 ldr         r3, [lr, #0x84]

; 194  :     ulaRegisterContext[ulCM_ICLKEN_WKUP] = pPRCMReg->ulCM_ICLKEN_WKUP; //restored
; 195  :     ulaRegisterContext[ulGPIO_DATAOUT] = pGPIO1Regs->ulGPIO_DATAOUT; //restored

  00168	e5994020	 ldr         r4, [r9, #0x20]

; 196  :     ulaRegisterContext[ulGPIO1_OE] = pGPIO1Regs->ulGPIO_OE; //restored
; 197  :     ulaRegisterContext[ulPADCONF_UART1_RX] = pPadConfRegs->ulPADCONF_UART1_RX; //restored

  0016c	e599701c	 ldr         r7, [r9, #0x1C]
  00170	e5883000	 str         r3, [r8]
  00174	e59e30a4	 ldr         r3, [lr, #0xA4]

; 198  :     ulaRegisterContext[ulGPIO3_OE] = pGPIO3Regs->ulGPIO_OE; //restored

  00178	e5995028	 ldr         r5, [r9, #0x28]

; 199  :     ulaRegisterContext[ulPADCONF_SPI1_NCS2] = pPadConfRegs->ulPADCONF_SPI1_NCS2; //restored
; 200  :     ulaRegisterContext[ulPM_WKEN_WKUP] = pPRCMReg->ulPM_WKEN_WKUP; //restored
; 201  :     ulaRegisterContext[ulGPIO_FALLINGDETECT] = pGPIO3Regs->ulGPIO_FALLINGDETECT; //restored
; 202  :     ulaRegisterContext[ulGPIO_SYSCONFIG] = pGPIO3Regs->ulGPIO_SYSCONFIG; //restored
; 203  :     ulaRegisterContext[ulGPIO_WAKEUPENABLE] = pGPIO3Regs->ulGPIO_WAKEUPENABLE; //restored
; 204  :     ulaRegisterContext[ulGPIO_DEBOUNCINGTIME] = pGPIO3Regs->ulGPIO_DEBOUNCINGTIME; //restored
; 205  :     ulaRegisterContext[ulGPIO_DEBOUNCENABLE] = pGPIO3Regs->ulGPIO_DEBOUNCENABLE; //restored
; 206  :     ulaRegisterContext[ulPM_WKEN1_CORE] = pPRCMReg->ulPM_WKEN1_CORE; //restored
; 207  :     ulaRegisterContext[ulPM_WKEN2_CORE] = pPRCMReg->ulPM_WKEN2_CORE; //restored
; 208  :     ulaRegisterContext[ulCM_AUTOIDLE_PLL] = pPRCMReg->ulCM_AUTOIDLE_PLL; //restored
; 209  :     ulaRegisterContext[ulPRCM_CLKSRC_CTRL] = pPRCMReg->ulPRCM_CLKSRC_CTRL; //restored
; 210  :     ulaRegisterContext[ulPRCM_CLKSSETUP] = pPRCMReg->ulPRCM_CLKSSETUP; //restored
; 211  :     ulaRegisterContext[ulPM_PWSTCTRL_CORE] = pPRCMReg->ulPM_PWSTCTRL_CORE; //restored
; 212  :     ulaRegisterContext[ulPM_WKDEP_MPU] = pPRCMReg->ulPM_WKDEP_MPU; //restored
; 213  :     ulaRegisterContext[ulPM_WKDEP_DSP] = pPRCMReg->ulPM_WKDEP_DSP; //restored
; 214  :     ulaRegisterContext[ulPM_WKDEP_GFX] = pPRCMReg->ulPM_WKDEP_GFX; //restored
; 215  :     ulaRegisterContext[ulGPIO_IRQENABLE1] = pGPIO3Regs->ulGPIO_IRQENABLE1; //restored
; 216  :     ulaRegisterContext[ulPM_PWSTCTRL_MPU] = pPRCMReg->ulPM_PWSTCTRL_MPU; //restored
; 217  :     ulaRegisterContext[ulPM_PWSTCTRL_DSP] = pPRCMReg->ulPM_PWSTCTRL_DSP; //restored
; 218  :     ulaRegisterContext[ulPM_PWSTCTRL_GFX] = pPRCMReg->ulPM_PWSTCTRL_GFX; //restored
; 219  :     ulaRegisterContext[ulSDRC_POWER] = pSDRCRegs->ulSDRC_POWER;         //restored

  0017c	e5990014	 ldr         r0, [r9, #0x14]
  00180	e5883004	 str         r3, [r8, #4]
  00184	e59e30c4	 ldr         r3, [lr, #0xC4]

; 220  :     ulaRegisterContext[ulSMS_SYSCONFIG] = pSMSRegs->ulSMS_SYSCONFIG;    //restored

  00188	e5992010	 ldr         r2, [r9, #0x10]

; 221  :     ulaRegisterContext[ulSDRC_SYSCONFIG] = pSDRCRegs->ulSDRC_SYSCONFIG; //restored
; 222  :     ulaRegisterContext[ulGPMC_SYSCONFIG] = pGPMCRegs->ulGPMC_SYSCONFIG; //restored

  0018c	e599100c	 ldr         r1, [r9, #0xC]
  00190	e5883008	 str         r3, [r8, #8]
  00194	e5963400	 ldr         r3, [r6, #0x400]
  00198	e588300c	 str         r3, [r8, #0xC]
  0019c	e5963410	 ldr         r3, [r6, #0x410]
  001a0	e5883010	 str         r3, [r8, #0x10]
  001a4	e594303c	 ldr         r3, [r4, #0x3C]
  001a8	e5883014	 str         r3, [r8, #0x14]
  001ac	e5943034	 ldr         r3, [r4, #0x34]
  001b0	e5883018	 str         r3, [r8, #0x18]
  001b4	e5973098	 ldr         r3, [r7, #0x98]
  001b8	e588301c	 str         r3, [r8, #0x1C]
  001bc	e5953034	 ldr         r3, [r5, #0x34]
  001c0	e5883020	 str         r3, [r8, #0x20]
  001c4	e59730d4	 ldr         r3, [r7, #0xD4]
  001c8	e5883024	 str         r3, [r8, #0x24]
  001cc	e59634a0	 ldr         r3, [r6, #0x4A0]
  001d0	e5883028	 str         r3, [r8, #0x28]
  001d4	e595304c	 ldr         r3, [r5, #0x4C]
  001d8	e588302c	 str         r3, [r8, #0x2C]
  001dc	e5953010	 ldr         r3, [r5, #0x10]
  001e0	e5883030	 str         r3, [r8, #0x30]
  001e4	e5953020	 ldr         r3, [r5, #0x20]
  001e8	e5883034	 str         r3, [r8, #0x34]
  001ec	e5953054	 ldr         r3, [r5, #0x54]
  001f0	e5883038	 str         r3, [r8, #0x38]
  001f4	e5953050	 ldr         r3, [r5, #0x50]
  001f8	e588303c	 str         r3, [r8, #0x3C]
  001fc	e59632a0	 ldr         r3, [r6, #0x2A0]
  00200	e5883040	 str         r3, [r8, #0x40]
  00204	e59632a4	 ldr         r3, [r6, #0x2A4]
  00208	e5883044	 str         r3, [r8, #0x44]
  0020c	e5963530	 ldr         r3, [r6, #0x530]
  00210	e5883048	 str         r3, [r8, #0x48]
  00214	e5963060	 ldr         r3, [r6, #0x60]
  00218	e588304c	 str         r3, [r8, #0x4C]
  0021c	e5963094	 ldr         r3, [r6, #0x94]
  00220	e5883050	 str         r3, [r8, #0x50]
  00224	e59632e0	 ldr         r3, [r6, #0x2E0]
  00228	e5883054	 str         r3, [r8, #0x54]
  0022c	e59631c8	 ldr         r3, [r6, #0x1C8]
  00230	e5883058	 str         r3, [r8, #0x58]
  00234	e59638c8	 ldr         r3, [r6, #0x8C8]
  00238	e588305c	 str         r3, [r8, #0x5C]
  0023c	e59633c8	 ldr         r3, [r6, #0x3C8]
  00240	e5883060	 str         r3, [r8, #0x60]
  00244	e595301c	 ldr         r3, [r5, #0x1C]
  00248	e5883064	 str         r3, [r8, #0x64]
  0024c	e59631e0	 ldr         r3, [r6, #0x1E0]
  00250	e5883068	 str         r3, [r8, #0x68]
  00254	e59638e0	 ldr         r3, [r6, #0x8E0]
  00258	e588306c	 str         r3, [r8, #0x6C]
  0025c	e59633e0	 ldr         r3, [r6, #0x3E0]
  00260	e5883070	 str         r3, [r8, #0x70]
  00264	e5903070	 ldr         r3, [r0, #0x70]

; 223  :     ulaRegisterContext[ulCM_CLKSTCTRL_MPU] = pPRCMReg->ulCM_CLKSTCTRL_MPU; //restored

  00268	e5883074	 str         r3, [r8, #0x74]
  0026c	e5923010	 ldr         r3, [r2, #0x10]

; 224  :     ulaRegisterContext[ulCM_CLKSTCTRL_DSP] = pPRCMReg->ulCM_CLKSTCTRL_DSP; //restored

  00270	e5883078	 str         r3, [r8, #0x78]
  00274	e5903010	 ldr         r3, [r0, #0x10]

; 225  :     ulaRegisterContext[ulCM_CLKSTCTRL_GFX] = pPRCMReg->ulCM_CLKSTCTRL_GFX;  //restored

  00278	e588307c	 str         r3, [r8, #0x7C]
  0027c	e5913010	 ldr         r3, [r1, #0x10]

; 226  :     ulaRegisterContext[ulCM_CLKSTCTRL_CORE] = pPRCMReg->ulCM_CLKSTCTRL_CORE; //restored
; 227  :     ulaRegisterContext[ulCM_AUTOIDLE_DSP] = pPRCMReg->ulCM_AUTOIDLE_DSP;     //restored

  00280	e5883080	 str         r3, [r8, #0x80]
  00284	e5963148	 ldr         r3, [r6, #0x148]

; 228  :     ulaRegisterContext[ulCM_AUTOIDLE1_CORE] = pPRCMReg->ulCM_AUTOIDLE1_CORE; //restored
; 229  :     ulaRegisterContext[ulCM_AUTOIDLE2_CORE] = pPRCMReg->ulCM_AUTOIDLE2_CORE; //restored

  00288	e5883084	 str         r3, [r8, #0x84]
  0028c	e5963848	 ldr         r3, [r6, #0x848]

; 230  :     ulaRegisterContext[ulCM_AUTOIDLE3_CORE] = pPRCMReg->ulCM_AUTOIDLE3_CORE; //restored
; 231  :     ulaRegisterContext[ulCM_AUTOIDLE4_CORE] = pPRCMReg->ulCM_AUTOIDLE4_CORE; //restored

  00290	e5883088	 str         r3, [r8, #0x88]
  00294	e5963348	 ldr         r3, [r6, #0x348]

; 232  :     ulaRegisterContext[ulCM_AUTOIDLE_WKUP] = pPRCMReg->ulCM_AUTOIDLE_WKUP; //restored
; 233  :     ulaRegisterContext[ulCM_FCLKEN1_CORE] = pPRCMReg->ulCM_FCLKEN1_CORE; //restored

  00298	e588308c	 str         r3, [r8, #0x8C]
  0029c	e5963248	 ldr         r3, [r6, #0x248]

; 234  :     ulaRegisterContext[ulCM_FCLKEN2_CORE] = pPRCMReg->ulCM_FCLKEN2_CORE; //restored
; 235  : 
; 236  : 
; 237  :     //Mask all interrupts
; 238  :     pIntcRegs->ulINTC_MIR_SET0 = OMAP2420_MPUINTC_MASKALL;
; 239  :     pIntcRegs->ulINTC_MIR_SET1 = OMAP2420_MPUINTC_MASKALL;
; 240  :     pIntcRegs->ulINTC_MIR_SET2 = OMAP2420_MPUINTC_MASKALL;
; 241  :     //Clear isr
; 242  :     pIntcRegs->ulINTC_ISR_CLEAR0 = OMAP2420_MPUINTC_MASKALL;
; 243  :     pIntcRegs->ulINTC_ISR_CLEAR1 = OMAP2420_MPUINTC_MASKALL;
; 244  :     pIntcRegs->ulINTC_ISR_CLEAR2 = OMAP2420_MPUINTC_MASKALL;
; 245  :     //Clear current pending isr
; 246  :     pIntcRegs->ulINTC_CONTROL = 0x3;

  002a0	e3a02003	 mov         r2, #3

; 247  : 
; 248  :     //functional_clock_control(PRCM_GPIOS, PRCM_ENABLE);
; 249  :    	pPRCMReg->ulCM_FCLKEN_WKUP |= PRCM_FCLKEN_WKUP_EN_GPIOS;
; 250  :     //interface_clock_control(PRCM_GPIOS, PRCM_ENABLE);
; 251  : 	pPRCMReg->ulCM_ICLKEN_WKUP |= PRCM_ICLKEN_WKUP_EN_GPIOS;
; 252  : 
; 253  :     //This sets GPIO 12 to drive low
; 254  :     pGPIO1Regs->ulGPIO_DATAOUT &= 0xFFFFEFFF; 
; 255  : 
; 256  :     //This sets GPIO 12 as an output
; 257  :     pGPIO1Regs->ulGPIO_OE &= 0xFFFFEFFF; 
; 258  : 
; 259  :     //Set up GPIO 12 pin mux
; 260  :     //first clear bits for pin P21
; 261  :     pPadConfRegs->ulPADCONF_UART1_RX &= 0xFF00FFFF;
; 262  : 
; 263  :     //now set appropriate bits for P21 mode 3, pulldown enabled   
; 264  :     pPadConfRegs->ulPADCONF_UART1_RX |= 0x000B0000; 
; 265  : 
; 266  :     //Set GPIO 88 as an input.
; 267  :     pGPIO3Regs->ulGPIO_OE |= 0x01000000;
; 268  : 
; 269  :     //GPIO 88 pin mux.
; 270  :     //first clear bits for pin T19
; 271  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 &= 0xFF00FFFF;
; 272  : 
; 273  :     //now set appropriate bits for T19 mode 3, pullup/pulldown disabled
; 274  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 |= 0x00030000;
; 275  : 
; 276  :     //GPIO 89 (S7) will be used to wake up the device
; 277  :     //wakeup_event_controller
; 278  :     pPRCMReg->ulPM_WKEN_WKUP |= 0x00000004;
; 279  : 
; 280  :     //This sets GPIO 89 as an input
; 281  :     pGPIO3Regs->ulGPIO_OE |= 0x02000000;
; 282  : 
; 283  :     //This will enable the wakeup on the falling edge of GPIO 89
; 284  :     pGPIO3Regs->ulGPIO_FALLINGDETECT |= 0x02000000;
; 285  : 
; 286  :     //Enable wake up capabilities for all GPIO3
; 287  :     pGPIO3Regs->ulGPIO_SYSCONFIG |= 0x00000004;
; 288  : 
; 289  :     //Enable wake up for GPIO 89
; 290  :     pGPIO3Regs->ulGPIO_WAKEUPENABLE |= 0x02000000; 
; 291  : 
; 292  :     //Set GPIO 3 for smart idle.
; 293  :     pGPIO3Regs->ulGPIO_SYSCONFIG |= 0x00000010;
; 294  : 
; 295  :     //Set debouncing time for GPIO 89. 
; 296  :     pGPIO3Regs->ulGPIO_DEBOUNCINGTIME = 0x000000FF;
; 297  : 
; 298  :     //Enable debouncing for GPIO 89. 
; 299  :     pGPIO3Regs->ulGPIO_DEBOUNCENABLE |= 0x02000000;
; 300  : 
; 301  :     //GPIO 89 pin mux.
; 302  :     //first clear bits for pin R19
; 303  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 &= 0x00FFFFFF;
; 304  :     //now set appropriate bits for R19 mode 3, pullup enabled
; 305  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 |= 0x1B000000;
; 306  : 
; 307  :     //Unmask GPIO 89 IRQ - IRQ31 for GPIO3 will wake the system
; 308  :     new_value = IRQ_GPIO_0 + 89;
; 309  :     OALIntrEnableIrqs(1, &new_value);

  002a4	e28d1000	 add         r1, sp, #0
  002a8	e5883090	 str         r3, [r8, #0x90]
  002ac	e5963830	 ldr         r3, [r6, #0x830]
  002b0	e3a00001	 mov         r0, #1
  002b4	e5883094	 str         r3, [r8, #0x94]
  002b8	e5963230	 ldr         r3, [r6, #0x230]
  002bc	e5883098	 str         r3, [r8, #0x98]
  002c0	e5963234	 ldr         r3, [r6, #0x234]
  002c4	e588309c	 str         r3, [r8, #0x9C]
  002c8	e5963238	 ldr         r3, [r6, #0x238]
  002cc	e58830a0	 str         r3, [r8, #0xA0]
  002d0	e596323c	 ldr         r3, [r6, #0x23C]
  002d4	e58830a4	 str         r3, [r8, #0xA4]
  002d8	e5963430	 ldr         r3, [r6, #0x430]
  002dc	e58830a8	 str         r3, [r8, #0xA8]
  002e0	e5963200	 ldr         r3, [r6, #0x200]
  002e4	e58830ac	 str         r3, [r8, #0xAC]
  002e8	e5963204	 ldr         r3, [r6, #0x204]
  002ec	e58830b0	 str         r3, [r8, #0xB0]
  002f0	e3e03000	 mvn         r3, #0
  002f4	e58e308c	 str         r3, [lr, #0x8C]
  002f8	e58e30ac	 str         r3, [lr, #0xAC]
  002fc	e58e30cc	 str         r3, [lr, #0xCC]
  00300	e58e3094	 str         r3, [lr, #0x94]
  00304	e58e30b4	 str         r3, [lr, #0xB4]
  00308	e58e30d4	 str         r3, [lr, #0xD4]
  0030c	e58e2048	 str         r2, [lr, #0x48]
  00310	e5963400	 ldr         r3, [r6, #0x400]
  00314	e3a020ff	 mov         r2, #0xFF
  00318	e3a0e0f9	 mov         lr, #0xF9
  0031c	e3833004	 orr         r3, r3, #4
  00320	e5863400	 str         r3, [r6, #0x400]
  00324	e5963410	 ldr         r3, [r6, #0x410]
  00328	e3833004	 orr         r3, r3, #4
  0032c	e5863410	 str         r3, [r6, #0x410]
  00330	e594303c	 ldr         r3, [r4, #0x3C]
  00334	e3c33a01	 bic         r3, r3, #1, 20
  00338	e584303c	 str         r3, [r4, #0x3C]
  0033c	e5943034	 ldr         r3, [r4, #0x34]
  00340	e3c33a01	 bic         r3, r3, #1, 20
  00344	e5843034	 str         r3, [r4, #0x34]
  00348	e5973098	 ldr         r3, [r7, #0x98]
  0034c	e3c338ff	 bic         r3, r3, #0xFF, 16
  00350	e5873098	 str         r3, [r7, #0x98]
  00354	e5973098	 ldr         r3, [r7, #0x98]
  00358	e383380b	 orr         r3, r3, #0xB, 16
  0035c	e5873098	 str         r3, [r7, #0x98]
  00360	e5953034	 ldr         r3, [r5, #0x34]
  00364	e3833401	 orr         r3, r3, #1, 8
  00368	e5853034	 str         r3, [r5, #0x34]
  0036c	e59730d4	 ldr         r3, [r7, #0xD4]
  00370	e3c338ff	 bic         r3, r3, #0xFF, 16
  00374	e58730d4	 str         r3, [r7, #0xD4]
  00378	e59730d4	 ldr         r3, [r7, #0xD4]
  0037c	e3833803	 orr         r3, r3, #3, 16
  00380	e58730d4	 str         r3, [r7, #0xD4]
  00384	e59634a0	 ldr         r3, [r6, #0x4A0]
  00388	e3833004	 orr         r3, r3, #4
  0038c	e58634a0	 str         r3, [r6, #0x4A0]
  00390	e5953034	 ldr         r3, [r5, #0x34]
  00394	e3833402	 orr         r3, r3, #2, 8
  00398	e5853034	 str         r3, [r5, #0x34]
  0039c	e595304c	 ldr         r3, [r5, #0x4C]
  003a0	e3833402	 orr         r3, r3, #2, 8
  003a4	e585304c	 str         r3, [r5, #0x4C]
  003a8	e5953010	 ldr         r3, [r5, #0x10]
  003ac	e3833004	 orr         r3, r3, #4
  003b0	e5853010	 str         r3, [r5, #0x10]
  003b4	e5953020	 ldr         r3, [r5, #0x20]
  003b8	e3833402	 orr         r3, r3, #2, 8
  003bc	e5853020	 str         r3, [r5, #0x20]
  003c0	e5953010	 ldr         r3, [r5, #0x10]
  003c4	e3833010	 orr         r3, r3, #0x10
  003c8	e5853010	 str         r3, [r5, #0x10]
  003cc	e5852054	 str         r2, [r5, #0x54]
  003d0	e5953050	 ldr         r3, [r5, #0x50]
  003d4	e3833402	 orr         r3, r3, #2, 8
  003d8	e5853050	 str         r3, [r5, #0x50]
  003dc	e59730d4	 ldr         r3, [r7, #0xD4]
  003e0	e3c334ff	 bic         r3, r3, #0xFF, 8
  003e4	e58730d4	 str         r3, [r7, #0xD4]
  003e8	e59730d4	 ldr         r3, [r7, #0xD4]
  003ec	e383341b	 orr         r3, r3, #0x1B, 8
  003f0	e58730d4	 str         r3, [r7, #0xD4]
  003f4	e58de000	 str         lr, [sp]
  003f8	eb000000	 bl          OALIntrEnableIrqs

; 310  : 
; 311  : //========================================//
; 312  : //= At this point the GPIO 89 is set     =//
; 313  : //= up to wakeup the MPU.  On the SDP    =//
; 314  : //= User Interface Module this is        =//
; 315  : //= keyboard S7.                         =//
; 316  : //========================================//      
; 317  : 
; 318  :     //Disable CORE wakeup events because we will use a WKUP domain wakeup event.   
; 319  :     pPRCMReg->ulPM_WKEN1_CORE = 0x00000000;

  003fc	e599e008	 ldr         lr, [r9, #8]
  00400	e3a01000	 mov         r1, #0

; 320  :     pPRCMReg->ulPM_WKEN2_CORE = 0x00000000;
; 321  : 
; 322  :     // Clear WKUP domain reset status register
; 323  :     pPRCMReg->ulRM_RSTST_WKUP = 0x0000007B;

  00404	e3a0707b	 mov         r7, #0x7B
  00408	e58e12a0	 str         r1, [lr, #0x2A0]
  0040c	e58e12a4	 str         r1, [lr, #0x2A4]

; 324  :     pPRCMReg->ulRM_RSTST_MPU  = 0x0000000F; 

  00410	e3a0600f	 mov         r6, #0xF
  00414	e58e7458	 str         r7, [lr, #0x458]
  00418	e58e6158	 str         r6, [lr, #0x158]

; 325  : 
; 326  :     //prepare_for_idle
; 327  :     //apll_54M_clock_auto_control(PRCM_APLL_ENABLE);
; 328  :     new_value = pPRCMReg->ulCM_AUTOIDLE_PLL & 0xFFFFFF3F;

  0041c	e59e3530	 ldr         r3, [lr, #0x530]

; 329  :     pPRCMReg->ulCM_AUTOIDLE_PLL = new_value | PRCM_CM_AUTOIDLE_PLL_AUTO_54M_EN;
; 330  : 
; 331  :     //apll_96M_clock_auto_control(PRCM_APLL_ENABLE);
; 332  :     new_value = pPRCMReg->ulCM_AUTOIDLE_PLL & 0xFFFFFFF3;
; 333  :     pPRCMReg->ulCM_AUTOIDLE_PLL = new_value | PRCM_CM_AUTOIDLE_PLL_AUTO_96M_EN;
; 334  : 
; 335  :     //dpll_clock_auto_control(PRCM_DPLL_ENABLE);
; 336  :     new_value = pPRCMReg->ulCM_AUTOIDLE_PLL & 0xFFFFFFFC;
; 337  :     pPRCMReg->ulCM_AUTOIDLE_PLL = new_value | PRCM_CM_AUTOIDLE_PLL_AUTO_DPLL_EN;
; 338  : 
; 339  :     //setup_external_clock_control(PRCM_OFF_WHEN_RETENTION_OR_OFF); 
; 340  :     new_value = pPRCMReg->ulPRCM_CLKSRC_CTRL & 0xFFFFFFE7;
; 341  :     pPRCMReg->ulPRCM_CLKSRC_CTRL = new_value | PRCM_CLKSRC_CTRL_OFF_WHEN_RETENTION_OR_OFF;
; 342  : 
; 343  :     //set_system_clock_setup_time(0x0000);
; 344  :     pPRCMReg->ulPRCM_CLKSSETUP = 0;
; 345  : 
; 346  :     //SKIPPED:setup_voltage_scaling_auto(PRCM_L1, PRCM_L1, 0x0000);
; 347  :     //SKIPPED: emulation_tools_control(PRCM_DISABLE); 
; 348  : 
; 349  :     //set_core_memory_retention_state
; 350  :     new_value = pPRCMReg->ulPM_PWSTCTRL_CORE & 0xFFFFFFC7;
; 351  :     pPRCMReg->ulPM_PWSTCTRL_CORE = new_value | PRCM_PM_PWSTCTRL_CORE_MEM3RETSTATE_RETAIN |
; 352  :         PRCM_PM_PWSTCTRL_CORE_MEM2RETSTATE_RETAIN | PRCM_PM_PWSTCTRL_CORE_MEM1RETSTATE_RETAIN;
; 353  : 
; 354  :       //MPU dependant on WKUP domain
; 355  :     pPRCMReg->ulPM_WKDEP_MPU = 0x00000010;
; 356  :     pPRCMReg->ulPM_WKDEP_DSP = 0x00000000;
; 357  :     pPRCMReg->ulPM_WKDEP_GFX = 0x00000000;
; 358  :     //END prepare_for_idle
; 359  : 
; 360  :     //Need to clear IRQ Status or will not enter idle.
; 361  :     pGPIO3Regs->ulGPIO_IRQSTATUS1 = 0x02000000;

  00420	e5992028	 ldr         r2, [r9, #0x28]

; 362  :     pGPIO3Regs->ulGPIO_IRQSTATUS2 = 0x02000000;
; 363  : 
; 364  :     //enable GPIO3 interrupt
; 365  :     pGPIO3Regs->ulGPIO_IRQENABLE1 = 0x02000000;
; 366  : 
; 367  :     //enter_idle_mode(PRCM_CHIP, PRCM_DORMANT, PRCM_AUTO);
; 368  :     //set_powermode(PRCM_DORMANT)
; 369  :     //set_domain_powerstate(PRCM_MPU,  PRCM_RETENTION);   
; 370  :     new_value = pPRCMReg->ulPM_PWSTCTRL_MPU & 0xFFFFFFF8;
; 371  :     pPRCMReg->ulPM_PWSTCTRL_MPU = new_value | 0x00000005;
; 372  :     //NOTE: The current boot method is Overlay Boot rather than context restore
; 373  :     //So the processor ROM code does not excecute to be able to restore
; 374  :     //For now, we use a PRCM_RETENTION state for the MPU instead of PRCM_DORMANT
; 375  :     //which allows us to retain logic when we sleep (LOGICRETSTATE) and return here
; 376  : 
; 377  :     //set_domain_powerstate(PRCM_DSP,  PRCM_OFF);
; 378  :     pPRCMReg->ulPM_PWSTCTRL_DSP |= 0x00000003;
; 379  : 
; 380  :     //set_domain_powerstate(PRCM_GFX,  PRCM_OFF);
; 381  :     pPRCMReg->ulPM_PWSTCTRL_GFX |= 0x00000003;
; 382  : 
; 383  :     //set_domain_powerstate(PRCM_CORE, PRCM_RETENTION);
; 384  :     new_value = pPRCMReg->ulPM_PWSTCTRL_CORE & 0xFFFFFFFC;
; 385  :     pPRCMReg->ulPM_PWSTCTRL_CORE = new_value | 0x00000001;
; 386  :    
; 387  :     //SKIPPED: force_standby_usb();
; 388  : 
; 389  :     //sdram_self_refresh_on_idle_req(PRCM_ENABLE);
; 390  :     pSDRCRegs->ulSDRC_POWER |= 0x00000040;

  00424	e5990014	 ldr         r0, [r9, #0x14]
  00428	e3c330c0	 bic         r3, r3, #0xC0
  0042c	e58d3000	 str         r3, [sp]
  00430	e38330c0	 orr         r3, r3, #0xC0
  00434	e58e3530	 str         r3, [lr, #0x530]
  00438	e59e3530	 ldr         r3, [lr, #0x530]
  0043c	e3c3300c	 bic         r3, r3, #0xC
  00440	e58d3000	 str         r3, [sp]
  00444	e383300c	 orr         r3, r3, #0xC
  00448	e58e3530	 str         r3, [lr, #0x530]
  0044c	e59e3530	 ldr         r3, [lr, #0x530]
  00450	e3c33003	 bic         r3, r3, #3
  00454	e58d3000	 str         r3, [sp]
  00458	e3833003	 orr         r3, r3, #3
  0045c	e58e3530	 str         r3, [lr, #0x530]
  00460	e59e3060	 ldr         r3, [lr, #0x60]
  00464	e3c33018	 bic         r3, r3, #0x18
  00468	e58d3000	 str         r3, [sp]
  0046c	e3833018	 orr         r3, r3, #0x18
  00470	e58e3060	 str         r3, [lr, #0x60]
  00474	e58e1094	 str         r1, [lr, #0x94]
  00478	e59e32e0	 ldr         r3, [lr, #0x2E0]
  0047c	e3c33038	 bic         r3, r3, #0x38
  00480	e58d3000	 str         r3, [sp]
  00484	e3833038	 orr         r3, r3, #0x38
  00488	e58e32e0	 str         r3, [lr, #0x2E0]
  0048c	e3a03010	 mov         r3, #0x10
  00490	e58e31c8	 str         r3, [lr, #0x1C8]
  00494	e58e18c8	 str         r1, [lr, #0x8C8]
  00498	e3a03402	 mov         r3, #2, 8
  0049c	e58e13c8	 str         r1, [lr, #0x3C8]
  004a0	e5823018	 str         r3, [r2, #0x18]
  004a4	e5823028	 str         r3, [r2, #0x28]
  004a8	e582301c	 str         r3, [r2, #0x1C]
  004ac	e59e31e0	 ldr         r3, [lr, #0x1E0]

; 391  :     //set_smartidle_smartstandby
; 392  :     pSMSRegs->ulSMS_SYSCONFIG |= 0x00000010;

  004b0	e5991010	 ldr         r1, [r9, #0x10]

; 393  :     pSDRCRegs->ulSDRC_SYSCONFIG |= 0x00000010;
; 394  :     pGPMCRegs->ulGPMC_SYSCONFIG |= 0x00000010;

  004b4	e599200c	 ldr         r2, [r9, #0xC]
  004b8	e3c33007	 bic         r3, r3, #7
  004bc	e58d3000	 str         r3, [sp]
  004c0	e3833005	 orr         r3, r3, #5
  004c4	e58e31e0	 str         r3, [lr, #0x1E0]
  004c8	e59e38e0	 ldr         r3, [lr, #0x8E0]
  004cc	e3833003	 orr         r3, r3, #3
  004d0	e58e38e0	 str         r3, [lr, #0x8E0]
  004d4	e59e33e0	 ldr         r3, [lr, #0x3E0]
  004d8	e3833003	 orr         r3, r3, #3
  004dc	e58e33e0	 str         r3, [lr, #0x3E0]
  004e0	e59e32e0	 ldr         r3, [lr, #0x2E0]
  004e4	e3c33003	 bic         r3, r3, #3
  004e8	e58d3000	 str         r3, [sp]
  004ec	e3833001	 orr         r3, r3, #1
  004f0	e58e32e0	 str         r3, [lr, #0x2E0]
  004f4	e5903070	 ldr         r3, [r0, #0x70]
  004f8	e3833040	 orr         r3, r3, #0x40
  004fc	e5803070	 str         r3, [r0, #0x70]
  00500	e5913010	 ldr         r3, [r1, #0x10]
  00504	e3833010	 orr         r3, r3, #0x10
  00508	e5813010	 str         r3, [r1, #0x10]
  0050c	e5903010	 ldr         r3, [r0, #0x10]

; 395  : 
; 396  :     //clock_auto_control(PRCM_CHIP, PRCM_ENABLE);
; 397  :     pPRCMReg->ulCM_CLKSTCTRL_MPU = 0x00000001;  //set AutoState for the MPU clock
; 398  :     pPRCMReg->ulCM_CLKSTCTRL_DSP = 0x00000101;  //set AutoState for the DSP and IVA clocks

  00510	e3a01c01	 mov         r1, #1, 24
  00514	e3833010	 orr         r3, r3, #0x10
  00518	e5803010	 str         r3, [r0, #0x10]
  0051c	e5923010	 ldr         r3, [r2, #0x10]
  00520	e3833010	 orr         r3, r3, #0x10
  00524	e5823010	 str         r3, [r2, #0x10]
  00528	e3a02001	 mov         r2, #1
  0052c	e3813001	 orr         r3, r1, #1
  00530	e58e2148	 str         r2, [lr, #0x148]
  00534	e58e3848	 str         r3, [lr, #0x848]

; 399  :     pPRCMReg->ulCM_CLKSTCTRL_GFX = 0x00000001;  //set AutoState for the GFX clock

  00538	e58e2348	 str         r2, [lr, #0x348]

; 400  :     pPRCMReg->ulCM_CLKSTCTRL_CORE = 0x00000007;  //set AutoState for the DSS, L3, and L4 clocks

  0053c	e3a02007	 mov         r2, #7

; 401  : 
; 402  :     //set_domain_autoidle(PRCM_CHIP);
; 403  :     pPRCMReg->ulCM_AUTOIDLE_DSP = 0x00000002;  //set the AutoIdle for the DSP IPI interface clock

  00540	e3a03002	 mov         r3, #2
  00544	e58e2248	 str         r2, [lr, #0x248]
  00548	e58e3830	 str         r3, [lr, #0x830]

; 404  :     pPRCMReg->ulCM_AUTOIDLE1_CORE = 0xFFFFFFF9;  //set AutoIdle all interface clocks in CORE

  0054c	e3e03006	 mvn         r3, #6
  00550	e58e3230	 str         r3, [lr, #0x230]

; 405  :     pPRCMReg->ulCM_AUTOIDLE2_CORE = 0x00000007;

  00554	e58e2234	 str         r2, [lr, #0x234]

; 406  :     pPRCMReg->ulCM_AUTOIDLE3_CORE = 0x00000007;
; 407  :     pPRCMReg->ulCM_AUTOIDLE4_CORE = 0x0000001F;

  00558	e3a0301f	 mov         r3, #0x1F
  0055c	e58e2238	 str         r2, [lr, #0x238]
  00560	e58e323c	 str         r3, [lr, #0x23C]

; 408  :     pPRCMReg->ulCM_AUTOIDLE_WKUP = 0x0000003F;  //set AutoIdle for all WKUP clocks
; 409  : 
; 410  :     pPRCMReg->ulCM_FCLKEN1_CORE,  0x00000000;
; 411  :     pPRCMReg->ulCM_FCLKEN2_CORE,  0x00000000;
; 412  : 
; 413  : 
; 414  : 
; 415  :     // **************************  BEFORE SLEEP  **********************************
; 416  :     //OUTREG16(&pCpldRegs->LED, 3);
; 417  :     
; 418  : 	//We copy the assembler sleep/wakeup routines to SRAM.
; 419  :     //These routines should be in SRAM as that's the only
; 420  :     //memory the MPU can see when it wakes up.
; 421  :     //IMPORTANT: Drivers using the SRAM should be aware that it's contents
; 422  :     //will be modified after a sleep (ie. if display driver used it as a frame buffer)
; 423  :     //Drivers should save/restore the SRAM contents when it gets the power IOCTL's D0-D4
; 424  :     suspend_func_ptr = (void*)(OMAP2420_SRAM_API_SUSPEND);

  00564	e59f02a4	 ldr         r0, [pc, #0x2A4]
  00568	e3a0303f	 mov         r3, #0x3F
  0056c	e58e3430	 str         r3, [lr, #0x430]
  00570	e59e2200	 ldr         r2, [lr, #0x200]
  00574	e59e3204	 ldr         r3, [lr, #0x204]
  00578	e3a01001	 mov         r1, #1
  0057c	eb000000	 bl          OALPAtoVA

; 425  :     suspend_func_size = (UINT32)OALCPUIdle_sz - (UINT32)OALCPUIdle + 256;  //include constants

  00580	e59f2284	 ldr         r2, [pc, #0x284]
  00584	e59f326c	 ldr         r3, [pc, #0x26C]

; 426  :     memcpy(suspend_func_ptr, OALCPUIdle, suspend_func_size );

  00588	e1a05000	 mov         r5, r0
  0058c	e0424003	 sub         r4, r2, r3
  00590	e2842c01	 add         r2, r4, #1, 24
  00594	e1a01003	 mov         r1, r3
  00598	eb000000	 bl          memcpy

; 427  : 
; 428  :     OALMSG(1, (L"OEMPowerOff: suspend_func_size (%d)\r\n", suspend_func_size));

  0059c	e59f0264	 ldr         r0, [pc, #0x264]
  005a0	e2841c01	 add         r1, r4, #1, 24
  005a4	eb000000	 bl          NKDbgPrintfW

; 429  :     OALMSG(1, (L"OEMPowerOff: suspend_func_ptr (%x)\r\n", suspend_func_ptr));

  005a8	e59f0254	 ldr         r0, [pc, #0x254]
  005ac	e1a01005	 mov         r1, r5
  005b0	eb000000	 bl          NKDbgPrintfW

; 430  :     OALMSG(1, (L"OEMPowerOff: Val:suspend_func_ptr (%x)\r\n", *(int*)suspend_func_ptr));

  005b4	e5951000	 ldr         r1, [r5]
  005b8	e59f0240	 ldr         r0, [pc, #0x240]
  005bc	eb000000	 bl          NKDbgPrintfW

; 431  :     OALMSG(1, (L"OEMPowerOff: OALCPUIdle (%x)\r\n", OALCPUIdle));

  005c0	e59f1230	 ldr         r1, [pc, #0x230]
  005c4	e59f0230	 ldr         r0, [pc, #0x230]
  005c8	eb000000	 bl          NKDbgPrintfW

; 432  :     OALMSG(1, (L"OEMPowerOff: Val:OALCPUIdle (%x)\r\n", *(int*)OALCPUIdle));

  005cc	e59f3224	 ldr         r3, [pc, #0x224]
  005d0	e59f021c	 ldr         r0, [pc, #0x21C]
  005d4	e5931000	 ldr         r1, [r3]
  005d8	eb000000	 bl          NKDbgPrintfW

; 433  : 
; 434  :     //IMPORTANT: Need to Clear TLB, I and D cache before a jump to cached SRAM
; 435  :     OALClearDTLB();

  005dc	eb000000	 bl          OALClearDTLB

; 436  :     OALClearITLB();

  005e0	eb000000	 bl          OALClearITLB

; 437  :     OALFlushDCache();

  005e4	eb000000	 bl          OALFlushDCache

; 438  :     OALFlushICache();

  005e8	eb000000	 bl          OALFlushICache

; 439  :     //Call routines to save context and execute WFI (wait for interrupt) instruction
; 440  :     (*suspend_func_ptr)();

  005ec	e1a0e00f	 mov         lr, pc
  005f0	e12fff15	 bx          r5

; 441  : 
; 442  :     //OUTREG16(&pCpldRegs->LED, 4);
; 443  :     // **************************  AFTER SLEEP  **********************************
; 444  : 
; 445  :     OALMSG(1, (L"OEMPowerOff: Back from sleep\r\n"));

  005f4	e59f01f4	 ldr         r0, [pc, #0x1F4]
  005f8	eb000000	 bl          NKDbgPrintfW

; 446  : 
; 447  :     // Clear WKUP domain reset status registers
; 448  :     pPRCMReg->ulRM_RSTST_WKUP = 0x0000007B;

  005fc	e5992008	 ldr         r2, [r9, #8]

; 449  :     pPRCMReg->ulRM_RSTST_MPU  = 0x0000000F; 
; 450  :     //Clear CORE domain wakeup status registers
; 451  :     pPRCMReg->ulPM_WKST1_CORE = 0x04667FF8;

  00600	e59f31e4	 ldr         r3, [pc, #0x1E4]

; 452  :     pPRCMReg->ulPM_WKST2_CORE = 0x00000005;

  00604	e3a04005	 mov         r4, #5
  00608	e5827458	 str         r7, [r2, #0x458]
  0060c	e5826158	 str         r6, [r2, #0x158]
  00610	e58232b0	 str         r3, [r2, #0x2B0]

; 453  : 
; 454  :     //Check for wake event
; 455  :     OALMSG(1, (L"OEMPowerOff: pPRCMReg->ulPM_WKST_WKUP (%x)\r\n", pPRCMReg->ulPM_WKST_WKUP ));

  00614	e59f01cc	 ldr         r0, [pc, #0x1CC]
  00618	e58242b4	 str         r4, [r2, #0x2B4]
  0061c	e59214b0	 ldr         r1, [r2, #0x4B0]
  00620	eb000000	 bl          NKDbgPrintfW

; 456  :     if(4 == pPRCMReg->ulPM_WKST_WKUP)

  00624	e599e008	 ldr         lr, [r9, #8]

; 457  :     {
; 458  :         //GPIO Wake up
; 459  :         g_oalWakeSource = SYSWAKE_POWER_BUTTON;
; 460  :         OUTREG32(&pPRCMReg->ulPM_WKST_WKUP, 0x00000005); //Clear MPU interrupt status 
; 461  :     }
; 462  : 
; 463  :     //Restore SDRC regs used
; 464  :     pSDRCRegs->ulSDRC_POWER = ulaRegisterContext[ulSDRC_POWER];

  00628	e5991014	 ldr         r1, [r9, #0x14]

; 465  :     pSMSRegs->ulSMS_SYSCONFIG = ulaRegisterContext[ulSMS_SYSCONFIG];

  0062c	e5992010	 ldr         r2, [r9, #0x10]
  00630	e59e34b0	 ldr         r3, [lr, #0x4B0]
  00634	e3530004	 cmp         r3, #4
  00638	03a03b01	 moveq       r3, #1, 22
  0063c	03833003	 orreq       r3, r3, #3
  00640	058a3000	 streq       r3, [r10]
  00644	058e44b0	 streq       r4, [lr, #0x4B0]
  00648	e5983074	 ldr         r3, [r8, #0x74]
  0064c	e5813070	 str         r3, [r1, #0x70]
  00650	e5983078	 ldr         r3, [r8, #0x78]

; 466  :     pSDRCRegs->ulSDRC_SYSCONFIG = ulaRegisterContext[ulSDRC_SYSCONFIG];

  00654	e5823010	 str         r3, [r2, #0x10]
  00658	e598307c	 ldr         r3, [r8, #0x7C]

; 467  :     pGPMCRegs->ulGPMC_SYSCONFIG = ulaRegisterContext[ulGPMC_SYSCONFIG];

  0065c	e599200c	 ldr         r2, [r9, #0xC]

; 468  : 
; 469  :     //Restore Clocks
; 470  :     pPRCMReg->ulCM_FCLKEN_WKUP = ulaRegisterContext[ulCM_FCLKEN_WKUP];

  00660	e5813010	 str         r3, [r1, #0x10]
  00664	e5983080	 ldr         r3, [r8, #0x80]

; 471  :     pPRCMReg->ulCM_ICLKEN_WKUP = ulaRegisterContext[ulCM_ICLKEN_WKUP];

  00668	e5823010	 str         r3, [r2, #0x10]
  0066c	e598300c	 ldr         r3, [r8, #0xC]

; 472  :     pPRCMReg->ulCM_CLKSTCTRL_MPU = ulaRegisterContext[ulCM_CLKSTCTRL_MPU];
; 473  :     pPRCMReg->ulCM_CLKSTCTRL_DSP = ulaRegisterContext[ulCM_CLKSTCTRL_DSP];
; 474  :     pPRCMReg->ulCM_CLKSTCTRL_GFX = ulaRegisterContext[ulCM_CLKSTCTRL_GFX];
; 475  :     pPRCMReg->ulCM_CLKSTCTRL_CORE = ulaRegisterContext[ulCM_CLKSTCTRL_CORE];
; 476  :     pPRCMReg->ulCM_AUTOIDLE_DSP = ulaRegisterContext[ulCM_AUTOIDLE_DSP];
; 477  :     pPRCMReg->ulCM_AUTOIDLE1_CORE = ulaRegisterContext[ulCM_AUTOIDLE1_CORE];
; 478  :     pPRCMReg->ulCM_AUTOIDLE2_CORE = ulaRegisterContext[ulCM_AUTOIDLE2_CORE];
; 479  :     pPRCMReg->ulCM_AUTOIDLE3_CORE = ulaRegisterContext[ulCM_AUTOIDLE3_CORE];
; 480  :     pPRCMReg->ulCM_AUTOIDLE4_CORE = ulaRegisterContext[ulCM_AUTOIDLE4_CORE];
; 481  :     pPRCMReg->ulCM_AUTOIDLE_WKUP = ulaRegisterContext[ulCM_AUTOIDLE_WKUP];
; 482  :     pPRCMReg->ulCM_FCLKEN1_CORE = ulaRegisterContext[ulCM_FCLKEN1_CORE];
; 483  :     pPRCMReg->ulCM_FCLKEN2_CORE = ulaRegisterContext[ulCM_FCLKEN2_CORE];
; 484  : 
; 485  :     //Restore GPIO and wake regs
; 486  :     pGPIO1Regs->ulGPIO_DATAOUT = ulaRegisterContext[ulGPIO_DATAOUT];

  00670	e5991020	 ldr         r1, [r9, #0x20]

; 487  :     pGPIO1Regs->ulGPIO_OE = ulaRegisterContext[ulGPIO1_OE];
; 488  :     pPadConfRegs->ulPADCONF_UART1_RX = ulaRegisterContext[ulPADCONF_UART1_RX];

  00674	e599201c	 ldr         r2, [r9, #0x1C]
  00678	e58e3400	 str         r3, [lr, #0x400]
  0067c	e5983010	 ldr         r3, [r8, #0x10]

; 489  :     pGPIO3Regs->ulGPIO_OE = ulaRegisterContext[ulGPIO3_OE];

  00680	e5990028	 ldr         r0, [r9, #0x28]
  00684	e58e3410	 str         r3, [lr, #0x410]
  00688	e5983084	 ldr         r3, [r8, #0x84]
  0068c	e58e3148	 str         r3, [lr, #0x148]
  00690	e5983088	 ldr         r3, [r8, #0x88]
  00694	e58e3848	 str         r3, [lr, #0x848]
  00698	e598308c	 ldr         r3, [r8, #0x8C]
  0069c	e58e3348	 str         r3, [lr, #0x348]
  006a0	e5983090	 ldr         r3, [r8, #0x90]
  006a4	e58e3248	 str         r3, [lr, #0x248]
  006a8	e5983094	 ldr         r3, [r8, #0x94]
  006ac	e58e3830	 str         r3, [lr, #0x830]
  006b0	e5983098	 ldr         r3, [r8, #0x98]
  006b4	e58e3230	 str         r3, [lr, #0x230]
  006b8	e598309c	 ldr         r3, [r8, #0x9C]
  006bc	e58e3234	 str         r3, [lr, #0x234]
  006c0	e59830a0	 ldr         r3, [r8, #0xA0]
  006c4	e58e3238	 str         r3, [lr, #0x238]
  006c8	e59830a4	 ldr         r3, [r8, #0xA4]

; 490  :     pPadConfRegs->ulPADCONF_SPI1_NCS2 = ulaRegisterContext[ulPADCONF_SPI1_NCS2];
; 491  :     pPRCMReg->ulPM_WKEN_WKUP = ulaRegisterContext[ulPM_WKEN_WKUP];

  006cc	e58e323c	 str         r3, [lr, #0x23C]
  006d0	e59830a8	 ldr         r3, [r8, #0xA8]

; 492  :     pGPIO3Regs->ulGPIO_FALLINGDETECT = ulaRegisterContext[ulGPIO_FALLINGDETECT];

  006d4	e58e3430	 str         r3, [lr, #0x430]
  006d8	e59830ac	 ldr         r3, [r8, #0xAC]
  006dc	e58e3200	 str         r3, [lr, #0x200]
  006e0	e59830b0	 ldr         r3, [r8, #0xB0]
  006e4	e58e3204	 str         r3, [lr, #0x204]
  006e8	e5983014	 ldr         r3, [r8, #0x14]
  006ec	e581303c	 str         r3, [r1, #0x3C]
  006f0	e5983018	 ldr         r3, [r8, #0x18]
  006f4	e5813034	 str         r3, [r1, #0x34]
  006f8	e598301c	 ldr         r3, [r8, #0x1C]
  006fc	e5823098	 str         r3, [r2, #0x98]
  00700	e5983020	 ldr         r3, [r8, #0x20]
  00704	e5803034	 str         r3, [r0, #0x34]
  00708	e5983024	 ldr         r3, [r8, #0x24]
  0070c	e58230d4	 str         r3, [r2, #0xD4]
  00710	e5983028	 ldr         r3, [r8, #0x28]
  00714	e58e34a0	 str         r3, [lr, #0x4A0]
  00718	e598302c	 ldr         r3, [r8, #0x2C]
  0071c	e580304c	 str         r3, [r0, #0x4C]

; 493  :     pGPIO3Regs->ulGPIO_SYSCONFIG = ulaRegisterContext[ulGPIO_SYSCONFIG];

  00720	e5983030	 ldr         r3, [r8, #0x30]

; 494  :     pGPIO3Regs->ulGPIO_WAKEUPENABLE = ulaRegisterContext[ulGPIO_WAKEUPENABLE];

  00724	e5803010	 str         r3, [r0, #0x10]
  00728	e5983034	 ldr         r3, [r8, #0x34]

; 495  :     pGPIO3Regs->ulGPIO_DEBOUNCINGTIME = ulaRegisterContext[ulGPIO_DEBOUNCINGTIME];
; 496  :     pGPIO3Regs->ulGPIO_DEBOUNCENABLE = ulaRegisterContext[ulGPIO_DEBOUNCENABLE];

  0072c	e5803020	 str         r3, [r0, #0x20]
  00730	e5983038	 ldr         r3, [r8, #0x38]

; 497  :     pPRCMReg->ulPM_WKEN1_CORE = ulaRegisterContext[ulPM_WKEN1_CORE];
; 498  :     pPRCMReg->ulPM_WKEN2_CORE = ulaRegisterContext[ulPM_WKEN2_CORE];

  00734	e5803054	 str         r3, [r0, #0x54]
  00738	e598303c	 ldr         r3, [r8, #0x3C]

; 499  :     pPRCMReg->ulCM_AUTOIDLE_PLL = ulaRegisterContext[ulCM_AUTOIDLE_PLL];
; 500  :     pPRCMReg->ulPRCM_CLKSRC_CTRL = ulaRegisterContext[ulPRCM_CLKSRC_CTRL];

  0073c	e5803050	 str         r3, [r0, #0x50]
  00740	e5983040	 ldr         r3, [r8, #0x40]

; 501  :     pPRCMReg->ulPRCM_CLKSSETUP = ulaRegisterContext[ulPRCM_CLKSSETUP];
; 502  :     pPRCMReg->ulPM_PWSTCTRL_CORE = ulaRegisterContext[ulPM_PWSTCTRL_CORE];

  00744	e58e32a0	 str         r3, [lr, #0x2A0]
  00748	e5983044	 ldr         r3, [r8, #0x44]

; 503  :     pPRCMReg->ulPM_WKDEP_MPU = ulaRegisterContext[ulPM_WKDEP_MPU];
; 504  :     pPRCMReg->ulPM_WKDEP_DSP = ulaRegisterContext[ulPM_WKDEP_DSP];

  0074c	e58e32a4	 str         r3, [lr, #0x2A4]
  00750	e5983048	 ldr         r3, [r8, #0x48]

; 505  :     pPRCMReg->ulPM_WKDEP_GFX = ulaRegisterContext[ulPM_WKDEP_GFX];

  00754	e58e3530	 str         r3, [lr, #0x530]
  00758	e598304c	 ldr         r3, [r8, #0x4C]

; 506  :     pGPIO3Regs->ulGPIO_IRQENABLE1 = ulaRegisterContext[ulGPIO_IRQENABLE1];
; 507  : 
; 508  :     //Restore domain states
; 509  :     pPRCMReg->ulPM_PWSTCTRL_MPU = ulaRegisterContext[ulPM_PWSTCTRL_MPU];

  0075c	e58e3060	 str         r3, [lr, #0x60]
  00760	e5983050	 ldr         r3, [r8, #0x50]

; 510  :     pPRCMReg->ulPM_PWSTCTRL_DSP = ulaRegisterContext[ulPM_PWSTCTRL_DSP];
; 511  :     pPRCMReg->ulPM_PWSTCTRL_GFX = ulaRegisterContext[ulPM_PWSTCTRL_GFX];

  00764	e58e3094	 str         r3, [lr, #0x94]
  00768	e5983054	 ldr         r3, [r8, #0x54]
  0076c	e58e32e0	 str         r3, [lr, #0x2E0]
  00770	e5983058	 ldr         r3, [r8, #0x58]
  00774	e58e31c8	 str         r3, [lr, #0x1C8]
  00778	e598305c	 ldr         r3, [r8, #0x5C]
  0077c	e58e38c8	 str         r3, [lr, #0x8C8]
  00780	e5983060	 ldr         r3, [r8, #0x60]
  00784	e58e33c8	 str         r3, [lr, #0x3C8]
  00788	e5983064	 ldr         r3, [r8, #0x64]
  0078c	e580301c	 str         r3, [r0, #0x1C]
  00790	e5983068	 ldr         r3, [r8, #0x68]
  00794	e58e31e0	 str         r3, [lr, #0x1E0]
  00798	e598306c	 ldr         r3, [r8, #0x6C]
  0079c	e58e38e0	 str         r3, [lr, #0x8E0]
  007a0	e5983070	 ldr         r3, [r8, #0x70]
  007a4	e58e33e0	 str         r3, [lr, #0x3E0]

; 512  : 
; 513  :     // Reinitialize KITL
; 514  :     if ((pArgs->flags & OAL_KITL_FLAGS_ENABLED) != 0)

  007a8	e59b3000	 ldr         r3, [r11]
  007ac	e3130001	 tst         r3, #1

; 515  :     {
; 516  :         OALKitlPowerOn();

  007b0	1b000000	 blne        OALKitlPowerOn

; 517  :     }
; 518  : 
; 519  :     //Restore interrupt masks
; 520  :     pIntcRegs->ulINTC_MIR0 = ulaRegisterContext[ulINTC_MIR0];

  007b4	e5992004	 ldr         r2, [r9, #4]
  007b8	e5983000	 ldr         r3, [r8]

; 521  :     pIntcRegs->ulINTC_MIR1 = ulaRegisterContext[ulINTC_MIR1];
; 522  :     pIntcRegs->ulINTC_MIR2 = ulaRegisterContext[ulINTC_MIR2];
; 523  : 
; 524  :     OALMSG(1, (L"-OEMPowerOff\r\n"));

  007bc	e59f0020	 ldr         r0, [pc, #0x20]
  007c0	e5823084	 str         r3, [r2, #0x84]
  007c4	e5983004	 ldr         r3, [r8, #4]
  007c8	e58230a4	 str         r3, [r2, #0xA4]
  007cc	e5983008	 ldr         r3, [r8, #8]
  007d0	e58230c4	 str         r3, [r2, #0xC4]
  007d4	eb000000	 bl          NKDbgPrintfW

; 525  : }

  007d8	e28dd004	 add         sp, sp, #4
  007dc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  007e0	e12fff1e	 bx          lr
  007e4		 |$LN9@OEMPowerOf|
  007e4		 |$LN10@OEMPowerOf|
  007e4	00000000	 DCD         |??_C@_1BO@JBBKKIFK@?$AA?9?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  007e8		 |$LN11@OEMPowerOf|
  007e8	00000000	 DCD         |??_C@_1FK@CMMOMPH@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAp?$AAP?$AAR?$AAC?$AAM?$AAR?$AAe?$AAg?$AA?9?$AA?$DO?$AAu?$AAl?$AAP?$AAM?$AA_?$AAW?$AAK?$AAS?$AAT@|
  007ec		 |$LN12@OEMPowerOf|
  007ec	04667ff8	 DCD         0x4667ff8
  007f0		 |$LN13@OEMPowerOf|
  007f0	00000000	 DCD         |??_C@_1DO@LPOMOEEB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAB?$AAa?$AAc?$AAk?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAs?$AAl?$AAe?$AAe?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  007f4		 |$LN14@OEMPowerOf|
  007f4	00000000	 DCD         |??_C@_1EG@GJBNLJCO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ@|
  007f8		 |$LN15@OEMPowerOf|
  007f8	00000000	 DCD         |OALCPUIdle|
  007fc		 |$LN16@OEMPowerOf|
  007fc	00000000	 DCD         |??_C@_1DO@KHIJKAFF@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAC?$AAP?$AAU?$AAI?$AAd?$AAl?$AAe?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00800		 |$LN17@OEMPowerOf|
  00800	00000000	 DCD         |??_C@_1FC@MBKDOABO@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAV?$AAa?$AAl?$AA?3?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt@|
  00804		 |$LN18@OEMPowerOf|
  00804	00000000	 DCD         |??_C@_1EK@PJIFMPOD@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAp?$AAt?$AAr?$AA?5?$AA?$CI?$AA?$CF@|
  00808		 |$LN19@OEMPowerOf|
  00808	00000000	 DCD         |??_C@_1EM@LMPKPHIB@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA_?$AAf?$AAu?$AAn?$AAc?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CI@|
  0080c		 |$LN20@OEMPowerOf|
  0080c	00000000	 DCD         |OALCPUIdle_sz|
  00810		 |$LN21@OEMPowerOf|
  00810	4020f800	 DCD         0x4020f800
  00814		 |$LN22@OEMPowerOf|
  00814	00000000	 DCD         |ulaRegisterContext|
  00818		 |$LN23@OEMPowerOf|
  00818	00000000	 DCD         |??_C@_1DK@GPINFMBJ@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAK?$AAI?$AAT?$AAL?$AA?5?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0081c		 |$LN24@OEMPowerOf|
  0081c	00000000	 DCD         |??_C@_1DO@BEFEDDKA@?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?3?$AA?5?$AAI?$AAD?$AAC?$AAO?$AAD?$AAE?$AA_?$AAr?$AAe?$AAg?$AA?5?$AA?$CI?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00820		 |$LN25@OEMPowerOf|
  00820	48014204	 DCD         0x48014204
  00824		 |$LN26@OEMPowerOf|
  00824	00000000	 DCD         |g_oalWakeSource|
  00828		 |$LN27@OEMPowerOf|
  00828	00000000	 DCD         |??_C@_1BO@BIFIOCGK@?$AA?$CL?$AAO?$AAE?$AAM?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  0082c		 |$LN28@OEMPowerOf|
  0082c	00000000	 DCD         |?pGPIO4Regs@?1??OEMPowerOff@@9@9|
  00830		 |$M45778|

			 ENDP  ; |OEMPowerOff|

	EXPORT	|OALIoCtlHalPresuspend|
	EXPORT	|??_C@_1DA@CNMCBAAE@?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAP?$AAr?$AAe?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45809| DCD	|$LN5@OALIoCtlHa|
	DCD	0x40000701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CNMCBAAE@?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAP?$AAr?$AAe?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C", 0x0, "t"
	DCB	0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "P", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalPresuspend| PROC

; 538  : {

  00000		 |$LN5@OALIoCtlHa|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45806|

; 539  : 	OALMSG(1, (L"OALIoCtlHalPresuspend\r\n"));

  00004	e59f000c	 ldr         r0, [pc, #0xC]
  00008	eb000000	 bl          NKDbgPrintfW

; 540  :     return TRUE;

  0000c	e3a00001	 mov         r0, #1

; 541  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$LN6@OALIoCtlHa|
  00018		 |$LN7@OALIoCtlHa|
  00018	00000000	 DCD         |??_C@_1DA@CNMCBAAE@?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAP?$AAr?$AAe?$AAs?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0001c		 |$M45807|

			 ENDP  ; |OALIoCtlHalPresuspend|

	END
