; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\ETHDRV\USBFN\pdd.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|g_usbfnpdd|, 0x128


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\ethdrv\usbfn\pdd.c

  00000			 AREA	 |.pdata|, PDATA
|$T46894| DCD	|$LN10@Log2|
	DCD	0x40000900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Log2|	 PROC

; 109  : {

  00000		 |$LN10@Log2|
  00000		 |$M46891|
  00000	e1b03000	 movs        r3, r0

; 110  :     DWORD rc = 0;

  00004	e3a00000	 mov         r0, #0

; 111  :     while (value != 0) {

  00008	0a000004	 beq         |$LN1@Log2|
  0000c		 |$LL3@Log2|

; 112  :         value >>= 1;

  0000c	e1b030a3	 movs        r3, r3, lsr #1

; 113  :         rc++;

  00010	e2800001	 add         r0, r0, #1
  00014	1afffffc	 bne         |$LL3@Log2|

; 114  :     }
; 115  :     if (rc > 0) rc--;

  00018	e3500000	 cmp         r0, #0
  0001c	12400001	 subne       r0, r0, #1
  00020		 |$LN1@Log2|

; 116  :     return rc;
; 117  : }

  00020	e12fff1e	 bx          lr
  00024		 |$M46892|

			 ENDP  ; |Log2|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|??_C@_1EO@NECIJIIB@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@NFJNGFJM@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@NHEDGCLL@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@NGPGJPKG@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T46922| DCD	|$LN25@SetupEvent|
	DCD	0xc0006202

  00000			 AREA	 |.xdata|, DATA
|$T46918| DCD	0xffffffec

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@NECIJIIB@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "D", 0x0, " ", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "p", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "["
	DCB	0x0, "3", 0x0, "]", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@NFJNGFJM@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "D", 0x0, " ", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "p", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "["
	DCB	0x0, "2", 0x0, "]", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@NHEDGCLL@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "D", 0x0, " ", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "p", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "["
	DCB	0x0, "1", 0x0, "]", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@NGPGJPKG@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "D", 0x0, " ", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "u", 0x0, "p", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, "["
	DCB	0x0, "0", 0x0, "]", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T46918|

  00008		 |SetupEvent| PROC

; 126  : {

  00008		 |$LN25@SetupEvent|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M46919|
  00010	e1a06000	 mov         r6, r0
  00014	e59f3170	 ldr         r3, [pc, #0x170]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3008	 str         r3, [sp, #8]

; 127  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;

  00020	e5964008	 ldr         r4, [r6, #8]
  00024	e3a02040	 mov         r2, #0x40
  00028	e3a01000	 mov         r1, #0
  0002c		 |$LL8@SetupEvent|

; 128  :     WORD data[4];
; 129  :     USB_DEVICE_REQUEST *pSetup = (USB_DEVICE_REQUEST*)data;
; 130  : 
; 131  :     do {
; 132  : 
; 133  :         // Select setup FIFO (this clears USBD_INT_SETUP flag)
; 134  :         OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SETUP);

  0002c	e5842004	 str         r2, [r4, #4]

; 135  : 
; 136  :         // Read setup data
; 137  :         data[0] = (WORD)INREG32(&pUSBDRegs->DATA);

  00030	e5943008	 ldr         r3, [r4, #8]
  00034	e1cd30b0	 strh        r3, [sp]

; 138  :         data[1] = (WORD)INREG32(&pUSBDRegs->DATA);

  00038	e5943008	 ldr         r3, [r4, #8]
  0003c	e1cd30b2	 strh        r3, [sp, #2]

; 139  :         data[2] = (WORD)INREG32(&pUSBDRegs->DATA);

  00040	e5943008	 ldr         r3, [r4, #8]
  00044	e1cd30b4	 strh        r3, [sp, #4]

; 140  :         data[3] = (WORD)INREG32(&pUSBDRegs->DATA);

  00048	e5943008	 ldr         r3, [r4, #8]
  0004c	e1cd30b6	 strh        r3, [sp, #6]

; 141  : 
; 142  :         // Deselect setup FIFO
; 143  :         OUTREG32(&pUSBDRegs->EP_NUM, 0);

  00050	e5841004	 str         r1, [r4, #4]

; 144  : 
; 145  :     } while ((INREG32(&pUSBDRegs->IRQ_SRC) & USBD_INT_SETUP) != 0);

  00054	e5943030	 ldr         r3, [r4, #0x30]
  00058	e3130004	 tst         r3, #4
  0005c	1afffff2	 bne         |$LL8@SetupEvent|

; 146  : 
; 147  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"USBD SetupEvent() - data[0] = 0x%04X\r\n", data[0]));

  00060	e59f5120	 ldr         r5, [pc, #0x120]
  00064	e5953440	 ldr         r3, [r5, #0x440]
  00068	e3130a02	 tst         r3, #2, 20
  0006c	0a000005	 beq         |$LN11@SetupEvent|
  00070	e3130004	 tst         r3, #4
  00074	0a000003	 beq         |$LN11@SetupEvent|
  00078	e1dd10b0	 ldrh        r1, [sp]
  0007c	e59f0100	 ldr         r0, [pc, #0x100]
  00080	eb000000	 bl          NKDbgPrintfW
  00084	e5953440	 ldr         r3, [r5, #0x440]
  00088		 |$LN11@SetupEvent|

; 148  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"USBD SetupEvent() - data[1] = 0x%04X\r\n", data[1]));

  00088	e3130a02	 tst         r3, #2, 20
  0008c	0a000005	 beq         |$LN13@SetupEvent|
  00090	e3130004	 tst         r3, #4
  00094	0a000003	 beq         |$LN13@SetupEvent|
  00098	e1dd10b2	 ldrh        r1, [sp, #2]
  0009c	e59f00dc	 ldr         r0, [pc, #0xDC]
  000a0	eb000000	 bl          NKDbgPrintfW
  000a4	e5953440	 ldr         r3, [r5, #0x440]
  000a8		 |$LN13@SetupEvent|

; 149  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"USBD SetupEvent() - data[2] = 0x%04X\r\n", data[2]));

  000a8	e3130a02	 tst         r3, #2, 20
  000ac	0a000005	 beq         |$LN15@SetupEvent|
  000b0	e3130004	 tst         r3, #4
  000b4	0a000003	 beq         |$LN15@SetupEvent|
  000b8	e1dd10b4	 ldrh        r1, [sp, #4]
  000bc	e59f00b8	 ldr         r0, [pc, #0xB8]
  000c0	eb000000	 bl          NKDbgPrintfW
  000c4	e5953440	 ldr         r3, [r5, #0x440]
  000c8		 |$LN15@SetupEvent|

; 150  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"USBD SetupEvent() - data[3] = 0x%04X\r\n", data[3]));

  000c8	e3130a02	 tst         r3, #2, 20
  000cc	13130004	 tstne       r3, #4
  000d0	11dd10b6	 ldrneh      r1, [sp, #6]
  000d4	159f009c	 ldrne       r0, [pc, #0x9C]
  000d8	1b000000	 blne        NKDbgPrintfW

; 151  : 
; 152  :     // Save setup packet direction & size for later use
; 153  :     pPdd->setupDirRx = (pSetup->bmRequestType & 0x80) == 0;

  000dc	e5dd1000	 ldrb        r1, [sp]

; 154  :     pPdd->setupCount = pSetup->wLength;

  000e0	e1dd30b6	 ldrh        r3, [sp, #6]
  000e4	e3110080	 tst         r1, #0x80
  000e8	03a02001	 moveq       r2, #1
  000ec	13a02000	 movne       r2, #0
  000f0	e5862018	 str         r2, [r6, #0x18]

; 155  : 
; 156  :     // MDD doesn't call PDD back on configure message
; 157  :     if (
; 158  :         pSetup->bmRequestType == 0 &&
; 159  :         pSetup->bRequest == USB_REQUEST_SET_CONFIGURATION
; 160  :     ) {

  000f4	e3510000	 cmp         r1, #0
  000f8	e1c631bc	 strh        r3, [r6, #0x1C]
  000fc	1a000012	 bne         |$LN1@SetupEvent|
  00100	e5dd3001	 ldrb        r3, [sp, #1]
  00104	e3530009	 cmp         r3, #9
  00108	1a00000f	 bne         |$LN1@SetupEvent|

; 161  :         if (pSetup->wValue != 0) {

  0010c	e1dd30b2	 ldrh        r3, [sp, #2]
  00110	e3530000	 cmp         r3, #0
  00114	0a00000a	 beq         |$LN4@SetupEvent|

; 162  :             // Move device to configured state
; 163  :             OUTREG32(&pUSBDRegs->SYSCON2, USBD_SYSCON2_DEV_CFG);

  00118	e3a03008	 mov         r3, #8
  0011c	e584301c	 str         r3, [r4, #0x1C]

; 164  :             // Set self powered flag
; 165  :             if (pPdd->selfPowered) {

  00120	e5963014	 ldr         r3, [r6, #0x14]
  00124	e3530000	 cmp         r3, #0

; 166  :                 SETREG32(&pUSBDRegs->SYSCON1, USBD_SYSCON1_SELF_PWR);

  00128	e5943018	 ldr         r3, [r4, #0x18]
  0012c	13833004	 orrne       r3, r3, #4

; 167  :             } else {
; 168  :                 CLRREG32(&pUSBDRegs->SYSCON1, USBD_SYSCON1_SELF_PWR);

  00130	15843018	 strne       r3, [r4, #0x18]
  00134	1a000004	 bne         |$LN1@SetupEvent|
  00138	e3c33004	 bic         r3, r3, #4
  0013c	e5843018	 str         r3, [r4, #0x18]

; 169  :             }
; 170  :         } else {

  00140	ea000001	 b           |$LN1@SetupEvent|
  00144		 |$LN4@SetupEvent|

; 171  :             OUTREG32(&pUSBDRegs->SYSCON2, USBD_SYSCON2_CLR_CFG);

  00144	e3a03004	 mov         r3, #4
  00148	e584301c	 str         r3, [r4, #0x1C]
  0014c		 |$LN1@SetupEvent|

; 172  :         }
; 173  :     }
; 174  : 
; 175  :     // Let MDD process message
; 176  :     pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_SETUP_PACKET, (DWORD)data);

  0014c	e5960000	 ldr         r0, [r6]
  00150	e5963004	 ldr         r3, [r6, #4]
  00154	e28d2000	 add         r2, sp, #0
  00158	e3a01004	 mov         r1, #4
  0015c	e1a0e00f	 mov         lr, pc
  00160	e12fff13	 bx          r3
  00164	e59d0008	 ldr         r0, [sp, #8]
  00168	eb000000	 bl          __security_check_cookie

; 177  : }

  0016c	e28dd00c	 add         sp, sp, #0xC
  00170	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00174	e12fff1e	 bx          lr
  00178		 |$LN26@SetupEvent|
  00178		 |$LN27@SetupEvent|
  00178	00000000	 DCD         |??_C@_1EO@NECIJIIB@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA3?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  0017c		 |$LN28@SetupEvent|
  0017c	00000000	 DCD         |??_C@_1EO@NFJNGFJM@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA2?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  00180		 |$LN29@SetupEvent|
  00180	00000000	 DCD         |??_C@_1EO@NHEDGCLL@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  00184		 |$LN30@SetupEvent|
  00184	00000000	 DCD         |??_C@_1EO@NGPGJPKG@?$AAU?$AAS?$AAB?$AAD?$AA?5?$AAS?$AAe?$AAt?$AAu?$AAp?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAd?$AAa?$AAt?$AAa?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  00188		 |$LN31@SetupEvent|
  00188	00000000	 DCD         |dpCurSettings|
  0018c		 |$LN32@SetupEvent|
  0018c	00000000	 DCD         |__security_cookie|
  00190		 |$M46920|

			 ENDP  ; |SetupEvent|

	EXPORT	|??_C@_1HM@LNNMMNAI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T46960| DCD	|$LN27@IssueTxTra|
	DCD	0x40006802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LNNMMNAI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "!", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "T", 0x0, "x", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IssueTxTransfer| PROC

; 187  : {

  00000		 |$LN27@IssueTxTra|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M46957|
  00008	e1a07001	 mov         r7, r1
  0000c	e1a06000	 mov         r6, r0

; 188  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 189  :     STransfer *pTransfer;
; 190  :     BOOL complete = FALSE;
; 191  :     DWORD epNum, stat, space, count, remain;
; 192  :     UCHAR *pBuffer;
; 193  :     WORD data;
; 194  : 
; 195  :     // Get active transfer
; 196  :     pTransfer = pPdd->ep[endPoint].pTransfer;
; 197  : 
; 198  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 199  :         L"UsbFnPdd!IssueTxTransfer: EP %d pTransfer 0x%x (%d, %d, %d)\r\n",
; 200  :         endPoint, pTransfer, pTransfer != NULL ? pTransfer->cbBuffer : 0,
; 201  :         pTransfer != NULL ? pTransfer->cbTransferred : 0,
; 202  :         pTransfer != NULL ? pTransfer->dwUsbError : -1
; 203  :     ));

  00010	e59f3184	 ldr         r3, [pc, #0x184]
  00014	e0869207	 add         r9, r6, r7, lsl #4
  00018	e5968008	 ldr         r8, [r6, #8]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e5994030	 ldr         r4, [r9, #0x30]
  00024	e3a0b000	 mov         r11, #0
  00028	e3130a02	 tst         r3, #2, 20
  0002c	0a000010	 beq         |$LN13@IssueTxTra|
  00030	e3130004	 tst         r3, #4
  00034	0a00000e	 beq         |$LN13@IssueTxTra|
  00038	e3540000	 cmp         r4, #0
  0003c	15945014	 ldrne       r5, [r4, #0x14]
  00040	03e05000	 mvneq       r5, #0
  00044	e3540000	 cmp         r4, #0
  00048	1594e010	 ldrne       lr, [r4, #0x10]
  0004c	03a0e000	 moveq       lr, #0
  00050	e59f0140	 ldr         r0, [pc, #0x140]
  00054	e3540000	 cmp         r4, #0
  00058	1594300c	 ldrne       r3, [r4, #0xC]
  0005c	03a03000	 moveq       r3, #0
  00060	e1a02004	 mov         r2, r4
  00064	e1a01007	 mov         r1, r7
  00068	e58d5004	 str         r5, [sp, #4]
  0006c	e58de000	 str         lr, [sp]
  00070	eb000000	 bl          NKDbgPrintfW
  00074		 |$LN13@IssueTxTra|

; 204  : 
; 205  :     // Select EP
; 206  :     epNum = (USBD_EP_NUM & endPoint) | USBD_EP_NUM_DIRIN;

  00074	e207300f	 and         r3, r7, #0xF
  00078	e383a010	 orr         r10, r3, #0x10

; 207  :     OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);

  0007c	e38a3020	 orr         r3, r10, #0x20
  00080	e5883004	 str         r3, [r8, #4]

; 208  : 
; 209  :     // Get EP status
; 210  :     stat = INREG32(&pUSBDRegs->STAT_FLG);

  00084	e5983010	 ldr         r3, [r8, #0x10]

; 211  : 
; 212  :     // Depending on EP status
; 213  :     if ((stat & USBD_STAT_STALL) != 0) {

  00088	e3a0e000	 mov         lr, #0
  0008c	e3130020	 tst         r3, #0x20

; 214  :         // We issued stall, remove it...
; 215  :         OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_CLR_HALT);

  00090	13a03080	 movne       r3, #0x80
  00094	1588300c	 strne       r3, [r8, #0xC]
  00098	1a000032	 bne         |$clean$46175|

; 216  :         // We are done
; 217  :         goto clean;
; 218  :     }
; 219  : 
; 220  :     // When transfer is NULL it is handshake ACK
; 221  :     if (pTransfer == NULL) goto clean;

  0009c	e3540000	 cmp         r4, #0
  000a0	0a000030	 beq         |$clean$46175|

; 222  : 
; 223  :     // Is this final interrupt of transfer? 
; 224  :     if (
; 225  :         pTransfer->cbTransferred == pTransfer->cbBuffer && 
; 226  :         !pPdd->ep[endPoint].zeroLength
; 227  :     ) {

  000a4	e5941010	 ldr         r1, [r4, #0x10]
  000a8	e594200c	 ldr         r2, [r4, #0xC]
  000ac	e1510002	 cmp         r1, r2
  000b0	0599302c	 ldreq       r3, [r9, #0x2C]
  000b4	03530000	 cmpeq       r3, #0

; 228  :         pTransfer->dwUsbError = UFN_NO_ERROR;

  000b8	0584e014	 streq       lr, [r4, #0x14]

; 229  :         complete = TRUE;

  000bc	03a0b001	 moveq       r11, #1
  000c0	0a000028	 beq         |$clean$46175|

; 230  :         goto clean;
; 231  :     }
; 232  : 
; 233  :     pBuffer = (UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;

  000c4	e5943004	 ldr         r3, [r4, #4]

; 234  :     space = pTransfer->cbBuffer - pTransfer->cbTransferred;
; 235  : 
; 236  :     if (endPoint != 0) {

  000c8	e3570000	 cmp         r7, #0
  000cc	e0420001	 sub         r0, r2, r1
  000d0	e0835001	 add         r5, r3, r1

; 237  :         // Non Zero Endpoint: No zero length padding needed.
; 238  :         pPdd->ep[endPoint].zeroLength = FALSE;

  000d4	1589e02c	 strne       lr, [r9, #0x2C]
  000d8	1a000008	 bne         |$LN6@IssueTxTra|

; 239  :     } else {
; 240  :         // Zero endpoint: Zero length padding needed if last
; 241  :         // packet is maxPacketSize.
; 242  :         pPdd->ep[endPoint].zeroLength = (
; 243  :             space == pPdd->ep[endPoint].maxPacketSize && 
; 244  :             pPdd->setupCount > pTransfer->cbBuffer
; 245  :         );

  000dc	e1d632b4	 ldrh        r3, [r6, #0x24]
  000e0	e1500003	 cmp         r0, r3
  000e4	1a000003	 bne         |$LN21@IssueTxTra|
  000e8	e1d631bc	 ldrh        r3, [r6, #0x1C]
  000ec	e1530002	 cmp         r3, r2
  000f0	83a03001	 movhi       r3, #1
  000f4	8a000000	 bhi         |$LN22@IssueTxTra|
  000f8		 |$LN21@IssueTxTra|
  000f8	e3a03000	 mov         r3, #0
  000fc		 |$LN22@IssueTxTra|
  000fc	e586302c	 str         r3, [r6, #0x2C]
  00100		 |$LN6@IssueTxTra|

; 246  :     }        
; 247  : 
; 248  :     // How many bytes we can send just now?
; 249  :     count = pPdd->ep[endPoint].maxPacketSize;

  00100	e1d912b4	 ldrh        r1, [r9, #0x24]

; 250  :     if (count > space) count = space;

  00104	e1510000	 cmp         r1, r0
  00108	81a01000	 movhi       r1, r0

; 251  : 
; 252  :     // Write data to FIFO
; 253  :     remain = count;
; 254  :     while (remain > 1) {

  0010c	e3510001	 cmp         r1, #1
  00110	9a00000b	 bls         |$LN3@IssueTxTra|
  00114	e2413002	 sub         r3, r1, #2
  00118	e1a030a3	 mov         r3, r3, lsr #1
  0011c	e283e001	 add         lr, r3, #1
  00120		 |$LL4@IssueTxTra|

; 255  :         data = (pBuffer[1] << 8) | pBuffer[0];
; 256  :         OUTREG16((UINT16*)&pUSBDRegs->DATA, data);

  00120	e5d52001	 ldrb        r2, [r5, #1]
  00124	e4d53002	 ldrb        r3, [r5], #2

; 257  :         pBuffer += 2;
; 258  :         space -= 2;

  00128	e2400002	 sub         r0, r0, #2

; 259  :         remain -= 2;

  0012c	e2411002	 sub         r1, r1, #2
  00130	e25ee001	 subs        lr, lr, #1
  00134	e1833402	 orr         r3, r3, r2, lsl #8
  00138	e1c830b8	 strh        r3, [r8, #8]
  0013c	1afffff7	 bne         |$LL4@IssueTxTra|
  00140	e3a0e000	 mov         lr, #0
  00144		 |$LN3@IssueTxTra|

; 260  :     }
; 261  :     if (remain > 0) {

  00144	e3510000	 cmp         r1, #0

; 262  :         OUTREG8((UINT8*)&pUSBDRegs->DATA, *pBuffer);

  00148	15d53000	 ldrneb      r3, [r5]

; 263  :         pBuffer += 1;
; 264  :         space -= 1;

  0014c	12400001	 subne       r0, r0, #1
  00150	15c83008	 strneb      r3, [r8, #8]

; 265  :         remain -= 1;
; 266  :     }
; 267  : 
; 268  :     // Enable FIFO
; 269  :     OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_FIFO_EN);

  00154	e3a03004	 mov         r3, #4
  00158	e588300c	 str         r3, [r8, #0xC]

; 270  : 
; 271  :     // We transfered some data
; 272  :     pTransfer->cbTransferred = pTransfer->cbBuffer - space;

  0015c	e594300c	 ldr         r3, [r4, #0xC]
  00160	e0433000	 sub         r3, r3, r0
  00164	e5843010	 str         r3, [r4, #0x10]
  00168		 |$clean$46175|

; 273  : 
; 274  : clean:
; 275  : 
; 276  :     // Deselect EP
; 277  :     OUTREG32(&pUSBDRegs->EP_NUM, epNum);
; 278  : 
; 279  :     // If transaction is complete we should tell MDD
; 280  :     if (complete) {

  00168	e35b0000	 cmp         r11, #0
  0016c	e588a004	 str         r10, [r8, #4]

; 281  :         pPdd->ep[endPoint].pTransfer = NULL;

  00170	1589e030	 strne       lr, [r9, #0x30]

; 282  :         pPdd->pfnNotify(
; 283  :             pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer
; 284  :         );

  00174	15960000	 ldrne       r0, [r6]
  00178	15963004	 ldrne       r3, [r6, #4]
  0017c	11a02004	 movne       r2, r4
  00180	13a01064	 movne       r1, #0x64
  00184	11a0e00f	 movne       lr, pc
  00188	112fff13	 bxne        r3

; 285  :     }
; 286  : }

  0018c	e28dd008	 add         sp, sp, #8
  00190	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00194	e12fff1e	 bx          lr
  00198		 |$LN28@IssueTxTra|
  00198		 |$LN29@IssueTxTra|
  00198	00000000	 DCD         |??_C@_1HM@LNNMMNAI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAs?$AAs?$AAu?$AAe?$AAT?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@|
  0019c		 |$LN30@IssueTxTra|
  0019c	00000000	 DCD         |dpCurSettings|
  001a0		 |$M46958|

			 ENDP  ; |IssueTxTransfer|

	EXPORT	|??_C@_1HM@BCFIOLEH@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T46995| DCD	|$LN30@IssueRxTra|
	DCD	0x40006b02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@BCFIOLEH@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "!", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "R", 0x0, "x", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IssueRxTransfer| PROC

; 296  : {

  00000		 |$LN30@IssueRxTra|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M46992|
  00008	e1a07001	 mov         r7, r1
  0000c	e1a09000	 mov         r9, r0

; 297  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 298  :     STransfer *pTransfer;
; 299  :     BOOL complete = FALSE;
; 300  :     DWORD epNum, stat, space, count, remain, maxSize;
; 301  :     UCHAR *pBuffer;
; 302  :     WORD data;
; 303  : 
; 304  :     // Get active transfer
; 305  :     pTransfer = pPdd->ep[endPoint].pTransfer;
; 306  : 
; 307  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 308  :         L"UsbFnPdd!IssueRxTransfer: EP %d pTransfer 0x%x (%d, %d, %d)\r\n",
; 309  :         endPoint, pTransfer, pTransfer != NULL ? pTransfer->cbBuffer : 0,
; 310  :         pTransfer != NULL ? pTransfer->cbTransferred : 0,
; 311  :         pTransfer != NULL ? pTransfer->dwUsbError : -1
; 312  :     ));

  00010	e59f3190	 ldr         r3, [pc, #0x190]
  00014	e0895207	 add         r5, r9, r7, lsl #4
  00018	e5996008	 ldr         r6, [r9, #8]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e5954030	 ldr         r4, [r5, #0x30]
  00024	e58d5008	 str         r5, [sp, #8]
  00028	e3130a02	 tst         r3, #2, 20
  0002c	e3a0b000	 mov         r11, #0
  00030	0a000011	 beq         |$LN18@IssueRxTra|
  00034	e3130004	 tst         r3, #4
  00038	0a00000f	 beq         |$LN18@IssueRxTra|
  0003c	e3540000	 cmp         r4, #0
  00040	15945014	 ldrne       r5, [r4, #0x14]
  00044	03e05000	 mvneq       r5, #0
  00048	e3540000	 cmp         r4, #0
  0004c	1594e010	 ldrne       lr, [r4, #0x10]
  00050	03a0e000	 moveq       lr, #0
  00054	e59f0148	 ldr         r0, [pc, #0x148]
  00058	e3540000	 cmp         r4, #0
  0005c	1594300c	 ldrne       r3, [r4, #0xC]
  00060	03a03000	 moveq       r3, #0
  00064	e1a02004	 mov         r2, r4
  00068	e1a01007	 mov         r1, r7
  0006c	e58d5004	 str         r5, [sp, #4]
  00070	e58de000	 str         lr, [sp]
  00074	eb000000	 bl          NKDbgPrintfW
  00078	e0895207	 add         r5, r9, r7, lsl #4
  0007c		 |$LN18@IssueRxTra|

; 313  : 
; 314  :     // Select EP
; 315  :     epNum = USBD_EP_NUM & endPoint;

  0007c	e207a00f	 and         r10, r7, #0xF

; 316  :     OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);

  00080	e38a3020	 orr         r3, r10, #0x20
  00084	e5863004	 str         r3, [r6, #4]

; 317  : 
; 318  :     // Get EP status
; 319  :     stat = INREG32(&pUSBDRegs->STAT_FLG);

  00088	e5963010	 ldr         r3, [r6, #0x10]

; 320  : 
; 321  :     // Depending on EP status
; 322  :     if ((stat & USBD_STAT_STALL) != 0) {

  0008c	e3a02000	 mov         r2, #0
  00090	e3130020	 tst         r3, #0x20

; 323  :         // We issued stall, remove it...
; 324  :         OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_CLR_HALT);

  00094	13a03080	 movne       r3, #0x80
  00098	1586300c	 strne       r3, [r6, #0xC]
  0009c	1a000034	 bne         |$clean$46228|

; 325  :         // We are done
; 326  :         goto clean;
; 327  :     }
; 328  : 
; 329  :     // When transfer is NULL it is handshake ACK
; 330  :     if (pTransfer == NULL) goto clean;

  000a0	e3540000	 cmp         r4, #0
  000a4	0a000032	 beq         |$clean$46228|

; 331  : 
; 332  :     // Get maxPacketSize
; 333  :     maxSize = pPdd->ep[endPoint].maxPacketSize;
; 334  : 
; 335  :         pBuffer = (UCHAR*)pTransfer->pvBuffer + pTransfer->cbTransferred;
; 336  :         space = pTransfer->cbBuffer - pTransfer->cbTransferred;
; 337  : 
; 338  :         // Get EP status flag
; 339  :         stat = INREG32(&pUSBDRegs->STAT_FLG);

  000a8	e5960010	 ldr         r0, [r6, #0x10]
  000ac	e5941010	 ldr         r1, [r4, #0x10]
  000b0	e5943004	 ldr         r3, [r4, #4]
  000b4	e594200c	 ldr         r2, [r4, #0xC]

; 340  : 
; 341  :         // Get number of bytes in FIFO
; 342  :         if ((stat & USBD_STAT_FIFO_EMPTY) != 0) {

  000b8	e3100002	 tst         r0, #2
  000bc	e1d582b4	 ldrh        r8, [r5, #0x24]
  000c0	e0837001	 add         r7, r3, r1
  000c4	e042e001	 sub         lr, r2, r1

; 343  :             count = 0;

  000c8	13a01000	 movne       r1, #0
  000cc	1a000005	 bne         |$LN10@IssueRxTra|

; 344  :         } else if ((stat & USBD_STAT_FIFO_FULL) != 0) {

  000d0	e3100001	 tst         r0, #1

; 345  :             count = maxSize;
; 346  :         } else {
; 347  :             count = INREG32(&pUSBDRegs->RXFSTAT) & USBD_RFXSTAT_COUNT;

  000d4	05962014	 ldreq       r2, [r6, #0x14]
  000d8	03a03c03	 moveq       r3, #3, 24
  000dc	038330ff	 orreq       r3, r3, #0xFF
  000e0	11a01008	 movne       r1, r8
  000e4	00021003	 andeq       r1, r2, r3
  000e8		 |$LN10@IssueRxTra|

; 348  :         }
; 349  : 
; 350  :         // Read data
; 351  :         remain = count;

  000e8	e1a00001	 mov         r0, r1

; 352  :         while (remain > 1) {

  000ec	e3510001	 cmp         r1, #1
  000f0	9a00000d	 bls         |$LN8@IssueRxTra|
  000f4	e2413002	 sub         r3, r1, #2
  000f8	e1a030a3	 mov         r3, r3, lsr #1
  000fc	e2835001	 add         r5, r3, #1
  00100		 |$LL9@IssueRxTra|

; 353  :             data = (WORD)INREG32(&pUSBDRegs->DATA);

  00100	e5962008	 ldr         r2, [r6, #8]

; 354  :             if (space > 1) {

  00104	e35e0001	 cmp         lr, #1

; 355  :                 pBuffer[0] = (UCHAR)data;
; 356  :                 pBuffer[1] = (UCHAR)(data >> 8);
; 357  :                 pBuffer += 2;
; 358  :                 space -= 2;

  00108	824ee002	 subhi       lr, lr, #2
  0010c	81a03422	 movhi       r3, r2, lsr #8
  00110	85c73001	 strhib      r3, [r7, #1]
  00114	85c72000	 strhib      r2, [r7]
  00118	82877002	 addhi       r7, r7, #2

; 359  :             }
; 360  :             remain -= 2;

  0011c	e2555001	 subs        r5, r5, #1
  00120	e2400002	 sub         r0, r0, #2
  00124	1afffff5	 bne         |$LL9@IssueRxTra|

; 297  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 298  :     STransfer *pTransfer;
; 299  :     BOOL complete = FALSE;
; 300  :     DWORD epNum, stat, space, count, remain, maxSize;
; 301  :     UCHAR *pBuffer;
; 302  :     WORD data;
; 303  : 
; 304  :     // Get active transfer
; 305  :     pTransfer = pPdd->ep[endPoint].pTransfer;
; 306  : 
; 307  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 308  :         L"UsbFnPdd!IssueRxTransfer: EP %d pTransfer 0x%x (%d, %d, %d)\r\n",
; 309  :         endPoint, pTransfer, pTransfer != NULL ? pTransfer->cbBuffer : 0,
; 310  :         pTransfer != NULL ? pTransfer->cbTransferred : 0,
; 311  :         pTransfer != NULL ? pTransfer->dwUsbError : -1
; 312  :     ));

  00128	e59d5008	 ldr         r5, [sp, #8]
  0012c		 |$LN8@IssueRxTra|

; 361  :         }
; 362  :         if (remain > 0) {

  0012c	e3500000	 cmp         r0, #0

; 363  :             data = (WORD)INREG32(&pUSBDRegs->DATA);

  00130	15963008	 ldrne       r3, [r6, #8]

; 364  :             if (space > 0) {

  00134	135e0000	 cmpne       lr, #0

; 365  :                 *pBuffer = (UCHAR)data;
; 366  :                 pBuffer += 1;
; 367  :                 space -= 1;

  00138	124ee001	 subne       lr, lr, #1
  0013c	15c73000	 strneb      r3, [r7]

; 368  :             }
; 369  :             remain -= 1;
; 370  :         }
; 371  : 
; 372  :         // We transfered some data
; 373  :         pTransfer->cbTransferred = pTransfer->cbBuffer - space;

  00140	e594200c	 ldr         r2, [r4, #0xC]
  00144	e042300e	 sub         r3, r2, lr
  00148	e5843010	 str         r3, [r4, #0x10]

; 374  : 
; 375  :         // Is this end of transfer?
; 376  :         if (
; 377  :             pTransfer->cbTransferred == pTransfer->cbBuffer || count < maxSize
; 378  :         ) {

  0014c	e1530002	 cmp         r3, r2
  00150	0a000004	 beq         |$LN3@IssueRxTra|
  00154	e1510008	 cmp         r1, r8

; 383  :         } else {
; 384  :             // No, enable FIFO for next packet
; 385  :             OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_FIFO_EN);

  00158	23a03004	 movcs       r3, #4
  0015c	2586300c	 strcs       r3, [r6, #0xC]
  00160	23a02000	 movcs       r2, #0
  00164	2a000002	 bcs         |$clean$46228|
  00168		 |$LN3@IssueRxTra|

; 379  :             // Yes, set return code
; 380  :             pTransfer->dwUsbError = UFN_NO_ERROR;

  00168	e3a02000	 mov         r2, #0
  0016c	e5842014	 str         r2, [r4, #0x14]

; 381  :             // And complete flag
; 382  :             complete = TRUE;

  00170	e3a0b001	 mov         r11, #1
  00174		 |$clean$46228|

; 386  :         }
; 387  : 
; 388  : clean:
; 389  : 
; 390  :     // Deselect EP
; 391  :     OUTREG32(&pUSBDRegs->EP_NUM, epNum);
; 392  : 
; 393  :     // If transaction is complete we should tell MDD
; 394  :     if (complete) {

  00174	e35b0000	 cmp         r11, #0
  00178	e586a004	 str         r10, [r6, #4]

; 395  :         pPdd->ep[endPoint].pTransfer = NULL;

  0017c	15852030	 strne       r2, [r5, #0x30]

; 396  :         pPdd->pfnNotify(
; 397  :             pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer
; 398  :         );

  00180	15990000	 ldrne       r0, [r9]
  00184	15993004	 ldrne       r3, [r9, #4]
  00188	11a02004	 movne       r2, r4
  0018c	13a01064	 movne       r1, #0x64
  00190	11a0e00f	 movne       lr, pc
  00194	112fff13	 bxne        r3

; 399  :     }
; 400  : }

  00198	e28dd00c	 add         sp, sp, #0xC
  0019c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001a0	e12fff1e	 bx          lr
  001a4		 |$LN31@IssueRxTra|
  001a4		 |$LN32@IssueRxTra|
  001a4	00000000	 DCD         |??_C@_1HM@BCFIOLEH@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAx?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAd?$AA?5@|
  001a8		 |$LN33@IssueRxTra|
  001a8	00000000	 DCD         |dpCurSettings|
  001ac		 |$M46993|

			 ENDP  ; |IssueRxTransfer|

	EXPORT	|??_C@_1GI@OPBGFKOJ@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAD?$AAe?$AAv?$AAS?$AAt?$AAa?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAs?$AAt@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47011| DCD	|$LN15@DevStatEve|
	DCD	0x40005601

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@OPBGFKOJ@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAD?$AAe?$AAv?$AAS?$AAt?$AAa?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAs?$AAt@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "!", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DevStatEvent| PROC

; 409  : {

  00000		 |$LN15@DevStatEve|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47008|
  00004	e1a04000	 mov         r4, r0

; 410  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 411  :     DWORD state, change;
; 412  : 
; 413  :     // Get device state & change
; 414  :     state = INREG32(&pUSBDRegs->DEVSTAT);
; 415  :     change = state ^ pPdd->devState;
; 416  : 
; 417  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 418  :         L"UsbFnPdd!DevStatEvent: Device state %x, change %x\r\n",
; 419  :         state, change
; 420  :     ));

  00008	e59f3144	 ldr         r3, [pc, #0x144]
  0000c	e5947008	 ldr         r7, [r4, #8]
  00010	e5942010	 ldr         r2, [r4, #0x10]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e5975020	 ldr         r5, [r7, #0x20]
  0001c	e3130a02	 tst         r3, #2, 20
  00020	13130004	 tstne       r3, #4
  00024	159f0124	 ldrne       r0, [pc, #0x124]
  00028	e0226005	 eor         r6, r2, r5
  0002c	11a02006	 movne       r2, r6
  00030	11a01005	 movne       r1, r5
  00034	1b000000	 blne        NKDbgPrintfW

; 421  : 
; 422  : #ifdef USE_OLD_CABLE_DETECT_METHOD
; 423  :     // Attach/deattach
; 424  :     if ((change & USBD_DEVSTAT_ATT) != 0) {
; 425  :         if ((state & USBD_DEVSTAT_ATT) != 0) {
; 426  :             // TODO: Call bus driver (OTG?) to move HW from deep sleep
; 427  :             // Let MDD process change
; 428  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_ATTACH);
; 429  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_SPEED, BS_FULL_SPEED);
; 430  :         } else {
; 431  :             // Clear source bit
; 432  :             // We are not configured anymore
; 433  :             OUTREG32(&pUSBDRegs->SYSCON2, USBD_SYSCON2_CLR_CFG);
; 434  :             // TODO: Call bus driver (OTG?) to move HW to deep sleep
; 435  :             // Let MDD process change
; 436  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_DETACH);
; 437  :             // Don't process other changes (we are disconnected)
; 438  :             goto clean;
; 439  :         }
; 440  :     }
; 441  : #endif // USE_OLD_CABLE_DETECT_METHOD
; 442  : 
; 443  :     // Reset
; 444  :     if ((change & (USBD_DEVSTAT_USB_RESET|USBD_DEVSTAT_DEF)) != 0) {

  00038	e3160022	 tst         r6, #0x22
  0003c	0a00001c	 beq         |$LN8@DevStatEve|

; 445  :         if ((state & USBD_DEVSTAT_USB_RESET) == 0) {

  00040	e3150020	 tst         r5, #0x20
  00044	1a000017	 bne         |$LN7@DevStatEve|

; 446  :             // OTG may not detect attach/detach events correctly on some platforms
; 447  :             // Simulate a attach/detach event to clear any previous state on reset
; 448  :             // Let MDD process change
; 449  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_DETACH);

  00048	e5940000	 ldr         r0, [r4]
  0004c	e5943004	 ldr         r3, [r4, #4]
  00050	e3a02000	 mov         r2, #0
  00054	e3a01001	 mov         r1, #1
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff13	 bx          r3

; 450  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_ATTACH);

  00060	e5940000	 ldr         r0, [r4]
  00064	e5943004	 ldr         r3, [r4, #4]
  00068	e3a02001	 mov         r2, #1
  0006c	e3a01001	 mov         r1, #1
  00070	e1a0e00f	 mov         lr, pc
  00074	e12fff13	 bx          r3

; 451  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_SPEED, BS_FULL_SPEED);

  00078	e5940000	 ldr         r0, [r4]
  0007c	e5943004	 ldr         r3, [r4, #4]
  00080	e3a02001	 mov         r2, #1
  00084	e3a01003	 mov         r1, #3
  00088	e1a0e00f	 mov         lr, pc
  0008c	e12fff13	 bx          r3

; 452  :             // Tell MDD about reset...
; 453  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_RESET);

  00090	e5940000	 ldr         r0, [r4]
  00094	e5943004	 ldr         r3, [r4, #4]
  00098	e3a02002	 mov         r2, #2
  0009c	e3a01001	 mov         r1, #1
  000a0	e1a0e00f	 mov         lr, pc
  000a4	e12fff13	 bx          r3
  000a8		 |$LN7@DevStatEve|

; 454  :         }
; 455  :         // Enable interrupts
; 456  :         OUTREG32(&pUSBDRegs->IRQ_EN, USBD_IRQ_MASK);

  000a8	e3a03039	 mov         r3, #0x39
  000ac	e5873028	 str         r3, [r7, #0x28]

; 457  :         // In the middle of a reset don't process other changes
; 458  :         goto clean;

  000b0	ea000023	 b           |$clean$46275|
  000b4		 |$LN8@DevStatEve|

; 459  :     }
; 460  : 
; 461  :     // Suspend/resume
; 462  :     if ((change & USBD_DEVSTAT_SUS) != 0) {

  000b4	e3160010	 tst         r6, #0x10
  000b8	0a00000c	 beq         |$LN4@DevStatEve|

; 463  :         if ((state & USBD_DEVSTAT_SUS) != 0) {
; 464  :             // Let MDD process change
; 465  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_SUSPEND);

  000bc	e5940000	 ldr         r0, [r4]
  000c0	e5943004	 ldr         r3, [r4, #4]
  000c4	e3150010	 tst         r5, #0x10
  000c8	e3a01001	 mov         r1, #1
  000cc	0a000004	 beq         |$LN5@DevStatEve|
  000d0	e3a02003	 mov         r2, #3
  000d4	e1a0e00f	 mov         lr, pc
  000d8	e12fff13	 bx          r3

; 466  :             // Read device status
; 467  :             INREG32(&pUSBDRegs->DEVSTAT);

  000dc	e5973020	 ldr         r3, [r7, #0x20]

; 468  :         } else {

  000e0	ea000002	 b           |$LN4@DevStatEve|
  000e4		 |$LN5@DevStatEve|

; 469  :             // Let MDD process change
; 470  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_BUS_EVENTS, UFN_RESUME);

  000e4	e3a02004	 mov         r2, #4
  000e8	e1a0e00f	 mov         lr, pc
  000ec	e12fff13	 bx          r3
  000f0		 |$LN4@DevStatEve|

; 471  :         }
; 472  :     }
; 473  : 
; 474  : 
; 475  :     // Addressed
; 476  :     if ((change & USBD_DEVSTAT_ADD) != 0) {

  000f0	e3160004	 tst         r6, #4
  000f4	0a000012	 beq         |$clean$46275|

; 477  :         if ((state & USBD_DEVSTAT_ADD) != 0) {
; 478  :             // Let MDD process change
; 479  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_SET_ADDRESS, 1);

  000f8	e5940000	 ldr         r0, [r4]
  000fc	e5943004	 ldr         r3, [r4, #4]
  00100	e3150004	 tst         r5, #4
  00104	0a000004	 beq         |$LN2@DevStatEve|
  00108	e3a02001	 mov         r2, #1
  0010c	e3a01006	 mov         r1, #6
  00110	e1a0e00f	 mov         lr, pc
  00114	e12fff13	 bx          r3

; 480  :         } else {

  00118	ea000009	 b           |$clean$46275|
  0011c		 |$LN2@DevStatEve|

; 481  :             // Let MDD process change
; 482  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_CONFIGURED, 0 );

  0011c	e3a02000	 mov         r2, #0
  00120	e3a01002	 mov         r1, #2
  00124	e1a0e00f	 mov         lr, pc
  00128	e12fff13	 bx          r3

; 483  :             pPdd->pfnNotify(pPdd->pMddContext, UFN_MSG_SET_ADDRESS,0 );

  0012c	e5940000	 ldr         r0, [r4]
  00130	e5943004	 ldr         r3, [r4, #4]
  00134	e3a02000	 mov         r2, #0
  00138	e3a01006	 mov         r1, #6
  0013c	e1a0e00f	 mov         lr, pc
  00140	e12fff13	 bx          r3
  00144		 |$clean$46275|

; 484  :         }
; 485  :     }
; 486  : 
; 487  : clean:
; 488  :     // Save device state for next interrupt
; 489  :     pPdd->devState = state;

  00144	e5845010	 str         r5, [r4, #0x10]

; 490  : }

  00148	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0014c	e12fff1e	 bx          lr
  00150		 |$LN16@DevStatEve|
  00150		 |$LN17@DevStatEve|
  00150	00000000	 DCD         |??_C@_1GI@OPBGFKOJ@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAD?$AAe?$AAv?$AAS?$AAt?$AAa?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAs?$AAt@|
  00154		 |$LN18@DevStatEve|
  00154	00000000	 DCD         |dpCurSettings|
  00158		 |$M47009|

			 ENDP  ; |DevStatEvent|

	EXPORT	|InterruptThread|
	EXPORT	|??_C@_1HG@NNOMIKIA@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47034| DCD	|$LN21@InterruptT|
	DCD	0x40004801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@NNOMIKIA@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "!", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "s"
	DCB	0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "e", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InterruptThread| PROC

; 500  : {

  00000		 |$LN21@InterruptT|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M47031|
  00004	e1a06000	 mov         r6, r0

; 501  :     USBFN_PDD *pPdd = pPddContext;
; 502  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;

  00008	e5968008	 ldr         r8, [r6, #8]
  0000c	e59f9108	 ldr         r9, [pc, #0x108]
  00010	e3a0b000	 mov         r11, #0
  00014	e3a0a008	 mov         r10, #8
  00018		 |$LL11@InterruptT|
  00018	e5993440	 ldr         r3, [r9, #0x440]

; 503  :     DWORD source, ep;
; 504  :     while (TRUE) {
; 505  :         BOOL fInterrupt = FALSE;
; 506  :     
; 507  :         // Get interrupt source
; 508  :         source = INREG32(&pUSBDRegs->IRQ_SRC);

  0001c	e5984030	 ldr         r4, [r8, #0x30]
  00020	e3a05000	 mov         r5, #0

; 509  : 
; 510  :         OALMSG(OAL_ETHER&&OAL_FUNC, (
; 511  :             L"UsbFnPdd!InterruptThread: Interrupt source %x enabled %x\r\n", source));

  00024	e3130a02	 tst         r3, #2, 20
  00028	13130004	 tstne       r3, #4
  0002c	159f00e4	 ldrne       r0, [pc, #0xE4]
  00030	11a01004	 movne       r1, r4
  00034	1b000000	 blne        NKDbgPrintfW

; 512  :         // Device state
; 513  :         if ((source & USBD_INT_DS_CHG) != 0 || pPdd->fakeDsChange) {

  00038	e2147008	 ands        r7, r4, #8
  0003c	1a000002	 bne         |$LN8@InterruptT|
  00040	e5963124	 ldr         r3, [r6, #0x124]
  00044	e3530000	 cmp         r3, #0
  00048	0a000005	 beq         |$LN9@InterruptT|
  0004c		 |$LN8@InterruptT|

; 514  :             // Handle device state change
; 515  :             DevStatEvent(pPdd);

  0004c	e1a00006	 mov         r0, r6
  00050	eb000000	 bl          DevStatEvent

; 516  :             // Clear fake DsChange flag
; 517  :             pPdd->fakeDsChange = FALSE;
; 518  :             if (( source & USBD_INT_DS_CHG) != 0 ) 

  00054	e3570000	 cmp         r7, #0
  00058	e586b124	 str         r11, [r6, #0x124]

; 519  :                 OUTREG32(&pUSBDRegs->IRQ_SRC, USBD_INT_DS_CHG);

  0005c	1588a030	 strne       r10, [r8, #0x30]

; 520  :    	     fInterrupt = TRUE;

  00060	e3a05001	 mov         r5, #1
  00064		 |$LN9@InterruptT|

; 521  :         }
; 522  : 
; 523  :         // EP0 RX interrupt
; 524  :         if ((source & USBD_INT_EP0_RX) != 0) {

  00064	e3140002	 tst         r4, #2
  00068	0a000005	 beq         |$LN6@InterruptT|

; 525  :             // Clear source bit
; 526  :             OUTREG32(&pUSBDRegs->IRQ_SRC, USBD_INT_EP0_RX);
; 527  :             // Issue next Rx transfer
; 528  :             IssueRxTransfer(pPdd, 0);

  0006c	e3a03002	 mov         r3, #2
  00070	e3a01000	 mov         r1, #0
  00074	e1a00006	 mov         r0, r6
  00078	e5883030	 str         r3, [r8, #0x30]
  0007c	eb000000	 bl          IssueRxTransfer

; 529  :             fInterrupt = TRUE;

  00080	e3a05001	 mov         r5, #1
  00084		 |$LN6@InterruptT|

; 530  :         }
; 531  : 
; 532  :         // EP0 TX interrupt
; 533  :         if ((source & USBD_INT_EP0_TX) != 0) {

  00084	e3140001	 tst         r4, #1
  00088	0a000005	 beq         |$LN5@InterruptT|

; 534  :             // Clear source bit
; 535  :             OUTREG32(&pUSBDRegs->IRQ_SRC, USBD_INT_EP0_TX);
; 536  :             // Issue next Tx transfer
; 537  :             IssueTxTransfer(pPdd, 0);

  0008c	e3a03001	 mov         r3, #1
  00090	e3a01000	 mov         r1, #0
  00094	e1a00006	 mov         r0, r6
  00098	e5883030	 str         r3, [r8, #0x30]
  0009c	eb000000	 bl          IssueTxTransfer

; 538  :             fInterrupt = TRUE;

  000a0	e3a05001	 mov         r5, #1
  000a4		 |$LN5@InterruptT|

; 539  :         }
; 540  : 
; 541  :         // EPn RX interrupt
; 542  :         if ((source & USBD_INT_EP_RX) != 0) {

  000a4	e3140020	 tst         r4, #0x20
  000a8	0a000007	 beq         |$LN4@InterruptT|

; 543  :             // Get EP number
; 544  :             ep = (INREG32(&pUSBDRegs->EP_STAT) >> 8) & USBD_EP_NUM;

  000ac	e5983034	 ldr         r3, [r8, #0x34]

; 545  :             // Clear source bit
; 546  :             OUTREG32(&pUSBDRegs->IRQ_SRC, USBD_INT_EP_RX);
; 547  :             // Handle event
; 548  :             IssueRxTransfer(pPdd, ep);

  000b0	e3a02020	 mov         r2, #0x20
  000b4	e1a00006	 mov         r0, r6
  000b8	e1a03a03	 mov         r3, r3, lsl #20
  000bc	e1a01e23	 mov         r1, r3, lsr #28
  000c0	e5882030	 str         r2, [r8, #0x30]
  000c4	eb000000	 bl          IssueRxTransfer

; 549  :             fInterrupt = TRUE;

  000c8	e3a05001	 mov         r5, #1
  000cc		 |$LN4@InterruptT|

; 550  :         }
; 551  : 
; 552  :         // EPn TX interrupt
; 553  :         if ((source & USBD_INT_EP_TX) != 0) {

  000cc	e3140010	 tst         r4, #0x10
  000d0	0a000006	 beq         |$LN3@InterruptT|

; 554  :             // Get EP number
; 555  :             ep = INREG32(&pUSBDRegs->EP_STAT) & USBD_EP_NUM;

  000d4	e5983034	 ldr         r3, [r8, #0x34]

; 556  :             // Clear source bit
; 557  :             OUTREG32(&pUSBDRegs->IRQ_SRC, USBD_INT_EP_TX);
; 558  :             // Handle event
; 559  :             IssueTxTransfer(pPdd, ep);

  000d8	e3a02010	 mov         r2, #0x10
  000dc	e1a00006	 mov         r0, r6
  000e0	e203100f	 and         r1, r3, #0xF
  000e4	e5882030	 str         r2, [r8, #0x30]
  000e8	eb000000	 bl          IssueTxTransfer

; 560  :             fInterrupt = TRUE;

  000ec	e3a05001	 mov         r5, #1
  000f0		 |$LN3@InterruptT|

; 561  :         }
; 562  : 
; 563  :         // Setup Packet
; 564  :         if ((source & USBD_INT_SETUP) != 0) {

  000f0	e3140004	 tst         r4, #4
  000f4	0a000002	 beq         |$LN2@InterruptT|

; 565  :             // Reading setup FIFO clears interrupt
; 566  :             SetupEvent(pPdd);

  000f8	e1a00006	 mov         r0, r6
  000fc	eb000000	 bl          SetupEvent

; 567  :             fInterrupt = TRUE;

  00100	e3a05001	 mov         r5, #1
  00104		 |$LN2@InterruptT|

; 568  :         }
; 569  : 
; 570  :         if( !fInterrupt )

  00104	e3550000	 cmp         r5, #0
  00108	1affffc2	 bne         |$LL11@InterruptT|

; 571  :         {
; 572  :             break;
; 573  :         }
; 574  :     }
; 575  :    return ERROR_SUCCESS;

  0010c	e3a00000	 mov         r0, #0

; 576  : }

  00110	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$LN22@InterruptT|
  00118		 |$LN23@InterruptT|
  00118	00000000	 DCD         |??_C@_1HG@NNOMIKIA@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA?$CB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr@|
  0011c		 |$LN24@InterruptT|
  0011c	00000000	 DCD         |dpCurSettings|
  00120		 |$M47032|

			 ENDP  ; |InterruptThread|

	EXPORT	|UfnPdd_IssueTransfer|

  00000			 AREA	 |.pdata|, PDATA
|$T47053| DCD	|$LN10@UfnPdd_Iss|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_IssueTransfer| PROC

; 582  : ) {

  00000		 |$LN10@UfnPdd_Iss|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47050|

; 583  :     USBFN_PDD *pPdd = pPddContext;
; 584  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 585  :     DWORD epNum;
; 586  : 
; 587  :     // Save transfer for interrupt thread
; 588  :     pPdd->ep[endPoint].pTransfer = pTransfer;

  00004	e590e008	 ldr         lr, [r0, #8]
  00008	e0804201	 add         r4, r0, r1, lsl #4
  0000c	e5842030	 str         r2, [r4, #0x30]

; 589  :     // Sync Length with buffer
; 590  :      if (pTransfer->pvBuffer == NULL) pTransfer->cbBuffer = 0;

  00010	e5923004	 ldr         r3, [r2, #4]
  00014	e3a05000	 mov         r5, #0
  00018	e3530000	 cmp         r3, #0

; 591  : 
; 592  :     // Depending on direction
; 593  :     if (TRANSFER_IS_IN(pTransfer)) {

  0001c	e5923000	 ldr         r3, [r2]
  00020	0582500c	 streq       r5, [r2, #0xC]
  00024	e3130080	 tst         r3, #0x80
  00028	0a000006	 beq         |$LN2@UfnPdd_Iss|

; 594  :         pPdd->ep[endPoint].zeroLength = (pTransfer->cbBuffer == 0);

  0002c	e592300c	 ldr         r3, [r2, #0xC]
  00030	e3530000	 cmp         r3, #0
  00034	03a03001	 moveq       r3, #1
  00038	13a03000	 movne       r3, #0

; 595  :         IssueTxTransfer(pPdd, endPoint);

  0003c	e584302c	 str         r3, [r4, #0x2C]
  00040	eb000000	 bl          IssueTxTransfer

; 596  :     } else {

  00044	ea000006	 b           |$LN1@UfnPdd_Iss|
  00048		 |$LN2@UfnPdd_Iss|

; 597  :         pPdd->ep[endPoint].zeroLength = FALSE;
; 598  :         // Select EP
; 599  :         epNum = USBD_EP_NUM & endPoint;

  00048	e201200f	 and         r2, r1, #0xF

; 600  :         OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);

  0004c	e3823020	 orr         r3, r2, #0x20
  00050	e584502c	 str         r5, [r4, #0x2C]
  00054	e58e3004	 str         r3, [lr, #4]

; 601  :         // Enable EP FIFO
; 602  :         OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_FIFO_EN);

  00058	e3a03004	 mov         r3, #4
  0005c	e58e300c	 str         r3, [lr, #0xC]

; 603  :         // Deselect EP
; 604  :         OUTREG32(&pUSBDRegs->EP_NUM, epNum);

  00060	e58e2004	 str         r2, [lr, #4]
  00064		 |$LN1@UfnPdd_Iss|

; 605  :     }
; 606  :     return ERROR_SUCCESS;

  00064	e3a00000	 mov         r0, #0

; 607  : }

  00068	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M47051|

			 ENDP  ; |UfnPdd_IssueTransfer|

	EXPORT	|UfnPdd_AbortTransfer|

  00000			 AREA	 |.pdata|, PDATA
|$T47067| DCD	|$LN6@UfnPdd_Abo|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_AbortTransfer| PROC

; 613  : ) {

  00000		 |$LN6@UfnPdd_Abo|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47064|
  00004	e1a04000	 mov         r4, r0

; 614  :     USBFN_PDD *pPdd = pPddContext;
; 615  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 616  :     DWORD epNum;
; 617  : 
; 618  :     // Select EP
; 619  :     epNum = USBD_EP_NUM & endPoint;
; 620  :     if (TRANSFER_IS_IN(pTransfer)) epNum |= USBD_EP_NUM_DIRIN;

  00008	e5923000	 ldr         r3, [r2]
  0000c	e5940008	 ldr         r0, [r4, #8]
  00010	e201e00f	 and         lr, r1, #0xF
  00014	e3130080	 tst         r3, #0x80
  00018	138ee010	 orrne       lr, lr, #0x10

; 621  :     OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);

  0001c	e38e3020	 orr         r3, lr, #0x20
  00020	e5803004	 str         r3, [r0, #4]

; 622  : 
; 623  :     // Clear EP
; 624  :     OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_CLR_EP);

  00024	e3a03002	 mov         r3, #2
  00028	e580300c	 str         r3, [r0, #0xC]

; 625  : 
; 626  :     // Deselect EP
; 627  :     OUTREG32(&pUSBDRegs->EP_NUM, epNum);
; 628  : 
; 629  :     // Finish transfer
; 630  :     pPdd->ep[endPoint].pTransfer = NULL;

  0002c	e0843201	 add         r3, r4, r1, lsl #4
  00030	e3a01000	 mov         r1, #0
  00034	e3a05c01	 mov         r5, #1, 24
  00038	e580e004	 str         lr, [r0, #4]
  0003c	e5831030	 str         r1, [r3, #0x30]

; 631  :     pTransfer->dwUsbError = UFN_CANCELED_ERROR;

  00040	e3853001	 orr         r3, r5, #1
  00044	e5823014	 str         r3, [r2, #0x14]

; 632  :     pPdd->pfnNotify(
; 633  :         pPdd->pMddContext, UFN_MSG_TRANSFER_COMPLETE, (DWORD)pTransfer
; 634  :     );

  00048	e5940000	 ldr         r0, [r4]
  0004c	e5943004	 ldr         r3, [r4, #4]
  00050	e3a01064	 mov         r1, #0x64
  00054	e1a0e00f	 mov         lr, pc
  00058	e12fff13	 bx          r3

; 635  : 
; 636  :     // Done
; 637  :     return ERROR_SUCCESS;

  0005c	e3a00000	 mov         r0, #0

; 638  : }

  00060	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M47065|

			 ENDP  ; |UfnPdd_AbortTransfer|

	EXPORT	|UfnPdd_StallEndpoint|
	EXPORT	|??_C@_0CH@DMHGJEEN@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CKRead?5USBD?9?$DOSYSCON_2?9?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@FFFNHHBF@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAl?$AAl?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|KITLOutputDebugString|

  00000			 AREA	 |.pdata|, PDATA
|$T47082| DCD	|$LN10@UfnPdd_Sta|
	DCD	0x40002201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CH@DMHGJEEN@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CKRead?5USBD?9?$DOSYSCON_2?9?9@| DCB "*"
	DCB	"**********Read USBD->SYSCON_2---=%x", 0xd, 0xa, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@FFFNHHBF@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAl?$AAl?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "_", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_StallEndpoint| PROC

; 647  : {

  00000		 |$LN10@UfnPdd_Sta|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47079|
  00004	e1a05001	 mov         r5, r1
  00008	e1a06000	 mov         r6, r0

; 648  :     USBFN_PDD *pPdd = pPddContext;
; 649  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 650  :     DWORD epNum;
; 651  : 
; 652  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 653  :         L"UsbFnPdd_StallEndpoint %d\r\n", endPoint
; 654  :     ));

  0000c	e59f3070	 ldr         r3, [pc, #0x70]
  00010	e5964008	 ldr         r4, [r6, #8]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130a02	 tst         r3, #2, 20
  0001c	13130004	 tstne       r3, #4
  00020	159f0058	 ldrne       r0, [pc, #0x58]
  00024	1b000000	 blne        NKDbgPrintfW

; 655  : 
; 656  :     if (endPoint == 0) {

  00028	e3550000	 cmp         r5, #0
  0002c	1a000005	 bne         |$LN3@UfnPdd_Sta|

; 657  :         // Stall next EP0 transaction
; 658  :        OUTREG32(&pUSBDRegs->SYSCON2, USBD_SYSCON2_STALL_CMD);

  00030	e3a03020	 mov         r3, #0x20

; 659  :        EdbgOutputDebugString("***********Read USBD->SYSCON_2---=%x\r\n", INREG32(&pUSBDRegs->SYSCON2));                     // 0080 - Endpoint 0 configuration

  00034	e59f0040	 ldr         r0, [pc, #0x40]
  00038	e584301c	 str         r3, [r4, #0x1C]
  0003c	e594101c	 ldr         r1, [r4, #0x1C]
  00040	eb000000	 bl          KITLOutputDebugString

; 660  : 
; 661  :     } else {

  00044	ea000009	 b           |$LN2@UfnPdd_Sta|
  00048		 |$LN3@UfnPdd_Sta|

; 662  : 
; 663  :         // Select EP
; 664  :         epNum = USBD_EP_NUM & endPoint;
; 665  :         if (!pPdd->ep[endPoint].dirRx) epNum |= USBD_EP_NUM_DIRIN;

  00048	e0863205	 add         r3, r6, r5, lsl #4
  0004c	e5933028	 ldr         r3, [r3, #0x28]
  00050	e205200f	 and         r2, r5, #0xF
  00054	e3530000	 cmp         r3, #0
  00058	03822010	 orreq       r2, r2, #0x10

; 666  :         
; 667  :         OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);

  0005c	e3823020	 orr         r3, r2, #0x20
  00060	e5843004	 str         r3, [r4, #4]

; 668  : 
; 669  :         // Halt EP
; 670  :         OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_SET_HALT);

  00064	e3a03040	 mov         r3, #0x40
  00068	e584300c	 str         r3, [r4, #0xC]

; 671  : 
; 672  :         // Deselect EP
; 673  :         OUTREG32(&pUSBDRegs->EP_NUM, epNum);

  0006c	e5842004	 str         r2, [r4, #4]
  00070		 |$LN2@UfnPdd_Sta|

; 674  :     }
; 675  : 
; 676  :     // Done
; 677  :     return ERROR_SUCCESS;

  00070	e3a00000	 mov         r0, #0

; 678  : }

  00074	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN11@UfnPdd_Sta|
  0007c		 |$LN12@UfnPdd_Sta|
  0007c	00000000	 DCD         |??_C@_0CH@DMHGJEEN@?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CK?$CKRead?5USBD?9?$DOSYSCON_2?9?9@|
  00080		 |$LN13@UfnPdd_Sta|
  00080	00000000	 DCD         |??_C@_1DI@FFFNHHBF@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAa?$AAl?$AAl?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00084		 |$LN14@UfnPdd_Sta|
  00084	00000000	 DCD         |dpCurSettings|
  00088		 |$M47080|

			 ENDP  ; |UfnPdd_StallEndpoint|

	EXPORT	|UfnPdd_ClearEndpointStall|
	EXPORT	|??_C@_1DI@EBJLFADF@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47102| DCD	|$LN9@UfnPdd_Cle|
	DCD	0x40001d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@EBJLFADF@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "_", 0x0, "C", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_ClearEndpointStall| PROC

; 687  : {

  00000		 |$LN9@UfnPdd_Cle|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M47099|
  00004	e1a04001	 mov         r4, r1
  00008	e1a07000	 mov         r7, r0

; 688  :     DWORD rc = ERROR_INVALID_FUNCTION;
; 689  :     USBFN_PDD *pPdd = pPddContext;
; 690  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 691  :     DWORD epNum;
; 692  : 
; 693  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 694  :         L"UsbFnPdd_ClearEndpoint %d\r\n", endPoint
; 695  :     ));

  0000c	e59f305c	 ldr         r3, [pc, #0x5C]
  00010	e5976008	 ldr         r6, [r7, #8]
  00014	e3a05001	 mov         r5, #1
  00018	e5933440	 ldr         r3, [r3, #0x440]
  0001c	e3130a02	 tst         r3, #2, 20
  00020	13130004	 tstne       r3, #4
  00024	159f0040	 ldrne       r0, [pc, #0x40]
  00028	1b000000	 blne        NKDbgPrintfW

; 696  : 
; 697  :     // Endpoint can't be zero
; 698  :     if (endPoint == 0) goto clean;

  0002c	e3540000	 cmp         r4, #0
  00030	0a00000a	 beq         |$clean$46397|

; 699  :     
; 700  :     // Select EP
; 701  :     epNum = USBD_EP_NUM & endPoint;
; 702  :     if (!pPdd->ep[endPoint].dirRx) epNum |= USBD_EP_NUM_DIRIN;

  00034	e0873204	 add         r3, r7, r4, lsl #4
  00038	e5933028	 ldr         r3, [r3, #0x28]
  0003c	e204200f	 and         r2, r4, #0xF

; 703  : 
; 704  :     OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);
; 705  : 
; 706  :     // Reset endpoint - clear halt isn't sufficient
; 707  :     OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_RESET_EP);
; 708  : 
; 709  :     // Deselect EP
; 710  :     OUTREG32(&pUSBDRegs->EP_NUM, epNum);
; 711  : 
; 712  :     // Done
; 713  :     rc = ERROR_SUCCESS;

  00040	e3a05000	 mov         r5, #0
  00044	e3530000	 cmp         r3, #0
  00048	03822010	 orreq       r2, r2, #0x10
  0004c	e3823020	 orr         r3, r2, #0x20
  00050	e5863004	 str         r3, [r6, #4]
  00054	e3a03001	 mov         r3, #1
  00058	e586300c	 str         r3, [r6, #0xC]
  0005c	e5862004	 str         r2, [r6, #4]
  00060		 |$clean$46397|

; 714  : 
; 715  : clean:
; 716  :     return rc;
; 717  : }

  00060	e1a00005	 mov         r0, r5
  00064	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$LN10@UfnPdd_Cle|
  0006c		 |$LN11@UfnPdd_Cle|
  0006c	00000000	 DCD         |??_C@_1DI@EBJLFADF@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAC?$AAl?$AAe?$AAa?$AAr?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00070		 |$LN12@UfnPdd_Cle|
  00070	00000000	 DCD         |dpCurSettings|
  00074		 |$M47100|

			 ENDP  ; |UfnPdd_ClearEndpointStall|

	EXPORT	|UfnPdd_IsEndpointHalted|
	EXPORT	|??_C@_1DO@MLIBPKBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAH?$AAa?$AAl?$AAt?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47124| DCD	|$LN11@UfnPdd_IsE|
	DCD	0x40002101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MLIBPKBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAH?$AAa?$AAl?$AAt?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "_", 0x0, "I", 0x0, "s", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "H", 0x0, "a", 0x0, "l", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_IsEndpointHalted| PROC

; 725  : ) {

  00000		 |$LN11@UfnPdd_IsE|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M47121|
  00004	e1a08002	 mov         r8, r2
  00008	e1a04001	 mov         r4, r1
  0000c	e1a07000	 mov         r7, r0

; 726  :     DWORD rc = ERROR_INVALID_FUNCTION;
; 727  :     USBFN_PDD *pPdd = pPddContext;
; 728  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 729  :     DWORD epNum;
; 730  : 
; 731  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 732  :         L"UsbFnPdd_IsEndpointHalted %d\r\n", endPoint
; 733  :     ));

  00010	e59f3068	 ldr         r3, [pc, #0x68]
  00014	e5976008	 ldr         r6, [r7, #8]
  00018	e3a05001	 mov         r5, #1
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130a02	 tst         r3, #2, 20
  00024	13130004	 tstne       r3, #4
  00028	159f004c	 ldrne       r0, [pc, #0x4C]
  0002c	1b000000	 blne        NKDbgPrintfW

; 734  : 
; 735  :     // Endpoint can't be zero
; 736  :     if (endPoint == 0) goto clean;

  00030	e3540000	 cmp         r4, #0
  00034	0a00000d	 beq         |$clean$46420|

; 737  :     
; 738  : 
; 739  :     // Select EP
; 740  :     epNum = USBD_EP_NUM & endPoint;
; 741  :     if (!pPdd->ep[endPoint].dirRx) epNum |= USBD_EP_NUM_DIRIN;

  00038	e0873204	 add         r3, r7, r4, lsl #4
  0003c	e5933028	 ldr         r3, [r3, #0x28]
  00040	e204200f	 and         r2, r4, #0xF

; 742  : 
; 743  :     OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);
; 744  : 
; 745  :     // Is EP halted?
; 746  :     *pHalted = (INREG32(&pUSBDRegs->STAT_FLG) & USBD_STAT_HALTED) != 0;
; 747  : 
; 748  :     // Deselect EP
; 749  :     OUTREG32(&pUSBDRegs->EP_NUM, epNum);
; 750  : 
; 751  :     // Done
; 752  :     rc = ERROR_SUCCESS;

  00044	e3a05000	 mov         r5, #0
  00048	e3530000	 cmp         r3, #0
  0004c	03822010	 orreq       r2, r2, #0x10
  00050	e3823020	 orr         r3, r2, #0x20
  00054	e5863004	 str         r3, [r6, #4]
  00058	e5963010	 ldr         r3, [r6, #0x10]
  0005c	e3130040	 tst         r3, #0x40
  00060	13a03001	 movne       r3, #1
  00064	03a03000	 moveq       r3, #0
  00068	e5883000	 str         r3, [r8]
  0006c	e5862004	 str         r2, [r6, #4]
  00070		 |$clean$46420|

; 753  :     
; 754  : clean:
; 755  :     return rc;
; 756  : }

  00070	e1a00005	 mov         r0, r5
  00074	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN12@UfnPdd_IsE|
  0007c		 |$LN13@UfnPdd_IsE|
  0007c	00000000	 DCD         |??_C@_1DO@MLIBPKBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAs?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AAH?$AAa?$AAl?$AAt?$AAe?$AAd?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00080		 |$LN14@UfnPdd_IsE|
  00080	00000000	 DCD         |dpCurSettings|
  00084		 |$M47122|

			 ENDP  ; |UfnPdd_IsEndpointHalted|

	EXPORT	|UfnPdd_SendControlStatusHandshake|
	EXPORT	|??_C@_1GM@CFMOOMGC@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAh?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47145| DCD	|$LN11@UfnPdd_Sen|
	DCD	0x40002301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@CFMOOMGC@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAh?$AAa@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "_", 0x0, "S", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "h"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "("
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| DCB "O", 0x0, "U", 0x0, "T", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| DCB "I", 0x0, "N", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_SendControlStatusHandshake| PROC

; 766  : ) {

  00000		 |$LN11@UfnPdd_Sen|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M47142|

; 767  :     USBFN_PDD *pPdd = pPddContext;
; 768  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 769  :     DWORD epNum, stat;
; 770  : 
; 771  :     // Select EP
; 772  :     epNum = USBD_EP_NUM & endPoint;
; 773  :     if (pPdd->setupDirRx) epNum |= USBD_EP_NUM_DIRIN;

  00004	e5903018	 ldr         r3, [r0, #0x18]
  00008	e5905008	 ldr         r5, [r0, #8]
  0000c	e201400f	 and         r4, r1, #0xF
  00010	e3530000	 cmp         r3, #0

; 774  : 
; 775  :     OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);
; 776  : 
; 777  :     // Get actual status
; 778  :     stat = INREG32(&pUSBDRegs->STAT_FLG);
; 779  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 780  :         L"UsbFnPdd_SendControlStatusHandhake: %d %s (stat %x)\r\n",
; 781  :         endPoint, pPdd->setupDirRx ? L"IN" : L"OUT", stat
; 782  :     ));

  00014	e59f206c	 ldr         r2, [pc, #0x6C]
  00018	13844010	 orrne       r4, r4, #0x10
  0001c	e3843020	 orr         r3, r4, #0x20
  00020	e5853004	 str         r3, [r5, #4]
  00024	e5923440	 ldr         r3, [r2, #0x440]
  00028	e5956010	 ldr         r6, [r5, #0x10]
  0002c	e3130a02	 tst         r3, #2, 20
  00030	0a000008	 beq         |$LN5@UfnPdd_Sen|
  00034	e3130004	 tst         r3, #4
  00038	0a000006	 beq         |$LN5@UfnPdd_Sen|
  0003c	e5903018	 ldr         r3, [r0, #0x18]
  00040	e59f003c	 ldr         r0, [pc, #0x3C]
  00044	e3530000	 cmp         r3, #0
  00048	159f2030	 ldrne       r2, [pc, #0x30]
  0004c	059f2028	 ldreq       r2, [pc, #0x28]
  00050	e1a03006	 mov         r3, r6
  00054	eb000000	 bl          NKDbgPrintfW
  00058		 |$LN5@UfnPdd_Sen|

; 783  : 
; 784  :     // Don't send handshake when EP is stall
; 785  :     if ((stat & USBD_STAT_STALL) == 0) {

  00058	e3160020	 tst         r6, #0x20

; 786  :         // Clear & enable FIFO
; 787  :         OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_CLR_EP);

  0005c	03a03002	 moveq       r3, #2
  00060	0585300c	 streq       r3, [r5, #0xC]

; 788  :         OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_FIFO_EN);

  00064	03a03004	 moveq       r3, #4
  00068	0585300c	 streq       r3, [r5, #0xC]

; 789  :     }
; 790  : 
; 791  :     // Deselect EP
; 792  :     OUTREG32(&pUSBDRegs->EP_NUM, epNum);

  0006c	e5854004	 str         r4, [r5, #4]

; 793  :     return ERROR_SUCCESS;

  00070	e3a00000	 mov         r0, #0

; 794  : }

  00074	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN12@UfnPdd_Sen|
  0007c		 |$LN13@UfnPdd_Sen|
  0007c	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  00080		 |$LN14@UfnPdd_Sen|
  00080	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  00084		 |$LN15@UfnPdd_Sen|
  00084	00000000	 DCD         |??_C@_1GM@CFMOOMGC@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAn?$AAd?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAH?$AAa?$AAn?$AAd?$AAh?$AAa@|
  00088		 |$LN16@UfnPdd_Sen|
  00088	00000000	 DCD         |dpCurSettings|
  0008c		 |$M47143|

			 ENDP  ; |UfnPdd_SendControlStatusHandshake|

	EXPORT	|UfnPdd_InitiateRemoteWakeup|
	EXPORT	|??_C@_1EA@KNMJPPBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAt?$AAe?$AAR?$AAe?$AAm?$AAo?$AAt?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47163| DCD	|$LN7@UfnPdd_Ini|
	DCD	0x40001001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@KNMJPPBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAt?$AAe?$AAR?$AAe?$AAm?$AAo?$AAt?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "F", 0x0, "n", 0x0, "P", 0x0, "d"
	DCB	0x0, "d", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "t", 0x0, "e", 0x0, "W", 0x0, "a"
	DCB	0x0, "k", 0x0, "e", 0x0, "u", 0x0, "p", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_InitiateRemoteWakeup| PROC

; 801  : {

  00000		 |$LN7@UfnPdd_Ini|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47160|

; 802  :     USBFN_PDD *pPdd = pPddContext;
; 803  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 804  : 
; 805  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UsbFnPdd_InitiateRemoteWakeup\r\n"));

  00004	e59f3030	 ldr         r3, [pc, #0x30]
  00008	e5904008	 ldr         r4, [r0, #8]
  0000c	e5933440	 ldr         r3, [r3, #0x440]
  00010	e3130a02	 tst         r3, #2, 20
  00014	13130004	 tstne       r3, #4
  00018	159f0018	 ldrne       r0, [pc, #0x18]
  0001c	1b000000	 blne        NKDbgPrintfW

; 806  :     SETREG32(&pUSBDRegs->SYSCON2, USBD_SYSCON2_RMT_WKP);

  00020	e594301c	 ldr         r3, [r4, #0x1C]

; 807  :     return ERROR_SUCCESS;

  00024	e3a00000	 mov         r0, #0
  00028	e3833040	 orr         r3, r3, #0x40
  0002c	e584301c	 str         r3, [r4, #0x1C]

; 808  : }

  00030	e8bd4010	 ldmia       sp!, {r4, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN8@UfnPdd_Ini|
  00038		 |$LN9@UfnPdd_Ini|
  00038	00000000	 DCD         |??_C@_1EA@KNMJPPBI@?$AAU?$AAs?$AAb?$AAF?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAt?$AAe?$AAR?$AAe?$AAm?$AAo?$AAt?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  0003c		 |$LN10@UfnPdd_Ini|
  0003c	00000000	 DCD         |dpCurSettings|
  00040		 |$M47161|

			 ENDP  ; |UfnPdd_InitiateRemoteWakeup|

	EXPORT	|UfnPdd_PowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T47173| DCD	|$LN5@UfnPdd_Pow|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_PowerDown| PROC

; 815  : {

  00000		 |$LN5@UfnPdd_Pow|
  00000		 |$M47170|

; 816  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47171|

			 ENDP  ; |UfnPdd_PowerDown|

	EXPORT	|UfnPdd_PowerUp|

  00000			 AREA	 |.pdata|, PDATA
|$T47180| DCD	|$LN5@UfnPdd_Pow@2|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_PowerUp| PROC

; 823  : {

  00000		 |$LN5@UfnPdd_Pow@2|
  00000		 |$M47177|

; 824  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M47178|

			 ENDP  ; |UfnPdd_PowerUp|

	EXPORT	|UfnPdd_IOControl|

  00000			 AREA	 |.pdata|, PDATA
|$T47193| DCD	|$LN13@UfnPdd_IOC|
	DCD	0x40001300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_IOControl| PROC

; 833  : ) {

  00000		 |$LN13@UfnPdd_IOC|
  00000		 |$M47190|
  00000	e3a03822	 mov         r3, #0x22, 16

; 834  :     DWORD rc = ERROR_INVALID_PARAMETER;
; 835  :     USBFN_PDD *pPdd = pPddContext;
; 836  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 837  :     UFN_PDD_INFO *pInfo;
; 838  : 
; 839  :     switch (code) {

  00004	e3833f65	 orr         r3, r3, #0x65, 30
  00008	e1520003	 cmp         r2, r3
  0000c	e3a00057	 mov         r0, #0x57
  00010	1a00000c	 bne         |$LN3@UfnPdd_IOC|

; 840  :     case IOCTL_UFN_GET_PDD_INFO:
; 841  :         if (source != BUS_IOCTL) break;

  00014	e3510000	 cmp         r1, #0
  00018	1a00000a	 bne         |$LN3@UfnPdd_IOC|

; 842  :         if (pOutBuffer == NULL || outSize < sizeof(UFN_PDD_INFO)) break;

  0001c	e59d2004	 ldr         r2, [sp, #4]
  00020	e3520000	 cmp         r2, #0
  00024	0a000007	 beq         |$LN3@UfnPdd_IOC|
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e353000c	 cmp         r3, #0xC

; 843  :         pInfo = (UFN_PDD_INFO*)pOutBuffer;
; 844  :         pInfo->InterfaceType = Internal;
; 845  :         pInfo->BusNumber = 0;
; 846  :         pInfo->dwAlignment = sizeof(DWORD);

  00030	23a03004	 movcs       r3, #4
  00034	23a01000	 movcs       r1, #0
  00038	25823008	 strcs       r3, [r2, #8]
  0003c	25821000	 strcs       r1, [r2]
  00040	25821004	 strcs       r1, [r2, #4]

; 847  :         rc = ERROR_SUCCESS;

  00044	23a00000	 movcs       r0, #0
  00048		 |$LN3@UfnPdd_IOC|

; 848  :         break;
; 849  :     case IOCTL_BUS_GET_POWER_STATE:
; 850  :         break;
; 851  : 
; 852  :     case IOCTL_BUS_SET_POWER_STATE:
; 853  :         break;
; 854  :     }
; 855  :     
; 856  :     return rc;
; 857  : }

  00048	e12fff1e	 bx          lr
  0004c		 |$M47191|

			 ENDP  ; |UfnPdd_IOControl|

	EXPORT	|UfnPdd_Deinit|

  00000			 AREA	 |.pdata|, PDATA
|$T47203| DCD	|$LN6@UfnPdd_Dei|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_Deinit| PROC

; 864  : {

  00000		 |$LN6@UfnPdd_Dei|
  00000		 |$M47200|

; 865  :     USBFN_PDD *pPdd = pPddContext;
; 866  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 867  : 
; 868  :     // Unmap USBD controller registers
; 869  :     if (pPdd->pUSBDRegs != NULL) {

  00000	e5903008	 ldr         r3, [r0, #8]
  00004	e3530000	 cmp         r3, #0

; 870  :         pPdd->pUSBDRegs = NULL;

  00008	13a03000	 movne       r3, #0
  0000c	15803008	 strne       r3, [r0, #8]

; 871  :     }
; 872  : 
; 873  :     // Done
; 874  :     return ERROR_SUCCESS;

  00010	e3a00000	 mov         r0, #0

; 875  : }

  00014	e12fff1e	 bx          lr
  00018		 |$M47201|

			 ENDP  ; |UfnPdd_Deinit|

	EXPORT	|UfnPdd_DeregisterDevice|

  00000			 AREA	 |.pdata|, PDATA
|$T47216| DCD	|$LN10@UfnPdd_Der|
	DCD	0x40000c00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_DeregisterDevice| PROC

; 885  : {

  00000		 |$LN10@UfnPdd_Der|
  00000		 |$M47213|

; 886  :     USBFN_PDD *pPdd = pPddContext;
; 887  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;

  00000	e5903008	 ldr         r3, [r0, #8]

; 888  :     DWORD ep;
; 889  : 
; 890  :     // Disable all RX, TX EPs
; 891  :     OUTREG32(&pUSBDRegs->EP0, 0);

  00004	e3a01000	 mov         r1, #0
  00008	e3a0200e	 mov         r2, #0xE
  0000c	e5831080	 str         r1, [r3, #0x80]
  00010	e2833088	 add         r3, r3, #0x88
  00014		 |$LL3@UfnPdd_Der|

; 892  :     for (ep = 1; ep < USBD_NONZERO_EP_COUNT; ep++) {
; 893  :         OUTREG32(&pUSBDRegs->EP_RX[ep], 0);

  00014	e5831000	 str         r1, [r3]

; 894  :         OUTREG32(&pUSBDRegs->EP_TX[ep], 0);

  00018	e5831040	 str         r1, [r3, #0x40]
  0001c	e2833004	 add         r3, r3, #4
  00020	e2522001	 subs        r2, r2, #1
  00024	1afffffa	 bne         |$LL3@UfnPdd_Der|

; 895  :     }
; 896  : 
; 897  :     return ERROR_SUCCESS;

  00028	e3a00000	 mov         r0, #0

; 898  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$M47214|

			 ENDP  ; |UfnPdd_DeregisterDevice|

	EXPORT	|UfnPdd_Stop|
	EXPORT	|??_C@_1BM@ELBPNMDN@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAo?$AAp?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DisconnectHardware|

  00000			 AREA	 |.pdata|, PDATA
|$T47229| DCD	|$LN7@UfnPdd_Sto|
	DCD	0x40001101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@ELBPNMDN@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAo?$AAp?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "S", 0x0, "t", 0x0, "o", 0x0, "p", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_Stop| PROC

; 909  : {

  00000		 |$LN7@UfnPdd_Sto|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M47226|

; 910  :     USBFN_PDD *pPdd = pPddContext;
; 911  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 912  : 
; 913  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_Stop\r\n"));

  00004	e59f3034	 ldr         r3, [pc, #0x34]
  00008	e5904008	 ldr         r4, [r0, #8]
  0000c	e5933440	 ldr         r3, [r3, #0x440]
  00010	e3130a02	 tst         r3, #2, 20
  00014	13130004	 tstne       r3, #4
  00018	159f001c	 ldrne       r0, [pc, #0x1C]
  0001c	1b000000	 blne        NKDbgPrintfW

; 914  : 
; 915  :     // Deattach device
; 916  :     CLRREG32(&pUSBDRegs->SYSCON1, USBD_SYSCON1_PULLUP_EN);

  00020	e5943018	 ldr         r3, [r4, #0x18]
  00024	e3c33001	 bic         r3, r3, #1
  00028	e5843018	 str         r3, [r4, #0x18]

; 917  :     DisconnectHardware();

  0002c	eb000000	 bl          DisconnectHardware

; 918  : 
; 919  :     // Disable USB device PLL clock
; 920  :     // ClkRelease(pPdd->hClk, 1); @todo
; 921  : 
; 922  :     // Done
; 923  :     return ERROR_SUCCESS;

  00030	e3a00000	 mov         r0, #0

; 924  : }

  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$LN8@UfnPdd_Sto|
  0003c		 |$LN9@UfnPdd_Sto|
  0003c	00000000	 DCD         |??_C@_1BM@ELBPNMDN@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAt?$AAo?$AAp?$AA?$AN?$AA?6?$AA?$AA@|
  00040		 |$LN10@UfnPdd_Sto|
  00040	00000000	 DCD         |dpCurSettings|
  00044		 |$M47227|

			 ENDP  ; |UfnPdd_Stop|

	EXPORT	|UfnPdd_DeinitEndpoint|
	EXPORT	|??_C@_1DI@DNFBFJFI@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47247| DCD	|$LN7@UfnPdd_Dei@2|
	DCD	0x40001401

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@DNFBFJFI@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "E", 0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_DeinitEndpoint| PROC

; 934  : {

  00000		 |$LN7@UfnPdd_Dei@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47244|
  00004	e1a04001	 mov         r4, r1

; 935  :     USBFN_PDD *pPdd = pPddContext;
; 936  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 937  :     DWORD epNum;
; 938  : 
; 939  :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"UfnPdd_DeinitEndpoint: %d\r\n", endPoint));

  00008	e59f303c	 ldr         r3, [pc, #0x3C]
  0000c	e5905008	 ldr         r5, [r0, #8]
  00010	e5933440	 ldr         r3, [r3, #0x440]
  00014	e3130a02	 tst         r3, #2, 20
  00018	13130004	 tstne       r3, #4
  0001c	159f0024	 ldrne       r0, [pc, #0x24]
  00020	1b000000	 blne        NKDbgPrintfW

; 940  : 
; 941  :     // Select EP
; 942  :     epNum = USBD_EP_NUM & endPoint;

  00024	e204200f	 and         r2, r4, #0xF

; 943  :     OUTREG32(&pUSBDRegs->EP_NUM, USBD_EP_NUM_SEL | epNum);

  00028	e3823020	 orr         r3, r2, #0x20
  0002c	e5853004	 str         r3, [r5, #4]

; 944  : 
; 945  :     // Clear EP
; 946  :     OUTREG32(&pUSBDRegs->CTRL, USBD_CTRL_CLR_EP);

  00030	e3a03002	 mov         r3, #2
  00034	e585300c	 str         r3, [r5, #0xC]

; 947  : 
; 948  :     // Deselect EP
; 949  :     OUTREG32(&pUSBDRegs->EP_NUM, epNum);

  00038	e5852004	 str         r2, [r5, #4]

; 950  : 
; 951  :     // Done
; 952  :     return ERROR_SUCCESS;

  0003c	e3a00000	 mov         r0, #0

; 953  : }

  00040	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$LN8@UfnPdd_Dei@2|
  00048		 |$LN9@UfnPdd_Dei@2|
  00048	00000000	 DCD         |??_C@_1DI@DNFBFJFI@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0004c		 |$LN10@UfnPdd_Dei@2|
  0004c	00000000	 DCD         |dpCurSettings|
  00050		 |$M47245|

			 ENDP  ; |UfnPdd_DeinitEndpoint|

	EXPORT	|UfnPdd_InitEndpoint|
	EXPORT	|??_C@_1DE@CLEBGKIE@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47262| DCD	|$LN7@UfnPdd_Ini@2|
	DCD	0x40000c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@CLEBGKIE@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_InitEndpoint| PROC

; 967  : ) {

  00000		 |$LN7@UfnPdd_Ini@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47259|

; 968  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 969  :         L"UfnPdd_InitEndpoint: %d\r\n", endPoint
; 970  :     ));

  00004	e59f3020	 ldr         r3, [pc, #0x20]
  00008	e5933440	 ldr         r3, [r3, #0x440]
  0000c	e3130a02	 tst         r3, #2, 20
  00010	13130004	 tstne       r3, #4
  00014	159f000c	 ldrne       r0, [pc, #0xC]
  00018	1b000000	 blne        NKDbgPrintfW

; 971  :     return ERROR_SUCCESS;

  0001c	e3a00000	 mov         r0, #0

; 972  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN8@UfnPdd_Ini@2|
  00028		 |$LN9@UfnPdd_Ini@2|
  00028	00000000	 DCD         |??_C@_1DE@CLEBGKIE@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$LN10@UfnPdd_Ini@2|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M47260|

			 ENDP  ; |UfnPdd_InitEndpoint|

	EXPORT	|UfnPdd_SetAddress|
	EXPORT	|??_C@_1DA@IMJLDCBL@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47277| DCD	|$LN7@UfnPdd_Set|
	DCD	0x40000c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@IMJLDCBL@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d", 0x0, "_"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_SetAddress| PROC

; 982  : {

  00000		 |$LN7@UfnPdd_Set|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M47274|

; 983  :     OALMSG(OAL_ETHER&&OAL_FUNC, (
; 984  :         L"UfnPdd_SetAddress: %d\r\n", address
; 985  :     ));

  00004	e59f3020	 ldr         r3, [pc, #0x20]
  00008	e5933440	 ldr         r3, [r3, #0x440]
  0000c	e3130a02	 tst         r3, #2, 20
  00010	13130004	 tstne       r3, #4
  00014	159f000c	 ldrne       r0, [pc, #0xC]
  00018	1b000000	 blne        NKDbgPrintfW

; 986  :     return ERROR_SUCCESS;

  0001c	e3a00000	 mov         r0, #0

; 987  : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN8@UfnPdd_Set|
  00028		 |$LN9@UfnPdd_Set|
  00028	00000000	 DCD         |??_C@_1DA@IMJLDCBL@?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAS?$AAe?$AAt?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0002c		 |$LN10@UfnPdd_Set|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M47275|

			 ENDP  ; |UfnPdd_SetAddress|

	EXPORT	|UfnPdd_Start|
	IMPORT	|OALStall|

  00000			 AREA	 |.pdata|, PDATA
|$T47291| DCD	|$LN5@UfnPdd_Sta@2|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_Start| PROC

; 997  : {

  00000		 |$LN5@UfnPdd_Sta@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M47288|
  00004	e1a05000	 mov         r5, r0
  00008	e3a03c27	 mov         r3, #0x27, 24

; 998  :     USBFN_PDD *pPdd = pPddContext;
; 999  :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 1000 : 
; 1001 :     // Disconnect hardware
; 1002 :     //????DisconnectHardware();
; 1003 : 
; 1004 :     // Wait for while
; 1005 :     OALStall(10000);

  0000c	e5954008	 ldr         r4, [r5, #8]
  00010	e3830010	 orr         r0, r3, #0x10
  00014	eb000000	 bl          OALStall

; 1006 : 
; 1007 :     // Enable interrupts
; 1008 :     OUTREG32(&pUSBDRegs->IRQ_EN, USBD_IRQ_MASK);

  00018	e3a03039	 mov         r3, #0x39
  0001c	e5843028	 str         r3, [r4, #0x28]

; 1009 : 
; 1010 :     // Attach device to bus (it has no effect when OTG controller is used)
; 1011 :     SETREG32(&pUSBDRegs->SYSCON1, USBD_SYSCON1_PULLUP_EN|USBD_SYSCON1_SELF_PWR);

  00020	e5943018	 ldr         r3, [r4, #0x18]

; 1012 : 	
; 1013 :     //?????ConnectHardware();
; 1014 : 
; 1015 :     // Set fake device change flag which on first interrupt force
; 1016 :     // device state change handler even if it isn't indicated by hardware
; 1017 :     pPdd->fakeDsChange = TRUE;

  00024	e3a02001	 mov         r2, #1

; 1018 : 
; 1019 :     // Done
; 1020 :     return ERROR_SUCCESS;

  00028	e3a00000	 mov         r0, #0
  0002c	e3833005	 orr         r3, r3, #5
  00030	e5843018	 str         r3, [r4, #0x18]
  00034	e5852124	 str         r2, [r5, #0x124]

; 1021 : }

  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M47289|

			 ENDP  ; |UfnPdd_Start|

	EXPORT	|UfnPdd_RegisterDevice|
	EXPORT	|??_C@_1FI@PHBINKHD@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@HDDLEHKG@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T47363| DCD	|$LN56@UfnPdd_Reg|
	DCD	0x4000b802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@PHBINKHD@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P"
	DCB	0x0, "d", 0x0, "d", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, "_", 0x0, "T", 0x0, "X", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@HDDLEHKG@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P"
	DCB	0x0, "d", 0x0, "d", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, "_", 0x0, "R", 0x0, "X", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_RegisterDevice| PROC

; 1042 : ) {

  00000		 |$LN56@UfnPdd_Reg|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M47360|
  00008	e58d0008	 str         r0, [sp, #8]

; 1043 :     DWORD rc = ERROR_INVALID_PARAMETER;
; 1044 :     USBFN_PDD *pPdd = pPddContext;
; 1045 :     OMAP2420_USBD_REGS *pUSBDRegs = pPdd->pUSBDRegs;
; 1046 :     UFN_INTERFACE *pIFC;
; 1047 :     UFN_ENDPOINT *pEP;
; 1048 :     DWORD offset, ep, cfg;
; 1049 :     DWORD ifc, epx;
; 1050 : 
; 1051 : 
; 1052 :     // Remember self powered flag
; 1053 :     pPdd->selfPowered = (pFullSpeedConfig->Descriptor.bmAttributes & 0x20) != 0;

  0000c	e59d4034	 ldr         r4, [sp, #0x34]
  00010	e5906008	 ldr         r6, [r0, #8]

; 1054 : 
; 1055 :     // Unlock configuration
; 1056 :     CLRREG32(&pUSBDRegs->SYSCON1, USBD_SYSCON1_CFG_LOCK);
; 1057 : 
; 1058 :     // Configure EP0
; 1059 :     offset = 8;
; 1060 :     cfg  = Log2(pFullSpeedDeviceDesc->bMaxPacketSize0 >> 3) << 12;

  00014	e59d1030	 ldr         r1, [sp, #0x30]
  00018	e5d4300b	 ldrb        r3, [r4, #0xB]
  0001c	e3a02000	 mov         r2, #0
  00020	e3130020	 tst         r3, #0x20
  00024	13a03001	 movne       r3, #1
  00028	03a03000	 moveq       r3, #0
  0002c	e5803014	 str         r3, [r0, #0x14]
  00030	e5963018	 ldr         r3, [r6, #0x18]
  00034	e3c33c01	 bic         r3, r3, #1, 24
  00038	e5863018	 str         r3, [r6, #0x18]
  0003c	e5d13007	 ldrb        r3, [r1, #7]
  00040	e1b031a3	 movs        r3, r3, lsr #3
  00044	0a000004	 beq         |$LN25@UfnPdd_Reg|
  00048		 |$LL27@UfnPdd_Reg|
  00048	e1b030a3	 movs        r3, r3, lsr #1
  0004c	e2822001	 add         r2, r2, #1
  00050	1afffffc	 bne         |$LL27@UfnPdd_Reg|
  00054	e3520000	 cmp         r2, #0
  00058	12422001	 subne       r2, r2, #1
  0005c		 |$LN25@UfnPdd_Reg|
  0005c	e1a03602	 mov         r3, r2, lsl #12

; 1061 :     cfg |= offset >> 3;

  00060	e3833001	 orr         r3, r3, #1

; 1062 :     OUTREG32(&pUSBDRegs->EP0, cfg);

  00064	e5863080	 str         r3, [r6, #0x80]

; 1063 :     pPdd->ep[0].maxPacketSize = pFullSpeedDeviceDesc->bMaxPacketSize0;

  00068	e5d13007	 ldrb        r3, [r1, #7]

; 1064 :     offset += pFullSpeedDeviceDesc->bMaxPacketSize0;
; 1065 : 
; 1066 :     // Configure Rx EPs
; 1067 :     for (ifc = 0; ifc < pFullSpeedConfig->Descriptor.bNumInterfaces; ifc++) {

  0006c	e3a09000	 mov         r9, #0
  00070	e58d9004	 str         r9, [sp, #4]
  00074	e1c032b4	 strh        r3, [r0, #0x24]
  00078	e5d13007	 ldrb        r3, [r1, #7]
  0007c	e5d42008	 ldrb        r2, [r4, #8]
  00080	e283e008	 add         lr, r3, #8
  00084	e58de000	 str         lr, [sp]
  00088	e3520000	 cmp         r2, #0
  0008c	0a000042	 beq         |$LN18@UfnPdd_Reg|
  00090	e3a07000	 mov         r7, #0
  00094		 |$LL20@UfnPdd_Reg|

; 1068 :         // For each endpoint in interface
; 1069 :         pIFC = &pFullSpeedConfig->pInterfaces[ifc];

  00094	e5943018	 ldr         r3, [r4, #0x18]

; 1070 :         for (epx = 0; epx < pIFC->Descriptor.bNumEndpoints; epx++) {

  00098	e3a0a000	 mov         r10, #0
  0009c	e087b003	 add         r11, r7, r3
  000a0	e5db3008	 ldrb        r3, [r11, #8]
  000a4	e3530000	 cmp         r3, #0
  000a8	0a000035	 beq         |$LN19@UfnPdd_Reg|

; 1122 :             // Update offset
; 1123 :             offset += pEP->Descriptor.wMaxPacketSize;

  000ac	e59d4008	 ldr         r4, [sp, #8]
  000b0	e3a08000	 mov         r8, #0
  000b4	e3a09001	 mov         r9, #1
  000b8		 |$LL17@UfnPdd_Reg|
  000b8	e59b3018	 ldr         r3, [r11, #0x18]
  000bc	e0885003	 add         r5, r8, r3
  000c0	e5d52006	 ldrb        r2, [r5, #6]
  000c4	e3120080	 tst         r2, #0x80
  000c8	1a000026	 bne         |$LN16@UfnPdd_Reg|
  000cc	e5d51008	 ldrb        r1, [r5, #8]
  000d0	e5d53009	 ldrb        r3, [r5, #9]
  000d4	e202000f	 and         r0, r2, #0xF
  000d8	e0842200	 add         r2, r4, r0, lsl #4
  000dc	e1813403	 orr         r3, r1, r3, lsl #8
  000e0	e1c232b4	 strh        r3, [r2, #0x24]
  000e4	e5829028	 str         r9, [r2, #0x28]
  000e8	e5d52008	 ldrb        r2, [r5, #8]
  000ec	e5d53009	 ldrb        r3, [r5, #9]
  000f0	e3a01000	 mov         r1, #0
  000f4	e1823403	 orr         r3, r2, r3, lsl #8
  000f8	e1b031a3	 movs        r3, r3, lsr #3
  000fc	0a000004	 beq         |$LN30@UfnPdd_Reg|

; 1071 :             pEP = &pIFC->pEndpoints[epx];
; 1072 :             // If it is Tx EP skip it
; 1073 :             if ((pEP->Descriptor.bEndpointAddress & 0x80) != 0) continue;
; 1074 :             // Get EP address
; 1075 :             ep = pEP->Descriptor.bEndpointAddress & 0x0F;
; 1076 :             // Save max packet size & direction
; 1077 :             pPdd->ep[ep].maxPacketSize = pEP->Descriptor.wMaxPacketSize;
; 1078 :             pPdd->ep[ep].dirRx = TRUE;
; 1079 :             // Create EP config
; 1080 :             cfg  = USBD_EP_VALID;
; 1081 :             cfg |= Log2(pEP->Descriptor.wMaxPacketSize >> 3) << 12;

  00100		 |$LL32@UfnPdd_Reg|
  00100	e1b030a3	 movs        r3, r3, lsr #1
  00104	e2811001	 add         r1, r1, #1
  00108	1afffffc	 bne         |$LL32@UfnPdd_Reg|
  0010c	e3510000	 cmp         r1, #0
  00110	12411001	 subne       r1, r1, #1
  00114		 |$LN30@UfnPdd_Reg|

; 1082 :             if ((pEP->Descriptor.bmAttributes & 0x03) == 0x01) {

  00114	e5d52007	 ldrb        r2, [r5, #7]
  00118	e3813008	 orr         r3, r1, #8
  0011c	e1a01603	 mov         r1, r3, lsl #12
  00120	e2023003	 and         r3, r2, #3
  00124	e3530001	 cmp         r3, #1

; 1083 :                 cfg |= USBD_EP_ISO;

  00128	03811b02	 orreq       r1, r1, #2, 22

; 1084 :             }
; 1085 :             cfg |= offset >> 3;
; 1086 :             
; 1087 :             if (ep > 0)

  0012c	e3500000	 cmp         r0, #0

; 1088 :             OUTREG32(&pUSBDRegs->EP_RX[ep - 1], cfg);

  00130	12803020	 addne       r3, r0, #0x20
  00134	10862103	 addne       r2, r6, r3, lsl #2
  00138	118131ae	 orrne       r3, r1, lr, lsr #3
  0013c	15823000	 strne       r3, [r2]
  00140	1a000003	 bne         |$LN11@UfnPdd_Reg|

; 1089 :             else
; 1090 :                 OALMSG(1, (L"+USBFN:: UfnPdd_RegisterDevice EP_RX = %d\r\n", ep - 1));

  00144	e2401001	 sub         r1, r0, #1
  00148	e59f018c	 ldr         r0, [pc, #0x18C]
  0014c	eb000000	 bl          NKDbgPrintfW

; 1122 :             // Update offset
; 1123 :             offset += pEP->Descriptor.wMaxPacketSize;

  00150	e59de000	 ldr         lr, [sp]
  00154		 |$LN11@UfnPdd_Reg|
  00154	e5d52008	 ldrb        r2, [r5, #8]
  00158	e5d53009	 ldrb        r3, [r5, #9]
  0015c	e1823403	 orr         r3, r2, r3, lsl #8
  00160	e08ee003	 add         lr, lr, r3
  00164	e58de000	 str         lr, [sp]
  00168		 |$LN16@UfnPdd_Reg|
  00168	e5db3008	 ldrb        r3, [r11, #8]
  0016c	e28aa001	 add         r10, r10, #1
  00170	e2888014	 add         r8, r8, #0x14
  00174	e15a0003	 cmp         r10, r3
  00178	3affffce	 bcc         |$LL17@UfnPdd_Reg|
  0017c	e59d4034	 ldr         r4, [sp, #0x34]
  00180	e59d9004	 ldr         r9, [sp, #4]
  00184		 |$LN19@UfnPdd_Reg|
  00184	e5d43008	 ldrb        r3, [r4, #8]
  00188	e2899001	 add         r9, r9, #1
  0018c	e58d9004	 str         r9, [sp, #4]
  00190	e1590003	 cmp         r9, r3
  00194	e287701c	 add         r7, r7, #0x1C
  00198	3affffbd	 bcc         |$LL20@UfnPdd_Reg|
  0019c		 |$LN18@UfnPdd_Reg|

; 1091 :             
; 1092 :             // Update offset
; 1093 :             offset += pEP->Descriptor.wMaxPacketSize;
; 1094 :         }
; 1095 :     }
; 1096 : 
; 1097 :     // Configure Tx EPs
; 1098 :     for (ifc = 0; ifc < pFullSpeedConfig->Descriptor.bNumInterfaces; ifc++) {

  0019c	e5d43008	 ldrb        r3, [r4, #8]
  001a0	e3a07000	 mov         r7, #0
  001a4	e58d7004	 str         r7, [sp, #4]
  001a8	e3530000	 cmp         r3, #0
  001ac	0a000042	 beq         |$LN8@UfnPdd_Reg|
  001b0	e3a08000	 mov         r8, #0
  001b4		 |$LL10@UfnPdd_Reg|

; 1099 :         // For each endpoint in interface
; 1100 :         pIFC = &pFullSpeedConfig->pInterfaces[ifc];

  001b4	e5943018	 ldr         r3, [r4, #0x18]

; 1101 :         for (epx = 0; epx < pIFC->Descriptor.bNumEndpoints; epx++) {

  001b8	e3a0a000	 mov         r10, #0
  001bc	e088b003	 add         r11, r8, r3
  001c0	e5db3008	 ldrb        r3, [r11, #8]
  001c4	e3530000	 cmp         r3, #0
  001c8	0a000035	 beq         |$LN9@UfnPdd_Reg|

; 1122 :             // Update offset
; 1123 :             offset += pEP->Descriptor.wMaxPacketSize;

  001cc	e59d4008	 ldr         r4, [sp, #8]
  001d0	e3a09000	 mov         r9, #0
  001d4	e3a07000	 mov         r7, #0
  001d8		 |$LL7@UfnPdd_Reg|
  001d8	e59b3018	 ldr         r3, [r11, #0x18]
  001dc	e0895003	 add         r5, r9, r3
  001e0	e5d52006	 ldrb        r2, [r5, #6]
  001e4	e3120080	 tst         r2, #0x80
  001e8	0a000026	 beq         |$LN6@UfnPdd_Reg|
  001ec	e5d51008	 ldrb        r1, [r5, #8]
  001f0	e5d53009	 ldrb        r3, [r5, #9]
  001f4	e202000f	 and         r0, r2, #0xF
  001f8	e0842200	 add         r2, r4, r0, lsl #4
  001fc	e1813403	 orr         r3, r1, r3, lsl #8
  00200	e1c232b4	 strh        r3, [r2, #0x24]
  00204	e5827028	 str         r7, [r2, #0x28]
  00208	e5d52008	 ldrb        r2, [r5, #8]
  0020c	e5d53009	 ldrb        r3, [r5, #9]
  00210	e3a01000	 mov         r1, #0
  00214	e1823403	 orr         r3, r2, r3, lsl #8
  00218	e1b031a3	 movs        r3, r3, lsr #3
  0021c	0a000004	 beq         |$LN35@UfnPdd_Reg|

; 1102 :             pEP = &pIFC->pEndpoints[epx];
; 1103 :             // If it is Rx EP skip it
; 1104 :             if ((pEP->Descriptor.bEndpointAddress & 0x80) == 0) continue;
; 1105 :             // Get EP address
; 1106 :             ep = pEP->Descriptor.bEndpointAddress & 0x0F;
; 1107 :             // Save max packet size & direction
; 1108 :             pPdd->ep[ep].maxPacketSize = pEP->Descriptor.wMaxPacketSize;
; 1109 :             pPdd->ep[ep].dirRx = FALSE;
; 1110 :             // Create EP config
; 1111 :             cfg  = USBD_EP_VALID;
; 1112 :             cfg |= Log2(pEP->Descriptor.wMaxPacketSize >> 3) << 12;

  00220		 |$LL37@UfnPdd_Reg|
  00220	e1b030a3	 movs        r3, r3, lsr #1
  00224	e2811001	 add         r1, r1, #1
  00228	1afffffc	 bne         |$LL37@UfnPdd_Reg|
  0022c	e3510000	 cmp         r1, #0
  00230	12411001	 subne       r1, r1, #1
  00234		 |$LN35@UfnPdd_Reg|

; 1113 :             if ((pEP->Descriptor.bmAttributes & 0x03) == 0x01) {

  00234	e5d52007	 ldrb        r2, [r5, #7]
  00238	e3813008	 orr         r3, r1, #8
  0023c	e1a01603	 mov         r1, r3, lsl #12
  00240	e2023003	 and         r3, r2, #3
  00244	e3530001	 cmp         r3, #1

; 1114 :                 cfg |= USBD_EP_ISO;

  00248	03811b02	 orreq       r1, r1, #2, 22

; 1115 :             }
; 1116 :             cfg |= offset >> 3;
; 1117 :             
; 1118 :             if (ep > 0)

  0024c	e3500000	 cmp         r0, #0

; 1119 :                 OUTREG32(&pUSBDRegs->EP_TX[ep - 1], cfg);

  00250	12803030	 addne       r3, r0, #0x30
  00254	10862103	 addne       r2, r6, r3, lsl #2
  00258	118131ae	 orrne       r3, r1, lr, lsr #3
  0025c	15823000	 strne       r3, [r2]
  00260	1a000003	 bne         |$LN1@UfnPdd_Reg|

; 1120 :             else
; 1121 :                 OALMSG(1, (L"+USBFN:: UfnPdd_RegisterDevice EP_TX = %d\r\n", ep - 1));

  00264	e2401001	 sub         r1, r0, #1
  00268	e59f0068	 ldr         r0, [pc, #0x68]
  0026c	eb000000	 bl          NKDbgPrintfW

; 1122 :             // Update offset
; 1123 :             offset += pEP->Descriptor.wMaxPacketSize;

  00270	e59de000	 ldr         lr, [sp]
  00274		 |$LN1@UfnPdd_Reg|
  00274	e5d52008	 ldrb        r2, [r5, #8]
  00278	e5d53009	 ldrb        r3, [r5, #9]
  0027c	e1823403	 orr         r3, r2, r3, lsl #8
  00280	e08ee003	 add         lr, lr, r3
  00284	e58de000	 str         lr, [sp]
  00288		 |$LN6@UfnPdd_Reg|
  00288	e5db3008	 ldrb        r3, [r11, #8]
  0028c	e28aa001	 add         r10, r10, #1
  00290	e2899014	 add         r9, r9, #0x14
  00294	e15a0003	 cmp         r10, r3
  00298	3affffce	 bcc         |$LL7@UfnPdd_Reg|
  0029c	e59d4034	 ldr         r4, [sp, #0x34]
  002a0	e59d7004	 ldr         r7, [sp, #4]
  002a4		 |$LN9@UfnPdd_Reg|
  002a4	e5d43008	 ldrb        r3, [r4, #8]
  002a8	e2877001	 add         r7, r7, #1
  002ac	e58d7004	 str         r7, [sp, #4]
  002b0	e1570003	 cmp         r7, r3
  002b4	e288801c	 add         r8, r8, #0x1C
  002b8	3affffbd	 bcc         |$LL10@UfnPdd_Reg|
  002bc		 |$LN8@UfnPdd_Reg|

; 1124 :         }
; 1125 :     }
; 1126 : 
; 1127 :     // Lock configuration
; 1128 :     SETREG32(&pUSBDRegs->SYSCON1, USBD_SYSCON1_CFG_LOCK);

  002bc	e5963018	 ldr         r3, [r6, #0x18]

; 1129 : 
; 1130 :     // Done
; 1131 :     return ERROR_SUCCESS;

  002c0	e3a00000	 mov         r0, #0
  002c4	e3833c01	 orr         r3, r3, #1, 24
  002c8	e5863018	 str         r3, [r6, #0x18]

; 1132 : }

  002cc	e28dd00c	 add         sp, sp, #0xC
  002d0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  002d4	e12fff1e	 bx          lr
  002d8		 |$LN57@UfnPdd_Reg|
  002d8		 |$LN58@UfnPdd_Reg|
  002d8	00000000	 DCD         |??_C@_1FI@PHBINKHD@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE@|
  002dc		 |$LN59@UfnPdd_Reg|
  002dc	00000000	 DCD         |??_C@_1FI@HDDLEHKG@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAE@|
  002e0		 |$M47361|

			 ENDP  ; |UfnPdd_RegisterDevice|

	EXPORT	|UfnPdd_IsEndpointSupportable|

  00000			 AREA	 |.pdata|, PDATA
|$T47377| DCD	|$LN6@UfnPdd_IsE@2|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_IsEndpointSupportable| PROC

; 1148 : ) {

  00000		 |$LN6@UfnPdd_IsE@2|
  00000		 |$M47374|
  00000	e3510000	 cmp         r1, #0

; 1149 :     USBFN_PDD *pPdd = pPddContext;
; 1150 : 
; 1151 :     // Update maximal packet size for EP0
; 1152 :     if (endPoint == 0) {
; 1153 :         DEBUGCHK(pEPDesc->wMaxPacketSize <= 64);
; 1154 :         DEBUGCHK(pEPDesc->bmAttributes == USB_ENDPOINT_TYPE_CONTROL);
; 1155 :         pEPDesc->wMaxPacketSize = 64;

  00004	03a02040	 moveq       r2, #0x40
  00008	03a01000	 moveq       r1, #0
  0000c	05c32004	 streqb      r2, [r3, #4]
  00010	05c31005	 streqb      r1, [r3, #5]

; 1156 : 
; 1157 :     }
; 1158 : 
; 1159 :     // Done
; 1160 :     return ERROR_SUCCESS;

  00014	e3a00000	 mov         r0, #0

; 1161 : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M47375|

			 ENDP  ; |UfnPdd_IsEndpointSupportable|

	EXPORT	|UfnPdd_IsConfigurationSupportable|

  00000			 AREA	 |.pdata|, PDATA
|$T47411| DCD	|$LN27@UfnPdd_IsC|
	DCD	0x40004b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_IsConfigurationSupportable| PROC

; 1177 : ) {

  00000		 |$LN27@UfnPdd_IsC|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M47408|
  00004	e1a05002	 mov         r5, r2

; 1178 :     DWORD rc = ERROR_INVALID_PARAMETER;
; 1179 :     USBFN_PDD *pPdd = pPddContext;
; 1180 :     UFN_INTERFACE *pIFC;
; 1181 :     UFN_ENDPOINT *pEP;
; 1182 :     WORD ifc, epx, count;
; 1183 :     WORD offset, size;
; 1184 : 
; 1185 : 
; 1186 :     // TODO: Update self power bit & maxPower
; 1187 : 
; 1188 :     // We must start with offset 8 + 64 (config plus EP0 size)
; 1189 :     offset = 8 + 64;
; 1190 :     // Clear number of end points
; 1191 :     count = 0;
; 1192 : 
; 1193 :     // For each interface in configuration
; 1194 :     for (ifc = 0; ifc < pConfig->Descriptor.bNumInterfaces; ifc++) {

  00008	e5d53008	 ldrb        r3, [r5, #8]
  0000c	e3a00057	 mov         r0, #0x57
  00010	e3a07048	 mov         r7, #0x48
  00014	e3530000	 cmp         r3, #0
  00018	e3a03000	 mov         r3, #0
  0001c	e3a04000	 mov         r4, #0
  00020	0a00003b	 beq         |$LN9@UfnPdd_IsC|
  00024	e3a08000	 mov         r8, #0
  00028	e3a0a001	 mov         r10, #1
  0002c		 |$LL11@UfnPdd_IsC|

; 1195 :         // For each endpoint in interface
; 1196 :         pIFC = &pConfig->pInterfaces[ifc];

  0002c	e5951018	 ldr         r1, [r5, #0x18]
  00030	e0633183	 rsb         r3, r3, r3, lsl #3

; 1197 :         for (epx = 0; epx < pIFC->Descriptor.bNumEndpoints; epx++) {

  00034	e3a0e000	 mov         lr, #0
  00038	e0816103	 add         r6, r1, r3, lsl #2
  0003c	e5d63008	 ldrb        r3, [r6, #8]
  00040	e3530000	 cmp         r3, #0
  00044	0a000027	 beq         |$LN6@UfnPdd_IsC|
  00048	e3a09000	 mov         r9, #0
  0004c		 |$LL8@UfnPdd_IsC|

; 1198 :             pEP = &pIFC->pEndpoints[epx];

  0004c	e5962018	 ldr         r2, [r6, #0x18]
  00050	e08e310e	 add         r3, lr, lr, lsl #2

; 1199 :             // We support maximal sizes 8, 16, 32 and 64 bytes for non-ISO
; 1200 :             size = pEP->Descriptor.wMaxPacketSize;
; 1201 :             // First round size to supported sizes
; 1202 :             size = 1 << Log2(size);

  00054	e3a01000	 mov         r1, #0
  00058	e082e103	 add         lr, r2, r3, lsl #2
  0005c	e5de2008	 ldrb        r2, [lr, #8]
  00060	e5de3009	 ldrb        r3, [lr, #9]
  00064	e1923403	 orrs        r3, r2, r3, lsl #8
  00068	0a000004	 beq         |$LN14@UfnPdd_IsC|
  0006c		 |$LL16@UfnPdd_IsC|
  0006c	e1b030a3	 movs        r3, r3, lsr #1
  00070	e2811001	 add         r1, r1, #1
  00074	1afffffc	 bne         |$LL16@UfnPdd_IsC|
  00078	e3510000	 cmp         r1, #0
  0007c	12411001	 subne       r1, r1, #1
  00080		 |$LN14@UfnPdd_IsC|

; 1203 :             // Is it ISO end point?
; 1204 :             if ((pEP->Descriptor.bmAttributes & 0x03) != 0x01) {

  00080	e5de3007	 ldrb        r3, [lr, #7]
  00084	e1a0211a	 mov         r2, r10, lsl r1
  00088	e2033003	 and         r3, r3, #3
  0008c	e1a02802	 mov         r2, r2, lsl #16
  00090	e3530001	 cmp         r3, #1
  00094	e1a02822	 mov         r2, r2, lsr #16
  00098	0a000003	 beq         |$LN5@UfnPdd_IsC|

; 1205 :                 // Non-ISO, max size is 64 bytes
; 1206 :                 if (size > 64) size = 64;

  0009c	e3520040	 cmp         r2, #0x40
  000a0	9a000003	 bls         |$LN2@UfnPdd_IsC|
  000a4	e3a02040	 mov         r2, #0x40

; 1207 :             } else {

  000a8	ea000001	 b           |$LN2@UfnPdd_IsC|
  000ac		 |$LN5@UfnPdd_IsC|

; 1208 :                 // ISO edpoint, maximal size is 512 bytes
; 1209 :                 if (size > 512) size = 512;

  000ac	e3520c02	 cmp         r2, #2, 24
  000b0	83a02c02	 movhi       r2, #2, 24
  000b4		 |$LN2@UfnPdd_IsC|

; 1210 :             }
; 1211 :             // Update EP size
; 1212 :             pEP->Descriptor.wMaxPacketSize = size;

  000b4	e1a03422	 mov         r3, r2, lsr #8
  000b8	e5ce3009	 strb        r3, [lr, #9]
  000bc	e2893001	 add         r3, r9, #1
  000c0	e5ce2008	 strb        r2, [lr, #8]
  000c4	e5d61008	 ldrb        r1, [r6, #8]

; 1213 :             // Calculate total buffer size
; 1214 :             offset += size;

  000c8	e1a0e803	 mov         lr, r3, lsl #16
  000cc	e0822007	 add         r2, r2, r7
  000d0	e1a0e82e	 mov         lr, lr, lsr #16
  000d4	e1a07802	 mov         r7, r2, lsl #16
  000d8	e15e0001	 cmp         lr, r1
  000dc	e1a0900e	 mov         r9, lr
  000e0	e1a07827	 mov         r7, r7, lsr #16
  000e4	3affffd8	 bcc         |$LL8@UfnPdd_IsC|
  000e8		 |$LN6@UfnPdd_IsC|

; 1215 :         }
; 1216 :         // Add number of end points to total count
; 1217 :         count += pIFC->Descriptor.bNumEndpoints;

  000e8	e5d62008	 ldrb        r2, [r6, #8]
  000ec	e5d51008	 ldrb        r1, [r5, #8]
  000f0	e2883001	 add         r3, r8, #1
  000f4	e0822004	 add         r2, r2, r4
  000f8	e1a03803	 mov         r3, r3, lsl #16
  000fc	e1a04802	 mov         r4, r2, lsl #16
  00100	e1a03823	 mov         r3, r3, lsr #16
  00104	e1a04824	 mov         r4, r4, lsr #16
  00108	e1a08003	 mov         r8, r3
  0010c	e1530001	 cmp         r3, r1
  00110	3affffc5	 bcc         |$LL11@UfnPdd_IsC|
  00114		 |$LN9@UfnPdd_IsC|

; 1218 :     }
; 1219 : 
; 1220 :     // Can we support this configuration?
; 1221 :     if (count < USBD_EP_COUNT && offset <= 2048) rc = ERROR_SUCCESS;

  00114	e3540010	 cmp         r4, #0x10
  00118	2a000001	 bcs         |$LN1@UfnPdd_IsC|
  0011c	e3570b02	 cmp         r7, #2, 22
  00120	93a00000	 movls       r0, #0
  00124		 |$LN1@UfnPdd_IsC|

; 1222 : 
; 1223 :     // Done
; 1224 :     return rc;
; 1225 : }

  00124	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00128	e12fff1e	 bx          lr
  0012c		 |$M47409|

			 ENDP  ; |UfnPdd_IsConfigurationSupportable|

	EXPORT	|UfnPdd_Init|
	EXPORT	|??_C@_1CI@PLGKOIKJ@?$AA?9?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@JFIJHLAK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@KOBDIJLJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALPAtoVA|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T47434| DCD	|$LN18@UfnPdd_Ini@3|
	DCD	0x40008302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PLGKOIKJ@?$AA?9?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@JFIJHLAK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "f", 0x0, "n", 0x0, "P", 0x0, "d", 0x0, "d"
	DCB	0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@KOBDIJLJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "D", 0x0, "D", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_Init| PROC

; 1238 : {

  00000		 |$LN18@UfnPdd_Ini@3|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M47431|
  00008	e58d3000	 str         r3, [sp]
  0000c	e1a03001	 mov         r3, r1
  00010	e58d3004	 str         r3, [sp, #4]
  00014	e58d2008	 str         r2, [sp, #8]

; 1239 :     DWORD rc;
; 1240 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"+USBFN:: PDD Init\r\n"));

  00018	e59f4188	 ldr         r4, [pc, #0x188]
  0001c	e5940440	 ldr         r0, [r4, #0x440]
  00020	e3100a02	 tst         r0, #2, 20
  00024	13100004	 tstne       r0, #4
  00028	159f01d8	 ldrne       r0, [pc, #0x1D8]
  0002c	1b000000	 blne        NKDbgPrintfW

; 1241 :     {
; 1242 :         USBFN_PDD *pPdd;
; 1243 :         OMAP2420_USBD_REGS *pUSBDRegs;
; 1244 :         DWORD ep;
; 1245 :     
; 1246 :         rc = ERROR_INVALID_PARAMETER;
; 1247 :     
; 1248 :         // Allocate and initialize the OHCD object.
; 1249 :         pPdd = &g_usbfnpdd;
; 1250 : 
; 1251 :         if (pPdd == NULL) goto clean;
; 1252 :     
; 1253 :         // Clear the allocated object.
; 1254 :         memset(pPdd, 0, sizeof(USBFN_PDD));

  00030	e59f517c	 ldr         r5, [pc, #0x17C]
  00034	e3a02f4a	 mov         r2, #0x4A, 30
  00038	e3a01000	 mov         r1, #0
  0003c	e1a00005	 mov         r0, r5
  00040	e3a06057	 mov         r6, #0x57
  00044	eb000000	 bl          memset

; 1255 :     
; 1256 :         // Map the USB OHCI registers
; 1257 :         pUSBDRegs = (OMAP2420_USBD_REGS*)OALPAtoUA( OMAP2420_USBD_REGS_PA );

  00048	e59f01b4	 ldr         r0, [pc, #0x1B4]
  0004c	e3a01000	 mov         r1, #0
  00050	eb000000	 bl          OALPAtoVA
  00054	e3500000	 cmp         r0, #0

; 1258 :     
; 1259 :         if (pUSBDRegs == NULL) {

  00058	1a000006	 bne         |$LN4@UfnPdd_Ini@3|

; 1260 :             OALMSG(OAL_ERROR, (
; 1261 :                 L"ERROR: UfnPdd_Init: Controller registers mapping failed\r\n"
; 1262 :             ));

  0005c	e5942440	 ldr         r2, [r4, #0x440]
  00060	e3120001	 tst         r2, #1
  00064	0a000046	 beq         |$clean$46730|
  00068	e59f0190	 ldr         r0, [pc, #0x190]
  0006c	eb000000	 bl          NKDbgPrintfW

; 1263 :             goto clean;

  00070	e5942440	 ldr         r2, [r4, #0x440]
  00074	ea000042	 b           |$clean$46730|
  00078		 |$LN4@UfnPdd_Ini@3|

; 1264 :         }
; 1265 :         
; 1266 :         pPdd->pUSBDRegs = pUSBDRegs;
; 1267 :     
; 1268 :         // Clear USB Interrupt enable registers
; 1269 :         OUTREG32(&pUSBDRegs->IRQ_EN, 0x0000);

  00078	e3a01000	 mov         r1, #0
  0007c	e5850008	 str         r0, [r5, #8]
  00080	e5801028	 str         r1, [r0, #0x28]

; 1270 :         OUTREG32(&pUSBDRegs->DMA_IRQ_EN, 0x0000);
; 1271 :     
; 1272 :         // Reset all interrupts
; 1273 :         OUTREG32(&pUSBDRegs->IRQ_SRC, 0xFFFFFFFF);

  00084	e3e03000	 mvn         r3, #0
  00088	e580102c	 str         r1, [r0, #0x2C]
  0008c	e5803030	 str         r3, [r0, #0x30]

; 1274 :     
; 1275 :         // Disable all RX, TX EPs
; 1276 :         OUTREG32(&pUSBDRegs->EP0, 0);

  00090	e5801080	 str         r1, [r0, #0x80]
  00094	e2803084	 add         r3, r0, #0x84
  00098	e3a0200f	 mov         r2, #0xF
  0009c		 |$LL3@UfnPdd_Ini@3|

; 1277 :         for (ep = 0; ep < USBD_NONZERO_EP_COUNT; ep++) {
; 1278 :             OUTREG32(&pUSBDRegs->EP_RX[ep], 0);

  0009c	e5831000	 str         r1, [r3]

; 1279 :             OUTREG32(&pUSBDRegs->EP_TX[ep], 0);

  000a0	e5831040	 str         r1, [r3, #0x40]
  000a4	e2833004	 add         r3, r3, #4
  000a8	e2522001	 subs        r2, r2, #1
  000ac	1afffffa	 bne         |$LL3@UfnPdd_Ini@3|

; 1280 :         }
; 1281 :     
; 1282 :         //OUTREG32(&pUSBDRegs->SYSCON1, 0);
; 1283 :     
; 1284 :         // Set PDD interface
; 1285 :         pPddIfc->dwVersion = UFN_PDD_INTERFACE_VERSION;
; 1286 :         pPddIfc->dwCapabilities = UFN_PDD_CAPS_SUPPORTS_FULL_SPEED;
; 1287 :         pPddIfc->dwEndpointCount = USBD_EP_COUNT;
; 1288 :         pPddIfc->pvPddContext = pPdd;
; 1289 :         pPddIfc->pfnDeinit = UfnPdd_Deinit;
; 1290 :         pPddIfc->pfnIsConfigurationSupportable = UfnPdd_IsConfigurationSupportable;
; 1291 :         pPddIfc->pfnIsEndpointSupportable = UfnPdd_IsEndpointSupportable;
; 1292 :         pPddIfc->pfnInitEndpoint = UfnPdd_InitEndpoint;
; 1293 :         pPddIfc->pfnRegisterDevice = UfnPdd_RegisterDevice;
; 1294 :         pPddIfc->pfnDeregisterDevice = UfnPdd_DeregisterDevice;
; 1295 :         pPddIfc->pfnStart = UfnPdd_Start;
; 1296 :         pPddIfc->pfnStop = UfnPdd_Stop;
; 1297 :         pPddIfc->pfnIssueTransfer = UfnPdd_IssueTransfer;
; 1298 :         pPddIfc->pfnAbortTransfer = UfnPdd_AbortTransfer;
; 1299 :         pPddIfc->pfnDeinitEndpoint = UfnPdd_DeinitEndpoint;
; 1300 :         pPddIfc->pfnStallEndpoint = UfnPdd_StallEndpoint;
; 1301 :         pPddIfc->pfnClearEndpointStall = UfnPdd_ClearEndpointStall;
; 1302 :         pPddIfc->pfnSendControlStatusHandshake = UfnPdd_SendControlStatusHandshake;
; 1303 :         pPddIfc->pfnSetAddress = UfnPdd_SetAddress;
; 1304 :         pPddIfc->pfnIsEndpointHalted = UfnPdd_IsEndpointHalted;
; 1305 :         pPddIfc->pfnInitiateRemoteWakeup = UfnPdd_InitiateRemoteWakeup;
; 1306 :         pPddIfc->pfnPowerDown = UfnPdd_PowerDown;
; 1307 :         pPddIfc->pfnPowerUp = UfnPdd_PowerUp;
; 1308 :         pPddIfc->pfnIOControl = UfnPdd_IOControl;

  000b0	e59f3144	 ldr         r3, [pc, #0x144]
  000b4	e59d2000	 ldr         r2, [sp]
  000b8	e59f1138	 ldr         r1, [pc, #0x138]
  000bc	e59f0130	 ldr         r0, [pc, #0x130]
  000c0	e5823010	 str         r3, [r2, #0x10]
  000c4	e59f2124	 ldr         r2, [pc, #0x124]
  000c8	e59d3000	 ldr         r3, [sp]
  000cc	e59fe118	 ldr         lr, [pc, #0x118]
  000d0	e59f4110	 ldr         r4, [pc, #0x110]
  000d4	e5832014	 str         r2, [r3, #0x14]
  000d8	e1a02003	 mov         r2, r3
  000dc	e59f3100	 ldr         r3, [pc, #0x100]
  000e0	e59f50f8	 ldr         r5, [pc, #0xF8]
  000e4	e59f60f0	 ldr         r6, [pc, #0xF0]
  000e8	e5823044	 str         r3, [r2, #0x44]
  000ec	e59f30e4	 ldr         r3, [pc, #0xE4]
  000f0	e59f70dc	 ldr         r7, [pc, #0xDC]
  000f4	e59f80d4	 ldr         r8, [pc, #0xD4]
  000f8	e5823048	 str         r3, [r2, #0x48]
  000fc	e59f30c8	 ldr         r3, [pc, #0xC8]
  00100	e59f90c0	 ldr         r9, [pc, #0xC0]
  00104	e59fa0b8	 ldr         r10, [pc, #0xB8]
  00108	e582304c	 str         r3, [r2, #0x4C]
  0010c	e59f30ac	 ldr         r3, [pc, #0xAC]
  00110	e59fb0a4	 ldr         r11, [pc, #0xA4]
  00114	e5821018	 str         r1, [r2, #0x18]
  00118	e5823050	 str         r3, [r2, #0x50]
  0011c	e59f3094	 ldr         r3, [pc, #0x94]
  00120	e59f108c	 ldr         r1, [pc, #0x8C]
  00124	e282c01c	 add         r12, r2, #0x1C
  00128	e88c4001	 stmia       r12, {r0, lr}
  0012c	e5823054	 str         r3, [r2, #0x54]
  00130	e59f3078	 ldr         r3, [pc, #0x78]
  00134	e282c024	 add         r12, r2, #0x24
  00138	e88c0ff0	 stmia       r12, {r4 - r11}

; 1309 :     
; 1310 :         // Save MDD context & notify function
; 1311 :         pPdd->pMddContext = pMddContext;
; 1312 :         pPdd->pfnNotify = pMddIfc->pfnNotify;
; 1313 :     
; 1314 :         // Done
; 1315 :         rc = ERROR_SUCCESS;

  0013c	e3a06000	 mov         r6, #0
  00140	e5823058	 str         r3, [r2, #0x58]
  00144	e59f3060	 ldr         r3, [pc, #0x60]
  00148	e582100c	 str         r1, [r2, #0xC]
  0014c	e582305c	 str         r3, [r2, #0x5C]
  00150	e3a03806	 mov         r3, #6, 16
  00154	e5823000	 str         r3, [r2]
  00158	e3a03001	 mov         r3, #1
  0015c	e5823004	 str         r3, [r2, #4]
  00160	e3a03010	 mov         r3, #0x10
  00164	e5823008	 str         r3, [r2, #8]
  00168	e59d3004	 ldr         r3, [sp, #4]
  0016c	e59f2034	 ldr         r2, [pc, #0x34]
  00170	e5813000	 str         r3, [r1]
  00174	e59d3008	 ldr         r3, [sp, #8]
  00178	e5922440	 ldr         r2, [r2, #0x440]
  0017c	e5933004	 ldr         r3, [r3, #4]
  00180	e5813004	 str         r3, [r1, #4]
  00184		 |$clean$46730|

; 1316 : 
; 1317 :     }
; 1318 : 
; 1319 : clean:
; 1320 :     OALMSG(OAL_ETHER&&OAL_FUNC, (L"-USBFN:: PDD Init\r\n"));

  00184	e3120a02	 tst         r2, #2, 20
  00188	13120004	 tstne       r2, #4
  0018c	159f0010	 ldrne       r0, [pc, #0x10]
  00190	1b000000	 blne        NKDbgPrintfW

; 1321 :     return rc;
; 1322 : }

  00194	e1a00006	 mov         r0, r6
  00198	e28dd00c	 add         sp, sp, #0xC
  0019c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001a0	e12fff1e	 bx          lr
  001a4		 |$LN19@UfnPdd_Ini@3|
  001a4		 |$LN20@UfnPdd_Ini@3|
  001a4	00000000	 DCD         |??_C@_1CI@PLGKOIKJ@?$AA?9?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  001a8		 |$LN21@UfnPdd_Ini@3|
  001a8	00000000	 DCD         |dpCurSettings|
  001ac		 |$LN22@UfnPdd_Ini@3|
  001ac	00000000	 DCD         |UfnPdd_IOControl|
  001b0		 |$LN23@UfnPdd_Ini@3|
  001b0	00000000	 DCD         |UfnPdd_PowerUp|
  001b4		 |$LN24@UfnPdd_Ini@3|
  001b4	00000000	 DCD         |g_usbfnpdd|
  001b8		 |$LN25@UfnPdd_Ini@3|
  001b8	00000000	 DCD         |UfnPdd_PowerDown|
  001bc		 |$LN26@UfnPdd_Ini@3|
  001bc	00000000	 DCD         |UfnPdd_ClearEndpointStall|
  001c0		 |$LN27@UfnPdd_Ini@3|
  001c0	00000000	 DCD         |UfnPdd_InitiateRemoteWakeup|
  001c4		 |$LN28@UfnPdd_Ini@3|
  001c4	00000000	 DCD         |UfnPdd_StallEndpoint|
  001c8		 |$LN29@UfnPdd_Ini@3|
  001c8	00000000	 DCD         |UfnPdd_DeinitEndpoint|
  001cc		 |$LN30@UfnPdd_Ini@3|
  001cc	00000000	 DCD         |UfnPdd_IsEndpointHalted|
  001d0		 |$LN31@UfnPdd_Ini@3|
  001d0	00000000	 DCD         |UfnPdd_AbortTransfer|
  001d4		 |$LN32@UfnPdd_Ini@3|
  001d4	00000000	 DCD         |UfnPdd_IssueTransfer|
  001d8		 |$LN33@UfnPdd_Ini@3|
  001d8	00000000	 DCD         |UfnPdd_SetAddress|
  001dc		 |$LN34@UfnPdd_Ini@3|
  001dc	00000000	 DCD         |UfnPdd_Stop|
  001e0		 |$LN35@UfnPdd_Ini@3|
  001e0	00000000	 DCD         |UfnPdd_Start|
  001e4		 |$LN36@UfnPdd_Ini@3|
  001e4	00000000	 DCD         |UfnPdd_SendControlStatusHandshake|
  001e8		 |$LN37@UfnPdd_Ini@3|
  001e8	00000000	 DCD         |UfnPdd_DeregisterDevice|
  001ec		 |$LN38@UfnPdd_Ini@3|
  001ec	00000000	 DCD         |UfnPdd_RegisterDevice|
  001f0		 |$LN39@UfnPdd_Ini@3|
  001f0	00000000	 DCD         |UfnPdd_IsConfigurationSupportable|
  001f4		 |$LN40@UfnPdd_Ini@3|
  001f4	00000000	 DCD         |UfnPdd_InitEndpoint|
  001f8		 |$LN41@UfnPdd_Ini@3|
  001f8	00000000	 DCD         |UfnPdd_IsEndpointSupportable|
  001fc		 |$LN42@UfnPdd_Ini@3|
  001fc	00000000	 DCD         |UfnPdd_Deinit|
  00200		 |$LN43@UfnPdd_Ini@3|
  00200	00000000	 DCD         |??_C@_1HE@JFIJHLAK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAf?$AAn?$AAP?$AAd?$AAd?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?5?$AAr@|
  00204		 |$LN44@UfnPdd_Ini@3|
  00204	4805e200	 DCD         0x4805e200
  00208		 |$LN45@UfnPdd_Ini@3|
  00208	00000000	 DCD         |??_C@_1CI@KOBDIJLJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAF?$AAN?$AA?3?$AA?3?$AA?5?$AAP?$AAD?$AAD?$AA?5?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0020c		 |$M47432|

			 ENDP  ; |UfnPdd_Init|

	EXPORT	|UfnPdd_DllEntry|

  00000			 AREA	 |.pdata|, PDATA
|$T47470| DCD	|$LN5@UfnPdd_Dll|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |UfnPdd_DllEntry| PROC

; 1328 : ) {

  00000		 |$LN5@UfnPdd_Dll|
  00000		 |$M47467|

; 1329 :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 1330 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M47468|

			 ENDP  ; |UfnPdd_DllEntry|

	END
