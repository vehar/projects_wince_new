; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\TIMER\TIMER32K\timer.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|g_oalTimer|, 0x28


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1DG@MBLBIFGK@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?4?$AA?4?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@| [ DATA ] ; `string'
	EXPORT	|OALTimerQueryPerformanceCounter|
	EXPORT	|OALTimerQueryPerformanceFrequency|
	EXPORT	|??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALTimerInit|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALIntrRequestSysIntr|
	IMPORT	|g_oalTimerIrq|
	IMPORT	|g_pNKGlobal|
	IMPORT	|g_pOemGlobal|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.bss|, NOINIT
|g_pTimerRegs| % 0x4
|g_pPRCMRegs| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T45646| DCD	|$LN13@OALTimerIn|
	DCD	0x40010e04
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\timer\timer32k\timer.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MBLBIFGK@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?4?$AA?4?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ".", 0x0, ".", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " "
	DCB	0x0, "e", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerInit| PROC

; 61   : ) {

  00000		 |$LN13@OALTimerIn|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M45643|

; 62   :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 63   :     UINT32 sysIntr;
; 64   : 
; 65   :     OALMSG(OAL_TIMER&&OAL_FUNC, (
; 66   :         L"+OALTimerInit(%d, %d, %d)\r\n", msecPerSysTick, countsPerMSec,
; 67   :         countsMargin
; 68   :     ));

  00018	e59f33ec	 ldr         r3, [pc, #0x3EC]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130b02	 tst         r3, #2, 22
  00024	0a00000b	 beq         |$LN5@OALTimerIn|
  00028	e59f33dc	 ldr         r3, [pc, #0x3DC]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	0a000007	 beq         |$LN5@OALTimerIn|
  00038	e59d3038	 ldr         r3, [sp, #0x38]
  0003c	e59d2034	 ldr         r2, [sp, #0x34]
  00040	e59d1030	 ldr         r1, [sp, #0x30]
  00044	e59f03e8	 ldr         r0, [pc, #0x3E8]
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e3a03001	 mov         r3, #1
  00050	e58d300c	 str         r3, [sp, #0xC]
  00054	ea000001	 b           |$LN6@OALTimerIn|
  00058		 |$LN5@OALTimerIn|
  00058	e3a03000	 mov         r3, #0
  0005c	e58d300c	 str         r3, [sp, #0xC]
  00060		 |$LN6@OALTimerIn|

; 69   : 
; 70   :     // Initialize high resolution timer function pointers
; 71   :     pQueryPerformanceFrequency = OALTimerQueryPerformanceFrequency;

  00060	e59f33c4	 ldr         r3, [pc, #0x3C4]
  00064	e5933000	 ldr         r3, [r3]
  00068	e2832034	 add         r2, r3, #0x34
  0006c	e59f33bc	 ldr         r3, [pc, #0x3BC]
  00070	e5823000	 str         r3, [r2]

; 72   :     pQueryPerformanceCounter   = OALTimerQueryPerformanceCounter;

  00074	e59f33b0	 ldr         r3, [pc, #0x3B0]
  00078	e5933000	 ldr         r3, [r3]
  0007c	e2832030	 add         r2, r3, #0x30
  00080	e59f33a0	 ldr         r3, [pc, #0x3A0]
  00084	e5823000	 str         r3, [r2]

; 73   : 
; 74   :     // Ignore two last passed arguments 
; 75   :     countsPerMSec = OMAP2420_GPTIMER1_COUNTS_PER_1MS;

  00088	e3a03020	 mov         r3, #0x20
  0008c	e58d3034	 str         r3, [sp, #0x34]

; 76   :     countsMargin = 2;

  00090	e3a03002	 mov         r3, #2
  00094	e58d3038	 str         r3, [sp, #0x38]

; 77   :     
; 78   :     // 32 bit counter
; 79   :     g_oalTimer.maxPeriodMSec = 0xFFFFFFFF/countsPerMSec;

  00098	e59d0034	 ldr         r0, [sp, #0x34]
  0009c	e3e01000	 mvn         r1, #0
  000a0	eb000000	 bl          __rt_udiv
  000a4	e59f3370	 ldr         r3, [pc, #0x370]
  000a8	e5830008	 str         r0, [r3, #8]

; 80   : 
; 81   :     // System tick period must be smaller than counter maximal period.
; 82   :     // This reduction will be usual when variable tick is used.
; 83   :     if (msecPerSysTick > g_oalTimer.maxPeriodMSec) {

  000ac	e59d2030	 ldr         r2, [sp, #0x30]
  000b0	e59f3364	 ldr         r3, [pc, #0x364]
  000b4	e5933008	 ldr         r3, [r3, #8]
  000b8	e1520003	 cmp         r2, r3
  000bc	9a000002	 bls         |$LN2@OALTimerIn|

; 84   :         msecPerSysTick = g_oalTimer.maxPeriodMSec;

  000c0	e59f3354	 ldr         r3, [pc, #0x354]
  000c4	e5933008	 ldr         r3, [r3, #8]
  000c8	e58d3030	 str         r3, [sp, #0x30]
  000cc		 |$LN2@OALTimerIn|

; 85   :     }
; 86   : 
; 87   :     // Initialize timer state structure
; 88   :     g_oalTimer.countsPerMSec = countsPerMSec;

  000cc	e59d2034	 ldr         r2, [sp, #0x34]
  000d0	e59f3344	 ldr         r3, [pc, #0x344]
  000d4	e5832000	 str         r2, [r3]

; 89   :     g_oalTimer.countsMargin = countsMargin;

  000d8	e59d2038	 ldr         r2, [sp, #0x38]
  000dc	e59f3338	 ldr         r3, [pc, #0x338]
  000e0	e5832004	 str         r2, [r3, #4]

; 90   :     g_oalTimer.msecPerSysTick = msecPerSysTick;

  000e4	e59d2030	 ldr         r2, [sp, #0x30]
  000e8	e59f332c	 ldr         r3, [pc, #0x32C]
  000ec	e583200c	 str         r2, [r3, #0xC]

; 91   :     g_oalTimer.countsPerSysTick = g_oalTimer.countsPerMSec * msecPerSysTick;

  000f0	e59f3324	 ldr         r3, [pc, #0x324]
  000f4	e5931000	 ldr         r1, [r3]
  000f8	e59d3030	 ldr         r3, [sp, #0x30]
  000fc	e0020391	 mul         r2, r1, r3
  00100	e59f3314	 ldr         r3, [pc, #0x314]
  00104	e5832010	 str         r2, [r3, #0x10]

; 92   :     g_oalTimer.actualMSecPerSysTick = g_oalTimer.msecPerSysTick;

  00108	e59f330c	 ldr         r3, [pc, #0x30C]
  0010c	e593200c	 ldr         r2, [r3, #0xC]
  00110	e59f3304	 ldr         r3, [pc, #0x304]
  00114	e5832014	 str         r2, [r3, #0x14]

; 93   :     g_oalTimer.actualCountsPerSysTick = g_oalTimer.countsPerSysTick;

  00118	e59f32fc	 ldr         r3, [pc, #0x2FC]
  0011c	e5932010	 ldr         r2, [r3, #0x10]
  00120	e59f32f4	 ldr         r3, [pc, #0x2F4]
  00124	e5832018	 str         r2, [r3, #0x18]

; 94   : 
; 95   :     // Set kernel exported globals to initial values
; 96   :     idleconv = 2;

  00128	e59f32f0	 ldr         r3, [pc, #0x2F0]
  0012c	e5933000	 ldr         r3, [r3]
  00130	e28320d8	 add         r2, r3, #0xD8
  00134	e3a03002	 mov         r3, #2
  00138	e5823000	 str         r3, [r2]

; 97   :     curridlelow = 0;

  0013c	e59f32dc	 ldr         r3, [pc, #0x2DC]
  00140	e5933000	 ldr         r3, [r3]
  00144	e28320d0	 add         r2, r3, #0xD0
  00148	e3a03000	 mov         r3, #0
  0014c	e5823000	 str         r3, [r2]

; 98   :     curridlehigh = 0;

  00150	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00154	e5933000	 ldr         r3, [r3]
  00158	e28320d4	 add         r2, r3, #0xD4
  0015c	e3a03000	 mov         r3, #0
  00160	e5823000	 str         r3, [r2]

; 99   : 
; 100  :     // Set global variable to tell interrupt module about timer used
; 101  :     g_oalTimerIrq = IRQ_GPT1; 

  00164	e59f22b8	 ldr         r2, [pc, #0x2B8]
  00168	e3a03025	 mov         r3, #0x25
  0016c	e5823000	 str         r3, [r2]

; 102  : 
; 103  :     // Request SYSINTR for timer IRQ, it is done to reserve it...
; 104  :     sysIntr = OALIntrRequestSysIntr(1, &g_oalTimerIrq, OAL_INTR_FORCE_STATIC);

  00170	e3a02004	 mov         r2, #4
  00174	e59f12a8	 ldr         r1, [pc, #0x2A8]
  00178	e3a00001	 mov         r0, #1
  0017c	eb000000	 bl          OALIntrRequestSysIntr
  00180	e58d0010	 str         r0, [sp, #0x10]
  00184	e59d3010	 ldr         r3, [sp, #0x10]
  00188	e58d3004	 str         r3, [sp, #4]

; 105  :     
; 106  :     // Hardware Setup
; 107  :     g_pPRCMRegs  = OALPAtoUA(OMAP2420_PRCM_REGS_PA);

  0018c	e3a01000	 mov         r1, #0
  00190	e3a00312	 mov         r0, #0x12, 6
  00194	e3800902	 orr         r0, r0, #2, 18
  00198	eb000000	 bl          OALPAtoVA
  0019c	e58d0014	 str         r0, [sp, #0x14]
  001a0	e59d2014	 ldr         r2, [sp, #0x14]
  001a4	e59f3268	 ldr         r3, [pc, #0x268]
  001a8	e5832000	 str         r2, [r3]

; 108  :     g_pTimerRegs = OALPAtoUA(OMAP2420_GPTIMER1_REGS_PA);

  001ac	e3a01000	 mov         r1, #0
  001b0	e3a00312	 mov         r0, #0x12, 6
  001b4	e380090a	 orr         r0, r0, #0xA, 18
  001b8	eb000000	 bl          OALPAtoVA
  001bc	e58d0018	 str         r0, [sp, #0x18]
  001c0	e59d2018	 ldr         r2, [sp, #0x18]
  001c4	e59f324c	 ldr         r3, [pc, #0x24C]
  001c8	e5832000	 str         r2, [r3]

; 109  :     
; 110  :     OUTREG32(&g_pTimerRegs->TCLR, 0x00000000);

  001cc	e59f3244	 ldr         r3, [pc, #0x244]
  001d0	e5933000	 ldr         r3, [r3]
  001d4	e2832024	 add         r2, r3, #0x24
  001d8	e3a03000	 mov         r3, #0
  001dc	e5823000	 str         r3, [r2]

; 111  :     CurMSec = 0;

  001e0	e59f3238	 ldr         r3, [pc, #0x238]
  001e4	e5933000	 ldr         r3, [r3]
  001e8	e28320c8	 add         r2, r3, #0xC8
  001ec	e3a03000	 mov         r3, #0
  001f0	e5823000	 str         r3, [r2]

; 112  : 
; 113  :     // Select non posted mode
; 114  :     CLRREG32(&g_pTimerRegs->TSICR, 0x4);

  001f4	e59f321c	 ldr         r3, [pc, #0x21C]
  001f8	e5933000	 ldr         r3, [r3]
  001fc	e2833040	 add         r3, r3, #0x40
  00200	e5932000	 ldr         r2, [r3]
  00204	e3e03004	 mvn         r3, #4
  00208	e0022003	 and         r2, r2, r3
  0020c	e59f3204	 ldr         r3, [pc, #0x204]
  00210	e5933000	 ldr         r3, [r3]
  00214	e2833040	 add         r3, r3, #0x40
  00218	e5832000	 str         r2, [r3]

; 115  :     
; 116  :     // Enable global wakeup feature and smart idle 
; 117  :     //  Set clock activity - FCLK can be  switched off, L4 interface clock is maintained during wkup.
; 118  :     OUTREG32(&g_pTimerRegs->TIOCP_CFG, 0x00000214);

  0021c	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00220	e5933000	 ldr         r3, [r3]
  00224	e2832010	 add         r2, r3, #0x10
  00228	e3a03f85	 mov         r3, #0x85, 30
  0022c	e5823000	 str         r3, [r2]

; 119  :     
; 120  :     // Enable overflow wakeup
; 121  :     OUTREG32(&g_pTimerRegs->TWER, 0x00000002);

  00230	e59f31e0	 ldr         r3, [pc, #0x1E0]
  00234	e5933000	 ldr         r3, [r3]
  00238	e2832020	 add         r2, r3, #0x20
  0023c	e3a03002	 mov         r3, #2
  00240	e5823000	 str         r3, [r2]

; 122  :     
; 123  :     //Clear Interrupt
; 124  :     SETREG32(&g_pTimerRegs->TISR, 0x2);

  00244	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00248	e5933000	 ldr         r3, [r3]
  0024c	e2833018	 add         r3, r3, #0x18
  00250	e5933000	 ldr         r3, [r3]
  00254	e3832002	 orr         r2, r3, #2
  00258	e59f31b8	 ldr         r3, [pc, #0x1B8]
  0025c	e5933000	 ldr         r3, [r3]
  00260	e2833018	 add         r3, r3, #0x18
  00264	e5832000	 str         r2, [r3]

; 125  : 
; 126  :     // Enabled overflow interrupt
; 127  :     SETREG32(&g_pTimerRegs->TIER, 0x2);

  00268	e59f31a8	 ldr         r3, [pc, #0x1A8]
  0026c	e5933000	 ldr         r3, [r3]
  00270	e283301c	 add         r3, r3, #0x1C
  00274	e5933000	 ldr         r3, [r3]
  00278	e3832002	 orr         r2, r3, #2
  0027c	e59f3194	 ldr         r3, [pc, #0x194]
  00280	e5933000	 ldr         r3, [r3]
  00284	e283301c	 add         r3, r3, #0x1C
  00288	e5832000	 str         r2, [r3]

; 128  :     
; 129  :     //OALMSG(TRUE, (L"Timer Load Value is %x\r\n",g_oalTimer.countsPerSysTick));
; 130  :     //  Set the load register value.
; 131  :     OUTREG32(&g_pTimerRegs->TLDR, (0xFFFFFFFF - g_oalTimer.countsPerSysTick+1));

  0028c	e59f3188	 ldr         r3, [pc, #0x188]
  00290	e5932010	 ldr         r2, [r3, #0x10]
  00294	e3e03000	 mvn         r3, #0
  00298	e0623003	 rsb         r3, r2, r3
  0029c	e2832001	 add         r2, r3, #1
  002a0	e59f3170	 ldr         r3, [pc, #0x170]
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e283302c	 add         r3, r3, #0x2C
  002ac	e5832000	 str         r2, [r3]

; 132  :     
; 133  :     //  Trigger a counter reload by writing    
; 134  :     OUTREG32(&g_pTimerRegs->TTGR, 0xFFFFFFFF);

  002b0	e59f3160	 ldr         r3, [pc, #0x160]
  002b4	e5933000	 ldr         r3, [r3]
  002b8	e2832030	 add         r2, r3, #0x30
  002bc	e3e03000	 mvn         r3, #0
  002c0	e5823000	 str         r3, [r2]

; 135  :    
; 136  :     //  Start the timer.  Also set for auto reload
; 137  :     SETREG32(&g_pTimerRegs->TCLR, 0x00000003);

  002c4	e59f314c	 ldr         r3, [pc, #0x14C]
  002c8	e5933000	 ldr         r3, [r3]
  002cc	e2833024	 add         r3, r3, #0x24
  002d0	e5933000	 ldr         r3, [r3]
  002d4	e3832003	 orr         r2, r3, #3
  002d8	e59f3138	 ldr         r3, [pc, #0x138]
  002dc	e5933000	 ldr         r3, [r3]
  002e0	e2833024	 add         r3, r3, #0x24
  002e4	e5832000	 str         r2, [r3]

; 138  : 
; 139  :     // Setup Timer clock
; 140  :     CLRREG32(&g_pPRCMRegs->ulCM_CLKSEL_WKUP, 0x3);

  002e8	e59f3124	 ldr         r3, [pc, #0x124]
  002ec	e5933000	 ldr         r3, [r3]
  002f0	e2833d11	 add         r3, r3, #0x11, 26
  002f4	e5932000	 ldr         r2, [r3]
  002f8	e3e03003	 mvn         r3, #3
  002fc	e0022003	 and         r2, r2, r3
  00300	e59f310c	 ldr         r3, [pc, #0x10C]
  00304	e5933000	 ldr         r3, [r3]
  00308	e2833d11	 add         r3, r3, #0x11, 26
  0030c	e5832000	 str         r2, [r3]

; 141  :     
; 142  :     // Enable the functional and interface  clocks for the GPT 1. 
; 143  :     SETREG32(&g_pPRCMRegs->ulCM_ICLKEN_WKUP, 0x1);

  00310	e59f30fc	 ldr         r3, [pc, #0xFC]
  00314	e5933000	 ldr         r3, [r3]
  00318	e2833e41	 add         r3, r3, #0x41, 28
  0031c	e5933000	 ldr         r3, [r3]
  00320	e3832001	 orr         r2, r3, #1
  00324	e59f30e8	 ldr         r3, [pc, #0xE8]
  00328	e5933000	 ldr         r3, [r3]
  0032c	e2833e41	 add         r3, r3, #0x41, 28
  00330	e5832000	 str         r2, [r3]

; 144  :     SETREG32(&g_pPRCMRegs->ulCM_FCLKEN_WKUP, 0x1);

  00334	e59f30d8	 ldr         r3, [pc, #0xD8]
  00338	e5933000	 ldr         r3, [r3]
  0033c	e2833b01	 add         r3, r3, #1, 22
  00340	e5933000	 ldr         r3, [r3]
  00344	e3832001	 orr         r2, r3, #1
  00348	e59f30c4	 ldr         r3, [pc, #0xC4]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e2833b01	 add         r3, r3, #1, 22
  00354	e5832000	 str         r2, [r3]

; 145  : 
; 146  :     // Enable System Tick interrupt
; 147  :     if (!OEMInterruptEnable(sysIntr, NULL, 0)) {

  00358	e3a02000	 mov         r2, #0
  0035c	e3a01000	 mov         r1, #0
  00360	e59d0004	 ldr         r0, [sp, #4]
  00364	eb000000	 bl          OEMInterruptEnable
  00368	e58d001c	 str         r0, [sp, #0x1C]
  0036c	e59d301c	 ldr         r3, [sp, #0x1C]
  00370	e3530000	 cmp         r3, #0
  00374	1a00000b	 bne         |$LN1@OALTimerIn|

; 148  :         OALMSG(OAL_ERROR, (
; 149  :             L"ERROR: OALTimerInit: Interrupt enable for system timer failed"
; 150  :         ));

  00378	e59f308c	 ldr         r3, [pc, #0x8C]
  0037c	e5933440	 ldr         r3, [r3, #0x440]
  00380	e3130001	 tst         r3, #1
  00384	0a000004	 beq         |$LN7@OALTimerIn|
  00388	e59f0080	 ldr         r0, [pc, #0x80]
  0038c	eb000000	 bl          NKDbgPrintfW
  00390	e3a03001	 mov         r3, #1
  00394	e58d3020	 str         r3, [sp, #0x20]
  00398	ea000001	 b           |$LN8@OALTimerIn|
  0039c		 |$LN7@OALTimerIn|
  0039c	e3a03000	 mov         r3, #0
  003a0	e58d3020	 str         r3, [sp, #0x20]
  003a4		 |$LN8@OALTimerIn|

; 151  :         goto cleanUp;

  003a4	ea000001	 b           |$cleanUp$45582|
  003a8		 |$LN1@OALTimerIn|

; 152  :     }
; 153  : 
; 154  :     rc = TRUE;

  003a8	e3a03001	 mov         r3, #1
  003ac	e58d3000	 str         r3, [sp]
  003b0		 |$cleanUp$45582|

; 155  :     
; 156  : cleanUp:
; 157  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OALTimerInit..(rc = %d)\r\n", rc));

  003b0	e59f3054	 ldr         r3, [pc, #0x54]
  003b4	e5933440	 ldr         r3, [r3, #0x440]
  003b8	e3130b02	 tst         r3, #2, 22
  003bc	0a000009	 beq         |$LN9@OALTimerIn|
  003c0	e59f3044	 ldr         r3, [pc, #0x44]
  003c4	e5933440	 ldr         r3, [r3, #0x440]
  003c8	e3130004	 tst         r3, #4
  003cc	0a000005	 beq         |$LN9@OALTimerIn|
  003d0	e59d1000	 ldr         r1, [sp]
  003d4	e59f002c	 ldr         r0, [pc, #0x2C]
  003d8	eb000000	 bl          NKDbgPrintfW
  003dc	e3a03001	 mov         r3, #1
  003e0	e58d3024	 str         r3, [sp, #0x24]
  003e4	ea000001	 b           |$LN10@OALTimerIn|
  003e8		 |$LN9@OALTimerIn|
  003e8	e3a03000	 mov         r3, #0
  003ec	e58d3024	 str         r3, [sp, #0x24]
  003f0		 |$LN10@OALTimerIn|

; 158  :     return rc;

  003f0	e59d3000	 ldr         r3, [sp]
  003f4	e58d3008	 str         r3, [sp, #8]

; 159  : }

  003f8	e59d0008	 ldr         r0, [sp, #8]
  003fc	e28dd028	 add         sp, sp, #0x28
  00400	e89d6000	 ldmia       sp, {sp, lr}
  00404	e12fff1e	 bx          lr
  00408		 |$LN14@OALTimerIn|
  00408		 |$LN15@OALTimerIn|
  00408	00000000	 DCD         |??_C@_1DG@MBLBIFGK@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?4?$AA?4?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0040c		 |$LN16@OALTimerIn|
  0040c	00000000	 DCD         |dpCurSettings|
  00410		 |$LN17@OALTimerIn|
  00410	00000000	 DCD         |??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@|
  00414		 |$LN18@OALTimerIn|
  00414	00000000	 DCD         |g_pPRCMRegs|
  00418		 |$LN19@OALTimerIn|
  00418	00000000	 DCD         |g_pTimerRegs|
  0041c		 |$LN20@OALTimerIn|
  0041c	00000000	 DCD         |g_oalTimer|
  00420		 |$LN21@OALTimerIn|
  00420	00000000	 DCD         |g_pNKGlobal|
  00424		 |$LN22@OALTimerIn|
  00424	00000000	 DCD         |g_oalTimerIrq|
  00428		 |$LN23@OALTimerIn|
  00428	00000000	 DCD         |OALTimerQueryPerformanceCounter|
  0042c		 |$LN24@OALTimerIn|
  0042c	00000000	 DCD         |g_pOemGlobal|
  00430		 |$LN25@OALTimerIn|
  00430	00000000	 DCD         |OALTimerQueryPerformanceFrequency|
  00434		 |$LN26@OALTimerIn|
  00434	00000000	 DCD         |??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00438		 |$M45644|

			 ENDP  ; |OALTimerInit|

	EXPORT	|OALTimerIntrHandler|
	IMPORT	|OEMWriteDebugLED|

  00008			 AREA	 |.pdata|, PDATA
|$T45665| DCD	|$LN6@OALTimerIn@2|
	DCD	0x40004702
; Function compile flags: /Odtp

  00438			 AREA	 |.text|, CODE, ARM

  00438		 |OALTimerIntrHandler| PROC

; 169  : {

  00438		 |$LN6@OALTimerIn@2|
  00438	e52de004	 str         lr, [sp, #-4]!
  0043c	e24dd00c	 sub         sp, sp, #0xC
  00440		 |$M45662|

; 170  :     UINT32 sysIntr = SYSINTR_NOP;

  00440	e3a03000	 mov         r3, #0
  00444	e58d3000	 str         r3, [sp]

; 171  : 
; 172  : #ifdef OAL_ILTIMING
; 173  :     if (g_oalILT.active) {
; 174  :             g_oalILT.isrTime1 = OALTimerCountsSinceSysTick();
; 175  :     }        
; 176  : #endif
; 177  : 
; 178  :     //Acknowledge the current timer interrupt and 
; 179  :     //clear the status for next timer interrupt
; 180  :     SETREG32(&g_pTimerRegs->TISR,0x2);

  00448	e59f3100	 ldr         r3, [pc, #0x100]
  0044c	e5933000	 ldr         r3, [r3]
  00450	e2833018	 add         r3, r3, #0x18
  00454	e5933000	 ldr         r3, [r3]
  00458	e3832002	 orr         r2, r3, #2
  0045c	e59f30ec	 ldr         r3, [pc, #0xEC]
  00460	e5933000	 ldr         r3, [r3]
  00464	e2833018	 add         r3, r3, #0x18
  00468	e5832000	 str         r2, [r3]

; 181  : 
; 182  :     // Update the millisecond and high resolution counters
; 183  :     g_oalTimer.curCounts += g_oalTimer.actualCountsPerSysTick;

  0046c	e59f30d8	 ldr         r3, [pc, #0xD8]
  00470	e5931018	 ldr         r1, [r3, #0x18]
  00474	e59f30d0	 ldr         r3, [pc, #0xD0]
  00478	e5932020	 ldr         r2, [r3, #0x20]
  0047c	e59f30c8	 ldr         r3, [pc, #0xC8]
  00480	e5933024	 ldr         r3, [r3, #0x24]
  00484	e0921001	 adds        r1, r2, r1
  00488	e2a32000	 adc         r2, r3, #0
  0048c	e59f30b8	 ldr         r3, [pc, #0xB8]
  00490	e5831020	 str         r1, [r3, #0x20]
  00494	e59f30b0	 ldr         r3, [pc, #0xB0]
  00498	e5832024	 str         r2, [r3, #0x24]

; 184  :     CurMSec = (UINT32)((g_oalTimer.curCounts*1000)>>15);

  0049c	e59f30a8	 ldr         r3, [pc, #0xA8]
  004a0	e5931020	 ldr         r1, [r3, #0x20]
  004a4	e59f30a0	 ldr         r3, [pc, #0xA0]
  004a8	e5932024	 ldr         r2, [r3, #0x24]
  004ac	e58d1008	 str         r1, [sp, #8]
  004b0	e3a03ffa	 mov         r3, #0xFA, 30
  004b4	e0000392	 mul         r0, r2, r3
  004b8	e59d1008	 ldr         r1, [sp, #8]
  004bc	e3a03ffa	 mov         r3, #0xFA, 30
  004c0	e0832391	 umull       r2, r3, r1, r3
  004c4	e0803003	 add         r3, r0, r3
  004c8	e1a027a2	 mov         r2, r2, lsr #15
  004cc	e1a03883	 mov         r3, r3, lsl #17
  004d0	e1832002	 orr         r2, r3, r2
  004d4	e59f306c	 ldr         r3, [pc, #0x6C]
  004d8	e5933000	 ldr         r3, [r3]
  004dc	e28330c8	 add         r3, r3, #0xC8
  004e0	e5832000	 str         r2, [r3]

; 185  : 
; 186  :     // Update LED display (bits 0&1)
; 187  :     OALLED(LED_IDX_TIMERSPIN, CurMSec >> 10);

  004e4	e59f305c	 ldr         r3, [pc, #0x5C]
  004e8	e5933000	 ldr         r3, [r3]
  004ec	e28330c8	 add         r3, r3, #0xC8
  004f0	e5933000	 ldr         r3, [r3]
  004f4	e1a01523	 mov         r1, r3, lsr #10
  004f8	e3a00000	 mov         r0, #0
  004fc	eb000000	 bl          OEMWriteDebugLED

; 188  :       
; 189  :     // Reschedule?
; 190  :     if ((int)(CurMSec - dwReschedTime) >= 0) sysIntr = SYSINTR_RESCHED;

  00500	e59f3040	 ldr         r3, [pc, #0x40]
  00504	e5933000	 ldr         r3, [r3]
  00508	e28320c8	 add         r2, r3, #0xC8
  0050c	e59f3034	 ldr         r3, [pc, #0x34]
  00510	e5933000	 ldr         r3, [r3]
  00514	e28330c4	 add         r3, r3, #0xC4
  00518	e5922000	 ldr         r2, [r2]
  0051c	e5933000	 ldr         r3, [r3]
  00520	e0523003	 subs        r3, r2, r3
  00524	4a000001	 bmi         |$LN1@OALTimerIn@2|
  00528	e3a03001	 mov         r3, #1
  0052c	e58d3000	 str         r3, [sp]
  00530		 |$LN1@OALTimerIn@2|

; 191  : 
; 192  : #ifdef OAL_ILTIMING
; 193  :     if (g_oalILT.active) {
; 194  :         if (--g_oalILT.counter == 0) {
; 195  :             sysIntr = SYSINTR_TIMING;
; 196  :             g_oalILT.counter = g_oalILT.counterSet;
; 197  :             g_oalILT.isrTime2 = OALTimerCountsSinceSysTick();
; 198  :         }
; 199  :     }
; 200  : #endif
; 201  :     // Done    
; 202  :     return sysIntr;

  00530	e59d3000	 ldr         r3, [sp]
  00534	e58d3004	 str         r3, [sp, #4]

; 203  : }

  00538	e59d0004	 ldr         r0, [sp, #4]
  0053c	e28dd00c	 add         sp, sp, #0xC
  00540	e49de004	 ldr         lr, [sp], #4
  00544	e12fff1e	 bx          lr
  00548		 |$LN7@OALTimerIn@2|
  00548		 |$LN8@OALTimerIn@2|
  00548	00000000	 DCD         |g_pNKGlobal|
  0054c		 |$LN9@OALTimerIn@2|
  0054c	00000000	 DCD         |g_oalTimer|
  00550		 |$LN10@OALTimerIn@2|
  00550	00000000	 DCD         |g_pTimerRegs|
  00554		 |$M45663|

			 ENDP  ; |OALTimerIntrHandler|

	EXPORT	|OALTimerCountsSinceSysTick|

  00010			 AREA	 |.pdata|, PDATA
|$T45675| DCD	|$LN5@OALTimerCo|
	DCD	0x40000f01
; Function compile flags: /Odtp

  00554			 AREA	 |.text|, CODE, ARM

  00554		 |OALTimerCountsSinceSysTick| PROC

; 212  : {

  00554		 |$LN5@OALTimerCo|
  00554	e24dd004	 sub         sp, sp, #4
  00558		 |$M45672|

; 213  :     // Calc value.
; 214  :     return (INREG32(&g_pTimerRegs->TCRR) - INREG32(&g_pTimerRegs->TLDR));

  00558	e59f302c	 ldr         r3, [pc, #0x2C]
  0055c	e5933000	 ldr         r3, [r3]
  00560	e2832028	 add         r2, r3, #0x28
  00564	e59f3020	 ldr         r3, [pc, #0x20]
  00568	e5933000	 ldr         r3, [r3]
  0056c	e283302c	 add         r3, r3, #0x2C
  00570	e5922000	 ldr         r2, [r2]
  00574	e5933000	 ldr         r3, [r3]
  00578	e0423003	 sub         r3, r2, r3
  0057c	e58d3000	 str         r3, [sp]

; 215  : }

  00580	e59d0000	 ldr         r0, [sp]
  00584	e28dd004	 add         sp, sp, #4
  00588	e12fff1e	 bx          lr
  0058c		 |$LN6@OALTimerCo|
  0058c		 |$LN7@OALTimerCo|
  0058c	00000000	 DCD         |g_pTimerRegs|
  00590		 |$M45673|

			 ENDP  ; |OALTimerCountsSinceSysTick|

	EXPORT	|OEMIdle|

  00018			 AREA	 |.pdata|, PDATA
|$T45682| DCD	|$LN5@OEMIdle|
	DCD	0x40000503
; Function compile flags: /Odtp

  00590			 AREA	 |.text|, CODE, ARM

  00590		 |OEMIdle| PROC

; 224  : {

  00590		 |$LN5@OEMIdle|
  00590	e1a0c00d	 mov         r12, sp
  00594	e92d0001	 stmdb       sp!, {r0}
  00598	e92d5000	 stmdb       sp!, {r12, lr}
  0059c		 |$M45679|

; 225  : }

  0059c	e89d6000	 ldmia       sp, {sp, lr}
  005a0	e12fff1e	 bx          lr
  005a4		 |$M45680|

			 ENDP  ; |OEMIdle|

	EXPORT	|OEMGetTickCount|

  00020			 AREA	 |.pdata|, PDATA
|$T45688| DCD	|$LN10@OEMGetTick|
	DCD	0x40002b02
; Function compile flags: /Odtp

  005a4			 AREA	 |.text|, CODE, ARM

  005a4		 |OEMGetTickCount| PROC

; 237  : {

  005a4		 |$LN10@OEMGetTick|
  005a4	e52de004	 str         lr, [sp, #-4]!
  005a8	e24dd010	 sub         sp, sp, #0x10
  005ac		 |$M45685|

; 238  :     UINT32 count;
; 239  :     INT32 offset;
; 240  : 
; 241  :     if (g_oalTimer.actualMSecPerSysTick == 1) {

  005ac	e59f3094	 ldr         r3, [pc, #0x94]
  005b0	e5933014	 ldr         r3, [r3, #0x14]
  005b4	e3530001	 cmp         r3, #1
  005b8	1a000005	 bne         |$LN5@OEMGetTick|

; 242  :         // Return CurMSec if the system tick is 1 ms.
; 243  :         count = CurMSec;

  005bc	e59f3088	 ldr         r3, [pc, #0x88]
  005c0	e5933000	 ldr         r3, [r3]
  005c4	e28330c8	 add         r3, r3, #0xC8
  005c8	e5933000	 ldr         r3, [r3]
  005cc	e58d3000	 str         r3, [sp]

; 244  :     }  else {

  005d0	ea000016	 b           |$LN4@OEMGetTick|
  005d4		 |$LN5@OEMGetTick|
  005d4		 |$LN3@OEMGetTick|

; 245  :         // System timer tick period exceeds 1 ms. 
; 246  :         //
; 247  :         // This code adjusts the accuracy of the returned value to the nearest
; 248  :         // MSec when the system tick exceeds 1 ms. The following code checks if 
; 249  :         // a system timer interrupt occurred between reading the CurMSec value 
; 250  :         // and the call to fetch the HiResTicksSinceSysTick. If so, the value of
; 251  :         // CurMSec and Offset is re-read, with the certainty that a system timer
; 252  :         // interrupt will not occur again.
; 253  :         do {
; 254  :             count = CurMSec;

  005d4	e59f3070	 ldr         r3, [pc, #0x70]
  005d8	e5933000	 ldr         r3, [r3]
  005dc	e28330c8	 add         r3, r3, #0xC8
  005e0	e5933000	 ldr         r3, [r3]
  005e4	e58d3000	 str         r3, [sp]

; 255  :             offset = OALTimerCountsSinceSysTick();

  005e8	eb000000	 bl          OALTimerCountsSinceSysTick
  005ec	e58d000c	 str         r0, [sp, #0xC]
  005f0	e59d300c	 ldr         r3, [sp, #0xC]
  005f4	e58d3004	 str         r3, [sp, #4]

; 256  :         } 
; 257  :         while (count != CurMSec);

  005f8	e59f304c	 ldr         r3, [pc, #0x4C]
  005fc	e5933000	 ldr         r3, [r3]
  00600	e28330c8	 add         r3, r3, #0xC8
  00604	e5932000	 ldr         r2, [r3]
  00608	e59d3000	 ldr         r3, [sp]
  0060c	e1530002	 cmp         r3, r2
  00610	1affffef	 bne         |$LN3@OEMGetTick|

; 258  : 
; 259  :         // Adjust the MSec value with the contribution from HiRes counter.
; 260  :         count += offset/g_oalTimer.countsPerMSec;

  00614	e59d1004	 ldr         r1, [sp, #4]
  00618	e59f3028	 ldr         r3, [pc, #0x28]
  0061c	e5930000	 ldr         r0, [r3]
  00620	eb000000	 bl          __rt_udiv
  00624	e59d3000	 ldr         r3, [sp]
  00628	e0833000	 add         r3, r3, r0
  0062c	e58d3000	 str         r3, [sp]
  00630		 |$LN4@OEMGetTick|

; 261  :     }
; 262  : 
; 263  :     return count;

  00630	e59d3000	 ldr         r3, [sp]
  00634	e58d3008	 str         r3, [sp, #8]

; 264  : }

  00638	e59d0008	 ldr         r0, [sp, #8]
  0063c	e28dd010	 add         sp, sp, #0x10
  00640	e49de004	 ldr         lr, [sp], #4
  00644	e12fff1e	 bx          lr
  00648		 |$LN11@OEMGetTick|
  00648		 |$LN12@OEMGetTick|
  00648	00000000	 DCD         |g_oalTimer|
  0064c		 |$LN13@OEMGetTick|
  0064c	00000000	 DCD         |g_pNKGlobal|
  00650		 |$M45686|

			 ENDP  ; |OEMGetTickCount|


  00028			 AREA	 |.pdata|, PDATA
|$T45697| DCD	|$LN6@OALTimerQu|
	DCD	0x40001704
; Function compile flags: /Odtp

  00650			 AREA	 |.text|, CODE, ARM

  00650		 |OALTimerQueryPerformanceFrequency| PROC

; 276  : {

  00650		 |$LN6@OALTimerQu|
  00650	e1a0c00d	 mov         r12, sp
  00654	e92d0001	 stmdb       sp!, {r0}
  00658	e92d5000	 stmdb       sp!, {r12, lr}
  0065c	e24dd004	 sub         sp, sp, #4
  00660		 |$M45694|

; 277  :     if (!pFrequency) return FALSE;

  00660	e59d300c	 ldr         r3, [sp, #0xC]
  00664	e3530000	 cmp         r3, #0
  00668	1a000002	 bne         |$LN1@OALTimerQu|
  0066c	e3a03000	 mov         r3, #0
  00670	e58d3000	 str         r3, [sp]
  00674	ea000008	 b           |$LN2@OALTimerQu|
  00678		 |$LN1@OALTimerQu|

; 278  : 
; 279  :     pFrequency->HighPart = 0;

  00678	e59d300c	 ldr         r3, [sp, #0xC]
  0067c	e2832004	 add         r2, r3, #4
  00680	e3a03000	 mov         r3, #0
  00684	e5823000	 str         r3, [r2]

; 280  :     pFrequency->LowPart = 32768; // 32k timer frequency

  00688	e59d200c	 ldr         r2, [sp, #0xC]
  0068c	e3a03902	 mov         r3, #2, 18
  00690	e5823000	 str         r3, [r2]

; 281  :     return TRUE;

  00694	e3a03001	 mov         r3, #1
  00698	e58d3000	 str         r3, [sp]
  0069c		 |$LN2@OALTimerQu|

; 282  : }

  0069c	e59d0000	 ldr         r0, [sp]
  006a0	e28dd004	 add         sp, sp, #4
  006a4	e89d6000	 ldmia       sp, {sp, lr}
  006a8	e12fff1e	 bx          lr
  006ac		 |$M45695|

			 ENDP  ; |OALTimerQueryPerformanceFrequency|


  00030			 AREA	 |.pdata|, PDATA
|$T45703| DCD	|$LN9@OALTimerQu@2|
	DCD	0x40003804
; Function compile flags: /Odtp

  006ac			 AREA	 |.text|, CODE, ARM

  006ac		 |OALTimerQueryPerformanceCounter| PROC

; 293  : {

  006ac		 |$LN9@OALTimerQu@2|
  006ac	e1a0c00d	 mov         r12, sp
  006b0	e92d0001	 stmdb       sp!, {r0}
  006b4	e92d5000	 stmdb       sp!, {r12, lr}
  006b8	e24dd024	 sub         sp, sp, #0x24
  006bc		 |$M45700|

; 294  :     UINT64 base;
; 295  :     INT32 offset;
; 296  : 
; 297  :     if (!pCounter) return FALSE;

  006bc	e59d302c	 ldr         r3, [sp, #0x2C]
  006c0	e3530000	 cmp         r3, #0
  006c4	1a000002	 bne         |$LN4@OALTimerQu@2|
  006c8	e3a03000	 mov         r3, #0
  006cc	e58d300c	 str         r3, [sp, #0xC]
  006d0	ea000028	 b           |$LN5@OALTimerQu@2|
  006d4		 |$LN4@OALTimerQu@2|
  006d4		 |$LN3@OALTimerQu@2|

; 298  :  
; 299  :     // Make sure CurTicks is the same before and after read of counter
; 300  :     // to avoid for possible rollover. Note that this is probably not necessary
; 301  :     // because TimerTicksSinceBeat will return negative value when it happen.
; 302  :     // We must be careful about signed/unsigned arithmetic.
; 303  :     
; 304  :     do {
; 305  :        base = g_oalTimer.curCounts;

  006d4	e59f30ac	 ldr         r3, [pc, #0xAC]
  006d8	e5933020	 ldr         r3, [r3, #0x20]
  006dc	e58d3000	 str         r3, [sp]
  006e0	e59f30a0	 ldr         r3, [pc, #0xA0]
  006e4	e5933024	 ldr         r3, [r3, #0x24]
  006e8	e58d3004	 str         r3, [sp, #4]

; 306  :        offset = OALTimerCountsSinceSysTick();

  006ec	eb000000	 bl          OALTimerCountsSinceSysTick
  006f0	e58d0010	 str         r0, [sp, #0x10]
  006f4	e59d3010	 ldr         r3, [sp, #0x10]
  006f8	e58d3008	 str         r3, [sp, #8]

; 307  :     } while (base != g_oalTimer.curCounts);

  006fc	e59f3084	 ldr         r3, [pc, #0x84]
  00700	e5931020	 ldr         r1, [r3, #0x20]
  00704	e59f307c	 ldr         r3, [pc, #0x7C]
  00708	e5932024	 ldr         r2, [r3, #0x24]
  0070c	e59d3000	 ldr         r3, [sp]
  00710	e58d3014	 str         r3, [sp, #0x14]
  00714	e59d3004	 ldr         r3, [sp, #4]
  00718	e58d3018	 str         r3, [sp, #0x18]
  0071c	e59d3018	 ldr         r3, [sp, #0x18]
  00720	e58d301c	 str         r3, [sp, #0x1C]
  00724	e58d2020	 str         r2, [sp, #0x20]
  00728	e59d3014	 ldr         r3, [sp, #0x14]
  0072c	e1530001	 cmp         r3, r1
  00730	1affffe7	 bne         |$LN3@OALTimerQu@2|
  00734	e59d201c	 ldr         r2, [sp, #0x1C]
  00738	e59d3020	 ldr         r3, [sp, #0x20]
  0073c	e1520003	 cmp         r2, r3
  00740	1affffe3	 bne         |$LN3@OALTimerQu@2|

; 308  : 
; 309  :     // Update the counter
; 310  :     pCounter->QuadPart = (ULONGLONG)((INT64)base + offset);

  00744	e59d1008	 ldr         r1, [sp, #8]
  00748	e59d3008	 ldr         r3, [sp, #8]
  0074c	e1a00fc3	 mov         r0, r3, asr #31
  00750	e59d2000	 ldr         r2, [sp]
  00754	e59d3004	 ldr         r3, [sp, #4]
  00758	e0921001	 adds        r1, r2, r1
  0075c	e0a32000	 adc         r2, r3, r0
  00760	e59d302c	 ldr         r3, [sp, #0x2C]
  00764	e5831000	 str         r1, [r3]
  00768	e59d302c	 ldr         r3, [sp, #0x2C]
  0076c	e5832004	 str         r2, [r3, #4]

; 311  : 
; 312  :     return TRUE;

  00770	e3a03001	 mov         r3, #1
  00774	e58d300c	 str         r3, [sp, #0xC]
  00778		 |$LN5@OALTimerQu@2|

; 313  : }

  00778	e59d000c	 ldr         r0, [sp, #0xC]
  0077c	e28dd024	 add         sp, sp, #0x24
  00780	e89d6000	 ldmia       sp, {sp, lr}
  00784	e12fff1e	 bx          lr
  00788		 |$LN10@OALTimerQu@2|
  00788		 |$LN11@OALTimerQu@2|
  00788	00000000	 DCD         |g_oalTimer|
  0078c		 |$M45701|

			 ENDP  ; |OALTimerQueryPerformanceCounter|

	END
