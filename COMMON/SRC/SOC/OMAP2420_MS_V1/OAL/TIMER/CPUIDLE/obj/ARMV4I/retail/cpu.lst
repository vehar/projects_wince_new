ARM macroassembler      Page:1 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ; 
   14 00000000          ; Portions Copyright (c) Texas Instruments.  All rights reserved.  
   15 00000000          ; 
   16 00000000          ; Use of this source code is subject to the terms of the Microsoft end-user 
   17 00000000          ; license agreement (EULA) under which you licensed this SOFTWARE PRODUCT. 
   18 00000000          ; If you did not accept the terms of the EULA, you are not authorized to use 
   19 00000000          ; this source code. For a copy of the EULA, please see the LICENSE.RTF on your 
   20 00000000          ; install media. 
   21 00000000          ; 
   22 00000000          ;------------------------------------------------------------------------------ 
   23 00000000            
   24 00000000                  INCLUDE kxarm.h 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;++ 
   14 00000000          ; 
   15 00000000          ; 
   16 00000000          ; Module Name: 
   17 00000000          ; 
   18 00000000          ;    kxarm.h 
   19 00000000          ; 
   20 00000000          ; Abstract: 
   21 00000000          ; 
   22 00000000          ;    This is an implementation of the WINCE/ARM Calling Sequence 
   23 00000000          ;    Specification. 
   24 00000000          ; 
   25 00000000          ; Environment: 
   26 00000000          ;    String Library 
   27 00000000          ; 
   28 00000000          ; Revision History: 
   29 00000000          ;-- 
   30 00000000            
   31 00000000                          GBLS    VBar 
   32 00000000          VBar    SETS    "|" 
   33 00000000                          GBLL    HaveExceptHandler 
   34 00000000                          GBLS    AreaName 
   35 00000000                          GBLS    FuncName 
   36 00000000                          GBLS    PrologName 
   37 00000000                          GBLS    FuncEndName 
   38 00000000                          GBLS    ExceptHandler 
   39 00000000                          GBLS    ExceptData 
   40 00000000          AreaName SETS   "|.text|" 
   41 00000000          HaveExceptHandler SETL {FALSE} 
   42 00000000            
   43 00000000                  MACRO 
   44 00000000                  TEXTAREA 
   45 00000000                  AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   47 00000000                  MEND 
   48 00000000            
   49 00000000              MACRO 
   50 00000000              THUMBAREA 
   51 00000000              AREA |.text|,ALIGN=2,CODE,READONLY,THUMB 
   52 00000000          AreaName SETS "|.text|" 
   53 00000000              MEND 
   54 00000000            
   55 00000000                  MACRO 
   56 00000000                  STARTUPTEXT 
   57 00000000                  AREA |.astart|,ALIGN=2,CODE 
   58 00000000          AreaName SETS "|.astart|" 
   59 00000000                  MEND 
   60 00000000            
   61 00000000                  MACRO 
   62 00000000                  START_REGION    $NameBegin 
   63 00000000                  LCLS    TempName 
   64 00000000          TempName SETS    VBar:CC:"$NameBegin":CC:VBar 
   65 00000000                  EXPORT  $TempName[DATA] 
   66 00000000          $TempName 
   67 00000000                  MEND 
   68 00000000            
   69 00000000                  MACRO 
   70 00000000                  END_REGION              $NameEnd 
   71 00000000                  LCLS    TempName 
   72 00000000          TempName SETS    VBar:CC:"$NameEnd":CC:VBar 
   73 00000000                  EXPORT  $TempName[DATA] 
   74 00000000          $TempName 
   75 00000000                  MEND 
   76 00000000            
   77 00000000          ; 
   78 00000000          ;   This macro should be used if the assembly function is in ARM 
   79 00000000          ; 
   80 00000000            
   81 00000000                  MACRO 
   82 00000000                  NESTED_ARMENTRY $Name 
   83 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
   84 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
   85 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
   86 00000000                  LCLS    ExceptBit 
   87 00000000                  IF HaveExceptHandler 
   88 00000000          ExceptBit   SETS        "0x80000000" 
   89 00000000                  ELSE 
   90 00000000          ExceptBit   SETS        "0" 
   91 00000000                  ENDIF 
   92 00000000            
   93 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
   94 00000000                  DCD         $FuncName 
   95 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
   96 00000000                  AREA $AreaName,CODE,READONLY 
   97 00000000                  ALIGN   2 
   98 00000000                  EXPORT  $FuncName [FUNC] 
   99 00000000                  IF HaveExceptHandler 
  100 00000000              DCD $ExceptHandler 
  101 00000000              DCD $ExceptData 
  102 00000000          HaveExceptHandler SETL {FALSE} 
  103 00000000                  ENDIF 
  104 00000000          $FuncName 
  105 00000000                  ROUT 
  106 00000000                  MEND 
  107 00000000            
  108 00000000          ; 
  109 00000000          ;   This macro should be used if the assembly function is in THUMB 
  110 00000000          ; 
  111 00000000                  MACRO 
  112 00000000                  NESTED_THUMBENTRY       $Name 
  113 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  114 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  115 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  116 00000000                  LCLS    ExceptBit 
  117 00000000                  IF HaveExceptHandler 
  118 00000000          ExceptBit   SETS        "0x80000000" 
  119 00000000                  ELSE 
  120 00000000          ExceptBit   SETS        "0" 
  121 00000000                  ENDIF 
  122 00000000            
  123 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  124 00000000                  DCD         $FuncName 
  125 00000000              DCD     (($PrologName-$FuncName)/2) :OR: ((($FuncEndName-$FuncName)/2):SHL:8) :OR: $ExceptBit 
  126 00000000                  AREA $AreaName,CODE,READONLY 
  127 00000000                  ALIGN   2 
  128 00000000                  EXPORT  $FuncName [FUNC] 
  129 00000000                  IF HaveExceptHandler 
  130 00000000              DCD $ExceptHandler 
  131 00000000              DCD $ExceptData 
  132 00000000          HaveExceptHandler SETL {FALSE} 
  133 00000000                  ENDIF 
  134 00000000          $FuncName 
  135 00000000                  ROUT 
  136 00000000                  MEND 
  137 00000000            
  138 00000000          ; 
  139 00000000          ;   This macro should be used if the assembly function is in ARM 
  140 00000000          ; 
  141 00000000                  MACRO 
  142 00000000                  NESTED_ENTRY    $Name 
  143 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  144 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  145 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  146 00000000                  LCLS    ExceptBit 
  147 00000000                  IF HaveExceptHandler 
  148 00000000          ExceptBit   SETS        "0x80000000" 
  149 00000000                  ELSE 
  150 00000000          ExceptBit   SETS        "0" 
  151 00000000                  ENDIF 
  152 00000000            
  153 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  154 00000000                  DCD         $FuncName 
  155 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
  156 00000000                  AREA $AreaName,CODE,READONLY 
  157 00000000                  ALIGN   2 
  158 00000000                  EXPORT  $FuncName [FUNC] 
  159 00000000                  IF HaveExceptHandler 
  160 00000000              DCD $ExceptHandler 
  161 00000000              DCD $ExceptData 
  162 00000000          HaveExceptHandler SETL {FALSE} 
  163 00000000                  ENDIF 
  164 00000000          $FuncName 
  165 00000000                  ROUT 
  166 00000000                  MEND 
  167 00000000            
  168 00000000                  MACRO 
  169 00000000                  PROLOG_END 
  170 00000000          $PrologName 
  171 00000000                  MEND 
  172 00000000            
  173 00000000                  MACRO 
  174 00000000                  LEAF_ENTRY      $Name 
  175 00000000          FuncName SETS    VBar:CC:"$Name":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  $FuncName [FUNC] 
  180 00000000          $FuncName 
  181 00000000                  ROUT 
  182 00000000                  MEND 
  183 00000000            
  184 00000000                  MACRO 
  185 00000000                  ALTERNATE_ENTRY $Name 
  186 00000000                  LCLS    TempName 
  187 00000000          TempName SETS    VBar:CC:"$Name":CC:VBar 
  188 00000000                  EXPORT  $TempName [FUNC] 
  189 00000000          $TempName 
  190 00000000                  MEND 
  191 00000000            
  192 00000000                  MACRO 
  193 00000000                  ENTRY_END       $Name 
  194 00000000          $FuncEndName 
  195 00000000                  MEND 
  196 00000000            
  197 00000000                  MACRO 
  198 00000000                  EXCEPTION_HANDLER       $Handler 
  199 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  200 00000000          ExceptData SETS "0" 
  201 00000000          HaveExceptHandler SETL {TRUE} 
  202 00000000                  MEND 
  203 00000000            
  204 00000000                  MACRO 
  205 00000000                  EXCEPTION_HANDLER_DATA  $Handler, $HandlerData 
  206 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  207 00000000          ExceptData SETS    VBar:CC:"$HandlerData":CC:VBar 
  208 00000000          HaveExceptHandler SETL {TRUE} 
  209 00000000                  MEND 
  210 00000000            
  211 00000000                  MACRO 
  212 00000000                  EXCEPTION_HANDLER_MILLICODE     $Handler, $HandlerData 
  213 00000000          ExceptHandler SETS    "$Handler" 
  214 00000000          ExceptData SETS    "$HandlerData" 
  215 00000000          HaveExceptHandler SETL {TRUE} 
  216 00000000                  MEND 
  217 00000000            
  218 00000000            
  219 00000000                  END 
   25 00000000            
   26 00000000            
   27 00000000                  EXPORT OALCPUIdle 
   28 00000000                  EXPORT OALCPUIdle_sz 
   29 00000000                   
   30 00000000                  TEXTAREA 
   45                           AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   31 00000000            
   32 00000000          ;------------------------------------------------------------------------------- 
   33 00000000          ; 
   34 00000000          ;  Function:  OALCPUIdle 
   35 00000000          ; 
   36 00000000          ; 
   37 00000000          ;  This routine is called by the kernel when there are no threads ready to 
   38 00000000          ;  run. The CPU should be put into a reduced power mode and halted. It is 
   39 00000000          ;  important to be able to resume execution quickly upon receiving an interrupt. 
   40 00000000            
   41 00000000          ; BSP_CPLD_REGS_PA 0x08000000 = VA 0x88400000 = UA 0xA8400000 
   42 00000000          ; LED offset 0x16 = UA 0xA8400016 
   43 00000000          ;Debug LED can be written to as follows 
   44 00000000          ;ldr   r0, =0xA8400016 
   45 00000000          ;ldr   r1, =0xF1 ;LED_REG_VAL 
   46 00000000          ;strh  r1, [r0] 
   47 00000000            
   48 00000000          ;Context is saved at the beginning of SRAM 
   49 00000000          ARM_CONTEXT_SAVE_ADDRESS            EQU 0xA8200000 
   50 00000000          OMAP2420_PRCM_GENERAL_PURPOSE14     EQU 0xA86080E4 
   51 00000000          DCACHE_MASK                         EQU 0x00000004 
   52 00000000          IRQ_MASK                            EQU 0x80        ; IRQ mask value 
   53 00000000          FIQ_MASK                            EQU 0x40        ; FIQ mask value 
   54 00000000          MODE_MASK                           EQU 0x1F        ; Processor Mode Mask 
   55 00000000          TBIT_MASK                           EQU 0x20        ; Thumb mode bit mask (bit 5 of CPSR/SPSR) 
   56 00000000          SUP_MODE                            EQU 0x13        ; Supervisor Mode 
   57 00000000          FIQ_MODE                            EQU 0x11        ; Fast Interrupt Mode (FIQ) 
   58 00000000          IRQ_MODE                            EQU 0x12        ; Interrupt Mode (IRQ) 
   59 00000000          ABORT_MODE                          EQU 0x17        ; Abort Mode 
   60 00000000          USR_MODE                            EQU 0x10        ; User Mode 
   61 00000000            
   62 00000000            
   63 00000000              ALIGN   1024                    ; Align on 1KB boundary 
   64 00000000            
   65 00000000              LEAF_ENTRY OALCPUIdle 
  175 00000000          FuncName SETS    VBar:CC:"OALCPUIdle":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"OALCPUIdle":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  |OALCPUIdle| [FUNC] 
  180 00000000          |OALCPUIdle| 
  181 00000000                  ROUT 
   66 00000000            
   67 00000000              ;save registers on stack 
   68 00000000 e92d5fff     stmfd       sp!, {r0 - r12, lr} 
   69 00000004            
   70 00000004          ; This Wait for Interrupt should be called when the context is to be saved and restored with the 
   71 00000004          ; CORE domain going into Retention during idle. 
   72 00000004          WaitForInterruptCRr 
   73 00000004 eaffffff     B       SaveContext 
   74 00000008          SaveContext 
   75 00000008 e59f3184     LDR     R3,  =ARM_CONTEXT_SAVE_ADDRESS     ; load SDRAM store location into R3 
   76 0000000c               
   77 0000000c e59f4184     LDR     R4,  =OMAP2420_PRCM_GENERAL_PURPOSE14      ; load the GPR14 register address into R4 
   78 00000010 e28f50c8     ADR     R5,  _Restore             ; load the _Restore address into R5 
   79 00000014 e5845000     STR     R5,  [R4]                 ; store the _Restore address into GPR14 
   80 00000018                       
   81 00000018 e28f40c0     ADR     R4,  _Restore             ; load _Restore address into R4 
   82 0000001c e10f5000     MRS     R5,  CPSR                 ; move CPSR value into R5 
   83 00000020 e1a0600d     MOV     R6,  SP                   ; move SP value into R6 
   84 00000024 e1a0700e     MOV     R7,  LR                   ; move LR value into R7 
   85 00000028 e14f8000     MRS     R8,  SPSR                 ; move SPSR value into R8 
   86 0000002c e8a301f0     STMIA   R3!, {R4-R8}              ; store into SDRAM 
   87 00000030 ee114f30     MRC     p15, 0, R4, c1, c0, 1  ; Auxiliary Control Register 
   88 00000034 ee115f50     MRC     p15, 0, R5, c1, c0, 2  ; Coprocessor access Control Register 
   89 00000038 ee126f10     MRC     p15, 0, R6, c2, c0, 0  ; TTBR0  
   90 0000003c ee127f30     MRC     p15, 0, R7, c2, c0, 1  ; TTBR1   
   91 00000040 ee128f50     MRC     p15, 0, R8, c2, c0, 2  ; TTBR Control 
   92 00000044 ee139f10     MRC     p15, 0, R9, c3, c0, 0  ; Domain Access   
   93 00000048 ee15af10     MRC     p15, 0, R10,c5, c0, 0  ; DFSR  
   94 0000004c ee15bf30     MRC     p15, 0, R11,c5, c0, 1  ; IFSR 
   95 00000050 e8a30ff0     STMIA   R3!, {R4-R11}             ; store into SDRAM 
   96 00000054 ee164f10     MRC     p15, 0, R4, c6, c0, 0  ; DFAR  
   97 00000058 ee165f30     MRC     p15, 0, R5, c6, c0, 1  ; IFAR   
   98 0000005c ee196f10     MRC     p15, 0, R6, c9, c0, 0  ; Data Cache Lockdown  
   99 00000060 ee197f30     MRC     p15, 0, R7, c9, c0, 1  ; ICache Lockdown  
  100 00000064 ee1a8f10     MRC     p15, 0, R8, c10,c0, 0  ; TLB Lockdown 
  101 00000068 ee1d9f10     MRC     p15, 0, R9, c13,c0, 0  ; FCSE PID Register 
  102 0000006c ee1daf30     MRC     p15, 0, R10,c13,c0, 1  ; Context ID Register 
  103 00000070 ee1fbf92     MRC     p15, 0, R11,c15,c2, 4  ; Peripheral Port remap register    
  104 00000074 e8a30ff0     STMIA   R3!, {R4-R11}          ; store into SDRAM 
  105 00000078 ee114f10     MRC     p15, 0, R4, c1, c0, 0  ; Co-processor control register 
  106 0000007c e4834004     STR     R4,  [R3], #4          ; store into SDRAM 
  107 00000080               
  108 00000080              ; check if the d-cache is ON, if so then clean it 
  109 00000080              ; note: this should not be necessary when Cache memories are retained 
  110 00000080               
  111 00000080 e3140004     TST     R4,  #DCACHE_MASK 
  112 00000084 13a04000     MOVNE   R4,  #0 
  113 00000088 1e074f1a     MCRNE   p15, 0, R4, c7, c10, 0 
  114 0000008c               
  115 0000008c              ; store the SP and LR for FIQ, IRQ, ABORT, and SUP modes   
  116 0000008c                                          
  117 0000008c e3a040d1     MOV     R4,   #0xD1                             ;#FIQ_MODE | IRQ_MASK | FIQ_MASK 
  118 00000090 e129f004     MSR     CPSR, R4                                ; go into FIQ mode 
  119 00000094 e1a0400d     MOV     R4,   SP                                ; move SP into R4 
  120 00000098 e1a0500e     MOV     R5,   LR                                ; move LR into R5 
  121 0000009c e8a30030     STMIA   R3!,  {R4-R5}                           ; store into SDRAM 
  122 000000a0 e3a040d2     MOV     R4,   #0xD2                             ;#IRQ_MODE | IRQ_MASK | FIQ_MASK 
  123 000000a4 e129f004     MSR     CPSR, R4                                ; go into IRQ mode 
  124 000000a8 e1a0400d     MOV     R4,   SP                                ; move SP into R4 
  125 000000ac e1a0500e     MOV     R5,   LR                                ; move LR into R5 
  126 000000b0 e8a30030     STMIA   R3!,  {R4-R5}                           ; store into SDRAM 
  127 000000b4 e3a040d7     MOV     R4,   #0xD7                             ;#ABORT_MODE | IRQ_MASK | FIQ_MASK 
  128 000000b8 e129f004     MSR     CPSR, R4                                ; go into ABORT mode 
  129 000000bc e1a0400d     MOV     R4,   SP                                ; move SP into R4 
  130 000000c0 e1a0500e     MOV     R5,   LR                                ; move LR into R5 
  131 000000c4 e8a30030     STMIA   R3!,  {R4-R5}                           ; store into SDRAM 
  132 000000c8 e3a040d3     MOV     R4,   #0xD3                             ;#SUP_MODE | IRQ_MASK | FIQ_MASK 
  133 000000cc e129f004     MSR     CPSR, R4                                ; go back into supervisor mode 
  134 000000d0 eaffffff     B       GoToStandby 
  135 000000d4            
  136 000000d4          GoToStandby 
  137 000000d4 e3a04000     MOV     R4,  #0 
  138 000000d8 ee074f90     MCR     p15, 0, R4, c7, c0, 4  ; wait for interrupt (WFI) 
  139 000000dc eaffffff     B       _Restore 
  140 000000e0            
  141 000000e0          _Restore 
  142 000000e0 e59f30ac     LDR     R3,   =ARM_CONTEXT_SAVE_ADDRESS   ; load SDRAM store location into R3 
  143 000000e4 e8b301f0     LDMIA   R3!,  {R4-R8}                ; load data from SDRAM 
  144 000000e8 e1a0d006     MOV     SP,   R6                     ; update the SP value 
  145 000000ec e1a0e007     MOV     LR,   R7                     ; update the LR value 
  146 000000f0 e169f008     MSR     SPSR, R8                     ; update the SPSR value 
  147 000000f4 e8b30ff0     LDMIA   R3!,  {R4-R11}               ; load from SDRAM 
  148 000000f8 ee014f30     MCR     p15,  0, R4,  c1,  c0, 1  ; Auxiliary Control Register 
  149 000000fc ee015f50     MCR     p15,  0, R5,  c1,  c0, 2  ; Coprcessor access Control Register 
  150 00000100 ee026f10     MCR     p15,  0, R6,  c2,  c0, 0  ; TTBR0  
  151 00000104 ee027f30     MCR     p15,  0, R7,  c2,  c0, 1  ; TTBR1   
  152 00000108 ee028f50     MCR     p15,  0, R8,  c2,  c0, 2  ; TTBR Control 
  153 0000010c ee039f10     MCR     p15,  0, R9,  c3,  c0, 0  ; Domain Access   
  154 00000110 ee05af10     MCR     p15,  0, R10, c5,  c0, 0  ; DFSR  
  155 00000114 ee05bf30     MCR     p15,  0, R11, c5,  c0, 1  ; IFSR   
  156 00000118 e8b30ff0     LDMIA   R3!,  {R4-R11}               ; load from SDRAM 
  157 0000011c ee064f10     MCR     p15,  0, R4,  c6,  c0, 0  ; DFAR  
  158 00000120 ee065f30     MCR     p15,  0, R5,  c6,  c0, 1  ; IFAR   
  159 00000124 ee096f10     MCR     p15,  0, R6,  c9,  c0, 0  ; Data Cache Lockdown  
  160 00000128 ee097f30     MCR     p15,  0, R7,  c9,  c0, 1  ; ICache Lockdown 
  161 0000012c ee0a8f10     MCR     p15,  0, R8,  c10, c0, 0  ; TLB Lockdown 
  162 00000130 ee0d9f10     MCR     p15,  0, R9,  c13, c0, 0  ; FCSE PID Register 
  163 00000134 ee0daf30     MCR     p15,  0, R10, c13, c0, 1  ; Context ID Register 
  164 00000138 ee0fbf92     MCR     p15,  0, R11, c15, c2, 4  ; Peripheral Port remap register 
  165 0000013c            
  166 0000013c e4934004     LDR     R4,   [R3], #4             ; load from SDRAM 
  167 00000140 ee014f10     MCR     p15,  0, R4, c1, c0, 0     ; Co-processor control register 
  168 00000144               
  169 00000144              ; enter into FIQ, IRQ, and ABORT mode and store the 
  170 00000144              ; SP and LR values and then go back into supervisor mode 
  171 00000144               
  172 00000144 e3a040d1     MOV     R4,   #0xD1                            ;#FIQ_MODE | IRQ_MASK | FIQ_MASK 
  173 00000148 e129f004     MSR     CPSR, R4                               ; go into FIQ mode 
  174 0000014c e8b30030     LDMIA   R3!,  {R4-R5}                          ; load the SP and LR from SDRAM 
  175 00000150 e1a0d004     MOV     SP,   R4                               ; update the SP 
  176 00000154 e1a0e005     MOV     LR,   R5                               ; update the LR 
  177 00000158 e3a040d2     MOV     R4,   #0xD2                            ;#IRQ_MODE | IRQ_MASK | FIQ_MASK 
  178 0000015c e129f004     MSR     CPSR, R4                               ; go into IRQ mode 
  179 00000160 e8b30030     LDMIA   R3!,  {R4-R5}                          ; load the SP and LR from SDRAM 
  180 00000164 e1a0d004     MOV     SP,   R4                               ; update the SP 
  181 00000168 e1a0e005     MOV     LR,   R5                               ; update the LR 
  182 0000016c e3a040d7     MOV     R4,   #0xD7                            ;#ABORT_MODE | IRQ_MASK | FIQ_MASK 
  183 00000170 e129f004     MSR     CPSR, R4                               ; go into ABORT mode 
  184 00000174 e8b30030     LDMIA   R3!,  {R4-R5}                          ; load the SP and LR from SDRAM 
  185 00000178 e1a0d004     MOV     SP,   R4                               ; update the SP 
  186 0000017c e1a0e005     MOV     LR,   R5                               ; update the LR 
  187 00000180 e3a04093     MOV     R4,   #0x93                            ;#SUP_MODE | IRQ_MASK (NOTE: CE does not set FIQ_MASK on entry) 
  188 00000184 e129f004     MSR     CPSR, R4                               ; go back into supervisor mode        
  189 00000188            
  190 00000188              ; restore regs and return 
  191 00000188 e8bd9fff     ldmfd   sp!, {r0 - r12, pc} 
  192 0000018c            
  193 0000018c              ENTRY_END 
  194 0000018c          |OALCPUIdle_end| 
  194 0000018c            
  195 0000018c              LEAF_ENTRY OALCPUIdle_sz 
  175 0000018c          FuncName SETS    VBar:CC:"OALCPUIdle_sz":CC:VBar 
  176 0000018c          PrologName SETS "Invalid Prolog" 
  177 0000018c          FuncEndName SETS    VBar:CC:"OALCPUIdle_sz":CC:"_end":CC:VBar 
  178 0000018c                  ALIGN   2 
  179 0000018c                  EXPORT  |OALCPUIdle_sz| [FUNC] 
  180 0000018c          |OALCPUIdle_sz| 
  181 0000018c                  ROUT 
  196 0000018c              ;Entry used to calculate the size of the function 
  197 0000018c e1a00000     nop 
  198 00000190 e1a00000     nop 
  199 00000194              ENTRY_END 
  194 00000194          |OALCPUIdle_sz_end| 
  200 00000194            
  201 00000194            
  202 00000194          ;------------------------------------------------------------------------------ 
  203 00000194                  END 
  204 00000194 a8200000 *literal pool: constant 
  204 00000198 a86080e4 *literal pool: constant 
Assembly terminated, errors: 0, warnings: 0 
