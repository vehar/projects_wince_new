; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\OAL\KERNELI2C\kerneli2c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|gpLowTrans| %	0x4

  00000			 AREA	 |.data|, DATA
|gCurClockDivisor| DCD 0xf

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|KERNELI2C_OEMInit|
	IMPORT	|OALPAtoVA|

  00004			 AREA	 |.bss|, NOINIT
|gpPRCMRegs| %	0x4
|gpI2CRegs| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T45770| DCD	|$LN7@KERNELI2C_|
	DCD	0x40007802
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\oal\kerneli2c\kerneli2c.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KERNELI2C_OEMInit| PROC

; 33   : {

  00000		 |$LN7@KERNELI2C_|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M45767|

; 34   :     // get uncached register addresses
; 35   :     gpI2CRegs = (OMAP2420_I2C_REGS *)OALPAtoUA(OMAP2420_I2C1_REGS_PA);

  00008	e3a01000	 mov         r1, #0
  0000c	e3a00312	 mov         r0, #0x12, 6
  00010	e3800807	 orr         r0, r0, #7, 16
  00014	eb000000	 bl          OALPAtoVA
  00018	e58d0000	 str         r0, [sp]
  0001c	e59d2000	 ldr         r2, [sp]
  00020	e59f31b0	 ldr         r3, [pc, #0x1B0]
  00024	e5832000	 str         r2, [r3]

; 36   :     gpPRCMRegs = (OMAP2420_PRCM_REGS *)OALPAtoUA(OMAP2420_PRCM_REGS_PA);

  00028	e3a01000	 mov         r1, #0
  0002c	e3a00312	 mov         r0, #0x12, 6
  00030	e3800902	 orr         r0, r0, #2, 18
  00034	eb000000	 bl          OALPAtoVA
  00038	e58d0004	 str         r0, [sp, #4]
  0003c	e59d2004	 ldr         r2, [sp, #4]
  00040	e59f318c	 ldr         r3, [pc, #0x18C]
  00044	e5832000	 str         r2, [r3]

; 37   : 
; 38   :     // turn on the clocks - we are inside oeminit so don't need to use kerneliocontrol
; 39   :     gpPRCMRegs->ulCM_FCLKEN1_CORE |= PRCM_FCLKEN1_CORE_EN_I2C1;

  00048	e59f3184	 ldr         r3, [pc, #0x184]
  0004c	e5933000	 ldr         r3, [r3]
  00050	e2833c02	 add         r3, r3, #2, 24
  00054	e5933000	 ldr         r3, [r3]
  00058	e3832702	 orr         r2, r3, #2, 14
  0005c	e59f3170	 ldr         r3, [pc, #0x170]
  00060	e5933000	 ldr         r3, [r3]
  00064	e2833c02	 add         r3, r3, #2, 24
  00068	e5832000	 str         r2, [r3]

; 40   :     gpPRCMRegs->ulCM_ICLKEN1_CORE |= PRCM_ICLKEN1_CORE_EN_I2C1;

  0006c	e59f3160	 ldr         r3, [pc, #0x160]
  00070	e5933000	 ldr         r3, [r3]
  00074	e2833e21	 add         r3, r3, #0x21, 28
  00078	e5933000	 ldr         r3, [r3]
  0007c	e3832702	 orr         r2, r3, #2, 14
  00080	e59f314c	 ldr         r3, [pc, #0x14C]
  00084	e5933000	 ldr         r3, [r3]
  00088	e2833e21	 add         r3, r3, #0x21, 28
  0008c	e5832000	 str         r2, [r3]

; 41   : 
; 42   :     // Reset the I2C controller
; 43   :     gpI2CRegs->I2C_SYSC = I2C_SYSC_SRST;

  00090	e59f3140	 ldr         r3, [pc, #0x140]
  00094	e5933000	 ldr         r3, [r3]
  00098	e2832020	 add         r2, r3, #0x20
  0009c	e3a03002	 mov         r3, #2
  000a0	e1c230b0	 strh        r3, [r2]

; 44   : 
; 45   :     // Set base clock as 12MHz & L/H period
; 46   :     gpI2CRegs->I2C_PSC = 0;

  000a4	e59f312c	 ldr         r3, [pc, #0x12C]
  000a8	e5933000	 ldr         r3, [r3]
  000ac	e2832030	 add         r2, r3, #0x30
  000b0	e3a03000	 mov         r3, #0
  000b4	e1c230b0	 strh        r3, [r2]

; 47   : 
; 48   :     // Set default L/H periods
; 49   :     gpI2CRegs->I2C_SCLL = (UINT16)gCurClockDivisor;

  000b8	e59f311c	 ldr         r3, [pc, #0x11C]
  000bc	e5933000	 ldr         r3, [r3]
  000c0	e1a02803	 mov         r2, r3, lsl #16
  000c4	e1a02822	 mov         r2, r2, lsr #16
  000c8	e59f3108	 ldr         r3, [pc, #0x108]
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e2833034	 add         r3, r3, #0x34
  000d4	e1c320b0	 strh        r2, [r3]

; 50   :     gpI2CRegs->I2C_SCLH = (UINT16)gCurClockDivisor;

  000d8	e59f30fc	 ldr         r3, [pc, #0xFC]
  000dc	e5933000	 ldr         r3, [r3]
  000e0	e1a02803	 mov         r2, r3, lsl #16
  000e4	e1a02822	 mov         r2, r2, lsr #16
  000e8	e59f30e8	 ldr         r3, [pc, #0xE8]
  000ec	e5933000	 ldr         r3, [r3]
  000f0	e2833038	 add         r3, r3, #0x38
  000f4	e1c320b0	 strh        r2, [r3]

; 51   : 
; 52   : 	//Write the OWN Address
; 53   :     gpI2CRegs->I2C_OA = 0x0E;

  000f8	e59f30d8	 ldr         r3, [pc, #0xD8]
  000fc	e5933000	 ldr         r3, [r3]
  00100	e2832028	 add         r2, r3, #0x28
  00104	e3a0300e	 mov         r3, #0xE
  00108	e1c230b0	 strh        r3, [r2]

; 54   : 
; 55   :     // Enable the I2C
; 56   :     gpI2CRegs->I2C_CON = I2C_CON_EN;

  0010c	e59f30c4	 ldr         r3, [pc, #0xC4]
  00110	e5933000	 ldr         r3, [r3]
  00114	e2832024	 add         r2, r3, #0x24
  00118	e3a03902	 mov         r3, #2, 18
  0011c	e1c230b0	 strh        r3, [r2]
  00120		 |$LN2@KERNELI2C_|

; 57   : 
; 58   :     // Wait until resetting is done
; 59   :     while (((gpI2CRegs->I2C_SYSS) & I2C_SYSS_RDONE) == 0);

  00120	e59f30b0	 ldr         r3, [pc, #0xB0]
  00124	e5933000	 ldr         r3, [r3]
  00128	e2833010	 add         r3, r3, #0x10
  0012c	e1d330b0	 ldrh        r3, [r3]
  00130	e3130001	 tst         r3, #1
  00134	1a000000	 bne         |$LN1@KERNELI2C_|
  00138	eafffff8	 b           |$LN2@KERNELI2C_|
  0013c		 |$LN1@KERNELI2C_|

; 60   : 
; 61   : 	// Clear number of bytes in the data payload
; 62   : 	gpI2CRegs->I2C_CNT = 0;

  0013c	e59f3094	 ldr         r3, [pc, #0x94]
  00140	e5933000	 ldr         r3, [r3]
  00144	e2832018	 add         r2, r3, #0x18
  00148	e3a03000	 mov         r3, #0
  0014c	e1c230b0	 strh        r3, [r2]

; 63   : 
; 64   :     // Clear all interrupts
; 65   :     gpI2CRegs->I2C_STAT = 0x3F;

  00150	e59f3080	 ldr         r3, [pc, #0x80]
  00154	e5933000	 ldr         r3, [r3]
  00158	e2832008	 add         r2, r3, #8
  0015c	e3a0303f	 mov         r3, #0x3F
  00160	e1c230b0	 strh        r3, [r2]

; 66   : 
; 67   :     // Disable all interrupts
; 68   :     gpI2CRegs->I2C_IE = 0x00;

  00164	e59f306c	 ldr         r3, [pc, #0x6C]
  00168	e5933000	 ldr         r3, [r3]
  0016c	e2832004	 add         r2, r3, #4
  00170	e3a03000	 mov         r3, #0
  00174	e1c230b0	 strh        r3, [r2]

; 69   : 
; 70   :     // now turn off the clocks - we are inside oeminit so don't need to use kernelIOControl
; 71   :     gpPRCMRegs->ulCM_FCLKEN1_CORE &= ~PRCM_FCLKEN1_CORE_EN_I2C1;

  00178	e59f3054	 ldr         r3, [pc, #0x54]
  0017c	e5933000	 ldr         r3, [r3]
  00180	e2833c02	 add         r3, r3, #2, 24
  00184	e5932000	 ldr         r2, [r3]
  00188	e3e03702	 mvn         r3, #2, 14
  0018c	e0022003	 and         r2, r2, r3
  00190	e59f303c	 ldr         r3, [pc, #0x3C]
  00194	e5933000	 ldr         r3, [r3]
  00198	e2833c02	 add         r3, r3, #2, 24
  0019c	e5832000	 str         r2, [r3]

; 72   :     gpPRCMRegs->ulCM_ICLKEN1_CORE &= ~PRCM_ICLKEN1_CORE_EN_I2C1;

  001a0	e59f302c	 ldr         r3, [pc, #0x2C]
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e2833e21	 add         r3, r3, #0x21, 28
  001ac	e5932000	 ldr         r2, [r3]
  001b0	e3e03702	 mvn         r3, #2, 14
  001b4	e0022003	 and         r2, r2, r3
  001b8	e59f3014	 ldr         r3, [pc, #0x14]
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e2833e21	 add         r3, r3, #0x21, 28
  001c4	e5832000	 str         r2, [r3]

; 73   : }

  001c8	e28dd008	 add         sp, sp, #8
  001cc	e49de004	 ldr         lr, [sp], #4
  001d0	e12fff1e	 bx          lr
  001d4		 |$LN8@KERNELI2C_|
  001d4		 |$LN9@KERNELI2C_|
  001d4	00000000	 DCD         |gpPRCMRegs|
  001d8		 |$LN10@KERNELI2C_|
  001d8	00000000	 DCD         |gpI2CRegs|
  001dc		 |$LN11@KERNELI2C_|
  001dc	00000000	 DCD         |gCurClockDivisor|
  001e0		 |$M45768|

			 ENDP  ; |KERNELI2C_OEMInit|

	EXPORT	|KERNELI2C_HalPostInit|
	IMPORT	|InitializeCriticalSection|

  0000c			 AREA	 |.bss|, NOINIT
|gSec|	%	0x14

  00008			 AREA	 |.pdata|, PDATA
|$T45779| DCD	|$LN5@KERNELI2C_@2|
	DCD	0x40000601
; Function compile flags: /Odtp

  001e0			 AREA	 |.text|, CODE, ARM

  001e0		 |KERNELI2C_HalPostInit| PROC

; 76   : {

  001e0		 |$LN5@KERNELI2C_@2|
  001e0	e52de004	 str         lr, [sp, #-4]!
  001e4		 |$M45776|

; 77   : #ifndef BOOTLOADER
; 78   :     InitializeCriticalSection(&gSec);

  001e4	e59f0008	 ldr         r0, [pc, #8]
  001e8	eb000000	 bl          InitializeCriticalSection

; 79   : #endif
; 80   : }

  001ec	e49de004	 ldr         lr, [sp], #4
  001f0	e12fff1e	 bx          lr
  001f4		 |$LN6@KERNELI2C_@2|
  001f4		 |$LN7@KERNELI2C_@2|
  001f4	00000000	 DCD         |gSec|
  001f8		 |$M45777|

			 ENDP  ; |KERNELI2C_HalPostInit|

	EXPORT	|KERNELI2C_NonPreemptibleSubmit|
	IMPORT	|INTERRUPTS_ENABLE|

  00020			 AREA	 |.bss|, NOINIT
|gCurI2CaddrSize| % 0x4
|gCurI2Caddr| %	0x4

  00010			 AREA	 |.pdata|, PDATA
|$T45786| DCD	|$LN15@KERNELI2C_@3|
	DCD	0x40006304
; Function compile flags: /Odtp

  001f8			 AREA	 |.text|, CODE, ARM

  001f8		 |KERNELI2C_NonPreemptibleSubmit| PROC

; 341  : {

  001f8		 |$LN15@KERNELI2C_@3|
  001f8	e1a0c00d	 mov         r12, sp
  001fc	e92d000f	 stmdb       sp!, {r0 - r3}
  00200	e92d5000	 stmdb       sp!, {r12, lr}
  00204	e24dd00c	 sub         sp, sp, #0xC
  00208		 |$M45783|

; 342  :     BOOL saveInts;
; 343  : 
; 344  :     /* always validate the i2c transaction first */
; 345  :     pTrans->mErrorCode = 0;

  00208	e59d3020	 ldr         r3, [sp, #0x20]
  0020c	e283206c	 add         r2, r3, #0x6C
  00210	e3a03000	 mov         r3, #0
  00214	e5823000	 str         r3, [r2]

; 346  :     if (!ValidateTransaction(pTrans))

  00218	e59d0020	 ldr         r0, [sp, #0x20]
  0021c	eb000000	 bl          ValidateTransaction
  00220	e58d0004	 str         r0, [sp, #4]
  00224	e59d3004	 ldr         r3, [sp, #4]
  00228	e3530000	 cmp         r3, #0
  0022c	1a000000	 bne         |$LN10@KERNELI2C_@3|

; 347  :         return;

  00230	ea00004d	 b           |$LN11@KERNELI2C_@3|
  00234		 |$LN10@KERNELI2C_@3|

; 348  :     if (((addrSize!=7) && (addrSize!=10)) || (!i2cAddr))

  00234	e59d301c	 ldr         r3, [sp, #0x1C]
  00238	e3530007	 cmp         r3, #7
  0023c	0a000002	 beq         |$LN7@KERNELI2C_@3|
  00240	e59d301c	 ldr         r3, [sp, #0x1C]
  00244	e353000a	 cmp         r3, #0xA
  00248	1a000002	 bne         |$LN8@KERNELI2C_@3|
  0024c		 |$LN7@KERNELI2C_@3|
  0024c	e59d3018	 ldr         r3, [sp, #0x18]
  00250	e3530000	 cmp         r3, #0
  00254	1a00000d	 bne         |$LN9@KERNELI2C_@3|
  00258		 |$LN8@KERNELI2C_@3|

; 349  :     {
; 350  :         if ((i2cAddr) && (!addrSize))

  00258	e59d3018	 ldr         r3, [sp, #0x18]
  0025c	e3530000	 cmp         r3, #0
  00260	0a000005	 beq         |$LN6@KERNELI2C_@3|
  00264	e59d301c	 ldr         r3, [sp, #0x1C]
  00268	e3530000	 cmp         r3, #0
  0026c	1a000002	 bne         |$LN6@KERNELI2C_@3|

; 351  :             addrSize = 7;

  00270	e3a03007	 mov         r3, #7
  00274	e58d301c	 str         r3, [sp, #0x1C]

; 352  :         else

  00278	ea000004	 b           |$LN5@KERNELI2C_@3|
  0027c		 |$LN6@KERNELI2C_@3|

; 353  :         {
; 354  :             /* invalid address or address size */
; 355  :             pTrans->mErrorCode = KERNELI2C_ERR_INVALIDADDR;

  0027c	e59d3020	 ldr         r3, [sp, #0x20]
  00280	e283206c	 add         r2, r3, #0x6C
  00284	e3e03027	 mvn         r3, #0x27
  00288	e5823000	 str         r3, [r2]

; 356  :             return;

  0028c	ea000036	 b           |$LN11@KERNELI2C_@3|
  00290		 |$LN5@KERNELI2C_@3|
  00290		 |$LN9@KERNELI2C_@3|

; 357  :         }
; 358  :     }
; 359  : 
; 360  :     /* set current operation index and state for that operation */
; 361  :     pTrans->mReserved1 = 0;

  00290	e59d2020	 ldr         r2, [sp, #0x20]
  00294	e3a03000	 mov         r3, #0
  00298	e5823000	 str         r3, [r2]

; 362  :     pTrans->mReserved2 = I2CSTATE_CLKSETUP;

  0029c	e59d3020	 ldr         r3, [sp, #0x20]
  002a0	e2832004	 add         r2, r3, #4
  002a4	e3a03000	 mov         r3, #0
  002a8	e5823000	 str         r3, [r2]

; 363  : 
; 364  :     if (!inISR)

  002ac	e59d3014	 ldr         r3, [sp, #0x14]
  002b0	e3530000	 cmp         r3, #0
  002b4	1a000011	 bne         |$LN4@KERNELI2C_@3|

; 365  :     {
; 366  :         /* latch in the lower priority transaction now */
; 367  :         saveInts = INTERRUPTS_ENABLE(FALSE);

  002b8	e3a00000	 mov         r0, #0
  002bc	eb000000	 bl          INTERRUPTS_ENABLE
  002c0	e58d0008	 str         r0, [sp, #8]
  002c4	e59d3008	 ldr         r3, [sp, #8]
  002c8	e58d3000	 str         r3, [sp]

; 368  :         gCurI2Caddr = i2cAddr;

  002cc	e59d2018	 ldr         r2, [sp, #0x18]
  002d0	e59f30a4	 ldr         r3, [pc, #0xA4]
  002d4	e5832000	 str         r2, [r3]

; 369  :         gCurI2CaddrSize = addrSize;

  002d8	e59d201c	 ldr         r2, [sp, #0x1C]
  002dc	e59f3094	 ldr         r3, [pc, #0x94]
  002e0	e5832000	 str         r2, [r3]

; 370  :         gpLowTrans = pTrans;

  002e4	e59d2020	 ldr         r2, [sp, #0x20]
  002e8	e59f3090	 ldr         r3, [pc, #0x90]
  002ec	e5832000	 str         r2, [r3]

; 371  :         INTERRUPTS_ENABLE(saveInts);

  002f0	e59d0000	 ldr         r0, [sp]
  002f4	eb000000	 bl          INTERRUPTS_ENABLE

; 372  :         pTrans = NULL;

  002f8	e3a03000	 mov         r3, #0
  002fc	e58d3020	 str         r3, [sp, #0x20]
  00300		 |$LN4@KERNELI2C_@3|

; 373  :     }
; 374  :     else
; 375  :     {
; 376  :         OALMSG(0/*1*/, (TEXT("ki2c-NONPREEMPT()\r\n")));
; 377  :     }
; 378  : 
; 379  :     /* work on gpLowTrans until it is done - if we're executing in an isr then
; 380  :        that transaction is currently in progress and we need to finish it first */
; 381  :     if (gpLowTrans)

  00300	e59f3078	 ldr         r3, [pc, #0x78]
  00304	e5933000	 ldr         r3, [r3]
  00308	e3530000	 cmp         r3, #0
  0030c	0a000005	 beq         |$LN2@KERNELI2C_@3|

; 382  :     {
; 383  :         ResumeTrans(gpLowTrans);

  00310	e59f3068	 ldr         r3, [pc, #0x68]
  00314	e5930000	 ldr         r0, [r3]
  00318	eb000000	 bl          ResumeTrans

; 384  :         gpLowTrans = NULL;

  0031c	e59f205c	 ldr         r2, [pc, #0x5C]
  00320	e3a03000	 mov         r3, #0
  00324	e5823000	 str         r3, [r2]
  00328		 |$LN2@KERNELI2C_@3|

; 385  :     }
; 386  : 
; 387  :     /* if pTrans is not NULL, do that one now - its the isr transaction */
; 388  :     if (pTrans)

  00328	e59d3020	 ldr         r3, [sp, #0x20]
  0032c	e3530000	 cmp         r3, #0
  00330	0a00000d	 beq         |$LN1@KERNELI2C_@3|

; 389  :     {
; 390  :         gCurI2Caddr = i2cAddr;

  00334	e59d2018	 ldr         r2, [sp, #0x18]
  00338	e59f303c	 ldr         r3, [pc, #0x3C]
  0033c	e5832000	 str         r2, [r3]

; 391  :         gCurI2CaddrSize = addrSize;

  00340	e59d201c	 ldr         r2, [sp, #0x1C]
  00344	e59f302c	 ldr         r3, [pc, #0x2C]
  00348	e5832000	 str         r2, [r3]

; 392  :         ResumeTrans(pTrans);

  0034c	e59d0020	 ldr         r0, [sp, #0x20]
  00350	eb000000	 bl          ResumeTrans

; 393  :         gCurI2Caddr = 0;

  00354	e59f2020	 ldr         r2, [pc, #0x20]
  00358	e3a03000	 mov         r3, #0
  0035c	e5823000	 str         r3, [r2]

; 394  :         gCurI2CaddrSize = 0;

  00360	e59f2010	 ldr         r2, [pc, #0x10]
  00364	e3a03000	 mov         r3, #0
  00368	e5823000	 str         r3, [r2]
  0036c		 |$LN1@KERNELI2C_@3|
  0036c		 |$LN11@KERNELI2C_@3|

; 395  :     }
; 396  : }

  0036c	e28dd00c	 add         sp, sp, #0xC
  00370	e89d6000	 ldmia       sp, {sp, lr}
  00374	e12fff1e	 bx          lr
  00378		 |$LN16@KERNELI2C_@3|
  00378		 |$LN17@KERNELI2C_@3|
  00378	00000000	 DCD         |gCurI2CaddrSize|
  0037c		 |$LN18@KERNELI2C_@3|
  0037c	00000000	 DCD         |gCurI2Caddr|
  00380		 |$LN19@KERNELI2C_@3|
  00380	00000000	 DCD         |gpLowTrans|
  00384		 |$M45784|

			 ENDP  ; |KERNELI2C_NonPreemptibleSubmit|


  00018			 AREA	 |.pdata|, PDATA
|$T45796| DCD	|$LN14@ValidateTr|
	DCD	0x40007204
; Function compile flags: /Odtp

  00384			 AREA	 |.text|, CODE, ARM

  00384		 |ValidateTransaction| PROC

; 83   : {

  00384		 |$LN14@ValidateTr|
  00384	e1a0c00d	 mov         r12, sp
  00388	e92d0001	 stmdb       sp!, {r0}
  0038c	e92d5000	 stmdb       sp!, {r12, lr}
  00390	e24dd008	 sub         sp, sp, #8
  00394		 |$M45793|

; 84   :     DWORD i;
; 85   : 
; 86   :     if (pTrans->mErrorCode)

  00394	e59d3010	 ldr         r3, [sp, #0x10]
  00398	e283306c	 add         r3, r3, #0x6C
  0039c	e5933000	 ldr         r3, [r3]
  003a0	e3530000	 cmp         r3, #0
  003a4	0a000002	 beq         |$LN9@ValidateTr|

; 87   :         return FALSE;

  003a8	e3a03000	 mov         r3, #0
  003ac	e58d3004	 str         r3, [sp, #4]
  003b0	ea000061	 b           |$LN10@ValidateTr|
  003b4		 |$LN9@ValidateTr|

; 88   :     for(i=0;i<I2CTRANS_MAX_STREAMED_TRANSACTIONS;i++)

  003b4	e3a03000	 mov         r3, #0
  003b8	e58d3000	 str         r3, [sp]
  003bc	ea000002	 b           |$LN8@ValidateTr|
  003c0		 |$LN7@ValidateTr|
  003c0	e59d3000	 ldr         r3, [sp]
  003c4	e2833001	 add         r3, r3, #1
  003c8	e58d3000	 str         r3, [sp]
  003cc		 |$LN8@ValidateTr|
  003cc	e59d3000	 ldr         r3, [sp]
  003d0	e3530008	 cmp         r3, #8
  003d4	2a000056	 bcs         |$LN6@ValidateTr|

; 89   :     {
; 90   :         if (!pTrans->mOpCode[i])

  003d8	e59d3010	 ldr         r3, [sp, #0x10]
  003dc	e283100c	 add         r1, r3, #0xC
  003e0	e59d2000	 ldr         r2, [sp]
  003e4	e3a03004	 mov         r3, #4
  003e8	e0030392	 mul         r3, r2, r3
  003ec	e0813003	 add         r3, r1, r3
  003f0	e5933000	 ldr         r3, [r3]
  003f4	e3530000	 cmp         r3, #0
  003f8	1a000000	 bne         |$LN5@ValidateTr|

; 91   :             break;

  003fc	ea00004c	 b           |$LN6@ValidateTr|
  00400		 |$LN5@ValidateTr|

; 92   :         if (((pTrans->mOpCode[i] & I2C_OPCODE_MASK) != I2C_OPCODE_READ) &&
; 93   :             ((pTrans->mOpCode[i] & I2C_OPCODE_MASK) != I2C_OPCODE_WRITE))

  00400	e59d3010	 ldr         r3, [sp, #0x10]
  00404	e283100c	 add         r1, r3, #0xC
  00408	e59d2000	 ldr         r2, [sp]
  0040c	e3a03004	 mov         r3, #4
  00410	e0030392	 mul         r3, r2, r3
  00414	e0813003	 add         r3, r1, r3
  00418	e5933000	 ldr         r3, [r3]
  0041c	e2033003	 and         r3, r3, #3
  00420	e3530001	 cmp         r3, #1
  00424	0a000010	 beq         |$LN4@ValidateTr|
  00428	e59d3010	 ldr         r3, [sp, #0x10]
  0042c	e283100c	 add         r1, r3, #0xC
  00430	e59d2000	 ldr         r2, [sp]
  00434	e3a03004	 mov         r3, #4
  00438	e0030392	 mul         r3, r2, r3
  0043c	e0813003	 add         r3, r1, r3
  00440	e5933000	 ldr         r3, [r3]
  00444	e2033003	 and         r3, r3, #3
  00448	e3530002	 cmp         r3, #2
  0044c	0a000006	 beq         |$LN4@ValidateTr|

; 94   :         {
; 95   :             /* invalid opcode specified */
; 96   :             pTrans->mErrorCode = KERNELI2C_ERR_INVALIDOPCODE;

  00450	e59d3010	 ldr         r3, [sp, #0x10]
  00454	e283206c	 add         r2, r3, #0x6C
  00458	e3e03009	 mvn         r3, #9
  0045c	e5823000	 str         r3, [r2]

; 97   :             return FALSE;

  00460	e3a03000	 mov         r3, #0
  00464	e58d3004	 str         r3, [sp, #4]
  00468	ea000033	 b           |$LN10@ValidateTr|
  0046c		 |$LN4@ValidateTr|

; 98   :         }
; 99   :         if (!pTrans->mTransLen[i])

  0046c	e59d3010	 ldr         r3, [sp, #0x10]
  00470	e283104c	 add         r1, r3, #0x4C
  00474	e59d2000	 ldr         r2, [sp]
  00478	e3a03004	 mov         r3, #4
  0047c	e0030392	 mul         r3, r2, r3
  00480	e0813003	 add         r3, r1, r3
  00484	e5933000	 ldr         r3, [r3]
  00488	e3530000	 cmp         r3, #0
  0048c	1a000006	 bne         |$LN3@ValidateTr|

; 100  :         {
; 101  :             /* transfer length is invalid */
; 102  :             pTrans->mErrorCode = KERNELI2C_ERR_INVALIDOPLENGTH;

  00490	e59d3010	 ldr         r3, [sp, #0x10]
  00494	e283206c	 add         r2, r3, #0x6C
  00498	e3e03013	 mvn         r3, #0x13
  0049c	e5823000	 str         r3, [r2]

; 103  :             return FALSE;

  004a0	e3a03000	 mov         r3, #0
  004a4	e58d3004	 str         r3, [sp, #4]
  004a8	ea000023	 b           |$LN10@ValidateTr|
  004ac		 |$LN3@ValidateTr|

; 104  :         }
; 105  :         if ((pTrans->mBufferOffset[i]>=I2CTRANS_BUFFER_BYTES) ||
; 106  :             (pTrans->mBufferOffset[i]+pTrans->mTransLen[i]>I2CTRANS_BUFFER_BYTES))

  004ac	e59d3010	 ldr         r3, [sp, #0x10]
  004b0	e283102c	 add         r1, r3, #0x2C
  004b4	e59d2000	 ldr         r2, [sp]
  004b8	e3a03004	 mov         r3, #4
  004bc	e0030392	 mul         r3, r2, r3
  004c0	e0813003	 add         r3, r1, r3
  004c4	e5933000	 ldr         r3, [r3]
  004c8	e3530c01	 cmp         r3, #1, 24
  004cc	2a000010	 bcs         |$LN1@ValidateTr|
  004d0	e59d3010	 ldr         r3, [sp, #0x10]
  004d4	e283102c	 add         r1, r3, #0x2C
  004d8	e59d2000	 ldr         r2, [sp]
  004dc	e3a03004	 mov         r3, #4
  004e0	e0030392	 mul         r3, r2, r3
  004e4	e0810003	 add         r0, r1, r3
  004e8	e59d3010	 ldr         r3, [sp, #0x10]
  004ec	e283104c	 add         r1, r3, #0x4C
  004f0	e59d2000	 ldr         r2, [sp]
  004f4	e3a03004	 mov         r3, #4
  004f8	e0030392	 mul         r3, r2, r3
  004fc	e0813003	 add         r3, r1, r3
  00500	e5902000	 ldr         r2, [r0]
  00504	e5933000	 ldr         r3, [r3]
  00508	e0823003	 add         r3, r2, r3
  0050c	e3530c01	 cmp         r3, #1, 24
  00510	9a000006	 bls         |$LN2@ValidateTr|
  00514		 |$LN1@ValidateTr|

; 107  :         {
; 108  :             /* at least part of transfer is outside range of transfer buffer */
; 109  :             pTrans->mErrorCode = KERNELI2C_ERR_OPBUFFERINVALID;

  00514	e59d3010	 ldr         r3, [sp, #0x10]
  00518	e283206c	 add         r2, r3, #0x6C
  0051c	e3e0301d	 mvn         r3, #0x1D
  00520	e5823000	 str         r3, [r2]

; 110  :             return FALSE;

  00524	e3a03000	 mov         r3, #0
  00528	e58d3004	 str         r3, [sp, #4]
  0052c	ea000002	 b           |$LN10@ValidateTr|
  00530		 |$LN2@ValidateTr|

; 111  :         }
; 112  :     }

  00530	eaffffa2	 b           |$LN7@ValidateTr|
  00534		 |$LN6@ValidateTr|

; 113  :     return TRUE;

  00534	e3a03001	 mov         r3, #1
  00538	e58d3004	 str         r3, [sp, #4]
  0053c		 |$LN10@ValidateTr|

; 114  : }

  0053c	e59d0004	 ldr         r0, [sp, #4]
  00540	e28dd008	 add         sp, sp, #8
  00544	e89d6000	 ldmia       sp, {sp, lr}
  00548	e12fff1e	 bx          lr
  0054c		 |$M45794|

			 ENDP  ; |ValidateTransaction|

	EXPORT	|??_C@_1DC@FKIPCFIC@?$AA?$CK?$AA?$CK?$AA?$CK?$AAE?$AAR?$AAR?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?9?$AAB?$AAU?$AAS?$AA?5?$AAA?$AAB?$AAO?$AAR?$AAT?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|OALGetTickCount|

  00028			 AREA	 |.bss|, NOINIT
|gTimeOutTick| % 0x4
|gpData| %	0x4
|gBytesLeft| %	0x4

  00020			 AREA	 |.pdata|, PDATA
|$T45809| DCD	|$LN41@ResumeTran|
	DCD	0x40013204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FKIPCFIC@?$AA?$CK?$AA?$CK?$AA?$CK?$AAE?$AAR?$AAR?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?9?$AAB?$AAU?$AAS?$AA?5?$AAA?$AAB?$AAO?$AAR?$AAT?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "*"
	DCB	0x0, "*", 0x0, "*", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "-", 0x0, "B"
	DCB	0x0, "U", 0x0, "S", 0x0, " ", 0x0, "A", 0x0, "B", 0x0, "O"
	DCB	0x0, "R", 0x0, "T", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  0054c			 AREA	 |.text|, CODE, ARM

  0054c		 |ResumeTrans| PROC

; 244  : {

  0054c		 |$LN41@ResumeTran|
  0054c	e1a0c00d	 mov         r12, sp
  00550	e92d0001	 stmdb       sp!, {r0}
  00554	e92d5000	 stmdb       sp!, {r12, lr}
  00558	e24dd014	 sub         sp, sp, #0x14
  0055c		 |$M45806|
  0055c		 |$LN28@ResumeTran|

; 245  :     DWORD op;
; 246  : 
; 247  :     /* wait for bus not to be busy (finish any outstanding requests) */
; 248  :     while (gpI2CRegs->I2C_STAT & I2C_STAT_BB);

  0055c	e59f34a0	 ldr         r3, [pc, #0x4A0]
  00560	e5933000	 ldr         r3, [r3]
  00564	e2833008	 add         r3, r3, #8
  00568	e1d330b0	 ldrh        r3, [r3]
  0056c	e3130a01	 tst         r3, #1, 20
  00570	0a000000	 beq         |$LN27@ResumeTran|
  00574	eafffff8	 b           |$LN28@ResumeTran|
  00578		 |$LN27@ResumeTran|
  00578		 |$LN26@ResumeTran|

; 249  : 
; 250  :     /* pTrans is the currently executing transfer and bus activity for it needs to be
; 251  :        completed before another transfer can be done.  the target bus address is in
; 252  :        gCurI2Caddr,gCurI2Csize */
; 253  : 
; 254  :     do {
; 255  :         if (!pTrans->mOpCode[pTrans->mReserved1])

  00578	e59d301c	 ldr         r3, [sp, #0x1C]
  0057c	e283100c	 add         r1, r3, #0xC
  00580	e59d301c	 ldr         r3, [sp, #0x1C]
  00584	e5932000	 ldr         r2, [r3]
  00588	e3a03004	 mov         r3, #4
  0058c	e0030392	 mul         r3, r2, r3
  00590	e0813003	 add         r3, r1, r3
  00594	e5933000	 ldr         r3, [r3]
  00598	e3530000	 cmp         r3, #0
  0059c	1a000000	 bne         |$LN23@ResumeTran|

; 256  :             break;

  005a0	ea000111	 b           |$LN24@ResumeTran|
  005a4		 |$LN23@ResumeTran|

; 257  :         /* POINT A --------------------------*/
; 258  : 
; 259  :         op = pTrans->mOpCode[pTrans->mReserved1];

  005a4	e59d301c	 ldr         r3, [sp, #0x1C]
  005a8	e283100c	 add         r1, r3, #0xC
  005ac	e59d301c	 ldr         r3, [sp, #0x1C]
  005b0	e5932000	 ldr         r2, [r3]
  005b4	e3a03004	 mov         r3, #4
  005b8	e0030392	 mul         r3, r2, r3
  005bc	e0813003	 add         r3, r1, r3
  005c0	e5933000	 ldr         r3, [r3]
  005c4	e58d3000	 str         r3, [sp]

; 260  :         /* if the high priority came in between point a and point b, then pTrans->mReserved1
; 261  :            will be invalid, but pTrans->mReserved2 will be set to I2CSTATE_OPDONE here, and 
; 262  :            all that will happen is a break (default) */
; 263  :         switch(pTrans->mReserved2)

  005c8	e59d301c	 ldr         r3, [sp, #0x1C]
  005cc	e2833004	 add         r3, r3, #4
  005d0	e5933000	 ldr         r3, [r3]
  005d4	e58d3004	 str         r3, [sp, #4]
  005d8	e59d3004	 ldr         r3, [sp, #4]
  005dc	e3530003	 cmp         r3, #3
  005e0	8a0000f7	 bhi         |$LN1@ResumeTran|
  005e4	e59d2004	 ldr         r2, [sp, #4]
  005e8	e1a03102	 mov         r3, r2, lsl #2
  005ec	e083300f	 add         r3, r3, pc
  005f0	e5933004	 ldr         r3, [r3, #4]
  005f4	e08ff003	 add         pc, pc, r3
  005f8		 |$LN34@ResumeTran|
  005f8		 |$LN33@ResumeTran|
  005f8		 |$LN35@ResumeTran|
  005f8	0000000c	 DCD         0xc
  005fc		 |$LN36@ResumeTran|
  005fc	00000110	 DCD         0x110
  00600		 |$LN37@ResumeTran|
  00600	000001ac	 DCD         0x1ac
  00604		 |$LN38@ResumeTran|
  00604	00000200	 DCD         0x200
  00608		 |$LN20@ResumeTran|

; 264  :         {
; 265  :         case I2CSTATE_CLKSETUP:
; 266  :             /* turn on the module functional clock */
; 267  :             gpPRCMRegs->ulCM_FCLKEN1_CORE |= PRCM_FCLKEN1_CORE_EN_I2C1;

  00608	e59f33e8	 ldr         r3, [pc, #0x3E8]
  0060c	e5933000	 ldr         r3, [r3]
  00610	e2833c02	 add         r3, r3, #2, 24
  00614	e5933000	 ldr         r3, [r3]
  00618	e3832702	 orr         r2, r3, #2, 14
  0061c	e59f33d4	 ldr         r3, [pc, #0x3D4]
  00620	e5933000	 ldr         r3, [r3]
  00624	e2833c02	 add         r3, r3, #2, 24
  00628	e5832000	 str         r2, [r3]

; 268  :             gpPRCMRegs->ulCM_ICLKEN1_CORE |= PRCM_ICLKEN1_CORE_EN_I2C1;

  0062c	e59f33c4	 ldr         r3, [pc, #0x3C4]
  00630	e5933000	 ldr         r3, [r3]
  00634	e2833e21	 add         r3, r3, #0x21, 28
  00638	e5933000	 ldr         r3, [r3]
  0063c	e3832702	 orr         r2, r3, #2, 14
  00640	e59f33b0	 ldr         r3, [pc, #0x3B0]
  00644	e5933000	 ldr         r3, [r3]
  00648	e2833e21	 add         r3, r3, #0x21, 28
  0064c	e5832000	 str         r2, [r3]

; 269  :             /* check current clock setting of i2c and make sure it matches pTrans */
; 270  :             if (pTrans->mClk_HL_Divisor!=gCurClockDivisor)

  00650	e59d301c	 ldr         r3, [sp, #0x1C]
  00654	e2833008	 add         r3, r3, #8
  00658	e5932000	 ldr         r2, [r3]
  0065c	e59f33ac	 ldr         r3, [pc, #0x3AC]
  00660	e5933000	 ldr         r3, [r3]
  00664	e1520003	 cmp         r2, r3
  00668	0a000022	 beq         |$LN19@ResumeTran|

; 271  :             {
; 272  :                 if (!pTrans->mClk_HL_Divisor)

  0066c	e59d301c	 ldr         r3, [sp, #0x1C]
  00670	e2833008	 add         r3, r3, #8
  00674	e5933000	 ldr         r3, [r3]
  00678	e3530000	 cmp         r3, #0
  0067c	1a000003	 bne         |$LN18@ResumeTran|

; 273  :                     gCurClockDivisor = I2C_CLOCK_DEFAULT;

  00680	e59f2388	 ldr         r2, [pc, #0x388]
  00684	e3a0300f	 mov         r3, #0xF
  00688	e5823000	 str         r3, [r2]

; 274  :                 else

  0068c	ea000004	 b           |$LN17@ResumeTran|
  00690		 |$LN18@ResumeTran|

; 275  :                     gCurClockDivisor = pTrans->mClk_HL_Divisor;            

  00690	e59d301c	 ldr         r3, [sp, #0x1C]
  00694	e2833008	 add         r3, r3, #8
  00698	e5932000	 ldr         r2, [r3]
  0069c	e59f336c	 ldr         r3, [pc, #0x36C]
  006a0	e5832000	 str         r2, [r3]
  006a4		 |$LN17@ResumeTran|

; 276  :                 gpI2CRegs->I2C_PSC = 0;

  006a4	e59f3358	 ldr         r3, [pc, #0x358]
  006a8	e5933000	 ldr         r3, [r3]
  006ac	e2832030	 add         r2, r3, #0x30
  006b0	e3a03000	 mov         r3, #0
  006b4	e1c230b0	 strh        r3, [r2]

; 277  :                 gpI2CRegs->I2C_SCLL = (UINT16)gCurClockDivisor;

  006b8	e59f3350	 ldr         r3, [pc, #0x350]
  006bc	e5933000	 ldr         r3, [r3]
  006c0	e1a02803	 mov         r2, r3, lsl #16
  006c4	e1a02822	 mov         r2, r2, lsr #16
  006c8	e59f3334	 ldr         r3, [pc, #0x334]
  006cc	e5933000	 ldr         r3, [r3]
  006d0	e2833034	 add         r3, r3, #0x34
  006d4	e1c320b0	 strh        r2, [r3]

; 278  :                 gpI2CRegs->I2C_SCLH = (UINT16)gCurClockDivisor;

  006d8	e59f3330	 ldr         r3, [pc, #0x330]
  006dc	e5933000	 ldr         r3, [r3]
  006e0	e1a02803	 mov         r2, r3, lsl #16
  006e4	e1a02822	 mov         r2, r2, lsr #16
  006e8	e59f3314	 ldr         r3, [pc, #0x314]
  006ec	e5933000	 ldr         r3, [r3]
  006f0	e2833038	 add         r3, r3, #0x38
  006f4	e1c320b0	 strh        r2, [r3]
  006f8		 |$LN19@ResumeTran|

; 279  :             }
; 280  :             pTrans->mReserved2 = I2CSTATE_OPSTART;

  006f8	e59d301c	 ldr         r3, [sp, #0x1C]
  006fc	e2832004	 add         r2, r3, #4
  00700	e3a03001	 mov         r3, #1
  00704	e5823000	 str         r3, [r2]

; 281  :             break;

  00708	ea0000ad	 b           |$LN21@ResumeTran|
  0070c		 |$LN16@ResumeTran|

; 282  :         case I2CSTATE_OPSTART:
; 283  :             gBytesLeft = pTrans->mTransLen[pTrans->mReserved1];

  0070c	e59d301c	 ldr         r3, [sp, #0x1C]
  00710	e283104c	 add         r1, r3, #0x4C
  00714	e59d301c	 ldr         r3, [sp, #0x1C]
  00718	e5932000	 ldr         r2, [r3]
  0071c	e3a03004	 mov         r3, #4
  00720	e0030392	 mul         r3, r2, r3
  00724	e0813003	 add         r3, r1, r3
  00728	e5932000	 ldr         r2, [r3]
  0072c	e59f32d4	 ldr         r3, [pc, #0x2D4]
  00730	e5832000	 str         r2, [r3]

; 284  :             gpData = &pTrans->mBuffer[pTrans->mBufferOffset[pTrans->mReserved1]];

  00734	e59d301c	 ldr         r3, [sp, #0x1C]
  00738	e2830070	 add         r0, r3, #0x70
  0073c	e59d301c	 ldr         r3, [sp, #0x1C]
  00740	e283102c	 add         r1, r3, #0x2C
  00744	e59d301c	 ldr         r3, [sp, #0x1C]
  00748	e5932000	 ldr         r2, [r3]
  0074c	e3a03004	 mov         r3, #4
  00750	e0030392	 mul         r3, r2, r3
  00754	e0813003	 add         r3, r1, r3
  00758	e5933000	 ldr         r3, [r3]
  0075c	e0802003	 add         r2, r0, r3
  00760	e59f32a4	 ldr         r3, [pc, #0x2A4]
  00764	e5832000	 str         r2, [r3]

; 285  :             INTSOFF_I2CTRANS_STARTOP(((op & I2C_OPCODE_MASK)==I2C_OPCODE_WRITE)?TRUE:FALSE);

  00768	e59d3000	 ldr         r3, [sp]
  0076c	e2033003	 and         r3, r3, #3
  00770	e3530002	 cmp         r3, #2
  00774	1a000002	 bne         |$LN31@ResumeTran|
  00778	e3a03001	 mov         r3, #1
  0077c	e58d3008	 str         r3, [sp, #8]
  00780	ea000001	 b           |$LN32@ResumeTran|
  00784		 |$LN31@ResumeTran|
  00784	e3a03000	 mov         r3, #0
  00788	e58d3008	 str         r3, [sp, #8]
  0078c		 |$LN32@ResumeTran|
  0078c	e59d0008	 ldr         r0, [sp, #8]
  00790	eb000000	 bl          INTSOFF_I2CTRANS_STARTOP

; 286  :             pTrans->mReserved2 = I2CSTATE_OPUPDATE;

  00794	e59d301c	 ldr         r3, [sp, #0x1C]
  00798	e2832004	 add         r2, r3, #4
  0079c	e3a03002	 mov         r3, #2
  007a0	e5823000	 str         r3, [r2]

; 287  :             break;

  007a4	ea000086	 b           |$LN21@ResumeTran|
  007a8		 |$LN15@ResumeTran|

; 288  :         case I2CSTATE_OPUPDATE:
; 289  :             if ((op & I2C_OPCODE_MASK)==I2C_OPCODE_READ)

  007a8	e59d3000	 ldr         r3, [sp]
  007ac	e2033003	 and         r3, r3, #3
  007b0	e3530001	 cmp         r3, #1
  007b4	1a000001	 bne         |$LN14@ResumeTran|

; 290  :                 INTSOFF_I2CTRANS_UPDATEREAD();

  007b8	eb000000	 bl          INTSOFF_I2CTRANS_UPDATEREAD

; 291  :             else

  007bc	ea000000	 b           |$LN13@ResumeTran|
  007c0		 |$LN14@ResumeTran|

; 292  :                 INTSOFF_I2CTRANS_UPDATEWRITE();

  007c0	eb000000	 bl          INTSOFF_I2CTRANS_UPDATEWRITE
  007c4		 |$LN13@ResumeTran|

; 293  :             if (!gBytesLeft)

  007c4	e59f323c	 ldr         r3, [pc, #0x23C]
  007c8	e5933000	 ldr         r3, [r3]
  007cc	e3530000	 cmp         r3, #0
  007d0	1a000008	 bne         |$LN12@ResumeTran|

; 294  :             {
; 295  :                 pTrans->mReserved2 = I2CSTATE_OPEND;

  007d4	e59d301c	 ldr         r3, [sp, #0x1C]
  007d8	e2832004	 add         r2, r3, #4
  007dc	e3a03003	 mov         r3, #3
  007e0	e5823000	 str         r3, [r2]

; 296  :                 gTimeOutTick = OALGetTickCount();

  007e4	eb000000	 bl          OALGetTickCount
  007e8	e58d000c	 str         r0, [sp, #0xC]
  007ec	e59d200c	 ldr         r2, [sp, #0xC]
  007f0	e59f3208	 ldr         r3, [pc, #0x208]
  007f4	e5832000	 str         r2, [r3]
  007f8		 |$LN12@ResumeTran|

; 297  :             }
; 298  :             break;

  007f8	ea000071	 b           |$LN21@ResumeTran|
  007fc		 |$LN11@ResumeTran|

; 299  :         case I2CSTATE_OPEND:
; 300  :             if (!(gpI2CRegs->I2C_STAT & I2C_STAT_BB))

  007fc	e59f3200	 ldr         r3, [pc, #0x200]
  00800	e5933000	 ldr         r3, [r3]
  00804	e2833008	 add         r3, r3, #8
  00808	e1d330b0	 ldrh        r3, [r3]
  0080c	e3130a01	 tst         r3, #1, 20
  00810	1a000030	 bne         |$LN10@ResumeTran|

; 301  :             {
; 302  :                 /* bus is no longer  busy (transaction completed) */
; 303  :                 pTrans->mReserved1++;

  00814	e59d301c	 ldr         r3, [sp, #0x1C]
  00818	e5933000	 ldr         r3, [r3]
  0081c	e2832001	 add         r2, r3, #1
  00820	e59d301c	 ldr         r3, [sp, #0x1C]
  00824	e5832000	 str         r2, [r3]

; 304  :                 if ((pTrans->mReserved1==I2CTRANS_MAX_STREAMED_TRANSACTIONS) || 
; 305  :                     (!pTrans->mOpCode[pTrans->mReserved1]))

  00828	e59d301c	 ldr         r3, [sp, #0x1C]
  0082c	e5933000	 ldr         r3, [r3]
  00830	e3530008	 cmp         r3, #8
  00834	0a000009	 beq         |$LN8@ResumeTran|
  00838	e59d301c	 ldr         r3, [sp, #0x1C]
  0083c	e283100c	 add         r1, r3, #0xC
  00840	e59d301c	 ldr         r3, [sp, #0x1C]
  00844	e5932000	 ldr         r2, [r3]
  00848	e3a03004	 mov         r3, #4
  0084c	e0030392	 mul         r3, r2, r3
  00850	e0813003	 add         r3, r1, r3
  00854	e5933000	 ldr         r3, [r3]
  00858	e3530000	 cmp         r3, #0
  0085c	1a000018	 bne         |$LN9@ResumeTran|
  00860		 |$LN8@ResumeTran|

; 306  :                 {
; 307  :                     /* end of this op.  turn off the module functional clocks */
; 308  :                     gpPRCMRegs->ulCM_FCLKEN1_CORE &= ~PRCM_FCLKEN1_CORE_EN_I2C1;

  00860	e59f3190	 ldr         r3, [pc, #0x190]
  00864	e5933000	 ldr         r3, [r3]
  00868	e2833c02	 add         r3, r3, #2, 24
  0086c	e5932000	 ldr         r2, [r3]
  00870	e3e03702	 mvn         r3, #2, 14
  00874	e0022003	 and         r2, r2, r3
  00878	e59f3178	 ldr         r3, [pc, #0x178]
  0087c	e5933000	 ldr         r3, [r3]
  00880	e2833c02	 add         r3, r3, #2, 24
  00884	e5832000	 str         r2, [r3]

; 309  :                     gpPRCMRegs->ulCM_ICLKEN1_CORE &= ~PRCM_ICLKEN1_CORE_EN_I2C1;

  00888	e59f3168	 ldr         r3, [pc, #0x168]
  0088c	e5933000	 ldr         r3, [r3]
  00890	e2833e21	 add         r3, r3, #0x21, 28
  00894	e5932000	 ldr         r2, [r3]
  00898	e3e03702	 mvn         r3, #2, 14
  0089c	e0022003	 and         r2, r2, r3
  008a0	e59f3150	 ldr         r3, [pc, #0x150]
  008a4	e5933000	 ldr         r3, [r3]
  008a8	e2833e21	 add         r3, r3, #0x21, 28
  008ac	e5832000	 str         r2, [r3]

; 310  :                     pTrans->mReserved2 = I2CSTATE_OPDONE;

  008b0	e59d301c	 ldr         r3, [sp, #0x1C]
  008b4	e2832004	 add         r2, r3, #4
  008b8	e3a03004	 mov         r3, #4
  008bc	e5823000	 str         r3, [r2]

; 311  :                 }
; 312  :                 else

  008c0	ea000003	 b           |$LN7@ResumeTran|
  008c4		 |$LN9@ResumeTran|

; 313  :                     pTrans->mReserved2 = I2CSTATE_OPSTART;

  008c4	e59d301c	 ldr         r3, [sp, #0x1C]
  008c8	e2832004	 add         r2, r3, #4
  008cc	e3a03001	 mov         r3, #1
  008d0	e5823000	 str         r3, [r2]
  008d4		 |$LN7@ResumeTran|

; 314  :             }
; 315  :             else if ((OALGetTickCount()-gTimeOutTick)>I2C_OPEND_TIMEOUT)

  008d4	ea00003a	 b           |$LN6@ResumeTran|
  008d8		 |$LN10@ResumeTran|
  008d8	eb000000	 bl          OALGetTickCount
  008dc	e58d0010	 str         r0, [sp, #0x10]
  008e0	e59d2010	 ldr         r2, [sp, #0x10]
  008e4	e59f3114	 ldr         r3, [pc, #0x114]
  008e8	e5933000	 ldr         r3, [r3]
  008ec	e0423003	 sub         r3, r2, r3
  008f0	e35300fa	 cmp         r3, #0xFA
  008f4	9a000032	 bls         |$LN5@ResumeTran|

; 316  :             {
; 317  :                 /* abort */
; 318  :                 OALMSG(1, (TEXT("***ERR: I2C-BUS ABORT.\r\n")));

  008f8	e59f00fc	 ldr         r0, [pc, #0xFC]
  008fc	eb000000	 bl          NKDbgPrintfW
  00900		 |$LN4@ResumeTran|

; 319  :                 while (pTrans->mOpCode[pTrans->mReserved1])

  00900	e59d301c	 ldr         r3, [sp, #0x1C]
  00904	e283100c	 add         r1, r3, #0xC
  00908	e59d301c	 ldr         r3, [sp, #0x1C]
  0090c	e5932000	 ldr         r2, [r3]
  00910	e3a03004	 mov         r3, #4
  00914	e0030392	 mul         r3, r2, r3
  00918	e0813003	 add         r3, r1, r3
  0091c	e5933000	 ldr         r3, [r3]
  00920	e3530000	 cmp         r3, #0
  00924	0a00000a	 beq         |$LN3@ResumeTran|

; 320  :                 {
; 321  :                     pTrans->mReserved1++;

  00928	e59d301c	 ldr         r3, [sp, #0x1C]
  0092c	e5933000	 ldr         r3, [r3]
  00930	e2832001	 add         r2, r3, #1
  00934	e59d301c	 ldr         r3, [sp, #0x1C]
  00938	e5832000	 str         r2, [r3]

; 322  :                     if (pTrans->mReserved1==I2CTRANS_MAX_STREAMED_TRANSACTIONS)

  0093c	e59d301c	 ldr         r3, [sp, #0x1C]
  00940	e5933000	 ldr         r3, [r3]
  00944	e3530008	 cmp         r3, #8
  00948	1a000000	 bne         |$LN2@ResumeTran|

; 323  :                         break;

  0094c	ea000000	 b           |$LN3@ResumeTran|
  00950		 |$LN2@ResumeTran|

; 324  :                 }

  00950	eaffffea	 b           |$LN4@ResumeTran|
  00954		 |$LN3@ResumeTran|

; 325  :                 /* aborted this op.  turn off the module functional clocks */
; 326  :                 gpPRCMRegs->ulCM_FCLKEN1_CORE &= ~PRCM_FCLKEN1_CORE_EN_I2C1;

  00954	e59f309c	 ldr         r3, [pc, #0x9C]
  00958	e5933000	 ldr         r3, [r3]
  0095c	e2833c02	 add         r3, r3, #2, 24
  00960	e5932000	 ldr         r2, [r3]
  00964	e3e03702	 mvn         r3, #2, 14
  00968	e0022003	 and         r2, r2, r3
  0096c	e59f3084	 ldr         r3, [pc, #0x84]
  00970	e5933000	 ldr         r3, [r3]
  00974	e2833c02	 add         r3, r3, #2, 24
  00978	e5832000	 str         r2, [r3]

; 327  :                 gpPRCMRegs->ulCM_ICLKEN1_CORE &= ~PRCM_ICLKEN1_CORE_EN_I2C1;

  0097c	e59f3074	 ldr         r3, [pc, #0x74]
  00980	e5933000	 ldr         r3, [r3]
  00984	e2833e21	 add         r3, r3, #0x21, 28
  00988	e5932000	 ldr         r2, [r3]
  0098c	e3e03702	 mvn         r3, #2, 14
  00990	e0022003	 and         r2, r2, r3
  00994	e59f305c	 ldr         r3, [pc, #0x5C]
  00998	e5933000	 ldr         r3, [r3]
  0099c	e2833e21	 add         r3, r3, #0x21, 28
  009a0	e5832000	 str         r2, [r3]

; 328  :                 pTrans->mReserved2 = I2CSTATE_OPDONE;

  009a4	e59d301c	 ldr         r3, [sp, #0x1C]
  009a8	e2832004	 add         r2, r3, #4
  009ac	e3a03004	 mov         r3, #4
  009b0	e5823000	 str         r3, [r2]

; 329  :                 pTrans->mErrorCode = (DWORD)-2;

  009b4	e59d301c	 ldr         r3, [sp, #0x1C]
  009b8	e283206c	 add         r2, r3, #0x6C
  009bc	e3e03001	 mvn         r3, #1
  009c0	e5823000	 str         r3, [r2]
  009c4		 |$LN5@ResumeTran|
  009c4		 |$LN6@ResumeTran|
  009c4		 |$LN1@ResumeTran|
  009c4		 |$LN21@ResumeTran|

; 330  :             }
; 331  :             break;
; 332  :         default:
; 333  :             break;
; 334  :         }
; 335  : 
; 336  :     } while (pTrans->mOpCode[pTrans->mReserved1]);

  009c4	e59d301c	 ldr         r3, [sp, #0x1C]
  009c8	e283100c	 add         r1, r3, #0xC
  009cc	e59d301c	 ldr         r3, [sp, #0x1C]
  009d0	e5932000	 ldr         r2, [r3]
  009d4	e3a03004	 mov         r3, #4
  009d8	e0030392	 mul         r3, r2, r3
  009dc	e0813003	 add         r3, r1, r3
  009e0	e5933000	 ldr         r3, [r3]
  009e4	e3530000	 cmp         r3, #0
  009e8	1afffee2	 bne         |$LN26@ResumeTran|
  009ec		 |$LN24@ResumeTran|

; 337  : }

  009ec	e28dd014	 add         sp, sp, #0x14
  009f0	e89d6000	 ldmia       sp, {sp, lr}
  009f4	e12fff1e	 bx          lr
  009f8		 |$LN42@ResumeTran|
  009f8		 |$LN43@ResumeTran|
  009f8	00000000	 DCD         |gpPRCMRegs|
  009fc		 |$LN44@ResumeTran|
  009fc	00000000	 DCD         |??_C@_1DC@FKIPCFIC@?$AA?$CK?$AA?$CK?$AA?$CK?$AAE?$AAR?$AAR?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?9?$AAB?$AAU?$AAS?$AA?5?$AAA?$AAB?$AAO?$AAR?$AAT?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  00a00		 |$LN45@ResumeTran|
  00a00	00000000	 DCD         |gTimeOutTick|
  00a04		 |$LN46@ResumeTran|
  00a04	00000000	 DCD         |gpI2CRegs|
  00a08		 |$LN47@ResumeTran|
  00a08	00000000	 DCD         |gBytesLeft|
  00a0c		 |$LN48@ResumeTran|
  00a0c	00000000	 DCD         |gpData|
  00a10		 |$LN49@ResumeTran|
  00a10	00000000	 DCD         |gCurClockDivisor|
  00a14		 |$M45807|

			 ENDP  ; |ResumeTrans|


  00028			 AREA	 |.pdata|, PDATA
|$T45822| DCD	|$LN10@INTSOFF_I2|
	DCD	0x40005004
; Function compile flags: /Odtp

  00a14			 AREA	 |.text|, CODE, ARM

  00a14		 |INTSOFF_I2CTRANS_STARTOP| PROC

; 122  : {

  00a14		 |$LN10@INTSOFF_I2|
  00a14	e1a0c00d	 mov         r12, sp
  00a18	e92d0001	 stmdb       sp!, {r0}
  00a1c	e92d5000	 stmdb       sp!, {r12, lr}
  00a20	e24dd00c	 sub         sp, sp, #0xC
  00a24		 |$M45819|

; 123  :     DWORD regOut;
; 124  :     OMAP2420_I2C_REGS *pChkReg = (OMAP2420_I2C_REGS *)OALPAtoUA(OMAP2420_I2C1_REGS_PA);

  00a24	e3a01000	 mov         r1, #0
  00a28	e3a00312	 mov         r0, #0x12, 6
  00a2c	e3800807	 orr         r0, r0, #7, 16
  00a30	eb000000	 bl          OALPAtoVA
  00a34	e58d0008	 str         r0, [sp, #8]
  00a38	e59d3008	 ldr         r3, [sp, #8]
  00a3c	e58d3000	 str         r3, [sp]

; 125  : 
; 126  :     /* ensure enabled */
; 127  :     if (!(gpI2CRegs->I2C_CON & I2C_CON_EN))

  00a40	e59f30fc	 ldr         r3, [pc, #0xFC]
  00a44	e5933000	 ldr         r3, [r3]
  00a48	e2833024	 add         r3, r3, #0x24
  00a4c	e1d330b0	 ldrh        r3, [r3]
  00a50	e3130902	 tst         r3, #2, 18
  00a54	1a000010	 bne         |$LN5@INTSOFF_I2|

; 128  :     {
; 129  :         /* i2c is not enabled. reenable/reset.  must happen here */
; 130  :         gpI2CRegs->I2C_CON = I2C_CON_EN | I2C_CON_MST;

  00a58	e59f30e4	 ldr         r3, [pc, #0xE4]
  00a5c	e5933000	 ldr         r3, [r3]
  00a60	e2832024	 add         r2, r3, #0x24
  00a64	e3a03b21	 mov         r3, #0x21, 22
  00a68	e1c230b0	 strh        r3, [r2]
  00a6c		 |$LN4@INTSOFF_I2|

; 131  :         while (!(gpI2CRegs->I2C_SYSS & I2C_SYSS_RDONE));

  00a6c	e59f30d0	 ldr         r3, [pc, #0xD0]
  00a70	e5933000	 ldr         r3, [r3]
  00a74	e2833010	 add         r3, r3, #0x10
  00a78	e1d330b0	 ldrh        r3, [r3]
  00a7c	e3130001	 tst         r3, #1
  00a80	1a000000	 bne         |$LN3@INTSOFF_I2|
  00a84	eafffff8	 b           |$LN4@INTSOFF_I2|
  00a88		 |$LN3@INTSOFF_I2|

; 132  :         gpI2CRegs->I2C_STAT = 0x3F;

  00a88	e59f30b4	 ldr         r3, [pc, #0xB4]
  00a8c	e5933000	 ldr         r3, [r3]
  00a90	e2832008	 add         r2, r3, #8
  00a94	e3a0303f	 mov         r3, #0x3F
  00a98	e1c230b0	 strh        r3, [r2]
  00a9c		 |$LN5@INTSOFF_I2|

; 133  :     }
; 134  : 
; 135  :     /* set slave address */
; 136  :     gpI2CRegs->I2C_SA = (UINT16)gCurI2Caddr;

  00a9c	e59f30ac	 ldr         r3, [pc, #0xAC]
  00aa0	e5933000	 ldr         r3, [r3]
  00aa4	e1a02803	 mov         r2, r3, lsl #16
  00aa8	e1a02822	 mov         r2, r2, lsr #16
  00aac	e59f3090	 ldr         r3, [pc, #0x90]
  00ab0	e5933000	 ldr         r3, [r3]
  00ab4	e283302c	 add         r3, r3, #0x2C
  00ab8	e1c320b0	 strh        r2, [r3]

; 137  :     regOut = I2C_CON_EN | I2C_CON_MST | I2C_CON_STP | I2C_CON_STT;

  00abc	e3a03b21	 mov         r3, #0x21, 22
  00ac0	e3833003	 orr         r3, r3, #3
  00ac4	e58d3004	 str         r3, [sp, #4]

; 138  :     if (isWrite)

  00ac8	e59d3014	 ldr         r3, [sp, #0x14]
  00acc	e3530000	 cmp         r3, #0
  00ad0	0a000002	 beq         |$LN2@INTSOFF_I2|

; 139  :         regOut |= I2C_CON_TRX;

  00ad4	e59d3004	 ldr         r3, [sp, #4]
  00ad8	e3833c02	 orr         r3, r3, #2, 24
  00adc	e58d3004	 str         r3, [sp, #4]
  00ae0		 |$LN2@INTSOFF_I2|

; 140  :     if (gCurI2CaddrSize>7)

  00ae0	e59f3064	 ldr         r3, [pc, #0x64]
  00ae4	e5933000	 ldr         r3, [r3]
  00ae8	e3530007	 cmp         r3, #7
  00aec	9a000002	 bls         |$LN1@INTSOFF_I2|

; 141  :         regOut |= I2C_CON_XA;

  00af0	e59d3004	 ldr         r3, [sp, #4]
  00af4	e3833c01	 orr         r3, r3, #1, 24
  00af8	e58d3004	 str         r3, [sp, #4]
  00afc		 |$LN1@INTSOFF_I2|

; 142  : 
; 143  :     gpI2CRegs->I2C_CNT = (UINT16)gBytesLeft;

  00afc	e59f3044	 ldr         r3, [pc, #0x44]
  00b00	e5933000	 ldr         r3, [r3]
  00b04	e1a02803	 mov         r2, r3, lsl #16
  00b08	e1a02822	 mov         r2, r2, lsr #16
  00b0c	e59f3030	 ldr         r3, [pc, #0x30]
  00b10	e5933000	 ldr         r3, [r3]
  00b14	e2833018	 add         r3, r3, #0x18
  00b18	e1c320b0	 strh        r2, [r3]

; 144  :     gpI2CRegs->I2C_CON = (UINT16)regOut;

  00b1c	e59d3004	 ldr         r3, [sp, #4]
  00b20	e1a02803	 mov         r2, r3, lsl #16
  00b24	e1a02822	 mov         r2, r2, lsr #16
  00b28	e59f3014	 ldr         r3, [pc, #0x14]
  00b2c	e5933000	 ldr         r3, [r3]
  00b30	e2833024	 add         r3, r3, #0x24
  00b34	e1c320b0	 strh        r2, [r3]

; 145  : }

  00b38	e28dd00c	 add         sp, sp, #0xC
  00b3c	e89d6000	 ldmia       sp, {sp, lr}
  00b40	e12fff1e	 bx          lr
  00b44		 |$LN11@INTSOFF_I2|
  00b44		 |$LN12@INTSOFF_I2|
  00b44	00000000	 DCD         |gpI2CRegs|
  00b48		 |$LN13@INTSOFF_I2|
  00b48	00000000	 DCD         |gBytesLeft|
  00b4c		 |$LN14@INTSOFF_I2|
  00b4c	00000000	 DCD         |gCurI2CaddrSize|
  00b50		 |$LN15@INTSOFF_I2|
  00b50	00000000	 DCD         |gCurI2Caddr|
  00b54		 |$M45820|

			 ENDP  ; |INTSOFF_I2CTRANS_STARTOP|


  00030			 AREA	 |.pdata|, PDATA
|$T45832| DCD	|$LN10@INTSOFF_I2@2|
	DCD	0x40006b02
; Function compile flags: /Odtp

  00b54			 AREA	 |.text|, CODE, ARM

  00b54		 |INTSOFF_I2CTRANS_UPDATEREAD| PROC

; 148  : {

  00b54		 |$LN10@INTSOFF_I2@2|
  00b54	e52de004	 str         lr, [sp, #-4]!
  00b58	e24dd00c	 sub         sp, sp, #0xC
  00b5c		 |$M45829|

; 149  :     UINT16 stat;
; 150  :     OMAP2420_I2C_REGS *pChkReg = (OMAP2420_I2C_REGS *)OALPAtoUA(OMAP2420_I2C1_REGS_PA);

  00b5c	e3a01000	 mov         r1, #0
  00b60	e3a00312	 mov         r0, #0x12, 6
  00b64	e3800807	 orr         r0, r0, #7, 16
  00b68	eb000000	 bl          OALPAtoVA
  00b6c	e58d0008	 str         r0, [sp, #8]
  00b70	e59d3008	 ldr         r3, [sp, #8]
  00b74	e58d3000	 str         r3, [sp]

; 151  : 
; 152  :     stat = gpI2CRegs->I2C_STAT;

  00b78	e59f3174	 ldr         r3, [pc, #0x174]
  00b7c	e5933000	 ldr         r3, [r3]
  00b80	e2833008	 add         r3, r3, #8
  00b84	e1d330b0	 ldrh        r3, [r3]
  00b88	e1cd30b4	 strh        r3, [sp, #4]

; 153  :     if (!(stat & (I2C_STAT_NACK | I2C_STAT_AL | I2C_STAT_RRDY)))

  00b8c	e1dd30b4	 ldrh        r3, [sp, #4]
  00b90	e313000b	 tst         r3, #0xB
  00b94	1a000000	 bne         |$LN5@INTSOFF_I2@2|

; 154  :         return;

  00b98	ea000052	 b           |$LN6@INTSOFF_I2@2|
  00b9c		 |$LN5@INTSOFF_I2@2|

; 155  : 
; 156  :     /* clear status (except for receive ready) */
; 157  :     gpI2CRegs->I2C_STAT = (I2C_STAT_NACK | I2C_STAT_AL | I2C_STAT_XRDY);

  00b9c	e59f3150	 ldr         r3, [pc, #0x150]
  00ba0	e5933000	 ldr         r3, [r3]
  00ba4	e2832008	 add         r2, r3, #8
  00ba8	e3a03013	 mov         r3, #0x13
  00bac	e1c230b0	 strh        r3, [r2]

; 158  : 
; 159  :     if (stat & (I2C_STAT_NACK | I2C_STAT_AL))

  00bb0	e1dd30b4	 ldrh        r3, [sp, #4]
  00bb4	e3130003	 tst         r3, #3
  00bb8	0a00000f	 beq         |$LN4@INTSOFF_I2@2|

; 160  :     {
; 161  :         /* error.  if it's a nack we need to reset the controller */
; 162  :         if (stat & I2C_STAT_NACK)

  00bbc	e1dd30b4	 ldrh        r3, [sp, #4]
  00bc0	e3130002	 tst         r3, #2
  00bc4	0a000009	 beq         |$LN3@INTSOFF_I2@2|

; 163  :         {
; 164  :             gpI2CRegs->I2C_SYSC = (UINT16)I2C_SYSC_SRST;

  00bc8	e59f3124	 ldr         r3, [pc, #0x124]
  00bcc	e5933000	 ldr         r3, [r3]
  00bd0	e2832020	 add         r2, r3, #0x20
  00bd4	e3a03002	 mov         r3, #2
  00bd8	e1c230b0	 strh        r3, [r2]

; 165  :             gpI2CRegs->I2C_CON = 0;

  00bdc	e59f3110	 ldr         r3, [pc, #0x110]
  00be0	e5933000	 ldr         r3, [r3]
  00be4	e2832024	 add         r2, r3, #0x24
  00be8	e3a03000	 mov         r3, #0
  00bec	e1c230b0	 strh        r3, [r2]
  00bf0		 |$LN3@INTSOFF_I2@2|

; 166  :         }
; 167  : 
; 168  :         /* restart the operation with what is left */
; 169  :         INTSOFF_I2CTRANS_STARTOP(FALSE);

  00bf0	e3a00000	 mov         r0, #0
  00bf4	eb000000	 bl          INTSOFF_I2CTRANS_STARTOP

; 170  :         return;

  00bf8	ea00003a	 b           |$LN6@INTSOFF_I2@2|
  00bfc		 |$LN4@INTSOFF_I2@2|

; 171  :     }
; 172  : 
; 173  :     /* received character came in ok (stat & I2C_STAT_RRDY) */
; 174  :     if (gBytesLeft > 1)

  00bfc	e59f30f4	 ldr         r3, [pc, #0xF4]
  00c00	e5933000	 ldr         r3, [r3]
  00c04	e3530001	 cmp         r3, #1
  00c08	9a000021	 bls         |$LN2@INTSOFF_I2@2|

; 175  :     {
; 176  :         stat = gpI2CRegs->I2C_DATA;

  00c0c	e59f30e0	 ldr         r3, [pc, #0xE0]
  00c10	e5933000	 ldr         r3, [r3]
  00c14	e283301c	 add         r3, r3, #0x1C
  00c18	e1d330b0	 ldrh        r3, [r3]
  00c1c	e1cd30b4	 strh        r3, [sp, #4]

; 177  :         *(gpData++) = (UCHAR)(stat & 0xFF);

  00c20	e1dd30b4	 ldrh        r3, [sp, #4]
  00c24	e20330ff	 and         r3, r3, #0xFF
  00c28	e20320ff	 and         r2, r3, #0xFF
  00c2c	e59f30c8	 ldr         r3, [pc, #0xC8]
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e5c32000	 strb        r2, [r3]
  00c38	e59f30bc	 ldr         r3, [pc, #0xBC]
  00c3c	e5933000	 ldr         r3, [r3]
  00c40	e2832001	 add         r2, r3, #1
  00c44	e59f30b0	 ldr         r3, [pc, #0xB0]
  00c48	e5832000	 str         r2, [r3]

; 178  :         *(gpData++) = (UCHAR)((stat & 0xFF00)>>8);

  00c4c	e1dd30b4	 ldrh        r3, [sp, #4]
  00c50	e2033cff	 and         r3, r3, #0xFF, 24
  00c54	e1a03443	 mov         r3, r3, asr #8
  00c58	e20320ff	 and         r2, r3, #0xFF
  00c5c	e59f3098	 ldr         r3, [pc, #0x98]
  00c60	e5933000	 ldr         r3, [r3]
  00c64	e5c32000	 strb        r2, [r3]
  00c68	e59f308c	 ldr         r3, [pc, #0x8C]
  00c6c	e5933000	 ldr         r3, [r3]
  00c70	e2832001	 add         r2, r3, #1
  00c74	e59f3080	 ldr         r3, [pc, #0x80]
  00c78	e5832000	 str         r2, [r3]

; 179  :         gBytesLeft -= 2;

  00c7c	e59f3074	 ldr         r3, [pc, #0x74]
  00c80	e5933000	 ldr         r3, [r3]
  00c84	e2432002	 sub         r2, r3, #2
  00c88	e59f3068	 ldr         r3, [pc, #0x68]
  00c8c	e5832000	 str         r2, [r3]

; 180  :     }
; 181  :     else

  00c90	ea00000f	 b           |$LN1@INTSOFF_I2@2|
  00c94		 |$LN2@INTSOFF_I2@2|

; 182  :     {
; 183  :         *(gpData++) = (UCHAR)gpI2CRegs->I2C_DATA;

  00c94	e59f3058	 ldr         r3, [pc, #0x58]
  00c98	e5933000	 ldr         r3, [r3]
  00c9c	e283301c	 add         r3, r3, #0x1C
  00ca0	e1d330b0	 ldrh        r3, [r3]
  00ca4	e20320ff	 and         r2, r3, #0xFF
  00ca8	e59f304c	 ldr         r3, [pc, #0x4C]
  00cac	e5933000	 ldr         r3, [r3]
  00cb0	e5c32000	 strb        r2, [r3]
  00cb4	e59f3040	 ldr         r3, [pc, #0x40]
  00cb8	e5933000	 ldr         r3, [r3]
  00cbc	e2832001	 add         r2, r3, #1
  00cc0	e59f3034	 ldr         r3, [pc, #0x34]
  00cc4	e5832000	 str         r2, [r3]

; 184  :         gBytesLeft = 0;

  00cc8	e59f2028	 ldr         r2, [pc, #0x28]
  00ccc	e3a03000	 mov         r3, #0
  00cd0	e5823000	 str         r3, [r2]
  00cd4		 |$LN1@INTSOFF_I2@2|

; 185  :     }
; 186  : 
; 187  :     /* clear receive status so next char can come in */
; 188  :     gpI2CRegs->I2C_STAT = I2C_STAT_RRDY;

  00cd4	e59f3018	 ldr         r3, [pc, #0x18]
  00cd8	e5933000	 ldr         r3, [r3]
  00cdc	e2832008	 add         r2, r3, #8
  00ce0	e3a03008	 mov         r3, #8
  00ce4	e1c230b0	 strh        r3, [r2]
  00ce8		 |$LN6@INTSOFF_I2@2|

; 189  : }

  00ce8	e28dd00c	 add         sp, sp, #0xC
  00cec	e49de004	 ldr         lr, [sp], #4
  00cf0	e12fff1e	 bx          lr
  00cf4		 |$LN11@INTSOFF_I2@2|
  00cf4		 |$LN12@INTSOFF_I2@2|
  00cf4	00000000	 DCD         |gpI2CRegs|
  00cf8		 |$LN13@INTSOFF_I2@2|
  00cf8	00000000	 DCD         |gBytesLeft|
  00cfc		 |$LN14@INTSOFF_I2@2|
  00cfc	00000000	 DCD         |gpData|
  00d00		 |$M45830|

			 ENDP  ; |INTSOFF_I2CTRANS_UPDATEREAD|


  00038			 AREA	 |.pdata|, PDATA
|$T45841| DCD	|$LN10@INTSOFF_I2@3|
	DCD	0x40006a02
; Function compile flags: /Odtp

  00d00			 AREA	 |.text|, CODE, ARM

  00d00		 |INTSOFF_I2CTRANS_UPDATEWRITE| PROC

; 192  : {

  00d00		 |$LN10@INTSOFF_I2@3|
  00d00	e52de004	 str         lr, [sp, #-4]!
  00d04	e24dd00c	 sub         sp, sp, #0xC
  00d08		 |$M45838|

; 193  :     OMAP2420_I2C_REGS *pChkReg = (OMAP2420_I2C_REGS *)OALPAtoUA(OMAP2420_I2C1_REGS_PA);

  00d08	e3a01000	 mov         r1, #0
  00d0c	e3a00312	 mov         r0, #0x12, 6
  00d10	e3800807	 orr         r0, r0, #7, 16
  00d14	eb000000	 bl          OALPAtoVA
  00d18	e58d0008	 str         r0, [sp, #8]
  00d1c	e59d3008	 ldr         r3, [sp, #8]
  00d20	e58d3000	 str         r3, [sp]

; 194  :     UINT16 stat = gpI2CRegs->I2C_STAT;

  00d24	e59f3170	 ldr         r3, [pc, #0x170]
  00d28	e5933000	 ldr         r3, [r3]
  00d2c	e2833008	 add         r3, r3, #8
  00d30	e1d330b0	 ldrh        r3, [r3]
  00d34	e1cd30b4	 strh        r3, [sp, #4]

; 195  :     if (!(stat & (I2C_STAT_NACK | I2C_STAT_AL | I2C_STAT_XRDY)))

  00d38	e1dd30b4	 ldrh        r3, [sp, #4]
  00d3c	e3130013	 tst         r3, #0x13
  00d40	1a000000	 bne         |$LN5@INTSOFF_I2@3|

; 196  :         return;

  00d44	ea000051	 b           |$LN6@INTSOFF_I2@3|
  00d48		 |$LN5@INTSOFF_I2@3|

; 197  : 
; 198  :     /* clear status (except for transmit ready) */
; 199  :     gpI2CRegs->I2C_STAT = (I2C_STAT_NACK | I2C_STAT_AL | I2C_STAT_RRDY);

  00d48	e59f314c	 ldr         r3, [pc, #0x14C]
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e2832008	 add         r2, r3, #8
  00d54	e3a0300b	 mov         r3, #0xB
  00d58	e1c230b0	 strh        r3, [r2]

; 200  : 
; 201  :     if (stat & (I2C_STAT_NACK | I2C_STAT_AL))

  00d5c	e1dd30b4	 ldrh        r3, [sp, #4]
  00d60	e3130003	 tst         r3, #3
  00d64	0a00000f	 beq         |$LN4@INTSOFF_I2@3|

; 202  :     {
; 203  :         /* error.  if it's a nack we need to reset the controller */
; 204  :         if (stat & I2C_STAT_NACK)

  00d68	e1dd30b4	 ldrh        r3, [sp, #4]
  00d6c	e3130002	 tst         r3, #2
  00d70	0a000009	 beq         |$LN3@INTSOFF_I2@3|

; 205  :         {
; 206  :             gpI2CRegs->I2C_SYSC = I2C_SYSC_SRST;

  00d74	e59f3120	 ldr         r3, [pc, #0x120]
  00d78	e5933000	 ldr         r3, [r3]
  00d7c	e2832020	 add         r2, r3, #0x20
  00d80	e3a03002	 mov         r3, #2
  00d84	e1c230b0	 strh        r3, [r2]

; 207  :             gpI2CRegs->I2C_CON = 0;

  00d88	e59f310c	 ldr         r3, [pc, #0x10C]
  00d8c	e5933000	 ldr         r3, [r3]
  00d90	e2832024	 add         r2, r3, #0x24
  00d94	e3a03000	 mov         r3, #0
  00d98	e1c230b0	 strh        r3, [r2]
  00d9c		 |$LN3@INTSOFF_I2@3|

; 208  :         }
; 209  : 
; 210  :         /* restart the operation with what is left */
; 211  :         INTSOFF_I2CTRANS_STARTOP(FALSE);

  00d9c	e3a00000	 mov         r0, #0
  00da0	eb000000	 bl          INTSOFF_I2CTRANS_STARTOP

; 212  :         return;

  00da4	ea000039	 b           |$LN6@INTSOFF_I2@3|
  00da8		 |$LN4@INTSOFF_I2@3|

; 213  :     }
; 214  : 
; 215  :     /* ready for transmit. load register then issue xmit */
; 216  :     if (gBytesLeft > 1)

  00da8	e59f30f0	 ldr         r3, [pc, #0xF0]
  00dac	e5933000	 ldr         r3, [r3]
  00db0	e3530001	 cmp         r3, #1
  00db4	9a000021	 bls         |$LN2@INTSOFF_I2@3|

; 217  :     {
; 218  :         stat = (USHORT)(*(gpData++));

  00db8	e59f30e4	 ldr         r3, [pc, #0xE4]
  00dbc	e5933000	 ldr         r3, [r3]
  00dc0	e5d33000	 ldrb        r3, [r3]
  00dc4	e1cd30b4	 strh        r3, [sp, #4]
  00dc8	e59f30d4	 ldr         r3, [pc, #0xD4]
  00dcc	e5933000	 ldr         r3, [r3]
  00dd0	e2832001	 add         r2, r3, #1
  00dd4	e59f30c8	 ldr         r3, [pc, #0xC8]
  00dd8	e5832000	 str         r2, [r3]

; 219  :         stat |= ((USHORT)(*(gpData++)))<<8;

  00ddc	e59f30c0	 ldr         r3, [pc, #0xC0]
  00de0	e5933000	 ldr         r3, [r3]
  00de4	e5d33000	 ldrb        r3, [r3]
  00de8	e1a02403	 mov         r2, r3, lsl #8
  00dec	e1dd30b4	 ldrh        r3, [sp, #4]
  00df0	e1833002	 orr         r3, r3, r2
  00df4	e1a03803	 mov         r3, r3, lsl #16
  00df8	e1a03823	 mov         r3, r3, lsr #16
  00dfc	e1cd30b4	 strh        r3, [sp, #4]
  00e00	e59f309c	 ldr         r3, [pc, #0x9C]
  00e04	e5933000	 ldr         r3, [r3]
  00e08	e2832001	 add         r2, r3, #1
  00e0c	e59f3090	 ldr         r3, [pc, #0x90]
  00e10	e5832000	 str         r2, [r3]

; 220  :         gpI2CRegs->I2C_DATA = stat;

  00e14	e59f3080	 ldr         r3, [pc, #0x80]
  00e18	e5933000	 ldr         r3, [r3]
  00e1c	e283201c	 add         r2, r3, #0x1C
  00e20	e1dd30b4	 ldrh        r3, [sp, #4]
  00e24	e1c230b0	 strh        r3, [r2]

; 221  :         gBytesLeft -= 2;

  00e28	e59f3070	 ldr         r3, [pc, #0x70]
  00e2c	e5933000	 ldr         r3, [r3]
  00e30	e2432002	 sub         r2, r3, #2
  00e34	e59f3064	 ldr         r3, [pc, #0x64]
  00e38	e5832000	 str         r2, [r3]

; 222  :     }
; 223  :     else

  00e3c	ea00000e	 b           |$LN1@INTSOFF_I2@3|
  00e40		 |$LN2@INTSOFF_I2@3|

; 224  :     {
; 225  :         gpI2CRegs->I2C_DATA = *(gpData++);

  00e40	e59f3054	 ldr         r3, [pc, #0x54]
  00e44	e5933000	 ldr         r3, [r3]
  00e48	e283201c	 add         r2, r3, #0x1C
  00e4c	e59f3050	 ldr         r3, [pc, #0x50]
  00e50	e5933000	 ldr         r3, [r3]
  00e54	e5d33000	 ldrb        r3, [r3]
  00e58	e1c230b0	 strh        r3, [r2]
  00e5c	e59f3040	 ldr         r3, [pc, #0x40]
  00e60	e5933000	 ldr         r3, [r3]
  00e64	e2832001	 add         r2, r3, #1
  00e68	e59f3034	 ldr         r3, [pc, #0x34]
  00e6c	e5832000	 str         r2, [r3]

; 226  :         gBytesLeft = 0;

  00e70	e59f2028	 ldr         r2, [pc, #0x28]
  00e74	e3a03000	 mov         r3, #0
  00e78	e5823000	 str         r3, [r2]
  00e7c		 |$LN1@INTSOFF_I2@3|

; 227  :     }
; 228  : 
; 229  :     /* clear transmit status so next char can go out */
; 230  :     gpI2CRegs->I2C_STAT = I2C_STAT_XRDY;

  00e7c	e59f3018	 ldr         r3, [pc, #0x18]
  00e80	e5933000	 ldr         r3, [r3]
  00e84	e2832008	 add         r2, r3, #8
  00e88	e3a03010	 mov         r3, #0x10
  00e8c	e1c230b0	 strh        r3, [r2]
  00e90		 |$LN6@INTSOFF_I2@3|

; 231  : }

  00e90	e28dd00c	 add         sp, sp, #0xC
  00e94	e49de004	 ldr         lr, [sp], #4
  00e98	e12fff1e	 bx          lr
  00e9c		 |$LN11@INTSOFF_I2@3|
  00e9c		 |$LN12@INTSOFF_I2@3|
  00e9c	00000000	 DCD         |gpI2CRegs|
  00ea0		 |$LN13@INTSOFF_I2@3|
  00ea0	00000000	 DCD         |gBytesLeft|
  00ea4		 |$LN14@INTSOFF_I2@3|
  00ea4	00000000	 DCD         |gpData|
  00ea8		 |$M45839|

			 ENDP  ; |INTSOFF_I2CTRANS_UPDATEWRITE|

	EXPORT	|KERNELI2C_PreemptibleSubmit|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|

  00040			 AREA	 |.pdata|, PDATA
|$T45850| DCD	|$LN5@KERNELI2C_@4|
	DCD	0x40000f03
; Function compile flags: /Odtp

  00ea8			 AREA	 |.text|, CODE, ARM

  00ea8		 |KERNELI2C_PreemptibleSubmit| PROC

; 399  : {

  00ea8		 |$LN5@KERNELI2C_@4|
  00ea8	e1a0c00d	 mov         r12, sp
  00eac	e92d0007	 stmdb       sp!, {r0 - r2}
  00eb0	e92d5000	 stmdb       sp!, {r12, lr}
  00eb4		 |$M45847|

; 400  :     /* this is for KERNEL calls that need to use I2C while they are preemptible */
; 401  :     /* DRIVERS should use the I2C driver to make calls */
; 402  : #ifndef BOOTLOADER
; 403  :     EnterCriticalSection(&gSec);

  00eb4	e59f0024	 ldr         r0, [pc, #0x24]
  00eb8	eb000000	 bl          EnterCriticalSection

; 404  : #endif
; 405  :     KERNELI2C_NonPreemptibleSubmit(FALSE, i2cAddr, addrSize, pTrans);

  00ebc	e59d3010	 ldr         r3, [sp, #0x10]
  00ec0	e59d200c	 ldr         r2, [sp, #0xC]
  00ec4	e59d1008	 ldr         r1, [sp, #8]
  00ec8	e3a00000	 mov         r0, #0
  00ecc	eb000000	 bl          KERNELI2C_NonPreemptibleSubmit

; 406  : #ifndef BOOTLOADER
; 407  :     LeaveCriticalSection(&gSec);

  00ed0	e59f0008	 ldr         r0, [pc, #8]
  00ed4	eb000000	 bl          LeaveCriticalSection

; 408  : #endif
; 409  : }

  00ed8	e89d6000	 ldmia       sp, {sp, lr}
  00edc	e12fff1e	 bx          lr
  00ee0		 |$LN6@KERNELI2C_@4|
  00ee0		 |$LN7@KERNELI2C_@4|
  00ee0	00000000	 DCD         |gSec|
  00ee4		 |$M45848|

			 ENDP  ; |KERNELI2C_PreemptibleSubmit|

	END
