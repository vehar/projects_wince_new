; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\DMA\PUBLIC\dma.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|ghDrv| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|ghDrv|	%	0x4
	EXPORT	|??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LeaveCriticalSection|
	IMPORT	|CreateFileW|
	IMPORT	|EnterCriticalSection|

  00004			 AREA	 |.bss|, NOINIT
|sgUseSec| %	0x14
|sgUseSec| %	0x14
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\public\dma.c

  00000			 AREA	 |.pdata|, PDATA
|$T39281| DCD	|$LN9@CheckDrive|
	DCD	0x40002002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@| DCB "D", 0x0, "M", 0x0
	DCB	"A", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CheckDriver| PROC

; 22   : {

  00000		 |$LN9@CheckDrive|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M39278|

; 23   :     HANDLE ret;
; 24   :     EnterCriticalSection(&sgUseSec);

  00008	e59f406c	 ldr         r4, [pc, #0x6C]
  0000c	e1a00004	 mov         r0, r4
  00010	eb000000	 bl          EnterCriticalSection

; 25   :     if (ghDrv==NULL)

  00014	e5943014	 ldr         r3, [r4, #0x14]
  00018	e3530000	 cmp         r3, #0
  0001c	1a00000c	 bne         |$LN1@CheckDrive|

; 26   :     {
; 27   :         ret = CreateFile(TEXT("DMA1:"),
; 28   :                          GENERIC_READ | GENERIC_WRITE,
; 29   :                          FILE_SHARE_READ | FILE_SHARE_WRITE,
; 30   :                          NULL,
; 31   :                          OPEN_EXISTING,
; 32   :                          FILE_ATTRIBUTE_NORMAL,
; 33   :                          NULL);

  00020	e59f0050	 ldr         r0, [pc, #0x50]
  00024	e3a0e000	 mov         lr, #0
  00028	e3a05080	 mov         r5, #0x80
  0002c	e3a06003	 mov         r6, #3
  00030	e3a03000	 mov         r3, #0
  00034	e3a02003	 mov         r2, #3
  00038	e3a01103	 mov         r1, #3, 2
  0003c	e58de008	 str         lr, [sp, #8]
  00040	e58d5004	 str         r5, [sp, #4]
  00044	e58d6000	 str         r6, [sp]
  00048	eb000000	 bl          CreateFileW

; 34   :         if (ret!=INVALID_HANDLE_VALUE)

  0004c	e3700001	 cmn         r0, #1

; 35   :         {
; 36   :             ghDrv = ret;

  00050	15840014	 strne       r0, [r4, #0x14]
  00054		 |$LN1@CheckDrive|

; 37   :         }
; 38   :     }
; 39   :     LeaveCriticalSection(&sgUseSec);

  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          LeaveCriticalSection

; 40   :     return (ghDrv!=NULL)?TRUE:FALSE;

  0005c	e5943014	 ldr         r3, [r4, #0x14]
  00060	e3530000	 cmp         r3, #0
  00064	13a00001	 movne       r0, #1
  00068	03a00000	 moveq       r0, #0

; 41   : }

  0006c	e28dd00c	 add         sp, sp, #0xC
  00070	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN10@CheckDrive|
  00078		 |$LN11@CheckDrive|
  00078	00000000	 DCD         |??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@|
  0007c		 |$LN12@CheckDrive|
  0007c	00000000	 DCD         |sgUseSec|
  00080		 |$M39279|

			 ENDP  ; |CheckDriver|

	IMPORT	|CloseHandle|

  00000			 AREA	 |.pdata|, PDATA
|$T39291| DCD	|$LN6@ShutDown|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ShutDown| PROC

; 44   : {

  00000		 |$LN6@ShutDown|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39288|

; 45   :     EnterCriticalSection(&sgUseSec);

  00004	e59f402c	 ldr         r4, [pc, #0x2C]
  00008	e1a00004	 mov         r0, r4
  0000c	eb000000	 bl          EnterCriticalSection

; 46   :     if (ghDrv!=NULL)

  00010	e5940014	 ldr         r0, [r4, #0x14]
  00014	e3500000	 cmp         r0, #0
  00018	0a000002	 beq         |$LN1@ShutDown|

; 47   :     {
; 48   :         CloseHandle(ghDrv);

  0001c	eb000000	 bl          CloseHandle

; 49   :         ghDrv = NULL;

  00020	e3a03000	 mov         r3, #0
  00024	e5843014	 str         r3, [r4, #0x14]
  00028		 |$LN1@ShutDown|

; 50   :     }
; 51   :     LeaveCriticalSection(&sgUseSec);

  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          LeaveCriticalSection

; 52   : }

  00030	e8bd4010	 ldmia       sp!, {r4, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$LN7@ShutDown|
  00038		 |$LN8@ShutDown|
  00038	00000000	 DCD         |sgUseSec|
  0003c		 |$M39289|

			 ENDP  ; |ShutDown|

	EXPORT	|DMA_ControllerEnum|
	IMPORT	|DeviceIoControl|
	IMPORT	|IsBadWritePtr|

  00000			 AREA	 |.pdata|, PDATA
|$T39311| DCD	|$LN16@DMA_Contro|
	DCD	0x40004802
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DMA_ControllerEnum| PROC

; 55   : {

  00000		 |$LN16@DMA_Contro|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M39308|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 56   :     DWORD enumBytes;
; 57   :     DWORD retBytes;
; 58   :     BOOL ioRet;
; 59   : 
; 60   :     if (!CheckDriver())

  00010	eb000000	 bl          CheckDriver
  00014	e3500000	 cmp         r0, #0
  00018	1a000002	 bne         |$LN6@DMA_Contro|
  0001c		 |$LN12@DMA_Contro|
  0001c	e3a0311a	 mov         r3, #0x1A, 2

; 61   :         return DMAERR_NODRIVER;

  00020	e3830847	 orr         r0, r3, #0x47, 16
  00024	ea000039	 b           |$LN7@DMA_Contro|
  00028		 |$LN6@DMA_Contro|

; 62   : 
; 63   :     if (IsBadWritePtr(apSizeBytes,sizeof(uint)))

  00028	e3a01004	 mov         r1, #4
  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          IsBadWritePtr
  00034	e3500000	 cmp         r0, #0
  00038	0a000002	 beq         |$LN5@DMA_Contro|
  0003c		 |$LN13@DMA_Contro|
  0003c	e3a0311e	 mov         r3, #0x1E, 2
  00040	e3830847	 orr         r0, r3, #0x47, 16
  00044	ea000031	 b           |$LN7@DMA_Contro|
  00048		 |$LN5@DMA_Contro|

; 64   :         return DMAERR_BADPOINTER;
; 65   : 
; 66   :     enumBytes = 0;
; 67   :     retBytes = 0;
; 68   :     ioRet = DeviceIoControl(ghDrv,
; 69   :                             DMA_IOCTL_ENUM_GETSIZE,
; 70   :                             NULL,
; 71   :                             0,
; 72   :                             (LPVOID)&enumBytes,
; 73   :                             sizeof(DWORD),
; 74   :                             &retBytes,
; 75   :                             NULL);

  00048	e59f70cc	 ldr         r7, [pc, #0xCC]
  0004c	e3a09000	 mov         r9, #0
  00050	e3a0a000	 mov         r10, #0
  00054	e5970000	 ldr         r0, [r7]
  00058	e28de014	 add         lr, sp, #0x14
  0005c	e3a08004	 mov         r8, #4
  00060	e28d4010	 add         r4, sp, #0x10
  00064	e3a0b000	 mov         r11, #0
  00068	e3a03000	 mov         r3, #0
  0006c	e3a02000	 mov         r2, #0
  00070	e3a01001	 mov         r1, #1
  00074	e58d9010	 str         r9, [sp, #0x10]
  00078	e58da014	 str         r10, [sp, #0x14]
  0007c	e58db00c	 str         r11, [sp, #0xC]
  00080	e58de008	 str         lr, [sp, #8]
  00084	e58d8004	 str         r8, [sp, #4]
  00088	e58d4000	 str         r4, [sp]
  0008c	eb000000	 bl          DeviceIoControl
  00090	e3500000	 cmp         r0, #0

; 76   : 
; 77   :     if (!ioRet)
; 78   :         return DMAERR_NODRIVER;

  00094	0affffe0	 beq         |$LN12@DMA_Contro|

; 79   : 
; 80   :     /* enumBytes holds required size of enum now */
; 81   :     ioRet = (*apSizeBytes<enumBytes);

  00098	e5953000	 ldr         r3, [r5]
  0009c	e59d1010	 ldr         r1, [sp, #0x10]
  000a0	e1530001	 cmp         r3, r1
  000a4	33a03001	 movcc       r3, #1
  000a8	23a03000	 movcs       r3, #0

; 82   :     *apSizeBytes = enumBytes;
; 83   :     if (ioRet)

  000ac	e3530000	 cmp         r3, #0
  000b0	13a03106	 movne       r3, #6, 2
  000b4	13830847	 orrne       r0, r3, #0x47, 16
  000b8	e5851000	 str         r1, [r5]
  000bc	1a000013	 bne         |$LN7@DMA_Contro|

; 84   :         return DMAERR_NOTENOUGHSPACE;
; 85   : 
; 86   :     /* there is enough room in the target to hold the data */
; 87   :     if (IsBadWritePtr(apRetArray,enumBytes))

  000c0	e1a00006	 mov         r0, r6
  000c4	eb000000	 bl          IsBadWritePtr
  000c8	e3500000	 cmp         r0, #0

; 88   :         return DMAERR_BADPOINTER;

  000cc	1affffda	 bne         |$LN13@DMA_Contro|

; 89   : 
; 90   :     ioRet = DeviceIoControl(ghDrv,
; 91   :                             DMA_IOCTL_ENUM_GETDATA,
; 92   :                             NULL,
; 93   :                             0,
; 94   :                             (LPVOID)apRetArray,
; 95   :                             enumBytes,
; 96   :                             &enumBytes,
; 97   :                             NULL);

  000d0	e59d3010	 ldr         r3, [sp, #0x10]
  000d4	e5970000	 ldr         r0, [r7]
  000d8	e28de010	 add         lr, sp, #0x10
  000dc	e58d3004	 str         r3, [sp, #4]
  000e0	e3a03000	 mov         r3, #0
  000e4	e3a02000	 mov         r2, #0
  000e8	e3a01002	 mov         r1, #2
  000ec	e58db00c	 str         r11, [sp, #0xC]
  000f0	e58de008	 str         lr, [sp, #8]
  000f4	e58d6000	 str         r6, [sp]
  000f8	eb000000	 bl          DeviceIoControl
  000fc	e3500000	 cmp         r0, #0

; 98   :     if (!ioRet)
; 99   :         return DMAERR_NODRIVER;

  00100	0affffc5	 beq         |$LN12@DMA_Contro|

; 100  : 
; 101  :     /* enumeration came back ok */
; 102  :     *apSizeBytes = enumBytes;

  00104	e59d3010	 ldr         r3, [sp, #0x10]

; 103  :     return 0;

  00108	e3a00000	 mov         r0, #0
  0010c	e5853000	 str         r3, [r5]
  00110		 |$LN7@DMA_Contro|

; 104  : }

  00110	e28dd018	 add         sp, sp, #0x18
  00114	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN17@DMA_Contro|
  0011c		 |$LN18@DMA_Contro|
  0011c	00000000	 DCD         |ghDrv|
  00120		 |$M39309|

			 ENDP  ; |DMA_ControllerEnum|

	EXPORT	|DMA_ControllerOpen|

  00000			 AREA	 |.pdata|, PDATA
|$T39327| DCD	|$LN11@DMA_Contro@2|
	DCD	0x40003202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DMA_ControllerOpen| PROC

; 107  : {

  00000		 |$LN11@DMA_Contro@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M39324|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 108  :     DMAIOCTL inIoctl,outIoctl;
; 109  :     DWORD retBytes;
; 110  :     BOOL ioRet;
; 111  : 
; 112  :     if (!CheckDriver())

  00010	eb000000	 bl          CheckDriver
  00014	e3500000	 cmp         r0, #0
  00018	1a000002	 bne         |$LN4@DMA_Contro@2|
  0001c		 |$LN8@DMA_Contro@2|
  0001c	e3a0311a	 mov         r3, #0x1A, 2

; 113  :         return DMAERR_NODRIVER;

  00020	e3830847	 orr         r0, r3, #0x47, 16
  00024	ea000023	 b           |$LN5@DMA_Contro@2|
  00028		 |$LN4@DMA_Contro@2|

; 114  : 
; 115  :     /* check arguments */
; 116  :     if (IsBadWritePtr(apRetHandle,sizeof(HANDLE)))

  00028	e3a01004	 mov         r1, #4
  0002c	e1a00005	 mov         r0, r5
  00030	eb000000	 bl          IsBadWritePtr
  00034	e3500000	 cmp         r0, #0
  00038	13a0311e	 movne       r3, #0x1E, 2
  0003c	13830847	 orrne       r0, r3, #0x47, 16
  00040	1a00001c	 bne         |$LN5@DMA_Contro@2|

; 117  :         return DMAERR_BADPOINTER;
; 118  : 
; 119  :     inIoctl.mParam[0] = (uint)aSysId;
; 120  :     inIoctl.mParam[1] = 0;
; 121  :     inIoctl.mParam[2] = 0;
; 122  :     inIoctl.mParam[3] = 0;
; 123  : 
; 124  :     ioRet = DeviceIoControl(ghDrv,
; 125  :                             DMA_IOCTL_OPEN,
; 126  :                             (LPVOID)&inIoctl,
; 127  :                             sizeof(inIoctl),
; 128  :                             (LPVOID)&outIoctl,
; 129  :                             sizeof(outIoctl),
; 130  :                             &retBytes,
; 131  :                             NULL);

  00044	e59f3078	 ldr         r3, [pc, #0x78]
  00048	e3a09000	 mov         r9, #0
  0004c	e3a0a000	 mov         r10, #0
  00050	e5930000	 ldr         r0, [r3]
  00054	e3a07000	 mov         r7, #0
  00058	e28de010	 add         lr, sp, #0x10
  0005c	e3a08010	 mov         r8, #0x10
  00060	e28d4024	 add         r4, sp, #0x24
  00064	e3a0b000	 mov         r11, #0
  00068	e3a03010	 mov         r3, #0x10
  0006c	e28d2014	 add         r2, sp, #0x14
  00070	e3a01003	 mov         r1, #3
  00074	e58d6014	 str         r6, [sp, #0x14]
  00078	e58d9018	 str         r9, [sp, #0x18]
  0007c	e58da01c	 str         r10, [sp, #0x1C]
  00080	e58d7020	 str         r7, [sp, #0x20]
  00084	e58db00c	 str         r11, [sp, #0xC]
  00088	e58de008	 str         lr, [sp, #8]
  0008c	e58d8004	 str         r8, [sp, #4]
  00090	e58d4000	 str         r4, [sp]
  00094	eb000000	 bl          DeviceIoControl
  00098	e3500000	 cmp         r0, #0

; 132  :     if (!ioRet)
; 133  :         return DMAERR_NODRIVER;

  0009c	0affffde	 beq         |$LN8@DMA_Contro@2|

; 134  : 
; 135  :     if (outIoctl.mParam[3])

  000a0	e59d0030	 ldr         r0, [sp, #0x30]
  000a4	e3500000	 cmp         r0, #0

; 136  :     {
; 137  :         /* driver is returning error code */
; 138  :         *apRetHandle = NULL;
; 139  :         return outIoctl.mParam[3];
; 140  :     }
; 141  : 
; 142  :     /* driver opened controller ok. */
; 143  :     *apRetHandle = (HANDLE)outIoctl.mParam[0];

  000a8	059d3024	 ldreq       r3, [sp, #0x24]
  000ac	1585b000	 strne       r11, [r5]

; 144  :     return 0;

  000b0	03a00000	 moveq       r0, #0
  000b4	05853000	 streq       r3, [r5]
  000b8		 |$LN5@DMA_Contro@2|

; 145  : }

  000b8	e28dd034	 add         sp, sp, #0x34
  000bc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$LN12@DMA_Contro@2|
  000c4		 |$LN13@DMA_Contro@2|
  000c4	00000000	 DCD         |ghDrv|
  000c8		 |$M39325|

			 ENDP  ; |DMA_ControllerOpen|

	EXPORT	|DMA_ControllerAcquireChannels|

  00000			 AREA	 |.pdata|, PDATA
|$T39344| DCD	|$LN13@DMA_Contro@3|
	DCD	0x40003a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DMA_ControllerAcquireChannels| PROC

; 148  : {

  00000		 |$LN13@DMA_Contro@3|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M39341|
  00008	e1a06002	 mov         r6, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a08000	 mov         r8, r0

; 149  :     DMAIOCTL inIoctl,outIoctl;
; 150  :     DWORD retBytes;
; 151  :     BOOL ioRet;
; 152  : 
; 153  :     if (!CheckDriver())

  00014	eb000000	 bl          CheckDriver
  00018	e3500000	 cmp         r0, #0
  0001c	1a000002	 bne         |$LN6@DMA_Contro@3|
  00020		 |$LN10@DMA_Contro@3|
  00020	e3a0311a	 mov         r3, #0x1A, 2

; 154  :         return DMAERR_NODRIVER;

  00024	e3830847	 orr         r0, r3, #0x47, 16
  00028	ea00002a	 b           |$LN7@DMA_Contro@3|
  0002c		 |$LN6@DMA_Contro@3|

; 155  : 
; 156  :     /* check arguments */
; 157  :     if (!aController)

  0002c	e3580000	 cmp         r8, #0
  00030	03a0310a	 moveq       r3, #0xA, 2
  00034	03830847	 orreq       r0, r3, #0x47, 16
  00038	0a000026	 beq         |$LN7@DMA_Contro@3|

; 158  :         return DMAERR_CONTROLLERNOTFOUND;
; 159  :     if (IsBadWritePtr(apChanIO,sizeof(uint)))

  0003c	e3a01004	 mov         r1, #4
  00040	e1a00006	 mov         r0, r6
  00044	eb000000	 bl          IsBadWritePtr
  00048	e3500000	 cmp         r0, #0
  0004c	13a0311e	 movne       r3, #0x1E, 2
  00050	13830847	 orrne       r0, r3, #0x47, 16
  00054	1a00001f	 bne         |$LN7@DMA_Contro@3|

; 160  :         return DMAERR_BADPOINTER;
; 161  :     if (aNumChannels>32)

  00058	e3570020	 cmp         r7, #0x20
  0005c	83a03126	 movhi       r3, #0x26, 2
  00060	83830847	 orrhi       r0, r3, #0x47, 16
  00064	8a00001b	 bhi         |$LN7@DMA_Contro@3|

; 162  :         return DMAERR_BADNUMCHANNELS;
; 163  : 
; 164  :     inIoctl.mParam[0] = (uint)aController;
; 165  :     inIoctl.mParam[1] = aNumChannels;
; 166  :     inIoctl.mParam[2] = *apChanIO;
; 167  :     inIoctl.mParam[3] = 0;
; 168  : 
; 169  :     ioRet = DeviceIoControl(ghDrv,
; 170  :                             DMA_IOCTL_ACQ,
; 171  :                             (LPVOID)&inIoctl,
; 172  :                             sizeof(inIoctl),
; 173  :                             (LPVOID)&outIoctl,
; 174  :                             sizeof(outIoctl),
; 175  :                             &retBytes,
; 176  :                             NULL);

  00068	e59f3074	 ldr         r3, [pc, #0x74]
  0006c	e5965000	 ldr         r5, [r6]
  00070	e3a0a000	 mov         r10, #0
  00074	e5930000	 ldr         r0, [r3]
  00078	e28de010	 add         lr, sp, #0x10
  0007c	e3a09010	 mov         r9, #0x10
  00080	e28d4024	 add         r4, sp, #0x24
  00084	e3a0b000	 mov         r11, #0
  00088	e3a03010	 mov         r3, #0x10
  0008c	e28d2014	 add         r2, sp, #0x14
  00090	e3a01004	 mov         r1, #4
  00094	e58d8014	 str         r8, [sp, #0x14]
  00098	e58d7018	 str         r7, [sp, #0x18]
  0009c	e58d501c	 str         r5, [sp, #0x1C]
  000a0	e58da020	 str         r10, [sp, #0x20]
  000a4	e58db00c	 str         r11, [sp, #0xC]
  000a8	e58de008	 str         lr, [sp, #8]
  000ac	e58d9004	 str         r9, [sp, #4]
  000b0	e58d4000	 str         r4, [sp]
  000b4	eb000000	 bl          DeviceIoControl
  000b8	e3500000	 cmp         r0, #0

; 177  :     if (!ioRet)
; 178  :         return DMAERR_NODRIVER;

  000bc	0affffd7	 beq         |$LN10@DMA_Contro@3|

; 179  : 
; 180  :     if (outIoctl.mParam[3])

  000c0	e59d0030	 ldr         r0, [sp, #0x30]
  000c4	e3500000	 cmp         r0, #0

; 181  :     {
; 182  :         /* driver is returning error code */
; 183  :         *apChanIO = 0;
; 184  :         return outIoctl.mParam[3];
; 185  :     }
; 186  : 
; 187  :     /* driver acquired channels ok */
; 188  :     *apChanIO = outIoctl.mParam[2];

  000c8	059d302c	 ldreq       r3, [sp, #0x2C]
  000cc	1586b000	 strne       r11, [r6]

; 189  :     return 0;

  000d0	03a00000	 moveq       r0, #0
  000d4	05863000	 streq       r3, [r6]
  000d8		 |$LN7@DMA_Contro@3|

; 190  : }

  000d8	e28dd034	 add         sp, sp, #0x34
  000dc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN14@DMA_Contro@3|
  000e4		 |$LN15@DMA_Contro@3|
  000e4	00000000	 DCD         |ghDrv|
  000e8		 |$M39342|

			 ENDP  ; |DMA_ControllerAcquireChannels|

	EXPORT	|DMA_ControllerFreeChannels|

  00000			 AREA	 |.pdata|, PDATA
|$T39359| DCD	|$LN11@DMA_Contro@4|
	DCD	0x40002d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DMA_ControllerFreeChannels| PROC

; 193  : {

  00000		 |$LN11@DMA_Contro@4|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M39356|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 194  :     DMAIOCTL inIoctl,outIoctl;
; 195  :     DWORD retBytes;
; 196  :     BOOL ioRet;
; 197  : 
; 198  :     if (!CheckDriver())

  00010	eb000000	 bl          CheckDriver
  00014	e3500000	 cmp         r0, #0
  00018	1a000002	 bne         |$LN4@DMA_Contro@4|
  0001c		 |$LN8@DMA_Contro@4|
  0001c	e3a0311a	 mov         r3, #0x1A, 2

; 199  :         return DMAERR_NODRIVER;

  00020	e3830847	 orr         r0, r3, #0x47, 16
  00024	ea00001e	 b           |$LN5@DMA_Contro@4|
  00028		 |$LN4@DMA_Contro@4|

; 200  : 
; 201  :     /* check arguments */
; 202  :     if (!aController)

  00028	e3560000	 cmp         r6, #0
  0002c	03a0310a	 moveq       r3, #0xA, 2
  00030	03830847	 orreq       r0, r3, #0x47, 16
  00034	0a00001a	 beq         |$LN5@DMA_Contro@4|

; 203  :         return DMAERR_CONTROLLERNOTFOUND;
; 204  :     if (!aChanFreeMask)

  00038	e3550000	 cmp         r5, #0
  0003c	03a03122	 moveq       r3, #0x22, 2
  00040	03830847	 orreq       r0, r3, #0x47, 16
  00044	0a000016	 beq         |$LN5@DMA_Contro@4|

; 205  :         return DMAERR_BADCHANMASK;
; 206  : 
; 207  :     inIoctl.mParam[0] = (uint)aController;
; 208  :     inIoctl.mParam[1] = aChanFreeMask;
; 209  :     inIoctl.mParam[2] = 0;
; 210  :     inIoctl.mParam[3] = 0;
; 211  : 
; 212  :     ioRet = DeviceIoControl(ghDrv,
; 213  :                             DMA_IOCTL_FREE,
; 214  :                             (LPVOID)&inIoctl,
; 215  :                             sizeof(inIoctl),
; 216  :                             (LPVOID)&outIoctl,
; 217  :                             sizeof(outIoctl),
; 218  :                             &retBytes,
; 219  :                             NULL);

  00048	e59f3060	 ldr         r3, [pc, #0x60]
  0004c	e3a09000	 mov         r9, #0
  00050	e3a0a000	 mov         r10, #0
  00054	e5930000	 ldr         r0, [r3]
  00058	e3a07000	 mov         r7, #0
  0005c	e28de010	 add         lr, sp, #0x10
  00060	e3a08010	 mov         r8, #0x10
  00064	e28d4024	 add         r4, sp, #0x24
  00068	e3a03010	 mov         r3, #0x10
  0006c	e28d2014	 add         r2, sp, #0x14
  00070	e3a01005	 mov         r1, #5
  00074	e58d6014	 str         r6, [sp, #0x14]
  00078	e58d5018	 str         r5, [sp, #0x18]
  0007c	e58d901c	 str         r9, [sp, #0x1C]
  00080	e58da020	 str         r10, [sp, #0x20]
  00084	e58d700c	 str         r7, [sp, #0xC]
  00088	e58de008	 str         lr, [sp, #8]
  0008c	e58d8004	 str         r8, [sp, #4]
  00090	e58d4000	 str         r4, [sp]
  00094	eb000000	 bl          DeviceIoControl
  00098	e3500000	 cmp         r0, #0

; 220  :     if (!ioRet)
; 221  :         return DMAERR_NODRIVER;

  0009c	0affffde	 beq         |$LN8@DMA_Contro@4|

; 222  : 
; 223  :     return outIoctl.mParam[3];

  000a0	e59d0030	 ldr         r0, [sp, #0x30]
  000a4		 |$LN5@DMA_Contro@4|

; 224  : }

  000a4	e28dd034	 add         sp, sp, #0x34
  000a8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN12@DMA_Contro@4|
  000b0		 |$LN13@DMA_Contro@4|
  000b0	00000000	 DCD         |ghDrv|
  000b4		 |$M39357|

			 ENDP  ; |DMA_ControllerFreeChannels|

	EXPORT	|DMA_ControllerSet|

  00000			 AREA	 |.pdata|, PDATA
|$T39375| DCD	|$LN11@DMA_Contro@5|
	DCD	0x40002d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DMA_ControllerSet| PROC

; 227  : {

  00000		 |$LN11@DMA_Contro@5|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M39372|
  00008	e1a07002	 mov         r7, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a06000	 mov         r6, r0

; 228  :     DMAIOCTL inIoctl,outIoctl;
; 229  :     DWORD retBytes;
; 230  :     BOOL ioRet;
; 231  : 
; 232  :     if (!CheckDriver())

  00014	eb000000	 bl          CheckDriver
  00018	e3500000	 cmp         r0, #0
  0001c	1a000002	 bne         |$LN4@DMA_Contro@5|
  00020		 |$LN8@DMA_Contro@5|
  00020	e3a0311a	 mov         r3, #0x1A, 2

; 233  :         return DMAERR_NODRIVER;

  00024	e3830847	 orr         r0, r3, #0x47, 16
  00028	ea00001d	 b           |$LN5@DMA_Contro@5|
  0002c		 |$LN4@DMA_Contro@5|

; 234  : 
; 235  :     /* check arguments */
; 236  :     if (!aController)

  0002c	e3560000	 cmp         r6, #0
  00030	03a0310a	 moveq       r3, #0xA, 2
  00034	03830847	 orreq       r0, r3, #0x47, 16
  00038	0a000019	 beq         |$LN5@DMA_Contro@5|

; 237  :         return DMAERR_CONTROLLERNOTFOUND;
; 238  :     if (!(uint)aProp)

  0003c	e3550000	 cmp         r5, #0
  00040	03a0312a	 moveq       r3, #0x2A, 2
  00044	03830847	 orreq       r0, r3, #0x47, 16
  00048	0a000015	 beq         |$LN5@DMA_Contro@5|

; 239  :         return DMAERR_BADPROPERTY;
; 240  : 
; 241  :     inIoctl.mParam[0] = (uint)aController;
; 242  :     inIoctl.mParam[1] = (uint)aProp;
; 243  :     inIoctl.mParam[2] = aValue32;
; 244  :     inIoctl.mParam[3] = 0;
; 245  : 
; 246  :     ioRet = DeviceIoControl(ghDrv,
; 247  :                             DMA_IOCTL_SET,
; 248  :                             (LPVOID)&inIoctl,
; 249  :                             sizeof(inIoctl),
; 250  :                             (LPVOID)&outIoctl,
; 251  :                             sizeof(outIoctl),
; 252  :                             &retBytes,
; 253  :                             NULL);

  0004c	e59f305c	 ldr         r3, [pc, #0x5C]
  00050	e3a09000	 mov         r9, #0
  00054	e3a0a000	 mov         r10, #0
  00058	e5930000	 ldr         r0, [r3]
  0005c	e28de010	 add         lr, sp, #0x10
  00060	e3a08010	 mov         r8, #0x10
  00064	e28d4024	 add         r4, sp, #0x24
  00068	e3a03010	 mov         r3, #0x10
  0006c	e28d2014	 add         r2, sp, #0x14
  00070	e3a01006	 mov         r1, #6
  00074	e58d6014	 str         r6, [sp, #0x14]
  00078	e58d5018	 str         r5, [sp, #0x18]
  0007c	e58d701c	 str         r7, [sp, #0x1C]
  00080	e58d9020	 str         r9, [sp, #0x20]
  00084	e58da00c	 str         r10, [sp, #0xC]
  00088	e58de008	 str         lr, [sp, #8]
  0008c	e58d8004	 str         r8, [sp, #4]
  00090	e58d4000	 str         r4, [sp]
  00094	eb000000	 bl          DeviceIoControl
  00098	e3500000	 cmp         r0, #0

; 254  :     if (!ioRet)
; 255  :         return DMAERR_NODRIVER;

  0009c	0affffdf	 beq         |$LN8@DMA_Contro@5|

; 256  : 
; 257  :     return outIoctl.mParam[3];

  000a0	e59d0030	 ldr         r0, [sp, #0x30]
  000a4		 |$LN5@DMA_Contro@5|

; 258  : }

  000a4	e28dd034	 add         sp, sp, #0x34
  000a8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN12@DMA_Contro@5|
  000b0		 |$LN13@DMA_Contro@5|
  000b0	00000000	 DCD         |ghDrv|
  000b4		 |$M39373|

			 ENDP  ; |DMA_ControllerSet|

	EXPORT	|DMA_ControllerGet|

  00000			 AREA	 |.pdata|, PDATA
|$T39392| DCD	|$LN13@DMA_Contro@6|
	DCD	0x40003a02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DMA_ControllerGet| PROC

; 261  : {

  00000		 |$LN13@DMA_Contro@6|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M39389|
  00008	e1a05002	 mov         r5, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a07000	 mov         r7, r0

; 262  :     DMAIOCTL inIoctl,outIoctl;
; 263  :     DWORD retBytes;
; 264  :     BOOL ioRet;
; 265  : 
; 266  :     if (!CheckDriver())

  00014	eb000000	 bl          CheckDriver
  00018	e3500000	 cmp         r0, #0
  0001c	1a000002	 bne         |$LN6@DMA_Contro@6|
  00020		 |$LN10@DMA_Contro@6|
  00020	e3a0311a	 mov         r3, #0x1A, 2

; 267  :         return DMAERR_NODRIVER;

  00024	e3830847	 orr         r0, r3, #0x47, 16
  00028	ea00002a	 b           |$LN7@DMA_Contro@6|
  0002c		 |$LN6@DMA_Contro@6|

; 268  : 
; 269  :     /* check arguments */
; 270  :     if (!aController)

  0002c	e3570000	 cmp         r7, #0
  00030	03a0310a	 moveq       r3, #0xA, 2
  00034	03830847	 orreq       r0, r3, #0x47, 16
  00038	0a000026	 beq         |$LN7@DMA_Contro@6|

; 271  :         return DMAERR_CONTROLLERNOTFOUND;
; 272  :     if (!(uint)aProp)

  0003c	e3560000	 cmp         r6, #0
  00040	03a0312a	 moveq       r3, #0x2A, 2
  00044	03830847	 orreq       r0, r3, #0x47, 16
  00048	0a000022	 beq         |$LN7@DMA_Contro@6|

; 273  :         return DMAERR_BADPROPERTY;
; 274  :     if (IsBadWritePtr(apRetValue32,sizeof(uint)))

  0004c	e3a01004	 mov         r1, #4
  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          IsBadWritePtr
  00058	e3500000	 cmp         r0, #0
  0005c	13a0311e	 movne       r3, #0x1E, 2
  00060	13830847	 orrne       r0, r3, #0x47, 16
  00064	1a00001b	 bne         |$LN7@DMA_Contro@6|

; 275  :         return DMAERR_BADPOINTER;
; 276  : 
; 277  :     inIoctl.mParam[0] = (uint)aController;
; 278  :     inIoctl.mParam[1] = (uint)aProp;
; 279  :     inIoctl.mParam[2] = 0;
; 280  :     inIoctl.mParam[3] = 0;
; 281  : 
; 282  :     ioRet = DeviceIoControl(ghDrv,
; 283  :                             DMA_IOCTL_GET,
; 284  :                             (LPVOID)&inIoctl,
; 285  :                             sizeof(inIoctl),
; 286  :                             (LPVOID)&outIoctl,
; 287  :                             sizeof(outIoctl),
; 288  :                             &retBytes,
; 289  :                             NULL);

  00068	e59f3074	 ldr         r3, [pc, #0x74]
  0006c	e3a09000	 mov         r9, #0
  00070	e3a0a000	 mov         r10, #0
  00074	e5930000	 ldr         r0, [r3]
  00078	e28de010	 add         lr, sp, #0x10
  0007c	e3a08010	 mov         r8, #0x10
  00080	e28d4024	 add         r4, sp, #0x24
  00084	e3a0b000	 mov         r11, #0
  00088	e3a03010	 mov         r3, #0x10
  0008c	e28d2014	 add         r2, sp, #0x14
  00090	e3a01007	 mov         r1, #7
  00094	e58d7014	 str         r7, [sp, #0x14]
  00098	e58d6018	 str         r6, [sp, #0x18]
  0009c	e58d901c	 str         r9, [sp, #0x1C]
  000a0	e58da020	 str         r10, [sp, #0x20]
  000a4	e58db00c	 str         r11, [sp, #0xC]
  000a8	e58de008	 str         lr, [sp, #8]
  000ac	e58d8004	 str         r8, [sp, #4]
  000b0	e58d4000	 str         r4, [sp]
  000b4	eb000000	 bl          DeviceIoControl
  000b8	e3500000	 cmp         r0, #0

; 290  :     if (!ioRet)
; 291  :         return DMAERR_NODRIVER;

  000bc	0affffd7	 beq         |$LN10@DMA_Contro@6|

; 292  : 
; 293  :     if (outIoctl.mParam[3])

  000c0	e59d0030	 ldr         r0, [sp, #0x30]
  000c4	e3500000	 cmp         r0, #0

; 294  :     {
; 295  :         /* driver is returning error code */
; 296  :         *apRetValue32 = 0;
; 297  :         return outIoctl.mParam[3];
; 298  :     }
; 299  : 
; 300  :     /* driver retrieved property ok */
; 301  :     *apRetValue32 = outIoctl.mParam[2];

  000c8	059d302c	 ldreq       r3, [sp, #0x2C]
  000cc	1585b000	 strne       r11, [r5]

; 302  :     return 0;

  000d0	03a00000	 moveq       r0, #0
  000d4	05853000	 streq       r3, [r5]
  000d8		 |$LN7@DMA_Contro@6|

; 303  : }

  000d8	e28dd034	 add         sp, sp, #0x34
  000dc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN14@DMA_Contro@6|
  000e4		 |$LN15@DMA_Contro@6|
  000e4	00000000	 DCD         |ghDrv|
  000e8		 |$M39390|

			 ENDP  ; |DMA_ControllerGet|

	EXPORT	|DMA_ControllerClose|

  00000			 AREA	 |.pdata|, PDATA
|$T39406| DCD	|$LN10@DMA_Contro@7|
	DCD	0x40002902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DMA_ControllerClose| PROC

; 306  : {

  00000		 |$LN10@DMA_Contro@7|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M39403|
  00008	e1a05000	 mov         r5, r0

; 307  :     DMAIOCTL inIoctl,outIoctl;
; 308  :     DWORD retBytes;
; 309  :     BOOL ioRet;
; 310  : 
; 311  :     if (!CheckDriver())

  0000c	eb000000	 bl          CheckDriver
  00010	e3500000	 cmp         r0, #0
  00014	1a000002	 bne         |$LN3@DMA_Contro@7|
  00018		 |$LN7@DMA_Contro@7|
  00018	e3a0311a	 mov         r3, #0x1A, 2

; 312  :         return DMAERR_NODRIVER;

  0001c	e3830847	 orr         r0, r3, #0x47, 16
  00020	ea00001b	 b           |$LN4@DMA_Contro@7|
  00024		 |$LN3@DMA_Contro@7|

; 313  : 
; 314  :     /* check arguments */
; 315  :     if (!aController)

  00024	e3550000	 cmp         r5, #0
  00028	03a0310a	 moveq       r3, #0xA, 2
  0002c	03830847	 orreq       r0, r3, #0x47, 16
  00030	0a000017	 beq         |$LN4@DMA_Contro@7|

; 316  :         return DMAERR_CONTROLLERNOTFOUND;
; 317  : 
; 318  :     inIoctl.mParam[0] = (uint)aController;
; 319  :     inIoctl.mParam[1] = 0;
; 320  :     inIoctl.mParam[2] = 0;
; 321  :     inIoctl.mParam[3] = 0;
; 322  : 
; 323  :     ioRet = DeviceIoControl(ghDrv,
; 324  :                             DMA_IOCTL_CLOSE,
; 325  :                             (LPVOID)&inIoctl,
; 326  :                             sizeof(inIoctl),
; 327  :                             (LPVOID)&outIoctl,
; 328  :                             sizeof(outIoctl),
; 329  :                             &retBytes,
; 330  :                             NULL);

  00034	e59f3064	 ldr         r3, [pc, #0x64]
  00038	e3a09000	 mov         r9, #0
  0003c	e3a0a000	 mov         r10, #0
  00040	e5930000	 ldr         r0, [r3]
  00044	e3a06000	 mov         r6, #0
  00048	e3a07000	 mov         r7, #0
  0004c	e28de010	 add         lr, sp, #0x10
  00050	e3a08010	 mov         r8, #0x10
  00054	e28d4024	 add         r4, sp, #0x24
  00058	e3a03010	 mov         r3, #0x10
  0005c	e28d2014	 add         r2, sp, #0x14
  00060	e3a0100a	 mov         r1, #0xA
  00064	e58d5014	 str         r5, [sp, #0x14]
  00068	e58d9018	 str         r9, [sp, #0x18]
  0006c	e58da01c	 str         r10, [sp, #0x1C]
  00070	e58d6020	 str         r6, [sp, #0x20]
  00074	e58d700c	 str         r7, [sp, #0xC]
  00078	e58de008	 str         lr, [sp, #8]
  0007c	e58d8004	 str         r8, [sp, #4]
  00080	e58d4000	 str         r4, [sp]
  00084	eb000000	 bl          DeviceIoControl
  00088	e3500000	 cmp         r0, #0

; 331  :     if (!ioRet)
; 332  :         return DMAERR_NODRIVER;

  0008c	0affffe1	 beq         |$LN7@DMA_Contro@7|

; 333  : 
; 334  :     return outIoctl.mParam[3];

  00090	e59d0030	 ldr         r0, [sp, #0x30]
  00094		 |$LN4@DMA_Contro@7|

; 335  : }

  00094	e28dd034	 add         sp, sp, #0x34
  00098	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN11@DMA_Contro@7|
  000a0		 |$LN12@DMA_Contro@7|
  000a0	00000000	 DCD         |ghDrv|
  000a4		 |$M39404|

			 ENDP  ; |DMA_ControllerClose|

	EXPORT	|DllMain|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|DisableThreadLibraryCalls|

  00000			 AREA	 |.pdata|, PDATA
|$T39423| DCD	|$LN11@DllMain|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 338  : {

  00000		 |$LN11@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39420|

; 339  :     if (dwReason==DLL_PROCESS_ATTACH)

  00004	e3510001	 cmp         r1, #1
  00008	1a000003	 bne         |$LN3@DllMain|

; 340  :     {
; 341  :         DisableThreadLibraryCalls((HMODULE)hDll);

  0000c	eb000000	 bl          DisableThreadLibraryCalls

; 342  :         InitializeCriticalSection(&sgUseSec);

  00010	e59f004c	 ldr         r0, [pc, #0x4C]
  00014	eb000000	 bl          InitializeCriticalSection
  00018	ea00000e	 b           |$LN1@DllMain|
  0001c		 |$LN3@DllMain|

; 343  :     }
; 344  :     else if (dwReason==DLL_PROCESS_DETACH)

  0001c	e3510000	 cmp         r1, #0
  00020	1a00000c	 bne         |$LN1@DllMain|

; 345  :     {
; 346  :         ShutDown();

  00024	e59f4038	 ldr         r4, [pc, #0x38]
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          EnterCriticalSection
  00030	e5940014	 ldr         r0, [r4, #0x14]
  00034	e3500000	 cmp         r0, #0
  00038	0a000002	 beq         |$LN6@DllMain|
  0003c	eb000000	 bl          CloseHandle
  00040	e3a03000	 mov         r3, #0
  00044	e5843014	 str         r3, [r4, #0x14]
  00048		 |$LN6@DllMain|
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          LeaveCriticalSection

; 347  :         DeleteCriticalSection(&sgUseSec);

  00050	e1a00004	 mov         r0, r4
  00054	eb000000	 bl          DeleteCriticalSection
  00058		 |$LN1@DllMain|

; 348  :     }
; 349  :     return TRUE;

  00058	e3a00001	 mov         r0, #1

; 350  : }

  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN12@DllMain|
  00064		 |$LN13@DllMain|
  00064	00000000	 DCD         |sgUseSec|
  00068		 |$M39421|

			 ENDP  ; |DllMain|

	END
