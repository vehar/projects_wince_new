; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\DMA\PUBLIC\dma.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|ghDrv| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|ghDrv|	%	0x4
	EXPORT	|DMA_ControllerEnum|
	IMPORT	|DeviceIoControl|
	IMPORT	|IsBadWritePtr|

  00000			 AREA	 |.pdata|, PDATA
|$T39232| DCD	|$LN13@DMA_Contro|
	DCD	0x40007704
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\public\dma.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DMA_ControllerEnum| PROC

; 55   : {

  00000		 |$LN13@DMA_Contro|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd058	 sub         sp, sp, #0x58
  00010		 |$M39229|

; 56   :     DWORD enumBytes;
; 57   :     DWORD retBytes;
; 58   :     BOOL ioRet;
; 59   : 
; 60   :     if (!CheckDriver())

  00010	eb000000	 bl          CheckDriver
  00014	e58d0040	 str         r0, [sp, #0x40]
  00018	e59d3040	 ldr         r3, [sp, #0x40]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000003	 bne         |$LN6@DMA_Contro|

; 61   :         return DMAERR_NODRIVER;

  00024	e3a0311a	 mov         r3, #0x1A, 2
  00028	e3833847	 orr         r3, r3, #0x47, 16
  0002c	e58d301c	 str         r3, [sp, #0x1C]
  00030	ea000064	 b           |$LN7@DMA_Contro|
  00034		 |$LN6@DMA_Contro|

; 62   : 
; 63   :     if (IsBadWritePtr(apSizeBytes,sizeof(uint)))

  00034	e3a01004	 mov         r1, #4
  00038	e59d0064	 ldr         r0, [sp, #0x64]
  0003c	eb000000	 bl          IsBadWritePtr
  00040	e58d0044	 str         r0, [sp, #0x44]
  00044	e59d3044	 ldr         r3, [sp, #0x44]
  00048	e3530000	 cmp         r3, #0
  0004c	0a000003	 beq         |$LN5@DMA_Contro|

; 64   :         return DMAERR_BADPOINTER;

  00050	e3a0311e	 mov         r3, #0x1E, 2
  00054	e3833847	 orr         r3, r3, #0x47, 16
  00058	e58d301c	 str         r3, [sp, #0x1C]
  0005c	ea000059	 b           |$LN7@DMA_Contro|
  00060		 |$LN5@DMA_Contro|

; 65   : 
; 66   :     enumBytes = 0;

  00060	e3a03000	 mov         r3, #0
  00064	e58d3010	 str         r3, [sp, #0x10]

; 67   :     retBytes = 0;

  00068	e3a03000	 mov         r3, #0
  0006c	e58d3018	 str         r3, [sp, #0x18]

; 68   :     ioRet = DeviceIoControl(ghDrv,
; 69   :                             DMA_IOCTL_ENUM_GETSIZE,
; 70   :                             NULL,
; 71   :                             0,
; 72   :                             (LPVOID)&enumBytes,
; 73   :                             sizeof(DWORD),
; 74   :                             &retBytes,
; 75   :                             NULL);

  00070	e3a03000	 mov         r3, #0
  00074	e58d300c	 str         r3, [sp, #0xC]
  00078	e28d3018	 add         r3, sp, #0x18
  0007c	e58d3008	 str         r3, [sp, #8]
  00080	e3a03004	 mov         r3, #4
  00084	e58d3004	 str         r3, [sp, #4]
  00088	e28d3010	 add         r3, sp, #0x10
  0008c	e58d3000	 str         r3, [sp]
  00090	e3a03000	 mov         r3, #0
  00094	e3a02000	 mov         r2, #0
  00098	e3a01001	 mov         r1, #1
  0009c	e59f0134	 ldr         r0, [pc, #0x134]
  000a0	e5900000	 ldr         r0, [r0]
  000a4	eb000000	 bl          DeviceIoControl
  000a8	e58d0048	 str         r0, [sp, #0x48]
  000ac	e59d3048	 ldr         r3, [sp, #0x48]
  000b0	e58d3014	 str         r3, [sp, #0x14]

; 76   : 
; 77   :     if (!ioRet)

  000b4	e59d3014	 ldr         r3, [sp, #0x14]
  000b8	e3530000	 cmp         r3, #0
  000bc	1a000003	 bne         |$LN4@DMA_Contro|

; 78   :         return DMAERR_NODRIVER;

  000c0	e3a0311a	 mov         r3, #0x1A, 2
  000c4	e3833847	 orr         r3, r3, #0x47, 16
  000c8	e58d301c	 str         r3, [sp, #0x1C]
  000cc	ea00003d	 b           |$LN7@DMA_Contro|
  000d0		 |$LN4@DMA_Contro|

; 79   : 
; 80   :     /* enumBytes holds required size of enum now */
; 81   :     ioRet = (*apSizeBytes<enumBytes);

  000d0	e59d3064	 ldr         r3, [sp, #0x64]
  000d4	e5932000	 ldr         r2, [r3]
  000d8	e59d3010	 ldr         r3, [sp, #0x10]
  000dc	e1520003	 cmp         r2, r3
  000e0	2a000002	 bcs         |$LN9@DMA_Contro|
  000e4	e3a03001	 mov         r3, #1
  000e8	e58d304c	 str         r3, [sp, #0x4C]
  000ec	ea000001	 b           |$LN10@DMA_Contro|
  000f0		 |$LN9@DMA_Contro|
  000f0	e3a03000	 mov         r3, #0
  000f4	e58d304c	 str         r3, [sp, #0x4C]
  000f8		 |$LN10@DMA_Contro|
  000f8	e59d304c	 ldr         r3, [sp, #0x4C]
  000fc	e58d3014	 str         r3, [sp, #0x14]

; 82   :     *apSizeBytes = enumBytes;

  00100	e59d2010	 ldr         r2, [sp, #0x10]
  00104	e59d3064	 ldr         r3, [sp, #0x64]
  00108	e5832000	 str         r2, [r3]

; 83   :     if (ioRet)

  0010c	e59d3014	 ldr         r3, [sp, #0x14]
  00110	e3530000	 cmp         r3, #0
  00114	0a000003	 beq         |$LN3@DMA_Contro|

; 84   :         return DMAERR_NOTENOUGHSPACE;

  00118	e3a03106	 mov         r3, #6, 2
  0011c	e3833847	 orr         r3, r3, #0x47, 16
  00120	e58d301c	 str         r3, [sp, #0x1C]
  00124	ea000027	 b           |$LN7@DMA_Contro|
  00128		 |$LN3@DMA_Contro|

; 85   : 
; 86   :     /* there is enough room in the target to hold the data */
; 87   :     if (IsBadWritePtr(apRetArray,enumBytes))

  00128	e59d1010	 ldr         r1, [sp, #0x10]
  0012c	e59d0060	 ldr         r0, [sp, #0x60]
  00130	eb000000	 bl          IsBadWritePtr
  00134	e58d0050	 str         r0, [sp, #0x50]
  00138	e59d3050	 ldr         r3, [sp, #0x50]
  0013c	e3530000	 cmp         r3, #0
  00140	0a000003	 beq         |$LN2@DMA_Contro|

; 88   :         return DMAERR_BADPOINTER;

  00144	e3a0311e	 mov         r3, #0x1E, 2
  00148	e3833847	 orr         r3, r3, #0x47, 16
  0014c	e58d301c	 str         r3, [sp, #0x1C]
  00150	ea00001c	 b           |$LN7@DMA_Contro|
  00154		 |$LN2@DMA_Contro|

; 89   : 
; 90   :     ioRet = DeviceIoControl(ghDrv,
; 91   :                             DMA_IOCTL_ENUM_GETDATA,
; 92   :                             NULL,
; 93   :                             0,
; 94   :                             (LPVOID)apRetArray,
; 95   :                             enumBytes,
; 96   :                             &enumBytes,
; 97   :                             NULL);

  00154	e3a03000	 mov         r3, #0
  00158	e58d300c	 str         r3, [sp, #0xC]
  0015c	e28d3010	 add         r3, sp, #0x10
  00160	e58d3008	 str         r3, [sp, #8]
  00164	e59d3010	 ldr         r3, [sp, #0x10]
  00168	e58d3004	 str         r3, [sp, #4]
  0016c	e59d3060	 ldr         r3, [sp, #0x60]
  00170	e58d3000	 str         r3, [sp]
  00174	e3a03000	 mov         r3, #0
  00178	e3a02000	 mov         r2, #0
  0017c	e3a01002	 mov         r1, #2
  00180	e59f0050	 ldr         r0, [pc, #0x50]
  00184	e5900000	 ldr         r0, [r0]
  00188	eb000000	 bl          DeviceIoControl
  0018c	e58d0054	 str         r0, [sp, #0x54]
  00190	e59d3054	 ldr         r3, [sp, #0x54]
  00194	e58d3014	 str         r3, [sp, #0x14]

; 98   :     if (!ioRet)

  00198	e59d3014	 ldr         r3, [sp, #0x14]
  0019c	e3530000	 cmp         r3, #0
  001a0	1a000003	 bne         |$LN1@DMA_Contro|

; 99   :         return DMAERR_NODRIVER;

  001a4	e3a0311a	 mov         r3, #0x1A, 2
  001a8	e3833847	 orr         r3, r3, #0x47, 16
  001ac	e58d301c	 str         r3, [sp, #0x1C]
  001b0	ea000004	 b           |$LN7@DMA_Contro|
  001b4		 |$LN1@DMA_Contro|

; 100  : 
; 101  :     /* enumeration came back ok */
; 102  :     *apSizeBytes = enumBytes;

  001b4	e59d2010	 ldr         r2, [sp, #0x10]
  001b8	e59d3064	 ldr         r3, [sp, #0x64]
  001bc	e5832000	 str         r2, [r3]

; 103  :     return 0;

  001c0	e3a03000	 mov         r3, #0
  001c4	e58d301c	 str         r3, [sp, #0x1C]
  001c8		 |$LN7@DMA_Contro|

; 104  : }

  001c8	e59d001c	 ldr         r0, [sp, #0x1C]
  001cc	e28dd058	 add         sp, sp, #0x58
  001d0	e89d6000	 ldmia       sp, {sp, lr}
  001d4	e12fff1e	 bx          lr
  001d8		 |$LN14@DMA_Contro|
  001d8		 |$LN15@DMA_Contro|
  001d8	00000000	 DCD         |ghDrv|
  001dc		 |$M39230|

			 ENDP  ; |DMA_ControllerEnum|

	EXPORT	|??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LeaveCriticalSection|
	IMPORT	|CreateFileW|
	IMPORT	|EnterCriticalSection|

  00004			 AREA	 |.bss|, NOINIT
|sgUseSec| %	0x14

  00008			 AREA	 |.pdata|, PDATA
|$T39245| DCD	|$LN9@CheckDrive|
	DCD	0x40003002

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@| DCB "D", 0x0, "M", 0x0
	DCB	"A", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  001dc			 AREA	 |.text|, CODE, ARM

  001dc		 |CheckDriver| PROC

; 22   : {

  001dc		 |$LN9@CheckDrive|
  001dc	e52de004	 str         lr, [sp, #-4]!
  001e0	e24dd028	 sub         sp, sp, #0x28
  001e4		 |$M39242|

; 23   :     HANDLE ret;
; 24   :     EnterCriticalSection(&sgUseSec);

  001e4	e59f00a8	 ldr         r0, [pc, #0xA8]
  001e8	eb000000	 bl          EnterCriticalSection

; 25   :     if (ghDrv==NULL)

  001ec	e59f309c	 ldr         r3, [pc, #0x9C]
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e3530000	 cmp         r3, #0
  001f8	1a000013	 bne         |$LN2@CheckDrive|

; 26   :     {
; 27   :         ret = CreateFile(TEXT("DMA1:"),
; 28   :                          GENERIC_READ | GENERIC_WRITE,
; 29   :                          FILE_SHARE_READ | FILE_SHARE_WRITE,
; 30   :                          NULL,
; 31   :                          OPEN_EXISTING,
; 32   :                          FILE_ATTRIBUTE_NORMAL,
; 33   :                          NULL);

  001fc	e3a03000	 mov         r3, #0
  00200	e58d3008	 str         r3, [sp, #8]
  00204	e3a03080	 mov         r3, #0x80
  00208	e58d3004	 str         r3, [sp, #4]
  0020c	e3a03003	 mov         r3, #3
  00210	e58d3000	 str         r3, [sp]
  00214	e3a03000	 mov         r3, #0
  00218	e3a02003	 mov         r2, #3
  0021c	e3a01103	 mov         r1, #3, 2
  00220	e59f0070	 ldr         r0, [pc, #0x70]
  00224	eb000000	 bl          CreateFileW
  00228	e58d0020	 str         r0, [sp, #0x20]
  0022c	e59d3020	 ldr         r3, [sp, #0x20]
  00230	e58d300c	 str         r3, [sp, #0xC]

; 34   :         if (ret!=INVALID_HANDLE_VALUE)

  00234	e59d300c	 ldr         r3, [sp, #0xC]
  00238	e3730001	 cmn         r3, #1
  0023c	0a000002	 beq         |$LN1@CheckDrive|

; 35   :         {
; 36   :             ghDrv = ret;

  00240	e59d200c	 ldr         r2, [sp, #0xC]
  00244	e59f3044	 ldr         r3, [pc, #0x44]
  00248	e5832000	 str         r2, [r3]
  0024c		 |$LN1@CheckDrive|
  0024c		 |$LN2@CheckDrive|

; 37   :         }
; 38   :     }
; 39   :     LeaveCriticalSection(&sgUseSec);

  0024c	e59f0040	 ldr         r0, [pc, #0x40]
  00250	eb000000	 bl          LeaveCriticalSection

; 40   :     return (ghDrv!=NULL)?TRUE:FALSE;

  00254	e59f3034	 ldr         r3, [pc, #0x34]
  00258	e5933000	 ldr         r3, [r3]
  0025c	e3530000	 cmp         r3, #0
  00260	0a000002	 beq         |$LN5@CheckDrive|
  00264	e3a03001	 mov         r3, #1
  00268	e58d3024	 str         r3, [sp, #0x24]
  0026c	ea000001	 b           |$LN6@CheckDrive|
  00270		 |$LN5@CheckDrive|
  00270	e3a03000	 mov         r3, #0
  00274	e58d3024	 str         r3, [sp, #0x24]
  00278		 |$LN6@CheckDrive|
  00278	e59d3024	 ldr         r3, [sp, #0x24]
  0027c	e58d301c	 str         r3, [sp, #0x1C]

; 41   : }

  00280	e59d001c	 ldr         r0, [sp, #0x1C]
  00284	e28dd028	 add         sp, sp, #0x28
  00288	e49de004	 ldr         lr, [sp], #4
  0028c	e12fff1e	 bx          lr
  00290		 |$LN10@CheckDrive|
  00290		 |$LN11@CheckDrive|
  00290	00000000	 DCD         |ghDrv|
  00294		 |$LN12@CheckDrive|
  00294	00000000	 DCD         |sgUseSec|
  00298		 |$LN13@CheckDrive|
  00298	00000000	 DCD         |??_C@_1M@GJIMDHLB@?$AAD?$AAM?$AAA?$AA1?$AA?3?$AA?$AA@|
  0029c		 |$M39243|

			 ENDP  ; |CheckDriver|

	EXPORT	|DMA_ControllerOpen|

  00010			 AREA	 |.pdata|, PDATA
|$T39259| DCD	|$LN9@DMA_Contro@2|
	DCD	0x40004b04
; Function compile flags: /Odtp

  0029c			 AREA	 |.text|, CODE, ARM

  0029c		 |DMA_ControllerOpen| PROC

; 107  : {

  0029c		 |$LN9@DMA_Contro@2|
  0029c	e1a0c00d	 mov         r12, sp
  002a0	e92d0003	 stmdb       sp!, {r0, r1}
  002a4	e92d5000	 stmdb       sp!, {r12, lr}
  002a8	e24dd058	 sub         sp, sp, #0x58
  002ac		 |$M39256|

; 108  :     DMAIOCTL inIoctl,outIoctl;
; 109  :     DWORD retBytes;
; 110  :     BOOL ioRet;
; 111  : 
; 112  :     if (!CheckDriver())

  002ac	eb000000	 bl          CheckDriver
  002b0	e58d004c	 str         r0, [sp, #0x4C]
  002b4	e59d304c	 ldr         r3, [sp, #0x4C]
  002b8	e3530000	 cmp         r3, #0
  002bc	1a000003	 bne         |$LN4@DMA_Contro@2|

; 113  :         return DMAERR_NODRIVER;

  002c0	e3a0311a	 mov         r3, #0x1A, 2
  002c4	e3833847	 orr         r3, r3, #0x47, 16
  002c8	e58d3038	 str         r3, [sp, #0x38]
  002cc	ea000038	 b           |$LN5@DMA_Contro@2|
  002d0		 |$LN4@DMA_Contro@2|

; 114  : 
; 115  :     /* check arguments */
; 116  :     if (IsBadWritePtr(apRetHandle,sizeof(HANDLE)))

  002d0	e3a01004	 mov         r1, #4
  002d4	e59d0064	 ldr         r0, [sp, #0x64]
  002d8	eb000000	 bl          IsBadWritePtr
  002dc	e58d0050	 str         r0, [sp, #0x50]
  002e0	e59d3050	 ldr         r3, [sp, #0x50]
  002e4	e3530000	 cmp         r3, #0
  002e8	0a000003	 beq         |$LN3@DMA_Contro@2|

; 117  :         return DMAERR_BADPOINTER;

  002ec	e3a0311e	 mov         r3, #0x1E, 2
  002f0	e3833847	 orr         r3, r3, #0x47, 16
  002f4	e58d3038	 str         r3, [sp, #0x38]
  002f8	ea00002d	 b           |$LN5@DMA_Contro@2|
  002fc		 |$LN3@DMA_Contro@2|

; 118  : 
; 119  :     inIoctl.mParam[0] = (uint)aSysId;

  002fc	e59d3060	 ldr         r3, [sp, #0x60]
  00300	e58d3028	 str         r3, [sp, #0x28]

; 120  :     inIoctl.mParam[1] = 0;

  00304	e3a03000	 mov         r3, #0
  00308	e58d302c	 str         r3, [sp, #0x2C]

; 121  :     inIoctl.mParam[2] = 0;

  0030c	e3a03000	 mov         r3, #0
  00310	e58d3030	 str         r3, [sp, #0x30]

; 122  :     inIoctl.mParam[3] = 0;

  00314	e3a03000	 mov         r3, #0
  00318	e58d3034	 str         r3, [sp, #0x34]

; 123  : 
; 124  :     ioRet = DeviceIoControl(ghDrv,
; 125  :                             DMA_IOCTL_OPEN,
; 126  :                             (LPVOID)&inIoctl,
; 127  :                             sizeof(inIoctl),
; 128  :                             (LPVOID)&outIoctl,
; 129  :                             sizeof(outIoctl),
; 130  :                             &retBytes,
; 131  :                             NULL);

  0031c	e3a03000	 mov         r3, #0
  00320	e58d300c	 str         r3, [sp, #0xC]
  00324	e28d3024	 add         r3, sp, #0x24
  00328	e58d3008	 str         r3, [sp, #8]
  0032c	e3a03010	 mov         r3, #0x10
  00330	e58d3004	 str         r3, [sp, #4]
  00334	e28d3010	 add         r3, sp, #0x10
  00338	e58d3000	 str         r3, [sp]
  0033c	e3a03010	 mov         r3, #0x10
  00340	e28d2028	 add         r2, sp, #0x28
  00344	e3a01003	 mov         r1, #3
  00348	e59f0074	 ldr         r0, [pc, #0x74]
  0034c	e5900000	 ldr         r0, [r0]
  00350	eb000000	 bl          DeviceIoControl
  00354	e58d0054	 str         r0, [sp, #0x54]
  00358	e59d3054	 ldr         r3, [sp, #0x54]
  0035c	e58d3020	 str         r3, [sp, #0x20]

; 132  :     if (!ioRet)

  00360	e59d3020	 ldr         r3, [sp, #0x20]
  00364	e3530000	 cmp         r3, #0
  00368	1a000003	 bne         |$LN2@DMA_Contro@2|

; 133  :         return DMAERR_NODRIVER;

  0036c	e3a0311a	 mov         r3, #0x1A, 2
  00370	e3833847	 orr         r3, r3, #0x47, 16
  00374	e58d3038	 str         r3, [sp, #0x38]
  00378	ea00000d	 b           |$LN5@DMA_Contro@2|
  0037c		 |$LN2@DMA_Contro@2|

; 134  : 
; 135  :     if (outIoctl.mParam[3])

  0037c	e59d301c	 ldr         r3, [sp, #0x1C]
  00380	e3530000	 cmp         r3, #0
  00384	0a000005	 beq         |$LN1@DMA_Contro@2|

; 136  :     {
; 137  :         /* driver is returning error code */
; 138  :         *apRetHandle = NULL;

  00388	e59d2064	 ldr         r2, [sp, #0x64]
  0038c	e3a03000	 mov         r3, #0
  00390	e5823000	 str         r3, [r2]

; 139  :         return outIoctl.mParam[3];

  00394	e59d301c	 ldr         r3, [sp, #0x1C]
  00398	e58d3038	 str         r3, [sp, #0x38]
  0039c	ea000004	 b           |$LN5@DMA_Contro@2|
  003a0		 |$LN1@DMA_Contro@2|

; 140  :     }
; 141  : 
; 142  :     /* driver opened controller ok. */
; 143  :     *apRetHandle = (HANDLE)outIoctl.mParam[0];

  003a0	e59d2010	 ldr         r2, [sp, #0x10]
  003a4	e59d3064	 ldr         r3, [sp, #0x64]
  003a8	e5832000	 str         r2, [r3]

; 144  :     return 0;

  003ac	e3a03000	 mov         r3, #0
  003b0	e58d3038	 str         r3, [sp, #0x38]
  003b4		 |$LN5@DMA_Contro@2|

; 145  : }

  003b4	e59d0038	 ldr         r0, [sp, #0x38]
  003b8	e28dd058	 add         sp, sp, #0x58
  003bc	e89d6000	 ldmia       sp, {sp, lr}
  003c0	e12fff1e	 bx          lr
  003c4		 |$LN10@DMA_Contro@2|
  003c4		 |$LN11@DMA_Contro@2|
  003c4	00000000	 DCD         |ghDrv|
  003c8		 |$M39257|

			 ENDP  ; |DMA_ControllerOpen|

	EXPORT	|DMA_ControllerAcquireChannels|

  00018			 AREA	 |.pdata|, PDATA
|$T39271| DCD	|$LN11@DMA_Contro@3|
	DCD	0x40005a04
; Function compile flags: /Odtp

  003c8			 AREA	 |.text|, CODE, ARM

  003c8		 |DMA_ControllerAcquireChannels| PROC

; 148  : {

  003c8		 |$LN11@DMA_Contro@3|
  003c8	e1a0c00d	 mov         r12, sp
  003cc	e92d0007	 stmdb       sp!, {r0 - r2}
  003d0	e92d5000	 stmdb       sp!, {r12, lr}
  003d4	e24dd058	 sub         sp, sp, #0x58
  003d8		 |$M39268|

; 149  :     DMAIOCTL inIoctl,outIoctl;
; 150  :     DWORD retBytes;
; 151  :     BOOL ioRet;
; 152  : 
; 153  :     if (!CheckDriver())

  003d8	eb000000	 bl          CheckDriver
  003dc	e58d004c	 str         r0, [sp, #0x4C]
  003e0	e59d304c	 ldr         r3, [sp, #0x4C]
  003e4	e3530000	 cmp         r3, #0
  003e8	1a000003	 bne         |$LN6@DMA_Contro@3|

; 154  :         return DMAERR_NODRIVER;

  003ec	e3a0311a	 mov         r3, #0x1A, 2
  003f0	e3833847	 orr         r3, r3, #0x47, 16
  003f4	e58d3038	 str         r3, [sp, #0x38]
  003f8	ea000047	 b           |$LN7@DMA_Contro@3|
  003fc		 |$LN6@DMA_Contro@3|

; 155  : 
; 156  :     /* check arguments */
; 157  :     if (!aController)

  003fc	e59d3060	 ldr         r3, [sp, #0x60]
  00400	e3530000	 cmp         r3, #0
  00404	1a000003	 bne         |$LN5@DMA_Contro@3|

; 158  :         return DMAERR_CONTROLLERNOTFOUND;

  00408	e3a0310a	 mov         r3, #0xA, 2
  0040c	e3833847	 orr         r3, r3, #0x47, 16
  00410	e58d3038	 str         r3, [sp, #0x38]
  00414	ea000040	 b           |$LN7@DMA_Contro@3|
  00418		 |$LN5@DMA_Contro@3|

; 159  :     if (IsBadWritePtr(apChanIO,sizeof(uint)))

  00418	e3a01004	 mov         r1, #4
  0041c	e59d0068	 ldr         r0, [sp, #0x68]
  00420	eb000000	 bl          IsBadWritePtr
  00424	e58d0050	 str         r0, [sp, #0x50]
  00428	e59d3050	 ldr         r3, [sp, #0x50]
  0042c	e3530000	 cmp         r3, #0
  00430	0a000003	 beq         |$LN4@DMA_Contro@3|

; 160  :         return DMAERR_BADPOINTER;

  00434	e3a0311e	 mov         r3, #0x1E, 2
  00438	e3833847	 orr         r3, r3, #0x47, 16
  0043c	e58d3038	 str         r3, [sp, #0x38]
  00440	ea000035	 b           |$LN7@DMA_Contro@3|
  00444		 |$LN4@DMA_Contro@3|

; 161  :     if (aNumChannels>32)

  00444	e59d3064	 ldr         r3, [sp, #0x64]
  00448	e3530020	 cmp         r3, #0x20
  0044c	9a000003	 bls         |$LN3@DMA_Contro@3|

; 162  :         return DMAERR_BADNUMCHANNELS;

  00450	e3a03126	 mov         r3, #0x26, 2
  00454	e3833847	 orr         r3, r3, #0x47, 16
  00458	e58d3038	 str         r3, [sp, #0x38]
  0045c	ea00002e	 b           |$LN7@DMA_Contro@3|
  00460		 |$LN3@DMA_Contro@3|

; 163  : 
; 164  :     inIoctl.mParam[0] = (uint)aController;

  00460	e59d3060	 ldr         r3, [sp, #0x60]
  00464	e58d3028	 str         r3, [sp, #0x28]

; 165  :     inIoctl.mParam[1] = aNumChannels;

  00468	e59d3064	 ldr         r3, [sp, #0x64]
  0046c	e58d302c	 str         r3, [sp, #0x2C]

; 166  :     inIoctl.mParam[2] = *apChanIO;

  00470	e59d3068	 ldr         r3, [sp, #0x68]
  00474	e5933000	 ldr         r3, [r3]
  00478	e58d3030	 str         r3, [sp, #0x30]

; 167  :     inIoctl.mParam[3] = 0;

  0047c	e3a03000	 mov         r3, #0
  00480	e58d3034	 str         r3, [sp, #0x34]

; 168  : 
; 169  :     ioRet = DeviceIoControl(ghDrv,
; 170  :                             DMA_IOCTL_ACQ,
; 171  :                             (LPVOID)&inIoctl,
; 172  :                             sizeof(inIoctl),
; 173  :                             (LPVOID)&outIoctl,
; 174  :                             sizeof(outIoctl),
; 175  :                             &retBytes,
; 176  :                             NULL);

  00484	e3a03000	 mov         r3, #0
  00488	e58d300c	 str         r3, [sp, #0xC]
  0048c	e28d3024	 add         r3, sp, #0x24
  00490	e58d3008	 str         r3, [sp, #8]
  00494	e3a03010	 mov         r3, #0x10
  00498	e58d3004	 str         r3, [sp, #4]
  0049c	e28d3010	 add         r3, sp, #0x10
  004a0	e58d3000	 str         r3, [sp]
  004a4	e3a03010	 mov         r3, #0x10
  004a8	e28d2028	 add         r2, sp, #0x28
  004ac	e3a01004	 mov         r1, #4
  004b0	e59f0074	 ldr         r0, [pc, #0x74]
  004b4	e5900000	 ldr         r0, [r0]
  004b8	eb000000	 bl          DeviceIoControl
  004bc	e58d0054	 str         r0, [sp, #0x54]
  004c0	e59d3054	 ldr         r3, [sp, #0x54]
  004c4	e58d3020	 str         r3, [sp, #0x20]

; 177  :     if (!ioRet)

  004c8	e59d3020	 ldr         r3, [sp, #0x20]
  004cc	e3530000	 cmp         r3, #0
  004d0	1a000003	 bne         |$LN2@DMA_Contro@3|

; 178  :         return DMAERR_NODRIVER;

  004d4	e3a0311a	 mov         r3, #0x1A, 2
  004d8	e3833847	 orr         r3, r3, #0x47, 16
  004dc	e58d3038	 str         r3, [sp, #0x38]
  004e0	ea00000d	 b           |$LN7@DMA_Contro@3|
  004e4		 |$LN2@DMA_Contro@3|

; 179  : 
; 180  :     if (outIoctl.mParam[3])

  004e4	e59d301c	 ldr         r3, [sp, #0x1C]
  004e8	e3530000	 cmp         r3, #0
  004ec	0a000005	 beq         |$LN1@DMA_Contro@3|

; 181  :     {
; 182  :         /* driver is returning error code */
; 183  :         *apChanIO = 0;

  004f0	e59d2068	 ldr         r2, [sp, #0x68]
  004f4	e3a03000	 mov         r3, #0
  004f8	e5823000	 str         r3, [r2]

; 184  :         return outIoctl.mParam[3];

  004fc	e59d301c	 ldr         r3, [sp, #0x1C]
  00500	e58d3038	 str         r3, [sp, #0x38]
  00504	ea000004	 b           |$LN7@DMA_Contro@3|
  00508		 |$LN1@DMA_Contro@3|

; 185  :     }
; 186  : 
; 187  :     /* driver acquired channels ok */
; 188  :     *apChanIO = outIoctl.mParam[2];

  00508	e59d2018	 ldr         r2, [sp, #0x18]
  0050c	e59d3068	 ldr         r3, [sp, #0x68]
  00510	e5832000	 str         r2, [r3]

; 189  :     return 0;

  00514	e3a03000	 mov         r3, #0
  00518	e58d3038	 str         r3, [sp, #0x38]
  0051c		 |$LN7@DMA_Contro@3|

; 190  : }

  0051c	e59d0038	 ldr         r0, [sp, #0x38]
  00520	e28dd058	 add         sp, sp, #0x58
  00524	e89d6000	 ldmia       sp, {sp, lr}
  00528	e12fff1e	 bx          lr
  0052c		 |$LN12@DMA_Contro@3|
  0052c		 |$LN13@DMA_Contro@3|
  0052c	00000000	 DCD         |ghDrv|
  00530		 |$M39269|

			 ENDP  ; |DMA_ControllerAcquireChannels|

	EXPORT	|DMA_ControllerFreeChannels|

  00020			 AREA	 |.pdata|, PDATA
|$T39283| DCD	|$LN9@DMA_Contro@4|
	DCD	0x40004204
; Function compile flags: /Odtp

  00530			 AREA	 |.text|, CODE, ARM

  00530		 |DMA_ControllerFreeChannels| PROC

; 193  : {

  00530		 |$LN9@DMA_Contro@4|
  00530	e1a0c00d	 mov         r12, sp
  00534	e92d0003	 stmdb       sp!, {r0, r1}
  00538	e92d5000	 stmdb       sp!, {r12, lr}
  0053c	e24dd054	 sub         sp, sp, #0x54
  00540		 |$M39280|

; 194  :     DMAIOCTL inIoctl,outIoctl;
; 195  :     DWORD retBytes;
; 196  :     BOOL ioRet;
; 197  : 
; 198  :     if (!CheckDriver())

  00540	eb000000	 bl          CheckDriver
  00544	e58d004c	 str         r0, [sp, #0x4C]
  00548	e59d304c	 ldr         r3, [sp, #0x4C]
  0054c	e3530000	 cmp         r3, #0
  00550	1a000003	 bne         |$LN4@DMA_Contro@4|

; 199  :         return DMAERR_NODRIVER;

  00554	e3a0311a	 mov         r3, #0x1A, 2
  00558	e3833847	 orr         r3, r3, #0x47, 16
  0055c	e58d3038	 str         r3, [sp, #0x38]
  00560	ea00002f	 b           |$LN5@DMA_Contro@4|
  00564		 |$LN4@DMA_Contro@4|

; 200  : 
; 201  :     /* check arguments */
; 202  :     if (!aController)

  00564	e59d305c	 ldr         r3, [sp, #0x5C]
  00568	e3530000	 cmp         r3, #0
  0056c	1a000003	 bne         |$LN3@DMA_Contro@4|

; 203  :         return DMAERR_CONTROLLERNOTFOUND;

  00570	e3a0310a	 mov         r3, #0xA, 2
  00574	e3833847	 orr         r3, r3, #0x47, 16
  00578	e58d3038	 str         r3, [sp, #0x38]
  0057c	ea000028	 b           |$LN5@DMA_Contro@4|
  00580		 |$LN3@DMA_Contro@4|

; 204  :     if (!aChanFreeMask)

  00580	e59d3060	 ldr         r3, [sp, #0x60]
  00584	e3530000	 cmp         r3, #0
  00588	1a000003	 bne         |$LN2@DMA_Contro@4|

; 205  :         return DMAERR_BADCHANMASK;

  0058c	e3a03122	 mov         r3, #0x22, 2
  00590	e3833847	 orr         r3, r3, #0x47, 16
  00594	e58d3038	 str         r3, [sp, #0x38]
  00598	ea000021	 b           |$LN5@DMA_Contro@4|
  0059c		 |$LN2@DMA_Contro@4|

; 206  : 
; 207  :     inIoctl.mParam[0] = (uint)aController;

  0059c	e59d305c	 ldr         r3, [sp, #0x5C]
  005a0	e58d3028	 str         r3, [sp, #0x28]

; 208  :     inIoctl.mParam[1] = aChanFreeMask;

  005a4	e59d3060	 ldr         r3, [sp, #0x60]
  005a8	e58d302c	 str         r3, [sp, #0x2C]

; 209  :     inIoctl.mParam[2] = 0;

  005ac	e3a03000	 mov         r3, #0
  005b0	e58d3030	 str         r3, [sp, #0x30]

; 210  :     inIoctl.mParam[3] = 0;

  005b4	e3a03000	 mov         r3, #0
  005b8	e58d3034	 str         r3, [sp, #0x34]

; 211  : 
; 212  :     ioRet = DeviceIoControl(ghDrv,
; 213  :                             DMA_IOCTL_FREE,
; 214  :                             (LPVOID)&inIoctl,
; 215  :                             sizeof(inIoctl),
; 216  :                             (LPVOID)&outIoctl,
; 217  :                             sizeof(outIoctl),
; 218  :                             &retBytes,
; 219  :                             NULL);

  005bc	e3a03000	 mov         r3, #0
  005c0	e58d300c	 str         r3, [sp, #0xC]
  005c4	e28d3024	 add         r3, sp, #0x24
  005c8	e58d3008	 str         r3, [sp, #8]
  005cc	e3a03010	 mov         r3, #0x10
  005d0	e58d3004	 str         r3, [sp, #4]
  005d4	e28d3010	 add         r3, sp, #0x10
  005d8	e58d3000	 str         r3, [sp]
  005dc	e3a03010	 mov         r3, #0x10
  005e0	e28d2028	 add         r2, sp, #0x28
  005e4	e3a01005	 mov         r1, #5
  005e8	e59f0044	 ldr         r0, [pc, #0x44]
  005ec	e5900000	 ldr         r0, [r0]
  005f0	eb000000	 bl          DeviceIoControl
  005f4	e58d0050	 str         r0, [sp, #0x50]
  005f8	e59d3050	 ldr         r3, [sp, #0x50]
  005fc	e58d3020	 str         r3, [sp, #0x20]

; 220  :     if (!ioRet)

  00600	e59d3020	 ldr         r3, [sp, #0x20]
  00604	e3530000	 cmp         r3, #0
  00608	1a000003	 bne         |$LN1@DMA_Contro@4|

; 221  :         return DMAERR_NODRIVER;

  0060c	e3a0311a	 mov         r3, #0x1A, 2
  00610	e3833847	 orr         r3, r3, #0x47, 16
  00614	e58d3038	 str         r3, [sp, #0x38]
  00618	ea000001	 b           |$LN5@DMA_Contro@4|
  0061c		 |$LN1@DMA_Contro@4|

; 222  : 
; 223  :     return outIoctl.mParam[3];

  0061c	e59d301c	 ldr         r3, [sp, #0x1C]
  00620	e58d3038	 str         r3, [sp, #0x38]
  00624		 |$LN5@DMA_Contro@4|

; 224  : }

  00624	e59d0038	 ldr         r0, [sp, #0x38]
  00628	e28dd054	 add         sp, sp, #0x54
  0062c	e89d6000	 ldmia       sp, {sp, lr}
  00630	e12fff1e	 bx          lr
  00634		 |$LN10@DMA_Contro@4|
  00634		 |$LN11@DMA_Contro@4|
  00634	00000000	 DCD         |ghDrv|
  00638		 |$M39281|

			 ENDP  ; |DMA_ControllerFreeChannels|

	EXPORT	|DMA_ControllerSet|

  00028			 AREA	 |.pdata|, PDATA
|$T39295| DCD	|$LN9@DMA_Contro@5|
	DCD	0x40004204
; Function compile flags: /Odtp

  00638			 AREA	 |.text|, CODE, ARM

  00638		 |DMA_ControllerSet| PROC

; 227  : {

  00638		 |$LN9@DMA_Contro@5|
  00638	e1a0c00d	 mov         r12, sp
  0063c	e92d0007	 stmdb       sp!, {r0 - r2}
  00640	e92d5000	 stmdb       sp!, {r12, lr}
  00644	e24dd054	 sub         sp, sp, #0x54
  00648		 |$M39292|

; 228  :     DMAIOCTL inIoctl,outIoctl;
; 229  :     DWORD retBytes;
; 230  :     BOOL ioRet;
; 231  : 
; 232  :     if (!CheckDriver())

  00648	eb000000	 bl          CheckDriver
  0064c	e58d004c	 str         r0, [sp, #0x4C]
  00650	e59d304c	 ldr         r3, [sp, #0x4C]
  00654	e3530000	 cmp         r3, #0
  00658	1a000003	 bne         |$LN4@DMA_Contro@5|

; 233  :         return DMAERR_NODRIVER;

  0065c	e3a0311a	 mov         r3, #0x1A, 2
  00660	e3833847	 orr         r3, r3, #0x47, 16
  00664	e58d3038	 str         r3, [sp, #0x38]
  00668	ea00002f	 b           |$LN5@DMA_Contro@5|
  0066c		 |$LN4@DMA_Contro@5|

; 234  : 
; 235  :     /* check arguments */
; 236  :     if (!aController)

  0066c	e59d305c	 ldr         r3, [sp, #0x5C]
  00670	e3530000	 cmp         r3, #0
  00674	1a000003	 bne         |$LN3@DMA_Contro@5|

; 237  :         return DMAERR_CONTROLLERNOTFOUND;

  00678	e3a0310a	 mov         r3, #0xA, 2
  0067c	e3833847	 orr         r3, r3, #0x47, 16
  00680	e58d3038	 str         r3, [sp, #0x38]
  00684	ea000028	 b           |$LN5@DMA_Contro@5|
  00688		 |$LN3@DMA_Contro@5|

; 238  :     if (!(uint)aProp)

  00688	e59d3060	 ldr         r3, [sp, #0x60]
  0068c	e3530000	 cmp         r3, #0
  00690	1a000003	 bne         |$LN2@DMA_Contro@5|

; 239  :         return DMAERR_BADPROPERTY;

  00694	e3a0312a	 mov         r3, #0x2A, 2
  00698	e3833847	 orr         r3, r3, #0x47, 16
  0069c	e58d3038	 str         r3, [sp, #0x38]
  006a0	ea000021	 b           |$LN5@DMA_Contro@5|
  006a4		 |$LN2@DMA_Contro@5|

; 240  : 
; 241  :     inIoctl.mParam[0] = (uint)aController;

  006a4	e59d305c	 ldr         r3, [sp, #0x5C]
  006a8	e58d3028	 str         r3, [sp, #0x28]

; 242  :     inIoctl.mParam[1] = (uint)aProp;

  006ac	e59d3060	 ldr         r3, [sp, #0x60]
  006b0	e58d302c	 str         r3, [sp, #0x2C]

; 243  :     inIoctl.mParam[2] = aValue32;

  006b4	e59d3064	 ldr         r3, [sp, #0x64]
  006b8	e58d3030	 str         r3, [sp, #0x30]

; 244  :     inIoctl.mParam[3] = 0;

  006bc	e3a03000	 mov         r3, #0
  006c0	e58d3034	 str         r3, [sp, #0x34]

; 245  : 
; 246  :     ioRet = DeviceIoControl(ghDrv,
; 247  :                             DMA_IOCTL_SET,
; 248  :                             (LPVOID)&inIoctl,
; 249  :                             sizeof(inIoctl),
; 250  :                             (LPVOID)&outIoctl,
; 251  :                             sizeof(outIoctl),
; 252  :                             &retBytes,
; 253  :                             NULL);

  006c4	e3a03000	 mov         r3, #0
  006c8	e58d300c	 str         r3, [sp, #0xC]
  006cc	e28d3024	 add         r3, sp, #0x24
  006d0	e58d3008	 str         r3, [sp, #8]
  006d4	e3a03010	 mov         r3, #0x10
  006d8	e58d3004	 str         r3, [sp, #4]
  006dc	e28d3010	 add         r3, sp, #0x10
  006e0	e58d3000	 str         r3, [sp]
  006e4	e3a03010	 mov         r3, #0x10
  006e8	e28d2028	 add         r2, sp, #0x28
  006ec	e3a01006	 mov         r1, #6
  006f0	e59f0044	 ldr         r0, [pc, #0x44]
  006f4	e5900000	 ldr         r0, [r0]
  006f8	eb000000	 bl          DeviceIoControl
  006fc	e58d0050	 str         r0, [sp, #0x50]
  00700	e59d3050	 ldr         r3, [sp, #0x50]
  00704	e58d3020	 str         r3, [sp, #0x20]

; 254  :     if (!ioRet)

  00708	e59d3020	 ldr         r3, [sp, #0x20]
  0070c	e3530000	 cmp         r3, #0
  00710	1a000003	 bne         |$LN1@DMA_Contro@5|

; 255  :         return DMAERR_NODRIVER;

  00714	e3a0311a	 mov         r3, #0x1A, 2
  00718	e3833847	 orr         r3, r3, #0x47, 16
  0071c	e58d3038	 str         r3, [sp, #0x38]
  00720	ea000001	 b           |$LN5@DMA_Contro@5|
  00724		 |$LN1@DMA_Contro@5|

; 256  : 
; 257  :     return outIoctl.mParam[3];

  00724	e59d301c	 ldr         r3, [sp, #0x1C]
  00728	e58d3038	 str         r3, [sp, #0x38]
  0072c		 |$LN5@DMA_Contro@5|

; 258  : }

  0072c	e59d0038	 ldr         r0, [sp, #0x38]
  00730	e28dd054	 add         sp, sp, #0x54
  00734	e89d6000	 ldmia       sp, {sp, lr}
  00738	e12fff1e	 bx          lr
  0073c		 |$LN10@DMA_Contro@5|
  0073c		 |$LN11@DMA_Contro@5|
  0073c	00000000	 DCD         |ghDrv|
  00740		 |$M39293|

			 ENDP  ; |DMA_ControllerSet|

	EXPORT	|DMA_ControllerGet|

  00030			 AREA	 |.pdata|, PDATA
|$T39307| DCD	|$LN11@DMA_Contro@6|
	DCD	0x40005904
; Function compile flags: /Odtp

  00740			 AREA	 |.text|, CODE, ARM

  00740		 |DMA_ControllerGet| PROC

; 261  : {

  00740		 |$LN11@DMA_Contro@6|
  00740	e1a0c00d	 mov         r12, sp
  00744	e92d0007	 stmdb       sp!, {r0 - r2}
  00748	e92d5000	 stmdb       sp!, {r12, lr}
  0074c	e24dd058	 sub         sp, sp, #0x58
  00750		 |$M39304|

; 262  :     DMAIOCTL inIoctl,outIoctl;
; 263  :     DWORD retBytes;
; 264  :     BOOL ioRet;
; 265  : 
; 266  :     if (!CheckDriver())

  00750	eb000000	 bl          CheckDriver
  00754	e58d004c	 str         r0, [sp, #0x4C]
  00758	e59d304c	 ldr         r3, [sp, #0x4C]
  0075c	e3530000	 cmp         r3, #0
  00760	1a000003	 bne         |$LN6@DMA_Contro@6|

; 267  :         return DMAERR_NODRIVER;

  00764	e3a0311a	 mov         r3, #0x1A, 2
  00768	e3833847	 orr         r3, r3, #0x47, 16
  0076c	e58d3038	 str         r3, [sp, #0x38]
  00770	ea000046	 b           |$LN7@DMA_Contro@6|
  00774		 |$LN6@DMA_Contro@6|

; 268  : 
; 269  :     /* check arguments */
; 270  :     if (!aController)

  00774	e59d3060	 ldr         r3, [sp, #0x60]
  00778	e3530000	 cmp         r3, #0
  0077c	1a000003	 bne         |$LN5@DMA_Contro@6|

; 271  :         return DMAERR_CONTROLLERNOTFOUND;

  00780	e3a0310a	 mov         r3, #0xA, 2
  00784	e3833847	 orr         r3, r3, #0x47, 16
  00788	e58d3038	 str         r3, [sp, #0x38]
  0078c	ea00003f	 b           |$LN7@DMA_Contro@6|
  00790		 |$LN5@DMA_Contro@6|

; 272  :     if (!(uint)aProp)

  00790	e59d3064	 ldr         r3, [sp, #0x64]
  00794	e3530000	 cmp         r3, #0
  00798	1a000003	 bne         |$LN4@DMA_Contro@6|

; 273  :         return DMAERR_BADPROPERTY;

  0079c	e3a0312a	 mov         r3, #0x2A, 2
  007a0	e3833847	 orr         r3, r3, #0x47, 16
  007a4	e58d3038	 str         r3, [sp, #0x38]
  007a8	ea000038	 b           |$LN7@DMA_Contro@6|
  007ac		 |$LN4@DMA_Contro@6|

; 274  :     if (IsBadWritePtr(apRetValue32,sizeof(uint)))

  007ac	e3a01004	 mov         r1, #4
  007b0	e59d0068	 ldr         r0, [sp, #0x68]
  007b4	eb000000	 bl          IsBadWritePtr
  007b8	e58d0050	 str         r0, [sp, #0x50]
  007bc	e59d3050	 ldr         r3, [sp, #0x50]
  007c0	e3530000	 cmp         r3, #0
  007c4	0a000003	 beq         |$LN3@DMA_Contro@6|

; 275  :         return DMAERR_BADPOINTER;

  007c8	e3a0311e	 mov         r3, #0x1E, 2
  007cc	e3833847	 orr         r3, r3, #0x47, 16
  007d0	e58d3038	 str         r3, [sp, #0x38]
  007d4	ea00002d	 b           |$LN7@DMA_Contro@6|
  007d8		 |$LN3@DMA_Contro@6|

; 276  : 
; 277  :     inIoctl.mParam[0] = (uint)aController;

  007d8	e59d3060	 ldr         r3, [sp, #0x60]
  007dc	e58d3028	 str         r3, [sp, #0x28]

; 278  :     inIoctl.mParam[1] = (uint)aProp;

  007e0	e59d3064	 ldr         r3, [sp, #0x64]
  007e4	e58d302c	 str         r3, [sp, #0x2C]

; 279  :     inIoctl.mParam[2] = 0;

  007e8	e3a03000	 mov         r3, #0
  007ec	e58d3030	 str         r3, [sp, #0x30]

; 280  :     inIoctl.mParam[3] = 0;

  007f0	e3a03000	 mov         r3, #0
  007f4	e58d3034	 str         r3, [sp, #0x34]

; 281  : 
; 282  :     ioRet = DeviceIoControl(ghDrv,
; 283  :                             DMA_IOCTL_GET,
; 284  :                             (LPVOID)&inIoctl,
; 285  :                             sizeof(inIoctl),
; 286  :                             (LPVOID)&outIoctl,
; 287  :                             sizeof(outIoctl),
; 288  :                             &retBytes,
; 289  :                             NULL);

  007f8	e3a03000	 mov         r3, #0
  007fc	e58d300c	 str         r3, [sp, #0xC]
  00800	e28d3024	 add         r3, sp, #0x24
  00804	e58d3008	 str         r3, [sp, #8]
  00808	e3a03010	 mov         r3, #0x10
  0080c	e58d3004	 str         r3, [sp, #4]
  00810	e28d3010	 add         r3, sp, #0x10
  00814	e58d3000	 str         r3, [sp]
  00818	e3a03010	 mov         r3, #0x10
  0081c	e28d2028	 add         r2, sp, #0x28
  00820	e3a01007	 mov         r1, #7
  00824	e59f0074	 ldr         r0, [pc, #0x74]
  00828	e5900000	 ldr         r0, [r0]
  0082c	eb000000	 bl          DeviceIoControl
  00830	e58d0054	 str         r0, [sp, #0x54]
  00834	e59d3054	 ldr         r3, [sp, #0x54]
  00838	e58d3020	 str         r3, [sp, #0x20]

; 290  :     if (!ioRet)

  0083c	e59d3020	 ldr         r3, [sp, #0x20]
  00840	e3530000	 cmp         r3, #0
  00844	1a000003	 bne         |$LN2@DMA_Contro@6|

; 291  :         return DMAERR_NODRIVER;

  00848	e3a0311a	 mov         r3, #0x1A, 2
  0084c	e3833847	 orr         r3, r3, #0x47, 16
  00850	e58d3038	 str         r3, [sp, #0x38]
  00854	ea00000d	 b           |$LN7@DMA_Contro@6|
  00858		 |$LN2@DMA_Contro@6|

; 292  : 
; 293  :     if (outIoctl.mParam[3])

  00858	e59d301c	 ldr         r3, [sp, #0x1C]
  0085c	e3530000	 cmp         r3, #0
  00860	0a000005	 beq         |$LN1@DMA_Contro@6|

; 294  :     {
; 295  :         /* driver is returning error code */
; 296  :         *apRetValue32 = 0;

  00864	e59d2068	 ldr         r2, [sp, #0x68]
  00868	e3a03000	 mov         r3, #0
  0086c	e5823000	 str         r3, [r2]

; 297  :         return outIoctl.mParam[3];

  00870	e59d301c	 ldr         r3, [sp, #0x1C]
  00874	e58d3038	 str         r3, [sp, #0x38]
  00878	ea000004	 b           |$LN7@DMA_Contro@6|
  0087c		 |$LN1@DMA_Contro@6|

; 298  :     }
; 299  : 
; 300  :     /* driver retrieved property ok */
; 301  :     *apRetValue32 = outIoctl.mParam[2];

  0087c	e59d2018	 ldr         r2, [sp, #0x18]
  00880	e59d3068	 ldr         r3, [sp, #0x68]
  00884	e5832000	 str         r2, [r3]

; 302  :     return 0;

  00888	e3a03000	 mov         r3, #0
  0088c	e58d3038	 str         r3, [sp, #0x38]
  00890		 |$LN7@DMA_Contro@6|

; 303  : }

  00890	e59d0038	 ldr         r0, [sp, #0x38]
  00894	e28dd058	 add         sp, sp, #0x58
  00898	e89d6000	 ldmia       sp, {sp, lr}
  0089c	e12fff1e	 bx          lr
  008a0		 |$LN12@DMA_Contro@6|
  008a0		 |$LN13@DMA_Contro@6|
  008a0	00000000	 DCD         |ghDrv|
  008a4		 |$M39305|

			 ENDP  ; |DMA_ControllerGet|

	EXPORT	|DMA_ControllerClose|

  00038			 AREA	 |.pdata|, PDATA
|$T39319| DCD	|$LN8@DMA_Contro@7|
	DCD	0x40003b04
; Function compile flags: /Odtp

  008a4			 AREA	 |.text|, CODE, ARM

  008a4		 |DMA_ControllerClose| PROC

; 306  : {

  008a4		 |$LN8@DMA_Contro@7|
  008a4	e1a0c00d	 mov         r12, sp
  008a8	e92d0001	 stmdb       sp!, {r0}
  008ac	e92d5000	 stmdb       sp!, {r12, lr}
  008b0	e24dd054	 sub         sp, sp, #0x54
  008b4		 |$M39316|

; 307  :     DMAIOCTL inIoctl,outIoctl;
; 308  :     DWORD retBytes;
; 309  :     BOOL ioRet;
; 310  : 
; 311  :     if (!CheckDriver())

  008b4	eb000000	 bl          CheckDriver
  008b8	e58d004c	 str         r0, [sp, #0x4C]
  008bc	e59d304c	 ldr         r3, [sp, #0x4C]
  008c0	e3530000	 cmp         r3, #0
  008c4	1a000003	 bne         |$LN3@DMA_Contro@7|

; 312  :         return DMAERR_NODRIVER;

  008c8	e3a0311a	 mov         r3, #0x1A, 2
  008cc	e3833847	 orr         r3, r3, #0x47, 16
  008d0	e58d3038	 str         r3, [sp, #0x38]
  008d4	ea000028	 b           |$LN4@DMA_Contro@7|
  008d8		 |$LN3@DMA_Contro@7|

; 313  : 
; 314  :     /* check arguments */
; 315  :     if (!aController)

  008d8	e59d305c	 ldr         r3, [sp, #0x5C]
  008dc	e3530000	 cmp         r3, #0
  008e0	1a000003	 bne         |$LN2@DMA_Contro@7|

; 316  :         return DMAERR_CONTROLLERNOTFOUND;

  008e4	e3a0310a	 mov         r3, #0xA, 2
  008e8	e3833847	 orr         r3, r3, #0x47, 16
  008ec	e58d3038	 str         r3, [sp, #0x38]
  008f0	ea000021	 b           |$LN4@DMA_Contro@7|
  008f4		 |$LN2@DMA_Contro@7|

; 317  : 
; 318  :     inIoctl.mParam[0] = (uint)aController;

  008f4	e59d305c	 ldr         r3, [sp, #0x5C]
  008f8	e58d3028	 str         r3, [sp, #0x28]

; 319  :     inIoctl.mParam[1] = 0;

  008fc	e3a03000	 mov         r3, #0
  00900	e58d302c	 str         r3, [sp, #0x2C]

; 320  :     inIoctl.mParam[2] = 0;

  00904	e3a03000	 mov         r3, #0
  00908	e58d3030	 str         r3, [sp, #0x30]

; 321  :     inIoctl.mParam[3] = 0;

  0090c	e3a03000	 mov         r3, #0
  00910	e58d3034	 str         r3, [sp, #0x34]

; 322  : 
; 323  :     ioRet = DeviceIoControl(ghDrv,
; 324  :                             DMA_IOCTL_CLOSE,
; 325  :                             (LPVOID)&inIoctl,
; 326  :                             sizeof(inIoctl),
; 327  :                             (LPVOID)&outIoctl,
; 328  :                             sizeof(outIoctl),
; 329  :                             &retBytes,
; 330  :                             NULL);

  00914	e3a03000	 mov         r3, #0
  00918	e58d300c	 str         r3, [sp, #0xC]
  0091c	e28d3024	 add         r3, sp, #0x24
  00920	e58d3008	 str         r3, [sp, #8]
  00924	e3a03010	 mov         r3, #0x10
  00928	e58d3004	 str         r3, [sp, #4]
  0092c	e28d3010	 add         r3, sp, #0x10
  00930	e58d3000	 str         r3, [sp]
  00934	e3a03010	 mov         r3, #0x10
  00938	e28d2028	 add         r2, sp, #0x28
  0093c	e3a0100a	 mov         r1, #0xA
  00940	e59f0044	 ldr         r0, [pc, #0x44]
  00944	e5900000	 ldr         r0, [r0]
  00948	eb000000	 bl          DeviceIoControl
  0094c	e58d0050	 str         r0, [sp, #0x50]
  00950	e59d3050	 ldr         r3, [sp, #0x50]
  00954	e58d3020	 str         r3, [sp, #0x20]

; 331  :     if (!ioRet)

  00958	e59d3020	 ldr         r3, [sp, #0x20]
  0095c	e3530000	 cmp         r3, #0
  00960	1a000003	 bne         |$LN1@DMA_Contro@7|

; 332  :         return DMAERR_NODRIVER;

  00964	e3a0311a	 mov         r3, #0x1A, 2
  00968	e3833847	 orr         r3, r3, #0x47, 16
  0096c	e58d3038	 str         r3, [sp, #0x38]
  00970	ea000001	 b           |$LN4@DMA_Contro@7|
  00974		 |$LN1@DMA_Contro@7|

; 333  : 
; 334  :     return outIoctl.mParam[3];

  00974	e59d301c	 ldr         r3, [sp, #0x1C]
  00978	e58d3038	 str         r3, [sp, #0x38]
  0097c		 |$LN4@DMA_Contro@7|

; 335  : }

  0097c	e59d0038	 ldr         r0, [sp, #0x38]
  00980	e28dd054	 add         sp, sp, #0x54
  00984	e89d6000	 ldmia       sp, {sp, lr}
  00988	e12fff1e	 bx          lr
  0098c		 |$LN9@DMA_Contro@7|
  0098c		 |$LN10@DMA_Contro@7|
  0098c	00000000	 DCD         |ghDrv|
  00990		 |$M39317|

			 ENDP  ; |DMA_ControllerClose|

	EXPORT	|DllMain|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|DisableThreadLibraryCalls|

  00040			 AREA	 |.pdata|, PDATA
|$T39327| DCD	|$LN8@DllMain|
	DCD	0x40001904
; Function compile flags: /Odtp

  00990			 AREA	 |.text|, CODE, ARM

  00990		 |DllMain| PROC

; 338  : {

  00990		 |$LN8@DllMain|
  00990	e1a0c00d	 mov         r12, sp
  00994	e92d0007	 stmdb       sp!, {r0 - r2}
  00998	e92d5000	 stmdb       sp!, {r12, lr}
  0099c	e24dd004	 sub         sp, sp, #4
  009a0		 |$M39324|

; 339  :     if (dwReason==DLL_PROCESS_ATTACH)

  009a0	e59d3010	 ldr         r3, [sp, #0x10]
  009a4	e3530001	 cmp         r3, #1
  009a8	1a000004	 bne         |$LN3@DllMain|

; 340  :     {
; 341  :         DisableThreadLibraryCalls((HMODULE)hDll);

  009ac	e59d000c	 ldr         r0, [sp, #0xC]
  009b0	eb000000	 bl          DisableThreadLibraryCalls

; 342  :         InitializeCriticalSection(&sgUseSec);

  009b4	e59f0034	 ldr         r0, [pc, #0x34]
  009b8	eb000000	 bl          InitializeCriticalSection
  009bc	ea000005	 b           |$LN2@DllMain|
  009c0		 |$LN3@DllMain|

; 343  :     }
; 344  :     else if (dwReason==DLL_PROCESS_DETACH)

  009c0	e59d3010	 ldr         r3, [sp, #0x10]
  009c4	e3530000	 cmp         r3, #0
  009c8	1a000002	 bne         |$LN1@DllMain|

; 345  :     {
; 346  :         ShutDown();

  009cc	eb000000	 bl          ShutDown

; 347  :         DeleteCriticalSection(&sgUseSec);

  009d0	e59f0018	 ldr         r0, [pc, #0x18]
  009d4	eb000000	 bl          DeleteCriticalSection
  009d8		 |$LN1@DllMain|
  009d8		 |$LN2@DllMain|

; 348  :     }
; 349  :     return TRUE;

  009d8	e3a03001	 mov         r3, #1
  009dc	e58d3000	 str         r3, [sp]

; 350  : }

  009e0	e59d0000	 ldr         r0, [sp]
  009e4	e28dd004	 add         sp, sp, #4
  009e8	e89d6000	 ldmia       sp, {sp, lr}
  009ec	e12fff1e	 bx          lr
  009f0		 |$LN9@DllMain|
  009f0		 |$LN10@DllMain|
  009f0	00000000	 DCD         |sgUseSec|
  009f4		 |$M39325|

			 ENDP  ; |DllMain|

	IMPORT	|CloseHandle|

  00048			 AREA	 |.pdata|, PDATA
|$T39334| DCD	|$LN6@ShutDown|
	DCD	0x40001301
; Function compile flags: /Odtp

  009f4			 AREA	 |.text|, CODE, ARM

  009f4		 |ShutDown| PROC

; 44   : {

  009f4		 |$LN6@ShutDown|
  009f4	e52de004	 str         lr, [sp, #-4]!
  009f8		 |$M39331|

; 45   :     EnterCriticalSection(&sgUseSec);

  009f8	e59f0038	 ldr         r0, [pc, #0x38]
  009fc	eb000000	 bl          EnterCriticalSection

; 46   :     if (ghDrv!=NULL)

  00a00	e59f3034	 ldr         r3, [pc, #0x34]
  00a04	e5933000	 ldr         r3, [r3]
  00a08	e3530000	 cmp         r3, #0
  00a0c	0a000005	 beq         |$LN1@ShutDown|

; 47   :     {
; 48   :         CloseHandle(ghDrv);

  00a10	e59f3024	 ldr         r3, [pc, #0x24]
  00a14	e5930000	 ldr         r0, [r3]
  00a18	eb000000	 bl          CloseHandle

; 49   :         ghDrv = NULL;

  00a1c	e59f2018	 ldr         r2, [pc, #0x18]
  00a20	e3a03000	 mov         r3, #0
  00a24	e5823000	 str         r3, [r2]
  00a28		 |$LN1@ShutDown|

; 50   :     }
; 51   :     LeaveCriticalSection(&sgUseSec);

  00a28	e59f0008	 ldr         r0, [pc, #8]
  00a2c	eb000000	 bl          LeaveCriticalSection

; 52   : }

  00a30	e49de004	 ldr         lr, [sp], #4
  00a34	e12fff1e	 bx          lr
  00a38		 |$LN7@ShutDown|
  00a38		 |$LN8@ShutDown|
  00a38	00000000	 DCD         |sgUseSec|
  00a3c		 |$LN9@ShutDown|
  00a3c	00000000	 DCD         |ghDrv|
  00a40		 |$M39332|

			 ENDP  ; |ShutDown|

	END
