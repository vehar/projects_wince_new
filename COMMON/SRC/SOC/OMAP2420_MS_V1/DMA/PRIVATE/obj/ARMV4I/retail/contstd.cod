; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\DMA\PRIVATE\contstd.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??0DMAController@@QAA@XZ|		; DMAController::DMAController
	EXPORT	|??_7DMAController@@6B@| [ DATA ]	; DMAController::`vftable'
	IMPORT	|??_EDMAController@@UAAPAXI@Z|, WEAK |??_GDMAController@@UAAPAXI@Z| ; DMAController::`vector deleting destructor', DMAController::`scalar deleting destructor'
	IMPORT	|_purecall|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.h

  00000			 AREA	 |.pdata|, PDATA
|$T36541| DCD	|$LN5@DMAControl|
	DCD	0x40000500

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7DMAController@@6B@| DCD |??_EDMAController@@UAAPAXI@Z| ; DMAController::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DMAController@@QAA@XZ| PROC	; DMAController::DMAController

; 94   :     DMAController(void) {}

  00000		 |$LN5@DMAControl|
  00000		 |$M36538|
  00000	e1a02000	 mov         r2, r0
  00004	e59f3004	 ldr         r3, [pc, #4]
  00008	e5823000	 str         r3, [r2]
  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@DMAControl|
  00010		 |$LN7@DMAControl|
  00010	00000000	 DCD         |??_7DMAController@@6B@|
  00014		 |$M36539|

			 ENDP  ; |??0DMAController@@QAA@XZ|, DMAController::DMAController

	EXPORT	|??1DMAController@@UAA@XZ|		; DMAController::~DMAController

  00000			 AREA	 |.pdata|, PDATA
|$T36551| DCD	|$LN5@DMAControl@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1DMAController@@UAA@XZ| PROC	; DMAController::~DMAController

; 95   :     virtual ~DMAController(void) {}

  00000		 |$LN5@DMAControl@2|
  00000		 |$M36548|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@DMAControl@2|
  0000c		 |$LN7@DMAControl@2|
  0000c	00000000	 DCD         |??_7DMAController@@6B@|
  00010		 |$M36549|

			 ENDP  ; |??1DMAController@@UAA@XZ|, DMAController::~DMAController

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T36567| DCD	|$LN8@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GDMAController@@UAAPAXI@Z| PROC	; DMAController::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36564|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN9@scalar|
  00024		 |$LN10@scalar|
  00024	00000000	 DCD         |??_7DMAController@@6B@|
  00028		 |$M36565|

			 ENDP  ; |??_GDMAController@@UAAPAXI@Z|, DMAController::`scalar deleting destructor'

	EXPORT	|??0StandardDMAController@@QAA@I@Z|	; StandardDMAController::StandardDMAController
	EXPORT	|??_7StandardDMAController@@6B@| [ DATA ] ; StandardDMAController::`vftable'
	EXPORT	|?AllocChannels@StandardDMAController@@UAAIIAAI@Z| ; StandardDMAController::AllocChannels
	EXPORT	|?FreeChannels@StandardDMAController@@UAAII@Z| ; StandardDMAController::FreeChannels
	IMPORT	|??_EStandardDMAController@@UAAPAXI@Z|, WEAK |??_GStandardDMAController@@UAAPAXI@Z| ; StandardDMAController::`vector deleting destructor', StandardDMAController::`scalar deleting destructor'

  00000			 AREA	 |.pdata|, PDATA
|$T36586| DCD	|$LN12@StandardDM|
	DCD	0x40001101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7StandardDMAController@@6B@| DCD |??_EStandardDMAController@@UAAPAXI@Z| ; StandardDMAController::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?AllocChannels@StandardDMAController@@UAAIIAAI@Z|
	DCD	|?FreeChannels@StandardDMAController@@UAAII@Z|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\contstd.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0StandardDMAController@@QAA@I@Z| PROC ; StandardDMAController::StandardDMAController

; 50   : {

  00000		 |$LN12@StandardDM|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36583|
  00004	e3510000	 cmp         r1, #0
  00008	e59f3030	 ldr         r3, [pc, #0x30]

; 51   :     mNumChannels = aNumChannels;

  0000c	e5801004	 str         r1, [r0, #4]

; 52   :     uint i;
; 53   :     for(i=0;i<aNumChannels;i++)

  00010	e3a02000	 mov         r2, #0
  00014	e5803000	 str         r3, [r0]
  00018	0a000006	 beq         |$LN1@StandardDM|
  0001c	e5903008	 ldr         r3, [r0, #8]
  00020	e3a0e001	 mov         lr, #1
  00024		 |$LL3@StandardDM|

; 54   :     {
; 55   :         mCurFreeChannelMask |= (1<<i);

  00024	e183321e	 orr         r3, r3, lr, lsl r2
  00028	e2822001	 add         r2, r2, #1
  0002c	e1520001	 cmp         r2, r1
  00030	3afffffb	 bcc         |$LL3@StandardDM|

; 52   :     uint i;
; 53   :     for(i=0;i<aNumChannels;i++)

  00034	e5803008	 str         r3, [r0, #8]
  00038		 |$LN1@StandardDM|

; 56   :     }
; 57   : }

  00038	e49de004	 ldr         lr, [sp], #4
  0003c	e12fff1e	 bx          lr
  00040		 |$LN13@StandardDM|
  00040		 |$LN14@StandardDM|
  00040	00000000	 DCD         |??_7StandardDMAController@@6B@|
  00044		 |$M36584|

			 ENDP  ; |??0StandardDMAController@@QAA@I@Z|, StandardDMAController::StandardDMAController

	EXPORT	|??1StandardDMAController@@UAA@XZ|	; StandardDMAController::~StandardDMAController

  00000			 AREA	 |.pdata|, PDATA
|$T36599| DCD	|$LN7@StandardDM@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1StandardDMAController@@UAA@XZ| PROC ; StandardDMAController::~StandardDMAController
  00000		 |$LN7@StandardDM@2|
  00000		 |$M36596|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN8@StandardDM@2|
  0000c		 |$LN9@StandardDM@2|
  0000c	00000000	 DCD         |??_7DMAController@@6B@|
  00010		 |$M36597|

			 ENDP  ; |??1StandardDMAController@@UAA@XZ|, StandardDMAController::~StandardDMAController


  00000			 AREA	 |.pdata|, PDATA
|$T36620| DCD	|$LN10@scalar@2|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GStandardDMAController@@UAAPAXI@Z| PROC ; StandardDMAController::`scalar deleting destructor'
  00000		 |$LN10@scalar@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36617|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN11@scalar@2|
  00024		 |$LN12@scalar@2|
  00024	00000000	 DCD         |??_7DMAController@@6B@|
  00028		 |$M36618|

			 ENDP  ; |??_GStandardDMAController@@UAAPAXI@Z|, StandardDMAController::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T36648| DCD	|$LN32@AllocChann|
	DCD	0x40003e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllocChannels@StandardDMAController@@UAAIIAAI@Z| PROC ; StandardDMAController::AllocChannels

; 60   : {

  00000		 |$LN32@AllocChann|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M36645|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06000	 mov         r6, r0

; 61   :     /* count free bits in mCurFreeChannelMask, up to required # of channels */
; 62   :     uint i;
; 63   :     uint avail = 0;
; 64   :     for(i=0;i<32;i++)

  0000c	e5964008	 ldr         r4, [r6, #8]
  00010	e3a03000	 mov         r3, #0
  00014	e3a0e000	 mov         lr, #0
  00018	e3a02001	 mov         r2, #1
  0001c		 |$LL18@AllocChann|

; 65   :     {
; 66   :         if (mCurFreeChannelMask & (1<<i))

  0001c	e1140e12	 tst         r4, r2, lsl lr
  00020	0a000002	 beq         |$LN17@AllocChann|

; 67   :         {
; 68   :             avail++;

  00024	e2833001	 add         r3, r3, #1

; 69   :             if (avail==num)

  00028	e1530001	 cmp         r3, r1
  0002c	0a000008	 beq         |$LN13@AllocChann|
  00030		 |$LN17@AllocChann|

; 61   :     /* count free bits in mCurFreeChannelMask, up to required # of channels */
; 62   :     uint i;
; 63   :     uint avail = 0;
; 64   :     for(i=0;i<32;i++)

  00030	e28ee001	 add         lr, lr, #1
  00034	e35e0020	 cmp         lr, #0x20
  00038	3afffff7	 bcc         |$LL18@AllocChann|

; 70   :                 break;
; 71   :         }
; 72   :     }
; 73   :     if (avail!=num)

  0003c	e1530001	 cmp         r3, r1
  00040	0a000003	 beq         |$LN13@AllocChann|
  00044		 |$LN29@AllocChann|
  00044	e3a03136	 mov         r3, #0x36, 2

; 74   :         return DMADRVERR_RESOURCES;

  00048	e3830712	 orr         r0, r3, #0x12, 14

; 108  : }

  0004c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN13@AllocChann|

; 75   : 
; 76   :     uint ret = 0;
; 77   : 
; 78   :     /* take required channels if they are desired and available */
; 79   :     if (aReqMask)

  00054	e5953000	 ldr         r3, [r5]
  00058	e3a0e000	 mov         lr, #0
  0005c	e1b02003	 movs        r2, r3
  00060	0a00000d	 beq         |$LN8@AllocChann|

; 80   :     {
; 81   :         if ((aReqMask&mCurFreeChannelMask)!=aReqMask)

  00064	e0023004	 and         r3, r2, r4
  00068	e1530002	 cmp         r3, r2

; 82   :             return DMADRVERR_RESOURCES; // at least one required channel is in use 

  0006c	1afffff4	 bne         |$LN29@AllocChann|

; 83   :         ret = aReqMask;
; 84   :         mCurFreeChannelMask &= ~aReqMask;

  00070	e1c43002	 bic         r3, r4, r2
  00074	e5863008	 str         r3, [r6, #8]
  00078	e1a0e002	 mov         lr, r2

; 85   :         for(i=0;i<32;i++)

  0007c	e5952000	 ldr         r2, [r5]
  00080	e3a03000	 mov         r3, #0
  00084	e3a00001	 mov         r0, #1
  00088		 |$LL10@AllocChann|

; 86   :         {
; 87   :             if (aReqMask & (1<<i))

  00088	e1120310	 tst         r2, r0, lsl r3
  0008c	e2833001	 add         r3, r3, #1

; 88   :                 num--;

  00090	12411001	 subne       r1, r1, #1
  00094	e3530020	 cmp         r3, #0x20
  00098	3afffffa	 bcc         |$LL10@AllocChann|
  0009c		 |$LN8@AllocChann|

; 89   :         }
; 90   :     }
; 91   : 
; 92   :     if (num)

  0009c	e3510000	 cmp         r1, #0
  000a0	0a000010	 beq         |$LN3@AllocChann|

; 93   :     {
; 94   :         /* some non-specific channels still needed */
; 95   :         uint chk = 0;

  000a4	e3a00000	 mov         r0, #0

; 102  :     }
; 103  : 
; 104  :     /* return allocated channel mask */
; 105  :     aReqMask = ret;

  000a8	e3a02001	 mov         r2, #1
  000ac	e3a07001	 mov         r7, #1
  000b0	e3a08001	 mov         r8, #1
  000b4		 |$LL5@AllocChann|
  000b4	e5964008	 ldr         r4, [r6, #8]
  000b8	e1120004	 tst         r2, r4
  000bc	1a000003	 bne         |$LN1@AllocChann|

; 96   :         do {
; 97   :             while (!(mCurFreeChannelMask & (1<<chk)))

  000c0	e1a03004	 mov         r3, r4
  000c4		 |$LL2@AllocChann|

; 98   :                 chk++;

  000c4	e2800001	 add         r0, r0, #1
  000c8	e1130017	 tst         r3, r7, lsl r0
  000cc	0afffffc	 beq         |$LL2@AllocChann|
  000d0		 |$LN1@AllocChann|

; 99   :             ret |= (1<<chk);

  000d0	e1a02018	 mov         r2, r8, lsl r0

; 100  :             mCurFreeChannelMask &= ~(1<<chk);
; 101  :         } while (--num);

  000d4	e2511001	 subs        r1, r1, #1
  000d8	e1c43002	 bic         r3, r4, r2
  000dc	e5863008	 str         r3, [r6, #8]
  000e0	e182e00e	 orr         lr, r2, lr
  000e4	1afffff2	 bne         |$LL5@AllocChann|
  000e8		 |$LN3@AllocChann|

; 102  :     }
; 103  : 
; 104  :     /* return allocated channel mask */
; 105  :     aReqMask = ret;

  000e8	e585e000	 str         lr, [r5]

; 106  : 
; 107  :     return 0;

  000ec	e3a00000	 mov         r0, #0

; 108  : }

  000f0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$M36646|

			 ENDP  ; |?AllocChannels@StandardDMAController@@UAAIIAAI@Z|, StandardDMAController::AllocChannels


  00000			 AREA	 |.pdata|, PDATA
|$T36662| DCD	|$LN10@FreeChanne|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FreeChannels@StandardDMAController@@UAAII@Z| PROC ; StandardDMAController::FreeChannels

; 111  : {

  00000		 |$LN10@FreeChanne|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36659|
  00004	e3510000	 cmp         r1, #0

; 112  :     uint bitPos = 0;

  00008	e3a02000	 mov         r2, #0

; 113  :     while (aChanMask)

  0000c	0a000007	 beq         |$LN2@FreeChanne|
  00010	e3a0e001	 mov         lr, #1
  00014		 |$LL3@FreeChanne|

; 114  :     {
; 115  :         if (aChanMask&1)

  00014	e3110001	 tst         r1, #1

; 116  :             mCurFreeChannelMask |= (1<<bitPos);

  00018	15903008	 ldrne       r3, [r0, #8]
  0001c	1183321e	 orrne       r3, r3, lr, lsl r2

; 117  :         aChanMask>>=1;
; 118  :         bitPos++;

  00020	e2822001	 add         r2, r2, #1
  00024	15803008	 strne       r3, [r0, #8]
  00028	e1b010a1	 movs        r1, r1, lsr #1
  0002c	1afffff8	 bne         |$LL3@FreeChanne|
  00030		 |$LN2@FreeChanne|

; 119  :     }
; 120  : 
; 121  :     return 0;

  00030	e3a00000	 mov         r0, #0

; 122  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M36660|

			 ENDP  ; |?FreeChannels@StandardDMAController@@UAAII@Z|, StandardDMAController::FreeChannels

	EXPORT	|?GetRevision@StandardDMAController@@IAA_NPCXAAI1@Z| ; StandardDMAController::GetRevision

  00000			 AREA	 |.pdata|, PDATA
|$T36676| DCD	|$LN8@GetRevisio|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetRevision@StandardDMAController@@IAA_NPCXAAI1@Z| PROC ; StandardDMAController::GetRevision

; 125  : {

  00000		 |$LN8@GetRevisio|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36673|
  00004	e1a00003	 mov         r0, r3
  00008	e1a0e002	 mov         lr, r2
  0000c	e3510000	 cmp         r1, #0

; 126  :     if (!pBase)

  00010	1a000002	 bne         |$LN2@GetRevisio|
  00014		 |$LN5@GetRevisio|

; 127  :         return false;

  00014	e3a00000	 mov         r0, #0

; 140  : }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$LN2@GetRevisio|

; 128  : 
; 129  :     /* pBase is mapped uncached address of standard dma controller subtype */
; 130  :     volatile OMAP2420_SDMA_REGS	*pCont = (volatile OMAP2420_SDMA_REGS *)pBase;
; 131  : 
; 132  :     uint rev = pCont->DMA4_REVISION;

  00020	e5913000	 ldr         r3, [r1]
  00024	e1b02003	 movs        r2, r3

; 133  : 
; 134  :     if (!rev)
; 135  :         return false;

  00028	0afffff9	 beq         |$LN5@GetRevisio|

; 136  : 
; 137  :     major = (rev&0xF0)>>4;

  0002c	e1a03c02	 mov         r3, r2, lsl #24
  00030	e1a03e23	 mov         r3, r3, lsr #28
  00034	e58e3000	 str         r3, [lr]

; 138  :     minor = (rev&0x0F);

  00038	e202300f	 and         r3, r2, #0xF
  0003c	e5803000	 str         r3, [r0]

; 139  :     return true;

  00040	e3a00001	 mov         r0, #1

; 140  : }

  00044	e49de004	 ldr         lr, [sp], #4
  00048	e12fff1e	 bx          lr
  0004c		 |$M36674|

			 ENDP  ; |?GetRevision@StandardDMAController@@IAA_NPCXAAI1@Z|, StandardDMAController::GetRevision

	EXPORT	|?Reset@StandardDMAController@@IAAXPCX@Z| ; StandardDMAController::Reset
	IMPORT	|Sleep|

  00000			 AREA	 |.pdata|, PDATA
|$T36692| DCD	|$LN16@Reset|
	DCD	0x40001a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Reset@StandardDMAController@@IAAXPCX@Z| PROC ; StandardDMAController::Reset

; 143  : {

  00000		 |$LN16@Reset|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36689|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 144  :     /* pBase is mapped uncached address of standard dma controller subtype */
; 145  :     volatile OMAP2420_SDMA_REGS	*pCont = (volatile OMAP2420_SDMA_REGS *)pBase;
; 146  : 
; 147  :     DEBUGMSG(ZONE_FUNCTION, (L"+StandardDMAController::Reset()\r\n"));
; 148  : 
; 149  :     /* initiate software reset of controller */
; 150  :     pCont->DMA4_OCP_SYSCONFIG |= 0x2;

  0000c	e595302c	 ldr         r3, [r5, #0x2C]

; 151  :     /* wait for reset to complete */
; 152  :     while (!(pCont->DMA4_SYSSTATUS&1))

  00010	e3833002	 orr         r3, r3, #2
  00014	e585302c	 str         r3, [r5, #0x2C]
  00018	ea000001	 b           |$LN13@Reset|
  0001c		 |$LL5@Reset|

; 153  :         Sleep(100);

  0001c	e3a00064	 mov         r0, #0x64
  00020	eb000000	 bl          Sleep
  00024		 |$LN13@Reset|
  00024	e5953028	 ldr         r3, [r5, #0x28]
  00028	e3130001	 tst         r3, #1
  0002c	0afffffa	 beq         |$LL5@Reset|

; 154  : 
; 155  :     uint i;
; 156  :     for(i=0;i<mNumChannels;i++)

  00030	e5943004	 ldr         r3, [r4, #4]
  00034	e3a02000	 mov         r2, #0
  00038	e3530000	 cmp         r3, #0
  0003c	9a000007	 bls         |$LN1@Reset|
  00040	e3a01001	 mov         r1, #1
  00044		 |$LL3@Reset|

; 157  :     {
; 158  :         mCurFreeChannelMask |= (1<<i);

  00044	e5943008	 ldr         r3, [r4, #8]
  00048	e1833211	 orr         r3, r3, r1, lsl r2
  0004c	e2822001	 add         r2, r2, #1
  00050	e5843008	 str         r3, [r4, #8]
  00054	e5943004	 ldr         r3, [r4, #4]
  00058	e1520003	 cmp         r2, r3
  0005c	3afffff8	 bcc         |$LL3@Reset|
  00060		 |$LN1@Reset|

; 159  :     }
; 160  : 
; 161  :     DEBUGMSG(ZONE_FUNCTION, (L"-StandardDMAController::Reset()\r\n"));
; 162  : }

  00060	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M36690|

			 ENDP  ; |?Reset@StandardDMAController@@IAAXPCX@Z|, StandardDMAController::Reset

	END
