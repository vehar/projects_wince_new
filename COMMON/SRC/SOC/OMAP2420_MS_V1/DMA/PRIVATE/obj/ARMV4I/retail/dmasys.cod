; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\DMA\PRIVATE\dmasys.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?gpSysDMACont@@3PAVSysStandardDMAController@@A| [ DATA ] ; gpSysDMACont
	EXPORT	|?gpDSPDMACont@@3PAVDSPStandardDMAController@@A| [ DATA ] ; gpDSPDMACont
	EXPORT	|?gpCamDMACont@@3PAVCamStandardDMAController@@A| [ DATA ] ; gpCamDMACont

  00000			 AREA	 |.bss|, NOINIT
|?gpSysDMACont@@3PAVSysStandardDMAController@@A| % 0x4	; gpSysDMACont
|?gpDSPDMACont@@3PAVDSPStandardDMAController@@A| % 0x4	; gpDSPDMACont
|?gpCamDMACont@@3PAVCamStandardDMAController@@A| % 0x4	; gpCamDMACont

  00000			 AREA	 |.data|, DATA
|sgControllerIdMap| DCD 0x1
	DCB	"System", 0x0
	%	25
	DCD	0x0
	DCD	|?gpSysDMACont@@3PAVSysStandardDMAController@@A|
	DCD	0x2
	DCB	"DSP", 0x0
	%	28
	DCD	0x1
	DCD	|?gpDSPDMACont@@3PAVDSPStandardDMAController@@A|
	DCD	0x3
	DCB	"Camera", 0x0
	%	25
	DCD	0x2
	DCD	|?gpCamDMACont@@3PAVCamStandardDMAController@@A|
	EXPORT	|??0DMAUser@@QAA@XZ|			; DMAUser::DMAUser
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.h

  00000			 AREA	 |.pdata|, PDATA
|$T36807| DCD	|$LN5@DMAUser|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DMAUser@@QAA@XZ| PROC		; DMAUser::DMAUser

; 77   :     DMAUser(void)

  00000		 |$LN5@DMAUser|
  00000		 |$M36804|

; 78   :     {
; 79   :         mUserKey = 0;

  00000	e3a03000	 mov         r3, #0
  00004	e5803000	 str         r3, [r0]

; 80   :         mChanMask = 0;

  00008	e5803004	 str         r3, [r0, #4]

; 81   :         mpCont = NULL;

  0000c	e5803008	 str         r3, [r0, #8]

; 82   :         mpNext = NULL;

  00010	e580300c	 str         r3, [r0, #0xC]

; 83   :     }

  00014	e12fff1e	 bx          lr
  00018		 |$M36805|

			 ENDP  ; |??0DMAUser@@QAA@XZ|, DMAUser::DMAUser

	EXPORT	|??1DMAController@@UAA@XZ|		; DMAController::~DMAController
	EXPORT	|??_7DMAController@@6B@| [ DATA ]	; DMAController::`vftable'
	IMPORT	|??_EDMAController@@UAAPAXI@Z|, WEAK |??_GDMAController@@UAAPAXI@Z| ; DMAController::`vector deleting destructor', DMAController::`scalar deleting destructor'
	IMPORT	|_purecall|

  00000			 AREA	 |.pdata|, PDATA
|$T36815| DCD	|$LN5@DMAControl|
	DCD	0x40000400

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7DMAController@@6B@| DCD |??_EDMAController@@UAAPAXI@Z| ; DMAController::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1DMAController@@UAA@XZ| PROC	; DMAController::~DMAController

; 95   :     virtual ~DMAController(void) {}

  00000		 |$LN5@DMAControl|
  00000		 |$M36812|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@DMAControl|
  0000c		 |$LN7@DMAControl|
  0000c	00000000	 DCD         |??_7DMAController@@6B@|
  00010		 |$M36813|

			 ENDP  ; |??1DMAController@@UAA@XZ|, DMAController::~DMAController

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T36831| DCD	|$LN8@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GDMAController@@UAAPAXI@Z| PROC	; DMAController::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36828|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN9@scalar|
  00024		 |$LN10@scalar|
  00024	00000000	 DCD         |??_7DMAController@@6B@|
  00028		 |$M36829|

			 ENDP  ; |??_GDMAController@@UAAPAXI@Z|, DMAController::`scalar deleting destructor'

	EXPORT	|??1StandardDMAController@@UAA@XZ|	; StandardDMAController::~StandardDMAController

  00000			 AREA	 |.pdata|, PDATA
|$T36844| DCD	|$LN7@StandardDM|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1StandardDMAController@@UAA@XZ| PROC ; StandardDMAController::~StandardDMAController
  00000		 |$LN7@StandardDM|
  00000		 |$M36841|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN8@StandardDM|
  0000c		 |$LN9@StandardDM|
  0000c	00000000	 DCD         |??_7DMAController@@6B@|
  00010		 |$M36842|

			 ENDP  ; |??1StandardDMAController@@UAA@XZ|, StandardDMAController::~StandardDMAController

	EXPORT	|??0DMASystem@@AAA@PAUHKEY__@@@Z|	; DMASystem::DMASystem
	IMPORT	|InitializeCriticalSection|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36857| DCD	|$LN5@DMASystem|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DMASystem@@AAA@PAUHKEY__@@@Z| PROC	; DMASystem::DMASystem

; 67   : {

  00000		 |$LN5@DMASystem|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36854|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 68   :     InitializeCriticalSection(&mSec);

  0000c	e285000c	 add         r0, r5, #0xC
  00010	eb000000	 bl          InitializeCriticalSection

; 69   :     mOpenContextUserId = 1;

  00014	e3a03001	 mov         r3, #1

; 70   :     mhRegKey = hActiveRegKey;
; 71   :     /* initialize defaults here */
; 72   : 	mpUserList = NULL;

  00018	e3a02000	 mov         r2, #0
  0001c	e5853000	 str         r3, [r5]
  00020	e5852004	 str         r2, [r5, #4]
  00024	e5854008	 str         r4, [r5, #8]

; 73   : }

  00028	e1a00005	 mov         r0, r5
  0002c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M36855|

			 ENDP  ; |??0DMASystem@@AAA@PAUHKEY__@@@Z|, DMASystem::DMASystem

	EXPORT	|??1DMASystem@@QAA@XZ|			; DMASystem::~DMASystem
	IMPORT	|DeleteCriticalSection|
	IMPORT	|RegCloseKey|

  00000			 AREA	 |.pdata|, PDATA
|$T36865| DCD	|$LN5@DMASystem@2|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1DMASystem@@QAA@XZ| PROC		; DMASystem::~DMASystem

; 76   : {

  00000		 |$LN5@DMASystem@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36862|
  00004	e1a04000	 mov         r4, r0

; 77   :     RegCloseKey(mhRegKey);

  00008	e5940008	 ldr         r0, [r4, #8]
  0000c	eb000000	 bl          RegCloseKey

; 78   :     mhRegKey = NULL;

  00010	e3a03000	 mov         r3, #0

; 79   :     DeleteCriticalSection(&mSec);

  00014	e284000c	 add         r0, r4, #0xC
  00018	e5843008	 str         r3, [r4, #8]
  0001c	eb000000	 bl          DeleteCriticalSection

; 80   : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M36863|

			 ENDP  ; |??1DMASystem@@QAA@XZ|, DMASystem::~DMASystem

	EXPORT	|?Open@DMASystem@@QAAIKKPAK@Z|		; DMASystem::Open

  00000			 AREA	 |.pdata|, PDATA
|$T36876| DCD	|$LN5@Open|
	DCD	0x40000800
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@DMASystem@@QAAIKKPAK@Z| PROC	; DMASystem::Open

; 168  : {

  00000		 |$LN5@Open|
  00000		 |$M36873|
  00000	e1a01000	 mov         r1, r0

; 169  :     /* do open here */
; 170  : //    RETAILMSG(1, (TEXT("DMASystem::Open()\r\n")));
; 171  :     *retOpenContext = mOpenContextUserId++;

  00004	e5912000	 ldr         r2, [r1]

; 172  :     return 0;

  00008	e3a00000	 mov         r0, #0
  0000c	e5832000	 str         r2, [r3]
  00010	e5913000	 ldr         r3, [r1]
  00014	e2833001	 add         r3, r3, #1
  00018	e5813000	 str         r3, [r1]

; 173  : }

  0001c	e12fff1e	 bx          lr
  00020		 |$M36874|

			 ENDP  ; |?Open@DMASystem@@QAAIKKPAK@Z|, DMASystem::Open

	EXPORT	|?Close@DMASystem@@QAAIK@Z|		; DMASystem::Close

  00000			 AREA	 |.pdata|, PDATA
|$T36894| DCD	|$LN14@Close|
	DCD	0x40002601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Close@DMASystem@@QAAIK@Z| PROC	; DMASystem::Close

; 176  : {

  00000		 |$LN14@Close|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M36891|
  00004	e1b08001	 movs        r8, r1
  00008	e1a07000	 mov         r7, r0

; 177  :     if (!dwOpenContext)

  0000c	03a03116	 moveq       r3, #0x16, 2

; 178  :         return DMADRVERR_NOTOPEN;

  00010	03835712	 orreq       r5, r3, #0x12, 14
  00014	0a00001c	 beq         |$LN6@Close|

; 179  : 
; 180  :     /* do close here */
; 181  : //    RETAILMSG(1, (TEXT("DMASystem::Close(%d)\r\n"),dwOpenContext));
; 182  : 
; 183  :     DMAUser *pChk = mpUserList;

  00018	e5973004	 ldr         r3, [r7, #4]

; 184  :     DMAUser *pPrev = NULL;

  0001c	e3a06000	 mov         r6, #0

; 185  : 
; 186  :     uint err = 0;

  00020	e3a05000	 mov         r5, #0
  00024	e1b04003	 movs        r4, r3

; 187  :     while (pChk)

  00028	0a000017	 beq         |$LN6@Close|
  0002c		 |$LL7@Close|

; 188  :     {
; 189  :         if (pChk->mUserKey==dwOpenContext)

  0002c	e5943000	 ldr         r3, [r4]
  00030	e1530008	 cmp         r3, r8
  00034	1a000010	 bne         |$LN5@Close|

; 190  :         {
; 191  :             /* remove pChk from dmauserlist */
; 192  :             if (pPrev)
; 193  :                 pPrev->mpNext = pChk->mpNext;

  00038	e594300c	 ldr         r3, [r4, #0xC]
  0003c	e3560000	 cmp         r6, #0

; 194  :             else
; 195  :                 mpUserList = pChk->mpNext;
; 196  :             DMAUser *pKill = pChk;

  00040	e1a09004	 mov         r9, r4
  00044	1586300c	 strne       r3, [r6, #0xC]
  00048	05873004	 streq       r3, [r7, #4]

; 197  :             pChk = pChk->mpNext;
; 198  :             
; 199  :             /* now release the channels it was using */
; 200  :             uint newErr = pKill->mpCont->FreeChannels(pKill->mChanMask);

  0004c	e5990008	 ldr         r0, [r9, #8]
  00050	e5991004	 ldr         r1, [r9, #4]
  00054	e594400c	 ldr         r4, [r4, #0xC]
  00058	e5903000	 ldr         r3, [r0]
  0005c	e5933018	 ldr         r3, [r3, #0x18]
  00060	e1a0e00f	 mov         lr, pc
  00064	e12fff13	 bx          r3

; 201  :             if (!err)

  00068	e3550000	 cmp         r5, #0

; 202  :                 err = newErr;

  0006c	01a05000	 moveq       r5, r0

; 203  : 
; 204  :             delete pKill;

  00070	e1a00009	 mov         r0, r9
  00074	eb000000	 bl          |??3@YAXPAX@Z|

; 205  :         }
; 206  :         else

  00078	ea000001	 b           |$LN1@Close|
  0007c		 |$LN5@Close|

; 207  :         {
; 208  :             pPrev = pChk;

  0007c	e1a06004	 mov         r6, r4

; 209  :             pChk = pChk->mpNext;

  00080	e594400c	 ldr         r4, [r4, #0xC]
  00084		 |$LN1@Close|

; 187  :     while (pChk)

  00084	e3540000	 cmp         r4, #0
  00088	1affffe7	 bne         |$LL7@Close|
  0008c		 |$LN6@Close|

; 210  :         }
; 211  :     }
; 212  : 
; 213  :     return err;
; 214  : }

  0008c	e1a00005	 mov         r0, r5
  00090	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M36892|

			 ENDP  ; |?Close@DMASystem@@QAAIK@Z|, DMASystem::Close

	EXPORT	|?Ioctl_GetSize@DMASystem@@AAAIPAEKPAK@Z| ; DMASystem::Ioctl_GetSize

  00000			 AREA	 |.pdata|, PDATA
|$T36908| DCD	|$LN9@Ioctl_GetS|
	DCD	0x40000c00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ioctl_GetSize@DMASystem@@AAAIPAEKPAK@Z| PROC ; DMASystem::Ioctl_GetSize

; 300  : {

  00000		 |$LN9@Ioctl_GetS|
  00000		 |$M36905|

; 301  :     if (outSize<sizeof(DWORD))

  00000	e3520004	 cmp         r2, #4
  00004	33a03132	 movcc       r3, #0x32, 2

; 302  :         return DMADRVERR_PARAM_SIZE_INVALID;

  00008	33830712	 orrcc       r0, r3, #0x12, 14

; 309  : }

  0000c	312fff1e	 bxcc        lr

; 303  :     if (outSize!=sizeof(DWORD))

  00010	13a0312e	 movne       r3, #0x2E, 2

; 302  :         return DMADRVERR_PARAM_SIZE_INVALID;

  00014	13830712	 orrne       r0, r3, #0x12, 14

; 304  :         return DMADRVERR_PARAM_INVALID;
; 305  :     uint numEntries = sizeof(sgControllerIdMap)/sizeof(DMAControllerIdMapping);
; 306  :     (*(DWORD *)pOutBuffer) = numEntries*sizeof(DMACONTROLLER);

  00018	03a0206c	 moveq       r2, #0x6C
  0001c	05812000	 streq       r2, [r1]

; 307  :     *pOutSize = sizeof(DWORD);

  00020	03a02004	 moveq       r2, #4
  00024	05832000	 streq       r2, [r3]

; 308  :     return 0;

  00028	03a00000	 moveq       r0, #0

; 309  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$M36906|

			 ENDP  ; |?Ioctl_GetSize@DMASystem@@AAAIPAEKPAK@Z|, DMASystem::Ioctl_GetSize

	EXPORT	|?Ioctl_GetEnum@DMASystem@@AAAIPAEKPAK@Z| ; DMASystem::Ioctl_GetEnum
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T36924| DCD	|$LN11@Ioctl_GetE|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ioctl_GetEnum@DMASystem@@AAAIPAEKPAK@Z| PROC ; DMASystem::Ioctl_GetEnum

; 312  : {

  00000		 |$LN11@Ioctl_GetE|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M36921|
  00004	e1a06003	 mov         r6, r3
  00008	e1a07001	 mov         r7, r1

; 313  :     uint numEntries = sizeof(sgControllerIdMap)/sizeof(DMAControllerIdMapping);
; 314  :     if (outSize<numEntries*sizeof(DMACONTROLLER))

  0000c	e352006c	 cmp         r2, #0x6C
  00010	33a03132	 movcc       r3, #0x32, 2

; 315  :         return DMADRVERR_PARAM_SIZE_INVALID;

  00014	33830712	 orrcc       r0, r3, #0x12, 14

; 325  : }

  00018	38bd40f0	 ldmccia     sp!, {r4 - r7, lr}
  0001c	312fff1e	 bxcc        lr

; 316  :     DMACONTROLLER *pTarg = (DMACONTROLLER *)pOutBuffer;

  00020	e59f4034	 ldr         r4, [pc, #0x34]
  00024	e3a05003	 mov         r5, #3
  00028		 |$LL3@Ioctl_GetE|

; 317  :     uint i;
; 318  :     for(i=0;i<numEntries;i++)
; 319  :     {
; 320  :         *pTarg = sgControllerIdMap[i].mEntry;

  00028	e3a02024	 mov         r2, #0x24
  0002c	e1a01004	 mov         r1, r4
  00030	e1a00007	 mov         r0, r7
  00034	eb000000	 bl          memcpy

; 321  :         pTarg++;

  00038	e2877024	 add         r7, r7, #0x24
  0003c	e284402c	 add         r4, r4, #0x2C
  00040	e2555001	 subs        r5, r5, #1
  00044	1afffff7	 bne         |$LL3@Ioctl_GetE|

; 322  :     }
; 323  :     *pOutSize = numEntries*sizeof(DMACONTROLLER);

  00048	e3a0306c	 mov         r3, #0x6C
  0004c	e5863000	 str         r3, [r6]

; 324  :     return 0;

  00050	e3a00000	 mov         r0, #0

; 325  : }

  00054	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$LN12@Ioctl_GetE|
  0005c		 |$LN13@Ioctl_GetE|
  0005c	00000000	 DCD         |sgControllerIdMap|
  00060		 |$M36922|

			 ENDP  ; |?Ioctl_GetEnum@DMASystem@@AAAIPAEKPAK@Z|, DMASystem::Ioctl_GetEnum

	EXPORT	|?Ioctl_Open@DMASystem@@AAAIKAAU_dmaIOCTL@@0@Z| ; DMASystem::Ioctl_Open
	IMPORT	|??2@YAPAXI@Z|				; operator new
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.h

  00000			 AREA	 |.pdata|, PDATA
|$T36960| DCD	|$LN27@Ioctl_Open|
	DCD	0x40004801
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ioctl_Open@DMASystem@@AAAIKAAU_dmaIOCTL@@0@Z| PROC ; DMASystem::Ioctl_Open

; 328  : {

  00000		 |$LN27@Ioctl_Open|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M36957|
  00004	e1a05003	 mov         r5, r3
  00008	e1a06002	 mov         r6, r2
  0000c	e1a08001	 mov         r8, r1
  00010	e1a07000	 mov         r7, r0

; 329  :     /* 
; 330  :     input:  0 - sysid of controller to open
; 331  :             1 - d/c
; 332  :             2 - d/c
; 333  :             3 - d/c
; 334  :     output: 0 - pUser pointer for this open or 0 if error
; 335  :             1 - 0
; 336  :             2 - 0
; 337  :             3 - 0
; 338  :     */
; 339  :     parmOut.mParam[0] = 0;

  00014	e3a09000	 mov         r9, #0

; 340  :     parmOut.mParam[1] = 0;
; 341  :     parmOut.mParam[2] = 0;
; 342  :     parmOut.mParam[3] = 0;
; 343  : 
; 344  :     DMAUser *pNewUser = new DMAUser;

  00018	e3a00010	 mov         r0, #0x10
  0001c	e5859000	 str         r9, [r5]
  00020	e5859004	 str         r9, [r5, #4]
  00024	e5859008	 str         r9, [r5, #8]
  00028	e585900c	 str         r9, [r5, #0xC]
  0002c	eb000000	 bl          |??2@YAPAXI@Z|
  00030	e3500000	 cmp         r0, #0
  00034	15809000	 strne       r9, [r0]
  00038	15809004	 strne       r9, [r0, #4]
  0003c	15809008	 strne       r9, [r0, #8]
  00040	1580900c	 strne       r9, [r0, #0xC]
  00044	03a00000	 moveq       r0, #0

; 345  :     if (!pNewUser)

  00048	e3500000	 cmp         r0, #0
  0004c	03a03136	 moveq       r3, #0x36, 2

; 346  :         return DMADRVERR_RESOURCES;

  00050	03834712	 orreq       r4, r3, #0x12, 14
  00054	0a00002d	 beq         |$LN11@Ioctl_Open|

; 347  : 
; 348  :     //parmIn.mParam[0] is id of controller to open
; 349  :     uint i;
; 350  :     uint numEntries = sizeof(sgControllerIdMap)/sizeof(DMAControllerIdMapping);
; 351  : 
; 352  :     for(i=0;i<numEntries;i++)

  00058	e59f40bc	 ldr         r4, [pc, #0xBC]
  0005c	e596e000	 ldr         lr, [r6]
  00060	e3a02000	 mov         r2, #0
  00064	e1a01004	 mov         r1, r4
  00068		 |$LL9@Ioctl_Open|

; 353  :     {
; 354  :         if (sgControllerIdMap[i].mEntry.mSysId==parmIn.mParam[0])

  00068	e5913000	 ldr         r3, [r1]
  0006c	e153000e	 cmp         r3, lr
  00070	0a000003	 beq         |$LN19@Ioctl_Open|
  00074	e2822001	 add         r2, r2, #1
  00078	e3520003	 cmp         r2, #3
  0007c	e281102c	 add         r1, r1, #0x2C
  00080	3afffff8	 bcc         |$LL9@Ioctl_Open|
  00084		 |$LN19@Ioctl_Open|

; 355  :             break;
; 356  :     }
; 357  :     if (i==numEntries)

  00084	e3520003	 cmp         r2, #3
  00088	03a0313a	 moveq       r3, #0x3A, 2
  0008c	0a000012	 beq         |$LN24@Ioctl_Open|

; 358  :     {
; 359  :         delete pNewUser;
; 360  :         return DMADRVERR_UNKNOWNCONTROLLER;
; 361  :     }
; 362  : 
; 363  :     DMAController *pCont = (DMAController *)(*sgControllerIdMap[i].mppCont);

  00090	e3a0302c	 mov         r3, #0x2C
  00094	e0234392	 mla         r3, r2, r3, r4

; 364  : 
; 365  :     /* look for existing dwOpenContext/pCont mapping for this user */
; 366  :     DMAUser *pUser = mpUserList;

  00098	e5972004	 ldr         r2, [r7, #4]
  0009c	e5933028	 ldr         r3, [r3, #0x28]
  000a0	e3520000	 cmp         r2, #0
  000a4	e5931000	 ldr         r1, [r3]

; 367  :     while (pUser)

  000a8	0a00000e	 beq         |$LN1@Ioctl_Open|
  000ac		 |$LL4@Ioctl_Open|

; 368  :     {
; 369  :         if ((pUser->mUserKey==dwOpenContext) &&
; 370  :             (pUser->mpCont==pCont))

  000ac	e5923000	 ldr         r3, [r2]
  000b0	e1530008	 cmp         r3, r8
  000b4	1a000002	 bne         |$LN2@Ioctl_Open|
  000b8	e5923008	 ldr         r3, [r2, #8]
  000bc	e1530001	 cmp         r3, r1
  000c0	0a000002	 beq         |$LN20@Ioctl_Open|
  000c4		 |$LN2@Ioctl_Open|

; 371  :             break;
; 372  :         pUser = pUser->mpNext;

  000c4	e592300c	 ldr         r3, [r2, #0xC]
  000c8	e1b02003	 movs        r2, r3
  000cc	1afffff6	 bne         |$LL4@Ioctl_Open|
  000d0		 |$LN20@Ioctl_Open|

; 373  :     }
; 374  :     if (pUser)

  000d0	e3520000	 cmp         r2, #0
  000d4	0a000003	 beq         |$LN1@Ioctl_Open|
  000d8	e3a0311e	 mov         r3, #0x1E, 2
  000dc		 |$LN24@Ioctl_Open|
  000dc	e3834712	 orr         r4, r3, #0x12, 14
  000e0	eb000000	 bl          |??3@YAXPAX@Z|
  000e4	ea000009	 b           |$LN11@Ioctl_Open|
  000e8		 |$LN1@Ioctl_Open|

; 375  :     {
; 376  :         delete pNewUser;
; 377  :         return DMADRVERR_ALREADYOPEN;
; 378  :     }
; 379  : 
; 380  :     /* ok.  we have a valid new open context for the controller for this user */
; 381  :     pNewUser->mUserKey = dwOpenContext;

  000e8	e5808000	 str         r8, [r0]

; 382  :     pNewUser->mpCont = pCont;

  000ec	e5801008	 str         r1, [r0, #8]

; 383  :     pNewUser->mpNext = mpUserList;

  000f0	e5973004	 ldr         r3, [r7, #4]

; 384  :     mpUserList = pNewUser;
; 385  : 
; 386  :     parmOut.mParam[0] = (uint)pNewUser;
; 387  :     parmOut.mParam[1] = 0;
; 388  :     parmOut.mParam[2] = 0;
; 389  :     parmOut.mParam[3] = 0;
; 390  : 
; 391  :     return 0;

  000f4	e3a04000	 mov         r4, #0
  000f8	e580300c	 str         r3, [r0, #0xC]
  000fc	e5870004	 str         r0, [r7, #4]
  00100	e5850000	 str         r0, [r5]
  00104	e5859004	 str         r9, [r5, #4]
  00108	e5859008	 str         r9, [r5, #8]
  0010c	e585900c	 str         r9, [r5, #0xC]
  00110		 |$LN11@Ioctl_Open|

; 392  : }

  00110	e1a00004	 mov         r0, r4
  00114	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN28@Ioctl_Open|
  0011c		 |$LN29@Ioctl_Open|
  0011c	00000000	 DCD         |sgControllerIdMap|
  00120		 |$M36958|

			 ENDP  ; |?Ioctl_Open@DMASystem@@AAAIKAAU_dmaIOCTL@@0@Z|, DMASystem::Ioctl_Open

	EXPORT	|?Ioctl_Acq@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| ; DMASystem::Ioctl_Acq

  00000			 AREA	 |.pdata|, PDATA
|$T36975| DCD	|$LN6@Ioctl_Acq|
	DCD	0x40001c02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ioctl_Acq@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| PROC ; DMASystem::Ioctl_Acq

; 395  : {

  00000		 |$LN6@Ioctl_Acq|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36972|
  00008	e1a04002	 mov         r4, r2

; 396  :     /* 
; 397  :     input:  0 - already-validated pUser pointer
; 398  :             1 - # of channels to alloc
; 399  :             2 - mask of required channels
; 400  :             3 - d/c
; 401  :     output: 0 - mask of allocated channels or 0 if error
; 402  :             1 - 0
; 403  :             2 - 0
; 404  :             3 - result code on error
; 405  :     */
; 406  :     DMAUser *pUser = (DMAUser *)parmIn.mParam[0];
; 407  : 
; 408  :     uint maskIO = parmIn.mParam[2];

  0000c	e5913008	 ldr         r3, [r1, #8]
  00010	e5915000	 ldr         r5, [r1]

; 409  :     parmOut.mParam[0] = 0;

  00014	e3a02000	 mov         r2, #0
  00018	e58d3000	 str         r3, [sp]
  0001c	e5842000	 str         r2, [r4]

; 410  :     parmOut.mParam[1] = 0;

  00020	e5842004	 str         r2, [r4, #4]

; 411  :     parmOut.mParam[2] = 0;

  00024	e5842008	 str         r2, [r4, #8]

; 412  :     parmOut.mParam[3] = pUser->mpCont->AllocChannels(parmIn.mParam[1],maskIO);

  00028	e5950008	 ldr         r0, [r5, #8]
  0002c	e5911004	 ldr         r1, [r1, #4]
  00030	e28d2000	 add         r2, sp, #0
  00034	e5903000	 ldr         r3, [r0]
  00038	e5933014	 ldr         r3, [r3, #0x14]
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3
  00044	e3500000	 cmp         r0, #0

; 413  :     if (!parmOut.mParam[3])
; 414  :     {
; 415  :         parmOut.mParam[0] = maskIO;

  00048	059d1000	 ldreq       r1, [sp]
  0004c	e584000c	 str         r0, [r4, #0xC]
  00050	05841000	 streq       r1, [r4]

; 416  :         pUser->mChanMask |= maskIO;

  00054	05953004	 ldreq       r3, [r5, #4]
  00058	01833001	 orreq       r3, r3, r1
  0005c	05853004	 streq       r3, [r5, #4]

; 417  :     }
; 418  :     return parmOut.mParam[3];

  00060	e594000c	 ldr         r0, [r4, #0xC]

; 419  : }

  00064	e28dd004	 add         sp, sp, #4
  00068	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M36973|

			 ENDP  ; |?Ioctl_Acq@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|, DMASystem::Ioctl_Acq

	EXPORT	|?Ioctl_Free@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| ; DMASystem::Ioctl_Free

  00000			 AREA	 |.pdata|, PDATA
|$T36987| DCD	|$LN6@Ioctl_Free|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ioctl_Free@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| PROC ; DMASystem::Ioctl_Free

; 422  : {

  00000		 |$LN6@Ioctl_Free|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36984|
  00004	e1a04002	 mov         r4, r2

; 423  :     /* 
; 424  :     input:  0 - already-validated pUser pointer
; 425  :             1 - mask of allocated channels to free
; 426  :             2 - d/c
; 427  :             3 - d/c
; 428  :     output: 0 - 0
; 429  :             1 - 0
; 430  :             2 - 0
; 431  :             3 - result code of operation
; 432  :     */
; 433  :     DMAUser *pUser = (DMAUser *)parmIn.mParam[0];

  00008	e5912000	 ldr         r2, [r1]

; 434  : 
; 435  :     parmIn.mParam[1] &= pUser->mChanMask;

  0000c	e5910004	 ldr         r0, [r1, #4]
  00010	e5923004	 ldr         r3, [r2, #4]
  00014	e0133000	 ands        r3, r3, r0
  00018	e5813004	 str         r3, [r1, #4]

; 436  :     if (!parmIn.mParam[1])

  0001c	03a0312e	 moveq       r3, #0x2E, 2

; 437  :         return DMADRVERR_PARAM_INVALID;

  00020	03830712	 orreq       r0, r3, #0x12, 14

; 443  : 
; 444  :     return parmOut.mParam[3];
; 445  : }

  00024	08bd4010	 ldmeqia     sp!, {r4, lr}
  00028	012fff1e	 bxeq        lr

; 438  : 
; 439  :     parmOut.mParam[0] = 0;

  0002c	e3a03000	 mov         r3, #0
  00030	e5843000	 str         r3, [r4]

; 440  :     parmOut.mParam[1] = 0;

  00034	e5843004	 str         r3, [r4, #4]

; 441  :     parmOut.mParam[2] = 0;

  00038	e5843008	 str         r3, [r4, #8]

; 442  :     parmOut.mParam[3] = pUser->mpCont->FreeChannels(parmIn.mParam[1]);

  0003c	e5920008	 ldr         r0, [r2, #8]
  00040	e5911004	 ldr         r1, [r1, #4]
  00044	e5903000	 ldr         r3, [r0]
  00048	e5933018	 ldr         r3, [r3, #0x18]
  0004c	e1a0e00f	 mov         lr, pc
  00050	e12fff13	 bx          r3
  00054	e584000c	 str         r0, [r4, #0xC]

; 443  : 
; 444  :     return parmOut.mParam[3];
; 445  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M36985|

			 ENDP  ; |?Ioctl_Free@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|, DMASystem::Ioctl_Free

	EXPORT	|?Ioctl_Set@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| ; DMASystem::Ioctl_Set

  00000			 AREA	 |.pdata|, PDATA
|$T36999| DCD	|$LN5@Ioctl_Set|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ioctl_Set@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| PROC ; DMASystem::Ioctl_Set

; 448  : {

  00000		 |$LN5@Ioctl_Set|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36996|
  00004	e1a05002	 mov         r5, r2

; 449  :     /* 
; 450  :     input:  0 - already-validated pUser pointer
; 451  :             1 - id of property to set
; 452  :             2 - value to set for property
; 453  :             3 - d/c
; 454  :     output: 0 - 0
; 455  :             1 - 0
; 456  :             2 - 0
; 457  :             3 - result code of operation
; 458  :     */
; 459  :     DMAUser *pUser = (DMAUser *)parmIn.mParam[0];

  00008	e5914000	 ldr         r4, [r1]

; 460  : 
; 461  :     parmOut.mParam[0] = 0;

  0000c	e3a03000	 mov         r3, #0
  00010	e5853000	 str         r3, [r5]

; 462  :     parmOut.mParam[1] = 0;

  00014	e5853004	 str         r3, [r5, #4]

; 463  :     parmOut.mParam[2] = 0;

  00018	e5853008	 str         r3, [r5, #8]

; 464  :     parmOut.mParam[3] = pUser->mpCont->Set(pUser->mChanMask,(DMA_CONT_PROPERTY)parmIn.mParam[1],parmIn.mParam[2]);

  0001c	e5940008	 ldr         r0, [r4, #8]
  00020	e5913008	 ldr         r3, [r1, #8]
  00024	e5912004	 ldr         r2, [r1, #4]
  00028	e590e000	 ldr         lr, [r0]
  0002c	e5941004	 ldr         r1, [r4, #4]
  00030	e59e400c	 ldr         r4, [lr, #0xC]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff14	 bx          r4
  0003c	e585000c	 str         r0, [r5, #0xC]

; 465  : 
; 466  :     return parmOut.mParam[3];
; 467  : }

  00040	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M36997|

			 ENDP  ; |?Ioctl_Set@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|, DMASystem::Ioctl_Set

	EXPORT	|?Ioctl_Get@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| ; DMASystem::Ioctl_Get

  00000			 AREA	 |.pdata|, PDATA
|$T37011| DCD	|$LN5@Ioctl_Get|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ioctl_Get@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| PROC ; DMASystem::Ioctl_Get

; 470  : {

  00000		 |$LN5@Ioctl_Get|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37008|
  00004	e1a05002	 mov         r5, r2

; 471  :     /* 
; 472  :     input:  0 - already-validated pUser pointer
; 473  :             1 - id of property to get
; 474  :             2 - d/c
; 475  :             3 - d/c
; 476  :     output: 0 - 0
; 477  :             1 - 0
; 478  :             2 - value retrieved for property
; 479  :             3 - result code of operation
; 480  :     */
; 481  :     DMAUser *pUser = (DMAUser *)parmIn.mParam[0];

  00008	e591e000	 ldr         lr, [r1]

; 482  : 
; 483  :     parmOut.mParam[0] = 0;
; 484  :     parmOut.mParam[1] = 0;
; 485  :     parmOut.mParam[2] = 0;
; 486  :     parmOut.mParam[3] = pUser->mpCont->Get(pUser->mChanMask,(DMA_CONT_PROPERTY)parmIn.mParam[1],&parmOut.mParam[2]);

  0000c	e1a03005	 mov         r3, r5
  00010	e3a02000	 mov         r2, #0
  00014	e5852000	 str         r2, [r5]
  00018	e5852004	 str         r2, [r5, #4]
  0001c	e5a32008	 str         r2, [r3, #8]!
  00020	e59e0008	 ldr         r0, [lr, #8]
  00024	e5912004	 ldr         r2, [r1, #4]
  00028	e59e1004	 ldr         r1, [lr, #4]
  0002c	e590e000	 ldr         lr, [r0]
  00030	e59e4010	 ldr         r4, [lr, #0x10]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff14	 bx          r4
  0003c	e585000c	 str         r0, [r5, #0xC]

; 487  : 
; 488  :     return parmOut.mParam[3];
; 489  : }

  00040	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M37009|

			 ENDP  ; |?Ioctl_Get@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|, DMASystem::Ioctl_Get

	EXPORT	|?Ioctl_Close@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| ; DMASystem::Ioctl_Close

  00000			 AREA	 |.pdata|, PDATA
|$T37030| DCD	|$LN14@Ioctl_Clos|
	DCD	0x40002701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Ioctl_Close@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z| PROC ; DMASystem::Ioctl_Close

; 492  : {

  00000		 |$LN14@Ioctl_Clos|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37027|
  00004	e1a05002	 mov         r5, r2

; 493  :     DMAUser *pUser = (DMAUser *)parmIn.mParam[0];
; 494  :     DMAUser *pPrev = NULL;
; 495  :     DMAUser *pChk = mpUserList;

  00008	e5903004	 ldr         r3, [r0, #4]
  0000c	e5914000	 ldr         r4, [r1]

; 496  : 
; 497  :     parmOut.mParam[0] = 0;

  00010	e3a02000	 mov         r2, #0
  00014	e1b01003	 movs        r1, r3
  00018	e3a0e000	 mov         lr, #0
  0001c	e5852000	 str         r2, [r5]

; 498  :     parmOut.mParam[1] = 0;

  00020	e5852004	 str         r2, [r5, #4]

; 499  :     parmOut.mParam[2] = 0;

  00024	e5852008	 str         r2, [r5, #8]

; 500  :     parmOut.mParam[3] = 0;

  00028	e585200c	 str         r2, [r5, #0xC]

; 501  : 
; 502  :     while ((pChk) && (pChk!=pUser))

  0002c	0a000014	 beq         |$LN11@Ioctl_Clos|
  00030		 |$LL6@Ioctl_Clos|
  00030	e1510004	 cmp         r1, r4
  00034	0a000003	 beq         |$LN5@Ioctl_Clos|

; 503  :     {
; 504  :         pPrev = pChk;
; 505  :         pChk = pChk->mpNext;

  00038	e591300c	 ldr         r3, [r1, #0xC]
  0003c	e1a0e001	 mov         lr, r1
  00040	e1b01003	 movs        r1, r3
  00044	1afffff9	 bne         |$LL6@Ioctl_Clos|
  00048		 |$LN5@Ioctl_Clos|

; 506  :     }
; 507  :     if (!pChk)

  00048	e3510000	 cmp         r1, #0
  0004c	0a00000c	 beq         |$LN11@Ioctl_Clos|

; 508  :         parmOut.mParam[3] = DMADRVERR_INVALIDHANDLE;
; 509  :     else
; 510  :     {
; 511  :         if (!pPrev)
; 512  :             mpUserList = pUser->mpNext;

  00050	e594300c	 ldr         r3, [r4, #0xC]
  00054	e35e0000	 cmp         lr, #0
  00058	05803004	 streq       r3, [r0, #4]

; 513  :         else
; 514  :             pPrev->mpNext = pUser->mpNext;

  0005c	158e300c	 strne       r3, [lr, #0xC]

; 515  : 
; 516  :         pUser->mpCont->FreeChannels(pUser->mChanMask);

  00060	e5940008	 ldr         r0, [r4, #8]
  00064	e5941004	 ldr         r1, [r4, #4]
  00068	e5903000	 ldr         r3, [r0]
  0006c	e5933018	 ldr         r3, [r3, #0x18]
  00070	e1a0e00f	 mov         lr, pc
  00074	e12fff13	 bx          r3

; 517  : 
; 518  :         delete pUser;

  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          |??3@YAXPAX@Z|
  00080	ea000002	 b           |$LN3@Ioctl_Clos|
  00084		 |$LN11@Ioctl_Clos|
  00084	e3a0311a	 mov         r3, #0x1A, 2
  00088	e3833712	 orr         r3, r3, #0x12, 14
  0008c	e585300c	 str         r3, [r5, #0xC]
  00090		 |$LN3@Ioctl_Clos|

; 519  :     }
; 520  : 
; 521  :     return parmOut.mParam[3];

  00090	e595000c	 ldr         r0, [r5, #0xC]

; 522  : }

  00094	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M37028|

			 ENDP  ; |?Ioctl_Close@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|, DMASystem::Ioctl_Close

	EXPORT	|??0DSPStandardDMAController@@QAA@XZ|	; DSPStandardDMAController::DSPStandardDMAController
	EXPORT	|??_7DSPStandardDMAController@@6B@| [ DATA ] ; DSPStandardDMAController::`vftable'
	EXPORT	|?Init@DSPStandardDMAController@@UAAIXZ| ; DSPStandardDMAController::Init
	EXPORT	|?ShutDown@DSPStandardDMAController@@UAAXXZ| ; DSPStandardDMAController::ShutDown
	EXPORT	|?Set@DSPStandardDMAController@@UAAIIW4DMA_seqProperty@@I@Z| ; DSPStandardDMAController::Set
	EXPORT	|?Get@DSPStandardDMAController@@UAAIIW4DMA_seqProperty@@PAI@Z| ; DSPStandardDMAController::Get
	IMPORT	|??0StandardDMAController@@QAA@I@Z|	; StandardDMAController::StandardDMAController
	IMPORT	|??_EDSPStandardDMAController@@UAAPAXI@Z|, WEAK |??_GDSPStandardDMAController@@UAAPAXI@Z| ; DSPStandardDMAController::`vector deleting destructor', DSPStandardDMAController::`scalar deleting destructor'
	IMPORT	|?AllocChannels@StandardDMAController@@UAAIIAAI@Z| ; StandardDMAController::AllocChannels
	IMPORT	|?FreeChannels@StandardDMAController@@UAAII@Z| ; StandardDMAController::FreeChannels
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.h

  00000			 AREA	 |.pdata|, PDATA
|$T37040| DCD	|$LN5@DSPStandar|
	DCD	0x40000a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7DSPStandardDMAController@@6B@| DCD |??_EDSPStandardDMAController@@UAAPAXI@Z| ; DSPStandardDMAController::`vftable'
	DCD	|?Init@DSPStandardDMAController@@UAAIXZ|
	DCD	|?ShutDown@DSPStandardDMAController@@UAAXXZ|
	DCD	|?Set@DSPStandardDMAController@@UAAIIW4DMA_seqProperty@@I@Z|
	DCD	|?Get@DSPStandardDMAController@@UAAIIW4DMA_seqProperty@@PAI@Z|
	DCD	|?AllocChannels@StandardDMAController@@UAAIIAAI@Z|
	DCD	|?FreeChannels@StandardDMAController@@UAAII@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DSPStandardDMAController@@QAA@XZ| PROC ; DSPStandardDMAController::DSPStandardDMAController

; 143  :     DSPStandardDMAController(void) : StandardDMAController(0) {}

  00000		 |$LN5@DSPStandar|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37037|
  00004	e1a04000	 mov         r4, r0
  00008	e3a01000	 mov         r1, #0
  0000c	eb000000	 bl          |??0StandardDMAController@@QAA@I@Z|
  00010	e59f300c	 ldr         r3, [pc, #0xC]
  00014	e1a00004	 mov         r0, r4
  00018	e5843000	 str         r3, [r4]
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN6@DSPStandar|
  00024		 |$LN7@DSPStandar|
  00024	00000000	 DCD         |??_7DSPStandardDMAController@@6B@|
  00028		 |$M37038|

			 ENDP  ; |??0DSPStandardDMAController@@QAA@XZ|, DSPStandardDMAController::DSPStandardDMAController


  00000			 AREA	 |.pdata|, PDATA
|$T37051| DCD	|$LN5@Init|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Init@DSPStandardDMAController@@UAAIXZ| PROC ; DSPStandardDMAController::Init

; 145  :     uint Init(void) { return 0; }

  00000		 |$LN5@Init|
  00000		 |$M37048|
  00000	e3a00000	 mov         r0, #0
  00004	e12fff1e	 bx          lr
  00008		 |$M37049|

			 ENDP  ; |?Init@DSPStandardDMAController@@UAAIXZ|, DSPStandardDMAController::Init


  00000			 AREA	 |.pdata|, PDATA
|$T37058| DCD	|$LN5@ShutDown|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ShutDown@DSPStandardDMAController@@UAAXXZ| PROC ; DSPStandardDMAController::ShutDown

; 146  :     void ShutDown(void) {}

  00000		 |$LN5@ShutDown|
  00000		 |$M37055|
  00000	e12fff1e	 bx          lr
  00004		 |$M37056|

			 ENDP  ; |?ShutDown@DSPStandardDMAController@@UAAXXZ|, DSPStandardDMAController::ShutDown


  00000			 AREA	 |.pdata|, PDATA
|$T37067| DCD	|$LN5@Set|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Set@DSPStandardDMAController@@UAAIIW4DMA_seqProperty@@I@Z| PROC ; DSPStandardDMAController::Set

; 147  :     uint Set(uint aChanMask, DMA_CONT_PROPERTY aProp, uint aValue) { return 0; }

  00000		 |$LN5@Set|
  00000		 |$M37064|
  00000	e3a00000	 mov         r0, #0
  00004	e12fff1e	 bx          lr
  00008		 |$M37065|

			 ENDP  ; |?Set@DSPStandardDMAController@@UAAIIW4DMA_seqProperty@@I@Z|, DSPStandardDMAController::Set


  00000			 AREA	 |.pdata|, PDATA
|$T37076| DCD	|$LN5@Get|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Get@DSPStandardDMAController@@UAAIIW4DMA_seqProperty@@PAI@Z| PROC ; DSPStandardDMAController::Get

; 148  :     uint Get(uint aChanMask, DMA_CONT_PROPERTY aProp, uint *apRetValue) { return 0; }

  00000		 |$LN5@Get|
  00000		 |$M37073|
  00000	e3a00000	 mov         r0, #0
  00004	e12fff1e	 bx          lr
  00008		 |$M37074|

			 ENDP  ; |?Get@DSPStandardDMAController@@UAAIIW4DMA_seqProperty@@PAI@Z|, DSPStandardDMAController::Get

	EXPORT	|??1DSPStandardDMAController@@UAA@XZ|	; DSPStandardDMAController::~DSPStandardDMAController

  00000			 AREA	 |.pdata|, PDATA
|$T37092| DCD	|$LN9@DSPStandar@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1DSPStandardDMAController@@UAA@XZ| PROC ; DSPStandardDMAController::~DSPStandardDMAController
  00000		 |$LN9@DSPStandar@2|
  00000		 |$M37089|
  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5803000	 str         r3, [r0]
  00008	e12fff1e	 bx          lr
  0000c		 |$LN10@DSPStandar@2|
  0000c		 |$LN11@DSPStandar@2|
  0000c	00000000	 DCD         |??_7DMAController@@6B@|
  00010		 |$M37090|

			 ENDP  ; |??1DSPStandardDMAController@@UAA@XZ|, DSPStandardDMAController::~DSPStandardDMAController


  00000			 AREA	 |.pdata|, PDATA
|$T37120| DCD	|$LN12@scalar@2|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GDSPStandardDMAController@@UAAPAXI@Z| PROC ; DSPStandardDMAController::`scalar deleting destructor'
  00000		 |$LN12@scalar@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37117|
  00004	e1a04000	 mov         r4, r0
  00008	e59f3014	 ldr         r3, [pc, #0x14]
  0000c	e3110001	 tst         r1, #1
  00010	e5843000	 str         r3, [r4]
  00014	1b000000	 blne        |??3@YAXPAX@Z|
  00018	e1a00004	 mov         r0, r4
  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN13@scalar@2|
  00024		 |$LN14@scalar@2|
  00024	00000000	 DCD         |??_7DMAController@@6B@|
  00028		 |$M37118|

			 ENDP  ; |??_GDSPStandardDMAController@@UAAPAXI@Z|, DSPStandardDMAController::`scalar deleting destructor'

	EXPORT	|?Create@DMASystem@@SAPAV1@PBG@Z|	; DMASystem::Create
	IMPORT	|RegOpenKeyExW|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37136| DCD	|$LN8@Create|
	DCD	0x40001602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Create@DMASystem@@SAPAV1@PBG@Z| PROC	; DMASystem::Create

; 58   : {

  00000		 |$LN8@Create|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37133|
  00008	e1a01000	 mov         r1, r0

; 59   :     HKEY hActiveKey;
; 60   :     DWORD dwRes = RegOpenKeyEx(HKEY_LOCAL_MACHINE,szActiveKey,0,0,&hActiveKey);

  0000c	e28d3004	 add         r3, sp, #4
  00010	e58d3000	 str         r3, [sp]
  00014	e3a03000	 mov         r3, #0
  00018	e3a02000	 mov         r2, #0
  0001c	e3a0010a	 mov         r0, #0xA, 2
  00020	eb000000	 bl          RegOpenKeyExW
  00024	e3500000	 cmp         r0, #0

; 61   :     if (FAILED(dwRes))
; 62   :         return NULL;

  00028	4a000006	 bmi         |$LN4@Create|

; 63   :     return new DMASystem(hActiveKey);

  0002c	e3a00020	 mov         r0, #0x20
  00030	eb000000	 bl          |??2@YAPAXI@Z|
  00034	e3500000	 cmp         r0, #0
  00038	0a000002	 beq         |$LN4@Create|
  0003c	e59d1004	 ldr         r1, [sp, #4]
  00040	eb000000	 bl          |??0DMASystem@@AAA@PAUHKEY__@@@Z|
  00044	ea000000	 b           |$LN5@Create|
  00048		 |$LN4@Create|
  00048	e3a00000	 mov         r0, #0
  0004c		 |$LN5@Create|

; 64   : }

  0004c	e28dd008	 add         sp, sp, #8
  00050	e49de004	 ldr         lr, [sp], #4
  00054	e12fff1e	 bx          lr
  00058		 |$M37134|

			 ENDP  ; |?Create@DMASystem@@SAPAV1@PBG@Z|, DMASystem::Create

	EXPORT	|?Init@DMASystem@@QAAIXZ|		; DMASystem::Init
	IMPORT	|??0SysStandardDMAController@@QAA@XZ|	; SysStandardDMAController::SysStandardDMAController
	IMPORT	|??0CamStandardDMAController@@QAA@XZ|	; CamStandardDMAController::CamStandardDMAController
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.h

  00000			 AREA	 |.pdata|, PDATA
|$T37178| DCD	|$LN37@Init@2|
	DCD	0x40007501
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Init@DMASystem@@QAAIXZ| PROC		; DMASystem::Init

; 83   : {

  00000		 |$LN37@Init@2|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M37175|

; 84   : //    RETAILMSG(1, (TEXT("DMASystem::Init()\r\n")));
; 85   : 
; 86   :     uint err = 0;

  00004	e59f81c4	 ldr         r8, [pc, #0x1C4]
  00008	e59f91bc	 ldr         r9, [pc, #0x1BC]
  0000c	e3a07000	 mov         r7, #0
  00010	e1a06008	 mov         r6, r8

; 87   : 
; 88   :     /* read stuff from registry here at mhRegKey  */
; 89   : 
; 90   :     /* do init here based on configured parameters (if any) */
; 91   :     uint i;
; 92   :     uint numEntries = sizeof(sgControllerIdMap)/sizeof(DMAControllerIdMapping);
; 93   :     for(i=0;i<numEntries;i++)

  00014	e3a05000	 mov         r5, #0
  00018	e3a0a000	 mov         r10, #0
  0001c		 |$LL14@Init@2|

; 94   :     {
; 95   :         switch (sgControllerIdMap[i].mControllerType)

  0001c	e5963024	 ldr         r3, [r6, #0x24]
  00020	e3530000	 cmp         r3, #0
  00024	0a000018	 beq         |$LN9@Init@2|
  00028	e3530001	 cmp         r3, #1
  0002c	0a000009	 beq         |$LN8@Init@2|
  00030	e3530002	 cmp         r3, #2

; 105  :             break;
; 106  :         default:
; 107  :             *sgControllerIdMap[i].mppCont = NULL;

  00034	15963028	 ldrne       r3, [r6, #0x28]
  00038	1583a000	 strne       r10, [r3]
  0003c	1a00001b	 bne         |$LN10@Init@2|
  00040	e3a00010	 mov         r0, #0x10
  00044	eb000000	 bl          |??2@YAPAXI@Z|
  00048	e3500000	 cmp         r0, #0
  0004c	0a000014	 beq         |$LN17@Init@2|

; 103  :         case DCT_StandardCamera:
; 104  :             *sgControllerIdMap[i].mppCont = new CamStandardDMAController;

  00050	eb000000	 bl          |??0CamStandardDMAController@@QAA@XZ|
  00054	ea000013	 b           |$LN18@Init@2|
  00058		 |$LN8@Init@2|

; 99   :             break;
; 100  :         case DCT_StandardDSP:
; 101  :             *sgControllerIdMap[i].mppCont = new DSPStandardDMAController;

  00058	e3a0000c	 mov         r0, #0xC
  0005c	eb000000	 bl          |??2@YAPAXI@Z|
  00060	e1b04000	 movs        r4, r0
  00064	0a000004	 beq         |$LN19@Init@2|
  00068	e3a01000	 mov         r1, #0
  0006c	e1a00004	 mov         r0, r4
  00070	eb000000	 bl          |??0StandardDMAController@@QAA@I@Z|
  00074	e5849000	 str         r9, [r4]
  00078	ea000000	 b           |$LN20@Init@2|
  0007c		 |$LN19@Init@2|
  0007c	e3a04000	 mov         r4, #0
  00080		 |$LN20@Init@2|
  00080	e5963028	 ldr         r3, [r6, #0x28]
  00084	e5834000	 str         r4, [r3]

; 102  :             break;

  00088	ea000008	 b           |$LN10@Init@2|
  0008c		 |$LN9@Init@2|

; 96   :         {
; 97   :         case DCT_StandardSystem:
; 98   :             *sgControllerIdMap[i].mppCont = new SysStandardDMAController;

  0008c	e3a00010	 mov         r0, #0x10
  00090	eb000000	 bl          |??2@YAPAXI@Z|
  00094	e3500000	 cmp         r0, #0
  00098	0a000001	 beq         |$LN17@Init@2|
  0009c	eb000000	 bl          |??0SysStandardDMAController@@QAA@XZ|
  000a0	ea000000	 b           |$LN18@Init@2|
  000a4		 |$LN17@Init@2|
  000a4	e3a00000	 mov         r0, #0
  000a8		 |$LN18@Init@2|
  000a8	e5963028	 ldr         r3, [r6, #0x28]
  000ac	e5830000	 str         r0, [r3]
  000b0		 |$LN10@Init@2|

; 108  :         }
; 109  :         if (!(*sgControllerIdMap[i].mppCont))

  000b0	e5962028	 ldr         r2, [r6, #0x28]
  000b4	e5923000	 ldr         r3, [r2]
  000b8	e3530000	 cmp         r3, #0
  000bc	0a00001d	 beq         |$LN12@Init@2|

; 110  :             break;
; 111  :         err = ((DMAController *)(*sgControllerIdMap[i].mppCont))->Init(); 

  000c0	e1a00003	 mov         r0, r3
  000c4	e5d04000	 ldrb        r4, [r0]
  000c8	e5d03001	 ldrb        r3, [r0, #1]
  000cc	e5d02002	 ldrb        r2, [r0, #2]
  000d0	e5d01003	 ldrb        r1, [r0, #3]
  000d4	e1843403	 orr         r3, r4, r3, lsl #8
  000d8	e1833802	 orr         r3, r3, r2, lsl #16
  000dc	e1833c01	 orr         r3, r3, r1, lsl #24
  000e0	e5933004	 ldr         r3, [r3, #4]
  000e4	e1a0e00f	 mov         lr, pc
  000e8	e12fff13	 bx          r3
  000ec	e1b07000	 movs        r7, r0

; 112  :         if (err)

  000f0	1a000004	 bne         |$LN32@Init@2|
  000f4	e2855001	 add         r5, r5, #1
  000f8	e3550003	 cmp         r5, #3
  000fc	e286602c	 add         r6, r6, #0x2C
  00100	3affffc5	 bcc         |$LL14@Init@2|
  00104	ea00000b	 b           |$LN12@Init@2|
  00108		 |$LN32@Init@2|

; 113  :         {
; 114  :             DEBUGMSG(ZONE_ERROR, (L"DMASystem::Init(): "
; 115  :                 L"Controller id %d init returned error code 0x%08X\r\n", sgControllerIdMap[i].mEntry.mSysId, err
; 116  :             ));
; 117  :             
; 118  :             delete (DMAController *)(*sgControllerIdMap[i].mppCont);

  00108	e3a0302c	 mov         r3, #0x2C
  0010c	e0248395	 mla         r4, r5, r3, r8
  00110	e5943028	 ldr         r3, [r4, #0x28]
  00114	e5933000	 ldr         r3, [r3]
  00118	e1b00003	 movs        r0, r3
  0011c	15903000	 ldrne       r3, [r0]
  00120	13a01001	 movne       r1, #1
  00124	15933000	 ldrne       r3, [r3]
  00128	11a0e00f	 movne       lr, pc
  0012c	112fff13	 bxne        r3

; 119  :             *sgControllerIdMap[i].mppCont = NULL;

  00130	e5943028	 ldr         r3, [r4, #0x28]
  00134	e583a000	 str         r10, [r3]
  00138		 |$LN12@Init@2|

; 120  :             
; 121  :             break;
; 122  :         }
; 123  :     }
; 124  :     if (i!=numEntries)

  00138	e3550003	 cmp         r5, #3
  0013c	0a00001f	 beq         |$LN3@Init@2|

; 125  :     {
; 126  :         /* failed to make all controllers.  clean up */
; 127  :         while (i>0)

  00140	e3550000	 cmp         r5, #0
  00144	0a00001b	 beq         |$LN1@Init@2|
  00148	e3a0302c	 mov         r3, #0x2C
  0014c	e0268395	 mla         r6, r5, r3, r8
  00150		 |$LL2@Init@2|

; 128  :         {
; 129  :             i--;

  00150	e246602c	 sub         r6, r6, #0x2C

; 130  :             ((DMAController *)(*sgControllerIdMap[i].mppCont))->ShutDown();

  00154	e5963028	 ldr         r3, [r6, #0x28]
  00158	e2455001	 sub         r5, r5, #1
  0015c	e5930000	 ldr         r0, [r3]
  00160	e5d04000	 ldrb        r4, [r0]
  00164	e5d03001	 ldrb        r3, [r0, #1]
  00168	e5d02002	 ldrb        r2, [r0, #2]
  0016c	e5d01003	 ldrb        r1, [r0, #3]
  00170	e1843403	 orr         r3, r4, r3, lsl #8
  00174	e1833802	 orr         r3, r3, r2, lsl #16
  00178	e1833c01	 orr         r3, r3, r1, lsl #24
  0017c	e5933008	 ldr         r3, [r3, #8]
  00180	e1a0e00f	 mov         lr, pc
  00184	e12fff13	 bx          r3

; 131  :             delete (DMAController *)(*sgControllerIdMap[i].mppCont);

  00188	e5963028	 ldr         r3, [r6, #0x28]
  0018c	e5933000	 ldr         r3, [r3]
  00190	e1b00003	 movs        r0, r3
  00194	15903000	 ldrne       r3, [r0]
  00198	13a01001	 movne       r1, #1
  0019c	15933000	 ldrne       r3, [r3]
  001a0	11a0e00f	 movne       lr, pc
  001a4	112fff13	 bxne        r3

; 132  :             *sgControllerIdMap[i].mppCont = NULL;

  001a8	e5963028	 ldr         r3, [r6, #0x28]
  001ac	e3550000	 cmp         r5, #0
  001b0	e583a000	 str         r10, [r3]
  001b4	1affffe5	 bne         |$LL2@Init@2|
  001b8		 |$LN1@Init@2|
  001b8	e3a0312a	 mov         r3, #0x2A, 2

; 133  :         }
; 134  :         return DMADRVERR_INIT_FAILURE;

  001bc	e3837712	 orr         r7, r3, #0x12, 14
  001c0		 |$LN3@Init@2|

; 135  :     }
; 136  : 
; 137  :     return err;
; 138  : }

  001c0	e1a00007	 mov         r0, r7
  001c4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001c8	e12fff1e	 bx          lr
  001cc		 |$LN38@Init@2|
  001cc		 |$LN39@Init@2|
  001cc	00000000	 DCD         |??_7DSPStandardDMAController@@6B@|
  001d0		 |$LN40@Init@2|
  001d0	00000000	 DCD         |sgControllerIdMap|
  001d4		 |$M37176|

			 ENDP  ; |?Init@DMASystem@@QAAIXZ|, DMASystem::Init

	EXPORT	|?Deinit@DMASystem@@QAAIXZ|		; DMASystem::Deinit

  00000			 AREA	 |.pdata|, PDATA
|$T37202| DCD	|$LN19@Deinit|
	DCD	0x40002501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Deinit@DMASystem@@QAAIXZ| PROC	; DMASystem::Deinit

; 141  : {

  00000		 |$LN19@Deinit|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M37199|
  00004	e1a04000	 mov         r4, r0

; 142  : //    RETAILMSG(1, (TEXT("DMASystem::Deinit()\r\n")));
; 143  : 
; 144  :     /* do deinit here */
; 145  :     while (mpUserList)

  00008	ea000002	 b           |$LN16@Deinit|
  0000c		 |$LL6@Deinit|

; 146  :     {
; 147  :         Close(mpUserList->mUserKey);

  0000c	e5931000	 ldr         r1, [r3]
  00010	e1a00004	 mov         r0, r4
  00014	eb000000	 bl          |?Close@DMASystem@@QAAIK@Z|
  00018		 |$LN16@Deinit|
  00018	e5943004	 ldr         r3, [r4, #4]
  0001c	e3530000	 cmp         r3, #0
  00020	1afffff9	 bne         |$LL6@Deinit|

; 148  :         /* mpUserList will have changed here inside Close() call */
; 149  :     }
; 150  : 
; 151  :     uint i;
; 152  :     uint numEntries = sizeof(sgControllerIdMap)/sizeof(DMAControllerIdMapping);
; 153  :     for(i=0;i<numEntries;i++)

  00024	e59f5064	 ldr         r5, [pc, #0x64]
  00028	e3a06003	 mov         r6, #3
  0002c	e3a07000	 mov         r7, #0
  00030		 |$LL4@Deinit|

; 154  :     {
; 155  :         if (*sgControllerIdMap[i].mppCont)

  00030	e5952028	 ldr         r2, [r5, #0x28]
  00034	e5923000	 ldr         r3, [r2]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00000d	 beq         |$LN3@Deinit|

; 156  :         {
; 157  :             DMAController *pCont = (DMAController *)(*sgControllerIdMap[i].mppCont);

  00040	e1a04003	 mov         r4, r3

; 158  :             pCont->ShutDown();

  00044	e5943000	 ldr         r3, [r4]
  00048	e1a00004	 mov         r0, r4
  0004c	e5933008	 ldr         r3, [r3, #8]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3

; 159  :             delete pCont;

  00058	e5943000	 ldr         r3, [r4]
  0005c	e3a01001	 mov         r1, #1
  00060	e1a00004	 mov         r0, r4
  00064	e5933000	 ldr         r3, [r3]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff13	 bx          r3

; 160  :             *sgControllerIdMap[i].mppCont = NULL;

  00070	e5953028	 ldr         r3, [r5, #0x28]
  00074	e5837000	 str         r7, [r3]
  00078		 |$LN3@Deinit|
  00078	e285502c	 add         r5, r5, #0x2C
  0007c	e2566001	 subs        r6, r6, #1
  00080	1affffea	 bne         |$LL4@Deinit|

; 161  :         }
; 162  :     }
; 163  : 
; 164  :     return 0;

  00084	e3a00000	 mov         r0, #0

; 165  : }

  00088	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN20@Deinit|
  00090		 |$LN21@Deinit|
  00090	00000000	 DCD         |sgControllerIdMap|
  00094		 |$M37200|

			 ENDP  ; |?Deinit@DMASystem@@QAAIXZ|, DMASystem::Deinit

	EXPORT	|?Command@DMASystem@@QAAIKKPAEK0KPAK@Z|	; DMASystem::Command

  00000			 AREA	 |.pdata|, PDATA
|$T37252| DCD	|$LN51@Command|
	DCD	0x40008701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Command@DMASystem@@QAAIKKPAEK0KPAK@Z| PROC ; DMASystem::Command

; 221  : {

  00000		 |$LN51@Command|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M37249|
  00004	e1a06003	 mov         r6, r3
  00008	e1b07001	 movs        r7, r1
  0000c	e1a05000	 mov         r5, r0

; 222  :     if (!dwOpenContext)

  00010	1a000003	 bne         |$LN24@Command|
  00014	e3a03116	 mov         r3, #0x16, 2
  00018		 |$LN36@Command|

; 223  :         return DMADRVERR_NOTOPEN;

  00018	e3830712	 orr         r0, r3, #0x12, 14

; 297  : }

  0001c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$LN24@Command|

; 224  : 
; 225  :     /* do command here */
; 226  : //    RETAILMSG(1, (TEXT("DMASystem::Command(%d)\r\n"),code));
; 227  : 
; 228  :     bool getUser = false;
; 229  :     switch (code)

  00024	e59d0020	 ldr         r0, [sp, #0x20]
  00028	e3a01000	 mov         r1, #0
  0002c	e3520001	 cmp         r2, #1
  00030	0a000012	 beq         |$LN20@Command|
  00034	e3520002	 cmp         r2, #2
  00038	0a000010	 beq         |$LN20@Command|
  0003c	e3520003	 cmp         r2, #3
  00040	0a000005	 beq         |$LN18@Command|
  00044	9a00000b	 bls         |$LN15@Command|
  00048	e3520007	 cmp         r2, #7
  0004c	9a000001	 bls         |$LN19@Command|
  00050	e352000a	 cmp         r2, #0xA
  00054	1a000007	 bne         |$LN15@Command|
  00058		 |$LN19@Command|

; 230  :     {
; 231  :     case DMA_IOCTL_ENUM_GETSIZE:
; 232  :         break;
; 233  :     case DMA_IOCTL_ENUM_GETDATA:
; 234  :         break;
; 235  :     case DMA_IOCTL_ACQ:         
; 236  :     case DMA_IOCTL_FREE:        
; 237  :     case DMA_IOCTL_SET:         
; 238  :     case DMA_IOCTL_GET:         
; 239  :     case DMA_IOCTL_CLOSE:       
; 240  :         getUser = true;

  00058	e3a01001	 mov         r1, #1
  0005c		 |$LN18@Command|

; 241  :         /* fall thru */
; 242  :     case DMA_IOCTL_OPEN:        
; 243  :         if ((inSize<sizeof(DMAIOCTL)) ||
; 244  :             (outSize<sizeof(DMAIOCTL)))

  0005c	e59d3018	 ldr         r3, [sp, #0x18]
  00060	e3530010	 cmp         r3, #0x10
  00064	3a000001	 bcc         |$LN16@Command|
  00068	e3500010	 cmp         r0, #0x10
  0006c	2a000003	 bcs         |$LN20@Command|
  00070		 |$LN16@Command|
  00070	e3a03132	 mov         r3, #0x32, 2

; 245  :             return DMADRVERR_PARAM_SIZE_INVALID;

  00074	eaffffe7	 b           |$LN36@Command|
  00078		 |$LN15@Command|

; 230  :     {
; 231  :     case DMA_IOCTL_ENUM_GETSIZE:
; 232  :         break;
; 233  :     case DMA_IOCTL_ENUM_GETDATA:
; 234  :         break;
; 235  :     case DMA_IOCTL_ACQ:         
; 236  :     case DMA_IOCTL_FREE:        
; 237  :     case DMA_IOCTL_SET:         
; 238  :     case DMA_IOCTL_GET:         
; 239  :     case DMA_IOCTL_CLOSE:       
; 240  :         getUser = true;

  00078	e3a03126	 mov         r3, #0x26, 2

; 246  :         break;
; 247  :     default:
; 248  :         return DMADRVERR_UNKNOWNIOCTL;

  0007c	eaffffe5	 b           |$LN36@Command|
  00080		 |$LN20@Command|

; 249  :     };
; 250  : 
; 251  :     DMAUser *pUser = NULL;
; 252  :     if (getUser)

  00080	e3510000	 cmp         r1, #0
  00084	0a00000c	 beq         |$LN11@Command|

; 253  :     {
; 254  :         /* find DMAUser for this command */
; 255  :         pUser = mpUserList;

  00088	e5953004	 ldr         r3, [r5, #4]
  0008c	e3530000	 cmp         r3, #0

; 256  :         while ((pUser) && (((DMAIOCTL *)pInBuffer)->mParam[0]!=(DWORD)pUser))

  00090	0a000007	 beq         |$LN33@Command|
  00094	e5961000	 ldr         r1, [r6]
  00098		 |$LL13@Command|
  00098	e1510003	 cmp         r1, r3
  0009c	0a000002	 beq         |$LN12@Command|

; 257  :             pUser = pUser->mpNext;

  000a0	e593300c	 ldr         r3, [r3, #0xC]
  000a4	e3530000	 cmp         r3, #0
  000a8	1afffffa	 bne         |$LL13@Command|
  000ac		 |$LN12@Command|

; 258  :         if (!pUser)

  000ac	e3530000	 cmp         r3, #0
  000b0	1a000001	 bne         |$LN11@Command|
  000b4		 |$LN33@Command|
  000b4	e3a0311a	 mov         r3, #0x1A, 2

; 259  :             return DMADRVERR_INVALIDHANDLE;

  000b8	eaffffd6	 b           |$LN36@Command|
  000bc		 |$LN11@Command|

; 260  :     }
; 261  : 
; 262  :     /* io validated.  do action */
; 263  :     uint err = 0;
; 264  :     switch (code)

  000bc	e2422001	 sub         r2, r2, #1
  000c0	e3520009	 cmp         r2, #9
  000c4	8a000051	 bhi         |$LN9@Command|
  000c8	e1a03082	 mov         r3, r2, lsl #1
  000cc	e083300f	 add         r3, r3, pc
  000d0	e1d330b4	 ldrh        r3, [r3, #4]
  000d4	e08ff003	 add         pc, pc, r3
  000d8		 |$LN38@Command|
  000d8		 |$LN37@Command|
  000d8		 |$LN39@Command|
  000d8	0010		 DCW         0x10
  000da		 |$LN40@Command|
  000da	003c		 DCW         0x3c
  000dc		 |$LN41@Command|
  000dc	0058		 DCW         0x58
  000de		 |$LN42@Command|
  000de	0080		 DCW         0x80
  000e0		 |$LN43@Command|
  000e0	00a4		 DCW         0xa4
  000e2		 |$LN44@Command|
  000e2	00c8		 DCW         0xc8
  000e4		 |$LN45@Command|
  000e4	00ec		 DCW         0xec
  000e6		 |$LN46@Command|
  000e6	0134		 DCW         0x134
  000e8		 |$LN47@Command|
  000e8	0134		 DCW         0x134
  000ea		 |$LN48@Command|
  000ea	0110		 DCW         0x110
  000ec		 |$LN8@Command|

; 265  :     {
; 266  :     case DMA_IOCTL_ENUM_GETSIZE:
; 267  :         return Ioctl_GetSize(pOutBuffer,outSize,pOutSize);

  000ec	e3500004	 cmp         r0, #4
  000f0	3affffde	 bcc         |$LN16@Command|
  000f4	13a0312e	 movne       r3, #0x2E, 2
  000f8	1affffc6	 bne         |$LN36@Command|
  000fc	e59d301c	 ldr         r3, [sp, #0x1C]
  00100	e59d2024	 ldr         r2, [sp, #0x24]
  00104	e3a0106c	 mov         r1, #0x6C
  00108	e5831000	 str         r1, [r3]
  0010c	e3a03004	 mov         r3, #4
  00110	e5823000	 str         r3, [r2]
  00114	ea00003d	 b           |$LN9@Command|
  00118		 |$LN7@Command|

; 268  :     case DMA_IOCTL_ENUM_GETDATA:
; 269  :         return Ioctl_GetEnum(pOutBuffer,outSize,pOutSize);

  00118	e59d3024	 ldr         r3, [sp, #0x24]
  0011c	e59d101c	 ldr         r1, [sp, #0x1C]
  00120	e1a02000	 mov         r2, r0
  00124	e1a00005	 mov         r0, r5
  00128	eb000000	 bl          |?Ioctl_GetEnum@DMASystem@@AAAIPAEKPAK@Z|

; 297  : }

  0012c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$LN6@Command|

; 270  :     case DMA_IOCTL_OPEN:        
; 271  :         *pOutSize = sizeof(DMAIOCTL);
; 272  :         ((DMAIOCTL *)pOutBuffer)->mParam[3] = Ioctl_Open(dwOpenContext, *(DMAIOCTL *)pInBuffer,*(DMAIOCTL *)pOutBuffer);

  00134	e59d401c	 ldr         r4, [sp, #0x1C]
  00138	e59de024	 ldr         lr, [sp, #0x24]
  0013c	e3a08010	 mov         r8, #0x10
  00140	e1a03004	 mov         r3, r4
  00144	e1a02006	 mov         r2, r6
  00148	e1a01007	 mov         r1, r7
  0014c	e1a00005	 mov         r0, r5
  00150	e58e8000	 str         r8, [lr]
  00154	eb000000	 bl          |?Ioctl_Open@DMASystem@@AAAIKAAU_dmaIOCTL@@0@Z|

; 273  :         break;

  00158	ea00002b	 b           |$LN35@Command|
  0015c		 |$LN5@Command|

; 274  :     case DMA_IOCTL_ACQ:         
; 275  :         *pOutSize = sizeof(DMAIOCTL);
; 276  :         ((DMAIOCTL *)pOutBuffer)->mParam[3] = Ioctl_Acq(*(DMAIOCTL *)pInBuffer,*(DMAIOCTL *)pOutBuffer);

  0015c	e59d401c	 ldr         r4, [sp, #0x1C]
  00160	e59d3024	 ldr         r3, [sp, #0x24]
  00164	e3a0e010	 mov         lr, #0x10
  00168	e1a02004	 mov         r2, r4
  0016c	e1a01006	 mov         r1, r6
  00170	e1a00005	 mov         r0, r5
  00174	e583e000	 str         lr, [r3]
  00178	eb000000	 bl          |?Ioctl_Acq@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|

; 277  :         break;

  0017c	ea000022	 b           |$LN35@Command|
  00180		 |$LN4@Command|

; 278  :     case DMA_IOCTL_FREE:        
; 279  :         *pOutSize = sizeof(DMAIOCTL);
; 280  :         ((DMAIOCTL *)pOutBuffer)->mParam[3] = Ioctl_Free(*(DMAIOCTL *)pInBuffer,*(DMAIOCTL *)pOutBuffer);

  00180	e59d401c	 ldr         r4, [sp, #0x1C]
  00184	e59d3024	 ldr         r3, [sp, #0x24]
  00188	e3a0e010	 mov         lr, #0x10
  0018c	e1a02004	 mov         r2, r4
  00190	e1a01006	 mov         r1, r6
  00194	e1a00005	 mov         r0, r5
  00198	e583e000	 str         lr, [r3]
  0019c	eb000000	 bl          |?Ioctl_Free@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|

; 281  :         break;

  001a0	ea000019	 b           |$LN35@Command|
  001a4		 |$LN3@Command|

; 282  :     case DMA_IOCTL_SET:         
; 283  :         *pOutSize = sizeof(DMAIOCTL);
; 284  :         ((DMAIOCTL *)pOutBuffer)->mParam[3] = Ioctl_Set(*(DMAIOCTL *)pInBuffer,*(DMAIOCTL *)pOutBuffer);

  001a4	e59d401c	 ldr         r4, [sp, #0x1C]
  001a8	e59d3024	 ldr         r3, [sp, #0x24]
  001ac	e3a0e010	 mov         lr, #0x10
  001b0	e1a02004	 mov         r2, r4
  001b4	e1a01006	 mov         r1, r6
  001b8	e1a00005	 mov         r0, r5
  001bc	e583e000	 str         lr, [r3]
  001c0	eb000000	 bl          |?Ioctl_Set@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|

; 285  :         break;

  001c4	ea000010	 b           |$LN35@Command|
  001c8		 |$LN2@Command|

; 286  :     case DMA_IOCTL_GET:         
; 287  :         *pOutSize = sizeof(DMAIOCTL);
; 288  :         ((DMAIOCTL *)pOutBuffer)->mParam[3] = Ioctl_Get(*(DMAIOCTL *)pInBuffer,*(DMAIOCTL *)pOutBuffer);

  001c8	e59d401c	 ldr         r4, [sp, #0x1C]
  001cc	e59d3024	 ldr         r3, [sp, #0x24]
  001d0	e3a0e010	 mov         lr, #0x10
  001d4	e1a02004	 mov         r2, r4
  001d8	e1a01006	 mov         r1, r6
  001dc	e1a00005	 mov         r0, r5
  001e0	e583e000	 str         lr, [r3]
  001e4	eb000000	 bl          |?Ioctl_Get@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|

; 289  :         break;

  001e8	ea000007	 b           |$LN35@Command|
  001ec		 |$LN1@Command|

; 290  :     case DMA_IOCTL_CLOSE:       
; 291  :         *pOutSize = sizeof(DMAIOCTL);
; 292  :         ((DMAIOCTL *)pOutBuffer)->mParam[3] = Ioctl_Close(*(DMAIOCTL *)pInBuffer,*(DMAIOCTL *)pOutBuffer);

  001ec	e59d401c	 ldr         r4, [sp, #0x1C]
  001f0	e59d3024	 ldr         r3, [sp, #0x24]
  001f4	e3a0e010	 mov         lr, #0x10
  001f8	e1a02004	 mov         r2, r4
  001fc	e1a01006	 mov         r1, r6
  00200	e1a00005	 mov         r0, r5
  00204	e583e000	 str         lr, [r3]
  00208	eb000000	 bl          |?Ioctl_Close@DMASystem@@AAAIAAU_dmaIOCTL@@0@Z|
  0020c		 |$LN35@Command|
  0020c	e584000c	 str         r0, [r4, #0xC]
  00210		 |$LN9@Command|

; 293  :         break;
; 294  :     };
; 295  : 
; 296  :     return 0;

  00210	e3a00000	 mov         r0, #0

; 297  : }

  00214	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00218	e12fff1e	 bx          lr
  0021c		 |$M37250|

			 ENDP  ; |?Command@DMASystem@@QAAIKKPAEK0KPAK@Z|, DMASystem::Command

	END
