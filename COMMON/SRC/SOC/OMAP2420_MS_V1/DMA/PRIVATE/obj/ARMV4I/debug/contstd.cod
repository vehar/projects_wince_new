; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\DMA\PRIVATE\contstd.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_7StandardDMAController@@6B@| [ DATA ] ; StandardDMAController::`vftable'
	EXPORT	|??0DMAController@@QAA@XZ|		; DMAController::DMAController
	EXPORT	|??0StandardDMAController@@QAA@I@Z|	; StandardDMAController::StandardDMAController
	EXPORT	|?AllocChannels@StandardDMAController@@UAAIIAAI@Z| ; StandardDMAController::AllocChannels
	EXPORT	|?FreeChannels@StandardDMAController@@UAAII@Z| ; StandardDMAController::FreeChannels
	IMPORT	|??_EStandardDMAController@@UAAPAXI@Z|, WEAK |??_GStandardDMAController@@UAAPAXI@Z| ; StandardDMAController::`vector deleting destructor', StandardDMAController::`scalar deleting destructor'
	IMPORT	|_purecall|

  00000			 AREA	 |.pdata|, PDATA
|$T36527| DCD	|$LN8@StandardDM|
	DCD	0x40002a04
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\contstd.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7StandardDMAController@@6B@| DCD |??_EStandardDMAController@@UAAPAXI@Z| ; StandardDMAController::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?AllocChannels@StandardDMAController@@UAAIIAAI@Z|
	DCD	|?FreeChannels@StandardDMAController@@UAAII@Z|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0StandardDMAController@@QAA@I@Z| PROC ; StandardDMAController::StandardDMAController

; 50   : {

  00000		 |$LN8@StandardDM|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M36524|
  00010	e59d0014	 ldr         r0, [sp, #0x14]
  00014	eb000000	 bl          |??0DMAController@@QAA@XZ|
  00018	e58d0008	 str         r0, [sp, #8]
  0001c	e59f2080	 ldr         r2, [pc, #0x80]
  00020	e59d3014	 ldr         r3, [sp, #0x14]
  00024	e5832000	 str         r2, [r3]

; 51   :     mNumChannels = aNumChannels;

  00028	e59d3014	 ldr         r3, [sp, #0x14]
  0002c	e2832004	 add         r2, r3, #4
  00030	e59d3018	 ldr         r3, [sp, #0x18]
  00034	e5823000	 str         r3, [r2]

; 52   :     uint i;
; 53   :     for(i=0;i<aNumChannels;i++)

  00038	e3a03000	 mov         r3, #0
  0003c	e58d3000	 str         r3, [sp]
  00040	ea000002	 b           |$LN3@StandardDM|
  00044		 |$LN2@StandardDM|
  00044	e59d3000	 ldr         r3, [sp]
  00048	e2833001	 add         r3, r3, #1
  0004c	e58d3000	 str         r3, [sp]
  00050		 |$LN3@StandardDM|
  00050	e59d2000	 ldr         r2, [sp]
  00054	e59d3018	 ldr         r3, [sp, #0x18]
  00058	e1520003	 cmp         r2, r3
  0005c	2a00000a	 bcs         |$LN1@StandardDM|

; 54   :     {
; 55   :         mCurFreeChannelMask |= (1<<i);

  00060	e59d3014	 ldr         r3, [sp, #0x14]
  00064	e2831008	 add         r1, r3, #8
  00068	e59d2000	 ldr         r2, [sp]
  0006c	e3a03001	 mov         r3, #1
  00070	e1a02213	 mov         r2, r3, lsl r2
  00074	e5913000	 ldr         r3, [r1]
  00078	e1832002	 orr         r2, r3, r2
  0007c	e59d3014	 ldr         r3, [sp, #0x14]
  00080	e2833008	 add         r3, r3, #8
  00084	e5832000	 str         r2, [r3]
  00088	eaffffed	 b           |$LN2@StandardDM|
  0008c		 |$LN1@StandardDM|

; 56   :     }
; 57   : }

  0008c	e59d3014	 ldr         r3, [sp, #0x14]
  00090	e58d3004	 str         r3, [sp, #4]
  00094	e59d0004	 ldr         r0, [sp, #4]
  00098	e28dd00c	 add         sp, sp, #0xC
  0009c	e89d6000	 ldmia       sp, {sp, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN9@StandardDM|
  000a4		 |$LN10@StandardDM|
  000a4	00000000	 DCD         |??_7StandardDMAController@@6B@|
  000a8		 |$M36525|

			 ENDP  ; |??0StandardDMAController@@QAA@I@Z|, StandardDMAController::StandardDMAController

	EXPORT	|??_7DMAController@@6B@| [ DATA ]	; DMAController::`vftable'
	IMPORT	|??_EDMAController@@UAAPAXI@Z|, WEAK |??_GDMAController@@UAAPAXI@Z| ; DMAController::`vector deleting destructor', DMAController::`scalar deleting destructor'
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\dmasys.h

  00000			 AREA	 |.pdata|, PDATA
|$T36535| DCD	|$LN5@DMAControl|
	DCD	0x40000e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7DMAController@@6B@| DCD |??_EDMAController@@UAAPAXI@Z| ; DMAController::`vftable'
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|_purecall|
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DMAController@@QAA@XZ| PROC	; DMAController::DMAController

; 94   :     DMAController(void) {}

  00000		 |$LN5@DMAControl|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M36532|
  00010	e59f201c	 ldr         r2, [pc, #0x1C]
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5832000	 str         r2, [r3]
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@DMAControl|
  00034		 |$LN7@DMAControl|
  00034	00000000	 DCD         |??_7DMAController@@6B@|
  00038		 |$M36533|

			 ENDP  ; |??0DMAController@@QAA@XZ|, DMAController::DMAController

	EXPORT	|??1DMAController@@UAA@XZ|		; DMAController::~DMAController
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T36545| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GDMAController@@UAAPAXI@Z| PROC	; DMAController::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M36542|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1DMAController@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M36543|

			 ENDP  ; |??_GDMAController@@UAAPAXI@Z|, DMAController::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T36552| DCD	|$LN5@DMAControl@2|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1DMAController@@UAA@XZ| PROC	; DMAController::~DMAController

; 95   :     virtual ~DMAController(void) {}

  00000		 |$LN5@DMAControl@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M36549|
  0000c	e59f200c	 ldr         r2, [pc, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@DMAControl@2|
  00020		 |$LN7@DMAControl@2|
  00020	00000000	 DCD         |??_7DMAController@@6B@|
  00024		 |$M36550|

			 ENDP  ; |??1DMAController@@UAA@XZ|, DMAController::~DMAController

	EXPORT	|??1StandardDMAController@@UAA@XZ|	; StandardDMAController::~StandardDMAController

  00000			 AREA	 |.pdata|, PDATA
|$T36562| DCD	|$LN6@scalar@2|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GStandardDMAController@@UAAPAXI@Z| PROC ; StandardDMAController::`scalar deleting destructor'
  00000		 |$LN6@scalar@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M36559|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1StandardDMAController@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar@2|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar@2|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M36560|

			 ENDP  ; |??_GStandardDMAController@@UAAPAXI@Z|, StandardDMAController::`scalar deleting destructor'


  00000			 AREA	 |.pdata|, PDATA
|$T36569| DCD	|$LN5@StandardDM@2|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1StandardDMAController@@UAA@XZ| PROC ; StandardDMAController::~StandardDMAController
  00000		 |$LN5@StandardDM@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M36566|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          |??1DMAController@@UAA@XZ|
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M36567|

			 ENDP  ; |??1StandardDMAController@@UAA@XZ|, StandardDMAController::~StandardDMAController


  00008			 AREA	 |.pdata|, PDATA
|$T36577| DCD	|$LN23@AllocChann|
	DCD	0x40008e04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\dma\private\contstd.cpp

  000a8			 AREA	 |.text|, CODE, ARM

  000a8		 |?AllocChannels@StandardDMAController@@UAAIIAAI@Z| PROC ; StandardDMAController::AllocChannels

; 60   : {

  000a8		 |$LN23@AllocChann|
  000a8	e1a0c00d	 mov         r12, sp
  000ac	e92d0007	 stmdb       sp!, {r0 - r2}
  000b0	e92d5000	 stmdb       sp!, {r12, lr}
  000b4	e24dd014	 sub         sp, sp, #0x14
  000b8		 |$M36574|

; 61   :     /* count free bits in mCurFreeChannelMask, up to required # of channels */
; 62   :     uint i;
; 63   :     uint avail = 0;

  000b8	e3a03000	 mov         r3, #0
  000bc	e58d3008	 str         r3, [sp, #8]

; 64   :     for(i=0;i<32;i++)

  000c0	e3a03000	 mov         r3, #0
  000c4	e58d3000	 str         r3, [sp]
  000c8	ea000002	 b           |$LN18@AllocChann|
  000cc		 |$LN17@AllocChann|
  000cc	e59d3000	 ldr         r3, [sp]
  000d0	e2833001	 add         r3, r3, #1
  000d4	e58d3000	 str         r3, [sp]
  000d8		 |$LN18@AllocChann|
  000d8	e59d3000	 ldr         r3, [sp]
  000dc	e3530020	 cmp         r3, #0x20
  000e0	2a000010	 bcs         |$LN16@AllocChann|

; 65   :     {
; 66   :         if (mCurFreeChannelMask & (1<<i))

  000e4	e59d301c	 ldr         r3, [sp, #0x1C]
  000e8	e2831008	 add         r1, r3, #8
  000ec	e59d2000	 ldr         r2, [sp]
  000f0	e3a03001	 mov         r3, #1
  000f4	e1a02213	 mov         r2, r3, lsl r2
  000f8	e5913000	 ldr         r3, [r1]
  000fc	e1130002	 tst         r3, r2
  00100	0a000007	 beq         |$LN15@AllocChann|

; 67   :         {
; 68   :             avail++;

  00104	e59d3008	 ldr         r3, [sp, #8]
  00108	e2833001	 add         r3, r3, #1
  0010c	e58d3008	 str         r3, [sp, #8]

; 69   :             if (avail==num)

  00110	e59d2008	 ldr         r2, [sp, #8]
  00114	e59d3020	 ldr         r3, [sp, #0x20]
  00118	e1520003	 cmp         r2, r3
  0011c	1a000000	 bne         |$LN14@AllocChann|

; 70   :                 break;

  00120	ea000000	 b           |$LN16@AllocChann|
  00124		 |$LN14@AllocChann|
  00124		 |$LN15@AllocChann|

; 71   :         }
; 72   :     }

  00124	eaffffe8	 b           |$LN17@AllocChann|
  00128		 |$LN16@AllocChann|

; 73   :     if (avail!=num)

  00128	e59d2008	 ldr         r2, [sp, #8]
  0012c	e59d3020	 ldr         r3, [sp, #0x20]
  00130	e1520003	 cmp         r2, r3
  00134	0a000003	 beq         |$LN13@AllocChann|

; 74   :         return DMADRVERR_RESOURCES;

  00138	e3a03136	 mov         r3, #0x36, 2
  0013c	e3833712	 orr         r3, r3, #0x12, 14
  00140	e58d3010	 str         r3, [sp, #0x10]
  00144	ea000061	 b           |$LN19@AllocChann|
  00148		 |$LN13@AllocChann|

; 75   : 
; 76   :     uint ret = 0;

  00148	e3a03000	 mov         r3, #0
  0014c	e58d3004	 str         r3, [sp, #4]

; 77   : 
; 78   :     /* take required channels if they are desired and available */
; 79   :     if (aReqMask)

  00150	e59d3024	 ldr         r3, [sp, #0x24]
  00154	e5933000	 ldr         r3, [r3]
  00158	e3530000	 cmp         r3, #0
  0015c	0a00002e	 beq         |$LN12@AllocChann|

; 80   :     {
; 81   :         if ((aReqMask&mCurFreeChannelMask)!=aReqMask)

  00160	e59d301c	 ldr         r3, [sp, #0x1C]
  00164	e2831008	 add         r1, r3, #8
  00168	e59d3024	 ldr         r3, [sp, #0x24]
  0016c	e5932000	 ldr         r2, [r3]
  00170	e5913000	 ldr         r3, [r1]
  00174	e0022003	 and         r2, r2, r3
  00178	e59d3024	 ldr         r3, [sp, #0x24]
  0017c	e5933000	 ldr         r3, [r3]
  00180	e1520003	 cmp         r2, r3
  00184	0a000003	 beq         |$LN11@AllocChann|

; 82   :             return DMADRVERR_RESOURCES; // at least one required channel is in use 

  00188	e3a03136	 mov         r3, #0x36, 2
  0018c	e3833712	 orr         r3, r3, #0x12, 14
  00190	e58d3010	 str         r3, [sp, #0x10]
  00194	ea00004d	 b           |$LN19@AllocChann|
  00198		 |$LN11@AllocChann|

; 83   :         ret = aReqMask;

  00198	e59d3024	 ldr         r3, [sp, #0x24]
  0019c	e5933000	 ldr         r3, [r3]
  001a0	e58d3004	 str         r3, [sp, #4]

; 84   :         mCurFreeChannelMask &= ~aReqMask;

  001a4	e59d301c	 ldr         r3, [sp, #0x1C]
  001a8	e2831008	 add         r1, r3, #8
  001ac	e59d3024	 ldr         r3, [sp, #0x24]
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e1e02003	 mvn         r2, r3
  001b8	e5913000	 ldr         r3, [r1]
  001bc	e0032002	 and         r2, r3, r2
  001c0	e59d301c	 ldr         r3, [sp, #0x1C]
  001c4	e2833008	 add         r3, r3, #8
  001c8	e5832000	 str         r2, [r3]

; 85   :         for(i=0;i<32;i++)

  001cc	e3a03000	 mov         r3, #0
  001d0	e58d3000	 str         r3, [sp]
  001d4	ea000002	 b           |$LN10@AllocChann|
  001d8		 |$LN9@AllocChann|
  001d8	e59d3000	 ldr         r3, [sp]
  001dc	e2833001	 add         r3, r3, #1
  001e0	e58d3000	 str         r3, [sp]
  001e4		 |$LN10@AllocChann|
  001e4	e59d3000	 ldr         r3, [sp]
  001e8	e3530020	 cmp         r3, #0x20
  001ec	2a00000a	 bcs         |$LN8@AllocChann|

; 86   :         {
; 87   :             if (aReqMask & (1<<i))

  001f0	e59d2000	 ldr         r2, [sp]
  001f4	e3a03001	 mov         r3, #1
  001f8	e1a02213	 mov         r2, r3, lsl r2
  001fc	e59d3024	 ldr         r3, [sp, #0x24]
  00200	e5933000	 ldr         r3, [r3]
  00204	e1130002	 tst         r3, r2
  00208	0a000002	 beq         |$LN7@AllocChann|

; 88   :                 num--;

  0020c	e59d3020	 ldr         r3, [sp, #0x20]
  00210	e2433001	 sub         r3, r3, #1
  00214	e58d3020	 str         r3, [sp, #0x20]
  00218		 |$LN7@AllocChann|

; 89   :         }

  00218	eaffffee	 b           |$LN9@AllocChann|
  0021c		 |$LN8@AllocChann|
  0021c		 |$LN12@AllocChann|

; 90   :     }
; 91   : 
; 92   :     if (num)

  0021c	e59d3020	 ldr         r3, [sp, #0x20]
  00220	e3530000	 cmp         r3, #0
  00224	0a000024	 beq         |$LN6@AllocChann|

; 93   :     {
; 94   :         /* some non-specific channels still needed */
; 95   :         uint chk = 0;

  00228	e3a03000	 mov         r3, #0
  0022c	e58d300c	 str         r3, [sp, #0xC]
  00230		 |$LN5@AllocChann|
  00230		 |$LN2@AllocChann|

; 96   :         do {
; 97   :             while (!(mCurFreeChannelMask & (1<<chk)))

  00230	e59d301c	 ldr         r3, [sp, #0x1C]
  00234	e2831008	 add         r1, r3, #8
  00238	e59d200c	 ldr         r2, [sp, #0xC]
  0023c	e3a03001	 mov         r3, #1
  00240	e1a02213	 mov         r2, r3, lsl r2
  00244	e5913000	 ldr         r3, [r1]
  00248	e1130002	 tst         r3, r2
  0024c	1a000003	 bne         |$LN1@AllocChann|

; 98   :                 chk++;

  00250	e59d300c	 ldr         r3, [sp, #0xC]
  00254	e2833001	 add         r3, r3, #1
  00258	e58d300c	 str         r3, [sp, #0xC]
  0025c	eafffff3	 b           |$LN2@AllocChann|
  00260		 |$LN1@AllocChann|

; 99   :             ret |= (1<<chk);

  00260	e59d200c	 ldr         r2, [sp, #0xC]
  00264	e3a03001	 mov         r3, #1
  00268	e1a02213	 mov         r2, r3, lsl r2
  0026c	e59d3004	 ldr         r3, [sp, #4]
  00270	e1833002	 orr         r3, r3, r2
  00274	e58d3004	 str         r3, [sp, #4]

; 100  :             mCurFreeChannelMask &= ~(1<<chk);

  00278	e59d301c	 ldr         r3, [sp, #0x1C]
  0027c	e2831008	 add         r1, r3, #8
  00280	e59d200c	 ldr         r2, [sp, #0xC]
  00284	e3a03001	 mov         r3, #1
  00288	e1a03213	 mov         r3, r3, lsl r2
  0028c	e1e02003	 mvn         r2, r3
  00290	e5913000	 ldr         r3, [r1]
  00294	e0032002	 and         r2, r3, r2
  00298	e59d301c	 ldr         r3, [sp, #0x1C]
  0029c	e2833008	 add         r3, r3, #8
  002a0	e5832000	 str         r2, [r3]

; 101  :         } while (--num);

  002a4	e59d3020	 ldr         r3, [sp, #0x20]
  002a8	e2433001	 sub         r3, r3, #1
  002ac	e58d3020	 str         r3, [sp, #0x20]
  002b0	e59d3020	 ldr         r3, [sp, #0x20]
  002b4	e3530000	 cmp         r3, #0
  002b8	1affffdc	 bne         |$LN5@AllocChann|
  002bc		 |$LN6@AllocChann|

; 102  :     }
; 103  : 
; 104  :     /* return allocated channel mask */
; 105  :     aReqMask = ret;

  002bc	e59d2004	 ldr         r2, [sp, #4]
  002c0	e59d3024	 ldr         r3, [sp, #0x24]
  002c4	e5832000	 str         r2, [r3]

; 106  : 
; 107  :     return 0;

  002c8	e3a03000	 mov         r3, #0
  002cc	e58d3010	 str         r3, [sp, #0x10]
  002d0		 |$LN19@AllocChann|

; 108  : }

  002d0	e59d0010	 ldr         r0, [sp, #0x10]
  002d4	e28dd014	 add         sp, sp, #0x14
  002d8	e89d6000	 ldmia       sp, {sp, lr}
  002dc	e12fff1e	 bx          lr
  002e0		 |$M36575|

			 ENDP  ; |?AllocChannels@StandardDMAController@@UAAIIAAI@Z|, StandardDMAController::AllocChannels


  00010			 AREA	 |.pdata|, PDATA
|$T36583| DCD	|$LN8@FreeChanne|
	DCD	0x40002304
; Function compile flags: /Odtp

  002e0			 AREA	 |.text|, CODE, ARM

  002e0		 |?FreeChannels@StandardDMAController@@UAAII@Z| PROC ; StandardDMAController::FreeChannels

; 111  : {

  002e0		 |$LN8@FreeChanne|
  002e0	e1a0c00d	 mov         r12, sp
  002e4	e92d0003	 stmdb       sp!, {r0, r1}
  002e8	e92d5000	 stmdb       sp!, {r12, lr}
  002ec	e24dd008	 sub         sp, sp, #8
  002f0		 |$M36580|

; 112  :     uint bitPos = 0;

  002f0	e3a03000	 mov         r3, #0
  002f4	e58d3000	 str         r3, [sp]
  002f8		 |$LN3@FreeChanne|

; 113  :     while (aChanMask)

  002f8	e59d3014	 ldr         r3, [sp, #0x14]
  002fc	e3530000	 cmp         r3, #0
  00300	0a000013	 beq         |$LN2@FreeChanne|

; 114  :     {
; 115  :         if (aChanMask&1)

  00304	e59d3014	 ldr         r3, [sp, #0x14]
  00308	e3130001	 tst         r3, #1
  0030c	0a000009	 beq         |$LN1@FreeChanne|

; 116  :             mCurFreeChannelMask |= (1<<bitPos);

  00310	e59d3010	 ldr         r3, [sp, #0x10]
  00314	e2831008	 add         r1, r3, #8
  00318	e59d2000	 ldr         r2, [sp]
  0031c	e3a03001	 mov         r3, #1
  00320	e1a02213	 mov         r2, r3, lsl r2
  00324	e5913000	 ldr         r3, [r1]
  00328	e1832002	 orr         r2, r3, r2
  0032c	e59d3010	 ldr         r3, [sp, #0x10]
  00330	e2833008	 add         r3, r3, #8
  00334	e5832000	 str         r2, [r3]
  00338		 |$LN1@FreeChanne|

; 117  :         aChanMask>>=1;

  00338	e59d3014	 ldr         r3, [sp, #0x14]
  0033c	e1a030a3	 mov         r3, r3, lsr #1
  00340	e58d3014	 str         r3, [sp, #0x14]

; 118  :         bitPos++;

  00344	e59d3000	 ldr         r3, [sp]
  00348	e2833001	 add         r3, r3, #1
  0034c	e58d3000	 str         r3, [sp]

; 119  :     }

  00350	eaffffe8	 b           |$LN3@FreeChanne|
  00354		 |$LN2@FreeChanne|

; 120  : 
; 121  :     return 0;

  00354	e3a03000	 mov         r3, #0
  00358	e58d3004	 str         r3, [sp, #4]

; 122  : }

  0035c	e59d0004	 ldr         r0, [sp, #4]
  00360	e28dd008	 add         sp, sp, #8
  00364	e89d6000	 ldmia       sp, {sp, lr}
  00368	e12fff1e	 bx          lr
  0036c		 |$M36581|

			 ENDP  ; |?FreeChannels@StandardDMAController@@UAAII@Z|, StandardDMAController::FreeChannels

	EXPORT	|?GetRevision@StandardDMAController@@IAA_NPCXAAI1@Z| ; StandardDMAController::GetRevision

  00018			 AREA	 |.pdata|, PDATA
|$T36589| DCD	|$LN7@GetRevisio|
	DCD	0x40002404
; Function compile flags: /Odtp

  0036c			 AREA	 |.text|, CODE, ARM

  0036c		 |?GetRevision@StandardDMAController@@IAA_NPCXAAI1@Z| PROC ; StandardDMAController::GetRevision

; 125  : {

  0036c		 |$LN7@GetRevisio|
  0036c	e1a0c00d	 mov         r12, sp
  00370	e92d000f	 stmdb       sp!, {r0 - r3}
  00374	e92d5000	 stmdb       sp!, {r12, lr}
  00378	e24dd00c	 sub         sp, sp, #0xC
  0037c		 |$M36586|

; 126  :     if (!pBase)

  0037c	e59d3018	 ldr         r3, [sp, #0x18]
  00380	e3530000	 cmp         r3, #0
  00384	1a000002	 bne         |$LN2@GetRevisio|

; 127  :         return false;

  00388	e3a03000	 mov         r3, #0
  0038c	e5cd3008	 strb        r3, [sp, #8]
  00390	ea000015	 b           |$LN3@GetRevisio|
  00394		 |$LN2@GetRevisio|

; 128  : 
; 129  :     /* pBase is mapped uncached address of standard dma controller subtype */
; 130  :     volatile OMAP2420_SDMA_REGS	*pCont = (volatile OMAP2420_SDMA_REGS *)pBase;

  00394	e59d3018	 ldr         r3, [sp, #0x18]
  00398	e58d3004	 str         r3, [sp, #4]

; 131  : 
; 132  :     uint rev = pCont->DMA4_REVISION;

  0039c	e59d3004	 ldr         r3, [sp, #4]
  003a0	e5933000	 ldr         r3, [r3]
  003a4	e58d3000	 str         r3, [sp]

; 133  : 
; 134  :     if (!rev)

  003a8	e59d3000	 ldr         r3, [sp]
  003ac	e3530000	 cmp         r3, #0
  003b0	1a000002	 bne         |$LN1@GetRevisio|

; 135  :         return false;

  003b4	e3a03000	 mov         r3, #0
  003b8	e5cd3008	 strb        r3, [sp, #8]
  003bc	ea00000a	 b           |$LN3@GetRevisio|
  003c0		 |$LN1@GetRevisio|

; 136  : 
; 137  :     major = (rev&0xF0)>>4;

  003c0	e59d3000	 ldr         r3, [sp]
  003c4	e20330f0	 and         r3, r3, #0xF0
  003c8	e1a02223	 mov         r2, r3, lsr #4
  003cc	e59d301c	 ldr         r3, [sp, #0x1C]
  003d0	e5832000	 str         r2, [r3]

; 138  :     minor = (rev&0x0F);

  003d4	e59d3000	 ldr         r3, [sp]
  003d8	e203200f	 and         r2, r3, #0xF
  003dc	e59d3020	 ldr         r3, [sp, #0x20]
  003e0	e5832000	 str         r2, [r3]

; 139  :     return true;

  003e4	e3a03001	 mov         r3, #1
  003e8	e5cd3008	 strb        r3, [sp, #8]
  003ec		 |$LN3@GetRevisio|

; 140  : }

  003ec	e5dd0008	 ldrb        r0, [sp, #8]
  003f0	e28dd00c	 add         sp, sp, #0xC
  003f4	e89d6000	 ldmia       sp, {sp, lr}
  003f8	e12fff1e	 bx          lr
  003fc		 |$M36587|

			 ENDP  ; |?GetRevision@StandardDMAController@@IAA_NPCXAAI1@Z|, StandardDMAController::GetRevision

	EXPORT	|??_C@_1EE@PHNNFIAA@?$AA?9?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AAD?$AAM?$AAA?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@HCCBAOIN@?$AA?$CL?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AAD?$AAM?$AAA?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|?Reset@StandardDMAController@@IAAXPCX@Z| ; StandardDMAController::Reset
	IMPORT	|Sleep|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00020			 AREA	 |.pdata|, PDATA
|$T36598| DCD	|$LN14@Reset|
	DCD	0x40004804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@PHNNFIAA@?$AA?9?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AAD?$AAM?$AAA?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN@| DCB "-"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@HCCBAOIN@?$AA?$CL?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AAD?$AAM?$AAA?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, ":", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  003fc			 AREA	 |.text|, CODE, ARM

  003fc		 |?Reset@StandardDMAController@@IAAXPCX@Z| PROC ; StandardDMAController::Reset

; 143  : {

  003fc		 |$LN14@Reset|
  003fc	e1a0c00d	 mov         r12, sp
  00400	e92d0003	 stmdb       sp!, {r0, r1}
  00404	e92d5000	 stmdb       sp!, {r12, lr}
  00408	e24dd010	 sub         sp, sp, #0x10
  0040c		 |$M36595|

; 144  :     /* pBase is mapped uncached address of standard dma controller subtype */
; 145  :     volatile OMAP2420_SDMA_REGS	*pCont = (volatile OMAP2420_SDMA_REGS *)pBase;

  0040c	e59d301c	 ldr         r3, [sp, #0x1C]
  00410	e58d3004	 str         r3, [sp, #4]

; 146  : 
; 147  :     DEBUGMSG(ZONE_FUNCTION, (L"+StandardDMAController::Reset()\r\n"));

  00414	e59f30f8	 ldr         r3, [pc, #0xF8]
  00418	e5933440	 ldr         r3, [r3, #0x440]
  0041c	e3130004	 tst         r3, #4
  00420	0a000004	 beq         |$LN8@Reset|
  00424	e59f00ec	 ldr         r0, [pc, #0xEC]
  00428	eb000000	 bl          NKDbgPrintfW
  0042c	e3a03001	 mov         r3, #1
  00430	e58d3008	 str         r3, [sp, #8]
  00434	ea000001	 b           |$LN9@Reset|
  00438		 |$LN8@Reset|
  00438	e3a03000	 mov         r3, #0
  0043c	e58d3008	 str         r3, [sp, #8]
  00440		 |$LN9@Reset|

; 148  : 
; 149  :     /* initiate software reset of controller */
; 150  :     pCont->DMA4_OCP_SYSCONFIG |= 0x2;

  00440	e59d3004	 ldr         r3, [sp, #4]
  00444	e283302c	 add         r3, r3, #0x2C
  00448	e5933000	 ldr         r3, [r3]
  0044c	e3832002	 orr         r2, r3, #2
  00450	e59d3004	 ldr         r3, [sp, #4]
  00454	e283302c	 add         r3, r3, #0x2C
  00458	e5832000	 str         r2, [r3]
  0045c		 |$LN5@Reset|

; 151  :     /* wait for reset to complete */
; 152  :     while (!(pCont->DMA4_SYSSTATUS&1))

  0045c	e59d3004	 ldr         r3, [sp, #4]
  00460	e2833028	 add         r3, r3, #0x28
  00464	e5933000	 ldr         r3, [r3]
  00468	e3130001	 tst         r3, #1
  0046c	1a000002	 bne         |$LN4@Reset|

; 153  :         Sleep(100);

  00470	e3a00064	 mov         r0, #0x64
  00474	eb000000	 bl          Sleep
  00478	eafffff7	 b           |$LN5@Reset|
  0047c		 |$LN4@Reset|

; 154  : 
; 155  :     uint i;
; 156  :     for(i=0;i<mNumChannels;i++)

  0047c	e3a03000	 mov         r3, #0
  00480	e58d3000	 str         r3, [sp]
  00484	ea000002	 b           |$LN3@Reset|
  00488		 |$LN2@Reset|
  00488	e59d3000	 ldr         r3, [sp]
  0048c	e2833001	 add         r3, r3, #1
  00490	e58d3000	 str         r3, [sp]
  00494		 |$LN3@Reset|
  00494	e59d3018	 ldr         r3, [sp, #0x18]
  00498	e2833004	 add         r3, r3, #4
  0049c	e59d2000	 ldr         r2, [sp]
  004a0	e5933000	 ldr         r3, [r3]
  004a4	e1520003	 cmp         r2, r3
  004a8	2a00000a	 bcs         |$LN1@Reset|

; 157  :     {
; 158  :         mCurFreeChannelMask |= (1<<i);

  004ac	e59d3018	 ldr         r3, [sp, #0x18]
  004b0	e2831008	 add         r1, r3, #8
  004b4	e59d2000	 ldr         r2, [sp]
  004b8	e3a03001	 mov         r3, #1
  004bc	e1a02213	 mov         r2, r3, lsl r2
  004c0	e5913000	 ldr         r3, [r1]
  004c4	e1832002	 orr         r2, r3, r2
  004c8	e59d3018	 ldr         r3, [sp, #0x18]
  004cc	e2833008	 add         r3, r3, #8
  004d0	e5832000	 str         r2, [r3]

; 159  :     }

  004d4	eaffffeb	 b           |$LN2@Reset|
  004d8		 |$LN1@Reset|

; 160  : 
; 161  :     DEBUGMSG(ZONE_FUNCTION, (L"-StandardDMAController::Reset()\r\n"));

  004d8	e59f3034	 ldr         r3, [pc, #0x34]
  004dc	e5933440	 ldr         r3, [r3, #0x440]
  004e0	e3130004	 tst         r3, #4
  004e4	0a000004	 beq         |$LN10@Reset|
  004e8	e59f0020	 ldr         r0, [pc, #0x20]
  004ec	eb000000	 bl          NKDbgPrintfW
  004f0	e3a03001	 mov         r3, #1
  004f4	e58d300c	 str         r3, [sp, #0xC]
  004f8	ea000001	 b           |$LN11@Reset|
  004fc		 |$LN10@Reset|
  004fc	e3a03000	 mov         r3, #0
  00500	e58d300c	 str         r3, [sp, #0xC]
  00504		 |$LN11@Reset|

; 162  : }

  00504	e28dd010	 add         sp, sp, #0x10
  00508	e89d6000	 ldmia       sp, {sp, lr}
  0050c	e12fff1e	 bx          lr
  00510		 |$LN15@Reset|
  00510		 |$LN16@Reset|
  00510	00000000	 DCD         |??_C@_1EE@PHNNFIAA@?$AA?9?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AAD?$AAM?$AAA?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN@|
  00514		 |$LN17@Reset|
  00514	00000000	 DCD         |dpCurSettings|
  00518		 |$LN18@Reset|
  00518	00000000	 DCD         |??_C@_1EE@HCCBAOIN@?$AA?$CL?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AAD?$AAM?$AAA?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?3?$AAR?$AAe?$AAs?$AAe?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN@|
  0051c		 |$M36596|

			 ENDP  ; |?Reset@StandardDMAController@@IAAXPCX@Z|, StandardDMAController::Reset

	END
