; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\DISPLAY\halsurf.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	EXPORT	|?Stride@GPESurf@@QAAHXZ|		; GPESurf::Stride
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T40348| DCD	|$LN5@Stride|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stride@GPESurf@@QAAHXZ| PROC		; GPESurf::Stride

; 177  :     {

  00000		 |$LN5@Stride|
  00000		 |$M40345|

; 178  :         return m_nStrideBytes;

  00000	e5900008	 ldr         r0, [r0, #8]

; 179  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M40346|

			 ENDP  ; |?Stride@GPESurf@@QAAHXZ|, GPESurf::Stride

	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer

  00000			 AREA	 |.pdata|, PDATA
|$T40358| DCD	|$LN5@Buffer|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000		 |$M40355|

; 202  :         return (void *)m_pVirtAddr;

  00000	e5900004	 ldr         r0, [r0, #4]

; 203  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M40356|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

	EXPORT	|?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|	; HalLock
	IMPORT	|Sleep|
	IMPORT	|?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPESurf::GetDDGPESurf
	IMPORT	|?GetDDGPE@@YAPAVDDGPE@@XZ|		; GetDDGPE

  00000			 AREA	 |.pdata|, PDATA
|$T40384| DCD	|$LN21@HalLock|
	DCD	0x40004401
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\display\halsurf.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z| PROC ; HalLock

; 22   : {

  00000		 |$LN21@HalLock|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M40381|
  00004	e1a05000	 mov         r5, r0

; 23   :     DWORD       dwAddr;
; 24   :     DDGPE       *pDDGPE = GetDDGPE();

  00008	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  0000c	e1a04000	 mov         r4, r0

; 25   :     DDGPESurf   *pSurf = DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  00010	e5950004	 ldr         r0, [r5, #4]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 26   : 
; 27   :     DEBUGMSG(GPE_ZONE_ENTER, (L"+HAlLock: %08X\r\n", pd->dwFlags));
; 28   : 
; 29   :     if (pd->dwFlags & DDLOCK_WAITNOTBUSY)

  00018	e595301c	 ldr         r3, [r5, #0x1C]
  0001c	e1a06000	 mov         r6, r0

; 30   :     {
; 31   :         while (pDDGPE->SurfaceBusyFlipping(pSurf)) Sleep(0);

  00020	e1a01006	 mov         r1, r6
  00024	e3130008	 tst         r3, #8
  00028	e5943000	 ldr         r3, [r4]
  0002c	e1a00004	 mov         r0, r4
  00030	e5933058	 ldr         r3, [r3, #0x58]
  00034	0a000012	 beq         |$LN8@HalLock|
  00038	e1a0e00f	 mov         lr, pc
  0003c	e12fff13	 bx          r3
  00040	ea000007	 b           |$LN17@HalLock|
  00044		 |$LL7@HalLock|
  00044	e3a00000	 mov         r0, #0
  00048	eb000000	 bl          Sleep
  0004c	e5943000	 ldr         r3, [r4]
  00050	e1a01006	 mov         r1, r6
  00054	e1a00004	 mov         r0, r4
  00058	e5933058	 ldr         r3, [r3, #0x58]
  0005c	e1a0e00f	 mov         lr, pc
  00060	e12fff13	 bx          r3
  00064		 |$LN17@HalLock|
  00064	e3500000	 cmp         r0, #0
  00068	1afffff5	 bne         |$LL7@HalLock|

; 32   :         pDDGPE->WaitForNotBusy();

  0006c	e5943000	 ldr         r3, [r4]
  00070	e1a00004	 mov         r0, r4
  00074	e5933060	 ldr         r3, [r3, #0x60]
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080	ea00000a	 b           |$LN4@HalLock|
  00084		 |$LN8@HalLock|

; 33   :     } 
; 34   :     else if (pDDGPE->SurfaceBusyFlipping(pSurf) || pDDGPE->IsBusy())

  00084	e1a0e00f	 mov         lr, pc
  00088	e12fff13	 bx          r3
  0008c	e3500000	 cmp         r0, #0
  00090	1a000018	 bne         |$LN3@HalLock|
  00094	e5943000	 ldr         r3, [r4]
  00098	e1a00004	 mov         r0, r4
  0009c	e593305c	 ldr         r3, [r3, #0x5C]
  000a0	e1a0e00f	 mov         lr, pc
  000a4	e12fff13	 bx          r3
  000a8	e3500000	 cmp         r0, #0
  000ac	1a000011	 bne         |$LN3@HalLock|
  000b0		 |$LN4@HalLock|

; 37   :         goto cleanUp;
; 38   :     }
; 39   : 
; 40   :     dwAddr = (DWORD)pSurf->Buffer();
; 41   :     if (pd->bHasRect)

  000b0	e5953008	 ldr         r3, [r5, #8]
  000b4	e5964004	 ldr         r4, [r6, #4]
  000b8	e3530000	 cmp         r3, #0
  000bc	0a00000a	 beq         |$LN1@HalLock|

; 42   :     {
; 43   :         //dwAddr = (DWORD)pSurf->GetPtr(pd->rArea.left, pd->rArea.top);
; 44   :         dwAddr += pd->rArea.top * pSurf->Stride();
; 45   :         dwAddr += (pd->rArea.left * pSurf->Bpp()) >> 3;

  000c0	e5963000	 ldr         r3, [r6]
  000c4	e5961008	 ldr         r1, [r6, #8]
  000c8	e5952010	 ldr         r2, [r5, #0x10]
  000cc	e593300c	 ldr         r3, [r3, #0xC]
  000d0	e1a00006	 mov         r0, r6
  000d4	e0244291	 mla         r4, r1, r2, r4
  000d8	e1a0e00f	 mov         lr, pc
  000dc	e12fff13	 bx          r3
  000e0	e595300c	 ldr         r3, [r5, #0xC]
  000e4	e0030390	 mul         r3, r0, r3
  000e8	e08441a3	 add         r4, r4, r3, lsr #3
  000ec		 |$LN1@HalLock|

; 46   :     }
; 47   : 
; 48   :     pd->lpSurfData = (PVOID)dwAddr;
; 49   :     pd->ddRVal = DD_OK;

  000ec	e3a03000	 mov         r3, #0
  000f0	e5854020	 str         r4, [r5, #0x20]
  000f4	ea000000	 b           |$LN18@HalLock|
  000f8		 |$LN3@HalLock|

; 35   :     {
; 36   :         pd->ddRVal = DDERR_WASSTILLDRAWING;

  000f8	e59f300c	 ldr         r3, [pc, #0xC]
  000fc		 |$LN18@HalLock|
  000fc	e5853024	 str         r3, [r5, #0x24]
  00100		 |$cleanUp$40218|

; 50   : 
; 51   : cleanUp:
; 52   :     
; 53   :     DEBUGMSG(GPE_ZONE_ENTER, (L"-HAlLock: %08X\r\n", pd->ddRVal));
; 54   :     return DDHAL_DRIVER_HANDLED;

  00100	e3a00001	 mov         r0, #1

; 55   : }

  00104	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00108	e12fff1e	 bx          lr
  0010c		 |$LN22@HalLock|
  0010c		 |$LN23@HalLock|
  0010c	8876021c	 DCD         0x8876021c
  00110		 |$M40382|

			 ENDP  ; |?HalLock@@YAKPAU_DDHAL_LOCKDATA@@@Z|, HalLock

	EXPORT	|?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z| ; HalUnlock
	IMPORT	|?WriteBack@OMAP2420Surf@@QAAXXZ|	; OMAP2420Surf::WriteBack

  00000			 AREA	 |.pdata|, PDATA
|$T40397| DCD	|$LN5@HalUnlock|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z| PROC ; HalUnlock

; 60   : {

  00000		 |$LN5@HalUnlock|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40394|
  00004	e1a04000	 mov         r4, r0

; 61   :     DDGPESurf       *pSurf = DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  00008	e5940004	 ldr         r0, [r4, #4]
  0000c	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 62   :     OMAP2420Surf    *pOMAP2420Surf = static_cast<OMAP2420Surf*>(pSurf);
; 63   : 
; 64   :     DEBUGMSG(GPE_ZONE_ENTER, (L"+HAlUnlock\r\n"));
; 65   : 
; 66   :     // flush the surface memory from cache
; 67   :     pOMAP2420Surf->WriteBack();

  00010	eb000000	 bl          |?WriteBack@OMAP2420Surf@@QAAXXZ|

; 68   :     pd->ddRVal = DD_OK;

  00014	e3a03000	 mov         r3, #0
  00018	e5843008	 str         r3, [r4, #8]

; 69   : 
; 70   :     DEBUGMSG(GPE_ZONE_ENTER, (L"-HAlUnlock\r\n"));
; 71   :     return DDHAL_DRIVER_HANDLED;

  0001c	e3a00001	 mov         r0, #1

; 72   : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M40395|

			 ENDP  ; |?HalUnlock@@YAKPAU_DDHAL_UNLOCKDATA@@@Z|, HalUnlock

	EXPORT	|?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|	; HalFlip
	IMPORT	|DDGPEFlip|

  00000			 AREA	 |.pdata|, PDATA
|$T40412| DCD	|$LN15@HalFlip|
	DCD	0x40003501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z| PROC ; HalFlip

; 77   : {

  00000		 |$LN15@HalFlip|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M40409|
  00004	e1a05000	 mov         r5, r0

; 78   :     DEBUGENTER(HalFlip);
; 79   :     DDGPE* pDDGPE = GetDDGPE();

  00008	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  0000c	e1a04000	 mov         r4, r0

; 80   :     DDGPESurf* pSurf = DDGPESurf::GetDDGPESurf(pd->lpSurfTarg);

  00010	e5950008	 ldr         r0, [r5, #8]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 81   : 
; 82   :     // Wait for engine...
; 83   :     if ((pd->dwFlags & DDFLIP_WAITNOTBUSY) != 0) {

  00018	e595300c	 ldr         r3, [r5, #0xC]
  0001c	e1a06000	 mov         r6, r0

; 84   :         while (pDDGPE->SurfaceBusyFlipping(pSurf)) Sleep(0);

  00020	e1a01006	 mov         r1, r6
  00024	e3130008	 tst         r3, #8
  00028	e5943000	 ldr         r3, [r4]
  0002c	e1a00004	 mov         r0, r4
  00030	e5933058	 ldr         r3, [r3, #0x58]
  00034	0a000012	 beq         |$LN7@HalFlip|
  00038	e1a0e00f	 mov         lr, pc
  0003c	e12fff13	 bx          r3
  00040	ea000007	 b           |$LN12@HalFlip|
  00044		 |$LL6@HalFlip|
  00044	e3a00000	 mov         r0, #0
  00048	eb000000	 bl          Sleep
  0004c	e5943000	 ldr         r3, [r4]
  00050	e1a01006	 mov         r1, r6
  00054	e1a00004	 mov         r0, r4
  00058	e5933058	 ldr         r3, [r3, #0x58]
  0005c	e1a0e00f	 mov         lr, pc
  00060	e12fff13	 bx          r3
  00064		 |$LN12@HalFlip|
  00064	e3500000	 cmp         r0, #0
  00068	1afffff5	 bne         |$LL6@HalFlip|

; 85   :         pDDGPE->WaitForNotBusy();

  0006c	e5943000	 ldr         r3, [r4]
  00070	e1a00004	 mov         r0, r4
  00074	e5933060	 ldr         r3, [r3, #0x60]
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080	ea00000a	 b           |$LN3@HalFlip|
  00084		 |$LN7@HalFlip|

; 86   :     }
; 87   :     else if (pDDGPE->SurfaceBusyFlipping(pSurf) || pDDGPE->IsBusy()) {

  00084	e1a0e00f	 mov         lr, pc
  00088	e12fff13	 bx          r3
  0008c	e3500000	 cmp         r0, #0
  00090	1a000009	 bne         |$LN2@HalFlip|
  00094	e5943000	 ldr         r3, [r4]
  00098	e1a00004	 mov         r0, r4
  0009c	e593305c	 ldr         r3, [r3, #0x5C]
  000a0	e1a0e00f	 mov         lr, pc
  000a4	e12fff13	 bx          r3
  000a8	e3500000	 cmp         r0, #0
  000ac	1a000002	 bne         |$LN2@HalFlip|
  000b0		 |$LN3@HalFlip|

; 89   :         goto cleanUp;
; 90   :     }
; 91   : 
; 92   :     // Flip
; 93   :     DDGPEFlip(pd);

  000b0	e1a00005	 mov         r0, r5
  000b4	eb000000	 bl          DDGPEFlip
  000b8	ea000001	 b           |$cleanUp$40249|
  000bc		 |$LN2@HalFlip|

; 88   :         pd->ddRVal = DDERR_WASSTILLDRAWING;

  000bc	e59f300c	 ldr         r3, [pc, #0xC]
  000c0	e5853010	 str         r3, [r5, #0x10]
  000c4		 |$cleanUp$40249|

; 94   : 
; 95   : cleanUp:
; 96   :     DEBUGLEAVE(HalFlip);
; 97   :     return DDHAL_DRIVER_HANDLED;

  000c4	e3a00001	 mov         r0, #1

; 98   : }

  000c8	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$LN16@HalFlip|
  000d0		 |$LN17@HalFlip|
  000d0	8876021c	 DCD         0x8876021c
  000d4		 |$M40410|

			 ENDP  ; |?HalFlip@@YAKPAU_DDHAL_FLIPDATA@@@Z|, HalFlip

	EXPORT	|?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z| ; HalGetBltStatus

  00000			 AREA	 |.pdata|, PDATA
|$T40427| DCD	|$LN12@HalGetBltS|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z| PROC ; HalGetBltStatus

; 103  : {

  00000		 |$LN12@HalGetBltS|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40424|
  00004	e1a04000	 mov         r4, r0

; 104  :     DDGPE       *pDDGPE = GetDDGPE();

  00008	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  0000c	e1a05000	 mov         r5, r0

; 105  :     DDGPESurf   *pSurf = DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  00010	e5940004	 ldr         r0, [r4, #4]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 106  : 
; 107  :     DEBUGMSG(GPE_ZONE_ENTER, (L"+HalGetBltStatus\r\n"));
; 108  : 
; 109  :     pd->ddRVal = DD_OK;
; 110  :     if (pd->dwFlags & DDGBS_CANBLT)

  00018	e5943008	 ldr         r3, [r4, #8]
  0001c	e3a02000	 mov         r2, #0
  00020	e584200c	 str         r2, [r4, #0xC]
  00024	e3130001	 tst         r3, #1
  00028	0a00000d	 beq         |$LN6@HalGetBltS|

; 111  :     {
; 112  :         if (pDDGPE->SurfaceBusyFlipping(pSurf) || pDDGPE->IsBusy())

  0002c	e5953000	 ldr         r3, [r5]
  00030	e1a01000	 mov         r1, r0
  00034	e1a00005	 mov         r0, r5
  00038	e5933058	 ldr         r3, [r3, #0x58]
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3
  00044	e3500000	 cmp         r0, #0
  00048	1a00000e	 bne         |$LN4@HalGetBltS|
  0004c	e5953000	 ldr         r3, [r5]
  00050	e1a00005	 mov         r0, r5
  00054	e593305c	 ldr         r3, [r3, #0x5C]
  00058	e1a0e00f	 mov         lr, pc
  0005c	e12fff13	 bx          r3

; 113  :         {
; 114  :             pd->ddRVal = DDERR_WASSTILLDRAWING;
; 115  :         }            
; 116  :     }

  00060	ea000006	 b           |$LN9@HalGetBltS|
  00064		 |$LN6@HalGetBltS|

; 117  :     else if (pd->dwFlags & DDGBS_ISBLTDONE)

  00064	e3130002	 tst         r3, #2
  00068	0a000008	 beq         |$LN1@HalGetBltS|

; 118  :     {
; 119  :         if (pDDGPE->IsBusy())

  0006c	e5953000	 ldr         r3, [r5]
  00070	e1a00005	 mov         r0, r5
  00074	e593305c	 ldr         r3, [r3, #0x5C]
  00078	e1a0e00f	 mov         lr, pc
  0007c	e12fff13	 bx          r3
  00080		 |$LN9@HalGetBltS|
  00080	e3500000	 cmp         r0, #0
  00084	0a000001	 beq         |$LN1@HalGetBltS|
  00088		 |$LN4@HalGetBltS|

; 120  :         {
; 121  :             pd->ddRVal = DDERR_WASSTILLDRAWING;

  00088	e59f300c	 ldr         r3, [pc, #0xC]
  0008c	e584300c	 str         r3, [r4, #0xC]
  00090		 |$LN1@HalGetBltS|

; 122  :         }            
; 123  :     }
; 124  : 
; 125  :     DEBUGMSG(GPE_ZONE_ENTER, (L"-HalGetBltStatus\r\n"));
; 126  :     return DDHAL_DRIVER_HANDLED;

  00090	e3a00001	 mov         r0, #1

; 127  : }

  00094	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN13@HalGetBltS|
  0009c		 |$LN14@HalGetBltS|
  0009c	8876021c	 DCD         0x8876021c
  000a0		 |$M40425|

			 ENDP  ; |?HalGetBltStatus@@YAKPAU_DDHAL_GETBLTSTATUSDATA@@@Z|, HalGetBltStatus

	EXPORT	|?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z| ; HalGetFlipStatus

  00000			 AREA	 |.pdata|, PDATA
|$T40442| DCD	|$LN8@HalGetFlip|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z| PROC ; HalGetFlipStatus

; 132  : {

  00000		 |$LN8@HalGetFlip|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M40439|
  00004	e1a05000	 mov         r5, r0

; 133  :     DEBUGENTER(HalGetFlipStatus);
; 134  :     DDGPE* pDDGPE = GetDDGPE();

  00008	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  0000c	e1a04000	 mov         r4, r0

; 135  :     DDGPESurf* pSurf = DDGPESurf::GetDDGPESurf(pd->lpDDSurface);

  00010	e5950004	 ldr         r0, [r5, #4]
  00014	eb000000	 bl          |?GetDDGPESurf@DDGPESurf@@SAPAV1@PAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|

; 136  : 
; 137  :     if (pDDGPE->SurfaceBusyFlipping(pSurf))

  00018	e5943000	 ldr         r3, [r4]
  0001c	e1a01000	 mov         r1, r0
  00020	e1a00004	 mov         r0, r4
  00024	e5933058	 ldr         r3, [r3, #0x58]
  00028	e1a0e00f	 mov         lr, pc
  0002c	e12fff13	 bx          r3
  00030	e3500000	 cmp         r0, #0

; 138  :         {
; 139  :         pd->ddRVal = DDERR_WASSTILLDRAWING;

  00034	159f3010	 ldrne       r3, [pc, #0x10]

; 140  :         }
; 141  :     else 
; 142  :         {
; 143  :         pd->ddRVal = DD_OK;

  00038	03a03000	 moveq       r3, #0
  0003c	e585300c	 str         r3, [r5, #0xC]

; 144  :         }
; 145  : 
; 146  :     DEBUGLEAVE(HalGetFlipStatus);
; 147  :     return DDHAL_DRIVER_HANDLED;

  00040	e3a00001	 mov         r0, #1

; 148  : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN9@HalGetFlip|
  0004c		 |$LN10@HalGetFlip|
  0004c	8876021c	 DCD         0x8876021c
  00050		 |$M40440|

			 ENDP  ; |?HalGetFlipStatus@@YAKPAU_DDHAL_GETFLIPSTATUSDATA@@@Z|, HalGetFlipStatus

	EXPORT	|?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| ; HalUpdateOverlay
	IMPORT	|?UpdateOverlay@OMAP2420GPE@@QAAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| ; OMAP2420GPE::UpdateOverlay

  00000			 AREA	 |.pdata|, PDATA
|$T40454| DCD	|$LN5@HalUpdateO|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z| PROC ; HalUpdateOverlay

; 153  : {

  00000		 |$LN5@HalUpdateO|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40451|
  00004	e1a04000	 mov         r4, r0

; 154  :     return ((OMAP2420GPE *)GetDDGPE())->UpdateOverlay(pUpdateOverlay);

  00008	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  0000c	e1a01004	 mov         r1, r4
  00010	eb000000	 bl          |?UpdateOverlay@OMAP2420GPE@@QAAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z|

; 155  : }

  00014	e8bd4010	 ldmia       sp!, {r4, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M40452|

			 ENDP  ; |?HalUpdateOverlay@@YAKPAU_DDHAL_UPDATEOVERLAYDATA@@@Z|, HalUpdateOverlay

	EXPORT	|?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| ; HalSetOverlayPosition
	IMPORT	|?SetOverlayPosition@OMAP2420GPE@@QAAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| ; OMAP2420GPE::SetOverlayPosition

  00000			 AREA	 |.pdata|, PDATA
|$T40464| DCD	|$LN5@HalSetOver|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z| PROC ; HalSetOverlayPosition

; 160  : {

  00000		 |$LN5@HalSetOver|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M40461|
  00004	e1a04000	 mov         r4, r0

; 161  :     return ((OMAP2420GPE *)GetDDGPE())->SetOverlayPosition(pSetPos);

  00008	eb000000	 bl          |?GetDDGPE@@YAPAVDDGPE@@XZ|
  0000c	e1a01004	 mov         r1, r4
  00010	eb000000	 bl          |?SetOverlayPosition@OMAP2420GPE@@QAAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z|

; 162  : }

  00014	e8bd4010	 ldmia       sp!, {r4, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M40462|

			 ENDP  ; |?HalSetOverlayPosition@@YAKPAU_DDHAL_SETOVERLAYPOSITIONDATA@@@Z|, HalSetOverlayPosition

	END
