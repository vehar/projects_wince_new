; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\KEYPAD\keypad.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@CLLAOEB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@IJOLEABA@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA4?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@BEDMHIKJ@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@KMIABPMM@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LODFLACC@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@GIJNHEH@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA0?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|g_deviceRegParams| DCD |??_C@_1BA@GIJNHEH@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA0?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0xc
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@LODFLACC@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA1?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x10
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@KMIABPMM@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA2?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x14
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@BEDMHIKJ@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA3?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x18
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@IJOLEABA@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA4?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x1c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x20
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x24
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x28
	DCD	0x4
	DCD	0x28
	DCD	|??_C@_1BK@CLLAOEB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x2c
	DCD	0x4
	DCD	0x50
	DCD	|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x30
	DCD	0x4
	DCD	0x1f4
	DCD	|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x34
	DCD	0x4
	DCD	0x7d

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| DCB "N"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "p"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| DCB "F"
	DCB	0x0, "i", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, "R", 0x0, "e"
	DCB	0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@CLLAOEB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "e", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| DCB "S"
	DCB	0x0, "a", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "P"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@IJOLEABA@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA4?$AA?$AA@| DCB "I", 0x0
	DCB	"r", 0x0, "q", 0x0, "R", 0x0, "o", 0x0, "w", 0x0, "4", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@BEDMHIKJ@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA3?$AA?$AA@| DCB "I", 0x0
	DCB	"r", 0x0, "q", 0x0, "R", 0x0, "o", 0x0, "w", 0x0, "3", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@KMIABPMM@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA2?$AA?$AA@| DCB "I", 0x0
	DCB	"r", 0x0, "q", 0x0, "R", 0x0, "o", 0x0, "w", 0x0, "2", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LODFLACC@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA1?$AA?$AA@| DCB "I", 0x0
	DCB	"r", 0x0, "q", 0x0, "R", 0x0, "o", 0x0, "w", 0x0, "1", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@GIJNHEH@?$AAI?$AAr?$AAq?$AAR?$AAo?$AAw?$AA0?$AA?$AA@| DCB "I", 0x0
	DCB	"r", 0x0, "q", 0x0, "R", 0x0, "o", 0x0, "w", 0x0, "0", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "k", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3
	EXPORT	|??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KPD_Deinit|
	EXPORT	|??_C@_1GE@DGHBDAGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@LLKOLFLP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@GEGIKHEP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@BIIILJML@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAk?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@PEIHEDPA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAa?$AAs?$AA?5?$AAw?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@LOIIAFLC@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAs?$AAy?$AAs?$AAi?$AAn?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@JEMGGNMO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAK?$AAe?$AAy?$AAb@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NABIOPLG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NEBBBMOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NFKEOBPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NHHKOGNP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KPD_Init|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|KernelIoControl|
	IMPORT	|MmMapIoSpace|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|LocalAlloc|
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T43346| DCD	|$LN49@KPD_Init|
	DCD	0x4001d704
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\keypad\keypad.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@DGHBDAGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@LLKOLFLP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@GEGIKHEP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BIIILJML@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAk?$AAe@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "K"
	DCB	0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "k"
	DCB	0x0, "e", 0x0, "y", 0x0, "b", 0x0, "o", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "w"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u", 0x0, "p", 0x0, " "
	DCB	0x0, "s", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@PEIHEDPA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAa?$AAs?$AA?5?$AAw?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "k", 0x0, "e", 0x0, "y", 0x0, "b", 0x0, "o", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, "s", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u", 0x0, "p"
	DCB	0x0, " ", 0x0, "s", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@LOIIAFLC@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAs?$AAy?$AAs?$AAi?$AAn?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "s", 0x0, "y", 0x0, "s"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@JEMGGNMO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAK?$AAe?$AAy?$AAb@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "K", 0x0, "e", 0x0, "y"
	DCB	0x0, "b", 0x0, "o", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NABIOPLG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "p", 0x0, " "
	DCB	0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, "4", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NEBBBMOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "p", 0x0, " "
	DCB	0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, "3", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NFKEOBPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "p", 0x0, " "
	DCB	0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, "2", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NHHKOGNP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "p", 0x0, " "
	DCB	0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, "1", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "K", 0x0, "P"
	DCB	0x0, "D", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "K", 0x0, "D", 0x0, "P", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KPD_Init| PROC

; 173  : {

  00000		 |$LN49@KPD_Init|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd09c	 sub         sp, sp, #0x9C
  00010		 |$M43343|

; 174  :     DWORD rc = (DWORD)NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 175  :     KPD_DEVICE *pDevice = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]

; 176  :     PHYSICAL_ADDRESS pa;
; 177  : 
; 178  : 
; 179  :     DEBUGMSG(ZONE_FUNCTION, (
; 180  :         L"+KPD_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 181  :     ));

  00020	e59f36e4	 ldr         r3, [pc, #0x6E4]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	0a000006	 beq         |$LN17@KPD_Init|
  00030	e59d20a8	 ldr         r2, [sp, #0xA8]
  00034	e59d10a4	 ldr         r1, [sp, #0xA4]
  00038	e59f0718	 ldr         r0, [pc, #0x718]
  0003c	eb000000	 bl          NKDbgPrintfW
  00040	e3a03001	 mov         r3, #1
  00044	e58d3034	 str         r3, [sp, #0x34]
  00048	ea000001	 b           |$LN18@KPD_Init|
  0004c		 |$LN17@KPD_Init|
  0004c	e3a03000	 mov         r3, #0
  00050	e58d3034	 str         r3, [sp, #0x34]
  00054		 |$LN18@KPD_Init|

; 182  : 
; 183  :     // Create device structure
; 184  :     pDevice = (KPD_DEVICE *)LocalAlloc(LPTR, sizeof(KPD_DEVICE));

  00054	e3a0106c	 mov         r1, #0x6C
  00058	e3a00040	 mov         r0, #0x40
  0005c	eb000000	 bl          LocalAlloc
  00060	e58d0038	 str         r0, [sp, #0x38]
  00064	e59d3038	 ldr         r3, [sp, #0x38]
  00068	e58d3008	 str         r3, [sp, #8]

; 185  :     if (pDevice == NULL) {

  0006c	e59d3008	 ldr         r3, [sp, #8]
  00070	e3530000	 cmp         r3, #0
  00074	1a00000b	 bne         |$LN14@KPD_Init|

; 186  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 187  :             L"Failed allocate KDP driver structure\r\n"
; 188  :         ));

  00078	e59f368c	 ldr         r3, [pc, #0x68C]
  0007c	e5933440	 ldr         r3, [r3, #0x440]
  00080	e3130001	 tst         r3, #1
  00084	0a000004	 beq         |$LN19@KPD_Init|
  00088	e59f06c4	 ldr         r0, [pc, #0x6C4]
  0008c	eb000000	 bl          NKDbgPrintfW
  00090	e3a03001	 mov         r3, #1
  00094	e58d303c	 str         r3, [sp, #0x3C]
  00098	ea000001	 b           |$LN20@KPD_Init|
  0009c		 |$LN19@KPD_Init|
  0009c	e3a03000	 mov         r3, #0
  000a0	e58d303c	 str         r3, [sp, #0x3C]
  000a4		 |$LN20@KPD_Init|

; 189  :         goto cleanUp;

  000a4	ea000180	 b           |$cleanUp$42835|
  000a8		 |$LN14@KPD_Init|

; 190  :     }
; 191  : 
; 192  :     // Set cookie & initialize critical section
; 193  :     pDevice->cookie = KPD_DEVICE_COOKIE;

  000a8	e59d2008	 ldr         r2, [sp, #8]
  000ac	e59f369c	 ldr         r3, [pc, #0x69C]
  000b0	e5823000	 str         r3, [r2]

; 194  :     InitializeCriticalSection(&pDevice->cs);

  000b4	e59d3008	 ldr         r3, [sp, #8]
  000b8	e2830038	 add         r0, r3, #0x38
  000bc	eb000000	 bl          InitializeCriticalSection

; 195  : 
; 196  :     // Read device parameters
; 197  :     if (GetDeviceRegistryParams(
; 198  :         szContext, pDevice, dimof(g_deviceRegParams), g_deviceRegParams
; 199  :     ) != ERROR_SUCCESS) {

  000c0	e59f3684	 ldr         r3, [pc, #0x684]
  000c4	e3a0200b	 mov         r2, #0xB
  000c8	e59d1008	 ldr         r1, [sp, #8]
  000cc	e59d00a4	 ldr         r0, [sp, #0xA4]
  000d0	eb000000	 bl          GetDeviceRegistryParams
  000d4	e58d0040	 str         r0, [sp, #0x40]
  000d8	e59d3040	 ldr         r3, [sp, #0x40]
  000dc	e3530000	 cmp         r3, #0
  000e0	0a00003a	 beq         |$LN13@KPD_Init|

; 200  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 201  :             L"Failed read KPD driver registry parameters\r\n"
; 202  :         ));

  000e4	e59f3620	 ldr         r3, [pc, #0x620]
  000e8	e5933440	 ldr         r3, [r3, #0x440]
  000ec	e3130001	 tst         r3, #1
  000f0	0a000004	 beq         |$LN21@KPD_Init|
  000f4	e59f064c	 ldr         r0, [pc, #0x64C]
  000f8	eb000000	 bl          NKDbgPrintfW
  000fc	e3a03001	 mov         r3, #1
  00100	e58d3044	 str         r3, [sp, #0x44]
  00104	ea000001	 b           |$LN22@KPD_Init|
  00108		 |$LN21@KPD_Init|
  00108	e3a03000	 mov         r3, #0
  0010c	e58d3044	 str         r3, [sp, #0x44]
  00110		 |$LN22@KPD_Init|

; 203  :         pDevice->irqs[0]= -1;

  00110	e59d3008	 ldr         r3, [sp, #8]
  00114	e2832004	 add         r2, r3, #4
  00118	e3e03000	 mvn         r3, #0
  0011c	e5823000	 str         r3, [r2]

; 204  :         pDevice->irqs[1]= 2;

  00120	e59d3008	 ldr         r3, [sp, #8]
  00124	e2832008	 add         r2, r3, #8
  00128	e3a03002	 mov         r3, #2
  0012c	e5823000	 str         r3, [r2]

; 205  :         pDevice->irqs[2]=(DWORD)NULL;

  00130	e59d3008	 ldr         r3, [sp, #8]
  00134	e283200c	 add         r2, r3, #0xC
  00138	e3a03000	 mov         r3, #0
  0013c	e5823000	 str         r3, [r2]

; 206  :         pDevice->irqs[3]=(DWORD)NULL;

  00140	e59d3008	 ldr         r3, [sp, #8]
  00144	e2832010	 add         r2, r3, #0x10
  00148	e3a03000	 mov         r3, #0
  0014c	e5823000	 str         r3, [r2]

; 207  :         pDevice->irqs[4]=(DWORD)NULL;

  00150	e59d3008	 ldr         r3, [sp, #8]
  00154	e2832014	 add         r2, r3, #0x14
  00158	e3a03000	 mov         r3, #0
  0015c	e5823000	 str         r3, [r2]

; 208  :         pDevice->irqs[5]=(DWORD)NULL;

  00160	e59d3008	 ldr         r3, [sp, #8]
  00164	e2832018	 add         r2, r3, #0x18
  00168	e3a03000	 mov         r3, #0
  0016c	e5823000	 str         r3, [r2]

; 209  :         pDevice->irqs[6]=(DWORD)NULL;

  00170	e59d3008	 ldr         r3, [sp, #8]
  00174	e283201c	 add         r2, r3, #0x1C
  00178	e3a03000	 mov         r3, #0
  0017c	e5823000	 str         r3, [r2]

; 210  :         pDevice->priority256=100;

  00180	e59d3008	 ldr         r3, [sp, #8]
  00184	e2832020	 add         r2, r3, #0x20
  00188	e3a03064	 mov         r3, #0x64
  0018c	e5823000	 str         r3, [r2]

; 211  :         pDevice->samplePeriod=40;

  00190	e59d3008	 ldr         r3, [sp, #8]
  00194	e2832028	 add         r2, r3, #0x28
  00198	e3a03028	 mov         r3, #0x28
  0019c	e5823000	 str         r3, [r2]

; 212  :         pDevice->debounceTime=0x50;

  001a0	e59d3008	 ldr         r3, [sp, #8]
  001a4	e283202c	 add         r2, r3, #0x2C
  001a8	e3a03050	 mov         r3, #0x50
  001ac	e5823000	 str         r3, [r2]

; 213  :         pDevice->firstRepeat=500;

  001b0	e59d3008	 ldr         r3, [sp, #8]
  001b4	e2832030	 add         r2, r3, #0x30
  001b8	e3a03f7d	 mov         r3, #0x7D, 30
  001bc	e5823000	 str         r3, [r2]

; 214  :         pDevice->nextRepeat=125;

  001c0	e59d3008	 ldr         r3, [sp, #8]
  001c4	e2832034	 add         r2, r3, #0x34
  001c8	e3a0307d	 mov         r3, #0x7D
  001cc	e5823000	 str         r3, [r2]
  001d0		 |$LN13@KPD_Init|

; 215  : //        goto cleanUp;
; 216  :     }
; 217  : 
; 218  :     // map gpio memory space
; 219  :     pa.QuadPart = OMAP2420_GPIO1_REGS_PA;

  001d0	e3a03312	 mov         r3, #0x12, 6
  001d4	e3833906	 orr         r3, r3, #6, 18
  001d8	e58d3010	 str         r3, [sp, #0x10]
  001dc	e3a03000	 mov         r3, #0
  001e0	e58d3014	 str         r3, [sp, #0x14]

; 220  :     pDevice->pGPIO1Regs = (OMAP2420_GPIO_REGS *) MmMapIoSpace(pa, sizeof(OMAP2420_GPIO_REGS), FALSE);

  001e4	e3a03000	 mov         r3, #0
  001e8	e3a02098	 mov         r2, #0x98
  001ec	e59d0010	 ldr         r0, [sp, #0x10]
  001f0	e59d1014	 ldr         r1, [sp, #0x14]
  001f4	eb000000	 bl          MmMapIoSpace
  001f8	e58d0048	 str         r0, [sp, #0x48]
  001fc	e59d3008	 ldr         r3, [sp, #8]
  00200	e283204c	 add         r2, r3, #0x4C
  00204	e59d3048	 ldr         r3, [sp, #0x48]
  00208	e5823000	 str         r3, [r2]

; 221  :     if (pDevice->pGPIO1Regs == NULL)

  0020c	e59d3008	 ldr         r3, [sp, #8]
  00210	e283304c	 add         r3, r3, #0x4C
  00214	e5933000	 ldr         r3, [r3]
  00218	e3530000	 cmp         r3, #0
  0021c	1a00000b	 bne         |$LN12@KPD_Init|

; 222  :     {
; 223  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: Failed to map GPIO1 registers\r\n"));

  00220	e59f34e4	 ldr         r3, [pc, #0x4E4]
  00224	e5933440	 ldr         r3, [r3, #0x440]
  00228	e3130001	 tst         r3, #1
  0022c	0a000004	 beq         |$LN23@KPD_Init|
  00230	e59f050c	 ldr         r0, [pc, #0x50C]
  00234	eb000000	 bl          NKDbgPrintfW
  00238	e3a03001	 mov         r3, #1
  0023c	e58d304c	 str         r3, [sp, #0x4C]
  00240	ea000001	 b           |$LN24@KPD_Init|
  00244		 |$LN23@KPD_Init|
  00244	e3a03000	 mov         r3, #0
  00248	e58d304c	 str         r3, [sp, #0x4C]
  0024c		 |$LN24@KPD_Init|

; 224  :         goto cleanUp;

  0024c	ea000116	 b           |$cleanUp$42835|
  00250		 |$LN12@KPD_Init|

; 225  :     }
; 226  : 
; 227  :     pa.QuadPart = OMAP2420_GPIO2_REGS_PA;

  00250	e3a03312	 mov         r3, #0x12, 6
  00254	e3833a1a	 orr         r3, r3, #0x1A, 20
  00258	e58d3010	 str         r3, [sp, #0x10]
  0025c	e3a03000	 mov         r3, #0
  00260	e58d3014	 str         r3, [sp, #0x14]

; 228  :     pDevice->pGPIO2Regs = (OMAP2420_GPIO_REGS *) MmMapIoSpace(pa, sizeof(OMAP2420_GPIO_REGS), FALSE);

  00264	e3a03000	 mov         r3, #0
  00268	e3a02098	 mov         r2, #0x98
  0026c	e59d0010	 ldr         r0, [sp, #0x10]
  00270	e59d1014	 ldr         r1, [sp, #0x14]
  00274	eb000000	 bl          MmMapIoSpace
  00278	e58d0050	 str         r0, [sp, #0x50]
  0027c	e59d3008	 ldr         r3, [sp, #8]
  00280	e2832050	 add         r2, r3, #0x50
  00284	e59d3050	 ldr         r3, [sp, #0x50]
  00288	e5823000	 str         r3, [r2]

; 229  :     if (pDevice->pGPIO2Regs == NULL)

  0028c	e59d3008	 ldr         r3, [sp, #8]
  00290	e2833050	 add         r3, r3, #0x50
  00294	e5933000	 ldr         r3, [r3]
  00298	e3530000	 cmp         r3, #0
  0029c	1a00000b	 bne         |$LN11@KPD_Init|

; 230  :     {
; 231  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: Failed to map GPIO2 registers\r\n"));

  002a0	e59f3464	 ldr         r3, [pc, #0x464]
  002a4	e5933440	 ldr         r3, [r3, #0x440]
  002a8	e3130001	 tst         r3, #1
  002ac	0a000004	 beq         |$LN25@KPD_Init|
  002b0	e59f0488	 ldr         r0, [pc, #0x488]
  002b4	eb000000	 bl          NKDbgPrintfW
  002b8	e3a03001	 mov         r3, #1
  002bc	e58d3054	 str         r3, [sp, #0x54]
  002c0	ea000001	 b           |$LN26@KPD_Init|
  002c4		 |$LN25@KPD_Init|
  002c4	e3a03000	 mov         r3, #0
  002c8	e58d3054	 str         r3, [sp, #0x54]
  002cc		 |$LN26@KPD_Init|

; 232  :         goto cleanUp;

  002cc	ea0000f6	 b           |$cleanUp$42835|
  002d0		 |$LN11@KPD_Init|

; 233  :     }
; 234  : 
; 235  :     pa.QuadPart = OMAP2420_GPIO3_REGS_PA;

  002d0	e3a03312	 mov         r3, #0x12, 6
  002d4	e3833907	 orr         r3, r3, #7, 18
  002d8	e58d3010	 str         r3, [sp, #0x10]
  002dc	e3a03000	 mov         r3, #0
  002e0	e58d3014	 str         r3, [sp, #0x14]

; 236  :     pDevice->pGPIO3Regs = (OMAP2420_GPIO_REGS *) MmMapIoSpace(pa, sizeof(OMAP2420_GPIO_REGS), FALSE);

  002e4	e3a03000	 mov         r3, #0
  002e8	e3a02098	 mov         r2, #0x98
  002ec	e59d0010	 ldr         r0, [sp, #0x10]
  002f0	e59d1014	 ldr         r1, [sp, #0x14]
  002f4	eb000000	 bl          MmMapIoSpace
  002f8	e58d0058	 str         r0, [sp, #0x58]
  002fc	e59d3008	 ldr         r3, [sp, #8]
  00300	e2832054	 add         r2, r3, #0x54
  00304	e59d3058	 ldr         r3, [sp, #0x58]
  00308	e5823000	 str         r3, [r2]

; 237  :     if (pDevice->pGPIO3Regs == NULL)

  0030c	e59d3008	 ldr         r3, [sp, #8]
  00310	e2833054	 add         r3, r3, #0x54
  00314	e5933000	 ldr         r3, [r3]
  00318	e3530000	 cmp         r3, #0
  0031c	1a00000b	 bne         |$LN10@KPD_Init|

; 238  :     {
; 239  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: Failed to map GPIO3 registers\r\n"));

  00320	e59f33e4	 ldr         r3, [pc, #0x3E4]
  00324	e5933440	 ldr         r3, [r3, #0x440]
  00328	e3130001	 tst         r3, #1
  0032c	0a000004	 beq         |$LN27@KPD_Init|
  00330	e59f0404	 ldr         r0, [pc, #0x404]
  00334	eb000000	 bl          NKDbgPrintfW
  00338	e3a03001	 mov         r3, #1
  0033c	e58d305c	 str         r3, [sp, #0x5C]
  00340	ea000001	 b           |$LN28@KPD_Init|
  00344		 |$LN27@KPD_Init|
  00344	e3a03000	 mov         r3, #0
  00348	e58d305c	 str         r3, [sp, #0x5C]
  0034c		 |$LN28@KPD_Init|

; 240  :         goto cleanUp;

  0034c	ea0000d6	 b           |$cleanUp$42835|
  00350		 |$LN10@KPD_Init|

; 241  :     }
; 242  : 
; 243  :     pa.QuadPart = OMAP2420_GPIO4_REGS_PA;

  00350	e3a03312	 mov         r3, #0x12, 6
  00354	e3833a1e	 orr         r3, r3, #0x1E, 20
  00358	e58d3010	 str         r3, [sp, #0x10]
  0035c	e3a03000	 mov         r3, #0
  00360	e58d3014	 str         r3, [sp, #0x14]

; 244  :     pDevice->pGPIO4Regs = (OMAP2420_GPIO_REGS *) MmMapIoSpace(pa, sizeof(OMAP2420_GPIO_REGS), FALSE);

  00364	e3a03000	 mov         r3, #0
  00368	e3a02098	 mov         r2, #0x98
  0036c	e59d0010	 ldr         r0, [sp, #0x10]
  00370	e59d1014	 ldr         r1, [sp, #0x14]
  00374	eb000000	 bl          MmMapIoSpace
  00378	e58d0060	 str         r0, [sp, #0x60]
  0037c	e59d3008	 ldr         r3, [sp, #8]
  00380	e2832058	 add         r2, r3, #0x58
  00384	e59d3060	 ldr         r3, [sp, #0x60]
  00388	e5823000	 str         r3, [r2]

; 245  :     if (pDevice->pGPIO4Regs == NULL)

  0038c	e59d3008	 ldr         r3, [sp, #8]
  00390	e2833058	 add         r3, r3, #0x58
  00394	e5933000	 ldr         r3, [r3]
  00398	e3530000	 cmp         r3, #0
  0039c	1a00000b	 bne         |$LN9@KPD_Init|

; 246  :     {
; 247  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: Failed to map GPIO4 registers\r\n"));

  003a0	e59f3364	 ldr         r3, [pc, #0x364]
  003a4	e5933440	 ldr         r3, [r3, #0x440]
  003a8	e3130001	 tst         r3, #1
  003ac	0a000004	 beq         |$LN29@KPD_Init|
  003b0	e59f0380	 ldr         r0, [pc, #0x380]
  003b4	eb000000	 bl          NKDbgPrintfW
  003b8	e3a03001	 mov         r3, #1
  003bc	e58d3064	 str         r3, [sp, #0x64]
  003c0	ea000001	 b           |$LN30@KPD_Init|
  003c4		 |$LN29@KPD_Init|
  003c4	e3a03000	 mov         r3, #0
  003c8	e58d3064	 str         r3, [sp, #0x64]
  003cc		 |$LN30@KPD_Init|

; 248  :         goto cleanUp;

  003cc	ea0000b6	 b           |$cleanUp$42835|
  003d0		 |$LN9@KPD_Init|

; 249  :     }
; 250  : 
; 251  :     // Need to configure the row GPIO's as interrupt sources
; 252  :     pDevice->irqs[0] = -1;

  003d0	e59d3008	 ldr         r3, [sp, #8]
  003d4	e2832004	 add         r2, r3, #4
  003d8	e3e03000	 mvn         r3, #0
  003dc	e5823000	 str         r3, [r2]

; 253  :     pDevice->irqs[1] = 2;

  003e0	e59d3008	 ldr         r3, [sp, #8]
  003e4	e2832008	 add         r2, r3, #8
  003e8	e3a03002	 mov         r3, #2
  003ec	e5823000	 str         r3, [r2]

; 254  :     //pDevice->irqs[2] = IRQ_GPIO_0+88;	// row 0 = GPIO88
; 255  :     //pDevice->irqs[3] = IRQ_GPIO_0+89;	// row 1 = GPIO89
; 256  :     //pDevice->irqs[4] = IRQ_GPIO_0+124;	// row 2 = GPIO124
; 257  :     //pDevice->irqs[5] = IRQ_GPIO_0+11;	// row 3 = GPIO11
; 258  :     //pDevice->irqs[6] = IRQ_GPIO_0+6;	// row 4 = GPIO6
; 259  : 
; 260  : 
; 261  :     // Map interrupts
; 262  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR,
; 263  :         pDevice->irqs, sizeof(pDevice->irqs),
; 264  :         &pDevice->sysIntr, sizeof(pDevice->sysIntr), NULL
; 265  :     )) {

  003f0	e3a03000	 mov         r3, #0
  003f4	e58d3004	 str         r3, [sp, #4]
  003f8	e3a03004	 mov         r3, #4
  003fc	e58d3000	 str         r3, [sp]
  00400	e59d3008	 ldr         r3, [sp, #8]
  00404	e283305c	 add         r3, r3, #0x5C
  00408	e3a0201c	 mov         r2, #0x1C
  0040c	e59d1008	 ldr         r1, [sp, #8]
  00410	e2811004	 add         r1, r1, #4
  00414	e59f0318	 ldr         r0, [pc, #0x318]
  00418	eb000000	 bl          KernelIoControl
  0041c	e58d0068	 str         r0, [sp, #0x68]
  00420	e59d3068	 ldr         r3, [sp, #0x68]
  00424	e3530000	 cmp         r3, #0
  00428	1a00000c	 bne         |$LN8@KPD_Init|

; 266  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 267  :             L"Failed map Keyboard Interrupt\r\n"
; 268  :         ));

  0042c	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00430	e5933440	 ldr         r3, [r3, #0x440]
  00434	e3130001	 tst         r3, #1
  00438	0a000004	 beq         |$LN31@KPD_Init|
  0043c	e59f02ec	 ldr         r0, [pc, #0x2EC]
  00440	eb000000	 bl          NKDbgPrintfW
  00444	e3a03001	 mov         r3, #1
  00448	e58d306c	 str         r3, [sp, #0x6C]
  0044c	ea000001	 b           |$LN32@KPD_Init|
  00450		 |$LN31@KPD_Init|
  00450	e3a03000	 mov         r3, #0
  00454	e58d306c	 str         r3, [sp, #0x6C]
  00458		 |$LN32@KPD_Init|

; 269  :         goto cleanUp;

  00458	ea000093	 b           |$cleanUp$42835|
  0045c	ea00000d	 b           |$LN7@KPD_Init|
  00460		 |$LN8@KPD_Init|

; 270  :     } else DEBUGMSG(ZONE_INIT, (L"KPD_Init: sysintr = %d",pDevice->sysIntr));

  00460	e59f32a4	 ldr         r3, [pc, #0x2A4]
  00464	e5933440	 ldr         r3, [r3, #0x440]
  00468	e3130008	 tst         r3, #8
  0046c	0a000007	 beq         |$LN33@KPD_Init|
  00470	e59d3008	 ldr         r3, [sp, #8]
  00474	e283305c	 add         r3, r3, #0x5C
  00478	e5931000	 ldr         r1, [r3]
  0047c	e59f02a8	 ldr         r0, [pc, #0x2A8]
  00480	eb000000	 bl          NKDbgPrintfW
  00484	e3a03001	 mov         r3, #1
  00488	e58d3070	 str         r3, [sp, #0x70]
  0048c	ea000001	 b           |$LN34@KPD_Init|
  00490		 |$LN33@KPD_Init|
  00490	e3a03000	 mov         r3, #0
  00494	e58d3070	 str         r3, [sp, #0x70]
  00498		 |$LN34@KPD_Init|
  00498		 |$LN7@KPD_Init|

; 271  : 
; 272  :     // Enable wakeup from keyboard if required
; 273  :     if (pDevice->enableWake != 0) {

  00498	e59d3008	 ldr         r3, [sp, #8]
  0049c	e2833024	 add         r3, r3, #0x24
  004a0	e5933000	 ldr         r3, [r3]
  004a4	e3530000	 cmp         r3, #0
  004a8	0a000023	 beq         |$LN6@KPD_Init|

; 274  :         DEBUGMSG(ZONE_ERROR, (L"Enable keyboard as wakeup source\r\n"));

  004ac	e59f3258	 ldr         r3, [pc, #0x258]
  004b0	e5933440	 ldr         r3, [r3, #0x440]
  004b4	e3130001	 tst         r3, #1
  004b8	0a000004	 beq         |$LN35@KPD_Init|
  004bc	e59f0264	 ldr         r0, [pc, #0x264]
  004c0	eb000000	 bl          NKDbgPrintfW
  004c4	e3a03001	 mov         r3, #1
  004c8	e58d3074	 str         r3, [sp, #0x74]
  004cc	ea000001	 b           |$LN36@KPD_Init|
  004d0		 |$LN35@KPD_Init|
  004d0	e3a03000	 mov         r3, #0
  004d4	e58d3074	 str         r3, [sp, #0x74]
  004d8		 |$LN36@KPD_Init|

; 275  :         if (!KernelIoControl(
; 276  :             IOCTL_HAL_ENABLE_WAKE, &pDevice->sysIntr, sizeof(pDevice->sysIntr),
; 277  :             NULL, 0, NULL
; 278  :         )) {

  004d8	e3a03000	 mov         r3, #0
  004dc	e58d3004	 str         r3, [sp, #4]
  004e0	e3a03000	 mov         r3, #0
  004e4	e58d3000	 str         r3, [sp]
  004e8	e3a03000	 mov         r3, #0
  004ec	e3a02004	 mov         r2, #4
  004f0	e59d1008	 ldr         r1, [sp, #8]
  004f4	e281105c	 add         r1, r1, #0x5C
  004f8	e59f0224	 ldr         r0, [pc, #0x224]
  004fc	eb000000	 bl          KernelIoControl
  00500	e58d0078	 str         r0, [sp, #0x78]
  00504	e59d3078	 ldr         r3, [sp, #0x78]
  00508	e3530000	 cmp         r3, #0
  0050c	1a00000a	 bne         |$LN5@KPD_Init|

; 279  :             DEBUGMSG(ZONE_WARN, (L"WARN: KPD_Init: "
; 280  :                 L"Failed enable keyboard as wakeup source\r\n"
; 281  :             ));

  00510	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00514	e5933440	 ldr         r3, [r3, #0x440]
  00518	e3130002	 tst         r3, #2
  0051c	0a000004	 beq         |$LN37@KPD_Init|
  00520	e59f01f8	 ldr         r0, [pc, #0x1F8]
  00524	eb000000	 bl          NKDbgPrintfW
  00528	e3a03001	 mov         r3, #1
  0052c	e58d307c	 str         r3, [sp, #0x7C]
  00530	ea000001	 b           |$LN38@KPD_Init|
  00534		 |$LN37@KPD_Init|
  00534	e3a03000	 mov         r3, #0
  00538	e58d307c	 str         r3, [sp, #0x7C]
  0053c		 |$LN38@KPD_Init|
  0053c		 |$LN5@KPD_Init|
  0053c		 |$LN6@KPD_Init|

; 282  :         }
; 283  :     }
; 284  : 
; 285  :     // Create interrupt event
; 286  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  0053c	e3a03000	 mov         r3, #0
  00540	e3a02000	 mov         r2, #0
  00544	e3a01000	 mov         r1, #0
  00548	e3a00000	 mov         r0, #0
  0054c	eb000000	 bl          CreateEventW
  00550	e58d0080	 str         r0, [sp, #0x80]
  00554	e59d3008	 ldr         r3, [sp, #8]
  00558	e2832060	 add         r2, r3, #0x60
  0055c	e59d3080	 ldr         r3, [sp, #0x80]
  00560	e5823000	 str         r3, [r2]

; 287  :     if (pDevice->hIntrEvent == NULL) {

  00564	e59d3008	 ldr         r3, [sp, #8]
  00568	e2833060	 add         r3, r3, #0x60
  0056c	e5933000	 ldr         r3, [r3]
  00570	e3530000	 cmp         r3, #0
  00574	1a00000b	 bne         |$LN4@KPD_Init|

; 288  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 289  :             L"Failed create interrupt event\r\n"
; 290  :         ));

  00578	e59f318c	 ldr         r3, [pc, #0x18C]
  0057c	e5933440	 ldr         r3, [r3, #0x440]
  00580	e3130001	 tst         r3, #1
  00584	0a000004	 beq         |$LN39@KPD_Init|
  00588	e59f018c	 ldr         r0, [pc, #0x18C]
  0058c	eb000000	 bl          NKDbgPrintfW
  00590	e3a03001	 mov         r3, #1
  00594	e58d3084	 str         r3, [sp, #0x84]
  00598	ea000001	 b           |$LN40@KPD_Init|
  0059c		 |$LN39@KPD_Init|
  0059c	e3a03000	 mov         r3, #0
  005a0	e58d3084	 str         r3, [sp, #0x84]
  005a4		 |$LN40@KPD_Init|

; 291  :         goto cleanUp;

  005a4	ea000040	 b           |$cleanUp$42835|
  005a8		 |$LN4@KPD_Init|

; 292  :     }
; 293  : 
; 294  :     // Initialize interrupt
; 295  :     if (!InterruptInitialize(pDevice->sysIntr, pDevice->hIntrEvent, NULL, 0)) {

  005a8	e3a03000	 mov         r3, #0
  005ac	e3a02000	 mov         r2, #0
  005b0	e59d1008	 ldr         r1, [sp, #8]
  005b4	e2811060	 add         r1, r1, #0x60
  005b8	e5911000	 ldr         r1, [r1]
  005bc	e59d0008	 ldr         r0, [sp, #8]
  005c0	e280005c	 add         r0, r0, #0x5C
  005c4	e5900000	 ldr         r0, [r0]
  005c8	eb000000	 bl          InterruptInitialize
  005cc	e58d0088	 str         r0, [sp, #0x88]
  005d0	e59d3088	 ldr         r3, [sp, #0x88]
  005d4	e3530000	 cmp         r3, #0
  005d8	1a00000b	 bne         |$LN3@KPD_Init|

; 296  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Init: "
; 297  :             L"InterruptInitialize failed\r\n"
; 298  :         ));

  005dc	e59f3128	 ldr         r3, [pc, #0x128]
  005e0	e5933440	 ldr         r3, [r3, #0x440]
  005e4	e3130001	 tst         r3, #1
  005e8	0a000004	 beq         |$LN41@KPD_Init|
  005ec	e59f0124	 ldr         r0, [pc, #0x124]
  005f0	eb000000	 bl          NKDbgPrintfW
  005f4	e3a03001	 mov         r3, #1
  005f8	e58d308c	 str         r3, [sp, #0x8C]
  005fc	ea000001	 b           |$LN42@KPD_Init|
  00600		 |$LN41@KPD_Init|
  00600	e3a03000	 mov         r3, #0
  00604	e58d308c	 str         r3, [sp, #0x8C]
  00608		 |$LN42@KPD_Init|

; 299  :         goto cleanUp;

  00608	ea000027	 b           |$cleanUp$42835|
  0060c		 |$LN3@KPD_Init|

; 300  :     }
; 301  :     // Start interrupt service thread
; 302  :     if ((pDevice->hIntrThread = CreateThread(
; 303  :         NULL, 0, KPD_IntrThread, pDevice, 0,NULL
; 304  :     )) == NULL) {

  0060c	e3a03000	 mov         r3, #0
  00610	e58d3004	 str         r3, [sp, #4]
  00614	e3a03000	 mov         r3, #0
  00618	e58d3000	 str         r3, [sp]
  0061c	e59d3008	 ldr         r3, [sp, #8]
  00620	e59f20ec	 ldr         r2, [pc, #0xEC]
  00624	e3a01000	 mov         r1, #0
  00628	e3a00000	 mov         r0, #0
  0062c	eb000000	 bl          CreateThread
  00630	e58d0090	 str         r0, [sp, #0x90]
  00634	e59d3008	 ldr         r3, [sp, #8]
  00638	e2832064	 add         r2, r3, #0x64
  0063c	e59d3090	 ldr         r3, [sp, #0x90]
  00640	e5823000	 str         r3, [r2]
  00644	e59d3008	 ldr         r3, [sp, #8]
  00648	e2833064	 add         r3, r3, #0x64
  0064c	e5933000	 ldr         r3, [r3]
  00650	e3530000	 cmp         r3, #0
  00654	1a00000b	 bne         |$LN2@KPD_Init|

; 305  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Init: "
; 306  :             L"Failed create interrupt thread\r\n"
; 307  :         ));

  00658	e59f30ac	 ldr         r3, [pc, #0xAC]
  0065c	e5933440	 ldr         r3, [r3, #0x440]
  00660	e3130001	 tst         r3, #1
  00664	0a000004	 beq         |$LN43@KPD_Init|
  00668	e59f00a0	 ldr         r0, [pc, #0xA0]
  0066c	eb000000	 bl          NKDbgPrintfW
  00670	e3a03001	 mov         r3, #1
  00674	e58d3094	 str         r3, [sp, #0x94]
  00678	ea000001	 b           |$LN44@KPD_Init|
  0067c		 |$LN43@KPD_Init|
  0067c	e3a03000	 mov         r3, #0
  00680	e58d3094	 str         r3, [sp, #0x94]
  00684		 |$LN44@KPD_Init|

; 308  :         goto cleanUp;

  00684	ea000008	 b           |$cleanUp$42835|
  00688		 |$LN2@KPD_Init|

; 309  :     }
; 310  :     // Set thread priority
; 311  :     CeSetThreadPriority(pDevice->hIntrThread, pDevice->priority256);

  00688	e59d3008	 ldr         r3, [sp, #8]
  0068c	e2833020	 add         r3, r3, #0x20
  00690	e5931000	 ldr         r1, [r3]
  00694	e59d3008	 ldr         r3, [sp, #8]
  00698	e2833064	 add         r3, r3, #0x64
  0069c	e5930000	 ldr         r0, [r3]
  006a0	eb000000	 bl          CeSetThreadPriority

; 312  : 
; 313  :     // Return non-null value
; 314  :     rc = (DWORD)pDevice;

  006a4	e59d3008	 ldr         r3, [sp, #8]
  006a8	e58d300c	 str         r3, [sp, #0xC]
  006ac		 |$cleanUp$42835|

; 315  : 
; 316  : cleanUp:
; 317  :     if (rc == 0) KPD_Deinit((DWORD)pDevice);

  006ac	e59d300c	 ldr         r3, [sp, #0xC]
  006b0	e3530000	 cmp         r3, #0
  006b4	1a000001	 bne         |$LN1@KPD_Init|
  006b8	e59d0008	 ldr         r0, [sp, #8]
  006bc	eb000000	 bl          KPD_Deinit
  006c0		 |$LN1@KPD_Init|

; 318  :     DEBUGMSG(ZONE_FUNCTION, (L"-KPD_Init(rc = %d\r\n", rc));

  006c0	e59f3044	 ldr         r3, [pc, #0x44]
  006c4	e5933440	 ldr         r3, [r3, #0x440]
  006c8	e3130004	 tst         r3, #4
  006cc	0a000005	 beq         |$LN45@KPD_Init|
  006d0	e59d100c	 ldr         r1, [sp, #0xC]
  006d4	e59f002c	 ldr         r0, [pc, #0x2C]
  006d8	eb000000	 bl          NKDbgPrintfW
  006dc	e3a03001	 mov         r3, #1
  006e0	e58d3098	 str         r3, [sp, #0x98]
  006e4	ea000001	 b           |$LN46@KPD_Init|
  006e8		 |$LN45@KPD_Init|
  006e8	e3a03000	 mov         r3, #0
  006ec	e58d3098	 str         r3, [sp, #0x98]
  006f0		 |$LN46@KPD_Init|

; 319  : 
; 320  :     return rc;

  006f0	e59d300c	 ldr         r3, [sp, #0xC]
  006f4	e58d3030	 str         r3, [sp, #0x30]

; 321  : }

  006f8	e59d0030	 ldr         r0, [sp, #0x30]
  006fc	e28dd09c	 add         sp, sp, #0x9C
  00700	e89d6000	 ldmia       sp, {sp, lr}
  00704	e12fff1e	 bx          lr
  00708		 |$LN50@KPD_Init|
  00708		 |$LN51@KPD_Init|
  00708	00000000	 DCD         |??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0070c		 |$LN52@KPD_Init|
  0070c	00000000	 DCD         |dpCurSettings|
  00710		 |$LN53@KPD_Init|
  00710	00000000	 DCD         |??_C@_1GE@DGHBDAGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  00714		 |$LN54@KPD_Init|
  00714	00000000	 DCD         |KPD_IntrThread|
  00718		 |$LN55@KPD_Init|
  00718	00000000	 DCD         |??_C@_1FM@LLKOLFLP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@|
  0071c		 |$LN56@KPD_Init|
  0071c	00000000	 DCD         |??_C@_1GC@GEGIKHEP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  00720		 |$LN57@KPD_Init|
  00720	00000000	 DCD         |??_C@_1HE@BIIILJML@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAk?$AAe@|
  00724		 |$LN58@KPD_Init|
  00724	010100a0	 DCD         0x10100a0
  00728		 |$LN59@KPD_Init|
  00728	00000000	 DCD         |??_C@_1EG@PEIHEDPA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAk?$AAe?$AAy?$AAb?$AAo?$AAa?$AAr?$AAd?$AA?5?$AAa?$AAs?$AA?5?$AAw?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe@|
  0072c		 |$LN60@KPD_Init|
  0072c	00000000	 DCD         |??_C@_1CO@LOIIAFLC@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAs?$AAy?$AAs?$AAi?$AAn?$AAt?$AAr?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AA@|
  00730		 |$LN61@KPD_Init|
  00730	00000000	 DCD         |??_C@_1GC@JEMGGNMO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAK?$AAe?$AAy?$AAb@|
  00734		 |$LN62@KPD_Init|
  00734	01010098	 DCD         0x1010098
  00738		 |$LN63@KPD_Init|
  00738	00000000	 DCD         |??_C@_1GC@NABIOPLG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@|
  0073c		 |$LN64@KPD_Init|
  0073c	00000000	 DCD         |??_C@_1GC@NEBBBMOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@|
  00740		 |$LN65@KPD_Init|
  00740	00000000	 DCD         |??_C@_1GC@NFKEOBPI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@|
  00744		 |$LN66@KPD_Init|
  00744	00000000	 DCD         |??_C@_1GC@NHHKOGNP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAG@|
  00748		 |$LN67@KPD_Init|
  00748	00000000	 DCD         |??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@|
  0074c		 |$LN68@KPD_Init|
  0074c	00000000	 DCD         |g_deviceRegParams|
  00750		 |$LN69@KPD_Init|
  00750	6b706444	 DCD         0x6b706444
  00754		 |$LN70@KPD_Init|
  00754	00000000	 DCD         |??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00758		 |$LN71@KPD_Init|
  00758	00000000	 DCD         |??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0075c		 |$M43344|

			 ENDP  ; |KPD_Init|

	EXPORT	|??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|CloseHandle|
	IMPORT	|InterruptDisable|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|WaitForSingleObject|

  00008			 AREA	 |.pdata|, PDATA
|$T43382| DCD	|$LN20@KPD_Deinit|
	DCD	0x4000c104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0075c			 AREA	 |.text|, CODE, ARM

  0075c		 |KPD_Deinit| PROC

; 330  : {

  0075c		 |$LN20@KPD_Deinit|
  0075c	e1a0c00d	 mov         r12, sp
  00760	e92d0001	 stmdb       sp!, {r0}
  00764	e92d5000	 stmdb       sp!, {r12, lr}
  00768	e24dd028	 sub         sp, sp, #0x28
  0076c		 |$M43379|

; 331  :     BOOL rc = FALSE;

  0076c	e3a03000	 mov         r3, #0
  00770	e58d300c	 str         r3, [sp, #0xC]

; 332  :     KPD_DEVICE *pDevice = (KPD_DEVICE*)context;

  00774	e59d3030	 ldr         r3, [sp, #0x30]
  00778	e58d3008	 str         r3, [sp, #8]

; 333  : 
; 334  : 
; 335  :     DEBUGMSG(ZONE_FUNCTION, (L"+KPD_Deinit(0x%08x)\r\n", context));

  0077c	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00780	e5933440	 ldr         r3, [r3, #0x440]
  00784	e3130004	 tst         r3, #4
  00788	0a000005	 beq         |$LN12@KPD_Deinit|
  0078c	e59d1030	 ldr         r1, [sp, #0x30]
  00790	e59f02c4	 ldr         r0, [pc, #0x2C4]
  00794	eb000000	 bl          NKDbgPrintfW
  00798	e3a03001	 mov         r3, #1
  0079c	e58d301c	 str         r3, [sp, #0x1C]
  007a0	ea000001	 b           |$LN13@KPD_Deinit|
  007a4		 |$LN12@KPD_Deinit|
  007a4	e3a03000	 mov         r3, #0
  007a8	e58d301c	 str         r3, [sp, #0x1C]
  007ac		 |$LN13@KPD_Deinit|

; 336  : 
; 337  :     // Check if we get correct context
; 338  :     if (pDevice == NULL || pDevice->cookie != KPD_DEVICE_COOKIE) {

  007ac	e59d3008	 ldr         r3, [sp, #8]
  007b0	e3530000	 cmp         r3, #0
  007b4	0a000004	 beq         |$LN8@KPD_Deinit|
  007b8	e59d3008	 ldr         r3, [sp, #8]
  007bc	e5932000	 ldr         r2, [r3]
  007c0	e59f3290	 ldr         r3, [pc, #0x290]
  007c4	e1520003	 cmp         r2, r3
  007c8	0a00000b	 beq         |$LN9@KPD_Deinit|
  007cc		 |$LN8@KPD_Deinit|

; 339  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Deinit: "
; 340  :             L"Incorrect context parameter\r\n"
; 341  :         ));

  007cc	e59f3278	 ldr         r3, [pc, #0x278]
  007d0	e5933440	 ldr         r3, [r3, #0x440]
  007d4	e3130001	 tst         r3, #1
  007d8	0a000004	 beq         |$LN14@KPD_Deinit|
  007dc	e59f0270	 ldr         r0, [pc, #0x270]
  007e0	eb000000	 bl          NKDbgPrintfW
  007e4	e3a03001	 mov         r3, #1
  007e8	e58d3020	 str         r3, [sp, #0x20]
  007ec	ea000001	 b           |$LN15@KPD_Deinit|
  007f0		 |$LN14@KPD_Deinit|
  007f0	e3a03000	 mov         r3, #0
  007f4	e58d3020	 str         r3, [sp, #0x20]
  007f8		 |$LN15@KPD_Deinit|

; 342  :         goto cleanUp;

  007f8	ea000080	 b           |$cleanUp$42922|
  007fc		 |$LN9@KPD_Deinit|

; 343  :     }
; 344  : 
; 345  :     // Close interrupt thread
; 346  :     if (pDevice->hIntrThread != NULL) {

  007fc	e59d3008	 ldr         r3, [sp, #8]
  00800	e2833064	 add         r3, r3, #0x64
  00804	e5933000	 ldr         r3, [r3]
  00808	e3530000	 cmp         r3, #0
  0080c	0a00000c	 beq         |$LN7@KPD_Deinit|

; 347  :         // Signal stop to thread
; 348  :         pDevice->intrThreadExit = TRUE;

  00810	e59d3008	 ldr         r3, [sp, #8]
  00814	e2832068	 add         r2, r3, #0x68
  00818	e3a03001	 mov         r3, #1
  0081c	e5823000	 str         r3, [r2]

; 349  :         // Set event to wake it
; 350  :         SetEvent(pDevice->hIntrEvent);

  00820	e59d3008	 ldr         r3, [sp, #8]
  00824	e2833060	 add         r3, r3, #0x60
  00828	e5930000	 ldr         r0, [r3]
  0082c	eb000000	 bl          SetEvent

; 351  :         // Wait until thread exits
; 352  :         WaitForSingleObject(pDevice->hIntrThread, INFINITE);

  00830	e3e01000	 mvn         r1, #0
  00834	e59d3008	 ldr         r3, [sp, #8]
  00838	e2833064	 add         r3, r3, #0x64
  0083c	e5930000	 ldr         r0, [r3]
  00840	eb000000	 bl          WaitForSingleObject
  00844		 |$LN7@KPD_Deinit|

; 353  :     }
; 354  : 
; 355  :     // Unmap GPIO controller registers
; 356  :         // Set all output columns to ones
; 357  :         // Ie, drive all the column GPIO's
; 358  : 
; 359  :         // Mask keyboard interrupts
; 360  :         // Unmap registers
; 361  :     if (pDevice->pGPIO1Regs != NULL)

  00844	e59d3008	 ldr         r3, [sp, #8]
  00848	e283304c	 add         r3, r3, #0x4C
  0084c	e5933000	 ldr         r3, [r3]
  00850	e3530000	 cmp         r3, #0
  00854	0a000010	 beq         |$LN6@KPD_Deinit|

; 362  :     {
; 363  :         OUTREG32(&pDevice->pGPIO1Regs->ulGPIO_SETDATAOUT, 1<<15);    // column 2 = Drive GPIO15

  00858	e59d3008	 ldr         r3, [sp, #8]
  0085c	e283304c	 add         r3, r3, #0x4C
  00860	e5933000	 ldr         r3, [r3]
  00864	e2832094	 add         r2, r3, #0x94
  00868	e3a03902	 mov         r3, #2, 18
  0086c	e5823000	 str         r3, [r2]

; 364  :         OUTREG32(&pDevice->pGPIO1Regs->ulGPIO_SETDATAOUT, 1<<12);    // column 4 = Drive GPIO12

  00870	e59d3008	 ldr         r3, [sp, #8]
  00874	e283304c	 add         r3, r3, #0x4C
  00878	e5933000	 ldr         r3, [r3]
  0087c	e2832094	 add         r2, r3, #0x94
  00880	e3a03a01	 mov         r3, #1, 20
  00884	e5823000	 str         r3, [r2]

; 365  :         MmUnmapIoSpace((VOID*)pDevice->pGPIO1Regs, sizeof(OMAP2420_GPIO_REGS));

  00888	e3a01098	 mov         r1, #0x98
  0088c	e59d3008	 ldr         r3, [sp, #8]
  00890	e283304c	 add         r3, r3, #0x4C
  00894	e5930000	 ldr         r0, [r3]
  00898	eb000000	 bl          MmUnmapIoSpace
  0089c		 |$LN6@KPD_Deinit|

; 366  :     }
; 367  : 
; 368  :     if (pDevice->pGPIO2Regs != NULL)

  0089c	e59d3008	 ldr         r3, [sp, #8]
  008a0	e2833050	 add         r3, r3, #0x50
  008a4	e5933000	 ldr         r3, [r3]
  008a8	e3530000	 cmp         r3, #0
  008ac	0a00000a	 beq         |$LN5@KPD_Deinit|

; 369  :     {
; 370  :         OUTREG32(&pDevice->pGPIO2Regs->ulGPIO_SETDATAOUT, 1<<4);     // column 3 = Drive GPIO36

  008b0	e59d3008	 ldr         r3, [sp, #8]
  008b4	e2833050	 add         r3, r3, #0x50
  008b8	e5933000	 ldr         r3, [r3]
  008bc	e2832094	 add         r2, r3, #0x94
  008c0	e3a03010	 mov         r3, #0x10
  008c4	e5823000	 str         r3, [r2]

; 371  :         MmUnmapIoSpace((VOID*)pDevice->pGPIO2Regs, sizeof(OMAP2420_GPIO_REGS));

  008c8	e3a01098	 mov         r1, #0x98
  008cc	e59d3008	 ldr         r3, [sp, #8]
  008d0	e2833050	 add         r3, r3, #0x50
  008d4	e5930000	 ldr         r0, [r3]
  008d8	eb000000	 bl          MmUnmapIoSpace
  008dc		 |$LN5@KPD_Deinit|

; 372  :     }
; 373  : 
; 374  :     if (pDevice->pGPIO3Regs != NULL)

  008dc	e59d3008	 ldr         r3, [sp, #8]
  008e0	e2833054	 add         r3, r3, #0x54
  008e4	e5933000	 ldr         r3, [r3]
  008e8	e3530000	 cmp         r3, #0
  008ec	0a000010	 beq         |$LN4@KPD_Deinit|

; 375  :     {
; 376  :         OUTREG32(&pDevice->pGPIO3Regs->ulGPIO_SETDATAOUT, 1<<26);    // column 0 = Drive GPIO90

  008f0	e59d3008	 ldr         r3, [sp, #8]
  008f4	e2833054	 add         r3, r3, #0x54
  008f8	e5933000	 ldr         r3, [r3]
  008fc	e2832094	 add         r2, r3, #0x94
  00900	e3a03301	 mov         r3, #1, 6
  00904	e5823000	 str         r3, [r2]

; 377  :         OUTREG32(&pDevice->pGPIO3Regs->ulGPIO_SETDATAOUT, 1<<27);    // column 1 = Drive GPIO91

  00908	e59d3008	 ldr         r3, [sp, #8]
  0090c	e2833054	 add         r3, r3, #0x54
  00910	e5933000	 ldr         r3, [r3]
  00914	e2832094	 add         r2, r3, #0x94
  00918	e3a03302	 mov         r3, #2, 6
  0091c	e5823000	 str         r3, [r2]

; 378  :         MmUnmapIoSpace((VOID*)pDevice->pGPIO3Regs, sizeof(OMAP2420_GPIO_REGS));

  00920	e3a01098	 mov         r1, #0x98
  00924	e59d3008	 ldr         r3, [sp, #8]
  00928	e2833054	 add         r3, r3, #0x54
  0092c	e5930000	 ldr         r0, [r3]
  00930	eb000000	 bl          MmUnmapIoSpace
  00934		 |$LN4@KPD_Deinit|

; 379  :     }
; 380  : 
; 381  :     if (pDevice->pGPIO4Regs != NULL)

  00934	e59d3008	 ldr         r3, [sp, #8]
  00938	e2833058	 add         r3, r3, #0x58
  0093c	e5933000	 ldr         r3, [r3]
  00940	e3530000	 cmp         r3, #0
  00944	0a00000a	 beq         |$LN3@KPD_Deinit|

; 382  :     {
; 383  :         OUTREG32(&pDevice->pGPIO4Regs->ulGPIO_SETDATAOUT, 1<<1);     // column 5 = Drive GPIO97

  00948	e59d3008	 ldr         r3, [sp, #8]
  0094c	e2833058	 add         r3, r3, #0x58
  00950	e5933000	 ldr         r3, [r3]
  00954	e2832094	 add         r2, r3, #0x94
  00958	e3a03002	 mov         r3, #2
  0095c	e5823000	 str         r3, [r2]

; 384  :         MmUnmapIoSpace((VOID*)pDevice->pGPIO4Regs, sizeof(OMAP2420_GPIO_REGS));

  00960	e3a01098	 mov         r1, #0x98
  00964	e59d3008	 ldr         r3, [sp, #8]
  00968	e2833058	 add         r3, r3, #0x58
  0096c	e5930000	 ldr         r0, [r3]
  00970	eb000000	 bl          MmUnmapIoSpace
  00974		 |$LN3@KPD_Deinit|

; 385  :     }
; 386  : 
; 387  :     // Disable interrupt
; 388  :     if (pDevice->sysIntr != 0) {

  00974	e59d3008	 ldr         r3, [sp, #8]
  00978	e283305c	 add         r3, r3, #0x5C
  0097c	e5933000	 ldr         r3, [r3]
  00980	e3530000	 cmp         r3, #0
  00984	0a00000d	 beq         |$LN2@KPD_Deinit|

; 389  :         InterruptDisable(pDevice->sysIntr);

  00988	e59d3008	 ldr         r3, [sp, #8]
  0098c	e283305c	 add         r3, r3, #0x5C
  00990	e5930000	 ldr         r0, [r3]
  00994	eb000000	 bl          InterruptDisable

; 390  :         KernelIoControl(
; 391  :             IOCTL_HAL_RELEASE_SYSINTR, &pDevice->sysIntr,
; 392  :             sizeof(pDevice->sysIntr), NULL, 0, NULL
; 393  :         );

  00998	e3a03000	 mov         r3, #0
  0099c	e58d3004	 str         r3, [sp, #4]
  009a0	e3a03000	 mov         r3, #0
  009a4	e58d3000	 str         r3, [sp]
  009a8	e3a03000	 mov         r3, #0
  009ac	e3a02004	 mov         r2, #4
  009b0	e59d1008	 ldr         r1, [sp, #8]
  009b4	e281105c	 add         r1, r1, #0x5C
  009b8	e59f0090	 ldr         r0, [pc, #0x90]
  009bc	eb000000	 bl          KernelIoControl
  009c0		 |$LN2@KPD_Deinit|

; 394  :     }
; 395  : 
; 396  :     // Close interrupt handler
; 397  :     if (pDevice->hIntrEvent != NULL) CloseHandle(pDevice->hIntrEvent);

  009c0	e59d3008	 ldr         r3, [sp, #8]
  009c4	e2833060	 add         r3, r3, #0x60
  009c8	e5933000	 ldr         r3, [r3]
  009cc	e3530000	 cmp         r3, #0
  009d0	0a000003	 beq         |$LN1@KPD_Deinit|
  009d4	e59d3008	 ldr         r3, [sp, #8]
  009d8	e2833060	 add         r3, r3, #0x60
  009dc	e5930000	 ldr         r0, [r3]
  009e0	eb000000	 bl          CloseHandle
  009e4		 |$LN1@KPD_Deinit|

; 398  : 
; 399  :     // Delete critical section
; 400  :     DeleteCriticalSection(&pDevice->cs);

  009e4	e59d3008	 ldr         r3, [sp, #8]
  009e8	e2830038	 add         r0, r3, #0x38
  009ec	eb000000	 bl          DeleteCriticalSection

; 401  : 
; 402  :     // Free device structure
; 403  :     LocalFree(pDevice);

  009f0	e59d0008	 ldr         r0, [sp, #8]
  009f4	eb000000	 bl          LocalFree

; 404  : 
; 405  :     // Done
; 406  :     rc = TRUE;

  009f8	e3a03001	 mov         r3, #1
  009fc	e58d300c	 str         r3, [sp, #0xC]
  00a00		 |$cleanUp$42922|

; 407  : 
; 408  : cleanUp:
; 409  :     DEBUGMSG(ZONE_FUNCTION, (L"-KPD_Deinit(rc = %d)\r\n", rc));

  00a00	e59f3044	 ldr         r3, [pc, #0x44]
  00a04	e5933440	 ldr         r3, [r3, #0x440]
  00a08	e3130004	 tst         r3, #4
  00a0c	0a000005	 beq         |$LN16@KPD_Deinit|
  00a10	e59d100c	 ldr         r1, [sp, #0xC]
  00a14	e59f002c	 ldr         r0, [pc, #0x2C]
  00a18	eb000000	 bl          NKDbgPrintfW
  00a1c	e3a03001	 mov         r3, #1
  00a20	e58d3024	 str         r3, [sp, #0x24]
  00a24	ea000001	 b           |$LN17@KPD_Deinit|
  00a28		 |$LN16@KPD_Deinit|
  00a28	e3a03000	 mov         r3, #0
  00a2c	e58d3024	 str         r3, [sp, #0x24]
  00a30		 |$LN17@KPD_Deinit|

; 410  :     return rc;

  00a30	e59d300c	 ldr         r3, [sp, #0xC]
  00a34	e58d3018	 str         r3, [sp, #0x18]

; 411  : }

  00a38	e59d0018	 ldr         r0, [sp, #0x18]
  00a3c	e28dd028	 add         sp, sp, #0x28
  00a40	e89d6000	 ldmia       sp, {sp, lr}
  00a44	e12fff1e	 bx          lr
  00a48		 |$LN21@KPD_Deinit|
  00a48		 |$LN22@KPD_Deinit|
  00a48	00000000	 DCD         |??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00a4c		 |$LN23@KPD_Deinit|
  00a4c	00000000	 DCD         |dpCurSettings|
  00a50		 |$LN24@KPD_Deinit|
  00a50	010100d8	 DCD         0x10100d8
  00a54		 |$LN25@KPD_Deinit|
  00a54	00000000	 DCD         |??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  00a58		 |$LN26@KPD_Deinit|
  00a58	6b706444	 DCD         0x6b706444
  00a5c		 |$LN27@KPD_Deinit|
  00a5c	00000000	 DCD         |??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00a60		 |$M43380|

			 ENDP  ; |KPD_Deinit|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43395| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M43392|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M43393|

			 ENDP  ; |SetEvent|

	EXPORT	|KPD_Open|

  00010			 AREA	 |.pdata|, PDATA
|$T43403| DCD	|$LN5@KPD_Open|
	DCD	0x40000a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\keypad\keypad.c

  00a60			 AREA	 |.text|, CODE, ARM

  00a60		 |KPD_Open| PROC

; 420  : {

  00a60		 |$LN5@KPD_Open|
  00a60	e1a0c00d	 mov         r12, sp
  00a64	e92d0007	 stmdb       sp!, {r0 - r2}
  00a68	e92d5000	 stmdb       sp!, {r12, lr}
  00a6c	e24dd004	 sub         sp, sp, #4
  00a70		 |$M43400|

; 421  :     return context;

  00a70	e59d300c	 ldr         r3, [sp, #0xC]
  00a74	e58d3000	 str         r3, [sp]

; 422  : }

  00a78	e59d0000	 ldr         r0, [sp]
  00a7c	e28dd004	 add         sp, sp, #4
  00a80	e89d6000	 ldmia       sp, {sp, lr}
  00a84	e12fff1e	 bx          lr
  00a88		 |$M43401|

			 ENDP  ; |KPD_Open|

	EXPORT	|KPD_Close|

  00018			 AREA	 |.pdata|, PDATA
|$T43409| DCD	|$LN5@KPD_Close|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00a88			 AREA	 |.text|, CODE, ARM

  00a88		 |KPD_Close| PROC

; 431  : {

  00a88		 |$LN5@KPD_Close|
  00a88	e1a0c00d	 mov         r12, sp
  00a8c	e92d0001	 stmdb       sp!, {r0}
  00a90	e92d5000	 stmdb       sp!, {r12, lr}
  00a94	e24dd004	 sub         sp, sp, #4
  00a98		 |$M43406|

; 432  :     return TRUE;

  00a98	e3a03001	 mov         r3, #1
  00a9c	e58d3000	 str         r3, [sp]

; 433  : }

  00aa0	e59d0000	 ldr         r0, [sp]
  00aa4	e28dd004	 add         sp, sp, #4
  00aa8	e89d6000	 ldmia       sp, {sp, lr}
  00aac	e12fff1e	 bx          lr
  00ab0		 |$M43407|

			 ENDP  ; |KPD_Close|

	EXPORT	|??_C@_1BM@IHFPBAPO@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KPD_IOControl|

  00020			 AREA	 |.pdata|, PDATA
|$T43417| DCD	|$LN7@KPD_IOCont|
	DCD	0x40001704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IHFPBAPO@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00ab0			 AREA	 |.text|, CODE, ARM

  00ab0		 |KPD_IOControl| PROC

; 444  : ) {

  00ab0		 |$LN7@KPD_IOCont|
  00ab0	e1a0c00d	 mov         r12, sp
  00ab4	e92d000f	 stmdb       sp!, {r0 - r3}
  00ab8	e92d5000	 stmdb       sp!, {r12, lr}
  00abc	e24dd008	 sub         sp, sp, #8
  00ac0		 |$M43414|

; 445  :     DEBUGMSG(ZONE_INIT, (L"KPD_IOControl"));

  00ac0	e59f3040	 ldr         r3, [pc, #0x40]
  00ac4	e5933440	 ldr         r3, [r3, #0x440]
  00ac8	e3130008	 tst         r3, #8
  00acc	0a000004	 beq         |$LN3@KPD_IOCont|
  00ad0	e59f002c	 ldr         r0, [pc, #0x2C]
  00ad4	eb000000	 bl          NKDbgPrintfW
  00ad8	e3a03001	 mov         r3, #1
  00adc	e58d3004	 str         r3, [sp, #4]
  00ae0	ea000001	 b           |$LN4@KPD_IOCont|
  00ae4		 |$LN3@KPD_IOCont|
  00ae4	e3a03000	 mov         r3, #0
  00ae8	e58d3004	 str         r3, [sp, #4]
  00aec		 |$LN4@KPD_IOCont|

; 446  :     return FALSE;

  00aec	e3a03000	 mov         r3, #0
  00af0	e58d3000	 str         r3, [sp]

; 447  : }

  00af4	e59d0000	 ldr         r0, [sp]
  00af8	e28dd008	 add         sp, sp, #8
  00afc	e89d6000	 ldmia       sp, {sp, lr}
  00b00	e12fff1e	 bx          lr
  00b04		 |$LN8@KPD_IOCont|
  00b04		 |$LN9@KPD_IOCont|
  00b04	00000000	 DCD         |??_C@_1BM@IHFPBAPO@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@|
  00b08		 |$LN10@KPD_IOCont|
  00b08	00000000	 DCD         |dpCurSettings|
  00b0c		 |$M43415|

			 ENDP  ; |KPD_IOControl|

	EXPORT	|??_C@_1GI@CJMEHCNE@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@OEJPKNOP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@NOFDFHJD@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@FIDBIEFP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@OOGCKOCO@?$AAV?$AAK?$AA_?$AAT?$AAS?$AAT?$AAA?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@DJAIAEGH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@JANBOJMA@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA2?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NEDINNM@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@GAILFJIP@?$AAR?$AAo?$AAw?$AA?5?$AA4?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@LJPHPFMN@?$AAR?$AAo?$AAw?$AA?5?$AA3?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@FOLIBEJG@?$AAR?$AAo?$AAw?$AA?5?$AA2?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@KMBJDBDK@?$AAR?$AAo?$AAw?$AA?5?$AA1?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@OKPOGEDP@?$AAR?$AAo?$AAw?$AA?5?$AA0?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@CMLBFIDH@?$AAK?$AAP?$AAD?$AA?5?$AA?9?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|InterruptDone|
	IMPORT	|memcpy|
	IMPORT	|PowerPolicyNotify|
	IMPORT	|keybd_event|
	IMPORT	|GetTickCount|
	IMPORT	|g_keypadVK|
	IMPORT	|Sleep|
	IMPORT	|g_keypadRepeat|
	IMPORT	|g_keypadRemap|
	IMPORT	|memset|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00028			 AREA	 |.pdata|, PDATA
|$T43473| DCD	|$LN141@KPD_IntrTh|
	DCD	0xc0055104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@CJMEHCNE@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?0?$AA?5@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ","
	DCB	0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@OEJPKNOP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn?$AAe?$AAx@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "P", 0x0, "r"
	DCB	0x0, "e", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "n", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "u", 0x0, "n"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "p", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@NOFDFHJD@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "b"
	DCB	0x0, "e", 0x0, "c", 0x0, "a", 0x0, "u", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@FIDBIEFP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, " ", 0x0, "U", 0x0, "p", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@OOGCKOCO@?$AAV?$AAK?$AA_?$AAT?$AAS?$AAT?$AAA?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "V"
	DCB	0x0, "K", 0x0, "_", 0x0, "T", 0x0, "S", 0x0, "T", 0x0, "A"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@DJAIAEGH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, " ", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@JANBOJMA@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA2?$AA?$AN?$AA?6?$AA?$AA@| DCB "k"
	DCB	0x0, "e", 0x0, "y", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "T", 0x0, "R", 0x0, "U"
	DCB	0x0, "E", 0x0, " ", 0x0, "2", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "h", 0x0, "o", 0x0, "l"
	DCB	0x0, "d", 0x0, " ", 0x0, "v", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "v"
	DCB	0x0, "k", 0x0, "e", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NEDINNM@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "k"
	DCB	0x0, "e", 0x0, "y", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "T", 0x0, "R", 0x0, "U"
	DCB	0x0, "E", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@GAILFJIP@?$AAR?$AAo?$AAw?$AA?5?$AA4?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| DCB "R"
	DCB	0x0, "o", 0x0, "w", 0x0, " ", 0x0, "4", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "h", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "u", 0x0, "m"
	DCB	0x0, "n", 0x0, " ", 0x0, "#", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@LJPHPFMN@?$AAR?$AAo?$AAw?$AA?5?$AA3?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| DCB "R"
	DCB	0x0, "o", 0x0, "w", 0x0, " ", 0x0, "3", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "h", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "u", 0x0, "m"
	DCB	0x0, "n", 0x0, " ", 0x0, "#", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@FOLIBEJG@?$AAR?$AAo?$AAw?$AA?5?$AA2?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| DCB "R"
	DCB	0x0, "o", 0x0, "w", 0x0, " ", 0x0, "2", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "h", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "u", 0x0, "m"
	DCB	0x0, "n", 0x0, " ", 0x0, "#", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@KMBJDBDK@?$AAR?$AAo?$AAw?$AA?5?$AA1?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| DCB "R"
	DCB	0x0, "o", 0x0, "w", 0x0, " ", 0x0, "1", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "h", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "u", 0x0, "m"
	DCB	0x0, "n", 0x0, " ", 0x0, "#", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@OKPOGEDP@?$AAR?$AAo?$AAw?$AA?5?$AA0?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@| DCB "R"
	DCB	0x0, "o", 0x0, "w", 0x0, " ", 0x0, "0", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "w", 0x0, "h", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "l", 0x0, "u", 0x0, "m"
	DCB	0x0, "n", 0x0, " ", 0x0, "#", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, ".", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, " ", 0x0, "a", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "m", 0x0, "a", 0x0, "p"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@CMLBFIDH@?$AAK?$AAP?$AAD?$AA?5?$AA?9?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.xdata|, DATA
|$T43469| DCD	0xffffff8c
; Function compile flags: /Odtp

  00b0c			 AREA	 |.text|, CODE, ARM

  00b0c	00000000	 DCD         |__GSHandlerCheck|
  00b10	00000000	 DCD         |$T43469|

  00b14		 |KPD_IntrThread| PROC

; 456  : {

  00b14		 |$LN141@KPD_IntrTh|
  00b14	e1a0c00d	 mov         r12, sp
  00b18	e92d0001	 stmdb       sp!, {r0}
  00b1c	e92d5000	 stmdb       sp!, {r12, lr}
  00b20	e24ddf43	 sub         sp, sp, #0x43, 30
  00b24		 |$M43470|
  00b24	e59f34d8	 ldr         r3, [pc, #0x4D8]
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e58d30a4	 str         r3, [sp, #0xA4]

; 457  :     KPD_DEVICE *pDevice = (KPD_DEVICE*)pContext;

  00b30	e59d3114	 ldr         r3, [sp, #0x114]
  00b34	e58d3000	 str         r3, [sp]

; 458  :     DWORD timeout, time, ix;
; 459  :     DWORD change, mask;
; 460  :     UINT16 ir, ik;
; 461  :     USHORT data[KEYPAD_COLUMNS];
; 462  :     UINT16 ic=0;

  00b38	e3a03000	 mov         r3, #0
  00b3c	e1cd34b0	 strh        r3, [sp, #0x40]

; 463  :     DWORD vkState[VK_KEYS/DWORD_BITS], vkNewState[VK_KEYS/DWORD_BITS];
; 464  :     KEYPAD_REMAP_STATE *pRemapState = NULL;

  00b40	e3a03000	 mov         r3, #0
  00b44	e58d300c	 str         r3, [sp, #0xC]

; 465  :     KEYPAD_REPEAT_STATE *pRepeatState = NULL;

  00b48	e3a03000	 mov         r3, #0
  00b4c	e58d3018	 str         r3, [sp, #0x18]

; 466  :     BOOL keyDown;
; 467  :     UCHAR vk;
; 468  : 
; 469  :     DEBUGMSG(ZONE_IST, (L"KPD - Start IntrThread\r\n"));

  00b50	e59f348c	 ldr         r3, [pc, #0x48C]
  00b54	e5933440	 ldr         r3, [r3, #0x440]
  00b58	e3130020	 tst         r3, #0x20
  00b5c	0a000004	 beq         |$LN97@KPD_IntrTh|
  00b60	e59f0498	 ldr         r0, [pc, #0x498]
  00b64	eb000000	 bl          NKDbgPrintfW
  00b68	e3a03001	 mov         r3, #1
  00b6c	e58d30ac	 str         r3, [sp, #0xAC]
  00b70	ea000001	 b           |$LN98@KPD_IntrTh|
  00b74		 |$LN97@KPD_IntrTh|
  00b74	e3a03000	 mov         r3, #0
  00b78	e58d30ac	 str         r3, [sp, #0xAC]
  00b7c		 |$LN98@KPD_IntrTh|

; 470  : 
; 471  :     // Init data
; 472  :     memset(vkState, 0, sizeof(vkState));

  00b7c	e3a02020	 mov         r2, #0x20
  00b80	e3a01000	 mov         r1, #0
  00b84	e28d0048	 add         r0, sp, #0x48
  00b88	eb000000	 bl          memset

; 473  : 
; 474  :     // Initialize remap informations
; 475  :     if (g_keypadRemap.count > 0) {

  00b8c	e59f3468	 ldr         r3, [pc, #0x468]
  00b90	e1d330b0	 ldrh        r3, [r3]
  00b94	e3530000	 cmp         r3, #0
  00b98	da000017	 ble         |$LN94@KPD_IntrTh|

; 476  :         // Allocate state structure for remap
; 477  :         if ((pRemapState = LocalAlloc(
; 478  :             LPTR, g_keypadRemap.count * sizeof(KEYPAD_REMAP_STATE)
; 479  :         ))  == NULL) {

  00b9c	e59f3458	 ldr         r3, [pc, #0x458]
  00ba0	e1d320b0	 ldrh        r2, [r3]
  00ba4	e3a03010	 mov         r3, #0x10
  00ba8	e0010392	 mul         r1, r2, r3
  00bac	e3a00040	 mov         r0, #0x40
  00bb0	eb000000	 bl          LocalAlloc
  00bb4	e58d00b0	 str         r0, [sp, #0xB0]
  00bb8	e59d30b0	 ldr         r3, [sp, #0xB0]
  00bbc	e58d300c	 str         r3, [sp, #0xC]
  00bc0	e59d300c	 ldr         r3, [sp, #0xC]
  00bc4	e3530000	 cmp         r3, #0
  00bc8	1a00000b	 bne         |$LN93@KPD_IntrTh|

; 480  :             DEBUGMSG(ZONE_ERROR, (L" KPD_IntrThread: "
; 481  :                 L"Failed allocate memory for virtual key remap\r\n"
; 482  :             ));

  00bcc	e59f3410	 ldr         r3, [pc, #0x410]
  00bd0	e5933440	 ldr         r3, [r3, #0x440]
  00bd4	e3130001	 tst         r3, #1
  00bd8	0a000004	 beq         |$LN99@KPD_IntrTh|
  00bdc	e59f0414	 ldr         r0, [pc, #0x414]
  00be0	eb000000	 bl          NKDbgPrintfW
  00be4	e3a03001	 mov         r3, #1
  00be8	e58d30b4	 str         r3, [sp, #0xB4]
  00bec	ea000001	 b           |$LN100@KPD_IntrTh|
  00bf0		 |$LN99@KPD_IntrTh|
  00bf0	e3a03000	 mov         r3, #0
  00bf4	e58d30b4	 str         r3, [sp, #0xB4]
  00bf8		 |$LN100@KPD_IntrTh|

; 483  :             goto cleanUp;

  00bf8	ea0004f3	 b           |$cleanUp$43026|
  00bfc		 |$LN93@KPD_IntrTh|
  00bfc		 |$LN94@KPD_IntrTh|

; 484  :         }
; 485  :     }
; 486  : 
; 487  :     // Initialize repeat informations
; 488  :     if (g_keypadRepeat.count > 0) {

  00bfc	e59f33f0	 ldr         r3, [pc, #0x3F0]
  00c00	e1d330b0	 ldrh        r3, [r3]
  00c04	e3530000	 cmp         r3, #0
  00c08	da000017	 ble         |$LN92@KPD_IntrTh|

; 489  :         // Allocate state structure for remap
; 490  :         if ((pRepeatState = LocalAlloc(
; 491  :             LPTR, g_keypadRepeat.count * sizeof(KEYPAD_REPEAT_STATE)
; 492  :         ))  == NULL) {

  00c0c	e59f33e0	 ldr         r3, [pc, #0x3E0]
  00c10	e1d320b0	 ldrh        r2, [r3]
  00c14	e3a0300c	 mov         r3, #0xC
  00c18	e0010392	 mul         r1, r2, r3
  00c1c	e3a00040	 mov         r0, #0x40
  00c20	eb000000	 bl          LocalAlloc
  00c24	e58d00b8	 str         r0, [sp, #0xB8]
  00c28	e59d30b8	 ldr         r3, [sp, #0xB8]
  00c2c	e58d3018	 str         r3, [sp, #0x18]
  00c30	e59d3018	 ldr         r3, [sp, #0x18]
  00c34	e3530000	 cmp         r3, #0
  00c38	1a00000b	 bne         |$LN91@KPD_IntrTh|

; 493  :             DEBUGMSG(ZONE_ERROR, (L" KPD_IntrThread: "
; 494  :                 L"Failed allocate memory for virtual key auto repeat\r\n"
; 495  :             ));

  00c3c	e59f33a0	 ldr         r3, [pc, #0x3A0]
  00c40	e5933440	 ldr         r3, [r3, #0x440]
  00c44	e3130001	 tst         r3, #1
  00c48	0a000004	 beq         |$LN101@KPD_IntrTh|
  00c4c	e59f039c	 ldr         r0, [pc, #0x39C]
  00c50	eb000000	 bl          NKDbgPrintfW
  00c54	e3a03001	 mov         r3, #1
  00c58	e58d30bc	 str         r3, [sp, #0xBC]
  00c5c	ea000001	 b           |$LN102@KPD_IntrTh|
  00c60		 |$LN101@KPD_IntrTh|
  00c60	e3a03000	 mov         r3, #0
  00c64	e58d30bc	 str         r3, [sp, #0xBC]
  00c68		 |$LN102@KPD_IntrTh|

; 496  :             goto cleanUp;

  00c68	ea0004d7	 b           |$cleanUp$43026|
  00c6c		 |$LN91@KPD_IntrTh|
  00c6c		 |$LN92@KPD_IntrTh|

; 497  :         }
; 498  :     }
; 499  : 
; 500  :     // Set delay to sample period
; 501  :     timeout = INFINITE;

  00c6c	e3e03000	 mvn         r3, #0
  00c70	e58d3078	 str         r3, [sp, #0x78]
  00c74		 |$LN90@KPD_IntrTh|

; 502  : 
; 503  :     // Loop until we are not stopped...
; 504  :     while (!pDevice->intrThreadExit) {

  00c74	e59d3000	 ldr         r3, [sp]
  00c78	e2833068	 add         r3, r3, #0x68
  00c7c	e5933000	 ldr         r3, [r3]
  00c80	e3530000	 cmp         r3, #0
  00c84	1a0004d0	 bne         |$LN89@KPD_IntrTh|

; 505  : 
; 506  :         if (pDevice->intrThreadExit) break;

  00c88	e59d3000	 ldr         r3, [sp]
  00c8c	e2833068	 add         r3, r3, #0x68
  00c90	e5933000	 ldr         r3, [r3]
  00c94	e3530000	 cmp         r3, #0
  00c98	0a000000	 beq         |$LN88@KPD_IntrTh|
  00c9c	ea0004ca	 b           |$LN89@KPD_IntrTh|
  00ca0		 |$LN88@KPD_IntrTh|

; 507  : 
; 508  :         keyDown = FALSE;

  00ca0	e3a03000	 mov         r3, #0
  00ca4	e58d3044	 str         r3, [sp, #0x44]

; 509  :         // Wait for event
; 510  :         WaitForSingleObject(pDevice->hIntrEvent, timeout);

  00ca8	e59d1078	 ldr         r1, [sp, #0x78]
  00cac	e59d3000	 ldr         r3, [sp]
  00cb0	e2833060	 add         r3, r3, #0x60
  00cb4	e5930000	 ldr         r0, [r3]
  00cb8	eb000000	 bl          WaitForSingleObject

; 511  :         Sleep(5); //settle time

  00cbc	e3a00005	 mov         r0, #5
  00cc0	eb000000	 bl          Sleep

; 512  : 
; 513  :         memset(data, 0, sizeof(data));

  00cc4	e3a0200c	 mov         r2, #0xC
  00cc8	e3a01000	 mov         r1, #0
  00ccc	e28d006c	 add         r0, sp, #0x6C
  00cd0	eb000000	 bl          memset

; 514  :         for (ic=0; ic < KEYPAD_COLUMNS; ic++)

  00cd4	e3a03000	 mov         r3, #0
  00cd8	e1cd34b0	 strh        r3, [sp, #0x40]
  00cdc	ea000004	 b           |$LN87@KPD_IntrTh|
  00ce0		 |$LN86@KPD_IntrTh|
  00ce0	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00ce4	e2833001	 add         r3, r3, #1
  00ce8	e1a03803	 mov         r3, r3, lsl #16
  00cec	e1a03823	 mov         r3, r3, lsr #16
  00cf0	e1cd34b0	 strh        r3, [sp, #0x40]
  00cf4		 |$LN87@KPD_IntrTh|
  00cf4	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00cf8	e3530006	 cmp         r3, #6
  00cfc	aa00011d	 bge         |$LN85@KPD_IntrTh|

; 515  :         {
; 516  :             // Don't drive any column GPIO's
; 517  :             OUTREG32(&pDevice->pGPIO3Regs->ulGPIO_SETDATAOUT, 1<<26);    // column 0 = Drive GPIO90

  00d00	e59d3000	 ldr         r3, [sp]
  00d04	e2833054	 add         r3, r3, #0x54
  00d08	e5933000	 ldr         r3, [r3]
  00d0c	e2832094	 add         r2, r3, #0x94
  00d10	e3a03301	 mov         r3, #1, 6
  00d14	e5823000	 str         r3, [r2]

; 518  :             OUTREG32(&pDevice->pGPIO3Regs->ulGPIO_SETDATAOUT, 1<<27);    // column 1 = Drive GPIO91

  00d18	e59d3000	 ldr         r3, [sp]
  00d1c	e2833054	 add         r3, r3, #0x54
  00d20	e5933000	 ldr         r3, [r3]
  00d24	e2832094	 add         r2, r3, #0x94
  00d28	e3a03302	 mov         r3, #2, 6
  00d2c	e5823000	 str         r3, [r2]

; 519  :             OUTREG32(&pDevice->pGPIO1Regs->ulGPIO_SETDATAOUT, 1<<15);    // column 2 = Drive GPIO15

  00d30	e59d3000	 ldr         r3, [sp]
  00d34	e283304c	 add         r3, r3, #0x4C
  00d38	e5933000	 ldr         r3, [r3]
  00d3c	e2832094	 add         r2, r3, #0x94
  00d40	e3a03902	 mov         r3, #2, 18
  00d44	e5823000	 str         r3, [r2]

; 520  :             OUTREG32(&pDevice->pGPIO2Regs->ulGPIO_SETDATAOUT, 1<<4);     // column 3 = Drive GPIO36

  00d48	e59d3000	 ldr         r3, [sp]
  00d4c	e2833050	 add         r3, r3, #0x50
  00d50	e5933000	 ldr         r3, [r3]
  00d54	e2832094	 add         r2, r3, #0x94
  00d58	e3a03010	 mov         r3, #0x10
  00d5c	e5823000	 str         r3, [r2]

; 521  :             OUTREG32(&pDevice->pGPIO1Regs->ulGPIO_SETDATAOUT, 1<<12);    // column 4 = Drive GPIO12

  00d60	e59d3000	 ldr         r3, [sp]
  00d64	e283304c	 add         r3, r3, #0x4C
  00d68	e5933000	 ldr         r3, [r3]
  00d6c	e2832094	 add         r2, r3, #0x94
  00d70	e3a03a01	 mov         r3, #1, 20
  00d74	e5823000	 str         r3, [r2]

; 522  :             OUTREG32(&pDevice->pGPIO4Regs->ulGPIO_SETDATAOUT, 1<<1);     // column 5 = Drive GPIO97

  00d78	e59d3000	 ldr         r3, [sp]
  00d7c	e2833058	 add         r3, r3, #0x58
  00d80	e5933000	 ldr         r3, [r3]
  00d84	e2832094	 add         r2, r3, #0x94
  00d88	e3a03002	 mov         r3, #2
  00d8c	e5823000	 str         r3, [r2]

; 523  : 
; 524  :             // Ie, drive all the column GPIO's in turn
; 525  :             if (ic == 0)

  00d90	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00d94	e3530000	 cmp         r3, #0
  00d98	1a000006	 bne         |$LN84@KPD_IntrTh|

; 526  :                 OUTREG32(&pDevice->pGPIO3Regs->ulGPIO_CLEARDATAOUT, 1<<26);    // column 0 = Drive GPIO90

  00d9c	e59d3000	 ldr         r3, [sp]
  00da0	e2833054	 add         r3, r3, #0x54
  00da4	e5933000	 ldr         r3, [r3]
  00da8	e2832090	 add         r2, r3, #0x90
  00dac	e3a03301	 mov         r3, #1, 6
  00db0	e5823000	 str         r3, [r2]
  00db4	ea000030	 b           |$LN83@KPD_IntrTh|
  00db8		 |$LN84@KPD_IntrTh|

; 527  :             else if (ic == 1)

  00db8	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00dbc	e3530001	 cmp         r3, #1
  00dc0	1a000006	 bne         |$LN82@KPD_IntrTh|

; 528  :                 OUTREG32(&pDevice->pGPIO3Regs->ulGPIO_CLEARDATAOUT, 1<<27);    // column 1 = Drive GPIO91

  00dc4	e59d3000	 ldr         r3, [sp]
  00dc8	e2833054	 add         r3, r3, #0x54
  00dcc	e5933000	 ldr         r3, [r3]
  00dd0	e2832090	 add         r2, r3, #0x90
  00dd4	e3a03302	 mov         r3, #2, 6
  00dd8	e5823000	 str         r3, [r2]
  00ddc	ea000026	 b           |$LN81@KPD_IntrTh|
  00de0		 |$LN82@KPD_IntrTh|

; 529  :             else if (ic == 2)

  00de0	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00de4	e3530002	 cmp         r3, #2
  00de8	1a000006	 bne         |$LN80@KPD_IntrTh|

; 530  :                 OUTREG32(&pDevice->pGPIO1Regs->ulGPIO_CLEARDATAOUT, 1<<15);    // column 2 = Drive GPIO15

  00dec	e59d3000	 ldr         r3, [sp]
  00df0	e283304c	 add         r3, r3, #0x4C
  00df4	e5933000	 ldr         r3, [r3]
  00df8	e2832090	 add         r2, r3, #0x90
  00dfc	e3a03902	 mov         r3, #2, 18
  00e00	e5823000	 str         r3, [r2]
  00e04	ea00001c	 b           |$LN79@KPD_IntrTh|
  00e08		 |$LN80@KPD_IntrTh|

; 531  :             else if (ic == 3)

  00e08	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00e0c	e3530003	 cmp         r3, #3
  00e10	1a000006	 bne         |$LN78@KPD_IntrTh|

; 532  :                 OUTREG32(&pDevice->pGPIO2Regs->ulGPIO_CLEARDATAOUT, 1<<4);     // column 3 = Drive GPIO36

  00e14	e59d3000	 ldr         r3, [sp]
  00e18	e2833050	 add         r3, r3, #0x50
  00e1c	e5933000	 ldr         r3, [r3]
  00e20	e2832090	 add         r2, r3, #0x90
  00e24	e3a03010	 mov         r3, #0x10
  00e28	e5823000	 str         r3, [r2]
  00e2c	ea000012	 b           |$LN77@KPD_IntrTh|
  00e30		 |$LN78@KPD_IntrTh|

; 533  :             else if (ic == 4)

  00e30	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00e34	e3530004	 cmp         r3, #4
  00e38	1a000006	 bne         |$LN76@KPD_IntrTh|

; 534  :                 OUTREG32(&pDevice->pGPIO1Regs->ulGPIO_CLEARDATAOUT, 1<<12);    // column 4 = Drive GPIO12

  00e3c	e59d3000	 ldr         r3, [sp]
  00e40	e283304c	 add         r3, r3, #0x4C
  00e44	e5933000	 ldr         r3, [r3]
  00e48	e2832090	 add         r2, r3, #0x90
  00e4c	e3a03a01	 mov         r3, #1, 20
  00e50	e5823000	 str         r3, [r2]
  00e54	ea000008	 b           |$LN75@KPD_IntrTh|
  00e58		 |$LN76@KPD_IntrTh|

; 535  :             else if (ic == 5)

  00e58	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00e5c	e3530005	 cmp         r3, #5
  00e60	1a000005	 bne         |$LN74@KPD_IntrTh|

; 536  :                 OUTREG32(&pDevice->pGPIO4Regs->ulGPIO_CLEARDATAOUT, 1<<1);     // column 5 = Drive GPIO97

  00e64	e59d3000	 ldr         r3, [sp]
  00e68	e2833058	 add         r3, r3, #0x58
  00e6c	e5933000	 ldr         r3, [r3]
  00e70	e2832090	 add         r2, r3, #0x90
  00e74	e3a03002	 mov         r3, #2
  00e78	e5823000	 str         r3, [r2]
  00e7c		 |$LN74@KPD_IntrTh|
  00e7c		 |$LN75@KPD_IntrTh|
  00e7c		 |$LN77@KPD_IntrTh|
  00e7c		 |$LN79@KPD_IntrTh|
  00e7c		 |$LN81@KPD_IntrTh|
  00e7c		 |$LN83@KPD_IntrTh|

; 537  : 
; 538  :             // Get row status
; 539  :             if ((INREG32(&pDevice->pGPIO3Regs->ulGPIO_DATAIN) & (1<<24)) == 0) // row 0 GPIO 88

  00e7c	e59d3000	 ldr         r3, [sp]
  00e80	e2833054	 add         r3, r3, #0x54
  00e84	e5933000	 ldr         r3, [r3]
  00e88	e2833038	 add         r3, r3, #0x38
  00e8c	e5933000	 ldr         r3, [r3]
  00e90	e3130401	 tst         r3, #1, 8
  00e94	1a00001c	 bne         |$LN73@KPD_IntrTh|

; 540  :             {
; 541  :                 DEBUGMSG(ZONE_INFO, (L"Row 0 detected when column #%d driven. \r\n", ic));

  00e98	e59f3144	 ldr         r3, [pc, #0x144]
  00e9c	e5933440	 ldr         r3, [r3, #0x440]
  00ea0	e3130010	 tst         r3, #0x10
  00ea4	0a000005	 beq         |$LN103@KPD_IntrTh|
  00ea8	e1dd14b0	 ldrh        r1, [sp, #0x40]
  00eac	e59f0138	 ldr         r0, [pc, #0x138]
  00eb0	eb000000	 bl          NKDbgPrintfW
  00eb4	e3a03001	 mov         r3, #1
  00eb8	e58d30c0	 str         r3, [sp, #0xC0]
  00ebc	ea000001	 b           |$LN104@KPD_IntrTh|
  00ec0		 |$LN103@KPD_IntrTh|
  00ec0	e3a03000	 mov         r3, #0
  00ec4	e58d30c0	 str         r3, [sp, #0xC0]
  00ec8		 |$LN104@KPD_IntrTh|

; 542  :                 data[ic] |= 1;

  00ec8	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00ecc	e1a01003	 mov         r1, r3
  00ed0	e3a03002	 mov         r3, #2
  00ed4	e0020391	 mul         r2, r1, r3
  00ed8	e28d306c	 add         r3, sp, #0x6C
  00edc	e0833002	 add         r3, r3, r2
  00ee0	e1d330b0	 ldrh        r3, [r3]
  00ee4	e3830001	 orr         r0, r3, #1
  00ee8	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00eec	e1a01003	 mov         r1, r3
  00ef0	e3a03002	 mov         r3, #2
  00ef4	e0020391	 mul         r2, r1, r3
  00ef8	e28d306c	 add         r3, sp, #0x6C
  00efc	e0832002	 add         r2, r3, r2
  00f00	e1a03800	 mov         r3, r0, lsl #16
  00f04	e1a03823	 mov         r3, r3, lsr #16
  00f08	e1c230b0	 strh        r3, [r2]
  00f0c		 |$LN73@KPD_IntrTh|

; 543  :             }
; 544  :             if ((INREG32(&pDevice->pGPIO3Regs->ulGPIO_DATAIN) & (1<<25)) == 0) // row 1 GPIO 89

  00f0c	e59d3000	 ldr         r3, [sp]
  00f10	e2833054	 add         r3, r3, #0x54
  00f14	e5933000	 ldr         r3, [r3]
  00f18	e2833038	 add         r3, r3, #0x38
  00f1c	e5933000	 ldr         r3, [r3]
  00f20	e3130402	 tst         r3, #2, 8
  00f24	1a00001c	 bne         |$LN72@KPD_IntrTh|

; 545  :             {
; 546  :                 DEBUGMSG(ZONE_INFO, (L"Row 1 detected when column #%d driven.\r\n", ic));

  00f28	e59f30b4	 ldr         r3, [pc, #0xB4]
  00f2c	e5933440	 ldr         r3, [r3, #0x440]
  00f30	e3130010	 tst         r3, #0x10
  00f34	0a000005	 beq         |$LN105@KPD_IntrTh|
  00f38	e1dd14b0	 ldrh        r1, [sp, #0x40]
  00f3c	e59f00a4	 ldr         r0, [pc, #0xA4]
  00f40	eb000000	 bl          NKDbgPrintfW
  00f44	e3a03001	 mov         r3, #1
  00f48	e58d30c4	 str         r3, [sp, #0xC4]
  00f4c	ea000001	 b           |$LN106@KPD_IntrTh|
  00f50		 |$LN105@KPD_IntrTh|
  00f50	e3a03000	 mov         r3, #0
  00f54	e58d30c4	 str         r3, [sp, #0xC4]
  00f58		 |$LN106@KPD_IntrTh|

; 547  :                 data[ic] |= 1 << 1;

  00f58	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00f5c	e1a01003	 mov         r1, r3
  00f60	e3a03002	 mov         r3, #2
  00f64	e0020391	 mul         r2, r1, r3
  00f68	e28d306c	 add         r3, sp, #0x6C
  00f6c	e0833002	 add         r3, r3, r2
  00f70	e1d330b0	 ldrh        r3, [r3]
  00f74	e3830002	 orr         r0, r3, #2
  00f78	e1dd34b0	 ldrh        r3, [sp, #0x40]
  00f7c	e1a01003	 mov         r1, r3
  00f80	e3a03002	 mov         r3, #2
  00f84	e0020391	 mul         r2, r1, r3
  00f88	e28d306c	 add         r3, sp, #0x6C
  00f8c	e0832002	 add         r2, r3, r2
  00f90	e1a03800	 mov         r3, r0, lsl #16
  00f94	e1a03823	 mov         r3, r3, lsr #16
  00f98	e1c230b0	 strh        r3, [r2]
  00f9c		 |$LN72@KPD_IntrTh|

; 548  :             }
; 549  :             if ((INREG32(&pDevice->pGPIO4Regs->ulGPIO_DATAIN) & (1<<28)) == 0) // row 2 GPIO 124

  00f9c	e59d3000	 ldr         r3, [sp]
  00fa0	e2833058	 add         r3, r3, #0x58
  00fa4	e5933000	 ldr         r3, [r3]
  00fa8	e2833038	 add         r3, r3, #0x38
  00fac	e5933000	 ldr         r3, [r3]
  00fb0	e3130201	 tst         r3, #1, 4
  00fb4	1a000026	 bne         |$LN71@KPD_IntrTh|

; 550  :             {
; 551  :                 DEBUGMSG(ZONE_INFO, (L"Row 2 detected when column #%d driven.\r\n", ic));

  00fb8	e59f3024	 ldr         r3, [pc, #0x24]
  00fbc	e5933440	 ldr         r3, [r3, #0x440]
  00fc0	e3130010	 tst         r3, #0x10
  00fc4	0a00000f	 beq         |$LN107@KPD_IntrTh|
  00fc8	e1dd14b0	 ldrh        r1, [sp, #0x40]
  00fcc	e59f000c	 ldr         r0, [pc, #0xC]
  00fd0	eb000000	 bl          NKDbgPrintfW
  00fd4	e3a03001	 mov         r3, #1
  00fd8	e58d30c8	 str         r3, [sp, #0xC8]
  00fdc	ea00000b	 b           |$LN108@KPD_IntrTh|
  00fe0		 |$LN160@KPD_IntrTh|
  00fe0		 |$LN161@KPD_IntrTh|
  00fe0	00000000	 DCD         |??_C@_1FC@FOLIBEJG@?$AAR?$AAo?$AAw?$AA?5?$AA2?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@|
  00fe4		 |$LN162@KPD_IntrTh|
  00fe4	00000000	 DCD         |dpCurSettings|
  00fe8		 |$LN163@KPD_IntrTh|
  00fe8	00000000	 DCD         |??_C@_1FC@KMBJDBDK@?$AAR?$AAo?$AAw?$AA?5?$AA1?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@|
  00fec		 |$LN164@KPD_IntrTh|
  00fec	00000000	 DCD         |??_C@_1FE@OKPOGEDP@?$AAR?$AAo?$AAw?$AA?5?$AA0?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@|
  00ff0		 |$LN165@KPD_IntrTh|
  00ff0	00000000	 DCD         |??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00ff4		 |$LN166@KPD_IntrTh|
  00ff4	00000000	 DCD         |g_keypadRepeat|
  00ff8		 |$LN167@KPD_IntrTh|
  00ff8	00000000	 DCD         |??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00ffc		 |$LN168@KPD_IntrTh|
  00ffc	00000000	 DCD         |g_keypadRemap|
  01000		 |$LN169@KPD_IntrTh|
  01000	00000000	 DCD         |??_C@_1DC@CMLBFIDH@?$AAK?$AAP?$AAD?$AA?5?$AA?9?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01004		 |$LN170@KPD_IntrTh|
  01004	00000000	 DCD         |__security_cookie|
  01008		 |$LN107@KPD_IntrTh|
  01008	e3a03000	 mov         r3, #0
  0100c	e58d30c8	 str         r3, [sp, #0xC8]
  01010		 |$LN108@KPD_IntrTh|

; 552  :                 data[ic] |= 1 << 2;

  01010	e1dd34b0	 ldrh        r3, [sp, #0x40]
  01014	e1a01003	 mov         r1, r3
  01018	e3a03002	 mov         r3, #2
  0101c	e0020391	 mul         r2, r1, r3
  01020	e28d306c	 add         r3, sp, #0x6C
  01024	e0833002	 add         r3, r3, r2
  01028	e1d330b0	 ldrh        r3, [r3]
  0102c	e3830004	 orr         r0, r3, #4
  01030	e1dd34b0	 ldrh        r3, [sp, #0x40]
  01034	e1a01003	 mov         r1, r3
  01038	e3a03002	 mov         r3, #2
  0103c	e0020391	 mul         r2, r1, r3
  01040	e28d306c	 add         r3, sp, #0x6C
  01044	e0832002	 add         r2, r3, r2
  01048	e1a03800	 mov         r3, r0, lsl #16
  0104c	e1a03823	 mov         r3, r3, lsr #16
  01050	e1c230b0	 strh        r3, [r2]
  01054		 |$LN71@KPD_IntrTh|

; 553  :             }
; 554  :             if ((INREG32(&pDevice->pGPIO1Regs->ulGPIO_DATAIN) & (1<<11)) == 0) // row 3 GPIO 11

  01054	e59d3000	 ldr         r3, [sp]
  01058	e283304c	 add         r3, r3, #0x4C
  0105c	e5933000	 ldr         r3, [r3]
  01060	e2833038	 add         r3, r3, #0x38
  01064	e5933000	 ldr         r3, [r3]
  01068	e3130b02	 tst         r3, #2, 22
  0106c	1a00001c	 bne         |$LN70@KPD_IntrTh|

; 555  :             {
; 556  :                 DEBUGMSG(ZONE_INFO, (L"Row 3 detected when column #%d driven.\r\n", ic));

  01070	e59f3fa0	 ldr         r3, [pc, #0xFA0]
  01074	e5933440	 ldr         r3, [r3, #0x440]
  01078	e3130010	 tst         r3, #0x10
  0107c	0a000005	 beq         |$LN109@KPD_IntrTh|
  01080	e1dd14b0	 ldrh        r1, [sp, #0x40]
  01084	e59f0fc8	 ldr         r0, [pc, #0xFC8]
  01088	eb000000	 bl          NKDbgPrintfW
  0108c	e3a03001	 mov         r3, #1
  01090	e58d30cc	 str         r3, [sp, #0xCC]
  01094	ea000001	 b           |$LN110@KPD_IntrTh|
  01098		 |$LN109@KPD_IntrTh|
  01098	e3a03000	 mov         r3, #0
  0109c	e58d30cc	 str         r3, [sp, #0xCC]
  010a0		 |$LN110@KPD_IntrTh|

; 557  :                 data[ic] |= 1 << 3;

  010a0	e1dd34b0	 ldrh        r3, [sp, #0x40]
  010a4	e1a01003	 mov         r1, r3
  010a8	e3a03002	 mov         r3, #2
  010ac	e0020391	 mul         r2, r1, r3
  010b0	e28d306c	 add         r3, sp, #0x6C
  010b4	e0833002	 add         r3, r3, r2
  010b8	e1d330b0	 ldrh        r3, [r3]
  010bc	e3830008	 orr         r0, r3, #8
  010c0	e1dd34b0	 ldrh        r3, [sp, #0x40]
  010c4	e1a01003	 mov         r1, r3
  010c8	e3a03002	 mov         r3, #2
  010cc	e0020391	 mul         r2, r1, r3
  010d0	e28d306c	 add         r3, sp, #0x6C
  010d4	e0832002	 add         r2, r3, r2
  010d8	e1a03800	 mov         r3, r0, lsl #16
  010dc	e1a03823	 mov         r3, r3, lsr #16
  010e0	e1c230b0	 strh        r3, [r2]
  010e4		 |$LN70@KPD_IntrTh|

; 558  :             }
; 559  :             if ((INREG32(&pDevice->pGPIO1Regs->ulGPIO_DATAIN) & (1<<6)) == 0) // row 4 GPIO 6

  010e4	e59d3000	 ldr         r3, [sp]
  010e8	e283304c	 add         r3, r3, #0x4C
  010ec	e5933000	 ldr         r3, [r3]
  010f0	e2833038	 add         r3, r3, #0x38
  010f4	e5933000	 ldr         r3, [r3]
  010f8	e3130040	 tst         r3, #0x40
  010fc	1a00001c	 bne         |$LN69@KPD_IntrTh|

; 560  :             {
; 561  :                 DEBUGMSG(ZONE_INFO, (L"Row 4 detected when column #%d driven.\r\n", ic));

  01100	e59f3f10	 ldr         r3, [pc, #0xF10]
  01104	e5933440	 ldr         r3, [r3, #0x440]
  01108	e3130010	 tst         r3, #0x10
  0110c	0a000005	 beq         |$LN111@KPD_IntrTh|
  01110	e1dd14b0	 ldrh        r1, [sp, #0x40]
  01114	e59f0f34	 ldr         r0, [pc, #0xF34]
  01118	eb000000	 bl          NKDbgPrintfW
  0111c	e3a03001	 mov         r3, #1
  01120	e58d30d0	 str         r3, [sp, #0xD0]
  01124	ea000001	 b           |$LN112@KPD_IntrTh|
  01128		 |$LN111@KPD_IntrTh|
  01128	e3a03000	 mov         r3, #0
  0112c	e58d30d0	 str         r3, [sp, #0xD0]
  01130		 |$LN112@KPD_IntrTh|

; 562  :                 data[ic] |= 1 << 4;

  01130	e1dd34b0	 ldrh        r3, [sp, #0x40]
  01134	e1a01003	 mov         r1, r3
  01138	e3a03002	 mov         r3, #2
  0113c	e0020391	 mul         r2, r1, r3
  01140	e28d306c	 add         r3, sp, #0x6C
  01144	e0833002	 add         r3, r3, r2
  01148	e1d330b0	 ldrh        r3, [r3]
  0114c	e3830010	 orr         r0, r3, #0x10
  01150	e1dd34b0	 ldrh        r3, [sp, #0x40]
  01154	e1a01003	 mov         r1, r3
  01158	e3a03002	 mov         r3, #2
  0115c	e0020391	 mul         r2, r1, r3
  01160	e28d306c	 add         r3, sp, #0x6C
  01164	e0832002	 add         r2, r3, r2
  01168	e1a03800	 mov         r3, r0, lsl #16
  0116c	e1a03823	 mov         r3, r3, lsr #16
  01170	e1c230b0	 strh        r3, [r2]
  01174		 |$LN69@KPD_IntrTh|

; 563  :             }
; 564  :         } // for loop

  01174	eafffed9	 b           |$LN86@KPD_IntrTh|
  01178		 |$LN85@KPD_IntrTh|

; 565  : 
; 566  : //      data[0] = ~data[0];
; 567  : //      data[1] = ~data[1];
; 568  : //      data[2] = ~data[2];
; 569  : //      data[3] = ~data[3];
; 570  : //      data[4] = ~data[4];
; 571  : //      data[5] = ~data[5];
; 572  :         //--------------------------------------------------------------
; 573  :         // Convert physical state to virtual keys state
; 574  :         //--------------------------------------------------------------
; 575  :         // Get new state for virtual key table
; 576  :         memset(vkNewState, 0, sizeof(vkNewState));

  01178	e3a02020	 mov         r2, #0x20
  0117c	e3a01000	 mov         r1, #0
  01180	e28d0020	 add         r0, sp, #0x20
  01184	eb000000	 bl          memset

; 577  :         keyDown = FALSE;

  01188	e3a03000	 mov         r3, #0
  0118c	e58d3044	 str         r3, [sp, #0x44]

; 578  :         for (ic = 0, ik = 0; ic < KEYPAD_COLUMNS; ic++) {

  01190	e3a03000	 mov         r3, #0
  01194	e1cd34b0	 strh        r3, [sp, #0x40]
  01198	e3a03000	 mov         r3, #0
  0119c	e1cd36b8	 strh        r3, [sp, #0x68]
  011a0	ea000004	 b           |$LN68@KPD_IntrTh|
  011a4		 |$LN67@KPD_IntrTh|
  011a4	e1dd34b0	 ldrh        r3, [sp, #0x40]
  011a8	e2833001	 add         r3, r3, #1
  011ac	e1a03803	 mov         r3, r3, lsl #16
  011b0	e1a03823	 mov         r3, r3, lsr #16
  011b4	e1cd34b0	 strh        r3, [sp, #0x40]
  011b8		 |$LN68@KPD_IntrTh|
  011b8	e1dd34b0	 ldrh        r3, [sp, #0x40]
  011bc	e3530006	 cmp         r3, #6
  011c0	aa000066	 bge         |$LN66@KPD_IntrTh|

; 579  :             data[ic] = ~data[ic];

  011c4	e1dd34b0	 ldrh        r3, [sp, #0x40]
  011c8	e1a01003	 mov         r1, r3
  011cc	e3a03002	 mov         r3, #2
  011d0	e0020391	 mul         r2, r1, r3
  011d4	e28d306c	 add         r3, sp, #0x6C
  011d8	e0833002	 add         r3, r3, r2
  011dc	e1d330b0	 ldrh        r3, [r3]
  011e0	e1e00003	 mvn         r0, r3
  011e4	e1dd34b0	 ldrh        r3, [sp, #0x40]
  011e8	e1a01003	 mov         r1, r3
  011ec	e3a03002	 mov         r3, #2
  011f0	e0020391	 mul         r2, r1, r3
  011f4	e28d306c	 add         r3, sp, #0x6C
  011f8	e0832002	 add         r2, r3, r2
  011fc	e1a03800	 mov         r3, r0, lsl #16
  01200	e1a03823	 mov         r3, r3, lsr #16
  01204	e1c230b0	 strh        r3, [r2]

; 580  :             // Find pressed virtual keys
; 581  :             if ((data[ic] & KEYPAD_ROWS_MASK) == KEYPAD_ROWS_MASK) {

  01208	e1dd34b0	 ldrh        r3, [sp, #0x40]
  0120c	e1a01003	 mov         r1, r3
  01210	e3a03002	 mov         r3, #2
  01214	e0020391	 mul         r2, r1, r3
  01218	e28d306c	 add         r3, sp, #0x6C
  0121c	e0833002	 add         r3, r3, r2
  01220	e1d330b0	 ldrh        r3, [r3]
  01224	e203301f	 and         r3, r3, #0x1F
  01228	e353001f	 cmp         r3, #0x1F
  0122c	1a000005	 bne         |$LN65@KPD_IntrTh|

; 582  :                 ik += KEYPAD_ROWS;

  01230	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01234	e2833005	 add         r3, r3, #5
  01238	e1a03803	 mov         r3, r3, lsl #16
  0123c	e1a03823	 mov         r3, r3, lsr #16
  01240	e1cd36b8	 strh        r3, [sp, #0x68]
  01244	ea000044	 b           |$LN64@KPD_IntrTh|
  01248		 |$LN65@KPD_IntrTh|

; 583  :             } else for (ir = 0; ir < KEYPAD_ROWS; ir++, ik++) {

  01248	e3a03000	 mov         r3, #0
  0124c	e1cd30b6	 strh        r3, [sp, #6]
  01250	ea000009	 b           |$LN63@KPD_IntrTh|
  01254		 |$LN62@KPD_IntrTh|
  01254	e1dd30b6	 ldrh        r3, [sp, #6]
  01258	e2833001	 add         r3, r3, #1
  0125c	e1a03803	 mov         r3, r3, lsl #16
  01260	e1a03823	 mov         r3, r3, lsr #16
  01264	e1cd30b6	 strh        r3, [sp, #6]
  01268	e1dd36b8	 ldrh        r3, [sp, #0x68]
  0126c	e2833001	 add         r3, r3, #1
  01270	e1a03803	 mov         r3, r3, lsl #16
  01274	e1a03823	 mov         r3, r3, lsr #16
  01278	e1cd36b8	 strh        r3, [sp, #0x68]
  0127c		 |$LN63@KPD_IntrTh|
  0127c	e1dd30b6	 ldrh        r3, [sp, #6]
  01280	e3530005	 cmp         r3, #5
  01284	aa000034	 bge         |$LN61@KPD_IntrTh|

; 584  :                 if ((data[ic] & (1 << ir)) == 0) {

  01288	e1dd34b0	 ldrh        r3, [sp, #0x40]
  0128c	e1a01003	 mov         r1, r3
  01290	e3a03002	 mov         r3, #2
  01294	e0020391	 mul         r2, r1, r3
  01298	e28d306c	 add         r3, sp, #0x6C
  0129c	e0833002	 add         r3, r3, r2
  012a0	e1d330b0	 ldrh        r3, [r3]
  012a4	e1a01003	 mov         r1, r3
  012a8	e1dd30b6	 ldrh        r3, [sp, #6]
  012ac	e1a02003	 mov         r2, r3
  012b0	e3a03001	 mov         r3, #1
  012b4	e1a03213	 mov         r3, r3, lsl r2
  012b8	e1110003	 tst         r1, r3
  012bc	1a000025	 bne         |$LN60@KPD_IntrTh|

; 585  :                     vk = g_keypadVK[ik];

  012c0	e1dd36b8	 ldrh        r3, [sp, #0x68]
  012c4	e1a02003	 mov         r2, r3
  012c8	e59f3d7c	 ldr         r3, [pc, #0xD7C]
  012cc	e0833002	 add         r3, r3, r2
  012d0	e5d33000	 ldrb        r3, [r3]
  012d4	e5cd3004	 strb        r3, [sp, #4]

; 586  :                     vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  012d8	e5dd3004	 ldrb        r3, [sp, #4]
  012dc	e1a012c3	 mov         r1, r3, asr #5
  012e0	e3a03004	 mov         r3, #4
  012e4	e0020391	 mul         r2, r1, r3
  012e8	e28d3020	 add         r3, sp, #0x20
  012ec	e0831002	 add         r1, r3, r2
  012f0	e5dd3004	 ldrb        r3, [sp, #4]
  012f4	e203201f	 and         r2, r3, #0x1F
  012f8	e3a03001	 mov         r3, #1
  012fc	e1a02213	 mov         r2, r3, lsl r2
  01300	e5913000	 ldr         r3, [r1]
  01304	e1830002	 orr         r0, r3, r2
  01308	e5dd3004	 ldrb        r3, [sp, #4]
  0130c	e1a012c3	 mov         r1, r3, asr #5
  01310	e3a03004	 mov         r3, #4
  01314	e0020391	 mul         r2, r1, r3
  01318	e28d3020	 add         r3, sp, #0x20
  0131c	e0833002	 add         r3, r3, r2
  01320	e5830000	 str         r0, [r3]

; 587  :                     keyDown = TRUE;

  01324	e3a03001	 mov         r3, #1
  01328	e58d3044	 str         r3, [sp, #0x44]

; 588  :                     DEBUGMSG(ZONE_INFO, (L"keyDown = TRUE \r\n"));

  0132c	e59f3ce4	 ldr         r3, [pc, #0xCE4]
  01330	e5933440	 ldr         r3, [r3, #0x440]
  01334	e3130010	 tst         r3, #0x10
  01338	0a000004	 beq         |$LN113@KPD_IntrTh|
  0133c	e59f0d04	 ldr         r0, [pc, #0xD04]
  01340	eb000000	 bl          NKDbgPrintfW
  01344	e3a03001	 mov         r3, #1
  01348	e58d30d4	 str         r3, [sp, #0xD4]
  0134c	ea000001	 b           |$LN114@KPD_IntrTh|
  01350		 |$LN113@KPD_IntrTh|
  01350	e3a03000	 mov         r3, #0
  01354	e58d30d4	 str         r3, [sp, #0xD4]
  01358		 |$LN114@KPD_IntrTh|
  01358		 |$LN60@KPD_IntrTh|

; 589  :                 }
; 590  :             }

  01358	eaffffbd	 b           |$LN62@KPD_IntrTh|
  0135c		 |$LN61@KPD_IntrTh|
  0135c		 |$LN64@KPD_IntrTh|

; 591  :         }

  0135c	eaffff90	 b           |$LN67@KPD_IntrTh|
  01360		 |$LN66@KPD_IntrTh|

; 592  : 
; 593  :         //--------------------------------------------------------------
; 594  :         // Remap multi virtual keys to final virtual key
; 595  :         //--------------------------------------------------------------
; 596  :         time = GetTickCount();

  01360	eb000000	 bl          GetTickCount
  01364	e58d00d8	 str         r0, [sp, #0xD8]
  01368	e59d30d8	 ldr         r3, [sp, #0xD8]
  0136c	e58d301c	 str         r3, [sp, #0x1C]

; 597  :         for (ix = 0; ix < g_keypadRemap.count; ix++) {

  01370	e3a03000	 mov         r3, #0
  01374	e58d3008	 str         r3, [sp, #8]
  01378	ea000002	 b           |$LN59@KPD_IntrTh|
  0137c		 |$LN58@KPD_IntrTh|
  0137c	e59d3008	 ldr         r3, [sp, #8]
  01380	e2833001	 add         r3, r3, #1
  01384	e58d3008	 str         r3, [sp, #8]
  01388		 |$LN59@KPD_IntrTh|
  01388	e59f3cb4	 ldr         r3, [pc, #0xCB4]
  0138c	e1d320b0	 ldrh        r2, [r3]
  01390	e59d3008	 ldr         r3, [sp, #8]
  01394	e1530002	 cmp         r3, r2
  01398	2a00017a	 bcs         |$LN57@KPD_IntrTh|

; 598  :             const KEYPAD_REMAP_ITEM *pItem = &g_keypadRemap.pItem[ix];

  0139c	e59d1008	 ldr         r1, [sp, #8]
  013a0	e3a03008	 mov         r3, #8
  013a4	e0020391	 mul         r2, r1, r3
  013a8	e59f3c94	 ldr         r3, [pc, #0xC94]
  013ac	e5933004	 ldr         r3, [r3, #4]
  013b0	e0833002	 add         r3, r3, r2
  013b4	e58d3080	 str         r3, [sp, #0x80]

; 599  :             KEYPAD_REMAP_STATE *pState = &pRemapState[ix];

  013b8	e59d1008	 ldr         r1, [sp, #8]
  013bc	e3a03010	 mov         r3, #0x10
  013c0	e0020391	 mul         r2, r1, r3
  013c4	e59d300c	 ldr         r3, [sp, #0xC]
  013c8	e0833002	 add         r3, r3, r2
  013cc	e58d3084	 str         r3, [sp, #0x84]

; 600  :             DWORD state = 0;

  013d0	e3a03000	 mov         r3, #0
  013d4	e58d3088	 str         r3, [sp, #0x88]

; 601  :             USHORT down = 0;

  013d8	e3a03000	 mov         r3, #0
  013dc	e1cd37bc	 strh        r3, [sp, #0x7C]

; 602  : 
; 603  :             // Count number of keys down & save down/up state
; 604  :             for (ik = 0; ik < pItem->keys; ik++) {

  013e0	e3a03000	 mov         r3, #0
  013e4	e1cd36b8	 strh        r3, [sp, #0x68]
  013e8	ea000004	 b           |$LN56@KPD_IntrTh|
  013ec		 |$LN55@KPD_IntrTh|
  013ec	e1dd36b8	 ldrh        r3, [sp, #0x68]
  013f0	e2833001	 add         r3, r3, #1
  013f4	e1a03803	 mov         r3, r3, lsl #16
  013f8	e1a03823	 mov         r3, r3, lsr #16
  013fc	e1cd36b8	 strh        r3, [sp, #0x68]
  01400		 |$LN56@KPD_IntrTh|
  01400	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01404	e1a02003	 mov         r2, r3
  01408	e59d3080	 ldr         r3, [sp, #0x80]
  0140c	e2833001	 add         r3, r3, #1
  01410	e5d33000	 ldrb        r3, [r3]
  01414	e1520003	 cmp         r2, r3
  01418	aa000021	 bge         |$LN54@KPD_IntrTh|

; 605  :                 vk = pItem->pVKeys[ik];

  0141c	e59d3080	 ldr         r3, [sp, #0x80]
  01420	e2831004	 add         r1, r3, #4
  01424	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01428	e1a02003	 mov         r2, r3
  0142c	e5913000	 ldr         r3, [r1]
  01430	e0833002	 add         r3, r3, r2
  01434	e5d33000	 ldrb        r3, [r3]
  01438	e5cd3004	 strb        r3, [sp, #4]

; 606  :                 if ((vkNewState[vk >> 5] & (1 << (vk & 0x1F))) != 0) {

  0143c	e5dd3004	 ldrb        r3, [sp, #4]
  01440	e1a012c3	 mov         r1, r3, asr #5
  01444	e3a03004	 mov         r3, #4
  01448	e0020391	 mul         r2, r1, r3
  0144c	e28d3020	 add         r3, sp, #0x20
  01450	e0831002	 add         r1, r3, r2
  01454	e5dd3004	 ldrb        r3, [sp, #4]
  01458	e203201f	 and         r2, r3, #0x1F
  0145c	e3a03001	 mov         r3, #1
  01460	e1a02213	 mov         r2, r3, lsl r2
  01464	e5913000	 ldr         r3, [r1]
  01468	e1130002	 tst         r3, r2
  0146c	0a00000b	 beq         |$LN53@KPD_IntrTh|

; 607  :                     state |= 1 << ik;

  01470	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01474	e1a02003	 mov         r2, r3
  01478	e3a03001	 mov         r3, #1
  0147c	e1a02213	 mov         r2, r3, lsl r2
  01480	e59d3088	 ldr         r3, [sp, #0x88]
  01484	e1833002	 orr         r3, r3, r2
  01488	e58d3088	 str         r3, [sp, #0x88]

; 608  :                     down++;

  0148c	e1dd37bc	 ldrh        r3, [sp, #0x7C]
  01490	e2833001	 add         r3, r3, #1
  01494	e1a03803	 mov         r3, r3, lsl #16
  01498	e1a03823	 mov         r3, r3, lsr #16
  0149c	e1cd37bc	 strh        r3, [sp, #0x7C]
  014a0		 |$LN53@KPD_IntrTh|

; 609  :                 }
; 610  :             }

  014a0	eaffffd1	 b           |$LN55@KPD_IntrTh|
  014a4		 |$LN54@KPD_IntrTh|

; 611  :             // Depending on number of keys down
; 612  :             if (down >= pItem->keys && pItem->keys > 1) {

  014a4	e1dd37bc	 ldrh        r3, [sp, #0x7C]
  014a8	e1a02003	 mov         r2, r3
  014ac	e59d3080	 ldr         r3, [sp, #0x80]
  014b0	e2833001	 add         r3, r3, #1
  014b4	e5d33000	 ldrb        r3, [r3]
  014b8	e1520003	 cmp         r2, r3
  014bc	ba00005a	 blt         |$LN52@KPD_IntrTh|
  014c0	e59d3080	 ldr         r3, [sp, #0x80]
  014c4	e2833001	 add         r3, r3, #1
  014c8	e5d33000	 ldrb        r3, [r3]
  014cc	e3530001	 cmp         r3, #1
  014d0	da000055	 ble         |$LN52@KPD_IntrTh|

; 613  :                 // Clear all mapping keys
; 614  :                 for (ik = 0; ik < pItem->keys; ik++) {

  014d4	e3a03000	 mov         r3, #0
  014d8	e1cd36b8	 strh        r3, [sp, #0x68]
  014dc	ea000004	 b           |$LN51@KPD_IntrTh|
  014e0		 |$LN50@KPD_IntrTh|
  014e0	e1dd36b8	 ldrh        r3, [sp, #0x68]
  014e4	e2833001	 add         r3, r3, #1
  014e8	e1a03803	 mov         r3, r3, lsl #16
  014ec	e1a03823	 mov         r3, r3, lsr #16
  014f0	e1cd36b8	 strh        r3, [sp, #0x68]
  014f4		 |$LN51@KPD_IntrTh|
  014f4	e1dd36b8	 ldrh        r3, [sp, #0x68]
  014f8	e1a02003	 mov         r2, r3
  014fc	e59d3080	 ldr         r3, [sp, #0x80]
  01500	e2833001	 add         r3, r3, #1
  01504	e5d33000	 ldrb        r3, [r3]
  01508	e1520003	 cmp         r2, r3
  0150c	aa00001c	 bge         |$LN49@KPD_IntrTh|

; 615  :                     vk = pItem->pVKeys[ik];

  01510	e59d3080	 ldr         r3, [sp, #0x80]
  01514	e2831004	 add         r1, r3, #4
  01518	e1dd36b8	 ldrh        r3, [sp, #0x68]
  0151c	e1a02003	 mov         r2, r3
  01520	e5913000	 ldr         r3, [r1]
  01524	e0833002	 add         r3, r3, r2
  01528	e5d33000	 ldrb        r3, [r3]
  0152c	e5cd3004	 strb        r3, [sp, #4]

; 616  :                     vkNewState[vk >> 5] &= ~(1 << (vk & 0x1F));

  01530	e5dd3004	 ldrb        r3, [sp, #4]
  01534	e1a012c3	 mov         r1, r3, asr #5
  01538	e3a03004	 mov         r3, #4
  0153c	e0020391	 mul         r2, r1, r3
  01540	e28d3020	 add         r3, sp, #0x20
  01544	e0831002	 add         r1, r3, r2
  01548	e5dd3004	 ldrb        r3, [sp, #4]
  0154c	e203201f	 and         r2, r3, #0x1F
  01550	e3a03001	 mov         r3, #1
  01554	e1a03213	 mov         r3, r3, lsl r2
  01558	e1e02003	 mvn         r2, r3
  0155c	e5913000	 ldr         r3, [r1]
  01560	e0030002	 and         r0, r3, r2
  01564	e5dd3004	 ldrb        r3, [sp, #4]
  01568	e1a012c3	 mov         r1, r3, asr #5
  0156c	e3a03004	 mov         r3, #4
  01570	e0020391	 mul         r2, r1, r3
  01574	e28d3020	 add         r3, sp, #0x20
  01578	e0833002	 add         r3, r3, r2
  0157c	e5830000	 str         r0, [r3]

; 617  :                 }

  01580	eaffffd6	 b           |$LN50@KPD_IntrTh|
  01584		 |$LN49@KPD_IntrTh|

; 618  :                 // All keys are down set final key
; 619  :                 vk = pItem->vkey;

  01584	e59d3080	 ldr         r3, [sp, #0x80]
  01588	e5d33000	 ldrb        r3, [r3]
  0158c	e5cd3004	 strb        r3, [sp, #4]

; 620  :                 vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  01590	e5dd3004	 ldrb        r3, [sp, #4]
  01594	e1a012c3	 mov         r1, r3, asr #5
  01598	e3a03004	 mov         r3, #4
  0159c	e0020391	 mul         r2, r1, r3
  015a0	e28d3020	 add         r3, sp, #0x20
  015a4	e0831002	 add         r1, r3, r2
  015a8	e5dd3004	 ldrb        r3, [sp, #4]
  015ac	e203201f	 and         r2, r3, #0x1F
  015b0	e3a03001	 mov         r3, #1
  015b4	e1a02213	 mov         r2, r3, lsl r2
  015b8	e5913000	 ldr         r3, [r1]
  015bc	e1830002	 orr         r0, r3, r2
  015c0	e5dd3004	 ldrb        r3, [sp, #4]
  015c4	e1a012c3	 mov         r1, r3, asr #5
  015c8	e3a03004	 mov         r3, #4
  015cc	e0020391	 mul         r2, r1, r3
  015d0	e28d3020	 add         r3, sp, #0x20
  015d4	e0833002	 add         r3, r3, r2
  015d8	e5830000	 str         r0, [r3]

; 621  :                 DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 622  :                     L"Mapped vkey: 0x%x\r\n", vk
; 623  :                 ));

  015dc	e59f3a34	 ldr         r3, [pc, #0xA34]
  015e0	e5933440	 ldr         r3, [r3, #0x440]
  015e4	e3130020	 tst         r3, #0x20
  015e8	0a000005	 beq         |$LN115@KPD_IntrTh|
  015ec	e5dd1004	 ldrb        r1, [sp, #4]
  015f0	e59f0a48	 ldr         r0, [pc, #0xA48]
  015f4	eb000000	 bl          NKDbgPrintfW
  015f8	e3a03001	 mov         r3, #1
  015fc	e58d30dc	 str         r3, [sp, #0xDC]
  01600	ea000001	 b           |$LN116@KPD_IntrTh|
  01604		 |$LN115@KPD_IntrTh|
  01604	e3a03000	 mov         r3, #0
  01608	e58d30dc	 str         r3, [sp, #0xDC]
  0160c		 |$LN116@KPD_IntrTh|

; 624  : 
; 625  :                 // Clear remap pending flag
; 626  :                 pState->pending = FALSE;

  0160c	e59d2084	 ldr         r2, [sp, #0x84]
  01610	e3a03000	 mov         r3, #0
  01614	e5823000	 str         r3, [r2]

; 627  :                 // Set remap processing flag
; 628  :                 pState->remapped = TRUE;

  01618	e59d3084	 ldr         r3, [sp, #0x84]
  0161c	e2832004	 add         r2, r3, #4
  01620	e3a03001	 mov         r3, #1
  01624	e5823000	 str         r3, [r2]
  01628	ea0000d1	 b           |$LN48@KPD_IntrTh|
  0162c		 |$LN52@KPD_IntrTh|

; 629  :             } else if (down > 0) {

  0162c	e1dd37bc	 ldrh        r3, [sp, #0x7C]
  01630	e3530000	 cmp         r3, #0
  01634	da000082	 ble         |$LN47@KPD_IntrTh|

; 630  :                 // If already remapping or remapping is not pending
; 631  :                 // or pending time expired
; 632  :                 if (pState->remapped || !pState->pending ||
; 633  :                     (INT32)(time - pState->time) < 0 ) {

  01638	e59d3084	 ldr         r3, [sp, #0x84]
  0163c	e2833004	 add         r3, r3, #4
  01640	e5933000	 ldr         r3, [r3]
  01644	e3530000	 cmp         r3, #0
  01648	1a000009	 bne         |$LN45@KPD_IntrTh|
  0164c	e59d3084	 ldr         r3, [sp, #0x84]
  01650	e5933000	 ldr         r3, [r3]
  01654	e3530000	 cmp         r3, #0
  01658	0a000005	 beq         |$LN45@KPD_IntrTh|
  0165c	e59d3084	 ldr         r3, [sp, #0x84]
  01660	e2833008	 add         r3, r3, #8
  01664	e59d201c	 ldr         r2, [sp, #0x1C]
  01668	e5933000	 ldr         r3, [r3]
  0166c	e0523003	 subs        r3, r2, r3
  01670	5a000040	 bpl         |$LN46@KPD_IntrTh|
  01674		 |$LN45@KPD_IntrTh|

; 634  :                     // If we are not pending and not already remapping, start
; 635  :                     if (!pState->pending && !pState->remapped) {

  01674	e59d3084	 ldr         r3, [sp, #0x84]
  01678	e5933000	 ldr         r3, [r3]
  0167c	e3530000	 cmp         r3, #0
  01680	1a00000f	 bne         |$LN44@KPD_IntrTh|
  01684	e59d3084	 ldr         r3, [sp, #0x84]
  01688	e2833004	 add         r3, r3, #4
  0168c	e5933000	 ldr         r3, [r3]
  01690	e3530000	 cmp         r3, #0
  01694	1a00000a	 bne         |$LN44@KPD_IntrTh|

; 636  :                         pState->pending = TRUE;

  01698	e59d2084	 ldr         r2, [sp, #0x84]
  0169c	e3a03001	 mov         r3, #1
  016a0	e5823000	 str         r3, [r2]

; 637  :                         pState->time = time + pItem->delay;

  016a4	e59d3080	 ldr         r3, [sp, #0x80]
  016a8	e2833002	 add         r3, r3, #2
  016ac	e1d320b0	 ldrh        r2, [r3]
  016b0	e59d301c	 ldr         r3, [sp, #0x1C]
  016b4	e0832002	 add         r2, r3, r2
  016b8	e59d3084	 ldr         r3, [sp, #0x84]
  016bc	e2833008	 add         r3, r3, #8
  016c0	e5832000	 str         r2, [r3]
  016c4		 |$LN44@KPD_IntrTh|

; 638  :                     }
; 639  :                     // Clear all mapping keys
; 640  :                     for (ik = 0; ik < pItem->keys; ik++) {

  016c4	e3a03000	 mov         r3, #0
  016c8	e1cd36b8	 strh        r3, [sp, #0x68]
  016cc	ea000004	 b           |$LN43@KPD_IntrTh|
  016d0		 |$LN42@KPD_IntrTh|
  016d0	e1dd36b8	 ldrh        r3, [sp, #0x68]
  016d4	e2833001	 add         r3, r3, #1
  016d8	e1a03803	 mov         r3, r3, lsl #16
  016dc	e1a03823	 mov         r3, r3, lsr #16
  016e0	e1cd36b8	 strh        r3, [sp, #0x68]
  016e4		 |$LN43@KPD_IntrTh|
  016e4	e1dd36b8	 ldrh        r3, [sp, #0x68]
  016e8	e1a02003	 mov         r2, r3
  016ec	e59d3080	 ldr         r3, [sp, #0x80]
  016f0	e2833001	 add         r3, r3, #1
  016f4	e5d33000	 ldrb        r3, [r3]
  016f8	e1520003	 cmp         r2, r3
  016fc	aa00001c	 bge         |$LN41@KPD_IntrTh|

; 641  :                         vk = pItem->pVKeys[ik];

  01700	e59d3080	 ldr         r3, [sp, #0x80]
  01704	e2831004	 add         r1, r3, #4
  01708	e1dd36b8	 ldrh        r3, [sp, #0x68]
  0170c	e1a02003	 mov         r2, r3
  01710	e5913000	 ldr         r3, [r1]
  01714	e0833002	 add         r3, r3, r2
  01718	e5d33000	 ldrb        r3, [r3]
  0171c	e5cd3004	 strb        r3, [sp, #4]

; 642  :                         vkNewState[vk >> 5] &= ~(1 << (vk & 0x1F));

  01720	e5dd3004	 ldrb        r3, [sp, #4]
  01724	e1a012c3	 mov         r1, r3, asr #5
  01728	e3a03004	 mov         r3, #4
  0172c	e0020391	 mul         r2, r1, r3
  01730	e28d3020	 add         r3, sp, #0x20
  01734	e0831002	 add         r1, r3, r2
  01738	e5dd3004	 ldrb        r3, [sp, #4]
  0173c	e203201f	 and         r2, r3, #0x1F
  01740	e3a03001	 mov         r3, #1
  01744	e1a03213	 mov         r3, r3, lsl r2
  01748	e1e02003	 mvn         r2, r3
  0174c	e5913000	 ldr         r3, [r1]
  01750	e0030002	 and         r0, r3, r2
  01754	e5dd3004	 ldrb        r3, [sp, #4]
  01758	e1a012c3	 mov         r1, r3, asr #5
  0175c	e3a03004	 mov         r3, #4
  01760	e0020391	 mul         r2, r1, r3
  01764	e28d3020	 add         r3, sp, #0x20
  01768	e0833002	 add         r3, r3, r2
  0176c	e5830000	 str         r0, [r3]

; 643  :                     }

  01770	eaffffd6	 b           |$LN42@KPD_IntrTh|
  01774		 |$LN41@KPD_IntrTh|

; 644  :                 } else if (

  01774	ea000031	 b           |$LN40@KPD_IntrTh|
  01778		 |$LN46@KPD_IntrTh|

; 645  :                     pItem->keys == 1 && (INT32)(time - pState->time) >= 0
; 646  :                 ) {

  01778	e59d3080	 ldr         r3, [sp, #0x80]
  0177c	e2833001	 add         r3, r3, #1
  01780	e5d33000	 ldrb        r3, [r3]
  01784	e3530001	 cmp         r3, #1
  01788	1a00002c	 bne         |$LN39@KPD_IntrTh|
  0178c	e59d3084	 ldr         r3, [sp, #0x84]
  01790	e2833008	 add         r3, r3, #8
  01794	e59d201c	 ldr         r2, [sp, #0x1C]
  01798	e5933000	 ldr         r3, [r3]
  0179c	e0523003	 subs        r3, r2, r3
  017a0	4a000026	 bmi         |$LN39@KPD_IntrTh|

; 647  :                     // This is press and hold key
; 648  :                    DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 649  :                         L"Mapped press and hold vkey: 0x%x\r\n", vk
; 650  :                     ));

  017a4	e59f386c	 ldr         r3, [pc, #0x86C]
  017a8	e5933440	 ldr         r3, [r3, #0x440]
  017ac	e3130020	 tst         r3, #0x20
  017b0	0a000005	 beq         |$LN117@KPD_IntrTh|
  017b4	e5dd1004	 ldrb        r1, [sp, #4]
  017b8	e59f087c	 ldr         r0, [pc, #0x87C]
  017bc	eb000000	 bl          NKDbgPrintfW
  017c0	e3a03001	 mov         r3, #1
  017c4	e58d30e0	 str         r3, [sp, #0xE0]
  017c8	ea000001	 b           |$LN118@KPD_IntrTh|
  017cc		 |$LN117@KPD_IntrTh|
  017cc	e3a03000	 mov         r3, #0
  017d0	e58d30e0	 str         r3, [sp, #0xE0]
  017d4		 |$LN118@KPD_IntrTh|

; 651  :                     vk = pItem->vkey;

  017d4	e59d3080	 ldr         r3, [sp, #0x80]
  017d8	e5d33000	 ldrb        r3, [r3]
  017dc	e5cd3004	 strb        r3, [sp, #4]

; 652  :                     vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  017e0	e5dd3004	 ldrb        r3, [sp, #4]
  017e4	e1a012c3	 mov         r1, r3, asr #5
  017e8	e3a03004	 mov         r3, #4
  017ec	e0020391	 mul         r2, r1, r3
  017f0	e28d3020	 add         r3, sp, #0x20
  017f4	e0831002	 add         r1, r3, r2
  017f8	e5dd3004	 ldrb        r3, [sp, #4]
  017fc	e203201f	 and         r2, r3, #0x1F
  01800	e3a03001	 mov         r3, #1
  01804	e1a02213	 mov         r2, r3, lsl r2
  01808	e5913000	 ldr         r3, [r1]
  0180c	e1830002	 orr         r0, r3, r2
  01810	e5dd3004	 ldrb        r3, [sp, #4]
  01814	e1a012c3	 mov         r1, r3, asr #5
  01818	e3a03004	 mov         r3, #4
  0181c	e0020391	 mul         r2, r1, r3
  01820	e28d3020	 add         r3, sp, #0x20
  01824	e0833002	 add         r3, r3, r2
  01828	e5830000	 str         r0, [r3]

; 653  :                     keyDown = TRUE;

  0182c	e3a03001	 mov         r3, #1
  01830	e58d3044	 str         r3, [sp, #0x44]

; 654  :                     pState->pending = FALSE;

  01834	e59d2084	 ldr         r2, [sp, #0x84]
  01838	e3a03000	 mov         r3, #0
  0183c	e5823000	 str         r3, [r2]
  01840		 |$LN39@KPD_IntrTh|
  01840		 |$LN40@KPD_IntrTh|

; 655  :                 }
; 656  :             } else {

  01840	ea00004b	 b           |$LN38@KPD_IntrTh|
  01844		 |$LN47@KPD_IntrTh|

; 657  :                 // All keys are up, if remapping was pending set keys
; 658  :                 if (pState->pending) {

  01844	e59d3084	 ldr         r3, [sp, #0x84]
  01848	e5933000	 ldr         r3, [r3]
  0184c	e3530000	 cmp         r3, #0
  01850	0a000043	 beq         |$LN37@KPD_IntrTh|

; 659  :                     for (ik = 0; ik < pItem->keys; ik++) {

  01854	e3a03000	 mov         r3, #0
  01858	e1cd36b8	 strh        r3, [sp, #0x68]
  0185c	ea000004	 b           |$LN36@KPD_IntrTh|
  01860		 |$LN35@KPD_IntrTh|
  01860	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01864	e2833001	 add         r3, r3, #1
  01868	e1a03803	 mov         r3, r3, lsl #16
  0186c	e1a03823	 mov         r3, r3, lsr #16
  01870	e1cd36b8	 strh        r3, [sp, #0x68]
  01874		 |$LN36@KPD_IntrTh|
  01874	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01878	e1a02003	 mov         r2, r3
  0187c	e59d3080	 ldr         r3, [sp, #0x80]
  01880	e2833001	 add         r3, r3, #1
  01884	e5d33000	 ldrb        r3, [r3]
  01888	e1520003	 cmp         r2, r3
  0188c	aa000031	 bge         |$LN34@KPD_IntrTh|

; 660  :                         if ((pState->state & (1 << ik)) != 0) {

  01890	e59d3084	 ldr         r3, [sp, #0x84]
  01894	e283100c	 add         r1, r3, #0xC
  01898	e1dd36b8	 ldrh        r3, [sp, #0x68]
  0189c	e1a02003	 mov         r2, r3
  018a0	e3a03001	 mov         r3, #1
  018a4	e1a02213	 mov         r2, r3, lsl r2
  018a8	e5913000	 ldr         r3, [r1]
  018ac	e1130002	 tst         r3, r2
  018b0	0a000027	 beq         |$LN33@KPD_IntrTh|

; 661  :                             vk = pItem->pVKeys[ik];

  018b4	e59d3080	 ldr         r3, [sp, #0x80]
  018b8	e2831004	 add         r1, r3, #4
  018bc	e1dd36b8	 ldrh        r3, [sp, #0x68]
  018c0	e1a02003	 mov         r2, r3
  018c4	e5913000	 ldr         r3, [r1]
  018c8	e0833002	 add         r3, r3, r2
  018cc	e5d33000	 ldrb        r3, [r3]
  018d0	e5cd3004	 strb        r3, [sp, #4]

; 662  :                             vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  018d4	e5dd3004	 ldrb        r3, [sp, #4]
  018d8	e1a012c3	 mov         r1, r3, asr #5
  018dc	e3a03004	 mov         r3, #4
  018e0	e0020391	 mul         r2, r1, r3
  018e4	e28d3020	 add         r3, sp, #0x20
  018e8	e0831002	 add         r1, r3, r2
  018ec	e5dd3004	 ldrb        r3, [sp, #4]
  018f0	e203201f	 and         r2, r3, #0x1F
  018f4	e3a03001	 mov         r3, #1
  018f8	e1a02213	 mov         r2, r3, lsl r2
  018fc	e5913000	 ldr         r3, [r1]
  01900	e1830002	 orr         r0, r3, r2
  01904	e5dd3004	 ldrb        r3, [sp, #4]
  01908	e1a012c3	 mov         r1, r3, asr #5
  0190c	e3a03004	 mov         r3, #4
  01910	e0020391	 mul         r2, r1, r3
  01914	e28d3020	 add         r3, sp, #0x20
  01918	e0833002	 add         r3, r3, r2
  0191c	e5830000	 str         r0, [r3]

; 663  :                             DEBUGMSG(ZONE_INFO, (L"keyDown = TRUE 2\r\n"));

  01920	e59f36f0	 ldr         r3, [pc, #0x6F0]
  01924	e5933440	 ldr         r3, [r3, #0x440]
  01928	e3130010	 tst         r3, #0x10
  0192c	0a000004	 beq         |$LN119@KPD_IntrTh|
  01930	e59f0700	 ldr         r0, [pc, #0x700]
  01934	eb000000	 bl          NKDbgPrintfW
  01938	e3a03001	 mov         r3, #1
  0193c	e58d30e4	 str         r3, [sp, #0xE4]
  01940	ea000001	 b           |$LN120@KPD_IntrTh|
  01944		 |$LN119@KPD_IntrTh|
  01944	e3a03000	 mov         r3, #0
  01948	e58d30e4	 str         r3, [sp, #0xE4]
  0194c		 |$LN120@KPD_IntrTh|

; 664  :                             keyDown = TRUE;

  0194c	e3a03001	 mov         r3, #1
  01950	e58d3044	 str         r3, [sp, #0x44]
  01954		 |$LN33@KPD_IntrTh|

; 665  :                         }
; 666  :                     }

  01954	eaffffc1	 b           |$LN35@KPD_IntrTh|
  01958		 |$LN34@KPD_IntrTh|

; 667  :                     pState->pending = FALSE;

  01958	e59d2084	 ldr         r2, [sp, #0x84]
  0195c	e3a03000	 mov         r3, #0
  01960	e5823000	 str         r3, [r2]
  01964		 |$LN37@KPD_IntrTh|

; 668  :                 }
; 669  :                 pState->remapped = FALSE;

  01964	e59d3084	 ldr         r3, [sp, #0x84]
  01968	e2832004	 add         r2, r3, #4
  0196c	e3a03000	 mov         r3, #0
  01970	e5823000	 str         r3, [r2]
  01974		 |$LN38@KPD_IntrTh|
  01974		 |$LN48@KPD_IntrTh|

; 670  :             }
; 671  :             // Save key state
; 672  :             pState->state = state;

  01974	e59d3084	 ldr         r3, [sp, #0x84]
  01978	e283200c	 add         r2, r3, #0xC
  0197c	e59d3088	 ldr         r3, [sp, #0x88]
  01980	e5823000	 str         r3, [r2]

; 673  :         }

  01984	eafffe7c	 b           |$LN58@KPD_IntrTh|
  01988		 |$LN57@KPD_IntrTh|

; 674  : 
; 675  :         //--------------------------------------------------------------
; 676  :         // Find pressed/released keys
; 677  :         //--------------------------------------------------------------
; 678  :         for (ic = 0, vk = 0; ic < VK_KEYS/DWORD_BITS; ic++) {

  01988	e3a03000	 mov         r3, #0
  0198c	e1cd34b0	 strh        r3, [sp, #0x40]
  01990	e3a03000	 mov         r3, #0
  01994	e5cd3004	 strb        r3, [sp, #4]
  01998	ea000004	 b           |$LN32@KPD_IntrTh|
  0199c		 |$LN31@KPD_IntrTh|
  0199c	e1dd34b0	 ldrh        r3, [sp, #0x40]
  019a0	e2833001	 add         r3, r3, #1
  019a4	e1a03803	 mov         r3, r3, lsl #16
  019a8	e1a03823	 mov         r3, r3, lsr #16
  019ac	e1cd34b0	 strh        r3, [sp, #0x40]
  019b0		 |$LN32@KPD_IntrTh|
  019b0	e1dd34b0	 ldrh        r3, [sp, #0x40]
  019b4	e3530008	 cmp         r3, #8
  019b8	aa00006f	 bge         |$LN30@KPD_IntrTh|

; 679  :             change = vkState[ic] ^ vkNewState[ic];

  019bc	e1dd34b0	 ldrh        r3, [sp, #0x40]
  019c0	e1a01003	 mov         r1, r3
  019c4	e3a03004	 mov         r3, #4
  019c8	e0020391	 mul         r2, r1, r3
  019cc	e28d3048	 add         r3, sp, #0x48
  019d0	e0830002	 add         r0, r3, r2
  019d4	e1dd34b0	 ldrh        r3, [sp, #0x40]
  019d8	e1a01003	 mov         r1, r3
  019dc	e3a03004	 mov         r3, #4
  019e0	e0020391	 mul         r2, r1, r3
  019e4	e28d3020	 add         r3, sp, #0x20
  019e8	e0833002	 add         r3, r3, r2
  019ec	e5902000	 ldr         r2, [r0]
  019f0	e5933000	 ldr         r3, [r3]
  019f4	e0223003	 eor         r3, r2, r3
  019f8	e58d3010	 str         r3, [sp, #0x10]

; 680  :             if (change == 0) {

  019fc	e59d3010	 ldr         r3, [sp, #0x10]
  01a00	e3530000	 cmp         r3, #0
  01a04	1a000004	 bne         |$LN29@KPD_IntrTh|

; 681  :                 vk += DWORD_BITS;

  01a08	e5dd3004	 ldrb        r3, [sp, #4]
  01a0c	e2833020	 add         r3, r3, #0x20
  01a10	e20330ff	 and         r3, r3, #0xFF
  01a14	e5cd3004	 strb        r3, [sp, #4]
  01a18	ea000056	 b           |$LN28@KPD_IntrTh|
  01a1c		 |$LN29@KPD_IntrTh|

; 682  :             } else for (mask = 1; mask != 0; mask <<= 1, vk++) {

  01a1c	e3a03001	 mov         r3, #1
  01a20	e58d3014	 str         r3, [sp, #0x14]
  01a24	ea000006	 b           |$LN27@KPD_IntrTh|
  01a28		 |$LN26@KPD_IntrTh|
  01a28	e59d3014	 ldr         r3, [sp, #0x14]
  01a2c	e1a03083	 mov         r3, r3, lsl #1
  01a30	e58d3014	 str         r3, [sp, #0x14]
  01a34	e5dd3004	 ldrb        r3, [sp, #4]
  01a38	e2833001	 add         r3, r3, #1
  01a3c	e20330ff	 and         r3, r3, #0xFF
  01a40	e5cd3004	 strb        r3, [sp, #4]
  01a44		 |$LN27@KPD_IntrTh|
  01a44	e59d3014	 ldr         r3, [sp, #0x14]
  01a48	e3530000	 cmp         r3, #0
  01a4c	0a000049	 beq         |$LN25@KPD_IntrTh|

; 683  :                 // Check for change
; 684  :                 if ((change & mask) != 0) {

  01a50	e59d2010	 ldr         r2, [sp, #0x10]
  01a54	e59d3014	 ldr         r3, [sp, #0x14]
  01a58	e1120003	 tst         r2, r3
  01a5c	0a000044	 beq         |$LN24@KPD_IntrTh|

; 685  :                     if ((vkNewState[ic] & mask) != 0)

  01a60	e1dd34b0	 ldrh        r3, [sp, #0x40]
  01a64	e1a01003	 mov         r1, r3
  01a68	e3a03004	 mov         r3, #4
  01a6c	e0020391	 mul         r2, r1, r3
  01a70	e28d3020	 add         r3, sp, #0x20
  01a74	e0833002	 add         r3, r3, r2
  01a78	e5932000	 ldr         r2, [r3]
  01a7c	e59d3014	 ldr         r3, [sp, #0x14]
  01a80	e1120003	 tst         r2, r3
  01a84	0a000029	 beq         |$LN23@KPD_IntrTh|

; 686  :                     {
; 687  :                         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: Key Down: 0x%x\r\n", vk ));

  01a88	e59f3588	 ldr         r3, [pc, #0x588]
  01a8c	e5933440	 ldr         r3, [r3, #0x440]
  01a90	e3130020	 tst         r3, #0x20
  01a94	0a000005	 beq         |$LN121@KPD_IntrTh|
  01a98	e5dd1004	 ldrb        r1, [sp, #4]
  01a9c	e59f0590	 ldr         r0, [pc, #0x590]
  01aa0	eb000000	 bl          NKDbgPrintfW
  01aa4	e3a03001	 mov         r3, #1
  01aa8	e58d30e8	 str         r3, [sp, #0xE8]
  01aac	ea000001	 b           |$LN122@KPD_IntrTh|
  01ab0		 |$LN121@KPD_IntrTh|
  01ab0	e3a03000	 mov         r3, #0
  01ab4	e58d30e8	 str         r3, [sp, #0xE8]
  01ab8		 |$LN122@KPD_IntrTh|

; 688  :                         keybd_event(vk, 0, 0, 0);

  01ab8	e3a03000	 mov         r3, #0
  01abc	e3a02000	 mov         r2, #0
  01ac0	e3a01000	 mov         r1, #0
  01ac4	e5dd0004	 ldrb        r0, [sp, #4]
  01ac8	eb000000	 bl          keybd_event

; 689  : 
; 690  :                         //Notify for power manager events
; 691  :                         if(vk == VK_TPOWER)

  01acc	e5dd3004	 ldrb        r3, [sp, #4]
  01ad0	e3530081	 cmp         r3, #0x81
  01ad4	1a000003	 bne         |$LN22@KPD_IntrTh|

; 692  :                         {
; 693  :                             PowerPolicyNotify(PPN_POWERBUTTONPRESSED, 0);

  01ad8	e3a01000	 mov         r1, #0
  01adc	e3a00004	 mov         r0, #4
  01ae0	eb000000	 bl          PowerPolicyNotify

; 694  :                         }
; 695  :                         else

  01ae4	ea000002	 b           |$LN21@KPD_IntrTh|
  01ae8		 |$LN22@KPD_IntrTh|

; 696  :                         {
; 697  :                             //Application button pressed
; 698  :                             //PM uses this to indicate user activity and reset timers
; 699  :                             PowerPolicyNotify(PPN_APPBUTTONPRESSED, 0);

  01ae8	e3a01000	 mov         r1, #0
  01aec	e3a00006	 mov         r0, #6
  01af0	eb000000	 bl          PowerPolicyNotify
  01af4		 |$LN21@KPD_IntrTh|

; 700  :                         }
; 701  : 
; 702  :                         if(vk == VK_TSTAR)

  01af4	e5dd3004	 ldrb        r3, [sp, #4]
  01af8	e3530077	 cmp         r3, #0x77
  01afc	1a00000a	 bne         |$LN20@KPD_IntrTh|

; 703  :                         {
; 704  :                             DEBUGMSG(ZONE_IST, (L"VK_TSTAR\r\n"));

  01b00	e59f3510	 ldr         r3, [pc, #0x510]
  01b04	e5933440	 ldr         r3, [r3, #0x440]
  01b08	e3130020	 tst         r3, #0x20
  01b0c	0a000004	 beq         |$LN123@KPD_IntrTh|
  01b10	e59f0518	 ldr         r0, [pc, #0x518]
  01b14	eb000000	 bl          NKDbgPrintfW
  01b18	e3a03001	 mov         r3, #1
  01b1c	e58d30ec	 str         r3, [sp, #0xEC]
  01b20	ea000001	 b           |$LN124@KPD_IntrTh|
  01b24		 |$LN123@KPD_IntrTh|
  01b24	e3a03000	 mov         r3, #0
  01b28	e58d30ec	 str         r3, [sp, #0xEC]
  01b2c		 |$LN124@KPD_IntrTh|
  01b2c		 |$LN20@KPD_IntrTh|

; 705  :                         }
; 706  :                     }
; 707  :                     else

  01b2c	ea000010	 b           |$LN19@KPD_IntrTh|
  01b30		 |$LN23@KPD_IntrTh|

; 708  :                     {
; 709  :                         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: Key Up: 0x%x\r\n", vk ));

  01b30	e59f34e0	 ldr         r3, [pc, #0x4E0]
  01b34	e5933440	 ldr         r3, [r3, #0x440]
  01b38	e3130020	 tst         r3, #0x20
  01b3c	0a000005	 beq         |$LN125@KPD_IntrTh|
  01b40	e5dd1004	 ldrb        r1, [sp, #4]
  01b44	e59f04e0	 ldr         r0, [pc, #0x4E0]
  01b48	eb000000	 bl          NKDbgPrintfW
  01b4c	e3a03001	 mov         r3, #1
  01b50	e58d30f0	 str         r3, [sp, #0xF0]
  01b54	ea000001	 b           |$LN126@KPD_IntrTh|
  01b58		 |$LN125@KPD_IntrTh|
  01b58	e3a03000	 mov         r3, #0
  01b5c	e58d30f0	 str         r3, [sp, #0xF0]
  01b60		 |$LN126@KPD_IntrTh|

; 710  :                         keybd_event(vk, 0, KEYEVENTF_KEYUP, 0);

  01b60	e3a03000	 mov         r3, #0
  01b64	e3a02002	 mov         r2, #2
  01b68	e3a01000	 mov         r1, #0
  01b6c	e5dd0004	 ldrb        r0, [sp, #4]
  01b70	eb000000	 bl          keybd_event
  01b74		 |$LN19@KPD_IntrTh|
  01b74		 |$LN24@KPD_IntrTh|

; 711  :                     }
; 712  :                 }
; 713  :             }

  01b74	eaffffab	 b           |$LN26@KPD_IntrTh|
  01b78		 |$LN25@KPD_IntrTh|
  01b78		 |$LN28@KPD_IntrTh|

; 714  :         }

  01b78	eaffff87	 b           |$LN31@KPD_IntrTh|
  01b7c		 |$LN30@KPD_IntrTh|

; 715  : 
; 716  :         //--------------------------------------------------------------
; 717  :         //  Check for auto-repeat keys
; 718  :         //--------------------------------------------------------------
; 719  :         for (ix = 0; ix < g_keypadRepeat.count; ix++) {

  01b7c	e3a03000	 mov         r3, #0
  01b80	e58d3008	 str         r3, [sp, #8]
  01b84	ea000002	 b           |$LN18@KPD_IntrTh|
  01b88		 |$LN17@KPD_IntrTh|
  01b88	e59d3008	 ldr         r3, [sp, #8]
  01b8c	e2833001	 add         r3, r3, #1
  01b90	e58d3008	 str         r3, [sp, #8]
  01b94		 |$LN18@KPD_IntrTh|
  01b94	e59f348c	 ldr         r3, [pc, #0x48C]
  01b98	e1d320b0	 ldrh        r2, [r3]
  01b9c	e59d3008	 ldr         r3, [sp, #8]
  01ba0	e1530002	 cmp         r3, r2
  01ba4	2a0000b8	 bcs         |$LN16@KPD_IntrTh|

; 720  :             const KEYPAD_REPEAT_ITEM *pItem = &g_keypadRepeat.pItem[ix];

  01ba8	e59d1008	 ldr         r1, [sp, #8]
  01bac	e3a03010	 mov         r3, #0x10
  01bb0	e0020391	 mul         r2, r1, r3
  01bb4	e59f346c	 ldr         r3, [pc, #0x46C]
  01bb8	e5933004	 ldr         r3, [r3, #4]
  01bbc	e0833002	 add         r3, r3, r2
  01bc0	e58d3090	 str         r3, [sp, #0x90]

; 721  :             const KEYPAD_REPEAT_BLOCK *pBlock = pItem->pBlock;

  01bc4	e59d3090	 ldr         r3, [sp, #0x90]
  01bc8	e283300c	 add         r3, r3, #0xC
  01bcc	e5933000	 ldr         r3, [r3]
  01bd0	e58d309c	 str         r3, [sp, #0x9C]

; 722  :             KEYPAD_REPEAT_STATE *pState = &pRepeatState[ix];

  01bd4	e59d1008	 ldr         r1, [sp, #8]
  01bd8	e3a0300c	 mov         r3, #0xC
  01bdc	e0020391	 mul         r2, r1, r3
  01be0	e59d3018	 ldr         r3, [sp, #0x18]
  01be4	e0833002	 add         r3, r3, r2
  01be8	e58d3098	 str         r3, [sp, #0x98]

; 723  :             DWORD delay;
; 724  :             BOOL blockRepeat = FALSE;

  01bec	e3a03000	 mov         r3, #0
  01bf0	e58d3094	 str         r3, [sp, #0x94]

; 725  :             UCHAR vkBlock;
; 726  : 
; 727  :             vk = pItem->vkey;

  01bf4	e59d3090	 ldr         r3, [sp, #0x90]
  01bf8	e5d33000	 ldrb        r3, [r3]
  01bfc	e5cd3004	 strb        r3, [sp, #4]

; 728  :             if ((vkNewState[vk >> 5] & (1 << (vk & 0x1F))) != 0) {

  01c00	e5dd3004	 ldrb        r3, [sp, #4]
  01c04	e1a012c3	 mov         r1, r3, asr #5
  01c08	e3a03004	 mov         r3, #4
  01c0c	e0020391	 mul         r2, r1, r3
  01c10	e28d3020	 add         r3, sp, #0x20
  01c14	e0831002	 add         r1, r3, r2
  01c18	e5dd3004	 ldrb        r3, [sp, #4]
  01c1c	e203201f	 and         r2, r3, #0x1F
  01c20	e3a03001	 mov         r3, #1
  01c24	e1a02213	 mov         r2, r3, lsl r2
  01c28	e5913000	 ldr         r3, [r1]
  01c2c	e1130002	 tst         r3, r2
  01c30	0a00008d	 beq         |$LN15@KPD_IntrTh|

; 729  :                 if (!pState->pending) {

  01c34	e59d3098	 ldr         r3, [sp, #0x98]
  01c38	e5933000	 ldr         r3, [r3]
  01c3c	e3530000	 cmp         r3, #0
  01c40	1a000018	 bne         |$LN14@KPD_IntrTh|

; 730  :                     // Key was just pressed
; 731  :                     delay = pItem->firstDelay;

  01c44	e59d3090	 ldr         r3, [sp, #0x90]
  01c48	e2833002	 add         r3, r3, #2
  01c4c	e1d330b0	 ldrh        r3, [r3]
  01c50	e58d30a0	 str         r3, [sp, #0xA0]

; 732  :                     if (delay == 0) delay = pDevice->firstRepeat;

  01c54	e59d30a0	 ldr         r3, [sp, #0xA0]
  01c58	e3530000	 cmp         r3, #0
  01c5c	1a000003	 bne         |$LN13@KPD_IntrTh|
  01c60	e59d3000	 ldr         r3, [sp]
  01c64	e2833030	 add         r3, r3, #0x30
  01c68	e5933000	 ldr         r3, [r3]
  01c6c	e58d30a0	 str         r3, [sp, #0xA0]
  01c70		 |$LN13@KPD_IntrTh|

; 733  :                     pState->time = time + delay;

  01c70	e59d201c	 ldr         r2, [sp, #0x1C]
  01c74	e59d30a0	 ldr         r3, [sp, #0xA0]
  01c78	e0822003	 add         r2, r2, r3
  01c7c	e59d3098	 ldr         r3, [sp, #0x98]
  01c80	e2833004	 add         r3, r3, #4
  01c84	e5832000	 str         r2, [r3]

; 734  :                     pState->pending = TRUE;

  01c88	e59d2098	 ldr         r2, [sp, #0x98]
  01c8c	e3a03001	 mov         r3, #1
  01c90	e5823000	 str         r3, [r2]

; 735  :                     pState->blocked = FALSE;

  01c94	e59d3098	 ldr         r3, [sp, #0x98]
  01c98	e2832008	 add         r2, r3, #8
  01c9c	e3a03000	 mov         r3, #0
  01ca0	e5823000	 str         r3, [r2]
  01ca4	ea00006f	 b           |$LN12@KPD_IntrTh|
  01ca8		 |$LN14@KPD_IntrTh|

; 736  :                 } else if ((INT32)(time - pState->time) >= 0) {

  01ca8	e59d3098	 ldr         r3, [sp, #0x98]
  01cac	e2833004	 add         r3, r3, #4
  01cb0	e59d201c	 ldr         r2, [sp, #0x1C]
  01cb4	e5933000	 ldr         r3, [r3]
  01cb8	e0523003	 subs        r3, r2, r3
  01cbc	4a000069	 bmi         |$LN11@KPD_IntrTh|

; 737  :                     // Check if any blocking keys are pressed
; 738  :                     if (pBlock != 0) {

  01cc0	e59d309c	 ldr         r3, [sp, #0x9C]
  01cc4	e3530000	 cmp         r3, #0
  01cc8	0a000035	 beq         |$LN10@KPD_IntrTh|

; 739  :                         for (ik = 0; ik < pBlock->count; ik++) {

  01ccc	e3a03000	 mov         r3, #0
  01cd0	e1cd36b8	 strh        r3, [sp, #0x68]
  01cd4	ea000004	 b           |$LN9@KPD_IntrTh|
  01cd8		 |$LN8@KPD_IntrTh|
  01cd8	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01cdc	e2833001	 add         r3, r3, #1
  01ce0	e1a03803	 mov         r3, r3, lsl #16
  01ce4	e1a03823	 mov         r3, r3, lsr #16
  01ce8	e1cd36b8	 strh        r3, [sp, #0x68]
  01cec		 |$LN9@KPD_IntrTh|
  01cec	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01cf0	e1a02003	 mov         r2, r3
  01cf4	e59d309c	 ldr         r3, [sp, #0x9C]
  01cf8	e5d33000	 ldrb        r3, [r3]
  01cfc	e1520003	 cmp         r2, r3
  01d00	aa000027	 bge         |$LN7@KPD_IntrTh|

; 740  :                             vkBlock = pBlock->pVKey[ik];

  01d04	e59d309c	 ldr         r3, [sp, #0x9C]
  01d08	e2831004	 add         r1, r3, #4
  01d0c	e1dd36b8	 ldrh        r3, [sp, #0x68]
  01d10	e1a02003	 mov         r2, r3
  01d14	e5913000	 ldr         r3, [r1]
  01d18	e0833002	 add         r3, r3, r2
  01d1c	e5d33000	 ldrb        r3, [r3]
  01d20	e5cd308c	 strb        r3, [sp, #0x8C]

; 741  :                             if ((
; 742  :                                 vkNewState[vkBlock >> 5] &
; 743  :                                 (1 << (vkBlock & 0x1F))
; 744  :                             ) != 0) {

  01d24	e5dd308c	 ldrb        r3, [sp, #0x8C]
  01d28	e1a012c3	 mov         r1, r3, asr #5
  01d2c	e3a03004	 mov         r3, #4
  01d30	e0020391	 mul         r2, r1, r3
  01d34	e28d3020	 add         r3, sp, #0x20
  01d38	e0831002	 add         r1, r3, r2
  01d3c	e5dd308c	 ldrb        r3, [sp, #0x8C]
  01d40	e203201f	 and         r2, r3, #0x1F
  01d44	e3a03001	 mov         r3, #1
  01d48	e1a02213	 mov         r2, r3, lsl r2
  01d4c	e5913000	 ldr         r3, [r1]
  01d50	e1130002	 tst         r3, r2
  01d54	0a000011	 beq         |$LN6@KPD_IntrTh|

; 745  :                                 pState->blocked = TRUE;

  01d58	e59d3098	 ldr         r3, [sp, #0x98]
  01d5c	e2832008	 add         r2, r3, #8
  01d60	e3a03001	 mov         r3, #1
  01d64	e5823000	 str         r3, [r2]

; 746  :                                 DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 747  :                                     L"Block repeat: 0x%x because of 0x%x\r\n",
; 748  :                                     vk, vkBlock
; 749  :                                 ));

  01d68	e59f32a8	 ldr         r3, [pc, #0x2A8]
  01d6c	e5933440	 ldr         r3, [r3, #0x440]
  01d70	e3130020	 tst         r3, #0x20
  01d74	0a000006	 beq         |$LN127@KPD_IntrTh|
  01d78	e5dd208c	 ldrb        r2, [sp, #0x8C]
  01d7c	e5dd1004	 ldrb        r1, [sp, #4]
  01d80	e59f029c	 ldr         r0, [pc, #0x29C]
  01d84	eb000000	 bl          NKDbgPrintfW
  01d88	e3a03001	 mov         r3, #1
  01d8c	e58d30f4	 str         r3, [sp, #0xF4]
  01d90	ea000001	 b           |$LN128@KPD_IntrTh|
  01d94		 |$LN127@KPD_IntrTh|
  01d94	e3a03000	 mov         r3, #0
  01d98	e58d30f4	 str         r3, [sp, #0xF4]
  01d9c		 |$LN128@KPD_IntrTh|

; 750  :                                 break;

  01d9c	ea000000	 b           |$LN7@KPD_IntrTh|
  01da0		 |$LN6@KPD_IntrTh|

; 751  :                             }
; 752  :                         }

  01da0	eaffffcc	 b           |$LN8@KPD_IntrTh|
  01da4		 |$LN7@KPD_IntrTh|
  01da4		 |$LN10@KPD_IntrTh|

; 753  :                     }
; 754  :                     // Repeat if not blocked
; 755  :                     if (!pState->blocked) {

  01da4	e59d3098	 ldr         r3, [sp, #0x98]
  01da8	e2833008	 add         r3, r3, #8
  01dac	e5933000	 ldr         r3, [r3]
  01db0	e3530000	 cmp         r3, #0
  01db4	1a00001a	 bne         |$LN5@KPD_IntrTh|

; 756  :                         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 757  :                             L"Key Repeat: 0x%x\r\n", vk
; 758  :                         ));

  01db8	e59f3258	 ldr         r3, [pc, #0x258]
  01dbc	e5933440	 ldr         r3, [r3, #0x440]
  01dc0	e3130020	 tst         r3, #0x20
  01dc4	0a000005	 beq         |$LN129@KPD_IntrTh|
  01dc8	e5dd1004	 ldrb        r1, [sp, #4]
  01dcc	e59f024c	 ldr         r0, [pc, #0x24C]
  01dd0	eb000000	 bl          NKDbgPrintfW
  01dd4	e3a03001	 mov         r3, #1
  01dd8	e58d30f8	 str         r3, [sp, #0xF8]
  01ddc	ea000001	 b           |$LN130@KPD_IntrTh|
  01de0		 |$LN129@KPD_IntrTh|
  01de0	e3a03000	 mov         r3, #0
  01de4	e58d30f8	 str         r3, [sp, #0xF8]
  01de8		 |$LN130@KPD_IntrTh|

; 759  :                         keybd_event(vk, 0, pItem->silent?KEYEVENTF_SILENT:0, 0);

  01de8	e59d3090	 ldr         r3, [sp, #0x90]
  01dec	e2833008	 add         r3, r3, #8
  01df0	e5933000	 ldr         r3, [r3]
  01df4	e3530000	 cmp         r3, #0
  01df8	0a000002	 beq         |$LN131@KPD_IntrTh|
  01dfc	e3a03004	 mov         r3, #4
  01e00	e58d30fc	 str         r3, [sp, #0xFC]
  01e04	ea000001	 b           |$LN132@KPD_IntrTh|
  01e08		 |$LN131@KPD_IntrTh|
  01e08	e3a03000	 mov         r3, #0
  01e0c	e58d30fc	 str         r3, [sp, #0xFC]
  01e10		 |$LN132@KPD_IntrTh|
  01e10	e3a03000	 mov         r3, #0
  01e14	e59d20fc	 ldr         r2, [sp, #0xFC]
  01e18	e3a01000	 mov         r1, #0
  01e1c	e5dd0004	 ldrb        r0, [sp, #4]
  01e20	eb000000	 bl          keybd_event
  01e24		 |$LN5@KPD_IntrTh|

; 760  :                     }
; 761  :                     // Set time for next repeat
; 762  :                     delay = pItem->nextDelay;

  01e24	e59d3090	 ldr         r3, [sp, #0x90]
  01e28	e2833004	 add         r3, r3, #4
  01e2c	e1d330b0	 ldrh        r3, [r3]
  01e30	e58d30a0	 str         r3, [sp, #0xA0]

; 763  :                     if (delay == 0) delay = pDevice->nextRepeat;

  01e34	e59d30a0	 ldr         r3, [sp, #0xA0]
  01e38	e3530000	 cmp         r3, #0
  01e3c	1a000003	 bne         |$LN4@KPD_IntrTh|
  01e40	e59d3000	 ldr         r3, [sp]
  01e44	e2833034	 add         r3, r3, #0x34
  01e48	e5933000	 ldr         r3, [r3]
  01e4c	e58d30a0	 str         r3, [sp, #0xA0]
  01e50		 |$LN4@KPD_IntrTh|

; 764  :                     pState->time = time + delay;

  01e50	e59d201c	 ldr         r2, [sp, #0x1C]
  01e54	e59d30a0	 ldr         r3, [sp, #0xA0]
  01e58	e0822003	 add         r2, r2, r3
  01e5c	e59d3098	 ldr         r3, [sp, #0x98]
  01e60	e2833004	 add         r3, r3, #4
  01e64	e5832000	 str         r2, [r3]
  01e68		 |$LN11@KPD_IntrTh|
  01e68		 |$LN12@KPD_IntrTh|

; 765  :                 }
; 766  :             } else {

  01e68	ea000006	 b           |$LN3@KPD_IntrTh|
  01e6c		 |$LN15@KPD_IntrTh|

; 767  :                 pState->pending = FALSE;

  01e6c	e59d2098	 ldr         r2, [sp, #0x98]
  01e70	e3a03000	 mov         r3, #0
  01e74	e5823000	 str         r3, [r2]

; 768  :                 pState->blocked = FALSE;

  01e78	e59d3098	 ldr         r3, [sp, #0x98]
  01e7c	e2832008	 add         r2, r3, #8
  01e80	e3a03000	 mov         r3, #0
  01e84	e5823000	 str         r3, [r2]
  01e88		 |$LN3@KPD_IntrTh|

; 769  :             }
; 770  :         }

  01e88	eaffff3e	 b           |$LN17@KPD_IntrTh|
  01e8c		 |$LN16@KPD_IntrTh|

; 771  : 
; 772  :         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: Prepare for next run\r\n"));

  01e8c	e59f3184	 ldr         r3, [pc, #0x184]
  01e90	e5933440	 ldr         r3, [r3, #0x440]
  01e94	e3130020	 tst         r3, #0x20
  01e98	0a000004	 beq         |$LN133@KPD_IntrTh|
  01e9c	e59f0178	 ldr         r0, [pc, #0x178]
  01ea0	eb000000	 bl          NKDbgPrintfW
  01ea4	e3a03001	 mov         r3, #1
  01ea8	e58d3100	 str         r3, [sp, #0x100]
  01eac	ea000001	 b           |$LN134@KPD_IntrTh|
  01eb0		 |$LN133@KPD_IntrTh|
  01eb0	e3a03000	 mov         r3, #0
  01eb4	e58d3100	 str         r3, [sp, #0x100]
  01eb8		 |$LN134@KPD_IntrTh|

; 773  :         //--------------------------------------------------------------
; 774  :         // Prepare for next run
; 775  :         //--------------------------------------------------------------
; 776  :         // New state become old
; 777  :         memcpy(vkState, vkNewState, sizeof(vkState));

  01eb8	e3a02020	 mov         r2, #0x20
  01ebc	e28d1020	 add         r1, sp, #0x20
  01ec0	e28d0048	 add         r0, sp, #0x48
  01ec4	eb000000	 bl          memcpy

; 778  : 
; 779  :         // Don't drive any column GPIO's
; 780  :         OUTREG32(&pDevice->pGPIO3Regs->ulGPIO_CLEARDATAOUT, 1<<26);    // column 0 = Drive GPIO90

  01ec8	e59d3000	 ldr         r3, [sp]
  01ecc	e2833054	 add         r3, r3, #0x54
  01ed0	e5933000	 ldr         r3, [r3]
  01ed4	e2832090	 add         r2, r3, #0x90
  01ed8	e3a03301	 mov         r3, #1, 6
  01edc	e5823000	 str         r3, [r2]

; 781  :         OUTREG32(&pDevice->pGPIO3Regs->ulGPIO_CLEARDATAOUT, 1<<27);    // column 1 = Drive GPIO91

  01ee0	e59d3000	 ldr         r3, [sp]
  01ee4	e2833054	 add         r3, r3, #0x54
  01ee8	e5933000	 ldr         r3, [r3]
  01eec	e2832090	 add         r2, r3, #0x90
  01ef0	e3a03302	 mov         r3, #2, 6
  01ef4	e5823000	 str         r3, [r2]

; 782  :         OUTREG32(&pDevice->pGPIO1Regs->ulGPIO_CLEARDATAOUT, 1<<15);    // column 2 = Drive GPIO15

  01ef8	e59d3000	 ldr         r3, [sp]
  01efc	e283304c	 add         r3, r3, #0x4C
  01f00	e5933000	 ldr         r3, [r3]
  01f04	e2832090	 add         r2, r3, #0x90
  01f08	e3a03902	 mov         r3, #2, 18
  01f0c	e5823000	 str         r3, [r2]

; 783  :         OUTREG32(&pDevice->pGPIO2Regs->ulGPIO_CLEARDATAOUT, 1<<4);     // column 3 = Drive GPIO36

  01f10	e59d3000	 ldr         r3, [sp]
  01f14	e2833050	 add         r3, r3, #0x50
  01f18	e5933000	 ldr         r3, [r3]
  01f1c	e2832090	 add         r2, r3, #0x90
  01f20	e3a03010	 mov         r3, #0x10
  01f24	e5823000	 str         r3, [r2]

; 784  :         OUTREG32(&pDevice->pGPIO1Regs->ulGPIO_CLEARDATAOUT, 1<<12);    // column 4 = Drive GPIO12

  01f28	e59d3000	 ldr         r3, [sp]
  01f2c	e283304c	 add         r3, r3, #0x4C
  01f30	e5933000	 ldr         r3, [r3]
  01f34	e2832090	 add         r2, r3, #0x90
  01f38	e3a03a01	 mov         r3, #1, 20
  01f3c	e5823000	 str         r3, [r2]

; 785  :         OUTREG32(&pDevice->pGPIO4Regs->ulGPIO_CLEARDATAOUT, 1<<1);     // column 5 = Drive GPIO97

  01f40	e59d3000	 ldr         r3, [sp]
  01f44	e2833058	 add         r3, r3, #0x58
  01f48	e5933000	 ldr         r3, [r3]
  01f4c	e2832090	 add         r2, r3, #0x90
  01f50	e3a03002	 mov         r3, #2
  01f54	e5823000	 str         r3, [r2]

; 786  : 
; 787  :         // Set timeout period depending on data state
; 788  :         timeout = keyDown ? pDevice->samplePeriod : INFINITE;

  01f58	e59d3044	 ldr         r3, [sp, #0x44]
  01f5c	e3530000	 cmp         r3, #0
  01f60	0a000004	 beq         |$LN135@KPD_IntrTh|
  01f64	e59d3000	 ldr         r3, [sp]
  01f68	e2833028	 add         r3, r3, #0x28
  01f6c	e5933000	 ldr         r3, [r3]
  01f70	e58d3104	 str         r3, [sp, #0x104]
  01f74	ea000001	 b           |$LN136@KPD_IntrTh|
  01f78		 |$LN135@KPD_IntrTh|
  01f78	e3e03000	 mvn         r3, #0
  01f7c	e58d3104	 str         r3, [sp, #0x104]
  01f80		 |$LN136@KPD_IntrTh|
  01f80	e59d3104	 ldr         r3, [sp, #0x104]
  01f84	e58d3078	 str         r3, [sp, #0x78]

; 789  :         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: InterruptDone, timeout set to %d\r\n", timeout));

  01f88	e59f3088	 ldr         r3, [pc, #0x88]
  01f8c	e5933440	 ldr         r3, [r3, #0x440]
  01f90	e3130020	 tst         r3, #0x20
  01f94	0a000005	 beq         |$LN137@KPD_IntrTh|
  01f98	e59d1078	 ldr         r1, [sp, #0x78]
  01f9c	e59f0070	 ldr         r0, [pc, #0x70]
  01fa0	eb000000	 bl          NKDbgPrintfW
  01fa4	e3a03001	 mov         r3, #1
  01fa8	e58d3108	 str         r3, [sp, #0x108]
  01fac	ea000001	 b           |$LN138@KPD_IntrTh|
  01fb0		 |$LN137@KPD_IntrTh|
  01fb0	e3a03000	 mov         r3, #0
  01fb4	e58d3108	 str         r3, [sp, #0x108]
  01fb8		 |$LN138@KPD_IntrTh|

; 790  :         // Interrupt is done
; 791  :         InterruptDone(pDevice->sysIntr);

  01fb8	e59d3000	 ldr         r3, [sp]
  01fbc	e283305c	 add         r3, r3, #0x5C
  01fc0	e5930000	 ldr         r0, [r3]
  01fc4	eb000000	 bl          InterruptDone

; 792  :     }

  01fc8	eafffb29	 b           |$LN90@KPD_IntrTh|
  01fcc		 |$LN89@KPD_IntrTh|
  01fcc		 |$cleanUp$43026|

; 793  : 
; 794  : cleanUp:
; 795  : 
; 796  :     if (pRemapState != NULL) LocalFree(pRemapState);

  01fcc	e59d300c	 ldr         r3, [sp, #0xC]
  01fd0	e3530000	 cmp         r3, #0
  01fd4	0a000001	 beq         |$LN2@KPD_IntrTh|
  01fd8	e59d000c	 ldr         r0, [sp, #0xC]
  01fdc	eb000000	 bl          LocalFree
  01fe0		 |$LN2@KPD_IntrTh|

; 797  :     if (pRepeatState != NULL) LocalFree(pRepeatState);

  01fe0	e59d3018	 ldr         r3, [sp, #0x18]
  01fe4	e3530000	 cmp         r3, #0
  01fe8	0a000001	 beq         |$LN1@KPD_IntrTh|
  01fec	e59d0018	 ldr         r0, [sp, #0x18]
  01ff0	eb000000	 bl          LocalFree
  01ff4		 |$LN1@KPD_IntrTh|

; 798  :     return ERROR_SUCCESS;

  01ff4	e59d00a4	 ldr         r0, [sp, #0xA4]
  01ff8	eb000000	 bl          __security_check_cookie
  01ffc	e3a03000	 mov         r3, #0
  02000	e58d30a8	 str         r3, [sp, #0xA8]

; 799  : }

  02004	e59d00a8	 ldr         r0, [sp, #0xA8]
  02008	e28ddf43	 add         sp, sp, #0x43, 30
  0200c	e89d6000	 ldmia       sp, {sp, lr}
  02010	e12fff1e	 bx          lr
  02014		 |$LN142@KPD_IntrTh|
  02014		 |$LN143@KPD_IntrTh|
  02014	00000000	 DCD         |??_C@_1GI@CJMEHCNE@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?0?$AA?5@|
  02018		 |$LN144@KPD_IntrTh|
  02018	00000000	 DCD         |dpCurSettings|
  0201c		 |$LN145@KPD_IntrTh|
  0201c	00000000	 DCD         |??_C@_1FA@OEJPKNOP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn?$AAe?$AAx@|
  02020		 |$LN146@KPD_IntrTh|
  02020	00000000	 DCD         |??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@|
  02024		 |$LN147@KPD_IntrTh|
  02024	00000000	 DCD         |??_C@_1GM@NOFDFHJD@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@|
  02028		 |$LN148@KPD_IntrTh|
  02028	00000000	 DCD         |g_keypadRepeat|
  0202c		 |$LN149@KPD_IntrTh|
  0202c	00000000	 DCD         |??_C@_1EA@FIDBIEFP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  02030		 |$LN150@KPD_IntrTh|
  02030	00000000	 DCD         |??_C@_1BG@OOGCKOCO@?$AAV?$AAK?$AA_?$AAT?$AAS?$AAT?$AAA?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  02034		 |$LN151@KPD_IntrTh|
  02034	00000000	 DCD         |??_C@_1EE@DJAIAEGH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@|
  02038		 |$LN152@KPD_IntrTh|
  02038	00000000	 DCD         |??_C@_1CG@JANBOJMA@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA2?$AA?$AN?$AA?6?$AA?$AA@|
  0203c		 |$LN153@KPD_IntrTh|
  0203c	00000000	 DCD         |??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@|
  02040		 |$LN154@KPD_IntrTh|
  02040	00000000	 DCD         |??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@|
  02044		 |$LN155@KPD_IntrTh|
  02044	00000000	 DCD         |g_keypadRemap|
  02048		 |$LN156@KPD_IntrTh|
  02048	00000000	 DCD         |??_C@_1CE@NEDINNM@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0204c		 |$LN157@KPD_IntrTh|
  0204c	00000000	 DCD         |g_keypadVK|
  02050		 |$LN158@KPD_IntrTh|
  02050	00000000	 DCD         |??_C@_1FC@GAILFJIP@?$AAR?$AAo?$AAw?$AA?5?$AA4?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@|
  02054		 |$LN159@KPD_IntrTh|
  02054	00000000	 DCD         |??_C@_1FC@LJPHPFMN@?$AAR?$AAo?$AAw?$AA?5?$AA3?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAw?$AAh?$AAe?$AAn?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?5?$AA?$CD?$AA?$CF?$AAd?$AA?5?$AAd@|
  02058		 |$M43471|

			 ENDP  ; |KPD_IntrThread|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00030			 AREA	 |.pdata|, PDATA
|$T43508| DCD	|$LN8@DllMain|
	DCD	0x40001404
; Function compile flags: /Odtp

  02058			 AREA	 |.text|, CODE, ARM

  02058		 |DllMain| PROC

; 808  : {

  02058		 |$LN8@DllMain|
  02058	e1a0c00d	 mov         r12, sp
  0205c	e92d0007	 stmdb       sp!, {r0 - r2}
  02060	e92d5000	 stmdb       sp!, {r12, lr}
  02064	e24dd004	 sub         sp, sp, #4
  02068		 |$M43505|

; 809  :     switch (reason) {

  02068	e59d3010	 ldr         r3, [sp, #0x10]
  0206c	e3530001	 cmp         r3, #1
  02070	0a000000	 beq         |$LN1@DllMain|
  02074	ea000004	 b           |$LN2@DllMain|
  02078		 |$LN1@DllMain|

; 810  :     case DLL_PROCESS_ATTACH:
; 811  :         DEBUGREGISTER(hDLL);

  02078	e59f1024	 ldr         r1, [pc, #0x24]
  0207c	e59d000c	 ldr         r0, [sp, #0xC]
  02080	eb000000	 bl          RegisterDbgZones

; 812  :         DisableThreadLibraryCalls((HMODULE)hDLL);

  02084	e59d000c	 ldr         r0, [sp, #0xC]
  02088	eb000000	 bl          DisableThreadLibraryCalls
  0208c		 |$LN2@DllMain|

; 813  :         break;
; 814  :     }
; 815  :     return TRUE;

  0208c	e3a03001	 mov         r3, #1
  02090	e58d3000	 str         r3, [sp]

; 816  : }

  02094	e59d0000	 ldr         r0, [sp]
  02098	e28dd004	 add         sp, sp, #4
  0209c	e89d6000	 ldmia       sp, {sp, lr}
  020a0	e12fff1e	 bx          lr
  020a4		 |$LN9@DllMain|
  020a4		 |$LN10@DllMain|
  020a4	00000000	 DCD         |dpCurSettings|
  020a8		 |$M43506|

			 ENDP  ; |DllMain|

	END
