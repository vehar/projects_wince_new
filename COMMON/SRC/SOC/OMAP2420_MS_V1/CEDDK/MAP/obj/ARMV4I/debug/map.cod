; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\CEDDK\MAP\map.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_pTIPB| %	0x4
	EXPORT	|??_C@_1FK@DNGPKMKL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@BDNFNODK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@PPCEFBME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@LNICCLAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|MmMapIoSpace|
	IMPORT	|VirtualFree|
	IMPORT	|VirtualCopy|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|VirtualAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T42677| DCD	|$LN14@MmMapIoSpa|
	DCD	0x4000a104
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\ceddk\map\map.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@DNGPKMKL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "m", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I"
	DCB	0x0, "o", 0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@BDNFNODK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "m", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I"
	DCB	0x0, "o", 0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "r", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e"
	DCB	0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@PPCEFBME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "m", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I"
	DCB	0x0, "o", 0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@LNICCLAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "m", 0x0, "M", 0x0, "a", 0x0, "p", 0x0, "I"
	DCB	0x0, "o", 0x0, "S", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e"
	DCB	0x0, "r", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MmMapIoSpace| PROC

; 39   : {

  00000		 |$LN14@MmMapIoSpa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd034	 sub         sp, sp, #0x34
  00010		 |$M42674|

; 40   :     VOID *pAddress = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3010	 str         r3, [sp, #0x10]

; 41   :     UINT64 phSource;
; 42   :     UINT32 sourceSize, offset;
; 43   :     BOOL rc;
; 44   : 
; 45   :     // Check if we can use common mapping for device registers (test is
; 46   :     // simplified as long as we know that we support only 32 bit addressing).
; 47   :     if (
; 48   :         !cacheEnable && phAddress.HighPart == 0 && 
; 49   :         phAddress.LowPart >= OMAP2420_REGS_PA
; 50   :     ) {

  00018	e5dd3048	 ldrb        r3, [sp, #0x48]
  0001c	e3530000	 cmp         r3, #0
  00020	1a00003a	 bne         |$LN7@MmMapIoSpa|
  00024	e59d3040	 ldr         r3, [sp, #0x40]
  00028	e3530000	 cmp         r3, #0
  0002c	1a000037	 bne         |$LN7@MmMapIoSpa|
  00030	e59d303c	 ldr         r3, [sp, #0x3C]
  00034	e3530312	 cmp         r3, #0x12, 6
  00038	3a000034	 bcc         |$LN7@MmMapIoSpa|

; 51   : 
; 52   :         // Create mapping when it doesn't exist yet
; 53   :         if (g_pTIPB == NULL) {

  0003c	e59f3234	 ldr         r3, [pc, #0x234]
  00040	e5933000	 ldr         r3, [r3]
  00044	e3530000	 cmp         r3, #0
  00048	1a000027	 bne         |$LN6@MmMapIoSpa|

; 54   :             
; 55   :             g_pTIPB = VirtualAlloc(
; 56   :                 0, OMAP2420_REGS_SIZE, MEM_RESERVE, PAGE_NOACCESS
; 57   :             );

  0004c	e3a03001	 mov         r3, #1
  00050	e3a02a02	 mov         r2, #2, 20
  00054	e3a01302	 mov         r1, #2, 6
  00058	e3a00000	 mov         r0, #0
  0005c	eb000000	 bl          VirtualAlloc
  00060	e58d001c	 str         r0, [sp, #0x1C]
  00064	e59d201c	 ldr         r2, [sp, #0x1C]
  00068	e59f3208	 ldr         r3, [pc, #0x208]
  0006c	e5832000	 str         r2, [r3]

; 58   :             if (g_pTIPB == NULL) {

  00070	e59f3200	 ldr         r3, [pc, #0x200]
  00074	e5933000	 ldr         r3, [r3]
  00078	e3530000	 cmp         r3, #0
  0007c	1a000002	 bne         |$LN5@MmMapIoSpa|

; 59   :                 DEBUGMSG(TRUE, (
; 60   :                     L"ERROR: MmMapIoSpace failed reserve registers memory\r\n"
; 61   :                 ));

  00080	e59f01f8	 ldr         r0, [pc, #0x1F8]
  00084	eb000000	 bl          NKDbgPrintfW

; 62   :                 goto cleanUp;

  00088	ea000072	 b           |$cleanUp$42558|
  0008c		 |$LN5@MmMapIoSpa|

; 63   :             }
; 64   :             rc = VirtualCopy(
; 65   :                 g_pTIPB, (PVOID)(OMAP2420_REGS_PA >> 8), 
; 66   :                 OMAP2420_REGS_SIZE, PAGE_PHYSICAL|PAGE_READWRITE|PAGE_NOCACHE
; 67   :             );

  0008c	e3a03c06	 mov         r3, #6, 24
  00090	e3833004	 orr         r3, r3, #4
  00094	e3a02302	 mov         r2, #2, 6
  00098	e3a01712	 mov         r1, #0x12, 14
  0009c	e59f01d4	 ldr         r0, [pc, #0x1D4]
  000a0	e5900000	 ldr         r0, [r0]
  000a4	eb000000	 bl          VirtualCopy
  000a8	e58d0020	 str         r0, [sp, #0x20]
  000ac	e59d3020	 ldr         r3, [sp, #0x20]
  000b0	e58d3000	 str         r3, [sp]

; 68   :             if (!rc) {

  000b4	e59d3000	 ldr         r3, [sp]
  000b8	e3530000	 cmp         r3, #0
  000bc	1a00000a	 bne         |$LN4@MmMapIoSpa|

; 69   :                 DEBUGMSG(TRUE, (
; 70   :                     L"ERROR: MmMapIoSpace failed allocate registers memory\r\n"
; 71   :                 ));

  000c0	e59f01b4	 ldr         r0, [pc, #0x1B4]
  000c4	eb000000	 bl          NKDbgPrintfW

; 72   :                 VirtualFree(g_pTIPB, 0, MEM_RELEASE);

  000c8	e3a02902	 mov         r2, #2, 18
  000cc	e3a01000	 mov         r1, #0
  000d0	e59f31a0	 ldr         r3, [pc, #0x1A0]
  000d4	e5930000	 ldr         r0, [r3]
  000d8	eb000000	 bl          VirtualFree

; 73   :                 g_pTIPB = NULL;

  000dc	e59f2194	 ldr         r2, [pc, #0x194]
  000e0	e3a03000	 mov         r3, #0
  000e4	e5823000	 str         r3, [r2]

; 74   :                 goto cleanUp;

  000e8	ea00005a	 b           |$cleanUp$42558|
  000ec		 |$LN4@MmMapIoSpa|
  000ec		 |$LN6@MmMapIoSpa|

; 75   :             }
; 76   :         }
; 77   : 
; 78   :         // Calculate offset
; 79   :         offset = phAddress.LowPart - OMAP2420_REGS_PA;

  000ec	e59d303c	 ldr         r3, [sp, #0x3C]
  000f0	e2433312	 sub         r3, r3, #0x12, 6
  000f4	e58d300c	 str         r3, [sp, #0xC]

; 80   :         (UINT32)pAddress = (UINT32)g_pTIPB + offset;

  000f8	e59f3178	 ldr         r3, [pc, #0x178]
  000fc	e5932000	 ldr         r2, [r3]
  00100	e59d300c	 ldr         r3, [sp, #0xC]
  00104	e0823003	 add         r3, r2, r3
  00108	e58d3010	 str         r3, [sp, #0x10]

; 81   :         
; 82   :     } else {

  0010c	ea000051	 b           |$LN3@MmMapIoSpa|
  00110		 |$LN7@MmMapIoSpa|

; 83   : 
; 84   :         phSource = phAddress.QuadPart & ~(PAGE_SIZE - 1);

  00110	e3e03b0d	 mvn         r3, #0xD, 22
  00114	e22330fb	 eor         r3, r3, #0xFB
  00118	e5933000	 ldr         r3, [r3]
  0011c	e2433001	 sub         r3, r3, #1
  00120	e1e03003	 mvn         r3, r3
  00124	e58d3024	 str         r3, [sp, #0x24]
  00128	e59d2024	 ldr         r2, [sp, #0x24]
  0012c	e59d3024	 ldr         r3, [sp, #0x24]
  00130	e1a01fc3	 mov         r1, r3, asr #31
  00134	e59d303c	 ldr         r3, [sp, #0x3C]
  00138	e0032002	 and         r2, r3, r2
  0013c	e59d3040	 ldr         r3, [sp, #0x40]
  00140	e0033001	 and         r3, r3, r1
  00144	e58d2004	 str         r2, [sp, #4]
  00148	e58d3008	 str         r3, [sp, #8]

; 85   :         sourceSize = size + (phAddress.LowPart & (PAGE_SIZE - 1));

  0014c	e3e03b0d	 mvn         r3, #0xD, 22
  00150	e22330fb	 eor         r3, r3, #0xFB
  00154	e5933000	 ldr         r3, [r3]
  00158	e2432001	 sub         r2, r3, #1
  0015c	e59d303c	 ldr         r3, [sp, #0x3C]
  00160	e0032002	 and         r2, r3, r2
  00164	e59d3044	 ldr         r3, [sp, #0x44]
  00168	e0833002	 add         r3, r3, r2
  0016c	e58d3014	 str         r3, [sp, #0x14]

; 86   : 
; 87   :         pAddress = VirtualAlloc(0, sourceSize, MEM_RESERVE, PAGE_NOACCESS);

  00170	e3a03001	 mov         r3, #1
  00174	e3a02a02	 mov         r2, #2, 20
  00178	e59d1014	 ldr         r1, [sp, #0x14]
  0017c	e3a00000	 mov         r0, #0
  00180	eb000000	 bl          VirtualAlloc
  00184	e58d0028	 str         r0, [sp, #0x28]
  00188	e59d3028	 ldr         r3, [sp, #0x28]
  0018c	e58d3010	 str         r3, [sp, #0x10]

; 88   :         if (pAddress == NULL) {

  00190	e59d3010	 ldr         r3, [sp, #0x10]
  00194	e3530000	 cmp         r3, #0
  00198	1a000002	 bne         |$LN2@MmMapIoSpa|

; 89   :             DEBUGMSG(TRUE, (
; 90   :                 L"ERROR: MmMapIoSpace failed reserve memory\r\n"
; 91   :             ));

  0019c	e59f00d0	 ldr         r0, [pc, #0xD0]
  001a0	eb000000	 bl          NKDbgPrintfW

; 92   :             goto cleanUp;

  001a4	ea00002b	 b           |$cleanUp$42558|
  001a8		 |$LN2@MmMapIoSpa|

; 93   :         }            
; 94   :         rc = VirtualCopy(
; 95   :             pAddress, (PVOID)(phSource >> 8), sourceSize,
; 96   :             PAGE_PHYSICAL | PAGE_READWRITE | (cacheEnable ? 0 : PAGE_NOCACHE)
; 97   :         );

  001a8	e5dd3048	 ldrb        r3, [sp, #0x48]
  001ac	e3530000	 cmp         r3, #0
  001b0	0a000002	 beq         |$LN10@MmMapIoSpa|
  001b4	e3a03000	 mov         r3, #0
  001b8	e58d302c	 str         r3, [sp, #0x2C]
  001bc	ea000001	 b           |$LN11@MmMapIoSpa|
  001c0		 |$LN10@MmMapIoSpa|
  001c0	e3a03c02	 mov         r3, #2, 24
  001c4	e58d302c	 str         r3, [sp, #0x2C]
  001c8		 |$LN11@MmMapIoSpa|
  001c8	e59d202c	 ldr         r2, [sp, #0x2C]
  001cc	e3a03b01	 mov         r3, #1, 22
  001d0	e3833004	 orr         r3, r3, #4
  001d4	e1823003	 orr         r3, r2, r3
  001d8	e59d2014	 ldr         r2, [sp, #0x14]
  001dc	e59d0004	 ldr         r0, [sp, #4]
  001e0	e59d1008	 ldr         r1, [sp, #8]
  001e4	e1a00420	 mov         r0, r0, lsr #8
  001e8	e1a01c01	 mov         r1, r1, lsl #24
  001ec	e1811000	 orr         r1, r1, r0
  001f0	e59d0010	 ldr         r0, [sp, #0x10]
  001f4	eb000000	 bl          VirtualCopy
  001f8	e58d0030	 str         r0, [sp, #0x30]
  001fc	e59d3030	 ldr         r3, [sp, #0x30]
  00200	e58d3000	 str         r3, [sp]

; 98   :         if (!rc) {

  00204	e59d3000	 ldr         r3, [sp]
  00208	e3530000	 cmp         r3, #0
  0020c	1a000008	 bne         |$LN1@MmMapIoSpa|

; 99   :             DEBUGMSG(TRUE, (
; 100  :                 L"ERROR: MmMapIoSpace failed allocate memory\r\n"
; 101  :             ));

  00210	e59f0058	 ldr         r0, [pc, #0x58]
  00214	eb000000	 bl          NKDbgPrintfW

; 102  :             VirtualFree(pAddress, 0, MEM_RELEASE);

  00218	e3a02902	 mov         r2, #2, 18
  0021c	e3a01000	 mov         r1, #0
  00220	e59d0010	 ldr         r0, [sp, #0x10]
  00224	eb000000	 bl          VirtualFree

; 103  :             pAddress = NULL;

  00228	e3a03000	 mov         r3, #0
  0022c	e58d3010	 str         r3, [sp, #0x10]

; 104  :             goto cleanUp;

  00230	ea000008	 b           |$cleanUp$42558|
  00234		 |$LN1@MmMapIoSpa|

; 105  :         }
; 106  :         (UINT32)pAddress += phAddress.LowPart & (PAGE_SIZE - 1);

  00234	e3e03b0d	 mvn         r3, #0xD, 22
  00238	e22330fb	 eor         r3, r3, #0xFB
  0023c	e5933000	 ldr         r3, [r3]
  00240	e2432001	 sub         r2, r3, #1
  00244	e59d303c	 ldr         r3, [sp, #0x3C]
  00248	e0032002	 and         r2, r3, r2
  0024c	e59d3010	 ldr         r3, [sp, #0x10]
  00250	e0833002	 add         r3, r3, r2
  00254	e58d3010	 str         r3, [sp, #0x10]
  00258		 |$LN3@MmMapIoSpa|
  00258		 |$cleanUp$42558|

; 107  :     }
; 108  : 
; 109  : cleanUp:
; 110  :     return pAddress;

  00258	e59d3010	 ldr         r3, [sp, #0x10]
  0025c	e58d3018	 str         r3, [sp, #0x18]

; 111  : }

  00260	e59d0018	 ldr         r0, [sp, #0x18]
  00264	e28dd034	 add         sp, sp, #0x34
  00268	e89d6000	 ldmia       sp, {sp, lr}
  0026c	e12fff1e	 bx          lr
  00270		 |$LN15@MmMapIoSpa|
  00270		 |$LN16@MmMapIoSpa|
  00270	00000000	 DCD         |??_C@_1FK@DNGPKMKL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@|
  00274		 |$LN17@MmMapIoSpa|
  00274	00000000	 DCD         |??_C@_1FI@BDNFNODK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr@|
  00278		 |$LN18@MmMapIoSpa|
  00278	00000000	 DCD         |g_pTIPB|
  0027c		 |$LN19@MmMapIoSpa|
  0027c	00000000	 DCD         |??_C@_1GO@PPCEFBME@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@|
  00280		 |$LN20@MmMapIoSpa|
  00280	00000000	 DCD         |??_C@_1GM@LNICCLAG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAM?$AAm?$AAM?$AAa?$AAp?$AAI?$AAo?$AAS?$AAp?$AAa?$AAc?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAr@|
  00284		 |$M42675|

			 ENDP  ; |MmMapIoSpace|

	EXPORT	|MmUnmapIoSpace|

  00008			 AREA	 |.pdata|, PDATA
|$T42688| DCD	|$LN7@MmUnmapIoS|
	DCD	0x40001f03
; Function compile flags: /Odtp

  00284			 AREA	 |.text|, CODE, ARM

  00284		 |MmUnmapIoSpace| PROC

; 121  : {

  00284		 |$LN7@MmUnmapIoS|
  00284	e1a0c00d	 mov         r12, sp
  00288	e92d0003	 stmdb       sp!, {r0, r1}
  0028c	e92d5000	 stmdb       sp!, {r12, lr}
  00290		 |$M42685|

; 122  :     // We want unmap only in case that memory wasn't mapped from common
; 123  :     // mapping.
; 124  :     if (
; 125  :         g_pTIPB == NULL || 
; 126  :         (UINT32)pAddress < (UINT32)g_pTIPB ||
; 127  :         (UINT32)pAddress >= (UINT32)g_pTIPB + OMAP2420_REGS_SIZE
; 128  :     ) {

  00290	e59f3064	 ldr         r3, [pc, #0x64]
  00294	e5933000	 ldr         r3, [r3]
  00298	e3530000	 cmp         r3, #0
  0029c	0a00000a	 beq         |$LN1@MmUnmapIoS|
  002a0	e59d2008	 ldr         r2, [sp, #8]
  002a4	e59f3050	 ldr         r3, [pc, #0x50]
  002a8	e5933000	 ldr         r3, [r3]
  002ac	e1520003	 cmp         r2, r3
  002b0	3a000005	 bcc         |$LN1@MmUnmapIoS|
  002b4	e59f3040	 ldr         r3, [pc, #0x40]
  002b8	e5933000	 ldr         r3, [r3]
  002bc	e2832302	 add         r2, r3, #2, 6
  002c0	e59d3008	 ldr         r3, [sp, #8]
  002c4	e1530002	 cmp         r3, r2
  002c8	3a000009	 bcc         |$LN2@MmUnmapIoS|
  002cc		 |$LN1@MmUnmapIoS|

; 129  :         VirtualFree(
; 130  :             (VOID*)((UINT32)pAddress & ~(PAGE_SIZE - 1)), 0, MEM_RELEASE
; 131  :         );

  002cc	e3a02902	 mov         r2, #2, 18
  002d0	e3a01000	 mov         r1, #0
  002d4	e3e03b0d	 mvn         r3, #0xD, 22
  002d8	e22330fb	 eor         r3, r3, #0xFB
  002dc	e5933000	 ldr         r3, [r3]
  002e0	e2433001	 sub         r3, r3, #1
  002e4	e1e00003	 mvn         r0, r3
  002e8	e59d3008	 ldr         r3, [sp, #8]
  002ec	e0030000	 and         r0, r3, r0
  002f0	eb000000	 bl          VirtualFree
  002f4		 |$LN2@MmUnmapIoS|

; 132  :     }
; 133  : }

  002f4	e89d6000	 ldmia       sp, {sp, lr}
  002f8	e12fff1e	 bx          lr
  002fc		 |$LN8@MmUnmapIoS|
  002fc		 |$LN9@MmUnmapIoS|
  002fc	00000000	 DCD         |g_pTIPB|
  00300		 |$M42686|

			 ENDP  ; |MmUnmapIoSpace|

	EXPORT	|TransBusAddrToVirtual|
	IMPORT	|HalTranslateBusAddress|

  00010			 AREA	 |.pdata|, PDATA
|$T42698| DCD	|$LN11@TransBusAd|
	DCD	0x40003904
; Function compile flags: /Odtp

  00300			 AREA	 |.text|, CODE, ARM

  00300		 |TransBusAddrToVirtual| PROC

; 142  : ) {

  00300		 |$LN11@TransBusAd|
  00300	e1a0c00d	 mov         r12, sp
  00304	e92d000f	 stmdb       sp!, {r0 - r3}
  00308	e92d5000	 stmdb       sp!, {r12, lr}
  0030c	e24dd02c	 sub         sp, sp, #0x2C
  00310		 |$M42695|

; 143  :     BOOL rc = FALSE;

  00310	e3a03000	 mov         r3, #0
  00314	e58d3008	 str         r3, [sp, #8]

; 144  :     PHYSICAL_ADDRESS phAddress; 
; 145  : 
; 146  :     if (!HalTranslateBusAddress(
; 147  :         ifcType, busNumber, busAddress, pAddressSpace, &phAddress
; 148  :     )) {

  00318	e28d300c	 add         r3, sp, #0xC
  0031c	e58d3004	 str         r3, [sp, #4]
  00320	e59d3048	 ldr         r3, [sp, #0x48]
  00324	e58d3000	 str         r3, [sp]
  00328	e59d203c	 ldr         r2, [sp, #0x3C]
  0032c	e59d3040	 ldr         r3, [sp, #0x40]
  00330	e59d1038	 ldr         r1, [sp, #0x38]
  00334	e59d0034	 ldr         r0, [sp, #0x34]
  00338	eb000000	 bl          HalTranslateBusAddress
  0033c	e5cd0020	 strb        r0, [sp, #0x20]
  00340	e5dd3020	 ldrb        r3, [sp, #0x20]
  00344	e3530000	 cmp         r3, #0
  00348	1a000000	 bne         |$LN6@TransBusAd|

; 149  :         goto cleanUp;

  0034c	ea00001e	 b           |$cleanUp$42615|
  00350		 |$LN6@TransBusAd|

; 150  :     }
; 151  : 
; 152  :     switch (*pAddressSpace) {

  00350	e59d3048	 ldr         r3, [sp, #0x48]
  00354	e5933000	 ldr         r3, [r3]
  00358	e58d3024	 str         r3, [sp, #0x24]
  0035c	e59d3024	 ldr         r3, [sp, #0x24]
  00360	e3530000	 cmp         r3, #0
  00364	0a000003	 beq         |$LN3@TransBusAd|
  00368	e59d3024	 ldr         r3, [sp, #0x24]
  0036c	e3530001	 cmp         r3, #1
  00370	0a000010	 beq         |$LN1@TransBusAd|
  00374	ea000014	 b           |$LN4@TransBusAd|
  00378		 |$LN3@TransBusAd|

; 153  :     case 0:
; 154  :         // Memory-mapped I/O, get virtual address for translated address
; 155  :         *ppMappedAddress = MmMapIoSpace(phAddress, length, FALSE);

  00378	e3a03000	 mov         r3, #0
  0037c	e59d2044	 ldr         r2, [sp, #0x44]
  00380	e59d000c	 ldr         r0, [sp, #0xC]
  00384	e59d1010	 ldr         r1, [sp, #0x10]
  00388	eb000000	 bl          MmMapIoSpace
  0038c	e58d0028	 str         r0, [sp, #0x28]
  00390	e59d2028	 ldr         r2, [sp, #0x28]
  00394	e59d304c	 ldr         r3, [sp, #0x4C]
  00398	e5832000	 str         r2, [r3]

; 156  :         if (*ppMappedAddress != NULL) rc = TRUE;

  0039c	e59d304c	 ldr         r3, [sp, #0x4C]
  003a0	e5933000	 ldr         r3, [r3]
  003a4	e3530000	 cmp         r3, #0
  003a8	0a000001	 beq         |$LN2@TransBusAd|
  003ac	e3a03001	 mov         r3, #1
  003b0	e58d3008	 str         r3, [sp, #8]
  003b4		 |$LN2@TransBusAd|

; 157  :         break;

  003b4	ea000004	 b           |$LN4@TransBusAd|
  003b8		 |$LN1@TransBusAd|

; 158  :     case 1:        
; 159  :         // I/O port
; 160  :         *ppMappedAddress = (VOID*)phAddress.LowPart;

  003b8	e59d200c	 ldr         r2, [sp, #0xC]
  003bc	e59d304c	 ldr         r3, [sp, #0x4C]
  003c0	e5832000	 str         r2, [r3]

; 161  :         rc = TRUE;

  003c4	e3a03001	 mov         r3, #1
  003c8	e58d3008	 str         r3, [sp, #8]
  003cc		 |$LN4@TransBusAd|
  003cc		 |$cleanUp$42615|

; 162  :         break;
; 163  :     }
; 164  : 
; 165  : cleanUp:
; 166  :     return rc;

  003cc	e59d3008	 ldr         r3, [sp, #8]
  003d0	e58d301c	 str         r3, [sp, #0x1C]

; 167  : }

  003d4	e59d001c	 ldr         r0, [sp, #0x1C]
  003d8	e28dd02c	 add         sp, sp, #0x2C
  003dc	e89d6000	 ldmia       sp, {sp, lr}
  003e0	e12fff1e	 bx          lr
  003e4		 |$M42696|

			 ENDP  ; |TransBusAddrToVirtual|

	EXPORT	|TransBusAddrToStatic|
	IMPORT	|CreateStaticMapping|

  00018			 AREA	 |.pdata|, PDATA
|$T42706| DCD	|$LN11@TransBusAd@2|
	DCD	0x40005e04
; Function compile flags: /Odtp

  003e4			 AREA	 |.text|, CODE, ARM

  003e4		 |TransBusAddrToStatic| PROC

; 176  : ) {

  003e4		 |$LN11@TransBusAd@2|
  003e4	e1a0c00d	 mov         r12, sp
  003e8	e92d000f	 stmdb       sp!, {r0 - r3}
  003ec	e92d5000	 stmdb       sp!, {r12, lr}
  003f0	e24dd03c	 sub         sp, sp, #0x3C
  003f4		 |$M42703|

; 177  :     BOOL rc = FALSE;

  003f4	e3a03000	 mov         r3, #0
  003f8	e58d3008	 str         r3, [sp, #8]

; 178  :     PHYSICAL_ADDRESS phAddress;
; 179  :     UINT64 address;
; 180  :     UINT32 size;
; 181  : 
; 182  :     if (!HalTranslateBusAddress(
; 183  :         ifcType, busNumber, busAddress, pAddressSpace, &phAddress
; 184  :     )) goto cleanUp;

  003fc	e28d3010	 add         r3, sp, #0x10
  00400	e58d3004	 str         r3, [sp, #4]
  00404	e59d3058	 ldr         r3, [sp, #0x58]
  00408	e58d3000	 str         r3, [sp]
  0040c	e59d204c	 ldr         r2, [sp, #0x4C]
  00410	e59d3050	 ldr         r3, [sp, #0x50]
  00414	e59d1048	 ldr         r1, [sp, #0x48]
  00418	e59d0044	 ldr         r0, [sp, #0x44]
  0041c	eb000000	 bl          HalTranslateBusAddress
  00420	e5cd002c	 strb        r0, [sp, #0x2C]
  00424	e5dd302c	 ldrb        r3, [sp, #0x2C]
  00428	e3530000	 cmp         r3, #0
  0042c	1a000000	 bne         |$LN6@TransBusAd@2|
  00430	ea000043	 b           |$cleanUp$42643|
  00434		 |$LN6@TransBusAd@2|

; 185  : 
; 186  :     switch (*pAddressSpace) {

  00434	e59d3058	 ldr         r3, [sp, #0x58]
  00438	e5933000	 ldr         r3, [r3]
  0043c	e58d3030	 str         r3, [sp, #0x30]
  00440	e59d3030	 ldr         r3, [sp, #0x30]
  00444	e3530000	 cmp         r3, #0
  00448	0a000003	 beq         |$LN3@TransBusAd@2|
  0044c	e59d3030	 ldr         r3, [sp, #0x30]
  00450	e3530001	 cmp         r3, #1
  00454	0a000035	 beq         |$LN1@TransBusAd@2|
  00458	ea000039	 b           |$LN4@TransBusAd@2|
  0045c		 |$LN3@TransBusAd@2|

; 187  :     case 0:        
; 188  :         // Memory-mapped I/O, get statically-mapped virtual address
; 189  :         // for translated physical address
; 190  :         address = phAddress.QuadPart & ~(PAGE_SIZE - 1);

  0045c	e3e03b0d	 mvn         r3, #0xD, 22
  00460	e22330fb	 eor         r3, r3, #0xFB
  00464	e5933000	 ldr         r3, [r3]
  00468	e2433001	 sub         r3, r3, #1
  0046c	e1e03003	 mvn         r3, r3
  00470	e58d3034	 str         r3, [sp, #0x34]
  00474	e59d2034	 ldr         r2, [sp, #0x34]
  00478	e59d3034	 ldr         r3, [sp, #0x34]
  0047c	e1a01fc3	 mov         r1, r3, asr #31
  00480	e59d3010	 ldr         r3, [sp, #0x10]
  00484	e0032002	 and         r2, r3, r2
  00488	e59d3014	 ldr         r3, [sp, #0x14]
  0048c	e0033001	 and         r3, r3, r1
  00490	e58d2018	 str         r2, [sp, #0x18]
  00494	e58d301c	 str         r3, [sp, #0x1C]

; 191  :         size = length + (phAddress.LowPart & (PAGE_SIZE - 1));

  00498	e3e03b0d	 mvn         r3, #0xD, 22
  0049c	e22330fb	 eor         r3, r3, #0xFB
  004a0	e5933000	 ldr         r3, [r3]
  004a4	e2432001	 sub         r2, r3, #1
  004a8	e59d3010	 ldr         r3, [sp, #0x10]
  004ac	e0032002	 and         r2, r3, r2
  004b0	e59d3054	 ldr         r3, [sp, #0x54]
  004b4	e0833002	 add         r3, r3, r2
  004b8	e58d300c	 str         r3, [sp, #0xC]

; 192  :         *ppAddress = CreateStaticMapping((UINT32)(address >> 8), size);

  004bc	e59d100c	 ldr         r1, [sp, #0xC]
  004c0	e59d2018	 ldr         r2, [sp, #0x18]
  004c4	e59d301c	 ldr         r3, [sp, #0x1C]
  004c8	e1a02422	 mov         r2, r2, lsr #8
  004cc	e1a03c03	 mov         r3, r3, lsl #24
  004d0	e1830002	 orr         r0, r3, r2
  004d4	eb000000	 bl          CreateStaticMapping
  004d8	e58d0038	 str         r0, [sp, #0x38]
  004dc	e59d2038	 ldr         r2, [sp, #0x38]
  004e0	e59d305c	 ldr         r3, [sp, #0x5C]
  004e4	e5832000	 str         r2, [r3]

; 193  :         if (*ppAddress != NULL) {

  004e8	e59d305c	 ldr         r3, [sp, #0x5C]
  004ec	e5933000	 ldr         r3, [r3]
  004f0	e3530000	 cmp         r3, #0
  004f4	0a00000c	 beq         |$LN2@TransBusAd@2|

; 194  :             rc = TRUE;

  004f8	e3a03001	 mov         r3, #1
  004fc	e58d3008	 str         r3, [sp, #8]

; 195  :             // Adjust with offset from page
; 196  :             (UINT32)*ppAddress += phAddress.LowPart & (PAGE_SIZE - 1);

  00500	e3e03b0d	 mvn         r3, #0xD, 22
  00504	e22330fb	 eor         r3, r3, #0xFB
  00508	e5933000	 ldr         r3, [r3]
  0050c	e2432001	 sub         r2, r3, #1
  00510	e59d3010	 ldr         r3, [sp, #0x10]
  00514	e0032002	 and         r2, r3, r2
  00518	e59d305c	 ldr         r3, [sp, #0x5C]
  0051c	e5933000	 ldr         r3, [r3]
  00520	e0832002	 add         r2, r3, r2
  00524	e59d305c	 ldr         r3, [sp, #0x5C]
  00528	e5832000	 str         r2, [r3]
  0052c		 |$LN2@TransBusAd@2|

; 197  :         }
; 198  :         break;

  0052c	ea000004	 b           |$LN4@TransBusAd@2|
  00530		 |$LN1@TransBusAd@2|

; 199  :     case 1:        
; 200  :         // I/O port
; 201  :         *ppAddress = (VOID*)phAddress.LowPart;

  00530	e59d2010	 ldr         r2, [sp, #0x10]
  00534	e59d305c	 ldr         r3, [sp, #0x5C]
  00538	e5832000	 str         r2, [r3]

; 202  :         rc = TRUE;

  0053c	e3a03001	 mov         r3, #1
  00540	e58d3008	 str         r3, [sp, #8]
  00544		 |$LN4@TransBusAd@2|
  00544		 |$cleanUp$42643|

; 203  :         break;
; 204  :     }
; 205  : 
; 206  : cleanUp:
; 207  :     return rc;

  00544	e59d3008	 ldr         r3, [sp, #8]
  00548	e58d3028	 str         r3, [sp, #0x28]

; 208  : }

  0054c	e59d0028	 ldr         r0, [sp, #0x28]
  00550	e28dd03c	 add         sp, sp, #0x3C
  00554	e89d6000	 ldmia       sp, {sp, lr}
  00558	e12fff1e	 bx          lr
  0055c		 |$M42704|

			 ENDP  ; |TransBusAddrToStatic|

	END
