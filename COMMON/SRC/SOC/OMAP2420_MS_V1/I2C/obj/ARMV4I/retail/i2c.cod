; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\I2C\i2c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1M@EENNDIOJ@?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.data|, DATA
	 COMMON	|DEVICE_IFC_I2C_GUID|, 0x10


  00000			 AREA	 |.rdata|, DATA, READONLY
|g_deviceRegParams| DCD |??_C@_1M@EENNDIOJ@?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x4
	DCD	0x4
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@EENNDIOJ@?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?$AA@| DCB "I", 0x0, "n", 0x0
	DCB	"d", 0x0, "e", 0x0, "x", 0x0, 0x0, 0x0	; `string'
	EXPORT	|GetCurrentProcessId|
	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43100| DCD	|$LN5@GetCurrent|
	DCD	0x40000b02
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M43097|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00008	e3a0000c	 mov         r0, #0xC
  0000c	eb000000	 bl          __GetUserKData
  00010	e58d0004	 str         r0, [sp, #4]
  00014	e59d3004	 ldr         r3, [sp, #4]
  00018	e58d3000	 str         r3, [sp]

; 375  : }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd008	 add         sp, sp, #8
  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M43098|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|I2C_Deinit|
	IMPORT	|LocalFree|
	IMPORT	|CloseHandle|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\i2c\i2c.c

  00000			 AREA	 |.pdata|, PDATA
|$T43108| DCD	|$LN8@I2C_Deinit|
	DCD	0x40002604
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Deinit| PROC

; 144  : {

  00000		 |$LN8@I2C_Deinit|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43105|

; 145  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 146  :     I2C_DEVICE *pDevice = (I2C_DEVICE*)context;

  00018	e59d3014	 ldr         r3, [sp, #0x14]
  0001c	e58d3000	 str         r3, [sp]

; 147  : 
; 148  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (L"+I2C_Deinit(0x%08x)\r\n", context));
; 149  : 
; 150  :     // Check if we get correct context
; 151  :     if (pDevice == NULL || pDevice->cookie != I2C_DEVICE_COOKIE) 

  00020	e59d3000	 ldr         r3, [sp]
  00024	e3530000	 cmp         r3, #0
  00028	0a000004	 beq         |$LN2@I2C_Deinit|
  0002c	e59d3000	 ldr         r3, [sp]
  00030	e5932000	 ldr         r2, [r3]
  00034	e59f3058	 ldr         r3, [pc, #0x58]
  00038	e1520003	 cmp         r2, r3
  0003c	0a000000	 beq         |$LN3@I2C_Deinit|
  00040		 |$LN2@I2C_Deinit|

; 152  :     {
; 153  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: I2C_Deinit: "
; 154  :             L"Incorrect context paramer\r\n"
; 155  :         ));
; 156  :         goto cleanUp;

  00040	ea00000d	 b           |$cleanUp$42864|
  00044		 |$LN3@I2C_Deinit|

; 157  :     }
; 158  : 
; 159  :     // Check for open instances
; 160  :     if (pDevice->instances > 0) 

  00044	e59d3000	 ldr         r3, [sp]
  00048	e2833008	 add         r3, r3, #8
  0004c	e5933000	 ldr         r3, [r3]
  00050	e3530000	 cmp         r3, #0
  00054	da000000	 ble         |$LN1@I2C_Deinit|

; 161  :     {
; 162  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: I2C_Deinit: "
; 163  :             L"Deinit with active instance (%d instances active)\r\n",
; 164  :             pDevice->instances
; 165  :         ));
; 166  :         goto cleanUp;

  00058	ea000007	 b           |$cleanUp$42864|
  0005c		 |$LN1@I2C_Deinit|

; 167  :     }
; 168  : 
; 169  :     // Delete mutex handle
; 170  :     CloseHandle(pDevice->hMutex);

  0005c	e59d3000	 ldr         r3, [sp]
  00060	e283300c	 add         r3, r3, #0xC
  00064	e5930000	 ldr         r0, [r3]
  00068	eb000000	 bl          CloseHandle

; 171  : 
; 172  :     // Free device structure
; 173  :     LocalFree(pDevice);

  0006c	e59d0000	 ldr         r0, [sp]
  00070	eb000000	 bl          LocalFree

; 174  : 
; 175  :     // Done
; 176  :     rc = TRUE;

  00074	e3a03001	 mov         r3, #1
  00078	e58d3004	 str         r3, [sp, #4]
  0007c		 |$cleanUp$42864|

; 177  : 
; 178  : cleanUp:
; 179  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (L"-I2C_Deinit(rc = %d)\r\n", rc));
; 180  :     return rc;

  0007c	e59d3004	 ldr         r3, [sp, #4]
  00080	e58d3008	 str         r3, [sp, #8]

; 181  : }

  00084	e59d0008	 ldr         r0, [sp, #8]
  00088	e28dd00c	 add         sp, sp, #0xC
  0008c	e89d6000	 ldmia       sp, {sp, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN9@I2C_Deinit|
  00094		 |$LN10@I2C_Deinit|
  00094	69326344	 DCD         0x69326344
  00098		 |$M43106|

			 ENDP  ; |I2C_Deinit|

	EXPORT	|I2C_Open|
	IMPORT	|InterlockedIncrement|
	IMPORT	|LocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T43118| DCD	|$LN8@I2C_Open|
	DCD	0x40003104
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Open| PROC

; 190  : {

  00000		 |$LN8@I2C_Open|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M43115|

; 191  :     DWORD rc = (DWORD)NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 192  :     I2C_DEVICE *pDevice = (I2C_DEVICE*)context;

  00018	e59d301c	 ldr         r3, [sp, #0x1C]
  0001c	e58d3000	 str         r3, [sp]

; 193  :     I2C_INSTANCE *pInstance = NULL;

  00020	e3a03000	 mov         r3, #0
  00024	e58d3008	 str         r3, [sp, #8]

; 194  : 
; 195  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (
; 196  :         L"+I2C_Open(0x%08x, 0x%08x, 0x%08x\r\n", context, accessCode, shareMode
; 197  :     ));
; 198  : 
; 199  :     // Check if we get correct context
; 200  :     if (pDevice == NULL || pDevice->cookie != I2C_DEVICE_COOKIE) {

  00028	e59d3000	 ldr         r3, [sp]
  0002c	e3530000	 cmp         r3, #0
  00030	0a000004	 beq         |$LN2@I2C_Open|
  00034	e59d3000	 ldr         r3, [sp]
  00038	e5932000	 ldr         r2, [r3]
  0003c	e59f307c	 ldr         r3, [pc, #0x7C]
  00040	e1520003	 cmp         r2, r3
  00044	0a000000	 beq         |$LN3@I2C_Open|
  00048		 |$LN2@I2C_Open|

; 201  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: I2C_Open: "
; 202  :             L"Incorrect context parameter\r\n"
; 203  :         ));
; 204  :         goto cleanUp;

  00048	ea000015	 b           |$cleanUp$42888|
  0004c		 |$LN3@I2C_Open|

; 205  :     }
; 206  : 
; 207  :     // Create device structure
; 208  :     pInstance = (I2C_INSTANCE*)LocalAlloc(LPTR, sizeof(I2C_INSTANCE));

  0004c	e3a01010	 mov         r1, #0x10
  00050	e3a00040	 mov         r0, #0x40
  00054	eb000000	 bl          LocalAlloc
  00058	e58d0010	 str         r0, [sp, #0x10]
  0005c	e59d3010	 ldr         r3, [sp, #0x10]
  00060	e58d3008	 str         r3, [sp, #8]

; 209  :     if (pInstance == NULL) {

  00064	e59d3008	 ldr         r3, [sp, #8]
  00068	e3530000	 cmp         r3, #0
  0006c	1a000000	 bne         |$LN1@I2C_Open|

; 210  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: I2C_Open: "
; 211  :             L"Failed allocate I2C instance structure\r\n"
; 212  :         ));
; 213  :         goto cleanUp;

  00070	ea00000b	 b           |$cleanUp$42888|
  00074		 |$LN1@I2C_Open|

; 214  :     }
; 215  : 
; 216  :     // Set cookie
; 217  :     pInstance->cookie = I2C_INSTANCE_COOKIE;

  00074	e59d2008	 ldr         r2, [sp, #8]
  00078	e59f303c	 ldr         r3, [pc, #0x3C]
  0007c	e5823000	 str         r3, [r2]

; 218  : 
; 219  :     // Save device reference
; 220  :     pInstance->pDevice = pDevice;

  00080	e59d3008	 ldr         r3, [sp, #8]
  00084	e2832004	 add         r2, r3, #4
  00088	e59d3000	 ldr         r3, [sp]
  0008c	e5823000	 str         r3, [r2]

; 221  : 
; 222  :     // Increment number of open instances
; 223  :     InterlockedIncrement(&pDevice->instances);

  00090	e59d3000	 ldr         r3, [sp]
  00094	e2830008	 add         r0, r3, #8
  00098	eb000000	 bl          InterlockedIncrement

; 224  : 
; 225  :     // sanity check number of instances
; 226  :     ASSERT(pDevice->instances > 0);
; 227  : 
; 228  :     // Done...
; 229  :     rc = (DWORD)pInstance;

  0009c	e59d3008	 ldr         r3, [sp, #8]
  000a0	e58d3004	 str         r3, [sp, #4]
  000a4		 |$cleanUp$42888|

; 230  : 
; 231  : cleanUp:
; 232  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (L"-I2C_Open(rc = 0x%08x)\r\n", rc));
; 233  :     return rc;

  000a4	e59d3004	 ldr         r3, [sp, #4]
  000a8	e58d300c	 str         r3, [sp, #0xC]

; 234  : }

  000ac	e59d000c	 ldr         r0, [sp, #0xC]
  000b0	e28dd014	 add         sp, sp, #0x14
  000b4	e89d6000	 ldmia       sp, {sp, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN9@I2C_Open|
  000bc		 |$LN10@I2C_Open|
  000bc	69326349	 DCD         0x69326349
  000c0		 |$LN11@I2C_Open|
  000c0	69326344	 DCD         0x69326344
  000c4		 |$M43116|

			 ENDP  ; |I2C_Open|

	EXPORT	|I2C_Close|
	IMPORT	|InterlockedDecrement|

  00000			 AREA	 |.pdata|, PDATA
|$T43129| DCD	|$LN7@I2C_Close|
	DCD	0x40002304
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Close| PROC

; 243  : {

  00000		 |$LN7@I2C_Close|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M43126|

; 244  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 245  :     I2C_DEVICE *pDevice;
; 246  :     I2C_INSTANCE *pInstance = (I2C_INSTANCE*)context;

  00018	e59d3018	 ldr         r3, [sp, #0x18]
  0001c	e58d3008	 str         r3, [sp, #8]

; 247  : 
; 248  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (L"+I2C_Close(0x%08x)\r\n", context));
; 249  : 
; 250  :     // Check if we get correct context
; 251  :     if (pInstance == NULL || pInstance->cookie != I2C_INSTANCE_COOKIE) {

  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e3530000	 cmp         r3, #0
  00028	0a000004	 beq         |$LN1@I2C_Close|
  0002c	e59d3008	 ldr         r3, [sp, #8]
  00030	e5932000	 ldr         r2, [r3]
  00034	e59f304c	 ldr         r3, [pc, #0x4C]
  00038	e1520003	 cmp         r2, r3
  0003c	0a000000	 beq         |$LN2@I2C_Close|
  00040		 |$LN1@I2C_Close|

; 252  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: I2C_Close: "
; 253  :             L"Incorrect context paramer\r\n"
; 254  :         ));
; 255  :         goto cleanUp;

  00040	ea00000a	 b           |$cleanUp$42910|
  00044		 |$LN2@I2C_Close|

; 256  :     }
; 257  : 
; 258  :     // Get device context
; 259  :     pDevice = pInstance->pDevice;

  00044	e59d3008	 ldr         r3, [sp, #8]
  00048	e2833004	 add         r3, r3, #4
  0004c	e5933000	 ldr         r3, [r3]
  00050	e58d3000	 str         r3, [sp]

; 260  : 
; 261  :     // sanity check number of instances
; 262  :     ASSERT(pDevice->instances > 0);
; 263  : 
; 264  :     // Decrement number of open instances
; 265  :     InterlockedDecrement(&pDevice->instances);

  00054	e59d3000	 ldr         r3, [sp]
  00058	e2830008	 add         r0, r3, #8
  0005c	eb000000	 bl          InterlockedDecrement

; 266  : 
; 267  :     // Free instance structure
; 268  :     LocalFree(pInstance);

  00060	e59d0008	 ldr         r0, [sp, #8]
  00064	eb000000	 bl          LocalFree

; 269  : 
; 270  :     // Done...
; 271  :     rc = TRUE;

  00068	e3a03001	 mov         r3, #1
  0006c	e58d3004	 str         r3, [sp, #4]
  00070		 |$cleanUp$42910|

; 272  : 
; 273  : cleanUp:
; 274  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (L"-I2C_Close(rc = %d)\r\n", rc));
; 275  :     return rc;

  00070	e59d3004	 ldr         r3, [sp, #4]
  00074	e58d300c	 str         r3, [sp, #0xC]

; 276  : }

  00078	e59d000c	 ldr         r0, [sp, #0xC]
  0007c	e28dd010	 add         sp, sp, #0x10
  00080	e89d6000	 ldmia       sp, {sp, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN8@I2C_Close|
  00088		 |$LN9@I2C_Close|
  00088	69326349	 DCD         0x69326349
  0008c		 |$M43127|

			 ENDP  ; |I2C_Close|

	EXPORT	|I2C_Transact|
	IMPORT	|ReleaseMutex|
	IMPORT	|KernelIoControl|
	IMPORT	|WaitForSingleObject|

  00000			 AREA	 |.pdata|, PDATA
|$T43141| DCD	|$LN10@I2C_Transa|
	DCD	0x40004904
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Transact| PROC

; 284  : {

  00000		 |$LN10@I2C_Transa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd030	 sub         sp, sp, #0x30
  00010		 |$M43138|

; 285  :     I2C_DEVICE *pDevice;
; 286  :     I2C_INSTANCE *pInstance = (I2C_INSTANCE*)context;

  00010	e59d3038	 ldr         r3, [sp, #0x38]
  00014	e58d301c	 str         r3, [sp, #0x1C]

; 287  :     BOOL rc = FALSE;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d300c	 str         r3, [sp, #0xC]

; 288  :     DWORD dwKernelRet;
; 289  :     DWORD dwParam[2];
; 290  : 
; 291  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (
; 292  :         L"+I2C_Transact(0x%08x, 0x%08x\r\n", context, pTrans
; 293  :         ));
; 294  : 
; 295  :     // Check if we get correct context
; 296  :     if (pInstance == NULL || pInstance->cookie != I2C_INSTANCE_COOKIE)

  00020	e59d301c	 ldr         r3, [sp, #0x1C]
  00024	e3530000	 cmp         r3, #0
  00028	0a000004	 beq         |$LN4@I2C_Transa|
  0002c	e59d301c	 ldr         r3, [sp, #0x1C]
  00030	e5932000	 ldr         r2, [r3]
  00034	e59f30e4	 ldr         r3, [pc, #0xE4]
  00038	e1520003	 cmp         r2, r3
  0003c	0a000000	 beq         |$LN5@I2C_Transa|
  00040		 |$LN4@I2C_Transa|

; 297  :     {
; 298  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: I2C_Read: "
; 299  :             L"Incorrect context paramer\r\n"));
; 300  :         goto clean;

  00040	ea00002f	 b           |$clean$42930|
  00044		 |$LN5@I2C_Transa|

; 301  :     }
; 302  : 
; 303  :     pDevice = pInstance->pDevice;

  00044	e59d301c	 ldr         r3, [sp, #0x1C]
  00048	e2833004	 add         r3, r3, #4
  0004c	e5933000	 ldr         r3, [r3]
  00050	e58d3008	 str         r3, [sp, #8]

; 304  : 
; 305  :     WaitForSingleObject(pDevice->hMutex,INFINITE);

  00054	e3e01000	 mvn         r1, #0
  00058	e59d3008	 ldr         r3, [sp, #8]
  0005c	e283300c	 add         r3, r3, #0xC
  00060	e5930000	 ldr         r0, [r3]
  00064	eb000000	 bl          WaitForSingleObject

; 306  : 
; 307  :     /* ok. we are the only ones doing a transaction with the kernel now 
; 308  :        besides the kernel itself */
; 309  :     dwParam[0] = pInstance->address;

  00068	e59d301c	 ldr         r3, [sp, #0x1C]
  0006c	e283300c	 add         r3, r3, #0xC
  00070	e5933000	 ldr         r3, [r3]
  00074	e58d3014	 str         r3, [sp, #0x14]

; 310  :     dwParam[1] = pInstance->addrSize;

  00078	e59d301c	 ldr         r3, [sp, #0x1C]
  0007c	e2833008	 add         r3, r3, #8
  00080	e5933000	 ldr         r3, [r3]
  00084	e58d3018	 str         r3, [sp, #0x18]

; 311  :     dwKernelRet = 0;

  00088	e3a03000	 mov         r3, #0
  0008c	e58d3010	 str         r3, [sp, #0x10]

; 312  :     if (!KernelIoControl(IOCTL_KERNELI2C_SUBMIT,
; 313  :                          &dwParam,
; 314  :                          sizeof(DWORD)*2,
; 315  :                          pTrans,
; 316  :                          sizeof(I2CTRANS),
; 317  :                          &dwKernelRet))

  00090	e28d3010	 add         r3, sp, #0x10
  00094	e58d3004	 str         r3, [sp, #4]
  00098	e3a03e17	 mov         r3, #0x17, 28
  0009c	e58d3000	 str         r3, [sp]
  000a0	e59d303c	 ldr         r3, [sp, #0x3C]
  000a4	e3a02008	 mov         r2, #8
  000a8	e28d1014	 add         r1, sp, #0x14
  000ac	e59f0068	 ldr         r0, [pc, #0x68]
  000b0	eb000000	 bl          KernelIoControl
  000b4	e58d002c	 str         r0, [sp, #0x2C]
  000b8	e59d302c	 ldr         r3, [sp, #0x2C]
  000bc	e3530000	 cmp         r3, #0
  000c0	1a000001	 bne         |$LN3@I2C_Transa|

; 318  :         dwKernelRet = 0;

  000c4	e3a03000	 mov         r3, #0
  000c8	e58d3010	 str         r3, [sp, #0x10]
  000cc		 |$LN3@I2C_Transa|

; 319  :     if (dwKernelRet)

  000cc	e59d3010	 ldr         r3, [sp, #0x10]
  000d0	e3530000	 cmp         r3, #0
  000d4	0a000002	 beq         |$LN2@I2C_Transa|

; 320  :     {
; 321  :         /* dwKernelRet holds the size of the data that came back! */
; 322  :         rc = TRUE;

  000d8	e3a03001	 mov         r3, #1
  000dc	e58d300c	 str         r3, [sp, #0xC]

; 323  :     }
; 324  :     else

  000e0	ea000003	 b           |$LN1@I2C_Transa|
  000e4		 |$LN2@I2C_Transa|

; 325  :     {
; 326  :         DEBUGMSG(ZONE_ERROR, (L"***I2C ERROR: "
; 327  :             L"KernelIoControl returned invalid I2C transaction return size.\r\n"));
; 328  :         pTrans->mErrorCode = (DWORD)-1;

  000e4	e59d303c	 ldr         r3, [sp, #0x3C]
  000e8	e283206c	 add         r2, r3, #0x6C
  000ec	e3e03000	 mvn         r3, #0
  000f0	e5823000	 str         r3, [r2]
  000f4		 |$LN1@I2C_Transa|

; 329  :     }
; 330  : 
; 331  :     ReleaseMutex(pDevice->hMutex);

  000f4	e59d3008	 ldr         r3, [sp, #8]
  000f8	e283300c	 add         r3, r3, #0xC
  000fc	e5930000	 ldr         r0, [r3]
  00100	eb000000	 bl          ReleaseMutex
  00104		 |$clean$42930|

; 332  : 
; 333  : clean:
; 334  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (L"-I2C_Transact()\r\n"));
; 335  :     return rc;

  00104	e59d300c	 ldr         r3, [sp, #0xC]
  00108	e58d3028	 str         r3, [sp, #0x28]

; 336  : }

  0010c	e59d0028	 ldr         r0, [sp, #0x28]
  00110	e28dd030	 add         sp, sp, #0x30
  00114	e89d6000	 ldmia       sp, {sp, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN11@I2C_Transa|
  0011c		 |$LN12@I2C_Transa|
  0011c	00220408	 DCD         0x220408
  00120		 |$LN13@I2C_Transa|
  00120	69326349	 DCD         0x69326349
  00124		 |$M43139|

			 ENDP  ; |I2C_Transact|

	EXPORT	|I2C_Read|
	IMPORT	|SetLastError|

  00000			 AREA	 |.pdata|, PDATA
|$T43152| DCD	|$LN5@I2C_Read|
	DCD	0x40000c04
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Read| PROC

; 339  : {

  00000		 |$LN5@I2C_Read|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43149|

; 340  :     SetLastError(-1);

  00010	e3e00000	 mvn         r0, #0
  00014	eb000000	 bl          SetLastError

; 341  :     return (DWORD)-1;

  00018	e3e03000	 mvn         r3, #0
  0001c	e58d3000	 str         r3, [sp]

; 342  : }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43150|

			 ENDP  ; |I2C_Read|

	EXPORT	|I2C_Write|

  00000			 AREA	 |.pdata|, PDATA
|$T43160| DCD	|$LN5@I2C_Write|
	DCD	0x40000c04
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Write| PROC

; 345  : {

  00000		 |$LN5@I2C_Write|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43157|

; 346  :     SetLastError(-1);

  00010	e3e00000	 mvn         r0, #0
  00014	eb000000	 bl          SetLastError

; 347  :     return (DWORD)-1;

  00018	e3e03000	 mvn         r3, #0
  0001c	e58d3000	 str         r3, [sp]

; 348  : }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43158|

			 ENDP  ; |I2C_Write|

	EXPORT	|I2C_PowerUp|

  00000			 AREA	 |.pdata|, PDATA
|$T43167| DCD	|$LN5@I2C_PowerU|
	DCD	0x40000503
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_PowerUp| PROC

; 464  : {

  00000		 |$LN5@I2C_PowerU|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43164|

; 465  : }

  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M43165|

			 ENDP  ; |I2C_PowerUp|

	EXPORT	|I2C_PowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T43174| DCD	|$LN5@I2C_PowerD|
	DCD	0x40000503
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_PowerDown| PROC

; 474  : {

  00000		 |$LN5@I2C_PowerD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43171|

; 475  : }

  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M43172|

			 ENDP  ; |I2C_PowerDown|

	EXPORT	|I2C_SetSlaveAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T43182| DCD	|$LN8@I2C_SetSla|
	DCD	0x40002904
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_SetSlaveAddress| PROC

; 480  : {

  00000		 |$LN8@I2C_SetSla|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43179|

; 481  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 482  :     I2C_INSTANCE *pInstance = (I2C_INSTANCE*)context;

  00018	e59d3014	 ldr         r3, [sp, #0x14]
  0001c	e58d3004	 str         r3, [sp, #4]

; 483  : 
; 484  :     // Check if we get correct context
; 485  :     if (pInstance == NULL || pInstance->cookie != I2C_INSTANCE_COOKIE) {

  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e3530000	 cmp         r3, #0
  00028	0a000004	 beq         |$LN2@I2C_SetSla|
  0002c	e59d3004	 ldr         r3, [sp, #4]
  00030	e5932000	 ldr         r2, [r3]
  00034	e59f3064	 ldr         r3, [pc, #0x64]
  00038	e1520003	 cmp         r2, r3
  0003c	0a000000	 beq         |$LN3@I2C_SetSla|
  00040		 |$LN2@I2C_SetSla|

; 486  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: I2C_SetSlaveAddress: "
; 487  :             L"Incorrect context paramer\r\n"
; 488  :         ));
; 489  :         goto cleanUp;

  00040	ea000010	 b           |$cleanUp$43049|
  00044		 |$LN3@I2C_SetSla|

; 490  :     }
; 491  : 
; 492  :     if (size != 7 && size != 10) {

  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e3530007	 cmp         r3, #7
  0004c	0a000003	 beq         |$LN1@I2C_SetSla|
  00050	e59d3018	 ldr         r3, [sp, #0x18]
  00054	e353000a	 cmp         r3, #0xA
  00058	0a000000	 beq         |$LN1@I2C_SetSla|

; 493  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: I2C_SetSlaveAddress: "
; 494  :             L"Incorrect address size %d (valid values are 7 & 10 bits\r\n", size
; 495  :         ));
; 496  :         goto cleanUp;

  0005c	ea000009	 b           |$cleanUp$43049|
  00060		 |$LN1@I2C_SetSla|

; 497  :     }
; 498  :     pInstance->addrSize = size;

  00060	e59d3004	 ldr         r3, [sp, #4]
  00064	e2832008	 add         r2, r3, #8
  00068	e59d3018	 ldr         r3, [sp, #0x18]
  0006c	e5823000	 str         r3, [r2]

; 499  :     pInstance->address = address;

  00070	e59d3004	 ldr         r3, [sp, #4]
  00074	e283200c	 add         r2, r3, #0xC
  00078	e59d301c	 ldr         r3, [sp, #0x1C]
  0007c	e5823000	 str         r3, [r2]

; 500  : 
; 501  :     rc = TRUE;

  00080	e3a03001	 mov         r3, #1
  00084	e58d3000	 str         r3, [sp]
  00088		 |$cleanUp$43049|

; 502  : 
; 503  : cleanUp:
; 504  :     return rc;

  00088	e59d3000	 ldr         r3, [sp]
  0008c	e58d3008	 str         r3, [sp, #8]

; 505  : }

  00090	e59d0008	 ldr         r0, [sp, #8]
  00094	e28dd00c	 add         sp, sp, #0xC
  00098	e89d6000	 ldmia       sp, {sp, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN9@I2C_SetSla|
  000a0		 |$LN10@I2C_SetSla|
  000a0	69326349	 DCD         0x69326349
  000a4		 |$M43180|

			 ENDP  ; |I2C_SetSlaveAddress|

	EXPORT	|??_C@_1BC@OALLFACJ@?$AAI?$AA2?$AAC?$AAM?$AAU?$AAT?$AAE?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|I2C_Init|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|CreateMutexW|

  00000			 AREA	 |.pdata|, PDATA
|$T43192| DCD	|$LN9@I2C_Init|
	DCD	0x40003e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@OALLFACJ@?$AAI?$AA2?$AAC?$AAM?$AAU?$AAT?$AAE?$AAX?$AA?$AA@| DCB "I"
	DCB	0x0, "2", 0x0, "C", 0x0, "M", 0x0, "U", 0x0, "T", 0x0, "E"
	DCB	0x0, "X", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odsp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_Init| PROC

; 88   : {

  00000		 |$LN9@I2C_Init|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd018	 sub         sp, sp, #0x18
  00010		 |$M43189|

; 89   :     DWORD rc = (DWORD)NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 90   :     I2C_DEVICE *pDevice = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3000	 str         r3, [sp]

; 91   : 
; 92   :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (
; 93   :         L"+I2C_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 94   :     ));
; 95   : 
; 96   :     // Create device structure
; 97   :     pDevice = (I2C_DEVICE *)LocalAlloc(LPTR, sizeof(I2C_DEVICE));

  00020	e3a01014	 mov         r1, #0x14
  00024	e3a00040	 mov         r0, #0x40
  00028	eb000000	 bl          LocalAlloc
  0002c	e58d000c	 str         r0, [sp, #0xC]
  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e58d3000	 str         r3, [sp]

; 98   :     if (pDevice == NULL) {

  00038	e59d3000	 ldr         r3, [sp]
  0003c	e3530000	 cmp         r3, #0
  00040	1a000000	 bne         |$LN4@I2C_Init|

; 99   :         DEBUGMSG(ZONE_ERROR, (L"ERROR: I2C_Init: "
; 100  :             L"Failed allocate I2C controller structure\r\n"
; 101  :         ));
; 102  :         goto cleanUp;

  00044	ea00001d	 b           |$cleanUp$42842|
  00048		 |$LN4@I2C_Init|

; 103  :     }
; 104  : 
; 105  :     // Set cookie
; 106  :     pDevice->cookie = I2C_DEVICE_COOKIE;

  00048	e59d2000	 ldr         r2, [sp]
  0004c	e59f30a0	 ldr         r3, [pc, #0xA0]
  00050	e5823000	 str         r3, [r2]

; 107  : 
; 108  :     // Initalize mutex - used to support priority inversion accross different processes
; 109  :     pDevice->hMutex = CreateMutex(NULL,FALSE,TEXT("I2CMUTEX"));

  00054	e59f2094	 ldr         r2, [pc, #0x94]
  00058	e3a01000	 mov         r1, #0
  0005c	e3a00000	 mov         r0, #0
  00060	eb000000	 bl          CreateMutexW
  00064	e58d0010	 str         r0, [sp, #0x10]
  00068	e59d3000	 ldr         r3, [sp]
  0006c	e283200c	 add         r2, r3, #0xC
  00070	e59d3010	 ldr         r3, [sp, #0x10]
  00074	e5823000	 str         r3, [r2]

; 110  :     if (!pDevice->hMutex)

  00078	e59d3000	 ldr         r3, [sp]
  0007c	e283300c	 add         r3, r3, #0xC
  00080	e5933000	 ldr         r3, [r3]
  00084	e3530000	 cmp         r3, #0
  00088	1a000000	 bne         |$LN3@I2C_Init|

; 111  :     {
; 112  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: I2C_Init: "
; 113  :             L"Failed creation of I2C mutex handle\r\n"
; 114  :         ));
; 115  :         goto cleanUp;

  0008c	ea00000b	 b           |$cleanUp$42842|
  00090		 |$LN3@I2C_Init|

; 116  :     }
; 117  : 
; 118  :     // Read device parameters
; 119  :     if (GetDeviceRegistryParams(
; 120  :         szContext, pDevice, dimof(g_deviceRegParams), g_deviceRegParams
; 121  :     ) != ERROR_SUCCESS) {

  00090	e59f3054	 ldr         r3, [pc, #0x54]
  00094	e3a02001	 mov         r2, #1
  00098	e59d1000	 ldr         r1, [sp]
  0009c	e59d0020	 ldr         r0, [sp, #0x20]
  000a0	eb000000	 bl          GetDeviceRegistryParams
  000a4	e58d0014	 str         r0, [sp, #0x14]
  000a8	e59d3014	 ldr         r3, [sp, #0x14]
  000ac	e3530000	 cmp         r3, #0
  000b0	0a000000	 beq         |$LN2@I2C_Init|

; 122  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: I2C_Init: "
; 123  :             L"Failed read I2C driver registry parameters\r\n"
; 124  :         ));
; 125  :         goto cleanUp;

  000b4	ea000001	 b           |$cleanUp$42842|
  000b8		 |$LN2@I2C_Init|

; 126  :     }
; 127  :  
; 128  :     // Return non-null value
; 129  :     rc = (DWORD)pDevice;

  000b8	e59d3000	 ldr         r3, [sp]
  000bc	e58d3004	 str         r3, [sp, #4]
  000c0		 |$cleanUp$42842|

; 130  :     
; 131  : cleanUp:
; 132  :     if (rc == 0) I2C_Deinit((DWORD)pDevice);

  000c0	e59d3004	 ldr         r3, [sp, #4]
  000c4	e3530000	 cmp         r3, #0
  000c8	1a000001	 bne         |$LN1@I2C_Init|
  000cc	e59d0000	 ldr         r0, [sp]
  000d0	eb000000	 bl          I2C_Deinit
  000d4		 |$LN1@I2C_Init|

; 133  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (L"-I2C_Init(rc = %d\r\n", rc));
; 134  :     return rc;

  000d4	e59d3004	 ldr         r3, [sp, #4]
  000d8	e58d3008	 str         r3, [sp, #8]

; 135  : }

  000dc	e59d0008	 ldr         r0, [sp, #8]
  000e0	e28dd018	 add         sp, sp, #0x18
  000e4	e89d6000	 ldmia       sp, {sp, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$LN10@I2C_Init|
  000ec		 |$LN11@I2C_Init|
  000ec	00000000	 DCD         |g_deviceRegParams|
  000f0		 |$LN12@I2C_Init|
  000f0	00000000	 DCD         |??_C@_1BC@OALLFACJ@?$AAI?$AA2?$AAC?$AAM?$AAU?$AAT?$AAE?$AAX?$AA?$AA@|
  000f4		 |$LN13@I2C_Init|
  000f4	69326344	 DCD         0x69326344
  000f8		 |$M43190|

			 ENDP  ; |I2C_Init|

	EXPORT	|I2C_IOControl|
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|GetCallerProcess|
	IMPORT	|memcmp|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43208| DCD	|$LN28@I2C_IOCont|
	DCD	0x4000a604
; Function compile flags: /Odsp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\i2c\i2c.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2C_IOControl| PROC

; 359  : ) {

  00000		 |$LN28@I2C_IOCont|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0000c	e24dd040	 sub         sp, sp, #0x40
  00010		 |$M43205|

; 360  :     BOOL bRetVal = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3010	 str         r3, [sp, #0x10]

; 361  :     I2C_DEVICE *pDevice = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3000	 str         r3, [sp]

; 362  :     I2C_INSTANCE *pInstance = (I2C_INSTANCE*)context;

  00020	e59d304c	 ldr         r3, [sp, #0x4C]
  00024	e58d3004	 str         r3, [sp, #4]

; 363  :     DEVICE_IFC_I2C ifc;
; 364  :     I2C_SET_SLAVE_ADDRESS *pAddress;
; 365  :     I2CTRANS *pTrans;
; 366  : 
; 367  :     DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (
; 368  :         L"+I2C_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 369  :         context, dwCode, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 370  :     ));
; 371  : 
; 372  :     // Check if we get correct context
; 373  :     if (pInstance == NULL || pInstance->cookie != I2C_INSTANCE_COOKIE)

  00028	e59d3004	 ldr         r3, [sp, #4]
  0002c	e3530000	 cmp         r3, #0
  00030	0a000004	 beq         |$LN20@I2C_IOCont|
  00034	e59d3004	 ldr         r3, [sp, #4]
  00038	e5932000	 ldr         r2, [r3]
  0003c	e59f3250	 ldr         r3, [pc, #0x250]
  00040	e1520003	 cmp         r2, r3
  00044	0a000000	 beq         |$LN21@I2C_IOCont|
  00048		 |$LN20@I2C_IOCont|

; 374  :     {
; 375  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: I2C_IOControl: "
; 376  :             L"Incorrect context paramer\r\n" ));
; 377  :         goto clean;

  00048	ea000087	 b           |$clean$42986|
  0004c		 |$LN21@I2C_IOCont|

; 378  :     }
; 379  : 
; 380  :     //Get Device
; 381  :     pDevice = pInstance->pDevice;

  0004c	e59d3004	 ldr         r3, [sp, #4]
  00050	e2833004	 add         r3, r3, #4
  00054	e5933000	 ldr         r3, [r3]
  00058	e58d3000	 str         r3, [sp]

; 382  : 
; 383  :     switch (dwCode) {

  0005c	e59d3050	 ldr         r3, [sp, #0x50]
  00060	e58d3024	 str         r3, [sp, #0x24]
  00064	e59d2024	 ldr         r2, [sp, #0x24]
  00068	e3a03822	 mov         r3, #0x22, 16
  0006c	e3833b01	 orr         r3, r3, #1, 22
  00070	e1520003	 cmp         r2, r3
  00074	0a000009	 beq         |$LN17@I2C_IOCont|
  00078	e59d2024	 ldr         r2, [sp, #0x24]
  0007c	e3a03822	 mov         r3, #0x22, 16
  00080	e3833b02	 orr         r3, r3, #2, 22
  00084	e1520003	 cmp         r2, r3
  00088	0a000047	 beq         |$LN8@I2C_IOCont|
  0008c	e59d2024	 ldr         r2, [sp, #0x24]
  00090	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00094	e1520003	 cmp         r2, r3
  00098	0a00005f	 beq         |$LN4@I2C_IOCont|
  0009c	ea000072	 b           |$LN1@I2C_IOCont|
  000a0		 |$LN17@I2C_IOCont|

; 384  :     case IOCTL_DDK_GET_DRIVER_IFC:
; 385  :         // We can give interface only to our peer in device process
; 386  :         if (GetCurrentProcessId() != (DWORD)GetCallerProcess()) {

  000a0	e3a0000c	 mov         r0, #0xC
  000a4	eb000000	 bl          __GetUserKData
  000a8	e58d0028	 str         r0, [sp, #0x28]
  000ac	e59d4028	 ldr         r4, [sp, #0x28]
  000b0	eb000000	 bl          GetCallerProcess
  000b4	e58d002c	 str         r0, [sp, #0x2C]
  000b8	e59d302c	 ldr         r3, [sp, #0x2C]
  000bc	e1540003	 cmp         r4, r3
  000c0	0a000002	 beq         |$LN16@I2C_IOCont|

; 387  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: I2C_IOControl: "
; 388  :                 L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 389  :                 L"device process (caller process id 0x%08x)\r\n",
; 390  :                 GetCallerProcess()
; 391  :             ));
; 392  :             SetLastError(ERROR_ACCESS_DENIED);

  000c4	e3a00005	 mov         r0, #5
  000c8	eb000000	 bl          SetLastError

; 393  :             goto clean;

  000cc	ea000066	 b           |$clean$42986|
  000d0		 |$LN16@I2C_IOCont|

; 394  :         }
; 395  :         // Check input parameters
; 396  :         if (pInBuffer == NULL || inSize < sizeof(GUID)) {

  000d0	e59d3054	 ldr         r3, [sp, #0x54]
  000d4	e3530000	 cmp         r3, #0
  000d8	0a000002	 beq         |$LN14@I2C_IOCont|
  000dc	e59d3058	 ldr         r3, [sp, #0x58]
  000e0	e3530010	 cmp         r3, #0x10
  000e4	2a000002	 bcs         |$LN15@I2C_IOCont|
  000e8		 |$LN14@I2C_IOCont|

; 397  :             SetLastError(ERROR_INVALID_PARAMETER);

  000e8	e3a00057	 mov         r0, #0x57
  000ec	eb000000	 bl          SetLastError

; 398  :             break;

  000f0	ea00005d	 b           |$LN18@I2C_IOCont|
  000f4		 |$LN15@I2C_IOCont|

; 399  :         }
; 400  :         if (IsEqualGUID(pInBuffer, &DEVICE_IFC_I2C_GUID)) {

  000f4	e3a02010	 mov         r2, #0x10
  000f8	e59f118c	 ldr         r1, [pc, #0x18C]
  000fc	e59d0054	 ldr         r0, [sp, #0x54]
  00100	eb000000	 bl          memcmp
  00104	e58d0030	 str         r0, [sp, #0x30]
  00108	e59d3030	 ldr         r3, [sp, #0x30]
  0010c	e3530000	 cmp         r3, #0
  00110	1a000022	 bne         |$LN13@I2C_IOCont|

; 401  :             if (pOutSize != NULL) *pOutSize = sizeof(DEVICE_IFC_I2C);

  00114	e59d3064	 ldr         r3, [sp, #0x64]
  00118	e3530000	 cmp         r3, #0
  0011c	0a000002	 beq         |$LN12@I2C_IOCont|
  00120	e59d2064	 ldr         r2, [sp, #0x64]
  00124	e3a0300c	 mov         r3, #0xC
  00128	e5823000	 str         r3, [r2]
  0012c		 |$LN12@I2C_IOCont|

; 402  :             if (pOutBuffer == NULL || outSize < sizeof(DEVICE_IFC_I2C)) {

  0012c	e59d305c	 ldr         r3, [sp, #0x5C]
  00130	e3530000	 cmp         r3, #0
  00134	0a000002	 beq         |$LN10@I2C_IOCont|
  00138	e59d3060	 ldr         r3, [sp, #0x60]
  0013c	e353000c	 cmp         r3, #0xC
  00140	2a000002	 bcs         |$LN11@I2C_IOCont|
  00144		 |$LN10@I2C_IOCont|

; 403  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00144	e3a00057	 mov         r0, #0x57
  00148	eb000000	 bl          SetLastError

; 404  :                 break;

  0014c	ea000046	 b           |$LN18@I2C_IOCont|
  00150		 |$LN11@I2C_IOCont|

; 405  :             }
; 406  :             ifc.context = context;

  00150	e59d304c	 ldr         r3, [sp, #0x4C]
  00154	e58d3014	 str         r3, [sp, #0x14]

; 407  :             ifc.pfnSetSlaveAddress = I2C_SetSlaveAddress;

  00158	e59f3128	 ldr         r3, [pc, #0x128]
  0015c	e58d3018	 str         r3, [sp, #0x18]

; 408  :             ifc.pfnTransact = I2C_Transact;

  00160	e59f311c	 ldr         r3, [pc, #0x11C]
  00164	e58d301c	 str         r3, [sp, #0x1C]

; 409  :             if (!CeSafeCopyMemory(pOutBuffer, &ifc, sizeof(DEVICE_IFC_I2C))) {

  00168	e3a0200c	 mov         r2, #0xC
  0016c	e28d1014	 add         r1, sp, #0x14
  00170	e59d005c	 ldr         r0, [sp, #0x5C]
  00174	eb000000	 bl          CeSafeCopyMemory
  00178	e58d0034	 str         r0, [sp, #0x34]
  0017c	e59d3034	 ldr         r3, [sp, #0x34]
  00180	e3530000	 cmp         r3, #0
  00184	1a000002	 bne         |$LN9@I2C_IOCont|

; 410  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00188	e3a00057	 mov         r0, #0x57
  0018c	eb000000	 bl          SetLastError

; 411  :                 break;

  00190	ea000035	 b           |$LN18@I2C_IOCont|
  00194		 |$LN9@I2C_IOCont|

; 412  :             }
; 413  :             bRetVal = TRUE;

  00194	e3a03001	 mov         r3, #1
  00198	e58d3010	 str         r3, [sp, #0x10]

; 414  :             break;

  0019c	ea000032	 b           |$LN18@I2C_IOCont|
  001a0		 |$LN13@I2C_IOCont|

; 415  :         }
; 416  :         SetLastError(ERROR_INVALID_PARAMETER);

  001a0	e3a00057	 mov         r0, #0x57
  001a4	eb000000	 bl          SetLastError

; 417  :         break;

  001a8	ea00002f	 b           |$LN18@I2C_IOCont|
  001ac		 |$LN8@I2C_IOCont|

; 418  : 
; 419  :     case IOCTL_I2C_SET_SLAVE_ADDRESS:
; 420  :         if (pOutSize != NULL)

  001ac	e59d3064	 ldr         r3, [sp, #0x64]
  001b0	e3530000	 cmp         r3, #0
  001b4	0a000002	 beq         |$LN7@I2C_IOCont|

; 421  :         {
; 422  :             *pOutSize = sizeof(I2C_SET_SLAVE_ADDRESS);

  001b8	e59d2064	 ldr         r2, [sp, #0x64]
  001bc	e3a03008	 mov         r3, #8
  001c0	e5823000	 str         r3, [r2]
  001c4		 |$LN7@I2C_IOCont|

; 423  :         }
; 424  :         if (pInBuffer == NULL || inSize < sizeof(I2C_SET_SLAVE_ADDRESS)) 

  001c4	e59d3054	 ldr         r3, [sp, #0x54]
  001c8	e3530000	 cmp         r3, #0
  001cc	0a000002	 beq         |$LN5@I2C_IOCont|
  001d0	e59d3058	 ldr         r3, [sp, #0x58]
  001d4	e3530008	 cmp         r3, #8
  001d8	2a000002	 bcs         |$LN6@I2C_IOCont|
  001dc		 |$LN5@I2C_IOCont|

; 425  :         {
; 426  :             SetLastError(ERROR_INVALID_PARAMETER);

  001dc	e3a00057	 mov         r0, #0x57
  001e0	eb000000	 bl          SetLastError

; 427  :             break;

  001e4	ea000020	 b           |$LN18@I2C_IOCont|
  001e8		 |$LN6@I2C_IOCont|

; 428  :         }
; 429  :         pAddress = (I2C_SET_SLAVE_ADDRESS*)pInBuffer;

  001e8	e59d3054	 ldr         r3, [sp, #0x54]
  001ec	e58d300c	 str         r3, [sp, #0xC]

; 430  :         bRetVal = I2C_SetSlaveAddress(context, pAddress->size, pAddress->address);

  001f0	e59d300c	 ldr         r3, [sp, #0xC]
  001f4	e2833004	 add         r3, r3, #4
  001f8	e5932000	 ldr         r2, [r3]
  001fc	e59d300c	 ldr         r3, [sp, #0xC]
  00200	e5931000	 ldr         r1, [r3]
  00204	e59d004c	 ldr         r0, [sp, #0x4C]
  00208	eb000000	 bl          I2C_SetSlaveAddress
  0020c	e58d0038	 str         r0, [sp, #0x38]
  00210	e59d3038	 ldr         r3, [sp, #0x38]
  00214	e58d3010	 str         r3, [sp, #0x10]

; 431  :         break;

  00218	ea000013	 b           |$LN18@I2C_IOCont|
  0021c		 |$LN4@I2C_IOCont|

; 432  : 
; 433  :     case IOCTL_I2C_TRANSACT:
; 434  :         //Issue a transaction using the outbuffer as input/output
; 435  :         if (pOutBuffer == NULL || outSize < sizeof(I2CTRANS)) 

  0021c	e59d305c	 ldr         r3, [sp, #0x5C]
  00220	e3530000	 cmp         r3, #0
  00224	0a000002	 beq         |$LN2@I2C_IOCont|
  00228	e59d3060	 ldr         r3, [sp, #0x60]
  0022c	e3530e17	 cmp         r3, #0x17, 28
  00230	2a000002	 bcs         |$LN3@I2C_IOCont|
  00234		 |$LN2@I2C_IOCont|

; 436  :         {
; 437  :             SetLastError(ERROR_INVALID_PARAMETER);

  00234	e3a00057	 mov         r0, #0x57
  00238	eb000000	 bl          SetLastError

; 438  :             break;

  0023c	ea00000a	 b           |$LN18@I2C_IOCont|
  00240		 |$LN3@I2C_IOCont|

; 439  :         }
; 440  :         pTrans = (I2CTRANS*)pOutBuffer;

  00240	e59d305c	 ldr         r3, [sp, #0x5C]
  00244	e58d3008	 str         r3, [sp, #8]

; 441  :         bRetVal = I2C_Transact(context, pTrans);

  00248	e59d1008	 ldr         r1, [sp, #8]
  0024c	e59d004c	 ldr         r0, [sp, #0x4C]
  00250	eb000000	 bl          I2C_Transact
  00254	e58d003c	 str         r0, [sp, #0x3C]
  00258	e59d303c	 ldr         r3, [sp, #0x3C]
  0025c	e58d3010	 str         r3, [sp, #0x10]

; 442  :         *pOutSize = sizeof(I2CTRANS);

  00260	e59d2064	 ldr         r2, [sp, #0x64]
  00264	e3a03e17	 mov         r3, #0x17, 28
  00268	e5823000	 str         r3, [r2]
  0026c		 |$LN1@I2C_IOCont|
  0026c		 |$LN18@I2C_IOCont|
  0026c		 |$clean$42986|

; 443  :         break;
; 444  : 
; 445  : 
; 446  :     default:
; 447  :         // power control ioctls taken out.  self-manages power
; 448  :        // ERRORMSG(1, (TEXT("I2C: Unknown IOCTL_xxx(0x%0.8X) \r\n"), dwCode));
; 449  :         break;
; 450  :     }
; 451  : 
; 452  : clean:
; 453  :     //DEBUGMSG(ZONE_I2C&&ZONE_FUNCTION, (L"-I2C_IOControl(rc = %d)\r\n", rc));
; 454  :     return bRetVal;

  0026c	e59d3010	 ldr         r3, [sp, #0x10]
  00270	e58d3020	 str         r3, [sp, #0x20]

; 455  : }

  00274	e59d0020	 ldr         r0, [sp, #0x20]
  00278	e28dd040	 add         sp, sp, #0x40
  0027c	e89d6010	 ldmia       sp, {r4, sp, lr}
  00280	e12fff1e	 bx          lr
  00284		 |$LN29@I2C_IOCont|
  00284		 |$LN30@I2C_IOCont|
  00284	00000000	 DCD         |I2C_Transact|
  00288		 |$LN31@I2C_IOCont|
  00288	00000000	 DCD         |I2C_SetSlaveAddress|
  0028c		 |$LN32@I2C_IOCont|
  0028c	00000000	 DCD         |DEVICE_IFC_I2C_GUID|
  00290		 |$LN33@I2C_IOCont|
  00290	00220804	 DCD         0x220804
  00294		 |$LN34@I2C_IOCont|
  00294	69326349	 DCD         0x69326349
  00298		 |$M43206|

			 ENDP  ; |I2C_IOControl|

	END
