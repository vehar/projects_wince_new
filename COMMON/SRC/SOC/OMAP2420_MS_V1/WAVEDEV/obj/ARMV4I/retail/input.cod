; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\input.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?Open@InputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; InputStreamContext::Open
	IMPORT	|?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\input.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37369| DCD	|$LN5@Open|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@InputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; InputStreamContext::Open

; 27   : {

  00000		 |$LN5@Open|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37366|

; 28   :     HRESULT Result;
; 29   : 
; 30   :     Result = WaveStreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  00004	eb000000	 bl          |?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|

; 31   : 
; 32   :     return Result;
; 33   : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M37367|

			 ENDP  ; |?Open@InputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, InputStreamContext::Open

	EXPORT	|?SetRate@InputStreamContext@@UAAKK@Z|	; InputStreamContext::SetRate
	IMPORT	|__rt_udiv64by64|

  00000			 AREA	 |.pdata|, PDATA
|$T37381| DCD	|$LN5@SetRate|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRate@InputStreamContext@@UAAKK@Z| PROC ; InputStreamContext::SetRate

; 44   : {

  00000		 |$LN5@SetRate|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37378|
  00004	e1a05001	 mov         r5, r1
  00008	e1a06000	 mov         r6, r0

; 45   :     UINT64 Delta;
; 46   : 
; 47   :     m_dwMultiplier = dwMultiplier;
; 48   : 
; 49   :     Delta = (m_WaveFormat.nSamplesPerSec * m_dwMultiplier);

  0000c	e5d64028	 ldrb        r4, [r6, #0x28]
  00010	e5d63029	 ldrb        r3, [r6, #0x29]
  00014	e5d6202a	 ldrb        r2, [r6, #0x2A]
  00018	e5d6e02b	 ldrb        lr, [r6, #0x2B]
  0001c	e1843403	 orr         r3, r4, r3, lsl #8
  00020	e1833802	 orr         r3, r3, r2, lsl #16
  00024	e1833c0e	 orr         r3, r3, lr, lsl #24
  00028	e0020593	 mul         r2, r3, r5

; 50   :     Delta >>= 16;
; 51   :     Delta = ((UINT32)(((1i64<<32)/Delta)+1));

  0002c	e3a00000	 mov         r0, #0
  00030	e1a02822	 mov         r2, r2, lsr #16
  00034	e3a01001	 mov         r1, #1
  00038	e3a03000	 mov         r3, #0
  0003c	e5865074	 str         r5, [r6, #0x74]
  00040	eb000000	 bl          __rt_udiv64by64
  00044	e3a03b2b	 mov         r3, #0x2B, 22

; 52   :     Delta = (Delta * SAMPLERATE);

  00048	e3833044	 orr         r3, r3, #0x44
  0004c	e2802001	 add         r2, r0, #1
  00050	e083e392	 umull       lr, r3, r2, r3

; 53   :     Delta >>= DELTAINT;
; 54   : 
; 55   :     m_DeltaT = (DWORD)Delta;
; 56   : 
; 57   :     return MMSYSERR_NOERROR;

  00054	e3a00000	 mov         r0, #0
  00058	e1a03783	 mov         r3, r3, lsl #15
  0005c	e18338ae	 orr         r3, r3, lr, lsr #17
  00060	e5863070	 str         r3, [r6, #0x70]

; 58   : }

  00064	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M37379|

			 ENDP  ; |?SetRate@InputStreamContext@@UAAKK@Z|, InputStreamContext::SetRate

	EXPORT	|?Stop@InputStreamContext@@UAAKXZ|	; InputStreamContext::Stop
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|?Stop@StreamContext@@UAAKXZ|		; StreamContext::Stop

  00000			 AREA	 |.pdata|, PDATA
|$T37391| DCD	|$LN6@Stop|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stop@InputStreamContext@@UAAKXZ| PROC ; InputStreamContext::Stop

; 68   : {

  00000		 |$LN6@Stop|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37388|
  00004	e1a04000	 mov         r4, r0

; 69   :     // Stop the stream
; 70   :     WaveStreamContext::Stop();

  00008	eb000000	 bl          |?Stop@StreamContext@@UAAKXZ|

; 71   : 
; 72   :     // Return any partially filled buffers to the client
; 73   :     if ((m_lpWaveHdrCurrent) && (m_lpWaveHdrCurrent->dwBytesRecorded>0))

  0000c	e594303c	 ldr         r3, [r4, #0x3C]
  00010	e3530000	 cmp         r3, #0
  00014	0a000003	 beq         |$LN1@Stop|
  00018	e5933008	 ldr         r3, [r3, #8]
  0001c	e3530000	 cmp         r3, #0

; 74   :     {
; 75   :         GetNextBuffer();

  00020	81a00004	 movhi       r0, r4
  00024	8b000000	 blhi        |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  00028		 |$LN1@Stop|

; 76   :     }
; 77   : 
; 78   :     return MMSYSERR_NOERROR;

  00028	e3a00000	 mov         r0, #0

; 79   : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M37389|

			 ENDP  ; |?Stop@InputStreamContext@@UAAKXZ|, InputStreamContext::Stop

	EXPORT	|?Render2@InputStreamContext@@UAAPAEPAE00@Z| ; InputStreamContext::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T37422| DCD	|$LN28@Render2|
	DCD	0x40005402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@InputStreamContext@@UAAPAEPAE00@Z| PROC ; InputStreamContext::Render2

; 90   : {

  00000		 |$LN28@Render2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37419|
  00008	e1a03002	 mov         r3, r2
  0000c	e58d3004	 str         r3, [sp, #4]
  00010	e1a06001	 mov         r6, r1
  00014	e1a04000	 mov         r4, r0

; 91   :     PBYTE pCurrData = m_lpCurrData;
; 92   :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 93   : 
; 94   :     LONG CurrT = m_CurrT;
; 95   :     LONG DeltaT = m_DeltaT;

  00018	e5942070	 ldr         r2, [r4, #0x70]
  0001c	e594e044	 ldr         lr, [r4, #0x44]
  00020	e5949048	 ldr         r9, [r4, #0x48]
  00024	e5945088	 ldr         r5, [r4, #0x88]

; 96   :     PCM_TYPE SampleType = m_SampleType;
; 97   : 
; 98   :     LONG CurrSamp0 = m_CurrSamp[0];
; 99   :     LONG PrevSamp0 = m_PrevSamp[0];
; 100  :     LONG CurrSamp1 = m_CurrSamp[1];
; 101  :     LONG PrevSamp1 = m_PrevSamp[1];
; 102  :     LONG InSamp0;
; 103  :     LONG InSamp1;
; 104  : 
; 105  :     for (;;)
; 106  :     {
; 107  :         // Make sure we have a place to put the data
; 108  :         if (pCurrData>=pCurrDataEnd)

  00028	e5947080	 ldr         r7, [r4, #0x80]
  0002c	e594a078	 ldr         r10, [r4, #0x78]
  00030	e5948084	 ldr         r8, [r4, #0x84]
  00034	e594b07c	 ldr         r11, [r4, #0x7C]
  00038	e58d2000	 str         r2, [sp]
  0003c	ea00002c	 b           |$LN24@Render2|
  00040		 |$LL10@Render2|

; 109  :         {
; 110  :             goto Exit;
; 111  :         }
; 112  : 
; 113  :         // Get the next sample
; 114  :         while (CurrT >= DELTA_OVERFLOW)
; 115  :         {
; 116  :             if (pBuffer>=pBufferEnd)

  00040	e1560003	 cmp         r6, r3
  00044	2a00002c	 bcs         |$Exit$37285|

; 117  :             {
; 118  :                 goto Exit;
; 119  :             }
; 120  : 
; 121  :             PrevSamp0 = CurrSamp0;

  00048	e1a0a007	 mov         r10, r7

; 122  :             PrevSamp1 = CurrSamp1;
; 123  : 
; 124  :             CurrSamp0 = ((HWSAMPLE *)pBuffer)[0];
; 125  :             CurrSamp1 = ((HWSAMPLE *)pBuffer)[1];
; 126  :             pBuffer += 2*sizeof(HWSAMPLE);
; 127  : 
; 128  :             CurrT -= DELTA_OVERFLOW;

  0004c	e1d670f0	 ldrsh       r7, [r6]
  00050	e1a0b008	 mov         r11, r8
  00054	e1d680f2	 ldrsh       r8, [r6, #2]
  00058	e2866004	 add         r6, r6, #4
  0005c	e2455902	 sub         r5, r5, #2, 18
  00060		 |$LN25@Render2|
  00060	e3550902	 cmp         r5, #2, 18
  00064	aafffff5	 bge         |$LL10@Render2|

; 129  :         }
; 130  : 
; 131  :         InSamp0 = (PrevSamp0 + ((CurrT * (CurrSamp0 - PrevSamp0)) >> DELTAFRAC));

  00068	e047300a	 sub         r3, r7, r10

; 132  :         InSamp1 = (PrevSamp1 + ((CurrT * (CurrSamp1 - PrevSamp1)) >> DELTAFRAC));

  0006c	e048200b	 sub         r2, r8, r11
  00070	e0010593	 mul         r1, r3, r5
  00074	e0030592	 mul         r3, r2, r5

; 133  :         CurrT += DeltaT;
; 134  : 
; 135  :         // Apply input gain
; 136  :         // InSamp0 = (InSamp0 * fxpGain[0]) >> 16;
; 137  :         // InSamp1 = (InSamp1 * fxpGain[1]) >> 16;
; 138  : 
; 139  :         PPCM_SAMPLE pSampleDest = (PPCM_SAMPLE)pCurrData;
; 140  :         switch (m_SampleType)

  00078	e08a27c1	 add         r2, r10, r1, asr #15
  0007c	e5940068	 ldr         r0, [r4, #0x68]
  00080	e08b17c3	 add         r1, r11, r3, asr #15
  00084	e59d3000	 ldr         r3, [sp]
  00088	e3500001	 cmp         r0, #1
  0008c	e0855003	 add         r5, r5, r3
  00090	0a000013	 beq         |$LN2@Render2|
  00094	e3500002	 cmp         r0, #2
  00098	0a000009	 beq         |$LN3@Render2|
  0009c	e3500003	 cmp         r0, #3

; 141  :         {
; 142  :         case PCM_TYPE_M8:
; 143  :         default:
; 144  :             pSampleDest->m8.sample = (UINT8)( ((InSamp0+InSamp1) >> 9) + 128);

  000a0	10813002	 addne       r3, r1, r2
  000a4	11a034c3	 movne       r3, r3, asr #9
  000a8	12833080	 addne       r3, r3, #0x80
  000ac	14ce3001	 strneb      r3, [lr], #1
  000b0	1a00000e	 bne         |$LN5@Render2|

; 156  :             pCurrData  += 2;
; 157  :             break;
; 158  : 
; 159  :         case PCM_TYPE_S16:
; 160  :             pSampleDest->s16.sample_left  = (INT16)InSamp0;

  000b4	e1ce20b0	 strh        r2, [lr]

; 161  :             pSampleDest->s16.sample_right = (INT16)InSamp1;

  000b8	e1ce10b2	 strh        r1, [lr, #2]

; 162  :             pCurrData  += 4;

  000bc	e28ee004	 add         lr, lr, #4

; 163  :             break;

  000c0	ea00000a	 b           |$LN5@Render2|
  000c4		 |$LN3@Render2|

; 145  :             pCurrData  += 1;
; 146  :             break;
; 147  : 
; 148  :         case PCM_TYPE_S8:
; 149  :             pSampleDest->s8.sample_left  = (UINT8)((InSamp0 >> 8) + 128);

  000c4	e1a03442	 mov         r3, r2, asr #8

; 150  :             pSampleDest->s8.sample_right = (UINT8)((InSamp1 >> 8) + 128);

  000c8	e1a02441	 mov         r2, r1, asr #8
  000cc	e2822080	 add         r2, r2, #0x80
  000d0	e2833080	 add         r3, r3, #0x80
  000d4	e5ce2001	 strb        r2, [lr, #1]
  000d8	e5ce3000	 strb        r3, [lr]

; 151  :             pCurrData  += 2;

  000dc	e28ee002	 add         lr, lr, #2

; 152  :             break;

  000e0	ea000002	 b           |$LN5@Render2|
  000e4		 |$LN2@Render2|

; 153  : 
; 154  :         case PCM_TYPE_M16:
; 155  :             pSampleDest->m16.sample = (INT16)((InSamp0+InSamp1)>>1);

  000e4	e0813002	 add         r3, r1, r2
  000e8	e1a030c3	 mov         r3, r3, asr #1
  000ec	e0ce30b2	 strh        r3, [lr], #2
  000f0		 |$LN5@Render2|

; 96   :     PCM_TYPE SampleType = m_SampleType;
; 97   : 
; 98   :     LONG CurrSamp0 = m_CurrSamp[0];
; 99   :     LONG PrevSamp0 = m_PrevSamp[0];
; 100  :     LONG CurrSamp1 = m_CurrSamp[1];
; 101  :     LONG PrevSamp1 = m_PrevSamp[1];
; 102  :     LONG InSamp0;
; 103  :     LONG InSamp1;
; 104  : 
; 105  :     for (;;)
; 106  :     {
; 107  :         // Make sure we have a place to put the data
; 108  :         if (pCurrData>=pCurrDataEnd)

  000f0	e59d3004	 ldr         r3, [sp, #4]
  000f4		 |$LN24@Render2|
  000f4	e15e0009	 cmp         lr, r9
  000f8	3affffd8	 bcc         |$LN25@Render2|
  000fc		 |$Exit$37285|

; 164  :         }
; 165  :     }
; 166  : 
; 167  : Exit:
; 168  :     m_lpWaveHdrCurrent->dwBytesRecorded += (pCurrData-m_lpCurrData);

  000fc	e594103c	 ldr         r1, [r4, #0x3C]
  00100	e5942044	 ldr         r2, [r4, #0x44]

; 169  :     m_dwByteCount += (pCurrData-m_lpCurrData);
; 170  :     m_lpCurrData = pCurrData;
; 171  :     m_CurrT = CurrT;
; 172  :     m_PrevSamp[0] = PrevSamp0;
; 173  :     m_CurrSamp[0] = CurrSamp0;
; 174  :     m_PrevSamp[1] = PrevSamp1;
; 175  :     m_CurrSamp[1] = CurrSamp1;
; 176  :     return pBuffer;
; 177  : }

  00104	e1a00006	 mov         r0, r6
  00108	e5913008	 ldr         r3, [r1, #8]
  0010c	e0433002	 sub         r3, r3, r2
  00110	e083300e	 add         r3, r3, lr
  00114	e5813008	 str         r3, [r1, #8]
  00118	e594204c	 ldr         r2, [r4, #0x4C]
  0011c	e5943044	 ldr         r3, [r4, #0x44]
  00120	e584e044	 str         lr, [r4, #0x44]
  00124	e5845088	 str         r5, [r4, #0x88]
  00128	e0423003	 sub         r3, r2, r3
  0012c	e083300e	 add         r3, r3, lr
  00130	e584304c	 str         r3, [r4, #0x4C]
  00134	e584a078	 str         r10, [r4, #0x78]
  00138	e5847080	 str         r7, [r4, #0x80]
  0013c	e584b07c	 str         r11, [r4, #0x7C]
  00140	e5848084	 str         r8, [r4, #0x84]
  00144	e28dd008	 add         sp, sp, #8
  00148	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0014c	e12fff1e	 bx          lr
  00150		 |$M37420|

			 ENDP  ; |?Render2@InputStreamContext@@UAAPAEPAE00@Z|, InputStreamContext::Render2

	END
