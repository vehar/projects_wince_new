; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\xhwctxt.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BO@GNLCMPML@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@OIDHIJBG@?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@JAICFNDB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@GMHHJMNO@?$AAG?$AAS?$AAM?$AAW?$AAa?$AAv?$AAV?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@FPPADLDG@?$AAW?$AAa?$AAv?$AAG?$AAS?$AAM?$AAV?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@CNEAGKCB@?$AAW?$AAa?$AAv?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AAV?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@NHMAPIG@?$AAG?$AAS?$AAM?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AAV?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@HPCLICKH@?$AAD?$AAM?$AAA?$AAW?$AAr?$AAi?$AAt?$AAe?$AAV?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@CACIBJLJ@?$AAD?$AAM?$AAA?$AAR?$AAe?$AAa?$AAd?$AAV?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@JFANFMBJ@?$AAS?$AAi?$AAd?$AAe?$AAt?$AAo?$AAn?$AAe?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@KEPKJOEC@?$AAS?$AAi?$AAd?$AAe?$AAt?$AAo?$AAn?$AAe?$AAH?$AAe?$AAa?$AAd?$AAs?$AAe?$AAt?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|g_RegParams| DCD |??_C@_1CA@KEPKJOEC@?$AAS?$AAi?$AAd?$AAe?$AAt?$AAo?$AAn?$AAe?$AAH?$AAe?$AAa?$AAd?$AAs?$AAe?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x16c
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1CA@JFANFMBJ@?$AAS?$AAi?$AAd?$AAe?$AAt?$AAo?$AAn?$AAe?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x170
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1BG@CACIBJLJ@?$AAD?$AAM?$AAA?$AAR?$AAe?$AAa?$AAd?$AAV?$AAo?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x174
	DCD	0x4
	DCD	0xe7
	DCD	|??_C@_1BI@HPCLICKH@?$AAD?$AAM?$AAA?$AAW?$AAr?$AAi?$AAt?$AAe?$AAV?$AAo?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x178
	DCD	0x4
	DCD	0xe7
	DCD	|??_C@_1BM@NHMAPIG@?$AAG?$AAS?$AAM?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AAV?$AAo?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x17c
	DCD	0x4
	DCD	0x67
	DCD	|??_C@_1BM@CNEAGKCB@?$AAW?$AAa?$AAv?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AAV?$AAo?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x180
	DCD	0x4
	DCD	0x67
	DCD	|??_C@_1BE@FPPADLDG@?$AAW?$AAa?$AAv?$AAG?$AAS?$AAM?$AAV?$AAo?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x184
	DCD	0x4
	DCD	0x67
	DCD	|??_C@_1BE@GMHHJMNO@?$AAG?$AAS?$AAM?$AAW?$AAa?$AAv?$AAV?$AAo?$AAl?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x188
	DCD	0x4
	DCD	0x67
	DCD	|??_C@_1BO@JAICFNDB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xe0
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1BO@OIDHIJBG@?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xe8
	DCD	0x4
	DCD	0x23
	DCD	|??_C@_1BO@GNLCMPML@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xe4
	DCD	0x4
	DCD	0x23

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@GNLCMPML@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "A"
	DCB	0x0, "t", 0x0, "t", 0x0, "e", 0x0, "n", 0x0, "M", 0x0, "a"
	DCB	0x0, "x", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@OIDHIJBG@?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@| DCB "S"
	DCB	0x0, "e", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "d", 0x0, "A"
	DCB	0x0, "t", 0x0, "t", 0x0, "e", 0x0, "n", 0x0, "M", 0x0, "a"
	DCB	0x0, "x", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@JAICFNDB@?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAA?$AAt?$AAt?$AAe?$AAn?$AAM?$AAa?$AAx?$AA?$AA@| DCB "S"
	DCB	0x0, "t", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "m", 0x0, "A"
	DCB	0x0, "t", 0x0, "t", 0x0, "e", 0x0, "n", 0x0, "M", 0x0, "a"
	DCB	0x0, "x", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@GMHHJMNO@?$AAG?$AAS?$AAM?$AAW?$AAa?$AAv?$AAV?$AAo?$AAl?$AA?$AA@| DCB "G"
	DCB	0x0, "S", 0x0, "M", 0x0, "W", 0x0, "a", 0x0, "v", 0x0, "V"
	DCB	0x0, "o", 0x0, "l", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@FPPADLDG@?$AAW?$AAa?$AAv?$AAG?$AAS?$AAM?$AAV?$AAo?$AAl?$AA?$AA@| DCB "W"
	DCB	0x0, "a", 0x0, "v", 0x0, "G", 0x0, "S", 0x0, "M", 0x0, "V"
	DCB	0x0, "o", 0x0, "l", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CNEAGKCB@?$AAW?$AAa?$AAv?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AAV?$AAo?$AAl?$AA?$AA@| DCB "W"
	DCB	0x0, "a", 0x0, "v", 0x0, "S", 0x0, "p", 0x0, "e", 0x0, "a"
	DCB	0x0, "k", 0x0, "e", 0x0, "r", 0x0, "V", 0x0, "o", 0x0, "l"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@NHMAPIG@?$AAG?$AAS?$AAM?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AAV?$AAo?$AAl?$AA?$AA@| DCB "G"
	DCB	0x0, "S", 0x0, "M", 0x0, "S", 0x0, "p", 0x0, "e", 0x0, "a"
	DCB	0x0, "k", 0x0, "e", 0x0, "r", 0x0, "V", 0x0, "o", 0x0, "l"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@HPCLICKH@?$AAD?$AAM?$AAA?$AAW?$AAr?$AAi?$AAt?$AAe?$AAV?$AAo?$AAl?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "e", 0x0, "V", 0x0, "o", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@CACIBJLJ@?$AAD?$AAM?$AAA?$AAR?$AAe?$AAa?$AAd?$AAV?$AAo?$AAl?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "V", 0x0, "o", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@JFANFMBJ@?$AAS?$AAi?$AAd?$AAe?$AAt?$AAo?$AAn?$AAe?$AAS?$AAp?$AAe?$AAa?$AAk?$AAe?$AAr?$AA?$AA@| DCB "S"
	DCB	0x0, "i", 0x0, "d", 0x0, "e", 0x0, "t", 0x0, "o", 0x0, "n"
	DCB	0x0, "e", 0x0, "S", 0x0, "p", 0x0, "e", 0x0, "a", 0x0, "k"
	DCB	0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KEPKJOEC@?$AAS?$AAi?$AAd?$AAe?$AAt?$AAo?$AAn?$AAe?$AAH?$AAe?$AAa?$AAd?$AAs?$AAe?$AAt?$AA?$AA@| DCB "S"
	DCB	0x0, "i", 0x0, "d", 0x0, "e", 0x0, "t", 0x0, "o", 0x0, "n"
	DCB	0x0, "e", 0x0, "H", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, 0x0, 0x0	; `string'
	EXPORT	|CloseDevice|
	IMPORT	|LocalFree|
	IMPORT	|CloseHandle|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\inc\ceddkex.h

  00000			 AREA	 |.pdata|, PDATA
|$T37639| DCD	|$LN5@CloseDevic|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CloseDevice| PROC

; 151  : {

  00000		 |$LN5@CloseDevic|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37636|
  00004	e1a05000	 mov         r5, r0

; 152  :     BOOL rc;
; 153  :     CEDDK_DRIVER_CONTEXT *pContext = (CEDDK_DRIVER_CONTEXT*)hDevice;
; 154  : 
; 155  :     rc = CloseHandle(pContext->hDevice);

  00008	e5950010	 ldr         r0, [r5, #0x10]
  0000c	eb000000	 bl          CloseHandle
  00010	e1a04000	 mov         r4, r0

; 156  :     LocalFree(pContext);

  00014	e1a00005	 mov         r0, r5
  00018	eb000000	 bl          LocalFree

; 157  :     return rc;
; 158  : }

  0001c	e1a00004	 mov         r0, r4
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37637|

			 ENDP  ; |CloseDevice|

	EXPORT	|??0CAutoLock@@QAA@PAUCRITICAL_SECTION@@@Z| ; CAutoLock::CAutoLock
	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37650| DCD	|$LN5@CAutoLock|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CAutoLock@@QAA@PAUCRITICAL_SECTION@@@Z| PROC ; CAutoLock::CAutoLock

; 277  :     CAutoLock (CRITICAL_SECTION * cs)

  00000		 |$LN5@CAutoLock|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37647|
  00004	e1a04000	 mov         r4, r0

; 278  :     {
; 279  :         pcs = cs;
; 280  :         EnterCriticalSection(pcs);

  00008	e1a00001	 mov         r0, r1
  0000c	e5841000	 str         r1, [r4]
  00010	eb000000	 bl          EnterCriticalSection

; 281  :     }

  00014	e1a00004	 mov         r0, r4
  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M37648|

			 ENDP  ; |??0CAutoLock@@QAA@PAUCRITICAL_SECTION@@@Z|, CAutoLock::CAutoLock

	EXPORT	|??1CAutoLock@@QAA@XZ|			; CAutoLock::~CAutoLock
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37658| DCD	|$LN5@CAutoLock@2|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CAutoLock@@QAA@XZ| PROC		; CAutoLock::~CAutoLock

; 283  :     {

  00000		 |$LN5@CAutoLock@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37655|

; 284  :         LeaveCriticalSection(pcs);

  00004	e5900000	 ldr         r0, [r0]
  00008	eb000000	 bl          LeaveCriticalSection

; 285  :     }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M37656|

			 ENDP  ; |??1CAutoLock@@QAA@XZ|, CAutoLock::~CAutoLock

	EXPORT	|??1OMAP2420DMAContext@@UAA@XZ|		; OMAP2420DMAContext::~OMAP2420DMAContext
	IMPORT	|??1HardwareContext@@UAA@XZ|		; HardwareContext::~HardwareContext

  00000			 AREA	 |.pdata|, PDATA
|$T37666| DCD	|$LN5@OMAP2420DM|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1OMAP2420DMAContext@@UAA@XZ| PROC	; OMAP2420DMAContext::~OMAP2420DMAContext
  00000		 |$LN5@OMAP2420DM|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37663|
  00004	eb000000	 bl          |??1HardwareContext@@UAA@XZ|
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M37664|

			 ENDP  ; |??1OMAP2420DMAContext@@UAA@XZ|, OMAP2420DMAContext::~OMAP2420DMAContext

	EXPORT	|??1ACAudioHWContext@@UAA@XZ|		; ACAudioHWContext::~ACAudioHWContext
	EXPORT	|??_7ACAudioHWContext@@6B@| [ DATA ]	; ACAudioHWContext::`vftable'
	EXPORT	|?HWDMAMemoryIn@OMAP2420DMAContext@@UAAPAEXZ| ; OMAP2420DMAContext::HWDMAMemoryIn
	EXPORT	|?HWDMAMemoryOut@OMAP2420DMAContext@@UAAPAEXZ| ; OMAP2420DMAContext::HWDMAMemoryOut
	EXPORT	|?HWInitCodec@ACAudioHWContext@@UAAHXZ|	; ACAudioHWContext::HWInitCodec
	EXPORT	|?HWInitNetwork@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::HWInitNetwork
	EXPORT	|?HWEnableNetwork@ACAudioHWContext@@UAAHH@Z| ; ACAudioHWContext::HWEnableNetwork
	EXPORT	|?HWAudioPowerTimeout@ACAudioHWContext@@UAAHH@Z| ; ACAudioHWContext::HWAudioPowerTimeout
	EXPORT	|?HWUpdateAudioPRC@ACAudioHWContext@@UAAXXZ| ; ACAudioHWContext::HWUpdateAudioPRC
	EXPORT	|?HWDeinit@ACAudioHWContext@@UAAHXZ|	; ACAudioHWContext::HWDeinit
	IMPORT	|DeleteCriticalSection|
	IMPORT	|??_EACAudioHWContext@@UAAPAXI@Z|, WEAK |??_GACAudioHWContext@@UAAPAXI@Z| ; ACAudioHWContext::`vector deleting destructor', ACAudioHWContext::`scalar deleting destructor'
	IMPORT	|?HWMapDMAMemory@OMAP2420DMAContext@@UAAHK@Z| ; OMAP2420DMAContext::HWMapDMAMemory
	IMPORT	|?HWInitInputDMA@OMAP2420DMAContext@@UAAXXZ| ; OMAP2420DMAContext::HWInitInputDMA
	IMPORT	|?HWInitOutputDMA@OMAP2420DMAContext@@UAAXXZ| ; OMAP2420DMAContext::HWInitOutputDMA
	IMPORT	|?HWStartOutputDMA@OMAP2420DMAContext@@UAAXXZ| ; OMAP2420DMAContext::HWStartOutputDMA
	IMPORT	|?HWStopOutputDMA@OMAP2420DMAContext@@UAAXXZ| ; OMAP2420DMAContext::HWStopOutputDMA
	IMPORT	|?HWStartInputDMA@OMAP2420DMAContext@@UAAXXZ| ; OMAP2420DMAContext::HWStartInputDMA
	IMPORT	|?HWStopInputDMA@OMAP2420DMAContext@@UAAXXZ| ; OMAP2420DMAContext::HWStopInputDMA
	IMPORT	|?HWTransferInputBuffers@OMAP2420DMAContext@@UAAKXZ| ; OMAP2420DMAContext::HWTransferInputBuffers
	IMPORT	|?HWTransferOutputBuffers@OMAP2420DMAContext@@UAAKXZ| ; OMAP2420DMAContext::HWTransferOutputBuffers
	IMPORT	|?HWMapControllerRegs@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::HWMapControllerRegs
	IMPORT	|?HWInitController@ACAudioHWContext@@UAAXXZ| ; ACAudioHWContext::HWInitController
	IMPORT	|?HWPowerUp@ACAudioHWContext@@UAAXXZ|	; ACAudioHWContext::HWPowerUp
	IMPORT	|?HWPowerDown@ACAudioHWContext@@UAAXXZ|	; ACAudioHWContext::HWPowerDown
	IMPORT	|?OutputStreamOpened@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::OutputStreamOpened
	IMPORT	|?OutputStreamClosed@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::OutputStreamClosed
	IMPORT	|?InputStreamOpened@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::InputStreamOpened
	IMPORT	|?InputStreamClosed@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::InputStreamClosed
	IMPORT	|?SetRecordMemoPath@ACAudioHWContext@@UAAXH@Z| ; ACAudioHWContext::SetRecordMemoPath
	IMPORT	|?HandleExtMessage@ACAudioHWContext@@UAAHKPAEK0KPAK@Z| ; ACAudioHWContext::HandleExtMessage
	IMPORT	|?PmControlMessage@ACAudioHWContext@@UAAHKPAEK0KPAK@Z| ; ACAudioHWContext::PmControlMessage
	IMPORT	|?RegisterRilCallback@ACAudioHWContext@@EAAHPAPAX@Z| ; ACAudioHWContext::RegisterRilCallback
	IMPORT	|?SetupDelayUpdate@HardwareContext@@MAAXXZ| ; HardwareContext::SetupDelayUpdate
	IMPORT	|?DelayedUpdate@HardwareContext@@MAAXXZ| ; HardwareContext::DelayedUpdate
	IMPORT	|?HWEnableInputChannel@ACAudioHWContext@@UAAXH@Z| ; ACAudioHWContext::HWEnableInputChannel
	IMPORT	|?HWEnableOutputChannel@ACAudioHWContext@@UAAXH@Z| ; ACAudioHWContext::HWEnableOutputChannel
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\xhwctxt.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37684| DCD	|$LN9@ACAudioHWC|
	DCD	0x40001101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7ACAudioHWContext@@6B@| DCD |??_EACAudioHWContext@@UAAPAXI@Z| ; ACAudioHWContext::`vftable'
	DCD	|?HWMapDMAMemory@OMAP2420DMAContext@@UAAHK@Z|
	DCD	|?HWInitInputDMA@OMAP2420DMAContext@@UAAXXZ|
	DCD	|?HWInitOutputDMA@OMAP2420DMAContext@@UAAXXZ|
	DCD	|?HWStartOutputDMA@OMAP2420DMAContext@@UAAXXZ|
	DCD	|?HWStopOutputDMA@OMAP2420DMAContext@@UAAXXZ|
	DCD	|?HWStartInputDMA@OMAP2420DMAContext@@UAAXXZ|
	DCD	|?HWStopInputDMA@OMAP2420DMAContext@@UAAXXZ|
	DCD	|?HWTransferInputBuffers@OMAP2420DMAContext@@UAAKXZ|
	DCD	|?HWTransferOutputBuffers@OMAP2420DMAContext@@UAAKXZ|
	DCD	|?HWDMAMemoryIn@OMAP2420DMAContext@@UAAPAEXZ|
	DCD	|?HWDMAMemoryOut@OMAP2420DMAContext@@UAAPAEXZ|
	DCD	|?HWMapControllerRegs@ACAudioHWContext@@UAAHXZ|
	DCD	|?HWInitController@ACAudioHWContext@@UAAXXZ|
	DCD	|?HWInitCodec@ACAudioHWContext@@UAAHXZ|
	DCD	|?HWInitNetwork@ACAudioHWContext@@UAAHXZ|
	DCD	|?HWEnableNetwork@ACAudioHWContext@@UAAHH@Z|
	DCD	|?HWAudioPowerTimeout@ACAudioHWContext@@UAAHH@Z|
	DCD	|?HWUpdateAudioPRC@ACAudioHWContext@@UAAXXZ|
	DCD	|?HWPowerUp@ACAudioHWContext@@UAAXXZ|
	DCD	|?HWPowerDown@ACAudioHWContext@@UAAXXZ|
	DCD	|?HWDeinit@ACAudioHWContext@@UAAHXZ|
	DCD	|?OutputStreamOpened@ACAudioHWContext@@UAAHXZ|
	DCD	|?OutputStreamClosed@ACAudioHWContext@@UAAHXZ|
	DCD	|?InputStreamOpened@ACAudioHWContext@@UAAHXZ|
	DCD	|?InputStreamClosed@ACAudioHWContext@@UAAHXZ|
	DCD	|?SetRecordMemoPath@ACAudioHWContext@@UAAXH@Z|
	DCD	|?HandleExtMessage@ACAudioHWContext@@UAAHKPAEK0KPAK@Z|
	DCD	|?PmControlMessage@ACAudioHWContext@@UAAHKPAEK0KPAK@Z|
	DCD	|?RegisterRilCallback@ACAudioHWContext@@EAAHPAPAX@Z|
	DCD	|?SetupDelayUpdate@HardwareContext@@MAAXXZ|
	DCD	|?DelayedUpdate@HardwareContext@@MAAXXZ|
	DCD	|?HWEnableInputChannel@ACAudioHWContext@@UAAXH@Z|
	DCD	|?HWEnableOutputChannel@ACAudioHWContext@@UAAXH@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1ACAudioHWContext@@UAA@XZ| PROC	; ACAudioHWContext::~ACAudioHWContext

; 180  : {

  00000		 |$LN9@ACAudioHWC|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37681|
  00004	e1a05000	 mov         r5, r0
  00008	e59f3030	 ldr         r3, [pc, #0x30]

; 181  :     // modem 
; 182  :     DeleteCriticalSection( &m_csAudioPRC );

  0000c	e4803130	 str         r3, [r0], #0x130
  00010	eb000000	 bl          DeleteCriticalSection

; 183  :     DeleteCriticalSection( &m_csModemDevice );

  00014	e2850e11	 add         r0, r5, #0x11, 28
  00018	eb000000	 bl          DeleteCriticalSection

; 184  :     CloseDevice(m_hGsmDev);

  0001c	e595410c	 ldr         r4, [r5, #0x10C]
  00020	e5940010	 ldr         r0, [r4, #0x10]
  00024	eb000000	 bl          CloseHandle
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          LocalFree

; 185  : }

  00030	e1a00005	 mov         r0, r5
  00034	eb000000	 bl          |??1HardwareContext@@UAA@XZ|
  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN10@ACAudioHWC|
  00040		 |$LN11@ACAudioHWC|
  00040	00000000	 DCD         |??_7ACAudioHWContext@@6B@|
  00044		 |$M37682|

			 ENDP  ; |??1ACAudioHWContext@@UAA@XZ|, ACAudioHWContext::~ACAudioHWContext

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\dmactxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37696| DCD	|$LN5@HWDMAMemor|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HWDMAMemoryIn@OMAP2420DMAContext@@UAAPAEXZ| PROC ; OMAP2420DMAContext::HWDMAMemoryIn

; 58   :     PBYTE HWDMAMemoryIn( void ) { return m_pbDMABufIn;  }

  00000		 |$LN5@HWDMAMemor|
  00000		 |$M37693|
  00000	e5900100	 ldr         r0, [r0, #0x100]
  00004	e12fff1e	 bx          lr
  00008		 |$M37694|

			 ENDP  ; |?HWDMAMemoryIn@OMAP2420DMAContext@@UAAPAEXZ|, OMAP2420DMAContext::HWDMAMemoryIn


  00000			 AREA	 |.pdata|, PDATA
|$T37706| DCD	|$LN5@HWDMAMemor@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HWDMAMemoryOut@OMAP2420DMAContext@@UAAPAEXZ| PROC ; OMAP2420DMAContext::HWDMAMemoryOut

; 59   :     PBYTE HWDMAMemoryOut( void ){ return m_pbDMABufOut; }

  00000		 |$LN5@HWDMAMemor@2|
  00000		 |$M37703|
  00000	e5900104	 ldr         r0, [r0, #0x104]
  00004	e12fff1e	 bx          lr
  00008		 |$M37704|

			 ENDP  ; |?HWDMAMemoryOut@OMAP2420DMAContext@@UAAPAEXZ|, OMAP2420DMAContext::HWDMAMemoryOut

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\xhwctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37715| DCD	|$LN5@HWInitCode|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HWInitCodec@ACAudioHWContext@@UAAHXZ| PROC ; ACAudioHWContext::HWInitCodec

; 49   :     BOOL  HWInitCodec( void ){ return TRUE; }

  00000		 |$LN5@HWInitCode|
  00000		 |$M37712|
  00000	e3a00001	 mov         r0, #1
  00004	e12fff1e	 bx          lr
  00008		 |$M37713|

			 ENDP  ; |?HWInitCodec@ACAudioHWContext@@UAAHXZ|, ACAudioHWContext::HWInitCodec

	EXPORT	|?EnableExtSpeaker@ACAudioHWContext@@AAAXH@Z| ; ACAudioHWContext::EnableExtSpeaker
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\xhwctxt.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37722| DCD	|$LN5@EnableExtS|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EnableExtSpeaker@ACAudioHWContext@@AAAXH@Z| PROC ; ACAudioHWContext::EnableExtSpeaker

; 196  : {

  00000		 |$LN5@EnableExtS|
  00000		 |$M37719|

; 197  :     DEBUGMSG(ZONE_AC, (L"+ACAudioHWContext::EnableExtSpeaker %d\r\n", bEnable));
; 198  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M37720|

			 ENDP  ; |?EnableExtSpeaker@ACAudioHWContext@@AAAXH@Z|, ACAudioHWContext::EnableExtSpeaker

	IMPORT	|?InitModem@ACAudioHWContext@@AAAHXZ|	; ACAudioHWContext::InitModem

  00000			 AREA	 |.pdata|, PDATA
|$T37732| DCD	|$LN6@HWInitNetw|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HWInitNetwork@ACAudioHWContext@@UAAHXZ| PROC ; ACAudioHWContext::HWInitNetwork

; 209  : {

  00000		 |$LN6@HWInitNetw|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37729|
  00004	e1a04000	 mov         r4, r0

; 210  :     // Init parameters. 
; 211  :     m_bModemPortActive=FALSE;     
; 212  :     m_bPowerTimeout=FALSE;        
; 213  :     m_bBtHeadsetActive=FALSE;      
; 214  :     m_bHeadsetActive=FALSE;       
; 215  :     m_bLoudSpeakerActive=FALSE;   
; 216  :     m_bChooseBtHeadset=FALSE;     
; 217  :     
; 218  :     m_dwBtAudioRouting = BT_AUDIO_MODEM;

  00008	e3a03002	 mov         r3, #2
  0000c	e3a02000	 mov         r2, #0
  00010	e58430dc	 str         r3, [r4, #0xDC]

; 219  :     
; 220  : #ifdef CHOOSE_BT_HEADSET
; 221  :     m_bChooseBtHeadset = TRUE;
; 222  : #else
; 223  :     m_bChooseBtHeadset = FALSE;
; 224  : #endif
; 225  : 
; 226  :     InitModem ();

  00014	e5842148	 str         r2, [r4, #0x148]
  00018	e584214c	 str         r2, [r4, #0x14C]
  0001c	e5842150	 str         r2, [r4, #0x150]
  00020	e5842154	 str         r2, [r4, #0x154]
  00024	e5842158	 str         r2, [r4, #0x158]
  00028	e584215c	 str         r2, [r4, #0x15C]
  0002c	eb000000	 bl          |?InitModem@ACAudioHWContext@@AAAHXZ|

; 227  :     HWUpdateAudioPRC ();

  00030	e5943000	 ldr         r3, [r4]
  00034	e1a00004	 mov         r0, r4
  00038	e5933048	 ldr         r3, [r3, #0x48]
  0003c	e1a0e00f	 mov         lr, pc
  00040	e12fff13	 bx          r3

; 228  :     if (!m_bEACPowerOn) {

  00044	e5943144	 ldr         r3, [r4, #0x144]
  00048	e3530000	 cmp         r3, #0

; 229  :         HWPowerDown();

  0004c	05943000	 ldreq       r3, [r4]
  00050	01a00004	 moveq       r0, r4
  00054	05933050	 ldreq       r3, [r3, #0x50]
  00058	01a0e00f	 moveq       lr, pc
  0005c	012fff13	 bxeq        r3

; 230  :     }
; 231  : 
; 232  :     return ( TRUE ); 

  00060	e3a00001	 mov         r0, #1

; 233  : }   

  00064	e8bd4010	 ldmia       sp!, {r4, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M37730|

			 ENDP  ; |?HWInitNetwork@ACAudioHWContext@@UAAHXZ|, ACAudioHWContext::HWInitNetwork


  00000			 AREA	 |.pdata|, PDATA
|$T37741| DCD	|$LN5@HWDeinit|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HWDeinit@ACAudioHWContext@@UAAHXZ| PROC ; ACAudioHWContext::HWDeinit

; 244  : {

  00000		 |$LN5@HWDeinit|
  00000		 |$M37738|

; 245  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 246  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37739|

			 ENDP  ; |?HWDeinit@ACAudioHWContext@@UAAHXZ|, ACAudioHWContext::HWDeinit

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37760| DCD	|$LN13@HWEnableNe|
	DCD	0x40002401
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\xhwctxt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HWEnableNetwork@ACAudioHWContext@@UAAHH@Z| PROC ; ACAudioHWContext::HWEnableNetwork

; 257  : {

  00000		 |$LN13@HWEnableNe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37757|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 258  :     BOOL bRetVal = TRUE;    // Indicate no error.
; 259  :     // this lock will nest the m_csAudioPRC critical section
; 260  :     CAutoLock cs( &m_csAudioPRC );

  0000c	e2850e13	 add         r0, r5, #0x13, 28
  00010	eb000000	 bl          EnterCriticalSection

; 261  : 
; 262  :     // Make sure the modem device is ready. 
; 263  :     //    ModemNetworkEnabled(bEnable);
; 264  : 
; 265  :     // Check for enable network audio transfer.
; 266  :     if ( bEnable )
; 267  :     {
; 268  :         // Check if network already running.
; 269  :         if ( !m_bModemPortActive )

  00014	e5953148	 ldr         r3, [r5, #0x148]
  00018	e3540000	 cmp         r4, #0
  0001c	0a00000b	 beq         |$LN4@HWEnableNe|
  00020	e3530000	 cmp         r3, #0
  00024	1a000014	 bne         |$LN1@HWEnableNe|

; 270  :         {
; 271  :             // Indicate network is running.
; 272  :             m_bModemPortActive = TRUE;
; 273  :         
; 274  :             // Force not to use loud speaker. 
; 275  :             m_bLoudSpeakerActive = FALSE;
; 276  : 
; 277  :             // Enable the audio path.
; 278  :             HWUpdateAudioPRC();

  00028	e5953000	 ldr         r3, [r5]
  0002c	e3a02001	 mov         r2, #1
  00030	e3a01000	 mov         r1, #0
  00034	e5933048	 ldr         r3, [r3, #0x48]
  00038	e1a00005	 mov         r0, r5
  0003c	e5852148	 str         r2, [r5, #0x148]
  00040	e5851158	 str         r1, [r5, #0x158]
  00044	e1a0e00f	 mov         lr, pc
  00048	e12fff13	 bx          r3

; 279  :        }
; 280  :     }
; 281  :     else    // Otherwise, disable network audio transfer.

  0004c	ea00000a	 b           |$LN1@HWEnableNe|
  00050		 |$LN4@HWEnableNe|

; 282  :     {
; 283  :         // Check if network already stopped.
; 284  :         if ( m_bModemPortActive )

  00050	e3530000	 cmp         r3, #0
  00054	0a000008	 beq         |$LN1@HWEnableNe|

; 285  :         {
; 286  :             // Indicate network is stopped.
; 287  :             m_bModemPortActive = FALSE;
; 288  :     
; 289  :             // Force to use loud speaker. 
; 290  :             m_bLoudSpeakerActive = TRUE;
; 291  : 
; 292  :             // Disable the audio path.
; 293  :             HWUpdateAudioPRC();

  00058	e5953000	 ldr         r3, [r5]
  0005c	e3a02000	 mov         r2, #0
  00060	e3a01001	 mov         r1, #1
  00064	e5933048	 ldr         r3, [r3, #0x48]
  00068	e1a00005	 mov         r0, r5
  0006c	e5852148	 str         r2, [r5, #0x148]
  00070	e5851158	 str         r1, [r5, #0x158]
  00074	e1a0e00f	 mov         lr, pc
  00078	e12fff13	 bx          r3
  0007c		 |$LN1@HWEnableNe|

; 294  :         }
; 295  :     }
; 296  : 
; 297  :     return ( bRetVal ); 

  0007c	e2850e13	 add         r0, r5, #0x13, 28
  00080	eb000000	 bl          LeaveCriticalSection
  00084	e3a00001	 mov         r0, #1

; 298  : }   

  00088	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$M37758|

			 ENDP  ; |?HWEnableNetwork@ACAudioHWContext@@UAAHH@Z|, ACAudioHWContext::HWEnableNetwork

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37779| DCD	|$LN9@HWAudioPow|
	DCD	0x40001001
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\xhwctxt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HWAudioPowerTimeout@ACAudioHWContext@@UAAHH@Z| PROC ; ACAudioHWContext::HWAudioPowerTimeout

; 309  : {

  00000		 |$LN9@HWAudioPow|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37776|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 310  :     CAutoLock cs( &m_csAudioPRC );

  0000c	e2850e13	 add         r0, r5, #0x13, 28
  00010	eb000000	 bl          EnterCriticalSection

; 311  : 
; 312  :     // Power can be off since it is timeout. 
; 313  :     m_bPowerTimeout=bTimeOut;
; 314  : 
; 315  :     HWUpdateAudioPRC ();

  00014	e5953000	 ldr         r3, [r5]
  00018	e1a00005	 mov         r0, r5
  0001c	e585414c	 str         r4, [r5, #0x14C]
  00020	e5933048	 ldr         r3, [r3, #0x48]
  00024	e1a0e00f	 mov         lr, pc
  00028	e12fff13	 bx          r3

; 316  : 
; 317  :     return ( TRUE );

  0002c	e2850e13	 add         r0, r5, #0x13, 28
  00030	eb000000	 bl          LeaveCriticalSection
  00034	e3a00001	 mov         r0, #1

; 318  : }

  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M37777|

			 ENDP  ; |?HWAudioPowerTimeout@ACAudioHWContext@@UAAHH@Z|, ACAudioHWContext::HWAudioPowerTimeout

	IMPORT	|?SetModemHeadset@ACAudioHWContext@@AAAHH@Z| ; ACAudioHWContext::SetModemHeadset
	IMPORT	|?SetSideTone@ACAudioHWContext@@AAAHH@Z| ; ACAudioHWContext::SetSideTone
	IMPORT	|?SelectVoiceCodec@ACAudioHWContext@@AAAXXZ| ; ACAudioHWContext::SelectVoiceCodec
	IMPORT	|?SelectBtAudio@ACAudioHWContext@@AAAXK@Z| ; ACAudioHWContext::SelectBtAudio
	IMPORT	|?SetControllerClocks@ACAudioHWContext@@AAAXH@Z| ; ACAudioHWContext::SetControllerClocks
	IMPORT	|?SetCodecPower@ACAudioHWContext@@AAAXH@Z| ; ACAudioHWContext::SetCodecPower
	IMPORT	|?SetModemDevice@ACAudioHWContext@@AAAHH@Z| ; ACAudioHWContext::SetModemDevice
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37802| DCD	|$LN43@HWUpdateAu|
	DCD	0x40007f01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\xhwctxt.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HWUpdateAudioPRC@ACAudioHWContext@@UAAXXZ| PROC ; ACAudioHWContext::HWUpdateAudioPRC

; 330  : {

  00000		 |$LN43@HWUpdateAu|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M37799|
  00004	e1a04000	 mov         r4, r0

; 331  :     CAutoLock cs( &m_csAudioPRC );

  00008	e2840e13	 add         r0, r4, #0x13, 28
  0000c	eb000000	 bl          EnterCriticalSection

; 332  :     BOOL bBothHeadsetArePluggedIn = FALSE;
; 333  : 
; 334  :     DEBUGMSG(ZONE_AC, (L"+ACAudioHWContext::HWUpdateAudioPRC\r\n"));
; 335  :     // The power can be off only: 
; 336  :     //  1. when DMA is not running. 
; 337  :     //  2. It is not during call.  
; 338  : 
; 339  :     if (!m_bDMARunning && !m_bModemPortActive)

  00010	e59430c8	 ldr         r3, [r4, #0xC8]
  00014	e3a05000	 mov         r5, #0
  00018	e3a07001	 mov         r7, #1
  0001c	e3530000	 cmp         r3, #0
  00020	e3a06000	 mov         r6, #0
  00024	1a000016	 bne         |$LN27@HWUpdateAu|
  00028	e5943148	 ldr         r3, [r4, #0x148]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000013	 bne         |$LN27@HWUpdateAu|

; 340  :     {
; 341  :         // Force loud speaker off since backlight is off.
; 342  :         if (m_bPowerTimeout)

  00034	e594314c	 ldr         r3, [r4, #0x14C]
  00038	e3530000	 cmp         r3, #0

; 343  :         {
; 344  :             if (m_bEACPowerOn)

  0003c	e5943144	 ldr         r3, [r4, #0x144]
  00040	0a00000c	 beq         |$LN26@HWUpdateAu|
  00044	e3530000	 cmp         r3, #0
  00048	0a00001e	 beq         |$LN17@HWUpdateAu|

; 345  :             {
; 346  :                 m_bEACPowerOn = FALSE;
; 347  : 
; 348  :                 DEBUGMSG(ZONE_AC,(L"ACAudioHWContext::HWUpdateAudioPRC: "
; 349  :                     L"Force loud speaker off\r\n"
; 350  :                 ));
; 351  :                 // Turn off modem device.
; 352  :                 SetModemDevice (FALSE);

  0004c	e3a01000	 mov         r1, #0
  00050	e1a00004	 mov         r0, r4
  00054	e5846144	 str         r6, [r4, #0x144]
  00058	eb000000	 bl          |?SetModemDevice@ACAudioHWContext@@AAAHH@Z|

; 353  : 
; 354  :                 // Power off codec
; 355  :                 SetCodecPower (FALSE);

  0005c	e3a01000	 mov         r1, #0
  00060	e1a00004	 mov         r0, r4
  00064	eb000000	 bl          |?SetCodecPower@ACAudioHWContext@@AAAXH@Z|

; 356  : 
; 357  :                 // Request to disable ontroller clocks. 
; 358  :                 SetControllerClocks (FALSE);  

  00068	e3a01000	 mov         r1, #0
  0006c	e1a00004	 mov         r0, r4
  00070	eb000000	 bl          |?SetControllerClocks@ACAudioHWContext@@AAAXH@Z|

; 359  :             }
; 360  :         }
; 361  :         else

  00074	ea000013	 b           |$LN17@HWUpdateAu|
  00078		 |$LN26@HWUpdateAu|

; 362  :         {
; 363  :             // Force loud speaker on when backlight is on.
; 364  :             if (!m_bEACPowerOn)

  00078	e3530000	 cmp         r3, #0
  0007c	1a000011	 bne         |$LN17@HWUpdateAu|

; 365  :             {
; 366  :                 DEBUGMSG(ZONE_AC, (L"ACAudioHWContext::HWUpdateAudioPRC: "
; 367  :                     L"Force loud speaker on\r\n"
; 368  :                 ));
; 369  :                 // Turn on modem device.
; 370  :                 if (!SetModemDevice (TRUE))
; 371  :                 {
; 372  :                     m_bEACPowerOn = FALSE;
; 373  :                 }
; 374  :                 else
; 375  :                 {
; 376  :                     m_bEACPowerOn = TRUE;
; 377  :                 
; 378  :                     // Make sure controller clocks are on first. 
; 379  :                     SetControllerClocks (TRUE);  
; 380  : 
; 381  :                     // Power on codec
; 382  :                     SetCodecPower (TRUE);
; 383  :                 }
; 384  :             }
; 385  :         }
; 386  :     }
; 387  : 
; 388  :     // Otherwise we need to turn on the power. 
; 389  :     else 

  00080	ea000003	 b           |$LN39@HWUpdateAu|
  00084		 |$LN27@HWUpdateAu|

; 390  :     {
; 391  :         if (!m_bEACPowerOn)

  00084	e5943144	 ldr         r3, [r4, #0x144]
  00088	e3530000	 cmp         r3, #0
  0008c	1a00000d	 bne         |$LN17@HWUpdateAu|

; 392  :         {   
; 393  :             DEBUGMSG(ZONE_AC, (L"ACAudioHWContext::HWUpdateAudioPRC: "
; 394  :                 L"Turn on power\r\n"
; 395  :             ));
; 396  :             m_bPowerTimeout = FALSE;
; 397  :             // Turn on modem device.
; 398  :             if (!SetModemDevice (TRUE))

  00090	e584614c	 str         r6, [r4, #0x14C]
  00094		 |$LN39@HWUpdateAu|
  00094	e3a01001	 mov         r1, #1
  00098	e1a00004	 mov         r0, r4
  0009c	eb000000	 bl          |?SetModemDevice@ACAudioHWContext@@AAAHH@Z|
  000a0	e3500000	 cmp         r0, #0

; 399  :             {
; 400  :                 m_bEACPowerOn = FALSE;

  000a4	05846144	 streq       r6, [r4, #0x144]
  000a8	0a000006	 beq         |$LN17@HWUpdateAu|

; 401  :             }
; 402  :             else
; 403  :             {
; 404  :                 m_bEACPowerOn = TRUE;
; 405  : 
; 406  :                 // Make sure controller clocks are on first. 
; 407  :                 SetControllerClocks (TRUE);  

  000ac	e3a01001	 mov         r1, #1
  000b0	e1a00004	 mov         r0, r4
  000b4	e5847144	 str         r7, [r4, #0x144]
  000b8	eb000000	 bl          |?SetControllerClocks@ACAudioHWContext@@AAAXH@Z|

; 408  : 
; 409  :                 // Power on codec
; 410  :                 SetCodecPower (TRUE);

  000bc	e3a01001	 mov         r1, #1
  000c0	e1a00004	 mov         r0, r4
  000c4	eb000000	 bl          |?SetCodecPower@ACAudioHWContext@@AAAXH@Z|
  000c8		 |$LN17@HWUpdateAu|

; 411  :             }
; 412  :         }
; 413  :     }
; 414  : 
; 415  :     // Headset routing.
; 416  :     if (m_bHeadsetPluggedIn && m_bBtHeadsetSelected)

  000c8	e59430cc	 ldr         r3, [r4, #0xCC]
  000cc	e3530000	 cmp         r3, #0
  000d0	0a000007	 beq         |$LN14@HWUpdateAu|
  000d4	e59430d8	 ldr         r3, [r4, #0xD8]
  000d8	e3530000	 cmp         r3, #0
  000dc	0a00000b	 beq         |$LN13@HWUpdateAu|

; 417  :     {
; 418  :         bBothHeadsetArePluggedIn = TRUE;
; 419  : 
; 420  :         if (m_bChooseBtHeadset)

  000e0	e594315c	 ldr         r3, [r4, #0x15C]
  000e4	e3a05001	 mov         r5, #1
  000e8	e3530000	 cmp         r3, #0

; 421  :             m_bHeadsetPluggedIn = FALSE;

  000ec	158460cc	 strne       r6, [r4, #0xCC]

; 422  :         else
; 423  :             m_bBtHeadsetSelected = FALSE;

  000f0	058460d8	 streq       r6, [r4, #0xD8]
  000f4		 |$LN14@HWUpdateAu|

; 424  :     }
; 425  : 
; 426  : 
; 427  :     if (m_bBtHeadsetSelected)

  000f4	e59430d8	 ldr         r3, [r4, #0xD8]
  000f8	e3530000	 cmp         r3, #0
  000fc	0a000003	 beq         |$LN13@HWUpdateAu|

; 428  :     {
; 429  :         DEBUGMSG(ZONE_AC, (L"ACAudioHWContext::HWUpdateAudioPRC: "
; 430  :             L"BtHeadsetSelected\r\n"));
; 431  :         SelectBtAudio(m_dwBtAudioRouting);  

  00100	e59410dc	 ldr         r1, [r4, #0xDC]
  00104	e1a00004	 mov         r0, r4
  00108	eb000000	 bl          |?SelectBtAudio@ACAudioHWContext@@AAAXK@Z|

; 432  :     }
; 433  :     else

  0010c	ea000001	 b           |$LN12@HWUpdateAu|
  00110		 |$LN13@HWUpdateAu|

; 434  :     {
; 435  :         SelectVoiceCodec();

  00110	e1a00004	 mov         r0, r4
  00114	eb000000	 bl          |?SelectVoiceCodec@ACAudioHWContext@@AAAXXZ|
  00118		 |$LN12@HWUpdateAu|

; 436  :     }
; 437  :     // default: headset off
; 438  :     BOOL bNewHeadsetActive=FALSE;
; 439  : 
; 440  :     // Headset routing.
; 441  :     if (m_bHeadsetPluggedIn || m_bBtHeadsetSelected)

  00118	e59430cc	 ldr         r3, [r4, #0xCC]
  0011c	e3530000	 cmp         r3, #0
  00120	1a000002	 bne         |$LN10@HWUpdateAu|
  00124	e59430d8	 ldr         r3, [r4, #0xD8]
  00128	e3530000	 cmp         r3, #0
  0012c	0a000002	 beq         |$LN31@HWUpdateAu|
  00130		 |$LN10@HWUpdateAu|

; 442  :     {
; 443  :         // deactivate headset if somebody forces speaker mode,
; 444  :         // e.g. incoming call
; 445  :         bNewHeadsetActive = (m_NumForcedSpeaker == 0)?TRUE:FALSE;

  00130	e5943064	 ldr         r3, [r4, #0x64]
  00134	e3530000	 cmp         r3, #0
  00138	0a00000a	 beq         |$LN36@HWUpdateAu|
  0013c		 |$LN31@HWUpdateAu|

; 446  :     }
; 447  : 
; 448  :     if (!bNewHeadsetActive &&
; 449  :          bNewHeadsetActive!=m_bHeadsetActive)

  0013c	e5943154	 ldr         r3, [r4, #0x154]
  00140	e3530000	 cmp         r3, #0
  00144	0a000013	 beq         |$LN6@HWUpdateAu|

; 450  :     {
; 451  :         m_bHeadsetActive = bNewHeadsetActive;
; 452  : 
; 453  :         if (!m_bLoudSpeakerActive)

  00148	e5943158	 ldr         r3, [r4, #0x158]
  0014c	e5846154	 str         r6, [r4, #0x154]
  00150	e3530000	 cmp         r3, #0

; 454  :             SetSideTone (TRUE);

  00154	03a01001	 moveq       r1, #1
  00158	01a00004	 moveq       r0, r4
  0015c	0b000000	 bleq        |?SetSideTone@ACAudioHWContext@@AAAHH@Z|

; 455  : 
; 456  :         SetModemHeadset (FALSE);

  00160	e3a01000	 mov         r1, #0

; 457  :     } 
; 458  :     else 

  00164	ea000009	 b           |$LN40@HWUpdateAu|
  00168		 |$LN36@HWUpdateAu|

; 459  :     if (bNewHeadsetActive &&
; 460  :         bNewHeadsetActive!=m_bHeadsetActive)

  00168	e5943154	 ldr         r3, [r4, #0x154]
  0016c	e3530001	 cmp         r3, #1
  00170	0a000008	 beq         |$LN6@HWUpdateAu|

; 461  :     {
; 462  :          m_bHeadsetActive = bNewHeadsetActive;
; 463  : 
; 464  :          if (!m_bLoudSpeakerActive)

  00174	e5943158	 ldr         r3, [r4, #0x158]
  00178	e5847154	 str         r7, [r4, #0x154]
  0017c	e3530000	 cmp         r3, #0

; 465  :              SetSideTone (TRUE);

  00180	03a01001	 moveq       r1, #1
  00184	01a00004	 moveq       r0, r4
  00188	0b000000	 bleq        |?SetSideTone@ACAudioHWContext@@AAAHH@Z|

; 466  : 
; 467  :          SetModemHeadset (TRUE);

  0018c	e3a01001	 mov         r1, #1
  00190		 |$LN40@HWUpdateAu|
  00190	e1a00004	 mov         r0, r4
  00194	eb000000	 bl          |?SetModemHeadset@ACAudioHWContext@@AAAHH@Z|
  00198		 |$LN6@HWUpdateAu|

; 468  :     }
; 469  : 
; 470  :     // Toggle the loud speaker during voice call only.
; 471  :     if (m_bModemPortActive && m_bToggleLoadSpeaker)

  00198	e5943148	 ldr         r3, [r4, #0x148]
  0019c	e3530000	 cmp         r3, #0
  001a0	0a00000d	 beq         |$LN2@HWUpdateAu|
  001a4	e59430d0	 ldr         r3, [r4, #0xD0]
  001a8	e3530000	 cmp         r3, #0
  001ac	0a00000a	 beq         |$LN2@HWUpdateAu|

; 472  :     {
; 473  :         if (!m_bLoudSpeakerActive)

  001b0	e5943158	 ldr         r3, [r4, #0x158]

; 474  :         {
; 475  :             // Turn off mic Side Tone
; 476  :             SetSideTone (FALSE);

  001b4	e1a00004	 mov         r0, r4
  001b8	e3530000	 cmp         r3, #0
  001bc	1a000003	 bne         |$LN3@HWUpdateAu|
  001c0	e3a01000	 mov         r1, #0
  001c4	eb000000	 bl          |?SetSideTone@ACAudioHWContext@@AAAHH@Z|

; 477  : 
; 478  :             m_bLoudSpeakerActive = TRUE;

  001c8	e5847158	 str         r7, [r4, #0x158]

; 479  :         }
; 480  :         else

  001cc	ea000002	 b           |$LN2@HWUpdateAu|
  001d0		 |$LN3@HWUpdateAu|

; 481  :         {
; 482  :             // Turn on mic Side Tone
; 483  :             SetSideTone (TRUE);

  001d0	e3a01001	 mov         r1, #1
  001d4	eb000000	 bl          |?SetSideTone@ACAudioHWContext@@AAAHH@Z|

; 484  : 
; 485  :             m_bLoudSpeakerActive = FALSE;

  001d8	e5846158	 str         r6, [r4, #0x158]
  001dc		 |$LN2@HWUpdateAu|

; 486  :         }
; 487  :     }
; 488  : 
; 489  :     // Reset the flag.
; 490  :     m_bToggleLoadSpeaker = FALSE;
; 491  : 
; 492  :     // If both the physically connected headset and the
; 493  :     // BT headset where connected, reset the variables
; 494  :     if (bBothHeadsetArePluggedIn)

  001dc	e3550000	 cmp         r5, #0

; 495  :     {
; 496  :         m_bBtHeadsetSelected    =
; 497  :         m_bHeadsetPluggedIn     = TRUE;
; 498  :     }
; 499  : #ifdef DEBUG    
; 500  : //  DumpMCBSPRegisters();
; 501  : #endif
; 502  : }

  001e0	e2840e13	 add         r0, r4, #0x13, 28
  001e4	158470cc	 strne       r7, [r4, #0xCC]
  001e8	158470d8	 strne       r7, [r4, #0xD8]
  001ec	e58460d0	 str         r6, [r4, #0xD0]
  001f0	eb000000	 bl          LeaveCriticalSection
  001f4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  001f8	e12fff1e	 bx          lr
  001fc		 |$M37800|

			 ENDP  ; |?HWUpdateAudioPRC@ACAudioHWContext@@UAAXXZ|, ACAudioHWContext::HWUpdateAudioPRC

	EXPORT	|??0ACAudioHWContext@@QAA@PAG@Z|	; ACAudioHWContext::ACAudioHWContext
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|??0OMAP2420DMAContext@@QAA@XZ|		; OMAP2420DMAContext::OMAP2420DMAContext

  00000			 AREA	 |.pdata|, PDATA
|$T37813| DCD	|$LN6@ACAudioHWC@2|
	DCD	0x40003001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0ACAudioHWContext@@QAA@PAG@Z| PROC	; ACAudioHWContext::ACAudioHWContext

; 116  : {

  00000		 |$LN6@ACAudioHWC@2|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M37810|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??0OMAP2420DMAContext@@QAA@XZ|
  00010	e59f30a4	 ldr         r3, [pc, #0xA4]

; 117  :     // Bluetooth 
; 118  :     m_CurBTEacConnection = CONNECTION_NOT_DEFINED;

  00014	e3a09000	 mov         r9, #0

; 119  : 
; 120  :     // modem 
; 121  :     InitializeCriticalSection( &m_csModemDevice );

  00018	e2850e11	 add         r0, r5, #0x11, 28
  0001c	e5853000	 str         r3, [r5]
  00020	e585912c	 str         r9, [r5, #0x12C]
  00024	eb000000	 bl          InitializeCriticalSection

; 122  :     m_fHeadsetOn = FALSE;
; 123  :     m_fModemCodecOn = FALSE;
; 124  :     m_hGsmDev = NULL;
; 125  : 
; 126  :     m_pMCBSPRegisters=NULL;
; 127  :     m_pPRCMRegs=NULL;
; 128  :     m_hSPI=NULL; 
; 129  : 
; 130  :     // power managment cs
; 131  :     InitializeCriticalSection( &m_csAudioPRC );

  00028	e2850e13	 add         r0, r5, #0x13, 28
  0002c	e5859128	 str         r9, [r5, #0x128]
  00030	e5859124	 str         r9, [r5, #0x124]
  00034	e585910c	 str         r9, [r5, #0x10C]
  00038	e5859160	 str         r9, [r5, #0x160]
  0003c	e5859164	 str         r9, [r5, #0x164]
  00040	e5859168	 str         r9, [r5, #0x168]
  00044	eb000000	 bl          InitializeCriticalSection

; 132  : 
; 133  :     // EAC power
; 134  :     m_bEACPowerOn=FALSE;         
; 135  :     m_ExternPowerStateRequired = D4;
; 136  :     
; 137  :     // audio state variables
; 138  :     m_bModemPortActive=FALSE;     
; 139  :     m_bPowerTimeout=FALSE;        
; 140  :     m_bBtHeadsetActive=FALSE;      
; 141  :     m_bHeadsetActive=FALSE;       
; 142  :     m_bLoudSpeakerActive=FALSE;   
; 143  :     m_bChooseBtHeadset=FALSE;     
; 144  : 
; 145  :     // default audio sidetone volume settings
; 146  :     m_nSidetoneHeadset=DEFAULT_SIDETONE;
; 147  :     m_nSidetoneSpeaker=DEFAULT_SIDETONE;
; 148  :     // mixer/dma default gain 0db
; 149  :     m_nDMAReadVol    = DEFAULT_DMAVOLUME;
; 150  :     m_nDMAWriteVol   = DEFAULT_DMAVOLUME;
; 151  :     m_nGSMSpeakerVol = DEFAULT_MIXVOLUME;
; 152  :     m_nWavSpeakerVol = DEFAULT_MIXVOLUME;
; 153  :     m_nWavGSMVol     = DEFAULT_MIXVOLUME;
; 154  :     m_nGSMWavVol     = DEFAULT_MIXVOLUME;
; 155  : 
; 156  :     // Read device parameters
; 157  :     if (GetDeviceRegistryParams( 
; 158  :          lpszContext,
; 159  :          this, 
; 160  :          dimof(g_RegParams), 
; 161  :          g_RegParams
; 162  :         )!=ERROR_SUCCESS)

  00048	e59f3068	 ldr         r3, [pc, #0x68]
  0004c	e3a0e004	 mov         lr, #4
  00050	e3a06064	 mov         r6, #0x64
  00054	e3a070e7	 mov         r7, #0xE7
  00058	e3a08067	 mov         r8, #0x67
  0005c	e3a0200b	 mov         r2, #0xB
  00060	e1a01005	 mov         r1, r5
  00064	e1a00004	 mov         r0, r4
  00068	e585e108	 str         lr, [r5, #0x108]
  0006c	e5859144	 str         r9, [r5, #0x144]
  00070	e5859148	 str         r9, [r5, #0x148]
  00074	e585914c	 str         r9, [r5, #0x14C]
  00078	e5859150	 str         r9, [r5, #0x150]
  0007c	e5859154	 str         r9, [r5, #0x154]
  00080	e5859158	 str         r9, [r5, #0x158]
  00084	e585915c	 str         r9, [r5, #0x15C]
  00088	e585616c	 str         r6, [r5, #0x16C]
  0008c	e5856170	 str         r6, [r5, #0x170]
  00090	e5857174	 str         r7, [r5, #0x174]
  00094	e5857178	 str         r7, [r5, #0x178]
  00098	e585817c	 str         r8, [r5, #0x17C]
  0009c	e5858180	 str         r8, [r5, #0x180]
  000a0	e5858184	 str         r8, [r5, #0x184]
  000a4	e5858188	 str         r8, [r5, #0x188]
  000a8	eb000000	 bl          GetDeviceRegistryParams

; 163  :     {
; 164  :         DEBUGMSG(ZONE_ERROR, (L"ACAudioHWContext::ACAudioHWContext: "
; 165  :             L"ReadRegistryParams() failed\r\n"
; 166  :         ));
; 167  :     }
; 168  : 
; 169  :    
; 170  : }

  000ac	e1a00005	 mov         r0, r5
  000b0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN7@ACAudioHWC@2|
  000b8		 |$LN8@ACAudioHWC@2|
  000b8	00000000	 DCD         |g_RegParams|
  000bc		 |$LN9@ACAudioHWC@2|
  000bc	00000000	 DCD         |??_7ACAudioHWContext@@6B@|
  000c0		 |$M37811|

			 ENDP  ; |??0ACAudioHWContext@@QAA@PAG@Z|, ACAudioHWContext::ACAudioHWContext

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T37827| DCD	|$LN6@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GACAudioHWContext@@UAAPAXI@Z| PROC	; ACAudioHWContext::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37824|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1ACAudioHWContext@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37825|

			 ENDP  ; |??_GACAudioHWContext@@UAAPAXI@Z|, ACAudioHWContext::`scalar deleting destructor'

	END
