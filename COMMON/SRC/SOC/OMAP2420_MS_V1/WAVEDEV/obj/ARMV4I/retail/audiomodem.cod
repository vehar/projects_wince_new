; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\audiomodem.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??0CAutoLock@@QAA@PAUCRITICAL_SECTION@@@Z| ; CAutoLock::CAutoLock
	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37666| DCD	|$LN5@CAutoLock|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CAutoLock@@QAA@PAUCRITICAL_SECTION@@@Z| PROC ; CAutoLock::CAutoLock

; 277  :     CAutoLock (CRITICAL_SECTION * cs)

  00000		 |$LN5@CAutoLock|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37663|
  00004	e1a04000	 mov         r4, r0

; 278  :     {
; 279  :         pcs = cs;
; 280  :         EnterCriticalSection(pcs);

  00008	e1a00001	 mov         r0, r1
  0000c	e5841000	 str         r1, [r4]
  00010	eb000000	 bl          EnterCriticalSection

; 281  :     }

  00014	e1a00004	 mov         r0, r4
  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M37664|

			 ENDP  ; |??0CAutoLock@@QAA@PAUCRITICAL_SECTION@@@Z|, CAutoLock::CAutoLock

	EXPORT	|??1CAutoLock@@QAA@XZ|			; CAutoLock::~CAutoLock
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T37674| DCD	|$LN5@CAutoLock@2|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CAutoLock@@QAA@XZ| PROC		; CAutoLock::~CAutoLock

; 283  :     {

  00000		 |$LN5@CAutoLock@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37671|

; 284  :         LeaveCriticalSection(pcs);

  00004	e5900000	 ldr         r0, [r0]
  00008	eb000000	 bl          LeaveCriticalSection

; 285  :     }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M37672|

			 ENDP  ; |??1CAutoLock@@QAA@XZ|, CAutoLock::~CAutoLock

	EXPORT	|?InitModem@ACAudioHWContext@@AAAHXZ|	; ACAudioHWContext::InitModem
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\audiomodem.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37683| DCD	|$LN5@InitModem|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InitModem@ACAudioHWContext@@AAAHXZ| PROC ; ACAudioHWContext::InitModem

; 45   : {

  00000		 |$LN5@InitModem|
  00000		 |$M37680|

; 46   : 
; 47   :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 48   : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37681|

			 ENDP  ; |?InitModem@ACAudioHWContext@@AAAHXZ|, ACAudioHWContext::InitModem

	EXPORT	|?OpenModemDevice@ACAudioHWContext@@AAAHXZ| ; ACAudioHWContext::OpenModemDevice

  00000			 AREA	 |.pdata|, PDATA
|$T37692| DCD	|$LN5@OpenModemD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OpenModemDevice@ACAudioHWContext@@AAAHXZ| PROC ; ACAudioHWContext::OpenModemDevice

; 59   : {

  00000		 |$LN5@OpenModemD|
  00000		 |$M37689|

; 60   :     // assume m_csModemDevice is locked
; 61   :     // CAutoLock cs(m_csModemDevice);
; 62   :     BOOL fRet = TRUE;
; 63   : #ifdef OMAP730
; 64   :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: OpenModemDevice\r\n")));
; 65   :     if (m_hGsmDev==NULL)
; 66   :     {
; 67   :         // Invoke GSM driver for future uses.
; 68   :         m_hGsmDev = CreateDevice(GTI_VPORT_CTRL,
; 69   :             GENERIC_READ | GENERIC_WRITE,
; 70   :             FILE_SHARE_READ | FILE_SHARE_WRITE,
; 71   :             NULL,
; 72   :             OPEN_EXISTING,
; 73   :             0, NULL);
; 74   : 
; 75   :         DEBUGMSG( ZONE_MODEM, (TEXT("AC: Open GTI_VPORT_CTRL...0x%x\r\n"), m_hGsmDev));
; 76   : 
; 77   :         if (m_hGsmDev == INVALID_HANDLE_VALUE )
; 78   :         {
; 79   :             m_hGsmDev = NULL;
; 80   :             DEBUGMSG(ZONE_ERROR, (TEXT("WAVE: Failed to open GTI1 driver...no problem, try again later\r\n")));
; 81   :             fRet = FALSE;
; 82   :         }
; 83   :         else
; 84   :         {
; 85   :             // set sidetone to defined state
; 86   :             SetSideTone (TRUE);
; 87   :         }
; 88   :     }
; 89   : #endif
; 90   :     return fRet;

  00000	e3a00001	 mov         r0, #1

; 91   : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37690|

			 ENDP  ; |?OpenModemDevice@ACAudioHWContext@@AAAHXZ|, ACAudioHWContext::OpenModemDevice

	EXPORT	|?SetModemDevice@ACAudioHWContext@@AAAHH@Z| ; ACAudioHWContext::SetModemDevice
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37718| DCD	|$LN14@SetModemDe|
	DCD	0x40000901
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\audiomodem.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetModemDevice@ACAudioHWContext@@AAAHH@Z| PROC ; ACAudioHWContext::SetModemDevice

; 104  : {

  00000		 |$LN14@SetModemDe|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37715|
  00004	e1a04000	 mov         r4, r0

; 105  :     CAutoLock cs(&m_csModemDevice);

  00008	e2840e11	 add         r0, r4, #0x11, 28
  0000c	eb000000	 bl          EnterCriticalSection

; 106  : 
; 107  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: SetModemDevice\r\n")));
; 108  :     // Open the modem device in case it is not opened yet.
; 109  :     if (!OpenModemDevice())
; 110  :     {
; 111  :         return FALSE;
; 112  :     }
; 113  : 
; 114  : #ifdef OMAP730
; 115  :     DWORD dwRet;
; 116  :     CSMI_INFO_GC_AUDIO_STEREO_REQ  stereoReq;
; 117  : 
; 118  :     while (TRUE)
; 119  :     {
; 120  :         // Igore the command if not needed.
; 121  :         if (m_fModemCodecOn && fOn)
; 122  :         {
; 123  :             break;
; 124  :         }
; 125  : 
; 126  :         // Igore the command if not needed.
; 127  :         if (!m_fModemCodecOn && !fOn)
; 128  :         {
; 129  :             break;
; 130  :         }
; 131  : 
; 132  :         // Save the flag.
; 133  :         m_fModemCodecOn = fOn;
; 134  : 
; 135  :         if (fOn)
; 136  :             stereoReq.ControlCode = GC_STEREO_ON;
; 137  :         else
; 138  :             stereoReq.ControlCode = GC_STEREO_OFF;
; 139  : 
; 140  :         stereoReq.Gain = 0;             // 0db
; 141  :         stereoReq.SampleFrequency = GC_SAMPLE_FREQ_44100;
; 142  : 
; 143  :         if (m_fHeadsetOn)
; 144  :             stereoReq.AudioMode = GC_HEADSET_MODE;
; 145  :         else
; 146  :             stereoReq.AudioMode = GC_SPEAKER_MODE;
; 147  : 
; 148  :         // Control sidetone
; 149  :         if (!DeviceIoCtrl(  m_hGsmDev,
; 150  :                             GC_AUDIO_STEREO_CODEC_REQ,
; 151  :                             (LPVOID)&stereoReq,
; 152  :                             sizeof(CSMI_INFO_GC_AUDIO_STEREO_REQ),
; 153  :                             NULL,
; 154  :                             0,
; 155  :                             &dwRet,
; 156  :                             NULL))
; 157  :         {
; 158  :             ERRORMSG(1, (TEXT("AC: GC_AUDIO_STEREO_CODEC_REQ..failed\r\n")));
; 159  :         }
; 160  :         else
; 161  :         {
; 162  :             DEBUGMSG( ZONE_MODEM,
; 163  :                 (TEXT("AC: GC_AUDIO_STEREO_CODEC_REQ...on=%d, headset=%d\r\n"),
; 164  :                 fOn, m_fHeadsetOn));
; 165  :         }
; 166  : 
; 167  :         break;
; 168  :     }
; 169  : #endif
; 170  :     return TRUE;

  00010	e2840e11	 add         r0, r4, #0x11, 28
  00014	eb000000	 bl          LeaveCriticalSection
  00018	e3a00001	 mov         r0, #1

; 171  : }

  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M37716|

			 ENDP  ; |?SetModemDevice@ACAudioHWContext@@AAAHH@Z|, ACAudioHWContext::SetModemDevice

	EXPORT	|?SetModemHeadset@ACAudioHWContext@@AAAHH@Z| ; ACAudioHWContext::SetModemHeadset
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37745| DCD	|$LN14@SetModemHe|
	DCD	0x40000b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\audiomodem.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetModemHeadset@ACAudioHWContext@@AAAHH@Z| PROC ; ACAudioHWContext::SetModemHeadset

; 182  : {

  00000		 |$LN14@SetModemHe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37742|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 183  :     CAutoLock cs(&m_csModemDevice);

  0000c	e2840e11	 add         r0, r4, #0x11, 28
  00010	eb000000	 bl          EnterCriticalSection

; 184  : 
; 185  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: SetModemHeadset\r\n")));
; 186  :     // Save Headset flag.
; 187  :     m_fHeadsetOn = fHeadset;
; 188  : 
; 189  :     if (!OpenModemDevice())
; 190  :     {
; 191  :         return FALSE;
; 192  :     }
; 193  : 
; 194  : #ifdef OMAP730
; 195  :     DWORD dwRet;
; 196  :     CSMI_INFO_GC_AUDIO_STEREO_REQ  stereoReq;
; 197  : 
; 198  :     stereoReq.ControlCode = GC_AUDIO_MODE_CHANGE;
; 199  : 
; 200  :     if (fHeadset)
; 201  :         stereoReq.AudioMode = GC_HEADSET_MODE;
; 202  :     else
; 203  :         stereoReq.AudioMode = GC_SPEAKER_MODE;
; 204  : 
; 205  :     stereoReq.Gain = 0; // 0db
; 206  :     stereoReq.SampleFrequency = GC_SAMPLE_FREQ_44100;
; 207  : 
; 208  :     // Control sidetone
; 209  :     if (!DeviceIoCtrl(  m_hGsmDev,
; 210  :                         GC_AUDIO_STEREO_CODEC_REQ,
; 211  :                         (LPVOID)&stereoReq,
; 212  :                         sizeof(CSMI_INFO_GC_AUDIO_STEREO_REQ),
; 213  :                         NULL,
; 214  :                         0,
; 215  :                         &dwRet,
; 216  :                         NULL))
; 217  :     {
; 218  :         ERRORMSG(1, (TEXT("AC: GC_AUDIO_MODE_CHANGE..failed\r\n")));
; 219  :     }
; 220  :     else
; 221  :     {
; 222  :         DEBUGMSG( ZONE_MODEM, (TEXT("AC: GC_AUDIO_MODE_CHANGE..%d\r\n"), fHeadset));
; 223  :     }
; 224  : #endif
; 225  :     return TRUE;

  00014	e2840e11	 add         r0, r4, #0x11, 28
  00018	e5845128	 str         r5, [r4, #0x128]
  0001c	eb000000	 bl          LeaveCriticalSection
  00020	e3a00001	 mov         r0, #1

; 226  : }

  00024	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M37743|

			 ENDP  ; |?SetModemHeadset@ACAudioHWContext@@AAAHH@Z|, ACAudioHWContext::SetModemHeadset

	EXPORT	|?SetVoiceRxGain@ACAudioHWContext@@AAAHK@Z| ; ACAudioHWContext::SetVoiceRxGain

  00000			 AREA	 |.pdata|, PDATA
|$T37754| DCD	|$LN5@SetVoiceRx|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVoiceRxGain@ACAudioHWContext@@AAAHK@Z| PROC ; ACAudioHWContext::SetVoiceRxGain

; 236  : {

  00000		 |$LN5@SetVoiceRx|
  00000		 |$M37751|

; 237  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: SetVoiceRxGain:...0x%x\r\n"),dwGain));
; 238  :     return ( TRUE );

  00000	e3a00001	 mov         r0, #1

; 239  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37752|

			 ENDP  ; |?SetVoiceRxGain@ACAudioHWContext@@AAAHK@Z|, ACAudioHWContext::SetVoiceRxGain

	EXPORT	|?GetVoiceRxGain@ACAudioHWContext@@AAAHPAK@Z| ; ACAudioHWContext::GetVoiceRxGain

  00000			 AREA	 |.pdata|, PDATA
|$T37763| DCD	|$LN5@GetVoiceRx|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetVoiceRxGain@ACAudioHWContext@@AAAHPAK@Z| PROC ; ACAudioHWContext::GetVoiceRxGain

; 249  : {

  00000		 |$LN5@GetVoiceRx|
  00000		 |$M37760|

; 250  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: GetVoiceRxGain:...0x%x\r\n"),*pdwGain));
; 251  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 252  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37761|

			 ENDP  ; |?GetVoiceRxGain@ACAudioHWContext@@AAAHPAK@Z|, ACAudioHWContext::GetVoiceRxGain

	EXPORT	|?SetVoiceTxGain@ACAudioHWContext@@AAAHK@Z| ; ACAudioHWContext::SetVoiceTxGain

  00000			 AREA	 |.pdata|, PDATA
|$T37772| DCD	|$LN5@SetVoiceTx|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVoiceTxGain@ACAudioHWContext@@AAAHK@Z| PROC ; ACAudioHWContext::SetVoiceTxGain

; 262  : {

  00000		 |$LN5@SetVoiceTx|
  00000		 |$M37769|

; 263  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: SetVoiceTxGain:...0x%x\r\n"),dwGain));
; 264  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 265  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37770|

			 ENDP  ; |?SetVoiceTxGain@ACAudioHWContext@@AAAHK@Z|, ACAudioHWContext::SetVoiceTxGain

	EXPORT	|?GetVoiceTxGain@ACAudioHWContext@@AAAHPAK@Z| ; ACAudioHWContext::GetVoiceTxGain

  00000			 AREA	 |.pdata|, PDATA
|$T37781| DCD	|$LN5@GetVoiceTx|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetVoiceTxGain@ACAudioHWContext@@AAAHPAK@Z| PROC ; ACAudioHWContext::GetVoiceTxGain

; 275  : {

  00000		 |$LN5@GetVoiceTx|
  00000		 |$M37778|

; 276  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: GetVoiceTxGain:...0x%x\r\n"),*pdwGain));
; 277  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 278  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37779|

			 ENDP  ; |?GetVoiceTxGain@ACAudioHWContext@@AAAHPAK@Z|, ACAudioHWContext::GetVoiceTxGain

	EXPORT	|?SetCMSIAudioInfo@ACAudioHWContext@@QAAHPAU__CMSI_AUDIO_SETTING@@@Z| ; ACAudioHWContext::SetCMSIAudioInfo

  00000			 AREA	 |.pdata|, PDATA
|$T37790| DCD	|$LN5@SetCMSIAud|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetCMSIAudioInfo@ACAudioHWContext@@QAAHPAU__CMSI_AUDIO_SETTING@@@Z| PROC ; ACAudioHWContext::SetCMSIAudioInfo

; 288  : {

  00000		 |$LN5@SetCMSIAud|
  00000		 |$M37787|

; 289  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: SetCMSIAudioInfo\r\n")));
; 290  : #ifdef OMAP730
; 291  : #ifndef SHIP_BUILD
; 292  :     CAutoLock cs(&m_csModemDevice);
; 293  : 
; 294  :     DWORD dwRet;
; 295  : 
; 296  :     // Open the modem device in case it is not opened yet.
; 297  :     if (!OpenModemDevice())
; 298  :     {
; 299  :         return FALSE;
; 300  :     }
; 301  : 
; 302  :     CSMI_INFO_GC_AUDIO_VOICE_REQ  audioReq;
; 303  :     audioReq.Uplink = pInfo->fUpLink;
; 304  :     audioReq.Mute   = pInfo->fMute;
; 305  :     audioReq.Volume = pInfo->bVolume;
; 306  : 
; 307  :     if (!DeviceIoCtrl(  m_hGsmDev,
; 308  :                         GC_AUDIO_VOICE_REQ,
; 309  :                         (LPVOID)&audioReq,
; 310  :                         sizeof(CSMI_INFO_GC_AUDIO_VOICE_REQ),
; 311  :                         NULL,
; 312  :                         0,
; 313  :                         &dwRet,
; 314  :                         NULL))
; 315  :     {
; 316  :         ERRORMSG(1, (TEXT("AC: GC_AUDIO_VOICE_REQ..failed\r\n")));
; 317  :         return FALSE;
; 318  :     }
; 319  : #endif
; 320  : 
; 321  : 
; 322  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: CSMI_INFO_GC_AUDIO_VOICE_REQ:...OK\r\n")));
; 323  : #endif
; 324  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 325  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37788|

			 ENDP  ; |?SetCMSIAudioInfo@ACAudioHWContext@@QAAHPAU__CMSI_AUDIO_SETTING@@@Z|, ACAudioHWContext::SetCMSIAudioInfo

	EXPORT	|?GetCMSIAudioInfo@ACAudioHWContext@@QAAHPAU__CMSI_AUDIO_SETTING@@@Z| ; ACAudioHWContext::GetCMSIAudioInfo

  00000			 AREA	 |.pdata|, PDATA
|$T37799| DCD	|$LN5@GetCMSIAud|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetCMSIAudioInfo@ACAudioHWContext@@QAAHPAU__CMSI_AUDIO_SETTING@@@Z| PROC ; ACAudioHWContext::GetCMSIAudioInfo

; 335  : {

  00000		 |$LN5@GetCMSIAud|
  00000		 |$M37796|

; 336  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: GetCMSIAudioInfo:...OK\r\n")));
; 337  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 338  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37797|

			 ENDP  ; |?GetCMSIAudioInfo@ACAudioHWContext@@QAAHPAU__CMSI_AUDIO_SETTING@@@Z|, ACAudioHWContext::GetCMSIAudioInfo

	EXPORT	|?SetEACAudioInfo@ACAudioHWContext@@QAAHPAU__EAC_AUDIO_SETTING@@@Z| ; ACAudioHWContext::SetEACAudioInfo

  00000			 AREA	 |.pdata|, PDATA
|$T37808| DCD	|$LN5@SetEACAudi|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetEACAudioInfo@ACAudioHWContext@@QAAHPAU__EAC_AUDIO_SETTING@@@Z| PROC ; ACAudioHWContext::SetEACAudioInfo

; 350  : {

  00000		 |$LN5@SetEACAudi|
  00000		 |$M37805|

; 351  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: SetEACAudioInfo\r\n")));
; 352  : #ifdef OMAP730 
; 353  : #ifndef SHIP_BUILD
; 354  :     USHORT usVal, usBak;
; 355  :     int i;
; 356  : 
; 357  :     if (pInfo->S != INREG16(&m_pEACRegisters->ASTCTR))
; 358  :     {
; 359  :         OUTREG16(&m_pEACRegisters->ASTCTR, pInfo->S);
; 360  :     }
; 361  : 
; 362  :     usBak=INREG16(&m_pEACRegisters->AMSCFR);
; 363  : 
; 364  :     usVal=0;
; 365  :     // switches K1-K12
; 366  :     for (i=0;i<12;i++)
; 367  :         if (pInfo->K[i])
; 368  :             usVal |=(1 << i);
; 369  : 
; 370  :     if (usBak != usVal)
; 371  :         OUTREG16(&m_pEACRegisters->AMSCFR,usVal);
; 372  : 
; 373  :     // DMA gain
; 374  :     if (pInfo->DMAVOL!=INREG16(&m_pEACRegisters->AMVCTR))
; 375  :         OUTREG16(&m_pEACRegisters->AMVCTR,pInfo->DMAVOL);
; 376  : 
; 377  :     if (pInfo->M[0]!=INREG16(&m_pEACRegisters->AM1VCTR))
; 378  :         OUTREG16(&m_pEACRegisters->AM1VCTR,pInfo->M[0]);
; 379  : 
; 380  :     if (pInfo->M[1]!=INREG16(&m_pEACRegisters->AM2VCTR))
; 381  :         OUTREG16(&m_pEACRegisters->AM2VCTR,pInfo->M[1]);
; 382  : 
; 383  :     if (pInfo->M[2]!=INREG16(&m_pEACRegisters->AM3VCTR))
; 384  :         OUTREG16(&m_pEACRegisters->AM3VCTR,pInfo->M[2]);
; 385  : #endif
; 386  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: SetEACAudioInfo:...OK\r\n")));
; 387  : #endif
; 388  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 389  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37806|

			 ENDP  ; |?SetEACAudioInfo@ACAudioHWContext@@QAAHPAU__EAC_AUDIO_SETTING@@@Z|, ACAudioHWContext::SetEACAudioInfo

	EXPORT	|?GetEACAudioInfo@ACAudioHWContext@@QAAHPAU__EAC_AUDIO_SETTING@@@Z| ; ACAudioHWContext::GetEACAudioInfo

  00000			 AREA	 |.pdata|, PDATA
|$T37817| DCD	|$LN5@GetEACAudi|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetEACAudioInfo@ACAudioHWContext@@QAAHPAU__EAC_AUDIO_SETTING@@@Z| PROC ; ACAudioHWContext::GetEACAudioInfo

; 400  : {

  00000		 |$LN5@GetEACAudi|
  00000		 |$M37814|

; 401  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: GetEACAudioInfo\r\n")));
; 402  : #ifdef OMAP730
; 403  : #ifndef SHIP_BUILD
; 404  :     USHORT usVal;
; 405  :     int i;
; 406  : 
; 407  :     pInfo->S = INREG16(&m_pEACRegisters->ASTCTR);
; 408  : 
; 409  :     // switches K1-K12
; 410  :     usVal = INREG16(&m_pEACRegisters->AMSCFR);
; 411  :     for (i=0;i<12;i++)
; 412  :         pInfo->K[i] = (usVal & (1 << i))!=0;
; 413  : 
; 414  :     // DMA gain
; 415  :     pInfo->DMAVOL = INREG16(&m_pEACRegisters->AMVCTR);
; 416  : 
; 417  :     pInfo->M[0] = INREG16(&m_pEACRegisters->AM1VCTR);
; 418  :     pInfo->M[1] = INREG16(&m_pEACRegisters->AM2VCTR);
; 419  :     pInfo->M[2] = INREG16(&m_pEACRegisters->AM3VCTR);
; 420  : #endif
; 421  : #endif
; 422  : 
; 423  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: GetEACAudioInfo:...OK\r\n")));
; 424  : 
; 425  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 426  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37815|

			 ENDP  ; |?GetEACAudioInfo@ACAudioHWContext@@QAAHPAU__EAC_AUDIO_SETTING@@@Z|, ACAudioHWContext::GetEACAudioInfo

	EXPORT	|?ModemNetworkEnabled@ACAudioHWContext@@AAAHH@Z| ; ACAudioHWContext::ModemNetworkEnabled
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37859| DCD	|$LN16@ModemNetwo|
	DCD	0x40000901
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\audiomodem.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ModemNetworkEnabled@ACAudioHWContext@@AAAHH@Z| PROC ; ACAudioHWContext::ModemNetworkEnabled

; 438  : {

  00000		 |$LN16@ModemNetwo|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37856|
  00004	e1a04000	 mov         r4, r0

; 439  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: ModemNetworkEnabled:...%d\r\n"), fEnable));
; 440  : 
; 441  :     SetModemDevice(fEnable);

  00008	e2840e11	 add         r0, r4, #0x11, 28
  0000c	eb000000	 bl          EnterCriticalSection
  00010	e2840e11	 add         r0, r4, #0x11, 28
  00014	eb000000	 bl          LeaveCriticalSection

; 442  : 
; 443  :     return TRUE;

  00018	e3a00001	 mov         r0, #1

; 444  : }

  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M37857|

			 ENDP  ; |?ModemNetworkEnabled@ACAudioHWContext@@AAAHH@Z|, ACAudioHWContext::ModemNetworkEnabled

	EXPORT	|?InputStreamOpened@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::InputStreamOpened
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37885| DCD	|$LN14@InputStrea|
	DCD	0x40000901
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\audiomodem.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InputStreamOpened@ACAudioHWContext@@UAAHXZ| PROC ; ACAudioHWContext::InputStreamOpened

; 454  : {

  00000		 |$LN14@InputStrea|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37882|
  00004	e1a04000	 mov         r4, r0

; 455  :     CAutoLock cs(&m_csModemDevice);

  00008	e2840e11	 add         r0, r4, #0x11, 28
  0000c	eb000000	 bl          EnterCriticalSection

; 456  : 
; 457  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: InputStreamOpened\r\n")));
; 458  :     // Open the modem device in case it is not opened yet.
; 459  :     if (!OpenModemDevice ())
; 460  :     {
; 461  :         return FALSE;
; 462  :     }
; 463  : 
; 464  : #ifdef OMAP730
; 465  :     CSMI_INFO_GC_AUDIO_VOICE_REQ     audioReq;
; 466  :     audioReq.Uplink = TRUE;                 // Uplink
; 467  :     audioReq.Mute   = FALSE;                // no mute
; 468  :     audioReq.Volume = GSM_UPLINK_VOLUME;    // Use default?
; 469  :     DWORD dwRet;
; 470  : 
; 471  :     if (!DeviceIoCtrl(  m_hGsmDev,
; 472  :                         GC_AUDIO_VOICE_REQ,
; 473  :                         (LPVOID)&audioReq,
; 474  :                         sizeof(CSMI_INFO_GC_AUDIO_VOICE_REQ),
; 475  :                         NULL,
; 476  :                         0,
; 477  :                         &dwRet,
; 478  :                         NULL)) {
; 479  :         ERRORMSG(1, (TEXT("AC: GC_AUDIO_VOICE_REQ..failed\r\n")));
; 480  :         return FALSE;
; 481  :     }
; 482  : 
; 483  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: Input GC_AUDIO_VOICE_REQ:...0x%x\r\n"),
; 484  :                audioReq.Volume));
; 485  : #endif
; 486  :     return TRUE;

  00010	e2840e11	 add         r0, r4, #0x11, 28
  00014	eb000000	 bl          LeaveCriticalSection
  00018	e3a00001	 mov         r0, #1

; 487  : }

  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M37883|

			 ENDP  ; |?InputStreamOpened@ACAudioHWContext@@UAAHXZ|, ACAudioHWContext::InputStreamOpened

	EXPORT	|?InputStreamClosed@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::InputStreamClosed
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37903| DCD	|$LN9@InputStrea@2|
	DCD	0x40000901
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\audiomodem.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InputStreamClosed@ACAudioHWContext@@UAAHXZ| PROC ; ACAudioHWContext::InputStreamClosed

; 498  : {

  00000		 |$LN9@InputStrea@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37900|
  00004	e1a04000	 mov         r4, r0

; 499  :     CAutoLock cs(&m_csModemDevice);

  00008	e2840e11	 add         r0, r4, #0x11, 28
  0000c	eb000000	 bl          EnterCriticalSection

; 500  : 
; 501  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: InputStreamClosed\r\n")));
; 502  : #ifdef OMAP730
; 503  :     // Open the modem device in case it is not opened yet.
; 504  :     if (!OpenModemDevice())
; 505  :     {
; 506  :         return FALSE;
; 507  :     }
; 508  : 
; 509  :     CSMI_INFO_GC_AUDIO_VOICE_REQ     audioReq;
; 510  :     audioReq.Uplink = TRUE;                     // Uplink
; 511  :     audioReq.Mute   = TRUE;                     // Mute
; 512  :     audioReq.Volume = GSM_UPLINK_VOLUME;        // Use default?
; 513  :     DWORD dwRet;
; 514  : 
; 515  :     if (!DeviceIoCtrl(  m_hGsmDev,
; 516  :                         GC_AUDIO_VOICE_REQ,
; 517  :                         (LPVOID)&audioReq,
; 518  :                         sizeof(CSMI_INFO_GC_AUDIO_VOICE_REQ),
; 519  :                         NULL,
; 520  :                         0,
; 521  :                         &dwRet,
; 522  :                         NULL)) {
; 523  :         ERRORMSG(1, (TEXT("AC: GC_AUDIO_VOICE_REQ..failed\r\n")));
; 524  :         return FALSE;
; 525  :     }
; 526  : 
; 527  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: InputStreamClosed:...\r\n")));
; 528  : #endif
; 529  :     return TRUE;

  00010	e2840e11	 add         r0, r4, #0x11, 28
  00014	eb000000	 bl          LeaveCriticalSection
  00018	e3a00001	 mov         r0, #1

; 530  : }

  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M37901|

			 ENDP  ; |?InputStreamClosed@ACAudioHWContext@@UAAHXZ|, ACAudioHWContext::InputStreamClosed

	EXPORT	|?OutputStreamOpened@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::OutputStreamOpened

  00000			 AREA	 |.pdata|, PDATA
|$T37912| DCD	|$LN5@OutputStre|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OutputStreamOpened@ACAudioHWContext@@UAAHXZ| PROC ; ACAudioHWContext::OutputStreamOpened

; 540  : {

  00000		 |$LN5@OutputStre|
  00000		 |$M37909|

; 541  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 542  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37910|

			 ENDP  ; |?OutputStreamOpened@ACAudioHWContext@@UAAHXZ|, ACAudioHWContext::OutputStreamOpened

	EXPORT	|?OutputStreamClosed@ACAudioHWContext@@UAAHXZ| ; ACAudioHWContext::OutputStreamClosed

  00000			 AREA	 |.pdata|, PDATA
|$T37921| DCD	|$LN5@OutputStre@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?OutputStreamClosed@ACAudioHWContext@@UAAHXZ| PROC ; ACAudioHWContext::OutputStreamClosed

; 552  : {

  00000		 |$LN5@OutputStre@2|
  00000		 |$M37918|

; 553  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 554  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M37919|

			 ENDP  ; |?OutputStreamClosed@ACAudioHWContext@@UAAHXZ|, ACAudioHWContext::OutputStreamClosed

	EXPORT	|?SetSideTone@ACAudioHWContext@@AAAHH@Z| ; ACAudioHWContext::SetSideTone
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37947| DCD	|$LN14@SetSideTon|
	DCD	0x40000901
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\audiomodem.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetSideTone@ACAudioHWContext@@AAAHH@Z| PROC ; ACAudioHWContext::SetSideTone

; 603  : {

  00000		 |$LN14@SetSideTon|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37944|
  00004	e1a04000	 mov         r4, r0

; 604  :     CAutoLock cs(&m_csModemDevice);

  00008	e2840e11	 add         r0, r4, #0x11, 28
  0000c	eb000000	 bl          EnterCriticalSection

; 605  : 
; 606  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: SetSideTone\r\n")));
; 607  :     // Open the modem device in case it is not opened yet.
; 608  :     if (!OpenModemDevice())
; 609  :     {
; 610  :         return FALSE;
; 611  :     }
; 612  : 
; 613  : #ifdef OMAP730
; 614  :     DWORD dwRet;
; 615  :     CSMI_INFO_GC_AUDIO_SIDETONE_REQ  sidetoneReq;
; 616  :     if (fEnable)
; 617  :     {
; 618  :         sidetoneReq.Volume = 
; 619  :         m_bHeadsetActive ? (UINT8)m_nSidetoneHeadset : (UINT8)m_nSidetoneSpeaker;
; 620  :     }
; 621  :     else 
; 622  :     {
; 623  :         sidetoneReq.Volume = 0;    
; 624  :     }
; 625  : 
; 626  :     // Control sidetone
; 627  :     if (!DeviceIoCtrl(  m_hGsmDev,
; 628  :                         GC_AUDIO_SIDETONE_REQ,
; 629  :                         (LPVOID)&sidetoneReq,
; 630  :                         sizeof(CSMI_INFO_GC_AUDIO_SIDETONE_REQ),
; 631  :                         NULL,
; 632  :                         0,
; 633  :                         &dwRet,
; 634  :                         NULL)) {
; 635  :         ERRORMSG(1, (TEXT("GC_AUDIO_SIDETONE_REQ..failed\r\n")));
; 636  :         return FALSE;
; 637  :     }
; 638  : 
; 639  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: GC_AUDIO_SIDETONE_REQ:...\r\n")));
; 640  : 
; 641  :     CSMI_INFO_GC_AUDIO_ECHOCANC_REQ  echocancReq;
; 642  :     if (fEnable)
; 643  :         echocancReq.Algorithm = 0x0001;   // All bits reset
; 644  :     else
; 645  :         echocancReq.Algorithm = 0x029B;   // -18 dB
; 646  : 
; 647  :     // Control echo cancellation
; 648  :     if (!DeviceIoCtrl(  m_hGsmDev,
; 649  :                         GC_AUDIO_ECHOCANC_REQ,
; 650  :                         (LPVOID)&echocancReq,
; 651  :                         sizeof(CSMI_INFO_GC_AUDIO_ECHOCANC_REQ),
; 652  :                         NULL,
; 653  :                         0,
; 654  :                         &dwRet,
; 655  :                         NULL)) {
; 656  :         ERRORMSG(1, (TEXT("GC_AUDIO_ECHOCANC_REQ..failed\r\n")));
; 657  :         return FALSE;
; 658  :     }
; 659  : 
; 660  :     DEBUGMSG( ZONE_MODEM, (TEXT("AC: GC_AUDIO_ECHOCANC_REQ:...\r\n")));
; 661  : 
; 662  : #endif
; 663  : 
; 664  :     return TRUE;

  00010	e2840e11	 add         r0, r4, #0x11, 28
  00014	eb000000	 bl          LeaveCriticalSection
  00018	e3a00001	 mov         r0, #1

; 665  : }

  0001c	e8bd4010	 ldmia       sp!, {r4, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M37945|

			 ENDP  ; |?SetSideTone@ACAudioHWContext@@AAAHH@Z|, ACAudioHWContext::SetSideTone

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?HandleExtMessage@ACAudioHWContext@@UAAHKPAEK0KPAK@Z| ; ACAudioHWContext::HandleExtMessage
	EXPORT	|??_C@_1JI@OIOFJCAA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@ODPMJGAI@?$AAW?$AAA?$AAV?$AAE?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CJ?$AA?0@| [ DATA ] ; `string'
	IMPORT	|?SetAMRcapture@ACAudioHWContext@@AAAHH@Z| ; ACAudioHWContext::SetAMRcapture
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T38005| DCD	|$LN70@HandleExtM|
	DCD	0xc0009602

  00000			 AREA	 |.xdata|, DATA
|$T38001| DCD	0xffffffec

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@OIOFJCAA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "2", 0x0, "4", 0x0, "2"
	DCB	0x0, "0", 0x0, "_", 0x0, "M", 0x0, "S", 0x0, "_", 0x0, "V"
	DCB	0x0, "1", 0x0, "\\", 0x0, "W", 0x0, "A", 0x0, "V", 0x0, "E"
	DCB	0x0, "D", 0x0, "E", 0x0, "V", 0x0, "\\", 0x0, ".", 0x0, "\\"
	DCB	0x0, "a", 0x0, "u", 0x0, "d", 0x0, "i", 0x0, "o", 0x0, "m"
	DCB	0x0, "o", 0x0, "d", 0x0, "e", 0x0, "m", 0x0, ".", 0x0, "c"
	DCB	0x0, "p", 0x0, "p", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@ODPMJGAI@?$AAW?$AAA?$AAV?$AAE?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CJ?$AA?0@| DCB "W"
	DCB	0x0, "A", 0x0, "V", 0x0, "E", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "x", 0x0, "x", 0x0, "x", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "f", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "3", 0x0, "X"
	DCB	0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T38001|

  00008		 |?HandleExtMessage@ACAudioHWContext@@UAAHKPAEK0KPAK@Z| PROC ; ACAudioHWContext::HandleExtMessage

; 682  : {

  00008		 |$LN70@HandleExtM|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24dd048	 sub         sp, sp, #0x48
  00010		 |$M38002|
  00010	e1a05002	 mov         r5, r2
  00014	e1a02000	 mov         r2, r0
  00018	e1a06003	 mov         r6, r3
  0001c	e1a04001	 mov         r4, r1
  00020	e59fe234	 ldr         lr, [pc, #0x234]
  00024	e59ee000	 ldr         lr, [lr]
  00028	e58de044	 str         lr, [sp, #0x44]

; 683  :     DWORD data;
; 684  : 
; 685  :     switch (dwCode)

  0002c	e3a037da	 mov         r3, #0xDA, 14
  00030	e3833018	 orr         r3, r3, #0x18
  00034	e59d0058	 ldr         r0, [sp, #0x58]
  00038	e59de060	 ldr         lr, [sp, #0x60]
  0003c	e1540003	 cmp         r4, r3
  00040	8a00003c	 bhi         |$LN46@HandleExtM|
  00044	0a000030	 beq         |$LN22@HandleExtM|
  00048	e3a037da	 mov         r3, #0xDA, 14
  0004c	e3830004	 orr         r0, r3, #4
  00050	e1540000	 cmp         r4, r0
  00054	0a000021	 beq         |$LN39@HandleExtM|
  00058	e3a037da	 mov         r3, #0xDA, 14
  0005c	e3833008	 orr         r3, r3, #8
  00060	e1540003	 cmp         r4, r3
  00064	0a000019	 beq         |$LN36@HandleExtM|
  00068	e3a037da	 mov         r3, #0xDA, 14
  0006c	e383300c	 orr         r3, r3, #0xC
  00070	e1540003	 cmp         r4, r3
  00074	0a000015	 beq         |$LN36@HandleExtM|
  00078	e3a037da	 mov         r3, #0xDA, 14
  0007c	e3833010	 orr         r3, r3, #0x10
  00080	e1540003	 cmp         r4, r3
  00084	0a000011	 beq         |$LN36@HandleExtM|
  00088	e3a037da	 mov         r3, #0xDA, 14
  0008c	e3833014	 orr         r3, r3, #0x14
  00090	e1540003	 cmp         r4, r3
  00094	1a000037	 bne         |$LN1@HandleExtM|

; 697  : 
; 698  :         // Tramsmitting volume
; 699  :         case IOCTL_VOICE_TX_VOLUME_SET:
; 700  :             if (pdwActualOut) *pdwActualOut = sizeof (DWORD);
; 701  :             if (CeSafeCopyMemory(&data, pBufIn, sizeof(DWORD)) == 0) break;
; 702  :             return SetVoiceTxGain(data);
; 703  : 
; 704  :         case IOCTL_VOICE_TX_VOLUME_GET:
; 705  :             if (pdwActualOut) *pdwActualOut = sizeof (DWORD);
; 706  :             if (CeSafeCopyMemory(&data, pBufIn, sizeof(DWORD)) == 0) break;
; 707  :             return GetVoiceTxGain(&data);
; 708  : 
; 709  :         case IOCTL_CMSI_AUDIO_INFO_SET:
; 710  :             {
; 711  :                 CMSI_AUDIO_SETTING audio;
; 712  :                 if (pBufIn == NULL || dwLenIn<sizeof(CMSI_AUDIO_SETTING)) return FALSE;

  00098	e3550000	 cmp         r5, #0
  0009c	0a000007	 beq         |$LN25@HandleExtM|
  000a0	e3560003	 cmp         r6, #3
  000a4	3a000005	 bcc         |$LN25@HandleExtM|

; 713  :                 if (pdwActualOut) *pdwActualOut = 0;

  000a8	e35e0000	 cmp         lr, #0
  000ac	13a03000	 movne       r3, #0
  000b0	158e3000	 strne       r3, [lr]

; 714  :                 if (CeSafeCopyMemory(&audio, pBufIn, sizeof(audio)) == 0) break;

  000b4	e3a02003	 mov         r2, #3
  000b8	e28d0004	 add         r0, sp, #4

; 715  :                 return SetCMSIAudioInfo(&audio);

  000bc	ea00004c	 b           |$LN66@HandleExtM|
  000c0		 |$LN25@HandleExtM|

; 697  : 
; 698  :         // Tramsmitting volume
; 699  :         case IOCTL_VOICE_TX_VOLUME_SET:
; 700  :             if (pdwActualOut) *pdwActualOut = sizeof (DWORD);
; 701  :             if (CeSafeCopyMemory(&data, pBufIn, sizeof(DWORD)) == 0) break;
; 702  :             return SetVoiceTxGain(data);
; 703  : 
; 704  :         case IOCTL_VOICE_TX_VOLUME_GET:
; 705  :             if (pdwActualOut) *pdwActualOut = sizeof (DWORD);
; 706  :             if (CeSafeCopyMemory(&data, pBufIn, sizeof(DWORD)) == 0) break;
; 707  :             return GetVoiceTxGain(&data);
; 708  : 
; 709  :         case IOCTL_CMSI_AUDIO_INFO_SET:
; 710  :             {
; 711  :                 CMSI_AUDIO_SETTING audio;
; 712  :                 if (pBufIn == NULL || dwLenIn<sizeof(CMSI_AUDIO_SETTING)) return FALSE;

  000c0	e59d0044	 ldr         r0, [sp, #0x44]
  000c4	eb000000	 bl          __security_check_cookie
  000c8	e3a04000	 mov         r4, #0
  000cc	ea00005b	 b           |$LN42@HandleExtM|
  000d0		 |$LN36@HandleExtM|

; 692  : 
; 693  :         case IOCTL_VOICE_RX_VOLUME_GET:
; 694  :             if (pdwActualOut) *pdwActualOut = sizeof (DWORD);

  000d0	e35e0000	 cmp         lr, #0
  000d4	0a000005	 beq         |$LN38@HandleExtM|
  000d8	e3a03004	 mov         r3, #4

; 695  :             if (CeSafeCopyMemory(&data, pBufIn, sizeof(DWORD)) == 0) break;
; 696  :             return GetVoiceRxGain(&data);

  000dc	ea000002	 b           |$LN64@HandleExtM|
  000e0		 |$LN39@HandleExtM|

; 686  :     {
; 687  :         // Receiving volume
; 688  :         case IOCTL_VOICE_RX_VOLUME_SET:
; 689  :             if (pdwActualOut) *pdwActualOut = 0;

  000e0	e35e0000	 cmp         lr, #0
  000e4	0a000001	 beq         |$LN38@HandleExtM|
  000e8	e3a03000	 mov         r3, #0
  000ec		 |$LN64@HandleExtM|
  000ec	e58e3000	 str         r3, [lr]
  000f0		 |$LN38@HandleExtM|

; 690  :             if (CeSafeCopyMemory(&data, pBufIn, sizeof(DWORD)) == 0) break;

  000f0	e3a02004	 mov         r2, #4
  000f4	e28d0000	 add         r0, sp, #0
  000f8	ea00003d	 b           |$LN66@HandleExtM|
  000fc		 |$LN8@HandleExtM|

; 691  :             return SetVoiceRxGain(data);

  000fc	e59d0044	 ldr         r0, [sp, #0x44]
  00100	eb000000	 bl          __security_check_cookie
  00104	e3a04001	 mov         r4, #1
  00108	ea00004c	 b           |$LN42@HandleExtM|
  0010c		 |$LN22@HandleExtM|

; 716  :             }
; 717  :         case IOCTL_CMSI_AUDIO_INFO_GET:
; 718  :             {
; 719  :                 CMSI_AUDIO_SETTING audio;
; 720  :                 if (pBufOut == NULL || dwLenOut<sizeof(CMSI_AUDIO_SETTING)) return FALSE;

  0010c	e3500000	 cmp         r0, #0
  00110	0affffea	 beq         |$LN25@HandleExtM|
  00114	e59d305c	 ldr         r3, [sp, #0x5C]
  00118	e3530003	 cmp         r3, #3
  0011c	3affffe7	 bcc         |$LN25@HandleExtM|

; 721  :                 if (pdwActualOut) *pdwActualOut = sizeof(CMSI_AUDIO_SETTING);

  00120	e35e0000	 cmp         lr, #0
  00124	13a03003	 movne       r3, #3
  00128	158e3000	 strne       r3, [lr]

; 722  :                 if (GetCMSIAudioInfo(&audio)) 
; 723  :                 {
; 724  :                     if (CeSafeCopyMemory(pBufOut, &audio, sizeof(audio)) == 0) break;

  0012c	e3a02003	 mov         r2, #3
  00130	e28d1004	 add         r1, sp, #4

; 725  :                     return TRUE;

  00134	ea00002f	 b           |$LN65@HandleExtM|
  00138		 |$LN46@HandleExtM|

; 716  :             }
; 717  :         case IOCTL_CMSI_AUDIO_INFO_GET:
; 718  :             {
; 719  :                 CMSI_AUDIO_SETTING audio;
; 720  :                 if (pBufOut == NULL || dwLenOut<sizeof(CMSI_AUDIO_SETTING)) return FALSE;

  00138	e3a037da	 mov         r3, #0xDA, 14
  0013c	e3833034	 orr         r3, r3, #0x34
  00140	e1540003	 cmp         r4, r3
  00144	0a000034	 beq         |$LN16@HandleExtM|
  00148	e3a037da	 mov         r3, #0xDA, 14
  0014c	e3833038	 orr         r3, r3, #0x38
  00150	e1540003	 cmp         r4, r3
  00154	0a00002b	 beq         |$LN14@HandleExtM|
  00158	e3a037da	 mov         r3, #0xDA, 14
  0015c	e3833050	 orr         r3, r3, #0x50
  00160	e1540003	 cmp         r4, r3
  00164	0a000019	 beq         |$LN12@HandleExtM|
  00168	e3a037da	 mov         r3, #0xDA, 14
  0016c	e3833054	 orr         r3, r3, #0x54
  00170	e1540003	 cmp         r4, r3
  00174	0a00000a	 beq         |$LN7@HandleExtM|
  00178		 |$LN1@HandleExtM|

; 754  :                 }
; 755  :             }
; 756  :             break;
; 757  : 
; 758  :         default:
; 759  :             ERRORMSG(1, (TEXT("WAVE: Unknown IOCTL_xxx(0x%08X), device = 0x%04X, function = 0x%03X \r\n"),
; 760  : 						dwCode, dwCode >> 16, (dwCode >> 2) & 0xFFF));

  00178	e59f10d8	 ldr         r1, [pc, #0xD8]
  0017c	e59f00d0	 ldr         r0, [pc, #0xD0]
  00180	e3a02fbe	 mov         r2, #0xBE, 30
  00184	eb000000	 bl          NKDbgPrintfW
  00188	e59f00c0	 ldr         r0, [pc, #0xC0]
  0018c	e1a03904	 mov         r3, r4, lsl #18
  00190	e1a03a23	 mov         r3, r3, lsr #20
  00194	e1a02824	 mov         r2, r4, lsr #16
  00198	e1a01004	 mov         r1, r4
  0019c	eb000000	 bl          NKDbgPrintfW

; 761  :             break;

  001a0	eaffffc6	 b           |$LN25@HandleExtM|
  001a4		 |$LN7@HandleExtM|

; 743  :                 return SetEACAudioInfo(&audio);
; 744  :             }
; 745  : 
; 746  :         case IOCTL_EAC_INFO_GET:
; 747  :             {
; 748  :                 EAC_AUDIO_SETTING audio;
; 749  :                 if (pBufOut == NULL || dwLenOut<sizeof(EAC_AUDIO_SETTING)) return FALSE;

  001a4	e3500000	 cmp         r0, #0
  001a8	0affffc4	 beq         |$LN25@HandleExtM|
  001ac	e59d305c	 ldr         r3, [sp, #0x5C]
  001b0	e353003c	 cmp         r3, #0x3C
  001b4	3affffc1	 bcc         |$LN25@HandleExtM|

; 750  :                 if (pdwActualOut) *pdwActualOut = sizeof(EAC_AUDIO_SETTING);

  001b8	e35e0000	 cmp         lr, #0
  001bc	13a0303c	 movne       r3, #0x3C
  001c0	158e3000	 strne       r3, [lr]

; 751  :                 if (GetEACAudioInfo(&audio)) {
; 752  :                     if (CeSafeCopyMemory(pBufOut, &audio, sizeof(audio)) == 0) break;

  001c4	e3a0203c	 mov         r2, #0x3C
  001c8	e28d1008	 add         r1, sp, #8

; 753  :                     return TRUE;

  001cc	ea000009	 b           |$LN65@HandleExtM|
  001d0		 |$LN12@HandleExtM|

; 736  : 
; 737  :         case IOCTL_EAC_INFO_SET:
; 738  :             {
; 739  :                 EAC_AUDIO_SETTING audio;
; 740  :                 if (pBufIn == NULL || dwLenIn<sizeof(EAC_AUDIO_SETTING)) return FALSE;

  001d0	e3550000	 cmp         r5, #0
  001d4	0affffb9	 beq         |$LN25@HandleExtM|
  001d8	e356003c	 cmp         r6, #0x3C
  001dc	3affffb7	 bcc         |$LN25@HandleExtM|

; 741  :                 if (pdwActualOut) *pdwActualOut = 0;

  001e0	e35e0000	 cmp         lr, #0
  001e4	13a03000	 movne       r3, #0
  001e8	158e3000	 strne       r3, [lr]

; 742  :                 if (CeSafeCopyMemory(&audio, pBufIn, sizeof(audio)) == 0) break;

  001ec	e3a0203c	 mov         r2, #0x3C
  001f0	e28d0008	 add         r0, sp, #8
  001f4		 |$LN66@HandleExtM|
  001f4	e1a01005	 mov         r1, r5
  001f8		 |$LN65@HandleExtM|
  001f8	eb000000	 bl          CeSafeCopyMemory
  001fc	e3500000	 cmp         r0, #0
  00200	1affffbd	 bne         |$LN8@HandleExtM|

; 762  :     }
; 763  :     return FALSE;

  00204	eaffffad	 b           |$LN25@HandleExtM|
  00208		 |$LN14@HandleExtM|

; 732  : 
; 733  :         case IOCTL_STOP_AMR_CAPTURE:
; 734  :             if (pdwActualOut) *pdwActualOut = 0;

  00208	e35e0000	 cmp         lr, #0
  0020c	13a03000	 movne       r3, #0
  00210	158e3000	 strne       r3, [lr]

; 735  :             return SetAMRcapture(FALSE);

  00214	e3a01000	 mov         r1, #0
  00218	ea000003	 b           |$LN63@HandleExtM|
  0021c		 |$LN16@HandleExtM|

; 726  :                 }
; 727  :                 break;
; 728  :             }
; 729  :         case IOCTL_START_AMR_CAPTURE:
; 730  :             if (pdwActualOut) *pdwActualOut = 0;

  0021c	e35e0000	 cmp         lr, #0
  00220	13a03000	 movne       r3, #0
  00224	158e3000	 strne       r3, [lr]

; 731  :             return SetAMRcapture(TRUE);

  00228	e3a01001	 mov         r1, #1
  0022c		 |$LN63@HandleExtM|
  0022c	e1a00002	 mov         r0, r2
  00230	eb000000	 bl          |?SetAMRcapture@ACAudioHWContext@@AAAHH@Z|
  00234	e1a04000	 mov         r4, r0
  00238	e59d0044	 ldr         r0, [sp, #0x44]
  0023c	eb000000	 bl          __security_check_cookie
  00240		 |$LN42@HandleExtM|

; 764  : }

  00240	e1a00004	 mov         r0, r4
  00244	e28dd048	 add         sp, sp, #0x48
  00248	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0024c	e12fff1e	 bx          lr
  00250		 |$LN71@HandleExtM|
  00250		 |$LN72@HandleExtM|
  00250	00000000	 DCD         |??_C@_1IO@ODPMJGAI@?$AAW?$AAA?$AAV?$AAE?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$CJ?$AA?0@|
  00254		 |$LN73@HandleExtM|
  00254	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00258		 |$LN74@HandleExtM|
  00258	00000000	 DCD         |??_C@_1JI@OIOFJCAA@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0025c		 |$LN75@HandleExtM|
  0025c	00000000	 DCD         |__security_cookie|
  00260		 |$M38003|

			 ENDP  ; |?HandleExtMessage@ACAudioHWContext@@UAAHKPAEK0KPAK@Z|, ACAudioHWContext::HandleExtMessage

	END
