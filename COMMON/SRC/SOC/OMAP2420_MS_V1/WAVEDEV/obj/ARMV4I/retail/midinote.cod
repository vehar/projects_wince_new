; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\midinote.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?PitchTable@CMidiNote@@0QBIB| [ DATA ]	; CMidiNote::PitchTable
	EXPORT	|?SineTable@CMidiNote@@0QBFB| [ DATA ]	; CMidiNote::SineTable

  00000			 AREA	 |.rdata|, DATA, READONLY
|?PitchTable@CMidiNote@@0QBIB| DCD 0x184cbb6		; CMidiNote::PitchTable
	DCD	0x19bea2d
	DCD	0x1b46892
	DCD	0x1ce5bd2
	DCD	0x1e9da1a
	DCD	0x206fae6
	DCD	0x225d719
	DCD	0x2468912
	DCD	0x2692cbf
	DCD	0x28ddfb9
	DCD	0x2b4c15a
	DCD	0x2ddf2db
|?SineTable@CMidiNote@@0QBFB| DCW 0x0			; CMidiNote::SineTable
	DCW	0x324
	DCW	0x647
	DCW	0x96a
	DCW	0xc8b
	DCW	0xfab
	DCW	0x12c7
	DCW	0x15e1
	DCW	0x18f8
	DCW	0x1c0b
	DCW	0x1f19
	DCW	0x2223
	DCW	0x2527
	DCW	0x2826
	DCW	0x2b1e
	DCW	0x2e10
	DCW	0x30fb
	DCW	0x33de
	DCW	0x36b9
	DCW	0x398c
	DCW	0x3c56
	DCW	0x3f16
	DCW	0x41cd
	DCW	0x447a
	DCW	0x471c
	DCW	0x49b3
	DCW	0x4c3f
	DCW	0x4ebf
	DCW	0x5133
	DCW	0x539a
	DCW	0x55f4
	DCW	0x5842
	DCW	0x5a81
	DCW	0x5cb3
	DCW	0x5ed6
	DCW	0x60eb
	DCW	0x62f1
	DCW	0x64e7
	DCW	0x66ce
	DCW	0x68a5
	DCW	0x6a6c
	DCW	0x6c23
	DCW	0x6dc9
	DCW	0x6f5e
	DCW	0x70e1
	DCW	0x7254
	DCW	0x73b5
	DCW	0x7503
	DCW	0x7640
	DCW	0x776b
	DCW	0x7883
	DCW	0x7989
	DCW	0x7a7c
	DCW	0x7b5c
	DCW	0x7c29
	DCW	0x7ce2
	DCW	0x7d89
	DCW	0x7e1c
	DCW	0x7e9c
	DCW	0x7f08
	DCW	0x7f61
	DCW	0x7fa6
	DCW	0x7fd7
	DCW	0x7ff5
	DCW	0x7fff
	DCW	0x7ff5
	DCW	0x7fd7
	DCW	0x7fa6
	DCW	0x7f61
	DCW	0x7f08
	DCW	0x7e9c
	DCW	0x7e1c
	DCW	0x7d89
	DCW	0x7ce2
	DCW	0x7c29
	DCW	0x7b5c
	DCW	0x7a7c
	DCW	0x7989
	DCW	0x7883
	DCW	0x776b
	DCW	0x7640
	DCW	0x7503
	DCW	0x73b5
	DCW	0x7254
	DCW	0x70e1
	DCW	0x6f5e
	DCW	0x6dc9
	DCW	0x6c23
	DCW	0x6a6c
	DCW	0x68a5
	DCW	0x66ce
	DCW	0x64e7
	DCW	0x62f1
	DCW	0x60eb
	DCW	0x5ed6
	DCW	0x5cb3
	DCW	0x5a81
	DCW	0x5842
	DCW	0x55f4
	DCW	0x539a
	DCW	0x5133
	DCW	0x4ebf
	DCW	0x4c3f
	DCW	0x49b3
	DCW	0x471c
	DCW	0x447a
	DCW	0x41cd
	DCW	0x3f16
	DCW	0x3c56
	DCW	0x398c
	DCW	0x36b9
	DCW	0x33de
	DCW	0x30fb
	DCW	0x2e10
	DCW	0x2b1e
	DCW	0x2826
	DCW	0x2527
	DCW	0x2223
	DCW	0x1f19
	DCW	0x1c0b
	DCW	0x18f8
	DCW	0x15e1
	DCW	0x12c7
	DCW	0xfab
	DCW	0xc8b
	DCW	0x96a
	DCW	0x647
	DCW	0x324
	DCW	0x0
	DCW	0xfcdc
	DCW	0xf9b9
	DCW	0xf696
	DCW	0xf375
	DCW	0xf055
	DCW	0xed39
	DCW	0xea1f
	DCW	0xe708
	DCW	0xe3f5
	DCW	0xe0e7
	DCW	0xdddd
	DCW	0xdad9
	DCW	0xd7da
	DCW	0xd4e2
	DCW	0xd1f0
	DCW	0xcf05
	DCW	0xcc22
	DCW	0xc947
	DCW	0xc674
	DCW	0xc3aa
	DCW	0xc0ea
	DCW	0xbe33
	DCW	0xbb86
	DCW	0xb8e4
	DCW	0xb64d
	DCW	0xb3c1
	DCW	0xb141
	DCW	0xaecd
	DCW	0xac66
	DCW	0xaa0c
	DCW	0xa7be
	DCW	0xa57f
	DCW	0xa34d
	DCW	0xa12a
	DCW	0x9f15
	DCW	0x9d0f
	DCW	0x9b19
	DCW	0x9932
	DCW	0x975b
	DCW	0x9594
	DCW	0x93dd
	DCW	0x9237
	DCW	0x90a2
	DCW	0x8f1f
	DCW	0x8dac
	DCW	0x8c4b
	DCW	0x8afd
	DCW	0x89c0
	DCW	0x8895
	DCW	0x877d
	DCW	0x8677
	DCW	0x8584
	DCW	0x84a4
	DCW	0x83d7
	DCW	0x831e
	DCW	0x8277
	DCW	0x81e4
	DCW	0x8164
	DCW	0x80f8
	DCW	0x809f
	DCW	0x805a
	DCW	0x8029
	DCW	0x800b
	DCW	0x8001
	DCW	0x800b
	DCW	0x8029
	DCW	0x805a
	DCW	0x809f
	DCW	0x80f8
	DCW	0x8164
	DCW	0x81e4
	DCW	0x8277
	DCW	0x831e
	DCW	0x83d7
	DCW	0x84a4
	DCW	0x8584
	DCW	0x8677
	DCW	0x877d
	DCW	0x8895
	DCW	0x89c0
	DCW	0x8afd
	DCW	0x8c4b
	DCW	0x8dac
	DCW	0x8f1f
	DCW	0x90a2
	DCW	0x9237
	DCW	0x93dd
	DCW	0x9594
	DCW	0x975b
	DCW	0x9932
	DCW	0x9b19
	DCW	0x9d0f
	DCW	0x9f15
	DCW	0xa12a
	DCW	0xa34d
	DCW	0xa57f
	DCW	0xa7be
	DCW	0xaa0c
	DCW	0xac66
	DCW	0xaecd
	DCW	0xb141
	DCW	0xb3c1
	DCW	0xb64d
	DCW	0xb8e4
	DCW	0xbb86
	DCW	0xbe33
	DCW	0xc0ea
	DCW	0xc3aa
	DCW	0xc674
	DCW	0xc947
	DCW	0xcc22
	DCW	0xcf05
	DCW	0xd1f0
	DCW	0xd4e2
	DCW	0xd7da
	DCW	0xdad9
	DCW	0xdddd
	DCW	0xe0e7
	DCW	0xe3f5
	DCW	0xe708
	DCW	0xea1f
	DCW	0xed39
	DCW	0xf055
	DCW	0xf375
	DCW	0xf696
	DCW	0xf9b9
	DCW	0xfcdc
	DCW	0x0
	EXPORT	|?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteMoveToFreeList
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37405| DCD	|$LN11@NoteMoveTo|
	DCD	0x40000c00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteMoveToFreeList

; 96   :     {

  00000		 |$LN11@NoteMoveTo|
  00000		 |$M37402|

; 97   :         PLIST_ENTRY pListEntry = &pCMidiNote->m_Link;
; 98   :         RemoveEntryList(pListEntry);

  00000	e5912004	 ldr         r2, [r1, #4]
  00004	e5913000	 ldr         r3, [r1]

; 99   :         InsertTailList(&m_FreeList,pListEntry);

  00008	e2800e5f	 add         r0, r0, #0x5F, 28
  0000c	e5823000	 str         r3, [r2]
  00010	e5912000	 ldr         r2, [r1]
  00014	e5913004	 ldr         r3, [r1, #4]
  00018	e5823004	 str         r3, [r2, #4]
  0001c	e5903004	 ldr         r3, [r0, #4]
  00020	e8810009	 stmia       r1, {r0, r3}
  00024	e5831000	 str         r1, [r3]
  00028	e5801004	 str         r1, [r0, #4]

; 100  :     }

  0002c	e12fff1e	 bx          lr
  00030		 |$M37403|

			 ENDP  ; |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteMoveToFreeList

	EXPORT	|?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteDone
	IMPORT	|?Release@StreamContext@@QAAJXZ|	; StreamContext::Release

  00000			 AREA	 |.pdata|, PDATA
|$T37429| DCD	|$LN13@NoteDone|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteDone

; 110  :     {

  00000		 |$LN13@NoteDone|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37426|

; 111  :         NoteMoveToFreeList(pCMidiNote);

  00004	e5912004	 ldr         r2, [r1, #4]
  00008	e5913000	 ldr         r3, [r1]
  0000c	e280ee5f	 add         lr, r0, #0x5F, 28

; 112  :         Release();

  00010	e5823000	 str         r3, [r2]
  00014	e5912000	 ldr         r2, [r1]
  00018	e5913004	 ldr         r3, [r1, #4]
  0001c	e5823004	 str         r3, [r2, #4]
  00020	e59e3004	 ldr         r3, [lr, #4]
  00024	e581e000	 str         lr, [r1]
  00028	e5813004	 str         r3, [r1, #4]
  0002c	e5831000	 str         r1, [r3]
  00030	e58e1004	 str         r1, [lr, #4]
  00034	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 113  :     }

  00038	e49de004	 ldr         lr, [sp], #4
  0003c	e12fff1e	 bx          lr
  00040		 |$M37427|

			 ENDP  ; |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteDone

	EXPORT	|?GainChange@CMidiNote@@QAAXXZ|		; CMidiNote::GainChange
	IMPORT	|?MapNoteGain@CMidiStream@@QAAKK@Z|	; CMidiStream::MapNoteGain
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midinote.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37437| DCD	|$LN5@GainChange|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GainChange@CMidiNote@@QAAXXZ| PROC	; CMidiNote::GainChange

; 333  : {

  00000		 |$LN5@GainChange|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37434|
  00004	e1a04000	 mov         r4, r0

; 334  :     m_fxpGain = m_pMidiStream->MapNoteGain(m_dwGain);

  00008	e5941020	 ldr         r1, [r4, #0x20]
  0000c	e5940008	 ldr         r0, [r4, #8]
  00010	eb000000	 bl          |?MapNoteGain@CMidiStream@@QAAKK@Z|
  00014	e5840024	 str         r0, [r4, #0x24]

; 335  : }

  00018	e8bd4010	 ldmia       sp!, {r4, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M37435|

			 ENDP  ; |?GainChange@CMidiNote@@QAAXXZ|, CMidiNote::GainChange

	EXPORT	|?NoteOff@CMidiNote@@QAAJI@Z|		; CMidiNote::NoteOff
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T37449| DCD	|$LN7@NoteOff|
	DCD	0x40001101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteOff@CMidiNote@@QAAJI@Z| PROC	; CMidiNote::NoteOff

; 384  : {

  00000		 |$LN7@NoteOff|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37446|
  00004	e1a04000	 mov         r4, r0

; 385  :     // Calculate the number of samples left before we cross a 0 boundary at the middle or end of the table
; 386  :     DWORD SamplesLeft;
; 387  :     if (m_IndexDelta)

  00008	e594301c	 ldr         r3, [r4, #0x1C]
  0000c	e1b00003	 movs        r0, r3
  00010	0a000005	 beq         |$LN2@NoteOff|

; 388  :         {
; 389  :         SamplesLeft = ( ((0-m_Index)&0x7FFFFFFF) /m_IndexDelta) + 1;

  00014	e5943018	 ldr         r3, [r4, #0x18]
  00018	e2633000	 rsb         r3, r3, #0
  0001c	e3c31102	 bic         r1, r3, #2, 2
  00020	eb000000	 bl          __rt_udiv
  00024	e2803001	 add         r3, r0, #1

; 390  :         }
; 391  :     else

  00028	ea000000	 b           |$LN1@NoteOff|
  0002c		 |$LN2@NoteOff|

; 392  :         {
; 393  :         SamplesLeft=0;

  0002c	e3a03000	 mov         r3, #0
  00030		 |$LN1@NoteOff|

; 394  :         }
; 395  : 
; 396  :     m_dwBytesLeft = SamplesLeft * sizeof(HWSAMPLE) * OUTCHANNELS;

  00030	e1a03103	 mov         r3, r3, lsl #2
  00034	e5843028	 str         r3, [r4, #0x28]

; 397  :     DEBUGMSG(ZONE_MIDI, (TEXT("CMidiNote::NoteOff, m_Index = 0x%x, m_IndexDelta = 0x%x, m_dwBytesLeft = %d\r\n"),m_Index,m_IndexDelta,m_dwBytesLeft));
; 398  :     // m_pMidiStream->NoteDone(this);
; 399  :     return S_OK;

  00038	e3a00000	 mov         r0, #0

; 400  : }

  0003c	e8bd4010	 ldmia       sp!, {r4, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M37447|

			 ENDP  ; |?NoteOff@CMidiNote@@QAAJI@Z|, CMidiNote::NoteOff

	EXPORT	|?Render2@CMidiNote@@QAAPAEPAE00@Z|	; CMidiNote::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T37471| DCD	|$LN17@Render2|
	DCD	0x40003201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@CMidiNote@@QAAPAEPAE00@Z| PROC ; CMidiNote::Render2

; 460  : {

  00000		 |$LN17@Render2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M37468|
  00004	e1a08003	 mov         r8, r3
  00008	e1a07002	 mov         r7, r2
  0000c	e1a04000	 mov         r4, r0

; 461  :     // Cache values so compiler won't worry about aliasing
; 462  :     UINT32 Index            = m_Index;

  00010	e5946018	 ldr         r6, [r4, #0x18]

; 463  :     UINT32 IndexDelta       = m_IndexDelta;

  00014	e594901c	 ldr         r9, [r4, #0x1C]

; 464  :     const INT16 * pSineTable= SineTable;
; 465  :     LONG fxpGain = m_fxpGain;

  00018	e594a024	 ldr         r10, [r4, #0x24]

; 466  : 
; 467  :     while (pBuffer < pBufferEnd)

  0001c	e1510007	 cmp         r1, r7
  00020	2a000023	 bcs         |$LN8@Render2|
  00024	e3a03c7f	 mov         r3, #0x7F, 24
  00028	e59fb094	 ldr         r11, [pc, #0x94]
  0002c	e38350ff	 orr         r5, r3, #0xFF
  00030		 |$LL9@Render2|

; 468  :     {
; 469  :         // Index is in 8.24 format, where the top 8 bits index into the sine table and
; 470  :         // the lower 24 bits represent the fraction of where we sit between two adjacent
; 471  :         // samples, which we can use if we're doing linear interpolation
; 472  :         // I chose 8.24 format so that wrap around at the top of the table happens
; 473  :         // automatically without the need to do any ANDing.
; 474  : 
; 475  :         // Get an index into the sine table and look up the sample.
; 476  :         UINT32 TableIndex = Index>>24;

  00030	e1a0ec26	 mov         lr, r6, lsr #24

; 477  :         INT32 OutSamp0 = pSineTable[TableIndex];

  00034	e08be08e	 add         lr, r11, lr, lsl #1
  00038	e1dee0f0	 ldrsh       lr, [lr]

; 478  : 
; 479  : #if MIDI_OPTIMIZE_LINEAR_INTERPOLATE
; 480  :         // If we're doing linear interpolation, get the next sample also. Note that I don't
; 481  :         // need to worry about wrap around at the top of the table because the sine table has
; 482  :         // an extra value tacked onto the end to handle this special case.
; 483  :         INT32 NextSamp = pSineTable[TableIndex+1];
; 484  : 
; 485  :         // Now do the interpolation, adjusting the index to be in 24.8 format and throwing away
; 486  :         // the integer part (e.g. interpolate 256 points between samples).
; 487  :         OutSamp0 += ( (NextSamp - OutSamp0) * ((Index>>16)&0x00FF) ) >> 8;
; 488  : #endif
; 489  : 
; 490  :         // Increment the index to move to the next sample
; 491  :         // and keep within the valid range
; 492  :         Index += IndexDelta;

  0003c	e0866009	 add         r6, r6, r9

; 493  : 
; 494  :         // Volume!
; 495  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;
; 496  : #if (OUTCHANNELS==2)
; 497  :         INT32 OutSamp1;
; 498  :         OutSamp1=OutSamp0;
; 499  :         if (pBuffer < pBufferLast)

  00040	e1510008	 cmp         r1, r8
  00044	e0030a9e	 mul         r3, lr, r10
  00048	e1a0e843	 mov         lr, r3, asr #16
  0004c	e1a0000e	 mov         r0, lr
  00050	2a000012	 bcs         |$LN1@Render2|

; 500  :         {
; 501  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  00054	e1d130f0	 ldrsh       r3, [r1]

; 502  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  00058	e1d120f2	 ldrsh       r2, [r1, #2]
  0005c	e08ee003	 add         lr, lr, r3

; 503  : #if USE_MIX_SATURATE
; 504  :             // Handle saturation
; 505  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  00060	e15e0005	 cmp         lr, r5
  00064	e0800002	 add         r0, r0, r2
  00068	da000005	 ble         |$LN6@Render2|

; 506  :             {
; 507  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  0006c	e1a0e005	 mov         lr, r5
  00070		 |$LN14@Render2|
  00070	e3e020ff	 mvn         r2, #0xFF
  00074		 |$LN4@Render2|

; 512  :             }
; 513  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  00074	e1500005	 cmp         r0, r5
  00078	da000006	 ble         |$LN3@Render2|

; 514  :             {
; 515  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  0007c	e1a00005	 mov         r0, r5
  00080	ea000006	 b           |$LN1@Render2|
  00084		 |$LN6@Render2|

; 508  :             }
; 509  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00084	e37e0902	 cmn         lr, #2, 18
  00088	aafffff8	 bge         |$LN14@Render2|

; 510  :             {
; 511  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  0008c	e3e020ff	 mvn         r2, #0xFF
  00090	e1a0e382	 mov         lr, r2, lsl #7
  00094	eafffff6	 b           |$LN4@Render2|
  00098		 |$LN3@Render2|

; 516  :             }
; 517  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00098	e3700902	 cmn         r0, #2, 18

; 518  :             {
; 519  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  0009c	b1a00382	 movlt       r0, r2, lsl #7
  000a0		 |$LN1@Render2|

; 520  :             }
; 521  : #endif
; 522  :         }
; 523  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000a0	e1c1e0b0	 strh        lr, [r1]

; 524  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000a4	e1c100b2	 strh        r0, [r1, #2]

; 525  :         pBuffer += 2*sizeof(HWSAMPLE);

  000a8	e2811004	 add         r1, r1, #4
  000ac	e1510007	 cmp         r1, r7
  000b0	3affffde	 bcc         |$LL9@Render2|
  000b4		 |$LN8@Render2|

; 526  : #else
; 527  :         if (pBuffer<pBufferLast)
; 528  :         {
; 529  :             // Store/sum to the output buffer
; 530  :             OutSamp0 += *(HWSAMPLE *)pBuffer;
; 531  : 
; 532  : #if USE_MIX_SATURATE
; 533  :             // Handle saturation
; 534  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 535  :             {
; 536  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 537  :             }
; 538  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 539  :             {
; 540  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 541  :             }
; 542  : #endif
; 543  :         }
; 544  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 545  :         pBuffer+=sizeof(HWSAMPLE);
; 546  : #endif
; 547  :     }
; 548  : 
; 549  :     // Save cached settings that might have changed in the inner loop
; 550  :     m_Index = Index;

  000b4	e5846018	 str         r6, [r4, #0x18]

; 551  : 
; 552  :     return pBuffer;
; 553  : }

  000b8	e1a00001	 mov         r0, r1
  000bc	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$LN18@Render2|
  000c4		 |$LN19@Render2|
  000c4	00000000	 DCD         |?SineTable@CMidiNote@@0QBFB|
  000c8		 |$M37469|

			 ENDP  ; |?Render2@CMidiNote@@QAAPAEPAE00@Z|, CMidiNote::Render2

	EXPORT	|?SetVelocity@CMidiNote@@QAAXI@Z|	; CMidiNote::SetVelocity

  00000			 AREA	 |.pdata|, PDATA
|$T37485| DCD	|$LN7@SetVelocit|
	DCD	0x40000e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVelocity@CMidiNote@@QAAXI@Z| PROC	; CMidiNote::SetVelocity

; 52   :     {

  00000		 |$LN7@SetVelocit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37482|
  00004	e1a02001	 mov         r2, r1
  00008	e1a04000	 mov         r4, r0

; 53   :         // Reset the bytes left value here. This ensures that if a note is going away we bring it back.
; 54   :         m_dwBytesLeft = (DWORD)-1;
; 55   : 
; 56   :         m_Velocity = Velocity;
; 57   :         m_dwGain   = Velocity<<9;
; 58   :         GainChange();

  0000c	e5940008	 ldr         r0, [r4, #8]
  00010	e1a03482	 mov         r3, r2, lsl #9
  00014	e3e0e000	 mvn         lr, #0
  00018	e1a01003	 mov         r1, r3
  0001c	e584e028	 str         lr, [r4, #0x28]
  00020	e5842010	 str         r2, [r4, #0x10]
  00024	e5843020	 str         r3, [r4, #0x20]
  00028	eb000000	 bl          |?MapNoteGain@CMidiStream@@QAAKK@Z|
  0002c	e5840024	 str         r0, [r4, #0x24]

; 59   :     }

  00030	e8bd4010	 ldmia       sp!, {r4, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M37483|

			 ENDP  ; |?SetVelocity@CMidiNote@@QAAXI@Z|, CMidiNote::SetVelocity

	EXPORT	|?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| ; CMidiNote::NoteOn
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midinote.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37510| DCD	|$LN16@NoteOn|
	DCD	0x40002d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| PROC ; CMidiNote::NoteOn

; 345  : {

  00000		 |$LN16@NoteOn|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M37507|
  00004	e1a07002	 mov         r7, r2
  00008	e1a04001	 mov         r4, r1
  0000c	e1a06000	 mov         r6, r0

; 346  :     // Save params
; 347  :     m_pMidiStream = pMidiStream;
; 348  :     m_Note     = Note;
; 349  :     m_Channel  = Channel;

  00010	e59d5014	 ldr         r5, [sp, #0x14]

; 350  :     SetVelocity(Velocity);

  00014	e1a0e483	 mov         lr, r3, lsl #9
  00018	e3e02000	 mvn         r2, #0
  0001c	e1a0100e	 mov         r1, lr
  00020	e1a00004	 mov         r0, r4
  00024	e5865014	 str         r5, [r6, #0x14]
  00028	e5864008	 str         r4, [r6, #8]
  0002c	e586700c	 str         r7, [r6, #0xC]
  00030	e5862028	 str         r2, [r6, #0x28]
  00034	e5863010	 str         r3, [r6, #0x10]
  00038	e586e020	 str         lr, [r6, #0x20]
  0003c	eb000000	 bl          |?MapNoteGain@CMidiStream@@QAAKK@Z|

; 351  : 
; 352  :     // Init pitch
; 353  :     m_Index = 0;

  00040	e3a03000	 mov         r3, #0

; 354  :     if (Channel==FREQCHANNEL)

  00044	e3550010	 cmp         r5, #0x10
  00048	e5863018	 str         r3, [r6, #0x18]
  0004c	03a03b5f	 moveq       r3, #0x5F, 22

; 355  :     {
; 356  :         m_IndexDelta = (Note * INVSAMPLERATE);

  00050	03833070	 orreq       r3, r3, #0x70
  00054	00030397	 muleq       r3, r7, r3
  00058	e5860024	 str         r0, [r6, #0x24]
  0005c	0a00000e	 beq         |$LN12@NoteOn|

; 357  :     }
; 358  :     else
; 359  :     {
; 360  :         m_IndexDelta = PitchTable[ Note % 12 ] ;

  00060	e59f3048	 ldr         r3, [pc, #0x48]
  00064	e59f1040	 ldr         r1, [pc, #0x40]
  00068	e0830397	 umull       r0, r3, r7, r3
  0006c	e1a021a3	 mov         r2, r3, lsr #3
  00070	e0823082	 add         r3, r2, r2, lsl #1
  00074	e0473103	 sub         r3, r7, r3, lsl #2
  00078	e7911103	 ldr         r1, [r1, +r3, lsl #2]

; 361  : 
; 362  :         // Adjust octave
; 363  :         int Octave = ((int)(Note/12)) - 5;

  0007c	e2423005	 sub         r3, r2, #5

; 364  :         if (Octave>0)

  00080	e3530000	 cmp         r3, #0

; 365  :         {
; 366  :             m_IndexDelta <<= Octave;

  00084	c1a03311	 movgt       r3, r1, lsl r3
  00088	e586101c	 str         r1, [r6, #0x1C]
  0008c	ca000002	 bgt         |$LN12@NoteOn|

; 367  :         }
; 368  :         else if (Octave<0)

  00090	5a000002	 bpl         |$LN1@NoteOn|

; 369  :         {
; 370  :             m_IndexDelta >>= -Octave;

  00094	e2633000	 rsb         r3, r3, #0
  00098	e1a03331	 mov         r3, r1, lsr r3
  0009c		 |$LN12@NoteOn|
  0009c	e586301c	 str         r3, [r6, #0x1C]
  000a0		 |$LN1@NoteOn|

; 371  :         }
; 372  :     }
; 373  : 
; 374  :     return S_OK;

  000a0	e3a00000	 mov         r0, #0

; 375  : }

  000a4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN17@NoteOn|
  000ac		 |$LN18@NoteOn|
  000ac	00000000	 DCD         |?PitchTable@CMidiNote@@0QBIB|
  000b0		 |$LN19@NoteOn|
  000b0	aaaaaaab	 DCD         0xaaaaaaab
  000b4		 |$M37508|

			 ENDP  ; |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z|, CMidiNote::NoteOn

	EXPORT	|?Render@CMidiNote@@QAAPAEPAE00@Z|	; CMidiNote::Render

  00000			 AREA	 |.pdata|, PDATA
|$T37530| DCD	|$LN9@Render|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render@CMidiNote@@QAAPAEPAE00@Z| PROC ; CMidiNote::Render

; 411  : {

  00000		 |$LN9@Render|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37527|
  00004	e1a0e003	 mov         lr, r3
  00008	e1a04000	 mov         r4, r0

; 412  :     DWORD BytesLeft = m_dwBytesLeft;

  0000c	e5940028	 ldr         r0, [r4, #0x28]

; 413  : 
; 414  :     // Handle common case first
; 415  :     if (BytesLeft==(DWORD)-1)

  00010	e3700001	 cmn         r0, #1
  00014	1a000003	 bne         |$LN4@Render|

; 416  :     {
; 417  :         // Call real inner loop
; 418  :         return Render2(pBuffer,pBufferEnd,pBufferLast);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          |?Render2@CMidiNote@@QAAPAEPAE00@Z|
  00020	e1a06000	 mov         r6, r0
  00024	ea00000d	 b           |$LN1@Render|
  00028		 |$LN4@Render|

; 419  :     }
; 420  : 
; 421  :     DEBUGMSG(ZONE_MIDI, (TEXT("CMidiNote::Render, Note in release, m_dwBytesLeft = %d\r\n"),BytesLeft));
; 422  : 
; 423  :     DWORD BytesThisBuf = (pBufferEnd-pBuffer);

  00028	e0423001	 sub         r3, r2, r1

; 424  :     if (BytesLeft > BytesThisBuf)

  0002c	e1500003	 cmp         r0, r3

; 425  :     {
; 426  :         // If we can't end during this buffer, just remember where we were
; 427  :         BytesLeft-=BytesThisBuf;

  00030	80405003	 subhi       r5, r0, r3

; 428  :     }
; 429  :     else
; 430  :     {
; 431  :         // Ok, we end during this buffer. Update pBufferEnd to force the renderer to stop on a 0 crossing.
; 432  :         pBufferEnd = pBuffer + BytesLeft;
; 433  :         BytesLeft=0;

  00034	93a05000	 movls       r5, #0
  00038	90802001	 addls       r2, r0, r1

; 434  :     }
; 435  : 
; 436  :     m_dwBytesLeft = BytesLeft;
; 437  : 
; 438  :     // Call real inner loop
; 439  :     pBufferLast = Render2(pBuffer,pBufferEnd,pBufferLast);

  0003c	e1a0300e	 mov         r3, lr
  00040	e1a00004	 mov         r0, r4
  00044	e5845028	 str         r5, [r4, #0x28]
  00048	eb000000	 bl          |?Render2@CMidiNote@@QAAPAEPAE00@Z|

; 440  : 
; 441  :     if (BytesLeft==0)

  0004c	e3550000	 cmp         r5, #0
  00050	e1a06000	 mov         r6, r0

; 442  :     {
; 443  :         // Time to end the note.
; 444  :         DEBUGMSG(ZONE_MIDI, (TEXT("CMidiNote::Render, Last index after note done = 0x%x\r\n"),m_Index));
; 445  :         m_pMidiStream->NoteDone(this);

  00054	05940008	 ldreq       r0, [r4, #8]
  00058	01a01004	 moveq       r1, r4
  0005c	0b000000	 bleq        |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z|
  00060		 |$LN1@Render|

; 446  :     }
; 447  : 
; 448  :     return pBufferLast;
; 449  : }

  00060	e1a00006	 mov         r0, r6
  00064	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M37528|

			 ENDP  ; |?Render@CMidiNote@@QAAPAEPAE00@Z|, CMidiNote::Render

	END
