; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\output.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?Open@OutputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; OutputStreamContext::Open
	IMPORT	|?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\output.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37556| DCD	|$LN6@Open|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@OutputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; OutputStreamContext::Open

; 30   : {

  00000		 |$LN6@Open|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37553|
  00004	e1a04000	 mov         r4, r0

; 31   :     HRESULT Result;
; 32   : 
; 33   :     Result = WaveStreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  00008	eb000000	 bl          |?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  0000c	e1b05000	 movs        r5, r0

; 34   : 
; 35   :     if (Result==MMSYSERR_NOERROR)
; 36   :     {
; 37   :         // Note: Output streams should be initialized in the run state.
; 38   :         Run();

  00010	05943000	 ldreq       r3, [r4]
  00014	01a00004	 moveq       r0, r4
  00018	05933010	 ldreq       r3, [r3, #0x10]
  0001c	01a0e00f	 moveq       lr, pc
  00020	012fff13	 bxeq        r3

; 39   :     }
; 40   : 
; 41   :     return Result;
; 42   : }

  00024	e1a00005	 mov         r0, r5
  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37554|

			 ENDP  ; |?Open@OutputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, OutputStreamContext::Open

	EXPORT	|?Reset@OutputStreamContext@@UAAKXZ|	; OutputStreamContext::Reset
	IMPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00000			 AREA	 |.pdata|, PDATA
|$T37567| DCD	|$LN6@Reset|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Reset@OutputStreamContext@@UAAKXZ| PROC ; OutputStreamContext::Reset

; 53   : {

  00000		 |$LN6@Reset|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37564|
  00004	e1a05000	 mov         r5, r0

; 54   :     HRESULT Result;
; 55   : 
; 56   :     Result = WaveStreamContext::Reset();

  00008	eb000000	 bl          |?Reset@StreamContext@@UAAKXZ|
  0000c	e1b04000	 movs        r4, r0

; 57   : 
; 58   :     if (Result==MMSYSERR_NOERROR)
; 59   :     {
; 60   :         // Note: Output streams should be reset to the run state.
; 61   :         Run();

  00010	05953000	 ldreq       r3, [r5]
  00014	01a00005	 moveq       r0, r5
  00018	05933010	 ldreq       r3, [r3, #0x10]
  0001c	01a0e00f	 moveq       lr, pc
  00020	012fff13	 bxeq        r3

; 62   :     }
; 63   : 
; 64   :     return Result;
; 65   : };

  00024	e1a00004	 mov         r0, r4
  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37565|

			 ENDP  ; |?Reset@OutputStreamContext@@UAAKXZ|, OutputStreamContext::Reset

	EXPORT	|?SetRate@OutputStreamContext@@UAAKK@Z|	; OutputStreamContext::SetRate

  00000			 AREA	 |.pdata|, PDATA
|$T37578| DCD	|$LN5@SetRate|
	DCD	0x40001301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRate@OutputStreamContext@@UAAKK@Z| PROC ; OutputStreamContext::SetRate

; 79   : {

  00000		 |$LN5@SetRate|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37575|
  00004	e1a05000	 mov         r5, r0

; 80   :     UINT64 Delta;
; 81   : 
; 82   :     m_dwMultiplier = dwMultiplier;
; 83   : 
; 84   :     // The following code makes a bunch of assumptions on why we don't overflow a 64-bit value:
; 85   :     // nSamplesPerSec is < 20 bits (e.g. no input data rates greater than ~1 MHz!)
; 86   :     // m_dwMultiplier is < 24 bits (e.g. no speedup beyond 256x)
; 87   :     // INVSAMPLERATE is < 20 bits (e.g. no playback rates less than 4kHz)
; 88   : 
; 89   :     Delta = (m_WaveFormat.nSamplesPerSec * m_dwMultiplier);

  00008	e5d54028	 ldrb        r4, [r5, #0x28]
  0000c	e5d53029	 ldrb        r3, [r5, #0x29]
  00010	e5d5202a	 ldrb        r2, [r5, #0x2A]
  00014	e5d5e02b	 ldrb        lr, [r5, #0x2B]
  00018	e1843403	 orr         r3, r4, r3, lsl #8
  0001c	e1833802	 orr         r3, r3, r2, lsl #16
  00020	e1833c0e	 orr         r3, r3, lr, lsl #24
  00024	e00e0193	 mul         lr, r3, r1
  00028	e3a03b5f	 mov         r3, #0x5F, 22

; 90   :     Delta = (Delta * INVSAMPLERATE);    // < Note: These two lines are out of order to preserve accuracy

  0002c	e3833070	 orr         r3, r3, #0x70
  00030	e083239e	 umull       r2, r3, lr, r3
  00034	e5851074	 str         r1, [r5, #0x74]

; 91   :     Delta >>= 16;                       // <
; 92   :     Delta >>= DELTAINT;  // Convert to x.x format (e.g. 17.15)
; 93   : 
; 94   :     m_DeltaT = (DWORD)Delta;
; 95   :     return MMSYSERR_NOERROR;

  00038	e3a00000	 mov         r0, #0
  0003c	e1a030a3	 mov         r3, r3, lsr #1
  00040	e5853070	 str         r3, [r5, #0x70]

; 96   : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M37576|

			 ENDP  ; |?SetRate@OutputStreamContext@@UAAKK@Z|, OutputStreamContext::SetRate

	EXPORT	|?Render@WaveStreamContext@@UAAPAEPAE00@Z| ; WaveStreamContext::Render
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|__C_specific_handler|

  00000			 AREA	 |.pdata|, PDATA
|$T37607| DCD	|$LN27@Render|
	DCD	0xc0003805

  00000			 AREA	 |.pdata|, PDATA
|$T37609| DCD	|$LN12@Render|
	DCD	0x40000301

  00000			 AREA	 |.xdata|, DATA
|$T37605| DCD	0x1
	DCD	|$LN16@Render|
	DCD	|$LN17@Render|
	DCD	|$LN12@Render|
	DCD	|$LN13@Render|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T37605|

  00008		 |?Render@WaveStreamContext@@UAAPAEPAE00@Z| PROC ; WaveStreamContext::Render

; 110  : {

  00008		 |$LN27@Render|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d000f	 stmdb       sp!, {r0 - r3}
  00010	e92d59f0	 stmdb       sp!, {r4 - r8, r11, r12, lr}
  00014	e28db020	 add         r11, sp, #0x20
  00018	e24dd004	 sub         sp, sp, #4
  0001c		 |$LN25@Render|
  0001c	e1a08003	 mov         r8, r3
  00020	e58b800c	 str         r8, [r11, #0xC]
  00024	e1a07002	 mov         r7, r2
  00028	e58b7008	 str         r7, [r11, #8]
  0002c	e1a05001	 mov         r5, r1
  00030	e58b5004	 str         r5, [r11, #4]
  00034	e1a06000	 mov         r6, r0
  00038	e58b6000	 str         r6, [r11]

; 111  :     if (!m_bRunning || !m_lpCurrData)

  0003c	e5961010	 ldr         r1, [r6, #0x10]
  00040	e3510000	 cmp         r1, #0
  00044	0a000023	 beq         |$LN9@Render|
  00048	e5961044	 ldr         r1, [r6, #0x44]
  0004c	e3510000	 cmp         r1, #0
  00050	0a000020	 beq         |$LN9@Render|
  00054		 |$LL6@Render|

; 114  :     }
; 115  : 
; 116  :     while (pBuffer < pBufferEnd)

  00054	e1550007	 cmp         r5, r7
  00058	2a00001e	 bcs         |$LN9@Render|

; 117  :     {
; 118  :         while (m_lpCurrData>=m_lpCurrDataEnd)

  0005c	e5961044	 ldr         r1, [r6, #0x44]
  00060	e5963048	 ldr         r3, [r6, #0x48]
  00064	e1510003	 cmp         r1, r3
  00068	3a000007	 bcc         |$LN3@Render|
  0006c		 |$LL4@Render|

; 119  :         {
; 120  :             if (!GetNextBuffer())

  0006c	e1a00006	 mov         r0, r6
  00070	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  00074	e3500000	 cmp         r0, #0
  00078	0a000016	 beq         |$LN9@Render|
  0007c	e5962044	 ldr         r2, [r6, #0x44]
  00080	e5963048	 ldr         r3, [r6, #0x48]
  00084	e1520003	 cmp         r2, r3
  00088	2afffff7	 bcs         |$LL4@Render|
  0008c		 |$LN3@Render|
  0008c		 |$LN16@Render|

; 121  :             {
; 122  :                 return pBuffer;
; 123  :             }
; 124  :         }
; 125  : 
; 126  :         _try
; 127  :         {
; 128  :             pBuffer = Render2(pBuffer,pBufferEnd,pBufferLast);

  0008c	e5961000	 ldr         r1, [r6]
  00090	e1a03008	 mov         r3, r8
  00094	e1a02007	 mov         r2, r7
  00098	e5914038	 ldr         r4, [r1, #0x38]
  0009c	e1a01005	 mov         r1, r5
  000a0	e1a00006	 mov         r0, r6
  000a4	e1a0e00f	 mov         lr, pc
  000a8	e12fff14	 bx          r4
  000ac	e1a05000	 mov         r5, r0
  000b0	e58b5004	 str         r5, [r11, #4]
  000b4		 |$LN17@Render|

; 129  :         }

  000b4	eaffffe6	 b           |$LL6@Render|
  000b8		 |$LN13@Render|

; 131  :         {
; 132  :             DEBUGMSG(ZONE_ERROR, (L"WaveStreamContext::Render: "
; 133  :                 L"EXCEPTION IN IST for stream 0x%x, buffer 0x%x!!!!\r\n", this, m_lpCurrData
; 134  :             ));
; 135  :             m_lpCurrData=m_lpCurrDataEnd; // Pretend we finished reading the application buffer

  000b8	e59b6000	 ldr         r6, [r11]
  000bc	e5963048	 ldr         r3, [r6, #0x48]
  000c0	e5863044	 str         r3, [r6, #0x44]
  000c4	e59b800c	 ldr         r8, [r11, #0xC]
  000c8	e59b7008	 ldr         r7, [r11, #8]
  000cc	e59b5004	 ldr         r5, [r11, #4]
  000d0	eaffffdf	 b           |$LL6@Render|
  000d4		 |$LN24@Render|

; 112  :     {
; 113  :         return pBuffer;

  000d4	e51b5024	 ldr         r5, [r11, #-0x24]
  000d8		 |$LN9@Render|

; 136  :         }
; 137  :     }
; 138  : 
; 139  :     return pBuffer;
; 140  : }

  000d8	e1a00005	 mov         r0, r5
  000dc	e24bd020	 sub         sp, r11, #0x20
  000e0	e89d69f0	 ldmia       sp, {r4 - r8, r11, sp, lr}
  000e4	e12fff1e	 bx          lr

			 ENDP  ; |?Render@WaveStreamContext@@UAAPAEPAE00@Z|, WaveStreamContext::Render

  000e8		 |$LN12@Render|
  000e8		 |$LN26@Render|

; 130  :         _except (EXCEPTION_EXECUTE_HANDLER)

  000e8	e52de004	 str         lr, [sp, #-4]!
  000ec		 |$LN15@Render|
  000ec		 |$LN29@Render|
  000ec	e3a00001	 mov         r0, #1
  000f0		 |$LN14@Render|
  000f0	e49df004	 ldr         pc, [sp], #4
  000f4		 |$LN30@Render|
  000f4		 |$LN28@Render|
	EXPORT	|?Render2@OutputStreamContextM8@@UAAPAEPAE00@Z| ; OutputStreamContextM8::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T37643| DCD	|$LN26@Render2|
	DCD	0x40004f02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@OutputStreamContextM8@@UAAPAEPAE00@Z| PROC ; OutputStreamContextM8::Render2

; 152  : {

  00000		 |$LN26@Render2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M37640|
  00008	e58d3000	 str         r3, [sp]
  0000c	e1a0a002	 mov         r10, r2
  00010	e1a0e001	 mov         lr, r1
  00014	e58d000c	 str         r0, [sp, #0xC]

; 153  :     LONG CurrT = m_CurrT;
; 154  :     LONG DeltaT = m_DeltaT;

  00018	e5901070	 ldr         r1, [r0, #0x70]

; 155  :     LONG CurrSamp0 = m_CurrSamp[0];
; 156  :     LONG PrevSamp0 = m_PrevSamp[0];
; 157  :     PBYTE pCurrData = m_lpCurrData;
; 158  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 159  :     LONG fxpGain = m_fxpGain;

  0001c	e5904060	 ldr         r4, [r0, #0x60]
  00020	e5906088	 ldr         r6, [r0, #0x88]
  00024	e5908080	 ldr         r8, [r0, #0x80]
  00028	e5909078	 ldr         r9, [r0, #0x78]
  0002c	e5905044	 ldr         r5, [r0, #0x44]
  00030	e590b048	 ldr         r11, [r0, #0x48]
  00034	e58d1004	 str         r1, [sp, #4]
  00038	e58d4008	 str         r4, [sp, #8]

; 160  : 
; 161  :     while (pBuffer < pBufferEnd)

  0003c	e15e000a	 cmp         lr, r10
  00040	2a000030	 bcs         |$Exit$37303|
  00044	e3a03c7f	 mov         r3, #0x7F, 24
  00048	e59d0000	 ldr         r0, [sp]
  0004c	e38370ff	 orr         r7, r3, #0xFF
  00050	ea000006	 b           |$LN23@Render2|
  00054		 |$LL11@Render2|

; 162  :     {
; 163  :         while (CurrT >= DELTA_OVERFLOW)
; 164  :         {
; 165  :             if (pCurrData>=pCurrDataEnd)

  00054	e155000b	 cmp         r5, r11
  00058	2a000029	 bcs         |$LN21@Render2|

; 166  :             {
; 167  :                 goto Exit;
; 168  :             }
; 169  : 
; 170  :             CurrT -= DELTA_OVERFLOW;
; 171  : 
; 172  :             PrevSamp0 = CurrSamp0;
; 173  : 
; 174  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 175  :             CurrSamp0 = (LONG)pSampleSrc->m8.sample;
; 176  :             CurrSamp0 = (CurrSamp0 - 128) << 8;

  0005c	e4d53001	 ldrb        r3, [r5], #1
  00060	e1a09008	 mov         r9, r8
  00064	e2466902	 sub         r6, r6, #2, 18
  00068	e2433080	 sub         r3, r3, #0x80
  0006c	e1a08403	 mov         r8, r3, lsl #8
  00070		 |$LN23@Render2|
  00070	e3560902	 cmp         r6, #2, 18
  00074	aafffff6	 bge         |$LL11@Render2|

; 177  :             pCurrData+=1;
; 178  :         }
; 179  : 
; 180  :         LONG OutSamp0;
; 181  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00078	e0483009	 sub         r3, r8, r9
  0007c	e0020693	 mul         r2, r3, r6

; 182  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;
; 183  :         CurrT += DeltaT;

  00080	e0866001	 add         r6, r6, r1
  00084	e08937c2	 add         r3, r9, r2, asr #15
  00088	e0020493	 mul         r2, r3, r4

; 184  : 
; 185  : #if (OUTCHANNELS==2)
; 186  :         LONG OutSamp1;
; 187  :         OutSamp1=OutSamp0;
; 188  :         if (pBuffer < pBufferLast)

  0008c	e15e0000	 cmp         lr, r0
  00090	e1a04842	 mov         r4, r2, asr #16
  00094	e1a01004	 mov         r1, r4
  00098	2a000012	 bcs         |$LN1@Render2|

; 189  :         {
; 190  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  0009c	e1de30f0	 ldrsh       r3, [lr]

; 191  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000a0	e1de20f2	 ldrsh       r2, [lr, #2]
  000a4	e0844003	 add         r4, r4, r3

; 192  : #if USE_MIX_SATURATE
; 193  :             // Handle saturation
; 194  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  000a8	e1540007	 cmp         r4, r7
  000ac	e0811002	 add         r1, r1, r2
  000b0	da000005	 ble         |$LN6@Render2|

; 195  :             {
; 196  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  000b4	e1a04007	 mov         r4, r7
  000b8		 |$LN22@Render2|

; 214  :         pBuffer += 2*sizeof(HWSAMPLE);

  000b8	e3e030ff	 mvn         r3, #0xFF
  000bc		 |$LN4@Render2|

; 201  :             }
; 202  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  000bc	e1510007	 cmp         r1, r7
  000c0	da000006	 ble         |$LN3@Render2|

; 203  :             {
; 204  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  000c4	e1a01007	 mov         r1, r7
  000c8	ea000006	 b           |$LN1@Render2|
  000cc		 |$LN6@Render2|

; 197  :             }
; 198  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  000cc	e3740902	 cmn         r4, #2, 18
  000d0	aafffff8	 bge         |$LN22@Render2|

; 199  :             {
; 200  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  000d4	e3e030ff	 mvn         r3, #0xFF
  000d8	e1a04383	 mov         r4, r3, lsl #7
  000dc	eafffff6	 b           |$LN4@Render2|
  000e0		 |$LN3@Render2|

; 205  :             }
; 206  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  000e0	e3710902	 cmn         r1, #2, 18

; 207  :             {
; 208  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  000e4	b1a01383	 movlt       r1, r3, lsl #7
  000e8		 |$LN1@Render2|

; 209  :             }
; 210  : #endif
; 211  :         }
; 212  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000e8	e1ce40b0	 strh        r4, [lr]

; 213  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000ec	e1ce10b2	 strh        r1, [lr, #2]

; 214  :         pBuffer += 2*sizeof(HWSAMPLE);

  000f0	e28ee004	 add         lr, lr, #4
  000f4	e59d1004	 ldr         r1, [sp, #4]
  000f8	e59d4008	 ldr         r4, [sp, #8]
  000fc	e15e000a	 cmp         lr, r10
  00100	3affffda	 bcc         |$LN23@Render2|
  00104		 |$LN21@Render2|

; 152  : {

  00104	e59d000c	 ldr         r0, [sp, #0xC]
  00108		 |$Exit$37303|

; 215  : #else
; 216  :         if (pBuffer < pBufferLast)
; 217  :         {
; 218  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];
; 219  : #if USE_MIX_SATURATE
; 220  :             // Handle saturation
; 221  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 222  :             {
; 223  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 224  :             }
; 225  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 226  :             {
; 227  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 228  :             }
; 229  : #endif
; 230  :         }
; 231  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 232  :         pBuffer += sizeof(HWSAMPLE);
; 233  : #endif
; 234  :     }
; 235  : 
; 236  :     Exit:
; 237  : 
; 238  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00108	e590204c	 ldr         r2, [r0, #0x4C]
  0010c	e5903044	 ldr         r3, [r0, #0x44]

; 239  :     m_lpCurrData = pCurrData;

  00110	e5805044	 str         r5, [r0, #0x44]

; 240  :     m_CurrT = CurrT;

  00114	e5806088	 str         r6, [r0, #0x88]
  00118	e0423003	 sub         r3, r2, r3
  0011c	e0833005	 add         r3, r3, r5
  00120	e580304c	 str         r3, [r0, #0x4C]

; 241  :     m_PrevSamp[0] = PrevSamp0;

  00124	e5809078	 str         r9, [r0, #0x78]

; 242  :     m_CurrSamp[0] = CurrSamp0;

  00128	e5808080	 str         r8, [r0, #0x80]

; 243  :     return pBuffer;
; 244  : }

  0012c	e1a0000e	 mov         r0, lr
  00130	e28dd010	 add         sp, sp, #0x10
  00134	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$M37641|

			 ENDP  ; |?Render2@OutputStreamContextM8@@UAAPAEPAE00@Z|, OutputStreamContextM8::Render2

	EXPORT	|?Render2@OutputStreamContextM16@@UAAPAEPAE00@Z| ; OutputStreamContextM16::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T37673| DCD	|$LN26@Render2@2|
	DCD	0x40004d02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@OutputStreamContextM16@@UAAPAEPAE00@Z| PROC ; OutputStreamContextM16::Render2

; 256  : {

  00000		 |$LN26@Render2@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M37670|
  00008	e58d3000	 str         r3, [sp]
  0000c	e1a0a002	 mov         r10, r2
  00010	e1a0e001	 mov         lr, r1
  00014	e58d000c	 str         r0, [sp, #0xC]

; 257  :     LONG CurrT = m_CurrT;
; 258  :     LONG DeltaT = m_DeltaT;

  00018	e5901070	 ldr         r1, [r0, #0x70]

; 259  :     LONG CurrSamp0 = m_CurrSamp[0];
; 260  :     LONG PrevSamp0 = m_PrevSamp[0];
; 261  :     PBYTE pCurrData = m_lpCurrData;
; 262  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 263  :     LONG fxpGain = m_fxpGain;

  0001c	e5904060	 ldr         r4, [r0, #0x60]
  00020	e5905088	 ldr         r5, [r0, #0x88]
  00024	e5908080	 ldr         r8, [r0, #0x80]
  00028	e5909078	 ldr         r9, [r0, #0x78]
  0002c	e5906044	 ldr         r6, [r0, #0x44]
  00030	e590b048	 ldr         r11, [r0, #0x48]
  00034	e58d1004	 str         r1, [sp, #4]
  00038	e58d4008	 str         r4, [sp, #8]

; 264  :     LONG OutSamp0;
; 265  : 
; 266  :     while (pBuffer < pBufferEnd)

  0003c	e15e000a	 cmp         lr, r10
  00040	2a00002e	 bcs         |$Exit$37353|
  00044	e3a03c7f	 mov         r3, #0x7F, 24
  00048	e59d0000	 ldr         r0, [sp]
  0004c	e38370ff	 orr         r7, r3, #0xFF
  00050	ea000004	 b           |$LN23@Render2@2|
  00054		 |$LL11@Render2@2|

; 267  :     {
; 268  :         while (CurrT >= DELTA_OVERFLOW)
; 269  :         {
; 270  :             if (pCurrData>=pCurrDataEnd)

  00054	e156000b	 cmp         r6, r11
  00058	2a000027	 bcs         |$LN21@Render2@2|

; 271  :             {
; 272  :                 goto Exit;
; 273  :             }
; 274  : 
; 275  :             CurrT -= DELTA_OVERFLOW;
; 276  : 
; 277  :             PrevSamp0 = CurrSamp0;

  0005c	e1a09008	 mov         r9, r8

; 278  : 
; 279  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 280  :             CurrSamp0 = (LONG)pSampleSrc->m16.sample;

  00060	e0d680f2	 ldrsh       r8, [r6], #2
  00064	e2455902	 sub         r5, r5, #2, 18
  00068		 |$LN23@Render2@2|

; 271  :             {
; 272  :                 goto Exit;
; 273  :             }
; 274  : 
; 275  :             CurrT -= DELTA_OVERFLOW;
; 276  : 
; 277  :             PrevSamp0 = CurrSamp0;

  00068	e3550902	 cmp         r5, #2, 18

; 278  : 
; 279  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 280  :             CurrSamp0 = (LONG)pSampleSrc->m16.sample;

  0006c	aafffff8	 bge         |$LL11@Render2@2|

; 281  :             pCurrData+=2;
; 282  :         }
; 283  : 
; 284  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00070	e0483009	 sub         r3, r8, r9
  00074	e0020593	 mul         r2, r3, r5

; 285  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;
; 286  :         CurrT += DeltaT;

  00078	e0855001	 add         r5, r5, r1
  0007c	e08937c2	 add         r3, r9, r2, asr #15
  00080	e0020493	 mul         r2, r3, r4

; 287  : 
; 288  : //        DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 289  : 
; 290  : #if (OUTCHANNELS==2)
; 291  :         LONG OutSamp1;
; 292  :         OutSamp1=OutSamp0;
; 293  :         if (pBuffer < pBufferLast)

  00084	e15e0000	 cmp         lr, r0
  00088	e1a04842	 mov         r4, r2, asr #16
  0008c	e1a01004	 mov         r1, r4
  00090	2a000012	 bcs         |$LN1@Render2@2|

; 294  :         {
; 295  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  00094	e1de30f0	 ldrsh       r3, [lr]

; 296  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  00098	e1de20f2	 ldrsh       r2, [lr, #2]
  0009c	e0844003	 add         r4, r4, r3

; 297  : #if USE_MIX_SATURATE
; 298  :             // Handle saturation
; 299  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  000a0	e1540007	 cmp         r4, r7
  000a4	e0811002	 add         r1, r1, r2
  000a8	da000005	 ble         |$LN6@Render2@2|

; 300  :             {
; 301  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  000ac	e1a04007	 mov         r4, r7
  000b0		 |$LN22@Render2@2|

; 319  :         pBuffer += 2*sizeof(HWSAMPLE);

  000b0	e3e030ff	 mvn         r3, #0xFF
  000b4		 |$LN4@Render2@2|

; 306  :             }
; 307  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  000b4	e1510007	 cmp         r1, r7
  000b8	da000006	 ble         |$LN3@Render2@2|

; 308  :             {
; 309  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  000bc	e1a01007	 mov         r1, r7
  000c0	ea000006	 b           |$LN1@Render2@2|
  000c4		 |$LN6@Render2@2|

; 302  :             }
; 303  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  000c4	e3740902	 cmn         r4, #2, 18
  000c8	aafffff8	 bge         |$LN22@Render2@2|

; 304  :             {
; 305  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  000cc	e3e030ff	 mvn         r3, #0xFF
  000d0	e1a04383	 mov         r4, r3, lsl #7
  000d4	eafffff6	 b           |$LN4@Render2@2|
  000d8		 |$LN3@Render2@2|

; 310  :             }
; 311  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  000d8	e3710902	 cmn         r1, #2, 18

; 312  :             {
; 313  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  000dc	b1a01383	 movlt       r1, r3, lsl #7
  000e0		 |$LN1@Render2@2|

; 314  :             }
; 315  : #endif
; 316  :         }
; 317  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  000e0	e1ce40b0	 strh        r4, [lr]

; 318  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  000e4	e1ce10b2	 strh        r1, [lr, #2]

; 319  :         pBuffer += 2*sizeof(HWSAMPLE);

  000e8	e28ee004	 add         lr, lr, #4
  000ec	e59d1004	 ldr         r1, [sp, #4]
  000f0	e59d4008	 ldr         r4, [sp, #8]
  000f4	e15e000a	 cmp         lr, r10
  000f8	3affffda	 bcc         |$LN23@Render2@2|
  000fc		 |$LN21@Render2@2|

; 256  : {

  000fc	e59d000c	 ldr         r0, [sp, #0xC]
  00100		 |$Exit$37353|

; 320  : #else
; 321  :         if (pBuffer < pBufferLast)
; 322  :         {
; 323  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];
; 324  : #if USE_MIX_SATURATE
; 325  :             // Handle saturation
; 326  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 327  :             {
; 328  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 329  :             }
; 330  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 331  :             {
; 332  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 333  :             }
; 334  : #endif
; 335  :         }
; 336  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 337  :         pBuffer += sizeof(HWSAMPLE);
; 338  : #endif
; 339  :     }
; 340  : 
; 341  :     Exit:
; 342  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00100	e590204c	 ldr         r2, [r0, #0x4C]
  00104	e5903044	 ldr         r3, [r0, #0x44]

; 343  :     m_lpCurrData = pCurrData;

  00108	e5806044	 str         r6, [r0, #0x44]

; 344  :     m_CurrT = CurrT;

  0010c	e5805088	 str         r5, [r0, #0x88]
  00110	e0423003	 sub         r3, r2, r3
  00114	e0833006	 add         r3, r3, r6
  00118	e580304c	 str         r3, [r0, #0x4C]

; 345  :     m_PrevSamp[0] = PrevSamp0;

  0011c	e5809078	 str         r9, [r0, #0x78]

; 346  :     m_CurrSamp[0] = CurrSamp0;

  00120	e5808080	 str         r8, [r0, #0x80]

; 347  :     return pBuffer;
; 348  : }

  00124	e1a0000e	 mov         r0, lr
  00128	e28dd010	 add         sp, sp, #0x10
  0012c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$M37671|

			 ENDP  ; |?Render2@OutputStreamContextM16@@UAAPAEPAE00@Z|, OutputStreamContextM16::Render2

	EXPORT	|?Render2@OutputStreamContextS8@@UAAPAEPAE00@Z| ; OutputStreamContextS8::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T37705| DCD	|$LN26@Render2@3|
	DCD	0x40006102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@OutputStreamContextS8@@UAAPAEPAE00@Z| PROC ; OutputStreamContextS8::Render2

; 362  : {

  00000		 |$LN26@Render2@3|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M37702|
  00008	e58d300c	 str         r3, [sp, #0xC]
  0000c	e1a03002	 mov         r3, r2
  00010	e58d3010	 str         r3, [sp, #0x10]
  00014	e1a0e001	 mov         lr, r1
  00018	e58d0014	 str         r0, [sp, #0x14]

; 363  :     LONG CurrT = m_CurrT;
; 364  :     LONG DeltaT = m_DeltaT;

  0001c	e5902070	 ldr         r2, [r0, #0x70]

; 365  :     LONG CurrSamp0 = m_CurrSamp[0];
; 366  :     LONG CurrSamp1 = m_CurrSamp[1];
; 367  :     LONG PrevSamp0 = m_PrevSamp[0];
; 368  :     LONG PrevSamp1 = m_PrevSamp[1];
; 369  :     PBYTE pCurrData = m_lpCurrData;
; 370  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 371  :     LONG fxpGain = m_fxpGain;

  00020	e5901060	 ldr         r1, [r0, #0x60]
  00024	e5906088	 ldr         r6, [r0, #0x88]
  00028	e58d2008	 str         r2, [sp, #8]
  0002c	e5902048	 ldr         r2, [r0, #0x48]
  00030	e5908080	 ldr         r8, [r0, #0x80]
  00034	e5909084	 ldr         r9, [r0, #0x84]
  00038	e590a078	 ldr         r10, [r0, #0x78]
  0003c	e590b07c	 ldr         r11, [r0, #0x7C]
  00040	e5905044	 ldr         r5, [r0, #0x44]
  00044	e58d2000	 str         r2, [sp]
  00048	e58d1004	 str         r1, [sp, #4]

; 372  :     LONG OutSamp0;
; 373  :     LONG OutSamp1;
; 374  : 
; 375  :     while (pBuffer < pBufferEnd)

  0004c	e15e0003	 cmp         lr, r3
  00050	2a00003c	 bcs         |$Exit$37405|
  00054	e3a03c7f	 mov         r3, #0x7F, 24
  00058	e38370ff	 orr         r7, r3, #0xFF
  0005c	e1a00001	 mov         r0, r1
  00060	ea00000c	 b           |$LN23@Render2@3|
  00064		 |$LL11@Render2@3|

; 376  :     {
; 377  :         while (CurrT >= DELTA_OVERFLOW)
; 378  :         {
; 379  :             if (pCurrData>=pCurrDataEnd)

  00064	e1550002	 cmp         r5, r2
  00068	2a000035	 bcs         |$LN21@Render2@3|

; 380  :             {
; 381  :                 goto Exit;
; 382  :             }
; 383  : 
; 384  :             CurrT -= DELTA_OVERFLOW;
; 385  : 
; 386  :             PrevSamp0 = CurrSamp0;
; 387  :             PrevSamp1 = CurrSamp1;
; 388  : 
; 389  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 390  :             CurrSamp0 =  (LONG)pSampleSrc->s8.sample_left;
; 391  :             CurrSamp0 = (CurrSamp0 - 128) << 8;
; 392  :             CurrSamp1 = (LONG)pSampleSrc->s8.sample_right;
; 393  :             CurrSamp1 = (CurrSamp1 - 128) << 8;

  0006c	e5d52001	 ldrb        r2, [r5, #1]
  00070	e5d53000	 ldrb        r3, [r5]
  00074	e1a0b009	 mov         r11, r9
  00078	e2422080	 sub         r2, r2, #0x80
  0007c	e2433080	 sub         r3, r3, #0x80
  00080	e1a09402	 mov         r9, r2, lsl #8

; 394  :             pCurrData+=2;

  00084	e59d2000	 ldr         r2, [sp]
  00088	e1a0a008	 mov         r10, r8
  0008c	e2466902	 sub         r6, r6, #2, 18
  00090	e1a08403	 mov         r8, r3, lsl #8
  00094	e2855002	 add         r5, r5, #2
  00098		 |$LN23@Render2@3|
  00098	e3560902	 cmp         r6, #2, 18
  0009c	aafffff0	 bge         |$LL11@Render2@3|

; 395  :         }
; 396  : 
; 397  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  000a0	e048300a	 sub         r3, r8, r10

; 398  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;
; 399  : 
; 400  :         OutSamp1 = PrevSamp1 + (((CurrSamp1 - PrevSamp1) * CurrT) >> DELTAFRAC);

  000a4	e049200b	 sub         r2, r9, r11
  000a8	e0010693	 mul         r1, r3, r6
  000ac	e0030692	 mul         r3, r2, r6
  000b0	e08a27c1	 add         r2, r10, r1, asr #15
  000b4	e08b37c3	 add         r3, r11, r3, asr #15
  000b8	e0010092	 mul         r1, r2, r0

; 401  :         OutSamp1 = (OutSamp1 * fxpGain) >> VOLSHIFT;

  000bc	e0020093	 mul         r2, r3, r0
  000c0	e1a04841	 mov         r4, r1, asr #16
  000c4	e1a01842	 mov         r1, r2, asr #16

; 402  :         CurrT += DeltaT;

  000c8	e59d3008	 ldr         r3, [sp, #8]
  000cc	e0866003	 add         r6, r6, r3

; 403  : 
; 404  : //        DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 405  : 
; 406  :         if (pBuffer < pBufferLast)

  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e15e0003	 cmp         lr, r3
  000d8	2a000012	 bcs         |$LN1@Render2@3|

; 407  :         {
; 408  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  000dc	e1de30f0	 ldrsh       r3, [lr]

; 409  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000e0	e1de20f2	 ldrsh       r2, [lr, #2]
  000e4	e0844003	 add         r4, r4, r3

; 410  : #if USE_MIX_SATURATE
; 411  :             // Handle saturation
; 412  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  000e8	e1540007	 cmp         r4, r7
  000ec	e0811002	 add         r1, r1, r2
  000f0	da000005	 ble         |$LN6@Render2@3|

; 413  :             {
; 414  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  000f4	e1a04007	 mov         r4, r7
  000f8		 |$LN22@Render2@3|

; 363  :     LONG CurrT = m_CurrT;
; 364  :     LONG DeltaT = m_DeltaT;

  000f8	e3e030ff	 mvn         r3, #0xFF
  000fc		 |$LN4@Render2@3|

; 419  :             }
; 420  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  000fc	e1510007	 cmp         r1, r7
  00100	da000006	 ble         |$LN3@Render2@3|

; 421  :             {
; 422  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  00104	e1a01007	 mov         r1, r7
  00108	ea000006	 b           |$LN1@Render2@3|
  0010c		 |$LN6@Render2@3|

; 415  :             }
; 416  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  0010c	e3740902	 cmn         r4, #2, 18
  00110	aafffff8	 bge         |$LN22@Render2@3|

; 417  :             {
; 418  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00114	e3e030ff	 mvn         r3, #0xFF
  00118	e1a04383	 mov         r4, r3, lsl #7
  0011c	eafffff6	 b           |$LN4@Render2@3|
  00120		 |$LN3@Render2@3|

; 423  :             }
; 424  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00120	e3710902	 cmn         r1, #2, 18

; 425  :             {
; 426  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00124	b1a01383	 movlt       r1, r3, lsl #7
  00128		 |$LN1@Render2@3|

; 427  :             }
; 428  : #endif
; 429  :         }
; 430  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 431  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;
; 432  : 
; 433  :         pBuffer += 2*sizeof(HWSAMPLE);

  00128	e59d3010	 ldr         r3, [sp, #0x10]
  0012c	e1ce40b0	 strh        r4, [lr]
  00130	e1ce10b2	 strh        r1, [lr, #2]
  00134	e28ee004	 add         lr, lr, #4
  00138	e59d2000	 ldr         r2, [sp]
  0013c	e15e0003	 cmp         lr, r3
  00140	3affffd4	 bcc         |$LN23@Render2@3|
  00144		 |$LN21@Render2@3|

; 362  : {

  00144	e59d0014	 ldr         r0, [sp, #0x14]
  00148		 |$Exit$37405|

; 434  : 
; 435  :     }
; 436  : 
; 437  :     Exit:
; 438  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00148	e590204c	 ldr         r2, [r0, #0x4C]
  0014c	e5903044	 ldr         r3, [r0, #0x44]

; 439  :     m_lpCurrData = pCurrData;

  00150	e5805044	 str         r5, [r0, #0x44]

; 440  :     m_CurrT = CurrT;

  00154	e5806088	 str         r6, [r0, #0x88]
  00158	e0423003	 sub         r3, r2, r3
  0015c	e0833005	 add         r3, r3, r5
  00160	e580304c	 str         r3, [r0, #0x4C]

; 441  :     m_PrevSamp[0] = PrevSamp0;

  00164	e580a078	 str         r10, [r0, #0x78]

; 442  :     m_PrevSamp[1] = PrevSamp1;

  00168	e580b07c	 str         r11, [r0, #0x7C]

; 443  :     m_CurrSamp[0] = CurrSamp0;

  0016c	e5808080	 str         r8, [r0, #0x80]

; 444  :     m_CurrSamp[1] = CurrSamp1;

  00170	e5809084	 str         r9, [r0, #0x84]

; 445  :     return pBuffer;
; 446  : }

  00174	e1a0000e	 mov         r0, lr
  00178	e28dd018	 add         sp, sp, #0x18
  0017c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00180	e12fff1e	 bx          lr
  00184		 |$M37703|

			 ENDP  ; |?Render2@OutputStreamContextS8@@UAAPAEPAE00@Z|, OutputStreamContextS8::Render2

	EXPORT	|?Render2@OutputStreamContextS16@@UAAPAEPAE00@Z| ; OutputStreamContextS16::Render2

  00000			 AREA	 |.pdata|, PDATA
|$T37737| DCD	|$LN26@Render2@4|
	DCD	0x40005c02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render2@OutputStreamContextS16@@UAAPAEPAE00@Z| PROC ; OutputStreamContextS16::Render2

; 459  : {

  00000		 |$LN26@Render2@4|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M37734|
  00008	e58d3008	 str         r3, [sp, #8]
  0000c	e1a03002	 mov         r3, r2
  00010	e58d300c	 str         r3, [sp, #0xC]
  00014	e1a0e001	 mov         lr, r1
  00018	e58d0014	 str         r0, [sp, #0x14]

; 460  :     LONG CurrT = m_CurrT;
; 461  :     LONG DeltaT = m_DeltaT;

  0001c	e5902070	 ldr         r2, [r0, #0x70]

; 462  :     LONG CurrSamp0 = m_CurrSamp[0];
; 463  :     LONG CurrSamp1 = m_CurrSamp[1];
; 464  :     LONG PrevSamp0 = m_PrevSamp[0];
; 465  :     LONG PrevSamp1 = m_PrevSamp[1];
; 466  :     PBYTE pCurrData = m_lpCurrData;
; 467  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;
; 468  :     LONG fxpGain = m_fxpGain;

  00020	e5901060	 ldr         r1, [r0, #0x60]
  00024	e5906088	 ldr         r6, [r0, #0x88]
  00028	e58d2004	 str         r2, [sp, #4]
  0002c	e5902048	 ldr         r2, [r0, #0x48]
  00030	e5908080	 ldr         r8, [r0, #0x80]
  00034	e5909084	 ldr         r9, [r0, #0x84]
  00038	e590a078	 ldr         r10, [r0, #0x78]
  0003c	e590b07c	 ldr         r11, [r0, #0x7C]
  00040	e5904044	 ldr         r4, [r0, #0x44]
  00044	e58d2010	 str         r2, [sp, #0x10]
  00048	e58d1000	 str         r1, [sp]

; 469  :     LONG OutSamp0;
; 470  :     LONG OutSamp1;
; 471  : 
; 472  :     while (pBuffer < pBufferEnd)

  0004c	e15e0003	 cmp         lr, r3
  00050	2a000037	 bcs         |$Exit$37457|
  00054	e3a03c7f	 mov         r3, #0x7F, 24
  00058	e38370ff	 orr         r7, r3, #0xFF
  0005c	e1a00001	 mov         r0, r1
  00060	ea000007	 b           |$LN23@Render2@4|
  00064		 |$LL11@Render2@4|

; 473  :     {
; 474  :         while (CurrT >= DELTA_OVERFLOW)
; 475  :         {
; 476  :             if (pCurrData>=pCurrDataEnd)

  00064	e1540002	 cmp         r4, r2
  00068	2a000030	 bcs         |$LN21@Render2@4|

; 477  :             {
; 478  :                 goto Exit;
; 479  :             }
; 480  : 
; 481  :             CurrT -= DELTA_OVERFLOW;
; 482  : 
; 483  :             PrevSamp0 = CurrSamp0;

  0006c	e1a0a008	 mov         r10, r8

; 484  :             PrevSamp1 = CurrSamp1;
; 485  : 
; 486  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;
; 487  :             CurrSamp0 = (LONG)pSampleSrc->s16.sample_left;

  00070	e1d480f0	 ldrsh       r8, [r4]
  00074	e1a0b009	 mov         r11, r9

; 488  :             CurrSamp1 = (LONG)pSampleSrc->s16.sample_right;

  00078	e1d490f2	 ldrsh       r9, [r4, #2]

; 489  :             pCurrData+=4;

  0007c	e2844004	 add         r4, r4, #4
  00080	e2466902	 sub         r6, r6, #2, 18
  00084		 |$LN23@Render2@4|
  00084	e3560902	 cmp         r6, #2, 18
  00088	aafffff5	 bge         |$LL11@Render2@4|

; 490  :         }
; 491  : 
; 492  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  0008c	e048300a	 sub         r3, r8, r10

; 493  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;
; 494  :         OutSamp1 = PrevSamp1 + (((CurrSamp1 - PrevSamp1) * CurrT) >> DELTAFRAC);

  00090	e049200b	 sub         r2, r9, r11
  00094	e0010693	 mul         r1, r3, r6
  00098	e0030692	 mul         r3, r2, r6
  0009c	e08a27c1	 add         r2, r10, r1, asr #15
  000a0	e08b37c3	 add         r3, r11, r3, asr #15
  000a4	e0010092	 mul         r1, r2, r0

; 495  :         OutSamp1 = (OutSamp1 * fxpGain) >> VOLSHIFT;

  000a8	e0020093	 mul         r2, r3, r0
  000ac	e1a05841	 mov         r5, r1, asr #16
  000b0	e1a01842	 mov         r1, r2, asr #16

; 496  :         CurrT += DeltaT;

  000b4	e59d3004	 ldr         r3, [sp, #4]
  000b8	e0866003	 add         r6, r6, r3

; 497  : 
; 498  : //        DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 499  : 
; 500  :         if (pBuffer < pBufferLast)

  000bc	e59d3008	 ldr         r3, [sp, #8]
  000c0	e15e0003	 cmp         lr, r3
  000c4	2a000012	 bcs         |$LN1@Render2@4|

; 501  :         {
; 502  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  000c8	e1de30f0	 ldrsh       r3, [lr]

; 503  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  000cc	e1de20f2	 ldrsh       r2, [lr, #2]
  000d0	e0855003	 add         r5, r5, r3

; 504  : #if USE_MIX_SATURATE
; 505  :             // Handle saturation
; 506  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  000d4	e1550007	 cmp         r5, r7
  000d8	e0811002	 add         r1, r1, r2
  000dc	da000005	 ble         |$LN6@Render2@4|

; 507  :             {
; 508  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  000e0	e1a05007	 mov         r5, r7
  000e4		 |$LN22@Render2@4|

; 460  :     LONG CurrT = m_CurrT;
; 461  :     LONG DeltaT = m_DeltaT;

  000e4	e3e030ff	 mvn         r3, #0xFF
  000e8		 |$LN4@Render2@4|

; 513  :             }
; 514  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  000e8	e1510007	 cmp         r1, r7
  000ec	da000006	 ble         |$LN3@Render2@4|

; 515  :             {
; 516  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  000f0	e1a01007	 mov         r1, r7
  000f4	ea000006	 b           |$LN1@Render2@4|
  000f8		 |$LN6@Render2@4|

; 509  :             }
; 510  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  000f8	e3750902	 cmn         r5, #2, 18
  000fc	aafffff8	 bge         |$LN22@Render2@4|

; 511  :             {
; 512  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00100	e3e030ff	 mvn         r3, #0xFF
  00104	e1a05383	 mov         r5, r3, lsl #7
  00108	eafffff6	 b           |$LN4@Render2@4|
  0010c		 |$LN3@Render2@4|

; 517  :             }
; 518  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  0010c	e3710902	 cmn         r1, #2, 18

; 519  :             {
; 520  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00110	b1a01383	 movlt       r1, r3, lsl #7
  00114		 |$LN1@Render2@4|

; 521  :             }
; 522  : #endif
; 523  :         }
; 524  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 525  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;
; 526  : 
; 527  :         pBuffer += 2*sizeof(HWSAMPLE);

  00114	e59d300c	 ldr         r3, [sp, #0xC]
  00118	e1ce50b0	 strh        r5, [lr]
  0011c	e1ce10b2	 strh        r1, [lr, #2]
  00120	e28ee004	 add         lr, lr, #4
  00124	e59d2010	 ldr         r2, [sp, #0x10]
  00128	e15e0003	 cmp         lr, r3
  0012c	3affffd4	 bcc         |$LN23@Render2@4|
  00130		 |$LN21@Render2@4|

; 459  : {

  00130	e59d0014	 ldr         r0, [sp, #0x14]
  00134		 |$Exit$37457|

; 528  :     }
; 529  : 
; 530  :     Exit:
; 531  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00134	e590204c	 ldr         r2, [r0, #0x4C]
  00138	e5903044	 ldr         r3, [r0, #0x44]

; 532  :     m_lpCurrData = pCurrData;

  0013c	e5804044	 str         r4, [r0, #0x44]

; 533  :     m_CurrT = CurrT;

  00140	e5806088	 str         r6, [r0, #0x88]
  00144	e0423003	 sub         r3, r2, r3
  00148	e0833004	 add         r3, r3, r4
  0014c	e580304c	 str         r3, [r0, #0x4C]

; 534  :     m_PrevSamp[0] = PrevSamp0;

  00150	e580a078	 str         r10, [r0, #0x78]

; 535  :     m_PrevSamp[1] = PrevSamp1;

  00154	e580b07c	 str         r11, [r0, #0x7C]

; 536  :     m_CurrSamp[0] = CurrSamp0;

  00158	e5808080	 str         r8, [r0, #0x80]

; 537  :     m_CurrSamp[1] = CurrSamp1;

  0015c	e5809084	 str         r9, [r0, #0x84]

; 538  :     return pBuffer;
; 539  : }

  00160	e1a0000e	 mov         r0, lr
  00164	e28dd018	 add         sp, sp, #0x18
  00168	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0016c	e12fff1e	 bx          lr
  00170		 |$M37735|

			 ENDP  ; |?Render2@OutputStreamContextS16@@UAAPAEPAE00@Z|, OutputStreamContextS16::Render2

	END
