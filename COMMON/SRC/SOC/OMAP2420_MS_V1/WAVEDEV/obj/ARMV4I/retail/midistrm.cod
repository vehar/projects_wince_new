; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\midistrm.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?StillPlaying@StreamContext@@QAAHXZ|	; StreamContext::StillPlaying
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37575| DCD	|$LN7@StillPlayi|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StillPlaying@StreamContext@@QAAHXZ| PROC ; StreamContext::StillPlaying

; 91   :     BOOL StillPlaying() {return (m_lpWaveHdrHead!=NULL);}

  00000		 |$LN7@StillPlayi|
  00000		 |$M37572|
  00000	e5903038	 ldr         r3, [r0, #0x38]
  00004	e3530000	 cmp         r3, #0
  00008	13a00001	 movne       r0, #1
  0000c	03a00000	 moveq       r0, #0
  00010	e12fff1e	 bx          lr
  00014		 |$M37573|

			 ENDP  ; |?StillPlaying@StreamContext@@QAAHXZ|, StreamContext::StillPlaying

	EXPORT	|?ClearBuffer@StreamContext@@SAXPAE0@Z|	; StreamContext::ClearBuffer
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T37585| DCD	|$LN5@ClearBuffe|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClearBuffer@StreamContext@@SAXPAE0@Z| PROC ; StreamContext::ClearBuffer

; 159  :     static void ClearBuffer(PBYTE pStart, PBYTE pEnd) {memset(pStart,0,pEnd-pStart);}

  00000		 |$LN5@ClearBuffe|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37582|
  00004	e0412000	 sub         r2, r1, r0
  00008	e3a01000	 mov         r1, #0
  0000c	eb000000	 bl          memset
  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M37583|

			 ENDP  ; |?ClearBuffer@StreamContext@@SAXPAE0@Z|, StreamContext::ClearBuffer

	EXPORT	|?NoteVal@CMidiNote@@QAAIXZ|		; CMidiNote::NoteVal
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37595| DCD	|$LN5@NoteVal|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteVal@CMidiNote@@QAAIXZ| PROC	; CMidiNote::NoteVal

; 42   :     UINT32 NoteVal()      {return m_Note;}

  00000		 |$LN5@NoteVal|
  00000		 |$M37592|
  00000	e590000c	 ldr         r0, [r0, #0xC]
  00004	e12fff1e	 bx          lr
  00008		 |$M37593|

			 ENDP  ; |?NoteVal@CMidiNote@@QAAIXZ|, CMidiNote::NoteVal

	EXPORT	|?NoteChannel@CMidiNote@@QAAIXZ|	; CMidiNote::NoteChannel

  00000			 AREA	 |.pdata|, PDATA
|$T37605| DCD	|$LN5@NoteChanne|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteChannel@CMidiNote@@QAAIXZ| PROC	; CMidiNote::NoteChannel

; 43   :     UINT32 NoteChannel()  {return m_Channel;}

  00000		 |$LN5@NoteChanne|
  00000		 |$M37602|
  00000	e5900014	 ldr         r0, [r0, #0x14]
  00004	e12fff1e	 bx          lr
  00008		 |$M37603|

			 ENDP  ; |?NoteChannel@CMidiNote@@QAAIXZ|, CMidiNote::NoteChannel

	EXPORT	|?SetVelocity@CMidiNote@@QAAXI@Z|	; CMidiNote::SetVelocity
	IMPORT	|?GainChange@CMidiNote@@QAAXXZ|		; CMidiNote::GainChange

  00000			 AREA	 |.pdata|, PDATA
|$T37614| DCD	|$LN5@SetVelocit|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVelocity@CMidiNote@@QAAXI@Z| PROC	; CMidiNote::SetVelocity

; 52   :     {

  00000		 |$LN5@SetVelocit|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37611|
  00004	e1a02000	 mov         r2, r0

; 53   :         // Reset the bytes left value here. This ensures that if a note is going away we bring it back.
; 54   :         m_dwBytesLeft = (DWORD)-1;

  00008	e3e00000	 mvn         r0, #0

; 55   : 
; 56   :         m_Velocity = Velocity;
; 57   :         m_dwGain   = Velocity<<9;

  0000c	e5820028	 str         r0, [r2, #0x28]
  00010	e1a03481	 mov         r3, r1, lsl #9

; 58   :         GainChange();

  00014	e1a00002	 mov         r0, r2
  00018	e5823020	 str         r3, [r2, #0x20]
  0001c	e5821010	 str         r1, [r2, #0x10]
  00020	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 59   :     }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M37612|

			 ENDP  ; |?SetVelocity@CMidiNote@@QAAXI@Z|, CMidiNote::SetVelocity

	EXPORT	|?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteMoveToNoteList

  00000			 AREA	 |.pdata|, PDATA
|$T37625| DCD	|$LN11@NoteMoveTo|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteMoveToNoteList

; 103  :     {

  00000		 |$LN11@NoteMoveTo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37622|

; 104  :         PLIST_ENTRY pListEntry = &pCMidiNote->m_Link;
; 105  :         RemoveEntryList(pListEntry);

  00004	e591e004	 ldr         lr, [r1, #4]
  00008	e5912000	 ldr         r2, [r1]

; 106  :         InsertTailList(&m_NoteList,pListEntry);

  0000c	e2803c05	 add         r3, r0, #5, 24
  00010	e28300e8	 add         r0, r3, #0xE8
  00014	e58e2000	 str         r2, [lr]
  00018	e5912000	 ldr         r2, [r1]
  0001c	e5913004	 ldr         r3, [r1, #4]
  00020	e5823004	 str         r3, [r2, #4]
  00024	e5903004	 ldr         r3, [r0, #4]
  00028	e8810009	 stmia       r1, {r0, r3}
  0002c	e5831000	 str         r1, [r3]
  00030	e5801004	 str         r1, [r0, #4]

; 107  :     }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M37623|

			 ENDP  ; |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteMoveToNoteList

	EXPORT	|?DeltaTicksToSamples@CMidiStream@@QAAII@Z| ; CMidiStream::DeltaTicksToSamples

  00000			 AREA	 |.pdata|, PDATA
|$T37636| DCD	|$LN5@DeltaTicks|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeltaTicksToSamples@CMidiStream@@QAAII@Z| PROC ; CMidiStream::DeltaTicksToSamples

; 127  :     {

  00000		 |$LN5@DeltaTicks|
  00000		 |$M37633|

; 128  :         return (DeltaTicks * m_SamplesPerTick);

  00000	e5903608	 ldr         r3, [r0, #0x608]

; 129  :     }

  00004	e0000193	 mul         r0, r3, r1
  00008	e12fff1e	 bx          lr
  0000c		 |$M37634|

			 ENDP  ; |?DeltaTicksToSamples@CMidiStream@@QAAII@Z|, CMidiStream::DeltaTicksToSamples

	EXPORT	|?GainChange@CMidiStream@@UAAXXZ|	; CMidiStream::GainChange
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T37648| DCD	|$LN10@GainChange|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GainChange@CMidiStream@@UAAXXZ| PROC	; CMidiStream::GainChange

; 27   : {

  00000		 |$LN10@GainChange|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37645|

; 28   :     PLIST_ENTRY pListEntry;
; 29   :     CMidiNote *pCNote;
; 30   :     pListEntry = m_NoteList.Flink;
; 31   :     while (pListEntry != &m_NoteList)

  00004	e2803c05	 add         r3, r0, #5, 24
  00008	e59045e8	 ldr         r4, [r0, #0x5E8]
  0000c	e28350e8	 add         r5, r3, #0xE8
  00010	ea000002	 b           |$LN7@GainChange|
  00014		 |$LL2@GainChange|

; 32   :     {
; 33   :         // Get a pointer to the stream context
; 34   :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);
; 35   :         pCNote->GainChange();

  00014	e1a00004	 mov         r0, r4
  00018	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 36   :         pListEntry = pListEntry->Flink;

  0001c	e5944000	 ldr         r4, [r4]
  00020		 |$LN7@GainChange|
  00020	e1540005	 cmp         r4, r5
  00024	1afffffa	 bne         |$LL2@GainChange|

; 37   :     }
; 38   : }

  00028	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37646|

			 ENDP  ; |?GainChange@CMidiStream@@UAAXXZ|, CMidiStream::GainChange

	EXPORT	|?MapNoteGain@CMidiStream@@QAAKK@Z|	; CMidiStream::MapNoteGain
	IMPORT	|?MapGain@StreamContext@@QAAKK@Z|	; StreamContext::MapGain

  00000			 AREA	 |.pdata|, PDATA
|$T37660| DCD	|$LN5@MapNoteGai|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MapNoteGain@CMidiStream@@QAAKK@Z| PROC ; CMidiStream::MapNoteGain

; 47   : {

  00000		 |$LN5@MapNoteGai|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37657|

; 48   :     DWORD TotalGain = NoteGain & 0xFFFF;
; 49   :     DWORD StreamGain = m_dwGain & 0xFFFF;

  00004	e590e058	 ldr         lr, [r0, #0x58]
  00008	e3a03cff	 mov         r3, #0xFF, 24
  0000c	e38330ff	 orr         r3, r3, #0xFF
  00010	e0012003	 and         r2, r1, r3
  00014	e00e3003	 and         r3, lr, r3

; 50   : 
; 51   :     TotalGain *= StreamGain; // Calc. aggregate gain

  00018	e0030392	 mul         r3, r2, r3

; 52   :     TotalGain += 0xFFFF;   // Force to round up
; 53   :     TotalGain >>= 16;
; 54   : 
; 55   :     return MapGain(TotalGain);

  0001c	e2833cff	 add         r3, r3, #0xFF, 24
  00020	e28330ff	 add         r3, r3, #0xFF
  00024	e1a01823	 mov         r1, r3, lsr #16
  00028	eb000000	 bl          |?MapGain@StreamContext@@QAAKK@Z|

; 56   : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$M37658|

			 ENDP  ; |?MapNoteGain@CMidiStream@@QAAKK@Z|, CMidiStream::MapNoteGain

	EXPORT	|?UpdateTempo@CMidiStream@@QAAJXZ|	; CMidiStream::UpdateTempo
	IMPORT	|__rt_udiv64by64|

  00000			 AREA	 |.pdata|, PDATA
|$T37671| DCD	|$LN7@UpdateTemp|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateTempo@CMidiStream@@QAAJXZ| PROC ; CMidiStream::UpdateTempo

; 141  : {

  00000		 |$LN7@UpdateTemp|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37668|
  00004	e1a05000	 mov         r5, r0

; 142  :     if (m_USecPerQuarterNote==0)

  00008	e5953600	 ldr         r3, [r5, #0x600]

; 143  :     {
; 144  :         m_USecPerQuarterNote = 500000; // If not specified, assume 500000usec = 1/2 sec per quarter note
; 145  :     }
; 146  : 
; 147  :     if (m_TicksPerQuarterNote==0)
; 148  :     {
; 149  :         m_TicksPerQuarterNote = 96;      // If not specified, assume 96 ticks/quarter note
; 150  :     }
; 151  : 
; 152  :     UINT64 Num = SAMPLERATE;
; 153  :     Num *= m_USecPerQuarterNote;
; 154  :     UINT64 Den = 1000000;
; 155  :     Den *= m_TicksPerQuarterNote;

  0000c	e3a02b2b	 mov         r2, #0x2B, 22
  00010	e3821044	 orr         r1, r2, #0x44
  00014	e3530000	 cmp         r3, #0
  00018	03a03a7a	 moveq       r3, #0x7A, 20
  0001c	03833e12	 orreq       r3, r3, #0x12, 28
  00020	05853600	 streq       r3, [r5, #0x600]
  00024	e5953604	 ldr         r3, [r5, #0x604]
  00028	e5954600	 ldr         r4, [r5, #0x600]
  0002c	e3530000	 cmp         r3, #0
  00030	03a03060	 moveq       r3, #0x60
  00034	05853604	 streq       r3, [r5, #0x604]
  00038	e595e604	 ldr         lr, [r5, #0x604]
  0003c	e3a0393d	 mov         r3, #0x3D, 18
  00040	e3833d09	 orr         r3, r3, #9, 26
  00044	e083239e	 umull       r2, r3, lr, r3
  00048	e0810194	 umull       r0, r1, r4, r1

; 156  :     UINT64 SamplesPerTick = Num/Den;

  0004c	eb000000	 bl          __rt_udiv64by64

; 157  :     m_SamplesPerTick = (UINT32)SamplesPerTick;

  00050	e5850608	 str         r0, [r5, #0x608]

; 158  :     return S_OK;

  00054	e3a00000	 mov         r0, #0

; 159  : }

  00058	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M37669|

			 ENDP  ; |?UpdateTempo@CMidiStream@@QAAJXZ|, CMidiStream::UpdateTempo

	EXPORT	|?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z| ; CMidiStream::FindNote
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37697| DCD	|$LN17@FindNote|
	DCD	0x40001201
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z| PROC ; CMidiStream::FindNote

; 423  : {

  00000		 |$LN17@FindNote|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37694|

; 424  :     PLIST_ENTRY pListEntry;
; 425  :     CMidiNote *pCNote;
; 426  :     pListEntry = m_NoteList.Flink;

  00004	e590e5e8	 ldr         lr, [r0, #0x5E8]

; 427  :     while (pListEntry != &m_NoteList)

  00008	e2803c05	 add         r3, r0, #5, 24
  0000c	e28300e8	 add         r0, r3, #0xE8
  00010	ea000006	 b           |$LN14@FindNote|
  00014		 |$LL3@FindNote|

; 428  :     {
; 429  :         // Get a pointer to the stream context
; 430  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);
; 431  : 
; 432  :         if (pCNote->NoteVal()==dwNote && pCNote->NoteChannel()==dwChannel)

  00014	e59e300c	 ldr         r3, [lr, #0xC]
  00018	e1530001	 cmp         r3, r1
  0001c	1a000002	 bne         |$LN1@FindNote|
  00020	e59e3014	 ldr         r3, [lr, #0x14]
  00024	e1530002	 cmp         r3, r2
  00028	0a000003	 beq         |$LN4@FindNote|
  0002c		 |$LN1@FindNote|

; 433  :         {
; 434  :             return pCNote;
; 435  :         }
; 436  : 
; 437  :         pListEntry = pListEntry->Flink;

  0002c	e59ee000	 ldr         lr, [lr]
  00030		 |$LN14@FindNote|
  00030	e15e0000	 cmp         lr, r0
  00034	1afffff6	 bne         |$LL3@FindNote|

; 438  :     }
; 439  :     return NULL;

  00038	e3a0e000	 mov         lr, #0
  0003c		 |$LN4@FindNote|

; 440  : }

  0003c	e1a0000e	 mov         r0, lr
  00040	e49de004	 ldr         lr, [sp], #4
  00044	e12fff1e	 bx          lr
  00048		 |$M37695|

			 ENDP  ; |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|, CMidiStream::FindNote

	EXPORT	|?NoteOn@CMidiStream@@QAAJIII@Z|	; CMidiStream::NoteOn
	IMPORT	|?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| ; CMidiNote::NoteOn
	IMPORT	|?AddRef@StreamContext@@QAAJXZ|		; StreamContext::AddRef
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37730| DCD	|$LN19@NoteOn|
	DCD	0x40003102
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteOn@CMidiStream@@QAAJIII@Z| PROC	; CMidiStream::NoteOn

; 451  : {

  00000		 |$LN19@NoteOn|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M37727|
  00008	e1a07003	 mov         r7, r3
  0000c	e1a06002	 mov         r6, r2
  00010	e1a08001	 mov         r8, r1
  00014	e1a05000	 mov         r5, r0

; 452  :     CMidiNote *pCNote=NULL;
; 453  : 
; 454  :     PLIST_ENTRY pListEntry;
; 455  : 
; 456  :     // First try to find the same note already being played
; 457  :     pCNote = FindNote(dwNote, dwChannel);

  00018	e1a02007	 mov         r2, r7
  0001c	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00020	e1b04000	 movs        r4, r0

; 458  :     if (pCNote)

  00024	0a000007	 beq         |$LN4@NoteOn|

; 459  :     {
; 460  :         // If so, just set its velocity to the new velocity
; 461  :         // This allows us to change volume while a note is being
; 462  :         // played without any chance of glitching
; 463  :         pCNote->SetVelocity(dwVelocity);

  00028	e3e02000	 mvn         r2, #0
  0002c	e1a03486	 mov         r3, r6, lsl #9
  00030	e1a00004	 mov         r0, r4
  00034	e5842028	 str         r2, [r4, #0x28]
  00038	e5843020	 str         r3, [r4, #0x20]
  0003c	e5846010	 str         r6, [r4, #0x10]
  00040	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 464  :     }
; 465  :     else

  00044	ea00000d	 b           |$LN3@NoteOn|
  00048		 |$LN4@NoteOn|

; 466  :     {
; 467  :         // Try to allocate a note from the free list
; 468  :         pListEntry = m_FreeList.Flink;
; 469  :         if (pListEntry != &m_FreeList)

  00048	e1a03005	 mov         r3, r5
  0004c	e5b345f0	 ldr         r4, [r3, #0x5F0]!
  00050	e1540003	 cmp         r4, r3
  00054	0a000002	 beq         |$LN2@NoteOn|

; 470  :         {
; 471  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);
; 472  : 
; 473  :             // If we got a note from the free list, do an AddRef on this stream context
; 474  :             AddRef();

  00058	e1a00005	 mov         r0, r5
  0005c	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 475  :         }
; 476  :         else

  00060	ea000000	 b           |$LN1@NoteOn|
  00064		 |$LN2@NoteOn|

; 477  :         {
; 478  :             // Note: if we every support multiple instruments, here we should try to steal the oldest
; 479  :             // note with the same channel before just trying to steal the oldest note.
; 480  : 
; 481  :             // Steal the oldest note (which is the note at the head of the note list)
; 482  :             // Note: This should _never_ fail, since there must be a note on one of the lists!
; 483  :             pListEntry = m_NoteList.Flink;
; 484  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00064	e59545e8	 ldr         r4, [r5, #0x5E8]
  00068		 |$LN1@NoteOn|

; 485  :         }
; 486  : 
; 487  :         pCNote->NoteOn(this,dwNote,dwVelocity,dwChannel);

  00068	e1a03006	 mov         r3, r6
  0006c	e1a02008	 mov         r2, r8
  00070	e1a01005	 mov         r1, r5
  00074	e1a00004	 mov         r0, r4
  00078	e58d7000	 str         r7, [sp]
  0007c	eb000000	 bl          |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z|
  00080		 |$LN3@NoteOn|

; 488  :     }
; 489  : 
; 490  :     // Move the note from whichever list it was on to the note list at the end.
; 491  :     // This ensures that if we reused an existing note, its age gets reset.
; 492  :     NoteMoveToNoteList(pCNote);

  00080	e5941004	 ldr         r1, [r4, #4]
  00084	e5942000	 ldr         r2, [r4]
  00088	e2853c05	 add         r3, r5, #5, 24
  0008c	e283e0e8	 add         lr, r3, #0xE8
  00090	e5812000	 str         r2, [r1]
  00094	e5942000	 ldr         r2, [r4]
  00098	e5943004	 ldr         r3, [r4, #4]

; 493  : 
; 494  :     return S_OK;

  0009c	e3a00000	 mov         r0, #0
  000a0	e5823004	 str         r3, [r2, #4]
  000a4	e59e3004	 ldr         r3, [lr, #4]
  000a8	e584e000	 str         lr, [r4]
  000ac	e5843004	 str         r3, [r4, #4]
  000b0	e5834000	 str         r4, [r3]
  000b4	e58e4004	 str         r4, [lr, #4]

; 495  : }

  000b8	e28dd004	 add         sp, sp, #4
  000bc	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$M37728|

			 ENDP  ; |?NoteOn@CMidiStream@@QAAJIII@Z|, CMidiStream::NoteOn

	EXPORT	|?NoteOff@CMidiStream@@QAAJIII@Z|	; CMidiStream::NoteOff
	IMPORT	|?NoteOff@CMidiNote@@QAAJI@Z|		; CMidiNote::NoteOff

  00000			 AREA	 |.pdata|, PDATA
|$T37744| DCD	|$LN6@NoteOff|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteOff@CMidiStream@@QAAJIII@Z| PROC	; CMidiStream::NoteOff

; 507  : {

  00000		 |$LN6@NoteOff|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37741|
  00004	e1a04002	 mov         r4, r2

; 508  :     CMidiNote *pCNote = FindNote(dwNote, dwChannel);

  00008	e1a02003	 mov         r2, r3
  0000c	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00010	e3500000	 cmp         r0, #0

; 509  :     if (pCNote)
; 510  :     {
; 511  :         pCNote->NoteOff(dwVelocity);

  00014	11a01004	 movne       r1, r4
  00018	1b000000	 blne        |?NoteOff@CMidiNote@@QAAJI@Z|

; 512  :     }
; 513  : 
; 514  :     return S_OK;

  0001c	e3a00000	 mov         r0, #0

; 515  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37742|

			 ENDP  ; |?NoteOff@CMidiStream@@QAAJIII@Z|, CMidiStream::NoteOff

	EXPORT	|?AllNotesOff@CMidiStream@@QAAJI@Z|	; CMidiStream::AllNotesOff

  00000			 AREA	 |.pdata|, PDATA
|$T37760| DCD	|$LN10@AllNotesOf|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllNotesOff@CMidiStream@@QAAJI@Z| PROC ; CMidiStream::AllNotesOff

; 525  : {

  00000		 |$LN10@AllNotesOf|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37757|
  00004	e1a06001	 mov         r6, r1

; 526  :     PLIST_ENTRY pListEntry;
; 527  :     CMidiNote *pCNote;
; 528  :     pListEntry = m_NoteList.Flink;
; 529  :     while (pListEntry != &m_NoteList)

  00008	e2803c05	 add         r3, r0, #5, 24
  0000c	e59045e8	 ldr         r4, [r0, #0x5E8]
  00010	e28350e8	 add         r5, r3, #0xE8
  00014	ea000003	 b           |$LN7@AllNotesOf|
  00018		 |$LL2@AllNotesOf|

; 530  :     {
; 531  :         // Get the note
; 532  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00018	e1a00004	 mov         r0, r4

; 533  : 
; 534  :         // Get the next link, since NoteOff may remove the note from the queue depeding on the implementation
; 535  :         pListEntry = pListEntry->Flink;
; 536  : 
; 537  :         // Turn the note off
; 538  :         pCNote->NoteOff(dwVelocity);

  0001c	e5944000	 ldr         r4, [r4]
  00020	e1a01006	 mov         r1, r6
  00024	eb000000	 bl          |?NoteOff@CMidiNote@@QAAJI@Z|
  00028		 |$LN7@AllNotesOf|
  00028	e1540005	 cmp         r4, r5
  0002c	1afffff9	 bne         |$LL2@AllNotesOf|

; 539  :     }
; 540  :     return S_OK;

  00030	e3a00000	 mov         r0, #0

; 541  : }

  00034	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M37758|

			 ENDP  ; |?AllNotesOff@CMidiStream@@QAAJI@Z|, CMidiStream::AllNotesOff

	EXPORT	|?Open@CMidiStream@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; CMidiStream::Open
	IMPORT	|?Open@StreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; StreamContext::Open

  00000			 AREA	 |.pdata|, PDATA
|$T37779| DCD	|$LN15@Open|
	DCD	0x40003b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@CMidiStream@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; CMidiStream::Open

; 64   : {

  00000		 |$LN15@Open|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M37776|
  00004	e1a09003	 mov         r9, r3
  00008	e1a08002	 mov         r8, r2
  0000c	e1a0a001	 mov         r10, r1
  00010	e1a07000	 mov         r7, r0

; 65   :     HRESULT Result = E_FAIL;
; 66   : 
; 67   :     LPWAVEFORMAT_MIDI pwfxmidi = (LPWAVEFORMAT_MIDI) lpWOD->lpFormat;

  00014	e5d86004	 ldrb        r6, [r8, #4]
  00018	e5d8e005	 ldrb        lr, [r8, #5]
  0001c	e5d84006	 ldrb        r4, [r8, #6]
  00020	e5d85007	 ldrb        r5, [r8, #7]
  00024	e186e40e	 orr         lr, r6, lr, lsl #8
  00028	e18ee804	 orr         lr, lr, r4, lsl #16
  0002c	e18e5c05	 orr         r5, lr, r5, lsl #24

; 68   : 
; 69   :     if (pwfxmidi->wfx.cbSize!=WAVEFORMAT_MIDI_EXTRASIZE)

  00030	e5d54010	 ldrb        r4, [r5, #0x10]
  00034	e5d5e011	 ldrb        lr, [r5, #0x11]
  00038	e184e40e	 orr         lr, r4, lr, lsl #8
  0003c	e35e000a	 cmp         lr, #0xA
  00040	13a03116	 movne       r3, #0x16, 2

; 70   :     {
; 71   :         return E_FAIL;

  00044	13834901	 orrne       r4, r3, #1, 18
  00048	1a000024	 bne         |$LN1@Open|

; 72   :     }
; 73   : 
; 74   :     m_USecPerQuarterNote  = pwfxmidi->USecPerQuarterNote;

  0004c	e5953014	 ldr         r3, [r5, #0x14]

; 75   :     m_TicksPerQuarterNote = pwfxmidi->TicksPerQuarterNote;
; 76   : 
; 77   :     UpdateTempo();

  00050	e1a00007	 mov         r0, r7
  00054	e5873600	 str         r3, [r7, #0x600]
  00058	e5953018	 ldr         r3, [r5, #0x18]
  0005c	e5873604	 str         r3, [r7, #0x604]
  00060	eb000000	 bl          |?UpdateTempo@CMidiStream@@QAAJXZ|

; 78   : 
; 79   :     m_DeltaSampleCount=0;
; 80   : 
; 81   :     // Add all notes to free list
; 82   :     InitializeListHead(&m_NoteList);

  00064	e2873c05	 add         r3, r7, #5, 24
  00068	e28330e8	 add         r3, r3, #0xE8
  0006c	e3a02000	 mov         r2, #0

; 83   :     InitializeListHead(&m_FreeList);

  00070	e2870e5f	 add         r0, r7, #0x5F, 28
  00074	e58735ec	 str         r3, [r7, #0x5EC]
  00078	e58735e8	 str         r3, [r7, #0x5E8]
  0007c	e587260c	 str         r2, [r7, #0x60C]
  00080	e58705f4	 str         r0, [r7, #0x5F4]
  00084	e58705f0	 str         r0, [r7, #0x5F0]
  00088	e1a01007	 mov         r1, r7
  0008c	e3a0e020	 mov         lr, #0x20
  00090		 |$LL7@Open|

; 84   :     for (int i=0;i<NUMNOTES;i++)
; 85   :     {
; 86   :         InsertTailList(&m_FreeList,&m_MidiNote[i].m_Link);

  00090	e5903004	 ldr         r3, [r0, #4]
  00094	e2812068	 add         r2, r1, #0x68
  00098	e5810068	 str         r0, [r1, #0x68]
  0009c	e581306c	 str         r3, [r1, #0x6C]
  000a0	e5832000	 str         r2, [r3]
  000a4	e5802004	 str         r2, [r0, #4]
  000a8	e281102c	 add         r1, r1, #0x2C
  000ac	e25ee001	 subs        lr, lr, #1
  000b0	1afffff6	 bne         |$LL7@Open|

; 87   :     }
; 88   : 
; 89   :     Result = StreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  000b4	e1a03009	 mov         r3, r9
  000b8	e1a02008	 mov         r2, r8
  000bc	e1a0100a	 mov         r1, r10
  000c0	e1a00007	 mov         r0, r7
  000c4	eb000000	 bl          |?Open@StreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  000c8	e1b04000	 movs        r4, r0

; 90   : 
; 91   :     if (Result==MMSYSERR_NOERROR)
; 92   :     {
; 93   :         // Note: Output streams should be initialized in the run state.
; 94   :         Run();

  000cc	05973000	 ldreq       r3, [r7]
  000d0	01a00007	 moveq       r0, r7
  000d4	05933010	 ldreq       r3, [r3, #0x10]
  000d8	01a0e00f	 moveq       lr, pc
  000dc	012fff13	 bxeq        r3
  000e0		 |$LN1@Open|

; 95   :     }
; 96   : 
; 97   :     return Result;
; 98   : }

  000e0	e1a00004	 mov         r0, r4
  000e4	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$M37777|

			 ENDP  ; |?Open@CMidiStream@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, CMidiStream::Open

	EXPORT	|?Reset@CMidiStream@@UAAKXZ|		; CMidiStream::Reset
	IMPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00000			 AREA	 |.pdata|, PDATA
|$T37790| DCD	|$LN6@Reset|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Reset@CMidiStream@@UAAKXZ| PROC	; CMidiStream::Reset

; 107  : {

  00000		 |$LN6@Reset|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37787|
  00004	e1a04000	 mov         r4, r0

; 108  :     DWORD dwResult = StreamContext::Reset();

  00008	eb000000	 bl          |?Reset@StreamContext@@UAAKXZ|
  0000c	e1b05000	 movs        r5, r0

; 109  :     if (dwResult==MMSYSERR_NOERROR)

  00010	1a000007	 bne         |$LN1@Reset|

; 110  :     {
; 111  :         AllNotesOff(0);

  00014	e3a01000	 mov         r1, #0
  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|

; 112  : 
; 113  :         // Note: Output streams should be reset to the run state.
; 114  :         Run();

  00020	e5943000	 ldr         r3, [r4]
  00024	e1a00004	 mov         r0, r4
  00028	e5933010	 ldr         r3, [r3, #0x10]
  0002c	e1a0e00f	 mov         lr, pc
  00030	e12fff13	 bx          r3
  00034		 |$LN1@Reset|

; 115  :     }
; 116  :     return dwResult;
; 117  : }

  00034	e1a00005	 mov         r0, r5
  00038	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M37788|

			 ENDP  ; |?Reset@CMidiStream@@UAAKXZ|, CMidiStream::Reset

	EXPORT	|?Close@CMidiStream@@UAAKXZ|		; CMidiStream::Close
	IMPORT	|?Close@StreamContext@@UAAKXZ|		; StreamContext::Close

  00000			 AREA	 |.pdata|, PDATA
|$T37801| DCD	|$LN6@Close|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Close@CMidiStream@@UAAKXZ| PROC	; CMidiStream::Close

; 125  : {

  00000		 |$LN6@Close|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37798|
  00004	e1a05000	 mov         r5, r0

; 126  :     DWORD dwResult = StreamContext::Close();

  00008	eb000000	 bl          |?Close@StreamContext@@UAAKXZ|
  0000c	e1b04000	 movs        r4, r0

; 127  :     if (dwResult==MMSYSERR_NOERROR)
; 128  :     {
; 129  :         AllNotesOff(0);

  00010	03a01000	 moveq       r1, #0
  00014	01a00005	 moveq       r0, r5
  00018	0b000000	 bleq        |?AllNotesOff@CMidiStream@@QAAJI@Z|

; 130  :     }
; 131  :     return dwResult;
; 132  : }

  0001c	e1a00004	 mov         r0, r4
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37799|

			 ENDP  ; |?Close@CMidiStream@@UAAKXZ|, CMidiStream::Close

	EXPORT	|?MidiData@CMidiStream@@QAAJI@Z|	; CMidiStream::MidiData

  00000			 AREA	 |.pdata|, PDATA
|$T37822| DCD	|$LN19@MidiData|
	DCD	0x40002d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MidiData@CMidiStream@@QAAJI@Z| PROC	; CMidiStream::MidiData

; 365  : {

  00000		 |$LN19@MidiData|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M37819|
  00004	e1a0e000	 mov         lr, r0
  00008	e3a03106	 mov         r3, #6, 2

; 366  :     HRESULT Result=E_NOTIMPL;
; 367  :     UINT32 dwChannel;
; 368  :     UINT32 dwNote;
; 369  :     UINT32 dwVelocity;
; 370  : 
; 371  :     if (dwData & 0x80)

  0000c	e3110080	 tst         r1, #0x80
  00010	e3830901	 orr         r0, r3, #1, 18

; 372  :     {
; 373  :         m_RunningStatus = dwData&0xFF;      // status byte...

  00014	15ce15fc	 strneb      r1, [lr, #0x5FC]

; 374  :     }
; 375  :     else
; 376  :     {
; 377  :         dwData = (dwData<<8) | m_RunningStatus;

  00018	05de35fc	 ldreqb      r3, [lr, #0x5FC]
  0001c	01831401	 orreq       r1, r3, r1, lsl #8

; 378  :     }
; 379  : 
; 380  :     dwChannel  = (dwData & 0x0f) ;
; 381  :     dwNote     = ((dwData >> 8) & 0x7f) ;

  00020	e1a03881	 mov         r3, r1, lsl #17

; 382  :     dwVelocity = ((dwData >> 16) & 0x7f) ;

  00024	e1a02481	 mov         r2, r1, lsl #9

; 383  : 
; 384  :     switch (dwData & 0xf0)

  00028	e20150f0	 and         r5, r1, #0xF0
  0002c	e1a06ca3	 mov         r6, r3, lsr #25
  00030	e1a04ca2	 mov         r4, r2, lsr #25
  00034	e3550080	 cmp         r5, #0x80
  00038	0a000013	 beq         |$LN6@MidiData|
  0003c	e3550090	 cmp         r5, #0x90
  00040	0a000008	 beq         |$LN7@MidiData|
  00044	e35500b0	 cmp         r5, #0xB0
  00048	1a000017	 bne         |$LN8@MidiData|

; 396  :         break;
; 397  : 
; 398  :     case 0xB0:  // Control change
; 399  :         {
; 400  :             switch (dwNote)

  0004c	e356007b	 cmp         r6, #0x7B
  00050	1a000015	 bne         |$LN8@MidiData|

; 401  :             {
; 402  :             case 123:   // turns all notes off
; 403  :                 {
; 404  :                     Result = AllNotesOff(0);

  00054	e3a01000	 mov         r1, #0
  00058	e1a0000e	 mov         r0, lr
  0005c	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|

; 405  :                     break;
; 406  :                 }
; 407  :             }
; 408  :             break;
; 409  :         }
; 410  :     }
; 411  : 
; 412  :     return Result;
; 413  : }

  00060	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN7@MidiData|

; 385  :     {
; 386  :     case 0x90:  // Note on
; 387  :         if (dwVelocity!=0)

  00068	e3540000	 cmp         r4, #0
  0006c	0a000006	 beq         |$LN6@MidiData|

; 388  :         {
; 389  :             Result = NoteOn(dwNote, dwVelocity, dwChannel);

  00070	e201300f	 and         r3, r1, #0xF
  00074	e1a01006	 mov         r1, r6
  00078	e1a02004	 mov         r2, r4
  0007c	e1a0000e	 mov         r0, lr
  00080	eb000000	 bl          |?NoteOn@CMidiStream@@QAAJIII@Z|

; 405  :                     break;
; 406  :                 }
; 407  :             }
; 408  :             break;
; 409  :         }
; 410  :     }
; 411  : 
; 412  :     return Result;
; 413  : }

  00084	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN6@MidiData|

; 390  :             break;
; 391  :         }
; 392  :         // If dwVelocity is 0, this is really a note off message, so fall through
; 393  : 
; 394  :     case 0x80:  // Note off
; 395  :         Result = NoteOff(dwNote, dwVelocity, dwChannel);

  0008c	e201200f	 and         r2, r1, #0xF
  00090	e1a01006	 mov         r1, r6
  00094	e1a0000e	 mov         r0, lr
  00098	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  0009c	e3500000	 cmp         r0, #0
  000a0	11a01004	 movne       r1, r4
  000a4	1b000000	 blne        |?NoteOff@CMidiNote@@QAAJI@Z|
  000a8	e3a00000	 mov         r0, #0
  000ac		 |$LN8@MidiData|

; 405  :                     break;
; 406  :                 }
; 407  :             }
; 408  :             break;
; 409  :         }
; 410  :     }
; 411  : 
; 412  :     return Result;
; 413  : }

  000ac	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$M37820|

			 ENDP  ; |?MidiData@CMidiStream@@QAAJI@Z|, CMidiStream::MidiData

	EXPORT	|?InternalMidiMessage@CMidiStream@@QAAJI@Z| ; CMidiStream::InternalMidiMessage

  00000			 AREA	 |.pdata|, PDATA
|$T37842| DCD	|$LN15@InternalMi|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InternalMidiMessage@CMidiStream@@QAAJI@Z| PROC ; CMidiStream::InternalMidiMessage

; 330  : {

  00000		 |$LN15@InternalMi|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M37839|

; 331  :     UINT32 OpCode = dwData & 0xF0000000;

  00004	e211220f	 ands        r2, r1, #0xF, 4

; 332  :     switch (OpCode)

  00008	0a000023	 beq         |$LN5@InternalMi|
  0000c	e3520201	 cmp         r2, #1, 4
  00010	0a00001c	 beq         |$LN4@InternalMi|
  00014	e3520202	 cmp         r2, #2, 4
  00018	13520203	 cmpne       r2, #3, 4
  0001c	13a03106	 movne       r3, #6, 2

; 351  :             }
; 352  :         }
; 353  :     }
; 354  : 
; 355  :     return E_NOTIMPL;

  00020	13830901	 orrne       r0, r3, #1, 18

; 356  : }

  00024	18bd4010	 ldmneia     sp!, {r4, lr}
  00028	112fff1e	 bxne        lr

; 351  :             }
; 352  :         }
; 353  :     }
; 354  : 
; 355  :     return E_NOTIMPL;

  0002c	e3a03cff	 mov         r3, #0xFF, 24

; 339  :     case MIDI_MESSAGE_FREQGENON:
; 340  :     case MIDI_MESSAGE_FREQGENOFF:
; 341  :         {
; 342  :             UINT32 dwNote = ((dwData) & 0xffff);

  00030	e383e0ff	 orr         lr, r3, #0xFF

; 343  :             UINT32 dwVelocity = ((dwData >> 16) & 0x7f) ;

  00034	e1a03481	 mov         r3, r1, lsl #9
  00038	e1a04ca3	 mov         r4, r3, lsr #25

; 344  :             if ((OpCode==MIDI_MESSAGE_FREQGENON)  && (dwVelocity>0))

  0003c	e3520202	 cmp         r2, #2, 4
  00040	1a000007	 bne         |$LN2@InternalMi|
  00044	e3540000	 cmp         r4, #0
  00048	0a000005	 beq         |$LN2@InternalMi|

; 345  :             {
; 346  :                 return NoteOn(dwNote, dwVelocity, FREQCHANNEL);

  0004c	e3a03010	 mov         r3, #0x10
  00050	e1a02004	 mov         r2, r4
  00054	e001100e	 and         r1, r1, lr
  00058	eb000000	 bl          |?NoteOn@CMidiStream@@QAAJIII@Z|

; 356  : }

  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN2@InternalMi|

; 347  :             }
; 348  :             else
; 349  :             {
; 350  :                 return NoteOff(dwNote, dwVelocity, FREQCHANNEL);

  00064	e3a02010	 mov         r2, #0x10
  00068	e001100e	 and         r1, r1, lr
  0006c	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00070	e3500000	 cmp         r0, #0
  00074	11a01004	 movne       r1, r4
  00078	1b000000	 blne        |?NoteOff@CMidiNote@@QAAJI@Z|
  0007c	e3a00000	 mov         r0, #0

; 356  : }

  00080	e8bd4010	 ldmia       sp!, {r4, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN4@InternalMi|

; 336  :     case MIDI_MESSAGE_UPDATETEMPO:
; 337  :         m_USecPerQuarterNote  = (dwData & 0xFFFFFF);

  00088	e3c134ff	 bic         r3, r1, #0xFF, 8
  0008c	e5803600	 str         r3, [r0, #0x600]

; 338  :         return UpdateTempo();

  00090	eb000000	 bl          |?UpdateTempo@CMidiStream@@QAAJXZ|

; 356  : }

  00094	e8bd4010	 ldmia       sp!, {r4, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN5@InternalMi|

; 333  :     {
; 334  :     case 0:
; 335  :         return MidiData(dwData);

  0009c	eb000000	 bl          |?MidiData@CMidiStream@@QAAJI@Z|

; 356  : }

  000a0	e8bd4010	 ldmia       sp!, {r4, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$M37840|

			 ENDP  ; |?InternalMidiMessage@CMidiStream@@QAAJI@Z|, CMidiStream::InternalMidiMessage

	EXPORT	|?ProcessMidiStream@CMidiStream@@QAAIXZ| ; CMidiStream::ProcessMidiStream
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|__C_specific_handler|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37874| DCD	|$LN25@ProcessMid|
	DCD	0xc0003105

  00000			 AREA	 |.pdata|, PDATA
|$T37876| DCD	|$LN10@ProcessMid|
	DCD	0x40000301

  00000			 AREA	 |.xdata|, DATA
|$T37872| DCD	0x1
	DCD	|$LN14@ProcessMid|
	DCD	|$LN15@ProcessMid|
	DCD	|$LN10@ProcessMid|
	DCD	|$LN11@ProcessMid|
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T37872|

  00008		 |?ProcessMidiStream@CMidiStream@@QAAIXZ| PROC ; CMidiStream::ProcessMidiStream

; 171  : {

  00008		 |$LN25@ProcessMid|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0001	 stmdb       sp!, {r0}
  00010	e92d58f0	 stmdb       sp!, {r4 - r7, r11, r12, lr}
  00014	e28db01c	 add         r11, sp, #0x1C
  00018	e24dd00c	 sub         sp, sp, #0xC
  0001c		 |$LN23@ProcessMid|
  0001c	e1a05000	 mov         r5, r0
  00020	e58b5000	 str         r5, [r11]

; 172  :     WAVEFORMAT_MIDI_MESSAGE *pMsg;
; 173  :     WAVEFORMAT_MIDI_MESSAGE *pMsgEnd;
; 174  :     UINT32 ThisMidiEventDelta;
; 175  : 
; 176  :     // Process all midi messages up to and including the current sample
; 177  :     pMsg    = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrData;
; 178  :     pMsgEnd = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrDataEnd;

  00024	e5957048	 ldr         r7, [r5, #0x48]
  00028	e5956044	 ldr         r6, [r5, #0x44]
  0002c	e51b4028	 ldr         r4, [r11, #-0x28]
  00030	e50b7024	 str         r7, [r11, #-0x24]
  00034		 |$LL6@ProcessMid|

; 179  : 
; 180  :     for (;;)
; 181  :     {
; 182  :         if (pMsg>=pMsgEnd)

  00034	e1560007	 cmp         r6, r7
  00038	3a000006	 bcc         |$LN4@ProcessMid|

; 183  :         {
; 184  :             pMsg = (WAVEFORMAT_MIDI_MESSAGE *)GetNextBuffer();

  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  00044	e1b06000	 movs        r6, r0

; 186  :             {
; 187  :                 // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::ProcessMidiStream no more events\r\n")));
; 188  :                 return 0;

  00048	03a04000	 moveq       r4, #0

; 185  :             if (!pMsg)

  0004c	0a00001a	 beq         |$LN7@ProcessMid|

; 189  :             }
; 190  :             pMsgEnd = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrDataEnd;

  00050	e5957048	 ldr         r7, [r5, #0x48]
  00054	e50b7024	 str         r7, [r11, #-0x24]
  00058		 |$LN4@ProcessMid|
  00058		 |$LN14@ProcessMid|

; 191  :         }
; 192  : 
; 193  :         _try
; 194  :         {
; 195  :             ThisMidiEventDelta = DeltaTicksToSamples(pMsg->DeltaTicks);

  00058	e5962000	 ldr         r2, [r6]
  0005c	e5953608	 ldr         r3, [r5, #0x608]

; 196  :             if (ThisMidiEventDelta > m_DeltaSampleCount)

  00060	e595160c	 ldr         r1, [r5, #0x60C]
  00064	e0030392	 mul         r3, r2, r3
  00068	e1530001	 cmp         r3, r1
  0006c	9a000003	 bls         |$LN1@ProcessMid|

; 197  :             {
; 198  :                 m_lpCurrData = (PBYTE)pMsg;

  00070	e5856044	 str         r6, [r5, #0x44]

; 199  :                 INT32 Delta = ThisMidiEventDelta-m_DeltaSampleCount;

  00074	e0434001	 sub         r4, r3, r1

; 200  :                 // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::ProcessMidiStream next event @delta %d\r\n"),Delta));
; 201  :                 return Delta;

  00078	e50b4028	 str         r4, [r11, #-0x28]
  0007c	ea00000e	 b           |$LN7@ProcessMid|
  00080		 |$LN1@ProcessMid|

; 202  :             }
; 203  : 
; 204  :             // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::ProcessMidiStream sending midi message 0x%x\r\n"),pMsg->MidiMsg));
; 205  :             InternalMidiMessage(pMsg->MidiMsg);

  00080	e5961004	 ldr         r1, [r6, #4]
  00084	e1a00005	 mov         r0, r5
  00088	eb000000	 bl          |?InternalMidiMessage@CMidiStream@@QAAJI@Z|

; 206  :             m_DeltaSampleCount=0;

  0008c	e3a03000	 mov         r3, #0
  00090	e585360c	 str         r3, [r5, #0x60C]

; 207  :             pMsg++;

  00094	e2866008	 add         r6, r6, #8
  00098	e50b6020	 str         r6, [r11, #-0x20]
  0009c		 |$LN15@ProcessMid|

; 208  :         }

  0009c	eaffffe4	 b           |$LL6@ProcessMid|
  000a0		 |$LN11@ProcessMid|

; 210  :         {
; 211  :             DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::EXCEPTION IN IST for stream 0x%x, buffer 0x%x!!!!\r\n"), this, m_lpCurrData));
; 212  :             pMsg = pMsgEnd; // Pretend we finished reading the application buffer

  000a0	e51b7024	 ldr         r7, [r11, #-0x24]
  000a4	e1a06007	 mov         r6, r7
  000a8	e50b7020	 str         r7, [r11, #-0x20]
  000ac	e59b5000	 ldr         r5, [r11]
  000b0	e51b4028	 ldr         r4, [r11, #-0x28]
  000b4	eaffffde	 b           |$LL6@ProcessMid|
  000b8		 |$LN22@ProcessMid|
  000b8	e51b4028	 ldr         r4, [r11, #-0x28]
  000bc		 |$LN7@ProcessMid|

; 213  :         }
; 214  :     }
; 215  :     return 0;
; 216  : }

  000bc	e1a00004	 mov         r0, r4
  000c0	e24bd01c	 sub         sp, r11, #0x1C
  000c4	e89d68f0	 ldmia       sp, {r4 - r7, r11, sp, lr}
  000c8	e12fff1e	 bx          lr

			 ENDP  ; |?ProcessMidiStream@CMidiStream@@QAAIXZ|, CMidiStream::ProcessMidiStream

  000cc		 |$LN10@ProcessMid|
  000cc		 |$LN24@ProcessMid|

; 209  :         _except (EXCEPTION_EXECUTE_HANDLER)

  000cc	e52de004	 str         lr, [sp, #-4]!
  000d0		 |$LN13@ProcessMid|
  000d0		 |$LN27@ProcessMid|
  000d0	e3a00001	 mov         r0, #1
  000d4		 |$LN12@ProcessMid|
  000d4	e49df004	 ldr         pc, [sp], #4
  000d8		 |$LN28@ProcessMid|
  000d8		 |$LN26@ProcessMid|
	EXPORT	|?Render@CMidiStream@@UAAPAEPAE00@Z|	; CMidiStream::Render
	IMPORT	|?Render@CMidiNote@@QAAPAEPAE00@Z|	; CMidiNote::Render
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37915| DCD	|$LN28@Render|
	DCD	0x40003801
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Render@CMidiStream@@UAAPAEPAE00@Z| PROC ; CMidiStream::Render

; 225  : {

  00000		 |$LN28@Render|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M37912|
  00004	e1a08003	 mov         r8, r3
  00008	e1a04002	 mov         r4, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a05000	 mov         r5, r0

; 226  : 
; 227  :     // DEBUGMSG(ZONE_MIDI, (TEXT("Entering CMidiStream::Render, pBuffer=0x%x, current delta = %d\r\n"), pBuffer, m_DeltaSampleCount));
; 228  : 
; 229  :     // If we're not running, or we don't have any buffers queued and the note list is empty,
; 230  :     // just return
; 231  :     if ( (!m_bRunning) || (!StillPlaying() && IsListEmpty(&m_NoteList)) )

  00014	e5952010	 ldr         r2, [r5, #0x10]
  00018	e3520000	 cmp         r2, #0
  0001c	0a00002b	 beq         |$LN9@Render|
  00020	e5952038	 ldr         r2, [r5, #0x38]
  00024	e3520000	 cmp         r2, #0
  00028	1a000004	 bne         |$LN14@Render|
  0002c	e595e5e8	 ldr         lr, [r5, #0x5E8]
  00030	e2852c05	 add         r2, r5, #5, 24
  00034	e28220e8	 add         r2, r2, #0xE8
  00038	e15e0002	 cmp         lr, r2
  0003c	0a000023	 beq         |$LN9@Render|
  00040		 |$LN14@Render|

; 235  :     }
; 236  : 
; 237  :     while (pBuffer<pBufferEnd)

  00040	e1570004	 cmp         r7, r4
  00044	2a00001c	 bcs         |$LN7@Render|
  00048	e2852c05	 add         r2, r5, #5, 24
  0004c	e282a0e8	 add         r10, r2, #0xE8
  00050		 |$LL8@Render|

; 238  :     {
; 239  :         // Process pending midi messages and get relative sample # of next midi event
; 240  :         UINT32 NextMidiEvent;
; 241  :         NextMidiEvent = ProcessMidiStream();

  00050	e1a00005	 mov         r0, r5
  00054	eb000000	 bl          |?ProcessMidiStream@CMidiStream@@QAAIXZ|
  00058	e3500000	 cmp         r0, #0

; 242  : 
; 243  :         PBYTE pBufferEndEvent;  // Where to stop on this pass
; 244  : 
; 245  :         // If NextMidiEvent returns 0, it means there are no more midi messages left in the queue.
; 246  :         if (NextMidiEvent==0)
; 247  :         {
; 248  :             // Just process the rest of this buffer
; 249  :             pBufferEndEvent=pBufferEnd;
; 250  :         }
; 251  :         // NextMidiEvent is non-zero, and represents the delta sample value of the next midi event
; 252  :         else

  0005c	0a000002	 beq         |$LN24@Render|

; 253  :         {
; 254  :             // Convert to be a pointer in this buffer
; 255  :             pBufferEndEvent = pBuffer + (NextMidiEvent * (sizeof(HWSAMPLE) * OUTCHANNELS));

  00060	e0876100	 add         r6, r7, r0, lsl #2

; 256  : 
; 257  :             // If the next event occurs after this buffer, just finish processing this buffer
; 258  :             if (pBufferEndEvent>pBufferEnd)

  00064	e1560004	 cmp         r6, r4
  00068	9a000000	 bls         |$LN4@Render|
  0006c		 |$LN24@Render|

; 259  :             {
; 260  :                 pBufferEndEvent=pBufferEnd;

  0006c	e1a06004	 mov         r6, r4
  00070		 |$LN4@Render|

; 261  :             }
; 262  :         }
; 263  : 
; 264  :         // Update the delta for the samples we're about to process
; 265  :         m_DeltaSampleCount += ((pBufferEndEvent-pBuffer)/(sizeof(HWSAMPLE) * OUTCHANNELS));

  00070	e595260c	 ldr         r2, [r5, #0x60C]

; 266  : 
; 267  :         // Process existing notes
; 268  :         PLIST_ENTRY pListEntry;
; 269  :         pListEntry = m_NoteList.Flink;

  00074	e0463007	 sub         r3, r6, r7
  00078	e59595e8	 ldr         r9, [r5, #0x5E8]
  0007c	e0823123	 add         r3, r2, r3, lsr #2
  00080	e585360c	 str         r3, [r5, #0x60C]
  00084	ea000007	 b           |$LN25@Render|
  00088		 |$LL3@Render|

; 271  :         {
; 272  :             CMidiNote *pCNote;
; 273  : 
; 274  :             // Get a pointer to the stream context
; 275  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00088	e1a00009	 mov         r0, r9

; 276  : 
; 277  :             // Get next list entry, since Render may cause note to go away
; 278  :             pListEntry = pListEntry->Flink;
; 279  : 
; 280  :             PBYTE pBufferLastThis;
; 281  :             pBufferLastThis = pCNote->Render(pBuffer, pBufferEndEvent, pBufferLast);

  0008c	e5999000	 ldr         r9, [r9]
  00090	e1a03008	 mov         r3, r8
  00094	e1a02006	 mov         r2, r6
  00098	e1a01007	 mov         r1, r7
  0009c	eb000000	 bl          |?Render@CMidiNote@@QAAPAEPAE00@Z|

; 282  :             if (pBufferLast < pBufferLastThis)

  000a0	e1580000	 cmp         r8, r0

; 283  :             {
; 284  :                 pBufferLast = pBufferLastThis;

  000a4	31a08000	 movcc       r8, r0
  000a8		 |$LN25@Render|

; 270  :         while (pListEntry != &m_NoteList)

  000a8	e159000a	 cmp         r9, r10
  000ac	1afffff5	 bne         |$LL3@Render|

; 285  :             }
; 286  :         }
; 287  : 
; 288  :         pBuffer = pBufferEndEvent;

  000b0	e1a07006	 mov         r7, r6
  000b4	e1560004	 cmp         r6, r4
  000b8	3affffe4	 bcc         |$LL8@Render|
  000bc		 |$LN7@Render|

; 289  :     }
; 290  : 
; 291  :     // We need to make sure we clear any unwritten section of the buffer to make sure the DMA controller doesn't stop
; 292  :     StreamContext::ClearBuffer(pBufferLast,pBufferEnd);

  000bc	e0442008	 sub         r2, r4, r8
  000c0	e3a01000	 mov         r1, #0
  000c4	e1a00008	 mov         r0, r8
  000c8	eb000000	 bl          memset

; 293  :     pBufferLast=pBufferEnd;
; 294  : 
; 295  :     // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::Render returning, pBufferLast=0x%x, pBufferEnd=0x%x\r\n"),pBufferLast,pBufferEnd));
; 296  :     return pBufferLast;

  000cc	ea000000	 b           |$LN11@Render|
  000d0		 |$LN9@Render|

; 232  :     {
; 233  :         // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::Render nothing to do\r\n")));
; 234  :         return pBuffer;

  000d0	e1a04007	 mov         r4, r7
  000d4		 |$LN11@Render|

; 297  : }

  000d4	e1a00004	 mov         r0, r4
  000d8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$M37913|

			 ENDP  ; |?Render@CMidiStream@@UAAPAEPAE00@Z|, CMidiStream::Render

	EXPORT	|?MidiMessage@CMidiStream@@QAAKI@Z|	; CMidiStream::MidiMessage

  00000			 AREA	 |.pdata|, PDATA
|$T37929| DCD	|$LN8@MidiMessag|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MidiMessage@CMidiStream@@QAAKI@Z| PROC ; CMidiStream::MidiMessage

; 307  : {

  00000		 |$LN8@MidiMessag|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M37926|
  00004	e1a04000	 mov         r4, r0

; 308  :     HRESULT Result;
; 309  : 
; 310  :     Result = InternalMidiMessage(dwMessage);

  00008	eb000000	 bl          |?InternalMidiMessage@CMidiStream@@QAAJI@Z|

; 311  : 
; 312  :     // If we're running, and the notelist has notes to render, make sure DMA is enabled
; 313  :     if ( (m_bRunning) && (m_NoteList.Flink != &m_NoteList) )

  0000c	e5943010	 ldr         r3, [r4, #0x10]
  00010	e1a05000	 mov         r5, r0
  00014	e3530000	 cmp         r3, #0
  00018	159425e8	 ldrne       r2, [r4, #0x5E8]
  0001c	12843c05	 addne       r3, r4, #5, 24
  00020	128330e8	 addne       r3, r3, #0xE8
  00024	11520003	 cmpne       r2, r3

; 314  :     {
; 315  :         m_pDeviceContext->StreamReadyToRender(this);

  00028	15940050	 ldrne       r0, [r4, #0x50]
  0002c	11a01004	 movne       r1, r4
  00030	15903000	 ldrne       r3, [r0]
  00034	1593300c	 ldrne       r3, [r3, #0xC]
  00038	11a0e00f	 movne       lr, pc
  0003c	112fff13	 bxne        r3

; 316  :     }
; 317  : 
; 318  :     return (Result==S_OK) ? MMSYSERR_NOERROR : MMSYSERR_ERROR;

  00040	e3550000	 cmp         r5, #0
  00044	03a00000	 moveq       r0, #0

; 319  : }

  00048	08bd4030	 ldmeqia     sp!, {r4, r5, lr}

; 316  :     }
; 317  : 
; 318  :     return (Result==S_OK) ? MMSYSERR_NOERROR : MMSYSERR_ERROR;

  0004c	13a00001	 movne       r0, #1

; 319  : }

  00050	18bd4030	 ldmneia     sp!, {r4, r5, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M37927|

			 ENDP  ; |?MidiMessage@CMidiStream@@QAAKI@Z|, CMidiStream::MidiMessage

	END
