; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\output.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?Open@OutputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; OutputStreamContext::Open
	IMPORT	|?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open

  00000			 AREA	 |.pdata|, PDATA
|$T37535| DCD	|$LN6@Open|
	DCD	0x40001c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\output.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@OutputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; OutputStreamContext::Open

; 30   : {

  00000		 |$LN6@Open|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M37532|

; 31   :     HRESULT Result;
; 32   : 
; 33   :     Result = WaveStreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  00010	e59d3020	 ldr         r3, [sp, #0x20]
  00014	e59d201c	 ldr         r2, [sp, #0x1C]
  00018	e59d1018	 ldr         r1, [sp, #0x18]
  0001c	e59d0014	 ldr         r0, [sp, #0x14]
  00020	eb000000	 bl          |?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  00024	e58d0008	 str         r0, [sp, #8]
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e58d3000	 str         r3, [sp]

; 34   : 
; 35   :     if (Result==MMSYSERR_NOERROR)

  00030	e59d3000	 ldr         r3, [sp]
  00034	e3530000	 cmp         r3, #0
  00038	1a000006	 bne         |$LN1@Open|

; 36   :     {
; 37   :         // Note: Output streams should be initialized in the run state.
; 38   :         Run();

  0003c	e59d3014	 ldr         r3, [sp, #0x14]
  00040	e5933000	 ldr         r3, [r3]
  00044	e2833010	 add         r3, r3, #0x10
  00048	e59d0014	 ldr         r0, [sp, #0x14]
  0004c	e5933000	 ldr         r3, [r3]
  00050	e1a0e00f	 mov         lr, pc
  00054	e12fff13	 bx          r3
  00058		 |$LN1@Open|

; 39   :     }
; 40   : 
; 41   :     return Result;

  00058	e59d3000	 ldr         r3, [sp]
  0005c	e58d3004	 str         r3, [sp, #4]

; 42   : }

  00060	e59d0004	 ldr         r0, [sp, #4]
  00064	e28dd00c	 add         sp, sp, #0xC
  00068	e89d6000	 ldmia       sp, {sp, lr}
  0006c	e12fff1e	 bx          lr
  00070		 |$M37533|

			 ENDP  ; |?Open@OutputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, OutputStreamContext::Open

	EXPORT	|?Reset@OutputStreamContext@@UAAKXZ|	; OutputStreamContext::Reset
	IMPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00008			 AREA	 |.pdata|, PDATA
|$T37541| DCD	|$LN6@Reset|
	DCD	0x40001904
; Function compile flags: /Odtp

  00070			 AREA	 |.text|, CODE, ARM

  00070		 |?Reset@OutputStreamContext@@UAAKXZ| PROC ; OutputStreamContext::Reset

; 53   : {

  00070		 |$LN6@Reset|
  00070	e1a0c00d	 mov         r12, sp
  00074	e92d0001	 stmdb       sp!, {r0}
  00078	e92d5000	 stmdb       sp!, {r12, lr}
  0007c	e24dd00c	 sub         sp, sp, #0xC
  00080		 |$M37538|

; 54   :     HRESULT Result;
; 55   : 
; 56   :     Result = WaveStreamContext::Reset();

  00080	e59d0014	 ldr         r0, [sp, #0x14]
  00084	eb000000	 bl          |?Reset@StreamContext@@UAAKXZ|
  00088	e58d0008	 str         r0, [sp, #8]
  0008c	e59d3008	 ldr         r3, [sp, #8]
  00090	e58d3000	 str         r3, [sp]

; 57   : 
; 58   :     if (Result==MMSYSERR_NOERROR)

  00094	e59d3000	 ldr         r3, [sp]
  00098	e3530000	 cmp         r3, #0
  0009c	1a000006	 bne         |$LN1@Reset|

; 59   :     {
; 60   :         // Note: Output streams should be reset to the run state.
; 61   :         Run();

  000a0	e59d3014	 ldr         r3, [sp, #0x14]
  000a4	e5933000	 ldr         r3, [r3]
  000a8	e2833010	 add         r3, r3, #0x10
  000ac	e59d0014	 ldr         r0, [sp, #0x14]
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e1a0e00f	 mov         lr, pc
  000b8	e12fff13	 bx          r3
  000bc		 |$LN1@Reset|

; 62   :     }
; 63   : 
; 64   :     return Result;

  000bc	e59d3000	 ldr         r3, [sp]
  000c0	e58d3004	 str         r3, [sp, #4]

; 65   : };

  000c4	e59d0004	 ldr         r0, [sp, #4]
  000c8	e28dd00c	 add         sp, sp, #0xC
  000cc	e89d6000	 ldmia       sp, {sp, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$M37539|

			 ENDP  ; |?Reset@OutputStreamContext@@UAAKXZ|, OutputStreamContext::Reset

	EXPORT	|?SetRate@OutputStreamContext@@UAAKK@Z|	; OutputStreamContext::SetRate

  00010			 AREA	 |.pdata|, PDATA
|$T37547| DCD	|$LN5@SetRate|
	DCD	0x40004804
; Function compile flags: /Odtp

  000d4			 AREA	 |.text|, CODE, ARM

  000d4		 |?SetRate@OutputStreamContext@@UAAKK@Z| PROC ; OutputStreamContext::SetRate

; 79   : {

  000d4		 |$LN5@SetRate|
  000d4	e1a0c00d	 mov         r12, sp
  000d8	e92d0003	 stmdb       sp!, {r0, r1}
  000dc	e92d5000	 stmdb       sp!, {r12, lr}
  000e0	e24dd018	 sub         sp, sp, #0x18
  000e4		 |$M37544|

; 80   :     UINT64 Delta;
; 81   : 
; 82   :     m_dwMultiplier = dwMultiplier;

  000e4	e59d3020	 ldr         r3, [sp, #0x20]
  000e8	e2832074	 add         r2, r3, #0x74
  000ec	e59d3024	 ldr         r3, [sp, #0x24]
  000f0	e5823000	 str         r3, [r2]

; 83   : 
; 84   :     // The following code makes a bunch of assumptions on why we don't overflow a 64-bit value:
; 85   :     // nSamplesPerSec is < 20 bits (e.g. no input data rates greater than ~1 MHz!)
; 86   :     // m_dwMultiplier is < 24 bits (e.g. no speedup beyond 256x)
; 87   :     // INVSAMPLERATE is < 20 bits (e.g. no playback rates less than 4kHz)
; 88   : 
; 89   :     Delta = (m_WaveFormat.nSamplesPerSec * m_dwMultiplier);

  000f4	e59d3020	 ldr         r3, [sp, #0x20]
  000f8	e2830028	 add         r0, r3, #0x28
  000fc	e59d3020	 ldr         r3, [sp, #0x20]
  00100	e2831074	 add         r1, r3, #0x74
  00104	e5d03003	 ldrb        r3, [r0, #3]
  00108	e1a02403	 mov         r2, r3, lsl #8
  0010c	e5d03002	 ldrb        r3, [r0, #2]
  00110	e1833002	 orr         r3, r3, r2
  00114	e1a02403	 mov         r2, r3, lsl #8
  00118	e5d03001	 ldrb        r3, [r0, #1]
  0011c	e1833002	 orr         r3, r3, r2
  00120	e1a02403	 mov         r2, r3, lsl #8
  00124	e5d03000	 ldrb        r3, [r0]
  00128	e1832002	 orr         r2, r3, r2
  0012c	e5913000	 ldr         r3, [r1]
  00130	e0030392	 mul         r3, r2, r3
  00134	e58d3000	 str         r3, [sp]
  00138	e3a03000	 mov         r3, #0
  0013c	e58d3004	 str         r3, [sp, #4]

; 90   :     Delta = (Delta * INVSAMPLERATE);    // < Note: These two lines are out of order to preserve accuracy

  00140	e59d3000	 ldr         r3, [sp]
  00144	e59d2004	 ldr         r2, [sp, #4]
  00148	e58d300c	 str         r3, [sp, #0xC]
  0014c	e3a03b5f	 mov         r3, #0x5F, 22
  00150	e3833070	 orr         r3, r3, #0x70
  00154	e0000392	 mul         r0, r2, r3
  00158	e59d100c	 ldr         r1, [sp, #0xC]
  0015c	e3a03b5f	 mov         r3, #0x5F, 22
  00160	e3833070	 orr         r3, r3, #0x70
  00164	e0832391	 umull       r2, r3, r1, r3
  00168	e0803003	 add         r3, r0, r3
  0016c	e58d2000	 str         r2, [sp]
  00170	e58d3004	 str         r3, [sp, #4]

; 91   :     Delta >>= 16;                       // <

  00174	e59d2000	 ldr         r2, [sp]
  00178	e59d3004	 ldr         r3, [sp, #4]
  0017c	e58d3010	 str         r3, [sp, #0x10]
  00180	e1a02822	 mov         r2, r2, lsr #16
  00184	e59d3010	 ldr         r3, [sp, #0x10]
  00188	e1a03803	 mov         r3, r3, lsl #16
  0018c	e1832002	 orr         r2, r3, r2
  00190	e59d3010	 ldr         r3, [sp, #0x10]
  00194	e1a03823	 mov         r3, r3, lsr #16
  00198	e58d2000	 str         r2, [sp]
  0019c	e58d3004	 str         r3, [sp, #4]

; 92   :     Delta >>= DELTAINT;  // Convert to x.x format (e.g. 17.15)

  001a0	e59d2000	 ldr         r2, [sp]
  001a4	e59d3004	 ldr         r3, [sp, #4]
  001a8	e58d3014	 str         r3, [sp, #0x14]
  001ac	e1a028a2	 mov         r2, r2, lsr #17
  001b0	e59d3014	 ldr         r3, [sp, #0x14]
  001b4	e1a03783	 mov         r3, r3, lsl #15
  001b8	e1832002	 orr         r2, r3, r2
  001bc	e59d3014	 ldr         r3, [sp, #0x14]
  001c0	e1a038a3	 mov         r3, r3, lsr #17
  001c4	e58d2000	 str         r2, [sp]
  001c8	e58d3004	 str         r3, [sp, #4]

; 93   : 
; 94   :     m_DeltaT = (DWORD)Delta;

  001cc	e59d2000	 ldr         r2, [sp]
  001d0	e59d3020	 ldr         r3, [sp, #0x20]
  001d4	e2833070	 add         r3, r3, #0x70
  001d8	e5832000	 str         r2, [r3]

; 95   :     return MMSYSERR_NOERROR;

  001dc	e3a03000	 mov         r3, #0
  001e0	e58d3008	 str         r3, [sp, #8]

; 96   : }

  001e4	e59d0008	 ldr         r0, [sp, #8]
  001e8	e28dd018	 add         sp, sp, #0x18
  001ec	e89d6000	 ldmia       sp, {sp, lr}
  001f0	e12fff1e	 bx          lr
  001f4		 |$M37545|

			 ENDP  ; |?SetRate@OutputStreamContext@@UAAKK@Z|, OutputStreamContext::SetRate

	EXPORT	|??_C@_1JO@CAGLKEJM@?$AAW?$AAa?$AAv?$AAe?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAX?$AAC?$AAE?$AAP@| [ DATA ] ; `string'
	EXPORT	|?Render@WaveStreamContext@@UAAPAEPAE00@Z| ; WaveStreamContext::Render
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|__C_specific_handler|

  00018			 AREA	 |.pdata|, PDATA
|$T37566| DCD	|$LN24@Render|
	DCD	0xc0005305
|$T37568| DCD	|$LN14@Render|
	DCD	0x40000501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@CAGLKEJM@?$AAW?$AAa?$AAv?$AAe?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAX?$AAC?$AAE?$AAP@| DCB "W"
	DCB	0x0, "a", 0x0, "v", 0x0, "e", 0x0, "S", 0x0, "t", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "m", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, ":", 0x0, ":"
	DCB	0x0, "R", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "X", 0x0, "C", 0x0, "E"
	DCB	0x0, "P", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, " "
	DCB	0x0, "I", 0x0, "N", 0x0, " ", 0x0, "I", 0x0, "S", 0x0, "T"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "m", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "b", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, "!"
	DCB	0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.xdata|, DATA
|$T37564| DCD	0x1
	DCD	|$LN18@Render|
	DCD	|$LN19@Render|
	DCD	|$LN14@Render|
	DCD	|$LN15@Render|
; Function compile flags: /Odtp

  001f4			 AREA	 |.text|, CODE, ARM

  001f4	00000000	 DCD         |__C_specific_handler|
  001f8	00000000	 DCD         |$T37564|

  001fc		 |?Render@WaveStreamContext@@UAAPAEPAE00@Z| PROC ; WaveStreamContext::Render

; 110  : {

  001fc		 |$LN24@Render|
  001fc	e1a0c00d	 mov         r12, sp
  00200	e92d000f	 stmdb       sp!, {r0 - r3}
  00204	e92d5810	 stmdb       sp!, {r4, r11, r12, lr}
  00208	e28db010	 add         r11, sp, #0x10
  0020c	e24dd010	 sub         sp, sp, #0x10
  00210		 |$LN22@Render|

; 111  :     if (!m_bRunning || !m_lpCurrData)

  00210	e59b3000	 ldr         r3, [r11]
  00214	e2833010	 add         r3, r3, #0x10
  00218	e5933000	 ldr         r3, [r3]
  0021c	e3530000	 cmp         r3, #0
  00220	0a000004	 beq         |$LN7@Render|
  00224	e59b3000	 ldr         r3, [r11]
  00228	e2833044	 add         r3, r3, #0x44
  0022c	e5933000	 ldr         r3, [r3]
  00230	e3530000	 cmp         r3, #0
  00234	1a000002	 bne         |$LN8@Render|
  00238		 |$LN7@Render|

; 112  :     {
; 113  :         return pBuffer;

  00238	e59b3004	 ldr         r3, [r11, #4]
  0023c	e50b3020	 str         r3, [r11, #-0x20]
  00240	ea00003c	 b           |$LN9@Render|
  00244		 |$LN8@Render|
  00244		 |$LN6@Render|

; 114  :     }
; 115  : 
; 116  :     while (pBuffer < pBufferEnd)

  00244	e59b2004	 ldr         r2, [r11, #4]
  00248	e59b3008	 ldr         r3, [r11, #8]
  0024c	e1520003	 cmp         r2, r3
  00250	2a000036	 bcs         |$LN5@Render|
  00254		 |$LN4@Render|

; 117  :     {
; 118  :         while (m_lpCurrData>=m_lpCurrDataEnd)

  00254	e59b3000	 ldr         r3, [r11]
  00258	e2832044	 add         r2, r3, #0x44
  0025c	e59b3000	 ldr         r3, [r11]
  00260	e2833048	 add         r3, r3, #0x48
  00264	e5922000	 ldr         r2, [r2]
  00268	e5933000	 ldr         r3, [r3]
  0026c	e1520003	 cmp         r2, r3
  00270	3a000009	 bcc         |$LN3@Render|

; 119  :         {
; 120  :             if (!GetNextBuffer())

  00274	e59b0000	 ldr         r0, [r11]
  00278	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  0027c	e50b001c	 str         r0, [r11, #-0x1C]
  00280	e51b301c	 ldr         r3, [r11, #-0x1C]
  00284	e3530000	 cmp         r3, #0
  00288	1a000002	 bne         |$LN2@Render|

; 121  :             {
; 122  :                 return pBuffer;

  0028c	e59b3004	 ldr         r3, [r11, #4]
  00290	e50b3020	 str         r3, [r11, #-0x20]
  00294	ea000027	 b           |$LN9@Render|
  00298		 |$LN2@Render|

; 123  :             }
; 124  :         }

  00298	eaffffed	 b           |$LN4@Render|
  0029c		 |$LN3@Render|
  0029c		 |$LN18@Render|

; 125  : 
; 126  :         _try
; 127  :         {
; 128  :             pBuffer = Render2(pBuffer,pBufferEnd,pBufferLast);

  0029c	e59b300c	 ldr         r3, [r11, #0xC]
  002a0	e59b2008	 ldr         r2, [r11, #8]
  002a4	e59b1004	 ldr         r1, [r11, #4]
  002a8	e59b0000	 ldr         r0, [r11]
  002ac	e5900000	 ldr         r0, [r0]
  002b0	e280e038	 add         lr, r0, #0x38
  002b4	e59b0000	 ldr         r0, [r11]
  002b8	e59e4000	 ldr         r4, [lr]
  002bc	e1a0e00f	 mov         lr, pc
  002c0	e12fff14	 bx          r4
  002c4	e50b0018	 str         r0, [r11, #-0x18]
  002c8	e51b3018	 ldr         r3, [r11, #-0x18]
  002cc	e58b3004	 str         r3, [r11, #4]
  002d0		 |$LN19@Render|

; 129  :         }

  002d0	ea000015	 b           |$LN20@Render|
  002d4		 |$LN15@Render|

; 131  :         {
; 132  :             DEBUGMSG(ZONE_ERROR, (L"WaveStreamContext::Render: "
; 133  :                 L"EXCEPTION IN IST for stream 0x%x, buffer 0x%x!!!!\r\n", this, m_lpCurrData
; 134  :             ));

  002d4	e59f307c	 ldr         r3, [pc, #0x7C]
  002d8	e5933440	 ldr         r3, [r3, #0x440]
  002dc	e3130902	 tst         r3, #2, 18
  002e0	0a000008	 beq         |$LN11@Render|
  002e4	e59b3000	 ldr         r3, [r11]
  002e8	e2833044	 add         r3, r3, #0x44
  002ec	e5932000	 ldr         r2, [r3]
  002f0	e59b1000	 ldr         r1, [r11]
  002f4	e59f0058	 ldr         r0, [pc, #0x58]
  002f8	eb000000	 bl          NKDbgPrintfW
  002fc	e3a03001	 mov         r3, #1
  00300	e50b3014	 str         r3, [r11, #-0x14]
  00304	ea000001	 b           |$LN12@Render|
  00308		 |$LN11@Render|
  00308	e3a03000	 mov         r3, #0
  0030c	e50b3014	 str         r3, [r11, #-0x14]
  00310		 |$LN12@Render|

; 135  :             m_lpCurrData=m_lpCurrDataEnd; // Pretend we finished reading the application buffer

  00310	e59b3000	 ldr         r3, [r11]
  00314	e2831048	 add         r1, r3, #0x48
  00318	e59b3000	 ldr         r3, [r11]
  0031c	e2832044	 add         r2, r3, #0x44
  00320	e5913000	 ldr         r3, [r1]
  00324	e5823000	 str         r3, [r2]
  00328	eaffffff	 b           |$LN20@Render|
  0032c		 |$LN20@Render|

; 136  :         }
; 137  :     }

  0032c	eaffffc4	 b           |$LN6@Render|
  00330		 |$LN5@Render|

; 138  : 
; 139  :     return pBuffer;

  00330	e59b3004	 ldr         r3, [r11, #4]
  00334	e50b3020	 str         r3, [r11, #-0x20]
  00338		 |$LN9@Render|
  00338		 |$LN13@Render|

; 140  : }

  00338	e51b0020	 ldr         r0, [r11, #-0x20]
  0033c	e24bd010	 sub         sp, r11, #0x10
  00340	e89d6810	 ldmia       sp, {r4, r11, sp, lr}
  00344	e12fff1e	 bx          lr

			 ENDP  ; |?Render@WaveStreamContext@@UAAPAEPAE00@Z|, WaveStreamContext::Render

  00348		 |$LN14@Render|
  00348		 |$LN23@Render|

; 130  :         _except (EXCEPTION_EXECUTE_HANDLER)

  00348	e52de004	 str         lr, [sp, #-4]!
  0034c		 |$LN17@Render|
  0034c		 |$LN26@Render|
  0034c	e3a00001	 mov         r0, #1
  00350		 |$LN16@Render|
  00350	e49df004	 ldr         pc, [sp], #4
  00354		 |$LN28@Render|
  00354		 |$LN29@Render|
  00354	00000000	 DCD         |??_C@_1JO@CAGLKEJM@?$AAW?$AAa?$AAv?$AAe?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAC?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAX?$AAC?$AAE?$AAP@|
  00358		 |$LN30@Render|
  00358	00000000	 DCD         |dpCurSettings|
  0035c		 |$LN27@Render|
  0035c		 |$LN25@Render|
	EXPORT	|?Render2@OutputStreamContextM8@@UAAPAEPAE00@Z| ; OutputStreamContextM8::Render2

  00028			 AREA	 |.pdata|, PDATA
|$T37579| DCD	|$LN18@Render2|
	DCD	0x4000b104
; Function compile flags: /Odtp

  0035c			 AREA	 |.text|, CODE, ARM

  0035c		 |?Render2@OutputStreamContextM8@@UAAPAEPAE00@Z| PROC ; OutputStreamContextM8::Render2

; 152  : {

  0035c		 |$LN18@Render2|
  0035c	e1a0c00d	 mov         r12, sp
  00360	e92d000f	 stmdb       sp!, {r0 - r3}
  00364	e92d5000	 stmdb       sp!, {r12, lr}
  00368	e24dd02c	 sub         sp, sp, #0x2C
  0036c		 |$M37576|

; 153  :     LONG CurrT = m_CurrT;

  0036c	e59d3034	 ldr         r3, [sp, #0x34]
  00370	e2833088	 add         r3, r3, #0x88
  00374	e5933000	 ldr         r3, [r3]
  00378	e58d3008	 str         r3, [sp, #8]

; 154  :     LONG DeltaT = m_DeltaT;

  0037c	e59d3034	 ldr         r3, [sp, #0x34]
  00380	e2833070	 add         r3, r3, #0x70
  00384	e5933000	 ldr         r3, [r3]
  00388	e58d3004	 str         r3, [sp, #4]

; 155  :     LONG CurrSamp0 = m_CurrSamp[0];

  0038c	e59d3034	 ldr         r3, [sp, #0x34]
  00390	e2833080	 add         r3, r3, #0x80
  00394	e5933000	 ldr         r3, [r3]
  00398	e58d3000	 str         r3, [sp]

; 156  :     LONG PrevSamp0 = m_PrevSamp[0];

  0039c	e59d3034	 ldr         r3, [sp, #0x34]
  003a0	e2833078	 add         r3, r3, #0x78
  003a4	e5933000	 ldr         r3, [r3]
  003a8	e58d3014	 str         r3, [sp, #0x14]

; 157  :     PBYTE pCurrData = m_lpCurrData;

  003ac	e59d3034	 ldr         r3, [sp, #0x34]
  003b0	e2833044	 add         r3, r3, #0x44
  003b4	e5933000	 ldr         r3, [r3]
  003b8	e58d300c	 str         r3, [sp, #0xC]

; 158  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  003bc	e59d3034	 ldr         r3, [sp, #0x34]
  003c0	e2833048	 add         r3, r3, #0x48
  003c4	e5933000	 ldr         r3, [r3]
  003c8	e58d3010	 str         r3, [sp, #0x10]

; 159  :     LONG fxpGain = m_fxpGain;

  003cc	e59d3034	 ldr         r3, [sp, #0x34]
  003d0	e2833060	 add         r3, r3, #0x60
  003d4	e5933000	 ldr         r3, [r3]
  003d8	e58d3018	 str         r3, [sp, #0x18]
  003dc		 |$LN13@Render2|

; 160  : 
; 161  :     while (pBuffer < pBufferEnd)

  003dc	e59d2038	 ldr         r2, [sp, #0x38]
  003e0	e59d303c	 ldr         r3, [sp, #0x3C]
  003e4	e1520003	 cmp         r2, r3
  003e8	2a00006a	 bcs         |$LN12@Render2|
  003ec		 |$LN11@Render2|

; 162  :     {
; 163  :         while (CurrT >= DELTA_OVERFLOW)

  003ec	e59d3008	 ldr         r3, [sp, #8]
  003f0	e3530902	 cmp         r3, #2, 18
  003f4	ba000017	 blt         |$LN10@Render2|

; 164  :         {
; 165  :             if (pCurrData>=pCurrDataEnd)

  003f8	e59d200c	 ldr         r2, [sp, #0xC]
  003fc	e59d3010	 ldr         r3, [sp, #0x10]
  00400	e1520003	 cmp         r2, r3
  00404	3a000001	 bcc         |$LN9@Render2|
  00408	ea000062	 b           |$LN8@Render2|

; 166  :             {
; 167  :                 goto Exit;

  0040c	ea000061	 b           |$Exit$37309|
  00410		 |$LN9@Render2|

; 168  :             }
; 169  : 
; 170  :             CurrT -= DELTA_OVERFLOW;

  00410	e59d3008	 ldr         r3, [sp, #8]
  00414	e2433902	 sub         r3, r3, #2, 18
  00418	e58d3008	 str         r3, [sp, #8]

; 171  : 
; 172  :             PrevSamp0 = CurrSamp0;

  0041c	e59d3000	 ldr         r3, [sp]
  00420	e58d3014	 str         r3, [sp, #0x14]

; 173  : 
; 174  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  00424	e59d300c	 ldr         r3, [sp, #0xC]
  00428	e58d3024	 str         r3, [sp, #0x24]

; 175  :             CurrSamp0 = (LONG)pSampleSrc->m8.sample;

  0042c	e59d3024	 ldr         r3, [sp, #0x24]
  00430	e5d33000	 ldrb        r3, [r3]
  00434	e58d3000	 str         r3, [sp]

; 176  :             CurrSamp0 = (CurrSamp0 - 128) << 8;

  00438	e59d3000	 ldr         r3, [sp]
  0043c	e2433080	 sub         r3, r3, #0x80
  00440	e1a03403	 mov         r3, r3, lsl #8
  00444	e58d3000	 str         r3, [sp]

; 177  :             pCurrData+=1;

  00448	e59d300c	 ldr         r3, [sp, #0xC]
  0044c	e2833001	 add         r3, r3, #1
  00450	e58d300c	 str         r3, [sp, #0xC]

; 178  :         }

  00454	eaffffe4	 b           |$LN11@Render2|
  00458		 |$LN10@Render2|

; 179  : 
; 180  :         LONG OutSamp0;
; 181  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00458	e59d2000	 ldr         r2, [sp]
  0045c	e59d3014	 ldr         r3, [sp, #0x14]
  00460	e0422003	 sub         r2, r2, r3
  00464	e59d3008	 ldr         r3, [sp, #8]
  00468	e0030392	 mul         r3, r2, r3
  0046c	e1a027c3	 mov         r2, r3, asr #15
  00470	e59d3014	 ldr         r3, [sp, #0x14]
  00474	e0833002	 add         r3, r3, r2
  00478	e58d301c	 str         r3, [sp, #0x1C]

; 182  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;

  0047c	e59d201c	 ldr         r2, [sp, #0x1C]
  00480	e59d3018	 ldr         r3, [sp, #0x18]
  00484	e0030392	 mul         r3, r2, r3
  00488	e1a03843	 mov         r3, r3, asr #16
  0048c	e58d301c	 str         r3, [sp, #0x1C]

; 183  :         CurrT += DeltaT;

  00490	e59d2008	 ldr         r2, [sp, #8]
  00494	e59d3004	 ldr         r3, [sp, #4]
  00498	e0823003	 add         r3, r2, r3
  0049c	e58d3008	 str         r3, [sp, #8]

; 184  : 
; 185  : #if (OUTCHANNELS==2)
; 186  :         LONG OutSamp1;
; 187  :         OutSamp1=OutSamp0;

  004a0	e59d301c	 ldr         r3, [sp, #0x1C]
  004a4	e58d3020	 str         r3, [sp, #0x20]

; 188  :         if (pBuffer < pBufferLast)

  004a8	e59d2038	 ldr         r2, [sp, #0x38]
  004ac	e59d3040	 ldr         r3, [sp, #0x40]
  004b0	e1520003	 cmp         r2, r3
  004b4	2a000028	 bcs         |$LN7@Render2|

; 189  :         {
; 190  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  004b8	e59d3038	 ldr         r3, [sp, #0x38]
  004bc	e1d320f0	 ldrsh       r2, [r3]
  004c0	e59d301c	 ldr         r3, [sp, #0x1C]
  004c4	e0833002	 add         r3, r3, r2
  004c8	e58d301c	 str         r3, [sp, #0x1C]

; 191  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  004cc	e59d3038	 ldr         r3, [sp, #0x38]
  004d0	e2833002	 add         r3, r3, #2
  004d4	e1d320f0	 ldrsh       r2, [r3]
  004d8	e59d3020	 ldr         r3, [sp, #0x20]
  004dc	e0833002	 add         r3, r3, r2
  004e0	e58d3020	 str         r3, [sp, #0x20]

; 192  : #if USE_MIX_SATURATE
; 193  :             // Handle saturation
; 194  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  004e4	e59d201c	 ldr         r2, [sp, #0x1C]
  004e8	e3a03c7f	 mov         r3, #0x7F, 24
  004ec	e38330ff	 orr         r3, r3, #0xFF
  004f0	e1520003	 cmp         r2, r3
  004f4	da000003	 ble         |$LN6@Render2|

; 195  :             {
; 196  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  004f8	e3a03c7f	 mov         r3, #0x7F, 24
  004fc	e38330ff	 orr         r3, r3, #0xFF
  00500	e58d301c	 str         r3, [sp, #0x1C]
  00504	ea000005	 b           |$LN5@Render2|
  00508		 |$LN6@Render2|

; 197  :             }
; 198  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00508	e59d301c	 ldr         r3, [sp, #0x1C]
  0050c	e3730902	 cmn         r3, #2, 18
  00510	aa000002	 bge         |$LN4@Render2|

; 199  :             {
; 200  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00514	e3e030ff	 mvn         r3, #0xFF
  00518	e1a03383	 mov         r3, r3, lsl #7
  0051c	e58d301c	 str         r3, [sp, #0x1C]
  00520		 |$LN4@Render2|
  00520		 |$LN5@Render2|

; 201  :             }
; 202  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  00520	e59d2020	 ldr         r2, [sp, #0x20]
  00524	e3a03c7f	 mov         r3, #0x7F, 24
  00528	e38330ff	 orr         r3, r3, #0xFF
  0052c	e1520003	 cmp         r2, r3
  00530	da000003	 ble         |$LN3@Render2|

; 203  :             {
; 204  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  00534	e3a03c7f	 mov         r3, #0x7F, 24
  00538	e38330ff	 orr         r3, r3, #0xFF
  0053c	e58d3020	 str         r3, [sp, #0x20]
  00540	ea000005	 b           |$LN2@Render2|
  00544		 |$LN3@Render2|

; 205  :             }
; 206  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00544	e59d3020	 ldr         r3, [sp, #0x20]
  00548	e3730902	 cmn         r3, #2, 18
  0054c	aa000002	 bge         |$LN1@Render2|

; 207  :             {
; 208  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00550	e3e030ff	 mvn         r3, #0xFF
  00554	e1a03383	 mov         r3, r3, lsl #7
  00558	e58d3020	 str         r3, [sp, #0x20]
  0055c		 |$LN1@Render2|
  0055c		 |$LN2@Render2|
  0055c		 |$LN7@Render2|

; 209  :             }
; 210  : #endif
; 211  :         }
; 212  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  0055c	e59d301c	 ldr         r3, [sp, #0x1C]
  00560	e1a02803	 mov         r2, r3, lsl #16
  00564	e1a02842	 mov         r2, r2, asr #16
  00568	e59d3038	 ldr         r3, [sp, #0x38]
  0056c	e1c320b0	 strh        r2, [r3]

; 213  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  00570	e59d3020	 ldr         r3, [sp, #0x20]
  00574	e1a02803	 mov         r2, r3, lsl #16
  00578	e1a02842	 mov         r2, r2, asr #16
  0057c	e59d3038	 ldr         r3, [sp, #0x38]
  00580	e2833002	 add         r3, r3, #2
  00584	e1c320b0	 strh        r2, [r3]

; 214  :         pBuffer += 2*sizeof(HWSAMPLE);

  00588	e59d3038	 ldr         r3, [sp, #0x38]
  0058c	e2833004	 add         r3, r3, #4
  00590	e58d3038	 str         r3, [sp, #0x38]

; 215  : #else
; 216  :         if (pBuffer < pBufferLast)
; 217  :         {
; 218  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];
; 219  : #if USE_MIX_SATURATE
; 220  :             // Handle saturation
; 221  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 222  :             {
; 223  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 224  :             }
; 225  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 226  :             {
; 227  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 228  :             }
; 229  : #endif
; 230  :         }
; 231  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 232  :         pBuffer += sizeof(HWSAMPLE);
; 233  : #endif
; 234  :     }

  00594	eaffff90	 b           |$LN13@Render2|
  00598		 |$LN12@Render2|
  00598		 |$LN8@Render2|
  00598		 |$Exit$37309|

; 235  : 
; 236  :     Exit:
; 237  : 
; 238  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00598	e59d3034	 ldr         r3, [sp, #0x34]
  0059c	e283104c	 add         r1, r3, #0x4C
  005a0	e59d3034	 ldr         r3, [sp, #0x34]
  005a4	e2833044	 add         r3, r3, #0x44
  005a8	e59d200c	 ldr         r2, [sp, #0xC]
  005ac	e5933000	 ldr         r3, [r3]
  005b0	e0422003	 sub         r2, r2, r3
  005b4	e5913000	 ldr         r3, [r1]
  005b8	e0832002	 add         r2, r3, r2
  005bc	e59d3034	 ldr         r3, [sp, #0x34]
  005c0	e283304c	 add         r3, r3, #0x4C
  005c4	e5832000	 str         r2, [r3]

; 239  :     m_lpCurrData = pCurrData;

  005c8	e59d3034	 ldr         r3, [sp, #0x34]
  005cc	e2832044	 add         r2, r3, #0x44
  005d0	e59d300c	 ldr         r3, [sp, #0xC]
  005d4	e5823000	 str         r3, [r2]

; 240  :     m_CurrT = CurrT;

  005d8	e59d3034	 ldr         r3, [sp, #0x34]
  005dc	e2832088	 add         r2, r3, #0x88
  005e0	e59d3008	 ldr         r3, [sp, #8]
  005e4	e5823000	 str         r3, [r2]

; 241  :     m_PrevSamp[0] = PrevSamp0;

  005e8	e59d3034	 ldr         r3, [sp, #0x34]
  005ec	e2832078	 add         r2, r3, #0x78
  005f0	e59d3014	 ldr         r3, [sp, #0x14]
  005f4	e5823000	 str         r3, [r2]

; 242  :     m_CurrSamp[0] = CurrSamp0;

  005f8	e59d3034	 ldr         r3, [sp, #0x34]
  005fc	e2832080	 add         r2, r3, #0x80
  00600	e59d3000	 ldr         r3, [sp]
  00604	e5823000	 str         r3, [r2]

; 243  :     return pBuffer;

  00608	e59d3038	 ldr         r3, [sp, #0x38]
  0060c	e58d3028	 str         r3, [sp, #0x28]

; 244  : }

  00610	e59d0028	 ldr         r0, [sp, #0x28]
  00614	e28dd02c	 add         sp, sp, #0x2C
  00618	e89d6000	 ldmia       sp, {sp, lr}
  0061c	e12fff1e	 bx          lr
  00620		 |$M37577|

			 ENDP  ; |?Render2@OutputStreamContextM8@@UAAPAEPAE00@Z|, OutputStreamContextM8::Render2

	EXPORT	|?Render2@OutputStreamContextM16@@UAAPAEPAE00@Z| ; OutputStreamContextM16::Render2

  00030			 AREA	 |.pdata|, PDATA
|$T37585| DCD	|$LN18@Render2@2|
	DCD	0x4000ad04
; Function compile flags: /Odtp

  00620			 AREA	 |.text|, CODE, ARM

  00620		 |?Render2@OutputStreamContextM16@@UAAPAEPAE00@Z| PROC ; OutputStreamContextM16::Render2

; 256  : {

  00620		 |$LN18@Render2@2|
  00620	e1a0c00d	 mov         r12, sp
  00624	e92d000f	 stmdb       sp!, {r0 - r3}
  00628	e92d5000	 stmdb       sp!, {r12, lr}
  0062c	e24dd02c	 sub         sp, sp, #0x2C
  00630		 |$M37582|

; 257  :     LONG CurrT = m_CurrT;

  00630	e59d3034	 ldr         r3, [sp, #0x34]
  00634	e2833088	 add         r3, r3, #0x88
  00638	e5933000	 ldr         r3, [r3]
  0063c	e58d300c	 str         r3, [sp, #0xC]

; 258  :     LONG DeltaT = m_DeltaT;

  00640	e59d3034	 ldr         r3, [sp, #0x34]
  00644	e2833070	 add         r3, r3, #0x70
  00648	e5933000	 ldr         r3, [r3]
  0064c	e58d3008	 str         r3, [sp, #8]

; 259  :     LONG CurrSamp0 = m_CurrSamp[0];

  00650	e59d3034	 ldr         r3, [sp, #0x34]
  00654	e2833080	 add         r3, r3, #0x80
  00658	e5933000	 ldr         r3, [r3]
  0065c	e58d3004	 str         r3, [sp, #4]

; 260  :     LONG PrevSamp0 = m_PrevSamp[0];

  00660	e59d3034	 ldr         r3, [sp, #0x34]
  00664	e2833078	 add         r3, r3, #0x78
  00668	e5933000	 ldr         r3, [r3]
  0066c	e58d3018	 str         r3, [sp, #0x18]

; 261  :     PBYTE pCurrData = m_lpCurrData;

  00670	e59d3034	 ldr         r3, [sp, #0x34]
  00674	e2833044	 add         r3, r3, #0x44
  00678	e5933000	 ldr         r3, [r3]
  0067c	e58d3010	 str         r3, [sp, #0x10]

; 262  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  00680	e59d3034	 ldr         r3, [sp, #0x34]
  00684	e2833048	 add         r3, r3, #0x48
  00688	e5933000	 ldr         r3, [r3]
  0068c	e58d3014	 str         r3, [sp, #0x14]

; 263  :     LONG fxpGain = m_fxpGain;

  00690	e59d3034	 ldr         r3, [sp, #0x34]
  00694	e2833060	 add         r3, r3, #0x60
  00698	e5933000	 ldr         r3, [r3]
  0069c	e58d301c	 str         r3, [sp, #0x1C]
  006a0		 |$LN13@Render2@2|

; 264  :     LONG OutSamp0;
; 265  : 
; 266  :     while (pBuffer < pBufferEnd)

  006a0	e59d2038	 ldr         r2, [sp, #0x38]
  006a4	e59d303c	 ldr         r3, [sp, #0x3C]
  006a8	e1520003	 cmp         r2, r3
  006ac	2a000066	 bcs         |$LN12@Render2@2|
  006b0		 |$LN11@Render2@2|

; 267  :     {
; 268  :         while (CurrT >= DELTA_OVERFLOW)

  006b0	e59d300c	 ldr         r3, [sp, #0xC]
  006b4	e3530902	 cmp         r3, #2, 18
  006b8	ba000013	 blt         |$LN10@Render2@2|

; 269  :         {
; 270  :             if (pCurrData>=pCurrDataEnd)

  006bc	e59d2010	 ldr         r2, [sp, #0x10]
  006c0	e59d3014	 ldr         r3, [sp, #0x14]
  006c4	e1520003	 cmp         r2, r3
  006c8	3a000001	 bcc         |$LN9@Render2@2|
  006cc	ea00005e	 b           |$LN8@Render2@2|

; 271  :             {
; 272  :                 goto Exit;

  006d0	ea00005d	 b           |$Exit$37359|
  006d4		 |$LN9@Render2@2|

; 273  :             }
; 274  : 
; 275  :             CurrT -= DELTA_OVERFLOW;

  006d4	e59d300c	 ldr         r3, [sp, #0xC]
  006d8	e2433902	 sub         r3, r3, #2, 18
  006dc	e58d300c	 str         r3, [sp, #0xC]

; 276  : 
; 277  :             PrevSamp0 = CurrSamp0;

  006e0	e59d3004	 ldr         r3, [sp, #4]
  006e4	e58d3018	 str         r3, [sp, #0x18]

; 278  : 
; 279  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  006e8	e59d3010	 ldr         r3, [sp, #0x10]
  006ec	e58d3024	 str         r3, [sp, #0x24]

; 280  :             CurrSamp0 = (LONG)pSampleSrc->m16.sample;

  006f0	e59d3024	 ldr         r3, [sp, #0x24]
  006f4	e1d330f0	 ldrsh       r3, [r3]
  006f8	e58d3004	 str         r3, [sp, #4]

; 281  :             pCurrData+=2;

  006fc	e59d3010	 ldr         r3, [sp, #0x10]
  00700	e2833002	 add         r3, r3, #2
  00704	e58d3010	 str         r3, [sp, #0x10]

; 282  :         }

  00708	eaffffe8	 b           |$LN11@Render2@2|
  0070c		 |$LN10@Render2@2|

; 283  : 
; 284  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  0070c	e59d2004	 ldr         r2, [sp, #4]
  00710	e59d3018	 ldr         r3, [sp, #0x18]
  00714	e0422003	 sub         r2, r2, r3
  00718	e59d300c	 ldr         r3, [sp, #0xC]
  0071c	e0030392	 mul         r3, r2, r3
  00720	e1a027c3	 mov         r2, r3, asr #15
  00724	e59d3018	 ldr         r3, [sp, #0x18]
  00728	e0833002	 add         r3, r3, r2
  0072c	e58d3000	 str         r3, [sp]

; 285  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;

  00730	e59d2000	 ldr         r2, [sp]
  00734	e59d301c	 ldr         r3, [sp, #0x1C]
  00738	e0030392	 mul         r3, r2, r3
  0073c	e1a03843	 mov         r3, r3, asr #16
  00740	e58d3000	 str         r3, [sp]

; 286  :         CurrT += DeltaT;

  00744	e59d200c	 ldr         r2, [sp, #0xC]
  00748	e59d3008	 ldr         r3, [sp, #8]
  0074c	e0823003	 add         r3, r2, r3
  00750	e58d300c	 str         r3, [sp, #0xC]

; 287  : 
; 288  : //        DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 289  : 
; 290  : #if (OUTCHANNELS==2)
; 291  :         LONG OutSamp1;
; 292  :         OutSamp1=OutSamp0;

  00754	e59d3000	 ldr         r3, [sp]
  00758	e58d3020	 str         r3, [sp, #0x20]

; 293  :         if (pBuffer < pBufferLast)

  0075c	e59d2038	 ldr         r2, [sp, #0x38]
  00760	e59d3040	 ldr         r3, [sp, #0x40]
  00764	e1520003	 cmp         r2, r3
  00768	2a000028	 bcs         |$LN7@Render2@2|

; 294  :         {
; 295  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  0076c	e59d3038	 ldr         r3, [sp, #0x38]
  00770	e1d320f0	 ldrsh       r2, [r3]
  00774	e59d3000	 ldr         r3, [sp]
  00778	e0833002	 add         r3, r3, r2
  0077c	e58d3000	 str         r3, [sp]

; 296  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  00780	e59d3038	 ldr         r3, [sp, #0x38]
  00784	e2833002	 add         r3, r3, #2
  00788	e1d320f0	 ldrsh       r2, [r3]
  0078c	e59d3020	 ldr         r3, [sp, #0x20]
  00790	e0833002	 add         r3, r3, r2
  00794	e58d3020	 str         r3, [sp, #0x20]

; 297  : #if USE_MIX_SATURATE
; 298  :             // Handle saturation
; 299  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  00798	e59d2000	 ldr         r2, [sp]
  0079c	e3a03c7f	 mov         r3, #0x7F, 24
  007a0	e38330ff	 orr         r3, r3, #0xFF
  007a4	e1520003	 cmp         r2, r3
  007a8	da000003	 ble         |$LN6@Render2@2|

; 300  :             {
; 301  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  007ac	e3a03c7f	 mov         r3, #0x7F, 24
  007b0	e38330ff	 orr         r3, r3, #0xFF
  007b4	e58d3000	 str         r3, [sp]
  007b8	ea000005	 b           |$LN5@Render2@2|
  007bc		 |$LN6@Render2@2|

; 302  :             }
; 303  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  007bc	e59d3000	 ldr         r3, [sp]
  007c0	e3730902	 cmn         r3, #2, 18
  007c4	aa000002	 bge         |$LN4@Render2@2|

; 304  :             {
; 305  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  007c8	e3e030ff	 mvn         r3, #0xFF
  007cc	e1a03383	 mov         r3, r3, lsl #7
  007d0	e58d3000	 str         r3, [sp]
  007d4		 |$LN4@Render2@2|
  007d4		 |$LN5@Render2@2|

; 306  :             }
; 307  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  007d4	e59d2020	 ldr         r2, [sp, #0x20]
  007d8	e3a03c7f	 mov         r3, #0x7F, 24
  007dc	e38330ff	 orr         r3, r3, #0xFF
  007e0	e1520003	 cmp         r2, r3
  007e4	da000003	 ble         |$LN3@Render2@2|

; 308  :             {
; 309  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  007e8	e3a03c7f	 mov         r3, #0x7F, 24
  007ec	e38330ff	 orr         r3, r3, #0xFF
  007f0	e58d3020	 str         r3, [sp, #0x20]
  007f4	ea000005	 b           |$LN2@Render2@2|
  007f8		 |$LN3@Render2@2|

; 310  :             }
; 311  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  007f8	e59d3020	 ldr         r3, [sp, #0x20]
  007fc	e3730902	 cmn         r3, #2, 18
  00800	aa000002	 bge         |$LN1@Render2@2|

; 312  :             {
; 313  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00804	e3e030ff	 mvn         r3, #0xFF
  00808	e1a03383	 mov         r3, r3, lsl #7
  0080c	e58d3020	 str         r3, [sp, #0x20]
  00810		 |$LN1@Render2@2|
  00810		 |$LN2@Render2@2|
  00810		 |$LN7@Render2@2|

; 314  :             }
; 315  : #endif
; 316  :         }
; 317  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  00810	e59d3000	 ldr         r3, [sp]
  00814	e1a02803	 mov         r2, r3, lsl #16
  00818	e1a02842	 mov         r2, r2, asr #16
  0081c	e59d3038	 ldr         r3, [sp, #0x38]
  00820	e1c320b0	 strh        r2, [r3]

; 318  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  00824	e59d3020	 ldr         r3, [sp, #0x20]
  00828	e1a02803	 mov         r2, r3, lsl #16
  0082c	e1a02842	 mov         r2, r2, asr #16
  00830	e59d3038	 ldr         r3, [sp, #0x38]
  00834	e2833002	 add         r3, r3, #2
  00838	e1c320b0	 strh        r2, [r3]

; 319  :         pBuffer += 2*sizeof(HWSAMPLE);

  0083c	e59d3038	 ldr         r3, [sp, #0x38]
  00840	e2833004	 add         r3, r3, #4
  00844	e58d3038	 str         r3, [sp, #0x38]

; 320  : #else
; 321  :         if (pBuffer < pBufferLast)
; 322  :         {
; 323  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];
; 324  : #if USE_MIX_SATURATE
; 325  :             // Handle saturation
; 326  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 327  :             {
; 328  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 329  :             }
; 330  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 331  :             {
; 332  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 333  :             }
; 334  : #endif
; 335  :         }
; 336  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 337  :         pBuffer += sizeof(HWSAMPLE);
; 338  : #endif
; 339  :     }

  00848	eaffff94	 b           |$LN13@Render2@2|
  0084c		 |$LN12@Render2@2|
  0084c		 |$LN8@Render2@2|
  0084c		 |$Exit$37359|

; 340  : 
; 341  :     Exit:
; 342  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  0084c	e59d3034	 ldr         r3, [sp, #0x34]
  00850	e283104c	 add         r1, r3, #0x4C
  00854	e59d3034	 ldr         r3, [sp, #0x34]
  00858	e2833044	 add         r3, r3, #0x44
  0085c	e59d2010	 ldr         r2, [sp, #0x10]
  00860	e5933000	 ldr         r3, [r3]
  00864	e0422003	 sub         r2, r2, r3
  00868	e5913000	 ldr         r3, [r1]
  0086c	e0832002	 add         r2, r3, r2
  00870	e59d3034	 ldr         r3, [sp, #0x34]
  00874	e283304c	 add         r3, r3, #0x4C
  00878	e5832000	 str         r2, [r3]

; 343  :     m_lpCurrData = pCurrData;

  0087c	e59d3034	 ldr         r3, [sp, #0x34]
  00880	e2832044	 add         r2, r3, #0x44
  00884	e59d3010	 ldr         r3, [sp, #0x10]
  00888	e5823000	 str         r3, [r2]

; 344  :     m_CurrT = CurrT;

  0088c	e59d3034	 ldr         r3, [sp, #0x34]
  00890	e2832088	 add         r2, r3, #0x88
  00894	e59d300c	 ldr         r3, [sp, #0xC]
  00898	e5823000	 str         r3, [r2]

; 345  :     m_PrevSamp[0] = PrevSamp0;

  0089c	e59d3034	 ldr         r3, [sp, #0x34]
  008a0	e2832078	 add         r2, r3, #0x78
  008a4	e59d3018	 ldr         r3, [sp, #0x18]
  008a8	e5823000	 str         r3, [r2]

; 346  :     m_CurrSamp[0] = CurrSamp0;

  008ac	e59d3034	 ldr         r3, [sp, #0x34]
  008b0	e2832080	 add         r2, r3, #0x80
  008b4	e59d3004	 ldr         r3, [sp, #4]
  008b8	e5823000	 str         r3, [r2]

; 347  :     return pBuffer;

  008bc	e59d3038	 ldr         r3, [sp, #0x38]
  008c0	e58d3028	 str         r3, [sp, #0x28]

; 348  : }

  008c4	e59d0028	 ldr         r0, [sp, #0x28]
  008c8	e28dd02c	 add         sp, sp, #0x2C
  008cc	e89d6000	 ldmia       sp, {sp, lr}
  008d0	e12fff1e	 bx          lr
  008d4		 |$M37583|

			 ENDP  ; |?Render2@OutputStreamContextM16@@UAAPAEPAE00@Z|, OutputStreamContextM16::Render2

	EXPORT	|?Render2@OutputStreamContextS8@@UAAPAEPAE00@Z| ; OutputStreamContextS8::Render2

  00038			 AREA	 |.pdata|, PDATA
|$T37591| DCD	|$LN18@Render2@3|
	DCD	0x4000d704
; Function compile flags: /Odtp

  008d4			 AREA	 |.text|, CODE, ARM

  008d4		 |?Render2@OutputStreamContextS8@@UAAPAEPAE00@Z| PROC ; OutputStreamContextS8::Render2

; 362  : {

  008d4		 |$LN18@Render2@3|
  008d4	e1a0c00d	 mov         r12, sp
  008d8	e92d000f	 stmdb       sp!, {r0 - r3}
  008dc	e92d5000	 stmdb       sp!, {r12, lr}
  008e0	e24dd034	 sub         sp, sp, #0x34
  008e4		 |$M37588|

; 363  :     LONG CurrT = m_CurrT;

  008e4	e59d303c	 ldr         r3, [sp, #0x3C]
  008e8	e2833088	 add         r3, r3, #0x88
  008ec	e5933000	 ldr         r3, [r3]
  008f0	e58d3018	 str         r3, [sp, #0x18]

; 364  :     LONG DeltaT = m_DeltaT;

  008f4	e59d303c	 ldr         r3, [sp, #0x3C]
  008f8	e2833070	 add         r3, r3, #0x70
  008fc	e5933000	 ldr         r3, [r3]
  00900	e58d3010	 str         r3, [sp, #0x10]

; 365  :     LONG CurrSamp0 = m_CurrSamp[0];

  00904	e59d303c	 ldr         r3, [sp, #0x3C]
  00908	e2833080	 add         r3, r3, #0x80
  0090c	e5933000	 ldr         r3, [r3]
  00910	e58d300c	 str         r3, [sp, #0xC]

; 366  :     LONG CurrSamp1 = m_CurrSamp[1];

  00914	e59d303c	 ldr         r3, [sp, #0x3C]
  00918	e2833084	 add         r3, r3, #0x84
  0091c	e5933000	 ldr         r3, [r3]
  00920	e58d3008	 str         r3, [sp, #8]

; 367  :     LONG PrevSamp0 = m_PrevSamp[0];

  00924	e59d303c	 ldr         r3, [sp, #0x3C]
  00928	e2833078	 add         r3, r3, #0x78
  0092c	e5933000	 ldr         r3, [r3]
  00930	e58d3024	 str         r3, [sp, #0x24]

; 368  :     LONG PrevSamp1 = m_PrevSamp[1];

  00934	e59d303c	 ldr         r3, [sp, #0x3C]
  00938	e283307c	 add         r3, r3, #0x7C
  0093c	e5933000	 ldr         r3, [r3]
  00940	e58d3014	 str         r3, [sp, #0x14]

; 369  :     PBYTE pCurrData = m_lpCurrData;

  00944	e59d303c	 ldr         r3, [sp, #0x3C]
  00948	e2833044	 add         r3, r3, #0x44
  0094c	e5933000	 ldr         r3, [r3]
  00950	e58d301c	 str         r3, [sp, #0x1C]

; 370  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  00954	e59d303c	 ldr         r3, [sp, #0x3C]
  00958	e2833048	 add         r3, r3, #0x48
  0095c	e5933000	 ldr         r3, [r3]
  00960	e58d3020	 str         r3, [sp, #0x20]

; 371  :     LONG fxpGain = m_fxpGain;

  00964	e59d303c	 ldr         r3, [sp, #0x3C]
  00968	e2833060	 add         r3, r3, #0x60
  0096c	e5933000	 ldr         r3, [r3]
  00970	e58d3028	 str         r3, [sp, #0x28]
  00974		 |$LN13@Render2@3|

; 372  :     LONG OutSamp0;
; 373  :     LONG OutSamp1;
; 374  : 
; 375  :     while (pBuffer < pBufferEnd)

  00974	e59d2040	 ldr         r2, [sp, #0x40]
  00978	e59d3044	 ldr         r3, [sp, #0x44]
  0097c	e1520003	 cmp         r2, r3
  00980	2a000080	 bcs         |$LN12@Render2@3|
  00984		 |$LN11@Render2@3|

; 376  :     {
; 377  :         while (CurrT >= DELTA_OVERFLOW)

  00984	e59d3018	 ldr         r3, [sp, #0x18]
  00988	e3530902	 cmp         r3, #2, 18
  0098c	ba000021	 blt         |$LN10@Render2@3|

; 378  :         {
; 379  :             if (pCurrData>=pCurrDataEnd)

  00990	e59d201c	 ldr         r2, [sp, #0x1C]
  00994	e59d3020	 ldr         r3, [sp, #0x20]
  00998	e1520003	 cmp         r2, r3
  0099c	3a000001	 bcc         |$LN9@Render2@3|
  009a0	ea000078	 b           |$LN8@Render2@3|

; 380  :             {
; 381  :                 goto Exit;

  009a4	ea000077	 b           |$Exit$37411|
  009a8		 |$LN9@Render2@3|

; 382  :             }
; 383  : 
; 384  :             CurrT -= DELTA_OVERFLOW;

  009a8	e59d3018	 ldr         r3, [sp, #0x18]
  009ac	e2433902	 sub         r3, r3, #2, 18
  009b0	e58d3018	 str         r3, [sp, #0x18]

; 385  : 
; 386  :             PrevSamp0 = CurrSamp0;

  009b4	e59d300c	 ldr         r3, [sp, #0xC]
  009b8	e58d3024	 str         r3, [sp, #0x24]

; 387  :             PrevSamp1 = CurrSamp1;

  009bc	e59d3008	 ldr         r3, [sp, #8]
  009c0	e58d3014	 str         r3, [sp, #0x14]

; 388  : 
; 389  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  009c4	e59d301c	 ldr         r3, [sp, #0x1C]
  009c8	e58d302c	 str         r3, [sp, #0x2C]

; 390  :             CurrSamp0 =  (LONG)pSampleSrc->s8.sample_left;

  009cc	e59d302c	 ldr         r3, [sp, #0x2C]
  009d0	e5d33000	 ldrb        r3, [r3]
  009d4	e58d300c	 str         r3, [sp, #0xC]

; 391  :             CurrSamp0 = (CurrSamp0 - 128) << 8;

  009d8	e59d300c	 ldr         r3, [sp, #0xC]
  009dc	e2433080	 sub         r3, r3, #0x80
  009e0	e1a03403	 mov         r3, r3, lsl #8
  009e4	e58d300c	 str         r3, [sp, #0xC]

; 392  :             CurrSamp1 = (LONG)pSampleSrc->s8.sample_right;

  009e8	e59d302c	 ldr         r3, [sp, #0x2C]
  009ec	e2833001	 add         r3, r3, #1
  009f0	e5d33000	 ldrb        r3, [r3]
  009f4	e58d3008	 str         r3, [sp, #8]

; 393  :             CurrSamp1 = (CurrSamp1 - 128) << 8;

  009f8	e59d3008	 ldr         r3, [sp, #8]
  009fc	e2433080	 sub         r3, r3, #0x80
  00a00	e1a03403	 mov         r3, r3, lsl #8
  00a04	e58d3008	 str         r3, [sp, #8]

; 394  :             pCurrData+=2;

  00a08	e59d301c	 ldr         r3, [sp, #0x1C]
  00a0c	e2833002	 add         r3, r3, #2
  00a10	e58d301c	 str         r3, [sp, #0x1C]

; 395  :         }

  00a14	eaffffda	 b           |$LN11@Render2@3|
  00a18		 |$LN10@Render2@3|

; 396  : 
; 397  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00a18	e59d200c	 ldr         r2, [sp, #0xC]
  00a1c	e59d3024	 ldr         r3, [sp, #0x24]
  00a20	e0422003	 sub         r2, r2, r3
  00a24	e59d3018	 ldr         r3, [sp, #0x18]
  00a28	e0030392	 mul         r3, r2, r3
  00a2c	e1a027c3	 mov         r2, r3, asr #15
  00a30	e59d3024	 ldr         r3, [sp, #0x24]
  00a34	e0833002	 add         r3, r3, r2
  00a38	e58d3000	 str         r3, [sp]

; 398  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;

  00a3c	e59d2000	 ldr         r2, [sp]
  00a40	e59d3028	 ldr         r3, [sp, #0x28]
  00a44	e0030392	 mul         r3, r2, r3
  00a48	e1a03843	 mov         r3, r3, asr #16
  00a4c	e58d3000	 str         r3, [sp]

; 399  : 
; 400  :         OutSamp1 = PrevSamp1 + (((CurrSamp1 - PrevSamp1) * CurrT) >> DELTAFRAC);

  00a50	e59d2008	 ldr         r2, [sp, #8]
  00a54	e59d3014	 ldr         r3, [sp, #0x14]
  00a58	e0422003	 sub         r2, r2, r3
  00a5c	e59d3018	 ldr         r3, [sp, #0x18]
  00a60	e0030392	 mul         r3, r2, r3
  00a64	e1a027c3	 mov         r2, r3, asr #15
  00a68	e59d3014	 ldr         r3, [sp, #0x14]
  00a6c	e0833002	 add         r3, r3, r2
  00a70	e58d3004	 str         r3, [sp, #4]

; 401  :         OutSamp1 = (OutSamp1 * fxpGain) >> VOLSHIFT;

  00a74	e59d2004	 ldr         r2, [sp, #4]
  00a78	e59d3028	 ldr         r3, [sp, #0x28]
  00a7c	e0030392	 mul         r3, r2, r3
  00a80	e1a03843	 mov         r3, r3, asr #16
  00a84	e58d3004	 str         r3, [sp, #4]

; 402  :         CurrT += DeltaT;

  00a88	e59d2018	 ldr         r2, [sp, #0x18]
  00a8c	e59d3010	 ldr         r3, [sp, #0x10]
  00a90	e0823003	 add         r3, r2, r3
  00a94	e58d3018	 str         r3, [sp, #0x18]

; 403  : 
; 404  : //        DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 405  : 
; 406  :         if (pBuffer < pBufferLast)

  00a98	e59d2040	 ldr         r2, [sp, #0x40]
  00a9c	e59d3048	 ldr         r3, [sp, #0x48]
  00aa0	e1520003	 cmp         r2, r3
  00aa4	2a000028	 bcs         |$LN7@Render2@3|

; 407  :         {
; 408  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  00aa8	e59d3040	 ldr         r3, [sp, #0x40]
  00aac	e1d320f0	 ldrsh       r2, [r3]
  00ab0	e59d3000	 ldr         r3, [sp]
  00ab4	e0833002	 add         r3, r3, r2
  00ab8	e58d3000	 str         r3, [sp]

; 409  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  00abc	e59d3040	 ldr         r3, [sp, #0x40]
  00ac0	e2833002	 add         r3, r3, #2
  00ac4	e1d320f0	 ldrsh       r2, [r3]
  00ac8	e59d3004	 ldr         r3, [sp, #4]
  00acc	e0833002	 add         r3, r3, r2
  00ad0	e58d3004	 str         r3, [sp, #4]

; 410  : #if USE_MIX_SATURATE
; 411  :             // Handle saturation
; 412  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  00ad4	e59d2000	 ldr         r2, [sp]
  00ad8	e3a03c7f	 mov         r3, #0x7F, 24
  00adc	e38330ff	 orr         r3, r3, #0xFF
  00ae0	e1520003	 cmp         r2, r3
  00ae4	da000003	 ble         |$LN6@Render2@3|

; 413  :             {
; 414  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  00ae8	e3a03c7f	 mov         r3, #0x7F, 24
  00aec	e38330ff	 orr         r3, r3, #0xFF
  00af0	e58d3000	 str         r3, [sp]
  00af4	ea000005	 b           |$LN5@Render2@3|
  00af8		 |$LN6@Render2@3|

; 415  :             }
; 416  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00af8	e59d3000	 ldr         r3, [sp]
  00afc	e3730902	 cmn         r3, #2, 18
  00b00	aa000002	 bge         |$LN4@Render2@3|

; 417  :             {
; 418  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00b04	e3e030ff	 mvn         r3, #0xFF
  00b08	e1a03383	 mov         r3, r3, lsl #7
  00b0c	e58d3000	 str         r3, [sp]
  00b10		 |$LN4@Render2@3|
  00b10		 |$LN5@Render2@3|

; 419  :             }
; 420  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  00b10	e59d2004	 ldr         r2, [sp, #4]
  00b14	e3a03c7f	 mov         r3, #0x7F, 24
  00b18	e38330ff	 orr         r3, r3, #0xFF
  00b1c	e1520003	 cmp         r2, r3
  00b20	da000003	 ble         |$LN3@Render2@3|

; 421  :             {
; 422  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  00b24	e3a03c7f	 mov         r3, #0x7F, 24
  00b28	e38330ff	 orr         r3, r3, #0xFF
  00b2c	e58d3004	 str         r3, [sp, #4]
  00b30	ea000005	 b           |$LN2@Render2@3|
  00b34		 |$LN3@Render2@3|

; 423  :             }
; 424  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00b34	e59d3004	 ldr         r3, [sp, #4]
  00b38	e3730902	 cmn         r3, #2, 18
  00b3c	aa000002	 bge         |$LN1@Render2@3|

; 425  :             {
; 426  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00b40	e3e030ff	 mvn         r3, #0xFF
  00b44	e1a03383	 mov         r3, r3, lsl #7
  00b48	e58d3004	 str         r3, [sp, #4]
  00b4c		 |$LN1@Render2@3|
  00b4c		 |$LN2@Render2@3|
  00b4c		 |$LN7@Render2@3|

; 427  :             }
; 428  : #endif
; 429  :         }
; 430  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  00b4c	e59d3000	 ldr         r3, [sp]
  00b50	e1a02803	 mov         r2, r3, lsl #16
  00b54	e1a02842	 mov         r2, r2, asr #16
  00b58	e59d3040	 ldr         r3, [sp, #0x40]
  00b5c	e1c320b0	 strh        r2, [r3]

; 431  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  00b60	e59d3004	 ldr         r3, [sp, #4]
  00b64	e1a02803	 mov         r2, r3, lsl #16
  00b68	e1a02842	 mov         r2, r2, asr #16
  00b6c	e59d3040	 ldr         r3, [sp, #0x40]
  00b70	e2833002	 add         r3, r3, #2
  00b74	e1c320b0	 strh        r2, [r3]

; 432  : 
; 433  :         pBuffer += 2*sizeof(HWSAMPLE);

  00b78	e59d3040	 ldr         r3, [sp, #0x40]
  00b7c	e2833004	 add         r3, r3, #4
  00b80	e58d3040	 str         r3, [sp, #0x40]

; 434  : 
; 435  :     }

  00b84	eaffff7a	 b           |$LN13@Render2@3|
  00b88		 |$LN12@Render2@3|
  00b88		 |$LN8@Render2@3|
  00b88		 |$Exit$37411|

; 436  : 
; 437  :     Exit:
; 438  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00b88	e59d303c	 ldr         r3, [sp, #0x3C]
  00b8c	e283104c	 add         r1, r3, #0x4C
  00b90	e59d303c	 ldr         r3, [sp, #0x3C]
  00b94	e2833044	 add         r3, r3, #0x44
  00b98	e59d201c	 ldr         r2, [sp, #0x1C]
  00b9c	e5933000	 ldr         r3, [r3]
  00ba0	e0422003	 sub         r2, r2, r3
  00ba4	e5913000	 ldr         r3, [r1]
  00ba8	e0832002	 add         r2, r3, r2
  00bac	e59d303c	 ldr         r3, [sp, #0x3C]
  00bb0	e283304c	 add         r3, r3, #0x4C
  00bb4	e5832000	 str         r2, [r3]

; 439  :     m_lpCurrData = pCurrData;

  00bb8	e59d303c	 ldr         r3, [sp, #0x3C]
  00bbc	e2832044	 add         r2, r3, #0x44
  00bc0	e59d301c	 ldr         r3, [sp, #0x1C]
  00bc4	e5823000	 str         r3, [r2]

; 440  :     m_CurrT = CurrT;

  00bc8	e59d303c	 ldr         r3, [sp, #0x3C]
  00bcc	e2832088	 add         r2, r3, #0x88
  00bd0	e59d3018	 ldr         r3, [sp, #0x18]
  00bd4	e5823000	 str         r3, [r2]

; 441  :     m_PrevSamp[0] = PrevSamp0;

  00bd8	e59d303c	 ldr         r3, [sp, #0x3C]
  00bdc	e2832078	 add         r2, r3, #0x78
  00be0	e59d3024	 ldr         r3, [sp, #0x24]
  00be4	e5823000	 str         r3, [r2]

; 442  :     m_PrevSamp[1] = PrevSamp1;

  00be8	e59d303c	 ldr         r3, [sp, #0x3C]
  00bec	e283207c	 add         r2, r3, #0x7C
  00bf0	e59d3014	 ldr         r3, [sp, #0x14]
  00bf4	e5823000	 str         r3, [r2]

; 443  :     m_CurrSamp[0] = CurrSamp0;

  00bf8	e59d303c	 ldr         r3, [sp, #0x3C]
  00bfc	e2832080	 add         r2, r3, #0x80
  00c00	e59d300c	 ldr         r3, [sp, #0xC]
  00c04	e5823000	 str         r3, [r2]

; 444  :     m_CurrSamp[1] = CurrSamp1;

  00c08	e59d303c	 ldr         r3, [sp, #0x3C]
  00c0c	e2832084	 add         r2, r3, #0x84
  00c10	e59d3008	 ldr         r3, [sp, #8]
  00c14	e5823000	 str         r3, [r2]

; 445  :     return pBuffer;

  00c18	e59d3040	 ldr         r3, [sp, #0x40]
  00c1c	e58d3030	 str         r3, [sp, #0x30]

; 446  : }

  00c20	e59d0030	 ldr         r0, [sp, #0x30]
  00c24	e28dd034	 add         sp, sp, #0x34
  00c28	e89d6000	 ldmia       sp, {sp, lr}
  00c2c	e12fff1e	 bx          lr
  00c30		 |$M37589|

			 ENDP  ; |?Render2@OutputStreamContextS8@@UAAPAEPAE00@Z|, OutputStreamContextS8::Render2

	EXPORT	|?Render2@OutputStreamContextS16@@UAAPAEPAE00@Z| ; OutputStreamContextS16::Render2

  00040			 AREA	 |.pdata|, PDATA
|$T37597| DCD	|$LN18@Render2@4|
	DCD	0x4000cf04
; Function compile flags: /Odtp

  00c30			 AREA	 |.text|, CODE, ARM

  00c30		 |?Render2@OutputStreamContextS16@@UAAPAEPAE00@Z| PROC ; OutputStreamContextS16::Render2

; 459  : {

  00c30		 |$LN18@Render2@4|
  00c30	e1a0c00d	 mov         r12, sp
  00c34	e92d000f	 stmdb       sp!, {r0 - r3}
  00c38	e92d5000	 stmdb       sp!, {r12, lr}
  00c3c	e24dd034	 sub         sp, sp, #0x34
  00c40		 |$M37594|

; 460  :     LONG CurrT = m_CurrT;

  00c40	e59d303c	 ldr         r3, [sp, #0x3C]
  00c44	e2833088	 add         r3, r3, #0x88
  00c48	e5933000	 ldr         r3, [r3]
  00c4c	e58d3018	 str         r3, [sp, #0x18]

; 461  :     LONG DeltaT = m_DeltaT;

  00c50	e59d303c	 ldr         r3, [sp, #0x3C]
  00c54	e2833070	 add         r3, r3, #0x70
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e58d3010	 str         r3, [sp, #0x10]

; 462  :     LONG CurrSamp0 = m_CurrSamp[0];

  00c60	e59d303c	 ldr         r3, [sp, #0x3C]
  00c64	e2833080	 add         r3, r3, #0x80
  00c68	e5933000	 ldr         r3, [r3]
  00c6c	e58d300c	 str         r3, [sp, #0xC]

; 463  :     LONG CurrSamp1 = m_CurrSamp[1];

  00c70	e59d303c	 ldr         r3, [sp, #0x3C]
  00c74	e2833084	 add         r3, r3, #0x84
  00c78	e5933000	 ldr         r3, [r3]
  00c7c	e58d3008	 str         r3, [sp, #8]

; 464  :     LONG PrevSamp0 = m_PrevSamp[0];

  00c80	e59d303c	 ldr         r3, [sp, #0x3C]
  00c84	e2833078	 add         r3, r3, #0x78
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e58d3024	 str         r3, [sp, #0x24]

; 465  :     LONG PrevSamp1 = m_PrevSamp[1];

  00c90	e59d303c	 ldr         r3, [sp, #0x3C]
  00c94	e283307c	 add         r3, r3, #0x7C
  00c98	e5933000	 ldr         r3, [r3]
  00c9c	e58d3014	 str         r3, [sp, #0x14]

; 466  :     PBYTE pCurrData = m_lpCurrData;

  00ca0	e59d303c	 ldr         r3, [sp, #0x3C]
  00ca4	e2833044	 add         r3, r3, #0x44
  00ca8	e5933000	 ldr         r3, [r3]
  00cac	e58d301c	 str         r3, [sp, #0x1C]

; 467  :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  00cb0	e59d303c	 ldr         r3, [sp, #0x3C]
  00cb4	e2833048	 add         r3, r3, #0x48
  00cb8	e5933000	 ldr         r3, [r3]
  00cbc	e58d3020	 str         r3, [sp, #0x20]

; 468  :     LONG fxpGain = m_fxpGain;

  00cc0	e59d303c	 ldr         r3, [sp, #0x3C]
  00cc4	e2833060	 add         r3, r3, #0x60
  00cc8	e5933000	 ldr         r3, [r3]
  00ccc	e58d3028	 str         r3, [sp, #0x28]
  00cd0		 |$LN13@Render2@4|

; 469  :     LONG OutSamp0;
; 470  :     LONG OutSamp1;
; 471  : 
; 472  :     while (pBuffer < pBufferEnd)

  00cd0	e59d2040	 ldr         r2, [sp, #0x40]
  00cd4	e59d3044	 ldr         r3, [sp, #0x44]
  00cd8	e1520003	 cmp         r2, r3
  00cdc	2a000078	 bcs         |$LN12@Render2@4|
  00ce0		 |$LN11@Render2@4|

; 473  :     {
; 474  :         while (CurrT >= DELTA_OVERFLOW)

  00ce0	e59d3018	 ldr         r3, [sp, #0x18]
  00ce4	e3530902	 cmp         r3, #2, 18
  00ce8	ba000019	 blt         |$LN10@Render2@4|

; 475  :         {
; 476  :             if (pCurrData>=pCurrDataEnd)

  00cec	e59d201c	 ldr         r2, [sp, #0x1C]
  00cf0	e59d3020	 ldr         r3, [sp, #0x20]
  00cf4	e1520003	 cmp         r2, r3
  00cf8	3a000001	 bcc         |$LN9@Render2@4|
  00cfc	ea000070	 b           |$LN8@Render2@4|

; 477  :             {
; 478  :                 goto Exit;

  00d00	ea00006f	 b           |$Exit$37463|
  00d04		 |$LN9@Render2@4|

; 479  :             }
; 480  : 
; 481  :             CurrT -= DELTA_OVERFLOW;

  00d04	e59d3018	 ldr         r3, [sp, #0x18]
  00d08	e2433902	 sub         r3, r3, #2, 18
  00d0c	e58d3018	 str         r3, [sp, #0x18]

; 482  : 
; 483  :             PrevSamp0 = CurrSamp0;

  00d10	e59d300c	 ldr         r3, [sp, #0xC]
  00d14	e58d3024	 str         r3, [sp, #0x24]

; 484  :             PrevSamp1 = CurrSamp1;

  00d18	e59d3008	 ldr         r3, [sp, #8]
  00d1c	e58d3014	 str         r3, [sp, #0x14]

; 485  : 
; 486  :             PPCM_SAMPLE pSampleSrc = (PPCM_SAMPLE)pCurrData;

  00d20	e59d301c	 ldr         r3, [sp, #0x1C]
  00d24	e58d302c	 str         r3, [sp, #0x2C]

; 487  :             CurrSamp0 = (LONG)pSampleSrc->s16.sample_left;

  00d28	e59d302c	 ldr         r3, [sp, #0x2C]
  00d2c	e1d330f0	 ldrsh       r3, [r3]
  00d30	e58d300c	 str         r3, [sp, #0xC]

; 488  :             CurrSamp1 = (LONG)pSampleSrc->s16.sample_right;

  00d34	e59d302c	 ldr         r3, [sp, #0x2C]
  00d38	e2833002	 add         r3, r3, #2
  00d3c	e1d330f0	 ldrsh       r3, [r3]
  00d40	e58d3008	 str         r3, [sp, #8]

; 489  :             pCurrData+=4;

  00d44	e59d301c	 ldr         r3, [sp, #0x1C]
  00d48	e2833004	 add         r3, r3, #4
  00d4c	e58d301c	 str         r3, [sp, #0x1C]

; 490  :         }

  00d50	eaffffe2	 b           |$LN11@Render2@4|
  00d54		 |$LN10@Render2@4|

; 491  : 
; 492  :         OutSamp0 = PrevSamp0 + (((CurrSamp0 - PrevSamp0) * CurrT) >> DELTAFRAC);

  00d54	e59d200c	 ldr         r2, [sp, #0xC]
  00d58	e59d3024	 ldr         r3, [sp, #0x24]
  00d5c	e0422003	 sub         r2, r2, r3
  00d60	e59d3018	 ldr         r3, [sp, #0x18]
  00d64	e0030392	 mul         r3, r2, r3
  00d68	e1a027c3	 mov         r2, r3, asr #15
  00d6c	e59d3024	 ldr         r3, [sp, #0x24]
  00d70	e0833002	 add         r3, r3, r2
  00d74	e58d3000	 str         r3, [sp]

; 493  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;

  00d78	e59d2000	 ldr         r2, [sp]
  00d7c	e59d3028	 ldr         r3, [sp, #0x28]
  00d80	e0030392	 mul         r3, r2, r3
  00d84	e1a03843	 mov         r3, r3, asr #16
  00d88	e58d3000	 str         r3, [sp]

; 494  :         OutSamp1 = PrevSamp1 + (((CurrSamp1 - PrevSamp1) * CurrT) >> DELTAFRAC);

  00d8c	e59d2008	 ldr         r2, [sp, #8]
  00d90	e59d3014	 ldr         r3, [sp, #0x14]
  00d94	e0422003	 sub         r2, r2, r3
  00d98	e59d3018	 ldr         r3, [sp, #0x18]
  00d9c	e0030392	 mul         r3, r2, r3
  00da0	e1a027c3	 mov         r2, r3, asr #15
  00da4	e59d3014	 ldr         r3, [sp, #0x14]
  00da8	e0833002	 add         r3, r3, r2
  00dac	e58d3004	 str         r3, [sp, #4]

; 495  :         OutSamp1 = (OutSamp1 * fxpGain) >> VOLSHIFT;

  00db0	e59d2004	 ldr         r2, [sp, #4]
  00db4	e59d3028	 ldr         r3, [sp, #0x28]
  00db8	e0030392	 mul         r3, r2, r3
  00dbc	e1a03843	 mov         r3, r3, asr #16
  00dc0	e58d3004	 str         r3, [sp, #4]

; 496  :         CurrT += DeltaT;

  00dc4	e59d2018	 ldr         r2, [sp, #0x18]
  00dc8	e59d3010	 ldr         r3, [sp, #0x10]
  00dcc	e0823003	 add         r3, r2, r3
  00dd0	e58d3018	 str         r3, [sp, #0x18]

; 497  : 
; 498  : //        DEBUGMSG(ZONE_VERBOSE, (TEXT("PrevSamp0=0x%x, CurrSamp0=0x%x, CurrT=0x%x, OutSamp0=0x%x\r\n"), PrevSamp0,CurrSamp0,CurrT,OutSamp0));
; 499  : 
; 500  :         if (pBuffer < pBufferLast)

  00dd4	e59d2040	 ldr         r2, [sp, #0x40]
  00dd8	e59d3048	 ldr         r3, [sp, #0x48]
  00ddc	e1520003	 cmp         r2, r3
  00de0	2a000028	 bcs         |$LN7@Render2@4|

; 501  :         {
; 502  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  00de4	e59d3040	 ldr         r3, [sp, #0x40]
  00de8	e1d320f0	 ldrsh       r2, [r3]
  00dec	e59d3000	 ldr         r3, [sp]
  00df0	e0833002	 add         r3, r3, r2
  00df4	e58d3000	 str         r3, [sp]

; 503  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  00df8	e59d3040	 ldr         r3, [sp, #0x40]
  00dfc	e2833002	 add         r3, r3, #2
  00e00	e1d320f0	 ldrsh       r2, [r3]
  00e04	e59d3004	 ldr         r3, [sp, #4]
  00e08	e0833002	 add         r3, r3, r2
  00e0c	e58d3004	 str         r3, [sp, #4]

; 504  : #if USE_MIX_SATURATE
; 505  :             // Handle saturation
; 506  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  00e10	e59d2000	 ldr         r2, [sp]
  00e14	e3a03c7f	 mov         r3, #0x7F, 24
  00e18	e38330ff	 orr         r3, r3, #0xFF
  00e1c	e1520003	 cmp         r2, r3
  00e20	da000003	 ble         |$LN6@Render2@4|

; 507  :             {
; 508  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  00e24	e3a03c7f	 mov         r3, #0x7F, 24
  00e28	e38330ff	 orr         r3, r3, #0xFF
  00e2c	e58d3000	 str         r3, [sp]
  00e30	ea000005	 b           |$LN5@Render2@4|
  00e34		 |$LN6@Render2@4|

; 509  :             }
; 510  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00e34	e59d3000	 ldr         r3, [sp]
  00e38	e3730902	 cmn         r3, #2, 18
  00e3c	aa000002	 bge         |$LN4@Render2@4|

; 511  :             {
; 512  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00e40	e3e030ff	 mvn         r3, #0xFF
  00e44	e1a03383	 mov         r3, r3, lsl #7
  00e48	e58d3000	 str         r3, [sp]
  00e4c		 |$LN4@Render2@4|
  00e4c		 |$LN5@Render2@4|

; 513  :             }
; 514  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  00e4c	e59d2004	 ldr         r2, [sp, #4]
  00e50	e3a03c7f	 mov         r3, #0x7F, 24
  00e54	e38330ff	 orr         r3, r3, #0xFF
  00e58	e1520003	 cmp         r2, r3
  00e5c	da000003	 ble         |$LN3@Render2@4|

; 515  :             {
; 516  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  00e60	e3a03c7f	 mov         r3, #0x7F, 24
  00e64	e38330ff	 orr         r3, r3, #0xFF
  00e68	e58d3004	 str         r3, [sp, #4]
  00e6c	ea000005	 b           |$LN2@Render2@4|
  00e70		 |$LN3@Render2@4|

; 517  :             }
; 518  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00e70	e59d3004	 ldr         r3, [sp, #4]
  00e74	e3730902	 cmn         r3, #2, 18
  00e78	aa000002	 bge         |$LN1@Render2@4|

; 519  :             {
; 520  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  00e7c	e3e030ff	 mvn         r3, #0xFF
  00e80	e1a03383	 mov         r3, r3, lsl #7
  00e84	e58d3004	 str         r3, [sp, #4]
  00e88		 |$LN1@Render2@4|
  00e88		 |$LN2@Render2@4|
  00e88		 |$LN7@Render2@4|

; 521  :             }
; 522  : #endif
; 523  :         }
; 524  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  00e88	e59d3000	 ldr         r3, [sp]
  00e8c	e1a02803	 mov         r2, r3, lsl #16
  00e90	e1a02842	 mov         r2, r2, asr #16
  00e94	e59d3040	 ldr         r3, [sp, #0x40]
  00e98	e1c320b0	 strh        r2, [r3]

; 525  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  00e9c	e59d3004	 ldr         r3, [sp, #4]
  00ea0	e1a02803	 mov         r2, r3, lsl #16
  00ea4	e1a02842	 mov         r2, r2, asr #16
  00ea8	e59d3040	 ldr         r3, [sp, #0x40]
  00eac	e2833002	 add         r3, r3, #2
  00eb0	e1c320b0	 strh        r2, [r3]

; 526  : 
; 527  :         pBuffer += 2*sizeof(HWSAMPLE);

  00eb4	e59d3040	 ldr         r3, [sp, #0x40]
  00eb8	e2833004	 add         r3, r3, #4
  00ebc	e58d3040	 str         r3, [sp, #0x40]

; 528  :     }

  00ec0	eaffff82	 b           |$LN13@Render2@4|
  00ec4		 |$LN12@Render2@4|
  00ec4		 |$LN8@Render2@4|
  00ec4		 |$Exit$37463|

; 529  : 
; 530  :     Exit:
; 531  :     m_dwByteCount += (pCurrData - m_lpCurrData);

  00ec4	e59d303c	 ldr         r3, [sp, #0x3C]
  00ec8	e283104c	 add         r1, r3, #0x4C
  00ecc	e59d303c	 ldr         r3, [sp, #0x3C]
  00ed0	e2833044	 add         r3, r3, #0x44
  00ed4	e59d201c	 ldr         r2, [sp, #0x1C]
  00ed8	e5933000	 ldr         r3, [r3]
  00edc	e0422003	 sub         r2, r2, r3
  00ee0	e5913000	 ldr         r3, [r1]
  00ee4	e0832002	 add         r2, r3, r2
  00ee8	e59d303c	 ldr         r3, [sp, #0x3C]
  00eec	e283304c	 add         r3, r3, #0x4C
  00ef0	e5832000	 str         r2, [r3]

; 532  :     m_lpCurrData = pCurrData;

  00ef4	e59d303c	 ldr         r3, [sp, #0x3C]
  00ef8	e2832044	 add         r2, r3, #0x44
  00efc	e59d301c	 ldr         r3, [sp, #0x1C]
  00f00	e5823000	 str         r3, [r2]

; 533  :     m_CurrT = CurrT;

  00f04	e59d303c	 ldr         r3, [sp, #0x3C]
  00f08	e2832088	 add         r2, r3, #0x88
  00f0c	e59d3018	 ldr         r3, [sp, #0x18]
  00f10	e5823000	 str         r3, [r2]

; 534  :     m_PrevSamp[0] = PrevSamp0;

  00f14	e59d303c	 ldr         r3, [sp, #0x3C]
  00f18	e2832078	 add         r2, r3, #0x78
  00f1c	e59d3024	 ldr         r3, [sp, #0x24]
  00f20	e5823000	 str         r3, [r2]

; 535  :     m_PrevSamp[1] = PrevSamp1;

  00f24	e59d303c	 ldr         r3, [sp, #0x3C]
  00f28	e283207c	 add         r2, r3, #0x7C
  00f2c	e59d3014	 ldr         r3, [sp, #0x14]
  00f30	e5823000	 str         r3, [r2]

; 536  :     m_CurrSamp[0] = CurrSamp0;

  00f34	e59d303c	 ldr         r3, [sp, #0x3C]
  00f38	e2832080	 add         r2, r3, #0x80
  00f3c	e59d300c	 ldr         r3, [sp, #0xC]
  00f40	e5823000	 str         r3, [r2]

; 537  :     m_CurrSamp[1] = CurrSamp1;

  00f44	e59d303c	 ldr         r3, [sp, #0x3C]
  00f48	e2832084	 add         r2, r3, #0x84
  00f4c	e59d3008	 ldr         r3, [sp, #8]
  00f50	e5823000	 str         r3, [r2]

; 538  :     return pBuffer;

  00f54	e59d3040	 ldr         r3, [sp, #0x40]
  00f58	e58d3030	 str         r3, [sp, #0x30]

; 539  : }

  00f5c	e59d0030	 ldr         r0, [sp, #0x30]
  00f60	e28dd034	 add         sp, sp, #0x34
  00f64	e89d6000	 ldmia       sp, {sp, lr}
  00f68	e12fff1e	 bx          lr
  00f6c		 |$M37595|

			 ENDP  ; |?Render2@OutputStreamContextS16@@UAAPAEPAE00@Z|, OutputStreamContextS16::Render2

	END
