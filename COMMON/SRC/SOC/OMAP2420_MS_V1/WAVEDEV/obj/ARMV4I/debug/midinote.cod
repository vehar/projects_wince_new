; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\midinote.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?PitchTable@CMidiNote@@0QBIB| [ DATA ]	; CMidiNote::PitchTable
	EXPORT	|?SineTable@CMidiNote@@0QBFB| [ DATA ]	; CMidiNote::SineTable

  00000			 AREA	 |.rdata|, DATA, READONLY
|?PitchTable@CMidiNote@@0QBIB| DCD 0x184cbb6		; CMidiNote::PitchTable
	DCD	0x19bea2d
	DCD	0x1b46892
	DCD	0x1ce5bd2
	DCD	0x1e9da1a
	DCD	0x206fae6
	DCD	0x225d719
	DCD	0x2468912
	DCD	0x2692cbf
	DCD	0x28ddfb9
	DCD	0x2b4c15a
	DCD	0x2ddf2db
|?SineTable@CMidiNote@@0QBFB| DCW 0x0			; CMidiNote::SineTable
	DCW	0x324
	DCW	0x647
	DCW	0x96a
	DCW	0xc8b
	DCW	0xfab
	DCW	0x12c7
	DCW	0x15e1
	DCW	0x18f8
	DCW	0x1c0b
	DCW	0x1f19
	DCW	0x2223
	DCW	0x2527
	DCW	0x2826
	DCW	0x2b1e
	DCW	0x2e10
	DCW	0x30fb
	DCW	0x33de
	DCW	0x36b9
	DCW	0x398c
	DCW	0x3c56
	DCW	0x3f16
	DCW	0x41cd
	DCW	0x447a
	DCW	0x471c
	DCW	0x49b3
	DCW	0x4c3f
	DCW	0x4ebf
	DCW	0x5133
	DCW	0x539a
	DCW	0x55f4
	DCW	0x5842
	DCW	0x5a81
	DCW	0x5cb3
	DCW	0x5ed6
	DCW	0x60eb
	DCW	0x62f1
	DCW	0x64e7
	DCW	0x66ce
	DCW	0x68a5
	DCW	0x6a6c
	DCW	0x6c23
	DCW	0x6dc9
	DCW	0x6f5e
	DCW	0x70e1
	DCW	0x7254
	DCW	0x73b5
	DCW	0x7503
	DCW	0x7640
	DCW	0x776b
	DCW	0x7883
	DCW	0x7989
	DCW	0x7a7c
	DCW	0x7b5c
	DCW	0x7c29
	DCW	0x7ce2
	DCW	0x7d89
	DCW	0x7e1c
	DCW	0x7e9c
	DCW	0x7f08
	DCW	0x7f61
	DCW	0x7fa6
	DCW	0x7fd7
	DCW	0x7ff5
	DCW	0x7fff
	DCW	0x7ff5
	DCW	0x7fd7
	DCW	0x7fa6
	DCW	0x7f61
	DCW	0x7f08
	DCW	0x7e9c
	DCW	0x7e1c
	DCW	0x7d89
	DCW	0x7ce2
	DCW	0x7c29
	DCW	0x7b5c
	DCW	0x7a7c
	DCW	0x7989
	DCW	0x7883
	DCW	0x776b
	DCW	0x7640
	DCW	0x7503
	DCW	0x73b5
	DCW	0x7254
	DCW	0x70e1
	DCW	0x6f5e
	DCW	0x6dc9
	DCW	0x6c23
	DCW	0x6a6c
	DCW	0x68a5
	DCW	0x66ce
	DCW	0x64e7
	DCW	0x62f1
	DCW	0x60eb
	DCW	0x5ed6
	DCW	0x5cb3
	DCW	0x5a81
	DCW	0x5842
	DCW	0x55f4
	DCW	0x539a
	DCW	0x5133
	DCW	0x4ebf
	DCW	0x4c3f
	DCW	0x49b3
	DCW	0x471c
	DCW	0x447a
	DCW	0x41cd
	DCW	0x3f16
	DCW	0x3c56
	DCW	0x398c
	DCW	0x36b9
	DCW	0x33de
	DCW	0x30fb
	DCW	0x2e10
	DCW	0x2b1e
	DCW	0x2826
	DCW	0x2527
	DCW	0x2223
	DCW	0x1f19
	DCW	0x1c0b
	DCW	0x18f8
	DCW	0x15e1
	DCW	0x12c7
	DCW	0xfab
	DCW	0xc8b
	DCW	0x96a
	DCW	0x647
	DCW	0x324
	DCW	0x0
	DCW	0xfcdc
	DCW	0xf9b9
	DCW	0xf696
	DCW	0xf375
	DCW	0xf055
	DCW	0xed39
	DCW	0xea1f
	DCW	0xe708
	DCW	0xe3f5
	DCW	0xe0e7
	DCW	0xdddd
	DCW	0xdad9
	DCW	0xd7da
	DCW	0xd4e2
	DCW	0xd1f0
	DCW	0xcf05
	DCW	0xcc22
	DCW	0xc947
	DCW	0xc674
	DCW	0xc3aa
	DCW	0xc0ea
	DCW	0xbe33
	DCW	0xbb86
	DCW	0xb8e4
	DCW	0xb64d
	DCW	0xb3c1
	DCW	0xb141
	DCW	0xaecd
	DCW	0xac66
	DCW	0xaa0c
	DCW	0xa7be
	DCW	0xa57f
	DCW	0xa34d
	DCW	0xa12a
	DCW	0x9f15
	DCW	0x9d0f
	DCW	0x9b19
	DCW	0x9932
	DCW	0x975b
	DCW	0x9594
	DCW	0x93dd
	DCW	0x9237
	DCW	0x90a2
	DCW	0x8f1f
	DCW	0x8dac
	DCW	0x8c4b
	DCW	0x8afd
	DCW	0x89c0
	DCW	0x8895
	DCW	0x877d
	DCW	0x8677
	DCW	0x8584
	DCW	0x84a4
	DCW	0x83d7
	DCW	0x831e
	DCW	0x8277
	DCW	0x81e4
	DCW	0x8164
	DCW	0x80f8
	DCW	0x809f
	DCW	0x805a
	DCW	0x8029
	DCW	0x800b
	DCW	0x8001
	DCW	0x800b
	DCW	0x8029
	DCW	0x805a
	DCW	0x809f
	DCW	0x80f8
	DCW	0x8164
	DCW	0x81e4
	DCW	0x8277
	DCW	0x831e
	DCW	0x83d7
	DCW	0x84a4
	DCW	0x8584
	DCW	0x8677
	DCW	0x877d
	DCW	0x8895
	DCW	0x89c0
	DCW	0x8afd
	DCW	0x8c4b
	DCW	0x8dac
	DCW	0x8f1f
	DCW	0x90a2
	DCW	0x9237
	DCW	0x93dd
	DCW	0x9594
	DCW	0x975b
	DCW	0x9932
	DCW	0x9b19
	DCW	0x9d0f
	DCW	0x9f15
	DCW	0xa12a
	DCW	0xa34d
	DCW	0xa57f
	DCW	0xa7be
	DCW	0xaa0c
	DCW	0xac66
	DCW	0xaecd
	DCW	0xb141
	DCW	0xb3c1
	DCW	0xb64d
	DCW	0xb8e4
	DCW	0xbb86
	DCW	0xbe33
	DCW	0xc0ea
	DCW	0xc3aa
	DCW	0xc674
	DCW	0xc947
	DCW	0xcc22
	DCW	0xcf05
	DCW	0xd1f0
	DCW	0xd4e2
	DCW	0xd7da
	DCW	0xdad9
	DCW	0xdddd
	DCW	0xe0e7
	DCW	0xe3f5
	DCW	0xe708
	DCW	0xea1f
	DCW	0xed39
	DCW	0xf055
	DCW	0xf375
	DCW	0xf696
	DCW	0xf9b9
	DCW	0xfcdc
	DCW	0x0
	EXPORT	|?GainChange@CMidiNote@@QAAXXZ|		; CMidiNote::GainChange
	IMPORT	|?MapNoteGain@CMidiStream@@QAAKK@Z|	; CMidiStream::MapNoteGain

  00000			 AREA	 |.pdata|, PDATA
|$T37399| DCD	|$LN5@GainChange|
	DCD	0x40001304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midinote.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GainChange@CMidiNote@@QAAXXZ| PROC	; CMidiNote::GainChange

; 333  : {

  00000		 |$LN5@GainChange|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37396|

; 334  :     m_fxpGain = m_pMidiStream->MapNoteGain(m_dwGain);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833020	 add         r3, r3, #0x20
  00018	e5931000	 ldr         r1, [r3]
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e2833008	 add         r3, r3, #8
  00024	e5930000	 ldr         r0, [r3]
  00028	eb000000	 bl          |?MapNoteGain@CMidiStream@@QAAKK@Z|
  0002c	e58d0000	 str         r0, [sp]
  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e2832024	 add         r2, r3, #0x24
  00038	e59d3000	 ldr         r3, [sp]
  0003c	e5823000	 str         r3, [r2]

; 335  : }

  00040	e28dd004	 add         sp, sp, #4
  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M37397|

			 ENDP  ; |?GainChange@CMidiNote@@QAAXXZ|, CMidiNote::GainChange

	EXPORT	|?SetVelocity@CMidiNote@@QAAXI@Z|	; CMidiNote::SetVelocity
	EXPORT	|?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| ; CMidiNote::NoteOn
	IMPORT	|__rt_udiv|

  00008			 AREA	 |.pdata|, PDATA
|$T37406| DCD	|$LN10@NoteOn|
	DCD	0x40005104
; Function compile flags: /Odtp

  0004c			 AREA	 |.text|, CODE, ARM

  0004c		 |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| PROC ; CMidiNote::NoteOn

; 345  : {

  0004c		 |$LN10@NoteOn|
  0004c	e1a0c00d	 mov         r12, sp
  00050	e92d000f	 stmdb       sp!, {r0 - r3}
  00054	e92d5000	 stmdb       sp!, {r12, lr}
  00058	e24dd008	 sub         sp, sp, #8
  0005c		 |$M37403|

; 346  :     // Save params
; 347  :     m_pMidiStream = pMidiStream;

  0005c	e59d3010	 ldr         r3, [sp, #0x10]
  00060	e2832008	 add         r2, r3, #8
  00064	e59d3014	 ldr         r3, [sp, #0x14]
  00068	e5823000	 str         r3, [r2]

; 348  :     m_Note     = Note;

  0006c	e59d3010	 ldr         r3, [sp, #0x10]
  00070	e283200c	 add         r2, r3, #0xC
  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e5823000	 str         r3, [r2]

; 349  :     m_Channel  = Channel;

  0007c	e59d3010	 ldr         r3, [sp, #0x10]
  00080	e2832014	 add         r2, r3, #0x14
  00084	e59d3020	 ldr         r3, [sp, #0x20]
  00088	e5823000	 str         r3, [r2]

; 350  :     SetVelocity(Velocity);

  0008c	e59d101c	 ldr         r1, [sp, #0x1C]
  00090	e59d0010	 ldr         r0, [sp, #0x10]
  00094	eb000000	 bl          |?SetVelocity@CMidiNote@@QAAXI@Z|

; 351  : 
; 352  :     // Init pitch
; 353  :     m_Index = 0;

  00098	e59d3010	 ldr         r3, [sp, #0x10]
  0009c	e2832018	 add         r2, r3, #0x18
  000a0	e3a03000	 mov         r3, #0
  000a4	e5823000	 str         r3, [r2]

; 354  :     if (Channel==FREQCHANNEL)

  000a8	e59d3020	 ldr         r3, [sp, #0x20]
  000ac	e3530010	 cmp         r3, #0x10
  000b0	1a000007	 bne         |$LN5@NoteOn|

; 355  :     {
; 356  :         m_IndexDelta = (Note * INVSAMPLERATE);

  000b4	e59d1018	 ldr         r1, [sp, #0x18]
  000b8	e3a03b5f	 mov         r3, #0x5F, 22
  000bc	e3833070	 orr         r3, r3, #0x70
  000c0	e0020391	 mul         r2, r1, r3
  000c4	e59d3010	 ldr         r3, [sp, #0x10]
  000c8	e283301c	 add         r3, r3, #0x1C
  000cc	e5832000	 str         r2, [r3]

; 357  :     }
; 358  :     else

  000d0	ea000027	 b           |$LN4@NoteOn|
  000d4		 |$LN5@NoteOn|

; 359  :     {
; 360  :         m_IndexDelta = PitchTable[ Note % 12 ] ;

  000d4	e59d1018	 ldr         r1, [sp, #0x18]
  000d8	e3a0000c	 mov         r0, #0xC
  000dc	eb000000	 bl          __rt_udiv
  000e0	e3a03004	 mov         r3, #4
  000e4	e0020391	 mul         r2, r1, r3
  000e8	e59f309c	 ldr         r3, [pc, #0x9C]
  000ec	e0831002	 add         r1, r3, r2
  000f0	e59d3010	 ldr         r3, [sp, #0x10]
  000f4	e283201c	 add         r2, r3, #0x1C
  000f8	e5913000	 ldr         r3, [r1]
  000fc	e5823000	 str         r3, [r2]

; 361  : 
; 362  :         // Adjust octave
; 363  :         int Octave = ((int)(Note/12)) - 5;

  00100	e59d1018	 ldr         r1, [sp, #0x18]
  00104	e3a0000c	 mov         r0, #0xC
  00108	eb000000	 bl          __rt_udiv
  0010c	e2403005	 sub         r3, r0, #5
  00110	e58d3000	 str         r3, [sp]

; 364  :         if (Octave>0)

  00114	e59d3000	 ldr         r3, [sp]
  00118	e3530000	 cmp         r3, #0
  0011c	da000008	 ble         |$LN3@NoteOn|

; 365  :         {
; 366  :             m_IndexDelta <<= Octave;

  00120	e59d3010	 ldr         r3, [sp, #0x10]
  00124	e283301c	 add         r3, r3, #0x1C
  00128	e5932000	 ldr         r2, [r3]
  0012c	e59d3000	 ldr         r3, [sp]
  00130	e1a02312	 mov         r2, r2, lsl r3
  00134	e59d3010	 ldr         r3, [sp, #0x10]
  00138	e283301c	 add         r3, r3, #0x1C
  0013c	e5832000	 str         r2, [r3]
  00140	ea00000b	 b           |$LN2@NoteOn|
  00144		 |$LN3@NoteOn|

; 367  :         }
; 368  :         else if (Octave<0)

  00144	e59d3000	 ldr         r3, [sp]
  00148	e3530000	 cmp         r3, #0
  0014c	aa000008	 bge         |$LN1@NoteOn|

; 369  :         {
; 370  :             m_IndexDelta >>= -Octave;

  00150	e59d3010	 ldr         r3, [sp, #0x10]
  00154	e283101c	 add         r1, r3, #0x1C
  00158	e59d3000	 ldr         r3, [sp]
  0015c	e2632000	 rsb         r2, r3, #0
  00160	e5913000	 ldr         r3, [r1]
  00164	e1a02233	 mov         r2, r3, lsr r2
  00168	e59d3010	 ldr         r3, [sp, #0x10]
  0016c	e283301c	 add         r3, r3, #0x1C
  00170	e5832000	 str         r2, [r3]
  00174		 |$LN1@NoteOn|
  00174		 |$LN2@NoteOn|
  00174		 |$LN4@NoteOn|

; 371  :         }
; 372  :     }
; 373  : 
; 374  :     return S_OK;

  00174	e3a03000	 mov         r3, #0
  00178	e58d3004	 str         r3, [sp, #4]

; 375  : }

  0017c	e59d0004	 ldr         r0, [sp, #4]
  00180	e28dd008	 add         sp, sp, #8
  00184	e89d6000	 ldmia       sp, {sp, lr}
  00188	e12fff1e	 bx          lr
  0018c		 |$LN11@NoteOn|
  0018c		 |$LN12@NoteOn|
  0018c	00000000	 DCD         |?PitchTable@CMidiNote@@0QBIB|
  00190		 |$M37404|

			 ENDP  ; |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z|, CMidiNote::NoteOn

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37413| DCD	|$LN5@SetVelocit|
	DCD	0x40001403
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVelocity@CMidiNote@@QAAXI@Z| PROC	; CMidiNote::SetVelocity

; 52   :     {

  00000		 |$LN5@SetVelocit|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37410|

; 53   :         // Reset the bytes left value here. This ensures that if a note is going away we bring it back.
; 54   :         m_dwBytesLeft = (DWORD)-1;

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832028	 add         r2, r3, #0x28
  00014	e3e03000	 mvn         r3, #0
  00018	e5823000	 str         r3, [r2]

; 55   : 
; 56   :         m_Velocity = Velocity;

  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e2832010	 add         r2, r3, #0x10
  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e5823000	 str         r3, [r2]

; 57   :         m_dwGain   = Velocity<<9;

  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e1a02483	 mov         r2, r3, lsl #9
  00034	e59d3008	 ldr         r3, [sp, #8]
  00038	e2833020	 add         r3, r3, #0x20
  0003c	e5832000	 str         r2, [r3]

; 58   :         GainChange();

  00040	e59d0008	 ldr         r0, [sp, #8]
  00044	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 59   :     }

  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M37411|

			 ENDP  ; |?SetVelocity@CMidiNote@@QAAXI@Z|, CMidiNote::SetVelocity

	EXPORT	|??_C@_1JM@CHBKJEIO@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAN?$AAo?$AAt?$AAe?$AAO?$AAf?$AAf?$AA?0?$AA?5?$AAm?$AA_?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|?NoteOff@CMidiNote@@QAAJI@Z|		; CMidiNote::NoteOff
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00010			 AREA	 |.pdata|, PDATA
|$T37423| DCD	|$LN9@NoteOff|
	DCD	0x40003c04
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midinote.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@CHBKJEIO@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAN?$AAo?$AAt?$AAe?$AAO?$AAf?$AAf?$AA?0?$AA?5?$AAm?$AA_?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@| DCB "C"
	DCB	0x0, "M", 0x0, "i", 0x0, "d", 0x0, "i", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, ":", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "e", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, ","
	DCB	0x0, " ", 0x0, "m", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "x", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "m"
	DCB	0x0, "_", 0x0, "I", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x"
	DCB	0x0, "D", 0x0, "e", 0x0, "l", 0x0, "t", 0x0, "a", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "m", 0x0, "_", 0x0, "d", 0x0, "w"
	DCB	0x0, "B", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, "L"
	DCB	0x0, "e", 0x0, "f", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00190			 AREA	 |.text|, CODE, ARM

  00190		 |?NoteOff@CMidiNote@@QAAJI@Z| PROC	; CMidiNote::NoteOff

; 384  : {

  00190		 |$LN9@NoteOff|
  00190	e1a0c00d	 mov         r12, sp
  00194	e92d0003	 stmdb       sp!, {r0, r1}
  00198	e92d5000	 stmdb       sp!, {r12, lr}
  0019c	e24dd00c	 sub         sp, sp, #0xC
  001a0		 |$M37420|

; 385  :     // Calculate the number of samples left before we cross a 0 boundary at the middle or end of the table
; 386  :     DWORD SamplesLeft;
; 387  :     if (m_IndexDelta)

  001a0	e59d3014	 ldr         r3, [sp, #0x14]
  001a4	e283301c	 add         r3, r3, #0x1C
  001a8	e5933000	 ldr         r3, [r3]
  001ac	e3530000	 cmp         r3, #0
  001b0	0a00000c	 beq         |$LN2@NoteOff|

; 388  :         {
; 389  :         SamplesLeft = ( ((0-m_Index)&0x7FFFFFFF) /m_IndexDelta) + 1;

  001b4	e59d3014	 ldr         r3, [sp, #0x14]
  001b8	e2833018	 add         r3, r3, #0x18
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e2632000	 rsb         r2, r3, #0
  001c4	e3e03102	 mvn         r3, #2, 2
  001c8	e0021003	 and         r1, r2, r3
  001cc	e59d3014	 ldr         r3, [sp, #0x14]
  001d0	e283301c	 add         r3, r3, #0x1C
  001d4	e5930000	 ldr         r0, [r3]
  001d8	eb000000	 bl          __rt_udiv
  001dc	e2803001	 add         r3, r0, #1
  001e0	e58d3000	 str         r3, [sp]

; 390  :         }
; 391  :     else

  001e4	ea000001	 b           |$LN1@NoteOff|
  001e8		 |$LN2@NoteOff|

; 392  :         {
; 393  :         SamplesLeft=0;

  001e8	e3a03000	 mov         r3, #0
  001ec	e58d3000	 str         r3, [sp]
  001f0		 |$LN1@NoteOff|

; 394  :         }
; 395  : 
; 396  :     m_dwBytesLeft = SamplesLeft * sizeof(HWSAMPLE) * OUTCHANNELS;

  001f0	e59d2000	 ldr         r2, [sp]
  001f4	e3a03002	 mov         r3, #2
  001f8	e0010392	 mul         r1, r2, r3
  001fc	e3a03002	 mov         r3, #2
  00200	e0020391	 mul         r2, r1, r3
  00204	e59d3014	 ldr         r3, [sp, #0x14]
  00208	e2833028	 add         r3, r3, #0x28
  0020c	e5832000	 str         r2, [r3]

; 397  :     DEBUGMSG(ZONE_MIDI, (TEXT("CMidiNote::NoteOff, m_Index = 0x%x, m_IndexDelta = 0x%x, m_dwBytesLeft = %d\r\n"),m_Index,m_IndexDelta,m_dwBytesLeft));

  00210	e59f3064	 ldr         r3, [pc, #0x64]
  00214	e5933440	 ldr         r3, [r3, #0x440]
  00218	e3130b01	 tst         r3, #1, 22
  0021c	0a00000d	 beq         |$LN5@NoteOff|
  00220	e59d3014	 ldr         r3, [sp, #0x14]
  00224	e2833028	 add         r3, r3, #0x28
  00228	e5933000	 ldr         r3, [r3]
  0022c	e59d2014	 ldr         r2, [sp, #0x14]
  00230	e282201c	 add         r2, r2, #0x1C
  00234	e5922000	 ldr         r2, [r2]
  00238	e59d1014	 ldr         r1, [sp, #0x14]
  0023c	e2811018	 add         r1, r1, #0x18
  00240	e5911000	 ldr         r1, [r1]
  00244	e59f002c	 ldr         r0, [pc, #0x2C]
  00248	eb000000	 bl          NKDbgPrintfW
  0024c	e3a03001	 mov         r3, #1
  00250	e58d3008	 str         r3, [sp, #8]
  00254	ea000001	 b           |$LN6@NoteOff|
  00258		 |$LN5@NoteOff|
  00258	e3a03000	 mov         r3, #0
  0025c	e58d3008	 str         r3, [sp, #8]
  00260		 |$LN6@NoteOff|

; 398  :     // m_pMidiStream->NoteDone(this);
; 399  :     return S_OK;

  00260	e3a03000	 mov         r3, #0
  00264	e58d3004	 str         r3, [sp, #4]

; 400  : }

  00268	e59d0004	 ldr         r0, [sp, #4]
  0026c	e28dd00c	 add         sp, sp, #0xC
  00270	e89d6000	 ldmia       sp, {sp, lr}
  00274	e12fff1e	 bx          lr
  00278		 |$LN10@NoteOff|
  00278		 |$LN11@NoteOff|
  00278	00000000	 DCD         |??_C@_1JM@CHBKJEIO@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAN?$AAo?$AAt?$AAe?$AAO?$AAf?$AAf?$AA?0?$AA?5?$AAm?$AA_?$AAI?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx@|
  0027c		 |$LN12@NoteOff|
  0027c	00000000	 DCD         |dpCurSettings|
  00280		 |$M37421|

			 ENDP  ; |?NoteOff@CMidiNote@@QAAJI@Z|, CMidiNote::NoteOff

	EXPORT	|?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteDone
	EXPORT	|??_C@_1GO@GPNNNFCM@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAa?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@ICNNALDK@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AAt?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|?Render2@CMidiNote@@QAAPAEPAE00@Z|	; CMidiNote::Render2
	EXPORT	|?Render@CMidiNote@@QAAPAEPAE00@Z|	; CMidiNote::Render

  00018			 AREA	 |.pdata|, PDATA
|$T37436| DCD	|$LN13@Render|
	DCD	0x40005e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@GPNNNFCM@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAa?$AAf@| DCB "C"
	DCB	0x0, "M", 0x0, "i", 0x0, "d", 0x0, "i", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, ":", 0x0, "R", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, ",", 0x0, " "
	DCB	0x0, "L", 0x0, "a", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x", 0x0, " ", 0x0, "a"
	DCB	0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "o"
	DCB	0x0, "n", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@ICNNALDK@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AAt?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa@| DCB "C"
	DCB	0x0, "M", 0x0, "i", 0x0, "d", 0x0, "i", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, ":", 0x0, "R", 0x0, "e"
	DCB	0x0, "n", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, ",", 0x0, " "
	DCB	0x0, "N", 0x0, "o", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "a", 0x0, "s", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "m"
	DCB	0x0, "_", 0x0, "d", 0x0, "w", 0x0, "B", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, "L", 0x0, "e", 0x0, "f", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00280			 AREA	 |.text|, CODE, ARM

  00280		 |?Render@CMidiNote@@QAAPAEPAE00@Z| PROC ; CMidiNote::Render

; 411  : {

  00280		 |$LN13@Render|
  00280	e1a0c00d	 mov         r12, sp
  00284	e92d000f	 stmdb       sp!, {r0 - r3}
  00288	e92d5000	 stmdb       sp!, {r12, lr}
  0028c	e24dd01c	 sub         sp, sp, #0x1C
  00290		 |$M37433|

; 412  :     DWORD BytesLeft = m_dwBytesLeft;

  00290	e59d3024	 ldr         r3, [sp, #0x24]
  00294	e2833028	 add         r3, r3, #0x28
  00298	e5933000	 ldr         r3, [r3]
  0029c	e58d3004	 str         r3, [sp, #4]

; 413  : 
; 414  :     // Handle common case first
; 415  :     if (BytesLeft==(DWORD)-1)

  002a0	e59d3004	 ldr         r3, [sp, #4]
  002a4	e3730001	 cmn         r3, #1
  002a8	1a000008	 bne         |$LN4@Render|

; 416  :     {
; 417  :         // Call real inner loop
; 418  :         return Render2(pBuffer,pBufferEnd,pBufferLast);

  002ac	e59d3030	 ldr         r3, [sp, #0x30]
  002b0	e59d202c	 ldr         r2, [sp, #0x2C]
  002b4	e59d1028	 ldr         r1, [sp, #0x28]
  002b8	e59d0024	 ldr         r0, [sp, #0x24]
  002bc	eb000000	 bl          |?Render2@CMidiNote@@QAAPAEPAE00@Z|
  002c0	e58d000c	 str         r0, [sp, #0xC]
  002c4	e59d300c	 ldr         r3, [sp, #0xC]
  002c8	e58d3008	 str         r3, [sp, #8]
  002cc	ea000042	 b           |$LN5@Render|
  002d0		 |$LN4@Render|

; 419  :     }
; 420  : 
; 421  :     DEBUGMSG(ZONE_MIDI, (TEXT("CMidiNote::Render, Note in release, m_dwBytesLeft = %d\r\n"),BytesLeft));

  002d0	e59f3118	 ldr         r3, [pc, #0x118]
  002d4	e5933440	 ldr         r3, [r3, #0x440]
  002d8	e3130b01	 tst         r3, #1, 22
  002dc	0a000005	 beq         |$LN7@Render|
  002e0	e59d1004	 ldr         r1, [sp, #4]
  002e4	e59f0108	 ldr         r0, [pc, #0x108]
  002e8	eb000000	 bl          NKDbgPrintfW
  002ec	e3a03001	 mov         r3, #1
  002f0	e58d3010	 str         r3, [sp, #0x10]
  002f4	ea000001	 b           |$LN8@Render|
  002f8		 |$LN7@Render|
  002f8	e3a03000	 mov         r3, #0
  002fc	e58d3010	 str         r3, [sp, #0x10]
  00300		 |$LN8@Render|

; 422  : 
; 423  :     DWORD BytesThisBuf = (pBufferEnd-pBuffer);

  00300	e59d202c	 ldr         r2, [sp, #0x2C]
  00304	e59d3028	 ldr         r3, [sp, #0x28]
  00308	e0423003	 sub         r3, r2, r3
  0030c	e58d3000	 str         r3, [sp]

; 424  :     if (BytesLeft > BytesThisBuf)

  00310	e59d2004	 ldr         r2, [sp, #4]
  00314	e59d3000	 ldr         r3, [sp]
  00318	e1520003	 cmp         r2, r3
  0031c	9a000004	 bls         |$LN3@Render|

; 425  :     {
; 426  :         // If we can't end during this buffer, just remember where we were
; 427  :         BytesLeft-=BytesThisBuf;

  00320	e59d2004	 ldr         r2, [sp, #4]
  00324	e59d3000	 ldr         r3, [sp]
  00328	e0423003	 sub         r3, r2, r3
  0032c	e58d3004	 str         r3, [sp, #4]

; 428  :     }
; 429  :     else

  00330	ea000005	 b           |$LN2@Render|
  00334		 |$LN3@Render|

; 430  :     {
; 431  :         // Ok, we end during this buffer. Update pBufferEnd to force the renderer to stop on a 0 crossing.
; 432  :         pBufferEnd = pBuffer + BytesLeft;

  00334	e59d2028	 ldr         r2, [sp, #0x28]
  00338	e59d3004	 ldr         r3, [sp, #4]
  0033c	e0823003	 add         r3, r2, r3
  00340	e58d302c	 str         r3, [sp, #0x2C]

; 433  :         BytesLeft=0;

  00344	e3a03000	 mov         r3, #0
  00348	e58d3004	 str         r3, [sp, #4]
  0034c		 |$LN2@Render|

; 434  :     }
; 435  : 
; 436  :     m_dwBytesLeft = BytesLeft;

  0034c	e59d3024	 ldr         r3, [sp, #0x24]
  00350	e2832028	 add         r2, r3, #0x28
  00354	e59d3004	 ldr         r3, [sp, #4]
  00358	e5823000	 str         r3, [r2]

; 437  : 
; 438  :     // Call real inner loop
; 439  :     pBufferLast = Render2(pBuffer,pBufferEnd,pBufferLast);

  0035c	e59d3030	 ldr         r3, [sp, #0x30]
  00360	e59d202c	 ldr         r2, [sp, #0x2C]
  00364	e59d1028	 ldr         r1, [sp, #0x28]
  00368	e59d0024	 ldr         r0, [sp, #0x24]
  0036c	eb000000	 bl          |?Render2@CMidiNote@@QAAPAEPAE00@Z|
  00370	e58d0014	 str         r0, [sp, #0x14]
  00374	e59d3014	 ldr         r3, [sp, #0x14]
  00378	e58d3030	 str         r3, [sp, #0x30]

; 440  : 
; 441  :     if (BytesLeft==0)

  0037c	e59d3004	 ldr         r3, [sp, #4]
  00380	e3530000	 cmp         r3, #0
  00384	1a000012	 bne         |$LN1@Render|

; 442  :     {
; 443  :         // Time to end the note.
; 444  :         DEBUGMSG(ZONE_MIDI, (TEXT("CMidiNote::Render, Last index after note done = 0x%x\r\n"),m_Index));

  00388	e59f3060	 ldr         r3, [pc, #0x60]
  0038c	e5933440	 ldr         r3, [r3, #0x440]
  00390	e3130b01	 tst         r3, #1, 22
  00394	0a000007	 beq         |$LN9@Render|
  00398	e59d3024	 ldr         r3, [sp, #0x24]
  0039c	e2833018	 add         r3, r3, #0x18
  003a0	e5931000	 ldr         r1, [r3]
  003a4	e59f0040	 ldr         r0, [pc, #0x40]
  003a8	eb000000	 bl          NKDbgPrintfW
  003ac	e3a03001	 mov         r3, #1
  003b0	e58d3018	 str         r3, [sp, #0x18]
  003b4	ea000001	 b           |$LN10@Render|
  003b8		 |$LN9@Render|
  003b8	e3a03000	 mov         r3, #0
  003bc	e58d3018	 str         r3, [sp, #0x18]
  003c0		 |$LN10@Render|

; 445  :         m_pMidiStream->NoteDone(this);

  003c0	e59d1024	 ldr         r1, [sp, #0x24]
  003c4	e59d3024	 ldr         r3, [sp, #0x24]
  003c8	e2833008	 add         r3, r3, #8
  003cc	e5930000	 ldr         r0, [r3]
  003d0	eb000000	 bl          |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z|
  003d4		 |$LN1@Render|

; 446  :     }
; 447  : 
; 448  :     return pBufferLast;

  003d4	e59d3030	 ldr         r3, [sp, #0x30]
  003d8	e58d3008	 str         r3, [sp, #8]
  003dc		 |$LN5@Render|

; 449  : }

  003dc	e59d0008	 ldr         r0, [sp, #8]
  003e0	e28dd01c	 add         sp, sp, #0x1C
  003e4	e89d6000	 ldmia       sp, {sp, lr}
  003e8	e12fff1e	 bx          lr
  003ec		 |$LN14@Render|
  003ec		 |$LN15@Render|
  003ec	00000000	 DCD         |??_C@_1GO@GPNNNFCM@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAL?$AAa?$AAs?$AAt?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AAa?$AAf@|
  003f0		 |$LN16@Render|
  003f0	00000000	 DCD         |dpCurSettings|
  003f4		 |$LN17@Render|
  003f4	00000000	 DCD         |??_C@_1HC@ICNNALDK@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAN?$AAo?$AAt?$AAe?$AA?3?$AA?3?$AAR?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?0?$AA?5?$AAN?$AAo?$AAt?$AAe?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa@|
  003f8		 |$M37434|

			 ENDP  ; |?Render@CMidiNote@@QAAPAEPAE00@Z|, CMidiNote::Render

	EXPORT	|?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteMoveToFreeList
	IMPORT	|?Release@StreamContext@@QAAJXZ|	; StreamContext::Release
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37445| DCD	|$LN5@NoteDone|
	DCD	0x40000a03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteDone

; 110  :     {

  00000		 |$LN5@NoteDone|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37442|

; 111  :         NoteMoveToFreeList(pCMidiNote);

  0000c	e59d100c	 ldr         r1, [sp, #0xC]
  00010	e59d0008	 ldr         r0, [sp, #8]
  00014	eb000000	 bl          |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z|

; 112  :         Release();

  00018	e59d0008	 ldr         r0, [sp, #8]
  0001c	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 113  :     }

  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M37443|

			 ENDP  ; |?NoteDone@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteDone


  00000			 AREA	 |.pdata|, PDATA
|$T37452| DCD	|$LN11@NoteMoveTo|
	DCD	0x40002d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteMoveToFreeList

; 96   :     {

  00000		 |$LN11@NoteMoveTo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M37449|

; 97   :         PLIST_ENTRY pListEntry = &pCMidiNote->m_Link;

  00010	e59d301c	 ldr         r3, [sp, #0x1C]
  00014	e58d3000	 str         r3, [sp]

; 98   :         RemoveEntryList(pListEntry);

  00018	e59d3000	 ldr         r3, [sp]
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e2833004	 add         r3, r3, #4
  00028	e5932000	 ldr         r2, [r3]
  0002c	e59d3004	 ldr         r3, [sp, #4]
  00030	e5933000	 ldr         r3, [r3]
  00034	e5823000	 str         r3, [r2]
  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e2831004	 add         r1, r3, #4
  00040	e59d3004	 ldr         r3, [sp, #4]
  00044	e5933000	 ldr         r3, [r3]
  00048	e2832004	 add         r2, r3, #4
  0004c	e5913000	 ldr         r3, [r1]
  00050	e5823000	 str         r3, [r2]

; 99   :         InsertTailList(&m_FreeList,pListEntry);

  00054	e59d3018	 ldr         r3, [sp, #0x18]
  00058	e2833e5f	 add         r3, r3, #0x5F, 28
  0005c	e58d300c	 str         r3, [sp, #0xC]
  00060	e59d300c	 ldr         r3, [sp, #0xC]
  00064	e2833004	 add         r3, r3, #4
  00068	e5933000	 ldr         r3, [r3]
  0006c	e58d3008	 str         r3, [sp, #8]
  00070	e59d200c	 ldr         r2, [sp, #0xC]
  00074	e59d3000	 ldr         r3, [sp]
  00078	e5832000	 str         r2, [r3]
  0007c	e59d3000	 ldr         r3, [sp]
  00080	e2832004	 add         r2, r3, #4
  00084	e59d3008	 ldr         r3, [sp, #8]
  00088	e5823000	 str         r3, [r2]
  0008c	e59d2000	 ldr         r2, [sp]
  00090	e59d3008	 ldr         r3, [sp, #8]
  00094	e5832000	 str         r2, [r3]
  00098	e59d300c	 ldr         r3, [sp, #0xC]
  0009c	e2832004	 add         r2, r3, #4
  000a0	e59d3000	 ldr         r3, [sp]
  000a4	e5823000	 str         r3, [r2]

; 100  :     }

  000a8	e28dd010	 add         sp, sp, #0x10
  000ac	e89d6000	 ldmia       sp, {sp, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$M37450|

			 ENDP  ; |?NoteMoveToFreeList@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteMoveToFreeList


  00020			 AREA	 |.pdata|, PDATA
|$T37460| DCD	|$LN14@Render2|
	DCD	0x40007204
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midinote.cpp

  003f8			 AREA	 |.text|, CODE, ARM

  003f8		 |?Render2@CMidiNote@@QAAPAEPAE00@Z| PROC ; CMidiNote::Render2

; 460  : {

  003f8		 |$LN14@Render2|
  003f8	e1a0c00d	 mov         r12, sp
  003fc	e92d000f	 stmdb       sp!, {r0 - r3}
  00400	e92d5000	 stmdb       sp!, {r12, lr}
  00404	e24dd020	 sub         sp, sp, #0x20
  00408		 |$M37457|

; 461  :     // Cache values so compiler won't worry about aliasing
; 462  :     UINT32 Index            = m_Index;

  00408	e59d3028	 ldr         r3, [sp, #0x28]
  0040c	e2833018	 add         r3, r3, #0x18
  00410	e5933000	 ldr         r3, [r3]
  00414	e58d3000	 str         r3, [sp]

; 463  :     UINT32 IndexDelta       = m_IndexDelta;

  00418	e59d3028	 ldr         r3, [sp, #0x28]
  0041c	e283301c	 add         r3, r3, #0x1C
  00420	e5933000	 ldr         r3, [r3]
  00424	e58d3008	 str         r3, [sp, #8]

; 464  :     const INT16 * pSineTable= SineTable;

  00428	e59f318c	 ldr         r3, [pc, #0x18C]
  0042c	e58d3004	 str         r3, [sp, #4]

; 465  :     LONG fxpGain = m_fxpGain;

  00430	e59d3028	 ldr         r3, [sp, #0x28]
  00434	e2833024	 add         r3, r3, #0x24
  00438	e5933000	 ldr         r3, [r3]
  0043c	e58d300c	 str         r3, [sp, #0xC]
  00440		 |$LN9@Render2|

; 466  : 
; 467  :     while (pBuffer < pBufferEnd)

  00440	e59d202c	 ldr         r2, [sp, #0x2C]
  00444	e59d3030	 ldr         r3, [sp, #0x30]
  00448	e1520003	 cmp         r2, r3
  0044c	2a000050	 bcs         |$LN8@Render2|

; 468  :     {
; 469  :         // Index is in 8.24 format, where the top 8 bits index into the sine table and
; 470  :         // the lower 24 bits represent the fraction of where we sit between two adjacent
; 471  :         // samples, which we can use if we're doing linear interpolation
; 472  :         // I chose 8.24 format so that wrap around at the top of the table happens
; 473  :         // automatically without the need to do any ANDing.
; 474  : 
; 475  :         // Get an index into the sine table and look up the sample.
; 476  :         UINT32 TableIndex = Index>>24;

  00450	e59d3000	 ldr         r3, [sp]
  00454	e1a03c23	 mov         r3, r3, lsr #24
  00458	e58d3018	 str         r3, [sp, #0x18]

; 477  :         INT32 OutSamp0 = pSineTable[TableIndex];

  0045c	e59d1018	 ldr         r1, [sp, #0x18]
  00460	e3a03002	 mov         r3, #2
  00464	e0020391	 mul         r2, r1, r3
  00468	e59d3004	 ldr         r3, [sp, #4]
  0046c	e0833002	 add         r3, r3, r2
  00470	e1d330f0	 ldrsh       r3, [r3]
  00474	e58d3010	 str         r3, [sp, #0x10]

; 478  : 
; 479  : #if MIDI_OPTIMIZE_LINEAR_INTERPOLATE
; 480  :         // If we're doing linear interpolation, get the next sample also. Note that I don't
; 481  :         // need to worry about wrap around at the top of the table because the sine table has
; 482  :         // an extra value tacked onto the end to handle this special case.
; 483  :         INT32 NextSamp = pSineTable[TableIndex+1];
; 484  : 
; 485  :         // Now do the interpolation, adjusting the index to be in 24.8 format and throwing away
; 486  :         // the integer part (e.g. interpolate 256 points between samples).
; 487  :         OutSamp0 += ( (NextSamp - OutSamp0) * ((Index>>16)&0x00FF) ) >> 8;
; 488  : #endif
; 489  : 
; 490  :         // Increment the index to move to the next sample
; 491  :         // and keep within the valid range
; 492  :         Index += IndexDelta;

  00478	e59d2000	 ldr         r2, [sp]
  0047c	e59d3008	 ldr         r3, [sp, #8]
  00480	e0823003	 add         r3, r2, r3
  00484	e58d3000	 str         r3, [sp]

; 493  : 
; 494  :         // Volume!
; 495  :         OutSamp0 = (OutSamp0 * fxpGain) >> VOLSHIFT;

  00488	e59d2010	 ldr         r2, [sp, #0x10]
  0048c	e59d300c	 ldr         r3, [sp, #0xC]
  00490	e0030392	 mul         r3, r2, r3
  00494	e1a03843	 mov         r3, r3, asr #16
  00498	e58d3010	 str         r3, [sp, #0x10]

; 496  : #if (OUTCHANNELS==2)
; 497  :         INT32 OutSamp1;
; 498  :         OutSamp1=OutSamp0;

  0049c	e59d3010	 ldr         r3, [sp, #0x10]
  004a0	e58d3014	 str         r3, [sp, #0x14]

; 499  :         if (pBuffer < pBufferLast)

  004a4	e59d202c	 ldr         r2, [sp, #0x2C]
  004a8	e59d3034	 ldr         r3, [sp, #0x34]
  004ac	e1520003	 cmp         r2, r3
  004b0	2a000028	 bcs         |$LN7@Render2|

; 500  :         {
; 501  :             OutSamp0 += ((HWSAMPLE *)pBuffer)[0];

  004b4	e59d302c	 ldr         r3, [sp, #0x2C]
  004b8	e1d320f0	 ldrsh       r2, [r3]
  004bc	e59d3010	 ldr         r3, [sp, #0x10]
  004c0	e0833002	 add         r3, r3, r2
  004c4	e58d3010	 str         r3, [sp, #0x10]

; 502  :             OutSamp1 += ((HWSAMPLE *)pBuffer)[1];

  004c8	e59d302c	 ldr         r3, [sp, #0x2C]
  004cc	e2833002	 add         r3, r3, #2
  004d0	e1d320f0	 ldrsh       r2, [r3]
  004d4	e59d3014	 ldr         r3, [sp, #0x14]
  004d8	e0833002	 add         r3, r3, r2
  004dc	e58d3014	 str         r3, [sp, #0x14]

; 503  : #if USE_MIX_SATURATE
; 504  :             // Handle saturation
; 505  :             if (OutSamp0>AUDIO_SAMPLE_MAX)

  004e0	e59d2010	 ldr         r2, [sp, #0x10]
  004e4	e3a03c7f	 mov         r3, #0x7F, 24
  004e8	e38330ff	 orr         r3, r3, #0xFF
  004ec	e1520003	 cmp         r2, r3
  004f0	da000003	 ble         |$LN6@Render2|

; 506  :             {
; 507  :                 OutSamp0=AUDIO_SAMPLE_MAX;

  004f4	e3a03c7f	 mov         r3, #0x7F, 24
  004f8	e38330ff	 orr         r3, r3, #0xFF
  004fc	e58d3010	 str         r3, [sp, #0x10]
  00500	ea000005	 b           |$LN5@Render2|
  00504		 |$LN6@Render2|

; 508  :             }
; 509  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)

  00504	e59d3010	 ldr         r3, [sp, #0x10]
  00508	e3730902	 cmn         r3, #2, 18
  0050c	aa000002	 bge         |$LN4@Render2|

; 510  :             {
; 511  :                 OutSamp0=AUDIO_SAMPLE_MIN;

  00510	e3e030ff	 mvn         r3, #0xFF
  00514	e1a03383	 mov         r3, r3, lsl #7
  00518	e58d3010	 str         r3, [sp, #0x10]
  0051c		 |$LN4@Render2|
  0051c		 |$LN5@Render2|

; 512  :             }
; 513  :             if (OutSamp1>AUDIO_SAMPLE_MAX)

  0051c	e59d2014	 ldr         r2, [sp, #0x14]
  00520	e3a03c7f	 mov         r3, #0x7F, 24
  00524	e38330ff	 orr         r3, r3, #0xFF
  00528	e1520003	 cmp         r2, r3
  0052c	da000003	 ble         |$LN3@Render2|

; 514  :             {
; 515  :                 OutSamp1=AUDIO_SAMPLE_MAX;

  00530	e3a03c7f	 mov         r3, #0x7F, 24
  00534	e38330ff	 orr         r3, r3, #0xFF
  00538	e58d3014	 str         r3, [sp, #0x14]
  0053c	ea000005	 b           |$LN2@Render2|
  00540		 |$LN3@Render2|

; 516  :             }
; 517  :             else if (OutSamp1<AUDIO_SAMPLE_MIN)

  00540	e59d3014	 ldr         r3, [sp, #0x14]
  00544	e3730902	 cmn         r3, #2, 18
  00548	aa000002	 bge         |$LN1@Render2|

; 518  :             {
; 519  :                 OutSamp1=AUDIO_SAMPLE_MIN;

  0054c	e3e030ff	 mvn         r3, #0xFF
  00550	e1a03383	 mov         r3, r3, lsl #7
  00554	e58d3014	 str         r3, [sp, #0x14]
  00558		 |$LN1@Render2|
  00558		 |$LN2@Render2|
  00558		 |$LN7@Render2|

; 520  :             }
; 521  : #endif
; 522  :         }
; 523  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;

  00558	e59d3010	 ldr         r3, [sp, #0x10]
  0055c	e1a02803	 mov         r2, r3, lsl #16
  00560	e1a02842	 mov         r2, r2, asr #16
  00564	e59d302c	 ldr         r3, [sp, #0x2C]
  00568	e1c320b0	 strh        r2, [r3]

; 524  :         ((HWSAMPLE *)pBuffer)[1] = (HWSAMPLE)OutSamp1;

  0056c	e59d3014	 ldr         r3, [sp, #0x14]
  00570	e1a02803	 mov         r2, r3, lsl #16
  00574	e1a02842	 mov         r2, r2, asr #16
  00578	e59d302c	 ldr         r3, [sp, #0x2C]
  0057c	e2833002	 add         r3, r3, #2
  00580	e1c320b0	 strh        r2, [r3]

; 525  :         pBuffer += 2*sizeof(HWSAMPLE);

  00584	e59d302c	 ldr         r3, [sp, #0x2C]
  00588	e2833004	 add         r3, r3, #4
  0058c	e58d302c	 str         r3, [sp, #0x2C]

; 526  : #else
; 527  :         if (pBuffer<pBufferLast)
; 528  :         {
; 529  :             // Store/sum to the output buffer
; 530  :             OutSamp0 += *(HWSAMPLE *)pBuffer;
; 531  : 
; 532  : #if USE_MIX_SATURATE
; 533  :             // Handle saturation
; 534  :             if (OutSamp0>AUDIO_SAMPLE_MAX)
; 535  :             {
; 536  :                 OutSamp0=AUDIO_SAMPLE_MAX;
; 537  :             }
; 538  :             else if (OutSamp0<AUDIO_SAMPLE_MIN)
; 539  :             {
; 540  :                 OutSamp0=AUDIO_SAMPLE_MIN;
; 541  :             }
; 542  : #endif
; 543  :         }
; 544  :         ((HWSAMPLE *)pBuffer)[0] = (HWSAMPLE)OutSamp0;
; 545  :         pBuffer+=sizeof(HWSAMPLE);
; 546  : #endif
; 547  :     }

  00590	eaffffaa	 b           |$LN9@Render2|
  00594		 |$LN8@Render2|

; 548  : 
; 549  :     // Save cached settings that might have changed in the inner loop
; 550  :     m_Index = Index;

  00594	e59d3028	 ldr         r3, [sp, #0x28]
  00598	e2832018	 add         r2, r3, #0x18
  0059c	e59d3000	 ldr         r3, [sp]
  005a0	e5823000	 str         r3, [r2]

; 551  : 
; 552  :     return pBuffer;

  005a4	e59d302c	 ldr         r3, [sp, #0x2C]
  005a8	e58d301c	 str         r3, [sp, #0x1C]

; 553  : }

  005ac	e59d001c	 ldr         r0, [sp, #0x1C]
  005b0	e28dd020	 add         sp, sp, #0x20
  005b4	e89d6000	 ldmia       sp, {sp, lr}
  005b8	e12fff1e	 bx          lr
  005bc		 |$LN15@Render2|
  005bc		 |$LN16@Render2|
  005bc	00000000	 DCD         |?SineTable@CMidiNote@@0QBFB|
  005c0		 |$M37458|

			 ENDP  ; |?Render2@CMidiNote@@QAAPAEPAE00@Z|, CMidiNote::Render2

	END
