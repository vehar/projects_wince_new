; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\input.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?Open@InputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; InputStreamContext::Open
	IMPORT	|?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open

  00000			 AREA	 |.pdata|, PDATA
|$T37359| DCD	|$LN5@Open|
	DCD	0x40001204
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\input.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@InputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; InputStreamContext::Open

; 27   : {

  00000		 |$LN5@Open|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M37356|

; 28   :     HRESULT Result;
; 29   : 
; 30   :     Result = WaveStreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  00010	e59d3020	 ldr         r3, [sp, #0x20]
  00014	e59d201c	 ldr         r2, [sp, #0x1C]
  00018	e59d1018	 ldr         r1, [sp, #0x18]
  0001c	e59d0014	 ldr         r0, [sp, #0x14]
  00020	eb000000	 bl          |?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  00024	e58d0008	 str         r0, [sp, #8]
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e58d3000	 str         r3, [sp]

; 31   : 
; 32   :     return Result;

  00030	e59d3000	 ldr         r3, [sp]
  00034	e58d3004	 str         r3, [sp, #4]

; 33   : }

  00038	e59d0004	 ldr         r0, [sp, #4]
  0003c	e28dd00c	 add         sp, sp, #0xC
  00040	e89d6000	 ldmia       sp, {sp, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M37357|

			 ENDP  ; |?Open@InputStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, InputStreamContext::Open

	EXPORT	|?SetRate@InputStreamContext@@UAAKK@Z|	; InputStreamContext::SetRate
	IMPORT	|__rt_udiv64by64|

  00008			 AREA	 |.pdata|, PDATA
|$T37366| DCD	|$LN5@SetRate|
	DCD	0x40005104
; Function compile flags: /Odtp

  00048			 AREA	 |.text|, CODE, ARM

  00048		 |?SetRate@InputStreamContext@@UAAKK@Z| PROC ; InputStreamContext::SetRate

; 44   : {

  00048		 |$LN5@SetRate|
  00048	e1a0c00d	 mov         r12, sp
  0004c	e92d0003	 stmdb       sp!, {r0, r1}
  00050	e92d5000	 stmdb       sp!, {r12, lr}
  00054	e24dd018	 sub         sp, sp, #0x18
  00058		 |$M37363|

; 45   :     UINT64 Delta;
; 46   : 
; 47   :     m_dwMultiplier = dwMultiplier;

  00058	e59d3020	 ldr         r3, [sp, #0x20]
  0005c	e2832074	 add         r2, r3, #0x74
  00060	e59d3024	 ldr         r3, [sp, #0x24]
  00064	e5823000	 str         r3, [r2]

; 48   : 
; 49   :     Delta = (m_WaveFormat.nSamplesPerSec * m_dwMultiplier);

  00068	e59d3020	 ldr         r3, [sp, #0x20]
  0006c	e2830028	 add         r0, r3, #0x28
  00070	e59d3020	 ldr         r3, [sp, #0x20]
  00074	e2831074	 add         r1, r3, #0x74
  00078	e5d03003	 ldrb        r3, [r0, #3]
  0007c	e1a02403	 mov         r2, r3, lsl #8
  00080	e5d03002	 ldrb        r3, [r0, #2]
  00084	e1833002	 orr         r3, r3, r2
  00088	e1a02403	 mov         r2, r3, lsl #8
  0008c	e5d03001	 ldrb        r3, [r0, #1]
  00090	e1833002	 orr         r3, r3, r2
  00094	e1a02403	 mov         r2, r3, lsl #8
  00098	e5d03000	 ldrb        r3, [r0]
  0009c	e1832002	 orr         r2, r3, r2
  000a0	e5913000	 ldr         r3, [r1]
  000a4	e0030392	 mul         r3, r2, r3
  000a8	e58d3000	 str         r3, [sp]
  000ac	e3a03000	 mov         r3, #0
  000b0	e58d3004	 str         r3, [sp, #4]

; 50   :     Delta >>= 16;

  000b4	e59d2000	 ldr         r2, [sp]
  000b8	e59d3004	 ldr         r3, [sp, #4]
  000bc	e58d300c	 str         r3, [sp, #0xC]
  000c0	e1a02822	 mov         r2, r2, lsr #16
  000c4	e59d300c	 ldr         r3, [sp, #0xC]
  000c8	e1a03803	 mov         r3, r3, lsl #16
  000cc	e1832002	 orr         r2, r3, r2
  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e1a03823	 mov         r3, r3, lsr #16
  000d8	e58d2000	 str         r2, [sp]
  000dc	e58d3004	 str         r3, [sp, #4]

; 51   :     Delta = ((UINT32)(((1i64<<32)/Delta)+1));

  000e0	e3a00000	 mov         r0, #0
  000e4	e3a01001	 mov         r1, #1
  000e8	e59d2000	 ldr         r2, [sp]
  000ec	e59d3004	 ldr         r3, [sp, #4]
  000f0	eb000000	 bl          __rt_udiv64by64
  000f4	e2803001	 add         r3, r0, #1
  000f8	e58d3000	 str         r3, [sp]
  000fc	e3a03000	 mov         r3, #0
  00100	e58d3004	 str         r3, [sp, #4]

; 52   :     Delta = (Delta * SAMPLERATE);

  00104	e59d3000	 ldr         r3, [sp]
  00108	e59d2004	 ldr         r2, [sp, #4]
  0010c	e58d3010	 str         r3, [sp, #0x10]
  00110	e3a03b2b	 mov         r3, #0x2B, 22
  00114	e3833044	 orr         r3, r3, #0x44
  00118	e0000392	 mul         r0, r2, r3
  0011c	e59d1010	 ldr         r1, [sp, #0x10]
  00120	e3a03b2b	 mov         r3, #0x2B, 22
  00124	e3833044	 orr         r3, r3, #0x44
  00128	e0832391	 umull       r2, r3, r1, r3
  0012c	e0803003	 add         r3, r0, r3
  00130	e58d2000	 str         r2, [sp]
  00134	e58d3004	 str         r3, [sp, #4]

; 53   :     Delta >>= DELTAINT;

  00138	e59d2000	 ldr         r2, [sp]
  0013c	e59d3004	 ldr         r3, [sp, #4]
  00140	e58d3014	 str         r3, [sp, #0x14]
  00144	e1a028a2	 mov         r2, r2, lsr #17
  00148	e59d3014	 ldr         r3, [sp, #0x14]
  0014c	e1a03783	 mov         r3, r3, lsl #15
  00150	e1832002	 orr         r2, r3, r2
  00154	e59d3014	 ldr         r3, [sp, #0x14]
  00158	e1a038a3	 mov         r3, r3, lsr #17
  0015c	e58d2000	 str         r2, [sp]
  00160	e58d3004	 str         r3, [sp, #4]

; 54   : 
; 55   :     m_DeltaT = (DWORD)Delta;

  00164	e59d2000	 ldr         r2, [sp]
  00168	e59d3020	 ldr         r3, [sp, #0x20]
  0016c	e2833070	 add         r3, r3, #0x70
  00170	e5832000	 str         r2, [r3]

; 56   : 
; 57   :     return MMSYSERR_NOERROR;

  00174	e3a03000	 mov         r3, #0
  00178	e58d3008	 str         r3, [sp, #8]

; 58   : }

  0017c	e59d0008	 ldr         r0, [sp, #8]
  00180	e28dd018	 add         sp, sp, #0x18
  00184	e89d6000	 ldmia       sp, {sp, lr}
  00188	e12fff1e	 bx          lr
  0018c		 |$M37364|

			 ENDP  ; |?SetRate@InputStreamContext@@UAAKK@Z|, InputStreamContext::SetRate

	EXPORT	|?Stop@InputStreamContext@@UAAKXZ|	; InputStreamContext::Stop
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|?Stop@StreamContext@@UAAKXZ|		; StreamContext::Stop

  00010			 AREA	 |.pdata|, PDATA
|$T37372| DCD	|$LN6@Stop|
	DCD	0x40001a04
; Function compile flags: /Odtp

  0018c			 AREA	 |.text|, CODE, ARM

  0018c		 |?Stop@InputStreamContext@@UAAKXZ| PROC ; InputStreamContext::Stop

; 68   : {

  0018c		 |$LN6@Stop|
  0018c	e1a0c00d	 mov         r12, sp
  00190	e92d0001	 stmdb       sp!, {r0}
  00194	e92d5000	 stmdb       sp!, {r12, lr}
  00198	e24dd004	 sub         sp, sp, #4
  0019c		 |$M37369|

; 69   :     // Stop the stream
; 70   :     WaveStreamContext::Stop();

  0019c	e59d000c	 ldr         r0, [sp, #0xC]
  001a0	eb000000	 bl          |?Stop@StreamContext@@UAAKXZ|

; 71   : 
; 72   :     // Return any partially filled buffers to the client
; 73   :     if ((m_lpWaveHdrCurrent) && (m_lpWaveHdrCurrent->dwBytesRecorded>0))

  001a4	e59d300c	 ldr         r3, [sp, #0xC]
  001a8	e283303c	 add         r3, r3, #0x3C
  001ac	e5933000	 ldr         r3, [r3]
  001b0	e3530000	 cmp         r3, #0
  001b4	0a000008	 beq         |$LN1@Stop|
  001b8	e59d300c	 ldr         r3, [sp, #0xC]
  001bc	e283303c	 add         r3, r3, #0x3C
  001c0	e5933000	 ldr         r3, [r3]
  001c4	e2833008	 add         r3, r3, #8
  001c8	e5933000	 ldr         r3, [r3]
  001cc	e3530000	 cmp         r3, #0
  001d0	9a000001	 bls         |$LN1@Stop|

; 74   :     {
; 75   :         GetNextBuffer();

  001d4	e59d000c	 ldr         r0, [sp, #0xC]
  001d8	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  001dc		 |$LN1@Stop|

; 76   :     }
; 77   : 
; 78   :     return MMSYSERR_NOERROR;

  001dc	e3a03000	 mov         r3, #0
  001e0	e58d3000	 str         r3, [sp]

; 79   : }

  001e4	e59d0000	 ldr         r0, [sp]
  001e8	e28dd004	 add         sp, sp, #4
  001ec	e89d6000	 ldmia       sp, {sp, lr}
  001f0	e12fff1e	 bx          lr
  001f4		 |$M37370|

			 ENDP  ; |?Stop@InputStreamContext@@UAAKXZ|, InputStreamContext::Stop

	EXPORT	|?Render2@InputStreamContext@@UAAPAEPAE00@Z| ; InputStreamContext::Render2

  00018			 AREA	 |.pdata|, PDATA
|$T37378| DCD	|$LN19@Render2|
	DCD	0x4000e004
; Function compile flags: /Odtp

  001f4			 AREA	 |.text|, CODE, ARM

  001f4		 |?Render2@InputStreamContext@@UAAPAEPAE00@Z| PROC ; InputStreamContext::Render2

; 90   : {

  001f4		 |$LN19@Render2|
  001f4	e1a0c00d	 mov         r12, sp
  001f8	e92d000f	 stmdb       sp!, {r0 - r3}
  001fc	e92d5000	 stmdb       sp!, {r12, lr}
  00200	e24dd038	 sub         sp, sp, #0x38
  00204		 |$M37375|

; 91   :     PBYTE pCurrData = m_lpCurrData;

  00204	e59d3040	 ldr         r3, [sp, #0x40]
  00208	e2833044	 add         r3, r3, #0x44
  0020c	e5933000	 ldr         r3, [r3]
  00210	e58d3020	 str         r3, [sp, #0x20]

; 92   :     PBYTE pCurrDataEnd = m_lpCurrDataEnd;

  00214	e59d3040	 ldr         r3, [sp, #0x40]
  00218	e2833048	 add         r3, r3, #0x48
  0021c	e5933000	 ldr         r3, [r3]
  00220	e58d3028	 str         r3, [sp, #0x28]

; 93   : 
; 94   :     LONG CurrT = m_CurrT;

  00224	e59d3040	 ldr         r3, [sp, #0x40]
  00228	e2833088	 add         r3, r3, #0x88
  0022c	e5933000	 ldr         r3, [r3]
  00230	e58d301c	 str         r3, [sp, #0x1C]

; 95   :     LONG DeltaT = m_DeltaT;

  00234	e59d3040	 ldr         r3, [sp, #0x40]
  00238	e2833070	 add         r3, r3, #0x70
  0023c	e5933000	 ldr         r3, [r3]
  00240	e58d3014	 str         r3, [sp, #0x14]

; 96   :     PCM_TYPE SampleType = m_SampleType;

  00244	e59d3040	 ldr         r3, [sp, #0x40]
  00248	e2833068	 add         r3, r3, #0x68
  0024c	e5933000	 ldr         r3, [r3]
  00250	e58d3010	 str         r3, [sp, #0x10]

; 97   : 
; 98   :     LONG CurrSamp0 = m_CurrSamp[0];

  00254	e59d3040	 ldr         r3, [sp, #0x40]
  00258	e2833080	 add         r3, r3, #0x80
  0025c	e5933000	 ldr         r3, [r3]
  00260	e58d300c	 str         r3, [sp, #0xC]

; 99   :     LONG PrevSamp0 = m_PrevSamp[0];

  00264	e59d3040	 ldr         r3, [sp, #0x40]
  00268	e2833078	 add         r3, r3, #0x78
  0026c	e5933000	 ldr         r3, [r3]
  00270	e58d3024	 str         r3, [sp, #0x24]

; 100  :     LONG CurrSamp1 = m_CurrSamp[1];

  00274	e59d3040	 ldr         r3, [sp, #0x40]
  00278	e2833084	 add         r3, r3, #0x84
  0027c	e5933000	 ldr         r3, [r3]
  00280	e58d3008	 str         r3, [sp, #8]

; 101  :     LONG PrevSamp1 = m_PrevSamp[1];

  00284	e59d3040	 ldr         r3, [sp, #0x40]
  00288	e283307c	 add         r3, r3, #0x7C
  0028c	e5933000	 ldr         r3, [r3]
  00290	e58d3018	 str         r3, [sp, #0x18]
  00294		 |$LN14@Render2|

; 102  :     LONG InSamp0;
; 103  :     LONG InSamp1;
; 104  : 
; 105  :     for (;;)
; 106  :     {
; 107  :         // Make sure we have a place to put the data
; 108  :         if (pCurrData>=pCurrDataEnd)

  00294	e59d2020	 ldr         r2, [sp, #0x20]
  00298	e59d3028	 ldr         r3, [sp, #0x28]
  0029c	e1520003	 cmp         r2, r3
  002a0	3a000001	 bcc         |$LN12@Render2|
  002a4	ea000078	 b           |$LN11@Render2|

; 109  :         {
; 110  :             goto Exit;

  002a8	ea000077	 b           |$Exit$37290|
  002ac		 |$LN12@Render2|
  002ac		 |$LN10@Render2|

; 111  :         }
; 112  : 
; 113  :         // Get the next sample
; 114  :         while (CurrT >= DELTA_OVERFLOW)

  002ac	e59d301c	 ldr         r3, [sp, #0x1C]
  002b0	e3530902	 cmp         r3, #2, 18
  002b4	ba000017	 blt         |$LN9@Render2|

; 115  :         {
; 116  :             if (pBuffer>=pBufferEnd)

  002b8	e59d2044	 ldr         r2, [sp, #0x44]
  002bc	e59d3048	 ldr         r3, [sp, #0x48]
  002c0	e1520003	 cmp         r2, r3
  002c4	3a000001	 bcc         |$LN8@Render2|
  002c8	ea00006f	 b           |$LN7@Render2|

; 117  :             {
; 118  :                 goto Exit;

  002cc	ea00006e	 b           |$Exit$37290|
  002d0		 |$LN8@Render2|

; 119  :             }
; 120  : 
; 121  :             PrevSamp0 = CurrSamp0;

  002d0	e59d300c	 ldr         r3, [sp, #0xC]
  002d4	e58d3024	 str         r3, [sp, #0x24]

; 122  :             PrevSamp1 = CurrSamp1;

  002d8	e59d3008	 ldr         r3, [sp, #8]
  002dc	e58d3018	 str         r3, [sp, #0x18]

; 123  : 
; 124  :             CurrSamp0 = ((HWSAMPLE *)pBuffer)[0];

  002e0	e59d3044	 ldr         r3, [sp, #0x44]
  002e4	e1d330f0	 ldrsh       r3, [r3]
  002e8	e58d300c	 str         r3, [sp, #0xC]

; 125  :             CurrSamp1 = ((HWSAMPLE *)pBuffer)[1];

  002ec	e59d3044	 ldr         r3, [sp, #0x44]
  002f0	e2833002	 add         r3, r3, #2
  002f4	e1d330f0	 ldrsh       r3, [r3]
  002f8	e58d3008	 str         r3, [sp, #8]

; 126  :             pBuffer += 2*sizeof(HWSAMPLE);

  002fc	e59d3044	 ldr         r3, [sp, #0x44]
  00300	e2833004	 add         r3, r3, #4
  00304	e58d3044	 str         r3, [sp, #0x44]

; 127  : 
; 128  :             CurrT -= DELTA_OVERFLOW;

  00308	e59d301c	 ldr         r3, [sp, #0x1C]
  0030c	e2433902	 sub         r3, r3, #2, 18
  00310	e58d301c	 str         r3, [sp, #0x1C]

; 129  :         }

  00314	eaffffe4	 b           |$LN10@Render2|
  00318		 |$LN9@Render2|

; 130  : 
; 131  :         InSamp0 = (PrevSamp0 + ((CurrT * (CurrSamp0 - PrevSamp0)) >> DELTAFRAC));

  00318	e59d200c	 ldr         r2, [sp, #0xC]
  0031c	e59d3024	 ldr         r3, [sp, #0x24]
  00320	e0423003	 sub         r3, r2, r3
  00324	e59d201c	 ldr         r2, [sp, #0x1C]
  00328	e0030392	 mul         r3, r2, r3
  0032c	e1a027c3	 mov         r2, r3, asr #15
  00330	e59d3024	 ldr         r3, [sp, #0x24]
  00334	e0833002	 add         r3, r3, r2
  00338	e58d3000	 str         r3, [sp]

; 132  :         InSamp1 = (PrevSamp1 + ((CurrT * (CurrSamp1 - PrevSamp1)) >> DELTAFRAC));

  0033c	e59d2008	 ldr         r2, [sp, #8]
  00340	e59d3018	 ldr         r3, [sp, #0x18]
  00344	e0423003	 sub         r3, r2, r3
  00348	e59d201c	 ldr         r2, [sp, #0x1C]
  0034c	e0030392	 mul         r3, r2, r3
  00350	e1a027c3	 mov         r2, r3, asr #15
  00354	e59d3018	 ldr         r3, [sp, #0x18]
  00358	e0833002	 add         r3, r3, r2
  0035c	e58d3004	 str         r3, [sp, #4]

; 133  :         CurrT += DeltaT;

  00360	e59d201c	 ldr         r2, [sp, #0x1C]
  00364	e59d3014	 ldr         r3, [sp, #0x14]
  00368	e0823003	 add         r3, r2, r3
  0036c	e58d301c	 str         r3, [sp, #0x1C]

; 134  : 
; 135  :         // Apply input gain
; 136  :         // InSamp0 = (InSamp0 * fxpGain[0]) >> 16;
; 137  :         // InSamp1 = (InSamp1 * fxpGain[1]) >> 16;
; 138  : 
; 139  :         PPCM_SAMPLE pSampleDest = (PPCM_SAMPLE)pCurrData;

  00370	e59d3020	 ldr         r3, [sp, #0x20]
  00374	e58d302c	 str         r3, [sp, #0x2C]

; 140  :         switch (m_SampleType)

  00378	e59d3040	 ldr         r3, [sp, #0x40]
  0037c	e2833068	 add         r3, r3, #0x68
  00380	e5933000	 ldr         r3, [r3]
  00384	e58d3034	 str         r3, [sp, #0x34]
  00388	e59d3034	 ldr         r3, [sp, #0x34]
  0038c	e3530001	 cmp         r3, #1
  00390	0a000022	 beq         |$LN2@Render2|
  00394	e59d3034	 ldr         r3, [sp, #0x34]
  00398	e3530002	 cmp         r3, #2
  0039c	0a00000e	 beq         |$LN3@Render2|
  003a0	e59d3034	 ldr         r3, [sp, #0x34]
  003a4	e3530003	 cmp         r3, #3
  003a8	0a000028	 beq         |$LN1@Render2|

; 141  :         {
; 142  :         case PCM_TYPE_M8:
; 143  :         default:
; 144  :             pSampleDest->m8.sample = (UINT8)( ((InSamp0+InSamp1) >> 9) + 128);

  003ac	e59d2000	 ldr         r2, [sp]
  003b0	e59d3004	 ldr         r3, [sp, #4]
  003b4	e0823003	 add         r3, r2, r3
  003b8	e1a034c3	 mov         r3, r3, asr #9
  003bc	e2833080	 add         r3, r3, #0x80
  003c0	e20320ff	 and         r2, r3, #0xFF
  003c4	e59d302c	 ldr         r3, [sp, #0x2C]
  003c8	e5c32000	 strb        r2, [r3]

; 145  :             pCurrData  += 1;

  003cc	e59d3020	 ldr         r3, [sp, #0x20]
  003d0	e2833001	 add         r3, r3, #1
  003d4	e58d3020	 str         r3, [sp, #0x20]

; 146  :             break;

  003d8	ea00002a	 b           |$LN5@Render2|
  003dc		 |$LN3@Render2|

; 147  : 
; 148  :         case PCM_TYPE_S8:
; 149  :             pSampleDest->s8.sample_left  = (UINT8)((InSamp0 >> 8) + 128);

  003dc	e59d3000	 ldr         r3, [sp]
  003e0	e1a03443	 mov         r3, r3, asr #8
  003e4	e2833080	 add         r3, r3, #0x80
  003e8	e20320ff	 and         r2, r3, #0xFF
  003ec	e59d302c	 ldr         r3, [sp, #0x2C]
  003f0	e5c32000	 strb        r2, [r3]

; 150  :             pSampleDest->s8.sample_right = (UINT8)((InSamp1 >> 8) + 128);

  003f4	e59d3004	 ldr         r3, [sp, #4]
  003f8	e1a03443	 mov         r3, r3, asr #8
  003fc	e2833080	 add         r3, r3, #0x80
  00400	e20320ff	 and         r2, r3, #0xFF
  00404	e59d302c	 ldr         r3, [sp, #0x2C]
  00408	e2833001	 add         r3, r3, #1
  0040c	e5c32000	 strb        r2, [r3]

; 151  :             pCurrData  += 2;

  00410	e59d3020	 ldr         r3, [sp, #0x20]
  00414	e2833002	 add         r3, r3, #2
  00418	e58d3020	 str         r3, [sp, #0x20]

; 152  :             break;

  0041c	ea000019	 b           |$LN5@Render2|
  00420		 |$LN2@Render2|

; 153  : 
; 154  :         case PCM_TYPE_M16:
; 155  :             pSampleDest->m16.sample = (INT16)((InSamp0+InSamp1)>>1);

  00420	e59d2000	 ldr         r2, [sp]
  00424	e59d3004	 ldr         r3, [sp, #4]
  00428	e0823003	 add         r3, r2, r3
  0042c	e1a030c3	 mov         r3, r3, asr #1
  00430	e1a02803	 mov         r2, r3, lsl #16
  00434	e1a02842	 mov         r2, r2, asr #16
  00438	e59d302c	 ldr         r3, [sp, #0x2C]
  0043c	e1c320b0	 strh        r2, [r3]

; 156  :             pCurrData  += 2;

  00440	e59d3020	 ldr         r3, [sp, #0x20]
  00444	e2833002	 add         r3, r3, #2
  00448	e58d3020	 str         r3, [sp, #0x20]

; 157  :             break;

  0044c	ea00000d	 b           |$LN5@Render2|
  00450		 |$LN1@Render2|

; 158  : 
; 159  :         case PCM_TYPE_S16:
; 160  :             pSampleDest->s16.sample_left  = (INT16)InSamp0;

  00450	e59d3000	 ldr         r3, [sp]
  00454	e1a02803	 mov         r2, r3, lsl #16
  00458	e1a02842	 mov         r2, r2, asr #16
  0045c	e59d302c	 ldr         r3, [sp, #0x2C]
  00460	e1c320b0	 strh        r2, [r3]

; 161  :             pSampleDest->s16.sample_right = (INT16)InSamp1;

  00464	e59d3004	 ldr         r3, [sp, #4]
  00468	e1a02803	 mov         r2, r3, lsl #16
  0046c	e1a02842	 mov         r2, r2, asr #16
  00470	e59d302c	 ldr         r3, [sp, #0x2C]
  00474	e2833002	 add         r3, r3, #2
  00478	e1c320b0	 strh        r2, [r3]

; 162  :             pCurrData  += 4;

  0047c	e59d3020	 ldr         r3, [sp, #0x20]
  00480	e2833004	 add         r3, r3, #4
  00484	e58d3020	 str         r3, [sp, #0x20]
  00488		 |$LN5@Render2|

; 163  :             break;
; 164  :         }
; 165  :     }

  00488	eaffff81	 b           |$LN14@Render2|
  0048c		 |$LN7@Render2|
  0048c		 |$LN11@Render2|
  0048c		 |$Exit$37290|

; 166  : 
; 167  : Exit:
; 168  :     m_lpWaveHdrCurrent->dwBytesRecorded += (pCurrData-m_lpCurrData);

  0048c	e59d3040	 ldr         r3, [sp, #0x40]
  00490	e283303c	 add         r3, r3, #0x3C
  00494	e5933000	 ldr         r3, [r3]
  00498	e2831008	 add         r1, r3, #8
  0049c	e59d3040	 ldr         r3, [sp, #0x40]
  004a0	e2833044	 add         r3, r3, #0x44
  004a4	e59d2020	 ldr         r2, [sp, #0x20]
  004a8	e5933000	 ldr         r3, [r3]
  004ac	e0422003	 sub         r2, r2, r3
  004b0	e5913000	 ldr         r3, [r1]
  004b4	e0832002	 add         r2, r3, r2
  004b8	e59d3040	 ldr         r3, [sp, #0x40]
  004bc	e283303c	 add         r3, r3, #0x3C
  004c0	e5933000	 ldr         r3, [r3]
  004c4	e2833008	 add         r3, r3, #8
  004c8	e5832000	 str         r2, [r3]

; 169  :     m_dwByteCount += (pCurrData-m_lpCurrData);

  004cc	e59d3040	 ldr         r3, [sp, #0x40]
  004d0	e283104c	 add         r1, r3, #0x4C
  004d4	e59d3040	 ldr         r3, [sp, #0x40]
  004d8	e2833044	 add         r3, r3, #0x44
  004dc	e59d2020	 ldr         r2, [sp, #0x20]
  004e0	e5933000	 ldr         r3, [r3]
  004e4	e0422003	 sub         r2, r2, r3
  004e8	e5913000	 ldr         r3, [r1]
  004ec	e0832002	 add         r2, r3, r2
  004f0	e59d3040	 ldr         r3, [sp, #0x40]
  004f4	e283304c	 add         r3, r3, #0x4C
  004f8	e5832000	 str         r2, [r3]

; 170  :     m_lpCurrData = pCurrData;

  004fc	e59d3040	 ldr         r3, [sp, #0x40]
  00500	e2832044	 add         r2, r3, #0x44
  00504	e59d3020	 ldr         r3, [sp, #0x20]
  00508	e5823000	 str         r3, [r2]

; 171  :     m_CurrT = CurrT;

  0050c	e59d3040	 ldr         r3, [sp, #0x40]
  00510	e2832088	 add         r2, r3, #0x88
  00514	e59d301c	 ldr         r3, [sp, #0x1C]
  00518	e5823000	 str         r3, [r2]

; 172  :     m_PrevSamp[0] = PrevSamp0;

  0051c	e59d3040	 ldr         r3, [sp, #0x40]
  00520	e2832078	 add         r2, r3, #0x78
  00524	e59d3024	 ldr         r3, [sp, #0x24]
  00528	e5823000	 str         r3, [r2]

; 173  :     m_CurrSamp[0] = CurrSamp0;

  0052c	e59d3040	 ldr         r3, [sp, #0x40]
  00530	e2832080	 add         r2, r3, #0x80
  00534	e59d300c	 ldr         r3, [sp, #0xC]
  00538	e5823000	 str         r3, [r2]

; 174  :     m_PrevSamp[1] = PrevSamp1;

  0053c	e59d3040	 ldr         r3, [sp, #0x40]
  00540	e283207c	 add         r2, r3, #0x7C
  00544	e59d3018	 ldr         r3, [sp, #0x18]
  00548	e5823000	 str         r3, [r2]

; 175  :     m_CurrSamp[1] = CurrSamp1;

  0054c	e59d3040	 ldr         r3, [sp, #0x40]
  00550	e2832084	 add         r2, r3, #0x84
  00554	e59d3008	 ldr         r3, [sp, #8]
  00558	e5823000	 str         r3, [r2]

; 176  :     return pBuffer;

  0055c	e59d3044	 ldr         r3, [sp, #0x44]
  00560	e58d3030	 str         r3, [sp, #0x30]

; 177  : }

  00564	e59d0030	 ldr         r0, [sp, #0x30]
  00568	e28dd038	 add         sp, sp, #0x38
  0056c	e89d6000	 ldmia       sp, {sp, lr}
  00570	e12fff1e	 bx          lr
  00574		 |$M37376|

			 ENDP  ; |?Render2@InputStreamContext@@UAAPAEPAE00@Z|, InputStreamContext::Render2

	END
