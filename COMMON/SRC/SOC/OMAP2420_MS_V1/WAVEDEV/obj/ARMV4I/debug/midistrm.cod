; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\midistrm.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?GainChange@CMidiStream@@UAAXXZ|	; CMidiStream::GainChange
	IMPORT	|?GainChange@CMidiNote@@QAAXXZ|		; CMidiNote::GainChange

  00000			 AREA	 |.pdata|, PDATA
|$T37534| DCD	|$LN7@GainChange|
	DCD	0x40001a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GainChange@CMidiStream@@UAAXXZ| PROC	; CMidiStream::GainChange

; 27   : {

  00000		 |$LN7@GainChange|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37531|

; 28   :     PLIST_ENTRY pListEntry;
; 29   :     CMidiNote *pCNote;
; 30   :     pListEntry = m_NoteList.Flink;

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833c05	 add         r3, r3, #5, 24
  00018	e28330e8	 add         r3, r3, #0xE8
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3000	 str         r3, [sp]
  00024		 |$LN2@GainChange|

; 31   :     while (pListEntry != &m_NoteList)

  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e2833c05	 add         r3, r3, #5, 24
  0002c	e28320e8	 add         r2, r3, #0xE8
  00030	e59d3000	 ldr         r3, [sp]
  00034	e1530002	 cmp         r3, r2
  00038	0a000007	 beq         |$LN1@GainChange|

; 32   :     {
; 33   :         // Get a pointer to the stream context
; 34   :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e58d3004	 str         r3, [sp, #4]

; 35   :         pCNote->GainChange();

  00044	e59d0004	 ldr         r0, [sp, #4]
  00048	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 36   :         pListEntry = pListEntry->Flink;

  0004c	e59d3000	 ldr         r3, [sp]
  00050	e5933000	 ldr         r3, [r3]
  00054	e58d3000	 str         r3, [sp]

; 37   :     }

  00058	eafffff1	 b           |$LN2@GainChange|
  0005c		 |$LN1@GainChange|

; 38   : }

  0005c	e28dd008	 add         sp, sp, #8
  00060	e89d6000	 ldmia       sp, {sp, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M37532|

			 ENDP  ; |?GainChange@CMidiStream@@UAAXXZ|, CMidiStream::GainChange

	EXPORT	|?MapNoteGain@CMidiStream@@QAAKK@Z|	; CMidiStream::MapNoteGain
	IMPORT	|?MapGain@StreamContext@@QAAKK@Z|	; StreamContext::MapGain

  00008			 AREA	 |.pdata|, PDATA
|$T37540| DCD	|$LN5@MapNoteGai|
	DCD	0x40002504
; Function compile flags: /Odtp

  00068			 AREA	 |.text|, CODE, ARM

  00068		 |?MapNoteGain@CMidiStream@@QAAKK@Z| PROC ; CMidiStream::MapNoteGain

; 47   : {

  00068		 |$LN5@MapNoteGai|
  00068	e1a0c00d	 mov         r12, sp
  0006c	e92d0003	 stmdb       sp!, {r0, r1}
  00070	e92d5000	 stmdb       sp!, {r12, lr}
  00074	e24dd010	 sub         sp, sp, #0x10
  00078		 |$M37537|

; 48   :     DWORD TotalGain = NoteGain & 0xFFFF;

  00078	e59d201c	 ldr         r2, [sp, #0x1C]
  0007c	e3a03cff	 mov         r3, #0xFF, 24
  00080	e38330ff	 orr         r3, r3, #0xFF
  00084	e0023003	 and         r3, r2, r3
  00088	e58d3000	 str         r3, [sp]

; 49   :     DWORD StreamGain = m_dwGain & 0xFFFF;

  0008c	e59d3018	 ldr         r3, [sp, #0x18]
  00090	e2833058	 add         r3, r3, #0x58
  00094	e5932000	 ldr         r2, [r3]
  00098	e3a03cff	 mov         r3, #0xFF, 24
  0009c	e38330ff	 orr         r3, r3, #0xFF
  000a0	e0023003	 and         r3, r2, r3
  000a4	e58d3004	 str         r3, [sp, #4]

; 50   : 
; 51   :     TotalGain *= StreamGain; // Calc. aggregate gain

  000a8	e59d2000	 ldr         r2, [sp]
  000ac	e59d3004	 ldr         r3, [sp, #4]
  000b0	e0030392	 mul         r3, r2, r3
  000b4	e58d3000	 str         r3, [sp]

; 52   :     TotalGain += 0xFFFF;   // Force to round up

  000b8	e59d3000	 ldr         r3, [sp]
  000bc	e2833cff	 add         r3, r3, #0xFF, 24
  000c0	e28330ff	 add         r3, r3, #0xFF
  000c4	e58d3000	 str         r3, [sp]

; 53   :     TotalGain >>= 16;

  000c8	e59d3000	 ldr         r3, [sp]
  000cc	e1a03823	 mov         r3, r3, lsr #16
  000d0	e58d3000	 str         r3, [sp]

; 54   : 
; 55   :     return MapGain(TotalGain);

  000d4	e59d1000	 ldr         r1, [sp]
  000d8	e59d0018	 ldr         r0, [sp, #0x18]
  000dc	eb000000	 bl          |?MapGain@StreamContext@@QAAKK@Z|
  000e0	e58d000c	 str         r0, [sp, #0xC]
  000e4	e59d300c	 ldr         r3, [sp, #0xC]
  000e8	e58d3008	 str         r3, [sp, #8]

; 56   : }

  000ec	e59d0008	 ldr         r0, [sp, #8]
  000f0	e28dd010	 add         sp, sp, #0x10
  000f4	e89d6000	 ldmia       sp, {sp, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$M37538|

			 ENDP  ; |?MapNoteGain@CMidiStream@@QAAKK@Z|, CMidiStream::MapNoteGain

	EXPORT	|?UpdateTempo@CMidiStream@@QAAJXZ|	; CMidiStream::UpdateTempo
	EXPORT	|?Open@CMidiStream@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; CMidiStream::Open
	IMPORT	|?Open@StreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; StreamContext::Open

  00010			 AREA	 |.pdata|, PDATA
|$T37546| DCD	|$LN13@Open|
	DCD	0x40009d04
; Function compile flags: /Odtp

  000fc			 AREA	 |.text|, CODE, ARM

  000fc		 |?Open@CMidiStream@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; CMidiStream::Open

; 64   : {

  000fc		 |$LN13@Open|
  000fc	e1a0c00d	 mov         r12, sp
  00100	e92d000f	 stmdb       sp!, {r0 - r3}
  00104	e92d5000	 stmdb       sp!, {r12, lr}
  00108	e24dd01c	 sub         sp, sp, #0x1C
  0010c		 |$M37543|

; 65   :     HRESULT Result = E_FAIL;

  0010c	e3a03116	 mov         r3, #0x16, 2
  00110	e3833901	 orr         r3, r3, #1, 18
  00114	e58d3004	 str         r3, [sp, #4]

; 66   : 
; 67   :     LPWAVEFORMAT_MIDI pwfxmidi = (LPWAVEFORMAT_MIDI) lpWOD->lpFormat;

  00118	e59d302c	 ldr         r3, [sp, #0x2C]
  0011c	e2831004	 add         r1, r3, #4
  00120	e1d130d3	 ldrsb       r3, [r1, #3]
  00124	e1a02403	 mov         r2, r3, lsl #8
  00128	e5d13002	 ldrb        r3, [r1, #2]
  0012c	e1833002	 orr         r3, r3, r2
  00130	e1a02403	 mov         r2, r3, lsl #8
  00134	e5d13001	 ldrb        r3, [r1, #1]
  00138	e1833002	 orr         r3, r3, r2
  0013c	e1a02403	 mov         r2, r3, lsl #8
  00140	e5d13000	 ldrb        r3, [r1]
  00144	e1833002	 orr         r3, r3, r2
  00148	e58d3000	 str         r3, [sp]

; 68   : 
; 69   :     if (pwfxmidi->wfx.cbSize!=WAVEFORMAT_MIDI_EXTRASIZE)

  0014c	e59d3000	 ldr         r3, [sp]
  00150	e2831010	 add         r1, r3, #0x10
  00154	e5d13001	 ldrb        r3, [r1, #1]
  00158	e1a03403	 mov         r3, r3, lsl #8
  0015c	e1a02803	 mov         r2, r3, lsl #16
  00160	e1a02822	 mov         r2, r2, lsr #16
  00164	e5d13000	 ldrb        r3, [r1]
  00168	e1833002	 orr         r3, r3, r2
  0016c	e353000a	 cmp         r3, #0xA
  00170	0a000003	 beq         |$LN8@Open|

; 70   :     {
; 71   :         return E_FAIL;

  00174	e3a03116	 mov         r3, #0x16, 2
  00178	e3833901	 orr         r3, r3, #1, 18
  0017c	e58d3014	 str         r3, [sp, #0x14]
  00180	ea000076	 b           |$LN9@Open|
  00184		 |$LN8@Open|

; 72   :     }
; 73   : 
; 74   :     m_USecPerQuarterNote  = pwfxmidi->USecPerQuarterNote;

  00184	e59d3000	 ldr         r3, [sp]
  00188	e2831014	 add         r1, r3, #0x14
  0018c	e59d3024	 ldr         r3, [sp, #0x24]
  00190	e2832c06	 add         r2, r3, #6, 24
  00194	e5913000	 ldr         r3, [r1]
  00198	e5823000	 str         r3, [r2]

; 75   :     m_TicksPerQuarterNote = pwfxmidi->TicksPerQuarterNote;

  0019c	e59d3000	 ldr         r3, [sp]
  001a0	e2831018	 add         r1, r3, #0x18
  001a4	e59d3024	 ldr         r3, [sp, #0x24]
  001a8	e2833c06	 add         r3, r3, #6, 24
  001ac	e2832004	 add         r2, r3, #4
  001b0	e5913000	 ldr         r3, [r1]
  001b4	e5823000	 str         r3, [r2]

; 76   : 
; 77   :     UpdateTempo();

  001b8	e59d0024	 ldr         r0, [sp, #0x24]
  001bc	eb000000	 bl          |?UpdateTempo@CMidiStream@@QAAJXZ|

; 78   : 
; 79   :     m_DeltaSampleCount=0;

  001c0	e59d3024	 ldr         r3, [sp, #0x24]
  001c4	e2833c06	 add         r3, r3, #6, 24
  001c8	e283200c	 add         r2, r3, #0xC
  001cc	e3a03000	 mov         r3, #0
  001d0	e5823000	 str         r3, [r2]

; 80   : 
; 81   :     // Add all notes to free list
; 82   :     InitializeListHead(&m_NoteList);

  001d4	e59d3024	 ldr         r3, [sp, #0x24]
  001d8	e2833c05	 add         r3, r3, #5, 24
  001dc	e28320e8	 add         r2, r3, #0xE8
  001e0	e59d3024	 ldr         r3, [sp, #0x24]
  001e4	e2833c05	 add         r3, r3, #5, 24
  001e8	e28330ec	 add         r3, r3, #0xEC
  001ec	e5832000	 str         r2, [r3]
  001f0	e59d3024	 ldr         r3, [sp, #0x24]
  001f4	e2833c05	 add         r3, r3, #5, 24
  001f8	e28310ec	 add         r1, r3, #0xEC
  001fc	e59d3024	 ldr         r3, [sp, #0x24]
  00200	e2833c05	 add         r3, r3, #5, 24
  00204	e28320e8	 add         r2, r3, #0xE8
  00208	e5913000	 ldr         r3, [r1]
  0020c	e5823000	 str         r3, [r2]

; 83   :     InitializeListHead(&m_FreeList);

  00210	e59d3024	 ldr         r3, [sp, #0x24]
  00214	e2832e5f	 add         r2, r3, #0x5F, 28
  00218	e59d3024	 ldr         r3, [sp, #0x24]
  0021c	e2833c05	 add         r3, r3, #5, 24
  00220	e28330f4	 add         r3, r3, #0xF4
  00224	e5832000	 str         r2, [r3]
  00228	e59d3024	 ldr         r3, [sp, #0x24]
  0022c	e2833c05	 add         r3, r3, #5, 24
  00230	e28310f4	 add         r1, r3, #0xF4
  00234	e59d3024	 ldr         r3, [sp, #0x24]
  00238	e2832e5f	 add         r2, r3, #0x5F, 28
  0023c	e5913000	 ldr         r3, [r1]
  00240	e5823000	 str         r3, [r2]

; 84   :     for (int i=0;i<NUMNOTES;i++)

  00244	e3a03000	 mov         r3, #0
  00248	e58d3008	 str         r3, [sp, #8]
  0024c	ea000002	 b           |$LN7@Open|
  00250		 |$LN6@Open|
  00250	e59d3008	 ldr         r3, [sp, #8]
  00254	e2833001	 add         r3, r3, #1
  00258	e58d3008	 str         r3, [sp, #8]
  0025c		 |$LN7@Open|
  0025c	e59d3008	 ldr         r3, [sp, #8]
  00260	e3530020	 cmp         r3, #0x20
  00264	aa000029	 bge         |$LN5@Open|

; 85   :     {
; 86   :         InsertTailList(&m_FreeList,&m_MidiNote[i].m_Link);

  00268	e59d3024	 ldr         r3, [sp, #0x24]
  0026c	e2833e5f	 add         r3, r3, #0x5F, 28
  00270	e58d3010	 str         r3, [sp, #0x10]
  00274	e59d3010	 ldr         r3, [sp, #0x10]
  00278	e2833004	 add         r3, r3, #4
  0027c	e5933000	 ldr         r3, [r3]
  00280	e58d300c	 str         r3, [sp, #0xC]
  00284	e59d3024	 ldr         r3, [sp, #0x24]
  00288	e2831068	 add         r1, r3, #0x68
  0028c	e59d2008	 ldr         r2, [sp, #8]
  00290	e3a0302c	 mov         r3, #0x2C
  00294	e0030392	 mul         r3, r2, r3
  00298	e0812003	 add         r2, r1, r3
  0029c	e59d3010	 ldr         r3, [sp, #0x10]
  002a0	e5823000	 str         r3, [r2]
  002a4	e59d3024	 ldr         r3, [sp, #0x24]
  002a8	e2831068	 add         r1, r3, #0x68
  002ac	e59d2008	 ldr         r2, [sp, #8]
  002b0	e3a0302c	 mov         r3, #0x2C
  002b4	e0030392	 mul         r3, r2, r3
  002b8	e0813003	 add         r3, r1, r3
  002bc	e2832004	 add         r2, r3, #4
  002c0	e59d300c	 ldr         r3, [sp, #0xC]
  002c4	e5823000	 str         r3, [r2]
  002c8	e59d3024	 ldr         r3, [sp, #0x24]
  002cc	e2831068	 add         r1, r3, #0x68
  002d0	e59d2008	 ldr         r2, [sp, #8]
  002d4	e3a0302c	 mov         r3, #0x2C
  002d8	e0030392	 mul         r3, r2, r3
  002dc	e0812003	 add         r2, r1, r3
  002e0	e59d300c	 ldr         r3, [sp, #0xC]
  002e4	e5832000	 str         r2, [r3]
  002e8	e59d3024	 ldr         r3, [sp, #0x24]
  002ec	e2831068	 add         r1, r3, #0x68
  002f0	e59d2008	 ldr         r2, [sp, #8]
  002f4	e3a0302c	 mov         r3, #0x2C
  002f8	e0030392	 mul         r3, r2, r3
  002fc	e0812003	 add         r2, r1, r3
  00300	e59d3010	 ldr         r3, [sp, #0x10]
  00304	e2833004	 add         r3, r3, #4
  00308	e5832000	 str         r2, [r3]

; 87   :     }

  0030c	eaffffcf	 b           |$LN6@Open|
  00310		 |$LN5@Open|

; 88   : 
; 89   :     Result = StreamContext::Open(pDeviceContext, lpWOD, dwFlags);

  00310	e59d3030	 ldr         r3, [sp, #0x30]
  00314	e59d202c	 ldr         r2, [sp, #0x2C]
  00318	e59d1028	 ldr         r1, [sp, #0x28]
  0031c	e59d0024	 ldr         r0, [sp, #0x24]
  00320	eb000000	 bl          |?Open@StreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  00324	e58d0018	 str         r0, [sp, #0x18]
  00328	e59d3018	 ldr         r3, [sp, #0x18]
  0032c	e58d3004	 str         r3, [sp, #4]

; 90   : 
; 91   :     if (Result==MMSYSERR_NOERROR)

  00330	e59d3004	 ldr         r3, [sp, #4]
  00334	e3530000	 cmp         r3, #0
  00338	1a000006	 bne         |$LN1@Open|

; 92   :     {
; 93   :         // Note: Output streams should be initialized in the run state.
; 94   :         Run();

  0033c	e59d3024	 ldr         r3, [sp, #0x24]
  00340	e5933000	 ldr         r3, [r3]
  00344	e2833010	 add         r3, r3, #0x10
  00348	e59d0024	 ldr         r0, [sp, #0x24]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e1a0e00f	 mov         lr, pc
  00354	e12fff13	 bx          r3
  00358		 |$LN1@Open|

; 95   :     }
; 96   : 
; 97   :     return Result;

  00358	e59d3004	 ldr         r3, [sp, #4]
  0035c	e58d3014	 str         r3, [sp, #0x14]
  00360		 |$LN9@Open|

; 98   : }

  00360	e59d0014	 ldr         r0, [sp, #0x14]
  00364	e28dd01c	 add         sp, sp, #0x1C
  00368	e89d6000	 ldmia       sp, {sp, lr}
  0036c	e12fff1e	 bx          lr
  00370		 |$M37544|

			 ENDP  ; |?Open@CMidiStream@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, CMidiStream::Open

	EXPORT	|?AllNotesOff@CMidiStream@@QAAJI@Z|	; CMidiStream::AllNotesOff
	EXPORT	|?Reset@CMidiStream@@UAAKXZ|		; CMidiStream::Reset
	IMPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00018			 AREA	 |.pdata|, PDATA
|$T37552| DCD	|$LN6@Reset|
	DCD	0x40001c04
; Function compile flags: /Odtp

  00370			 AREA	 |.text|, CODE, ARM

  00370		 |?Reset@CMidiStream@@UAAKXZ| PROC	; CMidiStream::Reset

; 107  : {

  00370		 |$LN6@Reset|
  00370	e1a0c00d	 mov         r12, sp
  00374	e92d0001	 stmdb       sp!, {r0}
  00378	e92d5000	 stmdb       sp!, {r12, lr}
  0037c	e24dd00c	 sub         sp, sp, #0xC
  00380		 |$M37549|

; 108  :     DWORD dwResult = StreamContext::Reset();

  00380	e59d0014	 ldr         r0, [sp, #0x14]
  00384	eb000000	 bl          |?Reset@StreamContext@@UAAKXZ|
  00388	e58d0008	 str         r0, [sp, #8]
  0038c	e59d3008	 ldr         r3, [sp, #8]
  00390	e58d3000	 str         r3, [sp]

; 109  :     if (dwResult==MMSYSERR_NOERROR)

  00394	e59d3000	 ldr         r3, [sp]
  00398	e3530000	 cmp         r3, #0
  0039c	1a000009	 bne         |$LN1@Reset|

; 110  :     {
; 111  :         AllNotesOff(0);

  003a0	e3a01000	 mov         r1, #0
  003a4	e59d0014	 ldr         r0, [sp, #0x14]
  003a8	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|

; 112  : 
; 113  :         // Note: Output streams should be reset to the run state.
; 114  :         Run();

  003ac	e59d3014	 ldr         r3, [sp, #0x14]
  003b0	e5933000	 ldr         r3, [r3]
  003b4	e2833010	 add         r3, r3, #0x10
  003b8	e59d0014	 ldr         r0, [sp, #0x14]
  003bc	e5933000	 ldr         r3, [r3]
  003c0	e1a0e00f	 mov         lr, pc
  003c4	e12fff13	 bx          r3
  003c8		 |$LN1@Reset|

; 115  :     }
; 116  :     return dwResult;

  003c8	e59d3000	 ldr         r3, [sp]
  003cc	e58d3004	 str         r3, [sp, #4]

; 117  : }

  003d0	e59d0004	 ldr         r0, [sp, #4]
  003d4	e28dd00c	 add         sp, sp, #0xC
  003d8	e89d6000	 ldmia       sp, {sp, lr}
  003dc	e12fff1e	 bx          lr
  003e0		 |$M37550|

			 ENDP  ; |?Reset@CMidiStream@@UAAKXZ|, CMidiStream::Reset

	EXPORT	|?Close@CMidiStream@@UAAKXZ|		; CMidiStream::Close
	IMPORT	|?Close@StreamContext@@UAAKXZ|		; StreamContext::Close

  00020			 AREA	 |.pdata|, PDATA
|$T37558| DCD	|$LN6@Close|
	DCD	0x40001504
; Function compile flags: /Odtp

  003e0			 AREA	 |.text|, CODE, ARM

  003e0		 |?Close@CMidiStream@@UAAKXZ| PROC	; CMidiStream::Close

; 125  : {

  003e0		 |$LN6@Close|
  003e0	e1a0c00d	 mov         r12, sp
  003e4	e92d0001	 stmdb       sp!, {r0}
  003e8	e92d5000	 stmdb       sp!, {r12, lr}
  003ec	e24dd00c	 sub         sp, sp, #0xC
  003f0		 |$M37555|

; 126  :     DWORD dwResult = StreamContext::Close();

  003f0	e59d0014	 ldr         r0, [sp, #0x14]
  003f4	eb000000	 bl          |?Close@StreamContext@@UAAKXZ|
  003f8	e58d0008	 str         r0, [sp, #8]
  003fc	e59d3008	 ldr         r3, [sp, #8]
  00400	e58d3000	 str         r3, [sp]

; 127  :     if (dwResult==MMSYSERR_NOERROR)

  00404	e59d3000	 ldr         r3, [sp]
  00408	e3530000	 cmp         r3, #0
  0040c	1a000002	 bne         |$LN1@Close|

; 128  :     {
; 129  :         AllNotesOff(0);

  00410	e3a01000	 mov         r1, #0
  00414	e59d0014	 ldr         r0, [sp, #0x14]
  00418	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|
  0041c		 |$LN1@Close|

; 130  :     }
; 131  :     return dwResult;

  0041c	e59d3000	 ldr         r3, [sp]
  00420	e58d3004	 str         r3, [sp, #4]

; 132  : }

  00424	e59d0004	 ldr         r0, [sp, #4]
  00428	e28dd00c	 add         sp, sp, #0xC
  0042c	e89d6000	 ldmia       sp, {sp, lr}
  00430	e12fff1e	 bx          lr
  00434		 |$M37556|

			 ENDP  ; |?Close@CMidiStream@@UAAKXZ|, CMidiStream::Close

	IMPORT	|__rt_udiv64by64|

  00028			 AREA	 |.pdata|, PDATA
|$T37565| DCD	|$LN7@UpdateTemp|
	DCD	0x40005404
; Function compile flags: /Odtp

  00434			 AREA	 |.text|, CODE, ARM

  00434		 |?UpdateTempo@CMidiStream@@QAAJXZ| PROC ; CMidiStream::UpdateTempo

; 141  : {

  00434		 |$LN7@UpdateTemp|
  00434	e1a0c00d	 mov         r12, sp
  00438	e92d0001	 stmdb       sp!, {r0}
  0043c	e92d5000	 stmdb       sp!, {r12, lr}
  00440	e24dd02c	 sub         sp, sp, #0x2C
  00444		 |$M37562|

; 142  :     if (m_USecPerQuarterNote==0)

  00444	e59d3034	 ldr         r3, [sp, #0x34]
  00448	e2833c06	 add         r3, r3, #6, 24
  0044c	e5933000	 ldr         r3, [r3]
  00450	e3530000	 cmp         r3, #0
  00454	1a000004	 bne         |$LN2@UpdateTemp|

; 143  :     {
; 144  :         m_USecPerQuarterNote = 500000; // If not specified, assume 500000usec = 1/2 sec per quarter note

  00458	e59d3034	 ldr         r3, [sp, #0x34]
  0045c	e2832c06	 add         r2, r3, #6, 24
  00460	e3a03a7a	 mov         r3, #0x7A, 20
  00464	e3833e12	 orr         r3, r3, #0x12, 28
  00468	e5823000	 str         r3, [r2]
  0046c		 |$LN2@UpdateTemp|

; 145  :     }
; 146  : 
; 147  :     if (m_TicksPerQuarterNote==0)

  0046c	e59d3034	 ldr         r3, [sp, #0x34]
  00470	e2833c06	 add         r3, r3, #6, 24
  00474	e2833004	 add         r3, r3, #4
  00478	e5933000	 ldr         r3, [r3]
  0047c	e3530000	 cmp         r3, #0
  00480	1a000004	 bne         |$LN1@UpdateTemp|

; 148  :     {
; 149  :         m_TicksPerQuarterNote = 96;      // If not specified, assume 96 ticks/quarter note

  00484	e59d3034	 ldr         r3, [sp, #0x34]
  00488	e2833c06	 add         r3, r3, #6, 24
  0048c	e2832004	 add         r2, r3, #4
  00490	e3a03060	 mov         r3, #0x60
  00494	e5823000	 str         r3, [r2]
  00498		 |$LN1@UpdateTemp|

; 150  :     }
; 151  : 
; 152  :     UINT64 Num = SAMPLERATE;

  00498	e3a03b2b	 mov         r3, #0x2B, 22
  0049c	e3833044	 orr         r3, r3, #0x44
  004a0	e58d3008	 str         r3, [sp, #8]
  004a4	e3a03000	 mov         r3, #0
  004a8	e58d300c	 str         r3, [sp, #0xC]

; 153  :     Num *= m_USecPerQuarterNote;

  004ac	e59d3034	 ldr         r3, [sp, #0x34]
  004b0	e2833c06	 add         r3, r3, #6, 24
  004b4	e5931000	 ldr         r1, [r3]
  004b8	e59d3008	 ldr         r3, [sp, #8]
  004bc	e59d200c	 ldr         r2, [sp, #0xC]
  004c0	e58d301c	 str         r3, [sp, #0x1C]
  004c4	e58d1020	 str         r1, [sp, #0x20]
  004c8	e59d3020	 ldr         r3, [sp, #0x20]
  004cc	e0000392	 mul         r0, r2, r3
  004d0	e59d101c	 ldr         r1, [sp, #0x1C]
  004d4	e59d3020	 ldr         r3, [sp, #0x20]
  004d8	e0832391	 umull       r2, r3, r1, r3
  004dc	e0803003	 add         r3, r0, r3
  004e0	e58d2008	 str         r2, [sp, #8]
  004e4	e58d300c	 str         r3, [sp, #0xC]

; 154  :     UINT64 Den = 1000000;

  004e8	e3a0393d	 mov         r3, #0x3D, 18
  004ec	e3833d09	 orr         r3, r3, #9, 26
  004f0	e58d3000	 str         r3, [sp]
  004f4	e3a03000	 mov         r3, #0
  004f8	e58d3004	 str         r3, [sp, #4]

; 155  :     Den *= m_TicksPerQuarterNote;

  004fc	e59d3034	 ldr         r3, [sp, #0x34]
  00500	e2833c06	 add         r3, r3, #6, 24
  00504	e2833004	 add         r3, r3, #4
  00508	e5931000	 ldr         r1, [r3]
  0050c	e59d3000	 ldr         r3, [sp]
  00510	e59d2004	 ldr         r2, [sp, #4]
  00514	e58d3024	 str         r3, [sp, #0x24]
  00518	e58d1028	 str         r1, [sp, #0x28]
  0051c	e59d3028	 ldr         r3, [sp, #0x28]
  00520	e0000392	 mul         r0, r2, r3
  00524	e59d1024	 ldr         r1, [sp, #0x24]
  00528	e59d3028	 ldr         r3, [sp, #0x28]
  0052c	e0832391	 umull       r2, r3, r1, r3
  00530	e0803003	 add         r3, r0, r3
  00534	e58d2000	 str         r2, [sp]
  00538	e58d3004	 str         r3, [sp, #4]

; 156  :     UINT64 SamplesPerTick = Num/Den;

  0053c	e59d0008	 ldr         r0, [sp, #8]
  00540	e59d100c	 ldr         r1, [sp, #0xC]
  00544	e59d2000	 ldr         r2, [sp]
  00548	e59d3004	 ldr         r3, [sp, #4]
  0054c	eb000000	 bl          __rt_udiv64by64
  00550	e58d0010	 str         r0, [sp, #0x10]
  00554	e58d1014	 str         r1, [sp, #0x14]

; 157  :     m_SamplesPerTick = (UINT32)SamplesPerTick;

  00558	e59d2010	 ldr         r2, [sp, #0x10]
  0055c	e59d3034	 ldr         r3, [sp, #0x34]
  00560	e2833c06	 add         r3, r3, #6, 24
  00564	e2833008	 add         r3, r3, #8
  00568	e5832000	 str         r2, [r3]

; 158  :     return S_OK;

  0056c	e3a03000	 mov         r3, #0
  00570	e58d3018	 str         r3, [sp, #0x18]

; 159  : }

  00574	e59d0018	 ldr         r0, [sp, #0x18]
  00578	e28dd02c	 add         sp, sp, #0x2C
  0057c	e89d6000	 ldmia       sp, {sp, lr}
  00580	e12fff1e	 bx          lr
  00584		 |$M37563|

			 ENDP  ; |?UpdateTempo@CMidiStream@@QAAJXZ|, CMidiStream::UpdateTempo

	EXPORT	|??_C@_1IC@EFBPOMED@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?3?$AA?3?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo@| [ DATA ] ; `string'
	EXPORT	|?InternalMidiMessage@CMidiStream@@QAAJI@Z| ; CMidiStream::InternalMidiMessage
	EXPORT	|?DeltaTicksToSamples@CMidiStream@@QAAII@Z| ; CMidiStream::DeltaTicksToSamples
	EXPORT	|?ProcessMidiStream@CMidiStream@@QAAIXZ| ; CMidiStream::ProcessMidiStream
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer
	IMPORT	|__C_specific_handler|

  00030			 AREA	 |.pdata|, PDATA
|$T37585| DCD	|$LN22@ProcessMid|
	DCD	0xc0006505
|$T37587| DCD	|$LN12@ProcessMid|
	DCD	0x40000501

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@EFBPOMED@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?3?$AA?3?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo@| DCB "C"
	DCB	0x0, "M", 0x0, "i", 0x0, "d", 0x0, "i", 0x0, "S", 0x0, "t"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "m", 0x0, ":", 0x0, ":"
	DCB	0x0, "E", 0x0, "X", 0x0, "C", 0x0, "E", 0x0, "P", 0x0, "T"
	DCB	0x0, "I", 0x0, "O", 0x0, "N", 0x0, " ", 0x0, "I", 0x0, "N"
	DCB	0x0, " ", 0x0, "I", 0x0, "S", 0x0, "T", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, "!", 0x0, "!", 0x0, "!"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T37583| DCD	0x1
	DCD	|$LN16@ProcessMid|
	DCD	|$LN17@ProcessMid|
	DCD	|$LN12@ProcessMid|
	DCD	|$LN13@ProcessMid|
; Function compile flags: /Odtp

  00584			 AREA	 |.text|, CODE, ARM

  00584	00000000	 DCD         |__C_specific_handler|
  00588	00000000	 DCD         |$T37583|

  0058c		 |?ProcessMidiStream@CMidiStream@@QAAIXZ| PROC ; CMidiStream::ProcessMidiStream

; 171  : {

  0058c		 |$LN22@ProcessMid|
  0058c	e1a0c00d	 mov         r12, sp
  00590	e92d0001	 stmdb       sp!, {r0}
  00594	e92d5800	 stmdb       sp!, {r11, r12, lr}
  00598	e28db00c	 add         r11, sp, #0xC
  0059c	e24dd024	 sub         sp, sp, #0x24
  005a0		 |$LN20@ProcessMid|

; 172  :     WAVEFORMAT_MIDI_MESSAGE *pMsg;
; 173  :     WAVEFORMAT_MIDI_MESSAGE *pMsgEnd;
; 174  :     UINT32 ThisMidiEventDelta;
; 175  : 
; 176  :     // Process all midi messages up to and including the current sample
; 177  :     pMsg    = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrData;

  005a0	e59b3000	 ldr         r3, [r11]
  005a4	e2833044	 add         r3, r3, #0x44
  005a8	e5933000	 ldr         r3, [r3]
  005ac	e50b302c	 str         r3, [r11, #-0x2C]

; 178  :     pMsgEnd = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrDataEnd;

  005b0	e59b3000	 ldr         r3, [r11]
  005b4	e2833048	 add         r3, r3, #0x48
  005b8	e5933000	 ldr         r3, [r3]
  005bc	e50b3030	 str         r3, [r11, #-0x30]
  005c0		 |$LN6@ProcessMid|

; 179  : 
; 180  :     for (;;)
; 181  :     {
; 182  :         if (pMsg>=pMsgEnd)

  005c0	e51b202c	 ldr         r2, [r11, #-0x2C]
  005c4	e51b3030	 ldr         r3, [r11, #-0x30]
  005c8	e1520003	 cmp         r2, r3
  005cc	3a00000e	 bcc         |$LN4@ProcessMid|

; 183  :         {
; 184  :             pMsg = (WAVEFORMAT_MIDI_MESSAGE *)GetNextBuffer();

  005d0	e59b0000	 ldr         r0, [r11]
  005d4	eb000000	 bl          |?GetNextBuffer@StreamContext@@QAAPAEXZ|
  005d8	e50b0018	 str         r0, [r11, #-0x18]
  005dc	e51b3018	 ldr         r3, [r11, #-0x18]
  005e0	e50b302c	 str         r3, [r11, #-0x2C]

; 185  :             if (!pMsg)

  005e4	e51b302c	 ldr         r3, [r11, #-0x2C]
  005e8	e3530000	 cmp         r3, #0
  005ec	1a000002	 bne         |$LN3@ProcessMid|

; 186  :             {
; 187  :                 // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::ProcessMidiStream no more events\r\n")));
; 188  :                 return 0;

  005f0	e3a03000	 mov         r3, #0
  005f4	e50b301c	 str         r3, [r11, #-0x1C]
  005f8	ea000044	 b           |$LN7@ProcessMid|
  005fc		 |$LN3@ProcessMid|

; 189  :             }
; 190  :             pMsgEnd = (WAVEFORMAT_MIDI_MESSAGE *)m_lpCurrDataEnd;

  005fc	e59b3000	 ldr         r3, [r11]
  00600	e2833048	 add         r3, r3, #0x48
  00604	e5933000	 ldr         r3, [r3]
  00608	e50b3030	 str         r3, [r11, #-0x30]
  0060c		 |$LN4@ProcessMid|
  0060c		 |$LN16@ProcessMid|

; 191  :         }
; 192  : 
; 193  :         _try
; 194  :         {
; 195  :             ThisMidiEventDelta = DeltaTicksToSamples(pMsg->DeltaTicks);

  0060c	e51b302c	 ldr         r3, [r11, #-0x2C]
  00610	e5931000	 ldr         r1, [r3]
  00614	e59b0000	 ldr         r0, [r11]
  00618	eb000000	 bl          |?DeltaTicksToSamples@CMidiStream@@QAAII@Z|
  0061c	e50b0014	 str         r0, [r11, #-0x14]
  00620	e51b3014	 ldr         r3, [r11, #-0x14]
  00624	e50b3028	 str         r3, [r11, #-0x28]

; 196  :             if (ThisMidiEventDelta > m_DeltaSampleCount)

  00628	e59b3000	 ldr         r3, [r11]
  0062c	e2833c06	 add         r3, r3, #6, 24
  00630	e283300c	 add         r3, r3, #0xC
  00634	e51b2028	 ldr         r2, [r11, #-0x28]
  00638	e5933000	 ldr         r3, [r3]
  0063c	e1520003	 cmp         r2, r3
  00640	9a00000f	 bls         |$LN1@ProcessMid|

; 197  :             {
; 198  :                 m_lpCurrData = (PBYTE)pMsg;

  00644	e59b3000	 ldr         r3, [r11]
  00648	e2832044	 add         r2, r3, #0x44
  0064c	e51b302c	 ldr         r3, [r11, #-0x2C]
  00650	e5823000	 str         r3, [r2]

; 199  :                 INT32 Delta = ThisMidiEventDelta-m_DeltaSampleCount;

  00654	e59b3000	 ldr         r3, [r11]
  00658	e2833c06	 add         r3, r3, #6, 24
  0065c	e283300c	 add         r3, r3, #0xC
  00660	e51b2028	 ldr         r2, [r11, #-0x28]
  00664	e5933000	 ldr         r3, [r3]
  00668	e0423003	 sub         r3, r2, r3
  0066c	e50b3024	 str         r3, [r11, #-0x24]

; 200  :                 // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::ProcessMidiStream next event @delta %d\r\n"),Delta));
; 201  :                 return Delta;

  00670	e51b3024	 ldr         r3, [r11, #-0x24]
  00674	e50b3020	 str         r3, [r11, #-0x20]
  00678	e51b3020	 ldr         r3, [r11, #-0x20]
  0067c	e50b301c	 str         r3, [r11, #-0x1C]
  00680	ea000022	 b           |$LN7@ProcessMid|
  00684		 |$LN1@ProcessMid|

; 202  :             }
; 203  : 
; 204  :             // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::ProcessMidiStream sending midi message 0x%x\r\n"),pMsg->MidiMsg));
; 205  :             InternalMidiMessage(pMsg->MidiMsg);

  00684	e51b302c	 ldr         r3, [r11, #-0x2C]
  00688	e2833004	 add         r3, r3, #4
  0068c	e5931000	 ldr         r1, [r3]
  00690	e59b0000	 ldr         r0, [r11]
  00694	eb000000	 bl          |?InternalMidiMessage@CMidiStream@@QAAJI@Z|

; 206  :             m_DeltaSampleCount=0;

  00698	e59b3000	 ldr         r3, [r11]
  0069c	e2833c06	 add         r3, r3, #6, 24
  006a0	e283200c	 add         r2, r3, #0xC
  006a4	e3a03000	 mov         r3, #0
  006a8	e5823000	 str         r3, [r2]

; 207  :             pMsg++;

  006ac	e51b302c	 ldr         r3, [r11, #-0x2C]
  006b0	e2833008	 add         r3, r3, #8
  006b4	e50b302c	 str         r3, [r11, #-0x2C]
  006b8		 |$LN17@ProcessMid|

; 208  :         }

  006b8	ea000011	 b           |$LN18@ProcessMid|
  006bc		 |$LN13@ProcessMid|

; 210  :         {
; 211  :             DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::EXCEPTION IN IST for stream 0x%x, buffer 0x%x!!!!\r\n"), this, m_lpCurrData));

  006bc	e59f306c	 ldr         r3, [pc, #0x6C]
  006c0	e5933440	 ldr         r3, [r3, #0x440]
  006c4	e3130b01	 tst         r3, #1, 22
  006c8	0a000008	 beq         |$LN9@ProcessMid|
  006cc	e59b3000	 ldr         r3, [r11]
  006d0	e2833044	 add         r3, r3, #0x44
  006d4	e5932000	 ldr         r2, [r3]
  006d8	e59b1000	 ldr         r1, [r11]
  006dc	e59f0048	 ldr         r0, [pc, #0x48]
  006e0	eb000000	 bl          NKDbgPrintfW
  006e4	e3a03001	 mov         r3, #1
  006e8	e50b3010	 str         r3, [r11, #-0x10]
  006ec	ea000001	 b           |$LN10@ProcessMid|
  006f0		 |$LN9@ProcessMid|
  006f0	e3a03000	 mov         r3, #0
  006f4	e50b3010	 str         r3, [r11, #-0x10]
  006f8		 |$LN10@ProcessMid|

; 212  :             pMsg = pMsgEnd; // Pretend we finished reading the application buffer

  006f8	e51b3030	 ldr         r3, [r11, #-0x30]
  006fc	e50b302c	 str         r3, [r11, #-0x2C]
  00700	eaffffff	 b           |$LN18@ProcessMid|
  00704		 |$LN18@ProcessMid|

; 213  :         }
; 214  :     }

  00704	eaffffad	 b           |$LN6@ProcessMid|

; 215  :     return 0;

  00708	e3a03000	 mov         r3, #0
  0070c	e50b301c	 str         r3, [r11, #-0x1C]
  00710		 |$LN7@ProcessMid|
  00710		 |$LN11@ProcessMid|

; 216  : }

  00710	e51b001c	 ldr         r0, [r11, #-0x1C]
  00714	e24bd00c	 sub         sp, r11, #0xC
  00718	e89d6800	 ldmia       sp, {r11, sp, lr}
  0071c	e12fff1e	 bx          lr

			 ENDP  ; |?ProcessMidiStream@CMidiStream@@QAAIXZ|, CMidiStream::ProcessMidiStream

  00720		 |$LN12@ProcessMid|
  00720		 |$LN21@ProcessMid|

; 209  :         _except (EXCEPTION_EXECUTE_HANDLER)

  00720	e52de004	 str         lr, [sp, #-4]!
  00724		 |$LN15@ProcessMid|
  00724		 |$LN24@ProcessMid|
  00724	e3a00001	 mov         r0, #1
  00728		 |$LN14@ProcessMid|
  00728	e49df004	 ldr         pc, [sp], #4
  0072c		 |$LN26@ProcessMid|
  0072c		 |$LN27@ProcessMid|
  0072c	00000000	 DCD         |??_C@_1IC@EFBPOMED@?$AAC?$AAM?$AAi?$AAd?$AAi?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?3?$AA?3?$AAE?$AAX?$AAC?$AAE?$AAP?$AAT?$AAI?$AAO?$AAN?$AA?5?$AAI?$AAN?$AA?5?$AAI?$AAS?$AAT?$AA?5?$AAf?$AAo@|
  00730		 |$LN28@ProcessMid|
  00730	00000000	 DCD         |dpCurSettings|
  00734		 |$LN25@ProcessMid|
  00734		 |$LN23@ProcessMid|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37598| DCD	|$LN5@DeltaTicks|
	DCD	0x40000f04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeltaTicksToSamples@CMidiStream@@QAAII@Z| PROC ; CMidiStream::DeltaTicksToSamples

; 127  :     {

  00000		 |$LN5@DeltaTicks|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37595|

; 128  :         return (DeltaTicks * m_SamplesPerTick);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833c06	 add         r3, r3, #6, 24
  00018	e2833008	 add         r3, r3, #8
  0001c	e59d2010	 ldr         r2, [sp, #0x10]
  00020	e5933000	 ldr         r3, [r3]
  00024	e0030392	 mul         r3, r2, r3
  00028	e58d3000	 str         r3, [sp]

; 129  :     }

  0002c	e59d0000	 ldr         r0, [sp]
  00030	e28dd004	 add         sp, sp, #4
  00034	e89d6000	 ldmia       sp, {sp, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M37596|

			 ENDP  ; |?DeltaTicksToSamples@CMidiStream@@QAAII@Z|, CMidiStream::DeltaTicksToSamples

	EXPORT	|?ClearBuffer@StreamContext@@SAXPAE0@Z|	; StreamContext::ClearBuffer
	EXPORT	|?StillPlaying@StreamContext@@QAAHXZ|	; StreamContext::StillPlaying
	EXPORT	|?Render@CMidiStream@@UAAPAEPAE00@Z|	; CMidiStream::Render
	IMPORT	|?Render@CMidiNote@@QAAPAEPAE00@Z|	; CMidiNote::Render
	IMPORT	|__rt_udiv|

  00040			 AREA	 |.pdata|, PDATA
|$T37609| DCD	|$LN17@Render|
	DCD	0x40007904
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00734			 AREA	 |.text|, CODE, ARM

  00734		 |?Render@CMidiStream@@UAAPAEPAE00@Z| PROC ; CMidiStream::Render

; 225  : {

  00734		 |$LN17@Render|
  00734	e1a0c00d	 mov         r12, sp
  00738	e92d000f	 stmdb       sp!, {r0 - r3}
  0073c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00740	e24dd028	 sub         sp, sp, #0x28
  00744		 |$M37606|

; 226  : 
; 227  :     // DEBUGMSG(ZONE_MIDI, (TEXT("Entering CMidiStream::Render, pBuffer=0x%x, current delta = %d\r\n"), pBuffer, m_DeltaSampleCount));
; 228  : 
; 229  :     // If we're not running, or we don't have any buffers queued and the note list is empty,
; 230  :     // just return
; 231  :     if ( (!m_bRunning) || (!StillPlaying() && IsListEmpty(&m_NoteList)) )

  00744	e59d3034	 ldr         r3, [sp, #0x34]
  00748	e2833010	 add         r3, r3, #0x10
  0074c	e5933000	 ldr         r3, [r3]
  00750	e3530000	 cmp         r3, #0
  00754	0a000016	 beq         |$LN9@Render|
  00758	e59d0034	 ldr         r0, [sp, #0x34]
  0075c	eb000000	 bl          |?StillPlaying@StreamContext@@QAAHXZ|
  00760	e58d0018	 str         r0, [sp, #0x18]
  00764	e59d3018	 ldr         r3, [sp, #0x18]
  00768	e3530000	 cmp         r3, #0
  0076c	1a000013	 bne         |$LN10@Render|
  00770	e59d3034	 ldr         r3, [sp, #0x34]
  00774	e2833c05	 add         r3, r3, #5, 24
  00778	e28310e8	 add         r1, r3, #0xE8
  0077c	e59d3034	 ldr         r3, [sp, #0x34]
  00780	e2833c05	 add         r3, r3, #5, 24
  00784	e28320e8	 add         r2, r3, #0xE8
  00788	e5913000	 ldr         r3, [r1]
  0078c	e1530002	 cmp         r3, r2
  00790	1a000002	 bne         |$LN13@Render|
  00794	e3a03001	 mov         r3, #1
  00798	e58d301c	 str         r3, [sp, #0x1C]
  0079c	ea000001	 b           |$LN14@Render|
  007a0		 |$LN13@Render|
  007a0	e3a03000	 mov         r3, #0
  007a4	e58d301c	 str         r3, [sp, #0x1C]
  007a8		 |$LN14@Render|
  007a8	e59d301c	 ldr         r3, [sp, #0x1C]
  007ac	e3530000	 cmp         r3, #0
  007b0	0a000002	 beq         |$LN10@Render|
  007b4		 |$LN9@Render|

; 232  :     {
; 233  :         // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::Render nothing to do\r\n")));
; 234  :         return pBuffer;

  007b4	e59d3038	 ldr         r3, [sp, #0x38]
  007b8	e58d3014	 str         r3, [sp, #0x14]
  007bc	ea000051	 b           |$LN11@Render|
  007c0		 |$LN10@Render|
  007c0		 |$LN8@Render|

; 235  :     }
; 236  : 
; 237  :     while (pBuffer<pBufferEnd)

  007c0	e59d2038	 ldr         r2, [sp, #0x38]
  007c4	e59d303c	 ldr         r3, [sp, #0x3C]
  007c8	e1520003	 cmp         r2, r3
  007cc	2a000046	 bcs         |$LN7@Render|

; 238  :     {
; 239  :         // Process pending midi messages and get relative sample # of next midi event
; 240  :         UINT32 NextMidiEvent;
; 241  :         NextMidiEvent = ProcessMidiStream();

  007d0	e59d0034	 ldr         r0, [sp, #0x34]
  007d4	eb000000	 bl          |?ProcessMidiStream@CMidiStream@@QAAIXZ|
  007d8	e58d0020	 str         r0, [sp, #0x20]
  007dc	e59d3020	 ldr         r3, [sp, #0x20]
  007e0	e58d3000	 str         r3, [sp]

; 242  : 
; 243  :         PBYTE pBufferEndEvent;  // Where to stop on this pass
; 244  : 
; 245  :         // If NextMidiEvent returns 0, it means there are no more midi messages left in the queue.
; 246  :         if (NextMidiEvent==0)

  007e4	e59d3000	 ldr         r3, [sp]
  007e8	e3530000	 cmp         r3, #0
  007ec	1a000002	 bne         |$LN6@Render|

; 247  :         {
; 248  :             // Just process the rest of this buffer
; 249  :             pBufferEndEvent=pBufferEnd;

  007f0	e59d303c	 ldr         r3, [sp, #0x3C]
  007f4	e58d3008	 str         r3, [sp, #8]

; 250  :         }
; 251  :         // NextMidiEvent is non-zero, and represents the delta sample value of the next midi event
; 252  :         else

  007f8	ea00000b	 b           |$LN5@Render|
  007fc		 |$LN6@Render|

; 253  :         {
; 254  :             // Convert to be a pointer in this buffer
; 255  :             pBufferEndEvent = pBuffer + (NextMidiEvent * (sizeof(HWSAMPLE) * OUTCHANNELS));

  007fc	e59d1000	 ldr         r1, [sp]
  00800	e3a03004	 mov         r3, #4
  00804	e0020391	 mul         r2, r1, r3
  00808	e59d3038	 ldr         r3, [sp, #0x38]
  0080c	e0833002	 add         r3, r3, r2
  00810	e58d3008	 str         r3, [sp, #8]

; 256  : 
; 257  :             // If the next event occurs after this buffer, just finish processing this buffer
; 258  :             if (pBufferEndEvent>pBufferEnd)

  00814	e59d2008	 ldr         r2, [sp, #8]
  00818	e59d303c	 ldr         r3, [sp, #0x3C]
  0081c	e1520003	 cmp         r2, r3
  00820	9a000001	 bls         |$LN4@Render|

; 259  :             {
; 260  :                 pBufferEndEvent=pBufferEnd;

  00824	e59d303c	 ldr         r3, [sp, #0x3C]
  00828	e58d3008	 str         r3, [sp, #8]
  0082c		 |$LN4@Render|
  0082c		 |$LN5@Render|

; 261  :             }
; 262  :         }
; 263  : 
; 264  :         // Update the delta for the samples we're about to process
; 265  :         m_DeltaSampleCount += ((pBufferEndEvent-pBuffer)/(sizeof(HWSAMPLE) * OUTCHANNELS));

  0082c	e59d3034	 ldr         r3, [sp, #0x34]
  00830	e2833c06	 add         r3, r3, #6, 24
  00834	e283400c	 add         r4, r3, #0xC
  00838	e59d2008	 ldr         r2, [sp, #8]
  0083c	e59d3038	 ldr         r3, [sp, #0x38]
  00840	e0421003	 sub         r1, r2, r3
  00844	e3a00004	 mov         r0, #4
  00848	eb000000	 bl          __rt_udiv
  0084c	e5943000	 ldr         r3, [r4]
  00850	e0832000	 add         r2, r3, r0
  00854	e59d3034	 ldr         r3, [sp, #0x34]
  00858	e2833c06	 add         r3, r3, #6, 24
  0085c	e283300c	 add         r3, r3, #0xC
  00860	e5832000	 str         r2, [r3]

; 266  : 
; 267  :         // Process existing notes
; 268  :         PLIST_ENTRY pListEntry;
; 269  :         pListEntry = m_NoteList.Flink;

  00864	e59d3034	 ldr         r3, [sp, #0x34]
  00868	e2833c05	 add         r3, r3, #5, 24
  0086c	e28330e8	 add         r3, r3, #0xE8
  00870	e5933000	 ldr         r3, [r3]
  00874	e58d3004	 str         r3, [sp, #4]
  00878		 |$LN3@Render|

; 270  :         while (pListEntry != &m_NoteList)

  00878	e59d3034	 ldr         r3, [sp, #0x34]
  0087c	e2833c05	 add         r3, r3, #5, 24
  00880	e28320e8	 add         r2, r3, #0xE8
  00884	e59d3004	 ldr         r3, [sp, #4]
  00888	e1530002	 cmp         r3, r2
  0088c	0a000013	 beq         |$LN2@Render|

; 271  :         {
; 272  :             CMidiNote *pCNote;
; 273  : 
; 274  :             // Get a pointer to the stream context
; 275  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00890	e59d3004	 ldr         r3, [sp, #4]
  00894	e58d3010	 str         r3, [sp, #0x10]

; 276  : 
; 277  :             // Get next list entry, since Render may cause note to go away
; 278  :             pListEntry = pListEntry->Flink;

  00898	e59d3004	 ldr         r3, [sp, #4]
  0089c	e5933000	 ldr         r3, [r3]
  008a0	e58d3004	 str         r3, [sp, #4]

; 279  : 
; 280  :             PBYTE pBufferLastThis;
; 281  :             pBufferLastThis = pCNote->Render(pBuffer, pBufferEndEvent, pBufferLast);

  008a4	e59d3040	 ldr         r3, [sp, #0x40]
  008a8	e59d2008	 ldr         r2, [sp, #8]
  008ac	e59d1038	 ldr         r1, [sp, #0x38]
  008b0	e59d0010	 ldr         r0, [sp, #0x10]
  008b4	eb000000	 bl          |?Render@CMidiNote@@QAAPAEPAE00@Z|
  008b8	e58d0024	 str         r0, [sp, #0x24]
  008bc	e59d3024	 ldr         r3, [sp, #0x24]
  008c0	e58d300c	 str         r3, [sp, #0xC]

; 282  :             if (pBufferLast < pBufferLastThis)

  008c4	e59d2040	 ldr         r2, [sp, #0x40]
  008c8	e59d300c	 ldr         r3, [sp, #0xC]
  008cc	e1520003	 cmp         r2, r3
  008d0	2a000001	 bcs         |$LN1@Render|

; 283  :             {
; 284  :                 pBufferLast = pBufferLastThis;

  008d4	e59d300c	 ldr         r3, [sp, #0xC]
  008d8	e58d3040	 str         r3, [sp, #0x40]
  008dc		 |$LN1@Render|

; 285  :             }
; 286  :         }

  008dc	eaffffe5	 b           |$LN3@Render|
  008e0		 |$LN2@Render|

; 287  : 
; 288  :         pBuffer = pBufferEndEvent;

  008e0	e59d3008	 ldr         r3, [sp, #8]
  008e4	e58d3038	 str         r3, [sp, #0x38]

; 289  :     }

  008e8	eaffffb4	 b           |$LN8@Render|
  008ec		 |$LN7@Render|

; 290  : 
; 291  :     // We need to make sure we clear any unwritten section of the buffer to make sure the DMA controller doesn't stop
; 292  :     StreamContext::ClearBuffer(pBufferLast,pBufferEnd);

  008ec	e59d103c	 ldr         r1, [sp, #0x3C]
  008f0	e59d0040	 ldr         r0, [sp, #0x40]
  008f4	eb000000	 bl          |?ClearBuffer@StreamContext@@SAXPAE0@Z|

; 293  :     pBufferLast=pBufferEnd;

  008f8	e59d303c	 ldr         r3, [sp, #0x3C]
  008fc	e58d3040	 str         r3, [sp, #0x40]

; 294  : 
; 295  :     // DEBUGMSG(ZONE_MIDI, (TEXT("CMidiStream::Render returning, pBufferLast=0x%x, pBufferEnd=0x%x\r\n"),pBufferLast,pBufferEnd));
; 296  :     return pBufferLast;

  00900	e59d3040	 ldr         r3, [sp, #0x40]
  00904	e58d3014	 str         r3, [sp, #0x14]
  00908		 |$LN11@Render|

; 297  : }

  00908	e59d0014	 ldr         r0, [sp, #0x14]
  0090c	e28dd028	 add         sp, sp, #0x28
  00910	e89d6010	 ldmia       sp, {r4, sp, lr}
  00914	e12fff1e	 bx          lr
  00918		 |$M37607|

			 ENDP  ; |?Render@CMidiStream@@UAAPAEPAE00@Z|, CMidiStream::Render

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37617| DCD	|$LN7@StillPlayi|
	DCD	0x40001404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StillPlaying@StreamContext@@QAAHXZ| PROC ; StreamContext::StillPlaying

; 91   :     BOOL StillPlaying() {return (m_lpWaveHdrHead!=NULL);}

  00000		 |$LN7@StillPlayi|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37614|
  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833038	 add         r3, r3, #0x38
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000002	 beq         |$LN3@StillPlayi|
  00024	e3a03001	 mov         r3, #1
  00028	e58d3004	 str         r3, [sp, #4]
  0002c	ea000001	 b           |$LN4@StillPlayi|
  00030		 |$LN3@StillPlayi|
  00030	e3a03000	 mov         r3, #0
  00034	e58d3004	 str         r3, [sp, #4]
  00038		 |$LN4@StillPlayi|
  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e58d3000	 str         r3, [sp]
  00040	e59d0000	 ldr         r0, [sp]
  00044	e28dd008	 add         sp, sp, #8
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M37615|

			 ENDP  ; |?StillPlaying@StreamContext@@QAAHXZ|, StreamContext::StillPlaying

	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T37624| DCD	|$LN5@ClearBuffe|
	DCD	0x40000b03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClearBuffer@StreamContext@@SAXPAE0@Z| PROC ; StreamContext::ClearBuffer

; 159  :     static void ClearBuffer(PBYTE pStart, PBYTE pEnd) {memset(pStart,0,pEnd-pStart);}

  00000		 |$LN5@ClearBuffe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37621|
  0000c	e59d200c	 ldr         r2, [sp, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e0422003	 sub         r2, r2, r3
  00018	e3a01000	 mov         r1, #0
  0001c	e59d0008	 ldr         r0, [sp, #8]
  00020	eb000000	 bl          memset
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M37622|

			 ENDP  ; |?ClearBuffer@StreamContext@@SAXPAE0@Z|, StreamContext::ClearBuffer

	EXPORT	|?MidiMessage@CMidiStream@@QAAKI@Z|	; CMidiStream::MidiMessage

  00048			 AREA	 |.pdata|, PDATA
|$T37634| DCD	|$LN8@MidiMessag|
	DCD	0x40003204
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00918			 AREA	 |.text|, CODE, ARM

  00918		 |?MidiMessage@CMidiStream@@QAAKI@Z| PROC ; CMidiStream::MidiMessage

; 307  : {

  00918		 |$LN8@MidiMessag|
  00918	e1a0c00d	 mov         r12, sp
  0091c	e92d0003	 stmdb       sp!, {r0, r1}
  00920	e92d5000	 stmdb       sp!, {r12, lr}
  00924	e24dd010	 sub         sp, sp, #0x10
  00928		 |$M37631|

; 308  :     HRESULT Result;
; 309  : 
; 310  :     Result = InternalMidiMessage(dwMessage);

  00928	e59d101c	 ldr         r1, [sp, #0x1C]
  0092c	e59d0018	 ldr         r0, [sp, #0x18]
  00930	eb000000	 bl          |?InternalMidiMessage@CMidiStream@@QAAJI@Z|
  00934	e58d0008	 str         r0, [sp, #8]
  00938	e59d3008	 ldr         r3, [sp, #8]
  0093c	e58d3000	 str         r3, [sp]

; 311  : 
; 312  :     // If we're running, and the notelist has notes to render, make sure DMA is enabled
; 313  :     if ( (m_bRunning) && (m_NoteList.Flink != &m_NoteList) )

  00940	e59d3018	 ldr         r3, [sp, #0x18]
  00944	e2833010	 add         r3, r3, #0x10
  00948	e5933000	 ldr         r3, [r3]
  0094c	e3530000	 cmp         r3, #0
  00950	0a000014	 beq         |$LN1@MidiMessag|
  00954	e59d3018	 ldr         r3, [sp, #0x18]
  00958	e2833c05	 add         r3, r3, #5, 24
  0095c	e28310e8	 add         r1, r3, #0xE8
  00960	e59d3018	 ldr         r3, [sp, #0x18]
  00964	e2833c05	 add         r3, r3, #5, 24
  00968	e28320e8	 add         r2, r3, #0xE8
  0096c	e5913000	 ldr         r3, [r1]
  00970	e1530002	 cmp         r3, r2
  00974	0a00000b	 beq         |$LN1@MidiMessag|

; 314  :     {
; 315  :         m_pDeviceContext->StreamReadyToRender(this);

  00978	e59d1018	 ldr         r1, [sp, #0x18]
  0097c	e59d3018	 ldr         r3, [sp, #0x18]
  00980	e2833050	 add         r3, r3, #0x50
  00984	e5932000	 ldr         r2, [r3]
  00988	e59d3018	 ldr         r3, [sp, #0x18]
  0098c	e2833050	 add         r3, r3, #0x50
  00990	e5930000	 ldr         r0, [r3]
  00994	e5923000	 ldr         r3, [r2]
  00998	e283300c	 add         r3, r3, #0xC
  0099c	e5933000	 ldr         r3, [r3]
  009a0	e1a0e00f	 mov         lr, pc
  009a4	e12fff13	 bx          r3
  009a8		 |$LN1@MidiMessag|

; 316  :     }
; 317  : 
; 318  :     return (Result==S_OK) ? MMSYSERR_NOERROR : MMSYSERR_ERROR;

  009a8	e59d3000	 ldr         r3, [sp]
  009ac	e3530000	 cmp         r3, #0
  009b0	1a000002	 bne         |$LN4@MidiMessag|
  009b4	e3a03000	 mov         r3, #0
  009b8	e58d300c	 str         r3, [sp, #0xC]
  009bc	ea000001	 b           |$LN5@MidiMessag|
  009c0		 |$LN4@MidiMessag|
  009c0	e3a03001	 mov         r3, #1
  009c4	e58d300c	 str         r3, [sp, #0xC]
  009c8		 |$LN5@MidiMessag|
  009c8	e59d300c	 ldr         r3, [sp, #0xC]
  009cc	e58d3004	 str         r3, [sp, #4]

; 319  : }

  009d0	e59d0004	 ldr         r0, [sp, #4]
  009d4	e28dd010	 add         sp, sp, #0x10
  009d8	e89d6000	 ldmia       sp, {sp, lr}
  009dc	e12fff1e	 bx          lr
  009e0		 |$M37632|

			 ENDP  ; |?MidiMessage@CMidiStream@@QAAKI@Z|, CMidiStream::MidiMessage

	EXPORT	|?NoteOff@CMidiStream@@QAAJIII@Z|	; CMidiStream::NoteOff
	EXPORT	|?NoteOn@CMidiStream@@QAAJIII@Z|	; CMidiStream::NoteOn
	EXPORT	|?MidiData@CMidiStream@@QAAJI@Z|	; CMidiStream::MidiData

  00050			 AREA	 |.pdata|, PDATA
|$T37641| DCD	|$LN13@InternalMi|
	DCD	0x40005604
; Function compile flags: /Odtp

  009e0			 AREA	 |.text|, CODE, ARM

  009e0		 |?InternalMidiMessage@CMidiStream@@QAAJI@Z| PROC ; CMidiStream::InternalMidiMessage

; 330  : {

  009e0		 |$LN13@InternalMi|
  009e0	e1a0c00d	 mov         r12, sp
  009e4	e92d0003	 stmdb       sp!, {r0, r1}
  009e8	e92d5000	 stmdb       sp!, {r12, lr}
  009ec	e24dd024	 sub         sp, sp, #0x24
  009f0		 |$M37638|

; 331  :     UINT32 OpCode = dwData & 0xF0000000;

  009f0	e59d3030	 ldr         r3, [sp, #0x30]
  009f4	e203320f	 and         r3, r3, #0xF, 4
  009f8	e58d3000	 str         r3, [sp]

; 332  :     switch (OpCode)

  009fc	e59d3000	 ldr         r3, [sp]
  00a00	e58d3010	 str         r3, [sp, #0x10]
  00a04	e59d3010	 ldr         r3, [sp, #0x10]
  00a08	e3530202	 cmp         r3, #2, 4
  00a0c	8a000009	 bhi         |$LN10@InternalMi|
  00a10	e59d3010	 ldr         r3, [sp, #0x10]
  00a14	e3530202	 cmp         r3, #2, 4
  00a18	0a00001d	 beq         |$LN3@InternalMi|
  00a1c	e59d3010	 ldr         r3, [sp, #0x10]
  00a20	e3530000	 cmp         r3, #0
  00a24	0a000007	 beq         |$LN5@InternalMi|
  00a28	e59d3010	 ldr         r3, [sp, #0x10]
  00a2c	e3530201	 cmp         r3, #1, 4
  00a30	0a00000b	 beq         |$LN4@InternalMi|
  00a34	ea000038	 b           |$LN6@InternalMi|
  00a38		 |$LN10@InternalMi|
  00a38	e59d3010	 ldr         r3, [sp, #0x10]
  00a3c	e3530203	 cmp         r3, #3, 4
  00a40	0a000013	 beq         |$LN3@InternalMi|
  00a44	ea000034	 b           |$LN6@InternalMi|
  00a48		 |$LN5@InternalMi|

; 333  :     {
; 334  :     case 0:
; 335  :         return MidiData(dwData);

  00a48	e59d1030	 ldr         r1, [sp, #0x30]
  00a4c	e59d002c	 ldr         r0, [sp, #0x2C]
  00a50	eb000000	 bl          |?MidiData@CMidiStream@@QAAJI@Z|
  00a54	e58d0014	 str         r0, [sp, #0x14]
  00a58	e59d3014	 ldr         r3, [sp, #0x14]
  00a5c	e58d300c	 str         r3, [sp, #0xC]
  00a60	ea000030	 b           |$LN8@InternalMi|
  00a64		 |$LN4@InternalMi|

; 336  :     case MIDI_MESSAGE_UPDATETEMPO:
; 337  :         m_USecPerQuarterNote  = (dwData & 0xFFFFFF);

  00a64	e59d2030	 ldr         r2, [sp, #0x30]
  00a68	e3e034ff	 mvn         r3, #0xFF, 8
  00a6c	e0022003	 and         r2, r2, r3
  00a70	e59d302c	 ldr         r3, [sp, #0x2C]
  00a74	e2833c06	 add         r3, r3, #6, 24
  00a78	e5832000	 str         r2, [r3]

; 338  :         return UpdateTempo();

  00a7c	e59d002c	 ldr         r0, [sp, #0x2C]
  00a80	eb000000	 bl          |?UpdateTempo@CMidiStream@@QAAJXZ|
  00a84	e58d0018	 str         r0, [sp, #0x18]
  00a88	e59d3018	 ldr         r3, [sp, #0x18]
  00a8c	e58d300c	 str         r3, [sp, #0xC]
  00a90	ea000024	 b           |$LN8@InternalMi|
  00a94		 |$LN3@InternalMi|

; 339  :     case MIDI_MESSAGE_FREQGENON:
; 340  :     case MIDI_MESSAGE_FREQGENOFF:
; 341  :         {
; 342  :             UINT32 dwNote = ((dwData) & 0xffff);

  00a94	e59d2030	 ldr         r2, [sp, #0x30]
  00a98	e3a03cff	 mov         r3, #0xFF, 24
  00a9c	e38330ff	 orr         r3, r3, #0xFF
  00aa0	e0023003	 and         r3, r2, r3
  00aa4	e58d3008	 str         r3, [sp, #8]

; 343  :             UINT32 dwVelocity = ((dwData >> 16) & 0x7f) ;

  00aa8	e59d3030	 ldr         r3, [sp, #0x30]
  00aac	e1a03483	 mov         r3, r3, lsl #9
  00ab0	e1a03ca3	 mov         r3, r3, lsr #25
  00ab4	e58d3004	 str         r3, [sp, #4]

; 344  :             if ((OpCode==MIDI_MESSAGE_FREQGENON)  && (dwVelocity>0))

  00ab8	e59d3000	 ldr         r3, [sp]
  00abc	e3530202	 cmp         r3, #2, 4
  00ac0	1a00000c	 bne         |$LN2@InternalMi|
  00ac4	e59d3004	 ldr         r3, [sp, #4]
  00ac8	e3530000	 cmp         r3, #0
  00acc	9a000009	 bls         |$LN2@InternalMi|

; 345  :             {
; 346  :                 return NoteOn(dwNote, dwVelocity, FREQCHANNEL);

  00ad0	e3a03010	 mov         r3, #0x10
  00ad4	e59d2004	 ldr         r2, [sp, #4]
  00ad8	e59d1008	 ldr         r1, [sp, #8]
  00adc	e59d002c	 ldr         r0, [sp, #0x2C]
  00ae0	eb000000	 bl          |?NoteOn@CMidiStream@@QAAJIII@Z|
  00ae4	e58d001c	 str         r0, [sp, #0x1C]
  00ae8	e59d301c	 ldr         r3, [sp, #0x1C]
  00aec	e58d300c	 str         r3, [sp, #0xC]
  00af0	ea00000c	 b           |$LN8@InternalMi|

; 347  :             }
; 348  :             else

  00af4	ea000008	 b           |$LN1@InternalMi|
  00af8		 |$LN2@InternalMi|

; 349  :             {
; 350  :                 return NoteOff(dwNote, dwVelocity, FREQCHANNEL);

  00af8	e3a03010	 mov         r3, #0x10
  00afc	e59d2004	 ldr         r2, [sp, #4]
  00b00	e59d1008	 ldr         r1, [sp, #8]
  00b04	e59d002c	 ldr         r0, [sp, #0x2C]
  00b08	eb000000	 bl          |?NoteOff@CMidiStream@@QAAJIII@Z|
  00b0c	e58d0020	 str         r0, [sp, #0x20]
  00b10	e59d3020	 ldr         r3, [sp, #0x20]
  00b14	e58d300c	 str         r3, [sp, #0xC]
  00b18	ea000002	 b           |$LN8@InternalMi|
  00b1c		 |$LN1@InternalMi|
  00b1c		 |$LN6@InternalMi|

; 351  :             }
; 352  :         }
; 353  :     }
; 354  : 
; 355  :     return E_NOTIMPL;

  00b1c	e3a03106	 mov         r3, #6, 2
  00b20	e3833901	 orr         r3, r3, #1, 18
  00b24	e58d300c	 str         r3, [sp, #0xC]
  00b28		 |$LN8@InternalMi|

; 356  : }

  00b28	e59d000c	 ldr         r0, [sp, #0xC]
  00b2c	e28dd024	 add         sp, sp, #0x24
  00b30	e89d6000	 ldmia       sp, {sp, lr}
  00b34	e12fff1e	 bx          lr
  00b38		 |$M37639|

			 ENDP  ; |?InternalMidiMessage@CMidiStream@@QAAJI@Z|, CMidiStream::InternalMidiMessage


  00058			 AREA	 |.pdata|, PDATA
|$T37647| DCD	|$LN16@MidiData|
	DCD	0x40005704
; Function compile flags: /Odtp

  00b38			 AREA	 |.text|, CODE, ARM

  00b38		 |?MidiData@CMidiStream@@QAAJI@Z| PROC	; CMidiStream::MidiData

; 365  : {

  00b38		 |$LN16@MidiData|
  00b38	e1a0c00d	 mov         r12, sp
  00b3c	e92d0003	 stmdb       sp!, {r0, r1}
  00b40	e92d5000	 stmdb       sp!, {r12, lr}
  00b44	e24dd024	 sub         sp, sp, #0x24
  00b48		 |$M37644|

; 366  :     HRESULT Result=E_NOTIMPL;

  00b48	e3a03106	 mov         r3, #6, 2
  00b4c	e3833901	 orr         r3, r3, #1, 18
  00b50	e58d3004	 str         r3, [sp, #4]

; 367  :     UINT32 dwChannel;
; 368  :     UINT32 dwNote;
; 369  :     UINT32 dwVelocity;
; 370  : 
; 371  :     if (dwData & 0x80)

  00b54	e59d3030	 ldr         r3, [sp, #0x30]
  00b58	e3130080	 tst         r3, #0x80
  00b5c	0a000007	 beq         |$LN11@MidiData|

; 372  :     {
; 373  :         m_RunningStatus = dwData&0xFF;      // status byte...

  00b60	e59d3030	 ldr         r3, [sp, #0x30]
  00b64	e20330ff	 and         r3, r3, #0xFF
  00b68	e20320ff	 and         r2, r3, #0xFF
  00b6c	e59d302c	 ldr         r3, [sp, #0x2C]
  00b70	e2833c05	 add         r3, r3, #5, 24
  00b74	e28330fc	 add         r3, r3, #0xFC
  00b78	e5c32000	 strb        r2, [r3]

; 374  :     }
; 375  :     else

  00b7c	ea000007	 b           |$LN10@MidiData|
  00b80		 |$LN11@MidiData|

; 376  :     {
; 377  :         dwData = (dwData<<8) | m_RunningStatus;

  00b80	e59d3030	 ldr         r3, [sp, #0x30]
  00b84	e1a02403	 mov         r2, r3, lsl #8
  00b88	e59d302c	 ldr         r3, [sp, #0x2C]
  00b8c	e2833c05	 add         r3, r3, #5, 24
  00b90	e28330fc	 add         r3, r3, #0xFC
  00b94	e5d33000	 ldrb        r3, [r3]
  00b98	e1823003	 orr         r3, r2, r3
  00b9c	e58d3030	 str         r3, [sp, #0x30]
  00ba0		 |$LN10@MidiData|

; 378  :     }
; 379  : 
; 380  :     dwChannel  = (dwData & 0x0f) ;

  00ba0	e59d3030	 ldr         r3, [sp, #0x30]
  00ba4	e203300f	 and         r3, r3, #0xF
  00ba8	e58d300c	 str         r3, [sp, #0xC]

; 381  :     dwNote     = ((dwData >> 8) & 0x7f) ;

  00bac	e59d3030	 ldr         r3, [sp, #0x30]
  00bb0	e1a03883	 mov         r3, r3, lsl #17
  00bb4	e1a03ca3	 mov         r3, r3, lsr #25
  00bb8	e58d3008	 str         r3, [sp, #8]

; 382  :     dwVelocity = ((dwData >> 16) & 0x7f) ;

  00bbc	e59d3030	 ldr         r3, [sp, #0x30]
  00bc0	e1a03483	 mov         r3, r3, lsl #9
  00bc4	e1a03ca3	 mov         r3, r3, lsr #25
  00bc8	e58d3000	 str         r3, [sp]

; 383  : 
; 384  :     switch (dwData & 0xf0)

  00bcc	e59d3030	 ldr         r3, [sp, #0x30]
  00bd0	e20330f0	 and         r3, r3, #0xF0
  00bd4	e58d3014	 str         r3, [sp, #0x14]
  00bd8	e59d3014	 ldr         r3, [sp, #0x14]
  00bdc	e3530080	 cmp         r3, #0x80
  00be0	0a000012	 beq         |$LN5@MidiData|
  00be4	e59d3014	 ldr         r3, [sp, #0x14]
  00be8	e3530090	 cmp         r3, #0x90
  00bec	0a000003	 beq         |$LN7@MidiData|
  00bf0	e59d3014	 ldr         r3, [sp, #0x14]
  00bf4	e35300b0	 cmp         r3, #0xB0
  00bf8	0a000015	 beq         |$LN4@MidiData|
  00bfc	ea00001e	 b           |$LN8@MidiData|
  00c00		 |$LN7@MidiData|

; 385  :     {
; 386  :     case 0x90:  // Note on
; 387  :         if (dwVelocity!=0)

  00c00	e59d3000	 ldr         r3, [sp]
  00c04	e3530000	 cmp         r3, #0
  00c08	0a000008	 beq         |$LN6@MidiData|

; 388  :         {
; 389  :             Result = NoteOn(dwNote, dwVelocity, dwChannel);

  00c0c	e59d300c	 ldr         r3, [sp, #0xC]
  00c10	e59d2000	 ldr         r2, [sp]
  00c14	e59d1008	 ldr         r1, [sp, #8]
  00c18	e59d002c	 ldr         r0, [sp, #0x2C]
  00c1c	eb000000	 bl          |?NoteOn@CMidiStream@@QAAJIII@Z|
  00c20	e58d0018	 str         r0, [sp, #0x18]
  00c24	e59d3018	 ldr         r3, [sp, #0x18]
  00c28	e58d3004	 str         r3, [sp, #4]

; 390  :             break;

  00c2c	ea000012	 b           |$LN8@MidiData|
  00c30		 |$LN6@MidiData|
  00c30		 |$LN5@MidiData|

; 391  :         }
; 392  :         // If dwVelocity is 0, this is really a note off message, so fall through
; 393  : 
; 394  :     case 0x80:  // Note off
; 395  :         Result = NoteOff(dwNote, dwVelocity, dwChannel);

  00c30	e59d300c	 ldr         r3, [sp, #0xC]
  00c34	e59d2000	 ldr         r2, [sp]
  00c38	e59d1008	 ldr         r1, [sp, #8]
  00c3c	e59d002c	 ldr         r0, [sp, #0x2C]
  00c40	eb000000	 bl          |?NoteOff@CMidiStream@@QAAJIII@Z|
  00c44	e58d001c	 str         r0, [sp, #0x1C]
  00c48	e59d301c	 ldr         r3, [sp, #0x1C]
  00c4c	e58d3004	 str         r3, [sp, #4]

; 396  :         break;

  00c50	ea000009	 b           |$LN8@MidiData|
  00c54		 |$LN4@MidiData|

; 397  : 
; 398  :     case 0xB0:  // Control change
; 399  :         {
; 400  :             switch (dwNote)

  00c54	e59d3008	 ldr         r3, [sp, #8]
  00c58	e353007b	 cmp         r3, #0x7B
  00c5c	0a000000	 beq         |$LN1@MidiData|
  00c60	ea000005	 b           |$LN2@MidiData|
  00c64		 |$LN1@MidiData|

; 401  :             {
; 402  :             case 123:   // turns all notes off
; 403  :                 {
; 404  :                     Result = AllNotesOff(0);

  00c64	e3a01000	 mov         r1, #0
  00c68	e59d002c	 ldr         r0, [sp, #0x2C]
  00c6c	eb000000	 bl          |?AllNotesOff@CMidiStream@@QAAJI@Z|
  00c70	e58d0020	 str         r0, [sp, #0x20]
  00c74	e59d3020	 ldr         r3, [sp, #0x20]
  00c78	e58d3004	 str         r3, [sp, #4]
  00c7c		 |$LN2@MidiData|
  00c7c		 |$LN8@MidiData|

; 405  :                     break;
; 406  :                 }
; 407  :             }
; 408  :             break;
; 409  :         }
; 410  :     }
; 411  : 
; 412  :     return Result;

  00c7c	e59d3004	 ldr         r3, [sp, #4]
  00c80	e58d3010	 str         r3, [sp, #0x10]

; 413  : }

  00c84	e59d0010	 ldr         r0, [sp, #0x10]
  00c88	e28dd024	 add         sp, sp, #0x24
  00c8c	e89d6000	 ldmia       sp, {sp, lr}
  00c90	e12fff1e	 bx          lr
  00c94		 |$M37645|

			 ENDP  ; |?MidiData@CMidiStream@@QAAJI@Z|, CMidiStream::MidiData

	EXPORT	|?NoteChannel@CMidiNote@@QAAIXZ|	; CMidiNote::NoteChannel
	EXPORT	|?NoteVal@CMidiNote@@QAAIXZ|		; CMidiNote::NoteVal
	EXPORT	|?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z| ; CMidiStream::FindNote

  00060			 AREA	 |.pdata|, PDATA
|$T37653| DCD	|$LN8@FindNote|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00c94			 AREA	 |.text|, CODE, ARM

  00c94		 |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z| PROC ; CMidiStream::FindNote

; 423  : {

  00c94		 |$LN8@FindNote|
  00c94	e1a0c00d	 mov         r12, sp
  00c98	e92d0007	 stmdb       sp!, {r0 - r2}
  00c9c	e92d5000	 stmdb       sp!, {r12, lr}
  00ca0	e24dd014	 sub         sp, sp, #0x14
  00ca4		 |$M37650|

; 424  :     PLIST_ENTRY pListEntry;
; 425  :     CMidiNote *pCNote;
; 426  :     pListEntry = m_NoteList.Flink;

  00ca4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ca8	e2833c05	 add         r3, r3, #5, 24
  00cac	e28330e8	 add         r3, r3, #0xE8
  00cb0	e5933000	 ldr         r3, [r3]
  00cb4	e58d3000	 str         r3, [sp]
  00cb8		 |$LN3@FindNote|

; 427  :     while (pListEntry != &m_NoteList)

  00cb8	e59d301c	 ldr         r3, [sp, #0x1C]
  00cbc	e2833c05	 add         r3, r3, #5, 24
  00cc0	e28320e8	 add         r2, r3, #0xE8
  00cc4	e59d3000	 ldr         r3, [sp]
  00cc8	e1530002	 cmp         r3, r2
  00ccc	0a000016	 beq         |$LN2@FindNote|

; 428  :     {
; 429  :         // Get a pointer to the stream context
; 430  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00cd0	e59d3000	 ldr         r3, [sp]
  00cd4	e58d3004	 str         r3, [sp, #4]

; 431  : 
; 432  :         if (pCNote->NoteVal()==dwNote && pCNote->NoteChannel()==dwChannel)

  00cd8	e59d0004	 ldr         r0, [sp, #4]
  00cdc	eb000000	 bl          |?NoteVal@CMidiNote@@QAAIXZ|
  00ce0	e58d000c	 str         r0, [sp, #0xC]
  00ce4	e59d200c	 ldr         r2, [sp, #0xC]
  00ce8	e59d3020	 ldr         r3, [sp, #0x20]
  00cec	e1520003	 cmp         r2, r3
  00cf0	1a000009	 bne         |$LN1@FindNote|
  00cf4	e59d0004	 ldr         r0, [sp, #4]
  00cf8	eb000000	 bl          |?NoteChannel@CMidiNote@@QAAIXZ|
  00cfc	e58d0010	 str         r0, [sp, #0x10]
  00d00	e59d2010	 ldr         r2, [sp, #0x10]
  00d04	e59d3024	 ldr         r3, [sp, #0x24]
  00d08	e1520003	 cmp         r2, r3
  00d0c	1a000002	 bne         |$LN1@FindNote|

; 433  :         {
; 434  :             return pCNote;

  00d10	e59d3004	 ldr         r3, [sp, #4]
  00d14	e58d3008	 str         r3, [sp, #8]
  00d18	ea000005	 b           |$LN4@FindNote|
  00d1c		 |$LN1@FindNote|

; 435  :         }
; 436  : 
; 437  :         pListEntry = pListEntry->Flink;

  00d1c	e59d3000	 ldr         r3, [sp]
  00d20	e5933000	 ldr         r3, [r3]
  00d24	e58d3000	 str         r3, [sp]

; 438  :     }

  00d28	eaffffe2	 b           |$LN3@FindNote|
  00d2c		 |$LN2@FindNote|

; 439  :     return NULL;

  00d2c	e3a03000	 mov         r3, #0
  00d30	e58d3008	 str         r3, [sp, #8]
  00d34		 |$LN4@FindNote|

; 440  : }

  00d34	e59d0008	 ldr         r0, [sp, #8]
  00d38	e28dd014	 add         sp, sp, #0x14
  00d3c	e89d6000	 ldmia       sp, {sp, lr}
  00d40	e12fff1e	 bx          lr
  00d44		 |$M37651|

			 ENDP  ; |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|, CMidiStream::FindNote

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37659| DCD	|$LN5@NoteVal|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteVal@CMidiNote@@QAAIXZ| PROC	; CMidiNote::NoteVal

; 42   :     UINT32 NoteVal()      {return m_Note;}

  00000		 |$LN5@NoteVal|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37656|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283300c	 add         r3, r3, #0xC
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37657|

			 ENDP  ; |?NoteVal@CMidiNote@@QAAIXZ|, CMidiNote::NoteVal


  00000			 AREA	 |.pdata|, PDATA
|$T37667| DCD	|$LN5@NoteChanne|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteChannel@CMidiNote@@QAAIXZ| PROC	; CMidiNote::NoteChannel

; 43   :     UINT32 NoteChannel()  {return m_Channel;}

  00000		 |$LN5@NoteChanne|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37664|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37665|

			 ENDP  ; |?NoteChannel@CMidiNote@@QAAIXZ|, CMidiNote::NoteChannel

	EXPORT	|?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z| ; CMidiStream::NoteMoveToNoteList
	EXPORT	|?SetVelocity@CMidiNote@@QAAXI@Z|	; CMidiNote::SetVelocity
	IMPORT	|?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z| ; CMidiNote::NoteOn
	IMPORT	|?AddRef@StreamContext@@QAAJXZ|		; StreamContext::AddRef

  00068			 AREA	 |.pdata|, PDATA
|$T37676| DCD	|$LN9@NoteOn|
	DCD	0x40003904
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00d44			 AREA	 |.text|, CODE, ARM

  00d44		 |?NoteOn@CMidiStream@@QAAJIII@Z| PROC	; CMidiStream::NoteOn

; 451  : {

  00d44		 |$LN9@NoteOn|
  00d44	e1a0c00d	 mov         r12, sp
  00d48	e92d000f	 stmdb       sp!, {r0 - r3}
  00d4c	e92d5000	 stmdb       sp!, {r12, lr}
  00d50	e24dd018	 sub         sp, sp, #0x18
  00d54		 |$M37673|

; 452  :     CMidiNote *pCNote=NULL;

  00d54	e3a03000	 mov         r3, #0
  00d58	e58d3008	 str         r3, [sp, #8]

; 453  : 
; 454  :     PLIST_ENTRY pListEntry;
; 455  : 
; 456  :     // First try to find the same note already being played
; 457  :     pCNote = FindNote(dwNote, dwChannel);

  00d5c	e59d202c	 ldr         r2, [sp, #0x2C]
  00d60	e59d1024	 ldr         r1, [sp, #0x24]
  00d64	e59d0020	 ldr         r0, [sp, #0x20]
  00d68	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00d6c	e58d0014	 str         r0, [sp, #0x14]
  00d70	e59d3014	 ldr         r3, [sp, #0x14]
  00d74	e58d3008	 str         r3, [sp, #8]

; 458  :     if (pCNote)

  00d78	e59d3008	 ldr         r3, [sp, #8]
  00d7c	e3530000	 cmp         r3, #0
  00d80	0a000003	 beq         |$LN4@NoteOn|

; 459  :     {
; 460  :         // If so, just set its velocity to the new velocity
; 461  :         // This allows us to change volume while a note is being
; 462  :         // played without any chance of glitching
; 463  :         pCNote->SetVelocity(dwVelocity);

  00d84	e59d1028	 ldr         r1, [sp, #0x28]
  00d88	e59d0008	 ldr         r0, [sp, #8]
  00d8c	eb000000	 bl          |?SetVelocity@CMidiNote@@QAAXI@Z|

; 464  :     }
; 465  :     else

  00d90	ea00001b	 b           |$LN3@NoteOn|
  00d94		 |$LN4@NoteOn|

; 466  :     {
; 467  :         // Try to allocate a note from the free list
; 468  :         pListEntry = m_FreeList.Flink;

  00d94	e59d3020	 ldr         r3, [sp, #0x20]
  00d98	e2833e5f	 add         r3, r3, #0x5F, 28
  00d9c	e5933000	 ldr         r3, [r3]
  00da0	e58d3004	 str         r3, [sp, #4]

; 469  :         if (pListEntry != &m_FreeList)

  00da4	e59d3020	 ldr         r3, [sp, #0x20]
  00da8	e2832e5f	 add         r2, r3, #0x5F, 28
  00dac	e59d3004	 ldr         r3, [sp, #4]
  00db0	e1530002	 cmp         r3, r2
  00db4	0a000004	 beq         |$LN2@NoteOn|

; 470  :         {
; 471  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00db8	e59d3004	 ldr         r3, [sp, #4]
  00dbc	e58d3008	 str         r3, [sp, #8]

; 472  : 
; 473  :             // If we got a note from the free list, do an AddRef on this stream context
; 474  :             AddRef();

  00dc0	e59d0020	 ldr         r0, [sp, #0x20]
  00dc4	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 475  :         }
; 476  :         else

  00dc8	ea000006	 b           |$LN1@NoteOn|
  00dcc		 |$LN2@NoteOn|

; 477  :         {
; 478  :             // Note: if we every support multiple instruments, here we should try to steal the oldest
; 479  :             // note with the same channel before just trying to steal the oldest note.
; 480  : 
; 481  :             // Steal the oldest note (which is the note at the head of the note list)
; 482  :             // Note: This should _never_ fail, since there must be a note on one of the lists!
; 483  :             pListEntry = m_NoteList.Flink;

  00dcc	e59d3020	 ldr         r3, [sp, #0x20]
  00dd0	e2833c05	 add         r3, r3, #5, 24
  00dd4	e28330e8	 add         r3, r3, #0xE8
  00dd8	e5933000	 ldr         r3, [r3]
  00ddc	e58d3004	 str         r3, [sp, #4]

; 484  :             pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00de0	e59d3004	 ldr         r3, [sp, #4]
  00de4	e58d3008	 str         r3, [sp, #8]
  00de8		 |$LN1@NoteOn|

; 485  :         }
; 486  : 
; 487  :         pCNote->NoteOn(this,dwNote,dwVelocity,dwChannel);

  00de8	e59d302c	 ldr         r3, [sp, #0x2C]
  00dec	e58d3000	 str         r3, [sp]
  00df0	e59d3028	 ldr         r3, [sp, #0x28]
  00df4	e59d2024	 ldr         r2, [sp, #0x24]
  00df8	e59d1020	 ldr         r1, [sp, #0x20]
  00dfc	e59d0008	 ldr         r0, [sp, #8]
  00e00	eb000000	 bl          |?NoteOn@CMidiNote@@QAAJPAVCMidiStream@@III@Z|
  00e04		 |$LN3@NoteOn|

; 488  :     }
; 489  : 
; 490  :     // Move the note from whichever list it was on to the note list at the end.
; 491  :     // This ensures that if we reused an existing note, its age gets reset.
; 492  :     NoteMoveToNoteList(pCNote);

  00e04	e59d1008	 ldr         r1, [sp, #8]
  00e08	e59d0020	 ldr         r0, [sp, #0x20]
  00e0c	eb000000	 bl          |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z|

; 493  : 
; 494  :     return S_OK;

  00e10	e3a03000	 mov         r3, #0
  00e14	e58d3010	 str         r3, [sp, #0x10]

; 495  : }

  00e18	e59d0010	 ldr         r0, [sp, #0x10]
  00e1c	e28dd018	 add         sp, sp, #0x18
  00e20	e89d6000	 ldmia       sp, {sp, lr}
  00e24	e12fff1e	 bx          lr
  00e28		 |$M37674|

			 ENDP  ; |?NoteOn@CMidiStream@@QAAJIII@Z|, CMidiStream::NoteOn

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.h

  00000			 AREA	 |.pdata|, PDATA
|$T37681| DCD	|$LN5@SetVelocit|
	DCD	0x40001403
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetVelocity@CMidiNote@@QAAXI@Z| PROC	; CMidiNote::SetVelocity

; 52   :     {

  00000		 |$LN5@SetVelocit|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M37678|

; 53   :         // Reset the bytes left value here. This ensures that if a note is going away we bring it back.
; 54   :         m_dwBytesLeft = (DWORD)-1;

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832028	 add         r2, r3, #0x28
  00014	e3e03000	 mvn         r3, #0
  00018	e5823000	 str         r3, [r2]

; 55   : 
; 56   :         m_Velocity = Velocity;

  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e2832010	 add         r2, r3, #0x10
  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e5823000	 str         r3, [r2]

; 57   :         m_dwGain   = Velocity<<9;

  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e1a02483	 mov         r2, r3, lsl #9
  00034	e59d3008	 ldr         r3, [sp, #8]
  00038	e2833020	 add         r3, r3, #0x20
  0003c	e5832000	 str         r2, [r3]

; 58   :         GainChange();

  00040	e59d0008	 ldr         r0, [sp, #8]
  00044	eb000000	 bl          |?GainChange@CMidiNote@@QAAXXZ|

; 59   :     }

  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M37679|

			 ENDP  ; |?SetVelocity@CMidiNote@@QAAXI@Z|, CMidiNote::SetVelocity


  00000			 AREA	 |.pdata|, PDATA
|$T37688| DCD	|$LN11@NoteMoveTo|
	DCD	0x40002e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z| PROC ; CMidiStream::NoteMoveToNoteList

; 103  :     {

  00000		 |$LN11@NoteMoveTo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M37685|

; 104  :         PLIST_ENTRY pListEntry = &pCMidiNote->m_Link;

  00010	e59d301c	 ldr         r3, [sp, #0x1C]
  00014	e58d3000	 str         r3, [sp]

; 105  :         RemoveEntryList(pListEntry);

  00018	e59d3000	 ldr         r3, [sp]
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e2833004	 add         r3, r3, #4
  00028	e5932000	 ldr         r2, [r3]
  0002c	e59d3004	 ldr         r3, [sp, #4]
  00030	e5933000	 ldr         r3, [r3]
  00034	e5823000	 str         r3, [r2]
  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e2831004	 add         r1, r3, #4
  00040	e59d3004	 ldr         r3, [sp, #4]
  00044	e5933000	 ldr         r3, [r3]
  00048	e2832004	 add         r2, r3, #4
  0004c	e5913000	 ldr         r3, [r1]
  00050	e5823000	 str         r3, [r2]

; 106  :         InsertTailList(&m_NoteList,pListEntry);

  00054	e59d3018	 ldr         r3, [sp, #0x18]
  00058	e2833c05	 add         r3, r3, #5, 24
  0005c	e28330e8	 add         r3, r3, #0xE8
  00060	e58d300c	 str         r3, [sp, #0xC]
  00064	e59d300c	 ldr         r3, [sp, #0xC]
  00068	e2833004	 add         r3, r3, #4
  0006c	e5933000	 ldr         r3, [r3]
  00070	e58d3008	 str         r3, [sp, #8]
  00074	e59d200c	 ldr         r2, [sp, #0xC]
  00078	e59d3000	 ldr         r3, [sp]
  0007c	e5832000	 str         r2, [r3]
  00080	e59d3000	 ldr         r3, [sp]
  00084	e2832004	 add         r2, r3, #4
  00088	e59d3008	 ldr         r3, [sp, #8]
  0008c	e5823000	 str         r3, [r2]
  00090	e59d2000	 ldr         r2, [sp]
  00094	e59d3008	 ldr         r3, [sp, #8]
  00098	e5832000	 str         r2, [r3]
  0009c	e59d300c	 ldr         r3, [sp, #0xC]
  000a0	e2832004	 add         r2, r3, #4
  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e5823000	 str         r3, [r2]

; 107  :     }

  000ac	e28dd010	 add         sp, sp, #0x10
  000b0	e89d6000	 ldmia       sp, {sp, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$M37686|

			 ENDP  ; |?NoteMoveToNoteList@CMidiStream@@QAAXPAVCMidiNote@@@Z|, CMidiStream::NoteMoveToNoteList

	IMPORT	|?NoteOff@CMidiNote@@QAAJI@Z|		; CMidiNote::NoteOff

  00070			 AREA	 |.pdata|, PDATA
|$T37696| DCD	|$LN6@NoteOff|
	DCD	0x40001704
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\midistrm.cpp

  00e28			 AREA	 |.text|, CODE, ARM

  00e28		 |?NoteOff@CMidiStream@@QAAJIII@Z| PROC	; CMidiStream::NoteOff

; 507  : {

  00e28		 |$LN6@NoteOff|
  00e28	e1a0c00d	 mov         r12, sp
  00e2c	e92d000f	 stmdb       sp!, {r0 - r3}
  00e30	e92d5000	 stmdb       sp!, {r12, lr}
  00e34	e24dd00c	 sub         sp, sp, #0xC
  00e38		 |$M37693|

; 508  :     CMidiNote *pCNote = FindNote(dwNote, dwChannel);

  00e38	e59d2020	 ldr         r2, [sp, #0x20]
  00e3c	e59d1018	 ldr         r1, [sp, #0x18]
  00e40	e59d0014	 ldr         r0, [sp, #0x14]
  00e44	eb000000	 bl          |?FindNote@CMidiStream@@QAAPAVCMidiNote@@II@Z|
  00e48	e58d0008	 str         r0, [sp, #8]
  00e4c	e59d3008	 ldr         r3, [sp, #8]
  00e50	e58d3000	 str         r3, [sp]

; 509  :     if (pCNote)

  00e54	e59d3000	 ldr         r3, [sp]
  00e58	e3530000	 cmp         r3, #0
  00e5c	0a000002	 beq         |$LN1@NoteOff|

; 510  :     {
; 511  :         pCNote->NoteOff(dwVelocity);

  00e60	e59d101c	 ldr         r1, [sp, #0x1C]
  00e64	e59d0000	 ldr         r0, [sp]
  00e68	eb000000	 bl          |?NoteOff@CMidiNote@@QAAJI@Z|
  00e6c		 |$LN1@NoteOff|

; 512  :     }
; 513  : 
; 514  :     return S_OK;

  00e6c	e3a03000	 mov         r3, #0
  00e70	e58d3004	 str         r3, [sp, #4]

; 515  : }

  00e74	e59d0004	 ldr         r0, [sp, #4]
  00e78	e28dd00c	 add         sp, sp, #0xC
  00e7c	e89d6000	 ldmia       sp, {sp, lr}
  00e80	e12fff1e	 bx          lr
  00e84		 |$M37694|

			 ENDP  ; |?NoteOff@CMidiStream@@QAAJIII@Z|, CMidiStream::NoteOff


  00078			 AREA	 |.pdata|, PDATA
|$T37702| DCD	|$LN7@AllNotesOf|
	DCD	0x40001e04
; Function compile flags: /Odtp

  00e84			 AREA	 |.text|, CODE, ARM

  00e84		 |?AllNotesOff@CMidiStream@@QAAJI@Z| PROC ; CMidiStream::AllNotesOff

; 525  : {

  00e84		 |$LN7@AllNotesOf|
  00e84	e1a0c00d	 mov         r12, sp
  00e88	e92d0003	 stmdb       sp!, {r0, r1}
  00e8c	e92d5000	 stmdb       sp!, {r12, lr}
  00e90	e24dd00c	 sub         sp, sp, #0xC
  00e94		 |$M37699|

; 526  :     PLIST_ENTRY pListEntry;
; 527  :     CMidiNote *pCNote;
; 528  :     pListEntry = m_NoteList.Flink;

  00e94	e59d3014	 ldr         r3, [sp, #0x14]
  00e98	e2833c05	 add         r3, r3, #5, 24
  00e9c	e28330e8	 add         r3, r3, #0xE8
  00ea0	e5933000	 ldr         r3, [r3]
  00ea4	e58d3000	 str         r3, [sp]
  00ea8		 |$LN2@AllNotesOf|

; 529  :     while (pListEntry != &m_NoteList)

  00ea8	e59d3014	 ldr         r3, [sp, #0x14]
  00eac	e2833c05	 add         r3, r3, #5, 24
  00eb0	e28320e8	 add         r2, r3, #0xE8
  00eb4	e59d3000	 ldr         r3, [sp]
  00eb8	e1530002	 cmp         r3, r2
  00ebc	0a000008	 beq         |$LN1@AllNotesOf|

; 530  :     {
; 531  :         // Get the note
; 532  :         pCNote = CONTAINING_RECORD(pListEntry,CMidiNote,m_Link);

  00ec0	e59d3000	 ldr         r3, [sp]
  00ec4	e58d3004	 str         r3, [sp, #4]

; 533  : 
; 534  :         // Get the next link, since NoteOff may remove the note from the queue depeding on the implementation
; 535  :         pListEntry = pListEntry->Flink;

  00ec8	e59d3000	 ldr         r3, [sp]
  00ecc	e5933000	 ldr         r3, [r3]
  00ed0	e58d3000	 str         r3, [sp]

; 536  : 
; 537  :         // Turn the note off
; 538  :         pCNote->NoteOff(dwVelocity);

  00ed4	e59d1018	 ldr         r1, [sp, #0x18]
  00ed8	e59d0004	 ldr         r0, [sp, #4]
  00edc	eb000000	 bl          |?NoteOff@CMidiNote@@QAAJI@Z|

; 539  :     }

  00ee0	eafffff0	 b           |$LN2@AllNotesOf|
  00ee4		 |$LN1@AllNotesOf|

; 540  :     return S_OK;

  00ee4	e3a03000	 mov         r3, #0
  00ee8	e58d3008	 str         r3, [sp, #8]

; 541  : }

  00eec	e59d0008	 ldr         r0, [sp, #8]
  00ef0	e28dd00c	 add         sp, sp, #0xC
  00ef4	e89d6000	 ldmia       sp, {sp, lr}
  00ef8	e12fff1e	 bx          lr
  00efc		 |$M37700|

			 ENDP  ; |?AllNotesOff@CMidiStream@@QAAJI@Z|, CMidiStream::AllNotesOff

	END
