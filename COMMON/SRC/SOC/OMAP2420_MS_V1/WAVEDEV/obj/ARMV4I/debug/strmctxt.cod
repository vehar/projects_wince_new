; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\WAVEDEV\strmctxt.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|GainMap| DCW	0xf1ad
	DCW	0xe429
	DCW	0xd765
	DCW	0xcb59
	DCW	0xbff9
	DCW	0xb53b
	DCW	0xab18
	DCW	0xa186
	DCW	0x987d
	DCW	0x8ff5
	DCW	0x87e8
	DCW	0x804d
	DCW	0x7920
	DCW	0x7259
	DCW	0x6bf4
	DCW	0x65ea
	DCW	0x6036
	DCW	0x5ad5
	DCW	0x55c0
	DCW	0x50f4
	DCW	0x4c6d
	DCW	0x4826
	DCW	0x441d
	DCW	0x404d
	DCW	0x3cb5
	DCW	0x394f
	DCW	0x361a
	DCW	0x3314
	DCW	0x3038
	DCW	0x2d86
	DCW	0x2afa
	DCW	0x2892
	DCW	0x264d
	DCW	0x2429
	DCW	0x2223
	DCW	0x203a
	DCW	0x1e6c
	DCW	0x1cb9
	DCW	0x1b1d
	DCW	0x1999
	DCW	0x182a
	DCW	0x16d0
	DCW	0x158a
	DCW	0x1455
	DCW	0x1332
	DCW	0x121f
	DCW	0x111c
	DCW	0x1027
	DCW	0xf3f
	DCW	0xe65
	DCW	0xd97
	DCW	0xcd4
	DCW	0xc1c
	DCW	0xb6f
	DCW	0xacb
	DCW	0xa31
	DCW	0x99f
	DCW	0x915
	DCW	0x893
	DCW	0x818
	DCW	0x7a4
	DCW	0x737
	DCW	0x6cf
	DCW	0x66e
	DCW	0x612
	DCW	0x5bb
	DCW	0x569
	DCW	0x51b
	DCW	0x4d2
	DCW	0x48d
	DCW	0x44c
	DCW	0x40e
	DCW	0x3d4
	DCW	0x39d
	DCW	0x369
	DCW	0x339
	DCW	0x30a
	DCW	0x2df
	DCW	0x2b6
	DCW	0x28f
	DCW	0x26a
	DCW	0x248
	DCW	0x227
	DCW	0x208
	DCW	0x1eb
	DCW	0x1cf
	DCW	0x1b6
	DCW	0x19d
	DCW	0x186
	DCW	0x170
	DCW	0x15b
	DCW	0x148
	DCW	0x136
	DCW	0x124
	DCW	0x114
	DCW	0x104
	DCW	0xf6
	DCW	0xe8
	DCW	0xdb
	DCW	0xcf
	DCW	0xc3
	DCW	0xb8
	DCW	0xae
	DCW	0xa4
	DCW	0x9b
	DCW	0x92
	DCW	0x8a
	DCW	0x82
	DCW	0x7b
	DCW	0x74
	DCW	0x6e
	DCW	0x67
	DCW	0x62
	DCW	0x5c
	DCW	0x57
	DCW	0x52
	DCW	0x4d
	DCW	0x49
	DCW	0x45
	DCW	0x41
	DCW	0x3d
	DCW	0x3a
	DCW	0x37
	DCW	0x34
	DCW	0x31
	DCW	0x2e
	DCW	0x2b
	DCW	0x29
	DCW	0x27
	DCW	0x24
	DCW	0x22
	DCW	0x20
	DCW	0x1f
	DCW	0x1d
	DCW	0x1b
	DCW	0x1a
	DCW	0x18
	DCW	0x17
	DCW	0x15
	DCW	0x14
	DCW	0x13
	DCW	0x12
	DCW	0x11
	DCW	0x10
	DCW	0xf
	DCW	0xe
	DCW	0xd
	DCW	0xd
	DCW	0xc
	DCW	0xb
	DCW	0xb
	DCW	0xa
	DCW	0x9
	DCW	0x9
	DCW	0x8
	DCW	0x8
	DCW	0x7
	DCW	0x7
	DCW	0x6
	DCW	0x6
	DCW	0x6
	DCW	0x5
	DCW	0x5
	DCW	0x5
	DCW	0x4
	DCW	0x4
	DCW	0x4
	DCW	0x4
	DCW	0x3
	DCW	0x3
	DCW	0x3
	DCW	0x3
	DCW	0x3
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x2
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x1
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	EXPORT	|??_C@_1CM@MHKJKEJJ@?$AAO?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?SetGain@StreamContext@@QAAKK@Z|	; StreamContext::SetGain
	EXPORT	|?GetDefaultStreamGain@DeviceContext@@QAAKXZ| ; DeviceContext::GetDefaultStreamGain
	EXPORT	|?Open@StreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; StreamContext::Open
	IMPORT	|?NewStream@DeviceContext@@QAAXPAVStreamContext@@@Z| ; DeviceContext::NewStream
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T37483| DCD	|$LN9@Open|
	DCD	0x4000ae04
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@MHKJKEJJ@?$AAO?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Open@StreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; StreamContext::Open

; 27   : {

  00000		 |$LN9@Open|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M37480|

; 28   :     m_RefCount = 1;

  00010	e59d301c	 ldr         r3, [sp, #0x1C]
  00014	e283200c	 add         r2, r3, #0xC
  00018	e3a03001	 mov         r3, #1
  0001c	e5823000	 str         r3, [r2]

; 29   :     m_pDeviceContext = pDeviceContext;

  00020	e59d301c	 ldr         r3, [sp, #0x1C]
  00024	e2832050	 add         r2, r3, #0x50
  00028	e59d3020	 ldr         r3, [sp, #0x20]
  0002c	e5823000	 str         r3, [r2]

; 30   :     m_pfnCallback = (DRVCALLBACK *)lpWOD->dwCallback;

  00030	e59d3024	 ldr         r3, [sp, #0x24]
  00034	e2830008	 add         r0, r3, #8
  00038	e59d301c	 ldr         r3, [sp, #0x1C]
  0003c	e283101c	 add         r1, r3, #0x1C
  00040	e1d030d3	 ldrsb       r3, [r0, #3]
  00044	e1a02403	 mov         r2, r3, lsl #8
  00048	e5d03002	 ldrb        r3, [r0, #2]
  0004c	e1833002	 orr         r3, r3, r2
  00050	e1a02403	 mov         r2, r3, lsl #8
  00054	e5d03001	 ldrb        r3, [r0, #1]
  00058	e1833002	 orr         r3, r3, r2
  0005c	e1a02403	 mov         r2, r3, lsl #8
  00060	e5d03000	 ldrb        r3, [r0]
  00064	e1833002	 orr         r3, r3, r2
  00068	e5813000	 str         r3, [r1]

; 31   :     m_dwInstance  = lpWOD->dwInstance;

  0006c	e59d3024	 ldr         r3, [sp, #0x24]
  00070	e283000c	 add         r0, r3, #0xC
  00074	e59d301c	 ldr         r3, [sp, #0x1C]
  00078	e2831020	 add         r1, r3, #0x20
  0007c	e5d03003	 ldrb        r3, [r0, #3]
  00080	e1a02403	 mov         r2, r3, lsl #8
  00084	e5d03002	 ldrb        r3, [r0, #2]
  00088	e1833002	 orr         r3, r3, r2
  0008c	e1a02403	 mov         r2, r3, lsl #8
  00090	e5d03001	 ldrb        r3, [r0, #1]
  00094	e1833002	 orr         r3, r3, r2
  00098	e1a02403	 mov         r2, r3, lsl #8
  0009c	e5d03000	 ldrb        r3, [r0]
  000a0	e1833002	 orr         r3, r3, r2
  000a4	e5813000	 str         r3, [r1]

; 32   :     m_hWave       = lpWOD->hWave;

  000a8	e59d301c	 ldr         r3, [sp, #0x1C]
  000ac	e2830018	 add         r0, r3, #0x18
  000b0	e59d1024	 ldr         r1, [sp, #0x24]
  000b4	e1d130d3	 ldrsb       r3, [r1, #3]
  000b8	e1a02403	 mov         r2, r3, lsl #8
  000bc	e5d13002	 ldrb        r3, [r1, #2]
  000c0	e1833002	 orr         r3, r3, r2
  000c4	e1a02403	 mov         r2, r3, lsl #8
  000c8	e5d13001	 ldrb        r3, [r1, #1]
  000cc	e1833002	 orr         r3, r3, r2
  000d0	e1a02403	 mov         r2, r3, lsl #8
  000d4	e5d13000	 ldrb        r3, [r1]
  000d8	e1833002	 orr         r3, r3, r2
  000dc	e5803000	 str         r3, [r0]

; 33   :     m_dwFlags     = dwFlags;

  000e0	e59d301c	 ldr         r3, [sp, #0x1C]
  000e4	e2832014	 add         r2, r3, #0x14
  000e8	e59d3028	 ldr         r3, [sp, #0x28]
  000ec	e5823000	 str         r3, [r2]

; 34   :     m_bRunning    = FALSE;

  000f0	e59d301c	 ldr         r3, [sp, #0x1C]
  000f4	e2832010	 add         r2, r3, #0x10
  000f8	e3a03000	 mov         r3, #0
  000fc	e5823000	 str         r3, [r2]

; 35   :     m_bForceSpeaker = FALSE;

  00100	e59d301c	 ldr         r3, [sp, #0x1C]
  00104	e2832064	 add         r2, r3, #0x64
  00108	e3a03000	 mov         r3, #0
  0010c	e5823000	 str         r3, [r2]

; 36   : 
; 37   :     // If it's a PCMWAVEFORMAT struct, it's smaller than a WAVEFORMATEX struct (it doesn't have the cbSize field),
; 38   :     // so don't copy too much or we risk a fault if the structure is located on the end of a page.
; 39   :     // All other non-PCM wave formats share the WAVEFORMATEX base structure
; 40   :     // Note: I don't keep around anything after the cbSize of the WAVEFORMATEX struct so that I don't need to
; 41   :     // worry about allocating additional space. If we need to keep this info around in the future, we can either
; 42   :     // allocate it dynamically here, or keep the information in any derived format-specific classes.
; 43   :     DWORD dwSize;
; 44   :     WAVEFORMATEX *pwfx = lpWOD->lpFormat;

  00110	e59d3024	 ldr         r3, [sp, #0x24]
  00114	e2831004	 add         r1, r3, #4
  00118	e1d130d3	 ldrsb       r3, [r1, #3]
  0011c	e1a02403	 mov         r2, r3, lsl #8
  00120	e5d13002	 ldrb        r3, [r1, #2]
  00124	e1833002	 orr         r3, r3, r2
  00128	e1a02403	 mov         r2, r3, lsl #8
  0012c	e5d13001	 ldrb        r3, [r1, #1]
  00130	e1833002	 orr         r3, r3, r2
  00134	e1a02403	 mov         r2, r3, lsl #8
  00138	e5d13000	 ldrb        r3, [r1]
  0013c	e1833002	 orr         r3, r3, r2
  00140	e58d3004	 str         r3, [sp, #4]

; 45   :     if (pwfx->wFormatTag == WAVE_FORMAT_PCM)

  00144	e59d1004	 ldr         r1, [sp, #4]
  00148	e5d13001	 ldrb        r3, [r1, #1]
  0014c	e1a03403	 mov         r3, r3, lsl #8
  00150	e1a02803	 mov         r2, r3, lsl #16
  00154	e1a02822	 mov         r2, r2, lsr #16
  00158	e5d13000	 ldrb        r3, [r1]
  0015c	e1833002	 orr         r3, r3, r2
  00160	e3530001	 cmp         r3, #1
  00164	1a000008	 bne         |$LN2@Open|

; 46   :     {
; 47   :         dwSize = sizeof(PCMWAVEFORMAT);

  00168	e3a03010	 mov         r3, #0x10
  0016c	e58d3000	 str         r3, [sp]

; 48   :         m_WaveFormat.cbSize = 0;

  00170	e59d301c	 ldr         r3, [sp, #0x1C]
  00174	e2832034	 add         r2, r3, #0x34
  00178	e3a03000	 mov         r3, #0
  0017c	e5c23000	 strb        r3, [r2]
  00180	e1a03423	 mov         r3, r3, lsr #8
  00184	e5c23001	 strb        r3, [r2, #1]

; 49   :     }
; 50   :     else

  00188	ea000001	 b           |$LN1@Open|
  0018c		 |$LN2@Open|

; 51   :     {
; 52   :         dwSize = sizeof(WAVEFORMATEX);

  0018c	e3a03012	 mov         r3, #0x12
  00190	e58d3000	 str         r3, [sp]
  00194		 |$LN1@Open|

; 53   :     }
; 54   : 
; 55   :     memcpy(&m_WaveFormat,pwfx,dwSize);

  00194	e59d2000	 ldr         r2, [sp]
  00198	e59d1004	 ldr         r1, [sp, #4]
  0019c	e59d301c	 ldr         r3, [sp, #0x1C]
  001a0	e2830024	 add         r0, r3, #0x24
  001a4	eb000000	 bl          memcpy

; 56   : 
; 57   :     m_lpWaveHdrHead    = NULL;

  001a8	e59d301c	 ldr         r3, [sp, #0x1C]
  001ac	e2832038	 add         r2, r3, #0x38
  001b0	e3a03000	 mov         r3, #0
  001b4	e5823000	 str         r3, [r2]

; 58   :     m_lpWaveHdrTail    = NULL;

  001b8	e59d301c	 ldr         r3, [sp, #0x1C]
  001bc	e2832040	 add         r2, r3, #0x40
  001c0	e3a03000	 mov         r3, #0
  001c4	e5823000	 str         r3, [r2]

; 59   :     m_lpWaveHdrCurrent = NULL;

  001c8	e59d301c	 ldr         r3, [sp, #0x1C]
  001cc	e283203c	 add         r2, r3, #0x3C
  001d0	e3a03000	 mov         r3, #0
  001d4	e5823000	 str         r3, [r2]

; 60   :     m_lpCurrData       = NULL;

  001d8	e59d301c	 ldr         r3, [sp, #0x1C]
  001dc	e2832044	 add         r2, r3, #0x44
  001e0	e3a03000	 mov         r3, #0
  001e4	e5823000	 str         r3, [r2]

; 61   :     m_lpCurrDataEnd    = NULL;

  001e8	e59d301c	 ldr         r3, [sp, #0x1C]
  001ec	e2832048	 add         r2, r3, #0x48
  001f0	e3a03000	 mov         r3, #0
  001f4	e5823000	 str         r3, [r2]

; 62   :     m_dwByteCount      = 0;

  001f8	e59d301c	 ldr         r3, [sp, #0x1C]
  001fc	e283204c	 add         r2, r3, #0x4C
  00200	e3a03000	 mov         r3, #0
  00204	e5823000	 str         r3, [r2]

; 63   :     m_dwLoopCount = 0;

  00208	e59d301c	 ldr         r3, [sp, #0x1C]
  0020c	e2832054	 add         r2, r3, #0x54
  00210	e3a03000	 mov         r3, #0
  00214	e5823000	 str         r3, [r2]

; 64   : 
; 65   :     m_SecondaryGainClass=0;

  00218	e59d301c	 ldr         r3, [sp, #0x1C]
  0021c	e283205c	 add         r2, r3, #0x5C
  00220	e3a03000	 mov         r3, #0
  00224	e5823000	 str         r3, [r2]

; 66   :     SetGain(pDeviceContext->GetDefaultStreamGain()); // Set gain to default value

  00228	e59d0020	 ldr         r0, [sp, #0x20]
  0022c	eb000000	 bl          |?GetDefaultStreamGain@DeviceContext@@QAAKXZ|
  00230	e58d000c	 str         r0, [sp, #0xC]
  00234	e59d100c	 ldr         r1, [sp, #0xC]
  00238	e59d001c	 ldr         r0, [sp, #0x1C]
  0023c	eb000000	 bl          |?SetGain@StreamContext@@QAAKK@Z|

; 67   : 
; 68   :     DEBUGMSG(ZONE_MDD, (TEXT("Opening stream 0x%x\r\n"),this));

  00240	e59f306c	 ldr         r3, [pc, #0x6C]
  00244	e5933440	 ldr         r3, [r3, #0x440]
  00248	e3130080	 tst         r3, #0x80
  0024c	0a000005	 beq         |$LN5@Open|
  00250	e59d101c	 ldr         r1, [sp, #0x1C]
  00254	e59f0054	 ldr         r0, [pc, #0x54]
  00258	eb000000	 bl          NKDbgPrintfW
  0025c	e3a03001	 mov         r3, #1
  00260	e58d3010	 str         r3, [sp, #0x10]
  00264	ea000001	 b           |$LN6@Open|
  00268		 |$LN5@Open|
  00268	e3a03000	 mov         r3, #0
  0026c	e58d3010	 str         r3, [sp, #0x10]
  00270		 |$LN6@Open|

; 69   : 
; 70   :     // Add stream to list. This will start playback.
; 71   :     pDeviceContext->NewStream(this);

  00270	e59d101c	 ldr         r1, [sp, #0x1C]
  00274	e59d0020	 ldr         r0, [sp, #0x20]
  00278	eb000000	 bl          |?NewStream@DeviceContext@@QAAXPAVStreamContext@@@Z|

; 72   : 
; 73   :     DoCallbackStreamOpened();

  0027c	e59d301c	 ldr         r3, [sp, #0x1C]
  00280	e5933000	 ldr         r3, [r3]
  00284	e2833024	 add         r3, r3, #0x24
  00288	e59d001c	 ldr         r0, [sp, #0x1C]
  0028c	e5933000	 ldr         r3, [r3]
  00290	e1a0e00f	 mov         lr, pc
  00294	e12fff13	 bx          r3

; 74   : 
; 75   :     return S_OK;

  00298	e3a03000	 mov         r3, #0
  0029c	e58d3008	 str         r3, [sp, #8]

; 76   : }

  002a0	e59d0008	 ldr         r0, [sp, #8]
  002a4	e28dd014	 add         sp, sp, #0x14
  002a8	e89d6000	 ldmia       sp, {sp, lr}
  002ac	e12fff1e	 bx          lr
  002b0		 |$LN10@Open|
  002b0		 |$LN11@Open|
  002b0	00000000	 DCD         |??_C@_1CM@MHKJKEJJ@?$AAO?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  002b4		 |$LN12@Open|
  002b4	00000000	 DCD         |dpCurSettings|
  002b8		 |$M37481|

			 ENDP  ; |?Open@StreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, StreamContext::Open

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\devctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37492| DCD	|$LN5@GetDefault|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDefaultStreamGain@DeviceContext@@QAAKXZ| PROC ; DeviceContext::GetDefaultStreamGain

; 68   :     {

  00000		 |$LN5@GetDefault|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37489|

; 69   :         return m_dwDefaultStreamGain;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833010	 add         r3, r3, #0x10
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 70   :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37490|

			 ENDP  ; |?GetDefaultStreamGain@DeviceContext@@QAAKXZ|, DeviceContext::GetDefaultStreamGain

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37500| DCD	|$LN5@SetGain|
	DCD	0x40001504
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetGain@StreamContext@@QAAKK@Z| PROC	; StreamContext::SetGain

; 135  :     {

  00000		 |$LN5@SetGain|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37497|

; 136  :         m_dwGain = dwGain;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2832058	 add         r2, r3, #0x58
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e5823000	 str         r3, [r2]

; 137  :         GainChange();

  00020	e59d300c	 ldr         r3, [sp, #0xC]
  00024	e5933000	 ldr         r3, [r3]
  00028	e2833030	 add         r3, r3, #0x30
  0002c	e59d000c	 ldr         r0, [sp, #0xC]
  00030	e5933000	 ldr         r3, [r3]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff13	 bx          r3

; 138  :         return MMSYSERR_NOERROR;

  0003c	e3a03000	 mov         r3, #0
  00040	e58d3000	 str         r3, [sp]

; 139  :     }

  00044	e59d0000	 ldr         r0, [sp]
  00048	e28dd004	 add         sp, sp, #4
  0004c	e89d6000	 ldmia       sp, {sp, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M37498|

			 ENDP  ; |?SetGain@StreamContext@@QAAKK@Z|, StreamContext::SetGain

	EXPORT	|??_C@_1CM@DNIBGOIA@?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?ForceSpeaker@StreamContext@@QAAKH@Z|	; StreamContext::ForceSpeaker
	EXPORT	|?StillPlaying@StreamContext@@QAAHXZ|	; StreamContext::StillPlaying
	EXPORT	|?Close@StreamContext@@UAAKXZ|		; StreamContext::Close

  00008			 AREA	 |.pdata|, PDATA
|$T37510| DCD	|$LN8@Close|
	DCD	0x40002b04
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@DNIBGOIA@?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  002b8			 AREA	 |.text|, CODE, ARM

  002b8		 |?Close@StreamContext@@UAAKXZ| PROC	; StreamContext::Close

; 86   : {

  002b8		 |$LN8@Close|
  002b8	e1a0c00d	 mov         r12, sp
  002bc	e92d0001	 stmdb       sp!, {r0}
  002c0	e92d5000	 stmdb       sp!, {r12, lr}
  002c4	e24dd00c	 sub         sp, sp, #0xC
  002c8		 |$M37507|

; 87   :     if (StillPlaying())

  002c8	e59d0014	 ldr         r0, [sp, #0x14]
  002cc	eb000000	 bl          |?StillPlaying@StreamContext@@QAAHXZ|
  002d0	e58d0004	 str         r0, [sp, #4]
  002d4	e59d3004	 ldr         r3, [sp, #4]
  002d8	e3530000	 cmp         r3, #0
  002dc	0a000002	 beq         |$LN1@Close|

; 88   :     {
; 89   :         return WAVERR_STILLPLAYING;

  002e0	e3a03021	 mov         r3, #0x21
  002e4	e58d3000	 str         r3, [sp]
  002e8	ea000017	 b           |$LN2@Close|
  002ec		 |$LN1@Close|

; 90   :     }
; 91   : 
; 92   :     // Be sure to turn off speaker if we turned it on.
; 93   :     ForceSpeaker(FALSE);

  002ec	e3a01000	 mov         r1, #0
  002f0	e59d0014	 ldr         r0, [sp, #0x14]
  002f4	eb000000	 bl          |?ForceSpeaker@StreamContext@@QAAKH@Z|

; 94   : 
; 95   :     DEBUGMSG(ZONE_MDD, (TEXT("Closing stream 0x%x\r\n"),this));

  002f8	e59f3060	 ldr         r3, [pc, #0x60]
  002fc	e5933440	 ldr         r3, [r3, #0x440]
  00300	e3130080	 tst         r3, #0x80
  00304	0a000005	 beq         |$LN4@Close|
  00308	e59d1014	 ldr         r1, [sp, #0x14]
  0030c	e59f0048	 ldr         r0, [pc, #0x48]
  00310	eb000000	 bl          NKDbgPrintfW
  00314	e3a03001	 mov         r3, #1
  00318	e58d3008	 str         r3, [sp, #8]
  0031c	ea000001	 b           |$LN5@Close|
  00320		 |$LN4@Close|
  00320	e3a03000	 mov         r3, #0
  00324	e58d3008	 str         r3, [sp, #8]
  00328		 |$LN5@Close|

; 96   : 
; 97   :     DoCallbackStreamClosed();

  00328	e59d3014	 ldr         r3, [sp, #0x14]
  0032c	e5933000	 ldr         r3, [r3]
  00330	e2833028	 add         r3, r3, #0x28
  00334	e59d0014	 ldr         r0, [sp, #0x14]
  00338	e5933000	 ldr         r3, [r3]
  0033c	e1a0e00f	 mov         lr, pc
  00340	e12fff13	 bx          r3

; 98   : 
; 99   :     return MMSYSERR_NOERROR;

  00344	e3a03000	 mov         r3, #0
  00348	e58d3000	 str         r3, [sp]
  0034c		 |$LN2@Close|

; 100  : }

  0034c	e59d0000	 ldr         r0, [sp]
  00350	e28dd00c	 add         sp, sp, #0xC
  00354	e89d6000	 ldmia       sp, {sp, lr}
  00358	e12fff1e	 bx          lr
  0035c		 |$LN9@Close|
  0035c		 |$LN10@Close|
  0035c	00000000	 DCD         |??_C@_1CM@DNIBGOIA@?$AAC?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00360		 |$LN11@Close|
  00360	00000000	 DCD         |dpCurSettings|
  00364		 |$M37508|

			 ENDP  ; |?Close@StreamContext@@UAAKXZ|, StreamContext::Close

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37521| DCD	|$LN7@StillPlayi|
	DCD	0x40001404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StillPlaying@StreamContext@@QAAHXZ| PROC ; StreamContext::StillPlaying

; 91   :     BOOL StillPlaying() {return (m_lpWaveHdrHead!=NULL);}

  00000		 |$LN7@StillPlayi|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37518|
  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833038	 add         r3, r3, #0x38
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000002	 beq         |$LN3@StillPlayi|
  00024	e3a03001	 mov         r3, #1
  00028	e58d3004	 str         r3, [sp, #4]
  0002c	ea000001	 b           |$LN4@StillPlayi|
  00030		 |$LN3@StillPlayi|
  00030	e3a03000	 mov         r3, #0
  00034	e58d3004	 str         r3, [sp, #4]
  00038		 |$LN4@StillPlayi|
  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e58d3000	 str         r3, [sp]
  00040	e59d0000	 ldr         r0, [sp]
  00044	e28dd008	 add         sp, sp, #8
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M37519|

			 ENDP  ; |?StillPlaying@StreamContext@@QAAHXZ|, StreamContext::StillPlaying

	EXPORT	|??_C@_1EE@BFGNLGBD@?$AAA?$AAd?$AAd?$AAR?$AAe?$AAf?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAR?$AAe?$AAf?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|?AddRef@StreamContext@@QAAJXZ|		; StreamContext::AddRef

  00010			 AREA	 |.pdata|, PDATA
|$T37531| DCD	|$LN7@AddRef|
	DCD	0x40002404
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@BFGNLGBD@?$AAA?$AAd?$AAd?$AAR?$AAe?$AAf?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAR?$AAe?$AAf?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@| DCB "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "m"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "f", 0x0, "C", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00364			 AREA	 |.text|, CODE, ARM

  00364		 |?AddRef@StreamContext@@QAAJXZ| PROC	; StreamContext::AddRef

; 110  : {

  00364		 |$LN7@AddRef|
  00364	e1a0c00d	 mov         r12, sp
  00368	e92d0001	 stmdb       sp!, {r0}
  0036c	e92d5000	 stmdb       sp!, {r12, lr}
  00370	e24dd00c	 sub         sp, sp, #0xC
  00374		 |$M37528|

; 111  :     LONG RefCount = ++m_RefCount;

  00374	e59d3014	 ldr         r3, [sp, #0x14]
  00378	e283300c	 add         r3, r3, #0xC
  0037c	e5933000	 ldr         r3, [r3]
  00380	e2832001	 add         r2, r3, #1
  00384	e59d3014	 ldr         r3, [sp, #0x14]
  00388	e283300c	 add         r3, r3, #0xC
  0038c	e5832000	 str         r2, [r3]
  00390	e59d3014	 ldr         r3, [sp, #0x14]
  00394	e283300c	 add         r3, r3, #0xC
  00398	e5933000	 ldr         r3, [r3]
  0039c	e58d3000	 str         r3, [sp]

; 112  : 
; 113  :     DEBUGMSG(ZONE_MDD, (TEXT("AddRef stream 0x%x, RefCount=%d\r\n"),this,RefCount));

  003a0	e59f3048	 ldr         r3, [pc, #0x48]
  003a4	e5933440	 ldr         r3, [r3, #0x440]
  003a8	e3130080	 tst         r3, #0x80
  003ac	0a000006	 beq         |$LN3@AddRef|
  003b0	e59d2000	 ldr         r2, [sp]
  003b4	e59d1014	 ldr         r1, [sp, #0x14]
  003b8	e59f002c	 ldr         r0, [pc, #0x2C]
  003bc	eb000000	 bl          NKDbgPrintfW
  003c0	e3a03001	 mov         r3, #1
  003c4	e58d3008	 str         r3, [sp, #8]
  003c8	ea000001	 b           |$LN4@AddRef|
  003cc		 |$LN3@AddRef|
  003cc	e3a03000	 mov         r3, #0
  003d0	e58d3008	 str         r3, [sp, #8]
  003d4		 |$LN4@AddRef|

; 114  : 
; 115  :     return RefCount;

  003d4	e59d3000	 ldr         r3, [sp]
  003d8	e58d3004	 str         r3, [sp, #4]

; 116  : }

  003dc	e59d0004	 ldr         r0, [sp, #4]
  003e0	e28dd00c	 add         sp, sp, #0xC
  003e4	e89d6000	 ldmia       sp, {sp, lr}
  003e8	e12fff1e	 bx          lr
  003ec		 |$LN8@AddRef|
  003ec		 |$LN9@AddRef|
  003ec	00000000	 DCD         |??_C@_1EE@BFGNLGBD@?$AAA?$AAd?$AAd?$AAR?$AAe?$AAf?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAR?$AAe?$AAf?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?$DN?$AA?$CF?$AAd?$AA?$AN@|
  003f0		 |$LN10@AddRef|
  003f0	00000000	 DCD         |dpCurSettings|
  003f4		 |$M37529|

			 ENDP  ; |?AddRef@StreamContext@@QAAJXZ|, StreamContext::AddRef

	EXPORT	|??_C@_1CO@OBBLDCLO@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?Release@StreamContext@@QAAJXZ|	; StreamContext::Release
	IMPORT	|?DeleteStream@DeviceContext@@QAAXPAVStreamContext@@@Z| ; DeviceContext::DeleteStream

  00018			 AREA	 |.pdata|, PDATA
|$T37546| DCD	|$LN10@Release|
	DCD	0x40003f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@OBBLDCLO@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "m", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  003f4			 AREA	 |.text|, CODE, ARM

  003f4		 |?Release@StreamContext@@QAAJXZ| PROC	; StreamContext::Release

; 127  : {

  003f4		 |$LN10@Release|
  003f4	e1a0c00d	 mov         r12, sp
  003f8	e92d0001	 stmdb       sp!, {r0}
  003fc	e92d5000	 stmdb       sp!, {r12, lr}
  00400	e24dd01c	 sub         sp, sp, #0x1C
  00404		 |$M37543|

; 128  :     LONG RefCount = --m_RefCount;

  00404	e59d3024	 ldr         r3, [sp, #0x24]
  00408	e283300c	 add         r3, r3, #0xC
  0040c	e5933000	 ldr         r3, [r3]
  00410	e2432001	 sub         r2, r3, #1
  00414	e59d3024	 ldr         r3, [sp, #0x24]
  00418	e283300c	 add         r3, r3, #0xC
  0041c	e5832000	 str         r2, [r3]
  00420	e59d3024	 ldr         r3, [sp, #0x24]
  00424	e283300c	 add         r3, r3, #0xC
  00428	e5933000	 ldr         r3, [r3]
  0042c	e58d3000	 str         r3, [sp]

; 129  : 
; 130  : //    DEBUGMSG(ZONE_MDD, (TEXT("Releasing stream 0x%x, RefCount=%d\r\n"),this,RefCount));
; 131  :     if (RefCount==0)

  00430	e59d3000	 ldr         r3, [sp]
  00434	e3530000	 cmp         r3, #0
  00438	1a000024	 bne         |$LN1@Release|

; 132  :     {
; 133  :         DEBUGMSG(ZONE_MDD, (TEXT("Deleting stream 0x%x\r\n"),this));

  0043c	e59f30a8	 ldr         r3, [pc, #0xA8]
  00440	e5933440	 ldr         r3, [r3, #0x440]
  00444	e3130080	 tst         r3, #0x80
  00448	0a000005	 beq         |$LN4@Release|
  0044c	e59d1024	 ldr         r1, [sp, #0x24]
  00450	e59f0090	 ldr         r0, [pc, #0x90]
  00454	eb000000	 bl          NKDbgPrintfW
  00458	e3a03001	 mov         r3, #1
  0045c	e58d3010	 str         r3, [sp, #0x10]
  00460	ea000001	 b           |$LN5@Release|
  00464		 |$LN4@Release|
  00464	e3a03000	 mov         r3, #0
  00468	e58d3010	 str         r3, [sp, #0x10]
  0046c		 |$LN5@Release|

; 134  :         // Only remove stream from list when all refcounts are gone.
; 135  :         m_pDeviceContext->DeleteStream(this);

  0046c	e59d1024	 ldr         r1, [sp, #0x24]
  00470	e59d3024	 ldr         r3, [sp, #0x24]
  00474	e2833050	 add         r3, r3, #0x50
  00478	e5930000	 ldr         r0, [r3]
  0047c	eb000000	 bl          |?DeleteStream@DeviceContext@@QAAXPAVStreamContext@@@Z|

; 136  :         delete this;

  00480	e59d3024	 ldr         r3, [sp, #0x24]
  00484	e58d3008	 str         r3, [sp, #8]
  00488	e59d3008	 ldr         r3, [sp, #8]
  0048c	e58d3004	 str         r3, [sp, #4]
  00490	e59d3004	 ldr         r3, [sp, #4]
  00494	e3530000	 cmp         r3, #0
  00498	0a00000a	 beq         |$LN6@Release|
  0049c	e3a01001	 mov         r1, #1
  004a0	e59d3004	 ldr         r3, [sp, #4]
  004a4	e5933000	 ldr         r3, [r3]
  004a8	e59d0004	 ldr         r0, [sp, #4]
  004ac	e5933000	 ldr         r3, [r3]
  004b0	e1a0e00f	 mov         lr, pc
  004b4	e12fff13	 bx          r3
  004b8	e58d0014	 str         r0, [sp, #0x14]
  004bc	e59d3014	 ldr         r3, [sp, #0x14]
  004c0	e58d3018	 str         r3, [sp, #0x18]
  004c4	ea000001	 b           |$LN7@Release|
  004c8		 |$LN6@Release|
  004c8	e3a03000	 mov         r3, #0
  004cc	e58d3018	 str         r3, [sp, #0x18]
  004d0		 |$LN7@Release|
  004d0		 |$LN1@Release|

; 137  :     }
; 138  :     return RefCount;

  004d0	e59d3000	 ldr         r3, [sp]
  004d4	e58d300c	 str         r3, [sp, #0xC]

; 139  : }

  004d8	e59d000c	 ldr         r0, [sp, #0xC]
  004dc	e28dd01c	 add         sp, sp, #0x1C
  004e0	e89d6000	 ldmia       sp, {sp, lr}
  004e4	e12fff1e	 bx          lr
  004e8		 |$LN11@Release|
  004e8		 |$LN12@Release|
  004e8	00000000	 DCD         |??_C@_1CO@OBBLDCLO@?$AAD?$AAe?$AAl?$AAe?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAt?$AAr?$AAe?$AAa?$AAm?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  004ec		 |$LN13@Release|
  004ec	00000000	 DCD         |dpCurSettings|
  004f0		 |$M37544|

			 ENDP  ; |?Release@StreamContext@@QAAJXZ|, StreamContext::Release

	EXPORT	|?QueueBuffer@StreamContext@@UAAKPAUwavehdr_tag@@@Z| ; StreamContext::QueueBuffer

  00020			 AREA	 |.pdata|, PDATA
|$T37555| DCD	|$LN11@QueueBuffe|
	DCD	0x40007004
; Function compile flags: /Odtp

  004f0			 AREA	 |.text|, CODE, ARM

  004f0		 |?QueueBuffer@StreamContext@@UAAKPAUwavehdr_tag@@@Z| PROC ; StreamContext::QueueBuffer

; 150  : {

  004f0		 |$LN11@QueueBuffe|
  004f0	e1a0c00d	 mov         r12, sp
  004f4	e92d0003	 stmdb       sp!, {r0, r1}
  004f8	e92d5000	 stmdb       sp!, {r12, lr}
  004fc	e24dd004	 sub         sp, sp, #4
  00500		 |$M37552|

; 151  :     if (!(lpWaveHdr->dwFlags & WHDR_PREPARED))

  00500	e59d3010	 ldr         r3, [sp, #0x10]
  00504	e2833010	 add         r3, r3, #0x10
  00508	e5933000	 ldr         r3, [r3]
  0050c	e3130002	 tst         r3, #2
  00510	1a000002	 bne         |$LN6@QueueBuffe|

; 152  :     {
; 153  :         return WAVERR_UNPREPARED;

  00514	e3a03022	 mov         r3, #0x22
  00518	e58d3000	 str         r3, [sp]
  0051c	ea00005f	 b           |$LN7@QueueBuffe|
  00520		 |$LN6@QueueBuffe|

; 154  :     }
; 155  : 
; 156  :     lpWaveHdr->dwFlags |= WHDR_INQUEUE;

  00520	e59d3010	 ldr         r3, [sp, #0x10]
  00524	e2833010	 add         r3, r3, #0x10
  00528	e5933000	 ldr         r3, [r3]
  0052c	e3832010	 orr         r2, r3, #0x10
  00530	e59d3010	 ldr         r3, [sp, #0x10]
  00534	e2833010	 add         r3, r3, #0x10
  00538	e5832000	 str         r2, [r3]

; 157  :     lpWaveHdr->dwFlags &= ~WHDR_DONE;

  0053c	e59d3010	 ldr         r3, [sp, #0x10]
  00540	e2833010	 add         r3, r3, #0x10
  00544	e5932000	 ldr         r2, [r3]
  00548	e3e03001	 mvn         r3, #1
  0054c	e0022003	 and         r2, r2, r3
  00550	e59d3010	 ldr         r3, [sp, #0x10]
  00554	e2833010	 add         r3, r3, #0x10
  00558	e5832000	 str         r2, [r3]

; 158  :     lpWaveHdr->lpNext=NULL;

  0055c	e59d3010	 ldr         r3, [sp, #0x10]
  00560	e2832018	 add         r2, r3, #0x18
  00564	e3a03000	 mov         r3, #0
  00568	e5823000	 str         r3, [r2]

; 159  :     lpWaveHdr->dwBytesRecorded=0;

  0056c	e59d3010	 ldr         r3, [sp, #0x10]
  00570	e2832008	 add         r2, r3, #8
  00574	e3a03000	 mov         r3, #0
  00578	e5823000	 str         r3, [r2]

; 160  : 
; 161  :     if (!m_lpWaveHdrHead)

  0057c	e59d300c	 ldr         r3, [sp, #0xC]
  00580	e2833038	 add         r3, r3, #0x38
  00584	e5933000	 ldr         r3, [r3]
  00588	e3530000	 cmp         r3, #0
  0058c	1a000004	 bne         |$LN5@QueueBuffe|

; 162  :     {
; 163  :         m_lpWaveHdrHead = lpWaveHdr;

  00590	e59d300c	 ldr         r3, [sp, #0xC]
  00594	e2832038	 add         r2, r3, #0x38
  00598	e59d3010	 ldr         r3, [sp, #0x10]
  0059c	e5823000	 str         r3, [r2]

; 164  :     }
; 165  :     else

  005a0	ea000005	 b           |$LN4@QueueBuffe|
  005a4		 |$LN5@QueueBuffe|

; 166  :     {
; 167  :         m_lpWaveHdrTail->lpNext=lpWaveHdr;

  005a4	e59d300c	 ldr         r3, [sp, #0xC]
  005a8	e2833040	 add         r3, r3, #0x40
  005ac	e5933000	 ldr         r3, [r3]
  005b0	e2832018	 add         r2, r3, #0x18
  005b4	e59d3010	 ldr         r3, [sp, #0x10]
  005b8	e5823000	 str         r3, [r2]
  005bc		 |$LN4@QueueBuffe|

; 168  :     }
; 169  : 
; 170  :     m_lpWaveHdrTail=lpWaveHdr;

  005bc	e59d300c	 ldr         r3, [sp, #0xC]
  005c0	e2832040	 add         r2, r3, #0x40
  005c4	e59d3010	 ldr         r3, [sp, #0x10]
  005c8	e5823000	 str         r3, [r2]

; 171  : 
; 172  :     // Note: Even if head & tail are valid, current may be NULL if we're in the middle of
; 173  :     // a loop and ran out of data. So, we need to check specifically against current to
; 174  :     // decide if we need to initialize it.
; 175  :     if (!m_lpWaveHdrCurrent)

  005cc	e59d300c	 ldr         r3, [sp, #0xC]
  005d0	e283303c	 add         r3, r3, #0x3C
  005d4	e5933000	 ldr         r3, [r3]
  005d8	e3530000	 cmp         r3, #0
  005dc	1a00001c	 bne         |$LN3@QueueBuffe|

; 176  :     {
; 177  :         m_lpWaveHdrCurrent = lpWaveHdr;

  005e0	e59d300c	 ldr         r3, [sp, #0xC]
  005e4	e283203c	 add         r2, r3, #0x3C
  005e8	e59d3010	 ldr         r3, [sp, #0x10]
  005ec	e5823000	 str         r3, [r2]

; 178  :         m_lpCurrData    = (PBYTE)lpWaveHdr->lpData;

  005f0	e59d300c	 ldr         r3, [sp, #0xC]
  005f4	e2832044	 add         r2, r3, #0x44
  005f8	e59d3010	 ldr         r3, [sp, #0x10]
  005fc	e5933000	 ldr         r3, [r3]
  00600	e5823000	 str         r3, [r2]

; 179  :         m_lpCurrDataEnd = (PBYTE)lpWaveHdr->lpData + lpWaveHdr->dwBufferLength;

  00604	e59d3010	 ldr         r3, [sp, #0x10]
  00608	e2831004	 add         r1, r3, #4
  0060c	e59d3010	 ldr         r3, [sp, #0x10]
  00610	e5932000	 ldr         r2, [r3]
  00614	e5913000	 ldr         r3, [r1]
  00618	e0822003	 add         r2, r2, r3
  0061c	e59d300c	 ldr         r3, [sp, #0xC]
  00620	e2833048	 add         r3, r3, #0x48
  00624	e5832000	 str         r2, [r3]

; 180  :         if (lpWaveHdr->dwFlags & WHDR_BEGINLOOP)    // if this is the start of a loop block

  00628	e59d3010	 ldr         r3, [sp, #0x10]
  0062c	e2833010	 add         r3, r3, #0x10
  00630	e5933000	 ldr         r3, [r3]
  00634	e3130004	 tst         r3, #4
  00638	0a000005	 beq         |$LN2@QueueBuffe|

; 181  :         {
; 182  :             m_dwLoopCount = lpWaveHdr->dwLoops;     // save # of loops

  0063c	e59d3010	 ldr         r3, [sp, #0x10]
  00640	e2831014	 add         r1, r3, #0x14
  00644	e59d300c	 ldr         r3, [sp, #0xC]
  00648	e2832054	 add         r2, r3, #0x54
  0064c	e5913000	 ldr         r3, [r1]
  00650	e5823000	 str         r3, [r2]
  00654		 |$LN2@QueueBuffe|
  00654		 |$LN3@QueueBuffe|

; 183  :         }
; 184  :     }
; 185  : 
; 186  :     if (m_bRunning)

  00654	e59d300c	 ldr         r3, [sp, #0xC]
  00658	e2833010	 add         r3, r3, #0x10
  0065c	e5933000	 ldr         r3, [r3]
  00660	e3530000	 cmp         r3, #0
  00664	0a00000b	 beq         |$LN1@QueueBuffe|

; 187  :     {
; 188  :         m_pDeviceContext->StreamReadyToRender(this);

  00668	e59d100c	 ldr         r1, [sp, #0xC]
  0066c	e59d300c	 ldr         r3, [sp, #0xC]
  00670	e2833050	 add         r3, r3, #0x50
  00674	e5932000	 ldr         r2, [r3]
  00678	e59d300c	 ldr         r3, [sp, #0xC]
  0067c	e2833050	 add         r3, r3, #0x50
  00680	e5930000	 ldr         r0, [r3]
  00684	e5923000	 ldr         r3, [r2]
  00688	e283300c	 add         r3, r3, #0xC
  0068c	e5933000	 ldr         r3, [r3]
  00690	e1a0e00f	 mov         lr, pc
  00694	e12fff13	 bx          r3
  00698		 |$LN1@QueueBuffe|

; 189  :     }
; 190  : 
; 191  :     return MMSYSERR_NOERROR;

  00698	e3a03000	 mov         r3, #0
  0069c	e58d3000	 str         r3, [sp]
  006a0		 |$LN7@QueueBuffe|

; 192  : }

  006a0	e59d0000	 ldr         r0, [sp]
  006a4	e28dd004	 add         sp, sp, #4
  006a8	e89d6000	 ldmia       sp, {sp, lr}
  006ac	e12fff1e	 bx          lr
  006b0		 |$M37553|

			 ENDP  ; |?QueueBuffer@StreamContext@@UAAKPAUwavehdr_tag@@@Z|, StreamContext::QueueBuffer

	EXPORT	|?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z| ; StreamContext::ReturnBuffer
	EXPORT	|?GetNextBuffer@StreamContext@@QAAPAEXZ| ; StreamContext::GetNextBuffer

  00028			 AREA	 |.pdata|, PDATA
|$T37561| DCD	|$LN17@GetNextBuf|
	DCD	0x40007a04
; Function compile flags: /Odtp

  006b0			 AREA	 |.text|, CODE, ARM

  006b0		 |?GetNextBuffer@StreamContext@@QAAPAEXZ| PROC ; StreamContext::GetNextBuffer

; 215  : {

  006b0		 |$LN17@GetNextBuf|
  006b0	e1a0c00d	 mov         r12, sp
  006b4	e92d0001	 stmdb       sp!, {r0}
  006b8	e92d5000	 stmdb       sp!, {r12, lr}
  006bc	e24dd010	 sub         sp, sp, #0x10
  006c0		 |$M37558|

; 216  :     LPWAVEHDR lpOldHdr;
; 217  :     LPWAVEHDR lpNewHdr;
; 218  :     LPSTR pNewBuf=NULL;

  006c0	e3a03000	 mov         r3, #0
  006c4	e58d3000	 str         r3, [sp]

; 219  : 
; 220  :     // Get a pointer to the current buffer which is now done being processed
; 221  :     lpOldHdr=m_lpWaveHdrCurrent;

  006c8	e59d3018	 ldr         r3, [sp, #0x18]
  006cc	e283303c	 add         r3, r3, #0x3C
  006d0	e5933000	 ldr         r3, [r3]
  006d4	e58d3004	 str         r3, [sp, #4]

; 222  : 
; 223  :     if (!lpOldHdr)

  006d8	e59d3004	 ldr         r3, [sp, #4]
  006dc	e3530000	 cmp         r3, #0
  006e0	1a000002	 bne         |$LN12@GetNextBuf|

; 224  :     {
; 225  :         return NULL;

  006e4	e3a03000	 mov         r3, #0
  006e8	e58d300c	 str         r3, [sp, #0xC]
  006ec	ea000065	 b           |$LN13@GetNextBuf|
  006f0		 |$LN12@GetNextBuf|

; 226  :     }
; 227  : 
; 228  :     // Are we in a loop
; 229  :     // Note: a loopcount of 1 means we're not really in a loop
; 230  :     if (m_dwLoopCount>1)

  006f0	e59d3018	 ldr         r3, [sp, #0x18]
  006f4	e2833054	 add         r3, r3, #0x54
  006f8	e5933000	 ldr         r3, [r3]
  006fc	e3530001	 cmp         r3, #1
  00700	9a00001c	 bls         |$LN11@GetNextBuf|

; 231  :     {
; 232  :         // We're in a loop!
; 233  :         if (lpOldHdr->dwFlags & WHDR_ENDLOOP)

  00704	e59d3004	 ldr         r3, [sp, #4]
  00708	e2833010	 add         r3, r3, #0x10
  0070c	e5933000	 ldr         r3, [r3]
  00710	e3130008	 tst         r3, #8
  00714	0a000010	 beq         |$LN10@GetNextBuf|

; 234  :         {
; 235  :            // In loop, last buffer
; 236  :             // If dwLoopCount was set to INFINITE, loop forever
; 237  :             // (Note: this is not explicitly in the wave driver API spec)
; 238  :             if (m_dwLoopCount!=INFINITE)

  00718	e59d3018	 ldr         r3, [sp, #0x18]
  0071c	e2833054	 add         r3, r3, #0x54
  00720	e5933000	 ldr         r3, [r3]
  00724	e3730001	 cmn         r3, #1
  00728	0a000006	 beq         |$LN9@GetNextBuf|

; 239  :             {
; 240  :            m_dwLoopCount--;                    // decrement loop count

  0072c	e59d3018	 ldr         r3, [sp, #0x18]
  00730	e2833054	 add         r3, r3, #0x54
  00734	e5933000	 ldr         r3, [r3]
  00738	e2432001	 sub         r2, r3, #1
  0073c	e59d3018	 ldr         r3, [sp, #0x18]
  00740	e2833054	 add         r3, r3, #0x54
  00744	e5832000	 str         r2, [r3]
  00748		 |$LN9@GetNextBuf|

; 241  :             }
; 242  :            lpNewHdr=m_lpWaveHdrHead;           // go back to start of loop

  00748	e59d3018	 ldr         r3, [sp, #0x18]
  0074c	e2833038	 add         r3, r3, #0x38
  00750	e5933000	 ldr         r3, [r3]
  00754	e58d3008	 str         r3, [sp, #8]

; 243  :         }
; 244  :         else

  00758	ea000003	 b           |$LN8@GetNextBuf|
  0075c		 |$LN10@GetNextBuf|

; 245  :         {
; 246  :            // In loop, intermediate buffer
; 247  :            lpNewHdr=lpOldHdr->lpNext;          // just go to next buffer in loop block

  0075c	e59d3004	 ldr         r3, [sp, #4]
  00760	e2833018	 add         r3, r3, #0x18
  00764	e5933000	 ldr         r3, [r3]
  00768	e58d3008	 str         r3, [sp, #8]
  0076c		 |$LN8@GetNextBuf|

; 248  :         }
; 249  : 
; 250  :         lpOldHdr=NULL;

  0076c	e3a03000	 mov         r3, #0
  00770	e58d3004	 str         r3, [sp, #4]

; 251  :     }
; 252  :     else

  00774	ea00001a	 b           |$LN7@GetNextBuf|
  00778		 |$LN11@GetNextBuf|

; 253  :     {
; 254  :         // Not in a loop; return old buffer and get new buffer
; 255  :         lpNewHdr=lpOldHdr->lpNext;

  00778	e59d3004	 ldr         r3, [sp, #4]
  0077c	e2833018	 add         r3, r3, #0x18
  00780	e5933000	 ldr         r3, [r3]
  00784	e58d3008	 str         r3, [sp, #8]

; 256  : 
; 257  :         m_lpWaveHdrHead = lpNewHdr;           // reset list head

  00788	e59d3018	 ldr         r3, [sp, #0x18]
  0078c	e2832038	 add         r2, r3, #0x38
  00790	e59d3008	 ldr         r3, [sp, #8]
  00794	e5823000	 str         r3, [r2]

; 258  :         if (!lpNewHdr)

  00798	e59d3008	 ldr         r3, [sp, #8]
  0079c	e3530000	 cmp         r3, #0
  007a0	1a000004	 bne         |$LN6@GetNextBuf|

; 259  :         {
; 260  :             m_lpWaveHdrTail=NULL;             // no new buffer, reset tail to NULL

  007a4	e59d3018	 ldr         r3, [sp, #0x18]
  007a8	e2832040	 add         r2, r3, #0x40
  007ac	e3a03000	 mov         r3, #0
  007b0	e5823000	 str         r3, [r2]
  007b4	ea00000a	 b           |$LN5@GetNextBuf|
  007b8		 |$LN6@GetNextBuf|

; 261  :         }
; 262  :         else if (lpNewHdr->dwFlags & WHDR_BEGINLOOP)    // if new buffer is start of a loop block

  007b8	e59d3008	 ldr         r3, [sp, #8]
  007bc	e2833010	 add         r3, r3, #0x10
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e3130004	 tst         r3, #4
  007c8	0a000005	 beq         |$LN4@GetNextBuf|

; 263  :         {
; 264  :             m_dwLoopCount=lpNewHdr->dwLoops;  // save # of loops

  007cc	e59d3008	 ldr         r3, [sp, #8]
  007d0	e2831014	 add         r1, r3, #0x14
  007d4	e59d3018	 ldr         r3, [sp, #0x18]
  007d8	e2832054	 add         r2, r3, #0x54
  007dc	e5913000	 ldr         r3, [r1]
  007e0	e5823000	 str         r3, [r2]
  007e4		 |$LN4@GetNextBuf|
  007e4		 |$LN5@GetNextBuf|
  007e4		 |$LN7@GetNextBuf|

; 265  :         }
; 266  :     }
; 267  : 
; 268  :     m_lpWaveHdrCurrent=lpNewHdr;              // save current buffer pointer

  007e4	e59d3018	 ldr         r3, [sp, #0x18]
  007e8	e283203c	 add         r2, r3, #0x3C
  007ec	e59d3008	 ldr         r3, [sp, #8]
  007f0	e5823000	 str         r3, [r2]

; 269  : 
; 270  :     if (lpNewHdr)

  007f4	e59d3008	 ldr         r3, [sp, #8]
  007f8	e3530000	 cmp         r3, #0
  007fc	0a00000f	 beq         |$LN3@GetNextBuf|

; 271  :     {
; 272  :         m_lpCurrData    = (PBYTE)lpNewHdr->lpData;  // reinitialize data pointer

  00800	e59d3018	 ldr         r3, [sp, #0x18]
  00804	e2832044	 add         r2, r3, #0x44
  00808	e59d3008	 ldr         r3, [sp, #8]
  0080c	e5933000	 ldr         r3, [r3]
  00810	e5823000	 str         r3, [r2]

; 273  :         m_lpCurrDataEnd = m_lpCurrData + lpNewHdr->dwBufferLength;

  00814	e59d3018	 ldr         r3, [sp, #0x18]
  00818	e2832044	 add         r2, r3, #0x44
  0081c	e59d3008	 ldr         r3, [sp, #8]
  00820	e2833004	 add         r3, r3, #4
  00824	e5922000	 ldr         r2, [r2]
  00828	e5933000	 ldr         r3, [r3]
  0082c	e0822003	 add         r2, r2, r3
  00830	e59d3018	 ldr         r3, [sp, #0x18]
  00834	e2833048	 add         r3, r3, #0x48
  00838	e5832000	 str         r2, [r3]

; 274  :     }
; 275  :     else

  0083c	ea000007	 b           |$LN2@GetNextBuf|
  00840		 |$LN3@GetNextBuf|

; 276  :     {
; 277  :         m_lpCurrData  = NULL;

  00840	e59d3018	 ldr         r3, [sp, #0x18]
  00844	e2832044	 add         r2, r3, #0x44
  00848	e3a03000	 mov         r3, #0
  0084c	e5823000	 str         r3, [r2]

; 278  :         m_lpCurrDataEnd = NULL;

  00850	e59d3018	 ldr         r3, [sp, #0x18]
  00854	e2832048	 add         r2, r3, #0x48
  00858	e3a03000	 mov         r3, #0
  0085c	e5823000	 str         r3, [r2]
  00860		 |$LN2@GetNextBuf|

; 279  :     }
; 280  : 
; 281  :     // Return the old buffer
; 282  :     // This may cause the stream to be destroyed, so make sure that any calls to this function
; 283  :     // are within an AddRef/Release block
; 284  :     if (lpOldHdr)

  00860	e59d3004	 ldr         r3, [sp, #4]
  00864	e3530000	 cmp         r3, #0
  00868	0a000002	 beq         |$LN1@GetNextBuf|

; 285  :     {
; 286  :         ReturnBuffer(lpOldHdr);

  0086c	e59d1004	 ldr         r1, [sp, #4]
  00870	e59d0018	 ldr         r0, [sp, #0x18]
  00874	eb000000	 bl          |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z|
  00878		 |$LN1@GetNextBuf|

; 287  :     }
; 288  : 
; 289  :     return m_lpCurrData;

  00878	e59d3018	 ldr         r3, [sp, #0x18]
  0087c	e2833044	 add         r3, r3, #0x44
  00880	e5933000	 ldr         r3, [r3]
  00884	e58d300c	 str         r3, [sp, #0xC]
  00888		 |$LN13@GetNextBuf|

; 290  : }

  00888	e59d000c	 ldr         r0, [sp, #0xC]
  0088c	e28dd010	 add         sp, sp, #0x10
  00890	e89d6000	 ldmia       sp, {sp, lr}
  00894	e12fff1e	 bx          lr
  00898		 |$M37559|

			 ENDP  ; |?GetNextBuffer@StreamContext@@QAAPAEXZ|, StreamContext::GetNextBuffer

	EXPORT	|??_C@_1DO@KKCIKAN@?$AAW?$AAO?$AAD?$AAM?$AA?3?$AA?5?$AAD?$AAo?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAC?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37568| DCD	|$LN7@ReturnBuff|
	DCD	0x40002f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@KKCIKAN@?$AAW?$AAO?$AAD?$AAM?$AA?3?$AA?5?$AAD?$AAo?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAC?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "O", 0x0, "D", 0x0, "M", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "o", 0x0, "C", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "b"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "t", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "m", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z| PROC ; StreamContext::ReturnBuffer

; 122  :     {

  00000		 |$LN7@ReturnBuff|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37565|

; 123  :         lpHdr->dwFlags &= ~WHDR_INQUEUE;

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833010	 add         r3, r3, #0x10
  00018	e5932000	 ldr         r2, [r3]
  0001c	e3e03010	 mvn         r3, #0x10
  00020	e0022003	 and         r2, r2, r3
  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e2833010	 add         r3, r3, #0x10
  0002c	e5832000	 str         r2, [r3]

; 124  :         lpHdr->dwFlags |= WHDR_DONE;

  00030	e59d3010	 ldr         r3, [sp, #0x10]
  00034	e2833010	 add         r3, r3, #0x10
  00038	e5933000	 ldr         r3, [r3]
  0003c	e3832001	 orr         r2, r3, #1
  00040	e59d3010	 ldr         r3, [sp, #0x10]
  00044	e2833010	 add         r3, r3, #0x10
  00048	e5832000	 str         r2, [r3]

; 125  :         DEBUGMSG(ZONE_WODM && ZONE_VERBOSE,(TEXT("WODM: DoCallbackStreamClosed\r\n")));

  0004c	e59f3064	 ldr         r3, [pc, #0x64]
  00050	e5933440	 ldr         r3, [r3, #0x440]
  00054	e3130010	 tst         r3, #0x10
  00058	0a000008	 beq         |$LN3@ReturnBuff|
  0005c	e59f3054	 ldr         r3, [pc, #0x54]
  00060	e5933440	 ldr         r3, [r3, #0x440]
  00064	e3130004	 tst         r3, #4
  00068	0a000004	 beq         |$LN3@ReturnBuff|
  0006c	e59f0040	 ldr         r0, [pc, #0x40]
  00070	eb000000	 bl          NKDbgPrintfW
  00074	e3a03001	 mov         r3, #1
  00078	e58d3000	 str         r3, [sp]
  0007c	ea000001	 b           |$LN4@ReturnBuff|
  00080		 |$LN3@ReturnBuff|
  00080	e3a03000	 mov         r3, #0
  00084	e58d3000	 str         r3, [sp]
  00088		 |$LN4@ReturnBuff|

; 126  :         DoCallbackReturnBuffer(lpHdr);

  00088	e59d1010	 ldr         r1, [sp, #0x10]
  0008c	e59d300c	 ldr         r3, [sp, #0xC]
  00090	e5933000	 ldr         r3, [r3]
  00094	e2833020	 add         r3, r3, #0x20
  00098	e59d000c	 ldr         r0, [sp, #0xC]
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e1a0e00f	 mov         lr, pc
  000a4	e12fff13	 bx          r3

; 127  :     }

  000a8	e28dd004	 add         sp, sp, #4
  000ac	e89d6000	 ldmia       sp, {sp, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN8@ReturnBuff|
  000b4		 |$LN9@ReturnBuff|
  000b4	00000000	 DCD         |??_C@_1DO@KKCIKAN@?$AAW?$AAO?$AAD?$AAM?$AA?3?$AA?5?$AAD?$AAo?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AAS?$AAt?$AAr?$AAe?$AAa?$AAm?$AAC?$AAl?$AAo?$AAs?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  000b8		 |$LN10@ReturnBuff|
  000b8	00000000	 DCD         |dpCurSettings|
  000bc		 |$M37566|

			 ENDP  ; |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z|, StreamContext::ReturnBuffer

	EXPORT	|?BreakLoop@StreamContext@@QAAKXZ|	; StreamContext::BreakLoop

  00030			 AREA	 |.pdata|, PDATA
|$T37579| DCD	|$LN9@BreakLoop|
	DCD	0x40003604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.cpp

  00898			 AREA	 |.text|, CODE, ARM

  00898		 |?BreakLoop@StreamContext@@QAAKXZ| PROC ; StreamContext::BreakLoop

; 301  : {

  00898		 |$LN9@BreakLoop|
  00898	e1a0c00d	 mov         r12, sp
  0089c	e92d0001	 stmdb       sp!, {r0}
  008a0	e92d5000	 stmdb       sp!, {r12, lr}
  008a4	e24dd008	 sub         sp, sp, #8
  008a8		 |$M37576|

; 302  :     AddRef();

  008a8	e59d0010	 ldr         r0, [sp, #0x10]
  008ac	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 303  : 
; 304  :     if (m_dwLoopCount>0)

  008b0	e59d3010	 ldr         r3, [sp, #0x10]
  008b4	e2833054	 add         r3, r3, #0x54
  008b8	e5933000	 ldr         r3, [r3]
  008bc	e3530000	 cmp         r3, #0
  008c0	9a000022	 bls         |$LN4@BreakLoop|

; 305  :     {
; 306  :         m_dwLoopCount = 0;

  008c4	e59d3010	 ldr         r3, [sp, #0x10]
  008c8	e2832054	 add         r2, r3, #0x54
  008cc	e3a03000	 mov         r3, #0
  008d0	e5823000	 str         r3, [r2]
  008d4		 |$LN3@BreakLoop|

; 307  : 
; 308  :         LPWAVEHDR lpHdr;
; 309  :         while (m_lpWaveHdrHead!=m_lpWaveHdrCurrent)

  008d4	e59d3010	 ldr         r3, [sp, #0x10]
  008d8	e2832038	 add         r2, r3, #0x38
  008dc	e59d3010	 ldr         r3, [sp, #0x10]
  008e0	e283303c	 add         r3, r3, #0x3C
  008e4	e5922000	 ldr         r2, [r2]
  008e8	e5933000	 ldr         r3, [r3]
  008ec	e1520003	 cmp         r2, r3
  008f0	0a000016	 beq         |$LN2@BreakLoop|

; 310  :         {
; 311  :             lpHdr = m_lpWaveHdrHead;

  008f4	e59d3010	 ldr         r3, [sp, #0x10]
  008f8	e2833038	 add         r3, r3, #0x38
  008fc	e5933000	 ldr         r3, [r3]
  00900	e58d3000	 str         r3, [sp]

; 312  :             m_lpWaveHdrHead = lpHdr->lpNext;

  00904	e59d3000	 ldr         r3, [sp]
  00908	e2831018	 add         r1, r3, #0x18
  0090c	e59d3010	 ldr         r3, [sp, #0x10]
  00910	e2832038	 add         r2, r3, #0x38
  00914	e5913000	 ldr         r3, [r1]
  00918	e5823000	 str         r3, [r2]

; 313  :             if (m_lpWaveHdrHead==NULL)

  0091c	e59d3010	 ldr         r3, [sp, #0x10]
  00920	e2833038	 add         r3, r3, #0x38
  00924	e5933000	 ldr         r3, [r3]
  00928	e3530000	 cmp         r3, #0
  0092c	1a000003	 bne         |$LN1@BreakLoop|

; 314  :             {
; 315  :                 m_lpWaveHdrTail=NULL;

  00930	e59d3010	 ldr         r3, [sp, #0x10]
  00934	e2832040	 add         r2, r3, #0x40
  00938	e3a03000	 mov         r3, #0
  0093c	e5823000	 str         r3, [r2]
  00940		 |$LN1@BreakLoop|

; 316  :             }
; 317  :             ReturnBuffer(lpHdr);

  00940	e59d1000	 ldr         r1, [sp]
  00944	e59d0010	 ldr         r0, [sp, #0x10]
  00948	eb000000	 bl          |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z|

; 318  :         }

  0094c	eaffffe0	 b           |$LN3@BreakLoop|
  00950		 |$LN2@BreakLoop|
  00950		 |$LN4@BreakLoop|

; 319  :     }
; 320  : 
; 321  :     Release();

  00950	e59d0010	 ldr         r0, [sp, #0x10]
  00954	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 322  : 
; 323  :     return MMSYSERR_NOERROR;

  00958	e3a03000	 mov         r3, #0
  0095c	e58d3004	 str         r3, [sp, #4]

; 324  : }

  00960	e59d0004	 ldr         r0, [sp, #4]
  00964	e28dd008	 add         sp, sp, #8
  00968	e89d6000	 ldmia       sp, {sp, lr}
  0096c	e12fff1e	 bx          lr
  00970		 |$M37577|

			 ENDP  ; |?BreakLoop@StreamContext@@QAAKXZ|, StreamContext::BreakLoop

	EXPORT	|?GetSecondAttenMax@HardwareContext@@QAAKXZ| ; HardwareContext::GetSecondAttenMax
	EXPORT	|?GetDeviceAttenMax@HardwareContext@@QAAKXZ| ; HardwareContext::GetDeviceAttenMax
	EXPORT	|?GetStreamAttenMax@HardwareContext@@QAAKXZ| ; HardwareContext::GetStreamAttenMax
	EXPORT	|?GetSecondaryGainLimit@DeviceContext@@QAAKK@Z| ; DeviceContext::GetSecondaryGainLimit
	EXPORT	|?GetGain@DeviceContext@@QAAKXZ|	; DeviceContext::GetGain
	EXPORT	|?MapGain@StreamContext@@QAAKK@Z|	; StreamContext::MapGain
	IMPORT	|?g_pHWContext@@3PAVHardwareContext@@A|	; g_pHWContext

  00038			 AREA	 |.pdata|, PDATA
|$T37585| DCD	|$LN14@MapGain|
	DCD	0x40008604
; Function compile flags: /Odtp

  00970			 AREA	 |.text|, CODE, ARM

  00970		 |?MapGain@StreamContext@@QAAKK@Z| PROC	; StreamContext::MapGain

; 560  : {

  00970		 |$LN14@MapGain|
  00970	e1a0c00d	 mov         r12, sp
  00974	e92d0003	 stmdb       sp!, {r0, r1}
  00978	e92d5000	 stmdb       sp!, {r12, lr}
  0097c	e24dd034	 sub         sp, sp, #0x34
  00980		 |$M37582|

; 561  :     // Get correct stream gain based on channel
; 562  :     StreamGain &= 0xFFFF;

  00980	e59d2040	 ldr         r2, [sp, #0x40]
  00984	e3a03cff	 mov         r3, #0xFF, 24
  00988	e38330ff	 orr         r3, r3, #0xFF
  0098c	e0023003	 and         r3, r2, r3
  00990	e58d3040	 str         r3, [sp, #0x40]

; 563  : 
; 564  :     // Get Device gain
; 565  :     DWORD DeviceGain;
; 566  :     if (m_SecondaryGainClass >= SECONDARYDEVICEGAINCLASSMAX)

  00994	e59d303c	 ldr         r3, [sp, #0x3C]
  00998	e283305c	 add         r3, r3, #0x5C
  0099c	e5933000	 ldr         r3, [r3]
  009a0	e3530002	 cmp         r3, #2
  009a4	3a000003	 bcc         |$LN9@MapGain|

; 567  :     {
; 568  :         DeviceGain = 0xFFFF;

  009a8	e3a03cff	 mov         r3, #0xFF, 24
  009ac	e38330ff	 orr         r3, r3, #0xFF
  009b0	e58d3008	 str         r3, [sp, #8]

; 569  :     }
; 570  :     else

  009b4	ea00000b	 b           |$LN8@MapGain|
  009b8		 |$LN9@MapGain|

; 571  :     {
; 572  :         // Apply device gain
; 573  :         DeviceGain = m_pDeviceContext->GetGain();

  009b8	e59d303c	 ldr         r3, [sp, #0x3C]
  009bc	e2833050	 add         r3, r3, #0x50
  009c0	e5930000	 ldr         r0, [r3]
  009c4	eb000000	 bl          |?GetGain@DeviceContext@@QAAKXZ|
  009c8	e58d0020	 str         r0, [sp, #0x20]
  009cc	e59d3020	 ldr         r3, [sp, #0x20]
  009d0	e58d3008	 str         r3, [sp, #8]

; 574  :         DeviceGain &= 0xFFFF;

  009d4	e59d2008	 ldr         r2, [sp, #8]
  009d8	e3a03cff	 mov         r3, #0xFF, 24
  009dc	e38330ff	 orr         r3, r3, #0xFF
  009e0	e0023003	 and         r3, r2, r3
  009e4	e58d3008	 str         r3, [sp, #8]
  009e8		 |$LN8@MapGain|

; 575  :     }
; 576  : 
; 577  :     // Get Secondary gain
; 578  :     DWORD SecondaryGain;
; 579  :     SecondaryGain = m_pDeviceContext->GetSecondaryGainLimit(m_SecondaryGainClass);

  009e8	e59d303c	 ldr         r3, [sp, #0x3C]
  009ec	e283305c	 add         r3, r3, #0x5C
  009f0	e5931000	 ldr         r1, [r3]
  009f4	e59d303c	 ldr         r3, [sp, #0x3C]
  009f8	e2833050	 add         r3, r3, #0x50
  009fc	e5930000	 ldr         r0, [r3]
  00a00	eb000000	 bl          |?GetSecondaryGainLimit@DeviceContext@@QAAKK@Z|
  00a04	e58d0024	 str         r0, [sp, #0x24]
  00a08	e59d3024	 ldr         r3, [sp, #0x24]
  00a0c	e58d3004	 str         r3, [sp, #4]

; 580  :     SecondaryGain &= 0xFFFF; // For now, only use lowest 16 bits for both channels

  00a10	e59d2004	 ldr         r2, [sp, #4]
  00a14	e3a03cff	 mov         r3, #0xFF, 24
  00a18	e38330ff	 orr         r3, r3, #0xFF
  00a1c	e0023003	 and         r3, r2, r3
  00a20	e58d3004	 str         r3, [sp, #4]

; 581  : 
; 582  :     DWORD fGainMultiplier;
; 583  : 
; 584  :     // Special handling- if any gain is totally 0, mute the output
; 585  :     if ((StreamGain==0) || (DeviceGain==0) || (SecondaryGain==0))

  00a24	e59d3040	 ldr         r3, [sp, #0x40]
  00a28	e3530000	 cmp         r3, #0
  00a2c	0a000005	 beq         |$LN6@MapGain|
  00a30	e59d3008	 ldr         r3, [sp, #8]
  00a34	e3530000	 cmp         r3, #0
  00a38	0a000002	 beq         |$LN6@MapGain|
  00a3c	e59d3004	 ldr         r3, [sp, #4]
  00a40	e3530000	 cmp         r3, #0
  00a44	1a000002	 bne         |$LN7@MapGain|
  00a48		 |$LN6@MapGain|

; 586  :     {
; 587  :         fGainMultiplier = 0;

  00a48	e3a03000	 mov         r3, #0
  00a4c	e58d3000	 str         r3, [sp]

; 588  :     }
; 589  :     else

  00a50	ea000044	 b           |$LN5@MapGain|
  00a54		 |$LN7@MapGain|

; 590  :     {
; 591  :         // Now calculate attenuation of each in dB using appropriate ranges
; 592  : 
; 593  :         // Stream volume is normalized to the range from 0 to -100 dB
; 594  :         // Device and secondary gain are normalized from 0 to -35 dB
; 595  :         // These can be modified in hwctxt.h
; 596  : 
; 597  :         DWORD dBAttenStream, dBAttenDevice, dBAttenSecondary, dBAttenTotal;
; 598  : 
; 599  :         dBAttenStream    = ((0xFFFF - StreamGain)    * 
; 600  :             g_pHWContext->GetStreamAttenMax());

  00a54	e59f3128	 ldr         r3, [pc, #0x128]
  00a58	e5930000	 ldr         r0, [r3]
  00a5c	eb000000	 bl          |?GetStreamAttenMax@HardwareContext@@QAAKXZ|
  00a60	e58d0028	 str         r0, [sp, #0x28]
  00a64	e59d2040	 ldr         r2, [sp, #0x40]
  00a68	e3a03cff	 mov         r3, #0xFF, 24
  00a6c	e38330ff	 orr         r3, r3, #0xFF
  00a70	e0622003	 rsb         r2, r2, r3
  00a74	e59d3028	 ldr         r3, [sp, #0x28]
  00a78	e0030392	 mul         r3, r2, r3
  00a7c	e58d3018	 str         r3, [sp, #0x18]

; 601  :         dBAttenDevice    = ((0xFFFF - DeviceGain)    * 
; 602  :             g_pHWContext->GetDeviceAttenMax());

  00a80	e59f30fc	 ldr         r3, [pc, #0xFC]
  00a84	e5930000	 ldr         r0, [r3]
  00a88	eb000000	 bl          |?GetDeviceAttenMax@HardwareContext@@QAAKXZ|
  00a8c	e58d002c	 str         r0, [sp, #0x2C]
  00a90	e59d2008	 ldr         r2, [sp, #8]
  00a94	e3a03cff	 mov         r3, #0xFF, 24
  00a98	e38330ff	 orr         r3, r3, #0xFF
  00a9c	e0622003	 rsb         r2, r2, r3
  00aa0	e59d302c	 ldr         r3, [sp, #0x2C]
  00aa4	e0030392	 mul         r3, r2, r3
  00aa8	e58d3014	 str         r3, [sp, #0x14]

; 603  :         dBAttenSecondary = ((0xFFFF - SecondaryGain) * 
; 604  :             g_pHWContext->GetSecondAttenMax());

  00aac	e59f30d0	 ldr         r3, [pc, #0xD0]
  00ab0	e5930000	 ldr         r0, [r3]
  00ab4	eb000000	 bl          |?GetSecondAttenMax@HardwareContext@@QAAKXZ|
  00ab8	e58d0030	 str         r0, [sp, #0x30]
  00abc	e59d2004	 ldr         r2, [sp, #4]
  00ac0	e3a03cff	 mov         r3, #0xFF, 24
  00ac4	e38330ff	 orr         r3, r3, #0xFF
  00ac8	e0622003	 rsb         r2, r2, r3
  00acc	e59d3030	 ldr         r3, [sp, #0x30]
  00ad0	e0030392	 mul         r3, r2, r3
  00ad4	e58d3010	 str         r3, [sp, #0x10]

; 605  : 
; 606  :         // Add together
; 607  :         dBAttenTotal = dBAttenStream + dBAttenDevice + dBAttenSecondary;

  00ad8	e59d2018	 ldr         r2, [sp, #0x18]
  00adc	e59d3014	 ldr         r3, [sp, #0x14]
  00ae0	e0822003	 add         r2, r2, r3
  00ae4	e59d3010	 ldr         r3, [sp, #0x10]
  00ae8	e0823003	 add         r3, r2, r3
  00aec	e58d300c	 str         r3, [sp, #0xC]

; 608  : 
; 609  :         // Multiply result by 2 for .5 dB steps in the table
; 610  :         dBAttenTotal *= 2;

  00af0	e59d200c	 ldr         r2, [sp, #0xC]
  00af4	e3a03002	 mov         r3, #2
  00af8	e0030392	 mul         r3, r2, r3
  00afc	e58d300c	 str         r3, [sp, #0xC]

; 611  : 
; 612  :         // Round up to account for rounding errors in lower 16 bits
; 613  :         dBAttenTotal += 0x8000;

  00b00	e59d300c	 ldr         r3, [sp, #0xC]
  00b04	e2833902	 add         r3, r3, #2, 18
  00b08	e58d300c	 str         r3, [sp, #0xC]

; 614  : 
; 615  :         // Now shift back to the lowest 16 bits to get an index into the table
; 616  :         dBAttenTotal >>= 16;

  00b0c	e59d300c	 ldr         r3, [sp, #0xC]
  00b10	e1a03823	 mov         r3, r3, lsr #16
  00b14	e58d300c	 str         r3, [sp, #0xC]

; 617  : 
; 618  :         // dBAttenTotal should range from 0 to something like 340 (if all terms were close to 0)
; 619  : 
; 620  :         // Special case 0 as totally muted. The table starts at -.5dB, rather than 0dB, since
; 621  :         // 0dB would take more than the 16-bits we allowed per entry.
; 622  :         if (dBAttenTotal==0)

  00b18	e59d300c	 ldr         r3, [sp, #0xC]
  00b1c	e3530000	 cmp         r3, #0
  00b20	1a000002	 bne         |$LN4@MapGain|

; 623  :         {
; 624  :             fGainMultiplier = 0x10000;

  00b24	e3a03801	 mov         r3, #1, 16
  00b28	e58d3000	 str         r3, [sp]
  00b2c	ea00000d	 b           |$LN3@MapGain|
  00b30		 |$LN4@MapGain|

; 625  :         }
; 626  :         else if (dBAttenTotal>200)

  00b30	e59d300c	 ldr         r3, [sp, #0xC]
  00b34	e35300c8	 cmp         r3, #0xC8
  00b38	9a000002	 bls         |$LN2@MapGain|

; 627  :         {
; 628  :             fGainMultiplier = 0;

  00b3c	e3a03000	 mov         r3, #0
  00b40	e58d3000	 str         r3, [sp]

; 629  :         }
; 630  :         else

  00b44	ea000007	 b           |$LN1@MapGain|
  00b48		 |$LN2@MapGain|

; 631  :         {
; 632  :             fGainMultiplier = (DWORD)GainMap[dBAttenTotal-1];

  00b48	e59d300c	 ldr         r3, [sp, #0xC]
  00b4c	e2431001	 sub         r1, r3, #1
  00b50	e3a03002	 mov         r3, #2
  00b54	e0020391	 mul         r2, r1, r3
  00b58	e59f3020	 ldr         r3, [pc, #0x20]
  00b5c	e0833002	 add         r3, r3, r2
  00b60	e1d330b0	 ldrh        r3, [r3]
  00b64	e58d3000	 str         r3, [sp]
  00b68		 |$LN1@MapGain|
  00b68		 |$LN3@MapGain|
  00b68		 |$LN5@MapGain|

; 633  :         }
; 634  :     }
; 635  : 
; 636  :     return fGainMultiplier;

  00b68	e59d3000	 ldr         r3, [sp]
  00b6c	e58d301c	 str         r3, [sp, #0x1C]

; 637  : }

  00b70	e59d001c	 ldr         r0, [sp, #0x1C]
  00b74	e28dd034	 add         sp, sp, #0x34
  00b78	e89d6000	 ldmia       sp, {sp, lr}
  00b7c	e12fff1e	 bx          lr
  00b80		 |$LN15@MapGain|
  00b80		 |$LN16@MapGain|
  00b80	00000000	 DCD         |GainMap|
  00b84		 |$LN17@MapGain|
  00b84	00000000	 DCD         |?g_pHWContext@@3PAVHardwareContext@@A|
  00b88		 |$M37583|

			 ENDP  ; |?MapGain@StreamContext@@QAAKK@Z|, StreamContext::MapGain

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\devctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37594| DCD	|$LN5@GetGain|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetGain@DeviceContext@@QAAKXZ| PROC	; DeviceContext::GetGain

; 56   :     {

  00000		 |$LN5@GetGain|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37591|

; 57   :         return m_dwGain;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283300c	 add         r3, r3, #0xC
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 58   :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37592|

			 ENDP  ; |?GetGain@DeviceContext@@QAAKXZ|, DeviceContext::GetGain


  00000			 AREA	 |.pdata|, PDATA
|$T37602| DCD	|$LN5@GetSeconda|
	DCD	0x40001004
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetSecondaryGainLimit@DeviceContext@@QAAKK@Z| PROC ; DeviceContext::GetSecondaryGainLimit

; 79   :     {

  00000		 |$LN5@GetSeconda|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37599|

; 80   :         return m_dwSecondaryGainLimit[GainClass];

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2831014	 add         r1, r3, #0x14
  00018	e59d2010	 ldr         r2, [sp, #0x10]
  0001c	e3a03004	 mov         r3, #4
  00020	e0030392	 mul         r3, r2, r3
  00024	e0813003	 add         r3, r1, r3
  00028	e5933000	 ldr         r3, [r3]
  0002c	e58d3000	 str         r3, [sp]

; 81   :     }

  00030	e59d0000	 ldr         r0, [sp]
  00034	e28dd004	 add         sp, sp, #4
  00038	e89d6000	 ldmia       sp, {sp, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M37600|

			 ENDP  ; |?GetSecondaryGainLimit@DeviceContext@@QAAKK@Z|, DeviceContext::GetSecondaryGainLimit

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\hwctxt.h

  00000			 AREA	 |.pdata|, PDATA
|$T37610| DCD	|$LN5@GetStreamA|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetStreamAttenMax@HardwareContext@@QAAKXZ| PROC ; HardwareContext::GetStreamAttenMax

; 99   :     {

  00000		 |$LN5@GetStreamA|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37607|

; 100  :         return m_dwStreamAttenMax;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e28330e0	 add         r3, r3, #0xE0
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 101  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37608|

			 ENDP  ; |?GetStreamAttenMax@HardwareContext@@QAAKXZ|, HardwareContext::GetStreamAttenMax


  00000			 AREA	 |.pdata|, PDATA
|$T37618| DCD	|$LN5@GetDeviceA|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDeviceAttenMax@HardwareContext@@QAAKXZ| PROC ; HardwareContext::GetDeviceAttenMax

; 107  :     {

  00000		 |$LN5@GetDeviceA|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37615|

; 108  :         return m_dwDeviceAttenMax;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e28330e4	 add         r3, r3, #0xE4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 109  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37616|

			 ENDP  ; |?GetDeviceAttenMax@HardwareContext@@QAAKXZ|, HardwareContext::GetDeviceAttenMax


  00000			 AREA	 |.pdata|, PDATA
|$T37626| DCD	|$LN5@GetSecondA|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetSecondAttenMax@HardwareContext@@QAAKXZ| PROC ; HardwareContext::GetSecondAttenMax

; 116  :     {

  00000		 |$LN5@GetSecondA|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37623|

; 117  :         return m_dwSecondAttenMax;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e28330e8	 add         r3, r3, #0xE8
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 118  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M37624|

			 ENDP  ; |?GetSecondAttenMax@HardwareContext@@QAAKXZ|, HardwareContext::GetSecondAttenMax

	EXPORT	|?GetPos@StreamContext@@UAAKPAUmmtime_tag@@@Z| ; StreamContext::GetPos
	IMPORT	|__rt_udiv|

  00040			 AREA	 |.pdata|, PDATA
|$T37635| DCD	|$LN12@GetPos|
	DCD	0x40008d04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\wavedev\strmctxt.cpp

  00b88			 AREA	 |.text|, CODE, ARM

  00b88		 |?GetPos@StreamContext@@UAAKPAUmmtime_tag@@@Z| PROC ; StreamContext::GetPos

; 648  : {

  00b88		 |$LN12@GetPos|
  00b88	e1a0c00d	 mov         r12, sp
  00b8c	e92d0003	 stmdb       sp!, {r0, r1}
  00b90	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00b94	e24dd008	 sub         sp, sp, #8
  00b98		 |$M37632|

; 649  :     switch (pmmt->wType)

  00b98	e59d1018	 ldr         r1, [sp, #0x18]
  00b9c	e5d13003	 ldrb        r3, [r1, #3]
  00ba0	e1a02403	 mov         r2, r3, lsl #8
  00ba4	e5d13002	 ldrb        r3, [r1, #2]
  00ba8	e1833002	 orr         r3, r3, r2
  00bac	e1a02403	 mov         r2, r3, lsl #8
  00bb0	e5d13001	 ldrb        r3, [r1, #1]
  00bb4	e1833002	 orr         r3, r3, r2
  00bb8	e1a02403	 mov         r2, r3, lsl #8
  00bbc	e5d13000	 ldrb        r3, [r1]
  00bc0	e1833002	 orr         r3, r3, r2
  00bc4	e58d3004	 str         r3, [sp, #4]
  00bc8	e59d3004	 ldr         r3, [sp, #4]
  00bcc	e3530001	 cmp         r3, #1
  00bd0	0a00002c	 beq         |$LN4@GetPos|
  00bd4	e59d3004	 ldr         r3, [sp, #4]
  00bd8	e3530002	 cmp         r3, #2
  00bdc	0a000003	 beq         |$LN5@GetPos|
  00be0	e59d3004	 ldr         r3, [sp, #4]
  00be4	e3530004	 cmp         r3, #4
  00be8	0a00005f	 beq         |$LN1@GetPos|
  00bec	ea000053	 b           |$LN2@GetPos|
  00bf0		 |$LN5@GetPos|

; 650  :     {
; 651  : 
; 652  :     case TIME_SAMPLES:
; 653  :         pmmt->u.sample = (m_dwByteCount * 8) /
; 654  :                          (m_WaveFormat.nChannels * m_WaveFormat.wBitsPerSample);

  00bf0	e59d3014	 ldr         r3, [sp, #0x14]
  00bf4	e283304c	 add         r3, r3, #0x4C
  00bf8	e5932000	 ldr         r2, [r3]
  00bfc	e3a03008	 mov         r3, #8
  00c00	e0040392	 mul         r4, r2, r3
  00c04	e59d3014	 ldr         r3, [sp, #0x14]
  00c08	e2831026	 add         r1, r3, #0x26
  00c0c	e5d13001	 ldrb        r3, [r1, #1]
  00c10	e1a03403	 mov         r3, r3, lsl #8
  00c14	e1a02803	 mov         r2, r3, lsl #16
  00c18	e1a02822	 mov         r2, r2, lsr #16
  00c1c	e5d13000	 ldrb        r3, [r1]
  00c20	e1833002	 orr         r3, r3, r2
  00c24	e1a0e003	 mov         lr, r3
  00c28	e59d3014	 ldr         r3, [sp, #0x14]
  00c2c	e2831032	 add         r1, r3, #0x32
  00c30	e5d13001	 ldrb        r3, [r1, #1]
  00c34	e1a03403	 mov         r3, r3, lsl #8
  00c38	e1a02803	 mov         r2, r3, lsl #16
  00c3c	e1a02822	 mov         r2, r2, lsr #16
  00c40	e5d13000	 ldrb        r3, [r1]
  00c44	e1833002	 orr         r3, r3, r2
  00c48	e000039e	 mul         r0, lr, r3
  00c4c	e1a01004	 mov         r1, r4
  00c50	eb000000	 bl          __rt_udiv
  00c54	e59d3018	 ldr         r3, [sp, #0x18]
  00c58	e2831004	 add         r1, r3, #4
  00c5c	e1a03000	 mov         r3, r0
  00c60	e5c13000	 strb        r3, [r1]
  00c64	e1a02423	 mov         r2, r3, lsr #8
  00c68	e1a03002	 mov         r3, r2
  00c6c	e5c13001	 strb        r3, [r1, #1]
  00c70	e1a02422	 mov         r2, r2, lsr #8
  00c74	e1a03002	 mov         r3, r2
  00c78	e5c13002	 strb        r3, [r1, #2]
  00c7c	e1a03422	 mov         r3, r2, lsr #8
  00c80	e5c13003	 strb        r3, [r1, #3]

; 655  :         break;

  00c84	ea000046	 b           |$LN6@GetPos|
  00c88		 |$LN4@GetPos|

; 656  : 
; 657  :     case TIME_MS:
; 658  :         if (m_WaveFormat.nAvgBytesPerSec != 0)

  00c88	e59d3014	 ldr         r3, [sp, #0x14]
  00c8c	e283102c	 add         r1, r3, #0x2C
  00c90	e5d13003	 ldrb        r3, [r1, #3]
  00c94	e1a02403	 mov         r2, r3, lsl #8
  00c98	e5d13002	 ldrb        r3, [r1, #2]
  00c9c	e1833002	 orr         r3, r3, r2
  00ca0	e1a02403	 mov         r2, r3, lsl #8
  00ca4	e5d13001	 ldrb        r3, [r1, #1]
  00ca8	e1833002	 orr         r3, r3, r2
  00cac	e1a02403	 mov         r2, r3, lsl #8
  00cb0	e5d13000	 ldrb        r3, [r1]
  00cb4	e1833002	 orr         r3, r3, r2
  00cb8	e3530000	 cmp         r3, #0
  00cbc	0a00001f	 beq         |$LN3@GetPos|

; 659  :         {
; 660  :             pmmt->u.ms = (m_dwByteCount * 1000) / m_WaveFormat.nAvgBytesPerSec;

  00cc0	e59d3014	 ldr         r3, [sp, #0x14]
  00cc4	e283304c	 add         r3, r3, #0x4C
  00cc8	e5932000	 ldr         r2, [r3]
  00ccc	e3a03ffa	 mov         r3, #0xFA, 30
  00cd0	e00e0392	 mul         lr, r2, r3
  00cd4	e59d3014	 ldr         r3, [sp, #0x14]
  00cd8	e283102c	 add         r1, r3, #0x2C
  00cdc	e5d13003	 ldrb        r3, [r1, #3]
  00ce0	e1a02403	 mov         r2, r3, lsl #8
  00ce4	e5d13002	 ldrb        r3, [r1, #2]
  00ce8	e1833002	 orr         r3, r3, r2
  00cec	e1a02403	 mov         r2, r3, lsl #8
  00cf0	e5d13001	 ldrb        r3, [r1, #1]
  00cf4	e1833002	 orr         r3, r3, r2
  00cf8	e1a02403	 mov         r2, r3, lsl #8
  00cfc	e5d13000	 ldrb        r3, [r1]
  00d00	e1830002	 orr         r0, r3, r2
  00d04	e1a0100e	 mov         r1, lr
  00d08	eb000000	 bl          __rt_udiv
  00d0c	e59d3018	 ldr         r3, [sp, #0x18]
  00d10	e2831004	 add         r1, r3, #4
  00d14	e1a03000	 mov         r3, r0
  00d18	e5c13000	 strb        r3, [r1]
  00d1c	e1a02423	 mov         r2, r3, lsr #8
  00d20	e1a03002	 mov         r3, r2
  00d24	e5c13001	 strb        r3, [r1, #1]
  00d28	e1a02422	 mov         r2, r2, lsr #8
  00d2c	e1a03002	 mov         r3, r2
  00d30	e5c13002	 strb        r3, [r1, #2]
  00d34	e1a03422	 mov         r3, r2, lsr #8
  00d38	e5c13003	 strb        r3, [r1, #3]

; 661  :             break;

  00d3c	ea000018	 b           |$LN6@GetPos|
  00d40		 |$LN3@GetPos|
  00d40		 |$LN2@GetPos|

; 662  :         }
; 663  :         // If we don't know avg bytes per sec, fall through to TIME_BYTES
; 664  : 
; 665  :     default:
; 666  :         // Anything else, return TIME_BYTES instead.
; 667  :         pmmt->wType = TIME_BYTES;

  00d40	e59d1018	 ldr         r1, [sp, #0x18]
  00d44	e3a03004	 mov         r3, #4
  00d48	e5c13000	 strb        r3, [r1]
  00d4c	e1a02423	 mov         r2, r3, lsr #8
  00d50	e1a03002	 mov         r3, r2
  00d54	e5c13001	 strb        r3, [r1, #1]
  00d58	e1a02422	 mov         r2, r2, lsr #8
  00d5c	e1a03002	 mov         r3, r2
  00d60	e5c13002	 strb        r3, [r1, #2]
  00d64	e1a03422	 mov         r3, r2, lsr #8
  00d68	e5c13003	 strb        r3, [r1, #3]
  00d6c		 |$LN1@GetPos|

; 668  : 
; 669  :         // Fall through to TIME_BYTES
; 670  :     case TIME_BYTES:
; 671  :         pmmt->u.cb = m_dwByteCount;

  00d6c	e59d3014	 ldr         r3, [sp, #0x14]
  00d70	e283204c	 add         r2, r3, #0x4C
  00d74	e59d3018	 ldr         r3, [sp, #0x18]
  00d78	e2831004	 add         r1, r3, #4
  00d7c	e5923000	 ldr         r3, [r2]
  00d80	e5c13000	 strb        r3, [r1]
  00d84	e1a02423	 mov         r2, r3, lsr #8
  00d88	e1a03002	 mov         r3, r2
  00d8c	e5c13001	 strb        r3, [r1, #1]
  00d90	e1a02422	 mov         r2, r2, lsr #8
  00d94	e1a03002	 mov         r3, r2
  00d98	e5c13002	 strb        r3, [r1, #2]
  00d9c	e1a03422	 mov         r3, r2, lsr #8
  00da0	e5c13003	 strb        r3, [r1, #3]
  00da4		 |$LN6@GetPos|

; 672  :     }
; 673  : 
; 674  :     return MMSYSERR_NOERROR;

  00da4	e3a03000	 mov         r3, #0
  00da8	e58d3000	 str         r3, [sp]

; 675  : }

  00dac	e59d0000	 ldr         r0, [sp]
  00db0	e28dd008	 add         sp, sp, #8
  00db4	e89d6010	 ldmia       sp, {r4, sp, lr}
  00db8	e12fff1e	 bx          lr
  00dbc		 |$M37633|

			 ENDP  ; |?GetPos@StreamContext@@UAAKPAUmmtime_tag@@@Z|, StreamContext::GetPos

	EXPORT	|?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| ; WaveStreamContext::Open

  00048			 AREA	 |.pdata|, PDATA
|$T37641| DCD	|$LN15@Open@2|
	DCD	0x40007f04
; Function compile flags: /Odtp

  00dbc			 AREA	 |.text|, CODE, ARM

  00dbc		 |?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z| PROC ; WaveStreamContext::Open

; 686  : {

  00dbc		 |$LN15@Open@2|
  00dbc	e1a0c00d	 mov         r12, sp
  00dc0	e92d000f	 stmdb       sp!, {r0 - r3}
  00dc4	e92d5000	 stmdb       sp!, {r12, lr}
  00dc8	e24dd010	 sub         sp, sp, #0x10
  00dcc		 |$M37638|

; 687  :     HRESULT Result;
; 688  :     Result = StreamContext::Open(pDeviceContext,lpWOD,dwFlags);

  00dcc	e59d3024	 ldr         r3, [sp, #0x24]
  00dd0	e59d2020	 ldr         r2, [sp, #0x20]
  00dd4	e59d101c	 ldr         r1, [sp, #0x1C]
  00dd8	e59d0018	 ldr         r0, [sp, #0x18]
  00ddc	eb000000	 bl          |?Open@StreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|
  00de0	e58d000c	 str         r0, [sp, #0xC]
  00de4	e59d300c	 ldr         r3, [sp, #0xC]
  00de8	e58d3004	 str         r3, [sp, #4]

; 689  :     if (FAILED(Result))

  00dec	e59d3004	 ldr         r3, [sp, #4]
  00df0	e3530000	 cmp         r3, #0
  00df4	aa000002	 bge         |$LN10@Open@2|

; 690  :     {
; 691  :         return Result;

  00df8	e59d3004	 ldr         r3, [sp, #4]
  00dfc	e58d3008	 str         r3, [sp, #8]
  00e00	ea000068	 b           |$LN11@Open@2|
  00e04		 |$LN10@Open@2|

; 692  :     }
; 693  : 
; 694  :     if (m_WaveFormat.wBitsPerSample == 8)

  00e04	e59d3018	 ldr         r3, [sp, #0x18]
  00e08	e2831032	 add         r1, r3, #0x32
  00e0c	e5d13001	 ldrb        r3, [r1, #1]
  00e10	e1a03403	 mov         r3, r3, lsl #8
  00e14	e1a02803	 mov         r2, r3, lsl #16
  00e18	e1a02822	 mov         r2, r2, lsr #16
  00e1c	e5d13000	 ldrb        r3, [r1]
  00e20	e1833002	 orr         r3, r3, r2
  00e24	e3530008	 cmp         r3, #8
  00e28	1a00001b	 bne         |$LN9@Open@2|

; 695  :     {
; 696  :         if (m_WaveFormat.nChannels == 1)

  00e2c	e59d3018	 ldr         r3, [sp, #0x18]
  00e30	e2831026	 add         r1, r3, #0x26
  00e34	e5d13001	 ldrb        r3, [r1, #1]
  00e38	e1a03403	 mov         r3, r3, lsl #8
  00e3c	e1a02803	 mov         r2, r3, lsl #16
  00e40	e1a02822	 mov         r2, r2, lsr #16
  00e44	e5d13000	 ldrb        r3, [r1]
  00e48	e1833002	 orr         r3, r3, r2
  00e4c	e3530001	 cmp         r3, #1
  00e50	1a000008	 bne         |$LN8@Open@2|

; 697  :         {
; 698  :             m_SampleType = PCM_TYPE_M8;

  00e54	e59d3018	 ldr         r3, [sp, #0x18]
  00e58	e2832068	 add         r2, r3, #0x68
  00e5c	e3a03000	 mov         r3, #0
  00e60	e5823000	 str         r3, [r2]

; 699  :             m_SampleSize = 1;

  00e64	e59d3018	 ldr         r3, [sp, #0x18]
  00e68	e283206c	 add         r2, r3, #0x6C
  00e6c	e3a03001	 mov         r3, #1
  00e70	e5823000	 str         r3, [r2]

; 700  :         }
; 701  :         else

  00e74	ea000007	 b           |$LN7@Open@2|
  00e78		 |$LN8@Open@2|

; 702  :         {
; 703  :             m_SampleType = PCM_TYPE_S8;

  00e78	e59d3018	 ldr         r3, [sp, #0x18]
  00e7c	e2832068	 add         r2, r3, #0x68
  00e80	e3a03002	 mov         r3, #2
  00e84	e5823000	 str         r3, [r2]

; 704  :             m_SampleSize = 2;

  00e88	e59d3018	 ldr         r3, [sp, #0x18]
  00e8c	e283206c	 add         r2, r3, #0x6C
  00e90	e3a03002	 mov         r3, #2
  00e94	e5823000	 str         r3, [r2]
  00e98		 |$LN7@Open@2|

; 705  :         }
; 706  :     }
; 707  :     else

  00e98	ea00001a	 b           |$LN6@Open@2|
  00e9c		 |$LN9@Open@2|

; 708  :     {
; 709  :         if (m_WaveFormat.nChannels == 1)

  00e9c	e59d3018	 ldr         r3, [sp, #0x18]
  00ea0	e2831026	 add         r1, r3, #0x26
  00ea4	e5d13001	 ldrb        r3, [r1, #1]
  00ea8	e1a03403	 mov         r3, r3, lsl #8
  00eac	e1a02803	 mov         r2, r3, lsl #16
  00eb0	e1a02822	 mov         r2, r2, lsr #16
  00eb4	e5d13000	 ldrb        r3, [r1]
  00eb8	e1833002	 orr         r3, r3, r2
  00ebc	e3530001	 cmp         r3, #1
  00ec0	1a000008	 bne         |$LN5@Open@2|

; 710  :         {
; 711  :             m_SampleType = PCM_TYPE_M16;

  00ec4	e59d3018	 ldr         r3, [sp, #0x18]
  00ec8	e2832068	 add         r2, r3, #0x68
  00ecc	e3a03001	 mov         r3, #1
  00ed0	e5823000	 str         r3, [r2]

; 712  :             m_SampleSize = 2;

  00ed4	e59d3018	 ldr         r3, [sp, #0x18]
  00ed8	e283206c	 add         r2, r3, #0x6C
  00edc	e3a03002	 mov         r3, #2
  00ee0	e5823000	 str         r3, [r2]

; 713  :         }
; 714  :         else

  00ee4	ea000007	 b           |$LN4@Open@2|
  00ee8		 |$LN5@Open@2|

; 715  :         {
; 716  :             m_SampleType = PCM_TYPE_S16;

  00ee8	e59d3018	 ldr         r3, [sp, #0x18]
  00eec	e2832068	 add         r2, r3, #0x68
  00ef0	e3a03003	 mov         r3, #3
  00ef4	e5823000	 str         r3, [r2]

; 717  :             m_SampleSize = 4;

  00ef8	e59d3018	 ldr         r3, [sp, #0x18]
  00efc	e283206c	 add         r2, r3, #0x6C
  00f00	e3a03004	 mov         r3, #4
  00f04	e5823000	 str         r3, [r2]
  00f08		 |$LN4@Open@2|
  00f08		 |$LN6@Open@2|

; 718  :         }
; 719  :     }
; 720  : 
; 721  :     SetRate(0x10000);

  00f08	e3a01801	 mov         r1, #1, 16
  00f0c	e59d3018	 ldr         r3, [sp, #0x18]
  00f10	e5933000	 ldr         r3, [r3]
  00f14	e2833034	 add         r3, r3, #0x34
  00f18	e59d0018	 ldr         r0, [sp, #0x18]
  00f1c	e5933000	 ldr         r3, [r3]
  00f20	e1a0e00f	 mov         lr, pc
  00f24	e12fff13	 bx          r3

; 722  : 
; 723  :     int i;
; 724  :     for (i=0;i<OUTCHANNELS;i++)

  00f28	e3a03000	 mov         r3, #0
  00f2c	e58d3000	 str         r3, [sp]
  00f30	ea000002	 b           |$LN3@Open@2|
  00f34		 |$LN2@Open@2|
  00f34	e59d3000	 ldr         r3, [sp]
  00f38	e2833001	 add         r3, r3, #1
  00f3c	e58d3000	 str         r3, [sp]
  00f40		 |$LN3@Open@2|
  00f40	e59d3000	 ldr         r3, [sp]
  00f44	e3530002	 cmp         r3, #2
  00f48	aa000010	 bge         |$LN1@Open@2|

; 725  :     {
; 726  :         m_PrevSamp[i] = 0;

  00f4c	e59d3018	 ldr         r3, [sp, #0x18]
  00f50	e2831078	 add         r1, r3, #0x78
  00f54	e59d2000	 ldr         r2, [sp]
  00f58	e3a03004	 mov         r3, #4
  00f5c	e0030392	 mul         r3, r2, r3
  00f60	e0812003	 add         r2, r1, r3
  00f64	e3a03000	 mov         r3, #0
  00f68	e5823000	 str         r3, [r2]

; 727  :         m_CurrSamp[i] = 0;

  00f6c	e59d3018	 ldr         r3, [sp, #0x18]
  00f70	e2831080	 add         r1, r3, #0x80
  00f74	e59d2000	 ldr         r2, [sp]
  00f78	e3a03004	 mov         r3, #4
  00f7c	e0030392	 mul         r3, r2, r3
  00f80	e0812003	 add         r2, r1, r3
  00f84	e3a03000	 mov         r3, #0
  00f88	e5823000	 str         r3, [r2]

; 728  :     }

  00f8c	eaffffe8	 b           |$LN2@Open@2|
  00f90		 |$LN1@Open@2|

; 729  :     m_CurrT    = 0x200;   // Initializing to this ensures we get the 1st sample.

  00f90	e59d3018	 ldr         r3, [sp, #0x18]
  00f94	e2832088	 add         r2, r3, #0x88
  00f98	e3a03c02	 mov         r3, #2, 24
  00f9c	e5823000	 str         r3, [r2]

; 730  : 
; 731  :     return S_OK;

  00fa0	e3a03000	 mov         r3, #0
  00fa4	e58d3008	 str         r3, [sp, #8]
  00fa8		 |$LN11@Open@2|

; 732  : }

  00fa8	e59d0008	 ldr         r0, [sp, #8]
  00fac	e28dd010	 add         sp, sp, #0x10
  00fb0	e89d6000	 ldmia       sp, {sp, lr}
  00fb4	e12fff1e	 bx          lr
  00fb8		 |$M37639|

			 ENDP  ; |?Open@WaveStreamContext@@UAAJPAVDeviceContext@@PAUwaveopendesc_tag@@K@Z|, WaveStreamContext::Open

	EXPORT	|?GetRate@WaveStreamContext@@QAAKPAK@Z|	; WaveStreamContext::GetRate

  00050			 AREA	 |.pdata|, PDATA
|$T37647| DCD	|$LN5@GetRate|
	DCD	0x40000f04
; Function compile flags: /Odtp

  00fb8			 AREA	 |.text|, CODE, ARM

  00fb8		 |?GetRate@WaveStreamContext@@QAAKPAK@Z| PROC ; WaveStreamContext::GetRate

; 742  : {

  00fb8		 |$LN5@GetRate|
  00fb8	e1a0c00d	 mov         r12, sp
  00fbc	e92d0003	 stmdb       sp!, {r0, r1}
  00fc0	e92d5000	 stmdb       sp!, {r12, lr}
  00fc4	e24dd004	 sub         sp, sp, #4
  00fc8		 |$M37644|

; 743  :     *pdwMultiplier = m_dwMultiplier;

  00fc8	e59d300c	 ldr         r3, [sp, #0xC]
  00fcc	e2833074	 add         r3, r3, #0x74
  00fd0	e5932000	 ldr         r2, [r3]
  00fd4	e59d3010	 ldr         r3, [sp, #0x10]
  00fd8	e5832000	 str         r2, [r3]

; 744  :     return MMSYSERR_NOERROR;

  00fdc	e3a03000	 mov         r3, #0
  00fe0	e58d3000	 str         r3, [sp]

; 745  : }

  00fe4	e59d0000	 ldr         r0, [sp]
  00fe8	e28dd004	 add         sp, sp, #4
  00fec	e89d6000	 ldmia       sp, {sp, lr}
  00ff0	e12fff1e	 bx          lr
  00ff4		 |$M37645|

			 ENDP  ; |?GetRate@WaveStreamContext@@QAAKPAK@Z|, WaveStreamContext::GetRate

	EXPORT	|?Run@StreamContext@@UAAKXZ|		; StreamContext::Run

  00058			 AREA	 |.pdata|, PDATA
|$T37653| DCD	|$LN6@Run|
	DCD	0x40001f04
; Function compile flags: /Odtp

  00ff4			 AREA	 |.text|, CODE, ARM

  00ff4		 |?Run@StreamContext@@UAAKXZ| PROC	; StreamContext::Run

; 755  : {

  00ff4		 |$LN6@Run|
  00ff4	e1a0c00d	 mov         r12, sp
  00ff8	e92d0001	 stmdb       sp!, {r0}
  00ffc	e92d5000	 stmdb       sp!, {r12, lr}
  01000	e24dd004	 sub         sp, sp, #4
  01004		 |$M37650|

; 756  :     m_bRunning=TRUE;

  01004	e59d300c	 ldr         r3, [sp, #0xC]
  01008	e2832010	 add         r2, r3, #0x10
  0100c	e3a03001	 mov         r3, #1
  01010	e5823000	 str         r3, [r2]

; 757  :     if (m_lpCurrData)

  01014	e59d300c	 ldr         r3, [sp, #0xC]
  01018	e2833044	 add         r3, r3, #0x44
  0101c	e5933000	 ldr         r3, [r3]
  01020	e3530000	 cmp         r3, #0
  01024	0a00000b	 beq         |$LN1@Run|

; 758  :     {
; 759  :         m_pDeviceContext->StreamReadyToRender(this);

  01028	e59d100c	 ldr         r1, [sp, #0xC]
  0102c	e59d300c	 ldr         r3, [sp, #0xC]
  01030	e2833050	 add         r3, r3, #0x50
  01034	e5932000	 ldr         r2, [r3]
  01038	e59d300c	 ldr         r3, [sp, #0xC]
  0103c	e2833050	 add         r3, r3, #0x50
  01040	e5930000	 ldr         r0, [r3]
  01044	e5923000	 ldr         r3, [r2]
  01048	e283300c	 add         r3, r3, #0xC
  0104c	e5933000	 ldr         r3, [r3]
  01050	e1a0e00f	 mov         lr, pc
  01054	e12fff13	 bx          r3
  01058		 |$LN1@Run|

; 760  :     }
; 761  : 
; 762  :     return MMSYSERR_NOERROR;

  01058	e3a03000	 mov         r3, #0
  0105c	e58d3000	 str         r3, [sp]

; 763  : }

  01060	e59d0000	 ldr         r0, [sp]
  01064	e28dd004	 add         sp, sp, #4
  01068	e89d6000	 ldmia       sp, {sp, lr}
  0106c	e12fff1e	 bx          lr
  01070		 |$M37651|

			 ENDP  ; |?Run@StreamContext@@UAAKXZ|, StreamContext::Run

	EXPORT	|?Stop@StreamContext@@UAAKXZ|		; StreamContext::Stop

  00060			 AREA	 |.pdata|, PDATA
|$T37659| DCD	|$LN5@Stop|
	DCD	0x40000e04
; Function compile flags: /Odtp

  01070			 AREA	 |.text|, CODE, ARM

  01070		 |?Stop@StreamContext@@UAAKXZ| PROC	; StreamContext::Stop

; 772  : {

  01070		 |$LN5@Stop|
  01070	e1a0c00d	 mov         r12, sp
  01074	e92d0001	 stmdb       sp!, {r0}
  01078	e92d5000	 stmdb       sp!, {r12, lr}
  0107c	e24dd004	 sub         sp, sp, #4
  01080		 |$M37656|

; 773  :     m_bRunning=FALSE;

  01080	e59d300c	 ldr         r3, [sp, #0xC]
  01084	e2832010	 add         r2, r3, #0x10
  01088	e3a03000	 mov         r3, #0
  0108c	e5823000	 str         r3, [r2]

; 774  :     return MMSYSERR_NOERROR;

  01090	e3a03000	 mov         r3, #0
  01094	e58d3000	 str         r3, [sp]

; 775  : }

  01098	e59d0000	 ldr         r0, [sp]
  0109c	e28dd004	 add         sp, sp, #4
  010a0	e89d6000	 ldmia       sp, {sp, lr}
  010a4	e12fff1e	 bx          lr
  010a8		 |$M37657|

			 ENDP  ; |?Stop@StreamContext@@UAAKXZ|, StreamContext::Stop

	EXPORT	|?Reset@StreamContext@@UAAKXZ|		; StreamContext::Reset

  00068			 AREA	 |.pdata|, PDATA
|$T37665| DCD	|$LN8@Reset|
	DCD	0x40004504
; Function compile flags: /Odtp

  010a8			 AREA	 |.text|, CODE, ARM

  010a8		 |?Reset@StreamContext@@UAAKXZ| PROC	; StreamContext::Reset

; 784  : {

  010a8		 |$LN8@Reset|
  010a8	e1a0c00d	 mov         r12, sp
  010ac	e92d0001	 stmdb       sp!, {r0}
  010b0	e92d5000	 stmdb       sp!, {r12, lr}
  010b4	e24dd008	 sub         sp, sp, #8
  010b8		 |$M37662|

; 785  :     AddRef();

  010b8	e59d0010	 ldr         r0, [sp, #0x10]
  010bc	eb000000	 bl          |?AddRef@StreamContext@@QAAJXZ|

; 786  : 
; 787  :     // Stop stream for now.
; 788  :     Stop();

  010c0	e59d3010	 ldr         r3, [sp, #0x10]
  010c4	e5933000	 ldr         r3, [r3]
  010c8	e2833014	 add         r3, r3, #0x14
  010cc	e59d0010	 ldr         r0, [sp, #0x10]
  010d0	e5933000	 ldr         r3, [r3]
  010d4	e1a0e00f	 mov         lr, pc
  010d8	e12fff13	 bx          r3

; 789  : 
; 790  :     m_lpWaveHdrCurrent  = NULL;

  010dc	e59d3010	 ldr         r3, [sp, #0x10]
  010e0	e283203c	 add         r2, r3, #0x3C
  010e4	e3a03000	 mov         r3, #0
  010e8	e5823000	 str         r3, [r2]

; 791  :     m_lpCurrData       = NULL;

  010ec	e59d3010	 ldr         r3, [sp, #0x10]
  010f0	e2832044	 add         r2, r3, #0x44
  010f4	e3a03000	 mov         r3, #0
  010f8	e5823000	 str         r3, [r2]

; 792  :     m_lpCurrDataEnd    = NULL;

  010fc	e59d3010	 ldr         r3, [sp, #0x10]
  01100	e2832048	 add         r2, r3, #0x48
  01104	e3a03000	 mov         r3, #0
  01108	e5823000	 str         r3, [r2]

; 793  :     m_dwByteCount      = 0;

  0110c	e59d3010	 ldr         r3, [sp, #0x10]
  01110	e283204c	 add         r2, r3, #0x4C
  01114	e3a03000	 mov         r3, #0
  01118	e5823000	 str         r3, [r2]

; 794  :     m_dwLoopCount      = 0;

  0111c	e59d3010	 ldr         r3, [sp, #0x10]
  01120	e2832054	 add         r2, r3, #0x54
  01124	e3a03000	 mov         r3, #0
  01128	e5823000	 str         r3, [r2]
  0112c		 |$LN3@Reset|

; 795  : 
; 796  :     LPWAVEHDR lpHdr;
; 797  :     while (m_lpWaveHdrHead)

  0112c	e59d3010	 ldr         r3, [sp, #0x10]
  01130	e2833038	 add         r3, r3, #0x38
  01134	e5933000	 ldr         r3, [r3]
  01138	e3530000	 cmp         r3, #0
  0113c	0a000016	 beq         |$LN2@Reset|

; 798  :     {
; 799  :         lpHdr = m_lpWaveHdrHead;

  01140	e59d3010	 ldr         r3, [sp, #0x10]
  01144	e2833038	 add         r3, r3, #0x38
  01148	e5933000	 ldr         r3, [r3]
  0114c	e58d3000	 str         r3, [sp]

; 800  :         m_lpWaveHdrHead = lpHdr->lpNext;

  01150	e59d3000	 ldr         r3, [sp]
  01154	e2831018	 add         r1, r3, #0x18
  01158	e59d3010	 ldr         r3, [sp, #0x10]
  0115c	e2832038	 add         r2, r3, #0x38
  01160	e5913000	 ldr         r3, [r1]
  01164	e5823000	 str         r3, [r2]

; 801  :         if (m_lpWaveHdrHead==NULL)

  01168	e59d3010	 ldr         r3, [sp, #0x10]
  0116c	e2833038	 add         r3, r3, #0x38
  01170	e5933000	 ldr         r3, [r3]
  01174	e3530000	 cmp         r3, #0
  01178	1a000003	 bne         |$LN1@Reset|

; 802  :         {
; 803  :             m_lpWaveHdrTail=NULL;

  0117c	e59d3010	 ldr         r3, [sp, #0x10]
  01180	e2832040	 add         r2, r3, #0x40
  01184	e3a03000	 mov         r3, #0
  01188	e5823000	 str         r3, [r2]
  0118c		 |$LN1@Reset|

; 804  :         }
; 805  :         ReturnBuffer(lpHdr);

  0118c	e59d1000	 ldr         r1, [sp]
  01190	e59d0010	 ldr         r0, [sp, #0x10]
  01194	eb000000	 bl          |?ReturnBuffer@StreamContext@@QAAXPAUwavehdr_tag@@@Z|

; 806  :     }

  01198	eaffffe3	 b           |$LN3@Reset|
  0119c		 |$LN2@Reset|

; 807  : 
; 808  :     Release();

  0119c	e59d0010	 ldr         r0, [sp, #0x10]
  011a0	eb000000	 bl          |?Release@StreamContext@@QAAJXZ|

; 809  : 
; 810  :     return MMSYSERR_NOERROR;

  011a4	e3a03000	 mov         r3, #0
  011a8	e58d3004	 str         r3, [sp, #4]

; 811  : }

  011ac	e59d0004	 ldr         r0, [sp, #4]
  011b0	e28dd008	 add         sp, sp, #8
  011b4	e89d6000	 ldmia       sp, {sp, lr}
  011b8	e12fff1e	 bx          lr
  011bc		 |$M37663|

			 ENDP  ; |?Reset@StreamContext@@UAAKXZ|, StreamContext::Reset

	IMPORT	|?ForceSpeaker@HardwareContext@@QAAKH@Z| ; HardwareContext::ForceSpeaker

  00070			 AREA	 |.pdata|, PDATA
|$T37673| DCD	|$LN8@ForceSpeak|
	DCD	0x40002704
; Function compile flags: /Odtp

  011bc			 AREA	 |.text|, CODE, ARM

  011bc		 |?ForceSpeaker@StreamContext@@QAAKH@Z| PROC ; StreamContext::ForceSpeaker

; 820  : {

  011bc		 |$LN8@ForceSpeak|
  011bc	e1a0c00d	 mov         r12, sp
  011c0	e92d0003	 stmdb       sp!, {r0, r1}
  011c4	e92d5000	 stmdb       sp!, {r12, lr}
  011c8	e24dd00c	 sub         sp, sp, #0xC
  011cc		 |$M37670|

; 821  :     // Normalize to 0 or 1
; 822  :     bForceSpeaker = (bForceSpeaker!=0);

  011cc	e59d3018	 ldr         r3, [sp, #0x18]
  011d0	e3530000	 cmp         r3, #0
  011d4	0a000002	 beq         |$LN4@ForceSpeak|
  011d8	e3a03001	 mov         r3, #1
  011dc	e58d3004	 str         r3, [sp, #4]
  011e0	ea000001	 b           |$LN5@ForceSpeak|
  011e4		 |$LN4@ForceSpeak|
  011e4	e3a03000	 mov         r3, #0
  011e8	e58d3004	 str         r3, [sp, #4]
  011ec		 |$LN5@ForceSpeak|
  011ec	e59d3004	 ldr         r3, [sp, #4]
  011f0	e58d3018	 str         r3, [sp, #0x18]

; 823  :     if (bForceSpeaker==m_bForceSpeaker)

  011f4	e59d3014	 ldr         r3, [sp, #0x14]
  011f8	e2833064	 add         r3, r3, #0x64
  011fc	e59d2018	 ldr         r2, [sp, #0x18]
  01200	e5933000	 ldr         r3, [r3]
  01204	e1520003	 cmp         r2, r3
  01208	1a000002	 bne         |$LN1@ForceSpeak|

; 824  :     {
; 825  :         return MMSYSERR_NOERROR;

  0120c	e3a03000	 mov         r3, #0
  01210	e58d3000	 str         r3, [sp]
  01214	ea00000a	 b           |$LN2@ForceSpeak|
  01218		 |$LN1@ForceSpeak|

; 826  :     }
; 827  :     m_bForceSpeaker = bForceSpeaker;

  01218	e59d3014	 ldr         r3, [sp, #0x14]
  0121c	e2832064	 add         r2, r3, #0x64
  01220	e59d3018	 ldr         r3, [sp, #0x18]
  01224	e5823000	 str         r3, [r2]

; 828  :     return g_pHWContext->ForceSpeaker(bForceSpeaker);

  01228	e59d1018	 ldr         r1, [sp, #0x18]
  0122c	e59f3020	 ldr         r3, [pc, #0x20]
  01230	e5930000	 ldr         r0, [r3]
  01234	eb000000	 bl          |?ForceSpeaker@HardwareContext@@QAAKH@Z|
  01238	e58d0008	 str         r0, [sp, #8]
  0123c	e59d3008	 ldr         r3, [sp, #8]
  01240	e58d3000	 str         r3, [sp]
  01244		 |$LN2@ForceSpeak|

; 829  : }

  01244	e59d0000	 ldr         r0, [sp]
  01248	e28dd00c	 add         sp, sp, #0xC
  0124c	e89d6000	 ldmia       sp, {sp, lr}
  01250	e12fff1e	 bx          lr
  01254		 |$LN9@ForceSpeak|
  01254		 |$LN10@ForceSpeak|
  01254	00000000	 DCD         |?g_pHWContext@@3PAVHardwareContext@@A|
  01258		 |$M37671|

			 ENDP  ; |?ForceSpeaker@StreamContext@@QAAKH@Z|, StreamContext::ForceSpeaker

	END
