; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\SDHC\IMPL\menelaus.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DEVICE_IFC_I2C_GUID| [ DATA ]
	EXPORT	|I2COpen|
	IMPORT	|LocalFree|
	IMPORT	|DeviceIoControl|
	IMPORT	|CloseHandle|
	IMPORT	|LocalAlloc|
	IMPORT	|CreateFileW|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\inc\i2c.h

  00000			 AREA	 |.pdata|, PDATA
|$T36572| DCD	|$LN11@I2COpen|
	DCD	0x40002e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2COpen| PROC

; 86   : {

  00000		 |$LN11@I2COpen|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M36569|

; 87   :     HANDLE hDevice;
; 88   :     DEVICE_CONTEXT_I2C *pContext = NULL;
; 89   : 
; 90   :     hDevice = CreateFile(devicename, 0, 0, NULL, 0, 0, NULL);

  00008	e3a06000	 mov         r6, #0
  0000c	e3a03000	 mov         r3, #0
  00010	e3a02000	 mov         r2, #0
  00014	e3a01000	 mov         r1, #0
  00018	e58d6008	 str         r6, [sp, #8]
  0001c	e58d6004	 str         r6, [sp, #4]
  00020	e58d6000	 str         r6, [sp]
  00024	e3a04000	 mov         r4, #0
  00028	eb000000	 bl          CreateFileW
  0002c	e1a05000	 mov         r5, r0

; 91   :     if (hDevice == INVALID_HANDLE_VALUE) goto clean;

  00030	e3750001	 cmn         r5, #1
  00034	0a00001a	 beq         |$clean$33302|

; 92   : 
; 93   :     // Allocate memory for our handler...
; 94   :     if ((pContext = (DEVICE_CONTEXT_I2C *)LocalAlloc(
; 95   :         LPTR, sizeof(DEVICE_CONTEXT_I2C)
; 96   :     )) == NULL) {

  00038	e3a01010	 mov         r1, #0x10
  0003c	e3a00040	 mov         r0, #0x40
  00040	eb000000	 bl          LocalAlloc
  00044	e1b04000	 movs        r4, r0

; 97   :         CloseHandle(hDevice);

  00048	e1a00005	 mov         r0, r5
  0004c	1a000001	 bne         |$LN4@I2COpen|
  00050	eb000000	 bl          CloseHandle

; 115  : 
; 116  : clean:

  00054	ea000012	 b           |$clean$33302|
  00058		 |$LN4@I2COpen|

; 98   :         goto clean;
; 99   :     }
; 100  : 
; 101  :     // Get function pointers, fail when IOCTL isn't supported...
; 102  :     if (!DeviceIoControl(
; 103  :         hDevice, IOCTL_DDK_GET_DRIVER_IFC, (VOID*)&DEVICE_IFC_I2C_GUID,
; 104  :         sizeof(DEVICE_IFC_I2C_GUID), &pContext->ifc, sizeof(DEVICE_IFC_I2C),
; 105  :         NULL, NULL
; 106  :     )) {

  00058	e59f2054	 ldr         r2, [pc, #0x54]
  0005c	e3a03822	 mov         r3, #0x22, 16
  00060	e3831b01	 orr         r1, r3, #1, 22
  00064	e3a0e00c	 mov         lr, #0xC
  00068	e3a03010	 mov         r3, #0x10
  0006c	e58d600c	 str         r6, [sp, #0xC]
  00070	e58d6008	 str         r6, [sp, #8]
  00074	e58de004	 str         lr, [sp, #4]
  00078	e58d4000	 str         r4, [sp]
  0007c	eb000000	 bl          DeviceIoControl
  00080	e3500000	 cmp         r0, #0
  00084	1a000005	 bne         |$LN2@I2COpen|

; 107  :         CloseHandle(hDevice);

  00088	e1a00005	 mov         r0, r5
  0008c	eb000000	 bl          CloseHandle

; 108  :         LocalFree(pContext);

  00090	e1a00004	 mov         r0, r4
  00094	eb000000	 bl          LocalFree

; 109  :         pContext = NULL;

  00098	e3a04000	 mov         r4, #0

; 115  : 
; 116  : clean:

  0009c	ea000000	 b           |$clean$33302|
  000a0		 |$LN2@I2COpen|

; 110  :         goto clean;
; 111  :     }
; 112  : 
; 113  :     // Save device handle
; 114  :     pContext->hDevice = hDevice;

  000a0	e584500c	 str         r5, [r4, #0xC]
  000a4		 |$clean$33302|

; 117  :     return pContext;
; 118  : }

  000a4	e1a00004	 mov         r0, r4
  000a8	e28dd010	 add         sp, sp, #0x10
  000ac	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN12@I2COpen|
  000b4		 |$LN13@I2COpen|
  000b4	00000000	 DCD         |DEVICE_IFC_I2C_GUID|
  000b8		 |$M36570|

			 ENDP  ; |I2COpen|

	EXPORT	|I2CClose|

  00000			 AREA	 |.pdata|, PDATA
|$T36582| DCD	|$LN7@I2CClose|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CClose| PROC

; 121  : {

  00000		 |$LN7@I2CClose|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36579|
  00004	e1b04000	 movs        r4, r0

; 122  :     DEVICE_CONTEXT_I2C *pContext = (DEVICE_CONTEXT_I2C *)hContext;
; 123  : 
; 124  :     if ( (pContext != NULL) && (pContext->hDevice != INVALID_HANDLE_VALUE) )

  00008	0a000004	 beq         |$LN1@I2CClose|
  0000c	e594000c	 ldr         r0, [r4, #0xC]
  00010	e3700001	 cmn         r0, #1

; 125  :         CloseHandle(pContext->hDevice);

  00014	1b000000	 blne        CloseHandle

; 126  : 
; 127  :     if (pContext != NULL)
; 128  :         LocalFree(pContext);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          LocalFree
  00020		 |$LN1@I2CClose|

; 129  : }

  00020	e8bd4010	 ldmia       sp!, {r4, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M36580|

			 ENDP  ; |I2CClose|

	EXPORT	|I2CSetSlaveAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T36594| DCD	|$LN5@I2CSetSlav|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CSetSlaveAddress| PROC

; 132  : {

  00000		 |$LN5@I2CSetSlav|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36591|
  00004	e1a03000	 mov         r3, r0

; 133  :     DEVICE_CONTEXT_I2C *pContext = (DEVICE_CONTEXT_I2C *)hContext;
; 134  :     return pContext->ifc.pfnSetSlaveAddress(pContext->ifc.context, size, address);

  00008	e5930000	 ldr         r0, [r3]
  0000c	e5933004	 ldr         r3, [r3, #4]
  00010	e1a0e00f	 mov         lr, pc
  00014	e12fff13	 bx          r3

; 135  : }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$M36592|

			 ENDP  ; |I2CSetSlaveAddress|

	EXPORT	|I2CTransact|

  00000			 AREA	 |.pdata|, PDATA
|$T36605| DCD	|$LN5@I2CTransac|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CTransact| PROC

; 138  : {

  00000		 |$LN5@I2CTransac|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36602|
  00004	e1a03000	 mov         r3, r0

; 139  :     DEVICE_CONTEXT_I2C *pContext = (DEVICE_CONTEXT_I2C *)hContext;
; 140  :     return pContext->ifc.pfnTransact(pContext->ifc.context, pTrans);

  00008	e5930000	 ldr         r0, [r3]
  0000c	e5933008	 ldr         r3, [r3, #8]
  00010	e1a0e00f	 mov         lr, pc
  00014	e12fff13	 bx          r3

; 141  : }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$M36603|

			 ENDP  ; |I2CTransact|

	EXPORT	|??0CMenelaus@@QAA@PBGKK@Z|		; CMenelaus::CMenelaus
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\sdhc\impl\menelaus.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T36618| DCD	|$LN5@CMenelaus|
	DCD	0x40000801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0CMenelaus@@QAA@PBGKK@Z| PROC	; CMenelaus::CMenelaus

; 67   : {

  00000		 |$LN5@CMenelaus|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36615|
  00004	e3a0e000	 mov         lr, #0
  00008	e580e000	 str         lr, [r0]
  0000c	e580e014	 str         lr, [r0, #0x14]
  00010	e280c004	 add         r12, r0, #4
  00014	e88c400e	 stmia       r12, {r1 - r3, lr}

; 68   :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"ctor CMenelaus(%s, 0x%08x, 0x%08x)\r\n", 
; 69   :         m_lpsI2CDeviceName, 
; 70   :         m_dwI2CMenelausAddress, 
; 71   :         m_dwI2CMenelausAddrSize));
; 72   : 
; 73   : }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$M36616|

			 ENDP  ; |??0CMenelaus@@QAA@PBGKK@Z|, CMenelaus::CMenelaus

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?ReadData@CMenelaus@@AAAHEPAE@Z|	; CMenelaus::ReadData
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|memset|
	IMPORT	|__security_check_cookie|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\inc\i2c.h

  00000			 AREA	 |.pdata|, PDATA
|$T36646| DCD	|$LN8@ReadData|
	DCD	0xc0003102

  00000			 AREA	 |.xdata|, DATA
|$T36642| DCD	0xffffffe4
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\sdhc\impl\menelaus.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T36642|

  00008		 |?ReadData@CMenelaus@@AAAHEPAE@Z| PROC	; CMenelaus::ReadData

; 498  : {

  00008		 |$LN8@ReadData|
  00008	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  0000c	e24ddf5d	 sub         sp, sp, #0x5D, 30
  00010		 |$M36643|
  00010	e1a06002	 mov         r6, r2
  00014	e1a05001	 mov         r5, r1
  00018	e1a04000	 mov         r4, r0
  0001c	e59f30a4	 ldr         r3, [pc, #0xA4]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3170	 str         r3, [sp, #0x170]

; 499  :     I2CTRANS trans;
; 500  :     ZeroMemory(&trans,sizeof(trans));

  00028	e3a02e17	 mov         r2, #0x17, 28
  0002c	e3a01000	 mov         r1, #0
  00030	e28d0000	 add         r0, sp, #0
  00034	eb000000	 bl          memset

; 501  :     trans.mClk_HL_Divisor = I2C_CLOCK_DEFAULT;
; 502  :     trans.mOpCode[0] = I2C_OPCODE_WRITE;
; 503  :     trans.mBufferOffset[0] = 0;
; 504  :     trans.mBuffer[0] = reg;
; 505  :     trans.mTransLen[0] = 1;
; 506  :     trans.mOpCode[1] = I2C_OPCODE_READ;
; 507  :     trans.mBufferOffset[1] = 1;
; 508  :     trans.mTransLen[1] = 1;
; 509  :     
; 510  :     I2CTransact(m_hI2C, &trans);

  00038	e5943000	 ldr         r3, [r4]
  0003c	e3a0e001	 mov         lr, #1
  00040	e3a04001	 mov         r4, #1
  00044	e3a0200f	 mov         r2, #0xF
  00048	e3a01002	 mov         r1, #2
  0004c	e3a00000	 mov         r0, #0
  00050	e3a07001	 mov         r7, #1
  00054	e3a08001	 mov         r8, #1
  00058	e58de04c	 str         lr, [sp, #0x4C]
  0005c	e58d4010	 str         r4, [sp, #0x10]
  00060	e58d2008	 str         r2, [sp, #8]
  00064	e58d100c	 str         r1, [sp, #0xC]
  00068	e58d002c	 str         r0, [sp, #0x2C]
  0006c	e5cd5070	 strb        r5, [sp, #0x70]
  00070	e58d7030	 str         r7, [sp, #0x30]
  00074	e58d8050	 str         r8, [sp, #0x50]
  00078	e5930000	 ldr         r0, [r3]
  0007c	e5933008	 ldr         r3, [r3, #8]
  00080	e28d1000	 add         r1, sp, #0
  00084	e1a0e00f	 mov         lr, pc
  00088	e12fff13	 bx          r3

; 511  : 
; 512  :     if (trans.mErrorCode)

  0008c	e59d306c	 ldr         r3, [sp, #0x6C]
  00090	e3530000	 cmp         r3, #0
  00094	0a000003	 beq         |$LN1@ReadData|

; 513  :     {
; 514  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"CMenelaus::ReadData: "
; 515  :             L"Failed with error code 0x%08X\r\n",trans.mErrorCode
; 516  :         ));
; 517  :         return FALSE;

  00098	e59d0170	 ldr         r0, [sp, #0x170]
  0009c	eb000000	 bl          __security_check_cookie
  000a0	e3a00000	 mov         r0, #0
  000a4	ea000004	 b           |$LN2@ReadData|
  000a8		 |$LN1@ReadData|

; 518  :     }
; 519  : 
; 520  :     *pData = trans.mBuffer[1];

  000a8	e5dd3071	 ldrb        r3, [sp, #0x71]
  000ac	e5c63000	 strb        r3, [r6]

; 521  :     return TRUE;

  000b0	e59d0170	 ldr         r0, [sp, #0x170]
  000b4	eb000000	 bl          __security_check_cookie
  000b8	e3a00001	 mov         r0, #1
  000bc		 |$LN2@ReadData|

; 522  : }

  000bc	e28ddf5d	 add         sp, sp, #0x5D, 30
  000c0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$LN9@ReadData|
  000c8		 |$LN10@ReadData|
  000c8	00000000	 DCD         |__security_cookie|
  000cc		 |$M36644|

			 ENDP  ; |?ReadData@CMenelaus@@AAAHEPAE@Z|, CMenelaus::ReadData

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?WriteData@CMenelaus@@AAAHEE@Z|	; CMenelaus::WriteData
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\inc\i2c.h

  00000			 AREA	 |.pdata|, PDATA
|$T36671| DCD	|$LN8@WriteData|
	DCD	0xc0002902

  00000			 AREA	 |.xdata|, DATA
|$T36667| DCD	0xffffffec
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\sdhc\impl\menelaus.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T36667|

  00008		 |?WriteData@CMenelaus@@AAAHEE@Z| PROC	; CMenelaus::WriteData

; 531  : {

  00008		 |$LN8@WriteData|
  00008	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  0000c	e24ddf5d	 sub         sp, sp, #0x5D, 30
  00010		 |$M36668|
  00010	e1a06002	 mov         r6, r2
  00014	e1a05001	 mov         r5, r1
  00018	e1a04000	 mov         r4, r0
  0001c	e59f3084	 ldr         r3, [pc, #0x84]
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3170	 str         r3, [sp, #0x170]

; 532  :     I2CTRANS trans;
; 533  :     ZeroMemory(&trans,sizeof(trans));

  00028	e3a02e17	 mov         r2, #0x17, 28
  0002c	e3a01000	 mov         r1, #0
  00030	e28d0000	 add         r0, sp, #0
  00034	eb000000	 bl          memset

; 534  :     trans.mClk_HL_Divisor = I2C_CLOCK_DEFAULT;
; 535  :     trans.mOpCode[0] = I2C_OPCODE_WRITE;
; 536  :     trans.mBufferOffset[0] = 0;
; 537  :     trans.mBuffer[0] = reg;
; 538  :     trans.mBuffer[1] = data;
; 539  :     trans.mTransLen[0] = 2;
; 540  :     
; 541  :     I2CTransact(m_hI2C, &trans);

  00038	e5943000	 ldr         r3, [r4]
  0003c	e3a0e002	 mov         lr, #2
  00040	e3a0200f	 mov         r2, #0xF
  00044	e3a01002	 mov         r1, #2
  00048	e3a00000	 mov         r0, #0
  0004c	e58de04c	 str         lr, [sp, #0x4C]
  00050	e58d2008	 str         r2, [sp, #8]
  00054	e58d100c	 str         r1, [sp, #0xC]
  00058	e58d002c	 str         r0, [sp, #0x2C]
  0005c	e5cd5070	 strb        r5, [sp, #0x70]
  00060	e5cd6071	 strb        r6, [sp, #0x71]
  00064	e5930000	 ldr         r0, [r3]
  00068	e5933008	 ldr         r3, [r3, #8]
  0006c	e28d1000	 add         r1, sp, #0
  00070	e1a0e00f	 mov         lr, pc
  00074	e12fff13	 bx          r3

; 542  : 
; 543  :     if (trans.mErrorCode)

  00078	e59d306c	 ldr         r3, [sp, #0x6C]
  0007c	e3530000	 cmp         r3, #0

; 544  :     {
; 545  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"CMenelaus::WriteData: "
; 546  :             L"Failed with error code 0x%08X\r\n",trans.mErrorCode
; 547  :         ));
; 548  :         return FALSE;

  00080	e59d0170	 ldr         r0, [sp, #0x170]
  00084	0a000002	 beq         |$LN1@WriteData|
  00088	eb000000	 bl          __security_check_cookie
  0008c	e3a00000	 mov         r0, #0
  00090	ea000001	 b           |$LN2@WriteData|
  00094		 |$LN1@WriteData|

; 549  :     }
; 550  :     return TRUE;

  00094	eb000000	 bl          __security_check_cookie
  00098	e3a00001	 mov         r0, #1
  0009c		 |$LN2@WriteData|

; 551  : }

  0009c	e28ddf5d	 add         sp, sp, #0x5D, 30
  000a0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN9@WriteData|
  000a8		 |$LN10@WriteData|
  000a8	00000000	 DCD         |__security_cookie|
  000ac		 |$M36669|

			 ENDP  ; |?WriteData@CMenelaus@@AAAHEE@Z|, CMenelaus::WriteData

	EXPORT	|?MaskMenelausIrq@CMenelaus@@AAAHI@Z|	; CMenelaus::MaskMenelausIrq

  00000			 AREA	 |.pdata|, PDATA
|$T36691| DCD	|$LN13@MaskMenela|
	DCD	0x40002702
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MaskMenelausIrq@CMenelaus@@AAAHI@Z| PROC ; CMenelaus::MaskMenelausIrq

; 558  : {

  00000		 |$LN13@MaskMenela|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36688|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 559  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::MaskMenelausIrq (%d)\r\n", irq));
; 560  : 
; 561  :     BOOL rc = FALSE;
; 562  :     UCHAR reg;
; 563  :     UCHAR mask;
; 564  : 
; 565  :     // get the current mask in the Menelaus; first determin which register.
; 566  :     if ((irq - IRQ_MENELAUS_CD1) < 8)

  00010	e2443064	 sub         r3, r4, #0x64
  00014	e3530008	 cmp         r3, #8
  00018	e3a00000	 mov         r0, #0
  0001c	2a00000b	 bcs         |$LN5@MaskMenela|

; 567  :     {
; 568  :         reg = MENELAUS_INTMASK1_OFFSET;
; 569  :                 
; 570  :         rc = ReadData(reg, &mask);

  00020	e28d2000	 add         r2, sp, #0
  00024	e3a01017	 mov         r1, #0x17
  00028	e1a00005	 mov         r0, r5
  0002c	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|

; 571  : 
; 572  :         if (rc)
; 573  :             mask |= 1 << (irq - IRQ_MENELAUS_CD1); 

  00030	e5dd2000	 ldrb        r2, [sp]
  00034	e3500000	 cmp         r0, #0
  00038	12443064	 subne       r3, r4, #0x64
  0003c	13a01001	 movne       r1, #1
  00040	11823311	 orrne       r3, r2, r1, lsl r3

; 574  : 
; 575  :         rc =  WriteData(reg, mask);  // Apply Mask

  00044	e3a01017	 mov         r1, #0x17
  00048	120320ff	 andne       r2, r3, #0xFF
  0004c	ea00000d	 b           |$LN10@MaskMenela|
  00050		 |$LN5@MaskMenela|

; 576  :     }
; 577  :     else if ((irq - IRQ_MENELAUS_RTCTMR) < 5)

  00050	e244306c	 sub         r3, r4, #0x6C
  00054	e3530005	 cmp         r3, #5
  00058	2a00000c	 bcs         |$LN2@MaskMenela|

; 578  :     {
; 579  :         reg = MENELAUS_INTMASK2_OFFSET;
; 580  : 
; 581  :         rc = ReadData(reg, &mask);

  0005c	e28d2000	 add         r2, sp, #0
  00060	e3a01018	 mov         r1, #0x18
  00064	e1a00005	 mov         r0, r5
  00068	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|

; 582  : 
; 583  :         if (rc)
; 584  :             mask |= 1 << (irq - IRQ_MENELAUS_RTCTMR); 

  0006c	e5dd2000	 ldrb        r2, [sp]
  00070	e3500000	 cmp         r0, #0
  00074	1244306c	 subne       r3, r4, #0x6C
  00078	13a01001	 movne       r1, #1
  0007c	11823311	 orrne       r3, r2, r1, lsl r3

; 585  : 
; 586  :         rc =  WriteData(reg, mask);  // Apply Mask

  00080	e3a01018	 mov         r1, #0x18
  00084	120320ff	 andne       r2, r3, #0xFF
  00088		 |$LN10@MaskMenela|
  00088	e1a00005	 mov         r0, r5
  0008c	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00090		 |$LN2@MaskMenela|

; 587  :     }
; 588  : 
; 589  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"-CMenelaus::MaskMenelausIrq\r\n"));
; 590  :     return rc;
; 591  : }

  00090	e28dd004	 add         sp, sp, #4
  00094	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M36689|

			 ENDP  ; |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|, CMenelaus::MaskMenelausIrq

	EXPORT	|?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|	; CMenelaus::UnMaskMenelausIrq

  00000			 AREA	 |.pdata|, PDATA
|$T36710| DCD	|$LN13@UnMaskMene|
	DCD	0x40002902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z| PROC ; CMenelaus::UnMaskMenelausIrq

; 598  : {

  00000		 |$LN13@UnMaskMene|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36707|
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 599  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::UnMaskMenelausIrq (%d)\r\n", irq));
; 600  : 
; 601  :     BOOL rc = FALSE;
; 602  :     UCHAR reg;
; 603  :     UCHAR mask;
; 604  :     
; 605  :     // get the current mask in the Menelaus; first determin which register.
; 606  :     if ((irq - IRQ_MENELAUS_CD1) < 5)

  00010	e2443064	 sub         r3, r4, #0x64
  00014	e3530005	 cmp         r3, #5
  00018	e3a00000	 mov         r0, #0
  0001c	2a00000d	 bcs         |$LN5@UnMaskMene|

; 607  :     {
; 608  :         reg = MENELAUS_INTMASK1_OFFSET;
; 609  :                 
; 610  :         rc = ReadData(reg, &mask);

  00020	e28d2000	 add         r2, sp, #0
  00024	e3a01017	 mov         r1, #0x17
  00028	e1a00005	 mov         r0, r5
  0002c	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|
  00030	e3500000	 cmp         r0, #0

; 611  : 
; 612  :         if (rc)
; 613  :             mask &= ~(1 << (irq - IRQ_MENELAUS_CD1)); 

  00034	15dd3000	 ldrneb      r3, [sp]
  00038	12442064	 subne       r2, r4, #0x64
  0003c	13a01001	 movne       r1, #1
  00040	11c32211	 bicne       r2, r3, r1, lsl r2

; 614  : 
; 615  :         rc =  WriteData(reg, mask);  // Apply Mask

  00044	13a01017	 movne       r1, #0x17
  00048	1a000010	 bne         |$LN10@UnMaskMene|
  0004c	e5dd2000	 ldrb        r2, [sp]
  00050	e3a01017	 mov         r1, #0x17
  00054	ea00000d	 b           |$LN10@UnMaskMene|
  00058		 |$LN5@UnMaskMene|

; 616  :     }
; 617  :     else if ((irq - IRQ_MENELAUS_RTCTMR) < 5)

  00058	e244306c	 sub         r3, r4, #0x6C
  0005c	e3530005	 cmp         r3, #5
  00060	2a00000c	 bcs         |$LN2@UnMaskMene|

; 618  :     {
; 619  :         reg = MENELAUS_INTMASK2_OFFSET;
; 620  : 
; 621  :         rc = ReadData(reg, &mask);

  00064	e28d2000	 add         r2, sp, #0
  00068	e3a01018	 mov         r1, #0x18
  0006c	e1a00005	 mov         r0, r5
  00070	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|
  00074	e3500000	 cmp         r0, #0

; 622  : 
; 623  :         if (rc)
; 624  :             mask &= ~(1 << (irq - IRQ_MENELAUS_RTCTMR)); 

  00078	15dd3000	 ldrneb      r3, [sp]
  0007c	1244206c	 subne       r2, r4, #0x6C
  00080	13a01001	 movne       r1, #1
  00084	11c32211	 bicne       r2, r3, r1, lsl r2
  00088	05dd2000	 ldreqb      r2, [sp]

; 625  : 
; 626  :         rc =  WriteData(reg, mask);  // Apply Mask

  0008c	e3a01018	 mov         r1, #0x18
  00090		 |$LN10@UnMaskMene|
  00090	e1a00005	 mov         r0, r5
  00094	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00098		 |$LN2@UnMaskMene|

; 627  :     }
; 628  :     
; 629  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::UnMaskMenelausIrq\r\n"));
; 630  :     return rc;
; 631  : }

  00098	e28dd004	 add         sp, sp, #4
  0009c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$M36708|

			 ENDP  ; |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|, CMenelaus::UnMaskMenelausIrq

	EXPORT	|?ClearMenelausIrq@CMenelaus@@AAAHI@Z|	; CMenelaus::ClearMenelausIrq

  00000			 AREA	 |.pdata|, PDATA
|$T36723| DCD	|$LN9@ClearMenel|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ClearMenelausIrq@CMenelaus@@AAAHI@Z| PROC ; CMenelaus::ClearMenelausIrq

; 638  : {

  00000		 |$LN9@ClearMenel|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36720|
  00004	e1a0e000	 mov         lr, r0

; 639  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::ClearMenelausIrq (%d)\r\n", irq));
; 640  :     BOOL rc = FALSE;
; 641  : 
; 642  :     if ((irq - IRQ_MENELAUS_CD1) < 8)

  00008	e2413064	 sub         r3, r1, #0x64
  0000c	e3530008	 cmp         r3, #8

; 643  :     {
; 644  :         rc = WriteData(MENELAUS_INTACK1_OFFSET, (1 << (irq - IRQ_MENELAUS_CD1)));

  00010	32413064	 subcc       r3, r1, #0x64
  00014	33a0101b	 movcc       r1, #0x1B
  00018	e3a00000	 mov         r0, #0
  0001c	3a000004	 bcc         |$LN6@ClearMenel|

; 645  :     }
; 646  :     else if ((irq - IRQ_MENELAUS_RTCTMR) < 5)

  00020	e241306c	 sub         r3, r1, #0x6C
  00024	e3530005	 cmp         r3, #5
  00028	2a000006	 bcs         |$LN1@ClearMenel|

; 647  :     {
; 648  :         rc = WriteData(MENELAUS_INTACK2_OFFSET, (1 << (irq - IRQ_MENELAUS_RTCTMR)));

  0002c	e241306c	 sub         r3, r1, #0x6C
  00030	e3a0101c	 mov         r1, #0x1C
  00034		 |$LN6@ClearMenel|
  00034	e3a02001	 mov         r2, #1
  00038	e1a03312	 mov         r3, r2, lsl r3
  0003c	e1a0000e	 mov         r0, lr
  00040	e20320ff	 and         r2, r3, #0xFF
  00044	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00048		 |$LN1@ClearMenel|

; 649  :     }
; 650  :         
; 651  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"-CMenelaus::ClearMenelausIrq\r\n"));
; 652  :     return rc;
; 653  : }

  00048	e49de004	 ldr         lr, [sp], #4
  0004c	e12fff1e	 bx          lr
  00050		 |$M36721|

			 ENDP  ; |?ClearMenelausIrq@CMenelaus@@AAAHI@Z|, CMenelaus::ClearMenelausIrq

	EXPORT	|?MenelausDeinit@CMenelaus@@QAAHXZ|	; CMenelaus::MenelausDeinit
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\inc\i2c.h

  00000			 AREA	 |.pdata|, PDATA
|$T36769| DCD	|$LN30@MenelausDe|
	DCD	0x40003c01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\sdhc\impl\menelaus.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MenelausDeinit@CMenelaus@@QAAHXZ| PROC ; CMenelaus::MenelausDeinit

; 273  : {

  00000		 |$LN30@MenelausDe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M36766|
  00004	e1a04000	 mov         r4, r0

; 274  :     if (m_hI2C != NULL)

  00008	e5943000	 ldr         r3, [r4]
  0000c	e3530000	 cmp         r3, #0
  00010	0a000033	 beq         |$LN1@MenelausDe|

; 275  :     {
; 276  :         DEBUGMSG(SDCARD_ZONE_FUNC, (L"CMenelaus::MenelausDeinit: "
; 277  :             L"De-Initialize Hardware & Interrupts\r\n"
; 278  :         ));
; 279  : 
; 280  :         // turn off power to slots
; 281  :         WriteData(MENELAUS_DCDCCTRL3_OFFSET, (DCDC3_MODE_OFF));

  00014	e3a02000	 mov         r2, #0
  00018	e3a01009	 mov         r1, #9
  0001c	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|

; 282  :         WriteData(MENELAUS_LD0CTRL7_OFFSET, (VMMC_MODE_OFF));

  00020	e3a02000	 mov         r2, #0
  00024	e3a01010	 mov         r1, #0x10
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|

; 283  :         
; 284  :         // MCT Control Reg 3
; 285  :         // disable slots 1 & 2
; 286  :         WriteData(MENELAUS_MCTCTRL3_OFFSET, 0x00);

  00030	e3a02000	 mov         r2, #0
  00034	e3a01038	 mov         r1, #0x38
  00038	e1a00004	 mov         r0, r4
  0003c	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|

; 287  : 
; 288  :         // Clear & Mask MTC Menelaus Interrupts
; 289  :         ClearMenelausIrq(IRQ_MENELAUS_CD1);

  00040	e3a02001	 mov         r2, #1
  00044	e3a0101b	 mov         r1, #0x1B
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|

; 290  :         MaskMenelausIrq(IRQ_MENELAUS_CD1);

  00050	e3a01064	 mov         r1, #0x64
  00054	e1a00004	 mov         r0, r4
  00058	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|

; 291  :         ClearMenelausIrq(IRQ_MENELAUS_CD2);

  0005c	e3a02002	 mov         r2, #2
  00060	e3a0101b	 mov         r1, #0x1B
  00064	e1a00004	 mov         r0, r4
  00068	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|

; 292  :         MaskMenelausIrq(IRQ_MENELAUS_CD2);

  0006c	e3a01065	 mov         r1, #0x65
  00070	e1a00004	 mov         r0, r4
  00074	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|

; 293  :         ClearMenelausIrq(IRQ_MENELAUS_DL1);

  00078	e3a02004	 mov         r2, #4
  0007c	e3a0101b	 mov         r1, #0x1B
  00080	e1a00004	 mov         r0, r4
  00084	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|

; 294  :         MaskMenelausIrq(IRQ_MENELAUS_DL1);

  00088	e3a01066	 mov         r1, #0x66
  0008c	e1a00004	 mov         r0, r4
  00090	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|

; 295  :         ClearMenelausIrq(IRQ_MENELAUS_DL2);

  00094	e3a02008	 mov         r2, #8
  00098	e3a0101b	 mov         r1, #0x1B
  0009c	e1a00004	 mov         r0, r4
  000a0	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|

; 296  :         MaskMenelausIrq(IRQ_MENELAUS_DL2);

  000a4	e3a01067	 mov         r1, #0x67
  000a8	e1a00004	 mov         r0, r4
  000ac	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|

; 297  : 
; 298  :         I2CClose(m_hI2C);

  000b0	e5943000	 ldr         r3, [r4]
  000b4	e1b05003	 movs        r5, r3
  000b8	0a000004	 beq         |$LN24@MenelausDe|
  000bc	e595000c	 ldr         r0, [r5, #0xC]
  000c0	e3700001	 cmn         r0, #1
  000c4	1b000000	 blne        CloseHandle
  000c8	e1a00005	 mov         r0, r5
  000cc	eb000000	 bl          LocalFree
  000d0		 |$LN24@MenelausDe|

; 299  :         m_hI2C = NULL;

  000d0	e3a03000	 mov         r3, #0
  000d4	e5843000	 str         r3, [r4]

; 300  : 
; 301  :         return TRUE;

  000d8	e3a00001	 mov         r0, #1

; 305  : }

  000dc	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000e0	e12fff1e	 bx          lr
  000e4		 |$LN1@MenelausDe|

; 302  :     }
; 303  : 
; 304  :     return FALSE;

  000e4	e3a00000	 mov         r0, #0

; 305  : }

  000e8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$M36767|

			 ENDP  ; |?MenelausDeinit@CMenelaus@@QAAHXZ|, CMenelaus::MenelausDeinit

	EXPORT	|?SlotsEnabled@CMenelaus@@QAAHXZ|	; CMenelaus::SlotsEnabled

  00000			 AREA	 |.pdata|, PDATA
|$T36779| DCD	|$LN7@SlotsEnabl|
	DCD	0x40002001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SlotsEnabled@CMenelaus@@QAAHXZ| PROC	; CMenelaus::SlotsEnabled

; 313  : {

  00000		 |$LN7@SlotsEnabl|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36776|
  00004	e1a04000	 mov         r4, r0

; 314  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::SlotsEnabled\r\n"));
; 315  : 
; 316  :     // de-select both slots
; 317  :     if (!WriteData(MENELAUS_MCTCTRL3_OFFSET, 0x00) ||
; 318  :         !UnMaskMenelausIrq(IRQ_MENELAUS_CD1) ||
; 319  :         !UnMaskMenelausIrq(IRQ_MENELAUS_CD2) ||
; 320  :         !UnMaskMenelausIrq(IRQ_MENELAUS_DL1) ||
; 321  :         !UnMaskMenelausIrq(IRQ_MENELAUS_DL2))

  00008	e3a02000	 mov         r2, #0
  0000c	e3a01038	 mov         r1, #0x38
  00010	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00014	e3500000	 cmp         r0, #0
  00018	0a000015	 beq         |$LN1@SlotsEnabl|
  0001c	e3a01064	 mov         r1, #0x64
  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|
  00028	e3500000	 cmp         r0, #0
  0002c	0a000010	 beq         |$LN1@SlotsEnabl|
  00030	e3a01065	 mov         r1, #0x65
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|
  0003c	e3500000	 cmp         r0, #0
  00040	0a00000b	 beq         |$LN1@SlotsEnabl|
  00044	e3a01066	 mov         r1, #0x66
  00048	e1a00004	 mov         r0, r4
  0004c	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|
  00050	e3500000	 cmp         r0, #0
  00054	0a000006	 beq         |$LN1@SlotsEnabl|
  00058	e3a01067	 mov         r1, #0x67
  0005c	e1a00004	 mov         r0, r4
  00060	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|
  00064	e3500000	 cmp         r0, #0

; 327  :     }
; 328  : 
; 329  : #ifdef DEBUG
; 330  :     UCHAR pData = 0x00;
; 331  :     ReadData(MENELAUS_MCTCTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL1 0x%02X \r\n", pData));
; 332  :     ReadData(MENELAUS_MCTCTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL2 0x%02X \r\n", pData));
; 333  :     ReadData(MENELAUS_MCTCTRL3_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL3 0x%02X \r\n", pData));
; 334  :     ReadData(MENELAUS_MCTPINST_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTPINST 0x%02X \r\n", pData));
; 335  : #endif
; 336  : 
; 337  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"-CMenelaus::SlotsEnabled\r\n"));
; 338  :     return TRUE;

  00068	13a00001	 movne       r0, #1

; 339  : }

  0006c	18bd4010	 ldmneia     sp!, {r4, lr}
  00070	112fff1e	 bxne        lr
  00074		 |$LN1@SlotsEnabl|

; 322  :     {
; 323  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"CMenelaus::SlotsEnabled: "
; 324  :             L"Failed SlotsEnabled \r\n"
; 325  :         ));
; 326  :         return FALSE;

  00074	e3a00000	 mov         r0, #0

; 339  : }

  00078	e8bd4010	 ldmia       sp!, {r4, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$M36777|

			 ENDP  ; |?SlotsEnabled@CMenelaus@@QAAHXZ|, CMenelaus::SlotsEnabled

	EXPORT	|?HandleSlot1Insert@CMenelaus@@QAAHXZ|	; CMenelaus::HandleSlot1Insert

  00000			 AREA	 |.pdata|, PDATA
|$T36789| DCD	|$LN7@HandleSlot|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HandleSlot1Insert@CMenelaus@@QAAHXZ| PROC ; CMenelaus::HandleSlot1Insert

; 349  : {

  00000		 |$LN7@HandleSlot|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36786|
  00004	e1a04000	 mov         r4, r0

; 350  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::HandleSlot1Insert\r\n"));
; 351  : 
; 352  :     // set VMCC to ON
; 353  :     // enable slot 1 and auto shutoff
; 354  :     if (!WriteData(MENELAUS_MCTCTRL3_OFFSET, (SLOT1_EN)) ||
; 355  :         !MaskMenelausIrq(IRQ_MENELAUS_DL2) ||
; 356  :         !MaskMenelausIrq(IRQ_MENELAUS_CD2))

  00008	e3a02001	 mov         r2, #1
  0000c	e3a01038	 mov         r1, #0x38
  00010	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00014	e3500000	 cmp         r0, #0
  00018	0a00000b	 beq         |$LN1@HandleSlot|
  0001c	e3a01067	 mov         r1, #0x67
  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|
  00028	e3500000	 cmp         r0, #0
  0002c	0a000006	 beq         |$LN1@HandleSlot|
  00030	e3a01065	 mov         r1, #0x65
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|
  0003c	e3500000	 cmp         r0, #0

; 360  :     }
; 361  : 
; 362  : #if DEBUG_MENELUS == 1
; 363  :     UCHAR pData = 0x00;
; 364  :     ReadData(MENELAUS_MCTCTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL1 0x%02X \r\n"), pData));
; 365  :     ReadData(MENELAUS_MCTCTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL2 0x%02X \r\n"), pData));
; 366  :     ReadData(MENELAUS_MCTCTRL3_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL3 0x%02X \r\n"), pData));
; 367  :     ReadData(MENELAUS_MCTPINST_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTPINST 0x%02X \r\n"), pData));
; 368  : #endif
; 369  : 
; 370  : 
; 371  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"-CMenelaus::HandleSlot1Insert\r\n"));
; 372  :     return TRUE;

  00040	13a00001	 movne       r0, #1

; 373  : }

  00044	18bd4010	 ldmneia     sp!, {r4, lr}
  00048	112fff1e	 bxne        lr
  0004c		 |$LN1@HandleSlot|

; 357  :     {
; 358  :         MenelausDeinit();

  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          |?MenelausDeinit@CMenelaus@@QAAHXZ|

; 359  :         return FALSE;

  00054	e3a00000	 mov         r0, #0

; 373  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M36787|

			 ENDP  ; |?HandleSlot1Insert@CMenelaus@@QAAHXZ|, CMenelaus::HandleSlot1Insert

	EXPORT	|?HandleSlot2Insert@CMenelaus@@QAAHXZ|	; CMenelaus::HandleSlot2Insert

  00000			 AREA	 |.pdata|, PDATA
|$T36799| DCD	|$LN7@HandleSlot@2|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?HandleSlot2Insert@CMenelaus@@QAAHXZ| PROC ; CMenelaus::HandleSlot2Insert

; 383  : {

  00000		 |$LN7@HandleSlot@2|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M36796|
  00004	e1a04000	 mov         r4, r0

; 384  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::HandleSlot2Insert\r\n"));
; 385  :     
; 386  :     // enable slot2
; 387  :     if (!WriteData(MENELAUS_MCTCTRL3_OFFSET, (SLOT2_EN)) ||
; 388  :         !MaskMenelausIrq(IRQ_MENELAUS_DL1) ||
; 389  :         !MaskMenelausIrq(IRQ_MENELAUS_CD1))

  00008	e3a02002	 mov         r2, #2
  0000c	e3a01038	 mov         r1, #0x38
  00010	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00014	e3500000	 cmp         r0, #0
  00018	0a00000b	 beq         |$LN1@HandleSlot@2|
  0001c	e3a01066	 mov         r1, #0x66
  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|
  00028	e3500000	 cmp         r0, #0
  0002c	0a000006	 beq         |$LN1@HandleSlot@2|
  00030	e3a01064	 mov         r1, #0x64
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|
  0003c	e3500000	 cmp         r0, #0

; 393  :     }
; 394  : 
; 395  : #if DEBUG_MENELUS == 1
; 396  :     UCHAR pData = 0x00;
; 397  :     ReadData(MENELAUS_MCTCTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL1 0x%02X \r\n"), pData));
; 398  :     ReadData(MENELAUS_MCTCTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL2 0x%02X \r\n"), pData));
; 399  :     ReadData(MENELAUS_MCTCTRL3_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL3 0x%02X \r\n"), pData));
; 400  :     ReadData(MENELAUS_MCTPINST_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTPINST 0x%02X \r\n"), pData));
; 401  : #endif 
; 402  : 
; 403  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"-CMenelaus::HandleSlot2Insert\r\n"));
; 404  :     return TRUE;

  00040	13a00001	 movne       r0, #1

; 405  : }

  00044	18bd4010	 ldmneia     sp!, {r4, lr}
  00048	112fff1e	 bxne        lr
  0004c		 |$LN1@HandleSlot@2|

; 390  :     {
; 391  :         MenelausDeinit();

  0004c	e1a00004	 mov         r0, r4
  00050	eb000000	 bl          |?MenelausDeinit@CMenelaus@@QAAHXZ|

; 392  :         return FALSE;

  00054	e3a00000	 mov         r0, #0

; 405  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M36797|

			 ENDP  ; |?HandleSlot2Insert@CMenelaus@@QAAHXZ|, CMenelaus::HandleSlot2Insert

	EXPORT	|?UpdateSlotsState@CMenelaus@@QAAHXZ|	; CMenelaus::UpdateSlotsState

  00000			 AREA	 |.pdata|, PDATA
|$T36813| DCD	|$LN12@UpdateSlot|
	DCD	0x40002602
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateSlotsState@CMenelaus@@QAAHXZ| PROC ; CMenelaus::UpdateSlotsState

; 413  : {

  00000		 |$LN12@UpdateSlot|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36810|
  00008	e1a04000	 mov         r4, r0

; 414  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::UpdateSlotsState\r\n"));
; 415  : 
; 416  :     if (m_hI2C == NULL)

  0000c	e5943000	 ldr         r3, [r4]
  00010	e3530000	 cmp         r3, #0

; 417  :         return FALSE;

  00014	0a00001b	 beq         |$LN1@UpdateSlot|

; 418  : 
; 419  :     UCHAR pinState = 0x00;
; 420  :     UCHAR mask = 0x00;

  00018	e3a02000	 mov         r2, #0
  0001c	e5cd2001	 strb        r2, [sp, #1]
  00020	e3a03000	 mov         r3, #0

; 421  :     
; 422  :     if (!ReadData(MENELAUS_MCTPINST_OFFSET, &pinState) ||
; 423  :         !ReadData(MENELAUS_INTMASK1_OFFSET, &mask))

  00024	e28d2000	 add         r2, sp, #0
  00028	e3a01039	 mov         r1, #0x39
  0002c	e5cd3000	 strb        r3, [sp]
  00030	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|
  00034	e3500000	 cmp         r0, #0
  00038	0a000012	 beq         |$LN1@UpdateSlot|
  0003c	e28d2001	 add         r2, sp, #1
  00040	e3a01017	 mov         r1, #0x17
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|
  0004c	e3500000	 cmp         r0, #0
  00050	0a00000c	 beq         |$LN1@UpdateSlot|

; 429  :     }
; 430  :     
; 431  :     m_bSlot1 = (~pinState & S1_CD_ST) ? TRUE : FALSE;

  00054	e5dd3000	 ldrb        r3, [sp]

; 432  :     
; 433  :     m_bSlot2 = ((~pinState & S2_DAT1_ST) ||
; 434  :                 (~pinState & S2_CD_ST)) ? TRUE : FALSE;
; 435  : 
; 436  : #if DEBUG_MENELUS == 1
; 437  :     UCHAR pData = 0x00;
; 438  :     ReadData(MENELAUS_MCTCTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL1 0x%02X \r\n"), pData));
; 439  :     ReadData(MENELAUS_MCTCTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL2 0x%02X \r\n"), pData));
; 440  :     ReadData(MENELAUS_MCTCTRL3_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL3 0x%02X \r\n"), pData));
; 441  :     ReadData(MENELAUS_MCTPINST_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTPINST 0x%02X \r\n"), pData));
; 442  : #endif
; 443  : 
; 444  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"-CMenelaus::UpdateSlotsState\r\n"));
; 445  :     return TRUE;

  00058	e3a00001	 mov         r0, #1
  0005c	e1e03003	 mvn         r3, r3
  00060	e3130001	 tst         r3, #1
  00064	13a02001	 movne       r2, #1
  00068	03a02000	 moveq       r2, #0
  0006c	e3130008	 tst         r3, #8
  00070	03130002	 tsteq       r3, #2
  00074	03a03000	 moveq       r3, #0
  00078	13a03001	 movne       r3, #1
  0007c	e5843014	 str         r3, [r4, #0x14]
  00080	e5842010	 str         r2, [r4, #0x10]
  00084	ea000000	 b           |$LN4@UpdateSlot|
  00088		 |$LN1@UpdateSlot|

; 424  :     {
; 425  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"CMenelaus::UpdateSlotsState: "
; 426  :             L"Failed UpdateSlotsState\r\n"
; 427  :         ));
; 428  :         return FALSE;

  00088	e3a00000	 mov         r0, #0
  0008c		 |$LN4@UpdateSlot|

; 446  : }

  0008c	e28dd004	 add         sp, sp, #4
  00090	e8bd4010	 ldmia       sp!, {r4, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M36811|

			 ENDP  ; |?UpdateSlotsState@CMenelaus@@QAAHXZ|, CMenelaus::UpdateSlotsState

	EXPORT	|?AckInterrupts@CMenelaus@@QAAHXZ|	; CMenelaus::AckInterrupts

  00000			 AREA	 |.pdata|, PDATA
|$T36860| DCD	|$LN40@AckInterru|
	DCD	0x40004402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AckInterrupts@CMenelaus@@QAAHXZ| PROC ; CMenelaus::AckInterrupts

; 454  : {

  00000		 |$LN40@AckInterru|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36857|
  00008	e1a04000	 mov         r4, r0

; 455  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"+CMenelaus::AckInterrupts\r\n"));
; 456  :    
; 457  :     UCHAR status = 0x00;
; 458  :     UCHAR mask = 0x00;

  0000c	e3a02000	 mov         r2, #0
  00010	e5cd2001	 strb        r2, [sp, #1]
  00014	e3a03000	 mov         r3, #0

; 459  :     
; 460  :     if (!ReadData(MENELAUS_INTSTATUS1_OFFSET, &status) ||
; 461  :         !ReadData(MENELAUS_INTMASK1_OFFSET, &mask))

  00018	e28d2000	 add         r2, sp, #0
  0001c	e3a01019	 mov         r1, #0x19
  00020	e5cd3000	 strb        r3, [sp]
  00024	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|
  00028	e3500000	 cmp         r0, #0
  0002c	0a000033	 beq         |$LN5@AckInterru|
  00030	e28d2001	 add         r2, sp, #1
  00034	e3a01017	 mov         r1, #0x17
  00038	e1a00004	 mov         r0, r4
  0003c	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|
  00040	e3500000	 cmp         r0, #0
  00044	0a00002d	 beq         |$LN5@AckInterru|

; 467  :     }
; 468  : 
; 469  :     DEBUGMSG(SDCARD_ZONE_INFO, (L"CMenelaus::AckInterrupts: "
; 470  :         L"Menelaus Int Status 0x%02X Int Mask 0x%02X \r\n", status, mask
; 471  :     ));
; 472  : 
; 473  :     if (status & S1_CD_ST)

  00048	e5dd3000	 ldrb        r3, [sp]
  0004c	e3130001	 tst         r3, #1
  00050	0a000007	 beq         |$LN4@AckInterru|

; 474  :         return ClearMenelausIrq(IRQ_MENELAUS_CD1) && UnMaskMenelausIrq(IRQ_MENELAUS_CD1);

  00054	e3a02001	 mov         r2, #1
  00058	e3a0101b	 mov         r1, #0x1B
  0005c	e1a00004	 mov         r0, r4
  00060	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00064	e3500000	 cmp         r0, #0
  00068	0a000024	 beq         |$LN5@AckInterru|
  0006c	e3a01064	 mov         r1, #0x64
  00070	ea00001c	 b           |$LN37@AckInterru|
  00074		 |$LN4@AckInterru|

; 475  :     
; 476  :     if (status & S1_DAT1_ST)

  00074	e3130004	 tst         r3, #4
  00078	0a000007	 beq         |$LN3@AckInterru|

; 477  :         return ClearMenelausIrq(IRQ_MENELAUS_DL1) && UnMaskMenelausIrq(IRQ_MENELAUS_DL1);

  0007c	e3a02004	 mov         r2, #4
  00080	e3a0101b	 mov         r1, #0x1B
  00084	e1a00004	 mov         r0, r4
  00088	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  0008c	e3500000	 cmp         r0, #0
  00090	0a00001a	 beq         |$LN5@AckInterru|
  00094	e3a01066	 mov         r1, #0x66
  00098	ea000012	 b           |$LN37@AckInterru|
  0009c		 |$LN3@AckInterru|

; 478  : 
; 479  :     if (status & S2_CD_ST)

  0009c	e3130002	 tst         r3, #2
  000a0	0a000007	 beq         |$LN2@AckInterru|

; 480  :         return ClearMenelausIrq(IRQ_MENELAUS_CD2) && UnMaskMenelausIrq(IRQ_MENELAUS_CD2);

  000a4	e3a02002	 mov         r2, #2
  000a8	e3a0101b	 mov         r1, #0x1B
  000ac	e1a00004	 mov         r0, r4
  000b0	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  000b4	e3500000	 cmp         r0, #0
  000b8	0a000010	 beq         |$LN5@AckInterru|
  000bc	e3a01065	 mov         r1, #0x65
  000c0	ea000008	 b           |$LN37@AckInterru|
  000c4		 |$LN2@AckInterru|

; 481  : 
; 482  :     if (status & S2_DAT1_ST)

  000c4	e3130008	 tst         r3, #8
  000c8	0a00000a	 beq         |$LN1@AckInterru|

; 483  :         return ClearMenelausIrq(IRQ_MENELAUS_DL2) && UnMaskMenelausIrq(IRQ_MENELAUS_DL2);

  000cc	e3a02008	 mov         r2, #8
  000d0	e3a0101b	 mov         r1, #0x1B
  000d4	e1a00004	 mov         r0, r4
  000d8	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  000dc	e3500000	 cmp         r0, #0
  000e0	0a000006	 beq         |$LN5@AckInterru|
  000e4	e3a01067	 mov         r1, #0x67
  000e8		 |$LN37@AckInterru|
  000e8	e1a00004	 mov         r0, r4
  000ec	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|
  000f0	e3500000	 cmp         r0, #0
  000f4	0a000001	 beq         |$LN5@AckInterru|
  000f8		 |$LN1@AckInterru|

; 484  :         
; 485  :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"-CMenelaus::AckInterrupts\r\n"));
; 486  :     return TRUE;

  000f8	e3a00001	 mov         r0, #1
  000fc	ea000000	 b           |$LN7@AckInterru|
  00100		 |$LN5@AckInterru|

; 462  :     {
; 463  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"CMenelaus::AckInterrupts: "
; 464  :             L"Failed UpdateSlotsState\r\n"
; 465  :         ));
; 466  :         return FALSE;

  00100	e3a00000	 mov         r0, #0
  00104		 |$LN7@AckInterru|

; 487  : }

  00104	e28dd004	 add         sp, sp, #4
  00108	e8bd4010	 ldmia       sp!, {r4, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$M36858|

			 ENDP  ; |?AckInterrupts@CMenelaus@@QAAHXZ|, CMenelaus::AckInterrupts

	EXPORT	|??1CMenelaus@@QAA@XZ|			; CMenelaus::~CMenelaus

  00000			 AREA	 |.pdata|, PDATA
|$T36868| DCD	|$LN5@CMenelaus@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1CMenelaus@@QAA@XZ| PROC		; CMenelaus::~CMenelaus

; 82   : {

  00000		 |$LN5@CMenelaus@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M36865|

; 83   :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"dtor CMenelaus\r\n"));
; 84   :     MenelausDeinit();

  00004	eb000000	 bl          |?MenelausDeinit@CMenelaus@@QAAHXZ|

; 85   : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M36866|

			 ENDP  ; |??1CMenelaus@@QAA@XZ|, CMenelaus::~CMenelaus

	EXPORT	|?MenelausInit@CMenelaus@@QAAHXZ|	; CMenelaus::MenelausInit

  00000			 AREA	 |.pdata|, PDATA
|$T36922| DCD	|$LN51@MenelausIn|
	DCD	0x40008c02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MenelausInit@CMenelaus@@QAAHXZ| PROC	; CMenelaus::MenelausInit

; 96   : {

  00000		 |$LN51@MenelausIn|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M36919|
  00008	e1a04000	 mov         r4, r0

; 97   :     BOOL rc = FALSE;
; 98   :     DEBUGMSG(SDCARD_ZONE_FUNC, (L"CMenelaus::MenelausInit: "
; 99   :         L"Initialize Hardware & Interrupts\r\n"
; 100  :     ));
; 101  : 
; 102  :     // open I2C bus
; 103  :     m_hI2C = I2COpen(m_lpsI2CDeviceName);

  0000c	e5940004	 ldr         r0, [r4, #4]
  00010	e3a05000	 mov         r5, #0
  00014	eb000000	 bl          I2COpen
  00018	e1b03000	 movs        r3, r0
  0001c	e5843000	 str         r3, [r4]

; 104  : 
; 105  :     if (m_hI2C == NULL) {

  00020	0a00007c	 beq         |$LN48@MenelausIn|

; 106  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"CMenelaus::MenelausInit: "
; 107  :             L"Failed open I2C device %s\r\n", m_lpsI2CDeviceName
; 108  :         ));
; 109  :         goto cleanUp;
; 110  :     }
; 111  : 
; 112  :     if (!I2CSetSlaveAddress(m_hI2C,
; 113  :                             m_dwI2CMenelausAddrSize,
; 114  :                             m_dwI2CMenelausAddress)) {

  00024	e5930000	 ldr         r0, [r3]
  00028	e5933004	 ldr         r3, [r3, #4]
  0002c	e5942008	 ldr         r2, [r4, #8]
  00030	e594100c	 ldr         r1, [r4, #0xC]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff13	 bx          r3
  0003c	e3500000	 cmp         r0, #0
  00040	0a000074	 beq         |$LN48@MenelausIn|

; 115  :         
; 116  :         DEBUGMSG(SDCARD_ZONE_ERROR, (L"CMenelaus::MenelausInit: "
; 117  :             L"Failed to set I2C Slave address 0x%08x, size 0x%08x)\r\n", m_dwI2CMenelausAddress, m_dwI2CMenelausAddrSize
; 118  :         ));
; 119  : 
; 120  :         goto cleanUp;
; 121  :     }
; 122  : 
; 123  :     // Setup Menelaus Chip
; 124  :     UCHAR pData = 0x00;

  00044	e3a03000	 mov         r3, #0

; 125  :     
; 126  :     // Clear & Mask MTC Menelaus Interrupts
; 127  :     if ( !ClearMenelausIrq(IRQ_MENELAUS_CD1) || !MaskMenelausIrq(IRQ_MENELAUS_CD1) ||
; 128  :          !ClearMenelausIrq(IRQ_MENELAUS_CD2) || !MaskMenelausIrq(IRQ_MENELAUS_CD2) ||
; 129  :          !ClearMenelausIrq(IRQ_MENELAUS_DL1) || !MaskMenelausIrq(IRQ_MENELAUS_DL1) ||
; 130  :          !ClearMenelausIrq(IRQ_MENELAUS_DL2) || !MaskMenelausIrq(IRQ_MENELAUS_DL2))

  00048	e3a02001	 mov         r2, #1
  0004c	e3a0101b	 mov         r1, #0x1B
  00050	e1a00004	 mov         r0, r4
  00054	e5cd3000	 strb        r3, [sp]
  00058	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  0005c	e3500000	 cmp         r0, #0
  00060	0a00006c	 beq         |$LN48@MenelausIn|
  00064	e3a01064	 mov         r1, #0x64
  00068	e1a00004	 mov         r0, r4
  0006c	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|
  00070	e3500000	 cmp         r0, #0
  00074	0a000067	 beq         |$LN48@MenelausIn|
  00078	e3a02002	 mov         r2, #2
  0007c	e3a0101b	 mov         r1, #0x1B
  00080	e1a00004	 mov         r0, r4
  00084	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00088	e3500000	 cmp         r0, #0
  0008c	0a000061	 beq         |$LN48@MenelausIn|
  00090	e3a01065	 mov         r1, #0x65
  00094	e1a00004	 mov         r0, r4
  00098	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|
  0009c	e3500000	 cmp         r0, #0
  000a0	0a00005c	 beq         |$LN48@MenelausIn|
  000a4	e3a02004	 mov         r2, #4
  000a8	e3a0101b	 mov         r1, #0x1B
  000ac	e1a00004	 mov         r0, r4
  000b0	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  000b4	e3500000	 cmp         r0, #0
  000b8	0a000056	 beq         |$LN48@MenelausIn|
  000bc	e3a01066	 mov         r1, #0x66
  000c0	e1a00004	 mov         r0, r4
  000c4	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|
  000c8	e3500000	 cmp         r0, #0
  000cc	0a000051	 beq         |$LN48@MenelausIn|
  000d0	e3a02008	 mov         r2, #8
  000d4	e3a0101b	 mov         r1, #0x1B
  000d8	e1a00004	 mov         r0, r4
  000dc	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  000e0	e3500000	 cmp         r0, #0
  000e4	0a00004b	 beq         |$LN48@MenelausIn|
  000e8	e3a01067	 mov         r1, #0x67
  000ec	e1a00004	 mov         r0, r4
  000f0	eb000000	 bl          |?MaskMenelausIrq@CMenelaus@@AAAHI@Z|
  000f4	e3500000	 cmp         r0, #0
  000f8	0a000046	 beq         |$LN48@MenelausIn|

; 131  :      {
; 132  :         goto cleanUp;
; 133  :      }
; 134  :     
; 135  :     // confgure VMMC (Power Supply Slot1) for 3.2V
; 136  :     if (ReadData(MENELAUS_LD0CTRL1_OFFSET, &pData))

  000fc	e28d2000	 add         r2, sp, #0
  00100	e3a0100a	 mov         r1, #0xA
  00104	e1a00004	 mov         r0, r4
  00108	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|
  0010c	e3500000	 cmp         r0, #0
  00110	0a000040	 beq         |$LN48@MenelausIn|

; 137  :     {
; 138  :         pData &= ~(VMCC_VOLT);  // clear bits
; 139  :         pData |= VMMC_VOLT32;   // set bits

  00114	e5dd3000	 ldrb        r3, [sp]

; 140  :         
; 141  :         if (!WriteData(MENELAUS_LD0CTRL1_OFFSET, pData) ||
; 142  :             !WriteData(MENELAUS_LD0CTRL7_OFFSET, (VMMC_MODE_ON)))

  00118	e3a0100a	 mov         r1, #0xA
  0011c	e1a00004	 mov         r0, r4
  00120	e38320c0	 orr         r2, r3, #0xC0
  00124	e5cd2000	 strb        r2, [sp]
  00128	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  0012c	e3500000	 cmp         r0, #0
  00130	0a000038	 beq         |$LN48@MenelausIn|
  00134	e3a02002	 mov         r2, #2
  00138	e3a01010	 mov         r1, #0x10
  0013c	e1a00004	 mov         r0, r4
  00140	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00144	e3500000	 cmp         r0, #0
  00148	0a000032	 beq         |$LN48@MenelausIn|

; 143  :         {
; 144  :             goto cleanUp;
; 145  :         }
; 146  :     }
; 147  :     else
; 148  :     {
; 149  :         goto cleanUp;
; 150  :     }
; 151  : 
; 152  :     // configure DCDC3 (Power Supply Slot2) for 3.2V
; 153  :     // turn on DCDC3 suppply to Slot2
; 154  :     if (ReadData(MENELAUS_DCDCCTRL1_OFFSET, &pData))

  0014c	e28d2000	 add         r2, sp, #0
  00150	e3a01007	 mov         r1, #7
  00154	e1a00004	 mov         r0, r4
  00158	eb000000	 bl          |?ReadData@CMenelaus@@AAAHEPAE@Z|
  0015c	e3500000	 cmp         r0, #0
  00160	0a00002c	 beq         |$LN48@MenelausIn|

; 155  :     {
; 156  :         pData &= ~(DCDC3_VOLT);  // clear bits
; 157  :         pData |= DCDC3_VOLT32;   // set bits

  00164	e5dd3000	 ldrb        r3, [sp]

; 158  :         
; 159  :         if (!WriteData(MENELAUS_DCDCCTRL1_OFFSET, pData) || 
; 160  :             !WriteData(MENELAUS_DCDCCTRL3_OFFSET, (DCDC3_MODE_ONPWM)))

  00168	e3a01007	 mov         r1, #7
  0016c	e1a00004	 mov         r0, r4
  00170	e3832038	 orr         r2, r3, #0x38
  00174	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00178	e3500000	 cmp         r0, #0
  0017c	0a000025	 beq         |$LN48@MenelausIn|
  00180	e3a02003	 mov         r2, #3
  00184	e3a01009	 mov         r1, #9
  00188	e1a00004	 mov         r0, r4
  0018c	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  00190	e3500000	 cmp         r0, #0
  00194	0a00001f	 beq         |$LN48@MenelausIn|

; 161  :         {
; 162  :             goto cleanUp;
; 163  :         }
; 164  :     }
; 165  :     else
; 166  :     {
; 167  :         goto cleanUp;
; 168  :     }
; 169  : 
; 170  :     // Configure Slots
; 171  :     // MCT Control Reg 3
; 172  :     // Slots 1 and slot 2 Auto Power Supply Shutoff Disabled.
; 173  : 
; 174  :     // MCT Control Reg 2
; 175  :     // DCDC3 Power Supply for Slot2 Selected, buffers and debounce enabled
; 176  :     // CD1, CD2 buffer enabled
; 177  :     // S1Dat1, S2Dat1 Buffer enabled (note must be enabled only after power applied to slot)
; 178  : 
; 179  :     // MCT Control Reg 1
; 180  :     // Push-Pull Buffer
; 181  :     // Normally Open  Switch
; 182  :     if (!WriteData(MENELAUS_MCTCTRL3_OFFSET, 0x00) || 
; 183  :         !WriteData(MENELAUS_MCTCTRL2_OFFSET, (S2D1_BUFEN | S1D1_BUFEN | S2CD_BUFEN | S1CD_BUFEN | VS2_DCDC3)) || 
; 184  :         !WriteData(MENELAUS_MCTCTRL1_OFFSET, (S2CD_SWNO | S1CD_SWNO)))

  00198	e3a02000	 mov         r2, #0
  0019c	e3a01038	 mov         r1, #0x38
  001a0	e1a00004	 mov         r0, r4
  001a4	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  001a8	e3500000	 cmp         r0, #0
  001ac	0a000019	 beq         |$LN48@MenelausIn|
  001b0	e3a0203c	 mov         r2, #0x3C
  001b4	e3a01037	 mov         r1, #0x37
  001b8	e1a00004	 mov         r0, r4
  001bc	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  001c0	e3500000	 cmp         r0, #0
  001c4	0a000013	 beq         |$LN48@MenelausIn|
  001c8	e3a02003	 mov         r2, #3
  001cc	e3a01036	 mov         r1, #0x36
  001d0	e1a00004	 mov         r0, r4
  001d4	eb000000	 bl          |?WriteData@CMenelaus@@AAAHEE@Z|
  001d8	e3500000	 cmp         r0, #0
  001dc	0a00000d	 beq         |$LN48@MenelausIn|

; 185  :     {
; 186  :         goto cleanUp;
; 187  :     }
; 188  :     
; 189  :     // Unmask Desired Menelaus Interrupts
; 190  :     UnMaskMenelausIrq(IRQ_MENELAUS_CD1);

  001e0	e3a01064	 mov         r1, #0x64
  001e4	e1a00004	 mov         r0, r4
  001e8	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|

; 191  :     UnMaskMenelausIrq(IRQ_MENELAUS_CD2);

  001ec	e3a01065	 mov         r1, #0x65
  001f0	e1a00004	 mov         r0, r4
  001f4	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|

; 192  :     UnMaskMenelausIrq(IRQ_MENELAUS_DL1);

  001f8	e3a01066	 mov         r1, #0x66
  001fc	e1a00004	 mov         r0, r4
  00200	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|

; 193  :     UnMaskMenelausIrq(IRQ_MENELAUS_DL2);

  00204	e3a01067	 mov         r1, #0x67
  00208	e1a00004	 mov         r0, r4
  0020c	eb000000	 bl          |?UnMaskMenelausIrq@CMenelaus@@AAAHI@Z|

; 194  : 
; 195  : #ifdef DEBUG
; 196  :     DEBUGMSG(SDCARD_ZONE_INFO, (L"Dump Menelaus Configuration! \r\n")); 
; 197  :     ReadData(MENELAUS_VCORECTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"VCORECTRL1 0x%02X \r\n", pData));
; 198  :     ReadData(MENELAUS_VCORECTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"VCORECTRL2 0x%02X \r\n", pData));
; 199  :     ReadData(MENELAUS_VCORECTRL3_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"VCORECTRL3 0x%02X \r\n", pData));
; 200  :     ReadData(MENELAUS_VCORECTRL4_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"VCORECTRL4 0x%02X \r\n", pData));
; 201  :     ReadData(MENELAUS_VCORECTRL5_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"VCORECTRL5 0x%02X \r\n", pData));
; 202  :     ReadData(MENELAUS_DCDCCTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"DCDCCTRL1 0x%02X \r\n", pData));
; 203  :     ReadData(MENELAUS_DCDCCTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"DCDCCTRL2 0x%02X \r\n", pData));
; 204  :     ReadData(MENELAUS_DCDCCTRL3_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"DCDCCTRL3 0x%02X \r\n", pData));
; 205  :     ReadData(MENELAUS_LD0CTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"LD0CTRL1 0x%02X \r\n", pData));
; 206  :     ReadData(MENELAUS_LD0CTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"LD0CTRL2 0x%02X \r\n", pData));
; 207  :     ReadData(MENELAUS_LD0CTRL3_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"LD0CTRL3 0x%02X \r\n", pData));
; 208  :     ReadData(MENELAUS_LD0CTRL4_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"LD0CTRL4 0x%02X \r\n", pData));
; 209  :     ReadData(MENELAUS_LD0CTRL5_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"LD0CTRL5 0x%02X \r\n", pData));
; 210  :     ReadData(MENELAUS_LD0CTRL6_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"LD0CTRL6 0x%02X \r\n", pData));
; 211  :     ReadData(MENELAUS_LD0CTRL7_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"LD0CTRL7 0x%02X \r\n", pData));
; 212  :     ReadData(MENELAUS_LD0CTRL8_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"LD0CTRL8 0x%02X \r\n", pData));
; 213  :     ReadData(MENELAUS_SLEEPCTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"SLEEPCTRL1 0x%02X \r\n", pData));
; 214  :     ReadData(MENELAUS_SLEEPCTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"SLEEPCTRL2 0x%02X \r\n", pData));
; 215  :     ReadData(MENELAUS_DEVICEOFF_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"DEVICEOFF 0x%02X \r\n", pData));
; 216  :     ReadData(MENELAUS_OSCCTRL_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"OSCCTRL 0x%02X \r\n", pData));
; 217  :     ReadData(MENELAUS_DETECTCTRL_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"DETECTCTRL 0x%02X \r\n", pData));
; 218  :     ReadData(MENELAUS_INTMASK1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"INTMASK1 0x%02X \r\n", pData));
; 219  :     ReadData(MENELAUS_INTMASK2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"INTMASK2 0x%02X \r\n", pData));
; 220  :     ReadData(MENELAUS_INTSTATUS1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"INTSTATUS1 0x%02X \r\n", pData));
; 221  :     ReadData(MENELAUS_INTSTATUS2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"INTSTATUS2 0x%02X \r\n", pData));
; 222  :     ReadData(MENELAUS_INTACK1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"INTACK1 0x%02X \r\n", pData));
; 223  :     ReadData(MENELAUS_INTACK2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"INTACK2 0x%02X \r\n", pData));
; 224  :     ReadData(MENELAUS_GPIOCTRL_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"GPIOCTRL 0x%02X \r\n", pData));
; 225  :     ReadData(MENELAUS_GPIOIN_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"GPIOIN 0x%02X \r\n", pData));
; 226  :     ReadData(MENELAUS_GPIOOUT_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"GPIOOUT1 0x%02X \r\n", pData));
; 227  :     ReadData(MENELAUS_BBSMS_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"BBSMS 0x%02X \r\n", pData));
; 228  :     ReadData(MENELAUS_RTCCTRL_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCCTRL 0x%02X \r\n", pData));
; 229  :     ReadData(MENELAUS_RTCUPDATE_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCUPDATE 0x%02X \r\n", pData));
; 230  :     ReadData(MENELAUS_RTCSEC_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCSEC 0x%02X \r\n", pData));
; 231  :     ReadData(MENELAUS_RTCMIN_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCMIN 0x%02X \r\n", pData));
; 232  :     ReadData(MENELAUS_RTCHR_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCHR 0x%02X \r\n", pData));
; 233  :     ReadData(MENELAUS_RTCDAY_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCDAY 0x%02X \r\n", pData));
; 234  :     ReadData(MENELAUS_RTCMON_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCMON 0x%02X \r\n", pData));
; 235  :     ReadData(MENELAUS_RTCYR_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCYR 0x%02X \r\n", pData));
; 236  :     ReadData(MENELAUS_RTCWKDAY_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCWKDAY 0x%02X \r\n", pData));
; 237  :     ReadData(MENELAUS_RTCALSEC_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCALSEC 0x%02X \r\n", pData));
; 238  :     ReadData(MENELAUS_RTCALMIN_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCALMIN 0x%02X \r\n", pData));
; 239  :     ReadData(MENELAUS_RTCALHR_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCALHR 0x%02X \r\n", pData));
; 240  :     ReadData(MENELAUS_RTCALDAY_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCALDAY 0x%02X \r\n", pData));
; 241  :     ReadData(MENELAUS_RTCALMON_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCALMON 0x%02X \r\n", pData));
; 242  :     ReadData(MENELAUS_RTCALYR_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCALYR 0x%02X \r\n", pData));
; 243  :     ReadData(MENELAUS_RTCCOMPMSB_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCCOMPMSB 0x%02X \r\n", pData));
; 244  :     ReadData(MENELAUS_RTCCOMPLSB_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"RTCCOMPLSB 0x%02X \r\n", pData));
; 245  :     ReadData(MENELAUS_S1PULLEN_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"S1PULLEN 0x%02X \r\n", pData));
; 246  :     ReadData(MENELAUS_S1PULLDIR_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"S1PULLDIR 0x%02X \r\n", pData));
; 247  :     ReadData(MENELAUS_S2PULLEN_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"S2PULLEN 0x%02X \r\n", pData));
; 248  :     ReadData(MENELAUS_S2PULLDIR_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"S2PULLDIR 0x%02X \r\n", pData));
; 249  :     ReadData(MENELAUS_MCTCTRL1_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL1 0x%02X \r\n", pData));
; 250  :     ReadData(MENELAUS_MCTCTRL2_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL2 0x%02X \r\n", pData));
; 251  :     ReadData(MENELAUS_MCTCTRL3_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTCTRL3 0x%02X \r\n", pData));
; 252  :     ReadData(MENELAUS_MCTPINST_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"MCTPINST 0x%02X \r\n", pData));
; 253  :     ReadData(MENELAUS_DEBOUNCE_OFFSET, &pData); DEBUGMSG(SDCARD_ZONE_INFO, (L"DEBOUNCE 0x%02X \r\n", pData)); 
; 254  :     DEBUGMSG(SDCARD_ZONE_INFO, (L"End Dump Menelaus Configuration! \r\n")); 
; 255  : #endif
; 256  : 
; 257  :     rc = TRUE;

  00210	e3a05001	 mov         r5, #1
  00214		 |$cleanUp$36367|

; 258  : 
; 259  : cleanUp:
; 260  :     if(!rc) {

  00214	ea000001	 b           |$LN1@MenelausIn|
  00218		 |$LN48@MenelausIn|

; 261  :         // Handle error specific 
; 262  :         MenelausDeinit();

  00218	e1a00004	 mov         r0, r4
  0021c	eb000000	 bl          |?MenelausDeinit@CMenelaus@@QAAHXZ|
  00220		 |$LN1@MenelausIn|

; 263  :     }
; 264  :     return rc;
; 265  : }

  00220	e1a00005	 mov         r0, r5
  00224	e28dd004	 add         sp, sp, #4
  00228	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0022c	e12fff1e	 bx          lr
  00230		 |$M36920|

			 ENDP  ; |?MenelausInit@CMenelaus@@QAAHXZ|, CMenelaus::MenelausInit

	END
