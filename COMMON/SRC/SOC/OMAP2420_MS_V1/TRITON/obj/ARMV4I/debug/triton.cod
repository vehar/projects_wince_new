; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\TRITON\triton.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BG@PDLELEPB@?$AAI?$AA2?$AAC?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17DJGGJCGD@?$AAI?$AAr?$AAq?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
	%	32
|s_deviceRegParams| DCD |??_C@_17DJGGJCGD@?$AAI?$AAr?$AAq?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xc
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1BG@PDLELEPB@?$AAI?$AA2?$AAC?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x8
	DCD	0x4
	DCD	0x2d

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@PDLELEPB@?$AAI?$AA2?$AAC?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?$AA@| DCB "I"
	DCB	0x0, "2", 0x0, "C", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17DJGGJCGD@?$AAI?$AAr?$AAq?$AA?$AA@| DCB "I", 0x0, "r", 0x0, "q", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "T", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "o", 0x0, "n", 0x0
	DCB	" ", 0x0, "(", 0x0, "T", 0x0, "W", 0x0, "L", 0x0, ")", 0x0
	DCB	0x0, 0x0
	%	38
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"R", 0x0, "T", 0x0, "C", 0x0, 0x0, 0x0
	%	56
	DCD	0x8003
	EXPORT	|I2CTransact|
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|GetTritonIrqStatus|
	IMPORT	|memset|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T43465| DCD	|$LN6@GetTritonI|
	DCD	0xc0004904

  00000			 AREA	 |.xdata|, DATA
|$T43461| DCD	0xffffffe8
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\triton\triton.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43461|

  00008		 |GetTritonIrqStatus| PROC

; 74   : {

  00008		 |$LN6@GetTritonI|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0003	 stmdb       sp!, {r0, r1}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24ddf5f	 sub         sp, sp, #0x5F, 30
  00018		 |$M43462|
  00018	e59f3108	 ldr         r3, [pc, #0x108]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3174	 str         r3, [sp, #0x174]

; 75   :     Device_t *pDevice = (Device_t*)pContext;

  00024	e59d3184	 ldr         r3, [sp, #0x184]
  00028	e58d3000	 str         r3, [sp]

; 76   :     I2CTRANS trans;
; 77   : 
; 78   :     ZeroMemory(&trans,sizeof(trans));

  0002c	e3a02e17	 mov         r2, #0x17, 28
  00030	e3a01000	 mov         r1, #0
  00034	e28d0004	 add         r0, sp, #4
  00038	eb000000	 bl          memset

; 79   :     
; 80   :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  0003c	e3a0303c	 mov         r3, #0x3C
  00040	e58d300c	 str         r3, [sp, #0xC]

; 81   :     
; 82   :     /* write out the register address to read from */
; 83   :     trans.mOpCode[0] = I2C_OPCODE_WRITE;

  00044	e3a03002	 mov         r3, #2
  00048	e58d3010	 str         r3, [sp, #0x10]

; 84   :     trans.mBufferOffset[0] = 0;

  0004c	e3a03000	 mov         r3, #0
  00050	e58d3030	 str         r3, [sp, #0x30]

; 85   :     trans.mTransLen[0] = 1;

  00054	e3a03001	 mov         r3, #1
  00058	e58d3050	 str         r3, [sp, #0x50]

; 86   :     trans.mBuffer[0] = MENELAUS_INTSTATUS1_OFFSET;

  0005c	e3a03019	 mov         r3, #0x19
  00060	e5cd3074	 strb        r3, [sp, #0x74]

; 87   :     /* now read the byte at that location */
; 88   :     trans.mOpCode[1] = I2C_OPCODE_READ;

  00064	e3a03001	 mov         r3, #1
  00068	e58d3014	 str         r3, [sp, #0x14]

; 89   :     trans.mBufferOffset[1] = 0;

  0006c	e3a03000	 mov         r3, #0
  00070	e58d3034	 str         r3, [sp, #0x34]

; 90   :     trans.mTransLen[1] = 1;

  00074	e3a03001	 mov         r3, #1
  00078	e58d3054	 str         r3, [sp, #0x54]

; 91   :     /* write out the second address to read from */
; 92   :     trans.mOpCode[2] = I2C_OPCODE_WRITE;

  0007c	e3a03002	 mov         r3, #2
  00080	e58d3018	 str         r3, [sp, #0x18]

; 93   :     trans.mBufferOffset[2] = 1;

  00084	e3a03001	 mov         r3, #1
  00088	e58d3038	 str         r3, [sp, #0x38]

; 94   :     trans.mTransLen[2] = 1;

  0008c	e3a03001	 mov         r3, #1
  00090	e58d3058	 str         r3, [sp, #0x58]

; 95   :     trans.mBuffer[1] = MENELAUS_INTSTATUS2_OFFSET;

  00094	e3a0301a	 mov         r3, #0x1A
  00098	e5cd3075	 strb        r3, [sp, #0x75]

; 96   :     /* now read back the byte at that location */
; 97   :     trans.mOpCode[3] = I2C_OPCODE_READ;

  0009c	e3a03001	 mov         r3, #1
  000a0	e58d301c	 str         r3, [sp, #0x1C]

; 98   :     trans.mBufferOffset[3] = 1;

  000a4	e3a03001	 mov         r3, #1
  000a8	e58d303c	 str         r3, [sp, #0x3C]

; 99   :     trans.mTransLen[3] = 1;

  000ac	e3a03001	 mov         r3, #1
  000b0	e58d305c	 str         r3, [sp, #0x5C]

; 100  : 
; 101  :     I2CTransact(pDevice->hI2C, &trans);

  000b4	e28d1004	 add         r1, sp, #4
  000b8	e59d3000	 ldr         r3, [sp]
  000bc	e2833010	 add         r3, r3, #0x10
  000c0	e5930000	 ldr         r0, [r3]
  000c4	eb000000	 bl          I2CTransact

; 102  : 
; 103  :     if (trans.mErrorCode)

  000c8	e59d3070	 ldr         r3, [sp, #0x70]
  000cc	e3530000	 cmp         r3, #0
  000d0	0a000004	 beq         |$LN1@GetTritonI|

; 104  :         return FALSE;

  000d4	e59d0174	 ldr         r0, [sp, #0x174]
  000d8	eb000000	 bl          __security_check_cookie
  000dc	e3a03000	 mov         r3, #0
  000e0	e58d3178	 str         r3, [sp, #0x178]
  000e4	ea00000b	 b           |$LN2@GetTritonI|
  000e8		 |$LN1@GetTritonI|

; 105  : 
; 106  :     *pStatus = (((UINT16)trans.mBuffer[1])<<8) | trans.mBuffer[0];

  000e8	e5dd3075	 ldrb        r3, [sp, #0x75]
  000ec	e1a02403	 mov         r2, r3, lsl #8
  000f0	e5dd3074	 ldrb        r3, [sp, #0x74]
  000f4	e1823003	 orr         r3, r2, r3
  000f8	e1a02803	 mov         r2, r3, lsl #16
  000fc	e1a02822	 mov         r2, r2, lsr #16
  00100	e59d3188	 ldr         r3, [sp, #0x188]
  00104	e1c320b0	 strh        r2, [r3]

; 107  : 	
; 108  : 	return TRUE;

  00108	e59d0174	 ldr         r0, [sp, #0x174]
  0010c	eb000000	 bl          __security_check_cookie
  00110	e3a03001	 mov         r3, #1
  00114	e58d3178	 str         r3, [sp, #0x178]
  00118		 |$LN2@GetTritonI|

; 109  : }

  00118	e59d0178	 ldr         r0, [sp, #0x178]
  0011c	e28ddf5f	 add         sp, sp, #0x5F, 30
  00120	e89d6000	 ldmia       sp, {sp, lr}
  00124	e12fff1e	 bx          lr
  00128		 |$LN7@GetTritonI|
  00128		 |$LN8@GetTritonI|
  00128	00000000	 DCD         |__security_cookie|
  0012c		 |$M43463|

			 ENDP  ; |GetTritonIrqStatus|

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\inc\i2c.h

  00000			 AREA	 |.pdata|, PDATA
|$T43473| DCD	|$LN5@I2CTransac|
	DCD	0x40001504
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CTransact| PROC

; 138  : {

  00000		 |$LN5@I2CTransac|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43470|

; 139  :     DEVICE_CONTEXT_I2C *pContext = (DEVICE_CONTEXT_I2C *)hContext;

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e58d3000	 str         r3, [sp]

; 140  :     return pContext->ifc.pfnTransact(pContext->ifc.context, pTrans);

  00018	e59d1018	 ldr         r1, [sp, #0x18]
  0001c	e59d3000	 ldr         r3, [sp]
  00020	e5930000	 ldr         r0, [r3]
  00024	e59d3000	 ldr         r3, [sp]
  00028	e2833008	 add         r3, r3, #8
  0002c	e5933000	 ldr         r3, [r3]
  00030	e1a0e00f	 mov         lr, pc
  00034	e12fff13	 bx          r3
  00038	e58d0008	 str         r0, [sp, #8]
  0003c	e59d3008	 ldr         r3, [sp, #8]
  00040	e58d3004	 str         r3, [sp, #4]

; 141  : }

  00044	e59d0004	 ldr         r0, [sp, #4]
  00048	e28dd00c	 add         sp, sp, #0xC
  0004c	e89d6000	 ldmia       sp, {sp, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M43471|

			 ENDP  ; |I2CTransact|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|GetTritonIrqMask|

  00008			 AREA	 |.pdata|, PDATA
|$T43485| DCD	|$LN7@GetTritonI@2|
	DCD	0xc0004904

  00004			 AREA	 |.xdata|, DATA
|$T43481| DCD	0xffffffe4
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\triton\triton.c

  0012c			 AREA	 |.text|, CODE, ARM

  0012c	00000000	 DCD         |__GSHandlerCheck|
  00130	00000000	 DCD         |$T43481|

  00134		 |GetTritonIrqMask| PROC

; 117  : {

  00134		 |$LN7@GetTritonI@2|
  00134	e1a0c00d	 mov         r12, sp
  00138	e92d0003	 stmdb       sp!, {r0, r1}
  0013c	e92d5000	 stmdb       sp!, {r12, lr}
  00140	e24ddd06	 sub         sp, sp, #6, 26
  00144		 |$M43482|
  00144	e59f3108	 ldr         r3, [pc, #0x108]
  00148	e5933000	 ldr         r3, [r3]
  0014c	e58d3174	 str         r3, [sp, #0x174]

; 118  :     Device_t *pDevice = (Device_t*)pContext;

  00150	e59d3188	 ldr         r3, [sp, #0x188]
  00154	e58d3000	 str         r3, [sp]

; 119  :     I2CTRANS trans;
; 120  : 
; 121  :     ZeroMemory(&trans,sizeof(trans));

  00158	e3a02e17	 mov         r2, #0x17, 28
  0015c	e3a01000	 mov         r1, #0
  00160	e28d0004	 add         r0, sp, #4
  00164	eb000000	 bl          memset

; 122  :     
; 123  :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  00168	e3a0303c	 mov         r3, #0x3C
  0016c	e58d300c	 str         r3, [sp, #0xC]

; 124  :     
; 125  :     // write out the register address to read from 
; 126  :     trans.mOpCode[0] = I2C_OPCODE_WRITE;

  00170	e3a03002	 mov         r3, #2
  00174	e58d3010	 str         r3, [sp, #0x10]

; 127  :     trans.mBufferOffset[0] = 0;

  00178	e3a03000	 mov         r3, #0
  0017c	e58d3030	 str         r3, [sp, #0x30]

; 128  :     trans.mTransLen[0] = 1;

  00180	e3a03001	 mov         r3, #1
  00184	e58d3050	 str         r3, [sp, #0x50]

; 129  :     trans.mBuffer[0] = MENELAUS_INTMASK1_OFFSET;

  00188	e3a03017	 mov         r3, #0x17
  0018c	e5cd3074	 strb        r3, [sp, #0x74]

; 130  :     // now read the byte at that location 
; 131  :     trans.mOpCode[1] = I2C_OPCODE_READ;

  00190	e3a03001	 mov         r3, #1
  00194	e58d3014	 str         r3, [sp, #0x14]

; 132  :     trans.mBufferOffset[1] = 0;

  00198	e3a03000	 mov         r3, #0
  0019c	e58d3034	 str         r3, [sp, #0x34]

; 133  :     trans.mTransLen[1] = 1;

  001a0	e3a03001	 mov         r3, #1
  001a4	e58d3054	 str         r3, [sp, #0x54]

; 134  :     // write out the second address to read from 
; 135  :     trans.mOpCode[2] = I2C_OPCODE_WRITE;

  001a8	e3a03002	 mov         r3, #2
  001ac	e58d3018	 str         r3, [sp, #0x18]

; 136  :     trans.mBufferOffset[2] = 1;

  001b0	e3a03001	 mov         r3, #1
  001b4	e58d3038	 str         r3, [sp, #0x38]

; 137  :     trans.mTransLen[2] = 1;

  001b8	e3a03001	 mov         r3, #1
  001bc	e58d3058	 str         r3, [sp, #0x58]

; 138  :     trans.mBuffer[1] = MENELAUS_INTMASK2_OFFSET;

  001c0	e3a03018	 mov         r3, #0x18
  001c4	e5cd3075	 strb        r3, [sp, #0x75]

; 139  :     // now read back the byte at that location 
; 140  :     trans.mOpCode[3] = I2C_OPCODE_READ;

  001c8	e3a03001	 mov         r3, #1
  001cc	e58d301c	 str         r3, [sp, #0x1C]

; 141  :     trans.mBufferOffset[3] = 1;

  001d0	e3a03001	 mov         r3, #1
  001d4	e58d303c	 str         r3, [sp, #0x3C]

; 142  :     trans.mTransLen[3] = 1;

  001d8	e3a03001	 mov         r3, #1
  001dc	e58d305c	 str         r3, [sp, #0x5C]

; 143  : 
; 144  :     I2CTransact(pDevice->hI2C, &trans);

  001e0	e28d1004	 add         r1, sp, #4
  001e4	e59d3000	 ldr         r3, [sp]
  001e8	e2833010	 add         r3, r3, #0x10
  001ec	e5930000	 ldr         r0, [r3]
  001f0	eb000000	 bl          I2CTransact

; 145  : 
; 146  :     *pStatus = (((UINT16)trans.mBuffer[1])<<8) | trans.mBuffer[0];

  001f4	e5dd3075	 ldrb        r3, [sp, #0x75]
  001f8	e1a02403	 mov         r2, r3, lsl #8
  001fc	e5dd3074	 ldrb        r3, [sp, #0x74]
  00200	e1823003	 orr         r3, r2, r3
  00204	e1a02803	 mov         r2, r3, lsl #16
  00208	e1a02822	 mov         r2, r2, lsr #16
  0020c	e59d318c	 ldr         r3, [sp, #0x18C]
  00210	e1c320b0	 strh        r2, [r3]

; 147  : 
; 148  :     return (trans.mErrorCode == 0);

  00214	e59d3070	 ldr         r3, [sp, #0x70]
  00218	e3530000	 cmp         r3, #0
  0021c	1a000002	 bne         |$LN3@GetTritonI@2|
  00220	e3a03001	 mov         r3, #1
  00224	e58d317c	 str         r3, [sp, #0x17C]
  00228	ea000001	 b           |$LN4@GetTritonI@2|
  0022c		 |$LN3@GetTritonI@2|
  0022c	e3a03000	 mov         r3, #0
  00230	e58d317c	 str         r3, [sp, #0x17C]
  00234		 |$LN4@GetTritonI@2|
  00234	e59d0174	 ldr         r0, [sp, #0x174]
  00238	eb000000	 bl          __security_check_cookie
  0023c	e59d317c	 ldr         r3, [sp, #0x17C]
  00240	e58d3178	 str         r3, [sp, #0x178]

; 149  : }

  00244	e59d0178	 ldr         r0, [sp, #0x178]
  00248	e28ddd06	 add         sp, sp, #6, 26
  0024c	e89d6000	 ldmia       sp, {sp, lr}
  00250	e12fff1e	 bx          lr
  00254		 |$LN8@GetTritonI@2|
  00254		 |$LN9@GetTritonI@2|
  00254	00000000	 DCD         |__security_cookie|
  00258		 |$M43483|

			 ENDP  ; |GetTritonIrqMask|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SetTritonIrqMask|

  00010			 AREA	 |.pdata|, PDATA
|$T43497| DCD	|$LN9@SetTritonI|
	DCD	0xc0008104

  00008			 AREA	 |.xdata|, DATA
|$T43493| DCD	0xffffffe4
; Function compile flags: /Odtp

  00258			 AREA	 |.text|, CODE, ARM

  00258	00000000	 DCD         |__GSHandlerCheck|
  0025c	00000000	 DCD         |$T43493|

  00260		 |SetTritonIrqMask| PROC

; 152  : {

  00260		 |$LN9@SetTritonI|
  00260	e1a0c00d	 mov         r12, sp
  00264	e92d0003	 stmdb       sp!, {r0, r1}
  00268	e92d5000	 stmdb       sp!, {r12, lr}
  0026c	e24ddf61	 sub         sp, sp, #0x61, 30
  00270		 |$M43494|
  00270	e59f31e8	 ldr         r3, [pc, #0x1E8]
  00274	e5933000	 ldr         r3, [r3]
  00278	e58d3178	 str         r3, [sp, #0x178]

; 153  :     Device_t *pDevice = (Device_t*)pContext;

  0027c	e59d318c	 ldr         r3, [sp, #0x18C]
  00280	e58d3000	 str         r3, [sp]

; 154  :     I2CTRANS trans;
; 155  :     UCHAR mask;
; 156  : 
; 157  :     ZeroMemory(&trans,sizeof(trans));

  00284	e3a02e17	 mov         r2, #0x17, 28
  00288	e3a01000	 mov         r1, #0
  0028c	e28d0008	 add         r0, sp, #8
  00290	eb000000	 bl          memset

; 158  :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  00294	e3a0303c	 mov         r3, #0x3C
  00298	e58d3010	 str         r3, [sp, #0x10]

; 159  :     
; 160  :     mask = status & 0xff;

  0029c	e28d3c01	 add         r3, sp, #1, 24
  002a0	e1d339b0	 ldrh        r3, [r3, #0x90]
  002a4	e20330ff	 and         r3, r3, #0xFF
  002a8	e20330ff	 and         r3, r3, #0xFF
  002ac	e5cd3004	 strb        r3, [sp, #4]

; 161  :     if (mask) {

  002b0	e5dd3004	 ldrb        r3, [sp, #4]
  002b4	e3530000	 cmp         r3, #0
  002b8	0a000027	 beq         |$LN2@SetTritonI|

; 162  :         // read current mask setting
; 163  :         // write out the register address to read from
; 164  :         trans.mOpCode[0] = I2C_OPCODE_WRITE;

  002bc	e3a03002	 mov         r3, #2
  002c0	e58d3014	 str         r3, [sp, #0x14]

; 165  :         trans.mBufferOffset[0] = 0;

  002c4	e3a03000	 mov         r3, #0
  002c8	e58d3034	 str         r3, [sp, #0x34]

; 166  :         trans.mTransLen[0] = 1;

  002cc	e3a03001	 mov         r3, #1
  002d0	e58d3054	 str         r3, [sp, #0x54]

; 167  :         trans.mBuffer[0] = MENELAUS_INTMASK1_OFFSET;

  002d4	e3a03017	 mov         r3, #0x17
  002d8	e5cd3078	 strb        r3, [sp, #0x78]

; 168  :         // now read the byte at that location 
; 169  :         trans.mOpCode[1] = I2C_OPCODE_READ;

  002dc	e3a03001	 mov         r3, #1
  002e0	e58d3018	 str         r3, [sp, #0x18]

; 170  :         trans.mBufferOffset[1] = 0;

  002e4	e3a03000	 mov         r3, #0
  002e8	e58d3038	 str         r3, [sp, #0x38]

; 171  :         trans.mTransLen[1] = 1;

  002ec	e3a03001	 mov         r3, #1
  002f0	e58d3058	 str         r3, [sp, #0x58]

; 172  : 
; 173  :         I2CTransact(pDevice->hI2C, &trans);

  002f4	e28d1008	 add         r1, sp, #8
  002f8	e59d3000	 ldr         r3, [sp]
  002fc	e2833010	 add         r3, r3, #0x10
  00300	e5930000	 ldr         r0, [r3]
  00304	eb000000	 bl          I2CTransact

; 174  : 
; 175  :         // mask the pending interrupt
; 176  :         mask |= trans.mBuffer[0];

  00308	e5dd3078	 ldrb        r3, [sp, #0x78]
  0030c	e1a02003	 mov         r2, r3
  00310	e5dd3004	 ldrb        r3, [sp, #4]
  00314	e1833002	 orr         r3, r3, r2
  00318	e20330ff	 and         r3, r3, #0xFF
  0031c	e5cd3004	 strb        r3, [sp, #4]

; 177  :         trans.mOpCode[0] = I2C_OPCODE_WRITE;

  00320	e3a03002	 mov         r3, #2
  00324	e58d3014	 str         r3, [sp, #0x14]

; 178  :         trans.mBufferOffset[0] = 0;

  00328	e3a03000	 mov         r3, #0
  0032c	e58d3034	 str         r3, [sp, #0x34]

; 179  :         trans.mTransLen[0] = 2;

  00330	e3a03002	 mov         r3, #2
  00334	e58d3054	 str         r3, [sp, #0x54]

; 180  :         trans.mBuffer[0] = MENELAUS_INTMASK1_OFFSET;

  00338	e3a03017	 mov         r3, #0x17
  0033c	e5cd3078	 strb        r3, [sp, #0x78]

; 181  :         trans.mBuffer[1] = mask;

  00340	e5dd3004	 ldrb        r3, [sp, #4]
  00344	e5cd3079	 strb        r3, [sp, #0x79]

; 182  : 
; 183  :         I2CTransact(pDevice->hI2C, &trans);

  00348	e28d1008	 add         r1, sp, #8
  0034c	e59d3000	 ldr         r3, [sp]
  00350	e2833010	 add         r3, r3, #0x10
  00354	e5930000	 ldr         r0, [r3]
  00358	eb000000	 bl          I2CTransact
  0035c		 |$LN2@SetTritonI|

; 184  :     }
; 185  : 
; 186  :     mask = (status >> 8) & 0xff;

  0035c	e28d3c01	 add         r3, sp, #1, 24
  00360	e1d339b0	 ldrh        r3, [r3, #0x90]
  00364	e1a03443	 mov         r3, r3, asr #8
  00368	e20330ff	 and         r3, r3, #0xFF
  0036c	e20330ff	 and         r3, r3, #0xFF
  00370	e5cd3004	 strb        r3, [sp, #4]

; 187  :     if (mask) {

  00374	e5dd3004	 ldrb        r3, [sp, #4]
  00378	e3530000	 cmp         r3, #0
  0037c	0a000027	 beq         |$LN1@SetTritonI|

; 188  :         // read current mask setting
; 189  :         // write out the register address to read from
; 190  :         trans.mOpCode[0] = I2C_OPCODE_WRITE;

  00380	e3a03002	 mov         r3, #2
  00384	e58d3014	 str         r3, [sp, #0x14]

; 191  :         trans.mBufferOffset[0] = 0;

  00388	e3a03000	 mov         r3, #0
  0038c	e58d3034	 str         r3, [sp, #0x34]

; 192  :         trans.mTransLen[0] = 1;

  00390	e3a03001	 mov         r3, #1
  00394	e58d3054	 str         r3, [sp, #0x54]

; 193  :         trans.mBuffer[0] = MENELAUS_INTMASK2_OFFSET;

  00398	e3a03018	 mov         r3, #0x18
  0039c	e5cd3078	 strb        r3, [sp, #0x78]

; 194  :         // now read the byte at that location
; 195  :         trans.mOpCode[1] = I2C_OPCODE_READ;

  003a0	e3a03001	 mov         r3, #1
  003a4	e58d3018	 str         r3, [sp, #0x18]

; 196  :         trans.mBufferOffset[1] = 0;

  003a8	e3a03000	 mov         r3, #0
  003ac	e58d3038	 str         r3, [sp, #0x38]

; 197  :         trans.mTransLen[1] = 1;

  003b0	e3a03001	 mov         r3, #1
  003b4	e58d3058	 str         r3, [sp, #0x58]

; 198  : 
; 199  :         I2CTransact(pDevice->hI2C, &trans);

  003b8	e28d1008	 add         r1, sp, #8
  003bc	e59d3000	 ldr         r3, [sp]
  003c0	e2833010	 add         r3, r3, #0x10
  003c4	e5930000	 ldr         r0, [r3]
  003c8	eb000000	 bl          I2CTransact

; 200  : 
; 201  :         // mask the pending interrupt
; 202  :         mask |= trans.mBuffer[0];

  003cc	e5dd3078	 ldrb        r3, [sp, #0x78]
  003d0	e1a02003	 mov         r2, r3
  003d4	e5dd3004	 ldrb        r3, [sp, #4]
  003d8	e1833002	 orr         r3, r3, r2
  003dc	e20330ff	 and         r3, r3, #0xFF
  003e0	e5cd3004	 strb        r3, [sp, #4]

; 203  :         trans.mOpCode[0] = I2C_OPCODE_WRITE;

  003e4	e3a03002	 mov         r3, #2
  003e8	e58d3014	 str         r3, [sp, #0x14]

; 204  :         trans.mBufferOffset[0] = 0;

  003ec	e3a03000	 mov         r3, #0
  003f0	e58d3034	 str         r3, [sp, #0x34]

; 205  :         trans.mTransLen[0] = 2;

  003f4	e3a03002	 mov         r3, #2
  003f8	e58d3054	 str         r3, [sp, #0x54]

; 206  :         trans.mBuffer[0] = MENELAUS_INTMASK2_OFFSET;

  003fc	e3a03018	 mov         r3, #0x18
  00400	e5cd3078	 strb        r3, [sp, #0x78]

; 207  :         trans.mBuffer[1] = mask;

  00404	e5dd3004	 ldrb        r3, [sp, #4]
  00408	e5cd3079	 strb        r3, [sp, #0x79]

; 208  : 
; 209  :         I2CTransact(pDevice->hI2C, &trans);

  0040c	e28d1008	 add         r1, sp, #8
  00410	e59d3000	 ldr         r3, [sp]
  00414	e2833010	 add         r3, r3, #0x10
  00418	e5930000	 ldr         r0, [r3]
  0041c	eb000000	 bl          I2CTransact
  00420		 |$LN1@SetTritonI|

; 210  :     }
; 211  : 
; 212  :     return (trans.mErrorCode == 0);

  00420	e59d3074	 ldr         r3, [sp, #0x74]
  00424	e3530000	 cmp         r3, #0
  00428	1a000002	 bne         |$LN5@SetTritonI|
  0042c	e3a03001	 mov         r3, #1
  00430	e58d3180	 str         r3, [sp, #0x180]
  00434	ea000001	 b           |$LN6@SetTritonI|
  00438		 |$LN5@SetTritonI|
  00438	e3a03000	 mov         r3, #0
  0043c	e58d3180	 str         r3, [sp, #0x180]
  00440		 |$LN6@SetTritonI|
  00440	e59d0178	 ldr         r0, [sp, #0x178]
  00444	eb000000	 bl          __security_check_cookie
  00448	e59d3180	 ldr         r3, [sp, #0x180]
  0044c	e58d317c	 str         r3, [sp, #0x17C]

; 213  : }

  00450	e59d017c	 ldr         r0, [sp, #0x17C]
  00454	e28ddf61	 add         sp, sp, #0x61, 30
  00458	e89d6000	 ldmia       sp, {sp, lr}
  0045c	e12fff1e	 bx          lr
  00460		 |$LN10@SetTritonI|
  00460		 |$LN11@SetTritonI|
  00460	00000000	 DCD         |__security_cookie|
  00464		 |$M43495|

			 ENDP  ; |SetTritonIrqMask|

	EXPORT	|InitializeTritonInterrupts|

  00018			 AREA	 |.pdata|, PDATA
|$T43505| DCD	|$LN5@Initialize|
	DCD	0x40000f04
; Function compile flags: /Odtp

  00464			 AREA	 |.text|, CODE, ARM

  00464		 |InitializeTritonInterrupts| PROC

; 221  : {

  00464		 |$LN5@Initialize|
  00464	e1a0c00d	 mov         r12, sp
  00468	e92d0001	 stmdb       sp!, {r0}
  0046c	e92d5000	 stmdb       sp!, {r12, lr}
  00470	e24dd008	 sub         sp, sp, #8
  00474		 |$M43502|

; 222  :     // Disable all interrupts
; 223  :     return SetTritonIrqMask(pDevice, 0xffff);

  00474	e3a01cff	 mov         r1, #0xFF, 24
  00478	e38110ff	 orr         r1, r1, #0xFF
  0047c	e59d0010	 ldr         r0, [sp, #0x10]
  00480	eb000000	 bl          SetTritonIrqMask
  00484	e58d0004	 str         r0, [sp, #4]
  00488	e59d3004	 ldr         r3, [sp, #4]
  0048c	e58d3000	 str         r3, [sp]

; 224  : }

  00490	e59d0000	 ldr         r0, [sp]
  00494	e28dd008	 add         sp, sp, #8
  00498	e89d6000	 ldmia       sp, {sp, lr}
  0049c	e12fff1e	 bx          lr
  004a0		 |$M43503|

			 ENDP  ; |InitializeTritonInterrupts|

	EXPORT	|??_C@_1CI@EOEIPNHJ@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|TWL_Deinit|
	EXPORT	|??_C@_1GE@PGNGFJMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@DGNECLFG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NGHKLMFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@NGAJLBPD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAT?$AAr?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@MCODCMNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAI?$AA2?$AAC?$AA?5@| [ DATA ] ; `string'
	EXPORT	|I2CSetSlaveAddress|
	EXPORT	|??_C@_1FM@LOHDLJHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@| [ DATA ] ; `string'
	EXPORT	|I2COpen|
	EXPORT	|??_C@_1M@LCEEOPDH@?$AAI?$AA2?$AAC?$AA1?$AA?3?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@DLLOHCNE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAW?$AAL@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@MFEKFGBA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@DEHICOJK@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|TWL_Init|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|KernelIoControl|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|LocalAlloc|
	IMPORT	|NKDbgPrintfW|

  00020			 AREA	 |.pdata|, PDATA
|$T43535| DCD	|$LN35@TWL_Init|
	DCD	0x40012304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@EOEIPNHJ@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@PGNGFJMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@DGNECLFG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NGHKLMFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@NGAJLBPD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAT?$AAr?$AAi?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "T", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@MCODCMNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAI?$AA2?$AAC?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C"
	DCB	0x0, " ", 0x0, "b", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "s"
	DCB	0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@LOHDLJHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LCEEOPDH@?$AAI?$AA2?$AAC?$AA1?$AA?3?$AA?$AA@| DCB "I", 0x0, "2", 0x0
	DCB	"C", 0x0, "1", 0x0, ":", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@DLLOHCNE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAW?$AAL@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "T", 0x0, "W"
	DCB	0x0, "L", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@MFEKFGBA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "T", 0x0, "W", 0x0, "L", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@DEHICOJK@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  004a0			 AREA	 |.text|, CODE, ARM

  004a0		 |TWL_Init| PROC

; 237  : {

  004a0		 |$LN35@TWL_Init|
  004a0	e1a0c00d	 mov         r12, sp
  004a4	e92d0003	 stmdb       sp!, {r0, r1}
  004a8	e92d5000	 stmdb       sp!, {r12, lr}
  004ac	e24dd070	 sub         sp, sp, #0x70
  004b0		 |$M43532|

; 238  :     DWORD rc = (DWORD)NULL;

  004b0	e3a03000	 mov         r3, #0
  004b4	e58d300c	 str         r3, [sp, #0xC]

; 239  :     Device_t *pDevice = NULL;

  004b8	e3a03000	 mov         r3, #0
  004bc	e58d3008	 str         r3, [sp, #8]

; 240  : 
; 241  :     DEBUGMSG(ZONE_FUNCTION, (
; 242  :         L"+TWL_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 243  :         ));

  004c0	e59f3428	 ldr         r3, [pc, #0x428]
  004c4	e5933440	 ldr         r3, [r3, #0x440]
  004c8	e3130004	 tst         r3, #4
  004cc	0a000006	 beq         |$LN13@TWL_Init|
  004d0	e59d207c	 ldr         r2, [sp, #0x7C]
  004d4	e59d1078	 ldr         r1, [sp, #0x78]
  004d8	e59f0448	 ldr         r0, [pc, #0x448]
  004dc	eb000000	 bl          NKDbgPrintfW
  004e0	e3a03001	 mov         r3, #1
  004e4	e58d3024	 str         r3, [sp, #0x24]
  004e8	ea000001	 b           |$LN14@TWL_Init|
  004ec		 |$LN13@TWL_Init|
  004ec	e3a03000	 mov         r3, #0
  004f0	e58d3024	 str         r3, [sp, #0x24]
  004f4		 |$LN14@TWL_Init|

; 244  : 
; 245  :     // Create device structure
; 246  :     pDevice = (Device_t *)LocalAlloc(LPTR, sizeof(Device_t));

  004f4	e3a01080	 mov         r1, #0x80
  004f8	e3a00040	 mov         r0, #0x40
  004fc	eb000000	 bl          LocalAlloc
  00500	e58d0028	 str         r0, [sp, #0x28]
  00504	e59d3028	 ldr         r3, [sp, #0x28]
  00508	e58d3008	 str         r3, [sp, #8]

; 247  :     if (pDevice == NULL)

  0050c	e59d3008	 ldr         r3, [sp, #8]
  00510	e3530000	 cmp         r3, #0
  00514	1a00000b	 bne         |$LN10@TWL_Init|

; 248  :         {
; 249  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 250  :             L"Failed allocate TWL controller structure\r\n"
; 251  :             ));

  00518	e59f33d0	 ldr         r3, [pc, #0x3D0]
  0051c	e5933440	 ldr         r3, [r3, #0x440]
  00520	e3130001	 tst         r3, #1
  00524	0a000004	 beq         |$LN15@TWL_Init|
  00528	e59f03f4	 ldr         r0, [pc, #0x3F4]
  0052c	eb000000	 bl          NKDbgPrintfW
  00530	e3a03001	 mov         r3, #1
  00534	e58d302c	 str         r3, [sp, #0x2C]
  00538	ea000001	 b           |$LN16@TWL_Init|
  0053c		 |$LN15@TWL_Init|
  0053c	e3a03000	 mov         r3, #0
  00540	e58d302c	 str         r3, [sp, #0x2C]
  00544		 |$LN16@TWL_Init|

; 252  :         goto cleanUp;

  00544	ea0000d1	 b           |$cleanUp$43064|
  00548		 |$LN10@TWL_Init|

; 253  :         }
; 254  : 
; 255  :     // Set cookie
; 256  :     pDevice->cookie = TWL_DEVICE_COOKIE;

  00548	e59d2008	 ldr         r2, [sp, #8]
  0054c	e59f33cc	 ldr         r3, [pc, #0x3CC]
  00550	e5823000	 str         r3, [r2]

; 257  : 
; 258  :     // Initalize critical section
; 259  :     InitializeCriticalSection(&pDevice->cs);

  00554	e59d3008	 ldr         r3, [sp, #8]
  00558	e2830018	 add         r0, r3, #0x18
  0055c	eb000000	 bl          InitializeCriticalSection

; 260  : 
; 261  :     // Read device parameters
; 262  :     if (GetDeviceRegistryParams(
; 263  :             szContext, pDevice, dimof(s_deviceRegParams), s_deviceRegParams
; 264  :             ) != ERROR_SUCCESS)

  00560	e59f33b4	 ldr         r3, [pc, #0x3B4]
  00564	e3a02003	 mov         r2, #3
  00568	e59d1008	 ldr         r1, [sp, #8]
  0056c	e59d0078	 ldr         r0, [sp, #0x78]
  00570	eb000000	 bl          GetDeviceRegistryParams
  00574	e58d0030	 str         r0, [sp, #0x30]
  00578	e59d3030	 ldr         r3, [sp, #0x30]
  0057c	e3530000	 cmp         r3, #0
  00580	0a00000b	 beq         |$LN9@TWL_Init|

; 265  :         {
; 266  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 267  :             L"Failed read TWL driver registry parameters\r\n"
; 268  :             ));

  00584	e59f3364	 ldr         r3, [pc, #0x364]
  00588	e5933440	 ldr         r3, [r3, #0x440]
  0058c	e3130001	 tst         r3, #1
  00590	0a000004	 beq         |$LN17@TWL_Init|
  00594	e59f037c	 ldr         r0, [pc, #0x37C]
  00598	eb000000	 bl          NKDbgPrintfW
  0059c	e3a03001	 mov         r3, #1
  005a0	e58d3034	 str         r3, [sp, #0x34]
  005a4	ea000001	 b           |$LN18@TWL_Init|
  005a8		 |$LN17@TWL_Init|
  005a8	e3a03000	 mov         r3, #0
  005ac	e58d3034	 str         r3, [sp, #0x34]
  005b0		 |$LN18@TWL_Init|

; 269  :         goto cleanUp;

  005b0	ea0000b6	 b           |$cleanUp$43064|
  005b4		 |$LN9@TWL_Init|

; 270  :         }
; 271  : 
; 272  :     // Open parent bus
; 273  :     pDevice->hI2C = I2COpen(I2C_DEVICE_NAME);

  005b4	e59f0358	 ldr         r0, [pc, #0x358]
  005b8	eb000000	 bl          I2COpen
  005bc	e58d0038	 str         r0, [sp, #0x38]
  005c0	e59d3008	 ldr         r3, [sp, #8]
  005c4	e2832010	 add         r2, r3, #0x10
  005c8	e59d3038	 ldr         r3, [sp, #0x38]
  005cc	e5823000	 str         r3, [r2]

; 274  :     if (pDevice->hI2C == NULL) {

  005d0	e59d3008	 ldr         r3, [sp, #8]
  005d4	e2833010	 add         r3, r3, #0x10
  005d8	e5933000	 ldr         r3, [r3]
  005dc	e3530000	 cmp         r3, #0
  005e0	1a00000b	 bne         |$LN8@TWL_Init|

; 275  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 276  :             L"Failed open I2C bus driver\r\n"
; 277  :             ));

  005e4	e59f3304	 ldr         r3, [pc, #0x304]
  005e8	e5933440	 ldr         r3, [r3, #0x440]
  005ec	e3130001	 tst         r3, #1
  005f0	0a000004	 beq         |$LN19@TWL_Init|
  005f4	e59f0314	 ldr         r0, [pc, #0x314]
  005f8	eb000000	 bl          NKDbgPrintfW
  005fc	e3a03001	 mov         r3, #1
  00600	e58d303c	 str         r3, [sp, #0x3C]
  00604	ea000001	 b           |$LN20@TWL_Init|
  00608		 |$LN19@TWL_Init|
  00608	e3a03000	 mov         r3, #0
  0060c	e58d303c	 str         r3, [sp, #0x3C]
  00610		 |$LN20@TWL_Init|

; 278  :         goto cleanUp;

  00610	ea00009e	 b           |$cleanUp$43064|
  00614		 |$LN8@TWL_Init|

; 279  :     }
; 280  : 
; 281  :     // Set Triton I2C address
; 282  :     if (!I2CSetSlaveAddress(pDevice->hI2C, 7, I2C_MENELAUS_ADDRESS)) {

  00614	e3a02072	 mov         r2, #0x72
  00618	e3a01007	 mov         r1, #7
  0061c	e59d3008	 ldr         r3, [sp, #8]
  00620	e2833010	 add         r3, r3, #0x10
  00624	e5930000	 ldr         r0, [r3]
  00628	eb000000	 bl          I2CSetSlaveAddress
  0062c	e58d0040	 str         r0, [sp, #0x40]
  00630	e59d3040	 ldr         r3, [sp, #0x40]
  00634	e3530000	 cmp         r3, #0
  00638	1a00000b	 bne         |$LN7@TWL_Init|

; 283  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 284  :             L"Failed set I2C bus slave address\r\n"
; 285  :             ));

  0063c	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00640	e5933440	 ldr         r3, [r3, #0x440]
  00644	e3130001	 tst         r3, #1
  00648	0a000004	 beq         |$LN21@TWL_Init|
  0064c	e59f02b8	 ldr         r0, [pc, #0x2B8]
  00650	eb000000	 bl          NKDbgPrintfW
  00654	e3a03001	 mov         r3, #1
  00658	e58d3044	 str         r3, [sp, #0x44]
  0065c	ea000001	 b           |$LN22@TWL_Init|
  00660		 |$LN21@TWL_Init|
  00660	e3a03000	 mov         r3, #0
  00664	e58d3044	 str         r3, [sp, #0x44]
  00668		 |$LN22@TWL_Init|

; 286  :         goto cleanUp;

  00668	ea000088	 b           |$cleanUp$43064|
  0066c		 |$LN7@TWL_Init|

; 287  :     }
; 288  : 
; 289  :     // Disable all interrupts
; 290  :     if (InitializeTritonInterrupts(pDevice) == FALSE) goto cleanUp;

  0066c	e59d0008	 ldr         r0, [sp, #8]
  00670	eb000000	 bl          InitializeTritonInterrupts
  00674	e58d0048	 str         r0, [sp, #0x48]
  00678	e59d3048	 ldr         r3, [sp, #0x48]
  0067c	e3530000	 cmp         r3, #0
  00680	1a000000	 bne         |$LN6@TWL_Init|
  00684	ea000081	 b           |$cleanUp$43064|
  00688		 |$LN6@TWL_Init|

; 291  : 
; 292  :     pDevice->irq = IRQ_SYS_NIRQ;

  00688	e59d3008	 ldr         r3, [sp, #8]
  0068c	e2832004	 add         r2, r3, #4
  00690	e3a03007	 mov         r3, #7
  00694	e5823000	 str         r3, [r2]

; 293  :     // Map interrupt
; 294  :     if (!KernelIoControl(
; 295  :             IOCTL_HAL_REQUEST_SYSINTR, &pDevice->irq, sizeof(pDevice->irq),
; 296  :             &pDevice->sysIntr, sizeof(pDevice->sysIntr), NULL) ) {

  00698	e3a03000	 mov         r3, #0
  0069c	e58d3004	 str         r3, [sp, #4]
  006a0	e3a03004	 mov         r3, #4
  006a4	e58d3000	 str         r3, [sp]
  006a8	e59d3008	 ldr         r3, [sp, #8]
  006ac	e283302c	 add         r3, r3, #0x2C
  006b0	e3a02004	 mov         r2, #4
  006b4	e59d1008	 ldr         r1, [sp, #8]
  006b8	e2811004	 add         r1, r1, #4
  006bc	e59f0244	 ldr         r0, [pc, #0x244]
  006c0	eb000000	 bl          KernelIoControl
  006c4	e58d004c	 str         r0, [sp, #0x4C]
  006c8	e59d304c	 ldr         r3, [sp, #0x4C]
  006cc	e3530000	 cmp         r3, #0
  006d0	1a00000e	 bne         |$LN5@TWL_Init|

; 297  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 298  :             L"Failed map Triton interrupt (%d)\r\n", pDevice->irq
; 299  :             ));

  006d4	e59f3214	 ldr         r3, [pc, #0x214]
  006d8	e5933440	 ldr         r3, [r3, #0x440]
  006dc	e3130001	 tst         r3, #1
  006e0	0a000007	 beq         |$LN23@TWL_Init|
  006e4	e59d3008	 ldr         r3, [sp, #8]
  006e8	e2833004	 add         r3, r3, #4
  006ec	e5931000	 ldr         r1, [r3]
  006f0	e59f020c	 ldr         r0, [pc, #0x20C]
  006f4	eb000000	 bl          NKDbgPrintfW
  006f8	e3a03001	 mov         r3, #1
  006fc	e58d3050	 str         r3, [sp, #0x50]
  00700	ea000001	 b           |$LN24@TWL_Init|
  00704		 |$LN23@TWL_Init|
  00704	e3a03000	 mov         r3, #0
  00708	e58d3050	 str         r3, [sp, #0x50]
  0070c		 |$LN24@TWL_Init|

; 300  :         goto cleanUp;

  0070c	ea00005f	 b           |$cleanUp$43064|
  00710		 |$LN5@TWL_Init|

; 301  :     }
; 302  : 
; 303  :     // Create interrupt event
; 304  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00710	e3a03000	 mov         r3, #0
  00714	e3a02000	 mov         r2, #0
  00718	e3a01000	 mov         r1, #0
  0071c	e3a00000	 mov         r0, #0
  00720	eb000000	 bl          CreateEventW
  00724	e58d0054	 str         r0, [sp, #0x54]
  00728	e59d3008	 ldr         r3, [sp, #8]
  0072c	e2832030	 add         r2, r3, #0x30
  00730	e59d3054	 ldr         r3, [sp, #0x54]
  00734	e5823000	 str         r3, [r2]

; 305  :     if (pDevice->hIntrEvent == NULL) {

  00738	e59d3008	 ldr         r3, [sp, #8]
  0073c	e2833030	 add         r3, r3, #0x30
  00740	e5933000	 ldr         r3, [r3]
  00744	e3530000	 cmp         r3, #0
  00748	1a00000b	 bne         |$LN4@TWL_Init|

; 306  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 307  :             L"Failed create interrupt event\r\n"
; 308  :             ));

  0074c	e59f319c	 ldr         r3, [pc, #0x19C]
  00750	e5933440	 ldr         r3, [r3, #0x440]
  00754	e3130001	 tst         r3, #1
  00758	0a000004	 beq         |$LN25@TWL_Init|
  0075c	e59f019c	 ldr         r0, [pc, #0x19C]
  00760	eb000000	 bl          NKDbgPrintfW
  00764	e3a03001	 mov         r3, #1
  00768	e58d3058	 str         r3, [sp, #0x58]
  0076c	ea000001	 b           |$LN26@TWL_Init|
  00770		 |$LN25@TWL_Init|
  00770	e3a03000	 mov         r3, #0
  00774	e58d3058	 str         r3, [sp, #0x58]
  00778		 |$LN26@TWL_Init|

; 309  :         goto cleanUp;

  00778	ea000044	 b           |$cleanUp$43064|
  0077c		 |$LN4@TWL_Init|

; 310  :     }
; 311  : 
; 312  :     // Initialize interrupt
; 313  :     if (!InterruptInitialize(pDevice->sysIntr, pDevice->hIntrEvent, NULL, 0)) {

  0077c	e3a03000	 mov         r3, #0
  00780	e3a02000	 mov         r2, #0
  00784	e59d1008	 ldr         r1, [sp, #8]
  00788	e2811030	 add         r1, r1, #0x30
  0078c	e5911000	 ldr         r1, [r1]
  00790	e59d0008	 ldr         r0, [sp, #8]
  00794	e280002c	 add         r0, r0, #0x2C
  00798	e5900000	 ldr         r0, [r0]
  0079c	eb000000	 bl          InterruptInitialize
  007a0	e58d005c	 str         r0, [sp, #0x5C]
  007a4	e59d305c	 ldr         r3, [sp, #0x5C]
  007a8	e3530000	 cmp         r3, #0
  007ac	1a00000b	 bne         |$LN3@TWL_Init|

; 314  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: TWL_Init: "
; 315  :             L"InterruptInitialize failed\r\n"
; 316  :             ));

  007b0	e59f3138	 ldr         r3, [pc, #0x138]
  007b4	e5933440	 ldr         r3, [r3, #0x440]
  007b8	e3130001	 tst         r3, #1
  007bc	0a000004	 beq         |$LN27@TWL_Init|
  007c0	e59f0134	 ldr         r0, [pc, #0x134]
  007c4	eb000000	 bl          NKDbgPrintfW
  007c8	e3a03001	 mov         r3, #1
  007cc	e58d3060	 str         r3, [sp, #0x60]
  007d0	ea000001	 b           |$LN28@TWL_Init|
  007d4		 |$LN27@TWL_Init|
  007d4	e3a03000	 mov         r3, #0
  007d8	e58d3060	 str         r3, [sp, #0x60]
  007dc		 |$LN28@TWL_Init|

; 317  :         goto cleanUp;

  007dc	ea00002b	 b           |$cleanUp$43064|
  007e0		 |$LN3@TWL_Init|

; 318  :     }
; 319  : 
; 320  :     // Start interrupt service thread
; 321  :     pDevice->intrThreadExit = FALSE;

  007e0	e59d3008	 ldr         r3, [sp, #8]
  007e4	e2832038	 add         r2, r3, #0x38
  007e8	e3a03000	 mov         r3, #0
  007ec	e5823000	 str         r3, [r2]

; 322  :     pDevice->hIntrThread = CreateThread(NULL, 0, TWL_IntrThread, pDevice, 0,NULL);

  007f0	e3a03000	 mov         r3, #0
  007f4	e58d3004	 str         r3, [sp, #4]
  007f8	e3a03000	 mov         r3, #0
  007fc	e58d3000	 str         r3, [sp]
  00800	e59d3008	 ldr         r3, [sp, #8]
  00804	e59f20ec	 ldr         r2, [pc, #0xEC]
  00808	e3a01000	 mov         r1, #0
  0080c	e3a00000	 mov         r0, #0
  00810	eb000000	 bl          CreateThread
  00814	e58d0064	 str         r0, [sp, #0x64]
  00818	e59d3008	 ldr         r3, [sp, #8]
  0081c	e2832034	 add         r2, r3, #0x34
  00820	e59d3064	 ldr         r3, [sp, #0x64]
  00824	e5823000	 str         r3, [r2]

; 323  :     if (!pDevice->hIntrThread) {

  00828	e59d3008	 ldr         r3, [sp, #8]
  0082c	e2833034	 add         r3, r3, #0x34
  00830	e5933000	 ldr         r3, [r3]
  00834	e3530000	 cmp         r3, #0
  00838	1a00000b	 bne         |$LN2@TWL_Init|

; 324  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: TWL_Init: "
; 325  :             L"Failed create interrupt thread\r\n"
; 326  :             ));

  0083c	e59f30ac	 ldr         r3, [pc, #0xAC]
  00840	e5933440	 ldr         r3, [r3, #0x440]
  00844	e3130001	 tst         r3, #1
  00848	0a000004	 beq         |$LN29@TWL_Init|
  0084c	e59f00a0	 ldr         r0, [pc, #0xA0]
  00850	eb000000	 bl          NKDbgPrintfW
  00854	e3a03001	 mov         r3, #1
  00858	e58d3068	 str         r3, [sp, #0x68]
  0085c	ea000001	 b           |$LN30@TWL_Init|
  00860		 |$LN29@TWL_Init|
  00860	e3a03000	 mov         r3, #0
  00864	e58d3068	 str         r3, [sp, #0x68]
  00868		 |$LN30@TWL_Init|

; 327  :         goto cleanUp;

  00868	ea000008	 b           |$cleanUp$43064|
  0086c		 |$LN2@TWL_Init|

; 328  :     }
; 329  : 
; 330  :     // Set thread priority
; 331  :     CeSetThreadPriority(pDevice->hIntrThread, pDevice->priority256);

  0086c	e59d3008	 ldr         r3, [sp, #8]
  00870	e283300c	 add         r3, r3, #0xC
  00874	e5931000	 ldr         r1, [r3]
  00878	e59d3008	 ldr         r3, [sp, #8]
  0087c	e2833034	 add         r3, r3, #0x34
  00880	e5930000	 ldr         r0, [r3]
  00884	eb000000	 bl          CeSetThreadPriority

; 332  : 
; 333  :     // Return non-null value
; 334  :     rc = (DWORD)pDevice;

  00888	e59d3008	 ldr         r3, [sp, #8]
  0088c	e58d300c	 str         r3, [sp, #0xC]
  00890		 |$cleanUp$43064|

; 335  :     
; 336  : cleanUp:
; 337  :     if (rc == 0) TWL_Deinit((DWORD)pDevice);

  00890	e59d300c	 ldr         r3, [sp, #0xC]
  00894	e3530000	 cmp         r3, #0
  00898	1a000001	 bne         |$LN1@TWL_Init|
  0089c	e59d0008	 ldr         r0, [sp, #8]
  008a0	eb000000	 bl          TWL_Deinit
  008a4		 |$LN1@TWL_Init|

; 338  :     DEBUGMSG(ZONE_FUNCTION, (L"-TWL_Init(rc = %d\r\n", rc));

  008a4	e59f3044	 ldr         r3, [pc, #0x44]
  008a8	e5933440	 ldr         r3, [r3, #0x440]
  008ac	e3130004	 tst         r3, #4
  008b0	0a000005	 beq         |$LN31@TWL_Init|
  008b4	e59d100c	 ldr         r1, [sp, #0xC]
  008b8	e59f002c	 ldr         r0, [pc, #0x2C]
  008bc	eb000000	 bl          NKDbgPrintfW
  008c0	e3a03001	 mov         r3, #1
  008c4	e58d306c	 str         r3, [sp, #0x6C]
  008c8	ea000001	 b           |$LN32@TWL_Init|
  008cc		 |$LN31@TWL_Init|
  008cc	e3a03000	 mov         r3, #0
  008d0	e58d306c	 str         r3, [sp, #0x6C]
  008d4		 |$LN32@TWL_Init|

; 339  :     return rc;

  008d4	e59d300c	 ldr         r3, [sp, #0xC]
  008d8	e58d3020	 str         r3, [sp, #0x20]

; 340  : }

  008dc	e59d0020	 ldr         r0, [sp, #0x20]
  008e0	e28dd070	 add         sp, sp, #0x70
  008e4	e89d6000	 ldmia       sp, {sp, lr}
  008e8	e12fff1e	 bx          lr
  008ec		 |$LN36@TWL_Init|
  008ec		 |$LN37@TWL_Init|
  008ec	00000000	 DCD         |??_C@_1CI@EOEIPNHJ@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  008f0		 |$LN38@TWL_Init|
  008f0	00000000	 DCD         |dpCurSettings|
  008f4		 |$LN39@TWL_Init|
  008f4	00000000	 DCD         |??_C@_1GE@PGNGFJMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  008f8		 |$LN40@TWL_Init|
  008f8	00000000	 DCD         |TWL_IntrThread|
  008fc		 |$LN41@TWL_Init|
  008fc	00000000	 DCD         |??_C@_1FM@DGNECLFG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@|
  00900		 |$LN42@TWL_Init|
  00900	00000000	 DCD         |??_C@_1GC@NGHKLMFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  00904		 |$LN43@TWL_Init|
  00904	00000000	 DCD         |??_C@_1GI@NGAJLBPD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAT?$AAr?$AAi?$AAt@|
  00908		 |$LN44@TWL_Init|
  00908	01010098	 DCD         0x1010098
  0090c		 |$LN45@TWL_Init|
  0090c	00000000	 DCD         |??_C@_1GI@MCODCMNB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAs?$AAe?$AAt?$AA?5?$AAI?$AA2?$AAC?$AA?5@|
  00910		 |$LN46@TWL_Init|
  00910	00000000	 DCD         |??_C@_1FM@LOHDLJHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@|
  00914		 |$LN47@TWL_Init|
  00914	00000000	 DCD         |??_C@_1M@LCEEOPDH@?$AAI?$AA2?$AAC?$AA1?$AA?3?$AA?$AA@|
  00918		 |$LN48@TWL_Init|
  00918	00000000	 DCD         |??_C@_1HM@DLLOHCNE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAW?$AAL@|
  0091c		 |$LN49@TWL_Init|
  0091c	00000000	 DCD         |s_deviceRegParams|
  00920		 |$LN50@TWL_Init|
  00920	74776c44	 DCD         0x74776c44
  00924		 |$LN51@TWL_Init|
  00924	00000000	 DCD         |??_C@_1HI@MFEKFGBA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00928		 |$LN52@TWL_Init|
  00928	00000000	 DCD         |??_C@_1DA@DEHICOJK@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0092c		 |$M43533|

			 ENDP  ; |TWL_Init|

	IMPORT	|LocalFree|
	IMPORT	|DeviceIoControl|
	IMPORT	|CloseHandle|
	IMPORT	|CreateFileW|
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\inc\i2c.h

  00000			 AREA	 |.pdata|, PDATA
|$T43565| DCD	|$LN8@I2COpen|
	DCD	0x40004804
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2COpen| PROC

; 86   : {

  00000		 |$LN8@I2COpen|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd044	 sub         sp, sp, #0x44
  00010		 |$M43562|

; 87   :     HANDLE hDevice;
; 88   :     DEVICE_CONTEXT_I2C *pContext = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3014	 str         r3, [sp, #0x14]

; 89   : 
; 90   :     hDevice = CreateFile(devicename, 0, 0, NULL, 0, 0, NULL);

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]
  00020	e3a03000	 mov         r3, #0
  00024	e58d3004	 str         r3, [sp, #4]
  00028	e3a03000	 mov         r3, #0
  0002c	e58d3000	 str         r3, [sp]
  00030	e3a03000	 mov         r3, #0
  00034	e3a02000	 mov         r2, #0
  00038	e3a01000	 mov         r1, #0
  0003c	e59d004c	 ldr         r0, [sp, #0x4C]
  00040	eb000000	 bl          CreateFileW
  00044	e58d0038	 str         r0, [sp, #0x38]
  00048	e59d3038	 ldr         r3, [sp, #0x38]
  0004c	e58d3010	 str         r3, [sp, #0x10]

; 91   :     if (hDevice == INVALID_HANDLE_VALUE) goto clean;

  00050	e59d3010	 ldr         r3, [sp, #0x10]
  00054	e3730001	 cmn         r3, #1
  00058	1a000000	 bne         |$LN3@I2COpen|
  0005c	ea000028	 b           |$clean$42723|
  00060		 |$LN3@I2COpen|

; 92   : 
; 93   :     // Allocate memory for our handler...
; 94   :     if ((pContext = (DEVICE_CONTEXT_I2C *)LocalAlloc(
; 95   :         LPTR, sizeof(DEVICE_CONTEXT_I2C)
; 96   :     )) == NULL) {

  00060	e3a01010	 mov         r1, #0x10
  00064	e3a00040	 mov         r0, #0x40
  00068	eb000000	 bl          LocalAlloc
  0006c	e58d003c	 str         r0, [sp, #0x3C]
  00070	e59d303c	 ldr         r3, [sp, #0x3C]
  00074	e58d3014	 str         r3, [sp, #0x14]
  00078	e59d3014	 ldr         r3, [sp, #0x14]
  0007c	e3530000	 cmp         r3, #0
  00080	1a000002	 bne         |$LN2@I2COpen|

; 97   :         CloseHandle(hDevice);

  00084	e59d0010	 ldr         r0, [sp, #0x10]
  00088	eb000000	 bl          CloseHandle

; 98   :         goto clean;

  0008c	ea00001c	 b           |$clean$42723|
  00090		 |$LN2@I2COpen|

; 99   :     }
; 100  : 
; 101  :     // Get function pointers, fail when IOCTL isn't supported...
; 102  :     if (!DeviceIoControl(
; 103  :         hDevice, IOCTL_DDK_GET_DRIVER_IFC, (VOID*)&DEVICE_IFC_I2C_GUID,
; 104  :         sizeof(DEVICE_IFC_I2C_GUID), &pContext->ifc, sizeof(DEVICE_IFC_I2C),
; 105  :         NULL, NULL
; 106  :     )) {

  00090	e3a03000	 mov         r3, #0
  00094	e58d300c	 str         r3, [sp, #0xC]
  00098	e3a03000	 mov         r3, #0
  0009c	e58d3008	 str         r3, [sp, #8]
  000a0	e3a0300c	 mov         r3, #0xC
  000a4	e58d3004	 str         r3, [sp, #4]
  000a8	e59d3014	 ldr         r3, [sp, #0x14]
  000ac	e58d3000	 str         r3, [sp]
  000b0	e3a03010	 mov         r3, #0x10
  000b4	e59f2060	 ldr         r2, [pc, #0x60]
  000b8	e3a01822	 mov         r1, #0x22, 16
  000bc	e3811b01	 orr         r1, r1, #1, 22
  000c0	e59d0010	 ldr         r0, [sp, #0x10]
  000c4	eb000000	 bl          DeviceIoControl
  000c8	e58d0040	 str         r0, [sp, #0x40]
  000cc	e59d3040	 ldr         r3, [sp, #0x40]
  000d0	e3530000	 cmp         r3, #0
  000d4	1a000006	 bne         |$LN1@I2COpen|

; 107  :         CloseHandle(hDevice);

  000d8	e59d0010	 ldr         r0, [sp, #0x10]
  000dc	eb000000	 bl          CloseHandle

; 108  :         LocalFree(pContext);

  000e0	e59d0014	 ldr         r0, [sp, #0x14]
  000e4	eb000000	 bl          LocalFree

; 109  :         pContext = NULL;

  000e8	e3a03000	 mov         r3, #0
  000ec	e58d3014	 str         r3, [sp, #0x14]

; 110  :         goto clean;

  000f0	ea000003	 b           |$clean$42723|
  000f4		 |$LN1@I2COpen|

; 111  :     }
; 112  : 
; 113  :     // Save device handle
; 114  :     pContext->hDevice = hDevice;

  000f4	e59d3014	 ldr         r3, [sp, #0x14]
  000f8	e283200c	 add         r2, r3, #0xC
  000fc	e59d3010	 ldr         r3, [sp, #0x10]
  00100	e5823000	 str         r3, [r2]
  00104		 |$clean$42723|

; 115  : 
; 116  : clean:
; 117  :     return pContext;

  00104	e59d3014	 ldr         r3, [sp, #0x14]
  00108	e58d3034	 str         r3, [sp, #0x34]

; 118  : }

  0010c	e59d0034	 ldr         r0, [sp, #0x34]
  00110	e28dd044	 add         sp, sp, #0x44
  00114	e89d6000	 ldmia       sp, {sp, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN9@I2COpen|
  0011c		 |$LN10@I2COpen|
  0011c	00000000	 DCD         |DEVICE_IFC_I2C_GUID|
  00120		 |$M43563|

			 ENDP  ; |I2COpen|


  00000			 AREA	 |.pdata|, PDATA
|$T43575| DCD	|$LN5@I2CSetSlav|
	DCD	0x40001604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CSetSlaveAddress| PROC

; 132  : {

  00000		 |$LN5@I2CSetSlav|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43572|

; 133  :     DEVICE_CONTEXT_I2C *pContext = (DEVICE_CONTEXT_I2C *)hContext;

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e58d3000	 str         r3, [sp]

; 134  :     return pContext->ifc.pfnSetSlaveAddress(pContext->ifc.context, size, address);

  00018	e59d201c	 ldr         r2, [sp, #0x1C]
  0001c	e59d1018	 ldr         r1, [sp, #0x18]
  00020	e59d3000	 ldr         r3, [sp]
  00024	e5930000	 ldr         r0, [r3]
  00028	e59d3000	 ldr         r3, [sp]
  0002c	e2833004	 add         r3, r3, #4
  00030	e5933000	 ldr         r3, [r3]
  00034	e1a0e00f	 mov         lr, pc
  00038	e12fff13	 bx          r3
  0003c	e58d0008	 str         r0, [sp, #8]
  00040	e59d3008	 ldr         r3, [sp, #8]
  00044	e58d3004	 str         r3, [sp, #4]

; 135  : }

  00048	e59d0004	 ldr         r0, [sp, #4]
  0004c	e28dd00c	 add         sp, sp, #0xC
  00050	e89d6000	 ldmia       sp, {sp, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M43573|

			 ENDP  ; |I2CSetSlaveAddress|

	EXPORT	|??_C@_1CO@JAMPJPMN@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|I2CClose|
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1FO@EGEHIKDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@PKNKJDDN@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DeleteCriticalSection|
	IMPORT	|InterruptDisable|
	IMPORT	|WaitForSingleObject|

  00028			 AREA	 |.pdata|, PDATA
|$T43591| DCD	|$LN18@TWL_Deinit|
	DCD	0x40008b04
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\triton\triton.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@JAMPJPMN@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@EGEHIKDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@PKNKJDDN@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0092c			 AREA	 |.text|, CODE, ARM

  0092c		 |TWL_Deinit| PROC

; 352  : {

  0092c		 |$LN18@TWL_Deinit|
  0092c	e1a0c00d	 mov         r12, sp
  00930	e92d0001	 stmdb       sp!, {r0}
  00934	e92d5000	 stmdb       sp!, {r12, lr}
  00938	e24dd028	 sub         sp, sp, #0x28
  0093c		 |$M43588|

; 353  :     BOOL rc = FALSE;

  0093c	e3a03000	 mov         r3, #0
  00940	e58d300c	 str         r3, [sp, #0xC]

; 354  :     Device_t *pDevice = (Device_t*)context;

  00944	e59d3030	 ldr         r3, [sp, #0x30]
  00948	e58d3008	 str         r3, [sp, #8]

; 355  : 
; 356  : 
; 357  :     DEBUGMSG(ZONE_FUNCTION, (L"+TWL_Deinit(0x%08x)\r\n", context));

  0094c	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00950	e5933440	 ldr         r3, [r3, #0x440]
  00954	e3130004	 tst         r3, #4
  00958	0a000005	 beq         |$LN10@TWL_Deinit|
  0095c	e59d1030	 ldr         r1, [sp, #0x30]
  00960	e59f01ec	 ldr         r0, [pc, #0x1EC]
  00964	eb000000	 bl          NKDbgPrintfW
  00968	e3a03001	 mov         r3, #1
  0096c	e58d301c	 str         r3, [sp, #0x1C]
  00970	ea000001	 b           |$LN11@TWL_Deinit|
  00974		 |$LN10@TWL_Deinit|
  00974	e3a03000	 mov         r3, #0
  00978	e58d301c	 str         r3, [sp, #0x1C]
  0097c		 |$LN11@TWL_Deinit|

; 358  : 
; 359  :     // Check if we get correct context
; 360  :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))

  0097c	e59d3008	 ldr         r3, [sp, #8]
  00980	e3530000	 cmp         r3, #0
  00984	0a000004	 beq         |$LN6@TWL_Deinit|
  00988	e59d3008	 ldr         r3, [sp, #8]
  0098c	e5932000	 ldr         r2, [r3]
  00990	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00994	e1520003	 cmp         r2, r3
  00998	0a00000b	 beq         |$LN7@TWL_Deinit|
  0099c		 |$LN6@TWL_Deinit|

; 361  :         {
; 362  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: TWL_Deinit: "
; 363  :             L"Incorrect context paramer\r\n"
; 364  :             ));

  0099c	e59f31a0	 ldr         r3, [pc, #0x1A0]
  009a0	e5933440	 ldr         r3, [r3, #0x440]
  009a4	e3130001	 tst         r3, #1
  009a8	0a000004	 beq         |$LN12@TWL_Deinit|
  009ac	e59f0198	 ldr         r0, [pc, #0x198]
  009b0	eb000000	 bl          NKDbgPrintfW
  009b4	e3a03001	 mov         r3, #1
  009b8	e58d3020	 str         r3, [sp, #0x20]
  009bc	ea000001	 b           |$LN13@TWL_Deinit|
  009c0		 |$LN12@TWL_Deinit|
  009c0	e3a03000	 mov         r3, #0
  009c4	e58d3020	 str         r3, [sp, #0x20]
  009c8		 |$LN13@TWL_Deinit|

; 365  :         goto cleanUp;

  009c8	ea00004a	 b           |$cleanUp$43114|
  009cc		 |$LN7@TWL_Deinit|

; 366  :         }
; 367  : 
; 368  :     // Close interrupt thread
; 369  :     if (pDevice->hIntrThread != NULL)

  009cc	e59d3008	 ldr         r3, [sp, #8]
  009d0	e2833034	 add         r3, r3, #0x34
  009d4	e5933000	 ldr         r3, [r3]
  009d8	e3530000	 cmp         r3, #0
  009dc	0a000010	 beq         |$LN5@TWL_Deinit|

; 370  :         {
; 371  :         // Signal stop to thread
; 372  :         pDevice->intrThreadExit = TRUE;

  009e0	e59d3008	 ldr         r3, [sp, #8]
  009e4	e2832038	 add         r2, r3, #0x38
  009e8	e3a03001	 mov         r3, #1
  009ec	e5823000	 str         r3, [r2]

; 373  :         // Set event to wake it
; 374  :         SetEvent(pDevice->hIntrEvent);

  009f0	e59d3008	 ldr         r3, [sp, #8]
  009f4	e2833030	 add         r3, r3, #0x30
  009f8	e5930000	 ldr         r0, [r3]
  009fc	eb000000	 bl          SetEvent

; 375  :         // Wait until thread exits
; 376  :         WaitForSingleObject(pDevice->hIntrThread, INFINITE);

  00a00	e3e01000	 mvn         r1, #0
  00a04	e59d3008	 ldr         r3, [sp, #8]
  00a08	e2833034	 add         r3, r3, #0x34
  00a0c	e5930000	 ldr         r0, [r3]
  00a10	eb000000	 bl          WaitForSingleObject

; 377  :         // Close handle
; 378  :         CloseHandle(pDevice->hIntrThread);

  00a14	e59d3008	 ldr         r3, [sp, #8]
  00a18	e2833034	 add         r3, r3, #0x34
  00a1c	e5930000	 ldr         r0, [r3]
  00a20	eb000000	 bl          CloseHandle
  00a24		 |$LN5@TWL_Deinit|

; 379  :         }
; 380  : 
; 381  :     // Disable interrupt
; 382  :     if (pDevice->sysIntr != 0)

  00a24	e59d3008	 ldr         r3, [sp, #8]
  00a28	e283302c	 add         r3, r3, #0x2C
  00a2c	e5933000	 ldr         r3, [r3]
  00a30	e3530000	 cmp         r3, #0
  00a34	0a00000d	 beq         |$LN4@TWL_Deinit|

; 383  :         {
; 384  :         InterruptDisable(pDevice->sysIntr);

  00a38	e59d3008	 ldr         r3, [sp, #8]
  00a3c	e283302c	 add         r3, r3, #0x2C
  00a40	e5930000	 ldr         r0, [r3]
  00a44	eb000000	 bl          InterruptDisable

; 385  :         KernelIoControl(
; 386  :             IOCTL_HAL_RELEASE_SYSINTR, &pDevice->sysIntr,
; 387  :             sizeof(pDevice->sysIntr), NULL, 0, NULL
; 388  :             );

  00a48	e3a03000	 mov         r3, #0
  00a4c	e58d3004	 str         r3, [sp, #4]
  00a50	e3a03000	 mov         r3, #0
  00a54	e58d3000	 str         r3, [sp]
  00a58	e3a03000	 mov         r3, #0
  00a5c	e3a02004	 mov         r2, #4
  00a60	e59d1008	 ldr         r1, [sp, #8]
  00a64	e281102c	 add         r1, r1, #0x2C
  00a68	e59f00d8	 ldr         r0, [pc, #0xD8]
  00a6c	eb000000	 bl          KernelIoControl
  00a70		 |$LN4@TWL_Deinit|

; 389  :         }
; 390  : 
; 391  :     // Close interrupt handler
; 392  :     if (pDevice->hIntrEvent != NULL) CloseHandle(pDevice->hIntrEvent);

  00a70	e59d3008	 ldr         r3, [sp, #8]
  00a74	e2833030	 add         r3, r3, #0x30
  00a78	e5933000	 ldr         r3, [r3]
  00a7c	e3530000	 cmp         r3, #0
  00a80	0a000003	 beq         |$LN3@TWL_Deinit|
  00a84	e59d3008	 ldr         r3, [sp, #8]
  00a88	e2833030	 add         r3, r3, #0x30
  00a8c	e5930000	 ldr         r0, [r3]
  00a90	eb000000	 bl          CloseHandle
  00a94		 |$LN3@TWL_Deinit|

; 393  : 
; 394  :     // Close I2C bus
; 395  :     if (pDevice->hI2C != NULL) I2CClose(pDevice->hI2C);

  00a94	e59d3008	 ldr         r3, [sp, #8]
  00a98	e2833010	 add         r3, r3, #0x10
  00a9c	e5933000	 ldr         r3, [r3]
  00aa0	e3530000	 cmp         r3, #0
  00aa4	0a000003	 beq         |$LN2@TWL_Deinit|
  00aa8	e59d3008	 ldr         r3, [sp, #8]
  00aac	e2833010	 add         r3, r3, #0x10
  00ab0	e5930000	 ldr         r0, [r3]
  00ab4	eb000000	 bl          I2CClose
  00ab8		 |$LN2@TWL_Deinit|

; 396  :     if (pDevice->hICX != NULL) CloseHandle(pDevice->hICX);

  00ab8	e59d3008	 ldr         r3, [sp, #8]
  00abc	e2833014	 add         r3, r3, #0x14
  00ac0	e5933000	 ldr         r3, [r3]
  00ac4	e3530000	 cmp         r3, #0
  00ac8	0a000003	 beq         |$LN1@TWL_Deinit|
  00acc	e59d3008	 ldr         r3, [sp, #8]
  00ad0	e2833014	 add         r3, r3, #0x14
  00ad4	e5930000	 ldr         r0, [r3]
  00ad8	eb000000	 bl          CloseHandle
  00adc		 |$LN1@TWL_Deinit|

; 397  : 
; 398  :     // Delete critical section
; 399  :     DeleteCriticalSection(&pDevice->cs);

  00adc	e59d3008	 ldr         r3, [sp, #8]
  00ae0	e2830018	 add         r0, r3, #0x18
  00ae4	eb000000	 bl          DeleteCriticalSection

; 400  : 
; 401  :     // Free device structure
; 402  :     LocalFree(pDevice);

  00ae8	e59d0008	 ldr         r0, [sp, #8]
  00aec	eb000000	 bl          LocalFree

; 403  : 
; 404  :     // Done
; 405  :     rc = TRUE;

  00af0	e3a03001	 mov         r3, #1
  00af4	e58d300c	 str         r3, [sp, #0xC]
  00af8		 |$cleanUp$43114|

; 406  : 
; 407  : cleanUp:
; 408  :     DEBUGMSG(ZONE_FUNCTION, (L"-TWL_Deinit(rc = %d)\r\n", rc));

  00af8	e59f3044	 ldr         r3, [pc, #0x44]
  00afc	e5933440	 ldr         r3, [r3, #0x440]
  00b00	e3130004	 tst         r3, #4
  00b04	0a000005	 beq         |$LN14@TWL_Deinit|
  00b08	e59d100c	 ldr         r1, [sp, #0xC]
  00b0c	e59f002c	 ldr         r0, [pc, #0x2C]
  00b10	eb000000	 bl          NKDbgPrintfW
  00b14	e3a03001	 mov         r3, #1
  00b18	e58d3024	 str         r3, [sp, #0x24]
  00b1c	ea000001	 b           |$LN15@TWL_Deinit|
  00b20		 |$LN14@TWL_Deinit|
  00b20	e3a03000	 mov         r3, #0
  00b24	e58d3024	 str         r3, [sp, #0x24]
  00b28		 |$LN15@TWL_Deinit|

; 409  :     return rc;

  00b28	e59d300c	 ldr         r3, [sp, #0xC]
  00b2c	e58d3018	 str         r3, [sp, #0x18]

; 410  : }

  00b30	e59d0018	 ldr         r0, [sp, #0x18]
  00b34	e28dd028	 add         sp, sp, #0x28
  00b38	e89d6000	 ldmia       sp, {sp, lr}
  00b3c	e12fff1e	 bx          lr
  00b40		 |$LN19@TWL_Deinit|
  00b40		 |$LN20@TWL_Deinit|
  00b40	00000000	 DCD         |??_C@_1CO@JAMPJPMN@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00b44		 |$LN21@TWL_Deinit|
  00b44	00000000	 DCD         |dpCurSettings|
  00b48		 |$LN22@TWL_Deinit|
  00b48	010100d8	 DCD         0x10100d8
  00b4c		 |$LN23@TWL_Deinit|
  00b4c	00000000	 DCD         |??_C@_1FO@EGEHIKDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  00b50		 |$LN24@TWL_Deinit|
  00b50	74776c44	 DCD         0x74776c44
  00b54		 |$LN25@TWL_Deinit|
  00b54	00000000	 DCD         |??_C@_1CM@PKNKJDDN@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00b58		 |$M43589|

			 ENDP  ; |TWL_Deinit|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43604| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M43601|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M43602|

			 ENDP  ; |SetEvent|

; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\inc\i2c.h

  00000			 AREA	 |.pdata|, PDATA
|$T43611| DCD	|$LN7@I2CClose|
	DCD	0x40001a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CClose| PROC

; 121  : {

  00000		 |$LN7@I2CClose|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43608|

; 122  :     DEVICE_CONTEXT_I2C *pContext = (DEVICE_CONTEXT_I2C *)hContext;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e58d3000	 str         r3, [sp]

; 123  : 
; 124  :     if ( (pContext != NULL) && (pContext->hDevice != INVALID_HANDLE_VALUE) )

  00018	e59d3000	 ldr         r3, [sp]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000008	 beq         |$LN2@I2CClose|
  00024	e59d3000	 ldr         r3, [sp]
  00028	e283300c	 add         r3, r3, #0xC
  0002c	e5933000	 ldr         r3, [r3]
  00030	e3730001	 cmn         r3, #1
  00034	0a000003	 beq         |$LN2@I2CClose|

; 125  :         CloseHandle(pContext->hDevice);

  00038	e59d3000	 ldr         r3, [sp]
  0003c	e283300c	 add         r3, r3, #0xC
  00040	e5930000	 ldr         r0, [r3]
  00044	eb000000	 bl          CloseHandle
  00048		 |$LN2@I2CClose|

; 126  : 
; 127  :     if (pContext != NULL)

  00048	e59d3000	 ldr         r3, [sp]
  0004c	e3530000	 cmp         r3, #0
  00050	0a000001	 beq         |$LN1@I2CClose|

; 128  :         LocalFree(pContext);

  00054	e59d0000	 ldr         r0, [sp]
  00058	eb000000	 bl          LocalFree
  0005c		 |$LN1@I2CClose|

; 129  : }

  0005c	e28dd004	 add         sp, sp, #4
  00060	e89d6000	 ldmia       sp, {sp, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M43609|

			 ENDP  ; |I2CClose|

	EXPORT	|TWL_Open|

  00030			 AREA	 |.pdata|, PDATA
|$T43619| DCD	|$LN5@TWL_Open|
	DCD	0x40000a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\triton\triton.c

  00b58			 AREA	 |.text|, CODE, ARM

  00b58		 |TWL_Open| PROC

; 424  : {

  00b58		 |$LN5@TWL_Open|
  00b58	e1a0c00d	 mov         r12, sp
  00b5c	e92d0007	 stmdb       sp!, {r0 - r2}
  00b60	e92d5000	 stmdb       sp!, {r12, lr}
  00b64	e24dd004	 sub         sp, sp, #4
  00b68		 |$M43616|

; 425  :     return context;

  00b68	e59d300c	 ldr         r3, [sp, #0xC]
  00b6c	e58d3000	 str         r3, [sp]

; 426  : }

  00b70	e59d0000	 ldr         r0, [sp]
  00b74	e28dd004	 add         sp, sp, #4
  00b78	e89d6000	 ldmia       sp, {sp, lr}
  00b7c	e12fff1e	 bx          lr
  00b80		 |$M43617|

			 ENDP  ; |TWL_Open|

	EXPORT	|TWL_Close|

  00038			 AREA	 |.pdata|, PDATA
|$T43625| DCD	|$LN5@TWL_Close|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00b80			 AREA	 |.text|, CODE, ARM

  00b80		 |TWL_Close| PROC

; 438  : {

  00b80		 |$LN5@TWL_Close|
  00b80	e1a0c00d	 mov         r12, sp
  00b84	e92d0001	 stmdb       sp!, {r0}
  00b88	e92d5000	 stmdb       sp!, {r12, lr}
  00b8c	e24dd004	 sub         sp, sp, #4
  00b90		 |$M43622|

; 439  :     return TRUE;

  00b90	e3a03001	 mov         r3, #1
  00b94	e58d3000	 str         r3, [sp]

; 440  : }

  00b98	e59d0000	 ldr         r0, [sp]
  00b9c	e28dd004	 add         sp, sp, #4
  00ba0	e89d6000	 ldmia       sp, {sp, lr}
  00ba4	e12fff1e	 bx          lr
  00ba8		 |$M43623|

			 ENDP  ; |TWL_Close|

	EXPORT	|??_C@_1DE@FNPJKBFA@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|WriteRegs|
	EXPORT	|ReadRegs|
	EXPORT	|??_C@_1OG@GOFHADCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@| [ DATA ] ; `string'
	EXPORT	|GetCurrentProcessId|
	EXPORT	|??_C@_1GE@KIBCNFIC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@CDCPDGAH@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|TWL_IOControl|
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|memcmp|
	IMPORT	|SetLastError|
	IMPORT	|GetCallerProcess|

  00040			 AREA	 |.pdata|, PDATA
|$T43643| DCD	|$LN36@TWL_IOCont|
	DCD	0x40010404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@FNPJKBFA@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1OG@GOFHADCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "D", 0x0, "K"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "R", 0x0, "I", 0x0, "V", 0x0, "E", 0x0, "R", 0x0, "_"
	DCB	0x0, "I", 0x0, "F", 0x0, "C", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "n", 0x0, "l", 0x0, "y", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "(", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@KIBCNFIC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@CDCPDGAH@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00ba8			 AREA	 |.text|, CODE, ARM

  00ba8		 |TWL_IOControl| PROC

; 458  : {

  00ba8		 |$LN36@TWL_IOCont|
  00ba8	e1a0c00d	 mov         r12, sp
  00bac	e92d000f	 stmdb       sp!, {r0 - r3}
  00bb0	e92d5000	 stmdb       sp!, {r12, lr}
  00bb4	e24dd080	 sub         sp, sp, #0x80
  00bb8		 |$M43640|

; 459  :     BOOL rc = FALSE;

  00bb8	e3a03000	 mov         r3, #0
  00bbc	e58d3014	 str         r3, [sp, #0x14]

; 460  :     Device_t *pDevice = (Device_t*)context;

  00bc0	e59d3088	 ldr         r3, [sp, #0x88]
  00bc4	e58d3010	 str         r3, [sp, #0x10]

; 461  :     DEVICE_IFC_TWL ifc;
; 462  :     DWORD address, size;
; 463  : 
; 464  : 
; 465  :     DEBUGMSG(ZONE_FUNCTION, (
; 466  :         L"+TWL_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 467  :         context, code, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 468  :         ));

  00bc8	e59f33b8	 ldr         r3, [pc, #0x3B8]
  00bcc	e5933440	 ldr         r3, [r3, #0x440]
  00bd0	e3130004	 tst         r3, #4
  00bd4	0a00000f	 beq         |$LN26@TWL_IOCont|
  00bd8	e59d30a0	 ldr         r3, [sp, #0xA0]
  00bdc	e58d300c	 str         r3, [sp, #0xC]
  00be0	e59d309c	 ldr         r3, [sp, #0x9C]
  00be4	e58d3008	 str         r3, [sp, #8]
  00be8	e59d3098	 ldr         r3, [sp, #0x98]
  00bec	e58d3004	 str         r3, [sp, #4]
  00bf0	e59d3094	 ldr         r3, [sp, #0x94]
  00bf4	e58d3000	 str         r3, [sp]
  00bf8	e59d3090	 ldr         r3, [sp, #0x90]
  00bfc	e59d208c	 ldr         r2, [sp, #0x8C]
  00c00	e59d1088	 ldr         r1, [sp, #0x88]
  00c04	e59f03a8	 ldr         r0, [pc, #0x3A8]
  00c08	eb000000	 bl          NKDbgPrintfW
  00c0c	e3a03001	 mov         r3, #1
  00c10	e58d3050	 str         r3, [sp, #0x50]
  00c14	ea000001	 b           |$LN27@TWL_IOCont|
  00c18		 |$LN26@TWL_IOCont|
  00c18	e3a03000	 mov         r3, #0
  00c1c	e58d3050	 str         r3, [sp, #0x50]
  00c20		 |$LN27@TWL_IOCont|

; 469  : 
; 470  :     // Check if we get correct context
; 471  :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))

  00c20	e59d3010	 ldr         r3, [sp, #0x10]
  00c24	e3530000	 cmp         r3, #0
  00c28	0a000004	 beq         |$LN22@TWL_IOCont|
  00c2c	e59d3010	 ldr         r3, [sp, #0x10]
  00c30	e5932000	 ldr         r2, [r3]
  00c34	e59f3374	 ldr         r3, [pc, #0x374]
  00c38	e1520003	 cmp         r2, r3
  00c3c	0a00000b	 beq         |$LN23@TWL_IOCont|
  00c40		 |$LN22@TWL_IOCont|

; 472  :         {
; 473  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IOControl: "
; 474  :             L"Incorrect context paramer\r\n"
; 475  :             ));

  00c40	e59f3340	 ldr         r3, [pc, #0x340]
  00c44	e5933440	 ldr         r3, [r3, #0x440]
  00c48	e3130001	 tst         r3, #1
  00c4c	0a000004	 beq         |$LN28@TWL_IOCont|
  00c50	e59f0354	 ldr         r0, [pc, #0x354]
  00c54	eb000000	 bl          NKDbgPrintfW
  00c58	e3a03001	 mov         r3, #1
  00c5c	e58d3054	 str         r3, [sp, #0x54]
  00c60	ea000001	 b           |$LN29@TWL_IOCont|
  00c64		 |$LN28@TWL_IOCont|
  00c64	e3a03000	 mov         r3, #0
  00c68	e58d3054	 str         r3, [sp, #0x54]
  00c6c		 |$LN29@TWL_IOCont|

; 476  :         goto cleanUp;

  00c6c	ea0000b2	 b           |$cleanUp$43169|
  00c70		 |$LN23@TWL_IOCont|

; 477  :         }
; 478  : 
; 479  :     switch (code)

  00c70	e59d308c	 ldr         r3, [sp, #0x8C]
  00c74	e58d3058	 str         r3, [sp, #0x58]
  00c78	e59d2058	 ldr         r2, [sp, #0x58]
  00c7c	e3a03822	 mov         r3, #0x22, 16
  00c80	e3833b01	 orr         r3, r3, #1, 22
  00c84	e1520003	 cmp         r2, r3
  00c88	0a000009	 beq         |$LN19@TWL_IOCont|
  00c8c	e59d2058	 ldr         r2, [sp, #0x58]
  00c90	e3a03822	 mov         r3, #0x22, 16
  00c94	e3833b03	 orr         r3, r3, #3, 22
  00c98	e1520003	 cmp         r2, r3
  00c9c	0a00005a	 beq         |$LN10@TWL_IOCont|
  00ca0	e59d2058	 ldr         r2, [sp, #0x58]
  00ca4	e59f32fc	 ldr         r3, [pc, #0x2FC]
  00ca8	e1520003	 cmp         r2, r3
  00cac	0a00007f	 beq         |$LN4@TWL_IOCont|
  00cb0	ea0000a1	 b           |$LN20@TWL_IOCont|
  00cb4		 |$LN19@TWL_IOCont|

; 480  :         {
; 481  :         case IOCTL_DDK_GET_DRIVER_IFC:
; 482  :             // We can give interface only to our peer in device process
; 483  :             if (GetCurrentProcessId() != (DWORD)GetCallerProcess())

  00cb4	eb000000	 bl          GetCurrentProcessId
  00cb8	e58d005c	 str         r0, [sp, #0x5C]
  00cbc	eb000000	 bl          GetCallerProcess
  00cc0	e58d0060	 str         r0, [sp, #0x60]
  00cc4	e59d205c	 ldr         r2, [sp, #0x5C]
  00cc8	e59d3060	 ldr         r3, [sp, #0x60]
  00ccc	e1520003	 cmp         r2, r3
  00cd0	0a000010	 beq         |$LN18@TWL_IOCont|

; 484  :                 {
; 485  :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IOControl: "
; 486  :                     L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 487  :                     L"device process (caller process id 0x%08x)\r\n",
; 488  :                     GetCallerProcess()
; 489  :                     ));

  00cd4	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00cd8	e5933440	 ldr         r3, [r3, #0x440]
  00cdc	e3130001	 tst         r3, #1
  00ce0	0a000007	 beq         |$LN30@TWL_IOCont|
  00ce4	eb000000	 bl          GetCallerProcess
  00ce8	e58d0064	 str         r0, [sp, #0x64]
  00cec	e59d1064	 ldr         r1, [sp, #0x64]
  00cf0	e59f02ac	 ldr         r0, [pc, #0x2AC]
  00cf4	eb000000	 bl          NKDbgPrintfW
  00cf8	e3a03001	 mov         r3, #1
  00cfc	e58d3068	 str         r3, [sp, #0x68]
  00d00	ea000001	 b           |$LN31@TWL_IOCont|
  00d04		 |$LN30@TWL_IOCont|
  00d04	e3a03000	 mov         r3, #0
  00d08	e58d3068	 str         r3, [sp, #0x68]
  00d0c		 |$LN31@TWL_IOCont|

; 490  :                 SetLastError(ERROR_ACCESS_DENIED);

  00d0c	e3a00005	 mov         r0, #5
  00d10	eb000000	 bl          SetLastError

; 491  :                 break;

  00d14	ea000088	 b           |$LN20@TWL_IOCont|
  00d18		 |$LN18@TWL_IOCont|

; 492  :                 }
; 493  :             // Check input parameters
; 494  :             if ((pInBuffer == NULL) || (inSize < sizeof(GUID)))

  00d18	e59d3090	 ldr         r3, [sp, #0x90]
  00d1c	e3530000	 cmp         r3, #0
  00d20	0a000002	 beq         |$LN16@TWL_IOCont|
  00d24	e59d3094	 ldr         r3, [sp, #0x94]
  00d28	e3530010	 cmp         r3, #0x10
  00d2c	2a000002	 bcs         |$LN17@TWL_IOCont|
  00d30		 |$LN16@TWL_IOCont|

; 495  :                 {
; 496  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00d30	e3a00057	 mov         r0, #0x57
  00d34	eb000000	 bl          SetLastError

; 497  :                 break;

  00d38	ea00007f	 b           |$LN20@TWL_IOCont|
  00d3c		 |$LN17@TWL_IOCont|

; 498  :                 }
; 499  :             if (IsEqualGUID(pInBuffer, &DEVICE_IFC_TWL_GUID))

  00d3c	e3a02010	 mov         r2, #0x10
  00d40	e59f1258	 ldr         r1, [pc, #0x258]
  00d44	e59d0090	 ldr         r0, [sp, #0x90]
  00d48	eb000000	 bl          memcmp
  00d4c	e58d006c	 str         r0, [sp, #0x6C]
  00d50	e59d306c	 ldr         r3, [sp, #0x6C]
  00d54	e3530000	 cmp         r3, #0
  00d58	1a000028	 bne         |$LN15@TWL_IOCont|

; 500  :                 {
; 501  :                 if (pOutSize != NULL) *pOutSize = sizeof(DEVICE_IFC_TWL);

  00d5c	e59d30a0	 ldr         r3, [sp, #0xA0]
  00d60	e3530000	 cmp         r3, #0
  00d64	0a000002	 beq         |$LN14@TWL_IOCont|
  00d68	e59d20a0	 ldr         r2, [sp, #0xA0]
  00d6c	e3a0301c	 mov         r3, #0x1C
  00d70	e5823000	 str         r3, [r2]
  00d74		 |$LN14@TWL_IOCont|

; 502  :                 if (pOutBuffer == NULL || outSize < sizeof(DEVICE_IFC_TWL))

  00d74	e59d3098	 ldr         r3, [sp, #0x98]
  00d78	e3530000	 cmp         r3, #0
  00d7c	0a000002	 beq         |$LN12@TWL_IOCont|
  00d80	e59d309c	 ldr         r3, [sp, #0x9C]
  00d84	e353001c	 cmp         r3, #0x1C
  00d88	2a000002	 bcs         |$LN13@TWL_IOCont|
  00d8c		 |$LN12@TWL_IOCont|

; 503  :                     {
; 504  :                     SetLastError(ERROR_INVALID_PARAMETER);

  00d8c	e3a00057	 mov         r0, #0x57
  00d90	eb000000	 bl          SetLastError

; 505  :                     break;

  00d94	ea000068	 b           |$LN20@TWL_IOCont|
  00d98		 |$LN13@TWL_IOCont|

; 506  :                     }
; 507  :                 ifc.context = context;

  00d98	e59d3088	 ldr         r3, [sp, #0x88]
  00d9c	e58d3020	 str         r3, [sp, #0x20]

; 508  :                 ifc.pfnReadRegs = TWL_ReadRegs;

  00da0	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00da4	e58d3024	 str         r3, [sp, #0x24]

; 509  :                 ifc.pfnWriteRegs = TWL_WriteRegs;

  00da8	e59f31e8	 ldr         r3, [pc, #0x1E8]
  00dac	e58d3028	 str         r3, [sp, #0x28]

; 510  :                 ifc.pfnSetIntrEvent = TWL_SetIntrEvent;

  00db0	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00db4	e58d302c	 str         r3, [sp, #0x2C]

; 511  :                 ifc.pfnIntrEnable = TWL_IntrEnable;

  00db8	e59f31d0	 ldr         r3, [pc, #0x1D0]
  00dbc	e58d3030	 str         r3, [sp, #0x30]

; 512  :                 ifc.pfnIntrDisable = TWL_IntrDisable;

  00dc0	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00dc4	e58d3034	 str         r3, [sp, #0x34]

; 513  :                 if (!CeSafeCopyMemory(pOutBuffer, &ifc, sizeof(DEVICE_IFC_TWL)))

  00dc8	e3a0201c	 mov         r2, #0x1C
  00dcc	e28d1020	 add         r1, sp, #0x20
  00dd0	e59d0098	 ldr         r0, [sp, #0x98]
  00dd4	eb000000	 bl          CeSafeCopyMemory
  00dd8	e58d0070	 str         r0, [sp, #0x70]
  00ddc	e59d3070	 ldr         r3, [sp, #0x70]
  00de0	e3530000	 cmp         r3, #0
  00de4	1a000002	 bne         |$LN11@TWL_IOCont|

; 514  :                     {
; 515  :                     SetLastError(ERROR_INVALID_PARAMETER);

  00de8	e3a00057	 mov         r0, #0x57
  00dec	eb000000	 bl          SetLastError

; 516  :                     break;

  00df0	ea000051	 b           |$LN20@TWL_IOCont|
  00df4		 |$LN11@TWL_IOCont|

; 517  :                     }
; 518  :                 rc = TRUE;

  00df4	e3a03001	 mov         r3, #1
  00df8	e58d3014	 str         r3, [sp, #0x14]

; 519  :                 break;

  00dfc	ea00004e	 b           |$LN20@TWL_IOCont|
  00e00		 |$LN15@TWL_IOCont|

; 520  :                 }
; 521  :             SetLastError(ERROR_INVALID_PARAMETER);

  00e00	e3a00057	 mov         r0, #0x57
  00e04	eb000000	 bl          SetLastError

; 522  :             break;

  00e08	ea00004b	 b           |$LN20@TWL_IOCont|
  00e0c		 |$LN10@TWL_IOCont|

; 523  :         case IOCTL_TWL_READREGS:
; 524  :             if ((pInBuffer == NULL) || 
; 525  :                 (inSize < sizeof(IOCTL_TWL_READREGS_IN)))

  00e0c	e59d3090	 ldr         r3, [sp, #0x90]
  00e10	e3530000	 cmp         r3, #0
  00e14	0a000002	 beq         |$LN8@TWL_IOCont|
  00e18	e59d3094	 ldr         r3, [sp, #0x94]
  00e1c	e3530008	 cmp         r3, #8
  00e20	2a000002	 bcs         |$LN9@TWL_IOCont|
  00e24		 |$LN8@TWL_IOCont|

; 526  :                 {
; 527  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00e24	e3a00057	 mov         r0, #0x57
  00e28	eb000000	 bl          SetLastError

; 528  :                 break;

  00e2c	ea000042	 b           |$LN20@TWL_IOCont|
  00e30		 |$LN9@TWL_IOCont|

; 529  :                 }
; 530  :             address = ((IOCTL_TWL_READREGS_IN*)pInBuffer)->address;

  00e30	e59d3090	 ldr         r3, [sp, #0x90]
  00e34	e5933000	 ldr         r3, [r3]
  00e38	e58d301c	 str         r3, [sp, #0x1C]

; 531  :             size = ((IOCTL_TWL_READREGS_IN*)pInBuffer)->size;

  00e3c	e59d3090	 ldr         r3, [sp, #0x90]
  00e40	e2833004	 add         r3, r3, #4
  00e44	e5933000	 ldr         r3, [r3]
  00e48	e58d3018	 str         r3, [sp, #0x18]

; 532  :             if (pOutSize != NULL) *pOutSize = size;

  00e4c	e59d30a0	 ldr         r3, [sp, #0xA0]
  00e50	e3530000	 cmp         r3, #0
  00e54	0a000002	 beq         |$LN7@TWL_IOCont|
  00e58	e59d2018	 ldr         r2, [sp, #0x18]
  00e5c	e59d30a0	 ldr         r3, [sp, #0xA0]
  00e60	e5832000	 str         r2, [r3]
  00e64		 |$LN7@TWL_IOCont|

; 533  :             if ((pOutBuffer == NULL) || (outSize < size))

  00e64	e59d3098	 ldr         r3, [sp, #0x98]
  00e68	e3530000	 cmp         r3, #0
  00e6c	0a000003	 beq         |$LN5@TWL_IOCont|
  00e70	e59d209c	 ldr         r2, [sp, #0x9C]
  00e74	e59d3018	 ldr         r3, [sp, #0x18]
  00e78	e1520003	 cmp         r2, r3
  00e7c	2a000002	 bcs         |$LN6@TWL_IOCont|
  00e80		 |$LN5@TWL_IOCont|

; 534  :                 {
; 535  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00e80	e3a00057	 mov         r0, #0x57
  00e84	eb000000	 bl          SetLastError

; 536  :                 break;

  00e88	ea00002b	 b           |$LN20@TWL_IOCont|
  00e8c		 |$LN6@TWL_IOCont|

; 537  :                 }
; 538  :             rc = ReadRegs(pDevice, address, pOutBuffer, size);

  00e8c	e59d3018	 ldr         r3, [sp, #0x18]
  00e90	e59d2098	 ldr         r2, [sp, #0x98]
  00e94	e59d101c	 ldr         r1, [sp, #0x1C]
  00e98	e59d0010	 ldr         r0, [sp, #0x10]
  00e9c	eb000000	 bl          ReadRegs
  00ea0	e58d0074	 str         r0, [sp, #0x74]
  00ea4	e59d3074	 ldr         r3, [sp, #0x74]
  00ea8	e58d3014	 str         r3, [sp, #0x14]

; 539  :             break;

  00eac	ea000022	 b           |$LN20@TWL_IOCont|
  00eb0		 |$LN4@TWL_IOCont|

; 540  :         case IOCTL_TWL_WRITEREGS:
; 541  :             if ((pInBuffer == NULL) || 
; 542  :                 (inSize < sizeof(IOCTL_TWL_WRITEREGS_IN)))

  00eb0	e59d3090	 ldr         r3, [sp, #0x90]
  00eb4	e3530000	 cmp         r3, #0
  00eb8	0a000002	 beq         |$LN2@TWL_IOCont|
  00ebc	e59d3094	 ldr         r3, [sp, #0x94]
  00ec0	e3530008	 cmp         r3, #8
  00ec4	2a000002	 bcs         |$LN3@TWL_IOCont|
  00ec8		 |$LN2@TWL_IOCont|

; 543  :                 {
; 544  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00ec8	e3a00057	 mov         r0, #0x57
  00ecc	eb000000	 bl          SetLastError

; 545  :                 break;

  00ed0	ea000019	 b           |$LN20@TWL_IOCont|
  00ed4		 |$LN3@TWL_IOCont|

; 546  :                 }
; 547  :             address = ((IOCTL_TWL_WRITEREGS_IN*)pInBuffer)->address;

  00ed4	e59d3090	 ldr         r3, [sp, #0x90]
  00ed8	e5933000	 ldr         r3, [r3]
  00edc	e58d301c	 str         r3, [sp, #0x1C]

; 548  :             size = ((IOCTL_TWL_WRITEREGS_IN*)pInBuffer)->size;

  00ee0	e59d3090	 ldr         r3, [sp, #0x90]
  00ee4	e2833004	 add         r3, r3, #4
  00ee8	e5933000	 ldr         r3, [r3]
  00eec	e58d3018	 str         r3, [sp, #0x18]

; 549  :             if (inSize < (sizeof(IOCTL_TWL_WRITEREGS_IN) + size))

  00ef0	e59d3018	 ldr         r3, [sp, #0x18]
  00ef4	e2832008	 add         r2, r3, #8
  00ef8	e59d3094	 ldr         r3, [sp, #0x94]
  00efc	e1530002	 cmp         r3, r2
  00f00	2a000002	 bcs         |$LN1@TWL_IOCont|

; 550  :                 {
; 551  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00f04	e3a00057	 mov         r0, #0x57
  00f08	eb000000	 bl          SetLastError

; 552  :                 break;

  00f0c	ea00000a	 b           |$LN20@TWL_IOCont|
  00f10		 |$LN1@TWL_IOCont|

; 553  :                 }
; 554  :             ((IOCTL_TWL_WRITEREGS_IN*)pInBuffer)++;

  00f10	e59d3090	 ldr         r3, [sp, #0x90]
  00f14	e2833008	 add         r3, r3, #8
  00f18	e58d3090	 str         r3, [sp, #0x90]

; 555  :             rc = WriteRegs(pDevice, address, pInBuffer, size);

  00f1c	e59d3018	 ldr         r3, [sp, #0x18]
  00f20	e59d2090	 ldr         r2, [sp, #0x90]
  00f24	e59d101c	 ldr         r1, [sp, #0x1C]
  00f28	e59d0010	 ldr         r0, [sp, #0x10]
  00f2c	eb000000	 bl          WriteRegs
  00f30	e58d0078	 str         r0, [sp, #0x78]
  00f34	e59d3078	 ldr         r3, [sp, #0x78]
  00f38	e58d3014	 str         r3, [sp, #0x14]
  00f3c		 |$LN20@TWL_IOCont|
  00f3c		 |$cleanUp$43169|

; 556  :             break;
; 557  :         }
; 558  : 
; 559  : cleanUp:
; 560  :     DEBUGMSG(ZONE_FUNCTION, (L"-TWL_IOControl(rc = %d)\r\n", rc));

  00f3c	e59f3044	 ldr         r3, [pc, #0x44]
  00f40	e5933440	 ldr         r3, [r3, #0x440]
  00f44	e3130004	 tst         r3, #4
  00f48	0a000005	 beq         |$LN32@TWL_IOCont|
  00f4c	e59d1014	 ldr         r1, [sp, #0x14]
  00f50	e59f002c	 ldr         r0, [pc, #0x2C]
  00f54	eb000000	 bl          NKDbgPrintfW
  00f58	e3a03001	 mov         r3, #1
  00f5c	e58d307c	 str         r3, [sp, #0x7C]
  00f60	ea000001	 b           |$LN33@TWL_IOCont|
  00f64		 |$LN32@TWL_IOCont|
  00f64	e3a03000	 mov         r3, #0
  00f68	e58d307c	 str         r3, [sp, #0x7C]
  00f6c		 |$LN33@TWL_IOCont|

; 561  :     return rc;

  00f6c	e59d3014	 ldr         r3, [sp, #0x14]
  00f70	e58d304c	 str         r3, [sp, #0x4C]

; 562  : }

  00f74	e59d004c	 ldr         r0, [sp, #0x4C]
  00f78	e28dd080	 add         sp, sp, #0x80
  00f7c	e89d6000	 ldmia       sp, {sp, lr}
  00f80	e12fff1e	 bx          lr
  00f84		 |$LN37@TWL_IOCont|
  00f84		 |$LN38@TWL_IOCont|
  00f84	00000000	 DCD         |??_C@_1DE@FNPJKBFA@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00f88		 |$LN39@TWL_IOCont|
  00f88	00000000	 DCD         |dpCurSettings|
  00f8c		 |$LN40@TWL_IOCont|
  00f8c	00000000	 DCD         |TWL_IntrDisable|
  00f90		 |$LN41@TWL_IOCont|
  00f90	00000000	 DCD         |TWL_IntrEnable|
  00f94		 |$LN42@TWL_IOCont|
  00f94	00000000	 DCD         |TWL_SetIntrEvent|
  00f98		 |$LN43@TWL_IOCont|
  00f98	00000000	 DCD         |TWL_WriteRegs|
  00f9c		 |$LN44@TWL_IOCont|
  00f9c	00000000	 DCD         |TWL_ReadRegs|
  00fa0		 |$LN45@TWL_IOCont|
  00fa0	00000000	 DCD         |DEVICE_IFC_TWL_GUID|
  00fa4		 |$LN46@TWL_IOCont|
  00fa4	00000000	 DCD         |??_C@_1OG@GOFHADCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@|
  00fa8		 |$LN47@TWL_IOCont|
  00fa8	00220c04	 DCD         0x220c04
  00fac		 |$LN48@TWL_IOCont|
  00fac	00000000	 DCD         |??_C@_1GE@KIBCNFIC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  00fb0		 |$LN49@TWL_IOCont|
  00fb0	74776c44	 DCD         0x74776c44
  00fb4		 |$LN50@TWL_IOCont|
  00fb4	00000000	 DCD         |??_C@_1IC@CDCPDGAH@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  00fb8		 |$M43641|

			 ENDP  ; |TWL_IOControl|

	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43663| DCD	|$LN5@GetCurrent|
	DCD	0x40000b02
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M43660|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00008	e3a0000c	 mov         r0, #0xC
  0000c	eb000000	 bl          __GetUserKData
  00010	e58d0004	 str         r0, [sp, #4]
  00014	e59d3004	 ldr         r3, [sp, #4]
  00018	e58d3000	 str         r3, [sp]

; 375  : }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd008	 add         sp, sp, #8
  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M43661|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|PulseEvent|
	IMPORT	|InterruptDone|

  00048			 AREA	 |.pdata|, PDATA
|$T43673| DCD	|$LN15@TWL_IntrTh|
	DCD	0x40007104
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\triton\triton.c

  00fb8			 AREA	 |.text|, CODE, ARM

  00fb8		 |TWL_IntrThread| PROC

; 574  : {

  00fb8		 |$LN15@TWL_IntrTh|
  00fb8	e1a0c00d	 mov         r12, sp
  00fbc	e92d0001	 stmdb       sp!, {r0}
  00fc0	e92d5000	 stmdb       sp!, {r12, lr}
  00fc4	e24dd028	 sub         sp, sp, #0x28
  00fc8		 |$M43670|

; 575  :     Device_t *pDevice = (Device_t*)pContext;

  00fc8	e59d3030	 ldr         r3, [sp, #0x30]
  00fcc	e58d300c	 str         r3, [sp, #0xC]
  00fd0		 |$LN10@TWL_IntrTh|

; 576  :     DWORD id;
; 577  :     UINT16 status;
; 578  :     UINT16 currMask;
; 579  : 
; 580  :     // Loop until we are stopped...
; 581  :     while (!pDevice->intrThreadExit) {

  00fd0	e59d300c	 ldr         r3, [sp, #0xC]
  00fd4	e2833038	 add         r3, r3, #0x38
  00fd8	e5933000	 ldr         r3, [r3]
  00fdc	e3530000	 cmp         r3, #0
  00fe0	1a00005e	 bne         |$LN9@TWL_IntrTh|

; 582  :         // Wait for event
; 583  :         WaitForSingleObject(pDevice->hIntrEvent, INFINITE);

  00fe4	e3e01000	 mvn         r1, #0
  00fe8	e59d300c	 ldr         r3, [sp, #0xC]
  00fec	e2833030	 add         r3, r3, #0x30
  00ff0	e5930000	 ldr         r0, [r3]
  00ff4	eb000000	 bl          WaitForSingleObject

; 584  :         if (pDevice->intrThreadExit) break;

  00ff8	e59d300c	 ldr         r3, [sp, #0xC]
  00ffc	e2833038	 add         r3, r3, #0x38
  01000	e5933000	 ldr         r3, [r3]
  01004	e3530000	 cmp         r3, #0
  01008	0a000000	 beq         |$LN8@TWL_IntrTh|
  0100c	ea000053	 b           |$LN9@TWL_IntrTh|
  01010		 |$LN8@TWL_IntrTh|

; 585  : 
; 586  :         // Get interrupt status register
; 587  :         if (GetTritonIrqStatus(pDevice, &status) && GetTritonIrqMask(pDevice, &currMask)) {

  01010	e28d1012	 add         r1, sp, #0x12
  01014	e59d000c	 ldr         r0, [sp, #0xC]
  01018	eb000000	 bl          GetTritonIrqStatus
  0101c	e58d0020	 str         r0, [sp, #0x20]
  01020	e59d3020	 ldr         r3, [sp, #0x20]
  01024	e3530000	 cmp         r3, #0
  01028	0a00003e	 beq         |$LN7@TWL_IntrTh|
  0102c	e28d1010	 add         r1, sp, #0x10
  01030	e59d000c	 ldr         r0, [sp, #0xC]
  01034	eb000000	 bl          GetTritonIrqMask
  01038	e58d0024	 str         r0, [sp, #0x24]
  0103c	e59d3024	 ldr         r3, [sp, #0x24]
  01040	e3530000	 cmp         r3, #0
  01044	0a000037	 beq         |$LN7@TWL_IntrTh|

; 588  :             // Diable all interrupts
; 589  :             SetTritonIrqMask(pDevice, status);

  01048	e1dd11b2	 ldrh        r1, [sp, #0x12]
  0104c	e59d000c	 ldr         r0, [sp, #0xC]
  01050	eb000000	 bl          SetTritonIrqMask

; 590  : 
; 591  :             // Process each unmasked interrupt
; 592  :             status &= ~currMask;

  01054	e1dd31b0	 ldrh        r3, [sp, #0x10]
  01058	e1e02003	 mvn         r2, r3
  0105c	e1dd31b2	 ldrh        r3, [sp, #0x12]
  01060	e0033002	 and         r3, r3, r2
  01064	e1a03803	 mov         r3, r3, lsl #16
  01068	e1a03823	 mov         r3, r3, lsr #16
  0106c	e1cd31b2	 strh        r3, [sp, #0x12]

; 593  :             id = 0;

  01070	e3a03000	 mov         r3, #0
  01074	e58d3008	 str         r3, [sp, #8]
  01078		 |$LN6@TWL_IntrTh|

; 594  :             while (status != 0) {

  01078	e1dd31b2	 ldrh        r3, [sp, #0x12]
  0107c	e3530000	 cmp         r3, #0
  01080	0a000028	 beq         |$LN5@TWL_IntrTh|

; 595  :                 if ((status & 0x0001) != 0) {

  01084	e1dd31b2	 ldrh        r3, [sp, #0x12]
  01088	e3130001	 tst         r3, #1
  0108c	0a00001c	 beq         |$LN4@TWL_IntrTh|

; 596  :                     if (pDevice->hSetIntrEvent[id] != NULL) {

  01090	e59d300c	 ldr         r3, [sp, #0xC]
  01094	e283103c	 add         r1, r3, #0x3C
  01098	e59d2008	 ldr         r2, [sp, #8]
  0109c	e3a03004	 mov         r3, #4
  010a0	e0030392	 mul         r3, r2, r3
  010a4	e0813003	 add         r3, r1, r3
  010a8	e5933000	 ldr         r3, [r3]
  010ac	e3530000	 cmp         r3, #0
  010b0	0a000007	 beq         |$LN3@TWL_IntrTh|

; 597  :                         SetEvent(pDevice->hSetIntrEvent[id]);

  010b4	e59d300c	 ldr         r3, [sp, #0xC]
  010b8	e283103c	 add         r1, r3, #0x3C
  010bc	e59d2008	 ldr         r2, [sp, #8]
  010c0	e3a03004	 mov         r3, #4
  010c4	e0030392	 mul         r3, r2, r3
  010c8	e0813003	 add         r3, r1, r3
  010cc	e5930000	 ldr         r0, [r3]
  010d0	eb000000	 bl          SetEvent
  010d4		 |$LN3@TWL_IntrTh|

; 598  :                     }
; 599  : 
; 600  :                     // If this is a RTC alarm interrupt, let oal handle the interrupt.
; 601  :                     if (id == TWL_INTR_RTCALM) {

  010d4	e59d3008	 ldr         r3, [sp, #8]
  010d8	e3530009	 cmp         r3, #9
  010dc	1a000008	 bne         |$LN2@TWL_IntrTh|

; 602  :                         KernelIoControl(IOCTL_HAL_RTC_ALARM, NULL, 0, NULL, 0, NULL);

  010e0	e3a03000	 mov         r3, #0
  010e4	e58d3004	 str         r3, [sp, #4]
  010e8	e3a03000	 mov         r3, #0
  010ec	e58d3000	 str         r3, [sp]
  010f0	e3a03000	 mov         r3, #0
  010f4	e3a02000	 mov         r2, #0
  010f8	e3a01000	 mov         r1, #0
  010fc	e59f0074	 ldr         r0, [pc, #0x74]
  01100	eb000000	 bl          KernelIoControl
  01104		 |$LN2@TWL_IntrTh|
  01104		 |$LN4@TWL_IntrTh|

; 603  :                     }
; 604  :                 }
; 605  :                 status >>= 1;

  01104	e1dd31b2	 ldrh        r3, [sp, #0x12]
  01108	e1a030a3	 mov         r3, r3, lsr #1
  0110c	e1a03803	 mov         r3, r3, lsl #16
  01110	e1a03823	 mov         r3, r3, lsr #16
  01114	e1cd31b2	 strh        r3, [sp, #0x12]

; 606  :                 id++;

  01118	e59d3008	 ldr         r3, [sp, #8]
  0111c	e2833001	 add         r3, r3, #1
  01120	e58d3008	 str         r3, [sp, #8]

; 607  :             }

  01124	eaffffd3	 b           |$LN6@TWL_IntrTh|
  01128		 |$LN5@TWL_IntrTh|
  01128		 |$LN7@TWL_IntrTh|

; 608  :         }
; 609  :         // Set fake interrupt event
; 610  :         if (pDevice->hSetIntrEvent[16] != NULL) {

  01128	e59d300c	 ldr         r3, [sp, #0xC]
  0112c	e283307c	 add         r3, r3, #0x7C
  01130	e5933000	 ldr         r3, [r3]
  01134	e3530000	 cmp         r3, #0
  01138	0a000003	 beq         |$LN1@TWL_IntrTh|

; 611  :             // Use pulse event there in case that event is already
; 612  :             // signaled as associated with some interrupt...
; 613  :             PulseEvent(pDevice->hSetIntrEvent[16]);

  0113c	e59d300c	 ldr         r3, [sp, #0xC]
  01140	e283307c	 add         r3, r3, #0x7C
  01144	e5930000	 ldr         r0, [r3]
  01148	eb000000	 bl          PulseEvent
  0114c		 |$LN1@TWL_IntrTh|

; 614  :         }
; 615  :         
; 616  :         InterruptDone(pDevice->sysIntr);

  0114c	e59d300c	 ldr         r3, [sp, #0xC]
  01150	e283302c	 add         r3, r3, #0x2C
  01154	e5930000	 ldr         r0, [r3]
  01158	eb000000	 bl          InterruptDone

; 617  :     }

  0115c	eaffff9b	 b           |$LN10@TWL_IntrTh|
  01160		 |$LN9@TWL_IntrTh|

; 618  : 
; 619  :     return ERROR_SUCCESS;

  01160	e3a03000	 mov         r3, #0
  01164	e58d301c	 str         r3, [sp, #0x1C]

; 620  : }

  01168	e59d001c	 ldr         r0, [sp, #0x1C]
  0116c	e28dd028	 add         sp, sp, #0x28
  01170	e89d6000	 ldmia       sp, {sp, lr}
  01174	e12fff1e	 bx          lr
  01178		 |$LN16@TWL_IntrTh|
  01178		 |$LN17@TWL_IntrTh|
  01178	01011008	 DCD         0x1011008
  0117c		 |$M43671|

			 ENDP  ; |TWL_IntrThread|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43681| DCD	|$LN5@PulseEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PulseEvent| PROC

; 211  : _inline BOOL PulseEvent(HANDLE h) {

  00000		 |$LN5@PulseEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M43678|

; 212  : 	return EventModify(h,EVENT_PULSE);

  00010	e3a01001	 mov         r1, #1
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 213  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M43679|

			 ENDP  ; |PulseEvent|

	EXPORT	|??_C@_1GG@FNJCDALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@| [ DATA ] ; `string'

  00050			 AREA	 |.pdata|, PDATA
|$T43691| DCD	|$LN9@TWL_ReadRe|
	DCD	0x40002d04
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\triton\triton.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@FNJCDALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0117c			 AREA	 |.text|, CODE, ARM

  0117c		 |TWL_ReadRegs| PROC

; 632  : {

  0117c		 |$LN9@TWL_ReadRe|
  0117c	e1a0c00d	 mov         r12, sp
  01180	e92d000f	 stmdb       sp!, {r0 - r3}
  01184	e92d5000	 stmdb       sp!, {r12, lr}
  01188	e24dd014	 sub         sp, sp, #0x14
  0118c		 |$M43688|

; 633  :     BOOL rc = FALSE;

  0118c	e3a03000	 mov         r3, #0
  01190	e58d3004	 str         r3, [sp, #4]

; 634  :     Device_t *pDevice = (Device_t*)context;

  01194	e59d301c	 ldr         r3, [sp, #0x1C]
  01198	e58d3000	 str         r3, [sp]

; 635  : 
; 636  :     // Check if we get correct context
; 637  :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))

  0119c	e59d3000	 ldr         r3, [sp]
  011a0	e3530000	 cmp         r3, #0
  011a4	0a000004	 beq         |$LN1@TWL_ReadRe|
  011a8	e59d3000	 ldr         r3, [sp]
  011ac	e5932000	 ldr         r2, [r3]
  011b0	e59f3074	 ldr         r3, [pc, #0x74]
  011b4	e1520003	 cmp         r2, r3
  011b8	0a00000b	 beq         |$LN2@TWL_ReadRe|
  011bc		 |$LN1@TWL_ReadRe|

; 638  :         {
; 639  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_ReadRegs: "
; 640  :             L"Incorrect context parameter\r\n"
; 641  :             ));

  011bc	e59f3064	 ldr         r3, [pc, #0x64]
  011c0	e5933440	 ldr         r3, [r3, #0x440]
  011c4	e3130001	 tst         r3, #1
  011c8	0a000004	 beq         |$LN5@TWL_ReadRe|
  011cc	e59f0050	 ldr         r0, [pc, #0x50]
  011d0	eb000000	 bl          NKDbgPrintfW
  011d4	e3a03001	 mov         r3, #1
  011d8	e58d300c	 str         r3, [sp, #0xC]
  011dc	ea000001	 b           |$LN6@TWL_ReadRe|
  011e0		 |$LN5@TWL_ReadRe|
  011e0	e3a03000	 mov         r3, #0
  011e4	e58d300c	 str         r3, [sp, #0xC]
  011e8		 |$LN6@TWL_ReadRe|

; 642  :         goto cleanUp;

  011e8	ea000007	 b           |$cleanUp$43260|
  011ec		 |$LN2@TWL_ReadRe|

; 643  :         }
; 644  : 
; 645  :     rc = ReadRegs(pDevice, address, pBuffer, size);

  011ec	e59d3028	 ldr         r3, [sp, #0x28]
  011f0	e59d2024	 ldr         r2, [sp, #0x24]
  011f4	e59d1020	 ldr         r1, [sp, #0x20]
  011f8	e59d0000	 ldr         r0, [sp]
  011fc	eb000000	 bl          ReadRegs
  01200	e58d0010	 str         r0, [sp, #0x10]
  01204	e59d3010	 ldr         r3, [sp, #0x10]
  01208	e58d3004	 str         r3, [sp, #4]
  0120c		 |$cleanUp$43260|

; 646  :     
; 647  : cleanUp:
; 648  :     return rc;

  0120c	e59d3004	 ldr         r3, [sp, #4]
  01210	e58d3008	 str         r3, [sp, #8]

; 649  : }

  01214	e59d0008	 ldr         r0, [sp, #8]
  01218	e28dd014	 add         sp, sp, #0x14
  0121c	e89d6000	 ldmia       sp, {sp, lr}
  01220	e12fff1e	 bx          lr
  01224		 |$LN10@TWL_ReadRe|
  01224		 |$LN11@TWL_ReadRe|
  01224	00000000	 DCD         |??_C@_1GG@FNJCDALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAR?$AAe?$AAa?$AAd?$AAR?$AAe?$AAg?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@|
  01228		 |$LN12@TWL_ReadRe|
  01228	00000000	 DCD         |dpCurSettings|
  0122c		 |$LN13@TWL_ReadRe|
  0122c	74776c44	 DCD         0x74776c44
  01230		 |$M43689|

			 ENDP  ; |TWL_ReadRegs|

	EXPORT	|??_C@_1GI@BKGPCMNH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAg?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'

  00058			 AREA	 |.pdata|, PDATA
|$T43703| DCD	|$LN9@TWL_WriteR|
	DCD	0x40002d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@BKGPCMNH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAg?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01230			 AREA	 |.text|, CODE, ARM

  01230		 |TWL_WriteRegs| PROC

; 661  : {

  01230		 |$LN9@TWL_WriteR|
  01230	e1a0c00d	 mov         r12, sp
  01234	e92d000f	 stmdb       sp!, {r0 - r3}
  01238	e92d5000	 stmdb       sp!, {r12, lr}
  0123c	e24dd014	 sub         sp, sp, #0x14
  01240		 |$M43700|

; 662  :     BOOL rc = FALSE;

  01240	e3a03000	 mov         r3, #0
  01244	e58d3004	 str         r3, [sp, #4]

; 663  :     Device_t *pDevice = (Device_t*)context;

  01248	e59d301c	 ldr         r3, [sp, #0x1C]
  0124c	e58d3000	 str         r3, [sp]

; 664  : 
; 665  :     // Check if we get correct context
; 666  :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))

  01250	e59d3000	 ldr         r3, [sp]
  01254	e3530000	 cmp         r3, #0
  01258	0a000004	 beq         |$LN1@TWL_WriteR|
  0125c	e59d3000	 ldr         r3, [sp]
  01260	e5932000	 ldr         r2, [r3]
  01264	e59f3074	 ldr         r3, [pc, #0x74]
  01268	e1520003	 cmp         r2, r3
  0126c	0a00000b	 beq         |$LN2@TWL_WriteR|
  01270		 |$LN1@TWL_WriteR|

; 667  :         {
; 668  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_WriteRegs: "
; 669  :             L"Incorrect context parameter\r\n"
; 670  :             ));

  01270	e59f3064	 ldr         r3, [pc, #0x64]
  01274	e5933440	 ldr         r3, [r3, #0x440]
  01278	e3130001	 tst         r3, #1
  0127c	0a000004	 beq         |$LN5@TWL_WriteR|
  01280	e59f0050	 ldr         r0, [pc, #0x50]
  01284	eb000000	 bl          NKDbgPrintfW
  01288	e3a03001	 mov         r3, #1
  0128c	e58d300c	 str         r3, [sp, #0xC]
  01290	ea000001	 b           |$LN6@TWL_WriteR|
  01294		 |$LN5@TWL_WriteR|
  01294	e3a03000	 mov         r3, #0
  01298	e58d300c	 str         r3, [sp, #0xC]
  0129c		 |$LN6@TWL_WriteR|

; 671  :         goto cleanUp;

  0129c	ea000007	 b           |$cleanUp$43278|
  012a0		 |$LN2@TWL_WriteR|

; 672  :         }
; 673  : 
; 674  :     rc = WriteRegs(pDevice, address, pBuffer, size);

  012a0	e59d3028	 ldr         r3, [sp, #0x28]
  012a4	e59d2024	 ldr         r2, [sp, #0x24]
  012a8	e59d1020	 ldr         r1, [sp, #0x20]
  012ac	e59d0000	 ldr         r0, [sp]
  012b0	eb000000	 bl          WriteRegs
  012b4	e58d0010	 str         r0, [sp, #0x10]
  012b8	e59d3010	 ldr         r3, [sp, #0x10]
  012bc	e58d3004	 str         r3, [sp, #4]
  012c0		 |$cleanUp$43278|

; 675  :     
; 676  : cleanUp:
; 677  :     return rc;

  012c0	e59d3004	 ldr         r3, [sp, #4]
  012c4	e58d3008	 str         r3, [sp, #8]

; 678  : }

  012c8	e59d0008	 ldr         r0, [sp, #8]
  012cc	e28dd014	 add         sp, sp, #0x14
  012d0	e89d6000	 ldmia       sp, {sp, lr}
  012d4	e12fff1e	 bx          lr
  012d8		 |$LN10@TWL_WriteR|
  012d8		 |$LN11@TWL_WriteR|
  012d8	00000000	 DCD         |??_C@_1GI@BKGPCMNH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAg?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  012dc		 |$LN12@TWL_WriteR|
  012dc	00000000	 DCD         |dpCurSettings|
  012e0		 |$LN13@TWL_WriteR|
  012e0	74776c44	 DCD         0x74776c44
  012e4		 |$M43701|

			 ENDP  ; |TWL_WriteRegs|

	EXPORT	|??_C@_1IO@BCGGCEFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@DIJCOPEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAh@| [ DATA ] ; `string'
	EXPORT	|GetCurrentProcess|
	EXPORT	|??_C@_1JC@JANLEINJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@MCBHOOKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@IJKKCIGC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@| [ DATA ] ; `string'
	IMPORT	|DuplicateHandle|

  00060			 AREA	 |.pdata|, PDATA
|$T43726| DCD	|$LN24@TWL_SetInt|
	DCD	0x4000a804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@BCGGCEFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "I", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "s"
	DCB	0x0, "s", 0x0, "o", 0x0, "c", 0x0, "i", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t"
	DCB	0x0, "h", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@DIJCOPEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAh@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "d", 0x0, "u", 0x0, "p", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@JANLEINJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "I", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " "
	DCB	0x0, "a", 0x0, "s", 0x0, "s", 0x0, "o", 0x0, "c", 0x0, "i"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@MCBHOOKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, " ", 0x0, "I", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@IJKKCIGC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  012e4			 AREA	 |.text|, CODE, ARM

  012e4		 |TWL_SetIntrEvent| PROC

; 692  : {

  012e4		 |$LN24@TWL_SetInt|
  012e4	e1a0c00d	 mov         r12, sp
  012e8	e92d0007	 stmdb       sp!, {r0 - r2}
  012ec	e92d5000	 stmdb       sp!, {r12, lr}
  012f0	e24dd048	 sub         sp, sp, #0x48
  012f4		 |$M43723|

; 693  :     BOOL rc = FALSE;

  012f4	e3a03000	 mov         r3, #0
  012f8	e58d3010	 str         r3, [sp, #0x10]

; 694  :     Device_t *pDevice = (Device_t*)context;

  012fc	e59d3050	 ldr         r3, [sp, #0x50]
  01300	e58d300c	 str         r3, [sp, #0xC]

; 695  : 
; 696  :     // Check if we get correct context
; 697  :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE)) {

  01304	e59d300c	 ldr         r3, [sp, #0xC]
  01308	e3530000	 cmp         r3, #0
  0130c	0a000004	 beq         |$LN8@TWL_SetInt|
  01310	e59d300c	 ldr         r3, [sp, #0xC]
  01314	e5932000	 ldr         r2, [r3]
  01318	e59f3260	 ldr         r3, [pc, #0x260]
  0131c	e1520003	 cmp         r2, r3
  01320	0a00000b	 beq         |$LN9@TWL_SetInt|
  01324		 |$LN8@TWL_SetInt|

; 698  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_SetIntrEvent: "
; 699  :             L"Incorrect context parameter\r\n"
; 700  :             ));

  01324	e59f3240	 ldr         r3, [pc, #0x240]
  01328	e5933440	 ldr         r3, [r3, #0x440]
  0132c	e3130001	 tst         r3, #1
  01330	0a000004	 beq         |$LN12@TWL_SetInt|
  01334	e59f0240	 ldr         r0, [pc, #0x240]
  01338	eb000000	 bl          NKDbgPrintfW
  0133c	e3a03001	 mov         r3, #1
  01340	e58d3024	 str         r3, [sp, #0x24]
  01344	ea000001	 b           |$LN13@TWL_SetInt|
  01348		 |$LN12@TWL_SetInt|
  01348	e3a03000	 mov         r3, #0
  0134c	e58d3024	 str         r3, [sp, #0x24]
  01350		 |$LN13@TWL_SetInt|

; 701  :         goto cleanUp;

  01350	ea00007e	 b           |$cleanUp$43294|
  01354		 |$LN9@TWL_SetInt|

; 702  :     }
; 703  : 
; 704  :     if ((intrId > 16) && (intrId != (-1))) {

  01354	e59d3054	 ldr         r3, [sp, #0x54]
  01358	e3530010	 cmp         r3, #0x10
  0135c	9a00000f	 bls         |$LN7@TWL_SetInt|
  01360	e59d3054	 ldr         r3, [sp, #0x54]
  01364	e3730001	 cmn         r3, #1
  01368	0a00000c	 beq         |$LN7@TWL_SetInt|

; 705  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_SetIntrEvent: "
; 706  :             L"Incorrect interrupt Id %d\r\n", intrId
; 707  :             ));

  0136c	e59f31f8	 ldr         r3, [pc, #0x1F8]
  01370	e5933440	 ldr         r3, [r3, #0x440]
  01374	e3130001	 tst         r3, #1
  01378	0a000005	 beq         |$LN14@TWL_SetInt|
  0137c	e59d1054	 ldr         r1, [sp, #0x54]
  01380	e59f01f0	 ldr         r0, [pc, #0x1F0]
  01384	eb000000	 bl          NKDbgPrintfW
  01388	e3a03001	 mov         r3, #1
  0138c	e58d3028	 str         r3, [sp, #0x28]
  01390	ea000001	 b           |$LN15@TWL_SetInt|
  01394		 |$LN14@TWL_SetInt|
  01394	e3a03000	 mov         r3, #0
  01398	e58d3028	 str         r3, [sp, #0x28]
  0139c		 |$LN15@TWL_SetInt|

; 708  :         goto cleanUp;

  0139c	ea00006b	 b           |$cleanUp$43294|
  013a0		 |$LN7@TWL_SetInt|

; 709  :     }
; 710  : 
; 711  :     // Common interrupt is stored in last position
; 712  :     if (intrId == (-1)) intrId = 16;

  013a0	e59d3054	 ldr         r3, [sp, #0x54]
  013a4	e3730001	 cmn         r3, #1
  013a8	1a000001	 bne         |$LN6@TWL_SetInt|
  013ac	e3a03010	 mov         r3, #0x10
  013b0	e58d3054	 str         r3, [sp, #0x54]
  013b4		 |$LN6@TWL_SetInt|

; 713  : 
; 714  :     // If handle isn't NULL we set new association, 
; 715  :     // otherwise we delete it....
; 716  :     if (hEvent != NULL) {

  013b4	e59d3058	 ldr         r3, [sp, #0x58]
  013b8	e3530000	 cmp         r3, #0
  013bc	0a00003b	 beq         |$LN5@TWL_SetInt|

; 717  :         if (pDevice->hSetIntrEvent[intrId] != NULL) {

  013c0	e59d300c	 ldr         r3, [sp, #0xC]
  013c4	e283103c	 add         r1, r3, #0x3C
  013c8	e59d2054	 ldr         r2, [sp, #0x54]
  013cc	e3a03004	 mov         r3, #4
  013d0	e0030392	 mul         r3, r2, r3
  013d4	e0813003	 add         r3, r1, r3
  013d8	e5933000	 ldr         r3, [r3]
  013dc	e3530000	 cmp         r3, #0
  013e0	0a00000b	 beq         |$LN4@TWL_SetInt|

; 718  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_SetIntrEvent: "
; 719  :                 L"Interrupt Id %d already associated with event\r\n"
; 720  :                 ));

  013e4	e59f3180	 ldr         r3, [pc, #0x180]
  013e8	e5933440	 ldr         r3, [r3, #0x440]
  013ec	e3130001	 tst         r3, #1
  013f0	0a000004	 beq         |$LN16@TWL_SetInt|
  013f4	e59f0178	 ldr         r0, [pc, #0x178]
  013f8	eb000000	 bl          NKDbgPrintfW
  013fc	e3a03001	 mov         r3, #1
  01400	e58d302c	 str         r3, [sp, #0x2C]
  01404	ea000001	 b           |$LN17@TWL_SetInt|
  01408		 |$LN16@TWL_SetInt|
  01408	e3a03000	 mov         r3, #0
  0140c	e58d302c	 str         r3, [sp, #0x2C]
  01410		 |$LN17@TWL_SetInt|

; 721  :             goto cleanUp;

  01410	ea00004e	 b           |$cleanUp$43294|
  01414		 |$LN4@TWL_SetInt|

; 722  :         }
; 723  :         rc = DuplicateHandle(
; 724  :             GetCurrentProcess(), hEvent, GetCurrentProcess(),
; 725  :             &pDevice->hSetIntrEvent[intrId], 0, FALSE, DUPLICATE_SAME_ACCESS
; 726  :             );

  01414	eb000000	 bl          GetCurrentProcess
  01418	e58d0030	 str         r0, [sp, #0x30]
  0141c	eb000000	 bl          GetCurrentProcess
  01420	e58d0034	 str         r0, [sp, #0x34]
  01424	e3a03002	 mov         r3, #2
  01428	e58d3008	 str         r3, [sp, #8]
  0142c	e3a03000	 mov         r3, #0
  01430	e58d3004	 str         r3, [sp, #4]
  01434	e3a03000	 mov         r3, #0
  01438	e58d3000	 str         r3, [sp]
  0143c	e59d300c	 ldr         r3, [sp, #0xC]
  01440	e283103c	 add         r1, r3, #0x3C
  01444	e59d2054	 ldr         r2, [sp, #0x54]
  01448	e3a03004	 mov         r3, #4
  0144c	e0030392	 mul         r3, r2, r3
  01450	e0813003	 add         r3, r1, r3
  01454	e59d2030	 ldr         r2, [sp, #0x30]
  01458	e59d1058	 ldr         r1, [sp, #0x58]
  0145c	e59d0034	 ldr         r0, [sp, #0x34]
  01460	eb000000	 bl          DuplicateHandle
  01464	e58d0038	 str         r0, [sp, #0x38]
  01468	e59d3038	 ldr         r3, [sp, #0x38]
  0146c	e58d3010	 str         r3, [sp, #0x10]

; 727  : 
; 728  :         if (!rc) {

  01470	e59d3010	 ldr         r3, [sp, #0x10]
  01474	e3530000	 cmp         r3, #0
  01478	1a00000b	 bne         |$LN3@TWL_SetInt|

; 729  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_SetIntrEvent: "
; 730  :                 L"Event handler duplication failed\r\n"
; 731  :                 ));

  0147c	e59f30e8	 ldr         r3, [pc, #0xE8]
  01480	e5933440	 ldr         r3, [r3, #0x440]
  01484	e3130001	 tst         r3, #1
  01488	0a000004	 beq         |$LN18@TWL_SetInt|
  0148c	e59f00dc	 ldr         r0, [pc, #0xDC]
  01490	eb000000	 bl          NKDbgPrintfW
  01494	e3a03001	 mov         r3, #1
  01498	e58d303c	 str         r3, [sp, #0x3C]
  0149c	ea000001	 b           |$LN19@TWL_SetInt|
  014a0		 |$LN18@TWL_SetInt|
  014a0	e3a03000	 mov         r3, #0
  014a4	e58d303c	 str         r3, [sp, #0x3C]
  014a8		 |$LN19@TWL_SetInt|

; 732  :             goto cleanUp;

  014a8	ea000028	 b           |$cleanUp$43294|
  014ac		 |$LN3@TWL_SetInt|

; 733  :         }
; 734  :     }
; 735  :     else {

  014ac	ea000027	 b           |$LN2@TWL_SetInt|
  014b0		 |$LN5@TWL_SetInt|

; 736  :         if (pDevice->hSetIntrEvent[intrId] == NULL) {

  014b0	e59d300c	 ldr         r3, [sp, #0xC]
  014b4	e283103c	 add         r1, r3, #0x3C
  014b8	e59d2054	 ldr         r2, [sp, #0x54]
  014bc	e3a03004	 mov         r3, #4
  014c0	e0030392	 mul         r3, r2, r3
  014c4	e0813003	 add         r3, r1, r3
  014c8	e5933000	 ldr         r3, [r3]
  014cc	e3530000	 cmp         r3, #0
  014d0	1a00000b	 bne         |$LN1@TWL_SetInt|

; 737  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_SetIntrEvent: "
; 738  :                 L"Interrupt Id %d isn't associated with event\r\n"
; 739  :                 ));

  014d4	e59f3090	 ldr         r3, [pc, #0x90]
  014d8	e5933440	 ldr         r3, [r3, #0x440]
  014dc	e3130001	 tst         r3, #1
  014e0	0a000004	 beq         |$LN20@TWL_SetInt|
  014e4	e59f007c	 ldr         r0, [pc, #0x7C]
  014e8	eb000000	 bl          NKDbgPrintfW
  014ec	e3a03001	 mov         r3, #1
  014f0	e58d3040	 str         r3, [sp, #0x40]
  014f4	ea000001	 b           |$LN21@TWL_SetInt|
  014f8		 |$LN20@TWL_SetInt|
  014f8	e3a03000	 mov         r3, #0
  014fc	e58d3040	 str         r3, [sp, #0x40]
  01500		 |$LN21@TWL_SetInt|

; 740  :             goto cleanUp;

  01500	ea000012	 b           |$cleanUp$43294|
  01504		 |$LN1@TWL_SetInt|

; 741  :         }
; 742  :         rc = CloseHandle(pDevice->hSetIntrEvent[intrId]);

  01504	e59d300c	 ldr         r3, [sp, #0xC]
  01508	e283103c	 add         r1, r3, #0x3C
  0150c	e59d2054	 ldr         r2, [sp, #0x54]
  01510	e3a03004	 mov         r3, #4
  01514	e0030392	 mul         r3, r2, r3
  01518	e0813003	 add         r3, r1, r3
  0151c	e5930000	 ldr         r0, [r3]
  01520	eb000000	 bl          CloseHandle
  01524	e58d0044	 str         r0, [sp, #0x44]
  01528	e59d3044	 ldr         r3, [sp, #0x44]
  0152c	e58d3010	 str         r3, [sp, #0x10]

; 743  :         pDevice->hSetIntrEvent[intrId] = NULL;

  01530	e59d300c	 ldr         r3, [sp, #0xC]
  01534	e283103c	 add         r1, r3, #0x3C
  01538	e59d2054	 ldr         r2, [sp, #0x54]
  0153c	e3a03004	 mov         r3, #4
  01540	e0030392	 mul         r3, r2, r3
  01544	e0812003	 add         r2, r1, r3
  01548	e3a03000	 mov         r3, #0
  0154c	e5823000	 str         r3, [r2]
  01550		 |$LN2@TWL_SetInt|
  01550		 |$cleanUp$43294|

; 744  :     }
; 745  :             
; 746  : cleanUp:
; 747  :     return rc;

  01550	e59d3010	 ldr         r3, [sp, #0x10]
  01554	e58d3020	 str         r3, [sp, #0x20]

; 748  : }

  01558	e59d0020	 ldr         r0, [sp, #0x20]
  0155c	e28dd048	 add         sp, sp, #0x48
  01560	e89d6000	 ldmia       sp, {sp, lr}
  01564	e12fff1e	 bx          lr
  01568		 |$LN25@TWL_SetInt|
  01568		 |$LN26@TWL_SetInt|
  01568	00000000	 DCD         |??_C@_1IO@BCGGCEFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@|
  0156c		 |$LN27@TWL_SetInt|
  0156c	00000000	 DCD         |dpCurSettings|
  01570		 |$LN28@TWL_SetInt|
  01570	00000000	 DCD         |??_C@_1HI@DIJCOPEF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAh@|
  01574		 |$LN29@TWL_SetInt|
  01574	00000000	 DCD         |??_C@_1JC@JANLEINJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@|
  01578		 |$LN30@TWL_SetInt|
  01578	00000000	 DCD         |??_C@_1GK@MCBHOOKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@|
  0157c		 |$LN31@TWL_SetInt|
  0157c	00000000	 DCD         |??_C@_1GO@IJKKCIGC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAS?$AAe?$AAt?$AAI?$AAn?$AAt?$AAr?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@|
  01580		 |$LN32@TWL_SetInt|
  01580	74776c44	 DCD         0x74776c44
  01584		 |$M43724|

			 ENDP  ; |TWL_SetIntrEvent|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43740| DCD	|$LN5@GetCurrent@2|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcess| PROC

; 361  : _inline HANDLE GetCurrentProcess(void) {

  00000		 |$LN5@GetCurrent@2|
  00000	e24dd004	 sub         sp, sp, #4
  00004		 |$M43737|

; 362  : 	return ((HANDLE)(SH_CURPROC+SYS_HANDLE_BASE));

  00004	e3a03042	 mov         r3, #0x42
  00008	e58d3000	 str         r3, [sp]

; 363  : }

  0000c	e59d0000	 ldr         r0, [sp]
  00010	e28dd004	 add         sp, sp, #4
  00014	e12fff1e	 bx          lr
  00018		 |$M43738|

			 ENDP  ; |GetCurrentProcess|

	EXPORT	|??_C@_1GG@NCNLMCCA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@DNOJAGBF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt@| [ DATA ] ; `string'
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|

  00068			 AREA	 |.pdata|, PDATA
|$T43752| DCD	|$LN16@TWL_IntrEn|
	DCD	0x40006504
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\triton\triton.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@NCNLMCCA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " "
	DCB	0x0, "I", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@DNOJAGBF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01584			 AREA	 |.text|, CODE, ARM

  01584		 |TWL_IntrEnable| PROC

; 759  : {

  01584		 |$LN16@TWL_IntrEn|
  01584	e1a0c00d	 mov         r12, sp
  01588	e92d0003	 stmdb       sp!, {r0, r1}
  0158c	e92d5000	 stmdb       sp!, {r12, lr}
  01590	e24dd020	 sub         sp, sp, #0x20
  01594		 |$M43749|

; 760  :     BOOL rc = FALSE;

  01594	e3a03000	 mov         r3, #0
  01598	e58d3004	 str         r3, [sp, #4]

; 761  :     Device_t *pDevice = (Device_t*)context;

  0159c	e59d3028	 ldr         r3, [sp, #0x28]
  015a0	e58d3000	 str         r3, [sp]

; 762  :     BYTE   mask;
; 763  :     BYTE   offset;
; 764  : 
; 765  :     // Check if we get correct context
; 766  :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE)) {

  015a4	e59d3000	 ldr         r3, [sp]
  015a8	e3530000	 cmp         r3, #0
  015ac	0a000004	 beq         |$LN6@TWL_IntrEn|
  015b0	e59d3000	 ldr         r3, [sp]
  015b4	e5932000	 ldr         r2, [r3]
  015b8	e59f3154	 ldr         r3, [pc, #0x154]
  015bc	e1520003	 cmp         r2, r3
  015c0	0a00000b	 beq         |$LN7@TWL_IntrEn|
  015c4		 |$LN6@TWL_IntrEn|

; 767  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IntrEnable: "
; 768  :             L"Incorrect context parameter\r\n"
; 769  :             ));

  015c4	e59f3140	 ldr         r3, [pc, #0x140]
  015c8	e5933440	 ldr         r3, [r3, #0x440]
  015cc	e3130001	 tst         r3, #1
  015d0	0a000004	 beq         |$LN10@TWL_IntrEn|
  015d4	e59f0134	 ldr         r0, [pc, #0x134]
  015d8	eb000000	 bl          NKDbgPrintfW
  015dc	e3a03001	 mov         r3, #1
  015e0	e58d3010	 str         r3, [sp, #0x10]
  015e4	ea000001	 b           |$LN11@TWL_IntrEn|
  015e8		 |$LN10@TWL_IntrEn|
  015e8	e3a03000	 mov         r3, #0
  015ec	e58d3010	 str         r3, [sp, #0x10]
  015f0		 |$LN11@TWL_IntrEn|

; 770  :         goto cleanUp;

  015f0	ea00003b	 b           |$cleanUp$43329|
  015f4		 |$LN7@TWL_IntrEn|

; 771  :     }
; 772  : 
; 773  :     if (intrId > 16)

  015f4	e59d302c	 ldr         r3, [sp, #0x2C]
  015f8	e3530010	 cmp         r3, #0x10
  015fc	9a00000c	 bls         |$LN5@TWL_IntrEn|

; 774  :         {
; 775  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IntrEnable: "
; 776  :             L"Incorrect interrupt Id %d\r\n", intrId
; 777  :             ));

  01600	e59f3104	 ldr         r3, [pc, #0x104]
  01604	e5933440	 ldr         r3, [r3, #0x440]
  01608	e3130001	 tst         r3, #1
  0160c	0a000005	 beq         |$LN12@TWL_IntrEn|
  01610	e59d102c	 ldr         r1, [sp, #0x2C]
  01614	e59f00ec	 ldr         r0, [pc, #0xEC]
  01618	eb000000	 bl          NKDbgPrintfW
  0161c	e3a03001	 mov         r3, #1
  01620	e58d3014	 str         r3, [sp, #0x14]
  01624	ea000001	 b           |$LN13@TWL_IntrEn|
  01628		 |$LN12@TWL_IntrEn|
  01628	e3a03000	 mov         r3, #0
  0162c	e58d3014	 str         r3, [sp, #0x14]
  01630		 |$LN13@TWL_IntrEn|

; 778  :         goto cleanUp;

  01630	ea00002b	 b           |$cleanUp$43329|
  01634		 |$LN5@TWL_IntrEn|

; 779  :         }
; 780  : 
; 781  :     // We have take critical section there to avoid concurrent
; 782  :     // enable register modification
; 783  : 
; 784  :     if (intrId < 8) {

  01634	e59d302c	 ldr         r3, [sp, #0x2C]
  01638	e3530008	 cmp         r3, #8
  0163c	2a000002	 bcs         |$LN4@TWL_IntrEn|

; 785  :         offset = MENELAUS_INTMASK1_OFFSET;

  01640	e3a03017	 mov         r3, #0x17
  01644	e5cd3009	 strb        r3, [sp, #9]

; 786  :     }
; 787  :     else {

  01648	ea000004	 b           |$LN3@TWL_IntrEn|
  0164c		 |$LN4@TWL_IntrEn|

; 788  :         offset = MENELAUS_INTMASK2_OFFSET;

  0164c	e3a03018	 mov         r3, #0x18
  01650	e5cd3009	 strb        r3, [sp, #9]

; 789  :         intrId -= 8;

  01654	e59d302c	 ldr         r3, [sp, #0x2C]
  01658	e2433008	 sub         r3, r3, #8
  0165c	e58d302c	 str         r3, [sp, #0x2C]
  01660		 |$LN3@TWL_IntrEn|

; 790  :     }
; 791  : 
; 792  :     EnterCriticalSection(&pDevice->cs);

  01660	e59d3000	 ldr         r3, [sp]
  01664	e2830018	 add         r0, r3, #0x18
  01668	eb000000	 bl          EnterCriticalSection

; 793  : 
; 794  :     // Get actual mask
; 795  :     if (!ReadRegs(pDevice, offset, &mask, sizeof(mask))) {

  0166c	e3a03001	 mov         r3, #1
  01670	e28d2008	 add         r2, sp, #8
  01674	e5dd1009	 ldrb        r1, [sp, #9]
  01678	e59d0000	 ldr         r0, [sp]
  0167c	eb000000	 bl          ReadRegs
  01680	e58d0018	 str         r0, [sp, #0x18]
  01684	e59d3018	 ldr         r3, [sp, #0x18]
  01688	e3530000	 cmp         r3, #0
  0168c	1a000000	 bne         |$LN2@TWL_IntrEn|

; 796  :         goto cleanUp;

  01690	ea000013	 b           |$cleanUp$43329|
  01694		 |$LN2@TWL_IntrEn|

; 797  :     }
; 798  : 
; 799  :     // Enable interrupt
; 800  :     mask &= ~(1 << intrId);

  01694	e59d202c	 ldr         r2, [sp, #0x2C]
  01698	e3a03001	 mov         r3, #1
  0169c	e1a03213	 mov         r3, r3, lsl r2
  016a0	e1e02003	 mvn         r2, r3
  016a4	e5dd3008	 ldrb        r3, [sp, #8]
  016a8	e0033002	 and         r3, r3, r2
  016ac	e20330ff	 and         r3, r3, #0xFF
  016b0	e5cd3008	 strb        r3, [sp, #8]

; 801  : 
; 802  :     // Write it back
; 803  :     if (!WriteRegs(pDevice, offset, &mask, sizeof(mask))) {

  016b4	e3a03001	 mov         r3, #1
  016b8	e28d2008	 add         r2, sp, #8
  016bc	e5dd1009	 ldrb        r1, [sp, #9]
  016c0	e59d0000	 ldr         r0, [sp]
  016c4	eb000000	 bl          WriteRegs
  016c8	e58d001c	 str         r0, [sp, #0x1C]
  016cc	e59d301c	 ldr         r3, [sp, #0x1C]
  016d0	e3530000	 cmp         r3, #0
  016d4	1a000000	 bne         |$LN1@TWL_IntrEn|

; 804  :         goto cleanUp;

  016d8	ea000001	 b           |$cleanUp$43329|
  016dc		 |$LN1@TWL_IntrEn|

; 805  :     }
; 806  : 
; 807  :     rc = TRUE;

  016dc	e3a03001	 mov         r3, #1
  016e0	e58d3004	 str         r3, [sp, #4]
  016e4		 |$cleanUp$43329|

; 808  :     
; 809  : cleanUp:
; 810  :     LeaveCriticalSection(&pDevice->cs);

  016e4	e59d3000	 ldr         r3, [sp]
  016e8	e2830018	 add         r0, r3, #0x18
  016ec	eb000000	 bl          LeaveCriticalSection

; 811  :     return rc;

  016f0	e59d3004	 ldr         r3, [sp, #4]
  016f4	e58d300c	 str         r3, [sp, #0xC]

; 812  : }

  016f8	e59d000c	 ldr         r0, [sp, #0xC]
  016fc	e28dd020	 add         sp, sp, #0x20
  01700	e89d6000	 ldmia       sp, {sp, lr}
  01704	e12fff1e	 bx          lr
  01708		 |$LN17@TWL_IntrEn|
  01708		 |$LN18@TWL_IntrEn|
  01708	00000000	 DCD         |??_C@_1GG@NCNLMCCA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt@|
  0170c		 |$LN19@TWL_IntrEn|
  0170c	00000000	 DCD         |dpCurSettings|
  01710		 |$LN20@TWL_IntrEn|
  01710	00000000	 DCD         |??_C@_1GK@DNOJAGBF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt@|
  01714		 |$LN21@TWL_IntrEn|
  01714	74776c44	 DCD         0x74776c44
  01718		 |$M43750|

			 ENDP  ; |TWL_IntrEnable|

	EXPORT	|??_C@_1GI@CGPDBAKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@KLIFGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc@| [ DATA ] ; `string'

  00070			 AREA	 |.pdata|, PDATA
|$T43767| DCD	|$LN16@TWL_IntrDi|
	DCD	0x40006404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@CGPDBAKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "I", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@KLIFGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01718			 AREA	 |.text|, CODE, ARM

  01718		 |TWL_IntrDisable| PROC

; 823  : {

  01718		 |$LN16@TWL_IntrDi|
  01718	e1a0c00d	 mov         r12, sp
  0171c	e92d0003	 stmdb       sp!, {r0, r1}
  01720	e92d5000	 stmdb       sp!, {r12, lr}
  01724	e24dd020	 sub         sp, sp, #0x20
  01728		 |$M43764|

; 824  :     BOOL rc = FALSE;

  01728	e3a03000	 mov         r3, #0
  0172c	e58d3004	 str         r3, [sp, #4]

; 825  :     Device_t *pDevice = (Device_t*)context;

  01730	e59d3028	 ldr         r3, [sp, #0x28]
  01734	e58d3000	 str         r3, [sp]

; 826  :     BYTE   mask;
; 827  :     BYTE   offset;
; 828  : 
; 829  :     // Check if we get correct context
; 830  :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE)) {

  01738	e59d3000	 ldr         r3, [sp]
  0173c	e3530000	 cmp         r3, #0
  01740	0a000004	 beq         |$LN6@TWL_IntrDi|
  01744	e59d3000	 ldr         r3, [sp]
  01748	e5932000	 ldr         r2, [r3]
  0174c	e59f3150	 ldr         r3, [pc, #0x150]
  01750	e1520003	 cmp         r2, r3
  01754	0a00000b	 beq         |$LN7@TWL_IntrDi|
  01758		 |$LN6@TWL_IntrDi|

; 831  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IntrDisable: "
; 832  :             L"Incorrect context parameter\r\n"
; 833  :             ));

  01758	e59f313c	 ldr         r3, [pc, #0x13C]
  0175c	e5933440	 ldr         r3, [r3, #0x440]
  01760	e3130001	 tst         r3, #1
  01764	0a000004	 beq         |$LN10@TWL_IntrDi|
  01768	e59f0130	 ldr         r0, [pc, #0x130]
  0176c	eb000000	 bl          NKDbgPrintfW
  01770	e3a03001	 mov         r3, #1
  01774	e58d3010	 str         r3, [sp, #0x10]
  01778	ea000001	 b           |$LN11@TWL_IntrDi|
  0177c		 |$LN10@TWL_IntrDi|
  0177c	e3a03000	 mov         r3, #0
  01780	e58d3010	 str         r3, [sp, #0x10]
  01784		 |$LN11@TWL_IntrDi|

; 834  :         goto cleanUp;

  01784	ea00003a	 b           |$cleanUp$43352|
  01788		 |$LN7@TWL_IntrDi|

; 835  :     }
; 836  : 
; 837  :     if (intrId > 16)

  01788	e59d302c	 ldr         r3, [sp, #0x2C]
  0178c	e3530010	 cmp         r3, #0x10
  01790	9a00000c	 bls         |$LN5@TWL_IntrDi|

; 838  :         {
; 839  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IntrDisable: "
; 840  :             L"Incorrect interrupt Id %d\r\n", intrId
; 841  :             ));

  01794	e59f3100	 ldr         r3, [pc, #0x100]
  01798	e5933440	 ldr         r3, [r3, #0x440]
  0179c	e3130001	 tst         r3, #1
  017a0	0a000005	 beq         |$LN12@TWL_IntrDi|
  017a4	e59d102c	 ldr         r1, [sp, #0x2C]
  017a8	e59f00e8	 ldr         r0, [pc, #0xE8]
  017ac	eb000000	 bl          NKDbgPrintfW
  017b0	e3a03001	 mov         r3, #1
  017b4	e58d3014	 str         r3, [sp, #0x14]
  017b8	ea000001	 b           |$LN13@TWL_IntrDi|
  017bc		 |$LN12@TWL_IntrDi|
  017bc	e3a03000	 mov         r3, #0
  017c0	e58d3014	 str         r3, [sp, #0x14]
  017c4		 |$LN13@TWL_IntrDi|

; 842  :         goto cleanUp;

  017c4	ea00002a	 b           |$cleanUp$43352|
  017c8		 |$LN5@TWL_IntrDi|

; 843  :         }
; 844  :     
; 845  :     if (intrId < 8)

  017c8	e59d302c	 ldr         r3, [sp, #0x2C]
  017cc	e3530008	 cmp         r3, #8
  017d0	2a000002	 bcs         |$LN4@TWL_IntrDi|

; 846  :         {
; 847  :         offset = MENELAUS_INTMASK1_OFFSET;

  017d4	e3a03017	 mov         r3, #0x17
  017d8	e5cd3009	 strb        r3, [sp, #9]

; 848  :         }
; 849  :     else

  017dc	ea000004	 b           |$LN3@TWL_IntrDi|
  017e0		 |$LN4@TWL_IntrDi|

; 850  :         {
; 851  :         offset = MENELAUS_INTMASK2_OFFSET;

  017e0	e3a03018	 mov         r3, #0x18
  017e4	e5cd3009	 strb        r3, [sp, #9]

; 852  :         intrId -= 8;

  017e8	e59d302c	 ldr         r3, [sp, #0x2C]
  017ec	e2433008	 sub         r3, r3, #8
  017f0	e58d302c	 str         r3, [sp, #0x2C]
  017f4		 |$LN3@TWL_IntrDi|

; 853  :         }
; 854  : 
; 855  :     // We have take critical section there to avoid concurrent
; 856  :     // enable register modification
; 857  :     EnterCriticalSection(&pDevice->cs);

  017f4	e59d3000	 ldr         r3, [sp]
  017f8	e2830018	 add         r0, r3, #0x18
  017fc	eb000000	 bl          EnterCriticalSection

; 858  : 
; 859  :     // Get actual mask
; 860  :     if (!ReadRegs(pDevice, offset, &mask, sizeof(mask))) {

  01800	e3a03001	 mov         r3, #1
  01804	e28d2008	 add         r2, sp, #8
  01808	e5dd1009	 ldrb        r1, [sp, #9]
  0180c	e59d0000	 ldr         r0, [sp]
  01810	eb000000	 bl          ReadRegs
  01814	e58d0018	 str         r0, [sp, #0x18]
  01818	e59d3018	 ldr         r3, [sp, #0x18]
  0181c	e3530000	 cmp         r3, #0
  01820	1a000000	 bne         |$LN2@TWL_IntrDi|

; 861  :         goto cleanUp;

  01824	ea000012	 b           |$cleanUp$43352|
  01828		 |$LN2@TWL_IntrDi|

; 862  :     }
; 863  : 
; 864  :     // Disable interrupt
; 865  :     mask |= (1 << intrId);

  01828	e59d202c	 ldr         r2, [sp, #0x2C]
  0182c	e3a03001	 mov         r3, #1
  01830	e1a02213	 mov         r2, r3, lsl r2
  01834	e5dd3008	 ldrb        r3, [sp, #8]
  01838	e1833002	 orr         r3, r3, r2
  0183c	e20330ff	 and         r3, r3, #0xFF
  01840	e5cd3008	 strb        r3, [sp, #8]

; 866  : 
; 867  :     // Write it back
; 868  :     if (!WriteRegs(pDevice, offset, &mask, sizeof(mask))) {

  01844	e3a03001	 mov         r3, #1
  01848	e28d2008	 add         r2, sp, #8
  0184c	e5dd1009	 ldrb        r1, [sp, #9]
  01850	e59d0000	 ldr         r0, [sp]
  01854	eb000000	 bl          WriteRegs
  01858	e58d001c	 str         r0, [sp, #0x1C]
  0185c	e59d301c	 ldr         r3, [sp, #0x1C]
  01860	e3530000	 cmp         r3, #0
  01864	1a000000	 bne         |$LN1@TWL_IntrDi|

; 869  :         goto cleanUp;

  01868	ea000001	 b           |$cleanUp$43352|
  0186c		 |$LN1@TWL_IntrDi|

; 870  :     }
; 871  : 
; 872  :     rc = TRUE;

  0186c	e3a03001	 mov         r3, #1
  01870	e58d3004	 str         r3, [sp, #4]
  01874		 |$cleanUp$43352|

; 873  :     
; 874  : cleanUp:
; 875  :     LeaveCriticalSection(&pDevice->cs);

  01874	e59d3000	 ldr         r3, [sp]
  01878	e2830018	 add         r0, r3, #0x18
  0187c	eb000000	 bl          LeaveCriticalSection

; 876  :     return rc;

  01880	e59d3004	 ldr         r3, [sp, #4]
  01884	e58d300c	 str         r3, [sp, #0xC]

; 877  : }

  01888	e59d000c	 ldr         r0, [sp, #0xC]
  0188c	e28dd020	 add         sp, sp, #0x20
  01890	e89d6000	 ldmia       sp, {sp, lr}
  01894	e12fff1e	 bx          lr
  01898		 |$LN17@TWL_IntrDi|
  01898		 |$LN18@TWL_IntrDi|
  01898	00000000	 DCD         |??_C@_1GI@CGPDBAKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc@|
  0189c		 |$LN19@TWL_IntrDi|
  0189c	00000000	 DCD         |dpCurSettings|
  018a0		 |$LN20@TWL_IntrDi|
  018a0	00000000	 DCD         |??_C@_1GM@KLIFGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc@|
  018a4		 |$LN21@TWL_IntrDi|
  018a4	74776c44	 DCD         0x74776c44
  018a8		 |$M43765|

			 ENDP  ; |TWL_IntrDisable|

	EXPORT	|__$ArrayPad$| [ DATA ]

  00078			 AREA	 |.pdata|, PDATA
|$T43782| DCD	|$LN7@ReadRegs|
	DCD	0xc0003504

  0000c			 AREA	 |.xdata|, DATA
|$T43778| DCD	0xffffffdc
; Function compile flags: /Odtp

  018a8			 AREA	 |.text|, CODE, ARM

  018a8	00000000	 DCD         |__GSHandlerCheck|
  018ac	00000000	 DCD         |$T43778|

  018b0		 |ReadRegs| PROC

; 891  : {

  018b0		 |$LN7@ReadRegs|
  018b0	e1a0c00d	 mov         r12, sp
  018b4	e92d000f	 stmdb       sp!, {r0 - r3}
  018b8	e92d5000	 stmdb       sp!, {r12, lr}
  018bc	e24ddf5f	 sub         sp, sp, #0x5F, 30
  018c0		 |$M43779|
  018c0	e59f30b8	 ldr         r3, [pc, #0xB8]
  018c4	e5933000	 ldr         r3, [r3]
  018c8	e58d3170	 str         r3, [sp, #0x170]

; 892  :     I2CTRANS trans;
; 893  : 
; 894  :     ZeroMemory(&trans,sizeof(trans));

  018cc	e3a02e17	 mov         r2, #0x17, 28
  018d0	e3a01000	 mov         r1, #0
  018d4	e28d0000	 add         r0, sp, #0
  018d8	eb000000	 bl          memset

; 895  : 
; 896  :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  018dc	e3a0303c	 mov         r3, #0x3C
  018e0	e58d3008	 str         r3, [sp, #8]

; 897  :     /* first write register address */
; 898  :     trans.mOpCode[0] = I2C_OPCODE_WRITE;

  018e4	e3a03002	 mov         r3, #2
  018e8	e58d300c	 str         r3, [sp, #0xC]

; 899  :     trans.mBufferOffset[0] = 0;

  018ec	e3a03000	 mov         r3, #0
  018f0	e58d302c	 str         r3, [sp, #0x2C]

; 900  :     trans.mTransLen[0] = 1;

  018f4	e3a03001	 mov         r3, #1
  018f8	e58d304c	 str         r3, [sp, #0x4C]

; 901  :     trans.mBuffer[0] = (BYTE)address;

  018fc	e59d3188	 ldr         r3, [sp, #0x188]
  01900	e20330ff	 and         r3, r3, #0xFF
  01904	e5cd3070	 strb        r3, [sp, #0x70]

; 902  :     /* then read back data from that address */
; 903  :     trans.mOpCode[1] = I2C_OPCODE_READ;

  01908	e3a03001	 mov         r3, #1
  0190c	e58d3010	 str         r3, [sp, #0x10]

; 904  :     trans.mBufferOffset[1] = 0;

  01910	e3a03000	 mov         r3, #0
  01914	e58d3030	 str         r3, [sp, #0x30]

; 905  :     trans.mTransLen[1] = 1;

  01918	e3a03001	 mov         r3, #1
  0191c	e58d3050	 str         r3, [sp, #0x50]

; 906  : 
; 907  :     I2CTransact(pDevice->hI2C, &trans);

  01920	e28d1000	 add         r1, sp, #0
  01924	e59d3184	 ldr         r3, [sp, #0x184]
  01928	e2833010	 add         r3, r3, #0x10
  0192c	e5930000	 ldr         r0, [r3]
  01930	eb000000	 bl          I2CTransact

; 908  : 
; 909  :     *pBuffer = trans.mBuffer[0];

  01934	e5dd2070	 ldrb        r2, [sp, #0x70]
  01938	e59d318c	 ldr         r3, [sp, #0x18C]
  0193c	e5c32000	 strb        r2, [r3]

; 910  : 
; 911  :     return (trans.mErrorCode == 0);

  01940	e59d306c	 ldr         r3, [sp, #0x6C]
  01944	e3530000	 cmp         r3, #0
  01948	1a000002	 bne         |$LN3@ReadRegs|
  0194c	e3a03001	 mov         r3, #1
  01950	e58d3178	 str         r3, [sp, #0x178]
  01954	ea000001	 b           |$LN4@ReadRegs|
  01958		 |$LN3@ReadRegs|
  01958	e3a03000	 mov         r3, #0
  0195c	e58d3178	 str         r3, [sp, #0x178]
  01960		 |$LN4@ReadRegs|
  01960	e59d0170	 ldr         r0, [sp, #0x170]
  01964	eb000000	 bl          __security_check_cookie
  01968	e59d3178	 ldr         r3, [sp, #0x178]
  0196c	e58d3174	 str         r3, [sp, #0x174]

; 912  : }

  01970	e59d0174	 ldr         r0, [sp, #0x174]
  01974	e28ddf5f	 add         sp, sp, #0x5F, 30
  01978	e89d6000	 ldmia       sp, {sp, lr}
  0197c	e12fff1e	 bx          lr
  01980		 |$LN8@ReadRegs|
  01980		 |$LN9@ReadRegs|
  01980	00000000	 DCD         |__security_cookie|
  01984		 |$M43780|

			 ENDP  ; |ReadRegs|

	EXPORT	|__$ArrayPad$| [ DATA ]

  00080			 AREA	 |.pdata|, PDATA
|$T43794| DCD	|$LN7@WriteRegs|
	DCD	0xc0002f04

  00010			 AREA	 |.xdata|, DATA
|$T43790| DCD	0xffffffdc
; Function compile flags: /Odtp

  01984			 AREA	 |.text|, CODE, ARM

  01984	00000000	 DCD         |__GSHandlerCheck|
  01988	00000000	 DCD         |$T43790|

  0198c		 |WriteRegs| PROC

; 923  : {

  0198c		 |$LN7@WriteRegs|
  0198c	e1a0c00d	 mov         r12, sp
  01990	e92d000f	 stmdb       sp!, {r0 - r3}
  01994	e92d5000	 stmdb       sp!, {r12, lr}
  01998	e24ddf5f	 sub         sp, sp, #0x5F, 30
  0199c		 |$M43791|
  0199c	e59f30a0	 ldr         r3, [pc, #0xA0]
  019a0	e5933000	 ldr         r3, [r3]
  019a4	e58d3170	 str         r3, [sp, #0x170]

; 924  :     I2CTRANS trans;
; 925  : 
; 926  :     ZeroMemory(&trans,sizeof(trans));

  019a8	e3a02e17	 mov         r2, #0x17, 28
  019ac	e3a01000	 mov         r1, #0
  019b0	e28d0000	 add         r0, sp, #0
  019b4	eb000000	 bl          memset

; 927  :     
; 928  :     trans.mClk_HL_Divisor = I2C_CLOCK_100Khz;

  019b8	e3a0303c	 mov         r3, #0x3C
  019bc	e58d3008	 str         r3, [sp, #8]

; 929  : 
; 930  :     /* just write the register # then the data in one shot */
; 931  :     trans.mOpCode[0] = I2C_OPCODE_WRITE;

  019c0	e3a03002	 mov         r3, #2
  019c4	e58d300c	 str         r3, [sp, #0xC]

; 932  :     trans.mBufferOffset[0] = 0;

  019c8	e3a03000	 mov         r3, #0
  019cc	e58d302c	 str         r3, [sp, #0x2C]

; 933  :     trans.mTransLen[0] = 2;

  019d0	e3a03002	 mov         r3, #2
  019d4	e58d304c	 str         r3, [sp, #0x4C]

; 934  :     trans.mBuffer[0] = (BYTE)address;

  019d8	e59d3188	 ldr         r3, [sp, #0x188]
  019dc	e20330ff	 and         r3, r3, #0xFF
  019e0	e5cd3070	 strb        r3, [sp, #0x70]

; 935  :     trans.mBuffer[1] = ((UCHAR*)pBuffer)[0];

  019e4	e59d318c	 ldr         r3, [sp, #0x18C]
  019e8	e5d33000	 ldrb        r3, [r3]
  019ec	e5cd3071	 strb        r3, [sp, #0x71]

; 936  : 
; 937  :     I2CTransact(pDevice->hI2C, &trans);

  019f0	e28d1000	 add         r1, sp, #0
  019f4	e59d3184	 ldr         r3, [sp, #0x184]
  019f8	e2833010	 add         r3, r3, #0x10
  019fc	e5930000	 ldr         r0, [r3]
  01a00	eb000000	 bl          I2CTransact

; 938  : 
; 939  :     return (trans.mErrorCode == 0);

  01a04	e59d306c	 ldr         r3, [sp, #0x6C]
  01a08	e3530000	 cmp         r3, #0
  01a0c	1a000002	 bne         |$LN3@WriteRegs|
  01a10	e3a03001	 mov         r3, #1
  01a14	e58d3178	 str         r3, [sp, #0x178]
  01a18	ea000001	 b           |$LN4@WriteRegs|
  01a1c		 |$LN3@WriteRegs|
  01a1c	e3a03000	 mov         r3, #0
  01a20	e58d3178	 str         r3, [sp, #0x178]
  01a24		 |$LN4@WriteRegs|
  01a24	e59d0170	 ldr         r0, [sp, #0x170]
  01a28	eb000000	 bl          __security_check_cookie
  01a2c	e59d3178	 ldr         r3, [sp, #0x178]
  01a30	e58d3174	 str         r3, [sp, #0x174]

; 940  : }

  01a34	e59d0174	 ldr         r0, [sp, #0x174]
  01a38	e28ddf5f	 add         sp, sp, #0x5F, 30
  01a3c	e89d6000	 ldmia       sp, {sp, lr}
  01a40	e12fff1e	 bx          lr
  01a44		 |$LN8@WriteRegs|
  01a44		 |$LN9@WriteRegs|
  01a44	00000000	 DCD         |__security_cookie|
  01a48		 |$M43792|

			 ENDP  ; |WriteRegs|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00088			 AREA	 |.pdata|, PDATA
|$T43802| DCD	|$LN8@DllMain|
	DCD	0x40001404
; Function compile flags: /Odtp

  01a48			 AREA	 |.text|, CODE, ARM

  01a48		 |DllMain| PROC

; 956  : {

  01a48		 |$LN8@DllMain|
  01a48	e1a0c00d	 mov         r12, sp
  01a4c	e92d0007	 stmdb       sp!, {r0 - r2}
  01a50	e92d5000	 stmdb       sp!, {r12, lr}
  01a54	e24dd004	 sub         sp, sp, #4
  01a58		 |$M43799|

; 957  :     switch (reason)

  01a58	e59d3010	 ldr         r3, [sp, #0x10]
  01a5c	e3530001	 cmp         r3, #1
  01a60	0a000000	 beq         |$LN1@DllMain|
  01a64	ea000004	 b           |$LN2@DllMain|
  01a68		 |$LN1@DllMain|

; 958  :         {
; 959  :         case DLL_PROCESS_ATTACH:
; 960  :             DEBUGREGISTER(hDLL);

  01a68	e59f1024	 ldr         r1, [pc, #0x24]
  01a6c	e59d000c	 ldr         r0, [sp, #0xC]
  01a70	eb000000	 bl          RegisterDbgZones

; 961  :             DisableThreadLibraryCalls((HMODULE)hDLL);

  01a74	e59d000c	 ldr         r0, [sp, #0xC]
  01a78	eb000000	 bl          DisableThreadLibraryCalls
  01a7c		 |$LN2@DllMain|

; 962  :             break;
; 963  :         }
; 964  :     return TRUE;

  01a7c	e3a03001	 mov         r3, #1
  01a80	e58d3000	 str         r3, [sp]

; 965  : }

  01a84	e59d0000	 ldr         r0, [sp]
  01a88	e28dd004	 add         sp, sp, #4
  01a8c	e89d6000	 ldmia       sp, {sp, lr}
  01a90	e12fff1e	 bx          lr
  01a94		 |$LN9@DllMain|
  01a94		 |$LN10@DllMain|
  01a94	00000000	 DCD         |dpCurSettings|
  01a98		 |$M43800|

			 ENDP  ; |DllMain|

	END
