; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP2420_MS_V1\SPI\spi.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17DJGGJCGD@?$AAI?$AAr?$AAq?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.data|, DATA
	 COMMON	|DEVICE_IFC_SPI_GUID|, 0x10


  00000			 AREA	 |.rdata|, DATA, READONLY
|g_deviceRegParams| DCD |??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_17DJGGJCGD@?$AAI?$AAr?$AAq?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x8
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x34
	DCD	0x4
	DCD	0x1f4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "T", 0x0
	DCB	"i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17DJGGJCGD@?$AAI?$AAr?$AAq?$AA?$AA@| DCB "I", 0x0, "r", 0x0, "q", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| DCB "M", 0x0
	DCB	"e", 0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0
	DCB	0x0, 0x0				; `string'
	EXPORT	|??_C@_1CK@HDDADMFP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_Deinit|
	EXPORT	|SPI_ClockOff|
	EXPORT	|??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@LHOFFFL@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@HKJDDAOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@PEAOIMCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@FFKJDJBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@CHPOCJON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@| [ DATA ] ; `string'
	EXPORT	|SPI_ClockOn|
	EXPORT	|??_C@_1GC@BAJCLBKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@OACEHPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAP?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@FBNPHHLD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@OOBNOJJ@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_Init|
	IMPORT	|Sleep|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|KernelIoControl|
	IMPORT	|MmMapIoSpace|
	IMPORT	|SetDevicePowerState|
	IMPORT	|CreateBusAccessHandle|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|LocalAlloc|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43296| DCD	|$LN34@SPI_Init|
	DCD	0x40015004
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\spi\spi.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@HDDADMFP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "h", 0x0, "o"
	DCB	0x0, "l", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@LHOFFFL@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "O"
	DCB	0x0, "M", 0x0, "A", 0x0, "P", 0x0, "2", 0x0, "4", 0x0, "2"
	DCB	0x0, "0", 0x0, "_", 0x0, "M", 0x0, "S", 0x0, "_", 0x0, "V"
	DCB	0x0, "1", 0x0, "\\", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, "\\"
	DCB	0x0, ".", 0x0, "\\", 0x0, "s", 0x0, "p", 0x0, "i", 0x0, "."
	DCB	0x0, "c", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@HKJDDAOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@PEAOIMCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@FFKJDJBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@CHPOCJON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BAJCLBKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@OACEHPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAP?$AAI@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "S", 0x0, "P"
	DCB	0x0, "I", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@FBNPHHLD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@OOBNOJJ@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_Init| PROC

; 98   : {

  00000		 |$LN34@SPI_Init|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd068	 sub         sp, sp, #0x68
  00010		 |$M43293|

; 99   :     DWORD rc = (DWORD)NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 100  :     SPI_DEVICE *pDevice = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]

; 101  :     PHYSICAL_ADDRESS pa;
; 102  :     DWORD dwCount=0;

  00020	e3a03000	 mov         r3, #0
  00024	e58d3010	 str         r3, [sp, #0x10]

; 103  : 
; 104  :     DEBUGMSG(ZONE_INIT, (
; 105  :         L"+SPI_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 106  :     ));

  00028	e59f34d4	 ldr         r3, [pc, #0x4D4]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130008	 tst         r3, #8
  00034	0a000006	 beq         |$LN14@SPI_Init|
  00038	e59d2074	 ldr         r2, [sp, #0x74]
  0003c	e59d1070	 ldr         r1, [sp, #0x70]
  00040	e59f04f4	 ldr         r0, [pc, #0x4F4]
  00044	eb000000	 bl          NKDbgPrintfW
  00048	e3a03001	 mov         r3, #1
  0004c	e58d3028	 str         r3, [sp, #0x28]
  00050	ea000001	 b           |$LN15@SPI_Init|
  00054		 |$LN14@SPI_Init|
  00054	e3a03000	 mov         r3, #0
  00058	e58d3028	 str         r3, [sp, #0x28]
  0005c		 |$LN15@SPI_Init|

; 107  : 
; 108  :     // Create device structure
; 109  :     pDevice = (SPI_DEVICE *)LocalAlloc(LPTR, sizeof(SPI_DEVICE));

  0005c	e3a0103c	 mov         r1, #0x3C
  00060	e3a00040	 mov         r0, #0x40
  00064	eb000000	 bl          LocalAlloc
  00068	e58d002c	 str         r0, [sp, #0x2C]
  0006c	e59d302c	 ldr         r3, [sp, #0x2C]
  00070	e58d3008	 str         r3, [sp, #8]

; 110  :     if (pDevice == NULL) {

  00074	e59d3008	 ldr         r3, [sp, #8]
  00078	e3530000	 cmp         r3, #0
  0007c	1a00000b	 bne         |$LN11@SPI_Init|

; 111  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 112  :             L"Failed allocate SPI controller structure\r\n"
; 113  :         ));

  00080	e59f347c	 ldr         r3, [pc, #0x47C]
  00084	e5933440	 ldr         r3, [r3, #0x440]
  00088	e3130001	 tst         r3, #1
  0008c	0a000004	 beq         |$LN16@SPI_Init|
  00090	e59f04a0	 ldr         r0, [pc, #0x4A0]
  00094	eb000000	 bl          NKDbgPrintfW
  00098	e3a03001	 mov         r3, #1
  0009c	e58d3030	 str         r3, [sp, #0x30]
  000a0	ea000001	 b           |$LN17@SPI_Init|
  000a4		 |$LN16@SPI_Init|
  000a4	e3a03000	 mov         r3, #0
  000a8	e58d3030	 str         r3, [sp, #0x30]
  000ac		 |$LN17@SPI_Init|

; 114  :         goto cleanUp;

  000ac	ea0000fc	 b           |$cleanUp$42817|
  000b0		 |$LN11@SPI_Init|

; 115  :     }
; 116  : 
; 117  :     // Set cookie
; 118  :     pDevice->cookie = SPI_DEVICE_COOKIE;

  000b0	e59d2008	 ldr         r2, [sp, #8]
  000b4	e59f3478	 ldr         r3, [pc, #0x478]
  000b8	e5823000	 str         r3, [r2]

; 119  : 
; 120  :     // Initalize critical section
; 121  :     InitializeCriticalSection(&pDevice->cs);

  000bc	e59d3008	 ldr         r3, [sp, #8]
  000c0	e2830018	 add         r0, r3, #0x18
  000c4	eb000000	 bl          InitializeCriticalSection

; 122  : 
; 123  :     // Read device parameters
; 124  :     if (GetDeviceRegistryParams(
; 125  :         szContext, pDevice, dimof(g_deviceRegParams), g_deviceRegParams
; 126  :     ) != ERROR_SUCCESS) {

  000c8	e59f3460	 ldr         r3, [pc, #0x460]
  000cc	e3a02003	 mov         r2, #3
  000d0	e59d1008	 ldr         r1, [sp, #8]
  000d4	e59d0070	 ldr         r0, [sp, #0x70]
  000d8	eb000000	 bl          GetDeviceRegistryParams
  000dc	e58d0034	 str         r0, [sp, #0x34]
  000e0	e59d3034	 ldr         r3, [sp, #0x34]
  000e4	e3530000	 cmp         r3, #0
  000e8	0a00000b	 beq         |$LN10@SPI_Init|

; 127  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 128  :             L"Failed read SPI driver registry parameters\r\n"
; 129  :         ));

  000ec	e59f3410	 ldr         r3, [pc, #0x410]
  000f0	e5933440	 ldr         r3, [r3, #0x440]
  000f4	e3130001	 tst         r3, #1
  000f8	0a000004	 beq         |$LN18@SPI_Init|
  000fc	e59f0428	 ldr         r0, [pc, #0x428]
  00100	eb000000	 bl          NKDbgPrintfW
  00104	e3a03001	 mov         r3, #1
  00108	e58d3038	 str         r3, [sp, #0x38]
  0010c	ea000001	 b           |$LN19@SPI_Init|
  00110		 |$LN18@SPI_Init|
  00110	e3a03000	 mov         r3, #0
  00114	e58d3038	 str         r3, [sp, #0x38]
  00118		 |$LN19@SPI_Init|

; 130  :         goto cleanUp;

  00118	ea0000e1	 b           |$cleanUp$42817|
  0011c		 |$LN10@SPI_Init|

; 131  :     }
; 132  : 
; 133  :     // Open parent bus
; 134  :     pDevice->hParentBus = CreateBusAccessHandle(szContext);

  0011c	e59d0070	 ldr         r0, [sp, #0x70]
  00120	eb000000	 bl          CreateBusAccessHandle
  00124	e58d003c	 str         r0, [sp, #0x3C]
  00128	e59d3008	 ldr         r3, [sp, #8]
  0012c	e2832010	 add         r2, r3, #0x10
  00130	e59d303c	 ldr         r3, [sp, #0x3C]
  00134	e5823000	 str         r3, [r2]

; 135  :     if (pDevice->hParentBus == NULL) {

  00138	e59d3008	 ldr         r3, [sp, #8]
  0013c	e2833010	 add         r3, r3, #0x10
  00140	e5933000	 ldr         r3, [r3]
  00144	e3530000	 cmp         r3, #0
  00148	1a00000b	 bne         |$LN9@SPI_Init|

; 136  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 137  :             L"Failed open parent bus driver\r\n"
; 138  :         ));

  0014c	e59f33b0	 ldr         r3, [pc, #0x3B0]
  00150	e5933440	 ldr         r3, [r3, #0x440]
  00154	e3130001	 tst         r3, #1
  00158	0a000004	 beq         |$LN20@SPI_Init|
  0015c	e59f03c4	 ldr         r0, [pc, #0x3C4]
  00160	eb000000	 bl          NKDbgPrintfW
  00164	e3a03001	 mov         r3, #1
  00168	e58d3040	 str         r3, [sp, #0x40]
  0016c	ea000001	 b           |$LN21@SPI_Init|
  00170		 |$LN20@SPI_Init|
  00170	e3a03000	 mov         r3, #0
  00174	e58d3040	 str         r3, [sp, #0x40]
  00178		 |$LN21@SPI_Init|

; 139  :         goto cleanUp;

  00178	ea0000c9	 b           |$cleanUp$42817|
  0017c		 |$LN9@SPI_Init|

; 140  :     }
; 141  : 
; 142  :     // Set hardware to full power
; 143  :     pDevice->powerState = D0;

  0017c	e59d3008	 ldr         r3, [sp, #8]
  00180	e2832038	 add         r2, r3, #0x38
  00184	e3a03000	 mov         r3, #0
  00188	e5823000	 str         r3, [r2]

; 144  :     SPI_ClockOn(pDevice);

  0018c	e59d0008	 ldr         r0, [sp, #8]
  00190	eb000000	 bl          SPI_ClockOn

; 145  :     SetDevicePowerState(pDevice->hParentBus, D0, NULL);

  00194	e3a02000	 mov         r2, #0
  00198	e3a01000	 mov         r1, #0
  0019c	e59d3008	 ldr         r3, [sp, #8]
  001a0	e2833010	 add         r3, r3, #0x10
  001a4	e5930000	 ldr         r0, [r3]
  001a8	eb000000	 bl          SetDevicePowerState

; 146  : 
; 147  :     // Map SPI controller
; 148  :     pa.QuadPart = pDevice->memBase;

  001ac	e59d3008	 ldr         r3, [sp, #8]
  001b0	e2833004	 add         r3, r3, #4
  001b4	e5933000	 ldr         r3, [r3]
  001b8	e58d3014	 str         r3, [sp, #0x14]
  001bc	e3a03000	 mov         r3, #0
  001c0	e58d3018	 str         r3, [sp, #0x18]

; 149  :     pDevice->pSPIRegs = MmMapIoSpace(pa, sizeof(OMAP2420_MCSPI_REGS), FALSE);

  001c4	e3a03000	 mov         r3, #0
  001c8	e3a0207c	 mov         r2, #0x7C
  001cc	e59d0014	 ldr         r0, [sp, #0x14]
  001d0	e59d1018	 ldr         r1, [sp, #0x18]
  001d4	eb000000	 bl          MmMapIoSpace
  001d8	e58d0044	 str         r0, [sp, #0x44]
  001dc	e59d3008	 ldr         r3, [sp, #8]
  001e0	e2832014	 add         r2, r3, #0x14
  001e4	e59d3044	 ldr         r3, [sp, #0x44]
  001e8	e5823000	 str         r3, [r2]

; 150  :     if (pDevice->pSPIRegs == NULL) {

  001ec	e59d3008	 ldr         r3, [sp, #8]
  001f0	e2833014	 add         r3, r3, #0x14
  001f4	e5933000	 ldr         r3, [r3]
  001f8	e3530000	 cmp         r3, #0
  001fc	1a00000b	 bne         |$LN8@SPI_Init|

; 151  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 152  :             L"Failed map SPI controller registers\r\n"
; 153  :         ));

  00200	e59f32fc	 ldr         r3, [pc, #0x2FC]
  00204	e5933440	 ldr         r3, [r3, #0x440]
  00208	e3130001	 tst         r3, #1
  0020c	0a000004	 beq         |$LN22@SPI_Init|
  00210	e59f030c	 ldr         r0, [pc, #0x30C]
  00214	eb000000	 bl          NKDbgPrintfW
  00218	e3a03001	 mov         r3, #1
  0021c	e58d3048	 str         r3, [sp, #0x48]
  00220	ea000001	 b           |$LN23@SPI_Init|
  00224		 |$LN22@SPI_Init|
  00224	e3a03000	 mov         r3, #0
  00228	e58d3048	 str         r3, [sp, #0x48]
  0022c		 |$LN23@SPI_Init|

; 154  :         goto cleanUp;

  0022c	ea00009c	 b           |$cleanUp$42817|
  00230		 |$LN8@SPI_Init|

; 155  :     }
; 156  : 
; 157  :     // Map SPI interrupt
; 158  :     if (!KernelIoControl(
; 159  :         IOCTL_HAL_REQUEST_SYSINTR, &pDevice->irq, sizeof(pDevice->irq), 
; 160  :         &pDevice->sysIntr, sizeof(pDevice->sysIntr), NULL
; 161  :     )) {

  00230	e3a03000	 mov         r3, #0
  00234	e58d3004	 str         r3, [sp, #4]
  00238	e3a03004	 mov         r3, #4
  0023c	e58d3000	 str         r3, [sp]
  00240	e59d3008	 ldr         r3, [sp, #8]
  00244	e283302c	 add         r3, r3, #0x2C
  00248	e3a02004	 mov         r2, #4
  0024c	e59d1008	 ldr         r1, [sp, #8]
  00250	e2811008	 add         r1, r1, #8
  00254	e59f02c4	 ldr         r0, [pc, #0x2C4]
  00258	eb000000	 bl          KernelIoControl
  0025c	e58d004c	 str         r0, [sp, #0x4C]
  00260	e59d304c	 ldr         r3, [sp, #0x4C]
  00264	e3530000	 cmp         r3, #0
  00268	1a00000b	 bne         |$LN7@SPI_Init|

; 162  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 163  :             L"Failed map SPI controller interrupt\r\n"
; 164  :         ));

  0026c	e59f3290	 ldr         r3, [pc, #0x290]
  00270	e5933440	 ldr         r3, [r3, #0x440]
  00274	e3130001	 tst         r3, #1
  00278	0a000004	 beq         |$LN24@SPI_Init|
  0027c	e59f0298	 ldr         r0, [pc, #0x298]
  00280	eb000000	 bl          NKDbgPrintfW
  00284	e3a03001	 mov         r3, #1
  00288	e58d3050	 str         r3, [sp, #0x50]
  0028c	ea000001	 b           |$LN25@SPI_Init|
  00290		 |$LN24@SPI_Init|
  00290	e3a03000	 mov         r3, #0
  00294	e58d3050	 str         r3, [sp, #0x50]
  00298		 |$LN25@SPI_Init|

; 165  :         goto cleanUp;

  00298	ea000081	 b           |$cleanUp$42817|
  0029c		 |$LN7@SPI_Init|

; 166  :     }
; 167  : 
; 168  :     // Create interrupt event
; 169  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  0029c	e3a03000	 mov         r3, #0
  002a0	e3a02000	 mov         r2, #0
  002a4	e3a01000	 mov         r1, #0
  002a8	e3a00000	 mov         r0, #0
  002ac	eb000000	 bl          CreateEventW
  002b0	e58d0054	 str         r0, [sp, #0x54]
  002b4	e59d3008	 ldr         r3, [sp, #8]
  002b8	e2832030	 add         r2, r3, #0x30
  002bc	e59d3054	 ldr         r3, [sp, #0x54]
  002c0	e5823000	 str         r3, [r2]

; 170  :     if (pDevice->hIntrEvent == NULL) {

  002c4	e59d3008	 ldr         r3, [sp, #8]
  002c8	e2833030	 add         r3, r3, #0x30
  002cc	e5933000	 ldr         r3, [r3]
  002d0	e3530000	 cmp         r3, #0
  002d4	1a00000b	 bne         |$LN6@SPI_Init|

; 171  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 172  :             L"Failed create interrupt event\r\n"
; 173  :         ));

  002d8	e59f3224	 ldr         r3, [pc, #0x224]
  002dc	e5933440	 ldr         r3, [r3, #0x440]
  002e0	e3130001	 tst         r3, #1
  002e4	0a000004	 beq         |$LN26@SPI_Init|
  002e8	e59f0228	 ldr         r0, [pc, #0x228]
  002ec	eb000000	 bl          NKDbgPrintfW
  002f0	e3a03001	 mov         r3, #1
  002f4	e58d3058	 str         r3, [sp, #0x58]
  002f8	ea000001	 b           |$LN27@SPI_Init|
  002fc		 |$LN26@SPI_Init|
  002fc	e3a03000	 mov         r3, #0
  00300	e58d3058	 str         r3, [sp, #0x58]
  00304		 |$LN27@SPI_Init|

; 174  :         goto cleanUp;

  00304	ea000066	 b           |$cleanUp$42817|
  00308		 |$LN6@SPI_Init|

; 175  :     }
; 176  : 
; 177  :     // Initialize interrupt
; 178  :     if (!InterruptInitialize(pDevice->sysIntr, pDevice->hIntrEvent, NULL, 0)) {

  00308	e3a03000	 mov         r3, #0
  0030c	e3a02000	 mov         r2, #0
  00310	e59d1008	 ldr         r1, [sp, #8]
  00314	e2811030	 add         r1, r1, #0x30
  00318	e5911000	 ldr         r1, [r1]
  0031c	e59d0008	 ldr         r0, [sp, #8]
  00320	e280002c	 add         r0, r0, #0x2C
  00324	e5900000	 ldr         r0, [r0]
  00328	eb000000	 bl          InterruptInitialize
  0032c	e58d005c	 str         r0, [sp, #0x5C]
  00330	e59d305c	 ldr         r3, [sp, #0x5C]
  00334	e3530000	 cmp         r3, #0
  00338	1a00000b	 bne         |$LN5@SPI_Init|

; 179  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Init: "
; 180  :             L"InterruptInitialize failed\r\n"
; 181  :         ));

  0033c	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00340	e5933440	 ldr         r3, [r3, #0x440]
  00344	e3130001	 tst         r3, #1
  00348	0a000004	 beq         |$LN28@SPI_Init|
  0034c	e59f01c0	 ldr         r0, [pc, #0x1C0]
  00350	eb000000	 bl          NKDbgPrintfW
  00354	e3a03001	 mov         r3, #1
  00358	e58d3060	 str         r3, [sp, #0x60]
  0035c	ea000001	 b           |$LN29@SPI_Init|
  00360		 |$LN28@SPI_Init|
  00360	e3a03000	 mov         r3, #0
  00364	e58d3060	 str         r3, [sp, #0x60]
  00368		 |$LN29@SPI_Init|

; 182  :         goto cleanUp;

  00368	ea00004d	 b           |$cleanUp$42817|
  0036c		 |$LN5@SPI_Init|

; 183  :     }
; 184  : 
; 185  :     // Reset the SPI controller
; 186  :     SETREG32(&pDevice->pSPIRegs->ulMCSPI_SYSCONFIG, SPI_SYSC_SRST);

  0036c	e59d3008	 ldr         r3, [sp, #8]
  00370	e2833014	 add         r3, r3, #0x14
  00374	e5933000	 ldr         r3, [r3]
  00378	e2833010	 add         r3, r3, #0x10
  0037c	e5933000	 ldr         r3, [r3]
  00380	e3832002	 orr         r2, r3, #2
  00384	e59d3008	 ldr         r3, [sp, #8]
  00388	e2833014	 add         r3, r3, #0x14
  0038c	e5933000	 ldr         r3, [r3]
  00390	e2833010	 add         r3, r3, #0x10
  00394	e5832000	 str         r2, [r3]
  00398		 |$LN4@SPI_Init|

; 187  : 
; 188  :     // TODO: Get base clock from kernel & read L/H periods from registry
; 189  : 
; 190  :     // Wait until resetting is done
; 191  :     while ( !(INREG32(&pDevice->pSPIRegs->ulMCSPI_SYSSTATUS) & BIT0)) {

  00398	e59d3008	 ldr         r3, [sp, #8]
  0039c	e2833014	 add         r3, r3, #0x14
  003a0	e5933000	 ldr         r3, [r3]
  003a4	e2833014	 add         r3, r3, #0x14
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e3130001	 tst         r3, #1
  003b0	1a00000f	 bne         |$LN3@SPI_Init|

; 192  :         Sleep (1);

  003b4	e3a00001	 mov         r0, #1
  003b8	eb000000	 bl          Sleep

; 193  : 
; 194  :         if (dwCount++>0x100)

  003bc	e59d3010	 ldr         r3, [sp, #0x10]
  003c0	e3530c01	 cmp         r3, #1, 24
  003c4	e59d3010	 ldr         r3, [sp, #0x10]
  003c8	e2833001	 add         r3, r3, #1
  003cc	e58d3010	 str         r3, [sp, #0x10]
  003d0	9a000006	 bls         |$LN2@SPI_Init|

; 195  :         {
; 196  :             // Break out dead lock, something is wrong.
; 197  :             ERRORMSG (TRUE, (TEXT("SPI: ERROR holding in reset.\n")));

  003d4	e3a020c5	 mov         r2, #0xC5
  003d8	e59f1130	 ldr         r1, [pc, #0x130]
  003dc	e59f0128	 ldr         r0, [pc, #0x128]
  003e0	eb000000	 bl          NKDbgPrintfW
  003e4	e59f011c	 ldr         r0, [pc, #0x11C]
  003e8	eb000000	 bl          NKDbgPrintfW

; 198  :             goto cleanUp;

  003ec	ea00002c	 b           |$cleanUp$42817|
  003f0		 |$LN2@SPI_Init|

; 199  :         }
; 200  :     }

  003f0	eaffffe8	 b           |$LN4@SPI_Init|
  003f4		 |$LN3@SPI_Init|

; 201  : 
; 202  :     // Disable all interrupts.
; 203  :     OUTREG32(&pDevice->pSPIRegs->ulMCSPI_IRQENABLE, 0);

  003f4	e59d3008	 ldr         r3, [sp, #8]
  003f8	e2833014	 add         r3, r3, #0x14
  003fc	e5933000	 ldr         r3, [r3]
  00400	e283201c	 add         r2, r3, #0x1C
  00404	e3a03000	 mov         r3, #0
  00408	e5823000	 str         r3, [r2]

; 204  : 
; 205  :     // Clear interrupts.
; 206  :     OUTREG32(&pDevice->pSPIRegs->ulMCSPI_IRQSTATUS, 0xFFFF);

  0040c	e59d3008	 ldr         r3, [sp, #8]
  00410	e2833014	 add         r3, r3, #0x14
  00414	e5933000	 ldr         r3, [r3]
  00418	e2832018	 add         r2, r3, #0x18
  0041c	e3a03cff	 mov         r3, #0xFF, 24
  00420	e38330ff	 orr         r3, r3, #0xFF
  00424	e5823000	 str         r3, [r2]

; 207  : 
; 208  : 
; 209  :     // Setup Module Control as master
; 210  :     OUTREG32(&pDevice->pSPIRegs->ulMCSPI_MODULCTRL, 0);

  00428	e59d3008	 ldr         r3, [sp, #8]
  0042c	e2833014	 add         r3, r3, #0x14
  00430	e5933000	 ldr         r3, [r3]
  00434	e2832028	 add         r2, r3, #0x28
  00438	e3a03000	 mov         r3, #0
  0043c	e5823000	 str         r3, [r2]

; 211  : 
; 212  :     // Turn on the clock on default 1M rate.
; 213  :     // Reset the SPI controller
; 214  :     SETREG32(&pDevice->pSPIRegs->ulMCSPI_SYSCONFIG, 0x308);

  00440	e59d3008	 ldr         r3, [sp, #8]
  00444	e2833014	 add         r3, r3, #0x14
  00448	e5933000	 ldr         r3, [r3]
  0044c	e2833010	 add         r3, r3, #0x10
  00450	e5933000	 ldr         r3, [r3]
  00454	e3832fc2	 orr         r2, r3, #0xC2, 30
  00458	e59d3008	 ldr         r3, [sp, #8]
  0045c	e2833014	 add         r3, r3, #0x14
  00460	e5933000	 ldr         r3, [r3]
  00464	e2833010	 add         r3, r3, #0x10
  00468	e5832000	 str         r2, [r3]

; 215  : //    g_pSpiRegs->ulSET1 &= ~0x001E;
; 216  : //    g_pSpiRegs->ulSET1 |= (GetClockParams(INIT_CLOCK_RATE) << 1);
; 217  : //    g_pSpiRegs->ulSET1 |= BIT0;
; 218  : 
; 219  : 
; 220  :     // Enable the SPI
; 221  : //    SETREG16(&pDevice->pSPIRegs->CON, SPI_CON_EN);
; 222  : 
; 223  :     // Return non-null value
; 224  :     rc = (DWORD)pDevice;

  0046c	e59d3008	 ldr         r3, [sp, #8]
  00470	e58d300c	 str         r3, [sp, #0xC]

; 225  : 
; 226  :     // Set this driver to internal suspend mode
; 227  :     SetDevicePowerState(pDevice->hParentBus, pDevice->powerState = D4, NULL);

  00474	e59d3008	 ldr         r3, [sp, #8]
  00478	e2832038	 add         r2, r3, #0x38
  0047c	e3a03004	 mov         r3, #4
  00480	e5823000	 str         r3, [r2]
  00484	e3a02000	 mov         r2, #0
  00488	e3a01004	 mov         r1, #4
  0048c	e59d3008	 ldr         r3, [sp, #8]
  00490	e2833010	 add         r3, r3, #0x10
  00494	e5930000	 ldr         r0, [r3]
  00498	eb000000	 bl          SetDevicePowerState

; 228  :     SPI_ClockOff(pDevice);

  0049c	e59d0008	 ldr         r0, [sp, #8]
  004a0	eb000000	 bl          SPI_ClockOff
  004a4		 |$cleanUp$42817|

; 229  : 
; 230  : cleanUp:
; 231  :     if (rc == 0) SPI_Deinit((DWORD)pDevice);

  004a4	e59d300c	 ldr         r3, [sp, #0xC]
  004a8	e3530000	 cmp         r3, #0
  004ac	1a000001	 bne         |$LN1@SPI_Init|
  004b0	e59d0008	 ldr         r0, [sp, #8]
  004b4	eb000000	 bl          SPI_Deinit
  004b8		 |$LN1@SPI_Init|

; 232  :     DEBUGMSG(ZONE_INIT, (L"-SPI_Init(rc = %d)\r\n", rc));

  004b8	e59f3044	 ldr         r3, [pc, #0x44]
  004bc	e5933440	 ldr         r3, [r3, #0x440]
  004c0	e3130008	 tst         r3, #8
  004c4	0a000005	 beq         |$LN30@SPI_Init|
  004c8	e59d100c	 ldr         r1, [sp, #0xC]
  004cc	e59f002c	 ldr         r0, [pc, #0x2C]
  004d0	eb000000	 bl          NKDbgPrintfW
  004d4	e3a03001	 mov         r3, #1
  004d8	e58d3064	 str         r3, [sp, #0x64]
  004dc	ea000001	 b           |$LN31@SPI_Init|
  004e0		 |$LN30@SPI_Init|
  004e0	e3a03000	 mov         r3, #0
  004e4	e58d3064	 str         r3, [sp, #0x64]
  004e8		 |$LN31@SPI_Init|

; 233  :     return rc;

  004e8	e59d300c	 ldr         r3, [sp, #0xC]
  004ec	e58d3024	 str         r3, [sp, #0x24]

; 234  : }

  004f0	e59d0024	 ldr         r0, [sp, #0x24]
  004f4	e28dd068	 add         sp, sp, #0x68
  004f8	e89d6000	 ldmia       sp, {sp, lr}
  004fc	e12fff1e	 bx          lr
  00500		 |$LN35@SPI_Init|
  00500		 |$LN36@SPI_Init|
  00500	00000000	 DCD         |??_C@_1CK@HDDADMFP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00504		 |$LN37@SPI_Init|
  00504	00000000	 DCD         |dpCurSettings|
  00508		 |$LN38@SPI_Init|
  00508	00000000	 DCD         |??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@|
  0050c		 |$LN39@SPI_Init|
  0050c	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00510		 |$LN40@SPI_Init|
  00510	00000000	 DCD         |??_C@_1HO@LHOFFFL@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00514		 |$LN41@SPI_Init|
  00514	00000000	 DCD         |??_C@_1FM@HKJDDAOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@|
  00518		 |$LN42@SPI_Init|
  00518	00000000	 DCD         |??_C@_1GC@PEAOIMCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  0051c		 |$LN43@SPI_Init|
  0051c	00000000	 DCD         |??_C@_1GO@FFKJDJBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@|
  00520		 |$LN44@SPI_Init|
  00520	01010098	 DCD         0x1010098
  00524		 |$LN45@SPI_Init|
  00524	00000000	 DCD         |??_C@_1GO@CHPOCJON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@|
  00528		 |$LN46@SPI_Init|
  00528	00000000	 DCD         |??_C@_1GC@BAJCLBKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr@|
  0052c		 |$LN47@SPI_Init|
  0052c	00000000	 DCD         |??_C@_1HM@OACEHPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAP?$AAI@|
  00530		 |$LN48@SPI_Init|
  00530	00000000	 DCD         |g_deviceRegParams|
  00534		 |$LN49@SPI_Init|
  00534	73706944	 DCD         0x73706944
  00538		 |$LN50@SPI_Init|
  00538	00000000	 DCD         |??_C@_1HI@FBNPHHLD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  0053c		 |$LN51@SPI_Init|
  0053c	00000000	 DCD         |??_C@_1DA@OOBNOJJ@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00540		 |$M43294|

			 ENDP  ; |SPI_Init|

	EXPORT	|??_C@_1CO@OIJMHFHD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@GNCDGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@FFJAFFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HJBPCML@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|CloseHandle|
	IMPORT	|InterruptDisable|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|CloseBusAccessHandle|

  00008			 AREA	 |.pdata|, PDATA
|$T43329| DCD	|$LN20@SPI_Deinit|
	DCD	0x40009304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@OIJMHFHD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@GNCDGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "n", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@FFJAFFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HJBPCML@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00540			 AREA	 |.text|, CODE, ARM

  00540		 |SPI_Deinit| PROC

; 243  : {

  00540		 |$LN20@SPI_Deinit|
  00540	e1a0c00d	 mov         r12, sp
  00544	e92d0001	 stmdb       sp!, {r0}
  00548	e92d5000	 stmdb       sp!, {r12, lr}
  0054c	e24dd02c	 sub         sp, sp, #0x2C
  00550		 |$M43326|

; 244  :     BOOL rc = FALSE;

  00550	e3a03000	 mov         r3, #0
  00554	e58d300c	 str         r3, [sp, #0xC]

; 245  :     SPI_DEVICE *pDevice = (SPI_DEVICE*)context;

  00558	e59d3034	 ldr         r3, [sp, #0x34]
  0055c	e58d3008	 str         r3, [sp, #8]

; 246  : 
; 247  :     DEBUGMSG(ZONE_INIT, (L"+SPI_Deinit(0x%08x)\r\n", context));

  00560	e59f320c	 ldr         r3, [pc, #0x20C]
  00564	e5933440	 ldr         r3, [r3, #0x440]
  00568	e3130008	 tst         r3, #8
  0056c	0a000005	 beq         |$LN10@SPI_Deinit|
  00570	e59d1034	 ldr         r1, [sp, #0x34]
  00574	e59f020c	 ldr         r0, [pc, #0x20C]
  00578	eb000000	 bl          NKDbgPrintfW
  0057c	e3a03001	 mov         r3, #1
  00580	e58d301c	 str         r3, [sp, #0x1C]
  00584	ea000001	 b           |$LN11@SPI_Deinit|
  00588		 |$LN10@SPI_Deinit|
  00588	e3a03000	 mov         r3, #0
  0058c	e58d301c	 str         r3, [sp, #0x1C]
  00590		 |$LN11@SPI_Deinit|

; 248  : 
; 249  :     // Check if we get correct context
; 250  :     if (pDevice == NULL || pDevice->cookie != SPI_DEVICE_COOKIE) {

  00590	e59d3008	 ldr         r3, [sp, #8]
  00594	e3530000	 cmp         r3, #0
  00598	0a000004	 beq         |$LN6@SPI_Deinit|
  0059c	e59d3008	 ldr         r3, [sp, #8]
  005a0	e5932000	 ldr         r2, [r3]
  005a4	e59f31d8	 ldr         r3, [pc, #0x1D8]
  005a8	e1520003	 cmp         r2, r3
  005ac	0a00000b	 beq         |$LN7@SPI_Deinit|
  005b0		 |$LN6@SPI_Deinit|

; 251  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Deinit: "
; 252  :             L"Incorrect context paramer\r\n"
; 253  :         ));

  005b0	e59f31bc	 ldr         r3, [pc, #0x1BC]
  005b4	e5933440	 ldr         r3, [r3, #0x440]
  005b8	e3130001	 tst         r3, #1
  005bc	0a000004	 beq         |$LN12@SPI_Deinit|
  005c0	e59f01b8	 ldr         r0, [pc, #0x1B8]
  005c4	eb000000	 bl          NKDbgPrintfW
  005c8	e3a03001	 mov         r3, #1
  005cc	e58d3020	 str         r3, [sp, #0x20]
  005d0	ea000001	 b           |$LN13@SPI_Deinit|
  005d4		 |$LN12@SPI_Deinit|
  005d4	e3a03000	 mov         r3, #0
  005d8	e58d3020	 str         r3, [sp, #0x20]
  005dc		 |$LN13@SPI_Deinit|

; 254  :         goto cleanUp;

  005dc	ea000051	 b           |$cleanUp$42892|
  005e0		 |$LN7@SPI_Deinit|

; 255  :     }
; 256  : 
; 257  :     // Check for open instances
; 258  :     if (pDevice->instances > 0) {

  005e0	e59d3008	 ldr         r3, [sp, #8]
  005e4	e283300c	 add         r3, r3, #0xC
  005e8	e5933000	 ldr         r3, [r3]
  005ec	e3530000	 cmp         r3, #0
  005f0	da00000e	 ble         |$LN5@SPI_Deinit|

; 259  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Deinit: "
; 260  :             L"Deinit with active instance (%d instances active)\r\n",
; 261  :             pDevice->instances
; 262  :         ));

  005f4	e59f3178	 ldr         r3, [pc, #0x178]
  005f8	e5933440	 ldr         r3, [r3, #0x440]
  005fc	e3130001	 tst         r3, #1
  00600	0a000007	 beq         |$LN14@SPI_Deinit|
  00604	e59d3008	 ldr         r3, [sp, #8]
  00608	e283300c	 add         r3, r3, #0xC
  0060c	e5931000	 ldr         r1, [r3]
  00610	e59f0164	 ldr         r0, [pc, #0x164]
  00614	eb000000	 bl          NKDbgPrintfW
  00618	e3a03001	 mov         r3, #1
  0061c	e58d3024	 str         r3, [sp, #0x24]
  00620	ea000001	 b           |$LN15@SPI_Deinit|
  00624		 |$LN14@SPI_Deinit|
  00624	e3a03000	 mov         r3, #0
  00628	e58d3024	 str         r3, [sp, #0x24]
  0062c		 |$LN15@SPI_Deinit|

; 263  :         goto cleanUp;

  0062c	ea00003d	 b           |$cleanUp$42892|
  00630		 |$LN5@SPI_Deinit|

; 264  :     }
; 265  : 
; 266  :     // Set hardware to D4 and close parent bus driver
; 267  :     if (pDevice->hParentBus!= NULL) 

  00630	e59d3008	 ldr         r3, [sp, #8]
  00634	e2833010	 add         r3, r3, #0x10
  00638	e5933000	 ldr         r3, [r3]
  0063c	e3530000	 cmp         r3, #0
  00640	0a000009	 beq         |$LN4@SPI_Deinit|

; 268  :     {
; 269  :         SetDevicePowerState(pDevice->hParentBus, D4,NULL);

  00644	e3a02000	 mov         r2, #0
  00648	e3a01004	 mov         r1, #4
  0064c	e59d3008	 ldr         r3, [sp, #8]
  00650	e2833010	 add         r3, r3, #0x10
  00654	e5930000	 ldr         r0, [r3]
  00658	eb000000	 bl          SetDevicePowerState

; 270  :         CloseBusAccessHandle(pDevice->hParentBus);

  0065c	e59d3008	 ldr         r3, [sp, #8]
  00660	e2833010	 add         r3, r3, #0x10
  00664	e5930000	 ldr         r0, [r3]
  00668	eb000000	 bl          CloseBusAccessHandle
  0066c		 |$LN4@SPI_Deinit|

; 271  :     }
; 272  : 
; 273  :     // Delete critical section
; 274  :     DeleteCriticalSection(&pDevice->cs);

  0066c	e59d3008	 ldr         r3, [sp, #8]
  00670	e2830018	 add         r0, r3, #0x18
  00674	eb000000	 bl          DeleteCriticalSection

; 275  : 
; 276  :     // Unmap SPI controller registers
; 277  :     if (pDevice->pSPIRegs != NULL)

  00678	e59d3008	 ldr         r3, [sp, #8]
  0067c	e2833014	 add         r3, r3, #0x14
  00680	e5933000	 ldr         r3, [r3]
  00684	e3530000	 cmp         r3, #0
  00688	0a000004	 beq         |$LN3@SPI_Deinit|

; 278  :     {
; 279  :         MmUnmapIoSpace((VOID*)pDevice->pSPIRegs, sizeof(OMAP2420_MCSPI_REGS));

  0068c	e3a0107c	 mov         r1, #0x7C
  00690	e59d3008	 ldr         r3, [sp, #8]
  00694	e2833014	 add         r3, r3, #0x14
  00698	e5930000	 ldr         r0, [r3]
  0069c	eb000000	 bl          MmUnmapIoSpace
  006a0		 |$LN3@SPI_Deinit|

; 280  :     }
; 281  : 
; 282  :     //Turn clocks off
; 283  :     SPI_ClockOff(pDevice);

  006a0	e59d0008	 ldr         r0, [sp, #8]
  006a4	eb000000	 bl          SPI_ClockOff

; 284  : 
; 285  :     // Release SPI controller interrupt
; 286  :     if (pDevice->sysIntr != 0) 

  006a8	e59d3008	 ldr         r3, [sp, #8]
  006ac	e283302c	 add         r3, r3, #0x2C
  006b0	e5933000	 ldr         r3, [r3]
  006b4	e3530000	 cmp         r3, #0
  006b8	0a00000d	 beq         |$LN2@SPI_Deinit|

; 287  :     {
; 288  :         InterruptDisable(pDevice->sysIntr);

  006bc	e59d3008	 ldr         r3, [sp, #8]
  006c0	e283302c	 add         r3, r3, #0x2C
  006c4	e5930000	 ldr         r0, [r3]
  006c8	eb000000	 bl          InterruptDisable

; 289  :         KernelIoControl(
; 290  :             IOCTL_HAL_RELEASE_SYSINTR, &pDevice->sysIntr,
; 291  :             sizeof(pDevice->sysIntr), NULL, 0, NULL
; 292  :         );

  006cc	e3a03000	 mov         r3, #0
  006d0	e58d3004	 str         r3, [sp, #4]
  006d4	e3a03000	 mov         r3, #0
  006d8	e58d3000	 str         r3, [sp]
  006dc	e3a03000	 mov         r3, #0
  006e0	e3a02004	 mov         r2, #4
  006e4	e59d1008	 ldr         r1, [sp, #8]
  006e8	e281102c	 add         r1, r1, #0x2C
  006ec	e59f0084	 ldr         r0, [pc, #0x84]
  006f0	eb000000	 bl          KernelIoControl
  006f4		 |$LN2@SPI_Deinit|

; 293  :     }
; 294  : 
; 295  :     // Close interrupt handler
; 296  :     if (pDevice->hIntrEvent != NULL) CloseHandle(pDevice->hIntrEvent);

  006f4	e59d3008	 ldr         r3, [sp, #8]
  006f8	e2833030	 add         r3, r3, #0x30
  006fc	e5933000	 ldr         r3, [r3]
  00700	e3530000	 cmp         r3, #0
  00704	0a000003	 beq         |$LN1@SPI_Deinit|
  00708	e59d3008	 ldr         r3, [sp, #8]
  0070c	e2833030	 add         r3, r3, #0x30
  00710	e5930000	 ldr         r0, [r3]
  00714	eb000000	 bl          CloseHandle
  00718		 |$LN1@SPI_Deinit|

; 297  : 
; 298  :     // Free device structure
; 299  :     LocalFree(pDevice);

  00718	e59d0008	 ldr         r0, [sp, #8]
  0071c	eb000000	 bl          LocalFree

; 300  : 
; 301  :     // Done
; 302  :     rc = TRUE;

  00720	e3a03001	 mov         r3, #1
  00724	e58d300c	 str         r3, [sp, #0xC]
  00728		 |$cleanUp$42892|

; 303  : 
; 304  : cleanUp:
; 305  :     DEBUGMSG(ZONE_INIT, (L"-SPI_Deinit(rc = %d)\r\n", rc));

  00728	e59f3044	 ldr         r3, [pc, #0x44]
  0072c	e5933440	 ldr         r3, [r3, #0x440]
  00730	e3130008	 tst         r3, #8
  00734	0a000005	 beq         |$LN16@SPI_Deinit|
  00738	e59d100c	 ldr         r1, [sp, #0xC]
  0073c	e59f002c	 ldr         r0, [pc, #0x2C]
  00740	eb000000	 bl          NKDbgPrintfW
  00744	e3a03001	 mov         r3, #1
  00748	e58d3028	 str         r3, [sp, #0x28]
  0074c	ea000001	 b           |$LN17@SPI_Deinit|
  00750		 |$LN16@SPI_Deinit|
  00750	e3a03000	 mov         r3, #0
  00754	e58d3028	 str         r3, [sp, #0x28]
  00758		 |$LN17@SPI_Deinit|

; 306  :     return rc;

  00758	e59d300c	 ldr         r3, [sp, #0xC]
  0075c	e58d3018	 str         r3, [sp, #0x18]

; 307  : }

  00760	e59d0018	 ldr         r0, [sp, #0x18]
  00764	e28dd02c	 add         sp, sp, #0x2C
  00768	e89d6000	 ldmia       sp, {sp, lr}
  0076c	e12fff1e	 bx          lr
  00770		 |$LN21@SPI_Deinit|
  00770		 |$LN22@SPI_Deinit|
  00770	00000000	 DCD         |??_C@_1CO@OIJMHFHD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00774		 |$LN23@SPI_Deinit|
  00774	00000000	 DCD         |dpCurSettings|
  00778		 |$LN24@SPI_Deinit|
  00778	010100d8	 DCD         0x10100d8
  0077c		 |$LN25@SPI_Deinit|
  0077c	00000000	 DCD         |??_C@_1IO@GNCDGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAa@|
  00780		 |$LN26@SPI_Deinit|
  00780	00000000	 DCD         |??_C@_1FO@FFJAFFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  00784		 |$LN27@SPI_Deinit|
  00784	73706944	 DCD         0x73706944
  00788		 |$LN28@SPI_Deinit|
  00788	00000000	 DCD         |??_C@_1CM@HJBPCML@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0078c		 |$M43327|

			 ENDP  ; |SPI_Deinit|

	EXPORT	|??_C@_1DC@CEBIFIGD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@LJDLBMKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@EHJJABEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@CMDGJGNK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'
	EXPORT	|SPI_Open|
	IMPORT	|InterlockedIncrement|

  00010			 AREA	 |.pdata|, PDATA
|$T43353| DCD	|$LN18@SPI_Open|
	DCD	0x40007904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@CEBIFIGD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@LJDLBMKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "n"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "u", 0x0, "c", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@EHJJABEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@CMDGJGNK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0078c			 AREA	 |.text|, CODE, ARM

  0078c		 |SPI_Open| PROC

; 316  : {

  0078c		 |$LN18@SPI_Open|
  0078c	e1a0c00d	 mov         r12, sp
  00790	e92d0007	 stmdb       sp!, {r0 - r2}
  00794	e92d5000	 stmdb       sp!, {r12, lr}
  00798	e24dd028	 sub         sp, sp, #0x28
  0079c		 |$M43350|

; 317  :     DWORD rc = (DWORD)NULL;

  0079c	e3a03000	 mov         r3, #0
  007a0	e58d3004	 str         r3, [sp, #4]

; 318  :     SPI_DEVICE *pDevice = (SPI_DEVICE*)context;

  007a4	e59d3030	 ldr         r3, [sp, #0x30]
  007a8	e58d3000	 str         r3, [sp]

; 319  :     SPI_INSTANCE *pInstance = NULL;

  007ac	e3a03000	 mov         r3, #0
  007b0	e58d3008	 str         r3, [sp, #8]

; 320  : 
; 321  :     DEBUGMSG(ZONE_FUNCTION, (
; 322  :         L"+SPI_Open(0x%08x, 0x%08x, 0x%08x\r\n", context, accessCode, shareMode
; 323  :     ));

  007b4	e59f3190	 ldr         r3, [pc, #0x190]
  007b8	e5933440	 ldr         r3, [r3, #0x440]
  007bc	e3130004	 tst         r3, #4
  007c0	0a000007	 beq         |$LN6@SPI_Open|
  007c4	e59d3038	 ldr         r3, [sp, #0x38]
  007c8	e59d2034	 ldr         r2, [sp, #0x34]
  007cc	e59d1030	 ldr         r1, [sp, #0x30]
  007d0	e59f0194	 ldr         r0, [pc, #0x194]
  007d4	eb000000	 bl          NKDbgPrintfW
  007d8	e3a03001	 mov         r3, #1
  007dc	e58d3010	 str         r3, [sp, #0x10]
  007e0	ea000001	 b           |$LN7@SPI_Open|
  007e4		 |$LN6@SPI_Open|
  007e4	e3a03000	 mov         r3, #0
  007e8	e58d3010	 str         r3, [sp, #0x10]
  007ec		 |$LN7@SPI_Open|

; 324  : 
; 325  :     // Check if we get correct context
; 326  :     if (pDevice == NULL || pDevice->cookie != SPI_DEVICE_COOKIE) {

  007ec	e59d3000	 ldr         r3, [sp]
  007f0	e3530000	 cmp         r3, #0
  007f4	0a000004	 beq         |$LN2@SPI_Open|
  007f8	e59d3000	 ldr         r3, [sp]
  007fc	e5932000	 ldr         r2, [r3]
  00800	e59f3160	 ldr         r3, [pc, #0x160]
  00804	e1520003	 cmp         r2, r3
  00808	0a00000b	 beq         |$LN3@SPI_Open|
  0080c		 |$LN2@SPI_Open|

; 327  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Open: "
; 328  :             L"Incorrect context parameter\r\n"
; 329  :         ));

  0080c	e59f3138	 ldr         r3, [pc, #0x138]
  00810	e5933440	 ldr         r3, [r3, #0x440]
  00814	e3130001	 tst         r3, #1
  00818	0a000004	 beq         |$LN8@SPI_Open|
  0081c	e59f0140	 ldr         r0, [pc, #0x140]
  00820	eb000000	 bl          NKDbgPrintfW
  00824	e3a03001	 mov         r3, #1
  00828	e58d3014	 str         r3, [sp, #0x14]
  0082c	ea000001	 b           |$LN9@SPI_Open|
  00830		 |$LN8@SPI_Open|
  00830	e3a03000	 mov         r3, #0
  00834	e58d3014	 str         r3, [sp, #0x14]
  00838		 |$LN9@SPI_Open|

; 330  :         goto cleanUp;

  00838	ea000030	 b           |$cleanUp$42932|
  0083c		 |$LN3@SPI_Open|

; 331  :     }
; 332  : 
; 333  :     // Create device structure
; 334  :     pInstance = (SPI_INSTANCE*)LocalAlloc(LPTR, sizeof(SPI_INSTANCE));

  0083c	e3a0100c	 mov         r1, #0xC
  00840	e3a00040	 mov         r0, #0x40
  00844	eb000000	 bl          LocalAlloc
  00848	e58d0018	 str         r0, [sp, #0x18]
  0084c	e59d3018	 ldr         r3, [sp, #0x18]
  00850	e58d3008	 str         r3, [sp, #8]

; 335  :     if (pInstance == NULL) {

  00854	e59d3008	 ldr         r3, [sp, #8]
  00858	e3530000	 cmp         r3, #0
  0085c	1a00000b	 bne         |$LN1@SPI_Open|

; 336  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Open: "
; 337  :             L"Failed allocate SPI instance structure\r\n"
; 338  :         ));

  00860	e59f30e4	 ldr         r3, [pc, #0xE4]
  00864	e5933440	 ldr         r3, [r3, #0x440]
  00868	e3130001	 tst         r3, #1
  0086c	0a000004	 beq         |$LN10@SPI_Open|
  00870	e59f00e8	 ldr         r0, [pc, #0xE8]
  00874	eb000000	 bl          NKDbgPrintfW
  00878	e3a03001	 mov         r3, #1
  0087c	e58d301c	 str         r3, [sp, #0x1C]
  00880	ea000001	 b           |$LN11@SPI_Open|
  00884		 |$LN10@SPI_Open|
  00884	e3a03000	 mov         r3, #0
  00888	e58d301c	 str         r3, [sp, #0x1C]
  0088c		 |$LN11@SPI_Open|

; 339  :         goto cleanUp;

  0088c	ea00001b	 b           |$cleanUp$42932|
  00890		 |$LN1@SPI_Open|

; 340  :     }
; 341  : 
; 342  :     // Set cookie
; 343  :     pInstance->cookie = SPI_INSTANCE_COOKIE;

  00890	e59d2008	 ldr         r2, [sp, #8]
  00894	e59f30c0	 ldr         r3, [pc, #0xC0]
  00898	e5823000	 str         r3, [r2]

; 344  : 
; 345  :     // Save device reference
; 346  :     pInstance->pDevice = pDevice;

  0089c	e59d3008	 ldr         r3, [sp, #8]
  008a0	e2832004	 add         r2, r3, #4
  008a4	e59d3000	 ldr         r3, [sp]
  008a8	e5823000	 str         r3, [r2]

; 347  : 
; 348  :     // Increment number of open instances
; 349  :     InterlockedIncrement(&pDevice->instances);

  008ac	e59d3000	 ldr         r3, [sp]
  008b0	e283000c	 add         r0, r3, #0xC
  008b4	eb000000	 bl          InterlockedIncrement

; 350  : 
; 351  :     // sanity check number of instances
; 352  :     ASSERT(pDevice->instances > 0);

  008b8	e59d3000	 ldr         r3, [sp]
  008bc	e283300c	 add         r3, r3, #0xC
  008c0	e5933000	 ldr         r3, [r3]
  008c4	e3530000	 cmp         r3, #0
  008c8	da000002	 ble         |$LN12@SPI_Open|
  008cc	e3a03001	 mov         r3, #1
  008d0	e58d3020	 str         r3, [sp, #0x20]
  008d4	ea000007	 b           |$LN13@SPI_Open|
  008d8		 |$LN12@SPI_Open|
  008d8	e3a03e16	 mov         r3, #0x16, 28
  008dc	e59f2074	 ldr         r2, [pc, #0x74]
  008e0	e59f106c	 ldr         r1, [pc, #0x6C]
  008e4	e59f0064	 ldr         r0, [pc, #0x64]
  008e8	eb000000	 bl          NKDbgPrintfW
  008ec	e6000010	 __debugbreak_ce
  008f0	e3a03000	 mov         r3, #0
  008f4	e58d3020	 str         r3, [sp, #0x20]
  008f8		 |$LN13@SPI_Open|

; 353  : 
; 354  :     // Done...
; 355  :     rc = (DWORD)pInstance;

  008f8	e59d3008	 ldr         r3, [sp, #8]
  008fc	e58d3004	 str         r3, [sp, #4]
  00900		 |$cleanUp$42932|

; 356  : 
; 357  : cleanUp:
; 358  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Open(rc = 0x%08x)\r\n", rc));

  00900	e59f3044	 ldr         r3, [pc, #0x44]
  00904	e5933440	 ldr         r3, [r3, #0x440]
  00908	e3130004	 tst         r3, #4
  0090c	0a000005	 beq         |$LN14@SPI_Open|
  00910	e59d1004	 ldr         r1, [sp, #4]
  00914	e59f002c	 ldr         r0, [pc, #0x2C]
  00918	eb000000	 bl          NKDbgPrintfW
  0091c	e3a03001	 mov         r3, #1
  00920	e58d3024	 str         r3, [sp, #0x24]
  00924	ea000001	 b           |$LN15@SPI_Open|
  00928		 |$LN14@SPI_Open|
  00928	e3a03000	 mov         r3, #0
  0092c	e58d3024	 str         r3, [sp, #0x24]
  00930		 |$LN15@SPI_Open|

; 359  :     return rc;

  00930	e59d3004	 ldr         r3, [sp, #4]
  00934	e58d300c	 str         r3, [sp, #0xC]

; 360  : }

  00938	e59d000c	 ldr         r0, [sp, #0xC]
  0093c	e28dd028	 add         sp, sp, #0x28
  00940	e89d6000	 ldmia       sp, {sp, lr}
  00944	e12fff1e	 bx          lr
  00948		 |$LN19@SPI_Open|
  00948		 |$LN20@SPI_Open|
  00948	00000000	 DCD         |??_C@_1DC@CEBIFIGD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0094c		 |$LN21@SPI_Open|
  0094c	00000000	 DCD         |dpCurSettings|
  00950		 |$LN22@SPI_Open|
  00950	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00954		 |$LN23@SPI_Open|
  00954	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00958		 |$LN24@SPI_Open|
  00958	00000000	 DCD         |??_C@_1HO@LHOFFFL@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0095c		 |$LN25@SPI_Open|
  0095c	73706949	 DCD         0x73706949
  00960		 |$LN26@SPI_Open|
  00960	00000000	 DCD         |??_C@_1HE@LJDLBMKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00964		 |$LN27@SPI_Open|
  00964	00000000	 DCD         |??_C@_1FO@EHJJABEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@|
  00968		 |$LN28@SPI_Open|
  00968	73706944	 DCD         0x73706944
  0096c		 |$LN29@SPI_Open|
  0096c	00000000	 DCD         |??_C@_1EG@CMDGJGNK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  00970		 |$M43351|

			 ENDP  ; |SPI_Open|

	EXPORT	|??_C@_1CM@ECBAFBND@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NFBCBALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@DADLMPLB@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_Close|
	IMPORT	|InterlockedDecrement|

  00018			 AREA	 |.pdata|, PDATA
|$T43378| DCD	|$LN15@SPI_Close|
	DCD	0x40005d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@ECBAFBND@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NFBCBALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "T", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@DADLMPLB@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00970			 AREA	 |.text|, CODE, ARM

  00970		 |SPI_Close| PROC

; 369  : {

  00970		 |$LN15@SPI_Close|
  00970	e1a0c00d	 mov         r12, sp
  00974	e92d0001	 stmdb       sp!, {r0}
  00978	e92d5000	 stmdb       sp!, {r12, lr}
  0097c	e24dd020	 sub         sp, sp, #0x20
  00980		 |$M43375|

; 370  :     BOOL rc = FALSE;

  00980	e3a03000	 mov         r3, #0
  00984	e58d3004	 str         r3, [sp, #4]

; 371  :     SPI_DEVICE *pDevice;
; 372  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  00988	e59d3028	 ldr         r3, [sp, #0x28]
  0098c	e58d3008	 str         r3, [sp, #8]

; 373  : 
; 374  :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Close(0x%08x)\r\n", context));

  00990	e59f3130	 ldr         r3, [pc, #0x130]
  00994	e5933440	 ldr         r3, [r3, #0x440]
  00998	e3130004	 tst         r3, #4
  0099c	0a000005	 beq         |$LN5@SPI_Close|
  009a0	e59d1028	 ldr         r1, [sp, #0x28]
  009a4	e59f0134	 ldr         r0, [pc, #0x134]
  009a8	eb000000	 bl          NKDbgPrintfW
  009ac	e3a03001	 mov         r3, #1
  009b0	e58d3010	 str         r3, [sp, #0x10]
  009b4	ea000001	 b           |$LN6@SPI_Close|
  009b8		 |$LN5@SPI_Close|
  009b8	e3a03000	 mov         r3, #0
  009bc	e58d3010	 str         r3, [sp, #0x10]
  009c0		 |$LN6@SPI_Close|

; 375  : 
; 376  :     // Check if we get correct context
; 377  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  009c0	e59d3008	 ldr         r3, [sp, #8]
  009c4	e3530000	 cmp         r3, #0
  009c8	0a000004	 beq         |$LN1@SPI_Close|
  009cc	e59d3008	 ldr         r3, [sp, #8]
  009d0	e5932000	 ldr         r2, [r3]
  009d4	e59f3100	 ldr         r3, [pc, #0x100]
  009d8	e1520003	 cmp         r2, r3
  009dc	0a00000b	 beq         |$LN2@SPI_Close|
  009e0		 |$LN1@SPI_Close|

; 378  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Transfer: "
; 379  :             L"Incorrect context paramer\r\n"
; 380  :         ));

  009e0	e59f30e0	 ldr         r3, [pc, #0xE0]
  009e4	e5933440	 ldr         r3, [r3, #0x440]
  009e8	e3130001	 tst         r3, #1
  009ec	0a000004	 beq         |$LN7@SPI_Close|
  009f0	e59f00e0	 ldr         r0, [pc, #0xE0]
  009f4	eb000000	 bl          NKDbgPrintfW
  009f8	e3a03001	 mov         r3, #1
  009fc	e58d3014	 str         r3, [sp, #0x14]
  00a00	ea000001	 b           |$LN8@SPI_Close|
  00a04		 |$LN7@SPI_Close|
  00a04	e3a03000	 mov         r3, #0
  00a08	e58d3014	 str         r3, [sp, #0x14]
  00a0c		 |$LN8@SPI_Close|

; 381  :         goto cleanUp;

  00a0c	ea00001a	 b           |$cleanUp$42961|
  00a10		 |$LN2@SPI_Close|

; 382  :     }
; 383  : 
; 384  :     // Get device context
; 385  :     pDevice = pInstance->pDevice;

  00a10	e59d3008	 ldr         r3, [sp, #8]
  00a14	e2833004	 add         r3, r3, #4
  00a18	e5933000	 ldr         r3, [r3]
  00a1c	e58d3000	 str         r3, [sp]

; 386  : 
; 387  :     // sanity check number of instances
; 388  :     ASSERT(pDevice->instances > 0);

  00a20	e59d3000	 ldr         r3, [sp]
  00a24	e283300c	 add         r3, r3, #0xC
  00a28	e5933000	 ldr         r3, [r3]
  00a2c	e3530000	 cmp         r3, #0
  00a30	da000002	 ble         |$LN9@SPI_Close|
  00a34	e3a03001	 mov         r3, #1
  00a38	e58d3018	 str         r3, [sp, #0x18]
  00a3c	ea000007	 b           |$LN10@SPI_Close|
  00a40		 |$LN9@SPI_Close|
  00a40	e3a03f61	 mov         r3, #0x61, 30
  00a44	e59f2088	 ldr         r2, [pc, #0x88]
  00a48	e59f1080	 ldr         r1, [pc, #0x80]
  00a4c	e59f0078	 ldr         r0, [pc, #0x78]
  00a50	eb000000	 bl          NKDbgPrintfW
  00a54	e6000010	 __debugbreak_ce
  00a58	e3a03000	 mov         r3, #0
  00a5c	e58d3018	 str         r3, [sp, #0x18]
  00a60		 |$LN10@SPI_Close|

; 389  : 
; 390  :     // Decrement number of open instances
; 391  :     InterlockedDecrement(&pDevice->instances);

  00a60	e59d3000	 ldr         r3, [sp]
  00a64	e283000c	 add         r0, r3, #0xC
  00a68	eb000000	 bl          InterlockedDecrement

; 392  : 
; 393  :     // Free instance structure
; 394  :     LocalFree(pInstance);

  00a6c	e59d0008	 ldr         r0, [sp, #8]
  00a70	eb000000	 bl          LocalFree

; 395  : 
; 396  :     // Done...
; 397  :     rc = TRUE;

  00a74	e3a03001	 mov         r3, #1
  00a78	e58d3004	 str         r3, [sp, #4]
  00a7c		 |$cleanUp$42961|

; 398  : 
; 399  : cleanUp:
; 400  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Close(rc = %d)\r\n", rc));

  00a7c	e59f3044	 ldr         r3, [pc, #0x44]
  00a80	e5933440	 ldr         r3, [r3, #0x440]
  00a84	e3130004	 tst         r3, #4
  00a88	0a000005	 beq         |$LN11@SPI_Close|
  00a8c	e59d1004	 ldr         r1, [sp, #4]
  00a90	e59f002c	 ldr         r0, [pc, #0x2C]
  00a94	eb000000	 bl          NKDbgPrintfW
  00a98	e3a03001	 mov         r3, #1
  00a9c	e58d301c	 str         r3, [sp, #0x1C]
  00aa0	ea000001	 b           |$LN12@SPI_Close|
  00aa4		 |$LN11@SPI_Close|
  00aa4	e3a03000	 mov         r3, #0
  00aa8	e58d301c	 str         r3, [sp, #0x1C]
  00aac		 |$LN12@SPI_Close|

; 401  :     return rc;

  00aac	e59d3004	 ldr         r3, [sp, #4]
  00ab0	e58d300c	 str         r3, [sp, #0xC]

; 402  : }

  00ab4	e59d000c	 ldr         r0, [sp, #0xC]
  00ab8	e28dd020	 add         sp, sp, #0x20
  00abc	e89d6000	 ldmia       sp, {sp, lr}
  00ac0	e12fff1e	 bx          lr
  00ac4		 |$LN16@SPI_Close|
  00ac4		 |$LN17@SPI_Close|
  00ac4	00000000	 DCD         |??_C@_1CM@ECBAFBND@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00ac8		 |$LN18@SPI_Close|
  00ac8	00000000	 DCD         |dpCurSettings|
  00acc		 |$LN19@SPI_Close|
  00acc	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00ad0		 |$LN20@SPI_Close|
  00ad0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00ad4		 |$LN21@SPI_Close|
  00ad4	00000000	 DCD         |??_C@_1HO@LHOFFFL@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00ad8		 |$LN22@SPI_Close|
  00ad8	00000000	 DCD         |??_C@_1GC@NFBCBALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@|
  00adc		 |$LN23@SPI_Close|
  00adc	73706949	 DCD         0x73706949
  00ae0		 |$LN24@SPI_Close|
  00ae0	00000000	 DCD         |??_C@_1CK@DADLMPLB@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00ae4		 |$M43376|

			 ENDP  ; |SPI_Close|

	EXPORT	|??_C@_1GC@PPIKLHKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@EEKFJEJ@?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd@| [ DATA ] ; `string'
	EXPORT	|SPI_Transfer|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|

  00020			 AREA	 |.pdata|, PDATA
|$T43397| DCD	|$LN18@SPI_Transf|
	DCD	0x40009d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@PPIKLHKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "T", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@EEKFJEJ@?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "T", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p", 0x0, "o", 0x0, "n"
	DCB	0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "C"
	DCB	0x0, "H", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00ae4			 AREA	 |.text|, CODE, ARM

  00ae4		 |SPI_Transfer| PROC

; 411  : {

  00ae4		 |$LN18@SPI_Transf|
  00ae4	e1a0c00d	 mov         r12, sp
  00ae8	e92d0003	 stmdb       sp!, {r0, r1}
  00aec	e92d5000	 stmdb       sp!, {r12, lr}
  00af0	e24dd024	 sub         sp, sp, #0x24
  00af4		 |$M43394|

; 412  : 
; 413  :     DWORD rc = 0;

  00af4	e3a03000	 mov         r3, #0
  00af8	e58d3008	 str         r3, [sp, #8]

; 414  :     SPI_DEVICE *pDevice;
; 415  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  00afc	e59d302c	 ldr         r3, [sp, #0x2C]
  00b00	e58d3014	 str         r3, [sp, #0x14]

; 416  :     OMAP2420_MCSPI_REGS *pSPIRegs;
; 417  :     UINT32* pData = (UINT32*)pBuffer;

  00b04	e59d3030	 ldr         r3, [sp, #0x30]
  00b08	e58d3004	 str         r3, [sp, #4]

; 418  :     DWORD dwCount;
; 419  : 
; 420  : //    DEBUGMSG(ZONE_FUNCTION, ( L"+SPI_Transfer(0x%08x, 0x%08x\r\n", context, *pData));
; 421  : 
; 422  :     // Check if we get correct context
; 423  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  00b0c	e59d3014	 ldr         r3, [sp, #0x14]
  00b10	e3530000	 cmp         r3, #0
  00b14	0a000004	 beq         |$LN8@SPI_Transf|
  00b18	e59d3014	 ldr         r3, [sp, #0x14]
  00b1c	e5932000	 ldr         r2, [r3]
  00b20	e59f322c	 ldr         r3, [pc, #0x22C]
  00b24	e1520003	 cmp         r2, r3
  00b28	0a00000b	 beq         |$LN9@SPI_Transf|
  00b2c		 |$LN8@SPI_Transf|

; 424  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Transfer: "
; 425  :             L"Incorrect context paramer\r\n"
; 426  :         ));

  00b2c	e59f320c	 ldr         r3, [pc, #0x20C]
  00b30	e5933440	 ldr         r3, [r3, #0x440]
  00b34	e3130001	 tst         r3, #1
  00b38	0a000004	 beq         |$LN12@SPI_Transf|
  00b3c	e59f020c	 ldr         r0, [pc, #0x20C]
  00b40	eb000000	 bl          NKDbgPrintfW
  00b44	e3a03001	 mov         r3, #1
  00b48	e58d301c	 str         r3, [sp, #0x1C]
  00b4c	ea000001	 b           |$LN13@SPI_Transf|
  00b50		 |$LN12@SPI_Transf|
  00b50	e3a03000	 mov         r3, #0
  00b54	e58d301c	 str         r3, [sp, #0x1C]
  00b58		 |$LN13@SPI_Transf|

; 427  :         goto clean;

  00b58	ea00005a	 b           |$clean$42984|
  00b5c		 |$LN9@SPI_Transf|

; 428  :     }
; 429  :     pDevice = pInstance->pDevice;

  00b5c	e59d3014	 ldr         r3, [sp, #0x14]
  00b60	e2833004	 add         r3, r3, #4
  00b64	e5933000	 ldr         r3, [r3]
  00b68	e58d3000	 str         r3, [sp]

; 430  :     pSPIRegs = pDevice->pSPIRegs;

  00b6c	e59d3000	 ldr         r3, [sp]
  00b70	e2833014	 add         r3, r3, #0x14
  00b74	e5933000	 ldr         r3, [r3]
  00b78	e58d3010	 str         r3, [sp, #0x10]

; 431  :     // Get hardware
; 432  :     EnterCriticalSection(&pDevice->cs);

  00b7c	e59d3000	 ldr         r3, [sp]
  00b80	e2830018	 add         r0, r3, #0x18
  00b84	eb000000	 bl          EnterCriticalSection

; 433  :     
; 434  :     // Set this driver to Active Mode
; 435  :     SPI_ClockOn(pDevice);

  00b88	e59d0000	 ldr         r0, [sp]
  00b8c	eb000000	 bl          SPI_ClockOn

; 436  :     SetDevicePowerState(pDevice->hParentBus, pDevice->powerState = D0, NULL);

  00b90	e59d3000	 ldr         r3, [sp]
  00b94	e2832038	 add         r2, r3, #0x38
  00b98	e3a03000	 mov         r3, #0
  00b9c	e5823000	 str         r3, [r2]
  00ba0	e3a02000	 mov         r2, #0
  00ba4	e3a01000	 mov         r1, #0
  00ba8	e59d3000	 ldr         r3, [sp]
  00bac	e2833010	 add         r3, r3, #0x10
  00bb0	e5930000	 ldr         r0, [r3]
  00bb4	eb000000	 bl          SetDevicePowerState

; 437  :     switch (pInstance->address) {

  00bb8	e59d3014	 ldr         r3, [sp, #0x14]
  00bbc	e2833008	 add         r3, r3, #8
  00bc0	e5933000	 ldr         r3, [r3]
  00bc4	e3530000	 cmp         r3, #0
  00bc8	0a000000	 beq         |$LN5@SPI_Transf|
  00bcc	ea00002f	 b           |$LN1@SPI_Transf|
  00bd0		 |$LN5@SPI_Transf|

; 438  :     case 0:
; 439  :         // Enable the channel
; 440  :         SETREG32(&pSPIRegs->ulMCSPI_CHCTRL0, BIT0);

  00bd0	e59d3010	 ldr         r3, [sp, #0x10]
  00bd4	e2833034	 add         r3, r3, #0x34
  00bd8	e5933000	 ldr         r3, [r3]
  00bdc	e3832001	 orr         r2, r3, #1
  00be0	e59d3010	 ldr         r3, [sp, #0x10]
  00be4	e2833034	 add         r3, r3, #0x34
  00be8	e5832000	 str         r2, [r3]

; 441  : 
; 442  :         OUTREG32(&pSPIRegs->ulMCSPI_TX0, *pData);

  00bec	e59d3010	 ldr         r3, [sp, #0x10]
  00bf0	e2832038	 add         r2, r3, #0x38
  00bf4	e59d3004	 ldr         r3, [sp, #4]
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e5823000	 str         r3, [r2]

; 443  :         // Wait for transfer to finish.
; 444  :         dwCount = 0;

  00c00	e3a03000	 mov         r3, #0
  00c04	e58d300c	 str         r3, [sp, #0xC]
  00c08		 |$LN4@SPI_Transf|

; 445  :         while(!(INREG32(&pSPIRegs->ulMCSPI_CHSTATUS0) & BIT2))

  00c08	e59d3010	 ldr         r3, [sp, #0x10]
  00c0c	e2833030	 add         r3, r3, #0x30
  00c10	e5933000	 ldr         r3, [r3]
  00c14	e3130004	 tst         r3, #4
  00c18	1a000013	 bne         |$LN3@SPI_Transf|

; 446  :         {
; 447  :             if (dwCount++>0x1ffff)

  00c1c	e59d200c	 ldr         r2, [sp, #0xC]
  00c20	e3e034ff	 mvn         r3, #0xFF, 8
  00c24	e22338fe	 eor         r3, r3, #0xFE, 16
  00c28	e1520003	 cmp         r2, r3
  00c2c	e59d300c	 ldr         r3, [sp, #0xC]
  00c30	e2833001	 add         r3, r3, #1
  00c34	e58d300c	 str         r3, [sp, #0xC]
  00c38	9a00000a	 bls         |$LN2@SPI_Transf|

; 448  :             {
; 449  :                 // Break out dead lock, something is wrong.
; 450  :                 ERRORMSG (1, (L"SPI_Transfer: SPI is not responding CHSTATUS = 0x%x\r\n",INREG32(&pSPIRegs->ulMCSPI_CHSTATUS0)));

  00c3c	e3a02c01	 mov         r2, #1, 24
  00c40	e38220c2	 orr         r2, r2, #0xC2
  00c44	e59f1100	 ldr         r1, [pc, #0x100]
  00c48	e59f00f8	 ldr         r0, [pc, #0xF8]
  00c4c	eb000000	 bl          NKDbgPrintfW
  00c50	e59d3010	 ldr         r3, [sp, #0x10]
  00c54	e2833030	 add         r3, r3, #0x30
  00c58	e5931000	 ldr         r1, [r3]
  00c5c	e59f00e0	 ldr         r0, [pc, #0xE0]
  00c60	eb000000	 bl          NKDbgPrintfW

; 451  :                 goto clean;

  00c64	ea000017	 b           |$clean$42984|
  00c68		 |$LN2@SPI_Transf|

; 452  :             }
; 453  :         }

  00c68	eaffffe6	 b           |$LN4@SPI_Transf|
  00c6c		 |$LN3@SPI_Transf|

; 454  :         *pData = 0xFFFF & INREG32(&pSPIRegs->ulMCSPI_RX0);

  00c6c	e59d3010	 ldr         r3, [sp, #0x10]
  00c70	e283303c	 add         r3, r3, #0x3C
  00c74	e5932000	 ldr         r2, [r3]
  00c78	e3a03cff	 mov         r3, #0xFF, 24
  00c7c	e38330ff	 orr         r3, r3, #0xFF
  00c80	e0022003	 and         r2, r2, r3
  00c84	e59d3004	 ldr         r3, [sp, #4]
  00c88	e5832000	 str         r2, [r3]

; 455  :         break;

  00c8c	ea00000b	 b           |$LN6@SPI_Transf|
  00c90		 |$LN1@SPI_Transf|

; 456  : 
; 457  :     default:
; 458  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Transfer: Incorrect channel address\r\n"));

  00c90	e59f30a8	 ldr         r3, [pc, #0xA8]
  00c94	e5933440	 ldr         r3, [r3, #0x440]
  00c98	e3130001	 tst         r3, #1
  00c9c	0a000004	 beq         |$LN14@SPI_Transf|
  00ca0	e59f0094	 ldr         r0, [pc, #0x94]
  00ca4	eb000000	 bl          NKDbgPrintfW
  00ca8	e3a03001	 mov         r3, #1
  00cac	e58d3020	 str         r3, [sp, #0x20]
  00cb0	ea000001	 b           |$LN15@SPI_Transf|
  00cb4		 |$LN14@SPI_Transf|
  00cb4	e3a03000	 mov         r3, #0
  00cb8	e58d3020	 str         r3, [sp, #0x20]
  00cbc		 |$LN15@SPI_Transf|

; 459  :         goto clean;

  00cbc	ea000001	 b           |$clean$42984|
  00cc0		 |$LN6@SPI_Transf|

; 460  :     }
; 461  :     rc = 1;

  00cc0	e3a03001	 mov         r3, #1
  00cc4	e58d3008	 str         r3, [sp, #8]
  00cc8		 |$clean$42984|

; 462  : 
; 463  : clean:
; 464  :     // Disable the channel.
; 465  :     CLRREG32(&pSPIRegs->ulMCSPI_CHCTRL0, BIT0);

  00cc8	e59d3010	 ldr         r3, [sp, #0x10]
  00ccc	e2833034	 add         r3, r3, #0x34
  00cd0	e5932000	 ldr         r2, [r3]
  00cd4	e3e03001	 mvn         r3, #1
  00cd8	e0022003	 and         r2, r2, r3
  00cdc	e59d3010	 ldr         r3, [sp, #0x10]
  00ce0	e2833034	 add         r3, r3, #0x34
  00ce4	e5832000	 str         r2, [r3]

; 466  : 
; 467  :     // Set this driver to Suspend Mode
; 468  :     SPI_ClockOff(pDevice);

  00ce8	e59d0000	 ldr         r0, [sp]
  00cec	eb000000	 bl          SPI_ClockOff

; 469  :     SetDevicePowerState(pDevice->hParentBus, pDevice->powerState = D4, NULL);

  00cf0	e59d3000	 ldr         r3, [sp]
  00cf4	e2832038	 add         r2, r3, #0x38
  00cf8	e3a03004	 mov         r3, #4
  00cfc	e5823000	 str         r3, [r2]
  00d00	e3a02000	 mov         r2, #0
  00d04	e3a01004	 mov         r1, #4
  00d08	e59d3000	 ldr         r3, [sp]
  00d0c	e2833010	 add         r3, r3, #0x10
  00d10	e5930000	 ldr         r0, [r3]
  00d14	eb000000	 bl          SetDevicePowerState

; 470  :     
; 471  :     // Release hardware
; 472  :     LeaveCriticalSection(&pDevice->cs);

  00d18	e59d3000	 ldr         r3, [sp]
  00d1c	e2830018	 add         r0, r3, #0x18
  00d20	eb000000	 bl          LeaveCriticalSection

; 473  : //    DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Transfer(rc = %d)\r\n", rc));
; 474  :     return rc;

  00d24	e59d3008	 ldr         r3, [sp, #8]
  00d28	e58d3018	 str         r3, [sp, #0x18]

; 475  : }

  00d2c	e59d0018	 ldr         r0, [sp, #0x18]
  00d30	e28dd024	 add         sp, sp, #0x24
  00d34	e89d6000	 ldmia       sp, {sp, lr}
  00d38	e12fff1e	 bx          lr
  00d3c		 |$LN19@SPI_Transf|
  00d3c		 |$LN20@SPI_Transf|
  00d3c	00000000	 DCD         |??_C@_1GC@PPIKLHKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@|
  00d40		 |$LN21@SPI_Transf|
  00d40	00000000	 DCD         |dpCurSettings|
  00d44		 |$LN22@SPI_Transf|
  00d44	00000000	 DCD         |??_C@_1GM@EEKFJEJ@?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo?$AAn?$AAd@|
  00d48		 |$LN23@SPI_Transf|
  00d48	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00d4c		 |$LN24@SPI_Transf|
  00d4c	00000000	 DCD         |??_C@_1HO@LHOFFFL@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00d50		 |$LN25@SPI_Transf|
  00d50	00000000	 DCD         |??_C@_1GC@NFBCBALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@|
  00d54		 |$LN26@SPI_Transf|
  00d54	73706949	 DCD         0x73706949
  00d58		 |$M43395|

			 ENDP  ; |SPI_Transfer|

	EXPORT	|??_C@_1DE@JMAHJFIP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PACMMEIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@ONJIKFBL@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@ONBGFDOB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@LDLGGPKF@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@FNIABNAM@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@LAADAFLA@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AAD?$AAe?$AAp?$AAr?$AAe?$AAc?$AAa?$AAt?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@MLBDJCHL@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAC?$AAe?$AAS?$AAa?$AAf?$AAe?$AAC?$AAo?$AAp?$AAy?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@JHAEMGFJ@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI?$AAL?$AAI?$AAT?$AAI?$AAE?$AAS?$AA?5?$AA?$DN?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@NBABJICD@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI?$AAL?$AAI?$AAT?$AAI?$AAE?$AAS?$AA?5?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|SPI_SetSlaveAddress|
	EXPORT	|??_C@_1OG@BBMBGGPP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@| [ DATA ] ; `string'
	EXPORT	|GetCurrentProcessId|
	EXPORT	|??_C@_1GE@NMIDEKOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@KKFHJLNO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|SPI_IOControl|
	IMPORT	|memset|
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|memcmp|
	IMPORT	|SetLastError|
	IMPORT	|GetCallerProcess|

  00028			 AREA	 |.pdata|, PDATA
|$T43432| DCD	|$LN59@SPI_IOCont|
	DCD	0x4001ad04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@JMAHJFIP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "x", 0x0, "x", 0x0, "x", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, ".", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PACMMEIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "G", 0x0, "E"
	DCB	0x0, "T", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@ONJIKFBL@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "G", 0x0, "E"
	DCB	0x0, "T", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@ONBGFDOB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo?$AAw@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@LDLGGPKF@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@FNIABNAM@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr?$AAa@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@LAADAFLA@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AAD?$AAe?$AAp?$AAr?$AAe?$AAc?$AAa?$AAt?$AAe?$AAd@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "Q", 0x0, "U"
	DCB	0x0, "E", 0x0, "R", 0x0, "Y", 0x0, "D", 0x0, "e", 0x0, "p"
	DCB	0x0, "r", 0x0, "e", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "F", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "C"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MLBDJCHL@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAC?$AAe?$AAS?$AAa?$AAf?$AAe?$AAC?$AAo?$AAp?$AAy?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "e"
	DCB	0x0, "S", 0x0, "a", 0x0, "f", 0x0, "e", 0x0, "C", 0x0, "o"
	DCB	0x0, "p", 0x0, "y", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@JHAEMGFJ@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI?$AAL?$AAI?$AAT?$AAI?$AAE?$AAS?$AA?5?$AA?$DN?$AA?5@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "C", 0x0, "A"
	DCB	0x0, "P", 0x0, "A", 0x0, "B", 0x0, "I", 0x0, "L", 0x0, "I"
	DCB	0x0, "T", 0x0, "I", 0x0, "E", 0x0, "S", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@NBABJICD@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI?$AAL?$AAI?$AAT?$AAI?$AAE?$AAS?$AA?5?$AAI?$AAn@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "C", 0x0, "A"
	DCB	0x0, "P", 0x0, "A", 0x0, "B", 0x0, "I", 0x0, "L", 0x0, "I"
	DCB	0x0, "T", 0x0, "I", 0x0, "E", 0x0, "S", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1OG@BBMBGGPP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "D", 0x0, "K"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "R", 0x0, "I", 0x0, "V", 0x0, "E", 0x0, "R", 0x0, "_"
	DCB	0x0, "I", 0x0, "F", 0x0, "C", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "n", 0x0, "l", 0x0, "y", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "(", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@NMIDEKOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@KKFHJLNO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00d58			 AREA	 |.text|, CODE, ARM

  00d58		 |SPI_IOControl| PROC

; 486  : ) {

  00d58		 |$LN59@SPI_IOCont|
  00d58	e1a0c00d	 mov         r12, sp
  00d5c	e92d000f	 stmdb       sp!, {r0 - r3}
  00d60	e92d5000	 stmdb       sp!, {r12, lr}
  00d64	e24dd0b8	 sub         sp, sp, #0xB8
  00d68		 |$M43429|

; 487  :     BOOL bRetVal = FALSE;

  00d68	e3a03000	 mov         r3, #0
  00d6c	e58d3018	 str         r3, [sp, #0x18]

; 488  :     SPI_DEVICE *pDevice = NULL;

  00d70	e3a03000	 mov         r3, #0
  00d74	e58d3010	 str         r3, [sp, #0x10]

; 489  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  00d78	e59d30c0	 ldr         r3, [sp, #0xC0]
  00d7c	e58d3014	 str         r3, [sp, #0x14]

; 490  :     DEVICE_IFC_SPI ifc;
; 491  : 
; 492  :     DEBUGMSG(ZONE_FUNCTION, (
; 493  :         L"+SPI_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 494  :         context, dwCode, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 495  :     ));

  00d80	e59f3628	 ldr         r3, [pc, #0x628]
  00d84	e5933440	 ldr         r3, [r3, #0x440]
  00d88	e3130004	 tst         r3, #4
  00d8c	0a00000f	 beq         |$LN40@SPI_IOCont|
  00d90	e59d30d8	 ldr         r3, [sp, #0xD8]
  00d94	e58d300c	 str         r3, [sp, #0xC]
  00d98	e59d30d4	 ldr         r3, [sp, #0xD4]
  00d9c	e58d3008	 str         r3, [sp, #8]
  00da0	e59d30d0	 ldr         r3, [sp, #0xD0]
  00da4	e58d3004	 str         r3, [sp, #4]
  00da8	e59d30cc	 ldr         r3, [sp, #0xCC]
  00dac	e58d3000	 str         r3, [sp]
  00db0	e59d30c8	 ldr         r3, [sp, #0xC8]
  00db4	e59d20c4	 ldr         r2, [sp, #0xC4]
  00db8	e59d10c0	 ldr         r1, [sp, #0xC0]
  00dbc	e59f0644	 ldr         r0, [pc, #0x644]
  00dc0	eb000000	 bl          NKDbgPrintfW
  00dc4	e3a03001	 mov         r3, #1
  00dc8	e58d3070	 str         r3, [sp, #0x70]
  00dcc	ea000001	 b           |$LN41@SPI_IOCont|
  00dd0		 |$LN40@SPI_IOCont|
  00dd0	e3a03000	 mov         r3, #0
  00dd4	e58d3070	 str         r3, [sp, #0x70]
  00dd8		 |$LN41@SPI_IOCont|

; 496  : 
; 497  :     // Check if we get correct context
; 498  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  00dd8	e59d3014	 ldr         r3, [sp, #0x14]
  00ddc	e3530000	 cmp         r3, #0
  00de0	0a000004	 beq         |$LN36@SPI_IOCont|
  00de4	e59d3014	 ldr         r3, [sp, #0x14]
  00de8	e5932000	 ldr         r2, [r3]
  00dec	e59f3610	 ldr         r3, [pc, #0x610]
  00df0	e1520003	 cmp         r2, r3
  00df4	0a00000b	 beq         |$LN37@SPI_IOCont|
  00df8		 |$LN36@SPI_IOCont|

; 499  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_IOControl: "
; 500  :             L"Incorrect context paramer\r\n"
; 501  :         ));

  00df8	e59f35b0	 ldr         r3, [pc, #0x5B0]
  00dfc	e5933440	 ldr         r3, [r3, #0x440]
  00e00	e3130001	 tst         r3, #1
  00e04	0a000004	 beq         |$LN42@SPI_IOCont|
  00e08	e59f05f0	 ldr         r0, [pc, #0x5F0]
  00e0c	eb000000	 bl          NKDbgPrintfW
  00e10	e3a03001	 mov         r3, #1
  00e14	e58d3074	 str         r3, [sp, #0x74]
  00e18	ea000001	 b           |$LN43@SPI_IOCont|
  00e1c		 |$LN42@SPI_IOCont|
  00e1c	e3a03000	 mov         r3, #0
  00e20	e58d3074	 str         r3, [sp, #0x74]
  00e24		 |$LN43@SPI_IOCont|

; 502  :         goto clean;

  00e24	ea00014e	 b           |$clean$43048|
  00e28		 |$LN37@SPI_IOCont|

; 503  :     }
; 504  : 
; 505  :     //Get Device
; 506  :     pDevice = pInstance->pDevice;

  00e28	e59d3014	 ldr         r3, [sp, #0x14]
  00e2c	e2833004	 add         r3, r3, #4
  00e30	e5933000	 ldr         r3, [r3]
  00e34	e58d3010	 str         r3, [sp, #0x10]

; 507  : 
; 508  :     switch (dwCode) {

  00e38	e59d30c4	 ldr         r3, [sp, #0xC4]
  00e3c	e58d3078	 str         r3, [sp, #0x78]
  00e40	e59d2078	 ldr         r2, [sp, #0x78]
  00e44	e59f35b0	 ldr         r3, [pc, #0x5B0]
  00e48	e1520003	 cmp         r2, r3
  00e4c	8a000013	 bhi         |$LN54@SPI_IOCont|
  00e50	e59d2078	 ldr         r2, [sp, #0x78]
  00e54	e59f35a0	 ldr         r3, [pc, #0x5A0]
  00e58	e1520003	 cmp         r2, r3
  00e5c	0a000104	 beq         |$LN6@SPI_IOCont|
  00e60	e59d2078	 ldr         r2, [sp, #0x78]
  00e64	e3a03822	 mov         r3, #0x22, 16
  00e68	e3833b01	 orr         r3, r3, #1, 22
  00e6c	e1520003	 cmp         r2, r3
  00e70	0a000013	 beq         |$LN33@SPI_IOCont|
  00e74	e59d2078	 ldr         r2, [sp, #0x78]
  00e78	e3a03822	 mov         r3, #0x22, 16
  00e7c	e3833b02	 orr         r3, r3, #2, 22
  00e80	e1520003	 cmp         r2, r3
  00e84	0a00005e	 beq         |$LN24@SPI_IOCont|
  00e88	e59d2078	 ldr         r2, [sp, #0x78]
  00e8c	e3a03832	 mov         r3, #0x32, 16
  00e90	e3833a01	 orr         r3, r3, #1, 20
  00e94	e1520003	 cmp         r2, r3
  00e98	0a000070	 beq         |$LN20@SPI_IOCont|
  00e9c	ea000129	 b           |$LN1@SPI_IOCont|
  00ea0		 |$LN54@SPI_IOCont|
  00ea0	e59d2078	 ldr         r2, [sp, #0x78]
  00ea4	e59f354c	 ldr         r3, [pc, #0x54C]
  00ea8	e1520003	 cmp         r2, r3
  00eac	0a0000b2	 beq         |$LN14@SPI_IOCont|
  00eb0	e59d2078	 ldr         r2, [sp, #0x78]
  00eb4	e59f3538	 ldr         r3, [pc, #0x538]
  00eb8	e1520003	 cmp         r2, r3
  00ebc	0a0000a0	 beq         |$LN15@SPI_IOCont|
  00ec0	ea000120	 b           |$LN1@SPI_IOCont|
  00ec4		 |$LN33@SPI_IOCont|

; 509  :     case IOCTL_DDK_GET_DRIVER_IFC:
; 510  :         // We can give interface only to our peer in device process
; 511  :         if (GetCurrentProcessId() != (DWORD)GetCallerProcess()) {

  00ec4	eb000000	 bl          GetCurrentProcessId
  00ec8	e58d007c	 str         r0, [sp, #0x7C]
  00ecc	eb000000	 bl          GetCallerProcess
  00ed0	e58d0080	 str         r0, [sp, #0x80]
  00ed4	e59d207c	 ldr         r2, [sp, #0x7C]
  00ed8	e59d3080	 ldr         r3, [sp, #0x80]
  00edc	e1520003	 cmp         r2, r3
  00ee0	0a000010	 beq         |$LN32@SPI_IOCont|

; 512  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_IOControl: "
; 513  :                 L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 514  :                 L"device process (caller process id 0x%08x)\r\n",
; 515  :                 GetCallerProcess()
; 516  :             ));

  00ee4	e59f34c4	 ldr         r3, [pc, #0x4C4]
  00ee8	e5933440	 ldr         r3, [r3, #0x440]
  00eec	e3130001	 tst         r3, #1
  00ef0	0a000007	 beq         |$LN44@SPI_IOCont|
  00ef4	eb000000	 bl          GetCallerProcess
  00ef8	e58d0084	 str         r0, [sp, #0x84]
  00efc	e59d1084	 ldr         r1, [sp, #0x84]
  00f00	e59f04e8	 ldr         r0, [pc, #0x4E8]
  00f04	eb000000	 bl          NKDbgPrintfW
  00f08	e3a03001	 mov         r3, #1
  00f0c	e58d3088	 str         r3, [sp, #0x88]
  00f10	ea000001	 b           |$LN45@SPI_IOCont|
  00f14		 |$LN44@SPI_IOCont|
  00f14	e3a03000	 mov         r3, #0
  00f18	e58d3088	 str         r3, [sp, #0x88]
  00f1c		 |$LN45@SPI_IOCont|

; 517  :             SetLastError(ERROR_ACCESS_DENIED);

  00f1c	e3a00005	 mov         r0, #5
  00f20	eb000000	 bl          SetLastError

; 518  :             goto clean;

  00f24	ea00010e	 b           |$clean$43048|
  00f28		 |$LN32@SPI_IOCont|

; 519  :         }
; 520  :         // Check input parameters
; 521  :         if (pInBuffer == NULL || inSize < sizeof(GUID)) {

  00f28	e59d30c8	 ldr         r3, [sp, #0xC8]
  00f2c	e3530000	 cmp         r3, #0
  00f30	0a000002	 beq         |$LN30@SPI_IOCont|
  00f34	e59d30cc	 ldr         r3, [sp, #0xCC]
  00f38	e3530010	 cmp         r3, #0x10
  00f3c	2a000002	 bcs         |$LN31@SPI_IOCont|
  00f40		 |$LN30@SPI_IOCont|

; 522  :             SetLastError(ERROR_INVALID_PARAMETER);

  00f40	e3a00057	 mov         r0, #0x57
  00f44	eb000000	 bl          SetLastError

; 523  :             break;

  00f48	ea000105	 b           |$LN34@SPI_IOCont|
  00f4c		 |$LN31@SPI_IOCont|

; 524  :         }
; 525  :         if (IsEqualGUID(pInBuffer, &DEVICE_IFC_SPI_GUID)) {

  00f4c	e3a02010	 mov         r2, #0x10
  00f50	e59f1494	 ldr         r1, [pc, #0x494]
  00f54	e59d00c8	 ldr         r0, [sp, #0xC8]
  00f58	eb000000	 bl          memcmp
  00f5c	e58d008c	 str         r0, [sp, #0x8C]
  00f60	e59d308c	 ldr         r3, [sp, #0x8C]
  00f64	e3530000	 cmp         r3, #0
  00f68	1a000022	 bne         |$LN29@SPI_IOCont|

; 526  :             if (pOutSize != NULL) *pOutSize = sizeof(DEVICE_IFC_SPI);

  00f6c	e59d30d8	 ldr         r3, [sp, #0xD8]
  00f70	e3530000	 cmp         r3, #0
  00f74	0a000002	 beq         |$LN28@SPI_IOCont|
  00f78	e59d20d8	 ldr         r2, [sp, #0xD8]
  00f7c	e3a0300c	 mov         r3, #0xC
  00f80	e5823000	 str         r3, [r2]
  00f84		 |$LN28@SPI_IOCont|

; 527  :             if (pOutBuffer == NULL || outSize < sizeof(DEVICE_IFC_SPI)) {

  00f84	e59d30d0	 ldr         r3, [sp, #0xD0]
  00f88	e3530000	 cmp         r3, #0
  00f8c	0a000002	 beq         |$LN26@SPI_IOCont|
  00f90	e59d30d4	 ldr         r3, [sp, #0xD4]
  00f94	e353000c	 cmp         r3, #0xC
  00f98	2a000002	 bcs         |$LN27@SPI_IOCont|
  00f9c		 |$LN26@SPI_IOCont|

; 528  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00f9c	e3a00057	 mov         r0, #0x57
  00fa0	eb000000	 bl          SetLastError

; 529  :                 break;

  00fa4	ea0000ee	 b           |$LN34@SPI_IOCont|
  00fa8		 |$LN27@SPI_IOCont|

; 530  :             }
; 531  :             ifc.context = context;

  00fa8	e59d30c0	 ldr         r3, [sp, #0xC0]
  00fac	e58d301c	 str         r3, [sp, #0x1C]

; 532  :             ifc.pfnSetSlaveAddress = SPI_SetSlaveAddress;

  00fb0	e59f3430	 ldr         r3, [pc, #0x430]
  00fb4	e58d3020	 str         r3, [sp, #0x20]

; 533  :             ifc.pfnTransfer = SPI_Transfer;

  00fb8	e59f3424	 ldr         r3, [pc, #0x424]
  00fbc	e58d3024	 str         r3, [sp, #0x24]

; 534  :             if (!CeSafeCopyMemory(pOutBuffer, &ifc, sizeof(DEVICE_IFC_SPI))) {

  00fc0	e3a0200c	 mov         r2, #0xC
  00fc4	e28d101c	 add         r1, sp, #0x1C
  00fc8	e59d00d0	 ldr         r0, [sp, #0xD0]
  00fcc	eb000000	 bl          CeSafeCopyMemory
  00fd0	e58d0090	 str         r0, [sp, #0x90]
  00fd4	e59d3090	 ldr         r3, [sp, #0x90]
  00fd8	e3530000	 cmp         r3, #0
  00fdc	1a000002	 bne         |$LN25@SPI_IOCont|

; 535  :                 SetLastError(ERROR_INVALID_PARAMETER);

  00fe0	e3a00057	 mov         r0, #0x57
  00fe4	eb000000	 bl          SetLastError

; 536  :                 break;

  00fe8	ea0000dd	 b           |$LN34@SPI_IOCont|
  00fec		 |$LN25@SPI_IOCont|

; 537  :             }
; 538  :             bRetVal = TRUE;

  00fec	e3a03001	 mov         r3, #1
  00ff0	e58d3018	 str         r3, [sp, #0x18]

; 539  :             break;

  00ff4	ea0000da	 b           |$LN34@SPI_IOCont|
  00ff8		 |$LN29@SPI_IOCont|

; 540  :         }
; 541  :         SetLastError(ERROR_INVALID_PARAMETER);

  00ff8	e3a00057	 mov         r0, #0x57
  00ffc	eb000000	 bl          SetLastError

; 542  :         break;

  01000	ea0000d7	 b           |$LN34@SPI_IOCont|
  01004		 |$LN24@SPI_IOCont|

; 543  :     case IOCTL_SPI_SET_SLAVE_ADDRESS:
; 544  :         if (pOutSize != NULL) *pOutSize = sizeof(DWORD);

  01004	e59d30d8	 ldr         r3, [sp, #0xD8]
  01008	e3530000	 cmp         r3, #0
  0100c	0a000002	 beq         |$LN23@SPI_IOCont|
  01010	e59d20d8	 ldr         r2, [sp, #0xD8]
  01014	e3a03004	 mov         r3, #4
  01018	e5823000	 str         r3, [r2]
  0101c		 |$LN23@SPI_IOCont|

; 545  :         if (pInBuffer == NULL || inSize < sizeof(DWORD)) {

  0101c	e59d30c8	 ldr         r3, [sp, #0xC8]
  01020	e3530000	 cmp         r3, #0
  01024	0a000002	 beq         |$LN21@SPI_IOCont|
  01028	e59d30cc	 ldr         r3, [sp, #0xCC]
  0102c	e3530004	 cmp         r3, #4
  01030	2a000002	 bcs         |$LN22@SPI_IOCont|
  01034		 |$LN21@SPI_IOCont|

; 546  :             SetLastError(ERROR_INVALID_PARAMETER);

  01034	e3a00057	 mov         r0, #0x57
  01038	eb000000	 bl          SetLastError

; 547  :             break;

  0103c	ea0000c8	 b           |$LN34@SPI_IOCont|
  01040		 |$LN22@SPI_IOCont|

; 548  :         }
; 549  :         bRetVal = SPI_SetSlaveAddress(context, (DWORD)*pInBuffer);

  01040	e59d30c8	 ldr         r3, [sp, #0xC8]
  01044	e5d31000	 ldrb        r1, [r3]
  01048	e59d00c0	 ldr         r0, [sp, #0xC0]
  0104c	eb000000	 bl          SPI_SetSlaveAddress
  01050	e58d0094	 str         r0, [sp, #0x94]
  01054	e59d3094	 ldr         r3, [sp, #0x94]
  01058	e58d3018	 str         r3, [sp, #0x18]

; 550  :         break;

  0105c	ea0000c0	 b           |$LN34@SPI_IOCont|
  01060		 |$LN20@SPI_IOCont|

; 551  : 
; 552  : 
; 553  :     // Power management functions.
; 554  :     // Return device specific power capabilities.
; 555  :     case IOCTL_POWER_CAPABILITIES:
; 556  :     {
; 557  :         POWER_CAPABILITIES pc;
; 558  : 
; 559  :         // Check arguments.
; 560  :         if ( pOutBuffer == NULL || outSize < sizeof(POWER_CAPABILITIES))

  01060	e59d30d0	 ldr         r3, [sp, #0xD0]
  01064	e3530000	 cmp         r3, #0
  01068	0a000002	 beq         |$LN18@SPI_IOCont|
  0106c	e59d30d4	 ldr         r3, [sp, #0xD4]
  01070	e3530030	 cmp         r3, #0x30
  01074	2a000007	 bcs         |$LN19@SPI_IOCont|
  01078		 |$LN18@SPI_IOCont|

; 561  :         {
; 562  :             ERRORMSG( TRUE, ( TEXT( "SPI: IOCTL_POWER_CAPABILITIES "
; 563  :                 L"Invalid parameter.\r\n" ) ) );

  01078	e3a02c02	 mov         r2, #2, 24
  0107c	e3822033	 orr         r2, r2, #0x33
  01080	e59f1334	 ldr         r1, [pc, #0x334]
  01084	e59f032c	 ldr         r0, [pc, #0x32C]
  01088	eb000000	 bl          NKDbgPrintfW
  0108c	e59f034c	 ldr         r0, [pc, #0x34C]
  01090	eb000000	 bl          NKDbgPrintfW

; 564  :             break;

  01094	ea0000b2	 b           |$LN34@SPI_IOCont|
  01098		 |$LN19@SPI_IOCont|

; 565  :         }
; 566  : 
; 567  :         // Clear capabilities structure.
; 568  :         memset(&pc, 0, sizeof(POWER_CAPABILITIES));

  01098	e3a02030	 mov         r2, #0x30
  0109c	e3a01000	 mov         r1, #0
  010a0	e28d0028	 add         r0, sp, #0x28
  010a4	eb000000	 bl          memset

; 569  : 
; 570  :         // Set power capabilities. Supports D0 and D4.
; 571  :         pc.DeviceDx = DX_MASK(D0)|DX_MASK(D4);

  010a8	e3a03011	 mov         r3, #0x11
  010ac	e5cd3028	 strb        r3, [sp, #0x28]

; 572  : 
; 573  :         DEBUGMSG(ZONE_POWER, (TEXT("SPI: IOCTL_POWER_CAPABILITIES = 0x%x\r\n"), pc.DeviceDx));

  010b0	e59f32f8	 ldr         r3, [pc, #0x2F8]
  010b4	e5933440	 ldr         r3, [r3, #0x440]
  010b8	e3130040	 tst         r3, #0x40
  010bc	0a000005	 beq         |$LN46@SPI_IOCont|
  010c0	e5dd1028	 ldrb        r1, [sp, #0x28]
  010c4	e59f0310	 ldr         r0, [pc, #0x310]
  010c8	eb000000	 bl          NKDbgPrintfW
  010cc	e3a03001	 mov         r3, #1
  010d0	e58d3098	 str         r3, [sp, #0x98]
  010d4	ea000001	 b           |$LN47@SPI_IOCont|
  010d8		 |$LN46@SPI_IOCont|
  010d8	e3a03000	 mov         r3, #0
  010dc	e58d3098	 str         r3, [sp, #0x98]
  010e0		 |$LN47@SPI_IOCont|

; 574  : 
; 575  :         if (CeSafeCopyMemory(pOutBuffer, &pc, sizeof(pc)) == 0)

  010e0	e3a02030	 mov         r2, #0x30
  010e4	e28d1028	 add         r1, sp, #0x28
  010e8	e59d00d0	 ldr         r0, [sp, #0xD0]
  010ec	eb000000	 bl          CeSafeCopyMemory
  010f0	e58d009c	 str         r0, [sp, #0x9C]
  010f4	e59d309c	 ldr         r3, [sp, #0x9C]
  010f8	e3530000	 cmp         r3, #0
  010fc	1a000007	 bne         |$LN17@SPI_IOCont|

; 576  :         {
; 577  :             ERRORMSG( TRUE, ( TEXT( "SPI: CeSafeCopyMemory Failed\r\n" ) ) );

  01100	e3a02c02	 mov         r2, #2, 24
  01104	e3822041	 orr         r2, r2, #0x41
  01108	e59f12ac	 ldr         r1, [pc, #0x2AC]
  0110c	e59f02a4	 ldr         r0, [pc, #0x2A4]
  01110	eb000000	 bl          NKDbgPrintfW
  01114	e59f02a8	 ldr         r0, [pc, #0x2A8]
  01118	eb000000	 bl          NKDbgPrintfW

; 578  :             break;

  0111c	ea000090	 b           |$LN34@SPI_IOCont|
  01120		 |$LN17@SPI_IOCont|

; 579  :         }
; 580  : 
; 581  :         // Update returned data size.
; 582  :         if (pOutSize)

  01120	e59d30d8	 ldr         r3, [sp, #0xD8]
  01124	e3530000	 cmp         r3, #0
  01128	0a000002	 beq         |$LN16@SPI_IOCont|

; 583  :         {
; 584  :             *pOutSize = sizeof(pc);

  0112c	e59d20d8	 ldr         r2, [sp, #0xD8]
  01130	e3a03030	 mov         r3, #0x30
  01134	e5823000	 str         r3, [r2]
  01138		 |$LN16@SPI_IOCont|

; 585  :         }
; 586  :         bRetVal = TRUE;

  01138	e3a03001	 mov         r3, #1
  0113c	e58d3018	 str         r3, [sp, #0x18]

; 587  :         break;

  01140	ea000087	 b           |$LN34@SPI_IOCont|
  01144		 |$LN15@SPI_IOCont|

; 588  :     }
; 589  : 
; 590  :     // Indicate if the device is ready to enter a new device power state.
; 591  :     case IOCTL_POWER_QUERY:
; 592  :     {
; 593  :         DEBUGMSG(ZONE_POWER, (TEXT("SPI: IOCTL_POWER_QUERY"
; 594  :             L"Deprecated Function Called\r\n")));

  01144	e59f3264	 ldr         r3, [pc, #0x264]
  01148	e5933440	 ldr         r3, [r3, #0x440]
  0114c	e3130040	 tst         r3, #0x40
  01150	0a000004	 beq         |$LN48@SPI_IOCont|
  01154	e59f027c	 ldr         r0, [pc, #0x27C]
  01158	eb000000	 bl          NKDbgPrintfW
  0115c	e3a03001	 mov         r3, #1
  01160	e58d30a0	 str         r3, [sp, #0xA0]
  01164	ea000001	 b           |$LN49@SPI_IOCont|
  01168		 |$LN48@SPI_IOCont|
  01168	e3a03000	 mov         r3, #0
  0116c	e58d30a0	 str         r3, [sp, #0xA0]
  01170		 |$LN49@SPI_IOCont|

; 595  :         bRetVal = FALSE;

  01170	e3a03000	 mov         r3, #0
  01174	e58d3018	 str         r3, [sp, #0x18]

; 596  :         break;

  01178	ea000079	 b           |$LN34@SPI_IOCont|
  0117c		 |$LN14@SPI_IOCont|

; 597  :     }
; 598  : 
; 599  :     // Request a change from one device power state to another
; 600  :     // This driver self-manages it's internal power state by controlling
; 601  :     // functional and interface clocks as needed in the Read and Write
; 602  :     // functions rather than waiting for PM to tell it to save power
; 603  :     // So the set calls below just update the power state variable
; 604  :     case IOCTL_POWER_SET:
; 605  :     {
; 606  :         CEDEVICE_POWER_STATE dxState;
; 607  : 
; 608  :         // Check arguments.
; 609  :         if (pOutBuffer == NULL || outSize < sizeof(CEDEVICE_POWER_STATE))

  0117c	e59d30d0	 ldr         r3, [sp, #0xD0]
  01180	e3530000	 cmp         r3, #0
  01184	0a000002	 beq         |$LN12@SPI_IOCont|
  01188	e59d30d4	 ldr         r3, [sp, #0xD4]
  0118c	e3530004	 cmp         r3, #4
  01190	2a000006	 bcs         |$LN13@SPI_IOCont|
  01194		 |$LN12@SPI_IOCont|

; 610  :         {
; 611  :             ERRORMSG( TRUE, ( TEXT( "SPI: IOCTL_POWER_SET"
; 612  :                 L"Invalid parameter.\r\n" ) ) );

  01194	e3a02f99	 mov         r2, #0x99, 30
  01198	e59f121c	 ldr         r1, [pc, #0x21C]
  0119c	e59f0214	 ldr         r0, [pc, #0x214]
  011a0	eb000000	 bl          NKDbgPrintfW
  011a4	e59f0228	 ldr         r0, [pc, #0x228]
  011a8	eb000000	 bl          NKDbgPrintfW

; 613  :             break;

  011ac	ea00006c	 b           |$LN34@SPI_IOCont|
  011b0		 |$LN13@SPI_IOCont|

; 614  :         }
; 615  : 
; 616  :         if (CeSafeCopyMemory(&dxState, pOutBuffer, sizeof(dxState)) == 0) break;

  011b0	e3a02004	 mov         r2, #4
  011b4	e59d10d0	 ldr         r1, [sp, #0xD0]
  011b8	e28d0058	 add         r0, sp, #0x58
  011bc	eb000000	 bl          CeSafeCopyMemory
  011c0	e58d00a4	 str         r0, [sp, #0xA4]
  011c4	e59d30a4	 ldr         r3, [sp, #0xA4]
  011c8	e3530000	 cmp         r3, #0
  011cc	1a000000	 bne         |$LN11@SPI_IOCont|
  011d0	ea000063	 b           |$LN34@SPI_IOCont|
  011d4		 |$LN11@SPI_IOCont|

; 617  : 
; 618  :         DEBUGMSG(ZONE_POWER, ( TEXT( "SPI: IOCTL_POWER_SET = %d.\r\n"), dxState));

  011d4	e59f31d4	 ldr         r3, [pc, #0x1D4]
  011d8	e5933440	 ldr         r3, [r3, #0x440]
  011dc	e3130040	 tst         r3, #0x40
  011e0	0a000005	 beq         |$LN50@SPI_IOCont|
  011e4	e59d1058	 ldr         r1, [sp, #0x58]
  011e8	e59f01e0	 ldr         r0, [pc, #0x1E0]
  011ec	eb000000	 bl          NKDbgPrintfW
  011f0	e3a03001	 mov         r3, #1
  011f4	e58d30a8	 str         r3, [sp, #0xA8]
  011f8	ea000001	 b           |$LN51@SPI_IOCont|
  011fc		 |$LN50@SPI_IOCont|
  011fc	e3a03000	 mov         r3, #0
  01200	e58d30a8	 str         r3, [sp, #0xA8]
  01204		 |$LN51@SPI_IOCont|

; 619  : 
; 620  :         // Check for any valid power state.
; 621  :         if (VALID_DX(dxState))

  01204	e59d3058	 ldr         r3, [sp, #0x58]
  01208	e3730001	 cmn         r3, #1
  0120c	da000011	 ble         |$LN10@SPI_IOCont|
  01210	e59d3058	 ldr         r3, [sp, #0x58]
  01214	e3530005	 cmp         r3, #5
  01218	aa00000e	 bge         |$LN10@SPI_IOCont|

; 622  :         {
; 623  :             // Power off
; 624  :             if ( dxState == D4 )

  0121c	e59d3058	 ldr         r3, [sp, #0x58]
  01220	e3530004	 cmp         r3, #4
  01224	1a000004	 bne         |$LN9@SPI_IOCont|

; 625  :             {
; 626  :                 // Set this driver to low power mode external state
; 627  :                 pDevice->powerState = dxState;

  01228	e59d3010	 ldr         r3, [sp, #0x10]
  0122c	e2832038	 add         r2, r3, #0x38
  01230	e59d3058	 ldr         r3, [sp, #0x58]
  01234	e5823000	 str         r3, [r2]

; 628  :             }
; 629  :             // Power on.
; 630  :             else

  01238	ea000003	 b           |$LN8@SPI_IOCont|
  0123c		 |$LN9@SPI_IOCont|

; 631  :             {
; 632  :                 //Set to high power external state
; 633  :                 pDevice->powerState = dxState;

  0123c	e59d3010	 ldr         r3, [sp, #0x10]
  01240	e2832038	 add         r2, r3, #0x38
  01244	e59d3058	 ldr         r3, [sp, #0x58]
  01248	e5823000	 str         r3, [r2]
  0124c		 |$LN8@SPI_IOCont|

; 634  :             }
; 635  :             bRetVal = TRUE;

  0124c	e3a03001	 mov         r3, #1
  01250	e58d3018	 str         r3, [sp, #0x18]

; 636  :         }
; 637  :         else

  01254	ea000005	 b           |$LN7@SPI_IOCont|
  01258		 |$LN10@SPI_IOCont|

; 638  :         {
; 639  :             ERRORMSG( TRUE, ( TEXT( "SPI: IOCTL_POWER_SET "
; 640  :                 L"Invalid power state.\r\n" ) ) );

  01258	e3a02d0a	 mov         r2, #0xA, 26
  0125c	e59f1158	 ldr         r1, [pc, #0x158]
  01260	e59f0150	 ldr         r0, [pc, #0x150]
  01264	eb000000	 bl          NKDbgPrintfW
  01268	e59f015c	 ldr         r0, [pc, #0x15C]
  0126c	eb000000	 bl          NKDbgPrintfW
  01270		 |$LN7@SPI_IOCont|

; 641  :         }
; 642  :         break;

  01270	ea00003b	 b           |$LN34@SPI_IOCont|
  01274		 |$LN6@SPI_IOCont|

; 643  :     }
; 644  : 
; 645  :     // Return the current device power state.
; 646  :     case IOCTL_POWER_GET:
; 647  :     {
; 648  :         // Check arguments.
; 649  :         if (pOutBuffer == NULL || outSize < sizeof(CEDEVICE_POWER_STATE))

  01274	e59d30d0	 ldr         r3, [sp, #0xD0]
  01278	e3530000	 cmp         r3, #0
  0127c	0a000002	 beq         |$LN4@SPI_IOCont|
  01280	e59d30d4	 ldr         r3, [sp, #0xD4]
  01284	e3530004	 cmp         r3, #4
  01288	2a000006	 bcs         |$LN5@SPI_IOCont|
  0128c		 |$LN4@SPI_IOCont|

; 650  :         {
; 651  :             ERRORMSG( TRUE, ( TEXT( "SPI: IOCTL_POWER_GET "
; 652  :                 L"Invalid parameter.\r\n" ) ) );

  0128c	e3a02fa3	 mov         r2, #0xA3, 30
  01290	e59f1124	 ldr         r1, [pc, #0x124]
  01294	e59f011c	 ldr         r0, [pc, #0x11C]
  01298	eb000000	 bl          NKDbgPrintfW
  0129c	e59f0124	 ldr         r0, [pc, #0x124]
  012a0	eb000000	 bl          NKDbgPrintfW

; 653  :             break;

  012a4	ea00002e	 b           |$LN34@SPI_IOCont|
  012a8		 |$LN5@SPI_IOCont|

; 654  :         }
; 655  : 
; 656  :         //Copy current state
; 657  :         if (CeSafeCopyMemory(pOutBuffer, &pDevice->powerState, sizeof(pDevice->powerState)) == 0)

  012a8	e3a02004	 mov         r2, #4
  012ac	e59d3010	 ldr         r3, [sp, #0x10]
  012b0	e2831038	 add         r1, r3, #0x38
  012b4	e59d00d0	 ldr         r0, [sp, #0xD0]
  012b8	eb000000	 bl          CeSafeCopyMemory
  012bc	e58d00ac	 str         r0, [sp, #0xAC]
  012c0	e59d30ac	 ldr         r3, [sp, #0xAC]
  012c4	e3530000	 cmp         r3, #0
  012c8	1a000007	 bne         |$LN3@SPI_IOCont|

; 658  :         {
; 659  :             ERRORMSG( TRUE, ( TEXT( "SPI: CeSafeCopyMemory Failed\r\n" ) ) );

  012cc	e3a02c02	 mov         r2, #2, 24
  012d0	e3822093	 orr         r2, r2, #0x93
  012d4	e59f10e0	 ldr         r1, [pc, #0xE0]
  012d8	e59f00d8	 ldr         r0, [pc, #0xD8]
  012dc	eb000000	 bl          NKDbgPrintfW
  012e0	e59f00dc	 ldr         r0, [pc, #0xDC]
  012e4	eb000000	 bl          NKDbgPrintfW

; 660  :             break;

  012e8	ea00001d	 b           |$LN34@SPI_IOCont|
  012ec		 |$LN3@SPI_IOCont|

; 661  :         }
; 662  : 
; 663  :         // Update returned data size.
; 664  :         if (pOutSize)

  012ec	e59d30d8	 ldr         r3, [sp, #0xD8]
  012f0	e3530000	 cmp         r3, #0
  012f4	0a000002	 beq         |$LN2@SPI_IOCont|

; 665  :         {
; 666  :             *pOutSize = sizeof(pDevice->powerState);

  012f8	e59d20d8	 ldr         r2, [sp, #0xD8]
  012fc	e3a03004	 mov         r3, #4
  01300	e5823000	 str         r3, [r2]
  01304		 |$LN2@SPI_IOCont|

; 667  :         }
; 668  : 
; 669  :         DEBUGMSG(ZONE_POWER, (TEXT("SPI: IOCTL_POWER_GET: %d\r\n"), pDevice->powerState));

  01304	e59f30a4	 ldr         r3, [pc, #0xA4]
  01308	e5933440	 ldr         r3, [r3, #0x440]
  0130c	e3130040	 tst         r3, #0x40
  01310	0a000007	 beq         |$LN52@SPI_IOCont|
  01314	e59d3010	 ldr         r3, [sp, #0x10]
  01318	e2833038	 add         r3, r3, #0x38
  0131c	e5931000	 ldr         r1, [r3]
  01320	e59f0098	 ldr         r0, [pc, #0x98]
  01324	eb000000	 bl          NKDbgPrintfW
  01328	e3a03001	 mov         r3, #1
  0132c	e58d30b0	 str         r3, [sp, #0xB0]
  01330	ea000001	 b           |$LN53@SPI_IOCont|
  01334		 |$LN52@SPI_IOCont|
  01334	e3a03000	 mov         r3, #0
  01338	e58d30b0	 str         r3, [sp, #0xB0]
  0133c		 |$LN53@SPI_IOCont|

; 670  :         bRetVal = TRUE;

  0133c	e3a03001	 mov         r3, #1
  01340	e58d3018	 str         r3, [sp, #0x18]

; 671  :         break;

  01344	ea000006	 b           |$LN34@SPI_IOCont|
  01348		 |$LN1@SPI_IOCont|

; 672  :     }
; 673  : 
; 674  : 
; 675  :     default:
; 676  :         ERRORMSG(1, (TEXT("SPI: Unknown IOCTL_xxx(0x%0.8X) \r\n"), dwCode));

  01348	e3a02fa9	 mov         r2, #0xA9, 30
  0134c	e59f1068	 ldr         r1, [pc, #0x68]
  01350	e59f0060	 ldr         r0, [pc, #0x60]
  01354	eb000000	 bl          NKDbgPrintfW
  01358	e59d10c4	 ldr         r1, [sp, #0xC4]
  0135c	e59f0050	 ldr         r0, [pc, #0x50]
  01360	eb000000	 bl          NKDbgPrintfW
  01364		 |$LN34@SPI_IOCont|
  01364		 |$clean$43048|

; 677  :         break;
; 678  :     }
; 679  : 
; 680  : clean:
; 681  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_IOControl(rc = %d)\r\n", bRetVal));

  01364	e59f3044	 ldr         r3, [pc, #0x44]
  01368	e5933440	 ldr         r3, [r3, #0x440]
  0136c	e3130004	 tst         r3, #4
  01370	0a000005	 beq         |$LN55@SPI_IOCont|
  01374	e59d1018	 ldr         r1, [sp, #0x18]
  01378	e59f002c	 ldr         r0, [pc, #0x2C]
  0137c	eb000000	 bl          NKDbgPrintfW
  01380	e3a03001	 mov         r3, #1
  01384	e58d30b4	 str         r3, [sp, #0xB4]
  01388	ea000001	 b           |$LN56@SPI_IOCont|
  0138c		 |$LN55@SPI_IOCont|
  0138c	e3a03000	 mov         r3, #0
  01390	e58d30b4	 str         r3, [sp, #0xB4]
  01394		 |$LN56@SPI_IOCont|

; 682  :     return bRetVal;

  01394	e59d3018	 ldr         r3, [sp, #0x18]
  01398	e58d306c	 str         r3, [sp, #0x6C]

; 683  : }

  0139c	e59d006c	 ldr         r0, [sp, #0x6C]
  013a0	e28dd0b8	 add         sp, sp, #0xB8
  013a4	e89d6000	 ldmia       sp, {sp, lr}
  013a8	e12fff1e	 bx          lr
  013ac		 |$LN60@SPI_IOCont|
  013ac		 |$LN61@SPI_IOCont|
  013ac	00000000	 DCD         |??_C@_1DE@JMAHJFIP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  013b0		 |$LN62@SPI_IOCont|
  013b0	00000000	 DCD         |dpCurSettings|
  013b4		 |$LN63@SPI_IOCont|
  013b4	00000000	 DCD         |??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@|
  013b8		 |$LN64@SPI_IOCont|
  013b8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  013bc		 |$LN65@SPI_IOCont|
  013bc	00000000	 DCD         |??_C@_1HO@LHOFFFL@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  013c0		 |$LN66@SPI_IOCont|
  013c0	00000000	 DCD         |??_C@_1DG@PACMMEIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  013c4		 |$LN67@SPI_IOCont|
  013c4	00000000	 DCD         |??_C@_1DO@MLBDJCHL@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAC?$AAe?$AAS?$AAa?$AAf?$AAe?$AAC?$AAo?$AAp?$AAy?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  013c8		 |$LN68@SPI_IOCont|
  013c8	00000000	 DCD         |??_C@_1FE@ONJIKFBL@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr@|
  013cc		 |$LN69@SPI_IOCont|
  013cc	00000000	 DCD         |??_C@_1FI@ONBGFDOB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAo?$AAw@|
  013d0		 |$LN70@SPI_IOCont|
  013d0	00000000	 DCD         |??_C@_1DK@LDLGGPKF@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  013d4		 |$LN71@SPI_IOCont|
  013d4	00000000	 DCD         |??_C@_1FC@FNIABNAM@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAp?$AAa?$AAr?$AAa@|
  013d8		 |$LN72@SPI_IOCont|
  013d8	00000000	 DCD         |??_C@_1GG@LAADAFLA@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AAD?$AAe?$AAp?$AAr?$AAe?$AAc?$AAa?$AAt?$AAe?$AAd@|
  013dc		 |$LN73@SPI_IOCont|
  013dc	00000000	 DCD         |??_C@_1EO@JHAEMGFJ@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI?$AAL?$AAI?$AAT?$AAI?$AAE?$AAS?$AA?5?$AA?$DN?$AA?5@|
  013e0		 |$LN74@SPI_IOCont|
  013e0	00000000	 DCD         |??_C@_1GG@NBABJICD@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI?$AAL?$AAI?$AAT?$AAI?$AAE?$AAS?$AA?5?$AAI?$AAn@|
  013e4		 |$LN75@SPI_IOCont|
  013e4	00000000	 DCD         |SPI_Transfer|
  013e8		 |$LN76@SPI_IOCont|
  013e8	00000000	 DCD         |SPI_SetSlaveAddress|
  013ec		 |$LN77@SPI_IOCont|
  013ec	00000000	 DCD         |DEVICE_IFC_SPI_GUID|
  013f0		 |$LN78@SPI_IOCont|
  013f0	00000000	 DCD         |??_C@_1OG@BBMBGGPP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@|
  013f4		 |$LN79@SPI_IOCont|
  013f4	0032100c	 DCD         0x32100c
  013f8		 |$LN80@SPI_IOCont|
  013f8	00321008	 DCD         0x321008
  013fc		 |$LN81@SPI_IOCont|
  013fc	00321004	 DCD         0x321004
  01400		 |$LN82@SPI_IOCont|
  01400	00000000	 DCD         |??_C@_1GE@NMIDEKOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  01404		 |$LN83@SPI_IOCont|
  01404	73706949	 DCD         0x73706949
  01408		 |$LN84@SPI_IOCont|
  01408	00000000	 DCD         |??_C@_1IC@KKFHJLNO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  0140c		 |$M43430|

			 ENDP  ; |SPI_IOControl|

	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43463| DCD	|$LN5@GetCurrent|
	DCD	0x40000b02
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M43460|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00008	e3a0000c	 mov         r0, #0xC
  0000c	eb000000	 bl          __GetUserKData
  00010	e58d0004	 str         r0, [sp, #4]
  00014	e59d3004	 ldr         r3, [sp, #4]
  00018	e58d3000	 str         r3, [sp]

; 375  : }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd008	 add         sp, sp, #8
  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M43461|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|SPI_PowerUp|

  00030			 AREA	 |.pdata|, PDATA
|$T43470| DCD	|$LN5@SPI_PowerU|
	DCD	0x40000503
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\omap2420_ms_v1\spi\spi.c

  0140c			 AREA	 |.text|, CODE, ARM

  0140c		 |SPI_PowerUp| PROC

; 692  : {

  0140c		 |$LN5@SPI_PowerU|
  0140c	e1a0c00d	 mov         r12, sp
  01410	e92d0001	 stmdb       sp!, {r0}
  01414	e92d5000	 stmdb       sp!, {r12, lr}
  01418		 |$M43467|

; 693  : }

  01418	e89d6000	 ldmia       sp, {sp, lr}
  0141c	e12fff1e	 bx          lr
  01420		 |$M43468|

			 ENDP  ; |SPI_PowerUp|

	EXPORT	|SPI_PowerDown|

  00038			 AREA	 |.pdata|, PDATA
|$T43475| DCD	|$LN5@SPI_PowerD|
	DCD	0x40000503
; Function compile flags: /Odtp

  01420			 AREA	 |.text|, CODE, ARM

  01420		 |SPI_PowerDown| PROC

; 702  : {

  01420		 |$LN5@SPI_PowerD|
  01420	e1a0c00d	 mov         r12, sp
  01424	e92d0001	 stmdb       sp!, {r0}
  01428	e92d5000	 stmdb       sp!, {r12, lr}
  0142c		 |$M43472|

; 703  : }

  0142c	e89d6000	 ldmia       sp, {sp, lr}
  01430	e12fff1e	 bx          lr
  01434		 |$M43473|

			 ENDP  ; |SPI_PowerDown|

	EXPORT	|SPI_SetupMCSPI_Channel|
	EXPORT	|??_C@_1HA@NDDCJGCF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@CFHECKHE@?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00040			 AREA	 |.pdata|, PDATA
|$T43485| DCD	|$LN11@SPI_SetSla|
	DCD	0x40006304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@NDDCJGCF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e"
	DCB	0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@CFHECKHE@?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "S", 0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, "A"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01434			 AREA	 |.text|, CODE, ARM

  01434		 |SPI_SetSlaveAddress| PROC

; 708  : {

  01434		 |$LN11@SPI_SetSla|
  01434	e1a0c00d	 mov         r12, sp
  01438	e92d0003	 stmdb       sp!, {r0, r1}
  0143c	e92d5000	 stmdb       sp!, {r12, lr}
  01440	e24dd018	 sub         sp, sp, #0x18
  01444		 |$M43482|

; 709  :     BOOL rc = FALSE;

  01444	e3a03000	 mov         r3, #0
  01448	e58d3004	 str         r3, [sp, #4]

; 710  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  0144c	e59d3020	 ldr         r3, [sp, #0x20]
  01450	e58d3008	 str         r3, [sp, #8]

; 711  :     SPI_DEVICE *pDevice;
; 712  : 
; 713  :     DEBUGMSG(ZONE_FUNCTION, (L"SPI_SetSlaveAddress 0x%x\r\n", address));

  01454	e59f3158	 ldr         r3, [pc, #0x158]
  01458	e5933440	 ldr         r3, [r3, #0x440]
  0145c	e3130004	 tst         r3, #4
  01460	0a000005	 beq         |$LN5@SPI_SetSla|
  01464	e59d1024	 ldr         r1, [sp, #0x24]
  01468	e59f014c	 ldr         r0, [pc, #0x14C]
  0146c	eb000000	 bl          NKDbgPrintfW
  01470	e3a03001	 mov         r3, #1
  01474	e58d3010	 str         r3, [sp, #0x10]
  01478	ea000001	 b           |$LN6@SPI_SetSla|
  0147c		 |$LN5@SPI_SetSla|
  0147c	e3a03000	 mov         r3, #0
  01480	e58d3010	 str         r3, [sp, #0x10]
  01484		 |$LN6@SPI_SetSla|

; 714  : 
; 715  :     // Check if we get correct context
; 716  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  01484	e59d3008	 ldr         r3, [sp, #8]
  01488	e3530000	 cmp         r3, #0
  0148c	0a000004	 beq         |$LN1@SPI_SetSla|
  01490	e59d3008	 ldr         r3, [sp, #8]
  01494	e5932000	 ldr         r2, [r3]
  01498	e59f3118	 ldr         r3, [pc, #0x118]
  0149c	e1520003	 cmp         r2, r3
  014a0	0a00000b	 beq         |$LN2@SPI_SetSla|
  014a4		 |$LN1@SPI_SetSla|

; 717  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_SetSlaveAddress: "
; 718  :             L"Incorrect context paramer\r\n"
; 719  :         ));

  014a4	e59f3108	 ldr         r3, [pc, #0x108]
  014a8	e5933440	 ldr         r3, [r3, #0x440]
  014ac	e3130001	 tst         r3, #1
  014b0	0a000004	 beq         |$LN7@SPI_SetSla|
  014b4	e59f00f4	 ldr         r0, [pc, #0xF4]
  014b8	eb000000	 bl          NKDbgPrintfW
  014bc	e3a03001	 mov         r3, #1
  014c0	e58d3014	 str         r3, [sp, #0x14]
  014c4	ea000001	 b           |$LN8@SPI_SetSla|
  014c8		 |$LN7@SPI_SetSla|
  014c8	e3a03000	 mov         r3, #0
  014cc	e58d3014	 str         r3, [sp, #0x14]
  014d0		 |$LN8@SPI_SetSla|

; 720  :         goto cleanUp;

  014d0	ea000030	 b           |$cleanUp$43151|
  014d4		 |$LN2@SPI_SetSla|

; 721  :     }
; 722  : 
; 723  :     //Get Device
; 724  :     pDevice = pInstance->pDevice;

  014d4	e59d3008	 ldr         r3, [sp, #8]
  014d8	e2833004	 add         r3, r3, #4
  014dc	e5933000	 ldr         r3, [r3]
  014e0	e58d3000	 str         r3, [sp]

; 725  : 
; 726  :     //Set Address
; 727  :     pInstance->address = address;

  014e4	e59d3008	 ldr         r3, [sp, #8]
  014e8	e2832008	 add         r2, r3, #8
  014ec	e59d3024	 ldr         r3, [sp, #0x24]
  014f0	e5823000	 str         r3, [r2]

; 728  : 
; 729  :     // Get hardware
; 730  :     EnterCriticalSection(&pDevice->cs);

  014f4	e59d3000	 ldr         r3, [sp]
  014f8	e2830018	 add         r0, r3, #0x18
  014fc	eb000000	 bl          EnterCriticalSection

; 731  :     
; 732  :     // Set this driver to Active Mode
; 733  :     SPI_ClockOn(pDevice);

  01500	e59d0000	 ldr         r0, [sp]
  01504	eb000000	 bl          SPI_ClockOn

; 734  :     SetDevicePowerState(pDevice->hParentBus, pDevice->powerState = D0, NULL);

  01508	e59d3000	 ldr         r3, [sp]
  0150c	e2832038	 add         r2, r3, #0x38
  01510	e3a03000	 mov         r3, #0
  01514	e5823000	 str         r3, [r2]
  01518	e3a02000	 mov         r2, #0
  0151c	e3a01000	 mov         r1, #0
  01520	e59d3000	 ldr         r3, [sp]
  01524	e2833010	 add         r3, r3, #0x10
  01528	e5930000	 ldr         r0, [r3]
  0152c	eb000000	 bl          SetDevicePowerState

; 735  : 
; 736  :     //Set channel address
; 737  :     SPI_SetupMCSPI_Channel(pInstance->pDevice->pSPIRegs, pInstance->address);

  01530	e59d3008	 ldr         r3, [sp, #8]
  01534	e2833008	 add         r3, r3, #8
  01538	e5931000	 ldr         r1, [r3]
  0153c	e59d3008	 ldr         r3, [sp, #8]
  01540	e2833004	 add         r3, r3, #4
  01544	e5933000	 ldr         r3, [r3]
  01548	e2833014	 add         r3, r3, #0x14
  0154c	e5930000	 ldr         r0, [r3]
  01550	eb000000	 bl          SPI_SetupMCSPI_Channel

; 738  : 
; 739  :     // Set this driver to Suspend Mode
; 740  :     SPI_ClockOff(pDevice);

  01554	e59d0000	 ldr         r0, [sp]
  01558	eb000000	 bl          SPI_ClockOff

; 741  :     SetDevicePowerState(pDevice->hParentBus, pDevice->powerState = D4, NULL);

  0155c	e59d3000	 ldr         r3, [sp]
  01560	e2832038	 add         r2, r3, #0x38
  01564	e3a03004	 mov         r3, #4
  01568	e5823000	 str         r3, [r2]
  0156c	e3a02000	 mov         r2, #0
  01570	e3a01004	 mov         r1, #4
  01574	e59d3000	 ldr         r3, [sp]
  01578	e2833010	 add         r3, r3, #0x10
  0157c	e5930000	 ldr         r0, [r3]
  01580	eb000000	 bl          SetDevicePowerState

; 742  :     
; 743  :     // Release hardware
; 744  :     LeaveCriticalSection(&pDevice->cs);    

  01584	e59d3000	 ldr         r3, [sp]
  01588	e2830018	 add         r0, r3, #0x18
  0158c	eb000000	 bl          LeaveCriticalSection

; 745  :     
; 746  :     rc = TRUE;

  01590	e3a03001	 mov         r3, #1
  01594	e58d3004	 str         r3, [sp, #4]
  01598		 |$cleanUp$43151|

; 747  : 
; 748  : cleanUp:
; 749  :     return rc;

  01598	e59d3004	 ldr         r3, [sp, #4]
  0159c	e58d300c	 str         r3, [sp, #0xC]

; 750  : }

  015a0	e59d000c	 ldr         r0, [sp, #0xC]
  015a4	e28dd018	 add         sp, sp, #0x18
  015a8	e89d6000	 ldmia       sp, {sp, lr}
  015ac	e12fff1e	 bx          lr
  015b0		 |$LN12@SPI_SetSla|
  015b0		 |$LN13@SPI_SetSla|
  015b0	00000000	 DCD         |??_C@_1HA@NDDCJGCF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo@|
  015b4		 |$LN14@SPI_SetSla|
  015b4	00000000	 DCD         |dpCurSettings|
  015b8		 |$LN15@SPI_SetSla|
  015b8	73706949	 DCD         0x73706949
  015bc		 |$LN16@SPI_SetSla|
  015bc	00000000	 DCD         |??_C@_1DG@CFHECKHE@?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAA?$AAd?$AAd?$AAr?$AAe?$AAs?$AAs?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  015c0		 |$M43483|

			 ENDP  ; |SPI_SetSlaveAddress|


  00048			 AREA	 |.pdata|, PDATA
|$T43496| DCD	|$LN7@SPI_SetupM|
	DCD	0x40001804
; Function compile flags: /Odtp

  015c0			 AREA	 |.text|, CODE, ARM

  015c0		 |SPI_SetupMCSPI_Channel| PROC

; 756  : {

  015c0		 |$LN7@SPI_SetupM|
  015c0	e1a0c00d	 mov         r12, sp
  015c4	e92d0003	 stmdb       sp!, {r0, r1}
  015c8	e92d5000	 stmdb       sp!, {r12, lr}
  015cc	e24dd008	 sub         sp, sp, #8
  015d0		 |$M43493|

; 757  :     BOOL rc = FALSE;

  015d0	e3a03000	 mov         r3, #0
  015d4	e58d3000	 str         r3, [sp]

; 758  :     //DEBUGMSG(ZONE_FUNCTION, (L"SPI_SetupMCSPI_Channel 0x%x\r\n", address));
; 759  :     // Config the channel:
; 760  :     if (address == 0)

  015d8	e59d3014	 ldr         r3, [sp, #0x14]
  015dc	e3530000	 cmp         r3, #0
  015e0	1a000005	 bne         |$LN2@SPI_SetupM|

; 761  :     {
; 762  :         //BIT0 = 0 Data are latched on odd numbered edges 
; 763  :         //BIT1 = 1 Active Low Clock 
; 764  :         //BIT5-2 = 6 Clock Divider =64 divide from 48MHz
; 765  :         //BIT6 = 1 EPOL Active Low CS
; 766  :         //BIT11-7 = F, SPI Word = 16 bit
; 767  :         //BIT11-7 = 1F, SPI Word = 16 bit
; 768  :         //BIT13-12 = 0, Transmit AND Receive mode
; 769  :         //BIT14 = 0, DMA Write req disabled
; 770  :         //BIT15 = 0, DMA Read req disabled
; 771  :         //BIT16 = 1, transmission on SOMI disabled
; 772  :         //BIT17 = 0, transmission on SIMO enabled
; 773  :         //BIT18 = 0, reception on SOMI enabled
; 774  :         //BIT19 = 0, TURBO deactivated
; 775  :         //BIT20 = 0, FORCE HIGH between words
; 776  :         //BIT21-31 = 0 reserved
; 777  :         OUTREG32(&pSPIRegs->ulMCSPI_CHCONF0, 0x00010FDA);

  015e4	e59d3010	 ldr         r3, [sp, #0x10]
  015e8	e283202c	 add         r2, r3, #0x2C
  015ec	e3a03a11	 mov         r3, #0x11, 20
  015f0	e2433026	 sub         r3, r3, #0x26
  015f4	e5823000	 str         r3, [r2]

; 778  :     }
; 779  :     else

  015f8	ea000000	 b           |$LN1@SPI_SetupM|
  015fc		 |$LN2@SPI_SetupM|

; 780  :     {
; 781  :         goto cleanUp;

  015fc	ea000001	 b           |$cleanUp$43165|
  01600		 |$LN1@SPI_SetupM|

; 782  :     }
; 783  :     rc = TRUE;

  01600	e3a03001	 mov         r3, #1
  01604	e58d3000	 str         r3, [sp]
  01608		 |$cleanUp$43165|

; 784  : 
; 785  : cleanUp:
; 786  :     return rc;

  01608	e59d3000	 ldr         r3, [sp]
  0160c	e58d3004	 str         r3, [sp, #4]

; 787  : }

  01610	e59d0004	 ldr         r0, [sp, #4]
  01614	e28dd008	 add         sp, sp, #8
  01618	e89d6000	 ldmia       sp, {sp, lr}
  0161c	e12fff1e	 bx          lr
  01620		 |$M43494|

			 ENDP  ; |SPI_SetupMCSPI_Channel|

	EXPORT	|??_C@_1CI@JJDBGKDB@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@PELHJJGL@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00050			 AREA	 |.pdata|, PDATA
|$T43513| DCD	|$LN11@SPI_ClockO|
	DCD	0x40005604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@JJDBGKDB@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "2", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "O", 0x0, "n", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PELHJJGL@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "1", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "O", 0x0, "n", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01620			 AREA	 |.text|, CODE, ARM

  01620		 |SPI_ClockOn| PROC

; 793  : {

  01620		 |$LN11@SPI_ClockO|
  01620	e1a0c00d	 mov         r12, sp
  01624	e92d0001	 stmdb       sp!, {r0}
  01628	e92d5000	 stmdb       sp!, {r12, lr}
  0162c	e24dd038	 sub         sp, sp, #0x38
  01630		 |$M43510|

; 794  :     DWORD regBit,cbRet;
; 795  : 
; 796  :     //Check if it's SPI1 or SPI2
; 797  :     if(OMAP2420_MCSPI1_REGS_PA == pDevice->memBase)

  01630	e59d3040	 ldr         r3, [sp, #0x40]
  01634	e2833004	 add         r3, r3, #4
  01638	e5932000	 ldr         r2, [r3]
  0163c	e3a03312	 mov         r3, #0x12, 6
  01640	e3833926	 orr         r3, r3, #0x26, 18
  01644	e1520003	 cmp         r2, r3
  01648	1a000021	 bne         |$LN2@SPI_ClockO|

; 798  :     {
; 799  :         DEBUGMSG(ZONE_POWER, (TEXT("SPI1: SPI_ClockOn\r\n") ));

  0164c	e59f311c	 ldr         r3, [pc, #0x11C]
  01650	e5933440	 ldr         r3, [r3, #0x440]
  01654	e3130040	 tst         r3, #0x40
  01658	0a000004	 beq         |$LN5@SPI_ClockO|
  0165c	e59f0110	 ldr         r0, [pc, #0x110]
  01660	eb000000	 bl          NKDbgPrintfW
  01664	e3a03001	 mov         r3, #1
  01668	e58d3030	 str         r3, [sp, #0x30]
  0166c	ea000001	 b           |$LN6@SPI_ClockO|
  01670		 |$LN5@SPI_ClockO|
  01670	e3a03000	 mov         r3, #0
  01674	e58d3030	 str         r3, [sp, #0x30]
  01678		 |$LN6@SPI_ClockO|

; 800  :         regBit = PRCM_FCLKEN1_CORE_EN_MCSPI1;

  01678	e3a03802	 mov         r3, #2, 16
  0167c	e58d300c	 str         r3, [sp, #0xC]

; 801  :         KernelIoControl(IOCTL_FCLK1_ENB, (VOID *)&regBit, sizeof(DWORD), NULL, 0, &cbRet);

  01680	e28d3008	 add         r3, sp, #8
  01684	e58d3004	 str         r3, [sp, #4]
  01688	e3a03000	 mov         r3, #0
  0168c	e58d3000	 str         r3, [sp]
  01690	e3a03000	 mov         r3, #0
  01694	e3a02004	 mov         r2, #4
  01698	e28d100c	 add         r1, sp, #0xC
  0169c	e59f00c4	 ldr         r0, [pc, #0xC4]
  016a0	eb000000	 bl          KernelIoControl

; 802  :         regBit = PRCM_ICLKEN1_CORE_EN_MCSPI1;

  016a4	e3a03802	 mov         r3, #2, 16
  016a8	e58d300c	 str         r3, [sp, #0xC]

; 803  :         KernelIoControl(IOCTL_ICLK1_ENB, (VOID *)&regBit, sizeof(DWORD), NULL, 0, &cbRet);

  016ac	e28d3008	 add         r3, sp, #8
  016b0	e58d3004	 str         r3, [sp, #4]
  016b4	e3a03000	 mov         r3, #0
  016b8	e58d3000	 str         r3, [sp]
  016bc	e3a03000	 mov         r3, #0
  016c0	e3a02004	 mov         r2, #4
  016c4	e28d100c	 add         r1, sp, #0xC
  016c8	e59f0094	 ldr         r0, [pc, #0x94]
  016cc	eb000000	 bl          KernelIoControl

; 804  :     }
; 805  :     else

  016d0	ea000020	 b           |$LN1@SPI_ClockO|
  016d4		 |$LN2@SPI_ClockO|

; 806  :     {
; 807  :         //Assume SPI2
; 808  :         DEBUGMSG(ZONE_POWER, (TEXT("SPI2: SPI_ClockOn\r\n") ));

  016d4	e59f3094	 ldr         r3, [pc, #0x94]
  016d8	e5933440	 ldr         r3, [r3, #0x440]
  016dc	e3130040	 tst         r3, #0x40
  016e0	0a000004	 beq         |$LN7@SPI_ClockO|
  016e4	e59f0080	 ldr         r0, [pc, #0x80]
  016e8	eb000000	 bl          NKDbgPrintfW
  016ec	e3a03001	 mov         r3, #1
  016f0	e58d3034	 str         r3, [sp, #0x34]
  016f4	ea000001	 b           |$LN8@SPI_ClockO|
  016f8		 |$LN7@SPI_ClockO|
  016f8	e3a03000	 mov         r3, #0
  016fc	e58d3034	 str         r3, [sp, #0x34]
  01700		 |$LN8@SPI_ClockO|

; 809  :         regBit = PRCM_FCLKEN1_CORE_EN_MCSPI2;

  01700	e3a03701	 mov         r3, #1, 14
  01704	e58d300c	 str         r3, [sp, #0xC]

; 810  :         KernelIoControl(IOCTL_FCLK1_ENB, (VOID *)&regBit, sizeof(DWORD), NULL, 0, &cbRet);

  01708	e28d3008	 add         r3, sp, #8
  0170c	e58d3004	 str         r3, [sp, #4]
  01710	e3a03000	 mov         r3, #0
  01714	e58d3000	 str         r3, [sp]
  01718	e3a03000	 mov         r3, #0
  0171c	e3a02004	 mov         r2, #4
  01720	e28d100c	 add         r1, sp, #0xC
  01724	e59f003c	 ldr         r0, [pc, #0x3C]
  01728	eb000000	 bl          KernelIoControl

; 811  :         regBit = PRCM_ICLKEN1_CORE_EN_MCSPI2;

  0172c	e3a03701	 mov         r3, #1, 14
  01730	e58d300c	 str         r3, [sp, #0xC]

; 812  :         KernelIoControl(IOCTL_ICLK1_ENB, (VOID *)&regBit, sizeof(DWORD), NULL, 0, &cbRet);

  01734	e28d3008	 add         r3, sp, #8
  01738	e58d3004	 str         r3, [sp, #4]
  0173c	e3a03000	 mov         r3, #0
  01740	e58d3000	 str         r3, [sp]
  01744	e3a03000	 mov         r3, #0
  01748	e3a02004	 mov         r2, #4
  0174c	e28d100c	 add         r1, sp, #0xC
  01750	e59f000c	 ldr         r0, [pc, #0xC]
  01754	eb000000	 bl          KernelIoControl
  01758		 |$LN1@SPI_ClockO|

; 813  :     }
; 814  : }

  01758	e28dd038	 add         sp, sp, #0x38
  0175c	e89d6000	 ldmia       sp, {sp, lr}
  01760	e12fff1e	 bx          lr
  01764		 |$LN12@SPI_ClockO|
  01764		 |$LN13@SPI_ClockO|
  01764	0022040c	 DCD         0x22040c
  01768		 |$LN14@SPI_ClockO|
  01768	0022041c	 DCD         0x22041c
  0176c		 |$LN15@SPI_ClockO|
  0176c	00000000	 DCD         |??_C@_1CI@JJDBGKDB@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  01770		 |$LN16@SPI_ClockO|
  01770	00000000	 DCD         |dpCurSettings|
  01774		 |$LN17@SPI_ClockO|
  01774	00000000	 DCD         |??_C@_1CI@PELHJJGL@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  01778		 |$M43511|

			 ENDP  ; |SPI_ClockOn|

	EXPORT	|??_C@_1CK@IHNEDKAA@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@ODDEEBPO@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00058			 AREA	 |.pdata|, PDATA
|$T43536| DCD	|$LN11@SPI_ClockO@2|
	DCD	0x40005804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@IHNEDKAA@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "2", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@ODDEEBPO@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "1", 0x0, ":", 0x0, " ", 0x0, "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "O", 0x0, "f", 0x0, "f", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01778			 AREA	 |.text|, CODE, ARM

  01778		 |SPI_ClockOff| PROC

; 818  : {

  01778		 |$LN11@SPI_ClockO@2|
  01778	e1a0c00d	 mov         r12, sp
  0177c	e92d0001	 stmdb       sp!, {r0}
  01780	e92d5000	 stmdb       sp!, {r12, lr}
  01784	e24dd038	 sub         sp, sp, #0x38
  01788		 |$M43533|

; 819  :     DWORD regBit,cbRet;
; 820  : 
; 821  :     //Check if it's SPI1 or SPI2
; 822  :     if(OMAP2420_MCSPI1_REGS_PA== pDevice->memBase)

  01788	e59d3040	 ldr         r3, [sp, #0x40]
  0178c	e2833004	 add         r3, r3, #4
  01790	e5932000	 ldr         r2, [r3]
  01794	e3a03312	 mov         r3, #0x12, 6
  01798	e3833926	 orr         r3, r3, #0x26, 18
  0179c	e1520003	 cmp         r2, r3
  017a0	1a000023	 bne         |$LN2@SPI_ClockO@2|

; 823  :     {
; 824  :         DEBUGMSG(ZONE_POWER, (TEXT("SPI1: SPI_ClockOff\r\n") ));

  017a4	e59f3124	 ldr         r3, [pc, #0x124]
  017a8	e5933440	 ldr         r3, [r3, #0x440]
  017ac	e3130040	 tst         r3, #0x40
  017b0	0a000004	 beq         |$LN5@SPI_ClockO@2|
  017b4	e59f0118	 ldr         r0, [pc, #0x118]
  017b8	eb000000	 bl          NKDbgPrintfW
  017bc	e3a03001	 mov         r3, #1
  017c0	e58d3030	 str         r3, [sp, #0x30]
  017c4	ea000001	 b           |$LN6@SPI_ClockO@2|
  017c8		 |$LN5@SPI_ClockO@2|
  017c8	e3a03000	 mov         r3, #0
  017cc	e58d3030	 str         r3, [sp, #0x30]
  017d0		 |$LN6@SPI_ClockO@2|

; 825  :         regBit = PRCM_FCLKEN1_CORE_EN_MCSPI1;

  017d0	e3a03802	 mov         r3, #2, 16
  017d4	e58d300c	 str         r3, [sp, #0xC]

; 826  :         KernelIoControl(IOCTL_FCLK1_DIS, (VOID *)&regBit, sizeof(DWORD), NULL, 0, &cbRet);

  017d8	e28d3008	 add         r3, sp, #8
  017dc	e58d3004	 str         r3, [sp, #4]
  017e0	e3a03000	 mov         r3, #0
  017e4	e58d3000	 str         r3, [sp]
  017e8	e3a03000	 mov         r3, #0
  017ec	e3a02004	 mov         r2, #4
  017f0	e28d100c	 add         r1, sp, #0xC
  017f4	e3a00822	 mov         r0, #0x22, 16
  017f8	e3800e42	 orr         r0, r0, #0x42, 28
  017fc	eb000000	 bl          KernelIoControl

; 827  :         regBit = PRCM_ICLKEN1_CORE_EN_MCSPI1;

  01800	e3a03802	 mov         r3, #2, 16
  01804	e58d300c	 str         r3, [sp, #0xC]

; 828  :         KernelIoControl(IOCTL_ICLK1_DIS, (VOID *)&regBit, sizeof(DWORD), NULL, 0, &cbRet);

  01808	e28d3008	 add         r3, sp, #8
  0180c	e58d3004	 str         r3, [sp, #4]
  01810	e3a03000	 mov         r3, #0
  01814	e58d3000	 str         r3, [sp]
  01818	e3a03000	 mov         r3, #0
  0181c	e3a02004	 mov         r2, #4
  01820	e28d100c	 add         r1, sp, #0xC
  01824	e3a00822	 mov         r0, #0x22, 16
  01828	e3800e41	 orr         r0, r0, #0x41, 28
  0182c	eb000000	 bl          KernelIoControl

; 829  :     }
; 830  :     else

  01830	ea000022	 b           |$LN1@SPI_ClockO@2|
  01834		 |$LN2@SPI_ClockO@2|

; 831  :     {
; 832  :         //Assume SPI2
; 833  :         DEBUGMSG(ZONE_POWER, (TEXT("SPI2: SPI_ClockOff\r\n") ));

  01834	e59f3094	 ldr         r3, [pc, #0x94]
  01838	e5933440	 ldr         r3, [r3, #0x440]
  0183c	e3130040	 tst         r3, #0x40
  01840	0a000004	 beq         |$LN7@SPI_ClockO@2|
  01844	e59f0080	 ldr         r0, [pc, #0x80]
  01848	eb000000	 bl          NKDbgPrintfW
  0184c	e3a03001	 mov         r3, #1
  01850	e58d3034	 str         r3, [sp, #0x34]
  01854	ea000001	 b           |$LN8@SPI_ClockO@2|
  01858		 |$LN7@SPI_ClockO@2|
  01858	e3a03000	 mov         r3, #0
  0185c	e58d3034	 str         r3, [sp, #0x34]
  01860		 |$LN8@SPI_ClockO@2|

; 834  :         regBit = PRCM_FCLKEN1_CORE_EN_MCSPI2;

  01860	e3a03701	 mov         r3, #1, 14
  01864	e58d300c	 str         r3, [sp, #0xC]

; 835  :         KernelIoControl(IOCTL_FCLK1_DIS, (VOID *)&regBit, sizeof(DWORD), NULL, 0, &cbRet);

  01868	e28d3008	 add         r3, sp, #8
  0186c	e58d3004	 str         r3, [sp, #4]
  01870	e3a03000	 mov         r3, #0
  01874	e58d3000	 str         r3, [sp]
  01878	e3a03000	 mov         r3, #0
  0187c	e3a02004	 mov         r2, #4
  01880	e28d100c	 add         r1, sp, #0xC
  01884	e3a00822	 mov         r0, #0x22, 16
  01888	e3800e42	 orr         r0, r0, #0x42, 28
  0188c	eb000000	 bl          KernelIoControl

; 836  :         regBit = PRCM_ICLKEN1_CORE_EN_MCSPI2;

  01890	e3a03701	 mov         r3, #1, 14
  01894	e58d300c	 str         r3, [sp, #0xC]

; 837  :         KernelIoControl(IOCTL_ICLK1_DIS, (VOID *)&regBit, sizeof(DWORD), NULL, 0, &cbRet);

  01898	e28d3008	 add         r3, sp, #8
  0189c	e58d3004	 str         r3, [sp, #4]
  018a0	e3a03000	 mov         r3, #0
  018a4	e58d3000	 str         r3, [sp]
  018a8	e3a03000	 mov         r3, #0
  018ac	e3a02004	 mov         r2, #4
  018b0	e28d100c	 add         r1, sp, #0xC
  018b4	e3a00822	 mov         r0, #0x22, 16
  018b8	e3800e41	 orr         r0, r0, #0x41, 28
  018bc	eb000000	 bl          KernelIoControl
  018c0		 |$LN1@SPI_ClockO@2|

; 838  :     }
; 839  : }

  018c0	e28dd038	 add         sp, sp, #0x38
  018c4	e89d6000	 ldmia       sp, {sp, lr}
  018c8	e12fff1e	 bx          lr
  018cc		 |$LN12@SPI_ClockO@2|
  018cc		 |$LN13@SPI_ClockO@2|
  018cc	00000000	 DCD         |??_C@_1CK@IHNEDKAA@?$AAS?$AAP?$AAI?$AA2?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  018d0		 |$LN14@SPI_ClockO@2|
  018d0	00000000	 DCD         |dpCurSettings|
  018d4		 |$LN15@SPI_ClockO@2|
  018d4	00000000	 DCD         |??_C@_1CK@ODDEEBPO@?$AAS?$AAP?$AAI?$AA1?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?$AN?$AA?6?$AA?$AA@|
  018d8		 |$M43534|

			 ENDP  ; |SPI_ClockOff|

	END
