; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\DISPLAY\PXA27X_LCD\dispdrvr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|gDrawCursorFlag| [ DATA ]
	EXPORT	|gInPowerHandler| [ DATA ]
	EXPORT	|bDoRotation| [ DATA ]
	EXPORT	|activeFrameBuffer| [ DATA ]
	EXPORT	|frameBufferSize| [ DATA ]
	EXPORT	|gDibBuffer| [ DATA ]
	EXPORT	|gFrameBuffer| [ DATA ]
	EXPORT	|gBlackFrameBuffer| [ DATA ]
	EXPORT	|g_fDisableRotation| [ DATA ]
	EXPORT	|g_fEnableDMASourceSwap| [ DATA ]
	EXPORT	|v_pLcdRegs| [ DATA ]
	EXPORT	|v_pClkRegs| [ DATA ]
	EXPORT	|v_pGPIORegs| [ DATA ]
	EXPORT	|frameDescriptorCh0fd1| [ DATA ]
	EXPORT	|frameDescriptorCh0fd2| [ DATA ]
	EXPORT	|frameDescriptorCh1| [ DATA ]
	EXPORT	|frameDescriptorPalette| [ DATA ]
	EXPORT	|frameDescriptorTemp| [ DATA ]
	EXPORT	|frameDescriptorCh2_YCbCr_Y| [ DATA ]
	EXPORT	|frameDescriptorCh3_YCbCr_Cb| [ DATA ]
	EXPORT	|frameDescriptorCh4_YCbCr_Cr| [ DATA ]
	EXPORT	|v_pPaletteBuffer| [ DATA ]
	EXPORT	|pOSCR| [ DATA ]
	EXPORT	|v_pOSTRegs| [ DATA ]
	EXPORT	|v_pCIRegs| [ DATA ]
	EXPORT	|v_pI2C| [ DATA ]
	EXPORT	|v_pDMAC| [ DATA ]
	EXPORT	|halted| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|fbpY|, 0x4

	 COMMON	|bpp|, 0x4

	 COMMON	|DispDrvr_cdwStride|, 0x4

	 COMMON	|DispDrvr_cyScreen|, 0x4

	 COMMON	|gyHot|, 0x4

	 COMMON	|gCursorData|, 0x800

	 COMMON	|fbpCb|, 0x4

	 COMMON	|fbpCr|, 0x4

	 COMMON	|g_DisplayBasePhysical|, 0x4

	 COMMON	|status|, 0x4

	 COMMON	|XllpLCD|, 0x88

	 COMMON	|hIntEventKnown|, 0x4

	 COMMON	|g_DisplayBlackBaseVirtual|, 0x4

	 COMMON	|g_DisplayBaseVirtual|, 0x4

	 COMMON	|DispDrvr_cxScreen|, 0x4

	 COMMON	|nDisplayType|, 0x4

	 COMMON	|gCursorMask|, 0x800

	 COMMON	|gxHot|, 0x4

	 COMMON	|frameDescriptorMutex|, 0x14

	 COMMON	|hIntEvent|, 0x4

	 COMMON	|displayMutex|, 0x14

	 COMMON	|gCursorRect|, 0x10

	 COMMON	|g_DisplayBlackBasePhysical|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|gDrawCursorFlag| % 0x4
|gInPowerHandler| % 0x4
|bDoRotation| %	0x4
|activeFrameBuffer| % 0x4
|frameBufferSize| % 0x4
|gDibBuffer| %	0x4
|gFrameBuffer| % 0x4
|gBlackFrameBuffer| % 0x4
|g_fDisableRotation| % 0x4
|g_fEnableDMASourceSwap| % 0x4
|v_pLcdRegs| %	0x4
|v_pClkRegs| %	0x4
|v_pGPIORegs| %	0x4
|frameDescriptorCh0fd1| % 0x4
|frameDescriptorCh0fd2| % 0x4
|frameDescriptorCh1| % 0x4
|frameDescriptorPalette| % 0x4
|frameDescriptorTemp| % 0x4
|frameDescriptorCh2_YCbCr_Y| % 0x4
|frameDescriptorCh3_YCbCr_Cb| % 0x4
|frameDescriptorCh4_YCbCr_Cr| % 0x4
|v_pPaletteBuffer| % 0x4
|pOSCR|	%	0x4
|v_pOSTRegs| %	0x4
|v_pCIRegs| %	0x4
|v_pI2C| %	0x4
|v_pDMAC| %	0x4
|halted| %	0x4
	EXPORT	|DispDrvrSetDibBuffer|
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\dispdrvr.c

  00000			 AREA	 |.pdata|, PDATA
|$T43019| DCD	|$LN5@DispDrvrSe|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrSetDibBuffer| PROC

; 161  : {

  00000		 |$LN5@DispDrvrSe|
  00000		 |$M43016|

; 162  :     gDibBuffer = data;

  00000	e59f3004	 ldr         r3, [pc, #4]
  00004	e5830000	 str         r0, [r3]

; 163  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$LN6@DispDrvrSe|
  0000c		 |$LN7@DispDrvrSe|
  0000c	00000000	 DCD         |gDibBuffer|
  00010		 |$M43017|

			 ENDP  ; |DispDrvrSetDibBuffer|

	EXPORT	|DispDrvrSetPalette|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|XllpLCDLoadPalette|
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T43035| DCD	|$LN12@DispDrvrSe@2|
	DCD	0x40002901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrSetPalette| PROC

; 166  : {

  00000		 |$LN12@DispDrvrSe@2|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M43032|
  00004	e1a04001	 mov         r4, r1
  00008	e1a06000	 mov         r6, r0

; 167  :     int i;
; 168  :     int end = firstEntry + numEntries;

  0000c	e0825004	 add         r5, r2, r4

; 169  : 
; 170  :     // Don't walk off the end of the palette buffer.
; 171  :     if (firstEntry > sizeof(source) || end >= sizeof(source))

  00010	e3540004	 cmp         r4, #4
  00014	8a00001d	 bhi         |$LN4@DispDrvrSe@2|
  00018	e3550004	 cmp         r5, #4
  0001c	2a00001b	 bcs         |$LN4@DispDrvrSe@2|

; 172  :     {
; 173  :         return;
; 174  :     }
; 175  : 
; 176  :     EnterCriticalSection(&frameDescriptorMutex);

  00020	e59f0070	 ldr         r0, [pc, #0x70]
  00024	eb000000	 bl          EnterCriticalSection

; 177  : 
; 178  :     // Store the palette entries into palette ram
; 179  :     for(i=firstEntry;i<end;i++)

  00028	e1a07004	 mov         r7, r4
  0002c	e1540005	 cmp         r4, r5
  00030	aa000012	 bge         |$LN1@DispDrvrSe@2|
  00034	e3a03cff	 mov         r3, #0xFF, 24
  00038	e59f8060	 ldr         r8, [pc, #0x60]
  0003c	e0860104	 add         r0, r6, r4, lsl #2
  00040	e38360f8	 orr         r6, r3, #0xF8
  00044		 |$LL3@DispDrvrSe@2|

; 180  :     {
; 181  :         // store 5 bits red, 6 bits green, and 5 bits blue
; 182  :         v_pPaletteBuffer->palette[i] = (
; 183  :             (source[i].peBlue)            >>  3    |
; 184  :             ((source[i].peGreen & 0xfc)    <<  3)    |
; 185  :             ((source[i].peRed    & 0xf8)    <<  8)
; 186  :             );

  00044	e5d03000	 ldrb        r3, [r0]
  00048	e5d02001	 ldrb        r2, [r0, #1]
  0004c	e5d04002	 ldrb        r4, [r0, #2]
  00050	e0031006	 and         r1, r3, r6
  00054	e20230fc	 and         r3, r2, #0xFC
  00058	e598e000	 ldr         lr, [r8]
  0005c	e1832281	 orr         r2, r3, r1, lsl #5
  00060	e1a031a4	 mov         r3, r4, lsr #3
  00064	e1832182	 orr         r2, r3, r2, lsl #3
  00068	e08e3087	 add         r3, lr, r7, lsl #1
  0006c	e2877001	 add         r7, r7, #1
  00070	e1570005	 cmp         r7, r5
  00074	e1c320b0	 strh        r2, [r3]
  00078	e2800004	 add         r0, r0, #4
  0007c	bafffff0	 blt         |$LL3@DispDrvrSe@2|
  00080		 |$LN1@DispDrvrSe@2|

; 187  :     }
; 188  : 
; 189  :     XllpLCDLoadPalette(&XllpLCD);

  00080	e59f0014	 ldr         r0, [pc, #0x14]
  00084	eb000000	 bl          XllpLCDLoadPalette

; 190  : 
; 191  :     LeaveCriticalSection(&frameDescriptorMutex);

  00088	e59f0008	 ldr         r0, [pc, #8]
  0008c	eb000000	 bl          LeaveCriticalSection
  00090		 |$LN4@DispDrvrSe@2|

; 192  : }

  00090	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN13@DispDrvrSe@2|
  00098		 |$LN14@DispDrvrSe@2|
  00098	00000000	 DCD         |frameDescriptorMutex|
  0009c		 |$LN15@DispDrvrSe@2|
  0009c	00000000	 DCD         |XllpLCD|
  000a0		 |$LN16@DispDrvrSe@2|
  000a0	00000000	 DCD         |v_pPaletteBuffer|
  000a4		 |$M43033|

			 ENDP  ; |DispDrvrSetPalette|

	EXPORT	|InitCursor|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T43047| DCD	|$LN5@InitCursor|
	DCD	0x40002601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitCursor| PROC

; 266  : {

  00000		 |$LN5@InitCursor|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M43044|

; 267  :     gDrawCursorFlag = FALSE;
; 268  :     gCursorRect.left = (DispDrvr_cxScreen - CURSOR_XSIZE) >> 1;

  00004	e59f3088	 ldr         r3, [pc, #0x88]

; 269  :     gCursorRect.right = gCursorRect.left + CURSOR_XSIZE;
; 270  :     gCursorRect.top = (DispDrvr_cyScreen - CURSOR_YSIZE) >> 1;

  00008	e59f2080	 ldr         r2, [pc, #0x80]
  0000c	e59f6078	 ldr         r6, [pc, #0x78]
  00010	e5933000	 ldr         r3, [r3]
  00014	e5922000	 ldr         r2, [r2]
  00018	e59f5068	 ldr         r5, [pc, #0x68]
  0001c	e2433020	 sub         r3, r3, #0x20
  00020	e1a010c3	 mov         r1, r3, asr #1
  00024	e2423020	 sub         r3, r2, #0x20
  00028	e2812020	 add         r2, r1, #0x20

; 271  :     gCursorRect.bottom = gCursorRect.top + CURSOR_YSIZE;
; 272  :     gxHot = gyHot = 0;

  0002c	e59fe050	 ldr         lr, [pc, #0x50]
  00030	e59f4048	 ldr         r4, [pc, #0x48]
  00034	e1a030c3	 mov         r3, r3, asr #1

; 273  :     memset ((BYTE *)gCursorMask, 0xFF, sizeof(gCursorMask));

  00038	e59f003c	 ldr         r0, [pc, #0x3C]
  0003c	e5861000	 str         r1, [r6]
  00040	e5862008	 str         r2, [r6, #8]
  00044	e5863004	 str         r3, [r6, #4]
  00048	e2833020	 add         r3, r3, #0x20
  0004c	e3a09000	 mov         r9, #0
  00050	e3a07000	 mov         r7, #0
  00054	e3a08000	 mov         r8, #0
  00058	e3a02b02	 mov         r2, #2, 22
  0005c	e3a010ff	 mov         r1, #0xFF
  00060	e586300c	 str         r3, [r6, #0xC]
  00064	e5859000	 str         r9, [r5]
  00068	e58e7000	 str         r7, [lr]
  0006c	e5848000	 str         r8, [r4]
  00070	eb000000	 bl          memset

; 274  : }

  00074	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN6@InitCursor|
  0007c		 |$LN7@InitCursor|
  0007c	00000000	 DCD         |gCursorMask|
  00080		 |$LN8@InitCursor|
  00080	00000000	 DCD         |gxHot|
  00084		 |$LN9@InitCursor|
  00084	00000000	 DCD         |gyHot|
  00088		 |$LN10@InitCursor|
  00088	00000000	 DCD         |gDrawCursorFlag|
  0008c		 |$LN11@InitCursor|
  0008c	00000000	 DCD         |gCursorRect|
  00090		 |$LN12@InitCursor|
  00090	00000000	 DCD         |DispDrvr_cyScreen|
  00094		 |$LN13@InitCursor|
  00094	00000000	 DCD         |DispDrvr_cxScreen|
  00098		 |$M43045|

			 ENDP  ; |InitCursor|

	EXPORT	|Cleanup|
	IMPORT	|HalFreeCommonBuffer|
	IMPORT	|VirtualFree|

  00000			 AREA	 |.pdata|, PDATA
|$T43066| DCD	|$LN14@Cleanup|
	DCD	0x40007102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Cleanup| PROC

; 482  : {

  00000		 |$LN14@Cleanup|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M43063|

; 483  :     DMA_ADAPTER_OBJECT Adapter;
; 484  :     PHYSICAL_ADDRESS   PhysAddr;
; 485  : 
; 486  :     DMA_ADAPTER_OBJECT AdapterBlackScreen;
; 487  :     PHYSICAL_ADDRESS   PhysAddrBlackScreen;
; 488  : 
; 489  :     if (v_pLcdRegs)

  00008	e59f41b0	 ldr         r4, [pc, #0x1B0]
  0000c	e5940010	 ldr         r0, [r4, #0x10]
  00010	e3500000	 cmp         r0, #0
  00014	0a000004	 beq         |$LN9@Cleanup|

; 490  :     {
; 491  :         VirtualFree((PVOID)v_pLcdRegs,0,MEM_RELEASE);

  00018	e3a02902	 mov         r2, #2, 18
  0001c	e3a01000	 mov         r1, #0
  00020	eb000000	 bl          VirtualFree

; 492  :         v_pLcdRegs = NULL;

  00024	e3a03000	 mov         r3, #0
  00028	e5843010	 str         r3, [r4, #0x10]
  0002c		 |$LN9@Cleanup|

; 493  :     }
; 494  : 
; 495  :     if (v_pClkRegs)

  0002c	e5940014	 ldr         r0, [r4, #0x14]
  00030	e3500000	 cmp         r0, #0
  00034	0a000004	 beq         |$LN8@Cleanup|

; 496  :     {
; 497  :         VirtualFree((PVOID)v_pClkRegs,0,MEM_RELEASE);

  00038	e3a02902	 mov         r2, #2, 18
  0003c	e3a01000	 mov         r1, #0
  00040	eb000000	 bl          VirtualFree

; 498  :         v_pLcdRegs = NULL;

  00044	e3a03000	 mov         r3, #0
  00048	e5843010	 str         r3, [r4, #0x10]
  0004c		 |$LN8@Cleanup|

; 499  :     }
; 500  : 
; 501  :     if (v_pGPIORegs)

  0004c	e5940018	 ldr         r0, [r4, #0x18]
  00050	e3500000	 cmp         r0, #0
  00054	0a000004	 beq         |$LN7@Cleanup|

; 502  :     {
; 503  :         VirtualFree((PVOID)v_pGPIORegs,0,MEM_RELEASE);

  00058	e3a02902	 mov         r2, #2, 18
  0005c	e3a01000	 mov         r1, #0
  00060	eb000000	 bl          VirtualFree

; 504  :         v_pGPIORegs = NULL;

  00064	e3a03000	 mov         r3, #0
  00068	e5843018	 str         r3, [r4, #0x18]
  0006c		 |$LN7@Cleanup|

; 505  :     }
; 506  : 
; 507  :     if (gFrameBuffer)

  0006c	e5940000	 ldr         r0, [r4]
  00070	e3500000	 cmp         r0, #0
  00074	0a000004	 beq         |$LN6@Cleanup|

; 508  :     {
; 509  :         VirtualFree((PVOID)gFrameBuffer,0,MEM_RELEASE);

  00078	e3a02902	 mov         r2, #2, 18
  0007c	e3a01000	 mov         r1, #0
  00080	eb000000	 bl          VirtualFree

; 510  :         gFrameBuffer = NULL;

  00084	e3a03000	 mov         r3, #0
  00088	e5843000	 str         r3, [r4]
  0008c		 |$LN6@Cleanup|

; 511  :     }
; 512  : 
; 513  :     if (gBlackFrameBuffer)

  0008c	e5940004	 ldr         r0, [r4, #4]
  00090	e3500000	 cmp         r0, #0
  00094	0a000004	 beq         |$LN5@Cleanup|

; 514  :     {
; 515  :         VirtualFree((PVOID)gBlackFrameBuffer,0,MEM_RELEASE);

  00098	e3a02902	 mov         r2, #2, 18
  0009c	e3a01000	 mov         r1, #0
  000a0	eb000000	 bl          VirtualFree

; 516  :         gBlackFrameBuffer = NULL;

  000a4	e3a03000	 mov         r3, #0
  000a8	e5843004	 str         r3, [r4, #4]
  000ac		 |$LN5@Cleanup|

; 517  :     }
; 518  : 
; 519  :     if (frameDescriptorCh2_YCbCr_Y)

  000ac	e5940030	 ldr         r0, [r4, #0x30]
  000b0	e3500000	 cmp         r0, #0
  000b4	0a000004	 beq         |$LN4@Cleanup|

; 520  :     {
; 521  :         VirtualFree((PVOID)frameDescriptorCh2_YCbCr_Y,0,MEM_RELEASE);

  000b8	e3a02902	 mov         r2, #2, 18
  000bc	e3a01000	 mov         r1, #0
  000c0	eb000000	 bl          VirtualFree

; 522  :         frameDescriptorCh2_YCbCr_Y = NULL;

  000c4	e3a03000	 mov         r3, #0
  000c8	e5843030	 str         r3, [r4, #0x30]
  000cc		 |$LN4@Cleanup|

; 523  :     }
; 524  : 
; 525  :     if (frameDescriptorCh3_YCbCr_Cb)

  000cc	e5940034	 ldr         r0, [r4, #0x34]
  000d0	e3500000	 cmp         r0, #0
  000d4	0a000004	 beq         |$LN3@Cleanup|

; 526  :     {
; 527  :         VirtualFree((PVOID)frameDescriptorCh3_YCbCr_Cb,0,MEM_RELEASE);

  000d8	e3a02902	 mov         r2, #2, 18
  000dc	e3a01000	 mov         r1, #0
  000e0	eb000000	 bl          VirtualFree

; 528  :         frameDescriptorCh3_YCbCr_Cb = NULL;

  000e4	e3a03000	 mov         r3, #0
  000e8	e5843034	 str         r3, [r4, #0x34]
  000ec		 |$LN3@Cleanup|

; 529  :     }
; 530  : 
; 531  :     if (frameDescriptorCh4_YCbCr_Cr)

  000ec	e5940038	 ldr         r0, [r4, #0x38]
  000f0	e3500000	 cmp         r0, #0
  000f4	0a000004	 beq         |$LN2@Cleanup|

; 532  :     {
; 533  :         VirtualFree((PVOID)frameDescriptorCh4_YCbCr_Cr,0,MEM_RELEASE);

  000f8	e3a02902	 mov         r2, #2, 18
  000fc	e3a01000	 mov         r1, #0
  00100	eb000000	 bl          VirtualFree

; 534  :         frameDescriptorCh4_YCbCr_Cr = NULL;

  00104	e3a03000	 mov         r3, #0
  00108	e5843038	 str         r3, [r4, #0x38]
  0010c		 |$LN2@Cleanup|

; 535  :     }
; 536  : 
; 537  :     Adapter.ObjectSize    = sizeof (DMA_ADAPTER_OBJECT);
; 538  :     Adapter.InterfaceType = Internal;
; 539  :     Adapter.BusNumber     = 0;
; 540  : 
; 541  :     PhysAddr.HighPart = 0;
; 542  :     PhysAddr.LowPart  = g_DisplayBasePhysical;
; 543  : 
; 544  :     HalFreeCommonBuffer(&Adapter, DISPLAY_BUFFER_SIZE, PhysAddr, (void *)g_DisplayBaseVirtual, FALSE);

  0010c	e59f30a8	 ldr         r3, [pc, #0xA8]
  00110	e59f20a0	 ldr         r2, [pc, #0xA0]
  00114	e3a0600c	 mov         r6, #0xC
  00118	e5931000	 ldr         r1, [r3]
  0011c	e5922000	 ldr         r2, [r2]
  00120	e3a0e000	 mov         lr, #0
  00124	e58d1000	 str         r1, [sp]
  00128	e3a05000	 mov         r5, #0
  0012c	e3a07000	 mov         r7, #0
  00130	e3a0182b	 mov         r1, #0x2B, 16
  00134	e3a03000	 mov         r3, #0
  00138	e28d0008	 add         r0, sp, #8
  0013c	e1cd60b8	 strh        r6, [sp, #8]
  00140	e58de00c	 str         lr, [sp, #0xC]
  00144	e58d5010	 str         r5, [sp, #0x10]
  00148	e58d7004	 str         r7, [sp, #4]
  0014c	eb000000	 bl          HalFreeCommonBuffer

; 545  : 
; 546  :     if( g_fEnableDMASourceSwap && g_DisplayBlackBaseVirtual)

  00150	e594300c	 ldr         r3, [r4, #0xC]
  00154	e3530000	 cmp         r3, #0
  00158	0a000011	 beq         |$LN1@Cleanup|
  0015c	e59f3050	 ldr         r3, [pc, #0x50]
  00160	e593e000	 ldr         lr, [r3]
  00164	e35e0000	 cmp         lr, #0
  00168	0a00000d	 beq         |$LN1@Cleanup|

; 547  :     {
; 548  :         AdapterBlackScreen.ObjectSize    = sizeof (DMA_ADAPTER_OBJECT);
; 549  :         AdapterBlackScreen.InterfaceType = Internal;
; 550  :         AdapterBlackScreen.BusNumber     = 0;
; 551  : 
; 552  :         PhysAddrBlackScreen.HighPart = 0;
; 553  :         PhysAddrBlackScreen.LowPart  = g_DisplayBlackBasePhysical;

  0016c	e59f303c	 ldr         r3, [pc, #0x3C]
  00170	e3a0500c	 mov         r5, #0xC
  00174	e3a06000	 mov         r6, #0
  00178	e5932000	 ldr         r2, [r3]
  0017c	e3a04000	 mov         r4, #0
  00180	e3a03000	 mov         r3, #0

; 554  : 
; 555  :         HalFreeCommonBuffer(&AdapterBlackScreen, FRAME_BUFFER_SIZE, PhysAddrBlackScreen, (void *)g_DisplayBlackBaseVirtual, FALSE);

  00184	e3a01a96	 mov         r1, #0x96, 20
  00188	e28d0014	 add         r0, sp, #0x14
  0018c	e1cd51b4	 strh        r5, [sp, #0x14]
  00190	e58d6018	 str         r6, [sp, #0x18]
  00194	e58d401c	 str         r4, [sp, #0x1C]
  00198	e58d7004	 str         r7, [sp, #4]
  0019c	e58de000	 str         lr, [sp]
  001a0	eb000000	 bl          HalFreeCommonBuffer
  001a4		 |$LN1@Cleanup|

; 556  :     }
; 557  : }

  001a4	e28dd020	 add         sp, sp, #0x20
  001a8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  001ac	e12fff1e	 bx          lr
  001b0		 |$LN15@Cleanup|
  001b0		 |$LN16@Cleanup|
  001b0	00000000	 DCD         |g_DisplayBlackBasePhysical|
  001b4		 |$LN17@Cleanup|
  001b4	00000000	 DCD         |g_DisplayBlackBaseVirtual|
  001b8		 |$LN18@Cleanup|
  001b8	00000000	 DCD         |g_DisplayBasePhysical|
  001bc		 |$LN19@Cleanup|
  001bc	00000000	 DCD         |g_DisplayBaseVirtual|
  001c0		 |$LN20@Cleanup|
  001c0	00000000	 DCD         |gFrameBuffer|
  001c4		 |$M43064|

			 ENDP  ; |Cleanup|

	EXPORT	|DispDrvrPowerHandler|
	IMPORT	|XllpLCDResume|
	IMPORT	|XllpLCDSuspend|
	IMPORT	|XllpOstDelayMilliSeconds|
	IMPORT	|XllpLCDInit|

  00000			 AREA	 |.pdata|, PDATA
|$T43080| DCD	|$LN9@DispDrvrPo|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrPowerHandler| PROC

; 560  : {

  00000		 |$LN9@DispDrvrPo|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M43077|
  00004	e3500000	 cmp         r0, #0

; 561  : 
; 562  :     if(bOff)
; 563  :     {
; 564  : 
; 565  :         if( g_fEnableDMASourceSwap )

  00008	e59f508c	 ldr         r5, [pc, #0x8C]
  0000c	e59f4084	 ldr         r4, [pc, #0x84]
  00010	e5953000	 ldr         r3, [r5]
  00014	0a00000e	 beq         |$LN4@DispDrvrPo|
  00018	e3530000	 cmp         r3, #0
  0001c	0a000007	 beq         |$LN3@DispDrvrPo|

; 566  :         {
; 567  :             // Before turning off, lets switch out the DMA's source address
; 568  :             // Old source address: FRAME_BUFFER_BASE_PHYSICAL (in virtual land gFrameBuffer)
; 569  :             // New source address: g_DisplayBlackBasePhysical (in virtual land g_DisplayBlackBaseVirtual)
; 570  : 
; 571  :             // So when we go into user idle, GWES keeps writing to the original buffer,
; 572  :             // but DMA updates the LCD with the black buffer
; 573  : 
; 574  :             // Swap the DMA pointer
; 575  :             XllpLCD._FRAME_BUFFER_BASE_PHYSICAL = g_DisplayBlackBasePhysical;

  00020	e59f306c	 ldr         r3, [pc, #0x6C]

; 576  :             XllpLCDInit(&XllpLCD);  //Let XllpLCDInit update DMA for us

  00024	e1a00004	 mov         r0, r4
  00028	e5933000	 ldr         r3, [r3]
  0002c	e5843034	 str         r3, [r4, #0x34]
  00030	eb000000	 bl          XllpLCDInit

; 577  :             XllpOstDelayMilliSeconds((XLLP_OST_T *)v_pOSTRegs, 1);

  00034	e5950038	 ldr         r0, [r5, #0x38]
  00038	e3a01001	 mov         r1, #1
  0003c	eb000000	 bl          XllpOstDelayMilliSeconds
  00040		 |$LN3@DispDrvrPo|

; 578  :         }
; 579  : 
; 580  :         XllpLCDSuspend(&XllpLCD, Suspend_Graceful);

  00040	e3a01000	 mov         r1, #0
  00044	e1a00004	 mov         r0, r4
  00048	eb000000	 bl          XllpLCDSuspend

; 593  :     }
; 594  : }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN4@DispDrvrPo|

; 581  :     }
; 582  :     else
; 583  :     {
; 584  :         if( g_fEnableDMASourceSwap )

  00054	e3530000	 cmp         r3, #0
  00058	0a000008	 beq         |$LN1@DispDrvrPo|

; 585  :         {
; 586  :             // Swap back the DMA pointer
; 587  :             XllpLCD._FRAME_BUFFER_BASE_PHYSICAL = FRAME_BUFFER_BASE_PHYSICAL;

  0005c	e59f302c	 ldr         r3, [pc, #0x2C]

; 588  :             XllpLCDInit(&XllpLCD);

  00060	e1a00004	 mov         r0, r4
  00064	e5933000	 ldr         r3, [r3]
  00068	e2833d12	 add         r3, r3, #0x12, 26
  0006c	e5843034	 str         r3, [r4, #0x34]
  00070	eb000000	 bl          XllpLCDInit

; 589  :             XllpOstDelayMilliSeconds((XLLP_OST_T *)v_pOSTRegs, 1);

  00074	e5950038	 ldr         r0, [r5, #0x38]
  00078	e3a01001	 mov         r1, #1
  0007c	eb000000	 bl          XllpOstDelayMilliSeconds
  00080		 |$LN1@DispDrvrPo|

; 590  :         }
; 591  : 
; 592  :         XllpLCDResume(&XllpLCD);

  00080	e1a00004	 mov         r0, r4
  00084	eb000000	 bl          XllpLCDResume

; 593  :     }
; 594  : }

  00088	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0008c	e12fff1e	 bx          lr
  00090		 |$LN10@DispDrvrPo|
  00090		 |$LN11@DispDrvrPo|
  00090	00000000	 DCD         |g_DisplayBasePhysical|
  00094		 |$LN12@DispDrvrPo|
  00094	00000000	 DCD         |g_DisplayBlackBasePhysical|
  00098		 |$LN13@DispDrvrPo|
  00098	00000000	 DCD         |XllpLCD|
  0009c		 |$LN14@DispDrvrPo|
  0009c	00000000	 DCD         |g_fEnableDMASourceSwap|
  000a0		 |$M43078|

			 ENDP  ; |DispDrvrPowerHandler|

	EXPORT	|ClearFrameBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T43097| DCD	|$LN12@ClearFrame|
	DCD	0x40002101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ClearFrameBuffer| PROC

; 598  : {

  00000		 |$LN12@ClearFrame|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M43094|
  00004	e1a04001	 mov         r4, r1

; 599  :     DWORD i;
; 600  : 
; 601  :     for(i = 0; i < (DispDrvr_cxScreen * DispDrvr_cyScreen * (bpp / 8) / 4); i++)

  00008	e59f5070	 ldr         r5, [pc, #0x70]
  0000c	e59f6068	 ldr         r6, [pc, #0x68]
  00010	e59f7060	 ldr         r7, [pc, #0x60]
  00014	e5953000	 ldr         r3, [r5]
  00018	e5962000	 ldr         r2, [r6]
  0001c	e597e000	 ldr         lr, [r7]
  00020	e1a031a3	 mov         r3, r3, lsr #3
  00024	e0020293	 mul         r2, r3, r2
  00028	e0030e92	 mul         r3, r2, lr
  0002c	e3a0e000	 mov         lr, #0
  00030	e3d3c003	 bics        r12, r3, #3
  00034	0a00000d	 beq         |$LN3@ClearFrame|
  00038	e3e08000	 mvn         r8, #0
  0003c	e3a09000	 mov         r9, #0
  00040		 |$LL5@ClearFrame|

; 602  :     {
; 603  :         if (color)

  00040	e3540000	 cmp         r4, #0

; 604  :         {
; 605  :             *fbp++ = 0xFFFFFFFF;    // Ones turn it white

  00044	14808004	 strne       r8, [r0], #4
  00048	e28ee001	 add         lr, lr, #1

; 606  :         }
; 607  :         else
; 608  :         {
; 609  :             *fbp++ = 0x00000000;    // Zeros turn it black

  0004c	04809004	 streq       r9, [r0], #4
  00050	e5953000	 ldr         r3, [r5]
  00054	e5962000	 ldr         r2, [r6]
  00058	e5971000	 ldr         r1, [r7]
  0005c	e1a031a3	 mov         r3, r3, lsr #3
  00060	e0020293	 mul         r2, r3, r2
  00064	e0030192	 mul         r3, r2, r1
  00068	e15e0123	 cmp         lr, r3, lsr #2
  0006c	3afffff3	 bcc         |$LL5@ClearFrame|
  00070		 |$LN3@ClearFrame|

; 610  :         }
; 611  :     }
; 612  : }

  00070	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$LN13@ClearFrame|
  00078		 |$LN14@ClearFrame|
  00078	00000000	 DCD         |DispDrvr_cxScreen|
  0007c		 |$LN15@ClearFrame|
  0007c	00000000	 DCD         |DispDrvr_cyScreen|
  00080		 |$LN16@ClearFrame|
  00080	00000000	 DCD         |bpp|
  00084		 |$M43095|

			 ENDP  ; |ClearFrameBuffer|

	EXPORT	|DispDrvrContrastControl|

  00000			 AREA	 |.pdata|, PDATA
|$T43110| DCD	|$LN5@DispDrvrCo|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrContrastControl| PROC

; 623  : {

  00000		 |$LN5@DispDrvrCo|
  00000		 |$M43107|

; 624  :     // currently does not support changing contrast in software.
; 625  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 626  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43108|

			 ENDP  ; |DispDrvrContrastControl|

	EXPORT	|DirtyRectDumpPortraitLoop_C|
	IMPORT	|dirtyRectDump_core_ASM|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T43133| DCD	|$LN22@DirtyRectD|
	DCD	0x40003402
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DirtyRectDumpPortraitLoop_C| PROC

; 631  : {

  00000		 |$LN22@DirtyRectD|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M43130|
  00008	e1a08003	 mov         r8, r3
  0000c	e1a09002	 mov         r9, r2
  00010	e1a06001	 mov         r6, r1
  00014	e1a07000	 mov         r7, r0

; 632  :     DWORD row;
; 633  :     DWORD i;
; 634  :     DWORD j;
; 635  : 
; 636  :     if ( bytesPerPixel != 2 )

  00018	e59d4034	 ldr         r4, [sp, #0x34]
  0001c	e3540002	 cmp         r4, #2
  00020	0a00001b	 beq         |$LN11@DirtyRectD|

; 637  :     {
; 638  :         //not 16-bit
; 639  :         for (i = 0; i < srcWidthB / bytesPerPixel; i++)

  00024	e59d102c	 ldr         r1, [sp, #0x2C]
  00028	e1a00004	 mov         r0, r4
  0002c	eb000000	 bl          __rt_udiv
  00030	e3500000	 cmp         r0, #0
  00034	0a000022	 beq         |$LN1@DirtyRectD|
  00038	e59de038	 ldr         lr, [sp, #0x38]
  0003c	e59d503c	 ldr         r5, [sp, #0x3C]
  00040	e59da030	 ldr         r10, [sp, #0x30]
  00044	e28ee002	 add         lr, lr, #2
  00048		 |$LL10@DirtyRectD|

; 640  :         {
; 641  :             for (row = yTop; row < yBottom; row++)

  00048	e1590008	 cmp         r9, r8
  0004c	2a00000b	 bcs         |$LN5@DirtyRectD|
  00050	e0481009	 sub         r1, r8, r9
  00054		 |$LL7@DirtyRectD|

; 642  :             {
; 643  :                 for (j = 0; j < bytesPerPixel; j++)

  00054	e3a02000	 mov         r2, #0
  00058	e3540000	 cmp         r4, #0
  0005c	0a000004	 beq         |$LN2@DirtyRectD|
  00060		 |$LL4@DirtyRectD|

; 644  :                 {
; 645  :                     *pDstBuf++ = *(pSrcBuf + j);

  00060	e7d23006	 ldrb        r3, [r2, +r6]
  00064	e2822001	 add         r2, r2, #1
  00068	e1520004	 cmp         r2, r4
  0006c	e4c73001	 strb        r3, [r7], #1
  00070	3afffffa	 bcc         |$LL4@DirtyRectD|
  00074		 |$LN2@DirtyRectD|

; 646  :                 }
; 647  : 
; 648  :                 pSrcBuf -= bytesPerRow;

  00074	e046600a	 sub         r6, r6, r10
  00078	e2511001	 subs        r1, r1, #1
  0007c	1afffff4	 bne         |$LL7@DirtyRectD|
  00080		 |$LN5@DirtyRectD|

; 649  :             }
; 650  : 
; 651  :             pDstBuf += dstMarginWidth;

  00080	e0877005	 add         r7, r7, r5

; 652  :             pSrcBuf += srcMarginWidth + 2;

  00084	e086600e	 add         r6, r6, lr
  00088	e2500001	 subs        r0, r0, #1
  0008c	1affffed	 bne         |$LL10@DirtyRectD|

; 653  :         }
; 654  :     }
; 655  :     else

  00090	ea00000b	 b           |$LN1@DirtyRectD|
  00094		 |$LN11@DirtyRectD|

; 656  :     {
; 657  :         WORD * pwDst;
; 658  :         WORD * pwSrc;
; 659  :         int    rowLen;
; 660  : 
; 661  :         //16-bit
; 662  :         srcWidthB >>= 1;
; 663  : 
; 664  :         pwDst = (WORD *)pDstBuf;
; 665  :         pwSrc = (WORD *)pSrcBuf;
; 666  : 
; 667  :         //first row for pwSrc, then column for pwDst
; 668  :         rowLen = yBottom - yTop;
; 669  : 
; 670  : #ifndef _OPT_ASM
; 671  :         bytesPerRow    >>= 1;
; 672  :         dstMarginWidth >>= 1;
; 673  :         srcMarginWidth >>= 1;
; 674  : 
; 675  :         for (i = 0; i < srcWidthB; i++)
; 676  :         {
; 677  :             for (row = 0; row < (rowLen >> 2); row++)
; 678  :             {
; 679  :                 *pwDst++  = *pwSrc;
; 680  :                 pwSrc    -= bytesPerRow;
; 681  : 
; 682  :                 *pwDst++  = *pwSrc;
; 683  :                 pwSrc    -= bytesPerRow;
; 684  : 
; 685  :                 *pwDst++  = *pwSrc;
; 686  :                 pwSrc    -= bytesPerRow;
; 687  : 
; 688  :                 *pwDst++  = *pwSrc;
; 689  :                 pwSrc    -= bytesPerRow;
; 690  :             }
; 691  : 
; 692  :             for (row = 0; row < (rowLen & 0x3); row++)
; 693  :             {
; 694  :                 *pwDst++  = *pwSrc;
; 695  :                 pwSrc    -= bytesPerRow;
; 696  :             }
; 697  : 
; 698  :             pwDst += dstMarginWidth;
; 699  :             pwSrc += srcMarginWidth + 1;
; 700  :         }
; 701  : #else
; 702  :         dirtyRectDump_core_ASM(pwSrc, pwDst, rowLen, srcWidthB, bytesPerRow, srcMarginWidth, dstMarginWidth);

  00094	e59d302c	 ldr         r3, [sp, #0x2C]
  00098	e59de03c	 ldr         lr, [sp, #0x3C]
  0009c	e59d4038	 ldr         r4, [sp, #0x38]
  000a0	e59d5030	 ldr         r5, [sp, #0x30]
  000a4	e1a030a3	 mov         r3, r3, lsr #1
  000a8	e0482009	 sub         r2, r8, r9
  000ac	e1a01007	 mov         r1, r7
  000b0	e1a00006	 mov         r0, r6
  000b4	e58de008	 str         lr, [sp, #8]
  000b8	e58d4004	 str         r4, [sp, #4]
  000bc	e58d5000	 str         r5, [sp]
  000c0	eb000000	 bl          dirtyRectDump_core_ASM
  000c4		 |$LN1@DirtyRectD|

; 703  : #endif
; 704  :     }
; 705  : }

  000c4	e28dd00c	 add         sp, sp, #0xC
  000c8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$M43131|

			 ENDP  ; |DirtyRectDumpPortraitLoop_C|

	EXPORT	|DispDrvrDirtyRectDump|

  00000			 AREA	 |.pdata|, PDATA
|$T43159| DCD	|$LN15@DispDrvrDi|
	DCD	0x40004902
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrDirtyRectDump| PROC

; 708  : {

  00000		 |$LN15@DispDrvrDi|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd024	 sub         sp, sp, #0x24
  00008		 |$M43156|

; 709  :     BYTE  * pDstBuf;
; 710  :     BYTE  * pSrcBuf;
; 711  :     DWORD   xLeft;
; 712  :     DWORD   yTop;
; 713  :     DWORD   xRight;
; 714  :     DWORD   yBottom;
; 715  :     DWORD   bytesPerRow;
; 716  :     DWORD   bytesPerPixel;
; 717  :     DWORD   srcWidthB;
; 718  :     DWORD   srcMarginWidth;
; 719  :     DWORD   dstMarginWidth;
; 720  :     DWORD   srcStartRow;
; 721  :     DWORD   dstStartRow;
; 722  : 
; 723  :     bytesPerPixel = bpp / 8;

  00008	e59f3110	 ldr         r3, [pc, #0x110]

; 724  : 
; 725  :     xLeft   = prc->left   < 0                    ? 0                 : prc->left;

  0000c	e5902000	 ldr         r2, [r0]

; 726  :     yTop    = prc->top    < 0                    ? 0                 : prc->top;
; 727  :     xRight  = prc->right  > DispDrvr_cxScreen    ? DispDrvr_cxScreen : prc->right;

  00010	e5901008	 ldr         r1, [r0, #8]
  00014	e5933000	 ldr         r3, [r3]
  00018	e1b04002	 movs        r4, r2
  0001c	43a04000	 movmi       r4, #0
  00020	e1a081a3	 mov         r8, r3, lsr #3
  00024	e5903004	 ldr         r3, [r0, #4]

; 728  :     yBottom = prc->bottom > DispDrvr_cyScreen    ? DispDrvr_cyScreen : prc->bottom;

  00028	e590200c	 ldr         r2, [r0, #0xC]
  0002c	e58d101c	 str         r1, [sp, #0x1C]
  00030	e1b0e003	 movs        lr, r3
  00034	e59f30e0	 ldr         r3, [pc, #0xE0]
  00038	e58de014	 str         lr, [sp, #0x14]
  0003c	43a0e000	 movmi       lr, #0
  00040	e5937000	 ldr         r7, [r3]
  00044	e59f30cc	 ldr         r3, [pc, #0xCC]
  00048	458de014	 strmi       lr, [sp, #0x14]
  0004c	e1510007	 cmp         r1, r7
  00050	e5933000	 ldr         r3, [r3]
  00054	c1a01007	 movgt       r1, r7
  00058	c58d101c	 strgt       r1, [sp, #0x1C]
  0005c	e1520003	 cmp         r2, r3
  00060	e58d2018	 str         r2, [sp, #0x18]
  00064	c1a02003	 movgt       r2, r3
  00068	c58d2018	 strgt       r2, [sp, #0x18]

; 729  : 
; 730  :     if ((LONG)xLeft >= (LONG)xRight || (LONG)yTop >= (LONG)yBottom)

  0006c	e1540001	 cmp         r4, r1
  00070	e58d8020	 str         r8, [sp, #0x20]
  00074	aa000022	 bge         |$LN1@DispDrvrDi|
  00078	e15e0002	 cmp         lr, r2
  0007c	aa000020	 bge         |$LN1@DispDrvrDi|

; 731  :     {
; 732  :         return;
; 733  :     }
; 734  : 
; 735  :     xLeft       *= bytesPerPixel;
; 736  :     xRight      *= bytesPerPixel;
; 737  :     bytesPerRow  = DispDrvr_cxScreen * bytesPerPixel;
; 738  : 
; 739  :     srcWidthB      = xRight - xLeft;
; 740  :     srcStartRow    = (yBottom - 1) * bytesPerRow;
; 741  :     srcMarginWidth = (yBottom - yTop) * bytesPerRow;
; 742  :     dstStartRow    = xLeft * DispDrvr_cyScreen;
; 743  :     dstMarginWidth = (DispDrvr_cyScreen - (yBottom - yTop)) * bytesPerPixel;
; 744  :     pDstBuf        = gFrameBuffer + dstStartRow + (DispDrvr_cyScreen - yBottom) * bytesPerPixel;

  00080	e0436002	 sub         r6, r3, r2
  00084	e59f5088	 ldr         r5, [pc, #0x88]
  00088	e00a0498	 mul         r10, r8, r4
  0008c	e0040896	 mul         r4, r6, r8
  00090	e595e000	 ldr         lr, [r5]
  00094	e00b0897	 mul         r11, r7, r8

; 745  : 
; 746  :     pSrcBuf = gDibBuffer + srcStartRow + xLeft;
; 747  : 
; 748  :     EnterCriticalSection(&displayMutex);

  00098	e0274a93	 mla         r7, r3, r10, r4
  0009c	e2421001	 sub         r1, r2, #1
  000a0	e59d3014	 ldr         r3, [sp, #0x14]
  000a4	e028eb91	 mla         r8, r1, r11, lr
  000a8	e0861003	 add         r1, r6, r3
  000ac	e59f005c	 ldr         r0, [pc, #0x5C]
  000b0	e5959004	 ldr         r9, [r5, #4]
  000b4	e59d6020	 ldr         r6, [sp, #0x20]
  000b8	e0040691	 mul         r4, r1, r6
  000bc	eb000000	 bl          EnterCriticalSection
  000c0	e59d3018	 ldr         r3, [sp, #0x18]
  000c4	e59d2014	 ldr         r2, [sp, #0x14]
  000c8	e59d001c	 ldr         r0, [sp, #0x1C]

; 749  : 
; 750  :     DirtyRectDumpPortraitLoop_C(pDstBuf, pSrcBuf, yTop, yBottom, srcWidthB, bytesPerRow,
; 751  :                                 bytesPerPixel, srcMarginWidth, dstMarginWidth);

  000cc	e58d4010	 str         r4, [sp, #0x10]
  000d0	e0431002	 sub         r1, r3, r2
  000d4	e00e0690	 mul         lr, r0, r6
  000d8	e0050b91	 mul         r5, r1, r11
  000dc	e04ee00a	 sub         lr, lr, r10
  000e0	e088100a	 add         r1, r8, r10
  000e4	e0870009	 add         r0, r7, r9
  000e8	e58d500c	 str         r5, [sp, #0xC]
  000ec	e58de000	 str         lr, [sp]
  000f0	e58d6008	 str         r6, [sp, #8]
  000f4	e58db004	 str         r11, [sp, #4]
  000f8	eb000000	 bl          DirtyRectDumpPortraitLoop_C

; 752  : 
; 753  :     LeaveCriticalSection(&displayMutex);

  000fc	e59f000c	 ldr         r0, [pc, #0xC]
  00100	eb000000	 bl          LeaveCriticalSection
  00104		 |$LN1@DispDrvrDi|

; 754  : }

  00104	e28dd024	 add         sp, sp, #0x24
  00108	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$LN16@DispDrvrDi|
  00110		 |$LN17@DispDrvrDi|
  00110	00000000	 DCD         |displayMutex|
  00114		 |$LN18@DispDrvrDi|
  00114	00000000	 DCD         |gDibBuffer|
  00118		 |$LN19@DispDrvrDi|
  00118	00000000	 DCD         |DispDrvr_cyScreen|
  0011c		 |$LN20@DispDrvrDi|
  0011c	00000000	 DCD         |DispDrvr_cxScreen|
  00120		 |$LN21@DispDrvrDi|
  00120	00000000	 DCD         |bpp|
  00124		 |$M43157|

			 ENDP  ; |DispDrvrDirtyRectDump|

	EXPORT	|DirtyRectDumpPortraitLoop_C_rectfill|

  00000			 AREA	 |.pdata|, PDATA
|$T43190| DCD	|$LN22@DirtyRectD@2|
	DCD	0x40002301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DirtyRectDumpPortraitLoop_C_rectfill| PROC

; 758  : {

  00000		 |$LN22@DirtyRectD@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M43187|

; 759  :     DWORD   row;
; 760  :     DWORD   i;
; 761  :     WORD  * pwDst;
; 762  :     WORD    rowLen;
; 763  : 
; 764  :     //16-bit
; 765  :     srcWidthB >>= 1;

  00004	e59d4010	 ldr         r4, [sp, #0x10]

; 766  :     pwDst       = (WORD *)pDstBuf;
; 767  : 
; 768  :     //first row for pwSrc, then column for pwDst
; 769  :     rowLen = (WORD)(yBottom - yTop);
; 770  : 
; 771  :     bytesPerRow    >>= 1;
; 772  :     dstMarginWidth >>= 1;

  00008	e59de020	 ldr         lr, [sp, #0x20]
  0000c	e0433002	 sub         r3, r3, r2
  00010	e1a03803	 mov         r3, r3, lsl #16
  00014	e1b050a4	 movs        r5, r4, lsr #1
  00018	e1a060ae	 mov         r6, lr, lsr #1
  0001c	e1a03823	 mov         r3, r3, lsr #16

; 773  :     srcMarginWidth >>= 1;
; 774  : 
; 775  :     for (i = 0; i < srcWidthB; i++)

  00020	0a000017	 beq         |$LN7@DirtyRectD@2|
  00024	e1a0e123	 mov         lr, r3, lsr #2
  00028	e2032003	 and         r2, r3, #3
  0002c		 |$LL9@DirtyRectD@2|

; 776  :     {
; 777  :         for (row = 0; row < (DWORD)(rowLen >> 2); row++)

  0002c	e35e0000	 cmp         lr, #0
  00030	0a000006	 beq         |$LN4@DirtyRectD@2|
  00034	e1a0300e	 mov         r3, lr
  00038		 |$LL6@DirtyRectD@2|

; 778  :         {
; 779  :             *pwDst++ = srcColor;

  00038	e0c010b2	 strh        r1, [r0], #2
  0003c	e2533001	 subs        r3, r3, #1

; 780  :             *pwDst++ = srcColor;

  00040	e0c010b2	 strh        r1, [r0], #2

; 781  :             *pwDst++ = srcColor;

  00044	e0c010b2	 strh        r1, [r0], #2

; 782  :             *pwDst++ = srcColor;

  00048	e0c010b2	 strh        r1, [r0], #2
  0004c	1afffff9	 bne         |$LL6@DirtyRectD@2|
  00050		 |$LN4@DirtyRectD@2|

; 783  :         }
; 784  : 
; 785  :         for (row = 0; row < (DWORD)(rowLen & 0x3); row++)

  00050	e3520000	 cmp         r2, #0
  00054	0a000007	 beq         |$LN3@DirtyRectD@2|
  00058	e1a03000	 mov         r3, r0
  0005c	e1b04002	 movs        r4, r2
  00060	0a000003	 beq         |$LN19@DirtyRectD@2|
  00064	e0804084	 add         r4, r0, r4, lsl #1
  00068		 |$LN18@DirtyRectD@2|
  00068	e0c310b2	 strh        r1, [r3], #2
  0006c	e1530004	 cmp         r3, r4
  00070	1afffffc	 bne         |$LN18@DirtyRectD@2|
  00074		 |$LN19@DirtyRectD@2|
  00074	e0800082	 add         r0, r0, r2, lsl #1
  00078		 |$LN3@DirtyRectD@2|

; 786  :         {
; 787  :             *pwDst++ = srcColor;
; 788  :         }
; 789  : 
; 790  :         pwDst += dstMarginWidth;

  00078	e0800086	 add         r0, r0, r6, lsl #1
  0007c	e2555001	 subs        r5, r5, #1
  00080	1affffe9	 bne         |$LL9@DirtyRectD@2|
  00084		 |$LN7@DirtyRectD@2|

; 791  :     }
; 792  : }

  00084	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M43188|

			 ENDP  ; |DirtyRectDumpPortraitLoop_C_rectfill|

	EXPORT	|DispDrvrDirtyRectDump_rectfill|

  00000			 AREA	 |.pdata|, PDATA
|$T43217| DCD	|$LN15@DispDrvrDi@2|
	DCD	0x40004302
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrDirtyRectDump_rectfill| PROC

; 795  : {

  00000		 |$LN15@DispDrvrDi@2|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd01c	 sub         sp, sp, #0x1C
  00008		 |$M43214|
  00008	e58d1018	 str         r1, [sp, #0x18]

; 796  :     BYTE  * pDstBuf;
; 797  :     BYTE  * pSrcBuf;
; 798  :     WORD    srcColor = (WORD)color;
; 799  :     DWORD   xLeft;
; 800  :     DWORD   yTop;
; 801  :     DWORD   xRight;
; 802  :     DWORD   yBottom;
; 803  :     DWORD   bytesPerRow;
; 804  :     DWORD   bytesPerPixel;
; 805  :     DWORD   srcWidthB;
; 806  :     DWORD   srcMarginWidth;
; 807  :     DWORD   dstMarginWidth;
; 808  :     DWORD   srcStartRow;
; 809  :     DWORD   dstStartRow;
; 810  :     DWORD   srcMarginWidth2;
; 811  :     DWORD   dstMarginWidth2;
; 812  :     DWORD   dstStep;
; 813  : 
; 814  :     bytesPerPixel = bpp / 8;

  0000c	e59f30f4	 ldr         r3, [pc, #0xF4]

; 815  : 
; 816  :     xLeft   = prc->left   < 0                    ? 0                 : prc->left;

  00010	e5902000	 ldr         r2, [r0]

; 817  :     yTop    = prc->top    < 0                    ? 0                 : prc->top;
; 818  :     xRight  = prc->right  > DispDrvr_cxScreen    ? DispDrvr_cxScreen : prc->right;

  00014	e5905008	 ldr         r5, [r0, #8]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e1b06002	 movs        r6, r2
  00020	43a06000	 movmi       r6, #0
  00024	e1a081a3	 mov         r8, r3, lsr #3
  00028	e5903004	 ldr         r3, [r0, #4]

; 819  :     yBottom = prc->bottom > DispDrvr_cyScreen    ? DispDrvr_cyScreen : prc->bottom;

  0002c	e590a00c	 ldr         r10, [r0, #0xC]
  00030	e58d8014	 str         r8, [sp, #0x14]
  00034	e1b0b003	 movs        r11, r3
  00038	e59f30c4	 ldr         r3, [pc, #0xC4]
  0003c	43a0b000	 movmi       r11, #0
  00040	e5932000	 ldr         r2, [r3]
  00044	e59f30b4	 ldr         r3, [pc, #0xB4]
  00048	e1550002	 cmp         r5, r2
  0004c	e5933000	 ldr         r3, [r3]
  00050	c1a05002	 movgt       r5, r2
  00054	e15a0003	 cmp         r10, r3
  00058	c1a0a003	 movgt       r10, r3

; 820  : 
; 821  :     if ((LONG)xLeft >= (LONG)xRight || (LONG)yTop >= (LONG)yBottom)

  0005c	e1560005	 cmp         r6, r5
  00060	aa000021	 bge         |$LN1@DispDrvrDi@2|
  00064	e15b000a	 cmp         r11, r10
  00068	aa00001f	 bge         |$LN1@DispDrvrDi@2|

; 822  :     {
; 823  :         return;
; 824  :     }
; 825  : 
; 826  :     xLeft       *= bytesPerPixel;
; 827  :     xRight      *= bytesPerPixel;
; 828  :     bytesPerRow  = DispDrvr_cxScreen * bytesPerPixel;
; 829  : 
; 830  :     srcWidthB       = xRight - xLeft;
; 831  :     srcStartRow     = (yBottom - 1) * bytesPerRow;
; 832  :     srcMarginWidth  = (yBottom - yTop) * bytesPerRow;
; 833  :     dstStartRow     = xLeft * DispDrvr_cyScreen;
; 834  :     dstMarginWidth  = (DispDrvr_cyScreen - (yBottom - yTop)) * bytesPerPixel;

  0006c	e043400a	 sub         r4, r3, r10

; 835  :     pDstBuf         = gFrameBuffer + dstStartRow + (DispDrvr_cyScreen -yBottom) * bytesPerPixel;

  00070	e00e0894	 mul         lr, r4, r8
  00074	e59f1080	 ldr         r1, [pc, #0x80]
  00078	e0060698	 mul         r6, r8, r6

; 836  :     dstStep         = DispDrvr_cyScreen * bytesPerPixel; //portrait frame buffer step
; 837  :     srcMarginWidth2 = DispDrvr_cxScreen * bytesPerPixel + (xRight - xLeft);
; 838  :     dstMarginWidth2 = (xRight - xLeft) * dstStep / bytesPerPixel;
; 839  :     pSrcBuf         = gDibBuffer + srcStartRow + xLeft;
; 840  : 
; 841  :     EnterCriticalSection(&displayMutex);

  0007c	e59f0074	 ldr         r0, [pc, #0x74]
  00080	e5919004	 ldr         r9, [r1, #4]
  00084	e027e693	 mla         r7, r3, r6, lr
  00088	e59de014	 ldr         lr, [sp, #0x14]
  0008c	e084100b	 add         r1, r4, r11
  00090	e0080892	 mul         r8, r2, r8
  00094	e0040e91	 mul         r4, r1, lr
  00098	eb000000	 bl          EnterCriticalSection
  0009c	e04a100b	 sub         r1, r10, r11
  000a0	e59d3014	 ldr         r3, [sp, #0x14]

; 842  : 
; 843  :     DirtyRectDumpPortraitLoop_C_rectfill(pDstBuf, srcColor, yTop, yBottom, srcWidthB, bytesPerRow,
; 844  :         bytesPerPixel, srcMarginWidth, dstMarginWidth);

  000a4	e1a0200b	 mov         r2, r11
  000a8	e00e0395	 mul         lr, r5, r3
  000ac	e0050891	 mul         r5, r1, r8
  000b0	e04ee006	 sub         lr, lr, r6
  000b4	e59d1018	 ldr         r1, [sp, #0x18]
  000b8	e1a01801	 mov         r1, r1, lsl #16
  000bc	e1a0300a	 mov         r3, r10
  000c0	e58de000	 str         lr, [sp]
  000c4	e59de014	 ldr         lr, [sp, #0x14]
  000c8	e1a01821	 mov         r1, r1, lsr #16
  000cc	e0870009	 add         r0, r7, r9
  000d0	e58de008	 str         lr, [sp, #8]
  000d4	e58d4010	 str         r4, [sp, #0x10]
  000d8	e58d500c	 str         r5, [sp, #0xC]
  000dc	e58d8004	 str         r8, [sp, #4]
  000e0	eb000000	 bl          DirtyRectDumpPortraitLoop_C_rectfill

; 845  : 
; 846  :     LeaveCriticalSection(&displayMutex);

  000e4	e59f000c	 ldr         r0, [pc, #0xC]
  000e8	eb000000	 bl          LeaveCriticalSection
  000ec		 |$LN1@DispDrvrDi@2|

; 847  : }

  000ec	e28dd01c	 add         sp, sp, #0x1C
  000f0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  000f4	e12fff1e	 bx          lr
  000f8		 |$LN16@DispDrvrDi@2|
  000f8		 |$LN17@DispDrvrDi@2|
  000f8	00000000	 DCD         |displayMutex|
  000fc		 |$LN18@DispDrvrDi@2|
  000fc	00000000	 DCD         |gDibBuffer|
  00100		 |$LN19@DispDrvrDi@2|
  00100	00000000	 DCD         |DispDrvr_cyScreen|
  00104		 |$LN20@DispDrvrDi@2|
  00104	00000000	 DCD         |DispDrvr_cxScreen|
  00108		 |$LN21@DispDrvrDi@2|
  00108	00000000	 DCD         |bpp|
  0010c		 |$M43215|

			 ENDP  ; |DispDrvrDirtyRectDump_rectfill|

	EXPORT	|DispDrvrDirtyRectDump2|
	IMPORT	|ellipse_core_ASM|

  00000			 AREA	 |.pdata|, PDATA
|$T43247| DCD	|$LN15@DispDrvrDi@3|
	DCD	0x40002e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrDirtyRectDump2| PROC

; 850  : {

  00000		 |$LN15@DispDrvrDi@3|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M43244|
  00004	e1a09001	 mov         r9, r1

; 851  :     WORD  * pDstBuf;
; 852  :     WORD    srcColor = (WORD)color;
; 853  :     DWORD   xLeft;
; 854  :     DWORD   yTop;
; 855  :     DWORD   xRight;
; 856  :     DWORD   yBottom;
; 857  :     DWORD   srcWidthB;
; 858  :     DWORD   dstMarginWidth;
; 859  :     DWORD   dstStartRow;
; 860  : 
; 861  :     xLeft   = prc->left   < 0                    ? 0                 : prc->left;

  00008	e5903000	 ldr         r3, [r0]

; 862  :     yTop    = prc->top    < 0                    ? 0                 : prc->top;
; 863  :     xRight  = prc->right  > DispDrvr_cxScreen    ? DispDrvr_cxScreen : prc->right;

  0000c	e5902008	 ldr         r2, [r0, #8]
  00010	e1b08003	 movs        r8, r3
  00014	e5903004	 ldr         r3, [r0, #4]
  00018	43a08000	 movmi       r8, #0

; 864  :     yBottom = prc->bottom > DispDrvr_cyScreen    ? DispDrvr_cyScreen : prc->bottom;

  0001c	e590000c	 ldr         r0, [r0, #0xC]
  00020	e1b0e003	 movs        lr, r3
  00024	e59f3088	 ldr         r3, [pc, #0x88]
  00028	43a0e000	 movmi       lr, #0
  0002c	e5937000	 ldr         r7, [r3]
  00030	e59f3078	 ldr         r3, [pc, #0x78]
  00034	e1520007	 cmp         r2, r7
  00038	e5934000	 ldr         r4, [r3]
  0003c	d1a07002	 movle       r7, r2
  00040	e1500004	 cmp         r0, r4
  00044	c1a00004	 movgt       r0, r4

; 865  : 
; 866  :     if ((LONG)xLeft >= (LONG)xRight || (LONG)yTop >= (LONG)yBottom)

  00048	e1580007	 cmp         r8, r7
  0004c	aa000013	 bge         |$LN1@DispDrvrDi@3|
  00050	e15e0000	 cmp         lr, r0
  00054	aa000011	 bge         |$LN1@DispDrvrDi@3|

; 867  :     {
; 868  :         return;
; 869  :     }
; 870  : 
; 871  :     srcWidthB      = xRight - xLeft;
; 872  :     dstStartRow    = xLeft * DispDrvr_cyScreen;
; 873  :     dstMarginWidth = (DispDrvr_cyScreen - (yBottom - yTop));
; 874  :     pDstBuf        = (WORD *)gFrameBuffer + dstStartRow + (DispDrvr_cyScreen - yBottom);

  00058	e2883001	 add         r3, r8, #1
  0005c	e0010493	 mul         r1, r3, r4
  00060	e59f2044	 ldr         r2, [pc, #0x44]

; 875  : 
; 876  :     EnterCriticalSection(&displayMutex);

  00064	e0443000	 sub         r3, r4, r0
  00068	e0415000	 sub         r5, r1, r0
  0006c	e59f0034	 ldr         r0, [pc, #0x34]
  00070	e5926000	 ldr         r6, [r2]
  00074	e083400e	 add         r4, r3, lr
  00078	eb000000	 bl          EnterCriticalSection

; 877  : 
; 878  :     ellipse_core_ASM(srcColor, (dstMarginWidth + 1) * 2, srcWidthB, pDstBuf);

  0007c	e2843001	 add         r3, r4, #1
  00080	e1a00809	 mov         r0, r9, lsl #16
  00084	e1a01083	 mov         r1, r3, lsl #1
  00088	e0863085	 add         r3, r6, r5, lsl #1
  0008c	e0472008	 sub         r2, r7, r8
  00090	e1a00820	 mov         r0, r0, lsr #16
  00094	eb000000	 bl          ellipse_core_ASM

; 879  : 
; 880  :     LeaveCriticalSection(&displayMutex);

  00098	e59f0008	 ldr         r0, [pc, #8]
  0009c	eb000000	 bl          LeaveCriticalSection
  000a0		 |$LN1@DispDrvrDi@3|

; 881  : }

  000a0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN16@DispDrvrDi@3|
  000a8		 |$LN17@DispDrvrDi@3|
  000a8	00000000	 DCD         |displayMutex|
  000ac		 |$LN18@DispDrvrDi@3|
  000ac	00000000	 DCD         |gFrameBuffer|
  000b0		 |$LN19@DispDrvrDi@3|
  000b0	00000000	 DCD         |DispDrvr_cyScreen|
  000b4		 |$LN20@DispDrvrDi@3|
  000b4	00000000	 DCD         |DispDrvr_cxScreen|
  000b8		 |$M43245|

			 ENDP  ; |DispDrvrDirtyRectDump2|

	EXPORT	|DispDrvrMoveCursor|

  00000			 AREA	 |.pdata|, PDATA
|$T43259| DCD	|$LN5@DispDrvrMo|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrMoveCursor| PROC

; 884  : {

  00000		 |$LN5@DispDrvrMo|
  00000		 |$M43256|

; 885  :     // will be rewritten to take advantage of the new hardware cursor support
; 886  : /*
; 887  :     // First clear the cursor's old location
; 888  :     gDrawCursorFlag = FALSE;
; 889  :     DispDrvrDirtyRectDump(&gCursorRect);
; 890  :     // Now set the new location of the cursor and redraw
; 891  :     gCursorRect.left = xLocation - gxHot;
; 892  :     if (gCursorRect.left < 0) {
; 893  :         gCursorRect.left = 0;
; 894  :     }
; 895  :     gCursorRect.top = yLocation - gyHot;
; 896  :     if (gCursorRect.top < 0) {
; 897  :         gCursorRect.top = 0;
; 898  :     }
; 899  :     gCursorRect.right = xLocation - gxHot + CURSOR_XSIZE;
; 900  :     gCursorRect.bottom = yLocation - gyHot + CURSOR_YSIZE;
; 901  :     gDrawCursorFlag = TRUE;
; 902  :     DispDrvrDirtyRectDump(&gCursorRect);
; 903  : */
; 904  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M43257|

			 ENDP  ; |DispDrvrMoveCursor|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|ReadRegistryData|
	EXPORT	|??_C@_1BI@MHLCFIP@?$AAL?$AAT?$AAM?$AA0?$AA3?$AA5?$AAA?$AA7?$AA7?$AA6?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@FHPFELGP@?$AAL?$AAQ?$AA6?$AA4?$AAD?$AA3?$AA4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@MJNAIELA@?$AAL?$AAM?$AA8?$AAV?$AA3?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LO@BAAOGPO@?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AAb@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@DDJDMFBH@?$AAL?$AAT?$AAM?$AA0?$AA4?$AAC?$AA3?$AA8?$AA0?$AAK?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@EIPIGAAA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAB?$AAl?$AAa?$AAn?$AAk?$AAi?$AAn?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@MNHPDPDI@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAR?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@GEDFANEH@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAT?$AAy?$AAp?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17JBHIEIFL@?$AAB?$AAp?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@CHCDJFGK@?$AAC?$AAy?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@IJELAEPL@?$AAC?$AAx?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@NCJPFFII@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2?$AAP?$AAX?$AAA?$AA2?$AA7?$AAx?$AA?2?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|_wcsicmp|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T43276| DCD	|$LN30@ReadRegist|
	DCD	0xc000c002

  00000			 AREA	 |.xdata|, DATA
|$T43272| DCD	0xffffffe0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@MHLCFIP@?$AAL?$AAT?$AAM?$AA0?$AA3?$AA5?$AAA?$AA7?$AA7?$AA6?$AAC?$AA?$AA@| DCB "L"
	DCB	0x0, "T", 0x0, "M", 0x0, "0", 0x0, "3", 0x0, "5", 0x0, "A"
	DCB	0x0, "7", 0x0, "7", 0x0, "6", 0x0, "C", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@FHPFELGP@?$AAL?$AAQ?$AA6?$AA4?$AAD?$AA3?$AA4?$AA1?$AA?$AA@| DCB "L"
	DCB	0x0, "Q", 0x0, "6", 0x0, "4", 0x0, "D", 0x0, "3", 0x0, "4"
	DCB	0x0, "1", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@MJNAIELA@?$AAL?$AAM?$AA8?$AAV?$AA3?$AA1?$AA?$AA@| DCB "L", 0x0, "M"
	DCB	0x0, "8", 0x0, "V", 0x0, "3", 0x0, "1", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@BAAOGPO@?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AAb@| DCB "D"
	DCB	0x0, "o", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, ":", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, "b", 0x0, "p", 0x0, "p", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, " "
	DCB	0x0, "C", 0x0, "x", 0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, " ", 0x0, "C"
	DCB	0x0, "y", 0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "T"
	DCB	0x0, "y", 0x0, "p", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@DDJDMFBH@?$AAL?$AAT?$AAM?$AA0?$AA4?$AAC?$AA3?$AA8?$AA0?$AAK?$AA?$AA@| DCB "L"
	DCB	0x0, "T", 0x0, "M", 0x0, "0", 0x0, "4", 0x0, "C", 0x0, "3"
	DCB	0x0, "8", 0x0, "0", 0x0, "K", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@EIPIGAAA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAB?$AAl?$AAa?$AAn?$AAk?$AAi?$AAn?$AAg?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "S"
	DCB	0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, "B"
	DCB	0x0, "l", 0x0, "a", 0x0, "n", 0x0, "k", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@MNHPDPDI@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAR?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n"
	DCB	0x0, "R", 0x0, "o", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@GEDFANEH@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAT?$AAy?$AAp?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17JBHIEIFL@?$AAB?$AAp?$AAp?$AA?$AA@| DCB "B", 0x0, "p", 0x0, "p", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@CHCDJFGK@?$AAC?$AAy?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@| DCB "C"
	DCB	0x0, "y", 0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "n", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@IJELAEPL@?$AAC?$AAx?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@| DCB "C"
	DCB	0x0, "x", 0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "n", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@NCJPFFII@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2?$AAP?$AAX?$AAA?$AA2?$AA7?$AAx?$AA?2?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@| DCB "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "\\", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "\\", 0x0, "P", 0x0, "X", 0x0, "A"
	DCB	0x0, "2", 0x0, "7", 0x0, "x", 0x0, "\\", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43272|

  00008		 |ReadRegistryData| PROC

; 915  : {

  00008		 |$LN30@ReadRegist|
  00008	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  0000c	e24dd094	 sub         sp, sp, #0x94
  00010		 |$M43273|
  00010	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3090	 str         r3, [sp, #0x90]

; 916  :     LONG  regError;
; 917  :     HKEY  hKey;
; 918  :     DWORD dwDataSize;
; 919  :     TCHAR DisplayType[64];
; 920  : 
; 921  :     bpp               = 0;

  0001c	e59f72dc	 ldr         r7, [pc, #0x2DC]

; 922  :     DispDrvr_cyScreen = 0;

  00020	e59f62d4	 ldr         r6, [pc, #0x2D4]

; 923  :     DispDrvr_cxScreen = 0;

  00024	e59f82cc	 ldr         r8, [pc, #0x2CC]

; 924  : 
; 925  :     // Open the registry key
; 926  :     regError = RegOpenKeyEx(HKEY_LOCAL_MACHINE,VIDEO_REG_PATH,0,KEY_ALL_ACCESS,&hKey);

  00028	e59f12c4	 ldr         r1, [pc, #0x2C4]
  0002c	e3a03000	 mov         r3, #0
  00030	e3a02000	 mov         r2, #0
  00034	e3a00000	 mov         r0, #0
  00038	e3a0480f	 mov         r4, #0xF, 16
  0003c	e5873000	 str         r3, [r7]
  00040	e5862000	 str         r2, [r6]
  00044	e5880000	 str         r0, [r8]
  00048	e28de00c	 add         lr, sp, #0xC
  0004c	e384303f	 orr         r3, r4, #0x3F
  00050	e3a02000	 mov         r2, #0
  00054	e3a0010a	 mov         r0, #0xA, 2
  00058	e58de000	 str         lr, [sp]
  0005c	eb000000	 bl          RegOpenKeyExW
  00060	e3500000	 cmp         r0, #0

; 927  :     if (regError != ERROR_SUCCESS)

  00064	0a000003	 beq         |$LN22@ReadRegist|
  00068		 |$LN27@ReadRegist|

; 928  :     {
; 929  :         DEBUGMSG(DEBUGZONE(0),(VIDEO_REG_PATH));
; 930  :         DEBUGMSG(DEBUGZONE(0),(TEXT("Failed opening \\Drivers\\Display\\PXA27x\\Config\r\n")));
; 931  :         return (FALSE);

  00068	e59d0090	 ldr         r0, [sp, #0x90]
  0006c	eb000000	 bl          __security_check_cookie
  00070	e3a00000	 mov         r0, #0
  00074	ea00008d	 b           |$LN23@ReadRegist|
  00078		 |$LN22@ReadRegist|

; 932  :     }
; 933  : 
; 934  :     // Display width
; 935  :     dwDataSize = sizeof(DispDrvr_cxScreen);
; 936  :     regError   = RegQueryValueEx(hKey,VIDEO_ROW_RES, NULL, NULL,(LPBYTE)&DispDrvr_cxScreen,&dwDataSize);

  00078	e59f1270	 ldr         r1, [pc, #0x270]
  0007c	e59d000c	 ldr         r0, [sp, #0xC]
  00080	e3a04004	 mov         r4, #4
  00084	e28de008	 add         lr, sp, #8
  00088	e3a03000	 mov         r3, #0
  0008c	e3a02000	 mov         r2, #0
  00090	e58d4008	 str         r4, [sp, #8]
  00094	e58de004	 str         lr, [sp, #4]
  00098	e58d8000	 str         r8, [sp]
  0009c	eb000000	 bl          RegQueryValueExW
  000a0	e3500000	 cmp         r0, #0

; 937  :     if (regError != ERROR_SUCCESS)
; 938  :     {
; 939  :         DEBUGMSG(DEBUGZONE(0),(TEXT("Failed to get display x value, Error 0x%X\r\n"),regError));
; 940  :         return (FALSE);

  000a4	1affffef	 bne         |$LN27@ReadRegist|

; 941  :     }
; 942  : 
; 943  :     // Display height
; 944  :     dwDataSize = sizeof(DispDrvr_cyScreen);
; 945  :     regError   = RegQueryValueEx(hKey,VIDEO_COL_RES,NULL,NULL,(LPBYTE)&DispDrvr_cyScreen,&dwDataSize);

  000a8	e59f123c	 ldr         r1, [pc, #0x23C]
  000ac	e59d000c	 ldr         r0, [sp, #0xC]
  000b0	e3a04004	 mov         r4, #4
  000b4	e28de008	 add         lr, sp, #8
  000b8	e3a03000	 mov         r3, #0
  000bc	e3a02000	 mov         r2, #0
  000c0	e58d4008	 str         r4, [sp, #8]
  000c4	e58de004	 str         lr, [sp, #4]
  000c8	e58d6000	 str         r6, [sp]
  000cc	eb000000	 bl          RegQueryValueExW
  000d0	e3500000	 cmp         r0, #0

; 946  :     if (regError != ERROR_SUCCESS) {
; 947  :         DEBUGMSG(DEBUGZONE(0),(TEXT("Failed to get display y value, Error 0x%X\r\n"),regError));
; 948  :         return (FALSE);

  000d4	1affffe3	 bne         |$LN27@ReadRegist|

; 949  :     }
; 950  : 
; 951  :     // Color depth
; 952  :     dwDataSize = sizeof(bpp);
; 953  :     regError=RegQueryValueEx(hKey,PIXEL_DEPTH,NULL,NULL,(LPBYTE)&bpp,&dwDataSize);

  000d8	e59f1208	 ldr         r1, [pc, #0x208]
  000dc	e59d000c	 ldr         r0, [sp, #0xC]
  000e0	e3a04004	 mov         r4, #4
  000e4	e28de008	 add         lr, sp, #8
  000e8	e3a03000	 mov         r3, #0
  000ec	e3a02000	 mov         r2, #0
  000f0	e58d4008	 str         r4, [sp, #8]
  000f4	e58de004	 str         lr, [sp, #4]
  000f8	e58d7000	 str         r7, [sp]
  000fc	eb000000	 bl          RegQueryValueExW
  00100	e3500000	 cmp         r0, #0

; 954  :     if (regError != ERROR_SUCCESS)
; 955  :     {
; 956  :         bpp = 0;
; 957  :     }
; 958  : 
; 959  :     // Display Type
; 960  :     dwDataSize = sizeof(DisplayType);
; 961  :     regError   = RegQueryValueEx(hKey,VIDEO_DISPLAY_TYPE,NULL,NULL,(LPBYTE)DisplayType,&dwDataSize);

  00104	e59f11d8	 ldr         r1, [pc, #0x1D8]
  00108	e59d000c	 ldr         r0, [sp, #0xC]
  0010c	13a03000	 movne       r3, #0
  00110	15873000	 strne       r3, [r7]
  00114	e3a05080	 mov         r5, #0x80
  00118	e28de008	 add         lr, sp, #8
  0011c	e28d4010	 add         r4, sp, #0x10
  00120	e3a03000	 mov         r3, #0
  00124	e3a02000	 mov         r2, #0
  00128	e58d5008	 str         r5, [sp, #8]
  0012c	e58de004	 str         lr, [sp, #4]
  00130	e58d4000	 str         r4, [sp]
  00134	eb000000	 bl          RegQueryValueExW
  00138	e3500000	 cmp         r0, #0

; 962  :     if (regError != ERROR_SUCCESS)
; 963  :     {
; 964  :         DEBUGMSG(DEBUGZONE(0),(TEXT("Failed to get display type, Error 0x%X\r\n"),regError));
; 965  :         return (FALSE);

  0013c	1affffc9	 bne         |$LN27@ReadRegist|

; 966  :     }
; 967  : 
; 968  :     // Allow screen rotation?
; 969  :     dwDataSize = sizeof(g_fDisableRotation);
; 970  :     regError=RegQueryValueEx(hKey,VIDEO_DISABLE_SCREENROTATION,NULL,NULL,(LPBYTE)&g_fDisableRotation,&dwDataSize);

  00140	e59f5198	 ldr         r5, [pc, #0x198]
  00144	e59f1190	 ldr         r1, [pc, #0x190]
  00148	e59d000c	 ldr         r0, [sp, #0xC]
  0014c	e2853018	 add         r3, r5, #0x18
  00150	e58d3000	 str         r3, [sp]
  00154	e3a04004	 mov         r4, #4
  00158	e28de008	 add         lr, sp, #8
  0015c	e3a03000	 mov         r3, #0
  00160	e3a02000	 mov         r2, #0
  00164	e58d4008	 str         r4, [sp, #8]
  00168	e58de004	 str         lr, [sp, #4]
  0016c	eb000000	 bl          RegQueryValueExW
  00170	e3500000	 cmp         r0, #0

; 971  :     if (regError != ERROR_SUCCESS)
; 972  :     {
; 973  :         g_fDisableRotation = FALSE;
; 974  :     }
; 975  : 
; 976  :     // Enable forced screen blacking (for LCD's that ghost)
; 977  :     dwDataSize = sizeof(g_fEnableDMASourceSwap);
; 978  :     regError=RegQueryValueEx(hKey,VIDEO_ENABLE_SCREENBLANKING,NULL,NULL,(LPBYTE)&g_fEnableDMASourceSwap,&dwDataSize);

  00174	e59f115c	 ldr         r1, [pc, #0x15C]
  00178	e59d000c	 ldr         r0, [sp, #0xC]
  0017c	13a03000	 movne       r3, #0
  00180	15853018	 strne       r3, [r5, #0x18]
  00184	e3a09004	 mov         r9, #4
  00188	e28de008	 add         lr, sp, #8
  0018c	e285401c	 add         r4, r5, #0x1C
  00190	e3a03000	 mov         r3, #0
  00194	e3a02000	 mov         r2, #0
  00198	e58d9008	 str         r9, [sp, #8]
  0019c	e58de004	 str         lr, [sp, #4]
  001a0	e58d4000	 str         r4, [sp]
  001a4	eb000000	 bl          RegQueryValueExW
  001a8	e3500000	 cmp         r0, #0

; 979  :     if (regError != ERROR_SUCCESS)
; 980  :     {
; 981  :         g_fEnableDMASourceSwap = FALSE;
; 982  :     }
; 983  : 
; 984  :     RegCloseKey (hKey);

  001ac	e59d000c	 ldr         r0, [sp, #0xC]
  001b0	13a03000	 movne       r3, #0
  001b4	1585301c	 strne       r3, [r5, #0x1C]
  001b8	eb000000	 bl          RegCloseKey

; 985  :     RETAILMSG(1, (TEXT("Done getting Registry values:\r\nbpp: 0x%x\r\n CxScreen: 0x%x\r\n CyScreen: 0x%x\r\nDisplay Type: %s\r\n"), bpp, DispDrvr_cxScreen, DispDrvr_cyScreen,DisplayType));

  001bc	e5963000	 ldr         r3, [r6]
  001c0	e5982000	 ldr         r2, [r8]
  001c4	e5971000	 ldr         r1, [r7]
  001c8	e59f0104	 ldr         r0, [pc, #0x104]
  001cc	e28de010	 add         lr, sp, #0x10
  001d0	e58de000	 str         lr, [sp]
  001d4	eb000000	 bl          NKDbgPrintfW

; 986  : 
; 987  :     if (_wcsicmp(DisplayType, TEXT("LTM04C380K")) == 0)

  001d8	e59f10f0	 ldr         r1, [pc, #0xF0]
  001dc	e28d0010	 add         r0, sp, #0x10
  001e0	eb000000	 bl          _wcsicmp
  001e4	e3500000	 cmp         r0, #0

; 988  :     {
; 989  :         nDisplayType = LTM04C380K;

  001e8	03a03001	 moveq       r3, #1
  001ec	0a000011	 beq         |$LN25@ReadRegist|

; 990  :     }
; 991  :     else if (_wcsicmp(DisplayType, TEXT("LM8V31")) == 0)

  001f0	e59f10d4	 ldr         r1, [pc, #0xD4]
  001f4	e28d0010	 add         r0, sp, #0x10
  001f8	eb000000	 bl          _wcsicmp
  001fc	e3500000	 cmp         r0, #0

; 992  :     {
; 993  :         nDisplayType = LM8V31;

  00200	03a03004	 moveq       r3, #4
  00204	0a00000b	 beq         |$LN25@ReadRegist|

; 994  :     }
; 995  :     else if (_wcsicmp(DisplayType, TEXT("LQ64D341")) == 0)

  00208	e59f10b8	 ldr         r1, [pc, #0xB8]
  0020c	e28d0010	 add         r0, sp, #0x10
  00210	eb000000	 bl          _wcsicmp
  00214	e3500000	 cmp         r0, #0

; 996  :     {
; 997  :         nDisplayType = LQ64D341;

  00218	03a03002	 moveq       r3, #2
  0021c	0a000005	 beq         |$LN25@ReadRegist|

; 998  :     }
; 999  :     else if (_wcsicmp(DisplayType, TEXT("LTM035A776C")) == 0)

  00220	e59f109c	 ldr         r1, [pc, #0x9C]
  00224	e28d0010	 add         r0, sp, #0x10
  00228	eb000000	 bl          _wcsicmp
  0022c	e3500000	 cmp         r0, #0

; 1000 :     {
; 1001 :         nDisplayType = LTM035A776C;

  00230	03a03005	 moveq       r3, #5

; 1002 :     }
; 1003 :     else
; 1004 :     {
; 1005 :         nDisplayType = NONE;

  00234	13a03000	 movne       r3, #0
  00238		 |$LN25@ReadRegist|
  00238	e59f2080	 ldr         r2, [pc, #0x80]

; 1006 :     }
; 1007 : 
; 1008 :     // bDoRotation is used to indicate whether or not a rotation of the frame buffer
; 1009 :     // is required in order to orient it correctly for the target display.
; 1010 :     bDoRotation = FALSE;
; 1011 :     switch (nDisplayType)

  0023c	e5981000	 ldr         r1, [r8]
  00240	e3530001	 cmp         r3, #1
  00244	e5823000	 str         r3, [r2]
  00248	e3a02000	 mov         r2, #0
  0024c	e5852000	 str         r2, [r5]
  00250	0a000009	 beq         |$LN5@ReadRegist|
  00254	e3530002	 cmp         r3, #2
  00258	0a000003	 beq         |$LN3@ReadRegist|
  0025c	e3530004	 cmp         r3, #4
  00260	0a000005	 beq         |$LN5@ReadRegist|
  00264	e3530005	 cmp         r3, #5
  00268	1a000008	 bne         |$LN4@ReadRegist|
  0026c		 |$LN3@ReadRegist|

; 1018 :         }
; 1019 :         break;
; 1020 : 
; 1021 :     case LQ64D341:        // native portrait, 176x220
; 1022 :     case LTM035A776C:    // native portrait, 240x320
; 1023 :         if (DispDrvr_cxScreen > DispDrvr_cyScreen)

  0026c	e5963000	 ldr         r3, [r6]
  00270	e1510003	 cmp         r1, r3
  00274	da000005	 ble         |$LN4@ReadRegist|

; 1024 :         {
; 1025 :             bDoRotation = TRUE;
; 1026 :         }
; 1027 :         break;

  00278	ea000002	 b           |$LN26@ReadRegist|
  0027c		 |$LN5@ReadRegist|

; 1012 :     {
; 1013 :     case LTM04C380K:    // native landscape 640x480
; 1014 :     case LM8V31:        // native landscape 640x480
; 1015 :         if (DispDrvr_cxScreen < DispDrvr_cyScreen)

  0027c	e5963000	 ldr         r3, [r6]
  00280	e1510003	 cmp         r1, r3
  00284	aa000001	 bge         |$LN4@ReadRegist|
  00288		 |$LN26@ReadRegist|

; 1016 :         {
; 1017 :             bDoRotation = TRUE;

  00288	e3a03001	 mov         r3, #1
  0028c	e5853000	 str         r3, [r5]
  00290		 |$LN4@ReadRegist|

; 1028 : 
; 1029 :     default:
; 1030 :         break;
; 1031 :     }
; 1032 : 
; 1033 :     // Calculate the stride of the frame buffer
; 1034 :     DispDrvr_cdwStride = DispDrvr_cxScreen * bpp / 8;

  00290	e5973000	 ldr         r3, [r7]
  00294	e59f2020	 ldr         r2, [pc, #0x20]
  00298	e0030391	 mul         r3, r1, r3
  0029c	e1a031a3	 mov         r3, r3, lsr #3
  002a0	e5823000	 str         r3, [r2]

; 1035 : 
; 1036 :     return (TRUE);

  002a4	e59d0090	 ldr         r0, [sp, #0x90]
  002a8	eb000000	 bl          __security_check_cookie
  002ac	e3a00001	 mov         r0, #1
  002b0		 |$LN23@ReadRegist|

; 1037 : }

  002b0	e28dd094	 add         sp, sp, #0x94
  002b4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$LN31@ReadRegist|
  002bc		 |$LN32@ReadRegist|
  002bc	00000000	 DCD         |DispDrvr_cdwStride|
  002c0		 |$LN33@ReadRegist|
  002c0	00000000	 DCD         |nDisplayType|
  002c4		 |$LN34@ReadRegist|
  002c4	00000000	 DCD         |??_C@_1BI@MHLCFIP@?$AAL?$AAT?$AAM?$AA0?$AA3?$AA5?$AAA?$AA7?$AA7?$AA6?$AAC?$AA?$AA@|
  002c8		 |$LN35@ReadRegist|
  002c8	00000000	 DCD         |??_C@_1BC@FHPFELGP@?$AAL?$AAQ?$AA6?$AA4?$AAD?$AA3?$AA4?$AA1?$AA?$AA@|
  002cc		 |$LN36@ReadRegist|
  002cc	00000000	 DCD         |??_C@_1O@MJNAIELA@?$AAL?$AAM?$AA8?$AAV?$AA3?$AA1?$AA?$AA@|
  002d0		 |$LN37@ReadRegist|
  002d0	00000000	 DCD         |??_C@_1BG@DDJDMFBH@?$AAL?$AAT?$AAM?$AA0?$AA4?$AAC?$AA3?$AA8?$AA0?$AAK?$AA?$AA@|
  002d4		 |$LN38@ReadRegist|
  002d4	00000000	 DCD         |??_C@_1LO@BAAOGPO@?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AAb@|
  002d8		 |$LN39@ReadRegist|
  002d8	00000000	 DCD         |??_C@_1CK@EIPIGAAA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAB?$AAl?$AAa?$AAn?$AAk?$AAi?$AAn?$AAg?$AA?$AA@|
  002dc		 |$LN40@ReadRegist|
  002dc	00000000	 DCD         |??_C@_1CM@MNHPDPDI@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAR?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@|
  002e0		 |$LN41@ReadRegist|
  002e0	00000000	 DCD         |bDoRotation|
  002e4		 |$LN42@ReadRegist|
  002e4	00000000	 DCD         |??_C@_1BI@GEDFANEH@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAT?$AAy?$AAp?$AAe?$AA?$AA@|
  002e8		 |$LN43@ReadRegist|
  002e8	00000000	 DCD         |??_C@_17JBHIEIFL@?$AAB?$AAp?$AAp?$AA?$AA@|
  002ec		 |$LN44@ReadRegist|
  002ec	00000000	 DCD         |??_C@_1BC@CHCDJFGK@?$AAC?$AAy?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@|
  002f0		 |$LN45@ReadRegist|
  002f0	00000000	 DCD         |??_C@_1BC@IJELAEPL@?$AAC?$AAx?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@|
  002f4		 |$LN46@ReadRegist|
  002f4	00000000	 DCD         |??_C@_1DM@NCJPFFII@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2?$AAP?$AAX?$AAA?$AA2?$AA7?$AAx?$AA?2?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@|
  002f8		 |$LN47@ReadRegist|
  002f8	00000000	 DCD         |DispDrvr_cxScreen|
  002fc		 |$LN48@ReadRegist|
  002fc	00000000	 DCD         |DispDrvr_cyScreen|
  00300		 |$LN49@ReadRegist|
  00300	00000000	 DCD         |bpp|
  00304		 |$LN50@ReadRegist|
  00304	00000000	 DCD         |__security_cookie|
  00308		 |$M43274|

			 ENDP  ; |ReadRegistryData|

	EXPORT	|ScrollBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T43306| DCD	|$LN8@ScrollBuff|
	DCD	0x40002f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ScrollBuffer| PROC

; 1040 : {

  00000		 |$LN8@ScrollBuff|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43303|
  00004	e1a04000	 mov         r4, r0

; 1041 :     EnterCriticalSection(&frameDescriptorMutex);

  00008	e59f00a0	 ldr         r0, [pc, #0xA0]
  0000c	eb000000	 bl          EnterCriticalSection

; 1042 : 
; 1043 :     // Set the physical address of the frame buffer for all three frame descriptors
; 1044 :     if (direction == 1) // scroll up

  00010	e3540001	 cmp         r4, #1
  00014	1a000010	 bne         |$LN2@ScrollBuff|

; 1045 :     {
; 1046 :         frameDescriptorCh0fd1->FSADR += DispDrvr_cdwStride << 2;

  00018	e59f0098	 ldr         r0, [pc, #0x98]
  0001c	e59fe090	 ldr         lr, [pc, #0x90]
  00020	e5901000	 ldr         r1, [r0]
  00024	e59e2000	 ldr         r2, [lr]
  00028	e5913004	 ldr         r3, [r1, #4]
  0002c	e0833102	 add         r3, r3, r2, lsl #2
  00030	e5813004	 str         r3, [r1, #4]

; 1047 :         frameDescriptorCh0fd2->FSADR += DispDrvr_cdwStride << 2;

  00034	e5901004	 ldr         r1, [r0, #4]
  00038	e59e2000	 ldr         r2, [lr]
  0003c	e5913004	 ldr         r3, [r1, #4]
  00040	e0833102	 add         r3, r3, r2, lsl #2
  00044	e5813004	 str         r3, [r1, #4]

; 1048 :         frameDescriptorCh1->FSADR    += DispDrvr_cdwStride << 2;

  00048	e5901008	 ldr         r1, [r0, #8]
  0004c	e59e2000	 ldr         r2, [lr]
  00050	e5913004	 ldr         r3, [r1, #4]
  00054	e0833102	 add         r3, r3, r2, lsl #2

; 1049 :     }
; 1050 :     else // scroll down

  00058	ea00000f	 b           |$LN5@ScrollBuff|
  0005c		 |$LN2@ScrollBuff|

; 1051 :     {
; 1052 :         frameDescriptorCh0fd1->FSADR -= DispDrvr_cdwStride << 2;

  0005c	e59fe054	 ldr         lr, [pc, #0x54]
  00060	e59f404c	 ldr         r4, [pc, #0x4C]
  00064	e59e1000	 ldr         r1, [lr]
  00068	e5942000	 ldr         r2, [r4]
  0006c	e5913004	 ldr         r3, [r1, #4]
  00070	e0433102	 sub         r3, r3, r2, lsl #2
  00074	e5813004	 str         r3, [r1, #4]

; 1053 :         frameDescriptorCh0fd2->FSADR -= DispDrvr_cdwStride << 2;

  00078	e59e1004	 ldr         r1, [lr, #4]
  0007c	e5942000	 ldr         r2, [r4]
  00080	e5913004	 ldr         r3, [r1, #4]
  00084	e0433102	 sub         r3, r3, r2, lsl #2
  00088	e5813004	 str         r3, [r1, #4]

; 1054 :         frameDescriptorCh1->FSADR    -= DispDrvr_cdwStride << 2;

  0008c	e59e1008	 ldr         r1, [lr, #8]
  00090	e5942000	 ldr         r2, [r4]
  00094	e5913004	 ldr         r3, [r1, #4]
  00098	e0433102	 sub         r3, r3, r2, lsl #2
  0009c		 |$LN5@ScrollBuff|

; 1055 :     }
; 1056 : 
; 1057 :     LeaveCriticalSection(&frameDescriptorMutex);

  0009c	e59f000c	 ldr         r0, [pc, #0xC]
  000a0	e5813004	 str         r3, [r1, #4]
  000a4	eb000000	 bl          LeaveCriticalSection

; 1058 : }

  000a8	e8bd4010	 ldmia       sp!, {r4, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN9@ScrollBuff|
  000b0		 |$LN10@ScrollBuff|
  000b0	00000000	 DCD         |frameDescriptorMutex|
  000b4		 |$LN11@ScrollBuff|
  000b4	00000000	 DCD         |DispDrvr_cdwStride|
  000b8		 |$LN12@ScrollBuff|
  000b8	00000000	 DCD         |frameDescriptorCh0fd1|
  000bc		 |$M43304|

			 ENDP  ; |ScrollBuffer|

	EXPORT	|MapVirtualAddress|
	EXPORT	|??_C@_0CB@CGKDKANF@DispDrvrInitialize?5?3?5v_pGPIORegs@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@MKNHKMEH@DispDrvrInitialize?5?3?5v_pClkRegs?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@BEOJHMNH@DispDrvrInitialize?5?3?5v_pLcdRegs?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@DGHPNJML@DispDrvrInitialize?5?3?5v_pOSTRegs?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@MDACKFDO@DispDrvrInitialize?5?3?5v_pI2CRegs?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@LOBFCJCF@DispDrvrInitialize?5?3?5v_pDMAC?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@OHAMICA@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@IELHMFCI@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	IMPORT	|VirtualSetAttributes|
	IMPORT	|VirtualAllocCopyPhysical|
	IMPORT	|VirtualCopy|
	IMPORT	|VirtualAlloc|
	IMPORT	|HalAllocateCommonBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T43335| DCD	|$LN35@MapVirtual|
	DCD	0x4000dd02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CB@CGKDKANF@DispDrvrInitialize?5?3?5v_pGPIORegs@| DCB "DispDrvrIn"
	DCB	"itialize : v_pGPIORegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@MKNHKMEH@DispDrvrInitialize?5?3?5v_pClkRegs?$AA@| DCB "DispDrv"
	DCB	"rInitialize : v_pClkRegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@BEOJHMNH@DispDrvrInitialize?5?3?5v_pLcdRegs?$AA@| DCB "DispDrv"
	DCB	"rInitialize : v_pLcdRegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@DGHPNJML@DispDrvrInitialize?5?3?5v_pOSTRegs?$AA@| DCB "DispDrv"
	DCB	"rInitialize : v_pOSTRegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@MDACKFDO@DispDrvrInitialize?5?3?5v_pI2CRegs?$AA@| DCB "DispDrv"
	DCB	"rInitialize : v_pI2CRegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@LOBFCJCF@DispDrvrInitialize?5?3?5v_pDMAC?$AA@| DCB "DispDrvrIn"
	DCB	"itialize : v_pDMAC", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@OHAMICA@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD@| DCB "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "C", 0x0, "A"
	DCB	0x0, "L", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, ":", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "a"
	DCB	0x0, "n", 0x0, "k", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "S"
	DCB	0x0, "D", 0x0, "R", 0x0, "A", 0x0, "M", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@IELHMFCI@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe@| DCB "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "C", 0x0, "A"
	DCB	0x0, "L", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, ":", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "S"
	DCB	0x0, "D", 0x0, "R", 0x0, "A", 0x0, "M", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |MapVirtualAddress| PROC

; 277  : {

  00000		 |$LN35@MapVirtual|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd02c	 sub         sp, sp, #0x2C
  00008		 |$M43332|

; 278  :     DMA_ADAPTER_OBJECT Adapter;
; 279  :     PHYSICAL_ADDRESS   PhysAddr;
; 280  : 
; 281  :     DMA_ADAPTER_OBJECT AdapterBlackScreen;
; 282  :     PHYSICAL_ADDRESS   PhysAddrBlackScreen;
; 283  : 
; 284  :     Adapter.ObjectSize    = sizeof (DMA_ADAPTER_OBJECT);

  00008	e3a0300c	 mov         r3, #0xC

; 285  :     Adapter.InterfaceType = Internal;

  0000c	e3a02000	 mov         r2, #0

; 286  :     Adapter.BusNumber     = 0;

  00010	e3a01000	 mov         r1, #0
  00014	e1cd31b4	 strh        r3, [sp, #0x14]
  00018	e58d2018	 str         r2, [sp, #0x18]
  0001c	e58d101c	 str         r1, [sp, #0x1C]

; 287  : 
; 288  :     g_DisplayBaseVirtual  = (DWORD)HalAllocateCommonBuffer(&Adapter, DISPLAY_BUFFER_SIZE, &PhysAddr, FALSE);

  00020	e3a03000	 mov         r3, #0
  00024	e28d2004	 add         r2, sp, #4
  00028	e3a0182b	 mov         r1, #0x2B, 16
  0002c	e28d0014	 add         r0, sp, #0x14
  00030	eb000000	 bl          HalAllocateCommonBuffer
  00034	e59f6334	 ldr         r6, [pc, #0x334]

; 289  :     g_DisplayBasePhysical = PhysAddr.LowPart;

  00038	e59f732c	 ldr         r7, [pc, #0x32C]
  0003c	e59d3004	 ldr         r3, [sp, #4]
  00040	e5860000	 str         r0, [r6]
  00044	e3500000	 cmp         r0, #0
  00048	e5873000	 str         r3, [r7]

; 290  : 
; 291  :     if (!g_DisplayBaseVirtual)

  0004c	1a000002	 bne         |$LN22@MapVirtual|
  00050		 |$LN32@MapVirtual|

; 292  :     {
; 293  :         Cleanup();

  00050	eb000000	 bl          Cleanup

; 294  :         return FALSE;

  00054	e3a00000	 mov         r0, #0
  00058	ea0000b5	 b           |$LN23@MapVirtual|
  0005c		 |$LN22@MapVirtual|

; 295  :     }
; 296  : 
; 297  :     // map shared virtual memory, and set the virtual ptr to that address rather than local process
; 298  :     // address; from this point on, all processes (including DDraw apps) will be able to access the
; 299  :     // display region using g_DisplayBaseVirtual
; 300  :     g_DisplayBaseVirtual = (DWORD)VirtualAlloc(NULL, DISPLAY_BUFFER_SIZE, MEM_RESERVE, PAGE_NOACCESS);

  0005c	e3a03001	 mov         r3, #1
  00060	e3a02a02	 mov         r2, #2, 20
  00064	e3a0182b	 mov         r1, #0x2B, 16
  00068	e3a00000	 mov         r0, #0
  0006c	eb000000	 bl          VirtualAlloc

; 301  : 
; 302  :     if(!VirtualCopy((LPVOID)g_DisplayBaseVirtual, (LPVOID)((unsigned long)g_DisplayBasePhysical >> 8), DISPLAY_BUFFER_SIZE, (PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL)))

  00070	e5973000	 ldr         r3, [r7]
  00074	e3a0ac06	 mov         r10, #6, 24
  00078	e1a0e000	 mov         lr, r0
  0007c	e1a01423	 mov         r1, r3, lsr #8
  00080	e38a3004	 orr         r3, r10, #4
  00084	e3a0282b	 mov         r2, #0x2B, 16
  00088	e586e000	 str         lr, [r6]
  0008c	eb000000	 bl          VirtualCopy
  00090	e3500000	 cmp         r0, #0

; 303  :     {
; 304  :         RETAILMSG(1,(TEXT("CRITICAL ERROR: display SDRAM region allocation failed")));

  00094	059f02cc	 ldreq       r0, [pc, #0x2CC]
  00098	0b000000	 bleq        NKDbgPrintfW

; 305  :     }
; 306  : 
; 307  :     if(g_fEnableDMASourceSwap)

  0009c	e59f52c0	 ldr         r5, [pc, #0x2C0]
  000a0	e59f82b8	 ldr         r8, [pc, #0x2B8]
  000a4	e595301c	 ldr         r3, [r5, #0x1C]
  000a8	e3530000	 cmp         r3, #0
  000ac	0a00001f	 beq         |$LN18@MapVirtual|

; 308  :     {
; 309  :         AdapterBlackScreen.ObjectSize    = sizeof (DMA_ADAPTER_OBJECT);

  000b0	e3a0300c	 mov         r3, #0xC

; 310  :         AdapterBlackScreen.InterfaceType = Internal;

  000b4	e3a02000	 mov         r2, #0

; 311  :         AdapterBlackScreen.BusNumber     = 0;

  000b8	e3a01000	 mov         r1, #0
  000bc	e1cd32b0	 strh        r3, [sp, #0x20]
  000c0	e58d2024	 str         r2, [sp, #0x24]
  000c4	e58d1028	 str         r1, [sp, #0x28]

; 312  : 
; 313  :         g_DisplayBlackBaseVirtual = (DWORD)HalAllocateCommonBuffer(&AdapterBlackScreen, FRAME_BUFFER_SIZE, &PhysAddrBlackScreen, FALSE);

  000c8	e3a03000	 mov         r3, #0
  000cc	e28d200c	 add         r2, sp, #0xC
  000d0	e3a01a96	 mov         r1, #0x96, 20
  000d4	e28d0020	 add         r0, sp, #0x20
  000d8	eb000000	 bl          HalAllocateCommonBuffer
  000dc	e59f4278	 ldr         r4, [pc, #0x278]

; 314  :         g_DisplayBlackBasePhysical = PhysAddrBlackScreen.LowPart;

  000e0	e59d300c	 ldr         r3, [sp, #0xC]
  000e4	e3500000	 cmp         r0, #0
  000e8	e5840000	 str         r0, [r4]
  000ec	e5883000	 str         r3, [r8]

; 315  : 
; 316  :         if (!g_DisplayBlackBaseVirtual)
; 317  :         {
; 318  :             Cleanup();
; 319  :             return FALSE;

  000f0	0affffd6	 beq         |$LN32@MapVirtual|

; 320  :         }
; 321  : 
; 322  :         g_DisplayBlackBaseVirtual = (DWORD)VirtualAlloc(NULL, FRAME_BUFFER_SIZE, MEM_RESERVE, PAGE_NOACCESS);

  000f4	e3a03001	 mov         r3, #1
  000f8	e3a02a02	 mov         r2, #2, 20
  000fc	e3a01a96	 mov         r1, #0x96, 20
  00100	e3a00000	 mov         r0, #0
  00104	eb000000	 bl          VirtualAlloc

; 323  : 
; 324  :         if(!VirtualCopy((LPVOID)g_DisplayBlackBaseVirtual, (LPVOID)((unsigned long)g_DisplayBlackBasePhysical >> 8), FRAME_BUFFER_SIZE, (PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL)))

  00108	e5982000	 ldr         r2, [r8]
  0010c	e1a0e000	 mov         lr, r0
  00110	e38a3004	 orr         r3, r10, #4
  00114	e1a01422	 mov         r1, r2, lsr #8
  00118	e3a02a96	 mov         r2, #0x96, 20
  0011c	e584e000	 str         lr, [r4]
  00120	eb000000	 bl          VirtualCopy
  00124	e3500000	 cmp         r0, #0

; 325  :         {
; 326  :             RETAILMSG(1,(TEXT("CRITICAL ERROR: blank display SDRAM region allocation failed")));

  00128	059f0228	 ldreq       r0, [pc, #0x228]
  0012c	0b000000	 bleq        NKDbgPrintfW
  00130		 |$LN18@MapVirtual|

; 327  :         }
; 328  :     }
; 329  : 
; 330  : 
; 331  :     v_pDMAC = (P_XLLP_DMAC_T)VirtualAllocCopyPhysical(sizeof(XLLP_DMAC_T),"DispDrvrInitialize : v_pDMAC",(PVOID)(BULVERDE_BASE_REG_PA_DMAC));

  00130	e59f121c	 ldr         r1, [pc, #0x21C]
  00134	e3a03601	 mov         r3, #1, 12
  00138	e3830020	 orr         r0, r3, #0x20
  0013c	e3a02101	 mov         r2, #1, 2
  00140	eb000000	 bl          VirtualAllocCopyPhysical
  00144	e3500000	 cmp         r0, #0
  00148	e5850060	 str         r0, [r5, #0x60]

; 332  :     if (!v_pDMAC)
; 333  :     {
; 334  :         Cleanup();
; 335  :         return FALSE;

  0014c	0affffbf	 beq         |$LN32@MapVirtual|

; 336  :     }
; 337  : 
; 338  :     v_pI2C = (volatile unsigned int *)VirtualAllocCopyPhysical(sizeof(BULVERDE_IICBUS_REG),"DispDrvrInitialize : v_pI2CRegs",(PVOID)(BULVERDE_BASE_REG_PA_I2C));

  00150	e59f11f8	 ldr         r1, [pc, #0x1F8]
  00154	e3a03101	 mov         r3, #1, 2
  00158	e3832603	 orr         r2, r3, #3, 12
  0015c	e3a0002c	 mov         r0, #0x2C
  00160	eb000000	 bl          VirtualAllocCopyPhysical
  00164	e3500000	 cmp         r0, #0
  00168	e585005c	 str         r0, [r5, #0x5C]

; 339  :     if (!v_pI2C)
; 340  :     {
; 341  :         Cleanup();
; 342  :         return FALSE;

  0016c	0affffb7	 beq         |$LN32@MapVirtual|

; 343  :     }
; 344  : 
; 345  :     v_pOSTRegs = (volatile unsigned int *)VirtualAllocCopyPhysical(sizeof(XLLP_OST_T),"DispDrvrInitialize : v_pOSTRegs",(PVOID)(BULVERDE_BASE_REG_PA_OST));

  00170	e59f11d4	 ldr         r1, [pc, #0x1D4]
  00174	e3a03101	 mov         r3, #1, 2
  00178	e383260a	 orr         r2, r3, #0xA, 12
  0017c	e3a000e0	 mov         r0, #0xE0
  00180	eb000000	 bl          VirtualAllocCopyPhysical
  00184	e3500000	 cmp         r0, #0
  00188	e5850054	 str         r0, [r5, #0x54]

; 346  :     if (!v_pOSTRegs)
; 347  :     {
; 348  :         Cleanup();
; 349  :         return FALSE;

  0018c	0affffaf	 beq         |$LN32@MapVirtual|

; 350  :     }
; 351  : 
; 352  :     v_pLcdRegs = (volatile LCDRegs *)VirtualAllocCopyPhysical(sizeof(LCDRegs),"DispDrvrInitialize : v_pLcdRegs",(PVOID)(BULVERDE_BASE_REG_PA_LCD));

  00190	e59f11b0	 ldr         r1, [pc, #0x1B0]
  00194	e3a02311	 mov         r2, #0x11, 6
  00198	e3a00e27	 mov         r0, #0x27, 28
  0019c	eb000000	 bl          VirtualAllocCopyPhysical
  001a0	e3500000	 cmp         r0, #0
  001a4	e5850020	 str         r0, [r5, #0x20]

; 353  :     if (!v_pLcdRegs)
; 354  :     {
; 355  :         Cleanup();
; 356  :         return FALSE;

  001a8	0affffa8	 beq         |$LN32@MapVirtual|

; 357  :     }
; 358  : 
; 359  :     v_pClkRegs = (volatile XLLP_CLKMGR_T *)VirtualAllocCopyPhysical(sizeof(XLLP_CLKMGR_T),"DispDrvrInitialize : v_pClkRegs",(PVOID)(BULVERDE_BASE_REG_PA_CLKMGR));

  001ac	e59f1190	 ldr         r1, [pc, #0x190]
  001b0	e3a03441	 mov         r3, #0x41, 8
  001b4	e3832603	 orr         r2, r3, #3, 12
  001b8	e3a00010	 mov         r0, #0x10
  001bc	eb000000	 bl          VirtualAllocCopyPhysical
  001c0	e3500000	 cmp         r0, #0
  001c4	e5850024	 str         r0, [r5, #0x24]

; 360  :     if (!v_pClkRegs)
; 361  :     {
; 362  :         Cleanup();
; 363  :         return FALSE;

  001c8	0affffa0	 beq         |$LN32@MapVirtual|

; 364  :     }
; 365  : 
; 366  :     v_pGPIORegs = (volatile XLLP_GPIO_T *)VirtualAllocCopyPhysical(sizeof(XLLP_GPIO_T),"DispDrvrInitialize : v_pGPIORegs",(PVOID)(BULVERDE_BASE_REG_PA_GPIO));

  001cc	e59f116c	 ldr         r1, [pc, #0x16C]
  001d0	e3a03101	 mov         r3, #1, 2
  001d4	e383260e	 orr         r2, r3, #0xE, 12
  001d8	e3a00f53	 mov         r0, #0x53, 30
  001dc	eb000000	 bl          VirtualAllocCopyPhysical
  001e0	e3500000	 cmp         r0, #0
  001e4	e5850028	 str         r0, [r5, #0x28]

; 367  :     if (!v_pGPIORegs)
; 368  :     {
; 369  :         Cleanup();
; 370  :         return FALSE;

  001e8	0affff98	 beq         |$LN32@MapVirtual|

; 371  :     }
; 372  : 
; 373  :     frameDescriptorCh0fd1  = (volatile LCD_FRAME_DESCRIPTOR *)(DMA_CHANNEL_0_FRAME_DESCRIPTOR_BASE_VIRTUAL);

  001ec	e5964000	 ldr         r4, [r6]

; 374  :     frameDescriptorCh0fd2  = (volatile LCD_FRAME_DESCRIPTOR *)(DMA_CHANNEL_0_ALT_FRAME_DESCRIPTOR_BASE_VIRTUAL);
; 375  :     frameDescriptorCh1     = (volatile LCD_FRAME_DESCRIPTOR *)(DMA_CHANNEL_1_FRAME_DESCRIPTOR_BASE_VIRTUAL);
; 376  :     frameDescriptorPalette = (volatile LCD_FRAME_DESCRIPTOR *)(PALETTE_FRAME_DESCRIPTOR_BASE_VIRTUAL);
; 377  :     v_pPaletteBuffer       = (volatile LCD_PALETTE *)(PALETTE_BUFFER_BASE_VIRTUAL);
; 378  : 
; 379  :     // Enter into Kernel mode to enable us to modify the section descriptor
; 380  :     // so that we may set the bufferable bit.  This enables write coalescing
; 381  :     // for frame buffer writes when using the section mapped address.
; 382  :     //
; 383  :     // GAPI uses the section mapped address always.
; 384  : 
; 385  : 
; 386  :     // Now configure the frame buffer's section descriptor.
; 387  :     // The function GetDescriptorAddress shows how to obtain the correct descriptor address.
; 388  :     // This descriptor is one of two descriptors that map the the frame buffer.
; 389  :     // The first descriptor found maps the cached virtual address, while the second
; 390  :     // descriptor found maps the uncached virtual address.  We want to modify the
; 391  :     // second descriptor, that which maps the uncached virtual address since the uncached virtual
; 392  :     // address is the address we've chosen to use throughout the codebase.
; 393  :     //
; 394  :     // NOTE:
; 395  :     // The section descriptor covers a 1MB section.  If the frame buffer ever exceeds 1MB
; 396  :     // in size, you'll need to modify additional section descriptors.
; 397  :     //
; 398  : 
; 399  :     // DDraw requires that the frame buffer pointer be in the shared memory space so
; 400  :     // is can be shared between processes.
; 401  :     {
; 402  :         PVOID  pPhysAddr;
; 403  :         size_t offset;
; 404  :         size_t size;
; 405  : 
; 406  :         pPhysAddr  = (PVOID)(FRAME_BUFFER_0_BASE_PHYSICAL);

  001f0	e597e000	 ldr         lr, [r7]

; 407  :         size       = frameBufferSize * NUM_FRAME_BUFFERS;
; 408  :         offset     = (unsigned)pPhysAddr & (0x1000 - 1);

  001f4	e3a03c0f	 mov         r3, #0xF, 24
  001f8	e2842020	 add         r2, r4, #0x20
  001fc	e28eed12	 add         lr, lr, #0x12, 26
  00200	e38390ff	 orr         r9, r3, #0xFF
  00204	e2843040	 add         r3, r4, #0x40
  00208	e5852034	 str         r2, [r5, #0x34]
  0020c	e5952008	 ldr         r2, [r5, #8]
  00210	e01e6009	 ands        r6, lr, r9
  00214	e5853030	 str         r3, [r5, #0x30]

; 409  :         size      += (offset ? 0x1000 : 0);

  00218	13a03a01	 movne       r3, #1, 20
  0021c	03a03000	 moveq       r3, #0
  00220	e2841060	 add         r1, r4, #0x60
  00224	e2840080	 add         r0, r4, #0x80
  00228	e585402c	 str         r4, [r5, #0x2C]
  0022c	e0824003	 add         r4, r2, r3

; 410  :         pPhysAddr  = (PVOID)((unsigned)pPhysAddr - offset);
; 411  : 
; 412  :         if (size >= 1024*1024*2)

  00230	e3540602	 cmp         r4, #2, 12
  00234	e5851038	 str         r1, [r5, #0x38]

; 413  :         {
; 414  :             gFrameBuffer = (PBYTE)VirtualAlloc(NULL, size, MEM_RESERVE, PAGE_NOACCESS);

  00238	21a01004	 movcs       r1, r4
  0023c	e585004c	 str         r0, [r5, #0x4C]

; 415  :         }
; 416  :         else
; 417  :         {
; 418  :             gFrameBuffer = (PBYTE)VirtualAlloc(NULL, 1024*1024*2, MEM_RESERVE, PAGE_NOACCESS);

  00240	33a01602	 movcc       r1, #2, 12
  00244	e3a03001	 mov         r3, #1
  00248	e3a02a02	 mov         r2, #2, 20
  0024c	e3a00000	 mov         r0, #0
  00250	e04e7006	 sub         r7, lr, r6
  00254	eb000000	 bl          VirtualAlloc

; 419  :         }
; 420  : 
; 421  :         if (!VirtualCopy(gFrameBuffer, (LPVOID)((unsigned long)pPhysAddr >> 8), size, (PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL)))

  00258	e38a3004	 orr         r3, r10, #4
  0025c	e1a02004	 mov         r2, r4
  00260	e1a01427	 mov         r1, r7, lsr #8
  00264	e5850010	 str         r0, [r5, #0x10]
  00268	eb000000	 bl          VirtualCopy
  0026c	e3500000	 cmp         r0, #0

; 422  :         {
; 423  :             gFrameBuffer = NULL;

  00270	03a03000	 moveq       r3, #0
  00274	05853010	 streq       r3, [r5, #0x10]
  00278	0affff74	 beq         |$LN32@MapVirtual|

; 424  :         }
; 425  :         else
; 426  :         {
; 427  :             gFrameBuffer += offset;

  0027c	e5953010	 ldr         r3, [r5, #0x10]
  00280	e0930006	 adds        r0, r3, r6
  00284	e5850010	 str         r0, [r5, #0x10]

; 428  :         }
; 429  :     }
; 430  : 
; 431  :     if (!gFrameBuffer)
; 432  :     {
; 433  :         Cleanup();
; 434  :         return FALSE;

  00288	0affff70	 beq         |$LN32@MapVirtual|

; 435  :     }
; 436  : 
; 437  :     if (bDoRotation)

  0028c	e5953000	 ldr         r3, [r5]

; 438  :     {
; 439  :         // if rotating the display, the actual frame buffer should be configured as bufferable for max write performance into the frame buffer.
; 440  :         VirtualSetAttributes(gFrameBuffer, frameBufferSize*NUM_FRAME_BUFFERS, 4, 4, NULL);

  00290	e5951008	 ldr         r1, [r5, #8]
  00294	e3a0e000	 mov         lr, #0
  00298	e3530000	 cmp         r3, #0
  0029c	0a000004	 beq         |$LN6@MapVirtual|
  002a0	e3a03004	 mov         r3, #4
  002a4	e3a02004	 mov         r2, #4
  002a8	e58de000	 str         lr, [sp]
  002ac	eb000000	 bl          VirtualSetAttributes

; 441  :     }
; 442  :     else

  002b0	ea000003	 b           |$LN5@MapVirtual|
  002b4		 |$LN6@MapVirtual|

; 443  :     {
; 444  :         // if not rotating the dispay, we can draw directly into the frame buffer, and use write-through cache mode to improve frame buffer throughput
; 445  :         VirtualSetAttributes(gFrameBuffer, frameBufferSize*NUM_FRAME_BUFFERS, 8, 8, NULL);

  002b4	e3a03008	 mov         r3, #8
  002b8	e3a02008	 mov         r2, #8
  002bc	e58de000	 str         lr, [sp]
  002c0	eb000000	 bl          VirtualSetAttributes
  002c4		 |$LN5@MapVirtual|

; 446  :     }
; 447  : 
; 448  :     if (g_fEnableDMASourceSwap) {

  002c4	e595301c	 ldr         r3, [r5, #0x1C]
  002c8	e3530000	 cmp         r3, #0
  002cc	0a000017	 beq         |$LN1@MapVirtual|

; 449  :         PVOID  pPhysAddr;
; 450  :         size_t offset;
; 451  :         size_t size;
; 452  : 
; 453  :         pPhysAddr  = (PVOID)(g_DisplayBlackBasePhysical);

  002d0	e5987000	 ldr         r7, [r8]

; 454  :         size       = FRAME_BUFFER_SIZE;
; 455  :         offset     = (unsigned)pPhysAddr & (0x1000 - 1);
; 456  :         size      += (offset ? 0x1000 : 0);
; 457  :         pPhysAddr  = (PVOID)((unsigned)pPhysAddr - offset);
; 458  : 
; 459  :         gBlackFrameBuffer = (PBYTE)VirtualAlloc(NULL, size, MEM_RESERVE, PAGE_NOACCESS);

  002d4	e3a03001	 mov         r3, #1
  002d8	e3a02a02	 mov         r2, #2, 20
  002dc	e0176009	 ands        r6, r7, r9
  002e0	13a04a01	 movne       r4, #1, 20
  002e4	03a04000	 moveq       r4, #0
  002e8	e2841a96	 add         r1, r4, #0x96, 20
  002ec	e3a00000	 mov         r0, #0
  002f0	eb000000	 bl          VirtualAlloc
  002f4	e0471006	 sub         r1, r7, r6
  002f8	e1a0e000	 mov         lr, r0

; 460  : 
; 461  :         if (!VirtualCopy(gBlackFrameBuffer, (LPVOID)((unsigned long)pPhysAddr >> 8), size, (PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL)))

  002fc	e1a01421	 mov         r1, r1, lsr #8
  00300	e38a3004	 orr         r3, r10, #4
  00304	e2842a96	 add         r2, r4, #0x96, 20
  00308	e585e014	 str         lr, [r5, #0x14]
  0030c	eb000000	 bl          VirtualCopy
  00310	e3500000	 cmp         r0, #0

; 462  :         {
; 463  :             gBlackFrameBuffer = NULL;

  00314	03a03000	 moveq       r3, #0
  00318	05853014	 streq       r3, [r5, #0x14]
  0031c	0affff4b	 beq         |$LN32@MapVirtual|

; 464  :         }
; 465  :         else
; 466  :         {
; 467  :             gBlackFrameBuffer += offset;

  00320	e5953014	 ldr         r3, [r5, #0x14]
  00324	e0933006	 adds        r3, r3, r6
  00328	e5853014	 str         r3, [r5, #0x14]

; 468  :         }
; 469  : 
; 470  :         if(!gBlackFrameBuffer) {
; 471  :             Cleanup();
; 472  :             return FALSE;

  0032c	0affff47	 beq         |$LN32@MapVirtual|
  00330		 |$LN1@MapVirtual|

; 473  :         }
; 474  :     }
; 475  : 
; 476  :     return TRUE;

  00330	e3a00001	 mov         r0, #1
  00334		 |$LN23@MapVirtual|

; 477  : }

  00334	e28dd02c	 add         sp, sp, #0x2C
  00338	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  0033c	e12fff1e	 bx          lr
  00340		 |$LN36@MapVirtual|
  00340		 |$LN37@MapVirtual|
  00340	00000000	 DCD         |??_C@_0CB@CGKDKANF@DispDrvrInitialize?5?3?5v_pGPIORegs@|
  00344		 |$LN38@MapVirtual|
  00344	00000000	 DCD         |??_C@_0CA@MKNHKMEH@DispDrvrInitialize?5?3?5v_pClkRegs?$AA@|
  00348		 |$LN39@MapVirtual|
  00348	00000000	 DCD         |??_C@_0CA@BEOJHMNH@DispDrvrInitialize?5?3?5v_pLcdRegs?$AA@|
  0034c		 |$LN40@MapVirtual|
  0034c	00000000	 DCD         |??_C@_0CA@DGHPNJML@DispDrvrInitialize?5?3?5v_pOSTRegs?$AA@|
  00350		 |$LN41@MapVirtual|
  00350	00000000	 DCD         |??_C@_0CA@MDACKFDO@DispDrvrInitialize?5?3?5v_pI2CRegs?$AA@|
  00354		 |$LN42@MapVirtual|
  00354	00000000	 DCD         |??_C@_0BN@LOBFCJCF@DispDrvrInitialize?5?3?5v_pDMAC?$AA@|
  00358		 |$LN43@MapVirtual|
  00358	00000000	 DCD         |??_C@_1HK@OHAMICA@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD@|
  0035c		 |$LN44@MapVirtual|
  0035c	00000000	 DCD         |g_DisplayBlackBaseVirtual|
  00360		 |$LN45@MapVirtual|
  00360	00000000	 DCD         |g_DisplayBlackBasePhysical|
  00364		 |$LN46@MapVirtual|
  00364	00000000	 DCD         |bDoRotation|
  00368		 |$LN47@MapVirtual|
  00368	00000000	 DCD         |??_C@_1GO@IELHMFCI@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe@|
  0036c		 |$LN48@MapVirtual|
  0036c	00000000	 DCD         |g_DisplayBasePhysical|
  00370		 |$LN49@MapVirtual|
  00370	00000000	 DCD         |g_DisplayBaseVirtual|
  00374		 |$M43333|

			 ENDP  ; |MapVirtualAddress|

	EXPORT	|DispDrvrInitialize|
	EXPORT	|??_C@_1FC@NEEFFAOB@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo@| [ DATA ] ; `string'
	IMPORT	|CreateEventW|
	IMPORT	|XllpI2cInit|
	IMPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T43356| DCD	|$LN7@DispDrvrIn|
	DCD	0x40007001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@NEEFFAOB@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrInitialize| PROC

; 195  : {

  00000		 |$LN7@DispDrvrIn|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M43353|

; 196  :     // Read display driver configuration from system registry
; 197  :     ReadRegistryData();

  00004	eb000000	 bl          ReadRegistryData

; 198  : 
; 199  :     frameBufferSize = bpp / 8 * DispDrvr_cxScreen * DispDrvr_cyScreen;

  00008	e59f31ac	 ldr         r3, [pc, #0x1AC]
  0000c	e59f61a4	 ldr         r6, [pc, #0x1A4]
  00010	e59f419c	 ldr         r4, [pc, #0x19C]
  00014	e5933000	 ldr         r3, [r3]
  00018	e5962000	 ldr         r2, [r6]
  0001c	e5941000	 ldr         r1, [r4]
  00020	e1a031a3	 mov         r3, r3, lsr #3
  00024	e0020293	 mul         r2, r3, r2
  00028	e59f5180	 ldr         r5, [pc, #0x180]
  0002c	e0030192	 mul         r3, r2, r1
  00030	e5853004	 str         r3, [r5, #4]

; 200  : 
; 201  :     // Map registers, the frame buffer, and frame descriptors from Kernel mode virtual address
; 202  :     // into our user mode virtual address space
; 203  :     if (!MapVirtualAddress())

  00034	eb000000	 bl          MapVirtualAddress
  00038	e3500000	 cmp         r0, #0
  0003c	0a000052	 beq         |$LN3@DispDrvrIn|

; 204  :     {
; 205  :         return;
; 206  :     }
; 207  : 
; 208  :     // Initialize for use with Suspend resume macros
; 209  :     XllpOstDelayMilliSeconds((XLLP_OST_T *)v_pOSTRegs, 1);

  00040	e5950050	 ldr         r0, [r5, #0x50]
  00044	e3a01001	 mov         r1, #1
  00048	eb000000	 bl          XllpOstDelayMilliSeconds

; 210  : 
; 211  :     XllpLCD.GPIO = (XLLP_VUINT32_T *) v_pGPIORegs;
; 212  :     XllpLCD.CLKMan = (XLLP_VUINT32_T *) v_pClkRegs;
; 213  :     XllpLCD.LCDC = (XLLP_VUINT32_T *) v_pLcdRegs;
; 214  :     XllpLCD.DisplayType = nDisplayType;

  0004c	e59f3158	 ldr         r3, [pc, #0x158]
  00050	e5952024	 ldr         r2, [r5, #0x24]
  00054	e59f714c	 ldr         r7, [pc, #0x14C]
  00058	e5951020	 ldr         r1, [r5, #0x20]
  0005c	e595001c	 ldr         r0, [r5, #0x1C]
  00060	e5933000	 ldr         r3, [r3]

; 215  :     XllpLCD.FrameBufferWidth = DispDrvr_cxScreen;
; 216  :     XllpLCD.FrameBufferHeight = DispDrvr_cyScreen;
; 217  :     XllpLCD.BPP = BPP_16;
; 218  :     XllpLCD.PixelDataFormat = PDFOR_00; //with overlays enabled use PDFOR_11 for 16bpp
; 219  :     XllpLCD.CurrentPage = 0;
; 220  :     XllpLCD._FRAME_BUFFER_BASE_PHYSICAL = FRAME_BUFFER_BASE_PHYSICAL;

  00064	e5944000	 ldr         r4, [r4]
  00068	e5872000	 str         r2, [r7]
  0006c	e5962000	 ldr         r2, [r6]
  00070	e5871004	 str         r1, [r7, #4]
  00074	e5870008	 str         r0, [r7, #8]
  00078	e5873014	 str         r3, [r7, #0x14]
  0007c	e59fe120	 ldr         lr, [pc, #0x120]
  00080	e5874018	 str         r4, [r7, #0x18]
  00084	e3a03010	 mov         r3, #0x10
  00088	e587201c	 str         r2, [r7, #0x1C]
  0008c	e5873028	 str         r3, [r7, #0x28]
  00090	e3a03000	 mov         r3, #0
  00094	e59e1000	 ldr         r1, [lr]
  00098	e587302c	 str         r3, [r7, #0x2C]
  0009c	e3a03000	 mov         r3, #0
  000a0	e5873030	 str         r3, [r7, #0x30]
  000a4	e2813d12	 add         r3, r1, #0x12, 26
  000a8	e5873034	 str         r3, [r7, #0x34]

; 221  :     XllpLCD._PALETTE_BUFFER_BASE_PHYSICAL = PALETTE_BUFFER_BASE_PHYSICAL;

  000ac	e2813080	 add         r3, r1, #0x80
  000b0	e5873038	 str         r3, [r7, #0x38]

; 222  :     XllpLCD._DMA_CHANNEL_0_FRAME_DESCRIPTOR_BASE_PHYSICAL = DMA_CHANNEL_0_FRAME_DESCRIPTOR_BASE_PHYSICAL;
; 223  :     XllpLCD._DMA_CHANNEL_1_FRAME_DESCRIPTOR_BASE_PHYSICAL = DMA_CHANNEL_1_FRAME_DESCRIPTOR_BASE_PHYSICAL;

  000b4	e2813020	 add         r3, r1, #0x20
  000b8	e587104c	 str         r1, [r7, #0x4C]

; 224  :     XllpLCD._DMA_CHANNEL_0_ALT_FRAME_DESCRIPTOR_BASE_PHYSICAL = DMA_CHANNEL_0_ALT_FRAME_DESCRIPTOR_BASE_PHYSICAL;
; 225  :     XllpLCD._PALETTE_FRAME_DESCRIPTOR_BASE_PHYSICAL = PALETTE_FRAME_DESCRIPTOR_BASE_PHYSICAL;
; 226  :     XllpLCD.frameDescriptorCh0fd1 = frameDescriptorCh0fd1;

  000bc	e5873050	 str         r3, [r7, #0x50]
  000c0	e2813040	 add         r3, r1, #0x40
  000c4	e595e028	 ldr         lr, [r5, #0x28]

; 227  :     XllpLCD.frameDescriptorCh0fd2 = frameDescriptorCh0fd2;

  000c8	e595002c	 ldr         r0, [r5, #0x2C]
  000cc	e5873054	 str         r3, [r7, #0x54]
  000d0	e2813060	 add         r3, r1, #0x60

; 228  :     XllpLCD.frameDescriptorCh1 = frameDescriptorCh1;

  000d4	e5951030	 ldr         r1, [r5, #0x30]

; 229  :     XllpLCD.frameDescriptorPalette = frameDescriptorPalette;

  000d8	e5952034	 ldr         r2, [r5, #0x34]
  000dc	e5873058	 str         r3, [r7, #0x58]

; 230  :     XllpLCD.frameDescriptorTemp = frameDescriptorTemp;

  000e0	e5953038	 ldr         r3, [r5, #0x38]
  000e4	e587e068	 str         lr, [r7, #0x68]
  000e8	e587006c	 str         r0, [r7, #0x6C]

; 231  : 
; 232  :     InitializeCriticalSection(&displayMutex);

  000ec	e59f00ac	 ldr         r0, [pc, #0xAC]
  000f0	e5871070	 str         r1, [r7, #0x70]
  000f4	e5872074	 str         r2, [r7, #0x74]
  000f8	e5873078	 str         r3, [r7, #0x78]
  000fc	eb000000	 bl          InitializeCriticalSection

; 233  :     InitializeCriticalSection(&frameDescriptorMutex);

  00100	e59f0094	 ldr         r0, [pc, #0x94]
  00104	eb000000	 bl          InitializeCriticalSection

; 234  : 
; 235  :     // Initialize Cursor
; 236  :     InitCursor();

  00108	eb000000	 bl          InitCursor

; 237  : 
; 238  :     ClearFrameBuffer((unsigned *)gFrameBuffer + (activeFrameBuffer * frameBufferSize), TRUE);

  0010c	e595e000	 ldr         lr, [r5]
  00110	e5953004	 ldr         r3, [r5, #4]
  00114	e595200c	 ldr         r2, [r5, #0xC]
  00118	e3a01001	 mov         r1, #1
  0011c	e003039e	 mul         r3, lr, r3
  00120	e0820103	 add         r0, r2, r3, lsl #2
  00124	eb000000	 bl          ClearFrameBuffer

; 239  : 
; 240  :     if( g_fEnableDMASourceSwap )

  00128	e5953018	 ldr         r3, [r5, #0x18]
  0012c	e3530000	 cmp         r3, #0

; 241  :     {
; 242  :         ClearFrameBuffer((unsigned *)gBlackFrameBuffer, FALSE);

  00130	15950010	 ldrne       r0, [r5, #0x10]
  00134	13a01000	 movne       r1, #0
  00138	1b000000	 blne        ClearFrameBuffer

; 243  :     }
; 244  : 
; 245  :     // Initialize the LCD Controller and Board Control Register
; 246  :     XllpLCDInit(&XllpLCD);

  0013c	e1a00007	 mov         r0, r7
  00140	eb000000	 bl          XllpLCDInit

; 247  : 
; 248  : 
; 249  :     //InitRegs((XLLP_OST_T *)v_pOSTRegs, (P_XLLP_I2C_T)v_pI2C);
; 250  : 
; 251  :     XllpI2cInit((P_XLLP_I2C_T)v_pI2C, (P_XLLP_GPIO_T) v_pGPIORegs, (P_XLLP_CLKMGR_T) v_pClkRegs, (XLLP_UINT32_T) 0);

  00144	e5952020	 ldr         r2, [r5, #0x20]
  00148	e5951024	 ldr         r1, [r5, #0x24]
  0014c	e5950058	 ldr         r0, [r5, #0x58]
  00150	e3a03000	 mov         r3, #0
  00154	eb000000	 bl          XllpI2cInit

; 252  : 
; 253  :     pOSCR = v_pOSTRegs + 4;

  00158	e5951050	 ldr         r1, [r5, #0x50]

; 254  : 
; 255  :     // Use this event to signal the IST that we now know the dynamically assigned DMA channel
; 256  :     // And with that information, we know which event to wait on for the interrupt.
; 257  :     hIntEventKnown = CreateEvent(NULL,FALSE,FALSE,NULL);

  0015c	e3a03000	 mov         r3, #0
  00160	e3a02000	 mov         r2, #0
  00164	e2811010	 add         r1, r1, #0x10
  00168	e585104c	 str         r1, [r5, #0x4C]
  0016c	e3a01000	 mov         r1, #0
  00170	e3a00000	 mov         r0, #0
  00174	eb000000	 bl          CreateEventW
  00178	e59f3018	 ldr         r3, [pc, #0x18]
  0017c	e1a02000	 mov         r2, r0

; 258  : 
; 259  : 
; 260  :     RETAILMSG(1,(TEXT("Display Driver Initialization Complete\r\n")));

  00180	e59f000c	 ldr         r0, [pc, #0xC]
  00184	e5832000	 str         r2, [r3]
  00188	eb000000	 bl          NKDbgPrintfW
  0018c		 |$LN3@DispDrvrIn|

; 261  : 
; 262  :     return;
; 263  : }

  0018c	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00190	e12fff1e	 bx          lr
  00194		 |$LN8@DispDrvrIn|
  00194		 |$LN9@DispDrvrIn|
  00194	00000000	 DCD         |??_C@_1FC@NEEFFAOB@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo@|
  00198		 |$LN10@DispDrvrIn|
  00198	00000000	 DCD         |hIntEventKnown|
  0019c		 |$LN11@DispDrvrIn|
  0019c	00000000	 DCD         |frameDescriptorMutex|
  001a0		 |$LN12@DispDrvrIn|
  001a0	00000000	 DCD         |displayMutex|
  001a4		 |$LN13@DispDrvrIn|
  001a4	00000000	 DCD         |g_DisplayBasePhysical|
  001a8		 |$LN14@DispDrvrIn|
  001a8	00000000	 DCD         |XllpLCD|
  001ac		 |$LN15@DispDrvrIn|
  001ac	00000000	 DCD         |nDisplayType|
  001b0		 |$LN16@DispDrvrIn|
  001b0	00000000	 DCD         |activeFrameBuffer|
  001b4		 |$LN17@DispDrvrIn|
  001b4	00000000	 DCD         |DispDrvr_cxScreen|
  001b8		 |$LN18@DispDrvrIn|
  001b8	00000000	 DCD         |DispDrvr_cyScreen|
  001bc		 |$LN19@DispDrvrIn|
  001bc	00000000	 DCD         |bpp|
  001c0		 |$M43354|

			 ENDP  ; |DispDrvrInitialize|

	END
