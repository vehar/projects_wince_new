; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\DISPLAY\PXA27X_LCD\sa2video.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?_rgbIdentity@@3PAUtagPALETTEENTRY@@A| [ DATA ] ; _rgbIdentity
	EXPORT	|?v_pLcdRegs@@3PCULCDRegs@@C| [ DATA ]	; v_pLcdRegs
	EXPORT	|?v_pGPIORegs@@3PCUXLLP_GPIO_T@@C| [ DATA ] ; v_pGPIORegs
	EXPORT	|?bSuspended@@3HA| [ DATA ]		; bSuspended
	EXPORT	|?DisplayDrvPowerCaps@@3U_POWER_CAPABILITIES@@A| [ DATA ] ; DisplayDrvPowerCaps
	EXPORT	|?pGPE@@3PAVDDGPE@@A| [ DATA ]		; pGPE
	EXPORT	|?BitMasks@@3PAKA| [ DATA ]		; BitMasks

  00000			 AREA	 |.bss|, NOINIT
|?v_pLcdRegs@@3PCULCDRegs@@C| % 0x4			; v_pLcdRegs
|?v_pGPIORegs@@3PCUXLLP_GPIO_T@@C| % 0x4		; v_pGPIORegs
|?bSuspended@@3HA| % 0x4				; bSuspended
|?pGPE@@3PAVDDGPE@@A| % 0x4				; pGPE

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff

  00000			 AREA	 |.data|, DATA
|?_rgbIdentity@@3PAUtagPALETTEENTRY@@A| DCB 0x0		; _rgbIdentity
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x80
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x80
	DCB	0x0
	DCB	0xc0
	DCB	0xc0
	DCB	0xc0
	DCB	0x0
	DCB	0xc0
	DCB	0xdc
	DCB	0xc0
	DCB	0x0
	DCB	0xa6
	DCB	0xca
	DCB	0xf0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x0
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x0
	DCB	0x22
	DCB	0x22
	DCB	0x22
	DCB	0x0
	DCB	0x29
	DCB	0x29
	DCB	0x29
	DCB	0x0
	DCB	0x55
	DCB	0x55
	DCB	0x55
	DCB	0x0
	DCB	0x4d
	DCB	0x4d
	DCB	0x4d
	DCB	0x0
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x0
	DCB	0x39
	DCB	0x39
	DCB	0x39
	DCB	0x0
	DCB	0xff
	DCB	0x7c
	DCB	0x80
	DCB	0x0
	DCB	0xff
	DCB	0x50
	DCB	0x50
	DCB	0x0
	DCB	0xd6
	DCB	0x0
	DCB	0x93
	DCB	0x0
	DCB	0xcc
	DCB	0xec
	DCB	0xff
	DCB	0x0
	DCB	0xef
	DCB	0xd6
	DCB	0xc6
	DCB	0x0
	DCB	0xe7
	DCB	0xe7
	DCB	0xd6
	DCB	0x0
	DCB	0xad
	DCB	0xa9
	DCB	0x90
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0xa5
	DCB	0x0
	DCB	0x21
	DCB	0x0
	DCB	0x5f
	DCB	0x5f
	DCB	0x5f
	DCB	0x0
	DCB	0x77
	DCB	0x77
	DCB	0x77
	DCB	0x0
	DCB	0x86
	DCB	0x86
	DCB	0x86
	DCB	0x0
	DCB	0x96
	DCB	0x96
	DCB	0x96
	DCB	0x0
	DCB	0xcb
	DCB	0xcb
	DCB	0xcb
	DCB	0x0
	DCB	0xb2
	DCB	0xb2
	DCB	0xb2
	DCB	0x0
	DCB	0xd7
	DCB	0xd7
	DCB	0xd7
	DCB	0x0
	DCB	0xdd
	DCB	0xdd
	DCB	0xdd
	DCB	0x0
	DCB	0xe3
	DCB	0xe3
	DCB	0xe3
	DCB	0x0
	DCB	0xea
	DCB	0xea
	DCB	0xea
	DCB	0x0
	DCB	0xf1
	DCB	0xf1
	DCB	0xf1
	DCB	0x0
	DCB	0xf8
	DCB	0xf8
	DCB	0xf8
	DCB	0x0
	DCB	0xff
	DCB	0xfb
	DCB	0xf0
	DCB	0x0
	DCB	0xa0
	DCB	0xa0
	DCB	0xa4
	DCB	0x0
	DCB	0x80
	DCB	0x80
	DCB	0x80
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0xff
	DCB	0x0
|?DisplayDrvPowerCaps@@3U_POWER_CAPABILITIES@@A| DCB 0x1d ; DisplayDrvPowerCaps
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|?BitMasks@@3PAKA| DCD 0xf800				; BitMasks
	DCD	0x7e0
	DCD	0x1f
	EXPORT	|?Stride@GPESurf@@QAAHXZ|		; GPESurf::Stride
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38592| DCD	|$LN5@Stride|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stride@GPESurf@@QAAHXZ| PROC		; GPESurf::Stride

; 177  :     {

  00000		 |$LN5@Stride|
  00000		 |$M38589|

; 178  :         return m_nStrideBytes;

  00000	e5900008	 ldr         r0, [r0, #8]

; 179  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M38590|

			 ENDP  ; |?Stride@GPESurf@@QAAHXZ|, GPESurf::Stride

	EXPORT	|?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| ; GPESurf::Format

  00000			 AREA	 |.pdata|, PDATA
|$T38602| DCD	|$LN5@Format|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| PROC ; GPESurf::Format

; 189  :     {

  00000		 |$LN5@Format|
  00000		 |$M38599|

; 190  :         return m_eFormat;

  00000	e590001c	 ldr         r0, [r0, #0x1C]

; 191  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M38600|

			 ENDP  ; |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|, GPESurf::Format

	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer

  00000			 AREA	 |.pdata|, PDATA
|$T38612| DCD	|$LN5@Buffer|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000		 |$M38609|

; 202  :         return (void *)m_pVirtAddr;

  00000	e5900004	 ldr         r0, [r0, #4]

; 203  :     }

  00004	e12fff1e	 bx          lr
  00008		 |$M38610|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

	EXPORT	|DrvEnableDriver|
	IMPORT	|?GPEEnableDriver@@YAHKKPAUtagDrvEnableData@@PAU_ENGCALLBACKS@@@Z| ; GPEEnableDriver
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T38625| DCD	|$LN5@DrvEnableD|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DrvEnableDriver| PROC

; 129  : {

  00000		 |$LN5@DrvEnableD|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38622|

; 130  :     return GPEEnableDriver(iEngineVersion,cj,data,pEngineCallbacks);

  00004	eb000000	 bl          |?GPEEnableDriver@@YAHKKPAUtagDrvEnableData@@PAU_ENGCALLBACKS@@@Z|

; 131  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M38623|

			 ENDP  ; |DrvEnableDriver|

	EXPORT	|?PowerHandler@SA2Video@@UAAXH@Z|	; SA2Video::PowerHandler
	IMPORT	|DispDrvrPowerHandler|

  00000			 AREA	 |.pdata|, PDATA
|$T38633| DCD	|$LN6@PowerHandl|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PowerHandler@SA2Video@@UAAXH@Z| PROC	; SA2Video::PowerHandler

; 154  : {

  00000		 |$LN6@PowerHandl|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M38630|
  00004	e3510000	 cmp         r1, #0

; 155  :     // turn off the display if it is not already turned off
; 156  :     // (turning on is controlled by SA2Video::SetPmPowerState)
; 157  :     if (bOff && !bSuspended) {

  00008	0a000007	 beq         |$LN1@PowerHandl|
  0000c	e59f4020	 ldr         r4, [pc, #0x20]
  00010	e5943000	 ldr         r3, [r4]
  00014	e3530000	 cmp         r3, #0
  00018	1a000003	 bne         |$LN1@PowerHandl|

; 158  :         DEBUGMSG(ZONE_PM, (TEXT("SA2Video::PowerHandler: TurnOff Display\r\n")));
; 159  :         DispDrvrPowerHandler(TRUE);

  0001c	e3a00001	 mov         r0, #1
  00020	eb000000	 bl          DispDrvrPowerHandler

; 160  :         bSuspended = TRUE;

  00024	e3a03001	 mov         r3, #1
  00028	e5843000	 str         r3, [r4]
  0002c		 |$LN1@PowerHandl|

; 161  :     }
; 162  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$LN7@PowerHandl|
  00034		 |$LN8@PowerHandl|
  00034	00000000	 DCD         |?bSuspended@@3HA|
  00038		 |$M38631|

			 ENDP  ; |?PowerHandler@SA2Video@@UAAXH@Z|, SA2Video::PowerHandler

	EXPORT	|?SetMode@SA2Video@@UAAJHPAPAUHPALETTE__@@@Z| ; SA2Video::SetMode
	IMPORT	|bpp|
	IMPORT	|EngCreatePalette|

  00000			 AREA	 |.pdata|, PDATA
|$T38648| DCD	|$LN12@SetMode|
	DCD	0x40003102
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetMode@SA2Video@@UAAJHPAPAUHPALETTE__@@@Z| PROC ; SA2Video::SetMode

; 226  : {

  00000		 |$LN12@SetMode|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M38645|
  00008	e1b05002	 movs        r5, r2

; 227  :     SCODE Result = E_INVALIDARG;

  0000c	e59f00ac	 ldr         r0, [pc, #0xAC]

; 228  : 
; 229  :     // Here, we use EngCreatePalette to create a palette that that MGDI will use as a
; 230  :     // stock palette
; 231  :     if(pPalette && 0 == modeId)

  00010	0a000024	 beq         |$LN4@SetMode|
  00014	e3510000	 cmp         r1, #0
  00018	1a000022	 bne         |$LN4@SetMode|

; 232  :     {
; 233  :         switch (bpp)

  0001c	e59f3098	 ldr         r3, [pc, #0x98]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530008	 cmp         r3, #8
  00028	0a000011	 beq         |$LN3@SetMode|
  0002c	e3530010	 cmp         r3, #0x10

; 238  :             break;
; 239  : 
; 240  :         case 16:
; 241  :             *pPalette = EngCreatePalette(PAL_BITFIELDS, 0, NULL, BitMasks[0], BitMasks[1], BitMasks[2]);
; 242  :             Result    = S_OK;
; 243  :             break;
; 244  : 
; 245  :         default:
; 246  :             *pPalette = NULL;

  00030	13a03000	 movne       r3, #0
  00034	15853000	 strne       r3, [r5]
  00038	1a00001a	 bne         |$LN4@SetMode|
  0003c	e59f3070	 ldr         r3, [pc, #0x70]
  00040	e59fe070	 ldr         lr, [pc, #0x70]
  00044	e3a02000	 mov         r2, #0
  00048	e5930438	 ldr         r0, [r3, #0x438]
  0004c	e5931434	 ldr         r1, [r3, #0x434]
  00050	e5933430	 ldr         r3, [r3, #0x430]
  00054	e59e4000	 ldr         r4, [lr]
  00058	e58d0004	 str         r0, [sp, #4]
  0005c	e58d1000	 str         r1, [sp]
  00060	e3a01000	 mov         r1, #0
  00064	e3a00002	 mov         r0, #2
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff14	 bx          r4
  00070	ea00000a	 b           |$LN9@SetMode|
  00074		 |$LN3@SetMode|

; 234  :         {
; 235  :         case 8:
; 236  :             *pPalette = EngCreatePalette(PAL_INDEXED, PALETTE_SIZE, (ULONG*)_rgbIdentity, 0, 0, 0);

  00074	e59f303c	 ldr         r3, [pc, #0x3C]
  00078	e59f2034	 ldr         r2, [pc, #0x34]
  0007c	e3a06000	 mov         r6, #0
  00080	e5934000	 ldr         r4, [r3]
  00084	e3a03000	 mov         r3, #0
  00088	e3a01c01	 mov         r1, #1, 24
  0008c	e3a00001	 mov         r0, #1
  00090	e58d6004	 str         r6, [sp, #4]
  00094	e58d6000	 str         r6, [sp]
  00098	e1a0e00f	 mov         lr, pc
  0009c	e12fff14	 bx          r4
  000a0		 |$LN9@SetMode|
  000a0	e5850000	 str         r0, [r5]

; 237  :             Result    = S_OK;

  000a4	e3a00000	 mov         r0, #0
  000a8		 |$LN4@SetMode|

; 247  :             break;
; 248  :         }
; 249  :     }
; 250  : 
; 251  :     return Result;
; 252  : }

  000a8	e28dd008	 add         sp, sp, #8
  000ac	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b0	e12fff1e	 bx          lr
  000b4		 |$LN13@SetMode|
  000b4		 |$LN14@SetMode|
  000b4	00000000	 DCD         |?_rgbIdentity@@3PAUtagPALETTEENTRY@@A|
  000b8		 |$LN15@SetMode|
  000b8	00000000	 DCD         |EngCreatePalette|
  000bc		 |$LN16@SetMode|
  000bc	00000000	 DCD         |bpp|
  000c0		 |$LN17@SetMode|
  000c0	80070057	 DCD         0x80070057
  000c4		 |$M38646|

			 ENDP  ; |?SetMode@SA2Video@@UAAJHPAPAUHPALETTE__@@@Z|, SA2Video::SetMode

	EXPORT	|?GetModeInfo@SA2Video@@UAAJPAUGPEMode@@H@Z| ; SA2Video::GetModeInfo
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T38666| DCD	|$LN6@GetModeInf|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetModeInfo@SA2Video@@UAAJPAUGPEMode@@H@Z| PROC ; SA2Video::GetModeInfo

; 259  : {

  00000		 |$LN6@GetModeInf|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38663|
  00004	e3520000	 cmp         r2, #0
  00008	e1a03001	 mov         r3, r1

; 260  :     if(modeNumber != 0)
; 261  :     {
; 262  :         return E_INVALIDARG;

  0000c	159f0020	 ldrne       r0, [pc, #0x20]

; 268  : }

  00010	149de004	 ldrne       lr, [sp], #4
  00014	112fff1e	 bxne        lr

; 263  :     }
; 264  : 
; 265  :     *pMode = m_ModeInfo;

  00018	e2801f93	 add         r1, r0, #0x93, 30
  0001c	e3a02018	 mov         r2, #0x18
  00020	e1a00003	 mov         r0, r3
  00024	eb000000	 bl          memcpy

; 266  : 
; 267  :     return S_OK;

  00028	e3a00000	 mov         r0, #0

; 268  : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN7@GetModeInf|
  00034		 |$LN8@GetModeInf|
  00034	80070057	 DCD         0x80070057
  00038		 |$M38664|

			 ENDP  ; |?GetModeInfo@SA2Video@@UAAJPAUGPEMode@@H@Z|, SA2Video::GetModeInfo

	EXPORT	|?NumModes@SA2Video@@UAAHXZ|		; SA2Video::NumModes

  00000			 AREA	 |.pdata|, PDATA
|$T38677| DCD	|$LN5@NumModes|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NumModes@SA2Video@@UAAHXZ| PROC	; SA2Video::NumModes

; 272  : {

  00000		 |$LN5@NumModes|
  00000		 |$M38674|

; 273  :     return 1;

  00000	e3a00001	 mov         r0, #1

; 274  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M38675|

			 ENDP  ; |?NumModes@SA2Video@@UAAHXZ|, SA2Video::NumModes

	EXPORT	|?WaitForNotBusy@SA2Video@@UAAXXZ|	; SA2Video::WaitForNotBusy

  00000			 AREA	 |.pdata|, PDATA
|$T38684| DCD	|$LN5@WaitForNot|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WaitForNotBusy@SA2Video@@UAAXXZ| PROC ; SA2Video::WaitForNotBusy

; 372  : {

  00000		 |$LN5@WaitForNot|
  00000		 |$M38681|

; 373  :     return;
; 374  : }

  00000	e12fff1e	 bx          lr
  00004		 |$M38682|

			 ENDP  ; |?WaitForNotBusy@SA2Video@@UAAXXZ|, SA2Video::WaitForNotBusy

	EXPORT	|?IsBusy@SA2Video@@UAAHXZ|		; SA2Video::IsBusy

  00000			 AREA	 |.pdata|, PDATA
|$T38693| DCD	|$LN5@IsBusy|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsBusy@SA2Video@@UAAHXZ| PROC	; SA2Video::IsBusy

; 378  : {

  00000		 |$LN5@IsBusy|
  00000		 |$M38690|

; 379  :     return 0;    // Never busy as there is no acceleration

  00000	e3a00000	 mov         r0, #0

; 380  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M38691|

			 ENDP  ; |?IsBusy@SA2Video@@UAAHXZ|, SA2Video::IsBusy

	EXPORT	|?GetPhysicalVideoMemory@SA2Video@@UAAXPAK0@Z| ; SA2Video::GetPhysicalVideoMemory
	IMPORT	|DispDrvr_cdwStride|
	IMPORT	|DispDrvr_cyScreen|
	IMPORT	|g_DisplayBaseVirtual|

  00000			 AREA	 |.pdata|, PDATA
|$T38702| DCD	|$LN5@GetPhysica|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPhysicalVideoMemory@SA2Video@@UAAXPAK0@Z| PROC ; SA2Video::GetPhysicalVideoMemory

; 387  : {

  00000		 |$LN5@GetPhysica|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38699|

; 388  :     *pPhysicalMemoryBase = (ULONG)FRAME_BUFFER_0_BASE_VIRTUAL;

  00004	e59f3030	 ldr         r3, [pc, #0x30]

; 389  :     *pVideoMemorySize    = DispDrvr_cdwStride * DispDrvr_cyScreen;

  00008	e59f0028	 ldr         r0, [pc, #0x28]
  0000c	e59fe020	 ldr         lr, [pc, #0x20]
  00010	e5933000	 ldr         r3, [r3]
  00014	e2833d12	 add         r3, r3, #0x12, 26
  00018	e5813000	 str         r3, [r1]
  0001c	e5901000	 ldr         r1, [r0]
  00020	e59e3000	 ldr         r3, [lr]
  00024	e0030391	 mul         r3, r1, r3
  00028	e5823000	 str         r3, [r2]

; 390  : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@GetPhysica|
  00034		 |$LN7@GetPhysica|
  00034	00000000	 DCD         |DispDrvr_cdwStride|
  00038		 |$LN8@GetPhysica|
  00038	00000000	 DCD         |DispDrvr_cyScreen|
  0003c		 |$LN9@GetPhysica|
  0003c	00000000	 DCD         |g_DisplayBaseVirtual|
  00040		 |$M38700|

			 ENDP  ; |?GetPhysicalVideoMemory@SA2Video@@UAAXPAK0@Z|, SA2Video::GetPhysicalVideoMemory

	EXPORT	|?GetVirtualVideoMemory@SA2Video@@QAAXPAK0@Z| ; SA2Video::GetVirtualVideoMemory
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38720| DCD	|$LN7@GetVirtual|
	DCD	0x40000e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetVirtualVideoMemory@SA2Video@@QAAXPAK0@Z| PROC ; SA2Video::GetVirtualVideoMemory

; 397  : {

  00000		 |$LN7@GetVirtual|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M38717|

; 398  :     *pVirtualMemoryBase = (unsigned)(m_pPrimarySurface->Buffer());

  00004	e5903004	 ldr         r3, [r0, #4]

; 399  :     *pVideoMemorySize   = DispDrvr_cdwStride * DispDrvr_cyScreen;

  00008	e59f0024	 ldr         r0, [pc, #0x24]
  0000c	e59fe01c	 ldr         lr, [pc, #0x1C]
  00010	e5933004	 ldr         r3, [r3, #4]
  00014	e5813000	 str         r3, [r1]
  00018	e5901000	 ldr         r1, [r0]
  0001c	e59e3000	 ldr         r3, [lr]
  00020	e0030391	 mul         r3, r1, r3
  00024	e5823000	 str         r3, [r2]

; 400  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$LN8@GetVirtual|
  00030		 |$LN9@GetVirtual|
  00030	00000000	 DCD         |DispDrvr_cdwStride|
  00034		 |$LN10@GetVirtual|
  00034	00000000	 DCD         |DispDrvr_cyScreen|
  00038		 |$M38718|

			 ENDP  ; |?GetVirtualVideoMemory@SA2Video@@QAAXPAK0@Z|, SA2Video::GetVirtualVideoMemory

	EXPORT	|?AllocSurface@SA2Video@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| ; SA2Video::AllocSurface
	IMPORT	|??0DDGPESurf@@QAA@HHHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z| ; DDGPESurf::DDGPESurf
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|EGPEFormatToBpp|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38750| DCD	|$LN15@AllocSurfa|
	DCD	0x40003402
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllocSurface@SA2Video@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| PROC ; SA2Video::AllocSurface

; 411  : {

  00000		 |$LN15@AllocSurfa|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M38747|
  00008	e1a06003	 mov         r6, r3
  0000c	e1a05002	 mov         r5, r2
  00010	e1a04001	 mov         r4, r1

; 412  :     if (surfaceFlags & GPE_REQUIRE_VIDEO_MEMORY)

  00014	e59d002c	 ldr         r0, [sp, #0x2C]
  00018	e3100001	 tst         r0, #1

; 413  :     {
; 414  :         *ppSurf = NULL;

  0001c	13a03000	 movne       r3, #0
  00020	13a0213a	 movne       r2, #0x3A, 2
  00024	15843000	 strne       r3, [r4]

; 415  : 
; 416  :         return E_OUTOFMEMORY;

  00028	13820807	 orrne       r0, r2, #7, 16
  0002c	1a000021	 bne         |$LN5@AllocSurfa|

; 417  :     }
; 418  : 
; 419  :     DWORD SurfBpp       = EGPEFormatToBpp[format];
; 420  :     DWORD stride        = ((SurfBpp * width + 31) >> 5) << 2;

  00030	e59f3094	 ldr         r3, [pc, #0x94]
  00034	e59d7024	 ldr         r7, [sp, #0x24]

; 421  :     DWORD nSurfaceBytes = stride * height;
; 422  : 
; 423  :     *ppSurf = new DDGPESurf(width, height, stride, format, pixelFormat);

  00038	e3a0007c	 mov         r0, #0x7C
  0003c	e3e0923e	 mvn         r9, #0x3E, 4
  00040	e7933107	 ldr         r3, [r3, +r7, lsl #2]
  00044	e0020593	 mul         r2, r3, r5
  00048	e282801f	 add         r8, r2, #0x1F
  0004c	eb000000	 bl          |??2@YAPAXI@Z|
  00050	e3500000	 cmp         r0, #0
  00054	0a000007	 beq         |$LN7@AllocSurfa|
  00058	e59d1028	 ldr         r1, [sp, #0x28]
  0005c	e00931a8	 and         r3, r9, r8, lsr #3
  00060	e1a02006	 mov         r2, r6
  00064	e58d1004	 str         r1, [sp, #4]
  00068	e1a01005	 mov         r1, r5
  0006c	e58d7000	 str         r7, [sp]
  00070	eb000000	 bl          |??0DDGPESurf@@QAA@HHHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z|
  00074	ea000000	 b           |$LN8@AllocSurfa|
  00078		 |$LN7@AllocSurfa|
  00078	e3a00000	 mov         r0, #0
  0007c		 |$LN8@AllocSurfa|
  0007c	e5840000	 str         r0, [r4]

; 424  : 
; 425  :     if (NULL != *ppSurf)

  00080	e3500000	 cmp         r0, #0
  00084	0a000009	 beq         |$LN1@AllocSurfa|

; 426  :     {
; 427  :         if (((*ppSurf)->Buffer()) == NULL)

  00088	e5903004	 ldr         r3, [r0, #4]
  0008c	e3530000	 cmp         r3, #0
  00090	1a00000b	 bne         |$LN2@AllocSurfa|

; 428  :         {
; 429  :             delete *ppSurf;

  00094	e5903000	 ldr         r3, [r0]
  00098	e3a01001	 mov         r1, #1
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e1a0e00f	 mov         lr, pc
  000a4	e12fff13	 bx          r3

; 430  :             *ppSurf = NULL;

  000a8	e3a03000	 mov         r3, #0
  000ac	e5843000	 str         r3, [r4]
  000b0		 |$LN1@AllocSurfa|

; 431  :         }
; 432  :         else
; 433  :         {
; 434  :             return S_OK;

  000b0	e3a0313a	 mov         r3, #0x3A, 2

; 435  :         }
; 436  :     }
; 437  : 
; 438  :     return E_OUTOFMEMORY;

  000b4	e3830807	 orr         r0, r3, #7, 16
  000b8		 |$LN5@AllocSurfa|

; 439  : }

  000b8	e28dd008	 add         sp, sp, #8
  000bc	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$LN2@AllocSurfa|

; 431  :         }
; 432  :         else
; 433  :         {
; 434  :             return S_OK;

  000c4	e3a00000	 mov         r0, #0
  000c8	eafffffa	 b           |$LN5@AllocSurfa|
  000cc		 |$LN16@AllocSurfa|
  000cc		 |$LN17@AllocSurfa|
  000cc	00000000	 DCD         |EGPEFormatToBpp|
  000d0		 |$M38748|

			 ENDP  ; |?AllocSurface@SA2Video@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z|, SA2Video::AllocSurface

	EXPORT	|?AllocSurface@SA2Video@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| ; SA2Video::AllocSurface
	IMPORT	|??0GPESurf@@QAA@HHW4EGPEFormat@@@Z|	; GPESurf::GPESurf
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38777| DCD	|$LN15@AllocSurfa@2|
	DCD	0x40002301
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?AllocSurface@SA2Video@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| PROC ; SA2Video::AllocSurface

; 449  : {

  00000		 |$LN15@AllocSurfa@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M38774|
  00004	e1a05003	 mov         r5, r3
  00008	e1a06002	 mov         r6, r2
  0000c	e1a04001	 mov         r4, r1

; 450  :     if (surfaceFlags & GPE_REQUIRE_VIDEO_MEMORY)

  00010	e59d0014	 ldr         r0, [sp, #0x14]
  00014	e3100001	 tst         r0, #1

; 451  :     {
; 452  :         // Can't allocate video-memory surfaces in the SA2Video environment
; 453  :         return E_OUTOFMEMORY;

  00018	1a000014	 bne         |$LN1@AllocSurfa@2|

; 454  :     }
; 455  : 
; 456  :     // Allocate from system memory
; 457  :     *surface = new GPESurf(width,height,format);

  0001c	e3a0004c	 mov         r0, #0x4C
  00020	eb000000	 bl          |??2@YAPAXI@Z|
  00024	e3500000	 cmp         r0, #0
  00028	0a000004	 beq         |$LN7@AllocSurfa@2|
  0002c	e59d3010	 ldr         r3, [sp, #0x10]
  00030	e1a02005	 mov         r2, r5
  00034	e1a01006	 mov         r1, r6
  00038	eb000000	 bl          |??0GPESurf@@QAA@HHW4EGPEFormat@@@Z|
  0003c	ea000000	 b           |$LN8@AllocSurfa@2|
  00040		 |$LN7@AllocSurfa@2|
  00040	e3a00000	 mov         r0, #0
  00044		 |$LN8@AllocSurfa@2|
  00044	e5840000	 str         r0, [r4]

; 458  : 
; 459  :     if (*surface != NULL)

  00048	e3500000	 cmp         r0, #0
  0004c	0a000007	 beq         |$LN1@AllocSurfa@2|

; 460  :     {
; 461  :         // Check that the bits were allocated succesfully
; 462  :         if (((*surface)->Buffer()) == NULL)

  00050	e5903004	 ldr         r3, [r0, #4]
  00054	e3530000	 cmp         r3, #0
  00058	1a000008	 bne         |$LN2@AllocSurfa@2|

; 463  :         {
; 464  :             delete *surface;

  0005c	e5903000	 ldr         r3, [r0]
  00060	e3a01001	 mov         r1, #1
  00064	e5933000	 ldr         r3, [r3]
  00068	e1a0e00f	 mov         lr, pc
  0006c	e12fff13	 bx          r3
  00070		 |$LN1@AllocSurfa@2|

; 465  :         }
; 466  :         else
; 467  :         {
; 468  :             return S_OK;

  00070	e3a0313a	 mov         r3, #0x3A, 2

; 469  :         }
; 470  :     }
; 471  : 
; 472  :     return E_OUTOFMEMORY;

  00074	e3830807	 orr         r0, r3, #7, 16

; 473  : }

  00078	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN2@AllocSurfa@2|

; 465  :         }
; 466  :         else
; 467  :         {
; 468  :             return S_OK;

  00080	e3a00000	 mov         r0, #0

; 473  : }

  00084	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M38775|

			 ENDP  ; |?AllocSurface@SA2Video@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z|, SA2Video::AllocSurface

	EXPORT	|?EmulatedBltFill16_C@@YAHPAGGHHI@Z|	; EmulatedBltFill16_C

  00000			 AREA	 |.pdata|, PDATA
|$T38798| DCD	|$LN17@EmulatedBl|
	DCD	0x40001501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBltFill16_C@@YAHPAGGHHI@Z| PROC ; EmulatedBltFill16_C

; 605  : {

  00000		 |$LN17@EmulatedBl|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M38795|

; 606  :     step >>= 1; //in 16-bit
; 607  :     step -= width;

  00004	e59de00c	 ldr         lr, [sp, #0xC]

; 608  : 
; 609  :     for (int r = 0; r < height; r++)

  00008	e3530000	 cmp         r3, #0
  0000c	e06250ae	 rsb         r5, r2, lr, lsr #1
  00010	da00000c	 ble         |$LN4@EmulatedBl|
  00014		 |$LL6@EmulatedBl|

; 610  :     {
; 611  :         for (int w = 0; w < width; w++)

  00014	e3520000	 cmp         r2, #0
  00018	da000007	 ble         |$LN3@EmulatedBl|
  0001c	e1a0e000	 mov         lr, r0
  00020	e1b04002	 movs        r4, r2
  00024	0a000003	 beq         |$LN14@EmulatedBl|
  00028	e0804084	 add         r4, r0, r4, lsl #1
  0002c		 |$LN13@EmulatedBl|
  0002c	e0ce10b2	 strh        r1, [lr], #2
  00030	e15e0004	 cmp         lr, r4
  00034	1afffffc	 bne         |$LN13@EmulatedBl|
  00038		 |$LN14@EmulatedBl|
  00038	e0800082	 add         r0, r0, r2, lsl #1
  0003c		 |$LN3@EmulatedBl|

; 612  :         {
; 613  :             *pDst++ = color;
; 614  :         }
; 615  : 
; 616  :         pDst += step;

  0003c	e0800085	 add         r0, r0, r5, lsl #1
  00040	e2533001	 subs        r3, r3, #1
  00044	1afffff2	 bne         |$LL6@EmulatedBl|
  00048		 |$LN4@EmulatedBl|

; 617  :     }
; 618  : 
; 619  :     return 0;

  00048	e3a00000	 mov         r0, #0

; 620  : }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M38796|

			 ENDP  ; |?EmulatedBltFill16_C@@YAHPAGGHHI@Z|, EmulatedBltFill16_C

	EXPORT	|?EmulatedBltFill16_Eml@@YAJPAUGPEBltParms@@@Z| ; EmulatedBltFill16_Eml
	IMPORT	|EmulatedBltFill16ASM|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38818| DCD	|$LN9@EmulatedBl@2|
	DCD	0x40001802
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBltFill16_Eml@@YAJPAUGPEBltParms@@@Z| PROC ; EmulatedBltFill16_Eml

; 634  : {

  00000		 |$LN9@EmulatedBl@2|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M38815|

; 635  :     DEBUGMSG(GPE_ZONE_BLT_HI,(TEXT("EmulatedBltFill16\r\n")));
; 636  : 
; 637  :     UINT32   iDstScanStride = pParms->pDst->Stride();

  00008	e5901004	 ldr         r1, [r0, #4]

; 638  :     BYTE   * pbDibBitsDst   = (BYTE *)pParms->pDst->Buffer();
; 639  :     PRECTL   prcDst         = pParms->prclDst;

  0000c	e5902014	 ldr         r2, [r0, #0x14]

; 640  :     DWORD    dwOnColorIndex = pParms->solidColor;
; 641  :     int      iNumDstRows    = prcDst->bottom - prcDst->top;
; 642  :     int      iNumDstCols    = prcDst->right  - prcDst->left;
; 643  : 
; 644  :     // Compute pointer to the starting rows in the dst bitmap
; 645  :     WORD *pwDstScanLine = (WORD *)(pbDibBitsDst + prcDst->top * iDstScanStride + prcDst->left * 2);
; 646  :     WORD  wColor = (WORD)dwOnColorIndex;
; 647  : 
; 648  :     EmulatedBltFill16ASM(pwDstScanLine, wColor, iNumDstCols, iNumDstRows, iDstScanStride);

  00010	e5906020	 ldr         r6, [r0, #0x20]
  00014	e5917008	 ldr         r7, [r1, #8]
  00018	e5924004	 ldr         r4, [r2, #4]
  0001c	e5925000	 ldr         r5, [r2]
  00020	e592000c	 ldr         r0, [r2, #0xC]
  00024	e0030794	 mul         r3, r4, r7
  00028	e5911004	 ldr         r1, [r1, #4]
  0002c	e592e008	 ldr         lr, [r2, #8]
  00030	e0832085	 add         r2, r3, r5, lsl #1
  00034	e0403004	 sub         r3, r0, r4
  00038	e0820001	 add         r0, r2, r1
  0003c	e1a01806	 mov         r1, r6, lsl #16
  00040	e1a01821	 mov         r1, r1, lsr #16
  00044	e04e2005	 sub         r2, lr, r5
  00048	e58d7000	 str         r7, [sp]
  0004c	eb000000	 bl          EmulatedBltFill16ASM

; 649  :     return S_OK;

  00050	e3a00000	 mov         r0, #0

; 650  : }

  00054	e28dd004	 add         sp, sp, #4
  00058	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M38816|

			 ENDP  ; |?EmulatedBltFill16_Eml@@YAJPAUGPEBltParms@@@Z|, EmulatedBltFill16_Eml

	EXPORT	|?EmulatedBltSrcCopy1616_Eml@@YAJPAUGPEBltParms@@@Z| ; EmulatedBltSrcCopy1616_Eml
	IMPORT	|EmulatedBltSrcCopy1616ASM|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38852| DCD	|$LN14@EmulatedBl@3|
	DCD	0x40002802
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBltSrcCopy1616_Eml@@YAJPAUGPEBltParms@@@Z| PROC ; EmulatedBltSrcCopy1616_Eml

; 674  : {

  00000		 |$LN14@EmulatedBl@3|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M38849|

; 675  :     // Source-related info
; 676  :     PRECTL   prcSrc         = pParms->prclSrc;
; 677  :     UINT32   iScanStrideSrc = pParms->pSrc->Stride()/sizeof(WORD);

  00008	e5904008	 ldr         r4, [r0, #8]

; 678  :     WORD   * pwScanLineSrc  = (WORD *)pParms->pSrc->Buffer() +
; 679  :                               prcSrc->top * iScanStrideSrc      +
; 680  :                               prcSrc->left;
; 681  : 
; 682  :     // Dest-related info
; 683  :     PRECTL   prcDst         = pParms->prclDst;
; 684  :     UINT32   iScanStrideDst = pParms->pDst->Stride()/sizeof(WORD);

  0000c	e5907004	 ldr         r7, [r0, #4]
  00010	e5903018	 ldr         r3, [r0, #0x18]
  00014	e5942008	 ldr         r2, [r4, #8]
  00018	e5908014	 ldr         r8, [r0, #0x14]
  0001c	e5971008	 ldr         r1, [r7, #8]
  00020	e593e004	 ldr         lr, [r3, #4]
  00024	e5933000	 ldr         r3, [r3]

; 685  :     WORD   * pwScanLineDst  = (WORD *)pParms->pDst->Buffer() +
; 686  :                               prcDst->top * iScanStrideDst      +
; 687  :                               prcDst->left;

  00028	e5986004	 ldr         r6, [r8, #4]
  0002c	e598b000	 ldr         r11, [r8]
  00030	e1a090a2	 mov         r9, r2, lsr #1
  00034	e1a0a0a1	 mov         r10, r1, lsr #1
  00038	e021399e	 mla         r1, lr, r9, r3
  0003c	e5943004	 ldr         r3, [r4, #4]

; 688  : 
; 689  :     int cRows = prcDst->bottom - prcDst->top;
; 690  :     int cCols = prcDst->right  - prcDst->left;
; 691  : 
; 692  :     // Make sure to copy source before overwriting.
; 693  :     if (!pParms->yPositive)

  00040	e5904038	 ldr         r4, [r0, #0x38]
  00044	e598e00c	 ldr         lr, [r8, #0xC]
  00048	e5972004	 ldr         r2, [r7, #4]
  0004c	e025ba96	 mla         r5, r6, r10, r11
  00050	e0830081	 add         r0, r3, r1, lsl #1
  00054	e04e3006	 sub         r3, lr, r6
  00058	e3540000	 cmp         r4, #0
  0005c	e0821085	 add         r1, r2, r5, lsl #1

; 694  :     {
; 695  :         // Scan from end of memory, and negate stride
; 696  :         pwScanLineSrc += iScanStrideSrc * (cRows - 1);

  00060	02432001	 subeq       r2, r3, #1
  00064	e5987008	 ldr         r7, [r8, #8]
  00068	000e0992	 muleq       lr, r2, r9

; 697  :         pwScanLineDst += iScanStrideDst * (cRows - 1);

  0006c	00040a92	 muleq       r4, r2, r10

; 698  : 
; 699  :         iScanStrideSrc = (UINT32)-(INT32)iScanStrideSrc;

  00070	02699000	 rsbeq       r9, r9, #0

; 700  :         iScanStrideDst = (UINT32)-(INT32)iScanStrideDst;

  00074	026aa000	 rsbeq       r10, r10, #0
  00078	0080008e	 addeq       r0, r0, lr, lsl #1
  0007c	00811084	 addeq       r1, r1, r4, lsl #1

; 701  :     }
; 702  : 
; 703  : #ifdef    SCRCOPY_ASM
; 704  : 
; 705  :     EmulatedBltSrcCopy1616ASM(pwScanLineSrc, pwScanLineDst, cCols, cRows,
; 706  :                             iScanStrideSrc, iScanStrideDst);

  00080	e047200b	 sub         r2, r7, r11
  00084	e58da004	 str         r10, [sp, #4]
  00088	e58d9000	 str         r9, [sp]
  0008c	eb000000	 bl          EmulatedBltSrcCopy1616ASM

; 707  : 
; 708  : #else
; 709  :     //
; 710  :     // Do the copy line by line.
; 711  :     //
; 712  :     //EmulatedBltSrcCopy1616_CO(pwScanLineSrc, pwScanLineDst, cCols, cRows,
; 713  :     //                         iScanStrideSrc, iScanStrideDst, xPositive);
; 714  : 
; 715  : 
; 716  :     for (int row = 0; row < cRows; row++)
; 717  :     {
; 718  :         //BLOCK_OP(pwScanLineDst, pwScanLineSrc, cCols*sizeof(WORD));
; 719  :         if ( cCols < 8 ) {
; 720  : #ifndef _MM_OPT_ASM
; 721  :             Memmove1616_C_SIMPLE(pwScanLineSrc, pwScanLineDst, cCols);
; 722  : #else
; 723  :             Memmove1616_ASM_LE16(pwScanLineSrc, pwScanLineDst, cCols);
; 724  : #endif
; 725  :         } else {
; 726  : #ifndef _MM_OPT_ASM
; 727  :             Memmove1616_C(pwScanLineSrc, pwScanLineDst, cCols);
; 728  : #else
; 729  :             Memmove1616_ASM_GT16(pwScanLineSrc, pwScanLineDst, cCols);
; 730  : #endif
; 731  :         }
; 732  : 
; 733  :         pwScanLineSrc += iScanStrideSrc;
; 734  :         pwScanLineDst += iScanStrideDst;
; 735  :     }
; 736  : 
; 737  : #endif
; 738  :         return S_OK;

  00090	e3a00000	 mov         r0, #0

; 739  : }

  00094	e28dd008	 add         sp, sp, #8
  00098	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$M38850|

			 ENDP  ; |?EmulatedBltSrcCopy1616_Eml@@YAJPAUGPEBltParms@@@Z|, EmulatedBltSrcCopy1616_Eml

	EXPORT	|?EmulatedBltAlphaText16_Eml@@YAJPAUGPEBltParms@@@Z| ; EmulatedBltAlphaText16_Eml
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38903| DCD	|$LN36@EmulatedBl@4|
	DCD	0x40007702
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBltAlphaText16_Eml@@YAJPAUGPEBltParms@@@Z| PROC ; EmulatedBltAlphaText16_Eml

; 750  : {

  00000		 |$LN36@EmulatedBl@4|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd028	 sub         sp, sp, #0x28
  00008		 |$M38900|

; 751  :     DEBUGMSG(GPE_ZONE_BLT_HI,(TEXT("EmulatedBltAlphaText16\r\n")));
; 752  : 
; 753  :     UINT32   iDstScanStride  = pParms->pDst->Stride();
; 754  :     BYTE   * pDibBitsDst     = (BYTE *)pParms->pDst->Buffer();
; 755  :     UINT32   iSrcScanStride  = pParms->pMask->Stride();
; 756  :     BYTE   * pDibBitsSrc     = (BYTE *)pParms->pMask->Buffer();
; 757  :     PRECTL   prcSrc          = pParms->prclMask;

  00008	e590302c	 ldr         r3, [r0, #0x2C]
  0000c	e590800c	 ldr         r8, [r0, #0xC]
  00010	e590a004	 ldr         r10, [r0, #4]

; 758  :     PRECTL   prcDst          = pParms->prclDst;

  00014	e590e014	 ldr         lr, [r0, #0x14]
  00018	e5984008	 ldr         r4, [r8, #8]
  0001c	e58d3004	 str         r3, [sp, #4]

; 759  :     WORD     wOnColor[5];
; 760  :     int      iNumDstRows;
; 761  :     int      iNumDstCols;
; 762  :     BYTE   * pbSrcScanLine;
; 763  :     BYTE   * pbDstScanLine;
; 764  :     BYTE   * pbSrc;
; 765  :     WORD   * pwDstPixel;
; 766  :     BOOL     bOdd;
; 767  :     BYTE     bSrc;
; 768  : 
; 769  :     // Caller assures a well-ordered, non-empty rect
; 770  :     // compute size of destination rect
; 771  :     iNumDstCols = prcDst->right  - prcDst->left;
; 772  :     iNumDstRows = prcDst->bottom - prcDst->top;
; 773  : 
; 774  :     // compute pointers to the starting rows in the src and dst bitmaps
; 775  :     pbSrcScanLine = pDibBitsSrc + prcSrc->top * iSrcScanStride + (prcSrc->left >> 1);

  00020	e5933004	 ldr         r3, [r3, #4]

; 776  :     pbDstScanLine = pDibBitsDst + prcDst->top * iDstScanStride + prcDst->left * 2;
; 777  : 
; 778  :     // Create pixel values with 0/4, 1/4, 2/4, 3/4 and 4/4 of the solid brush color
; 779  :     wOnColor[0] = 0;
; 780  :     wOnColor[4] = (WORD)pParms->solidColor;

  00024	e5902020	 ldr         r2, [r0, #0x20]
  00028	e59a1008	 ldr         r1, [r10, #8]
  0002c	e59e9004	 ldr         r9, [lr, #4]
  00030	e0050493	 mul         r5, r3, r4
  00034	e59d3004	 ldr         r3, [sp, #4]
  00038	e1cd20b0	 strh        r2, [sp]

; 781  :     wOnColor[2] = (wOnColor[4] >> 1 ) & SHIFT_ONE_MASK;
; 782  :     wOnColor[1] = (wOnColor[4] >> 2 ) & SHIFT_TWO_MASK;

  0003c	e5980004	 ldr         r0, [r8, #4]
  00040	e58d1008	 str         r1, [sp, #8]
  00044	e0070199	 mul         r7, r9, r1
  00048	e5931000	 ldr         r1, [r3]
  0004c	e1dd80b0	 ldrh        r8, [sp]
  00050	e3a03cf7	 mov         r3, #0xF7, 24
  00054	e59eb000	 ldr         r11, [lr]
  00058	e59e600c	 ldr         r6, [lr, #0xC]
  0005c	e58d4024	 str         r4, [sp, #0x24]
  00060	e59e4008	 ldr         r4, [lr, #8]
  00064	e3a02ce7	 mov         r2, #0xE7, 24
  00068	e59ae004	 ldr         lr, [r10, #4]
  0006c	e38330df	 orr         r3, r3, #0xDF
  00070	e382209f	 orr         r2, r2, #0x9F
  00074	e58d3010	 str         r3, [sp, #0x10]
  00078	e008a003	 and         r10, r8, r3
  0007c	e0083002	 and         r3, r8, r2
  00080	e58d2018	 str         r2, [sp, #0x18]
  00084	e08520c1	 add         r2, r5, r1, asr #1
  00088	e1a03123	 mov         r3, r3, lsr #2
  0008c	e0825000	 add         r5, r2, r0
  00090	e087108b	 add         r1, r7, r11, lsl #1

; 783  :     wOnColor[3] = wOnColor[1] + wOnColor[2];

  00094	e08320aa	 add         r2, r3, r10, lsr #1
  00098	e0467009	 sub         r7, r6, r9
  0009c	e044800b	 sub         r8, r4, r11
  000a0	e58d2014	 str         r2, [sp, #0x14]
  000a4	e1cda0b2	 strh        r10, [sp, #2]
  000a8	e58d700c	 str         r7, [sp, #0xC]
  000ac	e58d3020	 str         r3, [sp, #0x20]
  000b0	e081600e	 add         r6, r1, lr
  000b4	e58d801c	 str         r8, [sp, #0x1C]

; 784  : 
; 785  : 
; 786  :     for (int i = 0; i < iNumDstRows; i++)

  000b8	e3570000	 cmp         r7, #0
  000bc	da000042	 ble         |$LN14@EmulatedBl@4|
  000c0	e59d9010	 ldr         r9, [sp, #0x10]
  000c4	e59da018	 ldr         r10, [sp, #0x18]
  000c8	e59db008	 ldr         r11, [sp, #8]
  000cc		 |$LL16@EmulatedBl@4|

; 787  :     {
; 788  :         // set up pointers to first bytes on src and dst scanlines
; 789  :         pbSrc      = pbSrcScanLine;
; 790  :         pwDstPixel = (WORD *)pbDstScanLine;
; 791  :         bOdd       = prcSrc->left & 1;

  000cc	e59d3004	 ldr         r3, [sp, #4]
  000d0	e1a0e005	 mov         lr, r5
  000d4	e1a01006	 mov         r1, r6
  000d8	e5933000	 ldr         r3, [r3]

; 792  : 
; 793  :         for (int j = 0; j < iNumDstCols; j++ )

  000dc	e3580000	 cmp         r8, #0
  000e0	e2030001	 and         r0, r3, #1
  000e4	da000032	 ble         |$LN11@EmulatedBl@4|
  000e8	e1ddb0b0	 ldrh        r11, [sp]
  000ec	e59d7020	 ldr         r7, [sp, #0x20]
  000f0	e1a04008	 mov         r4, r8
  000f4	e1dd80b2	 ldrh        r8, [sp, #2]
  000f8		 |$LL13@EmulatedBl@4|

; 794  :         {
; 795  :             if (bOdd)

  000f8	e3500000	 cmp         r0, #0

; 796  :             {
; 797  :                 bSrc = *pbSrc++ & 0xF;

  000fc	14de3001	 ldrneb      r3, [lr], #1
  00100	1203300f	 andne       r3, r3, #0xF

; 798  :             }
; 799  :             else
; 800  :             {
; 801  :                 bSrc = *pbSrc >> 4;

  00104	05de3000	 ldreqb      r3, [lr]
  00108	01a03223	 moveq       r3, r3, lsr #4
  0010c	020330ff	 andeq       r3, r3, #0xFF

; 802  :             }
; 803  : 
; 804  :             bOdd = !bOdd;

  00110	e3500000	 cmp         r0, #0
  00114	03a00001	 moveq       r0, #1

; 805  : 
; 806  :             switch ( (bSrc + 1) >> 2 )  // src pixel in range 0...4

  00118	e2833001	 add         r3, r3, #1
  0011c	13a00000	 movne       r0, #0
  00120	e1b03143	 movs        r3, r3, asr #2
  00124	0a00001c	 beq         |$LN6@EmulatedBl@4|
  00128	e3530001	 cmp         r3, #1
  0012c	0a000012	 beq         |$LN5@EmulatedBl@4|
  00130	e3530002	 cmp         r3, #2
  00134	0a00000b	 beq         |$LN4@EmulatedBl@4|
  00138	e3530003	 cmp         r3, #3
  0013c	0a000005	 beq         |$LN3@EmulatedBl@4|
  00140	e3530004	 cmp         r3, #4
  00144	0a000001	 beq         |$LN2@EmulatedBl@4|

; 828  :             default:
; 829  :                 DebugBreak();

  00148	e6000010	 __debugbreak_ce
  0014c	ea000012	 b           |$LN6@EmulatedBl@4|
  00150		 |$LN2@EmulatedBl@4|

; 824  :             case 4:
; 825  :                 //      Fill with solid brush color
; 826  :                 *pwDstPixel = wOnColor[4];

  00150	e1c1b0b0	 strh        r11, [r1]

; 827  :                 break;

  00154	ea000010	 b           |$LN6@EmulatedBl@4|
  00158		 |$LN3@EmulatedBl@4|

; 820  :             case 3:
; 821  :                 //      1/4 destination color and 3/4 brush color
; 822  :                 *pwDstPixel = ((*pwDstPixel >> 2) & SHIFT_TWO_MASK) + wOnColor[3];

  00158	e1d130b0	 ldrh        r3, [r1]
  0015c	e003300a	 and         r3, r3, r10
  00160	e0823123	 add         r3, r2, r3, lsr #2

; 823  :                 break;

  00164	ea00000b	 b           |$LN33@EmulatedBl@4|
  00168		 |$LN4@EmulatedBl@4|

; 815  :                 break;
; 816  :             case 2:
; 817  :                 //      1/2 destination color and 1/2 brush color
; 818  :                 *pwDstPixel = ((*pwDstPixel >> 1) & SHIFT_ONE_MASK) + wOnColor[2];

  00168	e1d130b0	 ldrh        r3, [r1]
  0016c	e0033009	 and         r3, r3, r9
  00170	e1a030a3	 mov         r3, r3, lsr #1
  00174	e08330a8	 add         r3, r3, r8, lsr #1

; 819  :                 break;

  00178	ea000006	 b           |$LN33@EmulatedBl@4|
  0017c		 |$LN5@EmulatedBl@4|

; 807  :             {
; 808  :             case 0:
; 809  :                 //      Leave destination untouched
; 810  :                 break;
; 811  :             case 1:
; 812  :                 //      3/4 destination color and 1/4 brush color
; 813  :                 *pwDstPixel = ((*pwDstPixel >> 2) & SHIFT_TWO_MASK)
; 814  :                             + ((*pwDstPixel >> 1) & SHIFT_ONE_MASK) + wOnColor[1];

  0017c	e1d130b0	 ldrh        r3, [r1]
  00180	e0032009	 and         r2, r3, r9
  00184	e003300a	 and         r3, r3, r10
  00188	e1a03123	 mov         r3, r3, lsr #2
  0018c	e08330a2	 add         r3, r3, r2, lsr #1
  00190	e59d2014	 ldr         r2, [sp, #0x14]
  00194	e0833007	 add         r3, r3, r7
  00198		 |$LN33@EmulatedBl@4|
  00198	e1c130b0	 strh        r3, [r1]
  0019c		 |$LN6@EmulatedBl@4|

; 830  :             }
; 831  : 
; 832  :             pwDstPixel++;

  0019c	e2811002	 add         r1, r1, #2
  001a0	e2544001	 subs        r4, r4, #1
  001a4	1affffd3	 bne         |$LL13@EmulatedBl@4|

; 833  :         }
; 834  : 
; 835  :         // advance to next scanline
; 836  :         pbSrcScanLine += iSrcScanStride;
; 837  :         pbDstScanLine += iDstScanStride;

  001a8	e59d700c	 ldr         r7, [sp, #0xC]
  001ac	e59d801c	 ldr         r8, [sp, #0x1C]
  001b0	e59db008	 ldr         r11, [sp, #8]
  001b4		 |$LN11@EmulatedBl@4|
  001b4	e59d3024	 ldr         r3, [sp, #0x24]
  001b8	e2577001	 subs        r7, r7, #1
  001bc	e086600b	 add         r6, r6, r11
  001c0	e0855003	 add         r5, r5, r3
  001c4	e58d700c	 str         r7, [sp, #0xC]
  001c8	1affffbf	 bne         |$LL16@EmulatedBl@4|
  001cc		 |$LN14@EmulatedBl@4|

; 838  :     }
; 839  : 
; 840  :     return S_OK;

  001cc	e3a00000	 mov         r0, #0

; 841  : 
; 842  : }

  001d0	e28dd028	 add         sp, sp, #0x28
  001d4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001d8	e12fff1e	 bx          lr
  001dc		 |$M38901|

			 ENDP  ; |?EmulatedBltAlphaText16_Eml@@YAJPAUGPEBltParms@@@Z|, EmulatedBltAlphaText16_Eml

	EXPORT	|?EmulatedBltText16_Eml@@YAJPAUGPEBltParms@@@Z| ; EmulatedBltText16_Eml
	IMPORT	|EmulatedBltText16ASM|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38933| DCD	|$LN13@EmulatedBl@5|
	DCD	0x40002702
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBltText16_Eml@@YAJPAUGPEBltParms@@@Z| PROC ; EmulatedBltText16_Eml

; 849  : {

  00000		 |$LN13@EmulatedBl@5|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M38930|

; 850  :     DEBUGMSG(GPE_ZONE_BLT_HI,(TEXT("EmulatedBltText16\r\n")));
; 851  : 
; 852  :     UINT32   iDstScanStride = pParms->pDst->Stride();

  00008	e590a004	 ldr         r10, [r0, #4]

; 853  :     BYTE   * pDibBitsDst    = (BYTE *)pParms->pDst->Buffer();
; 854  :     UINT32   iSrcScanStride = pParms->pMask->Stride();
; 855  :     BYTE   * pDibBitsSrc    = (BYTE *)pParms->pMask->Buffer();
; 856  :     PRECTL   prcSrc         = pParms->prclMask;
; 857  :     PRECTL   prcDst         = pParms->prclDst;

  0000c	e5901014	 ldr         r1, [r0, #0x14]
  00010	e590b00c	 ldr         r11, [r0, #0xC]
  00014	e590202c	 ldr         r2, [r0, #0x2C]
  00018	e59ae008	 ldr         lr, [r10, #8]

; 858  : 
; 859  :     unsigned int wOnColor = (unsigned int)pParms->solidColor;
; 860  : 
; 861  :     int    iSrcBitOffset;
; 862  :     int    iNumDstRows;
; 863  :     int    iNumDstCols;
; 864  :     BYTE * pbSrcScanLine;
; 865  :     BYTE * pbDstScanLine;
; 866  :     WORD * pwDstPixel;
; 867  : 
; 868  :     // Caller assures a well-ordered, non-empty rect
; 869  :     // compute size of destination rect
; 870  :     iNumDstCols = prcDst->right  - prcDst->left;
; 871  :     iNumDstRows = prcDst->bottom - prcDst->top;

  0001c	e5919004	 ldr         r9, [r1, #4]
  00020	e59b4008	 ldr         r4, [r11, #8]

; 872  : 
; 873  :     // compute pointers to the starting rows in the src and dst bitmaps
; 874  :     pbSrcScanLine = pDibBitsSrc + prcSrc->top * iSrcScanStride + (prcSrc->left >> 3);

  00024	e5923004	 ldr         r3, [r2, #4]

; 875  :     iSrcBitOffset = prcSrc->left & 0x07;

  00028	e5927000	 ldr         r7, [r2]

; 876  :     pbDstScanLine = pDibBitsDst + prcDst->top * iDstScanStride + prcDst->left * 2;

  0002c	e5918000	 ldr         r8, [r1]
  00030	e0020e99	 mul         r2, r9, lr
  00034	e00e0493	 mul         lr, r3, r4

; 877  : 
; 878  :     pwDstPixel = (WORD *)pbDstScanLine;
; 879  : 
; 880  :     EmulatedBltText16ASM(pbSrcScanLine,pwDstPixel, wOnColor, iNumDstCols, iNumDstRows, iSrcScanStride, iDstScanStride, iSrcBitOffset);

  00038	e0823088	 add         r3, r2, r8, lsl #1
  0003c	e08e21c7	 add         r2, lr, r7, asr #3
  00040	e207e007	 and         lr, r7, #7
  00044	e5906020	 ldr         r6, [r0, #0x20]
  00048	e59b0004	 ldr         r0, [r11, #4]
  0004c	e58de00c	 str         lr, [sp, #0xC]
  00050	e59ae008	 ldr         lr, [r10, #8]
  00054	e591400c	 ldr         r4, [r1, #0xC]
  00058	e5915008	 ldr         r5, [r1, #8]
  0005c	e59a1004	 ldr         r1, [r10, #4]
  00060	e58de008	 str         lr, [sp, #8]
  00064	e59be008	 ldr         lr, [r11, #8]
  00068	e0820000	 add         r0, r2, r0
  0006c	e1a02806	 mov         r2, r6, lsl #16
  00070	e0444009	 sub         r4, r4, r9
  00074	e0831001	 add         r1, r3, r1
  00078	e0453008	 sub         r3, r5, r8
  0007c	e1a02822	 mov         r2, r2, lsr #16
  00080	e58de004	 str         lr, [sp, #4]
  00084	e58d4000	 str         r4, [sp]
  00088	eb000000	 bl          EmulatedBltText16ASM

; 881  : 
; 882  :     return S_OK;

  0008c	e3a00000	 mov         r0, #0

; 883  : 
; 884  : }

  00090	e28dd010	 add         sp, sp, #0x10
  00094	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M38931|

			 ENDP  ; |?EmulatedBltText16_Eml@@YAJPAUGPEBltParms@@@Z|, EmulatedBltText16_Eml

	EXPORT	|?WrappedEmulatedBlt@SA2Video@@AAAJPAUGPEBltParms@@@Z| ; SA2Video::WrappedEmulatedBlt
	IMPORT	|DispDrvrDirtyRectDump|
	IMPORT	|DispDrvrDirtyRectDump_rectfill|
	IMPORT	|DispDrvrDirtyRectDump2|
	IMPORT	|gDrawCursorFlag|
	IMPORT	|bDoRotation|
	IMPORT	|?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBlt
	IMPORT	|?EmulatedBltRotate@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBltRotate
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38977| DCD	|$LN53@WrappedEmu|
	DCD	0x4000a302
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WrappedEmulatedBlt@SA2Video@@AAAJPAUGPEBltParms@@@Z| PROC ; SA2Video::WrappedEmulatedBlt

; 914  : {

  00000		 |$LN53@WrappedEmu|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M38974|
  00008	e1a04001	 mov         r4, r1

; 915  :     SCODE code;
; 916  :     RECT  bounds;
; 917  : 
; 918  :     // This function should only be called when using a virtual primary (ie.
; 919  :     // bDoRotation is TRUE).
; 920  :     ASSERT(bDoRotation);
; 921  : 
; 922  :     if ((pParms->pDst == m_pPrimarySurface && m_iRotate) || (pParms->pSrc == m_pPrimarySurface && m_iRotate))

  0000c	e594e004	 ldr         lr, [r4, #4]
  00010	e5902004	 ldr         r2, [r0, #4]
  00014	e59f726c	 ldr         r7, [pc, #0x26C]
  00018	e3a03a0f	 mov         r3, #0xF, 20
  0001c	e15e0002	 cmp         lr, r2
  00020	e38360f0	 orr         r6, r3, #0xF0
  00024	1a000002	 bne         |$LN32@WrappedEmu|
  00028	e5903018	 ldr         r3, [r0, #0x18]
  0002c	e3530000	 cmp         r3, #0
  00030	1a000005	 bne         |$LN33@WrappedEmu|
  00034		 |$LN32@WrappedEmu|
  00034	e5941008	 ldr         r1, [r4, #8]
  00038	e1510002	 cmp         r1, r2
  0003c	1a000005	 bne         |$LN34@WrappedEmu|
  00040	e5903018	 ldr         r3, [r0, #0x18]
  00044	e3530000	 cmp         r3, #0
  00048	0a000002	 beq         |$LN34@WrappedEmu|
  0004c		 |$LN33@WrappedEmu|

; 923  :     {
; 924  :         code = EmulatedBltRotate(pParms);

  0004c	e1a01004	 mov         r1, r4
  00050	eb000000	 bl          |?EmulatedBltRotate@GPE@@QAAJPAUGPEBltParms@@@Z|

; 925  :     }
; 926  :     else

  00054	ea000034	 b           |$LN49@WrappedEmu|
  00058		 |$LN34@WrappedEmu|

; 927  :     {
; 928  :         if ( !( (pParms->bltFlags & (BLT_ALPHABLEND | BLT_TRANSPARENT | BLT_STRETCH)) || (pParms->pLookup) || (pParms->pConvert) )
; 929  :              && pParms->pDst->Format() == gpe16Bpp )

  00058	e5943024	 ldr         r3, [r4, #0x24]
  0005c	e313001c	 tst         r3, #0x1C
  00060	1a00002f	 bne         |$LN16@WrappedEmu|
  00064	e594303c	 ldr         r3, [r4, #0x3C]
  00068	e3530000	 cmp         r3, #0
  0006c	1a00002c	 bne         |$LN16@WrappedEmu|
  00070	e5943040	 ldr         r3, [r4, #0x40]
  00074	e3530000	 cmp         r3, #0
  00078	1a000029	 bne         |$LN16@WrappedEmu|
  0007c	e59e301c	 ldr         r3, [lr, #0x1C]
  00080	e3530004	 cmp         r3, #4
  00084	1a000026	 bne         |$LN16@WrappedEmu|

; 930  :         {
; 931  :             if ( pParms->rop4 == 0xcccc )

  00088	e5942028	 ldr         r2, [r4, #0x28]
  0008c	e3a03b33	 mov         r3, #0x33, 22
  00090	e38330cc	 orr         r3, r3, #0xCC
  00094	e1520003	 cmp         r2, r3
  00098	1a000006	 bne         |$LN29@WrappedEmu|

; 932  :             {
; 933  :                 if ( EGPEFormatToBpp[pParms->pSrc->Format()] == 16 )

  0009c	e591301c	 ldr         r3, [r1, #0x1C]
  000a0	e7973103	 ldr         r3, [r7, +r3, lsl #2]
  000a4	e3530010	 cmp         r3, #0x10
  000a8	1a00001d	 bne         |$LN16@WrappedEmu|

; 934  :                 {
; 935  :                     code = EmulatedBltSrcCopy1616_Eml(pParms);

  000ac	e1a00004	 mov         r0, r4
  000b0	eb000000	 bl          |?EmulatedBltSrcCopy1616_Eml@@YAJPAUGPEBltParms@@@Z|
  000b4	ea00001c	 b           |$LN49@WrappedEmu|
  000b8		 |$LN29@WrappedEmu|

; 936  :                     goto contd;
; 937  :                 }
; 938  :             }
; 939  :             else if ( pParms->rop4 == 0xf0f0 )

  000b8	e1520006	 cmp         r2, r6
  000bc	1a000005	 bne         |$LN25@WrappedEmu|

; 940  :             {
; 941  :                 if (pParms->solidColor != -1)

  000c0	e5943020	 ldr         r3, [r4, #0x20]
  000c4	e3730001	 cmn         r3, #1
  000c8	0a000015	 beq         |$LN16@WrappedEmu|

; 942  :                 {    // must be a solid colored brush
; 943  :                      code = EmulatedBltFill16_Eml(pParms);

  000cc	e1a00004	 mov         r0, r4
  000d0	eb000000	 bl          |?EmulatedBltFill16_Eml@@YAJPAUGPEBltParms@@@Z|

; 966  :     }
; 967  : 
; 968  : contd:

  000d4	ea000014	 b           |$LN49@WrappedEmu|
  000d8		 |$LN25@WrappedEmu|
  000d8	e3a03caa	 mov         r3, #0xAA, 24
  000dc	e38330f0	 orr         r3, r3, #0xF0
  000e0	e1520003	 cmp         r2, r3
  000e4	1a00000e	 bne         |$LN16@WrappedEmu|
  000e8	e5943020	 ldr         r3, [r4, #0x20]
  000ec	e3730001	 cmn         r3, #1
  000f0	0a00000b	 beq         |$LN16@WrappedEmu|
  000f4	e594300c	 ldr         r3, [r4, #0xC]
  000f8	e593301c	 ldr         r3, [r3, #0x1C]
  000fc	e3530000	 cmp         r3, #0
  00100	1a000002	 bne         |$LN19@WrappedEmu|
  00104	e1a00004	 mov         r0, r4
  00108	eb000000	 bl          |?EmulatedBltText16_Eml@@YAJPAUGPEBltParms@@@Z|
  0010c	ea000006	 b           |$LN49@WrappedEmu|
  00110		 |$LN19@WrappedEmu|

; 944  :                      goto contd;
; 945  :                 }
; 946  :             }
; 947  :             else if ( pParms->rop4 == 0xaaf0 )
; 948  :             {
; 949  :                 if (pParms->solidColor != -1)
; 950  :                 {
; 951  :                     if (pParms->pMask->Format() == gpe1Bpp)
; 952  :                     {
; 953  :                         code = EmulatedBltText16_Eml(pParms);
; 954  :                         goto contd;
; 955  :                     }
; 956  :                     else if (pParms->pMask->Format() == gpe4Bpp)

  00110	e3530002	 cmp         r3, #2
  00114	1a000002	 bne         |$LN16@WrappedEmu|

; 957  :                     {
; 958  :                         code = EmulatedBltAlphaText16_Eml(pParms);

  00118	e1a00004	 mov         r0, r4
  0011c	eb000000	 bl          |?EmulatedBltAlphaText16_Eml@@YAJPAUGPEBltParms@@@Z|

; 966  :     }
; 967  : 
; 968  : contd:

  00120	ea000001	 b           |$LN49@WrappedEmu|
  00124		 |$LN16@WrappedEmu|

; 959  :                         goto contd;
; 960  :                     }
; 961  :                 }
; 962  :             }
; 963  :         }
; 964  : 
; 965  :         code = EmulatedBlt(pParms);

  00124	e1a01004	 mov         r1, r4
  00128	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  0012c		 |$LN49@WrappedEmu|

; 969  : 
; 970  :     if (bDoRotation)

  0012c	e59f3150	 ldr         r3, [pc, #0x150]
  00130	e1a05000	 mov         r5, r0
  00134		 |$contd$38014|
  00134	e5933000	 ldr         r3, [r3]
  00138	e3530000	 cmp         r3, #0
  0013c	0a00004b	 beq         |$LN35@WrappedEmu|

; 971  :     {
; 972  :         bounds.left   = pParms->prclDst->left;

  00140	e5943014	 ldr         r3, [r4, #0x14]
  00144	e5930000	 ldr         r0, [r3]
  00148	e58d0000	 str         r0, [sp]

; 973  :         bounds.top    = pParms->prclDst->top;

  0014c	e5931004	 ldr         r1, [r3, #4]
  00150	e58d1004	 str         r1, [sp, #4]

; 974  :         bounds.right  = pParms->prclDst->right;

  00154	e593e008	 ldr         lr, [r3, #8]
  00158	e58de008	 str         lr, [sp, #8]

; 975  :         bounds.bottom = pParms->prclDst->bottom;

  0015c	e593200c	 ldr         r2, [r3, #0xC]

; 976  : 
; 977  :         if(bounds.left > bounds.right)

  00160	e150000e	 cmp         r0, lr

; 978  :         {
; 979  :             SWAP(int,bounds.left,bounds.right)

  00164	c58de000	 strgt       lr, [sp]
  00168	c58d0008	 strgt       r0, [sp, #8]

; 980  :         }
; 981  : 
; 982  :         if( bounds.top > bounds.bottom)

  0016c	e1510002	 cmp         r1, r2

; 983  :         {
; 984  :             SWAP(int,bounds.top,bounds.bottom)

  00170	c1a03001	 movgt       r3, r1
  00174	c1a01002	 movgt       r1, r2
  00178	e58d200c	 str         r2, [sp, #0xC]
  0017c	c58d2004	 strgt       r2, [sp, #4]
  00180	c1a02003	 movgt       r2, r3
  00184	c58d300c	 strgt       r3, [sp, #0xC]

; 985  :         }
; 986  : 
; 987  :         if (bounds.top == bounds.bottom-1)

  00188	e2423001	 sub         r3, r2, #1
  0018c	e1510003	 cmp         r1, r3
  00190	1a00001b	 bne         |$LN6@WrappedEmu|

; 988  :         {
; 989  :             if ( !( (pParms->bltFlags & (BLT_ALPHABLEND | BLT_TRANSPARENT | BLT_STRETCH)) || (pParms->pLookup) || (pParms->pConvert) ) )

  00194	e5943024	 ldr         r3, [r4, #0x24]
  00198	e313001c	 tst         r3, #0x1C
  0019c	1a000018	 bne         |$LN6@WrappedEmu|
  001a0	e594303c	 ldr         r3, [r4, #0x3C]
  001a4	e3530000	 cmp         r3, #0
  001a8	1a000015	 bne         |$LN6@WrappedEmu|
  001ac	e5943040	 ldr         r3, [r4, #0x40]
  001b0	e3530000	 cmp         r3, #0
  001b4	1a000012	 bne         |$LN6@WrappedEmu|

; 990  :             {
; 991  :                 if ( pParms->rop4 == 0xf0f0 )

  001b8	e5943028	 ldr         r3, [r4, #0x28]
  001bc	e1530006	 cmp         r3, r6
  001c0	1a00000f	 bne         |$LN6@WrappedEmu|

; 992  :                 {
; 993  :                     if ( EGPEFormatToBpp[pParms->pDst->Format()] == 16 )

  001c4	e5943004	 ldr         r3, [r4, #4]
  001c8	e593301c	 ldr         r3, [r3, #0x1C]
  001cc	e7973103	 ldr         r3, [r7, +r3, lsl #2]
  001d0	e3530010	 cmp         r3, #0x10
  001d4	1a00000a	 bne         |$LN6@WrappedEmu|

; 994  :                     {
; 995  :                         if (pParms->solidColor != -1)

  001d8	e5941020	 ldr         r1, [r4, #0x20]
  001dc	e3710001	 cmn         r1, #1
  001e0	0a000007	 beq         |$LN6@WrappedEmu|

; 996  :                         {    // must be a solid colored brush
; 997  :                             if (!gDrawCursorFlag)

  001e4	e59f3094	 ldr         r3, [pc, #0x94]
  001e8	e5933000	 ldr         r3, [r3]
  001ec	e3530000	 cmp         r3, #0
  001f0	1a000003	 bne         |$LN6@WrappedEmu|

; 998  :                             {
; 999  :                                 DispDrvrDirtyRectDump2((LPRECT)&bounds,pParms->solidColor);

  001f4	e28d0000	 add         r0, sp, #0
  001f8	eb000000	 bl          DispDrvrDirtyRectDump2

; 1000 :                                 return S_OK;

  001fc	e3a05000	 mov         r5, #0
  00200	ea00001a	 b           |$LN35@WrappedEmu|
  00204		 |$LN6@WrappedEmu|

; 1001 :                             }
; 1002 :                         }
; 1003 :                     }
; 1004 :                 }
; 1005 :             }
; 1006 :         }
; 1007 : 
; 1008 :         if ( !( (pParms->bltFlags & (BLT_ALPHABLEND | BLT_TRANSPARENT | BLT_STRETCH)) || (pParms->pLookup) || (pParms->pConvert) ) )

  00204	e5943024	 ldr         r3, [r4, #0x24]
  00208	e313001c	 tst         r3, #0x1C
  0020c	1a000014	 bne         |$LN2@WrappedEmu|
  00210	e594303c	 ldr         r3, [r4, #0x3C]
  00214	e3530000	 cmp         r3, #0
  00218	1a000011	 bne         |$LN2@WrappedEmu|
  0021c	e5943040	 ldr         r3, [r4, #0x40]
  00220	e3530000	 cmp         r3, #0
  00224	1a00000e	 bne         |$LN2@WrappedEmu|

; 1009 :         {
; 1010 :             if ( pParms->rop4 == 0xf0f0 )

  00228	e5943028	 ldr         r3, [r4, #0x28]
  0022c	e1530006	 cmp         r3, r6
  00230	1a00000b	 bne         |$LN2@WrappedEmu|

; 1011 :             {
; 1012 :                 if ( EGPEFormatToBpp[pParms->pDst->Format()] == 16 )

  00234	e5943004	 ldr         r3, [r4, #4]
  00238	e593301c	 ldr         r3, [r3, #0x1C]
  0023c	e7973103	 ldr         r3, [r7, +r3, lsl #2]
  00240	e3530010	 cmp         r3, #0x10
  00244	1a000006	 bne         |$LN2@WrappedEmu|

; 1013 :                 {
; 1014 :                     if (pParms->solidColor != -1)

  00248	e5941020	 ldr         r1, [r4, #0x20]
  0024c	e3710001	 cmn         r1, #1
  00250	0a000003	 beq         |$LN2@WrappedEmu|

; 1015 :                     {    // must be a solid colored brush
; 1016 :                         DispDrvrDirtyRectDump_rectfill((LPRECT)&bounds,pParms->solidColor);

  00254	e28d0000	 add         r0, sp, #0
  00258	eb000000	 bl          DispDrvrDirtyRectDump_rectfill
  0025c	e3a05000	 mov         r5, #0
  00260	ea000002	 b           |$LN35@WrappedEmu|
  00264		 |$LN2@WrappedEmu|

; 1017 :                         return S_OK;
; 1018 :                     }
; 1019 :                 }
; 1020 :             }
; 1021 :         }
; 1022 : 
; 1023 :         if(FAILED(code))

  00264	e3550000	 cmp         r5, #0

; 1024 :         {
; 1025 :             return code;
; 1026 :         }
; 1027 : 
; 1028 :         DispDrvrDirtyRectDump((LPRECT)&bounds);

  00268	528d0000	 addpl       r0, sp, #0
  0026c	5b000000	 blpl        DispDrvrDirtyRectDump
  00270		 |$LN35@WrappedEmu|

; 1029 :     }
; 1030 : 
; 1031 :     return code;
; 1032 : }

  00270	e1a00005	 mov         r0, r5
  00274	e28dd010	 add         sp, sp, #0x10
  00278	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0027c	e12fff1e	 bx          lr
  00280		 |$LN54@WrappedEmu|
  00280		 |$LN55@WrappedEmu|
  00280	00000000	 DCD         |gDrawCursorFlag|
  00284		 |$LN56@WrappedEmu|
  00284	00000000	 DCD         |bDoRotation|
  00288		 |$LN57@WrappedEmu|
  00288	00000000	 DCD         |EGPEFormatToBpp|
  0028c		 |$M38975|

			 ENDP  ; |?WrappedEmulatedBlt@SA2Video@@AAAJPAUGPEBltParms@@@Z|, SA2Video::WrappedEmulatedBlt

	EXPORT	|?InVBlank@SA2Video@@UAAHXZ|		; SA2Video::InVBlank

  00000			 AREA	 |.bss|, NOINIT
|?value@?1??InVBlank@SA2Video@@UAAHXZ@4HA| % 0x4	; `SA2Video::InVBlank'::`2'::value

  00000			 AREA	 |.pdata|, PDATA
|$T38993| DCD	|$LN8@InVBlank|
	DCD	0x40000900
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?InVBlank@SA2Video@@UAAHXZ| PROC	; SA2Video::InVBlank

; 1144 : {

  00000		 |$LN8@InVBlank|
  00000		 |$M38990|

; 1145 :     static    BOOL    value = FALSE;
; 1146 :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("SA2Video::InVBlank\r\n")));
; 1147 :     value = !value;

  00000	e59f2018	 ldr         r2, [pc, #0x18]
  00004	e5923000	 ldr         r3, [r2]
  00008	e3530000	 cmp         r3, #0
  0000c	03a00001	 moveq       r0, #1
  00010	05820000	 streq       r0, [r2]
  00014	13a00000	 movne       r0, #0
  00018	15820000	 strne       r0, [r2]

; 1148 :     return value;
; 1149 : }

  0001c	e12fff1e	 bx          lr
  00020		 |$LN9@InVBlank|
  00020		 |$LN10@InVBlank|
  00020	00000000	 DCD         |?value@?1??InVBlank@SA2Video@@UAAHXZ@4HA|
  00024		 |$M38991|

			 ENDP  ; |?InVBlank@SA2Video@@UAAHXZ|, SA2Video::InVBlank

	EXPORT	|?SetPalette@SA2Video@@UAAJPBUtagPALETTEENTRY@@GG@Z| ; SA2Video::SetPalette
	IMPORT	|DispDrvrSetPalette|

  00000			 AREA	 |.pdata|, PDATA
|$T39008| DCD	|$LN8@SetPalette|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPalette@SA2Video@@UAAJPBUtagPALETTEENTRY@@GG@Z| PROC ; SA2Video::SetPalette

; 1157 : {

  00000		 |$LN8@SetPalette|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39005|
  00004	e1a0e002	 mov         lr, r2
  00008	e1a04001	 mov         r4, r1

; 1158 :     if (bpp == 8)

  0000c	e59f0040	 ldr         r0, [pc, #0x40]
  00010	e5900000	 ldr         r0, [r0]
  00014	e3500008	 cmp         r0, #8
  00018	1a000006	 bne         |$LN3@SetPalette|

; 1159 :     {
; 1160 :         if (firstEntry < 0 || firstEntry + numEntries > 256)

  0001c	e08e0003	 add         r0, lr, r3
  00020	e3500c01	 cmp         r0, #1, 24
  00024	ca000006	 bgt         |$LN1@SetPalette|

; 1163 :         }
; 1164 : 
; 1165 :         DispDrvrSetPalette(source,firstEntry,numEntries);

  00028	e1a02003	 mov         r2, r3
  0002c	e1a0100e	 mov         r1, lr
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          DispDrvrSetPalette
  00038		 |$LN3@SetPalette|

; 1166 :     }
; 1167 : 
; 1168 :     return S_OK;

  00038	e3a00000	 mov         r0, #0

; 1169 : }

  0003c	e8bd4010	 ldmia       sp!, {r4, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$LN1@SetPalette|

; 1161 :         {
; 1162 :             return E_INVALIDARG;

  00044	e59f0004	 ldr         r0, [pc, #4]

; 1169 : }

  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$LN9@SetPalette|
  00050		 |$LN10@SetPalette|
  00050	80070057	 DCD         0x80070057
  00054		 |$LN11@SetPalette|
  00054	00000000	 DCD         |bpp|
  00058		 |$M39006|

			 ENDP  ; |?SetPalette@SA2Video@@UAAJPBUtagPALETTEENTRY@@GG@Z|, SA2Video::SetPalette

	EXPORT	|DrvGetMasks|

  00000			 AREA	 |.pdata|, PDATA
|$T39020| DCD	|$LN5@DrvGetMask|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DrvGetMasks| PROC

; 1176 : {

  00000		 |$LN5@DrvGetMask|
  00000		 |$M39017|

; 1177 :     return BitMasks;

  00000	e59f0000	 ldr         r0, [pc]

; 1178 : }

  00004	e12fff1e	 bx          lr
  00008		 |$LN6@DrvGetMask|
  00008		 |$LN7@DrvGetMask|
  00008	00000000	 DCD         |?BitMasks@@3PAKA|
  0000c		 |$M39018|

			 ENDP  ; |DrvGetMasks|

	EXPORT	|?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z| ; SA2Video::PmToVideoPowerState

  00000			 AREA	 |.pdata|, PDATA
|$T39033| DCD	|$LN12@PmToVideoP|
	DCD	0x40001200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z| PROC ; SA2Video::PmToVideoPowerState

; 1184 : {

  00000		 |$LN12@PmToVideoP|
  00000		 |$M39030|
  00000	e3510000	 cmp         r1, #0

; 1185 :     ULONG PowerState;
; 1186 : 
; 1187 :     switch( Dx )

  00004	4a00000d	 bmi         |$LN1@PmToVideoP|
  00008	e3510001	 cmp         r1, #1
  0000c	da00000b	 ble         |$LN1@PmToVideoP|
  00010	e3510002	 cmp         r1, #2
  00014	0a000007	 beq         |$LN4@PmToVideoP|
  00018	e3510003	 cmp         r1, #3
  0001c	0a000003	 beq         |$LN3@PmToVideoP|
  00020	e3510004	 cmp         r1, #4
  00024	1a000005	 bne         |$LN1@PmToVideoP|

; 1200 :             break;
; 1201 : 
; 1202 :         case D4:
; 1203 :             PowerState = VideoPowerOff;

  00028	e3a00004	 mov         r0, #4

; 1208 :             break;
; 1209 :     }
; 1210 : 
; 1211 :     return(PowerState);
; 1212 : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN3@PmToVideoP|

; 1196 :             break;
; 1197 : 
; 1198 :         case D3:
; 1199 :             PowerState = VideoPowerSuspend;

  00030	e3a00003	 mov         r0, #3

; 1208 :             break;
; 1209 :     }
; 1210 : 
; 1211 :     return(PowerState);
; 1212 : }

  00034	e12fff1e	 bx          lr
  00038		 |$LN4@PmToVideoP|

; 1188 :     {
; 1189 :         case D0:
; 1190 :         case D1:
; 1191 :             PowerState = VideoPowerOn;
; 1192 :             break;
; 1193 : 
; 1194 :         case D2:
; 1195 :             PowerState = VideoPowerStandBy;

  00038	e3a00002	 mov         r0, #2

; 1208 :             break;
; 1209 :     }
; 1210 : 
; 1211 :     return(PowerState);
; 1212 : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN1@PmToVideoP|

; 1204 :             break;
; 1205 : 
; 1206 :         default:
; 1207 :             PowerState = VideoPowerOn;

  00040	e3a00001	 mov         r0, #1

; 1208 :             break;
; 1209 :     }
; 1210 : 
; 1211 :     return(PowerState);
; 1212 : }

  00044	e12fff1e	 bx          lr
  00048		 |$M39031|

			 ENDP  ; |?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z|, SA2Video::PmToVideoPowerState

	EXPORT	|?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z| ; SA2Video::VideoToPmPowerState

  00000			 AREA	 |.pdata|, PDATA
|$T39044| DCD	|$LN12@VideoToPmP|
	DCD	0x40001000
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z| PROC ; SA2Video::VideoToPmPowerState

; 1218 : {

  00000		 |$LN12@VideoToPmP|
  00000		 |$M39041|

; 1219 :     CEDEVICE_POWER_STATE Dx;
; 1220 : 
; 1221 :     switch( PowerState )

  00000	e3510001	 cmp         r1, #1
  00004	0a00000b	 beq         |$LN5@VideoToPmP|
  00008	e3510002	 cmp         r1, #2
  0000c	0a000007	 beq         |$LN4@VideoToPmP|
  00010	e3510003	 cmp         r1, #3
  00014	0a000003	 beq         |$LN3@VideoToPmP|
  00018	e3510004	 cmp         r1, #4

; 1237 :             break;
; 1238 : 
; 1239 :         default:
; 1240 :             Dx = D0;
; 1241 :             break;

  0001c	1a000005	 bne         |$LN5@VideoToPmP|

; 1233 :             break;
; 1234 : 
; 1235 :         case VideoPowerOff:
; 1236 :             Dx = D4;

  00020	e3a00004	 mov         r0, #4

; 1242 :     }
; 1243 : 
; 1244 :     return Dx;
; 1245 : }

  00024	e12fff1e	 bx          lr
  00028		 |$LN3@VideoToPmP|

; 1229 :             break;
; 1230 : 
; 1231 :         case VideoPowerSuspend:
; 1232 :             Dx = D3;

  00028	e3a00003	 mov         r0, #3

; 1242 :     }
; 1243 : 
; 1244 :     return Dx;
; 1245 : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN4@VideoToPmP|

; 1225 :             break;
; 1226 : 
; 1227 :         case VideoPowerStandBy:
; 1228 :             Dx = D2;

  00030	e3a00002	 mov         r0, #2

; 1242 :     }
; 1243 : 
; 1244 :     return Dx;
; 1245 : }

  00034	e12fff1e	 bx          lr
  00038		 |$LN5@VideoToPmP|

; 1222 :     {
; 1223 :         case VideoPowerOn:
; 1224 :             Dx = D0;

  00038	e3a00000	 mov         r0, #0

; 1242 :     }
; 1243 : 
; 1244 :     return Dx;
; 1245 : }

  0003c	e12fff1e	 bx          lr
  00040		 |$M39042|

			 ENDP  ; |?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z|, SA2Video::VideoToPmPowerState

	EXPORT	|?SetPmPowerState@SA2Video@@AAAXW4_CEDEVICE_POWER_STATE@@@Z| ; SA2Video::SetPmPowerState

  00000			 AREA	 |.pdata|, PDATA
|$T39054| DCD	|$LN12@SetPmPower|
	DCD	0x40001c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPmPowerState@SA2Video@@AAAXW4_CEDEVICE_POWER_STATE@@@Z| PROC ; SA2Video::SetPmPowerState

; 1248 : {

  00000		 |$LN12@SetPmPower|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M39051|
  00004	e1b04001	 movs        r4, r1
  00008	e1a06000	 mov         r6, r0

; 1249 :     DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SetPmPowerState: (D%d)\r\n"), PowerState));
; 1250 :     switch ( PowerState )

  0000c	4a000013	 bmi         |$LN3@SetPmPower|
  00010	e3540001	 cmp         r4, #1
  00014	da000009	 ble         |$LN4@SetPmPower|
  00018	e3540004	 cmp         r4, #4
  0001c	ca00000f	 bgt         |$LN3@SetPmPower|

; 1259 :             }
; 1260 :             break;
; 1261 : 
; 1262 :         case D2:
; 1263 :         case D3:
; 1264 :         case D4:
; 1265 :             if (!bSuspended)

  00020	e59f5044	 ldr         r5, [pc, #0x44]
  00024	e5953000	 ldr         r3, [r5]
  00028	e3530000	 cmp         r3, #0
  0002c	1a00000b	 bne         |$LN3@SetPmPower|

; 1266 :             {
; 1267 :                 DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SetPmPowerState: TurnOff Display %d\r\n"), PowerState));
; 1268 :                 DispDrvrPowerHandler(TRUE);

  00030	e3a00001	 mov         r0, #1
  00034	eb000000	 bl          DispDrvrPowerHandler

; 1269 :                 bSuspended = TRUE;

  00038	e3a03001	 mov         r3, #1

; 1270 :             }
; 1271 :             break;

  0003c	ea000006	 b           |$LN9@SetPmPower|
  00040		 |$LN4@SetPmPower|

; 1251 :     {
; 1252 :         case D0:
; 1253 :         case D1:
; 1254 :             if (bSuspended)

  00040	e59f5024	 ldr         r5, [pc, #0x24]
  00044	e5953000	 ldr         r3, [r5]
  00048	e3530000	 cmp         r3, #0
  0004c	0a000003	 beq         |$LN3@SetPmPower|

; 1255 :             {
; 1256 :                 DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SetPmPowerState: TurnOn Display %d\r\n"), PowerState));
; 1257 :                 DispDrvrPowerHandler(FALSE);

  00050	e3a00000	 mov         r0, #0
  00054	eb000000	 bl          DispDrvrPowerHandler

; 1258 :                 bSuspended = FALSE;

  00058	e3a03000	 mov         r3, #0
  0005c		 |$LN9@SetPmPower|
  0005c	e5853000	 str         r3, [r5]
  00060		 |$LN3@SetPmPower|

; 1272 :     }
; 1273 : 
; 1274 :     m_PmPowerState = PowerState;

  00060	e5864248	 str         r4, [r6, #0x248]

; 1275 : }

  00064	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$LN13@SetPmPower|
  0006c		 |$LN14@SetPmPower|
  0006c	00000000	 DCD         |?bSuspended@@3HA|
  00070		 |$M39052|

			 ENDP  ; |?SetPmPowerState@SA2Video@@AAAXW4_CEDEVICE_POWER_STATE@@@Z|, SA2Video::SetPmPowerState

	EXPORT	|?GetPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@XZ| ; SA2Video::GetPmPowerState

  00000			 AREA	 |.pdata|, PDATA
|$T39066| DCD	|$LN5@GetPmPower|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@XZ| PROC ; SA2Video::GetPmPowerState

; 1279 : {

  00000		 |$LN5@GetPmPower|
  00000		 |$M39063|

; 1280 :     return(m_PmPowerState);

  00000	e5900248	 ldr         r0, [r0, #0x248]

; 1281 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M39064|

			 ENDP  ; |?GetPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@XZ|, SA2Video::GetPmPowerState

	EXPORT	|?GetVideoPowerState@SA2Video@@AAAKXZ|	; SA2Video::GetVideoPowerState

  00000			 AREA	 |.pdata|, PDATA
|$T39076| DCD	|$LN5@GetVideoPo|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetVideoPowerState@SA2Video@@AAAKXZ| PROC ; SA2Video::GetVideoPowerState

; 1285 : {

  00000		 |$LN5@GetVideoPo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39073|

; 1286 :     return( PmToVideoPowerState(m_PmPowerState) );

  00004	e5901248	 ldr         r1, [r0, #0x248]
  00008	eb000000	 bl          |?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z|

; 1287 : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M39074|

			 ENDP  ; |?GetVideoPowerState@SA2Video@@AAAKXZ|, SA2Video::GetVideoPowerState

	EXPORT	|?ConvertStringToGuid@SA2Video@@AAAHPBGPAU_GUID@@@Z| ; SA2Video::ConvertStringToGuid
	EXPORT	|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| [ DATA ] ; `string'
	IMPORT	|swscanf|
	IMPORT	|__C_specific_handler|

  00000			 AREA	 |.pdata|, PDATA
|$T39104| DCD	|$LN23@ConvertStr|
	DCD	0xc0003204

  00000			 AREA	 |.pdata|, PDATA
|$T39106| DCD	|$LN9@ConvertStr|
	DCD	0x40000602

  00000			 AREA	 |.xdata|, DATA
|$T39102| DCD	0x1
	DCD	|$LN13@ConvertStr|
	DCD	|$LN14@ConvertStr|
	DCD	|$LN9@ConvertStr|
	DCD	|$LN10@ConvertStr|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| DCB "{"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, "-"
	DCB	0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, "-", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "}", 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T39102|

  00008		 |?ConvertStringToGuid@SA2Video@@AAAHPBGPAU_GUID@@@Z| PROC ; SA2Video::ConvertStringToGuid

; 1293 : {

  00008		 |$LN23@ConvertStr|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  00010	e28db028	 add         r11, sp, #0x28
  00014	e24dd050	 sub         sp, sp, #0x50
  00018		 |$LN21@ConvertStr|
  00018	e50b2050	 str         r2, [r11, #-0x50]
  0001c	e1a00001	 mov         r0, r1

; 1294 :     UINT Data4[8];
; 1295 :     int  Count;
; 1296 :     BOOL fOk = FALSE;

  00020	e3a03000	 mov         r3, #0
  00024	e50b3054	 str         r3, [r11, #-0x54]
  00028		 |$LN13@ConvertStr|

; 1297 :     TCHAR *pszGuidFormat = _T("{%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}");
; 1298 : 
; 1299 :     DEBUGCHK(pGuid != NULL && pszGuid != NULL);
; 1300 :     __try
; 1301 :     {
; 1302 :         if (_stscanf(pszGuid, pszGuidFormat, &pGuid->Data1,
; 1303 :             &pGuid->Data2, &pGuid->Data3, &Data4[0], &Data4[1], &Data4[2], &Data4[3],
; 1304 :             &Data4[4], &Data4[5], &Data4[6], &Data4[7]) == 11)

  00028	e59f10b4	 ldr         r1, [pc, #0xB4]
  0002c	e24be02c	 sub         lr, r11, #0x2C
  00030	e24b4030	 sub         r4, r11, #0x30
  00034	e24b5034	 sub         r5, r11, #0x34
  00038	e24b6038	 sub         r6, r11, #0x38
  0003c	e24b703c	 sub         r7, r11, #0x3C
  00040	e24b8040	 sub         r8, r11, #0x40
  00044	e24b9044	 sub         r9, r11, #0x44
  00048	e24ba048	 sub         r10, r11, #0x48
  0004c	e2823004	 add         r3, r2, #4
  00050	e58de020	 str         lr, [sp, #0x20]
  00054	e58d401c	 str         r4, [sp, #0x1C]
  00058	e58d5018	 str         r5, [sp, #0x18]
  0005c	e58d6014	 str         r6, [sp, #0x14]
  00060	e58d7010	 str         r7, [sp, #0x10]
  00064	e58d800c	 str         r8, [sp, #0xC]
  00068	e58d9008	 str         r9, [sp, #8]
  0006c	e58da004	 str         r10, [sp, #4]
  00070	e51b4050	 ldr         r4, [r11, #-0x50]
  00074	e284e006	 add         lr, r4, #6
  00078	e58de000	 str         lr, [sp]
  0007c	eb000000	 bl          swscanf
  00080	e350000b	 cmp         r0, #0xB
  00084	1a000008	 bne         |$LN1@ConvertStr|

; 1305 :         {
; 1306 :             for(Count = 0; Count < (sizeof(Data4) / sizeof(Data4[0])); Count++)

  00088	e3a01000	 mov         r1, #0
  0008c		 |$LN20@ConvertStr|
  0008c	e50b104c	 str         r1, [r11, #-0x4C]
  00090	e3510008	 cmp         r1, #8

; 1307 :             {
; 1308 :                         pGuid->Data4[Count] = (UCHAR) Data4[Count];

  00094	324b3048	 subcc       r3, r11, #0x48
  00098	37932101	 ldrcc       r2, [r3, +r1, lsl #2]
  0009c	30813004	 addcc       r3, r1, r4
  000a0	35c32008	 strccb      r2, [r3, #8]
  000a4	32811001	 addcc       r1, r1, #1

; 1305 :         {
; 1306 :             for(Count = 0; Count < (sizeof(Data4) / sizeof(Data4[0])); Count++)

  000a8	3afffff7	 bcc         |$LN20@ConvertStr|
  000ac		 |$LN1@ConvertStr|

; 1309 :             }
; 1310 :         }
; 1311 :         fOk = TRUE;

  000ac	e3a00001	 mov         r0, #1
  000b0	e50b0054	 str         r0, [r11, #-0x54]
  000b4		 |$LN14@ConvertStr|

; 1312 :     }

  000b4	ea000002	 b           |$LN6@ConvertStr|
  000b8		 |$LN10@ConvertStr|

; 1313 :     __except(EXCEPTION_EXECUTE_HANDLER)

  000b8	e51b0054	 ldr         r0, [r11, #-0x54]
  000bc	ea000000	 b           |$LN6@ConvertStr|
  000c0		 |$LN19@ConvertStr|

; 1314 :     {
; 1315 :     }
; 1316 : 
; 1317 :     return fOk;

  000c0	e51b0050	 ldr         r0, [r11, #-0x50]
  000c4		 |$LN6@ConvertStr|

; 1318 : }

  000c4	e24bd028	 sub         sp, r11, #0x28
  000c8	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  000cc	e12fff1e	 bx          lr

			 ENDP  ; |?ConvertStringToGuid@SA2Video@@AAAHPBGPAU_GUID@@@Z|, SA2Video::ConvertStringToGuid

  000d0		 |$LN9@ConvertStr|
  000d0		 |$LN22@ConvertStr|

; 1313 :     __except(EXCEPTION_EXECUTE_HANDLER)

  000d0	e52de004	 str         lr, [sp, #-4]!
  000d4	e24dd024	 sub         sp, sp, #0x24
  000d8		 |$LN12@ConvertStr|
  000d8		 |$LN25@ConvertStr|
  000d8	e3a00001	 mov         r0, #1
  000dc		 |$LN11@ConvertStr|
  000dc	e28dd024	 add         sp, sp, #0x24
  000e0	e49df004	 ldr         pc, [sp], #4
  000e4		 |$LN27@ConvertStr|
  000e4		 |$LN28@ConvertStr|
  000e4	00000000	 DCD         |??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@|
  000e8		 |$LN26@ConvertStr|
  000e8		 |$LN24@ConvertStr|
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?AdvertisePowerInterface@SA2Video@@AAAHXZ| ; SA2Video::AdvertisePowerInterface
	EXPORT	|??_C@_1NK@KKMLOGOP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LK@BENOMAIB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|DevicePowerNotify|
	IMPORT	|AdvertiseInterface|
	IMPORT	|StringCchCatW|
	IMPORT	|StringCchCopyW|
	IMPORT	|GetModuleFileNameW|
	IMPORT	|g_hmodDisplayDll|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_cookie|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T39135| DCD	|$LN14@AdvertiseP|
	DCD	0xc0004002

  00000			 AREA	 |.xdata|, DATA
|$T39131| DCD	0xfffffff0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1NK@KKMLOGOP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "d", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "i", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, " ", 0x0, "n", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, ".", 0x0, " ", 0x0, "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@| DCB "\\", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LK@BENOMAIB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "d", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "o", 0x0, "b", 0x0, "t", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "D", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "n", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "."
	DCB	0x0, " ", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| DCB "{"
	DCB	0x0, "E", 0x0, "B", 0x0, "9", 0x0, "1", 0x0, "C", 0x0, "7"
	DCB	0x0, "C", 0x0, "9", 0x0, "-", 0x0, "8", 0x0, "B", 0x0, "F"
	DCB	0x0, "6", 0x0, "-", 0x0, "4", 0x0, "a", 0x0, "2", 0x0, "d"
	DCB	0x0, "-", 0x0, "9", 0x0, "A", 0x0, "B", 0x0, "8", 0x0, "-"
	DCB	0x0, "6", 0x0, "9", 0x0, "7", 0x0, "2", 0x0, "4", 0x0, "E"
	DCB	0x0, "E", 0x0, "D", 0x0, "9", 0x0, "7", 0x0, "D", 0x0, "1"
	DCB	0x0, "}", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T39131|

  00008		 |?AdvertisePowerInterface@SA2Video@@AAAHXZ| PROC ; SA2Video::AdvertisePowerInterface

; 1325 : {

  00008		 |$LN14@AdvertiseP|
  00008	e92d4030	 stmdb       sp!, {r4, r5, lr}
  0000c	e24ddf87	 sub         sp, sp, #0x87, 30
  00010		 |$M39132|
  00010	e1a04000	 mov         r4, r0
  00014	e59f30e8	 ldr         r3, [pc, #0xE8]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3218	 str         r3, [sp, #0x218]

; 1326 :     BOOL fOk = FALSE;
; 1327 :     DWORD dwStatus;
; 1328 :     GUID gClass;
; 1329 :     TCHAR szModuleFileName[MAX_PATH];
; 1330 : 
; 1331 :     // PM assumes device is in power state D0 when it registers.
; 1332 :     m_PmPowerState    = D0;
; 1333 : 
; 1334 :     // assume we are advertising the default class
; 1335 :     ConvertStringToGuid(PMCLASS_DISPLAY, &gClass);

  00020	e59f10d0	 ldr         r1, [pc, #0xD0]
  00024	e3a03000	 mov         r3, #0
  00028	e28d2000	 add         r2, sp, #0
  0002c	e5843248	 str         r3, [r4, #0x248]
  00030	eb000000	 bl          |?ConvertStringToGuid@SA2Video@@AAAHPBGPAU_GUID@@@Z|

; 1336 :     DEBUGMSG(ZONE_PM,(TEXT("SA2Video::AdvertisePowerInterface: (%s)\r\n"), PMCLASS_DISPLAY));
; 1337 :     DEBUGMSG(ZONE_PM,(TEXT("SA2Video::AdvertisePowerInterface: 0x%x-0x%x-0x%x 0x%x-0x%x-0x%x-0x%x-0x%x-0x%x-0x%x-0x%x\r\n"),
; 1338 :                              gClass.Data1, gClass.Data2, gClass.Data3,
; 1339 :                              gClass.Data4[0], gClass.Data4[1], gClass.Data4[2], gClass.Data4[3],
; 1340 :                              gClass.Data4[4], gClass.Data4[5], gClass.Data4[6], gClass.Data4[7]));
; 1341 : 
; 1342 :     // Figure out what device name to advertise
; 1343 :     // Note - g_hmodDisplayDll is initialized in the DLL_PROCESS_ATTACH of DllMain()
; 1344 :     fOk = GetModuleFileName(g_hmodDisplayDll, szModuleFileName, sizeof(szModuleFileName) / sizeof(szModuleFileName[0]));

  00034	e59f30c4	 ldr         r3, [pc, #0xC4]
  00038	e3a02f41	 mov         r2, #0x41, 30
  0003c	e28d1010	 add         r1, sp, #0x10
  00040	e5930000	 ldr         r0, [r3]
  00044	eb000000	 bl          GetModuleFileNameW
  00048	e3500000	 cmp         r0, #0

; 1345 :     if (!fOk) 
; 1346 :     {
; 1347 :         RETAILMSG(1,(TEXT("SA2Video::AdvertisePowerInterface: Failed to obtain DLL name. Driver is not power managed!\r\n")));

  0004c	059f00a8	 ldreq       r0, [pc, #0xA8]
  00050	0a00001e	 beq         |$LN11@AdvertiseP|

; 1348 :         return FALSE;
; 1349 :     }
; 1350 : 
; 1351 :     // Build the display device name for DevicePowerNotify().
; 1352 :     if( FAILED(StringCchCopy(m_DisplayDeviceName, sizeof(m_DisplayDeviceName)/sizeof(m_DisplayDeviceName[0]), PMCLASS_DISPLAY))||
; 1353 :         FAILED(StringCchCat(m_DisplayDeviceName, sizeof(m_DisplayDeviceName)/sizeof(m_DisplayDeviceName[0]), _T("\\"))) ||
; 1354 :         FAILED(StringCchCat(m_DisplayDeviceName, sizeof(m_DisplayDeviceName)/sizeof(m_DisplayDeviceName[0]), szModuleFileName))  )

  00054	e59f209c	 ldr         r2, [pc, #0x9C]
  00058	e2840040	 add         r0, r4, #0x40
  0005c	e3a01f41	 mov         r1, #0x41, 30
  00060	eb000000	 bl          StringCchCopyW
  00064	e3500000	 cmp         r0, #0
  00068	4a000017	 bmi         |$LN2@AdvertiseP|
  0006c	e59f2080	 ldr         r2, [pc, #0x80]
  00070	e3a01f41	 mov         r1, #0x41, 30
  00074	e2840040	 add         r0, r4, #0x40
  00078	eb000000	 bl          StringCchCatW
  0007c	e3500000	 cmp         r0, #0
  00080	4a000011	 bmi         |$LN2@AdvertiseP|
  00084	e28d2010	 add         r2, sp, #0x10
  00088	e3a01f41	 mov         r1, #0x41, 30
  0008c	e2840040	 add         r0, r4, #0x40
  00090	eb000000	 bl          StringCchCatW
  00094	e3500000	 cmp         r0, #0
  00098	4a00000b	 bmi         |$LN2@AdvertiseP|

; 1358 :     }
; 1359 :     DEBUGMSG(ZONE_PM,(TEXT("SA2Video::AdvertisePowerInterface: m_DisplayDeviceName=%s\r\n"),m_DisplayDeviceName));
; 1360 : 
; 1361 :     // now advertise the interface
; 1362 :     fOk = AdvertiseInterface(&gClass, szModuleFileName, TRUE);

  0009c	e3a02001	 mov         r2, #1
  000a0	e28d1010	 add         r1, sp, #0x10
  000a4	e28d0000	 add         r0, sp, #0
  000a8	eb000000	 bl          AdvertiseInterface
  000ac	e1b05000	 movs        r5, r0

; 1363 : 
; 1364 :     if(fOk)
; 1365 :     {
; 1366 :         // Request initial power management state.
; 1367 :         dwStatus = DevicePowerNotify(m_DisplayDeviceName, m_PmPowerState, POWER_NAME);

  000b0	15941248	 ldrne       r1, [r4, #0x248]
  000b4	13a02001	 movne       r2, #1
  000b8	12840040	 addne       r0, r4, #0x40
  000bc	1b000000	 blne        DevicePowerNotify

; 1368 :         DEBUGMSG(ZONE_PM,(TEXT("SA2Video::AdvertisePowerInterface: dwStatus=0x%x\r\n"), dwStatus));
; 1369 :     }
; 1370 : 
; 1371 :     return fOk;

  000c0	e59d0218	 ldr         r0, [sp, #0x218]
  000c4	eb000000	 bl          __security_check_cookie
  000c8	ea000004	 b           |$LN5@AdvertiseP|
  000cc		 |$LN2@AdvertiseP|

; 1355 :     {
; 1356 :         RETAILMSG(1,(TEXT("SA2Video::AdvertisePowerInterface: Failed to construct unique name parameter. Driver is not power managed!\r\n")));

  000cc	e59f001c	 ldr         r0, [pc, #0x1C]
  000d0		 |$LN11@AdvertiseP|
  000d0	eb000000	 bl          NKDbgPrintfW

; 1357 :         return FALSE;

  000d4	e59d0218	 ldr         r0, [sp, #0x218]
  000d8	eb000000	 bl          __security_check_cookie
  000dc	e3a05000	 mov         r5, #0
  000e0		 |$LN5@AdvertiseP|

; 1372 : }

  000e0	e1a00005	 mov         r0, r5
  000e4	e28ddf87	 add         sp, sp, #0x87, 30
  000e8	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$LN15@AdvertiseP|
  000f0		 |$LN16@AdvertiseP|
  000f0	00000000	 DCD         |??_C@_1NK@KKMLOGOP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@|
  000f4		 |$LN17@AdvertiseP|
  000f4	00000000	 DCD         |??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@|
  000f8		 |$LN18@AdvertiseP|
  000f8	00000000	 DCD         |??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@|
  000fc		 |$LN19@AdvertiseP|
  000fc	00000000	 DCD         |??_C@_1LK@BENOMAIB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@|
  00100		 |$LN20@AdvertiseP|
  00100	00000000	 DCD         |g_hmodDisplayDll|
  00104		 |$LN21@AdvertiseP|
  00104	00000000	 DCD         |__security_cookie|
  00108		 |$M39133|

			 ENDP  ; |?AdvertisePowerInterface@SA2Video@@AAAHXZ|, SA2Video::AdvertisePowerInterface

	EXPORT	|?GetRotateModeFromReg@SA2Video@@QAAHXZ| ; SA2Video::GetRotateModeFromReg
	EXPORT	|??_C@_1M@FIJHFMPA@?$AAA?$AAN?$AAG?$AAL?$AAE?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@PNCEGBJC@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|

  00000			 AREA	 |.pdata|, PDATA
|$T39154| DCD	|$LN13@GetRotateM|
	DCD	0x40003202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FIJHFMPA@?$AAA?$AAN?$AAG?$AAL?$AAE?$AA?$AA@| DCB "A", 0x0, "N", 0x0
	DCB	"G", 0x0, "L", 0x0, "E", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PNCEGBJC@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?$AA@| DCB "S"
	DCB	0x0, "Y", 0x0, "S", 0x0, "T", 0x0, "E", 0x0, "M", 0x0, "\\"
	DCB	0x0, "G", 0x0, "D", 0x0, "I", 0x0, "\\", 0x0, "R", 0x0, "O"
	DCB	0x0, "T", 0x0, "A", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetRotateModeFromReg@SA2Video@@QAAHXZ| PROC ; SA2Video::GetRotateModeFromReg

; 1679 : {

  00000		 |$LN13@GetRotateM|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M39151|

; 1680 :     HKEY hKey;
; 1681 :     int nRet = DMDO_0;
; 1682 : 
; 1683 :     if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\GDI\\ROTATION"),0,0, &hKey))

  00008	e59f10b4	 ldr         r1, [pc, #0xB4]
  0000c	e28de008	 add         lr, sp, #8
  00010	e3a03000	 mov         r3, #0
  00014	e3a02000	 mov         r2, #0
  00018	e3a0010a	 mov         r0, #0xA, 2
  0001c	e3a05000	 mov         r5, #0
  00020	e58de000	 str         lr, [sp]
  00024	eb000000	 bl          RegOpenKeyExW
  00028	e3500000	 cmp         r0, #0
  0002c	1a00001f	 bne         |$LN8@GetRotateM|

; 1684 :     {
; 1685 :         DWORD dwSize, dwAngle, dwType = REG_DWORD;
; 1686 :         dwSize = sizeof(DWORD);
; 1687 :         if (ERROR_SUCCESS == RegQueryValueEx(hKey,
; 1688 :                                                TEXT("ANGLE"),
; 1689 :                                                NULL,
; 1690 :                                                &dwType,
; 1691 :                                                (LPBYTE)&dwAngle,
; 1692 :                                                &dwSize))

  00030	e59f1088	 ldr         r1, [pc, #0x88]
  00034	e59d0008	 ldr         r0, [sp, #8]
  00038	e3a06004	 mov         r6, #4
  0003c	e3a07004	 mov         r7, #4
  00040	e28de010	 add         lr, sp, #0x10
  00044	e28d4014	 add         r4, sp, #0x14
  00048	e28d300c	 add         r3, sp, #0xC
  0004c	e3a02000	 mov         r2, #0
  00050	e58d600c	 str         r6, [sp, #0xC]
  00054	e58d7010	 str         r7, [sp, #0x10]
  00058	e58de004	 str         lr, [sp, #4]
  0005c	e58d4000	 str         r4, [sp]
  00060	eb000000	 bl          RegQueryValueExW
  00064	e3500000	 cmp         r0, #0
  00068	1a00000e	 bne         |$LN5@GetRotateM|

; 1693 :         {
; 1694 :             switch (dwAngle)

  0006c	e59d2014	 ldr         r2, [sp, #0x14]
  00070	e352005a	 cmp         r2, #0x5A
  00074	0a00000a	 beq         |$LN4@GetRotateM|
  00078	e35200b4	 cmp         r2, #0xB4
  0007c	0a000006	 beq         |$LN3@GetRotateM|
  00080	e3a03c01	 mov         r3, #1, 24
  00084	e383300e	 orr         r3, r3, #0xE
  00088	e1520003	 cmp         r2, r3

; 1705 :             case 0:
; 1706 :                 // fall through
; 1707 :             default:
; 1708 :                 nRet = DMDO_0;

  0008c	13a05000	 movne       r5, #0
  00090	1a000004	 bne         |$LN5@GetRotateM|

; 1702 :             case 270:
; 1703 :                 nRet = DMDO_270;

  00094	e3a05004	 mov         r5, #4

; 1704 :                 break;

  00098	ea000002	 b           |$LN5@GetRotateM|
  0009c		 |$LN3@GetRotateM|

; 1698 :                 break;
; 1699 :             case 180:
; 1700 :                 nRet = DMDO_180;

  0009c	e3a05002	 mov         r5, #2

; 1701 :                 break;

  000a0	ea000000	 b           |$LN5@GetRotateM|
  000a4		 |$LN4@GetRotateM|

; 1695 :             {
; 1696 :             case 90:
; 1697 :                 nRet = DMDO_90;

  000a4	e3a05001	 mov         r5, #1
  000a8		 |$LN5@GetRotateM|

; 1709 :                 break;
; 1710 :             }
; 1711 :         }
; 1712 : 
; 1713 :         RegCloseKey(hKey);

  000a8	e59d0008	 ldr         r0, [sp, #8]
  000ac	eb000000	 bl          RegCloseKey
  000b0		 |$LN8@GetRotateM|

; 1714 :     }
; 1715 : 
; 1716 :     return nRet;
; 1717 : }

  000b0	e1a00005	 mov         r0, r5
  000b4	e28dd018	 add         sp, sp, #0x18
  000b8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN14@GetRotateM|
  000c0		 |$LN15@GetRotateM|
  000c0	00000000	 DCD         |??_C@_1M@FIJHFMPA@?$AAA?$AAN?$AAG?$AAL?$AAE?$AA?$AA@|
  000c4		 |$LN16@GetRotateM|
  000c4	00000000	 DCD         |??_C@_1CI@PNCEGBJC@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?$AA@|
  000c8		 |$M39152|

			 ENDP  ; |?GetRotateModeFromReg@SA2Video@@QAAHXZ|, SA2Video::GetRotateModeFromReg

	EXPORT	|?SetRotateParams@SA2Video@@QAAXXZ|	; SA2Video::SetRotateParams

  00000			 AREA	 |.pdata|, PDATA
|$T39166| DCD	|$LN11@SetRotateP|
	DCD	0x40001500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetRotateParams@SA2Video@@QAAXXZ| PROC ; SA2Video::SetRotateParams

; 1721 : {

  00000		 |$LN11@SetRotateP|
  00000		 |$M39163|

; 1722 :     int iswap;
; 1723 :     switch(m_iRotate)

  00000	e5903018	 ldr         r3, [r0, #0x18]
  00004	e3530000	 cmp         r3, #0
  00008	0a00000c	 beq         |$LN4@SetRotateP|
  0000c	e3530001	 cmp         r3, #1
  00010	0a000003	 beq         |$LN2@SetRotateP|
  00014	e3530002	 cmp         r3, #2
  00018	0a000008	 beq         |$LN4@SetRotateP|
  0001c	e3530004	 cmp         r3, #4

; 1742 :         break;
; 1743 : 
; 1744 :     default:
; 1745 :         m_nScreenHeightSave = m_nScreenHeight;
; 1746 :         m_nScreenWidthSave = m_nScreenWidth;
; 1747 :         break;

  00020	1a000006	 bne         |$LN4@SetRotateP|
  00024		 |$LN2@SetRotateP|

; 1728 :         break;
; 1729 : 
; 1730 :     case DMDO_180:
; 1731 :         m_nScreenHeightSave = m_nScreenHeight;
; 1732 :         m_nScreenWidthSave = m_nScreenWidth;
; 1733 :         break;
; 1734 : 
; 1735 :     case DMDO_90:
; 1736 :     case DMDO_270:
; 1737 :         iswap = m_nScreenHeight;
; 1738 :         m_nScreenHeight = m_nScreenWidth;

  00024	e5903008	 ldr         r3, [r0, #8]
  00028	e590200c	 ldr         r2, [r0, #0xC]
  0002c	e580300c	 str         r3, [r0, #0xC]

; 1739 :         m_nScreenWidth = iswap;
; 1740 :         m_nScreenHeightSave = m_nScreenWidth;
; 1741 :         m_nScreenWidthSave = m_nScreenHeight;

  00030	e5802008	 str         r2, [r0, #8]
  00034	e5802020	 str         r2, [r0, #0x20]
  00038	e580301c	 str         r3, [r0, #0x1C]

; 1748 :     }
; 1749 : 
; 1750 :     return;
; 1751 : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN4@SetRotateP|

; 1724 :     {
; 1725 :     case DMDO_0:
; 1726 :         m_nScreenHeightSave = m_nScreenHeight;

  00040	e590300c	 ldr         r3, [r0, #0xC]

; 1727 :         m_nScreenWidthSave = m_nScreenWidth;

  00044	e5902008	 ldr         r2, [r0, #8]
  00048	e5803020	 str         r3, [r0, #0x20]
  0004c	e580201c	 str         r2, [r0, #0x1C]

; 1748 :     }
; 1749 : 
; 1750 :     return;
; 1751 : }

  00050	e12fff1e	 bx          lr
  00054		 |$M39164|

			 ENDP  ; |?SetRotateParams@SA2Video@@QAAXXZ|, SA2Video::SetRotateParams

	EXPORT	|?CursorOn@SA2Video@@QAAXXZ|		; SA2Video::CursorOn
	IMPORT	|?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|	; GPE::RotateRectl
	IMPORT	|gCursorMask|
	IMPORT	|gCursorData|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T39202| DCD	|$LN37@CursorOn|
	DCD	0x40008d02
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CursorOn@SA2Video@@QAAXXZ| PROC	; SA2Video::CursorOn

; 1800 : {

  00000		 |$LN37@CursorOn|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M39199|
  00008	e1a04000	 mov         r4, r0

; 1801 :     USHORT * ptrScreen = (USHORT *)m_pPrimarySurface->Buffer();

  0000c	e5943004	 ldr         r3, [r4, #4]

; 1802 :     USHORT * ptrLine;
; 1803 :     USHORT * cbsLine;
; 1804 : 
; 1805 :     if (!m_CursorForcedOff && !m_CursorDisabled && !m_CursorVisible)

  00010	e59422f0	 ldr         r2, [r4, #0x2F0]
  00014	e5936004	 ldr         r6, [r3, #4]
  00018	e3520000	 cmp         r2, #0
  0001c	e58d6004	 str         r6, [sp, #4]
  00020	1a00007e	 bne         |$LN18@CursorOn|
  00024	e59432e8	 ldr         r3, [r4, #0x2E8]
  00028	e3530000	 cmp         r3, #0
  0002c	1a00007b	 bne         |$LN18@CursorOn|
  00030	e59432ec	 ldr         r3, [r4, #0x2EC]
  00034	e3530000	 cmp         r3, #0
  00038	1a000078	 bne         |$LN18@CursorOn|

; 1806 :     {
; 1807 :         RECTL cursorRectSave = m_CursorRect;
; 1808 :         int   iRotate;
; 1809 : 
; 1810 :         RotateRectl(&m_CursorRect);

  0003c	e59482fc	 ldr         r8, [r4, #0x2FC]
  00040	e5949300	 ldr         r9, [r4, #0x300]
  00044	e594a304	 ldr         r10, [r4, #0x304]
  00048	e594b308	 ldr         r11, [r4, #0x308]
  0004c	e2841fbf	 add         r1, r4, #0xBF, 30
  00050	e58d8008	 str         r8, [sp, #8]
  00054	e58d900c	 str         r9, [sp, #0xC]
  00058	e58da010	 str         r10, [sp, #0x10]
  0005c	eb000000	 bl          |?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|

; 1811 :         for (int y = m_CursorRect.top; y < m_CursorRect.bottom; y++)

  00060	e594e300	 ldr         lr, [r4, #0x300]
  00064	e5943308	 ldr         r3, [r4, #0x308]
  00068	e15e0003	 cmp         lr, r3
  0006c	aa000066	 bge         |$LN28@CursorOn|
  00070	e59f81b8	 ldr         r8, [pc, #0x1B8]
  00074	e59f91b0	 ldr         r9, [pc, #0x1B0]
  00078		 |$LL17@CursorOn|

; 1812 :         {
; 1813 :             if (y < 0)

  00078	e35e0000	 cmp         lr, #0
  0007c	4a00005b	 bmi         |$LN16@CursorOn|

; 1814 :             {
; 1815 :                 continue;
; 1816 :             }
; 1817 :             if (y >= m_nScreenHeightSave)

  00080	e5943020	 ldr         r3, [r4, #0x20]
  00084	e15e0003	 cmp         lr, r3
  00088	aa00005c	 bge         |$LN32@CursorOn|

; 1818 :             {
; 1819 :                 break;
; 1820 :             }
; 1821 : 
; 1822 :             ptrLine = &ptrScreen[y * m_pPrimarySurface->Stride() / 2];

  0008c	e5943004	 ldr         r3, [r4, #4]

; 1823 :             cbsLine = &m_CursorBackingStore[(y - m_CursorRect.top) * m_CursorSize.x];

  00090	e5942300	 ldr         r2, [r4, #0x300]
  00094	e59412f4	 ldr         r1, [r4, #0x2F4]
  00098	e5930008	 ldr         r0, [r3, #8]
  0009c	e04e3002	 sub         r3, lr, r2
  000a0	e0020193	 mul         r2, r3, r1
  000a4	e0030e90	 mul         r3, r0, lr

; 1824 : 
; 1825 :             for (int x = m_CursorRect.left; x < m_CursorRect.right; x++)

  000a8	e2822c01	 add         r2, r2, #1, 24
  000ac	e59452fc	 ldr         r5, [r4, #0x2FC]
  000b0	e5941304	 ldr         r1, [r4, #0x304]
  000b4	e2822086	 add         r2, r2, #0x86
  000b8	e0833fa3	 add         r3, r3, r3, lsr #31
  000bc	e0842082	 add         r2, r4, r2, lsl #1
  000c0	e1a030c3	 mov         r3, r3, asr #1
  000c4	e58d2000	 str         r2, [sp]
  000c8	e0863083	 add         r3, r6, r3, lsl #1
  000cc	e1550001	 cmp         r5, r1
  000d0	aa000046	 bge         |$LN16@CursorOn|
  000d4	e0837085	 add         r7, r3, r5, lsl #1
  000d8	e1a0a002	 mov         r10, r2
  000dc		 |$LL12@CursorOn|

; 1826 :             {
; 1827 :                 if (x < 0)

  000dc	e3550000	 cmp         r5, #0
  000e0	4a00003c	 bmi         |$LN11@CursorOn|

; 1828 :                 {
; 1829 :                     continue;
; 1830 :                 }
; 1831 :                 if (x >= m_nScreenWidthSave)

  000e4	e594301c	 ldr         r3, [r4, #0x1C]
  000e8	e1550003	 cmp         r5, r3
  000ec	aa00003e	 bge         |$LN31@CursorOn|

; 1832 :                 {
; 1833 :                     break;
; 1834 :                 }
; 1835 : 
; 1836 :                 // x' = x - m_CursorRect.left; y' = y - m_CursorRect.top;
; 1837 :                 // Width = m_CursorSize.x;   Height = m_CursorSize.y;
; 1838 :                 switch (m_iRotate)

  000f0	e5943018	 ldr         r3, [r4, #0x18]

; 1848 :                         break;
; 1849 :                     case DMDO_270:
; 1850 :                         iRotate = (m_CursorSize.x -1 - (x - m_CursorRect.left))*m_CursorSize.x + y - m_CursorRect.top;
; 1851 :                         break;
; 1852 :                     default:
; 1853 :                         iRotate = (y - m_CursorRect.top)*m_CursorSize.x + x - m_CursorRect.left;

  000f4	e59462fc	 ldr         r6, [r4, #0x2FC]
  000f8	e3530000	 cmp         r3, #0
  000fc	0a000022	 beq         |$LN5@CursorOn|

; 1832 :                 {
; 1833 :                     break;
; 1834 :                 }
; 1835 : 
; 1836 :                 // x' = x - m_CursorRect.left; y' = y - m_CursorRect.top;
; 1837 :                 // Width = m_CursorSize.x;   Height = m_CursorSize.y;
; 1838 :                 switch (m_iRotate)

  00100	e3530001	 cmp         r3, #1
  00104	0a000016	 beq         |$LN4@CursorOn|
  00108	e3530002	 cmp         r3, #2
  0010c	0a00000a	 beq         |$LN3@CursorOn|

; 1848 :                         break;
; 1849 :                     case DMDO_270:
; 1850 :                         iRotate = (m_CursorSize.x -1 - (x - m_CursorRect.left))*m_CursorSize.x + y - m_CursorRect.top;
; 1851 :                         break;
; 1852 :                     default:
; 1853 :                         iRotate = (y - m_CursorRect.top)*m_CursorSize.x + x - m_CursorRect.left;

  00110	e59422f4	 ldr         r2, [r4, #0x2F4]
  00114	e3530004	 cmp         r3, #4

; 1854 :                         break;

  00118	1a00001c	 bne         |$LN33@CursorOn|
  0011c	e0463005	 sub         r3, r6, r5
  00120	e0833002	 add         r3, r3, r2
  00124	e2433001	 sub         r3, r3, #1
  00128	e5941300	 ldr         r1, [r4, #0x300]
  0012c	e0020293	 mul         r2, r3, r2
  00130	e0423001	 sub         r3, r2, r1
  00134	e083100e	 add         r1, r3, lr
  00138	ea000019	 b           |$LN6@CursorOn|
  0013c		 |$LN3@CursorOn|

; 1846 :                     case DMDO_180:
; 1847 :                         iRotate = (m_CursorSize.y - 1 - (y - m_CursorRect.top))*m_CursorSize.x + m_CursorSize.x - 1 - (x - m_CursorRect.left);

  0013c	e5943300	 ldr         r3, [r4, #0x300]
  00140	e59422f8	 ldr         r2, [r4, #0x2F8]
  00144	e59412f4	 ldr         r1, [r4, #0x2F4]
  00148	e043300e	 sub         r3, r3, lr
  0014c	e0833002	 add         r3, r3, r2
  00150	e0020193	 mul         r2, r3, r1
  00154	e0423005	 sub         r3, r2, r5
  00158	e0833006	 add         r3, r3, r6
  0015c	e2431001	 sub         r1, r3, #1
  00160	ea00000f	 b           |$LN6@CursorOn|
  00164		 |$LN4@CursorOn|

; 1842 :                         break;
; 1843 :                     case DMDO_90:
; 1844 :                         iRotate = (x - m_CursorRect.left)*m_CursorSize.x + m_CursorSize.y - 1 - (y - m_CursorRect.top);

  00164	e59422f4	 ldr         r2, [r4, #0x2F4]
  00168	e0453006	 sub         r3, r5, r6
  0016c	e5940300	 ldr         r0, [r4, #0x300]
  00170	e0020293	 mul         r2, r3, r2
  00174	e59412f8	 ldr         r1, [r4, #0x2F8]
  00178	e042300e	 sub         r3, r2, lr
  0017c	e0833000	 add         r3, r3, r0
  00180	e0833001	 add         r3, r3, r1
  00184	e2431001	 sub         r1, r3, #1

; 1845 :                         break;

  00188	ea000005	 b           |$LN6@CursorOn|
  0018c		 |$LN5@CursorOn|

; 1839 :                 {
; 1840 :                     case DMDO_0:
; 1841 :                         iRotate = (y - m_CursorRect.top)*m_CursorSize.x + x - m_CursorRect.left;

  0018c	e59422f4	 ldr         r2, [r4, #0x2F4]
  00190		 |$LN33@CursorOn|
  00190	e5943300	 ldr         r3, [r4, #0x300]
  00194	e04e3003	 sub         r3, lr, r3
  00198	e0020293	 mul         r2, r3, r2
  0019c	e0423006	 sub         r3, r2, r6
  001a0	e0831005	 add         r1, r3, r5
  001a4		 |$LN6@CursorOn|

; 1855 :                 }
; 1856 : 
; 1857 :                 cbsLine[x - m_CursorRect.left] = ptrLine[x];

  001a4	e1d720b0	 ldrh        r2, [r7]
  001a8	e0453006	 sub         r3, r5, r6
  001ac	e08a3083	 add         r3, r10, r3, lsl #1
  001b0	e1c320b0	 strh        r2, [r3]

; 1858 :                 ptrLine[x] &= gCursorMask[iRotate];

  001b4	e0893081	 add         r3, r9, r1, lsl #1
  001b8	e1d320b0	 ldrh        r2, [r3]
  001bc	e1d730b0	 ldrh        r3, [r7]

; 1859 :                 ptrLine[x] ^= gCursorData[iRotate];

  001c0	e0881081	 add         r1, r8, r1, lsl #1
  001c4	e0022003	 and         r2, r2, r3
  001c8	e1c720b0	 strh        r2, [r7]
  001cc	e1d130b0	 ldrh        r3, [r1]
  001d0	e0233002	 eor         r3, r3, r2
  001d4	e1c730b0	 strh        r3, [r7]
  001d8		 |$LN11@CursorOn|
  001d8	e5943304	 ldr         r3, [r4, #0x304]
  001dc	e2855001	 add         r5, r5, #1
  001e0	e2877002	 add         r7, r7, #2
  001e4	e1550003	 cmp         r5, r3
  001e8	baffffbb	 blt         |$LL12@CursorOn|
  001ec		 |$LN31@CursorOn|

; 1802 :     USHORT * ptrLine;
; 1803 :     USHORT * cbsLine;
; 1804 : 
; 1805 :     if (!m_CursorForcedOff && !m_CursorDisabled && !m_CursorVisible)

  001ec	e59d6004	 ldr         r6, [sp, #4]
  001f0		 |$LN16@CursorOn|

; 1811 :         for (int y = m_CursorRect.top; y < m_CursorRect.bottom; y++)

  001f0	e5943308	 ldr         r3, [r4, #0x308]
  001f4	e28ee001	 add         lr, lr, #1
  001f8	e15e0003	 cmp         lr, r3
  001fc	baffff9d	 blt         |$LL17@CursorOn|
  00200		 |$LN32@CursorOn|

; 1806 :     {
; 1807 :         RECTL cursorRectSave = m_CursorRect;
; 1808 :         int   iRotate;
; 1809 : 
; 1810 :         RotateRectl(&m_CursorRect);

  00200	e59d8008	 ldr         r8, [sp, #8]
  00204	e59d900c	 ldr         r9, [sp, #0xC]
  00208	e59da010	 ldr         r10, [sp, #0x10]
  0020c		 |$LN28@CursorOn|

; 1860 :             }
; 1861 :         }
; 1862 : 
; 1863 :         m_CursorRect    = cursorRectSave;
; 1864 :         m_CursorVisible = TRUE;

  0020c	e3a03001	 mov         r3, #1
  00210	e58432ec	 str         r3, [r4, #0x2EC]
  00214	e58482fc	 str         r8, [r4, #0x2FC]
  00218	e284cc03	 add         r12, r4, #3, 24
  0021c	e88c0e00	 stmia       r12, {r9 - r11}
  00220		 |$LN18@CursorOn|

; 1865 :     }
; 1866 : }

  00220	e28dd014	 add         sp, sp, #0x14
  00224	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00228	e12fff1e	 bx          lr
  0022c		 |$LN38@CursorOn|
  0022c		 |$LN39@CursorOn|
  0022c	00000000	 DCD         |gCursorMask|
  00230		 |$LN40@CursorOn|
  00230	00000000	 DCD         |gCursorData|
  00234		 |$M39200|

			 ENDP  ; |?CursorOn@SA2Video@@QAAXXZ|, SA2Video::CursorOn

	EXPORT	|?CursorOff@SA2Video@@QAAXXZ|		; SA2Video::CursorOff
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T39240| DCD	|$LN30@CursorOff|
	DCD	0x40004601
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?CursorOff@SA2Video@@QAAXXZ| PROC	; SA2Video::CursorOff

; 1870 : {

  00000		 |$LN30@CursorOff|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M39237|
  00004	e1a04000	 mov         r4, r0

; 1871 :     USHORT * ptrScreen = (USHORT*)m_pPrimarySurface->Buffer();

  00008	e5943004	 ldr         r3, [r4, #4]

; 1872 :     USHORT * ptrLine;
; 1873 :     USHORT * cbsLine;
; 1874 : 
; 1875 :     if (!m_CursorForcedOff && !m_CursorDisabled && m_CursorVisible)

  0000c	e59422f0	 ldr         r2, [r4, #0x2F0]
  00010	e593a004	 ldr         r10, [r3, #4]
  00014	e3520000	 cmp         r2, #0
  00018	1a00003c	 bne         |$LN11@CursorOff|
  0001c	e59432e8	 ldr         r3, [r4, #0x2E8]
  00020	e3530000	 cmp         r3, #0
  00024	1a000039	 bne         |$LN11@CursorOff|
  00028	e59432ec	 ldr         r3, [r4, #0x2EC]
  0002c	e3530000	 cmp         r3, #0
  00030	0a000036	 beq         |$LN11@CursorOff|

; 1876 :     {
; 1877 :         RECTL rSave = m_CursorRect;
; 1878 :         RotateRectl(&m_CursorRect);

  00034	e59452fc	 ldr         r5, [r4, #0x2FC]
  00038	e5946300	 ldr         r6, [r4, #0x300]
  0003c	e5947304	 ldr         r7, [r4, #0x304]
  00040	e5948308	 ldr         r8, [r4, #0x308]
  00044	e2841fbf	 add         r1, r4, #0xBF, 30
  00048	eb000000	 bl          |?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|

; 1879 : 
; 1880 :         for (int y = m_CursorRect.top; y < m_CursorRect.bottom; y++)

  0004c	e594e300	 ldr         lr, [r4, #0x300]
  00050	ea000026	 b           |$LN27@CursorOff|
  00054		 |$LL10@CursorOff|

; 1881 :         {
; 1882 :             // clip to displayable screen area (top/bottom)
; 1883 :             if (y < 0)

  00054	e35e0000	 cmp         lr, #0
  00058	4a000023	 bmi         |$LN9@CursorOff|

; 1884 :             {
; 1885 :                 continue;
; 1886 :             }
; 1887 :             if (y >= m_nScreenHeightSave)

  0005c	e5943020	 ldr         r3, [r4, #0x20]
  00060	e15e0003	 cmp         lr, r3
  00064	aa000024	 bge         |$LN25@CursorOff|

; 1888 :             {
; 1889 :                 break;
; 1890 :             }
; 1891 : 
; 1892 :             ptrLine = &ptrScreen[y * m_pPrimarySurface->Stride() / 2];

  00068	e5943004	 ldr         r3, [r4, #4]

; 1893 :             cbsLine = &m_CursorBackingStore[(y - m_CursorRect.top) * m_CursorSize.x];

  0006c	e5942300	 ldr         r2, [r4, #0x300]
  00070	e59412f4	 ldr         r1, [r4, #0x2F4]
  00074	e5930008	 ldr         r0, [r3, #8]
  00078	e04e3002	 sub         r3, lr, r2
  0007c	e0020193	 mul         r2, r3, r1
  00080	e0030e90	 mul         r3, r0, lr

; 1894 : 
; 1895 :             for (int x = m_CursorRect.left; x < m_CursorRect.right; x++)

  00084	e59402fc	 ldr         r0, [r4, #0x2FC]
  00088	e5941304	 ldr         r1, [r4, #0x304]
  0008c	e2822c01	 add         r2, r2, #1, 24
  00090	e0833fa3	 add         r3, r3, r3, lsr #31
  00094	e1a030c3	 mov         r3, r3, asr #1
  00098	e2822086	 add         r2, r2, #0x86
  0009c	e08a3083	 add         r3, r10, r3, lsl #1
  000a0	e0849082	 add         r9, r4, r2, lsl #1
  000a4	e1500001	 cmp         r0, r1
  000a8	aa00000f	 bge         |$LN9@CursorOff|

; 1888 :             {
; 1889 :                 break;
; 1890 :             }
; 1891 : 
; 1892 :             ptrLine = &ptrScreen[y * m_pPrimarySurface->Stride() / 2];

  000ac	e0832080	 add         r2, r3, r0, lsl #1
  000b0		 |$LL5@CursorOff|

; 1896 :             {
; 1897 :                 // clip to displayable screen area (left/right)
; 1898 :                 if (x < 0)

  000b0	e3500000	 cmp         r0, #0
  000b4	4a000007	 bmi         |$LN4@CursorOff|

; 1899 :                 {
; 1900 :                     continue;
; 1901 :                 }
; 1902 :                 if (x >= (int)m_nScreenWidthSave)

  000b8	e594301c	 ldr         r3, [r4, #0x1C]
  000bc	e1500003	 cmp         r0, r3
  000c0	aa000009	 bge         |$LN9@CursorOff|

; 1903 :                 {
; 1904 :                     break;
; 1905 :                 }
; 1906 : 
; 1907 :                 ptrLine[x] = cbsLine[x - m_CursorRect.left];

  000c4	e59432fc	 ldr         r3, [r4, #0x2FC]
  000c8	e0403003	 sub         r3, r0, r3
  000cc	e0893083	 add         r3, r9, r3, lsl #1
  000d0	e1d330b0	 ldrh        r3, [r3]
  000d4	e1c230b0	 strh        r3, [r2]
  000d8		 |$LN4@CursorOff|
  000d8	e5943304	 ldr         r3, [r4, #0x304]
  000dc	e2800001	 add         r0, r0, #1
  000e0	e2822002	 add         r2, r2, #2
  000e4	e1500003	 cmp         r0, r3
  000e8	bafffff0	 blt         |$LL5@CursorOff|
  000ec		 |$LN9@CursorOff|

; 1879 : 
; 1880 :         for (int y = m_CursorRect.top; y < m_CursorRect.bottom; y++)

  000ec	e28ee001	 add         lr, lr, #1
  000f0		 |$LN27@CursorOff|
  000f0	e5943308	 ldr         r3, [r4, #0x308]
  000f4	e15e0003	 cmp         lr, r3
  000f8	baffffd5	 blt         |$LL10@CursorOff|
  000fc		 |$LN25@CursorOff|

; 1908 :             }
; 1909 :         }
; 1910 : 
; 1911 :         m_CursorRect = rSave;
; 1912 :         m_CursorVisible = FALSE;

  000fc	e3a03000	 mov         r3, #0
  00100	e58432ec	 str         r3, [r4, #0x2EC]
  00104	e58452fc	 str         r5, [r4, #0x2FC]
  00108	e284cc03	 add         r12, r4, #3, 24
  0010c	e88c01c0	 stmia       r12, {r6 - r8}
  00110		 |$LN11@CursorOff|

; 1913 :     }
; 1914 : }

  00110	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$M39238|

			 ENDP  ; |?CursorOff@SA2Video@@QAAXXZ|, SA2Video::CursorOff

	EXPORT	|??0SA2Video@@QAA@XZ|			; SA2Video::SA2Video
	EXPORT	|??_7SA2Video@@6B@| [ DATA ]		; SA2Video::`vftable'
	EXPORT	|?BltPrepare@SA2Video@@UAAJPAUGPEBltParms@@@Z| ; SA2Video::BltPrepare
	EXPORT	|?BltComplete@SA2Video@@UAAJPAUGPEBltParms@@@Z| ; SA2Video::BltComplete
	EXPORT	|?Line@SA2Video@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z| ; SA2Video::Line
	EXPORT	|?SetPointerShape@SA2Video@@UAAJPAVGPESurf@@0HHHH@Z| ; SA2Video::SetPointerShape
	EXPORT	|?MovePointer@SA2Video@@UAAJHH@Z|	; SA2Video::MovePointer
	EXPORT	|?DrvEscape@SA2Video@@UAAKPAU_SURFOBJ@@KKPAXK1@Z| ; SA2Video::DrvEscape
	EXPORT	|?GetPhysicalModeId@DDGPE@@UAAKXZ|	; DDGPE::GetPhysicalModeId
	EXPORT	|?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ| ; DDGPE::GetDriverData
	EXPORT	|?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z| ; DDGPE::SetDriverData
	IMPORT	|?SetRotation@GPESurf@@QAAXHHH@Z|	; GPESurf::SetRotation
	IMPORT	|??0DDGPESurf@@QAA@HHPAXHW4EGPEFormat@@@Z| ; DDGPESurf::DDGPESurf
	IMPORT	|gFrameBuffer|
	IMPORT	|g_fDisableRotation|
	IMPORT	|DispDrvr_cxScreen|
	IMPORT	|DispDrvrInitialize|
	IMPORT	|??0DDGPE@@QAA@XZ|			; DDGPE::DDGPE
	IMPORT	|??_ESA2Video@@UAAPAXI@Z|, WEAK |??_GSA2Video@@UAAPAXI@Z| ; SA2Video::`vector deleting destructor', SA2Video::`scalar deleting destructor'
	IMPORT	|?GetPalette@GPE@@UAAJPAPAUtagPALETTEENTRY@@PAG@Z| ; GPE::GetPalette
	IMPORT	|?IsPaletteSettable@GPE@@UAAHXZ|	; GPE::IsPaletteSettable
	IMPORT	|?ContrastControl@GPE@@UAAHKPAK@Z|	; GPE::ContrastControl
	IMPORT	|?GetGraphicsCaps@GPE@@UAAKXZ|		; GPE::GetGraphicsCaps
	IMPORT	|?SetVisibleSurface@GPE@@UAAXPAVGPESurf@@@Z| ; GPE::SetVisibleSurface
	IMPORT	|?FlipInProgress@GPE@@UAAHXZ|		; GPE::FlipInProgress
	IMPORT	|?WaitForVBlank@GPE@@UAAXXZ|		; GPE::WaitForVBlank
	IMPORT	|?SurfaceBusyFlipping@GPE@@UAAHPAVGPESurf@@@Z| ; GPE::SurfaceBusyFlipping
	IMPORT	|?AvailableVideoMemory@GPE@@UAAKXZ|	; GPE::AvailableVideoMemory
	IMPORT	|?ScanLine@GPE@@UAAHXZ|			; GPE::ScanLine
	IMPORT	|?ProcessCommandBlock@GPE@@UAAJPAE@Z|	; GPE::ProcessCommandBlock
	IMPORT	|?GetScreenDimensions@GPE@@UAAHPAUGPEScreenProps@@@Z| ; GPE::GetScreenDimensions
	IMPORT	|?GetClearTypeRGBMasks@GPE@@UAAPAKXZ|	; GPE::GetClearTypeRGBMasks
	IMPORT	|?DisablePrimary@GPE@@UAAHXZ|		; GPE::DisablePrimary
	IMPORT	|?AllocSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::AllocSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocBackBuffer@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPE::AllocBackBuffer
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@HH@Z| ; DDGPE::WrapSurface
	IMPORT	|?BltPrepare@DDGPE@@UAAJPAUDDGPEBltParms@@@Z| ; DDGPE::BltPrepare
	IMPORT	|?PerformBlt@DDGPE@@UAAJPAUDDGPEBltParms@@@Z| ; DDGPE::PerformBlt
	IMPORT	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@00PBUtagRECT@@1KKK@Z| ; DDGPE::BltExpanded
	IMPORT	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@000PAU_CLIPOBJ@@PAU_XLATEOBJ@@PBUtagRECT@@3KKK@Z| ; DDGPE::BltExpanded
	IMPORT	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@KH@Z| ; DDGPE::SetVisibleSurface
	IMPORT	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@H@Z| ; DDGPE::SetVisibleSurface
	IMPORT	|?DetectMode@DDGPE@@UAAJPAKKKW4EGPEFormat@@W4EDDGPEPixelFormat@@PAU_DDPIXELFORMAT@@@Z| ; DDGPE::DetectMode
	IMPORT	|?DetectPixelFormat@DDGPE@@UAAJKPAU_DDPIXELFORMAT@@PAW4EGPEFormat@@PAW4EDDGPEPixelFormat@@@Z| ; DDGPE::DetectPixelFormat
	IMPORT	|?InDisplay@DDGPE@@UAAHXZ|		; DDGPE::InDisplay
	IMPORT	|?GetModeInfoEx@DDGPE@@UAAJPAUGPEModeEx@@H@Z| ; DDGPE::GetModeInfoEx
	IMPORT	|?SetMode@DDGPE@@UAAJHPAPAUHPALETTE__@@H@Z| ; DDGPE::SetMode

  00000			 AREA	 |.pdata|, PDATA
|$T39258| DCD	|$LN14@SA2Video|
	DCD	0x40006a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7SA2Video@@6B@| DCD |??_ESA2Video@@UAAPAXI@Z|	; SA2Video::`vftable'
	DCD	|?BltPrepare@SA2Video@@UAAJPAUGPEBltParms@@@Z|
	DCD	|?BltComplete@SA2Video@@UAAJPAUGPEBltParms@@@Z|
	DCD	|?Line@SA2Video@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z|
	DCD	|?AllocSurface@SA2Video@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z|
	DCD	|?SetPointerShape@SA2Video@@UAAJPAVGPESurf@@0HHHH@Z|
	DCD	|?MovePointer@SA2Video@@UAAJHH@Z|
	DCD	|?SetPalette@SA2Video@@UAAJPBUtagPALETTEENTRY@@GG@Z|
	DCD	|?GetPalette@GPE@@UAAJPAPAUtagPALETTEENTRY@@PAG@Z|
	DCD	|?GetModeInfo@SA2Video@@UAAJPAUGPEMode@@H@Z|
	DCD	|?NumModes@SA2Video@@UAAHXZ|
	DCD	|?SetMode@SA2Video@@UAAJHPAPAUHPALETTE__@@@Z|
	DCD	|?InVBlank@SA2Video@@UAAHXZ|
	DCD	|?IsPaletteSettable@GPE@@UAAHXZ|
	DCD	|?ContrastControl@GPE@@UAAHKPAK@Z|
	DCD	|?PowerHandler@SA2Video@@UAAXH@Z|
	DCD	|?DrvEscape@SA2Video@@UAAKPAU_SURFOBJ@@KKPAXK1@Z|
	DCD	|?GetGraphicsCaps@GPE@@UAAKXZ|
	DCD	|?GetPhysicalVideoMemory@SA2Video@@UAAXPAK0@Z|
	DCD	|?SetVisibleSurface@GPE@@UAAXPAVGPESurf@@@Z|
	DCD	|?FlipInProgress@GPE@@UAAHXZ|
	DCD	|?WaitForVBlank@GPE@@UAAXXZ|
	DCD	|?SurfaceBusyFlipping@GPE@@UAAHPAVGPESurf@@@Z|
	DCD	|?IsBusy@SA2Video@@UAAHXZ|
	DCD	|?WaitForNotBusy@SA2Video@@UAAXXZ|
	DCD	|?AvailableVideoMemory@GPE@@UAAKXZ|
	DCD	|?ScanLine@GPE@@UAAHXZ|
	DCD	|?ProcessCommandBlock@GPE@@UAAJPAE@Z|
	DCD	|?GetScreenDimensions@GPE@@UAAHPAUGPEScreenProps@@@Z|
	DCD	|?GetClearTypeRGBMasks@GPE@@UAAPAKXZ|
	DCD	|?DisablePrimary@GPE@@UAAHXZ|
	DCD	|?AllocSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?AllocSurface@SA2Video@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z|
	DCD	|?AllocBackBuffer@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@HH@Z|
	DCD	|?BltPrepare@DDGPE@@UAAJPAUDDGPEBltParms@@@Z|
	DCD	|?PerformBlt@DDGPE@@UAAJPAUDDGPEBltParms@@@Z|
	DCD	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@00PBUtagRECT@@1KKK@Z|
	DCD	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@000PAU_CLIPOBJ@@PAU_XLATEOBJ@@PBUtagRECT@@3KKK@Z|
	DCD	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@KH@Z|
	DCD	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@H@Z|
	DCD	|?DetectMode@DDGPE@@UAAJPAKKKW4EGPEFormat@@W4EDDGPEPixelFormat@@PAU_DDPIXELFORMAT@@@Z|
	DCD	|?DetectPixelFormat@DDGPE@@UAAJKPAU_DDPIXELFORMAT@@PAW4EGPEFormat@@PAW4EDDGPEPixelFormat@@@Z|
	DCD	|?GetPhysicalModeId@DDGPE@@UAAKXZ|
	DCD	|?InDisplay@DDGPE@@UAAHXZ|
	DCD	|?GetModeInfoEx@DDGPE@@UAAJPAUGPEModeEx@@H@Z|
	DCD	|?SetMode@DDGPE@@UAAJHPAPAUHPALETTE__@@H@Z|
	DCD	|?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ|
	DCD	|?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z|
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0SA2Video@@QAA@XZ| PROC		; SA2Video::SA2Video

; 165  : {

  00000		 |$LN14@SA2Video|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M39255|
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??0DDGPE@@QAA@XZ|
  00010	e59f318c	 ldr         r3, [pc, #0x18C]

; 166  :     DEBUGMSG(GPE_ZONE_INIT,(TEXT("SA2Video::SA2Video\r\n")));
; 167  : 
; 168  :     m_InDDraw = FALSE;

  00014	e3a06000	 mov         r6, #0
  00018	e5856b0c	 str         r6, [r5, #0xB0C]
  0001c	e5853000	 str         r3, [r5]

; 169  : 
; 170  :     // Determine the display type
; 171  :     // Setup the LCD controller for that display
; 172  :     // Power up and enable the display
; 173  :     DispDrvrInitialize();

  00020	eb000000	 bl          DispDrvrInitialize

; 174  : 
; 175  :     // Advertise the power management interface for this driver.
; 176  :     AdvertisePowerInterface();

  00024	e1a00005	 mov         r0, r5
  00028	eb000000	 bl          |?AdvertisePowerInterface@SA2Video@@AAAHXZ|

; 177  : 
; 178  :     m_ModeInfo.modeId = 0;
; 179  :     m_ModeInfo.width = m_nScreenWidth = DispDrvr_cxScreen;

  0002c	e59f116c	 ldr         r1, [pc, #0x16C]
  00030	e585624c	 str         r6, [r5, #0x24C]

; 180  :     m_ModeInfo.height = m_nScreenHeight = DispDrvr_cyScreen;

  00034	e59f0160	 ldr         r0, [pc, #0x160]
  00038	e5913000	 ldr         r3, [r1]

; 181  :     m_ModeInfo.Bpp = bpp;

  0003c	e59fe154	 ldr         lr, [pc, #0x154]

; 182  :     m_ModeInfo.frequency = 60;

  00040	e3a0403c	 mov         r4, #0x3C
  00044	e5853008	 str         r3, [r5, #8]
  00048	e5913000	 ldr         r3, [r1]
  0004c	e5853250	 str         r3, [r5, #0x250]
  00050	e5903000	 ldr         r3, [r0]
  00054	e585300c	 str         r3, [r5, #0xC]
  00058	e5903000	 ldr         r3, [r0]
  0005c	e5853254	 str         r3, [r5, #0x254]
  00060	e59e3000	 ldr         r3, [lr]
  00064	e585425c	 str         r4, [r5, #0x25C]
  00068	e5853258	 str         r3, [r5, #0x258]

; 183  :     m_ModeInfo.format = bpp == 8 ? gpe8Bpp : gpe16Bpp;

  0006c	e59e3000	 ldr         r3, [lr]

; 184  :     m_pMode = &m_ModeInfo;
; 185  : 
; 186  :     m_pModeEx.modeInfo.modeId = 0;

  00070	e5856264	 str         r6, [r5, #0x264]
  00074	e3530008	 cmp         r3, #8
  00078	03a02003	 moveq       r2, #3
  0007c	13a02004	 movne       r2, #4
  00080	e2853f93	 add         r3, r5, #0x93, 30
  00084	e5852260	 str         r2, [r5, #0x260]
  00088	e5853010	 str         r3, [r5, #0x10]

; 187  :     m_pModeEx.modeInfo.width = m_nScreenWidth = DispDrvr_cxScreen;

  0008c	e5913000	 ldr         r3, [r1]
  00090	e5853008	 str         r3, [r5, #8]
  00094	e5913000	 ldr         r3, [r1]
  00098	e5853268	 str         r3, [r5, #0x268]

; 188  :     m_pModeEx.modeInfo.height = m_nScreenHeight = DispDrvr_cyScreen;

  0009c	e5903000	 ldr         r3, [r0]
  000a0	e585300c	 str         r3, [r5, #0xC]
  000a4	e5903000	 ldr         r3, [r0]
  000a8	e585326c	 str         r3, [r5, #0x26C]

; 189  :     m_pModeEx.modeInfo.Bpp = bpp;

  000ac	e59e3000	 ldr         r3, [lr]

; 190  :     m_pModeEx.modeInfo.frequency = 60;

  000b0	e5854274	 str         r4, [r5, #0x274]
  000b4	e5853270	 str         r3, [r5, #0x270]

; 191  :     m_pModeEx.modeInfo.format = bpp == 8 ? gpe8Bpp : gpe16Bpp;

  000b8	e59e3000	 ldr         r3, [lr]
  000bc	e3530008	 cmp         r3, #8

; 192  : 
; 193  :     if (!g_fDisableRotation)

  000c0	e59f30cc	 ldr         r3, [pc, #0xCC]
  000c4	03a02003	 moveq       r2, #3
  000c8	13a02004	 movne       r2, #4
  000cc	e5852278	 str         r2, [r5, #0x278]
  000d0	e5933000	 ldr         r3, [r3]
  000d4	e3530000	 cmp         r3, #0
  000d8	1a000003	 bne         |$LN3@SA2Video|

; 194  :     {
; 195  :         m_iRotate = GetRotateModeFromReg();

  000dc	e1a00005	 mov         r0, r5
  000e0	eb000000	 bl          |?GetRotateModeFromReg@SA2Video@@QAAHXZ|
  000e4	e5850018	 str         r0, [r5, #0x18]

; 196  :     }
; 197  :     else

  000e8	ea000000	 b           |$LN2@SA2Video|
  000ec		 |$LN3@SA2Video|

; 198  :     {
; 199  :         m_iRotate = DMDO_0;

  000ec	e5856018	 str         r6, [r5, #0x18]
  000f0		 |$LN2@SA2Video|

; 200  :     }
; 201  : 
; 202  :     SetRotateParams();

  000f0	e1a00005	 mov         r0, r5
  000f4	eb000000	 bl          |?SetRotateParams@SA2Video@@QAAXXZ|

; 203  : 
; 204  :     m_pVirtualFrameBuffer = gFrameBuffer;

  000f8	e59f3090	 ldr         r3, [pc, #0x90]

; 205  : 
; 206  :     m_pPrimarySurface = new DDGPESurf(m_nScreenWidth,m_nScreenHeight,m_pVirtualFrameBuffer,
; 207  :          DispDrvr_cdwStride,m_ModeInfo.format);

  000fc	e3a0007c	 mov         r0, #0x7C
  00100	e5933000	 ldr         r3, [r3]
  00104	e58532c0	 str         r3, [r5, #0x2C0]
  00108	eb000000	 bl          |??2@YAPAXI@Z|
  0010c	e3500000	 cmp         r0, #0
  00110	0a000009	 beq         |$LN10@SA2Video|
  00114	e59f2070	 ldr         r2, [pc, #0x70]
  00118	e5954260	 ldr         r4, [r5, #0x260]
  0011c	e59532c0	 ldr         r3, [r5, #0x2C0]
  00120	e592e000	 ldr         lr, [r2]
  00124	e595200c	 ldr         r2, [r5, #0xC]
  00128	e5951008	 ldr         r1, [r5, #8]
  0012c	e58de000	 str         lr, [sp]
  00130	e58d4004	 str         r4, [sp, #4]
  00134	eb000000	 bl          |??0DDGPESurf@@QAA@HHPAXHW4EGPEFormat@@@Z|
  00138	ea000000	 b           |$LN11@SA2Video|
  0013c		 |$LN10@SA2Video|
  0013c	e3a00000	 mov         r0, #0
  00140		 |$LN11@SA2Video|

; 208  : 
; 209  :     m_VirtualFrameBuffer = (ULONG)FRAME_BUFFER_0_BASE_VIRTUAL;

  00140	e59f3040	 ldr         r3, [pc, #0x40]
  00144	e5850004	 str         r0, [r5, #4]

; 210  : 
; 211  :     if (m_pPrimarySurface)

  00148	e3500000	 cmp         r0, #0
  0014c	e5933000	 ldr         r3, [r3]

; 212  :     {
; 213  :         ((GPESurf *)m_pPrimarySurface)->SetRotation(m_nScreenWidth, m_nScreenHeight, m_iRotate);

  00150	1595200c	 ldrne       r2, [r5, #0xC]
  00154	15951008	 ldrne       r1, [r5, #8]
  00158	e2833d12	 add         r3, r3, #0x12, 26
  0015c	e58532c4	 str         r3, [r5, #0x2C4]
  00160	15953018	 ldrne       r3, [r5, #0x18]
  00164	1b000000	 blne        |?SetRotation@GPESurf@@QAAXHHH@Z|

; 214  :     }
; 215  : 
; 216  :     // Set up the software cursor state.
; 217  :     m_CursorVisible   = FALSE;
; 218  :     m_CursorDisabled  = TRUE;

  00168	e3a03001	 mov         r3, #1
  0016c	e58532e8	 str         r3, [r5, #0x2E8]
  00170	e58562ec	 str         r6, [r5, #0x2EC]

; 219  :     m_CursorForcedOff = FALSE;

  00174	e58562f0	 str         r6, [r5, #0x2F0]

; 220  : }

  00178	e1a00005	 mov         r0, r5
  0017c	e28dd008	 add         sp, sp, #8
  00180	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$LN15@SA2Video|
  00188		 |$LN16@SA2Video|
  00188	00000000	 DCD         |g_DisplayBaseVirtual|
  0018c		 |$LN17@SA2Video|
  0018c	00000000	 DCD         |DispDrvr_cdwStride|
  00190		 |$LN18@SA2Video|
  00190	00000000	 DCD         |gFrameBuffer|
  00194		 |$LN19@SA2Video|
  00194	00000000	 DCD         |g_fDisableRotation|
  00198		 |$LN20@SA2Video|
  00198	00000000	 DCD         |bpp|
  0019c		 |$LN21@SA2Video|
  0019c	00000000	 DCD         |DispDrvr_cyScreen|
  001a0		 |$LN22@SA2Video|
  001a0	00000000	 DCD         |DispDrvr_cxScreen|
  001a4		 |$LN23@SA2Video|
  001a4	00000000	 DCD         |??_7SA2Video@@6B@|
  001a8		 |$M39256|

			 ENDP  ; |??0SA2Video@@QAA@XZ|, SA2Video::SA2Video

; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T39277| DCD	|$LN5@GetPhysica@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPhysicalModeId@DDGPE@@UAAKXZ| PROC ; DDGPE::GetPhysicalModeId

; 486  : 	virtual DWORD	GetPhysicalModeId	(void) { return m_dwPhysicalModeID; }	// Get current hardware mode (mode of ddraw primary)

  00000		 |$LN5@GetPhysica@2|
  00000		 |$M39274|
  00000	e5900028	 ldr         r0, [r0, #0x28]
  00004	e12fff1e	 bx          lr
  00008		 |$M39275|

			 ENDP  ; |?GetPhysicalModeId@DDGPE@@UAAKXZ|, DDGPE::GetPhysicalModeId


  00000			 AREA	 |.pdata|, PDATA
|$T39287| DCD	|$LN5@GetDriverD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ| PROC ; DDGPE::GetDriverData

; 502  : 	virtual DDGPEDriverData*		GetDriverData(void) { return m_pDriverData; }

  00000		 |$LN5@GetDriverD|
  00000		 |$M39284|
  00000	e590002c	 ldr         r0, [r0, #0x2C]
  00004	e12fff1e	 bx          lr
  00008		 |$M39285|

			 ENDP  ; |?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ|, DDGPE::GetDriverData


  00000			 AREA	 |.pdata|, PDATA
|$T39296| DCD	|$LN5@SetDriverD|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z| PROC ; DDGPE::SetDriverData

; 503  : 	virtual void					SetDriverData(DDGPEDriverData* pDriverData) { m_pDriverData = pDriverData; }

  00000		 |$LN5@SetDriverD|
  00000		 |$M39293|
  00000	e580102c	 str         r1, [r0, #0x2C]
  00004	e12fff1e	 bx          lr
  00008		 |$M39294|

			 ENDP  ; |?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z|, DDGPE::SetDriverData

	EXPORT	|??1SA2Video@@UAA@XZ|			; SA2Video::~SA2Video
	IMPORT	|??1DDGPE@@UAA@XZ|			; DDGPE::~DDGPE

  00000			 AREA	 |.pdata|, PDATA
|$T39304| DCD	|$LN5@SA2Video@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1SA2Video@@UAA@XZ| PROC		; SA2Video::~SA2Video
  00000		 |$LN5@SA2Video@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39301|
  00004	eb000000	 bl          |??1DDGPE@@UAA@XZ|
  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M39302|

			 ENDP  ; |??1SA2Video@@UAA@XZ|, SA2Video::~SA2Video

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T39318| DCD	|$LN8@scalar|
	DCD	0x40000a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GSA2Video@@UAAPAXI@Z| PROC		; SA2Video::`scalar deleting destructor'
  00000		 |$LN8@scalar|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M39315|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0
  0000c	eb000000	 bl          |??1DDGPE@@UAA@XZ|
  00010	e3140001	 tst         r4, #1
  00014	11a00005	 movne       r0, r5
  00018	1b000000	 blne        |??3@YAXPAX@Z|
  0001c	e1a00005	 mov         r0, r5
  00020	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M39316|

			 ENDP  ; |??_GSA2Video@@UAAPAXI@Z|, SA2Video::`scalar deleting destructor'

	IMPORT	|gyHot|
	IMPORT	|gxHot|
	IMPORT	|memset|
; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T39361| DCD	|$LN33@SetPointer|
	DCD	0x40006302
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetPointerShape@SA2Video@@UAAJPAVGPESurf@@0HHHH@Z| PROC ; SA2Video::SetPointerShape

; 285  : {

  00000		 |$LN33@SetPointer|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M39358|
  00008	e1a0b003	 mov         r11, r3
  0000c	e1a06001	 mov         r6, r1
  00010	e1a04000	 mov         r4, r0
  00014	e58db014	 str         r11, [sp, #0x14]
  00018	e58d600c	 str         r6, [sp, #0xC]
  0001c	e58d4010	 str         r4, [sp, #0x10]

; 286  :     int        row;
; 287  :     int        colByte;
; 288  :     BYTE     * pAND;
; 289  :     BYTE     * pXOR;
; 290  :     BYTE       bitMask;
; 291  :     unsigned   i;
; 292  : 
; 293  :     if (!bDoRotation)

  00020	e59f2160	 ldr         r2, [pc, #0x160]
  00024	e5922000	 ldr         r2, [r2]
  00028	e3520000	 cmp         r2, #0

; 294  :     {
; 295  :         CursorOff();

  0002c	0b000000	 bleq        |?CursorOff@SA2Video@@QAAXXZ|

; 296  :     }
; 297  : 
; 298  :     if (!pMask)

  00030	e3560000	 cmp         r6, #0
  00034	1a00000a	 bne         |$LN11@SetPointer|

; 299  :     {   // Turn off the cursor.
; 300  :         memset((BYTE *)gCursorMask,0xFF,sizeof(gCursorMask));

  00038	e59f0144	 ldr         r0, [pc, #0x144]
  0003c	e3a02b02	 mov         r2, #2, 22
  00040	e3a010ff	 mov         r1, #0xFF
  00044	eb000000	 bl          memset

; 301  :         memset((BYTE *)gCursorData,0x00,sizeof(gCursorData));

  00048	e59f0130	 ldr         r0, [pc, #0x130]
  0004c	e3a02b02	 mov         r2, #2, 22
  00050	e3a01000	 mov         r1, #0
  00054	eb000000	 bl          memset

; 302  : 
; 303  :         m_CursorDisabled = TRUE;

  00058	e3a03001	 mov         r3, #1
  0005c	e58432e8	 str         r3, [r4, #0x2E8]

; 304  :     }
; 305  :     else

  00060	ea000040	 b           |$LN10@SetPointer|
  00064		 |$LN11@SetPointer|

; 306  :     {
; 307  :         i = 0;
; 308  : 
; 309  :         for (row = 0; row < cY; row++)

  00064	e59d0044	 ldr         r0, [sp, #0x44]
  00068	e59d7040	 ldr         r7, [sp, #0x40]
  0006c	e3a03000	 mov         r3, #0
  00070	e3500000	 cmp         r0, #0
  00074	e58d3000	 str         r3, [sp]
  00078	e3a0e000	 mov         lr, #0
  0007c	da000030	 ble         |$LN7@SetPointer|
  00080	e1b03007	 movs        r3, r7
  00084	42833007	 addmi       r3, r3, #7
  00088	e1a091c3	 mov         r9, r3, asr #3
  0008c	e59f40f0	 ldr         r4, [pc, #0xF0]
  00090	e58d9008	 str         r9, [sp, #8]
  00094		 |$LL9@SetPointer|

; 310  :         {
; 311  :             for (colByte = 0; colByte < (cX / 8); colByte++)

  00094	e3a01000	 mov         r1, #0
  00098	e3590000	 cmp         r9, #0
  0009c	da000022	 ble         |$LN8@SetPointer|
  000a0		 |$LL6@SetPointer|

; 312  :             {
; 313  :                 pAND = (unsigned char *)pMask->Buffer()+(row*pMask->Stride())+colByte;

  000a0	e5962008	 ldr         r2, [r6, #8]
  000a4	e5963004	 ldr         r3, [r6, #4]
  000a8	e59f60d0	 ldr         r6, [pc, #0xD0]

; 314  :                 pXOR = pAND+(cY*pMask->Stride());
; 315  : 
; 316  :                 for (bitMask = 0x0080; bitMask; bitMask >>= 1)

  000ac	e3a0b080	 mov         r11, #0x80
  000b0	e0233e92	 mla         r3, r2, lr, r3
  000b4	e3a05080	 mov         r5, #0x80
  000b8	e083a001	 add         r10, r3, r1
  000bc	e023a092	 mla         r3, r2, r0, r10

; 317  :                 {
; 318  :                     gCursorMask[i] = (*pAND & bitMask) ? 0xFFFF : 0x0000;
; 319  :                     gCursorData[i] = (*pXOR & bitMask) ? 0xFFFF : 0x0000;
; 320  :                     i++;

  000c0	e59d0000	 ldr         r0, [sp]
  000c4	e3a09cff	 mov         r9, #0xFF, 24
  000c8	e1a07003	 mov         r7, r3
  000cc	e58d3004	 str         r3, [sp, #4]
  000d0		 |$LL3@SetPointer|
  000d0	e5da3000	 ldrb        r3, [r10]
  000d4	e1a08080	 mov         r8, r0, lsl #1
  000d8	e2800001	 add         r0, r0, #1
  000dc	e1130005	 tst         r3, r5
  000e0	138930ff	 orrne       r3, r9, #0xFF
  000e4	03a03000	 moveq       r3, #0
  000e8	e18830b4	 strh        r3, [r8, +r4]
  000ec	e5d73000	 ldrb        r3, [r7]
  000f0	e1130005	 tst         r3, r5
  000f4	e1a030ab	 mov         r3, r11, lsr #1
  000f8	138920ff	 orrne       r2, r9, #0xFF
  000fc	03a02000	 moveq       r2, #0
  00100	e203b0ff	 and         r11, r3, #0xFF
  00104	e1b0500b	 movs        r5, r11
  00108	e18820b6	 strh        r2, [r8, +r6]
  0010c	1affffef	 bne         |$LL3@SetPointer|
  00110	e59d9008	 ldr         r9, [sp, #8]
  00114	e2811001	 add         r1, r1, #1
  00118	e59d600c	 ldr         r6, [sp, #0xC]
  0011c	e58d0000	 str         r0, [sp]
  00120	e59d0044	 ldr         r0, [sp, #0x44]
  00124	e1510009	 cmp         r1, r9
  00128	baffffdc	 blt         |$LL6@SetPointer|
  0012c		 |$LN8@SetPointer|

; 306  :     {
; 307  :         i = 0;
; 308  : 
; 309  :         for (row = 0; row < cY; row++)

  0012c	e28ee001	 add         lr, lr, #1
  00130	e15e0000	 cmp         lr, r0
  00134	baffffd6	 blt         |$LL9@SetPointer|
  00138	e59d4010	 ldr         r4, [sp, #0x10]
  0013c	e59d7040	 ldr         r7, [sp, #0x40]
  00140	e59db014	 ldr         r11, [sp, #0x14]
  00144		 |$LN7@SetPointer|

; 321  :                 }
; 322  :             }
; 323  :         }
; 324  : 
; 325  :         m_CursorDisabled = FALSE;
; 326  :         m_CursorSize.x   = cX;
; 327  :         m_CursorSize.y   = cY;
; 328  :         gxHot            = xHot;

  00144	e59f2030	 ldr         r2, [pc, #0x30]

; 329  :         gyHot            = yHot;

  00148	e59f1028	 ldr         r1, [pc, #0x28]
  0014c	e59d303c	 ldr         r3, [sp, #0x3C]
  00150	e3a0e000	 mov         lr, #0
  00154	e584e2e8	 str         lr, [r4, #0x2E8]
  00158	e58472f4	 str         r7, [r4, #0x2F4]
  0015c	e58402f8	 str         r0, [r4, #0x2F8]
  00160	e582b000	 str         r11, [r2]
  00164	e5813000	 str         r3, [r1]
  00168		 |$LN10@SetPointer|

; 330  :     }
; 331  : 
; 332  :     return S_OK;

  00168	e3a00000	 mov         r0, #0

; 333  : }

  0016c	e28dd018	 add         sp, sp, #0x18
  00170	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00174	e12fff1e	 bx          lr
  00178		 |$LN34@SetPointer|
  00178		 |$LN35@SetPointer|
  00178	00000000	 DCD         |gyHot|
  0017c		 |$LN36@SetPointer|
  0017c	00000000	 DCD         |gxHot|
  00180		 |$LN37@SetPointer|
  00180	00000000	 DCD         |gCursorData|
  00184		 |$LN38@SetPointer|
  00184	00000000	 DCD         |gCursorMask|
  00188		 |$LN39@SetPointer|
  00188	00000000	 DCD         |bDoRotation|
  0018c		 |$M39359|

			 ENDP  ; |?SetPointerShape@SA2Video@@UAAJPAVGPESurf@@0HHHH@Z|, SA2Video::SetPointerShape

	IMPORT	|DispDrvrMoveCursor|

  00000			 AREA	 |.pdata|, PDATA
|$T39379| DCD	|$LN10@MovePointe|
	DCD	0x40002f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MovePointer@SA2Video@@UAAJHH@Z| PROC	; SA2Video::MovePointer

; 340  : {

  00000		 |$LN10@MovePointe|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39376|
  00004	e1a05002	 mov         r5, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 341  :     if (!bDoRotation)

  00010	e59f70a0	 ldr         r7, [pc, #0xA0]
  00014	e5973000	 ldr         r3, [r7]
  00018	e3530000	 cmp         r3, #0

; 342  :     {
; 343  :         CursorOff();

  0001c	0b000000	 bleq        |?CursorOff@SA2Video@@QAAXXZ|

; 344  :     }
; 345  : 
; 346  :     if(xPosition != -1 || yPosition != -1)

  00020	e3760001	 cmn         r6, #1
  00024	1a000007	 bne         |$LN3@MovePointe|
  00028	e3750001	 cmn         r5, #1
  0002c	1a000005	 bne         |$LN3@MovePointe|

; 359  :         }
; 360  :     }
; 361  :     else
; 362  :     {
; 363  :         // disable cursor
; 364  :         DispDrvrMoveCursor(DispDrvr_cxScreen, DispDrvr_cyScreen);

  00030	e59f307c	 ldr         r3, [pc, #0x7C]
  00034	e59f2074	 ldr         r2, [pc, #0x74]
  00038	e5931000	 ldr         r1, [r3]
  0003c	e5920000	 ldr         r0, [r2]
  00040	eb000000	 bl          DispDrvrMoveCursor
  00044	ea000014	 b           |$LN2@MovePointe|
  00048		 |$LN3@MovePointe|

; 347  :     {
; 348  :         // enable cursor
; 349  :         DispDrvrMoveCursor(xPosition, yPosition);

  00048	e1a01005	 mov         r1, r5
  0004c	e1a00006	 mov         r0, r6
  00050	eb000000	 bl          DispDrvrMoveCursor

; 350  : 
; 351  :         m_CursorRect.left   = xPosition - gxHot;

  00054	e59f3050	 ldr         r3, [pc, #0x50]

; 352  :         m_CursorRect.right  = m_CursorRect.left + m_CursorSize.x;

  00058	e59412f4	 ldr         r1, [r4, #0x2F4]

; 353  :         m_CursorRect.top    = yPosition - gyHot;

  0005c	e59f0044	 ldr         r0, [pc, #0x44]
  00060	e5933000	 ldr         r3, [r3]

; 354  :         m_CursorRect.bottom = m_CursorRect.top + m_CursorSize.y;

  00064	e594e2f8	 ldr         lr, [r4, #0x2F8]
  00068	e0462003	 sub         r2, r6, r3
  0006c	e0823001	 add         r3, r2, r1
  00070	e5843304	 str         r3, [r4, #0x304]
  00074	e58422fc	 str         r2, [r4, #0x2FC]
  00078	e5903000	 ldr         r3, [r0]
  0007c	e0452003	 sub         r2, r5, r3
  00080	e082300e	 add         r3, r2, lr
  00084	e5843308	 str         r3, [r4, #0x308]
  00088	e5842300	 str         r2, [r4, #0x300]

; 355  : 
; 356  :         if (!bDoRotation)

  0008c	e5973000	 ldr         r3, [r7]
  00090	e3530000	 cmp         r3, #0

; 357  :         {
; 358  :             CursorOn();

  00094	01a00004	 moveq       r0, r4
  00098	0b000000	 bleq        |?CursorOn@SA2Video@@QAAXXZ|
  0009c		 |$LN2@MovePointe|

; 365  :     }
; 366  : 
; 367  :     return S_OK;

  0009c	e3a00000	 mov         r0, #0

; 368  : }

  000a0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN11@MovePointe|
  000a8		 |$LN12@MovePointe|
  000a8	00000000	 DCD         |gyHot|
  000ac		 |$LN13@MovePointe|
  000ac	00000000	 DCD         |gxHot|
  000b0		 |$LN14@MovePointe|
  000b0	00000000	 DCD         |DispDrvr_cxScreen|
  000b4		 |$LN15@MovePointe|
  000b4	00000000	 DCD         |DispDrvr_cyScreen|
  000b8		 |$LN16@MovePointe|
  000b8	00000000	 DCD         |bDoRotation|
  000bc		 |$M39377|

			 ENDP  ; |?MovePointer@SA2Video@@UAAJHH@Z|, SA2Video::MovePointer

	EXPORT	|?WrappedEmulatedLine@SA2Video@@AAAJPAUGPELineParms@@@Z| ; SA2Video::WrappedEmulatedLine
	IMPORT	|?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z| ; GPE::EmulatedLine
	IMPORT	|?RotateRectlBack@GPE@@QAAXPAU_RECTL@@@Z| ; GPE::RotateRectlBack
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T39414| DCD	|$LN35@WrappedEmu@2|
	DCD	0x40008801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?WrappedEmulatedLine@SA2Video@@AAAJPAUGPELineParms@@@Z| PROC ; SA2Video::WrappedEmulatedLine

; 479  : {

  00000		 |$LN35@WrappedEmu@2|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M39411|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 480  :     SCODE retval;
; 481  :     RECT  bounds;
; 482  :     int   N_plus_1;  // Minor length of bounding rect + 1
; 483  : 
; 484  :     // calculate the bounding-rect to determine overlap with cursor
; 485  :     if (pParms->dN)   // The line has a diagonal component (we'll refresh the bounding rect)

  0000c	e5943014	 ldr         r3, [r4, #0x14]
  00010	e1b02003	 movs        r2, r3
  00014	0a000005	 beq         |$LN19@WrappedEmu@2|

; 486  :     {
; 487  :         N_plus_1 = 2 + ((pParms->cPels * pParms->dN) / pParms->dM);

  00018	e594300c	 ldr         r3, [r4, #0xC]
  0001c	e5940010	 ldr         r0, [r4, #0x10]
  00020	e0010293	 mul         r1, r3, r2
  00024	eb000000	 bl          __rt_udiv
  00028	e2800002	 add         r0, r0, #2

; 488  :     }
; 489  :     else

  0002c	ea000000	 b           |$LN18@WrappedEmu@2|
  00030		 |$LN19@WrappedEmu@2|

; 490  :     {
; 491  :         N_plus_1 = 1;

  00030	e3a00001	 mov         r0, #1
  00034		 |$LN18@WrappedEmu@2|

; 492  :     }
; 493  : 
; 494  :     switch(pParms->iDir)

  00034	e594201c	 ldr         r2, [r4, #0x1C]
  00038	e3520007	 cmp         r2, #7
  0003c	8a000071	 bhi         |$LN7@WrappedEmu@2|
  00040	e28f3004	 add         r3, pc, #4
  00044	e7d33002	 ldrb        r3, [r3, +r2]
  00048	e08ff003	 add         pc, pc, r3
  0004c		 |$LN24@WrappedEmu@2|
  0004c		 |$LN23@WrappedEmu@2|
  0004c		 |$LN25@WrappedEmu@2|
  0004c	04ed		 DCB         0x4
  0004d		 |$LN26@WrappedEmu@2|
  0004d	1ced		 DCB         0x1c
  0004e		 |$LN27@WrappedEmu@2|
  0004e	38ed		 DCB         0x38
  0004f		 |$LN28@WrappedEmu@2|
  0004f	58ed		 DCB         0x58
  00050		 |$LN29@WrappedEmu@2|
  00050	74ed		 DCB         0x74
  00051		 |$LN30@WrappedEmu@2|
  00051	94ed		 DCB         0x94
  00052		 |$LN31@WrappedEmu@2|
  00052	b4ed		 DCB         0xb4
  00053		 |$LN32@WrappedEmu@2|
  00053	d0ed		 DCB         0xd0
  00054		 |$LN15@WrappedEmu@2|

; 495  :     {
; 496  :         case 0:
; 497  :             bounds.left   = pParms->xStart;

  00054	e5947004	 ldr         r7, [r4, #4]

; 498  :             bounds.top    = pParms->yStart;
; 499  :             bounds.right  = pParms->xStart + pParms->cPels + 1;

  00058	e594300c	 ldr         r3, [r4, #0xC]
  0005c	e5946008	 ldr         r6, [r4, #8]
  00060	e0833007	 add         r3, r3, r7

; 500  :             bounds.bottom = bounds.top + N_plus_1;

  00064	e0869000	 add         r9, r6, r0

; 501  :             break;

  00068	ea000032	 b           |$LN22@WrappedEmu@2|
  0006c		 |$LN14@WrappedEmu@2|

; 502  : 
; 503  :         case 1:
; 504  :             bounds.left   = pParms->xStart;
; 505  :             bounds.top    = pParms->yStart;

  0006c	e5946008	 ldr         r6, [r4, #8]

; 506  :             bounds.bottom = pParms->yStart + pParms->cPels + 1;

  00070	e594300c	 ldr         r3, [r4, #0xC]
  00074	e5947004	 ldr         r7, [r4, #4]
  00078	e0833006	 add         r3, r3, r6
  0007c	e2839001	 add         r9, r3, #1

; 507  :             bounds.right  = bounds.left + N_plus_1;

  00080	e0878000	 add         r8, r7, r0

; 508  :             break;

  00084	ea00002c	 b           |$LN16@WrappedEmu@2|
  00088		 |$LN13@WrappedEmu@2|

; 509  : 
; 510  :         case 2:
; 511  :             bounds.right  = pParms->xStart + 1;

  00088	e5943004	 ldr         r3, [r4, #4]

; 512  :             bounds.top    = pParms->yStart;

  0008c	e5946008	 ldr         r6, [r4, #8]

; 513  :             bounds.bottom = pParms->yStart + pParms->cPels + 1;

  00090	e594200c	 ldr         r2, [r4, #0xC]
  00094	e2838001	 add         r8, r3, #1

; 514  :             bounds.left   = bounds.right - N_plus_1;

  00098	e0487000	 sub         r7, r8, r0
  0009c	e0823006	 add         r3, r2, r6
  000a0	e2839001	 add         r9, r3, #1

; 515  :             break;

  000a4	ea000024	 b           |$LN16@WrappedEmu@2|
  000a8		 |$LN12@WrappedEmu@2|

; 516  : 
; 517  :         case 3:
; 518  :             bounds.right  = pParms->xStart + 1;

  000a8	e5942004	 ldr         r2, [r4, #4]

; 519  :             bounds.top    = pParms->yStart;

  000ac	e5946008	 ldr         r6, [r4, #8]

; 520  :             bounds.left   = pParms->xStart - pParms->cPels;

  000b0	e594300c	 ldr         r3, [r4, #0xC]
  000b4	e2828001	 add         r8, r2, #1

; 521  :             bounds.bottom = bounds.top + N_plus_1;

  000b8	e0869000	 add         r9, r6, r0
  000bc	e0427003	 sub         r7, r2, r3

; 522  :             break;

  000c0	ea00001d	 b           |$LN16@WrappedEmu@2|
  000c4		 |$LN11@WrappedEmu@2|

; 523  : 
; 524  :         case 4:
; 525  :             bounds.right  = pParms->xStart + 1;
; 526  :             bounds.bottom = pParms->yStart + 1;

  000c4	e5943008	 ldr         r3, [r4, #8]
  000c8	e5941004	 ldr         r1, [r4, #4]

; 527  :             bounds.left   = pParms->xStart - pParms->cPels;

  000cc	e594200c	 ldr         r2, [r4, #0xC]
  000d0	e2839001	 add         r9, r3, #1

; 528  :             bounds.top    = bounds.bottom - N_plus_1;

  000d4	e0496000	 sub         r6, r9, r0
  000d8	e2818001	 add         r8, r1, #1
  000dc	e0417002	 sub         r7, r1, r2

; 529  :             break;

  000e0	ea000015	 b           |$LN16@WrappedEmu@2|
  000e4		 |$LN10@WrappedEmu@2|

; 530  : 
; 531  :         case 5:
; 532  :             bounds.right  = pParms->xStart + 1;

  000e4	e5943004	 ldr         r3, [r4, #4]

; 533  :             bounds.bottom = pParms->yStart + 1;

  000e8	e5941008	 ldr         r1, [r4, #8]

; 534  :             bounds.top    = pParms->yStart - pParms->cPels;

  000ec	e594200c	 ldr         r2, [r4, #0xC]
  000f0	e2838001	 add         r8, r3, #1

; 535  :             bounds.left   = bounds.right - N_plus_1;

  000f4	e0487000	 sub         r7, r8, r0
  000f8	e2819001	 add         r9, r1, #1
  000fc	e0416002	 sub         r6, r1, r2

; 536  :             break;

  00100	ea00000d	 b           |$LN16@WrappedEmu@2|
  00104		 |$LN9@WrappedEmu@2|

; 537  : 
; 538  :         case 6:
; 539  :             bounds.left   = pParms->xStart;

  00104	e5947004	 ldr         r7, [r4, #4]

; 540  :             bounds.bottom = pParms->yStart + 1;

  00108	e5942008	 ldr         r2, [r4, #8]

; 541  :             bounds.top    = pParms->yStart - pParms->cPels;

  0010c	e594300c	 ldr         r3, [r4, #0xC]

; 542  :             bounds.right  = bounds.left + N_plus_1;

  00110	e0878000	 add         r8, r7, r0
  00114	e2829001	 add         r9, r2, #1
  00118	e0426003	 sub         r6, r2, r3

; 543  :             break;

  0011c	ea000006	 b           |$LN16@WrappedEmu@2|
  00120		 |$LN8@WrappedEmu@2|

; 544  : 
; 545  :         case 7:
; 546  :             bounds.left   = pParms->xStart;
; 547  :             bounds.bottom = pParms->yStart + 1;

  00120	e5943008	 ldr         r3, [r4, #8]
  00124	e5947004	 ldr         r7, [r4, #4]

; 548  :             bounds.right  = pParms->xStart + pParms->cPels + 1;

  00128	e594200c	 ldr         r2, [r4, #0xC]
  0012c	e2839001	 add         r9, r3, #1

; 549  :             bounds.top    = bounds.bottom - N_plus_1;

  00130	e0496000	 sub         r6, r9, r0
  00134	e0873002	 add         r3, r7, r2
  00138		 |$LN22@WrappedEmu@2|

; 548  :             bounds.right  = pParms->xStart + pParms->cPels + 1;

  00138	e2838001	 add         r8, r3, #1

; 549  :             bounds.top    = bounds.bottom - N_plus_1;

  0013c		 |$LN16@WrappedEmu@2|

; 555  :     }
; 556  : 
; 557  :     // check for line overlap with cursor and turn off cursor if overlaps
; 558  :     if (!bDoRotation)

  0013c	e59fa0d8	 ldr         r10, [pc, #0xD8]
  00140	e59a3000	 ldr         r3, [r10]
  00144	e3530000	 cmp         r3, #0
  00148	1a00001f	 bne         |$LN3@WrappedEmu@2|

; 559  :     {
; 560  :         if (m_CursorVisible && !m_CursorDisabled)

  0014c	e59532ec	 ldr         r3, [r5, #0x2EC]
  00150	e3530000	 cmp         r3, #0
  00154	0a00001c	 beq         |$LN3@WrappedEmu@2|
  00158	e59532e8	 ldr         r3, [r5, #0x2E8]
  0015c	e3530000	 cmp         r3, #0
  00160	1a000019	 bne         |$LN3@WrappedEmu@2|

; 561  :         {
; 562  :             RotateRectl(&m_CursorRect);

  00164	e2851fbf	 add         r1, r5, #0xBF, 30
  00168	e1a00005	 mov         r0, r5
  0016c	eb000000	 bl          |?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|

; 563  : 
; 564  :             if (m_CursorRect.top < bounds.bottom && m_CursorRect.bottom > bounds.top &&
; 565  :                 m_CursorRect.left < bounds.right && m_CursorRect.right > bounds.left)

  00170	e5953300	 ldr         r3, [r5, #0x300]
  00174	e1530009	 cmp         r3, r9
  00178	aa000010	 bge         |$LN4@WrappedEmu@2|
  0017c	e5953308	 ldr         r3, [r5, #0x308]
  00180	e1530006	 cmp         r3, r6
  00184	da00000d	 ble         |$LN4@WrappedEmu@2|
  00188	e59532fc	 ldr         r3, [r5, #0x2FC]
  0018c	e1530008	 cmp         r3, r8
  00190	aa00000a	 bge         |$LN4@WrappedEmu@2|
  00194	e5953304	 ldr         r3, [r5, #0x304]
  00198	e1530007	 cmp         r3, r7
  0019c	da000007	 ble         |$LN4@WrappedEmu@2|

; 566  :             {
; 567  :                 RotateRectlBack(&m_CursorRect);

  001a0	e2851fbf	 add         r1, r5, #0xBF, 30
  001a4	e1a00005	 mov         r0, r5
  001a8	eb000000	 bl          |?RotateRectlBack@GPE@@QAAXPAU_RECTL@@@Z|

; 568  :                 CursorOff();

  001ac	e1a00005	 mov         r0, r5
  001b0	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|

; 569  :                 m_CursorForcedOff = TRUE;

  001b4	e3a03001	 mov         r3, #1
  001b8	e58532f0	 str         r3, [r5, #0x2F0]

; 570  :             }
; 571  :             else

  001bc	ea000002	 b           |$LN3@WrappedEmu@2|
  001c0		 |$LN4@WrappedEmu@2|

; 572  :             {
; 573  :                 RotateRectlBack(&m_CursorRect);

  001c0	e2851fbf	 add         r1, r5, #0xBF, 30
  001c4	e1a00005	 mov         r0, r5
  001c8	eb000000	 bl          |?RotateRectlBack@GPE@@QAAXPAU_RECTL@@@Z|
  001cc		 |$LN3@WrappedEmu@2|

; 574  :             }
; 575  :         }
; 576  :     }
; 577  : 
; 578  :     // do emulated line
; 579  :     retval = EmulatedLine(pParms);

  001cc	e1a01004	 mov         r1, r4
  001d0	e1a00005	 mov         r0, r5
  001d4	eb000000	 bl          |?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z|

; 580  : 
; 581  :     // see if cursor was forced off because of overlap with line bouneds and turn back on.
; 582  :     if (!bDoRotation)

  001d8	e59a3000	 ldr         r3, [r10]
  001dc	e1a04000	 mov         r4, r0
  001e0	e3530000	 cmp         r3, #0
  001e4	1a000008	 bne         |$LN20@WrappedEmu@2|

; 583  :     {
; 584  :         if (m_CursorForcedOff)

  001e8	e59532f0	 ldr         r3, [r5, #0x2F0]
  001ec	e3530000	 cmp         r3, #0
  001f0	0a000005	 beq         |$LN20@WrappedEmu@2|

; 585  :         {
; 586  :             m_CursorForcedOff = FALSE;

  001f4	e3a03000	 mov         r3, #0

; 587  :             CursorOn();

  001f8	e1a00005	 mov         r0, r5
  001fc	e58532f0	 str         r3, [r5, #0x2F0]
  00200	eb000000	 bl          |?CursorOn@SA2Video@@QAAXXZ|

; 588  :         }
; 589  :     }
; 590  : 
; 591  :     return retval;

  00204	ea000000	 b           |$LN20@WrappedEmu@2|
  00208		 |$LN7@WrappedEmu@2|

; 550  :             break;
; 551  : 
; 552  :         default:
; 553  :             DEBUGMSG(GPE_ZONE_ERROR,(TEXT("Invalid direction: %d\r\n"), pParms->iDir));
; 554  :             return E_INVALIDARG;

  00208	e59f4008	 ldr         r4, [pc, #8]
  0020c		 |$LN20@WrappedEmu@2|

; 592  : }

  0020c	e1a00004	 mov         r0, r4
  00210	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00214	e12fff1e	 bx          lr
  00218		 |$LN36@WrappedEmu@2|
  00218		 |$LN37@WrappedEmu@2|
  00218	80070057	 DCD         0x80070057
  0021c		 |$LN38@WrappedEmu@2|
  0021c	00000000	 DCD         |bDoRotation|
  00220		 |$M39412|

			 ENDP  ; |?WrappedEmulatedLine@SA2Video@@AAAJPAUGPELineParms@@@Z|, SA2Video::WrappedEmulatedLine


  00000			 AREA	 |.pdata|, PDATA
|$T39430| DCD	|$LN10@Line|
	DCD	0x40000e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Line@SA2Video@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z| PROC ; SA2Video::Line

; 891  : {

  00000		 |$LN10@Line|
  00000		 |$M39427|
  00000	e3520000	 cmp         r2, #0

; 892  :     if(phase == gpeSingle || phase == gpePrepare)

  00004	0a000001	 beq         |$LN3@Line|
  00008	e3520001	 cmp         r2, #1
  0000c	1a000005	 bne         |$LN1@Line|
  00010		 |$LN3@Line|

; 893  :     {
; 894  :         if(pLineParms->pDst != m_pPrimarySurface)

  00010	e5912028	 ldr         r2, [r1, #0x28]
  00014	e5903004	 ldr         r3, [r0, #4]
  00018	e1520003	 cmp         r2, r3

; 895  :         {
; 896  :             pLineParms->pLine = &GPE::EmulatedLine;

  0001c	159f3010	 ldrne       r3, [pc, #0x10]

; 897  :         }
; 898  :         else
; 899  :         {
; 900  :             pLineParms->pLine = (SCODE (GPE::*)(struct GPELineParms *))&SA2Video::WrappedEmulatedLine;

  00020	059f3008	 ldreq       r3, [pc, #8]
  00024	e5813000	 str         r3, [r1]
  00028		 |$LN1@Line|

; 901  :         }
; 902  :     }
; 903  : 
; 904  :     return S_OK;

  00028	e3a00000	 mov         r0, #0

; 905  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN11@Line|
  00030		 |$LN12@Line|
  00030	00000000	 DCD         |?WrappedEmulatedLine@SA2Video@@AAAJPAUGPELineParms@@@Z|
  00034		 |$LN13@Line|
  00034	00000000	 DCD         |?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z|
  00038		 |$M39428|

			 ENDP  ; |?Line@SA2Video@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z|, SA2Video::Line


  00000			 AREA	 |.pdata|, PDATA
|$T39454| DCD	|$LN22@BltPrepare|
	DCD	0x40007801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BltPrepare@SA2Video@@UAAJPAUGPEBltParms@@@Z| PROC ; SA2Video::BltPrepare

; 1038 : {

  00000		 |$LN22@BltPrepare|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M39451|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 1039 :     DEBUGMSG(GPE_ZONE_LINE,(TEXT("SA2Video::BltPrepare\r\n")));
; 1040 : 
; 1041 :     RECTL rectl;
; 1042 : 
; 1043 :     pParms->pBlt = &GPE::EmulatedBlt;

  0000c	e59f31c8	 ldr         r3, [pc, #0x1C8]

; 1044 : 
; 1045 :     // Check to see if the software cursor should be disabled.
; 1046 :     if (!bDoRotation)

  00010	e59f71c0	 ldr         r7, [pc, #0x1C0]
  00014	e5853000	 str         r3, [r5]
  00018	e5973000	 ldr         r3, [r7]
  0001c	e3530000	 cmp         r3, #0
  00020	1a000051	 bne         |$LN5@BltPrepare|

; 1047 :     {
; 1048 :         if (pParms->pDst == m_pPrimarySurface)  // only care if dest is main display surface

  00024	e5952004	 ldr         r2, [r5, #4]
  00028	e5943004	 ldr         r3, [r4, #4]
  0002c	e3a08001	 mov         r8, #1
  00030	e1520003	 cmp         r2, r3
  00034	1a000029	 bne         |$LN10@BltPrepare|

; 1049 :         {
; 1050 :             if (m_CursorVisible && !m_CursorDisabled)

  00038	e59432ec	 ldr         r3, [r4, #0x2EC]
  0003c	e3530000	 cmp         r3, #0
  00040	0a000026	 beq         |$LN10@BltPrepare|
  00044	e59432e8	 ldr         r3, [r4, #0x2E8]
  00048	e3530000	 cmp         r3, #0
  0004c	1a000023	 bne         |$LN10@BltPrepare|

; 1051 :             {
; 1052 :                 if (pParms->prclDst != NULL)        // make sure there is a valid prclDst

  00050	e5953014	 ldr         r3, [r5, #0x14]
  00054	e3530000	 cmp         r3, #0
  00058	0a00000d	 beq         |$LN14@BltPrepare|

; 1053 :                 {
; 1054 :                     rectl = *pParms->prclDst;       // if so, use it

  0005c	e5932000	 ldr         r2, [r3]
  00060	e5930004	 ldr         r0, [r3, #4]
  00064	e593e008	 ldr         lr, [r3, #8]
  00068	e593300c	 ldr         r3, [r3, #0xC]
  0006c	e1a0100e	 mov         r1, lr

; 1055 : 
; 1056 :                     // There is no guarantee of a well ordered rect in pParms
; 1057 :                     // due to flipping and mirroring.
; 1058 :                     if(rectl.top > rectl.bottom)

  00070	e1500003	 cmp         r0, r3
  00074	e1a06003	 mov         r6, r3

; 1059 :                     {
; 1060 :                         int iSwapTmp     = rectl.top;

  00078	c1a06000	 movgt       r6, r0

; 1061 :                         rectl.top    = rectl.bottom;
; 1062 :                         rectl.bottom = iSwapTmp;

  0007c	c1a00003	 movgt       r0, r3

; 1063 :                     }
; 1064 : 
; 1065 :                     if(rectl.left > rectl.right)

  00080	e152000e	 cmp         r2, lr
  00084	da000006	 ble         |$LN11@BltPrepare|

; 1066 :                     {
; 1067 :                         int iSwapTmp    = rectl.left;

  00088	e1a01002	 mov         r1, r2

; 1068 :                         rectl.left  = rectl.right;
; 1069 :                         rectl.right = iSwapTmp;

  0008c	e1a0200e	 mov         r2, lr

; 1070 :                     }
; 1071 :                 }
; 1072 :                 else

  00090	ea000003	 b           |$LN11@BltPrepare|
  00094		 |$LN14@BltPrepare|

; 1073 :                 {
; 1074 :                     rectl = m_CursorRect;                   // if not, use the Cursor rect - this forces the cursor to be turned off in this case.

  00094	e59422fc	 ldr         r2, [r4, #0x2FC]
  00098	e5940300	 ldr         r0, [r4, #0x300]
  0009c	e5941304	 ldr         r1, [r4, #0x304]
  000a0	e5946308	 ldr         r6, [r4, #0x308]
  000a4		 |$LN11@BltPrepare|

; 1075 :                 }
; 1076 : 
; 1077 :                 if (m_CursorRect.top <= rectl.bottom && m_CursorRect.bottom >= rectl.top &&
; 1078 :                     m_CursorRect.left <= rectl.right && m_CursorRect.right >= rectl.left)

  000a4	e5943300	 ldr         r3, [r4, #0x300]
  000a8	e1530006	 cmp         r3, r6
  000ac	ca00000b	 bgt         |$LN10@BltPrepare|
  000b0	e5943308	 ldr         r3, [r4, #0x308]
  000b4	e1530000	 cmp         r3, r0
  000b8	ba000008	 blt         |$LN10@BltPrepare|
  000bc	e59432fc	 ldr         r3, [r4, #0x2FC]
  000c0	e1530001	 cmp         r3, r1
  000c4	ca000005	 bgt         |$LN10@BltPrepare|
  000c8	e5943304	 ldr         r3, [r4, #0x304]
  000cc	e1530002	 cmp         r3, r2
  000d0	ba000002	 blt         |$LN10@BltPrepare|

; 1079 :                 {
; 1080 :                     CursorOff();

  000d4	e1a00004	 mov         r0, r4
  000d8	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|

; 1081 :                     m_CursorForcedOff = TRUE;

  000dc	e58482f0	 str         r8, [r4, #0x2F0]
  000e0		 |$LN10@BltPrepare|

; 1082 :                 }
; 1083 :             }
; 1084 :         }
; 1085 : 
; 1086 :         // check for source overlap with cursor and turn off cursor if overlaps
; 1087 :         if (pParms->pSrc == m_pPrimarySurface)  // only care if source is main display surface

  000e0	e5952008	 ldr         r2, [r5, #8]
  000e4	e5943004	 ldr         r3, [r4, #4]
  000e8	e1520003	 cmp         r2, r3
  000ec	1a00001e	 bne         |$LN5@BltPrepare|

; 1088 :         {
; 1089 :             if (m_CursorVisible && !m_CursorDisabled)

  000f0	e59432ec	 ldr         r3, [r4, #0x2EC]
  000f4	e3530000	 cmp         r3, #0
  000f8	0a00001b	 beq         |$LN5@BltPrepare|
  000fc	e59432e8	 ldr         r3, [r4, #0x2E8]
  00100	e3530000	 cmp         r3, #0
  00104	1a000018	 bne         |$LN5@BltPrepare|

; 1090 :             {
; 1091 :                 if (pParms->prclSrc != NULL)        // make sure there is a valid prclSrc

  00108	e5953018	 ldr         r3, [r5, #0x18]
  0010c	e3530000	 cmp         r3, #0

; 1092 :                 {
; 1093 :                     rectl = *pParms->prclSrc;       // if so, use it

  00110	15930000	 ldrne       r0, [r3]
  00114	15931004	 ldrne       r1, [r3, #4]
  00118	1593e008	 ldrne       lr, [r3, #8]
  0011c	1593200c	 ldrne       r2, [r3, #0xC]

; 1094 :                 }
; 1095 :                 else
; 1096 :                 {
; 1097 :                     rectl = m_CursorRect;                   // if not, use the Cursor rect - this forces the cursor to be turned off in this case.

  00120	05942308	 ldreq       r2, [r4, #0x308]

; 1098 :                 }
; 1099 : 
; 1100 :                 if (m_CursorRect.top < rectl.bottom && m_CursorRect.bottom > rectl.top &&
; 1101 :                     m_CursorRect.left < rectl.right && m_CursorRect.right > rectl.left)

  00124	e5943300	 ldr         r3, [r4, #0x300]
  00128	059402fc	 ldreq       r0, [r4, #0x2FC]
  0012c	05941300	 ldreq       r1, [r4, #0x300]
  00130	0594e304	 ldreq       lr, [r4, #0x304]
  00134	e1530002	 cmp         r3, r2
  00138	aa00000b	 bge         |$LN5@BltPrepare|
  0013c	e5943308	 ldr         r3, [r4, #0x308]
  00140	e1530001	 cmp         r3, r1
  00144	da000008	 ble         |$LN5@BltPrepare|
  00148	e59432fc	 ldr         r3, [r4, #0x2FC]
  0014c	e153000e	 cmp         r3, lr
  00150	aa000005	 bge         |$LN5@BltPrepare|
  00154	e5943304	 ldr         r3, [r4, #0x304]
  00158	e1530000	 cmp         r3, r0
  0015c	da000002	 ble         |$LN5@BltPrepare|

; 1102 :                 {
; 1103 :                     CursorOff();

  00160	e1a00004	 mov         r0, r4
  00164	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|

; 1104 :                     m_CursorForcedOff = TRUE;

  00168	e58482f0	 str         r8, [r4, #0x2F0]
  0016c		 |$LN5@BltPrepare|

; 1105 :                 }
; 1106 :             }
; 1107 :         }
; 1108 :     }
; 1109 : 
; 1110 :     if ((pParms->pDst == m_pPrimarySurface && m_iRotate) || (pParms->pSrc == m_pPrimarySurface && m_iRotate))

  0016c	e5951004	 ldr         r1, [r5, #4]
  00170	e5942004	 ldr         r2, [r4, #4]
  00174	e1510002	 cmp         r1, r2
  00178	1a000002	 bne         |$LN2@BltPrepare|
  0017c	e5943018	 ldr         r3, [r4, #0x18]
  00180	e3530000	 cmp         r3, #0
  00184	1a000005	 bne         |$LN3@BltPrepare|
  00188		 |$LN2@BltPrepare|
  00188	e5953008	 ldr         r3, [r5, #8]
  0018c	e1530002	 cmp         r3, r2
  00190	1a000004	 bne         |$LN4@BltPrepare|
  00194	e5943018	 ldr         r3, [r4, #0x18]
  00198	e3530000	 cmp         r3, #0
  0019c	0a000001	 beq         |$LN4@BltPrepare|
  001a0		 |$LN3@BltPrepare|

; 1111 :     {
; 1112 :         pParms->pBlt = &GPE::EmulatedBltRotate;

  001a0	e59f302c	 ldr         r3, [pc, #0x2C]
  001a4	e5853000	 str         r3, [r5]
  001a8		 |$LN4@BltPrepare|
  001a8	e5973000	 ldr         r3, [r7]

; 1113 :     }
; 1114 : 
; 1115 :     if (bDoRotation && pParms->pDst == m_pPrimarySurface)

  001ac	e3530000	 cmp         r3, #0
  001b0	0a000003	 beq         |$LN1@BltPrepare|
  001b4	e5943004	 ldr         r3, [r4, #4]
  001b8	e1510003	 cmp         r1, r3

; 1116 :     {
; 1117 :         pParms->pBlt = (SCODE (GPE::*)(GPEBltParms *))&SA2Video::WrappedEmulatedBlt;

  001bc	059f300c	 ldreq       r3, [pc, #0xC]
  001c0	05853000	 streq       r3, [r5]
  001c4		 |$LN1@BltPrepare|

; 1118 :     }
; 1119 : 
; 1120 :     return S_OK;

  001c4	e3a00000	 mov         r0, #0

; 1121 : }

  001c8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  001cc	e12fff1e	 bx          lr
  001d0		 |$LN23@BltPrepare|
  001d0		 |$LN24@BltPrepare|
  001d0	00000000	 DCD         |?WrappedEmulatedBlt@SA2Video@@AAAJPAUGPEBltParms@@@Z|
  001d4		 |$LN25@BltPrepare|
  001d4	00000000	 DCD         |?EmulatedBltRotate@GPE@@QAAJPAUGPEBltParms@@@Z|
  001d8		 |$LN26@BltPrepare|
  001d8	00000000	 DCD         |bDoRotation|
  001dc		 |$LN27@BltPrepare|
  001dc	00000000	 DCD         |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  001e0		 |$M39452|

			 ENDP  ; |?BltPrepare@SA2Video@@UAAJPAUGPEBltParms@@@Z|, SA2Video::BltPrepare


  00000			 AREA	 |.pdata|, PDATA
|$T39469| DCD	|$LN7@BltComplet|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?BltComplete@SA2Video@@UAAJPAUGPEBltParms@@@Z| PROC ; SA2Video::BltComplete

; 1129 : {

  00000		 |$LN7@BltComplet|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39466|

; 1130 :     if (!bDoRotation)

  00004	e59f3028	 ldr         r3, [pc, #0x28]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530000	 cmp         r3, #0
  00010	1a000004	 bne         |$LN1@BltComplet|

; 1131 :     {
; 1132 :         if (m_CursorForcedOff)

  00014	e59032f0	 ldr         r3, [r0, #0x2F0]
  00018	e3530000	 cmp         r3, #0

; 1133 :         {
; 1134 :             m_CursorForcedOff = FALSE;

  0001c	13a03000	 movne       r3, #0
  00020	158032f0	 strne       r3, [r0, #0x2F0]

; 1135 :             CursorOn();

  00024	1b000000	 blne        |?CursorOn@SA2Video@@QAAXXZ|
  00028		 |$LN1@BltComplet|

; 1136 :         }
; 1137 :     }
; 1138 : 
; 1139 :     return S_OK;

  00028	e3a00000	 mov         r0, #0

; 1140 : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN8@BltComplet|
  00034		 |$LN9@BltComplet|
  00034	00000000	 DCD         |bDoRotation|
  00038		 |$M39467|

			 ENDP  ; |?BltComplete@SA2Video@@UAAJPAUGPEBltParms@@@Z|, SA2Video::BltComplete

	EXPORT	|?DynRotate@SA2Video@@QAAJH@Z|		; SA2Video::DynRotate

  00000			 AREA	 |.pdata|, PDATA
|$T39485| DCD	|$LN13@DynRotate|
	DCD	0x40002e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DynRotate@SA2Video@@QAAJH@Z| PROC	; SA2Video::DynRotate

; 1757 : {

  00000		 |$LN13@DynRotate|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M39482|
  00004	e1a05001	 mov         r5, r1
  00008	e1a04000	 mov         r4, r0

; 1758 :     GPESurfRotate *pSurf = (GPESurfRotate *)m_pPrimarySurface;
; 1759 : 
; 1760 :     if (m_InDDraw)

  0000c	e5943b0c	 ldr         r3, [r4, #0xB0C]
  00010	e5946004	 ldr         r6, [r4, #4]
  00014	e3530000	 cmp         r3, #0

; 1761 :     {
; 1762 :         return DISP_CHANGE_BADMODE;

  00018	13e00001	 mvnne       r0, #1

; 1796 : }

  0001c	18bd4070	 ldmneia     sp!, {r4 - r6, lr}
  00020	112fff1e	 bxne        lr

; 1763 :     }
; 1764 : 
; 1765 :     if (angle == m_iRotate)

  00024	e5943018	 ldr         r3, [r4, #0x18]
  00028	e1550003	 cmp         r5, r3

; 1766 :     {
; 1767 :         return DISP_CHANGE_SUCCESSFUL;

  0002c	0a00001e	 beq         |$LN9@DynRotate|

; 1768 :     }
; 1769 : 
; 1770 :     CursorOff();

  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|

; 1771 : 
; 1772 :     m_iRotate = angle;

  00038	e5845018	 str         r5, [r4, #0x18]

; 1773 : 
; 1774 :     switch(m_iRotate)

  0003c	e3550000	 cmp         r5, #0
  00040	0a000008	 beq         |$LN2@DynRotate|
  00044	e3550001	 cmp         r5, #1
  00048	0a000003	 beq         |$LN1@DynRotate|
  0004c	e3550002	 cmp         r5, #2
  00050	0a000004	 beq         |$LN2@DynRotate|
  00054	e3550004	 cmp         r5, #4
  00058	1a000006	 bne         |$LN3@DynRotate|
  0005c		 |$LN1@DynRotate|

; 1780 :         break;
; 1781 : 
; 1782 :     case DMDO_90:
; 1783 :     case DMDO_270:
; 1784 :         m_nScreenHeight = m_nScreenWidthSave;

  0005c	e594301c	 ldr         r3, [r4, #0x1C]

; 1785 :         m_nScreenWidth  = m_nScreenHeightSave;

  00060	e5942020	 ldr         r2, [r4, #0x20]

; 1786 :         break;

  00064	ea000001	 b           |$LN10@DynRotate|
  00068		 |$LN2@DynRotate|

; 1775 :     {
; 1776 :     case DMDO_0:
; 1777 :     case DMDO_180:
; 1778 :         m_nScreenHeight = m_nScreenHeightSave;

  00068	e5943020	 ldr         r3, [r4, #0x20]

; 1779 :         m_nScreenWidth  = m_nScreenWidthSave;

  0006c	e594201c	 ldr         r2, [r4, #0x1C]
  00070		 |$LN10@DynRotate|
  00070	e5842008	 str         r2, [r4, #8]
  00074	e584300c	 str         r3, [r4, #0xC]
  00078		 |$LN3@DynRotate|

; 1787 :     }
; 1788 : 
; 1789 :     m_pMode->width  = m_nScreenWidth;

  00078	e5941010	 ldr         r1, [r4, #0x10]
  0007c	e5942008	 ldr         r2, [r4, #8]

; 1790 :     m_pMode->height = m_nScreenHeight;
; 1791 :     pSurf->SetRotation(m_nScreenWidth, m_nScreenHeight, angle);

  00080	e1a03005	 mov         r3, r5
  00084	e1a00006	 mov         r0, r6
  00088	e5812004	 str         r2, [r1, #4]
  0008c	e5941010	 ldr         r1, [r4, #0x10]
  00090	e594200c	 ldr         r2, [r4, #0xC]
  00094	e5812008	 str         r2, [r1, #8]
  00098	e594200c	 ldr         r2, [r4, #0xC]
  0009c	e5941008	 ldr         r1, [r4, #8]
  000a0	eb000000	 bl          |?SetRotation@GPESurf@@QAAXHHH@Z|

; 1792 : 
; 1793 :     CursorOn();

  000a4	e1a00004	 mov         r0, r4
  000a8	eb000000	 bl          |?CursorOn@SA2Video@@QAAXXZ|
  000ac		 |$LN9@DynRotate|

; 1794 : 
; 1795 :     return DISP_CHANGE_SUCCESSFUL;

  000ac	e3a00000	 mov         r0, #0

; 1796 : }

  000b0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$M39483|

			 ENDP  ; |?DynRotate@SA2Video@@QAAJH@Z|, SA2Video::DynRotate

	EXPORT	|GetGPE|

  00000			 AREA	 |.pdata|, PDATA
|$T39499| DCD	|$LN9@GetGPE|
	DCD	0x40001001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetGPE| PROC

; 141  : {

  00000		 |$LN9@GetGPE|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39496|

; 142  :     if (!pGPE)

  00004	e59f4030	 ldr         r4, [pc, #0x30]
  00008	e5940000	 ldr         r0, [r4]
  0000c	e3500000	 cmp         r0, #0
  00010	1a000007	 bne         |$LN5@GetGPE|

; 143  :     {
; 144  :         pGPE = new SA2Video();

  00014	e3a00eb1	 mov         r0, #0xB1, 28
  00018	eb000000	 bl          |??2@YAPAXI@Z|
  0001c	e3500000	 cmp         r0, #0
  00020	0a000001	 beq         |$LN4@GetGPE|
  00024	eb000000	 bl          |??0SA2Video@@QAA@XZ|
  00028	ea000000	 b           |$LN6@GetGPE|
  0002c		 |$LN4@GetGPE|
  0002c	e3a00000	 mov         r0, #0
  00030		 |$LN6@GetGPE|
  00030	e5840000	 str         r0, [r4]
  00034		 |$LN5@GetGPE|

; 145  :     }
; 146  : 
; 147  :     return pGPE;
; 148  : }

  00034	e8bd4010	 ldmia       sp!, {r4, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$LN10@GetGPE|
  0003c		 |$LN11@GetGPE|
  0003c	00000000	 DCD         |?pGPE@@3PAVDDGPE@@A|
  00040		 |$M39497|

			 ENDP  ; |GetGPE|

	EXPORT	|??_C@_1FC@JMNBBIFC@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@JDBAEIHI@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@LCOCAHFG@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@| [ DATA ] ; `string'
	IMPORT	|SetLastError|
	IMPORT	|ScrollBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T39547| DCD	|$LN80@DrvEscape|
	DCD	0x40016802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@JMNBBIFC@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E"
	DCB	0x0, "O", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T"
	DCB	0x0, "-", 0x0, "(", 0x0, "D", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@JDBAEIHI@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E"
	DCB	0x0, "O", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "Q", 0x0, "U", 0x0, "E"
	DCB	0x0, "R", 0x0, "Y", 0x0, "-", 0x0, "(", 0x0, "D", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@LCOCAHFG@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M"
	DCB	0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "N", 0x0, "o", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DrvEscape@SA2Video@@UAAKPAU_SURFOBJ@@KKPAXK1@Z| PROC ; SA2Video::DrvEscape

; 1383 : {

  00000		 |$LN80@DrvEscape|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M39544|
  00008	e1a0e003	 mov         lr, r3
  0000c	e1a05000	 mov         r5, r0

; 1384 :     int RetVal = 0; // default return value: "not supported"
; 1385 :     DWORD EscapeFunction;
; 1386 :     GXDeviceInfo *pgxoi;
; 1387 :     CEDEVICE_POWER_STATE NewDx;
; 1388 :     VIDEO_POWER_MANAGEMENT *pvpm;
; 1389 :     BOOL  bErr = TRUE;
; 1390 : 
; 1391 :     switch (iEsc)

  00010	e59f0584	 ldr         r0, [pc, #0x584]
  00014	e3a04000	 mov         r4, #0
  00018	e1520000	 cmp         r2, r0
  0001c	8a000088	 bhi         |$LN64@DrvEscape|
  00020	0a000084	 beq         |$LN23@DrvEscape|
  00024	e3520008	 cmp         r2, #8
  00028	0a000056	 beq         |$LN30@DrvEscape|
  0002c	e3a03b06	 mov         r3, #6, 22
  00030	e3831003	 orr         r1, r3, #3
  00034	e1520001	 cmp         r2, r1
  00038	0a00003d	 beq         |$LN50@DrvEscape|
  0003c	e3a03b06	 mov         r3, #6, 22
  00040	e3831004	 orr         r1, r3, #4
  00044	e1520001	 cmp         r2, r1
  00048	0a000029	 beq         |$LN53@DrvEscape|
  0004c	e3a03b06	 mov         r3, #6, 22
  00050	e383309d	 orr         r3, r3, #0x9D
  00054	e1520003	 cmp         r2, r3
  00058	0a000012	 beq         |$LN19@DrvEscape|
  0005c	e3a03b06	 mov         r3, #6, 22
  00060	e383309e	 orr         r3, r3, #0x9E
  00064	e1520003	 cmp         r2, r3
  00068	0a000004	 beq         |$LN22@DrvEscape|
  0006c	e59f3520	 ldr         r3, [pc, #0x520]
  00070	e1520003	 cmp         r2, r3
  00074	1a000081	 bne         |$LN1@DrvEscape|

; 1521 :             {
; 1522 :                 RetVal = 1;

  00078	e3a04001	 mov         r4, #1

; 1527 :             {
; 1528 :                 RetVal = 1;
; 1529 :             }
; 1530 :             break;

  0007c	ea000135	 b           |$LN2@DrvEscape|
  00080		 |$LN22@DrvEscape|

; 1539 : 
; 1540 :         case DRVESC_GETSCREENROTATION:
; 1541 :             if (!g_fDisableRotation)

  00080	e59f3508	 ldr         r3, [pc, #0x508]
  00084	e5933000	 ldr         r3, [r3]
  00088	e3530000	 cmp         r3, #0
  0008c	1a000130	 bne         |$LN21@DrvEscape|

; 1542 :             {
; 1543 :                 *(int *)pvOut = ((DMDO_0 | DMDO_90 | DMDO_180 | DMDO_270) << 8) | ((BYTE)m_iRotate);

  00090	e5d53018	 ldrb        r3, [r5, #0x18]
  00094	e59d2030	 ldr         r2, [sp, #0x30]

; 1544 :                 return DISP_CHANGE_SUCCESSFUL;

  00098	e3a04000	 mov         r4, #0
  0009c	e3833c07	 orr         r3, r3, #7, 24
  000a0	e5823000	 str         r3, [r2]
  000a4	ea00012b	 b           |$LN2@DrvEscape|
  000a8		 |$LN19@DrvEscape|

; 1545 :             }
; 1546 :             else
; 1547 :             {
; 1548 :                 return DISP_CHANGE_FAILED;
; 1549 :             }
; 1550 :             break;
; 1551 : 
; 1552 :         case DRVESC_SETSCREENROTATION:
; 1553 :             if ((!g_fDisableRotation) &&
; 1554 :                 ((cjIn == DMDO_0)    ||
; 1555 :                 (cjIn == DMDO_90)    ||
; 1556 :                 (cjIn == DMDO_180)    ||
; 1557 :                 (cjIn == DMDO_270)))

  000a8	e59f34e0	 ldr         r3, [pc, #0x4E0]
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e3530000	 cmp         r3, #0
  000b4	1a00000c	 bne         |$LN18@DrvEscape|
  000b8	e35e0000	 cmp         lr, #0
  000bc	0a000005	 beq         |$LN17@DrvEscape|
  000c0	e35e0001	 cmp         lr, #1
  000c4	0a000003	 beq         |$LN17@DrvEscape|
  000c8	e35e0002	 cmp         lr, #2
  000cc	0a000001	 beq         |$LN17@DrvEscape|
  000d0	e35e0004	 cmp         lr, #4
  000d4	1a000004	 bne         |$LN18@DrvEscape|
  000d8		 |$LN17@DrvEscape|

; 1558 :                 {
; 1559 :                     return DynRotate(cjIn);

  000d8	e1a0100e	 mov         r1, lr
  000dc	e1a00005	 mov         r0, r5
  000e0	eb000000	 bl          |?DynRotate@SA2Video@@QAAJH@Z|
  000e4	e1a04000	 mov         r4, r0
  000e8	ea00011a	 b           |$LN2@DrvEscape|
  000ec		 |$LN18@DrvEscape|

; 1560 :                 }
; 1561 : 
; 1562 :             return DISP_CHANGE_BADMODE;

  000ec	e3e04001	 mvn         r4, #1
  000f0	ea000118	 b           |$LN2@DrvEscape|
  000f4		 |$LN53@DrvEscape|

; 1392 :     {
; 1393 :         case GETPOWERMANAGEMENT :
; 1394 : 
; 1395 :             if (!pvOut || (cjOut < sizeof(VIDEO_POWER_MANAGEMENT)))

  000f4	e59d4030	 ldr         r4, [sp, #0x30]
  000f8	e3540000	 cmp         r4, #0
  000fc	0a000112	 beq         |$LN15@DrvEscape|
  00100	e59d302c	 ldr         r3, [sp, #0x2C]
  00104	e353000c	 cmp         r3, #0xC
  00108	3a00010f	 bcc         |$LN15@DrvEscape|

; 1396 :             {
; 1397 :                 SetLastError(ERROR_INVALID_PARAMETER);
; 1398 :                 return -1;
; 1399 :             }
; 1400 : 
; 1401 :             pvpm = (VIDEO_POWER_MANAGEMENT*)pvOut;
; 1402 :             pvpm->Length = sizeof(VIDEO_POWER_MANAGEMENT);

  0010c	e3a0300c	 mov         r3, #0xC

; 1403 :             pvpm->DPMSVersion = 0;

  00110	e3a02000	 mov         r2, #0
  00114	e5843000	 str         r3, [r4]
  00118	e5842004	 str         r2, [r4, #4]

; 1404 :             pvpm->PowerState  = GetVideoPowerState();

  0011c	e5951248	 ldr         r1, [r5, #0x248]
  00120	e1a00005	 mov         r0, r5
  00124	eb000000	 bl          |?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z|
  00128	e5840008	 str         r0, [r4, #8]

; 1521 :             {
; 1522 :                 RetVal = 1;

  0012c	e3a04001	 mov         r4, #1

; 1527 :             {
; 1528 :                 RetVal = 1;
; 1529 :             }
; 1530 :             break;

  00130	ea000108	 b           |$LN2@DrvEscape|
  00134		 |$LN50@DrvEscape|

; 1405 :             RetVal = 1;
; 1406 : 
; 1407 :             DEBUGMSG(ZONE_PM, (TEXT("SA2Video::GETPOWERMANAGEMENT: VidPowerState=0x%x\r\n"),pvpm->PowerState));
; 1408 : 
; 1409 :             break;
; 1410 : 
; 1411 :         case SETPOWERMANAGEMENT :
; 1412 :         {
; 1413 :             pvpm = (VIDEO_POWER_MANAGEMENT *)pvIn;
; 1414 : 
; 1415 :             if (!pvpm || (cjIn < sizeof(VIDEO_POWER_MANAGEMENT)))

  00134	e59d2028	 ldr         r2, [sp, #0x28]
  00138	e3520000	 cmp         r2, #0
  0013c	0a000102	 beq         |$LN15@DrvEscape|
  00140	e35e000c	 cmp         lr, #0xC
  00144	3a000100	 bcc         |$LN15@DrvEscape|

; 1416 :             {
; 1417 :                 SetLastError(ERROR_INVALID_PARAMETER);
; 1418 :                 return -1;
; 1419 :             }
; 1420 : 
; 1421 :             if (pvpm->Length < sizeof(VIDEO_POWER_MANAGEMENT))

  00148	e5923000	 ldr         r3, [r2]
  0014c	e353000c	 cmp         r3, #0xC

; 1422 :             {
; 1423 :                 SetLastError(ERROR_INVALID_PARAMETER);
; 1424 :                 return -1;

  00150	3a0000fd	 bcc         |$LN15@DrvEscape|

; 1425 :             }
; 1426 : 
; 1427 :             if (DevicePowerNotify(m_DisplayDeviceName, VideoToPmPowerState(pvpm->PowerState), POWER_NAME) )

  00154	e5921008	 ldr         r1, [r2, #8]
  00158	e1a00005	 mov         r0, r5
  0015c	eb000000	 bl          |?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z|
  00160	e1a01000	 mov         r1, r0
  00164	e2850040	 add         r0, r5, #0x40
  00168	e3a02001	 mov         r2, #1
  0016c	eb000000	 bl          DevicePowerNotify
  00170	e3500000	 cmp         r0, #0
  00174	1a00002d	 bne         |$LN28@DrvEscape|

; 1428 :             {
; 1429 :                DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SetPowerManagement:DevicePowerNotify-success VPwrstate=%d (D%d)\r\n"),pvpm->PowerState, VideoToPmPowerState(pvpm->PowerState)));
; 1430 :             }
; 1431 :             else
; 1432 :             {
; 1433 :                RETAILMSG(1, (TEXT("SA2Video::SetPowerManagement:DevicePowerNotify failed\r\n")));

  00178	e59f0418	 ldr         r0, [pc, #0x418]
  0017c	eb000000	 bl          NKDbgPrintfW

; 1521 :             {
; 1522 :                 RetVal = 1;

  00180	e3a04001	 mov         r4, #1

; 1527 :             {
; 1528 :                 RetVal = 1;
; 1529 :             }
; 1530 :             break;

  00184	ea0000f3	 b           |$LN2@DrvEscape|
  00188		 |$LN30@DrvEscape|

; 1509 : 
; 1510 :         case QUERYESCSUPPORT:
; 1511 :             EscapeFunction = *(DWORD *)pvIn;

  00188	e59d3028	 ldr         r3, [sp, #0x28]

; 1512 :             if ((EscapeFunction == VERTICALBLANKINTERRUPT)   ||
; 1513 :                 (EscapeFunction == SCROLL)                   ||
; 1514 :                 (EscapeFunction == SETPOWERMANAGEMENT)       ||
; 1515 :                 (EscapeFunction == GETPOWERMANAGEMENT)       ||
; 1516 :                 (EscapeFunction == IOCTL_POWER_CAPABILITIES) ||
; 1517 :                 (EscapeFunction == IOCTL_POWER_QUERY) ||
; 1518 :                 (EscapeFunction == IOCTL_POWER_SET) ||
; 1519 :                 (EscapeFunction == IOCTL_POWER_GET) ||
; 1520 :                 (EscapeFunction == GETGXINFO))

  0018c	e59f2400	 ldr         r2, [pc, #0x400]
  00190	e5931000	 ldr         r1, [r3]
  00194	e1510002	 cmp         r1, r2
  00198	0a000024	 beq         |$LN28@DrvEscape|
  0019c	e1510000	 cmp         r1, r0
  001a0	0a000022	 beq         |$LN28@DrvEscape|
  001a4	e3a03b06	 mov         r3, #6, 22
  001a8	e3833003	 orr         r3, r3, #3
  001ac	e1510003	 cmp         r1, r3
  001b0	0a00001e	 beq         |$LN28@DrvEscape|
  001b4	e3a03b06	 mov         r3, #6, 22
  001b8	e3833004	 orr         r3, r3, #4
  001bc	e1510003	 cmp         r1, r3
  001c0	0a00001a	 beq         |$LN28@DrvEscape|
  001c4	e3a03832	 mov         r3, #0x32, 16
  001c8	e3833a01	 orr         r3, r3, #1, 20
  001cc	e1510003	 cmp         r1, r3
  001d0	0a000016	 beq         |$LN28@DrvEscape|
  001d4	e59f33a8	 ldr         r3, [pc, #0x3A8]
  001d8	e1510003	 cmp         r1, r3
  001dc	0a000013	 beq         |$LN28@DrvEscape|
  001e0	e59f33a0	 ldr         r3, [pc, #0x3A0]
  001e4	e1510003	 cmp         r1, r3
  001e8	0a000010	 beq         |$LN28@DrvEscape|
  001ec	e59f3398	 ldr         r3, [pc, #0x398]
  001f0	e1510003	 cmp         r1, r3
  001f4	0a00000d	 beq         |$LN28@DrvEscape|
  001f8	e3510802	 cmp         r1, #2, 16
  001fc	0a00000b	 beq         |$LN28@DrvEscape|

; 1523 :             }
; 1524 :             else if ((!g_fDisableRotation) &&
; 1525 :                 ((EscapeFunction == DRVESC_GETSCREENROTATION) ||
; 1526 :                 (EscapeFunction == DRVESC_SETSCREENROTATION)))

  00200	e59f3388	 ldr         r3, [pc, #0x388]
  00204	e5933000	 ldr         r3, [r3]
  00208	e3530000	 cmp         r3, #0
  0020c	1a0000d1	 bne         |$LN2@DrvEscape|
  00210	e3a03b06	 mov         r3, #6, 22
  00214	e383309e	 orr         r3, r3, #0x9E
  00218	e1510003	 cmp         r1, r3
  0021c	0a000003	 beq         |$LN28@DrvEscape|
  00220	e3a03b06	 mov         r3, #6, 22
  00224	e383309d	 orr         r3, r3, #0x9D
  00228	e1510003	 cmp         r1, r3
  0022c	1a0000c9	 bne         |$LN2@DrvEscape|
  00230		 |$LN28@DrvEscape|

; 1521 :             {
; 1522 :                 RetVal = 1;

  00230	e3a04001	 mov         r4, #1

; 1527 :             {
; 1528 :                 RetVal = 1;
; 1529 :             }
; 1530 :             break;

  00234	ea0000c7	 b           |$LN2@DrvEscape|
  00238		 |$LN23@DrvEscape|

; 1531 : 
; 1532 :         case VERTICALBLANKINTERRUPT:
; 1533 :             RetVal = 1;
; 1534 :             break;
; 1535 : 
; 1536 :         case SCROLL:
; 1537 :             ScrollBuffer(cjIn);

  00238	e1a0000e	 mov         r0, lr
  0023c	eb000000	 bl          ScrollBuffer

; 1538 :             break;

  00240	ea0000c4	 b           |$LN2@DrvEscape|
  00244		 |$LN64@DrvEscape|

; 1384 :     int RetVal = 0; // default return value: "not supported"
; 1385 :     DWORD EscapeFunction;
; 1386 :     GXDeviceInfo *pgxoi;
; 1387 :     CEDEVICE_POWER_STATE NewDx;
; 1388 :     VIDEO_POWER_MANAGEMENT *pvpm;
; 1389 :     BOOL  bErr = TRUE;
; 1390 : 
; 1391 :     switch (iEsc)

  00244	e3520802	 cmp         r2, #2, 16
  00248	0a000045	 beq         |$LN16@DrvEscape|
  0024c	e3a03832	 mov         r3, #0x32, 16
  00250	e3833a01	 orr         r3, r3, #1, 20
  00254	e1520003	 cmp         r2, r3
  00258	0a000036	 beq         |$LN44@DrvEscape|
  0025c	e59f3328	 ldr         r3, [pc, #0x328]
  00260	e1520003	 cmp         r2, r3
  00264	0a000029	 beq         |$LN32@DrvEscape|
  00268	e59f3318	 ldr         r3, [pc, #0x318]
  0026c	e1520003	 cmp         r2, r3
  00270	0a000016	 beq         |$LN36@DrvEscape|
  00274	e59f3308	 ldr         r3, [pc, #0x308]
  00278	e1520003	 cmp         r2, r3
  0027c	0a000001	 beq         |$LN41@DrvEscape|
  00280		 |$LN1@DrvEscape|

; 1667 :             }
; 1668 :             break;
; 1669 : 
; 1670 :         default:
; 1671 :             RetVal = 0;

  00280	e3a04000	 mov         r4, #0

; 1672 :             break;

  00284	ea0000b3	 b           |$LN2@DrvEscape|
  00288		 |$LN41@DrvEscape|

; 1446 :                 RetVal = 1;
; 1447 :             }
; 1448 :             else
; 1449 :             {
; 1450 :                 SetLastError(MMSYSERR_INVALPARAM);
; 1451 :                 RetVal = -1;
; 1452 :             }
; 1453 :             break;
; 1454 : 
; 1455 :         case IOCTL_POWER_QUERY:
; 1456 :             DEBUGMSG(ZONE_PM, (TEXT("SA2VIDEO::IOCTL_POWER_QUERY\r\n")));
; 1457 :             if ( pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE) )

  00288	e59d2030	 ldr         r2, [sp, #0x30]
  0028c	e3520000	 cmp         r2, #0
  00290	0a000009	 beq         |$LN71@DrvEscape|
  00294	e59d302c	 ldr         r3, [sp, #0x2C]
  00298	e3530004	 cmp         r3, #4
  0029c	1a000006	 bne         |$LN71@DrvEscape|

; 1458 :             {
; 1459 :                 // Return a good status on any valid query since
; 1460 :                 // we are always ready to change power states.
; 1461 :                 NewDx = *(PCEDEVICE_POWER_STATE) pvOut;

  002a0	e5921000	 ldr         r1, [r2]

; 1462 : 
; 1463 :                 if ( ! VALID_DX(NewDx) )

  002a4	e3710001	 cmn         r1, #1
  002a8	daffffe0	 ble         |$LN28@DrvEscape|
  002ac	e3510005	 cmp         r1, #5
  002b0	ba000002	 blt         |$LN69@DrvEscape|

; 1521 :             {
; 1522 :                 RetVal = 1;

  002b4	e3a04001	 mov         r4, #1

; 1527 :             {
; 1528 :                 RetVal = 1;
; 1529 :             }
; 1530 :             break;

  002b8	ea0000a6	 b           |$LN2@DrvEscape|
  002bc		 |$LN71@DrvEscape|

; 1464 :                 {
; 1465 :                     DEBUGMSG(ZONE_PM, (TEXT("SA2VIDEO::IOCTL_POWER_QUERY-(D%d) success\r\n"),NewDx));
; 1466 :                     RetVal = 1;
; 1467 :                     bErr = FALSE;
; 1468 :                 }
; 1469 :             }
; 1470 : 
; 1471 :             if (bErr)

  002bc	e59d1000	 ldr         r1, [sp]
  002c0		 |$LN69@DrvEscape|

; 1472 :             {
; 1473 :                 RETAILMSG(1, (TEXT("SA2VIDEO::IOCTL_POWER_QUERY-(D%d) failed\r\n"),NewDx));

  002c0	e59f02b8	 ldr         r0, [pc, #0x2B8]
  002c4		 |$LN76@DrvEscape|
  002c4	eb000000	 bl          NKDbgPrintfW
  002c8		 |$LN43@DrvEscape|

; 1474 :                 SetLastError(MMSYSERR_INVALPARAM);

  002c8	e3a0000b	 mov         r0, #0xB

; 1475 :                 RetVal = -1;
; 1476 :             }
; 1477 :             break;

  002cc	ea00009f	 b           |$LN75@DrvEscape|
  002d0		 |$LN36@DrvEscape|

; 1478 : 
; 1479 :         case IOCTL_POWER_SET:
; 1480 :             if ( pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE) )

  002d0	e59d2030	 ldr         r2, [sp, #0x30]
  002d4	e3520000	 cmp         r2, #0
  002d8	0a000009	 beq         |$LN72@DrvEscape|
  002dc	e59d302c	 ldr         r3, [sp, #0x2C]
  002e0	e3530004	 cmp         r3, #4
  002e4	1a000006	 bne         |$LN72@DrvEscape|

; 1481 :             {
; 1482 :                 NewDx = *(PCEDEVICE_POWER_STATE)pvOut;

  002e8	e5921000	 ldr         r1, [r2]

; 1483 : 
; 1484 :                 if ( VALID_DX(NewDx) )

  002ec	e3510004	 cmp         r1, #4
  002f0	8a000004	 bhi         |$LN70@DrvEscape|

; 1485 :                 {
; 1486 :                     DEBUGMSG(ZONE_PM, (TEXT("SA2VIDEO::IOCTL_POWER_SET-(D%d) success\r\n"), NewDx));
; 1487 :                     SetPmPowerState(NewDx);

  002f4	e1a00005	 mov         r0, r5
  002f8	eb000000	 bl          |?SetPmPowerState@SA2Video@@AAAXW4_CEDEVICE_POWER_STATE@@@Z|

; 1521 :             {
; 1522 :                 RetVal = 1;

  002fc	e3a04001	 mov         r4, #1

; 1527 :             {
; 1528 :                 RetVal = 1;
; 1529 :             }
; 1530 :             break;

  00300	ea000094	 b           |$LN2@DrvEscape|
  00304		 |$LN72@DrvEscape|

; 1488 :                     RetVal = 1;
; 1489 :                     bErr = FALSE;
; 1490 :                 }
; 1491 :             }
; 1492 : 
; 1493 :             if (bErr)

  00304	e59d1000	 ldr         r1, [sp]
  00308		 |$LN70@DrvEscape|

; 1494 :             {
; 1495 :                 RETAILMSG(1, (TEXT("SA2VIDEO::IOCTL_POWER_SET-(D%d) failed\r\n"), NewDx));

  00308	e59f026c	 ldr         r0, [pc, #0x26C]

; 1496 :                 SetLastError(MMSYSERR_INVALPARAM);
; 1497 :                 RetVal = -1;
; 1498 :             }
; 1499 :             break;

  0030c	eaffffec	 b           |$LN76@DrvEscape|
  00310		 |$LN32@DrvEscape|

; 1500 : 
; 1501 :         case IOCTL_POWER_GET:
; 1502 :             DEBUGMSG(ZONE_PM, (TEXT("SA2VIDEO::IOCTL_POWER_GET\r\n")));
; 1503 :             if(pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE))

  00310	e59d2030	 ldr         r2, [sp, #0x30]
  00314	e3520000	 cmp         r2, #0
  00318	0a00008e	 beq         |$LN2@DrvEscape|
  0031c	e59d302c	 ldr         r3, [sp, #0x2C]
  00320	e3530004	 cmp         r3, #4
  00324	1a00008b	 bne         |$LN2@DrvEscape|

; 1504 :             {
; 1505 :                 *(PCEDEVICE_POWER_STATE) pvOut = GetPmPowerState();

  00328	e5953248	 ldr         r3, [r5, #0x248]

; 1506 :                 RetVal = 1;

  0032c	e3a04001	 mov         r4, #1
  00330	e5823000	 str         r3, [r2]

; 1507 :             }
; 1508 :             break;

  00334	ea000087	 b           |$LN2@DrvEscape|
  00338		 |$LN44@DrvEscape|

; 1434 :             }
; 1435 : 
; 1436 :             RetVal = 1;
; 1437 :             break;
; 1438 :         }
; 1439 :         case IOCTL_POWER_CAPABILITIES:
; 1440 :             if ( pvOut != NULL && cjOut == sizeof(POWER_CAPABILITIES) )

  00338	e59d0030	 ldr         r0, [sp, #0x30]
  0033c	e3500000	 cmp         r0, #0
  00340	0affffe0	 beq         |$LN43@DrvEscape|
  00344	e59d302c	 ldr         r3, [sp, #0x2C]
  00348	e3530030	 cmp         r3, #0x30
  0034c	1affffdd	 bne         |$LN43@DrvEscape|

; 1441 :             {
; 1442 :                 DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SA2VIDEO:IOCTL_POWER_CAPABILITIES\r\n")));
; 1443 :                 PPOWER_CAPABILITIES PowerCaps = (PPOWER_CAPABILITIES) pvOut;
; 1444 : 
; 1445 :                 memcpy(PowerCaps, &DisplayDrvPowerCaps, sizeof(DisplayDrvPowerCaps));

  00350	e59f1220	 ldr         r1, [pc, #0x220]
  00354	e3a02030	 mov         r2, #0x30
  00358	eb000000	 bl          memcpy

; 1521 :             {
; 1522 :                 RetVal = 1;

  0035c	e3a04001	 mov         r4, #1

; 1527 :             {
; 1528 :                 RetVal = 1;
; 1529 :             }
; 1530 :             break;

  00360	ea00007c	 b           |$LN2@DrvEscape|
  00364		 |$LN16@DrvEscape|

; 1563 :             break;
; 1564 : 
; 1565 :         case GETGXINFO:
; 1566 :             // Fill out the GAPI data structure.  Assumes 16bpp or 8bpp, with RGB565 format.
; 1567 :             // Must change cBPP and ffFormat fields to accomodate other formats.
; 1568 :             // All of the button data that follows must be filled out to match the specific OEM device.
; 1569 :             // The data that is used to fill out the data structure here is copied from
; 1570 :             // the Microsoft example.
; 1571 :             if ((cjOut >= sizeof(GXDeviceInfo)) && (pvOut != NULL) )

  00364	e59d302c	 ldr         r3, [sp, #0x2C]
  00368	e3530084	 cmp         r3, #0x84
  0036c	3a000076	 bcc         |$LN15@DrvEscape|
  00370	e59de030	 ldr         lr, [sp, #0x30]
  00374	e35e0000	 cmp         lr, #0
  00378	0a000073	 beq         |$LN15@DrvEscape|

; 1572 :             {
; 1573 :                 if (((GXDeviceInfo *) pvOut)->idVersion == kidVersion100)

  0037c	e59e3000	 ldr         r3, [lr]
  00380	e3530064	 cmp         r3, #0x64
  00384	1a000070	 bne         |$LN15@DrvEscape|

; 1574 :                 {
; 1575 :                     pgxoi = (GXDeviceInfo *) pvOut;
; 1576 :                     pgxoi->idVersion = kidVersion100;
; 1577 :                     pgxoi->pvFrameBuffer = (void *) FRAME_BUFFER_0_BASE_VIRTUAL;

  00388	e59f31e4	 ldr         r3, [pc, #0x1E4]
  0038c	e3a02064	 mov         r2, #0x64
  00390	e58e2000	 str         r2, [lr]
  00394	e5933000	 ldr         r3, [r3]

; 1578 : 
; 1579 :                     // cbStride reflects the physical properties of the display regardless of orientation.
; 1580 :                     // Using a native portrait mode display, stride will always be 480.
; 1581 :                     // If using native landscape mode display, stride would be 640.
; 1582 :                     if (((DispDrvr_cxScreen == 240) && (DispDrvr_cyScreen == 320)) ||
; 1583 :                         ((DispDrvr_cxScreen == 320) && (DispDrvr_cyScreen == 240)) )

  00398	e59f01d0	 ldr         r0, [pc, #0x1D0]
  0039c	e59f51c8	 ldr         r5, [pc, #0x1C8]
  003a0	e2833d12	 add         r3, r3, #0x12, 26
  003a4	e58e3004	 str         r3, [lr, #4]
  003a8	e5902000	 ldr         r2, [r0]
  003ac	e59f41b4	 ldr         r4, [pc, #0x1B4]
  003b0	e5951000	 ldr         r1, [r5]
  003b4	e35200f0	 cmp         r2, #0xF0
  003b8	e3a06010	 mov         r6, #0x10
  003bc	1a000001	 bne         |$LN11@DrvEscape|
  003c0	e3510d05	 cmp         r1, #5, 26
  003c4	0a000003	 beq         |$LN12@DrvEscape|
  003c8		 |$LN11@DrvEscape|
  003c8	e3520d05	 cmp         r2, #5, 26
  003cc	1a00000f	 bne         |$LN73@DrvEscape|
  003d0	e35100f0	 cmp         r1, #0xF0
  003d4	1a000021	 bne         |$LN4@DrvEscape|
  003d8		 |$LN12@DrvEscape|

; 1584 :                     {
; 1585 :                         if (bpp == 16)

  003d8	e5943000	 ldr         r3, [r4]
  003dc	e3530010	 cmp         r3, #0x10

; 1586 :                         {
; 1587 :                             pgxoi->cbStride = 480;

  003e0	03a03e1e	 moveq       r3, #0x1E, 28
  003e4	058e3008	 streq       r3, [lr, #8]

; 1588 :                             pgxoi->cBPP = 16;

  003e8	058e6014	 streq       r6, [lr, #0x14]
  003ec	e5943000	 ldr         r3, [r4]
  003f0	05902000	 ldreq       r2, [r0]
  003f4	05951000	 ldreq       r1, [r5]

; 1589 :                         }
; 1590 :                         if (bpp == 8)

  003f8	e3530008	 cmp         r3, #8

; 1591 :                         {
; 1592 :                             pgxoi->cbStride = 240;

  003fc	03a030f0	 moveq       r3, #0xF0
  00400	058e3008	 streq       r3, [lr, #8]

; 1593 :                             pgxoi->cBPP = 16;

  00404	058e6014	 streq       r6, [lr, #0x14]
  00408	05902000	 ldreq       r2, [r0]
  0040c	05951000	 ldreq       r1, [r5]
  00410		 |$LN73@DrvEscape|

; 1594 :                         }
; 1595 :                     }
; 1596 : 
; 1597 :                     // Using a native landscape mode display, stride will always be 1280.
; 1598 :                     // If using native portrait mode display, stride would be 960.
; 1599 : 
; 1600 :                     if (((DispDrvr_cxScreen == 480) && (DispDrvr_cyScreen == 640)) ||
; 1601 :                         ((DispDrvr_cxScreen == 640) && (DispDrvr_cyScreen == 480)) )

  00410	e3520e1e	 cmp         r2, #0x1E, 28
  00414	1a000001	 bne         |$LN6@DrvEscape|
  00418	e3510d0a	 cmp         r1, #0xA, 26
  0041c	0a000003	 beq         |$LN7@DrvEscape|
  00420		 |$LN6@DrvEscape|
  00420	e3520d0a	 cmp         r2, #0xA, 26
  00424	1a00000d	 bne         |$LN4@DrvEscape|
  00428	e3510e1e	 cmp         r1, #0x1E, 28
  0042c	1a00000b	 bne         |$LN4@DrvEscape|
  00430		 |$LN7@DrvEscape|

; 1584 :                     {
; 1585 :                         if (bpp == 16)

  00430	e5943000	 ldr         r3, [r4]

; 1602 :                     {
; 1603 :                         if (bpp == 16)

  00434	e3530010	 cmp         r3, #0x10

; 1604 :                         {
; 1605 :                             pgxoi->cbStride = 1280;

  00438	03a03c05	 moveq       r3, #5, 24
  0043c	058e3008	 streq       r3, [lr, #8]

; 1606 :                             pgxoi->cBPP = 16;

  00440	058e6014	 streq       r6, [lr, #0x14]
  00444	e5943000	 ldr         r3, [r4]
  00448	05902000	 ldreq       r2, [r0]

; 1607 :                         }
; 1608 :                         if (bpp == 8)

  0044c	e3530008	 cmp         r3, #8

; 1609 :                         {
; 1610 :                             pgxoi->cbStride = 640;

  00450	03a03d0a	 moveq       r3, #0xA, 26
  00454	058e3008	 streq       r3, [lr, #8]

; 1611 :                             pgxoi->cBPP = 16;

  00458	058e6014	 streq       r6, [lr, #0x14]
  0045c	05902000	 ldreq       r2, [r0]
  00460		 |$LN4@DrvEscape|

; 1612 :                         }
; 1613 :                     }
; 1614 : 
; 1615 : 
; 1616 :                     pgxoi->cxWidth = DispDrvr_cxScreen;

  00460	e58e200c	 str         r2, [lr, #0xC]

; 1617 :                     pgxoi->cyHeight = DispDrvr_cyScreen;

  00464	e5953000	 ldr         r3, [r5]
  00468	e3a00c01	 mov         r0, #1, 24

; 1618 : 
; 1619 :                     // Set kfLandscape only if the display orientation is not in its native format
; 1620 :                     pgxoi->ffFormat= kfDirect565;

  0046c	e3a04080	 mov         r4, #0x80

; 1621 : 
; 1622 : 
; 1623 :                     pgxoi->vkButtonUpPortrait = VK_UP;
; 1624 :                     pgxoi->vkButtonUpLandscape = VK_LEFT;
; 1625 :                     pgxoi->ptButtonUp.x = 120;
; 1626 :                     pgxoi->ptButtonUp.y = 350;
; 1627 :                     pgxoi->vkButtonDownPortrait = VK_DOWN;
; 1628 :                     pgxoi->vkButtonDownLandscape = VK_RIGHT;
; 1629 :                     pgxoi->ptButtonDown.x = 120;
; 1630 :                     pgxoi->ptButtonDown.y = 390;
; 1631 :                     pgxoi->vkButtonLeftPortrait = VK_LEFT;
; 1632 :                     pgxoi->vkButtonLeftLandscape = VK_DOWN;
; 1633 :                     pgxoi->ptButtonLeft.x = 100;
; 1634 :                     pgxoi->ptButtonLeft.y = 370;
; 1635 :                     pgxoi->vkButtonRightPortrait = VK_RIGHT;
; 1636 :                     pgxoi->vkButtonRightLandscape = VK_UP;
; 1637 :                     pgxoi->ptButtonRight.x = 140;
; 1638 :                     pgxoi->ptButtonRight.y = 370;
; 1639 :                     pgxoi->vkButtonAPortrait = 'A';
; 1640 :                     pgxoi->vkButtonALandscape = 'A';
; 1641 :                     pgxoi->ptButtonA.x = 100;
; 1642 :                     pgxoi->ptButtonA.y = 410;
; 1643 :                     pgxoi->vkButtonBPortrait = 'B';
; 1644 :                     pgxoi->vkButtonBLandscape = 'B';
; 1645 :                     pgxoi->ptButtonB.x = 120;
; 1646 :                     pgxoi->ptButtonB.y = 410;
; 1647 :                     pgxoi->vkButtonCPortrait = 'C';
; 1648 :                     pgxoi->vkButtonCLandscape = 'C';
; 1649 :                     pgxoi->ptButtonC.x = 140;
; 1650 :                     pgxoi->ptButtonC.y = 410;
; 1651 :                     pgxoi->vkButtonStartPortrait = 'D';
; 1652 :                     pgxoi->vkButtonStartLandscape = 'D';
; 1653 :                     pgxoi->ptButtonStart.x = 160;

  00470	e58e3010	 str         r3, [lr, #0x10]
  00474	e3803072	 orr         r3, r0, #0x72

; 1654 :                     pgxoi->ptButtonStart.y = 410;
; 1655 :                     pgxoi->pvReserved1 = (void *) 0;

  00478	e58e303c	 str         r3, [lr, #0x3C]
  0047c	e58e3048	 str         r3, [lr, #0x48]
  00480	e3a03044	 mov         r3, #0x44
  00484	e1ce37b0	 strh        r3, [lr, #0x70]
  00488	e1ce37b2	 strh        r3, [lr, #0x72]
  0048c	e3a030a0	 mov         r3, #0xA0
  00490	e380205e	 orr         r2, r0, #0x5E
  00494	e3801086	 orr         r1, r0, #0x86
  00498	e58e4018	 str         r4, [lr, #0x18]
  0049c	e58e3074	 str         r3, [lr, #0x74]
  004a0	e3a04078	 mov         r4, #0x78
  004a4	e58e2024	 str         r2, [lr, #0x24]
  004a8	e58e1030	 str         r1, [lr, #0x30]
  004ac	e3a03000	 mov         r3, #0
  004b0	e3a0a026	 mov         r10, #0x26
  004b4	e3a06025	 mov         r6, #0x25
  004b8	e3a05028	 mov         r5, #0x28
  004bc	e3a07027	 mov         r7, #0x27
  004c0	e3a08041	 mov         r8, #0x41
  004c4	e380009a	 orr         r0, r0, #0x9A
  004c8	e3a09042	 mov         r9, #0x42
  004cc	e3a01064	 mov         r1, #0x64
  004d0	e3a0208c	 mov         r2, #0x8C
  004d4	e3a0b043	 mov         r11, #0x43
  004d8	e58e4020	 str         r4, [lr, #0x20]
  004dc	e58e402c	 str         r4, [lr, #0x2C]
  004e0	e58e405c	 str         r4, [lr, #0x5C]
  004e4	e58e307c	 str         r3, [lr, #0x7C]

; 1656 :                     pgxoi->pvReserved2 = (void *) 0;

  004e8	e58e3080	 str         r3, [lr, #0x80]
  004ec	e1cea1bc	 strh        r10, [lr, #0x1C]
  004f0	e1ce61be	 strh        r6, [lr, #0x1E]
  004f4	e1ce52b8	 strh        r5, [lr, #0x28]
  004f8	e1ce72ba	 strh        r7, [lr, #0x2A]
  004fc	e1ce63b4	 strh        r6, [lr, #0x34]
  00500	e1ce53b6	 strh        r5, [lr, #0x36]
  00504	e58e1038	 str         r1, [lr, #0x38]
  00508	e1ce74b0	 strh        r7, [lr, #0x40]
  0050c	e1cea4b2	 strh        r10, [lr, #0x42]
  00510	e58e2044	 str         r2, [lr, #0x44]
  00514	e1ce84bc	 strh        r8, [lr, #0x4C]
  00518	e1ce84be	 strh        r8, [lr, #0x4E]
  0051c	e58e1050	 str         r1, [lr, #0x50]
  00520	e58e0054	 str         r0, [lr, #0x54]
  00524	e1ce95b8	 strh        r9, [lr, #0x58]
  00528	e1ce95ba	 strh        r9, [lr, #0x5A]
  0052c	e58e0060	 str         r0, [lr, #0x60]
  00530	e1ceb6b4	 strh        r11, [lr, #0x64]
  00534	e1ceb6b6	 strh        r11, [lr, #0x66]
  00538	e58e2068	 str         r2, [lr, #0x68]
  0053c	e58e006c	 str         r0, [lr, #0x6C]
  00540	e58e0078	 str         r0, [lr, #0x78]
  00544	e3a04001	 mov         r4, #1
  00548	ea000002	 b           |$LN2@DrvEscape|
  0054c		 |$LN15@DrvEscape|

; 1657 :                     RetVal = 1;
; 1658 : 
; 1659 :                 } else
; 1660 :                 {
; 1661 :                     SetLastError (ERROR_INVALID_PARAMETER);
; 1662 :                     RetVal = -1;
; 1663 :                 }
; 1664 :             } else {
; 1665 :                 SetLastError (ERROR_INVALID_PARAMETER);

  0054c	e3a00057	 mov         r0, #0x57
  00550		 |$LN75@DrvEscape|
  00550	eb000000	 bl          SetLastError
  00554		 |$LN21@DrvEscape|

; 1666 :                 RetVal = -1;

  00554	e3e04000	 mvn         r4, #0
  00558		 |$LN2@DrvEscape|

; 1673 :     }
; 1674 :     return RetVal;
; 1675 : }

  00558	e1a00004	 mov         r0, r4
  0055c	e28dd004	 add         sp, sp, #4
  00560	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00564	e12fff1e	 bx          lr
  00568		 |$LN81@DrvEscape|
  00568		 |$LN82@DrvEscape|
  00568	00000000	 DCD         |bpp|
  0056c		 |$LN83@DrvEscape|
  0056c	00000000	 DCD         |DispDrvr_cyScreen|
  00570		 |$LN84@DrvEscape|
  00570	00000000	 DCD         |DispDrvr_cxScreen|
  00574		 |$LN85@DrvEscape|
  00574	00000000	 DCD         |g_DisplayBaseVirtual|
  00578		 |$LN86@DrvEscape|
  00578	00000000	 DCD         |?DisplayDrvPowerCaps@@3U_POWER_CAPABILITIES@@A|
  0057c		 |$LN87@DrvEscape|
  0057c	00000000	 DCD         |??_C@_1FC@JMNBBIFC@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@|
  00580		 |$LN88@DrvEscape|
  00580	00000000	 DCD         |??_C@_1FG@JDBAEIHI@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@|
  00584		 |$LN89@DrvEscape|
  00584	0032100c	 DCD         0x32100c
  00588		 |$LN90@DrvEscape|
  00588	00321008	 DCD         0x321008
  0058c		 |$LN91@DrvEscape|
  0058c	00321004	 DCD         0x321004
  00590		 |$LN92@DrvEscape|
  00590	00000000	 DCD         |g_fDisableRotation|
  00594		 |$LN93@DrvEscape|
  00594	000186a3	 DCD         0x186a3
  00598		 |$LN94@DrvEscape|
  00598	00000000	 DCD         |??_C@_1HA@LCOCAHFG@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@|
  0059c		 |$LN95@DrvEscape|
  0059c	000186a5	 DCD         0x186a5
  005a0		 |$M39545|

			 ENDP  ; |?DrvEscape@SA2Video@@UAAKPAU_SURFOBJ@@KKPAXK1@Z|, SA2Video::DrvEscape

	END
