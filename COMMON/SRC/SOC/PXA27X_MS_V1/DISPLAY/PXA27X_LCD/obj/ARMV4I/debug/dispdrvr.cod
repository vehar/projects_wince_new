; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\DISPLAY\PXA27X_LCD\dispdrvr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|gDrawCursorFlag| [ DATA ]
	EXPORT	|gInPowerHandler| [ DATA ]
	EXPORT	|bDoRotation| [ DATA ]
	EXPORT	|activeFrameBuffer| [ DATA ]
	EXPORT	|frameBufferSize| [ DATA ]
	EXPORT	|gDibBuffer| [ DATA ]
	EXPORT	|gFrameBuffer| [ DATA ]
	EXPORT	|gBlackFrameBuffer| [ DATA ]
	EXPORT	|g_fDisableRotation| [ DATA ]
	EXPORT	|g_fEnableDMASourceSwap| [ DATA ]
	EXPORT	|v_pLcdRegs| [ DATA ]
	EXPORT	|v_pClkRegs| [ DATA ]
	EXPORT	|v_pGPIORegs| [ DATA ]
	EXPORT	|frameDescriptorCh0fd1| [ DATA ]
	EXPORT	|frameDescriptorCh0fd2| [ DATA ]
	EXPORT	|frameDescriptorCh1| [ DATA ]
	EXPORT	|frameDescriptorPalette| [ DATA ]
	EXPORT	|frameDescriptorTemp| [ DATA ]
	EXPORT	|frameDescriptorCh2_YCbCr_Y| [ DATA ]
	EXPORT	|frameDescriptorCh3_YCbCr_Cb| [ DATA ]
	EXPORT	|frameDescriptorCh4_YCbCr_Cr| [ DATA ]
	EXPORT	|v_pPaletteBuffer| [ DATA ]
	EXPORT	|pOSCR| [ DATA ]
	EXPORT	|v_pOSTRegs| [ DATA ]
	EXPORT	|v_pCIRegs| [ DATA ]
	EXPORT	|v_pI2C| [ DATA ]
	EXPORT	|v_pDMAC| [ DATA ]
	EXPORT	|halted| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|fbpY|, 0x4

	 COMMON	|bpp|, 0x4

	 COMMON	|DispDrvr_cdwStride|, 0x4

	 COMMON	|DispDrvr_cyScreen|, 0x4

	 COMMON	|gyHot|, 0x4

	 COMMON	|gCursorData|, 0x800

	 COMMON	|fbpCb|, 0x4

	 COMMON	|fbpCr|, 0x4

	 COMMON	|g_DisplayBasePhysical|, 0x4

	 COMMON	|status|, 0x4

	 COMMON	|XllpLCD|, 0x88

	 COMMON	|hIntEventKnown|, 0x4

	 COMMON	|g_DisplayBlackBaseVirtual|, 0x4

	 COMMON	|g_DisplayBaseVirtual|, 0x4

	 COMMON	|DispDrvr_cxScreen|, 0x4

	 COMMON	|nDisplayType|, 0x4

	 COMMON	|gCursorMask|, 0x800

	 COMMON	|gxHot|, 0x4

	 COMMON	|frameDescriptorMutex|, 0x14

	 COMMON	|hIntEvent|, 0x4

	 COMMON	|displayMutex|, 0x14

	 COMMON	|gCursorRect|, 0x10

	 COMMON	|g_DisplayBlackBasePhysical|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|gDrawCursorFlag| % 0x4
|gInPowerHandler| % 0x4
|bDoRotation| %	0x4
|activeFrameBuffer| % 0x4
|frameBufferSize| % 0x4
|gDibBuffer| %	0x4
|gFrameBuffer| % 0x4
|gBlackFrameBuffer| % 0x4
|g_fDisableRotation| % 0x4
|g_fEnableDMASourceSwap| % 0x4
|v_pLcdRegs| %	0x4
|v_pClkRegs| %	0x4
|v_pGPIORegs| %	0x4
|frameDescriptorCh0fd1| % 0x4
|frameDescriptorCh0fd2| % 0x4
|frameDescriptorCh1| % 0x4
|frameDescriptorPalette| % 0x4
|frameDescriptorTemp| % 0x4
|frameDescriptorCh2_YCbCr_Y| % 0x4
|frameDescriptorCh3_YCbCr_Cb| % 0x4
|frameDescriptorCh4_YCbCr_Cr| % 0x4
|v_pPaletteBuffer| % 0x4
|pOSCR|	%	0x4
|v_pOSTRegs| %	0x4
|v_pCIRegs| %	0x4
|v_pI2C| %	0x4
|v_pDMAC| %	0x4
|halted| %	0x4
	EXPORT	|DispDrvrSetDibBuffer|

  00000			 AREA	 |.pdata|, PDATA
|$T42950| DCD	|$LN5@DispDrvrSe|
	DCD	0x40000903
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\dispdrvr.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DispDrvrSetDibBuffer| PROC

; 161  : {

  00000		 |$LN5@DispDrvrSe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M42947|

; 162  :     gDibBuffer = data;

  0000c	e59d2008	 ldr         r2, [sp, #8]
  00010	e59f3008	 ldr         r3, [pc, #8]
  00014	e5832000	 str         r2, [r3]

; 163  : }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$LN6@DispDrvrSe|
  00020		 |$LN7@DispDrvrSe|
  00020	00000000	 DCD         |gDibBuffer|
  00024		 |$M42948|

			 ENDP  ; |DispDrvrSetDibBuffer|

	EXPORT	|DispDrvrSetPalette|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|XllpLCDLoadPalette|
	IMPORT	|EnterCriticalSection|

  00008			 AREA	 |.pdata|, PDATA
|$T42957| DCD	|$LN10@DispDrvrSe@2|
	DCD	0x40004b04
; Function compile flags: /Odtp

  00024			 AREA	 |.text|, CODE, ARM

  00024		 |DispDrvrSetPalette| PROC

; 166  : {

  00024		 |$LN10@DispDrvrSe@2|
  00024	e1a0c00d	 mov         r12, sp
  00028	e92d0007	 stmdb       sp!, {r0 - r2}
  0002c	e92d5000	 stmdb       sp!, {r12, lr}
  00030	e24dd008	 sub         sp, sp, #8
  00034		 |$M42954|

; 167  :     int i;
; 168  :     int end = firstEntry + numEntries;

  00034	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00038	e1a02003	 mov         r2, r3
  0003c	e1dd31b8	 ldrh        r3, [sp, #0x18]
  00040	e0823003	 add         r3, r2, r3
  00044	e58d3004	 str         r3, [sp, #4]

; 169  : 
; 170  :     // Don't walk off the end of the palette buffer.
; 171  :     if (firstEntry > sizeof(source) || end >= sizeof(source))

  00048	e1dd31b4	 ldrh        r3, [sp, #0x14]
  0004c	e3530004	 cmp         r3, #4
  00050	8a000002	 bhi         |$LN4@DispDrvrSe@2|
  00054	e59d3004	 ldr         r3, [sp, #4]
  00058	e3530004	 cmp         r3, #4
  0005c	3a000000	 bcc         |$LN5@DispDrvrSe@2|
  00060		 |$LN4@DispDrvrSe@2|

; 172  :     {
; 173  :         return;

  00060	ea000034	 b           |$LN6@DispDrvrSe@2|
  00064		 |$LN5@DispDrvrSe@2|

; 174  :     }
; 175  : 
; 176  :     EnterCriticalSection(&frameDescriptorMutex);

  00064	e59f00d8	 ldr         r0, [pc, #0xD8]
  00068	eb000000	 bl          EnterCriticalSection

; 177  : 
; 178  :     // Store the palette entries into palette ram
; 179  :     for(i=firstEntry;i<end;i++)

  0006c	e1dd31b4	 ldrh        r3, [sp, #0x14]
  00070	e58d3000	 str         r3, [sp]
  00074	ea000002	 b           |$LN3@DispDrvrSe@2|
  00078		 |$LN2@DispDrvrSe@2|
  00078	e59d3000	 ldr         r3, [sp]
  0007c	e2833001	 add         r3, r3, #1
  00080	e58d3000	 str         r3, [sp]
  00084		 |$LN3@DispDrvrSe@2|
  00084	e59d2000	 ldr         r2, [sp]
  00088	e59d3004	 ldr         r3, [sp, #4]
  0008c	e1520003	 cmp         r2, r3
  00090	aa000024	 bge         |$LN1@DispDrvrSe@2|

; 180  :     {
; 181  :         // store 5 bits red, 6 bits green, and 5 bits blue
; 182  :         v_pPaletteBuffer->palette[i] = (
; 183  :             (source[i].peBlue)            >>  3    |
; 184  :             ((source[i].peGreen & 0xfc)    <<  3)    |
; 185  :             ((source[i].peRed    & 0xf8)    <<  8)
; 186  :             );

  00094	e59d1000	 ldr         r1, [sp]
  00098	e3a03004	 mov         r3, #4
  0009c	e0020391	 mul         r2, r1, r3
  000a0	e59d3010	 ldr         r3, [sp, #0x10]
  000a4	e0833002	 add         r3, r3, r2
  000a8	e2833002	 add         r3, r3, #2
  000ac	e5d33000	 ldrb        r3, [r3]
  000b0	e1a001c3	 mov         r0, r3, asr #3
  000b4	e59d1000	 ldr         r1, [sp]
  000b8	e3a03004	 mov         r3, #4
  000bc	e0020391	 mul         r2, r1, r3
  000c0	e59d3010	 ldr         r3, [sp, #0x10]
  000c4	e0833002	 add         r3, r3, r2
  000c8	e2833001	 add         r3, r3, #1
  000cc	e5d33000	 ldrb        r3, [r3]
  000d0	e20330fc	 and         r3, r3, #0xFC
  000d4	e1a03183	 mov         r3, r3, lsl #3
  000d8	e1800003	 orr         r0, r0, r3
  000dc	e59d1000	 ldr         r1, [sp]
  000e0	e3a03004	 mov         r3, #4
  000e4	e0020391	 mul         r2, r1, r3
  000e8	e59d3010	 ldr         r3, [sp, #0x10]
  000ec	e0833002	 add         r3, r3, r2
  000f0	e5d33000	 ldrb        r3, [r3]
  000f4	e20330f8	 and         r3, r3, #0xF8
  000f8	e1a03403	 mov         r3, r3, lsl #8
  000fc	e1800003	 orr         r0, r0, r3
  00100	e59d1000	 ldr         r1, [sp]
  00104	e3a03002	 mov         r3, #2
  00108	e0020391	 mul         r2, r1, r3
  0010c	e59f3038	 ldr         r3, [pc, #0x38]
  00110	e5933000	 ldr         r3, [r3]
  00114	e0832002	 add         r2, r3, r2
  00118	e1a03800	 mov         r3, r0, lsl #16
  0011c	e1a03823	 mov         r3, r3, lsr #16
  00120	e1c230b0	 strh        r3, [r2]

; 187  :     }

  00124	eaffffd3	 b           |$LN2@DispDrvrSe@2|
  00128		 |$LN1@DispDrvrSe@2|

; 188  : 
; 189  :     XllpLCDLoadPalette(&XllpLCD);

  00128	e59f0018	 ldr         r0, [pc, #0x18]
  0012c	eb000000	 bl          XllpLCDLoadPalette

; 190  : 
; 191  :     LeaveCriticalSection(&frameDescriptorMutex);

  00130	e59f000c	 ldr         r0, [pc, #0xC]
  00134	eb000000	 bl          LeaveCriticalSection
  00138		 |$LN6@DispDrvrSe@2|

; 192  : }

  00138	e28dd008	 add         sp, sp, #8
  0013c	e89d6000	 ldmia       sp, {sp, lr}
  00140	e12fff1e	 bx          lr
  00144		 |$LN11@DispDrvrSe@2|
  00144		 |$LN12@DispDrvrSe@2|
  00144	00000000	 DCD         |frameDescriptorMutex|
  00148		 |$LN13@DispDrvrSe@2|
  00148	00000000	 DCD         |XllpLCD|
  0014c		 |$LN14@DispDrvrSe@2|
  0014c	00000000	 DCD         |v_pPaletteBuffer|
  00150		 |$M42955|

			 ENDP  ; |DispDrvrSetPalette|

	EXPORT	|??_C@_1FC@NEEFFAOB@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo@| [ DATA ] ; `string'
	EXPORT	|ClearFrameBuffer|
	EXPORT	|InitCursor|
	EXPORT	|MapVirtualAddress|
	EXPORT	|ReadRegistryData|
	EXPORT	|DispDrvrInitialize|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|CreateEventW|
	IMPORT	|XllpI2cInit|
	IMPORT	|XllpLCDInit|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|XllpOstDelayMilliSeconds|
	IMPORT	|__rt_udiv|

  00010			 AREA	 |.pdata|, PDATA
|$T42967| DCD	|$LN7@DispDrvrIn|
	DCD	0x4000bb02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@NEEFFAOB@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00150			 AREA	 |.text|, CODE, ARM

  00150		 |DispDrvrInitialize| PROC

; 195  : {

  00150		 |$LN7@DispDrvrIn|
  00150	e52de004	 str         lr, [sp, #-4]!
  00154	e24dd008	 sub         sp, sp, #8
  00158		 |$M42964|

; 196  :     // Read display driver configuration from system registry
; 197  :     ReadRegistryData();

  00158	eb000000	 bl          ReadRegistryData

; 198  : 
; 199  :     frameBufferSize = bpp / 8 * DispDrvr_cxScreen * DispDrvr_cyScreen;

  0015c	e59f32d4	 ldr         r3, [pc, #0x2D4]
  00160	e5931000	 ldr         r1, [r3]
  00164	e3a00008	 mov         r0, #8
  00168	eb000000	 bl          __rt_udiv
  0016c	e59f32b8	 ldr         r3, [pc, #0x2B8]
  00170	e5933000	 ldr         r3, [r3]
  00174	e0010390	 mul         r1, r0, r3
  00178	e59f32a8	 ldr         r3, [pc, #0x2A8]
  0017c	e5933000	 ldr         r3, [r3]
  00180	e0020391	 mul         r2, r1, r3
  00184	e59f3274	 ldr         r3, [pc, #0x274]
  00188	e5832000	 str         r2, [r3]

; 200  : 
; 201  :     // Map registers, the frame buffer, and frame descriptors from Kernel mode virtual address
; 202  :     // into our user mode virtual address space
; 203  :     if (!MapVirtualAddress())

  0018c	eb000000	 bl          MapVirtualAddress
  00190	e58d0000	 str         r0, [sp]
  00194	e59d3000	 ldr         r3, [sp]
  00198	e3530000	 cmp         r3, #0
  0019c	1a000000	 bne         |$LN2@DispDrvrIn|

; 204  :     {
; 205  :         return;

  001a0	ea000088	 b           |$LN3@DispDrvrIn|
  001a4		 |$LN2@DispDrvrIn|

; 206  :     }
; 207  : 
; 208  :     // Initialize for use with Suspend resume macros
; 209  :     XllpOstDelayMilliSeconds((XLLP_OST_T *)v_pOSTRegs, 1);

  001a4	e3a01001	 mov         r1, #1
  001a8	e59f3230	 ldr         r3, [pc, #0x230]
  001ac	e5930000	 ldr         r0, [r3]
  001b0	eb000000	 bl          XllpOstDelayMilliSeconds

; 210  : 
; 211  :     XllpLCD.GPIO = (XLLP_VUINT32_T *) v_pGPIORegs;

  001b4	e59f322c	 ldr         r3, [pc, #0x22C]
  001b8	e5932000	 ldr         r2, [r3]
  001bc	e59f322c	 ldr         r3, [pc, #0x22C]
  001c0	e5832000	 str         r2, [r3]

; 212  :     XllpLCD.CLKMan = (XLLP_VUINT32_T *) v_pClkRegs;

  001c4	e59f3220	 ldr         r3, [pc, #0x220]
  001c8	e5932000	 ldr         r2, [r3]
  001cc	e59f321c	 ldr         r3, [pc, #0x21C]
  001d0	e5832004	 str         r2, [r3, #4]

; 213  :     XllpLCD.LCDC = (XLLP_VUINT32_T *) v_pLcdRegs;

  001d4	e59f3258	 ldr         r3, [pc, #0x258]
  001d8	e5932000	 ldr         r2, [r3]
  001dc	e59f320c	 ldr         r3, [pc, #0x20C]
  001e0	e5832008	 str         r2, [r3, #8]

; 214  :     XllpLCD.DisplayType = nDisplayType;

  001e4	e59f3244	 ldr         r3, [pc, #0x244]
  001e8	e5932000	 ldr         r2, [r3]
  001ec	e59f31fc	 ldr         r3, [pc, #0x1FC]
  001f0	e5832014	 str         r2, [r3, #0x14]

; 215  :     XllpLCD.FrameBufferWidth = DispDrvr_cxScreen;

  001f4	e59f3230	 ldr         r3, [pc, #0x230]
  001f8	e5932000	 ldr         r2, [r3]
  001fc	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00200	e5832018	 str         r2, [r3, #0x18]

; 216  :     XllpLCD.FrameBufferHeight = DispDrvr_cyScreen;

  00204	e59f321c	 ldr         r3, [pc, #0x21C]
  00208	e5932000	 ldr         r2, [r3]
  0020c	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00210	e583201c	 str         r2, [r3, #0x1C]

; 217  :     XllpLCD.BPP = BPP_16;

  00214	e59f21d4	 ldr         r2, [pc, #0x1D4]
  00218	e3a03010	 mov         r3, #0x10
  0021c	e5823028	 str         r3, [r2, #0x28]

; 218  :     XllpLCD.PixelDataFormat = PDFOR_00; //with overlays enabled use PDFOR_11 for 16bpp

  00220	e59f21c8	 ldr         r2, [pc, #0x1C8]
  00224	e3a03000	 mov         r3, #0
  00228	e582302c	 str         r3, [r2, #0x2C]

; 219  :     XllpLCD.CurrentPage = 0;

  0022c	e59f21bc	 ldr         r2, [pc, #0x1BC]
  00230	e3a03000	 mov         r3, #0
  00234	e5823030	 str         r3, [r2, #0x30]

; 220  :     XllpLCD._FRAME_BUFFER_BASE_PHYSICAL = FRAME_BUFFER_BASE_PHYSICAL;

  00238	e59f31e4	 ldr         r3, [pc, #0x1E4]
  0023c	e5933000	 ldr         r3, [r3]
  00240	e2832d12	 add         r2, r3, #0x12, 26
  00244	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00248	e5832034	 str         r2, [r3, #0x34]

; 221  :     XllpLCD._PALETTE_BUFFER_BASE_PHYSICAL = PALETTE_BUFFER_BASE_PHYSICAL;

  0024c	e59f31d0	 ldr         r3, [pc, #0x1D0]
  00250	e5933000	 ldr         r3, [r3]
  00254	e2832080	 add         r2, r3, #0x80
  00258	e59f3190	 ldr         r3, [pc, #0x190]
  0025c	e5832038	 str         r2, [r3, #0x38]

; 222  :     XllpLCD._DMA_CHANNEL_0_FRAME_DESCRIPTOR_BASE_PHYSICAL = DMA_CHANNEL_0_FRAME_DESCRIPTOR_BASE_PHYSICAL;

  00260	e59f31bc	 ldr         r3, [pc, #0x1BC]
  00264	e5932000	 ldr         r2, [r3]
  00268	e59f3180	 ldr         r3, [pc, #0x180]
  0026c	e583204c	 str         r2, [r3, #0x4C]

; 223  :     XllpLCD._DMA_CHANNEL_1_FRAME_DESCRIPTOR_BASE_PHYSICAL = DMA_CHANNEL_1_FRAME_DESCRIPTOR_BASE_PHYSICAL;

  00270	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00274	e5933000	 ldr         r3, [r3]
  00278	e2832020	 add         r2, r3, #0x20
  0027c	e59f316c	 ldr         r3, [pc, #0x16C]
  00280	e5832050	 str         r2, [r3, #0x50]

; 224  :     XllpLCD._DMA_CHANNEL_0_ALT_FRAME_DESCRIPTOR_BASE_PHYSICAL = DMA_CHANNEL_0_ALT_FRAME_DESCRIPTOR_BASE_PHYSICAL;

  00284	e59f3198	 ldr         r3, [pc, #0x198]
  00288	e5933000	 ldr         r3, [r3]
  0028c	e2832040	 add         r2, r3, #0x40
  00290	e59f3158	 ldr         r3, [pc, #0x158]
  00294	e5832054	 str         r2, [r3, #0x54]

; 225  :     XllpLCD._PALETTE_FRAME_DESCRIPTOR_BASE_PHYSICAL = PALETTE_FRAME_DESCRIPTOR_BASE_PHYSICAL;

  00298	e59f3184	 ldr         r3, [pc, #0x184]
  0029c	e5933000	 ldr         r3, [r3]
  002a0	e2832060	 add         r2, r3, #0x60
  002a4	e59f3144	 ldr         r3, [pc, #0x144]
  002a8	e5832058	 str         r2, [r3, #0x58]

; 226  :     XllpLCD.frameDescriptorCh0fd1 = frameDescriptorCh0fd1;

  002ac	e59f316c	 ldr         r3, [pc, #0x16C]
  002b0	e5932000	 ldr         r2, [r3]
  002b4	e59f3134	 ldr         r3, [pc, #0x134]
  002b8	e5832068	 str         r2, [r3, #0x68]

; 227  :     XllpLCD.frameDescriptorCh0fd2 = frameDescriptorCh0fd2;

  002bc	e59f3158	 ldr         r3, [pc, #0x158]
  002c0	e5932000	 ldr         r2, [r3]
  002c4	e59f3124	 ldr         r3, [pc, #0x124]
  002c8	e583206c	 str         r2, [r3, #0x6C]

; 228  :     XllpLCD.frameDescriptorCh1 = frameDescriptorCh1;

  002cc	e59f3144	 ldr         r3, [pc, #0x144]
  002d0	e5932000	 ldr         r2, [r3]
  002d4	e59f3114	 ldr         r3, [pc, #0x114]
  002d8	e5832070	 str         r2, [r3, #0x70]

; 229  :     XllpLCD.frameDescriptorPalette = frameDescriptorPalette;

  002dc	e59f3130	 ldr         r3, [pc, #0x130]
  002e0	e5932000	 ldr         r2, [r3]
  002e4	e59f3104	 ldr         r3, [pc, #0x104]
  002e8	e5832074	 str         r2, [r3, #0x74]

; 230  :     XllpLCD.frameDescriptorTemp = frameDescriptorTemp;

  002ec	e59f311c	 ldr         r3, [pc, #0x11C]
  002f0	e5932000	 ldr         r2, [r3]
  002f4	e59f30f4	 ldr         r3, [pc, #0xF4]
  002f8	e5832078	 str         r2, [r3, #0x78]

; 231  : 
; 232  :     InitializeCriticalSection(&displayMutex);

  002fc	e59f0108	 ldr         r0, [pc, #0x108]
  00300	eb000000	 bl          InitializeCriticalSection

; 233  :     InitializeCriticalSection(&frameDescriptorMutex);

  00304	e59f00fc	 ldr         r0, [pc, #0xFC]
  00308	eb000000	 bl          InitializeCriticalSection

; 234  : 
; 235  :     // Initialize Cursor
; 236  :     InitCursor();

  0030c	eb000000	 bl          InitCursor

; 237  : 
; 238  :     ClearFrameBuffer((unsigned *)gFrameBuffer + (activeFrameBuffer * frameBufferSize), TRUE);

  00310	e3a01001	 mov         r1, #1
  00314	e59f30e8	 ldr         r3, [pc, #0xE8]
  00318	e5932000	 ldr         r2, [r3]
  0031c	e59f30dc	 ldr         r3, [pc, #0xDC]
  00320	e5933000	 ldr         r3, [r3]
  00324	e0000392	 mul         r0, r2, r3
  00328	e3a03004	 mov         r3, #4
  0032c	e0020390	 mul         r2, r0, r3
  00330	e59f30c4	 ldr         r3, [pc, #0xC4]
  00334	e5933000	 ldr         r3, [r3]
  00338	e0830002	 add         r0, r3, r2
  0033c	eb000000	 bl          ClearFrameBuffer

; 239  : 
; 240  :     if( g_fEnableDMASourceSwap )

  00340	e59f30b0	 ldr         r3, [pc, #0xB0]
  00344	e5933000	 ldr         r3, [r3]
  00348	e3530000	 cmp         r3, #0
  0034c	0a000003	 beq         |$LN1@DispDrvrIn|

; 241  :     {
; 242  :         ClearFrameBuffer((unsigned *)gBlackFrameBuffer, FALSE);

  00350	e3a01000	 mov         r1, #0
  00354	e59f3098	 ldr         r3, [pc, #0x98]
  00358	e5930000	 ldr         r0, [r3]
  0035c	eb000000	 bl          ClearFrameBuffer
  00360		 |$LN1@DispDrvrIn|

; 243  :     }
; 244  : 
; 245  :     // Initialize the LCD Controller and Board Control Register
; 246  :     XllpLCDInit(&XllpLCD);

  00360	e59f0088	 ldr         r0, [pc, #0x88]
  00364	eb000000	 bl          XllpLCDInit

; 247  : 
; 248  : 
; 249  :     //InitRegs((XLLP_OST_T *)v_pOSTRegs, (P_XLLP_I2C_T)v_pI2C);
; 250  : 
; 251  :     XllpI2cInit((P_XLLP_I2C_T)v_pI2C, (P_XLLP_GPIO_T) v_pGPIORegs, (P_XLLP_CLKMGR_T) v_pClkRegs, (XLLP_UINT32_T) 0);

  00368	e3a03000	 mov         r3, #0
  0036c	e59f2078	 ldr         r2, [pc, #0x78]
  00370	e5922000	 ldr         r2, [r2]
  00374	e59f106c	 ldr         r1, [pc, #0x6C]
  00378	e5911000	 ldr         r1, [r1]
  0037c	e59f0060	 ldr         r0, [pc, #0x60]
  00380	e5900000	 ldr         r0, [r0]
  00384	eb000000	 bl          XllpI2cInit

; 252  : 
; 253  :     pOSCR = v_pOSTRegs + 4;

  00388	e59f3050	 ldr         r3, [pc, #0x50]
  0038c	e5933000	 ldr         r3, [r3]
  00390	e2832010	 add         r2, r3, #0x10
  00394	e59f3040	 ldr         r3, [pc, #0x40]
  00398	e5832000	 str         r2, [r3]

; 254  : 
; 255  :     // Use this event to signal the IST that we now know the dynamically assigned DMA channel
; 256  :     // And with that information, we know which event to wait on for the interrupt.
; 257  :     hIntEventKnown = CreateEvent(NULL,FALSE,FALSE,NULL);

  0039c	e3a03000	 mov         r3, #0
  003a0	e3a02000	 mov         r2, #0
  003a4	e3a01000	 mov         r1, #0
  003a8	e3a00000	 mov         r0, #0
  003ac	eb000000	 bl          CreateEventW
  003b0	e58d0004	 str         r0, [sp, #4]
  003b4	e59d2004	 ldr         r2, [sp, #4]
  003b8	e59f3018	 ldr         r3, [pc, #0x18]
  003bc	e5832000	 str         r2, [r3]

; 258  : 
; 259  : 
; 260  :     RETAILMSG(1,(TEXT("Display Driver Initialization Complete\r\n")));

  003c0	e59f000c	 ldr         r0, [pc, #0xC]
  003c4	eb000000	 bl          NKDbgPrintfW
  003c8		 |$LN3@DispDrvrIn|

; 261  : 
; 262  :     return;
; 263  : }

  003c8	e28dd008	 add         sp, sp, #8
  003cc	e49de004	 ldr         lr, [sp], #4
  003d0	e12fff1e	 bx          lr
  003d4		 |$LN8@DispDrvrIn|
  003d4		 |$LN9@DispDrvrIn|
  003d4	00000000	 DCD         |??_C@_1FC@NEEFFAOB@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAC?$AAo@|
  003d8		 |$LN10@DispDrvrIn|
  003d8	00000000	 DCD         |hIntEventKnown|
  003dc		 |$LN11@DispDrvrIn|
  003dc	00000000	 DCD         |pOSCR|
  003e0		 |$LN12@DispDrvrIn|
  003e0	00000000	 DCD         |v_pOSTRegs|
  003e4		 |$LN13@DispDrvrIn|
  003e4	00000000	 DCD         |v_pI2C|
  003e8		 |$LN14@DispDrvrIn|
  003e8	00000000	 DCD         |v_pGPIORegs|
  003ec		 |$LN15@DispDrvrIn|
  003ec	00000000	 DCD         |v_pClkRegs|
  003f0		 |$LN16@DispDrvrIn|
  003f0	00000000	 DCD         |XllpLCD|
  003f4		 |$LN17@DispDrvrIn|
  003f4	00000000	 DCD         |gBlackFrameBuffer|
  003f8		 |$LN18@DispDrvrIn|
  003f8	00000000	 DCD         |g_fEnableDMASourceSwap|
  003fc		 |$LN19@DispDrvrIn|
  003fc	00000000	 DCD         |gFrameBuffer|
  00400		 |$LN20@DispDrvrIn|
  00400	00000000	 DCD         |frameBufferSize|
  00404		 |$LN21@DispDrvrIn|
  00404	00000000	 DCD         |activeFrameBuffer|
  00408		 |$LN22@DispDrvrIn|
  00408	00000000	 DCD         |frameDescriptorMutex|
  0040c		 |$LN23@DispDrvrIn|
  0040c	00000000	 DCD         |displayMutex|
  00410		 |$LN24@DispDrvrIn|
  00410	00000000	 DCD         |frameDescriptorTemp|
  00414		 |$LN25@DispDrvrIn|
  00414	00000000	 DCD         |frameDescriptorPalette|
  00418		 |$LN26@DispDrvrIn|
  00418	00000000	 DCD         |frameDescriptorCh1|
  0041c		 |$LN27@DispDrvrIn|
  0041c	00000000	 DCD         |frameDescriptorCh0fd2|
  00420		 |$LN28@DispDrvrIn|
  00420	00000000	 DCD         |frameDescriptorCh0fd1|
  00424		 |$LN29@DispDrvrIn|
  00424	00000000	 DCD         |g_DisplayBasePhysical|
  00428		 |$LN30@DispDrvrIn|
  00428	00000000	 DCD         |DispDrvr_cyScreen|
  0042c		 |$LN31@DispDrvrIn|
  0042c	00000000	 DCD         |DispDrvr_cxScreen|
  00430		 |$LN32@DispDrvrIn|
  00430	00000000	 DCD         |nDisplayType|
  00434		 |$LN33@DispDrvrIn|
  00434	00000000	 DCD         |v_pLcdRegs|
  00438		 |$LN34@DispDrvrIn|
  00438	00000000	 DCD         |bpp|
  0043c		 |$M42965|

			 ENDP  ; |DispDrvrInitialize|

	IMPORT	|memset|

  00018			 AREA	 |.pdata|, PDATA
|$T42999| DCD	|$LN5@InitCursor|
	DCD	0x40002e01
; Function compile flags: /Odtp

  0043c			 AREA	 |.text|, CODE, ARM

  0043c		 |InitCursor| PROC

; 266  : {

  0043c		 |$LN5@InitCursor|
  0043c	e52de004	 str         lr, [sp, #-4]!
  00440		 |$M42996|

; 267  :     gDrawCursorFlag = FALSE;

  00440	e59f20a8	 ldr         r2, [pc, #0xA8]
  00444	e3a03000	 mov         r3, #0
  00448	e5823000	 str         r3, [r2]

; 268  :     gCursorRect.left = (DispDrvr_cxScreen - CURSOR_XSIZE) >> 1;

  0044c	e59f3098	 ldr         r3, [pc, #0x98]
  00450	e5933000	 ldr         r3, [r3]
  00454	e2433020	 sub         r3, r3, #0x20
  00458	e1a020c3	 mov         r2, r3, asr #1
  0045c	e59f3080	 ldr         r3, [pc, #0x80]
  00460	e5832000	 str         r2, [r3]

; 269  :     gCursorRect.right = gCursorRect.left + CURSOR_XSIZE;

  00464	e59f3078	 ldr         r3, [pc, #0x78]
  00468	e5933000	 ldr         r3, [r3]
  0046c	e2832020	 add         r2, r3, #0x20
  00470	e59f306c	 ldr         r3, [pc, #0x6C]
  00474	e5832008	 str         r2, [r3, #8]

; 270  :     gCursorRect.top = (DispDrvr_cyScreen - CURSOR_YSIZE) >> 1;

  00478	e59f3068	 ldr         r3, [pc, #0x68]
  0047c	e5933000	 ldr         r3, [r3]
  00480	e2433020	 sub         r3, r3, #0x20
  00484	e1a020c3	 mov         r2, r3, asr #1
  00488	e59f3054	 ldr         r3, [pc, #0x54]
  0048c	e5832004	 str         r2, [r3, #4]

; 271  :     gCursorRect.bottom = gCursorRect.top + CURSOR_YSIZE;

  00490	e59f304c	 ldr         r3, [pc, #0x4C]
  00494	e5933004	 ldr         r3, [r3, #4]
  00498	e2832020	 add         r2, r3, #0x20
  0049c	e59f3040	 ldr         r3, [pc, #0x40]
  004a0	e583200c	 str         r2, [r3, #0xC]

; 272  :     gxHot = gyHot = 0;

  004a4	e59f2034	 ldr         r2, [pc, #0x34]
  004a8	e3a03000	 mov         r3, #0
  004ac	e5823000	 str         r3, [r2]
  004b0	e59f3028	 ldr         r3, [pc, #0x28]
  004b4	e5932000	 ldr         r2, [r3]
  004b8	e59f301c	 ldr         r3, [pc, #0x1C]
  004bc	e5832000	 str         r2, [r3]

; 273  :     memset ((BYTE *)gCursorMask, 0xFF, sizeof(gCursorMask));

  004c0	e3a02b02	 mov         r2, #2, 22
  004c4	e3a010ff	 mov         r1, #0xFF
  004c8	e59f0008	 ldr         r0, [pc, #8]
  004cc	eb000000	 bl          memset

; 274  : }

  004d0	e49de004	 ldr         lr, [sp], #4
  004d4	e12fff1e	 bx          lr
  004d8		 |$LN6@InitCursor|
  004d8		 |$LN7@InitCursor|
  004d8	00000000	 DCD         |gCursorMask|
  004dc		 |$LN8@InitCursor|
  004dc	00000000	 DCD         |gxHot|
  004e0		 |$LN9@InitCursor|
  004e0	00000000	 DCD         |gyHot|
  004e4		 |$LN10@InitCursor|
  004e4	00000000	 DCD         |gCursorRect|
  004e8		 |$LN11@InitCursor|
  004e8	00000000	 DCD         |DispDrvr_cyScreen|
  004ec		 |$LN12@InitCursor|
  004ec	00000000	 DCD         |DispDrvr_cxScreen|
  004f0		 |$LN13@InitCursor|
  004f0	00000000	 DCD         |gDrawCursorFlag|
  004f4		 |$M42997|

			 ENDP  ; |InitCursor|

	EXPORT	|??_C@_0CB@CGKDKANF@DispDrvrInitialize?5?3?5v_pGPIORegs@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@MKNHKMEH@DispDrvrInitialize?5?3?5v_pClkRegs?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@BEOJHMNH@DispDrvrInitialize?5?3?5v_pLcdRegs?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@DGHPNJML@DispDrvrInitialize?5?3?5v_pOSTRegs?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CA@MDACKFDO@DispDrvrInitialize?5?3?5v_pI2CRegs?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@LOBFCJCF@DispDrvrInitialize?5?3?5v_pDMAC?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@OHAMICA@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@IELHMFCI@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|Cleanup|
	IMPORT	|VirtualSetAttributes|
	IMPORT	|VirtualAllocCopyPhysical|
	IMPORT	|VirtualCopy|
	IMPORT	|VirtualAlloc|
	IMPORT	|HalAllocateCommonBuffer|

  00020			 AREA	 |.pdata|, PDATA
|$T43019| DCD	|$LN31@MapVirtual|
	DCD	0x4001b502

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CB@CGKDKANF@DispDrvrInitialize?5?3?5v_pGPIORegs@| DCB "DispDrvrIn"
	DCB	"itialize : v_pGPIORegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@MKNHKMEH@DispDrvrInitialize?5?3?5v_pClkRegs?$AA@| DCB "DispDrv"
	DCB	"rInitialize : v_pClkRegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@BEOJHMNH@DispDrvrInitialize?5?3?5v_pLcdRegs?$AA@| DCB "DispDrv"
	DCB	"rInitialize : v_pLcdRegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@DGHPNJML@DispDrvrInitialize?5?3?5v_pOSTRegs?$AA@| DCB "DispDrv"
	DCB	"rInitialize : v_pOSTRegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0CA@MDACKFDO@DispDrvrInitialize?5?3?5v_pI2CRegs?$AA@| DCB "DispDrv"
	DCB	"rInitialize : v_pI2CRegs", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_0BN@LOBFCJCF@DispDrvrInitialize?5?3?5v_pDMAC?$AA@| DCB "DispDrvrIn"
	DCB	"itialize : v_pDMAC", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@OHAMICA@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD@| DCB "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "C", 0x0, "A"
	DCB	0x0, "L", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, ":", 0x0, " ", 0x0, "b", 0x0, "l", 0x0, "a"
	DCB	0x0, "n", 0x0, "k", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "S"
	DCB	0x0, "D", 0x0, "R", 0x0, "A", 0x0, "M", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@IELHMFCI@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe@| DCB "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "C", 0x0, "A"
	DCB	0x0, "L", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, ":", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "S"
	DCB	0x0, "D", 0x0, "R", 0x0, "A", 0x0, "M", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  004f4			 AREA	 |.text|, CODE, ARM

  004f4		 |MapVirtualAddress| PROC

; 277  : {

  004f4		 |$LN31@MapVirtual|
  004f4	e52de004	 str         lr, [sp, #-4]!
  004f8	e24dd09c	 sub         sp, sp, #0x9C
  004fc		 |$M43016|

; 278  :     DMA_ADAPTER_OBJECT Adapter;
; 279  :     PHYSICAL_ADDRESS   PhysAddr;
; 280  : 
; 281  :     DMA_ADAPTER_OBJECT AdapterBlackScreen;
; 282  :     PHYSICAL_ADDRESS   PhysAddrBlackScreen;
; 283  : 
; 284  :     Adapter.ObjectSize    = sizeof (DMA_ADAPTER_OBJECT);

  004fc	e3a0300c	 mov         r3, #0xC
  00500	e1cd32b0	 strh        r3, [sp, #0x20]

; 285  :     Adapter.InterfaceType = Internal;

  00504	e3a03000	 mov         r3, #0
  00508	e58d3024	 str         r3, [sp, #0x24]

; 286  :     Adapter.BusNumber     = 0;

  0050c	e3a03000	 mov         r3, #0
  00510	e58d3028	 str         r3, [sp, #0x28]

; 287  : 
; 288  :     g_DisplayBaseVirtual  = (DWORD)HalAllocateCommonBuffer(&Adapter, DISPLAY_BUFFER_SIZE, &PhysAddr, FALSE);

  00514	e3a03000	 mov         r3, #0
  00518	e28d2018	 add         r2, sp, #0x18
  0051c	e3a0182b	 mov         r1, #0x2B, 16
  00520	e28d0020	 add         r0, sp, #0x20
  00524	eb000000	 bl          HalAllocateCommonBuffer
  00528	e58d0050	 str         r0, [sp, #0x50]
  0052c	e59d2050	 ldr         r2, [sp, #0x50]
  00530	e59f3640	 ldr         r3, [pc, #0x640]
  00534	e5832000	 str         r2, [r3]

; 289  :     g_DisplayBasePhysical = PhysAddr.LowPart;

  00538	e59d2018	 ldr         r2, [sp, #0x18]
  0053c	e59f362c	 ldr         r3, [pc, #0x62C]
  00540	e5832000	 str         r2, [r3]

; 290  : 
; 291  :     if (!g_DisplayBaseVirtual)

  00544	e59f362c	 ldr         r3, [pc, #0x62C]
  00548	e5933000	 ldr         r3, [r3]
  0054c	e3530000	 cmp         r3, #0
  00550	1a000003	 bne         |$LN22@MapVirtual|

; 292  :     {
; 293  :         Cleanup();

  00554	eb000000	 bl          Cleanup

; 294  :         return FALSE;

  00558	e3a03000	 mov         r3, #0
  0055c	e58d3044	 str         r3, [sp, #0x44]
  00560	ea000178	 b           |$LN23@MapVirtual|
  00564		 |$LN22@MapVirtual|

; 295  :     }
; 296  : 
; 297  :     // map shared virtual memory, and set the virtual ptr to that address rather than local process
; 298  :     // address; from this point on, all processes (including DDraw apps) will be able to access the
; 299  :     // display region using g_DisplayBaseVirtual
; 300  :     g_DisplayBaseVirtual = (DWORD)VirtualAlloc(NULL, DISPLAY_BUFFER_SIZE, MEM_RESERVE, PAGE_NOACCESS);

  00564	e3a03001	 mov         r3, #1
  00568	e3a02a02	 mov         r2, #2, 20
  0056c	e3a0182b	 mov         r1, #0x2B, 16
  00570	e3a00000	 mov         r0, #0
  00574	eb000000	 bl          VirtualAlloc
  00578	e58d0054	 str         r0, [sp, #0x54]
  0057c	e59d2054	 ldr         r2, [sp, #0x54]
  00580	e59f35f0	 ldr         r3, [pc, #0x5F0]
  00584	e5832000	 str         r2, [r3]

; 301  : 
; 302  :     if(!VirtualCopy((LPVOID)g_DisplayBaseVirtual, (LPVOID)((unsigned long)g_DisplayBasePhysical >> 8), DISPLAY_BUFFER_SIZE, (PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL)))

  00588	e3a03c06	 mov         r3, #6, 24
  0058c	e3833004	 orr         r3, r3, #4
  00590	e3a0282b	 mov         r2, #0x2B, 16
  00594	e59f15d4	 ldr         r1, [pc, #0x5D4]
  00598	e5911000	 ldr         r1, [r1]
  0059c	e1a01421	 mov         r1, r1, lsr #8
  005a0	e59f05d0	 ldr         r0, [pc, #0x5D0]
  005a4	e5900000	 ldr         r0, [r0]
  005a8	eb000000	 bl          VirtualCopy
  005ac	e58d0058	 str         r0, [sp, #0x58]
  005b0	e59d3058	 ldr         r3, [sp, #0x58]
  005b4	e3530000	 cmp         r3, #0
  005b8	1a000001	 bne         |$LN21@MapVirtual|

; 303  :     {
; 304  :         RETAILMSG(1,(TEXT("CRITICAL ERROR: display SDRAM region allocation failed")));

  005bc	e59f0600	 ldr         r0, [pc, #0x600]
  005c0	eb000000	 bl          NKDbgPrintfW
  005c4		 |$LN21@MapVirtual|

; 305  :     }
; 306  : 
; 307  :     if(g_fEnableDMASourceSwap)

  005c4	e59f3594	 ldr         r3, [pc, #0x594]
  005c8	e5933000	 ldr         r3, [r3]
  005cc	e3530000	 cmp         r3, #0
  005d0	0a000031	 beq         |$LN20@MapVirtual|

; 308  :     {
; 309  :         AdapterBlackScreen.ObjectSize    = sizeof (DMA_ADAPTER_OBJECT);

  005d4	e3a0300c	 mov         r3, #0xC
  005d8	e1cd30b4	 strh        r3, [sp, #4]

; 310  :         AdapterBlackScreen.InterfaceType = Internal;

  005dc	e3a03000	 mov         r3, #0
  005e0	e58d3008	 str         r3, [sp, #8]

; 311  :         AdapterBlackScreen.BusNumber     = 0;

  005e4	e3a03000	 mov         r3, #0
  005e8	e58d300c	 str         r3, [sp, #0xC]

; 312  : 
; 313  :         g_DisplayBlackBaseVirtual = (DWORD)HalAllocateCommonBuffer(&AdapterBlackScreen, FRAME_BUFFER_SIZE, &PhysAddrBlackScreen, FALSE);

  005ec	e3a03000	 mov         r3, #0
  005f0	e28d2010	 add         r2, sp, #0x10
  005f4	e3a01a96	 mov         r1, #0x96, 20
  005f8	e28d0004	 add         r0, sp, #4
  005fc	eb000000	 bl          HalAllocateCommonBuffer
  00600	e58d005c	 str         r0, [sp, #0x5C]
  00604	e59d205c	 ldr         r2, [sp, #0x5C]
  00608	e59f35b0	 ldr         r3, [pc, #0x5B0]
  0060c	e5832000	 str         r2, [r3]

; 314  :         g_DisplayBlackBasePhysical = PhysAddrBlackScreen.LowPart;

  00610	e59d2010	 ldr         r2, [sp, #0x10]
  00614	e59f3540	 ldr         r3, [pc, #0x540]
  00618	e5832000	 str         r2, [r3]

; 315  : 
; 316  :         if (!g_DisplayBlackBaseVirtual)

  0061c	e59f359c	 ldr         r3, [pc, #0x59C]
  00620	e5933000	 ldr         r3, [r3]
  00624	e3530000	 cmp         r3, #0
  00628	1a000003	 bne         |$LN19@MapVirtual|

; 317  :         {
; 318  :             Cleanup();

  0062c	eb000000	 bl          Cleanup

; 319  :             return FALSE;

  00630	e3a03000	 mov         r3, #0
  00634	e58d3044	 str         r3, [sp, #0x44]
  00638	ea000142	 b           |$LN23@MapVirtual|
  0063c		 |$LN19@MapVirtual|

; 320  :         }
; 321  : 
; 322  :         g_DisplayBlackBaseVirtual = (DWORD)VirtualAlloc(NULL, FRAME_BUFFER_SIZE, MEM_RESERVE, PAGE_NOACCESS);

  0063c	e3a03001	 mov         r3, #1
  00640	e3a02a02	 mov         r2, #2, 20
  00644	e3a01a96	 mov         r1, #0x96, 20
  00648	e3a00000	 mov         r0, #0
  0064c	eb000000	 bl          VirtualAlloc
  00650	e58d0060	 str         r0, [sp, #0x60]
  00654	e59d2060	 ldr         r2, [sp, #0x60]
  00658	e59f3560	 ldr         r3, [pc, #0x560]
  0065c	e5832000	 str         r2, [r3]

; 323  : 
; 324  :         if(!VirtualCopy((LPVOID)g_DisplayBlackBaseVirtual, (LPVOID)((unsigned long)g_DisplayBlackBasePhysical >> 8), FRAME_BUFFER_SIZE, (PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL)))

  00660	e3a03c06	 mov         r3, #6, 24
  00664	e3833004	 orr         r3, r3, #4
  00668	e3a02a96	 mov         r2, #0x96, 20
  0066c	e59f14e8	 ldr         r1, [pc, #0x4E8]
  00670	e5911000	 ldr         r1, [r1]
  00674	e1a01421	 mov         r1, r1, lsr #8
  00678	e59f0540	 ldr         r0, [pc, #0x540]
  0067c	e5900000	 ldr         r0, [r0]
  00680	eb000000	 bl          VirtualCopy
  00684	e58d0064	 str         r0, [sp, #0x64]
  00688	e59d3064	 ldr         r3, [sp, #0x64]
  0068c	e3530000	 cmp         r3, #0
  00690	1a000001	 bne         |$LN18@MapVirtual|

; 325  :         {
; 326  :             RETAILMSG(1,(TEXT("CRITICAL ERROR: blank display SDRAM region allocation failed")));

  00694	e59f0520	 ldr         r0, [pc, #0x520]
  00698	eb000000	 bl          NKDbgPrintfW
  0069c		 |$LN18@MapVirtual|
  0069c		 |$LN20@MapVirtual|

; 327  :         }
; 328  :     }
; 329  : 
; 330  : 
; 331  :     v_pDMAC = (P_XLLP_DMAC_T)VirtualAllocCopyPhysical(sizeof(XLLP_DMAC_T),"DispDrvrInitialize : v_pDMAC",(PVOID)(BULVERDE_BASE_REG_PA_DMAC));

  0069c	e3a02101	 mov         r2, #1, 2
  006a0	e59f1510	 ldr         r1, [pc, #0x510]
  006a4	e3a00601	 mov         r0, #1, 12
  006a8	e3800020	 orr         r0, r0, #0x20
  006ac	eb000000	 bl          VirtualAllocCopyPhysical
  006b0	e58d0068	 str         r0, [sp, #0x68]
  006b4	e59d2068	 ldr         r2, [sp, #0x68]
  006b8	e59f34f4	 ldr         r3, [pc, #0x4F4]
  006bc	e5832000	 str         r2, [r3]

; 332  :     if (!v_pDMAC)

  006c0	e59f34ec	 ldr         r3, [pc, #0x4EC]
  006c4	e5933000	 ldr         r3, [r3]
  006c8	e3530000	 cmp         r3, #0
  006cc	1a000003	 bne         |$LN17@MapVirtual|

; 333  :     {
; 334  :         Cleanup();

  006d0	eb000000	 bl          Cleanup

; 335  :         return FALSE;

  006d4	e3a03000	 mov         r3, #0
  006d8	e58d3044	 str         r3, [sp, #0x44]
  006dc	ea000119	 b           |$LN23@MapVirtual|
  006e0		 |$LN17@MapVirtual|

; 336  :     }
; 337  : 
; 338  :     v_pI2C = (volatile unsigned int *)VirtualAllocCopyPhysical(sizeof(BULVERDE_IICBUS_REG),"DispDrvrInitialize : v_pI2CRegs",(PVOID)(BULVERDE_BASE_REG_PA_I2C));

  006e0	e3a02101	 mov         r2, #1, 2
  006e4	e3822603	 orr         r2, r2, #3, 12
  006e8	e59f14c0	 ldr         r1, [pc, #0x4C0]
  006ec	e3a0002c	 mov         r0, #0x2C
  006f0	eb000000	 bl          VirtualAllocCopyPhysical
  006f4	e58d006c	 str         r0, [sp, #0x6C]
  006f8	e59d206c	 ldr         r2, [sp, #0x6C]
  006fc	e59f34a8	 ldr         r3, [pc, #0x4A8]
  00700	e5832000	 str         r2, [r3]

; 339  :     if (!v_pI2C)

  00704	e59f34a0	 ldr         r3, [pc, #0x4A0]
  00708	e5933000	 ldr         r3, [r3]
  0070c	e3530000	 cmp         r3, #0
  00710	1a000003	 bne         |$LN16@MapVirtual|

; 340  :     {
; 341  :         Cleanup();

  00714	eb000000	 bl          Cleanup

; 342  :         return FALSE;

  00718	e3a03000	 mov         r3, #0
  0071c	e58d3044	 str         r3, [sp, #0x44]
  00720	ea000108	 b           |$LN23@MapVirtual|
  00724		 |$LN16@MapVirtual|

; 343  :     }
; 344  : 
; 345  :     v_pOSTRegs = (volatile unsigned int *)VirtualAllocCopyPhysical(sizeof(XLLP_OST_T),"DispDrvrInitialize : v_pOSTRegs",(PVOID)(BULVERDE_BASE_REG_PA_OST));

  00724	e3a02101	 mov         r2, #1, 2
  00728	e382260a	 orr         r2, r2, #0xA, 12
  0072c	e59f1474	 ldr         r1, [pc, #0x474]
  00730	e3a000e0	 mov         r0, #0xE0
  00734	eb000000	 bl          VirtualAllocCopyPhysical
  00738	e58d0070	 str         r0, [sp, #0x70]
  0073c	e59d2070	 ldr         r2, [sp, #0x70]
  00740	e59f345c	 ldr         r3, [pc, #0x45C]
  00744	e5832000	 str         r2, [r3]

; 346  :     if (!v_pOSTRegs)

  00748	e59f3454	 ldr         r3, [pc, #0x454]
  0074c	e5933000	 ldr         r3, [r3]
  00750	e3530000	 cmp         r3, #0
  00754	1a000003	 bne         |$LN15@MapVirtual|

; 347  :     {
; 348  :         Cleanup();

  00758	eb000000	 bl          Cleanup

; 349  :         return FALSE;

  0075c	e3a03000	 mov         r3, #0
  00760	e58d3044	 str         r3, [sp, #0x44]
  00764	ea0000f7	 b           |$LN23@MapVirtual|
  00768		 |$LN15@MapVirtual|

; 350  :     }
; 351  : 
; 352  :     v_pLcdRegs = (volatile LCDRegs *)VirtualAllocCopyPhysical(sizeof(LCDRegs),"DispDrvrInitialize : v_pLcdRegs",(PVOID)(BULVERDE_BASE_REG_PA_LCD));

  00768	e3a02311	 mov         r2, #0x11, 6
  0076c	e59f142c	 ldr         r1, [pc, #0x42C]
  00770	e3a00e27	 mov         r0, #0x27, 28
  00774	eb000000	 bl          VirtualAllocCopyPhysical
  00778	e58d0074	 str         r0, [sp, #0x74]
  0077c	e59d2074	 ldr         r2, [sp, #0x74]
  00780	e59f3414	 ldr         r3, [pc, #0x414]
  00784	e5832000	 str         r2, [r3]

; 353  :     if (!v_pLcdRegs)

  00788	e59f340c	 ldr         r3, [pc, #0x40C]
  0078c	e5933000	 ldr         r3, [r3]
  00790	e3530000	 cmp         r3, #0
  00794	1a000003	 bne         |$LN14@MapVirtual|

; 354  :     {
; 355  :         Cleanup();

  00798	eb000000	 bl          Cleanup

; 356  :         return FALSE;

  0079c	e3a03000	 mov         r3, #0
  007a0	e58d3044	 str         r3, [sp, #0x44]
  007a4	ea0000e7	 b           |$LN23@MapVirtual|
  007a8		 |$LN14@MapVirtual|

; 357  :     }
; 358  : 
; 359  :     v_pClkRegs = (volatile XLLP_CLKMGR_T *)VirtualAllocCopyPhysical(sizeof(XLLP_CLKMGR_T),"DispDrvrInitialize : v_pClkRegs",(PVOID)(BULVERDE_BASE_REG_PA_CLKMGR));

  007a8	e3a02441	 mov         r2, #0x41, 8
  007ac	e3822603	 orr         r2, r2, #3, 12
  007b0	e59f13e0	 ldr         r1, [pc, #0x3E0]
  007b4	e3a00010	 mov         r0, #0x10
  007b8	eb000000	 bl          VirtualAllocCopyPhysical
  007bc	e58d0078	 str         r0, [sp, #0x78]
  007c0	e59d2078	 ldr         r2, [sp, #0x78]
  007c4	e59f33c8	 ldr         r3, [pc, #0x3C8]
  007c8	e5832000	 str         r2, [r3]

; 360  :     if (!v_pClkRegs)

  007cc	e59f33c0	 ldr         r3, [pc, #0x3C0]
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e3530000	 cmp         r3, #0
  007d8	1a000003	 bne         |$LN13@MapVirtual|

; 361  :     {
; 362  :         Cleanup();

  007dc	eb000000	 bl          Cleanup

; 363  :         return FALSE;

  007e0	e3a03000	 mov         r3, #0
  007e4	e58d3044	 str         r3, [sp, #0x44]
  007e8	ea0000d6	 b           |$LN23@MapVirtual|
  007ec		 |$LN13@MapVirtual|

; 364  :     }
; 365  : 
; 366  :     v_pGPIORegs = (volatile XLLP_GPIO_T *)VirtualAllocCopyPhysical(sizeof(XLLP_GPIO_T),"DispDrvrInitialize : v_pGPIORegs",(PVOID)(BULVERDE_BASE_REG_PA_GPIO));

  007ec	e3a02101	 mov         r2, #1, 2
  007f0	e382260e	 orr         r2, r2, #0xE, 12
  007f4	e59f1394	 ldr         r1, [pc, #0x394]
  007f8	e3a00f53	 mov         r0, #0x53, 30
  007fc	eb000000	 bl          VirtualAllocCopyPhysical
  00800	e58d007c	 str         r0, [sp, #0x7C]
  00804	e59d207c	 ldr         r2, [sp, #0x7C]
  00808	e59f337c	 ldr         r3, [pc, #0x37C]
  0080c	e5832000	 str         r2, [r3]

; 367  :     if (!v_pGPIORegs)

  00810	e59f3374	 ldr         r3, [pc, #0x374]
  00814	e5933000	 ldr         r3, [r3]
  00818	e3530000	 cmp         r3, #0
  0081c	1a000003	 bne         |$LN12@MapVirtual|

; 368  :     {
; 369  :         Cleanup();

  00820	eb000000	 bl          Cleanup

; 370  :         return FALSE;

  00824	e3a03000	 mov         r3, #0
  00828	e58d3044	 str         r3, [sp, #0x44]
  0082c	ea0000c5	 b           |$LN23@MapVirtual|
  00830		 |$LN12@MapVirtual|

; 371  :     }
; 372  : 
; 373  :     frameDescriptorCh0fd1  = (volatile LCD_FRAME_DESCRIPTOR *)(DMA_CHANNEL_0_FRAME_DESCRIPTOR_BASE_VIRTUAL);

  00830	e59f3340	 ldr         r3, [pc, #0x340]
  00834	e5932000	 ldr         r2, [r3]
  00838	e59f3348	 ldr         r3, [pc, #0x348]
  0083c	e5832000	 str         r2, [r3]

; 374  :     frameDescriptorCh0fd2  = (volatile LCD_FRAME_DESCRIPTOR *)(DMA_CHANNEL_0_ALT_FRAME_DESCRIPTOR_BASE_VIRTUAL);

  00840	e59f3330	 ldr         r3, [pc, #0x330]
  00844	e5933000	 ldr         r3, [r3]
  00848	e2832040	 add         r2, r3, #0x40
  0084c	e59f3330	 ldr         r3, [pc, #0x330]
  00850	e5832000	 str         r2, [r3]

; 375  :     frameDescriptorCh1     = (volatile LCD_FRAME_DESCRIPTOR *)(DMA_CHANNEL_1_FRAME_DESCRIPTOR_BASE_VIRTUAL);

  00854	e59f331c	 ldr         r3, [pc, #0x31C]
  00858	e5933000	 ldr         r3, [r3]
  0085c	e2832020	 add         r2, r3, #0x20
  00860	e59f3318	 ldr         r3, [pc, #0x318]
  00864	e5832000	 str         r2, [r3]

; 376  :     frameDescriptorPalette = (volatile LCD_FRAME_DESCRIPTOR *)(PALETTE_FRAME_DESCRIPTOR_BASE_VIRTUAL);

  00868	e59f3308	 ldr         r3, [pc, #0x308]
  0086c	e5933000	 ldr         r3, [r3]
  00870	e2832060	 add         r2, r3, #0x60
  00874	e59f3300	 ldr         r3, [pc, #0x300]
  00878	e5832000	 str         r2, [r3]

; 377  :     v_pPaletteBuffer       = (volatile LCD_PALETTE *)(PALETTE_BUFFER_BASE_VIRTUAL);

  0087c	e59f32f4	 ldr         r3, [pc, #0x2F4]
  00880	e5933000	 ldr         r3, [r3]
  00884	e2832080	 add         r2, r3, #0x80
  00888	e59f32e4	 ldr         r3, [pc, #0x2E4]
  0088c	e5832000	 str         r2, [r3]

; 378  : 
; 379  :     // Enter into Kernel mode to enable us to modify the section descriptor
; 380  :     // so that we may set the bufferable bit.  This enables write coalescing
; 381  :     // for frame buffer writes when using the section mapped address.
; 382  :     //
; 383  :     // GAPI uses the section mapped address always.
; 384  : 
; 385  : 
; 386  :     // Now configure the frame buffer's section descriptor.
; 387  :     // The function GetDescriptorAddress shows how to obtain the correct descriptor address.
; 388  :     // This descriptor is one of two descriptors that map the the frame buffer.
; 389  :     // The first descriptor found maps the cached virtual address, while the second
; 390  :     // descriptor found maps the uncached virtual address.  We want to modify the
; 391  :     // second descriptor, that which maps the uncached virtual address since the uncached virtual
; 392  :     // address is the address we've chosen to use throughout the codebase.
; 393  :     //
; 394  :     // NOTE:
; 395  :     // The section descriptor covers a 1MB section.  If the frame buffer ever exceeds 1MB
; 396  :     // in size, you'll need to modify additional section descriptors.
; 397  :     //
; 398  : 
; 399  :     // DDraw requires that the frame buffer pointer be in the shared memory space so
; 400  :     // is can be shared between processes.
; 401  :     {
; 402  :         PVOID  pPhysAddr;
; 403  :         size_t offset;
; 404  :         size_t size;
; 405  : 
; 406  :         pPhysAddr  = (PVOID)(FRAME_BUFFER_0_BASE_PHYSICAL);

  00890	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00894	e5933000	 ldr         r3, [r3]
  00898	e2833d12	 add         r3, r3, #0x12, 26
  0089c	e58d3034	 str         r3, [sp, #0x34]

; 407  :         size       = frameBufferSize * NUM_FRAME_BUFFERS;

  008a0	e59f32c0	 ldr         r3, [pc, #0x2C0]
  008a4	e5933000	 ldr         r3, [r3]
  008a8	e58d302c	 str         r3, [sp, #0x2C]

; 408  :         offset     = (unsigned)pPhysAddr & (0x1000 - 1);

  008ac	e59d2034	 ldr         r2, [sp, #0x34]
  008b0	e3a03c0f	 mov         r3, #0xF, 24
  008b4	e38330ff	 orr         r3, r3, #0xFF
  008b8	e0023003	 and         r3, r2, r3
  008bc	e58d3030	 str         r3, [sp, #0x30]

; 409  :         size      += (offset ? 0x1000 : 0);

  008c0	e59d3030	 ldr         r3, [sp, #0x30]
  008c4	e3530000	 cmp         r3, #0
  008c8	0a000002	 beq         |$LN25@MapVirtual|
  008cc	e3a03a01	 mov         r3, #1, 20
  008d0	e58d3080	 str         r3, [sp, #0x80]
  008d4	ea000001	 b           |$LN26@MapVirtual|
  008d8		 |$LN25@MapVirtual|
  008d8	e3a03000	 mov         r3, #0
  008dc	e58d3080	 str         r3, [sp, #0x80]
  008e0		 |$LN26@MapVirtual|
  008e0	e59d202c	 ldr         r2, [sp, #0x2C]
  008e4	e59d3080	 ldr         r3, [sp, #0x80]
  008e8	e0823003	 add         r3, r2, r3
  008ec	e58d302c	 str         r3, [sp, #0x2C]

; 410  :         pPhysAddr  = (PVOID)((unsigned)pPhysAddr - offset);

  008f0	e59d2034	 ldr         r2, [sp, #0x34]
  008f4	e59d3030	 ldr         r3, [sp, #0x30]
  008f8	e0423003	 sub         r3, r2, r3
  008fc	e58d3034	 str         r3, [sp, #0x34]

; 411  : 
; 412  :         if (size >= 1024*1024*2)

  00900	e59d302c	 ldr         r3, [sp, #0x2C]
  00904	e3530602	 cmp         r3, #2, 12
  00908	3a000009	 bcc         |$LN11@MapVirtual|

; 413  :         {
; 414  :             gFrameBuffer = (PBYTE)VirtualAlloc(NULL, size, MEM_RESERVE, PAGE_NOACCESS);

  0090c	e3a03001	 mov         r3, #1
  00910	e3a02a02	 mov         r2, #2, 20
  00914	e59d102c	 ldr         r1, [sp, #0x2C]
  00918	e3a00000	 mov         r0, #0
  0091c	eb000000	 bl          VirtualAlloc
  00920	e58d0084	 str         r0, [sp, #0x84]
  00924	e59d2084	 ldr         r2, [sp, #0x84]
  00928	e59f3234	 ldr         r3, [pc, #0x234]
  0092c	e5832000	 str         r2, [r3]

; 415  :         }
; 416  :         else

  00930	ea000008	 b           |$LN10@MapVirtual|
  00934		 |$LN11@MapVirtual|

; 417  :         {
; 418  :             gFrameBuffer = (PBYTE)VirtualAlloc(NULL, 1024*1024*2, MEM_RESERVE, PAGE_NOACCESS);

  00934	e3a03001	 mov         r3, #1
  00938	e3a02a02	 mov         r2, #2, 20
  0093c	e3a01602	 mov         r1, #2, 12
  00940	e3a00000	 mov         r0, #0
  00944	eb000000	 bl          VirtualAlloc
  00948	e58d0088	 str         r0, [sp, #0x88]
  0094c	e59d2088	 ldr         r2, [sp, #0x88]
  00950	e59f320c	 ldr         r3, [pc, #0x20C]
  00954	e5832000	 str         r2, [r3]
  00958		 |$LN10@MapVirtual|

; 419  :         }
; 420  : 
; 421  :         if (!VirtualCopy(gFrameBuffer, (LPVOID)((unsigned long)pPhysAddr >> 8), size, (PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL)))

  00958	e3a03c06	 mov         r3, #6, 24
  0095c	e3833004	 orr         r3, r3, #4
  00960	e59d202c	 ldr         r2, [sp, #0x2C]
  00964	e59d1034	 ldr         r1, [sp, #0x34]
  00968	e1a01421	 mov         r1, r1, lsr #8
  0096c	e59f01f0	 ldr         r0, [pc, #0x1F0]
  00970	e5900000	 ldr         r0, [r0]
  00974	eb000000	 bl          VirtualCopy
  00978	e58d008c	 str         r0, [sp, #0x8C]
  0097c	e59d308c	 ldr         r3, [sp, #0x8C]
  00980	e3530000	 cmp         r3, #0
  00984	1a000003	 bne         |$LN9@MapVirtual|

; 422  :         {
; 423  :             gFrameBuffer = NULL;

  00988	e59f21d4	 ldr         r2, [pc, #0x1D4]
  0098c	e3a03000	 mov         r3, #0
  00990	e5823000	 str         r3, [r2]

; 424  :         }
; 425  :         else

  00994	ea000005	 b           |$LN8@MapVirtual|
  00998		 |$LN9@MapVirtual|

; 426  :         {
; 427  :             gFrameBuffer += offset;

  00998	e59f31c4	 ldr         r3, [pc, #0x1C4]
  0099c	e5932000	 ldr         r2, [r3]
  009a0	e59d3030	 ldr         r3, [sp, #0x30]
  009a4	e0822003	 add         r2, r2, r3
  009a8	e59f31b4	 ldr         r3, [pc, #0x1B4]
  009ac	e5832000	 str         r2, [r3]
  009b0		 |$LN8@MapVirtual|

; 428  :         }
; 429  :     }
; 430  : 
; 431  :     if (!gFrameBuffer)

  009b0	e59f31ac	 ldr         r3, [pc, #0x1AC]
  009b4	e5933000	 ldr         r3, [r3]
  009b8	e3530000	 cmp         r3, #0
  009bc	1a000003	 bne         |$LN7@MapVirtual|

; 432  :     {
; 433  :         Cleanup();

  009c0	eb000000	 bl          Cleanup

; 434  :         return FALSE;

  009c4	e3a03000	 mov         r3, #0
  009c8	e58d3044	 str         r3, [sp, #0x44]
  009cc	ea00005d	 b           |$LN23@MapVirtual|
  009d0		 |$LN7@MapVirtual|

; 435  :     }
; 436  : 
; 437  :     if (bDoRotation)

  009d0	e59f3194	 ldr         r3, [pc, #0x194]
  009d4	e5933000	 ldr         r3, [r3]
  009d8	e3530000	 cmp         r3, #0
  009dc	0a000009	 beq         |$LN6@MapVirtual|

; 438  :     {
; 439  :         // if rotating the display, the actual frame buffer should be configured as bufferable for max write performance into the frame buffer.
; 440  :         VirtualSetAttributes(gFrameBuffer, frameBufferSize*NUM_FRAME_BUFFERS, 4, 4, NULL);

  009e0	e3a03000	 mov         r3, #0
  009e4	e58d3000	 str         r3, [sp]
  009e8	e3a03004	 mov         r3, #4
  009ec	e3a02004	 mov         r2, #4
  009f0	e59f1170	 ldr         r1, [pc, #0x170]
  009f4	e5911000	 ldr         r1, [r1]
  009f8	e59f0164	 ldr         r0, [pc, #0x164]
  009fc	e5900000	 ldr         r0, [r0]
  00a00	eb000000	 bl          VirtualSetAttributes

; 441  :     }
; 442  :     else

  00a04	ea000008	 b           |$LN5@MapVirtual|
  00a08		 |$LN6@MapVirtual|

; 443  :     {
; 444  :         // if not rotating the dispay, we can draw directly into the frame buffer, and use write-through cache mode to improve frame buffer throughput
; 445  :         VirtualSetAttributes(gFrameBuffer, frameBufferSize*NUM_FRAME_BUFFERS, 8, 8, NULL);

  00a08	e3a03000	 mov         r3, #0
  00a0c	e58d3000	 str         r3, [sp]
  00a10	e3a03008	 mov         r3, #8
  00a14	e3a02008	 mov         r2, #8
  00a18	e59f1148	 ldr         r1, [pc, #0x148]
  00a1c	e5911000	 ldr         r1, [r1]
  00a20	e59f013c	 ldr         r0, [pc, #0x13C]
  00a24	e5900000	 ldr         r0, [r0]
  00a28	eb000000	 bl          VirtualSetAttributes
  00a2c		 |$LN5@MapVirtual|

; 446  :     }
; 447  : 
; 448  :     if (g_fEnableDMASourceSwap) {

  00a2c	e59f312c	 ldr         r3, [pc, #0x12C]
  00a30	e5933000	 ldr         r3, [r3]
  00a34	e3530000	 cmp         r3, #0
  00a38	0a000040	 beq         |$LN4@MapVirtual|

; 449  :         PVOID  pPhysAddr;
; 450  :         size_t offset;
; 451  :         size_t size;
; 452  : 
; 453  :         pPhysAddr  = (PVOID)(g_DisplayBlackBasePhysical);

  00a3c	e59f3118	 ldr         r3, [pc, #0x118]
  00a40	e5933000	 ldr         r3, [r3]
  00a44	e58d3040	 str         r3, [sp, #0x40]

; 454  :         size       = FRAME_BUFFER_SIZE;

  00a48	e3a03a96	 mov         r3, #0x96, 20
  00a4c	e58d3038	 str         r3, [sp, #0x38]

; 455  :         offset     = (unsigned)pPhysAddr & (0x1000 - 1);

  00a50	e59d2040	 ldr         r2, [sp, #0x40]
  00a54	e3a03c0f	 mov         r3, #0xF, 24
  00a58	e38330ff	 orr         r3, r3, #0xFF
  00a5c	e0023003	 and         r3, r2, r3
  00a60	e58d303c	 str         r3, [sp, #0x3C]

; 456  :         size      += (offset ? 0x1000 : 0);

  00a64	e59d303c	 ldr         r3, [sp, #0x3C]
  00a68	e3530000	 cmp         r3, #0
  00a6c	0a000002	 beq         |$LN27@MapVirtual|
  00a70	e3a03a01	 mov         r3, #1, 20
  00a74	e58d3090	 str         r3, [sp, #0x90]
  00a78	ea000001	 b           |$LN28@MapVirtual|
  00a7c		 |$LN27@MapVirtual|
  00a7c	e3a03000	 mov         r3, #0
  00a80	e58d3090	 str         r3, [sp, #0x90]
  00a84		 |$LN28@MapVirtual|
  00a84	e59d2038	 ldr         r2, [sp, #0x38]
  00a88	e59d3090	 ldr         r3, [sp, #0x90]
  00a8c	e0823003	 add         r3, r2, r3
  00a90	e58d3038	 str         r3, [sp, #0x38]

; 457  :         pPhysAddr  = (PVOID)((unsigned)pPhysAddr - offset);

  00a94	e59d2040	 ldr         r2, [sp, #0x40]
  00a98	e59d303c	 ldr         r3, [sp, #0x3C]
  00a9c	e0423003	 sub         r3, r2, r3
  00aa0	e58d3040	 str         r3, [sp, #0x40]

; 458  : 
; 459  :         gBlackFrameBuffer = (PBYTE)VirtualAlloc(NULL, size, MEM_RESERVE, PAGE_NOACCESS);

  00aa4	e3a03001	 mov         r3, #1
  00aa8	e3a02a02	 mov         r2, #2, 20
  00aac	e59d1038	 ldr         r1, [sp, #0x38]
  00ab0	e3a00000	 mov         r0, #0
  00ab4	eb000000	 bl          VirtualAlloc
  00ab8	e58d0094	 str         r0, [sp, #0x94]
  00abc	e59d2094	 ldr         r2, [sp, #0x94]
  00ac0	e59f3090	 ldr         r3, [pc, #0x90]
  00ac4	e5832000	 str         r2, [r3]

; 460  : 
; 461  :         if (!VirtualCopy(gBlackFrameBuffer, (LPVOID)((unsigned long)pPhysAddr >> 8), size, (PAGE_READWRITE | PAGE_NOCACHE | PAGE_PHYSICAL)))

  00ac8	e3a03c06	 mov         r3, #6, 24
  00acc	e3833004	 orr         r3, r3, #4
  00ad0	e59d2038	 ldr         r2, [sp, #0x38]
  00ad4	e59d1040	 ldr         r1, [sp, #0x40]
  00ad8	e1a01421	 mov         r1, r1, lsr #8
  00adc	e59f0074	 ldr         r0, [pc, #0x74]
  00ae0	e5900000	 ldr         r0, [r0]
  00ae4	eb000000	 bl          VirtualCopy
  00ae8	e58d0098	 str         r0, [sp, #0x98]
  00aec	e59d3098	 ldr         r3, [sp, #0x98]
  00af0	e3530000	 cmp         r3, #0
  00af4	1a000003	 bne         |$LN3@MapVirtual|

; 462  :         {
; 463  :             gBlackFrameBuffer = NULL;

  00af8	e59f2058	 ldr         r2, [pc, #0x58]
  00afc	e3a03000	 mov         r3, #0
  00b00	e5823000	 str         r3, [r2]

; 464  :         }
; 465  :         else

  00b04	ea000005	 b           |$LN2@MapVirtual|
  00b08		 |$LN3@MapVirtual|

; 466  :         {
; 467  :             gBlackFrameBuffer += offset;

  00b08	e59f3048	 ldr         r3, [pc, #0x48]
  00b0c	e5932000	 ldr         r2, [r3]
  00b10	e59d303c	 ldr         r3, [sp, #0x3C]
  00b14	e0822003	 add         r2, r2, r3
  00b18	e59f3038	 ldr         r3, [pc, #0x38]
  00b1c	e5832000	 str         r2, [r3]
  00b20		 |$LN2@MapVirtual|

; 468  :         }
; 469  : 
; 470  :         if(!gBlackFrameBuffer) {

  00b20	e59f3030	 ldr         r3, [pc, #0x30]
  00b24	e5933000	 ldr         r3, [r3]
  00b28	e3530000	 cmp         r3, #0
  00b2c	1a000003	 bne         |$LN1@MapVirtual|

; 471  :             Cleanup();

  00b30	eb000000	 bl          Cleanup

; 472  :             return FALSE;

  00b34	e3a03000	 mov         r3, #0
  00b38	e58d3044	 str         r3, [sp, #0x44]
  00b3c	ea000001	 b           |$LN23@MapVirtual|
  00b40		 |$LN1@MapVirtual|
  00b40		 |$LN4@MapVirtual|

; 473  :         }
; 474  :     }
; 475  : 
; 476  :     return TRUE;

  00b40	e3a03001	 mov         r3, #1
  00b44	e58d3044	 str         r3, [sp, #0x44]
  00b48		 |$LN23@MapVirtual|

; 477  : }

  00b48	e59d0044	 ldr         r0, [sp, #0x44]
  00b4c	e28dd09c	 add         sp, sp, #0x9C
  00b50	e49de004	 ldr         lr, [sp], #4
  00b54	e12fff1e	 bx          lr
  00b58		 |$LN32@MapVirtual|
  00b58		 |$LN33@MapVirtual|
  00b58	00000000	 DCD         |gBlackFrameBuffer|
  00b5c		 |$LN34@MapVirtual|
  00b5c	00000000	 DCD         |g_DisplayBlackBasePhysical|
  00b60		 |$LN35@MapVirtual|
  00b60	00000000	 DCD         |g_fEnableDMASourceSwap|
  00b64		 |$LN36@MapVirtual|
  00b64	00000000	 DCD         |gFrameBuffer|
  00b68		 |$LN37@MapVirtual|
  00b68	00000000	 DCD         |frameBufferSize|
  00b6c		 |$LN38@MapVirtual|
  00b6c	00000000	 DCD         |bDoRotation|
  00b70		 |$LN39@MapVirtual|
  00b70	00000000	 DCD         |g_DisplayBasePhysical|
  00b74		 |$LN40@MapVirtual|
  00b74	00000000	 DCD         |v_pPaletteBuffer|
  00b78		 |$LN41@MapVirtual|
  00b78	00000000	 DCD         |g_DisplayBaseVirtual|
  00b7c		 |$LN42@MapVirtual|
  00b7c	00000000	 DCD         |frameDescriptorPalette|
  00b80		 |$LN43@MapVirtual|
  00b80	00000000	 DCD         |frameDescriptorCh1|
  00b84		 |$LN44@MapVirtual|
  00b84	00000000	 DCD         |frameDescriptorCh0fd2|
  00b88		 |$LN45@MapVirtual|
  00b88	00000000	 DCD         |frameDescriptorCh0fd1|
  00b8c		 |$LN46@MapVirtual|
  00b8c	00000000	 DCD         |v_pGPIORegs|
  00b90		 |$LN47@MapVirtual|
  00b90	00000000	 DCD         |??_C@_0CB@CGKDKANF@DispDrvrInitialize?5?3?5v_pGPIORegs@|
  00b94		 |$LN48@MapVirtual|
  00b94	00000000	 DCD         |v_pClkRegs|
  00b98		 |$LN49@MapVirtual|
  00b98	00000000	 DCD         |??_C@_0CA@MKNHKMEH@DispDrvrInitialize?5?3?5v_pClkRegs?$AA@|
  00b9c		 |$LN50@MapVirtual|
  00b9c	00000000	 DCD         |v_pLcdRegs|
  00ba0		 |$LN51@MapVirtual|
  00ba0	00000000	 DCD         |??_C@_0CA@BEOJHMNH@DispDrvrInitialize?5?3?5v_pLcdRegs?$AA@|
  00ba4		 |$LN52@MapVirtual|
  00ba4	00000000	 DCD         |v_pOSTRegs|
  00ba8		 |$LN53@MapVirtual|
  00ba8	00000000	 DCD         |??_C@_0CA@DGHPNJML@DispDrvrInitialize?5?3?5v_pOSTRegs?$AA@|
  00bac		 |$LN54@MapVirtual|
  00bac	00000000	 DCD         |v_pI2C|
  00bb0		 |$LN55@MapVirtual|
  00bb0	00000000	 DCD         |??_C@_0CA@MDACKFDO@DispDrvrInitialize?5?3?5v_pI2CRegs?$AA@|
  00bb4		 |$LN56@MapVirtual|
  00bb4	00000000	 DCD         |v_pDMAC|
  00bb8		 |$LN57@MapVirtual|
  00bb8	00000000	 DCD         |??_C@_0BN@LOBFCJCF@DispDrvrInitialize?5?3?5v_pDMAC?$AA@|
  00bbc		 |$LN58@MapVirtual|
  00bbc	00000000	 DCD         |??_C@_1HK@OHAMICA@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAb?$AAl?$AAa?$AAn?$AAk?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD@|
  00bc0		 |$LN59@MapVirtual|
  00bc0	00000000	 DCD         |g_DisplayBlackBaseVirtual|
  00bc4		 |$LN60@MapVirtual|
  00bc4	00000000	 DCD         |??_C@_1GO@IELHMFCI@?$AAC?$AAR?$AAI?$AAT?$AAI?$AAC?$AAA?$AAL?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAS?$AAD?$AAR?$AAA?$AAM?$AA?5?$AAr?$AAe@|
  00bc8		 |$M43017|

			 ENDP  ; |MapVirtualAddress|

	IMPORT	|HalFreeCommonBuffer|
	IMPORT	|VirtualFree|

  00028			 AREA	 |.pdata|, PDATA
|$T43057| DCD	|$LN14@Cleanup|
	DCD	0x4000a402
; Function compile flags: /Odtp

  00bc8			 AREA	 |.text|, CODE, ARM

  00bc8		 |Cleanup| PROC

; 482  : {

  00bc8		 |$LN14@Cleanup|
  00bc8	e52de004	 str         lr, [sp, #-4]!
  00bcc	e24dd040	 sub         sp, sp, #0x40
  00bd0		 |$M43054|

; 483  :     DMA_ADAPTER_OBJECT Adapter;
; 484  :     PHYSICAL_ADDRESS   PhysAddr;
; 485  : 
; 486  :     DMA_ADAPTER_OBJECT AdapterBlackScreen;
; 487  :     PHYSICAL_ADDRESS   PhysAddrBlackScreen;
; 488  : 
; 489  :     if (v_pLcdRegs)

  00bd0	e59f3278	 ldr         r3, [pc, #0x278]
  00bd4	e5933000	 ldr         r3, [r3]
  00bd8	e3530000	 cmp         r3, #0
  00bdc	0a000007	 beq         |$LN9@Cleanup|

; 490  :     {
; 491  :         VirtualFree((PVOID)v_pLcdRegs,0,MEM_RELEASE);

  00be0	e3a02902	 mov         r2, #2, 18
  00be4	e3a01000	 mov         r1, #0
  00be8	e59f3260	 ldr         r3, [pc, #0x260]
  00bec	e5930000	 ldr         r0, [r3]
  00bf0	eb000000	 bl          VirtualFree

; 492  :         v_pLcdRegs = NULL;

  00bf4	e59f2254	 ldr         r2, [pc, #0x254]
  00bf8	e3a03000	 mov         r3, #0
  00bfc	e5823000	 str         r3, [r2]
  00c00		 |$LN9@Cleanup|

; 493  :     }
; 494  : 
; 495  :     if (v_pClkRegs)

  00c00	e59f324c	 ldr         r3, [pc, #0x24C]
  00c04	e5933000	 ldr         r3, [r3]
  00c08	e3530000	 cmp         r3, #0
  00c0c	0a000007	 beq         |$LN8@Cleanup|

; 496  :     {
; 497  :         VirtualFree((PVOID)v_pClkRegs,0,MEM_RELEASE);

  00c10	e3a02902	 mov         r2, #2, 18
  00c14	e3a01000	 mov         r1, #0
  00c18	e59f3234	 ldr         r3, [pc, #0x234]
  00c1c	e5930000	 ldr         r0, [r3]
  00c20	eb000000	 bl          VirtualFree

; 498  :         v_pLcdRegs = NULL;

  00c24	e59f2224	 ldr         r2, [pc, #0x224]
  00c28	e3a03000	 mov         r3, #0
  00c2c	e5823000	 str         r3, [r2]
  00c30		 |$LN8@Cleanup|

; 499  :     }
; 500  : 
; 501  :     if (v_pGPIORegs)

  00c30	e59f3214	 ldr         r3, [pc, #0x214]
  00c34	e5933000	 ldr         r3, [r3]
  00c38	e3530000	 cmp         r3, #0
  00c3c	0a000007	 beq         |$LN7@Cleanup|

; 502  :     {
; 503  :         VirtualFree((PVOID)v_pGPIORegs,0,MEM_RELEASE);

  00c40	e3a02902	 mov         r2, #2, 18
  00c44	e3a01000	 mov         r1, #0
  00c48	e59f31fc	 ldr         r3, [pc, #0x1FC]
  00c4c	e5930000	 ldr         r0, [r3]
  00c50	eb000000	 bl          VirtualFree

; 504  :         v_pGPIORegs = NULL;

  00c54	e59f21f0	 ldr         r2, [pc, #0x1F0]
  00c58	e3a03000	 mov         r3, #0
  00c5c	e5823000	 str         r3, [r2]
  00c60		 |$LN7@Cleanup|

; 505  :     }
; 506  : 
; 507  :     if (gFrameBuffer)

  00c60	e59f31e0	 ldr         r3, [pc, #0x1E0]
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e3530000	 cmp         r3, #0
  00c6c	0a000007	 beq         |$LN6@Cleanup|

; 508  :     {
; 509  :         VirtualFree((PVOID)gFrameBuffer,0,MEM_RELEASE);

  00c70	e3a02902	 mov         r2, #2, 18
  00c74	e3a01000	 mov         r1, #0
  00c78	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00c7c	e5930000	 ldr         r0, [r3]
  00c80	eb000000	 bl          VirtualFree

; 510  :         gFrameBuffer = NULL;

  00c84	e59f21bc	 ldr         r2, [pc, #0x1BC]
  00c88	e3a03000	 mov         r3, #0
  00c8c	e5823000	 str         r3, [r2]
  00c90		 |$LN6@Cleanup|

; 511  :     }
; 512  : 
; 513  :     if (gBlackFrameBuffer)

  00c90	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00c94	e5933000	 ldr         r3, [r3]
  00c98	e3530000	 cmp         r3, #0
  00c9c	0a000007	 beq         |$LN5@Cleanup|

; 514  :     {
; 515  :         VirtualFree((PVOID)gBlackFrameBuffer,0,MEM_RELEASE);

  00ca0	e3a02902	 mov         r2, #2, 18
  00ca4	e3a01000	 mov         r1, #0
  00ca8	e59f3194	 ldr         r3, [pc, #0x194]
  00cac	e5930000	 ldr         r0, [r3]
  00cb0	eb000000	 bl          VirtualFree

; 516  :         gBlackFrameBuffer = NULL;

  00cb4	e59f2188	 ldr         r2, [pc, #0x188]
  00cb8	e3a03000	 mov         r3, #0
  00cbc	e5823000	 str         r3, [r2]
  00cc0		 |$LN5@Cleanup|

; 517  :     }
; 518  : 
; 519  :     if (frameDescriptorCh2_YCbCr_Y)

  00cc0	e59f3178	 ldr         r3, [pc, #0x178]
  00cc4	e5933000	 ldr         r3, [r3]
  00cc8	e3530000	 cmp         r3, #0
  00ccc	0a000007	 beq         |$LN4@Cleanup|

; 520  :     {
; 521  :         VirtualFree((PVOID)frameDescriptorCh2_YCbCr_Y,0,MEM_RELEASE);

  00cd0	e3a02902	 mov         r2, #2, 18
  00cd4	e3a01000	 mov         r1, #0
  00cd8	e59f3160	 ldr         r3, [pc, #0x160]
  00cdc	e5930000	 ldr         r0, [r3]
  00ce0	eb000000	 bl          VirtualFree

; 522  :         frameDescriptorCh2_YCbCr_Y = NULL;

  00ce4	e59f2154	 ldr         r2, [pc, #0x154]
  00ce8	e3a03000	 mov         r3, #0
  00cec	e5823000	 str         r3, [r2]
  00cf0		 |$LN4@Cleanup|

; 523  :     }
; 524  : 
; 525  :     if (frameDescriptorCh3_YCbCr_Cb)

  00cf0	e59f3144	 ldr         r3, [pc, #0x144]
  00cf4	e5933000	 ldr         r3, [r3]
  00cf8	e3530000	 cmp         r3, #0
  00cfc	0a000007	 beq         |$LN3@Cleanup|

; 526  :     {
; 527  :         VirtualFree((PVOID)frameDescriptorCh3_YCbCr_Cb,0,MEM_RELEASE);

  00d00	e3a02902	 mov         r2, #2, 18
  00d04	e3a01000	 mov         r1, #0
  00d08	e59f312c	 ldr         r3, [pc, #0x12C]
  00d0c	e5930000	 ldr         r0, [r3]
  00d10	eb000000	 bl          VirtualFree

; 528  :         frameDescriptorCh3_YCbCr_Cb = NULL;

  00d14	e59f2120	 ldr         r2, [pc, #0x120]
  00d18	e3a03000	 mov         r3, #0
  00d1c	e5823000	 str         r3, [r2]
  00d20		 |$LN3@Cleanup|

; 529  :     }
; 530  : 
; 531  :     if (frameDescriptorCh4_YCbCr_Cr)

  00d20	e59f3110	 ldr         r3, [pc, #0x110]
  00d24	e5933000	 ldr         r3, [r3]
  00d28	e3530000	 cmp         r3, #0
  00d2c	0a000007	 beq         |$LN2@Cleanup|

; 532  :     {
; 533  :         VirtualFree((PVOID)frameDescriptorCh4_YCbCr_Cr,0,MEM_RELEASE);

  00d30	e3a02902	 mov         r2, #2, 18
  00d34	e3a01000	 mov         r1, #0
  00d38	e59f30f8	 ldr         r3, [pc, #0xF8]
  00d3c	e5930000	 ldr         r0, [r3]
  00d40	eb000000	 bl          VirtualFree

; 534  :         frameDescriptorCh4_YCbCr_Cr = NULL;

  00d44	e59f20ec	 ldr         r2, [pc, #0xEC]
  00d48	e3a03000	 mov         r3, #0
  00d4c	e5823000	 str         r3, [r2]
  00d50		 |$LN2@Cleanup|

; 535  :     }
; 536  : 
; 537  :     Adapter.ObjectSize    = sizeof (DMA_ADAPTER_OBJECT);

  00d50	e3a0300c	 mov         r3, #0xC
  00d54	e1cd32b4	 strh        r3, [sp, #0x24]

; 538  :     Adapter.InterfaceType = Internal;

  00d58	e3a03000	 mov         r3, #0
  00d5c	e58d3028	 str         r3, [sp, #0x28]

; 539  :     Adapter.BusNumber     = 0;

  00d60	e3a03000	 mov         r3, #0
  00d64	e58d302c	 str         r3, [sp, #0x2C]

; 540  : 
; 541  :     PhysAddr.HighPart = 0;

  00d68	e3a03000	 mov         r3, #0
  00d6c	e58d3020	 str         r3, [sp, #0x20]

; 542  :     PhysAddr.LowPart  = g_DisplayBasePhysical;

  00d70	e59f30bc	 ldr         r3, [pc, #0xBC]
  00d74	e5933000	 ldr         r3, [r3]
  00d78	e58d301c	 str         r3, [sp, #0x1C]

; 543  : 
; 544  :     HalFreeCommonBuffer(&Adapter, DISPLAY_BUFFER_SIZE, PhysAddr, (void *)g_DisplayBaseVirtual, FALSE);

  00d7c	e3a03000	 mov         r3, #0
  00d80	e58d3004	 str         r3, [sp, #4]
  00d84	e59f30a4	 ldr         r3, [pc, #0xA4]
  00d88	e5933000	 ldr         r3, [r3]
  00d8c	e58d3000	 str         r3, [sp]
  00d90	e59d201c	 ldr         r2, [sp, #0x1C]
  00d94	e59d3020	 ldr         r3, [sp, #0x20]
  00d98	e3a0182b	 mov         r1, #0x2B, 16
  00d9c	e28d0024	 add         r0, sp, #0x24
  00da0	eb000000	 bl          HalFreeCommonBuffer

; 545  : 
; 546  :     if( g_fEnableDMASourceSwap && g_DisplayBlackBaseVirtual)

  00da4	e59f3080	 ldr         r3, [pc, #0x80]
  00da8	e5933000	 ldr         r3, [r3]
  00dac	e3530000	 cmp         r3, #0
  00db0	0a000018	 beq         |$LN1@Cleanup|
  00db4	e59f3068	 ldr         r3, [pc, #0x68]
  00db8	e5933000	 ldr         r3, [r3]
  00dbc	e3530000	 cmp         r3, #0
  00dc0	0a000014	 beq         |$LN1@Cleanup|

; 547  :     {
; 548  :         AdapterBlackScreen.ObjectSize    = sizeof (DMA_ADAPTER_OBJECT);

  00dc4	e3a0300c	 mov         r3, #0xC
  00dc8	e1cd30b8	 strh        r3, [sp, #8]

; 549  :         AdapterBlackScreen.InterfaceType = Internal;

  00dcc	e3a03000	 mov         r3, #0
  00dd0	e58d300c	 str         r3, [sp, #0xC]

; 550  :         AdapterBlackScreen.BusNumber     = 0;

  00dd4	e3a03000	 mov         r3, #0
  00dd8	e58d3010	 str         r3, [sp, #0x10]

; 551  : 
; 552  :         PhysAddrBlackScreen.HighPart = 0;

  00ddc	e3a03000	 mov         r3, #0
  00de0	e58d3018	 str         r3, [sp, #0x18]

; 553  :         PhysAddrBlackScreen.LowPart  = g_DisplayBlackBasePhysical;

  00de4	e59f303c	 ldr         r3, [pc, #0x3C]
  00de8	e5933000	 ldr         r3, [r3]
  00dec	e58d3014	 str         r3, [sp, #0x14]

; 554  : 
; 555  :         HalFreeCommonBuffer(&AdapterBlackScreen, FRAME_BUFFER_SIZE, PhysAddrBlackScreen, (void *)g_DisplayBlackBaseVirtual, FALSE);

  00df0	e3a03000	 mov         r3, #0
  00df4	e58d3004	 str         r3, [sp, #4]
  00df8	e59f3024	 ldr         r3, [pc, #0x24]
  00dfc	e5933000	 ldr         r3, [r3]
  00e00	e58d3000	 str         r3, [sp]
  00e04	e59d2014	 ldr         r2, [sp, #0x14]
  00e08	e59d3018	 ldr         r3, [sp, #0x18]
  00e0c	e3a01a96	 mov         r1, #0x96, 20
  00e10	e28d0008	 add         r0, sp, #8
  00e14	eb000000	 bl          HalFreeCommonBuffer
  00e18		 |$LN1@Cleanup|

; 556  :     }
; 557  : }

  00e18	e28dd040	 add         sp, sp, #0x40
  00e1c	e49de004	 ldr         lr, [sp], #4
  00e20	e12fff1e	 bx          lr
  00e24		 |$LN15@Cleanup|
  00e24		 |$LN16@Cleanup|
  00e24	00000000	 DCD         |g_DisplayBlackBaseVirtual|
  00e28		 |$LN17@Cleanup|
  00e28	00000000	 DCD         |g_DisplayBlackBasePhysical|
  00e2c		 |$LN18@Cleanup|
  00e2c	00000000	 DCD         |g_fEnableDMASourceSwap|
  00e30		 |$LN19@Cleanup|
  00e30	00000000	 DCD         |g_DisplayBaseVirtual|
  00e34		 |$LN20@Cleanup|
  00e34	00000000	 DCD         |g_DisplayBasePhysical|
  00e38		 |$LN21@Cleanup|
  00e38	00000000	 DCD         |frameDescriptorCh4_YCbCr_Cr|
  00e3c		 |$LN22@Cleanup|
  00e3c	00000000	 DCD         |frameDescriptorCh3_YCbCr_Cb|
  00e40		 |$LN23@Cleanup|
  00e40	00000000	 DCD         |frameDescriptorCh2_YCbCr_Y|
  00e44		 |$LN24@Cleanup|
  00e44	00000000	 DCD         |gBlackFrameBuffer|
  00e48		 |$LN25@Cleanup|
  00e48	00000000	 DCD         |gFrameBuffer|
  00e4c		 |$LN26@Cleanup|
  00e4c	00000000	 DCD         |v_pGPIORegs|
  00e50		 |$LN27@Cleanup|
  00e50	00000000	 DCD         |v_pLcdRegs|
  00e54		 |$LN28@Cleanup|
  00e54	00000000	 DCD         |v_pClkRegs|
  00e58		 |$M43055|

			 ENDP  ; |Cleanup|

	EXPORT	|DispDrvrPowerHandler|
	IMPORT	|XllpLCDResume|
	IMPORT	|XllpLCDSuspend|

  00030			 AREA	 |.pdata|, PDATA
|$T43076| DCD	|$LN9@DispDrvrPo|
	DCD	0x40003003
; Function compile flags: /Odtp

  00e58			 AREA	 |.text|, CODE, ARM

  00e58		 |DispDrvrPowerHandler| PROC

; 560  : {

  00e58		 |$LN9@DispDrvrPo|
  00e58	e1a0c00d	 mov         r12, sp
  00e5c	e92d0001	 stmdb       sp!, {r0}
  00e60	e92d5000	 stmdb       sp!, {r12, lr}
  00e64		 |$M43073|

; 561  : 
; 562  :     if(bOff)

  00e64	e59d3008	 ldr         r3, [sp, #8]
  00e68	e3530000	 cmp         r3, #0
  00e6c	0a000011	 beq         |$LN4@DispDrvrPo|

; 563  :     {
; 564  : 
; 565  :         if( g_fEnableDMASourceSwap )

  00e70	e59f3098	 ldr         r3, [pc, #0x98]
  00e74	e5933000	 ldr         r3, [r3]
  00e78	e3530000	 cmp         r3, #0
  00e7c	0a000009	 beq         |$LN3@DispDrvrPo|

; 566  :         {
; 567  :             // Before turning off, lets switch out the DMA's source address
; 568  :             // Old source address: FRAME_BUFFER_BASE_PHYSICAL (in virtual land gFrameBuffer)
; 569  :             // New source address: g_DisplayBlackBasePhysical (in virtual land g_DisplayBlackBaseVirtual)
; 570  : 
; 571  :             // So when we go into user idle, GWES keeps writing to the original buffer,
; 572  :             // but DMA updates the LCD with the black buffer
; 573  : 
; 574  :             // Swap the DMA pointer
; 575  :             XllpLCD._FRAME_BUFFER_BASE_PHYSICAL = g_DisplayBlackBasePhysical;

  00e80	e59f308c	 ldr         r3, [pc, #0x8C]
  00e84	e5932000	 ldr         r2, [r3]
  00e88	e59f3074	 ldr         r3, [pc, #0x74]
  00e8c	e5832034	 str         r2, [r3, #0x34]

; 576  :             XllpLCDInit(&XllpLCD);  //Let XllpLCDInit update DMA for us

  00e90	e59f006c	 ldr         r0, [pc, #0x6C]
  00e94	eb000000	 bl          XllpLCDInit

; 577  :             XllpOstDelayMilliSeconds((XLLP_OST_T *)v_pOSTRegs, 1);

  00e98	e3a01001	 mov         r1, #1
  00e9c	e59f3064	 ldr         r3, [pc, #0x64]
  00ea0	e5930000	 ldr         r0, [r3]
  00ea4	eb000000	 bl          XllpOstDelayMilliSeconds
  00ea8		 |$LN3@DispDrvrPo|

; 578  :         }
; 579  : 
; 580  :         XllpLCDSuspend(&XllpLCD, Suspend_Graceful);

  00ea8	e3a01000	 mov         r1, #0
  00eac	e59f0050	 ldr         r0, [pc, #0x50]
  00eb0	eb000000	 bl          XllpLCDSuspend

; 581  :     }
; 582  :     else

  00eb4	ea000010	 b           |$LN2@DispDrvrPo|
  00eb8		 |$LN4@DispDrvrPo|

; 583  :     {
; 584  :         if( g_fEnableDMASourceSwap )

  00eb8	e59f3050	 ldr         r3, [pc, #0x50]
  00ebc	e5933000	 ldr         r3, [r3]
  00ec0	e3530000	 cmp         r3, #0
  00ec4	0a00000a	 beq         |$LN1@DispDrvrPo|

; 585  :         {
; 586  :             // Swap back the DMA pointer
; 587  :             XllpLCD._FRAME_BUFFER_BASE_PHYSICAL = FRAME_BUFFER_BASE_PHYSICAL;

  00ec8	e59f303c	 ldr         r3, [pc, #0x3C]
  00ecc	e5933000	 ldr         r3, [r3]
  00ed0	e2832d12	 add         r2, r3, #0x12, 26
  00ed4	e59f3028	 ldr         r3, [pc, #0x28]
  00ed8	e5832034	 str         r2, [r3, #0x34]

; 588  :             XllpLCDInit(&XllpLCD);

  00edc	e59f0020	 ldr         r0, [pc, #0x20]
  00ee0	eb000000	 bl          XllpLCDInit

; 589  :             XllpOstDelayMilliSeconds((XLLP_OST_T *)v_pOSTRegs, 1);

  00ee4	e3a01001	 mov         r1, #1
  00ee8	e59f3018	 ldr         r3, [pc, #0x18]
  00eec	e5930000	 ldr         r0, [r3]
  00ef0	eb000000	 bl          XllpOstDelayMilliSeconds
  00ef4		 |$LN1@DispDrvrPo|

; 590  :         }
; 591  : 
; 592  :         XllpLCDResume(&XllpLCD);

  00ef4	e59f0008	 ldr         r0, [pc, #8]
  00ef8	eb000000	 bl          XllpLCDResume
  00efc		 |$LN2@DispDrvrPo|

; 593  :     }
; 594  : }

  00efc	e89d6000	 ldmia       sp, {sp, lr}
  00f00	e12fff1e	 bx          lr
  00f04		 |$LN10@DispDrvrPo|
  00f04		 |$LN11@DispDrvrPo|
  00f04	00000000	 DCD         |XllpLCD|
  00f08		 |$LN12@DispDrvrPo|
  00f08	00000000	 DCD         |v_pOSTRegs|
  00f0c		 |$LN13@DispDrvrPo|
  00f0c	00000000	 DCD         |g_DisplayBasePhysical|
  00f10		 |$LN14@DispDrvrPo|
  00f10	00000000	 DCD         |g_fEnableDMASourceSwap|
  00f14		 |$LN15@DispDrvrPo|
  00f14	00000000	 DCD         |g_DisplayBlackBasePhysical|
  00f18		 |$M43074|

			 ENDP  ; |DispDrvrPowerHandler|


  00038			 AREA	 |.pdata|, PDATA
|$T43087| DCD	|$LN10@ClearFrame|
	DCD	0x40003004
; Function compile flags: /Odtp

  00f18			 AREA	 |.text|, CODE, ARM

  00f18		 |ClearFrameBuffer| PROC

; 598  : {

  00f18		 |$LN10@ClearFrame|
  00f18	e1a0c00d	 mov         r12, sp
  00f1c	e92d0003	 stmdb       sp!, {r0, r1}
  00f20	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00f24	e24dd004	 sub         sp, sp, #4
  00f28		 |$M43084|

; 599  :     DWORD i;
; 600  : 
; 601  :     for(i = 0; i < (DispDrvr_cxScreen * DispDrvr_cyScreen * (bpp / 8) / 4); i++)

  00f28	e3a03000	 mov         r3, #0
  00f2c	e58d3000	 str         r3, [sp]
  00f30	ea000002	 b           |$LN5@ClearFrame|
  00f34		 |$LN4@ClearFrame|
  00f34	e59d3000	 ldr         r3, [sp]
  00f38	e2833001	 add         r3, r3, #1
  00f3c	e58d3000	 str         r3, [sp]
  00f40		 |$LN5@ClearFrame|
  00f40	e59f308c	 ldr         r3, [pc, #0x8C]
  00f44	e5932000	 ldr         r2, [r3]
  00f48	e59f3080	 ldr         r3, [pc, #0x80]
  00f4c	e5933000	 ldr         r3, [r3]
  00f50	e0040392	 mul         r4, r2, r3
  00f54	e59f3070	 ldr         r3, [pc, #0x70]
  00f58	e5931000	 ldr         r1, [r3]
  00f5c	e3a00008	 mov         r0, #8
  00f60	eb000000	 bl          __rt_udiv
  00f64	e0010094	 mul         r1, r4, r0
  00f68	e3a00004	 mov         r0, #4
  00f6c	eb000000	 bl          __rt_udiv
  00f70	e59d3000	 ldr         r3, [sp]
  00f74	e1530000	 cmp         r3, r0
  00f78	2a000010	 bcs         |$LN3@ClearFrame|

; 602  :     {
; 603  :         if (color)

  00f7c	e59d3014	 ldr         r3, [sp, #0x14]
  00f80	e3530000	 cmp         r3, #0
  00f84	0a000006	 beq         |$LN2@ClearFrame|

; 604  :         {
; 605  :             *fbp++ = 0xFFFFFFFF;    // Ones turn it white

  00f88	e59d2010	 ldr         r2, [sp, #0x10]
  00f8c	e3e03000	 mvn         r3, #0
  00f90	e5823000	 str         r3, [r2]
  00f94	e59d3010	 ldr         r3, [sp, #0x10]
  00f98	e2833004	 add         r3, r3, #4
  00f9c	e58d3010	 str         r3, [sp, #0x10]

; 606  :         }
; 607  :         else

  00fa0	ea000005	 b           |$LN1@ClearFrame|
  00fa4		 |$LN2@ClearFrame|

; 608  :         {
; 609  :             *fbp++ = 0x00000000;    // Zeros turn it black

  00fa4	e59d2010	 ldr         r2, [sp, #0x10]
  00fa8	e3a03000	 mov         r3, #0
  00fac	e5823000	 str         r3, [r2]
  00fb0	e59d3010	 ldr         r3, [sp, #0x10]
  00fb4	e2833004	 add         r3, r3, #4
  00fb8	e58d3010	 str         r3, [sp, #0x10]
  00fbc		 |$LN1@ClearFrame|

; 610  :         }
; 611  :     }

  00fbc	eaffffdc	 b           |$LN4@ClearFrame|
  00fc0		 |$LN3@ClearFrame|

; 612  : }

  00fc0	e28dd004	 add         sp, sp, #4
  00fc4	e89d6010	 ldmia       sp, {r4, sp, lr}
  00fc8	e12fff1e	 bx          lr
  00fcc		 |$LN11@ClearFrame|
  00fcc		 |$LN12@ClearFrame|
  00fcc	00000000	 DCD         |bpp|
  00fd0		 |$LN13@ClearFrame|
  00fd0	00000000	 DCD         |DispDrvr_cyScreen|
  00fd4		 |$LN14@ClearFrame|
  00fd4	00000000	 DCD         |DispDrvr_cxScreen|
  00fd8		 |$M43085|

			 ENDP  ; |ClearFrameBuffer|

	EXPORT	|DispDrvrContrastControl|

  00040			 AREA	 |.pdata|, PDATA
|$T43097| DCD	|$LN5@DispDrvrCo|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00fd8			 AREA	 |.text|, CODE, ARM

  00fd8		 |DispDrvrContrastControl| PROC

; 623  : {

  00fd8		 |$LN5@DispDrvrCo|
  00fd8	e1a0c00d	 mov         r12, sp
  00fdc	e92d0003	 stmdb       sp!, {r0, r1}
  00fe0	e92d5000	 stmdb       sp!, {r12, lr}
  00fe4	e24dd004	 sub         sp, sp, #4
  00fe8		 |$M43094|

; 624  :     // currently does not support changing contrast in software.
; 625  :     return TRUE;

  00fe8	e3a03001	 mov         r3, #1
  00fec	e58d3000	 str         r3, [sp]

; 626  : }

  00ff0	e59d0000	 ldr         r0, [sp]
  00ff4	e28dd004	 add         sp, sp, #4
  00ff8	e89d6000	 ldmia       sp, {sp, lr}
  00ffc	e12fff1e	 bx          lr
  01000		 |$M43095|

			 ENDP  ; |DispDrvrContrastControl|

	EXPORT	|DirtyRectDumpPortraitLoop_C|
	IMPORT	|dirtyRectDump_core_ASM|

  00048			 AREA	 |.pdata|, PDATA
|$T43105| DCD	|$LN16@DirtyRectD|
	DCD	0x40005a04
; Function compile flags: /Odtp

  01000			 AREA	 |.text|, CODE, ARM

  01000		 |DirtyRectDumpPortraitLoop_C| PROC

; 631  : {

  01000		 |$LN16@DirtyRectD|
  01000	e1a0c00d	 mov         r12, sp
  01004	e92d000f	 stmdb       sp!, {r0 - r3}
  01008	e92d5000	 stmdb       sp!, {r12, lr}
  0100c	e24dd030	 sub         sp, sp, #0x30
  01010		 |$M43102|

; 632  :     DWORD row;
; 633  :     DWORD i;
; 634  :     DWORD j;
; 635  : 
; 636  :     if ( bytesPerPixel != 2 )

  01010	e59d3050	 ldr         r3, [sp, #0x50]
  01014	e3530002	 cmp         r3, #2
  01018	0a000039	 beq         |$LN11@DirtyRectD|

; 637  :     {
; 638  :         //not 16-bit
; 639  :         for (i = 0; i < srcWidthB / bytesPerPixel; i++)

  0101c	e3a03000	 mov         r3, #0
  01020	e58d300c	 str         r3, [sp, #0xC]
  01024	ea000002	 b           |$LN10@DirtyRectD|
  01028		 |$LN9@DirtyRectD|
  01028	e59d300c	 ldr         r3, [sp, #0xC]
  0102c	e2833001	 add         r3, r3, #1
  01030	e58d300c	 str         r3, [sp, #0xC]
  01034		 |$LN10@DirtyRectD|
  01034	e59d1048	 ldr         r1, [sp, #0x48]
  01038	e59d0050	 ldr         r0, [sp, #0x50]
  0103c	eb000000	 bl          __rt_udiv
  01040	e59d300c	 ldr         r3, [sp, #0xC]
  01044	e1530000	 cmp         r3, r0
  01048	2a00002c	 bcs         |$LN8@DirtyRectD|

; 640  :         {
; 641  :             for (row = yTop; row < yBottom; row++)

  0104c	e59d3040	 ldr         r3, [sp, #0x40]
  01050	e58d3010	 str         r3, [sp, #0x10]
  01054	ea000002	 b           |$LN7@DirtyRectD|
  01058		 |$LN6@DirtyRectD|
  01058	e59d3010	 ldr         r3, [sp, #0x10]
  0105c	e2833001	 add         r3, r3, #1
  01060	e58d3010	 str         r3, [sp, #0x10]
  01064		 |$LN7@DirtyRectD|
  01064	e59d2010	 ldr         r2, [sp, #0x10]
  01068	e59d3044	 ldr         r3, [sp, #0x44]
  0106c	e1520003	 cmp         r2, r3
  01070	2a000018	 bcs         |$LN5@DirtyRectD|

; 642  :             {
; 643  :                 for (j = 0; j < bytesPerPixel; j++)

  01074	e3a03000	 mov         r3, #0
  01078	e58d3014	 str         r3, [sp, #0x14]
  0107c	ea000002	 b           |$LN4@DirtyRectD|
  01080		 |$LN3@DirtyRectD|
  01080	e59d3014	 ldr         r3, [sp, #0x14]
  01084	e2833001	 add         r3, r3, #1
  01088	e58d3014	 str         r3, [sp, #0x14]
  0108c		 |$LN4@DirtyRectD|
  0108c	e59d2014	 ldr         r2, [sp, #0x14]
  01090	e59d3050	 ldr         r3, [sp, #0x50]
  01094	e1520003	 cmp         r2, r3
  01098	2a000009	 bcs         |$LN2@DirtyRectD|

; 644  :                 {
; 645  :                     *pDstBuf++ = *(pSrcBuf + j);

  0109c	e59d203c	 ldr         r2, [sp, #0x3C]
  010a0	e59d3014	 ldr         r3, [sp, #0x14]
  010a4	e0823003	 add         r3, r2, r3
  010a8	e5d32000	 ldrb        r2, [r3]
  010ac	e59d3038	 ldr         r3, [sp, #0x38]
  010b0	e5c32000	 strb        r2, [r3]
  010b4	e59d3038	 ldr         r3, [sp, #0x38]
  010b8	e2833001	 add         r3, r3, #1
  010bc	e58d3038	 str         r3, [sp, #0x38]

; 646  :                 }

  010c0	eaffffee	 b           |$LN3@DirtyRectD|
  010c4		 |$LN2@DirtyRectD|

; 647  : 
; 648  :                 pSrcBuf -= bytesPerRow;

  010c4	e59d203c	 ldr         r2, [sp, #0x3C]
  010c8	e59d304c	 ldr         r3, [sp, #0x4C]
  010cc	e0423003	 sub         r3, r2, r3
  010d0	e58d303c	 str         r3, [sp, #0x3C]

; 649  :             }

  010d4	eaffffdf	 b           |$LN6@DirtyRectD|
  010d8		 |$LN5@DirtyRectD|

; 650  : 
; 651  :             pDstBuf += dstMarginWidth;

  010d8	e59d2038	 ldr         r2, [sp, #0x38]
  010dc	e59d3058	 ldr         r3, [sp, #0x58]
  010e0	e0823003	 add         r3, r2, r3
  010e4	e58d3038	 str         r3, [sp, #0x38]

; 652  :             pSrcBuf += srcMarginWidth + 2;

  010e8	e59d3054	 ldr         r3, [sp, #0x54]
  010ec	e2832002	 add         r2, r3, #2
  010f0	e59d303c	 ldr         r3, [sp, #0x3C]
  010f4	e0833002	 add         r3, r3, r2
  010f8	e58d303c	 str         r3, [sp, #0x3C]

; 653  :         }

  010fc	eaffffc9	 b           |$LN9@DirtyRectD|
  01100		 |$LN8@DirtyRectD|

; 654  :     }
; 655  :     else

  01100	ea000015	 b           |$LN1@DirtyRectD|
  01104		 |$LN11@DirtyRectD|

; 656  :     {
; 657  :         WORD * pwDst;
; 658  :         WORD * pwSrc;
; 659  :         int    rowLen;
; 660  : 
; 661  :         //16-bit
; 662  :         srcWidthB >>= 1;

  01104	e59d3048	 ldr         r3, [sp, #0x48]
  01108	e1a030a3	 mov         r3, r3, lsr #1
  0110c	e58d3048	 str         r3, [sp, #0x48]

; 663  : 
; 664  :         pwDst = (WORD *)pDstBuf;

  01110	e59d3038	 ldr         r3, [sp, #0x38]
  01114	e58d301c	 str         r3, [sp, #0x1C]

; 665  :         pwSrc = (WORD *)pSrcBuf;

  01118	e59d303c	 ldr         r3, [sp, #0x3C]
  0111c	e58d3020	 str         r3, [sp, #0x20]

; 666  : 
; 667  :         //first row for pwSrc, then column for pwDst
; 668  :         rowLen = yBottom - yTop;

  01120	e59d2044	 ldr         r2, [sp, #0x44]
  01124	e59d3040	 ldr         r3, [sp, #0x40]
  01128	e0423003	 sub         r3, r2, r3
  0112c	e58d3018	 str         r3, [sp, #0x18]

; 669  : 
; 670  : #ifndef _OPT_ASM
; 671  :         bytesPerRow    >>= 1;
; 672  :         dstMarginWidth >>= 1;
; 673  :         srcMarginWidth >>= 1;
; 674  : 
; 675  :         for (i = 0; i < srcWidthB; i++)
; 676  :         {
; 677  :             for (row = 0; row < (rowLen >> 2); row++)
; 678  :             {
; 679  :                 *pwDst++  = *pwSrc;
; 680  :                 pwSrc    -= bytesPerRow;
; 681  : 
; 682  :                 *pwDst++  = *pwSrc;
; 683  :                 pwSrc    -= bytesPerRow;
; 684  : 
; 685  :                 *pwDst++  = *pwSrc;
; 686  :                 pwSrc    -= bytesPerRow;
; 687  : 
; 688  :                 *pwDst++  = *pwSrc;
; 689  :                 pwSrc    -= bytesPerRow;
; 690  :             }
; 691  : 
; 692  :             for (row = 0; row < (rowLen & 0x3); row++)
; 693  :             {
; 694  :                 *pwDst++  = *pwSrc;
; 695  :                 pwSrc    -= bytesPerRow;
; 696  :             }
; 697  : 
; 698  :             pwDst += dstMarginWidth;
; 699  :             pwSrc += srcMarginWidth + 1;
; 700  :         }
; 701  : #else
; 702  :         dirtyRectDump_core_ASM(pwSrc, pwDst, rowLen, srcWidthB, bytesPerRow, srcMarginWidth, dstMarginWidth);

  01130	e59d3058	 ldr         r3, [sp, #0x58]
  01134	e58d3008	 str         r3, [sp, #8]
  01138	e59d3054	 ldr         r3, [sp, #0x54]
  0113c	e58d3004	 str         r3, [sp, #4]
  01140	e59d304c	 ldr         r3, [sp, #0x4C]
  01144	e58d3000	 str         r3, [sp]
  01148	e59d3048	 ldr         r3, [sp, #0x48]
  0114c	e59d2018	 ldr         r2, [sp, #0x18]
  01150	e59d101c	 ldr         r1, [sp, #0x1C]
  01154	e59d0020	 ldr         r0, [sp, #0x20]
  01158	eb000000	 bl          dirtyRectDump_core_ASM
  0115c		 |$LN1@DirtyRectD|

; 703  : #endif
; 704  :     }
; 705  : }

  0115c	e28dd030	 add         sp, sp, #0x30
  01160	e89d6000	 ldmia       sp, {sp, lr}
  01164	e12fff1e	 bx          lr
  01168		 |$M43103|

			 ENDP  ; |DirtyRectDumpPortraitLoop_C|

	EXPORT	|DispDrvrDirtyRectDump|

  00050			 AREA	 |.pdata|, PDATA
|$T43123| DCD	|$LN15@DispDrvrDi|
	DCD	0x4000a704
; Function compile flags: /Odtp

  01168			 AREA	 |.text|, CODE, ARM

  01168		 |DispDrvrDirtyRectDump| PROC

; 708  : {

  01168		 |$LN15@DispDrvrDi|
  01168	e1a0c00d	 mov         r12, sp
  0116c	e92d0001	 stmdb       sp!, {r0}
  01170	e92d5000	 stmdb       sp!, {r12, lr}
  01174	e24dd06c	 sub         sp, sp, #0x6C
  01178		 |$M43120|

; 709  :     BYTE  * pDstBuf;
; 710  :     BYTE  * pSrcBuf;
; 711  :     DWORD   xLeft;
; 712  :     DWORD   yTop;
; 713  :     DWORD   xRight;
; 714  :     DWORD   yBottom;
; 715  :     DWORD   bytesPerRow;
; 716  :     DWORD   bytesPerPixel;
; 717  :     DWORD   srcWidthB;
; 718  :     DWORD   srcMarginWidth;
; 719  :     DWORD   dstMarginWidth;
; 720  :     DWORD   srcStartRow;
; 721  :     DWORD   dstStartRow;
; 722  : 
; 723  :     bytesPerPixel = bpp / 8;

  01178	e59f3280	 ldr         r3, [pc, #0x280]
  0117c	e5931000	 ldr         r1, [r3]
  01180	e3a00008	 mov         r0, #8
  01184	eb000000	 bl          __rt_udiv
  01188	e58d002c	 str         r0, [sp, #0x2C]

; 724  : 
; 725  :     xLeft   = prc->left   < 0                    ? 0                 : prc->left;

  0118c	e59d3074	 ldr         r3, [sp, #0x74]
  01190	e5933000	 ldr         r3, [r3]
  01194	e3530000	 cmp         r3, #0
  01198	aa000002	 bge         |$LN5@DispDrvrDi|
  0119c	e3a03000	 mov         r3, #0
  011a0	e58d305c	 str         r3, [sp, #0x5C]
  011a4	ea000002	 b           |$LN6@DispDrvrDi|
  011a8		 |$LN5@DispDrvrDi|
  011a8	e59d3074	 ldr         r3, [sp, #0x74]
  011ac	e5933000	 ldr         r3, [r3]
  011b0	e58d305c	 str         r3, [sp, #0x5C]
  011b4		 |$LN6@DispDrvrDi|
  011b4	e59d305c	 ldr         r3, [sp, #0x5C]
  011b8	e58d3024	 str         r3, [sp, #0x24]

; 726  :     yTop    = prc->top    < 0                    ? 0                 : prc->top;

  011bc	e59d3074	 ldr         r3, [sp, #0x74]
  011c0	e2833004	 add         r3, r3, #4
  011c4	e5933000	 ldr         r3, [r3]
  011c8	e3530000	 cmp         r3, #0
  011cc	aa000002	 bge         |$LN7@DispDrvrDi|
  011d0	e3a03000	 mov         r3, #0
  011d4	e58d3060	 str         r3, [sp, #0x60]
  011d8	ea000003	 b           |$LN8@DispDrvrDi|
  011dc		 |$LN7@DispDrvrDi|
  011dc	e59d3074	 ldr         r3, [sp, #0x74]
  011e0	e2833004	 add         r3, r3, #4
  011e4	e5933000	 ldr         r3, [r3]
  011e8	e58d3060	 str         r3, [sp, #0x60]
  011ec		 |$LN8@DispDrvrDi|
  011ec	e59d3060	 ldr         r3, [sp, #0x60]
  011f0	e58d3020	 str         r3, [sp, #0x20]

; 727  :     xRight  = prc->right  > DispDrvr_cxScreen    ? DispDrvr_cxScreen : prc->right;

  011f4	e59d3074	 ldr         r3, [sp, #0x74]
  011f8	e2833008	 add         r3, r3, #8
  011fc	e5932000	 ldr         r2, [r3]
  01200	e59f31f4	 ldr         r3, [pc, #0x1F4]
  01204	e5933000	 ldr         r3, [r3]
  01208	e1520003	 cmp         r2, r3
  0120c	da000003	 ble         |$LN9@DispDrvrDi|
  01210	e59f31e4	 ldr         r3, [pc, #0x1E4]
  01214	e5933000	 ldr         r3, [r3]
  01218	e58d3064	 str         r3, [sp, #0x64]
  0121c	ea000003	 b           |$LN10@DispDrvrDi|
  01220		 |$LN9@DispDrvrDi|
  01220	e59d3074	 ldr         r3, [sp, #0x74]
  01224	e2833008	 add         r3, r3, #8
  01228	e5933000	 ldr         r3, [r3]
  0122c	e58d3064	 str         r3, [sp, #0x64]
  01230		 |$LN10@DispDrvrDi|
  01230	e59d3064	 ldr         r3, [sp, #0x64]
  01234	e58d3038	 str         r3, [sp, #0x38]

; 728  :     yBottom = prc->bottom > DispDrvr_cyScreen    ? DispDrvr_cyScreen : prc->bottom;

  01238	e59d3074	 ldr         r3, [sp, #0x74]
  0123c	e283300c	 add         r3, r3, #0xC
  01240	e5932000	 ldr         r2, [r3]
  01244	e59f31a8	 ldr         r3, [pc, #0x1A8]
  01248	e5933000	 ldr         r3, [r3]
  0124c	e1520003	 cmp         r2, r3
  01250	da000003	 ble         |$LN11@DispDrvrDi|
  01254	e59f3198	 ldr         r3, [pc, #0x198]
  01258	e5933000	 ldr         r3, [r3]
  0125c	e58d3068	 str         r3, [sp, #0x68]
  01260	ea000003	 b           |$LN12@DispDrvrDi|
  01264		 |$LN11@DispDrvrDi|
  01264	e59d3074	 ldr         r3, [sp, #0x74]
  01268	e283300c	 add         r3, r3, #0xC
  0126c	e5933000	 ldr         r3, [r3]
  01270	e58d3068	 str         r3, [sp, #0x68]
  01274		 |$LN12@DispDrvrDi|
  01274	e59d3068	 ldr         r3, [sp, #0x68]
  01278	e58d3040	 str         r3, [sp, #0x40]

; 729  : 
; 730  :     if ((LONG)xLeft >= (LONG)xRight || (LONG)yTop >= (LONG)yBottom)

  0127c	e59d2024	 ldr         r2, [sp, #0x24]
  01280	e59d3038	 ldr         r3, [sp, #0x38]
  01284	e1520003	 cmp         r2, r3
  01288	aa000003	 bge         |$LN1@DispDrvrDi|
  0128c	e59d2020	 ldr         r2, [sp, #0x20]
  01290	e59d3040	 ldr         r3, [sp, #0x40]
  01294	e1520003	 cmp         r2, r3
  01298	ba000000	 blt         |$LN2@DispDrvrDi|
  0129c		 |$LN1@DispDrvrDi|

; 731  :     {
; 732  :         return;

  0129c	ea00004f	 b           |$LN3@DispDrvrDi|
  012a0		 |$LN2@DispDrvrDi|

; 733  :     }
; 734  : 
; 735  :     xLeft       *= bytesPerPixel;

  012a0	e59d2024	 ldr         r2, [sp, #0x24]
  012a4	e59d302c	 ldr         r3, [sp, #0x2C]
  012a8	e0030392	 mul         r3, r2, r3
  012ac	e58d3024	 str         r3, [sp, #0x24]

; 736  :     xRight      *= bytesPerPixel;

  012b0	e59d2038	 ldr         r2, [sp, #0x38]
  012b4	e59d302c	 ldr         r3, [sp, #0x2C]
  012b8	e0030392	 mul         r3, r2, r3
  012bc	e58d3038	 str         r3, [sp, #0x38]

; 737  :     bytesPerRow  = DispDrvr_cxScreen * bytesPerPixel;

  012c0	e59f3134	 ldr         r3, [pc, #0x134]
  012c4	e5932000	 ldr         r2, [r3]
  012c8	e59d302c	 ldr         r3, [sp, #0x2C]
  012cc	e0030392	 mul         r3, r2, r3
  012d0	e58d303c	 str         r3, [sp, #0x3C]

; 738  : 
; 739  :     srcWidthB      = xRight - xLeft;

  012d4	e59d2038	 ldr         r2, [sp, #0x38]
  012d8	e59d3024	 ldr         r3, [sp, #0x24]
  012dc	e0423003	 sub         r3, r2, r3
  012e0	e58d3034	 str         r3, [sp, #0x34]

; 740  :     srcStartRow    = (yBottom - 1) * bytesPerRow;

  012e4	e59d3040	 ldr         r3, [sp, #0x40]
  012e8	e2432001	 sub         r2, r3, #1
  012ec	e59d303c	 ldr         r3, [sp, #0x3C]
  012f0	e0030392	 mul         r3, r2, r3
  012f4	e58d3028	 str         r3, [sp, #0x28]

; 741  :     srcMarginWidth = (yBottom - yTop) * bytesPerRow;

  012f8	e59d2040	 ldr         r2, [sp, #0x40]
  012fc	e59d3020	 ldr         r3, [sp, #0x20]
  01300	e0422003	 sub         r2, r2, r3
  01304	e59d303c	 ldr         r3, [sp, #0x3C]
  01308	e0030392	 mul         r3, r2, r3
  0130c	e58d3018	 str         r3, [sp, #0x18]

; 742  :     dstStartRow    = xLeft * DispDrvr_cyScreen;

  01310	e59d2024	 ldr         r2, [sp, #0x24]
  01314	e59f30d8	 ldr         r3, [pc, #0xD8]
  01318	e5933000	 ldr         r3, [r3]
  0131c	e0030392	 mul         r3, r2, r3
  01320	e58d3044	 str         r3, [sp, #0x44]

; 743  :     dstMarginWidth = (DispDrvr_cyScreen - (yBottom - yTop)) * bytesPerPixel;

  01324	e59d2040	 ldr         r2, [sp, #0x40]
  01328	e59d3020	 ldr         r3, [sp, #0x20]
  0132c	e0422003	 sub         r2, r2, r3
  01330	e59f30bc	 ldr         r3, [pc, #0xBC]
  01334	e5933000	 ldr         r3, [r3]
  01338	e0432002	 sub         r2, r3, r2
  0133c	e59d302c	 ldr         r3, [sp, #0x2C]
  01340	e0030392	 mul         r3, r2, r3
  01344	e58d3030	 str         r3, [sp, #0x30]

; 744  :     pDstBuf        = gFrameBuffer + dstStartRow + (DispDrvr_cyScreen - yBottom) * bytesPerPixel;

  01348	e59f30a8	 ldr         r3, [pc, #0xA8]
  0134c	e5932000	 ldr         r2, [r3]
  01350	e59d3044	 ldr         r3, [sp, #0x44]
  01354	e0821003	 add         r1, r2, r3
  01358	e59f3094	 ldr         r3, [pc, #0x94]
  0135c	e5932000	 ldr         r2, [r3]
  01360	e59d3040	 ldr         r3, [sp, #0x40]
  01364	e0422003	 sub         r2, r2, r3
  01368	e59d302c	 ldr         r3, [sp, #0x2C]
  0136c	e0030392	 mul         r3, r2, r3
  01370	e0813003	 add         r3, r1, r3
  01374	e58d301c	 str         r3, [sp, #0x1C]

; 745  : 
; 746  :     pSrcBuf = gDibBuffer + srcStartRow + xLeft;

  01378	e59f3070	 ldr         r3, [pc, #0x70]
  0137c	e5932000	 ldr         r2, [r3]
  01380	e59d3028	 ldr         r3, [sp, #0x28]
  01384	e0822003	 add         r2, r2, r3
  01388	e59d3024	 ldr         r3, [sp, #0x24]
  0138c	e0823003	 add         r3, r2, r3
  01390	e58d3014	 str         r3, [sp, #0x14]

; 747  : 
; 748  :     EnterCriticalSection(&displayMutex);

  01394	e59f0050	 ldr         r0, [pc, #0x50]
  01398	eb000000	 bl          EnterCriticalSection

; 749  : 
; 750  :     DirtyRectDumpPortraitLoop_C(pDstBuf, pSrcBuf, yTop, yBottom, srcWidthB, bytesPerRow,
; 751  :                                 bytesPerPixel, srcMarginWidth, dstMarginWidth);

  0139c	e59d3030	 ldr         r3, [sp, #0x30]
  013a0	e58d3010	 str         r3, [sp, #0x10]
  013a4	e59d3018	 ldr         r3, [sp, #0x18]
  013a8	e58d300c	 str         r3, [sp, #0xC]
  013ac	e59d302c	 ldr         r3, [sp, #0x2C]
  013b0	e58d3008	 str         r3, [sp, #8]
  013b4	e59d303c	 ldr         r3, [sp, #0x3C]
  013b8	e58d3004	 str         r3, [sp, #4]
  013bc	e59d3034	 ldr         r3, [sp, #0x34]
  013c0	e58d3000	 str         r3, [sp]
  013c4	e59d3040	 ldr         r3, [sp, #0x40]
  013c8	e59d2020	 ldr         r2, [sp, #0x20]
  013cc	e59d1014	 ldr         r1, [sp, #0x14]
  013d0	e59d001c	 ldr         r0, [sp, #0x1C]
  013d4	eb000000	 bl          DirtyRectDumpPortraitLoop_C

; 752  : 
; 753  :     LeaveCriticalSection(&displayMutex);

  013d8	e59f000c	 ldr         r0, [pc, #0xC]
  013dc	eb000000	 bl          LeaveCriticalSection
  013e0		 |$LN3@DispDrvrDi|

; 754  : }

  013e0	e28dd06c	 add         sp, sp, #0x6C
  013e4	e89d6000	 ldmia       sp, {sp, lr}
  013e8	e12fff1e	 bx          lr
  013ec		 |$LN16@DispDrvrDi|
  013ec		 |$LN17@DispDrvrDi|
  013ec	00000000	 DCD         |displayMutex|
  013f0		 |$LN18@DispDrvrDi|
  013f0	00000000	 DCD         |gDibBuffer|
  013f4		 |$LN19@DispDrvrDi|
  013f4	00000000	 DCD         |DispDrvr_cyScreen|
  013f8		 |$LN20@DispDrvrDi|
  013f8	00000000	 DCD         |gFrameBuffer|
  013fc		 |$LN21@DispDrvrDi|
  013fc	00000000	 DCD         |DispDrvr_cxScreen|
  01400		 |$LN22@DispDrvrDi|
  01400	00000000	 DCD         |bpp|
  01404		 |$M43121|

			 ENDP  ; |DispDrvrDirtyRectDump|

	EXPORT	|DirtyRectDumpPortraitLoop_C_rectfill|

  00058			 AREA	 |.pdata|, PDATA
|$T43135| DCD	|$LN14@DirtyRectD@2|
	DCD	0x40006204
; Function compile flags: /Odtp

  01404			 AREA	 |.text|, CODE, ARM

  01404		 |DirtyRectDumpPortraitLoop_C_rectfill| PROC

; 758  : {

  01404		 |$LN14@DirtyRectD@2|
  01404	e1a0c00d	 mov         r12, sp
  01408	e92d000f	 stmdb       sp!, {r0 - r3}
  0140c	e92d5000	 stmdb       sp!, {r12, lr}
  01410	e24dd010	 sub         sp, sp, #0x10
  01414		 |$M43132|

; 759  :     DWORD   row;
; 760  :     DWORD   i;
; 761  :     WORD  * pwDst;
; 762  :     WORD    rowLen;
; 763  : 
; 764  :     //16-bit
; 765  :     srcWidthB >>= 1;

  01414	e59d3028	 ldr         r3, [sp, #0x28]
  01418	e1a030a3	 mov         r3, r3, lsr #1
  0141c	e58d3028	 str         r3, [sp, #0x28]

; 766  :     pwDst       = (WORD *)pDstBuf;

  01420	e59d3018	 ldr         r3, [sp, #0x18]
  01424	e58d3004	 str         r3, [sp, #4]

; 767  : 
; 768  :     //first row for pwSrc, then column for pwDst
; 769  :     rowLen = (WORD)(yBottom - yTop);

  01428	e59d2024	 ldr         r2, [sp, #0x24]
  0142c	e59d3020	 ldr         r3, [sp, #0x20]
  01430	e0423003	 sub         r3, r2, r3
  01434	e1a03803	 mov         r3, r3, lsl #16
  01438	e1a03823	 mov         r3, r3, lsr #16
  0143c	e1cd30b0	 strh        r3, [sp]

; 770  : 
; 771  :     bytesPerRow    >>= 1;

  01440	e59d302c	 ldr         r3, [sp, #0x2C]
  01444	e1a030a3	 mov         r3, r3, lsr #1
  01448	e58d302c	 str         r3, [sp, #0x2C]

; 772  :     dstMarginWidth >>= 1;

  0144c	e59d3038	 ldr         r3, [sp, #0x38]
  01450	e1a030a3	 mov         r3, r3, lsr #1
  01454	e58d3038	 str         r3, [sp, #0x38]

; 773  :     srcMarginWidth >>= 1;

  01458	e59d3034	 ldr         r3, [sp, #0x34]
  0145c	e1a030a3	 mov         r3, r3, lsr #1
  01460	e58d3034	 str         r3, [sp, #0x34]

; 774  : 
; 775  :     for (i = 0; i < srcWidthB; i++)

  01464	e3a03000	 mov         r3, #0
  01468	e58d3008	 str         r3, [sp, #8]
  0146c	ea000002	 b           |$LN9@DirtyRectD@2|
  01470		 |$LN8@DirtyRectD@2|
  01470	e59d3008	 ldr         r3, [sp, #8]
  01474	e2833001	 add         r3, r3, #1
  01478	e58d3008	 str         r3, [sp, #8]
  0147c		 |$LN9@DirtyRectD@2|
  0147c	e59d2008	 ldr         r2, [sp, #8]
  01480	e59d3028	 ldr         r3, [sp, #0x28]
  01484	e1520003	 cmp         r2, r3
  01488	2a00003c	 bcs         |$LN7@DirtyRectD@2|

; 776  :     {
; 777  :         for (row = 0; row < (DWORD)(rowLen >> 2); row++)

  0148c	e3a03000	 mov         r3, #0
  01490	e58d300c	 str         r3, [sp, #0xC]
  01494	ea000002	 b           |$LN6@DirtyRectD@2|
  01498		 |$LN5@DirtyRectD@2|
  01498	e59d300c	 ldr         r3, [sp, #0xC]
  0149c	e2833001	 add         r3, r3, #1
  014a0	e58d300c	 str         r3, [sp, #0xC]
  014a4		 |$LN6@DirtyRectD@2|
  014a4	e1dd30b0	 ldrh        r3, [sp]
  014a8	e1a02143	 mov         r2, r3, asr #2
  014ac	e59d300c	 ldr         r3, [sp, #0xC]
  014b0	e1530002	 cmp         r3, r2
  014b4	2a000018	 bcs         |$LN4@DirtyRectD@2|

; 778  :         {
; 779  :             *pwDst++ = srcColor;

  014b8	e1dd21bc	 ldrh        r2, [sp, #0x1C]
  014bc	e59d3004	 ldr         r3, [sp, #4]
  014c0	e1c320b0	 strh        r2, [r3]
  014c4	e59d3004	 ldr         r3, [sp, #4]
  014c8	e2833002	 add         r3, r3, #2
  014cc	e58d3004	 str         r3, [sp, #4]

; 780  :             *pwDst++ = srcColor;

  014d0	e1dd21bc	 ldrh        r2, [sp, #0x1C]
  014d4	e59d3004	 ldr         r3, [sp, #4]
  014d8	e1c320b0	 strh        r2, [r3]
  014dc	e59d3004	 ldr         r3, [sp, #4]
  014e0	e2833002	 add         r3, r3, #2
  014e4	e58d3004	 str         r3, [sp, #4]

; 781  :             *pwDst++ = srcColor;

  014e8	e1dd21bc	 ldrh        r2, [sp, #0x1C]
  014ec	e59d3004	 ldr         r3, [sp, #4]
  014f0	e1c320b0	 strh        r2, [r3]
  014f4	e59d3004	 ldr         r3, [sp, #4]
  014f8	e2833002	 add         r3, r3, #2
  014fc	e58d3004	 str         r3, [sp, #4]

; 782  :             *pwDst++ = srcColor;

  01500	e1dd21bc	 ldrh        r2, [sp, #0x1C]
  01504	e59d3004	 ldr         r3, [sp, #4]
  01508	e1c320b0	 strh        r2, [r3]
  0150c	e59d3004	 ldr         r3, [sp, #4]
  01510	e2833002	 add         r3, r3, #2
  01514	e58d3004	 str         r3, [sp, #4]

; 783  :         }

  01518	eaffffde	 b           |$LN5@DirtyRectD@2|
  0151c		 |$LN4@DirtyRectD@2|

; 784  : 
; 785  :         for (row = 0; row < (DWORD)(rowLen & 0x3); row++)

  0151c	e3a03000	 mov         r3, #0
  01520	e58d300c	 str         r3, [sp, #0xC]
  01524	ea000002	 b           |$LN3@DirtyRectD@2|
  01528		 |$LN2@DirtyRectD@2|
  01528	e59d300c	 ldr         r3, [sp, #0xC]
  0152c	e2833001	 add         r3, r3, #1
  01530	e58d300c	 str         r3, [sp, #0xC]
  01534		 |$LN3@DirtyRectD@2|
  01534	e1dd30b0	 ldrh        r3, [sp]
  01538	e2032003	 and         r2, r3, #3
  0153c	e59d300c	 ldr         r3, [sp, #0xC]
  01540	e1530002	 cmp         r3, r2
  01544	2a000006	 bcs         |$LN1@DirtyRectD@2|

; 786  :         {
; 787  :             *pwDst++ = srcColor;

  01548	e1dd21bc	 ldrh        r2, [sp, #0x1C]
  0154c	e59d3004	 ldr         r3, [sp, #4]
  01550	e1c320b0	 strh        r2, [r3]
  01554	e59d3004	 ldr         r3, [sp, #4]
  01558	e2833002	 add         r3, r3, #2
  0155c	e58d3004	 str         r3, [sp, #4]

; 788  :         }

  01560	eafffff0	 b           |$LN2@DirtyRectD@2|
  01564		 |$LN1@DirtyRectD@2|

; 789  : 
; 790  :         pwDst += dstMarginWidth;

  01564	e59d1038	 ldr         r1, [sp, #0x38]
  01568	e3a03002	 mov         r3, #2
  0156c	e0020391	 mul         r2, r1, r3
  01570	e59d3004	 ldr         r3, [sp, #4]
  01574	e0833002	 add         r3, r3, r2
  01578	e58d3004	 str         r3, [sp, #4]

; 791  :     }

  0157c	eaffffbb	 b           |$LN8@DirtyRectD@2|
  01580		 |$LN7@DirtyRectD@2|

; 792  : }

  01580	e28dd010	 add         sp, sp, #0x10
  01584	e89d6000	 ldmia       sp, {sp, lr}
  01588	e12fff1e	 bx          lr
  0158c		 |$M43133|

			 ENDP  ; |DirtyRectDumpPortraitLoop_C_rectfill|

	EXPORT	|DispDrvrDirtyRectDump_rectfill|

  00060			 AREA	 |.pdata|, PDATA
|$T43153| DCD	|$LN15@DispDrvrDi@2|
	DCD	0x4000c104
; Function compile flags: /Odtp

  0158c			 AREA	 |.text|, CODE, ARM

  0158c		 |DispDrvrDirtyRectDump_rectfill| PROC

; 795  : {

  0158c		 |$LN15@DispDrvrDi@2|
  0158c	e1a0c00d	 mov         r12, sp
  01590	e92d0003	 stmdb       sp!, {r0, r1}
  01594	e92d5000	 stmdb       sp!, {r12, lr}
  01598	e24dd07c	 sub         sp, sp, #0x7C
  0159c		 |$M43150|

; 796  :     BYTE  * pDstBuf;
; 797  :     BYTE  * pSrcBuf;
; 798  :     WORD    srcColor = (WORD)color;

  0159c	e59d3088	 ldr         r3, [sp, #0x88]
  015a0	e1a03803	 mov         r3, r3, lsl #16
  015a4	e1a03823	 mov         r3, r3, lsr #16
  015a8	e1cd32bc	 strh        r3, [sp, #0x2C]

; 799  :     DWORD   xLeft;
; 800  :     DWORD   yTop;
; 801  :     DWORD   xRight;
; 802  :     DWORD   yBottom;
; 803  :     DWORD   bytesPerRow;
; 804  :     DWORD   bytesPerPixel;
; 805  :     DWORD   srcWidthB;
; 806  :     DWORD   srcMarginWidth;
; 807  :     DWORD   dstMarginWidth;
; 808  :     DWORD   srcStartRow;
; 809  :     DWORD   dstStartRow;
; 810  :     DWORD   srcMarginWidth2;
; 811  :     DWORD   dstMarginWidth2;
; 812  :     DWORD   dstStep;
; 813  : 
; 814  :     bytesPerPixel = bpp / 8;

  015ac	e59f32d8	 ldr         r3, [pc, #0x2D8]
  015b0	e5931000	 ldr         r1, [r3]
  015b4	e3a00008	 mov         r0, #8
  015b8	eb000000	 bl          __rt_udiv
  015bc	e58d0034	 str         r0, [sp, #0x34]

; 815  : 
; 816  :     xLeft   = prc->left   < 0                    ? 0                 : prc->left;

  015c0	e59d3084	 ldr         r3, [sp, #0x84]
  015c4	e5933000	 ldr         r3, [r3]
  015c8	e3530000	 cmp         r3, #0
  015cc	aa000002	 bge         |$LN5@DispDrvrDi@2|
  015d0	e3a03000	 mov         r3, #0
  015d4	e58d306c	 str         r3, [sp, #0x6C]
  015d8	ea000002	 b           |$LN6@DispDrvrDi@2|
  015dc		 |$LN5@DispDrvrDi@2|
  015dc	e59d3084	 ldr         r3, [sp, #0x84]
  015e0	e5933000	 ldr         r3, [r3]
  015e4	e58d306c	 str         r3, [sp, #0x6C]
  015e8		 |$LN6@DispDrvrDi@2|
  015e8	e59d306c	 ldr         r3, [sp, #0x6C]
  015ec	e58d3028	 str         r3, [sp, #0x28]

; 817  :     yTop    = prc->top    < 0                    ? 0                 : prc->top;

  015f0	e59d3084	 ldr         r3, [sp, #0x84]
  015f4	e2833004	 add         r3, r3, #4
  015f8	e5933000	 ldr         r3, [r3]
  015fc	e3530000	 cmp         r3, #0
  01600	aa000002	 bge         |$LN7@DispDrvrDi@2|
  01604	e3a03000	 mov         r3, #0
  01608	e58d3070	 str         r3, [sp, #0x70]
  0160c	ea000003	 b           |$LN8@DispDrvrDi@2|
  01610		 |$LN7@DispDrvrDi@2|
  01610	e59d3084	 ldr         r3, [sp, #0x84]
  01614	e2833004	 add         r3, r3, #4
  01618	e5933000	 ldr         r3, [r3]
  0161c	e58d3070	 str         r3, [sp, #0x70]
  01620		 |$LN8@DispDrvrDi@2|
  01620	e59d3070	 ldr         r3, [sp, #0x70]
  01624	e58d3024	 str         r3, [sp, #0x24]

; 818  :     xRight  = prc->right  > DispDrvr_cxScreen    ? DispDrvr_cxScreen : prc->right;

  01628	e59d3084	 ldr         r3, [sp, #0x84]
  0162c	e2833008	 add         r3, r3, #8
  01630	e5932000	 ldr         r2, [r3]
  01634	e59f3244	 ldr         r3, [pc, #0x244]
  01638	e5933000	 ldr         r3, [r3]
  0163c	e1520003	 cmp         r2, r3
  01640	da000003	 ble         |$LN9@DispDrvrDi@2|
  01644	e59f3234	 ldr         r3, [pc, #0x234]
  01648	e5933000	 ldr         r3, [r3]
  0164c	e58d3074	 str         r3, [sp, #0x74]
  01650	ea000003	 b           |$LN10@DispDrvrDi@2|
  01654		 |$LN9@DispDrvrDi@2|
  01654	e59d3084	 ldr         r3, [sp, #0x84]
  01658	e2833008	 add         r3, r3, #8
  0165c	e5933000	 ldr         r3, [r3]
  01660	e58d3074	 str         r3, [sp, #0x74]
  01664		 |$LN10@DispDrvrDi@2|
  01664	e59d3074	 ldr         r3, [sp, #0x74]
  01668	e58d3044	 str         r3, [sp, #0x44]

; 819  :     yBottom = prc->bottom > DispDrvr_cyScreen    ? DispDrvr_cyScreen : prc->bottom;

  0166c	e59d3084	 ldr         r3, [sp, #0x84]
  01670	e283300c	 add         r3, r3, #0xC
  01674	e5932000	 ldr         r2, [r3]
  01678	e59f3204	 ldr         r3, [pc, #0x204]
  0167c	e5933000	 ldr         r3, [r3]
  01680	e1520003	 cmp         r2, r3
  01684	da000003	 ble         |$LN11@DispDrvrDi@2|
  01688	e59f31f4	 ldr         r3, [pc, #0x1F4]
  0168c	e5933000	 ldr         r3, [r3]
  01690	e58d3078	 str         r3, [sp, #0x78]
  01694	ea000003	 b           |$LN12@DispDrvrDi@2|
  01698		 |$LN11@DispDrvrDi@2|
  01698	e59d3084	 ldr         r3, [sp, #0x84]
  0169c	e283300c	 add         r3, r3, #0xC
  016a0	e5933000	 ldr         r3, [r3]
  016a4	e58d3078	 str         r3, [sp, #0x78]
  016a8		 |$LN12@DispDrvrDi@2|
  016a8	e59d3078	 ldr         r3, [sp, #0x78]
  016ac	e58d3050	 str         r3, [sp, #0x50]

; 820  : 
; 821  :     if ((LONG)xLeft >= (LONG)xRight || (LONG)yTop >= (LONG)yBottom)

  016b0	e59d2028	 ldr         r2, [sp, #0x28]
  016b4	e59d3044	 ldr         r3, [sp, #0x44]
  016b8	e1520003	 cmp         r2, r3
  016bc	aa000003	 bge         |$LN1@DispDrvrDi@2|
  016c0	e59d2024	 ldr         r2, [sp, #0x24]
  016c4	e59d3050	 ldr         r3, [sp, #0x50]
  016c8	e1520003	 cmp         r2, r3
  016cc	ba000000	 blt         |$LN2@DispDrvrDi@2|
  016d0		 |$LN1@DispDrvrDi@2|

; 822  :     {
; 823  :         return;

  016d0	ea000065	 b           |$LN3@DispDrvrDi@2|
  016d4		 |$LN2@DispDrvrDi@2|

; 824  :     }
; 825  : 
; 826  :     xLeft       *= bytesPerPixel;

  016d4	e59d2028	 ldr         r2, [sp, #0x28]
  016d8	e59d3034	 ldr         r3, [sp, #0x34]
  016dc	e0030392	 mul         r3, r2, r3
  016e0	e58d3028	 str         r3, [sp, #0x28]

; 827  :     xRight      *= bytesPerPixel;

  016e4	e59d2044	 ldr         r2, [sp, #0x44]
  016e8	e59d3034	 ldr         r3, [sp, #0x34]
  016ec	e0030392	 mul         r3, r2, r3
  016f0	e58d3044	 str         r3, [sp, #0x44]

; 828  :     bytesPerRow  = DispDrvr_cxScreen * bytesPerPixel;

  016f4	e59f3184	 ldr         r3, [pc, #0x184]
  016f8	e5932000	 ldr         r2, [r3]
  016fc	e59d3034	 ldr         r3, [sp, #0x34]
  01700	e0030392	 mul         r3, r2, r3
  01704	e58d304c	 str         r3, [sp, #0x4C]

; 829  : 
; 830  :     srcWidthB       = xRight - xLeft;

  01708	e59d2044	 ldr         r2, [sp, #0x44]
  0170c	e59d3028	 ldr         r3, [sp, #0x28]
  01710	e0423003	 sub         r3, r2, r3
  01714	e58d3040	 str         r3, [sp, #0x40]

; 831  :     srcStartRow     = (yBottom - 1) * bytesPerRow;

  01718	e59d3050	 ldr         r3, [sp, #0x50]
  0171c	e2432001	 sub         r2, r3, #1
  01720	e59d304c	 ldr         r3, [sp, #0x4C]
  01724	e0030392	 mul         r3, r2, r3
  01728	e58d3030	 str         r3, [sp, #0x30]

; 832  :     srcMarginWidth  = (yBottom - yTop) * bytesPerRow;

  0172c	e59d2050	 ldr         r2, [sp, #0x50]
  01730	e59d3024	 ldr         r3, [sp, #0x24]
  01734	e0422003	 sub         r2, r2, r3
  01738	e59d304c	 ldr         r3, [sp, #0x4C]
  0173c	e0030392	 mul         r3, r2, r3
  01740	e58d301c	 str         r3, [sp, #0x1C]

; 833  :     dstStartRow     = xLeft * DispDrvr_cyScreen;

  01744	e59d2028	 ldr         r2, [sp, #0x28]
  01748	e59f3134	 ldr         r3, [pc, #0x134]
  0174c	e5933000	 ldr         r3, [r3]
  01750	e0030392	 mul         r3, r2, r3
  01754	e58d3054	 str         r3, [sp, #0x54]

; 834  :     dstMarginWidth  = (DispDrvr_cyScreen - (yBottom - yTop)) * bytesPerPixel;

  01758	e59d2050	 ldr         r2, [sp, #0x50]
  0175c	e59d3024	 ldr         r3, [sp, #0x24]
  01760	e0422003	 sub         r2, r2, r3
  01764	e59f3118	 ldr         r3, [pc, #0x118]
  01768	e5933000	 ldr         r3, [r3]
  0176c	e0432002	 sub         r2, r3, r2
  01770	e59d3034	 ldr         r3, [sp, #0x34]
  01774	e0030392	 mul         r3, r2, r3
  01778	e58d303c	 str         r3, [sp, #0x3C]

; 835  :     pDstBuf         = gFrameBuffer + dstStartRow + (DispDrvr_cyScreen -yBottom) * bytesPerPixel;

  0177c	e59f3104	 ldr         r3, [pc, #0x104]
  01780	e5932000	 ldr         r2, [r3]
  01784	e59d3054	 ldr         r3, [sp, #0x54]
  01788	e0821003	 add         r1, r2, r3
  0178c	e59f30f0	 ldr         r3, [pc, #0xF0]
  01790	e5932000	 ldr         r2, [r3]
  01794	e59d3050	 ldr         r3, [sp, #0x50]
  01798	e0422003	 sub         r2, r2, r3
  0179c	e59d3034	 ldr         r3, [sp, #0x34]
  017a0	e0030392	 mul         r3, r2, r3
  017a4	e0813003	 add         r3, r1, r3
  017a8	e58d3020	 str         r3, [sp, #0x20]

; 836  :     dstStep         = DispDrvr_cyScreen * bytesPerPixel; //portrait frame buffer step

  017ac	e59f30d0	 ldr         r3, [pc, #0xD0]
  017b0	e5932000	 ldr         r2, [r3]
  017b4	e59d3034	 ldr         r3, [sp, #0x34]
  017b8	e0030392	 mul         r3, r2, r3
  017bc	e58d3014	 str         r3, [sp, #0x14]

; 837  :     srcMarginWidth2 = DispDrvr_cxScreen * bytesPerPixel + (xRight - xLeft);

  017c0	e59f30b8	 ldr         r3, [pc, #0xB8]
  017c4	e5932000	 ldr         r2, [r3]
  017c8	e59d3034	 ldr         r3, [sp, #0x34]
  017cc	e0010392	 mul         r1, r2, r3
  017d0	e59d2044	 ldr         r2, [sp, #0x44]
  017d4	e59d3028	 ldr         r3, [sp, #0x28]
  017d8	e0423003	 sub         r3, r2, r3
  017dc	e0813003	 add         r3, r1, r3
  017e0	e58d3048	 str         r3, [sp, #0x48]

; 838  :     dstMarginWidth2 = (xRight - xLeft) * dstStep / bytesPerPixel;

  017e4	e59d2044	 ldr         r2, [sp, #0x44]
  017e8	e59d3028	 ldr         r3, [sp, #0x28]
  017ec	e0422003	 sub         r2, r2, r3
  017f0	e59d3014	 ldr         r3, [sp, #0x14]
  017f4	e0010392	 mul         r1, r2, r3
  017f8	e59d0034	 ldr         r0, [sp, #0x34]
  017fc	eb000000	 bl          __rt_udiv
  01800	e58d0038	 str         r0, [sp, #0x38]

; 839  :     pSrcBuf         = gDibBuffer + srcStartRow + xLeft;

  01804	e59f3070	 ldr         r3, [pc, #0x70]
  01808	e5932000	 ldr         r2, [r3]
  0180c	e59d3030	 ldr         r3, [sp, #0x30]
  01810	e0822003	 add         r2, r2, r3
  01814	e59d3028	 ldr         r3, [sp, #0x28]
  01818	e0823003	 add         r3, r2, r3
  0181c	e58d3018	 str         r3, [sp, #0x18]

; 840  : 
; 841  :     EnterCriticalSection(&displayMutex);

  01820	e59f0050	 ldr         r0, [pc, #0x50]
  01824	eb000000	 bl          EnterCriticalSection

; 842  : 
; 843  :     DirtyRectDumpPortraitLoop_C_rectfill(pDstBuf, srcColor, yTop, yBottom, srcWidthB, bytesPerRow,
; 844  :         bytesPerPixel, srcMarginWidth, dstMarginWidth);

  01828	e59d303c	 ldr         r3, [sp, #0x3C]
  0182c	e58d3010	 str         r3, [sp, #0x10]
  01830	e59d301c	 ldr         r3, [sp, #0x1C]
  01834	e58d300c	 str         r3, [sp, #0xC]
  01838	e59d3034	 ldr         r3, [sp, #0x34]
  0183c	e58d3008	 str         r3, [sp, #8]
  01840	e59d304c	 ldr         r3, [sp, #0x4C]
  01844	e58d3004	 str         r3, [sp, #4]
  01848	e59d3040	 ldr         r3, [sp, #0x40]
  0184c	e58d3000	 str         r3, [sp]
  01850	e59d3050	 ldr         r3, [sp, #0x50]
  01854	e59d2024	 ldr         r2, [sp, #0x24]
  01858	e1dd12bc	 ldrh        r1, [sp, #0x2C]
  0185c	e59d0020	 ldr         r0, [sp, #0x20]
  01860	eb000000	 bl          DirtyRectDumpPortraitLoop_C_rectfill

; 845  : 
; 846  :     LeaveCriticalSection(&displayMutex);

  01864	e59f000c	 ldr         r0, [pc, #0xC]
  01868	eb000000	 bl          LeaveCriticalSection
  0186c		 |$LN3@DispDrvrDi@2|

; 847  : }

  0186c	e28dd07c	 add         sp, sp, #0x7C
  01870	e89d6000	 ldmia       sp, {sp, lr}
  01874	e12fff1e	 bx          lr
  01878		 |$LN16@DispDrvrDi@2|
  01878		 |$LN17@DispDrvrDi@2|
  01878	00000000	 DCD         |displayMutex|
  0187c		 |$LN18@DispDrvrDi@2|
  0187c	00000000	 DCD         |gDibBuffer|
  01880		 |$LN19@DispDrvrDi@2|
  01880	00000000	 DCD         |DispDrvr_cxScreen|
  01884		 |$LN20@DispDrvrDi@2|
  01884	00000000	 DCD         |DispDrvr_cyScreen|
  01888		 |$LN21@DispDrvrDi@2|
  01888	00000000	 DCD         |gFrameBuffer|
  0188c		 |$LN22@DispDrvrDi@2|
  0188c	00000000	 DCD         |bpp|
  01890		 |$M43151|

			 ENDP  ; |DispDrvrDirtyRectDump_rectfill|

	EXPORT	|DispDrvrDirtyRectDump2|
	IMPORT	|ellipse_core_ASM|

  00068			 AREA	 |.pdata|, PDATA
|$T43173| DCD	|$LN15@DispDrvrDi@3|
	DCD	0x40007e04
; Function compile flags: /Odtp

  01890			 AREA	 |.text|, CODE, ARM

  01890		 |DispDrvrDirtyRectDump2| PROC

; 850  : {

  01890		 |$LN15@DispDrvrDi@3|
  01890	e1a0c00d	 mov         r12, sp
  01894	e92d0003	 stmdb       sp!, {r0, r1}
  01898	e92d5000	 stmdb       sp!, {r12, lr}
  0189c	e24dd034	 sub         sp, sp, #0x34
  018a0		 |$M43170|

; 851  :     WORD  * pDstBuf;
; 852  :     WORD    srcColor = (WORD)color;

  018a0	e59d3040	 ldr         r3, [sp, #0x40]
  018a4	e1a03803	 mov         r3, r3, lsl #16
  018a8	e1a03823	 mov         r3, r3, lsr #16
  018ac	e1cd30bc	 strh        r3, [sp, #0xC]

; 853  :     DWORD   xLeft;
; 854  :     DWORD   yTop;
; 855  :     DWORD   xRight;
; 856  :     DWORD   yBottom;
; 857  :     DWORD   srcWidthB;
; 858  :     DWORD   dstMarginWidth;
; 859  :     DWORD   dstStartRow;
; 860  : 
; 861  :     xLeft   = prc->left   < 0                    ? 0                 : prc->left;

  018b0	e59d303c	 ldr         r3, [sp, #0x3C]
  018b4	e5933000	 ldr         r3, [r3]
  018b8	e3530000	 cmp         r3, #0
  018bc	aa000002	 bge         |$LN5@DispDrvrDi@3|
  018c0	e3a03000	 mov         r3, #0
  018c4	e58d3024	 str         r3, [sp, #0x24]
  018c8	ea000002	 b           |$LN6@DispDrvrDi@3|
  018cc		 |$LN5@DispDrvrDi@3|
  018cc	e59d303c	 ldr         r3, [sp, #0x3C]
  018d0	e5933000	 ldr         r3, [r3]
  018d4	e58d3024	 str         r3, [sp, #0x24]
  018d8		 |$LN6@DispDrvrDi@3|
  018d8	e59d3024	 ldr         r3, [sp, #0x24]
  018dc	e58d3008	 str         r3, [sp, #8]

; 862  :     yTop    = prc->top    < 0                    ? 0                 : prc->top;

  018e0	e59d303c	 ldr         r3, [sp, #0x3C]
  018e4	e2833004	 add         r3, r3, #4
  018e8	e5933000	 ldr         r3, [r3]
  018ec	e3530000	 cmp         r3, #0
  018f0	aa000002	 bge         |$LN7@DispDrvrDi@3|
  018f4	e3a03000	 mov         r3, #0
  018f8	e58d3028	 str         r3, [sp, #0x28]
  018fc	ea000003	 b           |$LN8@DispDrvrDi@3|
  01900		 |$LN7@DispDrvrDi@3|
  01900	e59d303c	 ldr         r3, [sp, #0x3C]
  01904	e2833004	 add         r3, r3, #4
  01908	e5933000	 ldr         r3, [r3]
  0190c	e58d3028	 str         r3, [sp, #0x28]
  01910		 |$LN8@DispDrvrDi@3|
  01910	e59d3028	 ldr         r3, [sp, #0x28]
  01914	e58d3004	 str         r3, [sp, #4]

; 863  :     xRight  = prc->right  > DispDrvr_cxScreen    ? DispDrvr_cxScreen : prc->right;

  01918	e59d303c	 ldr         r3, [sp, #0x3C]
  0191c	e2833008	 add         r3, r3, #8
  01920	e5932000	 ldr         r2, [r3]
  01924	e59f3158	 ldr         r3, [pc, #0x158]
  01928	e5933000	 ldr         r3, [r3]
  0192c	e1520003	 cmp         r2, r3
  01930	da000003	 ble         |$LN9@DispDrvrDi@3|
  01934	e59f3148	 ldr         r3, [pc, #0x148]
  01938	e5933000	 ldr         r3, [r3]
  0193c	e58d302c	 str         r3, [sp, #0x2C]
  01940	ea000003	 b           |$LN10@DispDrvrDi@3|
  01944		 |$LN9@DispDrvrDi@3|
  01944	e59d303c	 ldr         r3, [sp, #0x3C]
  01948	e2833008	 add         r3, r3, #8
  0194c	e5933000	 ldr         r3, [r3]
  01950	e58d302c	 str         r3, [sp, #0x2C]
  01954		 |$LN10@DispDrvrDi@3|
  01954	e59d302c	 ldr         r3, [sp, #0x2C]
  01958	e58d3018	 str         r3, [sp, #0x18]

; 864  :     yBottom = prc->bottom > DispDrvr_cyScreen    ? DispDrvr_cyScreen : prc->bottom;

  0195c	e59d303c	 ldr         r3, [sp, #0x3C]
  01960	e283300c	 add         r3, r3, #0xC
  01964	e5932000	 ldr         r2, [r3]
  01968	e59f310c	 ldr         r3, [pc, #0x10C]
  0196c	e5933000	 ldr         r3, [r3]
  01970	e1520003	 cmp         r2, r3
  01974	da000003	 ble         |$LN11@DispDrvrDi@3|
  01978	e59f30fc	 ldr         r3, [pc, #0xFC]
  0197c	e5933000	 ldr         r3, [r3]
  01980	e58d3030	 str         r3, [sp, #0x30]
  01984	ea000003	 b           |$LN12@DispDrvrDi@3|
  01988		 |$LN11@DispDrvrDi@3|
  01988	e59d303c	 ldr         r3, [sp, #0x3C]
  0198c	e283300c	 add         r3, r3, #0xC
  01990	e5933000	 ldr         r3, [r3]
  01994	e58d3030	 str         r3, [sp, #0x30]
  01998		 |$LN12@DispDrvrDi@3|
  01998	e59d3030	 ldr         r3, [sp, #0x30]
  0199c	e58d301c	 str         r3, [sp, #0x1C]

; 865  : 
; 866  :     if ((LONG)xLeft >= (LONG)xRight || (LONG)yTop >= (LONG)yBottom)

  019a0	e59d2008	 ldr         r2, [sp, #8]
  019a4	e59d3018	 ldr         r3, [sp, #0x18]
  019a8	e1520003	 cmp         r2, r3
  019ac	aa000003	 bge         |$LN1@DispDrvrDi@3|
  019b0	e59d2004	 ldr         r2, [sp, #4]
  019b4	e59d301c	 ldr         r3, [sp, #0x1C]
  019b8	e1520003	 cmp         r2, r3
  019bc	ba000000	 blt         |$LN2@DispDrvrDi@3|
  019c0		 |$LN1@DispDrvrDi@3|

; 867  :     {
; 868  :         return;

  019c0	ea000029	 b           |$LN3@DispDrvrDi@3|
  019c4		 |$LN2@DispDrvrDi@3|

; 869  :     }
; 870  : 
; 871  :     srcWidthB      = xRight - xLeft;

  019c4	e59d2018	 ldr         r2, [sp, #0x18]
  019c8	e59d3008	 ldr         r3, [sp, #8]
  019cc	e0423003	 sub         r3, r2, r3
  019d0	e58d3014	 str         r3, [sp, #0x14]

; 872  :     dstStartRow    = xLeft * DispDrvr_cyScreen;

  019d4	e59d2008	 ldr         r2, [sp, #8]
  019d8	e59f309c	 ldr         r3, [pc, #0x9C]
  019dc	e5933000	 ldr         r3, [r3]
  019e0	e0030392	 mul         r3, r2, r3
  019e4	e58d3020	 str         r3, [sp, #0x20]

; 873  :     dstMarginWidth = (DispDrvr_cyScreen - (yBottom - yTop));

  019e8	e59d201c	 ldr         r2, [sp, #0x1C]
  019ec	e59d3004	 ldr         r3, [sp, #4]
  019f0	e0422003	 sub         r2, r2, r3
  019f4	e59f3080	 ldr         r3, [pc, #0x80]
  019f8	e5933000	 ldr         r3, [r3]
  019fc	e0433002	 sub         r3, r3, r2
  01a00	e58d3010	 str         r3, [sp, #0x10]

; 874  :     pDstBuf        = (WORD *)gFrameBuffer + dstStartRow + (DispDrvr_cyScreen - yBottom);

  01a04	e59d1020	 ldr         r1, [sp, #0x20]
  01a08	e3a03002	 mov         r3, #2
  01a0c	e0020391	 mul         r2, r1, r3
  01a10	e59f3068	 ldr         r3, [pc, #0x68]
  01a14	e5933000	 ldr         r3, [r3]
  01a18	e0831002	 add         r1, r3, r2
  01a1c	e59f3058	 ldr         r3, [pc, #0x58]
  01a20	e5932000	 ldr         r2, [r3]
  01a24	e59d301c	 ldr         r3, [sp, #0x1C]
  01a28	e0422003	 sub         r2, r2, r3
  01a2c	e3a03002	 mov         r3, #2
  01a30	e0030392	 mul         r3, r2, r3
  01a34	e0813003	 add         r3, r1, r3
  01a38	e58d3000	 str         r3, [sp]

; 875  : 
; 876  :     EnterCriticalSection(&displayMutex);

  01a3c	e59f0034	 ldr         r0, [pc, #0x34]
  01a40	eb000000	 bl          EnterCriticalSection

; 877  : 
; 878  :     ellipse_core_ASM(srcColor, (dstMarginWidth + 1) * 2, srcWidthB, pDstBuf);

  01a44	e59d3000	 ldr         r3, [sp]
  01a48	e59d2014	 ldr         r2, [sp, #0x14]
  01a4c	e59d1010	 ldr         r1, [sp, #0x10]
  01a50	e2810001	 add         r0, r1, #1
  01a54	e3a01002	 mov         r1, #2
  01a58	e0010190	 mul         r1, r0, r1
  01a5c	e1dd00bc	 ldrh        r0, [sp, #0xC]
  01a60	eb000000	 bl          ellipse_core_ASM

; 879  : 
; 880  :     LeaveCriticalSection(&displayMutex);

  01a64	e59f000c	 ldr         r0, [pc, #0xC]
  01a68	eb000000	 bl          LeaveCriticalSection
  01a6c		 |$LN3@DispDrvrDi@3|

; 881  : }

  01a6c	e28dd034	 add         sp, sp, #0x34
  01a70	e89d6000	 ldmia       sp, {sp, lr}
  01a74	e12fff1e	 bx          lr
  01a78		 |$LN16@DispDrvrDi@3|
  01a78		 |$LN17@DispDrvrDi@3|
  01a78	00000000	 DCD         |displayMutex|
  01a7c		 |$LN18@DispDrvrDi@3|
  01a7c	00000000	 DCD         |DispDrvr_cyScreen|
  01a80		 |$LN19@DispDrvrDi@3|
  01a80	00000000	 DCD         |gFrameBuffer|
  01a84		 |$LN20@DispDrvrDi@3|
  01a84	00000000	 DCD         |DispDrvr_cxScreen|
  01a88		 |$M43171|

			 ENDP  ; |DispDrvrDirtyRectDump2|

	EXPORT	|DispDrvrMoveCursor|

  00070			 AREA	 |.pdata|, PDATA
|$T43183| DCD	|$LN5@DispDrvrMo|
	DCD	0x40000503
; Function compile flags: /Odtp

  01a88			 AREA	 |.text|, CODE, ARM

  01a88		 |DispDrvrMoveCursor| PROC

; 884  : {

  01a88		 |$LN5@DispDrvrMo|
  01a88	e1a0c00d	 mov         r12, sp
  01a8c	e92d0003	 stmdb       sp!, {r0, r1}
  01a90	e92d5000	 stmdb       sp!, {r12, lr}
  01a94		 |$M43180|

; 885  :     // will be rewritten to take advantage of the new hardware cursor support
; 886  : /*
; 887  :     // First clear the cursor's old location
; 888  :     gDrawCursorFlag = FALSE;
; 889  :     DispDrvrDirtyRectDump(&gCursorRect);
; 890  :     // Now set the new location of the cursor and redraw
; 891  :     gCursorRect.left = xLocation - gxHot;
; 892  :     if (gCursorRect.left < 0) {
; 893  :         gCursorRect.left = 0;
; 894  :     }
; 895  :     gCursorRect.top = yLocation - gyHot;
; 896  :     if (gCursorRect.top < 0) {
; 897  :         gCursorRect.top = 0;
; 898  :     }
; 899  :     gCursorRect.right = xLocation - gxHot + CURSOR_XSIZE;
; 900  :     gCursorRect.bottom = yLocation - gyHot + CURSOR_YSIZE;
; 901  :     gDrawCursorFlag = TRUE;
; 902  :     DispDrvrDirtyRectDump(&gCursorRect);
; 903  : */
; 904  : }

  01a94	e89d6000	 ldmia       sp, {sp, lr}
  01a98	e12fff1e	 bx          lr
  01a9c		 |$M43181|

			 ENDP  ; |DispDrvrMoveCursor|

	EXPORT	|??_C@_1BI@MHLCFIP@?$AAL?$AAT?$AAM?$AA0?$AA3?$AA5?$AAA?$AA7?$AA7?$AA6?$AAC?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@FHPFELGP@?$AAL?$AAQ?$AA6?$AA4?$AAD?$AA3?$AA4?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@MJNAIELA@?$AAL?$AAM?$AA8?$AAV?$AA3?$AA1?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@DDJDMFBH@?$AAL?$AAT?$AAM?$AA0?$AA4?$AAC?$AA3?$AA8?$AA0?$AAK?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LO@BAAOGPO@?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AAb@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@EIPIGAAA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAB?$AAl?$AAa?$AAn?$AAk?$AAi?$AAn?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@MNHPDPDI@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAR?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@DCJLOFBB@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?0?$AA?5?$AAE?$AAr?$AAr?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@GEDFANEH@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAT?$AAy?$AAp?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17JBHIEIFL@?$AAB?$AAp?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@JPDHMDBE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0?$AA?5?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@CHCDJFGK@?$AAC?$AAy?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@LFBPPLHG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAx?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0?$AA?5?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@IJELAEPL@?$AAC?$AAx?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@FIENDAC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@NCJPFFII@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2?$AAP?$AAX?$AAA?$AA2?$AA7?$AAx?$AA?2?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|_wcsicmp|
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|dpCurSettings|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00078			 AREA	 |.pdata|, PDATA
|$T43225| DCD	|$LN44@ReadRegist|
	DCD	0xc0016802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@MHLCFIP@?$AAL?$AAT?$AAM?$AA0?$AA3?$AA5?$AAA?$AA7?$AA7?$AA6?$AAC?$AA?$AA@| DCB "L"
	DCB	0x0, "T", 0x0, "M", 0x0, "0", 0x0, "3", 0x0, "5", 0x0, "A"
	DCB	0x0, "7", 0x0, "7", 0x0, "6", 0x0, "C", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@FHPFELGP@?$AAL?$AAQ?$AA6?$AA4?$AAD?$AA3?$AA4?$AA1?$AA?$AA@| DCB "L"
	DCB	0x0, "Q", 0x0, "6", 0x0, "4", 0x0, "D", 0x0, "3", 0x0, "4"
	DCB	0x0, "1", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@MJNAIELA@?$AAL?$AAM?$AA8?$AAV?$AA3?$AA1?$AA?$AA@| DCB "L", 0x0, "M"
	DCB	0x0, "8", 0x0, "V", 0x0, "3", 0x0, "1", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@DDJDMFBH@?$AAL?$AAT?$AAM?$AA0?$AA4?$AAC?$AA3?$AA8?$AA0?$AAK?$AA?$AA@| DCB "L"
	DCB	0x0, "T", 0x0, "M", 0x0, "0", 0x0, "4", 0x0, "C", 0x0, "3"
	DCB	0x0, "8", 0x0, "0", 0x0, "K", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LO@BAAOGPO@?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AAb@| DCB "D"
	DCB	0x0, "o", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, ":", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, "b", 0x0, "p", 0x0, "p", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, " "
	DCB	0x0, "C", 0x0, "x", 0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e"
	DCB	0x0, "e", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, " ", 0x0, "C"
	DCB	0x0, "y", 0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "T"
	DCB	0x0, "y", 0x0, "p", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@EIPIGAAA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAB?$AAl?$AAa?$AAn?$AAk?$AAi?$AAn?$AAg?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "S"
	DCB	0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, "B"
	DCB	0x0, "l", 0x0, "a", 0x0, "n", 0x0, "k", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@MNHPDPDI@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAR?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, "n"
	DCB	0x0, "R", 0x0, "o", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@DCJLOFBB@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?0?$AA?5?$AAE?$AAr?$AAr?$AAo@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, ",", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@GEDFANEH@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAT?$AAy?$AAp?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17JBHIEIFL@?$AAB?$AAp?$AAp?$AA?$AA@| DCB "B", 0x0, "p", 0x0, "p", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@JPDHMDBE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0?$AA?5?$AAE@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, " ", 0x0, "y", 0x0, " ", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, ",", 0x0, " "
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@CHCDJFGK@?$AAC?$AAy?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@| DCB "C"
	DCB	0x0, "y", 0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "n", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@LFBPPLHG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAx?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0?$AA?5?$AAE@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, " ", 0x0, "x", 0x0, " ", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, "u", 0x0, "e", 0x0, ",", 0x0, " "
	DCB	0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@IJELAEPL@?$AAC?$AAx?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@| DCB "C"
	DCB	0x0, "x", 0x0, "S", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "n", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@FIENDAC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "\\", 0x0, "D", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, "\\", 0x0, "D"
	DCB	0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y"
	DCB	0x0, "\\", 0x0, "P", 0x0, "X", 0x0, "A", 0x0, "2", 0x0, "7"
	DCB	0x0, "x", 0x0, "\\", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f"
	DCB	0x0, "i", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@NCJPFFII@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2?$AAP?$AAX?$AAA?$AA2?$AA7?$AAx?$AA?2?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@| DCB "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, "\\", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, "\\", 0x0, "P", 0x0, "X", 0x0, "A"
	DCB	0x0, "2", 0x0, "7", 0x0, "x", 0x0, "\\", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T43221| DCD	0xffffff78
; Function compile flags: /Odtp

  01a9c			 AREA	 |.text|, CODE, ARM

  01a9c	00000000	 DCD         |__GSHandlerCheck|
  01aa0	00000000	 DCD         |$T43221|

  01aa4		 |ReadRegistryData| PROC

; 915  : {

  01aa4		 |$LN44@ReadRegist|
  01aa4	e52de004	 str         lr, [sp, #-4]!
  01aa8	e24ddf46	 sub         sp, sp, #0x46, 30
  01aac		 |$M43222|
  01aac	e59f358c	 ldr         r3, [pc, #0x58C]
  01ab0	e5933000	 ldr         r3, [r3]
  01ab4	e58d3094	 str         r3, [sp, #0x94]

; 916  :     LONG  regError;
; 917  :     HKEY  hKey;
; 918  :     DWORD dwDataSize;
; 919  :     TCHAR DisplayType[64];
; 920  : 
; 921  :     bpp               = 0;

  01ab8	e59f2520	 ldr         r2, [pc, #0x520]
  01abc	e3a03000	 mov         r3, #0
  01ac0	e5823000	 str         r3, [r2]

; 922  :     DispDrvr_cyScreen = 0;

  01ac4	e59f2520	 ldr         r2, [pc, #0x520]
  01ac8	e3a03000	 mov         r3, #0
  01acc	e5823000	 str         r3, [r2]

; 923  :     DispDrvr_cxScreen = 0;

  01ad0	e59f250c	 ldr         r2, [pc, #0x50C]
  01ad4	e3a03000	 mov         r3, #0
  01ad8	e5823000	 str         r3, [r2]

; 924  : 
; 925  :     // Open the registry key
; 926  :     regError = RegOpenKeyEx(HKEY_LOCAL_MACHINE,VIDEO_REG_PATH,0,KEY_ALL_ACCESS,&hKey);

  01adc	e28d3008	 add         r3, sp, #8
  01ae0	e58d3000	 str         r3, [sp]
  01ae4	e3a0380f	 mov         r3, #0xF, 16
  01ae8	e383303f	 orr         r3, r3, #0x3F
  01aec	e3a02000	 mov         r2, #0
  01af0	e59f1544	 ldr         r1, [pc, #0x544]
  01af4	e3a0010a	 mov         r0, #0xA, 2
  01af8	eb000000	 bl          RegOpenKeyExW
  01afc	e58d00d4	 str         r0, [sp, #0xD4]
  01b00	e59d30d4	 ldr         r3, [sp, #0xD4]
  01b04	e58d308c	 str         r3, [sp, #0x8C]

; 927  :     if (regError != ERROR_SUCCESS)

  01b08	e59d308c	 ldr         r3, [sp, #0x8C]
  01b0c	e3530000	 cmp         r3, #0
  01b10	0a00001a	 beq         |$LN22@ReadRegist|

; 928  :     {
; 929  :         DEBUGMSG(DEBUGZONE(0),(VIDEO_REG_PATH));

  01b14	e59f3500	 ldr         r3, [pc, #0x500]
  01b18	e5933440	 ldr         r3, [r3, #0x440]
  01b1c	e3130001	 tst         r3, #1
  01b20	0a000004	 beq         |$LN25@ReadRegist|
  01b24	e59f0510	 ldr         r0, [pc, #0x510]
  01b28	eb000000	 bl          NKDbgPrintfW
  01b2c	e3a03001	 mov         r3, #1
  01b30	e58d30d8	 str         r3, [sp, #0xD8]
  01b34	ea000001	 b           |$LN26@ReadRegist|
  01b38		 |$LN25@ReadRegist|
  01b38	e3a03000	 mov         r3, #0
  01b3c	e58d30d8	 str         r3, [sp, #0xD8]
  01b40		 |$LN26@ReadRegist|

; 930  :         DEBUGMSG(DEBUGZONE(0),(TEXT("Failed opening \\Drivers\\Display\\PXA27x\\Config\r\n")));

  01b40	e59f34d4	 ldr         r3, [pc, #0x4D4]
  01b44	e5933440	 ldr         r3, [r3, #0x440]
  01b48	e3130001	 tst         r3, #1
  01b4c	0a000004	 beq         |$LN27@ReadRegist|
  01b50	e59f04e0	 ldr         r0, [pc, #0x4E0]
  01b54	eb000000	 bl          NKDbgPrintfW
  01b58	e3a03001	 mov         r3, #1
  01b5c	e58d30dc	 str         r3, [sp, #0xDC]
  01b60	ea000001	 b           |$LN28@ReadRegist|
  01b64		 |$LN27@ReadRegist|
  01b64	e3a03000	 mov         r3, #0
  01b68	e58d30dc	 str         r3, [sp, #0xDC]
  01b6c		 |$LN28@ReadRegist|

; 931  :         return (FALSE);

  01b6c	e59d0094	 ldr         r0, [sp, #0x94]
  01b70	eb000000	 bl          __security_check_cookie
  01b74	e3a03000	 mov         r3, #0
  01b78	e58d309c	 str         r3, [sp, #0x9C]
  01b7c	ea000112	 b           |$LN23@ReadRegist|
  01b80		 |$LN22@ReadRegist|

; 932  :     }
; 933  : 
; 934  :     // Display width
; 935  :     dwDataSize = sizeof(DispDrvr_cxScreen);

  01b80	e3a03004	 mov         r3, #4
  01b84	e58d3090	 str         r3, [sp, #0x90]

; 936  :     regError   = RegQueryValueEx(hKey,VIDEO_ROW_RES, NULL, NULL,(LPBYTE)&DispDrvr_cxScreen,&dwDataSize);

  01b88	e28d3090	 add         r3, sp, #0x90
  01b8c	e58d3004	 str         r3, [sp, #4]
  01b90	e59f344c	 ldr         r3, [pc, #0x44C]
  01b94	e58d3000	 str         r3, [sp]
  01b98	e3a03000	 mov         r3, #0
  01b9c	e3a02000	 mov         r2, #0
  01ba0	e59f148c	 ldr         r1, [pc, #0x48C]
  01ba4	e59d0008	 ldr         r0, [sp, #8]
  01ba8	eb000000	 bl          RegQueryValueExW
  01bac	e58d00e0	 str         r0, [sp, #0xE0]
  01bb0	e59d30e0	 ldr         r3, [sp, #0xE0]
  01bb4	e58d308c	 str         r3, [sp, #0x8C]

; 937  :     if (regError != ERROR_SUCCESS)

  01bb8	e59d308c	 ldr         r3, [sp, #0x8C]
  01bbc	e3530000	 cmp         r3, #0
  01bc0	0a000010	 beq         |$LN21@ReadRegist|

; 938  :     {
; 939  :         DEBUGMSG(DEBUGZONE(0),(TEXT("Failed to get display x value, Error 0x%X\r\n"),regError));

  01bc4	e59f3450	 ldr         r3, [pc, #0x450]
  01bc8	e5933440	 ldr         r3, [r3, #0x440]
  01bcc	e3130001	 tst         r3, #1
  01bd0	0a000005	 beq         |$LN29@ReadRegist|
  01bd4	e59d108c	 ldr         r1, [sp, #0x8C]
  01bd8	e59f0450	 ldr         r0, [pc, #0x450]
  01bdc	eb000000	 bl          NKDbgPrintfW
  01be0	e3a03001	 mov         r3, #1
  01be4	e58d30e4	 str         r3, [sp, #0xE4]
  01be8	ea000001	 b           |$LN30@ReadRegist|
  01bec		 |$LN29@ReadRegist|
  01bec	e3a03000	 mov         r3, #0
  01bf0	e58d30e4	 str         r3, [sp, #0xE4]
  01bf4		 |$LN30@ReadRegist|

; 940  :         return (FALSE);

  01bf4	e59d0094	 ldr         r0, [sp, #0x94]
  01bf8	eb000000	 bl          __security_check_cookie
  01bfc	e3a03000	 mov         r3, #0
  01c00	e58d309c	 str         r3, [sp, #0x9C]
  01c04	ea0000f0	 b           |$LN23@ReadRegist|
  01c08		 |$LN21@ReadRegist|

; 941  :     }
; 942  : 
; 943  :     // Display height
; 944  :     dwDataSize = sizeof(DispDrvr_cyScreen);

  01c08	e3a03004	 mov         r3, #4
  01c0c	e58d3090	 str         r3, [sp, #0x90]

; 945  :     regError   = RegQueryValueEx(hKey,VIDEO_COL_RES,NULL,NULL,(LPBYTE)&DispDrvr_cyScreen,&dwDataSize);

  01c10	e28d3090	 add         r3, sp, #0x90
  01c14	e58d3004	 str         r3, [sp, #4]
  01c18	e59f33cc	 ldr         r3, [pc, #0x3CC]
  01c1c	e58d3000	 str         r3, [sp]
  01c20	e3a03000	 mov         r3, #0
  01c24	e3a02000	 mov         r2, #0
  01c28	e59f13fc	 ldr         r1, [pc, #0x3FC]
  01c2c	e59d0008	 ldr         r0, [sp, #8]
  01c30	eb000000	 bl          RegQueryValueExW
  01c34	e58d00e8	 str         r0, [sp, #0xE8]
  01c38	e59d30e8	 ldr         r3, [sp, #0xE8]
  01c3c	e58d308c	 str         r3, [sp, #0x8C]

; 946  :     if (regError != ERROR_SUCCESS) {

  01c40	e59d308c	 ldr         r3, [sp, #0x8C]
  01c44	e3530000	 cmp         r3, #0
  01c48	0a000010	 beq         |$LN20@ReadRegist|

; 947  :         DEBUGMSG(DEBUGZONE(0),(TEXT("Failed to get display y value, Error 0x%X\r\n"),regError));

  01c4c	e59f33c8	 ldr         r3, [pc, #0x3C8]
  01c50	e5933440	 ldr         r3, [r3, #0x440]
  01c54	e3130001	 tst         r3, #1
  01c58	0a000005	 beq         |$LN31@ReadRegist|
  01c5c	e59d108c	 ldr         r1, [sp, #0x8C]
  01c60	e59f03c0	 ldr         r0, [pc, #0x3C0]
  01c64	eb000000	 bl          NKDbgPrintfW
  01c68	e3a03001	 mov         r3, #1
  01c6c	e58d30ec	 str         r3, [sp, #0xEC]
  01c70	ea000001	 b           |$LN32@ReadRegist|
  01c74		 |$LN31@ReadRegist|
  01c74	e3a03000	 mov         r3, #0
  01c78	e58d30ec	 str         r3, [sp, #0xEC]
  01c7c		 |$LN32@ReadRegist|

; 948  :         return (FALSE);

  01c7c	e59d0094	 ldr         r0, [sp, #0x94]
  01c80	eb000000	 bl          __security_check_cookie
  01c84	e3a03000	 mov         r3, #0
  01c88	e58d309c	 str         r3, [sp, #0x9C]
  01c8c	ea0000ce	 b           |$LN23@ReadRegist|
  01c90		 |$LN20@ReadRegist|

; 949  :     }
; 950  : 
; 951  :     // Color depth
; 952  :     dwDataSize = sizeof(bpp);

  01c90	e3a03004	 mov         r3, #4
  01c94	e58d3090	 str         r3, [sp, #0x90]

; 953  :     regError=RegQueryValueEx(hKey,PIXEL_DEPTH,NULL,NULL,(LPBYTE)&bpp,&dwDataSize);

  01c98	e28d3090	 add         r3, sp, #0x90
  01c9c	e58d3004	 str         r3, [sp, #4]
  01ca0	e59f3338	 ldr         r3, [pc, #0x338]
  01ca4	e58d3000	 str         r3, [sp]
  01ca8	e3a03000	 mov         r3, #0
  01cac	e3a02000	 mov         r2, #0
  01cb0	e59f136c	 ldr         r1, [pc, #0x36C]
  01cb4	e59d0008	 ldr         r0, [sp, #8]
  01cb8	eb000000	 bl          RegQueryValueExW
  01cbc	e58d00f0	 str         r0, [sp, #0xF0]
  01cc0	e59d30f0	 ldr         r3, [sp, #0xF0]
  01cc4	e58d308c	 str         r3, [sp, #0x8C]

; 954  :     if (regError != ERROR_SUCCESS)

  01cc8	e59d308c	 ldr         r3, [sp, #0x8C]
  01ccc	e3530000	 cmp         r3, #0
  01cd0	0a000002	 beq         |$LN19@ReadRegist|

; 955  :     {
; 956  :         bpp = 0;

  01cd4	e59f2304	 ldr         r2, [pc, #0x304]
  01cd8	e3a03000	 mov         r3, #0
  01cdc	e5823000	 str         r3, [r2]
  01ce0		 |$LN19@ReadRegist|

; 957  :     }
; 958  : 
; 959  :     // Display Type
; 960  :     dwDataSize = sizeof(DisplayType);

  01ce0	e3a03080	 mov         r3, #0x80
  01ce4	e58d3090	 str         r3, [sp, #0x90]

; 961  :     regError   = RegQueryValueEx(hKey,VIDEO_DISPLAY_TYPE,NULL,NULL,(LPBYTE)DisplayType,&dwDataSize);

  01ce8	e28d3090	 add         r3, sp, #0x90
  01cec	e58d3004	 str         r3, [sp, #4]
  01cf0	e28d300c	 add         r3, sp, #0xC
  01cf4	e58d3000	 str         r3, [sp]
  01cf8	e3a03000	 mov         r3, #0
  01cfc	e3a02000	 mov         r2, #0
  01d00	e59f1318	 ldr         r1, [pc, #0x318]
  01d04	e59d0008	 ldr         r0, [sp, #8]
  01d08	eb000000	 bl          RegQueryValueExW
  01d0c	e58d00f4	 str         r0, [sp, #0xF4]
  01d10	e59d30f4	 ldr         r3, [sp, #0xF4]
  01d14	e58d308c	 str         r3, [sp, #0x8C]

; 962  :     if (regError != ERROR_SUCCESS)

  01d18	e59d308c	 ldr         r3, [sp, #0x8C]
  01d1c	e3530000	 cmp         r3, #0
  01d20	0a000010	 beq         |$LN18@ReadRegist|

; 963  :     {
; 964  :         DEBUGMSG(DEBUGZONE(0),(TEXT("Failed to get display type, Error 0x%X\r\n"),regError));

  01d24	e59f32f0	 ldr         r3, [pc, #0x2F0]
  01d28	e5933440	 ldr         r3, [r3, #0x440]
  01d2c	e3130001	 tst         r3, #1
  01d30	0a000005	 beq         |$LN33@ReadRegist|
  01d34	e59d108c	 ldr         r1, [sp, #0x8C]
  01d38	e59f02d8	 ldr         r0, [pc, #0x2D8]
  01d3c	eb000000	 bl          NKDbgPrintfW
  01d40	e3a03001	 mov         r3, #1
  01d44	e58d30f8	 str         r3, [sp, #0xF8]
  01d48	ea000001	 b           |$LN34@ReadRegist|
  01d4c		 |$LN33@ReadRegist|
  01d4c	e3a03000	 mov         r3, #0
  01d50	e58d30f8	 str         r3, [sp, #0xF8]
  01d54		 |$LN34@ReadRegist|

; 965  :         return (FALSE);

  01d54	e59d0094	 ldr         r0, [sp, #0x94]
  01d58	eb000000	 bl          __security_check_cookie
  01d5c	e3a03000	 mov         r3, #0
  01d60	e58d309c	 str         r3, [sp, #0x9C]
  01d64	ea000098	 b           |$LN23@ReadRegist|
  01d68		 |$LN18@ReadRegist|

; 966  :     }
; 967  : 
; 968  :     // Allow screen rotation?
; 969  :     dwDataSize = sizeof(g_fDisableRotation);

  01d68	e3a03004	 mov         r3, #4
  01d6c	e58d3090	 str         r3, [sp, #0x90]

; 970  :     regError=RegQueryValueEx(hKey,VIDEO_DISABLE_SCREENROTATION,NULL,NULL,(LPBYTE)&g_fDisableRotation,&dwDataSize);

  01d70	e28d3090	 add         r3, sp, #0x90
  01d74	e58d3004	 str         r3, [sp, #4]
  01d78	e59f3290	 ldr         r3, [pc, #0x290]
  01d7c	e58d3000	 str         r3, [sp]
  01d80	e3a03000	 mov         r3, #0
  01d84	e3a02000	 mov         r2, #0
  01d88	e59f1284	 ldr         r1, [pc, #0x284]
  01d8c	e59d0008	 ldr         r0, [sp, #8]
  01d90	eb000000	 bl          RegQueryValueExW
  01d94	e58d00fc	 str         r0, [sp, #0xFC]
  01d98	e59d30fc	 ldr         r3, [sp, #0xFC]
  01d9c	e58d308c	 str         r3, [sp, #0x8C]

; 971  :     if (regError != ERROR_SUCCESS)

  01da0	e59d308c	 ldr         r3, [sp, #0x8C]
  01da4	e3530000	 cmp         r3, #0
  01da8	0a000002	 beq         |$LN17@ReadRegist|

; 972  :     {
; 973  :         g_fDisableRotation = FALSE;

  01dac	e59f225c	 ldr         r2, [pc, #0x25C]
  01db0	e3a03000	 mov         r3, #0
  01db4	e5823000	 str         r3, [r2]
  01db8		 |$LN17@ReadRegist|

; 974  :     }
; 975  : 
; 976  :     // Enable forced screen blacking (for LCD's that ghost)
; 977  :     dwDataSize = sizeof(g_fEnableDMASourceSwap);

  01db8	e3a03004	 mov         r3, #4
  01dbc	e58d3090	 str         r3, [sp, #0x90]

; 978  :     regError=RegQueryValueEx(hKey,VIDEO_ENABLE_SCREENBLANKING,NULL,NULL,(LPBYTE)&g_fEnableDMASourceSwap,&dwDataSize);

  01dc0	e28d3090	 add         r3, sp, #0x90
  01dc4	e58d3004	 str         r3, [sp, #4]
  01dc8	e59f3238	 ldr         r3, [pc, #0x238]
  01dcc	e58d3000	 str         r3, [sp]
  01dd0	e3a03000	 mov         r3, #0
  01dd4	e3a02000	 mov         r2, #0
  01dd8	e59f122c	 ldr         r1, [pc, #0x22C]
  01ddc	e59d0008	 ldr         r0, [sp, #8]
  01de0	eb000000	 bl          RegQueryValueExW
  01de4	e58d0100	 str         r0, [sp, #0x100]
  01de8	e59d3100	 ldr         r3, [sp, #0x100]
  01dec	e58d308c	 str         r3, [sp, #0x8C]

; 979  :     if (regError != ERROR_SUCCESS)

  01df0	e59d308c	 ldr         r3, [sp, #0x8C]
  01df4	e3530000	 cmp         r3, #0
  01df8	0a000002	 beq         |$LN16@ReadRegist|

; 980  :     {
; 981  :         g_fEnableDMASourceSwap = FALSE;

  01dfc	e59f2204	 ldr         r2, [pc, #0x204]
  01e00	e3a03000	 mov         r3, #0
  01e04	e5823000	 str         r3, [r2]
  01e08		 |$LN16@ReadRegist|

; 982  :     }
; 983  : 
; 984  :     RegCloseKey (hKey);

  01e08	e59d0008	 ldr         r0, [sp, #8]
  01e0c	eb000000	 bl          RegCloseKey

; 985  :     RETAILMSG(1, (TEXT("Done getting Registry values:\r\nbpp: 0x%x\r\n CxScreen: 0x%x\r\n CyScreen: 0x%x\r\nDisplay Type: %s\r\n"), bpp, DispDrvr_cxScreen, DispDrvr_cyScreen,DisplayType));

  01e10	e28d300c	 add         r3, sp, #0xC
  01e14	e58d3000	 str         r3, [sp]
  01e18	e59f31cc	 ldr         r3, [pc, #0x1CC]
  01e1c	e5933000	 ldr         r3, [r3]
  01e20	e59f21bc	 ldr         r2, [pc, #0x1BC]
  01e24	e5922000	 ldr         r2, [r2]
  01e28	e59f11b0	 ldr         r1, [pc, #0x1B0]
  01e2c	e5911000	 ldr         r1, [r1]
  01e30	e59f01cc	 ldr         r0, [pc, #0x1CC]
  01e34	eb000000	 bl          NKDbgPrintfW

; 986  : 
; 987  :     if (_wcsicmp(DisplayType, TEXT("LTM04C380K")) == 0)

  01e38	e59f11c0	 ldr         r1, [pc, #0x1C0]
  01e3c	e28d000c	 add         r0, sp, #0xC
  01e40	eb000000	 bl          _wcsicmp
  01e44	e58d0104	 str         r0, [sp, #0x104]
  01e48	e59d3104	 ldr         r3, [sp, #0x104]
  01e4c	e3530000	 cmp         r3, #0
  01e50	1a000003	 bne         |$LN15@ReadRegist|

; 988  :     {
; 989  :         nDisplayType = LTM04C380K;

  01e54	e59f2194	 ldr         r2, [pc, #0x194]
  01e58	e3a03001	 mov         r3, #1
  01e5c	e5823000	 str         r3, [r2]
  01e60	ea000023	 b           |$LN14@ReadRegist|
  01e64		 |$LN15@ReadRegist|

; 990  :     }
; 991  :     else if (_wcsicmp(DisplayType, TEXT("LM8V31")) == 0)

  01e64	e59f1190	 ldr         r1, [pc, #0x190]
  01e68	e28d000c	 add         r0, sp, #0xC
  01e6c	eb000000	 bl          _wcsicmp
  01e70	e58d0108	 str         r0, [sp, #0x108]
  01e74	e59d3108	 ldr         r3, [sp, #0x108]
  01e78	e3530000	 cmp         r3, #0
  01e7c	1a000003	 bne         |$LN13@ReadRegist|

; 992  :     {
; 993  :         nDisplayType = LM8V31;

  01e80	e59f2168	 ldr         r2, [pc, #0x168]
  01e84	e3a03004	 mov         r3, #4
  01e88	e5823000	 str         r3, [r2]
  01e8c	ea000018	 b           |$LN12@ReadRegist|
  01e90		 |$LN13@ReadRegist|

; 994  :     }
; 995  :     else if (_wcsicmp(DisplayType, TEXT("LQ64D341")) == 0)

  01e90	e59f1160	 ldr         r1, [pc, #0x160]
  01e94	e28d000c	 add         r0, sp, #0xC
  01e98	eb000000	 bl          _wcsicmp
  01e9c	e58d010c	 str         r0, [sp, #0x10C]
  01ea0	e59d310c	 ldr         r3, [sp, #0x10C]
  01ea4	e3530000	 cmp         r3, #0
  01ea8	1a000003	 bne         |$LN11@ReadRegist|

; 996  :     {
; 997  :         nDisplayType = LQ64D341;

  01eac	e59f213c	 ldr         r2, [pc, #0x13C]
  01eb0	e3a03002	 mov         r3, #2
  01eb4	e5823000	 str         r3, [r2]
  01eb8	ea00000d	 b           |$LN10@ReadRegist|
  01ebc		 |$LN11@ReadRegist|

; 998  :     }
; 999  :     else if (_wcsicmp(DisplayType, TEXT("LTM035A776C")) == 0)

  01ebc	e59f1130	 ldr         r1, [pc, #0x130]
  01ec0	e28d000c	 add         r0, sp, #0xC
  01ec4	eb000000	 bl          _wcsicmp
  01ec8	e58d0110	 str         r0, [sp, #0x110]
  01ecc	e59d3110	 ldr         r3, [sp, #0x110]
  01ed0	e3530000	 cmp         r3, #0
  01ed4	1a000003	 bne         |$LN9@ReadRegist|

; 1000 :     {
; 1001 :         nDisplayType = LTM035A776C;

  01ed8	e59f2110	 ldr         r2, [pc, #0x110]
  01edc	e3a03005	 mov         r3, #5
  01ee0	e5823000	 str         r3, [r2]

; 1002 :     }
; 1003 :     else

  01ee4	ea000002	 b           |$LN8@ReadRegist|
  01ee8		 |$LN9@ReadRegist|

; 1004 :     {
; 1005 :         nDisplayType = NONE;

  01ee8	e59f2100	 ldr         r2, [pc, #0x100]
  01eec	e3a03000	 mov         r3, #0
  01ef0	e5823000	 str         r3, [r2]
  01ef4		 |$LN8@ReadRegist|
  01ef4		 |$LN10@ReadRegist|
  01ef4		 |$LN12@ReadRegist|
  01ef4		 |$LN14@ReadRegist|

; 1006 :     }
; 1007 : 
; 1008 :     // bDoRotation is used to indicate whether or not a rotation of the frame buffer
; 1009 :     // is required in order to orient it correctly for the target display.
; 1010 :     bDoRotation = FALSE;

  01ef4	e59f20ec	 ldr         r2, [pc, #0xEC]
  01ef8	e3a03000	 mov         r3, #0
  01efc	e5823000	 str         r3, [r2]

; 1011 :     switch (nDisplayType)

  01f00	e59f30e8	 ldr         r3, [pc, #0xE8]
  01f04	e5933000	 ldr         r3, [r3]
  01f08	e58d3114	 str         r3, [sp, #0x114]
  01f0c	e59d3114	 ldr         r3, [sp, #0x114]
  01f10	e2433001	 sub         r3, r3, #1
  01f14	e58d3114	 str         r3, [sp, #0x114]
  01f18	e59d3114	 ldr         r3, [sp, #0x114]
  01f1c	e3530004	 cmp         r3, #4
  01f20	8a00001c	 bhi         |$LN1@ReadRegist|
  01f24	e59d2114	 ldr         r2, [sp, #0x114]
  01f28	e1a03102	 mov         r3, r2, lsl #2
  01f2c	e083300f	 add         r3, r3, pc
  01f30	e5933004	 ldr         r3, [r3, #4]
  01f34	e08ff003	 add         pc, pc, r3
  01f38		 |$LN36@ReadRegist|
  01f38		 |$LN35@ReadRegist|
  01f38		 |$LN37@ReadRegist|
  01f38	00000010	 DCD         0x10
  01f3c		 |$LN38@ReadRegist|
  01f3c	00000038	 DCD         0x38
  01f40		 |$LN39@ReadRegist|
  01f40	0000005c	 DCD         0x5c
  01f44		 |$LN40@ReadRegist|
  01f44	00000010	 DCD         0x10
  01f48		 |$LN41@ReadRegist|
  01f48	00000038	 DCD         0x38
  01f4c		 |$LN5@ReadRegist|

; 1012 :     {
; 1013 :     case LTM04C380K:    // native landscape 640x480
; 1014 :     case LM8V31:        // native landscape 640x480
; 1015 :         if (DispDrvr_cxScreen < DispDrvr_cyScreen)

  01f4c	e59f3090	 ldr         r3, [pc, #0x90]
  01f50	e5932000	 ldr         r2, [r3]
  01f54	e59f3090	 ldr         r3, [pc, #0x90]
  01f58	e5933000	 ldr         r3, [r3]
  01f5c	e1520003	 cmp         r2, r3
  01f60	aa000002	 bge         |$LN4@ReadRegist|

; 1016 :         {
; 1017 :             bDoRotation = TRUE;

  01f64	e59f207c	 ldr         r2, [pc, #0x7C]
  01f68	e3a03001	 mov         r3, #1
  01f6c	e5823000	 str         r3, [r2]
  01f70		 |$LN4@ReadRegist|

; 1018 :         }
; 1019 :         break;

  01f70	ea000008	 b           |$LN6@ReadRegist|
  01f74		 |$LN3@ReadRegist|

; 1020 : 
; 1021 :     case LQ64D341:        // native portrait, 176x220
; 1022 :     case LTM035A776C:    // native portrait, 240x320
; 1023 :         if (DispDrvr_cxScreen > DispDrvr_cyScreen)

  01f74	e59f3068	 ldr         r3, [pc, #0x68]
  01f78	e5932000	 ldr         r2, [r3]
  01f7c	e59f3068	 ldr         r3, [pc, #0x68]
  01f80	e5933000	 ldr         r3, [r3]
  01f84	e1520003	 cmp         r2, r3
  01f88	da000002	 ble         |$LN2@ReadRegist|

; 1024 :         {
; 1025 :             bDoRotation = TRUE;

  01f8c	e59f2054	 ldr         r2, [pc, #0x54]
  01f90	e3a03001	 mov         r3, #1
  01f94	e5823000	 str         r3, [r2]
  01f98		 |$LN2@ReadRegist|
  01f98		 |$LN1@ReadRegist|
  01f98		 |$LN6@ReadRegist|

; 1026 :         }
; 1027 :         break;
; 1028 : 
; 1029 :     default:
; 1030 :         break;
; 1031 :     }
; 1032 : 
; 1033 :     // Calculate the stride of the frame buffer
; 1034 :     DispDrvr_cdwStride = DispDrvr_cxScreen * bpp / 8;

  01f98	e59f3044	 ldr         r3, [pc, #0x44]
  01f9c	e5932000	 ldr         r2, [r3]
  01fa0	e59f3038	 ldr         r3, [pc, #0x38]
  01fa4	e5933000	 ldr         r3, [r3]
  01fa8	e0010392	 mul         r1, r2, r3
  01fac	e3a00008	 mov         r0, #8
  01fb0	eb000000	 bl          __rt_udiv
  01fb4	e59f3020	 ldr         r3, [pc, #0x20]
  01fb8	e5830000	 str         r0, [r3]

; 1035 : 
; 1036 :     return (TRUE);

  01fbc	e59d0094	 ldr         r0, [sp, #0x94]
  01fc0	eb000000	 bl          __security_check_cookie
  01fc4	e3a03001	 mov         r3, #1
  01fc8	e58d309c	 str         r3, [sp, #0x9C]
  01fcc		 |$LN23@ReadRegist|

; 1037 : }

  01fcc	e59d009c	 ldr         r0, [sp, #0x9C]
  01fd0	e28ddf46	 add         sp, sp, #0x46, 30
  01fd4	e49de004	 ldr         lr, [sp], #4
  01fd8	e12fff1e	 bx          lr
  01fdc		 |$LN45@ReadRegist|
  01fdc		 |$LN46@ReadRegist|
  01fdc	00000000	 DCD         |DispDrvr_cdwStride|
  01fe0		 |$LN47@ReadRegist|
  01fe0	00000000	 DCD         |bpp|
  01fe4		 |$LN48@ReadRegist|
  01fe4	00000000	 DCD         |DispDrvr_cxScreen|
  01fe8		 |$LN49@ReadRegist|
  01fe8	00000000	 DCD         |bDoRotation|
  01fec		 |$LN50@ReadRegist|
  01fec	00000000	 DCD         |DispDrvr_cyScreen|
  01ff0		 |$LN51@ReadRegist|
  01ff0	00000000	 DCD         |nDisplayType|
  01ff4		 |$LN52@ReadRegist|
  01ff4	00000000	 DCD         |??_C@_1BI@MHLCFIP@?$AAL?$AAT?$AAM?$AA0?$AA3?$AA5?$AAA?$AA7?$AA7?$AA6?$AAC?$AA?$AA@|
  01ff8		 |$LN53@ReadRegist|
  01ff8	00000000	 DCD         |??_C@_1BC@FHPFELGP@?$AAL?$AAQ?$AA6?$AA4?$AAD?$AA3?$AA4?$AA1?$AA?$AA@|
  01ffc		 |$LN54@ReadRegist|
  01ffc	00000000	 DCD         |??_C@_1O@MJNAIELA@?$AAL?$AAM?$AA8?$AAV?$AA3?$AA1?$AA?$AA@|
  02000		 |$LN55@ReadRegist|
  02000	00000000	 DCD         |??_C@_1BG@DDJDMFBH@?$AAL?$AAT?$AAM?$AA0?$AA4?$AAC?$AA3?$AA8?$AA0?$AAK?$AA?$AA@|
  02004		 |$LN56@ReadRegist|
  02004	00000000	 DCD         |??_C@_1LO@BAAOGPO@?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAg?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAr?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AAb@|
  02008		 |$LN57@ReadRegist|
  02008	00000000	 DCD         |g_fEnableDMASourceSwap|
  0200c		 |$LN58@ReadRegist|
  0200c	00000000	 DCD         |??_C@_1CK@EIPIGAAA@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAB?$AAl?$AAa?$AAn?$AAk?$AAi?$AAn?$AAg?$AA?$AA@|
  02010		 |$LN59@ReadRegist|
  02010	00000000	 DCD         |g_fDisableRotation|
  02014		 |$LN60@ReadRegist|
  02014	00000000	 DCD         |??_C@_1CM@MNHPDPDI@?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AAR?$AAo?$AAt?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$AA@|
  02018		 |$LN61@ReadRegist|
  02018	00000000	 DCD         |??_C@_1FC@DCJLOFBB@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?0?$AA?5?$AAE?$AAr?$AAr?$AAo@|
  0201c		 |$LN62@ReadRegist|
  0201c	00000000	 DCD         |dpCurSettings|
  02020		 |$LN63@ReadRegist|
  02020	00000000	 DCD         |??_C@_1BI@GEDFANEH@?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AAT?$AAy?$AAp?$AAe?$AA?$AA@|
  02024		 |$LN64@ReadRegist|
  02024	00000000	 DCD         |??_C@_17JBHIEIFL@?$AAB?$AAp?$AAp?$AA?$AA@|
  02028		 |$LN65@ReadRegist|
  02028	00000000	 DCD         |??_C@_1FI@JPDHMDBE@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAy?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0?$AA?5?$AAE@|
  0202c		 |$LN66@ReadRegist|
  0202c	00000000	 DCD         |??_C@_1BC@CHCDJFGK@?$AAC?$AAy?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@|
  02030		 |$LN67@ReadRegist|
  02030	00000000	 DCD         |??_C@_1FI@LFBPPLHG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?5?$AAx?$AA?5?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?0?$AA?5?$AAE@|
  02034		 |$LN68@ReadRegist|
  02034	00000000	 DCD         |??_C@_1BC@IJELAEPL@?$AAC?$AAx?$AAS?$AAc?$AAr?$AAe?$AAe?$AAn?$AA?$AA@|
  02038		 |$LN69@ReadRegist|
  02038	00000000	 DCD         |??_C@_1GA@FIENDAC@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?2?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2@|
  0203c		 |$LN70@ReadRegist|
  0203c	00000000	 DCD         |??_C@_1DM@NCJPFFII@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2?$AAD?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA?2?$AAP?$AAX?$AAA?$AA2?$AA7?$AAx?$AA?2?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AA?$AA@|
  02040		 |$LN71@ReadRegist|
  02040	00000000	 DCD         |__security_cookie|
  02044		 |$M43223|

			 ENDP  ; |ReadRegistryData|

	EXPORT	|ScrollBuffer|

  00080			 AREA	 |.pdata|, PDATA
|$T43257| DCD	|$LN7@ScrollBuff|
	DCD	0x40005a03
; Function compile flags: /Odtp

  02044			 AREA	 |.text|, CODE, ARM

  02044		 |ScrollBuffer| PROC

; 1040 : {

  02044		 |$LN7@ScrollBuff|
  02044	e1a0c00d	 mov         r12, sp
  02048	e92d0001	 stmdb       sp!, {r0}
  0204c	e92d5000	 stmdb       sp!, {r12, lr}
  02050		 |$M43254|

; 1041 :     EnterCriticalSection(&frameDescriptorMutex);

  02050	e59f0140	 ldr         r0, [pc, #0x140]
  02054	eb000000	 bl          EnterCriticalSection

; 1042 : 
; 1043 :     // Set the physical address of the frame buffer for all three frame descriptors
; 1044 :     if (direction == 1) // scroll up

  02058	e59d3008	 ldr         r3, [sp, #8]
  0205c	e3530001	 cmp         r3, #1
  02060	1a000024	 bne         |$LN2@ScrollBuff|

; 1045 :     {
; 1046 :         frameDescriptorCh0fd1->FSADR += DispDrvr_cdwStride << 2;

  02064	e59f313c	 ldr         r3, [pc, #0x13C]
  02068	e5933000	 ldr         r3, [r3]
  0206c	e2831004	 add         r1, r3, #4
  02070	e59f3128	 ldr         r3, [pc, #0x128]
  02074	e5933000	 ldr         r3, [r3]
  02078	e1a02103	 mov         r2, r3, lsl #2
  0207c	e5913000	 ldr         r3, [r1]
  02080	e0832002	 add         r2, r3, r2
  02084	e59f311c	 ldr         r3, [pc, #0x11C]
  02088	e5933000	 ldr         r3, [r3]
  0208c	e2833004	 add         r3, r3, #4
  02090	e5832000	 str         r2, [r3]

; 1047 :         frameDescriptorCh0fd2->FSADR += DispDrvr_cdwStride << 2;

  02094	e59f3108	 ldr         r3, [pc, #0x108]
  02098	e5933000	 ldr         r3, [r3]
  0209c	e2831004	 add         r1, r3, #4
  020a0	e59f30f8	 ldr         r3, [pc, #0xF8]
  020a4	e5933000	 ldr         r3, [r3]
  020a8	e1a02103	 mov         r2, r3, lsl #2
  020ac	e5913000	 ldr         r3, [r1]
  020b0	e0832002	 add         r2, r3, r2
  020b4	e59f30e8	 ldr         r3, [pc, #0xE8]
  020b8	e5933000	 ldr         r3, [r3]
  020bc	e2833004	 add         r3, r3, #4
  020c0	e5832000	 str         r2, [r3]

; 1048 :         frameDescriptorCh1->FSADR    += DispDrvr_cdwStride << 2;

  020c4	e59f30d0	 ldr         r3, [pc, #0xD0]
  020c8	e5933000	 ldr         r3, [r3]
  020cc	e2831004	 add         r1, r3, #4
  020d0	e59f30c8	 ldr         r3, [pc, #0xC8]
  020d4	e5933000	 ldr         r3, [r3]
  020d8	e1a02103	 mov         r2, r3, lsl #2
  020dc	e5913000	 ldr         r3, [r1]
  020e0	e0832002	 add         r2, r3, r2
  020e4	e59f30b0	 ldr         r3, [pc, #0xB0]
  020e8	e5933000	 ldr         r3, [r3]
  020ec	e2833004	 add         r3, r3, #4
  020f0	e5832000	 str         r2, [r3]

; 1049 :     }
; 1050 :     else // scroll down

  020f4	ea000023	 b           |$LN1@ScrollBuff|
  020f8		 |$LN2@ScrollBuff|

; 1051 :     {
; 1052 :         frameDescriptorCh0fd1->FSADR -= DispDrvr_cdwStride << 2;

  020f8	e59f30a8	 ldr         r3, [pc, #0xA8]
  020fc	e5933000	 ldr         r3, [r3]
  02100	e2831004	 add         r1, r3, #4
  02104	e59f3094	 ldr         r3, [pc, #0x94]
  02108	e5933000	 ldr         r3, [r3]
  0210c	e1a02103	 mov         r2, r3, lsl #2
  02110	e5913000	 ldr         r3, [r1]
  02114	e0432002	 sub         r2, r3, r2
  02118	e59f3088	 ldr         r3, [pc, #0x88]
  0211c	e5933000	 ldr         r3, [r3]
  02120	e2833004	 add         r3, r3, #4
  02124	e5832000	 str         r2, [r3]

; 1053 :         frameDescriptorCh0fd2->FSADR -= DispDrvr_cdwStride << 2;

  02128	e59f3074	 ldr         r3, [pc, #0x74]
  0212c	e5933000	 ldr         r3, [r3]
  02130	e2831004	 add         r1, r3, #4
  02134	e59f3064	 ldr         r3, [pc, #0x64]
  02138	e5933000	 ldr         r3, [r3]
  0213c	e1a02103	 mov         r2, r3, lsl #2
  02140	e5913000	 ldr         r3, [r1]
  02144	e0432002	 sub         r2, r3, r2
  02148	e59f3054	 ldr         r3, [pc, #0x54]
  0214c	e5933000	 ldr         r3, [r3]
  02150	e2833004	 add         r3, r3, #4
  02154	e5832000	 str         r2, [r3]

; 1054 :         frameDescriptorCh1->FSADR    -= DispDrvr_cdwStride << 2;

  02158	e59f303c	 ldr         r3, [pc, #0x3C]
  0215c	e5933000	 ldr         r3, [r3]
  02160	e2831004	 add         r1, r3, #4
  02164	e59f3034	 ldr         r3, [pc, #0x34]
  02168	e5933000	 ldr         r3, [r3]
  0216c	e1a02103	 mov         r2, r3, lsl #2
  02170	e5913000	 ldr         r3, [r1]
  02174	e0432002	 sub         r2, r3, r2
  02178	e59f301c	 ldr         r3, [pc, #0x1C]
  0217c	e5933000	 ldr         r3, [r3]
  02180	e2833004	 add         r3, r3, #4
  02184	e5832000	 str         r2, [r3]
  02188		 |$LN1@ScrollBuff|

; 1055 :     }
; 1056 : 
; 1057 :     LeaveCriticalSection(&frameDescriptorMutex);

  02188	e59f0008	 ldr         r0, [pc, #8]
  0218c	eb000000	 bl          LeaveCriticalSection

; 1058 : }

  02190	e89d6000	 ldmia       sp, {sp, lr}
  02194	e12fff1e	 bx          lr
  02198		 |$LN8@ScrollBuff|
  02198		 |$LN9@ScrollBuff|
  02198	00000000	 DCD         |frameDescriptorMutex|
  0219c		 |$LN10@ScrollBuff|
  0219c	00000000	 DCD         |frameDescriptorCh1|
  021a0		 |$LN11@ScrollBuff|
  021a0	00000000	 DCD         |DispDrvr_cdwStride|
  021a4		 |$LN12@ScrollBuff|
  021a4	00000000	 DCD         |frameDescriptorCh0fd2|
  021a8		 |$LN13@ScrollBuff|
  021a8	00000000	 DCD         |frameDescriptorCh0fd1|
  021ac		 |$M43255|

			 ENDP  ; |ScrollBuffer|

	END
