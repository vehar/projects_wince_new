; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\DISPLAY\PXA27X_LCD\sa2video.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?_rgbIdentity@@3PAUtagPALETTEENTRY@@A| [ DATA ] ; _rgbIdentity
	EXPORT	|?v_pLcdRegs@@3PCULCDRegs@@C| [ DATA ]	; v_pLcdRegs
	EXPORT	|?v_pGPIORegs@@3PCUXLLP_GPIO_T@@C| [ DATA ] ; v_pGPIORegs
	EXPORT	|?bSuspended@@3HA| [ DATA ]		; bSuspended
	EXPORT	|?DisplayDrvPowerCaps@@3U_POWER_CAPABILITIES@@A| [ DATA ] ; DisplayDrvPowerCaps
	EXPORT	|?pGPE@@3PAVDDGPE@@A| [ DATA ]		; pGPE
	EXPORT	|?BitMasks@@3PAKA| [ DATA ]		; BitMasks
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|?v_pLcdRegs@@3PCULCDRegs@@C| % 0x4			; v_pLcdRegs
|?v_pGPIORegs@@3PCUXLLP_GPIO_T@@C| % 0x4		; v_pGPIORegs
|?bSuspended@@3HA| % 0x4				; bSuspended
|?pGPE@@3PAVDDGPE@@A| % 0x4				; pGPE

  00000			 AREA	 |.rdata|, DATA, READONLY
|FourCCDescriptionTable| DCD 0x32595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x56595559
	DCD	0x10
	DCD	0xff00ff
	DCD	0xff00
	DCD	0xff000000
	DCD	0x55595659
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x59565955
	DCD	0x10
	DCD	0xff00ff00
	DCD	0xff
	DCD	0xff0000
	DCD	0x36315659
	DCD	0x10
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x32315659
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x3231564e
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x30323449
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x56555949
	DCD	0xc
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff

  00000			 AREA	 |.data|, DATA
|?_rgbIdentity@@3PAUtagPALETTEENTRY@@A| DCB 0x0		; _rgbIdentity
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x80
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x80
	DCB	0x0
	DCB	0x0
	DCB	0x80
	DCB	0x80
	DCB	0x0
	DCB	0xc0
	DCB	0xc0
	DCB	0xc0
	DCB	0x0
	DCB	0xc0
	DCB	0xdc
	DCB	0xc0
	DCB	0x0
	DCB	0xa6
	DCB	0xca
	DCB	0xf0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x0
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x0
	DCB	0x22
	DCB	0x22
	DCB	0x22
	DCB	0x0
	DCB	0x29
	DCB	0x29
	DCB	0x29
	DCB	0x0
	DCB	0x55
	DCB	0x55
	DCB	0x55
	DCB	0x0
	DCB	0x4d
	DCB	0x4d
	DCB	0x4d
	DCB	0x0
	DCB	0x42
	DCB	0x42
	DCB	0x42
	DCB	0x0
	DCB	0x39
	DCB	0x39
	DCB	0x39
	DCB	0x0
	DCB	0xff
	DCB	0x7c
	DCB	0x80
	DCB	0x0
	DCB	0xff
	DCB	0x50
	DCB	0x50
	DCB	0x0
	DCB	0xd6
	DCB	0x0
	DCB	0x93
	DCB	0x0
	DCB	0xcc
	DCB	0xec
	DCB	0xff
	DCB	0x0
	DCB	0xef
	DCB	0xd6
	DCB	0xc6
	DCB	0x0
	DCB	0xe7
	DCB	0xe7
	DCB	0xd6
	DCB	0x0
	DCB	0xad
	DCB	0xa9
	DCB	0x90
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x33
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x33
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x66
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x99
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x99
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x0
	DCB	0xcc
	DCB	0x0
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0x0
	DCB	0x33
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x33
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0xcc
	DCB	0x0
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x99
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x99
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0xcc
	DCB	0xff
	DCB	0x0
	DCB	0x33
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0xcc
	DCB	0x0
	DCB	0x99
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0xcc
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x66
	DCB	0x0
	DCB	0x66
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x66
	DCB	0xff
	DCB	0x0
	DCB	0x66
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0xa5
	DCB	0x0
	DCB	0x21
	DCB	0x0
	DCB	0x5f
	DCB	0x5f
	DCB	0x5f
	DCB	0x0
	DCB	0x77
	DCB	0x77
	DCB	0x77
	DCB	0x0
	DCB	0x86
	DCB	0x86
	DCB	0x86
	DCB	0x0
	DCB	0x96
	DCB	0x96
	DCB	0x96
	DCB	0x0
	DCB	0xcb
	DCB	0xcb
	DCB	0xcb
	DCB	0x0
	DCB	0xb2
	DCB	0xb2
	DCB	0xb2
	DCB	0x0
	DCB	0xd7
	DCB	0xd7
	DCB	0xd7
	DCB	0x0
	DCB	0xdd
	DCB	0xdd
	DCB	0xdd
	DCB	0x0
	DCB	0xe3
	DCB	0xe3
	DCB	0xe3
	DCB	0x0
	DCB	0xea
	DCB	0xea
	DCB	0xea
	DCB	0x0
	DCB	0xf1
	DCB	0xf1
	DCB	0xf1
	DCB	0x0
	DCB	0xf8
	DCB	0xf8
	DCB	0xf8
	DCB	0x0
	DCB	0xff
	DCB	0xfb
	DCB	0xf0
	DCB	0x0
	DCB	0xa0
	DCB	0xa0
	DCB	0xa4
	DCB	0x0
	DCB	0x80
	DCB	0x80
	DCB	0x80
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0x0
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0x0
	DCB	0xff
	DCB	0xff
	DCB	0xff
	DCB	0x0
|?DisplayDrvPowerCaps@@3U_POWER_CAPABILITIES@@A| DCB 0x1d ; DisplayDrvPowerCaps
	DCB	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|?BitMasks@@3PAKA| DCD 0xf800				; BitMasks
	DCD	0x7e0
	DCD	0x1f
	%	4
|dpCurSettings| DCB "G", 0x0, "D", 0x0, "I", 0x0, " ", 0x0, "D", 0x0, "r", 0x0
	DCB	"i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0x0, 0x0
	%	42
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"P", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "o", 0x0, "r", 0x0
	DCB	"m", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e", 0x0, 0x0, 0x0
	%	40
	DCB	"T", 0x0, "e", 0x0, "m", 0x0, "p", 0x0, "o", 0x0, "r", 0x0
	DCB	"a", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "t", 0x0, "e", 0x0
	DCB	"s", 0x0, "t", 0x0, "s", 0x0, 0x0, 0x0
	%	32
	DCB	"E", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, ",", 0x0
	DCB	"E", 0x0, "x", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	42
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0
	DCB	"l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0, 0x0
	%	42
	DCB	"B", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "C", 0x0, "a", 0x0
	DCB	"l", 0x0, "l", 0x0, "s", 0x0, 0x0, 0x0
	%	44
	DCB	"B", 0x0, "l", 0x0, "t", 0x0, " ", 0x0, "V", 0x0, "e", 0x0
	DCB	"r", 0x0, "b", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, 0x0, 0x0
	%	40
	DCB	"S", 0x0, "u", 0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0
	DCB	"e", 0x0, " ", 0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a", 0x0
	DCB	"t", 0x0, "e", 0x0, 0x0, 0x0
	%	34
	DCB	"F", 0x0, "l", 0x0, "i", 0x0, "p", 0x0, 0x0, 0x0
	%	54
	DCB	"L", 0x0, "i", 0x0, "n", 0x0, "e", 0x0, 0x0, 0x0
	%	54
	DCB	"H", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "w", 0x0, "a", 0x0
	DCB	"r", 0x0, "e", 0x0, 0x0, 0x0
	%	46
	DCB	"P", 0x0, "o", 0x0, "l", 0x0, "y", 0x0, "g", 0x0, "o", 0x0
	DCB	"n", 0x0, 0x0, 0x0
	%	48
	DCB	"C", 0x0, "u", 0x0, "r", 0x0, "s", 0x0, "o", 0x0, "r", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0
	DCB	"M", 0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0
	DCB	"m", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0
	%	30
	DCB	"u", 0x0, "n", 0x0, "u", 0x0, "s", 0x0, "e", 0x0, "d", 0x0
	DCB	"2", 0x0, 0x0, 0x0
	%	48
	DCD	0x4003
	EXPORT	|DrvEnableDriver|
	IMPORT	|?GPEEnableDriver@@YAHKKPAUtagDrvEnableData@@PAU_ENGCALLBACKS@@@Z| ; GPEEnableDriver

  00000			 AREA	 |.pdata|, PDATA
|$T38527| DCD	|$LN5@DrvEnableD|
	DCD	0x40001004
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DrvEnableDriver| PROC

; 129  : {

  00000		 |$LN5@DrvEnableD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M38524|

; 130  :     return GPEEnableDriver(iEngineVersion,cj,data,pEngineCallbacks);

  00010	e59d301c	 ldr         r3, [sp, #0x1C]
  00014	e59d2018	 ldr         r2, [sp, #0x18]
  00018	e59d1014	 ldr         r1, [sp, #0x14]
  0001c	e59d0010	 ldr         r0, [sp, #0x10]
  00020	eb000000	 bl          |?GPEEnableDriver@@YAHKKPAUtagDrvEnableData@@PAU_ENGCALLBACKS@@@Z|
  00024	e58d0004	 str         r0, [sp, #4]
  00028	e59d3004	 ldr         r3, [sp, #4]
  0002c	e58d3000	 str         r3, [sp]

; 131  : }

  00030	e59d0000	 ldr         r0, [sp]
  00034	e28dd008	 add         sp, sp, #8
  00038	e89d6000	 ldmia       sp, {sp, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M38525|

			 ENDP  ; |DrvEnableDriver|

	EXPORT	|??0SA2Video@@QAA@XZ|			; SA2Video::SA2Video
	EXPORT	|GetGPE|
	IMPORT	|??2@YAPAXI@Z|				; operator new

  00008			 AREA	 |.pdata|, PDATA
|$T38536| DCD	|$LN8@GetGPE|
	DCD	0x40002102
; Function compile flags: /Odtp

  00040			 AREA	 |.text|, CODE, ARM

  00040		 |GetGPE| PROC

; 141  : {

  00040		 |$LN8@GetGPE|
  00040	e52de004	 str         lr, [sp, #-4]!
  00044	e24dd014	 sub         sp, sp, #0x14
  00048		 |$M38533|

; 142  :     if (!pGPE)

  00048	e59f3070	 ldr         r3, [pc, #0x70]
  0004c	e5933000	 ldr         r3, [r3]
  00050	e3530000	 cmp         r3, #0
  00054	1a000012	 bne         |$LN1@GetGPE|

; 143  :     {
; 144  :         pGPE = new SA2Video();

  00058	e3a00eb1	 mov         r0, #0xB1, 28
  0005c	eb000000	 bl          |??2@YAPAXI@Z|
  00060	e58d0008	 str         r0, [sp, #8]
  00064	e59d3008	 ldr         r3, [sp, #8]
  00068	e58d3000	 str         r3, [sp]
  0006c	e59d3000	 ldr         r3, [sp]
  00070	e3530000	 cmp         r3, #0
  00074	0a000005	 beq         |$LN4@GetGPE|
  00078	e59d0000	 ldr         r0, [sp]
  0007c	eb000000	 bl          |??0SA2Video@@QAA@XZ|
  00080	e58d000c	 str         r0, [sp, #0xC]
  00084	e59d300c	 ldr         r3, [sp, #0xC]
  00088	e58d3010	 str         r3, [sp, #0x10]
  0008c	ea000001	 b           |$LN5@GetGPE|
  00090		 |$LN4@GetGPE|
  00090	e3a03000	 mov         r3, #0
  00094	e58d3010	 str         r3, [sp, #0x10]
  00098		 |$LN5@GetGPE|
  00098	e59d2010	 ldr         r2, [sp, #0x10]
  0009c	e59f301c	 ldr         r3, [pc, #0x1C]
  000a0	e5832000	 str         r2, [r3]
  000a4		 |$LN1@GetGPE|

; 145  :     }
; 146  : 
; 147  :     return pGPE;

  000a4	e59f3014	 ldr         r3, [pc, #0x14]
  000a8	e5933000	 ldr         r3, [r3]
  000ac	e58d3004	 str         r3, [sp, #4]

; 148  : }

  000b0	e59d0004	 ldr         r0, [sp, #4]
  000b4	e28dd014	 add         sp, sp, #0x14
  000b8	e49de004	 ldr         lr, [sp], #4
  000bc	e12fff1e	 bx          lr
  000c0		 |$LN9@GetGPE|
  000c0		 |$LN10@GetGPE|
  000c0	00000000	 DCD         |?pGPE@@3PAVDDGPE@@A|
  000c4		 |$M38534|

			 ENDP  ; |GetGPE|

	EXPORT	|??_C@_1FE@LBCPHDJ@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO?$AAf?$AAf?$AA?5@| [ DATA ] ; `string'
	EXPORT	|?PowerHandler@SA2Video@@UAAXH@Z|	; SA2Video::PowerHandler
	IMPORT	|DispDrvrPowerHandler|
	IMPORT	|NKDbgPrintfW|

  00010			 AREA	 |.pdata|, PDATA
|$T38545| DCD	|$LN8@PowerHandl|
	DCD	0x40002104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@LBCPHDJ@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO?$AAf?$AAf?$AA?5@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "u", 0x0, "r", 0x0, "n", 0x0, "O", 0x0, "f", 0x0, "f"
	DCB	0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l"
	DCB	0x0, "a", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  000c4			 AREA	 |.text|, CODE, ARM

  000c4		 |?PowerHandler@SA2Video@@UAAXH@Z| PROC	; SA2Video::PowerHandler

; 154  : {

  000c4		 |$LN8@PowerHandl|
  000c4	e1a0c00d	 mov         r12, sp
  000c8	e92d0003	 stmdb       sp!, {r0, r1}
  000cc	e92d5000	 stmdb       sp!, {r12, lr}
  000d0	e24dd004	 sub         sp, sp, #4
  000d4		 |$M38542|

; 155  :     // turn off the display if it is not already turned off
; 156  :     // (turning on is controlled by SA2Video::SetPmPowerState)
; 157  :     if (bOff && !bSuspended) {

  000d4	e59d3010	 ldr         r3, [sp, #0x10]
  000d8	e3530000	 cmp         r3, #0
  000dc	0a000013	 beq         |$LN1@PowerHandl|
  000e0	e59f3054	 ldr         r3, [pc, #0x54]
  000e4	e5933000	 ldr         r3, [r3]
  000e8	e3530000	 cmp         r3, #0
  000ec	1a00000f	 bne         |$LN1@PowerHandl|

; 158  :         DEBUGMSG(ZONE_PM, (TEXT("SA2Video::PowerHandler: TurnOff Display\r\n")));

  000f0	e59f304c	 ldr         r3, [pc, #0x4C]
  000f4	e5933440	 ldr         r3, [r3, #0x440]
  000f8	e3130901	 tst         r3, #1, 18
  000fc	0a000004	 beq         |$LN4@PowerHandl|
  00100	e59f0038	 ldr         r0, [pc, #0x38]
  00104	eb000000	 bl          NKDbgPrintfW
  00108	e3a03001	 mov         r3, #1
  0010c	e58d3000	 str         r3, [sp]
  00110	ea000001	 b           |$LN5@PowerHandl|
  00114		 |$LN4@PowerHandl|
  00114	e3a03000	 mov         r3, #0
  00118	e58d3000	 str         r3, [sp]
  0011c		 |$LN5@PowerHandl|

; 159  :         DispDrvrPowerHandler(TRUE);

  0011c	e3a00001	 mov         r0, #1
  00120	eb000000	 bl          DispDrvrPowerHandler

; 160  :         bSuspended = TRUE;

  00124	e59f2010	 ldr         r2, [pc, #0x10]
  00128	e3a03001	 mov         r3, #1
  0012c	e5823000	 str         r3, [r2]
  00130		 |$LN1@PowerHandl|

; 161  :     }
; 162  : }

  00130	e28dd004	 add         sp, sp, #4
  00134	e89d6000	 ldmia       sp, {sp, lr}
  00138	e12fff1e	 bx          lr
  0013c		 |$LN9@PowerHandl|
  0013c		 |$LN10@PowerHandl|
  0013c	00000000	 DCD         |?bSuspended@@3HA|
  00140		 |$LN11@PowerHandl|
  00140	00000000	 DCD         |??_C@_1FE@LBCPHDJ@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO?$AAf?$AAf?$AA?5@|
  00144		 |$LN12@PowerHandl|
  00144	00000000	 DCD         |dpCurSettings|
  00148		 |$M38543|

			 ENDP  ; |?PowerHandler@SA2Video@@UAAXH@Z|, SA2Video::PowerHandler

	EXPORT	|?SetRotateParams@SA2Video@@QAAXXZ|	; SA2Video::SetRotateParams
	EXPORT	|?GetRotateModeFromReg@SA2Video@@QAAHXZ| ; SA2Video::GetRotateModeFromReg
	EXPORT	|?AdvertisePowerInterface@SA2Video@@AAAHXZ| ; SA2Video::AdvertisePowerInterface
	EXPORT	|??_C@_1CK@NKHLDCAE@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_7SA2Video@@6B@| [ DATA ]		; SA2Video::`vftable'
	EXPORT	|?BltPrepare@SA2Video@@UAAJPAUGPEBltParms@@@Z| ; SA2Video::BltPrepare
	EXPORT	|?BltComplete@SA2Video@@UAAJPAUGPEBltParms@@@Z| ; SA2Video::BltComplete
	EXPORT	|?Line@SA2Video@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z| ; SA2Video::Line
	EXPORT	|?AllocSurface@SA2Video@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| ; SA2Video::AllocSurface
	EXPORT	|?SetPointerShape@SA2Video@@UAAJPAVGPESurf@@0HHHH@Z| ; SA2Video::SetPointerShape
	EXPORT	|?MovePointer@SA2Video@@UAAJHH@Z|	; SA2Video::MovePointer
	EXPORT	|?SetPalette@SA2Video@@UAAJPBUtagPALETTEENTRY@@GG@Z| ; SA2Video::SetPalette
	EXPORT	|?GetModeInfo@SA2Video@@UAAJPAUGPEMode@@H@Z| ; SA2Video::GetModeInfo
	EXPORT	|?NumModes@SA2Video@@UAAHXZ|		; SA2Video::NumModes
	EXPORT	|?SetMode@SA2Video@@UAAJHPAPAUHPALETTE__@@@Z| ; SA2Video::SetMode
	EXPORT	|?InVBlank@SA2Video@@UAAHXZ|		; SA2Video::InVBlank
	EXPORT	|?DrvEscape@SA2Video@@UAAKPAU_SURFOBJ@@KKPAXK1@Z| ; SA2Video::DrvEscape
	EXPORT	|?GetPhysicalVideoMemory@SA2Video@@UAAXPAK0@Z| ; SA2Video::GetPhysicalVideoMemory
	EXPORT	|?IsBusy@SA2Video@@UAAHXZ|		; SA2Video::IsBusy
	EXPORT	|?WaitForNotBusy@SA2Video@@UAAXXZ|	; SA2Video::WaitForNotBusy
	EXPORT	|?AllocSurface@SA2Video@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| ; SA2Video::AllocSurface
	EXPORT	|?GetPhysicalModeId@DDGPE@@UAAKXZ|	; DDGPE::GetPhysicalModeId
	EXPORT	|?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ| ; DDGPE::GetDriverData
	EXPORT	|?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z| ; DDGPE::SetDriverData
	IMPORT	|?SetRotation@GPESurf@@QAAXHHH@Z|	; GPESurf::SetRotation
	IMPORT	|g_DisplayBaseVirtual|
	IMPORT	|??0DDGPESurf@@QAA@HHPAXHW4EGPEFormat@@@Z| ; DDGPESurf::DDGPESurf
	IMPORT	|DispDrvr_cdwStride|
	IMPORT	|gFrameBuffer|
	IMPORT	|g_fDisableRotation|
	IMPORT	|bpp|
	IMPORT	|DispDrvr_cyScreen|
	IMPORT	|DispDrvr_cxScreen|
	IMPORT	|DispDrvrInitialize|
	IMPORT	|??0DDGPE@@QAA@XZ|			; DDGPE::DDGPE
	IMPORT	|??_ESA2Video@@UAAPAXI@Z|, WEAK |??_GSA2Video@@UAAPAXI@Z| ; SA2Video::`vector deleting destructor', SA2Video::`scalar deleting destructor'
	IMPORT	|?GetPalette@GPE@@UAAJPAPAUtagPALETTEENTRY@@PAG@Z| ; GPE::GetPalette
	IMPORT	|?IsPaletteSettable@GPE@@UAAHXZ|	; GPE::IsPaletteSettable
	IMPORT	|?ContrastControl@GPE@@UAAHKPAK@Z|	; GPE::ContrastControl
	IMPORT	|?GetGraphicsCaps@GPE@@UAAKXZ|		; GPE::GetGraphicsCaps
	IMPORT	|?SetVisibleSurface@GPE@@UAAXPAVGPESurf@@@Z| ; GPE::SetVisibleSurface
	IMPORT	|?FlipInProgress@GPE@@UAAHXZ|		; GPE::FlipInProgress
	IMPORT	|?WaitForVBlank@GPE@@UAAXXZ|		; GPE::WaitForVBlank
	IMPORT	|?SurfaceBusyFlipping@GPE@@UAAHPAVGPESurf@@@Z| ; GPE::SurfaceBusyFlipping
	IMPORT	|?AvailableVideoMemory@GPE@@UAAKXZ|	; GPE::AvailableVideoMemory
	IMPORT	|?ScanLine@GPE@@UAAHXZ|			; GPE::ScanLine
	IMPORT	|?ProcessCommandBlock@GPE@@UAAJPAE@Z|	; GPE::ProcessCommandBlock
	IMPORT	|?GetScreenDimensions@GPE@@UAAHPAUGPEScreenProps@@@Z| ; GPE::GetScreenDimensions
	IMPORT	|?GetClearTypeRGBMasks@GPE@@UAAPAKXZ|	; GPE::GetClearTypeRGBMasks
	IMPORT	|?DisablePrimary@GPE@@UAAHXZ|		; GPE::DisablePrimary
	IMPORT	|?AllocSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::AllocSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z| ; DDGPE::AllocVideoSurface
	IMPORT	|?AllocBackBuffer@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z| ; DDGPE::AllocBackBuffer
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z| ; DDGPE::WrapSurface
	IMPORT	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@HH@Z| ; DDGPE::WrapSurface
	IMPORT	|?BltPrepare@DDGPE@@UAAJPAUDDGPEBltParms@@@Z| ; DDGPE::BltPrepare
	IMPORT	|?PerformBlt@DDGPE@@UAAJPAUDDGPEBltParms@@@Z| ; DDGPE::PerformBlt
	IMPORT	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@00PBUtagRECT@@1KKK@Z| ; DDGPE::BltExpanded
	IMPORT	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@000PAU_CLIPOBJ@@PAU_XLATEOBJ@@PBUtagRECT@@3KKK@Z| ; DDGPE::BltExpanded
	IMPORT	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@KH@Z| ; DDGPE::SetVisibleSurface
	IMPORT	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@H@Z| ; DDGPE::SetVisibleSurface
	IMPORT	|?DetectMode@DDGPE@@UAAJPAKKKW4EGPEFormat@@W4EDDGPEPixelFormat@@PAU_DDPIXELFORMAT@@@Z| ; DDGPE::DetectMode
	IMPORT	|?DetectPixelFormat@DDGPE@@UAAJKPAU_DDPIXELFORMAT@@PAW4EGPEFormat@@PAW4EDDGPEPixelFormat@@@Z| ; DDGPE::DetectPixelFormat
	IMPORT	|?InDisplay@DDGPE@@UAAHXZ|		; DDGPE::InDisplay
	IMPORT	|?GetModeInfoEx@DDGPE@@UAAJPAUGPEModeEx@@H@Z| ; DDGPE::GetModeInfoEx
	IMPORT	|?SetMode@DDGPE@@UAAJHPAPAUHPALETTE__@@H@Z| ; DDGPE::SetMode

  00018			 AREA	 |.pdata|, PDATA
|$T38566| DCD	|$LN16@SA2Video|
	DCD	0x4000ed04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@NKHLDCAE@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "A", 0x0, "2"
	DCB	0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "o", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7SA2Video@@6B@| DCD |??_ESA2Video@@UAAPAXI@Z|	; SA2Video::`vftable'
	DCD	|?BltPrepare@SA2Video@@UAAJPAUGPEBltParms@@@Z|
	DCD	|?BltComplete@SA2Video@@UAAJPAUGPEBltParms@@@Z|
	DCD	|?Line@SA2Video@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z|
	DCD	|?AllocSurface@SA2Video@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z|
	DCD	|?SetPointerShape@SA2Video@@UAAJPAVGPESurf@@0HHHH@Z|
	DCD	|?MovePointer@SA2Video@@UAAJHH@Z|
	DCD	|?SetPalette@SA2Video@@UAAJPBUtagPALETTEENTRY@@GG@Z|
	DCD	|?GetPalette@GPE@@UAAJPAPAUtagPALETTEENTRY@@PAG@Z|
	DCD	|?GetModeInfo@SA2Video@@UAAJPAUGPEMode@@H@Z|
	DCD	|?NumModes@SA2Video@@UAAHXZ|
	DCD	|?SetMode@SA2Video@@UAAJHPAPAUHPALETTE__@@@Z|
	DCD	|?InVBlank@SA2Video@@UAAHXZ|
	DCD	|?IsPaletteSettable@GPE@@UAAHXZ|
	DCD	|?ContrastControl@GPE@@UAAHKPAK@Z|
	DCD	|?PowerHandler@SA2Video@@UAAXH@Z|
	DCD	|?DrvEscape@SA2Video@@UAAKPAU_SURFOBJ@@KKPAXK1@Z|
	DCD	|?GetGraphicsCaps@GPE@@UAAKXZ|
	DCD	|?GetPhysicalVideoMemory@SA2Video@@UAAXPAK0@Z|
	DCD	|?SetVisibleSurface@GPE@@UAAXPAVGPESurf@@@Z|
	DCD	|?FlipInProgress@GPE@@UAAHXZ|
	DCD	|?WaitForVBlank@GPE@@UAAXXZ|
	DCD	|?SurfaceBusyFlipping@GPE@@UAAHPAVGPESurf@@@Z|
	DCD	|?IsBusy@SA2Video@@UAAHXZ|
	DCD	|?WaitForNotBusy@SA2Video@@UAAXXZ|
	DCD	|?AvailableVideoMemory@GPE@@UAAKXZ|
	DCD	|?ScanLine@GPE@@UAAHXZ|
	DCD	|?ProcessCommandBlock@GPE@@UAAJPAE@Z|
	DCD	|?GetScreenDimensions@GPE@@UAAHPAUGPEScreenProps@@@Z|
	DCD	|?GetClearTypeRGBMasks@GPE@@UAAPAKXZ|
	DCD	|?DisablePrimary@GPE@@UAAHXZ|
	DCD	|?AllocSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?AllocSurface@SA2Video@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z|
	DCD	|?AllocVideoSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAK@Z|
	DCD	|?AllocBackBuffer@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@PAUDDGPEAllocSurfaceData@@@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@PAEH@Z|
	DCD	|?WrapSurface@DDGPE@@UAAJPAU_DDRAWI_DDRAWSURFACE_LCL@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@HH@Z|
	DCD	|?BltPrepare@DDGPE@@UAAJPAUDDGPEBltParms@@@Z|
	DCD	|?PerformBlt@DDGPE@@UAAJPAUDDGPEBltParms@@@Z|
	DCD	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@00PBUtagRECT@@1KKK@Z|
	DCD	|?BltExpanded@DDGPE@@UAAJPAVDDGPESurf@@000PAU_CLIPOBJ@@PAU_XLATEOBJ@@PBUtagRECT@@3KKK@Z|
	DCD	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@KH@Z|
	DCD	|?SetVisibleSurface@DDGPE@@UAAXPAVGPESurf@@H@Z|
	DCD	|?DetectMode@DDGPE@@UAAJPAKKKW4EGPEFormat@@W4EDDGPEPixelFormat@@PAU_DDPIXELFORMAT@@@Z|
	DCD	|?DetectPixelFormat@DDGPE@@UAAJKPAU_DDPIXELFORMAT@@PAW4EGPEFormat@@PAW4EDDGPEPixelFormat@@@Z|
	DCD	|?GetPhysicalModeId@DDGPE@@UAAKXZ|
	DCD	|?InDisplay@DDGPE@@UAAHXZ|
	DCD	|?GetModeInfoEx@DDGPE@@UAAJPAUGPEModeEx@@H@Z|
	DCD	|?SetMode@DDGPE@@UAAJHPAPAUHPALETTE__@@H@Z|
	DCD	|?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ|
	DCD	|?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z|
; Function compile flags: /Odtp

  00148			 AREA	 |.text|, CODE, ARM

  00148		 |??0SA2Video@@QAA@XZ| PROC		; SA2Video::SA2Video

; 165  : {

  00148		 |$LN16@SA2Video|
  00148	e1a0c00d	 mov         r12, sp
  0014c	e92d0001	 stmdb       sp!, {r0}
  00150	e92d5000	 stmdb       sp!, {r12, lr}
  00154	e24dd038	 sub         sp, sp, #0x38
  00158		 |$M38563|
  00158	e59d0040	 ldr         r0, [sp, #0x40]
  0015c	eb000000	 bl          |??0DDGPE@@QAA@XZ|
  00160	e58d0018	 str         r0, [sp, #0x18]
  00164	e59f238c	 ldr         r2, [pc, #0x38C]
  00168	e59d3040	 ldr         r3, [sp, #0x40]
  0016c	e5832000	 str         r2, [r3]

; 166  :     DEBUGMSG(GPE_ZONE_INIT,(TEXT("SA2Video::SA2Video\r\n")));

  00170	e59f337c	 ldr         r3, [pc, #0x37C]
  00174	e5933440	 ldr         r3, [r3, #0x440]
  00178	e3130020	 tst         r3, #0x20
  0017c	0a000004	 beq         |$LN6@SA2Video|
  00180	e59f0368	 ldr         r0, [pc, #0x368]
  00184	eb000000	 bl          NKDbgPrintfW
  00188	e3a03001	 mov         r3, #1
  0018c	e58d301c	 str         r3, [sp, #0x1C]
  00190	ea000001	 b           |$LN7@SA2Video|
  00194		 |$LN6@SA2Video|
  00194	e3a03000	 mov         r3, #0
  00198	e58d301c	 str         r3, [sp, #0x1C]
  0019c		 |$LN7@SA2Video|

; 167  : 
; 168  :     m_InDDraw = FALSE;

  0019c	e59d3040	 ldr         r3, [sp, #0x40]
  001a0	e2833c0b	 add         r3, r3, #0xB, 24
  001a4	e283200c	 add         r2, r3, #0xC
  001a8	e3a03000	 mov         r3, #0
  001ac	e5823000	 str         r3, [r2]

; 169  : 
; 170  :     // Determine the display type
; 171  :     // Setup the LCD controller for that display
; 172  :     // Power up and enable the display
; 173  :     DispDrvrInitialize();

  001b0	eb000000	 bl          DispDrvrInitialize

; 174  : 
; 175  :     // Advertise the power management interface for this driver.
; 176  :     AdvertisePowerInterface();

  001b4	e59d0040	 ldr         r0, [sp, #0x40]
  001b8	eb000000	 bl          |?AdvertisePowerInterface@SA2Video@@AAAHXZ|

; 177  : 
; 178  :     m_ModeInfo.modeId = 0;

  001bc	e59d3040	 ldr         r3, [sp, #0x40]
  001c0	e2832f93	 add         r2, r3, #0x93, 30
  001c4	e3a03000	 mov         r3, #0
  001c8	e5823000	 str         r3, [r2]

; 179  :     m_ModeInfo.width = m_nScreenWidth = DispDrvr_cxScreen;

  001cc	e59d3040	 ldr         r3, [sp, #0x40]
  001d0	e2832008	 add         r2, r3, #8
  001d4	e59f3310	 ldr         r3, [pc, #0x310]
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e5823000	 str         r3, [r2]
  001e0	e59d3040	 ldr         r3, [sp, #0x40]
  001e4	e2832e25	 add         r2, r3, #0x25, 28
  001e8	e59f32fc	 ldr         r3, [pc, #0x2FC]
  001ec	e5933000	 ldr         r3, [r3]
  001f0	e5823000	 str         r3, [r2]

; 180  :     m_ModeInfo.height = m_nScreenHeight = DispDrvr_cyScreen;

  001f4	e59d3040	 ldr         r3, [sp, #0x40]
  001f8	e283200c	 add         r2, r3, #0xC
  001fc	e59f32e4	 ldr         r3, [pc, #0x2E4]
  00200	e5933000	 ldr         r3, [r3]
  00204	e5823000	 str         r3, [r2]
  00208	e59d3040	 ldr         r3, [sp, #0x40]
  0020c	e2832f95	 add         r2, r3, #0x95, 30
  00210	e59f32d0	 ldr         r3, [pc, #0x2D0]
  00214	e5933000	 ldr         r3, [r3]
  00218	e5823000	 str         r3, [r2]

; 181  :     m_ModeInfo.Bpp = bpp;

  0021c	e59d3040	 ldr         r3, [sp, #0x40]
  00220	e2832f96	 add         r2, r3, #0x96, 30
  00224	e59f32b8	 ldr         r3, [pc, #0x2B8]
  00228	e5933000	 ldr         r3, [r3]
  0022c	e5823000	 str         r3, [r2]

; 182  :     m_ModeInfo.frequency = 60;

  00230	e59d3040	 ldr         r3, [sp, #0x40]
  00234	e2832f97	 add         r2, r3, #0x97, 30
  00238	e3a0303c	 mov         r3, #0x3C
  0023c	e5823000	 str         r3, [r2]

; 183  :     m_ModeInfo.format = bpp == 8 ? gpe8Bpp : gpe16Bpp;

  00240	e59f329c	 ldr         r3, [pc, #0x29C]
  00244	e5933000	 ldr         r3, [r3]
  00248	e3530008	 cmp         r3, #8
  0024c	1a000002	 bne         |$LN8@SA2Video|
  00250	e3a03003	 mov         r3, #3
  00254	e58d3020	 str         r3, [sp, #0x20]
  00258	ea000001	 b           |$LN9@SA2Video|
  0025c		 |$LN8@SA2Video|
  0025c	e3a03004	 mov         r3, #4
  00260	e58d3020	 str         r3, [sp, #0x20]
  00264		 |$LN9@SA2Video|
  00264	e59d3040	 ldr         r3, [sp, #0x40]
  00268	e2832e26	 add         r2, r3, #0x26, 28
  0026c	e59d3020	 ldr         r3, [sp, #0x20]
  00270	e5823000	 str         r3, [r2]

; 184  :     m_pMode = &m_ModeInfo;

  00274	e59d3040	 ldr         r3, [sp, #0x40]
  00278	e2832f93	 add         r2, r3, #0x93, 30
  0027c	e59d3040	 ldr         r3, [sp, #0x40]
  00280	e2833010	 add         r3, r3, #0x10
  00284	e5832000	 str         r2, [r3]

; 185  : 
; 186  :     m_pModeEx.modeInfo.modeId = 0;

  00288	e59d3040	 ldr         r3, [sp, #0x40]
  0028c	e2832f99	 add         r2, r3, #0x99, 30
  00290	e3a03000	 mov         r3, #0
  00294	e5823000	 str         r3, [r2]

; 187  :     m_pModeEx.modeInfo.width = m_nScreenWidth = DispDrvr_cxScreen;

  00298	e59d3040	 ldr         r3, [sp, #0x40]
  0029c	e2832008	 add         r2, r3, #8
  002a0	e59f3244	 ldr         r3, [pc, #0x244]
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e5823000	 str         r3, [r2]
  002ac	e59d3040	 ldr         r3, [sp, #0x40]
  002b0	e2832f9a	 add         r2, r3, #0x9A, 30
  002b4	e59f3230	 ldr         r3, [pc, #0x230]
  002b8	e5933000	 ldr         r3, [r3]
  002bc	e5823000	 str         r3, [r2]

; 188  :     m_pModeEx.modeInfo.height = m_nScreenHeight = DispDrvr_cyScreen;

  002c0	e59d3040	 ldr         r3, [sp, #0x40]
  002c4	e283200c	 add         r2, r3, #0xC
  002c8	e59f3218	 ldr         r3, [pc, #0x218]
  002cc	e5933000	 ldr         r3, [r3]
  002d0	e5823000	 str         r3, [r2]
  002d4	e59d3040	 ldr         r3, [sp, #0x40]
  002d8	e2832f9b	 add         r2, r3, #0x9B, 30
  002dc	e59f3204	 ldr         r3, [pc, #0x204]
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e5823000	 str         r3, [r2]

; 189  :     m_pModeEx.modeInfo.Bpp = bpp;

  002e8	e59d3040	 ldr         r3, [sp, #0x40]
  002ec	e2832e27	 add         r2, r3, #0x27, 28
  002f0	e59f31ec	 ldr         r3, [pc, #0x1EC]
  002f4	e5933000	 ldr         r3, [r3]
  002f8	e5823000	 str         r3, [r2]

; 190  :     m_pModeEx.modeInfo.frequency = 60;

  002fc	e59d3040	 ldr         r3, [sp, #0x40]
  00300	e2832f9d	 add         r2, r3, #0x9D, 30
  00304	e3a0303c	 mov         r3, #0x3C
  00308	e5823000	 str         r3, [r2]

; 191  :     m_pModeEx.modeInfo.format = bpp == 8 ? gpe8Bpp : gpe16Bpp;

  0030c	e59f31d0	 ldr         r3, [pc, #0x1D0]
  00310	e5933000	 ldr         r3, [r3]
  00314	e3530008	 cmp         r3, #8
  00318	1a000002	 bne         |$LN10@SA2Video|
  0031c	e3a03003	 mov         r3, #3
  00320	e58d3024	 str         r3, [sp, #0x24]
  00324	ea000001	 b           |$LN11@SA2Video|
  00328		 |$LN10@SA2Video|
  00328	e3a03004	 mov         r3, #4
  0032c	e58d3024	 str         r3, [sp, #0x24]
  00330		 |$LN11@SA2Video|
  00330	e59d3040	 ldr         r3, [sp, #0x40]
  00334	e2832f9e	 add         r2, r3, #0x9E, 30
  00338	e59d3024	 ldr         r3, [sp, #0x24]
  0033c	e5823000	 str         r3, [r2]

; 192  : 
; 193  :     if (!g_fDisableRotation)

  00340	e59f3198	 ldr         r3, [pc, #0x198]
  00344	e5933000	 ldr         r3, [r3]
  00348	e3530000	 cmp         r3, #0
  0034c	1a000007	 bne         |$LN3@SA2Video|

; 194  :     {
; 195  :         m_iRotate = GetRotateModeFromReg();

  00350	e59d0040	 ldr         r0, [sp, #0x40]
  00354	eb000000	 bl          |?GetRotateModeFromReg@SA2Video@@QAAHXZ|
  00358	e58d0028	 str         r0, [sp, #0x28]
  0035c	e59d3040	 ldr         r3, [sp, #0x40]
  00360	e2832018	 add         r2, r3, #0x18
  00364	e59d3028	 ldr         r3, [sp, #0x28]
  00368	e5823000	 str         r3, [r2]

; 196  :     }
; 197  :     else

  0036c	ea000003	 b           |$LN2@SA2Video|
  00370		 |$LN3@SA2Video|

; 198  :     {
; 199  :         m_iRotate = DMDO_0;

  00370	e59d3040	 ldr         r3, [sp, #0x40]
  00374	e2832018	 add         r2, r3, #0x18
  00378	e3a03000	 mov         r3, #0
  0037c	e5823000	 str         r3, [r2]
  00380		 |$LN2@SA2Video|

; 200  :     }
; 201  : 
; 202  :     SetRotateParams();

  00380	e59d0040	 ldr         r0, [sp, #0x40]
  00384	eb000000	 bl          |?SetRotateParams@SA2Video@@QAAXXZ|

; 203  : 
; 204  :     m_pVirtualFrameBuffer = gFrameBuffer;

  00388	e59d3040	 ldr         r3, [sp, #0x40]
  0038c	e2832d0b	 add         r2, r3, #0xB, 26
  00390	e59f3144	 ldr         r3, [pc, #0x144]
  00394	e5933000	 ldr         r3, [r3]
  00398	e5823000	 str         r3, [r2]

; 205  : 
; 206  :     m_pPrimarySurface = new DDGPESurf(m_nScreenWidth,m_nScreenHeight,m_pVirtualFrameBuffer,
; 207  :          DispDrvr_cdwStride,m_ModeInfo.format);

  0039c	e3a0007c	 mov         r0, #0x7C
  003a0	eb000000	 bl          |??2@YAPAXI@Z|
  003a4	e58d002c	 str         r0, [sp, #0x2C]
  003a8	e59d302c	 ldr         r3, [sp, #0x2C]
  003ac	e58d3008	 str         r3, [sp, #8]
  003b0	e59d3008	 ldr         r3, [sp, #8]
  003b4	e3530000	 cmp         r3, #0
  003b8	0a000015	 beq         |$LN12@SA2Video|
  003bc	e59d3040	 ldr         r3, [sp, #0x40]
  003c0	e2833e26	 add         r3, r3, #0x26, 28
  003c4	e5933000	 ldr         r3, [r3]
  003c8	e58d3004	 str         r3, [sp, #4]
  003cc	e59f3104	 ldr         r3, [pc, #0x104]
  003d0	e5933000	 ldr         r3, [r3]
  003d4	e58d3000	 str         r3, [sp]
  003d8	e59d3040	 ldr         r3, [sp, #0x40]
  003dc	e2833d0b	 add         r3, r3, #0xB, 26
  003e0	e5933000	 ldr         r3, [r3]
  003e4	e59d2040	 ldr         r2, [sp, #0x40]
  003e8	e282200c	 add         r2, r2, #0xC
  003ec	e5922000	 ldr         r2, [r2]
  003f0	e59d1040	 ldr         r1, [sp, #0x40]
  003f4	e2811008	 add         r1, r1, #8
  003f8	e5911000	 ldr         r1, [r1]
  003fc	e59d0008	 ldr         r0, [sp, #8]
  00400	eb000000	 bl          |??0DDGPESurf@@QAA@HHPAXHW4EGPEFormat@@@Z|
  00404	e58d0030	 str         r0, [sp, #0x30]
  00408	e59d3030	 ldr         r3, [sp, #0x30]
  0040c	e58d3034	 str         r3, [sp, #0x34]
  00410	ea000001	 b           |$LN13@SA2Video|
  00414		 |$LN12@SA2Video|
  00414	e3a03000	 mov         r3, #0
  00418	e58d3034	 str         r3, [sp, #0x34]
  0041c		 |$LN13@SA2Video|
  0041c	e59d3040	 ldr         r3, [sp, #0x40]
  00420	e2832004	 add         r2, r3, #4
  00424	e59d3034	 ldr         r3, [sp, #0x34]
  00428	e5823000	 str         r3, [r2]

; 208  : 
; 209  :     m_VirtualFrameBuffer = (ULONG)FRAME_BUFFER_0_BASE_VIRTUAL;

  0042c	e59f30a0	 ldr         r3, [pc, #0xA0]
  00430	e5933000	 ldr         r3, [r3]
  00434	e2832d12	 add         r2, r3, #0x12, 26
  00438	e59d3040	 ldr         r3, [sp, #0x40]
  0043c	e2833fb1	 add         r3, r3, #0xB1, 30
  00440	e5832000	 str         r2, [r3]

; 210  : 
; 211  :     if (m_pPrimarySurface)

  00444	e59d3040	 ldr         r3, [sp, #0x40]
  00448	e2833004	 add         r3, r3, #4
  0044c	e5933000	 ldr         r3, [r3]
  00450	e3530000	 cmp         r3, #0
  00454	0a00000c	 beq         |$LN1@SA2Video|

; 212  :     {
; 213  :         ((GPESurf *)m_pPrimarySurface)->SetRotation(m_nScreenWidth, m_nScreenHeight, m_iRotate);

  00458	e59d3040	 ldr         r3, [sp, #0x40]
  0045c	e2833018	 add         r3, r3, #0x18
  00460	e5933000	 ldr         r3, [r3]
  00464	e59d2040	 ldr         r2, [sp, #0x40]
  00468	e282200c	 add         r2, r2, #0xC
  0046c	e5922000	 ldr         r2, [r2]
  00470	e59d1040	 ldr         r1, [sp, #0x40]
  00474	e2811008	 add         r1, r1, #8
  00478	e5911000	 ldr         r1, [r1]
  0047c	e59d0040	 ldr         r0, [sp, #0x40]
  00480	e2800004	 add         r0, r0, #4
  00484	e5900000	 ldr         r0, [r0]
  00488	eb000000	 bl          |?SetRotation@GPESurf@@QAAXHHH@Z|
  0048c		 |$LN1@SA2Video|

; 214  :     }
; 215  : 
; 216  :     // Set up the software cursor state.
; 217  :     m_CursorVisible   = FALSE;

  0048c	e59d3040	 ldr         r3, [sp, #0x40]
  00490	e2832fbb	 add         r2, r3, #0xBB, 30
  00494	e3a03000	 mov         r3, #0
  00498	e5823000	 str         r3, [r2]

; 218  :     m_CursorDisabled  = TRUE;

  0049c	e59d3040	 ldr         r3, [sp, #0x40]
  004a0	e2832fba	 add         r2, r3, #0xBA, 30
  004a4	e3a03001	 mov         r3, #1
  004a8	e5823000	 str         r3, [r2]

; 219  :     m_CursorForcedOff = FALSE;

  004ac	e59d3040	 ldr         r3, [sp, #0x40]
  004b0	e2832e2f	 add         r2, r3, #0x2F, 28
  004b4	e3a03000	 mov         r3, #0
  004b8	e5823000	 str         r3, [r2]

; 220  : }

  004bc	e59d3040	 ldr         r3, [sp, #0x40]
  004c0	e58d3014	 str         r3, [sp, #0x14]
  004c4	e59d0014	 ldr         r0, [sp, #0x14]
  004c8	e28dd038	 add         sp, sp, #0x38
  004cc	e89d6000	 ldmia       sp, {sp, lr}
  004d0	e12fff1e	 bx          lr
  004d4		 |$LN17@SA2Video|
  004d4		 |$LN18@SA2Video|
  004d4	00000000	 DCD         |g_DisplayBaseVirtual|
  004d8		 |$LN19@SA2Video|
  004d8	00000000	 DCD         |DispDrvr_cdwStride|
  004dc		 |$LN20@SA2Video|
  004dc	00000000	 DCD         |gFrameBuffer|
  004e0		 |$LN21@SA2Video|
  004e0	00000000	 DCD         |g_fDisableRotation|
  004e4		 |$LN22@SA2Video|
  004e4	00000000	 DCD         |bpp|
  004e8		 |$LN23@SA2Video|
  004e8	00000000	 DCD         |DispDrvr_cyScreen|
  004ec		 |$LN24@SA2Video|
  004ec	00000000	 DCD         |DispDrvr_cxScreen|
  004f0		 |$LN25@SA2Video|
  004f0	00000000	 DCD         |??_C@_1CK@NKHLDCAE@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?$AN?$AA?6?$AA?$AA@|
  004f4		 |$LN26@SA2Video|
  004f4	00000000	 DCD         |dpCurSettings|
  004f8		 |$LN27@SA2Video|
  004f8	00000000	 DCD         |??_7SA2Video@@6B@|
  004fc		 |$M38564|

			 ENDP  ; |??0SA2Video@@QAA@XZ|, SA2Video::SA2Video

; File c:\wince600\public\common\oak\inc\ddgpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38583| DCD	|$LN5@GetPhysica|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetPhysicalModeId@DDGPE@@UAAKXZ| PROC ; DDGPE::GetPhysicalModeId

; 486  : 	virtual DWORD	GetPhysicalModeId	(void) { return m_dwPhysicalModeID; }	// Get current hardware mode (mode of ddraw primary)

  00000		 |$LN5@GetPhysica|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38580|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833028	 add         r3, r3, #0x28
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M38581|

			 ENDP  ; |?GetPhysicalModeId@DDGPE@@UAAKXZ|, DDGPE::GetPhysicalModeId


  00000			 AREA	 |.pdata|, PDATA
|$T38591| DCD	|$LN5@GetDriverD|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ| PROC ; DDGPE::GetDriverData

; 502  : 	virtual DDGPEDriverData*		GetDriverData(void) { return m_pDriverData; }

  00000		 |$LN5@GetDriverD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38588|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283302c	 add         r3, r3, #0x2C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M38589|

			 ENDP  ; |?GetDriverData@DDGPE@@UAAPAUDDGPEDriverData@@XZ|, DDGPE::GetDriverData


  00000			 AREA	 |.pdata|, PDATA
|$T38598| DCD	|$LN5@SetDriverD|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z| PROC ; DDGPE::SetDriverData

; 503  : 	virtual void					SetDriverData(DDGPEDriverData* pDriverData) { m_pDriverData = pDriverData; }

  00000		 |$LN5@SetDriverD|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M38595|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e283202c	 add         r2, r3, #0x2C
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M38596|

			 ENDP  ; |?SetDriverData@DDGPE@@UAAXPAUDDGPEDriverData@@@Z|, DDGPE::SetDriverData

	EXPORT	|??1SA2Video@@UAA@XZ|			; SA2Video::~SA2Video
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T38606| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GSA2Video@@UAAPAXI@Z| PROC		; SA2Video::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38603|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1SA2Video@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M38604|

			 ENDP  ; |??_GSA2Video@@UAAPAXI@Z|, SA2Video::`scalar deleting destructor'

	IMPORT	|??1DDGPE@@UAA@XZ|			; DDGPE::~DDGPE

  00000			 AREA	 |.pdata|, PDATA
|$T38613| DCD	|$LN5@SA2Video@2|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1SA2Video@@UAA@XZ| PROC		; SA2Video::~SA2Video
  00000		 |$LN5@SA2Video@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M38610|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          |??1DDGPE@@UAA@XZ|
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M38611|

			 ENDP  ; |??1SA2Video@@UAA@XZ|, SA2Video::~SA2Video

	IMPORT	|EngCreatePalette|

  00020			 AREA	 |.pdata|, PDATA
|$T38625| DCD	|$LN11@SetMode|
	DCD	0x40004d04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  004fc			 AREA	 |.text|, CODE, ARM

  004fc		 |?SetMode@SA2Video@@UAAJHPAPAUHPALETTE__@@@Z| PROC ; SA2Video::SetMode

; 226  : {

  004fc		 |$LN11@SetMode|
  004fc	e1a0c00d	 mov         r12, sp
  00500	e92d0007	 stmdb       sp!, {r0 - r2}
  00504	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00508	e24dd02c	 sub         sp, sp, #0x2C
  0050c		 |$M38622|

; 227  :     SCODE Result = E_INVALIDARG;

  0050c	e59f3118	 ldr         r3, [pc, #0x118]
  00510	e58d3008	 str         r3, [sp, #8]

; 228  : 
; 229  :     // Here, we use EngCreatePalette to create a palette that that MGDI will use as a
; 230  :     // stock palette
; 231  :     if(pPalette && 0 == modeId)

  00514	e59d3040	 ldr         r3, [sp, #0x40]
  00518	e3530000	 cmp         r3, #0
  0051c	0a000038	 beq         |$LN6@SetMode|
  00520	e59d303c	 ldr         r3, [sp, #0x3C]
  00524	e3530000	 cmp         r3, #0
  00528	1a000035	 bne         |$LN6@SetMode|

; 232  :     {
; 233  :         switch (bpp)

  0052c	e59f30f4	 ldr         r3, [pc, #0xF4]
  00530	e5933000	 ldr         r3, [r3]
  00534	e58d3020	 str         r3, [sp, #0x20]
  00538	e59d3020	 ldr         r3, [sp, #0x20]
  0053c	e3530008	 cmp         r3, #8
  00540	0a000003	 beq         |$LN3@SetMode|
  00544	e59d3020	 ldr         r3, [sp, #0x20]
  00548	e3530010	 cmp         r3, #0x10
  0054c	0a000013	 beq         |$LN2@SetMode|
  00550	ea000028	 b           |$LN1@SetMode|
  00554		 |$LN3@SetMode|

; 234  :         {
; 235  :         case 8:
; 236  :             *pPalette = EngCreatePalette(PAL_INDEXED, PALETTE_SIZE, (ULONG*)_rgbIdentity, 0, 0, 0);

  00554	e3a03000	 mov         r3, #0
  00558	e58d3004	 str         r3, [sp, #4]
  0055c	e3a03000	 mov         r3, #0
  00560	e58d3000	 str         r3, [sp]
  00564	e3a03000	 mov         r3, #0
  00568	e59f20b4	 ldr         r2, [pc, #0xB4]
  0056c	e3a01c01	 mov         r1, #1, 24
  00570	e3a00001	 mov         r0, #1
  00574	e59fe0a0	 ldr         lr, [pc, #0xA0]
  00578	e59e4000	 ldr         r4, [lr]
  0057c	e1a0e00f	 mov         lr, pc
  00580	e12fff14	 bx          r4
  00584	e58d0024	 str         r0, [sp, #0x24]
  00588	e59d2024	 ldr         r2, [sp, #0x24]
  0058c	e59d3040	 ldr         r3, [sp, #0x40]
  00590	e5832000	 str         r2, [r3]

; 237  :             Result    = S_OK;

  00594	e3a03000	 mov         r3, #0
  00598	e58d3008	 str         r3, [sp, #8]

; 238  :             break;

  0059c	ea000018	 b           |$LN4@SetMode|
  005a0		 |$LN2@SetMode|

; 239  : 
; 240  :         case 16:
; 241  :             *pPalette = EngCreatePalette(PAL_BITFIELDS, 0, NULL, BitMasks[0], BitMasks[1], BitMasks[2]);

  005a0	e59f3078	 ldr         r3, [pc, #0x78]
  005a4	e5933008	 ldr         r3, [r3, #8]
  005a8	e58d3004	 str         r3, [sp, #4]
  005ac	e59f306c	 ldr         r3, [pc, #0x6C]
  005b0	e5933004	 ldr         r3, [r3, #4]
  005b4	e58d3000	 str         r3, [sp]
  005b8	e59f3060	 ldr         r3, [pc, #0x60]
  005bc	e5933000	 ldr         r3, [r3]
  005c0	e3a02000	 mov         r2, #0
  005c4	e3a01000	 mov         r1, #0
  005c8	e3a00002	 mov         r0, #2
  005cc	e59fe048	 ldr         lr, [pc, #0x48]
  005d0	e59e4000	 ldr         r4, [lr]
  005d4	e1a0e00f	 mov         lr, pc
  005d8	e12fff14	 bx          r4
  005dc	e58d0028	 str         r0, [sp, #0x28]
  005e0	e59d2028	 ldr         r2, [sp, #0x28]
  005e4	e59d3040	 ldr         r3, [sp, #0x40]
  005e8	e5832000	 str         r2, [r3]

; 242  :             Result    = S_OK;

  005ec	e3a03000	 mov         r3, #0
  005f0	e58d3008	 str         r3, [sp, #8]

; 243  :             break;

  005f4	ea000002	 b           |$LN4@SetMode|
  005f8		 |$LN1@SetMode|

; 244  : 
; 245  :         default:
; 246  :             *pPalette = NULL;

  005f8	e59d2040	 ldr         r2, [sp, #0x40]
  005fc	e3a03000	 mov         r3, #0
  00600	e5823000	 str         r3, [r2]
  00604		 |$LN4@SetMode|
  00604		 |$LN6@SetMode|

; 247  :             break;
; 248  :         }
; 249  :     }
; 250  : 
; 251  :     return Result;

  00604	e59d3008	 ldr         r3, [sp, #8]
  00608	e58d301c	 str         r3, [sp, #0x1C]

; 252  : }

  0060c	e59d001c	 ldr         r0, [sp, #0x1C]
  00610	e28dd02c	 add         sp, sp, #0x2C
  00614	e89d6010	 ldmia       sp, {r4, sp, lr}
  00618	e12fff1e	 bx          lr
  0061c		 |$LN12@SetMode|
  0061c		 |$LN13@SetMode|
  0061c	00000000	 DCD         |EngCreatePalette|
  00620		 |$LN14@SetMode|
  00620	00000000	 DCD         |?BitMasks@@3PAKA|
  00624		 |$LN15@SetMode|
  00624	00000000	 DCD         |?_rgbIdentity@@3PAUtagPALETTEENTRY@@A|
  00628		 |$LN16@SetMode|
  00628	00000000	 DCD         |bpp|
  0062c		 |$LN17@SetMode|
  0062c	80070057	 DCD         0x80070057
  00630		 |$M38623|

			 ENDP  ; |?SetMode@SA2Video@@UAAJHPAPAUHPALETTE__@@@Z|, SA2Video::SetMode

	IMPORT	|memcpy|

  00028			 AREA	 |.pdata|, PDATA
|$T38638| DCD	|$LN6@GetModeInf|
	DCD	0x40001604
; Function compile flags: /Odtp

  00630			 AREA	 |.text|, CODE, ARM

  00630		 |?GetModeInfo@SA2Video@@UAAJPAUGPEMode@@H@Z| PROC ; SA2Video::GetModeInfo

; 259  : {

  00630		 |$LN6@GetModeInf|
  00630	e1a0c00d	 mov         r12, sp
  00634	e92d0007	 stmdb       sp!, {r0 - r2}
  00638	e92d5000	 stmdb       sp!, {r12, lr}
  0063c	e24dd004	 sub         sp, sp, #4
  00640		 |$M38635|

; 260  :     if(modeNumber != 0)

  00640	e59d3014	 ldr         r3, [sp, #0x14]
  00644	e3530000	 cmp         r3, #0
  00648	0a000002	 beq         |$LN1@GetModeInf|

; 261  :     {
; 262  :         return E_INVALIDARG;

  0064c	e59f3030	 ldr         r3, [pc, #0x30]
  00650	e58d3000	 str         r3, [sp]
  00654	ea000006	 b           |$LN2@GetModeInf|
  00658		 |$LN1@GetModeInf|

; 263  :     }
; 264  : 
; 265  :     *pMode = m_ModeInfo;

  00658	e59d300c	 ldr         r3, [sp, #0xC]
  0065c	e2831f93	 add         r1, r3, #0x93, 30
  00660	e59d0010	 ldr         r0, [sp, #0x10]
  00664	e3a02018	 mov         r2, #0x18
  00668	eb000000	 bl          memcpy

; 266  : 
; 267  :     return S_OK;

  0066c	e3a03000	 mov         r3, #0
  00670	e58d3000	 str         r3, [sp]
  00674		 |$LN2@GetModeInf|

; 268  : }

  00674	e59d0000	 ldr         r0, [sp]
  00678	e28dd004	 add         sp, sp, #4
  0067c	e89d6000	 ldmia       sp, {sp, lr}
  00680	e12fff1e	 bx          lr
  00684		 |$LN7@GetModeInf|
  00684		 |$LN8@GetModeInf|
  00684	80070057	 DCD         0x80070057
  00688		 |$M38636|

			 ENDP  ; |?GetModeInfo@SA2Video@@UAAJPAUGPEMode@@H@Z|, SA2Video::GetModeInfo


  00030			 AREA	 |.pdata|, PDATA
|$T38646| DCD	|$LN5@NumModes|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00688			 AREA	 |.text|, CODE, ARM

  00688		 |?NumModes@SA2Video@@UAAHXZ| PROC	; SA2Video::NumModes

; 272  : {

  00688		 |$LN5@NumModes|
  00688	e1a0c00d	 mov         r12, sp
  0068c	e92d0001	 stmdb       sp!, {r0}
  00690	e92d5000	 stmdb       sp!, {r12, lr}
  00694	e24dd004	 sub         sp, sp, #4
  00698		 |$M38643|

; 273  :     return 1;

  00698	e3a03001	 mov         r3, #1
  0069c	e58d3000	 str         r3, [sp]

; 274  : }

  006a0	e59d0000	 ldr         r0, [sp]
  006a4	e28dd004	 add         sp, sp, #4
  006a8	e89d6000	 ldmia       sp, {sp, lr}
  006ac	e12fff1e	 bx          lr
  006b0		 |$M38644|

			 ENDP  ; |?NumModes@SA2Video@@UAAHXZ|, SA2Video::NumModes

	EXPORT	|?Stride@GPESurf@@QAAHXZ|		; GPESurf::Stride
	EXPORT	|?Buffer@GPESurf@@QAAPAXXZ|		; GPESurf::Buffer
	EXPORT	|?CursorOff@SA2Video@@QAAXXZ|		; SA2Video::CursorOff
	IMPORT	|gyHot|
	IMPORT	|gxHot|
	IMPORT	|gCursorData|
	IMPORT	|memset|
	IMPORT	|gCursorMask|
	IMPORT	|bDoRotation|
	IMPORT	|__rt_sdiv|

  00038			 AREA	 |.pdata|, PDATA
|$T38657| DCD	|$LN21@SetPointer|
	DCD	0x4000a004
; Function compile flags: /Odtp

  006b0			 AREA	 |.text|, CODE, ARM

  006b0		 |?SetPointerShape@SA2Video@@UAAJPAVGPESurf@@0HHHH@Z| PROC ; SA2Video::SetPointerShape

; 285  : {

  006b0		 |$LN21@SetPointer|
  006b0	e1a0c00d	 mov         r12, sp
  006b4	e92d000f	 stmdb       sp!, {r0 - r3}
  006b8	e92d5000	 stmdb       sp!, {r12, lr}
  006bc	e24dd030	 sub         sp, sp, #0x30
  006c0		 |$M38654|

; 286  :     int        row;
; 287  :     int        colByte;
; 288  :     BYTE     * pAND;
; 289  :     BYTE     * pXOR;
; 290  :     BYTE       bitMask;
; 291  :     unsigned   i;
; 292  : 
; 293  :     if (!bDoRotation)

  006c0	e59f3264	 ldr         r3, [pc, #0x264]
  006c4	e5933000	 ldr         r3, [r3]
  006c8	e3530000	 cmp         r3, #0
  006cc	1a000001	 bne         |$LN12@SetPointer|

; 294  :     {
; 295  :         CursorOff();

  006d0	e59d0038	 ldr         r0, [sp, #0x38]
  006d4	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|
  006d8		 |$LN12@SetPointer|

; 296  :     }
; 297  : 
; 298  :     if (!pMask)

  006d8	e59d303c	 ldr         r3, [sp, #0x3C]
  006dc	e3530000	 cmp         r3, #0
  006e0	1a00000c	 bne         |$LN11@SetPointer|

; 299  :     {   // Turn off the cursor.
; 300  :         memset((BYTE *)gCursorMask,0xFF,sizeof(gCursorMask));

  006e4	e3a02b02	 mov         r2, #2, 22
  006e8	e3a010ff	 mov         r1, #0xFF
  006ec	e59f0234	 ldr         r0, [pc, #0x234]
  006f0	eb000000	 bl          memset

; 301  :         memset((BYTE *)gCursorData,0x00,sizeof(gCursorData));

  006f4	e3a02b02	 mov         r2, #2, 22
  006f8	e3a01000	 mov         r1, #0
  006fc	e59f0220	 ldr         r0, [pc, #0x220]
  00700	eb000000	 bl          memset

; 302  : 
; 303  :         m_CursorDisabled = TRUE;

  00704	e59d3038	 ldr         r3, [sp, #0x38]
  00708	e2832fba	 add         r2, r3, #0xBA, 30
  0070c	e3a03001	 mov         r3, #1
  00710	e5823000	 str         r3, [r2]

; 304  :     }
; 305  :     else

  00714	ea00007a	 b           |$LN10@SetPointer|
  00718		 |$LN11@SetPointer|

; 306  :     {
; 307  :         i = 0;

  00718	e3a03000	 mov         r3, #0
  0071c	e58d3000	 str         r3, [sp]

; 308  : 
; 309  :         for (row = 0; row < cY; row++)

  00720	e3a03000	 mov         r3, #0
  00724	e58d3008	 str         r3, [sp, #8]
  00728	ea000002	 b           |$LN9@SetPointer|
  0072c		 |$LN8@SetPointer|
  0072c	e59d3008	 ldr         r3, [sp, #8]
  00730	e2833001	 add         r3, r3, #1
  00734	e58d3008	 str         r3, [sp, #8]
  00738		 |$LN9@SetPointer|
  00738	e59d2008	 ldr         r2, [sp, #8]
  0073c	e59d3050	 ldr         r3, [sp, #0x50]
  00740	e1520003	 cmp         r2, r3
  00744	aa00005c	 bge         |$LN7@SetPointer|

; 310  :         {
; 311  :             for (colByte = 0; colByte < (cX / 8); colByte++)

  00748	e3a03000	 mov         r3, #0
  0074c	e58d300c	 str         r3, [sp, #0xC]
  00750	ea000002	 b           |$LN6@SetPointer|
  00754		 |$LN5@SetPointer|
  00754	e59d300c	 ldr         r3, [sp, #0xC]
  00758	e2833001	 add         r3, r3, #1
  0075c	e58d300c	 str         r3, [sp, #0xC]
  00760		 |$LN6@SetPointer|
  00760	e59d104c	 ldr         r1, [sp, #0x4C]
  00764	e3a00008	 mov         r0, #8
  00768	eb000000	 bl          __rt_sdiv
  0076c	e59d300c	 ldr         r3, [sp, #0xC]
  00770	e1530000	 cmp         r3, r0
  00774	aa00004f	 bge         |$LN4@SetPointer|

; 312  :             {
; 313  :                 pAND = (unsigned char *)pMask->Buffer()+(row*pMask->Stride())+colByte;

  00778	e59d003c	 ldr         r0, [sp, #0x3C]
  0077c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00780	e58d001c	 str         r0, [sp, #0x1C]
  00784	e59d003c	 ldr         r0, [sp, #0x3C]
  00788	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  0078c	e58d0020	 str         r0, [sp, #0x20]
  00790	e59d1008	 ldr         r1, [sp, #8]
  00794	e59d3020	 ldr         r3, [sp, #0x20]
  00798	e0020391	 mul         r2, r1, r3
  0079c	e59d301c	 ldr         r3, [sp, #0x1C]
  007a0	e0832002	 add         r2, r3, r2
  007a4	e59d300c	 ldr         r3, [sp, #0xC]
  007a8	e0823003	 add         r3, r2, r3
  007ac	e58d3004	 str         r3, [sp, #4]

; 314  :                 pXOR = pAND+(cY*pMask->Stride());

  007b0	e59d003c	 ldr         r0, [sp, #0x3C]
  007b4	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  007b8	e58d0024	 str         r0, [sp, #0x24]
  007bc	e59d1050	 ldr         r1, [sp, #0x50]
  007c0	e59d3024	 ldr         r3, [sp, #0x24]
  007c4	e0020391	 mul         r2, r1, r3
  007c8	e59d3004	 ldr         r3, [sp, #4]
  007cc	e0833002	 add         r3, r3, r2
  007d0	e58d3010	 str         r3, [sp, #0x10]

; 315  : 
; 316  :                 for (bitMask = 0x0080; bitMask; bitMask >>= 1)

  007d4	e3a03080	 mov         r3, #0x80
  007d8	e5cd3014	 strb        r3, [sp, #0x14]
  007dc	ea000003	 b           |$LN3@SetPointer|
  007e0		 |$LN2@SetPointer|
  007e0	e5dd3014	 ldrb        r3, [sp, #0x14]
  007e4	e1a030a3	 mov         r3, r3, lsr #1
  007e8	e20330ff	 and         r3, r3, #0xFF
  007ec	e5cd3014	 strb        r3, [sp, #0x14]
  007f0		 |$LN3@SetPointer|
  007f0	e5dd3014	 ldrb        r3, [sp, #0x14]
  007f4	e3530000	 cmp         r3, #0
  007f8	0a00002d	 beq         |$LN1@SetPointer|

; 317  :                 {
; 318  :                     gCursorMask[i] = (*pAND & bitMask) ? 0xFFFF : 0x0000;

  007fc	e59d3004	 ldr         r3, [sp, #4]
  00800	e5d33000	 ldrb        r3, [r3]
  00804	e1a02003	 mov         r2, r3
  00808	e5dd3014	 ldrb        r3, [sp, #0x14]
  0080c	e1120003	 tst         r2, r3
  00810	0a000003	 beq         |$LN15@SetPointer|
  00814	e3a03cff	 mov         r3, #0xFF, 24
  00818	e38330ff	 orr         r3, r3, #0xFF
  0081c	e58d3028	 str         r3, [sp, #0x28]
  00820	ea000001	 b           |$LN16@SetPointer|
  00824		 |$LN15@SetPointer|
  00824	e3a03000	 mov         r3, #0
  00828	e58d3028	 str         r3, [sp, #0x28]
  0082c		 |$LN16@SetPointer|
  0082c	e59d3028	 ldr         r3, [sp, #0x28]
  00830	e1a00803	 mov         r0, r3, lsl #16
  00834	e1a00820	 mov         r0, r0, lsr #16
  00838	e59d1000	 ldr         r1, [sp]
  0083c	e3a03002	 mov         r3, #2
  00840	e0020391	 mul         r2, r1, r3
  00844	e59f30dc	 ldr         r3, [pc, #0xDC]
  00848	e0833002	 add         r3, r3, r2
  0084c	e1c300b0	 strh        r0, [r3]

; 319  :                     gCursorData[i] = (*pXOR & bitMask) ? 0xFFFF : 0x0000;

  00850	e59d3010	 ldr         r3, [sp, #0x10]
  00854	e5d33000	 ldrb        r3, [r3]
  00858	e1a02003	 mov         r2, r3
  0085c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00860	e1120003	 tst         r2, r3
  00864	0a000003	 beq         |$LN17@SetPointer|
  00868	e3a03cff	 mov         r3, #0xFF, 24
  0086c	e38330ff	 orr         r3, r3, #0xFF
  00870	e58d302c	 str         r3, [sp, #0x2C]
  00874	ea000001	 b           |$LN18@SetPointer|
  00878		 |$LN17@SetPointer|
  00878	e3a03000	 mov         r3, #0
  0087c	e58d302c	 str         r3, [sp, #0x2C]
  00880		 |$LN18@SetPointer|
  00880	e59d302c	 ldr         r3, [sp, #0x2C]
  00884	e1a00803	 mov         r0, r3, lsl #16
  00888	e1a00820	 mov         r0, r0, lsr #16
  0088c	e59d1000	 ldr         r1, [sp]
  00890	e3a03002	 mov         r3, #2
  00894	e0020391	 mul         r2, r1, r3
  00898	e59f3084	 ldr         r3, [pc, #0x84]
  0089c	e0833002	 add         r3, r3, r2
  008a0	e1c300b0	 strh        r0, [r3]

; 320  :                     i++;

  008a4	e59d3000	 ldr         r3, [sp]
  008a8	e2833001	 add         r3, r3, #1
  008ac	e58d3000	 str         r3, [sp]

; 321  :                 }

  008b0	eaffffca	 b           |$LN2@SetPointer|
  008b4		 |$LN1@SetPointer|

; 322  :             }

  008b4	eaffffa6	 b           |$LN5@SetPointer|
  008b8		 |$LN4@SetPointer|

; 323  :         }

  008b8	eaffff9b	 b           |$LN8@SetPointer|
  008bc		 |$LN7@SetPointer|

; 324  : 
; 325  :         m_CursorDisabled = FALSE;

  008bc	e59d3038	 ldr         r3, [sp, #0x38]
  008c0	e2832fba	 add         r2, r3, #0xBA, 30
  008c4	e3a03000	 mov         r3, #0
  008c8	e5823000	 str         r3, [r2]

; 326  :         m_CursorSize.x   = cX;

  008cc	e59d3038	 ldr         r3, [sp, #0x38]
  008d0	e2832fbd	 add         r2, r3, #0xBD, 30
  008d4	e59d304c	 ldr         r3, [sp, #0x4C]
  008d8	e5823000	 str         r3, [r2]

; 327  :         m_CursorSize.y   = cY;

  008dc	e59d3038	 ldr         r3, [sp, #0x38]
  008e0	e2832fbe	 add         r2, r3, #0xBE, 30
  008e4	e59d3050	 ldr         r3, [sp, #0x50]
  008e8	e5823000	 str         r3, [r2]

; 328  :         gxHot            = xHot;

  008ec	e59d2044	 ldr         r2, [sp, #0x44]
  008f0	e59f3028	 ldr         r3, [pc, #0x28]
  008f4	e5832000	 str         r2, [r3]

; 329  :         gyHot            = yHot;

  008f8	e59d2048	 ldr         r2, [sp, #0x48]
  008fc	e59f3018	 ldr         r3, [pc, #0x18]
  00900	e5832000	 str         r2, [r3]
  00904		 |$LN10@SetPointer|

; 330  :     }
; 331  : 
; 332  :     return S_OK;

  00904	e3a03000	 mov         r3, #0
  00908	e58d3018	 str         r3, [sp, #0x18]

; 333  : }

  0090c	e59d0018	 ldr         r0, [sp, #0x18]
  00910	e28dd030	 add         sp, sp, #0x30
  00914	e89d6000	 ldmia       sp, {sp, lr}
  00918	e12fff1e	 bx          lr
  0091c		 |$LN22@SetPointer|
  0091c		 |$LN23@SetPointer|
  0091c	00000000	 DCD         |gyHot|
  00920		 |$LN24@SetPointer|
  00920	00000000	 DCD         |gxHot|
  00924		 |$LN25@SetPointer|
  00924	00000000	 DCD         |gCursorData|
  00928		 |$LN26@SetPointer|
  00928	00000000	 DCD         |gCursorMask|
  0092c		 |$LN27@SetPointer|
  0092c	00000000	 DCD         |bDoRotation|
  00930		 |$M38655|

			 ENDP  ; |?SetPointerShape@SA2Video@@UAAJPAVGPESurf@@0HHHH@Z|, SA2Video::SetPointerShape

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38669| DCD	|$LN5@Stride|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Stride@GPESurf@@QAAHXZ| PROC		; GPESurf::Stride

; 177  :     {

  00000		 |$LN5@Stride|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38666|

; 178  :         return m_nStrideBytes;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833008	 add         r3, r3, #8
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 179  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M38667|

			 ENDP  ; |?Stride@GPESurf@@QAAHXZ|, GPESurf::Stride


  00000			 AREA	 |.pdata|, PDATA
|$T38677| DCD	|$LN5@Buffer|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Buffer@GPESurf@@QAAPAXXZ| PROC	; GPESurf::Buffer

; 201  :     {

  00000		 |$LN5@Buffer|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38674|

; 202  :         return (void *)m_pVirtAddr;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 203  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M38675|

			 ENDP  ; |?Buffer@GPESurf@@QAAPAXXZ|, GPESurf::Buffer

	EXPORT	|?CursorOn@SA2Video@@QAAXXZ|		; SA2Video::CursorOn
	IMPORT	|DispDrvrMoveCursor|

  00040			 AREA	 |.pdata|, PDATA
|$T38685| DCD	|$LN10@MovePointe|
	DCD	0x40004c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00930			 AREA	 |.text|, CODE, ARM

  00930		 |?MovePointer@SA2Video@@UAAJHH@Z| PROC	; SA2Video::MovePointer

; 340  : {

  00930		 |$LN10@MovePointe|
  00930	e1a0c00d	 mov         r12, sp
  00934	e92d0007	 stmdb       sp!, {r0 - r2}
  00938	e92d5000	 stmdb       sp!, {r12, lr}
  0093c	e24dd004	 sub         sp, sp, #4
  00940		 |$M38682|

; 341  :     if (!bDoRotation)

  00940	e59f310c	 ldr         r3, [pc, #0x10C]
  00944	e5933000	 ldr         r3, [r3]
  00948	e3530000	 cmp         r3, #0
  0094c	1a000001	 bne         |$LN5@MovePointe|

; 342  :     {
; 343  :         CursorOff();

  00950	e59d000c	 ldr         r0, [sp, #0xC]
  00954	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|
  00958		 |$LN5@MovePointe|

; 344  :     }
; 345  : 
; 346  :     if(xPosition != -1 || yPosition != -1)

  00958	e59d3010	 ldr         r3, [sp, #0x10]
  0095c	e3730001	 cmn         r3, #1
  00960	1a000002	 bne         |$LN3@MovePointe|
  00964	e59d3014	 ldr         r3, [sp, #0x14]
  00968	e3730001	 cmn         r3, #1
  0096c	0a00002b	 beq         |$LN4@MovePointe|
  00970		 |$LN3@MovePointe|

; 347  :     {
; 348  :         // enable cursor
; 349  :         DispDrvrMoveCursor(xPosition, yPosition);

  00970	e59d1014	 ldr         r1, [sp, #0x14]
  00974	e59d0010	 ldr         r0, [sp, #0x10]
  00978	eb000000	 bl          DispDrvrMoveCursor

; 350  : 
; 351  :         m_CursorRect.left   = xPosition - gxHot;

  0097c	e59d2010	 ldr         r2, [sp, #0x10]
  00980	e59f30d4	 ldr         r3, [pc, #0xD4]
  00984	e5933000	 ldr         r3, [r3]
  00988	e0422003	 sub         r2, r2, r3
  0098c	e59d300c	 ldr         r3, [sp, #0xC]
  00990	e2833fbf	 add         r3, r3, #0xBF, 30
  00994	e5832000	 str         r2, [r3]

; 352  :         m_CursorRect.right  = m_CursorRect.left + m_CursorSize.x;

  00998	e59d300c	 ldr         r3, [sp, #0xC]
  0099c	e2832fbf	 add         r2, r3, #0xBF, 30
  009a0	e59d300c	 ldr         r3, [sp, #0xC]
  009a4	e2833fbd	 add         r3, r3, #0xBD, 30
  009a8	e5922000	 ldr         r2, [r2]
  009ac	e5933000	 ldr         r3, [r3]
  009b0	e0822003	 add         r2, r2, r3
  009b4	e59d300c	 ldr         r3, [sp, #0xC]
  009b8	e2833fc1	 add         r3, r3, #0xC1, 30
  009bc	e5832000	 str         r2, [r3]

; 353  :         m_CursorRect.top    = yPosition - gyHot;

  009c0	e59d2014	 ldr         r2, [sp, #0x14]
  009c4	e59f308c	 ldr         r3, [pc, #0x8C]
  009c8	e5933000	 ldr         r3, [r3]
  009cc	e0422003	 sub         r2, r2, r3
  009d0	e59d300c	 ldr         r3, [sp, #0xC]
  009d4	e2833c03	 add         r3, r3, #3, 24
  009d8	e5832000	 str         r2, [r3]

; 354  :         m_CursorRect.bottom = m_CursorRect.top + m_CursorSize.y;

  009dc	e59d300c	 ldr         r3, [sp, #0xC]
  009e0	e2832c03	 add         r2, r3, #3, 24
  009e4	e59d300c	 ldr         r3, [sp, #0xC]
  009e8	e2833fbe	 add         r3, r3, #0xBE, 30
  009ec	e5922000	 ldr         r2, [r2]
  009f0	e5933000	 ldr         r3, [r3]
  009f4	e0822003	 add         r2, r2, r3
  009f8	e59d300c	 ldr         r3, [sp, #0xC]
  009fc	e2833fc2	 add         r3, r3, #0xC2, 30
  00a00	e5832000	 str         r2, [r3]

; 355  : 
; 356  :         if (!bDoRotation)

  00a04	e59f3048	 ldr         r3, [pc, #0x48]
  00a08	e5933000	 ldr         r3, [r3]
  00a0c	e3530000	 cmp         r3, #0
  00a10	1a000001	 bne         |$LN2@MovePointe|

; 357  :         {
; 358  :             CursorOn();

  00a14	e59d000c	 ldr         r0, [sp, #0xC]
  00a18	eb000000	 bl          |?CursorOn@SA2Video@@QAAXXZ|
  00a1c		 |$LN2@MovePointe|

; 359  :         }
; 360  :     }
; 361  :     else

  00a1c	ea000004	 b           |$LN1@MovePointe|
  00a20		 |$LN4@MovePointe|

; 362  :     {
; 363  :         // disable cursor
; 364  :         DispDrvrMoveCursor(DispDrvr_cxScreen, DispDrvr_cyScreen);

  00a20	e59f3028	 ldr         r3, [pc, #0x28]
  00a24	e5931000	 ldr         r1, [r3]
  00a28	e59f301c	 ldr         r3, [pc, #0x1C]
  00a2c	e5930000	 ldr         r0, [r3]
  00a30	eb000000	 bl          DispDrvrMoveCursor
  00a34		 |$LN1@MovePointe|

; 365  :     }
; 366  : 
; 367  :     return S_OK;

  00a34	e3a03000	 mov         r3, #0
  00a38	e58d3000	 str         r3, [sp]

; 368  : }

  00a3c	e59d0000	 ldr         r0, [sp]
  00a40	e28dd004	 add         sp, sp, #4
  00a44	e89d6000	 ldmia       sp, {sp, lr}
  00a48	e12fff1e	 bx          lr
  00a4c		 |$LN11@MovePointe|
  00a4c		 |$LN12@MovePointe|
  00a4c	00000000	 DCD         |DispDrvr_cxScreen|
  00a50		 |$LN13@MovePointe|
  00a50	00000000	 DCD         |DispDrvr_cyScreen|
  00a54		 |$LN14@MovePointe|
  00a54	00000000	 DCD         |bDoRotation|
  00a58		 |$LN15@MovePointe|
  00a58	00000000	 DCD         |gyHot|
  00a5c		 |$LN16@MovePointe|
  00a5c	00000000	 DCD         |gxHot|
  00a60		 |$M38683|

			 ENDP  ; |?MovePointer@SA2Video@@UAAJHH@Z|, SA2Video::MovePointer


  00048			 AREA	 |.pdata|, PDATA
|$T38696| DCD	|$LN5@WaitForNot|
	DCD	0x40000503
; Function compile flags: /Odtp

  00a60			 AREA	 |.text|, CODE, ARM

  00a60		 |?WaitForNotBusy@SA2Video@@UAAXXZ| PROC ; SA2Video::WaitForNotBusy

; 372  : {

  00a60		 |$LN5@WaitForNot|
  00a60	e1a0c00d	 mov         r12, sp
  00a64	e92d0001	 stmdb       sp!, {r0}
  00a68	e92d5000	 stmdb       sp!, {r12, lr}
  00a6c		 |$M38693|

; 373  :     return;
; 374  : }

  00a6c	e89d6000	 ldmia       sp, {sp, lr}
  00a70	e12fff1e	 bx          lr
  00a74		 |$M38694|

			 ENDP  ; |?WaitForNotBusy@SA2Video@@UAAXXZ|, SA2Video::WaitForNotBusy


  00050			 AREA	 |.pdata|, PDATA
|$T38702| DCD	|$LN5@IsBusy|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00a74			 AREA	 |.text|, CODE, ARM

  00a74		 |?IsBusy@SA2Video@@UAAHXZ| PROC	; SA2Video::IsBusy

; 378  : {

  00a74		 |$LN5@IsBusy|
  00a74	e1a0c00d	 mov         r12, sp
  00a78	e92d0001	 stmdb       sp!, {r0}
  00a7c	e92d5000	 stmdb       sp!, {r12, lr}
  00a80	e24dd004	 sub         sp, sp, #4
  00a84		 |$M38699|

; 379  :     return 0;    // Never busy as there is no acceleration

  00a84	e3a03000	 mov         r3, #0
  00a88	e58d3000	 str         r3, [sp]

; 380  : }

  00a8c	e59d0000	 ldr         r0, [sp]
  00a90	e28dd004	 add         sp, sp, #4
  00a94	e89d6000	 ldmia       sp, {sp, lr}
  00a98	e12fff1e	 bx          lr
  00a9c		 |$M38700|

			 ENDP  ; |?IsBusy@SA2Video@@UAAHXZ|, SA2Video::IsBusy


  00058			 AREA	 |.pdata|, PDATA
|$T38707| DCD	|$LN5@GetPhysica@2|
	DCD	0x40001403
; Function compile flags: /Odtp

  00a9c			 AREA	 |.text|, CODE, ARM

  00a9c		 |?GetPhysicalVideoMemory@SA2Video@@UAAXPAK0@Z| PROC ; SA2Video::GetPhysicalVideoMemory

; 387  : {

  00a9c		 |$LN5@GetPhysica@2|
  00a9c	e1a0c00d	 mov         r12, sp
  00aa0	e92d0007	 stmdb       sp!, {r0 - r2}
  00aa4	e92d5000	 stmdb       sp!, {r12, lr}
  00aa8		 |$M38704|

; 388  :     *pPhysicalMemoryBase = (ULONG)FRAME_BUFFER_0_BASE_VIRTUAL;

  00aa8	e59f3038	 ldr         r3, [pc, #0x38]
  00aac	e5933000	 ldr         r3, [r3]
  00ab0	e2832d12	 add         r2, r3, #0x12, 26
  00ab4	e59d300c	 ldr         r3, [sp, #0xC]
  00ab8	e5832000	 str         r2, [r3]

; 389  :     *pVideoMemorySize    = DispDrvr_cdwStride * DispDrvr_cyScreen;

  00abc	e59f3020	 ldr         r3, [pc, #0x20]
  00ac0	e5931000	 ldr         r1, [r3]
  00ac4	e59f3014	 ldr         r3, [pc, #0x14]
  00ac8	e5933000	 ldr         r3, [r3]
  00acc	e0020391	 mul         r2, r1, r3
  00ad0	e59d3010	 ldr         r3, [sp, #0x10]
  00ad4	e5832000	 str         r2, [r3]

; 390  : }

  00ad8	e89d6000	 ldmia       sp, {sp, lr}
  00adc	e12fff1e	 bx          lr
  00ae0		 |$LN6@GetPhysica@2|
  00ae0		 |$LN7@GetPhysica@2|
  00ae0	00000000	 DCD         |DispDrvr_cyScreen|
  00ae4		 |$LN8@GetPhysica@2|
  00ae4	00000000	 DCD         |DispDrvr_cdwStride|
  00ae8		 |$LN9@GetPhysica@2|
  00ae8	00000000	 DCD         |g_DisplayBaseVirtual|
  00aec		 |$M38705|

			 ENDP  ; |?GetPhysicalVideoMemory@SA2Video@@UAAXPAK0@Z|, SA2Video::GetPhysicalVideoMemory

	EXPORT	|?GetVirtualVideoMemory@SA2Video@@QAAXPAK0@Z| ; SA2Video::GetVirtualVideoMemory

  00060			 AREA	 |.pdata|, PDATA
|$T38716| DCD	|$LN5@GetVirtual|
	DCD	0x40001804
; Function compile flags: /Odtp

  00aec			 AREA	 |.text|, CODE, ARM

  00aec		 |?GetVirtualVideoMemory@SA2Video@@QAAXPAK0@Z| PROC ; SA2Video::GetVirtualVideoMemory

; 397  : {

  00aec		 |$LN5@GetVirtual|
  00aec	e1a0c00d	 mov         r12, sp
  00af0	e92d0007	 stmdb       sp!, {r0 - r2}
  00af4	e92d5000	 stmdb       sp!, {r12, lr}
  00af8	e24dd004	 sub         sp, sp, #4
  00afc		 |$M38713|

; 398  :     *pVirtualMemoryBase = (unsigned)(m_pPrimarySurface->Buffer());

  00afc	e59d300c	 ldr         r3, [sp, #0xC]
  00b00	e2833004	 add         r3, r3, #4
  00b04	e5930000	 ldr         r0, [r3]
  00b08	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00b0c	e58d0000	 str         r0, [sp]
  00b10	e59d2000	 ldr         r2, [sp]
  00b14	e59d3010	 ldr         r3, [sp, #0x10]
  00b18	e5832000	 str         r2, [r3]

; 399  :     *pVideoMemorySize   = DispDrvr_cdwStride * DispDrvr_cyScreen;

  00b1c	e59f3024	 ldr         r3, [pc, #0x24]
  00b20	e5931000	 ldr         r1, [r3]
  00b24	e59f3018	 ldr         r3, [pc, #0x18]
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e0020391	 mul         r2, r1, r3
  00b30	e59d3014	 ldr         r3, [sp, #0x14]
  00b34	e5832000	 str         r2, [r3]

; 400  : }

  00b38	e28dd004	 add         sp, sp, #4
  00b3c	e89d6000	 ldmia       sp, {sp, lr}
  00b40	e12fff1e	 bx          lr
  00b44		 |$LN6@GetVirtual|
  00b44		 |$LN7@GetVirtual|
  00b44	00000000	 DCD         |DispDrvr_cyScreen|
  00b48		 |$LN8@GetVirtual|
  00b48	00000000	 DCD         |DispDrvr_cdwStride|
  00b4c		 |$M38714|

			 ENDP  ; |?GetVirtualVideoMemory@SA2Video@@QAAXPAK0@Z|, SA2Video::GetVirtualVideoMemory

	IMPORT	|??0DDGPESurf@@QAA@HHHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z| ; DDGPESurf::DDGPESurf
	IMPORT	|EGPEFormatToBpp|

  00068			 AREA	 |.pdata|, PDATA
|$T38734| DCD	|$LN13@AllocSurfa|
	DCD	0x40006904
; Function compile flags: /Odtp

  00b4c			 AREA	 |.text|, CODE, ARM

  00b4c		 |?AllocSurface@SA2Video@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z| PROC ; SA2Video::AllocSurface

; 411  : {

  00b4c		 |$LN13@AllocSurfa|
  00b4c	e1a0c00d	 mov         r12, sp
  00b50	e92d000f	 stmdb       sp!, {r0 - r3}
  00b54	e92d5000	 stmdb       sp!, {r12, lr}
  00b58	e24dd044	 sub         sp, sp, #0x44
  00b5c		 |$M38731|

; 412  :     if (surfaceFlags & GPE_REQUIRE_VIDEO_MEMORY)

  00b5c	e59d3064	 ldr         r3, [sp, #0x64]
  00b60	e3130001	 tst         r3, #1
  00b64	0a000006	 beq         |$LN4@AllocSurfa|

; 413  :     {
; 414  :         *ppSurf = NULL;

  00b68	e59d2050	 ldr         r2, [sp, #0x50]
  00b6c	e3a03000	 mov         r3, #0
  00b70	e5823000	 str         r3, [r2]

; 415  : 
; 416  :         return E_OUTOFMEMORY;

  00b74	e3a0313a	 mov         r3, #0x3A, 2
  00b78	e3833807	 orr         r3, r3, #7, 16
  00b7c	e58d3020	 str         r3, [sp, #0x20]
  00b80	ea000055	 b           |$LN5@AllocSurfa|
  00b84		 |$LN4@AllocSurfa|

; 417  :     }
; 418  : 
; 419  :     DWORD SurfBpp       = EGPEFormatToBpp[format];

  00b84	e59d105c	 ldr         r1, [sp, #0x5C]
  00b88	e3a03004	 mov         r3, #4
  00b8c	e0020391	 mul         r2, r1, r3
  00b90	e59f3154	 ldr         r3, [pc, #0x154]
  00b94	e0833002	 add         r3, r3, r2
  00b98	e5933000	 ldr         r3, [r3]
  00b9c	e58d3010	 str         r3, [sp, #0x10]

; 420  :     DWORD stride        = ((SurfBpp * width + 31) >> 5) << 2;

  00ba0	e59d2010	 ldr         r2, [sp, #0x10]
  00ba4	e59d3054	 ldr         r3, [sp, #0x54]
  00ba8	e0030392	 mul         r3, r2, r3
  00bac	e283301f	 add         r3, r3, #0x1F
  00bb0	e1a032a3	 mov         r3, r3, lsr #5
  00bb4	e1a03103	 mov         r3, r3, lsl #2
  00bb8	e58d300c	 str         r3, [sp, #0xC]

; 421  :     DWORD nSurfaceBytes = stride * height;

  00bbc	e59d200c	 ldr         r2, [sp, #0xC]
  00bc0	e59d3058	 ldr         r3, [sp, #0x58]
  00bc4	e0030392	 mul         r3, r2, r3
  00bc8	e58d3008	 str         r3, [sp, #8]

; 422  : 
; 423  :     *ppSurf = new DDGPESurf(width, height, stride, format, pixelFormat);

  00bcc	e3a0007c	 mov         r0, #0x7C
  00bd0	eb000000	 bl          |??2@YAPAXI@Z|
  00bd4	e58d002c	 str         r0, [sp, #0x2C]
  00bd8	e59d302c	 ldr         r3, [sp, #0x2C]
  00bdc	e58d3014	 str         r3, [sp, #0x14]
  00be0	e59d3014	 ldr         r3, [sp, #0x14]
  00be4	e3530000	 cmp         r3, #0
  00be8	0a00000c	 beq         |$LN7@AllocSurfa|
  00bec	e59d3060	 ldr         r3, [sp, #0x60]
  00bf0	e58d3004	 str         r3, [sp, #4]
  00bf4	e59d305c	 ldr         r3, [sp, #0x5C]
  00bf8	e58d3000	 str         r3, [sp]
  00bfc	e59d300c	 ldr         r3, [sp, #0xC]
  00c00	e59d2058	 ldr         r2, [sp, #0x58]
  00c04	e59d1054	 ldr         r1, [sp, #0x54]
  00c08	e59d0014	 ldr         r0, [sp, #0x14]
  00c0c	eb000000	 bl          |??0DDGPESurf@@QAA@HHHW4EGPEFormat@@W4EDDGPEPixelFormat@@@Z|
  00c10	e58d0030	 str         r0, [sp, #0x30]
  00c14	e59d3030	 ldr         r3, [sp, #0x30]
  00c18	e58d3034	 str         r3, [sp, #0x34]
  00c1c	ea000001	 b           |$LN8@AllocSurfa|
  00c20		 |$LN7@AllocSurfa|
  00c20	e3a03000	 mov         r3, #0
  00c24	e58d3034	 str         r3, [sp, #0x34]
  00c28		 |$LN8@AllocSurfa|
  00c28	e59d2034	 ldr         r2, [sp, #0x34]
  00c2c	e59d3050	 ldr         r3, [sp, #0x50]
  00c30	e5832000	 str         r2, [r3]

; 424  : 
; 425  :     if (NULL != *ppSurf)

  00c34	e59d3050	 ldr         r3, [sp, #0x50]
  00c38	e5933000	 ldr         r3, [r3]
  00c3c	e3530000	 cmp         r3, #0
  00c40	0a000022	 beq         |$LN3@AllocSurfa|

; 426  :     {
; 427  :         if (((*ppSurf)->Buffer()) == NULL)

  00c44	e59d3050	 ldr         r3, [sp, #0x50]
  00c48	e5930000	 ldr         r0, [r3]
  00c4c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00c50	e58d0038	 str         r0, [sp, #0x38]
  00c54	e59d3038	 ldr         r3, [sp, #0x38]
  00c58	e3530000	 cmp         r3, #0
  00c5c	1a000018	 bne         |$LN2@AllocSurfa|

; 428  :         {
; 429  :             delete *ppSurf;

  00c60	e59d3050	 ldr         r3, [sp, #0x50]
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e58d301c	 str         r3, [sp, #0x1C]
  00c6c	e59d301c	 ldr         r3, [sp, #0x1C]
  00c70	e58d3018	 str         r3, [sp, #0x18]
  00c74	e59d3018	 ldr         r3, [sp, #0x18]
  00c78	e3530000	 cmp         r3, #0
  00c7c	0a00000a	 beq         |$LN9@AllocSurfa|
  00c80	e3a01001	 mov         r1, #1
  00c84	e59d3018	 ldr         r3, [sp, #0x18]
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e59d0018	 ldr         r0, [sp, #0x18]
  00c90	e5933000	 ldr         r3, [r3]
  00c94	e1a0e00f	 mov         lr, pc
  00c98	e12fff13	 bx          r3
  00c9c	e58d003c	 str         r0, [sp, #0x3C]
  00ca0	e59d303c	 ldr         r3, [sp, #0x3C]
  00ca4	e58d3040	 str         r3, [sp, #0x40]
  00ca8	ea000001	 b           |$LN10@AllocSurfa|
  00cac		 |$LN9@AllocSurfa|
  00cac	e3a03000	 mov         r3, #0
  00cb0	e58d3040	 str         r3, [sp, #0x40]
  00cb4		 |$LN10@AllocSurfa|

; 430  :             *ppSurf = NULL;

  00cb4	e59d2050	 ldr         r2, [sp, #0x50]
  00cb8	e3a03000	 mov         r3, #0
  00cbc	e5823000	 str         r3, [r2]

; 431  :         }
; 432  :         else

  00cc0	ea000002	 b           |$LN1@AllocSurfa|
  00cc4		 |$LN2@AllocSurfa|

; 433  :         {
; 434  :             return S_OK;

  00cc4	e3a03000	 mov         r3, #0
  00cc8	e58d3020	 str         r3, [sp, #0x20]
  00ccc	ea000002	 b           |$LN5@AllocSurfa|
  00cd0		 |$LN1@AllocSurfa|
  00cd0		 |$LN3@AllocSurfa|

; 435  :         }
; 436  :     }
; 437  : 
; 438  :     return E_OUTOFMEMORY;

  00cd0	e3a0313a	 mov         r3, #0x3A, 2
  00cd4	e3833807	 orr         r3, r3, #7, 16
  00cd8	e58d3020	 str         r3, [sp, #0x20]
  00cdc		 |$LN5@AllocSurfa|

; 439  : }

  00cdc	e59d0020	 ldr         r0, [sp, #0x20]
  00ce0	e28dd044	 add         sp, sp, #0x44
  00ce4	e89d6000	 ldmia       sp, {sp, lr}
  00ce8	e12fff1e	 bx          lr
  00cec		 |$LN14@AllocSurfa|
  00cec		 |$LN15@AllocSurfa|
  00cec	00000000	 DCD         |EGPEFormatToBpp|
  00cf0		 |$M38732|

			 ENDP  ; |?AllocSurface@SA2Video@@UAAJPAPAVDDGPESurf@@HHW4EGPEFormat@@W4EDDGPEPixelFormat@@H@Z|, SA2Video::AllocSurface

	IMPORT	|??0GPESurf@@QAA@HHW4EGPEFormat@@@Z|	; GPESurf::GPESurf

  00070			 AREA	 |.pdata|, PDATA
|$T38749| DCD	|$LN13@AllocSurfa@2|
	DCD	0x40004c04
; Function compile flags: /Odtp

  00cf0			 AREA	 |.text|, CODE, ARM

  00cf0		 |?AllocSurface@SA2Video@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z| PROC ; SA2Video::AllocSurface

; 449  : {

  00cf0		 |$LN13@AllocSurfa@2|
  00cf0	e1a0c00d	 mov         r12, sp
  00cf4	e92d000f	 stmdb       sp!, {r0 - r3}
  00cf8	e92d5000	 stmdb       sp!, {r12, lr}
  00cfc	e24dd028	 sub         sp, sp, #0x28
  00d00		 |$M38746|

; 450  :     if (surfaceFlags & GPE_REQUIRE_VIDEO_MEMORY)

  00d00	e59d3044	 ldr         r3, [sp, #0x44]
  00d04	e3130001	 tst         r3, #1
  00d08	0a000003	 beq         |$LN4@AllocSurfa@2|

; 451  :     {
; 452  :         // Can't allocate video-memory surfaces in the SA2Video environment
; 453  :         return E_OUTOFMEMORY;

  00d0c	e3a0313a	 mov         r3, #0x3A, 2
  00d10	e3833807	 orr         r3, r3, #7, 16
  00d14	e58d300c	 str         r3, [sp, #0xC]
  00d18	ea00003c	 b           |$LN5@AllocSurfa@2|
  00d1c		 |$LN4@AllocSurfa@2|

; 454  :     }
; 455  : 
; 456  :     // Allocate from system memory
; 457  :     *surface = new GPESurf(width,height,format);

  00d1c	e3a0004c	 mov         r0, #0x4C
  00d20	eb000000	 bl          |??2@YAPAXI@Z|
  00d24	e58d0010	 str         r0, [sp, #0x10]
  00d28	e59d3010	 ldr         r3, [sp, #0x10]
  00d2c	e58d3000	 str         r3, [sp]
  00d30	e59d3000	 ldr         r3, [sp]
  00d34	e3530000	 cmp         r3, #0
  00d38	0a000008	 beq         |$LN7@AllocSurfa@2|
  00d3c	e59d3040	 ldr         r3, [sp, #0x40]
  00d40	e59d203c	 ldr         r2, [sp, #0x3C]
  00d44	e59d1038	 ldr         r1, [sp, #0x38]
  00d48	e59d0000	 ldr         r0, [sp]
  00d4c	eb000000	 bl          |??0GPESurf@@QAA@HHW4EGPEFormat@@@Z|
  00d50	e58d0014	 str         r0, [sp, #0x14]
  00d54	e59d3014	 ldr         r3, [sp, #0x14]
  00d58	e58d3018	 str         r3, [sp, #0x18]
  00d5c	ea000001	 b           |$LN8@AllocSurfa@2|
  00d60		 |$LN7@AllocSurfa@2|
  00d60	e3a03000	 mov         r3, #0
  00d64	e58d3018	 str         r3, [sp, #0x18]
  00d68		 |$LN8@AllocSurfa@2|
  00d68	e59d2018	 ldr         r2, [sp, #0x18]
  00d6c	e59d3034	 ldr         r3, [sp, #0x34]
  00d70	e5832000	 str         r2, [r3]

; 458  : 
; 459  :     if (*surface != NULL)

  00d74	e59d3034	 ldr         r3, [sp, #0x34]
  00d78	e5933000	 ldr         r3, [r3]
  00d7c	e3530000	 cmp         r3, #0
  00d80	0a00001f	 beq         |$LN3@AllocSurfa@2|

; 460  :     {
; 461  :         // Check that the bits were allocated succesfully
; 462  :         if (((*surface)->Buffer()) == NULL)

  00d84	e59d3034	 ldr         r3, [sp, #0x34]
  00d88	e5930000	 ldr         r0, [r3]
  00d8c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00d90	e58d001c	 str         r0, [sp, #0x1C]
  00d94	e59d301c	 ldr         r3, [sp, #0x1C]
  00d98	e3530000	 cmp         r3, #0
  00d9c	1a000015	 bne         |$LN2@AllocSurfa@2|

; 463  :         {
; 464  :             delete *surface;

  00da0	e59d3034	 ldr         r3, [sp, #0x34]
  00da4	e5933000	 ldr         r3, [r3]
  00da8	e58d3008	 str         r3, [sp, #8]
  00dac	e59d3008	 ldr         r3, [sp, #8]
  00db0	e58d3004	 str         r3, [sp, #4]
  00db4	e59d3004	 ldr         r3, [sp, #4]
  00db8	e3530000	 cmp         r3, #0
  00dbc	0a00000a	 beq         |$LN9@AllocSurfa@2|
  00dc0	e3a01001	 mov         r1, #1
  00dc4	e59d3004	 ldr         r3, [sp, #4]
  00dc8	e5933000	 ldr         r3, [r3]
  00dcc	e59d0004	 ldr         r0, [sp, #4]
  00dd0	e5933000	 ldr         r3, [r3]
  00dd4	e1a0e00f	 mov         lr, pc
  00dd8	e12fff13	 bx          r3
  00ddc	e58d0020	 str         r0, [sp, #0x20]
  00de0	e59d3020	 ldr         r3, [sp, #0x20]
  00de4	e58d3024	 str         r3, [sp, #0x24]
  00de8	ea000001	 b           |$LN10@AllocSurfa@2|
  00dec		 |$LN9@AllocSurfa@2|
  00dec	e3a03000	 mov         r3, #0
  00df0	e58d3024	 str         r3, [sp, #0x24]
  00df4		 |$LN10@AllocSurfa@2|

; 465  :         }
; 466  :         else

  00df4	ea000002	 b           |$LN1@AllocSurfa@2|
  00df8		 |$LN2@AllocSurfa@2|

; 467  :         {
; 468  :             return S_OK;

  00df8	e3a03000	 mov         r3, #0
  00dfc	e58d300c	 str         r3, [sp, #0xC]
  00e00	ea000002	 b           |$LN5@AllocSurfa@2|
  00e04		 |$LN1@AllocSurfa@2|
  00e04		 |$LN3@AllocSurfa@2|

; 469  :         }
; 470  :     }
; 471  : 
; 472  :     return E_OUTOFMEMORY;

  00e04	e3a0313a	 mov         r3, #0x3A, 2
  00e08	e3833807	 orr         r3, r3, #7, 16
  00e0c	e58d300c	 str         r3, [sp, #0xC]
  00e10		 |$LN5@AllocSurfa@2|

; 473  : }

  00e10	e59d000c	 ldr         r0, [sp, #0xC]
  00e14	e28dd028	 add         sp, sp, #0x28
  00e18	e89d6000	 ldmia       sp, {sp, lr}
  00e1c	e12fff1e	 bx          lr
  00e20		 |$M38747|

			 ENDP  ; |?AllocSurface@SA2Video@@UAAJPAPAVGPESurf@@HHW4EGPEFormat@@H@Z|, SA2Video::AllocSurface

	EXPORT	|??_C@_1DA@CLIHLKHC@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?WrappedEmulatedLine@SA2Video@@AAAJPAUGPELineParms@@@Z| ; SA2Video::WrappedEmulatedLine
	IMPORT	|?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z| ; GPE::EmulatedLine
	IMPORT	|?RotateRectlBack@GPE@@QAAXPAU_RECTL@@@Z| ; GPE::RotateRectlBack
	IMPORT	|?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|	; GPE::RotateRectl
	IMPORT	|__rt_udiv|

  00078			 AREA	 |.pdata|, PDATA
|$T38768| DCD	|$LN36@WrappedEmu|
	DCD	0x40014a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@CLIHLKHC@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00e20			 AREA	 |.text|, CODE, ARM

  00e20		 |?WrappedEmulatedLine@SA2Video@@AAAJPAUGPELineParms@@@Z| PROC ; SA2Video::WrappedEmulatedLine

; 479  : {

  00e20		 |$LN36@WrappedEmu|
  00e20	e1a0c00d	 mov         r12, sp
  00e24	e92d0003	 stmdb       sp!, {r0, r1}
  00e28	e92d5000	 stmdb       sp!, {r12, lr}
  00e2c	e24dd028	 sub         sp, sp, #0x28
  00e30		 |$M38765|

; 480  :     SCODE retval;
; 481  :     RECT  bounds;
; 482  :     int   N_plus_1;  // Minor length of bounding rect + 1
; 483  : 
; 484  :     // calculate the bounding-rect to determine overlap with cursor
; 485  :     if (pParms->dN)   // The line has a diagonal component (we'll refresh the bounding rect)

  00e30	e59d3034	 ldr         r3, [sp, #0x34]
  00e34	e2833014	 add         r3, r3, #0x14
  00e38	e5933000	 ldr         r3, [r3]
  00e3c	e3530000	 cmp         r3, #0
  00e40	0a00000d	 beq         |$LN19@WrappedEmu|

; 486  :     {
; 487  :         N_plus_1 = 2 + ((pParms->cPels * pParms->dN) / pParms->dM);

  00e44	e59d3034	 ldr         r3, [sp, #0x34]
  00e48	e283200c	 add         r2, r3, #0xC
  00e4c	e59d3034	 ldr         r3, [sp, #0x34]
  00e50	e2833014	 add         r3, r3, #0x14
  00e54	e5922000	 ldr         r2, [r2]
  00e58	e5933000	 ldr         r3, [r3]
  00e5c	e0010392	 mul         r1, r2, r3
  00e60	e59d3034	 ldr         r3, [sp, #0x34]
  00e64	e2833010	 add         r3, r3, #0x10
  00e68	e5930000	 ldr         r0, [r3]
  00e6c	eb000000	 bl          __rt_udiv
  00e70	e2803002	 add         r3, r0, #2
  00e74	e58d3000	 str         r3, [sp]

; 488  :     }
; 489  :     else

  00e78	ea000001	 b           |$LN18@WrappedEmu|
  00e7c		 |$LN19@WrappedEmu|

; 490  :     {
; 491  :         N_plus_1 = 1;

  00e7c	e3a03001	 mov         r3, #1
  00e80	e58d3000	 str         r3, [sp]
  00e84		 |$LN18@WrappedEmu|

; 492  :     }
; 493  : 
; 494  :     switch(pParms->iDir)

  00e84	e59d3034	 ldr         r3, [sp, #0x34]
  00e88	e283301c	 add         r3, r3, #0x1C
  00e8c	e5933000	 ldr         r3, [r3]
  00e90	e58d301c	 str         r3, [sp, #0x1C]
  00e94	e59d301c	 ldr         r3, [sp, #0x1C]
  00e98	e3530007	 cmp         r3, #7
  00e9c	8a0000c0	 bhi         |$LN7@WrappedEmu|
  00ea0	e59d201c	 ldr         r2, [sp, #0x1C]
  00ea4	e1a03102	 mov         r3, r2, lsl #2
  00ea8	e083300f	 add         r3, r3, pc
  00eac	e5933004	 ldr         r3, [r3, #4]
  00eb0	e08ff003	 add         pc, pc, r3
  00eb4		 |$LN25@WrappedEmu|
  00eb4		 |$LN24@WrappedEmu|
  00eb4		 |$LN26@WrappedEmu|
  00eb4	0000001c	 DCD         0x1c
  00eb8		 |$LN27@WrappedEmu|
  00eb8	00000074	 DCD         0x74
  00ebc		 |$LN28@WrappedEmu|
  00ebc	000000cc	 DCD         0xcc
  00ec0		 |$LN29@WrappedEmu|
  00ec0	00000128	 DCD         0x128
  00ec4		 |$LN30@WrappedEmu|
  00ec4	00000180	 DCD         0x180
  00ec8		 |$LN31@WrappedEmu|
  00ec8	000001dc	 DCD         0x1dc
  00ecc		 |$LN32@WrappedEmu|
  00ecc	00000238	 DCD         0x238
  00ed0		 |$LN33@WrappedEmu|
  00ed0	00000290	 DCD         0x290
  00ed4		 |$LN15@WrappedEmu|

; 495  :     {
; 496  :         case 0:
; 497  :             bounds.left   = pParms->xStart;

  00ed4	e59d3034	 ldr         r3, [sp, #0x34]
  00ed8	e2833004	 add         r3, r3, #4
  00edc	e5933000	 ldr         r3, [r3]
  00ee0	e58d3008	 str         r3, [sp, #8]

; 498  :             bounds.top    = pParms->yStart;

  00ee4	e59d3034	 ldr         r3, [sp, #0x34]
  00ee8	e2833008	 add         r3, r3, #8
  00eec	e5933000	 ldr         r3, [r3]
  00ef0	e58d300c	 str         r3, [sp, #0xC]

; 499  :             bounds.right  = pParms->xStart + pParms->cPels + 1;

  00ef4	e59d3034	 ldr         r3, [sp, #0x34]
  00ef8	e2832004	 add         r2, r3, #4
  00efc	e59d3034	 ldr         r3, [sp, #0x34]
  00f00	e283300c	 add         r3, r3, #0xC
  00f04	e5922000	 ldr         r2, [r2]
  00f08	e5933000	 ldr         r3, [r3]
  00f0c	e0823003	 add         r3, r2, r3
  00f10	e2833001	 add         r3, r3, #1
  00f14	e58d3010	 str         r3, [sp, #0x10]

; 500  :             bounds.bottom = bounds.top + N_plus_1;

  00f18	e59d200c	 ldr         r2, [sp, #0xC]
  00f1c	e59d3000	 ldr         r3, [sp]
  00f20	e0823003	 add         r3, r2, r3
  00f24	e58d3014	 str         r3, [sp, #0x14]

; 501  :             break;

  00f28	ea0000ae	 b           |$LN16@WrappedEmu|
  00f2c		 |$LN14@WrappedEmu|

; 502  : 
; 503  :         case 1:
; 504  :             bounds.left   = pParms->xStart;

  00f2c	e59d3034	 ldr         r3, [sp, #0x34]
  00f30	e2833004	 add         r3, r3, #4
  00f34	e5933000	 ldr         r3, [r3]
  00f38	e58d3008	 str         r3, [sp, #8]

; 505  :             bounds.top    = pParms->yStart;

  00f3c	e59d3034	 ldr         r3, [sp, #0x34]
  00f40	e2833008	 add         r3, r3, #8
  00f44	e5933000	 ldr         r3, [r3]
  00f48	e58d300c	 str         r3, [sp, #0xC]

; 506  :             bounds.bottom = pParms->yStart + pParms->cPels + 1;

  00f4c	e59d3034	 ldr         r3, [sp, #0x34]
  00f50	e2832008	 add         r2, r3, #8
  00f54	e59d3034	 ldr         r3, [sp, #0x34]
  00f58	e283300c	 add         r3, r3, #0xC
  00f5c	e5922000	 ldr         r2, [r2]
  00f60	e5933000	 ldr         r3, [r3]
  00f64	e0823003	 add         r3, r2, r3
  00f68	e2833001	 add         r3, r3, #1
  00f6c	e58d3014	 str         r3, [sp, #0x14]

; 507  :             bounds.right  = bounds.left + N_plus_1;

  00f70	e59d2008	 ldr         r2, [sp, #8]
  00f74	e59d3000	 ldr         r3, [sp]
  00f78	e0823003	 add         r3, r2, r3
  00f7c	e58d3010	 str         r3, [sp, #0x10]

; 508  :             break;

  00f80	ea000098	 b           |$LN16@WrappedEmu|
  00f84		 |$LN13@WrappedEmu|

; 509  : 
; 510  :         case 2:
; 511  :             bounds.right  = pParms->xStart + 1;

  00f84	e59d3034	 ldr         r3, [sp, #0x34]
  00f88	e2833004	 add         r3, r3, #4
  00f8c	e5933000	 ldr         r3, [r3]
  00f90	e2833001	 add         r3, r3, #1
  00f94	e58d3010	 str         r3, [sp, #0x10]

; 512  :             bounds.top    = pParms->yStart;

  00f98	e59d3034	 ldr         r3, [sp, #0x34]
  00f9c	e2833008	 add         r3, r3, #8
  00fa0	e5933000	 ldr         r3, [r3]
  00fa4	e58d300c	 str         r3, [sp, #0xC]

; 513  :             bounds.bottom = pParms->yStart + pParms->cPels + 1;

  00fa8	e59d3034	 ldr         r3, [sp, #0x34]
  00fac	e2832008	 add         r2, r3, #8
  00fb0	e59d3034	 ldr         r3, [sp, #0x34]
  00fb4	e283300c	 add         r3, r3, #0xC
  00fb8	e5922000	 ldr         r2, [r2]
  00fbc	e5933000	 ldr         r3, [r3]
  00fc0	e0823003	 add         r3, r2, r3
  00fc4	e2833001	 add         r3, r3, #1
  00fc8	e58d3014	 str         r3, [sp, #0x14]

; 514  :             bounds.left   = bounds.right - N_plus_1;

  00fcc	e59d2010	 ldr         r2, [sp, #0x10]
  00fd0	e59d3000	 ldr         r3, [sp]
  00fd4	e0423003	 sub         r3, r2, r3
  00fd8	e58d3008	 str         r3, [sp, #8]

; 515  :             break;

  00fdc	ea000081	 b           |$LN16@WrappedEmu|
  00fe0		 |$LN12@WrappedEmu|

; 516  : 
; 517  :         case 3:
; 518  :             bounds.right  = pParms->xStart + 1;

  00fe0	e59d3034	 ldr         r3, [sp, #0x34]
  00fe4	e2833004	 add         r3, r3, #4
  00fe8	e5933000	 ldr         r3, [r3]
  00fec	e2833001	 add         r3, r3, #1
  00ff0	e58d3010	 str         r3, [sp, #0x10]

; 519  :             bounds.top    = pParms->yStart;

  00ff4	e59d3034	 ldr         r3, [sp, #0x34]
  00ff8	e2833008	 add         r3, r3, #8
  00ffc	e5933000	 ldr         r3, [r3]
  01000	e58d300c	 str         r3, [sp, #0xC]

; 520  :             bounds.left   = pParms->xStart - pParms->cPels;

  01004	e59d3034	 ldr         r3, [sp, #0x34]
  01008	e2832004	 add         r2, r3, #4
  0100c	e59d3034	 ldr         r3, [sp, #0x34]
  01010	e283300c	 add         r3, r3, #0xC
  01014	e5922000	 ldr         r2, [r2]
  01018	e5933000	 ldr         r3, [r3]
  0101c	e0423003	 sub         r3, r2, r3
  01020	e58d3008	 str         r3, [sp, #8]

; 521  :             bounds.bottom = bounds.top + N_plus_1;

  01024	e59d200c	 ldr         r2, [sp, #0xC]
  01028	e59d3000	 ldr         r3, [sp]
  0102c	e0823003	 add         r3, r2, r3
  01030	e58d3014	 str         r3, [sp, #0x14]

; 522  :             break;

  01034	ea00006b	 b           |$LN16@WrappedEmu|
  01038		 |$LN11@WrappedEmu|

; 523  : 
; 524  :         case 4:
; 525  :             bounds.right  = pParms->xStart + 1;

  01038	e59d3034	 ldr         r3, [sp, #0x34]
  0103c	e2833004	 add         r3, r3, #4
  01040	e5933000	 ldr         r3, [r3]
  01044	e2833001	 add         r3, r3, #1
  01048	e58d3010	 str         r3, [sp, #0x10]

; 526  :             bounds.bottom = pParms->yStart + 1;

  0104c	e59d3034	 ldr         r3, [sp, #0x34]
  01050	e2833008	 add         r3, r3, #8
  01054	e5933000	 ldr         r3, [r3]
  01058	e2833001	 add         r3, r3, #1
  0105c	e58d3014	 str         r3, [sp, #0x14]

; 527  :             bounds.left   = pParms->xStart - pParms->cPels;

  01060	e59d3034	 ldr         r3, [sp, #0x34]
  01064	e2832004	 add         r2, r3, #4
  01068	e59d3034	 ldr         r3, [sp, #0x34]
  0106c	e283300c	 add         r3, r3, #0xC
  01070	e5922000	 ldr         r2, [r2]
  01074	e5933000	 ldr         r3, [r3]
  01078	e0423003	 sub         r3, r2, r3
  0107c	e58d3008	 str         r3, [sp, #8]

; 528  :             bounds.top    = bounds.bottom - N_plus_1;

  01080	e59d2014	 ldr         r2, [sp, #0x14]
  01084	e59d3000	 ldr         r3, [sp]
  01088	e0423003	 sub         r3, r2, r3
  0108c	e58d300c	 str         r3, [sp, #0xC]

; 529  :             break;

  01090	ea000054	 b           |$LN16@WrappedEmu|
  01094		 |$LN10@WrappedEmu|

; 530  : 
; 531  :         case 5:
; 532  :             bounds.right  = pParms->xStart + 1;

  01094	e59d3034	 ldr         r3, [sp, #0x34]
  01098	e2833004	 add         r3, r3, #4
  0109c	e5933000	 ldr         r3, [r3]
  010a0	e2833001	 add         r3, r3, #1
  010a4	e58d3010	 str         r3, [sp, #0x10]

; 533  :             bounds.bottom = pParms->yStart + 1;

  010a8	e59d3034	 ldr         r3, [sp, #0x34]
  010ac	e2833008	 add         r3, r3, #8
  010b0	e5933000	 ldr         r3, [r3]
  010b4	e2833001	 add         r3, r3, #1
  010b8	e58d3014	 str         r3, [sp, #0x14]

; 534  :             bounds.top    = pParms->yStart - pParms->cPels;

  010bc	e59d3034	 ldr         r3, [sp, #0x34]
  010c0	e2832008	 add         r2, r3, #8
  010c4	e59d3034	 ldr         r3, [sp, #0x34]
  010c8	e283300c	 add         r3, r3, #0xC
  010cc	e5922000	 ldr         r2, [r2]
  010d0	e5933000	 ldr         r3, [r3]
  010d4	e0423003	 sub         r3, r2, r3
  010d8	e58d300c	 str         r3, [sp, #0xC]

; 535  :             bounds.left   = bounds.right - N_plus_1;

  010dc	e59d2010	 ldr         r2, [sp, #0x10]
  010e0	e59d3000	 ldr         r3, [sp]
  010e4	e0423003	 sub         r3, r2, r3
  010e8	e58d3008	 str         r3, [sp, #8]

; 536  :             break;

  010ec	ea00003d	 b           |$LN16@WrappedEmu|
  010f0		 |$LN9@WrappedEmu|

; 537  : 
; 538  :         case 6:
; 539  :             bounds.left   = pParms->xStart;

  010f0	e59d3034	 ldr         r3, [sp, #0x34]
  010f4	e2833004	 add         r3, r3, #4
  010f8	e5933000	 ldr         r3, [r3]
  010fc	e58d3008	 str         r3, [sp, #8]

; 540  :             bounds.bottom = pParms->yStart + 1;

  01100	e59d3034	 ldr         r3, [sp, #0x34]
  01104	e2833008	 add         r3, r3, #8
  01108	e5933000	 ldr         r3, [r3]
  0110c	e2833001	 add         r3, r3, #1
  01110	e58d3014	 str         r3, [sp, #0x14]

; 541  :             bounds.top    = pParms->yStart - pParms->cPels;

  01114	e59d3034	 ldr         r3, [sp, #0x34]
  01118	e2832008	 add         r2, r3, #8
  0111c	e59d3034	 ldr         r3, [sp, #0x34]
  01120	e283300c	 add         r3, r3, #0xC
  01124	e5922000	 ldr         r2, [r2]
  01128	e5933000	 ldr         r3, [r3]
  0112c	e0423003	 sub         r3, r2, r3
  01130	e58d300c	 str         r3, [sp, #0xC]

; 542  :             bounds.right  = bounds.left + N_plus_1;

  01134	e59d2008	 ldr         r2, [sp, #8]
  01138	e59d3000	 ldr         r3, [sp]
  0113c	e0823003	 add         r3, r2, r3
  01140	e58d3010	 str         r3, [sp, #0x10]

; 543  :             break;

  01144	ea000027	 b           |$LN16@WrappedEmu|
  01148		 |$LN8@WrappedEmu|

; 544  : 
; 545  :         case 7:
; 546  :             bounds.left   = pParms->xStart;

  01148	e59d3034	 ldr         r3, [sp, #0x34]
  0114c	e2833004	 add         r3, r3, #4
  01150	e5933000	 ldr         r3, [r3]
  01154	e58d3008	 str         r3, [sp, #8]

; 547  :             bounds.bottom = pParms->yStart + 1;

  01158	e59d3034	 ldr         r3, [sp, #0x34]
  0115c	e2833008	 add         r3, r3, #8
  01160	e5933000	 ldr         r3, [r3]
  01164	e2833001	 add         r3, r3, #1
  01168	e58d3014	 str         r3, [sp, #0x14]

; 548  :             bounds.right  = pParms->xStart + pParms->cPels + 1;

  0116c	e59d3034	 ldr         r3, [sp, #0x34]
  01170	e2832004	 add         r2, r3, #4
  01174	e59d3034	 ldr         r3, [sp, #0x34]
  01178	e283300c	 add         r3, r3, #0xC
  0117c	e5922000	 ldr         r2, [r2]
  01180	e5933000	 ldr         r3, [r3]
  01184	e0823003	 add         r3, r2, r3
  01188	e2833001	 add         r3, r3, #1
  0118c	e58d3010	 str         r3, [sp, #0x10]

; 549  :             bounds.top    = bounds.bottom - N_plus_1;

  01190	e59d2014	 ldr         r2, [sp, #0x14]
  01194	e59d3000	 ldr         r3, [sp]
  01198	e0423003	 sub         r3, r2, r3
  0119c	e58d300c	 str         r3, [sp, #0xC]

; 550  :             break;

  011a0	ea000010	 b           |$LN16@WrappedEmu|
  011a4		 |$LN7@WrappedEmu|

; 551  : 
; 552  :         default:
; 553  :             DEBUGMSG(GPE_ZONE_ERROR,(TEXT("Invalid direction: %d\r\n"), pParms->iDir));

  011a4	e59f3198	 ldr         r3, [pc, #0x198]
  011a8	e5933440	 ldr         r3, [r3, #0x440]
  011ac	e3130001	 tst         r3, #1
  011b0	0a000007	 beq         |$LN22@WrappedEmu|
  011b4	e59d3034	 ldr         r3, [sp, #0x34]
  011b8	e283301c	 add         r3, r3, #0x1C
  011bc	e5931000	 ldr         r1, [r3]
  011c0	e59f0178	 ldr         r0, [pc, #0x178]
  011c4	eb000000	 bl          NKDbgPrintfW
  011c8	e3a03001	 mov         r3, #1
  011cc	e58d3020	 str         r3, [sp, #0x20]
  011d0	ea000001	 b           |$LN23@WrappedEmu|
  011d4		 |$LN22@WrappedEmu|
  011d4	e3a03000	 mov         r3, #0
  011d8	e58d3020	 str         r3, [sp, #0x20]
  011dc		 |$LN23@WrappedEmu|

; 554  :             return E_INVALIDARG;

  011dc	e59f3158	 ldr         r3, [pc, #0x158]
  011e0	e58d3018	 str         r3, [sp, #0x18]
  011e4	ea00004f	 b           |$LN20@WrappedEmu|
  011e8		 |$LN16@WrappedEmu|

; 555  :     }
; 556  : 
; 557  :     // check for line overlap with cursor and turn off cursor if overlaps
; 558  :     if (!bDoRotation)

  011e8	e59f3148	 ldr         r3, [pc, #0x148]
  011ec	e5933000	 ldr         r3, [r3]
  011f0	e3530000	 cmp         r3, #0
  011f4	1a000034	 bne         |$LN6@WrappedEmu|

; 559  :     {
; 560  :         if (m_CursorVisible && !m_CursorDisabled)

  011f8	e59d3030	 ldr         r3, [sp, #0x30]
  011fc	e2833fbb	 add         r3, r3, #0xBB, 30
  01200	e5933000	 ldr         r3, [r3]
  01204	e3530000	 cmp         r3, #0
  01208	0a00002f	 beq         |$LN5@WrappedEmu|
  0120c	e59d3030	 ldr         r3, [sp, #0x30]
  01210	e2833fba	 add         r3, r3, #0xBA, 30
  01214	e5933000	 ldr         r3, [r3]
  01218	e3530000	 cmp         r3, #0
  0121c	1a00002a	 bne         |$LN5@WrappedEmu|

; 561  :         {
; 562  :             RotateRectl(&m_CursorRect);

  01220	e59d3030	 ldr         r3, [sp, #0x30]
  01224	e2831fbf	 add         r1, r3, #0xBF, 30
  01228	e59d0030	 ldr         r0, [sp, #0x30]
  0122c	eb000000	 bl          |?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|

; 563  : 
; 564  :             if (m_CursorRect.top < bounds.bottom && m_CursorRect.bottom > bounds.top &&
; 565  :                 m_CursorRect.left < bounds.right && m_CursorRect.right > bounds.left)

  01230	e59d3030	 ldr         r3, [sp, #0x30]
  01234	e2833c03	 add         r3, r3, #3, 24
  01238	e5932000	 ldr         r2, [r3]
  0123c	e59d3014	 ldr         r3, [sp, #0x14]
  01240	e1520003	 cmp         r2, r3
  01244	aa00001c	 bge         |$LN4@WrappedEmu|
  01248	e59d3030	 ldr         r3, [sp, #0x30]
  0124c	e2833fc2	 add         r3, r3, #0xC2, 30
  01250	e5932000	 ldr         r2, [r3]
  01254	e59d300c	 ldr         r3, [sp, #0xC]
  01258	e1520003	 cmp         r2, r3
  0125c	da000016	 ble         |$LN4@WrappedEmu|
  01260	e59d3030	 ldr         r3, [sp, #0x30]
  01264	e2833fbf	 add         r3, r3, #0xBF, 30
  01268	e5932000	 ldr         r2, [r3]
  0126c	e59d3010	 ldr         r3, [sp, #0x10]
  01270	e1520003	 cmp         r2, r3
  01274	aa000010	 bge         |$LN4@WrappedEmu|
  01278	e59d3030	 ldr         r3, [sp, #0x30]
  0127c	e2833fc1	 add         r3, r3, #0xC1, 30
  01280	e5932000	 ldr         r2, [r3]
  01284	e59d3008	 ldr         r3, [sp, #8]
  01288	e1520003	 cmp         r2, r3
  0128c	da00000a	 ble         |$LN4@WrappedEmu|

; 566  :             {
; 567  :                 RotateRectlBack(&m_CursorRect);

  01290	e59d3030	 ldr         r3, [sp, #0x30]
  01294	e2831fbf	 add         r1, r3, #0xBF, 30
  01298	e59d0030	 ldr         r0, [sp, #0x30]
  0129c	eb000000	 bl          |?RotateRectlBack@GPE@@QAAXPAU_RECTL@@@Z|

; 568  :                 CursorOff();

  012a0	e59d0030	 ldr         r0, [sp, #0x30]
  012a4	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|

; 569  :                 m_CursorForcedOff = TRUE;

  012a8	e59d3030	 ldr         r3, [sp, #0x30]
  012ac	e2832e2f	 add         r2, r3, #0x2F, 28
  012b0	e3a03001	 mov         r3, #1
  012b4	e5823000	 str         r3, [r2]

; 570  :             }
; 571  :             else

  012b8	ea000003	 b           |$LN3@WrappedEmu|
  012bc		 |$LN4@WrappedEmu|

; 572  :             {
; 573  :                 RotateRectlBack(&m_CursorRect);

  012bc	e59d3030	 ldr         r3, [sp, #0x30]
  012c0	e2831fbf	 add         r1, r3, #0xBF, 30
  012c4	e59d0030	 ldr         r0, [sp, #0x30]
  012c8	eb000000	 bl          |?RotateRectlBack@GPE@@QAAXPAU_RECTL@@@Z|
  012cc		 |$LN3@WrappedEmu|
  012cc		 |$LN5@WrappedEmu|
  012cc		 |$LN6@WrappedEmu|

; 574  :             }
; 575  :         }
; 576  :     }
; 577  : 
; 578  :     // do emulated line
; 579  :     retval = EmulatedLine(pParms);

  012cc	e59d1034	 ldr         r1, [sp, #0x34]
  012d0	e59d0030	 ldr         r0, [sp, #0x30]
  012d4	eb000000	 bl          |?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z|
  012d8	e58d0024	 str         r0, [sp, #0x24]
  012dc	e59d3024	 ldr         r3, [sp, #0x24]
  012e0	e58d3004	 str         r3, [sp, #4]

; 580  : 
; 581  :     // see if cursor was forced off because of overlap with line bouneds and turn back on.
; 582  :     if (!bDoRotation)

  012e4	e59f304c	 ldr         r3, [pc, #0x4C]
  012e8	e5933000	 ldr         r3, [r3]
  012ec	e3530000	 cmp         r3, #0
  012f0	1a00000a	 bne         |$LN2@WrappedEmu|

; 583  :     {
; 584  :         if (m_CursorForcedOff)

  012f4	e59d3030	 ldr         r3, [sp, #0x30]
  012f8	e2833e2f	 add         r3, r3, #0x2F, 28
  012fc	e5933000	 ldr         r3, [r3]
  01300	e3530000	 cmp         r3, #0
  01304	0a000005	 beq         |$LN1@WrappedEmu|

; 585  :         {
; 586  :             m_CursorForcedOff = FALSE;

  01308	e59d3030	 ldr         r3, [sp, #0x30]
  0130c	e2832e2f	 add         r2, r3, #0x2F, 28
  01310	e3a03000	 mov         r3, #0
  01314	e5823000	 str         r3, [r2]

; 587  :             CursorOn();

  01318	e59d0030	 ldr         r0, [sp, #0x30]
  0131c	eb000000	 bl          |?CursorOn@SA2Video@@QAAXXZ|
  01320		 |$LN1@WrappedEmu|
  01320		 |$LN2@WrappedEmu|

; 588  :         }
; 589  :     }
; 590  : 
; 591  :     return retval;

  01320	e59d3004	 ldr         r3, [sp, #4]
  01324	e58d3018	 str         r3, [sp, #0x18]
  01328		 |$LN20@WrappedEmu|

; 592  : }

  01328	e59d0018	 ldr         r0, [sp, #0x18]
  0132c	e28dd028	 add         sp, sp, #0x28
  01330	e89d6000	 ldmia       sp, {sp, lr}
  01334	e12fff1e	 bx          lr
  01338		 |$LN37@WrappedEmu|
  01338		 |$LN38@WrappedEmu|
  01338	00000000	 DCD         |bDoRotation|
  0133c		 |$LN39@WrappedEmu|
  0133c	80070057	 DCD         0x80070057
  01340		 |$LN40@WrappedEmu|
  01340	00000000	 DCD         |??_C@_1DA@CLIHLKHC@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01344		 |$LN41@WrappedEmu|
  01344	00000000	 DCD         |dpCurSettings|
  01348		 |$M38766|

			 ENDP  ; |?WrappedEmulatedLine@SA2Video@@AAAJPAUGPELineParms@@@Z|, SA2Video::WrappedEmulatedLine

	EXPORT	|?EmulatedBltFill16_C@@YAHPAGGHHI@Z|	; EmulatedBltFill16_C

  00080			 AREA	 |.pdata|, PDATA
|$T38779| DCD	|$LN11@EmulatedBl|
	DCD	0x40003304
; Function compile flags: /Odtp

  01348			 AREA	 |.text|, CODE, ARM

  01348		 |?EmulatedBltFill16_C@@YAHPAGGHHI@Z| PROC ; EmulatedBltFill16_C

; 605  : {

  01348		 |$LN11@EmulatedBl|
  01348	e1a0c00d	 mov         r12, sp
  0134c	e92d000f	 stmdb       sp!, {r0 - r3}
  01350	e92d5000	 stmdb       sp!, {r12, lr}
  01354	e24dd00c	 sub         sp, sp, #0xC
  01358		 |$M38776|

; 606  :     step >>= 1; //in 16-bit

  01358	e59d3024	 ldr         r3, [sp, #0x24]
  0135c	e1a030a3	 mov         r3, r3, lsr #1
  01360	e58d3024	 str         r3, [sp, #0x24]

; 607  :     step -= width;

  01364	e59d2024	 ldr         r2, [sp, #0x24]
  01368	e59d301c	 ldr         r3, [sp, #0x1C]
  0136c	e0423003	 sub         r3, r2, r3
  01370	e58d3024	 str         r3, [sp, #0x24]

; 608  : 
; 609  :     for (int r = 0; r < height; r++)

  01374	e3a03000	 mov         r3, #0
  01378	e58d3000	 str         r3, [sp]
  0137c	ea000002	 b           |$LN6@EmulatedBl|
  01380		 |$LN5@EmulatedBl|
  01380	e59d3000	 ldr         r3, [sp]
  01384	e2833001	 add         r3, r3, #1
  01388	e58d3000	 str         r3, [sp]
  0138c		 |$LN6@EmulatedBl|
  0138c	e59d2000	 ldr         r2, [sp]
  01390	e59d3020	 ldr         r3, [sp, #0x20]
  01394	e1520003	 cmp         r2, r3
  01398	aa000017	 bge         |$LN4@EmulatedBl|

; 610  :     {
; 611  :         for (int w = 0; w < width; w++)

  0139c	e3a03000	 mov         r3, #0
  013a0	e58d3004	 str         r3, [sp, #4]
  013a4	ea000002	 b           |$LN3@EmulatedBl|
  013a8		 |$LN2@EmulatedBl|
  013a8	e59d3004	 ldr         r3, [sp, #4]
  013ac	e2833001	 add         r3, r3, #1
  013b0	e58d3004	 str         r3, [sp, #4]
  013b4		 |$LN3@EmulatedBl|
  013b4	e59d2004	 ldr         r2, [sp, #4]
  013b8	e59d301c	 ldr         r3, [sp, #0x1C]
  013bc	e1520003	 cmp         r2, r3
  013c0	aa000006	 bge         |$LN1@EmulatedBl|

; 612  :         {
; 613  :             *pDst++ = color;

  013c4	e1dd21b8	 ldrh        r2, [sp, #0x18]
  013c8	e59d3014	 ldr         r3, [sp, #0x14]
  013cc	e1c320b0	 strh        r2, [r3]
  013d0	e59d3014	 ldr         r3, [sp, #0x14]
  013d4	e2833002	 add         r3, r3, #2
  013d8	e58d3014	 str         r3, [sp, #0x14]

; 614  :         }

  013dc	eafffff1	 b           |$LN2@EmulatedBl|
  013e0		 |$LN1@EmulatedBl|

; 615  : 
; 616  :         pDst += step;

  013e0	e59d1024	 ldr         r1, [sp, #0x24]
  013e4	e3a03002	 mov         r3, #2
  013e8	e0020391	 mul         r2, r1, r3
  013ec	e59d3014	 ldr         r3, [sp, #0x14]
  013f0	e0833002	 add         r3, r3, r2
  013f4	e58d3014	 str         r3, [sp, #0x14]

; 617  :     }

  013f8	eaffffe0	 b           |$LN5@EmulatedBl|
  013fc		 |$LN4@EmulatedBl|

; 618  : 
; 619  :     return 0;

  013fc	e3a03000	 mov         r3, #0
  01400	e58d3008	 str         r3, [sp, #8]

; 620  : }

  01404	e59d0008	 ldr         r0, [sp, #8]
  01408	e28dd00c	 add         sp, sp, #0xC
  0140c	e89d6000	 ldmia       sp, {sp, lr}
  01410	e12fff1e	 bx          lr
  01414		 |$M38777|

			 ENDP  ; |?EmulatedBltFill16_C@@YAHPAGGHHI@Z|, EmulatedBltFill16_C

	EXPORT	|?EmulatedBltSrcCopy1616_Eml@@YAJPAUGPEBltParms@@@Z| ; EmulatedBltSrcCopy1616_Eml
	IMPORT	|EmulatedBltSrcCopy1616ASM|

  00088			 AREA	 |.pdata|, PDATA
|$T38787| DCD	|$LN6@EmulatedBl@2|
	DCD	0x40008104
; Function compile flags: /Odtp

  01414			 AREA	 |.text|, CODE, ARM

  01414		 |?EmulatedBltSrcCopy1616_Eml@@YAJPAUGPEBltParms@@@Z| PROC ; EmulatedBltSrcCopy1616_Eml

; 674  : {

  01414		 |$LN6@EmulatedBl@2|
  01414	e1a0c00d	 mov         r12, sp
  01418	e92d0001	 stmdb       sp!, {r0}
  0141c	e92d5000	 stmdb       sp!, {r12, lr}
  01420	e24dd044	 sub         sp, sp, #0x44
  01424		 |$M38784|

; 675  :     // Source-related info
; 676  :     PRECTL   prcSrc         = pParms->prclSrc;

  01424	e59d304c	 ldr         r3, [sp, #0x4C]
  01428	e2833018	 add         r3, r3, #0x18
  0142c	e5933000	 ldr         r3, [r3]
  01430	e58d300c	 str         r3, [sp, #0xC]

; 677  :     UINT32   iScanStrideSrc = pParms->pSrc->Stride()/sizeof(WORD);

  01434	e59d304c	 ldr         r3, [sp, #0x4C]
  01438	e2833008	 add         r3, r3, #8
  0143c	e5930000	 ldr         r0, [r3]
  01440	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  01444	e58d0034	 str         r0, [sp, #0x34]
  01448	e59d1034	 ldr         r1, [sp, #0x34]
  0144c	e3a00002	 mov         r0, #2
  01450	eb000000	 bl          __rt_udiv
  01454	e58d0010	 str         r0, [sp, #0x10]

; 678  :     WORD   * pwScanLineSrc  = (WORD *)pParms->pSrc->Buffer() +
; 679  :                               prcSrc->top * iScanStrideSrc      +
; 680  :                               prcSrc->left;

  01458	e59d304c	 ldr         r3, [sp, #0x4C]
  0145c	e2833008	 add         r3, r3, #8
  01460	e5930000	 ldr         r0, [r3]
  01464	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  01468	e58d0038	 str         r0, [sp, #0x38]
  0146c	e59d300c	 ldr         r3, [sp, #0xC]
  01470	e2833004	 add         r3, r3, #4
  01474	e5932000	 ldr         r2, [r3]
  01478	e59d3010	 ldr         r3, [sp, #0x10]
  0147c	e0010392	 mul         r1, r2, r3
  01480	e3a03002	 mov         r3, #2
  01484	e0020391	 mul         r2, r1, r3
  01488	e59d3038	 ldr         r3, [sp, #0x38]
  0148c	e0831002	 add         r1, r3, r2
  01490	e59d300c	 ldr         r3, [sp, #0xC]
  01494	e5932000	 ldr         r2, [r3]
  01498	e3a03002	 mov         r3, #2
  0149c	e0030392	 mul         r3, r2, r3
  014a0	e0813003	 add         r3, r1, r3
  014a4	e58d3020	 str         r3, [sp, #0x20]

; 681  : 
; 682  :     // Dest-related info
; 683  :     PRECTL   prcDst         = pParms->prclDst;

  014a8	e59d304c	 ldr         r3, [sp, #0x4C]
  014ac	e2833014	 add         r3, r3, #0x14
  014b0	e5933000	 ldr         r3, [r3]
  014b4	e58d301c	 str         r3, [sp, #0x1C]

; 684  :     UINT32   iScanStrideDst = pParms->pDst->Stride()/sizeof(WORD);

  014b8	e59d304c	 ldr         r3, [sp, #0x4C]
  014bc	e2833004	 add         r3, r3, #4
  014c0	e5930000	 ldr         r0, [r3]
  014c4	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  014c8	e58d003c	 str         r0, [sp, #0x3C]
  014cc	e59d103c	 ldr         r1, [sp, #0x3C]
  014d0	e3a00002	 mov         r0, #2
  014d4	eb000000	 bl          __rt_udiv
  014d8	e58d0008	 str         r0, [sp, #8]

; 685  :     WORD   * pwScanLineDst  = (WORD *)pParms->pDst->Buffer() +
; 686  :                               prcDst->top * iScanStrideDst      +
; 687  :                               prcDst->left;

  014dc	e59d304c	 ldr         r3, [sp, #0x4C]
  014e0	e2833004	 add         r3, r3, #4
  014e4	e5930000	 ldr         r0, [r3]
  014e8	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  014ec	e58d0040	 str         r0, [sp, #0x40]
  014f0	e59d301c	 ldr         r3, [sp, #0x1C]
  014f4	e2833004	 add         r3, r3, #4
  014f8	e5932000	 ldr         r2, [r3]
  014fc	e59d3008	 ldr         r3, [sp, #8]
  01500	e0010392	 mul         r1, r2, r3
  01504	e3a03002	 mov         r3, #2
  01508	e0020391	 mul         r2, r1, r3
  0150c	e59d3040	 ldr         r3, [sp, #0x40]
  01510	e0831002	 add         r1, r3, r2
  01514	e59d301c	 ldr         r3, [sp, #0x1C]
  01518	e5932000	 ldr         r2, [r3]
  0151c	e3a03002	 mov         r3, #2
  01520	e0030392	 mul         r3, r2, r3
  01524	e0813003	 add         r3, r1, r3
  01528	e58d3024	 str         r3, [sp, #0x24]

; 688  : 
; 689  :     int cRows = prcDst->bottom - prcDst->top;

  0152c	e59d301c	 ldr         r3, [sp, #0x1C]
  01530	e283200c	 add         r2, r3, #0xC
  01534	e59d301c	 ldr         r3, [sp, #0x1C]
  01538	e2833004	 add         r3, r3, #4
  0153c	e5922000	 ldr         r2, [r2]
  01540	e5933000	 ldr         r3, [r3]
  01544	e0423003	 sub         r3, r2, r3
  01548	e58d3018	 str         r3, [sp, #0x18]

; 690  :     int cCols = prcDst->right  - prcDst->left;

  0154c	e59d301c	 ldr         r3, [sp, #0x1C]
  01550	e2833008	 add         r3, r3, #8
  01554	e5932000	 ldr         r2, [r3]
  01558	e59d301c	 ldr         r3, [sp, #0x1C]
  0155c	e5933000	 ldr         r3, [r3]
  01560	e0423003	 sub         r3, r2, r3
  01564	e58d3014	 str         r3, [sp, #0x14]

; 691  : 
; 692  :     // Make sure to copy source before overwriting.
; 693  :     if (!pParms->yPositive)

  01568	e59d304c	 ldr         r3, [sp, #0x4C]
  0156c	e2833038	 add         r3, r3, #0x38
  01570	e5933000	 ldr         r3, [r3]
  01574	e3530000	 cmp         r3, #0
  01578	1a000017	 bne         |$LN1@EmulatedBl@2|

; 694  :     {
; 695  :         // Scan from end of memory, and negate stride
; 696  :         pwScanLineSrc += iScanStrideSrc * (cRows - 1);

  0157c	e59d3018	 ldr         r3, [sp, #0x18]
  01580	e2432001	 sub         r2, r3, #1
  01584	e59d3010	 ldr         r3, [sp, #0x10]
  01588	e0010293	 mul         r1, r3, r2
  0158c	e3a03002	 mov         r3, #2
  01590	e0020391	 mul         r2, r1, r3
  01594	e59d3020	 ldr         r3, [sp, #0x20]
  01598	e0833002	 add         r3, r3, r2
  0159c	e58d3020	 str         r3, [sp, #0x20]

; 697  :         pwScanLineDst += iScanStrideDst * (cRows - 1);

  015a0	e59d3018	 ldr         r3, [sp, #0x18]
  015a4	e2432001	 sub         r2, r3, #1
  015a8	e59d3008	 ldr         r3, [sp, #8]
  015ac	e0010293	 mul         r1, r3, r2
  015b0	e3a03002	 mov         r3, #2
  015b4	e0020391	 mul         r2, r1, r3
  015b8	e59d3024	 ldr         r3, [sp, #0x24]
  015bc	e0833002	 add         r3, r3, r2
  015c0	e58d3024	 str         r3, [sp, #0x24]

; 698  : 
; 699  :         iScanStrideSrc = (UINT32)-(INT32)iScanStrideSrc;

  015c4	e59d3010	 ldr         r3, [sp, #0x10]
  015c8	e2633000	 rsb         r3, r3, #0
  015cc	e58d3010	 str         r3, [sp, #0x10]

; 700  :         iScanStrideDst = (UINT32)-(INT32)iScanStrideDst;

  015d0	e59d3008	 ldr         r3, [sp, #8]
  015d4	e2633000	 rsb         r3, r3, #0
  015d8	e58d3008	 str         r3, [sp, #8]
  015dc		 |$LN1@EmulatedBl@2|

; 701  :     }
; 702  : 
; 703  : #ifdef    SCRCOPY_ASM
; 704  : 
; 705  :     EmulatedBltSrcCopy1616ASM(pwScanLineSrc, pwScanLineDst, cCols, cRows,
; 706  :                             iScanStrideSrc, iScanStrideDst);

  015dc	e59d3008	 ldr         r3, [sp, #8]
  015e0	e58d3004	 str         r3, [sp, #4]
  015e4	e59d3010	 ldr         r3, [sp, #0x10]
  015e8	e58d3000	 str         r3, [sp]
  015ec	e59d3018	 ldr         r3, [sp, #0x18]
  015f0	e59d2014	 ldr         r2, [sp, #0x14]
  015f4	e59d1024	 ldr         r1, [sp, #0x24]
  015f8	e59d0020	 ldr         r0, [sp, #0x20]
  015fc	eb000000	 bl          EmulatedBltSrcCopy1616ASM

; 707  : 
; 708  : #else
; 709  :     //
; 710  :     // Do the copy line by line.
; 711  :     //
; 712  :     //EmulatedBltSrcCopy1616_CO(pwScanLineSrc, pwScanLineDst, cCols, cRows,
; 713  :     //                         iScanStrideSrc, iScanStrideDst, xPositive);
; 714  : 
; 715  : 
; 716  :     for (int row = 0; row < cRows; row++)
; 717  :     {
; 718  :         //BLOCK_OP(pwScanLineDst, pwScanLineSrc, cCols*sizeof(WORD));
; 719  :         if ( cCols < 8 ) {
; 720  : #ifndef _MM_OPT_ASM
; 721  :             Memmove1616_C_SIMPLE(pwScanLineSrc, pwScanLineDst, cCols);
; 722  : #else
; 723  :             Memmove1616_ASM_LE16(pwScanLineSrc, pwScanLineDst, cCols);
; 724  : #endif
; 725  :         } else {
; 726  : #ifndef _MM_OPT_ASM
; 727  :             Memmove1616_C(pwScanLineSrc, pwScanLineDst, cCols);
; 728  : #else
; 729  :             Memmove1616_ASM_GT16(pwScanLineSrc, pwScanLineDst, cCols);
; 730  : #endif
; 731  :         }
; 732  : 
; 733  :         pwScanLineSrc += iScanStrideSrc;
; 734  :         pwScanLineDst += iScanStrideDst;
; 735  :     }
; 736  : 
; 737  : #endif
; 738  :         return S_OK;

  01600	e3a03000	 mov         r3, #0
  01604	e58d3030	 str         r3, [sp, #0x30]

; 739  : }

  01608	e59d0030	 ldr         r0, [sp, #0x30]
  0160c	e28dd044	 add         sp, sp, #0x44
  01610	e89d6000	 ldmia       sp, {sp, lr}
  01614	e12fff1e	 bx          lr
  01618		 |$M38785|

			 ENDP  ; |?EmulatedBltSrcCopy1616_Eml@@YAJPAUGPEBltParms@@@Z|, EmulatedBltSrcCopy1616_Eml


  00090			 AREA	 |.pdata|, PDATA
|$T38793| DCD	|$LN9@Line|
	DCD	0x40002104
; Function compile flags: /Odtp

  01618			 AREA	 |.text|, CODE, ARM

  01618		 |?Line@SA2Video@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z| PROC ; SA2Video::Line

; 891  : {

  01618		 |$LN9@Line|
  01618	e1a0c00d	 mov         r12, sp
  0161c	e92d0007	 stmdb       sp!, {r0 - r2}
  01620	e92d5000	 stmdb       sp!, {r12, lr}
  01624	e24dd004	 sub         sp, sp, #4
  01628		 |$M38790|

; 892  :     if(phase == gpeSingle || phase == gpePrepare)

  01628	e59d3014	 ldr         r3, [sp, #0x14]
  0162c	e3530000	 cmp         r3, #0
  01630	0a000002	 beq         |$LN3@Line|
  01634	e59d3014	 ldr         r3, [sp, #0x14]
  01638	e3530001	 cmp         r3, #1
  0163c	1a00000e	 bne         |$LN4@Line|
  01640		 |$LN3@Line|

; 893  :     {
; 894  :         if(pLineParms->pDst != m_pPrimarySurface)

  01640	e59d3010	 ldr         r3, [sp, #0x10]
  01644	e2832028	 add         r2, r3, #0x28
  01648	e59d300c	 ldr         r3, [sp, #0xC]
  0164c	e2833004	 add         r3, r3, #4
  01650	e5922000	 ldr         r2, [r2]
  01654	e5933000	 ldr         r3, [r3]
  01658	e1520003	 cmp         r2, r3
  0165c	0a000003	 beq         |$LN2@Line|

; 895  :         {
; 896  :             pLineParms->pLine = &GPE::EmulatedLine;

  01660	e59f2030	 ldr         r2, [pc, #0x30]
  01664	e59d3010	 ldr         r3, [sp, #0x10]
  01668	e5832000	 str         r2, [r3]

; 897  :         }
; 898  :         else

  0166c	ea000002	 b           |$LN1@Line|
  01670		 |$LN2@Line|

; 899  :         {
; 900  :             pLineParms->pLine = (SCODE (GPE::*)(struct GPELineParms *))&SA2Video::WrappedEmulatedLine;

  01670	e59f201c	 ldr         r2, [pc, #0x1C]
  01674	e59d3010	 ldr         r3, [sp, #0x10]
  01678	e5832000	 str         r2, [r3]
  0167c		 |$LN1@Line|
  0167c		 |$LN4@Line|

; 901  :         }
; 902  :     }
; 903  : 
; 904  :     return S_OK;

  0167c	e3a03000	 mov         r3, #0
  01680	e58d3000	 str         r3, [sp]

; 905  : }

  01684	e59d0000	 ldr         r0, [sp]
  01688	e28dd004	 add         sp, sp, #4
  0168c	e89d6000	 ldmia       sp, {sp, lr}
  01690	e12fff1e	 bx          lr
  01694		 |$LN10@Line|
  01694		 |$LN11@Line|
  01694	00000000	 DCD         |?WrappedEmulatedLine@SA2Video@@AAAJPAUGPELineParms@@@Z|
  01698		 |$LN12@Line|
  01698	00000000	 DCD         |?EmulatedLine@GPE@@QAAJPAUGPELineParms@@@Z|
  0169c		 |$M38791|

			 ENDP  ; |?Line@SA2Video@@UAAJPAUGPELineParms@@W4EGPEPhase@@@Z|, SA2Video::Line

	EXPORT	|?EmulatedBltAlphaText16_Eml@@YAJPAUGPEBltParms@@@Z| ; EmulatedBltAlphaText16_Eml
	EXPORT	|?EmulatedBltText16_Eml@@YAJPAUGPEBltParms@@@Z| ; EmulatedBltText16_Eml
	EXPORT	|?EmulatedBltFill16_Eml@@YAJPAUGPEBltParms@@@Z| ; EmulatedBltFill16_Eml
	EXPORT	|?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| ; GPESurf::Format
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@POHMEHNN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|?WrappedEmulatedBlt@SA2Video@@AAAJPAUGPEBltParms@@@Z| ; SA2Video::WrappedEmulatedBlt
	IMPORT	|DispDrvrDirtyRectDump|
	IMPORT	|DispDrvrDirtyRectDump_rectfill|
	IMPORT	|DispDrvrDirtyRectDump2|
	IMPORT	|gDrawCursorFlag|
	IMPORT	|?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBlt
	IMPORT	|?EmulatedBltRotate@GPE@@QAAJPAUGPEBltParms@@@Z| ; GPE::EmulatedBltRotate

  00098			 AREA	 |.pdata|, PDATA
|$T38804| DCD	|$LN41@WrappedEmu@2|
	DCD	0x40015804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@POHMEHNN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "P"
	DCB	0x0, "X", 0x0, "A", 0x0, "2", 0x0, "7", 0x0, "X", 0x0, "_"
	DCB	0x0, "M", 0x0, "S", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "D", 0x0, "I", 0x0, "S", 0x0, "P", 0x0, "L", 0x0, "A"
	DCB	0x0, "Y", 0x0, "\\", 0x0, "P", 0x0, "X", 0x0, "A", 0x0, "2"
	DCB	0x0, "7", 0x0, "X", 0x0, "_", 0x0, "L", 0x0, "C", 0x0, "D"
	DCB	0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "s", 0x0, "a", 0x0, "2"
	DCB	0x0, "v", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "o", 0x0, "."
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0169c			 AREA	 |.text|, CODE, ARM

  0169c		 |?WrappedEmulatedBlt@SA2Video@@AAAJPAUGPEBltParms@@@Z| PROC ; SA2Video::WrappedEmulatedBlt

; 914  : {

  0169c		 |$LN41@WrappedEmu@2|
  0169c	e1a0c00d	 mov         r12, sp
  016a0	e92d0003	 stmdb       sp!, {r0, r1}
  016a4	e92d5000	 stmdb       sp!, {r12, lr}
  016a8	e24dd054	 sub         sp, sp, #0x54
  016ac		 |$M38801|

; 915  :     SCODE code;
; 916  :     RECT  bounds;
; 917  : 
; 918  :     // This function should only be called when using a virtual primary (ie.
; 919  :     // bDoRotation is TRUE).
; 920  :     ASSERT(bDoRotation);

  016ac	e59f3538	 ldr         r3, [pc, #0x538]
  016b0	e5933000	 ldr         r3, [r3]
  016b4	e3530000	 cmp         r3, #0
  016b8	0a000002	 beq         |$LN37@WrappedEmu@2|
  016bc	e3a03001	 mov         r3, #1
  016c0	e58d3020	 str         r3, [sp, #0x20]
  016c4	ea000007	 b           |$LN38@WrappedEmu@2|
  016c8		 |$LN37@WrappedEmu@2|
  016c8	e3a03fe6	 mov         r3, #0xE6, 30
  016cc	e59f2524	 ldr         r2, [pc, #0x524]
  016d0	e59f151c	 ldr         r1, [pc, #0x51C]
  016d4	e59f0514	 ldr         r0, [pc, #0x514]
  016d8	eb000000	 bl          NKDbgPrintfW
  016dc	e6000010	 __debugbreak_ce
  016e0	e3a03000	 mov         r3, #0
  016e4	e58d3020	 str         r3, [sp, #0x20]
  016e8		 |$LN38@WrappedEmu@2|

; 921  : 
; 922  :     if ((pParms->pDst == m_pPrimarySurface && m_iRotate) || (pParms->pSrc == m_pPrimarySurface && m_iRotate))

  016e8	e59d3060	 ldr         r3, [sp, #0x60]
  016ec	e2832004	 add         r2, r3, #4
  016f0	e59d305c	 ldr         r3, [sp, #0x5C]
  016f4	e2833004	 add         r3, r3, #4
  016f8	e5922000	 ldr         r2, [r2]
  016fc	e5933000	 ldr         r3, [r3]
  01700	e1520003	 cmp         r2, r3
  01704	1a000004	 bne         |$LN32@WrappedEmu@2|
  01708	e59d305c	 ldr         r3, [sp, #0x5C]
  0170c	e2833018	 add         r3, r3, #0x18
  01710	e5933000	 ldr         r3, [r3]
  01714	e3530000	 cmp         r3, #0
  01718	1a00000c	 bne         |$LN33@WrappedEmu@2|
  0171c		 |$LN32@WrappedEmu@2|
  0171c	e59d3060	 ldr         r3, [sp, #0x60]
  01720	e2832008	 add         r2, r3, #8
  01724	e59d305c	 ldr         r3, [sp, #0x5C]
  01728	e2833004	 add         r3, r3, #4
  0172c	e5922000	 ldr         r2, [r2]
  01730	e5933000	 ldr         r3, [r3]
  01734	e1520003	 cmp         r2, r3
  01738	1a00000b	 bne         |$LN34@WrappedEmu@2|
  0173c	e59d305c	 ldr         r3, [sp, #0x5C]
  01740	e2833018	 add         r3, r3, #0x18
  01744	e5933000	 ldr         r3, [r3]
  01748	e3530000	 cmp         r3, #0
  0174c	0a000006	 beq         |$LN34@WrappedEmu@2|
  01750		 |$LN33@WrappedEmu@2|

; 923  :     {
; 924  :         code = EmulatedBltRotate(pParms);

  01750	e59d1060	 ldr         r1, [sp, #0x60]
  01754	e59d005c	 ldr         r0, [sp, #0x5C]
  01758	eb000000	 bl          |?EmulatedBltRotate@GPE@@QAAJPAUGPEBltParms@@@Z|
  0175c	e58d0024	 str         r0, [sp, #0x24]
  01760	e59d3024	 ldr         r3, [sp, #0x24]
  01764	e58d3000	 str         r3, [sp]

; 925  :     }
; 926  :     else

  01768	ea000077	 b           |$LN31@WrappedEmu@2|
  0176c		 |$LN34@WrappedEmu@2|

; 927  :     {
; 928  :         if ( !( (pParms->bltFlags & (BLT_ALPHABLEND | BLT_TRANSPARENT | BLT_STRETCH)) || (pParms->pLookup) || (pParms->pConvert) )
; 929  :              && pParms->pDst->Format() == gpe16Bpp )

  0176c	e59d3060	 ldr         r3, [sp, #0x60]
  01770	e2833024	 add         r3, r3, #0x24
  01774	e5933000	 ldr         r3, [r3]
  01778	e313001c	 tst         r3, #0x1C
  0177c	1a00006c	 bne         |$LN30@WrappedEmu@2|
  01780	e59d3060	 ldr         r3, [sp, #0x60]
  01784	e283303c	 add         r3, r3, #0x3C
  01788	e5933000	 ldr         r3, [r3]
  0178c	e3530000	 cmp         r3, #0
  01790	1a000067	 bne         |$LN30@WrappedEmu@2|
  01794	e59d3060	 ldr         r3, [sp, #0x60]
  01798	e2833040	 add         r3, r3, #0x40
  0179c	e5933000	 ldr         r3, [r3]
  017a0	e3530000	 cmp         r3, #0
  017a4	1a000062	 bne         |$LN30@WrappedEmu@2|
  017a8	e59d3060	 ldr         r3, [sp, #0x60]
  017ac	e2833004	 add         r3, r3, #4
  017b0	e5930000	 ldr         r0, [r3]
  017b4	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  017b8	e58d0028	 str         r0, [sp, #0x28]
  017bc	e59d3028	 ldr         r3, [sp, #0x28]
  017c0	e3530004	 cmp         r3, #4
  017c4	1a00005a	 bne         |$LN30@WrappedEmu@2|

; 930  :         {
; 931  :             if ( pParms->rop4 == 0xcccc )

  017c8	e59d3060	 ldr         r3, [sp, #0x60]
  017cc	e2833028	 add         r3, r3, #0x28
  017d0	e5932000	 ldr         r2, [r3]
  017d4	e3a03b33	 mov         r3, #0x33, 22
  017d8	e38330cc	 orr         r3, r3, #0xCC
  017dc	e1520003	 cmp         r2, r3
  017e0	1a000014	 bne         |$LN29@WrappedEmu@2|

; 932  :             {
; 933  :                 if ( EGPEFormatToBpp[pParms->pSrc->Format()] == 16 )

  017e4	e59d3060	 ldr         r3, [sp, #0x60]
  017e8	e2833008	 add         r3, r3, #8
  017ec	e5930000	 ldr         r0, [r3]
  017f0	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  017f4	e58d002c	 str         r0, [sp, #0x2C]
  017f8	e59d102c	 ldr         r1, [sp, #0x2C]
  017fc	e3a03004	 mov         r3, #4
  01800	e0020391	 mul         r2, r1, r3
  01804	e59f33d8	 ldr         r3, [pc, #0x3D8]
  01808	e0833002	 add         r3, r3, r2
  0180c	e5933000	 ldr         r3, [r3]
  01810	e3530010	 cmp         r3, #0x10
  01814	1a000006	 bne         |$LN28@WrappedEmu@2|

; 934  :                 {
; 935  :                     code = EmulatedBltSrcCopy1616_Eml(pParms);

  01818	e59d0060	 ldr         r0, [sp, #0x60]
  0181c	eb000000	 bl          |?EmulatedBltSrcCopy1616_Eml@@YAJPAUGPEBltParms@@@Z|
  01820	e58d0030	 str         r0, [sp, #0x30]
  01824	e59d3030	 ldr         r3, [sp, #0x30]
  01828	e58d3000	 str         r3, [sp]
  0182c	ea000046	 b           |$LN27@WrappedEmu@2|

; 936  :                     goto contd;

  01830	ea000045	 b           |$contd$38025|
  01834		 |$LN28@WrappedEmu@2|

; 937  :                 }
; 938  :             }

  01834	ea00003e	 b           |$LN26@WrappedEmu@2|
  01838		 |$LN29@WrappedEmu@2|

; 939  :             else if ( pParms->rop4 == 0xf0f0 )

  01838	e59d3060	 ldr         r3, [sp, #0x60]
  0183c	e2833028	 add         r3, r3, #0x28
  01840	e5932000	 ldr         r2, [r3]
  01844	e3a03a0f	 mov         r3, #0xF, 20
  01848	e38330f0	 orr         r3, r3, #0xF0
  0184c	e1520003	 cmp         r2, r3
  01850	1a00000c	 bne         |$LN25@WrappedEmu@2|

; 940  :             {
; 941  :                 if (pParms->solidColor != -1)

  01854	e59d3060	 ldr         r3, [sp, #0x60]
  01858	e2833020	 add         r3, r3, #0x20
  0185c	e5933000	 ldr         r3, [r3]
  01860	e3730001	 cmn         r3, #1
  01864	0a000006	 beq         |$LN24@WrappedEmu@2|

; 942  :                 {    // must be a solid colored brush
; 943  :                      code = EmulatedBltFill16_Eml(pParms);

  01868	e59d0060	 ldr         r0, [sp, #0x60]
  0186c	eb000000	 bl          |?EmulatedBltFill16_Eml@@YAJPAUGPEBltParms@@@Z|
  01870	e58d0034	 str         r0, [sp, #0x34]
  01874	e59d3034	 ldr         r3, [sp, #0x34]
  01878	e58d3000	 str         r3, [sp]
  0187c	ea000032	 b           |$LN23@WrappedEmu@2|

; 944  :                      goto contd;

  01880	ea000031	 b           |$contd$38025|
  01884		 |$LN24@WrappedEmu@2|

; 945  :                 }
; 946  :             }

  01884	ea00002a	 b           |$LN22@WrappedEmu@2|
  01888		 |$LN25@WrappedEmu@2|

; 947  :             else if ( pParms->rop4 == 0xaaf0 )

  01888	e59d3060	 ldr         r3, [sp, #0x60]
  0188c	e2833028	 add         r3, r3, #0x28
  01890	e5932000	 ldr         r2, [r3]
  01894	e3a03caa	 mov         r3, #0xAA, 24
  01898	e38330f0	 orr         r3, r3, #0xF0
  0189c	e1520003	 cmp         r2, r3
  018a0	1a000023	 bne         |$LN21@WrappedEmu@2|

; 948  :             {
; 949  :                 if (pParms->solidColor != -1)

  018a4	e59d3060	 ldr         r3, [sp, #0x60]
  018a8	e2833020	 add         r3, r3, #0x20
  018ac	e5933000	 ldr         r3, [r3]
  018b0	e3730001	 cmn         r3, #1
  018b4	0a00001e	 beq         |$LN20@WrappedEmu@2|

; 950  :                 {
; 951  :                     if (pParms->pMask->Format() == gpe1Bpp)

  018b8	e59d3060	 ldr         r3, [sp, #0x60]
  018bc	e283300c	 add         r3, r3, #0xC
  018c0	e5930000	 ldr         r0, [r3]
  018c4	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  018c8	e58d0038	 str         r0, [sp, #0x38]
  018cc	e59d3038	 ldr         r3, [sp, #0x38]
  018d0	e3530000	 cmp         r3, #0
  018d4	1a000007	 bne         |$LN19@WrappedEmu@2|

; 952  :                     {
; 953  :                         code = EmulatedBltText16_Eml(pParms);

  018d8	e59d0060	 ldr         r0, [sp, #0x60]
  018dc	eb000000	 bl          |?EmulatedBltText16_Eml@@YAJPAUGPEBltParms@@@Z|
  018e0	e58d003c	 str         r0, [sp, #0x3C]
  018e4	e59d303c	 ldr         r3, [sp, #0x3C]
  018e8	e58d3000	 str         r3, [sp]
  018ec	ea000016	 b           |$LN18@WrappedEmu@2|

; 954  :                         goto contd;

  018f0	ea000015	 b           |$contd$38025|
  018f4	ea00000e	 b           |$LN17@WrappedEmu@2|
  018f8		 |$LN19@WrappedEmu@2|

; 955  :                     }
; 956  :                     else if (pParms->pMask->Format() == gpe4Bpp)

  018f8	e59d3060	 ldr         r3, [sp, #0x60]
  018fc	e283300c	 add         r3, r3, #0xC
  01900	e5930000	 ldr         r0, [r3]
  01904	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  01908	e58d0040	 str         r0, [sp, #0x40]
  0190c	e59d3040	 ldr         r3, [sp, #0x40]
  01910	e3530002	 cmp         r3, #2
  01914	1a000006	 bne         |$LN16@WrappedEmu@2|

; 957  :                     {
; 958  :                         code = EmulatedBltAlphaText16_Eml(pParms);

  01918	e59d0060	 ldr         r0, [sp, #0x60]
  0191c	eb000000	 bl          |?EmulatedBltAlphaText16_Eml@@YAJPAUGPEBltParms@@@Z|
  01920	e58d0044	 str         r0, [sp, #0x44]
  01924	e59d3044	 ldr         r3, [sp, #0x44]
  01928	e58d3000	 str         r3, [sp]
  0192c	ea000006	 b           |$LN15@WrappedEmu@2|

; 959  :                         goto contd;

  01930	ea000005	 b           |$contd$38025|
  01934		 |$LN16@WrappedEmu@2|
  01934		 |$LN17@WrappedEmu@2|
  01934		 |$LN20@WrappedEmu@2|
  01934		 |$LN21@WrappedEmu@2|
  01934		 |$LN22@WrappedEmu@2|
  01934		 |$LN26@WrappedEmu@2|
  01934		 |$LN30@WrappedEmu@2|

; 960  :                     }
; 961  :                 }
; 962  :             }
; 963  :         }
; 964  : 
; 965  :         code = EmulatedBlt(pParms);

  01934	e59d1060	 ldr         r1, [sp, #0x60]
  01938	e59d005c	 ldr         r0, [sp, #0x5C]
  0193c	eb000000	 bl          |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  01940	e58d0048	 str         r0, [sp, #0x48]
  01944	e59d3048	 ldr         r3, [sp, #0x48]
  01948	e58d3000	 str         r3, [sp]
  0194c		 |$LN31@WrappedEmu@2|
  0194c		 |$LN15@WrappedEmu@2|
  0194c		 |$LN18@WrappedEmu@2|
  0194c		 |$LN23@WrappedEmu@2|
  0194c		 |$LN27@WrappedEmu@2|
  0194c		 |$contd$38025|

; 966  :     }
; 967  : 
; 968  : contd:
; 969  : 
; 970  :     if (bDoRotation)

  0194c	e59f3298	 ldr         r3, [pc, #0x298]
  01950	e5933000	 ldr         r3, [r3]
  01954	e3530000	 cmp         r3, #0
  01958	0a00009b	 beq         |$LN14@WrappedEmu@2|

; 971  :     {
; 972  :         bounds.left   = pParms->prclDst->left;

  0195c	e59d3060	 ldr         r3, [sp, #0x60]
  01960	e2833014	 add         r3, r3, #0x14
  01964	e5933000	 ldr         r3, [r3]
  01968	e5933000	 ldr         r3, [r3]
  0196c	e58d3004	 str         r3, [sp, #4]

; 973  :         bounds.top    = pParms->prclDst->top;

  01970	e59d3060	 ldr         r3, [sp, #0x60]
  01974	e2833014	 add         r3, r3, #0x14
  01978	e5933000	 ldr         r3, [r3]
  0197c	e2833004	 add         r3, r3, #4
  01980	e5933000	 ldr         r3, [r3]
  01984	e58d3008	 str         r3, [sp, #8]

; 974  :         bounds.right  = pParms->prclDst->right;

  01988	e59d3060	 ldr         r3, [sp, #0x60]
  0198c	e2833014	 add         r3, r3, #0x14
  01990	e5933000	 ldr         r3, [r3]
  01994	e2833008	 add         r3, r3, #8
  01998	e5933000	 ldr         r3, [r3]
  0199c	e58d300c	 str         r3, [sp, #0xC]

; 975  :         bounds.bottom = pParms->prclDst->bottom;

  019a0	e59d3060	 ldr         r3, [sp, #0x60]
  019a4	e2833014	 add         r3, r3, #0x14
  019a8	e5933000	 ldr         r3, [r3]
  019ac	e283300c	 add         r3, r3, #0xC
  019b0	e5933000	 ldr         r3, [r3]
  019b4	e58d3010	 str         r3, [sp, #0x10]

; 976  : 
; 977  :         if(bounds.left > bounds.right)

  019b8	e59d2004	 ldr         r2, [sp, #4]
  019bc	e59d300c	 ldr         r3, [sp, #0xC]
  019c0	e1520003	 cmp         r2, r3
  019c4	da000005	 ble         |$LN13@WrappedEmu@2|

; 978  :         {
; 979  :             SWAP(int,bounds.left,bounds.right)

  019c8	e59d3004	 ldr         r3, [sp, #4]
  019cc	e58d3014	 str         r3, [sp, #0x14]
  019d0	e59d300c	 ldr         r3, [sp, #0xC]
  019d4	e58d3004	 str         r3, [sp, #4]
  019d8	e59d3014	 ldr         r3, [sp, #0x14]
  019dc	e58d300c	 str         r3, [sp, #0xC]
  019e0		 |$LN13@WrappedEmu@2|

; 980  :         }
; 981  : 
; 982  :         if( bounds.top > bounds.bottom)

  019e0	e59d2008	 ldr         r2, [sp, #8]
  019e4	e59d3010	 ldr         r3, [sp, #0x10]
  019e8	e1520003	 cmp         r2, r3
  019ec	da000005	 ble         |$LN12@WrappedEmu@2|

; 983  :         {
; 984  :             SWAP(int,bounds.top,bounds.bottom)

  019f0	e59d3008	 ldr         r3, [sp, #8]
  019f4	e58d3018	 str         r3, [sp, #0x18]
  019f8	e59d3010	 ldr         r3, [sp, #0x10]
  019fc	e58d3008	 str         r3, [sp, #8]
  01a00	e59d3018	 ldr         r3, [sp, #0x18]
  01a04	e58d3010	 str         r3, [sp, #0x10]
  01a08		 |$LN12@WrappedEmu@2|

; 985  :         }
; 986  : 
; 987  :         if (bounds.top == bounds.bottom-1)

  01a08	e59d3010	 ldr         r3, [sp, #0x10]
  01a0c	e2432001	 sub         r2, r3, #1
  01a10	e59d3008	 ldr         r3, [sp, #8]
  01a14	e1530002	 cmp         r3, r2
  01a18	1a000033	 bne         |$LN11@WrappedEmu@2|

; 988  :         {
; 989  :             if ( !( (pParms->bltFlags & (BLT_ALPHABLEND | BLT_TRANSPARENT | BLT_STRETCH)) || (pParms->pLookup) || (pParms->pConvert) ) )

  01a1c	e59d3060	 ldr         r3, [sp, #0x60]
  01a20	e2833024	 add         r3, r3, #0x24
  01a24	e5933000	 ldr         r3, [r3]
  01a28	e313001c	 tst         r3, #0x1C
  01a2c	1a00002e	 bne         |$LN10@WrappedEmu@2|
  01a30	e59d3060	 ldr         r3, [sp, #0x60]
  01a34	e283303c	 add         r3, r3, #0x3C
  01a38	e5933000	 ldr         r3, [r3]
  01a3c	e3530000	 cmp         r3, #0
  01a40	1a000029	 bne         |$LN10@WrappedEmu@2|
  01a44	e59d3060	 ldr         r3, [sp, #0x60]
  01a48	e2833040	 add         r3, r3, #0x40
  01a4c	e5933000	 ldr         r3, [r3]
  01a50	e3530000	 cmp         r3, #0
  01a54	1a000024	 bne         |$LN10@WrappedEmu@2|

; 990  :             {
; 991  :                 if ( pParms->rop4 == 0xf0f0 )

  01a58	e59d3060	 ldr         r3, [sp, #0x60]
  01a5c	e2833028	 add         r3, r3, #0x28
  01a60	e5932000	 ldr         r2, [r3]
  01a64	e3a03a0f	 mov         r3, #0xF, 20
  01a68	e38330f0	 orr         r3, r3, #0xF0
  01a6c	e1520003	 cmp         r2, r3
  01a70	1a00001d	 bne         |$LN9@WrappedEmu@2|

; 992  :                 {
; 993  :                     if ( EGPEFormatToBpp[pParms->pDst->Format()] == 16 )

  01a74	e59d3060	 ldr         r3, [sp, #0x60]
  01a78	e2833004	 add         r3, r3, #4
  01a7c	e5930000	 ldr         r0, [r3]
  01a80	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  01a84	e58d004c	 str         r0, [sp, #0x4C]
  01a88	e59d104c	 ldr         r1, [sp, #0x4C]
  01a8c	e3a03004	 mov         r3, #4
  01a90	e0020391	 mul         r2, r1, r3
  01a94	e59f3148	 ldr         r3, [pc, #0x148]
  01a98	e0833002	 add         r3, r3, r2
  01a9c	e5933000	 ldr         r3, [r3]
  01aa0	e3530010	 cmp         r3, #0x10
  01aa4	1a000010	 bne         |$LN8@WrappedEmu@2|

; 994  :                     {
; 995  :                         if (pParms->solidColor != -1)

  01aa8	e59d3060	 ldr         r3, [sp, #0x60]
  01aac	e2833020	 add         r3, r3, #0x20
  01ab0	e5933000	 ldr         r3, [r3]
  01ab4	e3730001	 cmn         r3, #1
  01ab8	0a00000b	 beq         |$LN7@WrappedEmu@2|

; 996  :                         {    // must be a solid colored brush
; 997  :                             if (!gDrawCursorFlag)

  01abc	e59f3124	 ldr         r3, [pc, #0x124]
  01ac0	e5933000	 ldr         r3, [r3]
  01ac4	e3530000	 cmp         r3, #0
  01ac8	1a000007	 bne         |$LN6@WrappedEmu@2|

; 998  :                             {
; 999  :                                 DispDrvrDirtyRectDump2((LPRECT)&bounds,pParms->solidColor);

  01acc	e59d3060	 ldr         r3, [sp, #0x60]
  01ad0	e2833020	 add         r3, r3, #0x20
  01ad4	e5931000	 ldr         r1, [r3]
  01ad8	e28d0004	 add         r0, sp, #4
  01adc	eb000000	 bl          DispDrvrDirtyRectDump2

; 1000 :                                 return S_OK;

  01ae0	e3a03000	 mov         r3, #0
  01ae4	e58d301c	 str         r3, [sp, #0x1C]
  01ae8	ea000039	 b           |$LN35@WrappedEmu@2|
  01aec		 |$LN6@WrappedEmu@2|
  01aec		 |$LN7@WrappedEmu@2|
  01aec		 |$LN8@WrappedEmu@2|
  01aec		 |$LN9@WrappedEmu@2|
  01aec		 |$LN10@WrappedEmu@2|
  01aec		 |$LN11@WrappedEmu@2|

; 1001 :                             }
; 1002 :                         }
; 1003 :                     }
; 1004 :                 }
; 1005 :             }
; 1006 :         }
; 1007 : 
; 1008 :         if ( !( (pParms->bltFlags & (BLT_ALPHABLEND | BLT_TRANSPARENT | BLT_STRETCH)) || (pParms->pLookup) || (pParms->pConvert) ) )

  01aec	e59d3060	 ldr         r3, [sp, #0x60]
  01af0	e2833024	 add         r3, r3, #0x24
  01af4	e5933000	 ldr         r3, [r3]
  01af8	e313001c	 tst         r3, #0x1C
  01afc	1a00002a	 bne         |$LN5@WrappedEmu@2|
  01b00	e59d3060	 ldr         r3, [sp, #0x60]
  01b04	e283303c	 add         r3, r3, #0x3C
  01b08	e5933000	 ldr         r3, [r3]
  01b0c	e3530000	 cmp         r3, #0
  01b10	1a000025	 bne         |$LN5@WrappedEmu@2|
  01b14	e59d3060	 ldr         r3, [sp, #0x60]
  01b18	e2833040	 add         r3, r3, #0x40
  01b1c	e5933000	 ldr         r3, [r3]
  01b20	e3530000	 cmp         r3, #0
  01b24	1a000020	 bne         |$LN5@WrappedEmu@2|

; 1009 :         {
; 1010 :             if ( pParms->rop4 == 0xf0f0 )

  01b28	e59d3060	 ldr         r3, [sp, #0x60]
  01b2c	e2833028	 add         r3, r3, #0x28
  01b30	e5932000	 ldr         r2, [r3]
  01b34	e3a03a0f	 mov         r3, #0xF, 20
  01b38	e38330f0	 orr         r3, r3, #0xF0
  01b3c	e1520003	 cmp         r2, r3
  01b40	1a000019	 bne         |$LN4@WrappedEmu@2|

; 1011 :             {
; 1012 :                 if ( EGPEFormatToBpp[pParms->pDst->Format()] == 16 )

  01b44	e59d3060	 ldr         r3, [sp, #0x60]
  01b48	e2833004	 add         r3, r3, #4
  01b4c	e5930000	 ldr         r0, [r3]
  01b50	eb000000	 bl          |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|
  01b54	e58d0050	 str         r0, [sp, #0x50]
  01b58	e59d1050	 ldr         r1, [sp, #0x50]
  01b5c	e3a03004	 mov         r3, #4
  01b60	e0020391	 mul         r2, r1, r3
  01b64	e59f3078	 ldr         r3, [pc, #0x78]
  01b68	e0833002	 add         r3, r3, r2
  01b6c	e5933000	 ldr         r3, [r3]
  01b70	e3530010	 cmp         r3, #0x10
  01b74	1a00000c	 bne         |$LN3@WrappedEmu@2|

; 1013 :                 {
; 1014 :                     if (pParms->solidColor != -1)

  01b78	e59d3060	 ldr         r3, [sp, #0x60]
  01b7c	e2833020	 add         r3, r3, #0x20
  01b80	e5933000	 ldr         r3, [r3]
  01b84	e3730001	 cmn         r3, #1
  01b88	0a000007	 beq         |$LN2@WrappedEmu@2|

; 1015 :                     {    // must be a solid colored brush
; 1016 :                         DispDrvrDirtyRectDump_rectfill((LPRECT)&bounds,pParms->solidColor);

  01b8c	e59d3060	 ldr         r3, [sp, #0x60]
  01b90	e2833020	 add         r3, r3, #0x20
  01b94	e5931000	 ldr         r1, [r3]
  01b98	e28d0004	 add         r0, sp, #4
  01b9c	eb000000	 bl          DispDrvrDirtyRectDump_rectfill

; 1017 :                         return S_OK;

  01ba0	e3a03000	 mov         r3, #0
  01ba4	e58d301c	 str         r3, [sp, #0x1C]
  01ba8	ea000009	 b           |$LN35@WrappedEmu@2|
  01bac		 |$LN2@WrappedEmu@2|
  01bac		 |$LN3@WrappedEmu@2|
  01bac		 |$LN4@WrappedEmu@2|
  01bac		 |$LN5@WrappedEmu@2|

; 1018 :                     }
; 1019 :                 }
; 1020 :             }
; 1021 :         }
; 1022 : 
; 1023 :         if(FAILED(code))

  01bac	e59d3000	 ldr         r3, [sp]
  01bb0	e3530000	 cmp         r3, #0
  01bb4	aa000002	 bge         |$LN1@WrappedEmu@2|

; 1024 :         {
; 1025 :             return code;

  01bb8	e59d3000	 ldr         r3, [sp]
  01bbc	e58d301c	 str         r3, [sp, #0x1C]
  01bc0	ea000003	 b           |$LN35@WrappedEmu@2|
  01bc4		 |$LN1@WrappedEmu@2|

; 1026 :         }
; 1027 : 
; 1028 :         DispDrvrDirtyRectDump((LPRECT)&bounds);

  01bc4	e28d0004	 add         r0, sp, #4
  01bc8	eb000000	 bl          DispDrvrDirtyRectDump
  01bcc		 |$LN14@WrappedEmu@2|

; 1029 :     }
; 1030 : 
; 1031 :     return code;

  01bcc	e59d3000	 ldr         r3, [sp]
  01bd0	e58d301c	 str         r3, [sp, #0x1C]
  01bd4		 |$LN35@WrappedEmu@2|

; 1032 : }

  01bd4	e59d001c	 ldr         r0, [sp, #0x1C]
  01bd8	e28dd054	 add         sp, sp, #0x54
  01bdc	e89d6000	 ldmia       sp, {sp, lr}
  01be0	e12fff1e	 bx          lr
  01be4		 |$LN42@WrappedEmu@2|
  01be4		 |$LN43@WrappedEmu@2|
  01be4	00000000	 DCD         |EGPEFormatToBpp|
  01be8		 |$LN44@WrappedEmu@2|
  01be8	00000000	 DCD         |gDrawCursorFlag|
  01bec		 |$LN45@WrappedEmu@2|
  01bec	00000000	 DCD         |bDoRotation|
  01bf0		 |$LN46@WrappedEmu@2|
  01bf0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01bf4		 |$LN47@WrappedEmu@2|
  01bf4	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01bf8		 |$LN48@WrappedEmu@2|
  01bf8	00000000	 DCD         |??_C@_1KG@POHMEHNN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01bfc		 |$M38802|

			 ENDP  ; |?WrappedEmulatedBlt@SA2Video@@AAAJPAUGPEBltParms@@@Z|, SA2Video::WrappedEmulatedBlt

; File c:\wince600\public\common\oak\inc\gpe.h

  00000			 AREA	 |.pdata|, PDATA
|$T38817| DCD	|$LN5@Format|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ| PROC ; GPESurf::Format

; 189  :     {

  00000		 |$LN5@Format|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M38814|

; 190  :         return m_eFormat;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283301c	 add         r3, r3, #0x1C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 191  :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M38815|

			 ENDP  ; |?Format@GPESurf@@QAA?AW4EGPEFormat@@XZ|, GPESurf::Format

	EXPORT	|??_C@_1CI@FOKELJBH@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAF?$AAi?$AAl?$AAl?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|EmulatedBltFill16ASM|
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\display\pxa27x_lcd\sa2video.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T38828| DCD	|$LN7@EmulatedBl@3|
	DCD	0x40005404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FOKELJBH@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAF?$AAi?$AAl?$AAl?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "m", 0x0, "u", 0x0, "l", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "B", 0x0, "l", 0x0, "t", 0x0, "F", 0x0, "i"
	DCB	0x0, "l", 0x0, "l", 0x0, "1", 0x0, "6", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBltFill16_Eml@@YAJPAUGPEBltParms@@@Z| PROC ; EmulatedBltFill16_Eml

; 634  : {

  00000		 |$LN7@EmulatedBl@3|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd038	 sub         sp, sp, #0x38
  00010		 |$M38825|

; 635  :     DEBUGMSG(GPE_ZONE_BLT_HI,(TEXT("EmulatedBltFill16\r\n")));

  00010	e59f3134	 ldr         r3, [pc, #0x134]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130040	 tst         r3, #0x40
  0001c	0a000004	 beq         |$LN3@EmulatedBl@3|
  00020	e59f0120	 ldr         r0, [pc, #0x120]
  00024	eb000000	 bl          NKDbgPrintfW
  00028	e3a03001	 mov         r3, #1
  0002c	e58d302c	 str         r3, [sp, #0x2C]
  00030	ea000001	 b           |$LN4@EmulatedBl@3|
  00034		 |$LN3@EmulatedBl@3|
  00034	e3a03000	 mov         r3, #0
  00038	e58d302c	 str         r3, [sp, #0x2C]
  0003c		 |$LN4@EmulatedBl@3|

; 636  : 
; 637  :     UINT32   iDstScanStride = pParms->pDst->Stride();

  0003c	e59d3040	 ldr         r3, [sp, #0x40]
  00040	e2833004	 add         r3, r3, #4
  00044	e5930000	 ldr         r0, [r3]
  00048	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  0004c	e58d0030	 str         r0, [sp, #0x30]
  00050	e59d3030	 ldr         r3, [sp, #0x30]
  00054	e58d3014	 str         r3, [sp, #0x14]

; 638  :     BYTE   * pbDibBitsDst   = (BYTE *)pParms->pDst->Buffer();

  00058	e59d3040	 ldr         r3, [sp, #0x40]
  0005c	e2833004	 add         r3, r3, #4
  00060	e5930000	 ldr         r0, [r3]
  00064	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00068	e58d0034	 str         r0, [sp, #0x34]
  0006c	e59d3034	 ldr         r3, [sp, #0x34]
  00070	e58d3010	 str         r3, [sp, #0x10]

; 639  :     PRECTL   prcDst         = pParms->prclDst;

  00074	e59d3040	 ldr         r3, [sp, #0x40]
  00078	e2833014	 add         r3, r3, #0x14
  0007c	e5933000	 ldr         r3, [r3]
  00080	e58d3018	 str         r3, [sp, #0x18]

; 640  :     DWORD    dwOnColorIndex = pParms->solidColor;

  00084	e59d3040	 ldr         r3, [sp, #0x40]
  00088	e2833020	 add         r3, r3, #0x20
  0008c	e5933000	 ldr         r3, [r3]
  00090	e58d301c	 str         r3, [sp, #0x1C]

; 641  :     int      iNumDstRows    = prcDst->bottom - prcDst->top;

  00094	e59d3018	 ldr         r3, [sp, #0x18]
  00098	e283200c	 add         r2, r3, #0xC
  0009c	e59d3018	 ldr         r3, [sp, #0x18]
  000a0	e2833004	 add         r3, r3, #4
  000a4	e5922000	 ldr         r2, [r2]
  000a8	e5933000	 ldr         r3, [r3]
  000ac	e0423003	 sub         r3, r2, r3
  000b0	e58d300c	 str         r3, [sp, #0xC]

; 642  :     int      iNumDstCols    = prcDst->right  - prcDst->left;

  000b4	e59d3018	 ldr         r3, [sp, #0x18]
  000b8	e2833008	 add         r3, r3, #8
  000bc	e5932000	 ldr         r2, [r3]
  000c0	e59d3018	 ldr         r3, [sp, #0x18]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e0423003	 sub         r3, r2, r3
  000cc	e58d3020	 str         r3, [sp, #0x20]

; 643  : 
; 644  :     // Compute pointer to the starting rows in the dst bitmap
; 645  :     WORD *pwDstScanLine = (WORD *)(pbDibBitsDst + prcDst->top * iDstScanStride + prcDst->left * 2);

  000d0	e59d3018	 ldr         r3, [sp, #0x18]
  000d4	e2833004	 add         r3, r3, #4
  000d8	e5931000	 ldr         r1, [r3]
  000dc	e59d3014	 ldr         r3, [sp, #0x14]
  000e0	e0020391	 mul         r2, r1, r3
  000e4	e59d3010	 ldr         r3, [sp, #0x10]
  000e8	e0831002	 add         r1, r3, r2
  000ec	e59d3018	 ldr         r3, [sp, #0x18]
  000f0	e5932000	 ldr         r2, [r3]
  000f4	e3a03002	 mov         r3, #2
  000f8	e0030392	 mul         r3, r2, r3
  000fc	e0813003	 add         r3, r1, r3
  00100	e58d3004	 str         r3, [sp, #4]

; 646  :     WORD  wColor = (WORD)dwOnColorIndex;

  00104	e59d301c	 ldr         r3, [sp, #0x1C]
  00108	e1a03803	 mov         r3, r3, lsl #16
  0010c	e1a03823	 mov         r3, r3, lsr #16
  00110	e1cd30b8	 strh        r3, [sp, #8]

; 647  : 
; 648  :     EmulatedBltFill16ASM(pwDstScanLine, wColor, iNumDstCols, iNumDstRows, iDstScanStride);

  00114	e59d3014	 ldr         r3, [sp, #0x14]
  00118	e58d3000	 str         r3, [sp]
  0011c	e59d300c	 ldr         r3, [sp, #0xC]
  00120	e59d2020	 ldr         r2, [sp, #0x20]
  00124	e1dd10b8	 ldrh        r1, [sp, #8]
  00128	e59d0004	 ldr         r0, [sp, #4]
  0012c	eb000000	 bl          EmulatedBltFill16ASM

; 649  :     return S_OK;

  00130	e3a03000	 mov         r3, #0
  00134	e58d3028	 str         r3, [sp, #0x28]

; 650  : }

  00138	e59d0028	 ldr         r0, [sp, #0x28]
  0013c	e28dd038	 add         sp, sp, #0x38
  00140	e89d6000	 ldmia       sp, {sp, lr}
  00144	e12fff1e	 bx          lr
  00148		 |$LN8@EmulatedBl@3|
  00148		 |$LN9@EmulatedBl@3|
  00148	00000000	 DCD         |??_C@_1CI@FOKELJBH@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAF?$AAi?$AAl?$AAl?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@|
  0014c		 |$LN10@EmulatedBl@3|
  0014c	00000000	 DCD         |dpCurSettings|
  00150		 |$M38826|

			 ENDP  ; |?EmulatedBltFill16_Eml@@YAJPAUGPEBltParms@@@Z|, EmulatedBltFill16_Eml

	EXPORT	|??_C@_1DC@GLJHCNAA@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAA?$AAl?$AAp?$AAh?$AAa?$AAT?$AAe?$AAx?$AAt?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T38850| DCD	|$LN32@EmulatedBl@4|
	DCD	0x40010b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@GLJHCNAA@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAA?$AAl?$AAp?$AAh?$AAa?$AAT?$AAe?$AAx?$AAt?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "m", 0x0, "u", 0x0, "l", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "B", 0x0, "l", 0x0, "t", 0x0, "A", 0x0, "l"
	DCB	0x0, "p", 0x0, "h", 0x0, "a", 0x0, "T", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, "1", 0x0, "6", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBltAlphaText16_Eml@@YAJPAUGPEBltParms@@@Z| PROC ; EmulatedBltAlphaText16_Eml

; 750  : {

  00000		 |$LN32@EmulatedBl@4|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd068	 sub         sp, sp, #0x68
  00010		 |$M38847|

; 751  :     DEBUGMSG(GPE_ZONE_BLT_HI,(TEXT("EmulatedBltAlphaText16\r\n")));

  00010	e59f3410	 ldr         r3, [pc, #0x410]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130040	 tst         r3, #0x40
  0001c	0a000004	 beq         |$LN19@EmulatedBl@4|
  00020	e59f03fc	 ldr         r0, [pc, #0x3FC]
  00024	eb000000	 bl          NKDbgPrintfW
  00028	e3a03001	 mov         r3, #1
  0002c	e58d304c	 str         r3, [sp, #0x4C]
  00030	ea000001	 b           |$LN20@EmulatedBl@4|
  00034		 |$LN19@EmulatedBl@4|
  00034	e3a03000	 mov         r3, #0
  00038	e58d304c	 str         r3, [sp, #0x4C]
  0003c		 |$LN20@EmulatedBl@4|

; 752  : 
; 753  :     UINT32   iDstScanStride  = pParms->pDst->Stride();

  0003c	e59d3070	 ldr         r3, [sp, #0x70]
  00040	e2833004	 add         r3, r3, #4
  00044	e5930000	 ldr         r0, [r3]
  00048	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  0004c	e58d0050	 str         r0, [sp, #0x50]
  00050	e59d3050	 ldr         r3, [sp, #0x50]
  00054	e58d301c	 str         r3, [sp, #0x1C]

; 754  :     BYTE   * pDibBitsDst     = (BYTE *)pParms->pDst->Buffer();

  00058	e59d3070	 ldr         r3, [sp, #0x70]
  0005c	e2833004	 add         r3, r3, #4
  00060	e5930000	 ldr         r0, [r3]
  00064	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00068	e58d0054	 str         r0, [sp, #0x54]
  0006c	e59d3054	 ldr         r3, [sp, #0x54]
  00070	e58d3004	 str         r3, [sp, #4]

; 755  :     UINT32   iSrcScanStride  = pParms->pMask->Stride();

  00074	e59d3070	 ldr         r3, [sp, #0x70]
  00078	e283300c	 add         r3, r3, #0xC
  0007c	e5930000	 ldr         r0, [r3]
  00080	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  00084	e58d0058	 str         r0, [sp, #0x58]
  00088	e59d3058	 ldr         r3, [sp, #0x58]
  0008c	e58d303c	 str         r3, [sp, #0x3C]

; 756  :     BYTE   * pDibBitsSrc     = (BYTE *)pParms->pMask->Buffer();

  00090	e59d3070	 ldr         r3, [sp, #0x70]
  00094	e283300c	 add         r3, r3, #0xC
  00098	e5930000	 ldr         r0, [r3]
  0009c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  000a0	e58d005c	 str         r0, [sp, #0x5C]
  000a4	e59d305c	 ldr         r3, [sp, #0x5C]
  000a8	e58d3038	 str         r3, [sp, #0x38]

; 757  :     PRECTL   prcSrc          = pParms->prclMask;

  000ac	e59d3070	 ldr         r3, [sp, #0x70]
  000b0	e283302c	 add         r3, r3, #0x2C
  000b4	e5933000	 ldr         r3, [r3]
  000b8	e58d3014	 str         r3, [sp, #0x14]

; 758  :     PRECTL   prcDst          = pParms->prclDst;

  000bc	e59d3070	 ldr         r3, [sp, #0x70]
  000c0	e2833014	 add         r3, r3, #0x14
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e58d3020	 str         r3, [sp, #0x20]

; 759  :     WORD     wOnColor[5];
; 760  :     int      iNumDstRows;
; 761  :     int      iNumDstCols;
; 762  :     BYTE   * pbSrcScanLine;
; 763  :     BYTE   * pbDstScanLine;
; 764  :     BYTE   * pbSrc;
; 765  :     WORD   * pwDstPixel;
; 766  :     BOOL     bOdd;
; 767  :     BYTE     bSrc;
; 768  : 
; 769  :     // Caller assures a well-ordered, non-empty rect
; 770  :     // compute size of destination rect
; 771  :     iNumDstCols = prcDst->right  - prcDst->left;

  000cc	e59d3020	 ldr         r3, [sp, #0x20]
  000d0	e2833008	 add         r3, r3, #8
  000d4	e5932000	 ldr         r2, [r3]
  000d8	e59d3020	 ldr         r3, [sp, #0x20]
  000dc	e5933000	 ldr         r3, [r3]
  000e0	e0423003	 sub         r3, r2, r3
  000e4	e58d3034	 str         r3, [sp, #0x34]

; 772  :     iNumDstRows = prcDst->bottom - prcDst->top;

  000e8	e59d3020	 ldr         r3, [sp, #0x20]
  000ec	e283200c	 add         r2, r3, #0xC
  000f0	e59d3020	 ldr         r3, [sp, #0x20]
  000f4	e2833004	 add         r3, r3, #4
  000f8	e5922000	 ldr         r2, [r2]
  000fc	e5933000	 ldr         r3, [r3]
  00100	e0423003	 sub         r3, r2, r3
  00104	e58d3010	 str         r3, [sp, #0x10]

; 773  : 
; 774  :     // compute pointers to the starting rows in the src and dst bitmaps
; 775  :     pbSrcScanLine = pDibBitsSrc + prcSrc->top * iSrcScanStride + (prcSrc->left >> 1);

  00108	e59d3014	 ldr         r3, [sp, #0x14]
  0010c	e2833004	 add         r3, r3, #4
  00110	e5931000	 ldr         r1, [r3]
  00114	e59d303c	 ldr         r3, [sp, #0x3C]
  00118	e0020391	 mul         r2, r1, r3
  0011c	e59d3038	 ldr         r3, [sp, #0x38]
  00120	e0832002	 add         r2, r3, r2
  00124	e59d3014	 ldr         r3, [sp, #0x14]
  00128	e5933000	 ldr         r3, [r3]
  0012c	e1a030c3	 mov         r3, r3, asr #1
  00130	e0823003	 add         r3, r2, r3
  00134	e58d3018	 str         r3, [sp, #0x18]

; 776  :     pbDstScanLine = pDibBitsDst + prcDst->top * iDstScanStride + prcDst->left * 2;

  00138	e59d3020	 ldr         r3, [sp, #0x20]
  0013c	e2833004	 add         r3, r3, #4
  00140	e5931000	 ldr         r1, [r3]
  00144	e59d301c	 ldr         r3, [sp, #0x1C]
  00148	e0020391	 mul         r2, r1, r3
  0014c	e59d3004	 ldr         r3, [sp, #4]
  00150	e0831002	 add         r1, r3, r2
  00154	e59d3020	 ldr         r3, [sp, #0x20]
  00158	e5932000	 ldr         r2, [r3]
  0015c	e3a03002	 mov         r3, #2
  00160	e0030392	 mul         r3, r2, r3
  00164	e0813003	 add         r3, r1, r3
  00168	e58d3030	 str         r3, [sp, #0x30]

; 777  : 
; 778  :     // Create pixel values with 0/4, 1/4, 2/4, 3/4 and 4/4 of the solid brush color
; 779  :     wOnColor[0] = 0;

  0016c	e3a03000	 mov         r3, #0
  00170	e1cd32b4	 strh        r3, [sp, #0x24]

; 780  :     wOnColor[4] = (WORD)pParms->solidColor;

  00174	e59d3070	 ldr         r3, [sp, #0x70]
  00178	e2833020	 add         r3, r3, #0x20
  0017c	e5933000	 ldr         r3, [r3]
  00180	e1a03803	 mov         r3, r3, lsl #16
  00184	e1a03823	 mov         r3, r3, lsr #16
  00188	e1cd32bc	 strh        r3, [sp, #0x2C]

; 781  :     wOnColor[2] = (wOnColor[4] >> 1 ) & SHIFT_ONE_MASK;

  0018c	e1dd32bc	 ldrh        r3, [sp, #0x2C]
  00190	e1a020c3	 mov         r2, r3, asr #1
  00194	e3a03c7b	 mov         r3, #0x7B, 24
  00198	e38330ef	 orr         r3, r3, #0xEF
  0019c	e0023003	 and         r3, r2, r3
  001a0	e1a03803	 mov         r3, r3, lsl #16
  001a4	e1a03823	 mov         r3, r3, lsr #16
  001a8	e1cd32b8	 strh        r3, [sp, #0x28]

; 782  :     wOnColor[1] = (wOnColor[4] >> 2 ) & SHIFT_TWO_MASK;

  001ac	e1dd32bc	 ldrh        r3, [sp, #0x2C]
  001b0	e1a02143	 mov         r2, r3, asr #2
  001b4	e3a03c39	 mov         r3, #0x39, 24
  001b8	e38330e7	 orr         r3, r3, #0xE7
  001bc	e0023003	 and         r3, r2, r3
  001c0	e1a03803	 mov         r3, r3, lsl #16
  001c4	e1a03823	 mov         r3, r3, lsr #16
  001c8	e1cd32b6	 strh        r3, [sp, #0x26]

; 783  :     wOnColor[3] = wOnColor[1] + wOnColor[2];

  001cc	e1dd32b6	 ldrh        r3, [sp, #0x26]
  001d0	e1a02003	 mov         r2, r3
  001d4	e1dd32b8	 ldrh        r3, [sp, #0x28]
  001d8	e0823003	 add         r3, r2, r3
  001dc	e1a03803	 mov         r3, r3, lsl #16
  001e0	e1a03823	 mov         r3, r3, lsr #16
  001e4	e1cd32ba	 strh        r3, [sp, #0x2A]

; 784  : 
; 785  : 
; 786  :     for (int i = 0; i < iNumDstRows; i++)

  001e8	e3a03000	 mov         r3, #0
  001ec	e58d3040	 str         r3, [sp, #0x40]
  001f0	ea000002	 b           |$LN16@EmulatedBl@4|
  001f4		 |$LN15@EmulatedBl@4|
  001f4	e59d3040	 ldr         r3, [sp, #0x40]
  001f8	e2833001	 add         r3, r3, #1
  001fc	e58d3040	 str         r3, [sp, #0x40]
  00200		 |$LN16@EmulatedBl@4|
  00200	e59d2040	 ldr         r2, [sp, #0x40]
  00204	e59d3010	 ldr         r3, [sp, #0x10]
  00208	e1520003	 cmp         r2, r3
  0020c	aa00007e	 bge         |$LN14@EmulatedBl@4|

; 787  :     {
; 788  :         // set up pointers to first bytes on src and dst scanlines
; 789  :         pbSrc      = pbSrcScanLine;

  00210	e59d3018	 ldr         r3, [sp, #0x18]
  00214	e58d300c	 str         r3, [sp, #0xC]

; 790  :         pwDstPixel = (WORD *)pbDstScanLine;

  00218	e59d3030	 ldr         r3, [sp, #0x30]
  0021c	e58d3008	 str         r3, [sp, #8]

; 791  :         bOdd       = prcSrc->left & 1;

  00220	e59d3014	 ldr         r3, [sp, #0x14]
  00224	e5933000	 ldr         r3, [r3]
  00228	e2033001	 and         r3, r3, #1
  0022c	e58d3000	 str         r3, [sp]

; 792  : 
; 793  :         for (int j = 0; j < iNumDstCols; j++ )

  00230	e3a03000	 mov         r3, #0
  00234	e58d3044	 str         r3, [sp, #0x44]
  00238	ea000002	 b           |$LN13@EmulatedBl@4|
  0023c		 |$LN12@EmulatedBl@4|
  0023c	e59d3044	 ldr         r3, [sp, #0x44]
  00240	e2833001	 add         r3, r3, #1
  00244	e58d3044	 str         r3, [sp, #0x44]
  00248		 |$LN13@EmulatedBl@4|
  00248	e59d2044	 ldr         r2, [sp, #0x44]
  0024c	e59d3034	 ldr         r3, [sp, #0x34]
  00250	e1520003	 cmp         r2, r3
  00254	aa000063	 bge         |$LN11@EmulatedBl@4|

; 794  :         {
; 795  :             if (bOdd)

  00258	e59d3000	 ldr         r3, [sp]
  0025c	e3530000	 cmp         r3, #0
  00260	0a000008	 beq         |$LN10@EmulatedBl@4|

; 796  :             {
; 797  :                 bSrc = *pbSrc++ & 0xF;

  00264	e59d300c	 ldr         r3, [sp, #0xC]
  00268	e5d33000	 ldrb        r3, [r3]
  0026c	e203300f	 and         r3, r3, #0xF
  00270	e20330ff	 and         r3, r3, #0xFF
  00274	e5cd302e	 strb        r3, [sp, #0x2E]
  00278	e59d300c	 ldr         r3, [sp, #0xC]
  0027c	e2833001	 add         r3, r3, #1
  00280	e58d300c	 str         r3, [sp, #0xC]

; 798  :             }
; 799  :             else

  00284	ea000004	 b           |$LN9@EmulatedBl@4|
  00288		 |$LN10@EmulatedBl@4|

; 800  :             {
; 801  :                 bSrc = *pbSrc >> 4;

  00288	e59d300c	 ldr         r3, [sp, #0xC]
  0028c	e5d33000	 ldrb        r3, [r3]
  00290	e1a03243	 mov         r3, r3, asr #4
  00294	e20330ff	 and         r3, r3, #0xFF
  00298	e5cd302e	 strb        r3, [sp, #0x2E]
  0029c		 |$LN9@EmulatedBl@4|

; 802  :             }
; 803  : 
; 804  :             bOdd = !bOdd;

  0029c	e59d3000	 ldr         r3, [sp]
  002a0	e3530000	 cmp         r3, #0
  002a4	1a000002	 bne         |$LN21@EmulatedBl@4|
  002a8	e3a03001	 mov         r3, #1
  002ac	e58d3060	 str         r3, [sp, #0x60]
  002b0	ea000001	 b           |$LN22@EmulatedBl@4|
  002b4		 |$LN21@EmulatedBl@4|
  002b4	e3a03000	 mov         r3, #0
  002b8	e58d3060	 str         r3, [sp, #0x60]
  002bc		 |$LN22@EmulatedBl@4|
  002bc	e59d3060	 ldr         r3, [sp, #0x60]
  002c0	e58d3000	 str         r3, [sp]

; 805  : 
; 806  :             switch ( (bSrc + 1) >> 2 )  // src pixel in range 0...4

  002c4	e5dd302e	 ldrb        r3, [sp, #0x2E]
  002c8	e2833001	 add         r3, r3, #1
  002cc	e1a03143	 mov         r3, r3, asr #2
  002d0	e58d3064	 str         r3, [sp, #0x64]
  002d4	e59d3064	 ldr         r3, [sp, #0x64]
  002d8	e3530004	 cmp         r3, #4
  002dc	8a00003c	 bhi         |$LN1@EmulatedBl@4|
  002e0	e59d2064	 ldr         r2, [sp, #0x64]
  002e4	e1a03102	 mov         r3, r2, lsl #2
  002e8	e083300f	 add         r3, r3, pc
  002ec	e5933004	 ldr         r3, [r3, #4]
  002f0	e08ff003	 add         pc, pc, r3
  002f4		 |$LN24@EmulatedBl@4|
  002f4		 |$LN23@EmulatedBl@4|
  002f4		 |$LN25@EmulatedBl@4|
  002f4	00000010	 DCD         0x10
  002f8		 |$LN26@EmulatedBl@4|
  002f8	00000014	 DCD         0x14
  002fc		 |$LN27@EmulatedBl@4|
  002fc	00000064	 DCD         0x64
  00300		 |$LN28@EmulatedBl@4|
  00300	00000098	 DCD         0x98
  00304		 |$LN29@EmulatedBl@4|
  00304	000000cc	 DCD         0xcc
  00308		 |$LN6@EmulatedBl@4|

; 807  :             {
; 808  :             case 0:
; 809  :                 //      Leave destination untouched
; 810  :                 break;

  00308	ea000032	 b           |$LN7@EmulatedBl@4|
  0030c		 |$LN5@EmulatedBl@4|

; 811  :             case 1:
; 812  :                 //      3/4 destination color and 1/4 brush color
; 813  :                 *pwDstPixel = ((*pwDstPixel >> 2) & SHIFT_TWO_MASK)
; 814  :                             + ((*pwDstPixel >> 1) & SHIFT_ONE_MASK) + wOnColor[1];

  0030c	e59d3008	 ldr         r3, [sp, #8]
  00310	e1d330b0	 ldrh        r3, [r3]
  00314	e1a02143	 mov         r2, r3, asr #2
  00318	e3a03c39	 mov         r3, #0x39, 24
  0031c	e38330e7	 orr         r3, r3, #0xE7
  00320	e0021003	 and         r1, r2, r3
  00324	e59d3008	 ldr         r3, [sp, #8]
  00328	e1d330b0	 ldrh        r3, [r3]
  0032c	e1a020c3	 mov         r2, r3, asr #1
  00330	e3a03c7b	 mov         r3, #0x7B, 24
  00334	e38330ef	 orr         r3, r3, #0xEF
  00338	e0023003	 and         r3, r2, r3
  0033c	e0812003	 add         r2, r1, r3
  00340	e1dd32b6	 ldrh        r3, [sp, #0x26]
  00344	e0823003	 add         r3, r2, r3
  00348	e1a02803	 mov         r2, r3, lsl #16
  0034c	e1a02822	 mov         r2, r2, lsr #16
  00350	e59d3008	 ldr         r3, [sp, #8]
  00354	e1c320b0	 strh        r2, [r3]

; 815  :                 break;

  00358	ea00001e	 b           |$LN7@EmulatedBl@4|
  0035c		 |$LN4@EmulatedBl@4|

; 816  :             case 2:
; 817  :                 //      1/2 destination color and 1/2 brush color
; 818  :                 *pwDstPixel = ((*pwDstPixel >> 1) & SHIFT_ONE_MASK) + wOnColor[2];

  0035c	e59d3008	 ldr         r3, [sp, #8]
  00360	e1d330b0	 ldrh        r3, [r3]
  00364	e1a020c3	 mov         r2, r3, asr #1
  00368	e3a03c7b	 mov         r3, #0x7B, 24
  0036c	e38330ef	 orr         r3, r3, #0xEF
  00370	e0022003	 and         r2, r2, r3
  00374	e1dd32b8	 ldrh        r3, [sp, #0x28]
  00378	e0823003	 add         r3, r2, r3
  0037c	e1a02803	 mov         r2, r3, lsl #16
  00380	e1a02822	 mov         r2, r2, lsr #16
  00384	e59d3008	 ldr         r3, [sp, #8]
  00388	e1c320b0	 strh        r2, [r3]

; 819  :                 break;

  0038c	ea000011	 b           |$LN7@EmulatedBl@4|
  00390		 |$LN3@EmulatedBl@4|

; 820  :             case 3:
; 821  :                 //      1/4 destination color and 3/4 brush color
; 822  :                 *pwDstPixel = ((*pwDstPixel >> 2) & SHIFT_TWO_MASK) + wOnColor[3];

  00390	e59d3008	 ldr         r3, [sp, #8]
  00394	e1d330b0	 ldrh        r3, [r3]
  00398	e1a02143	 mov         r2, r3, asr #2
  0039c	e3a03c39	 mov         r3, #0x39, 24
  003a0	e38330e7	 orr         r3, r3, #0xE7
  003a4	e0022003	 and         r2, r2, r3
  003a8	e1dd32ba	 ldrh        r3, [sp, #0x2A]
  003ac	e0823003	 add         r3, r2, r3
  003b0	e1a02803	 mov         r2, r3, lsl #16
  003b4	e1a02822	 mov         r2, r2, lsr #16
  003b8	e59d3008	 ldr         r3, [sp, #8]
  003bc	e1c320b0	 strh        r2, [r3]

; 823  :                 break;

  003c0	ea000004	 b           |$LN7@EmulatedBl@4|
  003c4		 |$LN2@EmulatedBl@4|

; 824  :             case 4:
; 825  :                 //      Fill with solid brush color
; 826  :                 *pwDstPixel = wOnColor[4];

  003c4	e1dd22bc	 ldrh        r2, [sp, #0x2C]
  003c8	e59d3008	 ldr         r3, [sp, #8]
  003cc	e1c320b0	 strh        r2, [r3]

; 827  :                 break;

  003d0	ea000000	 b           |$LN7@EmulatedBl@4|
  003d4		 |$LN1@EmulatedBl@4|

; 828  :             default:
; 829  :                 DebugBreak();

  003d4	e6000010	 __debugbreak_ce
  003d8		 |$LN7@EmulatedBl@4|

; 830  :             }
; 831  : 
; 832  :             pwDstPixel++;

  003d8	e59d3008	 ldr         r3, [sp, #8]
  003dc	e2833002	 add         r3, r3, #2
  003e0	e58d3008	 str         r3, [sp, #8]

; 833  :         }

  003e4	eaffff94	 b           |$LN12@EmulatedBl@4|
  003e8		 |$LN11@EmulatedBl@4|

; 834  : 
; 835  :         // advance to next scanline
; 836  :         pbSrcScanLine += iSrcScanStride;

  003e8	e59d2018	 ldr         r2, [sp, #0x18]
  003ec	e59d303c	 ldr         r3, [sp, #0x3C]
  003f0	e0823003	 add         r3, r2, r3
  003f4	e58d3018	 str         r3, [sp, #0x18]

; 837  :         pbDstScanLine += iDstScanStride;

  003f8	e59d2030	 ldr         r2, [sp, #0x30]
  003fc	e59d301c	 ldr         r3, [sp, #0x1C]
  00400	e0823003	 add         r3, r2, r3
  00404	e58d3030	 str         r3, [sp, #0x30]

; 838  :     }

  00408	eaffff79	 b           |$LN15@EmulatedBl@4|
  0040c		 |$LN14@EmulatedBl@4|

; 839  : 
; 840  :     return S_OK;

  0040c	e3a03000	 mov         r3, #0
  00410	e58d3048	 str         r3, [sp, #0x48]

; 841  : 
; 842  : }

  00414	e59d0048	 ldr         r0, [sp, #0x48]
  00418	e28dd068	 add         sp, sp, #0x68
  0041c	e89d6000	 ldmia       sp, {sp, lr}
  00420	e12fff1e	 bx          lr
  00424		 |$LN33@EmulatedBl@4|
  00424		 |$LN34@EmulatedBl@4|
  00424	00000000	 DCD         |??_C@_1DC@GLJHCNAA@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAA?$AAl?$AAp?$AAh?$AAa?$AAT?$AAe?$AAx?$AAt?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@|
  00428		 |$LN35@EmulatedBl@4|
  00428	00000000	 DCD         |dpCurSettings|
  0042c		 |$M38848|

			 ENDP  ; |?EmulatedBltAlphaText16_Eml@@YAJPAUGPEBltParms@@@Z|, EmulatedBltAlphaText16_Eml

	EXPORT	|??_C@_1CI@KHPLHFDB@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAT?$AAe?$AAx?$AAt?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|EmulatedBltText16ASM|

  00000			 AREA	 |.pdata|, PDATA
|$T38867| DCD	|$LN7@EmulatedBl@5|
	DCD	0x40007c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@KHPLHFDB@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAT?$AAe?$AAx?$AAt?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "m", 0x0, "u", 0x0, "l", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "B", 0x0, "l", 0x0, "t", 0x0, "T", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, "1", 0x0, "6", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?EmulatedBltText16_Eml@@YAJPAUGPEBltParms@@@Z| PROC ; EmulatedBltText16_Eml

; 849  : {

  00000		 |$LN7@EmulatedBl@5|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd06c	 sub         sp, sp, #0x6C
  00010		 |$M38864|

; 850  :     DEBUGMSG(GPE_ZONE_BLT_HI,(TEXT("EmulatedBltText16\r\n")));

  00010	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130040	 tst         r3, #0x40
  0001c	0a000004	 beq         |$LN3@EmulatedBl@5|
  00020	e59f01c0	 ldr         r0, [pc, #0x1C0]
  00024	eb000000	 bl          NKDbgPrintfW
  00028	e3a03001	 mov         r3, #1
  0002c	e58d3058	 str         r3, [sp, #0x58]
  00030	ea000001	 b           |$LN4@EmulatedBl@5|
  00034		 |$LN3@EmulatedBl@5|
  00034	e3a03000	 mov         r3, #0
  00038	e58d3058	 str         r3, [sp, #0x58]
  0003c		 |$LN4@EmulatedBl@5|

; 851  : 
; 852  :     UINT32   iDstScanStride = pParms->pDst->Stride();

  0003c	e59d3074	 ldr         r3, [sp, #0x74]
  00040	e2833004	 add         r3, r3, #4
  00044	e5930000	 ldr         r0, [r3]
  00048	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  0004c	e58d005c	 str         r0, [sp, #0x5C]
  00050	e59d305c	 ldr         r3, [sp, #0x5C]
  00054	e58d3024	 str         r3, [sp, #0x24]

; 853  :     BYTE   * pDibBitsDst    = (BYTE *)pParms->pDst->Buffer();

  00058	e59d3074	 ldr         r3, [sp, #0x74]
  0005c	e2833004	 add         r3, r3, #4
  00060	e5930000	 ldr         r0, [r3]
  00064	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  00068	e58d0060	 str         r0, [sp, #0x60]
  0006c	e59d3060	 ldr         r3, [sp, #0x60]
  00070	e58d3010	 str         r3, [sp, #0x10]

; 854  :     UINT32   iSrcScanStride = pParms->pMask->Stride();

  00074	e59d3074	 ldr         r3, [sp, #0x74]
  00078	e283300c	 add         r3, r3, #0xC
  0007c	e5930000	 ldr         r0, [r3]
  00080	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  00084	e58d0064	 str         r0, [sp, #0x64]
  00088	e59d3064	 ldr         r3, [sp, #0x64]
  0008c	e58d3040	 str         r3, [sp, #0x40]

; 855  :     BYTE   * pDibBitsSrc    = (BYTE *)pParms->pMask->Buffer();

  00090	e59d3074	 ldr         r3, [sp, #0x74]
  00094	e283300c	 add         r3, r3, #0xC
  00098	e5930000	 ldr         r0, [r3]
  0009c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  000a0	e58d0068	 str         r0, [sp, #0x68]
  000a4	e59d3068	 ldr         r3, [sp, #0x68]
  000a8	e58d303c	 str         r3, [sp, #0x3C]

; 856  :     PRECTL   prcSrc         = pParms->prclMask;

  000ac	e59d3074	 ldr         r3, [sp, #0x74]
  000b0	e283302c	 add         r3, r3, #0x2C
  000b4	e5933000	 ldr         r3, [r3]
  000b8	e58d301c	 str         r3, [sp, #0x1C]

; 857  :     PRECTL   prcDst         = pParms->prclDst;

  000bc	e59d3074	 ldr         r3, [sp, #0x74]
  000c0	e2833014	 add         r3, r3, #0x14
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e58d3028	 str         r3, [sp, #0x28]

; 858  : 
; 859  :     unsigned int wOnColor = (unsigned int)pParms->solidColor;

  000cc	e59d3074	 ldr         r3, [sp, #0x74]
  000d0	e2833020	 add         r3, r3, #0x20
  000d4	e5933000	 ldr         r3, [r3]
  000d8	e58d302c	 str         r3, [sp, #0x2C]

; 860  : 
; 861  :     int    iSrcBitOffset;
; 862  :     int    iNumDstRows;
; 863  :     int    iNumDstCols;
; 864  :     BYTE * pbSrcScanLine;
; 865  :     BYTE * pbDstScanLine;
; 866  :     WORD * pwDstPixel;
; 867  : 
; 868  :     // Caller assures a well-ordered, non-empty rect
; 869  :     // compute size of destination rect
; 870  :     iNumDstCols = prcDst->right  - prcDst->left;

  000dc	e59d3028	 ldr         r3, [sp, #0x28]
  000e0	e2833008	 add         r3, r3, #8
  000e4	e5932000	 ldr         r2, [r3]
  000e8	e59d3028	 ldr         r3, [sp, #0x28]
  000ec	e5933000	 ldr         r3, [r3]
  000f0	e0423003	 sub         r3, r2, r3
  000f4	e58d3034	 str         r3, [sp, #0x34]

; 871  :     iNumDstRows = prcDst->bottom - prcDst->top;

  000f8	e59d3028	 ldr         r3, [sp, #0x28]
  000fc	e283200c	 add         r2, r3, #0xC
  00100	e59d3028	 ldr         r3, [sp, #0x28]
  00104	e2833004	 add         r3, r3, #4
  00108	e5922000	 ldr         r2, [r2]
  0010c	e5933000	 ldr         r3, [r3]
  00110	e0423003	 sub         r3, r2, r3
  00114	e58d3018	 str         r3, [sp, #0x18]

; 872  : 
; 873  :     // compute pointers to the starting rows in the src and dst bitmaps
; 874  :     pbSrcScanLine = pDibBitsSrc + prcSrc->top * iSrcScanStride + (prcSrc->left >> 3);

  00118	e59d301c	 ldr         r3, [sp, #0x1C]
  0011c	e2833004	 add         r3, r3, #4
  00120	e5931000	 ldr         r1, [r3]
  00124	e59d3040	 ldr         r3, [sp, #0x40]
  00128	e0020391	 mul         r2, r1, r3
  0012c	e59d303c	 ldr         r3, [sp, #0x3C]
  00130	e0832002	 add         r2, r3, r2
  00134	e59d301c	 ldr         r3, [sp, #0x1C]
  00138	e5933000	 ldr         r3, [r3]
  0013c	e1a031c3	 mov         r3, r3, asr #3
  00140	e0823003	 add         r3, r2, r3
  00144	e58d3020	 str         r3, [sp, #0x20]

; 875  :     iSrcBitOffset = prcSrc->left & 0x07;

  00148	e59d301c	 ldr         r3, [sp, #0x1C]
  0014c	e5933000	 ldr         r3, [r3]
  00150	e2033007	 and         r3, r3, #7
  00154	e58d3038	 str         r3, [sp, #0x38]

; 876  :     pbDstScanLine = pDibBitsDst + prcDst->top * iDstScanStride + prcDst->left * 2;

  00158	e59d3028	 ldr         r3, [sp, #0x28]
  0015c	e2833004	 add         r3, r3, #4
  00160	e5931000	 ldr         r1, [r3]
  00164	e59d3024	 ldr         r3, [sp, #0x24]
  00168	e0020391	 mul         r2, r1, r3
  0016c	e59d3010	 ldr         r3, [sp, #0x10]
  00170	e0831002	 add         r1, r3, r2
  00174	e59d3028	 ldr         r3, [sp, #0x28]
  00178	e5932000	 ldr         r2, [r3]
  0017c	e3a03002	 mov         r3, #2
  00180	e0030392	 mul         r3, r2, r3
  00184	e0813003	 add         r3, r1, r3
  00188	e58d3030	 str         r3, [sp, #0x30]

; 877  : 
; 878  :     pwDstPixel = (WORD *)pbDstScanLine;

  0018c	e59d3030	 ldr         r3, [sp, #0x30]
  00190	e58d3014	 str         r3, [sp, #0x14]

; 879  : 
; 880  :     EmulatedBltText16ASM(pbSrcScanLine,pwDstPixel, wOnColor, iNumDstCols, iNumDstRows, iSrcScanStride, iDstScanStride, iSrcBitOffset);

  00194	e59d3038	 ldr         r3, [sp, #0x38]
  00198	e58d300c	 str         r3, [sp, #0xC]
  0019c	e59d3024	 ldr         r3, [sp, #0x24]
  001a0	e58d3008	 str         r3, [sp, #8]
  001a4	e59d3040	 ldr         r3, [sp, #0x40]
  001a8	e58d3004	 str         r3, [sp, #4]
  001ac	e59d3018	 ldr         r3, [sp, #0x18]
  001b0	e58d3000	 str         r3, [sp]
  001b4	e59d3034	 ldr         r3, [sp, #0x34]
  001b8	e59d202c	 ldr         r2, [sp, #0x2C]
  001bc	e1a02802	 mov         r2, r2, lsl #16
  001c0	e1a02822	 mov         r2, r2, lsr #16
  001c4	e59d1014	 ldr         r1, [sp, #0x14]
  001c8	e59d0020	 ldr         r0, [sp, #0x20]
  001cc	eb000000	 bl          EmulatedBltText16ASM

; 881  : 
; 882  :     return S_OK;

  001d0	e3a03000	 mov         r3, #0
  001d4	e58d3054	 str         r3, [sp, #0x54]

; 883  : 
; 884  : }

  001d8	e59d0054	 ldr         r0, [sp, #0x54]
  001dc	e28dd06c	 add         sp, sp, #0x6C
  001e0	e89d6000	 ldmia       sp, {sp, lr}
  001e4	e12fff1e	 bx          lr
  001e8		 |$LN8@EmulatedBl@5|
  001e8		 |$LN9@EmulatedBl@5|
  001e8	00000000	 DCD         |??_C@_1CI@KHPLHFDB@?$AAE?$AAm?$AAu?$AAl?$AAa?$AAt?$AAe?$AAd?$AAB?$AAl?$AAt?$AAT?$AAe?$AAx?$AAt?$AA1?$AA6?$AA?$AN?$AA?6?$AA?$AA@|
  001ec		 |$LN10@EmulatedBl@5|
  001ec	00000000	 DCD         |dpCurSettings|
  001f0		 |$M38865|

			 ENDP  ; |?EmulatedBltText16_Eml@@YAJPAUGPEBltParms@@@Z|, EmulatedBltText16_Eml

	EXPORT	|??_C@_1CO@BMPNLNNP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000a0			 AREA	 |.pdata|, PDATA
|$T38880| DCD	|$LN24@BltPrepare|
	DCD	0x4000e404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@BMPNLNNP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "B", 0x0, "l", 0x0, "t"
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01bfc			 AREA	 |.text|, CODE, ARM

  01bfc		 |?BltPrepare@SA2Video@@UAAJPAUGPEBltParms@@@Z| PROC ; SA2Video::BltPrepare

; 1038 : {

  01bfc		 |$LN24@BltPrepare|
  01bfc	e1a0c00d	 mov         r12, sp
  01c00	e92d0003	 stmdb       sp!, {r0, r1}
  01c04	e92d5000	 stmdb       sp!, {r12, lr}
  01c08	e24dd020	 sub         sp, sp, #0x20
  01c0c		 |$M38877|

; 1039 :     DEBUGMSG(GPE_ZONE_LINE,(TEXT("SA2Video::BltPrepare\r\n")));

  01c0c	e59f3374	 ldr         r3, [pc, #0x374]
  01c10	e5933440	 ldr         r3, [r3, #0x440]
  01c14	e3130b01	 tst         r3, #1, 22
  01c18	0a000004	 beq         |$LN20@BltPrepare|
  01c1c	e59f0360	 ldr         r0, [pc, #0x360]
  01c20	eb000000	 bl          NKDbgPrintfW
  01c24	e3a03001	 mov         r3, #1
  01c28	e58d301c	 str         r3, [sp, #0x1C]
  01c2c	ea000001	 b           |$LN21@BltPrepare|
  01c30		 |$LN20@BltPrepare|
  01c30	e3a03000	 mov         r3, #0
  01c34	e58d301c	 str         r3, [sp, #0x1C]
  01c38		 |$LN21@BltPrepare|

; 1040 : 
; 1041 :     RECTL rectl;
; 1042 : 
; 1043 :     pParms->pBlt = &GPE::EmulatedBlt;

  01c38	e59f2340	 ldr         r2, [pc, #0x340]
  01c3c	e59d302c	 ldr         r3, [sp, #0x2C]
  01c40	e5832000	 str         r2, [r3]

; 1044 : 
; 1045 :     // Check to see if the software cursor should be disabled.
; 1046 :     if (!bDoRotation)

  01c44	e59f332c	 ldr         r3, [pc, #0x32C]
  01c48	e5933000	 ldr         r3, [r3]
  01c4c	e3530000	 cmp         r3, #0
  01c50	1a000095	 bne         |$LN17@BltPrepare|

; 1047 :     {
; 1048 :         if (pParms->pDst == m_pPrimarySurface)  // only care if dest is main display surface

  01c54	e59d302c	 ldr         r3, [sp, #0x2C]
  01c58	e2832004	 add         r2, r3, #4
  01c5c	e59d3028	 ldr         r3, [sp, #0x28]
  01c60	e2833004	 add         r3, r3, #4
  01c64	e5922000	 ldr         r2, [r2]
  01c68	e5933000	 ldr         r3, [r3]
  01c6c	e1520003	 cmp         r2, r3
  01c70	1a00004c	 bne         |$LN16@BltPrepare|

; 1049 :         {
; 1050 :             if (m_CursorVisible && !m_CursorDisabled)

  01c74	e59d3028	 ldr         r3, [sp, #0x28]
  01c78	e2833fbb	 add         r3, r3, #0xBB, 30
  01c7c	e5933000	 ldr         r3, [r3]
  01c80	e3530000	 cmp         r3, #0
  01c84	0a000047	 beq         |$LN15@BltPrepare|
  01c88	e59d3028	 ldr         r3, [sp, #0x28]
  01c8c	e2833fba	 add         r3, r3, #0xBA, 30
  01c90	e5933000	 ldr         r3, [r3]
  01c94	e3530000	 cmp         r3, #0
  01c98	1a000042	 bne         |$LN15@BltPrepare|

; 1051 :             {
; 1052 :                 if (pParms->prclDst != NULL)        // make sure there is a valid prclDst

  01c9c	e59d302c	 ldr         r3, [sp, #0x2C]
  01ca0	e2833014	 add         r3, r3, #0x14
  01ca4	e5933000	 ldr         r3, [r3]
  01ca8	e3530000	 cmp         r3, #0
  01cac	0a00001a	 beq         |$LN14@BltPrepare|

; 1053 :                 {
; 1054 :                     rectl = *pParms->prclDst;       // if so, use it

  01cb0	e59d302c	 ldr         r3, [sp, #0x2C]
  01cb4	e2833014	 add         r3, r3, #0x14
  01cb8	e5931000	 ldr         r1, [r3]
  01cbc	e28d0000	 add         r0, sp, #0
  01cc0	e3a02010	 mov         r2, #0x10
  01cc4	eb000000	 bl          memcpy

; 1055 : 
; 1056 :                     // There is no guarantee of a well ordered rect in pParms
; 1057 :                     // due to flipping and mirroring.
; 1058 :                     if(rectl.top > rectl.bottom)

  01cc8	e59d2004	 ldr         r2, [sp, #4]
  01ccc	e59d300c	 ldr         r3, [sp, #0xC]
  01cd0	e1520003	 cmp         r2, r3
  01cd4	da000005	 ble         |$LN13@BltPrepare|

; 1059 :                     {
; 1060 :                         int iSwapTmp     = rectl.top;

  01cd8	e59d3004	 ldr         r3, [sp, #4]
  01cdc	e58d3010	 str         r3, [sp, #0x10]

; 1061 :                         rectl.top    = rectl.bottom;

  01ce0	e59d300c	 ldr         r3, [sp, #0xC]
  01ce4	e58d3004	 str         r3, [sp, #4]

; 1062 :                         rectl.bottom = iSwapTmp;

  01ce8	e59d3010	 ldr         r3, [sp, #0x10]
  01cec	e58d300c	 str         r3, [sp, #0xC]
  01cf0		 |$LN13@BltPrepare|

; 1063 :                     }
; 1064 : 
; 1065 :                     if(rectl.left > rectl.right)

  01cf0	e59d2000	 ldr         r2, [sp]
  01cf4	e59d3008	 ldr         r3, [sp, #8]
  01cf8	e1520003	 cmp         r2, r3
  01cfc	da000005	 ble         |$LN12@BltPrepare|

; 1066 :                     {
; 1067 :                         int iSwapTmp    = rectl.left;

  01d00	e59d3000	 ldr         r3, [sp]
  01d04	e58d3014	 str         r3, [sp, #0x14]

; 1068 :                         rectl.left  = rectl.right;

  01d08	e59d3008	 ldr         r3, [sp, #8]
  01d0c	e58d3000	 str         r3, [sp]

; 1069 :                         rectl.right = iSwapTmp;

  01d10	e59d3014	 ldr         r3, [sp, #0x14]
  01d14	e58d3008	 str         r3, [sp, #8]
  01d18		 |$LN12@BltPrepare|

; 1070 :                     }
; 1071 :                 }
; 1072 :                 else

  01d18	ea000004	 b           |$LN11@BltPrepare|
  01d1c		 |$LN14@BltPrepare|

; 1073 :                 {
; 1074 :                     rectl = m_CursorRect;                   // if not, use the Cursor rect - this forces the cursor to be turned off in this case.

  01d1c	e59d3028	 ldr         r3, [sp, #0x28]
  01d20	e2831fbf	 add         r1, r3, #0xBF, 30
  01d24	e28d0000	 add         r0, sp, #0
  01d28	e3a02010	 mov         r2, #0x10
  01d2c	eb000000	 bl          memcpy
  01d30		 |$LN11@BltPrepare|

; 1075 :                 }
; 1076 : 
; 1077 :                 if (m_CursorRect.top <= rectl.bottom && m_CursorRect.bottom >= rectl.top &&
; 1078 :                     m_CursorRect.left <= rectl.right && m_CursorRect.right >= rectl.left)

  01d30	e59d3028	 ldr         r3, [sp, #0x28]
  01d34	e2833c03	 add         r3, r3, #3, 24
  01d38	e5932000	 ldr         r2, [r3]
  01d3c	e59d300c	 ldr         r3, [sp, #0xC]
  01d40	e1520003	 cmp         r2, r3
  01d44	ca000017	 bgt         |$LN10@BltPrepare|
  01d48	e59d3028	 ldr         r3, [sp, #0x28]
  01d4c	e2833fc2	 add         r3, r3, #0xC2, 30
  01d50	e5932000	 ldr         r2, [r3]
  01d54	e59d3004	 ldr         r3, [sp, #4]
  01d58	e1520003	 cmp         r2, r3
  01d5c	ba000011	 blt         |$LN10@BltPrepare|
  01d60	e59d3028	 ldr         r3, [sp, #0x28]
  01d64	e2833fbf	 add         r3, r3, #0xBF, 30
  01d68	e5932000	 ldr         r2, [r3]
  01d6c	e59d3008	 ldr         r3, [sp, #8]
  01d70	e1520003	 cmp         r2, r3
  01d74	ca00000b	 bgt         |$LN10@BltPrepare|
  01d78	e59d3028	 ldr         r3, [sp, #0x28]
  01d7c	e2833fc1	 add         r3, r3, #0xC1, 30
  01d80	e5932000	 ldr         r2, [r3]
  01d84	e59d3000	 ldr         r3, [sp]
  01d88	e1520003	 cmp         r2, r3
  01d8c	ba000005	 blt         |$LN10@BltPrepare|

; 1079 :                 {
; 1080 :                     CursorOff();

  01d90	e59d0028	 ldr         r0, [sp, #0x28]
  01d94	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|

; 1081 :                     m_CursorForcedOff = TRUE;

  01d98	e59d3028	 ldr         r3, [sp, #0x28]
  01d9c	e2832e2f	 add         r2, r3, #0x2F, 28
  01da0	e3a03001	 mov         r3, #1
  01da4	e5823000	 str         r3, [r2]
  01da8		 |$LN10@BltPrepare|
  01da8		 |$LN15@BltPrepare|
  01da8		 |$LN16@BltPrepare|

; 1082 :                 }
; 1083 :             }
; 1084 :         }
; 1085 : 
; 1086 :         // check for source overlap with cursor and turn off cursor if overlaps
; 1087 :         if (pParms->pSrc == m_pPrimarySurface)  // only care if source is main display surface

  01da8	e59d302c	 ldr         r3, [sp, #0x2C]
  01dac	e2832008	 add         r2, r3, #8
  01db0	e59d3028	 ldr         r3, [sp, #0x28]
  01db4	e2833004	 add         r3, r3, #4
  01db8	e5922000	 ldr         r2, [r2]
  01dbc	e5933000	 ldr         r3, [r3]
  01dc0	e1520003	 cmp         r2, r3
  01dc4	1a000038	 bne         |$LN9@BltPrepare|

; 1088 :         {
; 1089 :             if (m_CursorVisible && !m_CursorDisabled)

  01dc8	e59d3028	 ldr         r3, [sp, #0x28]
  01dcc	e2833fbb	 add         r3, r3, #0xBB, 30
  01dd0	e5933000	 ldr         r3, [r3]
  01dd4	e3530000	 cmp         r3, #0
  01dd8	0a000033	 beq         |$LN8@BltPrepare|
  01ddc	e59d3028	 ldr         r3, [sp, #0x28]
  01de0	e2833fba	 add         r3, r3, #0xBA, 30
  01de4	e5933000	 ldr         r3, [r3]
  01de8	e3530000	 cmp         r3, #0
  01dec	1a00002e	 bne         |$LN8@BltPrepare|

; 1090 :             {
; 1091 :                 if (pParms->prclSrc != NULL)        // make sure there is a valid prclSrc

  01df0	e59d302c	 ldr         r3, [sp, #0x2C]
  01df4	e2833018	 add         r3, r3, #0x18
  01df8	e5933000	 ldr         r3, [r3]
  01dfc	e3530000	 cmp         r3, #0
  01e00	0a000006	 beq         |$LN7@BltPrepare|

; 1092 :                 {
; 1093 :                     rectl = *pParms->prclSrc;       // if so, use it

  01e04	e59d302c	 ldr         r3, [sp, #0x2C]
  01e08	e2833018	 add         r3, r3, #0x18
  01e0c	e5931000	 ldr         r1, [r3]
  01e10	e28d0000	 add         r0, sp, #0
  01e14	e3a02010	 mov         r2, #0x10
  01e18	eb000000	 bl          memcpy

; 1094 :                 }
; 1095 :                 else

  01e1c	ea000004	 b           |$LN6@BltPrepare|
  01e20		 |$LN7@BltPrepare|

; 1096 :                 {
; 1097 :                     rectl = m_CursorRect;                   // if not, use the Cursor rect - this forces the cursor to be turned off in this case.

  01e20	e59d3028	 ldr         r3, [sp, #0x28]
  01e24	e2831fbf	 add         r1, r3, #0xBF, 30
  01e28	e28d0000	 add         r0, sp, #0
  01e2c	e3a02010	 mov         r2, #0x10
  01e30	eb000000	 bl          memcpy
  01e34		 |$LN6@BltPrepare|

; 1098 :                 }
; 1099 : 
; 1100 :                 if (m_CursorRect.top < rectl.bottom && m_CursorRect.bottom > rectl.top &&
; 1101 :                     m_CursorRect.left < rectl.right && m_CursorRect.right > rectl.left)

  01e34	e59d3028	 ldr         r3, [sp, #0x28]
  01e38	e2833c03	 add         r3, r3, #3, 24
  01e3c	e5932000	 ldr         r2, [r3]
  01e40	e59d300c	 ldr         r3, [sp, #0xC]
  01e44	e1520003	 cmp         r2, r3
  01e48	aa000017	 bge         |$LN5@BltPrepare|
  01e4c	e59d3028	 ldr         r3, [sp, #0x28]
  01e50	e2833fc2	 add         r3, r3, #0xC2, 30
  01e54	e5932000	 ldr         r2, [r3]
  01e58	e59d3004	 ldr         r3, [sp, #4]
  01e5c	e1520003	 cmp         r2, r3
  01e60	da000011	 ble         |$LN5@BltPrepare|
  01e64	e59d3028	 ldr         r3, [sp, #0x28]
  01e68	e2833fbf	 add         r3, r3, #0xBF, 30
  01e6c	e5932000	 ldr         r2, [r3]
  01e70	e59d3008	 ldr         r3, [sp, #8]
  01e74	e1520003	 cmp         r2, r3
  01e78	aa00000b	 bge         |$LN5@BltPrepare|
  01e7c	e59d3028	 ldr         r3, [sp, #0x28]
  01e80	e2833fc1	 add         r3, r3, #0xC1, 30
  01e84	e5932000	 ldr         r2, [r3]
  01e88	e59d3000	 ldr         r3, [sp]
  01e8c	e1520003	 cmp         r2, r3
  01e90	da000005	 ble         |$LN5@BltPrepare|

; 1102 :                 {
; 1103 :                     CursorOff();

  01e94	e59d0028	 ldr         r0, [sp, #0x28]
  01e98	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|

; 1104 :                     m_CursorForcedOff = TRUE;

  01e9c	e59d3028	 ldr         r3, [sp, #0x28]
  01ea0	e2832e2f	 add         r2, r3, #0x2F, 28
  01ea4	e3a03001	 mov         r3, #1
  01ea8	e5823000	 str         r3, [r2]
  01eac		 |$LN5@BltPrepare|
  01eac		 |$LN8@BltPrepare|
  01eac		 |$LN9@BltPrepare|
  01eac		 |$LN17@BltPrepare|

; 1105 :                 }
; 1106 :             }
; 1107 :         }
; 1108 :     }
; 1109 : 
; 1110 :     if ((pParms->pDst == m_pPrimarySurface && m_iRotate) || (pParms->pSrc == m_pPrimarySurface && m_iRotate))

  01eac	e59d302c	 ldr         r3, [sp, #0x2C]
  01eb0	e2832004	 add         r2, r3, #4
  01eb4	e59d3028	 ldr         r3, [sp, #0x28]
  01eb8	e2833004	 add         r3, r3, #4
  01ebc	e5922000	 ldr         r2, [r2]
  01ec0	e5933000	 ldr         r3, [r3]
  01ec4	e1520003	 cmp         r2, r3
  01ec8	1a000004	 bne         |$LN2@BltPrepare|
  01ecc	e59d3028	 ldr         r3, [sp, #0x28]
  01ed0	e2833018	 add         r3, r3, #0x18
  01ed4	e5933000	 ldr         r3, [r3]
  01ed8	e3530000	 cmp         r3, #0
  01edc	1a00000c	 bne         |$LN3@BltPrepare|
  01ee0		 |$LN2@BltPrepare|
  01ee0	e59d302c	 ldr         r3, [sp, #0x2C]
  01ee4	e2832008	 add         r2, r3, #8
  01ee8	e59d3028	 ldr         r3, [sp, #0x28]
  01eec	e2833004	 add         r3, r3, #4
  01ef0	e5922000	 ldr         r2, [r2]
  01ef4	e5933000	 ldr         r3, [r3]
  01ef8	e1520003	 cmp         r2, r3
  01efc	1a000007	 bne         |$LN4@BltPrepare|
  01f00	e59d3028	 ldr         r3, [sp, #0x28]
  01f04	e2833018	 add         r3, r3, #0x18
  01f08	e5933000	 ldr         r3, [r3]
  01f0c	e3530000	 cmp         r3, #0
  01f10	0a000002	 beq         |$LN4@BltPrepare|
  01f14		 |$LN3@BltPrepare|

; 1111 :     {
; 1112 :         pParms->pBlt = &GPE::EmulatedBltRotate;

  01f14	e59f2060	 ldr         r2, [pc, #0x60]
  01f18	e59d302c	 ldr         r3, [sp, #0x2C]
  01f1c	e5832000	 str         r2, [r3]
  01f20		 |$LN4@BltPrepare|

; 1113 :     }
; 1114 : 
; 1115 :     if (bDoRotation && pParms->pDst == m_pPrimarySurface)

  01f20	e59f3050	 ldr         r3, [pc, #0x50]
  01f24	e5933000	 ldr         r3, [r3]
  01f28	e3530000	 cmp         r3, #0
  01f2c	0a00000a	 beq         |$LN1@BltPrepare|
  01f30	e59d302c	 ldr         r3, [sp, #0x2C]
  01f34	e2832004	 add         r2, r3, #4
  01f38	e59d3028	 ldr         r3, [sp, #0x28]
  01f3c	e2833004	 add         r3, r3, #4
  01f40	e5922000	 ldr         r2, [r2]
  01f44	e5933000	 ldr         r3, [r3]
  01f48	e1520003	 cmp         r2, r3
  01f4c	1a000002	 bne         |$LN1@BltPrepare|

; 1116 :     {
; 1117 :         pParms->pBlt = (SCODE (GPE::*)(GPEBltParms *))&SA2Video::WrappedEmulatedBlt;

  01f50	e59f201c	 ldr         r2, [pc, #0x1C]
  01f54	e59d302c	 ldr         r3, [sp, #0x2C]
  01f58	e5832000	 str         r2, [r3]
  01f5c		 |$LN1@BltPrepare|

; 1118 :     }
; 1119 : 
; 1120 :     return S_OK;

  01f5c	e3a03000	 mov         r3, #0
  01f60	e58d3018	 str         r3, [sp, #0x18]

; 1121 : }

  01f64	e59d0018	 ldr         r0, [sp, #0x18]
  01f68	e28dd020	 add         sp, sp, #0x20
  01f6c	e89d6000	 ldmia       sp, {sp, lr}
  01f70	e12fff1e	 bx          lr
  01f74		 |$LN25@BltPrepare|
  01f74		 |$LN26@BltPrepare|
  01f74	00000000	 DCD         |?WrappedEmulatedBlt@SA2Video@@AAAJPAUGPEBltParms@@@Z|
  01f78		 |$LN27@BltPrepare|
  01f78	00000000	 DCD         |bDoRotation|
  01f7c		 |$LN28@BltPrepare|
  01f7c	00000000	 DCD         |?EmulatedBltRotate@GPE@@QAAJPAUGPEBltParms@@@Z|
  01f80		 |$LN29@BltPrepare|
  01f80	00000000	 DCD         |?EmulatedBlt@GPE@@QAAJPAUGPEBltParms@@@Z|
  01f84		 |$LN30@BltPrepare|
  01f84	00000000	 DCD         |??_C@_1CO@BMPNLNNP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAB?$AAl?$AAt?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  01f88		 |$LN31@BltPrepare|
  01f88	00000000	 DCD         |dpCurSettings|
  01f8c		 |$M38878|

			 ENDP  ; |?BltPrepare@SA2Video@@UAAJPAUGPEBltParms@@@Z|, SA2Video::BltPrepare


  000a8			 AREA	 |.pdata|, PDATA
|$T38893| DCD	|$LN7@BltComplet|
	DCD	0x40001a04
; Function compile flags: /Odtp

  01f8c			 AREA	 |.text|, CODE, ARM

  01f8c		 |?BltComplete@SA2Video@@UAAJPAUGPEBltParms@@@Z| PROC ; SA2Video::BltComplete

; 1129 : {

  01f8c		 |$LN7@BltComplet|
  01f8c	e1a0c00d	 mov         r12, sp
  01f90	e92d0003	 stmdb       sp!, {r0, r1}
  01f94	e92d5000	 stmdb       sp!, {r12, lr}
  01f98	e24dd004	 sub         sp, sp, #4
  01f9c		 |$M38890|

; 1130 :     if (!bDoRotation)

  01f9c	e59f304c	 ldr         r3, [pc, #0x4C]
  01fa0	e5933000	 ldr         r3, [r3]
  01fa4	e3530000	 cmp         r3, #0
  01fa8	1a00000a	 bne         |$LN2@BltComplet|

; 1131 :     {
; 1132 :         if (m_CursorForcedOff)

  01fac	e59d300c	 ldr         r3, [sp, #0xC]
  01fb0	e2833e2f	 add         r3, r3, #0x2F, 28
  01fb4	e5933000	 ldr         r3, [r3]
  01fb8	e3530000	 cmp         r3, #0
  01fbc	0a000005	 beq         |$LN1@BltComplet|

; 1133 :         {
; 1134 :             m_CursorForcedOff = FALSE;

  01fc0	e59d300c	 ldr         r3, [sp, #0xC]
  01fc4	e2832e2f	 add         r2, r3, #0x2F, 28
  01fc8	e3a03000	 mov         r3, #0
  01fcc	e5823000	 str         r3, [r2]

; 1135 :             CursorOn();

  01fd0	e59d000c	 ldr         r0, [sp, #0xC]
  01fd4	eb000000	 bl          |?CursorOn@SA2Video@@QAAXXZ|
  01fd8		 |$LN1@BltComplet|
  01fd8		 |$LN2@BltComplet|

; 1136 :         }
; 1137 :     }
; 1138 : 
; 1139 :     return S_OK;

  01fd8	e3a03000	 mov         r3, #0
  01fdc	e58d3000	 str         r3, [sp]

; 1140 : }

  01fe0	e59d0000	 ldr         r0, [sp]
  01fe4	e28dd004	 add         sp, sp, #4
  01fe8	e89d6000	 ldmia       sp, {sp, lr}
  01fec	e12fff1e	 bx          lr
  01ff0		 |$LN8@BltComplet|
  01ff0		 |$LN9@BltComplet|
  01ff0	00000000	 DCD         |bDoRotation|
  01ff4		 |$M38891|

			 ENDP  ; |?BltComplete@SA2Video@@UAAJPAUGPEBltParms@@@Z|, SA2Video::BltComplete

	EXPORT	|??_C@_1CK@DMCDDGNA@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAI?$AAn?$AAV?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.bss|, NOINIT
|?value@?1??InVBlank@SA2Video@@UAAHXZ@4HA| % 0x4	; `SA2Video::InVBlank'::`2'::value

  000b0			 AREA	 |.pdata|, PDATA
|$T38905| DCD	|$LN9@InVBlank|
	DCD	0x40002504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@DMCDDGNA@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAI?$AAn?$AAV?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n", 0x0, "V"
	DCB	0x0, "B", 0x0, "l", 0x0, "a", 0x0, "n", 0x0, "k", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01ff4			 AREA	 |.text|, CODE, ARM

  01ff4		 |?InVBlank@SA2Video@@UAAHXZ| PROC	; SA2Video::InVBlank

; 1144 : {

  01ff4		 |$LN9@InVBlank|
  01ff4	e1a0c00d	 mov         r12, sp
  01ff8	e92d0001	 stmdb       sp!, {r0}
  01ffc	e92d5000	 stmdb       sp!, {r12, lr}
  02000	e24dd00c	 sub         sp, sp, #0xC
  02004		 |$M38902|

; 1145 :     static    BOOL    value = FALSE;
; 1146 :     DEBUGMSG (GPE_ZONE_INIT, (TEXT("SA2Video::InVBlank\r\n")));

  02004	e59f3078	 ldr         r3, [pc, #0x78]
  02008	e5933440	 ldr         r3, [r3, #0x440]
  0200c	e3130020	 tst         r3, #0x20
  02010	0a000004	 beq         |$LN3@InVBlank|
  02014	e59f0064	 ldr         r0, [pc, #0x64]
  02018	eb000000	 bl          NKDbgPrintfW
  0201c	e3a03001	 mov         r3, #1
  02020	e58d3004	 str         r3, [sp, #4]
  02024	ea000001	 b           |$LN4@InVBlank|
  02028		 |$LN3@InVBlank|
  02028	e3a03000	 mov         r3, #0
  0202c	e58d3004	 str         r3, [sp, #4]
  02030		 |$LN4@InVBlank|

; 1147 :     value = !value;

  02030	e59f3044	 ldr         r3, [pc, #0x44]
  02034	e5933000	 ldr         r3, [r3]
  02038	e3530000	 cmp         r3, #0
  0203c	1a000002	 bne         |$LN5@InVBlank|
  02040	e3a03001	 mov         r3, #1
  02044	e58d3008	 str         r3, [sp, #8]
  02048	ea000001	 b           |$LN6@InVBlank|
  0204c		 |$LN5@InVBlank|
  0204c	e3a03000	 mov         r3, #0
  02050	e58d3008	 str         r3, [sp, #8]
  02054		 |$LN6@InVBlank|
  02054	e59d2008	 ldr         r2, [sp, #8]
  02058	e59f301c	 ldr         r3, [pc, #0x1C]
  0205c	e5832000	 str         r2, [r3]

; 1148 :     return value;

  02060	e59f3014	 ldr         r3, [pc, #0x14]
  02064	e5933000	 ldr         r3, [r3]
  02068	e58d3000	 str         r3, [sp]

; 1149 : }

  0206c	e59d0000	 ldr         r0, [sp]
  02070	e28dd00c	 add         sp, sp, #0xC
  02074	e89d6000	 ldmia       sp, {sp, lr}
  02078	e12fff1e	 bx          lr
  0207c		 |$LN10@InVBlank|
  0207c		 |$LN11@InVBlank|
  0207c	00000000	 DCD         |?value@?1??InVBlank@SA2Video@@UAAHXZ@4HA|
  02080		 |$LN12@InVBlank|
  02080	00000000	 DCD         |??_C@_1CK@DMCDDGNA@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAI?$AAn?$AAV?$AAB?$AAl?$AAa?$AAn?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  02084		 |$LN13@InVBlank|
  02084	00000000	 DCD         |dpCurSettings|
  02088		 |$M38903|

			 ENDP  ; |?InVBlank@SA2Video@@UAAHXZ|, SA2Video::InVBlank

	IMPORT	|DispDrvrSetPalette|

  000b8			 AREA	 |.pdata|, PDATA
|$T38916| DCD	|$LN8@SetPalette|
	DCD	0x40002004
; Function compile flags: /Odtp

  02088			 AREA	 |.text|, CODE, ARM

  02088		 |?SetPalette@SA2Video@@UAAJPBUtagPALETTEENTRY@@GG@Z| PROC ; SA2Video::SetPalette

; 1157 : {

  02088		 |$LN8@SetPalette|
  02088	e1a0c00d	 mov         r12, sp
  0208c	e92d000f	 stmdb       sp!, {r0 - r3}
  02090	e92d5000	 stmdb       sp!, {r12, lr}
  02094	e24dd004	 sub         sp, sp, #4
  02098		 |$M38913|

; 1158 :     if (bpp == 8)

  02098	e59f3064	 ldr         r3, [pc, #0x64]
  0209c	e5933000	 ldr         r3, [r3]
  020a0	e3530008	 cmp         r3, #8
  020a4	1a00000f	 bne         |$LN3@SetPalette|

; 1159 :     {
; 1160 :         if (firstEntry < 0 || firstEntry + numEntries > 256)

  020a8	e1dd31b4	 ldrh        r3, [sp, #0x14]
  020ac	e3530000	 cmp         r3, #0
  020b0	4a000005	 bmi         |$LN1@SetPalette|
  020b4	e1dd31b4	 ldrh        r3, [sp, #0x14]
  020b8	e1a02003	 mov         r2, r3
  020bc	e1dd31b8	 ldrh        r3, [sp, #0x18]
  020c0	e0823003	 add         r3, r2, r3
  020c4	e3530c01	 cmp         r3, #1, 24
  020c8	da000002	 ble         |$LN2@SetPalette|
  020cc		 |$LN1@SetPalette|

; 1161 :         {
; 1162 :             return E_INVALIDARG;

  020cc	e59f302c	 ldr         r3, [pc, #0x2C]
  020d0	e58d3000	 str         r3, [sp]
  020d4	ea000005	 b           |$LN4@SetPalette|
  020d8		 |$LN2@SetPalette|

; 1163 :         }
; 1164 : 
; 1165 :         DispDrvrSetPalette(source,firstEntry,numEntries);

  020d8	e1dd21b8	 ldrh        r2, [sp, #0x18]
  020dc	e1dd11b4	 ldrh        r1, [sp, #0x14]
  020e0	e59d0010	 ldr         r0, [sp, #0x10]
  020e4	eb000000	 bl          DispDrvrSetPalette
  020e8		 |$LN3@SetPalette|

; 1166 :     }
; 1167 : 
; 1168 :     return S_OK;

  020e8	e3a03000	 mov         r3, #0
  020ec	e58d3000	 str         r3, [sp]
  020f0		 |$LN4@SetPalette|

; 1169 : }

  020f0	e59d0000	 ldr         r0, [sp]
  020f4	e28dd004	 add         sp, sp, #4
  020f8	e89d6000	 ldmia       sp, {sp, lr}
  020fc	e12fff1e	 bx          lr
  02100		 |$LN9@SetPalette|
  02100		 |$LN10@SetPalette|
  02100	80070057	 DCD         0x80070057
  02104		 |$LN11@SetPalette|
  02104	00000000	 DCD         |bpp|
  02108		 |$M38914|

			 ENDP  ; |?SetPalette@SA2Video@@UAAJPBUtagPALETTEENTRY@@GG@Z|, SA2Video::SetPalette

	EXPORT	|DrvGetMasks|

  000c0			 AREA	 |.pdata|, PDATA
|$T38925| DCD	|$LN5@DrvGetMask|
	DCD	0x40000b04
; Function compile flags: /Odtp

  02108			 AREA	 |.text|, CODE, ARM

  02108		 |DrvGetMasks| PROC

; 1176 : {

  02108		 |$LN5@DrvGetMask|
  02108	e1a0c00d	 mov         r12, sp
  0210c	e92d0001	 stmdb       sp!, {r0}
  02110	e92d5000	 stmdb       sp!, {r12, lr}
  02114	e24dd004	 sub         sp, sp, #4
  02118		 |$M38922|

; 1177 :     return BitMasks;

  02118	e59f3010	 ldr         r3, [pc, #0x10]
  0211c	e58d3000	 str         r3, [sp]

; 1178 : }

  02120	e59d0000	 ldr         r0, [sp]
  02124	e28dd004	 add         sp, sp, #4
  02128	e89d6000	 ldmia       sp, {sp, lr}
  0212c	e12fff1e	 bx          lr
  02130		 |$LN6@DrvGetMask|
  02130		 |$LN7@DrvGetMask|
  02130	00000000	 DCD         |?BitMasks@@3PAKA|
  02134		 |$M38923|

			 ENDP  ; |DrvGetMasks|

	EXPORT	|?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z| ; SA2Video::PmToVideoPowerState

  000c8			 AREA	 |.pdata|, PDATA
|$T38940| DCD	|$LN19@PmToVideoP|
	DCD	0x40002704
; Function compile flags: /Odtp

  02134			 AREA	 |.text|, CODE, ARM

  02134		 |?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z| PROC ; SA2Video::PmToVideoPowerState

; 1184 : {

  02134		 |$LN19@PmToVideoP|
  02134	e1a0c00d	 mov         r12, sp
  02138	e92d0003	 stmdb       sp!, {r0, r1}
  0213c	e92d5000	 stmdb       sp!, {r12, lr}
  02140	e24dd00c	 sub         sp, sp, #0xC
  02144		 |$M38937|

; 1185 :     ULONG PowerState;
; 1186 : 
; 1187 :     switch( Dx )

  02144	e59d3018	 ldr         r3, [sp, #0x18]
  02148	e58d3008	 str         r3, [sp, #8]
  0214c	e59d3008	 ldr         r3, [sp, #8]
  02150	e3530004	 cmp         r3, #4
  02154	8a000015	 bhi         |$LN1@PmToVideoP|
  02158	e59d2008	 ldr         r2, [sp, #8]
  0215c	e1a03102	 mov         r3, r2, lsl #2
  02160	e083300f	 add         r3, r3, pc
  02164	e5933004	 ldr         r3, [r3, #4]
  02168	e08ff003	 add         pc, pc, r3
  0216c		 |$LN11@PmToVideoP|
  0216c		 |$LN10@PmToVideoP|
  0216c		 |$LN12@PmToVideoP|
  0216c	00000010	 DCD         0x10
  02170		 |$LN13@PmToVideoP|
  02170	00000010	 DCD         0x10
  02174		 |$LN14@PmToVideoP|
  02174	0000001c	 DCD         0x1c
  02178		 |$LN15@PmToVideoP|
  02178	00000028	 DCD         0x28
  0217c		 |$LN16@PmToVideoP|
  0217c	00000034	 DCD         0x34
  02180		 |$LN5@PmToVideoP|

; 1188 :     {
; 1189 :         case D0:
; 1190 :         case D1:
; 1191 :             PowerState = VideoPowerOn;

  02180	e3a03001	 mov         r3, #1
  02184	e58d3000	 str         r3, [sp]

; 1192 :             break;

  02188	ea00000a	 b           |$LN6@PmToVideoP|
  0218c		 |$LN4@PmToVideoP|

; 1193 : 
; 1194 :         case D2:
; 1195 :             PowerState = VideoPowerStandBy;

  0218c	e3a03002	 mov         r3, #2
  02190	e58d3000	 str         r3, [sp]

; 1196 :             break;

  02194	ea000007	 b           |$LN6@PmToVideoP|
  02198		 |$LN3@PmToVideoP|

; 1197 : 
; 1198 :         case D3:
; 1199 :             PowerState = VideoPowerSuspend;

  02198	e3a03003	 mov         r3, #3
  0219c	e58d3000	 str         r3, [sp]

; 1200 :             break;

  021a0	ea000004	 b           |$LN6@PmToVideoP|
  021a4		 |$LN2@PmToVideoP|

; 1201 : 
; 1202 :         case D4:
; 1203 :             PowerState = VideoPowerOff;

  021a4	e3a03004	 mov         r3, #4
  021a8	e58d3000	 str         r3, [sp]

; 1204 :             break;

  021ac	ea000001	 b           |$LN6@PmToVideoP|
  021b0		 |$LN1@PmToVideoP|

; 1205 : 
; 1206 :         default:
; 1207 :             PowerState = VideoPowerOn;

  021b0	e3a03001	 mov         r3, #1
  021b4	e58d3000	 str         r3, [sp]
  021b8		 |$LN6@PmToVideoP|

; 1208 :             break;
; 1209 :     }
; 1210 : 
; 1211 :     return(PowerState);

  021b8	e59d3000	 ldr         r3, [sp]
  021bc	e58d3004	 str         r3, [sp, #4]

; 1212 : }

  021c0	e59d0004	 ldr         r0, [sp, #4]
  021c4	e28dd00c	 add         sp, sp, #0xC
  021c8	e89d6000	 ldmia       sp, {sp, lr}
  021cc	e12fff1e	 bx          lr
  021d0		 |$M38938|

			 ENDP  ; |?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z|, SA2Video::PmToVideoPowerState

	EXPORT	|?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z| ; SA2Video::VideoToPmPowerState

  000d0			 AREA	 |.pdata|, PDATA
|$T38952| DCD	|$LN18@VideoToPmP|
	DCD	0x40002904
; Function compile flags: /Odtp

  021d0			 AREA	 |.text|, CODE, ARM

  021d0		 |?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z| PROC ; SA2Video::VideoToPmPowerState

; 1218 : {

  021d0		 |$LN18@VideoToPmP|
  021d0	e1a0c00d	 mov         r12, sp
  021d4	e92d0003	 stmdb       sp!, {r0, r1}
  021d8	e92d5000	 stmdb       sp!, {r12, lr}
  021dc	e24dd00c	 sub         sp, sp, #0xC
  021e0		 |$M38949|

; 1219 :     CEDEVICE_POWER_STATE Dx;
; 1220 : 
; 1221 :     switch( PowerState )

  021e0	e59d3018	 ldr         r3, [sp, #0x18]
  021e4	e58d3008	 str         r3, [sp, #8]
  021e8	e59d3008	 ldr         r3, [sp, #8]
  021ec	e2433001	 sub         r3, r3, #1
  021f0	e58d3008	 str         r3, [sp, #8]
  021f4	e59d3008	 ldr         r3, [sp, #8]
  021f8	e3530003	 cmp         r3, #3
  021fc	8a000014	 bhi         |$LN1@VideoToPmP|
  02200	e59d2008	 ldr         r2, [sp, #8]
  02204	e1a03102	 mov         r3, r2, lsl #2
  02208	e083300f	 add         r3, r3, pc
  0220c	e5933004	 ldr         r3, [r3, #4]
  02210	e08ff003	 add         pc, pc, r3
  02214		 |$LN11@VideoToPmP|
  02214		 |$LN10@VideoToPmP|
  02214		 |$LN12@VideoToPmP|
  02214	0000000c	 DCD         0xc
  02218		 |$LN13@VideoToPmP|
  02218	00000018	 DCD         0x18
  0221c		 |$LN14@VideoToPmP|
  0221c	00000024	 DCD         0x24
  02220		 |$LN15@VideoToPmP|
  02220	00000030	 DCD         0x30
  02224		 |$LN5@VideoToPmP|

; 1222 :     {
; 1223 :         case VideoPowerOn:
; 1224 :             Dx = D0;

  02224	e3a03000	 mov         r3, #0
  02228	e58d3000	 str         r3, [sp]

; 1225 :             break;

  0222c	ea00000a	 b           |$LN6@VideoToPmP|
  02230		 |$LN4@VideoToPmP|

; 1226 : 
; 1227 :         case VideoPowerStandBy:
; 1228 :             Dx = D2;

  02230	e3a03002	 mov         r3, #2
  02234	e58d3000	 str         r3, [sp]

; 1229 :             break;

  02238	ea000007	 b           |$LN6@VideoToPmP|
  0223c		 |$LN3@VideoToPmP|

; 1230 : 
; 1231 :         case VideoPowerSuspend:
; 1232 :             Dx = D3;

  0223c	e3a03003	 mov         r3, #3
  02240	e58d3000	 str         r3, [sp]

; 1233 :             break;

  02244	ea000004	 b           |$LN6@VideoToPmP|
  02248		 |$LN2@VideoToPmP|

; 1234 : 
; 1235 :         case VideoPowerOff:
; 1236 :             Dx = D4;

  02248	e3a03004	 mov         r3, #4
  0224c	e58d3000	 str         r3, [sp]

; 1237 :             break;

  02250	ea000001	 b           |$LN6@VideoToPmP|
  02254		 |$LN1@VideoToPmP|

; 1238 : 
; 1239 :         default:
; 1240 :             Dx = D0;

  02254	e3a03000	 mov         r3, #0
  02258	e58d3000	 str         r3, [sp]
  0225c		 |$LN6@VideoToPmP|

; 1241 :             break;
; 1242 :     }
; 1243 : 
; 1244 :     return Dx;

  0225c	e59d3000	 ldr         r3, [sp]
  02260	e58d3004	 str         r3, [sp, #4]

; 1245 : }

  02264	e59d0004	 ldr         r0, [sp, #4]
  02268	e28dd00c	 add         sp, sp, #0xC
  0226c	e89d6000	 ldmia       sp, {sp, lr}
  02270	e12fff1e	 bx          lr
  02274		 |$M38950|

			 ENDP  ; |?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z|, SA2Video::VideoToPmPowerState

	EXPORT	|??_C@_1GA@CHMPCIFK@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@FOJJIHBL@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@IFNPFFDJ@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|?SetPmPowerState@SA2Video@@AAAXW4_CEDEVICE_POWER_STATE@@@Z| ; SA2Video::SetPmPowerState

  000d8			 AREA	 |.pdata|, PDATA
|$T38970| DCD	|$LN24@SetPmPower|
	DCD	0x40005604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@CHMPCIFK@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "P", 0x0, "m", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "T", 0x0, "u", 0x0, "r", 0x0, "n"
	DCB	0x0, "O", 0x0, "f", 0x0, "f", 0x0, " ", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@FOJJIHBL@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "P", 0x0, "m", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "T", 0x0, "u", 0x0, "r", 0x0, "n"
	DCB	0x0, "O", 0x0, "n", 0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s"
	DCB	0x0, "p", 0x0, "l", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@IFNPFFDJ@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "P", 0x0, "m", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "(", 0x0, "D", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02274			 AREA	 |.text|, CODE, ARM

  02274		 |?SetPmPowerState@SA2Video@@AAAXW4_CEDEVICE_POWER_STATE@@@Z| PROC ; SA2Video::SetPmPowerState

; 1248 : {

  02274		 |$LN24@SetPmPower|
  02274	e1a0c00d	 mov         r12, sp
  02278	e92d0003	 stmdb       sp!, {r0, r1}
  0227c	e92d5000	 stmdb       sp!, {r12, lr}
  02280	e24dd010	 sub         sp, sp, #0x10
  02284		 |$M38967|

; 1249 :     DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SetPmPowerState: (D%d)\r\n"), PowerState));

  02284	e59f3134	 ldr         r3, [pc, #0x134]
  02288	e5933440	 ldr         r3, [r3, #0x440]
  0228c	e3130901	 tst         r3, #1, 18
  02290	0a000005	 beq         |$LN9@SetPmPower|
  02294	e59d101c	 ldr         r1, [sp, #0x1C]
  02298	e59f0128	 ldr         r0, [pc, #0x128]
  0229c	eb000000	 bl          NKDbgPrintfW
  022a0	e3a03001	 mov         r3, #1
  022a4	e58d3000	 str         r3, [sp]
  022a8	ea000001	 b           |$LN10@SetPmPower|
  022ac		 |$LN9@SetPmPower|
  022ac	e3a03000	 mov         r3, #0
  022b0	e58d3000	 str         r3, [sp]
  022b4		 |$LN10@SetPmPower|

; 1250 :     switch ( PowerState )

  022b4	e59d301c	 ldr         r3, [sp, #0x1C]
  022b8	e58d3004	 str         r3, [sp, #4]
  022bc	e59d3004	 ldr         r3, [sp, #4]
  022c0	e3530004	 cmp         r3, #4
  022c4	8a000034	 bhi         |$LN5@SetPmPower|
  022c8	e59d2004	 ldr         r2, [sp, #4]
  022cc	e1a03102	 mov         r3, r2, lsl #2
  022d0	e083300f	 add         r3, r3, pc
  022d4	e5933004	 ldr         r3, [r3, #4]
  022d8	e08ff003	 add         pc, pc, r3
  022dc		 |$LN16@SetPmPower|
  022dc		 |$LN15@SetPmPower|
  022dc		 |$LN17@SetPmPower|
  022dc	00000010	 DCD         0x10
  022e0		 |$LN18@SetPmPower|
  022e0	00000010	 DCD         0x10
  022e4		 |$LN19@SetPmPower|
  022e4	00000068	 DCD         0x68
  022e8		 |$LN20@SetPmPower|
  022e8	00000068	 DCD         0x68
  022ec		 |$LN21@SetPmPower|
  022ec	00000068	 DCD         0x68
  022f0		 |$LN4@SetPmPower|

; 1251 :     {
; 1252 :         case D0:
; 1253 :         case D1:
; 1254 :             if (bSuspended)

  022f0	e59f30c0	 ldr         r3, [pc, #0xC0]
  022f4	e5933000	 ldr         r3, [r3]
  022f8	e3530000	 cmp         r3, #0
  022fc	0a000010	 beq         |$LN3@SetPmPower|

; 1255 :             {
; 1256 :                 DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SetPmPowerState: TurnOn Display %d\r\n"), PowerState));

  02300	e59f30b8	 ldr         r3, [pc, #0xB8]
  02304	e5933440	 ldr         r3, [r3, #0x440]
  02308	e3130901	 tst         r3, #1, 18
  0230c	0a000005	 beq         |$LN11@SetPmPower|
  02310	e59d101c	 ldr         r1, [sp, #0x1C]
  02314	e59f00a8	 ldr         r0, [pc, #0xA8]
  02318	eb000000	 bl          NKDbgPrintfW
  0231c	e3a03001	 mov         r3, #1
  02320	e58d3008	 str         r3, [sp, #8]
  02324	ea000001	 b           |$LN12@SetPmPower|
  02328		 |$LN11@SetPmPower|
  02328	e3a03000	 mov         r3, #0
  0232c	e58d3008	 str         r3, [sp, #8]
  02330		 |$LN12@SetPmPower|

; 1257 :                 DispDrvrPowerHandler(FALSE);

  02330	e3a00000	 mov         r0, #0
  02334	eb000000	 bl          DispDrvrPowerHandler

; 1258 :                 bSuspended = FALSE;

  02338	e59f2078	 ldr         r2, [pc, #0x78]
  0233c	e3a03000	 mov         r3, #0
  02340	e5823000	 str         r3, [r2]
  02344		 |$LN3@SetPmPower|

; 1259 :             }
; 1260 :             break;

  02344	ea000014	 b           |$LN5@SetPmPower|
  02348		 |$LN2@SetPmPower|

; 1261 : 
; 1262 :         case D2:
; 1263 :         case D3:
; 1264 :         case D4:
; 1265 :             if (!bSuspended)

  02348	e59f3068	 ldr         r3, [pc, #0x68]
  0234c	e5933000	 ldr         r3, [r3]
  02350	e3530000	 cmp         r3, #0
  02354	1a000010	 bne         |$LN1@SetPmPower|

; 1266 :             {
; 1267 :                 DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SetPmPowerState: TurnOff Display %d\r\n"), PowerState));

  02358	e59f3060	 ldr         r3, [pc, #0x60]
  0235c	e5933440	 ldr         r3, [r3, #0x440]
  02360	e3130901	 tst         r3, #1, 18
  02364	0a000005	 beq         |$LN13@SetPmPower|
  02368	e59d101c	 ldr         r1, [sp, #0x1C]
  0236c	e59f0048	 ldr         r0, [pc, #0x48]
  02370	eb000000	 bl          NKDbgPrintfW
  02374	e3a03001	 mov         r3, #1
  02378	e58d300c	 str         r3, [sp, #0xC]
  0237c	ea000001	 b           |$LN14@SetPmPower|
  02380		 |$LN13@SetPmPower|
  02380	e3a03000	 mov         r3, #0
  02384	e58d300c	 str         r3, [sp, #0xC]
  02388		 |$LN14@SetPmPower|

; 1268 :                 DispDrvrPowerHandler(TRUE);

  02388	e3a00001	 mov         r0, #1
  0238c	eb000000	 bl          DispDrvrPowerHandler

; 1269 :                 bSuspended = TRUE;

  02390	e59f2020	 ldr         r2, [pc, #0x20]
  02394	e3a03001	 mov         r3, #1
  02398	e5823000	 str         r3, [r2]
  0239c		 |$LN1@SetPmPower|
  0239c		 |$LN5@SetPmPower|

; 1270 :             }
; 1271 :             break;
; 1272 :     }
; 1273 : 
; 1274 :     m_PmPowerState = PowerState;

  0239c	e59d3018	 ldr         r3, [sp, #0x18]
  023a0	e2832f92	 add         r2, r3, #0x92, 30
  023a4	e59d301c	 ldr         r3, [sp, #0x1C]
  023a8	e5823000	 str         r3, [r2]

; 1275 : }

  023ac	e28dd010	 add         sp, sp, #0x10
  023b0	e89d6000	 ldmia       sp, {sp, lr}
  023b4	e12fff1e	 bx          lr
  023b8		 |$LN25@SetPmPower|
  023b8		 |$LN26@SetPmPower|
  023b8	00000000	 DCD         |?bSuspended@@3HA|
  023bc		 |$LN27@SetPmPower|
  023bc	00000000	 DCD         |??_C@_1GA@CHMPCIFK@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO@|
  023c0		 |$LN28@SetPmPower|
  023c0	00000000	 DCD         |dpCurSettings|
  023c4		 |$LN29@SetPmPower|
  023c4	00000000	 DCD         |??_C@_1FO@FOJJIHBL@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAT?$AAu?$AAr?$AAn?$AAO@|
  023c8		 |$LN30@SetPmPower|
  023c8	00000000	 DCD         |??_C@_1EG@IFNPFFDJ@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAm?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ@|
  023cc		 |$M38968|

			 ENDP  ; |?SetPmPowerState@SA2Video@@AAAXW4_CEDEVICE_POWER_STATE@@@Z|, SA2Video::SetPmPowerState

	EXPORT	|?GetPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@XZ| ; SA2Video::GetPmPowerState

  000e0			 AREA	 |.pdata|, PDATA
|$T38982| DCD	|$LN5@GetPmPower|
	DCD	0x40000c04
; Function compile flags: /Odtp

  023cc			 AREA	 |.text|, CODE, ARM

  023cc		 |?GetPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@XZ| PROC ; SA2Video::GetPmPowerState

; 1279 : {

  023cc		 |$LN5@GetPmPower|
  023cc	e1a0c00d	 mov         r12, sp
  023d0	e92d0001	 stmdb       sp!, {r0}
  023d4	e92d5000	 stmdb       sp!, {r12, lr}
  023d8	e24dd004	 sub         sp, sp, #4
  023dc		 |$M38979|

; 1280 :     return(m_PmPowerState);

  023dc	e59d300c	 ldr         r3, [sp, #0xC]
  023e0	e2833f92	 add         r3, r3, #0x92, 30
  023e4	e5933000	 ldr         r3, [r3]
  023e8	e58d3000	 str         r3, [sp]

; 1281 : }

  023ec	e59d0000	 ldr         r0, [sp]
  023f0	e28dd004	 add         sp, sp, #4
  023f4	e89d6000	 ldmia       sp, {sp, lr}
  023f8	e12fff1e	 bx          lr
  023fc		 |$M38980|

			 ENDP  ; |?GetPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@XZ|, SA2Video::GetPmPowerState

	EXPORT	|?GetVideoPowerState@SA2Video@@AAAKXZ|	; SA2Video::GetVideoPowerState

  000e8			 AREA	 |.pdata|, PDATA
|$T38988| DCD	|$LN5@GetVideoPo|
	DCD	0x40001004
; Function compile flags: /Odtp

  023fc			 AREA	 |.text|, CODE, ARM

  023fc		 |?GetVideoPowerState@SA2Video@@AAAKXZ| PROC ; SA2Video::GetVideoPowerState

; 1285 : {

  023fc		 |$LN5@GetVideoPo|
  023fc	e1a0c00d	 mov         r12, sp
  02400	e92d0001	 stmdb       sp!, {r0}
  02404	e92d5000	 stmdb       sp!, {r12, lr}
  02408	e24dd008	 sub         sp, sp, #8
  0240c		 |$M38985|

; 1286 :     return( PmToVideoPowerState(m_PmPowerState) );

  0240c	e59d3010	 ldr         r3, [sp, #0x10]
  02410	e2833f92	 add         r3, r3, #0x92, 30
  02414	e5931000	 ldr         r1, [r3]
  02418	e59d0010	 ldr         r0, [sp, #0x10]
  0241c	eb000000	 bl          |?PmToVideoPowerState@SA2Video@@AAAKW4_CEDEVICE_POWER_STATE@@@Z|
  02420	e58d0004	 str         r0, [sp, #4]
  02424	e59d3004	 ldr         r3, [sp, #4]
  02428	e58d3000	 str         r3, [sp]

; 1287 : }

  0242c	e59d0000	 ldr         r0, [sp]
  02430	e28dd008	 add         sp, sp, #8
  02434	e89d6000	 ldmia       sp, {sp, lr}
  02438	e12fff1e	 bx          lr
  0243c		 |$M38986|

			 ENDP  ; |?GetVideoPowerState@SA2Video@@AAAKXZ|, SA2Video::GetVideoPowerState

	EXPORT	|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|?ConvertStringToGuid@SA2Video@@AAAHPBGPAU_GUID@@@Z| ; SA2Video::ConvertStringToGuid
	IMPORT	|swscanf|
	IMPORT	|__C_specific_handler|

  000f0			 AREA	 |.pdata|, PDATA
|$T39016| DCD	|$LN21@ConvertStr|
	DCD	0xc0005f05
|$T39018| DCD	|$LN11@ConvertStr|
	DCD	0x40000902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@| DCB "{"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "l", 0x0, "X", 0x0, "-"
	DCB	0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "X", 0x0, "-", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, "-", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, "}", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T39014| DCD	0x1
	DCD	|$LN15@ConvertStr|
	DCD	|$LN16@ConvertStr|
	DCD	|$LN11@ConvertStr|
	DCD	|$LN12@ConvertStr|
; Function compile flags: /Odtp

  0243c			 AREA	 |.text|, CODE, ARM

  0243c	00000000	 DCD         |__C_specific_handler|
  02440	00000000	 DCD         |$T39014|

  02444		 |?ConvertStringToGuid@SA2Video@@AAAHPBGPAU_GUID@@@Z| PROC ; SA2Video::ConvertStringToGuid

; 1293 : {

  02444		 |$LN21@ConvertStr|
  02444	e1a0c00d	 mov         r12, sp
  02448	e92d0007	 stmdb       sp!, {r0 - r2}
  0244c	e92d5800	 stmdb       sp!, {r11, r12, lr}
  02450	e28db00c	 add         r11, sp, #0xC
  02454	e24dd080	 sub         sp, sp, #0x80
  02458		 |$LN19@ConvertStr|

; 1294 :     UINT Data4[8];
; 1295 :     int  Count;
; 1296 :     BOOL fOk = FALSE;

  02458	e3a03000	 mov         r3, #0
  0245c	e50b3040	 str         r3, [r11, #-0x40]

; 1297 :     TCHAR *pszGuidFormat = _T("{%08lX-%04X-%04X-%02X%02X-%02X%02X%02X%02X%02X%02X}");

  02460	e59f3178	 ldr         r3, [pc, #0x178]
  02464	e50b3048	 str         r3, [r11, #-0x48]

; 1298 : 
; 1299 :     DEBUGCHK(pGuid != NULL && pszGuid != NULL);

  02468	e59b3008	 ldr         r3, [r11, #8]
  0246c	e3530000	 cmp         r3, #0
  02470	0a000005	 beq         |$LN8@ConvertStr|
  02474	e59b3004	 ldr         r3, [r11, #4]
  02478	e3530000	 cmp         r3, #0
  0247c	0a000002	 beq         |$LN8@ConvertStr|
  02480	e3a03001	 mov         r3, #1
  02484	e50b3014	 str         r3, [r11, #-0x14]
  02488	ea000008	 b           |$LN9@ConvertStr|
  0248c		 |$LN8@ConvertStr|
  0248c	e3a03c05	 mov         r3, #5, 24
  02490	e3833013	 orr         r3, r3, #0x13
  02494	e59f2140	 ldr         r2, [pc, #0x140]
  02498	e59f1138	 ldr         r1, [pc, #0x138]
  0249c	e59f0130	 ldr         r0, [pc, #0x130]
  024a0	eb000000	 bl          NKDbgPrintfW
  024a4	e6000010	 __debugbreak_ce
  024a8	e3a03000	 mov         r3, #0
  024ac	e50b3014	 str         r3, [r11, #-0x14]
  024b0		 |$LN9@ConvertStr|
  024b0		 |$LN15@ConvertStr|

; 1300 :     __try
; 1301 :     {
; 1302 :         if (_stscanf(pszGuid, pszGuidFormat, &pGuid->Data1,
; 1303 :             &pGuid->Data2, &pGuid->Data3, &Data4[0], &Data4[1], &Data4[2], &Data4[3],
; 1304 :             &Data4[4], &Data4[5], &Data4[6], &Data4[7]) == 11)

  024b0	e24b3068	 sub         r3, r11, #0x68
  024b4	e283301c	 add         r3, r3, #0x1C
  024b8	e58d3020	 str         r3, [sp, #0x20]
  024bc	e24b3068	 sub         r3, r11, #0x68
  024c0	e2833018	 add         r3, r3, #0x18
  024c4	e58d301c	 str         r3, [sp, #0x1C]
  024c8	e24b3068	 sub         r3, r11, #0x68
  024cc	e2833014	 add         r3, r3, #0x14
  024d0	e58d3018	 str         r3, [sp, #0x18]
  024d4	e24b3068	 sub         r3, r11, #0x68
  024d8	e2833010	 add         r3, r3, #0x10
  024dc	e58d3014	 str         r3, [sp, #0x14]
  024e0	e24b3068	 sub         r3, r11, #0x68
  024e4	e283300c	 add         r3, r3, #0xC
  024e8	e58d3010	 str         r3, [sp, #0x10]
  024ec	e24b3068	 sub         r3, r11, #0x68
  024f0	e2833008	 add         r3, r3, #8
  024f4	e58d300c	 str         r3, [sp, #0xC]
  024f8	e24b3068	 sub         r3, r11, #0x68
  024fc	e2833004	 add         r3, r3, #4
  02500	e58d3008	 str         r3, [sp, #8]
  02504	e24b3068	 sub         r3, r11, #0x68
  02508	e58d3004	 str         r3, [sp, #4]
  0250c	e59b3008	 ldr         r3, [r11, #8]
  02510	e2833006	 add         r3, r3, #6
  02514	e58d3000	 str         r3, [sp]
  02518	e59b3008	 ldr         r3, [r11, #8]
  0251c	e2833004	 add         r3, r3, #4
  02520	e59b2008	 ldr         r2, [r11, #8]
  02524	e51b1048	 ldr         r1, [r11, #-0x48]
  02528	e59b0004	 ldr         r0, [r11, #4]
  0252c	eb000000	 bl          swscanf
  02530	e50b0010	 str         r0, [r11, #-0x10]
  02534	e51b3010	 ldr         r3, [r11, #-0x10]
  02538	e353000b	 cmp         r3, #0xB
  0253c	1a000015	 bne         |$LN4@ConvertStr|

; 1305 :         {
; 1306 :             for(Count = 0; Count < (sizeof(Data4) / sizeof(Data4[0])); Count++)

  02540	e3a03000	 mov         r3, #0
  02544	e50b3044	 str         r3, [r11, #-0x44]
  02548	ea000002	 b           |$LN3@ConvertStr|
  0254c		 |$LN2@ConvertStr|
  0254c	e51b3044	 ldr         r3, [r11, #-0x44]
  02550	e2833001	 add         r3, r3, #1
  02554	e50b3044	 str         r3, [r11, #-0x44]
  02558		 |$LN3@ConvertStr|
  02558	e51b3044	 ldr         r3, [r11, #-0x44]
  0255c	e3530008	 cmp         r3, #8
  02560	2a00000c	 bcs         |$LN1@ConvertStr|

; 1307 :             {
; 1308 :                         pGuid->Data4[Count] = (UCHAR) Data4[Count];

  02564	e51b1044	 ldr         r1, [r11, #-0x44]
  02568	e3a03004	 mov         r3, #4
  0256c	e0020391	 mul         r2, r1, r3
  02570	e24b3068	 sub         r3, r11, #0x68
  02574	e0833002	 add         r3, r3, r2
  02578	e5933000	 ldr         r3, [r3]
  0257c	e20310ff	 and         r1, r3, #0xFF
  02580	e59b3008	 ldr         r3, [r11, #8]
  02584	e2832008	 add         r2, r3, #8
  02588	e51b3044	 ldr         r3, [r11, #-0x44]
  0258c	e0823003	 add         r3, r2, r3
  02590	e5c31000	 strb        r1, [r3]

; 1309 :             }

  02594	eaffffec	 b           |$LN2@ConvertStr|
  02598		 |$LN1@ConvertStr|
  02598		 |$LN4@ConvertStr|

; 1310 :         }
; 1311 :         fOk = TRUE;

  02598	e3a03001	 mov         r3, #1
  0259c	e50b3040	 str         r3, [r11, #-0x40]
  025a0		 |$LN16@ConvertStr|

; 1312 :     }

  025a0	ea000000	 b           |$LN17@ConvertStr|
  025a4		 |$LN12@ConvertStr|
  025a4	eaffffff	 b           |$LN17@ConvertStr|
  025a8		 |$LN17@ConvertStr|

; 1314 :     {
; 1315 :     }
; 1316 : 
; 1317 :     return fOk;

  025a8	e51b3040	 ldr         r3, [r11, #-0x40]
  025ac	e50b3018	 str         r3, [r11, #-0x18]
  025b0		 |$LN10@ConvertStr|

; 1318 : }

  025b0	e51b0018	 ldr         r0, [r11, #-0x18]
  025b4	e24bd00c	 sub         sp, r11, #0xC
  025b8	e89d6800	 ldmia       sp, {r11, sp, lr}
  025bc	e12fff1e	 bx          lr

			 ENDP  ; |?ConvertStringToGuid@SA2Video@@AAAHPBGPAU_GUID@@@Z|, SA2Video::ConvertStringToGuid

  025c0		 |$LN11@ConvertStr|
  025c0		 |$LN20@ConvertStr|

; 1313 :     __except(EXCEPTION_EXECUTE_HANDLER)

  025c0	e52de004	 str         lr, [sp, #-4]!
  025c4	e24dd024	 sub         sp, sp, #0x24
  025c8		 |$LN14@ConvertStr|
  025c8		 |$LN23@ConvertStr|
  025c8	e3a00001	 mov         r0, #1
  025cc		 |$LN13@ConvertStr|
  025cc	e28dd024	 add         sp, sp, #0x24
  025d0	e49df004	 ldr         pc, [sp], #4
  025d4		 |$LN25@ConvertStr|
  025d4		 |$LN26@ConvertStr|
  025d4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  025d8		 |$LN27@ConvertStr|
  025d8	00000000	 DCD         |dpCurSettings|
  025dc		 |$LN28@ConvertStr|
  025dc	00000000	 DCD         |??_C@_1KG@POHMEHNN@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  025e0		 |$LN29@ConvertStr|
  025e0	00000000	 DCD         |??_C@_1GI@LBPPMOKF@?$AA?$HL?$AA?$CF?$AA0?$AA8?$AAl?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA4?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0?$AA2?$AAX?$AA?9?$AA?$CF?$AA0?$AA2?$AAX?$AA?$CF?$AA0@|
  025e4		 |$LN24@ConvertStr|
  025e4		 |$LN22@ConvertStr|
	EXPORT	|??_C@_1GG@EEFOOCJM@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@PMOJNFHF@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1NK@KKMLOGOP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LK@BENOMAIB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LI@KIOMHEEP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@JFJLCBAN@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|DevicePowerNotify|
	IMPORT	|AdvertiseInterface|
	IMPORT	|StringCchCatW|
	IMPORT	|StringCchCopyW|
	IMPORT	|GetModuleFileNameW|
	IMPORT	|g_hmodDisplayDll|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00100			 AREA	 |.pdata|, PDATA
|$T39056| DCD	|$LN21@AdvertiseP|
	DCD	0xc000b904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@EEFOOCJM@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "d", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "d", 0x0, "w"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@PMOJNFHF@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "d", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "m", 0x0, "_"
	DCB	0x0, "D", 0x0, "i", 0x0, "s", 0x0, "p", 0x0, "l", 0x0, "a"
	DCB	0x0, "y", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "="
	DCB	0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1NK@KKMLOGOP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "d", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "i", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, " ", 0x0, "n", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, ".", 0x0, " ", 0x0, "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@| DCB "\\", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LK@BENOMAIB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "d", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "o", 0x0, "b", 0x0, "t", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "D", 0x0, "L", 0x0, "L"
	DCB	0x0, " ", 0x0, "n", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "."
	DCB	0x0, " ", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LI@KIOMHEEP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "d", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, "-", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, "-", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, "-"
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, "-", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, "-", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, "-", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, "-", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, "-", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, "-"
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@JFJLCBAN@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "d", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "i", 0x0, "s", 0x0, "e"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "a"
	DCB	0x0, "c", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "s", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@| DCB "{"
	DCB	0x0, "E", 0x0, "B", 0x0, "9", 0x0, "1", 0x0, "C", 0x0, "7"
	DCB	0x0, "C", 0x0, "9", 0x0, "-", 0x0, "8", 0x0, "B", 0x0, "F"
	DCB	0x0, "6", 0x0, "-", 0x0, "4", 0x0, "a", 0x0, "2", 0x0, "d"
	DCB	0x0, "-", 0x0, "9", 0x0, "A", 0x0, "B", 0x0, "8", 0x0, "-"
	DCB	0x0, "6", 0x0, "9", 0x0, "7", 0x0, "2", 0x0, "4", 0x0, "E"
	DCB	0x0, "E", 0x0, "D", 0x0, "9", 0x0, "7", 0x0, "D", 0x0, "1"
	DCB	0x0, "}", 0x0, 0x0, 0x0			; `string'

  00014			 AREA	 |.xdata|, DATA
|$T39052| DCD	0xffffff9c
; Function compile flags: /Odtp

  025e4			 AREA	 |.text|, CODE, ARM

  025e4	00000000	 DCD         |__GSHandlerCheck|
  025e8	00000000	 DCD         |$T39052|

  025ec		 |?AdvertisePowerInterface@SA2Video@@AAAHXZ| PROC ; SA2Video::AdvertisePowerInterface

; 1325 : {

  025ec		 |$LN21@AdvertiseP|
  025ec	e1a0c00d	 mov         r12, sp
  025f0	e92d0001	 stmdb       sp!, {r0}
  025f4	e92d5000	 stmdb       sp!, {r12, lr}
  025f8	e24ddfa6	 sub         sp, sp, #0xA6, 30
  025fc		 |$M39053|
  025fc	e59f32c8	 ldr         r3, [pc, #0x2C8]
  02600	e5933000	 ldr         r3, [r3]
  02604	e58d3240	 str         r3, [sp, #0x240]

; 1326 :     BOOL fOk = FALSE;

  02608	e3a03000	 mov         r3, #0
  0260c	e58d3030	 str         r3, [sp, #0x30]

; 1327 :     DWORD dwStatus;
; 1328 :     GUID gClass;
; 1329 :     TCHAR szModuleFileName[MAX_PATH];
; 1330 : 
; 1331 :     // PM assumes device is in power state D0 when it registers.
; 1332 :     m_PmPowerState    = D0;

  02610	e59d32a0	 ldr         r3, [sp, #0x2A0]
  02614	e2832f92	 add         r2, r3, #0x92, 30
  02618	e3a03000	 mov         r3, #0
  0261c	e5823000	 str         r3, [r2]

; 1333 : 
; 1334 :     // assume we are advertising the default class
; 1335 :     ConvertStringToGuid(PMCLASS_DISPLAY, &gClass);

  02620	e28d2020	 add         r2, sp, #0x20
  02624	e59f128c	 ldr         r1, [pc, #0x28C]
  02628	e59d02a0	 ldr         r0, [sp, #0x2A0]
  0262c	eb000000	 bl          |?ConvertStringToGuid@SA2Video@@AAAHPBGPAU_GUID@@@Z|

; 1336 :     DEBUGMSG(ZONE_PM,(TEXT("SA2Video::AdvertisePowerInterface: (%s)\r\n"), PMCLASS_DISPLAY));

  02630	e59f3270	 ldr         r3, [pc, #0x270]
  02634	e5933440	 ldr         r3, [r3, #0x440]
  02638	e3130901	 tst         r3, #1, 18
  0263c	0a000005	 beq         |$LN7@AdvertiseP|
  02640	e59f1270	 ldr         r1, [pc, #0x270]
  02644	e59f027c	 ldr         r0, [pc, #0x27C]
  02648	eb000000	 bl          NKDbgPrintfW
  0264c	e3a03001	 mov         r3, #1
  02650	e58d3268	 str         r3, [sp, #0x268]
  02654	ea000001	 b           |$LN8@AdvertiseP|
  02658		 |$LN7@AdvertiseP|
  02658	e3a03000	 mov         r3, #0
  0265c	e58d3268	 str         r3, [sp, #0x268]
  02660		 |$LN8@AdvertiseP|

; 1337 :     DEBUGMSG(ZONE_PM,(TEXT("SA2Video::AdvertisePowerInterface: 0x%x-0x%x-0x%x 0x%x-0x%x-0x%x-0x%x-0x%x-0x%x-0x%x-0x%x\r\n"),
; 1338 :                              gClass.Data1, gClass.Data2, gClass.Data3,
; 1339 :                              gClass.Data4[0], gClass.Data4[1], gClass.Data4[2], gClass.Data4[3],
; 1340 :                              gClass.Data4[4], gClass.Data4[5], gClass.Data4[6], gClass.Data4[7]));

  02660	e59f3240	 ldr         r3, [pc, #0x240]
  02664	e5933440	 ldr         r3, [r3, #0x440]
  02668	e3130901	 tst         r3, #1, 18
  0266c	0a000017	 beq         |$LN9@AdvertiseP|
  02670	e5dd302f	 ldrb        r3, [sp, #0x2F]
  02674	e58d301c	 str         r3, [sp, #0x1C]
  02678	e5dd302e	 ldrb        r3, [sp, #0x2E]
  0267c	e58d3018	 str         r3, [sp, #0x18]
  02680	e5dd302d	 ldrb        r3, [sp, #0x2D]
  02684	e58d3014	 str         r3, [sp, #0x14]
  02688	e5dd302c	 ldrb        r3, [sp, #0x2C]
  0268c	e58d3010	 str         r3, [sp, #0x10]
  02690	e5dd302b	 ldrb        r3, [sp, #0x2B]
  02694	e58d300c	 str         r3, [sp, #0xC]
  02698	e5dd302a	 ldrb        r3, [sp, #0x2A]
  0269c	e58d3008	 str         r3, [sp, #8]
  026a0	e5dd3029	 ldrb        r3, [sp, #0x29]
  026a4	e58d3004	 str         r3, [sp, #4]
  026a8	e5dd3028	 ldrb        r3, [sp, #0x28]
  026ac	e58d3000	 str         r3, [sp]
  026b0	e1dd32b6	 ldrh        r3, [sp, #0x26]
  026b4	e1dd22b4	 ldrh        r2, [sp, #0x24]
  026b8	e59d1020	 ldr         r1, [sp, #0x20]
  026bc	e59f0200	 ldr         r0, [pc, #0x200]
  026c0	eb000000	 bl          NKDbgPrintfW
  026c4	e3a03001	 mov         r3, #1
  026c8	e58d326c	 str         r3, [sp, #0x26C]
  026cc	ea000001	 b           |$LN10@AdvertiseP|
  026d0		 |$LN9@AdvertiseP|
  026d0	e3a03000	 mov         r3, #0
  026d4	e58d326c	 str         r3, [sp, #0x26C]
  026d8		 |$LN10@AdvertiseP|

; 1341 : 
; 1342 :     // Figure out what device name to advertise
; 1343 :     // Note - g_hmodDisplayDll is initialized in the DLL_PROCESS_ATTACH of DllMain()
; 1344 :     fOk = GetModuleFileName(g_hmodDisplayDll, szModuleFileName, sizeof(szModuleFileName) / sizeof(szModuleFileName[0]));

  026d8	e3a02f41	 mov         r2, #0x41, 30
  026dc	e28d1034	 add         r1, sp, #0x34
  026e0	e59f31d8	 ldr         r3, [pc, #0x1D8]
  026e4	e5930000	 ldr         r0, [r3]
  026e8	eb000000	 bl          GetModuleFileNameW
  026ec	e58d0270	 str         r0, [sp, #0x270]
  026f0	e59d3270	 ldr         r3, [sp, #0x270]
  026f4	e58d3030	 str         r3, [sp, #0x30]

; 1345 :     if (!fOk) 

  026f8	e59d3030	 ldr         r3, [sp, #0x30]
  026fc	e3530000	 cmp         r3, #0
  02700	1a00000b	 bne         |$LN4@AdvertiseP|

; 1346 :     {
; 1347 :         RETAILMSG(1,(TEXT("SA2Video::AdvertisePowerInterface: Failed to obtain DLL name. Driver is not power managed!\r\n")));

  02704	e59f01b0	 ldr         r0, [pc, #0x1B0]
  02708	eb000000	 bl          NKDbgPrintfW
  0270c	e3a03001	 mov         r3, #1
  02710	e58d3274	 str         r3, [sp, #0x274]
  02714	ea000001	 b           |$LN12@AdvertiseP|
  02718	e3a03000	 mov         r3, #0
  0271c	e58d3274	 str         r3, [sp, #0x274]
  02720		 |$LN12@AdvertiseP|

; 1348 :         return FALSE;

  02720	e59d0240	 ldr         r0, [sp, #0x240]
  02724	eb000000	 bl          __security_check_cookie
  02728	e3a03000	 mov         r3, #0
  0272c	e58d3264	 str         r3, [sp, #0x264]
  02730	ea000057	 b           |$LN5@AdvertiseP|
  02734		 |$LN4@AdvertiseP|

; 1349 :     }
; 1350 : 
; 1351 :     // Build the display device name for DevicePowerNotify().
; 1352 :     if( FAILED(StringCchCopy(m_DisplayDeviceName, sizeof(m_DisplayDeviceName)/sizeof(m_DisplayDeviceName[0]), PMCLASS_DISPLAY))||
; 1353 :         FAILED(StringCchCat(m_DisplayDeviceName, sizeof(m_DisplayDeviceName)/sizeof(m_DisplayDeviceName[0]), _T("\\"))) ||
; 1354 :         FAILED(StringCchCat(m_DisplayDeviceName, sizeof(m_DisplayDeviceName)/sizeof(m_DisplayDeviceName[0]), szModuleFileName))  )

  02734	e59f217c	 ldr         r2, [pc, #0x17C]
  02738	e3a01f41	 mov         r1, #0x41, 30
  0273c	e59d32a0	 ldr         r3, [sp, #0x2A0]
  02740	e2830040	 add         r0, r3, #0x40
  02744	eb000000	 bl          StringCchCopyW
  02748	e58d0278	 str         r0, [sp, #0x278]
  0274c	e59d3278	 ldr         r3, [sp, #0x278]
  02750	e3530000	 cmp         r3, #0
  02754	ba000011	 blt         |$LN2@AdvertiseP|
  02758	e59f2154	 ldr         r2, [pc, #0x154]
  0275c	e3a01f41	 mov         r1, #0x41, 30
  02760	e59d32a0	 ldr         r3, [sp, #0x2A0]
  02764	e2830040	 add         r0, r3, #0x40
  02768	eb000000	 bl          StringCchCatW
  0276c	e58d027c	 str         r0, [sp, #0x27C]
  02770	e59d327c	 ldr         r3, [sp, #0x27C]
  02774	e3530000	 cmp         r3, #0
  02778	ba000008	 blt         |$LN2@AdvertiseP|
  0277c	e28d2034	 add         r2, sp, #0x34
  02780	e3a01f41	 mov         r1, #0x41, 30
  02784	e59d32a0	 ldr         r3, [sp, #0x2A0]
  02788	e2830040	 add         r0, r3, #0x40
  0278c	eb000000	 bl          StringCchCatW
  02790	e58d0280	 str         r0, [sp, #0x280]
  02794	e59d3280	 ldr         r3, [sp, #0x280]
  02798	e3530000	 cmp         r3, #0
  0279c	aa00000b	 bge         |$LN3@AdvertiseP|
  027a0		 |$LN2@AdvertiseP|

; 1355 :     {
; 1356 :         RETAILMSG(1,(TEXT("SA2Video::AdvertisePowerInterface: Failed to construct unique name parameter. Driver is not power managed!\r\n")));

  027a0	e59f0108	 ldr         r0, [pc, #0x108]
  027a4	eb000000	 bl          NKDbgPrintfW
  027a8	e3a03001	 mov         r3, #1
  027ac	e58d3284	 str         r3, [sp, #0x284]
  027b0	ea000001	 b           |$LN14@AdvertiseP|
  027b4	e3a03000	 mov         r3, #0
  027b8	e58d3284	 str         r3, [sp, #0x284]
  027bc		 |$LN14@AdvertiseP|

; 1357 :         return FALSE;

  027bc	e59d0240	 ldr         r0, [sp, #0x240]
  027c0	eb000000	 bl          __security_check_cookie
  027c4	e3a03000	 mov         r3, #0
  027c8	e58d3264	 str         r3, [sp, #0x264]
  027cc	ea000030	 b           |$LN5@AdvertiseP|
  027d0		 |$LN3@AdvertiseP|

; 1358 :     }
; 1359 :     DEBUGMSG(ZONE_PM,(TEXT("SA2Video::AdvertisePowerInterface: m_DisplayDeviceName=%s\r\n"),m_DisplayDeviceName));

  027d0	e59f30d0	 ldr         r3, [pc, #0xD0]
  027d4	e5933440	 ldr         r3, [r3, #0x440]
  027d8	e3130901	 tst         r3, #1, 18
  027dc	0a000006	 beq         |$LN15@AdvertiseP|
  027e0	e59d32a0	 ldr         r3, [sp, #0x2A0]
  027e4	e2831040	 add         r1, r3, #0x40
  027e8	e59f00bc	 ldr         r0, [pc, #0xBC]
  027ec	eb000000	 bl          NKDbgPrintfW
  027f0	e3a03001	 mov         r3, #1
  027f4	e58d3288	 str         r3, [sp, #0x288]
  027f8	ea000001	 b           |$LN16@AdvertiseP|
  027fc		 |$LN15@AdvertiseP|
  027fc	e3a03000	 mov         r3, #0
  02800	e58d3288	 str         r3, [sp, #0x288]
  02804		 |$LN16@AdvertiseP|

; 1360 : 
; 1361 :     // now advertise the interface
; 1362 :     fOk = AdvertiseInterface(&gClass, szModuleFileName, TRUE);

  02804	e3a02001	 mov         r2, #1
  02808	e28d1034	 add         r1, sp, #0x34
  0280c	e28d0020	 add         r0, sp, #0x20
  02810	eb000000	 bl          AdvertiseInterface
  02814	e58d028c	 str         r0, [sp, #0x28C]
  02818	e59d328c	 ldr         r3, [sp, #0x28C]
  0281c	e58d3030	 str         r3, [sp, #0x30]

; 1363 : 
; 1364 :     if(fOk)

  02820	e59d3030	 ldr         r3, [sp, #0x30]
  02824	e3530000	 cmp         r3, #0
  02828	0a000015	 beq         |$LN1@AdvertiseP|

; 1365 :     {
; 1366 :         // Request initial power management state.
; 1367 :         dwStatus = DevicePowerNotify(m_DisplayDeviceName, m_PmPowerState, POWER_NAME);

  0282c	e3a02001	 mov         r2, #1
  02830	e59d32a0	 ldr         r3, [sp, #0x2A0]
  02834	e2833f92	 add         r3, r3, #0x92, 30
  02838	e5931000	 ldr         r1, [r3]
  0283c	e59d32a0	 ldr         r3, [sp, #0x2A0]
  02840	e2830040	 add         r0, r3, #0x40
  02844	eb000000	 bl          DevicePowerNotify
  02848	e58d0290	 str         r0, [sp, #0x290]
  0284c	e59d3290	 ldr         r3, [sp, #0x290]
  02850	e58d323c	 str         r3, [sp, #0x23C]

; 1368 :         DEBUGMSG(ZONE_PM,(TEXT("SA2Video::AdvertisePowerInterface: dwStatus=0x%x\r\n"), dwStatus));

  02854	e59f304c	 ldr         r3, [pc, #0x4C]
  02858	e5933440	 ldr         r3, [r3, #0x440]
  0285c	e3130901	 tst         r3, #1, 18
  02860	0a000005	 beq         |$LN17@AdvertiseP|
  02864	e59d123c	 ldr         r1, [sp, #0x23C]
  02868	e59f0034	 ldr         r0, [pc, #0x34]
  0286c	eb000000	 bl          NKDbgPrintfW
  02870	e3a03001	 mov         r3, #1
  02874	e58d3294	 str         r3, [sp, #0x294]
  02878	ea000001	 b           |$LN18@AdvertiseP|
  0287c		 |$LN17@AdvertiseP|
  0287c	e3a03000	 mov         r3, #0
  02880	e58d3294	 str         r3, [sp, #0x294]
  02884		 |$LN18@AdvertiseP|
  02884		 |$LN1@AdvertiseP|

; 1369 :     }
; 1370 : 
; 1371 :     return fOk;

  02884	e59d0240	 ldr         r0, [sp, #0x240]
  02888	eb000000	 bl          __security_check_cookie
  0288c	e59d3030	 ldr         r3, [sp, #0x30]
  02890	e58d3264	 str         r3, [sp, #0x264]
  02894		 |$LN5@AdvertiseP|

; 1372 : }

  02894	e59d0264	 ldr         r0, [sp, #0x264]
  02898	e28ddfa6	 add         sp, sp, #0xA6, 30
  0289c	e89d6000	 ldmia       sp, {sp, lr}
  028a0	e12fff1e	 bx          lr
  028a4		 |$LN22@AdvertiseP|
  028a4		 |$LN23@AdvertiseP|
  028a4	00000000	 DCD         |??_C@_1GG@EEFOOCJM@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@|
  028a8		 |$LN24@AdvertiseP|
  028a8	00000000	 DCD         |dpCurSettings|
  028ac		 |$LN25@AdvertiseP|
  028ac	00000000	 DCD         |??_C@_1HI@PMOJNFHF@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@|
  028b0		 |$LN26@AdvertiseP|
  028b0	00000000	 DCD         |??_C@_1NK@KKMLOGOP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@|
  028b4		 |$LN27@AdvertiseP|
  028b4	00000000	 DCD         |??_C@_13FPGAJAPJ@?$AA?2?$AA?$AA@|
  028b8		 |$LN28@AdvertiseP|
  028b8	00000000	 DCD         |??_C@_1EO@BHDHHEGO@?$AA?$HL?$AAE?$AAB?$AA9?$AA1?$AAC?$AA7?$AAC?$AA9?$AA?9?$AA8?$AAB?$AAF?$AA6?$AA?9?$AA4?$AAa?$AA2?$AAd?$AA?9?$AA9?$AAA?$AAB?$AA8?$AA?9?$AA6?$AA9?$AA7?$AA2?$AA4?$AAE?$AAE@|
  028bc		 |$LN29@AdvertiseP|
  028bc	00000000	 DCD         |??_C@_1LK@BENOMAIB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@|
  028c0		 |$LN30@AdvertiseP|
  028c0	00000000	 DCD         |g_hmodDisplayDll|
  028c4		 |$LN31@AdvertiseP|
  028c4	00000000	 DCD         |??_C@_1LI@KIOMHEEP@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@|
  028c8		 |$LN32@AdvertiseP|
  028c8	00000000	 DCD         |??_C@_1FE@JFJLCBAN@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAA?$AAd?$AAv?$AAe?$AAr?$AAt?$AAi?$AAs?$AAe?$AAP?$AAo?$AAw?$AAe?$AAr?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc@|
  028cc		 |$LN33@AdvertiseP|
  028cc	00000000	 DCD         |__security_cookie|
  028d0		 |$M39054|

			 ENDP  ; |?AdvertisePowerInterface@SA2Video@@AAAHXZ|, SA2Video::AdvertisePowerInterface

	EXPORT	|?DynRotate@SA2Video@@QAAJH@Z|		; SA2Video::DynRotate
	EXPORT	|??_C@_1DI@IEJJINPJ@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@JMNBBIFC@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@NJJBAMEA@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@JDBAEIHI@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@NNJBJOFN@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@FMPJLHEL@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@NEKOOJBO@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@LCOCAHFG@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@GKDOFAIK@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@PPBPMEFB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAG?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA?$AAN?$AAA?$AAG?$AAE?$AAM?$AAE?$AAN?$AAT?$AA?3?$AA?5?$AAV?$AAi@| [ DATA ] ; `string'
	IMPORT	|ScrollBuffer|
	IMPORT	|memcpy|
	IMPORT	|SetLastError|

  00108			 AREA	 |.pdata|, PDATA
|$T39097| DCD	|$LN83@DrvEscape|
	DCD	0x40030304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@IEJJINPJ@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E"
	DCB	0x0, "O", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@JMNBBIFC@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E"
	DCB	0x0, "O", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T"
	DCB	0x0, "-", 0x0, "(", 0x0, "D", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@NJJBAMEA@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E"
	DCB	0x0, "O", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T"
	DCB	0x0, "-", 0x0, "(", 0x0, "D", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, " ", 0x0, "s", 0x0, "u", 0x0, "c", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@JDBAEIHI@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E"
	DCB	0x0, "O", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "Q", 0x0, "U", 0x0, "E"
	DCB	0x0, "R", 0x0, "Y", 0x0, "-", 0x0, "(", 0x0, "D", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@NNJBJOFN@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E"
	DCB	0x0, "O", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "Q", 0x0, "U", 0x0, "E"
	DCB	0x0, "R", 0x0, "Y", 0x0, "-", 0x0, "(", 0x0, "D", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, " ", 0x0, "s", 0x0, "u", 0x0, "c"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@FMPJLHEL@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E"
	DCB	0x0, "O", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W"
	DCB	0x0, "E", 0x0, "R", 0x0, "_", 0x0, "Q", 0x0, "U", 0x0, "E"
	DCB	0x0, "R", 0x0, "Y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@NEKOOJBO@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "A", 0x0, "2"
	DCB	0x0, "V", 0x0, "I", 0x0, "D", 0x0, "E", 0x0, "O", 0x0, ":"
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_"
	DCB	0x0, "C", 0x0, "A", 0x0, "P", 0x0, "A", 0x0, "B", 0x0, "I"
	DCB	0x0, "L", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "E", 0x0, "S"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@LCOCAHFG@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M"
	DCB	0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "N", 0x0, "o", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@GKDOFAIK@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M"
	DCB	0x0, "a", 0x0, "n", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, "D", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "N", 0x0, "o", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "y", 0x0, "-", 0x0, "s", 0x0, "u"
	DCB	0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "V", 0x0, "P", 0x0, "w", 0x0, "r", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "(", 0x0, "D", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@PPBPMEFB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAG?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA?$AAN?$AAA?$AAG?$AAE?$AAM?$AAE?$AAN?$AAT?$AA?3?$AA?5?$AAV?$AAi@| DCB "S"
	DCB	0x0, "A", 0x0, "2", 0x0, "V", 0x0, "i", 0x0, "d", 0x0, "e"
	DCB	0x0, "o", 0x0, ":", 0x0, ":", 0x0, "G", 0x0, "E", 0x0, "T"
	DCB	0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R", 0x0, "M"
	DCB	0x0, "A", 0x0, "N", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "M"
	DCB	0x0, "E", 0x0, "N", 0x0, "T", 0x0, ":", 0x0, " ", 0x0, "V"
	DCB	0x0, "i", 0x0, "d", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  028d0			 AREA	 |.text|, CODE, ARM

  028d0		 |?DrvEscape@SA2Video@@UAAKPAU_SURFOBJ@@KKPAXK1@Z| PROC ; SA2Video::DrvEscape

; 1383 : {

  028d0		 |$LN83@DrvEscape|
  028d0	e1a0c00d	 mov         r12, sp
  028d4	e92d000f	 stmdb       sp!, {r0 - r3}
  028d8	e92d5000	 stmdb       sp!, {r12, lr}
  028dc	e24dd064	 sub         sp, sp, #0x64
  028e0		 |$M39094|

; 1384 :     int RetVal = 0; // default return value: "not supported"

  028e0	e3a03000	 mov         r3, #0
  028e4	e58d3000	 str         r3, [sp]

; 1385 :     DWORD EscapeFunction;
; 1386 :     GXDeviceInfo *pgxoi;
; 1387 :     CEDEVICE_POWER_STATE NewDx;
; 1388 :     VIDEO_POWER_MANAGEMENT *pvpm;
; 1389 :     BOOL  bErr = TRUE;

  028e8	e3a03001	 mov         r3, #1
  028ec	e58d3010	 str         r3, [sp, #0x10]

; 1390 : 
; 1391 :     switch (iEsc)

  028f0	e59d3074	 ldr         r3, [sp, #0x74]
  028f4	e58d3020	 str         r3, [sp, #0x20]
  028f8	e59d2020	 ldr         r2, [sp, #0x20]
  028fc	e59f3ba0	 ldr         r3, [pc, #0xBA0]
  02900	e1520003	 cmp         r2, r3
  02904	8a000025	 bhi         |$LN78@DrvEscape|
  02908	e59d2020	 ldr         r2, [sp, #0x20]
  0290c	e59f3b90	 ldr         r3, [pc, #0xB90]
  02910	e1520003	 cmp         r2, r3
  02914	0a000191	 beq         |$LN23@DrvEscape|
  02918	e59d2020	 ldr         r2, [sp, #0x20]
  0291c	e3a03b06	 mov         r3, #6, 22
  02920	e383309d	 orr         r3, r3, #0x9D
  02924	e1520003	 cmp         r2, r3
  02928	8a000012	 bhi         |$LN79@DrvEscape|
  0292c	e59d2020	 ldr         r2, [sp, #0x20]
  02930	e3a03b06	 mov         r3, #6, 22
  02934	e383309d	 orr         r3, r3, #0x9D
  02938	e1520003	 cmp         r2, r3
  0293c	0a00019d	 beq         |$LN19@DrvEscape|
  02940	e59d3020	 ldr         r3, [sp, #0x20]
  02944	e3530008	 cmp         r3, #8
  02948	0a000144	 beq         |$LN30@DrvEscape|
  0294c	e59d2020	 ldr         r2, [sp, #0x20]
  02950	e3a03b06	 mov         r3, #6, 22
  02954	e3833003	 orr         r3, r3, #3
  02958	e1520003	 cmp         r2, r3
  0295c	0a000055	 beq         |$LN50@DrvEscape|
  02960	e59d2020	 ldr         r2, [sp, #0x20]
  02964	e3a03b06	 mov         r3, #6, 22
  02968	e3833004	 orr         r3, r3, #4
  0296c	e1520003	 cmp         r2, r3
  02970	0a000024	 beq         |$LN53@DrvEscape|
  02974	ea0002ba	 b           |$LN1@DrvEscape|
  02978		 |$LN79@DrvEscape|
  02978	e59d2020	 ldr         r2, [sp, #0x20]
  0297c	e3a03b06	 mov         r3, #6, 22
  02980	e383309e	 orr         r3, r3, #0x9E
  02984	e1520003	 cmp         r2, r3
  02988	0a000177	 beq         |$LN22@DrvEscape|
  0298c	e59d2020	 ldr         r2, [sp, #0x20]
  02990	e59f3b10	 ldr         r3, [pc, #0xB10]
  02994	e1520003	 cmp         r2, r3
  02998	0a00016d	 beq         |$LN24@DrvEscape|
  0299c	ea0002b0	 b           |$LN1@DrvEscape|
  029a0		 |$LN78@DrvEscape|
  029a0	e59d2020	 ldr         r2, [sp, #0x20]
  029a4	e59f3aec	 ldr         r3, [pc, #0xAEC]
  029a8	e1520003	 cmp         r2, r3
  029ac	8a00000c	 bhi         |$LN80@DrvEscape|
  029b0	e59d2020	 ldr         r2, [sp, #0x20]
  029b4	e59f3adc	 ldr         r3, [pc, #0xADC]
  029b8	e1520003	 cmp         r2, r3
  029bc	0a00010d	 beq         |$LN32@DrvEscape|
  029c0	e59d3020	 ldr         r3, [sp, #0x20]
  029c4	e3530802	 cmp         r3, #2, 16
  029c8	0a000195	 beq         |$LN16@DrvEscape|
  029cc	e59d2020	 ldr         r2, [sp, #0x20]
  029d0	e3a03832	 mov         r3, #0x32, 16
  029d4	e3833a01	 orr         r3, r3, #1, 20
  029d8	e1520003	 cmp         r2, r3
  029dc	0a00007a	 beq         |$LN44@DrvEscape|
  029e0	ea00029f	 b           |$LN1@DrvEscape|
  029e4		 |$LN80@DrvEscape|
  029e4	e59d2020	 ldr         r2, [sp, #0x20]
  029e8	e59f3aac	 ldr         r3, [pc, #0xAAC]
  029ec	e1520003	 cmp         r2, r3
  029f0	0a0000ce	 beq         |$LN36@DrvEscape|
  029f4	e59d2020	 ldr         r2, [sp, #0x20]
  029f8	e59f3aa0	 ldr         r3, [pc, #0xAA0]
  029fc	e1520003	 cmp         r2, r3
  02a00	0a000090	 beq         |$LN41@DrvEscape|
  02a04	ea000296	 b           |$LN1@DrvEscape|
  02a08		 |$LN53@DrvEscape|

; 1392 :     {
; 1393 :         case GETPOWERMANAGEMENT :
; 1394 : 
; 1395 :             if (!pvOut || (cjOut < sizeof(VIDEO_POWER_MANAGEMENT)))

  02a08	e59d3084	 ldr         r3, [sp, #0x84]
  02a0c	e3530000	 cmp         r3, #0
  02a10	0a000002	 beq         |$LN51@DrvEscape|
  02a14	e59d3080	 ldr         r3, [sp, #0x80]
  02a18	e353000c	 cmp         r3, #0xC
  02a1c	2a000004	 bcs         |$LN52@DrvEscape|
  02a20		 |$LN51@DrvEscape|

; 1396 :             {
; 1397 :                 SetLastError(ERROR_INVALID_PARAMETER);

  02a20	e3a00057	 mov         r0, #0x57
  02a24	eb000000	 bl          SetLastError

; 1398 :                 return -1;

  02a28	e3e03000	 mvn         r3, #0
  02a2c	e58d301c	 str         r3, [sp, #0x1C]
  02a30	ea00028f	 b           |$LN56@DrvEscape|
  02a34		 |$LN52@DrvEscape|

; 1399 :             }
; 1400 : 
; 1401 :             pvpm = (VIDEO_POWER_MANAGEMENT*)pvOut;

  02a34	e59d3084	 ldr         r3, [sp, #0x84]
  02a38	e58d3004	 str         r3, [sp, #4]

; 1402 :             pvpm->Length = sizeof(VIDEO_POWER_MANAGEMENT);

  02a3c	e59d2004	 ldr         r2, [sp, #4]
  02a40	e3a0300c	 mov         r3, #0xC
  02a44	e5823000	 str         r3, [r2]

; 1403 :             pvpm->DPMSVersion = 0;

  02a48	e59d3004	 ldr         r3, [sp, #4]
  02a4c	e2832004	 add         r2, r3, #4
  02a50	e3a03000	 mov         r3, #0
  02a54	e5823000	 str         r3, [r2]

; 1404 :             pvpm->PowerState  = GetVideoPowerState();

  02a58	e59d006c	 ldr         r0, [sp, #0x6C]
  02a5c	eb000000	 bl          |?GetVideoPowerState@SA2Video@@AAAKXZ|
  02a60	e58d0024	 str         r0, [sp, #0x24]
  02a64	e59d3004	 ldr         r3, [sp, #4]
  02a68	e2832008	 add         r2, r3, #8
  02a6c	e59d3024	 ldr         r3, [sp, #0x24]
  02a70	e5823000	 str         r3, [r2]

; 1405 :             RetVal = 1;

  02a74	e3a03001	 mov         r3, #1
  02a78	e58d3000	 str         r3, [sp]

; 1406 : 
; 1407 :             DEBUGMSG(ZONE_PM, (TEXT("SA2Video::GETPOWERMANAGEMENT: VidPowerState=0x%x\r\n"),pvpm->PowerState));

  02a7c	e59f3a2c	 ldr         r3, [pc, #0xA2C]
  02a80	e5933440	 ldr         r3, [r3, #0x440]
  02a84	e3130901	 tst         r3, #1, 18
  02a88	0a000007	 beq         |$LN58@DrvEscape|
  02a8c	e59d3004	 ldr         r3, [sp, #4]
  02a90	e2833008	 add         r3, r3, #8
  02a94	e5931000	 ldr         r1, [r3]
  02a98	e59f0a38	 ldr         r0, [pc, #0xA38]
  02a9c	eb000000	 bl          NKDbgPrintfW
  02aa0	e3a03001	 mov         r3, #1
  02aa4	e58d3028	 str         r3, [sp, #0x28]
  02aa8	ea000001	 b           |$LN59@DrvEscape|
  02aac		 |$LN58@DrvEscape|
  02aac	e3a03000	 mov         r3, #0
  02ab0	e58d3028	 str         r3, [sp, #0x28]
  02ab4		 |$LN59@DrvEscape|

; 1408 : 
; 1409 :             break;

  02ab4	ea00026c	 b           |$LN54@DrvEscape|
  02ab8		 |$LN50@DrvEscape|

; 1410 : 
; 1411 :         case SETPOWERMANAGEMENT :
; 1412 :         {
; 1413 :             pvpm = (VIDEO_POWER_MANAGEMENT *)pvIn;

  02ab8	e59d307c	 ldr         r3, [sp, #0x7C]
  02abc	e58d3004	 str         r3, [sp, #4]

; 1414 : 
; 1415 :             if (!pvpm || (cjIn < sizeof(VIDEO_POWER_MANAGEMENT)))

  02ac0	e59d3004	 ldr         r3, [sp, #4]
  02ac4	e3530000	 cmp         r3, #0
  02ac8	0a000002	 beq         |$LN48@DrvEscape|
  02acc	e59d3078	 ldr         r3, [sp, #0x78]
  02ad0	e353000c	 cmp         r3, #0xC
  02ad4	2a000004	 bcs         |$LN49@DrvEscape|
  02ad8		 |$LN48@DrvEscape|

; 1416 :             {
; 1417 :                 SetLastError(ERROR_INVALID_PARAMETER);

  02ad8	e3a00057	 mov         r0, #0x57
  02adc	eb000000	 bl          SetLastError

; 1418 :                 return -1;

  02ae0	e3e03000	 mvn         r3, #0
  02ae4	e58d301c	 str         r3, [sp, #0x1C]
  02ae8	ea000261	 b           |$LN56@DrvEscape|
  02aec		 |$LN49@DrvEscape|

; 1419 :             }
; 1420 : 
; 1421 :             if (pvpm->Length < sizeof(VIDEO_POWER_MANAGEMENT))

  02aec	e59d3004	 ldr         r3, [sp, #4]
  02af0	e5933000	 ldr         r3, [r3]
  02af4	e353000c	 cmp         r3, #0xC
  02af8	2a000004	 bcs         |$LN47@DrvEscape|

; 1422 :             {
; 1423 :                 SetLastError(ERROR_INVALID_PARAMETER);

  02afc	e3a00057	 mov         r0, #0x57
  02b00	eb000000	 bl          SetLastError

; 1424 :                 return -1;

  02b04	e3e03000	 mvn         r3, #0
  02b08	e58d301c	 str         r3, [sp, #0x1C]
  02b0c	ea000258	 b           |$LN56@DrvEscape|
  02b10		 |$LN47@DrvEscape|

; 1425 :             }
; 1426 : 
; 1427 :             if (DevicePowerNotify(m_DisplayDeviceName, VideoToPmPowerState(pvpm->PowerState), POWER_NAME) )

  02b10	e59d3004	 ldr         r3, [sp, #4]
  02b14	e2833008	 add         r3, r3, #8
  02b18	e5931000	 ldr         r1, [r3]
  02b1c	e59d006c	 ldr         r0, [sp, #0x6C]
  02b20	eb000000	 bl          |?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z|
  02b24	e58d002c	 str         r0, [sp, #0x2C]
  02b28	e3a02001	 mov         r2, #1
  02b2c	e59d102c	 ldr         r1, [sp, #0x2C]
  02b30	e59d306c	 ldr         r3, [sp, #0x6C]
  02b34	e2830040	 add         r0, r3, #0x40
  02b38	eb000000	 bl          DevicePowerNotify
  02b3c	e58d0030	 str         r0, [sp, #0x30]
  02b40	e59d3030	 ldr         r3, [sp, #0x30]
  02b44	e3530000	 cmp         r3, #0
  02b48	0a000015	 beq         |$LN46@DrvEscape|

; 1428 :             {
; 1429 :                DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SetPowerManagement:DevicePowerNotify-success VPwrstate=%d (D%d)\r\n"),pvpm->PowerState, VideoToPmPowerState(pvpm->PowerState)));

  02b4c	e59f395c	 ldr         r3, [pc, #0x95C]
  02b50	e5933440	 ldr         r3, [r3, #0x440]
  02b54	e3130901	 tst         r3, #1, 18
  02b58	0a00000e	 beq         |$LN60@DrvEscape|
  02b5c	e59d3004	 ldr         r3, [sp, #4]
  02b60	e2833008	 add         r3, r3, #8
  02b64	e5931000	 ldr         r1, [r3]
  02b68	e59d006c	 ldr         r0, [sp, #0x6C]
  02b6c	eb000000	 bl          |?VideoToPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@K@Z|
  02b70	e58d0034	 str         r0, [sp, #0x34]
  02b74	e59d2034	 ldr         r2, [sp, #0x34]
  02b78	e59d3004	 ldr         r3, [sp, #4]
  02b7c	e2833008	 add         r3, r3, #8
  02b80	e5931000	 ldr         r1, [r3]
  02b84	e59f0948	 ldr         r0, [pc, #0x948]
  02b88	eb000000	 bl          NKDbgPrintfW
  02b8c	e3a03001	 mov         r3, #1
  02b90	e58d3038	 str         r3, [sp, #0x38]
  02b94	ea000001	 b           |$LN61@DrvEscape|
  02b98		 |$LN60@DrvEscape|
  02b98	e3a03000	 mov         r3, #0
  02b9c	e58d3038	 str         r3, [sp, #0x38]
  02ba0		 |$LN61@DrvEscape|

; 1430 :             }
; 1431 :             else

  02ba0	ea000006	 b           |$LN45@DrvEscape|
  02ba4		 |$LN46@DrvEscape|

; 1432 :             {
; 1433 :                RETAILMSG(1, (TEXT("SA2Video::SetPowerManagement:DevicePowerNotify failed\r\n")));

  02ba4	e59f0924	 ldr         r0, [pc, #0x924]
  02ba8	eb000000	 bl          NKDbgPrintfW
  02bac	e3a03001	 mov         r3, #1
  02bb0	e58d303c	 str         r3, [sp, #0x3C]
  02bb4	ea000001	 b           |$LN63@DrvEscape|
  02bb8	e3a03000	 mov         r3, #0
  02bbc	e58d303c	 str         r3, [sp, #0x3C]
  02bc0		 |$LN63@DrvEscape|
  02bc0		 |$LN45@DrvEscape|

; 1434 :             }
; 1435 : 
; 1436 :             RetVal = 1;

  02bc0	e3a03001	 mov         r3, #1
  02bc4	e58d3000	 str         r3, [sp]

; 1437 :             break;

  02bc8	ea000227	 b           |$LN54@DrvEscape|
  02bcc		 |$LN44@DrvEscape|

; 1438 :         }
; 1439 :         case IOCTL_POWER_CAPABILITIES:
; 1440 :             if ( pvOut != NULL && cjOut == sizeof(POWER_CAPABILITIES) )

  02bcc	e59d3084	 ldr         r3, [sp, #0x84]
  02bd0	e3530000	 cmp         r3, #0
  02bd4	0a000016	 beq         |$LN43@DrvEscape|
  02bd8	e59d3080	 ldr         r3, [sp, #0x80]
  02bdc	e3530030	 cmp         r3, #0x30
  02be0	1a000013	 bne         |$LN43@DrvEscape|

; 1441 :             {
; 1442 :                 DEBUGMSG(ZONE_PM, (TEXT("SA2Video::SA2VIDEO:IOCTL_POWER_CAPABILITIES\r\n")));

  02be4	e59f38c4	 ldr         r3, [pc, #0x8C4]
  02be8	e5933440	 ldr         r3, [r3, #0x440]
  02bec	e3130901	 tst         r3, #1, 18
  02bf0	0a000004	 beq         |$LN64@DrvEscape|
  02bf4	e59f08d0	 ldr         r0, [pc, #0x8D0]
  02bf8	eb000000	 bl          NKDbgPrintfW
  02bfc	e3a03001	 mov         r3, #1
  02c00	e58d3040	 str         r3, [sp, #0x40]
  02c04	ea000001	 b           |$LN65@DrvEscape|
  02c08		 |$LN64@DrvEscape|
  02c08	e3a03000	 mov         r3, #0
  02c0c	e58d3040	 str         r3, [sp, #0x40]
  02c10		 |$LN65@DrvEscape|

; 1443 :                 PPOWER_CAPABILITIES PowerCaps = (PPOWER_CAPABILITIES) pvOut;

  02c10	e59d3084	 ldr         r3, [sp, #0x84]
  02c14	e58d3018	 str         r3, [sp, #0x18]

; 1444 : 
; 1445 :                 memcpy(PowerCaps, &DisplayDrvPowerCaps, sizeof(DisplayDrvPowerCaps));

  02c18	e3a02030	 mov         r2, #0x30
  02c1c	e59f18a4	 ldr         r1, [pc, #0x8A4]
  02c20	e59d0018	 ldr         r0, [sp, #0x18]
  02c24	eb000000	 bl          memcpy

; 1446 :                 RetVal = 1;

  02c28	e3a03001	 mov         r3, #1
  02c2c	e58d3000	 str         r3, [sp]

; 1447 :             }
; 1448 :             else

  02c30	ea000003	 b           |$LN42@DrvEscape|
  02c34		 |$LN43@DrvEscape|

; 1449 :             {
; 1450 :                 SetLastError(MMSYSERR_INVALPARAM);

  02c34	e3a0000b	 mov         r0, #0xB
  02c38	eb000000	 bl          SetLastError

; 1451 :                 RetVal = -1;

  02c3c	e3e03000	 mvn         r3, #0
  02c40	e58d3000	 str         r3, [sp]
  02c44		 |$LN42@DrvEscape|

; 1452 :             }
; 1453 :             break;

  02c44	ea000208	 b           |$LN54@DrvEscape|
  02c48		 |$LN41@DrvEscape|

; 1454 : 
; 1455 :         case IOCTL_POWER_QUERY:
; 1456 :             DEBUGMSG(ZONE_PM, (TEXT("SA2VIDEO::IOCTL_POWER_QUERY\r\n")));

  02c48	e59f3860	 ldr         r3, [pc, #0x860]
  02c4c	e5933440	 ldr         r3, [r3, #0x440]
  02c50	e3130901	 tst         r3, #1, 18
  02c54	0a000004	 beq         |$LN66@DrvEscape|
  02c58	e59f0864	 ldr         r0, [pc, #0x864]
  02c5c	eb000000	 bl          NKDbgPrintfW
  02c60	e3a03001	 mov         r3, #1
  02c64	e58d3044	 str         r3, [sp, #0x44]
  02c68	ea000001	 b           |$LN67@DrvEscape|
  02c6c		 |$LN66@DrvEscape|
  02c6c	e3a03000	 mov         r3, #0
  02c70	e58d3044	 str         r3, [sp, #0x44]
  02c74		 |$LN67@DrvEscape|

; 1457 :             if ( pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE) )

  02c74	e59d3084	 ldr         r3, [sp, #0x84]
  02c78	e3530000	 cmp         r3, #0
  02c7c	0a00001b	 beq         |$LN40@DrvEscape|
  02c80	e59d3080	 ldr         r3, [sp, #0x80]
  02c84	e3530004	 cmp         r3, #4
  02c88	1a000018	 bne         |$LN40@DrvEscape|

; 1458 :             {
; 1459 :                 // Return a good status on any valid query since
; 1460 :                 // we are always ready to change power states.
; 1461 :                 NewDx = *(PCEDEVICE_POWER_STATE) pvOut;

  02c8c	e59d3084	 ldr         r3, [sp, #0x84]
  02c90	e5933000	 ldr         r3, [r3]
  02c94	e58d3008	 str         r3, [sp, #8]

; 1462 : 
; 1463 :                 if ( ! VALID_DX(NewDx) )

  02c98	e59d3008	 ldr         r3, [sp, #8]
  02c9c	e3730001	 cmn         r3, #1
  02ca0	da000002	 ble         |$LN38@DrvEscape|
  02ca4	e59d3008	 ldr         r3, [sp, #8]
  02ca8	e3530005	 cmp         r3, #5
  02cac	ba00000f	 blt         |$LN39@DrvEscape|
  02cb0		 |$LN38@DrvEscape|

; 1464 :                 {
; 1465 :                     DEBUGMSG(ZONE_PM, (TEXT("SA2VIDEO::IOCTL_POWER_QUERY-(D%d) success\r\n"),NewDx));

  02cb0	e59f37f8	 ldr         r3, [pc, #0x7F8]
  02cb4	e5933440	 ldr         r3, [r3, #0x440]
  02cb8	e3130901	 tst         r3, #1, 18
  02cbc	0a000005	 beq         |$LN68@DrvEscape|
  02cc0	e59d1008	 ldr         r1, [sp, #8]
  02cc4	e59f07f4	 ldr         r0, [pc, #0x7F4]
  02cc8	eb000000	 bl          NKDbgPrintfW
  02ccc	e3a03001	 mov         r3, #1
  02cd0	e58d3048	 str         r3, [sp, #0x48]
  02cd4	ea000001	 b           |$LN69@DrvEscape|
  02cd8		 |$LN68@DrvEscape|
  02cd8	e3a03000	 mov         r3, #0
  02cdc	e58d3048	 str         r3, [sp, #0x48]
  02ce0		 |$LN69@DrvEscape|

; 1466 :                     RetVal = 1;

  02ce0	e3a03001	 mov         r3, #1
  02ce4	e58d3000	 str         r3, [sp]

; 1467 :                     bErr = FALSE;

  02ce8	e3a03000	 mov         r3, #0
  02cec	e58d3010	 str         r3, [sp, #0x10]
  02cf0		 |$LN39@DrvEscape|
  02cf0		 |$LN40@DrvEscape|

; 1468 :                 }
; 1469 :             }
; 1470 : 
; 1471 :             if (bErr)

  02cf0	e59d3010	 ldr         r3, [sp, #0x10]
  02cf4	e3530000	 cmp         r3, #0
  02cf8	0a00000b	 beq         |$LN37@DrvEscape|

; 1472 :             {
; 1473 :                 RETAILMSG(1, (TEXT("SA2VIDEO::IOCTL_POWER_QUERY-(D%d) failed\r\n"),NewDx));

  02cfc	e59d1008	 ldr         r1, [sp, #8]
  02d00	e59f07b4	 ldr         r0, [pc, #0x7B4]
  02d04	eb000000	 bl          NKDbgPrintfW
  02d08	e3a03001	 mov         r3, #1
  02d0c	e58d304c	 str         r3, [sp, #0x4C]
  02d10	ea000001	 b           |$LN71@DrvEscape|
  02d14	e3a03000	 mov         r3, #0
  02d18	e58d304c	 str         r3, [sp, #0x4C]
  02d1c		 |$LN71@DrvEscape|

; 1474 :                 SetLastError(MMSYSERR_INVALPARAM);

  02d1c	e3a0000b	 mov         r0, #0xB
  02d20	eb000000	 bl          SetLastError

; 1475 :                 RetVal = -1;

  02d24	e3e03000	 mvn         r3, #0
  02d28	e58d3000	 str         r3, [sp]
  02d2c		 |$LN37@DrvEscape|

; 1476 :             }
; 1477 :             break;

  02d2c	ea0001ce	 b           |$LN54@DrvEscape|
  02d30		 |$LN36@DrvEscape|

; 1478 : 
; 1479 :         case IOCTL_POWER_SET:
; 1480 :             if ( pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE) )

  02d30	e59d3084	 ldr         r3, [sp, #0x84]
  02d34	e3530000	 cmp         r3, #0
  02d38	0a00001e	 beq         |$LN35@DrvEscape|
  02d3c	e59d3080	 ldr         r3, [sp, #0x80]
  02d40	e3530004	 cmp         r3, #4
  02d44	1a00001b	 bne         |$LN35@DrvEscape|

; 1481 :             {
; 1482 :                 NewDx = *(PCEDEVICE_POWER_STATE)pvOut;

  02d48	e59d3084	 ldr         r3, [sp, #0x84]
  02d4c	e5933000	 ldr         r3, [r3]
  02d50	e58d3008	 str         r3, [sp, #8]

; 1483 : 
; 1484 :                 if ( VALID_DX(NewDx) )

  02d54	e59d3008	 ldr         r3, [sp, #8]
  02d58	e3730001	 cmn         r3, #1
  02d5c	da000015	 ble         |$LN34@DrvEscape|
  02d60	e59d3008	 ldr         r3, [sp, #8]
  02d64	e3530005	 cmp         r3, #5
  02d68	aa000012	 bge         |$LN34@DrvEscape|

; 1485 :                 {
; 1486 :                     DEBUGMSG(ZONE_PM, (TEXT("SA2VIDEO::IOCTL_POWER_SET-(D%d) success\r\n"), NewDx));

  02d6c	e59f373c	 ldr         r3, [pc, #0x73C]
  02d70	e5933440	 ldr         r3, [r3, #0x440]
  02d74	e3130901	 tst         r3, #1, 18
  02d78	0a000005	 beq         |$LN72@DrvEscape|
  02d7c	e59d1008	 ldr         r1, [sp, #8]
  02d80	e59f0730	 ldr         r0, [pc, #0x730]
  02d84	eb000000	 bl          NKDbgPrintfW
  02d88	e3a03001	 mov         r3, #1
  02d8c	e58d3050	 str         r3, [sp, #0x50]
  02d90	ea000001	 b           |$LN73@DrvEscape|
  02d94		 |$LN72@DrvEscape|
  02d94	e3a03000	 mov         r3, #0
  02d98	e58d3050	 str         r3, [sp, #0x50]
  02d9c		 |$LN73@DrvEscape|

; 1487 :                     SetPmPowerState(NewDx);

  02d9c	e59d1008	 ldr         r1, [sp, #8]
  02da0	e59d006c	 ldr         r0, [sp, #0x6C]
  02da4	eb000000	 bl          |?SetPmPowerState@SA2Video@@AAAXW4_CEDEVICE_POWER_STATE@@@Z|

; 1488 :                     RetVal = 1;

  02da8	e3a03001	 mov         r3, #1
  02dac	e58d3000	 str         r3, [sp]

; 1489 :                     bErr = FALSE;

  02db0	e3a03000	 mov         r3, #0
  02db4	e58d3010	 str         r3, [sp, #0x10]
  02db8		 |$LN34@DrvEscape|
  02db8		 |$LN35@DrvEscape|

; 1490 :                 }
; 1491 :             }
; 1492 : 
; 1493 :             if (bErr)

  02db8	e59d3010	 ldr         r3, [sp, #0x10]
  02dbc	e3530000	 cmp         r3, #0
  02dc0	0a00000b	 beq         |$LN33@DrvEscape|

; 1494 :             {
; 1495 :                 RETAILMSG(1, (TEXT("SA2VIDEO::IOCTL_POWER_SET-(D%d) failed\r\n"), NewDx));

  02dc4	e59d1008	 ldr         r1, [sp, #8]
  02dc8	e59f06e4	 ldr         r0, [pc, #0x6E4]
  02dcc	eb000000	 bl          NKDbgPrintfW
  02dd0	e3a03001	 mov         r3, #1
  02dd4	e58d3054	 str         r3, [sp, #0x54]
  02dd8	ea000001	 b           |$LN75@DrvEscape|
  02ddc	e3a03000	 mov         r3, #0
  02de0	e58d3054	 str         r3, [sp, #0x54]
  02de4		 |$LN75@DrvEscape|

; 1496 :                 SetLastError(MMSYSERR_INVALPARAM);

  02de4	e3a0000b	 mov         r0, #0xB
  02de8	eb000000	 bl          SetLastError

; 1497 :                 RetVal = -1;

  02dec	e3e03000	 mvn         r3, #0
  02df0	e58d3000	 str         r3, [sp]
  02df4		 |$LN33@DrvEscape|

; 1498 :             }
; 1499 :             break;

  02df4	ea00019c	 b           |$LN54@DrvEscape|
  02df8		 |$LN32@DrvEscape|

; 1500 : 
; 1501 :         case IOCTL_POWER_GET:
; 1502 :             DEBUGMSG(ZONE_PM, (TEXT("SA2VIDEO::IOCTL_POWER_GET\r\n")));

  02df8	e59f36b0	 ldr         r3, [pc, #0x6B0]
  02dfc	e5933440	 ldr         r3, [r3, #0x440]
  02e00	e3130901	 tst         r3, #1, 18
  02e04	0a000004	 beq         |$LN76@DrvEscape|
  02e08	e59f069c	 ldr         r0, [pc, #0x69C]
  02e0c	eb000000	 bl          NKDbgPrintfW
  02e10	e3a03001	 mov         r3, #1
  02e14	e58d3058	 str         r3, [sp, #0x58]
  02e18	ea000001	 b           |$LN77@DrvEscape|
  02e1c		 |$LN76@DrvEscape|
  02e1c	e3a03000	 mov         r3, #0
  02e20	e58d3058	 str         r3, [sp, #0x58]
  02e24		 |$LN77@DrvEscape|

; 1503 :             if(pvOut != NULL && cjOut == sizeof(CEDEVICE_POWER_STATE))

  02e24	e59d3084	 ldr         r3, [sp, #0x84]
  02e28	e3530000	 cmp         r3, #0
  02e2c	0a00000a	 beq         |$LN31@DrvEscape|
  02e30	e59d3080	 ldr         r3, [sp, #0x80]
  02e34	e3530004	 cmp         r3, #4
  02e38	1a000007	 bne         |$LN31@DrvEscape|

; 1504 :             {
; 1505 :                 *(PCEDEVICE_POWER_STATE) pvOut = GetPmPowerState();

  02e3c	e59d006c	 ldr         r0, [sp, #0x6C]
  02e40	eb000000	 bl          |?GetPmPowerState@SA2Video@@AAA?AW4_CEDEVICE_POWER_STATE@@XZ|
  02e44	e58d005c	 str         r0, [sp, #0x5C]
  02e48	e59d205c	 ldr         r2, [sp, #0x5C]
  02e4c	e59d3084	 ldr         r3, [sp, #0x84]
  02e50	e5832000	 str         r2, [r3]

; 1506 :                 RetVal = 1;

  02e54	e3a03001	 mov         r3, #1
  02e58	e58d3000	 str         r3, [sp]
  02e5c		 |$LN31@DrvEscape|

; 1507 :             }
; 1508 :             break;

  02e5c	ea000182	 b           |$LN54@DrvEscape|
  02e60		 |$LN30@DrvEscape|

; 1509 : 
; 1510 :         case QUERYESCSUPPORT:
; 1511 :             EscapeFunction = *(DWORD *)pvIn;

  02e60	e59d307c	 ldr         r3, [sp, #0x7C]
  02e64	e5933000	 ldr         r3, [r3]
  02e68	e58d300c	 str         r3, [sp, #0xC]

; 1512 :             if ((EscapeFunction == VERTICALBLANKINTERRUPT)   ||
; 1513 :                 (EscapeFunction == SCROLL)                   ||
; 1514 :                 (EscapeFunction == SETPOWERMANAGEMENT)       ||
; 1515 :                 (EscapeFunction == GETPOWERMANAGEMENT)       ||
; 1516 :                 (EscapeFunction == IOCTL_POWER_CAPABILITIES) ||
; 1517 :                 (EscapeFunction == IOCTL_POWER_QUERY) ||
; 1518 :                 (EscapeFunction == IOCTL_POWER_SET) ||
; 1519 :                 (EscapeFunction == IOCTL_POWER_GET) ||
; 1520 :                 (EscapeFunction == GETGXINFO))

  02e6c	e59d200c	 ldr         r2, [sp, #0xC]
  02e70	e59f3630	 ldr         r3, [pc, #0x630]
  02e74	e1520003	 cmp         r2, r3
  02e78	0a000021	 beq         |$LN28@DrvEscape|
  02e7c	e59d200c	 ldr         r2, [sp, #0xC]
  02e80	e59f361c	 ldr         r3, [pc, #0x61C]
  02e84	e1520003	 cmp         r2, r3
  02e88	0a00001d	 beq         |$LN28@DrvEscape|
  02e8c	e59d200c	 ldr         r2, [sp, #0xC]
  02e90	e3a03b06	 mov         r3, #6, 22
  02e94	e3833003	 orr         r3, r3, #3
  02e98	e1520003	 cmp         r2, r3
  02e9c	0a000018	 beq         |$LN28@DrvEscape|
  02ea0	e59d200c	 ldr         r2, [sp, #0xC]
  02ea4	e3a03b06	 mov         r3, #6, 22
  02ea8	e3833004	 orr         r3, r3, #4
  02eac	e1520003	 cmp         r2, r3
  02eb0	0a000013	 beq         |$LN28@DrvEscape|
  02eb4	e59d200c	 ldr         r2, [sp, #0xC]
  02eb8	e3a03832	 mov         r3, #0x32, 16
  02ebc	e3833a01	 orr         r3, r3, #1, 20
  02ec0	e1520003	 cmp         r2, r3
  02ec4	0a00000e	 beq         |$LN28@DrvEscape|
  02ec8	e59d200c	 ldr         r2, [sp, #0xC]
  02ecc	e59f35cc	 ldr         r3, [pc, #0x5CC]
  02ed0	e1520003	 cmp         r2, r3
  02ed4	0a00000a	 beq         |$LN28@DrvEscape|
  02ed8	e59d200c	 ldr         r2, [sp, #0xC]
  02edc	e59f35b8	 ldr         r3, [pc, #0x5B8]
  02ee0	e1520003	 cmp         r2, r3
  02ee4	0a000006	 beq         |$LN28@DrvEscape|
  02ee8	e59d200c	 ldr         r2, [sp, #0xC]
  02eec	e59f35a4	 ldr         r3, [pc, #0x5A4]
  02ef0	e1520003	 cmp         r2, r3
  02ef4	0a000002	 beq         |$LN28@DrvEscape|
  02ef8	e59d300c	 ldr         r3, [sp, #0xC]
  02efc	e3530802	 cmp         r3, #2, 16
  02f00	1a000002	 bne         |$LN29@DrvEscape|
  02f04		 |$LN28@DrvEscape|

; 1521 :             {
; 1522 :                 RetVal = 1;

  02f04	e3a03001	 mov         r3, #1
  02f08	e58d3000	 str         r3, [sp]

; 1523 :             }
; 1524 :             else if ((!g_fDisableRotation) &&

  02f0c	ea00000f	 b           |$LN27@DrvEscape|
  02f10		 |$LN29@DrvEscape|

; 1525 :                 ((EscapeFunction == DRVESC_GETSCREENROTATION) ||
; 1526 :                 (EscapeFunction == DRVESC_SETSCREENROTATION)))

  02f10	e59f357c	 ldr         r3, [pc, #0x57C]
  02f14	e5933000	 ldr         r3, [r3]
  02f18	e3530000	 cmp         r3, #0
  02f1c	1a00000b	 bne         |$LN26@DrvEscape|
  02f20	e59d200c	 ldr         r2, [sp, #0xC]
  02f24	e3a03b06	 mov         r3, #6, 22
  02f28	e383309e	 orr         r3, r3, #0x9E
  02f2c	e1520003	 cmp         r2, r3
  02f30	0a000004	 beq         |$LN25@DrvEscape|
  02f34	e59d200c	 ldr         r2, [sp, #0xC]
  02f38	e3a03b06	 mov         r3, #6, 22
  02f3c	e383309d	 orr         r3, r3, #0x9D
  02f40	e1520003	 cmp         r2, r3
  02f44	1a000001	 bne         |$LN26@DrvEscape|
  02f48		 |$LN25@DrvEscape|

; 1527 :             {
; 1528 :                 RetVal = 1;

  02f48	e3a03001	 mov         r3, #1
  02f4c	e58d3000	 str         r3, [sp]
  02f50		 |$LN26@DrvEscape|
  02f50		 |$LN27@DrvEscape|

; 1529 :             }
; 1530 :             break;

  02f50	ea000145	 b           |$LN54@DrvEscape|
  02f54		 |$LN24@DrvEscape|

; 1531 : 
; 1532 :         case VERTICALBLANKINTERRUPT:
; 1533 :             RetVal = 1;

  02f54	e3a03001	 mov         r3, #1
  02f58	e58d3000	 str         r3, [sp]

; 1534 :             break;

  02f5c	ea000142	 b           |$LN54@DrvEscape|
  02f60		 |$LN23@DrvEscape|

; 1535 : 
; 1536 :         case SCROLL:
; 1537 :             ScrollBuffer(cjIn);

  02f60	e59d0078	 ldr         r0, [sp, #0x78]
  02f64	eb000000	 bl          ScrollBuffer

; 1538 :             break;

  02f68	ea00013f	 b           |$LN54@DrvEscape|
  02f6c		 |$LN22@DrvEscape|

; 1539 : 
; 1540 :         case DRVESC_GETSCREENROTATION:
; 1541 :             if (!g_fDisableRotation)

  02f6c	e59f3520	 ldr         r3, [pc, #0x520]
  02f70	e5933000	 ldr         r3, [r3]
  02f74	e3530000	 cmp         r3, #0
  02f78	1a00000a	 bne         |$LN21@DrvEscape|

; 1542 :             {
; 1543 :                 *(int *)pvOut = ((DMDO_0 | DMDO_90 | DMDO_180 | DMDO_270) << 8) | ((BYTE)m_iRotate);

  02f7c	e59d306c	 ldr         r3, [sp, #0x6C]
  02f80	e2833018	 add         r3, r3, #0x18
  02f84	e5933000	 ldr         r3, [r3]
  02f88	e20330ff	 and         r3, r3, #0xFF
  02f8c	e3832c07	 orr         r2, r3, #7, 24
  02f90	e59d3084	 ldr         r3, [sp, #0x84]
  02f94	e5832000	 str         r2, [r3]

; 1544 :                 return DISP_CHANGE_SUCCESSFUL;

  02f98	e3a03000	 mov         r3, #0
  02f9c	e58d301c	 str         r3, [sp, #0x1C]
  02fa0	ea000133	 b           |$LN56@DrvEscape|

; 1545 :             }
; 1546 :             else

  02fa4	ea000002	 b           |$LN20@DrvEscape|
  02fa8		 |$LN21@DrvEscape|

; 1547 :             {
; 1548 :                 return DISP_CHANGE_FAILED;

  02fa8	e3e03000	 mvn         r3, #0
  02fac	e58d301c	 str         r3, [sp, #0x1C]
  02fb0	ea00012f	 b           |$LN56@DrvEscape|
  02fb4		 |$LN20@DrvEscape|

; 1549 :             }
; 1550 :             break;

  02fb4	ea00012c	 b           |$LN54@DrvEscape|
  02fb8		 |$LN19@DrvEscape|

; 1551 : 
; 1552 :         case DRVESC_SETSCREENROTATION:
; 1553 :             if ((!g_fDisableRotation) &&
; 1554 :                 ((cjIn == DMDO_0)    ||
; 1555 :                 (cjIn == DMDO_90)    ||
; 1556 :                 (cjIn == DMDO_180)    ||
; 1557 :                 (cjIn == DMDO_270)))

  02fb8	e59f34d4	 ldr         r3, [pc, #0x4D4]
  02fbc	e5933000	 ldr         r3, [r3]
  02fc0	e3530000	 cmp         r3, #0
  02fc4	1a000012	 bne         |$LN18@DrvEscape|
  02fc8	e59d3078	 ldr         r3, [sp, #0x78]
  02fcc	e3530000	 cmp         r3, #0
  02fd0	0a000008	 beq         |$LN17@DrvEscape|
  02fd4	e59d3078	 ldr         r3, [sp, #0x78]
  02fd8	e3530001	 cmp         r3, #1
  02fdc	0a000005	 beq         |$LN17@DrvEscape|
  02fe0	e59d3078	 ldr         r3, [sp, #0x78]
  02fe4	e3530002	 cmp         r3, #2
  02fe8	0a000002	 beq         |$LN17@DrvEscape|
  02fec	e59d3078	 ldr         r3, [sp, #0x78]
  02ff0	e3530004	 cmp         r3, #4
  02ff4	1a000006	 bne         |$LN18@DrvEscape|
  02ff8		 |$LN17@DrvEscape|

; 1558 :                 {
; 1559 :                     return DynRotate(cjIn);

  02ff8	e59d1078	 ldr         r1, [sp, #0x78]
  02ffc	e59d006c	 ldr         r0, [sp, #0x6C]
  03000	eb000000	 bl          |?DynRotate@SA2Video@@QAAJH@Z|
  03004	e58d0060	 str         r0, [sp, #0x60]
  03008	e59d3060	 ldr         r3, [sp, #0x60]
  0300c	e58d301c	 str         r3, [sp, #0x1C]
  03010	ea000117	 b           |$LN56@DrvEscape|
  03014		 |$LN18@DrvEscape|

; 1560 :                 }
; 1561 : 
; 1562 :             return DISP_CHANGE_BADMODE;

  03014	e3e03001	 mvn         r3, #1
  03018	e58d301c	 str         r3, [sp, #0x1C]
  0301c	ea000114	 b           |$LN56@DrvEscape|

; 1563 :             break;

  03020	ea000111	 b           |$LN54@DrvEscape|
  03024		 |$LN16@DrvEscape|

; 1564 : 
; 1565 :         case GETGXINFO:
; 1566 :             // Fill out the GAPI data structure.  Assumes 16bpp or 8bpp, with RGB565 format.
; 1567 :             // Must change cBPP and ffFormat fields to accomodate other formats.
; 1568 :             // All of the button data that follows must be filled out to match the specific OEM device.
; 1569 :             // The data that is used to fill out the data structure here is copied from
; 1570 :             // the Microsoft example.
; 1571 :             if ((cjOut >= sizeof(GXDeviceInfo)) && (pvOut != NULL) )

  03024	e59d3080	 ldr         r3, [sp, #0x80]
  03028	e3530084	 cmp         r3, #0x84
  0302c	3a000107	 bcc         |$LN15@DrvEscape|
  03030	e59d3084	 ldr         r3, [sp, #0x84]
  03034	e3530000	 cmp         r3, #0
  03038	0a000104	 beq         |$LN15@DrvEscape|

; 1572 :             {
; 1573 :                 if (((GXDeviceInfo *) pvOut)->idVersion == kidVersion100)

  0303c	e59d3084	 ldr         r3, [sp, #0x84]
  03040	e5933000	 ldr         r3, [r3]
  03044	e3530064	 cmp         r3, #0x64
  03048	1a0000fb	 bne         |$LN14@DrvEscape|

; 1574 :                 {
; 1575 :                     pgxoi = (GXDeviceInfo *) pvOut;

  0304c	e59d3084	 ldr         r3, [sp, #0x84]
  03050	e58d3014	 str         r3, [sp, #0x14]

; 1576 :                     pgxoi->idVersion = kidVersion100;

  03054	e59d2014	 ldr         r2, [sp, #0x14]
  03058	e3a03064	 mov         r3, #0x64
  0305c	e5823000	 str         r3, [r2]

; 1577 :                     pgxoi->pvFrameBuffer = (void *) FRAME_BUFFER_0_BASE_VIRTUAL;

  03060	e59f3428	 ldr         r3, [pc, #0x428]
  03064	e5933000	 ldr         r3, [r3]
  03068	e2832d12	 add         r2, r3, #0x12, 26
  0306c	e59d3014	 ldr         r3, [sp, #0x14]
  03070	e2833004	 add         r3, r3, #4
  03074	e5832000	 str         r2, [r3]

; 1578 : 
; 1579 :                     // cbStride reflects the physical properties of the display regardless of orientation.
; 1580 :                     // Using a native portrait mode display, stride will always be 480.
; 1581 :                     // If using native landscape mode display, stride would be 640.
; 1582 :                     if (((DispDrvr_cxScreen == 240) && (DispDrvr_cyScreen == 320)) ||
; 1583 :                         ((DispDrvr_cxScreen == 320) && (DispDrvr_cyScreen == 240)) )

  03078	e59f3408	 ldr         r3, [pc, #0x408]
  0307c	e5933000	 ldr         r3, [r3]
  03080	e35300f0	 cmp         r3, #0xF0
  03084	1a000003	 bne         |$LN11@DrvEscape|
  03088	e59f33f4	 ldr         r3, [pc, #0x3F4]
  0308c	e5933000	 ldr         r3, [r3]
  03090	e3530d05	 cmp         r3, #5, 26
  03094	0a000007	 beq         |$LN12@DrvEscape|
  03098		 |$LN11@DrvEscape|
  03098	e59f33e8	 ldr         r3, [pc, #0x3E8]
  0309c	e5933000	 ldr         r3, [r3]
  030a0	e3530d05	 cmp         r3, #5, 26
  030a4	1a00001b	 bne         |$LN13@DrvEscape|
  030a8	e59f33d4	 ldr         r3, [pc, #0x3D4]
  030ac	e5933000	 ldr         r3, [r3]
  030b0	e35300f0	 cmp         r3, #0xF0
  030b4	1a000017	 bne         |$LN13@DrvEscape|
  030b8		 |$LN12@DrvEscape|

; 1584 :                     {
; 1585 :                         if (bpp == 16)

  030b8	e59f33cc	 ldr         r3, [pc, #0x3CC]
  030bc	e5933000	 ldr         r3, [r3]
  030c0	e3530010	 cmp         r3, #0x10
  030c4	1a000007	 bne         |$LN10@DrvEscape|

; 1586 :                         {
; 1587 :                             pgxoi->cbStride = 480;

  030c8	e59d3014	 ldr         r3, [sp, #0x14]
  030cc	e2832008	 add         r2, r3, #8
  030d0	e3a03e1e	 mov         r3, #0x1E, 28
  030d4	e5823000	 str         r3, [r2]

; 1588 :                             pgxoi->cBPP = 16;

  030d8	e59d3014	 ldr         r3, [sp, #0x14]
  030dc	e2832014	 add         r2, r3, #0x14
  030e0	e3a03010	 mov         r3, #0x10
  030e4	e5823000	 str         r3, [r2]
  030e8		 |$LN10@DrvEscape|

; 1589 :                         }
; 1590 :                         if (bpp == 8)

  030e8	e59f339c	 ldr         r3, [pc, #0x39C]
  030ec	e5933000	 ldr         r3, [r3]
  030f0	e3530008	 cmp         r3, #8
  030f4	1a000007	 bne         |$LN9@DrvEscape|

; 1591 :                         {
; 1592 :                             pgxoi->cbStride = 240;

  030f8	e59d3014	 ldr         r3, [sp, #0x14]
  030fc	e2832008	 add         r2, r3, #8
  03100	e3a030f0	 mov         r3, #0xF0
  03104	e5823000	 str         r3, [r2]

; 1593 :                             pgxoi->cBPP = 16;

  03108	e59d3014	 ldr         r3, [sp, #0x14]
  0310c	e2832014	 add         r2, r3, #0x14
  03110	e3a03010	 mov         r3, #0x10
  03114	e5823000	 str         r3, [r2]
  03118		 |$LN9@DrvEscape|
  03118		 |$LN13@DrvEscape|

; 1594 :                         }
; 1595 :                     }
; 1596 : 
; 1597 :                     // Using a native landscape mode display, stride will always be 1280.
; 1598 :                     // If using native portrait mode display, stride would be 960.
; 1599 : 
; 1600 :                     if (((DispDrvr_cxScreen == 480) && (DispDrvr_cyScreen == 640)) ||
; 1601 :                         ((DispDrvr_cxScreen == 640) && (DispDrvr_cyScreen == 480)) )

  03118	e59f3368	 ldr         r3, [pc, #0x368]
  0311c	e5933000	 ldr         r3, [r3]
  03120	e3530e1e	 cmp         r3, #0x1E, 28
  03124	1a000003	 bne         |$LN6@DrvEscape|
  03128	e59f3354	 ldr         r3, [pc, #0x354]
  0312c	e5933000	 ldr         r3, [r3]
  03130	e3530d0a	 cmp         r3, #0xA, 26
  03134	0a000007	 beq         |$LN7@DrvEscape|
  03138		 |$LN6@DrvEscape|
  03138	e59f3348	 ldr         r3, [pc, #0x348]
  0313c	e5933000	 ldr         r3, [r3]
  03140	e3530d0a	 cmp         r3, #0xA, 26
  03144	1a00001b	 bne         |$LN8@DrvEscape|
  03148	e59f3334	 ldr         r3, [pc, #0x334]
  0314c	e5933000	 ldr         r3, [r3]
  03150	e3530e1e	 cmp         r3, #0x1E, 28
  03154	1a000017	 bne         |$LN8@DrvEscape|
  03158		 |$LN7@DrvEscape|

; 1602 :                     {
; 1603 :                         if (bpp == 16)

  03158	e59f332c	 ldr         r3, [pc, #0x32C]
  0315c	e5933000	 ldr         r3, [r3]
  03160	e3530010	 cmp         r3, #0x10
  03164	1a000007	 bne         |$LN5@DrvEscape|

; 1604 :                         {
; 1605 :                             pgxoi->cbStride = 1280;

  03168	e59d3014	 ldr         r3, [sp, #0x14]
  0316c	e2832008	 add         r2, r3, #8
  03170	e3a03c05	 mov         r3, #5, 24
  03174	e5823000	 str         r3, [r2]

; 1606 :                             pgxoi->cBPP = 16;

  03178	e59d3014	 ldr         r3, [sp, #0x14]
  0317c	e2832014	 add         r2, r3, #0x14
  03180	e3a03010	 mov         r3, #0x10
  03184	e5823000	 str         r3, [r2]
  03188		 |$LN5@DrvEscape|

; 1607 :                         }
; 1608 :                         if (bpp == 8)

  03188	e59f32fc	 ldr         r3, [pc, #0x2FC]
  0318c	e5933000	 ldr         r3, [r3]
  03190	e3530008	 cmp         r3, #8
  03194	1a000007	 bne         |$LN4@DrvEscape|

; 1609 :                         {
; 1610 :                             pgxoi->cbStride = 640;

  03198	e59d3014	 ldr         r3, [sp, #0x14]
  0319c	e2832008	 add         r2, r3, #8
  031a0	e3a03d0a	 mov         r3, #0xA, 26
  031a4	e5823000	 str         r3, [r2]

; 1611 :                             pgxoi->cBPP = 16;

  031a8	e59d3014	 ldr         r3, [sp, #0x14]
  031ac	e2832014	 add         r2, r3, #0x14
  031b0	e3a03010	 mov         r3, #0x10
  031b4	e5823000	 str         r3, [r2]
  031b8		 |$LN4@DrvEscape|
  031b8		 |$LN8@DrvEscape|

; 1612 :                         }
; 1613 :                     }
; 1614 : 
; 1615 : 
; 1616 :                     pgxoi->cxWidth = DispDrvr_cxScreen;

  031b8	e59d3014	 ldr         r3, [sp, #0x14]
  031bc	e283200c	 add         r2, r3, #0xC
  031c0	e59f32c0	 ldr         r3, [pc, #0x2C0]
  031c4	e5933000	 ldr         r3, [r3]
  031c8	e5823000	 str         r3, [r2]

; 1617 :                     pgxoi->cyHeight = DispDrvr_cyScreen;

  031cc	e59d3014	 ldr         r3, [sp, #0x14]
  031d0	e2832010	 add         r2, r3, #0x10
  031d4	e59f32a8	 ldr         r3, [pc, #0x2A8]
  031d8	e5933000	 ldr         r3, [r3]
  031dc	e5823000	 str         r3, [r2]

; 1618 : 
; 1619 :                     // Set kfLandscape only if the display orientation is not in its native format
; 1620 :                     pgxoi->ffFormat= kfDirect565;

  031e0	e59d3014	 ldr         r3, [sp, #0x14]
  031e4	e2832018	 add         r2, r3, #0x18
  031e8	e3a03080	 mov         r3, #0x80
  031ec	e5823000	 str         r3, [r2]

; 1621 : 
; 1622 : 
; 1623 :                     pgxoi->vkButtonUpPortrait = VK_UP;

  031f0	e59d3014	 ldr         r3, [sp, #0x14]
  031f4	e283201c	 add         r2, r3, #0x1C
  031f8	e3a03026	 mov         r3, #0x26
  031fc	e1c230b0	 strh        r3, [r2]

; 1624 :                     pgxoi->vkButtonUpLandscape = VK_LEFT;

  03200	e59d3014	 ldr         r3, [sp, #0x14]
  03204	e283201e	 add         r2, r3, #0x1E
  03208	e3a03025	 mov         r3, #0x25
  0320c	e1c230b0	 strh        r3, [r2]

; 1625 :                     pgxoi->ptButtonUp.x = 120;

  03210	e59d3014	 ldr         r3, [sp, #0x14]
  03214	e2832020	 add         r2, r3, #0x20
  03218	e3a03078	 mov         r3, #0x78
  0321c	e5823000	 str         r3, [r2]

; 1626 :                     pgxoi->ptButtonUp.y = 350;

  03220	e59d3014	 ldr         r3, [sp, #0x14]
  03224	e2832024	 add         r2, r3, #0x24
  03228	e3a03c01	 mov         r3, #1, 24
  0322c	e383305e	 orr         r3, r3, #0x5E
  03230	e5823000	 str         r3, [r2]

; 1627 :                     pgxoi->vkButtonDownPortrait = VK_DOWN;

  03234	e59d3014	 ldr         r3, [sp, #0x14]
  03238	e2832028	 add         r2, r3, #0x28
  0323c	e3a03028	 mov         r3, #0x28
  03240	e1c230b0	 strh        r3, [r2]

; 1628 :                     pgxoi->vkButtonDownLandscape = VK_RIGHT;

  03244	e59d3014	 ldr         r3, [sp, #0x14]
  03248	e283202a	 add         r2, r3, #0x2A
  0324c	e3a03027	 mov         r3, #0x27
  03250	e1c230b0	 strh        r3, [r2]

; 1629 :                     pgxoi->ptButtonDown.x = 120;

  03254	e59d3014	 ldr         r3, [sp, #0x14]
  03258	e283202c	 add         r2, r3, #0x2C
  0325c	e3a03078	 mov         r3, #0x78
  03260	e5823000	 str         r3, [r2]

; 1630 :                     pgxoi->ptButtonDown.y = 390;

  03264	e59d3014	 ldr         r3, [sp, #0x14]
  03268	e2832030	 add         r2, r3, #0x30
  0326c	e3a03c01	 mov         r3, #1, 24
  03270	e3833086	 orr         r3, r3, #0x86
  03274	e5823000	 str         r3, [r2]

; 1631 :                     pgxoi->vkButtonLeftPortrait = VK_LEFT;

  03278	e59d3014	 ldr         r3, [sp, #0x14]
  0327c	e2832034	 add         r2, r3, #0x34
  03280	e3a03025	 mov         r3, #0x25
  03284	e1c230b0	 strh        r3, [r2]

; 1632 :                     pgxoi->vkButtonLeftLandscape = VK_DOWN;

  03288	e59d3014	 ldr         r3, [sp, #0x14]
  0328c	e2832036	 add         r2, r3, #0x36
  03290	e3a03028	 mov         r3, #0x28
  03294	e1c230b0	 strh        r3, [r2]

; 1633 :                     pgxoi->ptButtonLeft.x = 100;

  03298	e59d3014	 ldr         r3, [sp, #0x14]
  0329c	e2832038	 add         r2, r3, #0x38
  032a0	e3a03064	 mov         r3, #0x64
  032a4	e5823000	 str         r3, [r2]

; 1634 :                     pgxoi->ptButtonLeft.y = 370;

  032a8	e59d3014	 ldr         r3, [sp, #0x14]
  032ac	e283203c	 add         r2, r3, #0x3C
  032b0	e3a03c01	 mov         r3, #1, 24
  032b4	e3833072	 orr         r3, r3, #0x72
  032b8	e5823000	 str         r3, [r2]

; 1635 :                     pgxoi->vkButtonRightPortrait = VK_RIGHT;

  032bc	e59d3014	 ldr         r3, [sp, #0x14]
  032c0	e2832040	 add         r2, r3, #0x40
  032c4	e3a03027	 mov         r3, #0x27
  032c8	e1c230b0	 strh        r3, [r2]

; 1636 :                     pgxoi->vkButtonRightLandscape = VK_UP;

  032cc	e59d3014	 ldr         r3, [sp, #0x14]
  032d0	e2832042	 add         r2, r3, #0x42
  032d4	e3a03026	 mov         r3, #0x26
  032d8	e1c230b0	 strh        r3, [r2]

; 1637 :                     pgxoi->ptButtonRight.x = 140;

  032dc	e59d3014	 ldr         r3, [sp, #0x14]
  032e0	e2832044	 add         r2, r3, #0x44
  032e4	e3a0308c	 mov         r3, #0x8C
  032e8	e5823000	 str         r3, [r2]

; 1638 :                     pgxoi->ptButtonRight.y = 370;

  032ec	e59d3014	 ldr         r3, [sp, #0x14]
  032f0	e2832048	 add         r2, r3, #0x48
  032f4	e3a03c01	 mov         r3, #1, 24
  032f8	e3833072	 orr         r3, r3, #0x72
  032fc	e5823000	 str         r3, [r2]

; 1639 :                     pgxoi->vkButtonAPortrait = 'A';

  03300	e59d3014	 ldr         r3, [sp, #0x14]
  03304	e283204c	 add         r2, r3, #0x4C
  03308	e3a03041	 mov         r3, #0x41
  0330c	e1c230b0	 strh        r3, [r2]

; 1640 :                     pgxoi->vkButtonALandscape = 'A';

  03310	e59d3014	 ldr         r3, [sp, #0x14]
  03314	e283204e	 add         r2, r3, #0x4E
  03318	e3a03041	 mov         r3, #0x41
  0331c	e1c230b0	 strh        r3, [r2]

; 1641 :                     pgxoi->ptButtonA.x = 100;

  03320	e59d3014	 ldr         r3, [sp, #0x14]
  03324	e2832050	 add         r2, r3, #0x50
  03328	e3a03064	 mov         r3, #0x64
  0332c	e5823000	 str         r3, [r2]

; 1642 :                     pgxoi->ptButtonA.y = 410;

  03330	e59d3014	 ldr         r3, [sp, #0x14]
  03334	e2832054	 add         r2, r3, #0x54
  03338	e3a03c01	 mov         r3, #1, 24
  0333c	e383309a	 orr         r3, r3, #0x9A
  03340	e5823000	 str         r3, [r2]

; 1643 :                     pgxoi->vkButtonBPortrait = 'B';

  03344	e59d3014	 ldr         r3, [sp, #0x14]
  03348	e2832058	 add         r2, r3, #0x58
  0334c	e3a03042	 mov         r3, #0x42
  03350	e1c230b0	 strh        r3, [r2]

; 1644 :                     pgxoi->vkButtonBLandscape = 'B';

  03354	e59d3014	 ldr         r3, [sp, #0x14]
  03358	e283205a	 add         r2, r3, #0x5A
  0335c	e3a03042	 mov         r3, #0x42
  03360	e1c230b0	 strh        r3, [r2]

; 1645 :                     pgxoi->ptButtonB.x = 120;

  03364	e59d3014	 ldr         r3, [sp, #0x14]
  03368	e283205c	 add         r2, r3, #0x5C
  0336c	e3a03078	 mov         r3, #0x78
  03370	e5823000	 str         r3, [r2]

; 1646 :                     pgxoi->ptButtonB.y = 410;

  03374	e59d3014	 ldr         r3, [sp, #0x14]
  03378	e2832060	 add         r2, r3, #0x60
  0337c	e3a03c01	 mov         r3, #1, 24
  03380	e383309a	 orr         r3, r3, #0x9A
  03384	e5823000	 str         r3, [r2]

; 1647 :                     pgxoi->vkButtonCPortrait = 'C';

  03388	e59d3014	 ldr         r3, [sp, #0x14]
  0338c	e2832064	 add         r2, r3, #0x64
  03390	e3a03043	 mov         r3, #0x43
  03394	e1c230b0	 strh        r3, [r2]

; 1648 :                     pgxoi->vkButtonCLandscape = 'C';

  03398	e59d3014	 ldr         r3, [sp, #0x14]
  0339c	e2832066	 add         r2, r3, #0x66
  033a0	e3a03043	 mov         r3, #0x43
  033a4	e1c230b0	 strh        r3, [r2]

; 1649 :                     pgxoi->ptButtonC.x = 140;

  033a8	e59d3014	 ldr         r3, [sp, #0x14]
  033ac	e2832068	 add         r2, r3, #0x68
  033b0	e3a0308c	 mov         r3, #0x8C
  033b4	e5823000	 str         r3, [r2]

; 1650 :                     pgxoi->ptButtonC.y = 410;

  033b8	e59d3014	 ldr         r3, [sp, #0x14]
  033bc	e283206c	 add         r2, r3, #0x6C
  033c0	e3a03c01	 mov         r3, #1, 24
  033c4	e383309a	 orr         r3, r3, #0x9A
  033c8	e5823000	 str         r3, [r2]

; 1651 :                     pgxoi->vkButtonStartPortrait = 'D';

  033cc	e59d3014	 ldr         r3, [sp, #0x14]
  033d0	e2832070	 add         r2, r3, #0x70
  033d4	e3a03044	 mov         r3, #0x44
  033d8	e1c230b0	 strh        r3, [r2]

; 1652 :                     pgxoi->vkButtonStartLandscape = 'D';

  033dc	e59d3014	 ldr         r3, [sp, #0x14]
  033e0	e2832072	 add         r2, r3, #0x72
  033e4	e3a03044	 mov         r3, #0x44
  033e8	e1c230b0	 strh        r3, [r2]

; 1653 :                     pgxoi->ptButtonStart.x = 160;

  033ec	e59d3014	 ldr         r3, [sp, #0x14]
  033f0	e2832074	 add         r2, r3, #0x74
  033f4	e3a030a0	 mov         r3, #0xA0
  033f8	e5823000	 str         r3, [r2]

; 1654 :                     pgxoi->ptButtonStart.y = 410;

  033fc	e59d3014	 ldr         r3, [sp, #0x14]
  03400	e2832078	 add         r2, r3, #0x78
  03404	e3a03c01	 mov         r3, #1, 24
  03408	e383309a	 orr         r3, r3, #0x9A
  0340c	e5823000	 str         r3, [r2]

; 1655 :                     pgxoi->pvReserved1 = (void *) 0;

  03410	e59d3014	 ldr         r3, [sp, #0x14]
  03414	e283207c	 add         r2, r3, #0x7C
  03418	e3a03000	 mov         r3, #0
  0341c	e5823000	 str         r3, [r2]

; 1656 :                     pgxoi->pvReserved2 = (void *) 0;

  03420	e59d3014	 ldr         r3, [sp, #0x14]
  03424	e2832080	 add         r2, r3, #0x80
  03428	e3a03000	 mov         r3, #0
  0342c	e5823000	 str         r3, [r2]

; 1657 :                     RetVal = 1;

  03430	e3a03001	 mov         r3, #1
  03434	e58d3000	 str         r3, [sp]

; 1658 : 
; 1659 :                 } else

  03438	ea000003	 b           |$LN3@DrvEscape|
  0343c		 |$LN14@DrvEscape|

; 1660 :                 {
; 1661 :                     SetLastError (ERROR_INVALID_PARAMETER);

  0343c	e3a00057	 mov         r0, #0x57
  03440	eb000000	 bl          SetLastError

; 1662 :                     RetVal = -1;

  03444	e3e03000	 mvn         r3, #0
  03448	e58d3000	 str         r3, [sp]
  0344c		 |$LN3@DrvEscape|

; 1663 :                 }
; 1664 :             } else {

  0344c	ea000003	 b           |$LN2@DrvEscape|
  03450		 |$LN15@DrvEscape|

; 1665 :                 SetLastError (ERROR_INVALID_PARAMETER);

  03450	e3a00057	 mov         r0, #0x57
  03454	eb000000	 bl          SetLastError

; 1666 :                 RetVal = -1;

  03458	e3e03000	 mvn         r3, #0
  0345c	e58d3000	 str         r3, [sp]
  03460		 |$LN2@DrvEscape|

; 1667 :             }
; 1668 :             break;

  03460	ea000001	 b           |$LN54@DrvEscape|
  03464		 |$LN1@DrvEscape|

; 1669 : 
; 1670 :         default:
; 1671 :             RetVal = 0;

  03464	e3a03000	 mov         r3, #0
  03468	e58d3000	 str         r3, [sp]
  0346c		 |$LN54@DrvEscape|

; 1672 :             break;
; 1673 :     }
; 1674 :     return RetVal;

  0346c	e59d3000	 ldr         r3, [sp]
  03470	e58d301c	 str         r3, [sp, #0x1C]
  03474		 |$LN56@DrvEscape|

; 1675 : }

  03474	e59d001c	 ldr         r0, [sp, #0x1C]
  03478	e28dd064	 add         sp, sp, #0x64
  0347c	e89d6000	 ldmia       sp, {sp, lr}
  03480	e12fff1e	 bx          lr
  03484		 |$LN84@DrvEscape|
  03484		 |$LN85@DrvEscape|
  03484	00000000	 DCD         |DispDrvr_cyScreen|
  03488		 |$LN86@DrvEscape|
  03488	00000000	 DCD         |DispDrvr_cxScreen|
  0348c		 |$LN87@DrvEscape|
  0348c	00000000	 DCD         |bpp|
  03490		 |$LN88@DrvEscape|
  03490	00000000	 DCD         |g_DisplayBaseVirtual|
  03494		 |$LN89@DrvEscape|
  03494	00000000	 DCD         |g_fDisableRotation|
  03498		 |$LN90@DrvEscape|
  03498	00321004	 DCD         0x321004
  0349c		 |$LN91@DrvEscape|
  0349c	00321008	 DCD         0x321008
  034a0		 |$LN92@DrvEscape|
  034a0	0032100c	 DCD         0x32100c
  034a4		 |$LN93@DrvEscape|
  034a4	000186a5	 DCD         0x186a5
  034a8		 |$LN94@DrvEscape|
  034a8	000186a3	 DCD         0x186a3
  034ac		 |$LN95@DrvEscape|
  034ac	00000000	 DCD         |??_C@_1DI@IEJJINPJ@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  034b0		 |$LN96@DrvEscape|
  034b0	00000000	 DCD         |dpCurSettings|
  034b4		 |$LN97@DrvEscape|
  034b4	00000000	 DCD         |??_C@_1FC@JMNBBIFC@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@|
  034b8		 |$LN98@DrvEscape|
  034b8	00000000	 DCD         |??_C@_1FE@NJJBAMEA@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd?$AA?$CJ?$AA?5@|
  034bc		 |$LN99@DrvEscape|
  034bc	00000000	 DCD         |??_C@_1FG@JDBAEIHI@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@|
  034c0		 |$LN100@DrvEscape|
  034c0	00000000	 DCD         |??_C@_1FI@NNJBJOFN@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?9?$AA?$CI?$AAD?$AA?$CF?$AAd@|
  034c4		 |$LN101@DrvEscape|
  034c4	00000000	 DCD         |??_C@_1DM@FMPJLHEL@?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN?$AA?6?$AA?$AA@|
  034c8		 |$LN102@DrvEscape|
  034c8	00000000	 DCD         |?DisplayDrvPowerCaps@@3U_POWER_CAPABILITIES@@A|
  034cc		 |$LN103@DrvEscape|
  034cc	00000000	 DCD         |??_C@_1FM@NEKOOJBO@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAA?$AA2?$AAV?$AAI?$AAD?$AAE?$AAO?$AA?3?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC@|
  034d0		 |$LN104@DrvEscape|
  034d0	00000000	 DCD         |??_C@_1HA@LCOCAHFG@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@|
  034d4		 |$LN105@DrvEscape|
  034d4	00000000	 DCD         |??_C@_1JI@GKDOFAIK@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAn?$AAa?$AAg?$AAe?$AAm?$AAe?$AAn?$AAt?$AA?3?$AAD?$AAe?$AAv@|
  034d8		 |$LN106@DrvEscape|
  034d8	00000000	 DCD         |??_C@_1GG@PPBPMEFB@?$AAS?$AAA?$AA2?$AAV?$AAi?$AAd?$AAe?$AAo?$AA?3?$AA?3?$AAG?$AAE?$AAT?$AAP?$AAO?$AAW?$AAE?$AAR?$AAM?$AAA?$AAN?$AAA?$AAG?$AAE?$AAM?$AAE?$AAN?$AAT?$AA?3?$AA?5?$AAV?$AAi@|
  034dc		 |$M39095|

			 ENDP  ; |?DrvEscape@SA2Video@@UAAKPAU_SURFOBJ@@KKPAXK1@Z|, SA2Video::DrvEscape

	EXPORT	|??_C@_1M@FIJHFMPA@?$AAA?$AAN?$AAG?$AAL?$AAE?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@PNCEGBJC@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|

  00110			 AREA	 |.pdata|, PDATA
|$T39129| DCD	|$LN13@GetRotateM|
	DCD	0x40004504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FIJHFMPA@?$AAA?$AAN?$AAG?$AAL?$AAE?$AA?$AA@| DCB "A", 0x0, "N", 0x0
	DCB	"G", 0x0, "L", 0x0, "E", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PNCEGBJC@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?$AA@| DCB "S"
	DCB	0x0, "Y", 0x0, "S", 0x0, "T", 0x0, "E", 0x0, "M", 0x0, "\\"
	DCB	0x0, "G", 0x0, "D", 0x0, "I", 0x0, "\\", 0x0, "R", 0x0, "O"
	DCB	0x0, "T", 0x0, "A", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  034dc			 AREA	 |.text|, CODE, ARM

  034dc		 |?GetRotateModeFromReg@SA2Video@@QAAHXZ| PROC ; SA2Video::GetRotateModeFromReg

; 1679 : {

  034dc		 |$LN13@GetRotateM|
  034dc	e1a0c00d	 mov         r12, sp
  034e0	e92d0001	 stmdb       sp!, {r0}
  034e4	e92d5000	 stmdb       sp!, {r12, lr}
  034e8	e24dd038	 sub         sp, sp, #0x38
  034ec		 |$M39126|

; 1680 :     HKEY hKey;
; 1681 :     int nRet = DMDO_0;

  034ec	e3a03000	 mov         r3, #0
  034f0	e58d3008	 str         r3, [sp, #8]

; 1682 : 
; 1683 :     if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\GDI\\ROTATION"),0,0, &hKey))

  034f4	e28d300c	 add         r3, sp, #0xC
  034f8	e58d3000	 str         r3, [sp]
  034fc	e3a03000	 mov         r3, #0
  03500	e3a02000	 mov         r2, #0
  03504	e59f10e0	 ldr         r1, [pc, #0xE0]
  03508	e3a0010a	 mov         r0, #0xA, 2
  0350c	eb000000	 bl          RegOpenKeyExW
  03510	e58d002c	 str         r0, [sp, #0x2C]
  03514	e59d302c	 ldr         r3, [sp, #0x2C]
  03518	e3530000	 cmp         r3, #0
  0351c	1a00002b	 bne         |$LN8@GetRotateM|

; 1684 :     {
; 1685 :         DWORD dwSize, dwAngle, dwType = REG_DWORD;

  03520	e3a03004	 mov         r3, #4
  03524	e58d3010	 str         r3, [sp, #0x10]

; 1686 :         dwSize = sizeof(DWORD);

  03528	e3a03004	 mov         r3, #4
  0352c	e58d3014	 str         r3, [sp, #0x14]

; 1687 :         if (ERROR_SUCCESS == RegQueryValueEx(hKey,
; 1688 :                                                TEXT("ANGLE"),
; 1689 :                                                NULL,
; 1690 :                                                &dwType,
; 1691 :                                                (LPBYTE)&dwAngle,
; 1692 :                                                &dwSize))

  03530	e28d3014	 add         r3, sp, #0x14
  03534	e58d3004	 str         r3, [sp, #4]
  03538	e28d3018	 add         r3, sp, #0x18
  0353c	e58d3000	 str         r3, [sp]
  03540	e28d3010	 add         r3, sp, #0x10
  03544	e3a02000	 mov         r2, #0
  03548	e59f1098	 ldr         r1, [pc, #0x98]
  0354c	e59d000c	 ldr         r0, [sp, #0xC]
  03550	eb000000	 bl          RegQueryValueExW
  03554	e58d0030	 str         r0, [sp, #0x30]
  03558	e59d3030	 ldr         r3, [sp, #0x30]
  0355c	e3530000	 cmp         r3, #0
  03560	1a000018	 bne         |$LN7@GetRotateM|

; 1693 :         {
; 1694 :             switch (dwAngle)

  03564	e59d3018	 ldr         r3, [sp, #0x18]
  03568	e58d3034	 str         r3, [sp, #0x34]
  0356c	e59d3034	 ldr         r3, [sp, #0x34]
  03570	e353005a	 cmp         r3, #0x5A
  03574	0a000008	 beq         |$LN4@GetRotateM|
  03578	e59d3034	 ldr         r3, [sp, #0x34]
  0357c	e35300b4	 cmp         r3, #0xB4
  03580	0a000008	 beq         |$LN3@GetRotateM|
  03584	e59d2034	 ldr         r2, [sp, #0x34]
  03588	e3a03c01	 mov         r3, #1, 24
  0358c	e383300e	 orr         r3, r3, #0xE
  03590	e1520003	 cmp         r2, r3
  03594	0a000006	 beq         |$LN2@GetRotateM|
  03598	ea000008	 b           |$LN1@GetRotateM|
  0359c		 |$LN4@GetRotateM|

; 1695 :             {
; 1696 :             case 90:
; 1697 :                 nRet = DMDO_90;

  0359c	e3a03001	 mov         r3, #1
  035a0	e58d3008	 str         r3, [sp, #8]

; 1698 :                 break;

  035a4	ea000007	 b           |$LN5@GetRotateM|
  035a8		 |$LN3@GetRotateM|

; 1699 :             case 180:
; 1700 :                 nRet = DMDO_180;

  035a8	e3a03002	 mov         r3, #2
  035ac	e58d3008	 str         r3, [sp, #8]

; 1701 :                 break;

  035b0	ea000004	 b           |$LN5@GetRotateM|
  035b4		 |$LN2@GetRotateM|

; 1702 :             case 270:
; 1703 :                 nRet = DMDO_270;

  035b4	e3a03004	 mov         r3, #4
  035b8	e58d3008	 str         r3, [sp, #8]

; 1704 :                 break;

  035bc	ea000001	 b           |$LN5@GetRotateM|
  035c0		 |$LN1@GetRotateM|

; 1705 :             case 0:
; 1706 :                 // fall through
; 1707 :             default:
; 1708 :                 nRet = DMDO_0;

  035c0	e3a03000	 mov         r3, #0
  035c4	e58d3008	 str         r3, [sp, #8]
  035c8		 |$LN5@GetRotateM|
  035c8		 |$LN7@GetRotateM|

; 1709 :                 break;
; 1710 :             }
; 1711 :         }
; 1712 : 
; 1713 :         RegCloseKey(hKey);

  035c8	e59d000c	 ldr         r0, [sp, #0xC]
  035cc	eb000000	 bl          RegCloseKey
  035d0		 |$LN8@GetRotateM|

; 1714 :     }
; 1715 : 
; 1716 :     return nRet;

  035d0	e59d3008	 ldr         r3, [sp, #8]
  035d4	e58d3028	 str         r3, [sp, #0x28]

; 1717 : }

  035d8	e59d0028	 ldr         r0, [sp, #0x28]
  035dc	e28dd038	 add         sp, sp, #0x38
  035e0	e89d6000	 ldmia       sp, {sp, lr}
  035e4	e12fff1e	 bx          lr
  035e8		 |$LN14@GetRotateM|
  035e8		 |$LN15@GetRotateM|
  035e8	00000000	 DCD         |??_C@_1M@FIJHFMPA@?$AAA?$AAN?$AAG?$AAL?$AAE?$AA?$AA@|
  035ec		 |$LN16@GetRotateM|
  035ec	00000000	 DCD         |??_C@_1CI@PNCEGBJC@?$AAS?$AAY?$AAS?$AAT?$AAE?$AAM?$AA?2?$AAG?$AAD?$AAI?$AA?2?$AAR?$AAO?$AAT?$AAA?$AAT?$AAI?$AAO?$AAN?$AA?$AA@|
  035f0		 |$M39127|

			 ENDP  ; |?GetRotateModeFromReg@SA2Video@@QAAHXZ|, SA2Video::GetRotateModeFromReg


  00118			 AREA	 |.pdata|, PDATA
|$T39144| DCD	|$LN18@SetRotateP|
	DCD	0x40005904
; Function compile flags: /Odtp

  035f0			 AREA	 |.text|, CODE, ARM

  035f0		 |?SetRotateParams@SA2Video@@QAAXXZ| PROC ; SA2Video::SetRotateParams

; 1721 : {

  035f0		 |$LN18@SetRotateP|
  035f0	e1a0c00d	 mov         r12, sp
  035f4	e92d0001	 stmdb       sp!, {r0}
  035f8	e92d5000	 stmdb       sp!, {r12, lr}
  035fc	e24dd008	 sub         sp, sp, #8
  03600		 |$M39141|

; 1722 :     int iswap;
; 1723 :     switch(m_iRotate)

  03600	e59d3010	 ldr         r3, [sp, #0x10]
  03604	e2833018	 add         r3, r3, #0x18
  03608	e5933000	 ldr         r3, [r3]
  0360c	e58d3004	 str         r3, [sp, #4]
  03610	e59d3004	 ldr         r3, [sp, #4]
  03614	e3530004	 cmp         r3, #4
  03618	8a00003e	 bhi         |$LN1@SetRotateP|
  0361c	e59d2004	 ldr         r2, [sp, #4]
  03620	e1a03102	 mov         r3, r2, lsl #2
  03624	e083300f	 add         r3, r3, pc
  03628	e5933004	 ldr         r3, [r3, #4]
  0362c	e08ff003	 add         pc, pc, r3
  03630		 |$LN10@SetRotateP|
  03630		 |$LN9@SetRotateP|
  03630		 |$LN11@SetRotateP|
  03630	00000010	 DCD         0x10
  03634		 |$LN12@SetRotateP|
  03634	00000078	 DCD         0x78
  03638		 |$LN13@SetRotateP|
  03638	00000044	 DCD         0x44
  0363c		 |$LN14@SetRotateP|
  0363c	000000e4	 DCD         0xe4
  03640		 |$LN15@SetRotateP|
  03640	00000078	 DCD         0x78
  03644		 |$LN4@SetRotateP|

; 1724 :     {
; 1725 :     case DMDO_0:
; 1726 :         m_nScreenHeightSave = m_nScreenHeight;

  03644	e59d3010	 ldr         r3, [sp, #0x10]
  03648	e283100c	 add         r1, r3, #0xC
  0364c	e59d3010	 ldr         r3, [sp, #0x10]
  03650	e2832020	 add         r2, r3, #0x20
  03654	e5913000	 ldr         r3, [r1]
  03658	e5823000	 str         r3, [r2]

; 1727 :         m_nScreenWidthSave = m_nScreenWidth;

  0365c	e59d3010	 ldr         r3, [sp, #0x10]
  03660	e2831008	 add         r1, r3, #8
  03664	e59d3010	 ldr         r3, [sp, #0x10]
  03668	e283201c	 add         r2, r3, #0x1C
  0366c	e5913000	 ldr         r3, [r1]
  03670	e5823000	 str         r3, [r2]

; 1728 :         break;

  03674	ea000033	 b           |$LN5@SetRotateP|
  03678		 |$LN3@SetRotateP|

; 1729 : 
; 1730 :     case DMDO_180:
; 1731 :         m_nScreenHeightSave = m_nScreenHeight;

  03678	e59d3010	 ldr         r3, [sp, #0x10]
  0367c	e283100c	 add         r1, r3, #0xC
  03680	e59d3010	 ldr         r3, [sp, #0x10]
  03684	e2832020	 add         r2, r3, #0x20
  03688	e5913000	 ldr         r3, [r1]
  0368c	e5823000	 str         r3, [r2]

; 1732 :         m_nScreenWidthSave = m_nScreenWidth;

  03690	e59d3010	 ldr         r3, [sp, #0x10]
  03694	e2831008	 add         r1, r3, #8
  03698	e59d3010	 ldr         r3, [sp, #0x10]
  0369c	e283201c	 add         r2, r3, #0x1C
  036a0	e5913000	 ldr         r3, [r1]
  036a4	e5823000	 str         r3, [r2]

; 1733 :         break;

  036a8	ea000026	 b           |$LN5@SetRotateP|
  036ac		 |$LN2@SetRotateP|

; 1734 : 
; 1735 :     case DMDO_90:
; 1736 :     case DMDO_270:
; 1737 :         iswap = m_nScreenHeight;

  036ac	e59d3010	 ldr         r3, [sp, #0x10]
  036b0	e283300c	 add         r3, r3, #0xC
  036b4	e5933000	 ldr         r3, [r3]
  036b8	e58d3000	 str         r3, [sp]

; 1738 :         m_nScreenHeight = m_nScreenWidth;

  036bc	e59d3010	 ldr         r3, [sp, #0x10]
  036c0	e2831008	 add         r1, r3, #8
  036c4	e59d3010	 ldr         r3, [sp, #0x10]
  036c8	e283200c	 add         r2, r3, #0xC
  036cc	e5913000	 ldr         r3, [r1]
  036d0	e5823000	 str         r3, [r2]

; 1739 :         m_nScreenWidth = iswap;

  036d4	e59d3010	 ldr         r3, [sp, #0x10]
  036d8	e2832008	 add         r2, r3, #8
  036dc	e59d3000	 ldr         r3, [sp]
  036e0	e5823000	 str         r3, [r2]

; 1740 :         m_nScreenHeightSave = m_nScreenWidth;

  036e4	e59d3010	 ldr         r3, [sp, #0x10]
  036e8	e2831008	 add         r1, r3, #8
  036ec	e59d3010	 ldr         r3, [sp, #0x10]
  036f0	e2832020	 add         r2, r3, #0x20
  036f4	e5913000	 ldr         r3, [r1]
  036f8	e5823000	 str         r3, [r2]

; 1741 :         m_nScreenWidthSave = m_nScreenHeight;

  036fc	e59d3010	 ldr         r3, [sp, #0x10]
  03700	e283100c	 add         r1, r3, #0xC
  03704	e59d3010	 ldr         r3, [sp, #0x10]
  03708	e283201c	 add         r2, r3, #0x1C
  0370c	e5913000	 ldr         r3, [r1]
  03710	e5823000	 str         r3, [r2]

; 1742 :         break;

  03714	ea00000b	 b           |$LN5@SetRotateP|
  03718		 |$LN1@SetRotateP|

; 1743 : 
; 1744 :     default:
; 1745 :         m_nScreenHeightSave = m_nScreenHeight;

  03718	e59d3010	 ldr         r3, [sp, #0x10]
  0371c	e283100c	 add         r1, r3, #0xC
  03720	e59d3010	 ldr         r3, [sp, #0x10]
  03724	e2832020	 add         r2, r3, #0x20
  03728	e5913000	 ldr         r3, [r1]
  0372c	e5823000	 str         r3, [r2]

; 1746 :         m_nScreenWidthSave = m_nScreenWidth;

  03730	e59d3010	 ldr         r3, [sp, #0x10]
  03734	e2831008	 add         r1, r3, #8
  03738	e59d3010	 ldr         r3, [sp, #0x10]
  0373c	e283201c	 add         r2, r3, #0x1C
  03740	e5913000	 ldr         r3, [r1]
  03744	e5823000	 str         r3, [r2]
  03748		 |$LN5@SetRotateP|

; 1747 :         break;
; 1748 :     }
; 1749 : 
; 1750 :     return;
; 1751 : }

  03748	e28dd008	 add         sp, sp, #8
  0374c	e89d6000	 ldmia       sp, {sp, lr}
  03750	e12fff1e	 bx          lr
  03754		 |$M39142|

			 ENDP  ; |?SetRotateParams@SA2Video@@QAAXXZ|, SA2Video::SetRotateParams


  00120			 AREA	 |.pdata|, PDATA
|$T39157| DCD	|$LN18@DynRotate|
	DCD	0x40006b04
; Function compile flags: /Odtp

  03754			 AREA	 |.text|, CODE, ARM

  03754		 |?DynRotate@SA2Video@@QAAJH@Z| PROC	; SA2Video::DynRotate

; 1757 : {

  03754		 |$LN18@DynRotate|
  03754	e1a0c00d	 mov         r12, sp
  03758	e92d0003	 stmdb       sp!, {r0, r1}
  0375c	e92d5000	 stmdb       sp!, {r12, lr}
  03760	e24dd00c	 sub         sp, sp, #0xC
  03764		 |$M39154|

; 1758 :     GPESurfRotate *pSurf = (GPESurfRotate *)m_pPrimarySurface;

  03764	e59d3014	 ldr         r3, [sp, #0x14]
  03768	e2833004	 add         r3, r3, #4
  0376c	e5933000	 ldr         r3, [r3]
  03770	e58d3000	 str         r3, [sp]

; 1759 : 
; 1760 :     if (m_InDDraw)

  03774	e59d3014	 ldr         r3, [sp, #0x14]
  03778	e2833c0b	 add         r3, r3, #0xB, 24
  0377c	e283300c	 add         r3, r3, #0xC
  03780	e5933000	 ldr         r3, [r3]
  03784	e3530000	 cmp         r3, #0
  03788	0a000002	 beq         |$LN6@DynRotate|

; 1761 :     {
; 1762 :         return DISP_CHANGE_BADMODE;

  0378c	e3e03001	 mvn         r3, #1
  03790	e58d3004	 str         r3, [sp, #4]
  03794	ea000055	 b           |$LN7@DynRotate|
  03798		 |$LN6@DynRotate|

; 1763 :     }
; 1764 : 
; 1765 :     if (angle == m_iRotate)

  03798	e59d3014	 ldr         r3, [sp, #0x14]
  0379c	e2833018	 add         r3, r3, #0x18
  037a0	e59d2018	 ldr         r2, [sp, #0x18]
  037a4	e5933000	 ldr         r3, [r3]
  037a8	e1520003	 cmp         r2, r3
  037ac	1a000002	 bne         |$LN5@DynRotate|

; 1766 :     {
; 1767 :         return DISP_CHANGE_SUCCESSFUL;

  037b0	e3a03000	 mov         r3, #0
  037b4	e58d3004	 str         r3, [sp, #4]
  037b8	ea00004c	 b           |$LN7@DynRotate|
  037bc		 |$LN5@DynRotate|

; 1768 :     }
; 1769 : 
; 1770 :     CursorOff();

  037bc	e59d0014	 ldr         r0, [sp, #0x14]
  037c0	eb000000	 bl          |?CursorOff@SA2Video@@QAAXXZ|

; 1771 : 
; 1772 :     m_iRotate = angle;

  037c4	e59d3014	 ldr         r3, [sp, #0x14]
  037c8	e2832018	 add         r2, r3, #0x18
  037cc	e59d3018	 ldr         r3, [sp, #0x18]
  037d0	e5823000	 str         r3, [r2]

; 1773 : 
; 1774 :     switch(m_iRotate)

  037d4	e59d3014	 ldr         r3, [sp, #0x14]
  037d8	e2833018	 add         r3, r3, #0x18
  037dc	e5933000	 ldr         r3, [r3]
  037e0	e58d3008	 str         r3, [sp, #8]
  037e4	e59d3008	 ldr         r3, [sp, #8]
  037e8	e3530004	 cmp         r3, #4
  037ec	8a000022	 bhi         |$LN3@DynRotate|
  037f0	e59d2008	 ldr         r2, [sp, #8]
  037f4	e1a03102	 mov         r3, r2, lsl #2
  037f8	e083300f	 add         r3, r3, pc
  037fc	e5933004	 ldr         r3, [r3, #4]
  03800	e08ff003	 add         pc, pc, r3
  03804		 |$LN10@DynRotate|
  03804		 |$LN9@DynRotate|
  03804		 |$LN11@DynRotate|
  03804	00000010	 DCD         0x10
  03808		 |$LN12@DynRotate|
  03808	00000044	 DCD         0x44
  0380c		 |$LN13@DynRotate|
  0380c	00000010	 DCD         0x10
  03810		 |$LN14@DynRotate|
  03810	00000074	 DCD         0x74
  03814		 |$LN15@DynRotate|
  03814	00000044	 DCD         0x44
  03818		 |$LN2@DynRotate|

; 1775 :     {
; 1776 :     case DMDO_0:
; 1777 :     case DMDO_180:
; 1778 :         m_nScreenHeight = m_nScreenHeightSave;

  03818	e59d3014	 ldr         r3, [sp, #0x14]
  0381c	e2831020	 add         r1, r3, #0x20
  03820	e59d3014	 ldr         r3, [sp, #0x14]
  03824	e283200c	 add         r2, r3, #0xC
  03828	e5913000	 ldr         r3, [r1]
  0382c	e5823000	 str         r3, [r2]

; 1779 :         m_nScreenWidth  = m_nScreenWidthSave;

  03830	e59d3014	 ldr         r3, [sp, #0x14]
  03834	e283101c	 add         r1, r3, #0x1C
  03838	e59d3014	 ldr         r3, [sp, #0x14]
  0383c	e2832008	 add         r2, r3, #8
  03840	e5913000	 ldr         r3, [r1]
  03844	e5823000	 str         r3, [r2]

; 1780 :         break;

  03848	ea00000b	 b           |$LN3@DynRotate|
  0384c		 |$LN1@DynRotate|

; 1781 : 
; 1782 :     case DMDO_90:
; 1783 :     case DMDO_270:
; 1784 :         m_nScreenHeight = m_nScreenWidthSave;

  0384c	e59d3014	 ldr         r3, [sp, #0x14]
  03850	e283101c	 add         r1, r3, #0x1C
  03854	e59d3014	 ldr         r3, [sp, #0x14]
  03858	e283200c	 add         r2, r3, #0xC
  0385c	e5913000	 ldr         r3, [r1]
  03860	e5823000	 str         r3, [r2]

; 1785 :         m_nScreenWidth  = m_nScreenHeightSave;

  03864	e59d3014	 ldr         r3, [sp, #0x14]
  03868	e2831020	 add         r1, r3, #0x20
  0386c	e59d3014	 ldr         r3, [sp, #0x14]
  03870	e2832008	 add         r2, r3, #8
  03874	e5913000	 ldr         r3, [r1]
  03878	e5823000	 str         r3, [r2]
  0387c		 |$LN3@DynRotate|

; 1786 :         break;
; 1787 :     }
; 1788 : 
; 1789 :     m_pMode->width  = m_nScreenWidth;

  0387c	e59d3014	 ldr         r3, [sp, #0x14]
  03880	e2831008	 add         r1, r3, #8
  03884	e59d3014	 ldr         r3, [sp, #0x14]
  03888	e2833010	 add         r3, r3, #0x10
  0388c	e5933000	 ldr         r3, [r3]
  03890	e2832004	 add         r2, r3, #4
  03894	e5913000	 ldr         r3, [r1]
  03898	e5823000	 str         r3, [r2]

; 1790 :     m_pMode->height = m_nScreenHeight;

  0389c	e59d3014	 ldr         r3, [sp, #0x14]
  038a0	e283100c	 add         r1, r3, #0xC
  038a4	e59d3014	 ldr         r3, [sp, #0x14]
  038a8	e2833010	 add         r3, r3, #0x10
  038ac	e5933000	 ldr         r3, [r3]
  038b0	e2832008	 add         r2, r3, #8
  038b4	e5913000	 ldr         r3, [r1]
  038b8	e5823000	 str         r3, [r2]

; 1791 :     pSurf->SetRotation(m_nScreenWidth, m_nScreenHeight, angle);

  038bc	e59d3018	 ldr         r3, [sp, #0x18]
  038c0	e59d2014	 ldr         r2, [sp, #0x14]
  038c4	e282200c	 add         r2, r2, #0xC
  038c8	e5922000	 ldr         r2, [r2]
  038cc	e59d1014	 ldr         r1, [sp, #0x14]
  038d0	e2811008	 add         r1, r1, #8
  038d4	e5911000	 ldr         r1, [r1]
  038d8	e59d0000	 ldr         r0, [sp]
  038dc	eb000000	 bl          |?SetRotation@GPESurf@@QAAXHHH@Z|

; 1792 : 
; 1793 :     CursorOn();

  038e0	e59d0014	 ldr         r0, [sp, #0x14]
  038e4	eb000000	 bl          |?CursorOn@SA2Video@@QAAXXZ|

; 1794 : 
; 1795 :     return DISP_CHANGE_SUCCESSFUL;

  038e8	e3a03000	 mov         r3, #0
  038ec	e58d3004	 str         r3, [sp, #4]
  038f0		 |$LN7@DynRotate|

; 1796 : }

  038f0	e59d0004	 ldr         r0, [sp, #4]
  038f4	e28dd00c	 add         sp, sp, #0xC
  038f8	e89d6000	 ldmia       sp, {sp, lr}
  038fc	e12fff1e	 bx          lr
  03900		 |$M39155|

			 ENDP  ; |?DynRotate@SA2Video@@QAAJH@Z|, SA2Video::DynRotate


  00128			 AREA	 |.pdata|, PDATA
|$T39169| DCD	|$LN30@CursorOn|
	DCD	0x40013804
; Function compile flags: /Odtp

  03900			 AREA	 |.text|, CODE, ARM

  03900		 |?CursorOn@SA2Video@@QAAXXZ| PROC	; SA2Video::CursorOn

; 1800 : {

  03900		 |$LN30@CursorOn|
  03900	e1a0c00d	 mov         r12, sp
  03904	e92d0001	 stmdb       sp!, {r0}
  03908	e92d5000	 stmdb       sp!, {r12, lr}
  0390c	e24dd034	 sub         sp, sp, #0x34
  03910		 |$M39166|

; 1801 :     USHORT * ptrScreen = (USHORT *)m_pPrimarySurface->Buffer();

  03910	e59d303c	 ldr         r3, [sp, #0x3C]
  03914	e2833004	 add         r3, r3, #4
  03918	e5930000	 ldr         r0, [r3]
  0391c	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03920	e58d0028	 str         r0, [sp, #0x28]
  03924	e59d3028	 ldr         r3, [sp, #0x28]
  03928	e58d3008	 str         r3, [sp, #8]

; 1802 :     USHORT * ptrLine;
; 1803 :     USHORT * cbsLine;
; 1804 : 
; 1805 :     if (!m_CursorForcedOff && !m_CursorDisabled && !m_CursorVisible)

  0392c	e59d303c	 ldr         r3, [sp, #0x3C]
  03930	e2833e2f	 add         r3, r3, #0x2F, 28
  03934	e5933000	 ldr         r3, [r3]
  03938	e3530000	 cmp         r3, #0
  0393c	1a000122	 bne         |$LN18@CursorOn|
  03940	e59d303c	 ldr         r3, [sp, #0x3C]
  03944	e2833fba	 add         r3, r3, #0xBA, 30
  03948	e5933000	 ldr         r3, [r3]
  0394c	e3530000	 cmp         r3, #0
  03950	1a00011d	 bne         |$LN18@CursorOn|
  03954	e59d303c	 ldr         r3, [sp, #0x3C]
  03958	e2833fbb	 add         r3, r3, #0xBB, 30
  0395c	e5933000	 ldr         r3, [r3]
  03960	e3530000	 cmp         r3, #0
  03964	1a000118	 bne         |$LN18@CursorOn|

; 1806 :     {
; 1807 :         RECTL cursorRectSave = m_CursorRect;

  03968	e59d303c	 ldr         r3, [sp, #0x3C]
  0396c	e2831fbf	 add         r1, r3, #0xBF, 30
  03970	e28d0010	 add         r0, sp, #0x10
  03974	e3a02010	 mov         r2, #0x10
  03978	eb000000	 bl          memcpy

; 1808 :         int   iRotate;
; 1809 : 
; 1810 :         RotateRectl(&m_CursorRect);

  0397c	e59d303c	 ldr         r3, [sp, #0x3C]
  03980	e2831fbf	 add         r1, r3, #0xBF, 30
  03984	e59d003c	 ldr         r0, [sp, #0x3C]
  03988	eb000000	 bl          |?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|

; 1811 :         for (int y = m_CursorRect.top; y < m_CursorRect.bottom; y++)

  0398c	e59d303c	 ldr         r3, [sp, #0x3C]
  03990	e2833c03	 add         r3, r3, #3, 24
  03994	e5933000	 ldr         r3, [r3]
  03998	e58d3020	 str         r3, [sp, #0x20]
  0399c	ea000002	 b           |$LN17@CursorOn|
  039a0		 |$LN16@CursorOn|
  039a0	e59d3020	 ldr         r3, [sp, #0x20]
  039a4	e2833001	 add         r3, r3, #1
  039a8	e58d3020	 str         r3, [sp, #0x20]
  039ac		 |$LN17@CursorOn|
  039ac	e59d303c	 ldr         r3, [sp, #0x3C]
  039b0	e2833fc2	 add         r3, r3, #0xC2, 30
  039b4	e59d2020	 ldr         r2, [sp, #0x20]
  039b8	e5933000	 ldr         r3, [r3]
  039bc	e1520003	 cmp         r2, r3
  039c0	aa0000f8	 bge         |$LN15@CursorOn|

; 1812 :         {
; 1813 :             if (y < 0)

  039c4	e59d3020	 ldr         r3, [sp, #0x20]
  039c8	e3530000	 cmp         r3, #0
  039cc	aa000000	 bge         |$LN14@CursorOn|

; 1814 :             {
; 1815 :                 continue;

  039d0	eafffff2	 b           |$LN16@CursorOn|
  039d4		 |$LN14@CursorOn|

; 1816 :             }
; 1817 :             if (y >= m_nScreenHeightSave)

  039d4	e59d303c	 ldr         r3, [sp, #0x3C]
  039d8	e2833020	 add         r3, r3, #0x20
  039dc	e59d2020	 ldr         r2, [sp, #0x20]
  039e0	e5933000	 ldr         r3, [r3]
  039e4	e1520003	 cmp         r2, r3
  039e8	ba000000	 blt         |$LN13@CursorOn|

; 1818 :             {
; 1819 :                 break;

  039ec	ea0000ed	 b           |$LN15@CursorOn|
  039f0		 |$LN13@CursorOn|

; 1820 :             }
; 1821 : 
; 1822 :             ptrLine = &ptrScreen[y * m_pPrimarySurface->Stride() / 2];

  039f0	e59d303c	 ldr         r3, [sp, #0x3C]
  039f4	e2833004	 add         r3, r3, #4
  039f8	e5930000	 ldr         r0, [r3]
  039fc	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  03a00	e58d002c	 str         r0, [sp, #0x2C]
  03a04	e59d2020	 ldr         r2, [sp, #0x20]
  03a08	e59d302c	 ldr         r3, [sp, #0x2C]
  03a0c	e0010392	 mul         r1, r2, r3
  03a10	e3a00002	 mov         r0, #2
  03a14	eb000000	 bl          __rt_sdiv
  03a18	e3a03002	 mov         r3, #2
  03a1c	e0020390	 mul         r2, r0, r3
  03a20	e59d3008	 ldr         r3, [sp, #8]
  03a24	e0833002	 add         r3, r3, r2
  03a28	e58d3004	 str         r3, [sp, #4]

; 1823 :             cbsLine = &m_CursorBackingStore[(y - m_CursorRect.top) * m_CursorSize.x];

  03a2c	e59d303c	 ldr         r3, [sp, #0x3C]
  03a30	e2830fc3	 add         r0, r3, #0xC3, 30
  03a34	e59d303c	 ldr         r3, [sp, #0x3C]
  03a38	e2833c03	 add         r3, r3, #3, 24
  03a3c	e59d2020	 ldr         r2, [sp, #0x20]
  03a40	e5933000	 ldr         r3, [r3]
  03a44	e0421003	 sub         r1, r2, r3
  03a48	e59d303c	 ldr         r3, [sp, #0x3C]
  03a4c	e2833fbd	 add         r3, r3, #0xBD, 30
  03a50	e5933000	 ldr         r3, [r3]
  03a54	e0020391	 mul         r2, r1, r3
  03a58	e3a03002	 mov         r3, #2
  03a5c	e0030392	 mul         r3, r2, r3
  03a60	e0803003	 add         r3, r0, r3
  03a64	e58d3000	 str         r3, [sp]

; 1824 : 
; 1825 :             for (int x = m_CursorRect.left; x < m_CursorRect.right; x++)

  03a68	e59d303c	 ldr         r3, [sp, #0x3C]
  03a6c	e2833fbf	 add         r3, r3, #0xBF, 30
  03a70	e5933000	 ldr         r3, [r3]
  03a74	e58d3024	 str         r3, [sp, #0x24]
  03a78	ea000002	 b           |$LN12@CursorOn|
  03a7c		 |$LN11@CursorOn|
  03a7c	e59d3024	 ldr         r3, [sp, #0x24]
  03a80	e2833001	 add         r3, r3, #1
  03a84	e58d3024	 str         r3, [sp, #0x24]
  03a88		 |$LN12@CursorOn|
  03a88	e59d303c	 ldr         r3, [sp, #0x3C]
  03a8c	e2833fc1	 add         r3, r3, #0xC1, 30
  03a90	e59d2024	 ldr         r2, [sp, #0x24]
  03a94	e5933000	 ldr         r3, [r3]
  03a98	e1520003	 cmp         r2, r3
  03a9c	aa0000c0	 bge         |$LN10@CursorOn|

; 1826 :             {
; 1827 :                 if (x < 0)

  03aa0	e59d3024	 ldr         r3, [sp, #0x24]
  03aa4	e3530000	 cmp         r3, #0
  03aa8	aa000000	 bge         |$LN9@CursorOn|

; 1828 :                 {
; 1829 :                     continue;

  03aac	eafffff2	 b           |$LN11@CursorOn|
  03ab0		 |$LN9@CursorOn|

; 1830 :                 }
; 1831 :                 if (x >= m_nScreenWidthSave)

  03ab0	e59d303c	 ldr         r3, [sp, #0x3C]
  03ab4	e283301c	 add         r3, r3, #0x1C
  03ab8	e59d2024	 ldr         r2, [sp, #0x24]
  03abc	e5933000	 ldr         r3, [r3]
  03ac0	e1520003	 cmp         r2, r3
  03ac4	ba000000	 blt         |$LN8@CursorOn|

; 1832 :                 {
; 1833 :                     break;

  03ac8	ea0000b5	 b           |$LN10@CursorOn|
  03acc		 |$LN8@CursorOn|

; 1834 :                 }
; 1835 : 
; 1836 :                 // x' = x - m_CursorRect.left; y' = y - m_CursorRect.top;
; 1837 :                 // Width = m_CursorSize.x;   Height = m_CursorSize.y;
; 1838 :                 switch (m_iRotate)

  03acc	e59d303c	 ldr         r3, [sp, #0x3C]
  03ad0	e2833018	 add         r3, r3, #0x18
  03ad4	e5933000	 ldr         r3, [r3]
  03ad8	e58d3030	 str         r3, [sp, #0x30]
  03adc	e59d3030	 ldr         r3, [sp, #0x30]
  03ae0	e3530004	 cmp         r3, #4
  03ae4	8a000061	 bhi         |$LN1@CursorOn|
  03ae8	e59d2030	 ldr         r2, [sp, #0x30]
  03aec	e1a03102	 mov         r3, r2, lsl #2
  03af0	e083300f	 add         r3, r3, pc
  03af4	e5933004	 ldr         r3, [r3, #4]
  03af8	e08ff003	 add         pc, pc, r3
  03afc		 |$LN22@CursorOn|
  03afc		 |$LN21@CursorOn|
  03afc		 |$LN23@CursorOn|
  03afc	00000010	 DCD         0x10
  03b00		 |$LN24@CursorOn|
  03b00	00000054	 DCD         0x54
  03b04		 |$LN25@CursorOn|
  03b04	000000ac	 DCD         0xac
  03b08		 |$LN26@CursorOn|
  03b08	00000170	 DCD         0x170
  03b0c		 |$LN27@CursorOn|
  03b0c	00000118	 DCD         0x118
  03b10		 |$LN5@CursorOn|

; 1839 :                 {
; 1840 :                     case DMDO_0:
; 1841 :                         iRotate = (y - m_CursorRect.top)*m_CursorSize.x + x - m_CursorRect.left;

  03b10	e59d303c	 ldr         r3, [sp, #0x3C]
  03b14	e2833c03	 add         r3, r3, #3, 24
  03b18	e59d2020	 ldr         r2, [sp, #0x20]
  03b1c	e5933000	 ldr         r3, [r3]
  03b20	e0421003	 sub         r1, r2, r3
  03b24	e59d303c	 ldr         r3, [sp, #0x3C]
  03b28	e2833fbd	 add         r3, r3, #0xBD, 30
  03b2c	e5933000	 ldr         r3, [r3]
  03b30	e0020391	 mul         r2, r1, r3
  03b34	e59d3024	 ldr         r3, [sp, #0x24]
  03b38	e0822003	 add         r2, r2, r3
  03b3c	e59d303c	 ldr         r3, [sp, #0x3C]
  03b40	e2833fbf	 add         r3, r3, #0xBF, 30
  03b44	e5933000	 ldr         r3, [r3]
  03b48	e0423003	 sub         r3, r2, r3
  03b4c	e58d300c	 str         r3, [sp, #0xC]

; 1842 :                         break;

  03b50	ea000056	 b           |$LN6@CursorOn|
  03b54		 |$LN4@CursorOn|

; 1843 :                     case DMDO_90:
; 1844 :                         iRotate = (x - m_CursorRect.left)*m_CursorSize.x + m_CursorSize.y - 1 - (y - m_CursorRect.top);

  03b54	e59d303c	 ldr         r3, [sp, #0x3C]
  03b58	e2833fbf	 add         r3, r3, #0xBF, 30
  03b5c	e59d2024	 ldr         r2, [sp, #0x24]
  03b60	e5933000	 ldr         r3, [r3]
  03b64	e0421003	 sub         r1, r2, r3
  03b68	e59d303c	 ldr         r3, [sp, #0x3C]
  03b6c	e2833fbd	 add         r3, r3, #0xBD, 30
  03b70	e5933000	 ldr         r3, [r3]
  03b74	e0020391	 mul         r2, r1, r3
  03b78	e59d303c	 ldr         r3, [sp, #0x3C]
  03b7c	e2833fbe	 add         r3, r3, #0xBE, 30
  03b80	e5933000	 ldr         r3, [r3]
  03b84	e0823003	 add         r3, r2, r3
  03b88	e2431001	 sub         r1, r3, #1
  03b8c	e59d303c	 ldr         r3, [sp, #0x3C]
  03b90	e2833c03	 add         r3, r3, #3, 24
  03b94	e59d2020	 ldr         r2, [sp, #0x20]
  03b98	e5933000	 ldr         r3, [r3]
  03b9c	e0423003	 sub         r3, r2, r3
  03ba0	e0413003	 sub         r3, r1, r3
  03ba4	e58d300c	 str         r3, [sp, #0xC]

; 1845 :                         break;

  03ba8	ea000040	 b           |$LN6@CursorOn|
  03bac		 |$LN3@CursorOn|

; 1846 :                     case DMDO_180:
; 1847 :                         iRotate = (m_CursorSize.y - 1 - (y - m_CursorRect.top))*m_CursorSize.x + m_CursorSize.x - 1 - (x - m_CursorRect.left);

  03bac	e59d303c	 ldr         r3, [sp, #0x3C]
  03bb0	e2833fbe	 add         r3, r3, #0xBE, 30
  03bb4	e5933000	 ldr         r3, [r3]
  03bb8	e2431001	 sub         r1, r3, #1
  03bbc	e59d303c	 ldr         r3, [sp, #0x3C]
  03bc0	e2833c03	 add         r3, r3, #3, 24
  03bc4	e59d2020	 ldr         r2, [sp, #0x20]
  03bc8	e5933000	 ldr         r3, [r3]
  03bcc	e0423003	 sub         r3, r2, r3
  03bd0	e0411003	 sub         r1, r1, r3
  03bd4	e59d303c	 ldr         r3, [sp, #0x3C]
  03bd8	e2833fbd	 add         r3, r3, #0xBD, 30
  03bdc	e5933000	 ldr         r3, [r3]
  03be0	e0020391	 mul         r2, r1, r3
  03be4	e59d303c	 ldr         r3, [sp, #0x3C]
  03be8	e2833fbd	 add         r3, r3, #0xBD, 30
  03bec	e5933000	 ldr         r3, [r3]
  03bf0	e0823003	 add         r3, r2, r3
  03bf4	e2431001	 sub         r1, r3, #1
  03bf8	e59d303c	 ldr         r3, [sp, #0x3C]
  03bfc	e2833fbf	 add         r3, r3, #0xBF, 30
  03c00	e59d2024	 ldr         r2, [sp, #0x24]
  03c04	e5933000	 ldr         r3, [r3]
  03c08	e0423003	 sub         r3, r2, r3
  03c0c	e0413003	 sub         r3, r1, r3
  03c10	e58d300c	 str         r3, [sp, #0xC]

; 1848 :                         break;

  03c14	ea000025	 b           |$LN6@CursorOn|
  03c18		 |$LN2@CursorOn|

; 1849 :                     case DMDO_270:
; 1850 :                         iRotate = (m_CursorSize.x -1 - (x - m_CursorRect.left))*m_CursorSize.x + y - m_CursorRect.top;

  03c18	e59d303c	 ldr         r3, [sp, #0x3C]
  03c1c	e2833fbd	 add         r3, r3, #0xBD, 30
  03c20	e5933000	 ldr         r3, [r3]
  03c24	e2431001	 sub         r1, r3, #1
  03c28	e59d303c	 ldr         r3, [sp, #0x3C]
  03c2c	e2833fbf	 add         r3, r3, #0xBF, 30
  03c30	e59d2024	 ldr         r2, [sp, #0x24]
  03c34	e5933000	 ldr         r3, [r3]
  03c38	e0423003	 sub         r3, r2, r3
  03c3c	e0411003	 sub         r1, r1, r3
  03c40	e59d303c	 ldr         r3, [sp, #0x3C]
  03c44	e2833fbd	 add         r3, r3, #0xBD, 30
  03c48	e5933000	 ldr         r3, [r3]
  03c4c	e0020391	 mul         r2, r1, r3
  03c50	e59d3020	 ldr         r3, [sp, #0x20]
  03c54	e0822003	 add         r2, r2, r3
  03c58	e59d303c	 ldr         r3, [sp, #0x3C]
  03c5c	e2833c03	 add         r3, r3, #3, 24
  03c60	e5933000	 ldr         r3, [r3]
  03c64	e0423003	 sub         r3, r2, r3
  03c68	e58d300c	 str         r3, [sp, #0xC]

; 1851 :                         break;

  03c6c	ea00000f	 b           |$LN6@CursorOn|
  03c70		 |$LN1@CursorOn|

; 1852 :                     default:
; 1853 :                         iRotate = (y - m_CursorRect.top)*m_CursorSize.x + x - m_CursorRect.left;

  03c70	e59d303c	 ldr         r3, [sp, #0x3C]
  03c74	e2833c03	 add         r3, r3, #3, 24
  03c78	e59d2020	 ldr         r2, [sp, #0x20]
  03c7c	e5933000	 ldr         r3, [r3]
  03c80	e0421003	 sub         r1, r2, r3
  03c84	e59d303c	 ldr         r3, [sp, #0x3C]
  03c88	e2833fbd	 add         r3, r3, #0xBD, 30
  03c8c	e5933000	 ldr         r3, [r3]
  03c90	e0020391	 mul         r2, r1, r3
  03c94	e59d3024	 ldr         r3, [sp, #0x24]
  03c98	e0822003	 add         r2, r2, r3
  03c9c	e59d303c	 ldr         r3, [sp, #0x3C]
  03ca0	e2833fbf	 add         r3, r3, #0xBF, 30
  03ca4	e5933000	 ldr         r3, [r3]
  03ca8	e0423003	 sub         r3, r2, r3
  03cac	e58d300c	 str         r3, [sp, #0xC]
  03cb0		 |$LN6@CursorOn|

; 1854 :                         break;
; 1855 :                 }
; 1856 : 
; 1857 :                 cbsLine[x - m_CursorRect.left] = ptrLine[x];

  03cb0	e59d1024	 ldr         r1, [sp, #0x24]
  03cb4	e3a03002	 mov         r3, #2
  03cb8	e0020391	 mul         r2, r1, r3
  03cbc	e59d3004	 ldr         r3, [sp, #4]
  03cc0	e0830002	 add         r0, r3, r2
  03cc4	e59d303c	 ldr         r3, [sp, #0x3C]
  03cc8	e2833fbf	 add         r3, r3, #0xBF, 30
  03ccc	e59d2024	 ldr         r2, [sp, #0x24]
  03cd0	e5933000	 ldr         r3, [r3]
  03cd4	e0421003	 sub         r1, r2, r3
  03cd8	e3a03002	 mov         r3, #2
  03cdc	e0020391	 mul         r2, r1, r3
  03ce0	e59d3000	 ldr         r3, [sp]
  03ce4	e0832002	 add         r2, r3, r2
  03ce8	e1d030b0	 ldrh        r3, [r0]
  03cec	e1c230b0	 strh        r3, [r2]

; 1858 :                 ptrLine[x] &= gCursorMask[iRotate];

  03cf0	e59d1024	 ldr         r1, [sp, #0x24]
  03cf4	e3a03002	 mov         r3, #2
  03cf8	e0020391	 mul         r2, r1, r3
  03cfc	e59d3004	 ldr         r3, [sp, #4]
  03d00	e0830002	 add         r0, r3, r2
  03d04	e59d100c	 ldr         r1, [sp, #0xC]
  03d08	e3a03002	 mov         r3, #2
  03d0c	e0020391	 mul         r2, r1, r3
  03d10	e59f30c4	 ldr         r3, [pc, #0xC4]
  03d14	e0833002	 add         r3, r3, r2
  03d18	e1d330b0	 ldrh        r3, [r3]
  03d1c	e1a02003	 mov         r2, r3
  03d20	e1d030b0	 ldrh        r3, [r0]
  03d24	e0030002	 and         r0, r3, r2
  03d28	e59d1024	 ldr         r1, [sp, #0x24]
  03d2c	e3a03002	 mov         r3, #2
  03d30	e0020391	 mul         r2, r1, r3
  03d34	e59d3004	 ldr         r3, [sp, #4]
  03d38	e0832002	 add         r2, r3, r2
  03d3c	e1a03800	 mov         r3, r0, lsl #16
  03d40	e1a03823	 mov         r3, r3, lsr #16
  03d44	e1c230b0	 strh        r3, [r2]

; 1859 :                 ptrLine[x] ^= gCursorData[iRotate];

  03d48	e59d1024	 ldr         r1, [sp, #0x24]
  03d4c	e3a03002	 mov         r3, #2
  03d50	e0020391	 mul         r2, r1, r3
  03d54	e59d3004	 ldr         r3, [sp, #4]
  03d58	e0830002	 add         r0, r3, r2
  03d5c	e59d100c	 ldr         r1, [sp, #0xC]
  03d60	e3a03002	 mov         r3, #2
  03d64	e0020391	 mul         r2, r1, r3
  03d68	e59f3068	 ldr         r3, [pc, #0x68]
  03d6c	e0833002	 add         r3, r3, r2
  03d70	e1d330b0	 ldrh        r3, [r3]
  03d74	e1a02003	 mov         r2, r3
  03d78	e1d030b0	 ldrh        r3, [r0]
  03d7c	e0230002	 eor         r0, r3, r2
  03d80	e59d1024	 ldr         r1, [sp, #0x24]
  03d84	e3a03002	 mov         r3, #2
  03d88	e0020391	 mul         r2, r1, r3
  03d8c	e59d3004	 ldr         r3, [sp, #4]
  03d90	e0832002	 add         r2, r3, r2
  03d94	e1a03800	 mov         r3, r0, lsl #16
  03d98	e1a03823	 mov         r3, r3, lsr #16
  03d9c	e1c230b0	 strh        r3, [r2]

; 1860 :             }

  03da0	eaffff35	 b           |$LN11@CursorOn|
  03da4		 |$LN10@CursorOn|

; 1861 :         }

  03da4	eafffefd	 b           |$LN16@CursorOn|
  03da8		 |$LN15@CursorOn|

; 1862 : 
; 1863 :         m_CursorRect    = cursorRectSave;

  03da8	e59d303c	 ldr         r3, [sp, #0x3C]
  03dac	e2830fbf	 add         r0, r3, #0xBF, 30
  03db0	e28d1010	 add         r1, sp, #0x10
  03db4	e3a02010	 mov         r2, #0x10
  03db8	eb000000	 bl          memcpy

; 1864 :         m_CursorVisible = TRUE;

  03dbc	e59d303c	 ldr         r3, [sp, #0x3C]
  03dc0	e2832fbb	 add         r2, r3, #0xBB, 30
  03dc4	e3a03001	 mov         r3, #1
  03dc8	e5823000	 str         r3, [r2]
  03dcc		 |$LN18@CursorOn|

; 1865 :     }
; 1866 : }

  03dcc	e28dd034	 add         sp, sp, #0x34
  03dd0	e89d6000	 ldmia       sp, {sp, lr}
  03dd4	e12fff1e	 bx          lr
  03dd8		 |$LN31@CursorOn|
  03dd8		 |$LN32@CursorOn|
  03dd8	00000000	 DCD         |gCursorData|
  03ddc		 |$LN33@CursorOn|
  03ddc	00000000	 DCD         |gCursorMask|
  03de0		 |$M39167|

			 ENDP  ; |?CursorOn@SA2Video@@QAAXXZ|, SA2Video::CursorOn


  00130			 AREA	 |.pdata|, PDATA
|$T39177| DCD	|$LN16@CursorOff|
	DCD	0x40009104
; Function compile flags: /Odtp

  03de0			 AREA	 |.text|, CODE, ARM

  03de0		 |?CursorOff@SA2Video@@QAAXXZ| PROC	; SA2Video::CursorOff

; 1870 : {

  03de0		 |$LN16@CursorOff|
  03de0	e1a0c00d	 mov         r12, sp
  03de4	e92d0001	 stmdb       sp!, {r0}
  03de8	e92d5000	 stmdb       sp!, {r12, lr}
  03dec	e24dd02c	 sub         sp, sp, #0x2C
  03df0		 |$M39174|

; 1871 :     USHORT * ptrScreen = (USHORT*)m_pPrimarySurface->Buffer();

  03df0	e59d3034	 ldr         r3, [sp, #0x34]
  03df4	e2833004	 add         r3, r3, #4
  03df8	e5930000	 ldr         r0, [r3]
  03dfc	eb000000	 bl          |?Buffer@GPESurf@@QAAPAXXZ|
  03e00	e58d0024	 str         r0, [sp, #0x24]
  03e04	e59d3024	 ldr         r3, [sp, #0x24]
  03e08	e58d3008	 str         r3, [sp, #8]

; 1872 :     USHORT * ptrLine;
; 1873 :     USHORT * cbsLine;
; 1874 : 
; 1875 :     if (!m_CursorForcedOff && !m_CursorDisabled && m_CursorVisible)

  03e0c	e59d3034	 ldr         r3, [sp, #0x34]
  03e10	e2833e2f	 add         r3, r3, #0x2F, 28
  03e14	e5933000	 ldr         r3, [r3]
  03e18	e3530000	 cmp         r3, #0
  03e1c	1a00007d	 bne         |$LN11@CursorOff|
  03e20	e59d3034	 ldr         r3, [sp, #0x34]
  03e24	e2833fba	 add         r3, r3, #0xBA, 30
  03e28	e5933000	 ldr         r3, [r3]
  03e2c	e3530000	 cmp         r3, #0
  03e30	1a000078	 bne         |$LN11@CursorOff|
  03e34	e59d3034	 ldr         r3, [sp, #0x34]
  03e38	e2833fbb	 add         r3, r3, #0xBB, 30
  03e3c	e5933000	 ldr         r3, [r3]
  03e40	e3530000	 cmp         r3, #0
  03e44	0a000073	 beq         |$LN11@CursorOff|

; 1876 :     {
; 1877 :         RECTL rSave = m_CursorRect;

  03e48	e59d3034	 ldr         r3, [sp, #0x34]
  03e4c	e2831fbf	 add         r1, r3, #0xBF, 30
  03e50	e28d000c	 add         r0, sp, #0xC
  03e54	e3a02010	 mov         r2, #0x10
  03e58	eb000000	 bl          memcpy

; 1878 :         RotateRectl(&m_CursorRect);

  03e5c	e59d3034	 ldr         r3, [sp, #0x34]
  03e60	e2831fbf	 add         r1, r3, #0xBF, 30
  03e64	e59d0034	 ldr         r0, [sp, #0x34]
  03e68	eb000000	 bl          |?RotateRectl@GPE@@QAAXPAU_RECTL@@@Z|

; 1879 : 
; 1880 :         for (int y = m_CursorRect.top; y < m_CursorRect.bottom; y++)

  03e6c	e59d3034	 ldr         r3, [sp, #0x34]
  03e70	e2833c03	 add         r3, r3, #3, 24
  03e74	e5933000	 ldr         r3, [r3]
  03e78	e58d301c	 str         r3, [sp, #0x1C]
  03e7c	ea000002	 b           |$LN10@CursorOff|
  03e80		 |$LN9@CursorOff|
  03e80	e59d301c	 ldr         r3, [sp, #0x1C]
  03e84	e2833001	 add         r3, r3, #1
  03e88	e58d301c	 str         r3, [sp, #0x1C]
  03e8c		 |$LN10@CursorOff|
  03e8c	e59d3034	 ldr         r3, [sp, #0x34]
  03e90	e2833fc2	 add         r3, r3, #0xC2, 30
  03e94	e59d201c	 ldr         r2, [sp, #0x1C]
  03e98	e5933000	 ldr         r3, [r3]
  03e9c	e1520003	 cmp         r2, r3
  03ea0	aa000053	 bge         |$LN8@CursorOff|

; 1881 :         {
; 1882 :             // clip to displayable screen area (top/bottom)
; 1883 :             if (y < 0)

  03ea4	e59d301c	 ldr         r3, [sp, #0x1C]
  03ea8	e3530000	 cmp         r3, #0
  03eac	aa000000	 bge         |$LN7@CursorOff|

; 1884 :             {
; 1885 :                 continue;

  03eb0	eafffff2	 b           |$LN9@CursorOff|
  03eb4		 |$LN7@CursorOff|

; 1886 :             }
; 1887 :             if (y >= m_nScreenHeightSave)

  03eb4	e59d3034	 ldr         r3, [sp, #0x34]
  03eb8	e2833020	 add         r3, r3, #0x20
  03ebc	e59d201c	 ldr         r2, [sp, #0x1C]
  03ec0	e5933000	 ldr         r3, [r3]
  03ec4	e1520003	 cmp         r2, r3
  03ec8	ba000000	 blt         |$LN6@CursorOff|

; 1888 :             {
; 1889 :                 break;

  03ecc	ea000048	 b           |$LN8@CursorOff|
  03ed0		 |$LN6@CursorOff|

; 1890 :             }
; 1891 : 
; 1892 :             ptrLine = &ptrScreen[y * m_pPrimarySurface->Stride() / 2];

  03ed0	e59d3034	 ldr         r3, [sp, #0x34]
  03ed4	e2833004	 add         r3, r3, #4
  03ed8	e5930000	 ldr         r0, [r3]
  03edc	eb000000	 bl          |?Stride@GPESurf@@QAAHXZ|
  03ee0	e58d0028	 str         r0, [sp, #0x28]
  03ee4	e59d201c	 ldr         r2, [sp, #0x1C]
  03ee8	e59d3028	 ldr         r3, [sp, #0x28]
  03eec	e0010392	 mul         r1, r2, r3
  03ef0	e3a00002	 mov         r0, #2
  03ef4	eb000000	 bl          __rt_sdiv
  03ef8	e3a03002	 mov         r3, #2
  03efc	e0020390	 mul         r2, r0, r3
  03f00	e59d3008	 ldr         r3, [sp, #8]
  03f04	e0833002	 add         r3, r3, r2
  03f08	e58d3004	 str         r3, [sp, #4]

; 1893 :             cbsLine = &m_CursorBackingStore[(y - m_CursorRect.top) * m_CursorSize.x];

  03f0c	e59d3034	 ldr         r3, [sp, #0x34]
  03f10	e2830fc3	 add         r0, r3, #0xC3, 30
  03f14	e59d3034	 ldr         r3, [sp, #0x34]
  03f18	e2833c03	 add         r3, r3, #3, 24
  03f1c	e59d201c	 ldr         r2, [sp, #0x1C]
  03f20	e5933000	 ldr         r3, [r3]
  03f24	e0421003	 sub         r1, r2, r3
  03f28	e59d3034	 ldr         r3, [sp, #0x34]
  03f2c	e2833fbd	 add         r3, r3, #0xBD, 30
  03f30	e5933000	 ldr         r3, [r3]
  03f34	e0020391	 mul         r2, r1, r3
  03f38	e3a03002	 mov         r3, #2
  03f3c	e0030392	 mul         r3, r2, r3
  03f40	e0803003	 add         r3, r0, r3
  03f44	e58d3000	 str         r3, [sp]

; 1894 : 
; 1895 :             for (int x = m_CursorRect.left; x < m_CursorRect.right; x++)

  03f48	e59d3034	 ldr         r3, [sp, #0x34]
  03f4c	e2833fbf	 add         r3, r3, #0xBF, 30
  03f50	e5933000	 ldr         r3, [r3]
  03f54	e58d3020	 str         r3, [sp, #0x20]
  03f58	ea000002	 b           |$LN5@CursorOff|
  03f5c		 |$LN4@CursorOff|
  03f5c	e59d3020	 ldr         r3, [sp, #0x20]
  03f60	e2833001	 add         r3, r3, #1
  03f64	e58d3020	 str         r3, [sp, #0x20]
  03f68		 |$LN5@CursorOff|
  03f68	e59d3034	 ldr         r3, [sp, #0x34]
  03f6c	e2833fc1	 add         r3, r3, #0xC1, 30
  03f70	e59d2020	 ldr         r2, [sp, #0x20]
  03f74	e5933000	 ldr         r3, [r3]
  03f78	e1520003	 cmp         r2, r3
  03f7c	aa00001b	 bge         |$LN3@CursorOff|

; 1896 :             {
; 1897 :                 // clip to displayable screen area (left/right)
; 1898 :                 if (x < 0)

  03f80	e59d3020	 ldr         r3, [sp, #0x20]
  03f84	e3530000	 cmp         r3, #0
  03f88	aa000000	 bge         |$LN2@CursorOff|

; 1899 :                 {
; 1900 :                     continue;

  03f8c	eafffff2	 b           |$LN4@CursorOff|
  03f90		 |$LN2@CursorOff|

; 1901 :                 }
; 1902 :                 if (x >= (int)m_nScreenWidthSave)

  03f90	e59d3034	 ldr         r3, [sp, #0x34]
  03f94	e283301c	 add         r3, r3, #0x1C
  03f98	e59d2020	 ldr         r2, [sp, #0x20]
  03f9c	e5933000	 ldr         r3, [r3]
  03fa0	e1520003	 cmp         r2, r3
  03fa4	ba000000	 blt         |$LN1@CursorOff|

; 1903 :                 {
; 1904 :                     break;

  03fa8	ea000010	 b           |$LN3@CursorOff|
  03fac		 |$LN1@CursorOff|

; 1905 :                 }
; 1906 : 
; 1907 :                 ptrLine[x] = cbsLine[x - m_CursorRect.left];

  03fac	e59d3034	 ldr         r3, [sp, #0x34]
  03fb0	e2833fbf	 add         r3, r3, #0xBF, 30
  03fb4	e59d2020	 ldr         r2, [sp, #0x20]
  03fb8	e5933000	 ldr         r3, [r3]
  03fbc	e0421003	 sub         r1, r2, r3
  03fc0	e3a03002	 mov         r3, #2
  03fc4	e0020391	 mul         r2, r1, r3
  03fc8	e59d3000	 ldr         r3, [sp]
  03fcc	e0830002	 add         r0, r3, r2
  03fd0	e59d1020	 ldr         r1, [sp, #0x20]
  03fd4	e3a03002	 mov         r3, #2
  03fd8	e0020391	 mul         r2, r1, r3
  03fdc	e59d3004	 ldr         r3, [sp, #4]
  03fe0	e0832002	 add         r2, r3, r2
  03fe4	e1d030b0	 ldrh        r3, [r0]
  03fe8	e1c230b0	 strh        r3, [r2]

; 1908 :             }

  03fec	eaffffda	 b           |$LN4@CursorOff|
  03ff0		 |$LN3@CursorOff|

; 1909 :         }

  03ff0	eaffffa2	 b           |$LN9@CursorOff|
  03ff4		 |$LN8@CursorOff|

; 1910 : 
; 1911 :         m_CursorRect = rSave;

  03ff4	e59d3034	 ldr         r3, [sp, #0x34]
  03ff8	e2830fbf	 add         r0, r3, #0xBF, 30
  03ffc	e28d100c	 add         r1, sp, #0xC
  04000	e3a02010	 mov         r2, #0x10
  04004	eb000000	 bl          memcpy

; 1912 :         m_CursorVisible = FALSE;

  04008	e59d3034	 ldr         r3, [sp, #0x34]
  0400c	e2832fbb	 add         r2, r3, #0xBB, 30
  04010	e3a03000	 mov         r3, #0
  04014	e5823000	 str         r3, [r2]
  04018		 |$LN11@CursorOff|

; 1913 :     }
; 1914 : }

  04018	e28dd02c	 add         sp, sp, #0x2C
  0401c	e89d6000	 ldmia       sp, {sp, lr}
  04020	e12fff1e	 bx          lr
  04024		 |$M39175|

			 ENDP  ; |?CursorOff@SA2Video@@QAAXXZ|, SA2Video::CursorOff

	END
