; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_ost.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|XllpOstConfigureTimer|
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_ost.c

  00000			 AREA	 |.pdata|, PDATA
|$T675|	DCD	|$LN13@XllpOstCon|
	DCD	0x40003a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpOstConfigureTimer| PROC

; 65   : {

  00000		 |$LN13@XllpOstCon|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M672|
  00004	e1a07002	 mov         r7, r2

; 66   : 
; 67   :     P_XLLP_OST_T        pOSTRegs = pOSTHandle->pOSTRegs;

  00008	e590e000	 ldr         lr, [r0]

; 68   :     P_XLLP_INTC_T       pINTCRegs = pOSTHandle->pINTCRegs;

  0000c	e5906004	 ldr         r6, [r0, #4]

; 69   :     P_XLLP_VUINT32_T    pOSTMatchReg;
; 70   :     XLLP_UINT32_T       ossrbit,
; 71   :                         oierbit,
; 72   :                         icmrbit;
; 73   : 
; 74   :     switch (matchreg)

  00010	e3510001	 cmp         r1, #1
  00014	0a00001f	 beq         |$LN5@XllpOstCon|
  00018	e3510002	 cmp         r1, #2
  0001c	0a000018	 beq         |$LN4@XllpOstCon|
  00020	e3510003	 cmp         r1, #3
  00024	0a000011	 beq         |$LN3@XllpOstCon|
  00028	e3510004	 cmp         r1, #4
  0002c	0a00000a	 beq         |$LN2@XllpOstCon|
  00030	e3510005	 cmp         r1, #5

; 75   :     {
; 76   :         default:
; 77   :         case MatchReg0:
; 78   :             ossrbit = XLLP_OSSR_M0;

  00034	13a00001	 movne       r0, #1

; 79   :             oierbit = XLLP_OIER_E0;

  00038	13a01001	 movne       r1, #1

; 80   :             icmrbit = XLLP_INTC_OSMR0;

  0003c	13a04301	 movne       r4, #1, 6

; 81   :             pOSTMatchReg = &(pOSTRegs->osmr0);

  00040	11a0500e	 movne       r5, lr
  00044	1a000017	 bne         |$LN7@XllpOstCon|

; 111  : 
; 112  : 		case MatchReg5:
; 113  :             ossrbit = XLLP_OSSR_M5;

  00048	e3a00020	 mov         r0, #0x20

; 114  :             oierbit = XLLP_OIER_E5;

  0004c	e3a01020	 mov         r1, #0x20

; 115  :             icmrbit = XLLP_INTC_OSMRXX_4;

  00050	e3a04080	 mov         r4, #0x80

; 116  :             pOSTMatchReg = &(pOSTRegs->osmr5);

  00054	e28e5084	 add         r5, lr, #0x84

; 117  :             break;

  00058	ea000012	 b           |$LN7@XllpOstCon|
  0005c		 |$LN2@XllpOstCon|

; 104  : 
; 105  : 		case MatchReg4:
; 106  :             ossrbit = XLLP_OSSR_M4;

  0005c	e3a00010	 mov         r0, #0x10

; 107  :             oierbit = XLLP_OIER_E4;

  00060	e3a01010	 mov         r1, #0x10

; 108  :             icmrbit = XLLP_INTC_OSMRXX_4;

  00064	e3a04080	 mov         r4, #0x80

; 109  :             pOSTMatchReg = &(pOSTRegs->osmr4);

  00068	e28e5080	 add         r5, lr, #0x80

; 110  :             break;

  0006c	ea00000d	 b           |$LN7@XllpOstCon|
  00070		 |$LN3@XllpOstCon|

; 97   : 
; 98   :         case MatchReg3:
; 99   :             ossrbit = XLLP_OSSR_M3;

  00070	e3a00008	 mov         r0, #8

; 100  :             oierbit = XLLP_OIER_E3;

  00074	e3a01008	 mov         r1, #8

; 101  :             icmrbit = XLLP_INTC_OSMR3;

  00078	e3a04202	 mov         r4, #2, 4

; 102  :             pOSTMatchReg = &(pOSTRegs->osmr3);

  0007c	e28e500c	 add         r5, lr, #0xC

; 103  :             break;

  00080	ea000008	 b           |$LN7@XllpOstCon|
  00084		 |$LN4@XllpOstCon|

; 89   :             break;
; 90   : 
; 91   :         case MatchReg2:
; 92   :             ossrbit = XLLP_OSSR_M2;

  00084	e3a00004	 mov         r0, #4

; 93   :             oierbit = XLLP_OIER_E2;

  00088	e3a01004	 mov         r1, #4

; 94   :             icmrbit = XLLP_INTC_OSMR2;

  0008c	e3a04201	 mov         r4, #1, 4

; 95   :             pOSTMatchReg = &(pOSTRegs->osmr2);

  00090	e28e5008	 add         r5, lr, #8

; 96   :             break;

  00094	ea000003	 b           |$LN7@XllpOstCon|
  00098		 |$LN5@XllpOstCon|

; 82   :             break;
; 83   : 
; 84   :         case MatchReg1:
; 85   :             ossrbit = XLLP_OSSR_M1;

  00098	e3a00002	 mov         r0, #2

; 86   :             oierbit = XLLP_OIER_E1;

  0009c	e3a01002	 mov         r1, #2

; 87   :             icmrbit = XLLP_INTC_OSMR1;

  000a0	e3a04302	 mov         r4, #2, 6

; 88   :             pOSTMatchReg = &(pOSTRegs->osmr1);

  000a4	e28e5004	 add         r5, lr, #4
  000a8		 |$LN7@XllpOstCon|
  000a8	e3e03c0f	 mvn         r3, #0xF, 24

; 118  :     }
; 119  : 
; 120  :     //
; 121  :     // Disable interrupts on the specified Match register
; 122  :     //
; 123  :     pOSTRegs->oier &= ~(oierbit | XLLP_OIER_RESERVED_BITS);

  000ac	e22330ff	 eor         r3, r3, #0xFF
  000b0	e1812003	 orr         r2, r1, r3
  000b4	e59e301c	 ldr         r3, [lr, #0x1C]

; 124  : 
; 125  :     //
; 126  :     // Clear any interrupt on the specified Match register
; 127  :     //
; 128  :     pOSTRegs->ossr = ossrbit; 

  000b8	e1c33002	 bic         r3, r3, r2
  000bc	e58e301c	 str         r3, [lr, #0x1C]
  000c0	e58e0014	 str         r0, [lr, #0x14]

; 129  : 
; 130  :     // 
; 131  : 	// Set up the match register to expire when the oscr0 reaches
; 132  :     // the next match interval.
; 133  : 	//
; 134  :     *pOSTMatchReg = matchvalue; 

  000c4	e5857000	 str         r7, [r5]

; 135  : 
; 136  :     //
; 137  :     // Enable the Match register interrupt on 
; 138  :     //
; 139  :     pOSTRegs->oier|= oierbit;

  000c8	e59e301c	 ldr         r3, [lr, #0x1C]

; 140  : 
; 141  :     //
; 142  :     // Enable the Match interrupt at the interrupt controller
; 143  :     //
; 144  :     pINTCRegs->icmr |= icmrbit; 

  000cc	e1833001	 orr         r3, r3, r1
  000d0	e58e301c	 str         r3, [lr, #0x1C]
  000d4	e5963004	 ldr         r3, [r6, #4]
  000d8	e1833004	 orr         r3, r3, r4
  000dc	e5863004	 str         r3, [r6, #4]

; 145  : 
; 146  :     return;
; 147  : 
; 148  : }

  000e0	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000e4	e12fff1e	 bx          lr
  000e8		 |$M673|

			 ENDP  ; |XllpOstConfigureTimer|

	EXPORT	|XllpOstConfigureMatchReg|

  00000			 AREA	 |.pdata|, PDATA
|$T687|	DCD	|$LN5@XllpOstCon@2|
	DCD	0x40000701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpOstConfigureMatchReg| PROC

; 177  : {

  00000		 |$LN5@XllpOstCon@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M684|

; 178  :     P_XLLP_OST_T        pOSTRegs = pOSTHandle->pOSTRegs;

  00004	e5903000	 ldr         r3, [r0]

; 179  :     XLLP_UINT32_T       matchvalue;
; 180  : 
; 181  :     //
; 182  :     // Compute the new match value to load
; 183  :     //
; 184  :     matchvalue = pOSTRegs->oscr0 + matchincrement;
; 185  : 
; 186  :     //
; 187  :     // Configure the timer to interrupt at that match value
; 188  :     //
; 189  :     XllpOstConfigureTimer (pOSTHandle, matchreg, matchvalue);

  00008	e5933010	 ldr         r3, [r3, #0x10]
  0000c	e0832002	 add         r2, r3, r2
  00010	eb000000	 bl          XllpOstConfigureTimer

; 190  : 
; 191  : }

  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$M685|

			 ENDP  ; |XllpOstConfigureMatchReg|


  00000			 AREA	 |.pdata|, PDATA
|$T704|	DCD	|$LN16@XllpOstDel|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpOstDelayTicks| PROC

; 251  : {    

  00000		 |$LN16@XllpOstDel|
  00000		 |$M701|

; 252  :     XLLP_UINT32_T    expireTime,
; 253  :                     time;
; 254  : 
; 255  :     time = pOstRegs->oscr0;

  00000	e5902010	 ldr         r2, [r0, #0x10]

; 256  : 	expireTime = time + ticks;

  00004	e0821001	 add         r1, r2, r1

; 257  : 
; 258  :     //
; 259  :     // Check if we wrapped on the expireTime
; 260  :     // and delay first part until wrap
; 261  :     //
; 262  : 	if (expireTime < time) 

  00008	e1510002	 cmp         r1, r2
  0000c	2a000002	 bcs         |$LL2@XllpOstDel|
  00010		 |$LL4@XllpOstDel|

; 263  :     {
; 264  : 		while (time < pOstRegs->oscr0);

  00010	e5903010	 ldr         r3, [r0, #0x10]
  00014	e1520003	 cmp         r2, r3
  00018	3afffffc	 bcc         |$LL4@XllpOstDel|
  0001c		 |$LL2@XllpOstDel|

; 265  : 	}
; 266  : 	while (pOstRegs->oscr0 <= expireTime);

  0001c	e5903010	 ldr         r3, [r0, #0x10]
  00020	e1530001	 cmp         r3, r1
  00024	9afffffc	 bls         |$LL2@XllpOstDel|

; 267  :     return;
; 268  : }

  00028	e12fff1e	 bx          lr
  0002c		 |$M702|

			 ENDP  ; |XllpOstDelayTicks|

	EXPORT	|XllpOstDelayMicroSeconds|

  00000			 AREA	 |.pdata|, PDATA
|$T731|	DCD	|$LN18@XllpOstDel@2|
	DCD	0x40000c00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpOstDelayMicroSeconds| PROC

; 207  : {

  00000		 |$LN18@XllpOstDel@2|
  00000		 |$M728|

; 208  :     XLLP_UINT32_T    ticks;
; 209  : 
; 210  :     ticks = microseconds * XLLP_OST_TICKS_US;  // approx. 3 ticks per microsecond. 
; 211  :     XllpOstDelayTicks (pOstRegs, ticks);

  00000	e5902010	 ldr         r2, [r0, #0x10]
  00004	e0813081	 add         r3, r1, r1, lsl #1
  00008	e0831002	 add         r1, r3, r2
  0000c	e1510002	 cmp         r1, r2
  00010	2a000002	 bcs         |$LL4@XllpOstDel@2|
  00014		 |$LL6@XllpOstDel@2|
  00014	e5903010	 ldr         r3, [r0, #0x10]
  00018	e1520003	 cmp         r2, r3
  0001c	3afffffc	 bcc         |$LL6@XllpOstDel@2|
  00020		 |$LL4@XllpOstDel@2|
  00020	e5903010	 ldr         r3, [r0, #0x10]
  00024	e1530001	 cmp         r3, r1
  00028	9afffffc	 bls         |$LL4@XllpOstDel@2|

; 212  : 
; 213  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$M729|

			 ENDP  ; |XllpOstDelayMicroSeconds|

	EXPORT	|XllpOstDelayMilliSeconds|

  00000			 AREA	 |.pdata|, PDATA
|$T758|	DCD	|$LN18@XllpOstDel@3|
	DCD	0x40000f01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpOstDelayMilliSeconds| PROC

; 229  : {

  00000		 |$LN18@XllpOstDel@3|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M755|

; 230  :     XLLP_UINT32_T    ticks;
; 231  : 
; 232  :     ticks = milliseconds * XLLP_OST_TICKS_MS;
; 233  :     XllpOstDelayTicks (pOstRegs, ticks);

  00004	e5902010	 ldr         r2, [r0, #0x10]
  00008	e3a03b03	 mov         r3, #3, 22
  0000c	e38330b2	 orr         r3, r3, #0xB2
  00010	e02e2391	 mla         lr, r1, r3, r2
  00014	e15e0002	 cmp         lr, r2
  00018	2a000002	 bcs         |$LL4@XllpOstDel@3|
  0001c		 |$LL6@XllpOstDel@3|
  0001c	e5903010	 ldr         r3, [r0, #0x10]
  00020	e1520003	 cmp         r2, r3
  00024	3afffffc	 bcc         |$LL6@XllpOstDel@3|
  00028		 |$LL4@XllpOstDel@3|
  00028	e5903010	 ldr         r3, [r0, #0x10]
  0002c	e153000e	 cmp         r3, lr
  00030	9afffffc	 bls         |$LL4@XllpOstDel@3|

; 234  :     return;
; 235  : }

  00034	e49de004	 ldr         lr, [sp], #4
  00038	e12fff1e	 bx          lr
  0003c		 |$M756|

			 ENDP  ; |XllpOstDelayMilliSeconds|

	END
