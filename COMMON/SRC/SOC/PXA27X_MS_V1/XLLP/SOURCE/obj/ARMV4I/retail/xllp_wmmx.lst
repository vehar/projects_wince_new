ARM macroassembler      Page:1 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;****************************************************************************** 
   14 00000000          ; Copyright 2002-2003 Intel Corporation All Rights Reserved. 
   15 00000000          ; 
   16 00000000          ;** Portions of the source code contained or described herein and all documents 
   17 00000000          ;** related to such source code (Material) are owned by Intel Corporation 
   18 00000000          ;** or its suppliers or licensors and is licensed by Microsoft Corporation for distribution.   
   19 00000000          ;** Title to the Material remains with Intel Corporation or its suppliers and licensors.  
   20 00000000          ;** Use of the Materials is subject to the terms of the Microsoft license agreement which accompanied the Materials.   
   21 00000000          ;** No other license under any patent, copyright, trade secret or other intellectual 
   22 00000000          ;** property right is granted to or conferred upon you by disclosure or 
   23 00000000          ;** delivery of the Materials, either expressly, by implication, inducement, 
   24 00000000          ;** estoppel or otherwise  
   25 00000000          ;** Some portion of the Materials may be copyrighted by Microsoft Corporation. 
   26 00000000          ; 
   27 00000000          ;********************************************************************************* 
   28 00000000          ; 
   29 00000000          ;  FILENAME:       xllp_wmmx.s 
   30 00000000          ; 
   31 00000000          ;  PURPOSE:        Provides assembly level code to support thread level 
   32 00000000          ;                  context saving and restoration for the 
   33 00000000          ;                  Bulverde processor's WMMX registers. 
   34 00000000          ; 
   35 00000000          ;  LAST MODIFIED:  26-Jul-2005 AAG - fix the LDC/STC - need to use p1 instead of p0 
   36 00000000          ;                  22-Nov-2004 AAG  - changed load/store to wldr/wstr equivalent, but used LDC/STC to make 
   37 00000000          ;              code assemble one more tool chains.  also change tmcr/tmrc to generic 
   38 00000000          ;              mcr/mrc to allow assembly on more tool chains. 
   39 00000000          ; 
   40 00000000          ;****************************************************************************** 
   41 00000000          ; 
   42 00000000          ; NOTES: 
   43 00000000          ; 
   44 00000000          ;    None. 
   45 00000000          ; 
   46 00000000          ;****************************************************************************** 
   47 00000000            
   48                           AREA    |.text|, CODE, READONLY, ALIGN=5        ; Align =5 required for "ALIGN 32" to work 
   49 00000000          ; 
   50 00000000          ; List of Low Level Init functions in this source code include: 
   51 00000000          ; 
   52 00000000                  EXPORT Xllp_Read_CoProc_Access 
   53 00000000                  EXPORT Xllp_Set_CoProc_Access 
   54 00000000                  EXPORT Xllp_Save_WMMX_Regs 
   55 00000000                  EXPORT Xllp_Restore_WMMX_Regs 
   56 00000000                  EXPORT Xllp_Store_All_WMMX_Regs 
   57 00000000                  EXPORT Xllp_Restore_All_WMMX_Regs 
   58 00000000            
   59 00000000            
   60 00000000          ;****************************************************************************** 
   61 00000000          ; 
   62 00000000          ;       *************************** 
   63 00000000          ;       *                         * 
   64 00000000          ;       * Xllp_Read_CoProc_Access * 
   65 00000000          ;       *                         * 
   66 00000000          ;       *************************** 
   67 00000000          ; 
   68 00000000          ; This routine is used to return the coprocessor access bits located in 
   69 00000000          ; coprocessor 15, register 15.  It returns it to the location specified in 
   70 00000000          ; r0 
   71 00000000          ; 
   72 00000000          ;****************************************************************************** 
   73 00000000          Xllp_Read_CoProc_Access  FUNCTION 
   74 00000000            
   75 00000000 e92d4007         stmdb   sp!, {r0 - r2, r14} 
   76 00000004            
   77 00000004 ee1f1f11         mrc     p15, 0, r1, c15, c1, 0    ;Get Reg15 of CP15 for Access to CP0 
   78 00000008            
   79 00000008                  ;CPWAIT  r2                       ;Now 'stall' so the value can have time to be read 
   80 00000008 ee122f10         MRC     P15, 0, r2, C2, C0, 0     ; arbitrary read of CP15 
   81 0000000c e1a02002         MOV     r2, r2                    ; wait for it (foward dependency) 
   82 00000010 e24ff004         SUB     PC, PC, #4                ; branch to next instruction 
   83 00000014            
   84 00000014 e5801000         str  r1, [r0] 
   85 00000018 e8bd4007         ldmia   sp!, {r0 - r2, r14} 
   86 0000001c            
   87 0000001c                  IF Interworking :LOR: Thumbing 
   88 0000001c e12fff1e             bx  lr 
   89 00000020                  ELSE 
   91 00000020                  ENDIF ; IF Interworking :LOR: Thumbing 
   92 00000020            
   93 00000020                  ENDFUNC 
   94 00000020            
   95 00000020            
   96 00000020          ;****************************************************************************** 
   97 00000020          ; 
   98 00000020          ;       *************************** 
   99 00000020          ;       *                         * 
  100 00000020          ;       * Xllp_Set_CoProc_Access  * 
  101 00000020          ;       *                         * 
  102 00000020          ;       *************************** 
  103 00000020          ; 
  104 00000020          ; 
  105 00000020          ; This routine enables the access bits to Coprocessors 0 & 1 
  106 00000020          ; 
  107 00000020          ; Uses R0, R1. R2 
  108 00000020          ; 
  109 00000020          ;****************************************************************************** 
  110 00000020          Xllp_Set_CoProc_Access  FUNCTION 
  111 00000020            
  112 00000020 e92d4007         stmdb   sp!, {r0 - r2, r14} 
  113 00000024            
  114 00000024 ee1f0f11         mrc     p15, 0, r0, c15, c1, 0    ;Get Reg15 of CP15 for Access to CP0 
  115 00000028 e3a01003         mov     r1, #0x3                  ;Load R2 with mask for setting lowest bit 
  116 0000002c e1802001         orr     r2, r0, r1                ;OR current value with 1 to set the lowest bit 
  117 00000030 ee0f2f11         mcr     p15, 0, r2, c15, c1, 0    ;Now set the value back into R15 of CP15 
  118 00000034            
  119 00000034                  ;CPWAIT  r0                       ;Now 'stall' so the value can have time to be written 
  120 00000034 ee120f10         MRC     P15, 0, r0, C2, C0, 0     ; arbitrary read of CP15 
  121 00000038 e1a00000         MOV     r0, r0                    ; wait for it (foward dependency) 
  122 0000003c e24ff004         SUB     PC, PC, #4                ; branch to next instruction 
  123 00000040            
  124 00000040 e8bd4007         ldmia   sp!, {r0 - r2, r14} 
  125 00000044            
  126 00000044                  IF Interworking :LOR: Thumbing 
  127 00000044 e12fff1e             bx  lr 
  128 00000048                  ELSE 
  130 00000048                  ENDIF ; IF Interworking :LOR: Thumbing 
  131 00000048            
  132 00000048                  ENDFUNC 
  133 00000048            
  134 00000048            
  135 00000048          ;****************************************************************************** 
  136 00000048          ; 
  137 00000048          ;       *************************** 
  138 00000048          ;       *                         * 
  139 00000048          ;       * Xllp_Save_WMMX_Regs     * 
  140 00000048          ;       *                         * 
  141 00000048          ;       *************************** 
  142 00000048          ; 
  143 00000048          ; 
  144 00000048          ; This routine is expected to be the entry point for the "SaveAll".  It checks 
  145 00000048          ; the CUP and MUP bits in the control register to see if we need to save, if it 
  146 00000048          ; is unnecessary, then we simply dump out of the routine.  If it is necessary, 
  147 00000048          ; it sets a flag at the start of the save area and calls "SaveAll" to save all 
  148 00000048          ; the WMMX registers. 
  149 00000048          ; 
  150 00000048          ; Uses r0, - R0 contains a pointer to the alloced memory buffer of 8 bytes long 
  151 00000048          ; 
  152 00000048          ;****************************************************************************** 
  153 00000048          Xllp_Save_WMMX_Regs   FUNCTION 
  154 00000048            
  155 00000048 e92d401f         stmdb   sp!, {r0 - r4, r14}         ;Store registers so we don't stomp anything (INC LR) 
  156 0000004c            
  157 0000004c e1a04000         mov     r4, r0                    ;Save R0 to R4, so pointer value doesn't get killed by CPWAIT 
  158 00000050            
  159 00000050 ee111110         mrc     p1, 0, r1, c1, c0, 0      ;Grab the CUP & MUP bits in CP1, Reg1 
  160 00000054            
  161 00000054                  ;CPWAIT  r0                       ;Now 'stall' so the value can have time to be written 
  162 00000054 ee120f10         MRC     P15, 0, r0, C2, C0, 0     ; arbitrary read of CP15 
  163 00000058 e1a00000         MOV     r0, r0                    ; wait for it (foward dependency) 
  164 0000005c e24ff004         SUB     PC, PC, #4                ; branch to next instruction 
  165 00000060            
  166 00000060 e2111003         ands    r1, r1, #0x3              ;We only are concerned with the lowest 2 bits 
  167 00000064            
  168 00000064                  ;if flag == 0 then no change since last save, skip save functionality 
  169 00000064 0a000003         beq  Finish_Save 
  170 00000068            
  171 00000068 e3a00001         mov     r0, #0x1                  ;Set a flag in the memory area indicating we have actually SAVED 
  172 0000006c e4840004         str     r0, [r4], #4              ;Save & increment pointer 
  173 00000070            
  174 00000070                  ; Now branch to the 'save' function, R0 = pointer to save area 
  175 00000070 e1a00004         mov     r0, r4 
  176 00000074 eb000008         bl      Xllp_Store_All_WMMX_Regs 
  177 00000078            
  178 00000078          Finish_Save 
  179 00000078 e8bd401f         ldmia   sp!, {r0 - r4, r14}         ;Now restore the regsiters we stacked3 
  180 0000007c            
  181 0000007c                  IF Interworking :LOR: Thumbing 
  182 0000007c e12fff1e             bx  lr 
  183 00000080                  ELSE 
  185 00000080                  ENDIF ; IF Interworking :LOR: Thumbing 
  186 00000080            
  187 00000080            
  188 00000080                  ENDFUNC 
  189 00000080            
  190 00000080          ;****************************************************************************** 
  191 00000080          ; 
  192 00000080          ;       *************************** 
  193 00000080          ;       *                         * 
  194 00000080          ;       * Xllp_Restore_WMMX_Regs  * 
  195 00000080          ;       *                         * 
  196 00000080          ;       *************************** 
  197 00000080          ; 
  198 00000080          ; This function is used to restore the WMMX registers.  It checks the flags saved in 
  199 00000080          ; the beginning of the saved area to see if a restore is necessary.  If it is unnecessary 
  200 00000080          ; the routine dumps out, otherwise it calls the "RestoreAll" function. 
  201 00000080          ; 
  202 00000080          ;       Uses r0 - pointer to the memory buffer containing the WMMX saved area 
  203 00000080          ; 
  204 00000080          ;****************************************************************************** 
  205 00000080          Xllp_Restore_WMMX_Regs   FUNCTION 
  206 00000080            
  207 00000080 e92d401f         stmdb   sp!, {r0 - r4, r14}         ;stack the registers used, so don't munge anything 
  208 00000084            
  209 00000084 e4901004         ldr     r1, [r0], #4              ;Load the first 4 bytes containing 'if saving' flag 
  210 00000088 e3510000         cmp     r1, #0 
  211 0000008c 0a000000         beq     Skip_Restore 
  212 00000090            
  213 00000090                  ;Branch to the 'Restore' Function, R0= pointer to save/restore memory area 
  214 00000090 eb000022         bl      Xllp_Restore_All_WMMX_Regs 
  215 00000094            
  216 00000094          Skip_Restore 
  217 00000094 e8bd401f         ldmia     sp!, {r0 - r4, r14} 
  218 00000098            
  219 00000098                  IF Interworking :LOR: Thumbing 
  220 00000098 e12fff1e             bx  lr 
  221 0000009c                  ELSE 
  223 0000009c                  ENDIF ; IF Interworking :LOR: Thumbing 
  224 0000009c            
  225 0000009c            
  226 0000009c                  ENDFUNC 
  227 0000009c            
  228 0000009c            
  229 0000009c          ;****************************************************************************** 
  230 0000009c          ; 
  231 0000009c          ;       ******************************* 
  232 0000009c          ;       *                             * 
  233 0000009c          ;       * Xllp_Store_All_WMMX_Regs    * 
  234 0000009c          ;       *                             * 
  235 0000009c          ;       ******************************* 
  236 0000009c          ; 
  237 0000009c          ; 
  238 0000009c          ; 
  239 0000009c          ; Stores all WMMX Registers as listed below 
  240 0000009c          ; Saving: 
  241 0000009c          ;  CP0, R0 - 15 
  242 0000009c          ;  CP1, R2, R3, R8 - 11 
  243 0000009c          ; 
  244 0000009c          ;  NOTE:  This routine was written to optimize both the read performance and 
  245 0000009c          ;  the register usage.  It was designed against the EAS stated instruction 
  246 0000009c          ;  latencies for tmrc and tmrrc instructions in hopes of keeping the 
  247 0000009c          ;  connection between the coprocessor and core maximized with respect to bandwitdh. 
  248 0000009c          ;  As such, the registes are not saved in a completely linear fashion, they are 
  249 0000009c          ;  interleaved.  As a result, the restore must treat these like a stack and pop 
  250 0000009c          ;  off the registers in a similar order. 
  251 0000009c          ; 
  252 0000009c          ;****************************************************************************** 
  253 0000009c          Xllp_Store_All_WMMX_Regs FUNCTION 
  254 0000009c            
  255 0000009c              ;; trick - if addr is not double word aligned, save a word to align it 
  256 0000009c e1a01000     mov r1,r0 
  257 000000a0 e2102007     ands r2,r0,#7 
  258 000000a4 0a000000     beq sskip1 
  259 000000a8 fca12101     stc2 p1, c2, [r1],#4    ;; this instruction is skipped if word aligned 
  260 000000ac          sskip1 
  261 000000ac ece10102     stcl p1, c0,   [r1],#8 
  262 000000b0 ece11102     stcl p1, c1,   [r1],#8 
  263 000000b4 ece12102     stcl p1, c2,   [r1],#8 
  264 000000b8 ece13102     stcl p1, c3,   [r1],#8 
  265 000000bc ece14102     stcl p1, c4,   [r1],#8 
  266 000000c0 ece15102     stcl p1, c5,   [r1],#8 
  267 000000c4 ece16102     stcl p1, c6,   [r1],#8 
  268 000000c8 ece17102     stcl p1, c7,   [r1],#8 
  269 000000cc ece18102     stcl p1, c8,   [r1],#8 
  270 000000d0 ece19102     stcl p1, c9,   [r1],#8 
  271 000000d4 ece1a102     stcl p1, c10,  [r1],#8 
  272 000000d8 ece1b102     stcl p1, c11,  [r1],#8 
  273 000000dc ece1c102     stcl p1, c12,  [r1],#8 
  274 000000e0 ece1d102     stcl p1, c13,  [r1],#8 
  275 000000e4 ece1e102     stcl p1, c14,  [r1],#8 
  276 000000e8 ece1f102     stcl p1, c15,  [r1],#8 
  277 000000ec 1a000000     bne sskip2             ;; this instruction depend on condition 
  278 000000f0                                 ;; set by ANDs above 
  279 000000f0 fca12101     stc2 p1, c2, [r1],#4   ;; this instruction is executed if word aligned 
  280 000000f4          sskip2 
  281 000000f4 fca13101     stc2 p1, c3, [r1],#4 
  282 000000f8 fca18101     stc2 p1, c8, [r1],#4 
  283 000000fc fca19101     stc2 p1, c9, [r1],#4 
  284 00000100 fca1a101     stc2 p1, c10, [r1],#4 
  285 00000104 fca1b101     stc2 p1, c11, [r1],#4 
  286 00000108            
  287 00000108                  ; Now clear the control MUP & CUP bits (Control Update Bits) 
  288 00000108                  ; These are WRITE 1 TO CLEAR! 
  289 00000108 e3a03003         mov     r3, #0x3                  ;Set the 2 lowest bits == 1 
  290 0000010c ee013110         mcr     p1, 0, r3, c1, c0, 0      ;Now Clear the CUP & MUP bits 
  291 00000110            
  292 00000110                  ;CPWAIT  r0 
  293 00000110 ee120f10         MRC     P15, 0, r0, C2, C0, 0     ; arbitrary read of CP15 
  294 00000114 e1a02000         MOV     r2, r0                    ; wait for it (foward dependency) 
  295 00000118 e24ff004         SUB     PC, PC, #4                ; branch to next instruction 
  296 0000011c            
  297 0000011c                  IF Interworking :LOR: Thumbing 
  298 0000011c e12fff1e             bx  lr 
  299 00000120                  ELSE 
  301 00000120                  ENDIF ; IF Interworking :LOR: Thumbing 
  302 00000120            
  303 00000120                  ENDFUNC 
  304 00000120            
  305 00000120          ;****************************************************************************** 
  306 00000120          ; 
  307 00000120          ;       ******************************* 
  308 00000120          ;       *                             * 
  309 00000120          ;       * Xllp_Restore_All_WMMX_Regs  * 
  310 00000120          ;       *                             * 
  311 00000120          ;       ******************************* 
  312 00000120          ; 
  313 00000120          ; 
  314 00000120          ; 
  315 00000120          ; Restores all WMMX Registers saved by the above Store function 
  316 00000120          ; Restoring: 
  317 00000120          ;  CP0, R0 - 15 
  318 00000120          ;  CP1, R2, R3, R8 - 11 
  319 00000120          ; 
  320 00000120          ;  NOTE:  This routine was written to optimize both the read performance and 
  321 00000120          ;  the register usage.  It was designed against the EAS stated instruction 
  322 00000120          ;  latencies for tmcr and tmcrr instructions in hopes of keeping the 
  323 00000120          ;  connection between the coprocessor and core maximized with respect to bandwitdh. 
  324 00000120          ;  As such, the registes are not saved in a completely linear fashion, they are 
  325 00000120          ;  interleaved.  Due to the order saved, the restore order is also not sequential. 
  326 00000120          ; 
  327 00000120          ;****************************************************************************** 
  328 00000120          Xllp_Restore_All_WMMX_Regs FUNCTION 
  329 00000120            
  330 00000120              ;; trick - if addr is not double word aligned, save a word to align it 
  331 00000120 e1a01000     mov r1,r0 
  332 00000124 e2102007     ands r2,r0,#7 
  333 00000128 0a000000     beq rskip1 
  334 0000012c fcb12101     ldc2 p1, c2, [r1],#4    ;; this instruction is skipped if word aligned 
  335 00000130          rskip1 
  336 00000130 ecf10102     ldcl p1, c0,   [r1],#8 
  337 00000134 ecf11102     ldcl p1, c1,   [r1],#8 
  338 00000138 ecf12102     ldcl p1, c2,   [r1],#8 
  339 0000013c ecf13102     ldcl p1, c3,   [r1],#8 
  340 00000140 ecf14102     ldcl p1, c4,   [r1],#8 
  341 00000144 ecf15102     ldcl p1, c5,   [r1],#8 
  342 00000148 ecf16102     ldcl p1, c6,   [r1],#8 
  343 0000014c ecf17102     ldcl p1, c7,   [r1],#8 
  344 00000150 ecf18102     ldcl p1, c8,   [r1],#8 
  345 00000154 ecf19102     ldcl p1, c9,   [r1],#8 
  346 00000158 ecf1a102     ldcl p1, c10,  [r1],#8 
  347 0000015c ecf1b102     ldcl p1, c11,  [r1],#8 
  348 00000160 ecf1c102     ldcl p1, c12,  [r1],#8 
  349 00000164 ecf1d102     ldcl p1, c13,  [r1],#8 
  350 00000168 ecf1e102     ldcl p1, c14,  [r1],#8 
  351 0000016c ecf1f102     ldcl p1, c15,  [r1],#8 
  352 00000170 1a000000     bne rskip2             ;; this instruction depend on condition 
  353 00000174                                 ;; set by ANDs above 
  354 00000174 fcb12101     ldc2 p1, c2, [r1],#4   ;; this instruction is executed if word aligned 
  355 00000178          rskip2 
  356 00000178 fcb13101     ldc2 p1, c3, [r1],#4 
  357 0000017c fcb18101     ldc2 p1, c8, [r1],#4 
  358 00000180 fcb19101     ldc2 p1, c9, [r1],#4 
  359 00000184 fcb1a101     ldc2 p1, c10, [r1],#4 
  360 00000188 fcb1b101     ldc2 p1, c11, [r1],#4 
  361 0000018c            
  362 0000018c                  ; Now clear the control MUP & CUP bits (Control Update Bits) 
  363 0000018c                  ; These are WRITE 1 TO CLEAR! 
  364 0000018c e3a01003         mov     r1, #0x3                  ;Set the 2 lowest bits == 1 
  365 00000190 ee011110         mcr     p1, 0, r1, c1, c0, 0      ;Now Clear the CUP & MUP bits 
  366 00000194            
  367 00000194                  ;CPWAIT  r2 
  368 00000194 ee122f10         MRC     P15, 0, r2, C2, C0, 0     ; arbitrary read of CP15 
  369 00000198 e1a02002         MOV     r2, r2                    ; wait for it (foward dependency) 
  370 0000019c e24ff004         SUB     PC, PC, #4                ; branch to next instruction 
  371 000001a0            
  372 000001a0            
  373 000001a0                  IF Interworking :LOR: Thumbing 
  374 000001a0 e12fff1e             bx  lr 
  375 000001a4                  ELSE 
  377 000001a4                  ENDIF ; IF Interworking :LOR: Thumbing 
  378 000001a4            
  379 000001a4            
  380 000001a4                  ENDFUNC 
  381 000001a4            
  382 000001a4            
  383 000001a4                  END 
Assembly terminated, errors: 0, warnings: 0 
