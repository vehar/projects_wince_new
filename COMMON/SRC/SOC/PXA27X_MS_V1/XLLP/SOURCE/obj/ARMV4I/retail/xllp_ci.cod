; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_ci.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|XllpCISetFrameRate|
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_ci.c

  00000			 AREA	 |.pdata|, PDATA
|$T2760| DCD	|$LN5@XllpCISetF|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetFrameRate| PROC

; 44   : {

  00000		 |$LN5@XllpCISetF|
  00000		 |$M2757|

; 45   :     unsigned int value;
; 46   :     
; 47   :     // write cicr4
; 48   :     value = READ_REG(XLLP_CICR4);
; 49   :     value &= ~(XLLP_CI_CICR4_FR_RATE_SMASK << XLLP_CI_CICR4_FR_RATE_SHIFT);

  00000	e5903010	 ldr         r3, [r0, #0x10]
  00004	e3c33c07	 bic         r3, r3, #7, 24

; 50   :     value |= (unsigned)frate << XLLP_CI_CICR4_FR_RATE_SHIFT;

  00008	e1833401	 orr         r3, r3, r1, lsl #8

; 51   :     WRITE_REG(XLLP_CICR4, value);   

  0000c	e5803010	 str         r3, [r0, #0x10]

; 52   : }

  00010	e12fff1e	 bx          lr
  00014		 |$M2758|

			 ENDP  ; |XllpCISetFrameRate|

	EXPORT	|XllpCIGetFrameRate|

  00000			 AREA	 |.pdata|, PDATA
|$T2770| DCD	|$LN5@XllpCIGetF|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIGetFrameRate| PROC

; 55   : {

  00000		 |$LN5@XllpCIGetF|
  00000		 |$M2767|

; 56   :     unsigned int value;
; 57   :     value = READ_REG(XLLP_CICR4);
; 58   :     return (XLLP_CI_FRAME_CAPTURE_RATE)((value >> XLLP_CI_CICR4_FR_RATE_SHIFT) & XLLP_CI_CICR4_FR_RATE_SMASK);

  00000	e5903010	 ldr         r3, [r0, #0x10]
  00004	e1a03a83	 mov         r3, r3, lsl #21
  00008	e1a00ea3	 mov         r0, r3, lsr #29

; 59   : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M2768|

			 ENDP  ; |XllpCIGetFrameRate|

	EXPORT	|XllpCISetImageFormat|

  00000			 AREA	 |.pdata|, PDATA
|$T2817| DCD	|$LN59@XllpCISetI|
	DCD	0x40006d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetImageFormat| PROC

; 62   : {

  00000		 |$LN59@XllpCISetI|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M2814|

; 63   :     unsigned int value, tbit, rgbt_conv, rgb_conv, rgb_f, ycbcr_f, rgb_bpp, raw_bpp, cspace;
; 64   : 
; 65   :     // write cicr1: preserve ppl value and data width value
; 66   :     value = READ_REG(XLLP_CICR1);
; 67   :     value &= ( (XLLP_CI_CICR1_PPL_SMASK << XLLP_CI_CICR1_PPL_SHIFT) | ((XLLP_CI_CICR1_DW_SMASK) << XLLP_CI_CICR1_DW_SHIFT));

  00004	e590e004	 ldr         lr, [r0, #4]
  00008	e59f31a0	 ldr         r3, [pc, #0x1A0]

; 68   :     tbit = rgbt_conv = rgb_conv = rgb_f = ycbcr_f = rgb_bpp = raw_bpp = cspace = 0;

  0000c	e3a04000	 mov         r4, #0
  00010	e3a08000	 mov         r8, #0
  00014	e00ea003	 and         r10, lr, r3
  00018	e3a0e000	 mov         lr, #0
  0001c	e3a09000	 mov         r9, #0
  00020	e3a07000	 mov         r7, #0
  00024	e3a05000	 mov         r5, #0
  00028	e3a06000	 mov         r6, #0

; 69   :     switch(input_format) {

  0002c	e351000f	 cmp         r1, #0xF
  00030	8a00004c	 bhi         |$LN30@XllpCISetI|
  00034	e1a03081	 mov         r3, r1, lsl #1
  00038	e083300f	 add         r3, r3, pc
  0003c	e1d330b4	 ldrh        r3, [r3, #4]
  00040	e08ff003	 add         pc, pc, r3
  00044		 |$LN40@XllpCISetI|
  00044		 |$LN39@XllpCISetI|
  00044		 |$LN41@XllpCISetI|
  00044	001c		 DCW         0x1c
  00046		 |$LN42@XllpCISetI|
  00046	0028		 DCW         0x28
  00048		 |$LN43@XllpCISetI|
  00048	0034		 DCW         0x34
  0004a		 |$LN44@XllpCISetI|
  0004a	0040		 DCW         0x40
  0004c		 |$LN45@XllpCISetI|
  0004c	0040		 DCW         0x40
  0004e		 |$LN46@XllpCISetI|
  0004e	0054		 DCW         0x54
  00050		 |$LN47@XllpCISetI|
  00050	0060		 DCW         0x60
  00052		 |$LN48@XllpCISetI|
  00052	0088		 DCW         0x88
  00054		 |$LN49@XllpCISetI|
  00054	0098		 DCW         0x98
  00056		 |$LN50@XllpCISetI|
  00056	00b0		 DCW         0xb0
  00058		 |$LN51@XllpCISetI|
  00058	0120		 DCW         0x120
  0005a		 |$LN52@XllpCISetI|
  0005a	0120		 DCW         0x120
  0005c		 |$LN53@XllpCISetI|
  0005c	0120		 DCW         0x120
  0005e		 |$LN54@XllpCISetI|
  0005e	0120		 DCW         0x120
  00060		 |$LN55@XllpCISetI|
  00060	0120		 DCW         0x120
  00062		 |$LN56@XllpCISetI|
  00062	00b0		 DCW         0xb0
  00064		 |$LN25@XllpCISetI|

; 70   :     case XLLP_CI_RAW8:
; 71   :         cspace = 0;

  00064	e3a04000	 mov         r4, #0

; 72   :         raw_bpp = 0;

  00068	e3a08000	 mov         r8, #0

; 73   :         break;

  0006c	ea00003d	 b           |$LN30@XllpCISetI|
  00070		 |$LN24@XllpCISetI|

; 74   :     case XLLP_CI_RAW9:
; 75   :         cspace = 0;

  00070	e3a04000	 mov         r4, #0

; 76   :         raw_bpp = 1;

  00074	e3a08001	 mov         r8, #1

; 77   :         break;

  00078	ea00003a	 b           |$LN30@XllpCISetI|
  0007c		 |$LN23@XllpCISetI|

; 78   :     case XLLP_CI_RAW10:
; 79   :         cspace = 0;

  0007c	e3a04000	 mov         r4, #0

; 80   :         raw_bpp = 2;

  00080	e3a08002	 mov         r8, #2

; 81   :         break;

  00084	ea000037	 b           |$LN30@XllpCISetI|
  00088		 |$LN22@XllpCISetI|

; 82   :     case XLLP_CI_YCBCR422:
; 83   :     case XLLP_CI_YCBCR422_PLANAR:
; 84   :         cspace = 2;

  00088	e3a04002	 mov         r4, #2

; 85   :         if (output_format == XLLP_CI_YCBCR422_PLANAR) {

  0008c	e3520004	 cmp         r2, #4
  00090	1a000034	 bne         |$LN30@XllpCISetI|

; 86   :             ycbcr_f = 1;

  00094	e3a09001	 mov         r9, #1

; 87   :         }
; 88   :         break;

  00098	ea000032	 b           |$LN30@XllpCISetI|
  0009c		 |$LN20@XllpCISetI|

; 89   :     case XLLP_CI_RGB444:
; 90   :         cspace = 1;

  0009c	e3a04001	 mov         r4, #1

; 91   :         rgb_bpp = 0;

  000a0	e3a0e000	 mov         lr, #0

; 92   :         break;  

  000a4	ea00002f	 b           |$LN30@XllpCISetI|
  000a8		 |$LN19@XllpCISetI|

; 93   :     case XLLP_CI_RGB555:
; 94   :         cspace = 1;
; 95   :         rgb_bpp = 1;
; 96   :         if (output_format == XLLP_CI_RGBT555_0) {

  000a8	e352000a	 cmp         r2, #0xA

; 97   :             rgbt_conv = 2;

  000ac	03a06002	 moveq       r6, #2
  000b0	e3a04001	 mov         r4, #1
  000b4	e3a0e001	 mov         lr, #1
  000b8	0a00002a	 beq         |$LN30@XllpCISetI|

; 98   :             tbit = 0;
; 99   :         } 
; 100  :         else if (output_format == XLLP_CI_RGBT555_1) {

  000bc	e352000c	 cmp         r2, #0xC
  000c0	1a000028	 bne         |$LN30@XllpCISetI|

; 101  :             rgbt_conv = 2;

  000c4	e3a06002	 mov         r6, #2

; 144  :             break;
; 145  :         default:
; 146  :             break;
; 147  :         }
; 148  :         break;  
; 149  :     default:
; 150  :         break;
; 151  :     }
; 152  :     value |= (tbit==1) ? XLLP_CI_CICR1_TBIT : 0;

  000c8	e3a02102	 mov         r2, #2, 2
  000cc	ea000026	 b           |$LN31@XllpCISetI|
  000d0		 |$LN15@XllpCISetI|

; 102  :             tbit = 1;
; 103  :         }
; 104  :         break;  
; 105  :     case XLLP_CI_RGB565:
; 106  :         cspace = 1;

  000d0	e3a04001	 mov         r4, #1

; 107  :         rgb_bpp = 2;

  000d4	e3a0e002	 mov         lr, #2

; 108  :         rgb_f = 1;

  000d8	e3a07001	 mov         r7, #1

; 109  :         break;  

  000dc	ea000021	 b           |$LN30@XllpCISetI|
  000e0		 |$LN14@XllpCISetI|

; 110  :     case XLLP_CI_RGB666:
; 111  :         cspace = 1;

  000e0	e3a04001	 mov         r4, #1

; 112  :         rgb_bpp = 3;

  000e4	e3a0e003	 mov         lr, #3

; 113  :         if (output_format == XLLP_CI_RGB666_PACKED) {

  000e8	e352000e	 cmp         r2, #0xE
  000ec		 |$LN38@XllpCISetI|
  000ec	1a00001d	 bne         |$LN30@XllpCISetI|

; 108  :         rgb_f = 1;

  000f0	e3a07001	 mov         r7, #1

; 109  :         break;  

  000f4	ea00001b	 b           |$LN30@XllpCISetI|
  000f8		 |$LN12@XllpCISetI|

; 114  :             rgb_f = 1;
; 115  :         }
; 116  :         break;  
; 117  :     case XLLP_CI_RGB888:
; 118  :     case XLLP_CI_RGB888_PACKED:
; 119  :         cspace = 1;

  000f8	e3a04001	 mov         r4, #1

; 120  :         rgb_bpp = 4;

  000fc	e3a0e004	 mov         lr, #4

; 121  :         switch(output_format) {

  00100	e3520005	 cmp         r2, #5
  00104	0a000016	 beq         |$LN3@XllpCISetI|
  00108	e3520006	 cmp         r2, #6
  0010c	0a000012	 beq         |$LN4@XllpCISetI|
  00110	e3520007	 cmp         r2, #7
  00114	0a00000e	 beq         |$LN5@XllpCISetI|
  00118	e3520008	 cmp         r2, #8
  0011c	0a00000a	 beq         |$LN6@XllpCISetI|
  00120	e352000b	 cmp         r2, #0xB
  00124	0a000006	 beq         |$LN8@XllpCISetI|
  00128	e352000d	 cmp         r2, #0xD
  0012c	0a000001	 beq         |$LN7@XllpCISetI|
  00130	e352000f	 cmp         r2, #0xF

; 122  :         case XLLP_CI_RGB888_PACKED:
; 123  :             rgb_f = 1;
; 124  :             break;

  00134	eaffffec	 b           |$LN38@XllpCISetI|
  00138		 |$LN7@XllpCISetI|

; 129  :         case XLLP_CI_RGBT888_1:
; 130  :             rgbt_conv = 1;

  00138	e3a06001	 mov         r6, #1

; 144  :             break;
; 145  :         default:
; 146  :             break;
; 147  :         }
; 148  :         break;  
; 149  :     default:
; 150  :         break;
; 151  :     }
; 152  :     value |= (tbit==1) ? XLLP_CI_CICR1_TBIT : 0;

  0013c	e3a02102	 mov         r2, #2, 2
  00140	ea000009	 b           |$LN31@XllpCISetI|
  00144		 |$LN8@XllpCISetI|

; 125  :         case XLLP_CI_RGBT888_0:
; 126  :             rgbt_conv = 1;

  00144	e3a06001	 mov         r6, #1

; 127  :             tbit = 0;
; 128  :             break;

  00148	ea000006	 b           |$LN30@XllpCISetI|
  0014c		 |$LN6@XllpCISetI|

; 131  :             tbit = 1;
; 132  :             break;
; 133  :         case XLLP_CI_RGB666:
; 134  :             rgb_conv = 1;

  0014c	e3a05001	 mov         r5, #1

; 135  :             break;

  00150	ea000004	 b           |$LN30@XllpCISetI|
  00154		 |$LN5@XllpCISetI|

; 136  :         case XLLP_CI_RGB565:
; 137  :             rgb_conv = 2;

  00154	e3a05002	 mov         r5, #2

; 138  :             break;

  00158	ea000002	 b           |$LN30@XllpCISetI|
  0015c		 |$LN4@XllpCISetI|

; 139  :         case XLLP_CI_RGB555:
; 140  :             rgb_conv = 3;

  0015c	e3a05003	 mov         r5, #3

; 141  :             break;

  00160	ea000000	 b           |$LN30@XllpCISetI|
  00164		 |$LN3@XllpCISetI|

; 142  :         case XLLP_CI_RGB444:
; 143  :             rgb_conv = 4;

  00164	e3a05004	 mov         r5, #4
  00168		 |$LN30@XllpCISetI|

; 144  :             break;
; 145  :         default:
; 146  :             break;
; 147  :         }
; 148  :         break;  
; 149  :     default:
; 150  :         break;
; 151  :     }
; 152  :     value |= (tbit==1) ? XLLP_CI_CICR1_TBIT : 0;

  00168	e3a02000	 mov         r2, #0
  0016c		 |$LN31@XllpCISetI|

; 153  :     value |= rgbt_conv << XLLP_CI_CICR1_RGBT_CONV_SHIFT;
; 154  :     value |= rgb_conv << XLLP_CI_CICR1_RGB_CONV_SHIFT;

  0016c	e1853886	 orr         r3, r5, r6, lsl #17
  00170	e1823603	 orr         r3, r2, r3, lsl #12

; 155  :     value |= (rgb_f==1) ? XLLP_CI_CICR1_RBG_F : 0;

  00174	e3570001	 cmp         r7, #1
  00178	e183200a	 orr         r2, r3, r10
  0017c	03a03b02	 moveq       r3, #2, 22
  00180	13a03000	 movne       r3, #0
  00184	e1831002	 orr         r1, r3, r2

; 156  :     value |= (ycbcr_f==1) ? XLLP_CI_CICR1_YCBCR_F : 0;

  00188	e3590001	 cmp         r9, #1

; 157  :     value |= rgb_bpp << XLLP_CI_CICR1_RGB_BPP_SHIFT;
; 158  :     value |= raw_bpp << XLLP_CI_CICR1_RAW_BPP_SHIFT;
; 159  :     value |= cspace << XLLP_CI_CICR1_COLOR_SP_SHIFT;
; 160  :     WRITE_REG(XLLP_CICR1, value);   

  0018c	e188310e	 orr         r3, r8, lr, lsl #2
  00190	03a02b01	 moveq       r2, #1, 22
  00194	e1843103	 orr         r3, r4, r3, lsl #2
  00198	13a02000	 movne       r2, #0
  0019c	e1823183	 orr         r3, r2, r3, lsl #3
  001a0	e1833001	 orr         r3, r3, r1
  001a4	e5803004	 str         r3, [r0, #4]

; 161  : 
; 162  :     return; 
; 163  : }

  001a8	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  001ac	e12fff1e	 bx          lr
  001b0		 |$LN60@XllpCISetI|
  001b0		 |$LN61@XllpCISetI|
  001b0	03ff8007	 DCD         0x3ff8007
  001b4		 |$M2815|

			 ENDP  ; |XllpCISetImageFormat|

	EXPORT	|XllpCISetMode|

  00000			 AREA	 |.pdata|, PDATA
|$T2829| DCD	|$LN5@XllpCISetM|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetMode| PROC

; 166  : {

  00000		 |$LN5@XllpCISetM|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M2826|

; 167  :     unsigned int value;
; 168  : 
; 169  :     // write mode field in cicr0    
; 170  :     value = READ_REG(XLLP_CICR0);
; 171  :     value &= ~(XLLP_CI_CICR0_SIM_SMASK << XLLP_CI_CICR0_SIM_SHIFT);

  00004	e5903000	 ldr         r3, [r0]

; 172  :     value |= (unsigned int)mode << XLLP_CI_CICR0_SIM_SHIFT;
; 173  :     WRITE_REG(XLLP_CICR0, value);   
; 174  :     
; 175  :     // write data width cicr1
; 176  :     value = READ_REG(XLLP_CICR1);
; 177  :     value &= ~(XLLP_CI_CICR1_DW_SMASK << XLLP_CI_CICR1_DW_SHIFT);

  00008	e590e004	 ldr         lr, [r0, #4]
  0000c	e3c33407	 bic         r3, r3, #7, 8
  00010	e3cee007	 bic         lr, lr, #7
  00014	e1833c01	 orr         r3, r3, r1, lsl #24

; 178  :     value |= ((unsigned)data_width) << XLLP_CI_CICR1_DW_SHIFT;

  00018	e18e2002	 orr         r2, lr, r2
  0001c	e5803000	 str         r3, [r0]

; 179  :     WRITE_REG(XLLP_CICR1, value);   

  00020	e5802004	 str         r2, [r0, #4]

; 180  :     return; 
; 181  : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M2827|

			 ENDP  ; |XllpCISetMode|

	EXPORT	|XllpCIConfigureMP|

  00000			 AREA	 |.pdata|, PDATA
|$T2840| DCD	|$LN5@XllpCIConf|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIConfigureMP| PROC

; 184  : {

  00000		 |$LN5@XllpCIConf|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M2837|
  00004	e1a05002	 mov         r5, r2

; 185  :     unsigned int value;
; 186  :     
; 187  :     // write ppl field in cicr1
; 188  :     value = READ_REG(XLLP_CICR1);
; 189  :     value &= ~(XLLP_CI_CICR1_PPL_SMASK << XLLP_CI_CICR1_PPL_SHIFT);
; 190  :     value |= (PPL & XLLP_CI_CICR1_PPL_SMASK) << XLLP_CI_CICR1_PPL_SHIFT;
; 191  :     WRITE_REG(XLLP_CICR1, value);   

  00008	e590e004	 ldr         lr, [r0, #4]
  0000c	e3a027ff	 mov         r2, #0xFF, 14
  00010	e1a0400e	 mov         r4, lr
  00014	e02ee781	 eor         lr, lr, r1, lsl #15
  00018	e382190e	 orr         r1, r2, #0xE, 18
  0001c	e00e1001	 and         r1, lr, r1
  00020	e0211004	 eor         r1, r1, r4

; 192  : 
; 193  :     // write BLW, ELW in cicr2  
; 194  :     value = READ_REG(XLLP_CICR2);
; 195  :     value &= ~(XLLP_CI_CICR2_BLW_SMASK << XLLP_CI_CICR2_BLW_SHIFT | XLLP_CI_CICR2_ELW_SMASK << XLLP_CI_CICR2_ELW_SHIFT );

  00024	e5904008	 ldr         r4, [r0, #8]
  00028	e3a02cff	 mov         r2, #0xFF, 24
  0002c	e5801004	 str         r1, [r0, #4]

; 196  :     value |= (timing->BLW & XLLP_CI_CICR2_BLW_SMASK) << XLLP_CI_CICR2_BLW_SHIFT;

  00030	e593e004	 ldr         lr, [r3, #4]
  00034	e38210ff	 orr         r1, r2, #0xFF
  00038	e0041001	 and         r1, r4, r1
  0003c	e1811c0e	 orr         r1, r1, lr, lsl #24

; 197  :     WRITE_REG(XLLP_CICR2, value);   
; 198  :     
; 199  :     // write BFW, LPF in cicr3
; 200  :     value = READ_REG(XLLP_CICR3);
; 201  :     value &= ~(XLLP_CI_CICR3_BFW_SMASK << XLLP_CI_CICR3_BFW_SHIFT | XLLP_CI_CICR3_LPF_SMASK << XLLP_CI_CICR3_LPF_SHIFT );

  00040	e590e00c	 ldr         lr, [r0, #0xC]
  00044	e5801008	 str         r1, [r0, #8]

; 202  :     value |= (timing->BFW & XLLP_CI_CICR3_BFW_SMASK) << XLLP_CI_CICR3_BFW_SHIFT;

  00048	e5931000	 ldr         r1, [r3]
  0004c	e3a028ff	 mov         r2, #0xFF, 16
  00050	e3823b3e	 orr         r3, r2, #0x3E, 22
  00054	e3a02c07	 mov         r2, #7, 24
  00058	e00e3003	 and         r3, lr, r3

; 203  :     value |= (LPF & XLLP_CI_CICR3_LPF_SMASK) << XLLP_CI_CICR3_LPF_SHIFT;

  0005c	e38220ff	 orr         r2, r2, #0xFF
  00060	e1831c01	 orr         r1, r3, r1, lsl #24
  00064	e0053002	 and         r3, r5, r2

; 204  :     WRITE_REG(XLLP_CICR3, value);   

  00068	e1813003	 orr         r3, r1, r3
  0006c	e580300c	 str         r3, [r0, #0xC]

; 205  :     return;
; 206  : }

  00070	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M2838|

			 ENDP  ; |XllpCIConfigureMP|

	EXPORT	|XllpCIConfigureSP|

  00000			 AREA	 |.pdata|, PDATA
|$T2853| DCD	|$LN5@XllpCIConf@2|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIConfigureSP| PROC

; 209  : {

  00000		 |$LN5@XllpCIConf@2|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M2850|
  00004	e1a08003	 mov         r8, r3
  00008	e1a09002	 mov         r9, r2
  0000c	e1a0a000	 mov         r10, r0

; 210  :     unsigned int value;
; 211  :     
; 212  :     // write ppl field in cicr1
; 213  :     value = READ_REG(XLLP_CICR1);
; 214  :     value &= ~(XLLP_CI_CICR1_PPL_SMASK << XLLP_CI_CICR1_PPL_SHIFT);
; 215  :     value |= (PPL & XLLP_CI_CICR1_PPL_SMASK) << XLLP_CI_CICR1_PPL_SHIFT;

  00010	e59ae004	 ldr         lr, [r10, #4]
  00014	e3a037ff	 mov         r3, #0xFF, 14
  00018	e1a0400e	 mov         r4, lr
  0001c	e02ee781	 eor         lr, lr, r1, lsl #15
  00020	e383190e	 orr         r1, r3, #0xE, 18
  00024	e00e1001	 and         r1, lr, r1
  00028	e0217004	 eor         r7, r1, r4

; 216  :     WRITE_REG(XLLP_CICR1, value);   

  0002c	e58a7004	 str         r7, [r10, #4]

; 217  : 
; 218  :     // write cicr2
; 219  :     value |= (timing->BLW & XLLP_CI_CICR2_BLW_SMASK) << XLLP_CI_CICR2_BLW_SHIFT;
; 220  :     value |= (timing->ELW & XLLP_CI_CICR2_ELW_SMASK) << XLLP_CI_CICR2_ELW_SHIFT;
; 221  :     value |= (timing->HSW & XLLP_CI_CICR2_HSW_SMASK) << XLLP_CI_CICR2_HSW_SHIFT;
; 222  :     value |= (timing->BFPW & XLLP_CI_CICR2_BFPW_SMASK) << XLLP_CI_CICR2_BFPW_SHIFT;
; 223  :     value |= (timing->FSW & XLLP_CI_CICR2_FSW_SMASK) << XLLP_CI_CICR2_FSW_SHIFT;

  00030	e5981004	 ldr         r1, [r8, #4]
  00034	e598e000	 ldr         lr, [r8]
  00038	e5984008	 ldr         r4, [r8, #8]
  0003c	e20110ff	 and         r1, r1, #0xFF
  00040	e598500c	 ldr         r5, [r8, #0xC]
  00044	e181e40e	 orr         lr, r1, lr, lsl #8
  00048	e204103f	 and         r1, r4, #0x3F
  0004c	e5986010	 ldr         r6, [r8, #0x10]
  00050	e181e30e	 orr         lr, r1, lr, lsl #6
  00054	e205103f	 and         r1, r5, #0x3F
  00058	e181e38e	 orr         lr, r1, lr, lsl #7
  0005c	e2061003	 and         r1, r6, #3
  00060	e181318e	 orr         r3, r1, lr, lsl #3
  00064	e183e007	 orr         lr, r3, r7

; 224  :     WRITE_REG(XLLP_CICR2, value);   

  00068	e58ae008	 str         lr, [r10, #8]

; 225  :     
; 226  :     // write cicr3
; 227  :     value |= (timing->BFW & XLLP_CI_CICR3_BFW_SMASK) << XLLP_CI_CICR3_BFW_SHIFT;
; 228  :     value |= (timing->EFW & XLLP_CI_CICR3_EFW_SMASK) << XLLP_CI_CICR3_EFW_SHIFT;
; 229  :     value |= (timing->VSW & XLLP_CI_CICR3_VSW_SMASK) << XLLP_CI_CICR3_VSW_SHIFT;
; 230  :     value |= (LPF & XLLP_CI_CICR3_LPF_SMASK) << XLLP_CI_CICR3_LPF_SHIFT;
; 231  :     WRITE_REG(XLLP_CICR3, value);   

  0006c	e5983018	 ldr         r3, [r8, #0x18]
  00070	e5982014	 ldr         r2, [r8, #0x14]
  00074	e598001c	 ldr         r0, [r8, #0x1C]
  00078	e20330ff	 and         r3, r3, #0xFF
  0007c	e1831402	 orr         r1, r3, r2, lsl #8
  00080	e3a04c07	 mov         r4, #7, 24
  00084	e200301f	 and         r3, r0, #0x1F
  00088	e38420ff	 orr         r2, r4, #0xFF
  0008c	e1831281	 orr         r1, r3, r1, lsl #5
  00090	e0093002	 and         r3, r9, r2
  00094	e1833581	 orr         r3, r3, r1, lsl #11
  00098	e183300e	 orr         r3, r3, lr
  0009c	e58a300c	 str         r3, [r10, #0xC]

; 232  :     return;
; 233  : }

  000a0	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$M2851|

			 ENDP  ; |XllpCIConfigureSP|

	EXPORT	|XllpCIConfigureMS|

  00000			 AREA	 |.pdata|, PDATA
|$T2864| DCD	|$LN5@XllpCIConf@3|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIConfigureMS| PROC

; 236  : {

  00000		 |$LN5@XllpCIConf@3|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M2861|

; 237  :     // the operation is same as Master-Parallel
; 238  :     XllpCIConfigureMP(ci_reg_base, PPL, LPF, (XLLP_CI_MP_TIMING*)timing);

  00004	eb000000	 bl          XllpCIConfigureMP

; 239  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M2862|

			 ENDP  ; |XllpCIConfigureMS|

	EXPORT	|XllpCIConfigureEP|

  00000			 AREA	 |.pdata|, PDATA
|$T2875| DCD	|$LN7@XllpCIConf@4|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIConfigureEP| PROC

; 242  : {

  00000		 |$LN7@XllpCIConf@4|
  00000		 |$M2872|
  00000	e3510000	 cmp         r1, #0

; 243  :     unsigned int value;
; 244  : 
; 245  :     // write parity_enable field in cicr0   
; 246  :     value = READ_REG(XLLP_CICR0);

  00004	e5903000	 ldr         r3, [r0]

; 247  :     if (parity_check) {
; 248  :         value |= XLLP_CI_CICR0_PAR_EN;

  00008	13833101	 orrne       r3, r3, #1, 2

; 252  :     }
; 253  :     WRITE_REG(XLLP_CICR0, value);   

  0000c	15803000	 strne       r3, [r0]

; 249  :     }
; 250  :     else {
; 251  :         value &= ~XLLP_CI_CICR0_PAR_EN;

  00010	03c33101	 biceq       r3, r3, #1, 2

; 252  :     }
; 253  :     WRITE_REG(XLLP_CICR0, value);   

  00014	05803000	 streq       r3, [r0]

; 254  :     return; 
; 255  : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M2873|

			 ENDP  ; |XllpCIConfigureEP|

	EXPORT	|XllpCIConfigureES|

  00000			 AREA	 |.pdata|, PDATA
|$T2892| DCD	|$LN9@XllpCIConf@5|
	DCD	0x40000700
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIConfigureES| PROC

; 258  : {

  00000		 |$LN9@XllpCIConf@5|
  00000		 |$M2889|
  00000	e3510000	 cmp         r1, #0

; 259  :     // the operationi is same as Embedded-Parallel
; 260  :     XllpCIConfigureEP(ci_reg_base, parity_check);

  00004	e5903000	 ldr         r3, [r0]
  00008	13833101	 orrne       r3, r3, #1, 2
  0000c	15803000	 strne       r3, [r0]
  00010	03c33101	 biceq       r3, r3, #1, 2
  00014	05803000	 streq       r3, [r0]

; 261  : }

  00018	e12fff1e	 bx          lr
  0001c		 |$M2890|

			 ENDP  ; |XllpCIConfigureES|

	EXPORT	|XllpCISetClock|
	IMPORT	|__rt_udiv|
	IMPORT	|__utos|
	IMPORT	|__muls|
	IMPORT	|__stod|
	IMPORT	|ceil|
	IMPORT	|__dtou|

  00000			 AREA	 |.pdata|, PDATA
|$T2919| DCD	|$LN15@XllpCISetC|
	DCD	0x40003202
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetClock| PROC

; 264  : {

  00000		 |$LN15@XllpCISetC|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M2916|
  00008	e1a05003	 mov         r5, r3
  0000c	e1a06002	 mov         r6, r2
  00010	e1a04000	 mov         r4, r0

; 265  :     unsigned int ciclk,  value, div, cccr_l;
; 266  :     P_XLLP_CLKMGR_T pclk;
; 267  : 	float p;
; 268  : 
; 269  :     // determine the LCLK frequency programmed into the CCCR.
; 270  :     pclk = (P_XLLP_CLKMGR_T)clk_regs_base;
; 271  :     cccr_l = (pclk->cccr & 0x0000001F);

  00014	e5911000	 ldr         r1, [r1]
  00018	e201e01f	 and         lr, r1, #0x1F

; 272  : 
; 273  : 	if (cccr_l < 8) // L = [2 - 7]

  0001c	e35e0008	 cmp         lr, #8
  00020	33a03c05	 movcc       r3, #5, 24

; 274  : 		ciclk = (13 * cccr_l) * 100;

  00024	33831014	 orrcc       r1, r3, #0x14
  00028	3001019e	 mulcc       r1, lr, r1
  0002c	3a00000b	 bcc         |$LN1@XllpCISetC|

; 275  : 	else if (cccr_l < 17) // L = [8 - 16] 

  00030	e35e0011	 cmp         lr, #0x11
  00034	33a03c05	 movcc       r3, #5, 24

; 276  : 		ciclk = ((13 * cccr_l) * 100) >> 1;

  00038	33833014	 orrcc       r3, r3, #0x14
  0003c	3003039e	 mulcc       r3, lr, r3
  00040	31a010a3	 movcc       r1, r3, lsr #1
  00044	3a000005	 bcc         |$LN1@XllpCISetC|

; 277  : 	else if (cccr_l < 32) // L = [17 - 31]

  00048	e35e0020	 cmp         lr, #0x20
  0004c	33a03c05	 movcc       r3, #5, 24

; 278  : 		ciclk = ((13 * cccr_l) * 100) >> 2;

  00050	33833014	 orrcc       r3, r3, #0x14
  00054	3003039e	 mulcc       r3, lr, r3
  00058	31a01123	 movcc       r1, r3, lsr #2
  0005c	259d1000	 ldrcs       r1, [sp]
  00060		 |$LN1@XllpCISetC|

; 279  : 	
; 280  : 	p = (float)((ciclk / mclk_mhz) - 2) / 2;

  00060	e59d0014	 ldr         r0, [sp, #0x14]
  00064	eb000000	 bl          __rt_udiv
  00068	e2400002	 sub         r0, r0, #2

; 281  : 
; 282  : 	div = (unsigned int) (ceil(p));

  0006c	eb000000	 bl          __utos
  00070	e3a0143f	 mov         r1, #0x3F, 8
  00074	eb000000	 bl          __muls
  00078	eb000000	 bl          __stod
  0007c	eb000000	 bl          ceil
  00080	eb000000	 bl          __dtou

; 283  : 
; 284  :     // write cicr4
; 285  :     value = READ_REG(XLLP_CICR4);
; 286  :     value &= ~(XLLP_CI_CICR4_PCLK_EN | XLLP_CI_CICR4_MCLK_EN | XLLP_CI_CICR4_DIV_SMASK<<XLLP_CI_CICR4_DIV_SHIFT);

  00084	e5942010	 ldr         r2, [r4, #0x10]
  00088	e3e03722	 mvn         r3, #0x22, 14
  0008c	e22330ff	 eor         r3, r3, #0xFF

; 287  :     value |= (pclk_enable) ? XLLP_CI_CICR4_PCLK_EN : 0;

  00090	e3560000	 cmp         r6, #0
  00094	e0022003	 and         r2, r2, r3
  00098	13a03502	 movne       r3, #2, 10
  0009c	03a03000	 moveq       r3, #0

; 288  :     value |= (mclk_enable) ? XLLP_CI_CICR4_MCLK_EN : 0;

  000a0	e3550000	 cmp         r5, #0
  000a4	e1832002	 orr         r2, r3, r2
  000a8	13a03702	 movne       r3, #2, 14
  000ac	03a03000	 moveq       r3, #0
  000b0	e1833002	 orr         r3, r3, r2

; 289  :     value |= div << XLLP_CI_CICR4_DIV_SHIFT;
; 290  :     WRITE_REG(XLLP_CICR4, value);   

  000b4	e1833000	 orr         r3, r3, r0
  000b8	e5843010	 str         r3, [r4, #0x10]

; 291  :     return; 
; 292  : }

  000bc	e28dd004	 add         sp, sp, #4
  000c0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$M2917|

			 ENDP  ; |XllpCISetClock|

	EXPORT	|XllpCISetPolarity|

  00000			 AREA	 |.pdata|, PDATA
|$T2939| DCD	|$LN11@XllpCISetP|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetPolarity| PROC

; 295  : {

  00000		 |$LN11@XllpCISetP|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M2936|
  00004	e1a04003	 mov         r4, r3
  00008	e1a0e002	 mov         lr, r2
  0000c	e3510000	 cmp         r1, #0

; 296  :     unsigned int value;
; 297  : 
; 298  :     // write cicr4
; 299  :     value = READ_REG(XLLP_CICR4);
; 300  :     value &= ~(XLLP_CI_CICR4_PCP | XLLP_CI_CICR4_HSP | XLLP_CI_CICR4_VSP);

  00010	e5901010	 ldr         r1, [r0, #0x10]
  00014	e3c12607	 bic         r2, r1, #7, 12

; 301  :     value |= (pclk_sample_falling)? XLLP_CI_CICR4_PCP : 0;

  00018	13a01501	 movne       r1, #1, 10
  0001c	03a01000	 moveq       r1, #0

; 302  :     value |= (hsync_active_low) ? XLLP_CI_CICR4_HSP : 0;

  00020	e35e0000	 cmp         lr, #0
  00024	13a03602	 movne       r3, #2, 12
  00028	03a03000	 moveq       r3, #0
  0002c	e1812002	 orr         r2, r1, r2

; 303  :     value |= (vsync_active_low) ? XLLP_CI_CICR4_VSP : 0;

  00030	e3540000	 cmp         r4, #0
  00034	e1832002	 orr         r2, r3, r2
  00038	13a03601	 movne       r3, #1, 12
  0003c	03a03000	 moveq       r3, #0
  00040	e1833002	 orr         r3, r3, r2

; 304  :     WRITE_REG(XLLP_CICR4, value);   

  00044	e5803010	 str         r3, [r0, #0x10]

; 305  :     return; 
; 306  : }

  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M2937|

			 ENDP  ; |XllpCISetPolarity|

	EXPORT	|XllpCISetFIFO|

  00000			 AREA	 |.pdata|, PDATA
|$T2956| DCD	|$LN9@XllpCISetF@2|
	DCD	0x40001000
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetFIFO| PROC

; 310  : {

  00000		 |$LN9@XllpCISetF@2|
  00000		 |$M2953|
  00000	e3530000	 cmp         r3, #0

; 311  :     unsigned int value;
; 312  : 
; 313  :     // write citor
; 314  :     WRITE_REG(XLLP_CITOR, timeout); 
; 315  :     
; 316  :     // write cifr: always enable fifo 0! also reset input fifo 
; 317  :     value = READ_REG(XLLP_CIFR);
; 318  :     value &= ~(XLLP_CI_CIFR_FEN0 | XLLP_CI_CIFR_FEN1 | XLLP_CI_CIFR_FEN2 | XLLP_CI_CIFR_RESETF | 
; 319  :                 XLLP_CI_CIFR_THL_0_SMASK<<XLLP_CI_CIFR_THL_0_SHIFT);

  00004	e5903018	 ldr         r3, [r0, #0x18]
  00008	e580101c	 str         r1, [r0, #0x1C]
  0000c	e3c3303f	 bic         r3, r3, #0x3F

; 320  :     value |= (unsigned int)threshold << XLLP_CI_CIFR_THL_0_SHIFT;

  00010	e1831202	 orr         r1, r3, r2, lsl #4

; 321  :     value |= (fifo1_enable) ? XLLP_CI_CIFR_FEN1 : 0;
; 322  :     value |= (fifo2_enable) ? XLLP_CI_CIFR_FEN2 : 0;

  00014	e59d3000	 ldr         r3, [sp]
  00018	13a02002	 movne       r2, #2
  0001c	03a02000	 moveq       r2, #0
  00020	e3530000	 cmp         r3, #0
  00024	13a03004	 movne       r3, #4
  00028	03a03000	 moveq       r3, #0
  0002c	e1822001	 orr         r2, r2, r1
  00030	e1833002	 orr         r3, r3, r2

; 323  :     value |= XLLP_CI_CIFR_RESETF | XLLP_CI_CIFR_FEN0;
; 324  :     WRITE_REG(XLLP_CIFR, value);    

  00034	e3833009	 orr         r3, r3, #9
  00038	e5803018	 str         r3, [r0, #0x18]

; 325  :     return; 
; 326  : }

  0003c	e12fff1e	 bx          lr
  00040		 |$M2954|

			 ENDP  ; |XllpCISetFIFO|

	EXPORT	|XllpCIResetFIFO|

  00000			 AREA	 |.pdata|, PDATA
|$T2964| DCD	|$LN5@XllpCIRese|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIResetFIFO| PROC

; 329  : {

  00000		 |$LN5@XllpCIRese|
  00000		 |$M2961|

; 330  :     unsigned int value;
; 331  :     value = READ_REG(XLLP_CIFR);
; 332  :     value |= XLLP_CI_CIFR_RESETF;

  00000	e5903018	 ldr         r3, [r0, #0x18]
  00004	e3833008	 orr         r3, r3, #8

; 333  :     WRITE_REG(XLLP_CIFR, value);    

  00008	e5803018	 str         r3, [r0, #0x18]

; 334  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M2962|

			 ENDP  ; |XllpCIResetFIFO|

	EXPORT	|XllpCISetInterruptMask|

  00000			 AREA	 |.pdata|, PDATA
|$T2973| DCD	|$LN5@XllpCISetI@2|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetInterruptMask| PROC

; 337  : {

  00000		 |$LN5@XllpCISetI@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M2970|

; 338  :     unsigned int value;
; 339  : 
; 340  :     // write mask in cicr0  
; 341  :     value = READ_REG(XLLP_CICR0);
; 342  :     value &= ~XLLP_CI_CICR0_INTERRUPT_MASK;
; 343  :     value |= (mask & XLLP_CI_CICR0_INTERRUPT_MASK);
; 344  :     WRITE_REG(XLLP_CICR0, value);   

  00004	e590e000	 ldr         lr, [r0]
  00008	e3e03c03	 mvn         r3, #3, 24
  0000c	e3a02c03	 mov         r2, #3, 24
  00010	e22330ff	 eor         r3, r3, #0xFF
  00014	e38220ff	 orr         r2, r2, #0xFF
  00018	e00ee003	 and         lr, lr, r3
  0001c	e0013002	 and         r3, r1, r2
  00020	e18e3003	 orr         r3, lr, r3
  00024	e5803000	 str         r3, [r0]

; 345  :     return; 
; 346  : }

  00028	e49de004	 ldr         lr, [sp], #4
  0002c	e12fff1e	 bx          lr
  00030		 |$M2971|

			 ENDP  ; |XllpCISetInterruptMask|

	EXPORT	|XllpCIGetInterruptMask|

  00000			 AREA	 |.pdata|, PDATA
|$T2983| DCD	|$LN5@XllpCIGetI|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIGetInterruptMask| PROC

; 349  : {

  00000		 |$LN5@XllpCIGetI|
  00000		 |$M2980|

; 350  :     unsigned int value;
; 351  : 
; 352  :     // write mask in cicr0  
; 353  :     value = READ_REG(XLLP_CICR0);
; 354  :     return (value & XLLP_CI_CICR0_INTERRUPT_MASK);

  00000	e5902000	 ldr         r2, [r0]
  00004	e3a03c03	 mov         r3, #3, 24
  00008	e38330ff	 orr         r3, r3, #0xFF
  0000c	e0020003	 and         r0, r2, r3

; 355  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M2981|

			 ENDP  ; |XllpCIGetInterruptMask|

	EXPORT	|XllpCIClearInterruptStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T2992| DCD	|$LN5@XllpCIClea|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIClearInterruptStatus| PROC

; 358  : {

  00000		 |$LN5@XllpCIClea|
  00000		 |$M2989|

; 359  :     // write 1 to clear
; 360  :     WRITE_REG(XLLP_CISR, status);

  00000	e5801014	 str         r1, [r0, #0x14]

; 361  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M2990|

			 ENDP  ; |XllpCIClearInterruptStatus|

	EXPORT	|XllpCIGetInterruptStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T3002| DCD	|$LN5@XllpCIGetI@2|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIGetInterruptStatus| PROC

; 364  : {

  00000		 |$LN5@XllpCIGetI@2|
  00000		 |$M2999|

; 365  :     return  READ_REG(XLLP_CISR);

  00000	e5900014	 ldr         r0, [r0, #0x14]

; 366  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M3000|

			 ENDP  ; |XllpCIGetInterruptStatus|

	EXPORT	|XllpCISetRegisterValue|

  00000			 AREA	 |.pdata|, PDATA
|$T3012| DCD	|$LN5@XllpCISetR|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetRegisterValue| PROC

; 369  : {

  00000		 |$LN5@XllpCISetR|
  00000		 |$M3009|

; 370  : 	WRITE_REG(reg_offset, value);

  00000	e7802001	 str         r2, [r0, +r1]

; 371  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M3010|

			 ENDP  ; |XllpCISetRegisterValue|

	EXPORT	|XllpCIInit|
	IMPORT	|XllpUnlock|
	IMPORT	|XllpLock|

  00000			 AREA	 |.pdata|, PDATA
|$T3021| DCD	|$LN5@XllpCIInit|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIInit| PROC

; 377  : {

  00000		 |$LN5@XllpCIInit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M3018|
  00004	e1a04001	 mov         r4, r1
  00008	e1a02000	 mov         r2, r0
  0000c	e3a03c03	 mov         r3, #3, 24

; 378  :     P_XLLP_CLKMGR_T pclk;
; 379  : 
; 380  :     // clear all CI registers
; 381  :     WRITE_REG(XLLP_CICR0, 0x3FF);   // disable all interrupts

  00010	e38330ff	 orr         r3, r3, #0xFF

; 382  :     WRITE_REG(XLLP_CICR1, 0);
; 383  :     WRITE_REG(XLLP_CICR2, 0);
; 384  :     WRITE_REG(XLLP_CICR3, 0);
; 385  :     WRITE_REG(XLLP_CICR4, 0);
; 386  :     WRITE_REG(XLLP_CISR, ~0);

  00014	e5823000	 str         r3, [r2]
  00018	e3a03000	 mov         r3, #0
  0001c	e3e01000	 mvn         r1, #0

; 387  :     WRITE_REG(XLLP_CIFR,  0);
; 388  :     WRITE_REG(XLLP_CITOR, 0);
; 389  : 
; 390  :     // enable CI clock
; 391  :     XllpLock(CKEN);

  00020	e3a00026	 mov         r0, #0x26
  00024	e5823004	 str         r3, [r2, #4]
  00028	e5823008	 str         r3, [r2, #8]
  0002c	e582300c	 str         r3, [r2, #0xC]
  00030	e5823010	 str         r3, [r2, #0x10]
  00034	e5823018	 str         r3, [r2, #0x18]
  00038	e582301c	 str         r3, [r2, #0x1C]
  0003c	e5821014	 str         r1, [r2, #0x14]
  00040	eb000000	 bl          XllpLock

; 392  :     pclk = (P_XLLP_CLKMGR_T)clk_regs_base;
; 393  :     pclk->cken |= XLLP_CLKEN_CAMERA;

  00044	e5943004	 ldr         r3, [r4, #4]

; 394  :     XllpUnlock(CKEN);

  00048	e3a00026	 mov         r0, #0x26
  0004c	e3833401	 orr         r3, r3, #1, 8
  00050	e5843004	 str         r3, [r4, #4]
  00054	eb000000	 bl          XllpUnlock

; 395  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M3019|

			 ENDP  ; |XllpCIInit|

	EXPORT	|XllpCIDeInit|

  00000			 AREA	 |.pdata|, PDATA
|$T3029| DCD	|$LN5@XllpCIDeIn|
	DCD	0x40000b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIDeInit| PROC

; 398  : {

  00000		 |$LN5@XllpCIDeIn|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M3026|
  00004	e1a04001	 mov         r4, r1

; 399  :     P_XLLP_CLKMGR_T pclk;
; 400  : 
; 401  :     // disable CI clock
; 402  :     XllpLock(CKEN);

  00008	e3a00026	 mov         r0, #0x26
  0000c	eb000000	 bl          XllpLock

; 403  :     pclk = (P_XLLP_CLKMGR_T)clk_regs_base;
; 404  :     pclk->cken &= ~XLLP_CLKEN_CAMERA;

  00010	e5943004	 ldr         r3, [r4, #4]

; 405  :     XllpUnlock(CKEN);

  00014	e3a00026	 mov         r0, #0x26
  00018	e3c33401	 bic         r3, r3, #1, 8
  0001c	e5843004	 str         r3, [r4, #4]
  00020	eb000000	 bl          XllpUnlock

; 406  : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M3027|

			 ENDP  ; |XllpCIDeInit|

	EXPORT	|XllpCIEnable|

  00000			 AREA	 |.pdata|, PDATA
|$T3039| DCD	|$LN6@XllpCIEnab|
	DCD	0x40000600
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIEnable| PROC

; 409  : {

  00000		 |$LN6@XllpCIEnab|
  00000		 |$M3036|
  00000	e3510000	 cmp         r1, #0

; 410  :     unsigned int value;
; 411  : 
; 412  :     // write mask in cicr0  
; 413  :     value = READ_REG(XLLP_CICR0);
; 414  :     value |= XLLP_CI_CICR0_ENB;

  00004	e5903000	 ldr         r3, [r0]
  00008	e3833201	 orr         r3, r3, #1, 4

; 415  :     if (dma_en) {
; 416  :         value |= XLLP_CI_CICR0_DMA_EN;

  0000c	13833102	 orrne       r3, r3, #2, 2

; 417  :     }
; 418  :     WRITE_REG(XLLP_CICR0, value);   

  00010	e5803000	 str         r3, [r0]

; 419  :     return; 
; 420  : }

  00014	e12fff1e	 bx          lr
  00018		 |$M3037|

			 ENDP  ; |XllpCIEnable|

	EXPORT	|XllpCIDisableComplete|

  00000			 AREA	 |.pdata|, PDATA
|$T3047| DCD	|$LN5@XllpCIDisa|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIDisableComplete| PROC

; 423  : {

  00000		 |$LN5@XllpCIDisa|
  00000		 |$M3044|

; 424  : 	unsigned int value;
; 425  : 	
; 426  : 	// Clear the disable control bit.
; 427  : 	value = READ_REG(XLLP_CICR0);
; 428  : 	value &= ~XLLP_CI_CICR0_DIS;

  00000	e5903000	 ldr         r3, [r0]
  00004	e3c33302	 bic         r3, r3, #2, 6

; 429  : 	WRITE_REG( XLLP_CICR0, value );

  00008	e5803000	 str         r3, [r0]

; 430  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M3045|

			 ENDP  ; |XllpCIDisableComplete|

	EXPORT	|XllpCIDisable|
	IMPORT	|XllpOstDelayMilliSeconds|

  00000			 AREA	 |.pdata|, PDATA
|$T3065| DCD	|$LN16@XllpCIDisa@2|
	DCD	0x40002b02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCIDisable| PROC

; 433  : {

  00000		 |$LN16@XllpCIDisa@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M3062|
  00008	e1a0e003	 mov         lr, r3
  0000c	e3520000	 cmp         r2, #0
  00010	e1a06001	 mov         r6, r1
  00014	e1a05000	 mov         r5, r0

; 434  :     volatile unsigned int value, mask;
; 435  :     int retry;
; 436  :     
; 437  :     // write control bit in cicr0   
; 438  :     value = READ_REG(XLLP_CICR0);

  00018	e5952000	 ldr         r2, [r5]

; 439  :     if (quick) {
; 440  :         value &= ~XLLP_CI_CICR0_ENB;
; 441  :         mask = XLLP_CI_CISR_CQD;

  0001c	13a03040	 movne       r3, #0x40
  00020	e58d2000	 str         r2, [sp]
  00024	159d2000	 ldrne       r2, [sp]
  00028	13c22201	 bicne       r2, r2, #1, 4
  0002c	158d2000	 strne       r2, [sp]
  00030	158d3004	 strne       r3, [sp, #4]

; 442  :     }
; 443  :     else {
; 444  :         value |= XLLP_CI_CICR0_DIS;

  00034	059d3000	 ldreq       r3, [sp]

; 445  :         mask = XLLP_CI_CISR_CDD;

  00038	03a02020	 moveq       r2, #0x20
  0003c	03833302	 orreq       r3, r3, #2, 6
  00040	058d3000	 streq       r3, [sp]
  00044	058d2004	 streq       r2, [sp, #4]

; 446  :     }
; 447  :     WRITE_REG(XLLP_CICR0, value);   

  00048	e59d3000	 ldr         r3, [sp]

; 448  : 
; 449  : 	if( wait_for_disable_complete )

  0004c	e35e0000	 cmp         lr, #0
  00050	e5853000	 str         r3, [r5]
  00054	0a000010	 beq         |$LN5@XllpCIDisa@2|

; 450  : 	{
; 451  : 	    // wait shutdown complete
; 452  : 	    retry = 50;

  00058	e3a04032	 mov         r4, #0x32
  0005c		 |$LL4@XllpCIDisa@2|

; 453  : 	    while ( retry-- > 0 ) {
; 454  : 	        value = READ_REG(XLLP_CISR);        

  0005c	e5953014	 ldr         r3, [r5, #0x14]
  00060	e2444001	 sub         r4, r4, #1
  00064	e58d3000	 str         r3, [sp]

; 455  : 	        if ( value & mask ) {

  00068	e59d2004	 ldr         r2, [sp, #4]
  0006c	e59d3000	 ldr         r3, [sp]
  00070	e1120003	 tst         r2, r3
  00074	1a000006	 bne         |$LN11@XllpCIDisa@2|

; 458  : 	        }
; 459  : 	        XllpOstDelayMilliSeconds((P_XLLP_OST_T)ost_reg_base, 10);

  00078	e3a0100a	 mov         r1, #0xA
  0007c	e1a00006	 mov         r0, r6
  00080	eb000000	 bl          XllpOstDelayMilliSeconds
  00084	e3540000	 cmp         r4, #0
  00088	cafffff3	 bgt         |$LL4@XllpCIDisa@2|

; 464  : 	
; 465  :     return -1; 

  0008c	e3e00000	 mvn         r0, #0
  00090	ea000002	 b           |$LN8@XllpCIDisa@2|
  00094		 |$LN11@XllpCIDisa@2|

; 456  : 	            WRITE_REG(XLLP_CISR, mask);

  00094	e59d3004	 ldr         r3, [sp, #4]

; 457  : 	            return 0;

  00098	e5853014	 str         r3, [r5, #0x14]
  0009c		 |$LN5@XllpCIDisa@2|

; 460  : 	    }
; 461  : 	}
; 462  : 	else
; 463  : 		return 0;

  0009c	e3a00000	 mov         r0, #0
  000a0		 |$LN8@XllpCIDisa@2|

; 466  : }

  000a0	e28dd008	 add         sp, sp, #8
  000a4	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$M3063|

			 ENDP  ; |XllpCIDisable|

	EXPORT	|XllpCISlaveCaptureEnable|

  00000			 AREA	 |.pdata|, PDATA
|$T3073| DCD	|$LN5@XllpCISlav|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISlaveCaptureEnable| PROC

; 469  : {

  00000		 |$LN5@XllpCISlav|
  00000		 |$M3070|

; 470  :     unsigned int value;
; 471  : 
; 472  :     // write mask in cicr0  
; 473  :     value = READ_REG(XLLP_CICR0);
; 474  :     value |= XLLP_CI_CICR0_SL_CAP_EN;

  00000	e5903000	 ldr         r3, [r0]
  00004	e3833202	 orr         r3, r3, #2, 4

; 475  :     WRITE_REG(XLLP_CICR0, value);   

  00008	e5803000	 str         r3, [r0]

; 476  :     return; 
; 477  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M3071|

			 ENDP  ; |XllpCISlaveCaptureEnable|

	EXPORT	|XllpCISlaveCaptureDisable|

  00000			 AREA	 |.pdata|, PDATA
|$T3081| DCD	|$LN5@XllpCISlav@2|
	DCD	0x40000400
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISlaveCaptureDisable| PROC

; 480  : {

  00000		 |$LN5@XllpCISlav@2|
  00000		 |$M3078|

; 481  :     unsigned int value;
; 482  : 
; 483  :     // write mask in cicr0  
; 484  :     value = READ_REG(XLLP_CICR0);
; 485  :     value &= ~XLLP_CI_CICR0_SL_CAP_EN;

  00000	e5903000	 ldr         r3, [r0]
  00004	e3c33202	 bic         r3, r3, #2, 4

; 486  :     WRITE_REG(XLLP_CICR0, value);   

  00008	e5803000	 str         r3, [r0]

; 487  :     return; 
; 488  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$M3079|

			 ENDP  ; |XllpCISlaveCaptureDisable|

	END
