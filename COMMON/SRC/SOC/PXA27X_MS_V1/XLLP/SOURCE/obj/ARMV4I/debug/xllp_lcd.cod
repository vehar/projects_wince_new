; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_lcd.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|LS022Q8DD06_DATA_SET_1| [ DATA ]
	EXPORT	|LS022Q8DD06_DATA_SET_2| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|LS022Q8DD06_DATA_SET_1| DCW 0xf
	DCW	0x101
	DCW	0x4
	DCW	0x101
	DCW	0x0
	DCW	0x103
	DCW	0x1
	DCW	0x10a
	DCW	0x2
	DCW	0x102
	DCW	0x9
	DCW	0x100
	DCW	0xa
	DCW	0x103
	DCW	0x19
	DCW	0x11a
	DCW	0x1a
	DCW	0x115
	DCW	0x1b
	DCW	0x148
	DCW	0x1c
	DCW	0x100
	DCW	0x21
	DCW	0x110
	DCW	0x18
	DCW	0x109
	DCW	0x3
	DCW	0x100
	DCW	0x5
	DCW	0x100
	DCW	0x6
	DCW	0x124
	DCW	0x8
	DCW	0x10e
	DCW	0xb
	DCW	0x105
	DCW	0xc
	DCW	0x100
	DCW	0x24
	DCW	0x102
	DCW	0x25
	DCW	0x10e
	DCW	0x26
	DCW	0x112
	DCW	0x27
	DCW	0x11e
	DCW	0x28
	DCW	0x122
	DCW	0x29
	DCW	0x12e
	DCW	0x2a
	DCW	0x137
	DCW	0x2b
	DCW	0x13a
	DCW	0x2c
	DCW	0x137
	DCW	0x2d
	DCW	0x13a
	DCW	0x2e
	DCW	0x137
	DCW	0x2f
	DCW	0x13a
	DCW	0x30
	DCW	0x180
	DCW	0x31
	DCW	0x101
	DCW	0x32
	DCW	0x136
	DCW	0x33
	DCW	0x101
|LS022Q8DD06_DATA_SET_2| DCW 0x18
	DCW	0x179
	DCW	0x1b
	DCW	0x149
	DCW	0x18
	DCW	0x17f
	DCW	0x36
	DCW	0x101
	DCW	0x6
	DCW	0x125
	DCW	0x4
	DCW	0x100
	DCW	0xc
	DCW	0x152
	DCW	0x21
	DCW	0x100
	DCW	0x6
	DCW	0x135
	EXPORT	|XllpLCDLoadPalette|
	EXPORT	|LCDEnableController|
	EXPORT	|LCDClearStatusReg|
	EXPORT	|LCDInitController|
	EXPORT	|LCDSetupGPIOs|
	EXPORT	|XllpLCDInit|

  00000			 AREA	 |.pdata|, PDATA
|$T1177| DCD	|$LN6@XllpLCDIni|
	DCD	0x40001b04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_lcd.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpLCDInit| PROC

; 70   : {

  00000		 |$LN6@XllpLCDIni|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M1174|

; 71   :     XLLP_STATUS_T status = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 72   : 
; 73   :     // Initialize the GPIO registers for proper LCD Controller operation
; 74   :     LCDSetupGPIOs(pXllpLCD);

  00018	e59d0010	 ldr         r0, [sp, #0x10]
  0001c	eb000000	 bl          LCDSetupGPIOs

; 75   : 
; 76   :     // Initialize the LCD Controller and frame descriptors
; 77   :     LCDInitController(pXllpLCD);

  00020	e59d0010	 ldr         r0, [sp, #0x10]
  00024	eb000000	 bl          LCDInitController

; 78   : 
; 79   :     // Clear LCD Controller status register
; 80   :     LCDClearStatusReg(pXllpLCD);

  00028	e59d0010	 ldr         r0, [sp, #0x10]
  0002c	eb000000	 bl          LCDClearStatusReg

; 81   : 
; 82   :     // Enable the LCD controller
; 83   :     LCDEnableController(pXllpLCD);

  00030	e59d0010	 ldr         r0, [sp, #0x10]
  00034	eb000000	 bl          LCDEnableController

; 84   : 
; 85   :     // If required, load the default palette into palette ram
; 86   :     // and feed this to the LCD controller.
; 87   :     if(pXllpLCD->BPP < BPP_16)

  00038	e59d3010	 ldr         r3, [sp, #0x10]
  0003c	e2833028	 add         r3, r3, #0x28
  00040	e5933000	 ldr         r3, [r3]
  00044	e3530010	 cmp         r3, #0x10
  00048	2a000001	 bcs         |$LN1@XllpLCDIni|

; 88   :     {
; 89   :         XllpLCDLoadPalette(pXllpLCD);

  0004c	e59d0010	 ldr         r0, [sp, #0x10]
  00050	eb000000	 bl          XllpLCDLoadPalette
  00054		 |$LN1@XllpLCDIni|

; 90   :     }
; 91   : 
; 92   :     return status;

  00054	e59d3000	 ldr         r3, [sp]
  00058	e58d3004	 str         r3, [sp, #4]

; 93   : }

  0005c	e59d0004	 ldr         r0, [sp, #4]
  00060	e28dd008	 add         sp, sp, #8
  00064	e89d6000	 ldmia       sp, {sp, lr}
  00068	e12fff1e	 bx          lr
  0006c		 |$M1175|

			 ENDP  ; |XllpLCDInit|


  00008			 AREA	 |.pdata|, PDATA
|$T1182| DCD	|$LN8@XllpLCDLoa|
	DCD	0x40007304
; Function compile flags: /Odtp

  0006c			 AREA	 |.text|, CODE, ARM

  0006c		 |XllpLCDLoadPalette| PROC

; 96   : {   

  0006c		 |$LN8@XllpLCDLoa|
  0006c	e1a0c00d	 mov         r12, sp
  00070	e92d0001	 stmdb       sp!, {r0}
  00074	e92d5000	 stmdb       sp!, {r12, lr}
  00078	e24dd004	 sub         sp, sp, #4
  0007c		 |$M1179|

; 97   :     volatile LCDRegs *p_LCDRegs;
; 98   : 
; 99   :     p_LCDRegs = (LCDRegs *) pXllpLCD->LCDC;

  0007c	e59d300c	 ldr         r3, [sp, #0xC]
  00080	e2833008	 add         r3, r3, #8
  00084	e5933000	 ldr         r3, [r3]
  00088	e58d3000	 str         r3, [sp]

; 100  : 
; 101  :     // Reconfigure the second frame descriptor so that when loaded,
; 102  :     // this descriptor loops to itself.
; 103  :     pXllpLCD->frameDescriptorCh0fd2->FDADR = LCD_FDADR(pXllpLCD->frameDescriptorCh0fd2->PHYSADDR);

  0008c	e59d300c	 ldr         r3, [sp, #0xC]
  00090	e283306c	 add         r3, r3, #0x6C
  00094	e5933000	 ldr         r3, [r3]
  00098	e2833010	 add         r3, r3, #0x10
  0009c	e5932000	 ldr         r2, [r3]
  000a0	e3e0300f	 mvn         r3, #0xF
  000a4	e0022003	 and         r2, r2, r3
  000a8	e59d300c	 ldr         r3, [sp, #0xC]
  000ac	e283306c	 add         r3, r3, #0x6C
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e5832000	 str         r2, [r3]

; 104  : 
; 105  :     // Reconfigure the palette frame descriptor so that it loads the second frame descriptor
; 106  :     pXllpLCD->frameDescriptorPalette->FDADR = LCD_FDADR(pXllpLCD->frameDescriptorCh0fd2->FDADR);

  000b8	e59d300c	 ldr         r3, [sp, #0xC]
  000bc	e283306c	 add         r3, r3, #0x6C
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e5932000	 ldr         r2, [r3]
  000c8	e3e0300f	 mvn         r3, #0xF
  000cc	e0022003	 and         r2, r2, r3
  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e2833074	 add         r3, r3, #0x74
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e5832000	 str         r2, [r3]

; 107  :     pXllpLCD->frameDescriptorPalette->FSADR = LCD_FSADR(pXllpLCD->_PALETTE_BUFFER_BASE_PHYSICAL); 

  000e0	e59d300c	 ldr         r3, [sp, #0xC]
  000e4	e2833038	 add         r3, r3, #0x38
  000e8	e5932000	 ldr         r2, [r3]
  000ec	e3e03007	 mvn         r3, #7
  000f0	e0022003	 and         r2, r2, r3
  000f4	e59d300c	 ldr         r3, [sp, #0xC]
  000f8	e2833074	 add         r3, r3, #0x74
  000fc	e5933000	 ldr         r3, [r3]
  00100	e2833004	 add         r3, r3, #4
  00104	e5832000	 str         r2, [r3]

; 108  :     pXllpLCD->frameDescriptorPalette->FIDR  = LCD_FIDR(0);

  00108	e59d300c	 ldr         r3, [sp, #0xC]
  0010c	e2833074	 add         r3, r3, #0x74
  00110	e5933000	 ldr         r3, [r3]
  00114	e2832008	 add         r2, r3, #8
  00118	e3a03000	 mov         r3, #0
  0011c	e5823000	 str         r3, [r2]

; 109  : 
; 110  : 
; 111  :     if ( (p_LCDRegs->OVL1C1 & LCD_O1EN) || (p_LCDRegs->OVL2C1 & LCD_O2EN)) 

  00120	e59d3000	 ldr         r3, [sp]
  00124	e2833050	 add         r3, r3, #0x50
  00128	e5933000	 ldr         r3, [r3]
  0012c	e3130102	 tst         r3, #2, 2
  00130	1a000004	 bne         |$LN2@XllpLCDLoa|
  00134	e59d3000	 ldr         r3, [sp]
  00138	e2833070	 add         r3, r3, #0x70
  0013c	e5933000	 ldr         r3, [r3]
  00140	e3130102	 tst         r3, #2, 2
  00144	0a00000a	 beq         |$LN3@XllpLCDLoa|
  00148		 |$LN2@XllpLCDLoa|

; 112  :     {
; 113  :         // Overlays are enabled
; 114  :         pXllpLCD->frameDescriptorPalette->LDCMD = LCD_Len(pXllpLCD->PaletteSize << 1) | LCD_Pal;

  00148	e59d300c	 ldr         r3, [sp, #0xC]
  0014c	e2833024	 add         r3, r3, #0x24
  00150	e5933000	 ldr         r3, [r3]
  00154	e1a03083	 mov         r3, r3, lsl #1
  00158	e3832301	 orr         r2, r3, #1, 6
  0015c	e59d300c	 ldr         r3, [sp, #0xC]
  00160	e2833074	 add         r3, r3, #0x74
  00164	e5933000	 ldr         r3, [r3]
  00168	e283300c	 add         r3, r3, #0xC
  0016c	e5832000	 str         r2, [r3]

; 115  :     } else

  00170	ea000008	 b           |$LN1@XllpLCDLoa|
  00174		 |$LN3@XllpLCDLoa|

; 116  :     {
; 117  :         // Overlays are disabled
; 118  :         pXllpLCD->frameDescriptorPalette->LDCMD = LCD_Len(pXllpLCD->PaletteSize) | LCD_Pal;

  00174	e59d300c	 ldr         r3, [sp, #0xC]
  00178	e2833024	 add         r3, r3, #0x24
  0017c	e5933000	 ldr         r3, [r3]
  00180	e3832301	 orr         r2, r3, #1, 6
  00184	e59d300c	 ldr         r3, [sp, #0xC]
  00188	e2833074	 add         r3, r3, #0x74
  0018c	e5933000	 ldr         r3, [r3]
  00190	e283300c	 add         r3, r3, #0xC
  00194	e5832000	 str         r2, [r3]
  00198		 |$LN1@XllpLCDLoa|

; 119  :     }
; 120  : 
; 121  :     pXllpLCD->frameDescriptorPalette->PHYSADDR = LCD_FDADR(pXllpLCD->_PALETTE_FRAME_DESCRIPTOR_BASE_PHYSICAL);

  00198	e59d300c	 ldr         r3, [sp, #0xC]
  0019c	e2833058	 add         r3, r3, #0x58
  001a0	e5932000	 ldr         r2, [r3]
  001a4	e3e0300f	 mvn         r3, #0xF
  001a8	e0022003	 and         r2, r2, r3
  001ac	e59d300c	 ldr         r3, [sp, #0xC]
  001b0	e2833074	 add         r3, r3, #0x74
  001b4	e5933000	 ldr         r3, [r3]
  001b8	e2833010	 add         r3, r3, #0x10
  001bc	e5832000	 str         r2, [r3]

; 122  : 
; 123  :     // Insert the palette descriptor into the descriptor chain to load the palette.
; 124  :     // When this load completes, fd2 is automatically loaded next in the chain.  
; 125  :     // fd2 now loops to itself and continues to load frame data.
; 126  :     pXllpLCD->frameDescriptorCh0fd1->FDADR = LCD_FDADR(pXllpLCD->_PALETTE_FRAME_DESCRIPTOR_BASE_PHYSICAL);      

  001c0	e59d300c	 ldr         r3, [sp, #0xC]
  001c4	e2833058	 add         r3, r3, #0x58
  001c8	e5932000	 ldr         r2, [r3]
  001cc	e3e0300f	 mvn         r3, #0xF
  001d0	e0022003	 and         r2, r2, r3
  001d4	e59d300c	 ldr         r3, [sp, #0xC]
  001d8	e2833068	 add         r3, r3, #0x68
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e5832000	 str         r2, [r3]

; 127  : 
; 128  :     // swap frame descriptor pointers so that this operation is reversed the next time through
; 129  :     pXllpLCD->frameDescriptorTemp   = pXllpLCD->frameDescriptorCh0fd1;

  001e4	e59d300c	 ldr         r3, [sp, #0xC]
  001e8	e2831068	 add         r1, r3, #0x68
  001ec	e59d300c	 ldr         r3, [sp, #0xC]
  001f0	e2832078	 add         r2, r3, #0x78
  001f4	e5913000	 ldr         r3, [r1]
  001f8	e5823000	 str         r3, [r2]

; 130  :     pXllpLCD->frameDescriptorCh0fd1 = pXllpLCD->frameDescriptorCh0fd2;

  001fc	e59d300c	 ldr         r3, [sp, #0xC]
  00200	e283106c	 add         r1, r3, #0x6C
  00204	e59d300c	 ldr         r3, [sp, #0xC]
  00208	e2832068	 add         r2, r3, #0x68
  0020c	e5913000	 ldr         r3, [r1]
  00210	e5823000	 str         r3, [r2]

; 131  :     pXllpLCD->frameDescriptorCh0fd2 = pXllpLCD->frameDescriptorTemp;

  00214	e59d300c	 ldr         r3, [sp, #0xC]
  00218	e2831078	 add         r1, r3, #0x78
  0021c	e59d300c	 ldr         r3, [sp, #0xC]
  00220	e283206c	 add         r2, r3, #0x6C
  00224	e5913000	 ldr         r3, [r1]
  00228	e5823000	 str         r3, [r2]

; 132  : }

  0022c	e28dd004	 add         sp, sp, #4
  00230	e89d6000	 ldmia       sp, {sp, lr}
  00234	e12fff1e	 bx          lr
  00238		 |$M1180|

			 ENDP  ; |XllpLCDLoadPalette|

	EXPORT	|XllpLCDSuspend|

  00010			 AREA	 |.pdata|, PDATA
|$T1187| DCD	|$LN13@XllpLCDSus|
	DCD	0x40003b04
; Function compile flags: /Odtp

  00238			 AREA	 |.text|, CODE, ARM

  00238		 |XllpLCDSuspend| PROC

; 135  : {

  00238		 |$LN13@XllpLCDSus|
  00238	e1a0c00d	 mov         r12, sp
  0023c	e92d0003	 stmdb       sp!, {r0, r1}
  00240	e92d5000	 stmdb       sp!, {r12, lr}
  00244	e24dd00c	 sub         sp, sp, #0xC
  00248		 |$M1184|

; 136  :     volatile LCDRegs *p_LCDRegs;
; 137  :     volatile XLLP_GPIO_T *p_GPIORegs;
; 138  : 
; 139  :     p_LCDRegs = (LCDRegs *) pXllpLCD->LCDC;

  00248	e59d3014	 ldr         r3, [sp, #0x14]
  0024c	e2833008	 add         r3, r3, #8
  00250	e5933000	 ldr         r3, [r3]
  00254	e58d3004	 str         r3, [sp, #4]

; 140  :     p_GPIORegs = (XLLP_GPIO_T *) pXllpLCD->GPIO;

  00258	e59d3014	 ldr         r3, [sp, #0x14]
  0025c	e5933000	 ldr         r3, [r3]
  00260	e58d3000	 str         r3, [sp]

; 141  : 
; 142  :     switch(SuspendType)

  00264	e59d3018	 ldr         r3, [sp, #0x18]
  00268	e58d3008	 str         r3, [sp, #8]
  0026c	e59d3008	 ldr         r3, [sp, #8]
  00270	e3530000	 cmp         r3, #0
  00274	0a000003	 beq         |$LN6@XllpLCDSus|
  00278	e59d3008	 ldr         r3, [sp, #8]
  0027c	e3530001	 cmp         r3, #1
  00280	0a000017	 beq         |$LN2@XllpLCDSus|
  00284	ea00001c	 b           |$LN1@XllpLCDSus|
  00288		 |$LN6@XllpLCDSus|

; 143  :     {
; 144  :     case Suspend_Graceful:
; 145  :         // suspend if LCD is enabled
; 146  :         if (p_LCDRegs->LCCR0 & LCD_ENB)

  00288	e59d3004	 ldr         r3, [sp, #4]
  0028c	e5933000	 ldr         r3, [r3]
  00290	e3130001	 tst         r3, #1
  00294	0a000011	 beq         |$LN5@XllpLCDSus|

; 147  :         {
; 148  :             // Initiate power down sequence
; 149  :             p_LCDRegs->LCCR0 |= LCD_DIS;

  00298	e59d3004	 ldr         r3, [sp, #4]
  0029c	e5933000	 ldr         r3, [r3]
  002a0	e3832b01	 orr         r2, r3, #1, 22
  002a4	e59d3004	 ldr         r3, [sp, #4]
  002a8	e5832000	 str         r2, [r3]
  002ac		 |$LN4@XllpLCDSus|

; 150  : 
; 151  :             // Wait for LDD bit to get set once the last DMA transfer has completed
; 152  :             while(!(p_LCDRegs->LCSR0 & LCD_LDD));

  002ac	e59d3004	 ldr         r3, [sp, #4]
  002b0	e2833038	 add         r3, r3, #0x38
  002b4	e5933000	 ldr         r3, [r3]
  002b8	e3130001	 tst         r3, #1
  002bc	1a000000	 bne         |$LN3@XllpLCDSus|
  002c0	eafffff9	 b           |$LN4@XllpLCDSus|
  002c4		 |$LN3@XllpLCDSus|

; 153  : 
; 154  :             // Clear the sticky LDD bit
; 155  :             p_LCDRegs->LCSR0 |= LCD_LDD;

  002c4	e59d3004	 ldr         r3, [sp, #4]
  002c8	e2833038	 add         r3, r3, #0x38
  002cc	e5933000	 ldr         r3, [r3]
  002d0	e3832001	 orr         r2, r3, #1
  002d4	e59d3004	 ldr         r3, [sp, #4]
  002d8	e2833038	 add         r3, r3, #0x38
  002dc	e5832000	 str         r2, [r3]
  002e0		 |$LN5@XllpLCDSus|

; 156  :         }
; 157  :         break;

  002e0	ea000005	 b           |$LN7@XllpLCDSus|
  002e4		 |$LN2@XllpLCDSus|

; 158  :     case Suspend_Immediate:
; 159  :         p_LCDRegs->LCCR0 &= ~LCD_ENB;

  002e4	e59d3004	 ldr         r3, [sp, #4]
  002e8	e5932000	 ldr         r2, [r3]
  002ec	e3e03001	 mvn         r3, #1
  002f0	e0022003	 and         r2, r2, r3
  002f4	e59d3004	 ldr         r3, [sp, #4]
  002f8	e5832000	 str         r2, [r3]
  002fc		 |$LN1@XllpLCDSus|
  002fc		 |$LN7@XllpLCDSus|

; 160  :         break;
; 161  :     default :
; 162  :         break;
; 163  :     }
; 164  : 
; 165  :     // don't use lock/unlock here because system call may be unavailable.
; 166  :     p_GPIORegs->GPCR0   |= XLLP_GPIO_BIT_PWM_OUT0;

  002fc	e59d3000	 ldr         r3, [sp]
  00300	e2833024	 add         r3, r3, #0x24
  00304	e5933000	 ldr         r3, [r3]
  00308	e3832801	 orr         r2, r3, #1, 16
  0030c	e59d3000	 ldr         r3, [sp]
  00310	e2833024	 add         r3, r3, #0x24
  00314	e5832000	 str         r2, [r3]

; 167  : 
; 168  : }

  00318	e28dd00c	 add         sp, sp, #0xC
  0031c	e89d6000	 ldmia       sp, {sp, lr}
  00320	e12fff1e	 bx          lr
  00324		 |$M1185|

			 ENDP  ; |XllpLCDSuspend|

	EXPORT	|XllpLCDResume|

  00018			 AREA	 |.pdata|, PDATA
|$T1192| DCD	|$LN5@XllpLCDRes|
	DCD	0x40000703
; Function compile flags: /Odtp

  00324			 AREA	 |.text|, CODE, ARM

  00324		 |XllpLCDResume| PROC

; 171  : {

  00324		 |$LN5@XllpLCDRes|
  00324	e1a0c00d	 mov         r12, sp
  00328	e92d0001	 stmdb       sp!, {r0}
  0032c	e92d5000	 stmdb       sp!, {r12, lr}
  00330		 |$M1189|

; 172  :     XllpLCDInit(pXllpLCD);

  00330	e59d0008	 ldr         r0, [sp, #8]
  00334	eb000000	 bl          XllpLCDInit

; 173  : }

  00338	e89d6000	 ldmia       sp, {sp, lr}
  0033c	e12fff1e	 bx          lr
  00340		 |$M1190|

			 ENDP  ; |XllpLCDResume|

	EXPORT	|XllpLCDSetDisplayPage|

  00020			 AREA	 |.pdata|, PDATA
|$T1197| DCD	|$LN5@XllpLCDSet|
	DCD	0x40004403
; Function compile flags: /Odtp

  00340			 AREA	 |.text|, CODE, ARM

  00340		 |XllpLCDSetDisplayPage| PROC

; 176  : {

  00340		 |$LN5@XllpLCDSet|
  00340	e1a0c00d	 mov         r12, sp
  00344	e92d0003	 stmdb       sp!, {r0, r1}
  00348	e92d5000	 stmdb       sp!, {r12, lr}
  0034c		 |$M1194|

; 177  :     // Set the physical address of the frame buffer for all three frame descriptors
; 178  :     // Make sure that you've initialized FrameBufferSize before calling this function either manually
; 179  :     // or through a call to XllpLCDInit().
; 180  :     pXllpLCD->CurrentPage = page;

  0034c	e59d3008	 ldr         r3, [sp, #8]
  00350	e2832030	 add         r2, r3, #0x30
  00354	e59d300c	 ldr         r3, [sp, #0xC]
  00358	e5823000	 str         r3, [r2]

; 181  :     pXllpLCD->frameDescriptorCh0fd1->FSADR = LCD_FSADR(pXllpLCD->_FRAME_BUFFER_BASE_PHYSICAL + pXllpLCD->CurrentPage*pXllpLCD->FrameBufferSize);

  0035c	e59d3008	 ldr         r3, [sp, #8]
  00360	e2830034	 add         r0, r3, #0x34
  00364	e59d3008	 ldr         r3, [sp, #8]
  00368	e2832030	 add         r2, r3, #0x30
  0036c	e59d3008	 ldr         r3, [sp, #8]
  00370	e2833020	 add         r3, r3, #0x20
  00374	e5921000	 ldr         r1, [r2]
  00378	e5933000	 ldr         r3, [r3]
  0037c	e0020391	 mul         r2, r1, r3
  00380	e5903000	 ldr         r3, [r0]
  00384	e0832002	 add         r2, r3, r2
  00388	e3e03007	 mvn         r3, #7
  0038c	e0022003	 and         r2, r2, r3
  00390	e59d3008	 ldr         r3, [sp, #8]
  00394	e2833068	 add         r3, r3, #0x68
  00398	e5933000	 ldr         r3, [r3]
  0039c	e2833004	 add         r3, r3, #4
  003a0	e5832000	 str         r2, [r3]

; 182  :     pXllpLCD->frameDescriptorCh0fd2->FSADR = LCD_FSADR(pXllpLCD->_FRAME_BUFFER_BASE_PHYSICAL + pXllpLCD->CurrentPage*pXllpLCD->FrameBufferSize);

  003a4	e59d3008	 ldr         r3, [sp, #8]
  003a8	e2830034	 add         r0, r3, #0x34
  003ac	e59d3008	 ldr         r3, [sp, #8]
  003b0	e2832030	 add         r2, r3, #0x30
  003b4	e59d3008	 ldr         r3, [sp, #8]
  003b8	e2833020	 add         r3, r3, #0x20
  003bc	e5921000	 ldr         r1, [r2]
  003c0	e5933000	 ldr         r3, [r3]
  003c4	e0020391	 mul         r2, r1, r3
  003c8	e5903000	 ldr         r3, [r0]
  003cc	e0832002	 add         r2, r3, r2
  003d0	e3e03007	 mvn         r3, #7
  003d4	e0022003	 and         r2, r2, r3
  003d8	e59d3008	 ldr         r3, [sp, #8]
  003dc	e283306c	 add         r3, r3, #0x6C
  003e0	e5933000	 ldr         r3, [r3]
  003e4	e2833004	 add         r3, r3, #4
  003e8	e5832000	 str         r2, [r3]

; 183  :     pXllpLCD->frameDescriptorCh1->FSADR = LCD_FSADR(pXllpLCD->_FRAME_BUFFER_BASE_PHYSICAL + pXllpLCD->CurrentPage*pXllpLCD->FrameBufferSize + (pXllpLCD->FrameBufferSize >> 1));

  003ec	e59d3008	 ldr         r3, [sp, #8]
  003f0	e2830034	 add         r0, r3, #0x34
  003f4	e59d3008	 ldr         r3, [sp, #8]
  003f8	e2832030	 add         r2, r3, #0x30
  003fc	e59d3008	 ldr         r3, [sp, #8]
  00400	e2833020	 add         r3, r3, #0x20
  00404	e5921000	 ldr         r1, [r2]
  00408	e5933000	 ldr         r3, [r3]
  0040c	e0020391	 mul         r2, r1, r3
  00410	e5903000	 ldr         r3, [r0]
  00414	e0832002	 add         r2, r3, r2
  00418	e59d3008	 ldr         r3, [sp, #8]
  0041c	e2833020	 add         r3, r3, #0x20
  00420	e5933000	 ldr         r3, [r3]
  00424	e1a030a3	 mov         r3, r3, lsr #1
  00428	e0822003	 add         r2, r2, r3
  0042c	e3e03007	 mvn         r3, #7
  00430	e0022003	 and         r2, r2, r3
  00434	e59d3008	 ldr         r3, [sp, #8]
  00438	e2833070	 add         r3, r3, #0x70
  0043c	e5933000	 ldr         r3, [r3]
  00440	e2833004	 add         r3, r3, #4
  00444	e5832000	 str         r2, [r3]

; 184  : }

  00448	e89d6000	 ldmia       sp, {sp, lr}
  0044c	e12fff1e	 bx          lr
  00450		 |$M1195|

			 ENDP  ; |XllpLCDSetDisplayPage|

	IMPORT	|XllpOstDelayMicroSeconds|
	IMPORT	|XllpOstDelayMilliSeconds|
	IMPORT	|XllpUnlock|
	IMPORT	|XllpLock|
	IMPORT	|__rt_sdiv|

  00028			 AREA	 |.pdata|, PDATA
|$T1251| DCD	|$LN111@LCDInitCon|
	DCD	0x40042c04
; Function compile flags: /Odtp

  00450			 AREA	 |.text|, CODE, ARM

  00450		 |LCDInitController| PROC

; 187  : {

  00450		 |$LN111@LCDInitCon|
  00450	e1a0c00d	 mov         r12, sp
  00454	e92d0001	 stmdb       sp!, {r0}
  00458	e92d5000	 stmdb       sp!, {r12, lr}
  0045c	e24dd04c	 sub         sp, sp, #0x4C
  00460		 |$M1248|

; 188  :     int i = 0;

  00460	e3a03000	 mov         r3, #0
  00464	e58d3000	 str         r3, [sp]

; 189  :     int BPP = 0;

  00468	e3a03000	 mov         r3, #0
  0046c	e58d302c	 str         r3, [sp, #0x2C]

; 190  :     int PCD = 0;

  00470	e3a03000	 mov         r3, #0
  00474	e58d3024	 str         r3, [sp, #0x24]

; 191  :     unsigned int CCCR_L = 0;

  00478	e3a03000	 mov         r3, #0
  0047c	e58d3008	 str         r3, [sp, #8]

; 192  :     volatile LCDRegs *p_LCDRegs;
; 193  :     volatile XLLP_CLKMGR_T *p_CLKRegs;
; 194  :     volatile XLLP_SSPREGS_T *p_SSPRegs;
; 195  :     volatile XLLP_GPIO_T *p_GPIORegs;
; 196  :     XLLP_OST_T *p_OSTRegs;
; 197  : 
; 198  :     int LCLK = 0;

  00480	e3a03000	 mov         r3, #0
  00484	e58d3004	 str         r3, [sp, #4]

; 199  : 
; 200  :     XLLP_UINT32_T LockID;
; 201  :     XLLP_UINT32_T LockID2;
; 202  : 
; 203  :     p_LCDRegs = (LCDRegs *) pXllpLCD->LCDC;

  00488	e59d3054	 ldr         r3, [sp, #0x54]
  0048c	e2833008	 add         r3, r3, #8
  00490	e5933000	 ldr         r3, [r3]
  00494	e58d301c	 str         r3, [sp, #0x1C]

; 204  :     p_CLKRegs = (XLLP_CLKMGR_T *) pXllpLCD->CLKMan;

  00498	e59d3054	 ldr         r3, [sp, #0x54]
  0049c	e2833004	 add         r3, r3, #4
  004a0	e5933000	 ldr         r3, [r3]
  004a4	e58d300c	 str         r3, [sp, #0xC]

; 205  :     p_GPIORegs = (XLLP_GPIO_T *) pXllpLCD->GPIO;

  004a8	e59d3054	 ldr         r3, [sp, #0x54]
  004ac	e5933000	 ldr         r3, [r3]
  004b0	e58d3010	 str         r3, [sp, #0x10]

; 206  :     p_OSTRegs = (XLLP_OST_T *) pXllpLCD->OST;

  004b4	e59d3054	 ldr         r3, [sp, #0x54]
  004b8	e2833010	 add         r3, r3, #0x10
  004bc	e5933000	 ldr         r3, [r3]
  004c0	e58d3028	 str         r3, [sp, #0x28]

; 207  :     p_SSPRegs = (XLLP_SSPREGS_T *) pXllpLCD->SSP;

  004c4	e59d3054	 ldr         r3, [sp, #0x54]
  004c8	e283300c	 add         r3, r3, #0xC
  004cc	e5933000	 ldr         r3, [r3]
  004d0	e58d3020	 str         r3, [sp, #0x20]

; 208  : 
; 209  :     p_LCDRegs->LCCR0 = 0;

  004d4	e59d201c	 ldr         r2, [sp, #0x1C]
  004d8	e3a03000	 mov         r3, #0
  004dc	e5823000	 str         r3, [r2]

; 210  :     p_LCDRegs->LCCR1 = 0;

  004e0	e59d301c	 ldr         r3, [sp, #0x1C]
  004e4	e2832004	 add         r2, r3, #4
  004e8	e3a03000	 mov         r3, #0
  004ec	e5823000	 str         r3, [r2]

; 211  :     p_LCDRegs->LCCR2 = 0;

  004f0	e59d301c	 ldr         r3, [sp, #0x1C]
  004f4	e2832008	 add         r2, r3, #8
  004f8	e3a03000	 mov         r3, #0
  004fc	e5823000	 str         r3, [r2]

; 212  :     p_LCDRegs->LCCR3 = 0;

  00500	e59d301c	 ldr         r3, [sp, #0x1C]
  00504	e283200c	 add         r2, r3, #0xC
  00508	e3a03000	 mov         r3, #0
  0050c	e5823000	 str         r3, [r2]

; 213  :     p_LCDRegs->LCCR4 = 0;

  00510	e59d301c	 ldr         r3, [sp, #0x1C]
  00514	e2832010	 add         r2, r3, #0x10
  00518	e3a03000	 mov         r3, #0
  0051c	e5823000	 str         r3, [r2]

; 214  :     p_LCDRegs->LCCR5 = (LCD_SOFM1|LCD_SOFM2|LCD_SOFM3|LCD_SOFM4|LCD_SOFM5|LCD_SOFM6|
; 215  :                         LCD_EOFM1|LCD_EOFM2|LCD_EOFM3|LCD_EOFM4|LCD_EOFM5|LCD_EOFM6|
; 216  :                         LCD_BSM1 |LCD_BSM2 |LCD_BSM3 |LCD_BSM4 |LCD_BSM5 |LCD_BSM6 |
; 217  :                         LCD_IUM1 |LCD_IUM2 |LCD_IUM3 |LCD_IUM4 |LCD_IUM5 |LCD_IUM6 );

  00520	e59d301c	 ldr         r3, [sp, #0x1C]
  00524	e2832014	 add         r2, r3, #0x14
  00528	e59f3fcc	 ldr         r3, [pc, #0xFCC]
  0052c	e5823000	 str         r3, [r2]

; 218  : 
; 219  : 
; 220  :     // Determine the frame buffer size for the DMA transfer length.
; 221  :     // Scale the size based on the bpp of the frame buffer to determine
; 222  :     // an actual size in bytes
; 223  :     pXllpLCD->FrameBufferSize = pXllpLCD->FrameBufferWidth * pXllpLCD->FrameBufferHeight;

  00530	e59d3054	 ldr         r3, [sp, #0x54]
  00534	e2832018	 add         r2, r3, #0x18
  00538	e59d3054	 ldr         r3, [sp, #0x54]
  0053c	e283301c	 add         r3, r3, #0x1C
  00540	e5921000	 ldr         r1, [r2]
  00544	e5933000	 ldr         r3, [r3]
  00548	e0020391	 mul         r2, r1, r3
  0054c	e59d3054	 ldr         r3, [sp, #0x54]
  00550	e2833020	 add         r3, r3, #0x20
  00554	e5832000	 str         r2, [r3]

; 224  :     switch (pXllpLCD->BPP)

  00558	e59d3054	 ldr         r3, [sp, #0x54]
  0055c	e2833028	 add         r3, r3, #0x28
  00560	e5933000	 ldr         r3, [r3]
  00564	e58d3030	 str         r3, [sp, #0x30]
  00568	e59d3030	 ldr         r3, [sp, #0x30]
  0056c	e3530020	 cmp         r3, #0x20
  00570	8a00001d	 bhi         |$LN61@LCDInitCon|
  00574	e59d3030	 ldr         r3, [sp, #0x30]
  00578	e3530020	 cmp         r3, #0x20
  0057c	0a00005f	 beq         |$LN51@LCDInitCon|
  00580	e59d3030	 ldr         r3, [sp, #0x30]
  00584	e2433001	 sub         r3, r3, #1
  00588	e58d3030	 str         r3, [sp, #0x30]
  0058c	e59d3030	 ldr         r3, [sp, #0x30]
  00590	e353000f	 cmp         r3, #0xF
  00594	8a000060	 bhi         |$LN50@LCDInitCon|
  00598	e59d2030	 ldr         r2, [sp, #0x30]
  0059c	e1a03102	 mov         r3, r2, lsl #2
  005a0	e083300f	 add         r3, r3, pc
  005a4	e5933004	 ldr         r3, [r3, #4]
  005a8	e08ff003	 add         pc, pc, r3
  005ac		 |$LN66@LCDInitCon|
  005ac		 |$LN65@LCDInitCon|
  005ac		 |$LN67@LCDInitCon|
  005ac	0000008c	 DCD         0x8c
  005b0		 |$LN68@LCDInitCon|
  005b0	000000bc	 DCD         0xbc
  005b4		 |$LN69@LCDInitCon|
  005b4	0000016c	 DCD         0x16c
  005b8		 |$LN70@LCDInitCon|
  005b8	000000ec	 DCD         0xec
  005bc		 |$LN71@LCDInitCon|
  005bc	0000016c	 DCD         0x16c
  005c0		 |$LN72@LCDInitCon|
  005c0	0000016c	 DCD         0x16c
  005c4		 |$LN73@LCDInitCon|
  005c4	0000016c	 DCD         0x16c
  005c8		 |$LN74@LCDInitCon|
  005c8	0000011c	 DCD         0x11c
  005cc		 |$LN75@LCDInitCon|
  005cc	0000016c	 DCD         0x16c
  005d0		 |$LN76@LCDInitCon|
  005d0	0000016c	 DCD         0x16c
  005d4		 |$LN77@LCDInitCon|
  005d4	0000016c	 DCD         0x16c
  005d8		 |$LN78@LCDInitCon|
  005d8	0000016c	 DCD         0x16c
  005dc		 |$LN79@LCDInitCon|
  005dc	0000016c	 DCD         0x16c
  005e0		 |$LN80@LCDInitCon|
  005e0	0000016c	 DCD         0x16c
  005e4		 |$LN81@LCDInitCon|
  005e4	0000016c	 DCD         0x16c
  005e8		 |$LN82@LCDInitCon|
  005e8	00000130	 DCD         0x130
  005ec		 |$LN61@LCDInitCon|
  005ec	e59d3030	 ldr         r3, [sp, #0x30]
  005f0	e3530c01	 cmp         r3, #1, 24
  005f4	8a000009	 bhi         |$LN62@LCDInitCon|
  005f8	e59d3030	 ldr         r3, [sp, #0x30]
  005fc	e3530c01	 cmp         r3, #1, 24
  00600	0a00003e	 beq         |$LN51@LCDInitCon|
  00604	e59d3030	 ldr         r3, [sp, #0x30]
  00608	e3530040	 cmp         r3, #0x40
  0060c	0a00003b	 beq         |$LN51@LCDInitCon|
  00610	e59d3030	 ldr         r3, [sp, #0x30]
  00614	e3530080	 cmp         r3, #0x80
  00618	0a000038	 beq         |$LN51@LCDInitCon|
  0061c	ea00003e	 b           |$LN50@LCDInitCon|
  00620		 |$LN62@LCDInitCon|
  00620	e59d3030	 ldr         r3, [sp, #0x30]
  00624	e3530c02	 cmp         r3, #2, 24
  00628	0a000034	 beq         |$LN51@LCDInitCon|
  0062c	e59d3030	 ldr         r3, [sp, #0x30]
  00630	e3530b01	 cmp         r3, #1, 22
  00634	0a000031	 beq         |$LN51@LCDInitCon|
  00638	ea000037	 b           |$LN50@LCDInitCon|
  0063c		 |$LN56@LCDInitCon|

; 225  :     {
; 226  :         case BPP_1:
; 227  :             pXllpLCD->FrameBufferSize >>= 3;

  0063c	e59d3054	 ldr         r3, [sp, #0x54]
  00640	e2833020	 add         r3, r3, #0x20
  00644	e5933000	 ldr         r3, [r3]
  00648	e1a021a3	 mov         r2, r3, lsr #3
  0064c	e59d3054	 ldr         r3, [sp, #0x54]
  00650	e2833020	 add         r3, r3, #0x20
  00654	e5832000	 str         r2, [r3]

; 228  :             pXllpLCD->PaletteSize = 8;

  00658	e59d3054	 ldr         r3, [sp, #0x54]
  0065c	e2832024	 add         r2, r3, #0x24
  00660	e3a03008	 mov         r3, #8
  00664	e5823000	 str         r3, [r2]

; 229  :             break;

  00668	ea00002b	 b           |$LN57@LCDInitCon|
  0066c		 |$LN55@LCDInitCon|

; 230  :         case BPP_2:
; 231  :             pXllpLCD->FrameBufferSize >>= 2;

  0066c	e59d3054	 ldr         r3, [sp, #0x54]
  00670	e2833020	 add         r3, r3, #0x20
  00674	e5933000	 ldr         r3, [r3]
  00678	e1a02123	 mov         r2, r3, lsr #2
  0067c	e59d3054	 ldr         r3, [sp, #0x54]
  00680	e2833020	 add         r3, r3, #0x20
  00684	e5832000	 str         r2, [r3]

; 232  :             pXllpLCD->PaletteSize = 8;

  00688	e59d3054	 ldr         r3, [sp, #0x54]
  0068c	e2832024	 add         r2, r3, #0x24
  00690	e3a03008	 mov         r3, #8
  00694	e5823000	 str         r3, [r2]

; 233  :             break;

  00698	ea00001f	 b           |$LN57@LCDInitCon|
  0069c		 |$LN54@LCDInitCon|

; 234  :         case BPP_4:
; 235  :             pXllpLCD->FrameBufferSize >>= 1;

  0069c	e59d3054	 ldr         r3, [sp, #0x54]
  006a0	e2833020	 add         r3, r3, #0x20
  006a4	e5933000	 ldr         r3, [r3]
  006a8	e1a020a3	 mov         r2, r3, lsr #1
  006ac	e59d3054	 ldr         r3, [sp, #0x54]
  006b0	e2833020	 add         r3, r3, #0x20
  006b4	e5832000	 str         r2, [r3]

; 236  :             pXllpLCD->PaletteSize = 32;

  006b8	e59d3054	 ldr         r3, [sp, #0x54]
  006bc	e2832024	 add         r2, r3, #0x24
  006c0	e3a03020	 mov         r3, #0x20
  006c4	e5823000	 str         r3, [r2]

; 237  :             break;

  006c8	ea000013	 b           |$LN57@LCDInitCon|
  006cc		 |$LN53@LCDInitCon|

; 238  :         case BPP_8:
; 239  :             pXllpLCD->PaletteSize = 512;

  006cc	e59d3054	 ldr         r3, [sp, #0x54]
  006d0	e2832024	 add         r2, r3, #0x24
  006d4	e3a03c02	 mov         r3, #2, 24
  006d8	e5823000	 str         r3, [r2]

; 240  :             break;

  006dc	ea00000e	 b           |$LN57@LCDInitCon|
  006e0		 |$LN52@LCDInitCon|

; 241  :         case BPP_16:
; 242  :             pXllpLCD->FrameBufferSize <<= 1;

  006e0	e59d3054	 ldr         r3, [sp, #0x54]
  006e4	e2833020	 add         r3, r3, #0x20
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e1a02083	 mov         r2, r3, lsl #1
  006f0	e59d3054	 ldr         r3, [sp, #0x54]
  006f4	e2833020	 add         r3, r3, #0x20
  006f8	e5832000	 str         r2, [r3]

; 243  :             break;

  006fc	ea000006	 b           |$LN57@LCDInitCon|
  00700		 |$LN51@LCDInitCon|

; 244  :         case BPP_18:        /* Fall through */
; 245  :         case BPP_18_PACKED:
; 246  :         case BPP_19:
; 247  :         case BPP_19_PACKED:
; 248  :         case BPP_24:
; 249  :         case BPP_25:
; 250  :             pXllpLCD->FrameBufferSize <<= 2;

  00700	e59d3054	 ldr         r3, [sp, #0x54]
  00704	e2833020	 add         r3, r3, #0x20
  00708	e5933000	 ldr         r3, [r3]
  0070c	e1a02103	 mov         r2, r3, lsl #2
  00710	e59d3054	 ldr         r3, [sp, #0x54]
  00714	e2833020	 add         r3, r3, #0x20
  00718	e5832000	 str         r2, [r3]
  0071c		 |$LN50@LCDInitCon|
  0071c		 |$LN57@LCDInitCon|

; 251  :             break;
; 252  :         default:
; 253  :             break;
; 254  :     }
; 255  : 
; 256  :     // Enable the LCD and SRAM clocks
; 257  :     LockID = XllpLock(CKEN);

  0071c	e3a00026	 mov         r0, #0x26
  00720	eb000000	 bl          XllpLock
  00724	e58d0034	 str         r0, [sp, #0x34]
  00728	e59d3034	 ldr         r3, [sp, #0x34]
  0072c	e58d3014	 str         r3, [sp, #0x14]

; 258  : 
; 259  :     p_CLKRegs->cken = (p_CLKRegs->cken & XLLP_CLKEN_MASK) | CLK_LCD | CLK_SRAM;

  00730	e59d300c	 ldr         r3, [sp, #0xC]
  00734	e2833004	 add         r3, r3, #4
  00738	e5932000	 ldr         r2, [r3]
  0073c	e3e0333f	 mvn         r3, #0x3F, 6
  00740	e0023003	 and         r3, r2, r3
  00744	e3833801	 orr         r3, r3, #1, 16
  00748	e3832601	 orr         r2, r3, #1, 12
  0074c	e59d300c	 ldr         r3, [sp, #0xC]
  00750	e2833004	 add         r3, r3, #4
  00754	e5832000	 str         r2, [r3]

; 260  : 
; 261  :     XllpUnlock(LockID);

  00758	e59d0014	 ldr         r0, [sp, #0x14]
  0075c	eb000000	 bl          XllpUnlock

; 262  : 
; 263  :     // Configure the general purpose frame descriptors
; 264  :     // Set the physical address of the frame descriptor
; 265  :     pXllpLCD->frameDescriptorCh0fd1->FDADR = LCD_FDADR(pXllpLCD->_DMA_CHANNEL_0_FRAME_DESCRIPTOR_BASE_PHYSICAL);

  00760	e59d3054	 ldr         r3, [sp, #0x54]
  00764	e283304c	 add         r3, r3, #0x4C
  00768	e5932000	 ldr         r2, [r3]
  0076c	e3e0300f	 mvn         r3, #0xF
  00770	e0022003	 and         r2, r2, r3
  00774	e59d3054	 ldr         r3, [sp, #0x54]
  00778	e2833068	 add         r3, r3, #0x68
  0077c	e5933000	 ldr         r3, [r3]
  00780	e5832000	 str         r2, [r3]

; 266  : 
; 267  :     // Set the physical address of the frame buffer
; 268  :     pXllpLCD->frameDescriptorCh0fd1->FSADR = LCD_FSADR(pXllpLCD->_FRAME_BUFFER_BASE_PHYSICAL + pXllpLCD->CurrentPage*pXllpLCD->FrameBufferSize);

  00784	e59d3054	 ldr         r3, [sp, #0x54]
  00788	e2830034	 add         r0, r3, #0x34
  0078c	e59d3054	 ldr         r3, [sp, #0x54]
  00790	e2832030	 add         r2, r3, #0x30
  00794	e59d3054	 ldr         r3, [sp, #0x54]
  00798	e2833020	 add         r3, r3, #0x20
  0079c	e5921000	 ldr         r1, [r2]
  007a0	e5933000	 ldr         r3, [r3]
  007a4	e0020391	 mul         r2, r1, r3
  007a8	e5903000	 ldr         r3, [r0]
  007ac	e0832002	 add         r2, r3, r2
  007b0	e3e03007	 mvn         r3, #7
  007b4	e0022003	 and         r2, r2, r3
  007b8	e59d3054	 ldr         r3, [sp, #0x54]
  007bc	e2833068	 add         r3, r3, #0x68
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e2833004	 add         r3, r3, #4
  007c8	e5832000	 str         r2, [r3]

; 269  : 
; 270  :     // Clear the frame ID
; 271  :     pXllpLCD->frameDescriptorCh0fd1->FIDR  = LCD_FIDR(0);

  007cc	e59d3054	 ldr         r3, [sp, #0x54]
  007d0	e2833068	 add         r3, r3, #0x68
  007d4	e5933000	 ldr         r3, [r3]
  007d8	e2832008	 add         r2, r3, #8
  007dc	e3a03000	 mov         r3, #0
  007e0	e5823000	 str         r3, [r2]

; 272  : 
; 273  :     // Set the DMA transfer length to the size of the frame buffer
; 274  :     pXllpLCD->frameDescriptorCh0fd1->LDCMD = LCD_Len(pXllpLCD->FrameBufferSize);

  007e4	e59d3054	 ldr         r3, [sp, #0x54]
  007e8	e2831020	 add         r1, r3, #0x20
  007ec	e59d3054	 ldr         r3, [sp, #0x54]
  007f0	e2833068	 add         r3, r3, #0x68
  007f4	e5933000	 ldr         r3, [r3]
  007f8	e283200c	 add         r2, r3, #0xC
  007fc	e5913000	 ldr         r3, [r1]
  00800	e5823000	 str         r3, [r2]

; 275  : 
; 276  :     // Store the physical address of this frame descriptor in the frame descriptor
; 277  :     pXllpLCD->frameDescriptorCh0fd1->PHYSADDR = pXllpLCD->frameDescriptorCh0fd1->FDADR;

  00804	e59d3054	 ldr         r3, [sp, #0x54]
  00808	e2833068	 add         r3, r3, #0x68
  0080c	e5931000	 ldr         r1, [r3]
  00810	e59d3054	 ldr         r3, [sp, #0x54]
  00814	e2833068	 add         r3, r3, #0x68
  00818	e5933000	 ldr         r3, [r3]
  0081c	e2832010	 add         r2, r3, #0x10
  00820	e5913000	 ldr         r3, [r1]
  00824	e5823000	 str         r3, [r2]

; 278  : 
; 279  :     // frameDescriptorCh0fd2 is used only if a palette load is performed.
; 280  :     // Set the physical address of the frame descriptor
; 281  :     pXllpLCD->frameDescriptorCh0fd2->FDADR = LCD_FDADR(pXllpLCD->_DMA_CHANNEL_0_ALT_FRAME_DESCRIPTOR_BASE_PHYSICAL);

  00828	e59d3054	 ldr         r3, [sp, #0x54]
  0082c	e2833054	 add         r3, r3, #0x54
  00830	e5932000	 ldr         r2, [r3]
  00834	e3e0300f	 mvn         r3, #0xF
  00838	e0022003	 and         r2, r2, r3
  0083c	e59d3054	 ldr         r3, [sp, #0x54]
  00840	e283306c	 add         r3, r3, #0x6C
  00844	e5933000	 ldr         r3, [r3]
  00848	e5832000	 str         r2, [r3]

; 282  : 
; 283  :     // Set the physical address of the frame buffer
; 284  :     pXllpLCD->frameDescriptorCh0fd2->FSADR = LCD_FSADR(pXllpLCD->_FRAME_BUFFER_BASE_PHYSICAL + pXllpLCD->CurrentPage*pXllpLCD->FrameBufferSize);

  0084c	e59d3054	 ldr         r3, [sp, #0x54]
  00850	e2830034	 add         r0, r3, #0x34
  00854	e59d3054	 ldr         r3, [sp, #0x54]
  00858	e2832030	 add         r2, r3, #0x30
  0085c	e59d3054	 ldr         r3, [sp, #0x54]
  00860	e2833020	 add         r3, r3, #0x20
  00864	e5921000	 ldr         r1, [r2]
  00868	e5933000	 ldr         r3, [r3]
  0086c	e0020391	 mul         r2, r1, r3
  00870	e5903000	 ldr         r3, [r0]
  00874	e0832002	 add         r2, r3, r2
  00878	e3e03007	 mvn         r3, #7
  0087c	e0022003	 and         r2, r2, r3
  00880	e59d3054	 ldr         r3, [sp, #0x54]
  00884	e283306c	 add         r3, r3, #0x6C
  00888	e5933000	 ldr         r3, [r3]
  0088c	e2833004	 add         r3, r3, #4
  00890	e5832000	 str         r2, [r3]

; 285  : 
; 286  :     // Clear the frame ID
; 287  :     pXllpLCD->frameDescriptorCh0fd2->FIDR  = LCD_FIDR(0);

  00894	e59d3054	 ldr         r3, [sp, #0x54]
  00898	e283306c	 add         r3, r3, #0x6C
  0089c	e5933000	 ldr         r3, [r3]
  008a0	e2832008	 add         r2, r3, #8
  008a4	e3a03000	 mov         r3, #0
  008a8	e5823000	 str         r3, [r2]

; 288  : 
; 289  :     // Set the DMA transfer length to the size of the frame buffer
; 290  :     pXllpLCD->frameDescriptorCh0fd2->LDCMD = LCD_Len(pXllpLCD->FrameBufferSize);

  008ac	e59d3054	 ldr         r3, [sp, #0x54]
  008b0	e2831020	 add         r1, r3, #0x20
  008b4	e59d3054	 ldr         r3, [sp, #0x54]
  008b8	e283306c	 add         r3, r3, #0x6C
  008bc	e5933000	 ldr         r3, [r3]
  008c0	e283200c	 add         r2, r3, #0xC
  008c4	e5913000	 ldr         r3, [r1]
  008c8	e5823000	 str         r3, [r2]

; 291  :     
; 292  :     // Store the physical address of this frame descriptor in the frame descriptor
; 293  :     pXllpLCD->frameDescriptorCh0fd2->PHYSADDR = pXllpLCD->frameDescriptorCh0fd2->FDADR;

  008cc	e59d3054	 ldr         r3, [sp, #0x54]
  008d0	e283306c	 add         r3, r3, #0x6C
  008d4	e5931000	 ldr         r1, [r3]
  008d8	e59d3054	 ldr         r3, [sp, #0x54]
  008dc	e283306c	 add         r3, r3, #0x6C
  008e0	e5933000	 ldr         r3, [r3]
  008e4	e2832010	 add         r2, r3, #0x10
  008e8	e5913000	 ldr         r3, [r1]
  008ec	e5823000	 str         r3, [r2]

; 294  :     
; 295  :     // FBR0 is cleared and is not used.
; 296  :     p_LCDRegs->FBR0 = 0;

  008f0	e59d301c	 ldr         r3, [sp, #0x1C]
  008f4	e2832020	 add         r2, r3, #0x20
  008f8	e3a03000	 mov         r3, #0
  008fc	e5823000	 str         r3, [r2]

; 297  : 
; 298  :     // Load the contents of FDADR0 with the physical address of this frame descriptor
; 299  :     p_LCDRegs->FDADR0 = LCD_FDADR(pXllpLCD->frameDescriptorCh0fd1->FDADR);

  00900	e59d3054	 ldr         r3, [sp, #0x54]
  00904	e2833068	 add         r3, r3, #0x68
  00908	e5933000	 ldr         r3, [r3]
  0090c	e5932000	 ldr         r2, [r3]
  00910	e3e0300f	 mvn         r3, #0xF
  00914	e0022003	 and         r2, r2, r3
  00918	e59d301c	 ldr         r3, [sp, #0x1C]
  0091c	e2833c02	 add         r3, r3, #2, 24
  00920	e5832000	 str         r2, [r3]

; 300  :             
; 301  :     // Determine the LCLK frequency programmed into the CCCR.
; 302  :     // This value will be used to calculate a Pixel Clock Divisor (PCD)
; 303  :     // for a given display type.
; 304  :     CCCR_L = (p_CLKRegs->cccr & 0x0000001F);

  00924	e59d300c	 ldr         r3, [sp, #0xC]
  00928	e5933000	 ldr         r3, [r3]
  0092c	e203301f	 and         r3, r3, #0x1F
  00930	e58d3008	 str         r3, [sp, #8]

; 305  : 
; 306  : 
; 307  :     if (CCCR_L < 8) // L = [2 - 7]

  00934	e59d3008	 ldr         r3, [sp, #8]
  00938	e3530008	 cmp         r3, #8
  0093c	2a000006	 bcs         |$LN49@LCDInitCon|

; 308  :         LCLK = (13 * CCCR_L) * 100;

  00940	e59d1008	 ldr         r1, [sp, #8]
  00944	e3a0300d	 mov         r3, #0xD
  00948	e0020391	 mul         r2, r1, r3
  0094c	e3a03064	 mov         r3, #0x64
  00950	e0030392	 mul         r3, r2, r3
  00954	e58d3004	 str         r3, [sp, #4]
  00958	ea000014	 b           |$LN48@LCDInitCon|
  0095c		 |$LN49@LCDInitCon|

; 309  :     else if (CCCR_L < 17) // L = [8 - 16] 

  0095c	e59d3008	 ldr         r3, [sp, #8]
  00960	e3530011	 cmp         r3, #0x11
  00964	2a000007	 bcs         |$LN47@LCDInitCon|

; 310  :         LCLK = ((13 * CCCR_L) * 100) >> 1;

  00968	e59d1008	 ldr         r1, [sp, #8]
  0096c	e3a0300d	 mov         r3, #0xD
  00970	e0020391	 mul         r2, r1, r3
  00974	e3a03064	 mov         r3, #0x64
  00978	e0030392	 mul         r3, r2, r3
  0097c	e1a030a3	 mov         r3, r3, lsr #1
  00980	e58d3004	 str         r3, [sp, #4]
  00984	ea000009	 b           |$LN46@LCDInitCon|
  00988		 |$LN47@LCDInitCon|

; 311  :     else if (CCCR_L < 32) // L = [17 - 31]

  00988	e59d3008	 ldr         r3, [sp, #8]
  0098c	e3530020	 cmp         r3, #0x20
  00990	2a000006	 bcs         |$LN45@LCDInitCon|

; 312  :         LCLK = ((13 * CCCR_L) * 100) >> 2;

  00994	e59d1008	 ldr         r1, [sp, #8]
  00998	e3a0300d	 mov         r3, #0xD
  0099c	e0020391	 mul         r2, r1, r3
  009a0	e3a03064	 mov         r3, #0x64
  009a4	e0030392	 mul         r3, r2, r3
  009a8	e1a03123	 mov         r3, r3, lsr #2
  009ac	e58d3004	 str         r3, [sp, #4]
  009b0		 |$LN45@LCDInitCon|
  009b0		 |$LN46@LCDInitCon|
  009b0		 |$LN48@LCDInitCon|

; 313  :         
; 314  :     
; 315  :     // Convert the bpp setting into a value that the LCD controller understands.
; 316  :     switch(pXllpLCD->BPP)

  009b0	e59d3054	 ldr         r3, [sp, #0x54]
  009b4	e2833028	 add         r3, r3, #0x28
  009b8	e5933000	 ldr         r3, [r3]
  009bc	e58d3038	 str         r3, [sp, #0x38]
  009c0	e59d3038	 ldr         r3, [sp, #0x38]
  009c4	e3530020	 cmp         r3, #0x20
  009c8	8a00001d	 bhi         |$LN63@LCDInitCon|
  009cc	e59d3038	 ldr         r3, [sp, #0x38]
  009d0	e3530020	 cmp         r3, #0x20
  009d4	0a00003d	 beq         |$LN37@LCDInitCon|
  009d8	e59d3038	 ldr         r3, [sp, #0x38]
  009dc	e2433001	 sub         r3, r3, #1
  009e0	e58d3038	 str         r3, [sp, #0x38]
  009e4	e59d3038	 ldr         r3, [sp, #0x38]
  009e8	e353000f	 cmp         r3, #0xF
  009ec	8a000049	 bhi         |$LN31@LCDInitCon|
  009f0	e59d2038	 ldr         r2, [sp, #0x38]
  009f4	e1a03102	 mov         r3, r2, lsl #2
  009f8	e083300f	 add         r3, r3, pc
  009fc	e5933004	 ldr         r3, [r3, #4]
  00a00	e08ff003	 add         pc, pc, r3
  00a04		 |$LN84@LCDInitCon|
  00a04		 |$LN83@LCDInitCon|
  00a04		 |$LN85@LCDInitCon|
  00a04	0000008c	 DCD         0x8c
  00a08		 |$LN86@LCDInitCon|
  00a08	00000098	 DCD         0x98
  00a0c		 |$LN87@LCDInitCon|
  00a0c	00000110	 DCD         0x110
  00a10		 |$LN88@LCDInitCon|
  00a10	000000a4	 DCD         0xa4
  00a14		 |$LN89@LCDInitCon|
  00a14	00000110	 DCD         0x110
  00a18		 |$LN90@LCDInitCon|
  00a18	00000110	 DCD         0x110
  00a1c		 |$LN91@LCDInitCon|
  00a1c	00000110	 DCD         0x110
  00a20		 |$LN92@LCDInitCon|
  00a20	000000b0	 DCD         0xb0
  00a24		 |$LN93@LCDInitCon|
  00a24	00000110	 DCD         0x110
  00a28		 |$LN94@LCDInitCon|
  00a28	00000110	 DCD         0x110
  00a2c		 |$LN95@LCDInitCon|
  00a2c	00000110	 DCD         0x110
  00a30		 |$LN96@LCDInitCon|
  00a30	00000110	 DCD         0x110
  00a34		 |$LN97@LCDInitCon|
  00a34	00000110	 DCD         0x110
  00a38		 |$LN98@LCDInitCon|
  00a38	00000110	 DCD         0x110
  00a3c		 |$LN99@LCDInitCon|
  00a3c	00000110	 DCD         0x110
  00a40		 |$LN100@LCDInitCon|
  00a40	000000bc	 DCD         0xbc
  00a44		 |$LN63@LCDInitCon|
  00a44	e59d3038	 ldr         r3, [sp, #0x38]
  00a48	e3530c01	 cmp         r3, #1, 24
  00a4c	8a000009	 bhi         |$LN64@LCDInitCon|
  00a50	e59d3038	 ldr         r3, [sp, #0x38]
  00a54	e3530c01	 cmp         r3, #1, 24
  00a58	0a000025	 beq         |$LN34@LCDInitCon|
  00a5c	e59d3038	 ldr         r3, [sp, #0x38]
  00a60	e3530040	 cmp         r3, #0x40
  00a64	0a00001c	 beq         |$LN36@LCDInitCon|
  00a68	e59d3038	 ldr         r3, [sp, #0x38]
  00a6c	e3530080	 cmp         r3, #0x80
  00a70	0a00001c	 beq         |$LN35@LCDInitCon|
  00a74	ea000027	 b           |$LN31@LCDInitCon|
  00a78		 |$LN64@LCDInitCon|
  00a78	e59d3038	 ldr         r3, [sp, #0x38]
  00a7c	e3530c02	 cmp         r3, #2, 24
  00a80	0a00001e	 beq         |$LN33@LCDInitCon|
  00a84	e59d3038	 ldr         r3, [sp, #0x38]
  00a88	e3530b01	 cmp         r3, #1, 22
  00a8c	0a00001e	 beq         |$LN32@LCDInitCon|
  00a90	ea000020	 b           |$LN31@LCDInitCon|
  00a94		 |$LN42@LCDInitCon|

; 317  :     {
; 318  :         case BPP_1:
; 319  :             BPP = 0;

  00a94	e3a03000	 mov         r3, #0
  00a98	e58d302c	 str         r3, [sp, #0x2C]

; 320  :             break;

  00a9c	ea00001f	 b           |$LN43@LCDInitCon|
  00aa0		 |$LN41@LCDInitCon|

; 321  :         case BPP_2:
; 322  :             BPP = 1;

  00aa0	e3a03001	 mov         r3, #1
  00aa4	e58d302c	 str         r3, [sp, #0x2C]

; 323  :             break;

  00aa8	ea00001c	 b           |$LN43@LCDInitCon|
  00aac		 |$LN40@LCDInitCon|

; 324  :         case BPP_4:
; 325  :             BPP = 2;

  00aac	e3a03002	 mov         r3, #2
  00ab0	e58d302c	 str         r3, [sp, #0x2C]

; 326  :             break;

  00ab4	ea000019	 b           |$LN43@LCDInitCon|
  00ab8		 |$LN39@LCDInitCon|

; 327  :         case BPP_8:
; 328  :             BPP = 3;

  00ab8	e3a03003	 mov         r3, #3
  00abc	e58d302c	 str         r3, [sp, #0x2C]

; 329  :             break;

  00ac0	ea000016	 b           |$LN43@LCDInitCon|
  00ac4		 |$LN38@LCDInitCon|

; 330  :         case BPP_16:
; 331  :             BPP = 4;

  00ac4	e3a03004	 mov         r3, #4
  00ac8	e58d302c	 str         r3, [sp, #0x2C]

; 332  :             break;

  00acc	ea000013	 b           |$LN43@LCDInitCon|
  00ad0		 |$LN37@LCDInitCon|

; 333  :         case BPP_18:
; 334  :             BPP = 5;

  00ad0	e3a03005	 mov         r3, #5
  00ad4	e58d302c	 str         r3, [sp, #0x2C]

; 335  :             break;

  00ad8	ea000010	 b           |$LN43@LCDInitCon|
  00adc		 |$LN36@LCDInitCon|

; 336  :         case BPP_18_PACKED:
; 337  :             BPP = 6;

  00adc	e3a03006	 mov         r3, #6
  00ae0	e58d302c	 str         r3, [sp, #0x2C]

; 338  :             break;

  00ae4	ea00000d	 b           |$LN43@LCDInitCon|
  00ae8		 |$LN35@LCDInitCon|

; 339  :         case BPP_19:
; 340  :             BPP = 7;

  00ae8	e3a03007	 mov         r3, #7
  00aec	e58d302c	 str         r3, [sp, #0x2C]

; 341  :             break;

  00af0	ea00000a	 b           |$LN43@LCDInitCon|
  00af4		 |$LN34@LCDInitCon|

; 342  :         case BPP_19_PACKED:
; 343  :             BPP = 8;

  00af4	e3a03008	 mov         r3, #8
  00af8	e58d302c	 str         r3, [sp, #0x2C]

; 344  :             break;

  00afc	ea000007	 b           |$LN43@LCDInitCon|
  00b00		 |$LN33@LCDInitCon|

; 345  :         case BPP_24:
; 346  :             BPP = 9;

  00b00	e3a03009	 mov         r3, #9
  00b04	e58d302c	 str         r3, [sp, #0x2C]

; 347  :             break;

  00b08	ea000004	 b           |$LN43@LCDInitCon|
  00b0c		 |$LN32@LCDInitCon|

; 348  :         case BPP_25:
; 349  :             BPP = 10;

  00b0c	e3a0300a	 mov         r3, #0xA
  00b10	e58d302c	 str         r3, [sp, #0x2C]

; 350  :             break;

  00b14	ea000001	 b           |$LN43@LCDInitCon|
  00b18		 |$LN31@LCDInitCon|

; 351  :         default:
; 352  :         {
; 353  :             BPP = 0;

  00b18	e3a03000	 mov         r3, #0
  00b1c	e58d302c	 str         r3, [sp, #0x2C]
  00b20		 |$LN43@LCDInitCon|

; 354  :             break;
; 355  :         }
; 356  :     }
; 357  : 
; 358  :     switch(pXllpLCD->DisplayType)

  00b20	e59d3054	 ldr         r3, [sp, #0x54]
  00b24	e2833014	 add         r3, r3, #0x14
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e58d303c	 str         r3, [sp, #0x3C]
  00b30	e59d303c	 ldr         r3, [sp, #0x3C]
  00b34	e2433001	 sub         r3, r3, #1
  00b38	e58d303c	 str         r3, [sp, #0x3C]
  00b3c	e59d303c	 ldr         r3, [sp, #0x3C]
  00b40	e3530005	 cmp         r3, #5
  00b44	8a00025d	 bhi         |$LN1@LCDInitCon|
  00b48	e59d203c	 ldr         r2, [sp, #0x3C]
  00b4c	e1a03102	 mov         r3, r2, lsl #2
  00b50	e083300f	 add         r3, r3, pc
  00b54	e5933004	 ldr         r3, [r3, #4]
  00b58	e08ff003	 add         pc, pc, r3
  00b5c		 |$LN102@LCDInitCon|
  00b5c		 |$LN101@LCDInitCon|
  00b5c		 |$LN103@LCDInitCon|
  00b5c	00000014	 DCD         0x14
  00b60		 |$LN104@LCDInitCon|
  00b60	00000418	 DCD         0x418
  00b64		 |$LN105@LCDInitCon|
  00b64	00000960	 DCD         0x960
  00b68		 |$LN106@LCDInitCon|
  00b68	000001c4	 DCD         0x1c4
  00b6c		 |$LN107@LCDInitCon|
  00b6c	000000ec	 DCD         0xec
  00b70		 |$LN108@LCDInitCon|
  00b70	00000500	 DCD         0x500
  00b74		 |$LN28@LCDInitCon|

; 359  :     {
; 360  :         case LTM04C380K: // 640x480 16bpp active matrix
; 361  :         {
; 362  : 
; 363  :             // 
; 364  :             // The actual equation requires that we take the ceiling of a floating point result.
; 365  :             // Rather than use floats, we'll calculate an approximation to the correct PCD value
; 366  :             // using integers.  
; 367  :             //
; 368  :             PCD = (LCLK / (2 * LTM04C380K_PIXEL_CLOCK_FREQUENCY));

  00b74	e59d1004	 ldr         r1, [sp, #4]
  00b78	e3a00c13	 mov         r0, #0x13, 24
  00b7c	e38000ac	 orr         r0, r0, #0xAC
  00b80	eb000000	 bl          __rt_sdiv
  00b84	e58d0024	 str         r0, [sp, #0x24]

; 369  : 
; 370  :             // Configure the LCD Controller Control Registers
; 371  :             p_LCDRegs->LCCR0 = (LCD_LDM | LCD_SFM | LCD_IUM | LCD_EFM | 
; 372  :                                 LCD_PAS | LCD_QDM | LCD_BM  | LCD_OUM |
; 373  :                                 LCD_RDSTM | LCD_CMDIM | LCD_OUC | LCD_LDDALT);

  00b88	e59d201c	 ldr         r2, [sp, #0x1C]
  00b8c	e59f394c	 ldr         r3, [pc, #0x94C]
  00b90	e5823000	 str         r3, [r2]

; 374  : 
; 375  :             p_LCDRegs->LCCR1 = (LCD_PPL(0x27FU) | LCD_HSW(0x01) | 
; 376  :                                 LCD_ELW(0x01)  | LCD_BLW(0x9fU) );

  00b94	e59d301c	 ldr         r3, [sp, #0x1C]
  00b98	e2832004	 add         r2, r3, #4
  00b9c	e59f3954	 ldr         r3, [pc, #0x954]
  00ba0	e5823000	 str         r3, [r2]

; 377  :             
; 378  :             p_LCDRegs->LCCR2 = (LCD_LPP(0x1df) | LCD_VSW(0x2c) |
; 379  :                                 LCD_EFW(0x00)  | LCD_BFW(0x00) );

  00ba4	e59d301c	 ldr         r3, [sp, #0x1C]
  00ba8	e2832008	 add         r2, r3, #8
  00bac	e3a03cb1	 mov         r3, #0xB1, 24
  00bb0	e38330df	 orr         r3, r3, #0xDF
  00bb4	e5823000	 str         r3, [r2]

; 380  : 
; 381  :             p_LCDRegs->LCCR3 = (LCD_PCD(PCD)  | LCD_BPP(BPP) | LCD_PCP |
; 382  :                                 LCD_PDFOR(pXllpLCD->PixelDataFormat));

  00bb8	e59d302c	 ldr         r3, [sp, #0x2C]
  00bbc	e2033007	 and         r3, r3, #7
  00bc0	e1a02c03	 mov         r2, r3, lsl #24
  00bc4	e59d302c	 ldr         r3, [sp, #0x2C]
  00bc8	e2033008	 and         r3, r3, #8
  00bcc	e1a03d03	 mov         r3, r3, lsl #26
  00bd0	e1822003	 orr         r2, r2, r3
  00bd4	e59d3024	 ldr         r3, [sp, #0x24]
  00bd8	e1833002	 orr         r3, r3, r2
  00bdc	e3832501	 orr         r2, r3, #1, 10
  00be0	e59d3054	 ldr         r3, [sp, #0x54]
  00be4	e283302c	 add         r3, r3, #0x2C
  00be8	e5933000	 ldr         r3, [r3]
  00bec	e1a03f03	 mov         r3, r3, lsl #30
  00bf0	e1822003	 orr         r2, r2, r3
  00bf4	e59d301c	 ldr         r3, [sp, #0x1C]
  00bf8	e283300c	 add         r3, r3, #0xC
  00bfc	e5832000	 str         r2, [r3]

; 383  :             
; 384  :             p_LCDRegs->LCCR4 = LCD_PAL_FOR(0);

  00c00	e59d301c	 ldr         r3, [sp, #0x1C]
  00c04	e2832010	 add         r2, r3, #0x10
  00c08	e3a03000	 mov         r3, #0
  00c0c	e5823000	 str         r3, [r2]

; 385  :             if ( (p_LCDRegs->OVL1C1 & LCD_O1EN) || (p_LCDRegs->OVL2C1 & LCD_O2EN))

  00c10	e59d301c	 ldr         r3, [sp, #0x1C]
  00c14	e2833050	 add         r3, r3, #0x50
  00c18	e5933000	 ldr         r3, [r3]
  00c1c	e3130102	 tst         r3, #2, 2
  00c20	1a000004	 bne         |$LN26@LCDInitCon|
  00c24	e59d301c	 ldr         r3, [sp, #0x1C]
  00c28	e2833070	 add         r3, r3, #0x70
  00c2c	e5933000	 ldr         r3, [r3]
  00c30	e3130102	 tst         r3, #2, 2
  00c34	0a000003	 beq         |$LN27@LCDInitCon|
  00c38		 |$LN26@LCDInitCon|

; 386  :             {
; 387  :                 p_LCDRegs->LCCR4 = LCD_PAL_FOR(1);

  00c38	e59d301c	 ldr         r3, [sp, #0x1C]
  00c3c	e2832010	 add         r2, r3, #0x10
  00c40	e3a03902	 mov         r3, #2, 18
  00c44	e5823000	 str         r3, [r2]
  00c48		 |$LN27@LCDInitCon|

; 388  :             }
; 389  :         }
; 390  :         break;

  00c48	ea00021c	 b           |$LN29@LCDInitCon|
  00c4c		 |$LN25@LCDInitCon|

; 391  : 
; 392  :     case LTM035A776C: // 240x320 16bpp active matrix
; 393  :         {
; 394  : 
; 395  :             // 
; 396  :             // The actual equation requires that we take the ceiling of a floating point result.
; 397  :             // Rather than use floats, we'll calculate an approximation to the correct PCD value
; 398  :             // using integers.
; 399  :             //
; 400  :             PCD = (LCLK / (2 * LTM035A776C_PIXEL_CLOCK_FREQUENCY));

  00c4c	e59d1004	 ldr         r1, [sp, #4]
  00c50	e3a00c07	 mov         r0, #7, 24
  00c54	e380001c	 orr         r0, r0, #0x1C
  00c58	eb000000	 bl          __rt_sdiv
  00c5c	e58d0024	 str         r0, [sp, #0x24]

; 401  :             
; 402  :             // Configure the LCD Controller Control Registers
; 403  :             p_LCDRegs->LCCR0 = (LCD_LDM | LCD_SFM | LCD_IUM | LCD_EFM | 
; 404  :                                 LCD_PAS | LCD_QDM | LCD_BM  | LCD_OUM |
; 405  :                                 LCD_RDSTM | LCD_CMDIM | LCD_OUC | LCD_LDDALT);

  00c60	e59d201c	 ldr         r2, [sp, #0x1C]
  00c64	e59f3874	 ldr         r3, [pc, #0x874]
  00c68	e5823000	 str         r3, [r2]

; 406  : 
; 407  :             p_LCDRegs->LCCR1 = (LCD_PPL(0xEF) | LCD_HSW(0x04) | 
; 408  :                                 LCD_ELW(0x04)  | LCD_BLW(0x05) );

  00c6c	e59d301c	 ldr         r3, [sp, #0x1C]
  00c70	e2832004	 add         r2, r3, #4
  00c74	e59f3878	 ldr         r3, [pc, #0x878]
  00c78	e5823000	 str         r3, [r2]

; 409  :             
; 410  :             p_LCDRegs->LCCR2 = (LCD_LPP(0x13f) | LCD_VSW(0x02) |
; 411  :                                 LCD_EFW(0x03)  | LCD_BFW(0x02) );

  00c7c	e59d301c	 ldr         r3, [sp, #0x1C]
  00c80	e2832008	 add         r2, r3, #8
  00c84	e59f3864	 ldr         r3, [pc, #0x864]
  00c88	e5823000	 str         r3, [r2]

; 412  : 
; 413  :             p_LCDRegs->LCCR3 = (LCD_PCD(PCD)  | LCD_BPP(BPP) | LCD_PCP | LCD_HSP |
; 414  :                                 LCD_PDFOR(pXllpLCD->PixelDataFormat));

  00c8c	e59d302c	 ldr         r3, [sp, #0x2C]
  00c90	e2033007	 and         r3, r3, #7
  00c94	e1a02c03	 mov         r2, r3, lsl #24
  00c98	e59d302c	 ldr         r3, [sp, #0x2C]
  00c9c	e2033008	 and         r3, r3, #8
  00ca0	e1a03d03	 mov         r3, r3, lsl #26
  00ca4	e1822003	 orr         r2, r2, r3
  00ca8	e59d3024	 ldr         r3, [sp, #0x24]
  00cac	e1833002	 orr         r3, r3, r2
  00cb0	e3833501	 orr         r3, r3, #1, 10
  00cb4	e3832602	 orr         r2, r3, #2, 12
  00cb8	e59d3054	 ldr         r3, [sp, #0x54]
  00cbc	e283302c	 add         r3, r3, #0x2C
  00cc0	e5933000	 ldr         r3, [r3]
  00cc4	e1a03f03	 mov         r3, r3, lsl #30
  00cc8	e1822003	 orr         r2, r2, r3
  00ccc	e59d301c	 ldr         r3, [sp, #0x1C]
  00cd0	e283300c	 add         r3, r3, #0xC
  00cd4	e5832000	 str         r2, [r3]

; 415  :             
; 416  :             p_LCDRegs->LCCR4 = LCD_PAL_FOR(0);

  00cd8	e59d301c	 ldr         r3, [sp, #0x1C]
  00cdc	e2832010	 add         r2, r3, #0x10
  00ce0	e3a03000	 mov         r3, #0
  00ce4	e5823000	 str         r3, [r2]

; 417  :             if ( (p_LCDRegs->OVL1C1 & LCD_O1EN) || (p_LCDRegs->OVL2C1 & LCD_O2EN))

  00ce8	e59d301c	 ldr         r3, [sp, #0x1C]
  00cec	e2833050	 add         r3, r3, #0x50
  00cf0	e5933000	 ldr         r3, [r3]
  00cf4	e3130102	 tst         r3, #2, 2
  00cf8	1a000004	 bne         |$LN23@LCDInitCon|
  00cfc	e59d301c	 ldr         r3, [sp, #0x1C]
  00d00	e2833070	 add         r3, r3, #0x70
  00d04	e5933000	 ldr         r3, [r3]
  00d08	e3130102	 tst         r3, #2, 2
  00d0c	0a000003	 beq         |$LN24@LCDInitCon|
  00d10		 |$LN23@LCDInitCon|

; 418  :             {
; 419  :                 p_LCDRegs->LCCR4 = LCD_PAL_FOR(1);

  00d10	e59d301c	 ldr         r3, [sp, #0x1C]
  00d14	e2832010	 add         r2, r3, #0x10
  00d18	e3a03902	 mov         r3, #2, 18
  00d1c	e5823000	 str         r3, [r2]
  00d20		 |$LN24@LCDInitCon|

; 420  :             }
; 421  :         }
; 422  :         break;

  00d20	ea0001e6	 b           |$LN29@LCDInitCon|
  00d24		 |$LN22@LCDInitCon|

; 423  : 
; 424  :     case LM8V31: // 640x480 16bpp dual panel passive
; 425  :         {
; 426  : 
; 427  :             // 
; 428  :             // The actual equation requires that we take the ceiling of a floating point result.
; 429  :             // Rather than use floats, we'll calculate an approximation to the correct PCD value
; 430  :             // using integers.
; 431  :             //
; 432  :             PCD = (LCLK / (2 * LM8V31_PIXEL_CLOCK_FREQUENCY));

  00d24	e59d1004	 ldr         r1, [sp, #4]
  00d28	e3a00fe3	 mov         r0, #0xE3, 30
  00d2c	eb000000	 bl          __rt_sdiv
  00d30	e58d0024	 str         r0, [sp, #0x24]

; 433  : 
; 434  :             // Reconfigure the upper panel frame descriptors for dual panel operation by
; 435  :             // setting the DMA transfer length to half the size of the frame buffer
; 436  :             pXllpLCD->frameDescriptorCh0fd1->LDCMD = pXllpLCD->FrameBufferSize >> 1;

  00d34	e59d3054	 ldr         r3, [sp, #0x54]
  00d38	e2833020	 add         r3, r3, #0x20
  00d3c	e5933000	 ldr         r3, [r3]
  00d40	e1a020a3	 mov         r2, r3, lsr #1
  00d44	e59d3054	 ldr         r3, [sp, #0x54]
  00d48	e2833068	 add         r3, r3, #0x68
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e283300c	 add         r3, r3, #0xC
  00d54	e5832000	 str         r2, [r3]

; 437  :             pXllpLCD->frameDescriptorCh0fd2->LDCMD = pXllpLCD->FrameBufferSize >> 1;

  00d58	e59d3054	 ldr         r3, [sp, #0x54]
  00d5c	e2833020	 add         r3, r3, #0x20
  00d60	e5933000	 ldr         r3, [r3]
  00d64	e1a020a3	 mov         r2, r3, lsr #1
  00d68	e59d3054	 ldr         r3, [sp, #0x54]
  00d6c	e283306c	 add         r3, r3, #0x6C
  00d70	e5933000	 ldr         r3, [r3]
  00d74	e283300c	 add         r3, r3, #0xC
  00d78	e5832000	 str         r2, [r3]

; 438  : 
; 439  :             // Configure the lower panel frame descriptor for dual panel operation.
; 440  :             // Set the physical address of the frame descriptor
; 441  :             pXllpLCD->frameDescriptorCh1->FDADR = LCD_FDADR(pXllpLCD->_DMA_CHANNEL_1_FRAME_DESCRIPTOR_BASE_PHYSICAL);

  00d7c	e59d3054	 ldr         r3, [sp, #0x54]
  00d80	e2833050	 add         r3, r3, #0x50
  00d84	e5932000	 ldr         r2, [r3]
  00d88	e3e0300f	 mvn         r3, #0xF
  00d8c	e0022003	 and         r2, r2, r3
  00d90	e59d3054	 ldr         r3, [sp, #0x54]
  00d94	e2833070	 add         r3, r3, #0x70
  00d98	e5933000	 ldr         r3, [r3]
  00d9c	e5832000	 str         r2, [r3]

; 442  : 
; 443  :             // Set the physical address of the frame buffer
; 444  :             pXllpLCD->frameDescriptorCh1->FSADR = LCD_FSADR(pXllpLCD->_FRAME_BUFFER_BASE_PHYSICAL + pXllpLCD->CurrentPage*pXllpLCD->FrameBufferSize + (pXllpLCD->FrameBufferSize >> 1));

  00da0	e59d3054	 ldr         r3, [sp, #0x54]
  00da4	e2830034	 add         r0, r3, #0x34
  00da8	e59d3054	 ldr         r3, [sp, #0x54]
  00dac	e2832030	 add         r2, r3, #0x30
  00db0	e59d3054	 ldr         r3, [sp, #0x54]
  00db4	e2833020	 add         r3, r3, #0x20
  00db8	e5921000	 ldr         r1, [r2]
  00dbc	e5933000	 ldr         r3, [r3]
  00dc0	e0020391	 mul         r2, r1, r3
  00dc4	e5903000	 ldr         r3, [r0]
  00dc8	e0832002	 add         r2, r3, r2
  00dcc	e59d3054	 ldr         r3, [sp, #0x54]
  00dd0	e2833020	 add         r3, r3, #0x20
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e1a030a3	 mov         r3, r3, lsr #1
  00ddc	e0822003	 add         r2, r2, r3
  00de0	e3e03007	 mvn         r3, #7
  00de4	e0022003	 and         r2, r2, r3
  00de8	e59d3054	 ldr         r3, [sp, #0x54]
  00dec	e2833070	 add         r3, r3, #0x70
  00df0	e5933000	 ldr         r3, [r3]
  00df4	e2833004	 add         r3, r3, #4
  00df8	e5832000	 str         r2, [r3]

; 445  : 
; 446  :             // Clear the frame ID
; 447  :             pXllpLCD->frameDescriptorCh1->FIDR  = LCD_FIDR(0);

  00dfc	e59d3054	 ldr         r3, [sp, #0x54]
  00e00	e2833070	 add         r3, r3, #0x70
  00e04	e5933000	 ldr         r3, [r3]
  00e08	e2832008	 add         r2, r3, #8
  00e0c	e3a03000	 mov         r3, #0
  00e10	e5823000	 str         r3, [r2]

; 448  : 
; 449  :             // Set the DMA transfer length to half the size of the frame buffer
; 450  :             pXllpLCD->frameDescriptorCh1->LDCMD = LCD_Len(pXllpLCD->FrameBufferSize >> 1);

  00e14	e59d3054	 ldr         r3, [sp, #0x54]
  00e18	e2833020	 add         r3, r3, #0x20
  00e1c	e5933000	 ldr         r3, [r3]
  00e20	e1a020a3	 mov         r2, r3, lsr #1
  00e24	e59d3054	 ldr         r3, [sp, #0x54]
  00e28	e2833070	 add         r3, r3, #0x70
  00e2c	e5933000	 ldr         r3, [r3]
  00e30	e283300c	 add         r3, r3, #0xC
  00e34	e5832000	 str         r2, [r3]

; 451  : 
; 452  :             // Store the physical address of this frame descriptor in the frame descriptor
; 453  :             pXllpLCD->frameDescriptorCh1->PHYSADDR = pXllpLCD->frameDescriptorCh1->FDADR;

  00e38	e59d3054	 ldr         r3, [sp, #0x54]
  00e3c	e2833070	 add         r3, r3, #0x70
  00e40	e5931000	 ldr         r1, [r3]
  00e44	e59d3054	 ldr         r3, [sp, #0x54]
  00e48	e2833070	 add         r3, r3, #0x70
  00e4c	e5933000	 ldr         r3, [r3]
  00e50	e2832010	 add         r2, r3, #0x10
  00e54	e5913000	 ldr         r3, [r1]
  00e58	e5823000	 str         r3, [r2]

; 454  :             
; 455  :             // FBR1 is cleared and is not used in this implementation
; 456  :             p_LCDRegs->FBR1 = 0;

  00e5c	e59d301c	 ldr         r3, [sp, #0x1C]
  00e60	e2832024	 add         r2, r3, #0x24
  00e64	e3a03000	 mov         r3, #0
  00e68	e5823000	 str         r3, [r2]

; 457  : 
; 458  :             // Load the contents of FDADR1 with the physical address of this frame descriptor
; 459  :             p_LCDRegs->FDADR1 = pXllpLCD->frameDescriptorCh1->FDADR;

  00e6c	e59d3054	 ldr         r3, [sp, #0x54]
  00e70	e2833070	 add         r3, r3, #0x70
  00e74	e5931000	 ldr         r1, [r3]
  00e78	e59d301c	 ldr         r3, [sp, #0x1C]
  00e7c	e2832e21	 add         r2, r3, #0x21, 28
  00e80	e5913000	 ldr         r3, [r1]
  00e84	e5823000	 str         r3, [r2]

; 460  :         
; 461  :             
; 462  :             // Configure the TMED dithering engine
; 463  :             // Use the magic number described in the EAS, 0x00AA5500;
; 464  :             p_LCDRegs->TRGBR = LCD_TRS(0x00) | LCD_TGS(0x55) | LCD_TBS(0xAA);

  00e88	e59d301c	 ldr         r3, [sp, #0x1C]
  00e8c	e2832040	 add         r2, r3, #0x40
  00e90	e3a038aa	 mov         r3, #0xAA, 16
  00e94	e3833c55	 orr         r3, r3, #0x55, 24
  00e98	e5823000	 str         r3, [r2]

; 465  : 
; 466  :             // Use the magic number described in the EAS, 0x0000754F;
; 467  :             p_LCDRegs->TCR = LCD_TM2S | LCD_TM1S | LCD_TM2En | LCD_TM1En        |
; 468  :                              LCD_TVBS(0x04) | LCD_THBS(0x05) | LCD_TSCS(0x03)   |  
; 469  :                              LCD_TED;

  00e9c	e59d301c	 ldr         r3, [sp, #0x1C]
  00ea0	e2832044	 add         r2, r3, #0x44
  00ea4	e3a03c75	 mov         r3, #0x75, 24
  00ea8	e383304f	 orr         r3, r3, #0x4F
  00eac	e5823000	 str         r3, [r2]

; 470  : 
; 471  :         
; 472  :             p_LCDRegs->LCCR0 = (LCD_SDS | LCD_LDM | LCD_SFM | LCD_IUM   |
; 473  :                                 LCD_EFM | LCD_PDD(0x01)     | LCD_BM    |
; 474  :                                 LCD_RDSTM | LCD_CMDIM | LCD_OUC | LCD_LDDALT);

  00eb0	e59d201c	 ldr         r2, [sp, #0x1C]
  00eb4	e59f3630	 ldr         r3, [pc, #0x630]
  00eb8	e5823000	 str         r3, [r2]

; 475  : 
; 476  :             p_LCDRegs->LCCR1 = (LCD_PPL(0x27F)  | LCD_HSW(0x02) |
; 477  :                                 LCD_ELW(0x03)   | LCD_BLW(0x03) );

  00ebc	e59d301c	 ldr         r3, [sp, #0x1C]
  00ec0	e2832004	 add         r2, r3, #4
  00ec4	e59f361c	 ldr         r3, [pc, #0x61C]
  00ec8	e5823000	 str         r3, [r2]

; 478  : 
; 479  :             p_LCDRegs->LCCR2 = (LCD_LPP(0xef)   | LCD_VSW(0x01) |
; 480  :                                 LCD_EFW(0x00)   | LCD_BFW(0x00) );

  00ecc	e59d301c	 ldr         r3, [sp, #0x1C]
  00ed0	e2832008	 add         r2, r3, #8
  00ed4	e3a03b01	 mov         r3, #1, 22
  00ed8	e38330ef	 orr         r3, r3, #0xEF
  00edc	e5823000	 str         r3, [r2]

; 481  : 
; 482  :             p_LCDRegs->LCCR3 = (LCD_PCD(PCD)    | LCD_ACB(0xff) |
; 483  :                                 LCD_PCP         | LCD_BPP(BPP)  |
; 484  :                                 LCD_PDFOR(pXllpLCD->PixelDataFormat));

  00ee0	e59d3024	 ldr         r3, [sp, #0x24]
  00ee4	e3833cff	 orr         r3, r3, #0xFF, 24
  00ee8	e3831501	 orr         r1, r3, #1, 10
  00eec	e59d302c	 ldr         r3, [sp, #0x2C]
  00ef0	e2033007	 and         r3, r3, #7
  00ef4	e1a02c03	 mov         r2, r3, lsl #24
  00ef8	e59d302c	 ldr         r3, [sp, #0x2C]
  00efc	e2033008	 and         r3, r3, #8
  00f00	e1a03d03	 mov         r3, r3, lsl #26
  00f04	e1823003	 orr         r3, r2, r3
  00f08	e1812003	 orr         r2, r1, r3
  00f0c	e59d3054	 ldr         r3, [sp, #0x54]
  00f10	e283302c	 add         r3, r3, #0x2C
  00f14	e5933000	 ldr         r3, [r3]
  00f18	e1a03f03	 mov         r3, r3, lsl #30
  00f1c	e1822003	 orr         r2, r2, r3
  00f20	e59d301c	 ldr         r3, [sp, #0x1C]
  00f24	e283300c	 add         r3, r3, #0xC
  00f28	e5832000	 str         r2, [r3]

; 485  : 
; 486  :             p_LCDRegs->LCCR4 = LCD_PAL_FOR(0);

  00f2c	e59d301c	 ldr         r3, [sp, #0x1C]
  00f30	e2832010	 add         r2, r3, #0x10
  00f34	e3a03000	 mov         r3, #0
  00f38	e5823000	 str         r3, [r2]

; 487  :             if ( (p_LCDRegs->OVL1C1 & LCD_O1EN) || (p_LCDRegs->OVL2C1 & LCD_O2EN))

  00f3c	e59d301c	 ldr         r3, [sp, #0x1C]
  00f40	e2833050	 add         r3, r3, #0x50
  00f44	e5933000	 ldr         r3, [r3]
  00f48	e3130102	 tst         r3, #2, 2
  00f4c	1a000004	 bne         |$LN20@LCDInitCon|
  00f50	e59d301c	 ldr         r3, [sp, #0x1C]
  00f54	e2833070	 add         r3, r3, #0x70
  00f58	e5933000	 ldr         r3, [r3]
  00f5c	e3130102	 tst         r3, #2, 2
  00f60	0a000003	 beq         |$LN21@LCDInitCon|
  00f64		 |$LN20@LCDInitCon|

; 488  :             {
; 489  :                 p_LCDRegs->LCCR4 = LCD_PAL_FOR(1);

  00f64	e59d301c	 ldr         r3, [sp, #0x1C]
  00f68	e2832010	 add         r2, r3, #0x10
  00f6c	e3a03902	 mov         r3, #2, 18
  00f70	e5823000	 str         r3, [r2]
  00f74		 |$LN21@LCDInitCon|

; 490  :             }
; 491  :         }
; 492  :         break;

  00f74	ea000151	 b           |$LN29@LCDInitCon|
  00f78		 |$LN19@LCDInitCon|

; 493  :     case LQ64D341: // 176x220 active matrix Stinger display
; 494  :         {
; 495  : 
; 496  :             // 
; 497  :             // The actual equation requires that we take the ceiling of a floating point result.
; 498  :             // Rather than use floats, we'll calculate an approximation to the correct PCD value
; 499  :             // using integers.
; 500  :             //
; 501  :             PCD = (LCLK / (2 * LQ64D341_PIXEL_CLOCK_FREQUENCY));

  00f78	e59d1004	 ldr         r1, [sp, #4]
  00f7c	e3a00c03	 mov         r0, #3, 24
  00f80	e3800002	 orr         r0, r0, #2
  00f84	eb000000	 bl          __rt_sdiv
  00f88	e58d0024	 str         r0, [sp, #0x24]

; 502  : 
; 503  :             p_LCDRegs->LCCR0 = ( LCD_LDM | LCD_SFM | LCD_IUM    |
; 504  :                                  LCD_EFM | LCD_PAS | LCD_BM     |
; 505  :                                  LCD_RDSTM | LCD_CMDIM | LCD_OUC | LCD_LDDALT);

  00f8c	e59d201c	 ldr         r2, [sp, #0x1C]
  00f90	e3a03679	 mov         r3, #0x79, 12
  00f94	e38330f8	 orr         r3, r3, #0xF8
  00f98	e5823000	 str         r3, [r2]

; 506  : 
; 507  :             p_LCDRegs->LCCR1 = ( LCD_PPL(0xAF)  | LCD_HSW(0x02) |
; 508  :                                  LCD_ELW(0x7B)  | LCD_BLW(0x03) );

  00f9c	e59d301c	 ldr         r3, [sp, #0x1C]
  00fa0	e2832004	 add         r2, r3, #4
  00fa4	e59f3538	 ldr         r3, [pc, #0x538]
  00fa8	e5823000	 str         r3, [r2]

; 509  : 
; 510  :             p_LCDRegs->LCCR2 = ( LCD_LPP(0xdb)  | LCD_VSW(0x01) |
; 511  :                                  LCD_EFW(0x02)  | LCD_BFW(0x00) );

  00fac	e59d301c	 ldr         r3, [sp, #0x1C]
  00fb0	e2832008	 add         r2, r3, #8
  00fb4	e3a03b81	 mov         r3, #0x81, 22
  00fb8	e38330db	 orr         r3, r3, #0xDB
  00fbc	e5823000	 str         r3, [r2]

; 512  : 
; 513  :             p_LCDRegs->LCCR3 = ( LCD_PCD(PCD)   | LCD_BPP(BPP)   | 
; 514  :                                  LCD_VSP        | LCD_HSP        | LCD_PCP  | 
; 515  :                                  LCD_OEP        | LCD_PDFOR(pXllpLCD->PixelDataFormat));

  00fc0	e59d302c	 ldr         r3, [sp, #0x2C]
  00fc4	e2033007	 and         r3, r3, #7
  00fc8	e1a02c03	 mov         r2, r3, lsl #24
  00fcc	e59d302c	 ldr         r3, [sp, #0x2C]
  00fd0	e2033008	 and         r3, r3, #8
  00fd4	e1a03d03	 mov         r3, r3, lsl #26
  00fd8	e1822003	 orr         r2, r2, r3
  00fdc	e59d3024	 ldr         r3, [sp, #0x24]
  00fe0	e1833002	 orr         r3, r3, r2
  00fe4	e3833601	 orr         r3, r3, #1, 12
  00fe8	e3833602	 orr         r3, r3, #2, 12
  00fec	e3833501	 orr         r3, r3, #1, 10
  00ff0	e3832502	 orr         r2, r3, #2, 10
  00ff4	e59d3054	 ldr         r3, [sp, #0x54]
  00ff8	e283302c	 add         r3, r3, #0x2C
  00ffc	e5933000	 ldr         r3, [r3]
  01000	e1a03f03	 mov         r3, r3, lsl #30
  01004	e1822003	 orr         r2, r2, r3
  01008	e59d301c	 ldr         r3, [sp, #0x1C]
  0100c	e283300c	 add         r3, r3, #0xC
  01010	e5832000	 str         r2, [r3]

; 516  : 
; 517  :             p_LCDRegs->LCCR4 = LCD_PAL_FOR(0);

  01014	e59d301c	 ldr         r3, [sp, #0x1C]
  01018	e2832010	 add         r2, r3, #0x10
  0101c	e3a03000	 mov         r3, #0
  01020	e5823000	 str         r3, [r2]

; 518  :             if ( (p_LCDRegs->OVL1C1 & LCD_O1EN) || (p_LCDRegs->OVL2C1 & LCD_O2EN))

  01024	e59d301c	 ldr         r3, [sp, #0x1C]
  01028	e2833050	 add         r3, r3, #0x50
  0102c	e5933000	 ldr         r3, [r3]
  01030	e3130102	 tst         r3, #2, 2
  01034	1a000004	 bne         |$LN17@LCDInitCon|
  01038	e59d301c	 ldr         r3, [sp, #0x1C]
  0103c	e2833070	 add         r3, r3, #0x70
  01040	e5933000	 ldr         r3, [r3]
  01044	e3130102	 tst         r3, #2, 2
  01048	0a000003	 beq         |$LN18@LCDInitCon|
  0104c		 |$LN17@LCDInitCon|

; 519  :             {
; 520  :                 p_LCDRegs->LCCR4 = LCD_PAL_FOR(1);

  0104c	e59d301c	 ldr         r3, [sp, #0x1C]
  01050	e2832010	 add         r2, r3, #0x10
  01054	e3a03902	 mov         r3, #2, 18
  01058	e5823000	 str         r3, [r2]
  0105c		 |$LN18@LCDInitCon|

; 521  :             }
; 522  : 
; 523  :             }
; 524  :         break;

  0105c	ea000117	 b           |$LN29@LCDInitCon|
  01060		 |$LN16@LCDInitCon|

; 525  : 
; 526  :     case LS022Q8DD06: // Sharp LS022Q8DD06 Sharp 240 x 320 for ZOAR
; 527  :         {
; 528  :             // 
; 529  :             // The actual equation requires that we take the ceiling of a floating point result.
; 530  :             // Rather than use floats, we'll calculate an approximation to the correct PCD value
; 531  :             // using integers.
; 532  :             //
; 533  : 
; 534  :             PCD = (LCLK / (2 * LS022Q8DD06_PIXEL_CLOCK_FREQUENCY));

  01060	e59d1004	 ldr         r1, [sp, #4]
  01064	e3a00b01	 mov         r0, #1, 22
  01068	e3800038	 orr         r0, r0, #0x38
  0106c	eb000000	 bl          __rt_sdiv
  01070	e58d0024	 str         r0, [sp, #0x24]

; 535  : 
; 536  :             // Configure the LCD Controller Control Registers
; 537  :             p_LCDRegs->LCCR0 = (LCD_LDM | LCD_SFM | LCD_IUM | LCD_EFM | 
; 538  :                         LCD_PAS | LCD_QDM | LCD_BM  | LCD_OUM |
; 539  :                         LCD_RDSTM | LCD_CMDIM | LCD_OUC | LCD_LDDALT);

  01074	e59d201c	 ldr         r2, [sp, #0x1C]
  01078	e59f3460	 ldr         r3, [pc, #0x460]
  0107c	e5823000	 str         r3, [r2]

; 540  : 
; 541  :             p_LCDRegs->LCCR1 = (LCD_PPL(0xEF) | LCD_HSW(0x01) | 
; 542  :                         LCD_ELW(0x00)  | LCD_BLW(0x07) );

  01080	e59d301c	 ldr         r3, [sp, #0x1C]
  01084	e2832004	 add         r2, r3, #4
  01088	e59f344c	 ldr         r3, [pc, #0x44C]
  0108c	e5823000	 str         r3, [r2]

; 543  :             
; 544  :             p_LCDRegs->LCCR2 = (LCD_LPP(0x13f) | LCD_VSW(0x02) |
; 545  :                         LCD_EFW(0x02)  | LCD_BFW(0x00) );

  01090	e59d301c	 ldr         r3, [sp, #0x1C]
  01094	e2832008	 add         r2, r3, #8
  01098	e59f3438	 ldr         r3, [pc, #0x438]
  0109c	e5823000	 str         r3, [r2]

; 546  : 
; 547  :             p_LCDRegs->LCCR3 = (LCD_PCD(PCD)  | LCD_BPP(BPP) | LCD_PCP | 
; 548  :                         LCD_PDFOR(pXllpLCD->PixelDataFormat));

  010a0	e59d302c	 ldr         r3, [sp, #0x2C]
  010a4	e2033007	 and         r3, r3, #7
  010a8	e1a02c03	 mov         r2, r3, lsl #24
  010ac	e59d302c	 ldr         r3, [sp, #0x2C]
  010b0	e2033008	 and         r3, r3, #8
  010b4	e1a03d03	 mov         r3, r3, lsl #26
  010b8	e1822003	 orr         r2, r2, r3
  010bc	e59d3024	 ldr         r3, [sp, #0x24]
  010c0	e1833002	 orr         r3, r3, r2
  010c4	e3832501	 orr         r2, r3, #1, 10
  010c8	e59d3054	 ldr         r3, [sp, #0x54]
  010cc	e283302c	 add         r3, r3, #0x2C
  010d0	e5933000	 ldr         r3, [r3]
  010d4	e1a03f03	 mov         r3, r3, lsl #30
  010d8	e1822003	 orr         r2, r2, r3
  010dc	e59d301c	 ldr         r3, [sp, #0x1C]
  010e0	e283300c	 add         r3, r3, #0xC
  010e4	e5832000	 str         r2, [r3]

; 549  :             
; 550  :             p_LCDRegs->LCCR4 = LCD_PAL_FOR(0);

  010e8	e59d301c	 ldr         r3, [sp, #0x1C]
  010ec	e2832010	 add         r2, r3, #0x10
  010f0	e3a03000	 mov         r3, #0
  010f4	e5823000	 str         r3, [r2]

; 551  :             if ( (p_LCDRegs->OVL1C1 & LCD_O1EN) || (p_LCDRegs->OVL2C1 & LCD_O2EN))

  010f8	e59d301c	 ldr         r3, [sp, #0x1C]
  010fc	e2833050	 add         r3, r3, #0x50
  01100	e5933000	 ldr         r3, [r3]
  01104	e3130102	 tst         r3, #2, 2
  01108	1a000004	 bne         |$LN14@LCDInitCon|
  0110c	e59d301c	 ldr         r3, [sp, #0x1C]
  01110	e2833070	 add         r3, r3, #0x70
  01114	e5933000	 ldr         r3, [r3]
  01118	e3130102	 tst         r3, #2, 2
  0111c	0a000003	 beq         |$LN15@LCDInitCon|
  01120		 |$LN14@LCDInitCon|

; 552  :             {
; 553  :                 p_LCDRegs->LCCR4 = LCD_PAL_FOR(1);

  01120	e59d301c	 ldr         r3, [sp, #0x1C]
  01124	e2832010	 add         r2, r3, #0x10
  01128	e3a03902	 mov         r3, #2, 18
  0112c	e5823000	 str         r3, [r2]
  01130		 |$LN15@LCDInitCon|

; 554  :             }
; 555  : 
; 556  :             LockID = XllpLock(CKEN);

  01130	e3a00026	 mov         r0, #0x26
  01134	eb000000	 bl          XllpLock
  01138	e58d0040	 str         r0, [sp, #0x40]
  0113c	e59d3040	 ldr         r3, [sp, #0x40]
  01140	e58d3014	 str         r3, [sp, #0x14]

; 557  :             p_CLKRegs->cken = (p_CLKRegs->cken & XLLP_CLKEN_MASK) | CLK_SSP3;

  01144	e59d300c	 ldr         r3, [sp, #0xC]
  01148	e2833004	 add         r3, r3, #4
  0114c	e5932000	 ldr         r2, [r3]
  01150	e3e0333f	 mvn         r3, #0x3F, 6
  01154	e0023003	 and         r3, r2, r3
  01158	e3832010	 orr         r2, r3, #0x10
  0115c	e59d300c	 ldr         r3, [sp, #0xC]
  01160	e2833004	 add         r3, r3, #4
  01164	e5832000	 str         r2, [r3]

; 558  :             XllpUnlock(LockID);

  01168	e59d0014	 ldr         r0, [sp, #0x14]
  0116c	eb000000	 bl          XllpUnlock

; 559  : 
; 560  :             // Assert chip select on the LCD
; 561  :             LockID = XllpLock(GPCR2);

  01170	e3a0000c	 mov         r0, #0xC
  01174	eb000000	 bl          XllpLock
  01178	e58d0044	 str         r0, [sp, #0x44]
  0117c	e59d3044	 ldr         r3, [sp, #0x44]
  01180	e58d3014	 str         r3, [sp, #0x14]

; 562  :             LockID2 = XllpLock(GPSR2);

  01184	e3a00009	 mov         r0, #9
  01188	eb000000	 bl          XllpLock
  0118c	e58d0048	 str         r0, [sp, #0x48]
  01190	e59d3048	 ldr         r3, [sp, #0x48]
  01194	e58d3018	 str         r3, [sp, #0x18]

; 563  :             
; 564  :             p_GPIORegs->GPCR2 &= ~XLLP_GPIO_BIT_L_BIAS;

  01198	e59d3010	 ldr         r3, [sp, #0x10]
  0119c	e283302c	 add         r3, r3, #0x2C
  011a0	e5932000	 ldr         r2, [r3]
  011a4	e3e03a02	 mvn         r3, #2, 20
  011a8	e0022003	 and         r2, r2, r3
  011ac	e59d3010	 ldr         r3, [sp, #0x10]
  011b0	e283302c	 add         r3, r3, #0x2C
  011b4	e5832000	 str         r2, [r3]

; 565  :             p_GPIORegs->GPSR2 |= XLLP_GPIO_BIT_L_BIAS;  

  011b8	e59d3010	 ldr         r3, [sp, #0x10]
  011bc	e2833020	 add         r3, r3, #0x20
  011c0	e5933000	 ldr         r3, [r3]
  011c4	e3832a02	 orr         r2, r3, #2, 20
  011c8	e59d3010	 ldr         r3, [sp, #0x10]
  011cc	e2833020	 add         r3, r3, #0x20
  011d0	e5832000	 str         r2, [r3]

; 566  :     
; 567  :             
; 568  :             XllpOstDelayMilliSeconds(p_OSTRegs, 1);

  011d4	e3a01001	 mov         r1, #1
  011d8	e59d0028	 ldr         r0, [sp, #0x28]
  011dc	eb000000	 bl          XllpOstDelayMilliSeconds

; 569  :             p_SSPRegs->sscr0 = 0x00C01030;

  011e0	e59d2020	 ldr         r2, [sp, #0x20]
  011e4	e59f32e8	 ldr         r3, [pc, #0x2E8]
  011e8	e5823000	 str         r3, [r2]

; 570  :             p_SSPRegs->sscr1 = 0x00008000;

  011ec	e59d3020	 ldr         r3, [sp, #0x20]
  011f0	e2832004	 add         r2, r3, #4
  011f4	e3a03902	 mov         r3, #2, 18
  011f8	e5823000	 str         r3, [r2]

; 571  :             p_SSPRegs->sspsp = 0x0025000C;

  011fc	e59d3020	 ldr         r3, [sp, #0x20]
  01200	e283202c	 add         r2, r3, #0x2C
  01204	e3a03825	 mov         r3, #0x25, 16
  01208	e383300c	 orr         r3, r3, #0xC
  0120c	e5823000	 str         r3, [r2]

; 572  :             p_SSPRegs->sscr0 |= 0x8F;

  01210	e59d3020	 ldr         r3, [sp, #0x20]
  01214	e5933000	 ldr         r3, [r3]
  01218	e383208f	 orr         r2, r3, #0x8F
  0121c	e59d3020	 ldr         r3, [sp, #0x20]
  01220	e5832000	 str         r2, [r3]
  01224		 |$LN13@LCDInitCon|

; 573  : 
; 574  :             // Wait for the operation to complete
; 575  :             while(p_SSPRegs->sssr & 0x10);

  01224	e59d3020	 ldr         r3, [sp, #0x20]
  01228	e2833008	 add         r3, r3, #8
  0122c	e5933000	 ldr         r3, [r3]
  01230	e3130010	 tst         r3, #0x10
  01234	0a000000	 beq         |$LN12@LCDInitCon|
  01238	eafffff9	 b           |$LN13@LCDInitCon|
  0123c		 |$LN12@LCDInitCon|

; 576  : 
; 577  :             for (i = 0; i < sizeof(LS022Q8DD06_DATA_SET_1) >> 1; i+=2)

  0123c	e3a03000	 mov         r3, #0
  01240	e58d3000	 str         r3, [sp]
  01244	ea000002	 b           |$LN11@LCDInitCon|
  01248		 |$LN10@LCDInitCon|
  01248	e59d3000	 ldr         r3, [sp]
  0124c	e2833002	 add         r3, r3, #2
  01250	e58d3000	 str         r3, [sp]
  01254		 |$LN11@LCDInitCon|
  01254	e59d3000	 ldr         r3, [sp]
  01258	e3530046	 cmp         r3, #0x46
  0125c	2a00003d	 bcs         |$LN9@LCDInitCon|

; 578  :             {
; 579  :                 p_GPIORegs->GPCR2 &= ~XLLP_GPIO_BIT_L_BIAS;

  01260	e59d3010	 ldr         r3, [sp, #0x10]
  01264	e283302c	 add         r3, r3, #0x2C
  01268	e5932000	 ldr         r2, [r3]
  0126c	e3e03a02	 mvn         r3, #2, 20
  01270	e0022003	 and         r2, r2, r3
  01274	e59d3010	 ldr         r3, [sp, #0x10]
  01278	e283302c	 add         r3, r3, #0x2C
  0127c	e5832000	 str         r2, [r3]

; 580  :                 p_GPIORegs->GPSR2 |= XLLP_GPIO_BIT_L_BIAS;  

  01280	e59d3010	 ldr         r3, [sp, #0x10]
  01284	e2833020	 add         r3, r3, #0x20
  01288	e5933000	 ldr         r3, [r3]
  0128c	e3832a02	 orr         r2, r3, #2, 20
  01290	e59d3010	 ldr         r3, [sp, #0x10]
  01294	e2833020	 add         r3, r3, #0x20
  01298	e5832000	 str         r2, [r3]

; 581  :     
; 582  :                 p_SSPRegs->ssdr = LS022Q8DD06_DATA_SET_1[i];

  0129c	e59d1000	 ldr         r1, [sp]
  012a0	e3a03002	 mov         r3, #2
  012a4	e0020391	 mul         r2, r1, r3
  012a8	e59f3220	 ldr         r3, [pc, #0x220]
  012ac	e0831002	 add         r1, r3, r2
  012b0	e59d3020	 ldr         r3, [sp, #0x20]
  012b4	e2832010	 add         r2, r3, #0x10
  012b8	e1d130b0	 ldrh        r3, [r1]
  012bc	e5823000	 str         r3, [r2]

; 583  :                 p_SSPRegs->ssdr = LS022Q8DD06_DATA_SET_1[i+1];

  012c0	e59d3000	 ldr         r3, [sp]
  012c4	e2831001	 add         r1, r3, #1
  012c8	e3a03002	 mov         r3, #2
  012cc	e0020391	 mul         r2, r1, r3
  012d0	e59f31f8	 ldr         r3, [pc, #0x1F8]
  012d4	e0831002	 add         r1, r3, r2
  012d8	e59d3020	 ldr         r3, [sp, #0x20]
  012dc	e2832010	 add         r2, r3, #0x10
  012e0	e1d130b0	 ldrh        r3, [r1]
  012e4	e5823000	 str         r3, [r2]
  012e8		 |$LN8@LCDInitCon|

; 584  : 
; 585  :                 // Wait for the operation to complete
; 586  :                 while(p_SSPRegs->sssr & 0x10);

  012e8	e59d3020	 ldr         r3, [sp, #0x20]
  012ec	e2833008	 add         r3, r3, #8
  012f0	e5933000	 ldr         r3, [r3]
  012f4	e3130010	 tst         r3, #0x10
  012f8	0a000000	 beq         |$LN7@LCDInitCon|
  012fc	eafffff9	 b           |$LN8@LCDInitCon|
  01300		 |$LN7@LCDInitCon|

; 587  :     
; 588  :                 XllpOstDelayMicroSeconds(p_OSTRegs, 50);

  01300	e3a01032	 mov         r1, #0x32
  01304	e59d0028	 ldr         r0, [sp, #0x28]
  01308	eb000000	 bl          XllpOstDelayMicroSeconds

; 589  :                 p_GPIORegs->GPSR2 &= ~XLLP_GPIO_BIT_L_BIAS;

  0130c	e59d3010	 ldr         r3, [sp, #0x10]
  01310	e2833020	 add         r3, r3, #0x20
  01314	e5932000	 ldr         r2, [r3]
  01318	e3e03a02	 mvn         r3, #2, 20
  0131c	e0022003	 and         r2, r2, r3
  01320	e59d3010	 ldr         r3, [sp, #0x10]
  01324	e2833020	 add         r3, r3, #0x20
  01328	e5832000	 str         r2, [r3]

; 590  :                 p_GPIORegs->GPCR2 |= XLLP_GPIO_BIT_L_BIAS;

  0132c	e59d3010	 ldr         r3, [sp, #0x10]
  01330	e283302c	 add         r3, r3, #0x2C
  01334	e5933000	 ldr         r3, [r3]
  01338	e3832a02	 orr         r2, r3, #2, 20
  0133c	e59d3010	 ldr         r3, [sp, #0x10]
  01340	e283302c	 add         r3, r3, #0x2C
  01344	e5832000	 str         r2, [r3]

; 591  : 
; 592  :                 XllpOstDelayMilliSeconds(p_OSTRegs, 100);

  01348	e3a01064	 mov         r1, #0x64
  0134c	e59d0028	 ldr         r0, [sp, #0x28]
  01350	eb000000	 bl          XllpOstDelayMilliSeconds

; 593  :             }

  01354	eaffffbb	 b           |$LN10@LCDInitCon|
  01358		 |$LN9@LCDInitCon|

; 594  : 
; 595  :             for (i = 0; i < sizeof(LS022Q8DD06_DATA_SET_2) >> 1; i+=2)

  01358	e3a03000	 mov         r3, #0
  0135c	e58d3000	 str         r3, [sp]
  01360	ea000002	 b           |$LN6@LCDInitCon|
  01364		 |$LN5@LCDInitCon|
  01364	e59d3000	 ldr         r3, [sp]
  01368	e2833002	 add         r3, r3, #2
  0136c	e58d3000	 str         r3, [sp]
  01370		 |$LN6@LCDInitCon|
  01370	e59d3000	 ldr         r3, [sp]
  01374	e3530012	 cmp         r3, #0x12
  01378	2a00003d	 bcs         |$LN4@LCDInitCon|

; 596  :             {
; 597  :                 p_GPIORegs->GPCR2 &= ~XLLP_GPIO_BIT_L_BIAS;

  0137c	e59d3010	 ldr         r3, [sp, #0x10]
  01380	e283302c	 add         r3, r3, #0x2C
  01384	e5932000	 ldr         r2, [r3]
  01388	e3e03a02	 mvn         r3, #2, 20
  0138c	e0022003	 and         r2, r2, r3
  01390	e59d3010	 ldr         r3, [sp, #0x10]
  01394	e283302c	 add         r3, r3, #0x2C
  01398	e5832000	 str         r2, [r3]

; 598  :                 p_GPIORegs->GPSR2 |= XLLP_GPIO_BIT_L_BIAS;  

  0139c	e59d3010	 ldr         r3, [sp, #0x10]
  013a0	e2833020	 add         r3, r3, #0x20
  013a4	e5933000	 ldr         r3, [r3]
  013a8	e3832a02	 orr         r2, r3, #2, 20
  013ac	e59d3010	 ldr         r3, [sp, #0x10]
  013b0	e2833020	 add         r3, r3, #0x20
  013b4	e5832000	 str         r2, [r3]

; 599  :     
; 600  :                 p_SSPRegs->ssdr = LS022Q8DD06_DATA_SET_2[i];

  013b8	e59d1000	 ldr         r1, [sp]
  013bc	e3a03002	 mov         r3, #2
  013c0	e0020391	 mul         r2, r1, r3
  013c4	e59f3100	 ldr         r3, [pc, #0x100]
  013c8	e0831002	 add         r1, r3, r2
  013cc	e59d3020	 ldr         r3, [sp, #0x20]
  013d0	e2832010	 add         r2, r3, #0x10
  013d4	e1d130b0	 ldrh        r3, [r1]
  013d8	e5823000	 str         r3, [r2]

; 601  :                 p_SSPRegs->ssdr = LS022Q8DD06_DATA_SET_2[i+1];

  013dc	e59d3000	 ldr         r3, [sp]
  013e0	e2831001	 add         r1, r3, #1
  013e4	e3a03002	 mov         r3, #2
  013e8	e0020391	 mul         r2, r1, r3
  013ec	e59f30d8	 ldr         r3, [pc, #0xD8]
  013f0	e0831002	 add         r1, r3, r2
  013f4	e59d3020	 ldr         r3, [sp, #0x20]
  013f8	e2832010	 add         r2, r3, #0x10
  013fc	e1d130b0	 ldrh        r3, [r1]
  01400	e5823000	 str         r3, [r2]
  01404		 |$LN3@LCDInitCon|

; 602  : 
; 603  :                 // Wait for the operation to complete
; 604  :                 while(p_SSPRegs->sssr & 0x10);

  01404	e59d3020	 ldr         r3, [sp, #0x20]
  01408	e2833008	 add         r3, r3, #8
  0140c	e5933000	 ldr         r3, [r3]
  01410	e3130010	 tst         r3, #0x10
  01414	0a000000	 beq         |$LN2@LCDInitCon|
  01418	eafffff9	 b           |$LN3@LCDInitCon|
  0141c		 |$LN2@LCDInitCon|

; 605  :                 XllpOstDelayMicroSeconds(p_OSTRegs, 50);

  0141c	e3a01032	 mov         r1, #0x32
  01420	e59d0028	 ldr         r0, [sp, #0x28]
  01424	eb000000	 bl          XllpOstDelayMicroSeconds

; 606  :                 p_GPIORegs->GPSR2 &= ~XLLP_GPIO_BIT_L_BIAS;

  01428	e59d3010	 ldr         r3, [sp, #0x10]
  0142c	e2833020	 add         r3, r3, #0x20
  01430	e5932000	 ldr         r2, [r3]
  01434	e3e03a02	 mvn         r3, #2, 20
  01438	e0022003	 and         r2, r2, r3
  0143c	e59d3010	 ldr         r3, [sp, #0x10]
  01440	e2833020	 add         r3, r3, #0x20
  01444	e5832000	 str         r2, [r3]

; 607  :                 p_GPIORegs->GPCR2 |= XLLP_GPIO_BIT_L_BIAS;

  01448	e59d3010	 ldr         r3, [sp, #0x10]
  0144c	e283302c	 add         r3, r3, #0x2C
  01450	e5933000	 ldr         r3, [r3]
  01454	e3832a02	 orr         r2, r3, #2, 20
  01458	e59d3010	 ldr         r3, [sp, #0x10]
  0145c	e283302c	 add         r3, r3, #0x2C
  01460	e5832000	 str         r2, [r3]

; 608  :             
; 609  :                 XllpOstDelayMilliSeconds(p_OSTRegs, 100);

  01464	e3a01064	 mov         r1, #0x64
  01468	e59d0028	 ldr         r0, [sp, #0x28]
  0146c	eb000000	 bl          XllpOstDelayMilliSeconds

; 610  :             }

  01470	eaffffbb	 b           |$LN5@LCDInitCon|
  01474		 |$LN4@LCDInitCon|

; 611  : 
; 612  : 
; 613  :             // De-assert chip select on the LCD
; 614  :             p_GPIORegs->GPSR2 &= ~XLLP_GPIO_BIT_L_BIAS;

  01474	e59d3010	 ldr         r3, [sp, #0x10]
  01478	e2833020	 add         r3, r3, #0x20
  0147c	e5932000	 ldr         r2, [r3]
  01480	e3e03a02	 mvn         r3, #2, 20
  01484	e0022003	 and         r2, r2, r3
  01488	e59d3010	 ldr         r3, [sp, #0x10]
  0148c	e2833020	 add         r3, r3, #0x20
  01490	e5832000	 str         r2, [r3]

; 615  :             p_GPIORegs->GPCR2 |= XLLP_GPIO_BIT_L_BIAS;

  01494	e59d3010	 ldr         r3, [sp, #0x10]
  01498	e283302c	 add         r3, r3, #0x2C
  0149c	e5933000	 ldr         r3, [r3]
  014a0	e3832a02	 orr         r2, r3, #2, 20
  014a4	e59d3010	 ldr         r3, [sp, #0x10]
  014a8	e283302c	 add         r3, r3, #0x2C
  014ac	e5832000	 str         r2, [r3]

; 616  :             XllpUnlock(LockID);

  014b0	e59d0014	 ldr         r0, [sp, #0x14]
  014b4	eb000000	 bl          XllpUnlock

; 617  :             XllpUnlock(LockID2);

  014b8	e59d0018	 ldr         r0, [sp, #0x18]
  014bc	eb000000	 bl          XllpUnlock
  014c0		 |$LN1@LCDInitCon|
  014c0		 |$LN29@LCDInitCon|

; 618  : 
; 619  :         }
; 620  :         break;
; 621  : 
; 622  :     default:
; 623  :         {
; 624  : 
; 625  :         }
; 626  :         break;
; 627  :     }
; 628  : 
; 629  : }

  014c0	e28dd04c	 add         sp, sp, #0x4C
  014c4	e89d6000	 ldmia       sp, {sp, lr}
  014c8	e12fff1e	 bx          lr
  014cc		 |$LN112@LCDInitCon|
  014cc		 |$LN113@LCDInitCon|
  014cc	00000000	 DCD         |LS022Q8DD06_DATA_SET_2|
  014d0		 |$LN114@LCDInitCon|
  014d0	00000000	 DCD         |LS022Q8DD06_DATA_SET_1|
  014d4		 |$LN115@LCDInitCon|
  014d4	00c01030	 DCD         0xc01030
  014d8		 |$LN116@LCDInitCon|
  014d8	0002093f	 DCD         0x2093f
  014dc		 |$LN117@LCDInitCon|
  014dc	070004ef	 DCD         0x70004ef
  014e0		 |$LN118@LCDInitCon|
  014e0	07b008f8	 DCD         0x7b008f8
  014e4		 |$LN119@LCDInitCon|
  014e4	037b08af	 DCD         0x37b08af
  014e8		 |$LN120@LCDInitCon|
  014e8	03030a7f	 DCD         0x3030a7f
  014ec		 |$LN121@LCDInitCon|
  014ec	0790107c	 DCD         0x790107c
  014f0		 |$LN122@LCDInitCon|
  014f0	0203093f	 DCD         0x203093f
  014f4		 |$LN123@LCDInitCon|
  014f4	050410ef	 DCD         0x50410ef
  014f8		 |$LN124@LCDInitCon|
  014f8	9f01067f	 DCD         0x9f01067f
  014fc		 |$LN125@LCDInitCon|
  014fc	3f3f3f3f	 DCD         0x3f3f3f3f
  01500		 |$M1249|

			 ENDP  ; |LCDInitController|


  00030			 AREA	 |.pdata|, PDATA
|$T1270| DCD	|$LN5@LCDClearSt|
	DCD	0x40001504
; Function compile flags: /Odtp

  01500			 AREA	 |.text|, CODE, ARM

  01500		 |LCDClearStatusReg| PROC

; 633  : {

  01500		 |$LN5@LCDClearSt|
  01500	e1a0c00d	 mov         r12, sp
  01504	e92d0001	 stmdb       sp!, {r0}
  01508	e92d5000	 stmdb       sp!, {r12, lr}
  0150c	e24dd004	 sub         sp, sp, #4
  01510		 |$M1267|

; 634  :     volatile LCDRegs *p_LCDRegs;
; 635  :     p_LCDRegs = (LCDRegs *) pXllpLCD->LCDC;

  01510	e59d300c	 ldr         r3, [sp, #0xC]
  01514	e2833008	 add         r3, r3, #8
  01518	e5933000	 ldr         r3, [r3]
  0151c	e58d3000	 str         r3, [sp]

; 636  : 
; 637  :     // Clear the status registers by writing 1's to each bit.
; 638  :     p_LCDRegs->LCSR0 =  ( LCD_LDD | LCD_SOF0| LCD_BER | LCD_ABC | LCD_IU0   |
; 639  :                           LCD_IU1 | LCD_OU  | LCD_QD  | LCD_EOF0| LCD_BS0   | 
; 640  :                           LCD_SINT| LCD_RD_ST | LCD_CMD_INTR );

  01520	e59d3000	 ldr         r3, [sp]
  01524	e2832038	 add         r2, r3, #0x38
  01528	e3a03c1f	 mov         r3, #0x1F, 24
  0152c	e38330ff	 orr         r3, r3, #0xFF
  01530	e5823000	 str         r3, [r2]

; 641  : 
; 642  :     p_LCDRegs->LCSR1 =  ( LCD_SOF1| LCD_SOF2| LCD_SOF3| LCD_SOF4| LCD_SOF5  | LCD_SOF6  |
; 643  :                           LCD_EOF1| LCD_EOF2| LCD_EOF3| LCD_EOF4| LCD_EOF5  | LCD_EOF6  |
; 644  :                           LCD_BS1 | LCD_BS2 | LCD_BS3 | LCD_BS4 | LCD_BS5   | LCD_BS6   |
; 645  :                                     LCD_IU2 | LCD_IU3 | LCD_IU4 | LCD_IU5   | LCD_IU6 );

  01534	e59d3000	 ldr         r3, [sp]
  01538	e2832034	 add         r2, r3, #0x34
  0153c	e59f300c	 ldr         r3, [pc, #0xC]
  01540	e5823000	 str         r3, [r2]

; 646  : 
; 647  : }

  01544	e28dd004	 add         sp, sp, #4
  01548	e89d6000	 ldmia       sp, {sp, lr}
  0154c	e12fff1e	 bx          lr
  01550		 |$LN6@LCDClearSt|
  01550		 |$LN7@LCDClearSt|
  01550	3e3f3f3f	 DCD         0x3e3f3f3f
  01554		 |$M1268|

			 ENDP  ; |LCDClearStatusReg|


  00038			 AREA	 |.pdata|, PDATA
|$T1277| DCD	|$LN15@LCDSetupGP|
	DCD	0x4000f404
; Function compile flags: /Odtp

  01554			 AREA	 |.text|, CODE, ARM

  01554		 |LCDSetupGPIOs| PROC

; 650  : {

  01554		 |$LN15@LCDSetupGP|
  01554	e1a0c00d	 mov         r12, sp
  01558	e92d0001	 stmdb       sp!, {r0}
  0155c	e92d5000	 stmdb       sp!, {r12, lr}
  01560	e24dd030	 sub         sp, sp, #0x30
  01564		 |$M1274|

; 651  :     XLLP_UINT32_T LockID;
; 652  :     volatile XLLP_GPIO_T *p_GPIORegs;
; 653  : 
; 654  :     p_GPIORegs = (XLLP_GPIO_T *) pXllpLCD->GPIO;

  01564	e59d3038	 ldr         r3, [sp, #0x38]
  01568	e5933000	 ldr         r3, [r3]
  0156c	e58d3000	 str         r3, [sp]

; 655  : 
; 656  :     LockID = XllpLock(GPDR0);

  01570	e3a00004	 mov         r0, #4
  01574	eb000000	 bl          XllpLock
  01578	e58d0008	 str         r0, [sp, #8]
  0157c	e59d3008	 ldr         r3, [sp, #8]
  01580	e58d3004	 str         r3, [sp, #4]

; 657  : 
; 658  :     if (pXllpLCD->DisplayType != LS022Q8DD06)

  01584	e59d3038	 ldr         r3, [sp, #0x38]
  01588	e2833014	 add         r3, r3, #0x14
  0158c	e5933000	 ldr         r3, [r3]
  01590	e3530006	 cmp         r3, #6
  01594	0a000008	 beq         |$LN10@LCDSetupGP|

; 659  :     {
; 660  :         p_GPIORegs->GPDR0 = (p_GPIORegs->GPDR0 & ~XLLP_GPIO_BIT_L_VSYNC) | (XLLP_GPIO_BIT_PWM_OUT0 | XLLP_GPIO_BIT_L_CS);

  01598	e59d3000	 ldr         r3, [sp]
  0159c	e283300c	 add         r3, r3, #0xC
  015a0	e5932000	 ldr         r2, [r3]
  015a4	e3e03901	 mvn         r3, #1, 18
  015a8	e0023003	 and         r3, r2, r3
  015ac	e3832809	 orr         r2, r3, #9, 16
  015b0	e59d3000	 ldr         r3, [sp]
  015b4	e283300c	 add         r3, r3, #0xC
  015b8	e5832000	 str         r2, [r3]
  015bc		 |$LN10@LCDSetupGP|

; 661  :     }
; 662  : 
; 663  :     XllpUnlock(LockID);

  015bc	e59d0004	 ldr         r0, [sp, #4]
  015c0	eb000000	 bl          XllpUnlock

; 664  : 
; 665  :     LockID = XllpLock(GPDR1);

  015c4	e3a00005	 mov         r0, #5
  015c8	eb000000	 bl          XllpLock
  015cc	e58d000c	 str         r0, [sp, #0xC]
  015d0	e59d300c	 ldr         r3, [sp, #0xC]
  015d4	e58d3004	 str         r3, [sp, #4]

; 666  :     p_GPIORegs->GPDR1 |= ( XLLP_GPIO_BIT_L_DD0 | XLLP_GPIO_BIT_L_DD1 | XLLP_GPIO_BIT_L_DD2 | XLLP_GPIO_BIT_L_DD3 | XLLP_GPIO_BIT_L_DD4 | XLLP_GPIO_BIT_L_DD5);

  015d8	e59d3000	 ldr         r3, [sp]
  015dc	e2833010	 add         r3, r3, #0x10
  015e0	e5933000	 ldr         r3, [r3]
  015e4	e383233f	 orr         r2, r3, #0x3F, 6
  015e8	e59d3000	 ldr         r3, [sp]
  015ec	e2833010	 add         r3, r3, #0x10
  015f0	e5832000	 str         r2, [r3]

; 667  : 
; 668  :     // Set GPIO 38 and 40 as outputs
; 669  :     #if defined XLLP_GPIO_BIT_SSPTXD3 && XLLP_GPIO_BIT_SSPCLK3
; 670  :         if (pXllpLCD->DisplayType == LS022Q8DD06)
; 671  :         {
; 672  :             p_GPIORegs->GPDR1 |= (XLLP_GPIO_BIT_SSPTXD3 | XLLP_GPIO_BIT_SSPCLK3);
; 673  :         }
; 674  :     #endif
; 675  : 
; 676  :     XllpUnlock(LockID);

  015f4	e59d0004	 ldr         r0, [sp, #4]
  015f8	eb000000	 bl          XllpUnlock

; 677  : 
; 678  :     LockID = XllpLock(GPDR2);

  015fc	e3a00006	 mov         r0, #6
  01600	eb000000	 bl          XllpLock
  01604	e58d0010	 str         r0, [sp, #0x10]
  01608	e59d3010	 ldr         r3, [sp, #0x10]
  0160c	e58d3004	 str         r3, [sp, #4]

; 679  : 
; 680  :     if (pXllpLCD->DisplayType != LS022Q8DD06)

  01610	e59d3038	 ldr         r3, [sp, #0x38]
  01614	e2833014	 add         r3, r3, #0x14
  01618	e5933000	 ldr         r3, [r3]
  0161c	e3530006	 cmp         r3, #6
  01620	0a000009	 beq         |$LN9@LCDSetupGP|

; 681  :     {
; 682  :         p_GPIORegs->GPDR2 |= (  XLLP_GPIO_BIT_L_DD6 | XLLP_GPIO_BIT_L_DD7 | XLLP_GPIO_BIT_L_DD8 | XLLP_GPIO_BIT_L_DD9 | XLLP_GPIO_BIT_L_DD10 | 
; 683  :                             XLLP_GPIO_BIT_L_DD11 | XLLP_GPIO_BIT_L_DD12 | XLLP_GPIO_BIT_L_DD13 | XLLP_GPIO_BIT_L_DD14 | XLLP_GPIO_BIT_L_DD15 |
; 684  :                             XLLP_GPIO_BIT_L_FCLK | XLLP_GPIO_BIT_L_LCLK | XLLP_GPIO_BIT_L_PCLK | XLLP_GPIO_BIT_L_BIAS | XLLP_GPIO_BIT_L_DD16 | 
; 685  :                             XLLP_GPIO_BIT_L_DD17);

  01624	e59d3000	 ldr         r3, [sp]
  01628	e2833014	 add         r3, r3, #0x14
  0162c	e5932000	 ldr         r2, [r3]
  01630	e3e034ff	 mvn         r3, #0xFF, 8
  01634	e22339ff	 eor         r3, r3, #0xFF, 18
  01638	e1822003	 orr         r2, r2, r3
  0163c	e59d3000	 ldr         r3, [sp]
  01640	e2833014	 add         r3, r3, #0x14
  01644	e5832000	 str         r2, [r3]

; 686  :     } else 

  01648	ea000008	 b           |$LN8@LCDSetupGP|
  0164c		 |$LN9@LCDSetupGP|

; 687  :     {
; 688  :         p_GPIORegs->GPDR2 |= (  XLLP_GPIO_BIT_L_DD6 | XLLP_GPIO_BIT_L_DD7 | XLLP_GPIO_BIT_L_DD8 | XLLP_GPIO_BIT_L_DD9 | XLLP_GPIO_BIT_L_DD10 | 
; 689  :                             XLLP_GPIO_BIT_L_DD11 | XLLP_GPIO_BIT_L_DD12 | XLLP_GPIO_BIT_L_DD13 | XLLP_GPIO_BIT_L_DD14 | XLLP_GPIO_BIT_L_DD15 |
; 690  :                             XLLP_GPIO_BIT_L_FCLK | XLLP_GPIO_BIT_L_LCLK | XLLP_GPIO_BIT_L_PCLK | XLLP_GPIO_BIT_L_BIAS );

  0164c	e59d3000	 ldr         r3, [sp]
  01650	e2833014	 add         r3, r3, #0x14
  01654	e5932000	 ldr         r2, [r3]
  01658	e3a03c3f	 mov         r3, #0x3F, 24
  0165c	e38330ff	 orr         r3, r3, #0xFF
  01660	e1822003	 orr         r2, r2, r3
  01664	e59d3000	 ldr         r3, [sp]
  01668	e2833014	 add         r3, r3, #0x14
  0166c	e5832000	 str         r2, [r3]
  01670		 |$LN8@LCDSetupGP|

; 691  : 
; 692  :         #if defined XLLP_GPIO_BIT_SSPRXD3
; 693  :             // Set GPIO 89 as input     
; 694  :             p_GPIORegs->GPDR2 &= ~(XLLP_GPIO_BIT_SSPRXD3);
; 695  :         #endif
; 696  :     }
; 697  :     
; 698  :     XllpUnlock(LockID);

  01670	e59d0004	 ldr         r0, [sp, #4]
  01674	eb000000	 bl          XllpUnlock

; 699  : 
; 700  :     if (pXllpLCD->DisplayType != LS022Q8DD06)

  01678	e59d3038	 ldr         r3, [sp, #0x38]
  0167c	e2833014	 add         r3, r3, #0x14
  01680	e5933000	 ldr         r3, [r3]
  01684	e3530006	 cmp         r3, #6
  01688	0a00001f	 beq         |$LN7@LCDSetupGP|

; 701  :     {
; 702  :         // Program the GAFR0_L to select alternate function 1 for GPIO 14.
; 703  :         LockID = XllpLock(GAFR0_L);

  0168c	e3a00016	 mov         r0, #0x16
  01690	eb000000	 bl          XllpLock
  01694	e58d0014	 str         r0, [sp, #0x14]
  01698	e59d3014	 ldr         r3, [sp, #0x14]
  0169c	e58d3004	 str         r3, [sp, #4]

; 704  :         p_GPIORegs->GAFR0_L = (p_GPIORegs->GAFR0_L & ~XLLP_GPIO_AF_BIT_L_VSYNC_MASK) | (XLLP_GPIO_AF_BIT_L_VSYNC);

  016a0	e59d3000	 ldr         r3, [sp]
  016a4	e2833054	 add         r3, r3, #0x54
  016a8	e5932000	 ldr         r2, [r3]
  016ac	e3e03203	 mvn         r3, #3, 4
  016b0	e0023003	 and         r3, r2, r3
  016b4	e3832201	 orr         r2, r3, #1, 4
  016b8	e59d3000	 ldr         r3, [sp]
  016bc	e2833054	 add         r3, r3, #0x54
  016c0	e5832000	 str         r2, [r3]

; 705  :         XllpUnlock(LockID);

  016c4	e59d0004	 ldr         r0, [sp, #4]
  016c8	eb000000	 bl          XllpUnlock

; 706  : 
; 707  :         // Program the GAFR0_U to select alternate function 2 for GPIO 19.
; 708  :         LockID = XllpLock(GAFR0_U);

  016cc	e3a00017	 mov         r0, #0x17
  016d0	eb000000	 bl          XllpLock
  016d4	e58d0018	 str         r0, [sp, #0x18]
  016d8	e59d3018	 ldr         r3, [sp, #0x18]
  016dc	e58d3004	 str         r3, [sp, #4]

; 709  :         p_GPIORegs->GAFR0_U = (p_GPIORegs->GAFR0_U & ~XLLP_GPIO_AF_BIT_L_CS_MASK) | (XLLP_GPIO_AF_BIT_L_CS);

  016e0	e59d3000	 ldr         r3, [sp]
  016e4	e2833058	 add         r3, r3, #0x58
  016e8	e5932000	 ldr         r2, [r3]
  016ec	e3e030c0	 mvn         r3, #0xC0
  016f0	e0023003	 and         r3, r2, r3
  016f4	e3832080	 orr         r2, r3, #0x80
  016f8	e59d3000	 ldr         r3, [sp]
  016fc	e2833058	 add         r3, r3, #0x58
  01700	e5832000	 str         r2, [r3]

; 710  :         XllpUnlock(LockID);

  01704	e59d0004	 ldr         r0, [sp, #4]
  01708	eb000000	 bl          XllpUnlock
  0170c		 |$LN7@LCDSetupGP|

; 711  :     }
; 712  : 
; 713  :     if (pXllpLCD->DisplayType == LS022Q8DD06)
; 714  :     {
; 715  :         #if defined XLLP_GPIO_AF_BIT_SSPTXD3_MASK && XLLP_GPIO_AF_BIT_SSPCLK3_MASK && XLLP_GPIO_AF_BIT_SSPTXD3 && XLLP_GPIO_AF_BIT_SSPCLK3
; 716  :             // Program the GAFR1_L to select alternate function 1 for GPIO 38, 40.
; 717  :             LockID = XllpLock(GAFR1_L);
; 718  :             p_GPIORegs->GAFR1_L = (p_GPIORegs->GAFR1_L & ~(XLLP_GPIO_AF_BIT_SSPTXD3_MASK | XLLP_GPIO_AF_BIT_SSPCLK3_MASK)) | 
; 719  :                     (XLLP_GPIO_AF_BIT_SSPTXD3 | XLLP_GPIO_AF_BIT_SSPCLK3);
; 720  :             XllpUnlock(LockID);
; 721  :         #endif
; 722  :     }
; 723  : 
; 724  :     // Program the GAFR1_U to select alternate function 2 for GPIO 58 through 63.
; 725  :     LockID = XllpLock(GAFR1_U);

  0170c	e3a00019	 mov         r0, #0x19
  01710	eb000000	 bl          XllpLock
  01714	e58d001c	 str         r0, [sp, #0x1C]
  01718	e59d301c	 ldr         r3, [sp, #0x1C]
  0171c	e58d3004	 str         r3, [sp, #4]

; 726  :     p_GPIORegs->GAFR1_U = (p_GPIORegs->GAFR1_U & ~(XLLP_GPIO_AF_BIT_L_DD0_MASK | XLLP_GPIO_AF_BIT_L_DD1_MASK | XLLP_GPIO_AF_BIT_L_DD2_MASK|
; 727  :                                                    XLLP_GPIO_AF_BIT_L_DD3_MASK | XLLP_GPIO_AF_BIT_L_DD4_MASK | XLLP_GPIO_AF_BIT_L_DD5_MASK)) | 
; 728  :                                                   (XLLP_GPIO_AF_BIT_L_DD0 | XLLP_GPIO_AF_BIT_L_DD1 | XLLP_GPIO_AF_BIT_L_DD2 | 
; 729  :                                                    XLLP_GPIO_AF_BIT_L_DD3 | XLLP_GPIO_AF_BIT_L_DD4 | XLLP_GPIO_AF_BIT_L_DD5 );

  01720	e59d3000	 ldr         r3, [sp]
  01724	e2833060	 add         r3, r3, #0x60
  01728	e5932000	 ldr         r2, [r3]
  0172c	e3e034ff	 mvn         r3, #0xFF, 8
  01730	e223360f	 eor         r3, r3, #0xF, 12
  01734	e0022003	 and         r2, r2, r3
  01738	e3a03c0a	 mov         r3, #0xA, 24
  0173c	e38330aa	 orr         r3, r3, #0xAA
  01740	e1a03a03	 mov         r3, r3, lsl #20
  01744	e1822003	 orr         r2, r2, r3
  01748	e59d3000	 ldr         r3, [sp]
  0174c	e2833060	 add         r3, r3, #0x60
  01750	e5832000	 str         r2, [r3]

; 730  :     XllpUnlock(LockID);

  01754	e59d0004	 ldr         r0, [sp, #4]
  01758	eb000000	 bl          XllpUnlock

; 731  : 
; 732  :     // Program the GAFR2_L to select alternate function 2 for GPIO 64 through 77.
; 733  :     LockID = XllpLock(GAFR2_L);

  0175c	e3a0001a	 mov         r0, #0x1A
  01760	eb000000	 bl          XllpLock
  01764	e58d0020	 str         r0, [sp, #0x20]
  01768	e59d3020	 ldr         r3, [sp, #0x20]
  0176c	e58d3004	 str         r3, [sp, #4]

; 734  :     p_GPIORegs->GAFR2_L = (p_GPIORegs->GAFR2_L & ~(XLLP_GPIO_AF_BIT_L_DD6_MASK  | XLLP_GPIO_AF_BIT_L_DD7_MASK   | XLLP_GPIO_AF_BIT_L_DD8_MASK   |
; 735  :                                                    XLLP_GPIO_AF_BIT_L_DD9_MASK  | XLLP_GPIO_AF_BIT_L_DD10_MASK  | XLLP_GPIO_AF_BIT_L_DD11_MASK  |
; 736  :                                                    XLLP_GPIO_AF_BIT_L_DD12_MASK | XLLP_GPIO_AF_BIT_L_DD13_MASK  | XLLP_GPIO_AF_BIT_L_DD14_MASK  |
; 737  :                                                    XLLP_GPIO_AF_BIT_L_DD15_MASK | XLLP_GPIO_AF_BIT_L_FCLK_RD_MASK | XLLP_GPIO_AF_BIT_L_LCLK_A0_MASK |
; 738  :                                                    XLLP_GPIO_AF_BIT_L_PCLK_WR_MASK | XLLP_GPIO_AF_BIT_L_BIAS_MASK)) |
; 739  :                                                   (XLLP_GPIO_AF_BIT_L_DD6   | XLLP_GPIO_AF_BIT_L_DD7    | XLLP_GPIO_AF_BIT_L_DD8    | 
; 740  :                                                    XLLP_GPIO_AF_BIT_L_DD9   | XLLP_GPIO_AF_BIT_L_DD10   | XLLP_GPIO_AF_BIT_L_DD11   | 
; 741  :                                                    XLLP_GPIO_AF_BIT_L_DD12  | XLLP_GPIO_AF_BIT_L_DD13   | XLLP_GPIO_AF_BIT_L_DD14   | 
; 742  :                                                    XLLP_GPIO_AF_BIT_L_DD15  | XLLP_GPIO_AF_BIT_L_FCLK_RD| XLLP_GPIO_AF_BIT_L_LCLK_A0|
; 743  :                                                    XLLP_GPIO_AF_BIT_L_PCLK_WR   | XLLP_GPIO_AF_BIT_L_BIAS ); 

  01770	e59d3000	 ldr         r3, [sp]
  01774	e2833064	 add         r3, r3, #0x64
  01778	e5933000	 ldr         r3, [r3]
  0177c	e203220f	 and         r2, r3, #0xF, 4
  01780	e59f3198	 ldr         r3, [pc, #0x198]
  01784	e1822003	 orr         r2, r2, r3
  01788	e59d3000	 ldr         r3, [sp]
  0178c	e2833064	 add         r3, r3, #0x64
  01790	e5832000	 str         r2, [r3]

; 744  :     if (pXllpLCD->DisplayType == LS022Q8DD06)

  01794	e59d3038	 ldr         r3, [sp, #0x38]
  01798	e2833014	 add         r3, r3, #0x14
  0179c	e5933000	 ldr         r3, [r3]
  017a0	e3530006	 cmp         r3, #6
  017a4	1a000007	 bne         |$LN5@LCDSetupGP|

; 745  :     {
; 746  :         p_GPIORegs->GAFR2_L = (p_GPIORegs->GAFR2_L & ~XLLP_GPIO_AF_BIT_L_BIAS_MASK); 

  017a8	e59d3000	 ldr         r3, [sp]
  017ac	e2833064	 add         r3, r3, #0x64
  017b0	e5932000	 ldr         r2, [r3]
  017b4	e3e03303	 mvn         r3, #3, 6
  017b8	e0022003	 and         r2, r2, r3
  017bc	e59d3000	 ldr         r3, [sp]
  017c0	e2833064	 add         r3, r3, #0x64
  017c4	e5832000	 str         r2, [r3]
  017c8		 |$LN5@LCDSetupGP|

; 747  :     }
; 748  : 
; 749  :     XllpUnlock(LockID);

  017c8	e59d0004	 ldr         r0, [sp, #4]
  017cc	eb000000	 bl          XllpUnlock

; 750  : 
; 751  : 
; 752  :     if (pXllpLCD->DisplayType != LS022Q8DD06)

  017d0	e59d3038	 ldr         r3, [sp, #0x38]
  017d4	e2833014	 add         r3, r3, #0x14
  017d8	e5933000	 ldr         r3, [r3]
  017dc	e3530006	 cmp         r3, #6
  017e0	0a00000f	 beq         |$LN4@LCDSetupGP|

; 753  :     {
; 754  :         // Program the GAFR2_U to select alternate function 2 for GPIO 86, 87.
; 755  :         LockID = XllpLock(GAFR2_U);

  017e4	e3a0001b	 mov         r0, #0x1B
  017e8	eb000000	 bl          XllpLock
  017ec	e58d0024	 str         r0, [sp, #0x24]
  017f0	e59d3024	 ldr         r3, [sp, #0x24]
  017f4	e58d3004	 str         r3, [sp, #4]

; 756  :         p_GPIORegs->GAFR2_U = (p_GPIORegs->GAFR2_U & ~(XLLP_GPIO_AF_BIT_L_DD16_MASK | XLLP_GPIO_AF_BIT_L_DD17_MASK))  | (XLLP_GPIO_AF_BIT_L_DD16 | XLLP_GPIO_AF_BIT_L_DD17); 

  017f8	e59d3000	 ldr         r3, [sp]
  017fc	e2833068	 add         r3, r3, #0x68
  01800	e5932000	 ldr         r2, [r3]
  01804	e3e03a0f	 mvn         r3, #0xF, 20
  01808	e0023003	 and         r3, r2, r3
  0180c	e3832a0a	 orr         r2, r3, #0xA, 20
  01810	e59d3000	 ldr         r3, [sp]
  01814	e2833068	 add         r3, r3, #0x68
  01818	e5832000	 str         r2, [r3]

; 757  :         XllpUnlock(LockID);

  0181c	e59d0004	 ldr         r0, [sp, #4]
  01820	eb000000	 bl          XllpUnlock
  01824		 |$LN4@LCDSetupGP|

; 758  :     }
; 759  :         
; 760  :     if (pXllpLCD->DisplayType == LS022Q8DD06)

  01824	e59d3038	 ldr         r3, [sp, #0x38]
  01828	e2833014	 add         r3, r3, #0x14
  0182c	e5933000	 ldr         r3, [r3]
  01830	e3530006	 cmp         r3, #6
  01834	1a00000f	 bne         |$LN3@LCDSetupGP|

; 761  :     {
; 762  :         LockID = XllpLock(GAFR2_U);

  01838	e3a0001b	 mov         r0, #0x1B
  0183c	eb000000	 bl          XllpLock
  01840	e58d0028	 str         r0, [sp, #0x28]
  01844	e59d3028	 ldr         r3, [sp, #0x28]
  01848	e58d3004	 str         r3, [sp, #4]

; 763  :         #if defined XLLP_GPIO_AF_BIT_SSPRXD3_MASK && XLLP_GPIO_AF_BIT_SSPRXD3
; 764  :             p_GPIORegs->GAFR2_U = (p_GPIORegs->GAFR2_U & ~XLLP_GPIO_AF_BIT_SSPRXD3_MASK)  | XLLP_GPIO_AF_BIT_SSPRXD3; 

  0184c	e59d3000	 ldr         r3, [sp]
  01850	e2833068	 add         r3, r3, #0x68
  01854	e5932000	 ldr         r2, [r3]
  01858	e3e03030	 mvn         r3, #0x30
  0185c	e0023003	 and         r3, r2, r3
  01860	e3832010	 orr         r2, r3, #0x10
  01864	e59d3000	 ldr         r3, [sp]
  01868	e2833068	 add         r3, r3, #0x68
  0186c	e5832000	 str         r2, [r3]

; 765  :         #endif
; 766  :         XllpUnlock(LockID);

  01870	e59d0004	 ldr         r0, [sp, #4]
  01874	eb000000	 bl          XllpUnlock
  01878		 |$LN3@LCDSetupGP|

; 767  :     }
; 768  : 
; 769  :     
; 770  : 
; 771  :     if (pXllpLCD->DisplayType != LS022Q8DD06)

  01878	e59d3038	 ldr         r3, [sp, #0x38]
  0187c	e2833014	 add         r3, r3, #0x14
  01880	e5933000	 ldr         r3, [r3]
  01884	e3530006	 cmp         r3, #6
  01888	0a00000d	 beq         |$LN2@LCDSetupGP|

; 772  :     {
; 773  :         LockID = XllpLock(GPSR0);

  0188c	e3a00007	 mov         r0, #7
  01890	eb000000	 bl          XllpLock
  01894	e58d002c	 str         r0, [sp, #0x2C]
  01898	e59d302c	 ldr         r3, [sp, #0x2C]
  0189c	e58d3004	 str         r3, [sp, #4]

; 774  :         // Turn on the backlight...
; 775  :         p_GPIORegs->GPSR0 |= XLLP_GPIO_BIT_PWM_OUT0;

  018a0	e59d3000	 ldr         r3, [sp]
  018a4	e2833018	 add         r3, r3, #0x18
  018a8	e5933000	 ldr         r3, [r3]
  018ac	e3832801	 orr         r2, r3, #1, 16
  018b0	e59d3000	 ldr         r3, [sp]
  018b4	e2833018	 add         r3, r3, #0x18
  018b8	e5832000	 str         r2, [r3]

; 776  :         XllpUnlock(LockID);

  018bc	e59d0004	 ldr         r0, [sp, #4]
  018c0	eb000000	 bl          XllpUnlock
  018c4		 |$LN2@LCDSetupGP|

; 777  :     }
; 778  : 
; 779  :     if (pXllpLCD->DisplayType == LS022Q8DD06)

  018c4	e59d3038	 ldr         r3, [sp, #0x38]
  018c8	e2833014	 add         r3, r3, #0x14
  018cc	e5933000	 ldr         r3, [r3]
  018d0	e3530006	 cmp         r3, #6
  018d4	1a00000e	 bne         |$LN1@LCDSetupGP|

; 780  :     {
; 781  :         p_GPIORegs->GPSR2 &= ~XLLP_GPIO_BIT_L_BIAS;

  018d8	e59d3000	 ldr         r3, [sp]
  018dc	e2833020	 add         r3, r3, #0x20
  018e0	e5932000	 ldr         r2, [r3]
  018e4	e3e03a02	 mvn         r3, #2, 20
  018e8	e0022003	 and         r2, r2, r3
  018ec	e59d3000	 ldr         r3, [sp]
  018f0	e2833020	 add         r3, r3, #0x20
  018f4	e5832000	 str         r2, [r3]

; 782  :         p_GPIORegs->GPCR2 |= XLLP_GPIO_BIT_L_BIAS;

  018f8	e59d3000	 ldr         r3, [sp]
  018fc	e283302c	 add         r3, r3, #0x2C
  01900	e5933000	 ldr         r3, [r3]
  01904	e3832a02	 orr         r2, r3, #2, 20
  01908	e59d3000	 ldr         r3, [sp]
  0190c	e283302c	 add         r3, r3, #0x2C
  01910	e5832000	 str         r2, [r3]
  01914		 |$LN1@LCDSetupGP|

; 783  :     }
; 784  : 
; 785  : }

  01914	e28dd030	 add         sp, sp, #0x30
  01918	e89d6000	 ldmia       sp, {sp, lr}
  0191c	e12fff1e	 bx          lr
  01920		 |$LN16@LCDSetupGP|
  01920		 |$LN17@LCDSetupGP|
  01920	0aaaaaaa	 DCD         0xaaaaaaa
  01924		 |$M1275|

			 ENDP  ; |LCDSetupGPIOs|


  00040			 AREA	 |.pdata|, PDATA
|$T1284| DCD	|$LN5@LCDEnableC|
	DCD	0x40001004
; Function compile flags: /Odtp

  01924			 AREA	 |.text|, CODE, ARM

  01924		 |LCDEnableController| PROC

; 788  : {

  01924		 |$LN5@LCDEnableC|
  01924	e1a0c00d	 mov         r12, sp
  01928	e92d0001	 stmdb       sp!, {r0}
  0192c	e92d5000	 stmdb       sp!, {r12, lr}
  01930	e24dd004	 sub         sp, sp, #4
  01934		 |$M1281|

; 789  :     volatile LCDRegs *p_LCDRegs;
; 790  : 
; 791  :     p_LCDRegs = (LCDRegs *) pXllpLCD->LCDC;

  01934	e59d300c	 ldr         r3, [sp, #0xC]
  01938	e2833008	 add         r3, r3, #8
  0193c	e5933000	 ldr         r3, [r3]
  01940	e58d3000	 str         r3, [sp]

; 792  : 
; 793  :     p_LCDRegs->LCCR0 |= LCD_ENB;

  01944	e59d3000	 ldr         r3, [sp]
  01948	e5933000	 ldr         r3, [r3]
  0194c	e3832001	 orr         r2, r3, #1
  01950	e59d3000	 ldr         r3, [sp]
  01954	e5832000	 str         r2, [r3]

; 794  : }

  01958	e28dd004	 add         sp, sp, #4
  0195c	e89d6000	 ldmia       sp, {sp, lr}
  01960	e12fff1e	 bx          lr
  01964		 |$M1282|

			 ENDP  ; |LCDEnableController|

	EXPORT	|XllpLCD_Overlay2_Enable|

  00048			 AREA	 |.pdata|, PDATA
|$T1290| DCD	|$LN6@XllpLCD_Ov|
	DCD	0x4000ef04
; Function compile flags: /Odtp

  01964			 AREA	 |.text|, CODE, ARM

  01964		 |XllpLCD_Overlay2_Enable| PROC

; 798  : {

  01964		 |$LN6@XllpLCD_Ov|
  01964	e1a0c00d	 mov         r12, sp
  01968	e92d0003	 stmdb       sp!, {r0, r1}
  0196c	e92d5000	 stmdb       sp!, {r12, lr}
  01970	e24dd00c	 sub         sp, sp, #0xC
  01974		 |$M1287|

; 799  :     XLLP_STATUS_T status = 0;

  01974	e3a03000	 mov         r3, #0
  01978	e58d3004	 str         r3, [sp, #4]

; 800  :     
; 801  :     volatile LCDRegs *p_LCDRegs;
; 802  : 
; 803  :     p_LCDRegs = (LCDRegs *) pXllpLCD->LCDC; 

  0197c	e59d3014	 ldr         r3, [sp, #0x14]
  01980	e2833008	 add         r3, r3, #8
  01984	e5933000	 ldr         r3, [r3]
  01988	e58d3000	 str         r3, [sp]

; 804  : 
; 805  :     // Set the physical address of the frame descriptor
; 806  :     pXllpLCD->frameDescriptorCh2_YCbCr_Y->FDADR =  LCD_FDADR(pXllpLCD->_DMA_CHANNEL_2_Y_FRAME_DESCRIPTOR_BASE_PHYSICAL);

  0198c	e59d3014	 ldr         r3, [sp, #0x14]
  01990	e283305c	 add         r3, r3, #0x5C
  01994	e5932000	 ldr         r2, [r3]
  01998	e3e0300f	 mvn         r3, #0xF
  0199c	e0022003	 and         r2, r2, r3
  019a0	e59d3014	 ldr         r3, [sp, #0x14]
  019a4	e283307c	 add         r3, r3, #0x7C
  019a8	e5933000	 ldr         r3, [r3]
  019ac	e5832000	 str         r2, [r3]

; 807  :     pXllpLCD->frameDescriptorCh3_YCbCr_Cb->FDADR = LCD_FDADR(pXllpLCD->_DMA_CHANNEL_3_Cb_FRAME_DESCRIPTOR_BASE_PHYSICAL);

  019b0	e59d3014	 ldr         r3, [sp, #0x14]
  019b4	e2833060	 add         r3, r3, #0x60
  019b8	e5932000	 ldr         r2, [r3]
  019bc	e3e0300f	 mvn         r3, #0xF
  019c0	e0022003	 and         r2, r2, r3
  019c4	e59d3014	 ldr         r3, [sp, #0x14]
  019c8	e2833080	 add         r3, r3, #0x80
  019cc	e5933000	 ldr         r3, [r3]
  019d0	e5832000	 str         r2, [r3]

; 808  :     pXllpLCD->frameDescriptorCh4_YCbCr_Cr->FDADR = LCD_FDADR(pXllpLCD->_DMA_CHANNEL_4_Cr_FRAME_DESCRIPTOR_BASE_PHYSICAL);

  019d4	e59d3014	 ldr         r3, [sp, #0x14]
  019d8	e2833064	 add         r3, r3, #0x64
  019dc	e5932000	 ldr         r2, [r3]
  019e0	e3e0300f	 mvn         r3, #0xF
  019e4	e0022003	 and         r2, r2, r3
  019e8	e59d3014	 ldr         r3, [sp, #0x14]
  019ec	e2833084	 add         r3, r3, #0x84
  019f0	e5933000	 ldr         r3, [r3]
  019f4	e5832000	 str         r2, [r3]

; 809  : 
; 810  :     // Set the physical address of the frame buffer
; 811  :     pXllpLCD->frameDescriptorCh2_YCbCr_Y->FSADR =  LCD_FSADR(pXllpLCD->_OVERLAY2_Y_CHANNEL_BASE_PHYSICAL);

  019f8	e59d3014	 ldr         r3, [sp, #0x14]
  019fc	e2833040	 add         r3, r3, #0x40
  01a00	e5932000	 ldr         r2, [r3]
  01a04	e3e03007	 mvn         r3, #7
  01a08	e0022003	 and         r2, r2, r3
  01a0c	e59d3014	 ldr         r3, [sp, #0x14]
  01a10	e283307c	 add         r3, r3, #0x7C
  01a14	e5933000	 ldr         r3, [r3]
  01a18	e2833004	 add         r3, r3, #4
  01a1c	e5832000	 str         r2, [r3]

; 812  :     pXllpLCD->frameDescriptorCh3_YCbCr_Cb->FSADR = LCD_FSADR(pXllpLCD->_OVERLAY2_Cb_CHANNEL_BASE_PHYSICAL);

  01a20	e59d3014	 ldr         r3, [sp, #0x14]
  01a24	e2833044	 add         r3, r3, #0x44
  01a28	e5932000	 ldr         r2, [r3]
  01a2c	e3e03007	 mvn         r3, #7
  01a30	e0022003	 and         r2, r2, r3
  01a34	e59d3014	 ldr         r3, [sp, #0x14]
  01a38	e2833080	 add         r3, r3, #0x80
  01a3c	e5933000	 ldr         r3, [r3]
  01a40	e2833004	 add         r3, r3, #4
  01a44	e5832000	 str         r2, [r3]

; 813  :     pXllpLCD->frameDescriptorCh4_YCbCr_Cr->FSADR = LCD_FSADR(pXllpLCD->_OVERLAY2_Cr_CHANNEL_BASE_PHYSICAL);

  01a48	e59d3014	 ldr         r3, [sp, #0x14]
  01a4c	e2833048	 add         r3, r3, #0x48
  01a50	e5932000	 ldr         r2, [r3]
  01a54	e3e03007	 mvn         r3, #7
  01a58	e0022003	 and         r2, r2, r3
  01a5c	e59d3014	 ldr         r3, [sp, #0x14]
  01a60	e2833084	 add         r3, r3, #0x84
  01a64	e5933000	 ldr         r3, [r3]
  01a68	e2833004	 add         r3, r3, #4
  01a6c	e5832000	 str         r2, [r3]

; 814  :     
; 815  :     // Clear the frame ID
; 816  :     pXllpLCD->frameDescriptorCh2_YCbCr_Y->FIDR  = LCD_FIDR(0);

  01a70	e59d3014	 ldr         r3, [sp, #0x14]
  01a74	e283307c	 add         r3, r3, #0x7C
  01a78	e5933000	 ldr         r3, [r3]
  01a7c	e2832008	 add         r2, r3, #8
  01a80	e3a03000	 mov         r3, #0
  01a84	e5823000	 str         r3, [r2]

; 817  :     pXllpLCD->frameDescriptorCh3_YCbCr_Cb->FIDR  = LCD_FIDR(0);

  01a88	e59d3014	 ldr         r3, [sp, #0x14]
  01a8c	e2833080	 add         r3, r3, #0x80
  01a90	e5933000	 ldr         r3, [r3]
  01a94	e2832008	 add         r2, r3, #8
  01a98	e3a03000	 mov         r3, #0
  01a9c	e5823000	 str         r3, [r2]

; 818  :     pXllpLCD->frameDescriptorCh4_YCbCr_Cr->FIDR  = LCD_FIDR(0);

  01aa0	e59d3014	 ldr         r3, [sp, #0x14]
  01aa4	e2833084	 add         r3, r3, #0x84
  01aa8	e5933000	 ldr         r3, [r3]
  01aac	e2832008	 add         r2, r3, #8
  01ab0	e3a03000	 mov         r3, #0
  01ab4	e5823000	 str         r3, [r2]

; 819  : 
; 820  :     // Set the DMA transfer size (calculated already by XllpLCD_DMALength())
; 821  :     pXllpLCD->frameDescriptorCh2_YCbCr_Y->LDCMD = LCD_Len(pXllpOverlay->ch2_size);

  01ab8	e59d3018	 ldr         r3, [sp, #0x18]
  01abc	e2831034	 add         r1, r3, #0x34
  01ac0	e59d3014	 ldr         r3, [sp, #0x14]
  01ac4	e283307c	 add         r3, r3, #0x7C
  01ac8	e5933000	 ldr         r3, [r3]
  01acc	e283200c	 add         r2, r3, #0xC
  01ad0	e5913000	 ldr         r3, [r1]
  01ad4	e5823000	 str         r3, [r2]

; 822  :     pXllpLCD->frameDescriptorCh3_YCbCr_Cb->LDCMD = LCD_Len(pXllpOverlay->ch3_size);

  01ad8	e59d3018	 ldr         r3, [sp, #0x18]
  01adc	e2831038	 add         r1, r3, #0x38
  01ae0	e59d3014	 ldr         r3, [sp, #0x14]
  01ae4	e2833080	 add         r3, r3, #0x80
  01ae8	e5933000	 ldr         r3, [r3]
  01aec	e283200c	 add         r2, r3, #0xC
  01af0	e5913000	 ldr         r3, [r1]
  01af4	e5823000	 str         r3, [r2]

; 823  :     pXllpLCD->frameDescriptorCh4_YCbCr_Cr->LDCMD = LCD_Len(pXllpOverlay->ch4_size);

  01af8	e59d3018	 ldr         r3, [sp, #0x18]
  01afc	e283103c	 add         r1, r3, #0x3C
  01b00	e59d3014	 ldr         r3, [sp, #0x14]
  01b04	e2833084	 add         r3, r3, #0x84
  01b08	e5933000	 ldr         r3, [r3]
  01b0c	e283200c	 add         r2, r3, #0xC
  01b10	e5913000	 ldr         r3, [r1]
  01b14	e5823000	 str         r3, [r2]

; 824  : 
; 825  :     // Store the physical address of each frame descriptor in the frame descriptor
; 826  :     pXllpLCD->frameDescriptorCh2_YCbCr_Y->PHYSADDR = pXllpLCD->frameDescriptorCh2_YCbCr_Y->FDADR;

  01b18	e59d3014	 ldr         r3, [sp, #0x14]
  01b1c	e283307c	 add         r3, r3, #0x7C
  01b20	e5931000	 ldr         r1, [r3]
  01b24	e59d3014	 ldr         r3, [sp, #0x14]
  01b28	e283307c	 add         r3, r3, #0x7C
  01b2c	e5933000	 ldr         r3, [r3]
  01b30	e2832010	 add         r2, r3, #0x10
  01b34	e5913000	 ldr         r3, [r1]
  01b38	e5823000	 str         r3, [r2]

; 827  :     pXllpLCD->frameDescriptorCh3_YCbCr_Cb->PHYSADDR = pXllpLCD->frameDescriptorCh3_YCbCr_Cb->FDADR;

  01b3c	e59d3014	 ldr         r3, [sp, #0x14]
  01b40	e2833080	 add         r3, r3, #0x80
  01b44	e5931000	 ldr         r1, [r3]
  01b48	e59d3014	 ldr         r3, [sp, #0x14]
  01b4c	e2833080	 add         r3, r3, #0x80
  01b50	e5933000	 ldr         r3, [r3]
  01b54	e2832010	 add         r2, r3, #0x10
  01b58	e5913000	 ldr         r3, [r1]
  01b5c	e5823000	 str         r3, [r2]

; 828  :     pXllpLCD->frameDescriptorCh4_YCbCr_Cr->PHYSADDR = pXllpLCD->frameDescriptorCh4_YCbCr_Cr->FDADR;

  01b60	e59d3014	 ldr         r3, [sp, #0x14]
  01b64	e2833084	 add         r3, r3, #0x84
  01b68	e5931000	 ldr         r1, [r3]
  01b6c	e59d3014	 ldr         r3, [sp, #0x14]
  01b70	e2833084	 add         r3, r3, #0x84
  01b74	e5933000	 ldr         r3, [r3]
  01b78	e2832010	 add         r2, r3, #0x10
  01b7c	e5913000	 ldr         r3, [r1]
  01b80	e5823000	 str         r3, [r2]

; 829  :     
; 830  :     // FBRx is cleared and is not used.
; 831  :     p_LCDRegs->FBR2 = 0;

  01b84	e59d3000	 ldr         r3, [sp]
  01b88	e2832028	 add         r2, r3, #0x28
  01b8c	e3a03000	 mov         r3, #0
  01b90	e5823000	 str         r3, [r2]

; 832  :     p_LCDRegs->FBR3 = 0;

  01b94	e59d3000	 ldr         r3, [sp]
  01b98	e283202c	 add         r2, r3, #0x2C
  01b9c	e3a03000	 mov         r3, #0
  01ba0	e5823000	 str         r3, [r2]

; 833  :     p_LCDRegs->FBR4 = 0;

  01ba4	e59d3000	 ldr         r3, [sp]
  01ba8	e2832030	 add         r2, r3, #0x30
  01bac	e3a03000	 mov         r3, #0
  01bb0	e5823000	 str         r3, [r2]

; 834  : 
; 835  :     // Load the contents of FDADRx with the physical address of this frame descriptor
; 836  :     p_LCDRegs->FDADR2 = LCD_FDADR(pXllpLCD->frameDescriptorCh2_YCbCr_Y->FDADR);

  01bb4	e59d3014	 ldr         r3, [sp, #0x14]
  01bb8	e283307c	 add         r3, r3, #0x7C
  01bbc	e5933000	 ldr         r3, [r3]
  01bc0	e5932000	 ldr         r2, [r3]
  01bc4	e3e0300f	 mvn         r3, #0xF
  01bc8	e0022003	 and         r2, r2, r3
  01bcc	e59d3000	 ldr         r3, [sp]
  01bd0	e2833e22	 add         r3, r3, #0x22, 28
  01bd4	e5832000	 str         r2, [r3]

; 837  :     p_LCDRegs->FDADR3 = LCD_FDADR(pXllpLCD->frameDescriptorCh3_YCbCr_Cb->FDADR);

  01bd8	e59d3014	 ldr         r3, [sp, #0x14]
  01bdc	e2833080	 add         r3, r3, #0x80
  01be0	e5933000	 ldr         r3, [r3]
  01be4	e5932000	 ldr         r2, [r3]
  01be8	e3e0300f	 mvn         r3, #0xF
  01bec	e0022003	 and         r2, r2, r3
  01bf0	e59d3000	 ldr         r3, [sp]
  01bf4	e2833e23	 add         r3, r3, #0x23, 28
  01bf8	e5832000	 str         r2, [r3]

; 838  :     p_LCDRegs->FDADR4 = LCD_FDADR(pXllpLCD->frameDescriptorCh4_YCbCr_Cr->FDADR);

  01bfc	e59d3014	 ldr         r3, [sp, #0x14]
  01c00	e2833084	 add         r3, r3, #0x84
  01c04	e5933000	 ldr         r3, [r3]
  01c08	e5932000	 ldr         r2, [r3]
  01c0c	e3e0300f	 mvn         r3, #0xF
  01c10	e0022003	 and         r2, r2, r3
  01c14	e59d3000	 ldr         r3, [sp]
  01c18	e2833d09	 add         r3, r3, #9, 26
  01c1c	e5832000	 str         r2, [r3]

; 839  :     
; 840  : 
; 841  :     // Reinit the LCD controller so that the pixel data format can be updated for use with overlays
; 842  :     XllpLCDSuspend(pXllpLCD, Suspend_Graceful);

  01c20	e3a01000	 mov         r1, #0
  01c24	e59d0014	 ldr         r0, [sp, #0x14]
  01c28	eb000000	 bl          XllpLCDSuspend

; 843  : 
; 844  :     pXllpOverlay->TmpBPP = pXllpLCD->BPP;

  01c2c	e59d3014	 ldr         r3, [sp, #0x14]
  01c30	e2831028	 add         r1, r3, #0x28
  01c34	e59d3018	 ldr         r3, [sp, #0x18]
  01c38	e283202c	 add         r2, r3, #0x2C
  01c3c	e5913000	 ldr         r3, [r1]
  01c40	e5823000	 str         r3, [r2]

; 845  :     if (pXllpOverlay->DegradeBaseFrame)

  01c44	e59d3018	 ldr         r3, [sp, #0x18]
  01c48	e2833014	 add         r3, r3, #0x14
  01c4c	e5933000	 ldr         r3, [r3]
  01c50	e3530000	 cmp         r3, #0
  01c54	0a000003	 beq         |$LN1@XllpLCD_Ov|

; 846  :     {
; 847  :         pXllpLCD->BPP = BPP_1;

  01c58	e59d3014	 ldr         r3, [sp, #0x14]
  01c5c	e2832028	 add         r2, r3, #0x28
  01c60	e3a03001	 mov         r3, #1
  01c64	e5823000	 str         r3, [r2]
  01c68		 |$LN1@XllpLCD_Ov|

; 848  :     }
; 849  :     
; 850  :     pXllpLCD->PixelDataFormat = PDFOR_11;

  01c68	e59d3014	 ldr         r3, [sp, #0x14]
  01c6c	e283202c	 add         r2, r3, #0x2C
  01c70	e3a03003	 mov         r3, #3
  01c74	e5823000	 str         r3, [r2]

; 851  : 
; 852  :     // Configure the overlay registers and enable the overlay
; 853  :     p_LCDRegs->OVL2C2 = (LCD_FOR(pXllpOverlay->Format) | LCD_O2YPOS(pXllpOverlay->Y_Position) | LCD_O2XPOS(pXllpOverlay->X_Position));

  01c78	e59d3018	 ldr         r3, [sp, #0x18]
  01c7c	e2833010	 add         r3, r3, #0x10
  01c80	e5933000	 ldr         r3, [r3]
  01c84	e1a02a03	 mov         r2, r3, lsl #20
  01c88	e59d3018	 ldr         r3, [sp, #0x18]
  01c8c	e283300c	 add         r3, r3, #0xC
  01c90	e5933000	 ldr         r3, [r3]
  01c94	e1a03503	 mov         r3, r3, lsl #10
  01c98	e1822003	 orr         r2, r2, r3
  01c9c	e59d3018	 ldr         r3, [sp, #0x18]
  01ca0	e2833008	 add         r3, r3, #8
  01ca4	e5933000	 ldr         r3, [r3]
  01ca8	e1822003	 orr         r2, r2, r3
  01cac	e59d3000	 ldr         r3, [sp]
  01cb0	e2833080	 add         r3, r3, #0x80
  01cb4	e5832000	 str         r2, [r3]

; 854  :     p_LCDRegs->OVL2C1 = (LCD_O2EN | LCD_BPP2(pXllpOverlay->OverlayBPP) | LCD_LPO2(pXllpOverlay->OverlayHeight-1) | LCD_PPL2(pXllpOverlay->OverlayWidth-1));

  01cb8	e59d3018	 ldr         r3, [sp, #0x18]
  01cbc	e2833028	 add         r3, r3, #0x28
  01cc0	e5933000	 ldr         r3, [r3]
  01cc4	e1a03a03	 mov         r3, r3, lsl #20
  01cc8	e3832102	 orr         r2, r3, #2, 2
  01ccc	e59d3018	 ldr         r3, [sp, #0x18]
  01cd0	e5933000	 ldr         r3, [r3]
  01cd4	e2433001	 sub         r3, r3, #1
  01cd8	e1a03503	 mov         r3, r3, lsl #10
  01cdc	e1822003	 orr         r2, r2, r3
  01ce0	e59d3018	 ldr         r3, [sp, #0x18]
  01ce4	e2833004	 add         r3, r3, #4
  01ce8	e5933000	 ldr         r3, [r3]
  01cec	e2433001	 sub         r3, r3, #1
  01cf0	e1822003	 orr         r2, r2, r3
  01cf4	e59d3000	 ldr         r3, [sp]
  01cf8	e2833070	 add         r3, r3, #0x70
  01cfc	e5832000	 str         r2, [r3]

; 855  : 
; 856  :     XllpLCDResume(pXllpLCD);

  01d00	e59d0014	 ldr         r0, [sp, #0x14]
  01d04	eb000000	 bl          XllpLCDResume

; 857  : 
; 858  :     return status;

  01d08	e59d3004	 ldr         r3, [sp, #4]
  01d0c	e58d3008	 str         r3, [sp, #8]

; 859  : }

  01d10	e59d0008	 ldr         r0, [sp, #8]
  01d14	e28dd00c	 add         sp, sp, #0xC
  01d18	e89d6000	 ldmia       sp, {sp, lr}
  01d1c	e12fff1e	 bx          lr
  01d20		 |$M1288|

			 ENDP  ; |XllpLCD_Overlay2_Enable|

	EXPORT	|XllpLCD_Overlay2_Disable|

  00050			 AREA	 |.pdata|, PDATA
|$T1295| DCD	|$LN5@XllpLCD_Ov@2|
	DCD	0x40002204
; Function compile flags: /Odtp

  01d20			 AREA	 |.text|, CODE, ARM

  01d20		 |XllpLCD_Overlay2_Disable| PROC

; 862  : {

  01d20		 |$LN5@XllpLCD_Ov@2|
  01d20	e1a0c00d	 mov         r12, sp
  01d24	e92d0003	 stmdb       sp!, {r0, r1}
  01d28	e92d5000	 stmdb       sp!, {r12, lr}
  01d2c	e24dd004	 sub         sp, sp, #4
  01d30		 |$M1292|

; 863  :     volatile LCDRegs *p_LCDRegs;
; 864  :     
; 865  :     p_LCDRegs = (LCDRegs *) pXllpLCD->LCDC; 

  01d30	e59d300c	 ldr         r3, [sp, #0xC]
  01d34	e2833008	 add         r3, r3, #8
  01d38	e5933000	 ldr         r3, [r3]
  01d3c	e58d3000	 str         r3, [sp]

; 866  : 
; 867  :     // Reinit the LCD controller so that the pixel data format can be updated for use without overlays
; 868  :     XllpLCDSuspend(pXllpLCD, Suspend_Graceful);

  01d40	e3a01000	 mov         r1, #0
  01d44	e59d000c	 ldr         r0, [sp, #0xC]
  01d48	eb000000	 bl          XllpLCDSuspend

; 869  : 
; 870  :     pXllpLCD->PixelDataFormat = PDFOR_00;

  01d4c	e59d300c	 ldr         r3, [sp, #0xC]
  01d50	e283202c	 add         r2, r3, #0x2C
  01d54	e3a03000	 mov         r3, #0
  01d58	e5823000	 str         r3, [r2]

; 871  : 
; 872  :     // Undo the degraded base frame - always.
; 873  :     pXllpLCD->BPP = pXllpOverlay->TmpBPP;

  01d5c	e59d3010	 ldr         r3, [sp, #0x10]
  01d60	e283102c	 add         r1, r3, #0x2C
  01d64	e59d300c	 ldr         r3, [sp, #0xC]
  01d68	e2832028	 add         r2, r3, #0x28
  01d6c	e5913000	 ldr         r3, [r1]
  01d70	e5823000	 str         r3, [r2]

; 874  : 
; 875  :     p_LCDRegs->OVL2C1 &= 0x00FFFFFF; // Clear the enable bit, and clear the reserved bits 30:24.

  01d74	e59d3000	 ldr         r3, [sp]
  01d78	e2833070	 add         r3, r3, #0x70
  01d7c	e5932000	 ldr         r2, [r3]
  01d80	e3e034ff	 mvn         r3, #0xFF, 8
  01d84	e0022003	 and         r2, r2, r3
  01d88	e59d3000	 ldr         r3, [sp]
  01d8c	e2833070	 add         r3, r3, #0x70
  01d90	e5832000	 str         r2, [r3]

; 876  :     XllpLCDResume(pXllpLCD);

  01d94	e59d000c	 ldr         r0, [sp, #0xC]
  01d98	eb000000	 bl          XllpLCDResume

; 877  : }

  01d9c	e28dd004	 add         sp, sp, #4
  01da0	e89d6000	 ldmia       sp, {sp, lr}
  01da4	e12fff1e	 bx          lr
  01da8		 |$M1293|

			 ENDP  ; |XllpLCD_Overlay2_Disable|

	EXPORT	|XllpLCD_DMALength|
	IMPORT	|__rt_udiv|

  00058			 AREA	 |.pdata|, PDATA
|$T1312| DCD	|$LN41@XllpLCD_DM|
	DCD	0x4000f604
; Function compile flags: /Odtp

  01da8			 AREA	 |.text|, CODE, ARM

  01da8		 |XllpLCD_DMALength| PROC

; 880  : {

  01da8		 |$LN41@XllpLCD_DM|
  01da8	e1a0c00d	 mov         r12, sp
  01dac	e92d0001	 stmdb       sp!, {r0}
  01db0	e92d5000	 stmdb       sp!, {r12, lr}
  01db4	e24dd00c	 sub         sp, sp, #0xC
  01db8		 |$M1309|

; 881  :     unsigned int pixels = pXllpOverlay->OverlayHeight * pXllpOverlay->OverlayWidth;

  01db8	e59d3014	 ldr         r3, [sp, #0x14]
  01dbc	e2831004	 add         r1, r3, #4
  01dc0	e59d3014	 ldr         r3, [sp, #0x14]
  01dc4	e5932000	 ldr         r2, [r3]
  01dc8	e5913000	 ldr         r3, [r1]
  01dcc	e0030392	 mul         r3, r2, r3
  01dd0	e58d3004	 str         r3, [sp, #4]

; 882  :     unsigned int DMALength = 0;

  01dd4	e3a03000	 mov         r3, #0
  01dd8	e58d3000	 str         r3, [sp]

; 883  : 
; 884  :     // Determine the DMA transfer length
; 885  :     // each DMA transfer length for YUV formatted data must be multiples of 32-bits and adjusted accordingly
; 886  :     if (pXllpOverlay->Format == FORMAT_RGB)

  01ddc	e59d3014	 ldr         r3, [sp, #0x14]
  01de0	e2833010	 add         r3, r3, #0x10
  01de4	e5933000	 ldr         r3, [r3]
  01de8	e3530000	 cmp         r3, #0
  01dec	1a00003f	 bne         |$LN25@XllpLCD_DM|

; 887  :     {
; 888  :         switch(pXllpOverlay->OverlayBPP)

  01df0	e59d3014	 ldr         r3, [sp, #0x14]
  01df4	e2833028	 add         r3, r3, #0x28
  01df8	e5933000	 ldr         r3, [r3]
  01dfc	e58d3008	 str         r3, [sp, #8]
  01e00	e59d3008	 ldr         r3, [sp, #8]
  01e04	e2433002	 sub         r3, r3, #2
  01e08	e58d3008	 str         r3, [sp, #8]
  01e0c	e59d3008	 ldr         r3, [sp, #8]
  01e10	e3530008	 cmp         r3, #8
  01e14	8a000029	 bhi         |$LN13@XllpLCD_DM|
  01e18	e59d2008	 ldr         r2, [sp, #8]
  01e1c	e1a03102	 mov         r3, r2, lsl #2
  01e20	e083300f	 add         r3, r3, pc
  01e24	e5933004	 ldr         r3, [r3, #4]
  01e28	e08ff003	 add         pc, pc, r3
  01e2c		 |$LN29@XllpLCD_DM|
  01e2c		 |$LN28@XllpLCD_DM|
  01e2c		 |$LN30@XllpLCD_DM|
  01e2c	00000020	 DCD         0x20
  01e30		 |$LN31@XllpLCD_DM|
  01e30	00000030	 DCD         0x30
  01e34		 |$LN32@XllpLCD_DM|
  01e34	0000003c	 DCD         0x3c
  01e38		 |$LN33@XllpLCD_DM|
  01e38	0000004c	 DCD         0x4c
  01e3c		 |$LN34@XllpLCD_DM|
  01e3c	00000090	 DCD         0x90
  01e40		 |$LN35@XllpLCD_DM|
  01e40	00000060	 DCD         0x60
  01e44		 |$LN36@XllpLCD_DM|
  01e44	00000090	 DCD         0x90
  01e48		 |$LN37@XllpLCD_DM|
  01e48	00000074	 DCD         0x74
  01e4c		 |$LN38@XllpLCD_DM|
  01e4c	00000084	 DCD         0x84
  01e50		 |$LN22@XllpLCD_DM|

; 889  :         {
; 890  :             case O_BPP_4:
; 891  :                 DMALength = pixels >> 1;

  01e50	e59d3004	 ldr         r3, [sp, #4]
  01e54	e1a030a3	 mov         r3, r3, lsr #1
  01e58	e58d3000	 str         r3, [sp]

; 892  :                 break;

  01e5c	ea000017	 b           |$LN23@XllpLCD_DM|
  01e60		 |$LN21@XllpLCD_DM|

; 893  :             case O_BPP_8:
; 894  :                 DMALength = pixels;

  01e60	e59d3004	 ldr         r3, [sp, #4]
  01e64	e58d3000	 str         r3, [sp]

; 895  :                 break;

  01e68	ea000014	 b           |$LN23@XllpLCD_DM|
  01e6c		 |$LN20@XllpLCD_DM|

; 896  :             case O_BPP_16:
; 897  :                 DMALength = pixels << 1;

  01e6c	e59d3004	 ldr         r3, [sp, #4]
  01e70	e1a03083	 mov         r3, r3, lsl #1
  01e74	e58d3000	 str         r3, [sp]

; 898  :                 break;

  01e78	ea000010	 b           |$LN23@XllpLCD_DM|
  01e7c		 |$LN19@XllpLCD_DM|

; 899  :             case O_BPP_18:
; 900  :                 DMALength = pixels << 2;

  01e7c	e59d3004	 ldr         r3, [sp, #4]
  01e80	e1a03103	 mov         r3, r3, lsl #2
  01e84	e58d3000	 str         r3, [sp]

; 901  :                 break;

  01e88	ea00000c	 b           |$LN23@XllpLCD_DM|

; 902  :             case O_BPP_18_PACKED:
; 903  :                 break;

  01e8c	ea00000b	 b           |$LN23@XllpLCD_DM|
  01e90		 |$LN17@XllpLCD_DM|

; 904  :             case O_BPP_19:
; 905  :                 DMALength = pixels << 2;

  01e90	e59d3004	 ldr         r3, [sp, #4]
  01e94	e1a03103	 mov         r3, r3, lsl #2
  01e98	e58d3000	 str         r3, [sp]

; 906  :                 break;

  01e9c	ea000007	 b           |$LN23@XllpLCD_DM|

; 907  :             case O_BPP_19_PACKED:
; 908  :                 break;

  01ea0	ea000006	 b           |$LN23@XllpLCD_DM|
  01ea4		 |$LN15@XllpLCD_DM|

; 909  :             case O_BPP_24:
; 910  :                 DMALength = pixels << 2;

  01ea4	e59d3004	 ldr         r3, [sp, #4]
  01ea8	e1a03103	 mov         r3, r3, lsl #2
  01eac	e58d3000	 str         r3, [sp]

; 911  :                 break;

  01eb0	ea000002	 b           |$LN23@XllpLCD_DM|
  01eb4		 |$LN14@XllpLCD_DM|

; 912  :             case O_BPP_25:
; 913  :                 DMALength = pixels << 2;

  01eb4	e59d3004	 ldr         r3, [sp, #4]
  01eb8	e1a03103	 mov         r3, r3, lsl #2
  01ebc	e58d3000	 str         r3, [sp]
  01ec0		 |$LN13@XllpLCD_DM|
  01ec0		 |$LN23@XllpLCD_DM|

; 914  :                 break;
; 915  :         default:
; 916  :             break;
; 917  :         }
; 918  :         pXllpOverlay->ch2_size = DMALength;

  01ec0	e59d3014	 ldr         r3, [sp, #0x14]
  01ec4	e2832034	 add         r2, r3, #0x34
  01ec8	e59d3000	 ldr         r3, [sp]
  01ecc	e5823000	 str         r3, [r2]

; 919  :         pXllpOverlay->ch3_size = 0;

  01ed0	e59d3014	 ldr         r3, [sp, #0x14]
  01ed4	e2832038	 add         r2, r3, #0x38
  01ed8	e3a03000	 mov         r3, #0
  01edc	e5823000	 str         r3, [r2]

; 920  :         pXllpOverlay->ch4_size = 0;

  01ee0	e59d3014	 ldr         r3, [sp, #0x14]
  01ee4	e283203c	 add         r2, r3, #0x3C
  01ee8	e3a03000	 mov         r3, #0
  01eec	e5823000	 str         r3, [r2]
  01ef0		 |$LN25@XllpLCD_DM|

; 921  :     }
; 922  :     if (pXllpOverlay->Format == FORMAT_PACKED_444)

  01ef0	e59d3014	 ldr         r3, [sp, #0x14]
  01ef4	e2833010	 add         r3, r3, #0x10
  01ef8	e5933000	 ldr         r3, [r3]
  01efc	e3530001	 cmp         r3, #1
  01f00	1a00000d	 bne         |$LN12@XllpLCD_DM|

; 923  :     {
; 924  :         pXllpOverlay->ch2_size = (pixels << 2);

  01f04	e59d3004	 ldr         r3, [sp, #4]
  01f08	e1a02103	 mov         r2, r3, lsl #2
  01f0c	e59d3014	 ldr         r3, [sp, #0x14]
  01f10	e2833034	 add         r3, r3, #0x34
  01f14	e5832000	 str         r2, [r3]

; 925  :         pXllpOverlay->ch3_size = 0;

  01f18	e59d3014	 ldr         r3, [sp, #0x14]
  01f1c	e2832038	 add         r2, r3, #0x38
  01f20	e3a03000	 mov         r3, #0
  01f24	e5823000	 str         r3, [r2]

; 926  :         pXllpOverlay->ch4_size = 0;

  01f28	e59d3014	 ldr         r3, [sp, #0x14]
  01f2c	e283203c	 add         r2, r3, #0x3C
  01f30	e3a03000	 mov         r3, #0
  01f34	e5823000	 str         r3, [r2]
  01f38	ea00008d	 b           |$LN11@XllpLCD_DM|
  01f3c		 |$LN12@XllpLCD_DM|

; 927  :     } 
; 928  :     else if (pXllpOverlay->Format == FORMAT_PLANAR_444) 

  01f3c	e59d3014	 ldr         r3, [sp, #0x14]
  01f40	e2833010	 add         r3, r3, #0x10
  01f44	e5933000	 ldr         r3, [r3]
  01f48	e3530002	 cmp         r3, #2
  01f4c	1a00001d	 bne         |$LN10@XllpLCD_DM|

; 929  :     {
; 930  :         // calculate the number of bits in the frame (pixels << 3)
; 931  :         // mod by 32 to determine the remainder
; 932  :         // subtract from 32 to determine how many bits to add to the length to make it a multiple of 32 bits
; 933  :         // add this value to the number of bits in the frame
; 934  :         // convert this value back to bytes
; 935  :         DMALength = pixels;

  01f50	e59d3004	 ldr         r3, [sp, #4]
  01f54	e58d3000	 str         r3, [sp]

; 936  :         if ((DMALength % 4) > 0)

  01f58	e59d1000	 ldr         r1, [sp]
  01f5c	e3a00004	 mov         r0, #4
  01f60	eb000000	 bl          __rt_udiv
  01f64	e3510000	 cmp         r1, #0
  01f68	0a000009	 beq         |$LN9@XllpLCD_DM|

; 937  :         {
; 938  :             DMALength = (((32 - ((pixels << 3) % 32)) + (pixels << 3)) >> 3);  // 24 bits total

  01f6c	e59d3004	 ldr         r3, [sp, #4]
  01f70	e1a01183	 mov         r1, r3, lsl #3
  01f74	e3a00020	 mov         r0, #0x20
  01f78	eb000000	 bl          __rt_udiv
  01f7c	e2612020	 rsb         r2, r1, #0x20
  01f80	e59d3004	 ldr         r3, [sp, #4]
  01f84	e1a03183	 mov         r3, r3, lsl #3
  01f88	e0823003	 add         r3, r2, r3
  01f8c	e1a031a3	 mov         r3, r3, lsr #3
  01f90	e58d3000	 str         r3, [sp]
  01f94		 |$LN9@XllpLCD_DM|

; 939  :         }
; 940  :         pXllpOverlay->ch2_size = DMALength;

  01f94	e59d3014	 ldr         r3, [sp, #0x14]
  01f98	e2832034	 add         r2, r3, #0x34
  01f9c	e59d3000	 ldr         r3, [sp]
  01fa0	e5823000	 str         r3, [r2]

; 941  :         pXllpOverlay->ch3_size = DMALength;

  01fa4	e59d3014	 ldr         r3, [sp, #0x14]
  01fa8	e2832038	 add         r2, r3, #0x38
  01fac	e59d3000	 ldr         r3, [sp]
  01fb0	e5823000	 str         r3, [r2]

; 942  :         pXllpOverlay->ch4_size = DMALength;

  01fb4	e59d3014	 ldr         r3, [sp, #0x14]
  01fb8	e283203c	 add         r2, r3, #0x3C
  01fbc	e59d3000	 ldr         r3, [sp]
  01fc0	e5823000	 str         r3, [r2]
  01fc4	ea00006a	 b           |$LN8@XllpLCD_DM|
  01fc8		 |$LN10@XllpLCD_DM|

; 943  :     }
; 944  :     else if (pXllpOverlay->Format == FORMAT_PLANAR_422)

  01fc8	e59d3014	 ldr         r3, [sp, #0x14]
  01fcc	e2833010	 add         r3, r3, #0x10
  01fd0	e5933000	 ldr         r3, [r3]
  01fd4	e3530003	 cmp         r3, #3
  01fd8	1a000030	 bne         |$LN7@XllpLCD_DM|

; 945  :     {                                                                           
; 946  :         DMALength = pixels;

  01fdc	e59d3004	 ldr         r3, [sp, #4]
  01fe0	e58d3000	 str         r3, [sp]

; 947  :         if ((DMALength % 4) > 0)

  01fe4	e59d1000	 ldr         r1, [sp]
  01fe8	e3a00004	 mov         r0, #4
  01fec	eb000000	 bl          __rt_udiv
  01ff0	e3510000	 cmp         r1, #0
  01ff4	0a000009	 beq         |$LN6@XllpLCD_DM|

; 948  :         {
; 949  :             DMALength = (((32 - ((pixels << 3) % 32)) + (pixels << 3)) >> 3);   // 16 bits total

  01ff8	e59d3004	 ldr         r3, [sp, #4]
  01ffc	e1a01183	 mov         r1, r3, lsl #3
  02000	e3a00020	 mov         r0, #0x20
  02004	eb000000	 bl          __rt_udiv
  02008	e2612020	 rsb         r2, r1, #0x20
  0200c	e59d3004	 ldr         r3, [sp, #4]
  02010	e1a03183	 mov         r3, r3, lsl #3
  02014	e0823003	 add         r3, r2, r3
  02018	e1a031a3	 mov         r3, r3, lsr #3
  0201c	e58d3000	 str         r3, [sp]
  02020		 |$LN6@XllpLCD_DM|

; 950  :         }
; 951  :         pXllpOverlay->ch2_size = DMALength;

  02020	e59d3014	 ldr         r3, [sp, #0x14]
  02024	e2832034	 add         r2, r3, #0x34
  02028	e59d3000	 ldr         r3, [sp]
  0202c	e5823000	 str         r3, [r2]

; 952  : 
; 953  :         DMALength = pixels >> 1;

  02030	e59d3004	 ldr         r3, [sp, #4]
  02034	e1a030a3	 mov         r3, r3, lsr #1
  02038	e58d3000	 str         r3, [sp]

; 954  :         if (((pixels << 2) % 32) > 0)

  0203c	e59d3004	 ldr         r3, [sp, #4]
  02040	e1a01103	 mov         r1, r3, lsl #2
  02044	e3a00020	 mov         r0, #0x20
  02048	eb000000	 bl          __rt_udiv
  0204c	e3510000	 cmp         r1, #0
  02050	0a000009	 beq         |$LN5@XllpLCD_DM|

; 955  :         {
; 956  :             DMALength = (((32 - ((pixels << 2) % 32)) + (pixels << 2)) >> 3);

  02054	e59d3004	 ldr         r3, [sp, #4]
  02058	e1a01103	 mov         r1, r3, lsl #2
  0205c	e3a00020	 mov         r0, #0x20
  02060	eb000000	 bl          __rt_udiv
  02064	e2612020	 rsb         r2, r1, #0x20
  02068	e59d3004	 ldr         r3, [sp, #4]
  0206c	e1a03103	 mov         r3, r3, lsl #2
  02070	e0823003	 add         r3, r2, r3
  02074	e1a031a3	 mov         r3, r3, lsr #3
  02078	e58d3000	 str         r3, [sp]
  0207c		 |$LN5@XllpLCD_DM|

; 957  :         }
; 958  :         pXllpOverlay->ch3_size = DMALength;

  0207c	e59d3014	 ldr         r3, [sp, #0x14]
  02080	e2832038	 add         r2, r3, #0x38
  02084	e59d3000	 ldr         r3, [sp]
  02088	e5823000	 str         r3, [r2]

; 959  :         pXllpOverlay->ch4_size = DMALength;

  0208c	e59d3014	 ldr         r3, [sp, #0x14]
  02090	e283203c	 add         r2, r3, #0x3C
  02094	e59d3000	 ldr         r3, [sp]
  02098	e5823000	 str         r3, [r2]
  0209c	ea000034	 b           |$LN4@XllpLCD_DM|
  020a0		 |$LN7@XllpLCD_DM|

; 960  :     }
; 961  :     else if (pXllpOverlay->Format == FORMAT_PLANAR_420)

  020a0	e59d3014	 ldr         r3, [sp, #0x14]
  020a4	e2833010	 add         r3, r3, #0x10
  020a8	e5933000	 ldr         r3, [r3]
  020ac	e3530004	 cmp         r3, #4
  020b0	1a00002f	 bne         |$LN3@XllpLCD_DM|

; 962  :     {
; 963  :         DMALength = pixels;

  020b4	e59d3004	 ldr         r3, [sp, #4]
  020b8	e58d3000	 str         r3, [sp]

; 964  :         if ((DMALength % 4) > 0)

  020bc	e59d1000	 ldr         r1, [sp]
  020c0	e3a00004	 mov         r0, #4
  020c4	eb000000	 bl          __rt_udiv
  020c8	e3510000	 cmp         r1, #0
  020cc	0a000009	 beq         |$LN2@XllpLCD_DM|

; 965  :         {
; 966  :             DMALength = (((32 - ((pixels << 3) % 32)) + (pixels << 3)) >> 3);   // 12 bits total

  020d0	e59d3004	 ldr         r3, [sp, #4]
  020d4	e1a01183	 mov         r1, r3, lsl #3
  020d8	e3a00020	 mov         r0, #0x20
  020dc	eb000000	 bl          __rt_udiv
  020e0	e2612020	 rsb         r2, r1, #0x20
  020e4	e59d3004	 ldr         r3, [sp, #4]
  020e8	e1a03183	 mov         r3, r3, lsl #3
  020ec	e0823003	 add         r3, r2, r3
  020f0	e1a031a3	 mov         r3, r3, lsr #3
  020f4	e58d3000	 str         r3, [sp]
  020f8		 |$LN2@XllpLCD_DM|

; 967  :         }
; 968  :         pXllpOverlay->ch2_size = DMALength;

  020f8	e59d3014	 ldr         r3, [sp, #0x14]
  020fc	e2832034	 add         r2, r3, #0x34
  02100	e59d3000	 ldr         r3, [sp]
  02104	e5823000	 str         r3, [r2]

; 969  : 
; 970  :         DMALength = pixels >> 2;

  02108	e59d3004	 ldr         r3, [sp, #4]
  0210c	e1a03123	 mov         r3, r3, lsr #2
  02110	e58d3000	 str         r3, [sp]

; 971  :         if (((pixels << 1) % 32) > 0)

  02114	e59d3004	 ldr         r3, [sp, #4]
  02118	e1a01083	 mov         r1, r3, lsl #1
  0211c	e3a00020	 mov         r0, #0x20
  02120	eb000000	 bl          __rt_udiv
  02124	e3510000	 cmp         r1, #0
  02128	0a000009	 beq         |$LN1@XllpLCD_DM|

; 972  :         {
; 973  :             DMALength = (((32 - ((pixels << 1) % 32)) + (pixels << 1)) >> 3);

  0212c	e59d3004	 ldr         r3, [sp, #4]
  02130	e1a01083	 mov         r1, r3, lsl #1
  02134	e3a00020	 mov         r0, #0x20
  02138	eb000000	 bl          __rt_udiv
  0213c	e2612020	 rsb         r2, r1, #0x20
  02140	e59d3004	 ldr         r3, [sp, #4]
  02144	e1a03083	 mov         r3, r3, lsl #1
  02148	e0823003	 add         r3, r2, r3
  0214c	e1a031a3	 mov         r3, r3, lsr #3
  02150	e58d3000	 str         r3, [sp]
  02154		 |$LN1@XllpLCD_DM|

; 974  :         }
; 975  :         pXllpOverlay->ch3_size = DMALength;

  02154	e59d3014	 ldr         r3, [sp, #0x14]
  02158	e2832038	 add         r2, r3, #0x38
  0215c	e59d3000	 ldr         r3, [sp]
  02160	e5823000	 str         r3, [r2]

; 976  :         pXllpOverlay->ch4_size = DMALength;

  02164	e59d3014	 ldr         r3, [sp, #0x14]
  02168	e283203c	 add         r2, r3, #0x3C
  0216c	e59d3000	 ldr         r3, [sp]
  02170	e5823000	 str         r3, [r2]
  02174		 |$LN3@XllpLCD_DM|
  02174		 |$LN4@XllpLCD_DM|
  02174		 |$LN8@XllpLCD_DM|
  02174		 |$LN11@XllpLCD_DM|

; 977  :     }
; 978  : 
; 979  : }

  02174	e28dd00c	 add         sp, sp, #0xC
  02178	e89d6000	 ldmia       sp, {sp, lr}
  0217c	e12fff1e	 bx          lr
  02180		 |$M1310|

			 ENDP  ; |XllpLCD_DMALength|

	END
