; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_pm_sleepcontext.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|XllpPmSaveStdRegList|
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_pm_sleepcontext.c

  00000			 AREA	 |.pdata|, PDATA
|$T39523| DCD	|$LN10@XllpPmSave|
	DCD	0x40005b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpPmSaveStdRegList| PROC

; 192  : {

  00000		 |$LN10@XllpPmSave|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39520|

; 193  :     UINT32 i = 0;
; 194  :     UINT32 j = 0;
; 195  :     
; 196  :     P_XLLP_PWRMGR_T pPwrMgrRegs = (P_XLLP_PWRMGR_T) pDataSaveArea->pSleepParam->ProcRegs.UAPwrMgrRegs;

  00004	e5903010	 ldr         r3, [r0, #0x10]

; 197  :     P_XLLP_GPIO_T   pGpioRegs   = (P_XLLP_GPIO_T)   pDataSaveArea->pSleepParam->ProcRegs.UAGPIORegs;
; 198  :     P_XLLP_INTC_T   pIntcRegs   = (P_XLLP_INTC_T)   pDataSaveArea->pSleepParam->ProcRegs.UAIntcRegs;
; 199  : 
; 200  :     // Save PGSRx regs
; 201  :     // PGSRx regs will be restored, but must be modified before being saved
; 202  :     //
; 203  :     pDataSaveArea->StandardRegListStore[i++] =  pPwrMgrRegs->PGSR0 & XLLP_PM_PGSR0_VLD_MSK;
; 204  :     pDataSaveArea->StandardRegListStore[i++] =  pPwrMgrRegs->PGSR1 & XLLP_PM_PGSR1_VLD_MSK;
; 205  :     pDataSaveArea->StandardRegListStore[i++] =  pPwrMgrRegs->PGSR2 & XLLP_PM_PGSR2_VLD_MSK;
; 206  :     pDataSaveArea->StandardRegListStore[i++] =  pPwrMgrRegs->PGSR3 & XLLP_PM_PGSR3_VLD_MSK;

  00008	e3e044ff	 mvn         r4, #0xFF, 8
  0000c	e593200c	 ldr         r2, [r3, #0xC]
  00010	e5931010	 ldr         r1, [r3, #0x10]
  00014	e593e014	 ldr         lr, [r3, #0x14]
  00018	e5923020	 ldr         r3, [r2, #0x20]
  0001c	e3c33f79	 bic         r3, r3, #0x79, 30
  00020	e5803078	 str         r3, [r0, #0x78]
  00024	e5923024	 ldr         r3, [r2, #0x24]
  00028	e580307c	 str         r3, [r0, #0x7C]
  0002c	e5923028	 ldr         r3, [r2, #0x28]
  00030	e5803080	 str         r3, [r0, #0x80]
  00034	e592202c	 ldr         r2, [r2, #0x2C]
  00038	e2243502	 eor         r3, r4, #2, 10
  0003c	e0023003	 and         r3, r2, r3
  00040	e5803084	 str         r3, [r0, #0x84]

; 207  :     
; 208  :     // Save GPIO regs
; 209  :     //
; 210  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GPDR0 & XLLP_GPIO_GPDR0_VLD_MSK;

  00044	e591300c	 ldr         r3, [r1, #0xC]

; 211  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GPDR1 & XLLP_GPIO_GPDR1_VLD_MSK;

  00048	e5803088	 str         r3, [r0, #0x88]
  0004c	e5913010	 ldr         r3, [r1, #0x10]

; 212  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GPDR2 & XLLP_GPIO_GPDR2_VLD_MSK;

  00050	e580308c	 str         r3, [r0, #0x8C]
  00054	e5913014	 ldr         r3, [r1, #0x14]

; 213  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GPDR3 & XLLP_GPIO_GPDR3_VLD_MSK;

  00058	e5803090	 str         r3, [r0, #0x90]
  0005c	e591310c	 ldr         r3, [r1, #0x10C]
  00060	e3c334fe	 bic         r3, r3, #0xFE, 8
  00064	e5803094	 str         r3, [r0, #0x94]

; 214  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GAFR0_L & XLLP_GPIO_GAFR0_L_VLD_MSK;

  00068	e5913054	 ldr         r3, [r1, #0x54]

; 215  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GAFR0_U & XLLP_GPIO_GAFR0_U_VLD_MSK;

  0006c	e5803098	 str         r3, [r0, #0x98]
  00070	e5913058	 ldr         r3, [r1, #0x58]

; 216  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GAFR1_L & XLLP_GPIO_GAFR1_L_VLD_MSK;

  00074	e580309c	 str         r3, [r0, #0x9C]
  00078	e591305c	 ldr         r3, [r1, #0x5C]

; 217  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GAFR1_U & XLLP_GPIO_GAFR1_U_VLD_MSK;

  0007c	e58030a0	 str         r3, [r0, #0xA0]
  00080	e5913060	 ldr         r3, [r1, #0x60]

; 218  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GAFR2_L & XLLP_GPIO_GAFR2_L_VLD_MSK;

  00084	e58030a4	 str         r3, [r0, #0xA4]
  00088	e5913064	 ldr         r3, [r1, #0x64]

; 219  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GAFR2_U & XLLP_GPIO_GAFR2_U_VLD_MSK;

  0008c	e58030a8	 str         r3, [r0, #0xA8]
  00090	e5913068	 ldr         r3, [r1, #0x68]

; 220  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GAFR3_L & XLLP_GPIO_GAFR3_L_VLD_MSK;

  00094	e58030ac	 str         r3, [r0, #0xAC]
  00098	e591306c	 ldr         r3, [r1, #0x6C]

; 221  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GAFR3_U & XLLP_GPIO_GAFR3_U_VLD_MSK;

  0009c	e58030b0	 str         r3, [r0, #0xB0]
  000a0	e5912070	 ldr         r2, [r1, #0x70]
  000a4	e224373f	 eor         r3, r4, #0x3F, 14

; 222  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GRER0 & XLLP_GPIO_GRER0_VLD_MSK;
; 223  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GRER1 & XLLP_GPIO_GRER1_VLD_MSK;
; 224  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GRER2 & XLLP_GPIO_GRER2_VLD_MSK;
; 225  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GRER3 & XLLP_GPIO_GRER3_VLD_MSK;
; 226  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GFER0 & XLLP_GPIO_GFER0_VLD_MSK;
; 227  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GFER1 & XLLP_GPIO_GFER1_VLD_MSK;
; 228  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GFER2 & XLLP_GPIO_GFER2_VLD_MSK;
; 229  :     pDataSaveArea->StandardRegListStore[i++] =  pGpioRegs->GFER3 & XLLP_GPIO_GFER3_VLD_MSK;
; 230  :     
; 231  :     // INTC registers
; 232  :     //
; 233  :     pDataSaveArea->StandardRegListStore[i++] = pIntcRegs->iclr & XLLP_INTC_ICLR_MASK;
; 234  :     pDataSaveArea->StandardRegListStore[i++] = pIntcRegs->iclr2 & XLLP_INTC_ICLR2_MASK;
; 235  :     pDataSaveArea->StandardRegListStore[i++] = pIntcRegs->iccr & XLLP_INTC_ICCR_MASK;

  000a8	e3a04020	 mov         r4, #0x20
  000ac	e0023003	 and         r3, r2, r3
  000b0	e58030b4	 str         r3, [r0, #0xB4]
  000b4	e5913030	 ldr         r3, [r1, #0x30]
  000b8	e28020e4	 add         r2, r0, #0xE4
  000bc	e58030b8	 str         r3, [r0, #0xB8]
  000c0	e5913034	 ldr         r3, [r1, #0x34]
  000c4	e58030bc	 str         r3, [r0, #0xBC]
  000c8	e5913038	 ldr         r3, [r1, #0x38]
  000cc	e58030c0	 str         r3, [r0, #0xC0]
  000d0	e5913130	 ldr         r3, [r1, #0x130]
  000d4	e3c334fe	 bic         r3, r3, #0xFE, 8
  000d8	e58030c4	 str         r3, [r0, #0xC4]
  000dc	e591303c	 ldr         r3, [r1, #0x3C]
  000e0	e58030c8	 str         r3, [r0, #0xC8]
  000e4	e5913040	 ldr         r3, [r1, #0x40]
  000e8	e58030cc	 str         r3, [r0, #0xCC]
  000ec	e5913044	 ldr         r3, [r1, #0x44]
  000f0	e58030d0	 str         r3, [r0, #0xD0]
  000f4	e591313c	 ldr         r3, [r1, #0x13C]
  000f8	e28e101c	 add         r1, lr, #0x1C
  000fc	e3c334fe	 bic         r3, r3, #0xFE, 8
  00100	e58030d4	 str         r3, [r0, #0xD4]
  00104	e59e3008	 ldr         r3, [lr, #8]
  00108	e58030d8	 str         r3, [r0, #0xD8]
  0010c	e59e30a4	 ldr         r3, [lr, #0xA4]
  00110	e2033003	 and         r3, r3, #3
  00114	e58030dc	 str         r3, [r0, #0xDC]
  00118	e59e3014	 ldr         r3, [lr, #0x14]
  0011c	e2033001	 and         r3, r3, #1
  00120	e58030e0	 str         r3, [r0, #0xE0]
  00124		 |$LL3@XllpPmSave|

; 236  :     for (j=0; j<32; j++) {
; 237  :         pDataSaveArea->StandardRegListStore[i++] = pIntcRegs->ipr[j] & XLLP_INTC_IPR_MASK;    

  00124	e4913004	 ldr         r3, [r1], #4
  00128	e2544001	 subs        r4, r4, #1
  0012c	e20331fe	 and         r3, r3, #0xFE, 2
  00130	e4823004	 str         r3, [r2], #4
  00134	1afffffa	 bne         |$LL3@XllpPmSave|

; 238  :     }
; 239  :     pDataSaveArea->StandardRegListStore[i++] = pIntcRegs->ipr2[0] & XLLP_INTC_IPR2_MASK;    

  00138	e59e30b0	 ldr         r3, [lr, #0xB0]

; 240  :     pDataSaveArea->StandardRegListStore[i++] = pIntcRegs->ipr2[1] & XLLP_INTC_IPR2_MASK;

  0013c	e20331fe	 and         r3, r3, #0xFE, 2
  00140	e5803164	 str         r3, [r0, #0x164]
  00144	e59e30b4	 ldr         r3, [lr, #0xB4]

; 241  :     pDataSaveArea->StandardRegListStore[i++] = pIntcRegs->icmr    & XLLP_INTC_ICMR_MASK;

  00148	e20331fe	 and         r3, r3, #0xFE, 2
  0014c	e5803168	 str         r3, [r0, #0x168]
  00150	e59e3004	 ldr         r3, [lr, #4]

; 242  :     pDataSaveArea->StandardRegListStore[i++] = pIntcRegs->icmr2   & XLLP_INTC_ICMR2_MASK;

  00154	e580316c	 str         r3, [r0, #0x16C]
  00158	e59e30a0	 ldr         r3, [lr, #0xA0]
  0015c	e2033003	 and         r3, r3, #3
  00160	e5803170	 str         r3, [r0, #0x170]

; 243  : 
; 244  :     PREFAST_ASSERT(i<=XLLP_PM_SLEEP_STD_REGLIST_CNT);
; 245  :     
; 246  : }

  00164	e8bd4010	 ldmia       sp!, {r4, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$M39521|

			 ENDP  ; |XllpPmSaveStdRegList|

	EXPORT	|XllpPmRestoreStdRegList|

  00000			 AREA	 |.pdata|, PDATA
|$T39536| DCD	|$LN10@XllpPmRest|
	DCD	0x40004c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpPmRestoreStdRegList| PROC

; 248  : {

  00000		 |$LN10@XllpPmRest|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M39533|

; 249  :     UINT32 i = 0;
; 250  :     UINT32 j = 0;
; 251  :     
; 252  :     P_XLLP_PWRMGR_T pPwrMgrRegs = (P_XLLP_PWRMGR_T) pDataSaveArea->pSleepParam->ProcRegs.UAPwrMgrRegs;

  00004	e5903010	 ldr         r3, [r0, #0x10]

; 253  :     P_XLLP_GPIO_T   pGpioRegs   = (P_XLLP_GPIO_T)   pDataSaveArea->pSleepParam->ProcRegs.UAGPIORegs;
; 254  :     P_XLLP_INTC_T   pIntcRegs   = (P_XLLP_INTC_T)   pDataSaveArea->pSleepParam->ProcRegs.UAIntcRegs;
; 255  : 
; 256  :     // Restore PGSRx regs
; 257  :     //
; 258  :     pPwrMgrRegs->PGSR0 = pDataSaveArea->StandardRegListStore[i++];

  00008	e5902078	 ldr         r2, [r0, #0x78]
  0000c	e593100c	 ldr         r1, [r3, #0xC]
  00010	e593e010	 ldr         lr, [r3, #0x10]
  00014	e5934014	 ldr         r4, [r3, #0x14]
  00018	e5812020	 str         r2, [r1, #0x20]

; 259  :     pPwrMgrRegs->PGSR1 = pDataSaveArea->StandardRegListStore[i++];

  0001c	e590307c	 ldr         r3, [r0, #0x7C]

; 260  :     pPwrMgrRegs->PGSR2 = pDataSaveArea->StandardRegListStore[i++];
; 261  :     pPwrMgrRegs->PGSR3 = pDataSaveArea->StandardRegListStore[i++];
; 262  :     
; 263  :     // Restore GPIO regs
; 264  :     //
; 265  :     pGpioRegs->GPDR0 = pDataSaveArea->StandardRegListStore[i++];
; 266  :     pGpioRegs->GPDR1 = pDataSaveArea->StandardRegListStore[i++];
; 267  :     pGpioRegs->GPDR2 = pDataSaveArea->StandardRegListStore[i++];
; 268  :     pGpioRegs->GPDR3 = pDataSaveArea->StandardRegListStore[i++];
; 269  :     pGpioRegs->GAFR0_L = pDataSaveArea->StandardRegListStore[i++];
; 270  :     pGpioRegs->GAFR0_U = pDataSaveArea->StandardRegListStore[i++];
; 271  :     pGpioRegs->GAFR1_L = pDataSaveArea->StandardRegListStore[i++];
; 272  :     pGpioRegs->GAFR1_U = pDataSaveArea->StandardRegListStore[i++];
; 273  :     pGpioRegs->GAFR2_L = pDataSaveArea->StandardRegListStore[i++];
; 274  :     pGpioRegs->GAFR2_U = pDataSaveArea->StandardRegListStore[i++];
; 275  :     pGpioRegs->GAFR3_L = pDataSaveArea->StandardRegListStore[i++];
; 276  :     pGpioRegs->GAFR3_U = pDataSaveArea->StandardRegListStore[i++];
; 277  :     pGpioRegs->GRER0 = pDataSaveArea->StandardRegListStore[i++];
; 278  :     pGpioRegs->GRER1 = pDataSaveArea->StandardRegListStore[i++];
; 279  :     pGpioRegs->GRER2 = pDataSaveArea->StandardRegListStore[i++];
; 280  :     pGpioRegs->GRER3 = pDataSaveArea->StandardRegListStore[i++];
; 281  :     pGpioRegs->GFER0 = pDataSaveArea->StandardRegListStore[i++];
; 282  :     pGpioRegs->GFER1 = pDataSaveArea->StandardRegListStore[i++];
; 283  :     pGpioRegs->GFER2 = pDataSaveArea->StandardRegListStore[i++];
; 284  :     pGpioRegs->GFER3 = pDataSaveArea->StandardRegListStore[i++];  
; 285  : 
; 286  :     // INTC registers
; 287  :     //
; 288  :     pIntcRegs->iclr  = pDataSaveArea->StandardRegListStore[i++];
; 289  :     pIntcRegs->iclr2 = pDataSaveArea->StandardRegListStore[i++];
; 290  :     pIntcRegs->iccr  = pDataSaveArea->StandardRegListStore[i++];

  00020	e284201c	 add         r2, r4, #0x1C
  00024	e5813024	 str         r3, [r1, #0x24]
  00028	e5903080	 ldr         r3, [r0, #0x80]
  0002c	e5813028	 str         r3, [r1, #0x28]
  00030	e5903084	 ldr         r3, [r0, #0x84]
  00034	e581302c	 str         r3, [r1, #0x2C]
  00038	e5903088	 ldr         r3, [r0, #0x88]
  0003c	e28010e4	 add         r1, r0, #0xE4
  00040	e58e300c	 str         r3, [lr, #0xC]
  00044	e590308c	 ldr         r3, [r0, #0x8C]
  00048	e58e3010	 str         r3, [lr, #0x10]
  0004c	e5903090	 ldr         r3, [r0, #0x90]
  00050	e58e3014	 str         r3, [lr, #0x14]
  00054	e5903094	 ldr         r3, [r0, #0x94]
  00058	e58e310c	 str         r3, [lr, #0x10C]
  0005c	e5903098	 ldr         r3, [r0, #0x98]
  00060	e58e3054	 str         r3, [lr, #0x54]
  00064	e590309c	 ldr         r3, [r0, #0x9C]
  00068	e58e3058	 str         r3, [lr, #0x58]
  0006c	e59030a0	 ldr         r3, [r0, #0xA0]
  00070	e58e305c	 str         r3, [lr, #0x5C]
  00074	e59030a4	 ldr         r3, [r0, #0xA4]
  00078	e58e3060	 str         r3, [lr, #0x60]
  0007c	e59030a8	 ldr         r3, [r0, #0xA8]
  00080	e58e3064	 str         r3, [lr, #0x64]
  00084	e59030ac	 ldr         r3, [r0, #0xAC]
  00088	e58e3068	 str         r3, [lr, #0x68]
  0008c	e59030b0	 ldr         r3, [r0, #0xB0]
  00090	e58e306c	 str         r3, [lr, #0x6C]
  00094	e59030b4	 ldr         r3, [r0, #0xB4]
  00098	e58e3070	 str         r3, [lr, #0x70]
  0009c	e59030b8	 ldr         r3, [r0, #0xB8]
  000a0	e58e3030	 str         r3, [lr, #0x30]
  000a4	e59030bc	 ldr         r3, [r0, #0xBC]
  000a8	e58e3034	 str         r3, [lr, #0x34]
  000ac	e59030c0	 ldr         r3, [r0, #0xC0]
  000b0	e58e3038	 str         r3, [lr, #0x38]
  000b4	e59030c4	 ldr         r3, [r0, #0xC4]
  000b8	e58e3130	 str         r3, [lr, #0x130]
  000bc	e59030c8	 ldr         r3, [r0, #0xC8]
  000c0	e58e303c	 str         r3, [lr, #0x3C]
  000c4	e59030cc	 ldr         r3, [r0, #0xCC]
  000c8	e58e3040	 str         r3, [lr, #0x40]
  000cc	e59030d0	 ldr         r3, [r0, #0xD0]
  000d0	e58e3044	 str         r3, [lr, #0x44]
  000d4	e59030d4	 ldr         r3, [r0, #0xD4]
  000d8	e58e313c	 str         r3, [lr, #0x13C]
  000dc	e59030d8	 ldr         r3, [r0, #0xD8]
  000e0	e3a0e020	 mov         lr, #0x20
  000e4	e5843008	 str         r3, [r4, #8]
  000e8	e59030dc	 ldr         r3, [r0, #0xDC]
  000ec	e58430a4	 str         r3, [r4, #0xA4]
  000f0	e59030e0	 ldr         r3, [r0, #0xE0]
  000f4	e5843014	 str         r3, [r4, #0x14]
  000f8		 |$LL3@XllpPmRest|

; 291  :     for (j=0; j<32; j++) {
; 292  :         pIntcRegs->ipr[j] = pDataSaveArea->StandardRegListStore[i++];

  000f8	e4913004	 ldr         r3, [r1], #4
  000fc	e25ee001	 subs        lr, lr, #1
  00100	e4823004	 str         r3, [r2], #4
  00104	1afffffb	 bne         |$LL3@XllpPmRest|

; 293  :     }
; 294  :     pIntcRegs->ipr2[0] = pDataSaveArea->StandardRegListStore[i++];

  00108	e5903164	 ldr         r3, [r0, #0x164]

; 295  :     pIntcRegs->ipr2[1] = pDataSaveArea->StandardRegListStore[i++];

  0010c	e58430b0	 str         r3, [r4, #0xB0]
  00110	e5903168	 ldr         r3, [r0, #0x168]

; 296  :     pIntcRegs->icmr    = pDataSaveArea->StandardRegListStore[i++];

  00114	e58430b4	 str         r3, [r4, #0xB4]
  00118	e590316c	 ldr         r3, [r0, #0x16C]

; 297  :     pIntcRegs->icmr2   = pDataSaveArea->StandardRegListStore[i++];

  0011c	e5843004	 str         r3, [r4, #4]
  00120	e5903170	 ldr         r3, [r0, #0x170]
  00124	e58430a0	 str         r3, [r4, #0xA0]

; 298  : 
; 299  :     PREFAST_ASSERT(i<=XLLP_PM_SLEEP_STD_REGLIST_CNT);
; 300  :     
; 301  : }

  00128	e8bd4010	 ldmia       sp!, {r4, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$M39534|

			 ENDP  ; |XllpPmRestoreStdRegList|

	EXPORT	|XllpPmSaveAllRegLists|

  00000			 AREA	 |.pdata|, PDATA
|$T39544| DCD	|$LN5@XllpPmSave@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpPmSaveAllRegLists| PROC

; 304  : {

  00000		 |$LN5@XllpPmSave@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39541|

; 305  : 
; 306  :     // First, store registers from standard list
; 307  :     XllpPmSaveStdRegList(pDataSaveArea);

  00004	eb000000	 bl          XllpPmSaveStdRegList

; 308  : 
; 309  :     // Also call special coprocessor save function here.
; 310  :  #ifdef USING_COPROCSUPPORT
; 311  :     Xllp_Store_All_WMMX_Regs(&pDataSaveArea->IWMMXTRegs[0]);
; 312  : #endif  
; 313  : 
; 314  : }  // XllpPmSaveAllRegLists()

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M39542|

			 ENDP  ; |XllpPmSaveAllRegLists|

	EXPORT	|XllpPmRestoreAllRegLists|

  00000			 AREA	 |.pdata|, PDATA
|$T39552| DCD	|$LN5@XllpPmRest@2|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpPmRestoreAllRegLists| PROC

; 318  : {

  00000		 |$LN5@XllpPmRest@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M39549|

; 319  : 
; 320  :     // First, restore registers from standard list
; 321  :     XllpPmRestoreStdRegList(pDataSaveArea);

  00004	eb000000	 bl          XllpPmRestoreStdRegList

; 322  : 
; 323  :     // Also call special coprocessor restore function here.
; 324  :  #ifdef USING_COPROCSUPPORT
; 325  :     Xllp_Restore_All_WMMX_Regs(&pDataSaveArea->IWMMXTRegs[0]);
; 326  : #endif //def USING_COPROCSUPPORT
; 327  : 
; 328  : }   // XllpPmRestoreAllRegLists()

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M39550|

			 ENDP  ; |XllpPmRestoreAllRegLists|

	EXPORT	|XllpPmWakeCLevelProcessing|

  00000			 AREA	 |.pdata|, PDATA
|$T39568| DCD	|$LN8@XllpPmWake|
	DCD	0x40003801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpPmWakeCLevelProcessing| PROC

; 71   : {

  00000		 |$LN8@XllpPmWake|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M39565|
  00004	e1a05001	 mov         r5, r1

; 72   :     P_XLLP_PWRMGR_T  pPwrMgrRegs = (P_XLLP_PWRMGR_T) pSleepParam->ProcRegs.UAPwrMgrRegs;
; 73   :     P_XLLP_GPIO_T       pGpioRegs   = (P_XLLP_GPIO_T)   pSleepParam->ProcRegs.UAGPIORegs;

  00008	e5904010	 ldr         r4, [r0, #0x10]

; 74   :     P_XLLP_OST_T        pOstRegs =      (P_XLLP_OST_T)  pSleepParam->ProcRegs.UAOSTRegs;
; 75   :     P_XLLP_UINT32_T    pIMControlReg   = (P_XLLP_UINT32_T) pSleepParam->ProcRegs.UAIMControlReg; 
; 76   :     
; 77   :     // Restore GPLRx (values restored via GPSR and GPCR regs)
; 78   :     //
; 79   :     pGpioRegs->GPSR0 = pSleepDataArea->GPLR0   ;

  0000c	e5953068	 ldr         r3, [r5, #0x68]
  00010	e590700c	 ldr         r7, [r0, #0xC]
  00014	e5906018	 ldr         r6, [r0, #0x18]
  00018	e590e020	 ldr         lr, [r0, #0x20]
  0001c	e5843018	 str         r3, [r4, #0x18]

; 80   :     pGpioRegs->GPCR0 = ~(pSleepDataArea->GPLR0) ;

  00020	e5953068	 ldr         r3, [r5, #0x68]

; 81   :     pGpioRegs->GPSR1 = pSleepDataArea->GPLR1   ;
; 82   :     pGpioRegs->GPCR1 = ~(pSleepDataArea->GPLR1) ;
; 83   :     pGpioRegs->GPSR2 = pSleepDataArea->GPLR2   ;
; 84   :     pGpioRegs->GPCR2 = ~(pSleepDataArea->GPLR2) ;
; 85   :     pGpioRegs->GPSR3 = pSleepDataArea->GPLR3   ;
; 86   :     pGpioRegs->GPCR3 = ~(pSleepDataArea->GPLR3) ;

  00024	e3e024ff	 mvn         r2, #0xFF, 8

; 87   : 
; 88   :     // Restore IMPMCR
; 89   :     //
; 90   :     *pIMControlReg = pSleepDataArea->impmcr & XLLP_IMPMCR_USEDBITS;

  00028	e2222a0f	 eor         r2, r2, #0xF, 20
  0002c	e1e03003	 mvn         r3, r3
  00030	e5843024	 str         r3, [r4, #0x24]
  00034	e595306c	 ldr         r3, [r5, #0x6C]

; 91   :     
; 92   :     XllpPmRestoreAllRegLists (pSleepDataArea); 

  00038	e1a00005	 mov         r0, r5
  0003c	e584301c	 str         r3, [r4, #0x1C]
  00040	e595306c	 ldr         r3, [r5, #0x6C]
  00044	e1e03003	 mvn         r3, r3
  00048	e5843028	 str         r3, [r4, #0x28]
  0004c	e5953070	 ldr         r3, [r5, #0x70]
  00050	e5843020	 str         r3, [r4, #0x20]
  00054	e5953070	 ldr         r3, [r5, #0x70]
  00058	e1e03003	 mvn         r3, r3
  0005c	e584302c	 str         r3, [r4, #0x2C]
  00060	e5953074	 ldr         r3, [r5, #0x74]
  00064	e5843118	 str         r3, [r4, #0x118]
  00068	e5953074	 ldr         r3, [r5, #0x74]
  0006c	e1e03003	 mvn         r3, r3
  00070	e5843124	 str         r3, [r4, #0x124]
  00074	e5953050	 ldr         r3, [r5, #0x50]
  00078	e0033002	 and         r3, r3, r2
  0007c	e58e3000	 str         r3, [lr]
  00080	eb000000	 bl          XllpPmRestoreStdRegList

; 93   : 
; 94   :     // Currently OS uses OSCR0, OSMR0, OSMR1 and OSMR2
; 95   :     // Restore these regs if PI domain was powered off during sleep
; 96   :     //
; 97   :     if (XLLP_PSLR_SL_PI_OFF==(pPwrMgrRegs->PSLR & XLLP_PSLR_SL_PI_MSK))

  00084	e5973034	 ldr         r3, [r7, #0x34]
  00088	e313000c	 tst         r3, #0xC
  0008c	1a00000c	 bne         |$LN1@XllpPmWake|

; 98   :     {
; 99   :         pOstRegs->oscr0 = pSleepDataArea->OSCR0;

  00090	e5953054	 ldr         r3, [r5, #0x54]

; 100  :         pOstRegs->osmr0 = pSleepDataArea->OSMR0;
; 101  :         pOstRegs->osmr1 = pSleepDataArea->OSMR1;
; 102  :         pOstRegs->osmr2 = pSleepDataArea->OSMR2;

  00094	e5863010	 str         r3, [r6, #0x10]
  00098	e5953058	 ldr         r3, [r5, #0x58]

; 103  :         pOstRegs->oier    = pSleepDataArea->OIER;

  0009c	e5863000	 str         r3, [r6]
  000a0	e595305c	 ldr         r3, [r5, #0x5C]
  000a4	e5863004	 str         r3, [r6, #4]
  000a8	e5953060	 ldr         r3, [r5, #0x60]
  000ac	e5863008	 str         r3, [r6, #8]
  000b0	e5953064	 ldr         r3, [r5, #0x64]
  000b4	e586301c	 str         r3, [r6, #0x1C]

; 104  :         pOstRegs->oscr0 = pOstRegs->osmr0 - 5;

  000b8	e5963000	 ldr         r3, [r6]
  000bc	e2433005	 sub         r3, r3, #5
  000c0	e5863010	 str         r3, [r6, #0x10]
  000c4		 |$LN1@XllpPmWake|

; 105  :     }
; 106  : 
; 107  :     // Invalidate the checksum and zero the PSPR because the saved state is about to become obsolete.
; 108  :     //
; 109  :     pSleepDataArea->checksum++;

  000c4	e5953000	 ldr         r3, [r5]

; 110  :     pPwrMgrRegs->PSPR = 0;

  000c8	e3a02000	 mov         r2, #0
  000cc	e2833001	 add         r3, r3, #1
  000d0	e5853000	 str         r3, [r5]
  000d4	e5872008	 str         r2, [r7, #8]

; 111  : 
; 112  : } // XllpPmWakeCLevelProcessing()

  000d8	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000dc	e12fff1e	 bx          lr
  000e0		 |$M39566|

			 ENDP  ; |XllpPmWakeCLevelProcessing|

	EXPORT	|XllpPmSleepCLevelProcessing|
	IMPORT	|OEMCacheRangeFlush|
	IMPORT	|XllpPmChecksumSleepDataVi|
	IMPORT	|XllpPmRestoreAfterSleep|

  00000			 AREA	 |.bss|, NOINIT
|dummyRegReadTarget| % 0x4
|dummyRegReadTarget| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T39584| DCD	|$LN8@XllpPmSlee|
	DCD	0x40003701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpPmSleepCLevelProcessing| PROC

; 121  : {

  00000		 |$LN8@XllpPmSlee|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M39581|
  00004	e1a05000	 mov         r5, r0

; 122  :     P_XLLP_PM_SLEEP_SAVE_DATA_T  pSleepDataArea;
; 123  :     P_XLLP_PWRMGR_T  pPwrMgrRegs    = (P_XLLP_PWRMGR_T) pSleepParam->ProcRegs.UAPwrMgrRegs;
; 124  :     P_XLLP_UINT32_T pIMControlReg = (P_XLLP_UINT32_T) pSleepParam->ProcRegs.UAIMControlReg; 
; 125  :     P_XLLP_OST_T pOstRegs =  (P_XLLP_OST_T)  pSleepParam->ProcRegs.UAOSTRegs;
; 126  :     P_XLLP_GPIO_T pGpioRegs = (P_XLLP_GPIO_T)   pSleepParam->ProcRegs.UAGPIORegs;
; 127  : 
; 128  :     // Will need after waking.  Startup code only gets physical address
; 129  :     //  of saved data area, the restoration code needs the virtual addr.
; 130  :     //
; 131  :     pSleepDataArea  = pSleepParam->SleepDataAreaVA;

  00008	e5954004	 ldr         r4, [r5, #4]
  0000c	e5953020	 ldr         r3, [r5, #0x20]
  00010	e595600c	 ldr         r6, [r5, #0xC]
  00014	e5952018	 ldr         r2, [r5, #0x18]
  00018	e5951010	 ldr         r1, [r5, #0x10]

; 132  :     pSleepDataArea->pSleepDataArea  = pSleepDataArea;

  0001c	e584400c	 str         r4, [r4, #0xC]

; 133  : 
; 134  :     // Restoration code needs this to access UA addresses of registers
; 135  :     //
; 136  :     pSleepDataArea->pSleepParam = pSleepParam;

  00020	e5845010	 str         r5, [r4, #0x10]

; 137  : 
; 138  :     // save internal memory power manager control register, IMPMCR
; 139  :     //
; 140  :     pSleepDataArea->impmcr = (*pIMControlReg);

  00024	e5933000	 ldr         r3, [r3]

; 141  : 
; 142  :     // Currently OS uses OSCR0, OSMR0, OSMR1 and OSMR2.
; 143  :     // Save these regs if PI domain will be powered off during sleep
; 144  :     //
; 145  :     if (XLLP_PSLR_SL_PI_OFF == (pPwrMgrRegs->PSLR & XLLP_PSLR_SL_PI_MSK))

  00028	e5843050	 str         r3, [r4, #0x50]
  0002c	e5963034	 ldr         r3, [r6, #0x34]
  00030	e313000c	 tst         r3, #0xC
  00034	1a000009	 bne         |$LN1@XllpPmSlee|

; 146  :     {
; 147  :         pSleepDataArea->OSCR0  = pOstRegs->oscr0;

  00038	e5923010	 ldr         r3, [r2, #0x10]

; 148  :         pSleepDataArea->OSMR0 = pOstRegs->osmr0;
; 149  :         pSleepDataArea->OSMR1 = pOstRegs->osmr1;
; 150  :         pSleepDataArea->OSMR2 = pOstRegs->osmr2;
; 151  :         pSleepDataArea->OIER    = pOstRegs->oier;

  0003c	e5843054	 str         r3, [r4, #0x54]
  00040	e5923000	 ldr         r3, [r2]
  00044	e5843058	 str         r3, [r4, #0x58]
  00048	e5923004	 ldr         r3, [r2, #4]
  0004c	e584305c	 str         r3, [r4, #0x5C]
  00050	e5923008	 ldr         r3, [r2, #8]
  00054	e5843060	 str         r3, [r4, #0x60]
  00058	e592301c	 ldr         r3, [r2, #0x1C]
  0005c	e5843064	 str         r3, [r4, #0x64]
  00060		 |$LN1@XllpPmSlee|

; 152  :     }
; 153  : 
; 154  :     // Save GPIO pin level registers
; 155  :     //
; 156  :     pSleepDataArea->GPLR0  =  pGpioRegs->GPLR0;

  00060	e5913000	 ldr         r3, [r1]

; 157  :     pSleepDataArea->GPLR1  =  pGpioRegs->GPLR1;
; 158  :     pSleepDataArea->GPLR2  =  pGpioRegs->GPLR2;
; 159  :     pSleepDataArea->GPLR3  =  pGpioRegs->GPLR3;
; 160  : 
; 161  :     // Save word count of saved data area
; 162  :     // (total number of 32-bit words stored, excluding only checksum))
; 163  :     //
; 164  :     pSleepDataArea->SleepAreaWordCount = 
; 165  :         (sizeof(XLLP_PM_SLEEP_SAVE_DATA_T)/4)   // Checksum is done on 4-byte words
; 166  :         - 1;                                                        // Don't include the checksum itself.
; 167  : 
; 168  :     // Save function address to jump to on resuming
; 169  :     //
; 170  :     pSleepDataArea->AwakeAddr = XllpPmRestoreAfterSleep;

  00064	e59f206c	 ldr         r2, [pc, #0x6C]
  00068	e3a0e05c	 mov         lr, #0x5C
  0006c	e5843068	 str         r3, [r4, #0x68]
  00070	e5913004	 ldr         r3, [r1, #4]

; 171  : 
; 172  :     // Save proc registers 
; 173  :     //
; 174  :     XllpPmSaveAllRegLists (pSleepDataArea);

  00074	e1a00004	 mov         r0, r4
  00078	e584306c	 str         r3, [r4, #0x6C]
  0007c	e5913008	 ldr         r3, [r1, #8]
  00080	e5843070	 str         r3, [r4, #0x70]
  00084	e5913100	 ldr         r3, [r1, #0x100]
  00088	e584e004	 str         lr, [r4, #4]
  0008c	e5842008	 str         r2, [r4, #8]
  00090	e5843074	 str         r3, [r4, #0x74]
  00094	eb000000	 bl          XllpPmSaveStdRegList

; 175  : 
; 176  :     // Now, set the checksum to validate data at wakeup
; 177  :     // Must be done after all data saved.
; 178  :     pSleepDataArea->checksum = XllpPmChecksumSleepDataVi (&pSleepDataArea->SleepAreaWordCount,
; 179  :                                                 pSleepDataArea->SleepAreaWordCount);

  00098	e1a00004	 mov         r0, r4
  0009c	e5b01004	 ldr         r1, [r0, #4]!
  000a0	eb000000	 bl          XllpPmChecksumSleepDataVi
  000a4	e5840000	 str         r0, [r4]

; 180  : 
; 181  :     // Make sure that the startup code can find the context.
; 182  :     pPwrMgrRegs->PSPR = pSleepParam->SleepDataAreaPA;

  000a8	e5953000	 ldr         r3, [r5]

; 183  :     dummyRegReadTarget = pPwrMgrRegs->PSPR ;

  000ac	e59f0020	 ldr         r0, [pc, #0x20]

; 184  : 
; 185  :     // Flush DCache, Flush ICache, Flush TLB
; 186  :     OEMCacheRangeFlush(0, 0, CACHE_SYNC_WRITEBACK | CACHE_SYNC_INSTRUCTIONS | CACHE_SYNC_FLUSH_I_TLB);

  000b0	e3a0200e	 mov         r2, #0xE
  000b4	e5863008	 str         r3, [r6, #8]
  000b8	e5963008	 ldr         r3, [r6, #8]
  000bc	e3a01000	 mov         r1, #0
  000c0	e5803000	 str         r3, [r0]
  000c4	e3a00000	 mov         r0, #0
  000c8	eb000000	 bl          OEMCacheRangeFlush

; 187  : 
; 188  : } // XllpPmSleepCLevelProcessing()

  000cc	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN9@XllpPmSlee|
  000d4		 |$LN10@XllpPmSlee|
  000d4	00000000	 DCD         |dummyRegReadTarget|
  000d8		 |$LN11@XllpPmSlee|
  000d8	00000000	 DCD         |XllpPmRestoreAfterSleep|
  000dc		 |$M39582|

			 ENDP  ; |XllpPmSleepCLevelProcessing|

	END
