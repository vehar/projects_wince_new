; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_keypad.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|KP_Status|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|?xllpKpKIP_Initialized@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::xllpKpKIP_Initialized

  00000			 AREA	 |.data|, DATA
|XllpKpdGpioDirOutList| DCD 0x7
	DCD	0x60
	DCD	0x67
	DCD	0x68
	DCD	0x69
	DCD	0x6a
	DCD	0x6b
	DCD	0x6c
|XllpKpdGpioDirInList| DCD 0x9
	DCD	0x5d
	DCD	0x5e
	DCD	0x5f
	DCD	0x61
	DCD	0x62
	DCD	0x63
	DCD	0x64
	DCD	0x65
	DCD	0x66
|XllpKpdGpioAltFnPinList| DCD 0x10
	DCD	0x5d
	DCD	0x5e
	DCD	0x5f
	DCD	0x60
	DCD	0x61
	DCD	0x62
	DCD	0x63
	DCD	0x64
	DCD	0x65
	DCD	0x66
	DCD	0x67
	DCD	0x68
	DCD	0x69
	DCD	0x6a
	DCD	0x6b
	DCD	0x6c
|?PrevCount@?1??ReadDirectKeys@@9@9| DCD 0x7f		; `ReadDirectKeys'::`2'::PrevCount
|XllpKpdGpioAltFnValList| DCD 0x10
	DCD	0x1
	DCD	0x1
	DCD	0x3
	DCD	0x3
	DCD	0x3
	DCD	0x3
	DCD	0x3
	DCD	0x1
	DCD	0x1
	DCD	0x1
	DCD	0x2
	DCD	0x2
	DCD	0x2
	DCD	0x2
	DCD	0x2
	DCD	0x2
|XllpKpdGpioDirNonScrollWheelInList| DCD 0x7
	DCD	0x5f
	DCD	0x61
	DCD	0x62
	DCD	0x63
	DCD	0x64
	DCD	0x65
	DCD	0x66
	EXPORT	|ReadScanCodeAutomatically|

  00000			 AREA	 |.pdata|, PDATA
|$T784|	DCD	|$LN59@ReadScanCo|
	DCD	0x40010804
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_keypad.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ReadScanCodeAutomatically| PROC

; 34   : {

  00000		 |$LN59@ReadScanCo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd038	 sub         sp, sp, #0x38
  00010		 |$M781|

; 35   :     XLLP_BOOL_T     retval=XLLP_FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 36   :     XLLP_UINT32_T   C,R,RthBit,c0,c1,c2,c3,c4,c5,c6,c7;
; 37   :     XLLP_UINT32_T   numOfKeysPressed=0;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d302c	 str         r3, [sp, #0x2C]

; 38   : 
; 39   :     if(KP_Status & MATRIX_INTR_BIT)

  00020	e59f33f4	 ldr         r3, [pc, #0x3F4]
  00024	e5933000	 ldr         r3, [r3]
  00028	e3130501	 tst         r3, #1, 10
  0002c	0a0000f4	 beq         |$LN54@ReadScanCo|

; 40   :     {
; 41   :         numOfKeysPressed = ((v_pKeyPadRegs->kpAutomaticScanReg & MULTI_KEYS_PRESS) >> 26);

  00030	e59d3040	 ldr         r3, [sp, #0x40]
  00034	e2833020	 add         r3, r3, #0x20
  00038	e5933000	 ldr         r3, [r3]
  0003c	e203331f	 and         r3, r3, #0x1F, 6
  00040	e1a03d23	 mov         r3, r3, lsr #26
  00044	e58d302c	 str         r3, [sp, #0x2C]

; 42   : //   RETAILMSG(1,(TEXT("XLLP:ReadScanCodeAutomatically numOfKeysPressed %x>\r\n"),numOfKeysPressed));
; 43   : // checks to see if it was a "Major" key that was pressed
; 44   :         if(numOfKeysPressed == 1)

  00048	e59d302c	 ldr         r3, [sp, #0x2C]
  0004c	e3530001	 cmp         r3, #1
  00050	1a000010	 bne         |$LN53@ReadScanCo|

; 45   :         {
; 46   :             C =  (v_pKeyPadRegs->kpAutomaticScanReg & COL_SELECTED_MASK);

  00054	e59d3040	 ldr         r3, [sp, #0x40]
  00058	e2833020	 add         r3, r3, #0x20
  0005c	e5933000	 ldr         r3, [r3]
  00060	e203300f	 and         r3, r3, #0xF
  00064	e58d301c	 str         r3, [sp, #0x1C]

; 47   :             R =  (v_pKeyPadRegs->kpAutomaticScanReg & ROW_SELECTED_MASK);

  00068	e59d3040	 ldr         r3, [sp, #0x40]
  0006c	e2833020	 add         r3, r3, #0x20
  00070	e5933000	 ldr         r3, [r3]
  00074	e20330f0	 and         r3, r3, #0xF0
  00078	e58d3020	 str         r3, [sp, #0x20]

; 48   :             *key = (unsigned char) (C | R);

  0007c	e59d201c	 ldr         r2, [sp, #0x1C]
  00080	e59d3020	 ldr         r3, [sp, #0x20]
  00084	e1823003	 orr         r3, r2, r3
  00088	e20320ff	 and         r2, r3, #0xFF
  0008c	e59d3044	 ldr         r3, [sp, #0x44]
  00090	e5c32000	 strb        r2, [r3]

; 49   :         }
; 50   :         else

  00094	ea0000d8	 b           |$LN52@ReadScanCo|
  00098		 |$LN53@ReadScanCo|

; 51   : // if it was a "Minor" key, then more than one key was activated and that is how
; 52   : //  you can determine which register to read from.
; 53   :         if(numOfKeysPressed > 1)

  00098	e59d302c	 ldr         r3, [sp, #0x2C]
  0009c	e3530001	 cmp         r3, #1
  000a0	9a0000d2	 bls         |$LN51@ReadScanCo|

; 54   :         {
; 55   :             c0 = v_pKeyPadRegs->kpAutoScanMultiKeyPress0 & 0xFF;

  000a4	e59d3040	 ldr         r3, [sp, #0x40]
  000a8	e2833028	 add         r3, r3, #0x28
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e20330ff	 and         r3, r3, #0xFF
  000b4	e58d3000	 str         r3, [sp]

; 56   :             c1 = ((v_pKeyPadRegs->kpAutoScanMultiKeyPress0 >> 16) & 0xFF);

  000b8	e59d3040	 ldr         r3, [sp, #0x40]
  000bc	e2833028	 add         r3, r3, #0x28
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e1a03403	 mov         r3, r3, lsl #8
  000c8	e1a03c23	 mov         r3, r3, lsr #24
  000cc	e58d3010	 str         r3, [sp, #0x10]

; 57   :             c2 = v_pKeyPadRegs->kpAutoScanMultiKeyPress1 & 0xFF;

  000d0	e59d3040	 ldr         r3, [sp, #0x40]
  000d4	e2833030	 add         r3, r3, #0x30
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e20330ff	 and         r3, r3, #0xFF
  000e0	e58d3014	 str         r3, [sp, #0x14]

; 58   :             c3 = ((v_pKeyPadRegs->kpAutoScanMultiKeyPress1 >> 16) & 0xFF);

  000e4	e59d3040	 ldr         r3, [sp, #0x40]
  000e8	e2833030	 add         r3, r3, #0x30
  000ec	e5933000	 ldr         r3, [r3]
  000f0	e1a03403	 mov         r3, r3, lsl #8
  000f4	e1a03c23	 mov         r3, r3, lsr #24
  000f8	e58d3008	 str         r3, [sp, #8]

; 59   :             c4 = v_pKeyPadRegs->kpAutoScanMultiKeyPress2 & 0xFF;

  000fc	e59d3040	 ldr         r3, [sp, #0x40]
  00100	e2833038	 add         r3, r3, #0x38
  00104	e5933000	 ldr         r3, [r3]
  00108	e20330ff	 and         r3, r3, #0xFF
  0010c	e58d3024	 str         r3, [sp, #0x24]

; 60   :             c5 = ((v_pKeyPadRegs->kpAutoScanMultiKeyPress2 >> 16) & 0xFF);

  00110	e59d3040	 ldr         r3, [sp, #0x40]
  00114	e2833038	 add         r3, r3, #0x38
  00118	e5933000	 ldr         r3, [r3]
  0011c	e1a03403	 mov         r3, r3, lsl #8
  00120	e1a03c23	 mov         r3, r3, lsr #24
  00124	e58d3018	 str         r3, [sp, #0x18]

; 61   :             c6 = v_pKeyPadRegs->kpAutoScanMultiKeyPress3 & 0xFF;

  00128	e59d3040	 ldr         r3, [sp, #0x40]
  0012c	e2833040	 add         r3, r3, #0x40
  00130	e5933000	 ldr         r3, [r3]
  00134	e20330ff	 and         r3, r3, #0xFF
  00138	e58d3030	 str         r3, [sp, #0x30]

; 62   :             c7 = ((v_pKeyPadRegs->kpAutoScanMultiKeyPress3 >> 16) & 0xFF);

  0013c	e59d3040	 ldr         r3, [sp, #0x40]
  00140	e2833040	 add         r3, r3, #0x40
  00144	e5933000	 ldr         r3, [r3]
  00148	e1a03403	 mov         r3, r3, lsl #8
  0014c	e1a03c23	 mov         r3, r3, lsr #24
  00150	e58d3004	 str         r3, [sp, #4]

; 63   : 
; 64   : // these keys are the "minor keys", the ones that needs top right and bottom left of the
; 65   : // cooresponding 4 keys surrounding them to trigger the correct key. Doing a binary search
; 66   : // there are 5 keys, the middle key reads 0x8, the first key reads 0x2 and the last reads 0x20.
; 67   : // this needs to be done for each row.  This will be encorporated into a routine for the next
; 68   : // upgrade of keypad.
; 69   :             if(c0!=0)

  00154	e59d3000	 ldr         r3, [sp]
  00158	e3530000	 cmp         r3, #0
  0015c	0a00001c	 beq         |$LN50@ReadScanCo|

; 70   :             {
; 71   :                 C = 0x7;

  00160	e3a03007	 mov         r3, #7
  00164	e58d301c	 str         r3, [sp, #0x1C]

; 72   :                 if(c0 == 0x8)

  00168	e59d3000	 ldr         r3, [sp]
  0016c	e3530008	 cmp         r3, #8
  00170	1a000002	 bne         |$LN49@ReadScanCo|

; 73   :                 {
; 74   :                    RthBit = 0x2;

  00174	e3a03002	 mov         r3, #2
  00178	e58d3028	 str         r3, [sp, #0x28]

; 75   :                 }
; 76   :                 else

  0017c	ea000013	 b           |$LN48@ReadScanCo|
  00180		 |$LN49@ReadScanCo|

; 77   :                 if(c0 > 0x8)

  00180	e59d3000	 ldr         r3, [sp]
  00184	e3530008	 cmp         r3, #8
  00188	9a000008	 bls         |$LN47@ReadScanCo|

; 78   :                 {
; 79   :                     if (c0 < 0x20)

  0018c	e59d3000	 ldr         r3, [sp]
  00190	e3530020	 cmp         r3, #0x20
  00194	2a000002	 bcs         |$LN46@ReadScanCo|

; 80   :                        RthBit = 0x3;

  00198	e3a03003	 mov         r3, #3
  0019c	e58d3028	 str         r3, [sp, #0x28]

; 81   :                     else

  001a0	ea000001	 b           |$LN45@ReadScanCo|
  001a4		 |$LN46@ReadScanCo|

; 82   :                        RthBit = 0x4;

  001a4	e3a03004	 mov         r3, #4
  001a8	e58d3028	 str         r3, [sp, #0x28]
  001ac		 |$LN45@ReadScanCo|

; 83   :                 }else       

  001ac	ea000007	 b           |$LN44@ReadScanCo|
  001b0		 |$LN47@ReadScanCo|

; 84   :                 {
; 85   :                     if (c0 > 0x2)

  001b0	e59d3000	 ldr         r3, [sp]
  001b4	e3530002	 cmp         r3, #2
  001b8	9a000002	 bls         |$LN43@ReadScanCo|

; 86   :                        RthBit = 0x1;

  001bc	e3a03001	 mov         r3, #1
  001c0	e58d3028	 str         r3, [sp, #0x28]

; 87   :                     else

  001c4	ea000001	 b           |$LN42@ReadScanCo|
  001c8		 |$LN43@ReadScanCo|

; 88   :                        RthBit = 0x0;

  001c8	e3a03000	 mov         r3, #0
  001cc	e58d3028	 str         r3, [sp, #0x28]
  001d0		 |$LN42@ReadScanCo|
  001d0		 |$LN44@ReadScanCo|
  001d0		 |$LN48@ReadScanCo|

; 89   :                 }       
; 90   :             }else       

  001d0	ea00007e	 b           |$LN41@ReadScanCo|
  001d4		 |$LN50@ReadScanCo|

; 91   :             if(c1!=0)

  001d4	e59d3010	 ldr         r3, [sp, #0x10]
  001d8	e3530000	 cmp         r3, #0
  001dc	0a00001c	 beq         |$LN40@ReadScanCo|

; 92   :             {
; 93   :                 C = 0x8;

  001e0	e3a03008	 mov         r3, #8
  001e4	e58d301c	 str         r3, [sp, #0x1C]

; 94   :                 if(c1 == 0x8)

  001e8	e59d3010	 ldr         r3, [sp, #0x10]
  001ec	e3530008	 cmp         r3, #8
  001f0	1a000002	 bne         |$LN39@ReadScanCo|

; 95   :                 {
; 96   :                    RthBit = 0x2;

  001f4	e3a03002	 mov         r3, #2
  001f8	e58d3028	 str         r3, [sp, #0x28]

; 97   :                 }
; 98   :                 else

  001fc	ea000013	 b           |$LN38@ReadScanCo|
  00200		 |$LN39@ReadScanCo|

; 99   :                 if(c1 > 0x8)

  00200	e59d3010	 ldr         r3, [sp, #0x10]
  00204	e3530008	 cmp         r3, #8
  00208	9a000008	 bls         |$LN37@ReadScanCo|

; 100  :                 {
; 101  :                     if (c1 < 0x20)

  0020c	e59d3010	 ldr         r3, [sp, #0x10]
  00210	e3530020	 cmp         r3, #0x20
  00214	2a000002	 bcs         |$LN36@ReadScanCo|

; 102  :                        RthBit = 0x3;

  00218	e3a03003	 mov         r3, #3
  0021c	e58d3028	 str         r3, [sp, #0x28]

; 103  :                     else

  00220	ea000001	 b           |$LN35@ReadScanCo|
  00224		 |$LN36@ReadScanCo|

; 104  :                        RthBit = 0x4;

  00224	e3a03004	 mov         r3, #4
  00228	e58d3028	 str         r3, [sp, #0x28]
  0022c		 |$LN35@ReadScanCo|

; 105  :                 }else       

  0022c	ea000007	 b           |$LN34@ReadScanCo|
  00230		 |$LN37@ReadScanCo|

; 106  :                 {
; 107  :                     if (c1 > 0x2)

  00230	e59d3010	 ldr         r3, [sp, #0x10]
  00234	e3530002	 cmp         r3, #2
  00238	9a000002	 bls         |$LN33@ReadScanCo|

; 108  :                        RthBit = 0x1;

  0023c	e3a03001	 mov         r3, #1
  00240	e58d3028	 str         r3, [sp, #0x28]

; 109  :                     else

  00244	ea000001	 b           |$LN32@ReadScanCo|
  00248		 |$LN33@ReadScanCo|

; 110  :                        RthBit = 0x0;

  00248	e3a03000	 mov         r3, #0
  0024c	e58d3028	 str         r3, [sp, #0x28]
  00250		 |$LN32@ReadScanCo|
  00250		 |$LN34@ReadScanCo|
  00250		 |$LN38@ReadScanCo|

; 111  :                 }       
; 112  :             }else       

  00250	ea00005e	 b           |$LN31@ReadScanCo|
  00254		 |$LN40@ReadScanCo|

; 113  :             if(c2!=0)

  00254	e59d3014	 ldr         r3, [sp, #0x14]
  00258	e3530000	 cmp         r3, #0
  0025c	0a00001c	 beq         |$LN30@ReadScanCo|

; 114  :             {
; 115  :                 C = 0x9;

  00260	e3a03009	 mov         r3, #9
  00264	e58d301c	 str         r3, [sp, #0x1C]

; 116  :                 if(c2 == 0x8)

  00268	e59d3014	 ldr         r3, [sp, #0x14]
  0026c	e3530008	 cmp         r3, #8
  00270	1a000002	 bne         |$LN29@ReadScanCo|

; 117  :                 {
; 118  :                    RthBit = 0x2;

  00274	e3a03002	 mov         r3, #2
  00278	e58d3028	 str         r3, [sp, #0x28]

; 119  :                 }
; 120  :                 else

  0027c	ea000013	 b           |$LN28@ReadScanCo|
  00280		 |$LN29@ReadScanCo|

; 121  :                 if(c2 > 0x8)

  00280	e59d3014	 ldr         r3, [sp, #0x14]
  00284	e3530008	 cmp         r3, #8
  00288	9a000008	 bls         |$LN27@ReadScanCo|

; 122  :                 {
; 123  :                     if (c2 < 0x20)

  0028c	e59d3014	 ldr         r3, [sp, #0x14]
  00290	e3530020	 cmp         r3, #0x20
  00294	2a000002	 bcs         |$LN26@ReadScanCo|

; 124  :                        RthBit = 0x3;

  00298	e3a03003	 mov         r3, #3
  0029c	e58d3028	 str         r3, [sp, #0x28]

; 125  :                     else

  002a0	ea000001	 b           |$LN25@ReadScanCo|
  002a4		 |$LN26@ReadScanCo|

; 126  :                        RthBit = 0x4;

  002a4	e3a03004	 mov         r3, #4
  002a8	e58d3028	 str         r3, [sp, #0x28]
  002ac		 |$LN25@ReadScanCo|

; 127  :                 }else       

  002ac	ea000007	 b           |$LN24@ReadScanCo|
  002b0		 |$LN27@ReadScanCo|

; 128  :                 {
; 129  :                     if (c2 > 0x2)

  002b0	e59d3014	 ldr         r3, [sp, #0x14]
  002b4	e3530002	 cmp         r3, #2
  002b8	9a000002	 bls         |$LN23@ReadScanCo|

; 130  :                        RthBit = 0x1;

  002bc	e3a03001	 mov         r3, #1
  002c0	e58d3028	 str         r3, [sp, #0x28]

; 131  :                     else

  002c4	ea000001	 b           |$LN22@ReadScanCo|
  002c8		 |$LN23@ReadScanCo|

; 132  :                        RthBit = 0x0;

  002c8	e3a03000	 mov         r3, #0
  002cc	e58d3028	 str         r3, [sp, #0x28]
  002d0		 |$LN22@ReadScanCo|
  002d0		 |$LN24@ReadScanCo|
  002d0		 |$LN28@ReadScanCo|

; 133  :                 }       
; 134  :             }else       

  002d0	ea00003e	 b           |$LN21@ReadScanCo|
  002d4		 |$LN30@ReadScanCo|

; 135  :             if(c3!=0)

  002d4	e59d3008	 ldr         r3, [sp, #8]
  002d8	e3530000	 cmp         r3, #0
  002dc	0a00001c	 beq         |$LN20@ReadScanCo|

; 136  :             {
; 137  :                 C = 0xa;

  002e0	e3a0300a	 mov         r3, #0xA
  002e4	e58d301c	 str         r3, [sp, #0x1C]

; 138  :                 if(c3 == 0x8)

  002e8	e59d3008	 ldr         r3, [sp, #8]
  002ec	e3530008	 cmp         r3, #8
  002f0	1a000002	 bne         |$LN19@ReadScanCo|

; 139  :                 {
; 140  :                    RthBit = 0x2;

  002f4	e3a03002	 mov         r3, #2
  002f8	e58d3028	 str         r3, [sp, #0x28]

; 141  :                 }
; 142  :                 else

  002fc	ea000013	 b           |$LN18@ReadScanCo|
  00300		 |$LN19@ReadScanCo|

; 143  :                 if(c3 > 0x8)

  00300	e59d3008	 ldr         r3, [sp, #8]
  00304	e3530008	 cmp         r3, #8
  00308	9a000008	 bls         |$LN17@ReadScanCo|

; 144  :                 {
; 145  :                     if (c3 < 0x20)

  0030c	e59d3008	 ldr         r3, [sp, #8]
  00310	e3530020	 cmp         r3, #0x20
  00314	2a000002	 bcs         |$LN16@ReadScanCo|

; 146  :                        RthBit = 0x3;

  00318	e3a03003	 mov         r3, #3
  0031c	e58d3028	 str         r3, [sp, #0x28]

; 147  :                     else

  00320	ea000001	 b           |$LN15@ReadScanCo|
  00324		 |$LN16@ReadScanCo|

; 148  :                        RthBit = 0x4;

  00324	e3a03004	 mov         r3, #4
  00328	e58d3028	 str         r3, [sp, #0x28]
  0032c		 |$LN15@ReadScanCo|

; 149  :                 }else       

  0032c	ea000007	 b           |$LN14@ReadScanCo|
  00330		 |$LN17@ReadScanCo|

; 150  :                 {
; 151  :                     if (c3 > 0x2)

  00330	e59d3008	 ldr         r3, [sp, #8]
  00334	e3530002	 cmp         r3, #2
  00338	9a000002	 bls         |$LN13@ReadScanCo|

; 152  :                        RthBit = 0x1;

  0033c	e3a03001	 mov         r3, #1
  00340	e58d3028	 str         r3, [sp, #0x28]

; 153  :                     else

  00344	ea000001	 b           |$LN12@ReadScanCo|
  00348		 |$LN13@ReadScanCo|

; 154  :                        RthBit = 0x0;

  00348	e3a03000	 mov         r3, #0
  0034c	e58d3028	 str         r3, [sp, #0x28]
  00350		 |$LN12@ReadScanCo|
  00350		 |$LN14@ReadScanCo|
  00350		 |$LN18@ReadScanCo|

; 155  :                 }       
; 156  :             }else       

  00350	ea00001e	 b           |$LN11@ReadScanCo|
  00354		 |$LN20@ReadScanCo|

; 157  :             if(c4!=0)

  00354	e59d3024	 ldr         r3, [sp, #0x24]
  00358	e3530000	 cmp         r3, #0
  0035c	0a00001b	 beq         |$LN10@ReadScanCo|

; 158  :             {
; 159  :                 C = 0xb;

  00360	e3a0300b	 mov         r3, #0xB
  00364	e58d301c	 str         r3, [sp, #0x1C]

; 160  :                 if(c4 == 0x8)

  00368	e59d3024	 ldr         r3, [sp, #0x24]
  0036c	e3530008	 cmp         r3, #8
  00370	1a000002	 bne         |$LN9@ReadScanCo|

; 161  :                 {
; 162  :                    RthBit = 0x2;

  00374	e3a03002	 mov         r3, #2
  00378	e58d3028	 str         r3, [sp, #0x28]

; 163  :                 }
; 164  :                 else

  0037c	ea000013	 b           |$LN8@ReadScanCo|
  00380		 |$LN9@ReadScanCo|

; 165  :                 if(c4 > 0x8)

  00380	e59d3024	 ldr         r3, [sp, #0x24]
  00384	e3530008	 cmp         r3, #8
  00388	9a000008	 bls         |$LN7@ReadScanCo|

; 166  :                 {
; 167  :                     if (c4 < 0x20)

  0038c	e59d3024	 ldr         r3, [sp, #0x24]
  00390	e3530020	 cmp         r3, #0x20
  00394	2a000002	 bcs         |$LN6@ReadScanCo|

; 168  :                        RthBit = 0x3;

  00398	e3a03003	 mov         r3, #3
  0039c	e58d3028	 str         r3, [sp, #0x28]

; 169  :                     else

  003a0	ea000001	 b           |$LN5@ReadScanCo|
  003a4		 |$LN6@ReadScanCo|

; 170  :                        RthBit = 0x4;

  003a4	e3a03004	 mov         r3, #4
  003a8	e58d3028	 str         r3, [sp, #0x28]
  003ac		 |$LN5@ReadScanCo|

; 171  :                 }else       

  003ac	ea000007	 b           |$LN4@ReadScanCo|
  003b0		 |$LN7@ReadScanCo|

; 172  :                 {
; 173  :                     if (c4 > 0x2)

  003b0	e59d3024	 ldr         r3, [sp, #0x24]
  003b4	e3530002	 cmp         r3, #2
  003b8	9a000002	 bls         |$LN3@ReadScanCo|

; 174  :                        RthBit = 0x1;

  003bc	e3a03001	 mov         r3, #1
  003c0	e58d3028	 str         r3, [sp, #0x28]

; 175  :                     else

  003c4	ea000001	 b           |$LN2@ReadScanCo|
  003c8		 |$LN3@ReadScanCo|

; 176  :                        RthBit = 0x0;

  003c8	e3a03000	 mov         r3, #0
  003cc	e58d3028	 str         r3, [sp, #0x28]
  003d0		 |$LN2@ReadScanCo|
  003d0		 |$LN4@ReadScanCo|
  003d0		 |$LN8@ReadScanCo|
  003d0		 |$LN10@ReadScanCo|
  003d0		 |$LN11@ReadScanCo|
  003d0		 |$LN21@ReadScanCo|
  003d0		 |$LN31@ReadScanCo|
  003d0		 |$LN41@ReadScanCo|

; 177  :                 }       
; 178  :             }       
; 179  :             *key = (unsigned char) ((C<<4) | RthBit);

  003d0	e59d301c	 ldr         r3, [sp, #0x1C]
  003d4	e1a02203	 mov         r2, r3, lsl #4
  003d8	e59d3028	 ldr         r3, [sp, #0x28]
  003dc	e1823003	 orr         r3, r2, r3
  003e0	e20320ff	 and         r2, r3, #0xFF
  003e4	e59d3044	 ldr         r3, [sp, #0x44]
  003e8	e5c32000	 strb        r2, [r3]

; 180  :         }
; 181  :         else

  003ec	ea000002	 b           |$LN1@ReadScanCo|
  003f0		 |$LN51@ReadScanCo|

; 182  :             *key = NO_KEY;

  003f0	e59d2044	 ldr         r2, [sp, #0x44]
  003f4	e3a030ff	 mov         r3, #0xFF
  003f8	e5c23000	 strb        r3, [r2]
  003fc		 |$LN1@ReadScanCo|
  003fc		 |$LN52@ReadScanCo|

; 183  : 
; 184  : //       RETAILMSG(1,(TEXT("R is %x C is %x key is %x\r\n"), RthBit,C,*key));
; 185  : 
; 186  :         retval = XLLP_TRUE;

  003fc	e3a03001	 mov         r3, #1
  00400	e58d300c	 str         r3, [sp, #0xC]
  00404		 |$LN54@ReadScanCo|

; 187  :     }
; 188  : //    RETAILMSG(1,(TEXT("ReadScanCodeAutomatically<\r\n")));
; 189  :     return(retval);

  00404	e59d300c	 ldr         r3, [sp, #0xC]
  00408	e58d3034	 str         r3, [sp, #0x34]

; 190  : }

  0040c	e59d0034	 ldr         r0, [sp, #0x34]
  00410	e28dd038	 add         sp, sp, #0x38
  00414	e89d6000	 ldmia       sp, {sp, lr}
  00418	e12fff1e	 bx          lr
  0041c		 |$LN60@ReadScanCo|
  0041c		 |$LN61@ReadScanCo|
  0041c	00000000	 DCD         |KP_Status|
  00420		 |$M782|

			 ENDP  ; |ReadScanCodeAutomatically|

	EXPORT	|XllpKpKeypressIsInProgress|
	IMPORT	|__rt_udiv|

  00004			 AREA	 |.bss|, NOINIT
|?gplr0_InPinMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr0_InPinMask
|?gplr0_OutPinMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr0_OutPinMask
|?gplr0_AllPinsMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr0_AllPinsMask
|?gplr1_InPinMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr1_InPinMask
|?gplr1_OutPinMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr1_OutPinMask
|?gplr1_AllPinsMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr1_AllPinsMask
|?gplr2_InPinMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr2_InPinMask
|?gplr2_OutPinMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr2_OutPinMask
|?gplr2_AllPinsMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr2_AllPinsMask
|?gplr3_InPinMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr3_InPinMask
|?gplr3_OutPinMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr3_OutPinMask
|?gplr3_AllPinsMask@?1??XllpKpKeypressIsInProgress@@9@9| % 0x4 ; `XllpKpKeypressIsInProgress'::`2'::gplr3_AllPinsMask

  00008			 AREA	 |.pdata|, PDATA
|$T805|	DCD	|$LN36@XllpKpKeyp|
	DCD	0x40014104
; Function compile flags: /Odtp

  00420			 AREA	 |.text|, CODE, ARM

  00420		 |XllpKpKeypressIsInProgress| PROC

; 207  : {

  00420		 |$LN36@XllpKpKeyp|
  00420	e1a0c00d	 mov         r12, sp
  00424	e92d0001	 stmdb       sp!, {r0}
  00428	e92d5000	 stmdb       sp!, {r12, lr}
  0042c	e24dd018	 sub         sp, sp, #0x18
  00430		 |$M802|

; 208  :     // Note that GPIOs used here only include MKOUTs, MKINs and non-rotary DKINs.
; 209  : 
; 210  :     static XLLP_BOOL_T xllpKpKIP_Initialized = XLLP_FALSE;
; 211  :     static XLLP_UINT32_T gplr0_InPinMask, gplr0_OutPinMask, gplr0_AllPinsMask,
; 212  :                          gplr1_InPinMask, gplr1_OutPinMask, gplr1_AllPinsMask,
; 213  :                          gplr2_InPinMask, gplr2_OutPinMask, gplr2_AllPinsMask,
; 214  :                          gplr3_InPinMask, gplr3_OutPinMask, gplr3_AllPinsMask;
; 215  : 
; 216  :     XLLP_UINT32_T i;
; 217  :     XLLP_UINT32_T gpioRegTmp;
; 218  :     XLLP_UINT32_T activity  = 0;

  00430	e3a03000	 mov         r3, #0
  00434	e58d3008	 str         r3, [sp, #8]

; 219  : 
; 220  :     // Set up masks only once.  Do this in code rather than precalculation to expose
; 221  :     //  the algorithm and make it easily re-usable.  Perform full init because fairly
; 222  :     //  fast and only done once.
; 223  : 
; 224  :     if (!xllpKpKIP_Initialized)

  00438	e59f34b8	 ldr         r3, [pc, #0x4B8]
  0043c	e5933000	 ldr         r3, [r3]
  00440	e3530000	 cmp         r3, #0
  00444	1a000107	 bne         |$LN19@XllpKpKeyp|

; 225  :     {
; 226  :         gplr0_InPinMask = gplr0_OutPinMask = gplr0_AllPinsMask =
; 227  :         gplr1_InPinMask = gplr1_OutPinMask = gplr1_AllPinsMask =
; 228  :         gplr2_InPinMask = gplr2_OutPinMask = gplr2_AllPinsMask =
; 229  :         gplr3_InPinMask = gplr3_OutPinMask = gplr3_AllPinsMask = 0;

  00448	e59f2498	 ldr         r2, [pc, #0x498]
  0044c	e3a03000	 mov         r3, #0
  00450	e5823000	 str         r3, [r2]
  00454	e59f348c	 ldr         r3, [pc, #0x48C]
  00458	e5932000	 ldr         r2, [r3]
  0045c	e59f3488	 ldr         r3, [pc, #0x488]
  00460	e5832000	 str         r2, [r3]
  00464	e59f3480	 ldr         r3, [pc, #0x480]
  00468	e5932000	 ldr         r2, [r3]
  0046c	e59f3488	 ldr         r3, [pc, #0x488]
  00470	e5832000	 str         r2, [r3]
  00474	e59f3480	 ldr         r3, [pc, #0x480]
  00478	e5932000	 ldr         r2, [r3]
  0047c	e59f346c	 ldr         r3, [pc, #0x46C]
  00480	e5832000	 str         r2, [r3]
  00484	e59f3464	 ldr         r3, [pc, #0x464]
  00488	e5932000	 ldr         r2, [r3]
  0048c	e59f3460	 ldr         r3, [pc, #0x460]
  00490	e5832000	 str         r2, [r3]
  00494	e59f3458	 ldr         r3, [pc, #0x458]
  00498	e5932000	 ldr         r2, [r3]
  0049c	e59f345c	 ldr         r3, [pc, #0x45C]
  004a0	e5832000	 str         r2, [r3]
  004a4	e59f3454	 ldr         r3, [pc, #0x454]
  004a8	e5932000	 ldr         r2, [r3]
  004ac	e59f3450	 ldr         r3, [pc, #0x450]
  004b0	e5832000	 str         r2, [r3]
  004b4	e59f3448	 ldr         r3, [pc, #0x448]
  004b8	e5932000	 ldr         r2, [r3]
  004bc	e59f3444	 ldr         r3, [pc, #0x444]
  004c0	e5832000	 str         r2, [r3]
  004c4	e59f343c	 ldr         r3, [pc, #0x43C]
  004c8	e5932000	 ldr         r2, [r3]
  004cc	e59f3438	 ldr         r3, [pc, #0x438]
  004d0	e5832000	 str         r2, [r3]
  004d4	e59f3430	 ldr         r3, [pc, #0x430]
  004d8	e5932000	 ldr         r2, [r3]
  004dc	e59f342c	 ldr         r3, [pc, #0x42C]
  004e0	e5832000	 str         r2, [r3]
  004e4	e59f3424	 ldr         r3, [pc, #0x424]
  004e8	e5932000	 ldr         r2, [r3]
  004ec	e59f3420	 ldr         r3, [pc, #0x420]
  004f0	e5832000	 str         r2, [r3]
  004f4	e59f3418	 ldr         r3, [pc, #0x418]
  004f8	e5932000	 ldr         r2, [r3]
  004fc	e59f3414	 ldr         r3, [pc, #0x414]
  00500	e5832000	 str         r2, [r3]

; 230  : 
; 231  :         for (i=1 ;i<(XllpKpdGpioDirNonScrollWheelInList[0]+1) ;i++ )

  00504	e3a03001	 mov         r3, #1
  00508	e58d3000	 str         r3, [sp]
  0050c	ea000002	 b           |$LN18@XllpKpKeyp|
  00510		 |$LN17@XllpKpKeyp|
  00510	e59d3000	 ldr         r3, [sp]
  00514	e2833001	 add         r3, r3, #1
  00518	e58d3000	 str         r3, [sp]
  0051c		 |$LN18@XllpKpKeyp|
  0051c	e59f33fc	 ldr         r3, [pc, #0x3FC]
  00520	e5933000	 ldr         r3, [r3]
  00524	e2832001	 add         r2, r3, #1
  00528	e59d3000	 ldr         r3, [sp]
  0052c	e1530002	 cmp         r3, r2
  00530	2a000050	 bcs         |$LN16@XllpKpKeyp|

; 232  :         {
; 233  :             switch (XllpKpdGpioDirNonScrollWheelInList[i] / 32) // 32 pins per level register

  00534	e59d1000	 ldr         r1, [sp]
  00538	e3a03004	 mov         r3, #4
  0053c	e0020391	 mul         r2, r1, r3
  00540	e59f33d8	 ldr         r3, [pc, #0x3D8]
  00544	e0833002	 add         r3, r3, r2
  00548	e5931000	 ldr         r1, [r3]
  0054c	e3a00020	 mov         r0, #0x20
  00550	eb000000	 bl          __rt_udiv
  00554	e58d0010	 str         r0, [sp, #0x10]
  00558	e59d3010	 ldr         r3, [sp, #0x10]
  0055c	e3530003	 cmp         r3, #3
  00560	8a000043	 bhi         |$LN14@XllpKpKeyp|
  00564	e59d2010	 ldr         r2, [sp, #0x10]
  00568	e1a03102	 mov         r3, r2, lsl #2
  0056c	e083300f	 add         r3, r3, pc
  00570	e5933004	 ldr         r3, [r3, #4]
  00574	e08ff003	 add         pc, pc, r3
  00578		 |$LN23@XllpKpKeyp|
  00578		 |$LN22@XllpKpKeyp|
  00578		 |$LN24@XllpKpKeyp|
  00578	0000000c	 DCD         0xc
  0057c		 |$LN25@XllpKpKeyp|
  0057c	00000048	 DCD         0x48
  00580		 |$LN26@XllpKpKeyp|
  00580	00000084	 DCD         0x84
  00584		 |$LN27@XllpKpKeyp|
  00584	000000c0	 DCD         0xc0
  00588		 |$LN13@XllpKpKeyp|

; 234  :             {
; 235  :                 case 0:
; 236  :                     gplr0_InPinMask |= (1u << (XllpKpdGpioDirNonScrollWheelInList[i] &31));

  00588	e59d1000	 ldr         r1, [sp]
  0058c	e3a03004	 mov         r3, #4
  00590	e0020391	 mul         r2, r1, r3
  00594	e59f3384	 ldr         r3, [pc, #0x384]
  00598	e0833002	 add         r3, r3, r2
  0059c	e5933000	 ldr         r3, [r3]
  005a0	e203201f	 and         r2, r3, #0x1F
  005a4	e3a03001	 mov         r3, #1
  005a8	e1a02213	 mov         r2, r3, lsl r2
  005ac	e59f3364	 ldr         r3, [pc, #0x364]
  005b0	e5933000	 ldr         r3, [r3]
  005b4	e1832002	 orr         r2, r3, r2
  005b8	e59f3358	 ldr         r3, [pc, #0x358]
  005bc	e5832000	 str         r2, [r3]

; 237  :                     break;

  005c0	ea00002b	 b           |$LN14@XllpKpKeyp|
  005c4		 |$LN12@XllpKpKeyp|

; 238  :                 case 1:
; 239  :                     gplr1_InPinMask |= (1u << (XllpKpdGpioDirNonScrollWheelInList[i] &31));

  005c4	e59d1000	 ldr         r1, [sp]
  005c8	e3a03004	 mov         r3, #4
  005cc	e0020391	 mul         r2, r1, r3
  005d0	e59f3348	 ldr         r3, [pc, #0x348]
  005d4	e0833002	 add         r3, r3, r2
  005d8	e5933000	 ldr         r3, [r3]
  005dc	e203201f	 and         r2, r3, #0x1F
  005e0	e3a03001	 mov         r3, #1
  005e4	e1a02213	 mov         r2, r3, lsl r2
  005e8	e59f331c	 ldr         r3, [pc, #0x31C]
  005ec	e5933000	 ldr         r3, [r3]
  005f0	e1832002	 orr         r2, r3, r2
  005f4	e59f3310	 ldr         r3, [pc, #0x310]
  005f8	e5832000	 str         r2, [r3]

; 240  :                     break;

  005fc	ea00001c	 b           |$LN14@XllpKpKeyp|
  00600		 |$LN11@XllpKpKeyp|

; 241  :                 case 2:
; 242  :                     gplr2_InPinMask |= (1u << (XllpKpdGpioDirNonScrollWheelInList[i] &31));

  00600	e59d1000	 ldr         r1, [sp]
  00604	e3a03004	 mov         r3, #4
  00608	e0020391	 mul         r2, r1, r3
  0060c	e59f330c	 ldr         r3, [pc, #0x30C]
  00610	e0833002	 add         r3, r3, r2
  00614	e5933000	 ldr         r3, [r3]
  00618	e203201f	 and         r2, r3, #0x1F
  0061c	e3a03001	 mov         r3, #1
  00620	e1a02213	 mov         r2, r3, lsl r2
  00624	e59f32d4	 ldr         r3, [pc, #0x2D4]
  00628	e5933000	 ldr         r3, [r3]
  0062c	e1832002	 orr         r2, r3, r2
  00630	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00634	e5832000	 str         r2, [r3]

; 243  :                     break;

  00638	ea00000d	 b           |$LN14@XllpKpKeyp|
  0063c		 |$LN10@XllpKpKeyp|

; 244  :                 case 3:
; 245  :                     gplr3_InPinMask |= (1u << (XllpKpdGpioDirNonScrollWheelInList[i] &31));

  0063c	e59d1000	 ldr         r1, [sp]
  00640	e3a03004	 mov         r3, #4
  00644	e0020391	 mul         r2, r1, r3
  00648	e59f32d0	 ldr         r3, [pc, #0x2D0]
  0064c	e0833002	 add         r3, r3, r2
  00650	e5933000	 ldr         r3, [r3]
  00654	e203201f	 and         r2, r3, #0x1F
  00658	e3a03001	 mov         r3, #1
  0065c	e1a02213	 mov         r2, r3, lsl r2
  00660	e59f3294	 ldr         r3, [pc, #0x294]
  00664	e5933000	 ldr         r3, [r3]
  00668	e1832002	 orr         r2, r3, r2
  0066c	e59f3288	 ldr         r3, [pc, #0x288]
  00670	e5832000	 str         r2, [r3]
  00674		 |$LN14@XllpKpKeyp|

; 246  :                     break;
; 247  :             }
; 248  :         }  // Input pin masks

  00674	eaffffa5	 b           |$LN17@XllpKpKeyp|
  00678		 |$LN16@XllpKpKeyp|

; 249  : 
; 250  :         for (i=1 ;i<XllpKpdGpioDirOutList[0]+1 ;i++ )

  00678	e3a03001	 mov         r3, #1
  0067c	e58d3000	 str         r3, [sp]
  00680	ea000002	 b           |$LN9@XllpKpKeyp|
  00684		 |$LN8@XllpKpKeyp|
  00684	e59d3000	 ldr         r3, [sp]
  00688	e2833001	 add         r3, r3, #1
  0068c	e58d3000	 str         r3, [sp]
  00690		 |$LN9@XllpKpKeyp|
  00690	e59f3284	 ldr         r3, [pc, #0x284]
  00694	e5933000	 ldr         r3, [r3]
  00698	e2832001	 add         r2, r3, #1
  0069c	e59d3000	 ldr         r3, [sp]
  006a0	e1530002	 cmp         r3, r2
  006a4	2a000050	 bcs         |$LN7@XllpKpKeyp|

; 251  :         {
; 252  :             switch (XllpKpdGpioDirOutList[i] / 32) // 32 pins per level register

  006a8	e59d1000	 ldr         r1, [sp]
  006ac	e3a03004	 mov         r3, #4
  006b0	e0020391	 mul         r2, r1, r3
  006b4	e59f3260	 ldr         r3, [pc, #0x260]
  006b8	e0833002	 add         r3, r3, r2
  006bc	e5931000	 ldr         r1, [r3]
  006c0	e3a00020	 mov         r0, #0x20
  006c4	eb000000	 bl          __rt_udiv
  006c8	e58d0014	 str         r0, [sp, #0x14]
  006cc	e59d3014	 ldr         r3, [sp, #0x14]
  006d0	e3530003	 cmp         r3, #3
  006d4	8a000043	 bhi         |$LN5@XllpKpKeyp|
  006d8	e59d2014	 ldr         r2, [sp, #0x14]
  006dc	e1a03102	 mov         r3, r2, lsl #2
  006e0	e083300f	 add         r3, r3, pc
  006e4	e5933004	 ldr         r3, [r3, #4]
  006e8	e08ff003	 add         pc, pc, r3
  006ec		 |$LN29@XllpKpKeyp|
  006ec		 |$LN28@XllpKpKeyp|
  006ec		 |$LN30@XllpKpKeyp|
  006ec	0000000c	 DCD         0xc
  006f0		 |$LN31@XllpKpKeyp|
  006f0	00000048	 DCD         0x48
  006f4		 |$LN32@XllpKpKeyp|
  006f4	00000084	 DCD         0x84
  006f8		 |$LN33@XllpKpKeyp|
  006f8	000000c0	 DCD         0xc0
  006fc		 |$LN4@XllpKpKeyp|

; 253  :             {
; 254  :                 case 0:
; 255  :                     gplr0_OutPinMask |= (1u << (XllpKpdGpioDirOutList[i] &31));

  006fc	e59d1000	 ldr         r1, [sp]
  00700	e3a03004	 mov         r3, #4
  00704	e0020391	 mul         r2, r1, r3
  00708	e59f320c	 ldr         r3, [pc, #0x20C]
  0070c	e0833002	 add         r3, r3, r2
  00710	e5933000	 ldr         r3, [r3]
  00714	e203201f	 and         r2, r3, #0x1F
  00718	e3a03001	 mov         r3, #1
  0071c	e1a02213	 mov         r2, r3, lsl r2
  00720	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00724	e5933000	 ldr         r3, [r3]
  00728	e1832002	 orr         r2, r3, r2
  0072c	e59f31e0	 ldr         r3, [pc, #0x1E0]
  00730	e5832000	 str         r2, [r3]

; 256  :                     break;

  00734	ea00002b	 b           |$LN5@XllpKpKeyp|
  00738		 |$LN3@XllpKpKeyp|

; 257  :                 case 1:
; 258  :                     gplr1_OutPinMask |= (1u << (XllpKpdGpioDirOutList[i] &31));

  00738	e59d1000	 ldr         r1, [sp]
  0073c	e3a03004	 mov         r3, #4
  00740	e0020391	 mul         r2, r1, r3
  00744	e59f31d0	 ldr         r3, [pc, #0x1D0]
  00748	e0833002	 add         r3, r3, r2
  0074c	e5933000	 ldr         r3, [r3]
  00750	e203201f	 and         r2, r3, #0x1F
  00754	e3a03001	 mov         r3, #1
  00758	e1a02213	 mov         r2, r3, lsl r2
  0075c	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00760	e5933000	 ldr         r3, [r3]
  00764	e1832002	 orr         r2, r3, r2
  00768	e59f3198	 ldr         r3, [pc, #0x198]
  0076c	e5832000	 str         r2, [r3]

; 259  :                     break;

  00770	ea00001c	 b           |$LN5@XllpKpKeyp|
  00774		 |$LN2@XllpKpKeyp|

; 260  :                 case 2:
; 261  :                     gplr2_OutPinMask |= (1u << (XllpKpdGpioDirOutList[i] &31));

  00774	e59d1000	 ldr         r1, [sp]
  00778	e3a03004	 mov         r3, #4
  0077c	e0020391	 mul         r2, r1, r3
  00780	e59f3194	 ldr         r3, [pc, #0x194]
  00784	e0833002	 add         r3, r3, r2
  00788	e5933000	 ldr         r3, [r3]
  0078c	e203201f	 and         r2, r3, #0x1F
  00790	e3a03001	 mov         r3, #1
  00794	e1a02213	 mov         r2, r3, lsl r2
  00798	e59f3154	 ldr         r3, [pc, #0x154]
  0079c	e5933000	 ldr         r3, [r3]
  007a0	e1832002	 orr         r2, r3, r2
  007a4	e59f3148	 ldr         r3, [pc, #0x148]
  007a8	e5832000	 str         r2, [r3]

; 262  :                     break;

  007ac	ea00000d	 b           |$LN5@XllpKpKeyp|
  007b0		 |$LN1@XllpKpKeyp|

; 263  :                 case 3:
; 264  :                     gplr3_OutPinMask |= (1u << (XllpKpdGpioDirOutList[i] &31));

  007b0	e59d1000	 ldr         r1, [sp]
  007b4	e3a03004	 mov         r3, #4
  007b8	e0020391	 mul         r2, r1, r3
  007bc	e59f3158	 ldr         r3, [pc, #0x158]
  007c0	e0833002	 add         r3, r3, r2
  007c4	e5933000	 ldr         r3, [r3]
  007c8	e203201f	 and         r2, r3, #0x1F
  007cc	e3a03001	 mov         r3, #1
  007d0	e1a02213	 mov         r2, r3, lsl r2
  007d4	e59f3110	 ldr         r3, [pc, #0x110]
  007d8	e5933000	 ldr         r3, [r3]
  007dc	e1832002	 orr         r2, r3, r2
  007e0	e59f3104	 ldr         r3, [pc, #0x104]
  007e4	e5832000	 str         r2, [r3]
  007e8		 |$LN5@XllpKpKeyp|

; 265  :                     break;
; 266  :             }
; 267  :         }  // Output pin masks

  007e8	eaffffa5	 b           |$LN8@XllpKpKeyp|
  007ec		 |$LN7@XllpKpKeyp|

; 268  : 
; 269  :         gplr0_AllPinsMask = gplr0_InPinMask | gplr0_OutPinMask;

  007ec	e59f3124	 ldr         r3, [pc, #0x124]
  007f0	e5932000	 ldr         r2, [r3]
  007f4	e59f3118	 ldr         r3, [pc, #0x118]
  007f8	e5933000	 ldr         r3, [r3]
  007fc	e1822003	 orr         r2, r2, r3
  00800	e59f3108	 ldr         r3, [pc, #0x108]
  00804	e5832000	 str         r2, [r3]

; 270  :         gplr1_AllPinsMask = gplr1_InPinMask | gplr1_OutPinMask;

  00808	e59f30fc	 ldr         r3, [pc, #0xFC]
  0080c	e5932000	 ldr         r2, [r3]
  00810	e59f30f0	 ldr         r3, [pc, #0xF0]
  00814	e5933000	 ldr         r3, [r3]
  00818	e1822003	 orr         r2, r2, r3
  0081c	e59f30e0	 ldr         r3, [pc, #0xE0]
  00820	e5832000	 str         r2, [r3]

; 271  :         gplr2_AllPinsMask = gplr2_InPinMask | gplr2_OutPinMask;

  00824	e59f30d4	 ldr         r3, [pc, #0xD4]
  00828	e5932000	 ldr         r2, [r3]
  0082c	e59f30c0	 ldr         r3, [pc, #0xC0]
  00830	e5933000	 ldr         r3, [r3]
  00834	e1822003	 orr         r2, r2, r3
  00838	e59f30b0	 ldr         r3, [pc, #0xB0]
  0083c	e5832000	 str         r2, [r3]

; 272  :         gplr3_AllPinsMask = gplr3_InPinMask | gplr3_OutPinMask;

  00840	e59f30b4	 ldr         r3, [pc, #0xB4]
  00844	e5932000	 ldr         r2, [r3]
  00848	e59f309c	 ldr         r3, [pc, #0x9C]
  0084c	e5933000	 ldr         r3, [r3]
  00850	e1822003	 orr         r2, r2, r3
  00854	e59f308c	 ldr         r3, [pc, #0x8C]
  00858	e5832000	 str         r2, [r3]

; 273  : 
; 274  :         xllpKpKIP_Initialized = XLLP_TRUE;

  0085c	e59f2094	 ldr         r2, [pc, #0x94]
  00860	e3a03001	 mov         r3, #1
  00864	e5823000	 str         r3, [r2]
  00868		 |$LN19@XllpKpKeyp|

; 275  :     }
; 276  : 
; 277  :     // Main calculation
; 278  :     // Platform-specific optimization: For Mainstone, no keypad pins in GPLR[1:0].
; 279  : 
; 280  :     gpioRegTmp = v_pGPIOReg->GPLR2 ;

  00868	e59d3020	 ldr         r3, [sp, #0x20]
  0086c	e2833008	 add         r3, r3, #8
  00870	e5933000	 ldr         r3, [r3]
  00874	e58d3004	 str         r3, [sp, #4]

; 281  :     activity =  (gpioRegTmp ^ gplr2_OutPinMask) & gplr2_AllPinsMask;

  00878	e59d2004	 ldr         r2, [sp, #4]
  0087c	e59f3070	 ldr         r3, [pc, #0x70]
  00880	e5933000	 ldr         r3, [r3]
  00884	e0222003	 eor         r2, r2, r3
  00888	e59f3060	 ldr         r3, [pc, #0x60]
  0088c	e5933000	 ldr         r3, [r3]
  00890	e0023003	 and         r3, r2, r3
  00894	e58d3008	 str         r3, [sp, #8]

; 282  : 
; 283  :     gpioRegTmp = v_pGPIOReg->GPLR3 ;

  00898	e59d3020	 ldr         r3, [sp, #0x20]
  0089c	e2833c01	 add         r3, r3, #1, 24
  008a0	e5933000	 ldr         r3, [r3]
  008a4	e58d3004	 str         r3, [sp, #4]

; 284  :     activity |= (gpioRegTmp ^ gplr3_OutPinMask) & gplr3_AllPinsMask;

  008a8	e59d2004	 ldr         r2, [sp, #4]
  008ac	e59f3038	 ldr         r3, [pc, #0x38]
  008b0	e5933000	 ldr         r3, [r3]
  008b4	e0222003	 eor         r2, r2, r3
  008b8	e59f3028	 ldr         r3, [pc, #0x28]
  008bc	e5933000	 ldr         r3, [r3]
  008c0	e0022003	 and         r2, r2, r3
  008c4	e59d3008	 ldr         r3, [sp, #8]
  008c8	e1833002	 orr         r3, r3, r2
  008cc	e58d3008	 str         r3, [sp, #8]

; 285  : 
; 286  :     return(activity);

  008d0	e59d3008	 ldr         r3, [sp, #8]
  008d4	e58d300c	 str         r3, [sp, #0xC]

; 287  : 
; 288  : } // XllpKpKeypressIsInProgress()

  008d8	e59d000c	 ldr         r0, [sp, #0xC]
  008dc	e28dd018	 add         sp, sp, #0x18
  008e0	e89d6000	 ldmia       sp, {sp, lr}
  008e4	e12fff1e	 bx          lr
  008e8		 |$LN37@XllpKpKeyp|
  008e8		 |$LN38@XllpKpKeyp|
  008e8	00000000	 DCD         |?gplr3_AllPinsMask@?1??XllpKpKeypressIsInProgress@@9@9|
  008ec		 |$LN39@XllpKpKeyp|
  008ec	00000000	 DCD         |?gplr3_OutPinMask@?1??XllpKpKeypressIsInProgress@@9@9|
  008f0		 |$LN40@XllpKpKeyp|
  008f0	00000000	 DCD         |?gplr2_AllPinsMask@?1??XllpKpKeypressIsInProgress@@9@9|
  008f4		 |$LN41@XllpKpKeyp|
  008f4	00000000	 DCD         |?gplr2_OutPinMask@?1??XllpKpKeypressIsInProgress@@9@9|
  008f8		 |$LN42@XllpKpKeyp|
  008f8	00000000	 DCD         |?xllpKpKIP_Initialized@?1??XllpKpKeypressIsInProgress@@9@9|
  008fc		 |$LN43@XllpKpKeyp|
  008fc	00000000	 DCD         |?gplr3_InPinMask@?1??XllpKpKeypressIsInProgress@@9@9|
  00900		 |$LN44@XllpKpKeyp|
  00900	00000000	 DCD         |?gplr2_InPinMask@?1??XllpKpKeypressIsInProgress@@9@9|
  00904		 |$LN45@XllpKpKeyp|
  00904	00000000	 DCD         |?gplr1_AllPinsMask@?1??XllpKpKeypressIsInProgress@@9@9|
  00908		 |$LN46@XllpKpKeyp|
  00908	00000000	 DCD         |?gplr1_OutPinMask@?1??XllpKpKeypressIsInProgress@@9@9|
  0090c		 |$LN47@XllpKpKeyp|
  0090c	00000000	 DCD         |?gplr1_InPinMask@?1??XllpKpKeypressIsInProgress@@9@9|
  00910		 |$LN48@XllpKpKeyp|
  00910	00000000	 DCD         |?gplr0_AllPinsMask@?1??XllpKpKeypressIsInProgress@@9@9|
  00914		 |$LN49@XllpKpKeyp|
  00914	00000000	 DCD         |?gplr0_OutPinMask@?1??XllpKpKeypressIsInProgress@@9@9|
  00918		 |$LN50@XllpKpKeyp|
  00918	00000000	 DCD         |?gplr0_InPinMask@?1??XllpKpKeypressIsInProgress@@9@9|
  0091c		 |$LN51@XllpKpKeyp|
  0091c	00000000	 DCD         |XllpKpdGpioDirOutList|
  00920		 |$LN52@XllpKpKeyp|
  00920	00000000	 DCD         |XllpKpdGpioDirNonScrollWheelInList|
  00924		 |$M803|

			 ENDP  ; |XllpKpKeypressIsInProgress|

	EXPORT	|ReadDirectKeys|

  00010			 AREA	 |.pdata|, PDATA
|$T827|	DCD	|$LN16@ReadDirect|
	DCD	0x40005804
; Function compile flags: /Odtp

  00924			 AREA	 |.text|, CODE, ARM

  00924		 |ReadDirectKeys| PROC

; 297  : {

  00924		 |$LN16@ReadDirect|
  00924	e1a0c00d	 mov         r12, sp
  00928	e92d0003	 stmdb       sp!, {r0, r1}
  0092c	e92d5000	 stmdb       sp!, {r12, lr}
  00930	e24dd010	 sub         sp, sp, #0x10
  00934		 |$M824|

; 298  :     XLLP_UINT32_T CurrCount,SaveKpRotaryEncoderCountReg;
; 299  :     static XLLP_UINT32_T PrevCount=START_VALUE;
; 300  :     XLLP_BOOL_T retval;
; 301  :     if(KP_Status & DIRECT_INTR_BIT)

  00934	e59f3144	 ldr         r3, [pc, #0x144]
  00938	e5933000	 ldr         r3, [r3]
  0093c	e3130020	 tst         r3, #0x20
  00940	0a000045	 beq         |$LN11@ReadDirect|

; 302  :     {
; 303  :         SaveKpRotaryEncoderCountReg = v_pKeyPadRegs->kpRotaryEncoderCountReg;

  00944	e59d3018	 ldr         r3, [sp, #0x18]
  00948	e2833010	 add         r3, r3, #0x10
  0094c	e5933000	 ldr         r3, [r3]
  00950	e58d3008	 str         r3, [sp, #8]

; 304  :         CurrCount = SaveKpRotaryEncoderCountReg & COUNT_MASK;

  00954	e59d3008	 ldr         r3, [sp, #8]
  00958	e20330ff	 and         r3, r3, #0xFF
  0095c	e58d3004	 str         r3, [sp, #4]

; 305  :         if(SaveKpRotaryEncoderCountReg & OVERFLOW_ROTARY_ENC_0)

  00960	e59d3008	 ldr         r3, [sp, #8]
  00964	e3130902	 tst         r3, #2, 18
  00968	0a00000a	 beq         |$LN10@ReadDirect|

; 306  :         {
; 307  :             v_pKeyPadRegs->kpRotaryEncoderCountReg = START_VALUE;

  0096c	e59d3018	 ldr         r3, [sp, #0x18]
  00970	e2832010	 add         r2, r3, #0x10
  00974	e3a0307f	 mov         r3, #0x7F
  00978	e5823000	 str         r3, [r2]

; 308  :             PrevCount   = START_VALUE;

  0097c	e59f20f8	 ldr         r2, [pc, #0xF8]
  00980	e3a0307f	 mov         r3, #0x7F
  00984	e5823000	 str         r3, [r2]

; 309  :             *key    = SCAN_CODE_SCROLL_UP;                  // Scroll Up

  00988	e59d201c	 ldr         r2, [sp, #0x1C]
  0098c	e3a0300a	 mov         r3, #0xA
  00990	e5c23000	 strb        r3, [r2]
  00994	ea00002d	 b           |$LN9@ReadDirect|
  00998		 |$LN10@ReadDirect|

; 310  :         }
; 311  :         else if(SaveKpRotaryEncoderCountReg & UNDERFLOW_ROTARY_ENC_0)

  00998	e59d3008	 ldr         r3, [sp, #8]
  0099c	e3130901	 tst         r3, #1, 18
  009a0	0a00000a	 beq         |$LN8@ReadDirect|

; 312  :         {
; 313  :             v_pKeyPadRegs->kpRotaryEncoderCountReg = START_VALUE;

  009a4	e59d3018	 ldr         r3, [sp, #0x18]
  009a8	e2832010	 add         r2, r3, #0x10
  009ac	e3a0307f	 mov         r3, #0x7F
  009b0	e5823000	 str         r3, [r2]

; 314  :             PrevCount   = START_VALUE;

  009b4	e59f20c0	 ldr         r2, [pc, #0xC0]
  009b8	e3a0307f	 mov         r3, #0x7F
  009bc	e5823000	 str         r3, [r2]

; 315  :             *key    = SCAN_CODE_SCROLL_DOWN;                // Scroll Down

  009c0	e59d201c	 ldr         r2, [sp, #0x1C]
  009c4	e3a0300b	 mov         r3, #0xB
  009c8	e5c23000	 strb        r3, [r2]
  009cc	ea00001f	 b           |$LN7@ReadDirect|
  009d0		 |$LN8@ReadDirect|

; 316  :         }
; 317  :         else if(CurrCount > PrevCount)

  009d0	e59d2004	 ldr         r2, [sp, #4]
  009d4	e59f30a0	 ldr         r3, [pc, #0xA0]
  009d8	e5933000	 ldr         r3, [r3]
  009dc	e1520003	 cmp         r2, r3
  009e0	9a000006	 bls         |$LN6@ReadDirect|

; 318  :         {
; 319  :             *key    = SCAN_CODE_SCROLL_UP;

  009e4	e59d201c	 ldr         r2, [sp, #0x1C]
  009e8	e3a0300a	 mov         r3, #0xA
  009ec	e5c23000	 strb        r3, [r2]

; 320  :             PrevCount   = CurrCount;                        // Scroll Up

  009f0	e59d2004	 ldr         r2, [sp, #4]
  009f4	e59f3080	 ldr         r3, [pc, #0x80]
  009f8	e5832000	 str         r2, [r3]
  009fc	ea000013	 b           |$LN5@ReadDirect|
  00a00		 |$LN6@ReadDirect|

; 321  :         }
; 322  :         else if(CurrCount < PrevCount)

  00a00	e59d2004	 ldr         r2, [sp, #4]
  00a04	e59f3070	 ldr         r3, [pc, #0x70]
  00a08	e5933000	 ldr         r3, [r3]
  00a0c	e1520003	 cmp         r2, r3
  00a10	2a000006	 bcs         |$LN4@ReadDirect|

; 323  :         {
; 324  :             *key    = SCAN_CODE_SCROLL_DOWN;

  00a14	e59d201c	 ldr         r2, [sp, #0x1C]
  00a18	e3a0300b	 mov         r3, #0xB
  00a1c	e5c23000	 strb        r3, [r2]

; 325  :             PrevCount   = CurrCount;                        // Scroll Down

  00a20	e59d2004	 ldr         r2, [sp, #4]
  00a24	e59f3050	 ldr         r3, [pc, #0x50]
  00a28	e5832000	 str         r2, [r3]
  00a2c	ea000007	 b           |$LN3@ReadDirect|
  00a30		 |$LN4@ReadDirect|

; 326  :         }
; 327  :         else if(v_pKeyPadRegs->kpDirectKeyReg & DIRECT_KEY_IN_2)

  00a30	e59d3018	 ldr         r3, [sp, #0x18]
  00a34	e2833008	 add         r3, r3, #8
  00a38	e5933000	 ldr         r3, [r3]
  00a3c	e3130004	 tst         r3, #4
  00a40	0a000002	 beq         |$LN2@ReadDirect|

; 328  :         {
; 329  :             *key    = SCAN_CODE_ACTION;                     // Action Key       

  00a44	e59d201c	 ldr         r2, [sp, #0x1C]
  00a48	e3a0300c	 mov         r3, #0xC
  00a4c	e5c23000	 strb        r3, [r2]
  00a50		 |$LN2@ReadDirect|
  00a50		 |$LN3@ReadDirect|
  00a50		 |$LN5@ReadDirect|
  00a50		 |$LN7@ReadDirect|
  00a50		 |$LN9@ReadDirect|

; 330  :         }
; 331  : 
; 332  :         retval = XLLP_TRUE;                                 // Signal availability

  00a50	e3a03001	 mov         r3, #1
  00a54	e58d3000	 str         r3, [sp]

; 333  :     }
; 334  :     else

  00a58	ea000001	 b           |$LN1@ReadDirect|
  00a5c		 |$LN11@ReadDirect|

; 335  :     {
; 336  :         retval = XLLP_FALSE;

  00a5c	e3a03000	 mov         r3, #0
  00a60	e58d3000	 str         r3, [sp]
  00a64		 |$LN1@ReadDirect|

; 337  :     }
; 338  : 
; 339  :     return(retval);

  00a64	e59d3000	 ldr         r3, [sp]
  00a68	e58d300c	 str         r3, [sp, #0xC]

; 340  : }

  00a6c	e59d000c	 ldr         r0, [sp, #0xC]
  00a70	e28dd010	 add         sp, sp, #0x10
  00a74	e89d6000	 ldmia       sp, {sp, lr}
  00a78	e12fff1e	 bx          lr
  00a7c		 |$LN17@ReadDirect|
  00a7c		 |$LN18@ReadDirect|
  00a7c	00000000	 DCD         |?PrevCount@?1??ReadDirectKeys@@9@9|
  00a80		 |$LN19@ReadDirect|
  00a80	00000000	 DCD         |KP_Status|
  00a84		 |$M825|

			 ENDP  ; |ReadDirectKeys|

	EXPORT	|XllpReadScanCode|

  00018			 AREA	 |.pdata|, PDATA
|$T836|	DCD	|$LN8@XllpReadSc|
	DCD	0x40002104
; Function compile flags: /Odtp

  00a84			 AREA	 |.text|, CODE, ARM

  00a84		 |XllpReadScanCode| PROC

; 349  : {

  00a84		 |$LN8@XllpReadSc|
  00a84	e1a0c00d	 mov         r12, sp
  00a88	e92d0003	 stmdb       sp!, {r0, r1}
  00a8c	e92d5000	 stmdb       sp!, {r12, lr}
  00a90	e24dd00c	 sub         sp, sp, #0xC
  00a94		 |$M833|

; 350  :     // Initialise to NO Key scan code, same as key UP
; 351  :     XLLP_UINT8_T key = NO_KEY;

  00a94	e3a030ff	 mov         r3, #0xFF
  00a98	e5cd3000	 strb        r3, [sp]

; 352  : 
; 353  :     if(!ReadDirectKeys(v_pKeyPadRegs,&key))

  00a9c	e28d1000	 add         r1, sp, #0
  00aa0	e59d0014	 ldr         r0, [sp, #0x14]
  00aa4	eb000000	 bl          ReadDirectKeys
  00aa8	e58d0008	 str         r0, [sp, #8]
  00aac	e59d3008	 ldr         r3, [sp, #8]
  00ab0	e3530000	 cmp         r3, #0
  00ab4	1a000002	 bne         |$LN3@XllpReadSc|

; 354  :         ReadScanCodeAutomatically(v_pKeyPadRegs,&key);

  00ab8	e28d1000	 add         r1, sp, #0
  00abc	e59d0014	 ldr         r0, [sp, #0x14]
  00ac0	eb000000	 bl          ReadScanCodeAutomatically
  00ac4		 |$LN3@XllpReadSc|

; 355  : 
; 356  :     // Assign the Key Here
; 357  :     *pui8Data = key;

  00ac4	e5dd2000	 ldrb        r2, [sp]
  00ac8	e59d3018	 ldr         r3, [sp, #0x18]
  00acc	e5c32000	 strb        r2, [r3]

; 358  : 
; 359  :     if(*pui8Data == NO_KEY)

  00ad0	e59d3018	 ldr         r3, [sp, #0x18]
  00ad4	e5d33000	 ldrb        r3, [r3]
  00ad8	e35300ff	 cmp         r3, #0xFF
  00adc	1a000003	 bne         |$LN2@XllpReadSc|

; 360  :         return(XLLP_FALSE);

  00ae0	e3a03000	 mov         r3, #0
  00ae4	e58d3004	 str         r3, [sp, #4]
  00ae8	ea000002	 b           |$LN4@XllpReadSc|

; 361  :     else

  00aec	ea000001	 b           |$LN1@XllpReadSc|
  00af0		 |$LN2@XllpReadSc|

; 362  :         return(XLLP_TRUE);      // Enjoy

  00af0	e3a03001	 mov         r3, #1
  00af4	e58d3004	 str         r3, [sp, #4]
  00af8		 |$LN1@XllpReadSc|
  00af8		 |$LN4@XllpReadSc|

; 363  : }

  00af8	e59d0004	 ldr         r0, [sp, #4]
  00afc	e28dd00c	 add         sp, sp, #0xC
  00b00	e89d6000	 ldmia       sp, {sp, lr}
  00b04	e12fff1e	 bx          lr
  00b08		 |$M834|

			 ENDP  ; |XllpReadScanCode|

	EXPORT	|XllpSetUpKeyPadInterrupts|

  00020			 AREA	 |.pdata|, PDATA
|$T842|	DCD	|$LN7@XllpSetUpK|
	DCD	0x40002904
; Function compile flags: /Odtp

  00b08			 AREA	 |.text|, CODE, ARM

  00b08		 |XllpSetUpKeyPadInterrupts| PROC

; 371  : {

  00b08		 |$LN7@XllpSetUpK|
  00b08	e1a0c00d	 mov         r12, sp
  00b0c	e92d0003	 stmdb       sp!, {r0, r1}
  00b10	e92d5000	 stmdb       sp!, {r12, lr}
  00b14	e24dd004	 sub         sp, sp, #4
  00b18		 |$M839|

; 372  :     KP_Status = v_pKeyPadRegs->kpControlReg;

  00b18	e59d300c	 ldr         r3, [sp, #0xC]
  00b1c	e5932000	 ldr         r2, [r3]
  00b20	e59f3080	 ldr         r3, [pc, #0x80]
  00b24	e5832000	 str         r2, [r3]

; 373  : 
; 374  :     if(fEnDis)

  00b28	e59d3010	 ldr         r3, [sp, #0x10]
  00b2c	e3530000	 cmp         r3, #0
  00b30	0a00000a	 beq         |$LN2@XllpSetUpK|

; 375  :     {
; 376  :         EN_DIRECT_KEYS_INTR();

  00b34	e59d300c	 ldr         r3, [sp, #0xC]
  00b38	e5933000	 ldr         r3, [r3]
  00b3c	e3832001	 orr         r2, r3, #1
  00b40	e59d300c	 ldr         r3, [sp, #0xC]
  00b44	e5832000	 str         r2, [r3]

; 377  :         EN_MAT_KEYS_INTR();

  00b48	e59d300c	 ldr         r3, [sp, #0xC]
  00b4c	e5933000	 ldr         r3, [r3]
  00b50	e3832b02	 orr         r2, r3, #2, 22
  00b54	e59d300c	 ldr         r3, [sp, #0xC]
  00b58	e5832000	 str         r2, [r3]

; 378  :     }
; 379  :     else

  00b5c	ea00000b	 b           |$LN1@XllpSetUpK|
  00b60		 |$LN2@XllpSetUpK|

; 380  :     {
; 381  :         DISABLE_DIRECT_KEYS_INTR();

  00b60	e59d300c	 ldr         r3, [sp, #0xC]
  00b64	e5932000	 ldr         r2, [r3]
  00b68	e3e03001	 mvn         r3, #1
  00b6c	e0022003	 and         r2, r2, r3
  00b70	e59d300c	 ldr         r3, [sp, #0xC]
  00b74	e5832000	 str         r2, [r3]

; 382  :         DISABLE_MAT_KEYS_INTR();

  00b78	e59d300c	 ldr         r3, [sp, #0xC]
  00b7c	e5932000	 ldr         r2, [r3]
  00b80	e3e03b02	 mvn         r3, #2, 22
  00b84	e0022003	 and         r2, r2, r3
  00b88	e59d300c	 ldr         r3, [sp, #0xC]
  00b8c	e5832000	 str         r2, [r3]
  00b90		 |$LN1@XllpSetUpK|

; 383  :     }
; 384  :     return(XLLP_TRUE);

  00b90	e3a03001	 mov         r3, #1
  00b94	e58d3000	 str         r3, [sp]

; 385  : }

  00b98	e59d0000	 ldr         r0, [sp]
  00b9c	e28dd004	 add         sp, sp, #4
  00ba0	e89d6000	 ldmia       sp, {sp, lr}
  00ba4	e12fff1e	 bx          lr
  00ba8		 |$LN8@XllpSetUpK|
  00ba8		 |$LN9@XllpSetUpK|
  00ba8	00000000	 DCD         |KP_Status|
  00bac		 |$M840|

			 ENDP  ; |XllpSetUpKeyPadInterrupts|

	EXPORT	|XllpKeyPadConfigure|
	IMPORT	|XllpGpioSetAlternateFn|
	IMPORT	|XllpGpioSetOutput0|
	IMPORT	|XllpGpioSetDirectionOut|
	IMPORT	|XllpGpioSetDirectionIn|

  00028			 AREA	 |.pdata|, PDATA
|$T850|	DCD	|$LN7@XllpKeyPad|
	DCD	0x40009104
; Function compile flags: /Odtp

  00bac			 AREA	 |.text|, CODE, ARM

  00bac		 |XllpKeyPadConfigure| PROC

; 416  : {

  00bac		 |$LN7@XllpKeyPad|
  00bac	e1a0c00d	 mov         r12, sp
  00bb0	e92d0003	 stmdb       sp!, {r0, r1}
  00bb4	e92d5000	 stmdb       sp!, {r12, lr}
  00bb8	e24dd0d8	 sub         sp, sp, #0xD8
  00bbc		 |$M847|

; 417  :     XLLP_BOOL_T retval=XLLP_FALSE;

  00bbc	e3a03000	 mov         r3, #0
  00bc0	e58d3000	 str         r3, [sp]

; 418  :     XLLP_UINT32_T GpioDirOutList[]={7,96,103,104,105,106,107,108};

  00bc4	e3a03007	 mov         r3, #7
  00bc8	e58d3070	 str         r3, [sp, #0x70]
  00bcc	e3a03060	 mov         r3, #0x60
  00bd0	e58d3074	 str         r3, [sp, #0x74]
  00bd4	e3a03067	 mov         r3, #0x67
  00bd8	e58d3078	 str         r3, [sp, #0x78]
  00bdc	e3a03068	 mov         r3, #0x68
  00be0	e58d307c	 str         r3, [sp, #0x7C]
  00be4	e3a03069	 mov         r3, #0x69
  00be8	e58d3080	 str         r3, [sp, #0x80]
  00bec	e3a0306a	 mov         r3, #0x6A
  00bf0	e58d3084	 str         r3, [sp, #0x84]
  00bf4	e3a0306b	 mov         r3, #0x6B
  00bf8	e58d3088	 str         r3, [sp, #0x88]
  00bfc	e3a0306c	 mov         r3, #0x6C
  00c00	e58d308c	 str         r3, [sp, #0x8C]

; 419  :     XLLP_UINT32_T GpioDirInList[]={9,93,94,95,97,98,99,100,101,102};

  00c04	e3a03009	 mov         r3, #9
  00c08	e58d3048	 str         r3, [sp, #0x48]
  00c0c	e3a0305d	 mov         r3, #0x5D
  00c10	e58d304c	 str         r3, [sp, #0x4C]
  00c14	e3a0305e	 mov         r3, #0x5E
  00c18	e58d3050	 str         r3, [sp, #0x50]
  00c1c	e3a0305f	 mov         r3, #0x5F
  00c20	e58d3054	 str         r3, [sp, #0x54]
  00c24	e3a03061	 mov         r3, #0x61
  00c28	e58d3058	 str         r3, [sp, #0x58]
  00c2c	e3a03062	 mov         r3, #0x62
  00c30	e58d305c	 str         r3, [sp, #0x5C]
  00c34	e3a03063	 mov         r3, #0x63
  00c38	e58d3060	 str         r3, [sp, #0x60]
  00c3c	e3a03064	 mov         r3, #0x64
  00c40	e58d3064	 str         r3, [sp, #0x64]
  00c44	e3a03065	 mov         r3, #0x65
  00c48	e58d3068	 str         r3, [sp, #0x68]
  00c4c	e3a03066	 mov         r3, #0x66
  00c50	e58d306c	 str         r3, [sp, #0x6C]

; 420  :     XLLP_UINT32_T GpioAltFnPinList[]={16,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108};

  00c54	e3a03010	 mov         r3, #0x10
  00c58	e58d3090	 str         r3, [sp, #0x90]
  00c5c	e3a0305d	 mov         r3, #0x5D
  00c60	e58d3094	 str         r3, [sp, #0x94]
  00c64	e3a0305e	 mov         r3, #0x5E
  00c68	e58d3098	 str         r3, [sp, #0x98]
  00c6c	e3a0305f	 mov         r3, #0x5F
  00c70	e58d309c	 str         r3, [sp, #0x9C]
  00c74	e3a03060	 mov         r3, #0x60
  00c78	e58d30a0	 str         r3, [sp, #0xA0]
  00c7c	e3a03061	 mov         r3, #0x61
  00c80	e58d30a4	 str         r3, [sp, #0xA4]
  00c84	e3a03062	 mov         r3, #0x62
  00c88	e58d30a8	 str         r3, [sp, #0xA8]
  00c8c	e3a03063	 mov         r3, #0x63
  00c90	e58d30ac	 str         r3, [sp, #0xAC]
  00c94	e3a03064	 mov         r3, #0x64
  00c98	e58d30b0	 str         r3, [sp, #0xB0]
  00c9c	e3a03065	 mov         r3, #0x65
  00ca0	e58d30b4	 str         r3, [sp, #0xB4]
  00ca4	e3a03066	 mov         r3, #0x66
  00ca8	e58d30b8	 str         r3, [sp, #0xB8]
  00cac	e3a03067	 mov         r3, #0x67
  00cb0	e58d30bc	 str         r3, [sp, #0xBC]
  00cb4	e3a03068	 mov         r3, #0x68
  00cb8	e58d30c0	 str         r3, [sp, #0xC0]
  00cbc	e3a03069	 mov         r3, #0x69
  00cc0	e58d30c4	 str         r3, [sp, #0xC4]
  00cc4	e3a0306a	 mov         r3, #0x6A
  00cc8	e58d30c8	 str         r3, [sp, #0xC8]
  00ccc	e3a0306b	 mov         r3, #0x6B
  00cd0	e58d30cc	 str         r3, [sp, #0xCC]
  00cd4	e3a0306c	 mov         r3, #0x6C
  00cd8	e58d30d0	 str         r3, [sp, #0xD0]

; 421  :     XLLP_UINT32_T GpioAltFnValList[]={16,1,1,3,3,3,3,3,1,1,1,2,2,2,2,2,2};

  00cdc	e3a03010	 mov         r3, #0x10
  00ce0	e58d3004	 str         r3, [sp, #4]
  00ce4	e3a03001	 mov         r3, #1
  00ce8	e58d3008	 str         r3, [sp, #8]
  00cec	e3a03001	 mov         r3, #1
  00cf0	e58d300c	 str         r3, [sp, #0xC]
  00cf4	e3a03003	 mov         r3, #3
  00cf8	e58d3010	 str         r3, [sp, #0x10]
  00cfc	e3a03003	 mov         r3, #3
  00d00	e58d3014	 str         r3, [sp, #0x14]
  00d04	e3a03003	 mov         r3, #3
  00d08	e58d3018	 str         r3, [sp, #0x18]
  00d0c	e3a03003	 mov         r3, #3
  00d10	e58d301c	 str         r3, [sp, #0x1C]
  00d14	e3a03003	 mov         r3, #3
  00d18	e58d3020	 str         r3, [sp, #0x20]
  00d1c	e3a03001	 mov         r3, #1
  00d20	e58d3024	 str         r3, [sp, #0x24]
  00d24	e3a03001	 mov         r3, #1
  00d28	e58d3028	 str         r3, [sp, #0x28]
  00d2c	e3a03001	 mov         r3, #1
  00d30	e58d302c	 str         r3, [sp, #0x2C]
  00d34	e3a03002	 mov         r3, #2
  00d38	e58d3030	 str         r3, [sp, #0x30]
  00d3c	e3a03002	 mov         r3, #2
  00d40	e58d3034	 str         r3, [sp, #0x34]
  00d44	e3a03002	 mov         r3, #2
  00d48	e58d3038	 str         r3, [sp, #0x38]
  00d4c	e3a03002	 mov         r3, #2
  00d50	e58d303c	 str         r3, [sp, #0x3C]
  00d54	e3a03002	 mov         r3, #2
  00d58	e58d3040	 str         r3, [sp, #0x40]
  00d5c	e3a03002	 mov         r3, #2
  00d60	e58d3044	 str         r3, [sp, #0x44]

; 422  :     if(v_pGPIOReg != 0)

  00d64	e59d30e4	 ldr         r3, [sp, #0xE4]
  00d68	e3530000	 cmp         r3, #0
  00d6c	0a00000c	 beq         |$LN2@XllpKeyPad|

; 423  :     {
; 424  :         XllpGpioSetDirectionIn(v_pGPIOReg, GpioDirInList);

  00d70	e28d1048	 add         r1, sp, #0x48
  00d74	e59d00e4	 ldr         r0, [sp, #0xE4]
  00d78	eb000000	 bl          XllpGpioSetDirectionIn

; 425  :         XllpGpioSetDirectionOut(v_pGPIOReg, GpioDirOutList);

  00d7c	e28d1070	 add         r1, sp, #0x70
  00d80	e59d00e4	 ldr         r0, [sp, #0xE4]
  00d84	eb000000	 bl          XllpGpioSetDirectionOut

; 426  :         XllpGpioSetOutput0(v_pGPIOReg, GpioDirOutList);

  00d88	e28d1070	 add         r1, sp, #0x70
  00d8c	e59d00e4	 ldr         r0, [sp, #0xE4]
  00d90	eb000000	 bl          XllpGpioSetOutput0

; 427  :         XllpGpioSetAlternateFn(v_pGPIOReg, GpioAltFnPinList, GpioAltFnValList);

  00d94	e28d2004	 add         r2, sp, #4
  00d98	e28d1090	 add         r1, sp, #0x90
  00d9c	e59d00e4	 ldr         r0, [sp, #0xE4]
  00da0	eb000000	 bl          XllpGpioSetAlternateFn
  00da4		 |$LN2@XllpKeyPad|

; 428  :     }
; 429  : 
; 430  : 
; 431  :     if(v_pKeyPadRegs != 0)

  00da4	e59d30e0	 ldr         r3, [sp, #0xE0]
  00da8	e3530000	 cmp         r3, #0
  00dac	0a000008	 beq         |$LN1@XllpKeyPad|

; 432  :     {
; 433  :         // Init the control regs for direct keys
; 434  :         v_pKeyPadRegs->kpControlReg = (MATRIX_KP_NUMBER_OF_ROWS |  MATRIX_KP_NUMBER_OF_COLUMNS |
; 435  :                                         MAT_SCAN_LINE0 | MAT_SCAN_LINE1 | MAT_SCAN_LINE2 |
; 436  :                                         MAT_SCAN_LINE3 | MAT_SCAN_LINE4 | MAT_SCAN_LINE5 |
; 437  :                                         MAT_SCAN_LINE6 | MAT_SCAN_LINE7 | IGNORE_MULTIPLE_KEY_PRESS |
; 438  :                                         AUTO_SCAN_ON_ACTIVITY | MATRIX_INTR_ENABLE |
; 439  :                                         MATRIX_KP_ENABLE | ROTARY_ENCODER_ZERO_DEB |
; 440  :                                         DIRECT_KP_INTR_ENABLE | DIRECT_KEY_NUMS |
; 441  :                                         DIRECT_KP_ENABLE | ROTARY_ENCODER_0_ENABLE) ;    //NMD

  00db0	e59d20e0	 ldr         r2, [sp, #0xE0]
  00db4	e59f3030	 ldr         r3, [pc, #0x30]
  00db8	e5823000	 str         r3, [r2]

; 442  : 
; 443  :         v_pKeyPadRegs->kpRotaryEncoderCountReg = START_VALUE;

  00dbc	e59d30e0	 ldr         r3, [sp, #0xE0]
  00dc0	e2832010	 add         r2, r3, #0x10
  00dc4	e3a0307f	 mov         r3, #0x7F
  00dc8	e5823000	 str         r3, [r2]

; 444  : 
; 445  :         retval = XLLP_TRUE;     

  00dcc	e3a03001	 mov         r3, #1
  00dd0	e58d3000	 str         r3, [sp]
  00dd4		 |$LN1@XllpKeyPad|

; 446  :     }
; 447  :     return(retval);

  00dd4	e59d3000	 ldr         r3, [sp]
  00dd8	e58d30d4	 str         r3, [sp, #0xD4]

; 448  : }

  00ddc	e59d00d4	 ldr         r0, [sp, #0xD4]
  00de0	e28dd0d8	 add         sp, sp, #0xD8
  00de4	e89d6000	 ldmia       sp, {sp, lr}
  00de8	e12fff1e	 bx          lr
  00dec		 |$LN8@XllpKeyPad|
  00dec		 |$LN9@XllpKeyPad|
  00dec	3f3ff8d7	 DCD         0x3f3ff8d7
  00df0		 |$M848|

			 ENDP  ; |XllpKeyPadConfigure|

	END
