; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_gpio.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|XllpGpioGetState|

  00000			 AREA	 |.pdata|, PDATA
|$T1119| DCD	|$LN11@XllpGpioGe|
	DCD	0x40003304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_gpio.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpGpioGetState| PROC

; 69   : 	{

  00000		 |$LN11@XllpGpioGe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M1116|

; 70   : 	XLLP_UINT32_T aGpioPinMask;
; 71   : 
; 72   : 	aGpioPinMask = 0x1 << (aGpioPin & 0x1F);

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e203201f	 and         r2, r3, #0x1F
  00018	e3a03001	 mov         r3, #1
  0001c	e1a03213	 mov         r3, r3, lsl r2
  00020	e58d3000	 str         r3, [sp]

; 73   : 
; 74   : 	if(aGpioPin > 95)

  00024	e59d3014	 ldr         r3, [sp, #0x14]
  00028	e353005f	 cmp         r3, #0x5F
  0002c	9a000007	 bls         |$LN6@XllpGpioGe|

; 75   : 		return (pGPIO->GPLR3 & aGpioPinMask);

  00030	e59d3010	 ldr         r3, [sp, #0x10]
  00034	e2833c01	 add         r3, r3, #1, 24
  00038	e5932000	 ldr         r2, [r3]
  0003c	e59d3000	 ldr         r3, [sp]
  00040	e0023003	 and         r3, r2, r3
  00044	e58d3004	 str         r3, [sp, #4]
  00048	ea00001b	 b           |$LN7@XllpGpioGe|
  0004c	ea00001a	 b           |$LN5@XllpGpioGe|
  00050		 |$LN6@XllpGpioGe|

; 76   : 	else if(aGpioPin > 63) 

  00050	e59d3014	 ldr         r3, [sp, #0x14]
  00054	e353003f	 cmp         r3, #0x3F
  00058	9a000007	 bls         |$LN4@XllpGpioGe|

; 77   : 		return (pGPIO->GPLR2 & aGpioPinMask);

  0005c	e59d3010	 ldr         r3, [sp, #0x10]
  00060	e2833008	 add         r3, r3, #8
  00064	e5932000	 ldr         r2, [r3]
  00068	e59d3000	 ldr         r3, [sp]
  0006c	e0023003	 and         r3, r2, r3
  00070	e58d3004	 str         r3, [sp, #4]
  00074	ea000010	 b           |$LN7@XllpGpioGe|
  00078	ea00000f	 b           |$LN3@XllpGpioGe|
  0007c		 |$LN4@XllpGpioGe|

; 78   : 	else if(aGpioPin > 31) 

  0007c	e59d3014	 ldr         r3, [sp, #0x14]
  00080	e353001f	 cmp         r3, #0x1F
  00084	9a000007	 bls         |$LN2@XllpGpioGe|

; 79   : 		return (pGPIO->GPLR1 & aGpioPinMask);

  00088	e59d3010	 ldr         r3, [sp, #0x10]
  0008c	e2833004	 add         r3, r3, #4
  00090	e5932000	 ldr         r2, [r3]
  00094	e59d3000	 ldr         r3, [sp]
  00098	e0023003	 and         r3, r2, r3
  0009c	e58d3004	 str         r3, [sp, #4]
  000a0	ea000005	 b           |$LN7@XllpGpioGe|
  000a4	ea000004	 b           |$LN1@XllpGpioGe|
  000a8		 |$LN2@XllpGpioGe|

; 80   : 	else return (pGPIO->GPLR0 & aGpioPinMask);

  000a8	e59d3010	 ldr         r3, [sp, #0x10]
  000ac	e5932000	 ldr         r2, [r3]
  000b0	e59d3000	 ldr         r3, [sp]
  000b4	e0023003	 and         r3, r2, r3
  000b8	e58d3004	 str         r3, [sp, #4]
  000bc		 |$LN1@XllpGpioGe|
  000bc		 |$LN3@XllpGpioGe|
  000bc		 |$LN5@XllpGpioGe|
  000bc		 |$LN7@XllpGpioGe|

; 81   : 	}

  000bc	e59d0004	 ldr         r0, [sp, #4]
  000c0	e28dd008	 add         sp, sp, #8
  000c4	e89d6000	 ldmia       sp, {sp, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M1117|

			 ENDP  ; |XllpGpioGetState|

	EXPORT	|XllpGpioGetDirection|

  00008			 AREA	 |.pdata|, PDATA
|$T1125| DCD	|$LN11@XllpGpioGe@2|
	DCD	0x40003404
; Function compile flags: /Odtp

  000cc			 AREA	 |.text|, CODE, ARM

  000cc		 |XllpGpioGetDirection| PROC

; 93   :     {

  000cc		 |$LN11@XllpGpioGe@2|
  000cc	e1a0c00d	 mov         r12, sp
  000d0	e92d0003	 stmdb       sp!, {r0, r1}
  000d4	e92d5000	 stmdb       sp!, {r12, lr}
  000d8	e24dd008	 sub         sp, sp, #8
  000dc		 |$M1122|

; 94   : 	XLLP_UINT32_T aGpioPinMask;
; 95   : 
; 96   : 	aGpioPinMask = 0x1 << (aGpioPin & 0x1F);

  000dc	e59d3014	 ldr         r3, [sp, #0x14]
  000e0	e203201f	 and         r2, r3, #0x1F
  000e4	e3a03001	 mov         r3, #1
  000e8	e1a03213	 mov         r3, r3, lsl r2
  000ec	e58d3000	 str         r3, [sp]

; 97   : 
; 98   : 	if(aGpioPin > 95)

  000f0	e59d3014	 ldr         r3, [sp, #0x14]
  000f4	e353005f	 cmp         r3, #0x5F
  000f8	9a000007	 bls         |$LN6@XllpGpioGe@2|

; 99   : 		return (pGPIO->GPDR3 & aGpioPinMask);

  000fc	e59d3010	 ldr         r3, [sp, #0x10]
  00100	e2833f43	 add         r3, r3, #0x43, 30
  00104	e5932000	 ldr         r2, [r3]
  00108	e59d3000	 ldr         r3, [sp]
  0010c	e0023003	 and         r3, r2, r3
  00110	e58d3004	 str         r3, [sp, #4]
  00114	ea00001c	 b           |$LN7@XllpGpioGe@2|
  00118	ea00001b	 b           |$LN5@XllpGpioGe@2|
  0011c		 |$LN6@XllpGpioGe@2|

; 100  : 	else if(aGpioPin > 63) 

  0011c	e59d3014	 ldr         r3, [sp, #0x14]
  00120	e353003f	 cmp         r3, #0x3F
  00124	9a000007	 bls         |$LN4@XllpGpioGe@2|

; 101  : 		return (pGPIO->GPDR2 & aGpioPinMask);

  00128	e59d3010	 ldr         r3, [sp, #0x10]
  0012c	e2833014	 add         r3, r3, #0x14
  00130	e5932000	 ldr         r2, [r3]
  00134	e59d3000	 ldr         r3, [sp]
  00138	e0023003	 and         r3, r2, r3
  0013c	e58d3004	 str         r3, [sp, #4]
  00140	ea000011	 b           |$LN7@XllpGpioGe@2|
  00144	ea000010	 b           |$LN3@XllpGpioGe@2|
  00148		 |$LN4@XllpGpioGe@2|

; 102  : 	else if(aGpioPin > 31) 

  00148	e59d3014	 ldr         r3, [sp, #0x14]
  0014c	e353001f	 cmp         r3, #0x1F
  00150	9a000007	 bls         |$LN2@XllpGpioGe@2|

; 103  : 		return (pGPIO->GPDR1 & aGpioPinMask);

  00154	e59d3010	 ldr         r3, [sp, #0x10]
  00158	e2833010	 add         r3, r3, #0x10
  0015c	e5932000	 ldr         r2, [r3]
  00160	e59d3000	 ldr         r3, [sp]
  00164	e0023003	 and         r3, r2, r3
  00168	e58d3004	 str         r3, [sp, #4]
  0016c	ea000006	 b           |$LN7@XllpGpioGe@2|
  00170	ea000005	 b           |$LN1@XllpGpioGe@2|
  00174		 |$LN2@XllpGpioGe@2|

; 104  : 	else return (pGPIO->GPDR0 & aGpioPinMask);

  00174	e59d3010	 ldr         r3, [sp, #0x10]
  00178	e283300c	 add         r3, r3, #0xC
  0017c	e5932000	 ldr         r2, [r3]
  00180	e59d3000	 ldr         r3, [sp]
  00184	e0023003	 and         r3, r2, r3
  00188	e58d3004	 str         r3, [sp, #4]
  0018c		 |$LN1@XllpGpioGe@2|
  0018c		 |$LN3@XllpGpioGe@2|
  0018c		 |$LN5@XllpGpioGe@2|
  0018c		 |$LN7@XllpGpioGe@2|

; 105  :     }

  0018c	e59d0004	 ldr         r0, [sp, #4]
  00190	e28dd008	 add         sp, sp, #8
  00194	e89d6000	 ldmia       sp, {sp, lr}
  00198	e12fff1e	 bx          lr
  0019c		 |$M1123|

			 ENDP  ; |XllpGpioGetDirection|

	EXPORT	|XllpGpioSetDirectionIn|
	IMPORT	|XllpUnlock|
	IMPORT	|XllpLock|

  00010			 AREA	 |.pdata|, PDATA
|$T1130| DCD	|$LN18@XllpGpioSe|
	DCD	0x4000b004
; Function compile flags: /Odtp

  0019c			 AREA	 |.text|, CODE, ARM

  0019c		 |XllpGpioSetDirectionIn| PROC

; 116  :     {

  0019c		 |$LN18@XllpGpioSe|
  0019c	e1a0c00d	 mov         r12, sp
  001a0	e92d0003	 stmdb       sp!, {r0, r1}
  001a4	e92d5000	 stmdb       sp!, {r12, lr}
  001a8	e24dd040	 sub         sp, sp, #0x40
  001ac		 |$M1127|

; 117  : 	XLLP_UINT32_T LockID;
; 118  : 	XLLP_UINT32_T aGpioPinMask;
; 119  : 	XLLP_UINT32_T aSizeArray;
; 120  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 121  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 122  : 	XLLP_UINT32_T i;
; 123  : 
; 124  : 	//determine size of array
; 125  : 	aSizeArray = aGpioPinArray[0];

  001ac	e59d304c	 ldr         r3, [sp, #0x4C]
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e58d3028	 str         r3, [sp, #0x28]

; 126  : 	aMask0=aMask1=aMask2=aMask3=0;

  001b8	e3a03000	 mov         r3, #0
  001bc	e58d3014	 str         r3, [sp, #0x14]
  001c0	e59d3014	 ldr         r3, [sp, #0x14]
  001c4	e58d3010	 str         r3, [sp, #0x10]
  001c8	e59d3010	 ldr         r3, [sp, #0x10]
  001cc	e58d3004	 str         r3, [sp, #4]
  001d0	e59d3004	 ldr         r3, [sp, #4]
  001d4	e58d3024	 str         r3, [sp, #0x24]

; 127  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  001d8	e3a03000	 mov         r3, #0
  001dc	e58d301c	 str         r3, [sp, #0x1C]
  001e0	e59d301c	 ldr         r3, [sp, #0x1C]
  001e4	e58d3000	 str         r3, [sp]
  001e8	e59d3000	 ldr         r3, [sp]
  001ec	e58d3020	 str         r3, [sp, #0x20]
  001f0	e59d3020	 ldr         r3, [sp, #0x20]
  001f4	e58d302c	 str         r3, [sp, #0x2C]

; 128  : 
; 129  : 	for(i=1; i<=aSizeArray; i++)

  001f8	e3a03001	 mov         r3, #1
  001fc	e58d3008	 str         r3, [sp, #8]
  00200	ea000002	 b           |$LN13@XllpGpioSe|
  00204		 |$LN12@XllpGpioSe|
  00204	e59d3008	 ldr         r3, [sp, #8]
  00208	e2833001	 add         r3, r3, #1
  0020c	e58d3008	 str         r3, [sp, #8]
  00210		 |$LN13@XllpGpioSe|
  00210	e59d2008	 ldr         r2, [sp, #8]
  00214	e59d3028	 ldr         r3, [sp, #0x28]
  00218	e1520003	 cmp         r2, r3
  0021c	8a00003d	 bhi         |$LN11@XllpGpioSe|

; 130  : 	{
; 131  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  00220	e59d1008	 ldr         r1, [sp, #8]
  00224	e3a03004	 mov         r3, #4
  00228	e0020391	 mul         r2, r1, r3
  0022c	e59d304c	 ldr         r3, [sp, #0x4C]
  00230	e0833002	 add         r3, r3, r2
  00234	e5933000	 ldr         r3, [r3]
  00238	e203201f	 and         r2, r3, #0x1F
  0023c	e3a03001	 mov         r3, #1
  00240	e1a03213	 mov         r3, r3, lsl r2
  00244	e58d300c	 str         r3, [sp, #0xC]

; 132  : 		if(aGpioPinArray[i] > 95)

  00248	e59d1008	 ldr         r1, [sp, #8]
  0024c	e3a03004	 mov         r3, #4
  00250	e0020391	 mul         r2, r1, r3
  00254	e59d304c	 ldr         r3, [sp, #0x4C]
  00258	e0833002	 add         r3, r3, r2
  0025c	e5933000	 ldr         r3, [r3]
  00260	e353005f	 cmp         r3, #0x5F
  00264	9a000006	 bls         |$LN10@XllpGpioSe|

; 133  : 		{
; 134  : 			aMask3 |= aGpioPinMask;

  00268	e59d2014	 ldr         r2, [sp, #0x14]
  0026c	e59d300c	 ldr         r3, [sp, #0xC]
  00270	e1823003	 orr         r3, r2, r3
  00274	e58d3014	 str         r3, [sp, #0x14]

; 135  : 			aSet3=XLLP_TRUE;

  00278	e3a03001	 mov         r3, #1
  0027c	e58d301c	 str         r3, [sp, #0x1C]
  00280	ea000023	 b           |$LN9@XllpGpioSe|
  00284		 |$LN10@XllpGpioSe|

; 136  : 		}
; 137  : 		else if(aGpioPinArray[i] > 63)

  00284	e59d1008	 ldr         r1, [sp, #8]
  00288	e3a03004	 mov         r3, #4
  0028c	e0020391	 mul         r2, r1, r3
  00290	e59d304c	 ldr         r3, [sp, #0x4C]
  00294	e0833002	 add         r3, r3, r2
  00298	e5933000	 ldr         r3, [r3]
  0029c	e353003f	 cmp         r3, #0x3F
  002a0	9a000006	 bls         |$LN8@XllpGpioSe|

; 138  : 		{
; 139  : 			aMask2 |= aGpioPinMask;

  002a4	e59d2010	 ldr         r2, [sp, #0x10]
  002a8	e59d300c	 ldr         r3, [sp, #0xC]
  002ac	e1823003	 orr         r3, r2, r3
  002b0	e58d3010	 str         r3, [sp, #0x10]

; 140  : 			aSet2=XLLP_TRUE;

  002b4	e3a03001	 mov         r3, #1
  002b8	e58d3000	 str         r3, [sp]
  002bc	ea000014	 b           |$LN7@XllpGpioSe|
  002c0		 |$LN8@XllpGpioSe|

; 141  : 		}
; 142  : 		else if(aGpioPinArray[i] > 31)

  002c0	e59d1008	 ldr         r1, [sp, #8]
  002c4	e3a03004	 mov         r3, #4
  002c8	e0020391	 mul         r2, r1, r3
  002cc	e59d304c	 ldr         r3, [sp, #0x4C]
  002d0	e0833002	 add         r3, r3, r2
  002d4	e5933000	 ldr         r3, [r3]
  002d8	e353001f	 cmp         r3, #0x1F
  002dc	9a000006	 bls         |$LN6@XllpGpioSe|

; 143  : 		{ 
; 144  : 			aMask1 |= aGpioPinMask;

  002e0	e59d2004	 ldr         r2, [sp, #4]
  002e4	e59d300c	 ldr         r3, [sp, #0xC]
  002e8	e1823003	 orr         r3, r2, r3
  002ec	e58d3004	 str         r3, [sp, #4]

; 145  : 			aSet1=XLLP_TRUE;

  002f0	e3a03001	 mov         r3, #1
  002f4	e58d3020	 str         r3, [sp, #0x20]

; 146  : 		}
; 147  : 		else

  002f8	ea000005	 b           |$LN5@XllpGpioSe|
  002fc		 |$LN6@XllpGpioSe|

; 148  : 		{
; 149  : 			aMask0 |= aGpioPinMask;

  002fc	e59d2024	 ldr         r2, [sp, #0x24]
  00300	e59d300c	 ldr         r3, [sp, #0xC]
  00304	e1823003	 orr         r3, r2, r3
  00308	e58d3024	 str         r3, [sp, #0x24]

; 150  : 			aSet0=XLLP_TRUE;

  0030c	e3a03001	 mov         r3, #1
  00310	e58d302c	 str         r3, [sp, #0x2C]
  00314		 |$LN5@XllpGpioSe|
  00314		 |$LN7@XllpGpioSe|
  00314		 |$LN9@XllpGpioSe|

; 151  : 		}
; 152  : 			
; 153  : 	}

  00314	eaffffba	 b           |$LN12@XllpGpioSe|
  00318		 |$LN11@XllpGpioSe|

; 154  : 	
; 155  : 	if(aSet3)

  00318	e59d301c	 ldr         r3, [sp, #0x1C]
  0031c	e3530000	 cmp         r3, #0
  00320	0a000011	 beq         |$LN4@XllpGpioSe|

; 156  : 	{
; 157  : 		LockID = XllpLock(GPDR3);

  00324	e3a0001f	 mov         r0, #0x1F
  00328	eb000000	 bl          XllpLock
  0032c	e58d0030	 str         r0, [sp, #0x30]
  00330	e59d3030	 ldr         r3, [sp, #0x30]
  00334	e58d3018	 str         r3, [sp, #0x18]

; 158  : 		pGPIO->GPDR3=((pGPIO->GPDR3&~aMask3)&~XLLP_GPIO_PIN_RESERVED_BITS);

  00338	e59d3048	 ldr         r3, [sp, #0x48]
  0033c	e2831f43	 add         r1, r3, #0x43, 30
  00340	e59d3014	 ldr         r3, [sp, #0x14]
  00344	e1e02003	 mvn         r2, r3
  00348	e5913000	 ldr         r3, [r1]
  0034c	e0032002	 and         r2, r3, r2
  00350	e3e034fe	 mvn         r3, #0xFE, 8
  00354	e0022003	 and         r2, r2, r3
  00358	e59d3048	 ldr         r3, [sp, #0x48]
  0035c	e2833f43	 add         r3, r3, #0x43, 30
  00360	e5832000	 str         r2, [r3]

; 159  : 		XllpUnlock(LockID);

  00364	e59d0018	 ldr         r0, [sp, #0x18]
  00368	eb000000	 bl          XllpUnlock
  0036c		 |$LN4@XllpGpioSe|

; 160  : 	}
; 161  : 	if(aSet2)

  0036c	e59d3000	 ldr         r3, [sp]
  00370	e3530000	 cmp         r3, #0
  00374	0a00000f	 beq         |$LN3@XllpGpioSe|

; 162  : 	{
; 163  : 		LockID = XllpLock(GPDR2);

  00378	e3a00006	 mov         r0, #6
  0037c	eb000000	 bl          XllpLock
  00380	e58d0034	 str         r0, [sp, #0x34]
  00384	e59d3034	 ldr         r3, [sp, #0x34]
  00388	e58d3018	 str         r3, [sp, #0x18]

; 164  : 		pGPIO->GPDR2=((pGPIO->GPDR2)&~aMask2);

  0038c	e59d3048	 ldr         r3, [sp, #0x48]
  00390	e2831014	 add         r1, r3, #0x14
  00394	e59d3010	 ldr         r3, [sp, #0x10]
  00398	e1e02003	 mvn         r2, r3
  0039c	e5913000	 ldr         r3, [r1]
  003a0	e0032002	 and         r2, r3, r2
  003a4	e59d3048	 ldr         r3, [sp, #0x48]
  003a8	e2833014	 add         r3, r3, #0x14
  003ac	e5832000	 str         r2, [r3]

; 165  : 		XllpUnlock(LockID);

  003b0	e59d0018	 ldr         r0, [sp, #0x18]
  003b4	eb000000	 bl          XllpUnlock
  003b8		 |$LN3@XllpGpioSe|

; 166  : 	}
; 167  : 	if(aSet1)

  003b8	e59d3020	 ldr         r3, [sp, #0x20]
  003bc	e3530000	 cmp         r3, #0
  003c0	0a00000f	 beq         |$LN2@XllpGpioSe|

; 168  : 	{
; 169  : 		LockID = XllpLock(GPDR1);

  003c4	e3a00005	 mov         r0, #5
  003c8	eb000000	 bl          XllpLock
  003cc	e58d0038	 str         r0, [sp, #0x38]
  003d0	e59d3038	 ldr         r3, [sp, #0x38]
  003d4	e58d3018	 str         r3, [sp, #0x18]

; 170  : 		pGPIO->GPDR1=((pGPIO->GPDR1)&~aMask1);

  003d8	e59d3048	 ldr         r3, [sp, #0x48]
  003dc	e2831010	 add         r1, r3, #0x10
  003e0	e59d3004	 ldr         r3, [sp, #4]
  003e4	e1e02003	 mvn         r2, r3
  003e8	e5913000	 ldr         r3, [r1]
  003ec	e0032002	 and         r2, r3, r2
  003f0	e59d3048	 ldr         r3, [sp, #0x48]
  003f4	e2833010	 add         r3, r3, #0x10
  003f8	e5832000	 str         r2, [r3]

; 171  : 		XllpUnlock(LockID);

  003fc	e59d0018	 ldr         r0, [sp, #0x18]
  00400	eb000000	 bl          XllpUnlock
  00404		 |$LN2@XllpGpioSe|

; 172  : 	}
; 173  : 	if(aSet0)

  00404	e59d302c	 ldr         r3, [sp, #0x2C]
  00408	e3530000	 cmp         r3, #0
  0040c	0a00000f	 beq         |$LN1@XllpGpioSe|

; 174  : 	{
; 175  : 		LockID = XllpLock(GPDR0);

  00410	e3a00004	 mov         r0, #4
  00414	eb000000	 bl          XllpLock
  00418	e58d003c	 str         r0, [sp, #0x3C]
  0041c	e59d303c	 ldr         r3, [sp, #0x3C]
  00420	e58d3018	 str         r3, [sp, #0x18]

; 176  : 		pGPIO->GPDR0=((pGPIO->GPDR0)&~aMask0);

  00424	e59d3048	 ldr         r3, [sp, #0x48]
  00428	e283100c	 add         r1, r3, #0xC
  0042c	e59d3024	 ldr         r3, [sp, #0x24]
  00430	e1e02003	 mvn         r2, r3
  00434	e5913000	 ldr         r3, [r1]
  00438	e0032002	 and         r2, r3, r2
  0043c	e59d3048	 ldr         r3, [sp, #0x48]
  00440	e283300c	 add         r3, r3, #0xC
  00444	e5832000	 str         r2, [r3]

; 177  : 		XllpUnlock(LockID);

  00448	e59d0018	 ldr         r0, [sp, #0x18]
  0044c	eb000000	 bl          XllpUnlock
  00450		 |$LN1@XllpGpioSe|

; 178  : 	}
; 179  :     }

  00450	e28dd040	 add         sp, sp, #0x40
  00454	e89d6000	 ldmia       sp, {sp, lr}
  00458	e12fff1e	 bx          lr
  0045c		 |$M1128|

			 ENDP  ; |XllpGpioSetDirectionIn|

	EXPORT	|XllpGpioSetDirectionOut|

  00018			 AREA	 |.pdata|, PDATA
|$T1135| DCD	|$LN18@XllpGpioSe@2|
	DCD	0x4000ac04
; Function compile flags: /Odtp

  0045c			 AREA	 |.text|, CODE, ARM

  0045c		 |XllpGpioSetDirectionOut| PROC

; 190  :     {

  0045c		 |$LN18@XllpGpioSe@2|
  0045c	e1a0c00d	 mov         r12, sp
  00460	e92d0003	 stmdb       sp!, {r0, r1}
  00464	e92d5000	 stmdb       sp!, {r12, lr}
  00468	e24dd040	 sub         sp, sp, #0x40
  0046c		 |$M1132|

; 191  : 	XLLP_UINT32_T LockID;
; 192  : 	XLLP_UINT32_T aGpioPinMask;
; 193  : 	XLLP_UINT32_T aSizeArray;
; 194  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 195  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 196  : 	XLLP_UINT32_T i;
; 197  : 
; 198  : 	//determine size of array
; 199  : 	aSizeArray = aGpioPinArray[0];

  0046c	e59d304c	 ldr         r3, [sp, #0x4C]
  00470	e5933000	 ldr         r3, [r3]
  00474	e58d3028	 str         r3, [sp, #0x28]

; 200  : 	aMask0=aMask1=aMask2=aMask3=0;

  00478	e3a03000	 mov         r3, #0
  0047c	e58d3014	 str         r3, [sp, #0x14]
  00480	e59d3014	 ldr         r3, [sp, #0x14]
  00484	e58d3010	 str         r3, [sp, #0x10]
  00488	e59d3010	 ldr         r3, [sp, #0x10]
  0048c	e58d3004	 str         r3, [sp, #4]
  00490	e59d3004	 ldr         r3, [sp, #4]
  00494	e58d3024	 str         r3, [sp, #0x24]

; 201  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  00498	e3a03000	 mov         r3, #0
  0049c	e58d301c	 str         r3, [sp, #0x1C]
  004a0	e59d301c	 ldr         r3, [sp, #0x1C]
  004a4	e58d3000	 str         r3, [sp]
  004a8	e59d3000	 ldr         r3, [sp]
  004ac	e58d3020	 str         r3, [sp, #0x20]
  004b0	e59d3020	 ldr         r3, [sp, #0x20]
  004b4	e58d302c	 str         r3, [sp, #0x2C]

; 202  : 	
; 203  : 	for(i=1; i<=aSizeArray; i++)

  004b8	e3a03001	 mov         r3, #1
  004bc	e58d3008	 str         r3, [sp, #8]
  004c0	ea000002	 b           |$LN13@XllpGpioSe@2|
  004c4		 |$LN12@XllpGpioSe@2|
  004c4	e59d3008	 ldr         r3, [sp, #8]
  004c8	e2833001	 add         r3, r3, #1
  004cc	e58d3008	 str         r3, [sp, #8]
  004d0		 |$LN13@XllpGpioSe@2|
  004d0	e59d2008	 ldr         r2, [sp, #8]
  004d4	e59d3028	 ldr         r3, [sp, #0x28]
  004d8	e1520003	 cmp         r2, r3
  004dc	8a00003d	 bhi         |$LN11@XllpGpioSe@2|

; 204  : 	{
; 205  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  004e0	e59d1008	 ldr         r1, [sp, #8]
  004e4	e3a03004	 mov         r3, #4
  004e8	e0020391	 mul         r2, r1, r3
  004ec	e59d304c	 ldr         r3, [sp, #0x4C]
  004f0	e0833002	 add         r3, r3, r2
  004f4	e5933000	 ldr         r3, [r3]
  004f8	e203201f	 and         r2, r3, #0x1F
  004fc	e3a03001	 mov         r3, #1
  00500	e1a03213	 mov         r3, r3, lsl r2
  00504	e58d300c	 str         r3, [sp, #0xC]

; 206  : 		if(aGpioPinArray[i] > 95)

  00508	e59d1008	 ldr         r1, [sp, #8]
  0050c	e3a03004	 mov         r3, #4
  00510	e0020391	 mul         r2, r1, r3
  00514	e59d304c	 ldr         r3, [sp, #0x4C]
  00518	e0833002	 add         r3, r3, r2
  0051c	e5933000	 ldr         r3, [r3]
  00520	e353005f	 cmp         r3, #0x5F
  00524	9a000006	 bls         |$LN10@XllpGpioSe@2|

; 207  : 		{
; 208  : 			aMask3 |= aGpioPinMask;

  00528	e59d2014	 ldr         r2, [sp, #0x14]
  0052c	e59d300c	 ldr         r3, [sp, #0xC]
  00530	e1823003	 orr         r3, r2, r3
  00534	e58d3014	 str         r3, [sp, #0x14]

; 209  : 			aSet3=XLLP_TRUE;

  00538	e3a03001	 mov         r3, #1
  0053c	e58d301c	 str         r3, [sp, #0x1C]
  00540	ea000023	 b           |$LN9@XllpGpioSe@2|
  00544		 |$LN10@XllpGpioSe@2|

; 210  : 		}
; 211  : 		else if(aGpioPinArray[i] > 63)

  00544	e59d1008	 ldr         r1, [sp, #8]
  00548	e3a03004	 mov         r3, #4
  0054c	e0020391	 mul         r2, r1, r3
  00550	e59d304c	 ldr         r3, [sp, #0x4C]
  00554	e0833002	 add         r3, r3, r2
  00558	e5933000	 ldr         r3, [r3]
  0055c	e353003f	 cmp         r3, #0x3F
  00560	9a000006	 bls         |$LN8@XllpGpioSe@2|

; 212  : 		{
; 213  : 			aMask2 |= aGpioPinMask;

  00564	e59d2010	 ldr         r2, [sp, #0x10]
  00568	e59d300c	 ldr         r3, [sp, #0xC]
  0056c	e1823003	 orr         r3, r2, r3
  00570	e58d3010	 str         r3, [sp, #0x10]

; 214  : 			aSet2=XLLP_TRUE;

  00574	e3a03001	 mov         r3, #1
  00578	e58d3000	 str         r3, [sp]
  0057c	ea000014	 b           |$LN7@XllpGpioSe@2|
  00580		 |$LN8@XllpGpioSe@2|

; 215  : 		}
; 216  : 		else if(aGpioPinArray[i] > 31)

  00580	e59d1008	 ldr         r1, [sp, #8]
  00584	e3a03004	 mov         r3, #4
  00588	e0020391	 mul         r2, r1, r3
  0058c	e59d304c	 ldr         r3, [sp, #0x4C]
  00590	e0833002	 add         r3, r3, r2
  00594	e5933000	 ldr         r3, [r3]
  00598	e353001f	 cmp         r3, #0x1F
  0059c	9a000006	 bls         |$LN6@XllpGpioSe@2|

; 217  : 		{
; 218  : 			aMask1 |= aGpioPinMask;

  005a0	e59d2004	 ldr         r2, [sp, #4]
  005a4	e59d300c	 ldr         r3, [sp, #0xC]
  005a8	e1823003	 orr         r3, r2, r3
  005ac	e58d3004	 str         r3, [sp, #4]

; 219  : 			aSet1=XLLP_TRUE;

  005b0	e3a03001	 mov         r3, #1
  005b4	e58d3020	 str         r3, [sp, #0x20]

; 220  : 		}
; 221  : 		else

  005b8	ea000005	 b           |$LN5@XllpGpioSe@2|
  005bc		 |$LN6@XllpGpioSe@2|

; 222  : 		{
; 223  : 			aMask0 |= aGpioPinMask;

  005bc	e59d2024	 ldr         r2, [sp, #0x24]
  005c0	e59d300c	 ldr         r3, [sp, #0xC]
  005c4	e1823003	 orr         r3, r2, r3
  005c8	e58d3024	 str         r3, [sp, #0x24]

; 224  : 			aSet0=XLLP_TRUE;

  005cc	e3a03001	 mov         r3, #1
  005d0	e58d302c	 str         r3, [sp, #0x2C]
  005d4		 |$LN5@XllpGpioSe@2|
  005d4		 |$LN7@XllpGpioSe@2|
  005d4		 |$LN9@XllpGpioSe@2|

; 225  : 		}
; 226  : 	}

  005d4	eaffffba	 b           |$LN12@XllpGpioSe@2|
  005d8		 |$LN11@XllpGpioSe@2|

; 227  : 	if(aSet3)

  005d8	e59d301c	 ldr         r3, [sp, #0x1C]
  005dc	e3530000	 cmp         r3, #0
  005e0	0a000010	 beq         |$LN4@XllpGpioSe@2|

; 228  : 	{
; 229  : 		LockID = XllpLock(GPDR3);

  005e4	e3a0001f	 mov         r0, #0x1F
  005e8	eb000000	 bl          XllpLock
  005ec	e58d0030	 str         r0, [sp, #0x30]
  005f0	e59d3030	 ldr         r3, [sp, #0x30]
  005f4	e58d3018	 str         r3, [sp, #0x18]

; 230  : 		pGPIO->GPDR3=((pGPIO->GPDR3| aMask3)&~XLLP_GPIO_PIN_RESERVED_BITS);

  005f8	e59d3048	 ldr         r3, [sp, #0x48]
  005fc	e2833f43	 add         r3, r3, #0x43, 30
  00600	e5932000	 ldr         r2, [r3]
  00604	e59d3014	 ldr         r3, [sp, #0x14]
  00608	e1822003	 orr         r2, r2, r3
  0060c	e3e034fe	 mvn         r3, #0xFE, 8
  00610	e0022003	 and         r2, r2, r3
  00614	e59d3048	 ldr         r3, [sp, #0x48]
  00618	e2833f43	 add         r3, r3, #0x43, 30
  0061c	e5832000	 str         r2, [r3]

; 231  : 		XllpUnlock(LockID);

  00620	e59d0018	 ldr         r0, [sp, #0x18]
  00624	eb000000	 bl          XllpUnlock
  00628		 |$LN4@XllpGpioSe@2|

; 232  : 	}
; 233  : 	if(aSet2)

  00628	e59d3000	 ldr         r3, [sp]
  0062c	e3530000	 cmp         r3, #0
  00630	0a00000e	 beq         |$LN3@XllpGpioSe@2|

; 234  : 	{
; 235  : 		LockID = XllpLock(GPDR2);

  00634	e3a00006	 mov         r0, #6
  00638	eb000000	 bl          XllpLock
  0063c	e58d0034	 str         r0, [sp, #0x34]
  00640	e59d3034	 ldr         r3, [sp, #0x34]
  00644	e58d3018	 str         r3, [sp, #0x18]

; 236  : 		pGPIO->GPDR2=((pGPIO->GPDR2)| aMask2);

  00648	e59d3048	 ldr         r3, [sp, #0x48]
  0064c	e2833014	 add         r3, r3, #0x14
  00650	e5932000	 ldr         r2, [r3]
  00654	e59d3010	 ldr         r3, [sp, #0x10]
  00658	e1822003	 orr         r2, r2, r3
  0065c	e59d3048	 ldr         r3, [sp, #0x48]
  00660	e2833014	 add         r3, r3, #0x14
  00664	e5832000	 str         r2, [r3]

; 237  : 		XllpUnlock(LockID);

  00668	e59d0018	 ldr         r0, [sp, #0x18]
  0066c	eb000000	 bl          XllpUnlock
  00670		 |$LN3@XllpGpioSe@2|

; 238  : 	}
; 239  : 	if(aSet1)

  00670	e59d3020	 ldr         r3, [sp, #0x20]
  00674	e3530000	 cmp         r3, #0
  00678	0a00000e	 beq         |$LN2@XllpGpioSe@2|

; 240  : 	{
; 241  : 		LockID = XllpLock(GPDR1);

  0067c	e3a00005	 mov         r0, #5
  00680	eb000000	 bl          XllpLock
  00684	e58d0038	 str         r0, [sp, #0x38]
  00688	e59d3038	 ldr         r3, [sp, #0x38]
  0068c	e58d3018	 str         r3, [sp, #0x18]

; 242  : 		pGPIO->GPDR1=((pGPIO->GPDR1)| aMask1);

  00690	e59d3048	 ldr         r3, [sp, #0x48]
  00694	e2833010	 add         r3, r3, #0x10
  00698	e5932000	 ldr         r2, [r3]
  0069c	e59d3004	 ldr         r3, [sp, #4]
  006a0	e1822003	 orr         r2, r2, r3
  006a4	e59d3048	 ldr         r3, [sp, #0x48]
  006a8	e2833010	 add         r3, r3, #0x10
  006ac	e5832000	 str         r2, [r3]

; 243  : 		XllpUnlock(LockID);

  006b0	e59d0018	 ldr         r0, [sp, #0x18]
  006b4	eb000000	 bl          XllpUnlock
  006b8		 |$LN2@XllpGpioSe@2|

; 244  : 	}
; 245  : 	if(aSet0)

  006b8	e59d302c	 ldr         r3, [sp, #0x2C]
  006bc	e3530000	 cmp         r3, #0
  006c0	0a00000e	 beq         |$LN1@XllpGpioSe@2|

; 246  : 	{
; 247  : 		LockID = XllpLock(GPDR0);

  006c4	e3a00004	 mov         r0, #4
  006c8	eb000000	 bl          XllpLock
  006cc	e58d003c	 str         r0, [sp, #0x3C]
  006d0	e59d303c	 ldr         r3, [sp, #0x3C]
  006d4	e58d3018	 str         r3, [sp, #0x18]

; 248  : 		pGPIO->GPDR0=((pGPIO->GPDR0)| aMask0);

  006d8	e59d3048	 ldr         r3, [sp, #0x48]
  006dc	e283300c	 add         r3, r3, #0xC
  006e0	e5932000	 ldr         r2, [r3]
  006e4	e59d3024	 ldr         r3, [sp, #0x24]
  006e8	e1822003	 orr         r2, r2, r3
  006ec	e59d3048	 ldr         r3, [sp, #0x48]
  006f0	e283300c	 add         r3, r3, #0xC
  006f4	e5832000	 str         r2, [r3]

; 249  : 		XllpUnlock(LockID);

  006f8	e59d0018	 ldr         r0, [sp, #0x18]
  006fc	eb000000	 bl          XllpUnlock
  00700		 |$LN1@XllpGpioSe@2|

; 250  : 	}
; 251  :     }

  00700	e28dd040	 add         sp, sp, #0x40
  00704	e89d6000	 ldmia       sp, {sp, lr}
  00708	e12fff1e	 bx          lr
  0070c		 |$M1133|

			 ENDP  ; |XllpGpioSetDirectionOut|

	EXPORT	|XllpGpioSetOutputState1|

  00020			 AREA	 |.pdata|, PDATA
|$T1140| DCD	|$LN18@XllpGpioSe@3|
	DCD	0x40007e04
; Function compile flags: /Odtp

  0070c			 AREA	 |.text|, CODE, ARM

  0070c		 |XllpGpioSetOutputState1| PROC

; 261  : 	{

  0070c		 |$LN18@XllpGpioSe@3|
  0070c	e1a0c00d	 mov         r12, sp
  00710	e92d0003	 stmdb       sp!, {r0, r1}
  00714	e92d5000	 stmdb       sp!, {r12, lr}
  00718	e24dd02c	 sub         sp, sp, #0x2C
  0071c		 |$M1137|

; 262  : 	XLLP_UINT32_T aGpioPinMask;
; 263  : 	XLLP_UINT32_T aSizeArray;
; 264  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 265  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 266  : 	XLLP_UINT32_T i;
; 267  : 
; 268  : 	//determine size of array
; 269  : 	aSizeArray = aGpioPinArray[0];

  0071c	e59d3038	 ldr         r3, [sp, #0x38]
  00720	e5933000	 ldr         r3, [r3]
  00724	e58d3024	 str         r3, [sp, #0x24]

; 270  : 	aMask0=aMask1=aMask2=aMask3=0;

  00728	e3a03000	 mov         r3, #0
  0072c	e58d3014	 str         r3, [sp, #0x14]
  00730	e59d3014	 ldr         r3, [sp, #0x14]
  00734	e58d3010	 str         r3, [sp, #0x10]
  00738	e59d3010	 ldr         r3, [sp, #0x10]
  0073c	e58d3004	 str         r3, [sp, #4]
  00740	e59d3004	 ldr         r3, [sp, #4]
  00744	e58d3020	 str         r3, [sp, #0x20]

; 271  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  00748	e3a03000	 mov         r3, #0
  0074c	e58d3018	 str         r3, [sp, #0x18]
  00750	e59d3018	 ldr         r3, [sp, #0x18]
  00754	e58d3000	 str         r3, [sp]
  00758	e59d3000	 ldr         r3, [sp]
  0075c	e58d301c	 str         r3, [sp, #0x1C]
  00760	e59d301c	 ldr         r3, [sp, #0x1C]
  00764	e58d3028	 str         r3, [sp, #0x28]

; 272  : 
; 273  : 	for(i=1; i<=aSizeArray; i++)

  00768	e3a03001	 mov         r3, #1
  0076c	e58d3008	 str         r3, [sp, #8]
  00770	ea000002	 b           |$LN13@XllpGpioSe@3|
  00774		 |$LN12@XllpGpioSe@3|
  00774	e59d3008	 ldr         r3, [sp, #8]
  00778	e2833001	 add         r3, r3, #1
  0077c	e58d3008	 str         r3, [sp, #8]
  00780		 |$LN13@XllpGpioSe@3|
  00780	e59d2008	 ldr         r2, [sp, #8]
  00784	e59d3024	 ldr         r3, [sp, #0x24]
  00788	e1520003	 cmp         r2, r3
  0078c	8a00003d	 bhi         |$LN11@XllpGpioSe@3|

; 274  : 	{
; 275  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  00790	e59d1008	 ldr         r1, [sp, #8]
  00794	e3a03004	 mov         r3, #4
  00798	e0020391	 mul         r2, r1, r3
  0079c	e59d3038	 ldr         r3, [sp, #0x38]
  007a0	e0833002	 add         r3, r3, r2
  007a4	e5933000	 ldr         r3, [r3]
  007a8	e203201f	 and         r2, r3, #0x1F
  007ac	e3a03001	 mov         r3, #1
  007b0	e1a03213	 mov         r3, r3, lsl r2
  007b4	e58d300c	 str         r3, [sp, #0xC]

; 276  : 		if(aGpioPinArray[i] > 95)

  007b8	e59d1008	 ldr         r1, [sp, #8]
  007bc	e3a03004	 mov         r3, #4
  007c0	e0020391	 mul         r2, r1, r3
  007c4	e59d3038	 ldr         r3, [sp, #0x38]
  007c8	e0833002	 add         r3, r3, r2
  007cc	e5933000	 ldr         r3, [r3]
  007d0	e353005f	 cmp         r3, #0x5F
  007d4	9a000006	 bls         |$LN10@XllpGpioSe@3|

; 277  : 		{
; 278  : 			aMask3 |= aGpioPinMask;

  007d8	e59d2014	 ldr         r2, [sp, #0x14]
  007dc	e59d300c	 ldr         r3, [sp, #0xC]
  007e0	e1823003	 orr         r3, r2, r3
  007e4	e58d3014	 str         r3, [sp, #0x14]

; 279  : 			aSet3=XLLP_TRUE;

  007e8	e3a03001	 mov         r3, #1
  007ec	e58d3018	 str         r3, [sp, #0x18]
  007f0	ea000023	 b           |$LN9@XllpGpioSe@3|
  007f4		 |$LN10@XllpGpioSe@3|

; 280  : 		}
; 281  : 		else if(aGpioPinArray[i] > 63)

  007f4	e59d1008	 ldr         r1, [sp, #8]
  007f8	e3a03004	 mov         r3, #4
  007fc	e0020391	 mul         r2, r1, r3
  00800	e59d3038	 ldr         r3, [sp, #0x38]
  00804	e0833002	 add         r3, r3, r2
  00808	e5933000	 ldr         r3, [r3]
  0080c	e353003f	 cmp         r3, #0x3F
  00810	9a000006	 bls         |$LN8@XllpGpioSe@3|

; 282  : 		{
; 283  : 			aMask2 |= aGpioPinMask;

  00814	e59d2010	 ldr         r2, [sp, #0x10]
  00818	e59d300c	 ldr         r3, [sp, #0xC]
  0081c	e1823003	 orr         r3, r2, r3
  00820	e58d3010	 str         r3, [sp, #0x10]

; 284  : 			aSet2=XLLP_TRUE;

  00824	e3a03001	 mov         r3, #1
  00828	e58d3000	 str         r3, [sp]
  0082c	ea000014	 b           |$LN7@XllpGpioSe@3|
  00830		 |$LN8@XllpGpioSe@3|

; 285  : 		}
; 286  : 		else if(aGpioPinArray[i] > 31)

  00830	e59d1008	 ldr         r1, [sp, #8]
  00834	e3a03004	 mov         r3, #4
  00838	e0020391	 mul         r2, r1, r3
  0083c	e59d3038	 ldr         r3, [sp, #0x38]
  00840	e0833002	 add         r3, r3, r2
  00844	e5933000	 ldr         r3, [r3]
  00848	e353001f	 cmp         r3, #0x1F
  0084c	9a000006	 bls         |$LN6@XllpGpioSe@3|

; 287  : 		{
; 288  : 			aMask1 |= aGpioPinMask;

  00850	e59d2004	 ldr         r2, [sp, #4]
  00854	e59d300c	 ldr         r3, [sp, #0xC]
  00858	e1823003	 orr         r3, r2, r3
  0085c	e58d3004	 str         r3, [sp, #4]

; 289  : 			aSet1=XLLP_TRUE;

  00860	e3a03001	 mov         r3, #1
  00864	e58d301c	 str         r3, [sp, #0x1C]

; 290  : 		}
; 291  : 		else

  00868	ea000005	 b           |$LN5@XllpGpioSe@3|
  0086c		 |$LN6@XllpGpioSe@3|

; 292  : 		{
; 293  : 			aMask0 |= aGpioPinMask;

  0086c	e59d2020	 ldr         r2, [sp, #0x20]
  00870	e59d300c	 ldr         r3, [sp, #0xC]
  00874	e1823003	 orr         r3, r2, r3
  00878	e58d3020	 str         r3, [sp, #0x20]

; 294  : 			aSet0=XLLP_TRUE;

  0087c	e3a03001	 mov         r3, #1
  00880	e58d3028	 str         r3, [sp, #0x28]
  00884		 |$LN5@XllpGpioSe@3|
  00884		 |$LN7@XllpGpioSe@3|
  00884		 |$LN9@XllpGpioSe@3|

; 295  : 		}
; 296  : 	}

  00884	eaffffba	 b           |$LN12@XllpGpioSe@3|
  00888		 |$LN11@XllpGpioSe@3|

; 297  : 	if(aSet3)

  00888	e59d3018	 ldr         r3, [sp, #0x18]
  0088c	e3530000	 cmp         r3, #0
  00890	0a000003	 beq         |$LN4@XllpGpioSe@3|

; 298  : 		pGPIO->GPSR3=aMask3;

  00894	e59d3034	 ldr         r3, [sp, #0x34]
  00898	e2832f46	 add         r2, r3, #0x46, 30
  0089c	e59d3014	 ldr         r3, [sp, #0x14]
  008a0	e5823000	 str         r3, [r2]
  008a4		 |$LN4@XllpGpioSe@3|

; 299  : 	if(aSet2)

  008a4	e59d3000	 ldr         r3, [sp]
  008a8	e3530000	 cmp         r3, #0
  008ac	0a000003	 beq         |$LN3@XllpGpioSe@3|

; 300  : 		pGPIO->GPSR2=aMask2;

  008b0	e59d3034	 ldr         r3, [sp, #0x34]
  008b4	e2832020	 add         r2, r3, #0x20
  008b8	e59d3010	 ldr         r3, [sp, #0x10]
  008bc	e5823000	 str         r3, [r2]
  008c0		 |$LN3@XllpGpioSe@3|

; 301  : 	if(aSet1)

  008c0	e59d301c	 ldr         r3, [sp, #0x1C]
  008c4	e3530000	 cmp         r3, #0
  008c8	0a000003	 beq         |$LN2@XllpGpioSe@3|

; 302  : 		pGPIO->GPSR1=aMask1;

  008cc	e59d3034	 ldr         r3, [sp, #0x34]
  008d0	e283201c	 add         r2, r3, #0x1C
  008d4	e59d3004	 ldr         r3, [sp, #4]
  008d8	e5823000	 str         r3, [r2]
  008dc		 |$LN2@XllpGpioSe@3|

; 303  : 	if(aSet0)

  008dc	e59d3028	 ldr         r3, [sp, #0x28]
  008e0	e3530000	 cmp         r3, #0
  008e4	0a000003	 beq         |$LN1@XllpGpioSe@3|

; 304  : 		pGPIO->GPSR0=aMask0;

  008e8	e59d3034	 ldr         r3, [sp, #0x34]
  008ec	e2832018	 add         r2, r3, #0x18
  008f0	e59d3020	 ldr         r3, [sp, #0x20]
  008f4	e5823000	 str         r3, [r2]
  008f8		 |$LN1@XllpGpioSe@3|

; 305  : 	}

  008f8	e28dd02c	 add         sp, sp, #0x2C
  008fc	e89d6000	 ldmia       sp, {sp, lr}
  00900	e12fff1e	 bx          lr
  00904		 |$M1138|

			 ENDP  ; |XllpGpioSetOutputState1|

	EXPORT	|XllpGpioSetOutput0|

  00028			 AREA	 |.pdata|, PDATA
|$T1145| DCD	|$LN18@XllpGpioSe@4|
	DCD	0x40007e04
; Function compile flags: /Odtp

  00904			 AREA	 |.text|, CODE, ARM

  00904		 |XllpGpioSetOutput0| PROC

; 315  : 	{

  00904		 |$LN18@XllpGpioSe@4|
  00904	e1a0c00d	 mov         r12, sp
  00908	e92d0003	 stmdb       sp!, {r0, r1}
  0090c	e92d5000	 stmdb       sp!, {r12, lr}
  00910	e24dd02c	 sub         sp, sp, #0x2C
  00914		 |$M1142|

; 316  : 	XLLP_UINT32_T aGpioPinMask;
; 317  : 	XLLP_UINT32_T aSizeArray;
; 318  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 319  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 320  : 	XLLP_UINT32_T i;
; 321  : 
; 322  : 	//determine size of array
; 323  : 	aSizeArray = aGpioPinArray[0];

  00914	e59d3038	 ldr         r3, [sp, #0x38]
  00918	e5933000	 ldr         r3, [r3]
  0091c	e58d3024	 str         r3, [sp, #0x24]

; 324  : 	aMask0=aMask1=aMask2=aMask3=0;

  00920	e3a03000	 mov         r3, #0
  00924	e58d3014	 str         r3, [sp, #0x14]
  00928	e59d3014	 ldr         r3, [sp, #0x14]
  0092c	e58d3010	 str         r3, [sp, #0x10]
  00930	e59d3010	 ldr         r3, [sp, #0x10]
  00934	e58d3004	 str         r3, [sp, #4]
  00938	e59d3004	 ldr         r3, [sp, #4]
  0093c	e58d3020	 str         r3, [sp, #0x20]

; 325  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  00940	e3a03000	 mov         r3, #0
  00944	e58d3018	 str         r3, [sp, #0x18]
  00948	e59d3018	 ldr         r3, [sp, #0x18]
  0094c	e58d3000	 str         r3, [sp]
  00950	e59d3000	 ldr         r3, [sp]
  00954	e58d301c	 str         r3, [sp, #0x1C]
  00958	e59d301c	 ldr         r3, [sp, #0x1C]
  0095c	e58d3028	 str         r3, [sp, #0x28]

; 326  : 
; 327  : 	for(i=1; i<=aSizeArray; i++)

  00960	e3a03001	 mov         r3, #1
  00964	e58d3008	 str         r3, [sp, #8]
  00968	ea000002	 b           |$LN13@XllpGpioSe@4|
  0096c		 |$LN12@XllpGpioSe@4|
  0096c	e59d3008	 ldr         r3, [sp, #8]
  00970	e2833001	 add         r3, r3, #1
  00974	e58d3008	 str         r3, [sp, #8]
  00978		 |$LN13@XllpGpioSe@4|
  00978	e59d2008	 ldr         r2, [sp, #8]
  0097c	e59d3024	 ldr         r3, [sp, #0x24]
  00980	e1520003	 cmp         r2, r3
  00984	8a00003d	 bhi         |$LN11@XllpGpioSe@4|

; 328  : 	{
; 329  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  00988	e59d1008	 ldr         r1, [sp, #8]
  0098c	e3a03004	 mov         r3, #4
  00990	e0020391	 mul         r2, r1, r3
  00994	e59d3038	 ldr         r3, [sp, #0x38]
  00998	e0833002	 add         r3, r3, r2
  0099c	e5933000	 ldr         r3, [r3]
  009a0	e203201f	 and         r2, r3, #0x1F
  009a4	e3a03001	 mov         r3, #1
  009a8	e1a03213	 mov         r3, r3, lsl r2
  009ac	e58d300c	 str         r3, [sp, #0xC]

; 330  : 		if(aGpioPinArray[i] > 95)

  009b0	e59d1008	 ldr         r1, [sp, #8]
  009b4	e3a03004	 mov         r3, #4
  009b8	e0020391	 mul         r2, r1, r3
  009bc	e59d3038	 ldr         r3, [sp, #0x38]
  009c0	e0833002	 add         r3, r3, r2
  009c4	e5933000	 ldr         r3, [r3]
  009c8	e353005f	 cmp         r3, #0x5F
  009cc	9a000006	 bls         |$LN10@XllpGpioSe@4|

; 331  : 		{
; 332  : 			aMask3 |= aGpioPinMask;

  009d0	e59d2014	 ldr         r2, [sp, #0x14]
  009d4	e59d300c	 ldr         r3, [sp, #0xC]
  009d8	e1823003	 orr         r3, r2, r3
  009dc	e58d3014	 str         r3, [sp, #0x14]

; 333  : 			aSet3=XLLP_TRUE;

  009e0	e3a03001	 mov         r3, #1
  009e4	e58d3018	 str         r3, [sp, #0x18]
  009e8	ea000023	 b           |$LN9@XllpGpioSe@4|
  009ec		 |$LN10@XllpGpioSe@4|

; 334  : 		}
; 335  : 		else if(aGpioPinArray[i] > 63)

  009ec	e59d1008	 ldr         r1, [sp, #8]
  009f0	e3a03004	 mov         r3, #4
  009f4	e0020391	 mul         r2, r1, r3
  009f8	e59d3038	 ldr         r3, [sp, #0x38]
  009fc	e0833002	 add         r3, r3, r2
  00a00	e5933000	 ldr         r3, [r3]
  00a04	e353003f	 cmp         r3, #0x3F
  00a08	9a000006	 bls         |$LN8@XllpGpioSe@4|

; 336  : 		{
; 337  : 			aMask2 |= aGpioPinMask;

  00a0c	e59d2010	 ldr         r2, [sp, #0x10]
  00a10	e59d300c	 ldr         r3, [sp, #0xC]
  00a14	e1823003	 orr         r3, r2, r3
  00a18	e58d3010	 str         r3, [sp, #0x10]

; 338  : 			aSet2=XLLP_TRUE;

  00a1c	e3a03001	 mov         r3, #1
  00a20	e58d3000	 str         r3, [sp]
  00a24	ea000014	 b           |$LN7@XllpGpioSe@4|
  00a28		 |$LN8@XllpGpioSe@4|

; 339  : 		}
; 340  : 		else if(aGpioPinArray[i] > 31)

  00a28	e59d1008	 ldr         r1, [sp, #8]
  00a2c	e3a03004	 mov         r3, #4
  00a30	e0020391	 mul         r2, r1, r3
  00a34	e59d3038	 ldr         r3, [sp, #0x38]
  00a38	e0833002	 add         r3, r3, r2
  00a3c	e5933000	 ldr         r3, [r3]
  00a40	e353001f	 cmp         r3, #0x1F
  00a44	9a000006	 bls         |$LN6@XllpGpioSe@4|

; 341  : 		{
; 342  : 			aMask1 |= aGpioPinMask;

  00a48	e59d2004	 ldr         r2, [sp, #4]
  00a4c	e59d300c	 ldr         r3, [sp, #0xC]
  00a50	e1823003	 orr         r3, r2, r3
  00a54	e58d3004	 str         r3, [sp, #4]

; 343  : 			aSet1=XLLP_TRUE;

  00a58	e3a03001	 mov         r3, #1
  00a5c	e58d301c	 str         r3, [sp, #0x1C]

; 344  : 		}
; 345  : 		else

  00a60	ea000005	 b           |$LN5@XllpGpioSe@4|
  00a64		 |$LN6@XllpGpioSe@4|

; 346  : 		{
; 347  : 			aMask0 |= aGpioPinMask;

  00a64	e59d2020	 ldr         r2, [sp, #0x20]
  00a68	e59d300c	 ldr         r3, [sp, #0xC]
  00a6c	e1823003	 orr         r3, r2, r3
  00a70	e58d3020	 str         r3, [sp, #0x20]

; 348  : 			aSet0=XLLP_TRUE;

  00a74	e3a03001	 mov         r3, #1
  00a78	e58d3028	 str         r3, [sp, #0x28]
  00a7c		 |$LN5@XllpGpioSe@4|
  00a7c		 |$LN7@XllpGpioSe@4|
  00a7c		 |$LN9@XllpGpioSe@4|

; 349  : 		}
; 350  : 	}

  00a7c	eaffffba	 b           |$LN12@XllpGpioSe@4|
  00a80		 |$LN11@XllpGpioSe@4|

; 351  : 	if(aSet3)

  00a80	e59d3018	 ldr         r3, [sp, #0x18]
  00a84	e3530000	 cmp         r3, #0
  00a88	0a000003	 beq         |$LN4@XllpGpioSe@4|

; 352  : 		pGPIO->GPCR3=aMask3;

  00a8c	e59d3034	 ldr         r3, [sp, #0x34]
  00a90	e2832f49	 add         r2, r3, #0x49, 30
  00a94	e59d3014	 ldr         r3, [sp, #0x14]
  00a98	e5823000	 str         r3, [r2]
  00a9c		 |$LN4@XllpGpioSe@4|

; 353  : 	if(aSet2)

  00a9c	e59d3000	 ldr         r3, [sp]
  00aa0	e3530000	 cmp         r3, #0
  00aa4	0a000003	 beq         |$LN3@XllpGpioSe@4|

; 354  : 		pGPIO->GPCR2=aMask2;

  00aa8	e59d3034	 ldr         r3, [sp, #0x34]
  00aac	e283202c	 add         r2, r3, #0x2C
  00ab0	e59d3010	 ldr         r3, [sp, #0x10]
  00ab4	e5823000	 str         r3, [r2]
  00ab8		 |$LN3@XllpGpioSe@4|

; 355  : 	if(aSet1)

  00ab8	e59d301c	 ldr         r3, [sp, #0x1C]
  00abc	e3530000	 cmp         r3, #0
  00ac0	0a000003	 beq         |$LN2@XllpGpioSe@4|

; 356  : 		pGPIO->GPCR1=aMask1;

  00ac4	e59d3034	 ldr         r3, [sp, #0x34]
  00ac8	e2832028	 add         r2, r3, #0x28
  00acc	e59d3004	 ldr         r3, [sp, #4]
  00ad0	e5823000	 str         r3, [r2]
  00ad4		 |$LN2@XllpGpioSe@4|

; 357  : 	if(aSet0)

  00ad4	e59d3028	 ldr         r3, [sp, #0x28]
  00ad8	e3530000	 cmp         r3, #0
  00adc	0a000003	 beq         |$LN1@XllpGpioSe@4|

; 358  : 		pGPIO->GPCR0=aMask0;

  00ae0	e59d3034	 ldr         r3, [sp, #0x34]
  00ae4	e2832024	 add         r2, r3, #0x24
  00ae8	e59d3020	 ldr         r3, [sp, #0x20]
  00aec	e5823000	 str         r3, [r2]
  00af0		 |$LN1@XllpGpioSe@4|

; 359  : 	}

  00af0	e28dd02c	 add         sp, sp, #0x2C
  00af4	e89d6000	 ldmia       sp, {sp, lr}
  00af8	e12fff1e	 bx          lr
  00afc		 |$M1143|

			 ENDP  ; |XllpGpioSetOutput0|

	EXPORT	|XllpGpioGetRisingDetectEnable|

  00030			 AREA	 |.pdata|, PDATA
|$T1151| DCD	|$LN11@XllpGpioGe@3|
	DCD	0x40003404
; Function compile flags: /Odtp

  00afc			 AREA	 |.text|, CODE, ARM

  00afc		 |XllpGpioGetRisingDetectEnable| PROC

; 370  : 	{

  00afc		 |$LN11@XllpGpioGe@3|
  00afc	e1a0c00d	 mov         r12, sp
  00b00	e92d0003	 stmdb       sp!, {r0, r1}
  00b04	e92d5000	 stmdb       sp!, {r12, lr}
  00b08	e24dd008	 sub         sp, sp, #8
  00b0c		 |$M1148|

; 371  : 	
; 372  : 	XLLP_UINT32_T aGpioPinMask;
; 373  : 
; 374  : 	aGpioPinMask = 0x1 << (aGpioPin & 0x1F);

  00b0c	e59d3014	 ldr         r3, [sp, #0x14]
  00b10	e203201f	 and         r2, r3, #0x1F
  00b14	e3a03001	 mov         r3, #1
  00b18	e1a03213	 mov         r3, r3, lsl r2
  00b1c	e58d3000	 str         r3, [sp]

; 375  : 
; 376  : 	if(aGpioPin > 95)

  00b20	e59d3014	 ldr         r3, [sp, #0x14]
  00b24	e353005f	 cmp         r3, #0x5F
  00b28	9a000007	 bls         |$LN6@XllpGpioGe@3|

; 377  : 		return (pGPIO->GRER3& aGpioPinMask);

  00b2c	e59d3010	 ldr         r3, [sp, #0x10]
  00b30	e2833e13	 add         r3, r3, #0x13, 28
  00b34	e5932000	 ldr         r2, [r3]
  00b38	e59d3000	 ldr         r3, [sp]
  00b3c	e0023003	 and         r3, r2, r3
  00b40	e58d3004	 str         r3, [sp, #4]
  00b44	ea00001c	 b           |$LN7@XllpGpioGe@3|
  00b48	ea00001b	 b           |$LN5@XllpGpioGe@3|
  00b4c		 |$LN6@XllpGpioGe@3|

; 378  : 	else if(aGpioPin > 63) 

  00b4c	e59d3014	 ldr         r3, [sp, #0x14]
  00b50	e353003f	 cmp         r3, #0x3F
  00b54	9a000007	 bls         |$LN4@XllpGpioGe@3|

; 379  : 		return (pGPIO->GRER2 & aGpioPinMask);

  00b58	e59d3010	 ldr         r3, [sp, #0x10]
  00b5c	e2833038	 add         r3, r3, #0x38
  00b60	e5932000	 ldr         r2, [r3]
  00b64	e59d3000	 ldr         r3, [sp]
  00b68	e0023003	 and         r3, r2, r3
  00b6c	e58d3004	 str         r3, [sp, #4]
  00b70	ea000011	 b           |$LN7@XllpGpioGe@3|
  00b74	ea000010	 b           |$LN3@XllpGpioGe@3|
  00b78		 |$LN4@XllpGpioGe@3|

; 380  : 	else if(aGpioPin > 31) 

  00b78	e59d3014	 ldr         r3, [sp, #0x14]
  00b7c	e353001f	 cmp         r3, #0x1F
  00b80	9a000007	 bls         |$LN2@XllpGpioGe@3|

; 381  : 		return (pGPIO->GRER1 & aGpioPinMask);

  00b84	e59d3010	 ldr         r3, [sp, #0x10]
  00b88	e2833034	 add         r3, r3, #0x34
  00b8c	e5932000	 ldr         r2, [r3]
  00b90	e59d3000	 ldr         r3, [sp]
  00b94	e0023003	 and         r3, r2, r3
  00b98	e58d3004	 str         r3, [sp, #4]
  00b9c	ea000006	 b           |$LN7@XllpGpioGe@3|
  00ba0	ea000005	 b           |$LN1@XllpGpioGe@3|
  00ba4		 |$LN2@XllpGpioGe@3|

; 382  : 	else return (pGPIO->GRER0 & aGpioPinMask);

  00ba4	e59d3010	 ldr         r3, [sp, #0x10]
  00ba8	e2833030	 add         r3, r3, #0x30
  00bac	e5932000	 ldr         r2, [r3]
  00bb0	e59d3000	 ldr         r3, [sp]
  00bb4	e0023003	 and         r3, r2, r3
  00bb8	e58d3004	 str         r3, [sp, #4]
  00bbc		 |$LN1@XllpGpioGe@3|
  00bbc		 |$LN3@XllpGpioGe@3|
  00bbc		 |$LN5@XllpGpioGe@3|
  00bbc		 |$LN7@XllpGpioGe@3|

; 383  : 	}

  00bbc	e59d0004	 ldr         r0, [sp, #4]
  00bc0	e28dd008	 add         sp, sp, #8
  00bc4	e89d6000	 ldmia       sp, {sp, lr}
  00bc8	e12fff1e	 bx          lr
  00bcc		 |$M1149|

			 ENDP  ; |XllpGpioGetRisingDetectEnable|

	EXPORT	|XllpGpioSetRisingDetectDisable|

  00038			 AREA	 |.pdata|, PDATA
|$T1156| DCD	|$LN18@XllpGpioSe@5|
	DCD	0x4000b004
; Function compile flags: /Odtp

  00bcc			 AREA	 |.text|, CODE, ARM

  00bcc		 |XllpGpioSetRisingDetectDisable| PROC

; 392  : 	{

  00bcc		 |$LN18@XllpGpioSe@5|
  00bcc	e1a0c00d	 mov         r12, sp
  00bd0	e92d0003	 stmdb       sp!, {r0, r1}
  00bd4	e92d5000	 stmdb       sp!, {r12, lr}
  00bd8	e24dd040	 sub         sp, sp, #0x40
  00bdc		 |$M1153|

; 393  : 	XLLP_UINT32_T LockID;
; 394  : 	XLLP_UINT32_T aGpioPinMask;
; 395  : 	XLLP_UINT32_T aSizeArray;
; 396  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 397  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 398  : 	XLLP_UINT32_T i;
; 399  : 
; 400  : 	//determine size of array
; 401  : 	aSizeArray = aGpioPinArray[0];

  00bdc	e59d304c	 ldr         r3, [sp, #0x4C]
  00be0	e5933000	 ldr         r3, [r3]
  00be4	e58d3028	 str         r3, [sp, #0x28]

; 402  : 	aMask0=aMask1=aMask2=aMask3=0;

  00be8	e3a03000	 mov         r3, #0
  00bec	e58d3014	 str         r3, [sp, #0x14]
  00bf0	e59d3014	 ldr         r3, [sp, #0x14]
  00bf4	e58d3010	 str         r3, [sp, #0x10]
  00bf8	e59d3010	 ldr         r3, [sp, #0x10]
  00bfc	e58d3004	 str         r3, [sp, #4]
  00c00	e59d3004	 ldr         r3, [sp, #4]
  00c04	e58d3024	 str         r3, [sp, #0x24]

; 403  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  00c08	e3a03000	 mov         r3, #0
  00c0c	e58d301c	 str         r3, [sp, #0x1C]
  00c10	e59d301c	 ldr         r3, [sp, #0x1C]
  00c14	e58d3000	 str         r3, [sp]
  00c18	e59d3000	 ldr         r3, [sp]
  00c1c	e58d3020	 str         r3, [sp, #0x20]
  00c20	e59d3020	 ldr         r3, [sp, #0x20]
  00c24	e58d302c	 str         r3, [sp, #0x2C]

; 404  : 
; 405  : 	for(i=1; i<=aSizeArray; i++)

  00c28	e3a03001	 mov         r3, #1
  00c2c	e58d3008	 str         r3, [sp, #8]
  00c30	ea000002	 b           |$LN13@XllpGpioSe@5|
  00c34		 |$LN12@XllpGpioSe@5|
  00c34	e59d3008	 ldr         r3, [sp, #8]
  00c38	e2833001	 add         r3, r3, #1
  00c3c	e58d3008	 str         r3, [sp, #8]
  00c40		 |$LN13@XllpGpioSe@5|
  00c40	e59d2008	 ldr         r2, [sp, #8]
  00c44	e59d3028	 ldr         r3, [sp, #0x28]
  00c48	e1520003	 cmp         r2, r3
  00c4c	8a00003d	 bhi         |$LN11@XllpGpioSe@5|

; 406  : 	{
; 407  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  00c50	e59d1008	 ldr         r1, [sp, #8]
  00c54	e3a03004	 mov         r3, #4
  00c58	e0020391	 mul         r2, r1, r3
  00c5c	e59d304c	 ldr         r3, [sp, #0x4C]
  00c60	e0833002	 add         r3, r3, r2
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e203201f	 and         r2, r3, #0x1F
  00c6c	e3a03001	 mov         r3, #1
  00c70	e1a03213	 mov         r3, r3, lsl r2
  00c74	e58d300c	 str         r3, [sp, #0xC]

; 408  : 		if(aGpioPinArray[i] > 95)

  00c78	e59d1008	 ldr         r1, [sp, #8]
  00c7c	e3a03004	 mov         r3, #4
  00c80	e0020391	 mul         r2, r1, r3
  00c84	e59d304c	 ldr         r3, [sp, #0x4C]
  00c88	e0833002	 add         r3, r3, r2
  00c8c	e5933000	 ldr         r3, [r3]
  00c90	e353005f	 cmp         r3, #0x5F
  00c94	9a000006	 bls         |$LN10@XllpGpioSe@5|

; 409  : 		{
; 410  : 			aMask3 |= aGpioPinMask;

  00c98	e59d2014	 ldr         r2, [sp, #0x14]
  00c9c	e59d300c	 ldr         r3, [sp, #0xC]
  00ca0	e1823003	 orr         r3, r2, r3
  00ca4	e58d3014	 str         r3, [sp, #0x14]

; 411  : 			aSet3=XLLP_TRUE;

  00ca8	e3a03001	 mov         r3, #1
  00cac	e58d301c	 str         r3, [sp, #0x1C]
  00cb0	ea000023	 b           |$LN9@XllpGpioSe@5|
  00cb4		 |$LN10@XllpGpioSe@5|

; 412  : 		}
; 413  : 		else if(aGpioPinArray[i] > 63)

  00cb4	e59d1008	 ldr         r1, [sp, #8]
  00cb8	e3a03004	 mov         r3, #4
  00cbc	e0020391	 mul         r2, r1, r3
  00cc0	e59d304c	 ldr         r3, [sp, #0x4C]
  00cc4	e0833002	 add         r3, r3, r2
  00cc8	e5933000	 ldr         r3, [r3]
  00ccc	e353003f	 cmp         r3, #0x3F
  00cd0	9a000006	 bls         |$LN8@XllpGpioSe@5|

; 414  : 		{
; 415  : 			aMask2 |= aGpioPinMask;

  00cd4	e59d2010	 ldr         r2, [sp, #0x10]
  00cd8	e59d300c	 ldr         r3, [sp, #0xC]
  00cdc	e1823003	 orr         r3, r2, r3
  00ce0	e58d3010	 str         r3, [sp, #0x10]

; 416  : 			aSet2=XLLP_TRUE;

  00ce4	e3a03001	 mov         r3, #1
  00ce8	e58d3000	 str         r3, [sp]
  00cec	ea000014	 b           |$LN7@XllpGpioSe@5|
  00cf0		 |$LN8@XllpGpioSe@5|

; 417  : 		}
; 418  : 		else if(aGpioPinArray[i] > 31)

  00cf0	e59d1008	 ldr         r1, [sp, #8]
  00cf4	e3a03004	 mov         r3, #4
  00cf8	e0020391	 mul         r2, r1, r3
  00cfc	e59d304c	 ldr         r3, [sp, #0x4C]
  00d00	e0833002	 add         r3, r3, r2
  00d04	e5933000	 ldr         r3, [r3]
  00d08	e353001f	 cmp         r3, #0x1F
  00d0c	9a000006	 bls         |$LN6@XllpGpioSe@5|

; 419  : 		{
; 420  : 			aMask1 |= aGpioPinMask;

  00d10	e59d2004	 ldr         r2, [sp, #4]
  00d14	e59d300c	 ldr         r3, [sp, #0xC]
  00d18	e1823003	 orr         r3, r2, r3
  00d1c	e58d3004	 str         r3, [sp, #4]

; 421  : 			aSet1=XLLP_TRUE;

  00d20	e3a03001	 mov         r3, #1
  00d24	e58d3020	 str         r3, [sp, #0x20]

; 422  : 		}
; 423  : 		else

  00d28	ea000005	 b           |$LN5@XllpGpioSe@5|
  00d2c		 |$LN6@XllpGpioSe@5|

; 424  : 		{
; 425  : 			aMask0 |= aGpioPinMask;

  00d2c	e59d2024	 ldr         r2, [sp, #0x24]
  00d30	e59d300c	 ldr         r3, [sp, #0xC]
  00d34	e1823003	 orr         r3, r2, r3
  00d38	e58d3024	 str         r3, [sp, #0x24]

; 426  : 			aSet0=XLLP_TRUE;

  00d3c	e3a03001	 mov         r3, #1
  00d40	e58d302c	 str         r3, [sp, #0x2C]
  00d44		 |$LN5@XllpGpioSe@5|
  00d44		 |$LN7@XllpGpioSe@5|
  00d44		 |$LN9@XllpGpioSe@5|

; 427  : 		}
; 428  : 	}

  00d44	eaffffba	 b           |$LN12@XllpGpioSe@5|
  00d48		 |$LN11@XllpGpioSe@5|

; 429  : 	if(aSet3)

  00d48	e59d301c	 ldr         r3, [sp, #0x1C]
  00d4c	e3530000	 cmp         r3, #0
  00d50	0a000011	 beq         |$LN4@XllpGpioSe@5|

; 430  : 	{
; 431  : 		LockID = XllpLock(GRER3);

  00d54	e3a00022	 mov         r0, #0x22
  00d58	eb000000	 bl          XllpLock
  00d5c	e58d0030	 str         r0, [sp, #0x30]
  00d60	e59d3030	 ldr         r3, [sp, #0x30]
  00d64	e58d3018	 str         r3, [sp, #0x18]

; 432  : 		pGPIO->GRER3=((pGPIO->GRER3&~aMask3)&~XLLP_GPIO_PIN_RESERVED_BITS);

  00d68	e59d3048	 ldr         r3, [sp, #0x48]
  00d6c	e2831e13	 add         r1, r3, #0x13, 28
  00d70	e59d3014	 ldr         r3, [sp, #0x14]
  00d74	e1e02003	 mvn         r2, r3
  00d78	e5913000	 ldr         r3, [r1]
  00d7c	e0032002	 and         r2, r3, r2
  00d80	e3e034fe	 mvn         r3, #0xFE, 8
  00d84	e0022003	 and         r2, r2, r3
  00d88	e59d3048	 ldr         r3, [sp, #0x48]
  00d8c	e2833e13	 add         r3, r3, #0x13, 28
  00d90	e5832000	 str         r2, [r3]

; 433  : 		XllpUnlock(LockID);

  00d94	e59d0018	 ldr         r0, [sp, #0x18]
  00d98	eb000000	 bl          XllpUnlock
  00d9c		 |$LN4@XllpGpioSe@5|

; 434  : 	}
; 435  : 	if(aSet2)

  00d9c	e59d3000	 ldr         r3, [sp]
  00da0	e3530000	 cmp         r3, #0
  00da4	0a00000f	 beq         |$LN3@XllpGpioSe@5|

; 436  : 	{
; 437  : 		LockID = XllpLock(GRER2);

  00da8	e3a0000f	 mov         r0, #0xF
  00dac	eb000000	 bl          XllpLock
  00db0	e58d0034	 str         r0, [sp, #0x34]
  00db4	e59d3034	 ldr         r3, [sp, #0x34]
  00db8	e58d3018	 str         r3, [sp, #0x18]

; 438  : 		pGPIO->GRER2=((pGPIO->GRER2)&~aMask2);

  00dbc	e59d3048	 ldr         r3, [sp, #0x48]
  00dc0	e2831038	 add         r1, r3, #0x38
  00dc4	e59d3010	 ldr         r3, [sp, #0x10]
  00dc8	e1e02003	 mvn         r2, r3
  00dcc	e5913000	 ldr         r3, [r1]
  00dd0	e0032002	 and         r2, r3, r2
  00dd4	e59d3048	 ldr         r3, [sp, #0x48]
  00dd8	e2833038	 add         r3, r3, #0x38
  00ddc	e5832000	 str         r2, [r3]

; 439  : 		XllpUnlock(LockID);

  00de0	e59d0018	 ldr         r0, [sp, #0x18]
  00de4	eb000000	 bl          XllpUnlock
  00de8		 |$LN3@XllpGpioSe@5|

; 440  : 	}
; 441  : 	if(aSet1)

  00de8	e59d3020	 ldr         r3, [sp, #0x20]
  00dec	e3530000	 cmp         r3, #0
  00df0	0a00000f	 beq         |$LN2@XllpGpioSe@5|

; 442  : 	{
; 443  : 		LockID = XllpLock(GRER1);

  00df4	e3a0000e	 mov         r0, #0xE
  00df8	eb000000	 bl          XllpLock
  00dfc	e58d0038	 str         r0, [sp, #0x38]
  00e00	e59d3038	 ldr         r3, [sp, #0x38]
  00e04	e58d3018	 str         r3, [sp, #0x18]

; 444  : 		pGPIO->GRER1=((pGPIO->GRER1)&~aMask1);

  00e08	e59d3048	 ldr         r3, [sp, #0x48]
  00e0c	e2831034	 add         r1, r3, #0x34
  00e10	e59d3004	 ldr         r3, [sp, #4]
  00e14	e1e02003	 mvn         r2, r3
  00e18	e5913000	 ldr         r3, [r1]
  00e1c	e0032002	 and         r2, r3, r2
  00e20	e59d3048	 ldr         r3, [sp, #0x48]
  00e24	e2833034	 add         r3, r3, #0x34
  00e28	e5832000	 str         r2, [r3]

; 445  : 		XllpUnlock(LockID);

  00e2c	e59d0018	 ldr         r0, [sp, #0x18]
  00e30	eb000000	 bl          XllpUnlock
  00e34		 |$LN2@XllpGpioSe@5|

; 446  : 	}
; 447  : 	if(aSet0)

  00e34	e59d302c	 ldr         r3, [sp, #0x2C]
  00e38	e3530000	 cmp         r3, #0
  00e3c	0a00000f	 beq         |$LN1@XllpGpioSe@5|

; 448  : 	{
; 449  : 		LockID = XllpLock(GRER0);

  00e40	e3a0000d	 mov         r0, #0xD
  00e44	eb000000	 bl          XllpLock
  00e48	e58d003c	 str         r0, [sp, #0x3C]
  00e4c	e59d303c	 ldr         r3, [sp, #0x3C]
  00e50	e58d3018	 str         r3, [sp, #0x18]

; 450  : 		pGPIO->GRER0=((pGPIO->GRER0)&~aMask0);

  00e54	e59d3048	 ldr         r3, [sp, #0x48]
  00e58	e2831030	 add         r1, r3, #0x30
  00e5c	e59d3024	 ldr         r3, [sp, #0x24]
  00e60	e1e02003	 mvn         r2, r3
  00e64	e5913000	 ldr         r3, [r1]
  00e68	e0032002	 and         r2, r3, r2
  00e6c	e59d3048	 ldr         r3, [sp, #0x48]
  00e70	e2833030	 add         r3, r3, #0x30
  00e74	e5832000	 str         r2, [r3]

; 451  : 		XllpUnlock(LockID);

  00e78	e59d0018	 ldr         r0, [sp, #0x18]
  00e7c	eb000000	 bl          XllpUnlock
  00e80		 |$LN1@XllpGpioSe@5|

; 452  : 	}
; 453  : 	}

  00e80	e28dd040	 add         sp, sp, #0x40
  00e84	e89d6000	 ldmia       sp, {sp, lr}
  00e88	e12fff1e	 bx          lr
  00e8c		 |$M1154|

			 ENDP  ; |XllpGpioSetRisingDetectDisable|

	EXPORT	|XllpGpioSetRisingDetectEnable|

  00040			 AREA	 |.pdata|, PDATA
|$T1161| DCD	|$LN18@XllpGpioSe@6|
	DCD	0x4000ac04
; Function compile flags: /Odtp

  00e8c			 AREA	 |.text|, CODE, ARM

  00e8c		 |XllpGpioSetRisingDetectEnable| PROC

; 462  : 	{

  00e8c		 |$LN18@XllpGpioSe@6|
  00e8c	e1a0c00d	 mov         r12, sp
  00e90	e92d0003	 stmdb       sp!, {r0, r1}
  00e94	e92d5000	 stmdb       sp!, {r12, lr}
  00e98	e24dd040	 sub         sp, sp, #0x40
  00e9c		 |$M1158|

; 463  : 	XLLP_UINT32_T LockID;
; 464  : 	XLLP_UINT32_T aGpioPinMask;
; 465  : 	XLLP_UINT32_T aSizeArray;
; 466  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 467  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 468  : 	XLLP_UINT32_T i;
; 469  : 
; 470  : 	//determine size of array
; 471  : 	aSizeArray = aGpioPinArray[0];

  00e9c	e59d304c	 ldr         r3, [sp, #0x4C]
  00ea0	e5933000	 ldr         r3, [r3]
  00ea4	e58d3028	 str         r3, [sp, #0x28]

; 472  : 	aMask0=aMask1=aMask2=aMask3=0;

  00ea8	e3a03000	 mov         r3, #0
  00eac	e58d3014	 str         r3, [sp, #0x14]
  00eb0	e59d3014	 ldr         r3, [sp, #0x14]
  00eb4	e58d3010	 str         r3, [sp, #0x10]
  00eb8	e59d3010	 ldr         r3, [sp, #0x10]
  00ebc	e58d3004	 str         r3, [sp, #4]
  00ec0	e59d3004	 ldr         r3, [sp, #4]
  00ec4	e58d3024	 str         r3, [sp, #0x24]

; 473  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  00ec8	e3a03000	 mov         r3, #0
  00ecc	e58d301c	 str         r3, [sp, #0x1C]
  00ed0	e59d301c	 ldr         r3, [sp, #0x1C]
  00ed4	e58d3000	 str         r3, [sp]
  00ed8	e59d3000	 ldr         r3, [sp]
  00edc	e58d3020	 str         r3, [sp, #0x20]
  00ee0	e59d3020	 ldr         r3, [sp, #0x20]
  00ee4	e58d302c	 str         r3, [sp, #0x2C]

; 474  : 
; 475  : 	for(i=1; i<=aSizeArray; i++)

  00ee8	e3a03001	 mov         r3, #1
  00eec	e58d3008	 str         r3, [sp, #8]
  00ef0	ea000002	 b           |$LN13@XllpGpioSe@6|
  00ef4		 |$LN12@XllpGpioSe@6|
  00ef4	e59d3008	 ldr         r3, [sp, #8]
  00ef8	e2833001	 add         r3, r3, #1
  00efc	e58d3008	 str         r3, [sp, #8]
  00f00		 |$LN13@XllpGpioSe@6|
  00f00	e59d2008	 ldr         r2, [sp, #8]
  00f04	e59d3028	 ldr         r3, [sp, #0x28]
  00f08	e1520003	 cmp         r2, r3
  00f0c	8a00003d	 bhi         |$LN11@XllpGpioSe@6|

; 476  : 	{
; 477  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  00f10	e59d1008	 ldr         r1, [sp, #8]
  00f14	e3a03004	 mov         r3, #4
  00f18	e0020391	 mul         r2, r1, r3
  00f1c	e59d304c	 ldr         r3, [sp, #0x4C]
  00f20	e0833002	 add         r3, r3, r2
  00f24	e5933000	 ldr         r3, [r3]
  00f28	e203201f	 and         r2, r3, #0x1F
  00f2c	e3a03001	 mov         r3, #1
  00f30	e1a03213	 mov         r3, r3, lsl r2
  00f34	e58d300c	 str         r3, [sp, #0xC]

; 478  : 		if(aGpioPinArray[i] > 95)

  00f38	e59d1008	 ldr         r1, [sp, #8]
  00f3c	e3a03004	 mov         r3, #4
  00f40	e0020391	 mul         r2, r1, r3
  00f44	e59d304c	 ldr         r3, [sp, #0x4C]
  00f48	e0833002	 add         r3, r3, r2
  00f4c	e5933000	 ldr         r3, [r3]
  00f50	e353005f	 cmp         r3, #0x5F
  00f54	9a000006	 bls         |$LN10@XllpGpioSe@6|

; 479  : 		{
; 480  : 			aMask3 |= aGpioPinMask;

  00f58	e59d2014	 ldr         r2, [sp, #0x14]
  00f5c	e59d300c	 ldr         r3, [sp, #0xC]
  00f60	e1823003	 orr         r3, r2, r3
  00f64	e58d3014	 str         r3, [sp, #0x14]

; 481  : 			aSet3=XLLP_TRUE;

  00f68	e3a03001	 mov         r3, #1
  00f6c	e58d301c	 str         r3, [sp, #0x1C]
  00f70	ea000023	 b           |$LN9@XllpGpioSe@6|
  00f74		 |$LN10@XllpGpioSe@6|

; 482  : 		}
; 483  : 		else if(aGpioPinArray[i] > 63)

  00f74	e59d1008	 ldr         r1, [sp, #8]
  00f78	e3a03004	 mov         r3, #4
  00f7c	e0020391	 mul         r2, r1, r3
  00f80	e59d304c	 ldr         r3, [sp, #0x4C]
  00f84	e0833002	 add         r3, r3, r2
  00f88	e5933000	 ldr         r3, [r3]
  00f8c	e353003f	 cmp         r3, #0x3F
  00f90	9a000006	 bls         |$LN8@XllpGpioSe@6|

; 484  : 		{
; 485  : 			aMask2 |= aGpioPinMask;

  00f94	e59d2010	 ldr         r2, [sp, #0x10]
  00f98	e59d300c	 ldr         r3, [sp, #0xC]
  00f9c	e1823003	 orr         r3, r2, r3
  00fa0	e58d3010	 str         r3, [sp, #0x10]

; 486  : 			aSet2=XLLP_TRUE;

  00fa4	e3a03001	 mov         r3, #1
  00fa8	e58d3000	 str         r3, [sp]
  00fac	ea000014	 b           |$LN7@XllpGpioSe@6|
  00fb0		 |$LN8@XllpGpioSe@6|

; 487  : 		}
; 488  : 		else if(aGpioPinArray[i] > 31)

  00fb0	e59d1008	 ldr         r1, [sp, #8]
  00fb4	e3a03004	 mov         r3, #4
  00fb8	e0020391	 mul         r2, r1, r3
  00fbc	e59d304c	 ldr         r3, [sp, #0x4C]
  00fc0	e0833002	 add         r3, r3, r2
  00fc4	e5933000	 ldr         r3, [r3]
  00fc8	e353001f	 cmp         r3, #0x1F
  00fcc	9a000006	 bls         |$LN6@XllpGpioSe@6|

; 489  : 		{
; 490  : 			aMask1 |= aGpioPinMask;

  00fd0	e59d2004	 ldr         r2, [sp, #4]
  00fd4	e59d300c	 ldr         r3, [sp, #0xC]
  00fd8	e1823003	 orr         r3, r2, r3
  00fdc	e58d3004	 str         r3, [sp, #4]

; 491  : 			aSet1=XLLP_TRUE;

  00fe0	e3a03001	 mov         r3, #1
  00fe4	e58d3020	 str         r3, [sp, #0x20]

; 492  : 		}
; 493  : 		else

  00fe8	ea000005	 b           |$LN5@XllpGpioSe@6|
  00fec		 |$LN6@XllpGpioSe@6|

; 494  : 		{
; 495  : 			aMask0 |= aGpioPinMask;

  00fec	e59d2024	 ldr         r2, [sp, #0x24]
  00ff0	e59d300c	 ldr         r3, [sp, #0xC]
  00ff4	e1823003	 orr         r3, r2, r3
  00ff8	e58d3024	 str         r3, [sp, #0x24]

; 496  : 			aSet0=XLLP_TRUE;

  00ffc	e3a03001	 mov         r3, #1
  01000	e58d302c	 str         r3, [sp, #0x2C]
  01004		 |$LN5@XllpGpioSe@6|
  01004		 |$LN7@XllpGpioSe@6|
  01004		 |$LN9@XllpGpioSe@6|

; 497  : 		}
; 498  : 	}

  01004	eaffffba	 b           |$LN12@XllpGpioSe@6|
  01008		 |$LN11@XllpGpioSe@6|

; 499  : 	if(aSet3)

  01008	e59d301c	 ldr         r3, [sp, #0x1C]
  0100c	e3530000	 cmp         r3, #0
  01010	0a000010	 beq         |$LN4@XllpGpioSe@6|

; 500  : 	{
; 501  : 		LockID = XllpLock(GRER3);

  01014	e3a00022	 mov         r0, #0x22
  01018	eb000000	 bl          XllpLock
  0101c	e58d0030	 str         r0, [sp, #0x30]
  01020	e59d3030	 ldr         r3, [sp, #0x30]
  01024	e58d3018	 str         r3, [sp, #0x18]

; 502  : 		pGPIO->GRER3=((pGPIO->GRER3|aMask3)&~XLLP_GPIO_PIN_RESERVED_BITS);

  01028	e59d3048	 ldr         r3, [sp, #0x48]
  0102c	e2833e13	 add         r3, r3, #0x13, 28
  01030	e5932000	 ldr         r2, [r3]
  01034	e59d3014	 ldr         r3, [sp, #0x14]
  01038	e1822003	 orr         r2, r2, r3
  0103c	e3e034fe	 mvn         r3, #0xFE, 8
  01040	e0022003	 and         r2, r2, r3
  01044	e59d3048	 ldr         r3, [sp, #0x48]
  01048	e2833e13	 add         r3, r3, #0x13, 28
  0104c	e5832000	 str         r2, [r3]

; 503  : 		XllpUnlock(LockID);

  01050	e59d0018	 ldr         r0, [sp, #0x18]
  01054	eb000000	 bl          XllpUnlock
  01058		 |$LN4@XllpGpioSe@6|

; 504  : 	}
; 505  : 	if(aSet2)

  01058	e59d3000	 ldr         r3, [sp]
  0105c	e3530000	 cmp         r3, #0
  01060	0a00000e	 beq         |$LN3@XllpGpioSe@6|

; 506  : 	{
; 507  : 		LockID = XllpLock(GRER2);

  01064	e3a0000f	 mov         r0, #0xF
  01068	eb000000	 bl          XllpLock
  0106c	e58d0034	 str         r0, [sp, #0x34]
  01070	e59d3034	 ldr         r3, [sp, #0x34]
  01074	e58d3018	 str         r3, [sp, #0x18]

; 508  : 		pGPIO->GRER2=((pGPIO->GRER2)|aMask2);

  01078	e59d3048	 ldr         r3, [sp, #0x48]
  0107c	e2833038	 add         r3, r3, #0x38
  01080	e5932000	 ldr         r2, [r3]
  01084	e59d3010	 ldr         r3, [sp, #0x10]
  01088	e1822003	 orr         r2, r2, r3
  0108c	e59d3048	 ldr         r3, [sp, #0x48]
  01090	e2833038	 add         r3, r3, #0x38
  01094	e5832000	 str         r2, [r3]

; 509  : 		XllpUnlock(LockID);

  01098	e59d0018	 ldr         r0, [sp, #0x18]
  0109c	eb000000	 bl          XllpUnlock
  010a0		 |$LN3@XllpGpioSe@6|

; 510  : 	}
; 511  : 	if(aSet1)

  010a0	e59d3020	 ldr         r3, [sp, #0x20]
  010a4	e3530000	 cmp         r3, #0
  010a8	0a00000e	 beq         |$LN2@XllpGpioSe@6|

; 512  : 	{
; 513  : 		LockID = XllpLock(GRER1);

  010ac	e3a0000e	 mov         r0, #0xE
  010b0	eb000000	 bl          XllpLock
  010b4	e58d0038	 str         r0, [sp, #0x38]
  010b8	e59d3038	 ldr         r3, [sp, #0x38]
  010bc	e58d3018	 str         r3, [sp, #0x18]

; 514  : 		pGPIO->GRER1=((pGPIO->GRER1)|aMask1);

  010c0	e59d3048	 ldr         r3, [sp, #0x48]
  010c4	e2833034	 add         r3, r3, #0x34
  010c8	e5932000	 ldr         r2, [r3]
  010cc	e59d3004	 ldr         r3, [sp, #4]
  010d0	e1822003	 orr         r2, r2, r3
  010d4	e59d3048	 ldr         r3, [sp, #0x48]
  010d8	e2833034	 add         r3, r3, #0x34
  010dc	e5832000	 str         r2, [r3]

; 515  : 		XllpUnlock(LockID);

  010e0	e59d0018	 ldr         r0, [sp, #0x18]
  010e4	eb000000	 bl          XllpUnlock
  010e8		 |$LN2@XllpGpioSe@6|

; 516  : 	}
; 517  : 	if(aSet0)

  010e8	e59d302c	 ldr         r3, [sp, #0x2C]
  010ec	e3530000	 cmp         r3, #0
  010f0	0a00000e	 beq         |$LN1@XllpGpioSe@6|

; 518  : 	{
; 519  : 		LockID = XllpLock(GRER0);

  010f4	e3a0000d	 mov         r0, #0xD
  010f8	eb000000	 bl          XllpLock
  010fc	e58d003c	 str         r0, [sp, #0x3C]
  01100	e59d303c	 ldr         r3, [sp, #0x3C]
  01104	e58d3018	 str         r3, [sp, #0x18]

; 520  : 		pGPIO->GRER0=((pGPIO->GRER0)|aMask0);

  01108	e59d3048	 ldr         r3, [sp, #0x48]
  0110c	e2833030	 add         r3, r3, #0x30
  01110	e5932000	 ldr         r2, [r3]
  01114	e59d3024	 ldr         r3, [sp, #0x24]
  01118	e1822003	 orr         r2, r2, r3
  0111c	e59d3048	 ldr         r3, [sp, #0x48]
  01120	e2833030	 add         r3, r3, #0x30
  01124	e5832000	 str         r2, [r3]

; 521  : 		XllpUnlock(LockID);

  01128	e59d0018	 ldr         r0, [sp, #0x18]
  0112c	eb000000	 bl          XllpUnlock
  01130		 |$LN1@XllpGpioSe@6|

; 522  : 	}
; 523  : 	}

  01130	e28dd040	 add         sp, sp, #0x40
  01134	e89d6000	 ldmia       sp, {sp, lr}
  01138	e12fff1e	 bx          lr
  0113c		 |$M1159|

			 ENDP  ; |XllpGpioSetRisingDetectEnable|

	EXPORT	|XllpGpioGetFallingDetectEnable|

  00048			 AREA	 |.pdata|, PDATA
|$T1167| DCD	|$LN11@XllpGpioGe@4|
	DCD	0x40003404
; Function compile flags: /Odtp

  0113c			 AREA	 |.text|, CODE, ARM

  0113c		 |XllpGpioGetFallingDetectEnable| PROC

; 534  : 	{

  0113c		 |$LN11@XllpGpioGe@4|
  0113c	e1a0c00d	 mov         r12, sp
  01140	e92d0003	 stmdb       sp!, {r0, r1}
  01144	e92d5000	 stmdb       sp!, {r12, lr}
  01148	e24dd008	 sub         sp, sp, #8
  0114c		 |$M1164|

; 535  : 	XLLP_UINT32_T aGpioPinMask;
; 536  : 
; 537  : 	aGpioPinMask = 0x1 << (aGpioPin & 0x1F);

  0114c	e59d3014	 ldr         r3, [sp, #0x14]
  01150	e203201f	 and         r2, r3, #0x1F
  01154	e3a03001	 mov         r3, #1
  01158	e1a03213	 mov         r3, r3, lsl r2
  0115c	e58d3000	 str         r3, [sp]

; 538  : 
; 539  : 	if(aGpioPin > 95)

  01160	e59d3014	 ldr         r3, [sp, #0x14]
  01164	e353005f	 cmp         r3, #0x5F
  01168	9a000007	 bls         |$LN6@XllpGpioGe@4|

; 540  : 		return (pGPIO->GFER3 & aGpioPinMask);

  0116c	e59d3010	 ldr         r3, [sp, #0x10]
  01170	e2833f4f	 add         r3, r3, #0x4F, 30
  01174	e5932000	 ldr         r2, [r3]
  01178	e59d3000	 ldr         r3, [sp]
  0117c	e0023003	 and         r3, r2, r3
  01180	e58d3004	 str         r3, [sp, #4]
  01184	ea00001c	 b           |$LN7@XllpGpioGe@4|
  01188	ea00001b	 b           |$LN5@XllpGpioGe@4|
  0118c		 |$LN6@XllpGpioGe@4|

; 541  : 	else if(aGpioPin > 63) 

  0118c	e59d3014	 ldr         r3, [sp, #0x14]
  01190	e353003f	 cmp         r3, #0x3F
  01194	9a000007	 bls         |$LN4@XllpGpioGe@4|

; 542  : 		return (pGPIO->GFER2 & aGpioPinMask);

  01198	e59d3010	 ldr         r3, [sp, #0x10]
  0119c	e2833044	 add         r3, r3, #0x44
  011a0	e5932000	 ldr         r2, [r3]
  011a4	e59d3000	 ldr         r3, [sp]
  011a8	e0023003	 and         r3, r2, r3
  011ac	e58d3004	 str         r3, [sp, #4]
  011b0	ea000011	 b           |$LN7@XllpGpioGe@4|
  011b4	ea000010	 b           |$LN3@XllpGpioGe@4|
  011b8		 |$LN4@XllpGpioGe@4|

; 543  : 	else if(aGpioPin > 31) 

  011b8	e59d3014	 ldr         r3, [sp, #0x14]
  011bc	e353001f	 cmp         r3, #0x1F
  011c0	9a000007	 bls         |$LN2@XllpGpioGe@4|

; 544  : 		return (pGPIO->GFER1 & aGpioPinMask);

  011c4	e59d3010	 ldr         r3, [sp, #0x10]
  011c8	e2833040	 add         r3, r3, #0x40
  011cc	e5932000	 ldr         r2, [r3]
  011d0	e59d3000	 ldr         r3, [sp]
  011d4	e0023003	 and         r3, r2, r3
  011d8	e58d3004	 str         r3, [sp, #4]
  011dc	ea000006	 b           |$LN7@XllpGpioGe@4|
  011e0	ea000005	 b           |$LN1@XllpGpioGe@4|
  011e4		 |$LN2@XllpGpioGe@4|

; 545  : 	else return (pGPIO->GFER0 & aGpioPinMask);

  011e4	e59d3010	 ldr         r3, [sp, #0x10]
  011e8	e283303c	 add         r3, r3, #0x3C
  011ec	e5932000	 ldr         r2, [r3]
  011f0	e59d3000	 ldr         r3, [sp]
  011f4	e0023003	 and         r3, r2, r3
  011f8	e58d3004	 str         r3, [sp, #4]
  011fc		 |$LN1@XllpGpioGe@4|
  011fc		 |$LN3@XllpGpioGe@4|
  011fc		 |$LN5@XllpGpioGe@4|
  011fc		 |$LN7@XllpGpioGe@4|

; 546  : 	}

  011fc	e59d0004	 ldr         r0, [sp, #4]
  01200	e28dd008	 add         sp, sp, #8
  01204	e89d6000	 ldmia       sp, {sp, lr}
  01208	e12fff1e	 bx          lr
  0120c		 |$M1165|

			 ENDP  ; |XllpGpioGetFallingDetectEnable|

	EXPORT	|XllpGpioSetFallingEdgeDetectDisable|

  00050			 AREA	 |.pdata|, PDATA
|$T1172| DCD	|$LN18@XllpGpioSe@7|
	DCD	0x4000b004
; Function compile flags: /Odtp

  0120c			 AREA	 |.text|, CODE, ARM

  0120c		 |XllpGpioSetFallingEdgeDetectDisable| PROC

; 555  : 	{

  0120c		 |$LN18@XllpGpioSe@7|
  0120c	e1a0c00d	 mov         r12, sp
  01210	e92d0003	 stmdb       sp!, {r0, r1}
  01214	e92d5000	 stmdb       sp!, {r12, lr}
  01218	e24dd040	 sub         sp, sp, #0x40
  0121c		 |$M1169|

; 556  : 	XLLP_UINT32_T LockID;
; 557  : 	XLLP_UINT32_T aGpioPinMask;
; 558  : 	XLLP_UINT32_T aSizeArray;
; 559  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 560  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 561  : 	XLLP_UINT32_T i;
; 562  : 
; 563  : 	//determine size of array
; 564  : 	aSizeArray = aGpioPinArray[0];

  0121c	e59d304c	 ldr         r3, [sp, #0x4C]
  01220	e5933000	 ldr         r3, [r3]
  01224	e58d3028	 str         r3, [sp, #0x28]

; 565  : 	aMask0=aMask1=aMask2=aMask3=0;

  01228	e3a03000	 mov         r3, #0
  0122c	e58d3014	 str         r3, [sp, #0x14]
  01230	e59d3014	 ldr         r3, [sp, #0x14]
  01234	e58d3010	 str         r3, [sp, #0x10]
  01238	e59d3010	 ldr         r3, [sp, #0x10]
  0123c	e58d3004	 str         r3, [sp, #4]
  01240	e59d3004	 ldr         r3, [sp, #4]
  01244	e58d3024	 str         r3, [sp, #0x24]

; 566  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  01248	e3a03000	 mov         r3, #0
  0124c	e58d301c	 str         r3, [sp, #0x1C]
  01250	e59d301c	 ldr         r3, [sp, #0x1C]
  01254	e58d3000	 str         r3, [sp]
  01258	e59d3000	 ldr         r3, [sp]
  0125c	e58d3020	 str         r3, [sp, #0x20]
  01260	e59d3020	 ldr         r3, [sp, #0x20]
  01264	e58d302c	 str         r3, [sp, #0x2C]

; 567  : 
; 568  : 	for(i=1; i<=aSizeArray; i++)

  01268	e3a03001	 mov         r3, #1
  0126c	e58d3008	 str         r3, [sp, #8]
  01270	ea000002	 b           |$LN13@XllpGpioSe@7|
  01274		 |$LN12@XllpGpioSe@7|
  01274	e59d3008	 ldr         r3, [sp, #8]
  01278	e2833001	 add         r3, r3, #1
  0127c	e58d3008	 str         r3, [sp, #8]
  01280		 |$LN13@XllpGpioSe@7|
  01280	e59d2008	 ldr         r2, [sp, #8]
  01284	e59d3028	 ldr         r3, [sp, #0x28]
  01288	e1520003	 cmp         r2, r3
  0128c	8a00003d	 bhi         |$LN11@XllpGpioSe@7|

; 569  : 	{
; 570  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  01290	e59d1008	 ldr         r1, [sp, #8]
  01294	e3a03004	 mov         r3, #4
  01298	e0020391	 mul         r2, r1, r3
  0129c	e59d304c	 ldr         r3, [sp, #0x4C]
  012a0	e0833002	 add         r3, r3, r2
  012a4	e5933000	 ldr         r3, [r3]
  012a8	e203201f	 and         r2, r3, #0x1F
  012ac	e3a03001	 mov         r3, #1
  012b0	e1a03213	 mov         r3, r3, lsl r2
  012b4	e58d300c	 str         r3, [sp, #0xC]

; 571  : 		if(aGpioPinArray[i] > 95)

  012b8	e59d1008	 ldr         r1, [sp, #8]
  012bc	e3a03004	 mov         r3, #4
  012c0	e0020391	 mul         r2, r1, r3
  012c4	e59d304c	 ldr         r3, [sp, #0x4C]
  012c8	e0833002	 add         r3, r3, r2
  012cc	e5933000	 ldr         r3, [r3]
  012d0	e353005f	 cmp         r3, #0x5F
  012d4	9a000006	 bls         |$LN10@XllpGpioSe@7|

; 572  : 		{
; 573  : 			aMask3 |= aGpioPinMask;

  012d8	e59d2014	 ldr         r2, [sp, #0x14]
  012dc	e59d300c	 ldr         r3, [sp, #0xC]
  012e0	e1823003	 orr         r3, r2, r3
  012e4	e58d3014	 str         r3, [sp, #0x14]

; 574  : 			aSet3=XLLP_TRUE;

  012e8	e3a03001	 mov         r3, #1
  012ec	e58d301c	 str         r3, [sp, #0x1C]
  012f0	ea000023	 b           |$LN9@XllpGpioSe@7|
  012f4		 |$LN10@XllpGpioSe@7|

; 575  : 		}
; 576  : 		else if(aGpioPinArray[i] > 63)

  012f4	e59d1008	 ldr         r1, [sp, #8]
  012f8	e3a03004	 mov         r3, #4
  012fc	e0020391	 mul         r2, r1, r3
  01300	e59d304c	 ldr         r3, [sp, #0x4C]
  01304	e0833002	 add         r3, r3, r2
  01308	e5933000	 ldr         r3, [r3]
  0130c	e353003f	 cmp         r3, #0x3F
  01310	9a000006	 bls         |$LN8@XllpGpioSe@7|

; 577  : 		{
; 578  : 			aMask2 |= aGpioPinMask;

  01314	e59d2010	 ldr         r2, [sp, #0x10]
  01318	e59d300c	 ldr         r3, [sp, #0xC]
  0131c	e1823003	 orr         r3, r2, r3
  01320	e58d3010	 str         r3, [sp, #0x10]

; 579  : 			aSet2=XLLP_TRUE;

  01324	e3a03001	 mov         r3, #1
  01328	e58d3000	 str         r3, [sp]
  0132c	ea000014	 b           |$LN7@XllpGpioSe@7|
  01330		 |$LN8@XllpGpioSe@7|

; 580  : 		}
; 581  : 		else if(aGpioPinArray[i] > 31)

  01330	e59d1008	 ldr         r1, [sp, #8]
  01334	e3a03004	 mov         r3, #4
  01338	e0020391	 mul         r2, r1, r3
  0133c	e59d304c	 ldr         r3, [sp, #0x4C]
  01340	e0833002	 add         r3, r3, r2
  01344	e5933000	 ldr         r3, [r3]
  01348	e353001f	 cmp         r3, #0x1F
  0134c	9a000006	 bls         |$LN6@XllpGpioSe@7|

; 582  : 		{
; 583  : 			aMask1 |= aGpioPinMask;

  01350	e59d2004	 ldr         r2, [sp, #4]
  01354	e59d300c	 ldr         r3, [sp, #0xC]
  01358	e1823003	 orr         r3, r2, r3
  0135c	e58d3004	 str         r3, [sp, #4]

; 584  : 			aSet1=XLLP_TRUE;

  01360	e3a03001	 mov         r3, #1
  01364	e58d3020	 str         r3, [sp, #0x20]

; 585  : 		}
; 586  : 		else

  01368	ea000005	 b           |$LN5@XllpGpioSe@7|
  0136c		 |$LN6@XllpGpioSe@7|

; 587  : 		{
; 588  : 			aMask0 |= aGpioPinMask;

  0136c	e59d2024	 ldr         r2, [sp, #0x24]
  01370	e59d300c	 ldr         r3, [sp, #0xC]
  01374	e1823003	 orr         r3, r2, r3
  01378	e58d3024	 str         r3, [sp, #0x24]

; 589  : 			aSet0=XLLP_TRUE;

  0137c	e3a03001	 mov         r3, #1
  01380	e58d302c	 str         r3, [sp, #0x2C]
  01384		 |$LN5@XllpGpioSe@7|
  01384		 |$LN7@XllpGpioSe@7|
  01384		 |$LN9@XllpGpioSe@7|

; 590  : 		}
; 591  : 	}

  01384	eaffffba	 b           |$LN12@XllpGpioSe@7|
  01388		 |$LN11@XllpGpioSe@7|

; 592  : 	if(aSet3)

  01388	e59d301c	 ldr         r3, [sp, #0x1C]
  0138c	e3530000	 cmp         r3, #0
  01390	0a000011	 beq         |$LN4@XllpGpioSe@7|

; 593  : 	{
; 594  : 		LockID = XllpLock(GFER3);

  01394	e3a00023	 mov         r0, #0x23
  01398	eb000000	 bl          XllpLock
  0139c	e58d0030	 str         r0, [sp, #0x30]
  013a0	e59d3030	 ldr         r3, [sp, #0x30]
  013a4	e58d3018	 str         r3, [sp, #0x18]

; 595  : 		pGPIO->GFER3=((pGPIO->GFER3&~aMask3)&~XLLP_GPIO_PIN_RESERVED_BITS);

  013a8	e59d3048	 ldr         r3, [sp, #0x48]
  013ac	e2831f4f	 add         r1, r3, #0x4F, 30
  013b0	e59d3014	 ldr         r3, [sp, #0x14]
  013b4	e1e02003	 mvn         r2, r3
  013b8	e5913000	 ldr         r3, [r1]
  013bc	e0032002	 and         r2, r3, r2
  013c0	e3e034fe	 mvn         r3, #0xFE, 8
  013c4	e0022003	 and         r2, r2, r3
  013c8	e59d3048	 ldr         r3, [sp, #0x48]
  013cc	e2833f4f	 add         r3, r3, #0x4F, 30
  013d0	e5832000	 str         r2, [r3]

; 596  : 		XllpUnlock(LockID);

  013d4	e59d0018	 ldr         r0, [sp, #0x18]
  013d8	eb000000	 bl          XllpUnlock
  013dc		 |$LN4@XllpGpioSe@7|

; 597  : 	}
; 598  : 	if(aSet2)

  013dc	e59d3000	 ldr         r3, [sp]
  013e0	e3530000	 cmp         r3, #0
  013e4	0a00000f	 beq         |$LN3@XllpGpioSe@7|

; 599  : 	{
; 600  : 		LockID = XllpLock(GFER2);

  013e8	e3a00012	 mov         r0, #0x12
  013ec	eb000000	 bl          XllpLock
  013f0	e58d0034	 str         r0, [sp, #0x34]
  013f4	e59d3034	 ldr         r3, [sp, #0x34]
  013f8	e58d3018	 str         r3, [sp, #0x18]

; 601  : 		pGPIO->GFER2=((pGPIO->GFER2)&~aMask2);

  013fc	e59d3048	 ldr         r3, [sp, #0x48]
  01400	e2831044	 add         r1, r3, #0x44
  01404	e59d3010	 ldr         r3, [sp, #0x10]
  01408	e1e02003	 mvn         r2, r3
  0140c	e5913000	 ldr         r3, [r1]
  01410	e0032002	 and         r2, r3, r2
  01414	e59d3048	 ldr         r3, [sp, #0x48]
  01418	e2833044	 add         r3, r3, #0x44
  0141c	e5832000	 str         r2, [r3]

; 602  : 		XllpUnlock(LockID);

  01420	e59d0018	 ldr         r0, [sp, #0x18]
  01424	eb000000	 bl          XllpUnlock
  01428		 |$LN3@XllpGpioSe@7|

; 603  : 	}
; 604  : 	if(aSet1)

  01428	e59d3020	 ldr         r3, [sp, #0x20]
  0142c	e3530000	 cmp         r3, #0
  01430	0a00000f	 beq         |$LN2@XllpGpioSe@7|

; 605  : 	{
; 606  : 		LockID = XllpLock(GFER1);

  01434	e3a00011	 mov         r0, #0x11
  01438	eb000000	 bl          XllpLock
  0143c	e58d0038	 str         r0, [sp, #0x38]
  01440	e59d3038	 ldr         r3, [sp, #0x38]
  01444	e58d3018	 str         r3, [sp, #0x18]

; 607  : 		pGPIO->GFER1=((pGPIO->GFER1)&~aMask1);

  01448	e59d3048	 ldr         r3, [sp, #0x48]
  0144c	e2831040	 add         r1, r3, #0x40
  01450	e59d3004	 ldr         r3, [sp, #4]
  01454	e1e02003	 mvn         r2, r3
  01458	e5913000	 ldr         r3, [r1]
  0145c	e0032002	 and         r2, r3, r2
  01460	e59d3048	 ldr         r3, [sp, #0x48]
  01464	e2833040	 add         r3, r3, #0x40
  01468	e5832000	 str         r2, [r3]

; 608  : 		XllpUnlock(LockID);

  0146c	e59d0018	 ldr         r0, [sp, #0x18]
  01470	eb000000	 bl          XllpUnlock
  01474		 |$LN2@XllpGpioSe@7|

; 609  : 	}
; 610  : 	if(aSet0)

  01474	e59d302c	 ldr         r3, [sp, #0x2C]
  01478	e3530000	 cmp         r3, #0
  0147c	0a00000f	 beq         |$LN1@XllpGpioSe@7|

; 611  : 	{
; 612  : 		LockID = XllpLock(GFER0);

  01480	e3a00010	 mov         r0, #0x10
  01484	eb000000	 bl          XllpLock
  01488	e58d003c	 str         r0, [sp, #0x3C]
  0148c	e59d303c	 ldr         r3, [sp, #0x3C]
  01490	e58d3018	 str         r3, [sp, #0x18]

; 613  : 		pGPIO->GFER0=((pGPIO->GFER0)&~aMask0);

  01494	e59d3048	 ldr         r3, [sp, #0x48]
  01498	e283103c	 add         r1, r3, #0x3C
  0149c	e59d3024	 ldr         r3, [sp, #0x24]
  014a0	e1e02003	 mvn         r2, r3
  014a4	e5913000	 ldr         r3, [r1]
  014a8	e0032002	 and         r2, r3, r2
  014ac	e59d3048	 ldr         r3, [sp, #0x48]
  014b0	e283303c	 add         r3, r3, #0x3C
  014b4	e5832000	 str         r2, [r3]

; 614  : 		XllpUnlock(LockID);

  014b8	e59d0018	 ldr         r0, [sp, #0x18]
  014bc	eb000000	 bl          XllpUnlock
  014c0		 |$LN1@XllpGpioSe@7|

; 615  : 	}
; 616  : 	}

  014c0	e28dd040	 add         sp, sp, #0x40
  014c4	e89d6000	 ldmia       sp, {sp, lr}
  014c8	e12fff1e	 bx          lr
  014cc		 |$M1170|

			 ENDP  ; |XllpGpioSetFallingEdgeDetectDisable|

	EXPORT	|XllpGpioSetFallingEdgeDetectEnable|

  00058			 AREA	 |.pdata|, PDATA
|$T1177| DCD	|$LN18@XllpGpioSe@8|
	DCD	0x4000ac04
; Function compile flags: /Odtp

  014cc			 AREA	 |.text|, CODE, ARM

  014cc		 |XllpGpioSetFallingEdgeDetectEnable| PROC

; 625  : 	{

  014cc		 |$LN18@XllpGpioSe@8|
  014cc	e1a0c00d	 mov         r12, sp
  014d0	e92d0003	 stmdb       sp!, {r0, r1}
  014d4	e92d5000	 stmdb       sp!, {r12, lr}
  014d8	e24dd040	 sub         sp, sp, #0x40
  014dc		 |$M1174|

; 626  : 	XLLP_UINT32_T LockID;
; 627  : 	XLLP_UINT32_T aGpioPinMask;
; 628  : 	XLLP_UINT32_T aSizeArray;
; 629  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 630  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 631  : 	XLLP_UINT32_T i;
; 632  : 
; 633  : 	//determine size of array
; 634  : 	aSizeArray = aGpioPinArray[0];

  014dc	e59d304c	 ldr         r3, [sp, #0x4C]
  014e0	e5933000	 ldr         r3, [r3]
  014e4	e58d3028	 str         r3, [sp, #0x28]

; 635  : 	aMask0=aMask1=aMask2=aMask3=0;

  014e8	e3a03000	 mov         r3, #0
  014ec	e58d3014	 str         r3, [sp, #0x14]
  014f0	e59d3014	 ldr         r3, [sp, #0x14]
  014f4	e58d3010	 str         r3, [sp, #0x10]
  014f8	e59d3010	 ldr         r3, [sp, #0x10]
  014fc	e58d3004	 str         r3, [sp, #4]
  01500	e59d3004	 ldr         r3, [sp, #4]
  01504	e58d3024	 str         r3, [sp, #0x24]

; 636  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  01508	e3a03000	 mov         r3, #0
  0150c	e58d301c	 str         r3, [sp, #0x1C]
  01510	e59d301c	 ldr         r3, [sp, #0x1C]
  01514	e58d3000	 str         r3, [sp]
  01518	e59d3000	 ldr         r3, [sp]
  0151c	e58d3020	 str         r3, [sp, #0x20]
  01520	e59d3020	 ldr         r3, [sp, #0x20]
  01524	e58d302c	 str         r3, [sp, #0x2C]

; 637  : 	
; 638  : 	for(i=1; i<=aSizeArray; i++)

  01528	e3a03001	 mov         r3, #1
  0152c	e58d3008	 str         r3, [sp, #8]
  01530	ea000002	 b           |$LN13@XllpGpioSe@8|
  01534		 |$LN12@XllpGpioSe@8|
  01534	e59d3008	 ldr         r3, [sp, #8]
  01538	e2833001	 add         r3, r3, #1
  0153c	e58d3008	 str         r3, [sp, #8]
  01540		 |$LN13@XllpGpioSe@8|
  01540	e59d2008	 ldr         r2, [sp, #8]
  01544	e59d3028	 ldr         r3, [sp, #0x28]
  01548	e1520003	 cmp         r2, r3
  0154c	8a00003d	 bhi         |$LN11@XllpGpioSe@8|

; 639  : 	{
; 640  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  01550	e59d1008	 ldr         r1, [sp, #8]
  01554	e3a03004	 mov         r3, #4
  01558	e0020391	 mul         r2, r1, r3
  0155c	e59d304c	 ldr         r3, [sp, #0x4C]
  01560	e0833002	 add         r3, r3, r2
  01564	e5933000	 ldr         r3, [r3]
  01568	e203201f	 and         r2, r3, #0x1F
  0156c	e3a03001	 mov         r3, #1
  01570	e1a03213	 mov         r3, r3, lsl r2
  01574	e58d300c	 str         r3, [sp, #0xC]

; 641  : 		if(aGpioPinArray[i] > 95)

  01578	e59d1008	 ldr         r1, [sp, #8]
  0157c	e3a03004	 mov         r3, #4
  01580	e0020391	 mul         r2, r1, r3
  01584	e59d304c	 ldr         r3, [sp, #0x4C]
  01588	e0833002	 add         r3, r3, r2
  0158c	e5933000	 ldr         r3, [r3]
  01590	e353005f	 cmp         r3, #0x5F
  01594	9a000006	 bls         |$LN10@XllpGpioSe@8|

; 642  : 		{
; 643  : 			aMask3 |= aGpioPinMask;

  01598	e59d2014	 ldr         r2, [sp, #0x14]
  0159c	e59d300c	 ldr         r3, [sp, #0xC]
  015a0	e1823003	 orr         r3, r2, r3
  015a4	e58d3014	 str         r3, [sp, #0x14]

; 644  : 			aSet3=XLLP_TRUE;

  015a8	e3a03001	 mov         r3, #1
  015ac	e58d301c	 str         r3, [sp, #0x1C]
  015b0	ea000023	 b           |$LN9@XllpGpioSe@8|
  015b4		 |$LN10@XllpGpioSe@8|

; 645  : 		}
; 646  : 		else if(aGpioPinArray[i] > 63)

  015b4	e59d1008	 ldr         r1, [sp, #8]
  015b8	e3a03004	 mov         r3, #4
  015bc	e0020391	 mul         r2, r1, r3
  015c0	e59d304c	 ldr         r3, [sp, #0x4C]
  015c4	e0833002	 add         r3, r3, r2
  015c8	e5933000	 ldr         r3, [r3]
  015cc	e353003f	 cmp         r3, #0x3F
  015d0	9a000006	 bls         |$LN8@XllpGpioSe@8|

; 647  : 		{
; 648  : 			aMask2 |= aGpioPinMask;

  015d4	e59d2010	 ldr         r2, [sp, #0x10]
  015d8	e59d300c	 ldr         r3, [sp, #0xC]
  015dc	e1823003	 orr         r3, r2, r3
  015e0	e58d3010	 str         r3, [sp, #0x10]

; 649  : 			aSet2=XLLP_TRUE;

  015e4	e3a03001	 mov         r3, #1
  015e8	e58d3000	 str         r3, [sp]
  015ec	ea000014	 b           |$LN7@XllpGpioSe@8|
  015f0		 |$LN8@XllpGpioSe@8|

; 650  : 		}
; 651  : 		else if(aGpioPinArray[i] > 31)

  015f0	e59d1008	 ldr         r1, [sp, #8]
  015f4	e3a03004	 mov         r3, #4
  015f8	e0020391	 mul         r2, r1, r3
  015fc	e59d304c	 ldr         r3, [sp, #0x4C]
  01600	e0833002	 add         r3, r3, r2
  01604	e5933000	 ldr         r3, [r3]
  01608	e353001f	 cmp         r3, #0x1F
  0160c	9a000006	 bls         |$LN6@XllpGpioSe@8|

; 652  : 		{
; 653  : 			aMask1 |= aGpioPinMask;

  01610	e59d2004	 ldr         r2, [sp, #4]
  01614	e59d300c	 ldr         r3, [sp, #0xC]
  01618	e1823003	 orr         r3, r2, r3
  0161c	e58d3004	 str         r3, [sp, #4]

; 654  : 			aSet1=XLLP_TRUE;

  01620	e3a03001	 mov         r3, #1
  01624	e58d3020	 str         r3, [sp, #0x20]

; 655  : 		}
; 656  : 		else

  01628	ea000005	 b           |$LN5@XllpGpioSe@8|
  0162c		 |$LN6@XllpGpioSe@8|

; 657  : 		{
; 658  : 			aMask0 |= aGpioPinMask;

  0162c	e59d2024	 ldr         r2, [sp, #0x24]
  01630	e59d300c	 ldr         r3, [sp, #0xC]
  01634	e1823003	 orr         r3, r2, r3
  01638	e58d3024	 str         r3, [sp, #0x24]

; 659  : 			aSet0=XLLP_TRUE;

  0163c	e3a03001	 mov         r3, #1
  01640	e58d302c	 str         r3, [sp, #0x2C]
  01644		 |$LN5@XllpGpioSe@8|
  01644		 |$LN7@XllpGpioSe@8|
  01644		 |$LN9@XllpGpioSe@8|

; 660  : 		}
; 661  : 	}

  01644	eaffffba	 b           |$LN12@XllpGpioSe@8|
  01648		 |$LN11@XllpGpioSe@8|

; 662  : 	if(aSet3)

  01648	e59d301c	 ldr         r3, [sp, #0x1C]
  0164c	e3530000	 cmp         r3, #0
  01650	0a000010	 beq         |$LN4@XllpGpioSe@8|

; 663  : 	{
; 664  : 		LockID = XllpLock(GFER3);

  01654	e3a00023	 mov         r0, #0x23
  01658	eb000000	 bl          XllpLock
  0165c	e58d0030	 str         r0, [sp, #0x30]
  01660	e59d3030	 ldr         r3, [sp, #0x30]
  01664	e58d3018	 str         r3, [sp, #0x18]

; 665  : 		pGPIO->GFER3=((pGPIO->GFER3|aMask3)&~XLLP_GPIO_PIN_RESERVED_BITS);

  01668	e59d3048	 ldr         r3, [sp, #0x48]
  0166c	e2833f4f	 add         r3, r3, #0x4F, 30
  01670	e5932000	 ldr         r2, [r3]
  01674	e59d3014	 ldr         r3, [sp, #0x14]
  01678	e1822003	 orr         r2, r2, r3
  0167c	e3e034fe	 mvn         r3, #0xFE, 8
  01680	e0022003	 and         r2, r2, r3
  01684	e59d3048	 ldr         r3, [sp, #0x48]
  01688	e2833f4f	 add         r3, r3, #0x4F, 30
  0168c	e5832000	 str         r2, [r3]

; 666  : 		XllpUnlock(LockID);

  01690	e59d0018	 ldr         r0, [sp, #0x18]
  01694	eb000000	 bl          XllpUnlock
  01698		 |$LN4@XllpGpioSe@8|

; 667  : 	}
; 668  : 	if(aSet2)

  01698	e59d3000	 ldr         r3, [sp]
  0169c	e3530000	 cmp         r3, #0
  016a0	0a00000e	 beq         |$LN3@XllpGpioSe@8|

; 669  : 	{
; 670  : 		LockID = XllpLock(GFER2);

  016a4	e3a00012	 mov         r0, #0x12
  016a8	eb000000	 bl          XllpLock
  016ac	e58d0034	 str         r0, [sp, #0x34]
  016b0	e59d3034	 ldr         r3, [sp, #0x34]
  016b4	e58d3018	 str         r3, [sp, #0x18]

; 671  : 		pGPIO->GFER2=((pGPIO->GFER2)|aMask2);

  016b8	e59d3048	 ldr         r3, [sp, #0x48]
  016bc	e2833044	 add         r3, r3, #0x44
  016c0	e5932000	 ldr         r2, [r3]
  016c4	e59d3010	 ldr         r3, [sp, #0x10]
  016c8	e1822003	 orr         r2, r2, r3
  016cc	e59d3048	 ldr         r3, [sp, #0x48]
  016d0	e2833044	 add         r3, r3, #0x44
  016d4	e5832000	 str         r2, [r3]

; 672  : 		XllpUnlock(LockID);

  016d8	e59d0018	 ldr         r0, [sp, #0x18]
  016dc	eb000000	 bl          XllpUnlock
  016e0		 |$LN3@XllpGpioSe@8|

; 673  : 	}
; 674  : 	if(aSet1)

  016e0	e59d3020	 ldr         r3, [sp, #0x20]
  016e4	e3530000	 cmp         r3, #0
  016e8	0a00000e	 beq         |$LN2@XllpGpioSe@8|

; 675  : 	{
; 676  : 		LockID = XllpLock(GFER1);

  016ec	e3a00011	 mov         r0, #0x11
  016f0	eb000000	 bl          XllpLock
  016f4	e58d0038	 str         r0, [sp, #0x38]
  016f8	e59d3038	 ldr         r3, [sp, #0x38]
  016fc	e58d3018	 str         r3, [sp, #0x18]

; 677  : 		pGPIO->GFER1=((pGPIO->GFER1)|aMask1);

  01700	e59d3048	 ldr         r3, [sp, #0x48]
  01704	e2833040	 add         r3, r3, #0x40
  01708	e5932000	 ldr         r2, [r3]
  0170c	e59d3004	 ldr         r3, [sp, #4]
  01710	e1822003	 orr         r2, r2, r3
  01714	e59d3048	 ldr         r3, [sp, #0x48]
  01718	e2833040	 add         r3, r3, #0x40
  0171c	e5832000	 str         r2, [r3]

; 678  : 		XllpUnlock(LockID);

  01720	e59d0018	 ldr         r0, [sp, #0x18]
  01724	eb000000	 bl          XllpUnlock
  01728		 |$LN2@XllpGpioSe@8|

; 679  : 	}
; 680  : 	if(aSet0)

  01728	e59d302c	 ldr         r3, [sp, #0x2C]
  0172c	e3530000	 cmp         r3, #0
  01730	0a00000e	 beq         |$LN1@XllpGpioSe@8|

; 681  : 	{
; 682  : 		LockID = XllpLock(GFER0);

  01734	e3a00010	 mov         r0, #0x10
  01738	eb000000	 bl          XllpLock
  0173c	e58d003c	 str         r0, [sp, #0x3C]
  01740	e59d303c	 ldr         r3, [sp, #0x3C]
  01744	e58d3018	 str         r3, [sp, #0x18]

; 683  : 		pGPIO->GFER0=((pGPIO->GFER0)|aMask0);

  01748	e59d3048	 ldr         r3, [sp, #0x48]
  0174c	e283303c	 add         r3, r3, #0x3C
  01750	e5932000	 ldr         r2, [r3]
  01754	e59d3024	 ldr         r3, [sp, #0x24]
  01758	e1822003	 orr         r2, r2, r3
  0175c	e59d3048	 ldr         r3, [sp, #0x48]
  01760	e283303c	 add         r3, r3, #0x3C
  01764	e5832000	 str         r2, [r3]

; 684  : 		XllpUnlock(LockID);

  01768	e59d0018	 ldr         r0, [sp, #0x18]
  0176c	eb000000	 bl          XllpUnlock
  01770		 |$LN1@XllpGpioSe@8|

; 685  : 	}
; 686  : 	}

  01770	e28dd040	 add         sp, sp, #0x40
  01774	e89d6000	 ldmia       sp, {sp, lr}
  01778	e12fff1e	 bx          lr
  0177c		 |$M1175|

			 ENDP  ; |XllpGpioSetFallingEdgeDetectEnable|

	EXPORT	|XllpGpioGetEdgeDetectStatus|

  00060			 AREA	 |.pdata|, PDATA
|$T1183| DCD	|$LN11@XllpGpioGe@5|
	DCD	0x40003404
; Function compile flags: /Odtp

  0177c			 AREA	 |.text|, CODE, ARM

  0177c		 |XllpGpioGetEdgeDetectStatus| PROC

; 697  : 	{

  0177c		 |$LN11@XllpGpioGe@5|
  0177c	e1a0c00d	 mov         r12, sp
  01780	e92d0003	 stmdb       sp!, {r0, r1}
  01784	e92d5000	 stmdb       sp!, {r12, lr}
  01788	e24dd008	 sub         sp, sp, #8
  0178c		 |$M1180|

; 698  : 	XLLP_UINT32_T aGpioPinMask;
; 699  : 
; 700  : 	aGpioPinMask = 0x1 << (aGpioPin & 0x1F);

  0178c	e59d3014	 ldr         r3, [sp, #0x14]
  01790	e203201f	 and         r2, r3, #0x1F
  01794	e3a03001	 mov         r3, #1
  01798	e1a03213	 mov         r3, r3, lsl r2
  0179c	e58d3000	 str         r3, [sp]

; 701  : 
; 702  : 	if(aGpioPin > 95)

  017a0	e59d3014	 ldr         r3, [sp, #0x14]
  017a4	e353005f	 cmp         r3, #0x5F
  017a8	9a000007	 bls         |$LN6@XllpGpioGe@5|

; 703  : 		return (pGPIO->GEDR3& aGpioPinMask); 

  017ac	e59d3010	 ldr         r3, [sp, #0x10]
  017b0	e2833f52	 add         r3, r3, #0x52, 30
  017b4	e5932000	 ldr         r2, [r3]
  017b8	e59d3000	 ldr         r3, [sp]
  017bc	e0023003	 and         r3, r2, r3
  017c0	e58d3004	 str         r3, [sp, #4]
  017c4	ea00001c	 b           |$LN7@XllpGpioGe@5|
  017c8	ea00001b	 b           |$LN5@XllpGpioGe@5|
  017cc		 |$LN6@XllpGpioGe@5|

; 704  : 	else if(aGpioPin > 63) 

  017cc	e59d3014	 ldr         r3, [sp, #0x14]
  017d0	e353003f	 cmp         r3, #0x3F
  017d4	9a000007	 bls         |$LN4@XllpGpioGe@5|

; 705  : 		return (pGPIO->GEDR2 & aGpioPinMask);

  017d8	e59d3010	 ldr         r3, [sp, #0x10]
  017dc	e2833050	 add         r3, r3, #0x50
  017e0	e5932000	 ldr         r2, [r3]
  017e4	e59d3000	 ldr         r3, [sp]
  017e8	e0023003	 and         r3, r2, r3
  017ec	e58d3004	 str         r3, [sp, #4]
  017f0	ea000011	 b           |$LN7@XllpGpioGe@5|
  017f4	ea000010	 b           |$LN3@XllpGpioGe@5|
  017f8		 |$LN4@XllpGpioGe@5|

; 706  : 	else if(aGpioPin > 31) 

  017f8	e59d3014	 ldr         r3, [sp, #0x14]
  017fc	e353001f	 cmp         r3, #0x1F
  01800	9a000007	 bls         |$LN2@XllpGpioGe@5|

; 707  : 		return (pGPIO->GEDR1 & aGpioPinMask);

  01804	e59d3010	 ldr         r3, [sp, #0x10]
  01808	e283304c	 add         r3, r3, #0x4C
  0180c	e5932000	 ldr         r2, [r3]
  01810	e59d3000	 ldr         r3, [sp]
  01814	e0023003	 and         r3, r2, r3
  01818	e58d3004	 str         r3, [sp, #4]
  0181c	ea000006	 b           |$LN7@XllpGpioGe@5|
  01820	ea000005	 b           |$LN1@XllpGpioGe@5|
  01824		 |$LN2@XllpGpioGe@5|

; 708  : 	else return (pGPIO->GEDR0 & aGpioPinMask);

  01824	e59d3010	 ldr         r3, [sp, #0x10]
  01828	e2833048	 add         r3, r3, #0x48
  0182c	e5932000	 ldr         r2, [r3]
  01830	e59d3000	 ldr         r3, [sp]
  01834	e0023003	 and         r3, r2, r3
  01838	e58d3004	 str         r3, [sp, #4]
  0183c		 |$LN1@XllpGpioGe@5|
  0183c		 |$LN3@XllpGpioGe@5|
  0183c		 |$LN5@XllpGpioGe@5|
  0183c		 |$LN7@XllpGpioGe@5|

; 709  : 	}

  0183c	e59d0004	 ldr         r0, [sp, #4]
  01840	e28dd008	 add         sp, sp, #8
  01844	e89d6000	 ldmia       sp, {sp, lr}
  01848	e12fff1e	 bx          lr
  0184c		 |$M1181|

			 ENDP  ; |XllpGpioGetEdgeDetectStatus|

	EXPORT	|XllpGpioClearEdgeDetectStatus|

  00068			 AREA	 |.pdata|, PDATA
|$T1188| DCD	|$LN18@XllpGpioCl|
	DCD	0x40007e04
; Function compile flags: /Odtp

  0184c			 AREA	 |.text|, CODE, ARM

  0184c		 |XllpGpioClearEdgeDetectStatus| PROC

; 718  : 	{

  0184c		 |$LN18@XllpGpioCl|
  0184c	e1a0c00d	 mov         r12, sp
  01850	e92d0003	 stmdb       sp!, {r0, r1}
  01854	e92d5000	 stmdb       sp!, {r12, lr}
  01858	e24dd02c	 sub         sp, sp, #0x2C
  0185c		 |$M1185|

; 719  : 	XLLP_UINT32_T aGpioPinMask;
; 720  : 	XLLP_UINT32_T aSizeArray;
; 721  : 	XLLP_UINT32_T aMask0, aMask1, aMask2, aMask3;
; 722  : 	XLLP_BOOL_T aSet0, aSet1, aSet2, aSet3;
; 723  : 	XLLP_UINT32_T i;
; 724  : 
; 725  : 	//determine size of array
; 726  : 	aSizeArray = aGpioPinArray[0];

  0185c	e59d3038	 ldr         r3, [sp, #0x38]
  01860	e5933000	 ldr         r3, [r3]
  01864	e58d3024	 str         r3, [sp, #0x24]

; 727  : 	aMask0=aMask1=aMask2=aMask3=0;

  01868	e3a03000	 mov         r3, #0
  0186c	e58d3014	 str         r3, [sp, #0x14]
  01870	e59d3014	 ldr         r3, [sp, #0x14]
  01874	e58d3010	 str         r3, [sp, #0x10]
  01878	e59d3010	 ldr         r3, [sp, #0x10]
  0187c	e58d3004	 str         r3, [sp, #4]
  01880	e59d3004	 ldr         r3, [sp, #4]
  01884	e58d3020	 str         r3, [sp, #0x20]

; 728  : 	aSet0=aSet1=aSet2=aSet3=XLLP_FALSE;

  01888	e3a03000	 mov         r3, #0
  0188c	e58d3018	 str         r3, [sp, #0x18]
  01890	e59d3018	 ldr         r3, [sp, #0x18]
  01894	e58d3000	 str         r3, [sp]
  01898	e59d3000	 ldr         r3, [sp]
  0189c	e58d301c	 str         r3, [sp, #0x1C]
  018a0	e59d301c	 ldr         r3, [sp, #0x1C]
  018a4	e58d3028	 str         r3, [sp, #0x28]

; 729  : 	
; 730  : 	for(i=1; i<=aSizeArray; i++)

  018a8	e3a03001	 mov         r3, #1
  018ac	e58d3008	 str         r3, [sp, #8]
  018b0	ea000002	 b           |$LN13@XllpGpioCl|
  018b4		 |$LN12@XllpGpioCl|
  018b4	e59d3008	 ldr         r3, [sp, #8]
  018b8	e2833001	 add         r3, r3, #1
  018bc	e58d3008	 str         r3, [sp, #8]
  018c0		 |$LN13@XllpGpioCl|
  018c0	e59d2008	 ldr         r2, [sp, #8]
  018c4	e59d3024	 ldr         r3, [sp, #0x24]
  018c8	e1520003	 cmp         r2, r3
  018cc	8a00003d	 bhi         |$LN11@XllpGpioCl|

; 731  : 	{
; 732  : 		aGpioPinMask = 0x1u << (aGpioPinArray[i] & 0x1F);

  018d0	e59d1008	 ldr         r1, [sp, #8]
  018d4	e3a03004	 mov         r3, #4
  018d8	e0020391	 mul         r2, r1, r3
  018dc	e59d3038	 ldr         r3, [sp, #0x38]
  018e0	e0833002	 add         r3, r3, r2
  018e4	e5933000	 ldr         r3, [r3]
  018e8	e203201f	 and         r2, r3, #0x1F
  018ec	e3a03001	 mov         r3, #1
  018f0	e1a03213	 mov         r3, r3, lsl r2
  018f4	e58d300c	 str         r3, [sp, #0xC]

; 733  : 		if(aGpioPinArray[i] > 95)

  018f8	e59d1008	 ldr         r1, [sp, #8]
  018fc	e3a03004	 mov         r3, #4
  01900	e0020391	 mul         r2, r1, r3
  01904	e59d3038	 ldr         r3, [sp, #0x38]
  01908	e0833002	 add         r3, r3, r2
  0190c	e5933000	 ldr         r3, [r3]
  01910	e353005f	 cmp         r3, #0x5F
  01914	9a000006	 bls         |$LN10@XllpGpioCl|

; 734  : 		{
; 735  : 			aMask3 |= aGpioPinMask;

  01918	e59d2014	 ldr         r2, [sp, #0x14]
  0191c	e59d300c	 ldr         r3, [sp, #0xC]
  01920	e1823003	 orr         r3, r2, r3
  01924	e58d3014	 str         r3, [sp, #0x14]

; 736  : 			aSet3=XLLP_TRUE;

  01928	e3a03001	 mov         r3, #1
  0192c	e58d3018	 str         r3, [sp, #0x18]
  01930	ea000023	 b           |$LN9@XllpGpioCl|
  01934		 |$LN10@XllpGpioCl|

; 737  : 		}
; 738  : 		else if(aGpioPinArray[i] > 63)

  01934	e59d1008	 ldr         r1, [sp, #8]
  01938	e3a03004	 mov         r3, #4
  0193c	e0020391	 mul         r2, r1, r3
  01940	e59d3038	 ldr         r3, [sp, #0x38]
  01944	e0833002	 add         r3, r3, r2
  01948	e5933000	 ldr         r3, [r3]
  0194c	e353003f	 cmp         r3, #0x3F
  01950	9a000006	 bls         |$LN8@XllpGpioCl|

; 739  : 		{
; 740  : 			aMask2 |= aGpioPinMask;

  01954	e59d2010	 ldr         r2, [sp, #0x10]
  01958	e59d300c	 ldr         r3, [sp, #0xC]
  0195c	e1823003	 orr         r3, r2, r3
  01960	e58d3010	 str         r3, [sp, #0x10]

; 741  : 			aSet2=XLLP_TRUE;

  01964	e3a03001	 mov         r3, #1
  01968	e58d3000	 str         r3, [sp]
  0196c	ea000014	 b           |$LN7@XllpGpioCl|
  01970		 |$LN8@XllpGpioCl|

; 742  : 		}
; 743  : 		else if(aGpioPinArray[i] > 31)

  01970	e59d1008	 ldr         r1, [sp, #8]
  01974	e3a03004	 mov         r3, #4
  01978	e0020391	 mul         r2, r1, r3
  0197c	e59d3038	 ldr         r3, [sp, #0x38]
  01980	e0833002	 add         r3, r3, r2
  01984	e5933000	 ldr         r3, [r3]
  01988	e353001f	 cmp         r3, #0x1F
  0198c	9a000006	 bls         |$LN6@XllpGpioCl|

; 744  : 		{
; 745  : 			aMask1 |= aGpioPinMask;

  01990	e59d2004	 ldr         r2, [sp, #4]
  01994	e59d300c	 ldr         r3, [sp, #0xC]
  01998	e1823003	 orr         r3, r2, r3
  0199c	e58d3004	 str         r3, [sp, #4]

; 746  : 			aSet1=XLLP_TRUE;

  019a0	e3a03001	 mov         r3, #1
  019a4	e58d301c	 str         r3, [sp, #0x1C]

; 747  : 		}
; 748  : 		else

  019a8	ea000005	 b           |$LN5@XllpGpioCl|
  019ac		 |$LN6@XllpGpioCl|

; 749  : 		{
; 750  : 			aMask0 |= aGpioPinMask;

  019ac	e59d2020	 ldr         r2, [sp, #0x20]
  019b0	e59d300c	 ldr         r3, [sp, #0xC]
  019b4	e1823003	 orr         r3, r2, r3
  019b8	e58d3020	 str         r3, [sp, #0x20]

; 751  : 			aSet0=XLLP_TRUE;

  019bc	e3a03001	 mov         r3, #1
  019c0	e58d3028	 str         r3, [sp, #0x28]
  019c4		 |$LN5@XllpGpioCl|
  019c4		 |$LN7@XllpGpioCl|
  019c4		 |$LN9@XllpGpioCl|

; 752  : 		}
; 753  : 	}

  019c4	eaffffba	 b           |$LN12@XllpGpioCl|
  019c8		 |$LN11@XllpGpioCl|

; 754  : 	if(aSet3)

  019c8	e59d3018	 ldr         r3, [sp, #0x18]
  019cc	e3530000	 cmp         r3, #0
  019d0	0a000003	 beq         |$LN4@XllpGpioCl|

; 755  : 		pGPIO->GEDR3= aMask3;

  019d4	e59d3034	 ldr         r3, [sp, #0x34]
  019d8	e2832f52	 add         r2, r3, #0x52, 30
  019dc	e59d3014	 ldr         r3, [sp, #0x14]
  019e0	e5823000	 str         r3, [r2]
  019e4		 |$LN4@XllpGpioCl|

; 756  : 	if(aSet2)

  019e4	e59d3000	 ldr         r3, [sp]
  019e8	e3530000	 cmp         r3, #0
  019ec	0a000003	 beq         |$LN3@XllpGpioCl|

; 757  : 		pGPIO->GEDR2= aMask2;

  019f0	e59d3034	 ldr         r3, [sp, #0x34]
  019f4	e2832050	 add         r2, r3, #0x50
  019f8	e59d3010	 ldr         r3, [sp, #0x10]
  019fc	e5823000	 str         r3, [r2]
  01a00		 |$LN3@XllpGpioCl|

; 758  : 	if(aSet1)

  01a00	e59d301c	 ldr         r3, [sp, #0x1C]
  01a04	e3530000	 cmp         r3, #0
  01a08	0a000003	 beq         |$LN2@XllpGpioCl|

; 759  : 		pGPIO->GEDR1= aMask1;

  01a0c	e59d3034	 ldr         r3, [sp, #0x34]
  01a10	e283204c	 add         r2, r3, #0x4C
  01a14	e59d3004	 ldr         r3, [sp, #4]
  01a18	e5823000	 str         r3, [r2]
  01a1c		 |$LN2@XllpGpioCl|

; 760  : 	if(aSet0)

  01a1c	e59d3028	 ldr         r3, [sp, #0x28]
  01a20	e3530000	 cmp         r3, #0
  01a24	0a000003	 beq         |$LN1@XllpGpioCl|

; 761  : 		pGPIO->GEDR0= aMask0;

  01a28	e59d3034	 ldr         r3, [sp, #0x34]
  01a2c	e2832048	 add         r2, r3, #0x48
  01a30	e59d3020	 ldr         r3, [sp, #0x20]
  01a34	e5823000	 str         r3, [r2]
  01a38		 |$LN1@XllpGpioCl|

; 762  : 	}

  01a38	e28dd02c	 add         sp, sp, #0x2C
  01a3c	e89d6000	 ldmia       sp, {sp, lr}
  01a40	e12fff1e	 bx          lr
  01a44		 |$M1186|

			 ENDP  ; |XllpGpioClearEdgeDetectStatus|

	EXPORT	|XllpGpioGetAlternateFn|

  00070			 AREA	 |.pdata|, PDATA
|$T1194| DCD	|$LN19@XllpGpioGe@6|
	DCD	0x40006204
; Function compile flags: /Odtp

  01a44			 AREA	 |.text|, CODE, ARM

  01a44		 |XllpGpioGetAlternateFn| PROC

; 774  : 	{

  01a44		 |$LN19@XllpGpioGe@6|
  01a44	e1a0c00d	 mov         r12, sp
  01a48	e92d0003	 stmdb       sp!, {r0, r1}
  01a4c	e92d5000	 stmdb       sp!, {r12, lr}
  01a50	e24dd008	 sub         sp, sp, #8
  01a54		 |$M1191|

; 775  : 	XLLP_UINT32_T aGpioPinAFMask;
; 776  : 
; 777  : 	aGpioPinAFMask = 0x3u << ((aGpioPin & 0xF)*2);

  01a54	e59d3014	 ldr         r3, [sp, #0x14]
  01a58	e203100f	 and         r1, r3, #0xF
  01a5c	e3a03002	 mov         r3, #2
  01a60	e0020391	 mul         r2, r1, r3
  01a64	e3a03003	 mov         r3, #3
  01a68	e1a03213	 mov         r3, r3, lsl r2
  01a6c	e58d3000	 str         r3, [sp]

; 778  : 
; 779  : 	if (aGpioPin>111)

  01a70	e59d3014	 ldr         r3, [sp, #0x14]
  01a74	e353006f	 cmp         r3, #0x6F
  01a78	9a000007	 bls         |$LN14@XllpGpioGe@6|

; 780  : 		return (pGPIO->GAFR3_U & aGpioPinAFMask);

  01a7c	e59d3010	 ldr         r3, [sp, #0x10]
  01a80	e2833070	 add         r3, r3, #0x70
  01a84	e5932000	 ldr         r2, [r3]
  01a88	e59d3000	 ldr         r3, [sp]
  01a8c	e0023003	 and         r3, r2, r3
  01a90	e58d3004	 str         r3, [sp, #4]
  01a94	ea000048	 b           |$LN15@XllpGpioGe@6|
  01a98	ea000047	 b           |$LN13@XllpGpioGe@6|
  01a9c		 |$LN14@XllpGpioGe@6|

; 781  : 	else if (aGpioPin>95)

  01a9c	e59d3014	 ldr         r3, [sp, #0x14]
  01aa0	e353005f	 cmp         r3, #0x5F
  01aa4	9a000007	 bls         |$LN12@XllpGpioGe@6|

; 782  : 		return (pGPIO->GAFR3_L & aGpioPinAFMask);

  01aa8	e59d3010	 ldr         r3, [sp, #0x10]
  01aac	e283306c	 add         r3, r3, #0x6C
  01ab0	e5932000	 ldr         r2, [r3]
  01ab4	e59d3000	 ldr         r3, [sp]
  01ab8	e0023003	 and         r3, r2, r3
  01abc	e58d3004	 str         r3, [sp, #4]
  01ac0	ea00003d	 b           |$LN15@XllpGpioGe@6|
  01ac4	ea00003c	 b           |$LN11@XllpGpioGe@6|
  01ac8		 |$LN12@XllpGpioGe@6|

; 783  : 	else if (aGpioPin>79)

  01ac8	e59d3014	 ldr         r3, [sp, #0x14]
  01acc	e353004f	 cmp         r3, #0x4F
  01ad0	9a000007	 bls         |$LN10@XllpGpioGe@6|

; 784  : 		return (pGPIO->GAFR2_U & aGpioPinAFMask);

  01ad4	e59d3010	 ldr         r3, [sp, #0x10]
  01ad8	e2833068	 add         r3, r3, #0x68
  01adc	e5932000	 ldr         r2, [r3]
  01ae0	e59d3000	 ldr         r3, [sp]
  01ae4	e0023003	 and         r3, r2, r3
  01ae8	e58d3004	 str         r3, [sp, #4]
  01aec	ea000032	 b           |$LN15@XllpGpioGe@6|
  01af0	ea000031	 b           |$LN9@XllpGpioGe@6|
  01af4		 |$LN10@XllpGpioGe@6|

; 785  : 	else if (aGpioPin>63)

  01af4	e59d3014	 ldr         r3, [sp, #0x14]
  01af8	e353003f	 cmp         r3, #0x3F
  01afc	9a000007	 bls         |$LN8@XllpGpioGe@6|

; 786  : 		return (pGPIO->GAFR2_L & aGpioPinAFMask);

  01b00	e59d3010	 ldr         r3, [sp, #0x10]
  01b04	e2833064	 add         r3, r3, #0x64
  01b08	e5932000	 ldr         r2, [r3]
  01b0c	e59d3000	 ldr         r3, [sp]
  01b10	e0023003	 and         r3, r2, r3
  01b14	e58d3004	 str         r3, [sp, #4]
  01b18	ea000027	 b           |$LN15@XllpGpioGe@6|
  01b1c	ea000026	 b           |$LN7@XllpGpioGe@6|
  01b20		 |$LN8@XllpGpioGe@6|

; 787  : 	else if (aGpioPin>47)

  01b20	e59d3014	 ldr         r3, [sp, #0x14]
  01b24	e353002f	 cmp         r3, #0x2F
  01b28	9a000007	 bls         |$LN6@XllpGpioGe@6|

; 788  : 		return (pGPIO->GAFR1_U & aGpioPinAFMask);

  01b2c	e59d3010	 ldr         r3, [sp, #0x10]
  01b30	e2833060	 add         r3, r3, #0x60
  01b34	e5932000	 ldr         r2, [r3]
  01b38	e59d3000	 ldr         r3, [sp]
  01b3c	e0023003	 and         r3, r2, r3
  01b40	e58d3004	 str         r3, [sp, #4]
  01b44	ea00001c	 b           |$LN15@XllpGpioGe@6|
  01b48	ea00001b	 b           |$LN5@XllpGpioGe@6|
  01b4c		 |$LN6@XllpGpioGe@6|

; 789  : 	else if (aGpioPin>31)

  01b4c	e59d3014	 ldr         r3, [sp, #0x14]
  01b50	e353001f	 cmp         r3, #0x1F
  01b54	9a000007	 bls         |$LN4@XllpGpioGe@6|

; 790  : 		return (pGPIO->GAFR1_L & aGpioPinAFMask);

  01b58	e59d3010	 ldr         r3, [sp, #0x10]
  01b5c	e283305c	 add         r3, r3, #0x5C
  01b60	e5932000	 ldr         r2, [r3]
  01b64	e59d3000	 ldr         r3, [sp]
  01b68	e0023003	 and         r3, r2, r3
  01b6c	e58d3004	 str         r3, [sp, #4]
  01b70	ea000011	 b           |$LN15@XllpGpioGe@6|
  01b74	ea000010	 b           |$LN3@XllpGpioGe@6|
  01b78		 |$LN4@XllpGpioGe@6|

; 791  : 	else if (aGpioPin>15)

  01b78	e59d3014	 ldr         r3, [sp, #0x14]
  01b7c	e353000f	 cmp         r3, #0xF
  01b80	9a000007	 bls         |$LN2@XllpGpioGe@6|

; 792  : 		return (pGPIO->GAFR0_U & aGpioPinAFMask);

  01b84	e59d3010	 ldr         r3, [sp, #0x10]
  01b88	e2833058	 add         r3, r3, #0x58
  01b8c	e5932000	 ldr         r2, [r3]
  01b90	e59d3000	 ldr         r3, [sp]
  01b94	e0023003	 and         r3, r2, r3
  01b98	e58d3004	 str         r3, [sp, #4]
  01b9c	ea000006	 b           |$LN15@XllpGpioGe@6|
  01ba0	ea000005	 b           |$LN1@XllpGpioGe@6|
  01ba4		 |$LN2@XllpGpioGe@6|

; 793  : 	else return (pGPIO->GAFR0_L & aGpioPinAFMask);

  01ba4	e59d3010	 ldr         r3, [sp, #0x10]
  01ba8	e2833054	 add         r3, r3, #0x54
  01bac	e5932000	 ldr         r2, [r3]
  01bb0	e59d3000	 ldr         r3, [sp]
  01bb4	e0023003	 and         r3, r2, r3
  01bb8	e58d3004	 str         r3, [sp, #4]
  01bbc		 |$LN1@XllpGpioGe@6|
  01bbc		 |$LN3@XllpGpioGe@6|
  01bbc		 |$LN5@XllpGpioGe@6|
  01bbc		 |$LN7@XllpGpioGe@6|
  01bbc		 |$LN9@XllpGpioGe@6|
  01bbc		 |$LN11@XllpGpioGe@6|
  01bbc		 |$LN13@XllpGpioGe@6|
  01bbc		 |$LN15@XllpGpioGe@6|

; 794  : 	}

  01bbc	e59d0004	 ldr         r0, [sp, #4]
  01bc0	e28dd008	 add         sp, sp, #8
  01bc4	e89d6000	 ldmia       sp, {sp, lr}
  01bc8	e12fff1e	 bx          lr
  01bcc		 |$M1192|

			 ENDP  ; |XllpGpioGetAlternateFn|

	EXPORT	|XllpGpioSetAlternateFn|

  00078			 AREA	 |.pdata|, PDATA
|$T1199| DCD	|$LN30@XllpGpioSe@9|
	DCD	0x40019c04
; Function compile flags: /Odtp

  01bcc			 AREA	 |.text|, CODE, ARM

  01bcc		 |XllpGpioSetAlternateFn| PROC

; 808  : 	{

  01bcc		 |$LN30@XllpGpioSe@9|
  01bcc	e1a0c00d	 mov         r12, sp
  01bd0	e92d0007	 stmdb       sp!, {r0 - r2}
  01bd4	e92d5000	 stmdb       sp!, {r12, lr}
  01bd8	e24dd094	 sub         sp, sp, #0x94
  01bdc		 |$M1196|

; 809  : 	XLLP_UINT32_T LockID;
; 810  : 	XLLP_UINT32_T aGpioPinAFMask;
; 811  : 	XLLP_UINT32_T aGpioPinAFValue;
; 812  : 	XLLP_UINT32_T aSizeArray;
; 813  : 	XLLP_UINT32_T aMask0_U, aMask0_L, aMask1_U, aMask1_L; 
; 814  : 	XLLP_UINT32_T aMask2_U, aMask2_L, aMask3_U, aMask3_L;
; 815  : 	XLLP_UINT32_T aAFnV0_U, aAFnV0_L, aAFnV1_U, aAFnV1_L; 
; 816  : 	XLLP_UINT32_T aAFnV2_U, aAFnV2_L, aAFnV3_U, aAFnV3_L;
; 817  : 	XLLP_BOOL_T aSet0_U, aSet0_L, aSet1_U, aSet1_L; 
; 818  : 	XLLP_BOOL_T aSet2_U, aSet2_L, aSet3_U, aSet3_L;
; 819  : 	XLLP_UINT32_T i;
; 820  : 
; 821  : 	//determine size of array
; 822  : 	aSizeArray = aGpioPinArray[0];

  01bdc	e59d30a0	 ldr         r3, [sp, #0xA0]
  01be0	e5933000	 ldr         r3, [r3]
  01be4	e58d3064	 str         r3, [sp, #0x64]

; 823  : 	aMask0_U=aMask0_L=aMask1_U=aMask1_L=0;

  01be8	e3a03000	 mov         r3, #0
  01bec	e58d3004	 str         r3, [sp, #4]
  01bf0	e59d3004	 ldr         r3, [sp, #4]
  01bf4	e58d3024	 str         r3, [sp, #0x24]
  01bf8	e59d3024	 ldr         r3, [sp, #0x24]
  01bfc	e58d304c	 str         r3, [sp, #0x4C]
  01c00	e59d304c	 ldr         r3, [sp, #0x4C]
  01c04	e58d3008	 str         r3, [sp, #8]

; 824  : 	aMask2_U=aMask2_L=aMask3_U=aMask3_L=0;

  01c08	e3a03000	 mov         r3, #0
  01c0c	e58d303c	 str         r3, [sp, #0x3C]
  01c10	e59d303c	 ldr         r3, [sp, #0x3C]
  01c14	e58d3070	 str         r3, [sp, #0x70]
  01c18	e59d3070	 ldr         r3, [sp, #0x70]
  01c1c	e58d3060	 str         r3, [sp, #0x60]
  01c20	e59d3060	 ldr         r3, [sp, #0x60]
  01c24	e58d3014	 str         r3, [sp, #0x14]

; 825  : 	aAFnV0_U=aAFnV0_L=aAFnV1_U=aAFnV1_L=0;

  01c28	e3a03000	 mov         r3, #0
  01c2c	e58d305c	 str         r3, [sp, #0x5C]
  01c30	e59d305c	 ldr         r3, [sp, #0x5C]
  01c34	e58d3030	 str         r3, [sp, #0x30]
  01c38	e59d3030	 ldr         r3, [sp, #0x30]
  01c3c	e58d3028	 str         r3, [sp, #0x28]
  01c40	e59d3028	 ldr         r3, [sp, #0x28]
  01c44	e58d3010	 str         r3, [sp, #0x10]

; 826  : 	aAFnV2_U=aAFnV2_L=aAFnV3_U=aAFnV3_L=0;

  01c48	e3a03000	 mov         r3, #0
  01c4c	e58d300c	 str         r3, [sp, #0xC]
  01c50	e59d300c	 ldr         r3, [sp, #0xC]
  01c54	e58d3054	 str         r3, [sp, #0x54]
  01c58	e59d3054	 ldr         r3, [sp, #0x54]
  01c5c	e58d3058	 str         r3, [sp, #0x58]
  01c60	e59d3058	 ldr         r3, [sp, #0x58]
  01c64	e58d302c	 str         r3, [sp, #0x2C]

; 827  : 	aSet0_U=aSet0_L=aSet1_U=aSet1_L=XLLP_FALSE;

  01c68	e3a03000	 mov         r3, #0
  01c6c	e58d3038	 str         r3, [sp, #0x38]
  01c70	e59d3038	 ldr         r3, [sp, #0x38]
  01c74	e58d306c	 str         r3, [sp, #0x6C]
  01c78	e59d306c	 ldr         r3, [sp, #0x6C]
  01c7c	e58d3034	 str         r3, [sp, #0x34]
  01c80	e59d3034	 ldr         r3, [sp, #0x34]
  01c84	e58d3048	 str         r3, [sp, #0x48]

; 828  : 	aSet2_U=aSet2_L=aSet3_U=aSet3_L=XLLP_FALSE;

  01c88	e3a03000	 mov         r3, #0
  01c8c	e58d3000	 str         r3, [sp]
  01c90	e59d3000	 ldr         r3, [sp]
  01c94	e58d3068	 str         r3, [sp, #0x68]
  01c98	e59d3068	 ldr         r3, [sp, #0x68]
  01c9c	e58d3044	 str         r3, [sp, #0x44]
  01ca0	e59d3044	 ldr         r3, [sp, #0x44]
  01ca4	e58d3050	 str         r3, [sp, #0x50]

; 829  : 
; 830  : 	for(i=1; i<=aSizeArray; i++)

  01ca8	e3a03001	 mov         r3, #1
  01cac	e58d301c	 str         r3, [sp, #0x1C]
  01cb0	ea000002	 b           |$LN25@XllpGpioSe@9|
  01cb4		 |$LN24@XllpGpioSe@9|
  01cb4	e59d301c	 ldr         r3, [sp, #0x1C]
  01cb8	e2833001	 add         r3, r3, #1
  01cbc	e58d301c	 str         r3, [sp, #0x1C]
  01cc0		 |$LN25@XllpGpioSe@9|
  01cc0	e59d201c	 ldr         r2, [sp, #0x1C]
  01cc4	e59d3064	 ldr         r3, [sp, #0x64]
  01cc8	e1520003	 cmp         r2, r3
  01ccc	8a0000ac	 bhi         |$LN23@XllpGpioSe@9|

; 831  : 	{
; 832  : 		aGpioPinAFMask = 0x3u << ((aGpioPinArray[i] & 0xF)*2);

  01cd0	e59d101c	 ldr         r1, [sp, #0x1C]
  01cd4	e3a03004	 mov         r3, #4
  01cd8	e0020391	 mul         r2, r1, r3
  01cdc	e59d30a0	 ldr         r3, [sp, #0xA0]
  01ce0	e0833002	 add         r3, r3, r2
  01ce4	e5933000	 ldr         r3, [r3]
  01ce8	e203100f	 and         r1, r3, #0xF
  01cec	e3a03002	 mov         r3, #2
  01cf0	e0020391	 mul         r2, r1, r3
  01cf4	e3a03003	 mov         r3, #3
  01cf8	e1a03213	 mov         r3, r3, lsl r2
  01cfc	e58d3018	 str         r3, [sp, #0x18]

; 833  : 		aGpioPinAFValue = aAfValueArray[i] << ((aGpioPinArray[i] & 0xF)*2);

  01d00	e59d101c	 ldr         r1, [sp, #0x1C]
  01d04	e3a03004	 mov         r3, #4
  01d08	e0020391	 mul         r2, r1, r3
  01d0c	e59d30a4	 ldr         r3, [sp, #0xA4]
  01d10	e0830002	 add         r0, r3, r2
  01d14	e59d101c	 ldr         r1, [sp, #0x1C]
  01d18	e3a03004	 mov         r3, #4
  01d1c	e0020391	 mul         r2, r1, r3
  01d20	e59d30a0	 ldr         r3, [sp, #0xA0]
  01d24	e0833002	 add         r3, r3, r2
  01d28	e5933000	 ldr         r3, [r3]
  01d2c	e203100f	 and         r1, r3, #0xF
  01d30	e3a03002	 mov         r3, #2
  01d34	e0020391	 mul         r2, r1, r3
  01d38	e5903000	 ldr         r3, [r0]
  01d3c	e1a03213	 mov         r3, r3, lsl r2
  01d40	e58d3020	 str         r3, [sp, #0x20]

; 834  : 		if (aGpioPinArray[i]>111)

  01d44	e59d101c	 ldr         r1, [sp, #0x1C]
  01d48	e3a03004	 mov         r3, #4
  01d4c	e0020391	 mul         r2, r1, r3
  01d50	e59d30a0	 ldr         r3, [sp, #0xA0]
  01d54	e0833002	 add         r3, r3, r2
  01d58	e5933000	 ldr         r3, [r3]
  01d5c	e353006f	 cmp         r3, #0x6F
  01d60	9a00000a	 bls         |$LN22@XllpGpioSe@9|

; 835  : 		{
; 836  : 			aAFnV3_U |= aGpioPinAFValue;

  01d64	e59d2054	 ldr         r2, [sp, #0x54]
  01d68	e59d3020	 ldr         r3, [sp, #0x20]
  01d6c	e1823003	 orr         r3, r2, r3
  01d70	e58d3054	 str         r3, [sp, #0x54]

; 837  : 			aMask3_U |= aGpioPinAFMask;

  01d74	e59d2070	 ldr         r2, [sp, #0x70]
  01d78	e59d3018	 ldr         r3, [sp, #0x18]
  01d7c	e1823003	 orr         r3, r2, r3
  01d80	e58d3070	 str         r3, [sp, #0x70]

; 838  : 			aSet3_U=XLLP_TRUE;

  01d84	e3a03001	 mov         r3, #1
  01d88	e58d3068	 str         r3, [sp, #0x68]
  01d8c	ea00007b	 b           |$LN21@XllpGpioSe@9|
  01d90		 |$LN22@XllpGpioSe@9|

; 839  : 		}
; 840  : 		else if (aGpioPinArray[i]>95)

  01d90	e59d101c	 ldr         r1, [sp, #0x1C]
  01d94	e3a03004	 mov         r3, #4
  01d98	e0020391	 mul         r2, r1, r3
  01d9c	e59d30a0	 ldr         r3, [sp, #0xA0]
  01da0	e0833002	 add         r3, r3, r2
  01da4	e5933000	 ldr         r3, [r3]
  01da8	e353005f	 cmp         r3, #0x5F
  01dac	9a00000a	 bls         |$LN20@XllpGpioSe@9|

; 841  : 		{
; 842  : 			aAFnV3_L |= aGpioPinAFValue;

  01db0	e59d200c	 ldr         r2, [sp, #0xC]
  01db4	e59d3020	 ldr         r3, [sp, #0x20]
  01db8	e1823003	 orr         r3, r2, r3
  01dbc	e58d300c	 str         r3, [sp, #0xC]

; 843  : 			aMask3_L |= aGpioPinAFMask;

  01dc0	e59d203c	 ldr         r2, [sp, #0x3C]
  01dc4	e59d3018	 ldr         r3, [sp, #0x18]
  01dc8	e1823003	 orr         r3, r2, r3
  01dcc	e58d303c	 str         r3, [sp, #0x3C]

; 844  : 			aSet3_L=XLLP_TRUE;

  01dd0	e3a03001	 mov         r3, #1
  01dd4	e58d3000	 str         r3, [sp]
  01dd8	ea000068	 b           |$LN19@XllpGpioSe@9|
  01ddc		 |$LN20@XllpGpioSe@9|

; 845  : 		}
; 846  : 		else if (aGpioPinArray[i]>79)

  01ddc	e59d101c	 ldr         r1, [sp, #0x1C]
  01de0	e3a03004	 mov         r3, #4
  01de4	e0020391	 mul         r2, r1, r3
  01de8	e59d30a0	 ldr         r3, [sp, #0xA0]
  01dec	e0833002	 add         r3, r3, r2
  01df0	e5933000	 ldr         r3, [r3]
  01df4	e353004f	 cmp         r3, #0x4F
  01df8	9a00000a	 bls         |$LN18@XllpGpioSe@9|

; 847  : 		{
; 848  : 			aAFnV2_U |= aGpioPinAFValue;

  01dfc	e59d202c	 ldr         r2, [sp, #0x2C]
  01e00	e59d3020	 ldr         r3, [sp, #0x20]
  01e04	e1823003	 orr         r3, r2, r3
  01e08	e58d302c	 str         r3, [sp, #0x2C]

; 849  : 			aMask2_U |= aGpioPinAFMask;

  01e0c	e59d2014	 ldr         r2, [sp, #0x14]
  01e10	e59d3018	 ldr         r3, [sp, #0x18]
  01e14	e1823003	 orr         r3, r2, r3
  01e18	e58d3014	 str         r3, [sp, #0x14]

; 850  : 			aSet2_U=XLLP_TRUE;

  01e1c	e3a03001	 mov         r3, #1
  01e20	e58d3050	 str         r3, [sp, #0x50]
  01e24	ea000055	 b           |$LN17@XllpGpioSe@9|
  01e28		 |$LN18@XllpGpioSe@9|

; 851  : 		}
; 852  : 		else if (aGpioPinArray[i]>63)

  01e28	e59d101c	 ldr         r1, [sp, #0x1C]
  01e2c	e3a03004	 mov         r3, #4
  01e30	e0020391	 mul         r2, r1, r3
  01e34	e59d30a0	 ldr         r3, [sp, #0xA0]
  01e38	e0833002	 add         r3, r3, r2
  01e3c	e5933000	 ldr         r3, [r3]
  01e40	e353003f	 cmp         r3, #0x3F
  01e44	9a00000a	 bls         |$LN16@XllpGpioSe@9|

; 853  : 		{
; 854  : 			aAFnV2_L |= aGpioPinAFValue;

  01e48	e59d2058	 ldr         r2, [sp, #0x58]
  01e4c	e59d3020	 ldr         r3, [sp, #0x20]
  01e50	e1823003	 orr         r3, r2, r3
  01e54	e58d3058	 str         r3, [sp, #0x58]

; 855  : 			aMask2_L |= aGpioPinAFMask;

  01e58	e59d2060	 ldr         r2, [sp, #0x60]
  01e5c	e59d3018	 ldr         r3, [sp, #0x18]
  01e60	e1823003	 orr         r3, r2, r3
  01e64	e58d3060	 str         r3, [sp, #0x60]

; 856  : 			aSet2_L=XLLP_TRUE;

  01e68	e3a03001	 mov         r3, #1
  01e6c	e58d3044	 str         r3, [sp, #0x44]
  01e70	ea000042	 b           |$LN15@XllpGpioSe@9|
  01e74		 |$LN16@XllpGpioSe@9|

; 857  : 		}
; 858  : 		else if (aGpioPinArray[i]>47)

  01e74	e59d101c	 ldr         r1, [sp, #0x1C]
  01e78	e3a03004	 mov         r3, #4
  01e7c	e0020391	 mul         r2, r1, r3
  01e80	e59d30a0	 ldr         r3, [sp, #0xA0]
  01e84	e0833002	 add         r3, r3, r2
  01e88	e5933000	 ldr         r3, [r3]
  01e8c	e353002f	 cmp         r3, #0x2F
  01e90	9a00000a	 bls         |$LN14@XllpGpioSe@9|

; 859  : 		{
; 860  : 			aAFnV1_U |= aGpioPinAFValue;

  01e94	e59d2030	 ldr         r2, [sp, #0x30]
  01e98	e59d3020	 ldr         r3, [sp, #0x20]
  01e9c	e1823003	 orr         r3, r2, r3
  01ea0	e58d3030	 str         r3, [sp, #0x30]

; 861  : 			aMask1_U |= aGpioPinAFMask;

  01ea4	e59d2024	 ldr         r2, [sp, #0x24]
  01ea8	e59d3018	 ldr         r3, [sp, #0x18]
  01eac	e1823003	 orr         r3, r2, r3
  01eb0	e58d3024	 str         r3, [sp, #0x24]

; 862  : 			aSet1_U=XLLP_TRUE;

  01eb4	e3a03001	 mov         r3, #1
  01eb8	e58d306c	 str         r3, [sp, #0x6C]
  01ebc	ea00002f	 b           |$LN13@XllpGpioSe@9|
  01ec0		 |$LN14@XllpGpioSe@9|

; 863  : 		}
; 864  : 		else if (aGpioPinArray[i]>31)

  01ec0	e59d101c	 ldr         r1, [sp, #0x1C]
  01ec4	e3a03004	 mov         r3, #4
  01ec8	e0020391	 mul         r2, r1, r3
  01ecc	e59d30a0	 ldr         r3, [sp, #0xA0]
  01ed0	e0833002	 add         r3, r3, r2
  01ed4	e5933000	 ldr         r3, [r3]
  01ed8	e353001f	 cmp         r3, #0x1F
  01edc	9a00000a	 bls         |$LN12@XllpGpioSe@9|

; 865  : 		{
; 866  : 			aAFnV1_L |= aGpioPinAFValue;

  01ee0	e59d205c	 ldr         r2, [sp, #0x5C]
  01ee4	e59d3020	 ldr         r3, [sp, #0x20]
  01ee8	e1823003	 orr         r3, r2, r3
  01eec	e58d305c	 str         r3, [sp, #0x5C]

; 867  : 			aMask1_L |= aGpioPinAFMask;

  01ef0	e59d2004	 ldr         r2, [sp, #4]
  01ef4	e59d3018	 ldr         r3, [sp, #0x18]
  01ef8	e1823003	 orr         r3, r2, r3
  01efc	e58d3004	 str         r3, [sp, #4]

; 868  : 			aSet1_L=XLLP_TRUE;

  01f00	e3a03001	 mov         r3, #1
  01f04	e58d3038	 str         r3, [sp, #0x38]
  01f08	ea00001c	 b           |$LN11@XllpGpioSe@9|
  01f0c		 |$LN12@XllpGpioSe@9|

; 869  : 		}
; 870  : 		else if (aGpioPinArray[i]>15)

  01f0c	e59d101c	 ldr         r1, [sp, #0x1C]
  01f10	e3a03004	 mov         r3, #4
  01f14	e0020391	 mul         r2, r1, r3
  01f18	e59d30a0	 ldr         r3, [sp, #0xA0]
  01f1c	e0833002	 add         r3, r3, r2
  01f20	e5933000	 ldr         r3, [r3]
  01f24	e353000f	 cmp         r3, #0xF
  01f28	9a00000a	 bls         |$LN10@XllpGpioSe@9|

; 871  : 		{
; 872  : 			aAFnV0_U |= aGpioPinAFValue;

  01f2c	e59d2010	 ldr         r2, [sp, #0x10]
  01f30	e59d3020	 ldr         r3, [sp, #0x20]
  01f34	e1823003	 orr         r3, r2, r3
  01f38	e58d3010	 str         r3, [sp, #0x10]

; 873  : 			aMask0_U |= aGpioPinAFMask;

  01f3c	e59d2008	 ldr         r2, [sp, #8]
  01f40	e59d3018	 ldr         r3, [sp, #0x18]
  01f44	e1823003	 orr         r3, r2, r3
  01f48	e58d3008	 str         r3, [sp, #8]

; 874  : 			aSet0_U=XLLP_TRUE;

  01f4c	e3a03001	 mov         r3, #1
  01f50	e58d3048	 str         r3, [sp, #0x48]

; 875  : 		}
; 876  : 		else 

  01f54	ea000009	 b           |$LN9@XllpGpioSe@9|
  01f58		 |$LN10@XllpGpioSe@9|

; 877  : 		{
; 878  : 			aAFnV0_L |= aGpioPinAFValue;

  01f58	e59d2028	 ldr         r2, [sp, #0x28]
  01f5c	e59d3020	 ldr         r3, [sp, #0x20]
  01f60	e1823003	 orr         r3, r2, r3
  01f64	e58d3028	 str         r3, [sp, #0x28]

; 879  : 			aMask0_L |= aGpioPinAFMask;

  01f68	e59d204c	 ldr         r2, [sp, #0x4C]
  01f6c	e59d3018	 ldr         r3, [sp, #0x18]
  01f70	e1823003	 orr         r3, r2, r3
  01f74	e58d304c	 str         r3, [sp, #0x4C]

; 880  : 			aSet0_L=XLLP_TRUE;

  01f78	e3a03001	 mov         r3, #1
  01f7c	e58d3034	 str         r3, [sp, #0x34]
  01f80		 |$LN9@XllpGpioSe@9|
  01f80		 |$LN11@XllpGpioSe@9|
  01f80		 |$LN13@XllpGpioSe@9|
  01f80		 |$LN15@XllpGpioSe@9|
  01f80		 |$LN17@XllpGpioSe@9|
  01f80		 |$LN19@XllpGpioSe@9|
  01f80		 |$LN21@XllpGpioSe@9|

; 881  : 		}
; 882  : 	}

  01f80	eaffff4b	 b           |$LN24@XllpGpioSe@9|
  01f84		 |$LN23@XllpGpioSe@9|

; 883  : 	if(aSet3_U)

  01f84	e59d3068	 ldr         r3, [sp, #0x68]
  01f88	e3530000	 cmp         r3, #0
  01f8c	0a000014	 beq         |$LN8@XllpGpioSe@9|

; 884  : 	{
; 885  : 		LockID = XllpLock(GAFR3_U);

  01f90	e3a0001d	 mov         r0, #0x1D
  01f94	eb000000	 bl          XllpLock
  01f98	e58d0074	 str         r0, [sp, #0x74]
  01f9c	e59d3074	 ldr         r3, [sp, #0x74]
  01fa0	e58d3040	 str         r3, [sp, #0x40]

; 886  : 		pGPIO->GAFR3_U=(((pGPIO->GAFR3_U&~aMask3_U)|aAFnV3_U)&~XLLP_GPIO_ALT_RESERVED_BITS);

  01fa4	e59d309c	 ldr         r3, [sp, #0x9C]
  01fa8	e2831070	 add         r1, r3, #0x70
  01fac	e59d3070	 ldr         r3, [sp, #0x70]
  01fb0	e1e02003	 mvn         r2, r3
  01fb4	e5913000	 ldr         r3, [r1]
  01fb8	e0032002	 and         r2, r3, r2
  01fbc	e59d3054	 ldr         r3, [sp, #0x54]
  01fc0	e1822003	 orr         r2, r2, r3
  01fc4	e3e034ff	 mvn         r3, #0xFF, 8
  01fc8	e223373f	 eor         r3, r3, #0x3F, 14
  01fcc	e0022003	 and         r2, r2, r3
  01fd0	e59d309c	 ldr         r3, [sp, #0x9C]
  01fd4	e2833070	 add         r3, r3, #0x70
  01fd8	e5832000	 str         r2, [r3]

; 887  : 		XllpUnlock(LockID);

  01fdc	e59d0040	 ldr         r0, [sp, #0x40]
  01fe0	eb000000	 bl          XllpUnlock
  01fe4		 |$LN8@XllpGpioSe@9|

; 888  : 	}
; 889  : 	if(aSet3_L)

  01fe4	e59d3000	 ldr         r3, [sp]
  01fe8	e3530000	 cmp         r3, #0
  01fec	0a000011	 beq         |$LN7@XllpGpioSe@9|

; 890  : 	{
; 891  : 		LockID = XllpLock(GAFR3_L);

  01ff0	e3a0001c	 mov         r0, #0x1C
  01ff4	eb000000	 bl          XllpLock
  01ff8	e58d0078	 str         r0, [sp, #0x78]
  01ffc	e59d3078	 ldr         r3, [sp, #0x78]
  02000	e58d3040	 str         r3, [sp, #0x40]

; 892  : 		pGPIO->GAFR3_L=((pGPIO->GAFR3_L&~aMask3_L)|aAFnV3_L);

  02004	e59d309c	 ldr         r3, [sp, #0x9C]
  02008	e283106c	 add         r1, r3, #0x6C
  0200c	e59d303c	 ldr         r3, [sp, #0x3C]
  02010	e1e02003	 mvn         r2, r3
  02014	e5913000	 ldr         r3, [r1]
  02018	e0032002	 and         r2, r3, r2
  0201c	e59d300c	 ldr         r3, [sp, #0xC]
  02020	e1822003	 orr         r2, r2, r3
  02024	e59d309c	 ldr         r3, [sp, #0x9C]
  02028	e283306c	 add         r3, r3, #0x6C
  0202c	e5832000	 str         r2, [r3]

; 893  : 		XllpUnlock(LockID);

  02030	e59d0040	 ldr         r0, [sp, #0x40]
  02034	eb000000	 bl          XllpUnlock
  02038		 |$LN7@XllpGpioSe@9|

; 894  : 	}
; 895  : 	if(aSet2_U)

  02038	e59d3050	 ldr         r3, [sp, #0x50]
  0203c	e3530000	 cmp         r3, #0
  02040	0a000011	 beq         |$LN6@XllpGpioSe@9|

; 896  : 	{
; 897  : 		LockID = XllpLock(GAFR2_U);

  02044	e3a0001b	 mov         r0, #0x1B
  02048	eb000000	 bl          XllpLock
  0204c	e58d007c	 str         r0, [sp, #0x7C]
  02050	e59d307c	 ldr         r3, [sp, #0x7C]
  02054	e58d3040	 str         r3, [sp, #0x40]

; 898  : 		pGPIO->GAFR2_U=((pGPIO->GAFR2_U&~aMask2_U)|aAFnV2_U);

  02058	e59d309c	 ldr         r3, [sp, #0x9C]
  0205c	e2831068	 add         r1, r3, #0x68
  02060	e59d3014	 ldr         r3, [sp, #0x14]
  02064	e1e02003	 mvn         r2, r3
  02068	e5913000	 ldr         r3, [r1]
  0206c	e0032002	 and         r2, r3, r2
  02070	e59d302c	 ldr         r3, [sp, #0x2C]
  02074	e1822003	 orr         r2, r2, r3
  02078	e59d309c	 ldr         r3, [sp, #0x9C]
  0207c	e2833068	 add         r3, r3, #0x68
  02080	e5832000	 str         r2, [r3]

; 899  : 		XllpUnlock(LockID);

  02084	e59d0040	 ldr         r0, [sp, #0x40]
  02088	eb000000	 bl          XllpUnlock
  0208c		 |$LN6@XllpGpioSe@9|

; 900  : 	}
; 901  : 	if(aSet2_L)

  0208c	e59d3044	 ldr         r3, [sp, #0x44]
  02090	e3530000	 cmp         r3, #0
  02094	0a000011	 beq         |$LN5@XllpGpioSe@9|

; 902  : 	{
; 903  : 		LockID = XllpLock(GAFR2_L);

  02098	e3a0001a	 mov         r0, #0x1A
  0209c	eb000000	 bl          XllpLock
  020a0	e58d0080	 str         r0, [sp, #0x80]
  020a4	e59d3080	 ldr         r3, [sp, #0x80]
  020a8	e58d3040	 str         r3, [sp, #0x40]

; 904  : 		pGPIO->GAFR2_L=((pGPIO->GAFR2_L&~aMask2_L)|aAFnV2_L);

  020ac	e59d309c	 ldr         r3, [sp, #0x9C]
  020b0	e2831064	 add         r1, r3, #0x64
  020b4	e59d3060	 ldr         r3, [sp, #0x60]
  020b8	e1e02003	 mvn         r2, r3
  020bc	e5913000	 ldr         r3, [r1]
  020c0	e0032002	 and         r2, r3, r2
  020c4	e59d3058	 ldr         r3, [sp, #0x58]
  020c8	e1822003	 orr         r2, r2, r3
  020cc	e59d309c	 ldr         r3, [sp, #0x9C]
  020d0	e2833064	 add         r3, r3, #0x64
  020d4	e5832000	 str         r2, [r3]

; 905  : 		XllpUnlock(LockID);

  020d8	e59d0040	 ldr         r0, [sp, #0x40]
  020dc	eb000000	 bl          XllpUnlock
  020e0		 |$LN5@XllpGpioSe@9|

; 906  : 	}
; 907  : 	if(aSet1_U)

  020e0	e59d306c	 ldr         r3, [sp, #0x6C]
  020e4	e3530000	 cmp         r3, #0
  020e8	0a000011	 beq         |$LN4@XllpGpioSe@9|

; 908  : 	{
; 909  : 		LockID = XllpLock(GAFR1_U);

  020ec	e3a00019	 mov         r0, #0x19
  020f0	eb000000	 bl          XllpLock
  020f4	e58d0084	 str         r0, [sp, #0x84]
  020f8	e59d3084	 ldr         r3, [sp, #0x84]
  020fc	e58d3040	 str         r3, [sp, #0x40]

; 910  : 		pGPIO->GAFR1_U=((pGPIO->GAFR1_U&~aMask1_U)|aAFnV1_U);

  02100	e59d309c	 ldr         r3, [sp, #0x9C]
  02104	e2831060	 add         r1, r3, #0x60
  02108	e59d3024	 ldr         r3, [sp, #0x24]
  0210c	e1e02003	 mvn         r2, r3
  02110	e5913000	 ldr         r3, [r1]
  02114	e0032002	 and         r2, r3, r2
  02118	e59d3030	 ldr         r3, [sp, #0x30]
  0211c	e1822003	 orr         r2, r2, r3
  02120	e59d309c	 ldr         r3, [sp, #0x9C]
  02124	e2833060	 add         r3, r3, #0x60
  02128	e5832000	 str         r2, [r3]

; 911  : 		XllpUnlock(LockID);

  0212c	e59d0040	 ldr         r0, [sp, #0x40]
  02130	eb000000	 bl          XllpUnlock
  02134		 |$LN4@XllpGpioSe@9|

; 912  : 	}
; 913  : 	if(aSet1_L)

  02134	e59d3038	 ldr         r3, [sp, #0x38]
  02138	e3530000	 cmp         r3, #0
  0213c	0a000011	 beq         |$LN3@XllpGpioSe@9|

; 914  : 	{
; 915  : 		LockID = XllpLock(GAFR1_L);

  02140	e3a00018	 mov         r0, #0x18
  02144	eb000000	 bl          XllpLock
  02148	e58d0088	 str         r0, [sp, #0x88]
  0214c	e59d3088	 ldr         r3, [sp, #0x88]
  02150	e58d3040	 str         r3, [sp, #0x40]

; 916  : 		pGPIO->GAFR1_L=((pGPIO->GAFR1_L&~aMask1_L)|aAFnV1_L);

  02154	e59d309c	 ldr         r3, [sp, #0x9C]
  02158	e283105c	 add         r1, r3, #0x5C
  0215c	e59d3004	 ldr         r3, [sp, #4]
  02160	e1e02003	 mvn         r2, r3
  02164	e5913000	 ldr         r3, [r1]
  02168	e0032002	 and         r2, r3, r2
  0216c	e59d305c	 ldr         r3, [sp, #0x5C]
  02170	e1822003	 orr         r2, r2, r3
  02174	e59d309c	 ldr         r3, [sp, #0x9C]
  02178	e283305c	 add         r3, r3, #0x5C
  0217c	e5832000	 str         r2, [r3]

; 917  : 		XllpUnlock(LockID);

  02180	e59d0040	 ldr         r0, [sp, #0x40]
  02184	eb000000	 bl          XllpUnlock
  02188		 |$LN3@XllpGpioSe@9|

; 918  : 	}
; 919  : 	if(aSet0_U)

  02188	e59d3048	 ldr         r3, [sp, #0x48]
  0218c	e3530000	 cmp         r3, #0
  02190	0a000011	 beq         |$LN2@XllpGpioSe@9|

; 920  : 	{
; 921  : 		LockID = XllpLock(GAFR0_U);

  02194	e3a00017	 mov         r0, #0x17
  02198	eb000000	 bl          XllpLock
  0219c	e58d008c	 str         r0, [sp, #0x8C]
  021a0	e59d308c	 ldr         r3, [sp, #0x8C]
  021a4	e58d3040	 str         r3, [sp, #0x40]

; 922  : 		pGPIO->GAFR0_U=((pGPIO->GAFR0_U&~aMask0_U)|aAFnV0_U);

  021a8	e59d309c	 ldr         r3, [sp, #0x9C]
  021ac	e2831058	 add         r1, r3, #0x58
  021b0	e59d3008	 ldr         r3, [sp, #8]
  021b4	e1e02003	 mvn         r2, r3
  021b8	e5913000	 ldr         r3, [r1]
  021bc	e0032002	 and         r2, r3, r2
  021c0	e59d3010	 ldr         r3, [sp, #0x10]
  021c4	e1822003	 orr         r2, r2, r3
  021c8	e59d309c	 ldr         r3, [sp, #0x9C]
  021cc	e2833058	 add         r3, r3, #0x58
  021d0	e5832000	 str         r2, [r3]

; 923  : 		XllpUnlock(LockID);

  021d4	e59d0040	 ldr         r0, [sp, #0x40]
  021d8	eb000000	 bl          XllpUnlock
  021dc		 |$LN2@XllpGpioSe@9|

; 924  : 	}
; 925  : 	if(aSet0_L)

  021dc	e59d3034	 ldr         r3, [sp, #0x34]
  021e0	e3530000	 cmp         r3, #0
  021e4	0a000011	 beq         |$LN1@XllpGpioSe@9|

; 926  : 	{
; 927  : 		LockID = XllpLock(GAFR0_L);

  021e8	e3a00016	 mov         r0, #0x16
  021ec	eb000000	 bl          XllpLock
  021f0	e58d0090	 str         r0, [sp, #0x90]
  021f4	e59d3090	 ldr         r3, [sp, #0x90]
  021f8	e58d3040	 str         r3, [sp, #0x40]

; 928  : 		pGPIO->GAFR0_L=((pGPIO->GAFR0_L&~aMask0_L)|aAFnV0_L);

  021fc	e59d309c	 ldr         r3, [sp, #0x9C]
  02200	e2831054	 add         r1, r3, #0x54
  02204	e59d304c	 ldr         r3, [sp, #0x4C]
  02208	e1e02003	 mvn         r2, r3
  0220c	e5913000	 ldr         r3, [r1]
  02210	e0032002	 and         r2, r3, r2
  02214	e59d3028	 ldr         r3, [sp, #0x28]
  02218	e1822003	 orr         r2, r2, r3
  0221c	e59d309c	 ldr         r3, [sp, #0x9C]
  02220	e2833054	 add         r3, r3, #0x54
  02224	e5832000	 str         r2, [r3]

; 929  : 		XllpUnlock(LockID);

  02228	e59d0040	 ldr         r0, [sp, #0x40]
  0222c	eb000000	 bl          XllpUnlock
  02230		 |$LN1@XllpGpioSe@9|

; 930  : 	}
; 931  : 	}

  02230	e28dd094	 add         sp, sp, #0x94
  02234	e89d6000	 ldmia       sp, {sp, lr}
  02238	e12fff1e	 bx          lr
  0223c		 |$M1197|

			 ENDP  ; |XllpGpioSetAlternateFn|

	EXPORT	|XllpGpioClearAlternateFn|

  00080			 AREA	 |.pdata|, PDATA
|$T1204| DCD	|$LN30@XllpGpioCl@2|
	DCD	0x40014b04
; Function compile flags: /Odtp

  0223c			 AREA	 |.text|, CODE, ARM

  0223c		 |XllpGpioClearAlternateFn| PROC

; 941  : 	{

  0223c		 |$LN30@XllpGpioCl@2|
  0223c	e1a0c00d	 mov         r12, sp
  02240	e92d0003	 stmdb       sp!, {r0, r1}
  02244	e92d5000	 stmdb       sp!, {r12, lr}
  02248	e24dd070	 sub         sp, sp, #0x70
  0224c		 |$M1201|

; 942  : 	XLLP_UINT32_T LockID;
; 943  : 	XLLP_UINT32_T aGpioPinAFMask;
; 944  : 	XLLP_UINT32_T aSizeArray;
; 945  : 	XLLP_UINT32_T aMask0_U, aMask0_L, aMask1_U, aMask1_L; 
; 946  : 	XLLP_UINT32_T aMask2_U, aMask2_L, aMask3_U, aMask3_L;
; 947  : 	XLLP_BOOL_T aSet0_U, aSet0_L, aSet1_U, aSet1_L; 
; 948  : 	XLLP_BOOL_T aSet2_U, aSet2_L, aSet3_U, aSet3_L;
; 949  : 	XLLP_UINT32_T i;
; 950  : 
; 951  : 	//determine size of array
; 952  : 	aSizeArray = aGpioPinArray[0];

  0224c	e59d307c	 ldr         r3, [sp, #0x7C]
  02250	e5933000	 ldr         r3, [r3]
  02254	e58d3040	 str         r3, [sp, #0x40]

; 953  : 	aMask0_U=aMask0_L=aMask1_U=aMask1_L=0;

  02258	e3a03000	 mov         r3, #0
  0225c	e58d3004	 str         r3, [sp, #4]
  02260	e59d3004	 ldr         r3, [sp, #4]
  02264	e58d3018	 str         r3, [sp, #0x18]
  02268	e59d3018	 ldr         r3, [sp, #0x18]
  0226c	e58d3034	 str         r3, [sp, #0x34]
  02270	e59d3034	 ldr         r3, [sp, #0x34]
  02274	e58d3008	 str         r3, [sp, #8]

; 954  : 	aMask2_U=aMask2_L=aMask3_U=aMask3_L=0;

  02278	e3a03000	 mov         r3, #0
  0227c	e58d3024	 str         r3, [sp, #0x24]
  02280	e59d3024	 ldr         r3, [sp, #0x24]
  02284	e58d304c	 str         r3, [sp, #0x4C]
  02288	e59d304c	 ldr         r3, [sp, #0x4C]
  0228c	e58d303c	 str         r3, [sp, #0x3C]
  02290	e59d303c	 ldr         r3, [sp, #0x3C]
  02294	e58d300c	 str         r3, [sp, #0xC]

; 955  : 	aSet0_U=aSet0_L=aSet1_U=aSet1_L=XLLP_FALSE;

  02298	e3a03000	 mov         r3, #0
  0229c	e58d3020	 str         r3, [sp, #0x20]
  022a0	e59d3020	 ldr         r3, [sp, #0x20]
  022a4	e58d3048	 str         r3, [sp, #0x48]
  022a8	e59d3048	 ldr         r3, [sp, #0x48]
  022ac	e58d301c	 str         r3, [sp, #0x1C]
  022b0	e59d301c	 ldr         r3, [sp, #0x1C]
  022b4	e58d3030	 str         r3, [sp, #0x30]

; 956  : 	aSet2_U=aSet2_L=aSet3_U=aSet3_L=XLLP_FALSE;

  022b8	e3a03000	 mov         r3, #0
  022bc	e58d3000	 str         r3, [sp]
  022c0	e59d3000	 ldr         r3, [sp]
  022c4	e58d3044	 str         r3, [sp, #0x44]
  022c8	e59d3044	 ldr         r3, [sp, #0x44]
  022cc	e58d302c	 str         r3, [sp, #0x2C]
  022d0	e59d302c	 ldr         r3, [sp, #0x2C]
  022d4	e58d3038	 str         r3, [sp, #0x38]

; 957  : 
; 958  : 	for(i=1; i<=aSizeArray; i++)

  022d8	e3a03001	 mov         r3, #1
  022dc	e58d3014	 str         r3, [sp, #0x14]
  022e0	ea000002	 b           |$LN25@XllpGpioCl@2|
  022e4		 |$LN24@XllpGpioCl@2|
  022e4	e59d3014	 ldr         r3, [sp, #0x14]
  022e8	e2833001	 add         r3, r3, #1
  022ec	e58d3014	 str         r3, [sp, #0x14]
  022f0		 |$LN25@XllpGpioCl@2|
  022f0	e59d2014	 ldr         r2, [sp, #0x14]
  022f4	e59d3040	 ldr         r3, [sp, #0x40]
  022f8	e1520003	 cmp         r2, r3
  022fc	8a00007b	 bhi         |$LN23@XllpGpioCl@2|

; 959  : 	{
; 960  : 		aGpioPinAFMask = 0x3u << ((aGpioPinArray[i] & 0xF)*2);

  02300	e59d1014	 ldr         r1, [sp, #0x14]
  02304	e3a03004	 mov         r3, #4
  02308	e0020391	 mul         r2, r1, r3
  0230c	e59d307c	 ldr         r3, [sp, #0x7C]
  02310	e0833002	 add         r3, r3, r2
  02314	e5933000	 ldr         r3, [r3]
  02318	e203100f	 and         r1, r3, #0xF
  0231c	e3a03002	 mov         r3, #2
  02320	e0020391	 mul         r2, r1, r3
  02324	e3a03003	 mov         r3, #3
  02328	e1a03213	 mov         r3, r3, lsl r2
  0232c	e58d3010	 str         r3, [sp, #0x10]

; 961  : 		if (aGpioPinArray[i]>111)

  02330	e59d1014	 ldr         r1, [sp, #0x14]
  02334	e3a03004	 mov         r3, #4
  02338	e0020391	 mul         r2, r1, r3
  0233c	e59d307c	 ldr         r3, [sp, #0x7C]
  02340	e0833002	 add         r3, r3, r2
  02344	e5933000	 ldr         r3, [r3]
  02348	e353006f	 cmp         r3, #0x6F
  0234c	9a000006	 bls         |$LN22@XllpGpioCl@2|

; 962  : 		{
; 963  : 			aMask3_U |= aGpioPinAFMask;

  02350	e59d204c	 ldr         r2, [sp, #0x4C]
  02354	e59d3010	 ldr         r3, [sp, #0x10]
  02358	e1823003	 orr         r3, r2, r3
  0235c	e58d304c	 str         r3, [sp, #0x4C]

; 964  : 			aSet3_U=XLLP_TRUE;

  02360	e3a03001	 mov         r3, #1
  02364	e58d3044	 str         r3, [sp, #0x44]
  02368	ea00005f	 b           |$LN21@XllpGpioCl@2|
  0236c		 |$LN22@XllpGpioCl@2|

; 965  : 		}
; 966  : 		else if (aGpioPinArray[i]>95)

  0236c	e59d1014	 ldr         r1, [sp, #0x14]
  02370	e3a03004	 mov         r3, #4
  02374	e0020391	 mul         r2, r1, r3
  02378	e59d307c	 ldr         r3, [sp, #0x7C]
  0237c	e0833002	 add         r3, r3, r2
  02380	e5933000	 ldr         r3, [r3]
  02384	e353005f	 cmp         r3, #0x5F
  02388	9a000006	 bls         |$LN20@XllpGpioCl@2|

; 967  : 		{
; 968  : 			aMask3_L |= aGpioPinAFMask;

  0238c	e59d2024	 ldr         r2, [sp, #0x24]
  02390	e59d3010	 ldr         r3, [sp, #0x10]
  02394	e1823003	 orr         r3, r2, r3
  02398	e58d3024	 str         r3, [sp, #0x24]

; 969  : 			aSet3_L=XLLP_TRUE;

  0239c	e3a03001	 mov         r3, #1
  023a0	e58d3000	 str         r3, [sp]
  023a4	ea000050	 b           |$LN19@XllpGpioCl@2|
  023a8		 |$LN20@XllpGpioCl@2|

; 970  : 		}
; 971  : 		else if (aGpioPinArray[i]>79)

  023a8	e59d1014	 ldr         r1, [sp, #0x14]
  023ac	e3a03004	 mov         r3, #4
  023b0	e0020391	 mul         r2, r1, r3
  023b4	e59d307c	 ldr         r3, [sp, #0x7C]
  023b8	e0833002	 add         r3, r3, r2
  023bc	e5933000	 ldr         r3, [r3]
  023c0	e353004f	 cmp         r3, #0x4F
  023c4	9a000006	 bls         |$LN18@XllpGpioCl@2|

; 972  : 		{
; 973  : 			aMask2_U |= aGpioPinAFMask;

  023c8	e59d200c	 ldr         r2, [sp, #0xC]
  023cc	e59d3010	 ldr         r3, [sp, #0x10]
  023d0	e1823003	 orr         r3, r2, r3
  023d4	e58d300c	 str         r3, [sp, #0xC]

; 974  : 			aSet2_U=XLLP_TRUE;

  023d8	e3a03001	 mov         r3, #1
  023dc	e58d3038	 str         r3, [sp, #0x38]
  023e0	ea000041	 b           |$LN17@XllpGpioCl@2|
  023e4		 |$LN18@XllpGpioCl@2|

; 975  : 		}
; 976  : 		else if (aGpioPinArray[i]>63)

  023e4	e59d1014	 ldr         r1, [sp, #0x14]
  023e8	e3a03004	 mov         r3, #4
  023ec	e0020391	 mul         r2, r1, r3
  023f0	e59d307c	 ldr         r3, [sp, #0x7C]
  023f4	e0833002	 add         r3, r3, r2
  023f8	e5933000	 ldr         r3, [r3]
  023fc	e353003f	 cmp         r3, #0x3F
  02400	9a000006	 bls         |$LN16@XllpGpioCl@2|

; 977  : 		{
; 978  : 			aMask2_L |= aGpioPinAFMask;

  02404	e59d203c	 ldr         r2, [sp, #0x3C]
  02408	e59d3010	 ldr         r3, [sp, #0x10]
  0240c	e1823003	 orr         r3, r2, r3
  02410	e58d303c	 str         r3, [sp, #0x3C]

; 979  : 			aSet2_L=XLLP_TRUE;

  02414	e3a03001	 mov         r3, #1
  02418	e58d302c	 str         r3, [sp, #0x2C]
  0241c	ea000032	 b           |$LN15@XllpGpioCl@2|
  02420		 |$LN16@XllpGpioCl@2|

; 980  : 		}
; 981  : 		else if (aGpioPinArray[i]>47)

  02420	e59d1014	 ldr         r1, [sp, #0x14]
  02424	e3a03004	 mov         r3, #4
  02428	e0020391	 mul         r2, r1, r3
  0242c	e59d307c	 ldr         r3, [sp, #0x7C]
  02430	e0833002	 add         r3, r3, r2
  02434	e5933000	 ldr         r3, [r3]
  02438	e353002f	 cmp         r3, #0x2F
  0243c	9a000006	 bls         |$LN14@XllpGpioCl@2|

; 982  : 		{
; 983  : 			aMask1_U |= aGpioPinAFMask;

  02440	e59d2018	 ldr         r2, [sp, #0x18]
  02444	e59d3010	 ldr         r3, [sp, #0x10]
  02448	e1823003	 orr         r3, r2, r3
  0244c	e58d3018	 str         r3, [sp, #0x18]

; 984  : 			aSet1_U=XLLP_TRUE;

  02450	e3a03001	 mov         r3, #1
  02454	e58d3048	 str         r3, [sp, #0x48]
  02458	ea000023	 b           |$LN13@XllpGpioCl@2|
  0245c		 |$LN14@XllpGpioCl@2|

; 985  : 		}
; 986  : 		else if (aGpioPinArray[i]>31)

  0245c	e59d1014	 ldr         r1, [sp, #0x14]
  02460	e3a03004	 mov         r3, #4
  02464	e0020391	 mul         r2, r1, r3
  02468	e59d307c	 ldr         r3, [sp, #0x7C]
  0246c	e0833002	 add         r3, r3, r2
  02470	e5933000	 ldr         r3, [r3]
  02474	e353001f	 cmp         r3, #0x1F
  02478	9a000006	 bls         |$LN12@XllpGpioCl@2|

; 987  : 		{
; 988  : 			aMask1_L |= aGpioPinAFMask;

  0247c	e59d2004	 ldr         r2, [sp, #4]
  02480	e59d3010	 ldr         r3, [sp, #0x10]
  02484	e1823003	 orr         r3, r2, r3
  02488	e58d3004	 str         r3, [sp, #4]

; 989  : 			aSet1_L=XLLP_TRUE;

  0248c	e3a03001	 mov         r3, #1
  02490	e58d3020	 str         r3, [sp, #0x20]
  02494	ea000014	 b           |$LN11@XllpGpioCl@2|
  02498		 |$LN12@XllpGpioCl@2|

; 990  : 		}
; 991  : 		else if (aGpioPinArray[i]>15)

  02498	e59d1014	 ldr         r1, [sp, #0x14]
  0249c	e3a03004	 mov         r3, #4
  024a0	e0020391	 mul         r2, r1, r3
  024a4	e59d307c	 ldr         r3, [sp, #0x7C]
  024a8	e0833002	 add         r3, r3, r2
  024ac	e5933000	 ldr         r3, [r3]
  024b0	e353000f	 cmp         r3, #0xF
  024b4	9a000006	 bls         |$LN10@XllpGpioCl@2|

; 992  : 		{
; 993  : 			aMask0_U |= aGpioPinAFMask;

  024b8	e59d2008	 ldr         r2, [sp, #8]
  024bc	e59d3010	 ldr         r3, [sp, #0x10]
  024c0	e1823003	 orr         r3, r2, r3
  024c4	e58d3008	 str         r3, [sp, #8]

; 994  : 			aSet0_U=XLLP_TRUE;

  024c8	e3a03001	 mov         r3, #1
  024cc	e58d3030	 str         r3, [sp, #0x30]

; 995  : 		}
; 996  : 		else

  024d0	ea000005	 b           |$LN9@XllpGpioCl@2|
  024d4		 |$LN10@XllpGpioCl@2|

; 997  : 		{
; 998  : 			aMask0_L |= aGpioPinAFMask;

  024d4	e59d2034	 ldr         r2, [sp, #0x34]
  024d8	e59d3010	 ldr         r3, [sp, #0x10]
  024dc	e1823003	 orr         r3, r2, r3
  024e0	e58d3034	 str         r3, [sp, #0x34]

; 999  : 			aSet0_L=XLLP_TRUE;

  024e4	e3a03001	 mov         r3, #1
  024e8	e58d301c	 str         r3, [sp, #0x1C]
  024ec		 |$LN9@XllpGpioCl@2|
  024ec		 |$LN11@XllpGpioCl@2|
  024ec		 |$LN13@XllpGpioCl@2|
  024ec		 |$LN15@XllpGpioCl@2|
  024ec		 |$LN17@XllpGpioCl@2|
  024ec		 |$LN19@XllpGpioCl@2|
  024ec		 |$LN21@XllpGpioCl@2|

; 1000 : 		}
; 1001 : 	}

  024ec	eaffff7c	 b           |$LN24@XllpGpioCl@2|
  024f0		 |$LN23@XllpGpioCl@2|

; 1002 : 	if(aSet3_U)

  024f0	e59d3044	 ldr         r3, [sp, #0x44]
  024f4	e3530000	 cmp         r3, #0
  024f8	0a000012	 beq         |$LN8@XllpGpioCl@2|

; 1003 : 	{
; 1004 : 		LockID = XllpLock(GAFR3_U);

  024fc	e3a0001d	 mov         r0, #0x1D
  02500	eb000000	 bl          XllpLock
  02504	e58d0050	 str         r0, [sp, #0x50]
  02508	e59d3050	 ldr         r3, [sp, #0x50]
  0250c	e58d3028	 str         r3, [sp, #0x28]

; 1005 : 		pGPIO->GAFR3_U=((pGPIO->GAFR3_U&~aMask3_U)&~XLLP_GPIO_ALT_RESERVED_BITS);

  02510	e59d3078	 ldr         r3, [sp, #0x78]
  02514	e2831070	 add         r1, r3, #0x70
  02518	e59d304c	 ldr         r3, [sp, #0x4C]
  0251c	e1e02003	 mvn         r2, r3
  02520	e5913000	 ldr         r3, [r1]
  02524	e0032002	 and         r2, r3, r2
  02528	e3e034ff	 mvn         r3, #0xFF, 8
  0252c	e223373f	 eor         r3, r3, #0x3F, 14
  02530	e0022003	 and         r2, r2, r3
  02534	e59d3078	 ldr         r3, [sp, #0x78]
  02538	e2833070	 add         r3, r3, #0x70
  0253c	e5832000	 str         r2, [r3]

; 1006 : 		XllpUnlock(LockID);

  02540	e59d0028	 ldr         r0, [sp, #0x28]
  02544	eb000000	 bl          XllpUnlock
  02548		 |$LN8@XllpGpioCl@2|

; 1007 : 	}
; 1008 : 	if(aSet3_L)

  02548	e59d3000	 ldr         r3, [sp]
  0254c	e3530000	 cmp         r3, #0
  02550	0a00000f	 beq         |$LN7@XllpGpioCl@2|

; 1009 : 	{
; 1010 : 		LockID = XllpLock(GAFR3_L);

  02554	e3a0001c	 mov         r0, #0x1C
  02558	eb000000	 bl          XllpLock
  0255c	e58d0054	 str         r0, [sp, #0x54]
  02560	e59d3054	 ldr         r3, [sp, #0x54]
  02564	e58d3028	 str         r3, [sp, #0x28]

; 1011 : 		pGPIO->GAFR3_L=(pGPIO->GAFR3_L&~aMask3_L);

  02568	e59d3078	 ldr         r3, [sp, #0x78]
  0256c	e283106c	 add         r1, r3, #0x6C
  02570	e59d3024	 ldr         r3, [sp, #0x24]
  02574	e1e02003	 mvn         r2, r3
  02578	e5913000	 ldr         r3, [r1]
  0257c	e0032002	 and         r2, r3, r2
  02580	e59d3078	 ldr         r3, [sp, #0x78]
  02584	e283306c	 add         r3, r3, #0x6C
  02588	e5832000	 str         r2, [r3]

; 1012 : 		XllpUnlock(LockID);

  0258c	e59d0028	 ldr         r0, [sp, #0x28]
  02590	eb000000	 bl          XllpUnlock
  02594		 |$LN7@XllpGpioCl@2|

; 1013 : 	}
; 1014 : 	if(aSet2_U)

  02594	e59d3038	 ldr         r3, [sp, #0x38]
  02598	e3530000	 cmp         r3, #0
  0259c	0a00000f	 beq         |$LN6@XllpGpioCl@2|

; 1015 : 	{
; 1016 : 		LockID = XllpLock(GAFR2_U);

  025a0	e3a0001b	 mov         r0, #0x1B
  025a4	eb000000	 bl          XllpLock
  025a8	e58d0058	 str         r0, [sp, #0x58]
  025ac	e59d3058	 ldr         r3, [sp, #0x58]
  025b0	e58d3028	 str         r3, [sp, #0x28]

; 1017 : 		pGPIO->GAFR2_U=(pGPIO->GAFR2_U&~aMask2_U);

  025b4	e59d3078	 ldr         r3, [sp, #0x78]
  025b8	e2831068	 add         r1, r3, #0x68
  025bc	e59d300c	 ldr         r3, [sp, #0xC]
  025c0	e1e02003	 mvn         r2, r3
  025c4	e5913000	 ldr         r3, [r1]
  025c8	e0032002	 and         r2, r3, r2
  025cc	e59d3078	 ldr         r3, [sp, #0x78]
  025d0	e2833068	 add         r3, r3, #0x68
  025d4	e5832000	 str         r2, [r3]

; 1018 : 		XllpUnlock(LockID);

  025d8	e59d0028	 ldr         r0, [sp, #0x28]
  025dc	eb000000	 bl          XllpUnlock
  025e0		 |$LN6@XllpGpioCl@2|

; 1019 : 	}
; 1020 : 	if(aSet2_L)

  025e0	e59d302c	 ldr         r3, [sp, #0x2C]
  025e4	e3530000	 cmp         r3, #0
  025e8	0a00000f	 beq         |$LN5@XllpGpioCl@2|

; 1021 : 	{
; 1022 : 		LockID = XllpLock(GAFR2_L);

  025ec	e3a0001a	 mov         r0, #0x1A
  025f0	eb000000	 bl          XllpLock
  025f4	e58d005c	 str         r0, [sp, #0x5C]
  025f8	e59d305c	 ldr         r3, [sp, #0x5C]
  025fc	e58d3028	 str         r3, [sp, #0x28]

; 1023 : 		pGPIO->GAFR2_L=(pGPIO->GAFR2_L&~aMask2_L);

  02600	e59d3078	 ldr         r3, [sp, #0x78]
  02604	e2831064	 add         r1, r3, #0x64
  02608	e59d303c	 ldr         r3, [sp, #0x3C]
  0260c	e1e02003	 mvn         r2, r3
  02610	e5913000	 ldr         r3, [r1]
  02614	e0032002	 and         r2, r3, r2
  02618	e59d3078	 ldr         r3, [sp, #0x78]
  0261c	e2833064	 add         r3, r3, #0x64
  02620	e5832000	 str         r2, [r3]

; 1024 : 		XllpUnlock(LockID);

  02624	e59d0028	 ldr         r0, [sp, #0x28]
  02628	eb000000	 bl          XllpUnlock
  0262c		 |$LN5@XllpGpioCl@2|

; 1025 : 	}
; 1026 : 	if(aSet1_U)

  0262c	e59d3048	 ldr         r3, [sp, #0x48]
  02630	e3530000	 cmp         r3, #0
  02634	0a00000f	 beq         |$LN4@XllpGpioCl@2|

; 1027 : 	{
; 1028 : 		LockID = XllpLock(GAFR1_U);

  02638	e3a00019	 mov         r0, #0x19
  0263c	eb000000	 bl          XllpLock
  02640	e58d0060	 str         r0, [sp, #0x60]
  02644	e59d3060	 ldr         r3, [sp, #0x60]
  02648	e58d3028	 str         r3, [sp, #0x28]

; 1029 : 		pGPIO->GAFR1_U=(pGPIO->GAFR1_U&~aMask1_U);

  0264c	e59d3078	 ldr         r3, [sp, #0x78]
  02650	e2831060	 add         r1, r3, #0x60
  02654	e59d3018	 ldr         r3, [sp, #0x18]
  02658	e1e02003	 mvn         r2, r3
  0265c	e5913000	 ldr         r3, [r1]
  02660	e0032002	 and         r2, r3, r2
  02664	e59d3078	 ldr         r3, [sp, #0x78]
  02668	e2833060	 add         r3, r3, #0x60
  0266c	e5832000	 str         r2, [r3]

; 1030 : 		XllpUnlock(LockID);

  02670	e59d0028	 ldr         r0, [sp, #0x28]
  02674	eb000000	 bl          XllpUnlock
  02678		 |$LN4@XllpGpioCl@2|

; 1031 : 	}
; 1032 : 	if(aSet1_L)

  02678	e59d3020	 ldr         r3, [sp, #0x20]
  0267c	e3530000	 cmp         r3, #0
  02680	0a00000f	 beq         |$LN3@XllpGpioCl@2|

; 1033 : 	{
; 1034 : 		LockID = XllpLock(GAFR1_L);

  02684	e3a00018	 mov         r0, #0x18
  02688	eb000000	 bl          XllpLock
  0268c	e58d0064	 str         r0, [sp, #0x64]
  02690	e59d3064	 ldr         r3, [sp, #0x64]
  02694	e58d3028	 str         r3, [sp, #0x28]

; 1035 : 		pGPIO->GAFR1_L=(pGPIO->GAFR1_L&~aMask1_L);

  02698	e59d3078	 ldr         r3, [sp, #0x78]
  0269c	e283105c	 add         r1, r3, #0x5C
  026a0	e59d3004	 ldr         r3, [sp, #4]
  026a4	e1e02003	 mvn         r2, r3
  026a8	e5913000	 ldr         r3, [r1]
  026ac	e0032002	 and         r2, r3, r2
  026b0	e59d3078	 ldr         r3, [sp, #0x78]
  026b4	e283305c	 add         r3, r3, #0x5C
  026b8	e5832000	 str         r2, [r3]

; 1036 : 		XllpUnlock(LockID);

  026bc	e59d0028	 ldr         r0, [sp, #0x28]
  026c0	eb000000	 bl          XllpUnlock
  026c4		 |$LN3@XllpGpioCl@2|

; 1037 : 	}
; 1038 : 	if(aSet0_U)

  026c4	e59d3030	 ldr         r3, [sp, #0x30]
  026c8	e3530000	 cmp         r3, #0
  026cc	0a00000f	 beq         |$LN2@XllpGpioCl@2|

; 1039 : 	{
; 1040 : 		LockID = XllpLock(GAFR0_U);

  026d0	e3a00017	 mov         r0, #0x17
  026d4	eb000000	 bl          XllpLock
  026d8	e58d0068	 str         r0, [sp, #0x68]
  026dc	e59d3068	 ldr         r3, [sp, #0x68]
  026e0	e58d3028	 str         r3, [sp, #0x28]

; 1041 : 		pGPIO->GAFR0_U=(pGPIO->GAFR0_U&~aMask0_U);

  026e4	e59d3078	 ldr         r3, [sp, #0x78]
  026e8	e2831058	 add         r1, r3, #0x58
  026ec	e59d3008	 ldr         r3, [sp, #8]
  026f0	e1e02003	 mvn         r2, r3
  026f4	e5913000	 ldr         r3, [r1]
  026f8	e0032002	 and         r2, r3, r2
  026fc	e59d3078	 ldr         r3, [sp, #0x78]
  02700	e2833058	 add         r3, r3, #0x58
  02704	e5832000	 str         r2, [r3]

; 1042 : 		XllpUnlock(LockID);

  02708	e59d0028	 ldr         r0, [sp, #0x28]
  0270c	eb000000	 bl          XllpUnlock
  02710		 |$LN2@XllpGpioCl@2|

; 1043 : 	}
; 1044 : 	if(aSet0_L)

  02710	e59d301c	 ldr         r3, [sp, #0x1C]
  02714	e3530000	 cmp         r3, #0
  02718	0a00000f	 beq         |$LN1@XllpGpioCl@2|

; 1045 : 	{
; 1046 : 		LockID = XllpLock(GAFR0_L);

  0271c	e3a00016	 mov         r0, #0x16
  02720	eb000000	 bl          XllpLock
  02724	e58d006c	 str         r0, [sp, #0x6C]
  02728	e59d306c	 ldr         r3, [sp, #0x6C]
  0272c	e58d3028	 str         r3, [sp, #0x28]

; 1047 : 		pGPIO->GAFR0_L=(pGPIO->GAFR0_L&~aMask0_L);

  02730	e59d3078	 ldr         r3, [sp, #0x78]
  02734	e2831054	 add         r1, r3, #0x54
  02738	e59d3034	 ldr         r3, [sp, #0x34]
  0273c	e1e02003	 mvn         r2, r3
  02740	e5913000	 ldr         r3, [r1]
  02744	e0032002	 and         r2, r3, r2
  02748	e59d3078	 ldr         r3, [sp, #0x78]
  0274c	e2833054	 add         r3, r3, #0x54
  02750	e5832000	 str         r2, [r3]

; 1048 : 		XllpUnlock(LockID);

  02754	e59d0028	 ldr         r0, [sp, #0x28]
  02758	eb000000	 bl          XllpUnlock
  0275c		 |$LN1@XllpGpioCl@2|

; 1049 : 	}
; 1050 : 	}

  0275c	e28dd070	 add         sp, sp, #0x70
  02760	e89d6000	 ldmia       sp, {sp, lr}
  02764	e12fff1e	 bx          lr
  02768		 |$M1202|

			 ENDP  ; |XllpGpioClearAlternateFn|

	END
