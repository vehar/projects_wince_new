; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_ci.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|XllpCISetFrameRate|

  00000			 AREA	 |.pdata|, PDATA
|$T2657| DCD	|$LN5@XllpCISetF|
	DCD	0x40001804
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_ci.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpCISetFrameRate| PROC

; 44   : {

  00000		 |$LN5@XllpCISetF|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M2654|

; 45   :     unsigned int value;
; 46   :     
; 47   :     // write cicr4
; 48   :     value = READ_REG(XLLP_CICR4);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833010	 add         r3, r3, #0x10
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 49   :     value &= ~(XLLP_CI_CICR4_FR_RATE_SMASK << XLLP_CI_CICR4_FR_RATE_SHIFT);

  00020	e59d2000	 ldr         r2, [sp]
  00024	e3e03c07	 mvn         r3, #7, 24
  00028	e0023003	 and         r3, r2, r3
  0002c	e58d3000	 str         r3, [sp]

; 50   :     value |= (unsigned)frate << XLLP_CI_CICR4_FR_RATE_SHIFT;

  00030	e59d3010	 ldr         r3, [sp, #0x10]
  00034	e1a02403	 mov         r2, r3, lsl #8
  00038	e59d3000	 ldr         r3, [sp]
  0003c	e1833002	 orr         r3, r3, r2
  00040	e58d3000	 str         r3, [sp]

; 51   :     WRITE_REG(XLLP_CICR4, value);   

  00044	e59d300c	 ldr         r3, [sp, #0xC]
  00048	e2832010	 add         r2, r3, #0x10
  0004c	e59d3000	 ldr         r3, [sp]
  00050	e5823000	 str         r3, [r2]

; 52   : }

  00054	e28dd004	 add         sp, sp, #4
  00058	e89d6000	 ldmia       sp, {sp, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M2655|

			 ENDP  ; |XllpCISetFrameRate|

	EXPORT	|XllpCIGetFrameRate|

  00008			 AREA	 |.pdata|, PDATA
|$T2663| DCD	|$LN5@XllpCIGetF|
	DCD	0x40001004
; Function compile flags: /Odtp

  00060			 AREA	 |.text|, CODE, ARM

  00060		 |XllpCIGetFrameRate| PROC

; 55   : {

  00060		 |$LN5@XllpCIGetF|
  00060	e1a0c00d	 mov         r12, sp
  00064	e92d0001	 stmdb       sp!, {r0}
  00068	e92d5000	 stmdb       sp!, {r12, lr}
  0006c	e24dd008	 sub         sp, sp, #8
  00070		 |$M2660|

; 56   :     unsigned int value;
; 57   :     value = READ_REG(XLLP_CICR4);

  00070	e59d3010	 ldr         r3, [sp, #0x10]
  00074	e2833010	 add         r3, r3, #0x10
  00078	e5933000	 ldr         r3, [r3]
  0007c	e58d3000	 str         r3, [sp]

; 58   :     return (XLLP_CI_FRAME_CAPTURE_RATE)((value >> XLLP_CI_CICR4_FR_RATE_SHIFT) & XLLP_CI_CICR4_FR_RATE_SMASK);

  00080	e59d3000	 ldr         r3, [sp]
  00084	e1a03a83	 mov         r3, r3, lsl #21
  00088	e1a03ea3	 mov         r3, r3, lsr #29
  0008c	e58d3004	 str         r3, [sp, #4]

; 59   : }

  00090	e59d0004	 ldr         r0, [sp, #4]
  00094	e28dd008	 add         sp, sp, #8
  00098	e89d6000	 ldmia       sp, {sp, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$M2661|

			 ENDP  ; |XllpCIGetFrameRate|

	EXPORT	|XllpCISetImageFormat|

  00010			 AREA	 |.pdata|, PDATA
|$T2705| DCD	|$LN69@XllpCISetI|
	DCD	0x4000f004
; Function compile flags: /Odtp

  000a0			 AREA	 |.text|, CODE, ARM

  000a0		 |XllpCISetImageFormat| PROC

; 62   : {

  000a0		 |$LN69@XllpCISetI|
  000a0	e1a0c00d	 mov         r12, sp
  000a4	e92d0007	 stmdb       sp!, {r0 - r2}
  000a8	e92d5000	 stmdb       sp!, {r12, lr}
  000ac	e24dd038	 sub         sp, sp, #0x38
  000b0		 |$M2702|

; 63   :     unsigned int value, tbit, rgbt_conv, rgb_conv, rgb_f, ycbcr_f, rgb_bpp, raw_bpp, cspace;
; 64   : 
; 65   :     // write cicr1: preserve ppl value and data width value
; 66   :     value = READ_REG(XLLP_CICR1);

  000b0	e59d3040	 ldr         r3, [sp, #0x40]
  000b4	e2833004	 add         r3, r3, #4
  000b8	e5933000	 ldr         r3, [r3]
  000bc	e58d3000	 str         r3, [sp]

; 67   :     value &= ( (XLLP_CI_CICR1_PPL_SMASK << XLLP_CI_CICR1_PPL_SHIFT) | ((XLLP_CI_CICR1_DW_SMASK) << XLLP_CI_CICR1_DW_SHIFT));

  000c0	e59d2000	 ldr         r2, [sp]
  000c4	e59f3390	 ldr         r3, [pc, #0x390]
  000c8	e0023003	 and         r3, r2, r3
  000cc	e58d3000	 str         r3, [sp]

; 68   :     tbit = rgbt_conv = rgb_conv = rgb_f = ycbcr_f = rgb_bpp = raw_bpp = cspace = 0;

  000d0	e3a03000	 mov         r3, #0
  000d4	e58d301c	 str         r3, [sp, #0x1C]
  000d8	e59d301c	 ldr         r3, [sp, #0x1C]
  000dc	e58d3008	 str         r3, [sp, #8]
  000e0	e59d3008	 ldr         r3, [sp, #8]
  000e4	e58d3004	 str         r3, [sp, #4]
  000e8	e59d3004	 ldr         r3, [sp, #4]
  000ec	e58d300c	 str         r3, [sp, #0xC]
  000f0	e59d300c	 ldr         r3, [sp, #0xC]
  000f4	e58d3014	 str         r3, [sp, #0x14]
  000f8	e59d3014	 ldr         r3, [sp, #0x14]
  000fc	e58d3018	 str         r3, [sp, #0x18]
  00100	e59d3018	 ldr         r3, [sp, #0x18]
  00104	e58d3010	 str         r3, [sp, #0x10]
  00108	e59d3010	 ldr         r3, [sp, #0x10]
  0010c	e58d3020	 str         r3, [sp, #0x20]

; 69   :     switch(input_format) {

  00110	e59d3044	 ldr         r3, [sp, #0x44]
  00114	e58d3024	 str         r3, [sp, #0x24]
  00118	e59d3024	 ldr         r3, [sp, #0x24]
  0011c	e353000f	 cmp         r3, #0xF
  00120	8a000089	 bhi         |$LN1@XllpCISetI|
  00124	e59d2024	 ldr         r2, [sp, #0x24]
  00128	e1a03102	 mov         r3, r2, lsl #2
  0012c	e083300f	 add         r3, r3, pc
  00130	e5933004	 ldr         r3, [r3, #4]
  00134	e08ff003	 add         pc, pc, r3
  00138		 |$LN37@XllpCISetI|
  00138		 |$LN36@XllpCISetI|
  00138		 |$LN38@XllpCISetI|
  00138	0000003c	 DCD         0x3c
  0013c		 |$LN39@XllpCISetI|
  0013c	00000050	 DCD         0x50
  00140		 |$LN40@XllpCISetI|
  00140	00000064	 DCD         0x64
  00144		 |$LN41@XllpCISetI|
  00144	00000078	 DCD         0x78
  00148		 |$LN42@XllpCISetI|
  00148	00000078	 DCD         0x78
  0014c		 |$LN43@XllpCISetI|
  0014c	00000098	 DCD         0x98
  00150		 |$LN44@XllpCISetI|
  00150	000000ac	 DCD         0xac
  00154		 |$LN45@XllpCISetI|
  00154	000000fc	 DCD         0xfc
  00158		 |$LN46@XllpCISetI|
  00158	00000118	 DCD         0x118
  0015c		 |$LN47@XllpCISetI|
  0015c	00000140	 DCD         0x140
  00160		 |$LN48@XllpCISetI|
  00160	00000210	 DCD         0x210
  00164		 |$LN49@XllpCISetI|
  00164	00000210	 DCD         0x210
  00168		 |$LN50@XllpCISetI|
  00168	00000210	 DCD         0x210
  0016c		 |$LN51@XllpCISetI|
  0016c	00000210	 DCD         0x210
  00170		 |$LN52@XllpCISetI|
  00170	00000210	 DCD         0x210
  00174		 |$LN53@XllpCISetI|
  00174	00000140	 DCD         0x140
  00178		 |$LN25@XllpCISetI|

; 70   :     case XLLP_CI_RAW8:
; 71   :         cspace = 0;

  00178	e3a03000	 mov         r3, #0
  0017c	e58d301c	 str         r3, [sp, #0x1C]

; 72   :         raw_bpp = 0;

  00180	e3a03000	 mov         r3, #0
  00184	e58d3008	 str         r3, [sp, #8]

; 73   :         break;

  00188	ea00006f	 b           |$LN26@XllpCISetI|
  0018c		 |$LN24@XllpCISetI|

; 74   :     case XLLP_CI_RAW9:
; 75   :         cspace = 0;

  0018c	e3a03000	 mov         r3, #0
  00190	e58d301c	 str         r3, [sp, #0x1C]

; 76   :         raw_bpp = 1;

  00194	e3a03001	 mov         r3, #1
  00198	e58d3008	 str         r3, [sp, #8]

; 77   :         break;

  0019c	ea00006a	 b           |$LN26@XllpCISetI|
  001a0		 |$LN23@XllpCISetI|

; 78   :     case XLLP_CI_RAW10:
; 79   :         cspace = 0;

  001a0	e3a03000	 mov         r3, #0
  001a4	e58d301c	 str         r3, [sp, #0x1C]

; 80   :         raw_bpp = 2;

  001a8	e3a03002	 mov         r3, #2
  001ac	e58d3008	 str         r3, [sp, #8]

; 81   :         break;

  001b0	ea000065	 b           |$LN26@XllpCISetI|
  001b4		 |$LN22@XllpCISetI|

; 82   :     case XLLP_CI_YCBCR422:
; 83   :     case XLLP_CI_YCBCR422_PLANAR:
; 84   :         cspace = 2;

  001b4	e3a03002	 mov         r3, #2
  001b8	e58d301c	 str         r3, [sp, #0x1C]

; 85   :         if (output_format == XLLP_CI_YCBCR422_PLANAR) {

  001bc	e59d3048	 ldr         r3, [sp, #0x48]
  001c0	e3530004	 cmp         r3, #4
  001c4	1a000001	 bne         |$LN21@XllpCISetI|

; 86   :             ycbcr_f = 1;

  001c8	e3a03001	 mov         r3, #1
  001cc	e58d300c	 str         r3, [sp, #0xC]
  001d0		 |$LN21@XllpCISetI|

; 87   :         }
; 88   :         break;

  001d0	ea00005d	 b           |$LN26@XllpCISetI|
  001d4		 |$LN20@XllpCISetI|

; 89   :     case XLLP_CI_RGB444:
; 90   :         cspace = 1;

  001d4	e3a03001	 mov         r3, #1
  001d8	e58d301c	 str         r3, [sp, #0x1C]

; 91   :         rgb_bpp = 0;

  001dc	e3a03000	 mov         r3, #0
  001e0	e58d3004	 str         r3, [sp, #4]

; 92   :         break;  

  001e4	ea000058	 b           |$LN26@XllpCISetI|
  001e8		 |$LN19@XllpCISetI|

; 93   :     case XLLP_CI_RGB555:
; 94   :         cspace = 1;

  001e8	e3a03001	 mov         r3, #1
  001ec	e58d301c	 str         r3, [sp, #0x1C]

; 95   :         rgb_bpp = 1;

  001f0	e3a03001	 mov         r3, #1
  001f4	e58d3004	 str         r3, [sp, #4]

; 96   :         if (output_format == XLLP_CI_RGBT555_0) {

  001f8	e59d3048	 ldr         r3, [sp, #0x48]
  001fc	e353000a	 cmp         r3, #0xA
  00200	1a000004	 bne         |$LN18@XllpCISetI|

; 97   :             rgbt_conv = 2;

  00204	e3a03002	 mov         r3, #2
  00208	e58d3010	 str         r3, [sp, #0x10]

; 98   :             tbit = 0;

  0020c	e3a03000	 mov         r3, #0
  00210	e58d3020	 str         r3, [sp, #0x20]
  00214	ea000006	 b           |$LN17@XllpCISetI|
  00218		 |$LN18@XllpCISetI|

; 99   :         } 
; 100  :         else if (output_format == XLLP_CI_RGBT555_1) {

  00218	e59d3048	 ldr         r3, [sp, #0x48]
  0021c	e353000c	 cmp         r3, #0xC
  00220	1a000003	 bne         |$LN16@XllpCISetI|

; 101  :             rgbt_conv = 2;

  00224	e3a03002	 mov         r3, #2
  00228	e58d3010	 str         r3, [sp, #0x10]

; 102  :             tbit = 1;

  0022c	e3a03001	 mov         r3, #1
  00230	e58d3020	 str         r3, [sp, #0x20]
  00234		 |$LN16@XllpCISetI|
  00234		 |$LN17@XllpCISetI|

; 103  :         }
; 104  :         break;  

  00234	ea000044	 b           |$LN26@XllpCISetI|
  00238		 |$LN15@XllpCISetI|

; 105  :     case XLLP_CI_RGB565:
; 106  :         cspace = 1;

  00238	e3a03001	 mov         r3, #1
  0023c	e58d301c	 str         r3, [sp, #0x1C]

; 107  :         rgb_bpp = 2;

  00240	e3a03002	 mov         r3, #2
  00244	e58d3004	 str         r3, [sp, #4]

; 108  :         rgb_f = 1;

  00248	e3a03001	 mov         r3, #1
  0024c	e58d3014	 str         r3, [sp, #0x14]

; 109  :         break;  

  00250	ea00003d	 b           |$LN26@XllpCISetI|
  00254		 |$LN14@XllpCISetI|

; 110  :     case XLLP_CI_RGB666:
; 111  :         cspace = 1;

  00254	e3a03001	 mov         r3, #1
  00258	e58d301c	 str         r3, [sp, #0x1C]

; 112  :         rgb_bpp = 3;

  0025c	e3a03003	 mov         r3, #3
  00260	e58d3004	 str         r3, [sp, #4]

; 113  :         if (output_format == XLLP_CI_RGB666_PACKED) {

  00264	e59d3048	 ldr         r3, [sp, #0x48]
  00268	e353000e	 cmp         r3, #0xE
  0026c	1a000001	 bne         |$LN13@XllpCISetI|

; 114  :             rgb_f = 1;

  00270	e3a03001	 mov         r3, #1
  00274	e58d3014	 str         r3, [sp, #0x14]
  00278		 |$LN13@XllpCISetI|

; 115  :         }
; 116  :         break;  

  00278	ea000033	 b           |$LN26@XllpCISetI|
  0027c		 |$LN12@XllpCISetI|

; 117  :     case XLLP_CI_RGB888:
; 118  :     case XLLP_CI_RGB888_PACKED:
; 119  :         cspace = 1;

  0027c	e3a03001	 mov         r3, #1
  00280	e58d301c	 str         r3, [sp, #0x1C]

; 120  :         rgb_bpp = 4;

  00284	e3a03004	 mov         r3, #4
  00288	e58d3004	 str         r3, [sp, #4]

; 121  :         switch(output_format) {

  0028c	e59d3048	 ldr         r3, [sp, #0x48]
  00290	e58d3028	 str         r3, [sp, #0x28]
  00294	e59d3028	 ldr         r3, [sp, #0x28]
  00298	e2433005	 sub         r3, r3, #5
  0029c	e58d3028	 str         r3, [sp, #0x28]
  002a0	e59d3028	 ldr         r3, [sp, #0x28]
  002a4	e353000a	 cmp         r3, #0xA
  002a8	8a000027	 bhi         |$LN2@XllpCISetI|
  002ac	e59d2028	 ldr         r2, [sp, #0x28]
  002b0	e1a03102	 mov         r3, r2, lsl #2
  002b4	e083300f	 add         r3, r3, pc
  002b8	e5933004	 ldr         r3, [r3, #4]
  002bc	e08ff003	 add         pc, pc, r3
  002c0		 |$LN55@XllpCISetI|
  002c0		 |$LN54@XllpCISetI|
  002c0		 |$LN56@XllpCISetI|
  002c0	00000080	 DCD         0x80
  002c4		 |$LN57@XllpCISetI|
  002c4	00000074	 DCD         0x74
  002c8		 |$LN58@XllpCISetI|
  002c8	00000068	 DCD         0x68
  002cc		 |$LN59@XllpCISetI|
  002cc	0000005c	 DCD         0x5c
  002d0		 |$LN60@XllpCISetI|
  002d0	00000088	 DCD         0x88
  002d4		 |$LN61@XllpCISetI|
  002d4	00000088	 DCD         0x88
  002d8		 |$LN62@XllpCISetI|
  002d8	00000034	 DCD         0x34
  002dc		 |$LN63@XllpCISetI|
  002dc	00000088	 DCD         0x88
  002e0		 |$LN64@XllpCISetI|
  002e0	00000048	 DCD         0x48
  002e4		 |$LN65@XllpCISetI|
  002e4	00000088	 DCD         0x88
  002e8		 |$LN66@XllpCISetI|
  002e8	00000028	 DCD         0x28
  002ec		 |$LN9@XllpCISetI|

; 122  :         case XLLP_CI_RGB888_PACKED:
; 123  :             rgb_f = 1;

  002ec	e3a03001	 mov         r3, #1
  002f0	e58d3014	 str         r3, [sp, #0x14]

; 124  :             break;

  002f4	ea000014	 b           |$LN10@XllpCISetI|
  002f8		 |$LN8@XllpCISetI|

; 125  :         case XLLP_CI_RGBT888_0:
; 126  :             rgbt_conv = 1;

  002f8	e3a03001	 mov         r3, #1
  002fc	e58d3010	 str         r3, [sp, #0x10]

; 127  :             tbit = 0;

  00300	e3a03000	 mov         r3, #0
  00304	e58d3020	 str         r3, [sp, #0x20]

; 128  :             break;

  00308	ea00000f	 b           |$LN10@XllpCISetI|
  0030c		 |$LN7@XllpCISetI|

; 129  :         case XLLP_CI_RGBT888_1:
; 130  :             rgbt_conv = 1;

  0030c	e3a03001	 mov         r3, #1
  00310	e58d3010	 str         r3, [sp, #0x10]

; 131  :             tbit = 1;

  00314	e3a03001	 mov         r3, #1
  00318	e58d3020	 str         r3, [sp, #0x20]

; 132  :             break;

  0031c	ea00000a	 b           |$LN10@XllpCISetI|
  00320		 |$LN6@XllpCISetI|

; 133  :         case XLLP_CI_RGB666:
; 134  :             rgb_conv = 1;

  00320	e3a03001	 mov         r3, #1
  00324	e58d3018	 str         r3, [sp, #0x18]

; 135  :             break;

  00328	ea000007	 b           |$LN10@XllpCISetI|
  0032c		 |$LN5@XllpCISetI|

; 136  :         case XLLP_CI_RGB565:
; 137  :             rgb_conv = 2;

  0032c	e3a03002	 mov         r3, #2
  00330	e58d3018	 str         r3, [sp, #0x18]

; 138  :             break;

  00334	ea000004	 b           |$LN10@XllpCISetI|
  00338		 |$LN4@XllpCISetI|

; 139  :         case XLLP_CI_RGB555:
; 140  :             rgb_conv = 3;

  00338	e3a03003	 mov         r3, #3
  0033c	e58d3018	 str         r3, [sp, #0x18]

; 141  :             break;

  00340	ea000001	 b           |$LN10@XllpCISetI|
  00344		 |$LN3@XllpCISetI|

; 142  :         case XLLP_CI_RGB444:
; 143  :             rgb_conv = 4;

  00344	e3a03004	 mov         r3, #4
  00348	e58d3018	 str         r3, [sp, #0x18]
  0034c		 |$LN2@XllpCISetI|
  0034c		 |$LN10@XllpCISetI|
  0034c		 |$LN1@XllpCISetI|
  0034c		 |$LN26@XllpCISetI|

; 144  :             break;
; 145  :         default:
; 146  :             break;
; 147  :         }
; 148  :         break;  
; 149  :     default:
; 150  :         break;
; 151  :     }
; 152  :     value |= (tbit==1) ? XLLP_CI_CICR1_TBIT : 0;

  0034c	e59d3020	 ldr         r3, [sp, #0x20]
  00350	e3530001	 cmp         r3, #1
  00354	1a000002	 bne         |$LN30@XllpCISetI|
  00358	e3a03102	 mov         r3, #2, 2
  0035c	e58d302c	 str         r3, [sp, #0x2C]
  00360	ea000001	 b           |$LN31@XllpCISetI|
  00364		 |$LN30@XllpCISetI|
  00364	e3a03000	 mov         r3, #0
  00368	e58d302c	 str         r3, [sp, #0x2C]
  0036c		 |$LN31@XllpCISetI|
  0036c	e59d2000	 ldr         r2, [sp]
  00370	e59d302c	 ldr         r3, [sp, #0x2C]
  00374	e1823003	 orr         r3, r2, r3
  00378	e58d3000	 str         r3, [sp]

; 153  :     value |= rgbt_conv << XLLP_CI_CICR1_RGBT_CONV_SHIFT;

  0037c	e59d3010	 ldr         r3, [sp, #0x10]
  00380	e1a02e83	 mov         r2, r3, lsl #29
  00384	e59d3000	 ldr         r3, [sp]
  00388	e1833002	 orr         r3, r3, r2
  0038c	e58d3000	 str         r3, [sp]

; 154  :     value |= rgb_conv << XLLP_CI_CICR1_RGB_CONV_SHIFT;

  00390	e59d3018	 ldr         r3, [sp, #0x18]
  00394	e1a02603	 mov         r2, r3, lsl #12
  00398	e59d3000	 ldr         r3, [sp]
  0039c	e1833002	 orr         r3, r3, r2
  003a0	e58d3000	 str         r3, [sp]

; 155  :     value |= (rgb_f==1) ? XLLP_CI_CICR1_RBG_F : 0;

  003a4	e59d3014	 ldr         r3, [sp, #0x14]
  003a8	e3530001	 cmp         r3, #1
  003ac	1a000002	 bne         |$LN32@XllpCISetI|
  003b0	e3a03b02	 mov         r3, #2, 22
  003b4	e58d3030	 str         r3, [sp, #0x30]
  003b8	ea000001	 b           |$LN33@XllpCISetI|
  003bc		 |$LN32@XllpCISetI|
  003bc	e3a03000	 mov         r3, #0
  003c0	e58d3030	 str         r3, [sp, #0x30]
  003c4		 |$LN33@XllpCISetI|
  003c4	e59d2000	 ldr         r2, [sp]
  003c8	e59d3030	 ldr         r3, [sp, #0x30]
  003cc	e1823003	 orr         r3, r2, r3
  003d0	e58d3000	 str         r3, [sp]

; 156  :     value |= (ycbcr_f==1) ? XLLP_CI_CICR1_YCBCR_F : 0;

  003d4	e59d300c	 ldr         r3, [sp, #0xC]
  003d8	e3530001	 cmp         r3, #1
  003dc	1a000002	 bne         |$LN34@XllpCISetI|
  003e0	e3a03b01	 mov         r3, #1, 22
  003e4	e58d3034	 str         r3, [sp, #0x34]
  003e8	ea000001	 b           |$LN35@XllpCISetI|
  003ec		 |$LN34@XllpCISetI|
  003ec	e3a03000	 mov         r3, #0
  003f0	e58d3034	 str         r3, [sp, #0x34]
  003f4		 |$LN35@XllpCISetI|
  003f4	e59d2000	 ldr         r2, [sp]
  003f8	e59d3034	 ldr         r3, [sp, #0x34]
  003fc	e1823003	 orr         r3, r2, r3
  00400	e58d3000	 str         r3, [sp]

; 157  :     value |= rgb_bpp << XLLP_CI_CICR1_RGB_BPP_SHIFT;

  00404	e59d3004	 ldr         r3, [sp, #4]
  00408	e1a02383	 mov         r2, r3, lsl #7
  0040c	e59d3000	 ldr         r3, [sp]
  00410	e1833002	 orr         r3, r3, r2
  00414	e58d3000	 str         r3, [sp]

; 158  :     value |= raw_bpp << XLLP_CI_CICR1_RAW_BPP_SHIFT;

  00418	e59d3008	 ldr         r3, [sp, #8]
  0041c	e1a02283	 mov         r2, r3, lsl #5
  00420	e59d3000	 ldr         r3, [sp]
  00424	e1833002	 orr         r3, r3, r2
  00428	e58d3000	 str         r3, [sp]

; 159  :     value |= cspace << XLLP_CI_CICR1_COLOR_SP_SHIFT;

  0042c	e59d301c	 ldr         r3, [sp, #0x1C]
  00430	e1a02183	 mov         r2, r3, lsl #3
  00434	e59d3000	 ldr         r3, [sp]
  00438	e1833002	 orr         r3, r3, r2
  0043c	e58d3000	 str         r3, [sp]

; 160  :     WRITE_REG(XLLP_CICR1, value);   

  00440	e59d3040	 ldr         r3, [sp, #0x40]
  00444	e2832004	 add         r2, r3, #4
  00448	e59d3000	 ldr         r3, [sp]
  0044c	e5823000	 str         r3, [r2]

; 161  : 
; 162  :     return; 
; 163  : }

  00450	e28dd038	 add         sp, sp, #0x38
  00454	e89d6000	 ldmia       sp, {sp, lr}
  00458	e12fff1e	 bx          lr
  0045c		 |$LN70@XllpCISetI|
  0045c		 |$LN71@XllpCISetI|
  0045c	03ff8007	 DCD         0x3ff8007
  00460		 |$M2703|

			 ENDP  ; |XllpCISetImageFormat|

	EXPORT	|XllpCISetMode|

  00018			 AREA	 |.pdata|, PDATA
|$T2712| DCD	|$LN5@XllpCISetM|
	DCD	0x40002604
; Function compile flags: /Odtp

  00460			 AREA	 |.text|, CODE, ARM

  00460		 |XllpCISetMode| PROC

; 166  : {

  00460		 |$LN5@XllpCISetM|
  00460	e1a0c00d	 mov         r12, sp
  00464	e92d0007	 stmdb       sp!, {r0 - r2}
  00468	e92d5000	 stmdb       sp!, {r12, lr}
  0046c	e24dd004	 sub         sp, sp, #4
  00470		 |$M2709|

; 167  :     unsigned int value;
; 168  : 
; 169  :     // write mode field in cicr0    
; 170  :     value = READ_REG(XLLP_CICR0);

  00470	e59d300c	 ldr         r3, [sp, #0xC]
  00474	e5933000	 ldr         r3, [r3]
  00478	e58d3000	 str         r3, [sp]

; 171  :     value &= ~(XLLP_CI_CICR0_SIM_SMASK << XLLP_CI_CICR0_SIM_SHIFT);

  0047c	e59d2000	 ldr         r2, [sp]
  00480	e3e03407	 mvn         r3, #7, 8
  00484	e0023003	 and         r3, r2, r3
  00488	e58d3000	 str         r3, [sp]

; 172  :     value |= (unsigned int)mode << XLLP_CI_CICR0_SIM_SHIFT;

  0048c	e59d3010	 ldr         r3, [sp, #0x10]
  00490	e1a02c03	 mov         r2, r3, lsl #24
  00494	e59d3000	 ldr         r3, [sp]
  00498	e1833002	 orr         r3, r3, r2
  0049c	e58d3000	 str         r3, [sp]

; 173  :     WRITE_REG(XLLP_CICR0, value);   

  004a0	e59d2000	 ldr         r2, [sp]
  004a4	e59d300c	 ldr         r3, [sp, #0xC]
  004a8	e5832000	 str         r2, [r3]

; 174  :     
; 175  :     // write data width cicr1
; 176  :     value = READ_REG(XLLP_CICR1);

  004ac	e59d300c	 ldr         r3, [sp, #0xC]
  004b0	e2833004	 add         r3, r3, #4
  004b4	e5933000	 ldr         r3, [r3]
  004b8	e58d3000	 str         r3, [sp]

; 177  :     value &= ~(XLLP_CI_CICR1_DW_SMASK << XLLP_CI_CICR1_DW_SHIFT);

  004bc	e59d2000	 ldr         r2, [sp]
  004c0	e3e03007	 mvn         r3, #7
  004c4	e0023003	 and         r3, r2, r3
  004c8	e58d3000	 str         r3, [sp]

; 178  :     value |= ((unsigned)data_width) << XLLP_CI_CICR1_DW_SHIFT;

  004cc	e59d2000	 ldr         r2, [sp]
  004d0	e59d3014	 ldr         r3, [sp, #0x14]
  004d4	e1823003	 orr         r3, r2, r3
  004d8	e58d3000	 str         r3, [sp]

; 179  :     WRITE_REG(XLLP_CICR1, value);   

  004dc	e59d300c	 ldr         r3, [sp, #0xC]
  004e0	e2832004	 add         r2, r3, #4
  004e4	e59d3000	 ldr         r3, [sp]
  004e8	e5823000	 str         r3, [r2]

; 180  :     return; 
; 181  : }

  004ec	e28dd004	 add         sp, sp, #4
  004f0	e89d6000	 ldmia       sp, {sp, lr}
  004f4	e12fff1e	 bx          lr
  004f8		 |$M2710|

			 ENDP  ; |XllpCISetMode|

	EXPORT	|XllpCIConfigureMP|

  00020			 AREA	 |.pdata|, PDATA
|$T2717| DCD	|$LN5@XllpCIConf|
	DCD	0x40004c04
; Function compile flags: /Odtp

  004f8			 AREA	 |.text|, CODE, ARM

  004f8		 |XllpCIConfigureMP| PROC

; 184  : {

  004f8		 |$LN5@XllpCIConf|
  004f8	e1a0c00d	 mov         r12, sp
  004fc	e92d000f	 stmdb       sp!, {r0 - r3}
  00500	e92d5000	 stmdb       sp!, {r12, lr}
  00504	e24dd004	 sub         sp, sp, #4
  00508		 |$M2714|

; 185  :     unsigned int value;
; 186  :     
; 187  :     // write ppl field in cicr1
; 188  :     value = READ_REG(XLLP_CICR1);

  00508	e59d300c	 ldr         r3, [sp, #0xC]
  0050c	e2833004	 add         r3, r3, #4
  00510	e5933000	 ldr         r3, [r3]
  00514	e58d3000	 str         r3, [sp]

; 189  :     value &= ~(XLLP_CI_CICR1_PPL_SMASK << XLLP_CI_CICR1_PPL_SHIFT);

  00518	e59d2000	 ldr         r2, [sp]
  0051c	e3e037ff	 mvn         r3, #0xFF, 14
  00520	e223390e	 eor         r3, r3, #0xE, 18
  00524	e0023003	 and         r3, r2, r3
  00528	e58d3000	 str         r3, [sp]

; 190  :     value |= (PPL & XLLP_CI_CICR1_PPL_SMASK) << XLLP_CI_CICR1_PPL_SHIFT;

  0052c	e59d2010	 ldr         r2, [sp, #0x10]
  00530	e3a03c07	 mov         r3, #7, 24
  00534	e38330ff	 orr         r3, r3, #0xFF
  00538	e0023003	 and         r3, r2, r3
  0053c	e1a02783	 mov         r2, r3, lsl #15
  00540	e59d3000	 ldr         r3, [sp]
  00544	e1833002	 orr         r3, r3, r2
  00548	e58d3000	 str         r3, [sp]

; 191  :     WRITE_REG(XLLP_CICR1, value);   

  0054c	e59d300c	 ldr         r3, [sp, #0xC]
  00550	e2832004	 add         r2, r3, #4
  00554	e59d3000	 ldr         r3, [sp]
  00558	e5823000	 str         r3, [r2]

; 192  : 
; 193  :     // write BLW, ELW in cicr2  
; 194  :     value = READ_REG(XLLP_CICR2);

  0055c	e59d300c	 ldr         r3, [sp, #0xC]
  00560	e2833008	 add         r3, r3, #8
  00564	e5933000	 ldr         r3, [r3]
  00568	e58d3000	 str         r3, [sp]

; 195  :     value &= ~(XLLP_CI_CICR2_BLW_SMASK << XLLP_CI_CICR2_BLW_SHIFT | XLLP_CI_CICR2_ELW_SMASK << XLLP_CI_CICR2_ELW_SHIFT );

  0056c	e59d2000	 ldr         r2, [sp]
  00570	e3a03cff	 mov         r3, #0xFF, 24
  00574	e38330ff	 orr         r3, r3, #0xFF
  00578	e0023003	 and         r3, r2, r3
  0057c	e58d3000	 str         r3, [sp]

; 196  :     value |= (timing->BLW & XLLP_CI_CICR2_BLW_SMASK) << XLLP_CI_CICR2_BLW_SHIFT;

  00580	e59d3018	 ldr         r3, [sp, #0x18]
  00584	e2833004	 add         r3, r3, #4
  00588	e5933000	 ldr         r3, [r3]
  0058c	e20330ff	 and         r3, r3, #0xFF
  00590	e1a02c03	 mov         r2, r3, lsl #24
  00594	e59d3000	 ldr         r3, [sp]
  00598	e1833002	 orr         r3, r3, r2
  0059c	e58d3000	 str         r3, [sp]

; 197  :     WRITE_REG(XLLP_CICR2, value);   

  005a0	e59d300c	 ldr         r3, [sp, #0xC]
  005a4	e2832008	 add         r2, r3, #8
  005a8	e59d3000	 ldr         r3, [sp]
  005ac	e5823000	 str         r3, [r2]

; 198  :     
; 199  :     // write BFW, LPF in cicr3
; 200  :     value = READ_REG(XLLP_CICR3);

  005b0	e59d300c	 ldr         r3, [sp, #0xC]
  005b4	e283300c	 add         r3, r3, #0xC
  005b8	e5933000	 ldr         r3, [r3]
  005bc	e58d3000	 str         r3, [sp]

; 201  :     value &= ~(XLLP_CI_CICR3_BFW_SMASK << XLLP_CI_CICR3_BFW_SHIFT | XLLP_CI_CICR3_LPF_SMASK << XLLP_CI_CICR3_LPF_SHIFT );

  005c0	e59d2000	 ldr         r2, [sp]
  005c4	e3a038ff	 mov         r3, #0xFF, 16
  005c8	e3833b3e	 orr         r3, r3, #0x3E, 22
  005cc	e0023003	 and         r3, r2, r3
  005d0	e58d3000	 str         r3, [sp]

; 202  :     value |= (timing->BFW & XLLP_CI_CICR3_BFW_SMASK) << XLLP_CI_CICR3_BFW_SHIFT;

  005d4	e59d3018	 ldr         r3, [sp, #0x18]
  005d8	e5933000	 ldr         r3, [r3]
  005dc	e20330ff	 and         r3, r3, #0xFF
  005e0	e1a02c03	 mov         r2, r3, lsl #24
  005e4	e59d3000	 ldr         r3, [sp]
  005e8	e1833002	 orr         r3, r3, r2
  005ec	e58d3000	 str         r3, [sp]

; 203  :     value |= (LPF & XLLP_CI_CICR3_LPF_SMASK) << XLLP_CI_CICR3_LPF_SHIFT;

  005f0	e59d2014	 ldr         r2, [sp, #0x14]
  005f4	e3a03c07	 mov         r3, #7, 24
  005f8	e38330ff	 orr         r3, r3, #0xFF
  005fc	e0022003	 and         r2, r2, r3
  00600	e59d3000	 ldr         r3, [sp]
  00604	e1833002	 orr         r3, r3, r2
  00608	e58d3000	 str         r3, [sp]

; 204  :     WRITE_REG(XLLP_CICR3, value);   

  0060c	e59d300c	 ldr         r3, [sp, #0xC]
  00610	e283200c	 add         r2, r3, #0xC
  00614	e59d3000	 ldr         r3, [sp]
  00618	e5823000	 str         r3, [r2]

; 205  :     return;
; 206  : }

  0061c	e28dd004	 add         sp, sp, #4
  00620	e89d6000	 ldmia       sp, {sp, lr}
  00624	e12fff1e	 bx          lr
  00628		 |$M2715|

			 ENDP  ; |XllpCIConfigureMP|

	EXPORT	|XllpCIConfigureSP|

  00028			 AREA	 |.pdata|, PDATA
|$T2722| DCD	|$LN5@XllpCIConf@2|
	DCD	0x40006904
; Function compile flags: /Odtp

  00628			 AREA	 |.text|, CODE, ARM

  00628		 |XllpCIConfigureSP| PROC

; 209  : {

  00628		 |$LN5@XllpCIConf@2|
  00628	e1a0c00d	 mov         r12, sp
  0062c	e92d000f	 stmdb       sp!, {r0 - r3}
  00630	e92d5000	 stmdb       sp!, {r12, lr}
  00634	e24dd004	 sub         sp, sp, #4
  00638		 |$M2719|

; 210  :     unsigned int value;
; 211  :     
; 212  :     // write ppl field in cicr1
; 213  :     value = READ_REG(XLLP_CICR1);

  00638	e59d300c	 ldr         r3, [sp, #0xC]
  0063c	e2833004	 add         r3, r3, #4
  00640	e5933000	 ldr         r3, [r3]
  00644	e58d3000	 str         r3, [sp]

; 214  :     value &= ~(XLLP_CI_CICR1_PPL_SMASK << XLLP_CI_CICR1_PPL_SHIFT);

  00648	e59d2000	 ldr         r2, [sp]
  0064c	e3e037ff	 mvn         r3, #0xFF, 14
  00650	e223390e	 eor         r3, r3, #0xE, 18
  00654	e0023003	 and         r3, r2, r3
  00658	e58d3000	 str         r3, [sp]

; 215  :     value |= (PPL & XLLP_CI_CICR1_PPL_SMASK) << XLLP_CI_CICR1_PPL_SHIFT;

  0065c	e59d2010	 ldr         r2, [sp, #0x10]
  00660	e3a03c07	 mov         r3, #7, 24
  00664	e38330ff	 orr         r3, r3, #0xFF
  00668	e0023003	 and         r3, r2, r3
  0066c	e1a02783	 mov         r2, r3, lsl #15
  00670	e59d3000	 ldr         r3, [sp]
  00674	e1833002	 orr         r3, r3, r2
  00678	e58d3000	 str         r3, [sp]

; 216  :     WRITE_REG(XLLP_CICR1, value);   

  0067c	e59d300c	 ldr         r3, [sp, #0xC]
  00680	e2832004	 add         r2, r3, #4
  00684	e59d3000	 ldr         r3, [sp]
  00688	e5823000	 str         r3, [r2]

; 217  : 
; 218  :     // write cicr2
; 219  :     value |= (timing->BLW & XLLP_CI_CICR2_BLW_SMASK) << XLLP_CI_CICR2_BLW_SHIFT;

  0068c	e59d3018	 ldr         r3, [sp, #0x18]
  00690	e5933000	 ldr         r3, [r3]
  00694	e20330ff	 and         r3, r3, #0xFF
  00698	e1a02c03	 mov         r2, r3, lsl #24
  0069c	e59d3000	 ldr         r3, [sp]
  006a0	e1833002	 orr         r3, r3, r2
  006a4	e58d3000	 str         r3, [sp]

; 220  :     value |= (timing->ELW & XLLP_CI_CICR2_ELW_SMASK) << XLLP_CI_CICR2_ELW_SHIFT;

  006a8	e59d3018	 ldr         r3, [sp, #0x18]
  006ac	e2833004	 add         r3, r3, #4
  006b0	e5933000	 ldr         r3, [r3]
  006b4	e20330ff	 and         r3, r3, #0xFF
  006b8	e1a02803	 mov         r2, r3, lsl #16
  006bc	e59d3000	 ldr         r3, [sp]
  006c0	e1833002	 orr         r3, r3, r2
  006c4	e58d3000	 str         r3, [sp]

; 221  :     value |= (timing->HSW & XLLP_CI_CICR2_HSW_SMASK) << XLLP_CI_CICR2_HSW_SHIFT;

  006c8	e59d3018	 ldr         r3, [sp, #0x18]
  006cc	e2833008	 add         r3, r3, #8
  006d0	e5933000	 ldr         r3, [r3]
  006d4	e203303f	 and         r3, r3, #0x3F
  006d8	e1a02503	 mov         r2, r3, lsl #10
  006dc	e59d3000	 ldr         r3, [sp]
  006e0	e1833002	 orr         r3, r3, r2
  006e4	e58d3000	 str         r3, [sp]

; 222  :     value |= (timing->BFPW & XLLP_CI_CICR2_BFPW_SMASK) << XLLP_CI_CICR2_BFPW_SHIFT;

  006e8	e59d3018	 ldr         r3, [sp, #0x18]
  006ec	e283300c	 add         r3, r3, #0xC
  006f0	e5933000	 ldr         r3, [r3]
  006f4	e203303f	 and         r3, r3, #0x3F
  006f8	e1a02183	 mov         r2, r3, lsl #3
  006fc	e59d3000	 ldr         r3, [sp]
  00700	e1833002	 orr         r3, r3, r2
  00704	e58d3000	 str         r3, [sp]

; 223  :     value |= (timing->FSW & XLLP_CI_CICR2_FSW_SMASK) << XLLP_CI_CICR2_FSW_SHIFT;

  00708	e59d3018	 ldr         r3, [sp, #0x18]
  0070c	e2833010	 add         r3, r3, #0x10
  00710	e5933000	 ldr         r3, [r3]
  00714	e2032003	 and         r2, r3, #3
  00718	e59d3000	 ldr         r3, [sp]
  0071c	e1833002	 orr         r3, r3, r2
  00720	e58d3000	 str         r3, [sp]

; 224  :     WRITE_REG(XLLP_CICR2, value);   

  00724	e59d300c	 ldr         r3, [sp, #0xC]
  00728	e2832008	 add         r2, r3, #8
  0072c	e59d3000	 ldr         r3, [sp]
  00730	e5823000	 str         r3, [r2]

; 225  :     
; 226  :     // write cicr3
; 227  :     value |= (timing->BFW & XLLP_CI_CICR3_BFW_SMASK) << XLLP_CI_CICR3_BFW_SHIFT;

  00734	e59d3018	 ldr         r3, [sp, #0x18]
  00738	e2833014	 add         r3, r3, #0x14
  0073c	e5933000	 ldr         r3, [r3]
  00740	e20330ff	 and         r3, r3, #0xFF
  00744	e1a02c03	 mov         r2, r3, lsl #24
  00748	e59d3000	 ldr         r3, [sp]
  0074c	e1833002	 orr         r3, r3, r2
  00750	e58d3000	 str         r3, [sp]

; 228  :     value |= (timing->EFW & XLLP_CI_CICR3_EFW_SMASK) << XLLP_CI_CICR3_EFW_SHIFT;

  00754	e59d3018	 ldr         r3, [sp, #0x18]
  00758	e2833018	 add         r3, r3, #0x18
  0075c	e5933000	 ldr         r3, [r3]
  00760	e20330ff	 and         r3, r3, #0xFF
  00764	e1a02803	 mov         r2, r3, lsl #16
  00768	e59d3000	 ldr         r3, [sp]
  0076c	e1833002	 orr         r3, r3, r2
  00770	e58d3000	 str         r3, [sp]

; 229  :     value |= (timing->VSW & XLLP_CI_CICR3_VSW_SMASK) << XLLP_CI_CICR3_VSW_SHIFT;

  00774	e59d3018	 ldr         r3, [sp, #0x18]
  00778	e283301c	 add         r3, r3, #0x1C
  0077c	e5933000	 ldr         r3, [r3]
  00780	e203301f	 and         r3, r3, #0x1F
  00784	e1a02583	 mov         r2, r3, lsl #11
  00788	e59d3000	 ldr         r3, [sp]
  0078c	e1833002	 orr         r3, r3, r2
  00790	e58d3000	 str         r3, [sp]

; 230  :     value |= (LPF & XLLP_CI_CICR3_LPF_SMASK) << XLLP_CI_CICR3_LPF_SHIFT;

  00794	e59d2014	 ldr         r2, [sp, #0x14]
  00798	e3a03c07	 mov         r3, #7, 24
  0079c	e38330ff	 orr         r3, r3, #0xFF
  007a0	e0022003	 and         r2, r2, r3
  007a4	e59d3000	 ldr         r3, [sp]
  007a8	e1833002	 orr         r3, r3, r2
  007ac	e58d3000	 str         r3, [sp]

; 231  :     WRITE_REG(XLLP_CICR3, value);   

  007b0	e59d300c	 ldr         r3, [sp, #0xC]
  007b4	e283200c	 add         r2, r3, #0xC
  007b8	e59d3000	 ldr         r3, [sp]
  007bc	e5823000	 str         r3, [r2]

; 232  :     return;
; 233  : }

  007c0	e28dd004	 add         sp, sp, #4
  007c4	e89d6000	 ldmia       sp, {sp, lr}
  007c8	e12fff1e	 bx          lr
  007cc		 |$M2720|

			 ENDP  ; |XllpCIConfigureSP|

	EXPORT	|XllpCIConfigureMS|

  00030			 AREA	 |.pdata|, PDATA
|$T2727| DCD	|$LN5@XllpCIConf@3|
	DCD	0x40000a03
; Function compile flags: /Odtp

  007cc			 AREA	 |.text|, CODE, ARM

  007cc		 |XllpCIConfigureMS| PROC

; 236  : {

  007cc		 |$LN5@XllpCIConf@3|
  007cc	e1a0c00d	 mov         r12, sp
  007d0	e92d000f	 stmdb       sp!, {r0 - r3}
  007d4	e92d5000	 stmdb       sp!, {r12, lr}
  007d8		 |$M2724|

; 237  :     // the operation is same as Master-Parallel
; 238  :     XllpCIConfigureMP(ci_reg_base, PPL, LPF, (XLLP_CI_MP_TIMING*)timing);

  007d8	e59d3014	 ldr         r3, [sp, #0x14]
  007dc	e59d2010	 ldr         r2, [sp, #0x10]
  007e0	e59d100c	 ldr         r1, [sp, #0xC]
  007e4	e59d0008	 ldr         r0, [sp, #8]
  007e8	eb000000	 bl          XllpCIConfigureMP

; 239  : }

  007ec	e89d6000	 ldmia       sp, {sp, lr}
  007f0	e12fff1e	 bx          lr
  007f4		 |$M2725|

			 ENDP  ; |XllpCIConfigureMS|

	EXPORT	|XllpCIConfigureEP|

  00038			 AREA	 |.pdata|, PDATA
|$T2732| DCD	|$LN7@XllpCIConf@4|
	DCD	0x40001804
; Function compile flags: /Odtp

  007f4			 AREA	 |.text|, CODE, ARM

  007f4		 |XllpCIConfigureEP| PROC

; 242  : {

  007f4		 |$LN7@XllpCIConf@4|
  007f4	e1a0c00d	 mov         r12, sp
  007f8	e92d0003	 stmdb       sp!, {r0, r1}
  007fc	e92d5000	 stmdb       sp!, {r12, lr}
  00800	e24dd004	 sub         sp, sp, #4
  00804		 |$M2729|

; 243  :     unsigned int value;
; 244  : 
; 245  :     // write parity_enable field in cicr0   
; 246  :     value = READ_REG(XLLP_CICR0);

  00804	e59d300c	 ldr         r3, [sp, #0xC]
  00808	e5933000	 ldr         r3, [r3]
  0080c	e58d3000	 str         r3, [sp]

; 247  :     if (parity_check) {

  00810	e59d3010	 ldr         r3, [sp, #0x10]
  00814	e3530000	 cmp         r3, #0
  00818	0a000003	 beq         |$LN2@XllpCIConf@4|

; 248  :         value |= XLLP_CI_CICR0_PAR_EN;

  0081c	e59d3000	 ldr         r3, [sp]
  00820	e3833101	 orr         r3, r3, #1, 2
  00824	e58d3000	 str         r3, [sp]

; 249  :     }
; 250  :     else {

  00828	ea000003	 b           |$LN1@XllpCIConf@4|
  0082c		 |$LN2@XllpCIConf@4|

; 251  :         value &= ~XLLP_CI_CICR0_PAR_EN;

  0082c	e59d2000	 ldr         r2, [sp]
  00830	e3e03101	 mvn         r3, #1, 2
  00834	e0023003	 and         r3, r2, r3
  00838	e58d3000	 str         r3, [sp]
  0083c		 |$LN1@XllpCIConf@4|

; 252  :     }
; 253  :     WRITE_REG(XLLP_CICR0, value);   

  0083c	e59d2000	 ldr         r2, [sp]
  00840	e59d300c	 ldr         r3, [sp, #0xC]
  00844	e5832000	 str         r2, [r3]

; 254  :     return; 
; 255  : }

  00848	e28dd004	 add         sp, sp, #4
  0084c	e89d6000	 ldmia       sp, {sp, lr}
  00850	e12fff1e	 bx          lr
  00854		 |$M2730|

			 ENDP  ; |XllpCIConfigureEP|

	EXPORT	|XllpCIConfigureES|

  00040			 AREA	 |.pdata|, PDATA
|$T2737| DCD	|$LN5@XllpCIConf@5|
	DCD	0x40000803
; Function compile flags: /Odtp

  00854			 AREA	 |.text|, CODE, ARM

  00854		 |XllpCIConfigureES| PROC

; 258  : {

  00854		 |$LN5@XllpCIConf@5|
  00854	e1a0c00d	 mov         r12, sp
  00858	e92d0003	 stmdb       sp!, {r0, r1}
  0085c	e92d5000	 stmdb       sp!, {r12, lr}
  00860		 |$M2734|

; 259  :     // the operationi is same as Embedded-Parallel
; 260  :     XllpCIConfigureEP(ci_reg_base, parity_check);

  00860	e59d100c	 ldr         r1, [sp, #0xC]
  00864	e59d0008	 ldr         r0, [sp, #8]
  00868	eb000000	 bl          XllpCIConfigureEP

; 261  : }

  0086c	e89d6000	 ldmia       sp, {sp, lr}
  00870	e12fff1e	 bx          lr
  00874		 |$M2735|

			 ENDP  ; |XllpCIConfigureES|

	EXPORT	|XllpCISetClock|
	IMPORT	|ceil|
	IMPORT	|__rt_udiv|
	IMPORT	|__utos|
	IMPORT	|__divs|
	IMPORT	|__stod|
	IMPORT	|__dtou|

  00048			 AREA	 |.pdata|, PDATA
|$T2751| DCD	|$LN14@XllpCISetC|
	DCD	0x40006604
; Function compile flags: /Odtp

  00874			 AREA	 |.text|, CODE, ARM

  00874		 |XllpCISetClock| PROC

; 264  : {

  00874		 |$LN14@XllpCISetC|
  00874	e1a0c00d	 mov         r12, sp
  00878	e92d000f	 stmdb       sp!, {r0 - r3}
  0087c	e92d5000	 stmdb       sp!, {r12, lr}
  00880	e24dd028	 sub         sp, sp, #0x28
  00884		 |$M2748|

; 265  :     unsigned int ciclk,  value, div, cccr_l;
; 266  :     P_XLLP_CLKMGR_T pclk;
; 267  : 	float p;
; 268  : 
; 269  :     // determine the LCLK frequency programmed into the CCCR.
; 270  :     pclk = (P_XLLP_CLKMGR_T)clk_regs_base;

  00884	e59d3034	 ldr         r3, [sp, #0x34]
  00888	e58d3014	 str         r3, [sp, #0x14]

; 271  :     cccr_l = (pclk->cccr & 0x0000001F);

  0088c	e59d3014	 ldr         r3, [sp, #0x14]
  00890	e5933000	 ldr         r3, [r3]
  00894	e203301f	 and         r3, r3, #0x1F
  00898	e58d300c	 str         r3, [sp, #0xC]

; 272  : 
; 273  : 	if (cccr_l < 8) // L = [2 - 7]

  0089c	e59d300c	 ldr         r3, [sp, #0xC]
  008a0	e3530008	 cmp         r3, #8
  008a4	2a000006	 bcs         |$LN5@XllpCISetC|

; 274  : 		ciclk = (13 * cccr_l) * 100;

  008a8	e59d100c	 ldr         r1, [sp, #0xC]
  008ac	e3a0300d	 mov         r3, #0xD
  008b0	e0020391	 mul         r2, r1, r3
  008b4	e3a03064	 mov         r3, #0x64
  008b8	e0030392	 mul         r3, r2, r3
  008bc	e58d3008	 str         r3, [sp, #8]
  008c0	ea000014	 b           |$LN4@XllpCISetC|
  008c4		 |$LN5@XllpCISetC|

; 275  : 	else if (cccr_l < 17) // L = [8 - 16] 

  008c4	e59d300c	 ldr         r3, [sp, #0xC]
  008c8	e3530011	 cmp         r3, #0x11
  008cc	2a000007	 bcs         |$LN3@XllpCISetC|

; 276  : 		ciclk = ((13 * cccr_l) * 100) >> 1;

  008d0	e59d100c	 ldr         r1, [sp, #0xC]
  008d4	e3a0300d	 mov         r3, #0xD
  008d8	e0020391	 mul         r2, r1, r3
  008dc	e3a03064	 mov         r3, #0x64
  008e0	e0030392	 mul         r3, r2, r3
  008e4	e1a030a3	 mov         r3, r3, lsr #1
  008e8	e58d3008	 str         r3, [sp, #8]
  008ec	ea000009	 b           |$LN2@XllpCISetC|
  008f0		 |$LN3@XllpCISetC|

; 277  : 	else if (cccr_l < 32) // L = [17 - 31]

  008f0	e59d300c	 ldr         r3, [sp, #0xC]
  008f4	e3530020	 cmp         r3, #0x20
  008f8	2a000006	 bcs         |$LN1@XllpCISetC|

; 278  : 		ciclk = ((13 * cccr_l) * 100) >> 2;

  008fc	e59d100c	 ldr         r1, [sp, #0xC]
  00900	e3a0300d	 mov         r3, #0xD
  00904	e0020391	 mul         r2, r1, r3
  00908	e3a03064	 mov         r3, #0x64
  0090c	e0030392	 mul         r3, r2, r3
  00910	e1a03123	 mov         r3, r3, lsr #2
  00914	e58d3008	 str         r3, [sp, #8]
  00918		 |$LN1@XllpCISetC|
  00918		 |$LN2@XllpCISetC|
  00918		 |$LN4@XllpCISetC|

; 279  : 	
; 280  : 	p = (float)((ciclk / mclk_mhz) - 2) / 2;

  00918	e59d1008	 ldr         r1, [sp, #8]
  0091c	e59d0040	 ldr         r0, [sp, #0x40]
  00920	eb000000	 bl          __rt_udiv
  00924	e2400002	 sub         r0, r0, #2
  00928	eb000000	 bl          __utos
  0092c	e3a01101	 mov         r1, #1, 2
  00930	eb000000	 bl          __divs
  00934	e58d0000	 str         r0, [sp]

; 281  : 
; 282  : 	div = (unsigned int) (ceil(p));

  00938	e59d0000	 ldr         r0, [sp]
  0093c	eb000000	 bl          __stod
  00940	eb000000	 bl          ceil
  00944	e58d101c	 str         r1, [sp, #0x1C]
  00948	e58d0018	 str         r0, [sp, #0x18]
  0094c	e59d0018	 ldr         r0, [sp, #0x18]
  00950	e59d101c	 ldr         r1, [sp, #0x1C]
  00954	eb000000	 bl          __dtou
  00958	e58d0010	 str         r0, [sp, #0x10]

; 283  : 
; 284  :     // write cicr4
; 285  :     value = READ_REG(XLLP_CICR4);

  0095c	e59d3030	 ldr         r3, [sp, #0x30]
  00960	e2833010	 add         r3, r3, #0x10
  00964	e5933000	 ldr         r3, [r3]
  00968	e58d3004	 str         r3, [sp, #4]

; 286  :     value &= ~(XLLP_CI_CICR4_PCLK_EN | XLLP_CI_CICR4_MCLK_EN | XLLP_CI_CICR4_DIV_SMASK<<XLLP_CI_CICR4_DIV_SHIFT);

  0096c	e59d2004	 ldr         r2, [sp, #4]
  00970	e3e03722	 mvn         r3, #0x22, 14
  00974	e22330ff	 eor         r3, r3, #0xFF
  00978	e0023003	 and         r3, r2, r3
  0097c	e58d3004	 str         r3, [sp, #4]

; 287  :     value |= (pclk_enable) ? XLLP_CI_CICR4_PCLK_EN : 0;

  00980	e59d3038	 ldr         r3, [sp, #0x38]
  00984	e3530000	 cmp         r3, #0
  00988	0a000002	 beq         |$LN8@XllpCISetC|
  0098c	e3a03502	 mov         r3, #2, 10
  00990	e58d3020	 str         r3, [sp, #0x20]
  00994	ea000001	 b           |$LN9@XllpCISetC|
  00998		 |$LN8@XllpCISetC|
  00998	e3a03000	 mov         r3, #0
  0099c	e58d3020	 str         r3, [sp, #0x20]
  009a0		 |$LN9@XllpCISetC|
  009a0	e59d2004	 ldr         r2, [sp, #4]
  009a4	e59d3020	 ldr         r3, [sp, #0x20]
  009a8	e1823003	 orr         r3, r2, r3
  009ac	e58d3004	 str         r3, [sp, #4]

; 288  :     value |= (mclk_enable) ? XLLP_CI_CICR4_MCLK_EN : 0;

  009b0	e59d303c	 ldr         r3, [sp, #0x3C]
  009b4	e3530000	 cmp         r3, #0
  009b8	0a000002	 beq         |$LN10@XllpCISetC|
  009bc	e3a03702	 mov         r3, #2, 14
  009c0	e58d3024	 str         r3, [sp, #0x24]
  009c4	ea000001	 b           |$LN11@XllpCISetC|
  009c8		 |$LN10@XllpCISetC|
  009c8	e3a03000	 mov         r3, #0
  009cc	e58d3024	 str         r3, [sp, #0x24]
  009d0		 |$LN11@XllpCISetC|
  009d0	e59d2004	 ldr         r2, [sp, #4]
  009d4	e59d3024	 ldr         r3, [sp, #0x24]
  009d8	e1823003	 orr         r3, r2, r3
  009dc	e58d3004	 str         r3, [sp, #4]

; 289  :     value |= div << XLLP_CI_CICR4_DIV_SHIFT;

  009e0	e59d2004	 ldr         r2, [sp, #4]
  009e4	e59d3010	 ldr         r3, [sp, #0x10]
  009e8	e1823003	 orr         r3, r2, r3
  009ec	e58d3004	 str         r3, [sp, #4]

; 290  :     WRITE_REG(XLLP_CICR4, value);   

  009f0	e59d3030	 ldr         r3, [sp, #0x30]
  009f4	e2832010	 add         r2, r3, #0x10
  009f8	e59d3004	 ldr         r3, [sp, #4]
  009fc	e5823000	 str         r3, [r2]

; 291  :     return; 
; 292  : }

  00a00	e28dd028	 add         sp, sp, #0x28
  00a04	e89d6000	 ldmia       sp, {sp, lr}
  00a08	e12fff1e	 bx          lr
  00a0c		 |$M2749|

			 ENDP  ; |XllpCISetClock|

	EXPORT	|XllpCISetPolarity|

  00050			 AREA	 |.pdata|, PDATA
|$T2762| DCD	|$LN11@XllpCISetP|
	DCD	0x40003704
; Function compile flags: /Odtp

  00a0c			 AREA	 |.text|, CODE, ARM

  00a0c		 |XllpCISetPolarity| PROC

; 295  : {

  00a0c		 |$LN11@XllpCISetP|
  00a0c	e1a0c00d	 mov         r12, sp
  00a10	e92d000f	 stmdb       sp!, {r0 - r3}
  00a14	e92d5000	 stmdb       sp!, {r12, lr}
  00a18	e24dd010	 sub         sp, sp, #0x10
  00a1c		 |$M2759|

; 296  :     unsigned int value;
; 297  : 
; 298  :     // write cicr4
; 299  :     value = READ_REG(XLLP_CICR4);

  00a1c	e59d3018	 ldr         r3, [sp, #0x18]
  00a20	e2833010	 add         r3, r3, #0x10
  00a24	e5933000	 ldr         r3, [r3]
  00a28	e58d3000	 str         r3, [sp]

; 300  :     value &= ~(XLLP_CI_CICR4_PCP | XLLP_CI_CICR4_HSP | XLLP_CI_CICR4_VSP);

  00a2c	e59d2000	 ldr         r2, [sp]
  00a30	e3e03607	 mvn         r3, #7, 12
  00a34	e0023003	 and         r3, r2, r3
  00a38	e58d3000	 str         r3, [sp]

; 301  :     value |= (pclk_sample_falling)? XLLP_CI_CICR4_PCP : 0;

  00a3c	e59d301c	 ldr         r3, [sp, #0x1C]
  00a40	e3530000	 cmp         r3, #0
  00a44	0a000002	 beq         |$LN3@XllpCISetP|
  00a48	e3a03501	 mov         r3, #1, 10
  00a4c	e58d3004	 str         r3, [sp, #4]
  00a50	ea000001	 b           |$LN4@XllpCISetP|
  00a54		 |$LN3@XllpCISetP|
  00a54	e3a03000	 mov         r3, #0
  00a58	e58d3004	 str         r3, [sp, #4]
  00a5c		 |$LN4@XllpCISetP|
  00a5c	e59d2000	 ldr         r2, [sp]
  00a60	e59d3004	 ldr         r3, [sp, #4]
  00a64	e1823003	 orr         r3, r2, r3
  00a68	e58d3000	 str         r3, [sp]

; 302  :     value |= (hsync_active_low) ? XLLP_CI_CICR4_HSP : 0;

  00a6c	e59d3020	 ldr         r3, [sp, #0x20]
  00a70	e3530000	 cmp         r3, #0
  00a74	0a000002	 beq         |$LN5@XllpCISetP|
  00a78	e3a03602	 mov         r3, #2, 12
  00a7c	e58d3008	 str         r3, [sp, #8]
  00a80	ea000001	 b           |$LN6@XllpCISetP|
  00a84		 |$LN5@XllpCISetP|
  00a84	e3a03000	 mov         r3, #0
  00a88	e58d3008	 str         r3, [sp, #8]
  00a8c		 |$LN6@XllpCISetP|
  00a8c	e59d2000	 ldr         r2, [sp]
  00a90	e59d3008	 ldr         r3, [sp, #8]
  00a94	e1823003	 orr         r3, r2, r3
  00a98	e58d3000	 str         r3, [sp]

; 303  :     value |= (vsync_active_low) ? XLLP_CI_CICR4_VSP : 0;

  00a9c	e59d3024	 ldr         r3, [sp, #0x24]
  00aa0	e3530000	 cmp         r3, #0
  00aa4	0a000002	 beq         |$LN7@XllpCISetP|
  00aa8	e3a03601	 mov         r3, #1, 12
  00aac	e58d300c	 str         r3, [sp, #0xC]
  00ab0	ea000001	 b           |$LN8@XllpCISetP|
  00ab4		 |$LN7@XllpCISetP|
  00ab4	e3a03000	 mov         r3, #0
  00ab8	e58d300c	 str         r3, [sp, #0xC]
  00abc		 |$LN8@XllpCISetP|
  00abc	e59d2000	 ldr         r2, [sp]
  00ac0	e59d300c	 ldr         r3, [sp, #0xC]
  00ac4	e1823003	 orr         r3, r2, r3
  00ac8	e58d3000	 str         r3, [sp]

; 304  :     WRITE_REG(XLLP_CICR4, value);   

  00acc	e59d3018	 ldr         r3, [sp, #0x18]
  00ad0	e2832010	 add         r2, r3, #0x10
  00ad4	e59d3000	 ldr         r3, [sp]
  00ad8	e5823000	 str         r3, [r2]

; 305  :     return; 
; 306  : }

  00adc	e28dd010	 add         sp, sp, #0x10
  00ae0	e89d6000	 ldmia       sp, {sp, lr}
  00ae4	e12fff1e	 bx          lr
  00ae8		 |$M2760|

			 ENDP  ; |XllpCISetPolarity|

	EXPORT	|XllpCISetFIFO|

  00058			 AREA	 |.pdata|, PDATA
|$T2771| DCD	|$LN9@XllpCISetF@2|
	DCD	0x40003704
; Function compile flags: /Odtp

  00ae8			 AREA	 |.text|, CODE, ARM

  00ae8		 |XllpCISetFIFO| PROC

; 310  : {

  00ae8		 |$LN9@XllpCISetF@2|
  00ae8	e1a0c00d	 mov         r12, sp
  00aec	e92d000f	 stmdb       sp!, {r0 - r3}
  00af0	e92d5000	 stmdb       sp!, {r12, lr}
  00af4	e24dd00c	 sub         sp, sp, #0xC
  00af8		 |$M2768|

; 311  :     unsigned int value;
; 312  : 
; 313  :     // write citor
; 314  :     WRITE_REG(XLLP_CITOR, timeout); 

  00af8	e59d3014	 ldr         r3, [sp, #0x14]
  00afc	e283201c	 add         r2, r3, #0x1C
  00b00	e59d3018	 ldr         r3, [sp, #0x18]
  00b04	e5823000	 str         r3, [r2]

; 315  :     
; 316  :     // write cifr: always enable fifo 0! also reset input fifo 
; 317  :     value = READ_REG(XLLP_CIFR);

  00b08	e59d3014	 ldr         r3, [sp, #0x14]
  00b0c	e2833018	 add         r3, r3, #0x18
  00b10	e5933000	 ldr         r3, [r3]
  00b14	e58d3000	 str         r3, [sp]

; 318  :     value &= ~(XLLP_CI_CIFR_FEN0 | XLLP_CI_CIFR_FEN1 | XLLP_CI_CIFR_FEN2 | XLLP_CI_CIFR_RESETF | 
; 319  :                 XLLP_CI_CIFR_THL_0_SMASK<<XLLP_CI_CIFR_THL_0_SHIFT);

  00b18	e59d2000	 ldr         r2, [sp]
  00b1c	e3e0303f	 mvn         r3, #0x3F
  00b20	e0023003	 and         r3, r2, r3
  00b24	e58d3000	 str         r3, [sp]

; 320  :     value |= (unsigned int)threshold << XLLP_CI_CIFR_THL_0_SHIFT;

  00b28	e59d301c	 ldr         r3, [sp, #0x1C]
  00b2c	e1a02203	 mov         r2, r3, lsl #4
  00b30	e59d3000	 ldr         r3, [sp]
  00b34	e1833002	 orr         r3, r3, r2
  00b38	e58d3000	 str         r3, [sp]

; 321  :     value |= (fifo1_enable) ? XLLP_CI_CIFR_FEN1 : 0;

  00b3c	e59d3020	 ldr         r3, [sp, #0x20]
  00b40	e3530000	 cmp         r3, #0
  00b44	0a000002	 beq         |$LN3@XllpCISetF@2|
  00b48	e3a03002	 mov         r3, #2
  00b4c	e58d3004	 str         r3, [sp, #4]
  00b50	ea000001	 b           |$LN4@XllpCISetF@2|
  00b54		 |$LN3@XllpCISetF@2|
  00b54	e3a03000	 mov         r3, #0
  00b58	e58d3004	 str         r3, [sp, #4]
  00b5c		 |$LN4@XllpCISetF@2|
  00b5c	e59d2000	 ldr         r2, [sp]
  00b60	e59d3004	 ldr         r3, [sp, #4]
  00b64	e1823003	 orr         r3, r2, r3
  00b68	e58d3000	 str         r3, [sp]

; 322  :     value |= (fifo2_enable) ? XLLP_CI_CIFR_FEN2 : 0;

  00b6c	e59d3024	 ldr         r3, [sp, #0x24]
  00b70	e3530000	 cmp         r3, #0
  00b74	0a000002	 beq         |$LN5@XllpCISetF@2|
  00b78	e3a03004	 mov         r3, #4
  00b7c	e58d3008	 str         r3, [sp, #8]
  00b80	ea000001	 b           |$LN6@XllpCISetF@2|
  00b84		 |$LN5@XllpCISetF@2|
  00b84	e3a03000	 mov         r3, #0
  00b88	e58d3008	 str         r3, [sp, #8]
  00b8c		 |$LN6@XllpCISetF@2|
  00b8c	e59d2000	 ldr         r2, [sp]
  00b90	e59d3008	 ldr         r3, [sp, #8]
  00b94	e1823003	 orr         r3, r2, r3
  00b98	e58d3000	 str         r3, [sp]

; 323  :     value |= XLLP_CI_CIFR_RESETF | XLLP_CI_CIFR_FEN0;

  00b9c	e59d3000	 ldr         r3, [sp]
  00ba0	e3833009	 orr         r3, r3, #9
  00ba4	e58d3000	 str         r3, [sp]

; 324  :     WRITE_REG(XLLP_CIFR, value);    

  00ba8	e59d3014	 ldr         r3, [sp, #0x14]
  00bac	e2832018	 add         r2, r3, #0x18
  00bb0	e59d3000	 ldr         r3, [sp]
  00bb4	e5823000	 str         r3, [r2]

; 325  :     return; 
; 326  : }

  00bb8	e28dd00c	 add         sp, sp, #0xC
  00bbc	e89d6000	 ldmia       sp, {sp, lr}
  00bc0	e12fff1e	 bx          lr
  00bc4		 |$M2769|

			 ENDP  ; |XllpCISetFIFO|

	EXPORT	|XllpCIResetFIFO|

  00060			 AREA	 |.pdata|, PDATA
|$T2776| DCD	|$LN5@XllpCIRese|
	DCD	0x40001204
; Function compile flags: /Odtp

  00bc4			 AREA	 |.text|, CODE, ARM

  00bc4		 |XllpCIResetFIFO| PROC

; 329  : {

  00bc4		 |$LN5@XllpCIRese|
  00bc4	e1a0c00d	 mov         r12, sp
  00bc8	e92d0001	 stmdb       sp!, {r0}
  00bcc	e92d5000	 stmdb       sp!, {r12, lr}
  00bd0	e24dd004	 sub         sp, sp, #4
  00bd4		 |$M2773|

; 330  :     unsigned int value;
; 331  :     value = READ_REG(XLLP_CIFR);

  00bd4	e59d300c	 ldr         r3, [sp, #0xC]
  00bd8	e2833018	 add         r3, r3, #0x18
  00bdc	e5933000	 ldr         r3, [r3]
  00be0	e58d3000	 str         r3, [sp]

; 332  :     value |= XLLP_CI_CIFR_RESETF;

  00be4	e59d3000	 ldr         r3, [sp]
  00be8	e3833008	 orr         r3, r3, #8
  00bec	e58d3000	 str         r3, [sp]

; 333  :     WRITE_REG(XLLP_CIFR, value);    

  00bf0	e59d300c	 ldr         r3, [sp, #0xC]
  00bf4	e2832018	 add         r2, r3, #0x18
  00bf8	e59d3000	 ldr         r3, [sp]
  00bfc	e5823000	 str         r3, [r2]

; 334  : }

  00c00	e28dd004	 add         sp, sp, #4
  00c04	e89d6000	 ldmia       sp, {sp, lr}
  00c08	e12fff1e	 bx          lr
  00c0c		 |$M2774|

			 ENDP  ; |XllpCIResetFIFO|

	EXPORT	|XllpCISetInterruptMask|

  00068			 AREA	 |.pdata|, PDATA
|$T2781| DCD	|$LN5@XllpCISetI@2|
	DCD	0x40001904
; Function compile flags: /Odtp

  00c0c			 AREA	 |.text|, CODE, ARM

  00c0c		 |XllpCISetInterruptMask| PROC

; 337  : {

  00c0c		 |$LN5@XllpCISetI@2|
  00c0c	e1a0c00d	 mov         r12, sp
  00c10	e92d0003	 stmdb       sp!, {r0, r1}
  00c14	e92d5000	 stmdb       sp!, {r12, lr}
  00c18	e24dd004	 sub         sp, sp, #4
  00c1c		 |$M2778|

; 338  :     unsigned int value;
; 339  : 
; 340  :     // write mask in cicr0  
; 341  :     value = READ_REG(XLLP_CICR0);

  00c1c	e59d300c	 ldr         r3, [sp, #0xC]
  00c20	e5933000	 ldr         r3, [r3]
  00c24	e58d3000	 str         r3, [sp]

; 342  :     value &= ~XLLP_CI_CICR0_INTERRUPT_MASK;

  00c28	e59d2000	 ldr         r2, [sp]
  00c2c	e3e03c03	 mvn         r3, #3, 24
  00c30	e22330ff	 eor         r3, r3, #0xFF
  00c34	e0023003	 and         r3, r2, r3
  00c38	e58d3000	 str         r3, [sp]

; 343  :     value |= (mask & XLLP_CI_CICR0_INTERRUPT_MASK);

  00c3c	e59d2010	 ldr         r2, [sp, #0x10]
  00c40	e3a03c03	 mov         r3, #3, 24
  00c44	e38330ff	 orr         r3, r3, #0xFF
  00c48	e0022003	 and         r2, r2, r3
  00c4c	e59d3000	 ldr         r3, [sp]
  00c50	e1833002	 orr         r3, r3, r2
  00c54	e58d3000	 str         r3, [sp]

; 344  :     WRITE_REG(XLLP_CICR0, value);   

  00c58	e59d2000	 ldr         r2, [sp]
  00c5c	e59d300c	 ldr         r3, [sp, #0xC]
  00c60	e5832000	 str         r2, [r3]

; 345  :     return; 
; 346  : }

  00c64	e28dd004	 add         sp, sp, #4
  00c68	e89d6000	 ldmia       sp, {sp, lr}
  00c6c	e12fff1e	 bx          lr
  00c70		 |$M2779|

			 ENDP  ; |XllpCISetInterruptMask|

	EXPORT	|XllpCIGetInterruptMask|

  00070			 AREA	 |.pdata|, PDATA
|$T2787| DCD	|$LN5@XllpCIGetI|
	DCD	0x40001004
; Function compile flags: /Odtp

  00c70			 AREA	 |.text|, CODE, ARM

  00c70		 |XllpCIGetInterruptMask| PROC

; 349  : {

  00c70		 |$LN5@XllpCIGetI|
  00c70	e1a0c00d	 mov         r12, sp
  00c74	e92d0001	 stmdb       sp!, {r0}
  00c78	e92d5000	 stmdb       sp!, {r12, lr}
  00c7c	e24dd008	 sub         sp, sp, #8
  00c80		 |$M2784|

; 350  :     unsigned int value;
; 351  : 
; 352  :     // write mask in cicr0  
; 353  :     value = READ_REG(XLLP_CICR0);

  00c80	e59d3010	 ldr         r3, [sp, #0x10]
  00c84	e5933000	 ldr         r3, [r3]
  00c88	e58d3000	 str         r3, [sp]

; 354  :     return (value & XLLP_CI_CICR0_INTERRUPT_MASK);

  00c8c	e59d2000	 ldr         r2, [sp]
  00c90	e3a03c03	 mov         r3, #3, 24
  00c94	e38330ff	 orr         r3, r3, #0xFF
  00c98	e0023003	 and         r3, r2, r3
  00c9c	e58d3004	 str         r3, [sp, #4]

; 355  : }

  00ca0	e59d0004	 ldr         r0, [sp, #4]
  00ca4	e28dd008	 add         sp, sp, #8
  00ca8	e89d6000	 ldmia       sp, {sp, lr}
  00cac	e12fff1e	 bx          lr
  00cb0		 |$M2785|

			 ENDP  ; |XllpCIGetInterruptMask|

	EXPORT	|XllpCIClearInterruptStatus|

  00078			 AREA	 |.pdata|, PDATA
|$T2792| DCD	|$LN5@XllpCIClea|
	DCD	0x40000903
; Function compile flags: /Odtp

  00cb0			 AREA	 |.text|, CODE, ARM

  00cb0		 |XllpCIClearInterruptStatus| PROC

; 358  : {

  00cb0		 |$LN5@XllpCIClea|
  00cb0	e1a0c00d	 mov         r12, sp
  00cb4	e92d0003	 stmdb       sp!, {r0, r1}
  00cb8	e92d5000	 stmdb       sp!, {r12, lr}
  00cbc		 |$M2789|

; 359  :     // write 1 to clear
; 360  :     WRITE_REG(XLLP_CISR, status);

  00cbc	e59d3008	 ldr         r3, [sp, #8]
  00cc0	e2832014	 add         r2, r3, #0x14
  00cc4	e59d300c	 ldr         r3, [sp, #0xC]
  00cc8	e5823000	 str         r3, [r2]

; 361  : }

  00ccc	e89d6000	 ldmia       sp, {sp, lr}
  00cd0	e12fff1e	 bx          lr
  00cd4		 |$M2790|

			 ENDP  ; |XllpCIClearInterruptStatus|

	EXPORT	|XllpCIGetInterruptStatus|

  00080			 AREA	 |.pdata|, PDATA
|$T2798| DCD	|$LN5@XllpCIGetI@2|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00cd4			 AREA	 |.text|, CODE, ARM

  00cd4		 |XllpCIGetInterruptStatus| PROC

; 364  : {

  00cd4		 |$LN5@XllpCIGetI@2|
  00cd4	e1a0c00d	 mov         r12, sp
  00cd8	e92d0001	 stmdb       sp!, {r0}
  00cdc	e92d5000	 stmdb       sp!, {r12, lr}
  00ce0	e24dd004	 sub         sp, sp, #4
  00ce4		 |$M2795|

; 365  :     return  READ_REG(XLLP_CISR);

  00ce4	e59d300c	 ldr         r3, [sp, #0xC]
  00ce8	e2833014	 add         r3, r3, #0x14
  00cec	e5933000	 ldr         r3, [r3]
  00cf0	e58d3000	 str         r3, [sp]

; 366  : }

  00cf4	e59d0000	 ldr         r0, [sp]
  00cf8	e28dd004	 add         sp, sp, #4
  00cfc	e89d6000	 ldmia       sp, {sp, lr}
  00d00	e12fff1e	 bx          lr
  00d04		 |$M2796|

			 ENDP  ; |XllpCIGetInterruptStatus|

	EXPORT	|XllpCISetRegisterValue|

  00088			 AREA	 |.pdata|, PDATA
|$T2803| DCD	|$LN5@XllpCISetR|
	DCD	0x40000a03
; Function compile flags: /Odtp

  00d04			 AREA	 |.text|, CODE, ARM

  00d04		 |XllpCISetRegisterValue| PROC

; 369  : {

  00d04		 |$LN5@XllpCISetR|
  00d04	e1a0c00d	 mov         r12, sp
  00d08	e92d0007	 stmdb       sp!, {r0 - r2}
  00d0c	e92d5000	 stmdb       sp!, {r12, lr}
  00d10		 |$M2800|

; 370  : 	WRITE_REG(reg_offset, value);

  00d10	e59d2008	 ldr         r2, [sp, #8]
  00d14	e59d300c	 ldr         r3, [sp, #0xC]
  00d18	e0822003	 add         r2, r2, r3
  00d1c	e59d3010	 ldr         r3, [sp, #0x10]
  00d20	e5823000	 str         r3, [r2]

; 371  : }

  00d24	e89d6000	 ldmia       sp, {sp, lr}
  00d28	e12fff1e	 bx          lr
  00d2c		 |$M2801|

			 ENDP  ; |XllpCISetRegisterValue|

	EXPORT	|XllpCIInit|
	IMPORT	|XllpUnlock|
	IMPORT	|XllpLock|

  00090			 AREA	 |.pdata|, PDATA
|$T2808| DCD	|$LN5@XllpCIInit|
	DCD	0x40003404
; Function compile flags: /Odtp

  00d2c			 AREA	 |.text|, CODE, ARM

  00d2c		 |XllpCIInit| PROC

; 377  : {

  00d2c		 |$LN5@XllpCIInit|
  00d2c	e1a0c00d	 mov         r12, sp
  00d30	e92d0003	 stmdb       sp!, {r0, r1}
  00d34	e92d5000	 stmdb       sp!, {r12, lr}
  00d38	e24dd004	 sub         sp, sp, #4
  00d3c		 |$M2805|

; 378  :     P_XLLP_CLKMGR_T pclk;
; 379  : 
; 380  :     // clear all CI registers
; 381  :     WRITE_REG(XLLP_CICR0, 0x3FF);   // disable all interrupts

  00d3c	e59d200c	 ldr         r2, [sp, #0xC]
  00d40	e3a03c03	 mov         r3, #3, 24
  00d44	e38330ff	 orr         r3, r3, #0xFF
  00d48	e5823000	 str         r3, [r2]

; 382  :     WRITE_REG(XLLP_CICR1, 0);

  00d4c	e59d300c	 ldr         r3, [sp, #0xC]
  00d50	e2832004	 add         r2, r3, #4
  00d54	e3a03000	 mov         r3, #0
  00d58	e5823000	 str         r3, [r2]

; 383  :     WRITE_REG(XLLP_CICR2, 0);

  00d5c	e59d300c	 ldr         r3, [sp, #0xC]
  00d60	e2832008	 add         r2, r3, #8
  00d64	e3a03000	 mov         r3, #0
  00d68	e5823000	 str         r3, [r2]

; 384  :     WRITE_REG(XLLP_CICR3, 0);

  00d6c	e59d300c	 ldr         r3, [sp, #0xC]
  00d70	e283200c	 add         r2, r3, #0xC
  00d74	e3a03000	 mov         r3, #0
  00d78	e5823000	 str         r3, [r2]

; 385  :     WRITE_REG(XLLP_CICR4, 0);

  00d7c	e59d300c	 ldr         r3, [sp, #0xC]
  00d80	e2832010	 add         r2, r3, #0x10
  00d84	e3a03000	 mov         r3, #0
  00d88	e5823000	 str         r3, [r2]

; 386  :     WRITE_REG(XLLP_CISR, ~0);

  00d8c	e59d300c	 ldr         r3, [sp, #0xC]
  00d90	e2832014	 add         r2, r3, #0x14
  00d94	e3e03000	 mvn         r3, #0
  00d98	e5823000	 str         r3, [r2]

; 387  :     WRITE_REG(XLLP_CIFR,  0);

  00d9c	e59d300c	 ldr         r3, [sp, #0xC]
  00da0	e2832018	 add         r2, r3, #0x18
  00da4	e3a03000	 mov         r3, #0
  00da8	e5823000	 str         r3, [r2]

; 388  :     WRITE_REG(XLLP_CITOR, 0);

  00dac	e59d300c	 ldr         r3, [sp, #0xC]
  00db0	e283201c	 add         r2, r3, #0x1C
  00db4	e3a03000	 mov         r3, #0
  00db8	e5823000	 str         r3, [r2]

; 389  : 
; 390  :     // enable CI clock
; 391  :     XllpLock(CKEN);

  00dbc	e3a00026	 mov         r0, #0x26
  00dc0	eb000000	 bl          XllpLock

; 392  :     pclk = (P_XLLP_CLKMGR_T)clk_regs_base;

  00dc4	e59d3010	 ldr         r3, [sp, #0x10]
  00dc8	e58d3000	 str         r3, [sp]

; 393  :     pclk->cken |= XLLP_CLKEN_CAMERA;

  00dcc	e59d3000	 ldr         r3, [sp]
  00dd0	e2833004	 add         r3, r3, #4
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e3832401	 orr         r2, r3, #1, 8
  00ddc	e59d3000	 ldr         r3, [sp]
  00de0	e2833004	 add         r3, r3, #4
  00de4	e5832000	 str         r2, [r3]

; 394  :     XllpUnlock(CKEN);

  00de8	e3a00026	 mov         r0, #0x26
  00dec	eb000000	 bl          XllpUnlock

; 395  : }

  00df0	e28dd004	 add         sp, sp, #4
  00df4	e89d6000	 ldmia       sp, {sp, lr}
  00df8	e12fff1e	 bx          lr
  00dfc		 |$M2806|

			 ENDP  ; |XllpCIInit|

	EXPORT	|XllpCIDeInit|

  00098			 AREA	 |.pdata|, PDATA
|$T2813| DCD	|$LN5@XllpCIDeIn|
	DCD	0x40001504
; Function compile flags: /Odtp

  00dfc			 AREA	 |.text|, CODE, ARM

  00dfc		 |XllpCIDeInit| PROC

; 398  : {

  00dfc		 |$LN5@XllpCIDeIn|
  00dfc	e1a0c00d	 mov         r12, sp
  00e00	e92d0003	 stmdb       sp!, {r0, r1}
  00e04	e92d5000	 stmdb       sp!, {r12, lr}
  00e08	e24dd004	 sub         sp, sp, #4
  00e0c		 |$M2810|

; 399  :     P_XLLP_CLKMGR_T pclk;
; 400  : 
; 401  :     // disable CI clock
; 402  :     XllpLock(CKEN);

  00e0c	e3a00026	 mov         r0, #0x26
  00e10	eb000000	 bl          XllpLock

; 403  :     pclk = (P_XLLP_CLKMGR_T)clk_regs_base;

  00e14	e59d3010	 ldr         r3, [sp, #0x10]
  00e18	e58d3000	 str         r3, [sp]

; 404  :     pclk->cken &= ~XLLP_CLKEN_CAMERA;

  00e1c	e59d3000	 ldr         r3, [sp]
  00e20	e2833004	 add         r3, r3, #4
  00e24	e5932000	 ldr         r2, [r3]
  00e28	e3e03401	 mvn         r3, #1, 8
  00e2c	e0022003	 and         r2, r2, r3
  00e30	e59d3000	 ldr         r3, [sp]
  00e34	e2833004	 add         r3, r3, #4
  00e38	e5832000	 str         r2, [r3]

; 405  :     XllpUnlock(CKEN);

  00e3c	e3a00026	 mov         r0, #0x26
  00e40	eb000000	 bl          XllpUnlock

; 406  : }

  00e44	e28dd004	 add         sp, sp, #4
  00e48	e89d6000	 ldmia       sp, {sp, lr}
  00e4c	e12fff1e	 bx          lr
  00e50		 |$M2811|

			 ENDP  ; |XllpCIDeInit|

	EXPORT	|XllpCIEnable|

  000a0			 AREA	 |.pdata|, PDATA
|$T2818| DCD	|$LN6@XllpCIEnab|
	DCD	0x40001604
; Function compile flags: /Odtp

  00e50			 AREA	 |.text|, CODE, ARM

  00e50		 |XllpCIEnable| PROC

; 409  : {

  00e50		 |$LN6@XllpCIEnab|
  00e50	e1a0c00d	 mov         r12, sp
  00e54	e92d0003	 stmdb       sp!, {r0, r1}
  00e58	e92d5000	 stmdb       sp!, {r12, lr}
  00e5c	e24dd004	 sub         sp, sp, #4
  00e60		 |$M2815|

; 410  :     unsigned int value;
; 411  : 
; 412  :     // write mask in cicr0  
; 413  :     value = READ_REG(XLLP_CICR0);

  00e60	e59d300c	 ldr         r3, [sp, #0xC]
  00e64	e5933000	 ldr         r3, [r3]
  00e68	e58d3000	 str         r3, [sp]

; 414  :     value |= XLLP_CI_CICR0_ENB;

  00e6c	e59d3000	 ldr         r3, [sp]
  00e70	e3833201	 orr         r3, r3, #1, 4
  00e74	e58d3000	 str         r3, [sp]

; 415  :     if (dma_en) {

  00e78	e59d3010	 ldr         r3, [sp, #0x10]
  00e7c	e3530000	 cmp         r3, #0
  00e80	0a000002	 beq         |$LN1@XllpCIEnab|

; 416  :         value |= XLLP_CI_CICR0_DMA_EN;

  00e84	e59d3000	 ldr         r3, [sp]
  00e88	e3833102	 orr         r3, r3, #2, 2
  00e8c	e58d3000	 str         r3, [sp]
  00e90		 |$LN1@XllpCIEnab|

; 417  :     }
; 418  :     WRITE_REG(XLLP_CICR0, value);   

  00e90	e59d2000	 ldr         r2, [sp]
  00e94	e59d300c	 ldr         r3, [sp, #0xC]
  00e98	e5832000	 str         r2, [r3]

; 419  :     return; 
; 420  : }

  00e9c	e28dd004	 add         sp, sp, #4
  00ea0	e89d6000	 ldmia       sp, {sp, lr}
  00ea4	e12fff1e	 bx          lr
  00ea8		 |$M2816|

			 ENDP  ; |XllpCIEnable|

	EXPORT	|XllpCIDisableComplete|

  000a8			 AREA	 |.pdata|, PDATA
|$T2823| DCD	|$LN5@XllpCIDisa|
	DCD	0x40001104
; Function compile flags: /Odtp

  00ea8			 AREA	 |.text|, CODE, ARM

  00ea8		 |XllpCIDisableComplete| PROC

; 423  : {

  00ea8		 |$LN5@XllpCIDisa|
  00ea8	e1a0c00d	 mov         r12, sp
  00eac	e92d0001	 stmdb       sp!, {r0}
  00eb0	e92d5000	 stmdb       sp!, {r12, lr}
  00eb4	e24dd004	 sub         sp, sp, #4
  00eb8		 |$M2820|

; 424  : 	unsigned int value;
; 425  : 	
; 426  : 	// Clear the disable control bit.
; 427  : 	value = READ_REG(XLLP_CICR0);

  00eb8	e59d300c	 ldr         r3, [sp, #0xC]
  00ebc	e5933000	 ldr         r3, [r3]
  00ec0	e58d3000	 str         r3, [sp]

; 428  : 	value &= ~XLLP_CI_CICR0_DIS;

  00ec4	e59d2000	 ldr         r2, [sp]
  00ec8	e3e03302	 mvn         r3, #2, 6
  00ecc	e0023003	 and         r3, r2, r3
  00ed0	e58d3000	 str         r3, [sp]

; 429  : 	WRITE_REG( XLLP_CICR0, value );

  00ed4	e59d2000	 ldr         r2, [sp]
  00ed8	e59d300c	 ldr         r3, [sp, #0xC]
  00edc	e5832000	 str         r2, [r3]

; 430  : }

  00ee0	e28dd004	 add         sp, sp, #4
  00ee4	e89d6000	 ldmia       sp, {sp, lr}
  00ee8	e12fff1e	 bx          lr
  00eec		 |$M2821|

			 ENDP  ; |XllpCIDisableComplete|

	EXPORT	|XllpCIDisable|
	IMPORT	|XllpOstDelayMilliSeconds|

  000b0			 AREA	 |.pdata|, PDATA
|$T2829| DCD	|$LN12@XllpCIDisa@2|
	DCD	0x40004104
; Function compile flags: /Odtp

  00eec			 AREA	 |.text|, CODE, ARM

  00eec		 |XllpCIDisable| PROC

; 433  : {

  00eec		 |$LN12@XllpCIDisa@2|
  00eec	e1a0c00d	 mov         r12, sp
  00ef0	e92d000f	 stmdb       sp!, {r0 - r3}
  00ef4	e92d5000	 stmdb       sp!, {r12, lr}
  00ef8	e24dd010	 sub         sp, sp, #0x10
  00efc		 |$M2826|

; 434  :     volatile unsigned int value, mask;
; 435  :     int retry;
; 436  :     
; 437  :     // write control bit in cicr0   
; 438  :     value = READ_REG(XLLP_CICR0);

  00efc	e59d3018	 ldr         r3, [sp, #0x18]
  00f00	e5933000	 ldr         r3, [r3]
  00f04	e58d3000	 str         r3, [sp]

; 439  :     if (quick) {

  00f08	e59d3020	 ldr         r3, [sp, #0x20]
  00f0c	e3530000	 cmp         r3, #0
  00f10	0a000006	 beq         |$LN7@XllpCIDisa@2|

; 440  :         value &= ~XLLP_CI_CICR0_ENB;

  00f14	e59d2000	 ldr         r2, [sp]
  00f18	e3e03201	 mvn         r3, #1, 4
  00f1c	e0023003	 and         r3, r2, r3
  00f20	e58d3000	 str         r3, [sp]

; 441  :         mask = XLLP_CI_CISR_CQD;

  00f24	e3a03040	 mov         r3, #0x40
  00f28	e58d3004	 str         r3, [sp, #4]

; 442  :     }
; 443  :     else {

  00f2c	ea000004	 b           |$LN6@XllpCIDisa@2|
  00f30		 |$LN7@XllpCIDisa@2|

; 444  :         value |= XLLP_CI_CICR0_DIS;

  00f30	e59d3000	 ldr         r3, [sp]
  00f34	e3833302	 orr         r3, r3, #2, 6
  00f38	e58d3000	 str         r3, [sp]

; 445  :         mask = XLLP_CI_CISR_CDD;

  00f3c	e3a03020	 mov         r3, #0x20
  00f40	e58d3004	 str         r3, [sp, #4]
  00f44		 |$LN6@XllpCIDisa@2|

; 446  :     }
; 447  :     WRITE_REG(XLLP_CICR0, value);   

  00f44	e59d2000	 ldr         r2, [sp]
  00f48	e59d3018	 ldr         r3, [sp, #0x18]
  00f4c	e5832000	 str         r2, [r3]

; 448  : 
; 449  : 	if( wait_for_disable_complete )

  00f50	e59d3024	 ldr         r3, [sp, #0x24]
  00f54	e3530000	 cmp         r3, #0
  00f58	0a00001b	 beq         |$LN5@XllpCIDisa@2|

; 450  : 	{
; 451  : 	    // wait shutdown complete
; 452  : 	    retry = 50;

  00f5c	e3a03032	 mov         r3, #0x32
  00f60	e58d3008	 str         r3, [sp, #8]
  00f64		 |$LN4@XllpCIDisa@2|

; 453  : 	    while ( retry-- > 0 ) {

  00f64	e59d3008	 ldr         r3, [sp, #8]
  00f68	e3530000	 cmp         r3, #0
  00f6c	e59d3008	 ldr         r3, [sp, #8]
  00f70	e2433001	 sub         r3, r3, #1
  00f74	e58d3008	 str         r3, [sp, #8]
  00f78	da000012	 ble         |$LN3@XllpCIDisa@2|

; 454  : 	        value = READ_REG(XLLP_CISR);        

  00f7c	e59d3018	 ldr         r3, [sp, #0x18]
  00f80	e2833014	 add         r3, r3, #0x14
  00f84	e5933000	 ldr         r3, [r3]
  00f88	e58d3000	 str         r3, [sp]

; 455  : 	        if ( value & mask ) {

  00f8c	e59d2000	 ldr         r2, [sp]
  00f90	e59d3004	 ldr         r3, [sp, #4]
  00f94	e1120003	 tst         r2, r3
  00f98	0a000006	 beq         |$LN2@XllpCIDisa@2|

; 456  : 	            WRITE_REG(XLLP_CISR, mask);

  00f9c	e59d3018	 ldr         r3, [sp, #0x18]
  00fa0	e2832014	 add         r2, r3, #0x14
  00fa4	e59d3004	 ldr         r3, [sp, #4]
  00fa8	e5823000	 str         r3, [r2]

; 457  : 	            return 0;

  00fac	e3a03000	 mov         r3, #0
  00fb0	e58d300c	 str         r3, [sp, #0xC]
  00fb4	ea000009	 b           |$LN8@XllpCIDisa@2|
  00fb8		 |$LN2@XllpCIDisa@2|

; 458  : 	        }
; 459  : 	        XllpOstDelayMilliSeconds((P_XLLP_OST_T)ost_reg_base, 10);

  00fb8	e3a0100a	 mov         r1, #0xA
  00fbc	e59d001c	 ldr         r0, [sp, #0x1C]
  00fc0	eb000000	 bl          XllpOstDelayMilliSeconds

; 460  : 	    }

  00fc4	eaffffe6	 b           |$LN4@XllpCIDisa@2|
  00fc8		 |$LN3@XllpCIDisa@2|

; 461  : 	}
; 462  : 	else

  00fc8	ea000002	 b           |$LN1@XllpCIDisa@2|
  00fcc		 |$LN5@XllpCIDisa@2|

; 463  : 		return 0;

  00fcc	e3a03000	 mov         r3, #0
  00fd0	e58d300c	 str         r3, [sp, #0xC]
  00fd4	ea000001	 b           |$LN8@XllpCIDisa@2|
  00fd8		 |$LN1@XllpCIDisa@2|

; 464  : 	
; 465  :     return -1; 

  00fd8	e3e03000	 mvn         r3, #0
  00fdc	e58d300c	 str         r3, [sp, #0xC]
  00fe0		 |$LN8@XllpCIDisa@2|

; 466  : }

  00fe0	e59d000c	 ldr         r0, [sp, #0xC]
  00fe4	e28dd010	 add         sp, sp, #0x10
  00fe8	e89d6000	 ldmia       sp, {sp, lr}
  00fec	e12fff1e	 bx          lr
  00ff0		 |$M2827|

			 ENDP  ; |XllpCIDisable|

	EXPORT	|XllpCISlaveCaptureEnable|

  000b8			 AREA	 |.pdata|, PDATA
|$T2834| DCD	|$LN5@XllpCISlav|
	DCD	0x40001004
; Function compile flags: /Odtp

  00ff0			 AREA	 |.text|, CODE, ARM

  00ff0		 |XllpCISlaveCaptureEnable| PROC

; 469  : {

  00ff0		 |$LN5@XllpCISlav|
  00ff0	e1a0c00d	 mov         r12, sp
  00ff4	e92d0001	 stmdb       sp!, {r0}
  00ff8	e92d5000	 stmdb       sp!, {r12, lr}
  00ffc	e24dd004	 sub         sp, sp, #4
  01000		 |$M2831|

; 470  :     unsigned int value;
; 471  : 
; 472  :     // write mask in cicr0  
; 473  :     value = READ_REG(XLLP_CICR0);

  01000	e59d300c	 ldr         r3, [sp, #0xC]
  01004	e5933000	 ldr         r3, [r3]
  01008	e58d3000	 str         r3, [sp]

; 474  :     value |= XLLP_CI_CICR0_SL_CAP_EN;

  0100c	e59d3000	 ldr         r3, [sp]
  01010	e3833202	 orr         r3, r3, #2, 4
  01014	e58d3000	 str         r3, [sp]

; 475  :     WRITE_REG(XLLP_CICR0, value);   

  01018	e59d2000	 ldr         r2, [sp]
  0101c	e59d300c	 ldr         r3, [sp, #0xC]
  01020	e5832000	 str         r2, [r3]

; 476  :     return; 
; 477  : }

  01024	e28dd004	 add         sp, sp, #4
  01028	e89d6000	 ldmia       sp, {sp, lr}
  0102c	e12fff1e	 bx          lr
  01030		 |$M2832|

			 ENDP  ; |XllpCISlaveCaptureEnable|

	EXPORT	|XllpCISlaveCaptureDisable|

  000c0			 AREA	 |.pdata|, PDATA
|$T2839| DCD	|$LN5@XllpCISlav@2|
	DCD	0x40001104
; Function compile flags: /Odtp

  01030			 AREA	 |.text|, CODE, ARM

  01030		 |XllpCISlaveCaptureDisable| PROC

; 480  : {

  01030		 |$LN5@XllpCISlav@2|
  01030	e1a0c00d	 mov         r12, sp
  01034	e92d0001	 stmdb       sp!, {r0}
  01038	e92d5000	 stmdb       sp!, {r12, lr}
  0103c	e24dd004	 sub         sp, sp, #4
  01040		 |$M2836|

; 481  :     unsigned int value;
; 482  : 
; 483  :     // write mask in cicr0  
; 484  :     value = READ_REG(XLLP_CICR0);

  01040	e59d300c	 ldr         r3, [sp, #0xC]
  01044	e5933000	 ldr         r3, [r3]
  01048	e58d3000	 str         r3, [sp]

; 485  :     value &= ~XLLP_CI_CICR0_SL_CAP_EN;

  0104c	e59d2000	 ldr         r2, [sp]
  01050	e3e03202	 mvn         r3, #2, 4
  01054	e0023003	 and         r3, r2, r3
  01058	e58d3000	 str         r3, [sp]

; 486  :     WRITE_REG(XLLP_CICR0, value);   

  0105c	e59d2000	 ldr         r2, [sp]
  01060	e59d300c	 ldr         r3, [sp, #0xC]
  01064	e5832000	 str         r2, [r3]

; 487  :     return; 
; 488  : }

  01068	e28dd004	 add         sp, sp, #4
  0106c	e89d6000	 ldmia       sp, {sp, lr}
  01070	e12fff1e	 bx          lr
  01074		 |$M2837|

			 ENDP  ; |XllpCISlaveCaptureDisable|

	END
