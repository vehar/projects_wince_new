; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_ost.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|XllpOstConfigureTimer|

  00000			 AREA	 |.pdata|, PDATA
|$T577|	DCD	|$LN20@XllpOstCon|
	DCD	0x40007d04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_ost.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpOstConfigureTimer| PROC

; 65   : {

  00000		 |$LN20@XllpOstCon|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M574|

; 66   : 
; 67   :     P_XLLP_OST_T        pOSTRegs = pOSTHandle->pOSTRegs;

  00010	e59d3024	 ldr         r3, [sp, #0x24]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3008	 str         r3, [sp, #8]

; 68   :     P_XLLP_INTC_T       pINTCRegs = pOSTHandle->pINTCRegs;

  0001c	e59d3024	 ldr         r3, [sp, #0x24]
  00020	e2833004	 add         r3, r3, #4
  00024	e5933000	 ldr         r3, [r3]
  00028	e58d3000	 str         r3, [sp]

; 69   :     P_XLLP_VUINT32_T    pOSTMatchReg;
; 70   :     XLLP_UINT32_T       ossrbit,
; 71   :                         oierbit,
; 72   :                         icmrbit;
; 73   : 
; 74   :     switch (matchreg)

  0002c	e59d3028	 ldr         r3, [sp, #0x28]
  00030	e58d3018	 str         r3, [sp, #0x18]
  00034	e59d3018	 ldr         r3, [sp, #0x18]
  00038	e2433001	 sub         r3, r3, #1
  0003c	e58d3018	 str         r3, [sp, #0x18]
  00040	e59d3018	 ldr         r3, [sp, #0x18]
  00044	e3530004	 cmp         r3, #4
  00048	8a000009	 bhi         |$LN6@XllpOstCon|
  0004c	e59d2018	 ldr         r2, [sp, #0x18]
  00050	e1a03102	 mov         r3, r2, lsl #2
  00054	e083300f	 add         r3, r3, pc
  00058	e5933004	 ldr         r3, [r3, #4]
  0005c	e08ff003	 add         pc, pc, r3
  00060		 |$LN12@XllpOstCon|
  00060		 |$LN11@XllpOstCon|
  00060		 |$LN13@XllpOstCon|
  00060	00000034	 DCD         0x34
  00064		 |$LN14@XllpOstCon|
  00064	0000005c	 DCD         0x5c
  00068		 |$LN15@XllpOstCon|
  00068	00000084	 DCD         0x84
  0006c		 |$LN16@XllpOstCon|
  0006c	000000ac	 DCD         0xac
  00070		 |$LN17@XllpOstCon|
  00070	000000d4	 DCD         0xd4
  00074		 |$LN6@XllpOstCon|

; 75   :     {
; 76   :         default:
; 77   :         case MatchReg0:
; 78   :             ossrbit = XLLP_OSSR_M0;

  00074	e3a03001	 mov         r3, #1
  00078	e58d300c	 str         r3, [sp, #0xC]

; 79   :             oierbit = XLLP_OIER_E0;

  0007c	e3a03001	 mov         r3, #1
  00080	e58d3004	 str         r3, [sp, #4]

; 80   :             icmrbit = XLLP_INTC_OSMR0;

  00084	e3a03301	 mov         r3, #1, 6
  00088	e58d3010	 str         r3, [sp, #0x10]

; 81   :             pOSTMatchReg = &(pOSTRegs->osmr0);

  0008c	e59d3008	 ldr         r3, [sp, #8]
  00090	e58d3014	 str         r3, [sp, #0x14]

; 82   :             break;

  00094	ea000030	 b           |$LN7@XllpOstCon|
  00098		 |$LN5@XllpOstCon|

; 83   : 
; 84   :         case MatchReg1:
; 85   :             ossrbit = XLLP_OSSR_M1;

  00098	e3a03002	 mov         r3, #2
  0009c	e58d300c	 str         r3, [sp, #0xC]

; 86   :             oierbit = XLLP_OIER_E1;

  000a0	e3a03002	 mov         r3, #2
  000a4	e58d3004	 str         r3, [sp, #4]

; 87   :             icmrbit = XLLP_INTC_OSMR1;

  000a8	e3a03302	 mov         r3, #2, 6
  000ac	e58d3010	 str         r3, [sp, #0x10]

; 88   :             pOSTMatchReg = &(pOSTRegs->osmr1);

  000b0	e59d3008	 ldr         r3, [sp, #8]
  000b4	e2833004	 add         r3, r3, #4
  000b8	e58d3014	 str         r3, [sp, #0x14]

; 89   :             break;

  000bc	ea000026	 b           |$LN7@XllpOstCon|
  000c0		 |$LN4@XllpOstCon|

; 90   : 
; 91   :         case MatchReg2:
; 92   :             ossrbit = XLLP_OSSR_M2;

  000c0	e3a03004	 mov         r3, #4
  000c4	e58d300c	 str         r3, [sp, #0xC]

; 93   :             oierbit = XLLP_OIER_E2;

  000c8	e3a03004	 mov         r3, #4
  000cc	e58d3004	 str         r3, [sp, #4]

; 94   :             icmrbit = XLLP_INTC_OSMR2;

  000d0	e3a03201	 mov         r3, #1, 4
  000d4	e58d3010	 str         r3, [sp, #0x10]

; 95   :             pOSTMatchReg = &(pOSTRegs->osmr2);

  000d8	e59d3008	 ldr         r3, [sp, #8]
  000dc	e2833008	 add         r3, r3, #8
  000e0	e58d3014	 str         r3, [sp, #0x14]

; 96   :             break;

  000e4	ea00001c	 b           |$LN7@XllpOstCon|
  000e8		 |$LN3@XllpOstCon|

; 97   : 
; 98   :         case MatchReg3:
; 99   :             ossrbit = XLLP_OSSR_M3;

  000e8	e3a03008	 mov         r3, #8
  000ec	e58d300c	 str         r3, [sp, #0xC]

; 100  :             oierbit = XLLP_OIER_E3;

  000f0	e3a03008	 mov         r3, #8
  000f4	e58d3004	 str         r3, [sp, #4]

; 101  :             icmrbit = XLLP_INTC_OSMR3;

  000f8	e3a03202	 mov         r3, #2, 4
  000fc	e58d3010	 str         r3, [sp, #0x10]

; 102  :             pOSTMatchReg = &(pOSTRegs->osmr3);

  00100	e59d3008	 ldr         r3, [sp, #8]
  00104	e283300c	 add         r3, r3, #0xC
  00108	e58d3014	 str         r3, [sp, #0x14]

; 103  :             break;

  0010c	ea000012	 b           |$LN7@XllpOstCon|
  00110		 |$LN2@XllpOstCon|

; 104  : 
; 105  : 		case MatchReg4:
; 106  :             ossrbit = XLLP_OSSR_M4;

  00110	e3a03010	 mov         r3, #0x10
  00114	e58d300c	 str         r3, [sp, #0xC]

; 107  :             oierbit = XLLP_OIER_E4;

  00118	e3a03010	 mov         r3, #0x10
  0011c	e58d3004	 str         r3, [sp, #4]

; 108  :             icmrbit = XLLP_INTC_OSMRXX_4;

  00120	e3a03080	 mov         r3, #0x80
  00124	e58d3010	 str         r3, [sp, #0x10]

; 109  :             pOSTMatchReg = &(pOSTRegs->osmr4);

  00128	e59d3008	 ldr         r3, [sp, #8]
  0012c	e2833080	 add         r3, r3, #0x80
  00130	e58d3014	 str         r3, [sp, #0x14]

; 110  :             break;

  00134	ea000008	 b           |$LN7@XllpOstCon|
  00138		 |$LN1@XllpOstCon|

; 111  : 
; 112  : 		case MatchReg5:
; 113  :             ossrbit = XLLP_OSSR_M5;

  00138	e3a03020	 mov         r3, #0x20
  0013c	e58d300c	 str         r3, [sp, #0xC]

; 114  :             oierbit = XLLP_OIER_E5;

  00140	e3a03020	 mov         r3, #0x20
  00144	e58d3004	 str         r3, [sp, #4]

; 115  :             icmrbit = XLLP_INTC_OSMRXX_4;

  00148	e3a03080	 mov         r3, #0x80
  0014c	e58d3010	 str         r3, [sp, #0x10]

; 116  :             pOSTMatchReg = &(pOSTRegs->osmr5);

  00150	e59d3008	 ldr         r3, [sp, #8]
  00154	e2833084	 add         r3, r3, #0x84
  00158	e58d3014	 str         r3, [sp, #0x14]
  0015c		 |$LN7@XllpOstCon|

; 117  :             break;
; 118  :     }
; 119  : 
; 120  :     //
; 121  :     // Disable interrupts on the specified Match register
; 122  :     //
; 123  :     pOSTRegs->oier &= ~(oierbit | XLLP_OIER_RESERVED_BITS);

  0015c	e59d3008	 ldr         r3, [sp, #8]
  00160	e283101c	 add         r1, r3, #0x1C
  00164	e59d2004	 ldr         r2, [sp, #4]
  00168	e3e03c0f	 mvn         r3, #0xF, 24
  0016c	e22330ff	 eor         r3, r3, #0xFF
  00170	e1823003	 orr         r3, r2, r3
  00174	e1e02003	 mvn         r2, r3
  00178	e5913000	 ldr         r3, [r1]
  0017c	e0032002	 and         r2, r3, r2
  00180	e59d3008	 ldr         r3, [sp, #8]
  00184	e283301c	 add         r3, r3, #0x1C
  00188	e5832000	 str         r2, [r3]

; 124  : 
; 125  :     //
; 126  :     // Clear any interrupt on the specified Match register
; 127  :     //
; 128  :     pOSTRegs->ossr = ossrbit; 

  0018c	e59d3008	 ldr         r3, [sp, #8]
  00190	e2832014	 add         r2, r3, #0x14
  00194	e59d300c	 ldr         r3, [sp, #0xC]
  00198	e5823000	 str         r3, [r2]

; 129  : 
; 130  :     // 
; 131  : 	// Set up the match register to expire when the oscr0 reaches
; 132  :     // the next match interval.
; 133  : 	//
; 134  :     *pOSTMatchReg = matchvalue; 

  0019c	e59d202c	 ldr         r2, [sp, #0x2C]
  001a0	e59d3014	 ldr         r3, [sp, #0x14]
  001a4	e5832000	 str         r2, [r3]

; 135  : 
; 136  :     //
; 137  :     // Enable the Match register interrupt on 
; 138  :     //
; 139  :     pOSTRegs->oier|= oierbit;

  001a8	e59d3008	 ldr         r3, [sp, #8]
  001ac	e283301c	 add         r3, r3, #0x1C
  001b0	e5932000	 ldr         r2, [r3]
  001b4	e59d3004	 ldr         r3, [sp, #4]
  001b8	e1822003	 orr         r2, r2, r3
  001bc	e59d3008	 ldr         r3, [sp, #8]
  001c0	e283301c	 add         r3, r3, #0x1C
  001c4	e5832000	 str         r2, [r3]

; 140  : 
; 141  :     //
; 142  :     // Enable the Match interrupt at the interrupt controller
; 143  :     //
; 144  :     pINTCRegs->icmr |= icmrbit; 

  001c8	e59d3000	 ldr         r3, [sp]
  001cc	e2833004	 add         r3, r3, #4
  001d0	e5932000	 ldr         r2, [r3]
  001d4	e59d3010	 ldr         r3, [sp, #0x10]
  001d8	e1822003	 orr         r2, r2, r3
  001dc	e59d3000	 ldr         r3, [sp]
  001e0	e2833004	 add         r3, r3, #4
  001e4	e5832000	 str         r2, [r3]

; 145  : 
; 146  :     return;
; 147  : 
; 148  : }

  001e8	e28dd01c	 add         sp, sp, #0x1C
  001ec	e89d6000	 ldmia       sp, {sp, lr}
  001f0	e12fff1e	 bx          lr
  001f4		 |$M575|

			 ENDP  ; |XllpOstConfigureTimer|

	EXPORT	|XllpOstConfigureMatchReg|

  00008			 AREA	 |.pdata|, PDATA
|$T582|	DCD	|$LN5@XllpOstCon@2|
	DCD	0x40001404
; Function compile flags: /Odtp

  001f4			 AREA	 |.text|, CODE, ARM

  001f4		 |XllpOstConfigureMatchReg| PROC

; 177  : {

  001f4		 |$LN5@XllpOstCon@2|
  001f4	e1a0c00d	 mov         r12, sp
  001f8	e92d0007	 stmdb       sp!, {r0 - r2}
  001fc	e92d5000	 stmdb       sp!, {r12, lr}
  00200	e24dd008	 sub         sp, sp, #8
  00204		 |$M579|

; 178  :     P_XLLP_OST_T        pOSTRegs = pOSTHandle->pOSTRegs;

  00204	e59d3010	 ldr         r3, [sp, #0x10]
  00208	e5933000	 ldr         r3, [r3]
  0020c	e58d3000	 str         r3, [sp]

; 179  :     XLLP_UINT32_T       matchvalue;
; 180  : 
; 181  :     //
; 182  :     // Compute the new match value to load
; 183  :     //
; 184  :     matchvalue = pOSTRegs->oscr0 + matchincrement;

  00210	e59d3000	 ldr         r3, [sp]
  00214	e2833010	 add         r3, r3, #0x10
  00218	e5932000	 ldr         r2, [r3]
  0021c	e59d3018	 ldr         r3, [sp, #0x18]
  00220	e0823003	 add         r3, r2, r3
  00224	e58d3004	 str         r3, [sp, #4]

; 185  : 
; 186  :     //
; 187  :     // Configure the timer to interrupt at that match value
; 188  :     //
; 189  :     XllpOstConfigureTimer (pOSTHandle, matchreg, matchvalue);

  00228	e59d2004	 ldr         r2, [sp, #4]
  0022c	e59d1014	 ldr         r1, [sp, #0x14]
  00230	e59d0010	 ldr         r0, [sp, #0x10]
  00234	eb000000	 bl          XllpOstConfigureTimer

; 190  : 
; 191  : }

  00238	e28dd008	 add         sp, sp, #8
  0023c	e89d6000	 ldmia       sp, {sp, lr}
  00240	e12fff1e	 bx          lr
  00244		 |$M580|

			 ENDP  ; |XllpOstConfigureMatchReg|

	EXPORT	|XllpOstDelayMicroSeconds|

  00010			 AREA	 |.pdata|, PDATA
|$T587|	DCD	|$LN5@XllpOstDel|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00244			 AREA	 |.text|, CODE, ARM

  00244		 |XllpOstDelayMicroSeconds| PROC

; 207  : {

  00244		 |$LN5@XllpOstDel|
  00244	e1a0c00d	 mov         r12, sp
  00248	e92d0003	 stmdb       sp!, {r0, r1}
  0024c	e92d5000	 stmdb       sp!, {r12, lr}
  00250	e24dd004	 sub         sp, sp, #4
  00254		 |$M584|

; 208  :     XLLP_UINT32_T    ticks;
; 209  : 
; 210  :     ticks = microseconds * XLLP_OST_TICKS_US;  // approx. 3 ticks per microsecond. 

  00254	e59d2010	 ldr         r2, [sp, #0x10]
  00258	e3a03003	 mov         r3, #3
  0025c	e0030392	 mul         r3, r2, r3
  00260	e58d3000	 str         r3, [sp]

; 211  :     XllpOstDelayTicks (pOstRegs, ticks);

  00264	e59d1000	 ldr         r1, [sp]
  00268	e59d000c	 ldr         r0, [sp, #0xC]
  0026c	eb000000	 bl          XllpOstDelayTicks

; 212  : 
; 213  : }

  00270	e28dd004	 add         sp, sp, #4
  00274	e89d6000	 ldmia       sp, {sp, lr}
  00278	e12fff1e	 bx          lr
  0027c		 |$M585|

			 ENDP  ; |XllpOstDelayMicroSeconds|

	EXPORT	|XllpOstDelayMilliSeconds|

  00018			 AREA	 |.pdata|, PDATA
|$T592|	DCD	|$LN5@XllpOstDel@2|
	DCD	0x40000f04
; Function compile flags: /Odtp

  0027c			 AREA	 |.text|, CODE, ARM

  0027c		 |XllpOstDelayMilliSeconds| PROC

; 229  : {

  0027c		 |$LN5@XllpOstDel@2|
  0027c	e1a0c00d	 mov         r12, sp
  00280	e92d0003	 stmdb       sp!, {r0, r1}
  00284	e92d5000	 stmdb       sp!, {r12, lr}
  00288	e24dd004	 sub         sp, sp, #4
  0028c		 |$M589|

; 230  :     XLLP_UINT32_T    ticks;
; 231  : 
; 232  :     ticks = milliseconds * XLLP_OST_TICKS_MS;

  0028c	e59d2010	 ldr         r2, [sp, #0x10]
  00290	e3a03b03	 mov         r3, #3, 22
  00294	e38330b2	 orr         r3, r3, #0xB2
  00298	e0030392	 mul         r3, r2, r3
  0029c	e58d3000	 str         r3, [sp]

; 233  :     XllpOstDelayTicks (pOstRegs, ticks);

  002a0	e59d1000	 ldr         r1, [sp]
  002a4	e59d000c	 ldr         r0, [sp, #0xC]
  002a8	eb000000	 bl          XllpOstDelayTicks

; 234  :     return;
; 235  : }

  002ac	e28dd004	 add         sp, sp, #4
  002b0	e89d6000	 ldmia       sp, {sp, lr}
  002b4	e12fff1e	 bx          lr
  002b8		 |$M590|

			 ENDP  ; |XllpOstDelayMilliSeconds|


  00020			 AREA	 |.pdata|, PDATA
|$T597|	DCD	|$LN10@XllpOstDel@3|
	DCD	0x40002104
; Function compile flags: /Odtp

  002b8			 AREA	 |.text|, CODE, ARM

  002b8		 |XllpOstDelayTicks| PROC

; 251  : {    

  002b8		 |$LN10@XllpOstDel@3|
  002b8	e1a0c00d	 mov         r12, sp
  002bc	e92d0003	 stmdb       sp!, {r0, r1}
  002c0	e92d5000	 stmdb       sp!, {r12, lr}
  002c4	e24dd008	 sub         sp, sp, #8
  002c8		 |$M594|

; 252  :     XLLP_UINT32_T    expireTime,
; 253  :                     time;
; 254  : 
; 255  :     time = pOstRegs->oscr0;

  002c8	e59d3010	 ldr         r3, [sp, #0x10]
  002cc	e2833010	 add         r3, r3, #0x10
  002d0	e5933000	 ldr         r3, [r3]
  002d4	e58d3004	 str         r3, [sp, #4]

; 256  : 	expireTime = time + ticks;

  002d8	e59d2004	 ldr         r2, [sp, #4]
  002dc	e59d3014	 ldr         r3, [sp, #0x14]
  002e0	e0823003	 add         r3, r2, r3
  002e4	e58d3000	 str         r3, [sp]

; 257  : 
; 258  :     //
; 259  :     // Check if we wrapped on the expireTime
; 260  :     // and delay first part until wrap
; 261  :     //
; 262  : 	if (expireTime < time) 

  002e8	e59d2000	 ldr         r2, [sp]
  002ec	e59d3004	 ldr         r3, [sp, #4]
  002f0	e1520003	 cmp         r2, r3
  002f4	2a000006	 bcs         |$LN5@XllpOstDel@3|
  002f8		 |$LN4@XllpOstDel@3|

; 263  :     {
; 264  : 		while (time < pOstRegs->oscr0);

  002f8	e59d3010	 ldr         r3, [sp, #0x10]
  002fc	e2833010	 add         r3, r3, #0x10
  00300	e5932000	 ldr         r2, [r3]
  00304	e59d3004	 ldr         r3, [sp, #4]
  00308	e1530002	 cmp         r3, r2
  0030c	2a000000	 bcs         |$LN3@XllpOstDel@3|
  00310	eafffff8	 b           |$LN4@XllpOstDel@3|
  00314		 |$LN3@XllpOstDel@3|
  00314		 |$LN5@XllpOstDel@3|
  00314		 |$LN2@XllpOstDel@3|

; 265  : 	}
; 266  : 	while (pOstRegs->oscr0 <= expireTime);

  00314	e59d3010	 ldr         r3, [sp, #0x10]
  00318	e2833010	 add         r3, r3, #0x10
  0031c	e5932000	 ldr         r2, [r3]
  00320	e59d3000	 ldr         r3, [sp]
  00324	e1520003	 cmp         r2, r3
  00328	8a000000	 bhi         |$LN1@XllpOstDel@3|
  0032c	eafffff8	 b           |$LN2@XllpOstDel@3|
  00330		 |$LN1@XllpOstDel@3|

; 267  :     return;
; 268  : }

  00330	e28dd008	 add         sp, sp, #8
  00334	e89d6000	 ldmia       sp, {sp, lr}
  00338	e12fff1e	 bx          lr
  0033c		 |$M595|

			 ENDP  ; |XllpOstDelayTicks|

	END
