; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\XLLP\SOURCE\xllp_i2c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|XllpI2cInit|

  00000			 AREA	 |.pdata|, PDATA
|$T869|	DCD	|$LN5@XllpI2cIni|
	DCD	0x40003204
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\xllp\source\xllp_i2c.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |XllpI2cInit| PROC

; 59   : {

  00000		 |$LN5@XllpI2cIni|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M866|

; 60   : 	I2C_regs->ICR = 0;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2832010	 add         r2, r3, #0x10
  00018	e3a03000	 mov         r3, #0
  0001c	e5823000	 str         r3, [r2]

; 61   : 
; 62   : 	clkMgr->cken |=  XLLP_CLKEN_I2C;

  00020	e59d3014	 ldr         r3, [sp, #0x14]
  00024	e2833004	 add         r3, r3, #4
  00028	e5933000	 ldr         r3, [r3]
  0002c	e3832901	 orr         r2, r3, #1, 18
  00030	e59d3014	 ldr         r3, [sp, #0x14]
  00034	e2833004	 add         r3, r3, #4
  00038	e5832000	 str         r2, [r3]

; 63   : 
; 64   : 	gpio->GPDR3 |= (XLLP_GPIO_BIT_SCL | XLLP_GPIO_BIT_SDA);

  0003c	e59d3010	 ldr         r3, [sp, #0x10]
  00040	e2833f43	 add         r3, r3, #0x43, 30
  00044	e5933000	 ldr         r3, [r3]
  00048	e3832606	 orr         r2, r3, #6, 12
  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e2833f43	 add         r3, r3, #0x43, 30
  00054	e5832000	 str         r2, [r3]

; 65   : 
; 66   : 	gpio->GAFR3_U |=  ( XLLP_GPIO_AF_BIT_SCL | XLLP_GPIO_AF_BIT_SDA);

  00058	e59d3010	 ldr         r3, [sp, #0x10]
  0005c	e2833070	 add         r3, r3, #0x70
  00060	e5933000	 ldr         r3, [r3]
  00064	e3832b05	 orr         r2, r3, #5, 22
  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e2833070	 add         r3, r3, #0x70
  00070	e5832000	 str         r2, [r3]

; 67   : 
; 68   : 	/* Setup I2C slave address */
; 69   : 	I2C_regs->ISAR =  dev_id;

  00074	e59d300c	 ldr         r3, [sp, #0xC]
  00078	e2832020	 add         r2, r3, #0x20
  0007c	e59d3018	 ldr         r3, [sp, #0x18]
  00080	e5823000	 str         r3, [r2]

; 70   : 
; 71   : 	I2C_regs->ICR = XLLP_ICR_SCLEA;

  00084	e59d300c	 ldr         r3, [sp, #0xC]
  00088	e2832010	 add         r2, r3, #0x10
  0008c	e3a03020	 mov         r3, #0x20
  00090	e5823000	 str         r3, [r2]

; 72   : 	I2C_regs->ICR |= XLLP_ICR_UIE;

  00094	e59d300c	 ldr         r3, [sp, #0xC]
  00098	e2833010	 add         r3, r3, #0x10
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e3832040	 orr         r2, r3, #0x40
  000a4	e59d300c	 ldr         r3, [sp, #0xC]
  000a8	e2833010	 add         r3, r3, #0x10
  000ac	e5832000	 str         r2, [r3]

; 73   : 
; 74   : 	return(XLLP_FALSE);

  000b0	e3a03000	 mov         r3, #0
  000b4	e58d3000	 str         r3, [sp]

; 75   : }

  000b8	e59d0000	 ldr         r0, [sp]
  000bc	e28dd004	 add         sp, sp, #4
  000c0	e89d6000	 ldmia       sp, {sp, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$M867|

			 ENDP  ; |XllpI2cInit|

	EXPORT	|XllpPI2cInit|

  00008			 AREA	 |.pdata|, PDATA
|$T875|	DCD	|$LN5@XllpPI2cIn|
	DCD	0x40002b04
; Function compile flags: /Odtp

  000c8			 AREA	 |.text|, CODE, ARM

  000c8		 |XllpPI2cInit| PROC

; 94   : {

  000c8		 |$LN5@XllpPI2cIn|
  000c8	e1a0c00d	 mov         r12, sp
  000cc	e92d000f	 stmdb       sp!, {r0 - r3}
  000d0	e92d5000	 stmdb       sp!, {r12, lr}
  000d4	e24dd004	 sub         sp, sp, #4
  000d8		 |$M872|

; 95   : 
; 96   : 	clkMgr->cken |=  XLLP_CLKEN_PWRI2C;

  000d8	e59d3014	 ldr         r3, [sp, #0x14]
  000dc	e2833004	 add         r3, r3, #4
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e3832902	 orr         r2, r3, #2, 18
  000e8	e59d3014	 ldr         r3, [sp, #0x14]
  000ec	e2833004	 add         r3, r3, #4
  000f0	e5832000	 str         r2, [r3]

; 97   : 
; 98   : 	I2C_regs->PCFR |= 0x40;

  000f4	e59d300c	 ldr         r3, [sp, #0xC]
  000f8	e283301c	 add         r3, r3, #0x1C
  000fc	e5933000	 ldr         r3, [r3]
  00100	e3832040	 orr         r2, r3, #0x40
  00104	e59d300c	 ldr         r3, [sp, #0xC]
  00108	e283301c	 add         r3, r3, #0x1C
  0010c	e5832000	 str         r2, [r3]

; 99   : 	
; 100  : 	I2C_regs->ICR = 0;

  00110	e59d300c	 ldr         r3, [sp, #0xC]
  00114	e2832e19	 add         r2, r3, #0x19, 28
  00118	e3a03000	 mov         r3, #0
  0011c	e5823000	 str         r3, [r2]

; 101  : 	/* Setup I2C slave address */
; 102  : 	I2C_regs->ISAR =  dev_id;

  00120	e59d300c	 ldr         r3, [sp, #0xC]
  00124	e2832e1a	 add         r2, r3, #0x1A, 28
  00128	e59d3018	 ldr         r3, [sp, #0x18]
  0012c	e5823000	 str         r3, [r2]

; 103  : 
; 104  : 	I2C_regs->ICR = XLLP_ICR_SCLEA;

  00130	e59d300c	 ldr         r3, [sp, #0xC]
  00134	e2832e19	 add         r2, r3, #0x19, 28
  00138	e3a03020	 mov         r3, #0x20
  0013c	e5823000	 str         r3, [r2]

; 105  : 	I2C_regs->ICR |= XLLP_ICR_UIE;

  00140	e59d300c	 ldr         r3, [sp, #0xC]
  00144	e2833e19	 add         r3, r3, #0x19, 28
  00148	e5933000	 ldr         r3, [r3]
  0014c	e3832040	 orr         r2, r3, #0x40
  00150	e59d300c	 ldr         r3, [sp, #0xC]
  00154	e2833e19	 add         r3, r3, #0x19, 28
  00158	e5832000	 str         r2, [r3]

; 106  : 
; 107  : 	return(XLLP_FALSE);

  0015c	e3a03000	 mov         r3, #0
  00160	e58d3000	 str         r3, [sp]

; 108  : }

  00164	e59d0000	 ldr         r0, [sp]
  00168	e28dd004	 add         sp, sp, #4
  0016c	e89d6000	 ldmia       sp, {sp, lr}
  00170	e12fff1e	 bx          lr
  00174		 |$M873|

			 ENDP  ; |XllpPI2cInit|

	EXPORT	|XllpI2cRxFull|
	IMPORT	|XllpOstDelayMilliSeconds|

  00010			 AREA	 |.pdata|, PDATA
|$T881|	DCD	|$LN8@XllpI2cRxF|
	DCD	0x40002404
; Function compile flags: /Odtp

  00174			 AREA	 |.text|, CODE, ARM

  00174		 |XllpI2cRxFull| PROC

; 118  : {

  00174		 |$LN8@XllpI2cRxF|
  00174	e1a0c00d	 mov         r12, sp
  00178	e92d0007	 stmdb       sp!, {r0 - r2}
  0017c	e92d5000	 stmdb       sp!, {r12, lr}
  00180	e24dd008	 sub         sp, sp, #8
  00184		 |$M878|
  00184		 |$LN3@XllpI2cRxF|

; 119  : 	XLLP_UINT32_T temp;
; 120  : 
; 121  : 	while (timeout--)

  00184	e59d3018	 ldr         r3, [sp, #0x18]
  00188	e3530000	 cmp         r3, #0
  0018c	e59d3018	 ldr         r3, [sp, #0x18]
  00190	e2433001	 sub         r3, r3, #1
  00194	e58d3018	 str         r3, [sp, #0x18]
  00198	0a000013	 beq         |$LN2@XllpI2cRxF|

; 122  : 	{
; 123  : 		temp = I2C_regs->ISR;

  0019c	e59d3010	 ldr         r3, [sp, #0x10]
  001a0	e2833018	 add         r3, r3, #0x18
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e58d3000	 str         r3, [sp]

; 124  : 		if ((temp & XLLP_ISR_IRF) == XLLP_ISR_IRF)

  001ac	e59d3000	 ldr         r3, [sp]
  001b0	e2033080	 and         r3, r3, #0x80
  001b4	e3530080	 cmp         r3, #0x80
  001b8	1a000007	 bne         |$LN1@XllpI2cRxF|

; 125  : 		{
; 126  : 			I2C_regs->ISR = temp | XLLP_ISR_IRF;

  001bc	e59d3000	 ldr         r3, [sp]
  001c0	e3832080	 orr         r2, r3, #0x80
  001c4	e59d3010	 ldr         r3, [sp, #0x10]
  001c8	e2833018	 add         r3, r3, #0x18
  001cc	e5832000	 str         r2, [r3]

; 127  : 			return XLLP_FALSE;

  001d0	e3a03000	 mov         r3, #0
  001d4	e58d3004	 str         r3, [sp, #4]
  001d8	ea000005	 b           |$LN4@XllpI2cRxF|
  001dc		 |$LN1@XllpI2cRxF|

; 128  : 		}
; 129  : 		// delay 1 ms here
; 130  : 		XllpOstDelayMilliSeconds(pOSTRegs, 1);

  001dc	e3a01001	 mov         r1, #1
  001e0	e59d0014	 ldr         r0, [sp, #0x14]
  001e4	eb000000	 bl          XllpOstDelayMilliSeconds

; 131  : 	}

  001e8	eaffffe5	 b           |$LN3@XllpI2cRxF|
  001ec		 |$LN2@XllpI2cRxF|

; 132  : 
; 133  :   return XLLP_TRUE;

  001ec	e3a03001	 mov         r3, #1
  001f0	e58d3004	 str         r3, [sp, #4]
  001f4		 |$LN4@XllpI2cRxF|

; 134  : }

  001f4	e59d0004	 ldr         r0, [sp, #4]
  001f8	e28dd008	 add         sp, sp, #8
  001fc	e89d6000	 ldmia       sp, {sp, lr}
  00200	e12fff1e	 bx          lr
  00204		 |$M879|

			 ENDP  ; |XllpI2cRxFull|

	EXPORT	|XllpI2cTxEmpty|

  00018			 AREA	 |.pdata|, PDATA
|$T887|	DCD	|$LN9@XllpI2cTxE|
	DCD	0x40002f04
; Function compile flags: /Odtp

  00204			 AREA	 |.text|, CODE, ARM

  00204		 |XllpI2cTxEmpty| PROC

; 142  : {

  00204		 |$LN9@XllpI2cTxE|
  00204	e1a0c00d	 mov         r12, sp
  00208	e92d0007	 stmdb       sp!, {r0 - r2}
  0020c	e92d5000	 stmdb       sp!, {r12, lr}
  00210	e24dd008	 sub         sp, sp, #8
  00214		 |$M884|
  00214		 |$LN4@XllpI2cTxE|

; 143  : 	XLLP_UINT32_T temp;
; 144  : 
; 145  : 	while (timeout--)

  00214	e59d3018	 ldr         r3, [sp, #0x18]
  00218	e3530000	 cmp         r3, #0
  0021c	e59d3018	 ldr         r3, [sp, #0x18]
  00220	e2433001	 sub         r3, r3, #1
  00224	e58d3018	 str         r3, [sp, #0x18]
  00228	0a00001e	 beq         |$LN3@XllpI2cTxE|

; 146  : 	{
; 147  : 		temp = I2C_regs->ISR;

  0022c	e59d3010	 ldr         r3, [sp, #0x10]
  00230	e2833018	 add         r3, r3, #0x18
  00234	e5933000	 ldr         r3, [r3]
  00238	e58d3000	 str         r3, [sp]

; 148  : 		if((temp & XLLP_ISR_ITE) == XLLP_ISR_ITE)

  0023c	e59d3000	 ldr         r3, [sp]
  00240	e2033040	 and         r3, r3, #0x40
  00244	e3530040	 cmp         r3, #0x40
  00248	1a000012	 bne         |$LN2@XllpI2cTxE|

; 149  : 		{
; 150  : 			I2C_regs->ISR = temp | XLLP_ISR_ITE;

  0024c	e59d3000	 ldr         r3, [sp]
  00250	e3832040	 orr         r2, r3, #0x40
  00254	e59d3010	 ldr         r3, [sp, #0x10]
  00258	e2833018	 add         r3, r3, #0x18
  0025c	e5832000	 str         r2, [r3]

; 151  : 			if ((temp & XLLP_ISR_ALD) == XLLP_ISR_ALD)

  00260	e59d3000	 ldr         r3, [sp]
  00264	e2033020	 and         r3, r3, #0x20
  00268	e3530020	 cmp         r3, #0x20
  0026c	1a000006	 bne         |$LN1@XllpI2cTxE|

; 152  : 			{
; 153  : 				I2C_regs->ISR |= XLLP_ISR_ALD;

  00270	e59d3010	 ldr         r3, [sp, #0x10]
  00274	e2833018	 add         r3, r3, #0x18
  00278	e5933000	 ldr         r3, [r3]
  0027c	e3832020	 orr         r2, r3, #0x20
  00280	e59d3010	 ldr         r3, [sp, #0x10]
  00284	e2833018	 add         r3, r3, #0x18
  00288	e5832000	 str         r2, [r3]
  0028c		 |$LN1@XllpI2cTxE|

; 154  : 			}
; 155  : 			return XLLP_FALSE;

  0028c	e3a03000	 mov         r3, #0
  00290	e58d3004	 str         r3, [sp, #4]
  00294	ea000005	 b           |$LN5@XllpI2cTxE|
  00298		 |$LN2@XllpI2cTxE|

; 156  : 		}
; 157  : 		// delay 1 ms here
; 158  : 		XllpOstDelayMilliSeconds(pOSTRegs, 1);

  00298	e3a01001	 mov         r1, #1
  0029c	e59d0014	 ldr         r0, [sp, #0x14]
  002a0	eb000000	 bl          XllpOstDelayMilliSeconds

; 159  : 	}

  002a4	eaffffda	 b           |$LN4@XllpI2cTxE|
  002a8		 |$LN3@XllpI2cTxE|

; 160  : 	return XLLP_TRUE;

  002a8	e3a03001	 mov         r3, #1
  002ac	e58d3004	 str         r3, [sp, #4]
  002b0		 |$LN5@XllpI2cTxE|

; 161  : }

  002b0	e59d0004	 ldr         r0, [sp, #4]
  002b4	e28dd008	 add         sp, sp, #8
  002b8	e89d6000	 ldmia       sp, {sp, lr}
  002bc	e12fff1e	 bx          lr
  002c0		 |$M885|

			 ENDP  ; |XllpI2cTxEmpty|

	EXPORT	|XllpI2CWrite|

  00020			 AREA	 |.pdata|, PDATA
|$T893|	DCD	|$LN11@XllpI2CWri|
	DCD	0x40006f04
; Function compile flags: /Odtp

  002c0			 AREA	 |.text|, CODE, ARM

  002c0		 |XllpI2CWrite| PROC

; 165  : {

  002c0		 |$LN11@XllpI2CWri|
  002c0	e1a0c00d	 mov         r12, sp
  002c4	e92d000f	 stmdb       sp!, {r0 - r3}
  002c8	e92d5000	 stmdb       sp!, {r12, lr}
  002cc	e24dd014	 sub         sp, sp, #0x14
  002d0		 |$M890|

; 166  : 	XLLP_UINT32_T reg;
; 167  : 	int timer = 0;

  002d0	e3a03000	 mov         r3, #0
  002d4	e58d3000	 str         r3, [sp]

; 168  : 	
; 169  : 	I2C_regs->IDBR = (slaveAddr << 1) & ~XLLP_IDBR_MODE;

  002d8	e5dd3024	 ldrb        r3, [sp, #0x24]
  002dc	e1a02083	 mov         r2, r3, lsl #1
  002e0	e3e03001	 mvn         r3, #1
  002e4	e0022003	 and         r2, r2, r3
  002e8	e59d301c	 ldr         r3, [sp, #0x1C]
  002ec	e2833008	 add         r3, r3, #8
  002f0	e5832000	 str         r2, [r3]

; 170  : 	reg = I2C_regs->ICR;

  002f4	e59d301c	 ldr         r3, [sp, #0x1C]
  002f8	e2833010	 add         r3, r3, #0x10
  002fc	e5933000	 ldr         r3, [r3]
  00300	e58d3004	 str         r3, [sp, #4]

; 171  : 	reg |= (XLLP_ICR_START | XLLP_ICR_TB);

  00304	e59d3004	 ldr         r3, [sp, #4]
  00308	e3833009	 orr         r3, r3, #9
  0030c	e58d3004	 str         r3, [sp, #4]

; 172  : 	reg &= ~(XLLP_ICR_STOP | XLLP_ICR_ALDIE);

  00310	e59d2004	 ldr         r2, [sp, #4]
  00314	e3e03a01	 mvn         r3, #1, 20
  00318	e2233002	 eor         r3, r3, #2
  0031c	e0023003	 and         r3, r2, r3
  00320	e58d3004	 str         r3, [sp, #4]

; 173  : 	I2C_regs->ICR = reg;

  00324	e59d301c	 ldr         r3, [sp, #0x1C]
  00328	e2832010	 add         r2, r3, #0x10
  0032c	e59d3004	 ldr         r3, [sp, #4]
  00330	e5823000	 str         r3, [r2]

; 174  : 
; 175  : 	if (XllpI2cTxEmpty(I2C_regs, pOSTRegs,20) == XLLP_TRUE)

  00334	e3a02014	 mov         r2, #0x14
  00338	e59d1020	 ldr         r1, [sp, #0x20]
  0033c	e59d001c	 ldr         r0, [sp, #0x1C]
  00340	eb000000	 bl          XllpI2cTxEmpty
  00344	e58d000c	 str         r0, [sp, #0xC]
  00348	e59d300c	 ldr         r3, [sp, #0xC]
  0034c	e3530001	 cmp         r3, #1
  00350	1a000002	 bne         |$LN6@XllpI2CWri|

; 176  : 	{
; 177  : 		return XLLP_TRUE;

  00354	e3a03001	 mov         r3, #1
  00358	e58d3008	 str         r3, [sp, #8]
  0035c	ea000042	 b           |$LN7@XllpI2CWri|
  00360		 |$LN6@XllpI2CWri|
  00360		 |$LN5@XllpI2CWri|

; 178  : 	}
; 179  : 
; 180  : 	// Send all the bytes
; 181  : 	while (bytesCount--)

  00360	e59d302c	 ldr         r3, [sp, #0x2C]
  00364	e3530000	 cmp         r3, #0
  00368	e59d302c	 ldr         r3, [sp, #0x2C]
  0036c	e2433001	 sub         r3, r3, #1
  00370	e58d302c	 str         r3, [sp, #0x2C]
  00374	0a000032	 beq         |$LN4@XllpI2CWri|

; 182  : 	{
; 183  : 		I2C_regs->IDBR = (XLLP_UINT32_T)(*bytesBuf++);

  00378	e59d3028	 ldr         r3, [sp, #0x28]
  0037c	e5d32000	 ldrb        r2, [r3]
  00380	e59d301c	 ldr         r3, [sp, #0x1C]
  00384	e2833008	 add         r3, r3, #8
  00388	e5832000	 str         r2, [r3]
  0038c	e59d3028	 ldr         r3, [sp, #0x28]
  00390	e2833001	 add         r3, r3, #1
  00394	e58d3028	 str         r3, [sp, #0x28]

; 184  : 		
; 185  : 		reg = I2C_regs->ICR;

  00398	e59d301c	 ldr         r3, [sp, #0x1C]
  0039c	e2833010	 add         r3, r3, #0x10
  003a0	e5933000	 ldr         r3, [r3]
  003a4	e58d3004	 str         r3, [sp, #4]

; 186  : 		
; 187  : 		reg &= ~XLLP_ICR_START;

  003a8	e59d2004	 ldr         r2, [sp, #4]
  003ac	e3e03001	 mvn         r3, #1
  003b0	e0023003	 and         r3, r2, r3
  003b4	e58d3004	 str         r3, [sp, #4]

; 188  : 		reg |= (XLLP_ICR_ALDIE | XLLP_ICR_TB);

  003b8	e59d2004	 ldr         r2, [sp, #4]
  003bc	e3a03a01	 mov         r3, #1, 20
  003c0	e3833008	 orr         r3, r3, #8
  003c4	e1823003	 orr         r3, r2, r3
  003c8	e58d3004	 str         r3, [sp, #4]

; 189  : 		
; 190  : 		if ((bytesCount == 0) && bSendStop)

  003cc	e59d302c	 ldr         r3, [sp, #0x2C]
  003d0	e3530000	 cmp         r3, #0
  003d4	1a000006	 bne         |$LN3@XllpI2CWri|
  003d8	e59d3030	 ldr         r3, [sp, #0x30]
  003dc	e3530000	 cmp         r3, #0
  003e0	0a000003	 beq         |$LN3@XllpI2CWri|

; 191  : 			reg |= XLLP_ICR_STOP;

  003e4	e59d3004	 ldr         r3, [sp, #4]
  003e8	e3833002	 orr         r3, r3, #2
  003ec	e58d3004	 str         r3, [sp, #4]

; 192  : 		else

  003f0	ea000003	 b           |$LN2@XllpI2CWri|
  003f4		 |$LN3@XllpI2CWri|

; 193  : 			reg &= ~XLLP_ICR_STOP;

  003f4	e59d2004	 ldr         r2, [sp, #4]
  003f8	e3e03002	 mvn         r3, #2
  003fc	e0023003	 and         r3, r2, r3
  00400	e58d3004	 str         r3, [sp, #4]
  00404		 |$LN2@XllpI2CWri|

; 194  : 
; 195  : 		I2C_regs->ICR = reg;

  00404	e59d301c	 ldr         r3, [sp, #0x1C]
  00408	e2832010	 add         r2, r3, #0x10
  0040c	e59d3004	 ldr         r3, [sp, #4]
  00410	e5823000	 str         r3, [r2]

; 196  : 
; 197  : 		if (XllpI2cTxEmpty(I2C_regs, pOSTRegs, 250) == XLLP_TRUE)

  00414	e3a020fa	 mov         r2, #0xFA
  00418	e59d1020	 ldr         r1, [sp, #0x20]
  0041c	e59d001c	 ldr         r0, [sp, #0x1C]
  00420	eb000000	 bl          XllpI2cTxEmpty
  00424	e58d0010	 str         r0, [sp, #0x10]
  00428	e59d3010	 ldr         r3, [sp, #0x10]
  0042c	e3530001	 cmp         r3, #1
  00430	1a000002	 bne         |$LN1@XllpI2CWri|

; 198  : 		{
; 199  : 			return XLLP_TRUE;

  00434	e3a03001	 mov         r3, #1
  00438	e58d3008	 str         r3, [sp, #8]
  0043c	ea00000a	 b           |$LN7@XllpI2CWri|
  00440		 |$LN1@XllpI2CWri|

; 200  : 		}
; 201  : 	}

  00440	eaffffc6	 b           |$LN5@XllpI2CWri|
  00444		 |$LN4@XllpI2CWri|

; 202  : 
; 203  : 	// Clear the STOP bit always
; 204  : 	I2C_regs->ICR &= ~XLLP_ICR_STOP;

  00444	e59d301c	 ldr         r3, [sp, #0x1C]
  00448	e2833010	 add         r3, r3, #0x10
  0044c	e5932000	 ldr         r2, [r3]
  00450	e3e03002	 mvn         r3, #2
  00454	e0022003	 and         r2, r2, r3
  00458	e59d301c	 ldr         r3, [sp, #0x1C]
  0045c	e2833010	 add         r3, r3, #0x10
  00460	e5832000	 str         r2, [r3]

; 205  : 	return XLLP_FALSE;

  00464	e3a03000	 mov         r3, #0
  00468	e58d3008	 str         r3, [sp, #8]
  0046c		 |$LN7@XllpI2CWri|

; 206  : }

  0046c	e59d0008	 ldr         r0, [sp, #8]
  00470	e28dd014	 add         sp, sp, #0x14
  00474	e89d6000	 ldmia       sp, {sp, lr}
  00478	e12fff1e	 bx          lr
  0047c		 |$M891|

			 ENDP  ; |XllpI2CWrite|

	EXPORT	|XllpI2CRead|

  00028			 AREA	 |.pdata|, PDATA
|$T899|	DCD	|$LN13@XllpI2CRea|
	DCD	0x40007804
; Function compile flags: /Odtp

  0047c			 AREA	 |.text|, CODE, ARM

  0047c		 |XllpI2CRead| PROC

; 209  : {

  0047c		 |$LN13@XllpI2CRea|
  0047c	e1a0c00d	 mov         r12, sp
  00480	e92d000f	 stmdb       sp!, {r0 - r3}
  00484	e92d5000	 stmdb       sp!, {r12, lr}
  00488	e24dd010	 sub         sp, sp, #0x10
  0048c		 |$M896|

; 210  : 	XLLP_UINT32_T reg;
; 211  : 
; 212  : 	I2C_regs->IDBR = (slaveAddr << 1) | XLLP_IDBR_MODE;

  0048c	e5dd3020	 ldrb        r3, [sp, #0x20]
  00490	e1a03083	 mov         r3, r3, lsl #1
  00494	e3832001	 orr         r2, r3, #1
  00498	e59d3018	 ldr         r3, [sp, #0x18]
  0049c	e2833008	 add         r3, r3, #8
  004a0	e5832000	 str         r2, [r3]

; 213  : 
; 214  : 	reg = I2C_regs->ICR;

  004a4	e59d3018	 ldr         r3, [sp, #0x18]
  004a8	e2833010	 add         r3, r3, #0x10
  004ac	e5933000	 ldr         r3, [r3]
  004b0	e58d3000	 str         r3, [sp]

; 215  : 	reg |= (XLLP_ICR_START | XLLP_ICR_TB);

  004b4	e59d3000	 ldr         r3, [sp]
  004b8	e3833009	 orr         r3, r3, #9
  004bc	e58d3000	 str         r3, [sp]

; 216  : 	reg &= ~(XLLP_ICR_STOP | XLLP_ICR_ALDIE);

  004c0	e59d2000	 ldr         r2, [sp]
  004c4	e3e03a01	 mvn         r3, #1, 20
  004c8	e2233002	 eor         r3, r3, #2
  004cc	e0023003	 and         r3, r2, r3
  004d0	e58d3000	 str         r3, [sp]

; 217  : 	I2C_regs->ICR = reg;

  004d4	e59d3018	 ldr         r3, [sp, #0x18]
  004d8	e2832010	 add         r2, r3, #0x10
  004dc	e59d3000	 ldr         r3, [sp]
  004e0	e5823000	 str         r3, [r2]

; 218  : 
; 219  : 	if (XllpI2cTxEmpty(I2C_regs, pOSTRegs,20) == XLLP_TRUE)

  004e4	e3a02014	 mov         r2, #0x14
  004e8	e59d101c	 ldr         r1, [sp, #0x1C]
  004ec	e59d0018	 ldr         r0, [sp, #0x18]
  004f0	eb000000	 bl          XllpI2cTxEmpty
  004f4	e58d0008	 str         r0, [sp, #8]
  004f8	e59d3008	 ldr         r3, [sp, #8]
  004fc	e3530001	 cmp         r3, #1
  00500	1a000002	 bne         |$LN8@XllpI2CRea|

; 220  : 	{
; 221  : 		return XLLP_TRUE;

  00504	e3a03001	 mov         r3, #1
  00508	e58d3004	 str         r3, [sp, #4]
  0050c	ea00004e	 b           |$LN9@XllpI2CRea|
  00510		 |$LN8@XllpI2CRea|
  00510		 |$LN7@XllpI2CRea|

; 222  : 	}
; 223  : 
; 224  : 	while (bytesCount--)

  00510	e59d3028	 ldr         r3, [sp, #0x28]
  00514	e3530000	 cmp         r3, #0
  00518	e59d3028	 ldr         r3, [sp, #0x28]
  0051c	e2433001	 sub         r3, r3, #1
  00520	e58d3028	 str         r3, [sp, #0x28]
  00524	0a00003e	 beq         |$LN6@XllpI2CRea|

; 225  : 	{
; 226  : 		reg = I2C_regs->ICR;

  00528	e59d3018	 ldr         r3, [sp, #0x18]
  0052c	e2833010	 add         r3, r3, #0x10
  00530	e5933000	 ldr         r3, [r3]
  00534	e58d3000	 str         r3, [sp]

; 227  : 		reg &= ~XLLP_ICR_START;

  00538	e59d2000	 ldr         r2, [sp]
  0053c	e3e03001	 mvn         r3, #1
  00540	e0023003	 and         r3, r2, r3
  00544	e58d3000	 str         r3, [sp]

; 228  : 		reg |= XLLP_ICR_ALDIE | XLLP_ICR_TB;

  00548	e59d2000	 ldr         r2, [sp]
  0054c	e3a03a01	 mov         r3, #1, 20
  00550	e3833008	 orr         r3, r3, #8
  00554	e1823003	 orr         r3, r2, r3
  00558	e58d3000	 str         r3, [sp]

; 229  : 		if (bytesCount == 0)

  0055c	e59d3028	 ldr         r3, [sp, #0x28]
  00560	e3530000	 cmp         r3, #0
  00564	1a00000e	 bne         |$LN5@XllpI2CRea|

; 230  : 		{
; 231  : 			reg |= XLLP_ICR_ACKNACK;

  00568	e59d3000	 ldr         r3, [sp]
  0056c	e3833004	 orr         r3, r3, #4
  00570	e58d3000	 str         r3, [sp]

; 232  : 			if (bSendStop)

  00574	e59d302c	 ldr         r3, [sp, #0x2C]
  00578	e3530000	 cmp         r3, #0
  0057c	0a000003	 beq         |$LN4@XllpI2CRea|

; 233  : 				reg |= XLLP_ICR_STOP;

  00580	e59d3000	 ldr         r3, [sp]
  00584	e3833002	 orr         r3, r3, #2
  00588	e58d3000	 str         r3, [sp]

; 234  : 			else

  0058c	ea000003	 b           |$LN3@XllpI2CRea|
  00590		 |$LN4@XllpI2CRea|

; 235  : 				reg &= ~XLLP_ICR_STOP;

  00590	e59d2000	 ldr         r2, [sp]
  00594	e3e03002	 mvn         r3, #2
  00598	e0023003	 and         r3, r2, r3
  0059c	e58d3000	 str         r3, [sp]
  005a0		 |$LN3@XllpI2CRea|

; 236  : 		} else

  005a0	ea000003	 b           |$LN2@XllpI2CRea|
  005a4		 |$LN5@XllpI2CRea|

; 237  : 		{
; 238  : 			reg &= ~XLLP_ICR_ACKNACK;

  005a4	e59d2000	 ldr         r2, [sp]
  005a8	e3e03004	 mvn         r3, #4
  005ac	e0023003	 and         r3, r2, r3
  005b0	e58d3000	 str         r3, [sp]
  005b4		 |$LN2@XllpI2CRea|

; 239  : 		}
; 240  : 		I2C_regs->ICR = reg;

  005b4	e59d3018	 ldr         r3, [sp, #0x18]
  005b8	e2832010	 add         r2, r3, #0x10
  005bc	e59d3000	 ldr         r3, [sp]
  005c0	e5823000	 str         r3, [r2]

; 241  : 
; 242  : 		if (XllpI2cRxFull(I2C_regs, pOSTRegs, 60) == XLLP_TRUE)

  005c4	e3a0203c	 mov         r2, #0x3C
  005c8	e59d101c	 ldr         r1, [sp, #0x1C]
  005cc	e59d0018	 ldr         r0, [sp, #0x18]
  005d0	eb000000	 bl          XllpI2cRxFull
  005d4	e58d000c	 str         r0, [sp, #0xC]
  005d8	e59d300c	 ldr         r3, [sp, #0xC]
  005dc	e3530001	 cmp         r3, #1
  005e0	1a000002	 bne         |$LN1@XllpI2CRea|

; 243  : 		{	
; 244  : 			return XLLP_TRUE;

  005e4	e3a03001	 mov         r3, #1
  005e8	e58d3004	 str         r3, [sp, #4]
  005ec	ea000016	 b           |$LN9@XllpI2CRea|
  005f0		 |$LN1@XllpI2CRea|

; 245  : 		}
; 246  : 		reg = I2C_regs->IDBR & 0xFF;

  005f0	e59d3018	 ldr         r3, [sp, #0x18]
  005f4	e2833008	 add         r3, r3, #8
  005f8	e5933000	 ldr         r3, [r3]
  005fc	e20330ff	 and         r3, r3, #0xFF
  00600	e58d3000	 str         r3, [sp]

; 247  : 		*bytesBuf++ = (XLLP_UINT8_T)reg;

  00604	e59d3000	 ldr         r3, [sp]
  00608	e20320ff	 and         r2, r3, #0xFF
  0060c	e59d3024	 ldr         r3, [sp, #0x24]
  00610	e5c32000	 strb        r2, [r3]
  00614	e59d3024	 ldr         r3, [sp, #0x24]
  00618	e2833001	 add         r3, r3, #1
  0061c	e58d3024	 str         r3, [sp, #0x24]

; 248  : 	}

  00620	eaffffba	 b           |$LN7@XllpI2CRea|
  00624		 |$LN6@XllpI2CRea|

; 249  : 
; 250  : 	I2C_regs->ICR &= ~(XLLP_ICR_STOP | XLLP_ICR_ACKNACK);

  00624	e59d3018	 ldr         r3, [sp, #0x18]
  00628	e2833010	 add         r3, r3, #0x10
  0062c	e5932000	 ldr         r2, [r3]
  00630	e3e03006	 mvn         r3, #6
  00634	e0022003	 and         r2, r2, r3
  00638	e59d3018	 ldr         r3, [sp, #0x18]
  0063c	e2833010	 add         r3, r3, #0x10
  00640	e5832000	 str         r2, [r3]

; 251  : 
; 252  : 	return XLLP_FALSE;

  00644	e3a03000	 mov         r3, #0
  00648	e58d3004	 str         r3, [sp, #4]
  0064c		 |$LN9@XllpI2CRea|

; 253  : }

  0064c	e59d0004	 ldr         r0, [sp, #4]
  00650	e28dd010	 add         sp, sp, #0x10
  00654	e89d6000	 ldmia       sp, {sp, lr}
  00658	e12fff1e	 bx          lr
  0065c		 |$M897|

			 ENDP  ; |XllpI2CRead|

	END
