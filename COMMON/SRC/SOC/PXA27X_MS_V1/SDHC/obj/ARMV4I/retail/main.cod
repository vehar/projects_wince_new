; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\SDHC\main.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|DllEntry|
	IMPORT	|SDHCDDeinitializeHCLib|
	IMPORT	|SDDeinitializeCardLib|
	IMPORT	|SDHCDInitializeHCLib|
	IMPORT	|SDInitializeCardLib|
	IMPORT	|DisableThreadLibraryCalls|
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\sdhc\main.c

  00000			 AREA	 |.pdata|, PDATA
|$T43046| DCD	|$LN11@DllEntry|
	DCD	0x40001601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllEntry| PROC

; 71   : {

  00000		 |$LN11@DllEntry|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43043|

; 72   :     if ( Reason == DLL_PROCESS_ATTACH ) {

  00004	e3510001	 cmp         r1, #1
  00008	1a00000b	 bne         |$LN2@DllEntry|

; 73   :         SD_DEBUG_ZONE_REGISTER(hInstance, SDH_REGISTRY_BASE_PATH);
; 74   :         DisableThreadLibraryCalls( (HMODULE) hInstance );

  0000c	eb000000	 bl          DisableThreadLibraryCalls

; 75   : 
; 76   :         if( !SDInitializeCardLib() )

  00010	eb000000	 bl          SDInitializeCardLib
  00014	e3500000	 cmp         r0, #0
  00018	1a000002	 bne         |$LN4@DllEntry|
  0001c		 |$LN8@DllEntry|

; 77   :         {
; 78   :             return FALSE;

  0001c	e3a00000	 mov         r0, #0

; 93   : }

  00020	e49de004	 ldr         lr, [sp], #4
  00024	e12fff1e	 bx          lr
  00028		 |$LN4@DllEntry|

; 79   :         }
; 80   :         else if( !SD_API_SUCCESS( SDHCDInitializeHCLib() ) ) 

  00028	eb000000	 bl          SDHCDInitializeHCLib
  0002c	e3500000	 cmp         r0, #0
  00030	5a000005	 bpl         |$LN1@DllEntry|

; 81   :         {
; 82   :             SDDeinitializeCardLib();

  00034	eb000000	 bl          SDDeinitializeCardLib

; 83   :             return FALSE;

  00038	eafffff7	 b           |$LN8@DllEntry|
  0003c		 |$LN2@DllEntry|

; 84   :         }
; 85   :     }
; 86   : 
; 87   :     if ( Reason == DLL_PROCESS_DETACH ) {

  0003c	e3510000	 cmp         r1, #0
  00040	1a000001	 bne         |$LN1@DllEntry|

; 88   :         SDHCDDeinitializeHCLib();

  00044	eb000000	 bl          SDHCDDeinitializeHCLib

; 89   :         SDDeinitializeCardLib();

  00048	eb000000	 bl          SDDeinitializeCardLib
  0004c		 |$LN1@DllEntry|

; 90   :     }
; 91   : 
; 92   :     return(TRUE);

  0004c	e3a00001	 mov         r0, #1

; 93   : }

  00050	e49de004	 ldr         lr, [sp], #4
  00054	e12fff1e	 bx          lr
  00058		 |$M43044|

			 ENDP  ; |DllEntry|

	EXPORT	|SDH_Deinit|
	IMPORT	|SDHCDDeleteContext|
	IMPORT	|free|
	IMPORT	|SDHCDDeregisterHostController|

  00000			 AREA	 |.pdata|, PDATA
|$T43056| DCD	|$LN6@SDH_Deinit|
	DCD	0x40000d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_Deinit| PROC

; 105  : {

  00000		 |$LN6@SDH_Deinit|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M43053|
  00004	e1a04000	 mov         r4, r0

; 106  :     PSDCARD_HC_CONTEXT pHostContext;
; 107  : 
; 108  :     DbgPrintZo(SDCARD_ZONE_INIT, (TEXT("SDH: +SDH_Deinit\n")));
; 109  : 
; 110  :     pHostContext = (PSDCARD_HC_CONTEXT)hDeviceContext;
; 111  : 
; 112  :         // deregister the host controller
; 113  :     SDHCDDeregisterHostController(pHostContext);

  00008	eb000000	 bl          SDHCDDeregisterHostController

; 114  : 
; 115  :     if( pHostContext && pHostContext->pHCSpecificContext )

  0000c	e3540000	 cmp         r4, #0
  00010	1594304c	 ldrne       r3, [r4, #0x4C]
  00014	13530000	 cmpne       r3, #0

; 116  :     {
; 117  :         free( pHostContext->pHCSpecificContext );

  00018	11a00003	 movne       r0, r3
  0001c	1b000000	 blne        free

; 118  :     }
; 119  : 
; 120  :         // cleanup the context
; 121  :     SDHCDDeleteContext((PSDCARD_HC_CONTEXT)hDeviceContext);

  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          SDHCDDeleteContext

; 122  : 
; 123  :     return TRUE;

  00028	e3a00001	 mov         r0, #1

; 124  : }

  0002c	e8bd4010	 ldmia       sp!, {r4, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M43054|

			 ENDP  ; |SDH_Deinit|

	EXPORT	|SDH_IOControl|

  00000			 AREA	 |.pdata|, PDATA
|$T43065| DCD	|$LN5@SDH_IOCont|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_IOControl| PROC

; 247  : {

  00000		 |$LN5@SDH_IOCont|
  00000		 |$M43062|

; 248  :     DbgPrintZo(SDCARD_ZONE_FUNC, (TEXT("SDH: +-SDH_IOControl \n")));
; 249  :     return FALSE;;

  00000	e3a00000	 mov         r0, #0

; 250  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43063|

			 ENDP  ; |SDH_IOControl|

	EXPORT	|SDH_Open|

  00000			 AREA	 |.pdata|, PDATA
|$T43074| DCD	|$LN5@SDH_Open|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_Open| PROC

; 264  : {

  00000		 |$LN5@SDH_Open|
  00000		 |$M43071|

; 265  :     DbgPrintZo(SDCARD_ZONE_FUNC, (TEXT("SDH: +-SDH_Open\n")));
; 266  :     return 0;

  00000	e3a00000	 mov         r0, #0

; 267  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43072|

			 ENDP  ; |SDH_Open|

	EXPORT	|SDH_Close|

  00000			 AREA	 |.pdata|, PDATA
|$T43083| DCD	|$LN5@SDH_Close|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_Close| PROC

; 279  : {

  00000		 |$LN5@SDH_Close|
  00000		 |$M43080|

; 280  :     DbgPrintZo(SDCARD_ZONE_FUNC, (TEXT("SDH: +-SDH_Close\n")));
; 281  :     return TRUE;

  00000	e3a00001	 mov         r0, #1

; 282  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43081|

			 ENDP  ; |SDH_Close|

	EXPORT	|SDH_PowerDown|
	IMPORT	|SDControllerPowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T43091| DCD	|$LN6@SDH_PowerD|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_PowerDown| PROC

; 294  : {

  00000		 |$LN6@SDH_PowerD|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43088|
  00004	e3500000	 cmp         r0, #0

; 295  :     PSDCARD_HC_CONTEXT pHostContext;
; 296  :     PSDH_HARDWARE_CONTEXT pController;
; 297  : 
; 298  :     DbgPrintZo(SDCARD_ZONE_FUNC, (TEXT("SDH: +SDH_PowerDown\n")));
; 299  : 
; 300  :     pHostContext = (PSDCARD_HC_CONTEXT)hDeviceContext;
; 301  :     ASSERT( pHostContext );
; 302  :     if( pHostContext )
; 303  :     {
; 304  :         pController = pHostContext->pHCSpecificContext;
; 305  :         SDControllerPowerDown( pController );

  00008	1590004c	 ldrne       r0, [r0, #0x4C]
  0000c	1b000000	 blne        SDControllerPowerDown

; 306  :     }
; 307  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M43089|

			 ENDP  ; |SDH_PowerDown|

	EXPORT	|SDH_PowerUp|
	IMPORT	|SDControllerPowerUp|

  00000			 AREA	 |.pdata|, PDATA
|$T43099| DCD	|$LN6@SDH_PowerU|
	DCD	0x40000601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_PowerUp| PROC

; 316  : {

  00000		 |$LN6@SDH_PowerU|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M43096|
  00004	e3500000	 cmp         r0, #0

; 317  :     PSDCARD_HC_CONTEXT pHostContext;
; 318  :     PSDH_HARDWARE_CONTEXT pController;
; 319  : 
; 320  :     DbgPrintZo(SDCARD_ZONE_FUNC, (TEXT("SDH: +SDH_PowerDown\n")));
; 321  : 
; 322  :     pHostContext = (PSDCARD_HC_CONTEXT)hDeviceContext;
; 323  :     ASSERT( pHostContext );
; 324  :     if( pHostContext )
; 325  :     {
; 326  :         pController = pHostContext->pHCSpecificContext;
; 327  :         SDControllerPowerUp( pController );

  00008	1590004c	 ldrne       r0, [r0, #0x4C]
  0000c	1b000000	 blne        SDControllerPowerUp

; 328  :     }
; 329  : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$M43097|

			 ENDP  ; |SDH_PowerUp|

	EXPORT	|SDH_Read|

  00000			 AREA	 |.pdata|, PDATA
|$T43108| DCD	|$LN5@SDH_Read|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_Read| PROC

; 343  : {

  00000		 |$LN5@SDH_Read|
  00000		 |$M43105|

; 344  :     DbgPrintZo(SDCARD_ZONE_FUNC, (TEXT("SDH: +-SDH_Read\n")));
; 345  :     return 0;

  00000	e3a00000	 mov         r0, #0

; 346  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43106|

			 ENDP  ; |SDH_Read|

	EXPORT	|SDH_Seek|

  00000			 AREA	 |.pdata|, PDATA
|$T43117| DCD	|$LN5@SDH_Seek|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_Seek| PROC

; 360  : {

  00000		 |$LN5@SDH_Seek|
  00000		 |$M43114|

; 361  :     DbgPrintZo(SDCARD_ZONE_FUNC, (TEXT("SDH: +-SDH_Seek\n")));
; 362  :     return 0;

  00000	e3a00000	 mov         r0, #0

; 363  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43115|

			 ENDP  ; |SDH_Seek|

	EXPORT	|SDH_Write|

  00000			 AREA	 |.pdata|, PDATA
|$T43126| DCD	|$LN5@SDH_Write|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_Write| PROC

; 377  : {

  00000		 |$LN5@SDH_Write|
  00000		 |$M43123|

; 378  :     DbgPrintZo(SDCARD_ZONE_FUNC, (TEXT("SDH: +-SDH_Write\n")));
; 379  :     return 0;

  00000	e3a00000	 mov         r0, #0

; 380  : }

  00004	e12fff1e	 bx          lr
  00008		 |$M43124|

			 ENDP  ; |SDH_Write|

	EXPORT	|LoadRegistrySettings|
	EXPORT	|??_C@_1CA@LCEEPFOK@?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAM?$AAo?$AAd?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@FPPMGDBH@?$AAM?$AAa?$AAx?$AAi?$AAm?$AAu?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@LOLEJNPJ@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@HGGPDGIP@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AAI?$AAf?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@IDMBHNCC@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAA?$AAl?$AAw?$AAa?$AAy?$AAs?$AAO?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@OJBDCMDA@?$AAD?$AAM?$AAA?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@GMMNAJKE@?$AAD?$AAM?$AAA?$AAI?$AAs?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@KPJJLCEA@?$AAD?$AAM?$AAA?$AAI?$AAs?$AAr?$AAD?$AAl?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@BHHIEEFG@?$AAD?$AAM?$AAA?$AAS?$AAy?$AAs?$AAI?$AAn?$AAt?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@JHFMHONC@?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@KNMADMKP@?$AAD?$AAM?$AAA?$AAI?$AAR?$AAQ?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@DPAMDNIK@?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@LBONBMJK@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAR?$AAQ?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LoadPlatformRegistrySettings|
	IMPORT	|RegQueryValueExW|

  00000			 AREA	 |.pdata|, PDATA
|$T43148| DCD	|$LN42@LoadRegist|
	DCD	0x40011702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@LCEEPFOK@?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAM?$AAo?$AAd?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "P"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "S", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@FPPMGDBH@?$AAM?$AAa?$AAx?$AAi?$AAm?$AAu?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@| DCB "M"
	DCB	0x0, "a", 0x0, "x", 0x0, "i", 0x0, "m", 0x0, "u", 0x0, "m"
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "F"
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "n"
	DCB	0x0, "c", 0x0, "y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@LOLEJNPJ@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I", 0x0, "S", 0x0, "T"
	DCB	0x0, "P", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@HGGPDGIP@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AAI?$AAf?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "O", 0x0, "n"
	DCB	0x0, "I", 0x0, "f", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IDMBHNCC@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAA?$AAl?$AAw?$AAa?$AAy?$AAs?$AAO?$AAn?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "A", 0x0, "l"
	DCB	0x0, "w", 0x0, "a", 0x0, "y", 0x0, "s", 0x0, "O", 0x0, "n"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@OJBDCMDA@?$AAD?$AAM?$AAA?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "I", 0x0, "S", 0x0, "T", 0x0, "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@GMMNAJKE@?$AAD?$AAM?$AAA?$AAI?$AAs?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "I", 0x0, "s", 0x0, "r", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@KPJJLCEA@?$AAD?$AAM?$AAA?$AAI?$AAs?$AAr?$AAD?$AAl?$AAl?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "I", 0x0, "s", 0x0, "r", 0x0, "D"
	DCB	0x0, "l", 0x0, "l", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@BHHIEEFG@?$AAD?$AAM?$AAA?$AAS?$AAy?$AAs?$AAI?$AAn?$AAt?$AAr?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "S", 0x0, "y", 0x0, "s", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@JHFMHONC@?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@KNMADMKP@?$AAD?$AAM?$AAA?$AAI?$AAR?$AAQ?$AA?$AA@| DCB "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "I", 0x0, "R", 0x0, "Q", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@DPAMDNIK@?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AA@| DCB "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@LBONBMJK@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAR?$AAQ?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I", 0x0, "R", 0x0, "Q"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |LoadRegistrySettings| PROC

; 397  : {

  00000		 |$LN42@LoadRegist|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd014	 sub         sp, sp, #0x14
  00008		 |$M43145|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a07000	 mov         r7, r0

; 398  :     DWORD dwRegVal;
; 399  :     DWORD dwDataSize;
; 400  :     DWORD dwType;
; 401  : 
; 402  :     dwDataSize = sizeof(DWORD);
; 403  :     if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_IRQ_TEXT,
; 404  :                                           NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 405  :         REG_DWORD == dwType )

  00010	e59f1440	 ldr         r1, [pc, #0x440]
  00014	e3a06004	 mov         r6, #4
  00018	e28de008	 add         lr, sp, #8
  0001c	e28d4010	 add         r4, sp, #0x10
  00020	e28d300c	 add         r3, sp, #0xC
  00024	e3a02000	 mov         r2, #0
  00028	e58d6008	 str         r6, [sp, #8]
  0002c	e58de004	 str         lr, [sp, #4]
  00030	e58d4000	 str         r4, [sp]
  00034	eb000000	 bl          RegQueryValueExW
  00038	e3500000	 cmp         r0, #0
  0003c	1a000019	 bne         |$LN27@LoadRegist|
  00040	e59d300c	 ldr         r3, [sp, #0xC]
  00044	e3530004	 cmp         r3, #4
  00048	1a000016	 bne         |$LN27@LoadRegist|

; 406  :     {
; 407  :         pController->dwSDMMCIrq = dwRegVal;

  0004c	e59d3010	 ldr         r3, [sp, #0x10]

; 412  :     }
; 413  : 
; 414  :     // get the DMA channel
; 415  :     dwDataSize = sizeof(DWORD);
; 416  :     if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_DMA_CHANNEL_TEXT,
; 417  :                                           NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 418  :         REG_DWORD == dwType )

  00050	e59f13fc	 ldr         r1, [pc, #0x3FC]
  00054	e3a06004	 mov         r6, #4
  00058	e5853028	 str         r3, [r5, #0x28]
  0005c	e28de008	 add         lr, sp, #8
  00060	e28d4010	 add         r4, sp, #0x10
  00064	e28d300c	 add         r3, sp, #0xC
  00068	e3a02000	 mov         r2, #0
  0006c	e1a00007	 mov         r0, r7
  00070	e58d6008	 str         r6, [sp, #8]
  00074	e58de004	 str         lr, [sp, #4]
  00078	e58d4000	 str         r4, [sp]
  0007c	eb000000	 bl          RegQueryValueExW
  00080	e3500000	 cmp         r0, #0
  00084	1a000078	 bne         |$LN25@LoadRegist|
  00088	e59d300c	 ldr         r3, [sp, #0xC]
  0008c	e3530004	 cmp         r3, #4
  00090	1a000075	 bne         |$LN25@LoadRegist|

; 419  :     {
; 420  :         if( dwRegVal > 31 )

  00094	e59d6010	 ldr         r6, [sp, #0x10]
  00098	e356001f	 cmp         r6, #0x1F
  0009c	9a000005	 bls         |$LN24@LoadRegist|

; 421  :         {
; 422  :             pController->dwDmaChannel = 0xffffffff;

  000a0	e3e03000	 mvn         r3, #0
  000a4	e5853aa4	 str         r3, [r5, #0xAA4]
  000a8		 |$LN27@LoadRegist|

; 408  :     }
; 409  :     else
; 410  :     {
; 411  :         return FALSE;

  000a8	e3a00000	 mov         r0, #0
  000ac		 |$LN28@LoadRegist|

; 567  : }

  000ac	e28dd014	 add         sp, sp, #0x14
  000b0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN24@LoadRegist|

; 423  :             return FALSE;
; 424  :         }
; 425  :         pController->dwDmaChannel = dwRegVal;
; 426  : 
; 427  :         // get the DMA IRQ
; 428  :         dwDataSize = sizeof(DWORD);
; 429  :         if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_DMA_IRQ_TEXT,
; 430  :                                               NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 431  :             REG_DWORD == dwType )

  000b8	e59f1390	 ldr         r1, [pc, #0x390]
  000bc	e3a08004	 mov         r8, #4
  000c0	e28de008	 add         lr, sp, #8
  000c4	e28d4010	 add         r4, sp, #0x10
  000c8	e28d300c	 add         r3, sp, #0xC
  000cc	e3a02000	 mov         r2, #0
  000d0	e1a00007	 mov         r0, r7
  000d4	e5856aa4	 str         r6, [r5, #0xAA4]
  000d8	e58d8008	 str         r8, [sp, #8]
  000dc	e58de004	 str         lr, [sp, #4]
  000e0	e58d4000	 str         r4, [sp]
  000e4	eb000000	 bl          RegQueryValueExW
  000e8	e3500000	 cmp         r0, #0
  000ec	059d300c	 ldreq       r3, [sp, #0xC]

; 432  :         {
; 433  :             pController->dwDmaIRQ = dwRegVal;
; 434  :         }
; 435  :         else
; 436  :         {
; 437  :             pController->dwDmaIRQ = IRQ_DMAC;
; 438  :         }
; 439  : 
; 440  :         // get the DMA buffer size
; 441  :         dwDataSize = sizeof(DWORD);
; 442  :         if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_DMA_BUFFER_SIZE_TEXT,
; 443  :                                               NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 444  :             REG_DWORD == dwType )

  000f0	e59f1354	 ldr         r1, [pc, #0x354]
  000f4	e3a06004	 mov         r6, #4
  000f8	03530004	 cmpeq       r3, #4
  000fc	059d3010	 ldreq       r3, [sp, #0x10]
  00100	13a03019	 movne       r3, #0x19
  00104	e5853a8c	 str         r3, [r5, #0xA8C]
  00108	e28de008	 add         lr, sp, #8
  0010c	e28d4010	 add         r4, sp, #0x10
  00110	e28d300c	 add         r3, sp, #0xC
  00114	e3a02000	 mov         r2, #0
  00118	e1a00007	 mov         r0, r7
  0011c	e58d6008	 str         r6, [sp, #8]
  00120	e58de004	 str         lr, [sp, #4]
  00124	e58d4000	 str         r4, [sp]
  00128	eb000000	 bl          RegQueryValueExW
  0012c	e3500000	 cmp         r0, #0
  00130	059d300c	 ldreq       r3, [sp, #0xC]

; 445  :         {
; 446  :             pController->dwDmaBufferSize = dwRegVal;
; 447  :         }
; 448  :         else
; 449  :         {
; 450  :             pController->dwDmaBufferSize = 0;
; 451  :         }
; 452  : 
; 453  :         // get the DMA SysInt
; 454  :         dwDataSize = sizeof(DWORD);
; 455  :         if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_DMA_SYSINT_TEXT,
; 456  :                                               NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 457  :             REG_DWORD == dwType )

  00134	e59f130c	 ldr         r1, [pc, #0x30C]
  00138	e3a06000	 mov         r6, #0
  0013c	03530004	 cmpeq       r3, #4
  00140	059d3010	 ldreq       r3, [sp, #0x10]
  00144	e3a08004	 mov         r8, #4
  00148	e28de008	 add         lr, sp, #8
  0014c	05853088	 streq       r3, [r5, #0x88]
  00150	e28d4010	 add         r4, sp, #0x10
  00154	e28d300c	 add         r3, sp, #0xC
  00158	e3a02000	 mov         r2, #0
  0015c	e1a00007	 mov         r0, r7
  00160	15856088	 strne       r6, [r5, #0x88]
  00164	e58d8008	 str         r8, [sp, #8]
  00168	e58de004	 str         lr, [sp, #4]
  0016c	e58d4000	 str         r4, [sp]
  00170	eb000000	 bl          RegQueryValueExW
  00174	e3500000	 cmp         r0, #0
  00178	059d300c	 ldreq       r3, [sp, #0xC]

; 458  :         {
; 459  :             pController->dwDmaSysIntr = dwRegVal;
; 460  :         }
; 461  :         else
; 462  :         {
; 463  :             pController->dwDmaSysIntr = SYSINTR_UNDEFINED;
; 464  :         }
; 465  : 
; 466  :         dwDataSize = sizeof(pController->wszDmaIsrDll);
; 467  :         if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_DMA_ISR_DLL_TEXT,
; 468  :                                               NULL, &dwType, (LPBYTE)pController->wszDmaIsrDll, &dwDataSize ) &&
; 469  :             REG_SZ == dwType )

  0017c	e59f12c0	 ldr         r1, [pc, #0x2C0]
  00180	e3a08b02	 mov         r8, #2, 22
  00184	03530004	 cmpeq       r3, #4
  00188	059d3010	 ldreq       r3, [sp, #0x10]
  0018c	13e03000	 mvnne       r3, #0
  00190	e5853a90	 str         r3, [r5, #0xA90]
  00194	e28de008	 add         lr, sp, #8
  00198	e285408c	 add         r4, r5, #0x8C
  0019c	e28d300c	 add         r3, sp, #0xC
  001a0	e3a02000	 mov         r2, #0
  001a4	e1a00007	 mov         r0, r7
  001a8	e58d8008	 str         r8, [sp, #8]
  001ac	e58de004	 str         lr, [sp, #4]
  001b0	e58d4000	 str         r4, [sp]
  001b4	eb000000	 bl          RegQueryValueExW
  001b8	e3500000	 cmp         r0, #0
  001bc	1a000002	 bne         |$LN17@LoadRegist|
  001c0	e59d300c	 ldr         r3, [sp, #0xC]
  001c4	e3530001	 cmp         r3, #1
  001c8	0a000000	 beq         |$LN16@LoadRegist|
  001cc		 |$LN17@LoadRegist|

; 470  :         {
; 471  :         }
; 472  :         else
; 473  :         {
; 474  :             pController->wszDmaIsrDll[0] = 0;

  001cc	e1c568bc	 strh        r6, [r5, #0x8C]
  001d0		 |$LN16@LoadRegist|

; 475  :         }
; 476  : 
; 477  :         dwDataSize = sizeof(pController->wszDmaIsrHandler);
; 478  :         if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_DMA_ISR_HANDLER_TEXT,
; 479  :                                               NULL, &dwType, (LPBYTE)pController->wszDmaIsrHandler, &dwDataSize ) &&
; 480  :             REG_SZ == dwType )

  001d0	e2853b02	 add         r3, r5, #2, 22
  001d4	e59f1264	 ldr         r1, [pc, #0x264]
  001d8	e283308c	 add         r3, r3, #0x8C
  001dc	e58d3000	 str         r3, [sp]
  001e0	e3a04c02	 mov         r4, #2, 24
  001e4	e28de008	 add         lr, sp, #8
  001e8	e28d300c	 add         r3, sp, #0xC
  001ec	e3a02000	 mov         r2, #0
  001f0	e1a00007	 mov         r0, r7
  001f4	e58d4008	 str         r4, [sp, #8]
  001f8	e58de004	 str         lr, [sp, #4]
  001fc	eb000000	 bl          RegQueryValueExW
  00200	e3500000	 cmp         r0, #0
  00204	1a000002	 bne         |$LN15@LoadRegist|
  00208	e59d300c	 ldr         r3, [sp, #0xC]
  0020c	e3530001	 cmp         r3, #1
  00210	0a000001	 beq         |$LN14@LoadRegist|
  00214		 |$LN15@LoadRegist|

; 481  :         {
; 482  :         }
; 483  :         else
; 484  :         {
; 485  :             pController->wszDmaIsrHandler[0] = 0;

  00214	e2853b02	 add         r3, r5, #2, 22
  00218	e1c368bc	 strh        r6, [r3, #0x8C]
  0021c		 |$LN14@LoadRegist|

; 486  :         }
; 487  : 
; 488  :         dwDataSize = sizeof(DWORD);
; 489  :         if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_DMA_IST_PRI_TEXT,
; 490  :                                               NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 491  :             REG_DWORD == dwType )

  0021c	e59f1218	 ldr         r1, [pc, #0x218]
  00220	e3a08004	 mov         r8, #4
  00224	e28de008	 add         lr, sp, #8
  00228	e28d4010	 add         r4, sp, #0x10
  0022c	e28d300c	 add         r3, sp, #0xC
  00230	e3a02000	 mov         r2, #0
  00234	e1a00007	 mov         r0, r7
  00238	e58d8008	 str         r8, [sp, #8]
  0023c	e58de004	 str         lr, [sp, #4]
  00240	e58d4000	 str         r4, [sp]
  00244	eb000000	 bl          RegQueryValueExW
  00248	e3500000	 cmp         r0, #0
  0024c	059d300c	 ldreq       r3, [sp, #0xC]
  00250	03530004	 cmpeq       r3, #4

; 492  :         {
; 493  :             pController->DmaIstThreadPriority = dwRegVal;

  00254	059d3010	 ldreq       r3, [sp, #0x10]

; 494  :         }
; 495  :         else
; 496  :         {
; 497  :             pController->DmaIstThreadPriority = SDH_DMA_CONTROLLER_PRIORITY;

  00258	05853a9c	 streq       r3, [r5, #0xA9C]
  0025c	0a000008	 beq         |$LN11@LoadRegist|
  00260	e3a03063	 mov         r3, #0x63
  00264	e5853a9c	 str         r3, [r5, #0xA9C]

; 498  :         }
; 499  :     }
; 500  :     else

  00268	ea000005	 b           |$LN11@LoadRegist|
  0026c		 |$LN25@LoadRegist|

; 501  :     {
; 502  :         pController->dwDmaChannel = 0xffffffff;

  0026c	e3e02000	 mvn         r2, #0

; 503  :         pController->wszDmaIsrDll[0] = 0;
; 504  :         pController->wszDmaIsrHandler[0] = 0;

  00270	e2853b02	 add         r3, r5, #2, 22
  00274	e3a06000	 mov         r6, #0
  00278	e5852aa4	 str         r2, [r5, #0xAA4]
  0027c	e1c368bc	 strh        r6, [r3, #0x8C]
  00280	e1c568bc	 strh        r6, [r5, #0x8C]
  00284		 |$LN11@LoadRegist|

; 505  :     }
; 506  : 
; 507  :     dwDataSize = sizeof(DWORD);
; 508  :     if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CLOCK_ALWAYS_ON_TEXT,
; 509  :                                           NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 510  :         REG_DWORD == dwType )

  00284	e59f11ac	 ldr         r1, [pc, #0x1AC]
  00288	e3a08004	 mov         r8, #4
  0028c	e28de008	 add         lr, sp, #8
  00290	e28d4010	 add         r4, sp, #0x10
  00294	e28d300c	 add         r3, sp, #0xC
  00298	e3a02000	 mov         r2, #0
  0029c	e1a00007	 mov         r0, r7
  002a0	e58d8008	 str         r8, [sp, #8]
  002a4	e58de004	 str         lr, [sp, #4]
  002a8	e58d4000	 str         r4, [sp]
  002ac	eb000000	 bl          RegQueryValueExW
  002b0	e3500000	 cmp         r0, #0
  002b4	1a00000a	 bne         |$LN10@LoadRegist|
  002b8	e59d300c	 ldr         r3, [sp, #0xC]
  002bc	e3530004	 cmp         r3, #4
  002c0	1a000007	 bne         |$LN10@LoadRegist|

; 511  :     {
; 512  :         pController->fClockAlwaysOn = dwRegVal ? TRUE : FALSE;

  002c4	e59d3010	 ldr         r3, [sp, #0x10]
  002c8	e3530000	 cmp         r3, #0
  002cc	13a03001	 movne       r3, #1
  002d0	15853d3c	 strne       r3, [r5, #0xD3C]
  002d4	1a000003	 bne         |$LN9@LoadRegist|
  002d8	e3a03000	 mov         r3, #0
  002dc	e5853d3c	 str         r3, [r5, #0xD3C]

; 513  :     }
; 514  :     else

  002e0	ea000000	 b           |$LN9@LoadRegist|
  002e4		 |$LN10@LoadRegist|

; 515  :     {
; 516  :         pController->fClockAlwaysOn = FALSE;

  002e4	e5856d3c	 str         r6, [r5, #0xD3C]
  002e8		 |$LN9@LoadRegist|

; 517  :     }
; 518  : 
; 519  :     dwDataSize = sizeof(DWORD);
; 520  :     if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CLOCK_ON_IF_INTERRUPTS_ENABLED_TEXT,
; 521  :                                           NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 522  :         REG_DWORD == dwType )

  002e8	e59f1144	 ldr         r1, [pc, #0x144]
  002ec	e3a08004	 mov         r8, #4
  002f0	e28de008	 add         lr, sp, #8
  002f4	e28d4010	 add         r4, sp, #0x10
  002f8	e28d300c	 add         r3, sp, #0xC
  002fc	e3a02000	 mov         r2, #0
  00300	e1a00007	 mov         r0, r7
  00304	e58d8008	 str         r8, [sp, #8]
  00308	e58de004	 str         lr, [sp, #4]
  0030c	e58d4000	 str         r4, [sp]
  00310	eb000000	 bl          RegQueryValueExW
  00314	e3500000	 cmp         r0, #0
  00318	1a00000a	 bne         |$LN8@LoadRegist|
  0031c	e59d300c	 ldr         r3, [sp, #0xC]
  00320	e3530004	 cmp         r3, #4
  00324	1a000007	 bne         |$LN8@LoadRegist|

; 523  :     {
; 524  :         pController->fClockOnIfInterruptsEnabled = dwRegVal ? TRUE : FALSE;

  00328	e59d3010	 ldr         r3, [sp, #0x10]
  0032c	e3530000	 cmp         r3, #0
  00330	13a03001	 movne       r3, #1
  00334	15853d40	 strne       r3, [r5, #0xD40]
  00338	1a000003	 bne         |$LN7@LoadRegist|
  0033c	e3a03000	 mov         r3, #0
  00340	e5853d40	 str         r3, [r5, #0xD40]

; 525  :     }
; 526  :     else

  00344	ea000000	 b           |$LN7@LoadRegist|
  00348		 |$LN8@LoadRegist|

; 527  :     {
; 528  :         pController->fClockOnIfInterruptsEnabled = FALSE;

  00348	e5856d40	 str         r6, [r5, #0xD40]
  0034c		 |$LN7@LoadRegist|

; 529  :     }
; 530  : 
; 531  :     dwDataSize = sizeof(DWORD);
; 532  :     if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_IST_PRI_TEXT,
; 533  :                                           NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 534  :         REG_DWORD == dwType )

  0034c	e59f10dc	 ldr         r1, [pc, #0xDC]
  00350	e3a06004	 mov         r6, #4
  00354	e28de008	 add         lr, sp, #8
  00358	e28d4010	 add         r4, sp, #0x10
  0035c	e28d300c	 add         r3, sp, #0xC
  00360	e3a02000	 mov         r2, #0
  00364	e1a00007	 mov         r0, r7
  00368	e58d6008	 str         r6, [sp, #8]
  0036c	e58de004	 str         lr, [sp, #4]
  00370	e58d4000	 str         r4, [sp]
  00374	eb000000	 bl          RegQueryValueExW
  00378	e3500000	 cmp         r0, #0
  0037c	059d300c	 ldreq       r3, [sp, #0xC]

; 535  :     {
; 536  :         pController->ControllerIstThreadPriority = dwRegVal;
; 537  :     }
; 538  :     else
; 539  :     {
; 540  :         pController->ControllerIstThreadPriority = SDH_CARD_CONTROLLER_PRIORITY;
; 541  :     }
; 542  : 
; 543  :     dwDataSize = sizeof(DWORD);
; 544  :     if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, MAXIMUM_CLOCK_FREQUENCY_TEXT,
; 545  :                                           NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 546  :         REG_DWORD == dwType )

  00380	e59f10a4	 ldr         r1, [pc, #0xA4]
  00384	e3a06004	 mov         r6, #4
  00388	03530004	 cmpeq       r3, #4
  0038c	059d3010	 ldreq       r3, [sp, #0x10]
  00390	13a03064	 movne       r3, #0x64
  00394	e5853038	 str         r3, [r5, #0x38]
  00398	e28de008	 add         lr, sp, #8
  0039c	e28d4010	 add         r4, sp, #0x10
  003a0	e28d300c	 add         r3, sp, #0xC
  003a4	e3a02000	 mov         r2, #0
  003a8	e1a00007	 mov         r0, r7
  003ac	e58d6008	 str         r6, [sp, #8]
  003b0	e58de004	 str         lr, [sp, #4]
  003b4	e58d4000	 str         r4, [sp]
  003b8	eb000000	 bl          RegQueryValueExW
  003bc	e3500000	 cmp         r0, #0
  003c0	059d300c	 ldreq       r3, [sp, #0xC]

; 547  :     {
; 548  :         pController->dwMaximumSDClockFrequency = dwRegVal;
; 549  :     }
; 550  :     else
; 551  :     {
; 552  :         pController->dwMaximumSDClockFrequency = MAXIMUM_SDCLOCK_FREQUENCY;
; 553  :     }
; 554  : 
; 555  :     dwDataSize = sizeof(DWORD);
; 556  :     if( ERROR_SUCCESS == RegQueryValueEx( hKeyDevice, CONTROLLER_POLLING_MODE_TEXT,
; 557  :                                           NULL, &dwType, (LPBYTE)&dwRegVal, &dwDataSize ) &&
; 558  :         REG_DWORD == dwType )

  003c4	e59f105c	 ldr         r1, [pc, #0x5C]
  003c8	e3a06004	 mov         r6, #4
  003cc	03530004	 cmpeq       r3, #4
  003d0	059d3010	 ldreq       r3, [sp, #0x10]
  003d4	159f3048	 ldrne       r3, [pc, #0x48]
  003d8	e28de008	 add         lr, sp, #8
  003dc	e28d4010	 add         r4, sp, #0x10
  003e0	e5853d4c	 str         r3, [r5, #0xD4C]
  003e4	e28d300c	 add         r3, sp, #0xC
  003e8	e3a02000	 mov         r2, #0
  003ec	e1a00007	 mov         r0, r7
  003f0	e58d6008	 str         r6, [sp, #8]
  003f4	e58de004	 str         lr, [sp, #4]
  003f8	e58d4000	 str         r4, [sp]
  003fc	eb000000	 bl          RegQueryValueExW
  00400	e3500000	 cmp         r0, #0
  00404	059d300c	 ldreq       r3, [sp, #0xC]

; 559  :     {
; 560  :         pController->dwPollingModeSize = dwRegVal;
; 561  :     }
; 562  :     else
; 563  :     {
; 564  :         pController->dwPollingModeSize = NUM_BYTE_FOR_POLLING_MODE;
; 565  :     }
; 566  :     return LoadPlatformRegistrySettings(hKeyDevice);

  00408	e1a00007	 mov         r0, r7
  0040c	03530004	 cmpeq       r3, #4
  00410	059d3010	 ldreq       r3, [sp, #0x10]
  00414	13a03b02	 movne       r3, #2, 22
  00418	e5853040	 str         r3, [r5, #0x40]
  0041c	eb000000	 bl          LoadPlatformRegistrySettings
  00420	eaffff21	 b           |$LN28@LoadRegist|
  00424		 |$LN43@LoadRegist|
  00424		 |$LN44@LoadRegist|
  00424	01312d00	 DCD         0x1312d00
  00428		 |$LN45@LoadRegist|
  00428	00000000	 DCD         |??_C@_1CA@LCEEPFOK@?$AAP?$AAo?$AAl?$AAl?$AAi?$AAn?$AAg?$AAM?$AAo?$AAd?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
  0042c		 |$LN46@LoadRegist|
  0042c	00000000	 DCD         |??_C@_1CM@FPPMGDBH@?$AAM?$AAa?$AAx?$AAi?$AAm?$AAu?$AAm?$AAC?$AAl?$AAo?$AAc?$AAk?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@|
  00430		 |$LN47@LoadRegist|
  00430	00000000	 DCD         |??_C@_1CM@LOLEJNPJ@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@|
  00434		 |$LN48@LoadRegist|
  00434	00000000	 DCD         |??_C@_1DG@HGGPDGIP@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AAI?$AAf?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAd?$AA?$AA@|
  00438		 |$LN49@LoadRegist|
  00438	00000000	 DCD         |??_C@_1BM@IDMBHNCC@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAA?$AAl?$AAw?$AAa?$AAy?$AAs?$AAO?$AAn?$AA?$AA@|
  0043c		 |$LN50@LoadRegist|
  0043c	00000000	 DCD         |??_C@_1BO@OJBDCMDA@?$AAD?$AAM?$AAA?$AAI?$AAS?$AAT?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA?$AA@|
  00440		 |$LN51@LoadRegist|
  00440	00000000	 DCD         |??_C@_1BM@GMMNAJKE@?$AAD?$AAM?$AAA?$AAI?$AAs?$AAr?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$AA@|
  00444		 |$LN52@LoadRegist|
  00444	00000000	 DCD         |??_C@_1BE@KPJJLCEA@?$AAD?$AAM?$AAA?$AAI?$AAs?$AAr?$AAD?$AAl?$AAl?$AA?$AA@|
  00448		 |$LN53@LoadRegist|
  00448	00000000	 DCD         |??_C@_1BG@BHHIEEFG@?$AAD?$AAM?$AAA?$AAS?$AAy?$AAs?$AAI?$AAn?$AAt?$AAr?$AA?$AA@|
  0044c		 |$LN54@LoadRegist|
  0044c	00000000	 DCD         |??_C@_1BM@JHFMHONC@?$AAD?$AAM?$AAA?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
  00450		 |$LN55@LoadRegist|
  00450	00000000	 DCD         |??_C@_1O@KNMADMKP@?$AAD?$AAM?$AAA?$AAI?$AAR?$AAQ?$AA?$AA@|
  00454		 |$LN56@LoadRegist|
  00454	00000000	 DCD         |??_C@_1BG@DPAMDNIK@?$AAD?$AAM?$AAA?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AA@|
  00458		 |$LN57@LoadRegist|
  00458	00000000	 DCD         |??_C@_1BM@LBONBMJK@?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAR?$AAQ?$AA?$AA@|
  0045c		 |$M43146|

			 ENDP  ; |LoadRegistrySettings|

	EXPORT	|SDH_Init|
	EXPORT	|??_C@_1BA@IOCDNFIL@?$AAL?$AAu?$AAb?$AAb?$AAo?$AAc?$AAk?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SDHCDRegisterHostController|
	IMPORT	|SDHSlotOptionHandler|
	IMPORT	|SDHCancelIoHandler|
	IMPORT	|SDHBusRequestHandler|
	IMPORT	|SDDeinitialize|
	IMPORT	|SDInitialize|
	IMPORT	|RegCloseKey|
	IMPORT	|OpenDeviceKey|
	IMPORT	|CreateBusAccessHandle|
	IMPORT	|malloc|
	IMPORT	|SDHCDAllocateContext|
	IMPORT	|wcsncpy|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T43179| DCD	|$LN11@SDH_Init|
	DCD	0x40004f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@IOCDNFIL@?$AAL?$AAu?$AAb?$AAb?$AAo?$AAc?$AAk?$AA?$AA@| DCB "L", 0x0
	DCB	"u", 0x0, "b", 0x0, "b", 0x0, "o", 0x0, "c", 0x0, "k", 0x0
	DCB	0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SDH_Init| PROC

; 134  : {

  00000		 |$LN11@SDH_Init|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M43176|
  00008	e1a04000	 mov         r4, r0

; 135  :     PSDCARD_HC_CONTEXT      pHostContext;   // new HC context
; 136  :     SD_API_STATUS           status;         // SD status
; 137  :     PSDH_HARDWARE_CONTEXT pController;    // new instance
; 138  :     HKEY hKeyDevice;
; 139  :     LPCTSTR pszActiveKey;
; 140  : 
; 141  :     DbgPrintZo(SDCARD_ZONE_INIT, (TEXT("SDH: +SDH_Init\n")));    
; 142  : 
; 143  :     DbgPrintZo(SDCARD_ZONE_INIT, (TEXT("SDH: Active RegPath: %s \n"),
; 144  :         (PTSTR)dwContext));
; 145  : 
; 146  :     pController = NULL;
; 147  : 
; 148  :     // allocate the context
; 149  :     status = SDHCDAllocateContext(SDH_SLOTS, 
; 150  :                                   &pHostContext);

  0000c	e28d1000	 add         r1, sp, #0
  00010	e3a00001	 mov         r0, #1
  00014	eb000000	 bl          SDHCDAllocateContext
  00018	e3500000	 cmp         r0, #0

; 151  : 
; 152  :     if (!SD_API_SUCCESS(status)) {
; 153  :         DbgPrintZo(SDCARD_ZONE_ERROR, 
; 154  :             (TEXT("SDH: Failed to allocate context : 0x%08X \n"), status));
; 155  :         return 0;

  0001c	4a00003a	 bmi         |$LN3@SDH_Init|

; 156  :     }
; 157  : 
; 158  :     // create our extension 
; 159  :     pController = (PSDH_HARDWARE_CONTEXT)malloc( sizeof(SDH_HARDWARE_CONTEXT) );

  00020	e3a06c0d	 mov         r6, #0xD, 24
  00024	e3860068	 orr         r0, r6, #0x68
  00028	eb000000	 bl          malloc
  0002c	e1b05000	 movs        r5, r0

; 160  :     if( pController == NULL )
; 161  :     {
; 162  :         DbgPrintZo(SDCARD_ZONE_ERROR, 
; 163  :             (TEXT("SDH: Failed to allocate extension\n")));
; 164  :         return 0;

  00030	0a000035	 beq         |$LN3@SDH_Init|

; 165  :     }
; 166  :     memset( pController, 0, sizeof(SDH_HARDWARE_CONTEXT) );

  00034	e3862068	 orr         r2, r6, #0x68
  00038	e3a01000	 mov         r1, #0
  0003c	e1a00005	 mov         r0, r5
  00040	eb000000	 bl          memset

; 167  : 
; 168  :     // Set our extension
; 169  :     pHostContext->pHCSpecificContext = pController;

  00044	e59d3000	 ldr         r3, [sp]

; 170  : 
; 171  :     pController = GetExtensionFromHCDContext(PSDH_HARDWARE_CONTEXT, pHostContext);
; 172  : 
; 173  :     pszActiveKey = (LPCTSTR) dwContext;
; 174  :     
; 175  :     pController->pszActiveKey = pszActiveKey;
; 176  :     pController->hBusAccessHandle = CreateBusAccessHandle( pszActiveKey );

  00048	e1a00004	 mov         r0, r4
  0004c	e583504c	 str         r5, [r3, #0x4C]
  00050	e59d3000	 ldr         r3, [sp]
  00054	e593504c	 ldr         r5, [r3, #0x4C]
  00058	e5854010	 str         r4, [r5, #0x10]
  0005c	eb000000	 bl          CreateBusAccessHandle
  00060	e1a03000	 mov         r3, r0

; 177  : 
; 178  :     hKeyDevice = OpenDeviceKey(pszActiveKey);

  00064	e1a00004	 mov         r0, r4
  00068	e5853014	 str         r3, [r5, #0x14]
  0006c	eb000000	 bl          OpenDeviceKey
  00070	e1b04000	 movs        r4, r0

; 179  :     if (!hKeyDevice || !LoadRegistrySettings(hKeyDevice, pController) ) {

  00074	0a000024	 beq         |$LN3@SDH_Init|
  00078	e1a01005	 mov         r1, r5
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          LoadRegistrySettings
  00084	e3500000	 cmp         r0, #0
  00088	0a00001f	 beq         |$LN3@SDH_Init|

; 183  :     }
; 184  :     RegCloseKey( hKeyDevice );

  0008c	e1a00004	 mov         r0, r4
  00090	eb000000	 bl          RegCloseKey

; 185  : 
; 186  :     DbgPrintZo(SDCARD_ZONE_INIT, 
; 187  :                (TEXT("SDH: Real RegPath: %s \n"),pController->RegPath));
; 188  :    
; 189  :     // save off the host context
; 190  :     pController->pHCContext = pHostContext;

  00094	e59d3000	 ldr         r3, [sp]

; 191  : 
; 192  :     // set the name
; 193  :     SDHCDSetHCName(pHostContext, TEXT("Lubbock"));

  00098	e59f1098	 ldr         r1, [pc, #0x98]
  0009c	e3a0200f	 mov         r2, #0xF
  000a0	e5853018	 str         r3, [r5, #0x18]
  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e2830004	 add         r0, r3, #4
  000ac	eb000000	 bl          wcsncpy

; 194  : 
; 195  :     // set init handler
; 196  :     SDHCDSetControllerInitHandler(pHostContext,SDInitialize);  

  000b0	e59f207c	 ldr         r2, [pc, #0x7C]
  000b4	e59d3000	 ldr         r3, [sp]

; 197  :     // set deinit handler    
; 198  :     SDHCDSetControllerDeinitHandler(pHostContext, SDDeinitialize);

  000b8	e59f1070	 ldr         r1, [pc, #0x70]

; 199  :     // set the bus request handler
; 200  :     SDHCDSetBusRequestHandler(pHostContext,SDHBusRequestHandler);   

  000bc	e59fe068	 ldr         lr, [pc, #0x68]
  000c0	e5832044	 str         r2, [r3, #0x44]
  000c4	e59d3000	 ldr         r3, [sp]

; 201  :     // set the cancel I/O handler
; 202  :     SDHCDSetCancelIOHandler(pHostContext, SDHCancelIoHandler);   

  000c8	e59f2058	 ldr         r2, [pc, #0x58]

; 203  :     // set the slot option handler
; 204  :     SDHCDSetSlotOptionHandler(pHostContext, SDHSlotOptionHandler); 

  000cc	e59f4050	 ldr         r4, [pc, #0x50]
  000d0	e5831048	 str         r1, [r3, #0x48]
  000d4	e59d3000	 ldr         r3, [sp]
  000d8	e583e038	 str         lr, [r3, #0x38]
  000dc	e59d3000	 ldr         r3, [sp]
  000e0	e5832040	 str         r2, [r3, #0x40]
  000e4	e59d3000	 ldr         r3, [sp]
  000e8	e583403c	 str         r4, [r3, #0x3C]

; 205  :     
; 206  : 
; 207  :     // now register the host controller 
; 208  :     status = SDHCDRegisterHostController(pHostContext);

  000ec	e59d0000	 ldr         r0, [sp]
  000f0	eb000000	 bl          SDHCDRegisterHostController
  000f4	e3500000	 cmp         r0, #0

; 209  : 
; 210  :     if (!SD_API_SUCCESS(status)) {

  000f8	5a000007	 bpl         |$LN2@SDH_Init|

; 211  :         if( pController )
; 212  :         {
; 213  :             free( pController );

  000fc	e1a00005	 mov         r0, r5
  00100	eb000000	 bl          free

; 214  :         }
; 215  :         SDHCDDeleteContext(pHostContext);

  00104	e59d0000	 ldr         r0, [sp]
  00108	eb000000	 bl          SDHCDDeleteContext
  0010c		 |$LN3@SDH_Init|

; 180  :         DbgPrintZo(SDCARD_ZONE_ERROR, 
; 181  :         (TEXT("SDH: Failed load the registry settings\n")));
; 182  :         return 0;

  0010c	e3a00000	 mov         r0, #0
  00110		 |$LN7@SDH_Init|

; 225  : }

  00110	e28dd004	 add         sp, sp, #4
  00114	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN2@SDH_Init|

; 216  :         DbgPrintZo(SDCARD_ZONE_ERROR, 
; 217  :                 (TEXT("SDH: Failed to register host controller: %0x08X \n"),status));
; 218  :         return 0;
; 219  :     }
; 220  : 
; 221  :     DbgPrintZo(SDCARD_ZONE_INIT, (TEXT("SDH: -SDH_Init\n")));
; 222  : 
; 223  :     // return the Host Controller context
; 224  :     return (DWORD)pHostContext;

  0011c	e59d0000	 ldr         r0, [sp]
  00120	eafffffa	 b           |$LN7@SDH_Init|
  00124		 |$LN12@SDH_Init|
  00124		 |$LN13@SDH_Init|
  00124	00000000	 DCD         |SDHSlotOptionHandler|
  00128		 |$LN14@SDH_Init|
  00128	00000000	 DCD         |SDHCancelIoHandler|
  0012c		 |$LN15@SDH_Init|
  0012c	00000000	 DCD         |SDHBusRequestHandler|
  00130		 |$LN16@SDH_Init|
  00130	00000000	 DCD         |SDDeinitialize|
  00134		 |$LN17@SDH_Init|
  00134	00000000	 DCD         |SDInitialize|
  00138		 |$LN18@SDH_Init|
  00138	00000000	 DCD         |??_C@_1BA@IOCDNFIL@?$AAL?$AAu?$AAb?$AAb?$AAo?$AAc?$AAk?$AA?$AA@|
  0013c		 |$M43177|

			 ENDP  ; |SDH_Init|

	END
