; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\SDHC\sdcontrol.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|SDClockTable| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|szHexBuf|, 0x400

|SDClockTable| DCD 0x4c4b4
	DCB	0x6
	%	3
	DCD	0x98968
	DCB	0x5
	%	3
	DCD	0x1312d0
	DCB	0x4
	%	3
	DCD	0x2625a0
	DCB	0x3
	%	3
	DCD	0x4c4b40
	DCB	0x2
	%	3
	DCD	0x989680
	DCB	0x1
	%	3
	DCD	0x1312d00
	DCB	0x0
	%	3
	EXPORT	|HexDisplay|
	IMPORT	|__rt_sdiv|

  00000			 AREA	 |.pdata|, PDATA
|$T44688| DCD	|$LN11@HexDisplay|
	DCD	0x40009304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\sdhc\sdcontrol.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |HexDisplay| PROC

; 63   : {

  00000		 |$LN11@HexDisplay|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M44685|

; 64   :     DWORD dwTemp = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018		 |$LN6@HexDisplay|

; 65   : 	while( dwTemp < dwLength && (dwTemp < (HEXBUFSIZE / 2 - 1) ) )

  00018	e59d2000	 ldr         r2, [sp]
  0001c	e59d3014	 ldr         r3, [sp, #0x14]
  00020	e1520003	 cmp         r2, r3
  00024	2a00007a	 bcs         |$LN5@HexDisplay|
  00028	e59d2000	 ldr         r2, [sp]
  0002c	e3a03c01	 mov         r3, #1, 24
  00030	e38330ff	 orr         r3, r3, #0xFF
  00034	e1520003	 cmp         r2, r3
  00038	2a000075	 bcs         |$LN5@HexDisplay|

; 66   : 	{
; 67   : 		szHexBuf[dwTemp*2] = pBuffer[dwTemp] / 16;

  0003c	e59d2010	 ldr         r2, [sp, #0x10]
  00040	e59d3000	 ldr         r3, [sp]
  00044	e0823003	 add         r3, r2, r3
  00048	e5d33000	 ldrb        r3, [r3]
  0004c	e1a01003	 mov         r1, r3
  00050	e3a00010	 mov         r0, #0x10
  00054	eb000000	 bl          __rt_sdiv
  00058	e59d1000	 ldr         r1, [sp]
  0005c	e3a03002	 mov         r3, #2
  00060	e0020391	 mul         r2, r1, r3
  00064	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00068	e0832002	 add         r2, r3, r2
  0006c	e1a03c00	 mov         r3, r0, lsl #24
  00070	e1a03c43	 mov         r3, r3, asr #24
  00074	e5c23000	 strb        r3, [r2]

; 68   : 		szHexBuf[dwTemp*2+1] = pBuffer[dwTemp] % 16;

  00078	e59d2010	 ldr         r2, [sp, #0x10]
  0007c	e59d3000	 ldr         r3, [sp]
  00080	e0823003	 add         r3, r2, r3
  00084	e5d33000	 ldrb        r3, [r3]
  00088	e1a01003	 mov         r1, r3
  0008c	e3a00010	 mov         r0, #0x10
  00090	eb000000	 bl          __rt_sdiv
  00094	e59d2000	 ldr         r2, [sp]
  00098	e3a03002	 mov         r3, #2
  0009c	e0030392	 mul         r3, r2, r3
  000a0	e2832001	 add         r2, r3, #1
  000a4	e59f319c	 ldr         r3, [pc, #0x19C]
  000a8	e0832002	 add         r2, r3, r2
  000ac	e1a03c01	 mov         r3, r1, lsl #24
  000b0	e1a03c43	 mov         r3, r3, asr #24
  000b4	e5c23000	 strb        r3, [r2]

; 69   : 		
; 70   : 		if( szHexBuf[dwTemp*2] < 10 )

  000b8	e59d1000	 ldr         r1, [sp]
  000bc	e3a03002	 mov         r3, #2
  000c0	e0020391	 mul         r2, r1, r3
  000c4	e59f317c	 ldr         r3, [pc, #0x17C]
  000c8	e0833002	 add         r3, r3, r2
  000cc	e1d330d0	 ldrsb       r3, [r3]
  000d0	e353000a	 cmp         r3, #0xA
  000d4	aa00000f	 bge         |$LN4@HexDisplay|

; 71   : 			szHexBuf[dwTemp*2] += '0';

  000d8	e59d1000	 ldr         r1, [sp]
  000dc	e3a03002	 mov         r3, #2
  000e0	e0020391	 mul         r2, r1, r3
  000e4	e59f315c	 ldr         r3, [pc, #0x15C]
  000e8	e0833002	 add         r3, r3, r2
  000ec	e1d330d0	 ldrsb       r3, [r3]
  000f0	e2830030	 add         r0, r3, #0x30
  000f4	e59d1000	 ldr         r1, [sp]
  000f8	e3a03002	 mov         r3, #2
  000fc	e0020391	 mul         r2, r1, r3
  00100	e59f3140	 ldr         r3, [pc, #0x140]
  00104	e0832002	 add         r2, r3, r2
  00108	e1a03c00	 mov         r3, r0, lsl #24
  0010c	e1a03c43	 mov         r3, r3, asr #24
  00110	e5c23000	 strb        r3, [r2]

; 72   : 		else

  00114	ea00000e	 b           |$LN3@HexDisplay|
  00118		 |$LN4@HexDisplay|

; 73   : 			szHexBuf[dwTemp*2] += 'a' - 10;

  00118	e59d1000	 ldr         r1, [sp]
  0011c	e3a03002	 mov         r3, #2
  00120	e0020391	 mul         r2, r1, r3
  00124	e59f311c	 ldr         r3, [pc, #0x11C]
  00128	e0833002	 add         r3, r3, r2
  0012c	e1d330d0	 ldrsb       r3, [r3]
  00130	e2830057	 add         r0, r3, #0x57
  00134	e59d1000	 ldr         r1, [sp]
  00138	e3a03002	 mov         r3, #2
  0013c	e0020391	 mul         r2, r1, r3
  00140	e59f3100	 ldr         r3, [pc, #0x100]
  00144	e0832002	 add         r2, r3, r2
  00148	e1a03c00	 mov         r3, r0, lsl #24
  0014c	e1a03c43	 mov         r3, r3, asr #24
  00150	e5c23000	 strb        r3, [r2]
  00154		 |$LN3@HexDisplay|

; 74   : 
; 75   : 		if( szHexBuf[dwTemp*2+1] < 10 )

  00154	e59d2000	 ldr         r2, [sp]
  00158	e3a03002	 mov         r3, #2
  0015c	e0030392	 mul         r3, r2, r3
  00160	e2832001	 add         r2, r3, #1
  00164	e59f30dc	 ldr         r3, [pc, #0xDC]
  00168	e0833002	 add         r3, r3, r2
  0016c	e1d330d0	 ldrsb       r3, [r3]
  00170	e353000a	 cmp         r3, #0xA
  00174	aa000011	 bge         |$LN2@HexDisplay|

; 76   : 			szHexBuf[dwTemp*2+1] += '0';

  00178	e59d2000	 ldr         r2, [sp]
  0017c	e3a03002	 mov         r3, #2
  00180	e0030392	 mul         r3, r2, r3
  00184	e2832001	 add         r2, r3, #1
  00188	e59f30b8	 ldr         r3, [pc, #0xB8]
  0018c	e0833002	 add         r3, r3, r2
  00190	e1d330d0	 ldrsb       r3, [r3]
  00194	e2831030	 add         r1, r3, #0x30
  00198	e59d2000	 ldr         r2, [sp]
  0019c	e3a03002	 mov         r3, #2
  001a0	e0030392	 mul         r3, r2, r3
  001a4	e2832001	 add         r2, r3, #1
  001a8	e59f3098	 ldr         r3, [pc, #0x98]
  001ac	e0832002	 add         r2, r3, r2
  001b0	e1a03c01	 mov         r3, r1, lsl #24
  001b4	e1a03c43	 mov         r3, r3, asr #24
  001b8	e5c23000	 strb        r3, [r2]

; 77   : 		else

  001bc	ea000010	 b           |$LN1@HexDisplay|
  001c0		 |$LN2@HexDisplay|

; 78   : 			szHexBuf[dwTemp*2+1] += 'a' - 10;

  001c0	e59d2000	 ldr         r2, [sp]
  001c4	e3a03002	 mov         r3, #2
  001c8	e0030392	 mul         r3, r2, r3
  001cc	e2832001	 add         r2, r3, #1
  001d0	e59f3070	 ldr         r3, [pc, #0x70]
  001d4	e0833002	 add         r3, r3, r2
  001d8	e1d330d0	 ldrsb       r3, [r3]
  001dc	e2831057	 add         r1, r3, #0x57
  001e0	e59d2000	 ldr         r2, [sp]
  001e4	e3a03002	 mov         r3, #2
  001e8	e0030392	 mul         r3, r2, r3
  001ec	e2832001	 add         r2, r3, #1
  001f0	e59f3050	 ldr         r3, [pc, #0x50]
  001f4	e0832002	 add         r2, r3, r2
  001f8	e1a03c01	 mov         r3, r1, lsl #24
  001fc	e1a03c43	 mov         r3, r3, asr #24
  00200	e5c23000	 strb        r3, [r2]
  00204		 |$LN1@HexDisplay|

; 79   : 
; 80   : 		dwTemp++;

  00204	e59d3000	 ldr         r3, [sp]
  00208	e2833001	 add         r3, r3, #1
  0020c	e58d3000	 str         r3, [sp]

; 81   : 	}

  00210	eaffff80	 b           |$LN6@HexDisplay|
  00214		 |$LN5@HexDisplay|

; 82   : 	szHexBuf[dwTemp*2] = 0;

  00214	e59d1000	 ldr         r1, [sp]
  00218	e3a03002	 mov         r3, #2
  0021c	e0020391	 mul         r2, r1, r3
  00220	e59f3020	 ldr         r3, [pc, #0x20]
  00224	e0832002	 add         r2, r3, r2
  00228	e3a03000	 mov         r3, #0
  0022c	e5c23000	 strb        r3, [r2]

; 83   : 
; 84   :     return szHexBuf;

  00230	e59f3010	 ldr         r3, [pc, #0x10]
  00234	e58d3004	 str         r3, [sp, #4]

; 85   : }

  00238	e59d0004	 ldr         r0, [sp, #4]
  0023c	e28dd008	 add         sp, sp, #8
  00240	e89d6000	 ldmia       sp, {sp, lr}
  00244	e12fff1e	 bx          lr
  00248		 |$LN12@HexDisplay|
  00248		 |$LN13@HexDisplay|
  00248	00000000	 DCD         |szHexBuf|
  0024c		 |$M44686|

			 ENDP  ; |HexDisplay|

	EXPORT	|??_C@_19LNILFIIC@?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|DumpHexDisplay|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|strncpy|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__rt_udiv|
	IMPORT	|__security_check_cookie|

  00008			 AREA	 |.pdata|, PDATA
|$T44701| DCD	|$LN9@DumpHexDis|
	DCD	0xc0004e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19LNILFIIC@?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@| DCB "%", 0x0, "S", 0x0
	DCB	0xd, 0x0, 0xa, 0x0, 0x0, 0x0		; `string'

  00000			 AREA	 |.xdata|, DATA
|$T44697| DCD	0xffffffe8
; Function compile flags: /Odtp

  0024c			 AREA	 |.text|, CODE, ARM

  0024c	00000000	 DCD         |__GSHandlerCheck|
  00250	00000000	 DCD         |$T44697|

  00254		 |DumpHexDisplay| PROC

; 88   : {

  00254		 |$LN9@DumpHexDis|
  00254	e1a0c00d	 mov         r12, sp
  00258	e92d0003	 stmdb       sp!, {r0, r1}
  0025c	e92d5000	 stmdb       sp!, {r12, lr}
  00260	e24dd060	 sub         sp, sp, #0x60
  00264		 |$M44698|
  00264	e59f311c	 ldr         r3, [pc, #0x11C]
  00268	e5933000	 ldr         r3, [r3]
  0026c	e58d3058	 str         r3, [sp, #0x58]

; 89   :     const int lsize = 64;

  00270	e3a03040	 mov         r3, #0x40
  00274	e58d304c	 str         r3, [sp, #0x4C]

; 90   :     char szBuffer[65];
; 91   :     char* pszData;
; 92   :     int l = 0;

  00278	e3a03000	 mov         r3, #0
  0027c	e58d3048	 str         r3, [sp, #0x48]

; 93   :     int total_l = dwLength / lsize;

  00280	e59d106c	 ldr         r1, [sp, #0x6C]
  00284	e59d004c	 ldr         r0, [sp, #0x4C]
  00288	eb000000	 bl          __rt_udiv
  0028c	e58d0054	 str         r0, [sp, #0x54]

; 94   :     int r = dwLength % lsize;

  00290	e59d106c	 ldr         r1, [sp, #0x6C]
  00294	e59d004c	 ldr         r0, [sp, #0x4C]
  00298	eb000000	 bl          __rt_udiv
  0029c	e58d1050	 str         r1, [sp, #0x50]

; 95   : 
; 96   :     pszData = HexDisplay( pBuffer, dwLength );

  002a0	e59d106c	 ldr         r1, [sp, #0x6C]
  002a4	e59d0068	 ldr         r0, [sp, #0x68]
  002a8	eb000000	 bl          HexDisplay
  002ac	e58d005c	 str         r0, [sp, #0x5C]
  002b0	e59d305c	 ldr         r3, [sp, #0x5C]
  002b4	e58d3000	 str         r3, [sp]

; 97   : 
; 98   :     for( l = 0; l < total_l; l++ )

  002b8	e3a03000	 mov         r3, #0
  002bc	e58d3048	 str         r3, [sp, #0x48]
  002c0	ea000002	 b           |$LN4@DumpHexDis|
  002c4		 |$LN3@DumpHexDis|
  002c4	e59d3048	 ldr         r3, [sp, #0x48]
  002c8	e2833001	 add         r3, r3, #1
  002cc	e58d3048	 str         r3, [sp, #0x48]
  002d0		 |$LN4@DumpHexDis|
  002d0	e59d2048	 ldr         r2, [sp, #0x48]
  002d4	e59d3054	 ldr         r3, [sp, #0x54]
  002d8	e1520003	 cmp         r2, r3
  002dc	aa000010	 bge         |$LN2@DumpHexDis|

; 99   :     {
; 100  :         strncpy( szBuffer, pszData + l * lsize, lsize );

  002e0	e59d204c	 ldr         r2, [sp, #0x4C]
  002e4	e59d0048	 ldr         r0, [sp, #0x48]
  002e8	e59d304c	 ldr         r3, [sp, #0x4C]
  002ec	e0010390	 mul         r1, r0, r3
  002f0	e59d3000	 ldr         r3, [sp]
  002f4	e0831001	 add         r1, r3, r1
  002f8	e28d0004	 add         r0, sp, #4
  002fc	eb000000	 bl          strncpy

; 101  :         szBuffer[lsize] = 0;

  00300	e28d2004	 add         r2, sp, #4
  00304	e59d304c	 ldr         r3, [sp, #0x4C]
  00308	e0822003	 add         r2, r2, r3
  0030c	e3a03000	 mov         r3, #0
  00310	e5c23000	 strb        r3, [r2]

; 102  :         DEBUGMSG( TRUE, (TEXT("%S\r\n"), szBuffer ) );

  00314	e28d1004	 add         r1, sp, #4
  00318	e59f0064	 ldr         r0, [pc, #0x64]
  0031c	eb000000	 bl          NKDbgPrintfW

; 103  :     }

  00320	eaffffe7	 b           |$LN3@DumpHexDis|
  00324		 |$LN2@DumpHexDis|

; 104  :     if( r )

  00324	e59d3050	 ldr         r3, [sp, #0x50]
  00328	e3530000	 cmp         r3, #0
  0032c	0a00000f	 beq         |$LN1@DumpHexDis|

; 105  :     {
; 106  :         strncpy( szBuffer, pszData + l * lsize, r );

  00330	e59d2050	 ldr         r2, [sp, #0x50]
  00334	e59d0048	 ldr         r0, [sp, #0x48]
  00338	e59d304c	 ldr         r3, [sp, #0x4C]
  0033c	e0010390	 mul         r1, r0, r3
  00340	e59d3000	 ldr         r3, [sp]
  00344	e0831001	 add         r1, r3, r1
  00348	e28d0004	 add         r0, sp, #4
  0034c	eb000000	 bl          strncpy

; 107  :         szBuffer[r] = 0;

  00350	e28d2004	 add         r2, sp, #4
  00354	e59d3050	 ldr         r3, [sp, #0x50]
  00358	e0822003	 add         r2, r2, r3
  0035c	e3a03000	 mov         r3, #0
  00360	e5c23000	 strb        r3, [r2]

; 108  :         DEBUGMSG( TRUE, (TEXT("%S\r\n"), szBuffer ) );

  00364	e28d1004	 add         r1, sp, #4
  00368	e59f0014	 ldr         r0, [pc, #0x14]
  0036c	eb000000	 bl          NKDbgPrintfW
  00370		 |$LN1@DumpHexDis|

; 88   : {

  00370	e59d0058	 ldr         r0, [sp, #0x58]
  00374	eb000000	 bl          __security_check_cookie

; 109  :     }
; 110  : }

  00378	e28dd060	 add         sp, sp, #0x60
  0037c	e89d6000	 ldmia       sp, {sp, lr}
  00380	e12fff1e	 bx          lr
  00384		 |$LN10@DumpHexDis|
  00384		 |$LN11@DumpHexDis|
  00384	00000000	 DCD         |??_C@_19LNILFIIC@?$AA?$CF?$AAS?$AA?$AN?$AA?6?$AA?$AA@|
  00388		 |$LN12@DumpHexDis|
  00388	00000000	 DCD         |__security_cookie|
  0038c		 |$M44699|

			 ENDP  ; |DumpHexDisplay|

	EXPORT	|READ_MMC_REGISTER_DWORD|
	EXPORT	|CLOCK_IS_ON|

  00010			 AREA	 |.pdata|, PDATA
|$T44710| DCD	|$LN7@CLOCK_IS_O|
	DCD	0x40001504
; Function compile flags: /Odtp

  0038c			 AREA	 |.text|, CODE, ARM

  0038c		 |CLOCK_IS_ON| PROC

; 144  : {

  0038c		 |$LN7@CLOCK_IS_O|
  0038c	e1a0c00d	 mov         r12, sp
  00390	e92d0001	 stmdb       sp!, {r0}
  00394	e92d5000	 stmdb       sp!, {r12, lr}
  00398	e24dd008	 sub         sp, sp, #8
  0039c		 |$M44707|

; 145  :     if( READ_MMC_REGISTER_DWORD( pHc, MMC_STAT ) & MMC_STAT_CLOCK_ENABLED )

  0039c	e3a01004	 mov         r1, #4
  003a0	e59d0010	 ldr         r0, [sp, #0x10]
  003a4	eb000000	 bl          READ_MMC_REGISTER_DWORD
  003a8	e58d0004	 str         r0, [sp, #4]
  003ac	e59d3004	 ldr         r3, [sp, #4]
  003b0	e3130c01	 tst         r3, #1, 24
  003b4	0a000003	 beq         |$LN2@CLOCK_IS_O|

; 146  :     {
; 147  :         return TRUE;

  003b8	e3a03001	 mov         r3, #1
  003bc	e58d3000	 str         r3, [sp]
  003c0	ea000002	 b           |$LN3@CLOCK_IS_O|

; 148  :     }
; 149  :     else

  003c4	ea000001	 b           |$LN1@CLOCK_IS_O|
  003c8		 |$LN2@CLOCK_IS_O|

; 150  :     {
; 151  :         return FALSE;

  003c8	e3a03000	 mov         r3, #0
  003cc	e58d3000	 str         r3, [sp]
  003d0		 |$LN1@CLOCK_IS_O|
  003d0		 |$LN3@CLOCK_IS_O|

; 152  :     }
; 153  : }

  003d0	e59d0000	 ldr         r0, [sp]
  003d4	e28dd008	 add         sp, sp, #8
  003d8	e89d6000	 ldmia       sp, {sp, lr}
  003dc	e12fff1e	 bx          lr
  003e0		 |$M44708|

			 ENDP  ; |CLOCK_IS_ON|


  00000			 AREA	 |.pdata|, PDATA
|$T44716| DCD	|$LN5@READ_MMC_R|
	DCD	0x40001504
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |READ_MMC_REGISTER_DWORD| PROC

; 125  : {

  00000		 |$LN5@READ_MMC_R|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M44713|

; 126  :     BYTE *pRegBaseAddr, *regAddr;
; 127  :     volatile DWORD *pdwRegAddr;
; 128  :     pRegBaseAddr = (BYTE*)(pHc->pSDMMCRegisters);

  00010	e59d3018	 ldr         r3, [sp, #0x18]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 129  :     regAddr = pRegBaseAddr + RegOffset;

  00020	e59d2000	 ldr         r2, [sp]
  00024	e59d301c	 ldr         r3, [sp, #0x1C]
  00028	e0823003	 add         r3, r2, r3
  0002c	e58d3008	 str         r3, [sp, #8]

; 130  :     pdwRegAddr = (DWORD*)regAddr;

  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e58d3004	 str         r3, [sp, #4]

; 131  :     return (*pdwRegAddr);

  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e5933000	 ldr         r3, [r3]
  00040	e58d300c	 str         r3, [sp, #0xC]

; 132  : }

  00044	e59d000c	 ldr         r0, [sp, #0xC]
  00048	e28dd010	 add         sp, sp, #0x10
  0004c	e89d6000	 ldmia       sp, {sp, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M44714|

			 ENDP  ; |READ_MMC_REGISTER_DWORD|

	EXPORT	|??_C@_1EA@GKDNNJHD@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?5?$AA?9?$AA?5?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAw?$AA?5?$AAo?$AAf?$AAf?$AA?5?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@PNPDIJJI@?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAo?$AAf?$AAf?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|WRITE_MMC_REGISTER_DWORD|
	EXPORT	|??_C@_1EC@HEOKOAGP@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?5?$AA?9?$AA?5?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAo?$AAf?$AAf?$AA?5?$AAc?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?6@| [ DATA ] ; `string'
	EXPORT	|SDClockOff|
	IMPORT	|SDCardDebugOutput|
	IMPORT	|dpCurSettings|

  00018			 AREA	 |.pdata|, PDATA
|$T44729| DCD	|$LN14@SDClockOff|
	DCD	0x40003e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@GKDNNJHD@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?5?$AA?9?$AA?5?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAw?$AA?5?$AAo?$AAf?$AAf?$AA?5?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "O", 0x0, "f", 0x0, "f", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "w"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, " ", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@PNPDIJJI@?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAo?$AAf?$AAf?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, "f", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@HEOKOAGP@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?5?$AA?9?$AA?5?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAo?$AAf?$AAf?$AA?5?$AAc?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?6@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "O", 0x0, "f", 0x0, "f", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, "f", 0x0, " "
	DCB	0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  003e0			 AREA	 |.text|, CODE, ARM

  003e0		 |SDClockOff| PROC

; 281  : {

  003e0		 |$LN14@SDClockOff|
  003e0	e1a0c00d	 mov         r12, sp
  003e4	e92d0001	 stmdb       sp!, {r0}
  003e8	e92d5000	 stmdb       sp!, {r12, lr}
  003ec	e24dd014	 sub         sp, sp, #0x14
  003f0		 |$M44726|

; 282  :         // check to see if the clock is on
; 283  :     if (!CLOCK_IS_ON(pHc)) {

  003f0	e59d001c	 ldr         r0, [sp, #0x1C]
  003f4	eb000000	 bl          CLOCK_IS_ON
  003f8	e58d0000	 str         r0, [sp]
  003fc	e59d3000	 ldr         r3, [sp]
  00400	e3530000	 cmp         r3, #0
  00404	1a000000	 bne         |$LN3@SDClockOff|

; 284  :         return;

  00408	ea00002b	 b           |$LN4@SDClockOff|
  0040c		 |$LN3@SDClockOff|

; 285  :     }
; 286  : 
; 287  :     DbgPrintZo(SDH_CLOCK_ZONE, (TEXT("SDClockOff - turning off clock \n")));

  0040c	e59f30b8	 ldr         r3, [pc, #0xB8]
  00410	e5933440	 ldr         r3, [r3, #0x440]
  00414	e3130010	 tst         r3, #0x10
  00418	0a000004	 beq         |$LN6@SDClockOff|
  0041c	e59f00b0	 ldr         r0, [pc, #0xB0]
  00420	eb000000	 bl          SDCardDebugOutput
  00424	e3a03001	 mov         r3, #1
  00428	e58d3004	 str         r3, [sp, #4]
  0042c	ea000001	 b           |$LN7@SDClockOff|
  00430		 |$LN6@SDClockOff|
  00430	e3a03000	 mov         r3, #0
  00434	e58d3004	 str         r3, [sp, #4]
  00438		 |$LN7@SDClockOff|

; 288  :         // turn off the clock
; 289  :     WRITE_MMC_REGISTER_DWORD(pHc, MMC_STRPCL, MMC_STRPCL_STOP_CLOCK);

  00438	e3a02001	 mov         r2, #1
  0043c	e3a01000	 mov         r1, #0
  00440	e59d001c	 ldr         r0, [sp, #0x1C]
  00444	eb000000	 bl          WRITE_MMC_REGISTER_DWORD
  00448		 |$LN2@SDClockOff|

; 290  :        
; 291  :     while (CLOCK_IS_ON(pHc)) {

  00448	e59d001c	 ldr         r0, [sp, #0x1C]
  0044c	eb000000	 bl          CLOCK_IS_ON
  00450	e58d0008	 str         r0, [sp, #8]
  00454	e59d3008	 ldr         r3, [sp, #8]
  00458	e3530000	 cmp         r3, #0
  0045c	0a00000b	 beq         |$LN1@SDClockOff|

; 292  :         // sit here and wait for the clock to turn off
; 293  :         DbgPrintZo(SDH_CLOCK_ZONE, (TEXT("Waiting for clock off\n")));

  00460	e59f3064	 ldr         r3, [pc, #0x64]
  00464	e5933440	 ldr         r3, [r3, #0x440]
  00468	e3130010	 tst         r3, #0x10
  0046c	0a000004	 beq         |$LN8@SDClockOff|
  00470	e59f0058	 ldr         r0, [pc, #0x58]
  00474	eb000000	 bl          SDCardDebugOutput
  00478	e3a03001	 mov         r3, #1
  0047c	e58d300c	 str         r3, [sp, #0xC]
  00480	ea000001	 b           |$LN9@SDClockOff|
  00484		 |$LN8@SDClockOff|
  00484	e3a03000	 mov         r3, #0
  00488	e58d300c	 str         r3, [sp, #0xC]
  0048c		 |$LN9@SDClockOff|

; 294  :     }

  0048c	eaffffed	 b           |$LN2@SDClockOff|
  00490		 |$LN1@SDClockOff|

; 295  : 
; 296  :     DbgPrintZo(SDH_CLOCK_ZONE, (TEXT("SDClockOff - Clock is now off \n")));

  00490	e59f3034	 ldr         r3, [pc, #0x34]
  00494	e5933440	 ldr         r3, [r3, #0x440]
  00498	e3130010	 tst         r3, #0x10
  0049c	0a000004	 beq         |$LN10@SDClockOff|
  004a0	e59f0020	 ldr         r0, [pc, #0x20]
  004a4	eb000000	 bl          SDCardDebugOutput
  004a8	e3a03001	 mov         r3, #1
  004ac	e58d3010	 str         r3, [sp, #0x10]
  004b0	ea000001	 b           |$LN11@SDClockOff|
  004b4		 |$LN10@SDClockOff|
  004b4	e3a03000	 mov         r3, #0
  004b8	e58d3010	 str         r3, [sp, #0x10]
  004bc		 |$LN11@SDClockOff|
  004bc		 |$LN4@SDClockOff|

; 297  : }

  004bc	e28dd014	 add         sp, sp, #0x14
  004c0	e89d6000	 ldmia       sp, {sp, lr}
  004c4	e12fff1e	 bx          lr
  004c8		 |$LN15@SDClockOff|
  004c8		 |$LN16@SDClockOff|
  004c8	00000000	 DCD         |??_C@_1EA@GKDNNJHD@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?5?$AA?9?$AA?5?$AAC?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAi?$AAs?$AA?5?$AAn?$AAo?$AAw?$AA?5?$AAo?$AAf?$AAf?$AA?5?$AA?6?$AA?$AA@|
  004cc		 |$LN17@SDClockOff|
  004cc	00000000	 DCD         |dpCurSettings|
  004d0		 |$LN18@SDClockOff|
  004d0	00000000	 DCD         |??_C@_1CO@PNPDIJJI@?$AAW?$AAa?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAc?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAo?$AAf?$AAf?$AA?6?$AA?$AA@|
  004d4		 |$LN19@SDClockOff|
  004d4	00000000	 DCD         |??_C@_1EC@HEOKOAGP@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAf?$AAf?$AA?5?$AA?9?$AA?5?$AAt?$AAu?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAo?$AAf?$AAf?$AA?5?$AAc?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?6@|
  004d8		 |$M44727|

			 ENDP  ; |SDClockOff|


  00000			 AREA	 |.pdata|, PDATA
|$T44739| DCD	|$LN5@WRITE_MMC_|
	DCD	0x40001404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WRITE_MMC_REGISTER_DWORD| PROC

; 115  : {

  00000		 |$LN5@WRITE_MMC_|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M44736|

; 116  :     BYTE *pRegBaseAddr, *regAddr;
; 117  :     volatile DWORD *pdwRegAddr;
; 118  :     pRegBaseAddr = (BYTE*)(pHc->pSDMMCRegisters);

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 119  :     regAddr = pRegBaseAddr + RegOffset;

  00020	e59d2000	 ldr         r2, [sp]
  00024	e59d3018	 ldr         r3, [sp, #0x18]
  00028	e0823003	 add         r3, r2, r3
  0002c	e58d3008	 str         r3, [sp, #8]

; 120  :     pdwRegAddr = (DWORD*)regAddr;

  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e58d3004	 str         r3, [sp, #4]

; 121  :     *pdwRegAddr = Value;

  00038	e59d201c	 ldr         r2, [sp, #0x1C]
  0003c	e59d3004	 ldr         r3, [sp, #4]
  00040	e5832000	 str         r2, [r3]

; 122  : }

  00044	e28dd00c	 add         sp, sp, #0xC
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M44737|

			 ENDP  ; |WRITE_MMC_REGISTER_DWORD|

	EXPORT	|SDClockOn|

  00020			 AREA	 |.pdata|, PDATA
|$T44746| DCD	|$LN5@SDClockOn|
	DCD	0x40000903
; Function compile flags: /Odtp

  004d8			 AREA	 |.text|, CODE, ARM

  004d8		 |SDClockOn| PROC

; 310  : {

  004d8		 |$LN5@SDClockOn|
  004d8	e1a0c00d	 mov         r12, sp
  004dc	e92d0001	 stmdb       sp!, {r0}
  004e0	e92d5000	 stmdb       sp!, {r12, lr}
  004e4		 |$M44743|

; 311  :         // turn on the clock
; 312  :     WRITE_MMC_REGISTER_DWORD(pHc, MMC_STRPCL, MMC_STRPCL_START_CLOCK);

  004e4	e3a02002	 mov         r2, #2
  004e8	e3a01000	 mov         r1, #0
  004ec	e59d0008	 ldr         r0, [sp, #8]
  004f0	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 313  : }

  004f4	e89d6000	 ldmia       sp, {sp, lr}
  004f8	e12fff1e	 bx          lr
  004fc		 |$M44744|

			 ENDP  ; |SDClockOn|

	EXPORT	|??_C@_1HM@PMJPOENB@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?5?$AA?9?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|SDSetRate|

  00028			 AREA	 |.pdata|, PDATA
|$T44753| DCD	|$LN15@SDSetRate|
	DCD	0x40007804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@PMJPOENB@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?5?$AA?9?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "O", 0x0, "n", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "R", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "r", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "H", 0x0, "z", 0x0, " ", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  004fc			 AREA	 |.text|, CODE, ARM

  004fc		 |SDSetRate| PROC

; 326  : {

  004fc		 |$LN15@SDSetRate|
  004fc	e1a0c00d	 mov         r12, sp
  00500	e92d0003	 stmdb       sp!, {r0, r1}
  00504	e92d5000	 stmdb       sp!, {r12, lr}
  00508	e24dd014	 sub         sp, sp, #0x14
  0050c		 |$M44750|

; 327  :     ULONG ii;           // table index variable
; 328  :     DWORD rate;
; 329  :     BOOL fClockRunning;
; 330  : 
; 331  :     fClockRunning = CLOCK_IS_ON(pHc);

  0050c	e59d001c	 ldr         r0, [sp, #0x1C]
  00510	eb000000	 bl          CLOCK_IS_ON
  00514	e58d000c	 str         r0, [sp, #0xC]
  00518	e59d300c	 ldr         r3, [sp, #0xC]
  0051c	e58d3000	 str         r3, [sp]

; 332  :     SDClockOff(pHc);

  00520	e59d001c	 ldr         r0, [sp, #0x1C]
  00524	eb000000	 bl          SDClockOff

; 333  : 
; 334  :     rate = *pRate;

  00528	e59d3020	 ldr         r3, [sp, #0x20]
  0052c	e5933000	 ldr         r3, [r3]
  00530	e58d3008	 str         r3, [sp, #8]

; 335  :     if( rate > pHc->dwMaximumSDClockFrequency )

  00534	e59d301c	 ldr         r3, [sp, #0x1C]
  00538	e2833ed5	 add         r3, r3, #0xD5, 28
  0053c	e59d2008	 ldr         r2, [sp, #8]
  00540	e5933000	 ldr         r3, [r3]
  00544	e1520003	 cmp         r2, r3
  00548	9a000003	 bls         |$LN8@SDSetRate|

; 336  :         rate = pHc->dwMaximumSDClockFrequency;

  0054c	e59d301c	 ldr         r3, [sp, #0x1C]
  00550	e2833ed5	 add         r3, r3, #0xD5, 28
  00554	e5933000	 ldr         r3, [r3]
  00558	e58d3008	 str         r3, [sp, #8]
  0055c		 |$LN8@SDSetRate|

; 337  :    
; 338  :         // check to see if the rate is below the first entry in the table
; 339  :     if (rate <= SDClockTable[0].Frequency) {

  0055c	e59d2008	 ldr         r2, [sp, #8]
  00560	e59f3168	 ldr         r3, [pc, #0x168]
  00564	e5933000	 ldr         r3, [r3]
  00568	e1520003	 cmp         r2, r3
  0056c	8a000002	 bhi         |$LN7@SDSetRate|

; 340  :         ii = 0;

  00570	e3a03000	 mov         r3, #0
  00574	e58d3004	 str         r3, [sp, #4]

; 341  :     } else {

  00578	ea00001d	 b           |$LN6@SDSetRate|
  0057c		 |$LN7@SDSetRate|

; 342  : 
; 343  :             // scan through the table looking for a frequency that
; 344  :             // is close to the requested rate
; 345  :         for (ii = 0; ii < (NUM_CLOCK_ENTRIES - 1); ii++) {

  0057c	e3a03000	 mov         r3, #0
  00580	e58d3004	 str         r3, [sp, #4]
  00584	ea000002	 b           |$LN5@SDSetRate|
  00588		 |$LN4@SDSetRate|
  00588	e59d3004	 ldr         r3, [sp, #4]
  0058c	e2833001	 add         r3, r3, #1
  00590	e58d3004	 str         r3, [sp, #4]
  00594		 |$LN5@SDSetRate|
  00594	e59d3004	 ldr         r3, [sp, #4]
  00598	e3530006	 cmp         r3, #6
  0059c	2a000014	 bcs         |$LN3@SDSetRate|

; 346  :             if ((rate >= SDClockTable[ii].Frequency) &&
; 347  :                 (rate < SDClockTable[ii+1].Frequency)) {

  005a0	e59d1004	 ldr         r1, [sp, #4]
  005a4	e3a03008	 mov         r3, #8
  005a8	e0020391	 mul         r2, r1, r3
  005ac	e59f311c	 ldr         r3, [pc, #0x11C]
  005b0	e0833002	 add         r3, r3, r2
  005b4	e59d2008	 ldr         r2, [sp, #8]
  005b8	e5933000	 ldr         r3, [r3]
  005bc	e1520003	 cmp         r2, r3
  005c0	3a00000a	 bcc         |$LN2@SDSetRate|
  005c4	e59d3004	 ldr         r3, [sp, #4]
  005c8	e2831001	 add         r1, r3, #1
  005cc	e3a03008	 mov         r3, #8
  005d0	e0020391	 mul         r2, r1, r3
  005d4	e59f30f4	 ldr         r3, [pc, #0xF4]
  005d8	e0833002	 add         r3, r3, r2
  005dc	e59d2008	 ldr         r2, [sp, #8]
  005e0	e5933000	 ldr         r3, [r3]
  005e4	e1520003	 cmp         r2, r3
  005e8	2a000000	 bcs         |$LN2@SDSetRate|

; 348  :                 break;

  005ec	ea000000	 b           |$LN3@SDSetRate|
  005f0		 |$LN2@SDSetRate|

; 349  :             } 
; 350  :         }

  005f0	eaffffe4	 b           |$LN4@SDSetRate|
  005f4		 |$LN3@SDSetRate|
  005f4		 |$LN6@SDSetRate|

; 351  :     }
; 352  : 
; 353  :     DbgPrintZo(SDH_CLOCK_ZONE, (TEXT("SDClockOn - Requested Rate: %d, Setting clock rate to %d Hz \n"),
; 354  :            *pRate, SDClockTable[ii].Frequency ));

  005f4	e59f30dc	 ldr         r3, [pc, #0xDC]
  005f8	e5933440	 ldr         r3, [r3, #0x440]
  005fc	e3130010	 tst         r3, #0x10
  00600	0a00000c	 beq         |$LN11@SDSetRate|
  00604	e59d1004	 ldr         r1, [sp, #4]
  00608	e3a03008	 mov         r3, #8
  0060c	e0020391	 mul         r2, r1, r3
  00610	e59f30b8	 ldr         r3, [pc, #0xB8]
  00614	e0833002	 add         r3, r3, r2
  00618	e5932000	 ldr         r2, [r3]
  0061c	e59d3020	 ldr         r3, [sp, #0x20]
  00620	e5931000	 ldr         r1, [r3]
  00624	e59f00a8	 ldr         r0, [pc, #0xA8]
  00628	eb000000	 bl          SDCardDebugOutput
  0062c	e3a03001	 mov         r3, #1
  00630	e58d3010	 str         r3, [sp, #0x10]
  00634	ea000001	 b           |$LN12@SDSetRate|
  00638		 |$LN11@SDSetRate|
  00638	e3a03000	 mov         r3, #0
  0063c	e58d3010	 str         r3, [sp, #0x10]
  00640		 |$LN12@SDSetRate|

; 355  : 
; 356  :         // return the actual fruency
; 357  :     *pRate = SDClockTable[ii].Frequency;

  00640	e59d1004	 ldr         r1, [sp, #4]
  00644	e3a03008	 mov         r3, #8
  00648	e0020391	 mul         r2, r1, r3
  0064c	e59f307c	 ldr         r3, [pc, #0x7C]
  00650	e0833002	 add         r3, r3, r2
  00654	e5932000	 ldr         r2, [r3]
  00658	e59d3020	 ldr         r3, [sp, #0x20]
  0065c	e5832000	 str         r2, [r3]

; 358  : 
; 359  :          // set the clock rate
; 360  :     WRITE_MMC_REGISTER_DWORD(pHc, MMC_CLKRT, SDClockTable[ii].ControlValue);

  00660	e59d1004	 ldr         r1, [sp, #4]
  00664	e3a03008	 mov         r3, #8
  00668	e0020391	 mul         r2, r1, r3
  0066c	e59f305c	 ldr         r3, [pc, #0x5C]
  00670	e0833002	 add         r3, r3, r2
  00674	e2833004	 add         r3, r3, #4
  00678	e5d32000	 ldrb        r2, [r3]
  0067c	e3a01008	 mov         r1, #8
  00680	e59d001c	 ldr         r0, [sp, #0x1C]
  00684	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 361  :     pHc->dwSDClockFrequency = SDClockTable[ii].Frequency;

  00688	e59d1004	 ldr         r1, [sp, #4]
  0068c	e3a03008	 mov         r3, #8
  00690	e0020391	 mul         r2, r1, r3
  00694	e59f3034	 ldr         r3, [pc, #0x34]
  00698	e0831002	 add         r1, r3, r2
  0069c	e59d301c	 ldr         r3, [sp, #0x1C]
  006a0	e2833c0d	 add         r3, r3, #0xD, 24
  006a4	e283204c	 add         r2, r3, #0x4C
  006a8	e5913000	 ldr         r3, [r1]
  006ac	e5823000	 str         r3, [r2]

; 362  :         
; 363  :     if( fClockRunning )

  006b0	e59d3000	 ldr         r3, [sp]
  006b4	e3530000	 cmp         r3, #0
  006b8	0a000001	 beq         |$LN1@SDSetRate|

; 364  :     {
; 365  :         SDClockOn( pHc );

  006bc	e59d001c	 ldr         r0, [sp, #0x1C]
  006c0	eb000000	 bl          SDClockOn
  006c4		 |$LN1@SDSetRate|

; 366  :     }
; 367  : }

  006c4	e28dd014	 add         sp, sp, #0x14
  006c8	e89d6000	 ldmia       sp, {sp, lr}
  006cc	e12fff1e	 bx          lr
  006d0		 |$LN16@SDSetRate|
  006d0		 |$LN17@SDSetRate|
  006d0	00000000	 DCD         |SDClockTable|
  006d4		 |$LN18@SDSetRate|
  006d4	00000000	 DCD         |??_C@_1HM@PMJPOENB@?$AAS?$AAD?$AAC?$AAl?$AAo?$AAc?$AAk?$AAO?$AAn?$AA?5?$AA?9?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAe?$AAd?$AA?5?$AAR?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@|
  006d8		 |$LN19@SDSetRate|
  006d8	00000000	 DCD         |dpCurSettings|
  006dc		 |$M44751|

			 ENDP  ; |SDSetRate|

	EXPORT	|??_C@_1GA@GLNKKAEJ@?$AAS?$AAD?$AAH?$AAC?$AAD?$AA?3?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAa?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAu?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@DAMLHJJL@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|SDDeinitialize|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|UnInitializeHardware|
	IMPORT	|CloseBusAccessHandle|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|SDHCDIndicateSlotStateChange|
	IMPORT	|MMCPowerControl|
	IMPORT	|CleanupCardDetectIST|
	IMPORT	|HalFreeCommonBuffer|
	IMPORT	|FreeIntChainHandler|
	IMPORT	|KernelIoControl|
	IMPORT	|InterruptDisable|
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|

  00030			 AREA	 |.pdata|, PDATA
|$T44775| DCD	|$LN27@SDDeinitia|
	DCD	0x40016704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@GLNKKAEJ@?$AAS?$AAD?$AAH?$AAC?$AAD?$AA?3?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAa?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAu?$AAr@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, "D", 0x0, ":", 0x0, "S"
	DCB	0x0, "H", 0x0, "C", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "a", 0x0, "b", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "c", 0x0, "u"
	DCB	0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@DAMLHJJL@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@| DCB "S"
	DCB	0x0, "H", 0x0, "C", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "s", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  006dc			 AREA	 |.text|, CODE, ARM

  006dc		 |SDDeinitialize| PROC

; 403  : {

  006dc		 |$LN27@SDDeinitia|
  006dc	e1a0c00d	 mov         r12, sp
  006e0	e92d0001	 stmdb       sp!, {r0}
  006e4	e92d5000	 stmdb       sp!, {r12, lr}
  006e8	e24dd044	 sub         sp, sp, #0x44
  006ec		 |$M44772|

; 404  :     PSDH_HARDWARE_CONTEXT pHardwareContext; // hardware context
; 405  :     PSD_BUS_REQUEST     pRequest = NULL;       // the request to complete

  006ec	e3a03000	 mov         r3, #0
  006f0	e58d300c	 str         r3, [sp, #0xC]

; 406  : 
; 407  :     pHardwareContext = GetExtensionFromHCDContext(PSDH_HARDWARE_CONTEXT, pHCContext);

  006f4	e59d304c	 ldr         r3, [sp, #0x4C]
  006f8	e283304c	 add         r3, r3, #0x4C
  006fc	e5933000	 ldr         r3, [r3]
  00700	e58d3008	 str         r3, [sp, #8]

; 408  : 
; 409  :         // mark for shutdown
; 410  :     pHardwareContext->DriverShutdown = TRUE;

  00704	e59d3008	 ldr         r3, [sp, #8]
  00708	e2833c0a	 add         r3, r3, #0xA, 24
  0070c	e28320d4	 add         r2, r3, #0xD4
  00710	e3a03001	 mov         r3, #1
  00714	e5823000	 str         r3, [r2]

; 411  : 
; 412  :     if( pHardwareContext->hControllerInterruptEvent )

  00718	e59d3008	 ldr         r3, [sp, #8]
  0071c	e2833030	 add         r3, r3, #0x30
  00720	e5933000	 ldr         r3, [r3]
  00724	e3530000	 cmp         r3, #0
  00728	0a000003	 beq         |$LN18@SDDeinitia|

; 413  :     {
; 414  :         // wake up the controller IST
; 415  :         SetEvent(pHardwareContext->hControllerInterruptEvent);

  0072c	e59d3008	 ldr         r3, [sp, #8]
  00730	e2833030	 add         r3, r3, #0x30
  00734	e5930000	 ldr         r0, [r3]
  00738	eb000000	 bl          SetEvent
  0073c		 |$LN18@SDDeinitia|

; 416  :     }
; 417  : 
; 418  :     if (NULL != pHardwareContext->hDMAInterruptEvent) 

  0073c	e59d3008	 ldr         r3, [sp, #8]
  00740	e2833c0a	 add         r3, r3, #0xA, 24
  00744	e2833098	 add         r3, r3, #0x98
  00748	e5933000	 ldr         r3, [r3]
  0074c	e3530000	 cmp         r3, #0
  00750	0a000004	 beq         |$LN17@SDDeinitia|

; 419  :     {
; 420  :         // wake up the DMA IST
; 421  :         SetEvent(pHardwareContext->hDMAInterruptEvent);

  00754	e59d3008	 ldr         r3, [sp, #8]
  00758	e2833c0a	 add         r3, r3, #0xA, 24
  0075c	e2833098	 add         r3, r3, #0x98
  00760	e5930000	 ldr         r0, [r3]
  00764	eb000000	 bl          SetEvent
  00768		 |$LN17@SDDeinitia|

; 422  :     }
; 423  : 
; 424  :     // clean up controller IST
; 425  :     if (NULL != pHardwareContext->hControllerInterruptThread) {

  00768	e59d3008	 ldr         r3, [sp, #8]
  0076c	e2833034	 add         r3, r3, #0x34
  00770	e5933000	 ldr         r3, [r3]
  00774	e3530000	 cmp         r3, #0
  00778	0a00000c	 beq         |$LN16@SDDeinitia|

; 426  :             // wait for the thread to exit
; 427  :         WaitForSingleObject(pHardwareContext->hControllerInterruptThread, INFINITE); 

  0077c	e3e01000	 mvn         r1, #0
  00780	e59d3008	 ldr         r3, [sp, #8]
  00784	e2833034	 add         r3, r3, #0x34
  00788	e5930000	 ldr         r0, [r3]
  0078c	eb000000	 bl          WaitForSingleObject

; 428  :         CloseHandle(pHardwareContext->hControllerInterruptThread);

  00790	e59d3008	 ldr         r3, [sp, #8]
  00794	e2833034	 add         r3, r3, #0x34
  00798	e5930000	 ldr         r0, [r3]
  0079c	eb000000	 bl          CloseHandle

; 429  :         pHardwareContext->hControllerInterruptThread = NULL;

  007a0	e59d3008	 ldr         r3, [sp, #8]
  007a4	e2832034	 add         r2, r3, #0x34
  007a8	e3a03000	 mov         r3, #0
  007ac	e5823000	 str         r3, [r2]
  007b0		 |$LN16@SDDeinitia|

; 430  :     }
; 431  :         
; 432  :     // clean up DMA IST
; 433  :     if (NULL != pHardwareContext->hDmaInterruptThread) {

  007b0	e59d3008	 ldr         r3, [sp, #8]
  007b4	e2833eaa	 add         r3, r3, #0xAA, 28
  007b8	e5933000	 ldr         r3, [r3]
  007bc	e3530000	 cmp         r3, #0
  007c0	0a00000c	 beq         |$LN15@SDDeinitia|

; 434  :         // wait for the thread to exit
; 435  :         WaitForSingleObject(pHardwareContext->hDmaInterruptThread, INFINITE); 

  007c4	e3e01000	 mvn         r1, #0
  007c8	e59d3008	 ldr         r3, [sp, #8]
  007cc	e2833eaa	 add         r3, r3, #0xAA, 28
  007d0	e5930000	 ldr         r0, [r3]
  007d4	eb000000	 bl          WaitForSingleObject

; 436  :         CloseHandle(pHardwareContext->hDmaInterruptThread);

  007d8	e59d3008	 ldr         r3, [sp, #8]
  007dc	e2833eaa	 add         r3, r3, #0xAA, 28
  007e0	e5930000	 ldr         r0, [r3]
  007e4	eb000000	 bl          CloseHandle

; 437  :         pHardwareContext->hDmaInterruptThread = NULL;

  007e8	e59d3008	 ldr         r3, [sp, #8]
  007ec	e2832eaa	 add         r2, r3, #0xAA, 28
  007f0	e3a03000	 mov         r3, #0
  007f4	e5823000	 str         r3, [r2]
  007f8		 |$LN15@SDDeinitia|

; 438  :     }
; 439  :         
; 440  :         // free controller interrupt event
; 441  :     if (NULL != pHardwareContext->hControllerInterruptEvent) {

  007f8	e59d3008	 ldr         r3, [sp, #8]
  007fc	e2833030	 add         r3, r3, #0x30
  00800	e5933000	 ldr         r3, [r3]
  00804	e3530000	 cmp         r3, #0
  00808	0a000007	 beq         |$LN14@SDDeinitia|

; 442  :         CloseHandle(pHardwareContext->hControllerInterruptEvent);

  0080c	e59d3008	 ldr         r3, [sp, #8]
  00810	e2833030	 add         r3, r3, #0x30
  00814	e5930000	 ldr         r0, [r3]
  00818	eb000000	 bl          CloseHandle

; 443  :         pHardwareContext->hControllerInterruptEvent = NULL;

  0081c	e59d3008	 ldr         r3, [sp, #8]
  00820	e2832030	 add         r2, r3, #0x30
  00824	e3a03000	 mov         r3, #0
  00828	e5823000	 str         r3, [r2]
  0082c		 |$LN14@SDDeinitia|

; 444  :     }
; 445  : 
; 446  :         // free the DMA interrupt event
; 447  :     if( pHardwareContext->hDMAInterruptEvent )

  0082c	e59d3008	 ldr         r3, [sp, #8]
  00830	e2833c0a	 add         r3, r3, #0xA, 24
  00834	e2833098	 add         r3, r3, #0x98
  00838	e5933000	 ldr         r3, [r3]
  0083c	e3530000	 cmp         r3, #0
  00840	0a000009	 beq         |$LN13@SDDeinitia|

; 448  :     {
; 449  :         CloseHandle(pHardwareContext->hDMAInterruptEvent);

  00844	e59d3008	 ldr         r3, [sp, #8]
  00848	e2833c0a	 add         r3, r3, #0xA, 24
  0084c	e2833098	 add         r3, r3, #0x98
  00850	e5930000	 ldr         r0, [r3]
  00854	eb000000	 bl          CloseHandle

; 450  :         pHardwareContext->hDMAInterruptEvent = NULL;

  00858	e59d3008	 ldr         r3, [sp, #8]
  0085c	e2833c0a	 add         r3, r3, #0xA, 24
  00860	e2832098	 add         r2, r3, #0x98
  00864	e3a03000	 mov         r3, #0
  00868	e5823000	 str         r3, [r2]
  0086c		 |$LN13@SDDeinitia|

; 451  :     }
; 452  : 
; 453  :         // make sure all interrupt sources are disabled
; 454  :     if( pHardwareContext->dwSysintrSDMMC != SYSINTR_UNDEFINED )

  0086c	e59d3008	 ldr         r3, [sp, #8]
  00870	e283302c	 add         r3, r3, #0x2C
  00874	e5933000	 ldr         r3, [r3]
  00878	e3730001	 cmn         r3, #1
  0087c	0a000011	 beq         |$LN12@SDDeinitia|

; 455  :     {
; 456  :         InterruptDisable (pHardwareContext->dwSysintrSDMMC);

  00880	e59d3008	 ldr         r3, [sp, #8]
  00884	e283302c	 add         r3, r3, #0x2C
  00888	e5930000	 ldr         r0, [r3]
  0088c	eb000000	 bl          InterruptDisable

; 457  :         KernelIoControl(IOCTL_HAL_RELEASE_SYSINTR, &pHardwareContext->dwSysintrSDMMC, sizeof(DWORD), NULL, 0, NULL);

  00890	e3a03000	 mov         r3, #0
  00894	e58d3004	 str         r3, [sp, #4]
  00898	e3a03000	 mov         r3, #0
  0089c	e58d3000	 str         r3, [sp]
  008a0	e3a03000	 mov         r3, #0
  008a4	e3a02004	 mov         r2, #4
  008a8	e59d1008	 ldr         r1, [sp, #8]
  008ac	e281102c	 add         r1, r1, #0x2C
  008b0	e59f03bc	 ldr         r0, [pc, #0x3BC]
  008b4	eb000000	 bl          KernelIoControl

; 458  :         pHardwareContext->dwSysintrSDMMC = SYSINTR_UNDEFINED;

  008b8	e59d3008	 ldr         r3, [sp, #8]
  008bc	e283202c	 add         r2, r3, #0x2C
  008c0	e3e03000	 mvn         r3, #0
  008c4	e5823000	 str         r3, [r2]
  008c8		 |$LN12@SDDeinitia|

; 459  :     }
; 460  :     if( pHardwareContext->dwDmaSysIntr != SYSINTR_UNDEFINED )

  008c8	e59d3008	 ldr         r3, [sp, #8]
  008cc	e2833ea9	 add         r3, r3, #0xA9, 28
  008d0	e5933000	 ldr         r3, [r3]
  008d4	e3730001	 cmn         r3, #1
  008d8	0a000011	 beq         |$LN11@SDDeinitia|

; 461  :     {
; 462  :         InterruptDisable (pHardwareContext->dwDmaSysIntr);

  008dc	e59d3008	 ldr         r3, [sp, #8]
  008e0	e2833ea9	 add         r3, r3, #0xA9, 28
  008e4	e5930000	 ldr         r0, [r3]
  008e8	eb000000	 bl          InterruptDisable

; 463  :         KernelIoControl(IOCTL_HAL_RELEASE_SYSINTR, &pHardwareContext->dwDmaSysIntr, sizeof(DWORD), NULL, 0, NULL);

  008ec	e3a03000	 mov         r3, #0
  008f0	e58d3004	 str         r3, [sp, #4]
  008f4	e3a03000	 mov         r3, #0
  008f8	e58d3000	 str         r3, [sp]
  008fc	e3a03000	 mov         r3, #0
  00900	e3a02004	 mov         r2, #4
  00904	e59d1008	 ldr         r1, [sp, #8]
  00908	e2811ea9	 add         r1, r1, #0xA9, 28
  0090c	e59f0360	 ldr         r0, [pc, #0x360]
  00910	eb000000	 bl          KernelIoControl

; 464  :         pHardwareContext->dwDmaSysIntr = SYSINTR_UNDEFINED;

  00914	e59d3008	 ldr         r3, [sp, #8]
  00918	e2832ea9	 add         r2, r3, #0xA9, 28
  0091c	e3e03000	 mvn         r3, #0
  00920	e5823000	 str         r3, [r2]
  00924		 |$LN11@SDDeinitia|

; 465  :     }
; 466  : 
; 467  :         // unload the DMA ISR DLL
; 468  :     if( pHardwareContext->hDMAIsrHandler )

  00924	e59d3008	 ldr         r3, [sp, #8]
  00928	e2833c0a	 add         r3, r3, #0xA, 24
  0092c	e2833094	 add         r3, r3, #0x94
  00930	e5933000	 ldr         r3, [r3]
  00934	e3530000	 cmp         r3, #0
  00938	0a000009	 beq         |$LN10@SDDeinitia|

; 469  :     {
; 470  :         FreeIntChainHandler(pHardwareContext->hDMAIsrHandler);

  0093c	e59d3008	 ldr         r3, [sp, #8]
  00940	e2833c0a	 add         r3, r3, #0xA, 24
  00944	e2833094	 add         r3, r3, #0x94
  00948	e5930000	 ldr         r0, [r3]
  0094c	eb000000	 bl          FreeIntChainHandler

; 471  :         pHardwareContext->hDMAIsrHandler = NULL;

  00950	e59d3008	 ldr         r3, [sp, #8]
  00954	e2833c0a	 add         r3, r3, #0xA, 24
  00958	e2832094	 add         r2, r3, #0x94
  0095c	e3a03000	 mov         r3, #0
  00960	e5823000	 str         r3, [r2]
  00964		 |$LN10@SDDeinitia|

; 472  :     }
; 473  : 
; 474  :         // free the DMA buffer
; 475  :     if( pHardwareContext->pDMABuffer )

  00964	e59d3008	 ldr         r3, [sp, #8]
  00968	e2833068	 add         r3, r3, #0x68
  0096c	e5933000	 ldr         r3, [r3]
  00970	e3530000	 cmp         r3, #0
  00974	0a000016	 beq         |$LN9@SDDeinitia|

; 476  :     {
; 477  :         HalFreeCommonBuffer( NULL, 0, pHardwareContext->pDMABufferPhys, pHardwareContext->pDMABuffer, FALSE );

  00978	e3a03000	 mov         r3, #0
  0097c	e58d3004	 str         r3, [sp, #4]
  00980	e59d3008	 ldr         r3, [sp, #8]
  00984	e2833068	 add         r3, r3, #0x68
  00988	e5933000	 ldr         r3, [r3]
  0098c	e58d3000	 str         r3, [sp]
  00990	e59d3008	 ldr         r3, [sp, #8]
  00994	e2833070	 add         r3, r3, #0x70
  00998	e58d3034	 str         r3, [sp, #0x34]
  0099c	e59d3034	 ldr         r3, [sp, #0x34]
  009a0	e5932000	 ldr         r2, [r3]
  009a4	e5933004	 ldr         r3, [r3, #4]
  009a8	e3a01000	 mov         r1, #0
  009ac	e3a00000	 mov         r0, #0
  009b0	eb000000	 bl          HalFreeCommonBuffer

; 478  :         pHardwareContext->pDMABuffer = NULL;

  009b4	e59d3008	 ldr         r3, [sp, #8]
  009b8	e2832068	 add         r2, r3, #0x68
  009bc	e3a03000	 mov         r3, #0
  009c0	e5823000	 str         r3, [r2]

; 479  :         pHardwareContext->dwDmaBufferSize = 0;

  009c4	e59d3008	 ldr         r3, [sp, #8]
  009c8	e2832088	 add         r2, r3, #0x88
  009cc	e3a03000	 mov         r3, #0
  009d0	e5823000	 str         r3, [r2]
  009d4		 |$LN9@SDDeinitia|

; 480  :     }
; 481  : 
; 482  :         // free the DMA descriptors buffer
; 483  :     if( pHardwareContext->pDMADescriptors )

  009d4	e59d3008	 ldr         r3, [sp, #8]
  009d8	e2833078	 add         r3, r3, #0x78
  009dc	e5933000	 ldr         r3, [r3]
  009e0	e3530000	 cmp         r3, #0
  009e4	0a00001d	 beq         |$LN8@SDDeinitia|

; 484  :     {
; 485  :         DEBUGMSG(SDCARD_ZONE_WARN, (TEXT("SHCDriver: - Unable to allocate memory for DMA descriptors!\r\n")));

  009e8	e59f327c	 ldr         r3, [pc, #0x27C]
  009ec	e5933440	 ldr         r3, [r3, #0x440]
  009f0	e3130901	 tst         r3, #1, 18
  009f4	0a000004	 beq         |$LN21@SDDeinitia|
  009f8	e59f0270	 ldr         r0, [pc, #0x270]
  009fc	eb000000	 bl          NKDbgPrintfW
  00a00	e3a03001	 mov         r3, #1
  00a04	e58d3038	 str         r3, [sp, #0x38]
  00a08	ea000001	 b           |$LN22@SDDeinitia|
  00a0c		 |$LN21@SDDeinitia|
  00a0c	e3a03000	 mov         r3, #0
  00a10	e58d3038	 str         r3, [sp, #0x38]
  00a14		 |$LN22@SDDeinitia|

; 486  :         HalFreeCommonBuffer( NULL, 0, pHardwareContext->pDMADescriptorsPhys, (PVOID)pHardwareContext->pDMADescriptors, FALSE );

  00a14	e3a03000	 mov         r3, #0
  00a18	e58d3004	 str         r3, [sp, #4]
  00a1c	e59d3008	 ldr         r3, [sp, #8]
  00a20	e2833078	 add         r3, r3, #0x78
  00a24	e5933000	 ldr         r3, [r3]
  00a28	e58d3000	 str         r3, [sp]
  00a2c	e59d3008	 ldr         r3, [sp, #8]
  00a30	e2833080	 add         r3, r3, #0x80
  00a34	e58d303c	 str         r3, [sp, #0x3C]
  00a38	e59d303c	 ldr         r3, [sp, #0x3C]
  00a3c	e5932000	 ldr         r2, [r3]
  00a40	e5933004	 ldr         r3, [r3, #4]
  00a44	e3a01000	 mov         r1, #0
  00a48	e3a00000	 mov         r0, #0
  00a4c	eb000000	 bl          HalFreeCommonBuffer

; 487  :         pHardwareContext->pDMADescriptors = NULL;

  00a50	e59d3008	 ldr         r3, [sp, #8]
  00a54	e2832078	 add         r2, r3, #0x78
  00a58	e3a03000	 mov         r3, #0
  00a5c	e5823000	 str         r3, [r2]
  00a60		 |$LN8@SDDeinitia|

; 488  :     }
; 489  : 
; 490  :         // clean up card insertion IST and free card insertion interrupt
; 491  :     CleanupCardDetectIST();

  00a60	eb000000	 bl          CleanupCardDetectIST

; 492  : 
; 493  :         // turn the hardware off
; 494  :     SDClockOff( pHardwareContext );

  00a64	e59d0008	 ldr         r0, [sp, #8]
  00a68	eb000000	 bl          SDClockOff

; 495  :     MMCPowerControl( FALSE );

  00a6c	e3a00000	 mov         r0, #0
  00a70	eb000000	 bl          MMCPowerControl

; 496  : 
; 497  :         // if there is a pending request, cancel it
; 498  :     if( pHardwareContext && (pRequest = pHardwareContext->pCurrentRequest) != NULL)

  00a74	e59d3008	 ldr         r3, [sp, #8]
  00a78	e3530000	 cmp         r3, #0
  00a7c	0a000015	 beq         |$LN7@SDDeinitia|
  00a80	e59d3008	 ldr         r3, [sp, #8]
  00a84	e283301c	 add         r3, r3, #0x1C
  00a88	e5933000	 ldr         r3, [r3]
  00a8c	e58d300c	 str         r3, [sp, #0xC]
  00a90	e59d300c	 ldr         r3, [sp, #0xC]
  00a94	e3530000	 cmp         r3, #0
  00a98	0a00000e	 beq         |$LN7@SDDeinitia|

; 499  :     {
; 500  :         DEBUGMSG(SDCARD_ZONE_WARN, (TEXT("SDHCD:SHCDriver() - aborting current request!\r\n")));

  00a9c	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00aa0	e5933440	 ldr         r3, [r3, #0x440]
  00aa4	e3130901	 tst         r3, #1, 18
  00aa8	0a000004	 beq         |$LN23@SDDeinitia|
  00aac	e59f01b4	 ldr         r0, [pc, #0x1B4]
  00ab0	eb000000	 bl          NKDbgPrintfW
  00ab4	e3a03001	 mov         r3, #1
  00ab8	e58d3040	 str         r3, [sp, #0x40]
  00abc	ea000001	 b           |$LN24@SDDeinitia|
  00ac0		 |$LN23@SDDeinitia|
  00ac0	e3a03000	 mov         r3, #0
  00ac4	e58d3040	 str         r3, [sp, #0x40]
  00ac8		 |$LN24@SDDeinitia|

; 501  :         IndicateBusRequestComplete(pHCContext, pRequest, SD_API_STATUS_SHUT_DOWN);

  00ac8	e3a02163	 mov         r2, #0x63, 2
  00acc	e59d100c	 ldr         r1, [sp, #0xC]
  00ad0	e59d004c	 ldr         r0, [sp, #0x4C]
  00ad4	eb000000	 bl          IndicateBusRequestComplete
  00ad8		 |$LN7@SDDeinitia|

; 502  :     }
; 503  : 
; 504  : 
; 505  :         // If a card is inserted, signal that it was ejected...
; 506  :     if(pHardwareContext && pHardwareContext->DevicePresent)

  00ad8	e59d3008	 ldr         r3, [sp, #8]
  00adc	e3530000	 cmp         r3, #0
  00ae0	0a00000e	 beq         |$LN6@SDDeinitia|
  00ae4	e59d3008	 ldr         r3, [sp, #8]
  00ae8	e2833c0d	 add         r3, r3, #0xD, 24
  00aec	e2833048	 add         r3, r3, #0x48
  00af0	e5933000	 ldr         r3, [r3]
  00af4	e3530000	 cmp         r3, #0
  00af8	0a000008	 beq         |$LN6@SDDeinitia|

; 507  :     {
; 508  :         // indicate the slot change 
; 509  :         SDHCDIndicateSlotStateChange(pHCContext, 0, DeviceEjected); 

  00afc	e3a02001	 mov         r2, #1
  00b00	e3a01000	 mov         r1, #0
  00b04	e59d004c	 ldr         r0, [sp, #0x4C]
  00b08	eb000000	 bl          SDHCDIndicateSlotStateChange

; 510  :         pHardwareContext->DevicePresent = FALSE;

  00b0c	e59d3008	 ldr         r3, [sp, #8]
  00b10	e2833c0d	 add         r3, r3, #0xD, 24
  00b14	e2832048	 add         r2, r3, #0x48
  00b18	e3a03000	 mov         r3, #0
  00b1c	e5823000	 str         r3, [r2]
  00b20		 |$LN6@SDDeinitia|

; 511  :     }
; 512  : 
; 513  :         // free memory mapped resources
; 514  : 
; 515  :     if (NULL != pHardwareContext->pSDMMCRegisters) {

  00b20	e59d3008	 ldr         r3, [sp, #8]
  00b24	e2833004	 add         r3, r3, #4
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e3530000	 cmp         r3, #0
  00b30	0a000008	 beq         |$LN5@SDDeinitia|

; 516  :         MmUnmapIoSpace((PVOID)pHardwareContext->pSDMMCRegisters, sizeof(BULVERDE_MMC_REG));

  00b34	e3a01048	 mov         r1, #0x48
  00b38	e59d3008	 ldr         r3, [sp, #8]
  00b3c	e2833004	 add         r3, r3, #4
  00b40	e5930000	 ldr         r0, [r3]
  00b44	eb000000	 bl          MmUnmapIoSpace

; 517  :         pHardwareContext->pSDMMCRegisters = NULL;

  00b48	e59d3008	 ldr         r3, [sp, #8]
  00b4c	e2832004	 add         r2, r3, #4
  00b50	e3a03000	 mov         r3, #0
  00b54	e5823000	 str         r3, [r2]
  00b58		 |$LN5@SDDeinitia|

; 518  :     }
; 519  : 
; 520  :     if (NULL != pHardwareContext->pGPIORegisters) {

  00b58	e59d3008	 ldr         r3, [sp, #8]
  00b5c	e5933000	 ldr         r3, [r3]
  00b60	e3530000	 cmp         r3, #0
  00b64	0a000006	 beq         |$LN4@SDDeinitia|

; 521  :         MmUnmapIoSpace((PVOID)pHardwareContext->pGPIORegisters, sizeof(BULVERDE_GPIO_REG));

  00b68	e3a01f53	 mov         r1, #0x53, 30
  00b6c	e59d3008	 ldr         r3, [sp, #8]
  00b70	e5930000	 ldr         r0, [r3]
  00b74	eb000000	 bl          MmUnmapIoSpace

; 522  :         pHardwareContext->pGPIORegisters = NULL;

  00b78	e59d2008	 ldr         r2, [sp, #8]
  00b7c	e3a03000	 mov         r3, #0
  00b80	e5823000	 str         r3, [r2]
  00b84		 |$LN4@SDDeinitia|

; 523  :     }
; 524  : 
; 525  :     if (NULL != pHardwareContext->pClkMgrRegisters) {

  00b84	e59d3008	 ldr         r3, [sp, #8]
  00b88	e2833008	 add         r3, r3, #8
  00b8c	e5933000	 ldr         r3, [r3]
  00b90	e3530000	 cmp         r3, #0
  00b94	0a000008	 beq         |$LN3@SDDeinitia|

; 526  :         MmUnmapIoSpace((PVOID)pHardwareContext->pClkMgrRegisters, sizeof(BULVERDE_CLKMGR_REG));

  00b98	e3a01010	 mov         r1, #0x10
  00b9c	e59d3008	 ldr         r3, [sp, #8]
  00ba0	e2833008	 add         r3, r3, #8
  00ba4	e5930000	 ldr         r0, [r3]
  00ba8	eb000000	 bl          MmUnmapIoSpace

; 527  :         pHardwareContext->pClkMgrRegisters = NULL;

  00bac	e59d3008	 ldr         r3, [sp, #8]
  00bb0	e2832008	 add         r2, r3, #8
  00bb4	e3a03000	 mov         r3, #0
  00bb8	e5823000	 str         r3, [r2]
  00bbc		 |$LN3@SDDeinitia|

; 528  :     }
; 529  : 
; 530  :     if (NULL != pHardwareContext->pDMARegisters) {

  00bbc	e59d3008	 ldr         r3, [sp, #8]
  00bc0	e283300c	 add         r3, r3, #0xC
  00bc4	e5933000	 ldr         r3, [r3]
  00bc8	e3530000	 cmp         r3, #0
  00bcc	0a000009	 beq         |$LN2@SDDeinitia|

; 531  :         MmUnmapIoSpace((PVOID)pHardwareContext->pDMARegisters, sizeof(BULVERDE_DMA_REG));

  00bd0	e3a01c11	 mov         r1, #0x11, 24
  00bd4	e381102c	 orr         r1, r1, #0x2C
  00bd8	e59d3008	 ldr         r3, [sp, #8]
  00bdc	e283300c	 add         r3, r3, #0xC
  00be0	e5930000	 ldr         r0, [r3]
  00be4	eb000000	 bl          MmUnmapIoSpace

; 532  :         pHardwareContext->pDMARegisters = NULL;

  00be8	e59d3008	 ldr         r3, [sp, #8]
  00bec	e283200c	 add         r2, r3, #0xC
  00bf0	e3a03000	 mov         r3, #0
  00bf4	e5823000	 str         r3, [r2]
  00bf8		 |$LN2@SDDeinitia|

; 533  :     }
; 534  : 
; 535  :     if(NULL != pHardwareContext->hBusAccessHandle) {

  00bf8	e59d3008	 ldr         r3, [sp, #8]
  00bfc	e2833014	 add         r3, r3, #0x14
  00c00	e5933000	 ldr         r3, [r3]
  00c04	e3530000	 cmp         r3, #0
  00c08	0a000007	 beq         |$LN1@SDDeinitia|

; 536  :         CloseBusAccessHandle(pHardwareContext->hBusAccessHandle);

  00c0c	e59d3008	 ldr         r3, [sp, #8]
  00c10	e2833014	 add         r3, r3, #0x14
  00c14	e5930000	 ldr         r0, [r3]
  00c18	eb000000	 bl          CloseBusAccessHandle

; 537  :         pHardwareContext->hBusAccessHandle = NULL;

  00c1c	e59d3008	 ldr         r3, [sp, #8]
  00c20	e2832014	 add         r2, r3, #0x14
  00c24	e3a03000	 mov         r3, #0
  00c28	e5823000	 str         r3, [r2]
  00c2c		 |$LN1@SDDeinitia|

; 538  :     }
; 539  :     UnInitializeHardware();

  00c2c	eb000000	 bl          UnInitializeHardware

; 540  : 
; 541  :     DeleteCriticalSection(&pHardwareContext->ControllerCriticalSection);

  00c30	e59d3008	 ldr         r3, [sp, #8]
  00c34	e2833c0a	 add         r3, r3, #0xA, 24
  00c38	e28300d8	 add         r0, r3, #0xD8
  00c3c	eb000000	 bl          DeleteCriticalSection

; 542  :     DeleteCriticalSection(&pHardwareContext->intrRegCriticalSection);

  00c40	e59d3008	 ldr         r3, [sp, #8]
  00c44	e2833c0d	 add         r3, r3, #0xD, 24
  00c48	e2830054	 add         r0, r3, #0x54
  00c4c	eb000000	 bl          DeleteCriticalSection

; 543  : 
; 544  :     return SD_API_STATUS_SUCCESS;

  00c50	e3a03000	 mov         r3, #0
  00c54	e58d3030	 str         r3, [sp, #0x30]

; 545  : }

  00c58	e59d0030	 ldr         r0, [sp, #0x30]
  00c5c	e28dd044	 add         sp, sp, #0x44
  00c60	e89d6000	 ldmia       sp, {sp, lr}
  00c64	e12fff1e	 bx          lr
  00c68		 |$LN28@SDDeinitia|
  00c68		 |$LN29@SDDeinitia|
  00c68	00000000	 DCD         |??_C@_1GA@GLNKKAEJ@?$AAS?$AAD?$AAH?$AAC?$AAD?$AA?3?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAa?$AAb?$AAo?$AAr?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAc?$AAu?$AAr@|
  00c6c		 |$LN30@SDDeinitia|
  00c6c	00000000	 DCD         |dpCurSettings|
  00c70		 |$LN31@SDDeinitia|
  00c70	00000000	 DCD         |??_C@_1HM@DAMLHJJL@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@|
  00c74		 |$LN32@SDDeinitia|
  00c74	010100d8	 DCD         0x10100d8
  00c78		 |$M44773|

			 ENDP  ; |SDDeinitialize|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44786| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M44783|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M44784|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@CDENOIIK@?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAp?$AAR?$AAe@| [ DATA ] ; `string'
	IMPORT	|SDHCDIndicateBusRequestComplete|

  00038			 AREA	 |.pdata|, PDATA
|$T44798| DCD	|$LN13@IndicateBu|
	DCD	0x40005304
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\sdhc\sdcontrol.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "P"
	DCB	0x0, "X", 0x0, "A", 0x0, "2", 0x0, "7", 0x0, "X", 0x0, "_"
	DCB	0x0, "M", 0x0, "S", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "S", 0x0, "D", 0x0, "H", 0x0, "C", 0x0, "\\", 0x0, "."
	DCB	0x0, "\\", 0x0, "s", 0x0, "d", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@CDENOIIK@?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAp?$AAR?$AAe@| DCB "I"
	DCB	0x0, "n", 0x0, "d", 0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "R", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "p", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00c78			 AREA	 |.text|, CODE, ARM

  00c78		 |IndicateBusRequestComplete| PROC

; 371  : {

  00c78		 |$LN13@IndicateBu|
  00c78	e1a0c00d	 mov         r12, sp
  00c7c	e92d0007	 stmdb       sp!, {r0 - r2}
  00c80	e92d5000	 stmdb       sp!, {r12, lr}
  00c84	e24dd014	 sub         sp, sp, #0x14
  00c88		 |$M44795|

; 372  :     BOOL fRet = FALSE;

  00c88	e3a03000	 mov         r3, #0
  00c8c	e58d3000	 str         r3, [sp]

; 373  :     PSDH_HARDWARE_CONTEXT pController = GetExtensionFromHCDContext(PSDH_HARDWARE_CONTEXT, pHCContext);

  00c90	e59d301c	 ldr         r3, [sp, #0x1C]
  00c94	e283304c	 add         r3, r3, #0x4C
  00c98	e5933000	 ldr         r3, [r3]
  00c9c	e58d3004	 str         r3, [sp, #4]

; 374  :     if (pController && pController->pCurrentRequest == pRequest) {

  00ca0	e59d3004	 ldr         r3, [sp, #4]
  00ca4	e3530000	 cmp         r3, #0
  00ca8	0a00002b	 beq         |$LN4@IndicateBu|
  00cac	e59d3004	 ldr         r3, [sp, #4]
  00cb0	e283301c	 add         r3, r3, #0x1C
  00cb4	e5932000	 ldr         r2, [r3]
  00cb8	e59d3020	 ldr         r3, [sp, #0x20]
  00cbc	e1520003	 cmp         r2, r3
  00cc0	1a000025	 bne         |$LN4@IndicateBu|

; 375  :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("IndicateBusRequestComplete - pRequest = %x, Status = %d\n"),pRequest,Status));

  00cc4	e59f30f4	 ldr         r3, [pc, #0xF4]
  00cc8	e5933440	 ldr         r3, [r3, #0x440]
  00ccc	e3130080	 tst         r3, #0x80
  00cd0	0a000006	 beq         |$LN7@IndicateBu|
  00cd4	e59d2024	 ldr         r2, [sp, #0x24]
  00cd8	e59d1020	 ldr         r1, [sp, #0x20]
  00cdc	e59f00d8	 ldr         r0, [pc, #0xD8]
  00ce0	eb000000	 bl          SDCardDebugOutput
  00ce4	e3a03001	 mov         r3, #1
  00ce8	e58d300c	 str         r3, [sp, #0xC]
  00cec	ea000001	 b           |$LN8@IndicateBu|
  00cf0		 |$LN7@IndicateBu|
  00cf0	e3a03000	 mov         r3, #0
  00cf4	e58d300c	 str         r3, [sp, #0xC]
  00cf8		 |$LN8@IndicateBu|

; 376  :         pController->pCurrentRequest = NULL;

  00cf8	e59d3004	 ldr         r3, [sp, #4]
  00cfc	e283201c	 add         r2, r3, #0x1C
  00d00	e3a03000	 mov         r3, #0
  00d04	e5823000	 str         r3, [r2]

; 377  :         if (pController->fCurrentRequestFastPath ) {

  00d08	e59d3004	 ldr         r3, [sp, #4]
  00d0c	e2833020	 add         r3, r3, #0x20
  00d10	e5933000	 ldr         r3, [r3]
  00d14	e3530000	 cmp         r3, #0
  00d18	0a000009	 beq         |$LN3@IndicateBu|

; 378  :             if (Status == SD_API_STATUS_SUCCESS) {

  00d1c	e59d3024	 ldr         r3, [sp, #0x24]
  00d20	e3530000	 cmp         r3, #0
  00d24	1a000001	 bne         |$LN2@IndicateBu|

; 379  :                 Status = SD_API_STATUS_FAST_PATH_SUCCESS;

  00d28	e3a03002	 mov         r3, #2
  00d2c	e58d3024	 str         r3, [sp, #0x24]
  00d30		 |$LN2@IndicateBu|

; 380  :             }
; 381  :             pController->FastPathStatus = Status ;

  00d30	e59d3004	 ldr         r3, [sp, #4]
  00d34	e2832024	 add         r2, r3, #0x24
  00d38	e59d3024	 ldr         r3, [sp, #0x24]
  00d3c	e5823000	 str         r3, [r2]

; 382  :         }
; 383  :         else 

  00d40	ea000003	 b           |$LN1@IndicateBu|
  00d44		 |$LN3@IndicateBu|

; 384  :             SDHCDIndicateBusRequestComplete(pHCContext,pRequest,Status);

  00d44	e59d2024	 ldr         r2, [sp, #0x24]
  00d48	e59d1020	 ldr         r1, [sp, #0x20]
  00d4c	e59d001c	 ldr         r0, [sp, #0x1C]
  00d50	eb000000	 bl          SDHCDIndicateBusRequestComplete
  00d54		 |$LN1@IndicateBu|

; 385  :         fRet = TRUE;

  00d54	e3a03001	 mov         r3, #1
  00d58	e58d3000	 str         r3, [sp]
  00d5c		 |$LN4@IndicateBu|

; 386  :     }
; 387  :     ASSERT(fRet);

  00d5c	e59d3000	 ldr         r3, [sp]
  00d60	e3530000	 cmp         r3, #0
  00d64	0a000002	 beq         |$LN9@IndicateBu|
  00d68	e3a03001	 mov         r3, #1
  00d6c	e58d3010	 str         r3, [sp, #0x10]
  00d70	ea000008	 b           |$LN10@IndicateBu|
  00d74		 |$LN9@IndicateBu|
  00d74	e3a03c01	 mov         r3, #1, 24
  00d78	e3833083	 orr         r3, r3, #0x83
  00d7c	e59f2034	 ldr         r2, [pc, #0x34]
  00d80	e59f102c	 ldr         r1, [pc, #0x2C]
  00d84	e59f0024	 ldr         r0, [pc, #0x24]
  00d88	eb000000	 bl          NKDbgPrintfW
  00d8c	e6000010	 __debugbreak_ce
  00d90	e3a03000	 mov         r3, #0
  00d94	e58d3010	 str         r3, [sp, #0x10]
  00d98		 |$LN10@IndicateBu|

; 388  :     return fRet;

  00d98	e59d3000	 ldr         r3, [sp]
  00d9c	e58d3008	 str         r3, [sp, #8]

; 389  : }

  00da0	e59d0008	 ldr         r0, [sp, #8]
  00da4	e28dd014	 add         sp, sp, #0x14
  00da8	e89d6000	 ldmia       sp, {sp, lr}
  00dac	e12fff1e	 bx          lr
  00db0		 |$LN14@IndicateBu|
  00db0		 |$LN15@IndicateBu|
  00db0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00db4		 |$LN16@IndicateBu|
  00db4	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00db8		 |$LN17@IndicateBu|
  00db8	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00dbc		 |$LN18@IndicateBu|
  00dbc	00000000	 DCD         |??_C@_1HC@CDENOIIK@?$AAI?$AAn?$AAd?$AAi?$AAc?$AAa?$AAt?$AAe?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?5?$AA?9?$AA?5?$AAp?$AAR?$AAe@|
  00dc0		 |$LN19@IndicateBu|
  00dc0	00000000	 DCD         |dpCurSettings|
  00dc4		 |$M44796|

			 ENDP  ; |IndicateBusRequestComplete|

	EXPORT	|SDControllerIstThread|
	EXPORT	|SDDMAIstThread|
	EXPORT	|??_C@_1FA@EOJFJPCL@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AAL?$AAi?$AAb?$AAI?$AAo?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KK@LKBDNCIG@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAS?$AAR?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAD?$AAl?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@PFNEGHPP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAB?$AAu?$AAs?$AAA?$AAd?$AAd?$AAr?$AAT?$AAo?$AAS?$AAt?$AAa?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@DEPGGMJO@?$AAL?$AAo?$AAa?$AAd?$AAI?$AAn?$AAt?$AAC?$AAh?$AAa?$AAi?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@OHPJHCNH@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@LDNPJNO@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AAv?$AAa?$AAl?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@JCICNJKB@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AAv?$AAa?$AAl@| [ DATA ] ; `string'
	EXPORT	|DumpGPIORegisters|
	EXPORT	|DumpRegisters|
	EXPORT	|??_C@_1IO@JEGCJJP@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@GBFOPBHI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@GMEMOOMN@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@MMBLLAKF@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@KIBEEEIH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|SDInitialize|
	IMPORT	|SetupCardDetectIST|
	IMPORT	|CreateThread|
	IMPORT	|KernelLibIoControl|
	IMPORT	|BusTransBusAddrToStatic|
	IMPORT	|LoadIntChainHandler|
	IMPORT	|HalAllocateCommonBuffer|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|BusTransBusAddrToVirtual|
	IMPORT	|InitializeHardware|
	IMPORT	|GetSystemInfo|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memcpy|
	IMPORT	|memset|

  00040			 AREA	 |.pdata|, PDATA
|$T44867| DCD	|$LN56@SDInitiali|
	DCD	0x4003c204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@EOJFJPCL@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AAL?$AAi?$AAb?$AAI?$AAo?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "K"
	DCB	0x0, "e", 0x0, "r", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "L"
	DCB	0x0, "i", 0x0, "b", 0x0, "I", 0x0, "o", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, " "
	DCB	0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@LKBDNCIG@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAS?$AAR?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAD?$AAl?$AAl@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "I", 0x0, "S", 0x0, "R"
	DCB	0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ",", 0x0, " ", 0x0, "D", 0x0, "l"
	DCB	0x0, "l", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "'", 0x0, "%"
	DCB	0x0, "s", 0x0, "'", 0x0, ",", 0x0, " ", 0x0, "H", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "'", 0x0, "%", 0x0, "s", 0x0, "'"
	DCB	0x0, ",", 0x0, " ", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "P", 0x0, "h", 0x0, "y", 0x0, "s", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@PFNEGHPP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAB?$AAu?$AAs?$AAA?$AAd?$AAd?$AAr?$AAT?$AAo?$AAS?$AAt?$AAa?$AAt?$AAi@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r"
	DCB	0x0, "T", 0x0, "o", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "c", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@DEPGGMJO@?$AAL?$AAo?$AAa?$AAd?$AAI?$AAn?$AAt?$AAC?$AAh?$AAa?$AAi?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@| DCB "L"
	DCB	0x0, "o", 0x0, "a", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@OHPJHCNH@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@| DCB "S"
	DCB	0x0, "H", 0x0, "C", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "b", 0x0, "u"
	DCB	0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LDNPJNO@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AAv?$AAa?$AAl?$AAu@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o"
	DCB	0x0, "b", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "u", 0x0, "e", 0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@JCICNJKB@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AAv?$AAa?$AAl@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o"
	DCB	0x0, "b", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "S", 0x0, "D", 0x0, "I"
	DCB	0x0, "O", 0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I"
	DCB	0x0, "N", 0x0, "T", 0x0, "R", 0x0, " ", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "u", 0x0, "e", 0x0, "!", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@JEGCJJP@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "B", 0x0, "u", 0x0, "l", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@GBFOPBHI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "B", 0x0, "u", 0x0, "l", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@GMEMOOMN@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "B", 0x0, "u", 0x0, "l", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "S", 0x0, "D"
	DCB	0x0, "/", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@MMBLLAKF@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "B", 0x0, "u", 0x0, "l", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "G", 0x0, "P"
	DCB	0x0, "I", 0x0, "O", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@KIBEEEIH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, "H", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, ":"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "l", 0x0, "a"
	DCB	0x0, "t", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, "m", 0x0, " "
	DCB	0x0, "s", 0x0, "p", 0x0, "e", 0x0, "c", 0x0, "i", 0x0, "f"
	DCB	0x0, "i", 0x0, "c", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00dc4			 AREA	 |.text|, CODE, ARM

  00dc4		 |SDInitialize| PROC

; 558  : {

  00dc4		 |$LN56@SDInitiali|
  00dc4	e1a0c00d	 mov         r12, sp
  00dc8	e92d0001	 stmdb       sp!, {r0}
  00dcc	e92d5000	 stmdb       sp!, {r12, lr}
  00dd0	e24ddf62	 sub         sp, sp, #0x62, 30
  00dd4		 |$M44864|

; 559  :     ULONG fInIOSpace;
; 560  :     DWORD dwSDIOIrq;
; 561  :     DWORD dwRegVal;                                 // intermediate value
; 562  :     SD_API_STATUS status = SD_API_STATUS_SUCCESS;   // intermediate status

  00dd4	e3a03000	 mov         r3, #0
  00dd8	e58d3038	 str         r3, [sp, #0x38]

; 563  :     DWORD         threadID;                         // thread ID
; 564  :     PSDH_HARDWARE_CONTEXT pHardwareContext;       // hardware context
; 565  :     PHYSICAL_ADDRESS Bulverde_GPIO_Base = {BULVERDE_BASE_REG_PA_GPIO};

  00ddc	e3a03101	 mov         r3, #1, 2
  00de0	e383360e	 orr         r3, r3, #0xE, 12
  00de4	e58d303c	 str         r3, [sp, #0x3C]
  00de8	e3a02004	 mov         r2, #4
  00dec	e3a01000	 mov         r1, #0
  00df0	e28d0040	 add         r0, sp, #0x40
  00df4	eb000000	 bl          memset

; 566  :     PHYSICAL_ADDRESS Bulverde_SDMMC_Base = {BULVERDE_BASE_REG_PA_MMC};

  00df8	e3a03441	 mov         r3, #0x41, 8
  00dfc	e3833601	 orr         r3, r3, #1, 12
  00e00	e58d3024	 str         r3, [sp, #0x24]
  00e04	e3a02004	 mov         r2, #4
  00e08	e3a01000	 mov         r1, #0
  00e0c	e28d0028	 add         r0, sp, #0x28
  00e10	eb000000	 bl          memset

; 567  :     PHYSICAL_ADDRESS Bulverde_CLKMGR_Base = {BULVERDE_BASE_REG_PA_CLKMGR};

  00e14	e3a03441	 mov         r3, #0x41, 8
  00e18	e3833603	 orr         r3, r3, #3, 12
  00e1c	e58d3030	 str         r3, [sp, #0x30]
  00e20	e3a02004	 mov         r2, #4
  00e24	e3a01000	 mov         r1, #0
  00e28	e28d0034	 add         r0, sp, #0x34
  00e2c	eb000000	 bl          memset

; 568  :     PHYSICAL_ADDRESS Bulverde_DMA_Base = {BULVERDE_BASE_REG_PA_DMAC};

  00e30	e3a03101	 mov         r3, #1, 2
  00e34	e58d301c	 str         r3, [sp, #0x1C]
  00e38	e3a02004	 mov         r2, #4
  00e3c	e3a01000	 mov         r1, #0
  00e40	e28d0020	 add         r0, sp, #0x20
  00e44	eb000000	 bl          memset

; 569  : 
; 570  :     pHardwareContext = GetExtensionFromHCDContext(PSDH_HARDWARE_CONTEXT, pHCContext);

  00e48	e59d3190	 ldr         r3, [sp, #0x190]
  00e4c	e283304c	 add         r3, r3, #0x4C
  00e50	e5933000	 ldr         r3, [r3]
  00e54	e58d3014	 str         r3, [sp, #0x14]

; 571  : 
; 572  :     InitializeCriticalSection(&pHardwareContext->ControllerCriticalSection);

  00e58	e59d3014	 ldr         r3, [sp, #0x14]
  00e5c	e2833c0a	 add         r3, r3, #0xA, 24
  00e60	e28300d8	 add         r0, r3, #0xD8
  00e64	eb000000	 bl          InitializeCriticalSection

; 573  : 
; 574  :     pHardwareContext->fSDIOEnabled = FALSE;

  00e68	e59d3014	 ldr         r3, [sp, #0x14]
  00e6c	e2833c0d	 add         r3, r3, #0xD, 24
  00e70	e2832034	 add         r2, r3, #0x34
  00e74	e3a03000	 mov         r3, #0
  00e78	e5823000	 str         r3, [r2]

; 575  :     pHardwareContext->pCurrentRequest = NULL ;

  00e7c	e59d3014	 ldr         r3, [sp, #0x14]
  00e80	e283201c	 add         r2, r3, #0x1C
  00e84	e3a03000	 mov         r3, #0
  00e88	e5823000	 str         r3, [r2]

; 576  :     pHardwareContext->fSDIOInterruptPending = FALSE;

  00e8c	e59d3014	 ldr         r3, [sp, #0x14]
  00e90	e2833c0d	 add         r3, r3, #0xD, 24
  00e94	e2832038	 add         r2, r3, #0x38
  00e98	e3a03000	 mov         r3, #0
  00e9c	e5823000	 str         r3, [r2]

; 577  :     pHardwareContext->f4BitMode = FALSE;

  00ea0	e59d3014	 ldr         r3, [sp, #0x14]
  00ea4	e2833c0d	 add         r3, r3, #0xD, 24
  00ea8	e283203c	 add         r2, r3, #0x3C
  00eac	e3a03000	 mov         r3, #0
  00eb0	e5823000	 str         r3, [r2]

; 578  :     pHardwareContext->DevicePresent = FALSE;

  00eb4	e59d3014	 ldr         r3, [sp, #0x14]
  00eb8	e2833c0d	 add         r3, r3, #0xD, 24
  00ebc	e2832048	 add         r2, r3, #0x48
  00ec0	e3a03000	 mov         r3, #0
  00ec4	e5823000	 str         r3, [r2]

; 579  :     pHardwareContext->hDMAInterruptEvent = NULL;

  00ec8	e59d3014	 ldr         r3, [sp, #0x14]
  00ecc	e2833c0a	 add         r3, r3, #0xA, 24
  00ed0	e2832098	 add         r2, r3, #0x98
  00ed4	e3a03000	 mov         r3, #0
  00ed8	e5823000	 str         r3, [r2]

; 580  :     pHardwareContext->hDMAIsrHandler = NULL;

  00edc	e59d3014	 ldr         r3, [sp, #0x14]
  00ee0	e2833c0a	 add         r3, r3, #0xA, 24
  00ee4	e2832094	 add         r2, r3, #0x94
  00ee8	e3a03000	 mov         r3, #0
  00eec	e5823000	 str         r3, [r2]

; 581  :     pHardwareContext->DriverShutdown = FALSE;

  00ef0	e59d3014	 ldr         r3, [sp, #0x14]
  00ef4	e2833c0a	 add         r3, r3, #0xA, 24
  00ef8	e28320d4	 add         r2, r3, #0xD4
  00efc	e3a03000	 mov         r3, #0
  00f00	e5823000	 str         r3, [r2]

; 582  :     pHardwareContext->hDMAInterruptEvent = NULL;

  00f04	e59d3014	 ldr         r3, [sp, #0x14]
  00f08	e2833c0a	 add         r3, r3, #0xA, 24
  00f0c	e2832098	 add         r2, r3, #0x98
  00f10	e3a03000	 mov         r3, #0
  00f14	e5823000	 str         r3, [r2]

; 583  :     pHardwareContext->hDmaInterruptThread = NULL;

  00f18	e59d3014	 ldr         r3, [sp, #0x14]
  00f1c	e2832eaa	 add         r2, r3, #0xAA, 28
  00f20	e3a03000	 mov         r3, #0
  00f24	e5823000	 str         r3, [r2]

; 584  :     pHardwareContext->pDMABuffer = NULL;

  00f28	e59d3014	 ldr         r3, [sp, #0x14]
  00f2c	e2832068	 add         r2, r3, #0x68
  00f30	e3a03000	 mov         r3, #0
  00f34	e5823000	 str         r3, [r2]

; 585  :     pHardwareContext->pDMADescriptors = NULL;

  00f38	e59d3014	 ldr         r3, [sp, #0x14]
  00f3c	e2832078	 add         r2, r3, #0x78
  00f40	e3a03000	 mov         r3, #0
  00f44	e5823000	 str         r3, [r2]

; 586  :     pHardwareContext->dwControllerIstTimeout = INFINITE;

  00f48	e59d3014	 ldr         r3, [sp, #0x14]
  00f4c	e283203c	 add         r2, r3, #0x3C
  00f50	e3e03000	 mvn         r3, #0
  00f54	e5823000	 str         r3, [r2]

; 587  :     InitializeCriticalSection(&pHardwareContext->intrRegCriticalSection);

  00f58	e59d3014	 ldr         r3, [sp, #0x14]
  00f5c	e2833c0d	 add         r3, r3, #0xD, 24
  00f60	e2830054	 add         r0, r3, #0x54
  00f64	eb000000	 bl          InitializeCriticalSection

; 588  : 
; 589  : #ifdef DEBUG
; 590  :     pHardwareContext->fDMATransferInProgress = FALSE;

  00f68	e59d3014	 ldr         r3, [sp, #0x14]
  00f6c	e2832ead	 add         r2, r3, #0xAD, 28
  00f70	e3a03000	 mov         r3, #0
  00f74	e5823000	 str         r3, [r2]

; 591  : #endif
; 592  :     
; 593  :     GetSystemInfo( &pHardwareContext->systemInfo );

  00f78	e59d3014	 ldr         r3, [sp, #0x14]
  00f7c	e2830044	 add         r0, r3, #0x44
  00f80	eb000000	 bl          GetSystemInfo

; 594  : 
; 595  :     if( !InitializeHardware( pHardwareContext->hBusAccessHandle ) )

  00f84	e59d3014	 ldr         r3, [sp, #0x14]
  00f88	e2833014	 add         r3, r3, #0x14
  00f8c	e5930000	 ldr         r0, [r3]
  00f90	eb000000	 bl          InitializeHardware
  00f94	e58d0104	 str         r0, [sp, #0x104]
  00f98	e59d3104	 ldr         r3, [sp, #0x104]
  00f9c	e3530000	 cmp         r3, #0
  00fa0	1a00000b	 bne         |$LN25@SDInitiali|

; 596  :     {
; 597  : 		DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("InitializeHardware:: Error initializing platform specific hardware\r\n")));

  00fa4	e59f3ce8	 ldr         r3, [pc, #0xCE8]
  00fa8	e5933440	 ldr         r3, [r3, #0x440]
  00fac	e3130902	 tst         r3, #2, 18
  00fb0	0a000004	 beq         |$LN28@SDInitiali|
  00fb4	e59f0d0c	 ldr         r0, [pc, #0xD0C]
  00fb8	eb000000	 bl          NKDbgPrintfW
  00fbc	e3a03001	 mov         r3, #1
  00fc0	e58d3108	 str         r3, [sp, #0x108]
  00fc4	ea000001	 b           |$LN29@SDInitiali|
  00fc8		 |$LN28@SDInitiali|
  00fc8	e3a03000	 mov         r3, #0
  00fcc	e58d3108	 str         r3, [sp, #0x108]
  00fd0		 |$LN29@SDInitiali|

; 598  :         goto exitInit;

  00fd0	ea000321	 b           |$exitInit$43528|
  00fd4		 |$LN25@SDInitiali|

; 599  :     }
; 600  : 
; 601  :     if( !BusTransBusAddrToVirtual( pHardwareContext->hBusAccessHandle, Internal, 0, Bulverde_GPIO_Base, sizeof(BULVERDE_GPIO_REG), &fInIOSpace, (PPVOID)&(pHardwareContext->pGPIORegisters) ) )

  00fd4	e59d3014	 ldr         r3, [sp, #0x14]
  00fd8	e58d300c	 str         r3, [sp, #0xC]
  00fdc	e28d3010	 add         r3, sp, #0x10
  00fe0	e58d3008	 str         r3, [sp, #8]
  00fe4	e3a03f53	 mov         r3, #0x53, 30
  00fe8	e58d3004	 str         r3, [sp, #4]
  00fec	e28d0000	 add         r0, sp, #0
  00ff0	e28d1040	 add         r1, sp, #0x40
  00ff4	e3a02004	 mov         r2, #4
  00ff8	eb000000	 bl          memcpy
  00ffc	e59d303c	 ldr         r3, [sp, #0x3C]
  01000	e3a02000	 mov         r2, #0
  01004	e3a01000	 mov         r1, #0
  01008	e59d0014	 ldr         r0, [sp, #0x14]
  0100c	e2800014	 add         r0, r0, #0x14
  01010	e5900000	 ldr         r0, [r0]
  01014	eb000000	 bl          BusTransBusAddrToVirtual
  01018	e58d010c	 str         r0, [sp, #0x10C]
  0101c	e59d310c	 ldr         r3, [sp, #0x10C]
  01020	e3530000	 cmp         r3, #0
  01024	1a00000b	 bne         |$LN24@SDInitiali|

; 602  : 	{
; 603  : 		DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("InitializeHardware:: Error allocating Bulverde GPIO registers\r\n")));

  01028	e59f3c64	 ldr         r3, [pc, #0xC64]
  0102c	e5933440	 ldr         r3, [r3, #0x440]
  01030	e3130902	 tst         r3, #2, 18
  01034	0a000004	 beq         |$LN30@SDInitiali|
  01038	e59f0c84	 ldr         r0, [pc, #0xC84]
  0103c	eb000000	 bl          NKDbgPrintfW
  01040	e3a03001	 mov         r3, #1
  01044	e58d3110	 str         r3, [sp, #0x110]
  01048	ea000001	 b           |$LN31@SDInitiali|
  0104c		 |$LN30@SDInitiali|
  0104c	e3a03000	 mov         r3, #0
  01050	e58d3110	 str         r3, [sp, #0x110]
  01054		 |$LN31@SDInitiali|

; 604  :         goto exitInit;

  01054	ea000300	 b           |$exitInit$43528|
  01058		 |$LN24@SDInitiali|

; 605  : 	}
; 606  : 
; 607  :     if( !BusTransBusAddrToVirtual( pHardwareContext->hBusAccessHandle, Internal, 0, Bulverde_SDMMC_Base, sizeof(BULVERDE_MMC_REG), &fInIOSpace, (PPVOID)&(pHardwareContext->pSDMMCRegisters) ) )

  01058	e59d3014	 ldr         r3, [sp, #0x14]
  0105c	e2833004	 add         r3, r3, #4
  01060	e58d300c	 str         r3, [sp, #0xC]
  01064	e28d3010	 add         r3, sp, #0x10
  01068	e58d3008	 str         r3, [sp, #8]
  0106c	e3a03048	 mov         r3, #0x48
  01070	e58d3004	 str         r3, [sp, #4]
  01074	e28d0000	 add         r0, sp, #0
  01078	e28d1028	 add         r1, sp, #0x28
  0107c	e3a02004	 mov         r2, #4
  01080	eb000000	 bl          memcpy
  01084	e59d3024	 ldr         r3, [sp, #0x24]
  01088	e3a02000	 mov         r2, #0
  0108c	e3a01000	 mov         r1, #0
  01090	e59d0014	 ldr         r0, [sp, #0x14]
  01094	e2800014	 add         r0, r0, #0x14
  01098	e5900000	 ldr         r0, [r0]
  0109c	eb000000	 bl          BusTransBusAddrToVirtual
  010a0	e58d0114	 str         r0, [sp, #0x114]
  010a4	e59d3114	 ldr         r3, [sp, #0x114]
  010a8	e3530000	 cmp         r3, #0
  010ac	1a00000b	 bne         |$LN23@SDInitiali|

; 608  : 	{
; 609  : 		DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("InitializeHardware:: Error allocating Bulverde SD/MMC registers\r\n")));

  010b0	e59f3bdc	 ldr         r3, [pc, #0xBDC]
  010b4	e5933440	 ldr         r3, [r3, #0x440]
  010b8	e3130902	 tst         r3, #2, 18
  010bc	0a000004	 beq         |$LN32@SDInitiali|
  010c0	e59f0bf8	 ldr         r0, [pc, #0xBF8]
  010c4	eb000000	 bl          NKDbgPrintfW
  010c8	e3a03001	 mov         r3, #1
  010cc	e58d3118	 str         r3, [sp, #0x118]
  010d0	ea000001	 b           |$LN33@SDInitiali|
  010d4		 |$LN32@SDInitiali|
  010d4	e3a03000	 mov         r3, #0
  010d8	e58d3118	 str         r3, [sp, #0x118]
  010dc		 |$LN33@SDInitiali|

; 610  :         goto exitInit;

  010dc	ea0002de	 b           |$exitInit$43528|
  010e0		 |$LN23@SDInitiali|

; 611  : 	}
; 612  : 
; 613  :     if( !BusTransBusAddrToVirtual( pHardwareContext->hBusAccessHandle, Internal, 0, Bulverde_CLKMGR_Base, sizeof(BULVERDE_CLKMGR_REG), &fInIOSpace, (PPVOID)&(pHardwareContext->pClkMgrRegisters) ) )

  010e0	e59d3014	 ldr         r3, [sp, #0x14]
  010e4	e2833008	 add         r3, r3, #8
  010e8	e58d300c	 str         r3, [sp, #0xC]
  010ec	e28d3010	 add         r3, sp, #0x10
  010f0	e58d3008	 str         r3, [sp, #8]
  010f4	e3a03010	 mov         r3, #0x10
  010f8	e58d3004	 str         r3, [sp, #4]
  010fc	e28d0000	 add         r0, sp, #0
  01100	e28d1034	 add         r1, sp, #0x34
  01104	e3a02004	 mov         r2, #4
  01108	eb000000	 bl          memcpy
  0110c	e59d3030	 ldr         r3, [sp, #0x30]
  01110	e3a02000	 mov         r2, #0
  01114	e3a01000	 mov         r1, #0
  01118	e59d0014	 ldr         r0, [sp, #0x14]
  0111c	e2800014	 add         r0, r0, #0x14
  01120	e5900000	 ldr         r0, [r0]
  01124	eb000000	 bl          BusTransBusAddrToVirtual
  01128	e58d011c	 str         r0, [sp, #0x11C]
  0112c	e59d311c	 ldr         r3, [sp, #0x11C]
  01130	e3530000	 cmp         r3, #0
  01134	1a00000b	 bne         |$LN22@SDInitiali|

; 614  : 	{
; 615  : 		DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("InitializeHardware:: Error allocating Bulverde Clock control registers\r\n")));

  01138	e59f3b54	 ldr         r3, [pc, #0xB54]
  0113c	e5933440	 ldr         r3, [r3, #0x440]
  01140	e3130902	 tst         r3, #2, 18
  01144	0a000004	 beq         |$LN34@SDInitiali|
  01148	e59f0b6c	 ldr         r0, [pc, #0xB6C]
  0114c	eb000000	 bl          NKDbgPrintfW
  01150	e3a03001	 mov         r3, #1
  01154	e58d3120	 str         r3, [sp, #0x120]
  01158	ea000001	 b           |$LN35@SDInitiali|
  0115c		 |$LN34@SDInitiali|
  0115c	e3a03000	 mov         r3, #0
  01160	e58d3120	 str         r3, [sp, #0x120]
  01164		 |$LN35@SDInitiali|

; 616  :         goto exitInit;

  01164	ea0002bc	 b           |$exitInit$43528|
  01168		 |$LN22@SDInitiali|

; 617  : 	}
; 618  : 
; 619  :     if( !BusTransBusAddrToVirtual( pHardwareContext->hBusAccessHandle, Internal, 0, Bulverde_DMA_Base, sizeof(BULVERDE_DMA_REG), &fInIOSpace, (PPVOID)&(pHardwareContext->pDMARegisters) ) )

  01168	e59d3014	 ldr         r3, [sp, #0x14]
  0116c	e283300c	 add         r3, r3, #0xC
  01170	e58d300c	 str         r3, [sp, #0xC]
  01174	e28d3010	 add         r3, sp, #0x10
  01178	e58d3008	 str         r3, [sp, #8]
  0117c	e3a03c11	 mov         r3, #0x11, 24
  01180	e383302c	 orr         r3, r3, #0x2C
  01184	e58d3004	 str         r3, [sp, #4]
  01188	e28d0000	 add         r0, sp, #0
  0118c	e28d1020	 add         r1, sp, #0x20
  01190	e3a02004	 mov         r2, #4
  01194	eb000000	 bl          memcpy
  01198	e59d301c	 ldr         r3, [sp, #0x1C]
  0119c	e3a02000	 mov         r2, #0
  011a0	e3a01000	 mov         r1, #0
  011a4	e59d0014	 ldr         r0, [sp, #0x14]
  011a8	e2800014	 add         r0, r0, #0x14
  011ac	e5900000	 ldr         r0, [r0]
  011b0	eb000000	 bl          BusTransBusAddrToVirtual
  011b4	e58d0124	 str         r0, [sp, #0x124]
  011b8	e59d3124	 ldr         r3, [sp, #0x124]
  011bc	e3530000	 cmp         r3, #0
  011c0	1a00000b	 bne         |$LN21@SDInitiali|

; 620  : 	{
; 621  : 		DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("InitializeHardware:: Error allocating Bulverde DMA control registers\r\n")));

  011c4	e59f3ac8	 ldr         r3, [pc, #0xAC8]
  011c8	e5933440	 ldr         r3, [r3, #0x440]
  011cc	e3130902	 tst         r3, #2, 18
  011d0	0a000004	 beq         |$LN36@SDInitiali|
  011d4	e59f0adc	 ldr         r0, [pc, #0xADC]
  011d8	eb000000	 bl          NKDbgPrintfW
  011dc	e3a03001	 mov         r3, #1
  011e0	e58d3128	 str         r3, [sp, #0x128]
  011e4	ea000001	 b           |$LN37@SDInitiali|
  011e8		 |$LN36@SDInitiali|
  011e8	e3a03000	 mov         r3, #0
  011ec	e58d3128	 str         r3, [sp, #0x128]
  011f0		 |$LN37@SDInitiali|

; 622  :         goto exitInit;

  011f0	ea000299	 b           |$exitInit$43528|
  011f4		 |$LN21@SDInitiali|

; 623  : 	}
; 624  : 
; 625  :     // enable the MMC Unit Clock
; 626  :     dwRegVal = pHardwareContext->pClkMgrRegisters->cken;

  011f4	e59d3014	 ldr         r3, [sp, #0x14]
  011f8	e2833008	 add         r3, r3, #8
  011fc	e5933000	 ldr         r3, [r3]
  01200	e2833004	 add         r3, r3, #4
  01204	e5933000	 ldr         r3, [r3]
  01208	e58d3018	 str         r3, [sp, #0x18]

; 627  :     dwRegVal |= (1 << 12);

  0120c	e59d3018	 ldr         r3, [sp, #0x18]
  01210	e3833a01	 orr         r3, r3, #1, 20
  01214	e58d3018	 str         r3, [sp, #0x18]

; 628  :     pHardwareContext->pClkMgrRegisters->cken = dwRegVal;

  01218	e59d3014	 ldr         r3, [sp, #0x14]
  0121c	e2833008	 add         r3, r3, #8
  01220	e5933000	 ldr         r3, [r3]
  01224	e2832004	 add         r2, r3, #4
  01228	e59d3018	 ldr         r3, [sp, #0x18]
  0122c	e5823000	 str         r3, [r2]

; 629  : 
; 630  :     //////////////////////////////////////////////////////////
; 631  :     // Configure GPIO_32 as Alternate Function 2 out (MMC_CLK)
; 632  : 
; 633  :     // assume that the MMC_CLK is active-low signal driven
; 634  :     dwRegVal = pHardwareContext->pGPIORegisters->GPCR1;

  01230	e59d3014	 ldr         r3, [sp, #0x14]
  01234	e5933000	 ldr         r3, [r3]
  01238	e2833028	 add         r3, r3, #0x28
  0123c	e5933000	 ldr         r3, [r3]
  01240	e58d3018	 str         r3, [sp, #0x18]

; 635  :     dwRegVal |= 0x00000001;

  01244	e59d3018	 ldr         r3, [sp, #0x18]
  01248	e3833001	 orr         r3, r3, #1
  0124c	e58d3018	 str         r3, [sp, #0x18]

; 636  :     pHardwareContext->pGPIORegisters->GPCR1 = dwRegVal;

  01250	e59d3014	 ldr         r3, [sp, #0x14]
  01254	e5933000	 ldr         r3, [r3]
  01258	e2832028	 add         r2, r3, #0x28
  0125c	e59d3018	 ldr         r3, [sp, #0x18]
  01260	e5823000	 str         r3, [r2]

; 637  :     // change the direction to OUT
; 638  :     dwRegVal = pHardwareContext->pGPIORegisters->GPDR1;

  01264	e59d3014	 ldr         r3, [sp, #0x14]
  01268	e5933000	 ldr         r3, [r3]
  0126c	e2833010	 add         r3, r3, #0x10
  01270	e5933000	 ldr         r3, [r3]
  01274	e58d3018	 str         r3, [sp, #0x18]

; 639  :     dwRegVal |= 0x00000001;

  01278	e59d3018	 ldr         r3, [sp, #0x18]
  0127c	e3833001	 orr         r3, r3, #1
  01280	e58d3018	 str         r3, [sp, #0x18]

; 640  :     pHardwareContext->pGPIORegisters->GPDR1 = dwRegVal;

  01284	e59d3014	 ldr         r3, [sp, #0x14]
  01288	e5933000	 ldr         r3, [r3]
  0128c	e2832010	 add         r2, r3, #0x10
  01290	e59d3018	 ldr         r3, [sp, #0x18]
  01294	e5823000	 str         r3, [r2]

; 641  :     // change to Alternate Function 2
; 642  :     dwRegVal = pHardwareContext->pGPIORegisters->GAFR1_L;

  01298	e59d3014	 ldr         r3, [sp, #0x14]
  0129c	e5933000	 ldr         r3, [r3]
  012a0	e283305c	 add         r3, r3, #0x5C
  012a4	e5933000	 ldr         r3, [r3]
  012a8	e58d3018	 str         r3, [sp, #0x18]

; 643  :     dwRegVal = ( dwRegVal & 0xfffffffc ) | 0x00000002;

  012ac	e59d2018	 ldr         r2, [sp, #0x18]
  012b0	e3e03003	 mvn         r3, #3
  012b4	e0023003	 and         r3, r2, r3
  012b8	e3833002	 orr         r3, r3, #2
  012bc	e58d3018	 str         r3, [sp, #0x18]

; 644  :     pHardwareContext->pGPIORegisters->GAFR1_L = dwRegVal;

  012c0	e59d3014	 ldr         r3, [sp, #0x14]
  012c4	e5933000	 ldr         r3, [r3]
  012c8	e283205c	 add         r2, r3, #0x5C
  012cc	e59d3018	 ldr         r3, [sp, #0x18]
  012d0	e5823000	 str         r3, [r2]

; 645  :     
; 646  :     //////////////////////////////////////////////////////////
; 647  :     // Configure GPIO_112 as Alternate Function 1 (MMC_CMD)
; 648  : 
; 649  :     // assume that the MMC_CLK is active-high signal driven
; 650  :     dwRegVal = pHardwareContext->pGPIORegisters->GPSR3;

  012d4	e59d3014	 ldr         r3, [sp, #0x14]
  012d8	e5933000	 ldr         r3, [r3]
  012dc	e2833f46	 add         r3, r3, #0x46, 30
  012e0	e5933000	 ldr         r3, [r3]
  012e4	e58d3018	 str         r3, [sp, #0x18]

; 651  :     dwRegVal |= 0x00010000;

  012e8	e59d3018	 ldr         r3, [sp, #0x18]
  012ec	e3833801	 orr         r3, r3, #1, 16
  012f0	e58d3018	 str         r3, [sp, #0x18]

; 652  :     pHardwareContext->pGPIORegisters->GPSR3 = dwRegVal;

  012f4	e59d3014	 ldr         r3, [sp, #0x14]
  012f8	e5933000	 ldr         r3, [r3]
  012fc	e2832f46	 add         r2, r3, #0x46, 30
  01300	e59d3018	 ldr         r3, [sp, #0x18]
  01304	e5823000	 str         r3, [r2]

; 653  :     // change the direction to OUT
; 654  :     dwRegVal = pHardwareContext->pGPIORegisters->GPDR3;

  01308	e59d3014	 ldr         r3, [sp, #0x14]
  0130c	e5933000	 ldr         r3, [r3]
  01310	e2833f43	 add         r3, r3, #0x43, 30
  01314	e5933000	 ldr         r3, [r3]
  01318	e58d3018	 str         r3, [sp, #0x18]

; 655  :     dwRegVal |= 0x00010000;

  0131c	e59d3018	 ldr         r3, [sp, #0x18]
  01320	e3833801	 orr         r3, r3, #1, 16
  01324	e58d3018	 str         r3, [sp, #0x18]

; 656  :     pHardwareContext->pGPIORegisters->GPDR3 = dwRegVal;

  01328	e59d3014	 ldr         r3, [sp, #0x14]
  0132c	e5933000	 ldr         r3, [r3]
  01330	e2832f43	 add         r2, r3, #0x43, 30
  01334	e59d3018	 ldr         r3, [sp, #0x18]
  01338	e5823000	 str         r3, [r2]

; 657  :     // change to Alternate Function 1
; 658  :     dwRegVal = pHardwareContext->pGPIORegisters->GAFR3_U;

  0133c	e59d3014	 ldr         r3, [sp, #0x14]
  01340	e5933000	 ldr         r3, [r3]
  01344	e2833070	 add         r3, r3, #0x70
  01348	e5933000	 ldr         r3, [r3]
  0134c	e58d3018	 str         r3, [sp, #0x18]

; 659  :     dwRegVal = ( dwRegVal & 0xfffffffc ) | 0x00000001;

  01350	e59d2018	 ldr         r2, [sp, #0x18]
  01354	e3e03003	 mvn         r3, #3
  01358	e0023003	 and         r3, r2, r3
  0135c	e3833001	 orr         r3, r3, #1
  01360	e58d3018	 str         r3, [sp, #0x18]

; 660  :     pHardwareContext->pGPIORegisters->GAFR3_U = dwRegVal;

  01364	e59d3014	 ldr         r3, [sp, #0x14]
  01368	e5933000	 ldr         r3, [r3]
  0136c	e2832070	 add         r2, r3, #0x70
  01370	e59d3018	 ldr         r3, [sp, #0x18]
  01374	e5823000	 str         r3, [r2]

; 661  :     
; 662  :     //////////////////////////////////////////////////////////
; 663  :     // Configure GPIO_92 as Alternate Function 1 (MMC_DAT0)
; 664  :     
; 665  :     // assume that the MMC_CLK is active-high signal driven
; 666  :     dwRegVal = pHardwareContext->pGPIORegisters->GPSR2;

  01378	e59d3014	 ldr         r3, [sp, #0x14]
  0137c	e5933000	 ldr         r3, [r3]
  01380	e2833020	 add         r3, r3, #0x20
  01384	e5933000	 ldr         r3, [r3]
  01388	e58d3018	 str         r3, [sp, #0x18]

; 667  :     dwRegVal |= 0x10000000;

  0138c	e59d3018	 ldr         r3, [sp, #0x18]
  01390	e3833201	 orr         r3, r3, #1, 4
  01394	e58d3018	 str         r3, [sp, #0x18]

; 668  :     pHardwareContext->pGPIORegisters->GPSR2 = dwRegVal;

  01398	e59d3014	 ldr         r3, [sp, #0x14]
  0139c	e5933000	 ldr         r3, [r3]
  013a0	e2832020	 add         r2, r3, #0x20
  013a4	e59d3018	 ldr         r3, [sp, #0x18]
  013a8	e5823000	 str         r3, [r2]

; 669  :     // change the direction to OUT
; 670  :     dwRegVal = pHardwareContext->pGPIORegisters->GPDR2;

  013ac	e59d3014	 ldr         r3, [sp, #0x14]
  013b0	e5933000	 ldr         r3, [r3]
  013b4	e2833014	 add         r3, r3, #0x14
  013b8	e5933000	 ldr         r3, [r3]
  013bc	e58d3018	 str         r3, [sp, #0x18]

; 671  :     dwRegVal |= 0x10000000;

  013c0	e59d3018	 ldr         r3, [sp, #0x18]
  013c4	e3833201	 orr         r3, r3, #1, 4
  013c8	e58d3018	 str         r3, [sp, #0x18]

; 672  :     pHardwareContext->pGPIORegisters->GPDR2 = dwRegVal;

  013cc	e59d3014	 ldr         r3, [sp, #0x14]
  013d0	e5933000	 ldr         r3, [r3]
  013d4	e2832014	 add         r2, r3, #0x14
  013d8	e59d3018	 ldr         r3, [sp, #0x18]
  013dc	e5823000	 str         r3, [r2]

; 673  :     // change to Alternate Function 1
; 674  :     dwRegVal = pHardwareContext->pGPIORegisters->GAFR2_U;

  013e0	e59d3014	 ldr         r3, [sp, #0x14]
  013e4	e5933000	 ldr         r3, [r3]
  013e8	e2833068	 add         r3, r3, #0x68
  013ec	e5933000	 ldr         r3, [r3]
  013f0	e58d3018	 str         r3, [sp, #0x18]

; 675  :     dwRegVal = ( dwRegVal & 0xfcffffff ) | 0x01000000;

  013f4	e59d2018	 ldr         r2, [sp, #0x18]
  013f8	e3e03403	 mvn         r3, #3, 8
  013fc	e0023003	 and         r3, r2, r3
  01400	e3833401	 orr         r3, r3, #1, 8
  01404	e58d3018	 str         r3, [sp, #0x18]

; 676  :     pHardwareContext->pGPIORegisters->GAFR2_U = dwRegVal;

  01408	e59d3014	 ldr         r3, [sp, #0x14]
  0140c	e5933000	 ldr         r3, [r3]
  01410	e2832068	 add         r2, r3, #0x68
  01414	e59d3018	 ldr         r3, [sp, #0x18]
  01418	e5823000	 str         r3, [r2]

; 677  :     
; 678  :     //////////////////////////////////////////////////////////
; 679  :     // Configure GPIO_109-GPIO_111 as Alternate Function 1 (MMC_DAT1-MMC_DAT3)
; 680  : 
; 681  :     // assume that the MMC_CLK is active-high signal driven
; 682  :     dwRegVal = pHardwareContext->pGPIORegisters->GPSR3;

  0141c	e59d3014	 ldr         r3, [sp, #0x14]
  01420	e5933000	 ldr         r3, [r3]
  01424	e2833f46	 add         r3, r3, #0x46, 30
  01428	e5933000	 ldr         r3, [r3]
  0142c	e58d3018	 str         r3, [sp, #0x18]

; 683  :     dwRegVal |= 0x0000e000;

  01430	e59d3018	 ldr         r3, [sp, #0x18]
  01434	e3833a0e	 orr         r3, r3, #0xE, 20
  01438	e58d3018	 str         r3, [sp, #0x18]

; 684  :     pHardwareContext->pGPIORegisters->GPSR3 = dwRegVal;

  0143c	e59d3014	 ldr         r3, [sp, #0x14]
  01440	e5933000	 ldr         r3, [r3]
  01444	e2832f46	 add         r2, r3, #0x46, 30
  01448	e59d3018	 ldr         r3, [sp, #0x18]
  0144c	e5823000	 str         r3, [r2]

; 685  :     // change the direction to OUT
; 686  :     dwRegVal = pHardwareContext->pGPIORegisters->GPDR3;

  01450	e59d3014	 ldr         r3, [sp, #0x14]
  01454	e5933000	 ldr         r3, [r3]
  01458	e2833f43	 add         r3, r3, #0x43, 30
  0145c	e5933000	 ldr         r3, [r3]
  01460	e58d3018	 str         r3, [sp, #0x18]

; 687  :     dwRegVal |= 0x0000e000;

  01464	e59d3018	 ldr         r3, [sp, #0x18]
  01468	e3833a0e	 orr         r3, r3, #0xE, 20
  0146c	e58d3018	 str         r3, [sp, #0x18]

; 688  :     pHardwareContext->pGPIORegisters->GPDR3 = dwRegVal;

  01470	e59d3014	 ldr         r3, [sp, #0x14]
  01474	e5933000	 ldr         r3, [r3]
  01478	e2832f43	 add         r2, r3, #0x43, 30
  0147c	e59d3018	 ldr         r3, [sp, #0x18]
  01480	e5823000	 str         r3, [r2]

; 689  :     // change to Alternate Function 1
; 690  :     dwRegVal = pHardwareContext->pGPIORegisters->GAFR3_L;

  01484	e59d3014	 ldr         r3, [sp, #0x14]
  01488	e5933000	 ldr         r3, [r3]
  0148c	e283306c	 add         r3, r3, #0x6C
  01490	e5933000	 ldr         r3, [r3]
  01494	e58d3018	 str         r3, [sp, #0x18]

; 691  :     dwRegVal = ( dwRegVal & 0x03ffffff ) | 0x54000000;

  01498	e59d2018	 ldr         r2, [sp, #0x18]
  0149c	e3e0333f	 mvn         r3, #0x3F, 6
  014a0	e0023003	 and         r3, r2, r3
  014a4	e3833315	 orr         r3, r3, #0x15, 6
  014a8	e58d3018	 str         r3, [sp, #0x18]

; 692  :     pHardwareContext->pGPIORegisters->GAFR3_L = dwRegVal;

  014ac	e59d3014	 ldr         r3, [sp, #0x14]
  014b0	e5933000	 ldr         r3, [r3]
  014b4	e283206c	 add         r2, r3, #0x6C
  014b8	e59d3018	 ldr         r3, [sp, #0x18]
  014bc	e5823000	 str         r3, [r2]

; 693  : 
; 694  : #ifdef DEBUG
; 695  :     DumpRegisters( pHardwareContext );

  014c0	e59d0014	 ldr         r0, [sp, #0x14]
  014c4	eb000000	 bl          DumpRegisters

; 696  :     DumpGPIORegisters( pHardwareContext );

  014c8	e59d0014	 ldr         r0, [sp, #0x14]
  014cc	eb000000	 bl          DumpGPIORegisters

; 697  : #endif
; 698  : 
; 699  :     // allocate the interrupt event
; 700  :     pHardwareContext->hControllerInterruptEvent = CreateEvent(NULL, FALSE, FALSE,NULL);

  014d0	e3a03000	 mov         r3, #0
  014d4	e3a02000	 mov         r2, #0
  014d8	e3a01000	 mov         r1, #0
  014dc	e3a00000	 mov         r0, #0
  014e0	eb000000	 bl          CreateEventW
  014e4	e58d012c	 str         r0, [sp, #0x12C]
  014e8	e59d3014	 ldr         r3, [sp, #0x14]
  014ec	e2832030	 add         r2, r3, #0x30
  014f0	e59d312c	 ldr         r3, [sp, #0x12C]
  014f4	e5823000	 str         r3, [r2]

; 701  :     
; 702  :     if (NULL == pHardwareContext->hControllerInterruptEvent) {

  014f8	e59d3014	 ldr         r3, [sp, #0x14]
  014fc	e2833030	 add         r3, r3, #0x30
  01500	e5933000	 ldr         r3, [r3]
  01504	e3530000	 cmp         r3, #0
  01508	1a000002	 bne         |$LN20@SDInitiali|

; 703  :         status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  0150c	e3a0313b	 mov         r3, #0x3B, 2
  01510	e58d3038	 str         r3, [sp, #0x38]

; 704  :         goto exitInit;

  01514	ea0001d0	 b           |$exitInit$43528|
  01518		 |$LN20@SDInitiali|

; 705  :     }
; 706  : 
; 707  :         // convert the hardware SD/MMC controller interrupt IRQ into a logical SYSINTR value
; 708  :     dwSDIOIrq = pHardwareContext->dwSDMMCIrq;

  01518	e59d3014	 ldr         r3, [sp, #0x14]
  0151c	e2833028	 add         r3, r3, #0x28
  01520	e5933000	 ldr         r3, [r3]
  01524	e58d3044	 str         r3, [sp, #0x44]

; 709  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &dwSDIOIrq, sizeof(DWORD), &(pHardwareContext->dwSysintrSDMMC), sizeof(DWORD), NULL))

  01528	e3a03000	 mov         r3, #0
  0152c	e58d3004	 str         r3, [sp, #4]
  01530	e3a03004	 mov         r3, #4
  01534	e58d3000	 str         r3, [sp]
  01538	e59d3014	 ldr         r3, [sp, #0x14]
  0153c	e283302c	 add         r3, r3, #0x2C
  01540	e3a02004	 mov         r2, #4
  01544	e28d1044	 add         r1, sp, #0x44
  01548	e59f0760	 ldr         r0, [pc, #0x760]
  0154c	eb000000	 bl          KernelIoControl
  01550	e58d0130	 str         r0, [sp, #0x130]
  01554	e59d3130	 ldr         r3, [sp, #0x130]
  01558	e3530000	 cmp         r3, #0
  0155c	1a00000f	 bne         |$LN19@SDInitiali|

; 710  :     {
; 711  :         // invalid SDIO SYSINTR value!
; 712  :         DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("Error obtaining SDIO SYSINTR value!\n")));

  01560	e59f372c	 ldr         r3, [pc, #0x72C]
  01564	e5933440	 ldr         r3, [r3, #0x440]
  01568	e3130902	 tst         r3, #2, 18
  0156c	0a000004	 beq         |$LN38@SDInitiali|
  01570	e59f073c	 ldr         r0, [pc, #0x73C]
  01574	eb000000	 bl          NKDbgPrintfW
  01578	e3a03001	 mov         r3, #1
  0157c	e58d3134	 str         r3, [sp, #0x134]
  01580	ea000001	 b           |$LN39@SDInitiali|
  01584		 |$LN38@SDInitiali|
  01584	e3a03000	 mov         r3, #0
  01588	e58d3134	 str         r3, [sp, #0x134]
  0158c		 |$LN39@SDInitiali|

; 713  :         pHardwareContext->dwSysintrSDMMC = SYSINTR_UNDEFINED;

  0158c	e59d3014	 ldr         r3, [sp, #0x14]
  01590	e283202c	 add         r2, r3, #0x2C
  01594	e3e03000	 mvn         r3, #0
  01598	e5823000	 str         r3, [r2]

; 714  :         goto exitInit;

  0159c	ea0001ae	 b           |$exitInit$43528|
  015a0		 |$LN19@SDInitiali|

; 715  :     }
; 716  : 
; 717  :         // initialize the interrupt event
; 718  :     if (!InterruptInitialize (pHardwareContext->dwSysintrSDMMC,
; 719  :                               pHardwareContext->hControllerInterruptEvent,
; 720  :                               NULL,
; 721  :                               0)) {

  015a0	e3a03000	 mov         r3, #0
  015a4	e3a02000	 mov         r2, #0
  015a8	e59d1014	 ldr         r1, [sp, #0x14]
  015ac	e2811030	 add         r1, r1, #0x30
  015b0	e5911000	 ldr         r1, [r1]
  015b4	e59d0014	 ldr         r0, [sp, #0x14]
  015b8	e280002c	 add         r0, r0, #0x2C
  015bc	e5900000	 ldr         r0, [r0]
  015c0	eb000000	 bl          InterruptInitialize
  015c4	e58d0138	 str         r0, [sp, #0x138]
  015c8	e59d3138	 ldr         r3, [sp, #0x138]
  015cc	e3530000	 cmp         r3, #0
  015d0	1a000002	 bne         |$LN18@SDInitiali|

; 722  :         status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  015d4	e3a0313b	 mov         r3, #0x3B, 2
  015d8	e58d3038	 str         r3, [sp, #0x38]

; 723  :         goto exitInit;

  015dc	ea00019e	 b           |$exitInit$43528|
  015e0		 |$LN18@SDInitiali|

; 724  :     }
; 725  : 
; 726  :     if( pHardwareContext->dwDmaChannel != 0xffffffff )

  015e0	e59d3014	 ldr         r3, [sp, #0x14]
  015e4	e2833c0a	 add         r3, r3, #0xA, 24
  015e8	e28330a4	 add         r3, r3, #0xA4
  015ec	e5933000	 ldr         r3, [r3]
  015f0	e3730001	 cmn         r3, #1
  015f4	0a00017a	 beq         |$LN17@SDInitiali|

; 727  :     {
; 728  :         // allocate the DMA interrupt event
; 729  :         pHardwareContext->hDMAInterruptEvent = CreateEvent(NULL, FALSE, FALSE,NULL);

  015f8	e3a03000	 mov         r3, #0
  015fc	e3a02000	 mov         r2, #0
  01600	e3a01000	 mov         r1, #0
  01604	e3a00000	 mov         r0, #0
  01608	eb000000	 bl          CreateEventW
  0160c	e58d013c	 str         r0, [sp, #0x13C]
  01610	e59d3014	 ldr         r3, [sp, #0x14]
  01614	e2833c0a	 add         r3, r3, #0xA, 24
  01618	e2832098	 add         r2, r3, #0x98
  0161c	e59d313c	 ldr         r3, [sp, #0x13C]
  01620	e5823000	 str         r3, [r2]

; 730  : 
; 731  :         if( pHardwareContext->dwDmaSysIntr == SYSINTR_UNDEFINED )

  01624	e59d3014	 ldr         r3, [sp, #0x14]
  01628	e2833ea9	 add         r3, r3, #0xA9, 28
  0162c	e5933000	 ldr         r3, [r3]
  01630	e3730001	 cmn         r3, #1
  01634	1a000024	 bne         |$LN16@SDInitiali|

; 732  :         {
; 733  :                 // convert the hardware DMA controller interrupt IRQ into a logical SYSINTR value
; 734  :             DWORD dwDMAIrq = pHardwareContext->dwDmaIRQ;

  01638	e59d3014	 ldr         r3, [sp, #0x14]
  0163c	e2833c0a	 add         r3, r3, #0xA, 24
  01640	e283308c	 add         r3, r3, #0x8C
  01644	e5933000	 ldr         r3, [r3]
  01648	e58d3048	 str         r3, [sp, #0x48]

; 735  :             if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &dwDMAIrq, sizeof(DWORD), &(pHardwareContext->dwDmaSysIntr), sizeof(DWORD), NULL))

  0164c	e3a03000	 mov         r3, #0
  01650	e58d3004	 str         r3, [sp, #4]
  01654	e3a03004	 mov         r3, #4
  01658	e58d3000	 str         r3, [sp]
  0165c	e59d3014	 ldr         r3, [sp, #0x14]
  01660	e2833ea9	 add         r3, r3, #0xA9, 28
  01664	e3a02004	 mov         r2, #4
  01668	e28d1048	 add         r1, sp, #0x48
  0166c	e59f063c	 ldr         r0, [pc, #0x63C]
  01670	eb000000	 bl          KernelIoControl
  01674	e58d0140	 str         r0, [sp, #0x140]
  01678	e59d3140	 ldr         r3, [sp, #0x140]
  0167c	e3530000	 cmp         r3, #0
  01680	1a000011	 bne         |$LN15@SDInitiali|

; 736  :             {
; 737  :                 // invalid SDIO SYSINTR value!
; 738  :                 DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("Error obtaining DMA SYSINTR value!\n")));

  01684	e59f3608	 ldr         r3, [pc, #0x608]
  01688	e5933440	 ldr         r3, [r3, #0x440]
  0168c	e3130902	 tst         r3, #2, 18
  01690	0a000004	 beq         |$LN40@SDInitiali|
  01694	e59f0610	 ldr         r0, [pc, #0x610]
  01698	eb000000	 bl          NKDbgPrintfW
  0169c	e3a03001	 mov         r3, #1
  016a0	e58d3144	 str         r3, [sp, #0x144]
  016a4	ea000001	 b           |$LN41@SDInitiali|
  016a8		 |$LN40@SDInitiali|
  016a8	e3a03000	 mov         r3, #0
  016ac	e58d3144	 str         r3, [sp, #0x144]
  016b0		 |$LN41@SDInitiali|

; 739  :                 pHardwareContext->dwDmaSysIntr = SYSINTR_UNDEFINED;

  016b0	e59d3014	 ldr         r3, [sp, #0x14]
  016b4	e2832ea9	 add         r2, r3, #0xA9, 28
  016b8	e3e03000	 mvn         r3, #0
  016bc	e5823000	 str         r3, [r2]

; 740  :                 status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  016c0	e3a0313b	 mov         r3, #0x3B, 2
  016c4	e58d3038	 str         r3, [sp, #0x38]

; 741  :                 goto exitInit;

  016c8	ea000163	 b           |$exitInit$43528|
  016cc		 |$LN15@SDInitiali|
  016cc		 |$LN16@SDInitiali|

; 742  :             }
; 743  :         }
; 744  : 
; 745  :         // allocate the DMA data & descriptors buffers
; 746  :         if( pHardwareContext->dwDmaBufferSize )

  016cc	e59d3014	 ldr         r3, [sp, #0x14]
  016d0	e2833088	 add         r3, r3, #0x88
  016d4	e5933000	 ldr         r3, [r3]
  016d8	e3530000	 cmp         r3, #0
  016dc	0a000073	 beq         |$LN14@SDInitiali|

; 747  :         {
; 748  :             DMA_ADAPTER_OBJECT dmaAdapter;
; 749  :             dmaAdapter.ObjectSize = sizeof(dmaAdapter);

  016e0	e3a0300c	 mov         r3, #0xC
  016e4	e1cd34bc	 strh        r3, [sp, #0x4C]

; 750  :             dmaAdapter.InterfaceType = Internal;

  016e8	e3a03000	 mov         r3, #0
  016ec	e58d3050	 str         r3, [sp, #0x50]

; 751  :             dmaAdapter.BusNumber = 0;

  016f0	e3a03000	 mov         r3, #0
  016f4	e58d3054	 str         r3, [sp, #0x54]

; 752  :             pHardwareContext->pDMABuffer = (PBYTE)HalAllocateCommonBuffer( &dmaAdapter, 
; 753  :                                                                            pHardwareContext->dwDmaBufferSize,
; 754  :                                                                            &pHardwareContext->pDMABufferPhys,
; 755  :                                                                            FALSE );

  016f8	e3a03000	 mov         r3, #0
  016fc	e59d2014	 ldr         r2, [sp, #0x14]
  01700	e2822070	 add         r2, r2, #0x70
  01704	e59d1014	 ldr         r1, [sp, #0x14]
  01708	e2811088	 add         r1, r1, #0x88
  0170c	e5911000	 ldr         r1, [r1]
  01710	e28d004c	 add         r0, sp, #0x4C
  01714	eb000000	 bl          HalAllocateCommonBuffer
  01718	e58d0148	 str         r0, [sp, #0x148]
  0171c	e59d3014	 ldr         r3, [sp, #0x14]
  01720	e2832068	 add         r2, r3, #0x68
  01724	e59d3148	 ldr         r3, [sp, #0x148]
  01728	e5823000	 str         r3, [r2]

; 756  :             if( pHardwareContext->pDMABuffer == NULL )

  0172c	e59d3014	 ldr         r3, [sp, #0x14]
  01730	e2833068	 add         r3, r3, #0x68
  01734	e5933000	 ldr         r3, [r3]
  01738	e3530000	 cmp         r3, #0
  0173c	1a00000f	 bne         |$LN13@SDInitiali|

; 757  :             {
; 758  :                 DEBUGMSG(SDCARD_ZONE_WARN, (TEXT("SHCDriver: - Unable to allocate memory for DMA buffers!\r\n")));

  01740	e59f354c	 ldr         r3, [pc, #0x54C]
  01744	e5933440	 ldr         r3, [r3, #0x440]
  01748	e3130901	 tst         r3, #1, 18
  0174c	0a000004	 beq         |$LN42@SDInitiali|
  01750	e59f0550	 ldr         r0, [pc, #0x550]
  01754	eb000000	 bl          NKDbgPrintfW
  01758	e3a03001	 mov         r3, #1
  0175c	e58d314c	 str         r3, [sp, #0x14C]
  01760	ea000001	 b           |$LN43@SDInitiali|
  01764		 |$LN42@SDInitiali|
  01764	e3a03000	 mov         r3, #0
  01768	e58d314c	 str         r3, [sp, #0x14C]
  0176c		 |$LN43@SDInitiali|

; 759  :                 pHardwareContext->dwDmaBufferSize = 0;

  0176c	e59d3014	 ldr         r3, [sp, #0x14]
  01770	e2832088	 add         r2, r3, #0x88
  01774	e3a03000	 mov         r3, #0
  01778	e5823000	 str         r3, [r2]

; 760  :             }
; 761  :             else

  0177c	ea00004b	 b           |$LN12@SDInitiali|
  01780		 |$LN13@SDInitiali|

; 762  :             { // allocate DMA descriptors
; 763  :                 DWORD dwDescriptorsSize = pHardwareContext->dwDmaBufferSize / pHardwareContext->systemInfo.dwPageSize;

  01780	e59d3014	 ldr         r3, [sp, #0x14]
  01784	e2832088	 add         r2, r3, #0x88
  01788	e59d3014	 ldr         r3, [sp, #0x14]
  0178c	e2833048	 add         r3, r3, #0x48
  01790	e5921000	 ldr         r1, [r2]
  01794	e5930000	 ldr         r0, [r3]
  01798	eb000000	 bl          __rt_udiv
  0179c	e58d0058	 str         r0, [sp, #0x58]

; 764  :                 if( pHardwareContext->dwDmaBufferSize % pHardwareContext->systemInfo.dwPageSize )

  017a0	e59d3014	 ldr         r3, [sp, #0x14]
  017a4	e2832088	 add         r2, r3, #0x88
  017a8	e59d3014	 ldr         r3, [sp, #0x14]
  017ac	e2833048	 add         r3, r3, #0x48
  017b0	e5921000	 ldr         r1, [r2]
  017b4	e5930000	 ldr         r0, [r3]
  017b8	eb000000	 bl          __rt_udiv
  017bc	e3510000	 cmp         r1, #0
  017c0	0a000002	 beq         |$LN11@SDInitiali|

; 765  :                 {
; 766  :                     dwDescriptorsSize++;

  017c4	e59d3058	 ldr         r3, [sp, #0x58]
  017c8	e2833001	 add         r3, r3, #1
  017cc	e58d3058	 str         r3, [sp, #0x58]
  017d0		 |$LN11@SDInitiali|

; 767  :                 }
; 768  :                 dwDescriptorsSize *= sizeof(DMADescriptorChannelType);

  017d0	e59d2058	 ldr         r2, [sp, #0x58]
  017d4	e3a03010	 mov         r3, #0x10
  017d8	e0030392	 mul         r3, r2, r3
  017dc	e58d3058	 str         r3, [sp, #0x58]

; 769  :                 
; 770  :                 pHardwareContext->pDMADescriptors = (volatile DMADescriptorChannelType*)HalAllocateCommonBuffer( &dmaAdapter, 
; 771  :                                                                                dwDescriptorsSize,
; 772  :                                                                                &pHardwareContext->pDMADescriptorsPhys,
; 773  :                                                                                FALSE );

  017e0	e3a03000	 mov         r3, #0
  017e4	e59d2014	 ldr         r2, [sp, #0x14]
  017e8	e2822080	 add         r2, r2, #0x80
  017ec	e59d1058	 ldr         r1, [sp, #0x58]
  017f0	e28d004c	 add         r0, sp, #0x4C
  017f4	eb000000	 bl          HalAllocateCommonBuffer
  017f8	e58d0150	 str         r0, [sp, #0x150]
  017fc	e59d3014	 ldr         r3, [sp, #0x14]
  01800	e2832078	 add         r2, r3, #0x78
  01804	e59d3150	 ldr         r3, [sp, #0x150]
  01808	e5823000	 str         r3, [r2]

; 774  :                 if( pHardwareContext->pDMADescriptors == NULL )

  0180c	e59d3014	 ldr         r3, [sp, #0x14]
  01810	e2833078	 add         r3, r3, #0x78
  01814	e5933000	 ldr         r3, [r3]
  01818	e3530000	 cmp         r3, #0
  0181c	1a000023	 bne         |$LN10@SDInitiali|

; 775  :                 {
; 776  :                     DEBUGMSG(SDCARD_ZONE_WARN, (TEXT("SHCDriver: - Unable to allocate memory for DMA descriptors!\r\n")));

  01820	e59f346c	 ldr         r3, [pc, #0x46C]
  01824	e5933440	 ldr         r3, [r3, #0x440]
  01828	e3130901	 tst         r3, #1, 18
  0182c	0a000004	 beq         |$LN44@SDInitiali|
  01830	e59f046c	 ldr         r0, [pc, #0x46C]
  01834	eb000000	 bl          NKDbgPrintfW
  01838	e3a03001	 mov         r3, #1
  0183c	e58d3154	 str         r3, [sp, #0x154]
  01840	ea000001	 b           |$LN45@SDInitiali|
  01844		 |$LN44@SDInitiali|
  01844	e3a03000	 mov         r3, #0
  01848	e58d3154	 str         r3, [sp, #0x154]
  0184c		 |$LN45@SDInitiali|

; 777  :                     HalFreeCommonBuffer( &dmaAdapter, 
; 778  :                                            pHardwareContext->dwDmaBufferSize,
; 779  :                                            pHardwareContext->pDMABufferPhys,
; 780  :                                            pHardwareContext->pDMABuffer,
; 781  :                                            FALSE );

  0184c	e3a03000	 mov         r3, #0
  01850	e58d3004	 str         r3, [sp, #4]
  01854	e59d3014	 ldr         r3, [sp, #0x14]
  01858	e2833068	 add         r3, r3, #0x68
  0185c	e5933000	 ldr         r3, [r3]
  01860	e58d3000	 str         r3, [sp]
  01864	e59d3014	 ldr         r3, [sp, #0x14]
  01868	e2833070	 add         r3, r3, #0x70
  0186c	e58d3158	 str         r3, [sp, #0x158]
  01870	e59d3158	 ldr         r3, [sp, #0x158]
  01874	e5932000	 ldr         r2, [r3]
  01878	e5933004	 ldr         r3, [r3, #4]
  0187c	e59d1014	 ldr         r1, [sp, #0x14]
  01880	e2811088	 add         r1, r1, #0x88
  01884	e5911000	 ldr         r1, [r1]
  01888	e28d004c	 add         r0, sp, #0x4C
  0188c	eb000000	 bl          HalFreeCommonBuffer

; 782  :                     pHardwareContext->pDMABuffer = NULL;

  01890	e59d3014	 ldr         r3, [sp, #0x14]
  01894	e2832068	 add         r2, r3, #0x68
  01898	e3a03000	 mov         r3, #0
  0189c	e5823000	 str         r3, [r2]

; 783  :                     pHardwareContext->dwDmaBufferSize = 0;

  018a0	e59d3014	 ldr         r3, [sp, #0x14]
  018a4	e2832088	 add         r2, r3, #0x88
  018a8	e3a03000	 mov         r3, #0
  018ac	e5823000	 str         r3, [r2]
  018b0		 |$LN10@SDInitiali|
  018b0		 |$LN12@SDInitiali|
  018b0		 |$LN14@SDInitiali|

; 784  :                 }
; 785  :             }
; 786  :         }
; 787  : 
; 788  :             // install the DMA ISR handler
; 789  :         if( pHardwareContext->wszDmaIsrDll[0] )

  018b0	e59d3014	 ldr         r3, [sp, #0x14]
  018b4	e283308c	 add         r3, r3, #0x8C
  018b8	e1d330b0	 ldrh        r3, [r3]
  018bc	e3530000	 cmp         r3, #0
  018c0	0a0000a0	 beq         |$LN9@SDInitiali|

; 790  :         {
; 791  :             GIISR_INFO Info;
; 792  :             PVOID PhysAddr;
; 793  :             DWORD inIoSpace = 0;    // io space

  018c4	e3a03000	 mov         r3, #0
  018c8	e58d3064	 str         r3, [sp, #0x64]

; 794  :             PHYSICAL_ADDRESS DmaRegisterAddress = {DMA_INTERRUPT_REGISTER, 0}; 

  018cc	e3a03101	 mov         r3, #1, 2
  018d0	e38330f0	 orr         r3, r3, #0xF0
  018d4	e58d305c	 str         r3, [sp, #0x5C]
  018d8	e3a03000	 mov         r3, #0
  018dc	e58d3060	 str         r3, [sp, #0x60]

; 795  :             
; 796  :             pHardwareContext->hDMAIsrHandler = LoadIntChainHandler(pHardwareContext->wszDmaIsrDll, 
; 797  :                                                                      pHardwareContext->wszDmaIsrHandler,
; 798  :                                                                      (BYTE)pHardwareContext->dwDmaIRQ);

  018e0	e59d3014	 ldr         r3, [sp, #0x14]
  018e4	e2833c0a	 add         r3, r3, #0xA, 24
  018e8	e283308c	 add         r3, r3, #0x8C
  018ec	e5933000	 ldr         r3, [r3]
  018f0	e20320ff	 and         r2, r3, #0xFF
  018f4	e59d3014	 ldr         r3, [sp, #0x14]
  018f8	e2833b02	 add         r3, r3, #2, 22
  018fc	e283108c	 add         r1, r3, #0x8C
  01900	e59d3014	 ldr         r3, [sp, #0x14]
  01904	e283008c	 add         r0, r3, #0x8C
  01908	eb000000	 bl          LoadIntChainHandler
  0190c	e58d015c	 str         r0, [sp, #0x15C]
  01910	e59d3014	 ldr         r3, [sp, #0x14]
  01914	e2833c0a	 add         r3, r3, #0xA, 24
  01918	e2832094	 add         r2, r3, #0x94
  0191c	e59d315c	 ldr         r3, [sp, #0x15C]
  01920	e5823000	 str         r3, [r2]

; 799  :             if (pHardwareContext->hDMAIsrHandler == NULL) {

  01924	e59d3014	 ldr         r3, [sp, #0x14]
  01928	e2833c0a	 add         r3, r3, #0xA, 24
  0192c	e2833094	 add         r3, r3, #0x94
  01930	e5933000	 ldr         r3, [r3]
  01934	e3530000	 cmp         r3, #0
  01938	1a000017	 bne         |$LN8@SDInitiali|

; 800  :                 DEBUGMSG(SDCARD_ZONE_ERROR, (TEXT("LoadIntChainHandler (%s, %s, %d) failed!\r\n"),
; 801  :                                             pHardwareContext->wszDmaIsrDll, 
; 802  :                                             pHardwareContext->wszDmaIsrHandler,
; 803  :                                             (BYTE)pHardwareContext->dwDmaIRQ));

  0193c	e59f3350	 ldr         r3, [pc, #0x350]
  01940	e5933440	 ldr         r3, [r3, #0x440]
  01944	e3130902	 tst         r3, #2, 18
  01948	0a00000e	 beq         |$LN46@SDInitiali|
  0194c	e59d3014	 ldr         r3, [sp, #0x14]
  01950	e2833c0a	 add         r3, r3, #0xA, 24
  01954	e283308c	 add         r3, r3, #0x8C
  01958	e5933000	 ldr         r3, [r3]
  0195c	e20330ff	 and         r3, r3, #0xFF
  01960	e59d2014	 ldr         r2, [sp, #0x14]
  01964	e2822b02	 add         r2, r2, #2, 22
  01968	e282208c	 add         r2, r2, #0x8C
  0196c	e59d1014	 ldr         r1, [sp, #0x14]
  01970	e281108c	 add         r1, r1, #0x8C
  01974	e59f0324	 ldr         r0, [pc, #0x324]
  01978	eb000000	 bl          NKDbgPrintfW
  0197c	e3a03001	 mov         r3, #1
  01980	e58d3160	 str         r3, [sp, #0x160]
  01984	ea000001	 b           |$LN47@SDInitiali|
  01988		 |$LN46@SDInitiali|
  01988	e3a03000	 mov         r3, #0
  0198c	e58d3160	 str         r3, [sp, #0x160]
  01990		 |$LN47@SDInitiali|

; 804  :                 status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  01990	e3a0313b	 mov         r3, #0x3B, 2
  01994	e58d3038	 str         r3, [sp, #0x38]

; 805  :                 goto exitInit;

  01998	ea0000af	 b           |$exitInit$43528|
  0199c		 |$LN8@SDInitiali|

; 806  :             }
; 807  : 
; 808  :             if (!BusTransBusAddrToStatic(pHardwareContext->hBusAccessHandle, Internal, 0, DmaRegisterAddress, sizeof(DWORD), &inIoSpace, &PhysAddr)) {

  0199c	e28d3068	 add         r3, sp, #0x68
  019a0	e58d300c	 str         r3, [sp, #0xC]
  019a4	e28d3064	 add         r3, sp, #0x64
  019a8	e58d3008	 str         r3, [sp, #8]
  019ac	e3a03004	 mov         r3, #4
  019b0	e58d3004	 str         r3, [sp, #4]
  019b4	e28d0000	 add         r0, sp, #0
  019b8	e28d1060	 add         r1, sp, #0x60
  019bc	e3a02004	 mov         r2, #4
  019c0	eb000000	 bl          memcpy
  019c4	e59d305c	 ldr         r3, [sp, #0x5C]
  019c8	e3a02000	 mov         r2, #0
  019cc	e3a01000	 mov         r1, #0
  019d0	e59d0014	 ldr         r0, [sp, #0x14]
  019d4	e2800014	 add         r0, r0, #0x14
  019d8	e5900000	 ldr         r0, [r0]
  019dc	eb000000	 bl          BusTransBusAddrToStatic
  019e0	e58d0164	 str         r0, [sp, #0x164]
  019e4	e59d3164	 ldr         r3, [sp, #0x164]
  019e8	e3530000	 cmp         r3, #0
  019ec	1a00000d	 bne         |$LN7@SDInitiali|

; 809  :                 DEBUGMSG(SDCARD_ZONE_ERROR, (L"SDHC: Failed TransBusAddrToStatic\r\n"));

  019f0	e59f329c	 ldr         r3, [pc, #0x29C]
  019f4	e5933440	 ldr         r3, [r3, #0x440]
  019f8	e3130902	 tst         r3, #2, 18
  019fc	0a000004	 beq         |$LN48@SDInitiali|
  01a00	e59f0294	 ldr         r0, [pc, #0x294]
  01a04	eb000000	 bl          NKDbgPrintfW
  01a08	e3a03001	 mov         r3, #1
  01a0c	e58d3168	 str         r3, [sp, #0x168]
  01a10	ea000001	 b           |$LN49@SDInitiali|
  01a14		 |$LN48@SDInitiali|
  01a14	e3a03000	 mov         r3, #0
  01a18	e58d3168	 str         r3, [sp, #0x168]
  01a1c		 |$LN49@SDInitiali|

; 810  :                 status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  01a1c	e3a0313b	 mov         r3, #0x3B, 2
  01a20	e58d3038	 str         r3, [sp, #0x38]

; 811  :                 goto exitInit;

  01a24	ea00008c	 b           |$exitInit$43528|
  01a28		 |$LN7@SDInitiali|

; 812  :             }
; 813  :             
; 814  :             DEBUGMSG(SDCARD_ZONE_INIT, (L"SDHC: Installed ISR handler, Dll = '%s', Handler = '%s', Irq = %d, PhysAddr = 0x%x\r\n", 
; 815  :                 pHardwareContext->wszDmaIsrDll, pHardwareContext->wszDmaIsrHandler, pHardwareContext->dwDmaIRQ, PhysAddr));

  01a28	e59f3264	 ldr         r3, [pc, #0x264]
  01a2c	e5933440	 ldr         r3, [r3, #0x440]
  01a30	e3130a02	 tst         r3, #2, 20
  01a34	0a00000f	 beq         |$LN50@SDInitiali|
  01a38	e59d3068	 ldr         r3, [sp, #0x68]
  01a3c	e58d3000	 str         r3, [sp]
  01a40	e59d3014	 ldr         r3, [sp, #0x14]
  01a44	e2833c0a	 add         r3, r3, #0xA, 24
  01a48	e283308c	 add         r3, r3, #0x8C
  01a4c	e5933000	 ldr         r3, [r3]
  01a50	e59d2014	 ldr         r2, [sp, #0x14]
  01a54	e2822b02	 add         r2, r2, #2, 22
  01a58	e282208c	 add         r2, r2, #0x8C
  01a5c	e59d1014	 ldr         r1, [sp, #0x14]
  01a60	e281108c	 add         r1, r1, #0x8C
  01a64	e59f022c	 ldr         r0, [pc, #0x22C]
  01a68	eb000000	 bl          NKDbgPrintfW
  01a6c	e3a03001	 mov         r3, #1
  01a70	e58d316c	 str         r3, [sp, #0x16C]
  01a74	ea000001	 b           |$LN51@SDInitiali|
  01a78		 |$LN50@SDInitiali|
  01a78	e3a03000	 mov         r3, #0
  01a7c	e58d316c	 str         r3, [sp, #0x16C]
  01a80		 |$LN51@SDInitiali|

; 816  : 
; 817  :             // Set up ISR handler
; 818  :             Info.SysIntr = pHardwareContext->dwDmaSysIntr;

  01a80	e59d3014	 ldr         r3, [sp, #0x14]
  01a84	e2833ea9	 add         r3, r3, #0xA9, 28
  01a88	e5933000	 ldr         r3, [r3]
  01a8c	e58d306c	 str         r3, [sp, #0x6C]

; 819  :             Info.CheckPort = TRUE;

  01a90	e3a03001	 mov         r3, #1
  01a94	e58d3070	 str         r3, [sp, #0x70]

; 820  :             Info.PortIsIO = FALSE;

  01a98	e3a03000	 mov         r3, #0
  01a9c	e58d3074	 str         r3, [sp, #0x74]

; 821  :             Info.UseMaskReg = FALSE;

  01aa0	e3a03000	 mov         r3, #0
  01aa4	e58d3078	 str         r3, [sp, #0x78]

; 822  :             Info.PortAddr = (DWORD)PhysAddr;

  01aa8	e59d3068	 ldr         r3, [sp, #0x68]
  01aac	e58d307c	 str         r3, [sp, #0x7C]

; 823  :             Info.PortSize = sizeof(DWORD);

  01ab0	e3a03004	 mov         r3, #4
  01ab4	e58d3080	 str         r3, [sp, #0x80]

; 824  :             Info.Mask = 1 << pHardwareContext->dwDmaChannel;

  01ab8	e59d3014	 ldr         r3, [sp, #0x14]
  01abc	e2833c0a	 add         r3, r3, #0xA, 24
  01ac0	e28330a4	 add         r3, r3, #0xA4
  01ac4	e5932000	 ldr         r2, [r3]
  01ac8	e3a03001	 mov         r3, #1
  01acc	e1a03213	 mov         r3, r3, lsl r2
  01ad0	e58d3084	 str         r3, [sp, #0x84]

; 825  :             
; 826  :             if (!KernelLibIoControl(pHardwareContext->hDMAIsrHandler, IOCTL_GIISR_INFO, &Info, sizeof(Info), NULL, 0, NULL)) {

  01ad4	e3a03000	 mov         r3, #0
  01ad8	e58d3008	 str         r3, [sp, #8]
  01adc	e3a03000	 mov         r3, #0
  01ae0	e58d3004	 str         r3, [sp, #4]
  01ae4	e3a03000	 mov         r3, #0
  01ae8	e58d3000	 str         r3, [sp]
  01aec	e3a03020	 mov         r3, #0x20
  01af0	e28d206c	 add         r2, sp, #0x6C
  01af4	e3a01c01	 mov         r1, #1, 24
  01af8	e59d0014	 ldr         r0, [sp, #0x14]
  01afc	e2800c0a	 add         r0, r0, #0xA, 24
  01b00	e2800094	 add         r0, r0, #0x94
  01b04	e5900000	 ldr         r0, [r0]
  01b08	eb000000	 bl          KernelLibIoControl
  01b0c	e58d0170	 str         r0, [sp, #0x170]
  01b10	e59d3170	 ldr         r3, [sp, #0x170]
  01b14	e3530000	 cmp         r3, #0
  01b18	1a00000a	 bne         |$LN6@SDInitiali|

; 827  :                 DEBUGMSG(SDCARD_ZONE_ERROR, (L"SDHC: KernelLibIoControl call failed.\r\n"));

  01b1c	e59f3170	 ldr         r3, [pc, #0x170]
  01b20	e5933440	 ldr         r3, [r3, #0x440]
  01b24	e3130902	 tst         r3, #2, 18
  01b28	0a000004	 beq         |$LN52@SDInitiali|
  01b2c	e59f015c	 ldr         r0, [pc, #0x15C]
  01b30	eb000000	 bl          NKDbgPrintfW
  01b34	e3a03001	 mov         r3, #1
  01b38	e58d3174	 str         r3, [sp, #0x174]
  01b3c	ea000001	 b           |$LN53@SDInitiali|
  01b40		 |$LN52@SDInitiali|
  01b40	e3a03000	 mov         r3, #0
  01b44	e58d3174	 str         r3, [sp, #0x174]
  01b48		 |$LN53@SDInitiali|
  01b48		 |$LN6@SDInitiali|
  01b48		 |$LN9@SDInitiali|

; 828  :             }
; 829  :         }
; 830  : 
; 831  :             // initialize the DMA interrupt event
; 832  :         if (!InterruptInitialize (pHardwareContext->dwDmaSysIntr,
; 833  :                                   pHardwareContext->hDMAInterruptEvent,
; 834  :                                   NULL,
; 835  :                                   0)) {

  01b48	e3a03000	 mov         r3, #0
  01b4c	e3a02000	 mov         r2, #0
  01b50	e59d1014	 ldr         r1, [sp, #0x14]
  01b54	e2811c0a	 add         r1, r1, #0xA, 24
  01b58	e2811098	 add         r1, r1, #0x98
  01b5c	e5911000	 ldr         r1, [r1]
  01b60	e59d0014	 ldr         r0, [sp, #0x14]
  01b64	e2800ea9	 add         r0, r0, #0xA9, 28
  01b68	e5900000	 ldr         r0, [r0]
  01b6c	eb000000	 bl          InterruptInitialize
  01b70	e58d0178	 str         r0, [sp, #0x178]
  01b74	e59d3178	 ldr         r3, [sp, #0x178]
  01b78	e3530000	 cmp         r3, #0
  01b7c	1a000002	 bne         |$LN5@SDInitiali|

; 836  :             status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  01b80	e3a0313b	 mov         r3, #0x3B, 2
  01b84	e58d3038	 str         r3, [sp, #0x38]

; 837  :             goto exitInit;

  01b88	ea000033	 b           |$exitInit$43528|
  01b8c		 |$LN5@SDInitiali|

; 838  :         }
; 839  : 
; 840  :             // create the interrupt thread for controller interrupts
; 841  :         pHardwareContext->hDmaInterruptThread = CreateThread(NULL,
; 842  :                                                           0,
; 843  :                                                           (LPTHREAD_START_ROUTINE)SDDMAIstThread,
; 844  :                                                           pHardwareContext,
; 845  :                                                           0,
; 846  :                                                           &threadID);

  01b8c	e28d302c	 add         r3, sp, #0x2C
  01b90	e58d3004	 str         r3, [sp, #4]
  01b94	e3a03000	 mov         r3, #0
  01b98	e58d3000	 str         r3, [sp]
  01b9c	e59d3014	 ldr         r3, [sp, #0x14]
  01ba0	e59f20e4	 ldr         r2, [pc, #0xE4]
  01ba4	e3a01000	 mov         r1, #0
  01ba8	e3a00000	 mov         r0, #0
  01bac	eb000000	 bl          CreateThread
  01bb0	e58d017c	 str         r0, [sp, #0x17C]
  01bb4	e59d3014	 ldr         r3, [sp, #0x14]
  01bb8	e2832eaa	 add         r2, r3, #0xAA, 28
  01bbc	e59d317c	 ldr         r3, [sp, #0x17C]
  01bc0	e5823000	 str         r3, [r2]

; 847  : 
; 848  :         if (NULL == pHardwareContext->hDmaInterruptThread) {

  01bc4	e59d3014	 ldr         r3, [sp, #0x14]
  01bc8	e2833eaa	 add         r3, r3, #0xAA, 28
  01bcc	e5933000	 ldr         r3, [r3]
  01bd0	e3530000	 cmp         r3, #0
  01bd4	1a000002	 bne         |$LN4@SDInitiali|

; 849  :             status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  01bd8	e3a0313b	 mov         r3, #0x3B, 2
  01bdc	e58d3038	 str         r3, [sp, #0x38]

; 850  :             goto exitInit;

  01be0	ea00001d	 b           |$exitInit$43528|
  01be4		 |$LN4@SDInitiali|
  01be4		 |$LN17@SDInitiali|

; 851  :         }
; 852  :     }
; 853  : 
; 854  :         // create the interrupt thread for controller interrupts
; 855  :     pHardwareContext->hControllerInterruptThread = CreateThread(NULL,
; 856  :                                                       0,
; 857  :                                                       (LPTHREAD_START_ROUTINE)SDControllerIstThread,
; 858  :                                                       pHardwareContext,
; 859  :                                                       0,
; 860  :                                                       &threadID);

  01be4	e28d302c	 add         r3, sp, #0x2C
  01be8	e58d3004	 str         r3, [sp, #4]
  01bec	e3a03000	 mov         r3, #0
  01bf0	e58d3000	 str         r3, [sp]
  01bf4	e59d3014	 ldr         r3, [sp, #0x14]
  01bf8	e59f2088	 ldr         r2, [pc, #0x88]
  01bfc	e3a01000	 mov         r1, #0
  01c00	e3a00000	 mov         r0, #0
  01c04	eb000000	 bl          CreateThread
  01c08	e58d0180	 str         r0, [sp, #0x180]
  01c0c	e59d3014	 ldr         r3, [sp, #0x14]
  01c10	e2832034	 add         r2, r3, #0x34
  01c14	e59d3180	 ldr         r3, [sp, #0x180]
  01c18	e5823000	 str         r3, [r2]

; 861  : 
; 862  :     if (NULL == pHardwareContext->hControllerInterruptThread) {

  01c1c	e59d3014	 ldr         r3, [sp, #0x14]
  01c20	e2833034	 add         r3, r3, #0x34
  01c24	e5933000	 ldr         r3, [r3]
  01c28	e3530000	 cmp         r3, #0
  01c2c	1a000002	 bne         |$LN3@SDInitiali|

; 863  :         status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  01c30	e3a0313b	 mov         r3, #0x3B, 2
  01c34	e58d3038	 str         r3, [sp, #0x38]

; 864  :         goto exitInit;

  01c38	ea000007	 b           |$exitInit$43528|
  01c3c		 |$LN3@SDInitiali|

; 865  :     }
; 866  : 
; 867  :     if (!SetupCardDetectIST(pHardwareContext))

  01c3c	e59d0014	 ldr         r0, [sp, #0x14]
  01c40	eb000000	 bl          SetupCardDetectIST
  01c44	e58d0184	 str         r0, [sp, #0x184]
  01c48	e59d3184	 ldr         r3, [sp, #0x184]
  01c4c	e3530000	 cmp         r3, #0
  01c50	1a000001	 bne         |$LN2@SDInitiali|

; 868  :     {
; 869  :         status = SD_API_STATUS_INSUFFICIENT_RESOURCES;

  01c54	e3a0313b	 mov         r3, #0x3B, 2
  01c58	e58d3038	 str         r3, [sp, #0x38]
  01c5c		 |$LN2@SDInitiali|
  01c5c		 |$exitInit$43528|

; 870  :     }
; 871  : 
; 872  : exitInit:
; 873  : 
; 874  :     if (!SD_API_SUCCESS(status)) {

  01c5c	e59d3038	 ldr         r3, [sp, #0x38]
  01c60	e3530000	 cmp         r3, #0
  01c64	aa000001	 bge         |$LN1@SDInitiali|

; 875  :             // just call the deinit handler directly to cleanup
; 876  :         SDDeinitialize(pHCContext);

  01c68	e59d0190	 ldr         r0, [sp, #0x190]
  01c6c	eb000000	 bl          SDDeinitialize
  01c70		 |$LN1@SDInitiali|

; 877  :     }
; 878  : 
; 879  :     return status;

  01c70	e59d3038	 ldr         r3, [sp, #0x38]
  01c74	e58d3100	 str         r3, [sp, #0x100]

; 880  : 
; 881  : }

  01c78	e59d0100	 ldr         r0, [sp, #0x100]
  01c7c	e28ddf62	 add         sp, sp, #0x62, 30
  01c80	e89d6000	 ldmia       sp, {sp, lr}
  01c84	e12fff1e	 bx          lr
  01c88		 |$LN57@SDInitiali|
  01c88		 |$LN58@SDInitiali|
  01c88	00000000	 DCD         |SDControllerIstThread|
  01c8c		 |$LN59@SDInitiali|
  01c8c	00000000	 DCD         |SDDMAIstThread|
  01c90		 |$LN60@SDInitiali|
  01c90	00000000	 DCD         |??_C@_1FA@EOJFJPCL@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AAL?$AAi?$AAb?$AAI?$AAo?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?5?$AAc?$AAa?$AAl?$AAl?$AA?5?$AAf?$AAa@|
  01c94		 |$LN61@SDInitiali|
  01c94	00000000	 DCD         |dpCurSettings|
  01c98		 |$LN62@SDInitiali|
  01c98	00000000	 DCD         |??_C@_1KK@LKBDNCIG@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AAI?$AAS?$AAR?$AA?5?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?0?$AA?5?$AAD?$AAl?$AAl@|
  01c9c		 |$LN63@SDInitiali|
  01c9c	00000000	 DCD         |??_C@_1EI@PFNEGHPP@?$AAS?$AAD?$AAH?$AAC?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAB?$AAu?$AAs?$AAA?$AAd?$AAd?$AAr?$AAT?$AAo?$AAS?$AAt?$AAa?$AAt?$AAi@|
  01ca0		 |$LN64@SDInitiali|
  01ca0	00000000	 DCD         |??_C@_1FG@DEPGGMJO@?$AAL?$AAo?$AAa?$AAd?$AAI?$AAn?$AAt?$AAC?$AAh?$AAa?$AAi?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAs?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ@|
  01ca4		 |$LN65@SDInitiali|
  01ca4	00000000	 DCD         |??_C@_1HM@DAMLHJJL@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@|
  01ca8		 |$LN66@SDInitiali|
  01ca8	00000000	 DCD         |??_C@_1HE@OHPJHCNH@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5@|
  01cac		 |$LN67@SDInitiali|
  01cac	00000000	 DCD         |??_C@_1EI@LDNPJNO@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AAv?$AAa?$AAl?$AAu@|
  01cb0		 |$LN68@SDInitiali|
  01cb0	01010098	 DCD         0x1010098
  01cb4		 |$LN69@SDInitiali|
  01cb4	00000000	 DCD         |??_C@_1EK@JCICNJKB@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAb?$AAt?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AAv?$AAa?$AAl@|
  01cb8		 |$LN70@SDInitiali|
  01cb8	00000000	 DCD         |??_C@_1IO@JEGCJJP@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@|
  01cbc		 |$LN71@SDInitiali|
  01cbc	00000000	 DCD         |??_C@_1JC@GBFOPBHI@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@|
  01cc0		 |$LN72@SDInitiali|
  01cc0	00000000	 DCD         |??_C@_1IE@GMEMOOMN@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@|
  01cc4		 |$LN73@SDInitiali|
  01cc4	00000000	 DCD         |??_C@_1IA@MMBLLAKF@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@|
  01cc8		 |$LN74@SDInitiali|
  01cc8	00000000	 DCD         |??_C@_1IK@KIBEEEIH@?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAH?$AAa?$AAr?$AAd?$AAw?$AAa?$AAr?$AAe?$AA?3?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi@|
  01ccc		 |$M44865|

			 ENDP  ; |SDInitialize|

	EXPORT	|SDHCancelIoHandler|
	IMPORT	|LeaveCriticalSection|

  00048			 AREA	 |.pdata|, PDATA
|$T44891| DCD	|$LN5@SDHCancelI|
	DCD	0x40001f04
; Function compile flags: /Odtp

  01ccc			 AREA	 |.text|, CODE, ARM

  01ccc		 |SDHCancelIoHandler| PROC

; 898  : {

  01ccc		 |$LN5@SDHCancelI|
  01ccc	e1a0c00d	 mov         r12, sp
  01cd0	e92d0007	 stmdb       sp!, {r0 - r2}
  01cd4	e92d5000	 stmdb       sp!, {r12, lr}
  01cd8	e24dd008	 sub         sp, sp, #8
  01cdc		 |$M44888|

; 899  :     PSDH_HARDWARE_CONTEXT    pController;
; 900  : 
; 901  :         // for now, we should never get here because all requests are non-cancelable
; 902  :         // the hardware supports timeouts so it is impossible for the controller to get stuck
; 903  :     DEBUG_ASSERT(FALSE);

  01cdc	e3a03c03	 mov         r3, #3, 24
  01ce0	e3833087	 orr         r3, r3, #0x87
  01ce4	e59f2058	 ldr         r2, [pc, #0x58]
  01ce8	e59f1050	 ldr         r1, [pc, #0x50]
  01cec	e59f0048	 ldr         r0, [pc, #0x48]
  01cf0	eb000000	 bl          NKDbgPrintfW
  01cf4	e6000010	 __debugbreak_ce

; 904  : 
; 905  :         // get our extension 
; 906  :     pController = GetExtensionFromHCDContext(PSDH_HARDWARE_CONTEXT, pHCContext);

  01cf8	e59d3010	 ldr         r3, [sp, #0x10]
  01cfc	e283304c	 add         r3, r3, #0x4C
  01d00	e5933000	 ldr         r3, [r3]
  01d04	e58d3000	 str         r3, [sp]

; 907  : 
; 908  :         // --- Stop hardware, cancel the request!
; 909  : 
; 910  :         // release the lock before we complete the request
; 911  :     SDHCDReleaseHCLock(pHCContext);

  01d08	e59d3010	 ldr         r3, [sp, #0x10]
  01d0c	e2830024	 add         r0, r3, #0x24
  01d10	eb000000	 bl          LeaveCriticalSection

; 912  :  
; 913  :         // complete the request with a cancelled status
; 914  :     IndicateBusRequestComplete(pHCContext,
; 915  :                                     pRequest,
; 916  :                                     SD_API_STATUS_CANCELED);

  01d14	e3a0214f	 mov         r2, #0x4F, 2
  01d18	e59d1018	 ldr         r1, [sp, #0x18]
  01d1c	e59d0010	 ldr         r0, [sp, #0x10]
  01d20	eb000000	 bl          IndicateBusRequestComplete

; 917  : 
; 918  :     return TRUE;

  01d24	e3a03001	 mov         r3, #1
  01d28	e5cd3004	 strb        r3, [sp, #4]

; 919  : }

  01d2c	e5dd0004	 ldrb        r0, [sp, #4]
  01d30	e28dd008	 add         sp, sp, #8
  01d34	e89d6000	 ldmia       sp, {sp, lr}
  01d38	e12fff1e	 bx          lr
  01d3c		 |$LN6@SDHCancelI|
  01d3c		 |$LN7@SDHCancelI|
  01d3c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01d40		 |$LN8@SDHCancelI|
  01d40	00000000	 DCD         |dpCurSettings|
  01d44		 |$LN9@SDHCancelI|
  01d44	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01d48		 |$M44889|

			 ENDP  ; |SDHCancelIoHandler|

	EXPORT	|??_C@_1EE@BGCGLLDM@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAS?$AAe?$AAn?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@PFPFBCGN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?5?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAM@| [ DATA ] ; `string'
	EXPORT	|READ_MOD_WRITE_MMC_IMASK_AND_OR|
	EXPORT	|??_C@_1GA@HBCGMEJK@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAC?$AAM?$AAD?$AAA?$AAT?$AA?5?$AAR?$AAe?$AAg?$AA?3?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|PrepareDmaTransfer|
	EXPORT	|??_C@_1FM@JNPIDIAN@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@CPDPDMDC@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|SDBusIssueRequest|
	IMPORT	|Sleep|

  00050			 AREA	 |.pdata|, PDATA
|$T44923| DCD	|$LN43@SDBusIssue|
	DCD	0x40012b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@BGCGLLDM@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAS?$AAe?$AAn?$AAt@| DCB "S"
	DCB	0x0, "D", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "I", 0x0, "s"
	DCB	0x0, "s", 0x0, "u", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@PFPFBCGN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?5?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAM@| DCB "*"
	DCB	0x0, "*", 0x0, "*", 0x0, "*", 0x0, "*", 0x0, "*", 0x0, "*"
	DCB	0x0, "*", 0x0, "*", 0x0, " ", 0x0, "S", 0x0, "D", 0x0, "B"
	DCB	0x0, "u", 0x0, "s", 0x0, "I", 0x0, "s", 0x0, "s", 0x0, "u"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "M"
	DCB	0x0, "M", 0x0, "C", 0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "d", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, " "
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HBCGMEJK@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAC?$AAM?$AAD?$AAA?$AAT?$AA?5?$AAR?$AAe?$AAg?$AA?3?$AA?5?$AA0@| DCB "S"
	DCB	0x0, "D", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "I", 0x0, "s"
	DCB	0x0, "s", 0x0, "u", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "C", 0x0, "M", 0x0, "D", 0x0, "A", 0x0, "T"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "C", 0x0, "M", 0x0, "D", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@JNPIDIAN@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@| DCB "S"
	DCB	0x0, "D", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "I", 0x0, "s"
	DCB	0x0, "s", 0x0, "u", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, ")", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@CPDPDMDC@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF@| DCB "S"
	DCB	0x0, "D", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "I", 0x0, "s"
	DCB	0x0, "s", 0x0, "u", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "p", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "C", 0x0, "M"
	DCB	0x0, "D", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, " ", 0x0, "D", 0x0, "A"
	DCB	0x0, "T", 0x0, "A", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "T", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01d48			 AREA	 |.text|, CODE, ARM

  01d48		 |SDBusIssueRequest| PROC

; 936  : {

  01d48		 |$LN43@SDBusIssue|
  01d48	e1a0c00d	 mov         r12, sp
  01d4c	e92d0007	 stmdb       sp!, {r0 - r2}
  01d50	e92d5000	 stmdb       sp!, {r12, lr}
  01d54	e24dd03c	 sub         sp, sp, #0x3C
  01d58		 |$M44920|

; 937  : 
; 938  :     BOOL fExtraDelay = FALSE;

  01d58	e3a03000	 mov         r3, #0
  01d5c	e58d3004	 str         r3, [sp, #4]

; 939  :     PSDH_HARDWARE_CONTEXT    pController;     // our controller
; 940  :     DWORD                      cmdatRegister;   // CMDAT register
; 941  : 
; 942  :         // get our extension 
; 943  :     pController = GetExtensionFromHCDContext(PSDH_HARDWARE_CONTEXT, pHCContext);

  01d60	e59d3044	 ldr         r3, [sp, #0x44]
  01d64	e283304c	 add         r3, r3, #0x4C
  01d68	e5933000	 ldr         r3, [r3]
  01d6c	e58d3008	 str         r3, [sp, #8]

; 944  : 
; 945  :     DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("SDBusIssueRequest - pRequest = %x, CMD: 0x%02X DATA: 0x%08X, TC: %d\n"),
; 946  :             pRequest,pRequest->CommandCode, pRequest->CommandArgument, pRequest->TransferClass));

  01d70	e59f3468	 ldr         r3, [pc, #0x468]
  01d74	e5933440	 ldr         r3, [r3, #0x440]
  01d78	e3130080	 tst         r3, #0x80
  01d7c	0a00000f	 beq         |$LN20@SDBusIssue|
  01d80	e59d304c	 ldr         r3, [sp, #0x4C]
  01d84	e2833010	 add         r3, r3, #0x10
  01d88	e5933000	 ldr         r3, [r3]
  01d8c	e58d3000	 str         r3, [sp]
  01d90	e59d304c	 ldr         r3, [sp, #0x4C]
  01d94	e2833018	 add         r3, r3, #0x18
  01d98	e5933000	 ldr         r3, [r3]
  01d9c	e59d204c	 ldr         r2, [sp, #0x4C]
  01da0	e2822014	 add         r2, r2, #0x14
  01da4	e5d22000	 ldrb        r2, [r2]
  01da8	e59d104c	 ldr         r1, [sp, #0x4C]
  01dac	e59f043c	 ldr         r0, [pc, #0x43C]
  01db0	eb000000	 bl          SDCardDebugOutput
  01db4	e3a03001	 mov         r3, #1
  01db8	e58d301c	 str         r3, [sp, #0x1C]
  01dbc	ea000001	 b           |$LN21@SDBusIssue|
  01dc0		 |$LN20@SDBusIssue|
  01dc0	e3a03000	 mov         r3, #0
  01dc4	e58d301c	 str         r3, [sp, #0x1C]
  01dc8		 |$LN21@SDBusIssue|

; 947  : 
; 948  : 
; 949  :         // stop the clock
; 950  :     SDClockOff(pController);

  01dc8	e59d0008	 ldr         r0, [sp, #8]
  01dcc	eb000000	 bl          SDClockOff

; 951  : 
; 952  :         // set the command
; 953  :     WRITE_MMC_REGISTER_DWORD(pController, MMC_CMD, pRequest->CommandCode);

  01dd0	e59d304c	 ldr         r3, [sp, #0x4C]
  01dd4	e2833014	 add         r3, r3, #0x14
  01dd8	e5d32000	 ldrb        r2, [r3]
  01ddc	e3a01030	 mov         r1, #0x30
  01de0	e59d0008	 ldr         r0, [sp, #8]
  01de4	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 954  :         // set the argument,  high part
; 955  :     WRITE_MMC_REGISTER_DWORD(pController, MMC_ARGH, (pRequest->CommandArgument >> 16));

  01de8	e59d304c	 ldr         r3, [sp, #0x4C]
  01dec	e2833018	 add         r3, r3, #0x18
  01df0	e5933000	 ldr         r3, [r3]
  01df4	e1a02823	 mov         r2, r3, lsr #16
  01df8	e3a01034	 mov         r1, #0x34
  01dfc	e59d0008	 ldr         r0, [sp, #8]
  01e00	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 956  :         // set the argument,  high part
; 957  :     WRITE_MMC_REGISTER_DWORD(pController, MMC_ARGL, (pRequest->CommandArgument & 0x0000FFFF));

  01e04	e59d304c	 ldr         r3, [sp, #0x4C]
  01e08	e2833018	 add         r3, r3, #0x18
  01e0c	e5932000	 ldr         r2, [r3]
  01e10	e3a03cff	 mov         r3, #0xFF, 24
  01e14	e38330ff	 orr         r3, r3, #0xFF
  01e18	e0022003	 and         r2, r2, r3
  01e1c	e3a01038	 mov         r1, #0x38
  01e20	e59d0008	 ldr         r0, [sp, #8]
  01e24	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 958  : 
; 959  : 
; 960  :     switch (pRequest->CommandResponse.ResponseType) {

  01e28	e59d304c	 ldr         r3, [sp, #0x4C]
  01e2c	e283301c	 add         r3, r3, #0x1C
  01e30	e5933000	 ldr         r3, [r3]
  01e34	e58d3020	 str         r3, [sp, #0x20]
  01e38	e59d3020	 ldr         r3, [sp, #0x20]
  01e3c	e3530008	 cmp         r3, #8
  01e40	8a00001c	 bhi         |$LN10@SDBusIssue|
  01e44	e59d2020	 ldr         r2, [sp, #0x20]
  01e48	e1a03102	 mov         r3, r2, lsl #2
  01e4c	e083300f	 add         r3, r3, pc
  01e50	e5933004	 ldr         r3, [r3, #4]
  01e54	e08ff003	 add         pc, pc, r3
  01e58		 |$LN31@SDBusIssue|
  01e58		 |$LN30@SDBusIssue|
  01e58		 |$LN32@SDBusIssue|
  01e58	00000020	 DCD         0x20
  01e5c		 |$LN33@SDBusIssue|
  01e5c	00000038	 DCD         0x38
  01e60		 |$LN34@SDBusIssue|
  01e60	0000002c	 DCD         0x2c
  01e64		 |$LN35@SDBusIssue|
  01e64	00000044	 DCD         0x44
  01e68		 |$LN36@SDBusIssue|
  01e68	00000050	 DCD         0x50
  01e6c		 |$LN37@SDBusIssue|
  01e6c	00000050	 DCD         0x50
  01e70		 |$LN38@SDBusIssue|
  01e70	00000038	 DCD         0x38
  01e74		 |$LN39@SDBusIssue|
  01e74	00000038	 DCD         0x38
  01e78		 |$LN40@SDBusIssue|
  01e78	00000038	 DCD         0x38
  01e7c		 |$LN15@SDBusIssue|

; 961  : 
; 962  :         case NoResponse:
; 963  :             cmdatRegister = MMC_CMDAT_RESPONSE_NONE;

  01e7c	e3a03000	 mov         r3, #0
  01e80	e58d300c	 str         r3, [sp, #0xC]

; 964  :             break;

  01e84	ea000019	 b           |$LN16@SDBusIssue|
  01e88		 |$LN14@SDBusIssue|

; 965  :         case ResponseR1b:
; 966  :                 // response1 with busy signalling
; 967  :             cmdatRegister = MMC_CMDAT_RESPONSE_R1 | MMC_CMDAT_EXPECT_BUSY;

  01e88	e3a03021	 mov         r3, #0x21
  01e8c	e58d300c	 str         r3, [sp, #0xC]

; 968  :             break;

  01e90	ea000016	 b           |$LN16@SDBusIssue|
  01e94		 |$LN13@SDBusIssue|

; 969  :         case ResponseR1:
; 970  :         case ResponseR5:
; 971  :         case ResponseR6:
; 972  :         case ResponseR7:
; 973  :                 // on an MMC controller R5 and R6 are really just an R1 response (CRC protected)
; 974  :             cmdatRegister = MMC_CMDAT_RESPONSE_R1;

  01e94	e3a03001	 mov         r3, #1
  01e98	e58d300c	 str         r3, [sp, #0xC]

; 975  :             break;

  01e9c	ea000013	 b           |$LN16@SDBusIssue|
  01ea0		 |$LN12@SDBusIssue|

; 976  :         case ResponseR2:    
; 977  :             cmdatRegister = MMC_CMDAT_RESPONSE_R2;

  01ea0	e3a03002	 mov         r3, #2
  01ea4	e58d300c	 str         r3, [sp, #0xC]

; 978  :             break;

  01ea8	ea000010	 b           |$LN16@SDBusIssue|
  01eac		 |$LN11@SDBusIssue|

; 979  :         case ResponseR3:
; 980  :         case ResponseR4:    
; 981  :                 // R4 is really same as an R3 response on an MMC controller (non-CRC)
; 982  :             cmdatRegister = MMC_CMDAT_RESPONSE_R3;

  01eac	e3a03003	 mov         r3, #3
  01eb0	e58d300c	 str         r3, [sp, #0xC]

; 983  :             break;

  01eb4	ea00000d	 b           |$LN16@SDBusIssue|
  01eb8		 |$LN10@SDBusIssue|

; 984  : 
; 985  :         default:
; 986  :             DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("SDBusIssueRequest failed (Invalid parameter)\n")));

  01eb8	e59f3320	 ldr         r3, [pc, #0x320]
  01ebc	e5933440	 ldr         r3, [r3, #0x440]
  01ec0	e3130080	 tst         r3, #0x80
  01ec4	0a000004	 beq         |$LN22@SDBusIssue|
  01ec8	e59f031c	 ldr         r0, [pc, #0x31C]
  01ecc	eb000000	 bl          SDCardDebugOutput
  01ed0	e3a03001	 mov         r3, #1
  01ed4	e58d3024	 str         r3, [sp, #0x24]
  01ed8	ea000001	 b           |$LN23@SDBusIssue|
  01edc		 |$LN22@SDBusIssue|
  01edc	e3a03000	 mov         r3, #0
  01ee0	e58d3024	 str         r3, [sp, #0x24]
  01ee4		 |$LN23@SDBusIssue|

; 987  :             return SD_API_STATUS_INVALID_PARAMETER;

  01ee4	e3a0311f	 mov         r3, #0x1F, 2
  01ee8	e58d3018	 str         r3, [sp, #0x18]
  01eec	ea0000b6	 b           |$LN18@SDBusIssue|
  01ef0		 |$LN16@SDBusIssue|

; 988  :     }
; 989  : 
; 990  :     pController->fDMATransfer = FALSE;

  01ef0	e59d3008	 ldr         r3, [sp, #8]
  01ef4	e2833c0a	 add         r3, r3, #0xA, 24
  01ef8	e28320a8	 add         r2, r3, #0xA8
  01efc	e3a03000	 mov         r3, #0
  01f00	e5823000	 str         r3, [r2]

; 991  :     pController->fDMATransferCancelled = FALSE;

  01f04	e59d3008	 ldr         r3, [sp, #8]
  01f08	e2832eab	 add         r2, r3, #0xAB, 28
  01f0c	e3a03000	 mov         r3, #0
  01f10	e5823000	 str         r3, [r2]

; 992  : 
; 993  :         // check for Command Only
; 994  :     if ((SD_COMMAND == pRequest->TransferClass)) {

  01f14	e59d304c	 ldr         r3, [sp, #0x4C]
  01f18	e2833010	 add         r3, r3, #0x10
  01f1c	e5933000	 ldr         r3, [r3]
  01f20	e3530002	 cmp         r3, #2
  01f24	1a000008	 bne         |$LN9@SDBusIssue|

; 995  :        
; 996  :             // set the length of the block
; 997  :         WRITE_MMC_REGISTER_DWORD(pController, MMC_BLKLEN, 0);

  01f28	e3a02000	 mov         r2, #0
  01f2c	e3a0101c	 mov         r1, #0x1C
  01f30	e59d0008	 ldr         r0, [sp, #8]
  01f34	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 998  : 
; 999  :             // set the number of blocks
; 1000 :         WRITE_MMC_REGISTER_DWORD(pController, MMC_NOB, 0);

  01f38	e3a02000	 mov         r2, #0
  01f3c	e3a01020	 mov         r1, #0x20
  01f40	e59d0008	 ldr         r0, [sp, #8]
  01f44	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 1001 : 
; 1002 :     } else {

  01f48	ea000029	 b           |$LN8@SDBusIssue|
  01f4c		 |$LN9@SDBusIssue|

; 1003 :             // its a command with a data phase
; 1004 :         cmdatRegister |= MMC_CMDAT_DATA_EN;

  01f4c	e59d300c	 ldr         r3, [sp, #0xC]
  01f50	e3833004	 orr         r3, r3, #4
  01f54	e58d300c	 str         r3, [sp, #0xC]

; 1005 :         
; 1006 :             // set the buffer index to the end of the buffer
; 1007 :         pRequest->HCParam = 0;      

  01f58	e59d304c	 ldr         r3, [sp, #0x4C]
  01f5c	e2832044	 add         r2, r3, #0x44
  01f60	e3a03000	 mov         r3, #0
  01f64	e5823000	 str         r3, [r2]

; 1008 : 
; 1009 :             // set the length of the block
; 1010 :         WRITE_MMC_REGISTER_DWORD(pController, MMC_BLKLEN, pRequest->BlockSize);

  01f68	e59d304c	 ldr         r3, [sp, #0x4C]
  01f6c	e2833040	 add         r3, r3, #0x40
  01f70	e5932000	 ldr         r2, [r3]
  01f74	e3a0101c	 mov         r1, #0x1C
  01f78	e59d0008	 ldr         r0, [sp, #8]
  01f7c	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 1011 : 
; 1012 :             // set the number of blocks
; 1013 :         WRITE_MMC_REGISTER_DWORD(pController, MMC_NOB, pRequest->NumBlocks);

  01f80	e59d304c	 ldr         r3, [sp, #0x4C]
  01f84	e283303c	 add         r3, r3, #0x3C
  01f88	e5932000	 ldr         r2, [r3]
  01f8c	e3a01020	 mov         r1, #0x20
  01f90	e59d0008	 ldr         r0, [sp, #8]
  01f94	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 1014 : 
; 1015 :             // check for write
; 1016 :         if (TRANSFER_IS_WRITE(pRequest)) {

  01f98	e59d304c	 ldr         r3, [sp, #0x4C]
  01f9c	e2833010	 add         r3, r3, #0x10
  01fa0	e5933000	 ldr         r3, [r3]
  01fa4	e3530001	 cmp         r3, #1
  01fa8	1a000002	 bne         |$LN7@SDBusIssue|

; 1017 :             cmdatRegister |= MMC_CMDAT_DATA_WRITE;

  01fac	e59d300c	 ldr         r3, [sp, #0xC]
  01fb0	e3833008	 orr         r3, r3, #8
  01fb4	e58d300c	 str         r3, [sp, #0xC]
  01fb8		 |$LN7@SDBusIssue|

; 1018 :         } 
; 1019 : 
; 1020 :         // check to see if we can use DMA for data transfer
; 1021 :         if( PrepareDmaTransfer( pController, pRequest ) )

  01fb8	e59d104c	 ldr         r1, [sp, #0x4C]
  01fbc	e59d0008	 ldr         r0, [sp, #8]
  01fc0	eb000000	 bl          PrepareDmaTransfer
  01fc4	e58d0028	 str         r0, [sp, #0x28]
  01fc8	e59d3028	 ldr         r3, [sp, #0x28]
  01fcc	e3530000	 cmp         r3, #0
  01fd0	0a000007	 beq         |$LN6@SDBusIssue|

; 1022 :         {
; 1023 :             cmdatRegister |= MMC_CMDAT_DMA_ENABLE;

  01fd4	e59d300c	 ldr         r3, [sp, #0xC]
  01fd8	e3833080	 orr         r3, r3, #0x80
  01fdc	e58d300c	 str         r3, [sp, #0xC]

; 1024 :             pController->fDMATransfer = TRUE;

  01fe0	e59d3008	 ldr         r3, [sp, #8]
  01fe4	e2833c0a	 add         r3, r3, #0xA, 24
  01fe8	e28320a8	 add         r2, r3, #0xA8
  01fec	e3a03001	 mov         r3, #1
  01ff0	e5823000	 str         r3, [r2]
  01ff4		 |$LN6@SDBusIssue|
  01ff4		 |$LN8@SDBusIssue|

; 1025 :         }
; 1026 :     }
; 1027 : 
; 1028 :         // check to see if we need to append the 80 clocks (i.e. this is the first transaction)
; 1029 :     if (pController->SendInitClocks) {

  01ff4	e59d3008	 ldr         r3, [sp, #8]
  01ff8	e2833c0a	 add         r3, r3, #0xA, 24
  01ffc	e28330ec	 add         r3, r3, #0xEC
  02000	e5933000	 ldr         r3, [r3]
  02004	e3530000	 cmp         r3, #0
  02008	0a000009	 beq         |$LN5@SDBusIssue|

; 1030 :         pController->SendInitClocks = FALSE;

  0200c	e59d3008	 ldr         r3, [sp, #8]
  02010	e2833c0a	 add         r3, r3, #0xA, 24
  02014	e28320ec	 add         r2, r3, #0xEC
  02018	e3a03000	 mov         r3, #0
  0201c	e5823000	 str         r3, [r2]

; 1031 :         cmdatRegister |= MMC_CMDAT_INIT;

  02020	e59d300c	 ldr         r3, [sp, #0xC]
  02024	e3833040	 orr         r3, r3, #0x40
  02028	e58d300c	 str         r3, [sp, #0xC]

; 1032 :         fExtraDelay = TRUE;

  0202c	e3a03001	 mov         r3, #1
  02030	e58d3004	 str         r3, [sp, #4]
  02034		 |$LN5@SDBusIssue|

; 1033 :     }
; 1034 : 
; 1035 :         // check to see if we need to enable the SDIO interrupt checking
; 1036 :     if (pController->fSDIOEnabled) {

  02034	e59d3008	 ldr         r3, [sp, #8]
  02038	e2833c0d	 add         r3, r3, #0xD, 24
  0203c	e2833034	 add         r3, r3, #0x34
  02040	e5933000	 ldr         r3, [r3]
  02044	e3530000	 cmp         r3, #0
  02048	0a000002	 beq         |$LN4@SDBusIssue|

; 1037 :         cmdatRegister |= MMC_CMDAT_SDIO_INT_EN;

  0204c	e59d300c	 ldr         r3, [sp, #0xC]
  02050	e3833b02	 orr         r3, r3, #2, 22
  02054	e58d300c	 str         r3, [sp, #0xC]
  02058		 |$LN4@SDBusIssue|

; 1038 :     }
; 1039 : 
; 1040 :         // check to see if we need to enable wide bus (4 bit) data transfer mode
; 1041 :     if (pController->f4BitMode) {

  02058	e59d3008	 ldr         r3, [sp, #8]
  0205c	e2833c0d	 add         r3, r3, #0xD, 24
  02060	e283303c	 add         r3, r3, #0x3C
  02064	e5933000	 ldr         r3, [r3]
  02068	e3530000	 cmp         r3, #0
  0206c	0a000002	 beq         |$LN3@SDBusIssue|

; 1042 :         cmdatRegister |= MMC_CMDAT_SD_4DAT;

  02070	e59d300c	 ldr         r3, [sp, #0xC]
  02074	e3833c01	 orr         r3, r3, #1, 24
  02078	e58d300c	 str         r3, [sp, #0xC]
  0207c		 |$LN3@SDBusIssue|

; 1043 :     }
; 1044 : 
; 1045 :     
; 1046 : 
; 1047 :         // write the CMDAT register
; 1048 :     WRITE_MMC_REGISTER_DWORD(pController, MMC_CMDAT, cmdatRegister);

  0207c	e59d200c	 ldr         r2, [sp, #0xC]
  02080	e3a01010	 mov         r1, #0x10
  02084	e59d0008	 ldr         r0, [sp, #8]
  02088	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 1049 :     DbgPrintZo(SDH_SEND_ZONE, (TEXT("SDBusIssueRequest - CMDAT Reg: 0x%08X, CMD:%d \n"),
; 1050 :                 cmdatRegister, pRequest->CommandCode));

  0208c	e59f314c	 ldr         r3, [pc, #0x14C]
  02090	e5933440	 ldr         r3, [r3, #0x440]
  02094	e3130002	 tst         r3, #2
  02098	0a000008	 beq         |$LN24@SDBusIssue|
  0209c	e59d304c	 ldr         r3, [sp, #0x4C]
  020a0	e2833014	 add         r3, r3, #0x14
  020a4	e5d32000	 ldrb        r2, [r3]
  020a8	e59d100c	 ldr         r1, [sp, #0xC]
  020ac	e59f0134	 ldr         r0, [pc, #0x134]
  020b0	eb000000	 bl          SDCardDebugOutput
  020b4	e3a03001	 mov         r3, #1
  020b8	e58d302c	 str         r3, [sp, #0x2C]
  020bc	ea000001	 b           |$LN25@SDBusIssue|
  020c0		 |$LN24@SDBusIssue|
  020c0	e3a03000	 mov         r3, #0
  020c4	e58d302c	 str         r3, [sp, #0x2C]
  020c8		 |$LN25@SDBusIssue|

; 1051 : 
; 1052 :         // set the the response timeout
; 1053 :     WRITE_MMC_REGISTER_DWORD(pController, MMC_RESTO, SDH_DEFAULT_RESPONSE_TIMEOUT_CLOCKS);

  020c8	e3a02040	 mov         r2, #0x40
  020cc	e3a01014	 mov         r1, #0x14
  020d0	e59d0008	 ldr         r0, [sp, #8]
  020d4	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 1054 :         // set the data receive timeout
; 1055 :     WRITE_MMC_REGISTER_DWORD(pController, MMC_RDTO, SDH_DEFAULT_DATA_TIMEOUT_CLOCKS);

  020d8	e3a02cff	 mov         r2, #0xFF, 24
  020dc	e38220ff	 orr         r2, r2, #0xFF
  020e0	e3a01018	 mov         r1, #0x18
  020e4	e59d0008	 ldr         r0, [sp, #8]
  020e8	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 1056 : 
; 1057 :     SetCurrentState(pController, CommandSend);

  020ec	e59d3008	 ldr         r3, [sp, #8]
  020f0	e2832ecf	 add         r2, r3, #0xCF, 28
  020f4	e3a03001	 mov         r3, #1
  020f8	e5823000	 str         r3, [r2]

; 1058 :         // turn on the command complete and the response error interrupts
; 1059 :     END_CMD_INTERRUPT_ON(pController);

  020fc	e3a02000	 mov         r2, #0
  02100	e3e01004	 mvn         r1, #4
  02104	e59d0008	 ldr         r0, [sp, #8]
  02108	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1060 :     PROGRAM_RESPONSE_ERROR_INTERRUPT_ON(pController);

  0210c	e3a02000	 mov         r2, #0
  02110	e3e01c02	 mvn         r1, #2, 24
  02114	e59d0008	 ldr         r0, [sp, #8]
  02118	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1061 : 
; 1062 :         // turn on the clock 
; 1063 :     SDClockOn(pController);

  0211c	e59d0008	 ldr         r0, [sp, #8]
  02120	eb000000	 bl          SDClockOn

; 1064 : 
; 1065 :     if( fExtraDelay )

  02124	e59d3004	 ldr         r3, [sp, #4]
  02128	e3530000	 cmp         r3, #0
  0212c	0a000003	 beq         |$LN2@SDBusIssue|

; 1066 :     {
; 1067 :         fExtraDelay = FALSE;

  02130	e3a03000	 mov         r3, #0
  02134	e58d3004	 str         r3, [sp, #4]

; 1068 :         Sleep(500);

  02138	e3a00f7d	 mov         r0, #0x7D, 30
  0213c	eb000000	 bl          Sleep
  02140		 |$LN2@SDBusIssue|

; 1069 :     }
; 1070 :        
; 1071 : #if DEBUG
; 1072 :     {
; 1073 :         DWORD mmcStatus;
; 1074 : 
; 1075 :         mmcStatus = READ_MMC_REGISTER_DWORD(pController, MMC_STAT);

  02140	e3a01004	 mov         r1, #4
  02144	e59d0008	 ldr         r0, [sp, #8]
  02148	eb000000	 bl          READ_MMC_REGISTER_DWORD
  0214c	e58d0030	 str         r0, [sp, #0x30]
  02150	e59d3030	 ldr         r3, [sp, #0x30]
  02154	e58d3010	 str         r3, [sp, #0x10]

; 1076 : 
; 1077 :         if (mmcStatus & 0x0000003F) {

  02158	e59d3010	 ldr         r3, [sp, #0x10]
  0215c	e313003f	 tst         r3, #0x3F
  02160	0a00000c	 beq         |$LN1@SDBusIssue|

; 1078 :                 // these errors should be cleared
; 1079 :             DbgPrintZo(SDCARD_ZONE_ERROR, 
; 1080 :                 (TEXT("********* SDBusIssueRequest - MMC Status did not clear : 0x%08X \n"),
; 1081 :                 (mmcStatus & 0x0000003F)));

  02164	e59f3074	 ldr         r3, [pc, #0x74]
  02168	e5933440	 ldr         r3, [r3, #0x440]
  0216c	e3130902	 tst         r3, #2, 18
  02170	0a000006	 beq         |$LN26@SDBusIssue|
  02174	e59d3010	 ldr         r3, [sp, #0x10]
  02178	e203103f	 and         r1, r3, #0x3F
  0217c	e59f0060	 ldr         r0, [pc, #0x60]
  02180	eb000000	 bl          SDCardDebugOutput
  02184	e3a03001	 mov         r3, #1
  02188	e58d3034	 str         r3, [sp, #0x34]
  0218c	ea000001	 b           |$LN27@SDBusIssue|
  02190		 |$LN26@SDBusIssue|
  02190	e3a03000	 mov         r3, #0
  02194	e58d3034	 str         r3, [sp, #0x34]
  02198		 |$LN27@SDBusIssue|
  02198		 |$LN1@SDBusIssue|

; 1082 :         }
; 1083 :     
; 1084 :     }
; 1085 : #endif 
; 1086 :     DbgPrintZo(SDH_SEND_ZONE, (TEXT("SDBusIssueRequest - Request Sent\n")));

  02198	e59f3040	 ldr         r3, [pc, #0x40]
  0219c	e5933440	 ldr         r3, [r3, #0x440]
  021a0	e3130002	 tst         r3, #2
  021a4	0a000004	 beq         |$LN28@SDBusIssue|
  021a8	e59f002c	 ldr         r0, [pc, #0x2C]
  021ac	eb000000	 bl          SDCardDebugOutput
  021b0	e3a03001	 mov         r3, #1
  021b4	e58d3038	 str         r3, [sp, #0x38]
  021b8	ea000001	 b           |$LN29@SDBusIssue|
  021bc		 |$LN28@SDBusIssue|
  021bc	e3a03000	 mov         r3, #0
  021c0	e58d3038	 str         r3, [sp, #0x38]
  021c4		 |$LN29@SDBusIssue|

; 1087 : 
; 1088 :     return SD_API_STATUS_PENDING;

  021c4	e3a03001	 mov         r3, #1
  021c8	e58d3018	 str         r3, [sp, #0x18]
  021cc		 |$LN18@SDBusIssue|

; 1089 : }

  021cc	e59d0018	 ldr         r0, [sp, #0x18]
  021d0	e28dd03c	 add         sp, sp, #0x3C
  021d4	e89d6000	 ldmia       sp, {sp, lr}
  021d8	e12fff1e	 bx          lr
  021dc		 |$LN44@SDBusIssue|
  021dc		 |$LN45@SDBusIssue|
  021dc	00000000	 DCD         |??_C@_1EE@BGCGLLDM@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAS?$AAe?$AAn?$AAt@|
  021e0		 |$LN46@SDBusIssue|
  021e0	00000000	 DCD         |dpCurSettings|
  021e4		 |$LN47@SDBusIssue|
  021e4	00000000	 DCD         |??_C@_1IE@PFPFBCGN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?5?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAM?$AAM@|
  021e8		 |$LN48@SDBusIssue|
  021e8	00000000	 DCD         |??_C@_1GA@HBCGMEJK@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAC?$AAM?$AAD?$AAA?$AAT?$AA?5?$AAR?$AAe?$AAg?$AA?3?$AA?5?$AA0@|
  021ec		 |$LN49@SDBusIssue|
  021ec	00000000	 DCD         |??_C@_1FM@JNPIDIAN@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@|
  021f0		 |$LN50@SDBusIssue|
  021f0	00000000	 DCD         |??_C@_1IK@CPDPDMDC@?$AAS?$AAD?$AAB?$AAu?$AAs?$AAI?$AAs?$AAs?$AAu?$AAe?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?9?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AA?$DN?$AA?5?$AA?$CF@|
  021f4		 |$M44921|

			 ENDP  ; |SDBusIssueRequest|

	EXPORT	|READ_MOD_WRITE_MMC_REGISTER_AND_OR|
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T44935| DCD	|$LN5@READ_MOD_W|
	DCD	0x40001203
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |READ_MOD_WRITE_MMC_IMASK_AND_OR| PROC

; 182  : {

  00000		 |$LN5@READ_MOD_W|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44932|

; 183  :     EnterCriticalSection(&(pHc->intrRegCriticalSection));

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833c0d	 add         r3, r3, #0xD, 24
  00014	e2830054	 add         r0, r3, #0x54
  00018	eb000000	 bl          EnterCriticalSection

; 184  :     READ_MOD_WRITE_MMC_REGISTER_AND_OR( pHc, MMC_IMASK, AndValue, OrValue );

  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e59d200c	 ldr         r2, [sp, #0xC]
  00024	e3a01028	 mov         r1, #0x28
  00028	e59d0008	 ldr         r0, [sp, #8]
  0002c	eb000000	 bl          READ_MOD_WRITE_MMC_REGISTER_AND_OR

; 185  :     LeaveCriticalSection(&(pHc->intrRegCriticalSection));

  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e2833c0d	 add         r3, r3, #0xD, 24
  00038	e2830054	 add         r0, r3, #0x54
  0003c	eb000000	 bl          LeaveCriticalSection

; 186  : }

  00040	e89d6000	 ldmia       sp, {sp, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M44933|

			 ENDP  ; |READ_MOD_WRITE_MMC_IMASK_AND_OR|

	EXPORT	|??_C@_1FI@KCLBLIPN@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44944| DCD	|$LN7@READ_MOD_W@2|
	DCD	0x40002804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@KCLBLIPN@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "S"
	DCB	0x0, "H", 0x0, "C", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |READ_MOD_WRITE_MMC_REGISTER_AND_OR| PROC

; 156  : {

  00000		 |$LN7@READ_MOD_W@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M44941|

; 157  :     DWORD regValue;
; 158  :     regValue = READ_MMC_REGISTER_DWORD(pHc, RegOffset);

  00010	e59d1018	 ldr         r1, [sp, #0x18]
  00014	e59d0014	 ldr         r0, [sp, #0x14]
  00018	eb000000	 bl          READ_MMC_REGISTER_DWORD
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 159  :     regValue &= (AndValue);

  00028	e59d2000	 ldr         r2, [sp]
  0002c	e59d301c	 ldr         r3, [sp, #0x1C]
  00030	e0023003	 and         r3, r2, r3
  00034	e58d3000	 str         r3, [sp]

; 160  :     regValue |= (OrValue);

  00038	e59d2000	 ldr         r2, [sp]
  0003c	e59d3020	 ldr         r3, [sp, #0x20]
  00040	e1823003	 orr         r3, r2, r3
  00044	e58d3000	 str         r3, [sp]

; 161  :     DEBUGMSG(SDCARD_ZONE_INFO, (TEXT("SHCDriver: - Setting MMC Reg 0x%x to 0x%x\r\n"), RegOffset, regValue));

  00048	e59f304c	 ldr         r3, [pc, #0x4C]
  0004c	e5933440	 ldr         r3, [r3, #0x440]
  00050	e3130a01	 tst         r3, #1, 20
  00054	0a000006	 beq         |$LN3@READ_MOD_W@2|
  00058	e59d2000	 ldr         r2, [sp]
  0005c	e59d1018	 ldr         r1, [sp, #0x18]
  00060	e59f0030	 ldr         r0, [pc, #0x30]
  00064	eb000000	 bl          NKDbgPrintfW
  00068	e3a03001	 mov         r3, #1
  0006c	e58d3008	 str         r3, [sp, #8]
  00070	ea000001	 b           |$LN4@READ_MOD_W@2|
  00074		 |$LN3@READ_MOD_W@2|
  00074	e3a03000	 mov         r3, #0
  00078	e58d3008	 str         r3, [sp, #8]
  0007c		 |$LN4@READ_MOD_W@2|

; 162  :     WRITE_MMC_REGISTER_DWORD(pHc, RegOffset, regValue);

  0007c	e59d2000	 ldr         r2, [sp]
  00080	e59d1018	 ldr         r1, [sp, #0x18]
  00084	e59d0014	 ldr         r0, [sp, #0x14]
  00088	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 163  : }

  0008c	e28dd00c	 add         sp, sp, #0xC
  00090	e89d6000	 ldmia       sp, {sp, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN8@READ_MOD_W@2|
  00098		 |$LN9@READ_MOD_W@2|
  00098	00000000	 DCD         |??_C@_1FI@KCLBLIPN@?$AAS?$AAH?$AAC?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?3?$AA?5?$AA?9?$AA?5?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AA?5?$AA0?$AAx?$AA?$CF@|
  0009c		 |$LN10@READ_MOD_W@2|
  0009c	00000000	 DCD         |dpCurSettings|
  000a0		 |$M44942|

			 ENDP  ; |READ_MOD_WRITE_MMC_REGISTER_AND_OR|

	EXPORT	|??_C@_1EE@KKDBGKJK@?$AA?9?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|HandleDMAInterrupt|
	EXPORT	|SDControllerISTHandler|
	EXPORT	|??_C@_1EE@CPMNDMBH@?$AA?$CL?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@GCHEONHF@?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAO?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@PGCECPKD@?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI?$AAN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|SDHBusRequestHandler|
	IMPORT	|IsCardPresent|
	IMPORT	|InterruptMask|

  00058			 AREA	 |.pdata|, PDATA
|$T44965| DCD	|$LN24@SDHBusRequ|
	DCD	0xc0010604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@KKDBGKJK@?$AA?9?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?$CF@| DCB "-"
	DCB	0x0, "S", 0x0, "D", 0x0, "H", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "R", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "="
	DCB	0x0, "%", 0x0, "x", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@CPMNDMBH@?$AA?$CL?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?$CF@| DCB "+"
	DCB	0x0, "S", 0x0, "D", 0x0, "H", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "R", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "="
	DCB	0x0, "%", 0x0, "x", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@GCHEONHF@?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAO?$AAu?$AAt?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PGCECPKD@?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI?$AAN?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, 0x0, 0x0 ; `string'

  00004			 AREA	 |.xdata|, DATA
|$T44961| DCD	0xffffffbc
; Function compile flags: /Odtp

  021f4			 AREA	 |.text|, CODE, ARM

  021f4	00000000	 DCD         |__GSHandlerCheck|
  021f8	00000000	 DCD         |$T44961|

  021fc		 |SDHBusRequestHandler| PROC

; 1108 : {

  021fc		 |$LN24@SDHBusRequ|
  021fc	e1a0c00d	 mov         r12, sp
  02200	e92d0007	 stmdb       sp!, {r0 - r2}
  02204	e92d5000	 stmdb       sp!, {r12, lr}
  02208	e24dd0a0	 sub         sp, sp, #0xA0
  0220c		 |$M44962|
  0220c	e59f33fc	 ldr         r3, [pc, #0x3FC]
  02210	e5933000	 ldr         r3, [r3]
  02214	e58d3070	 str         r3, [sp, #0x70]

; 1109 :     SD_API_STATUS status;
; 1110 :     PSDH_HARDWARE_CONTEXT      pController;     // our controller
; 1111 :     BOOL fHandled = FALSE;

  02218	e3a03000	 mov         r3, #0
  0221c	e58d306c	 str         r3, [sp, #0x6C]

; 1112 :     const TCHAR inData[] = TEXT("SDHBusRequestHandler IN");

  02220	e28d3000	 add         r3, sp, #0
  02224	e58d3078	 str         r3, [sp, #0x78]
  02228	e59d0078	 ldr         r0, [sp, #0x78]
  0222c	e59f13d8	 ldr         r1, [pc, #0x3D8]
  02230	e3a02030	 mov         r2, #0x30
  02234	eb000000	 bl          memcpy

; 1113 :     const TCHAR OutData[] = TEXT("SDHBusRequestHandler Out");

  02238	e28d3030	 add         r3, sp, #0x30
  0223c	e58d307c	 str         r3, [sp, #0x7C]
  02240	e59d007c	 ldr         r0, [sp, #0x7C]
  02244	e59f13bc	 ldr         r1, [pc, #0x3BC]
  02248	e3a02032	 mov         r2, #0x32
  0224c	eb000000	 bl          memcpy

; 1114 :     DEBUGMSG(SDCARD_ZONE_FUNC,(TEXT("+SDHBusRequestHandler pRequest=%x"),pRequest));

  02250	e59f339c	 ldr         r3, [pc, #0x39C]
  02254	e5933440	 ldr         r3, [r3, #0x440]
  02258	e3130b02	 tst         r3, #2, 22
  0225c	0a000005	 beq         |$LN14@SDHBusRequ|
  02260	e59d10b0	 ldr         r1, [sp, #0xB0]
  02264	e59f0398	 ldr         r0, [pc, #0x398]
  02268	eb000000	 bl          NKDbgPrintfW
  0226c	e3a03001	 mov         r3, #1
  02270	e58d3080	 str         r3, [sp, #0x80]
  02274	ea000001	 b           |$LN15@SDHBusRequ|
  02278		 |$LN14@SDHBusRequ|
  02278	e3a03000	 mov         r3, #0
  0227c	e58d3080	 str         r3, [sp, #0x80]
  02280		 |$LN15@SDHBusRequ|

; 1115 :     RETAILCELOG(_CeLogEnable,CELID_RAW_WCHAR, (PVOID)inData, sizeof(inData));
; 1116 :         // get our extension 
; 1117 :     pController = GetExtensionFromHCDContext(PSDH_HARDWARE_CONTEXT, pHCContext);

  02280	e59d30a8	 ldr         r3, [sp, #0xA8]
  02284	e283304c	 add         r3, r3, #0x4C
  02288	e5933000	 ldr         r3, [r3]
  0228c	e58d3068	 str         r3, [sp, #0x68]

; 1118 :     ACQUIRE_LOCK(pController);

  02290	e59d3068	 ldr         r3, [sp, #0x68]
  02294	e2833c0a	 add         r3, r3, #0xA, 24
  02298	e28300d8	 add         r0, r3, #0xD8
  0229c	eb000000	 bl          EnterCriticalSection

; 1119 :     if ( pController->pCurrentRequest) { // We have outstand request.

  022a0	e59d3068	 ldr         r3, [sp, #0x68]
  022a4	e283301c	 add         r3, r3, #0x1C
  022a8	e5933000	 ldr         r3, [r3]
  022ac	e3530000	 cmp         r3, #0
  022b0	0a00000d	 beq         |$LN11@SDHBusRequ|

; 1120 :         ASSERT(FALSE);

  022b4	e3a03e46	 mov         r3, #0x46, 28
  022b8	e59f2340	 ldr         r2, [pc, #0x340]
  022bc	e59f1338	 ldr         r1, [pc, #0x338]
  022c0	e59f0330	 ldr         r0, [pc, #0x330]
  022c4	eb000000	 bl          NKDbgPrintfW
  022c8	e6000010	 __debugbreak_ce

; 1121 :         IndicateBusRequestComplete(pHCContext, pRequest, SD_API_STATUS_CANCELED);

  022cc	e3a0214f	 mov         r2, #0x4F, 2
  022d0	e59d10b0	 ldr         r1, [sp, #0xB0]
  022d4	e59d00a8	 ldr         r0, [sp, #0xA8]
  022d8	eb000000	 bl          IndicateBusRequestComplete

; 1122 :         pController->pCurrentRequest = NULL;

  022dc	e59d3068	 ldr         r3, [sp, #0x68]
  022e0	e283201c	 add         r2, r3, #0x1C
  022e4	e3a03000	 mov         r3, #0
  022e8	e5823000	 str         r3, [r2]
  022ec		 |$LN11@SDHBusRequ|

; 1123 :     }
; 1124 :     pController->fCurrentRequestFastPath = FALSE;

  022ec	e59d3068	 ldr         r3, [sp, #0x68]
  022f0	e2832020	 add         r2, r3, #0x20
  022f4	e3a03000	 mov         r3, #0
  022f8	e5823000	 str         r3, [r2]

; 1125 :     pController->pCurrentRequest = pRequest ;

  022fc	e59d3068	 ldr         r3, [sp, #0x68]
  02300	e283201c	 add         r2, r3, #0x1C
  02304	e59d30b0	 ldr         r3, [sp, #0xB0]
  02308	e5823000	 str         r3, [r2]

; 1126 :     // if no data transfer involved, use FAST PATH
; 1127 :     if ((pRequest->SystemFlags & SD_FAST_PATH_AVAILABLE) && 
; 1128 :             !( SD_COMMAND != pRequest->TransferClass && 
; 1129 :                 pRequest->NumBlocks * pRequest->BlockSize >=  pController->dwPollingModeSize)){   // We do fast path here.

  0230c	e59d30b0	 ldr         r3, [sp, #0xB0]
  02310	e283300c	 add         r3, r3, #0xC
  02314	e5933000	 ldr         r3, [r3]
  02318	e3130102	 tst         r3, #2, 2
  0231c	0a000085	 beq         |$LN10@SDHBusRequ|
  02320	e59d30b0	 ldr         r3, [sp, #0xB0]
  02324	e2833010	 add         r3, r3, #0x10
  02328	e5933000	 ldr         r3, [r3]
  0232c	e3530002	 cmp         r3, #2
  02330	0a00000b	 beq         |$LN9@SDHBusRequ|
  02334	e59d30b0	 ldr         r3, [sp, #0xB0]
  02338	e283203c	 add         r2, r3, #0x3C
  0233c	e59d30b0	 ldr         r3, [sp, #0xB0]
  02340	e2833040	 add         r3, r3, #0x40
  02344	e5921000	 ldr         r1, [r2]
  02348	e5933000	 ldr         r3, [r3]
  0234c	e0020391	 mul         r2, r1, r3
  02350	e59d3068	 ldr         r3, [sp, #0x68]
  02354	e2833040	 add         r3, r3, #0x40
  02358	e5933000	 ldr         r3, [r3]
  0235c	e1520003	 cmp         r2, r3
  02360	2a000074	 bcs         |$LN10@SDHBusRequ|
  02364		 |$LN9@SDHBusRequ|

; 1130 :         pController->fCurrentRequestFastPath = TRUE;

  02364	e59d3068	 ldr         r3, [sp, #0x68]
  02368	e2832020	 add         r2, r3, #0x20
  0236c	e3a03001	 mov         r3, #1
  02370	e5823000	 str         r3, [r2]

; 1131 :         InterruptMask(pController->dwSysintrSDMMC,TRUE);

  02374	e3a01001	 mov         r1, #1
  02378	e59d3068	 ldr         r3, [sp, #0x68]
  0237c	e283302c	 add         r3, r3, #0x2C
  02380	e5930000	 ldr         r0, [r3]
  02384	eb000000	 bl          InterruptMask

; 1132 :         InterruptMask(pController->dwDmaSysIntr,TRUE);

  02388	e3a01001	 mov         r1, #1
  0238c	e59d3068	 ldr         r3, [sp, #0x68]
  02390	e2833ea9	 add         r3, r3, #0xA9, 28
  02394	e5930000	 ldr         r0, [r3]
  02398	eb000000	 bl          InterruptMask

; 1133 :         status = SDBusIssueRequest( pHCContext, Slot, pRequest );

  0239c	e59d20b0	 ldr         r2, [sp, #0xB0]
  023a0	e59d10ac	 ldr         r1, [sp, #0xAC]
  023a4	e59d00a8	 ldr         r0, [sp, #0xA8]
  023a8	eb000000	 bl          SDBusIssueRequest
  023ac	e58d0084	 str         r0, [sp, #0x84]
  023b0	e59d3084	 ldr         r3, [sp, #0x84]
  023b4	e58d3064	 str         r3, [sp, #0x64]

; 1134 :         if( status == SD_API_STATUS_PENDING ) { // Polling for completion.

  023b8	e59d3064	 ldr         r3, [sp, #0x64]
  023bc	e3530001	 cmp         r3, #1
  023c0	1a00003a	 bne         |$LN8@SDHBusRequ|
  023c4		 |$LN7@SDHBusRequ|

; 1135 :             while (pController->pCurrentRequest && IsCardPresent()) {

  023c4	e59d3068	 ldr         r3, [sp, #0x68]
  023c8	e283301c	 add         r3, r3, #0x1C
  023cc	e5933000	 ldr         r3, [r3]
  023d0	e3530000	 cmp         r3, #0
  023d4	0a00001f	 beq         |$LN6@SDHBusRequ|
  023d8	eb000000	 bl          IsCardPresent
  023dc	e58d0088	 str         r0, [sp, #0x88]
  023e0	e59d3088	 ldr         r3, [sp, #0x88]
  023e4	e3530000	 cmp         r3, #0
  023e8	0a00001a	 beq         |$LN6@SDHBusRequ|

; 1136 :                 SDControllerISTHandler(pController, !IsCardPresent());

  023ec	eb000000	 bl          IsCardPresent
  023f0	e58d008c	 str         r0, [sp, #0x8C]
  023f4	e59d308c	 ldr         r3, [sp, #0x8C]
  023f8	e3530000	 cmp         r3, #0
  023fc	1a000002	 bne         |$LN16@SDHBusRequ|
  02400	e3a03001	 mov         r3, #1
  02404	e58d3090	 str         r3, [sp, #0x90]
  02408	ea000001	 b           |$LN17@SDHBusRequ|
  0240c		 |$LN16@SDHBusRequ|
  0240c	e3a03000	 mov         r3, #0
  02410	e58d3090	 str         r3, [sp, #0x90]
  02414		 |$LN17@SDHBusRequ|
  02414	e59d1090	 ldr         r1, [sp, #0x90]
  02418	e59d0068	 ldr         r0, [sp, #0x68]
  0241c	eb000000	 bl          SDControllerISTHandler

; 1137 :                 if ( pController->fDMATransfer  && !pController->fDMATransferCancelled)

  02420	e59d3068	 ldr         r3, [sp, #0x68]
  02424	e2833c0a	 add         r3, r3, #0xA, 24
  02428	e28330a8	 add         r3, r3, #0xA8
  0242c	e5933000	 ldr         r3, [r3]
  02430	e3530000	 cmp         r3, #0
  02434	0a000006	 beq         |$LN5@SDHBusRequ|
  02438	e59d3068	 ldr         r3, [sp, #0x68]
  0243c	e2833eab	 add         r3, r3, #0xAB, 28
  02440	e5933000	 ldr         r3, [r3]
  02444	e3530000	 cmp         r3, #0
  02448	1a000001	 bne         |$LN5@SDHBusRequ|

; 1138 :                     HandleDMAInterrupt(pController);

  0244c	e59d0068	 ldr         r0, [sp, #0x68]
  02450	eb000000	 bl          HandleDMAInterrupt
  02454		 |$LN5@SDHBusRequ|

; 1139 :             }               

  02454	eaffffda	 b           |$LN7@SDHBusRequ|
  02458		 |$LN6@SDHBusRequ|

; 1140 :             status = pController->FastPathStatus;

  02458	e59d3068	 ldr         r3, [sp, #0x68]
  0245c	e2833024	 add         r3, r3, #0x24
  02460	e5933000	 ldr         r3, [r3]
  02464	e58d3064	 str         r3, [sp, #0x64]

; 1141 :             if (pController->pCurrentRequest) {

  02468	e59d3068	 ldr         r3, [sp, #0x68]
  0246c	e283301c	 add         r3, r3, #0x1C
  02470	e5933000	 ldr         r3, [r3]
  02474	e3530000	 cmp         r3, #0
  02478	0a00000c	 beq         |$LN4@SDHBusRequ|

; 1142 :                 ASSERT(FALSE);

  0247c	e3a03b01	 mov         r3, #1, 22
  02480	e3833076	 orr         r3, r3, #0x76
  02484	e59f2174	 ldr         r2, [pc, #0x174]
  02488	e59f116c	 ldr         r1, [pc, #0x16C]
  0248c	e59f0164	 ldr         r0, [pc, #0x164]
  02490	eb000000	 bl          NKDbgPrintfW
  02494	e6000010	 __debugbreak_ce

; 1143 :                 status = SD_API_STATUS_DEVICE_REMOVED;

  02498	e3a03147	 mov         r3, #0x47, 2
  0249c	e58d3064	 str         r3, [sp, #0x64]

; 1144 :                 pController->pCurrentRequest = NULL;

  024a0	e59d3068	 ldr         r3, [sp, #0x68]
  024a4	e283201c	 add         r2, r3, #0x1C
  024a8	e3a03000	 mov         r3, #0
  024ac	e5823000	 str         r3, [r2]
  024b0		 |$LN4@SDHBusRequ|
  024b0		 |$LN8@SDHBusRequ|

; 1145 :             }
; 1146 :         }
; 1147 :         if (status == SD_API_STATUS_SUCCESS) {

  024b0	e59d3064	 ldr         r3, [sp, #0x64]
  024b4	e3530000	 cmp         r3, #0
  024b8	1a000001	 bne         |$LN3@SDHBusRequ|

; 1148 :             status = SD_API_STATUS_FAST_PATH_SUCCESS;

  024bc	e3a03002	 mov         r3, #2
  024c0	e58d3064	 str         r3, [sp, #0x64]
  024c4		 |$LN3@SDHBusRequ|

; 1149 :         }
; 1150 :         InterruptMask(pController->dwDmaSysIntr,FALSE);

  024c4	e3a01000	 mov         r1, #0
  024c8	e59d3068	 ldr         r3, [sp, #0x68]
  024cc	e2833ea9	 add         r3, r3, #0xA9, 28
  024d0	e5930000	 ldr         r0, [r3]
  024d4	eb000000	 bl          InterruptMask

; 1151 :         InterruptMask(pController->dwSysintrSDMMC,FALSE);

  024d8	e3a01000	 mov         r1, #0
  024dc	e59d3068	 ldr         r3, [sp, #0x68]
  024e0	e283302c	 add         r3, r3, #0x2C
  024e4	e5930000	 ldr         r0, [r3]
  024e8	eb000000	 bl          InterruptMask

; 1152 :         ASSERT(pController->fCurrentRequestFastPath);

  024ec	e59d3068	 ldr         r3, [sp, #0x68]
  024f0	e2833020	 add         r3, r3, #0x20
  024f4	e5933000	 ldr         r3, [r3]
  024f8	e3530000	 cmp         r3, #0
  024fc	0a000002	 beq         |$LN18@SDHBusRequ|
  02500	e3a03001	 mov         r3, #1
  02504	e58d3094	 str         r3, [sp, #0x94]
  02508	ea000007	 b           |$LN19@SDHBusRequ|
  0250c		 |$LN18@SDHBusRequ|
  0250c	e3a03d12	 mov         r3, #0x12, 26
  02510	e59f20e8	 ldr         r2, [pc, #0xE8]
  02514	e59f10e0	 ldr         r1, [pc, #0xE0]
  02518	e59f00d8	 ldr         r0, [pc, #0xD8]
  0251c	eb000000	 bl          NKDbgPrintfW
  02520	e6000010	 __debugbreak_ce
  02524	e3a03000	 mov         r3, #0
  02528	e58d3094	 str         r3, [sp, #0x94]
  0252c		 |$LN19@SDHBusRequ|

; 1153 : 
; 1154 :         fHandled = TRUE;

  0252c	e3a03001	 mov         r3, #1
  02530	e58d306c	 str         r3, [sp, #0x6C]

; 1155 :     }
; 1156 :     else {

  02534	ea000015	 b           |$LN2@SDHBusRequ|
  02538		 |$LN10@SDHBusRequ|

; 1157 :         pRequest->SystemFlags &= ~SD_FAST_PATH_AVAILABLE ;

  02538	e59d30b0	 ldr         r3, [sp, #0xB0]
  0253c	e283300c	 add         r3, r3, #0xC
  02540	e5932000	 ldr         r2, [r3]
  02544	e3e03102	 mvn         r3, #2, 2
  02548	e0022003	 and         r2, r2, r3
  0254c	e59d30b0	 ldr         r3, [sp, #0xB0]
  02550	e283300c	 add         r3, r3, #0xC
  02554	e5832000	 str         r2, [r3]

; 1158 :         status = SDBusIssueRequest( pHCContext, Slot, pRequest );

  02558	e59d20b0	 ldr         r2, [sp, #0xB0]
  0255c	e59d10ac	 ldr         r1, [sp, #0xAC]
  02560	e59d00a8	 ldr         r0, [sp, #0xA8]
  02564	eb000000	 bl          SDBusIssueRequest
  02568	e58d0098	 str         r0, [sp, #0x98]
  0256c	e59d3098	 ldr         r3, [sp, #0x98]
  02570	e58d3064	 str         r3, [sp, #0x64]

; 1159 :         if (status!=SD_API_STATUS_PENDING) { // This has been completed.

  02574	e59d3064	 ldr         r3, [sp, #0x64]
  02578	e3530001	 cmp         r3, #1
  0257c	0a000003	 beq         |$LN1@SDHBusRequ|

; 1160 :             pController->pCurrentRequest = NULL;

  02580	e59d3068	 ldr         r3, [sp, #0x68]
  02584	e283201c	 add         r2, r3, #0x1C
  02588	e3a03000	 mov         r3, #0
  0258c	e5823000	 str         r3, [r2]
  02590		 |$LN1@SDHBusRequ|
  02590		 |$LN2@SDHBusRequ|

; 1161 :         }
; 1162 :     }
; 1163 :     RELEASE_LOCK(pController);

  02590	e59d3068	 ldr         r3, [sp, #0x68]
  02594	e2833c0a	 add         r3, r3, #0xA, 24
  02598	e28300d8	 add         r0, r3, #0xD8
  0259c	eb000000	 bl          LeaveCriticalSection

; 1164 :     RETAILCELOG(_CeLogEnable,CELID_RAW_WCHAR, (PVOID)OutData, sizeof(OutData));
; 1165 :     DEBUGMSG(SDCARD_ZONE_FUNC,(TEXT("-SDHBusRequestHandler pRequest=%x"),pRequest));

  025a0	e59f304c	 ldr         r3, [pc, #0x4C]
  025a4	e5933440	 ldr         r3, [r3, #0x440]
  025a8	e3130b02	 tst         r3, #2, 22
  025ac	0a000005	 beq         |$LN20@SDHBusRequ|
  025b0	e59d10b0	 ldr         r1, [sp, #0xB0]
  025b4	e59f0034	 ldr         r0, [pc, #0x34]
  025b8	eb000000	 bl          NKDbgPrintfW
  025bc	e3a03001	 mov         r3, #1
  025c0	e58d309c	 str         r3, [sp, #0x9C]
  025c4	ea000001	 b           |$LN21@SDHBusRequ|
  025c8		 |$LN20@SDHBusRequ|
  025c8	e3a03000	 mov         r3, #0
  025cc	e58d309c	 str         r3, [sp, #0x9C]
  025d0		 |$LN21@SDHBusRequ|

; 1166 :     return status;

  025d0	e59d0070	 ldr         r0, [sp, #0x70]
  025d4	eb000000	 bl          __security_check_cookie
  025d8	e59d3064	 ldr         r3, [sp, #0x64]
  025dc	e58d3074	 str         r3, [sp, #0x74]

; 1167 : }

  025e0	e59d0074	 ldr         r0, [sp, #0x74]
  025e4	e28dd0a0	 add         sp, sp, #0xA0
  025e8	e89d6000	 ldmia       sp, {sp, lr}
  025ec	e12fff1e	 bx          lr
  025f0		 |$LN25@SDHBusRequ|
  025f0		 |$LN26@SDHBusRequ|
  025f0	00000000	 DCD         |??_C@_1EE@KKDBGKJK@?$AA?9?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?$CF@|
  025f4		 |$LN27@SDHBusRequ|
  025f4	00000000	 DCD         |dpCurSettings|
  025f8		 |$LN28@SDHBusRequ|
  025f8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  025fc		 |$LN29@SDHBusRequ|
  025fc	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  02600		 |$LN30@SDHBusRequ|
  02600	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02604		 |$LN31@SDHBusRequ|
  02604	00000000	 DCD         |??_C@_1EE@CPMNDMBH@?$AA?$CL?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAp?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AA?$CF@|
  02608		 |$LN32@SDHBusRequ|
  02608	00000000	 DCD         |??_C@_1DC@GCHEONHF@?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAO?$AAu?$AAt?$AA?$AA@|
  0260c		 |$LN33@SDHBusRequ|
  0260c	00000000	 DCD         |??_C@_1DA@PGCECPKD@?$AAS?$AAD?$AAH?$AAB?$AAu?$AAs?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI?$AAN?$AA?$AA@|
  02610		 |$LN34@SDHBusRequ|
  02610	00000000	 DCD         |__security_cookie|
  02614		 |$M44963|

			 ENDP  ; |SDHBusRequestHandler|

	EXPORT	|??_C@_1IC@FNDGBLGP@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAB?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@JCNBBHAA@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@KGFHOGPO@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@BPKBODJN@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAw@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@PKADFCGN@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@GJNHMAMC@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@PEDCFGGI@?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAI?$AAN?$AAT?$AA?5?$AA?$CI?$AAs?$AAt?$AAi?$AAl?$AAl?$AA?$CJ?$AA?$CB?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@PMIHFPBM@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@NIJPCEGO@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@BFBGBECH@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@MNFKFMEJ@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@HHBOFLKI@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|SDHSlotOptionHandler|
	IMPORT	|IsCardWriteProtected|

  00060			 AREA	 |.pdata|, PDATA
|$T45019| DCD	|$LN68@SDHSlotOpt|
	DCD	0x40017e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@FNDGBLGP@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAB?$AAl?$AAo?$AAc@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "B", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, " ", 0x0, "L", 0x0, "e", 0x0, "n"
	DCB	0x0, "g", 0x0, "t", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, ",", 0x0, " ", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@JCNBBHAA@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "L", 0x0, "e", 0x0, "n", 0x0, "g"
	DCB	0x0, "t", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, ",", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "B", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@KGFHOGPO@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAw@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "C", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "e", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BPKBODJN@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAw@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "C", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "p", 0x0, "r", 0x0, "o", 0x0, "t", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@PKADFCGN@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "S", 0x0, "D", 0x0, "H", 0x0, "C", 0x0, "D"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, "P", 0x0, "r", 0x0, "o", 0x0, "t"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, ":", 0x0, " "
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "l", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@GJNHMAMC@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "S", 0x0, "D", 0x0, "I", 0x0, "O"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "s", 0x0, " ", 0x0, ":"
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "l"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@PEDCFGGI@?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAI?$AAN?$AAT?$AA?5?$AA?$CI?$AAs?$AAt?$AAi?$AAl?$AAl?$AA?$CJ?$AA?$CB?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "I", 0x0, "O", 0x0, " ", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, " ", 0x0, "(", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "l", 0x0, "l", 0x0, ")", 0x0, "!", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@PMIHFPBM@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "S", 0x0, "D", 0x0, "I", 0x0, "O", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "s", 0x0, " ", 0x0, ":", 0x0, " "
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "l", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@NIJPCEGO@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "l"
	DCB	0x0, "o", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, ":", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "4", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@BFBGBECH@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "l"
	DCB	0x0, "o", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, ":", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "1", 0x0, " ", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e"
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@MNFKFMEJ@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "l"
	DCB	0x0, "o", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "f", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, ":", 0x0, " ", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@HHBOFLKI@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "H", 0x0, "S", 0x0, "l", 0x0, "o", 0x0, "t"
	DCB	0x0, "O", 0x0, "p", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "S", 0x0, "l"
	DCB	0x0, "o", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, " ", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02614			 AREA	 |.text|, CODE, ARM

  02614		 |SDHSlotOptionHandler| PROC

; 1184 : {

  02614		 |$LN68@SDHSlotOpt|
  02614	e1a0c00d	 mov         r12, sp
  02618	e92d000f	 stmdb       sp!, {r0 - r3}
  0261c	e92d5000	 stmdb       sp!, {r12, lr}
  02620	e24dd054	 sub         sp, sp, #0x54
  02624		 |$M45016|

; 1185 :     SD_API_STATUS status = SD_API_STATUS_SUCCESS;   // status

  02624	e3a03000	 mov         r3, #0
  02628	e58d3004	 str         r3, [sp, #4]

; 1186 :     PSDH_HARDWARE_CONTEXT    pController;         // the controller
; 1187 :     PSD_HOST_BLOCK_CAPABILITY  pBlockCaps;          // queried block capabilities
; 1188 : 
; 1189 :         // get our extension 
; 1190 :     pController = GetExtensionFromHCDContext(PSDH_HARDWARE_CONTEXT, pHCContext);

  0262c	e59d305c	 ldr         r3, [sp, #0x5C]
  02630	e283304c	 add         r3, r3, #0x4C
  02634	e5933000	 ldr         r3, [r3]
  02638	e58d3008	 str         r3, [sp, #8]

; 1191 : 
; 1192 :     switch (Option) {

  0263c	e59d3064	 ldr         r3, [sp, #0x64]
  02640	e58d3014	 str         r3, [sp, #0x14]
  02644	e59d3014	 ldr         r3, [sp, #0x14]
  02648	e353000b	 cmp         r3, #0xB
  0264c	8a000159	 bhi         |$LN1@SDHSlotOpt|
  02650	e59d2014	 ldr         r2, [sp, #0x14]
  02654	e1a03102	 mov         r3, r2, lsl #2
  02658	e083300f	 add         r3, r3, pc
  0265c	e5933004	 ldr         r3, [r3, #4]
  02660	e08ff003	 add         pc, pc, r3
  02664		 |$LN53@SDHSlotOpt|
  02664		 |$LN52@SDHSlotOpt|
  02664		 |$LN54@SDHSlotOpt|
  02664	0000002c	 DCD         0x2c
  02668		 |$LN55@SDHSlotOpt|
  02668	00000064	 DCD         0x64
  0266c		 |$LN56@SDHSlotOpt|
  0266c	00000144	 DCD         0x144
  02670		 |$LN57@SDHSlotOpt|
  02670	00000280	 DCD         0x280
  02674		 |$LN58@SDHSlotOpt|
  02674	0000019c	 DCD         0x19c
  02678		 |$LN59@SDHSlotOpt|
  02678	000002d8	 DCD         0x2d8
  0267c		 |$LN60@SDHSlotOpt|
  0267c	0000039c	 DCD         0x39c
  02680		 |$LN61@SDHSlotOpt|
  02680	00000550	 DCD         0x550
  02684		 |$LN62@SDHSlotOpt|
  02684	00000550	 DCD         0x550
  02688		 |$LN63@SDHSlotOpt|
  02688	00000550	 DCD         0x550
  0268c		 |$LN64@SDHSlotOpt|
  0268c	00000550	 DCD         0x550
  02690		 |$LN65@SDHSlotOpt|
  02690	000004cc	 DCD         0x4cc
  02694		 |$LN23@SDHSlotOpt|

; 1193 : 
; 1194 :         case SDHCDSetSlotPower:
; 1195 :             DbgPrintZo(SDCARD_ZONE_INIT, 
; 1196 :                 (TEXT("SDHSlotOptionHandler - called - SetSlotPower : 0x%08X  \n"), 
; 1197 :                 *((PDWORD)pData)));

  02694	e59f3540	 ldr         r3, [pc, #0x540]
  02698	e5933440	 ldr         r3, [r3, #0x440]
  0269c	e3130a02	 tst         r3, #2, 20
  026a0	0a000006	 beq         |$LN28@SDHSlotOpt|
  026a4	e59d3068	 ldr         r3, [sp, #0x68]
  026a8	e5931000	 ldr         r1, [r3]
  026ac	e59f0554	 ldr         r0, [pc, #0x554]
  026b0	eb000000	 bl          SDCardDebugOutput
  026b4	e3a03001	 mov         r3, #1
  026b8	e58d3018	 str         r3, [sp, #0x18]
  026bc	ea000001	 b           |$LN29@SDHSlotOpt|
  026c0		 |$LN28@SDHSlotOpt|
  026c0	e3a03000	 mov         r3, #0
  026c4	e58d3018	 str         r3, [sp, #0x18]
  026c8		 |$LN29@SDHSlotOpt|

; 1198 :             break;

  026c8	ea00013c	 b           |$LN24@SDHSlotOpt|
  026cc		 |$LN22@SDHSlotOpt|

; 1199 : 
; 1200 :         case SDHCDSetSlotInterface:
; 1201 :             DbgPrintZo(SDCARD_ZONE_INIT, 
; 1202 :                 (TEXT("SDHSlotOptionHandler - called - SetSlotInterface : Clock Setting: %d \n"), 
; 1203 :                 ((PSD_CARD_INTERFACE)pData)->ClockRate));

  026cc	e59f3508	 ldr         r3, [pc, #0x508]
  026d0	e5933440	 ldr         r3, [r3, #0x440]
  026d4	e3130a02	 tst         r3, #2, 20
  026d8	0a000007	 beq         |$LN30@SDHSlotOpt|
  026dc	e59d3068	 ldr         r3, [sp, #0x68]
  026e0	e2833004	 add         r3, r3, #4
  026e4	e5931000	 ldr         r1, [r3]
  026e8	e59f0514	 ldr         r0, [pc, #0x514]
  026ec	eb000000	 bl          SDCardDebugOutput
  026f0	e3a03001	 mov         r3, #1
  026f4	e58d301c	 str         r3, [sp, #0x1C]
  026f8	ea000001	 b           |$LN31@SDHSlotOpt|
  026fc		 |$LN30@SDHSlotOpt|
  026fc	e3a03000	 mov         r3, #0
  02700	e58d301c	 str         r3, [sp, #0x1C]
  02704		 |$LN31@SDHSlotOpt|

; 1204 :             
; 1205 :             if (SD_INTERFACE_SD_MMC_1BIT == 
; 1206 :                 ((PSD_CARD_INTERFACE)pData)->InterfaceMode) {

  02704	e59d3068	 ldr         r3, [sp, #0x68]
  02708	e5933000	 ldr         r3, [r3]
  0270c	e3530000	 cmp         r3, #0
  02710	1a000010	 bne         |$LN21@SDHSlotOpt|

; 1207 :                 DbgPrintZo(SDCARD_ZONE_INIT, 
; 1208 :                         (TEXT("SDHSlotOptionHandler - called - SetSlotInterface : setting for 1 bit mode \n")));

  02714	e59f34c0	 ldr         r3, [pc, #0x4C0]
  02718	e5933440	 ldr         r3, [r3, #0x440]
  0271c	e3130a02	 tst         r3, #2, 20
  02720	0a000004	 beq         |$LN32@SDHSlotOpt|
  02724	e59f04d4	 ldr         r0, [pc, #0x4D4]
  02728	eb000000	 bl          SDCardDebugOutput
  0272c	e3a03001	 mov         r3, #1
  02730	e58d3020	 str         r3, [sp, #0x20]
  02734	ea000001	 b           |$LN33@SDHSlotOpt|
  02738		 |$LN32@SDHSlotOpt|
  02738	e3a03000	 mov         r3, #0
  0273c	e58d3020	 str         r3, [sp, #0x20]
  02740		 |$LN33@SDHSlotOpt|

; 1209 :                 pController->f4BitMode = FALSE;

  02740	e59d3008	 ldr         r3, [sp, #8]
  02744	e2833c0d	 add         r3, r3, #0xD, 24
  02748	e283203c	 add         r2, r3, #0x3C
  0274c	e3a03000	 mov         r3, #0
  02750	e5823000	 str         r3, [r2]

; 1210 :             } else {

  02754	ea00000f	 b           |$LN20@SDHSlotOpt|
  02758		 |$LN21@SDHSlotOpt|

; 1211 :                 DbgPrintZo(SDCARD_ZONE_INIT, 
; 1212 :                         (TEXT("SDHSlotOptionHandler - called - SetSlotInterface : setting for 4 bit mode \n")));

  02758	e59f347c	 ldr         r3, [pc, #0x47C]
  0275c	e5933440	 ldr         r3, [r3, #0x440]
  02760	e3130a02	 tst         r3, #2, 20
  02764	0a000004	 beq         |$LN34@SDHSlotOpt|
  02768	e59f048c	 ldr         r0, [pc, #0x48C]
  0276c	eb000000	 bl          SDCardDebugOutput
  02770	e3a03001	 mov         r3, #1
  02774	e58d3024	 str         r3, [sp, #0x24]
  02778	ea000001	 b           |$LN35@SDHSlotOpt|
  0277c		 |$LN34@SDHSlotOpt|
  0277c	e3a03000	 mov         r3, #0
  02780	e58d3024	 str         r3, [sp, #0x24]
  02784		 |$LN35@SDHSlotOpt|

; 1213 :                 pController->f4BitMode = TRUE;

  02784	e59d3008	 ldr         r3, [sp, #8]
  02788	e2833c0d	 add         r3, r3, #0xD, 24
  0278c	e283203c	 add         r2, r3, #0x3C
  02790	e3a03001	 mov         r3, #1
  02794	e5823000	 str         r3, [r2]
  02798		 |$LN20@SDHSlotOpt|

; 1214 :             }
; 1215 :                 // set rate
; 1216 :             SDSetRate(pController, &((PSD_CARD_INTERFACE)pData)->ClockRate);

  02798	e59d3068	 ldr         r3, [sp, #0x68]
  0279c	e2831004	 add         r1, r3, #4
  027a0	e59d0008	 ldr         r0, [sp, #8]
  027a4	eb000000	 bl          SDSetRate

; 1217 :             
; 1218 :             break;

  027a8	ea000104	 b           |$LN24@SDHSlotOpt|
  027ac		 |$LN19@SDHSlotOpt|

; 1219 : 
; 1220 :         case SDHCDEnableSDIOInterrupts:
; 1221 :             
; 1222 :             DbgPrintZo(SDCARD_ZONE_INIT, 
; 1223 :                 (TEXT("SDHSlotOptionHandler - called - EnableSDIOInterrupts : on slot %d  \n"),
; 1224 :                 SlotNumber));

  027ac	e59f3428	 ldr         r3, [pc, #0x428]
  027b0	e5933440	 ldr         r3, [r3, #0x440]
  027b4	e3130a02	 tst         r3, #2, 20
  027b8	0a000005	 beq         |$LN36@SDHSlotOpt|
  027bc	e59d1060	 ldr         r1, [sp, #0x60]
  027c0	e59f0430	 ldr         r0, [pc, #0x430]
  027c4	eb000000	 bl          SDCardDebugOutput
  027c8	e3a03001	 mov         r3, #1
  027cc	e58d3028	 str         r3, [sp, #0x28]
  027d0	ea000001	 b           |$LN37@SDHSlotOpt|
  027d4		 |$LN36@SDHSlotOpt|
  027d4	e3a03000	 mov         r3, #0
  027d8	e58d3028	 str         r3, [sp, #0x28]
  027dc		 |$LN37@SDHSlotOpt|

; 1225 : 
; 1226 :             SDIO_INTERRUPT_ON(pController);

  027dc	e3a02000	 mov         r2, #0
  027e0	e3e01b02	 mvn         r1, #2, 22
  027e4	e59d0008	 ldr         r0, [sp, #8]
  027e8	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1227 :             pController->fSDIOEnabled = TRUE;

  027ec	e59d3008	 ldr         r3, [sp, #8]
  027f0	e2833c0d	 add         r3, r3, #0xD, 24
  027f4	e2832034	 add         r2, r3, #0x34
  027f8	e3a03001	 mov         r3, #1
  027fc	e5823000	 str         r3, [r2]

; 1228 : 
; 1229 :             break;

  02800	ea0000ee	 b           |$LN24@SDHSlotOpt|
  02804		 |$LN18@SDHSlotOpt|

; 1230 : 
; 1231 :         case SDHCDAckSDIOInterrupt:
; 1232 : 
; 1233 :                 // acquire the lock to block the SDIO interrupt thread
; 1234 :             ACQUIRE_LOCK(pController);

  02804	e59d3008	 ldr         r3, [sp, #8]
  02808	e2833c0a	 add         r3, r3, #0xA, 24
  0280c	e28300d8	 add         r0, r3, #0xD8
  02810	eb000000	 bl          EnterCriticalSection

; 1235 : 
; 1236 :             if ( ( READ_MMC_REGISTER_DWORD( pController, MMC_STAT ) & 0x8000 ) &&
; 1237 :                  ( READ_MMC_REGISTER_DWORD( pController, MMC_IREG ) & 0x0800 ) &&
; 1238 :                  pController->fSDIOEnabled )

  02814	e3a01004	 mov         r1, #4
  02818	e59d0008	 ldr         r0, [sp, #8]
  0281c	eb000000	 bl          READ_MMC_REGISTER_DWORD
  02820	e58d002c	 str         r0, [sp, #0x2C]
  02824	e59d302c	 ldr         r3, [sp, #0x2C]
  02828	e3130902	 tst         r3, #2, 18
  0282c	0a00001e	 beq         |$LN17@SDHSlotOpt|
  02830	e3a0102c	 mov         r1, #0x2C
  02834	e59d0008	 ldr         r0, [sp, #8]
  02838	eb000000	 bl          READ_MMC_REGISTER_DWORD
  0283c	e58d0030	 str         r0, [sp, #0x30]
  02840	e59d3030	 ldr         r3, [sp, #0x30]
  02844	e3130b02	 tst         r3, #2, 22
  02848	0a000017	 beq         |$LN17@SDHSlotOpt|
  0284c	e59d3008	 ldr         r3, [sp, #8]
  02850	e2833c0d	 add         r3, r3, #0xD, 24
  02854	e2833034	 add         r3, r3, #0x34
  02858	e5933000	 ldr         r3, [r3]
  0285c	e3530000	 cmp         r3, #0
  02860	0a000011	 beq         |$LN17@SDHSlotOpt|

; 1239 :             {
; 1240 :                 DbgPrintZo(/*SDCARD_ZONE_INIT*/SDH_INTERRUPT_ZONE, (TEXT("SDIO INT (still)!\n")));

  02864	e59f3370	 ldr         r3, [pc, #0x370]
  02868	e5933440	 ldr         r3, [r3, #0x440]
  0286c	e3130001	 tst         r3, #1
  02870	0a000004	 beq         |$LN38@SDHSlotOpt|
  02874	e59f0378	 ldr         r0, [pc, #0x378]
  02878	eb000000	 bl          SDCardDebugOutput
  0287c	e3a03001	 mov         r3, #1
  02880	e58d3034	 str         r3, [sp, #0x34]
  02884	ea000001	 b           |$LN39@SDHSlotOpt|
  02888		 |$LN38@SDHSlotOpt|
  02888	e3a03000	 mov         r3, #0
  0288c	e58d3034	 str         r3, [sp, #0x34]
  02890		 |$LN39@SDHSlotOpt|

; 1241 :                 SDHCDIndicateSlotStateChange(pController->pHCContext, 
; 1242 :                                                 0,
; 1243 :                                                 DeviceInterrupting);

  02890	e3a02003	 mov         r2, #3
  02894	e3a01000	 mov         r1, #0
  02898	e59d3008	 ldr         r3, [sp, #8]
  0289c	e2833018	 add         r3, r3, #0x18
  028a0	e5930000	 ldr         r0, [r3]
  028a4	eb000000	 bl          SDHCDIndicateSlotStateChange
  028a8	ea000009	 b           |$LN16@SDHSlotOpt|
  028ac		 |$LN17@SDHSlotOpt|

; 1244 :             }
; 1245 :             else if( pController->fSDIOEnabled )

  028ac	e59d3008	 ldr         r3, [sp, #8]
  028b0	e2833c0d	 add         r3, r3, #0xD, 24
  028b4	e2833034	 add         r3, r3, #0x34
  028b8	e5933000	 ldr         r3, [r3]
  028bc	e3530000	 cmp         r3, #0
  028c0	0a000003	 beq         |$LN15@SDHSlotOpt|

; 1246 :             {
; 1247 :                 SDIO_INTERRUPT_ON(pController);

  028c4	e3a02000	 mov         r2, #0
  028c8	e3e01b02	 mvn         r1, #2, 22
  028cc	e59d0008	 ldr         r0, [sp, #8]
  028d0	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR
  028d4		 |$LN15@SDHSlotOpt|
  028d4		 |$LN16@SDHSlotOpt|

; 1248 :             }
; 1249 : 
; 1250 :             RELEASE_LOCK(pController);

  028d4	e59d3008	 ldr         r3, [sp, #8]
  028d8	e2833c0a	 add         r3, r3, #0xA, 24
  028dc	e28300d8	 add         r0, r3, #0xD8
  028e0	eb000000	 bl          LeaveCriticalSection

; 1251 : 
; 1252 :             break;

  028e4	ea0000b5	 b           |$LN24@SDHSlotOpt|
  028e8		 |$LN14@SDHSlotOpt|

; 1253 : 
; 1254 :         case SDHCDDisableSDIOInterrupts:
; 1255 :             DbgPrintZo(SDCARD_ZONE_INIT, 
; 1256 :                 (TEXT("SDHSlotOptionHandler - called - DisableSDIOInterrupts : on slot %d  \n"),
; 1257 :                 SlotNumber));

  028e8	e59f32ec	 ldr         r3, [pc, #0x2EC]
  028ec	e5933440	 ldr         r3, [r3, #0x440]
  028f0	e3130a02	 tst         r3, #2, 20
  028f4	0a000005	 beq         |$LN40@SDHSlotOpt|
  028f8	e59d1060	 ldr         r1, [sp, #0x60]
  028fc	e59f02ec	 ldr         r0, [pc, #0x2EC]
  02900	eb000000	 bl          SDCardDebugOutput
  02904	e3a03001	 mov         r3, #1
  02908	e58d3038	 str         r3, [sp, #0x38]
  0290c	ea000001	 b           |$LN41@SDHSlotOpt|
  02910		 |$LN40@SDHSlotOpt|
  02910	e3a03000	 mov         r3, #0
  02914	e58d3038	 str         r3, [sp, #0x38]
  02918		 |$LN41@SDHSlotOpt|

; 1258 : 
; 1259 :             SDIO_INTERRUPT_OFF(pController);

  02918	e3a02b02	 mov         r2, #2, 22
  0291c	e3e01000	 mvn         r1, #0
  02920	e59d0008	 ldr         r0, [sp, #8]
  02924	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1260 :             pController->fSDIOEnabled = FALSE;

  02928	e59d3008	 ldr         r3, [sp, #8]
  0292c	e2833c0d	 add         r3, r3, #0xD, 24
  02930	e2832034	 add         r2, r3, #0x34
  02934	e3a03000	 mov         r3, #0
  02938	e5823000	 str         r3, [r2]

; 1261 : 
; 1262 :             break;

  0293c	ea00009f	 b           |$LN24@SDHSlotOpt|
  02940		 |$LN13@SDHSlotOpt|

; 1263 : 
; 1264 :         case SDHCDGetWriteProtectStatus:
; 1265 :             
; 1266 :             DbgPrintZo(SDCARD_ZONE_INIT, 
; 1267 :                 (TEXT("SDHSlotOptionHandler - called - SDHCDGetWriteProtectStatus : on slot %d  \n"),
; 1268 :                  SlotNumber)); 

  02940	e59f3294	 ldr         r3, [pc, #0x294]
  02944	e5933440	 ldr         r3, [r3, #0x440]
  02948	e3130a02	 tst         r3, #2, 20
  0294c	0a000005	 beq         |$LN42@SDHSlotOpt|
  02950	e59d1060	 ldr         r1, [sp, #0x60]
  02954	e59f0290	 ldr         r0, [pc, #0x290]
  02958	eb000000	 bl          SDCardDebugOutput
  0295c	e3a03001	 mov         r3, #1
  02960	e58d303c	 str         r3, [sp, #0x3C]
  02964	ea000001	 b           |$LN43@SDHSlotOpt|
  02968		 |$LN42@SDHSlotOpt|
  02968	e3a03000	 mov         r3, #0
  0296c	e58d303c	 str         r3, [sp, #0x3C]
  02970		 |$LN43@SDHSlotOpt|

; 1269 :             
; 1270 :             if( IsCardWriteProtected() ) {

  02970	eb000000	 bl          IsCardWriteProtected
  02974	e58d0040	 str         r0, [sp, #0x40]
  02978	e59d3040	 ldr         r3, [sp, #0x40]
  0297c	e3530000	 cmp         r3, #0
  02980	0a00000f	 beq         |$LN12@SDHSlotOpt|

; 1271 :                 ((PSD_CARD_INTERFACE)pData)->WriteProtected = TRUE;

  02984	e59d3068	 ldr         r3, [sp, #0x68]
  02988	e2832008	 add         r2, r3, #8
  0298c	e3a03001	 mov         r3, #1
  02990	e5823000	 str         r3, [r2]

; 1272 :                 DbgPrintZo(SDCARD_ZONE_INIT, (TEXT("SDHSlotOptionHandler - Card is write protected \n"))); 

  02994	e59f3240	 ldr         r3, [pc, #0x240]
  02998	e5933440	 ldr         r3, [r3, #0x440]
  0299c	e3130a02	 tst         r3, #2, 20
  029a0	0a000004	 beq         |$LN44@SDHSlotOpt|
  029a4	e59f023c	 ldr         r0, [pc, #0x23C]
  029a8	eb000000	 bl          SDCardDebugOutput
  029ac	e3a03001	 mov         r3, #1
  029b0	e58d3044	 str         r3, [sp, #0x44]
  029b4	ea000001	 b           |$LN45@SDHSlotOpt|
  029b8		 |$LN44@SDHSlotOpt|
  029b8	e3a03000	 mov         r3, #0
  029bc	e58d3044	 str         r3, [sp, #0x44]
  029c0		 |$LN45@SDHSlotOpt|

; 1273 :             } else {

  029c0	ea00000e	 b           |$LN11@SDHSlotOpt|
  029c4		 |$LN12@SDHSlotOpt|

; 1274 :                 ((PSD_CARD_INTERFACE)pData)->WriteProtected = FALSE;

  029c4	e59d3068	 ldr         r3, [sp, #0x68]
  029c8	e2832008	 add         r2, r3, #8
  029cc	e3a03000	 mov         r3, #0
  029d0	e5823000	 str         r3, [r2]

; 1275 :                 DbgPrintZo(SDCARD_ZONE_INIT, (TEXT("SDHSlotOptionHandler - Card is write enabled \n"))); 

  029d4	e59f3200	 ldr         r3, [pc, #0x200]
  029d8	e5933440	 ldr         r3, [r3, #0x440]
  029dc	e3130a02	 tst         r3, #2, 20
  029e0	0a000004	 beq         |$LN46@SDHSlotOpt|
  029e4	e59f01f8	 ldr         r0, [pc, #0x1F8]
  029e8	eb000000	 bl          SDCardDebugOutput
  029ec	e3a03001	 mov         r3, #1
  029f0	e58d3048	 str         r3, [sp, #0x48]
  029f4	ea000001	 b           |$LN47@SDHSlotOpt|
  029f8		 |$LN46@SDHSlotOpt|
  029f8	e3a03000	 mov         r3, #0
  029fc	e58d3048	 str         r3, [sp, #0x48]
  02a00		 |$LN47@SDHSlotOpt|
  02a00		 |$LN11@SDHSlotOpt|

; 1276 :             }
; 1277 : 
; 1278 :             break;

  02a00	ea00006e	 b           |$LN24@SDHSlotOpt|
  02a04		 |$LN10@SDHSlotOpt|

; 1279 : 
; 1280 :          case SDHCDQueryBlockCapability:
; 1281 :             pBlockCaps = (PSD_HOST_BLOCK_CAPABILITY)pData;

  02a04	e59d3068	 ldr         r3, [sp, #0x68]
  02a08	e58d3000	 str         r3, [sp]

; 1282 : 
; 1283 :              DbgPrintZo(SDCARD_ZONE_INIT, 
; 1284 :              (TEXT("SDHSlotOptionHandler: Read Block Length: %d , Read Blocks: %d\n"), 
; 1285 :                 pBlockCaps->ReadBlockSize, 
; 1286 :                 pBlockCaps->ReadBlocks));

  02a0c	e59f31c8	 ldr         r3, [pc, #0x1C8]
  02a10	e5933440	 ldr         r3, [r3, #0x440]
  02a14	e3130a02	 tst         r3, #2, 20
  02a18	0a000009	 beq         |$LN48@SDHSlotOpt|
  02a1c	e59d3000	 ldr         r3, [sp]
  02a20	e2833004	 add         r3, r3, #4
  02a24	e1d320b0	 ldrh        r2, [r3]
  02a28	e59d3000	 ldr         r3, [sp]
  02a2c	e1d310b0	 ldrh        r1, [r3]
  02a30	e59f01a8	 ldr         r0, [pc, #0x1A8]
  02a34	eb000000	 bl          SDCardDebugOutput
  02a38	e3a03001	 mov         r3, #1
  02a3c	e58d304c	 str         r3, [sp, #0x4C]
  02a40	ea000001	 b           |$LN49@SDHSlotOpt|
  02a44		 |$LN48@SDHSlotOpt|
  02a44	e3a03000	 mov         r3, #0
  02a48	e58d304c	 str         r3, [sp, #0x4C]
  02a4c		 |$LN49@SDHSlotOpt|

; 1287 :              DbgPrintZo(SDCARD_ZONE_INIT, 
; 1288 :              (TEXT("SDHSlotOptionHandler: Write Block Length: %d , Write Blocks: %d\n"), 
; 1289 :                 pBlockCaps->WriteBlockSize, 
; 1290 :                 pBlockCaps->WriteBlocks));

  02a4c	e59f3188	 ldr         r3, [pc, #0x188]
  02a50	e5933440	 ldr         r3, [r3, #0x440]
  02a54	e3130a02	 tst         r3, #2, 20
  02a58	0a00000a	 beq         |$LN50@SDHSlotOpt|
  02a5c	e59d3000	 ldr         r3, [sp]
  02a60	e2833006	 add         r3, r3, #6
  02a64	e1d320b0	 ldrh        r2, [r3]
  02a68	e59d3000	 ldr         r3, [sp]
  02a6c	e2833002	 add         r3, r3, #2
  02a70	e1d310b0	 ldrh        r1, [r3]
  02a74	e59f015c	 ldr         r0, [pc, #0x15C]
  02a78	eb000000	 bl          SDCardDebugOutput
  02a7c	e3a03001	 mov         r3, #1
  02a80	e58d3050	 str         r3, [sp, #0x50]
  02a84	ea000001	 b           |$LN51@SDHSlotOpt|
  02a88		 |$LN50@SDHSlotOpt|
  02a88	e3a03000	 mov         r3, #0
  02a8c	e58d3050	 str         r3, [sp, #0x50]
  02a90		 |$LN51@SDHSlotOpt|

; 1291 : 
; 1292 :                 // the PXA27x controller can only handle up to 1024 bytes
; 1293 :                 // with a minimum of 32 bytes per transfer
; 1294 :             if (pBlockCaps->ReadBlockSize > SDH_MAX_BLOCK_SIZE) {

  02a90	e59d3000	 ldr         r3, [sp]
  02a94	e1d330b0	 ldrh        r3, [r3]
  02a98	e1a02003	 mov         r2, r3
  02a9c	e3a03c03	 mov         r3, #3, 24
  02aa0	e38330ff	 orr         r3, r3, #0xFF
  02aa4	e1520003	 cmp         r2, r3
  02aa8	da000003	 ble         |$LN9@SDHSlotOpt|

; 1295 :                 pBlockCaps->ReadBlockSize = SDH_MAX_BLOCK_SIZE;

  02aac	e59d2000	 ldr         r2, [sp]
  02ab0	e3a03c03	 mov         r3, #3, 24
  02ab4	e38330ff	 orr         r3, r3, #0xFF
  02ab8	e1c230b0	 strh        r3, [r2]
  02abc		 |$LN9@SDHSlotOpt|

; 1296 :             }
; 1297 : 
; 1298 :             if (pBlockCaps->ReadBlockSize < SDH_MIN_BLOCK_SIZE ) {

  02abc	e59d3000	 ldr         r3, [sp]
  02ac0	e1d330b0	 ldrh        r3, [r3]
  02ac4	e3530020	 cmp         r3, #0x20
  02ac8	aa000002	 bge         |$LN8@SDHSlotOpt|

; 1299 :                 pBlockCaps->ReadBlockSize = SDH_MIN_BLOCK_SIZE;

  02acc	e59d2000	 ldr         r2, [sp]
  02ad0	e3a03020	 mov         r3, #0x20
  02ad4	e1c230b0	 strh        r3, [r2]
  02ad8		 |$LN8@SDHSlotOpt|

; 1300 :             }
; 1301 : 
; 1302 :             if (pBlockCaps->WriteBlockSize > SDH_MAX_BLOCK_SIZE) {

  02ad8	e59d3000	 ldr         r3, [sp]
  02adc	e2833002	 add         r3, r3, #2
  02ae0	e1d330b0	 ldrh        r3, [r3]
  02ae4	e1a02003	 mov         r2, r3
  02ae8	e3a03c03	 mov         r3, #3, 24
  02aec	e38330ff	 orr         r3, r3, #0xFF
  02af0	e1520003	 cmp         r2, r3
  02af4	da000004	 ble         |$LN7@SDHSlotOpt|

; 1303 :                 pBlockCaps->WriteBlockSize = SDH_MAX_BLOCK_SIZE;

  02af8	e59d3000	 ldr         r3, [sp]
  02afc	e2832002	 add         r2, r3, #2
  02b00	e3a03c03	 mov         r3, #3, 24
  02b04	e38330ff	 orr         r3, r3, #0xFF
  02b08	e1c230b0	 strh        r3, [r2]
  02b0c		 |$LN7@SDHSlotOpt|

; 1304 :             }
; 1305 :             
; 1306 :             if (pBlockCaps->WriteBlockSize < SDH_MIN_BLOCK_SIZE ) {

  02b0c	e59d3000	 ldr         r3, [sp]
  02b10	e2833002	 add         r3, r3, #2
  02b14	e1d330b0	 ldrh        r3, [r3]
  02b18	e3530020	 cmp         r3, #0x20
  02b1c	aa000003	 bge         |$LN6@SDHSlotOpt|

; 1307 :                 pBlockCaps->WriteBlockSize = SDH_MIN_BLOCK_SIZE;

  02b20	e59d3000	 ldr         r3, [sp]
  02b24	e2832002	 add         r2, r3, #2
  02b28	e3a03020	 mov         r3, #0x20
  02b2c	e1c230b0	 strh        r3, [r2]
  02b30		 |$LN6@SDHSlotOpt|

; 1308 :             }
; 1309 : 
; 1310 :                 // the PXA27x controller can handle 64K blocks,
; 1311 :                 // we leave the number of blocks alone
; 1312 :              
; 1313 :             break;

  02b30	ea000022	 b           |$LN24@SDHSlotOpt|
  02b34		 |$LN5@SDHSlotOpt|

; 1314 : 
; 1315 :         case SDHCDGetSlotInfo:
; 1316 :             if( OptionSize != sizeof(SDCARD_HC_SLOT_INFO) || pData == NULL )

  02b34	e59d306c	 ldr         r3, [sp, #0x6C]
  02b38	e3530014	 cmp         r3, #0x14
  02b3c	1a000002	 bne         |$LN3@SDHSlotOpt|
  02b40	e59d3068	 ldr         r3, [sp, #0x68]
  02b44	e3530000	 cmp         r3, #0
  02b48	1a000002	 bne         |$LN4@SDHSlotOpt|
  02b4c		 |$LN3@SDHSlotOpt|

; 1317 :             {
; 1318 :                 status = SD_API_STATUS_INVALID_PARAMETER;

  02b4c	e3a0311f	 mov         r3, #0x1F, 2
  02b50	e58d3004	 str         r3, [sp, #4]

; 1319 :             }
; 1320 :             else

  02b54	ea000016	 b           |$LN2@SDHSlotOpt|
  02b58		 |$LN4@SDHSlotOpt|

; 1321 :             {
; 1322 :                 PSDCARD_HC_SLOT_INFO pSlotInfo = (PSDCARD_HC_SLOT_INFO)pData;

  02b58	e59d3068	 ldr         r3, [sp, #0x68]
  02b5c	e58d300c	 str         r3, [sp, #0xC]

; 1323 : 
; 1324 :                 // set the slot capabilities
; 1325 :                 SDHCDSetSlotCapabilities(pSlotInfo, SD_SLOT_SD_1BIT_CAPABLE | 
; 1326 :                                                     SD_SLOT_SD_4BIT_CAPABLE |
; 1327 :                                                     SD_SLOT_SDIO_CAPABLE);

  02b60	e59d200c	 ldr         r2, [sp, #0xC]
  02b64	e3a0302c	 mov         r3, #0x2C
  02b68	e5823000	 str         r3, [r2]

; 1328 : 
; 1329 :                 SDHCDSetVoltageWindowMask(pSlotInfo, (SD_VDD_WINDOW_3_2_TO_3_3 | SD_VDD_WINDOW_3_3_TO_3_4)); 

  02b6c	e59d300c	 ldr         r3, [sp, #0xC]
  02b70	e2832004	 add         r2, r3, #4
  02b74	e3a03603	 mov         r3, #3, 12
  02b78	e5823000	 str         r3, [r2]

; 1330 : 
; 1331 :                 // Set optimal voltage
; 1332 :                 SDHCDSetDesiredSlotVoltage(pSlotInfo, SD_VDD_WINDOW_3_2_TO_3_3);

  02b7c	e59d300c	 ldr         r3, [sp, #0xC]
  02b80	e2832008	 add         r2, r3, #8
  02b84	e3a03601	 mov         r3, #1, 12
  02b88	e5823000	 str         r3, [r2]

; 1333 : 
; 1334 :                 SDHCDSetMaxClockRate(pSlotInfo, pController->dwMaximumSDClockFrequency);

  02b8c	e59d3008	 ldr         r3, [sp, #8]
  02b90	e2831ed5	 add         r1, r3, #0xD5, 28
  02b94	e59d300c	 ldr         r3, [sp, #0xC]
  02b98	e283200c	 add         r2, r3, #0xC
  02b9c	e5913000	 ldr         r3, [r1]
  02ba0	e5823000	 str         r3, [r2]

; 1335 : 
; 1336 :                 // Set power up delay. We handle this in SetVoltage().
; 1337 :                 SDHCDSetPowerUpDelay(pSlotInfo, 300);

  02ba4	e59d300c	 ldr         r3, [sp, #0xC]
  02ba8	e2832010	 add         r2, r3, #0x10
  02bac	e3a03f4b	 mov         r3, #0x4B, 30
  02bb0	e5823000	 str         r3, [r2]
  02bb4		 |$LN2@SDHSlotOpt|

; 1338 :             }
; 1339 :             break;

  02bb4	ea000001	 b           |$LN24@SDHSlotOpt|
  02bb8		 |$LN1@SDHSlotOpt|

; 1340 : 
; 1341 :         default:
; 1342 :            status = SD_API_STATUS_INVALID_PARAMETER;

  02bb8	e3a0311f	 mov         r3, #0x1F, 2
  02bbc	e58d3004	 str         r3, [sp, #4]
  02bc0		 |$LN24@SDHSlotOpt|

; 1343 : 
; 1344 :     }
; 1345 : 
; 1346 :     return status;

  02bc0	e59d3004	 ldr         r3, [sp, #4]
  02bc4	e58d3010	 str         r3, [sp, #0x10]

; 1347 : }

  02bc8	e59d0010	 ldr         r0, [sp, #0x10]
  02bcc	e28dd054	 add         sp, sp, #0x54
  02bd0	e89d6000	 ldmia       sp, {sp, lr}
  02bd4	e12fff1e	 bx          lr
  02bd8		 |$LN69@SDHSlotOpt|
  02bd8		 |$LN70@SDHSlotOpt|
  02bd8	00000000	 DCD         |??_C@_1IC@FNDGBLGP@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAB?$AAl?$AAo?$AAc@|
  02bdc		 |$LN71@SDHSlotOpt|
  02bdc	00000000	 DCD         |dpCurSettings|
  02be0		 |$LN72@SDHSlotOpt|
  02be0	00000000	 DCD         |??_C@_1HO@JCNBBHAA@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk@|
  02be4		 |$LN73@SDHSlotOpt|
  02be4	00000000	 DCD         |??_C@_1FO@KGFHOGPO@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAw@|
  02be8		 |$LN74@SDHSlotOpt|
  02be8	00000000	 DCD         |??_C@_1GC@BPKBODJN@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAi?$AAs?$AA?5?$AAw@|
  02bec		 |$LN75@SDHSlotOpt|
  02bec	00000000	 DCD         |??_C@_1JG@PKADFCGN@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@|
  02bf0		 |$LN76@SDHSlotOpt|
  02bf0	00000000	 DCD         |??_C@_1IM@GJNHMAMC@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@|
  02bf4		 |$LN77@SDHSlotOpt|
  02bf4	00000000	 DCD         |??_C@_1CG@PEDCFGGI@?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAI?$AAN?$AAT?$AA?5?$AA?$CI?$AAs?$AAt?$AAi?$AAl?$AAl?$AA?$CJ?$AA?$CB?$AA?6?$AA?$AA@|
  02bf8		 |$LN78@SDHSlotOpt|
  02bf8	00000000	 DCD         |??_C@_1IK@PMIHFPBM@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@|
  02bfc		 |$LN79@SDHSlotOpt|
  02bfc	00000000	 DCD         |??_C@_1JI@NIJPCEGO@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@|
  02c00		 |$LN80@SDHSlotOpt|
  02c00	00000000	 DCD         |??_C@_1JI@BFBGBECH@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@|
  02c04		 |$LN81@SDHSlotOpt|
  02c04	00000000	 DCD         |??_C@_1IO@MNFKFMEJ@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@|
  02c08		 |$LN82@SDHSlotOpt|
  02c08	00000000	 DCD         |??_C@_1HC@HHBOFLKI@?$AAS?$AAD?$AAH?$AAS?$AAl?$AAo?$AAt?$AAO?$AAp?$AAt?$AAi?$AAo?$AAn?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AA?9?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?5?$AA?9?$AA?5@|
  02c0c		 |$M45017|

			 ENDP  ; |SDHSlotOptionHandler|

	EXPORT	|??_C@_1GC@JIEGKEBI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AAR?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@LPCKKKPN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AAC@| [ DATA ] ; `string'
	EXPORT	|HandleProgramDone|

  00068			 AREA	 |.pdata|, PDATA
|$T45044| DCD	|$LN14@HandleProg|
	DCD	0x40005a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@JIEGKEBI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AAR?$AAe@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "g", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "s"
	DCB	0x0, " ", 0x0, "B", 0x0, "u", 0x0, "s", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "S", 0x0, "u", 0x0, "c", 0x0, "c", 0x0, "e"
	DCB	0x0, "e", 0x0, "d", 0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@LPCKKKPN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AAC@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "g", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "g", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02c0c			 AREA	 |.text|, CODE, ARM

  02c0c		 |HandleProgramDone| PROC

; 1357 : {

  02c0c		 |$LN14@HandleProg|
  02c0c	e1a0c00d	 mov         r12, sp
  02c10	e92d0001	 stmdb       sp!, {r0}
  02c14	e92d5000	 stmdb       sp!, {r12, lr}
  02c18	e24dd010	 sub         sp, sp, #0x10
  02c1c		 |$M45041|

; 1358 :     PSD_BUS_REQUEST pRequest;       // current request
; 1359 : 
; 1360 :     PROGRAM_DONE_INTERRUPT_OFF(pController);

  02c1c	e3a02002	 mov         r2, #2
  02c20	e3e01000	 mvn         r1, #0
  02c24	e59d0018	 ldr         r0, [sp, #0x18]
  02c28	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1361 : 
; 1362 :         // get the current request  
; 1363 :     pRequest = pController->pCurrentRequest;

  02c2c	e59d3018	 ldr         r3, [sp, #0x18]
  02c30	e283301c	 add         r3, r3, #0x1C
  02c34	e5933000	 ldr         r3, [r3]
  02c38	e58d3000	 str         r3, [sp]

; 1364 : 
; 1365 :         // this should never happen because we mark the request as un-cancelable.
; 1366 :     DEBUG_ASSERT(NULL != pRequest);

  02c3c	e59d3000	 ldr         r3, [sp]
  02c40	e3530000	 cmp         r3, #0
  02c44	0a000002	 beq         |$LN6@HandleProg|
  02c48	e3a03001	 mov         r3, #1
  02c4c	e58d3004	 str         r3, [sp, #4]
  02c50	ea000008	 b           |$LN7@HandleProg|
  02c54		 |$LN6@HandleProg|
  02c54	e3a03c05	 mov         r3, #5, 24
  02c58	e3833056	 orr         r3, r3, #0x56
  02c5c	e59f210c	 ldr         r2, [pc, #0x10C]
  02c60	e59f10fc	 ldr         r1, [pc, #0xFC]
  02c64	e59f0100	 ldr         r0, [pc, #0x100]
  02c68	eb000000	 bl          NKDbgPrintfW
  02c6c	e6000010	 __debugbreak_ce
  02c70	e3a03000	 mov         r3, #0
  02c74	e58d3004	 str         r3, [sp, #4]
  02c78		 |$LN7@HandleProg|

; 1367 :     if(NULL == pRequest)

  02c78	e59d3000	 ldr         r3, [sp]
  02c7c	e3530000	 cmp         r3, #0
  02c80	1a000000	 bne         |$LN3@HandleProg|

; 1368 :     {
; 1369 :         return;

  02c84	ea000032	 b           |$LN4@HandleProg|
  02c88		 |$LN3@HandleProg|

; 1370 :     }
; 1371 : 
; 1372 :     SetCurrentState(pController, WriteDataDone);

  02c88	e59d3018	 ldr         r3, [sp, #0x18]
  02c8c	e2832ecf	 add         r2, r3, #0xCF, 28
  02c90	e3a03007	 mov         r3, #7
  02c94	e5823000	 str         r3, [r2]

; 1373 : 
; 1374 :         // notice there is no status to check for a programming error
; 1375 :         // this is up to the upper level drivers to send a card status command
; 1376 :     DbgPrintZo(SDH_TRANSMIT_ZONE, (TEXT("HandleProgramDone: Programming Complete \n")));

  02c98	e59f30c4	 ldr         r3, [pc, #0xC4]
  02c9c	e5933440	 ldr         r3, [r3, #0x440]
  02ca0	e3130020	 tst         r3, #0x20
  02ca4	0a000004	 beq         |$LN8@HandleProg|
  02ca8	e59f00b8	 ldr         r0, [pc, #0xB8]
  02cac	eb000000	 bl          SDCardDebugOutput
  02cb0	e3a03001	 mov         r3, #1
  02cb4	e58d3008	 str         r3, [sp, #8]
  02cb8	ea000001	 b           |$LN9@HandleProg|
  02cbc		 |$LN8@HandleProg|
  02cbc	e3a03000	 mov         r3, #0
  02cc0	e58d3008	 str         r3, [sp, #8]
  02cc4		 |$LN9@HandleProg|

; 1377 : 
; 1378 :     if( !( pController->fClockAlwaysOn || ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  02cc4	e59d3018	 ldr         r3, [sp, #0x18]
  02cc8	e2833d35	 add         r3, r3, #0x35, 26
  02ccc	e5933000	 ldr         r3, [r3]
  02cd0	e3530000	 cmp         r3, #0
  02cd4	1a00000d	 bne         |$LN2@HandleProg|
  02cd8	e59d3018	 ldr         r3, [sp, #0x18]
  02cdc	e2833c0d	 add         r3, r3, #0xD, 24
  02ce0	e2833044	 add         r3, r3, #0x44
  02ce4	e5933000	 ldr         r3, [r3]
  02ce8	e3530000	 cmp         r3, #0
  02cec	0a000005	 beq         |$LN1@HandleProg|
  02cf0	e59d3018	 ldr         r3, [sp, #0x18]
  02cf4	e2833c0d	 add         r3, r3, #0xD, 24
  02cf8	e2833034	 add         r3, r3, #0x34
  02cfc	e5933000	 ldr         r3, [r3]
  02d00	e3530000	 cmp         r3, #0
  02d04	1a000001	 bne         |$LN2@HandleProg|
  02d08		 |$LN1@HandleProg|

; 1379 :     {
; 1380 :             // turn off the clock
; 1381 :         SDClockOff(pController);

  02d08	e59d0018	 ldr         r0, [sp, #0x18]
  02d0c	eb000000	 bl          SDClockOff
  02d10		 |$LN2@HandleProg|

; 1382 :             // complete the request
; 1383 :     }
; 1384 : 
; 1385 :     DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleProgramDone reports Bus Request Succeeded\n")));

  02d10	e59f304c	 ldr         r3, [pc, #0x4C]
  02d14	e5933440	 ldr         r3, [r3, #0x440]
  02d18	e3130080	 tst         r3, #0x80
  02d1c	0a000004	 beq         |$LN10@HandleProg|
  02d20	e59f0038	 ldr         r0, [pc, #0x38]
  02d24	eb000000	 bl          SDCardDebugOutput
  02d28	e3a03001	 mov         r3, #1
  02d2c	e58d300c	 str         r3, [sp, #0xC]
  02d30	ea000001	 b           |$LN11@HandleProg|
  02d34		 |$LN10@HandleProg|
  02d34	e3a03000	 mov         r3, #0
  02d38	e58d300c	 str         r3, [sp, #0xC]
  02d3c		 |$LN11@HandleProg|

; 1386 : 
; 1387 :     IndicateBusRequestComplete(pController->pHCContext,
; 1388 :                                     pRequest ,
; 1389 :                                     SD_API_STATUS_SUCCESS);

  02d3c	e3a02000	 mov         r2, #0
  02d40	e59d1000	 ldr         r1, [sp]
  02d44	e59d3018	 ldr         r3, [sp, #0x18]
  02d48	e2833018	 add         r3, r3, #0x18
  02d4c	e5930000	 ldr         r0, [r3]
  02d50	eb000000	 bl          IndicateBusRequestComplete
  02d54		 |$LN4@HandleProg|

; 1390 : }

  02d54	e28dd010	 add         sp, sp, #0x10
  02d58	e89d6000	 ldmia       sp, {sp, lr}
  02d5c	e12fff1e	 bx          lr
  02d60		 |$LN15@HandleProg|
  02d60		 |$LN16@HandleProg|
  02d60	00000000	 DCD         |??_C@_1GC@JIEGKEBI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAB?$AAu?$AAs?$AA?5?$AAR?$AAe@|
  02d64		 |$LN17@HandleProg|
  02d64	00000000	 DCD         |dpCurSettings|
  02d68		 |$LN18@HandleProg|
  02d68	00000000	 DCD         |??_C@_1FE@LPCKKKPN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAD?$AAo?$AAn?$AAe?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AAC@|
  02d6c		 |$LN19@HandleProg|
  02d6c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02d70		 |$LN20@HandleProg|
  02d70	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02d74		 |$M45042|

			 ENDP  ; |HandleProgramDone|

	EXPORT	|EmptyReceiveFifo|

  00070			 AREA	 |.pdata|, PDATA
|$T45055| DCD	|$LN12@EmptyRecei|
	DCD	0x40007504
; Function compile flags: /Odtp

  02d74			 AREA	 |.text|, CODE, ARM

  02d74		 |EmptyReceiveFifo| PROC

; 1407 : {   

  02d74		 |$LN12@EmptyRecei|
  02d74	e1a0c00d	 mov         r12, sp
  02d78	e92d000f	 stmdb       sp!, {r0 - r3}
  02d7c	e92d5000	 stmdb       sp!, {r12, lr}
  02d80	e24dd01c	 sub         sp, sp, #0x1C
  02d84		 |$M45052|

; 1408 :     ULONG MaxBytesToRead;
; 1409 :     PBYTE pCurPtr;
; 1410 :     DWORD dwTotalRead;
; 1411 : 
; 1412 :     volatile UCHAR *pMMC_RX_Fifo = (volatile UCHAR *)&(pController->pSDMMCRegisters->rxfifo);

  02d84	e59d3024	 ldr         r3, [sp, #0x24]
  02d88	e2833004	 add         r3, r3, #4
  02d8c	e5933000	 ldr         r3, [r3]
  02d90	e2833040	 add         r3, r3, #0x40
  02d94	e58d300c	 str         r3, [sp, #0xC]

; 1413 :     volatile DWORD *pMMC_RX_FifoDW = (volatile DWORD *)&(pController->pSDMMCRegisters->rxfifo);

  02d98	e59d3024	 ldr         r3, [sp, #0x24]
  02d9c	e2833004	 add         r3, r3, #4
  02da0	e5933000	 ldr         r3, [r3]
  02da4	e2833040	 add         r3, r3, #0x40
  02da8	e58d3000	 str         r3, [sp]

; 1414 : 
; 1415 : 
; 1416 :     MaxBytesToRead = MaxBytes - pRequest->HCParam;

  02dac	e59d3028	 ldr         r3, [sp, #0x28]
  02db0	e2833044	 add         r3, r3, #0x44
  02db4	e59d2030	 ldr         r2, [sp, #0x30]
  02db8	e5933000	 ldr         r3, [r3]
  02dbc	e0423003	 sub         r3, r2, r3
  02dc0	e58d3004	 str         r3, [sp, #4]

; 1417 :     pCurPtr = pRequest->pBlockBuffer+pRequest->HCParam;

  02dc4	e59d3028	 ldr         r3, [sp, #0x28]
  02dc8	e2832048	 add         r2, r3, #0x48
  02dcc	e59d3028	 ldr         r3, [sp, #0x28]
  02dd0	e2833044	 add         r3, r3, #0x44
  02dd4	e5922000	 ldr         r2, [r2]
  02dd8	e5933000	 ldr         r3, [r3]
  02ddc	e0823003	 add         r3, r2, r3
  02de0	e58d3008	 str         r3, [sp, #8]

; 1418 :     
; 1419 :     if( ByteCount > MaxBytesToRead )

  02de4	e59d202c	 ldr         r2, [sp, #0x2C]
  02de8	e59d3004	 ldr         r3, [sp, #4]
  02dec	e1520003	 cmp         r2, r3
  02df0	9a000001	 bls         |$LN7@EmptyRecei|

; 1420 :     {
; 1421 :         ByteCount = MaxBytesToRead;

  02df4	e59d3004	 ldr         r3, [sp, #4]
  02df8	e58d302c	 str         r3, [sp, #0x2C]
  02dfc		 |$LN7@EmptyRecei|

; 1422 :     }
; 1423 :     dwTotalRead = ByteCount;

  02dfc	e59d302c	 ldr         r3, [sp, #0x2C]
  02e00	e58d3010	 str         r3, [sp, #0x10]
  02e04		 |$LN6@EmptyRecei|

; 1424 :     
; 1425 :     // we are touching the block buffer, we must set the process permissions
; 1426 : 
; 1427 :             // empty the FIFO
; 1428 :         while (ByteCount) {

  02e04	e59d302c	 ldr         r3, [sp, #0x2C]
  02e08	e3530000	 cmp         r3, #0
  02e0c	0a000042	 beq         |$LN5@EmptyRecei|

; 1429 :             if( ByteCount >= 4 )

  02e10	e59d302c	 ldr         r3, [sp, #0x2C]
  02e14	e3530004	 cmp         r3, #4
  02e18	3a000030	 bcc         |$LN4@EmptyRecei|

; 1430 :             {
; 1431 :                 union {
; 1432 :                     BYTE    dataByte[4];
; 1433 :                     DWORD   dataLong;
; 1434 :                 } data;
; 1435 :                 register PBYTE pSrc = data.dataByte;

  02e1c	e28d3014	 add         r3, sp, #0x14
  02e20	e58d3018	 str         r3, [sp, #0x18]

; 1436 :                 // read in the dword from the FIFO
; 1437 :                 data.dataLong = *pMMC_RX_FifoDW;

  02e24	e59d3000	 ldr         r3, [sp]
  02e28	e5933000	 ldr         r3, [r3]
  02e2c	e58d3014	 str         r3, [sp, #0x14]

; 1438 :                 *(pCurPtr++) = *(pSrc++);

  02e30	e59d3018	 ldr         r3, [sp, #0x18]
  02e34	e5d32000	 ldrb        r2, [r3]
  02e38	e59d3008	 ldr         r3, [sp, #8]
  02e3c	e5c32000	 strb        r2, [r3]
  02e40	e59d3008	 ldr         r3, [sp, #8]
  02e44	e2833001	 add         r3, r3, #1
  02e48	e58d3008	 str         r3, [sp, #8]
  02e4c	e59d3018	 ldr         r3, [sp, #0x18]
  02e50	e2833001	 add         r3, r3, #1
  02e54	e58d3018	 str         r3, [sp, #0x18]

; 1439 :                 *(pCurPtr++) = *(pSrc++);

  02e58	e59d3018	 ldr         r3, [sp, #0x18]
  02e5c	e5d32000	 ldrb        r2, [r3]
  02e60	e59d3008	 ldr         r3, [sp, #8]
  02e64	e5c32000	 strb        r2, [r3]
  02e68	e59d3008	 ldr         r3, [sp, #8]
  02e6c	e2833001	 add         r3, r3, #1
  02e70	e58d3008	 str         r3, [sp, #8]
  02e74	e59d3018	 ldr         r3, [sp, #0x18]
  02e78	e2833001	 add         r3, r3, #1
  02e7c	e58d3018	 str         r3, [sp, #0x18]

; 1440 :                 *(pCurPtr++) = *(pSrc++);

  02e80	e59d3018	 ldr         r3, [sp, #0x18]
  02e84	e5d32000	 ldrb        r2, [r3]
  02e88	e59d3008	 ldr         r3, [sp, #8]
  02e8c	e5c32000	 strb        r2, [r3]
  02e90	e59d3008	 ldr         r3, [sp, #8]
  02e94	e2833001	 add         r3, r3, #1
  02e98	e58d3008	 str         r3, [sp, #8]
  02e9c	e59d3018	 ldr         r3, [sp, #0x18]
  02ea0	e2833001	 add         r3, r3, #1
  02ea4	e58d3018	 str         r3, [sp, #0x18]

; 1441 :                 *(pCurPtr++) = *(pSrc++);

  02ea8	e59d3018	 ldr         r3, [sp, #0x18]
  02eac	e5d32000	 ldrb        r2, [r3]
  02eb0	e59d3008	 ldr         r3, [sp, #8]
  02eb4	e5c32000	 strb        r2, [r3]
  02eb8	e59d3008	 ldr         r3, [sp, #8]
  02ebc	e2833001	 add         r3, r3, #1
  02ec0	e58d3008	 str         r3, [sp, #8]
  02ec4	e59d3018	 ldr         r3, [sp, #0x18]
  02ec8	e2833001	 add         r3, r3, #1
  02ecc	e58d3018	 str         r3, [sp, #0x18]

; 1442 :                 ByteCount -= 4;

  02ed0	e59d302c	 ldr         r3, [sp, #0x2C]
  02ed4	e2433004	 sub         r3, r3, #4
  02ed8	e58d302c	 str         r3, [sp, #0x2C]
  02edc	ea00000d	 b           |$LN3@EmptyRecei|
  02ee0		 |$LN4@EmptyRecei|
  02ee0		 |$LN2@EmptyRecei|

; 1443 :                 
; 1444 :             }
; 1445 :             else while (ByteCount)  {

  02ee0	e59d302c	 ldr         r3, [sp, #0x2C]
  02ee4	e3530000	 cmp         r3, #0
  02ee8	0a00000a	 beq         |$LN1@EmptyRecei|

; 1446 :                // read in the byte from the FIFO
; 1447 :                 *(pCurPtr++) = *pMMC_RX_Fifo;

  02eec	e59d300c	 ldr         r3, [sp, #0xC]
  02ef0	e5d32000	 ldrb        r2, [r3]
  02ef4	e59d3008	 ldr         r3, [sp, #8]
  02ef8	e5c32000	 strb        r2, [r3]
  02efc	e59d3008	 ldr         r3, [sp, #8]
  02f00	e2833001	 add         r3, r3, #1
  02f04	e58d3008	 str         r3, [sp, #8]

; 1448 :                 ByteCount--;

  02f08	e59d302c	 ldr         r3, [sp, #0x2C]
  02f0c	e2433001	 sub         r3, r3, #1
  02f10	e58d302c	 str         r3, [sp, #0x2C]

; 1449 :             }

  02f14	eafffff1	 b           |$LN2@EmptyRecei|
  02f18		 |$LN1@EmptyRecei|
  02f18		 |$LN3@EmptyRecei|

; 1450 :         };

  02f18	eaffffb9	 b           |$LN6@EmptyRecei|
  02f1c		 |$LN5@EmptyRecei|

; 1451 :     pRequest->HCParam += dwTotalRead;

  02f1c	e59d3028	 ldr         r3, [sp, #0x28]
  02f20	e2833044	 add         r3, r3, #0x44
  02f24	e5932000	 ldr         r2, [r3]
  02f28	e59d3010	 ldr         r3, [sp, #0x10]
  02f2c	e0822003	 add         r2, r2, r3
  02f30	e59d3028	 ldr         r3, [sp, #0x28]
  02f34	e2833044	 add         r3, r3, #0x44
  02f38	e5832000	 str         r2, [r3]

; 1452 : }

  02f3c	e28dd01c	 add         sp, sp, #0x1C
  02f40	e89d6000	 ldmia       sp, {sp, lr}
  02f44	e12fff1e	 bx          lr
  02f48		 |$M45053|

			 ENDP  ; |EmptyReceiveFifo|

	EXPORT	|??_C@_1GI@DGEKDFF@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@HAKNNPJJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAP?$AAr?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FHODBPLG@?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AA?$FL?$AA?$CF?$AAS?$AA?$FN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@KEOGABHH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAF?$AAi?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@JBIONICP@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@DGHBINPA@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAA?$AAc?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@KMKGICCO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@OJBLHGOK@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@CLJKBLOC@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@BFPHBMNO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAA?$AAT?$AAA?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@LLHBJDGG@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@HCJEHMCO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAF?$AAL?$AAA?$AAS?$AAH@| [ DATA ] ; `string'
	EXPORT	|HandleTransferDone|
	IMPORT	|SDPerformSafeCopy|
	IMPORT	|__C_specific_handler|

  00078			 AREA	 |.pdata|, PDATA
|$T45105| DCD	|$LN84@HandleTran|
	DCD	0xc0026205
|$T45107| DCD	|$LN74@HandleTran|
	DCD	0x40001301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@DGEKDFF@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a"
	DCB	0x0, " ", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@HAKNNPJJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAP?$AAr?$AAo@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "g", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "m"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p"
	DCB	0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FHODBPLG@?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AA?$FL?$AA?$CF?$AAS?$AA?$FN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "["
	DCB	0x0, "%", 0x0, "S", 0x0, "]", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@KEOGABHH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAF?$AAi?$AAf@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "i"
	DCB	0x0, "f", 0x0, "o", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "s", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, ",", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "c", 0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@JBIONICP@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "A", 0x0, "c", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "V", 0x0, "i", 0x0, "o"
	DCB	0x0, "l", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@DGHBINPA@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAA?$AAc?$AAc@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "A", 0x0, "c"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "V"
	DCB	0x0, "i", 0x0, "o", 0x0, "l", 0x0, "a", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@KMKGICCO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAr@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "C", 0x0, "R"
	DCB	0x0, "C", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@OJBLHGOK@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAE@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C", 0x0, " "
	DCB	0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@CLJKBLOC@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAa@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "a", 0x0, "t"
	DCB	0x0, "a", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "a", 0x0, "i", 0x0, "n", 0x0, "s", 0x0, " ", 0x0, "C"
	DCB	0x0, "R", 0x0, "C", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@BFPHBMNO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAA?$AAT?$AAA?$AA?5@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A"
	DCB	0x0, " ", 0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O"
	DCB	0x0, "U", 0x0, "T", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@LLHBJDGG@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAa@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "a", 0x0, "t"
	DCB	0x0, "a", 0x0, " ", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "d", 0x0, "O", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@HCJEHMCO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAF?$AAL?$AAA?$AAS?$AAH@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "F", 0x0, "L", 0x0, "A", 0x0, "S"
	DCB	0x0, "H", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00008			 AREA	 |.xdata|, DATA
|$T45103| DCD	0x1
	DCD	|$LN78@HandleTran|
	DCD	|$LN79@HandleTran|
	DCD	|$LN74@HandleTran|
	DCD	|$LN75@HandleTran|
; Function compile flags: /Odtp

  02f48			 AREA	 |.text|, CODE, ARM

  02f48	00000000	 DCD         |__C_specific_handler|
  02f4c	00000000	 DCD         |$T45103|

  02f50		 |HandleTransferDone| PROC

; 1463 : {

  02f50		 |$LN84@HandleTran|
  02f50	e1a0c00d	 mov         r12, sp
  02f54	e92d0003	 stmdb       sp!, {r0, r1}
  02f58	e92d5800	 stmdb       sp!, {r11, r12, lr}
  02f5c	e28db00c	 add         r11, sp, #0xC
  02f60	e24dd068	 sub         sp, sp, #0x68
  02f64		 |$LN82@HandleTran|

; 1464 :     PSD_BUS_REQUEST pRequest;       // current request
; 1465 :     DWORD           regValue;       // intermediate byte value
; 1466 :     ULONG           maxBytes;       // max bytes
; 1467 : 
; 1468 :         // turn off the transfer done interrupt
; 1469 :     TRANSFER_DONE_INTERRUPT_OFF(pController);

  02f64	e3a02001	 mov         r2, #1
  02f68	e3e01000	 mvn         r1, #0
  02f6c	e59b0000	 ldr         r0, [r11]
  02f70	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1470 :         // turn off data error interrupt
; 1471 :     PROGRAM_DATA_ERROR_INTERRUPT_OFF(pController);

  02f74	e3a02c01	 mov         r2, #1, 24
  02f78	e3e01000	 mvn         r1, #0
  02f7c	e59b0000	 ldr         r0, [r11]
  02f80	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1472 :       
; 1473 :     pController->dwControllerIstTimeout = INFINITE;

  02f84	e59b3000	 ldr         r3, [r11]
  02f88	e283203c	 add         r2, r3, #0x3C
  02f8c	e3e03000	 mvn         r3, #0
  02f90	e5823000	 str         r3, [r2]

; 1474 : 
; 1475 :         // get the current request  
; 1476 :     pRequest = pController->pCurrentRequest; 

  02f94	e59b3000	 ldr         r3, [r11]
  02f98	e283301c	 add         r3, r3, #0x1C
  02f9c	e5933000	 ldr         r3, [r3]
  02fa0	e50b306c	 str         r3, [r11, #-0x6C]

; 1477 : 
; 1478 :         // this should never happen because we mark the request as un-cancelable
; 1479 :     DEBUG_ASSERT(NULL != pRequest);

  02fa4	e51b306c	 ldr         r3, [r11, #-0x6C]
  02fa8	e3530000	 cmp         r3, #0
  02fac	0a000002	 beq         |$LN39@HandleTran|
  02fb0	e3a03001	 mov         r3, #1
  02fb4	e50b3068	 str         r3, [r11, #-0x68]
  02fb8	ea000008	 b           |$LN40@HandleTran|
  02fbc		 |$LN39@HandleTran|
  02fbc	e3a03c05	 mov         r3, #5, 24
  02fc0	e38330c7	 orr         r3, r3, #0xC7
  02fc4	e59f2928	 ldr         r2, [pc, #0x928]
  02fc8	e59f1918	 ldr         r1, [pc, #0x918]
  02fcc	e59f091c	 ldr         r0, [pc, #0x91C]
  02fd0	eb000000	 bl          NKDbgPrintfW
  02fd4	e6000010	 __debugbreak_ce
  02fd8	e3a03000	 mov         r3, #0
  02fdc	e50b3068	 str         r3, [r11, #-0x68]
  02fe0		 |$LN40@HandleTran|

; 1480 :     if( !pRequest ) 

  02fe0	e51b306c	 ldr         r3, [r11, #-0x6C]
  02fe4	e3530000	 cmp         r3, #0
  02fe8	1a000008	 bne         |$LN36@HandleTran|

; 1481 :     {
; 1482 :         RX_FIFO_INTERRUPT_OFF(pController);

  02fec	e3a02020	 mov         r2, #0x20
  02ff0	e3e01000	 mvn         r1, #0
  02ff4	e59b0000	 ldr         r0, [r11]
  02ff8	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1483 :         TX_FIFO_INTERRUPT_OFF(pController);

  02ffc	e3a02040	 mov         r2, #0x40
  03000	e3e01000	 mvn         r1, #0
  03004	e59b0000	 ldr         r0, [r11]
  03008	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1484 :         return;

  0300c	ea00022e	 b           |$LN37@HandleTran|
  03010		 |$LN36@HandleTran|

; 1485 :     }
; 1486 : 
; 1487 :     if (TRANSFER_IS_READ(pRequest)) {

  03010	e51b306c	 ldr         r3, [r11, #-0x6C]
  03014	e2833010	 add         r3, r3, #0x10
  03018	e5933000	 ldr         r3, [r3]
  0301c	e3530000	 cmp         r3, #0
  03020	1a000004	 bne         |$LN35@HandleTran|

; 1488 :             // make sure RX fifo interrupt is off 
; 1489 :         RX_FIFO_INTERRUPT_OFF(pController);

  03024	e3a02020	 mov         r2, #0x20
  03028	e3e01000	 mvn         r1, #0
  0302c	e59b0000	 ldr         r0, [r11]
  03030	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR
  03034	ea000010	 b           |$LN34@HandleTran|
  03038		 |$LN35@HandleTran|

; 1490 :     } else if (TRANSFER_IS_WRITE(pRequest)) {

  03038	e51b306c	 ldr         r3, [r11, #-0x6C]
  0303c	e2833010	 add         r3, r3, #0x10
  03040	e5933000	 ldr         r3, [r3]
  03044	e3530001	 cmp         r3, #1
  03048	1a000004	 bne         |$LN33@HandleTran|

; 1491 :             // make sure TX fifo interrupt is off 
; 1492 :         TX_FIFO_INTERRUPT_OFF(pController);

  0304c	e3a02040	 mov         r2, #0x40
  03050	e3e01000	 mvn         r1, #0
  03054	e59b0000	 ldr         r0, [r11]
  03058	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1493 :             // can't turn off the clock until the prog done interrupt!
; 1494 :     } else {

  0305c	ea000006	 b           |$LN32@HandleTran|
  03060		 |$LN33@HandleTran|

; 1495 :         DEBUG_ASSERT(FALSE);

  03060	e3a03c05	 mov         r3, #5, 24
  03064	e38330d7	 orr         r3, r3, #0xD7
  03068	e59f2884	 ldr         r2, [pc, #0x884]
  0306c	e59f1874	 ldr         r1, [pc, #0x874]
  03070	e59f0878	 ldr         r0, [pc, #0x878]
  03074	eb000000	 bl          NKDbgPrintfW
  03078	e6000010	 __debugbreak_ce
  0307c		 |$LN32@HandleTran|
  0307c		 |$LN34@HandleTran|

; 1496 :     }
; 1497 : 
; 1498 :         // check the transfer status
; 1499 :     regValue = READ_MMC_REGISTER_DWORD(pController, MMC_STAT);

  0307c	e3a01004	 mov         r1, #4
  03080	e59b0000	 ldr         r0, [r11]
  03084	eb000000	 bl          READ_MMC_REGISTER_DWORD
  03088	e50b0064	 str         r0, [r11, #-0x64]
  0308c	e51b3064	 ldr         r3, [r11, #-0x64]
  03090	e50b3070	 str         r3, [r11, #-0x70]

; 1500 : 
; 1501 :         // check for errors
; 1502 :     if (regValue & MMC_STAT_FLASH_ERROR) {

  03094	e51b3070	 ldr         r3, [r11, #-0x70]
  03098	e3130c02	 tst         r3, #2, 24
  0309c	0a000018	 beq         |$LN31@HandleTran|

; 1503 :         ASSERT(0);

  030a0	e3a03c05	 mov         r3, #5, 24
  030a4	e38330df	 orr         r3, r3, #0xDF
  030a8	e59f2844	 ldr         r2, [pc, #0x844]
  030ac	e59f1854	 ldr         r1, [pc, #0x854]
  030b0	e59f0838	 ldr         r0, [pc, #0x838]
  030b4	eb000000	 bl          NKDbgPrintfW
  030b8	e6000010	 __debugbreak_ce

; 1504 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleTransferDone reports FLASH ERROR\n")));

  030bc	e59f3824	 ldr         r3, [pc, #0x824]
  030c0	e5933440	 ldr         r3, [r3, #0x440]
  030c4	e3130080	 tst         r3, #0x80
  030c8	0a000004	 beq         |$LN41@HandleTran|
  030cc	e59f084c	 ldr         r0, [pc, #0x84C]
  030d0	eb000000	 bl          SDCardDebugOutput
  030d4	e3a03001	 mov         r3, #1
  030d8	e50b3060	 str         r3, [r11, #-0x60]
  030dc	ea000001	 b           |$LN42@HandleTran|
  030e0		 |$LN41@HandleTran|
  030e0	e3a03000	 mov         r3, #0
  030e4	e50b3060	 str         r3, [r11, #-0x60]
  030e8		 |$LN42@HandleTran|

; 1505 :         IndicateBusRequestComplete(pController->pHCContext,
; 1506 :                                         pRequest ,
; 1507 :                                         SD_API_STATUS_DATA_ERROR);

  030e8	e3a02133	 mov         r2, #0x33, 2
  030ec	e51b106c	 ldr         r1, [r11, #-0x6C]
  030f0	e59b3000	 ldr         r3, [r11]
  030f4	e2833018	 add         r3, r3, #0x18
  030f8	e5930000	 ldr         r0, [r3]
  030fc	eb000000	 bl          IndicateBusRequestComplete

; 1508 :         return;

  03100	ea0001f1	 b           |$LN37@HandleTran|
  03104		 |$LN31@HandleTran|

; 1509 :     }
; 1510 : 
; 1511 :     if (regValue & MMC_STAT_SPI_WR_ERROR) {

  03104	e51b3070	 ldr         r3, [r11, #-0x70]
  03108	e3130b01	 tst         r3, #1, 22
  0310c	0a000006	 beq         |$LN30@HandleTran|

; 1512 :         ASSERT(0);

  03110	e3a03c05	 mov         r3, #5, 24
  03114	e38330e8	 orr         r3, r3, #0xE8
  03118	e59f27d4	 ldr         r2, [pc, #0x7D4]
  0311c	e59f17e4	 ldr         r1, [pc, #0x7E4]
  03120	e59f07c8	 ldr         r0, [pc, #0x7C8]
  03124	eb000000	 bl          NKDbgPrintfW
  03128	e6000010	 __debugbreak_ce
  0312c		 |$LN30@HandleTran|

; 1513 :     }
; 1514 : 
; 1515 :     if (regValue & MMC_STAT_RD_STALLED) {

  0312c	e51b3070	 ldr         r3, [r11, #-0x70]
  03130	e3130901	 tst         r3, #1, 18
  03134	0a000006	 beq         |$LN29@HandleTran|

; 1516 :         ASSERT(0);

  03138	e3a03c05	 mov         r3, #5, 24
  0313c	e38330ec	 orr         r3, r3, #0xEC
  03140	e59f27ac	 ldr         r2, [pc, #0x7AC]
  03144	e59f17bc	 ldr         r1, [pc, #0x7BC]
  03148	e59f07a0	 ldr         r0, [pc, #0x7A0]
  0314c	eb000000	 bl          NKDbgPrintfW
  03150	e6000010	 __debugbreak_ce
  03154		 |$LN29@HandleTran|

; 1517 :     }
; 1518 : 
; 1519 :     if ( ( regValue & MMC_STAT_READ_TIMEOUT ) || fForceTimeout ) {

  03154	e51b3070	 ldr         r3, [r11, #-0x70]
  03158	e3130001	 tst         r3, #1
  0315c	1a000002	 bne         |$LN27@HandleTran|
  03160	e59b3004	 ldr         r3, [r11, #4]
  03164	e3530000	 cmp         r3, #0
  03168	0a000030	 beq         |$LN28@HandleTran|
  0316c		 |$LN27@HandleTran|

; 1520 :         DbgPrintZo(SDCARD_ZONE_ERROR, (TEXT("HandleTransferDoneInterrupt: Read Data TimedOut \n")));     

  0316c	e59f3774	 ldr         r3, [pc, #0x774]
  03170	e5933440	 ldr         r3, [r3, #0x440]
  03174	e3130902	 tst         r3, #2, 18
  03178	0a000004	 beq         |$LN43@HandleTran|
  0317c	e59f0798	 ldr         r0, [pc, #0x798]
  03180	eb000000	 bl          SDCardDebugOutput
  03184	e3a03001	 mov         r3, #1
  03188	e50b305c	 str         r3, [r11, #-0x5C]
  0318c	ea000001	 b           |$LN44@HandleTran|
  03190		 |$LN43@HandleTran|
  03190	e3a03000	 mov         r3, #0
  03194	e50b305c	 str         r3, [r11, #-0x5C]
  03198		 |$LN44@HandleTran|

; 1521 :         
; 1522 :         if( !( pController->fClockAlwaysOn || 
; 1523 :                ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  03198	e59b3000	 ldr         r3, [r11]
  0319c	e2833d35	 add         r3, r3, #0x35, 26
  031a0	e5933000	 ldr         r3, [r3]
  031a4	e3530000	 cmp         r3, #0
  031a8	1a00000d	 bne         |$LN26@HandleTran|
  031ac	e59b3000	 ldr         r3, [r11]
  031b0	e2833c0d	 add         r3, r3, #0xD, 24
  031b4	e2833044	 add         r3, r3, #0x44
  031b8	e5933000	 ldr         r3, [r3]
  031bc	e3530000	 cmp         r3, #0
  031c0	0a000005	 beq         |$LN25@HandleTran|
  031c4	e59b3000	 ldr         r3, [r11]
  031c8	e2833c0d	 add         r3, r3, #0xD, 24
  031cc	e2833034	 add         r3, r3, #0x34
  031d0	e5933000	 ldr         r3, [r3]
  031d4	e3530000	 cmp         r3, #0
  031d8	1a000001	 bne         |$LN26@HandleTran|
  031dc		 |$LN25@HandleTran|

; 1524 :         {
; 1525 :                 // turn off the clock
; 1526 :             SDClockOff(pController);

  031dc	e59b0000	 ldr         r0, [r11]
  031e0	eb000000	 bl          SDClockOff
  031e4		 |$LN26@HandleTran|

; 1527 :         }
; 1528 : 
; 1529 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleTransferDone reports DATA TIMEOUT\n")));

  031e4	e59f36fc	 ldr         r3, [pc, #0x6FC]
  031e8	e5933440	 ldr         r3, [r3, #0x440]
  031ec	e3130080	 tst         r3, #0x80
  031f0	0a000004	 beq         |$LN45@HandleTran|
  031f4	e59f071c	 ldr         r0, [pc, #0x71C]
  031f8	eb000000	 bl          SDCardDebugOutput
  031fc	e3a03001	 mov         r3, #1
  03200	e50b3058	 str         r3, [r11, #-0x58]
  03204	ea000001	 b           |$LN46@HandleTran|
  03208		 |$LN45@HandleTran|
  03208	e3a03000	 mov         r3, #0
  0320c	e50b3058	 str         r3, [r11, #-0x58]
  03210		 |$LN46@HandleTran|

; 1530 :         IndicateBusRequestComplete(pController->pHCContext,
; 1531 :                                         pRequest ,
; 1532 :                                         SD_API_STATUS_DATA_TIMEOUT);

  03210	e3a02157	 mov         r2, #0x57, 2
  03214	e51b106c	 ldr         r1, [r11, #-0x6C]
  03218	e59b3000	 ldr         r3, [r11]
  0321c	e2833018	 add         r3, r3, #0x18
  03220	e5930000	 ldr         r0, [r3]
  03224	eb000000	 bl          IndicateBusRequestComplete
  03228	ea0001a7	 b           |$LN37@HandleTran|

; 1533 :         return;

  0322c	ea000066	 b           |$LN24@HandleTran|
  03230		 |$LN28@HandleTran|

; 1534 : 
; 1535 :     } else if (regValue & MMC_STAT_READ_DATA_CRC_ERROR) {

  03230	e51b3070	 ldr         r3, [r11, #-0x70]
  03234	e3130008	 tst         r3, #8
  03238	0a000030	 beq         |$LN23@HandleTran|

; 1536 : 
; 1537 :         DbgPrintZo(SDCARD_ZONE_ERROR, (TEXT("HandleTransferDoneInterrupt: Read Data Contains CRC error \n"))); 

  0323c	e59f36a4	 ldr         r3, [pc, #0x6A4]
  03240	e5933440	 ldr         r3, [r3, #0x440]
  03244	e3130902	 tst         r3, #2, 18
  03248	0a000004	 beq         |$LN47@HandleTran|
  0324c	e59f06c0	 ldr         r0, [pc, #0x6C0]
  03250	eb000000	 bl          SDCardDebugOutput
  03254	e3a03001	 mov         r3, #1
  03258	e50b3054	 str         r3, [r11, #-0x54]
  0325c	ea000001	 b           |$LN48@HandleTran|
  03260		 |$LN47@HandleTran|
  03260	e3a03000	 mov         r3, #0
  03264	e50b3054	 str         r3, [r11, #-0x54]
  03268		 |$LN48@HandleTran|

; 1538 :         if( !( pController->fClockAlwaysOn || 
; 1539 :                ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  03268	e59b3000	 ldr         r3, [r11]
  0326c	e2833d35	 add         r3, r3, #0x35, 26
  03270	e5933000	 ldr         r3, [r3]
  03274	e3530000	 cmp         r3, #0
  03278	1a00000d	 bne         |$LN22@HandleTran|
  0327c	e59b3000	 ldr         r3, [r11]
  03280	e2833c0d	 add         r3, r3, #0xD, 24
  03284	e2833044	 add         r3, r3, #0x44
  03288	e5933000	 ldr         r3, [r3]
  0328c	e3530000	 cmp         r3, #0
  03290	0a000005	 beq         |$LN21@HandleTran|
  03294	e59b3000	 ldr         r3, [r11]
  03298	e2833c0d	 add         r3, r3, #0xD, 24
  0329c	e2833034	 add         r3, r3, #0x34
  032a0	e5933000	 ldr         r3, [r3]
  032a4	e3530000	 cmp         r3, #0
  032a8	1a000001	 bne         |$LN22@HandleTran|
  032ac		 |$LN21@HandleTran|

; 1540 :         {
; 1541 :                 // turn off the clock
; 1542 :             SDClockOff(pController);

  032ac	e59b0000	 ldr         r0, [r11]
  032b0	eb000000	 bl          SDClockOff
  032b4		 |$LN22@HandleTran|

; 1543 :         }
; 1544 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleTransferDone reports CRC ERROR\n")));

  032b4	e59f362c	 ldr         r3, [pc, #0x62C]
  032b8	e5933440	 ldr         r3, [r3, #0x440]
  032bc	e3130080	 tst         r3, #0x80
  032c0	0a000004	 beq         |$LN49@HandleTran|
  032c4	e59f0640	 ldr         r0, [pc, #0x640]
  032c8	eb000000	 bl          SDCardDebugOutput
  032cc	e3a03001	 mov         r3, #1
  032d0	e50b3050	 str         r3, [r11, #-0x50]
  032d4	ea000001	 b           |$LN50@HandleTran|
  032d8		 |$LN49@HandleTran|
  032d8	e3a03000	 mov         r3, #0
  032dc	e50b3050	 str         r3, [r11, #-0x50]
  032e0		 |$LN50@HandleTran|

; 1545 :         IndicateBusRequestComplete(pController->pHCContext,
; 1546 :                                         pRequest ,
; 1547 :                                         SD_API_STATUS_CRC_ERROR);

  032e0	e3a02137	 mov         r2, #0x37, 2
  032e4	e51b106c	 ldr         r1, [r11, #-0x6C]
  032e8	e59b3000	 ldr         r3, [r11]
  032ec	e2833018	 add         r3, r3, #0x18
  032f0	e5930000	 ldr         r0, [r3]
  032f4	eb000000	 bl          IndicateBusRequestComplete
  032f8	ea000173	 b           |$LN37@HandleTran|

; 1548 :         return;

  032fc	ea000032	 b           |$LN20@HandleTran|
  03300		 |$LN23@HandleTran|

; 1549 :     } else if (regValue & MMC_STAT_WRITE_DATA_CRC_ERROR) {

  03300	e51b3070	 ldr         r3, [r11, #-0x70]
  03304	e3130004	 tst         r3, #4
  03308	0a00002f	 beq         |$LN19@HandleTran|

; 1550 : 
; 1551 :         DbgPrintZo(SDCARD_ZONE_ERROR, (TEXT("HandleTransferDoneInterrupt: Card received Write Data with CRC error \n"))); 

  0330c	e59f35d4	 ldr         r3, [pc, #0x5D4]
  03310	e5933440	 ldr         r3, [r3, #0x440]
  03314	e3130902	 tst         r3, #2, 18
  03318	0a000004	 beq         |$LN51@HandleTran|
  0331c	e59f05ec	 ldr         r0, [pc, #0x5EC]
  03320	eb000000	 bl          SDCardDebugOutput
  03324	e3a03001	 mov         r3, #1
  03328	e50b304c	 str         r3, [r11, #-0x4C]
  0332c	ea000001	 b           |$LN52@HandleTran|
  03330		 |$LN51@HandleTran|
  03330	e3a03000	 mov         r3, #0
  03334	e50b304c	 str         r3, [r11, #-0x4C]
  03338		 |$LN52@HandleTran|

; 1552 :         if( !( pController->fClockAlwaysOn || 
; 1553 :                ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  03338	e59b3000	 ldr         r3, [r11]
  0333c	e2833d35	 add         r3, r3, #0x35, 26
  03340	e5933000	 ldr         r3, [r3]
  03344	e3530000	 cmp         r3, #0
  03348	1a00000d	 bne         |$LN18@HandleTran|
  0334c	e59b3000	 ldr         r3, [r11]
  03350	e2833c0d	 add         r3, r3, #0xD, 24
  03354	e2833044	 add         r3, r3, #0x44
  03358	e5933000	 ldr         r3, [r3]
  0335c	e3530000	 cmp         r3, #0
  03360	0a000005	 beq         |$LN17@HandleTran|
  03364	e59b3000	 ldr         r3, [r11]
  03368	e2833c0d	 add         r3, r3, #0xD, 24
  0336c	e2833034	 add         r3, r3, #0x34
  03370	e5933000	 ldr         r3, [r3]
  03374	e3530000	 cmp         r3, #0
  03378	1a000001	 bne         |$LN18@HandleTran|
  0337c		 |$LN17@HandleTran|

; 1554 :         {
; 1555 :                 // turn off the clock
; 1556 :             SDClockOff(pController);

  0337c	e59b0000	 ldr         r0, [r11]
  03380	eb000000	 bl          SDClockOff
  03384		 |$LN18@HandleTran|

; 1557 :         }
; 1558 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleTransferDone reports CRC ERROR\n")));

  03384	e59f355c	 ldr         r3, [pc, #0x55C]
  03388	e5933440	 ldr         r3, [r3, #0x440]
  0338c	e3130080	 tst         r3, #0x80
  03390	0a000004	 beq         |$LN53@HandleTran|
  03394	e59f0570	 ldr         r0, [pc, #0x570]
  03398	eb000000	 bl          SDCardDebugOutput
  0339c	e3a03001	 mov         r3, #1
  033a0	e50b3048	 str         r3, [r11, #-0x48]
  033a4	ea000001	 b           |$LN54@HandleTran|
  033a8		 |$LN53@HandleTran|
  033a8	e3a03000	 mov         r3, #0
  033ac	e50b3048	 str         r3, [r11, #-0x48]
  033b0		 |$LN54@HandleTran|

; 1559 :         IndicateBusRequestComplete(pController->pHCContext,
; 1560 :                                         pRequest ,
; 1561 :                                         SD_API_STATUS_CRC_ERROR);

  033b0	e3a02137	 mov         r2, #0x37, 2
  033b4	e51b106c	 ldr         r1, [r11, #-0x6C]
  033b8	e59b3000	 ldr         r3, [r11]
  033bc	e2833018	 add         r3, r3, #0x18
  033c0	e5930000	 ldr         r0, [r3]
  033c4	eb000000	 bl          IndicateBusRequestComplete

; 1562 :         return;

  033c8	ea00013f	 b           |$LN37@HandleTran|
  033cc		 |$LN19@HandleTran|
  033cc		 |$LN20@HandleTran|
  033cc		 |$LN24@HandleTran|

; 1563 :     }
; 1564 : 
; 1565 :     
; 1566 : #ifdef DEBUG
; 1567 :     ASSERT( pController->fDMATransferInProgress == FALSE );

  033cc	e59b3000	 ldr         r3, [r11]
  033d0	e2833ead	 add         r3, r3, #0xAD, 28
  033d4	e5933000	 ldr         r3, [r3]
  033d8	e3530000	 cmp         r3, #0
  033dc	1a000002	 bne         |$LN55@HandleTran|
  033e0	e3a03001	 mov         r3, #1
  033e4	e50b3044	 str         r3, [r11, #-0x44]
  033e8	ea000008	 b           |$LN56@HandleTran|
  033ec		 |$LN55@HandleTran|
  033ec	e3a03c06	 mov         r3, #6, 24
  033f0	e383301f	 orr         r3, r3, #0x1F
  033f4	e59f24f8	 ldr         r2, [pc, #0x4F8]
  033f8	e59f1508	 ldr         r1, [pc, #0x508]
  033fc	e59f04ec	 ldr         r0, [pc, #0x4EC]
  03400	eb000000	 bl          NKDbgPrintfW
  03404	e6000010	 __debugbreak_ce
  03408	e3a03000	 mov         r3, #0
  0340c	e50b3044	 str         r3, [r11, #-0x44]
  03410		 |$LN56@HandleTran|

; 1568 : #endif
; 1569 : 
; 1570 :     if(pController->fDMATransfer)

  03410	e59b3000	 ldr         r3, [r11]
  03414	e2833c0a	 add         r3, r3, #0xA, 24
  03418	e28330a8	 add         r3, r3, #0xA8
  0341c	e5933000	 ldr         r3, [r3]
  03420	e3530000	 cmp         r3, #0
  03424	0a000009	 beq         |$LN16@HandleTran|

; 1571 :     {
; 1572 :         pRequest->HCParam = pRequest->NumBlocks * pRequest->BlockSize;

  03428	e51b306c	 ldr         r3, [r11, #-0x6C]
  0342c	e283203c	 add         r2, r3, #0x3C
  03430	e51b306c	 ldr         r3, [r11, #-0x6C]
  03434	e2833040	 add         r3, r3, #0x40
  03438	e5921000	 ldr         r1, [r2]
  0343c	e5933000	 ldr         r3, [r3]
  03440	e0020391	 mul         r2, r1, r3
  03444	e51b306c	 ldr         r3, [r11, #-0x6C]
  03448	e2833044	 add         r3, r3, #0x44
  0344c	e5832000	 str         r2, [r3]
  03450		 |$LN16@HandleTran|

; 1573 :     }
; 1574 : 
; 1575 : 
; 1576 :     if (TRANSFER_IS_READ(pRequest)) {

  03450	e51b306c	 ldr         r3, [r11, #-0x6C]
  03454	e2833010	 add         r3, r3, #0x10
  03458	e5933000	 ldr         r3, [r3]
  0345c	e3530000	 cmp         r3, #0
  03460	1a0000ac	 bne         |$LN15@HandleTran|

; 1577 : 
; 1578 :         if( pController->fDMATransfer ) {

  03464	e59b3000	 ldr         r3, [r11]
  03468	e2833c0a	 add         r3, r3, #0xA, 24
  0346c	e28330a8	 add         r3, r3, #0xA8
  03470	e5933000	 ldr         r3, [r3]
  03474	e3530000	 cmp         r3, #0
  03478	0a00004f	 beq         |$LN14@HandleTran|

; 1579 :             if( pController->fDMAUsingDriverBuffer )

  0347c	e59b3000	 ldr         r3, [r11]
  03480	e2833c0a	 add         r3, r3, #0xA, 24
  03484	e28330ac	 add         r3, r3, #0xAC
  03488	e5933000	 ldr         r3, [r3]
  0348c	e3530000	 cmp         r3, #0
  03490	0a000048	 beq         |$LN13@HandleTran|

; 1580 :             {
; 1581 :                 // copy data from our DMA buffer into client buffer
; 1582 :                 if( !SDPerformSafeCopy(pRequest->pBlockBuffer,
; 1583 :                                        pController->pDMABuffer,
; 1584 :                                        pRequest->BlockSize * pRequest->NumBlocks) )

  03494	e51b306c	 ldr         r3, [r11, #-0x6C]
  03498	e2832040	 add         r2, r3, #0x40
  0349c	e51b306c	 ldr         r3, [r11, #-0x6C]
  034a0	e283303c	 add         r3, r3, #0x3C
  034a4	e5921000	 ldr         r1, [r2]
  034a8	e5933000	 ldr         r3, [r3]
  034ac	e0020391	 mul         r2, r1, r3
  034b0	e59b3000	 ldr         r3, [r11]
  034b4	e2833068	 add         r3, r3, #0x68
  034b8	e5931000	 ldr         r1, [r3]
  034bc	e51b306c	 ldr         r3, [r11, #-0x6C]
  034c0	e2833048	 add         r3, r3, #0x48
  034c4	e5930000	 ldr         r0, [r3]
  034c8	eb000000	 bl          SDPerformSafeCopy
  034cc	e54b0040	 strb        r0, [r11, #-0x40]
  034d0	e55b3040	 ldrb        r3, [r11, #-0x40]
  034d4	e3530000	 cmp         r3, #0
  034d8	1a000036	 bne         |$LN12@HandleTran|

; 1585 :                 {
; 1586 :                     ASSERT(0);

  034dc	e3a03c06	 mov         r3, #6, 24
  034e0	e3833032	 orr         r3, r3, #0x32
  034e4	e59f2408	 ldr         r2, [pc, #0x408]
  034e8	e59f1418	 ldr         r1, [pc, #0x418]
  034ec	e59f03fc	 ldr         r0, [pc, #0x3FC]
  034f0	eb000000	 bl          NKDbgPrintfW
  034f4	e6000010	 __debugbreak_ce

; 1587 : 
; 1588 :                     DbgPrintZo(SDCARD_ZONE_ERROR, (TEXT("HandleTransferDoneInterrupt: Access Violation\n")));

  034f8	e59f33e8	 ldr         r3, [pc, #0x3E8]
  034fc	e5933440	 ldr         r3, [r3, #0x440]
  03500	e3130902	 tst         r3, #2, 18
  03504	0a000004	 beq         |$LN57@HandleTran|
  03508	e59f03f4	 ldr         r0, [pc, #0x3F4]
  0350c	eb000000	 bl          SDCardDebugOutput
  03510	e3a03001	 mov         r3, #1
  03514	e50b303c	 str         r3, [r11, #-0x3C]
  03518	ea000001	 b           |$LN58@HandleTran|
  0351c		 |$LN57@HandleTran|
  0351c	e3a03000	 mov         r3, #0
  03520	e50b303c	 str         r3, [r11, #-0x3C]
  03524		 |$LN58@HandleTran|

; 1589 :     
; 1590 :                     if( !( pController->fClockAlwaysOn || 
; 1591 :                            ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  03524	e59b3000	 ldr         r3, [r11]
  03528	e2833d35	 add         r3, r3, #0x35, 26
  0352c	e5933000	 ldr         r3, [r3]
  03530	e3530000	 cmp         r3, #0
  03534	1a00000d	 bne         |$LN11@HandleTran|
  03538	e59b3000	 ldr         r3, [r11]
  0353c	e2833c0d	 add         r3, r3, #0xD, 24
  03540	e2833044	 add         r3, r3, #0x44
  03544	e5933000	 ldr         r3, [r3]
  03548	e3530000	 cmp         r3, #0
  0354c	0a000005	 beq         |$LN10@HandleTran|
  03550	e59b3000	 ldr         r3, [r11]
  03554	e2833c0d	 add         r3, r3, #0xD, 24
  03558	e2833034	 add         r3, r3, #0x34
  0355c	e5933000	 ldr         r3, [r3]
  03560	e3530000	 cmp         r3, #0
  03564	1a000001	 bne         |$LN11@HandleTran|
  03568		 |$LN10@HandleTran|

; 1592 :                     {
; 1593 :                             // turn off the clock
; 1594 :                         SDClockOff(pController);

  03568	e59b0000	 ldr         r0, [r11]
  0356c	eb000000	 bl          SDClockOff
  03570		 |$LN11@HandleTran|

; 1595 :                     }
; 1596 : 
; 1597 :                     DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleTransferDone reports Access Violation\n")));

  03570	e59f3370	 ldr         r3, [pc, #0x370]
  03574	e5933440	 ldr         r3, [r3, #0x440]
  03578	e3130080	 tst         r3, #0x80
  0357c	0a000004	 beq         |$LN59@HandleTran|
  03580	e59f0378	 ldr         r0, [pc, #0x378]
  03584	eb000000	 bl          SDCardDebugOutput
  03588	e3a03001	 mov         r3, #1
  0358c	e50b3038	 str         r3, [r11, #-0x38]
  03590	ea000001	 b           |$LN60@HandleTran|
  03594		 |$LN59@HandleTran|
  03594	e3a03000	 mov         r3, #0
  03598	e50b3038	 str         r3, [r11, #-0x38]
  0359c		 |$LN60@HandleTran|

; 1598 :                     IndicateBusRequestComplete(pController->pHCContext,
; 1599 :                                                     pRequest ,
; 1600 :                                                     SD_API_STATUS_ACCESS_VIOLATION);

  0359c	e3a02117	 mov         r2, #0x17, 2
  035a0	e51b106c	 ldr         r1, [r11, #-0x6C]
  035a4	e59b3000	 ldr         r3, [r11]
  035a8	e2833018	 add         r3, r3, #0x18
  035ac	e5930000	 ldr         r0, [r3]
  035b0	eb000000	 bl          IndicateBusRequestComplete

; 1601 :                     return;

  035b4	ea0000c4	 b           |$LN37@HandleTran|
  035b8		 |$LN12@HandleTran|
  035b8		 |$LN13@HandleTran|

; 1602 :                 }
; 1603 :             }
; 1604 : 
; 1605 :         } else {

  035b8	ea000027	 b           |$LN9@HandleTran|
  035bc		 |$LN14@HandleTran|

; 1606 :                 // why are we doing this here? If the remaining read data is less than a Fifo's worth (32)
; 1607 :                 // we won't get the RX Fifo Read Request interrupt because the fifo won't be full.
; 1608 :                 // also even if it is full or if this isn't the case the TRANSFER_DONE bit seems to mask it out
; 1609 :                 // anyways this prevents the problem where there are bytes stuck in the Fifo
; 1610 :             maxBytes = pRequest->NumBlocks * pRequest->BlockSize;

  035bc	e51b306c	 ldr         r3, [r11, #-0x6C]
  035c0	e283203c	 add         r2, r3, #0x3C
  035c4	e51b306c	 ldr         r3, [r11, #-0x6C]
  035c8	e2833040	 add         r3, r3, #0x40
  035cc	e5922000	 ldr         r2, [r2]
  035d0	e5933000	 ldr         r3, [r3]
  035d4	e0030392	 mul         r3, r2, r3
  035d8	e50b3074	 str         r3, [r11, #-0x74]

; 1611 : 
; 1612 :             if (pRequest->HCParam < maxBytes) {

  035dc	e51b306c	 ldr         r3, [r11, #-0x6C]
  035e0	e2833044	 add         r3, r3, #0x44
  035e4	e5932000	 ldr         r2, [r3]
  035e8	e51b3074	 ldr         r3, [r11, #-0x74]
  035ec	e1520003	 cmp         r2, r3
  035f0	2a000019	 bcs         |$LN8@HandleTran|

; 1613 :                 DbgPrintZo(SDH_RECEIVE_ZONE, (TEXT("HandleTransferDoneInterrupt: Fifo contains remaining data, Max: %d, current count %d  \n"),
; 1614 :                     maxBytes, pRequest->HCParam));

  035f4	e59f32ec	 ldr         r3, [pc, #0x2EC]
  035f8	e5933440	 ldr         r3, [r3, #0x440]
  035fc	e3130008	 tst         r3, #8
  03600	0a000008	 beq         |$LN61@HandleTran|
  03604	e51b306c	 ldr         r3, [r11, #-0x6C]
  03608	e2833044	 add         r3, r3, #0x44
  0360c	e5932000	 ldr         r2, [r3]
  03610	e51b1074	 ldr         r1, [r11, #-0x74]
  03614	e59f02e0	 ldr         r0, [pc, #0x2E0]
  03618	eb000000	 bl          SDCardDebugOutput
  0361c	e3a03001	 mov         r3, #1
  03620	e50b3034	 str         r3, [r11, #-0x34]
  03624	ea000001	 b           |$LN62@HandleTran|
  03628		 |$LN61@HandleTran|
  03628	e3a03000	 mov         r3, #0
  0362c	e50b3034	 str         r3, [r11, #-0x34]
  03630		 |$LN62@HandleTran|
  03630		 |$LN78@HandleTran|

; 1615 :                     // get the remaining bytes out of the FIFO
; 1616 :                     __try {
; 1617 :                         EmptyReceiveFifo(pController, 
; 1618 :                                  pRequest, 
; 1619 :                                  (maxBytes - pRequest->HCParam), 
; 1620 :                                  maxBytes);

  03630	e51b3074	 ldr         r3, [r11, #-0x74]
  03634	e51b206c	 ldr         r2, [r11, #-0x6C]
  03638	e2822044	 add         r2, r2, #0x44
  0363c	e51b1074	 ldr         r1, [r11, #-0x74]
  03640	e5922000	 ldr         r2, [r2]
  03644	e0412002	 sub         r2, r1, r2
  03648	e51b106c	 ldr         r1, [r11, #-0x6C]
  0364c	e59b0000	 ldr         r0, [r11]
  03650	eb000000	 bl          EmptyReceiveFifo
  03654		 |$LN79@HandleTran|
  03654	ea000000	 b           |$LN80@HandleTran|
  03658		 |$LN75@HandleTran|
  03658	eaffffff	 b           |$LN80@HandleTran|
  0365c		 |$LN80@HandleTran|
  0365c		 |$LN8@HandleTran|
  0365c		 |$LN9@HandleTran|

; 1622 :                     }
; 1623 :             }
; 1624 :         }
; 1625 : 
; 1626 :         SetCurrentState(pController, ReadDataDone);

  0365c	e59b3000	 ldr         r3, [r11]
  03660	e2832ecf	 add         r2, r3, #0xCF, 28
  03664	e3a0300a	 mov         r3, #0xA
  03668	e5823000	 str         r3, [r2]

; 1627 : 
; 1628 :         if( !( pController->fClockAlwaysOn || 
; 1629 :                ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  0366c	e59b3000	 ldr         r3, [r11]
  03670	e2833d35	 add         r3, r3, #0x35, 26
  03674	e5933000	 ldr         r3, [r3]
  03678	e3530000	 cmp         r3, #0
  0367c	1a00000d	 bne         |$LN6@HandleTran|
  03680	e59b3000	 ldr         r3, [r11]
  03684	e2833c0d	 add         r3, r3, #0xD, 24
  03688	e2833044	 add         r3, r3, #0x44
  0368c	e5933000	 ldr         r3, [r3]
  03690	e3530000	 cmp         r3, #0
  03694	0a000005	 beq         |$LN5@HandleTran|
  03698	e59b3000	 ldr         r3, [r11]
  0369c	e2833c0d	 add         r3, r3, #0xD, 24
  036a0	e2833034	 add         r3, r3, #0x34
  036a4	e5933000	 ldr         r3, [r3]
  036a8	e3530000	 cmp         r3, #0
  036ac	1a000001	 bne         |$LN6@HandleTran|
  036b0		 |$LN5@HandleTran|

; 1630 :         {
; 1631 :                 // now it is safe to turn off the clock
; 1632 :             SDClockOff(pController);

  036b0	e59b0000	 ldr         r0, [r11]
  036b4	eb000000	 bl          SDClockOff
  036b8		 |$LN6@HandleTran|

; 1633 :         }
; 1634 : 
; 1635 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("Bytes read: [%S]\n"), HexDisplay( pRequest->pBlockBuffer, TRANSFER_SIZE(pRequest) ) ) );

  036b8	e59f3228	 ldr         r3, [pc, #0x228]
  036bc	e5933440	 ldr         r3, [r3, #0x440]
  036c0	e3130080	 tst         r3, #0x80
  036c4	0a000011	 beq         |$LN63@HandleTran|
  036c8	e51b306c	 ldr         r3, [r11, #-0x6C]
  036cc	e2832040	 add         r2, r3, #0x40
  036d0	e51b306c	 ldr         r3, [r11, #-0x6C]
  036d4	e283303c	 add         r3, r3, #0x3C
  036d8	e5922000	 ldr         r2, [r2]
  036dc	e5933000	 ldr         r3, [r3]
  036e0	e0010392	 mul         r1, r2, r3
  036e4	e51b306c	 ldr         r3, [r11, #-0x6C]
  036e8	e2833048	 add         r3, r3, #0x48
  036ec	e5930000	 ldr         r0, [r3]
  036f0	eb000000	 bl          HexDisplay
  036f4	e50b0030	 str         r0, [r11, #-0x30]
  036f8	e51b1030	 ldr         r1, [r11, #-0x30]
  036fc	e59f01e0	 ldr         r0, [pc, #0x1E0]
  03700	eb000000	 bl          SDCardDebugOutput
  03704	e3a03001	 mov         r3, #1
  03708	e50b302c	 str         r3, [r11, #-0x2C]
  0370c	ea000001	 b           |$LN64@HandleTran|
  03710		 |$LN63@HandleTran|
  03710	e3a03000	 mov         r3, #0
  03714	e50b302c	 str         r3, [r11, #-0x2C]
  03718		 |$LN64@HandleTran|
  03718		 |$LN15@HandleTran|

; 1636 :     }
; 1637 : 
; 1638 : 
; 1639 :     if (TRANSFER_IS_WRITE(pRequest)) {

  03718	e51b306c	 ldr         r3, [r11, #-0x6C]
  0371c	e2833010	 add         r3, r3, #0x10
  03720	e5933000	 ldr         r3, [r3]
  03724	e3530001	 cmp         r3, #1
  03728	1a000021	 bne         |$LN4@HandleTran|

; 1640 : 
; 1641 :         if (!IS_PROGRAM_DONE(pController)) {

  0372c	e3a01004	 mov         r1, #4
  03730	e59b0000	 ldr         r0, [r11]
  03734	eb000000	 bl          READ_MMC_REGISTER_DWORD
  03738	e50b0028	 str         r0, [r11, #-0x28]
  0373c	e51b3028	 ldr         r3, [r11, #-0x28]
  03740	e3130a01	 tst         r3, #1, 20
  03744	1a00001a	 bne         |$LN3@HandleTran|

; 1642 :             SetCurrentState(pController, ProgramWait);

  03748	e59b3000	 ldr         r3, [r11]
  0374c	e2832ecf	 add         r2, r3, #0xCF, 28
  03750	e3a03006	 mov         r3, #6
  03754	e5823000	 str         r3, [r2]

; 1643 :             
; 1644 :                 // turn on programming done interrupt
; 1645 :             PROGRAM_DONE_INTERRUPT_ON(pController); 

  03758	e3a02000	 mov         r2, #0
  0375c	e3e01002	 mvn         r1, #2
  03760	e59b0000	 ldr         r0, [r11]
  03764	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1646 :             //Sleep(500);
; 1647 : 
; 1648 :                 // check to see if programming is finished
; 1649 :             if (!IS_PROGRAM_DONE(pController)) {

  03768	e3a01004	 mov         r1, #4
  0376c	e59b0000	 ldr         r0, [r11]
  03770	eb000000	 bl          READ_MMC_REGISTER_DWORD
  03774	e50b0024	 str         r0, [r11, #-0x24]
  03778	e51b3024	 ldr         r3, [r11, #-0x24]
  0377c	e3130a01	 tst         r3, #1, 20
  03780	1a00000a	 bne         |$LN2@HandleTran|

; 1650 :                 DbgPrintZo(SDH_TRANSMIT_ZONE, (TEXT("HandleTransferDoneInterrupt: Programming Not Complete \n")));   

  03784	e59f315c	 ldr         r3, [pc, #0x15C]
  03788	e5933440	 ldr         r3, [r3, #0x440]
  0378c	e3130020	 tst         r3, #0x20
  03790	0a000004	 beq         |$LN65@HandleTran|
  03794	e59f015c	 ldr         r0, [pc, #0x15C]
  03798	eb000000	 bl          SDCardDebugOutput
  0379c	e3a03001	 mov         r3, #1
  037a0	e50b3020	 str         r3, [r11, #-0x20]
  037a4	ea000001	 b           |$LN66@HandleTran|
  037a8		 |$LN65@HandleTran|
  037a8	e3a03000	 mov         r3, #0
  037ac	e50b3020	 str         r3, [r11, #-0x20]
  037b0		 |$LN66@HandleTran|
  037b0		 |$LN2@HandleTran|

; 1651 :             }
; 1652 : 
; 1653 :             // if we wait on the programming done interrupt this could
; 1654 :             // go on forever because now it is up to the memory card, 
; 1655 :             // we may have to make this request cancelable at this point
; 1656 :             
; 1657 :             return;

  037b0	ea000045	 b           |$LN37@HandleTran|
  037b4		 |$LN3@HandleTran|
  037b4		 |$LN4@HandleTran|

; 1658 :         }
; 1659 :     } 
; 1660 : 
; 1661 :     DEBUG_ASSERT((pRequest->HCParam >= (pRequest->NumBlocks * pRequest->BlockSize)));

  037b4	e51b306c	 ldr         r3, [r11, #-0x6C]
  037b8	e2830044	 add         r0, r3, #0x44
  037bc	e51b306c	 ldr         r3, [r11, #-0x6C]
  037c0	e283203c	 add         r2, r3, #0x3C
  037c4	e51b306c	 ldr         r3, [r11, #-0x6C]
  037c8	e2833040	 add         r3, r3, #0x40
  037cc	e5921000	 ldr         r1, [r2]
  037d0	e5933000	 ldr         r3, [r3]
  037d4	e0020391	 mul         r2, r1, r3
  037d8	e5903000	 ldr         r3, [r0]
  037dc	e1530002	 cmp         r3, r2
  037e0	3a000002	 bcc         |$LN67@HandleTran|
  037e4	e3a03001	 mov         r3, #1
  037e8	e50b301c	 str         r3, [r11, #-0x1C]
  037ec	ea000008	 b           |$LN68@HandleTran|
  037f0		 |$LN67@HandleTran|
  037f0	e3a03c06	 mov         r3, #6, 24
  037f4	e383307d	 orr         r3, r3, #0x7D
  037f8	e59f20f4	 ldr         r2, [pc, #0xF4]
  037fc	e59f10e4	 ldr         r1, [pc, #0xE4]
  03800	e59f00e8	 ldr         r0, [pc, #0xE8]
  03804	eb000000	 bl          NKDbgPrintfW
  03808	e6000010	 __debugbreak_ce
  0380c	e3a03000	 mov         r3, #0
  03810	e50b301c	 str         r3, [r11, #-0x1C]
  03814		 |$LN68@HandleTran|

; 1662 :         // complete the request
; 1663 :     DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleTransferDone reports Data Transfer Completed\n")));

  03814	e59f30cc	 ldr         r3, [pc, #0xCC]
  03818	e5933440	 ldr         r3, [r3, #0x440]
  0381c	e3130080	 tst         r3, #0x80
  03820	0a000004	 beq         |$LN69@HandleTran|
  03824	e59f00c0	 ldr         r0, [pc, #0xC0]
  03828	eb000000	 bl          SDCardDebugOutput
  0382c	e3a03001	 mov         r3, #1
  03830	e50b3018	 str         r3, [r11, #-0x18]
  03834	ea000001	 b           |$LN70@HandleTran|
  03838		 |$LN69@HandleTran|
  03838	e3a03000	 mov         r3, #0
  0383c	e50b3018	 str         r3, [r11, #-0x18]
  03840		 |$LN70@HandleTran|

; 1664 :     if (TRANSFER_IS_READ(pRequest)) {

  03840	e51b306c	 ldr         r3, [r11, #-0x6C]
  03844	e2833010	 add         r3, r3, #0x10
  03848	e5933000	 ldr         r3, [r3]
  0384c	e3530000	 cmp         r3, #0
  03850	1a000017	 bne         |$LN1@HandleTran|

; 1665 : 		DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("Bytes read: [%S]\n"), HexDisplay( pRequest->pBlockBuffer, TRANSFER_SIZE(pRequest) ) ) );

  03854	e59f308c	 ldr         r3, [pc, #0x8C]
  03858	e5933440	 ldr         r3, [r3, #0x440]
  0385c	e3130080	 tst         r3, #0x80
  03860	0a000011	 beq         |$LN71@HandleTran|
  03864	e51b306c	 ldr         r3, [r11, #-0x6C]
  03868	e2832040	 add         r2, r3, #0x40
  0386c	e51b306c	 ldr         r3, [r11, #-0x6C]
  03870	e283303c	 add         r3, r3, #0x3C
  03874	e5922000	 ldr         r2, [r2]
  03878	e5933000	 ldr         r3, [r3]
  0387c	e0010392	 mul         r1, r2, r3
  03880	e51b306c	 ldr         r3, [r11, #-0x6C]
  03884	e2833048	 add         r3, r3, #0x48
  03888	e5930000	 ldr         r0, [r3]
  0388c	eb000000	 bl          HexDisplay
  03890	e50b0014	 str         r0, [r11, #-0x14]
  03894	e51b1014	 ldr         r1, [r11, #-0x14]
  03898	e59f0044	 ldr         r0, [pc, #0x44]
  0389c	eb000000	 bl          SDCardDebugOutput
  038a0	e3a03001	 mov         r3, #1
  038a4	e50b3010	 str         r3, [r11, #-0x10]
  038a8	ea000001	 b           |$LN72@HandleTran|
  038ac		 |$LN71@HandleTran|
  038ac	e3a03000	 mov         r3, #0
  038b0	e50b3010	 str         r3, [r11, #-0x10]
  038b4		 |$LN72@HandleTran|
  038b4		 |$LN1@HandleTran|

; 1666 : 	}
; 1667 : 
; 1668 :     IndicateBusRequestComplete(pController->pHCContext,
; 1669 :                                     pRequest ,
; 1670 :                                     SD_API_STATUS_SUCCESS);

  038b4	e3a02000	 mov         r2, #0
  038b8	e51b106c	 ldr         r1, [r11, #-0x6C]
  038bc	e59b3000	 ldr         r3, [r11]
  038c0	e2833018	 add         r3, r3, #0x18
  038c4	e5930000	 ldr         r0, [r3]
  038c8	eb000000	 bl          IndicateBusRequestComplete
  038cc		 |$LN37@HandleTran|
  038cc		 |$LN73@HandleTran|

; 1671 : }

  038cc	e24bd00c	 sub         sp, r11, #0xC
  038d0	e89d6800	 ldmia       sp, {r11, sp, lr}
  038d4	e12fff1e	 bx          lr

			 ENDP  ; |HandleTransferDone|

  038d8		 |$LN74@HandleTran|
  038d8		 |$LN83@HandleTran|

; 1621 :                     }__except(EXCEPTION_EXECUTE_HANDLER) {

  038d8	e52de004	 str         lr, [sp, #-4]!
  038dc		 |$LN77@HandleTran|
  038dc		 |$LN86@HandleTran|
  038dc	e3a00001	 mov         r0, #1
  038e0		 |$LN76@HandleTran|
  038e0	e49df004	 ldr         pc, [sp], #4
  038e4		 |$LN88@HandleTran|
  038e4		 |$LN89@HandleTran|
  038e4	00000000	 DCD         |??_C@_1CE@FHODBPLG@?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AA?$FL?$AA?$CF?$AAS?$AA?$FN?$AA?6?$AA?$AA@|
  038e8		 |$LN90@HandleTran|
  038e8	00000000	 DCD         |dpCurSettings|
  038ec		 |$LN91@HandleTran|
  038ec	00000000	 DCD         |??_C@_1GI@DGEKDFF@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5@|
  038f0		 |$LN92@HandleTran|
  038f0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  038f4		 |$LN93@HandleTran|
  038f4	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  038f8		 |$LN94@HandleTran|
  038f8	00000000	 DCD         |??_C@_1HA@HAKNNPJJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAP?$AAr?$AAo@|
  038fc		 |$LN95@HandleTran|
  038fc	00000000	 DCD         |??_C@_1LA@KEOGABHH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAF?$AAi?$AAf@|
  03900		 |$LN96@HandleTran|
  03900	00000000	 DCD         |??_C@_1FK@JBIONICP@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs@|
  03904		 |$LN97@HandleTran|
  03904	00000000	 DCD         |??_C@_1FO@DGHBINPA@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAA?$AAc?$AAc@|
  03908		 |$LN98@HandleTran|
  03908	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  0390c		 |$LN99@HandleTran|
  0390c	00000000	 DCD         |??_C@_1EM@OJBLHGOK@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAC?$AAR?$AAC?$AA?5?$AAE@|
  03910		 |$LN100@HandleTran|
  03910	00000000	 DCD         |??_C@_1IO@KMKGICCO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAr@|
  03914		 |$LN101@HandleTran|
  03914	00000000	 DCD         |??_C@_1HI@CLJKBLOC@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAa@|
  03918		 |$LN102@HandleTran|
  03918	00000000	 DCD         |??_C@_1FC@BFPHBMNO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAA?$AAT?$AAA?$AA?5@|
  0391c		 |$LN103@HandleTran|
  0391c	00000000	 DCD         |??_C@_1GE@LLHBJDGG@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAa@|
  03920		 |$LN104@HandleTran|
  03920	00000000	 DCD         |??_C@_1FA@HCJEHMCO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AAD?$AAo?$AAn?$AAe?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAF?$AAL?$AAA?$AAS?$AAH@|
  03924		 |$LN87@HandleTran|
  03924		 |$LN85@HandleTran|
	EXPORT	|??_C@_1EE@HFNIGNCC@?$AAS?$AAD?$AAL?$AAo?$AAa?$AAd?$AAX?$AAm?$AAi?$AAt?$AAF?$AAi?$AAf?$AAo?$AA?3?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@CJPLGAEE@?$AAS?$AAD?$AAL?$AAo?$AAa?$AAd?$AAX?$AAm?$AAi?$AAt?$AAF?$AAi?$AAf?$AAo?$AA?3?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SDLoadXmitFifo|

  00088			 AREA	 |.pdata|, PDATA
|$T45136| DCD	|$LN16@SDLoadXmit|
	DCD	0x4000ac04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@HFNIGNCC@?$AAS?$AAD?$AAL?$AAo?$AAa?$AAd?$AAX?$AAm?$AAi?$AAt?$AAF?$AAi?$AAf?$AAo?$AA?3?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "L", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "X"
	DCB	0x0, "m", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "i", 0x0, "f"
	DCB	0x0, "o", 0x0, ":", 0x0, " ", 0x0, "N", 0x0, "e", 0x0, "w"
	DCB	0x0, " ", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@CJPLGAEE@?$AAS?$AAD?$AAL?$AAo?$AAa?$AAd?$AAX?$AAm?$AAi?$AAt?$AAF?$AAi?$AAf?$AAo?$AA?3?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "L", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "X"
	DCB	0x0, "m", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "i", 0x0, "f"
	DCB	0x0, "o", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "u", 0x0, "r"
	DCB	0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03924			 AREA	 |.text|, CODE, ARM

  03924		 |SDLoadXmitFifo| PROC

; 1683 : {

  03924		 |$LN16@SDLoadXmit|
  03924	e1a0c00d	 mov         r12, sp
  03928	e92d0007	 stmdb       sp!, {r0 - r2}
  0392c	e92d5000	 stmdb       sp!, {r12, lr}
  03930	e24dd028	 sub         sp, sp, #0x28
  03934		 |$M45133|

; 1684 :     ULONG           remainingBytes; // remaining bytes in the transfer
; 1685 :     DWORD           ii;
; 1686 :     volatile UCHAR *pMMC_TX_Fifo = (volatile UCHAR *)&(pController->pSDMMCRegisters->txfifo);

  03934	e59d3030	 ldr         r3, [sp, #0x30]
  03938	e2833004	 add         r3, r3, #4
  0393c	e5933000	 ldr         r3, [r3]
  03940	e2833044	 add         r3, r3, #0x44
  03944	e58d3008	 str         r3, [sp, #8]

; 1687 :     volatile DWORD *pMMC_TX_FifoDW = (volatile DWORD *)&(pController->pSDMMCRegisters->txfifo);

  03948	e59d3030	 ldr         r3, [sp, #0x30]
  0394c	e2833004	 add         r3, r3, #4
  03950	e5933000	 ldr         r3, [r3]
  03954	e2833044	 add         r3, r3, #0x44
  03958	e58d3004	 str         r3, [sp, #4]

; 1688 :     PBYTE pSrc;
; 1689 : 
; 1690 :     DbgPrintZo(SDH_TRANSMIT_ZONE, (TEXT("SDLoadXmitFifo: Current %d \n"),pRequest->HCParam));

  0395c	e59f3268	 ldr         r3, [pc, #0x268]
  03960	e5933440	 ldr         r3, [r3, #0x440]
  03964	e3130020	 tst         r3, #0x20
  03968	0a000007	 beq         |$LN10@SDLoadXmit|
  0396c	e59d3034	 ldr         r3, [sp, #0x34]
  03970	e2833044	 add         r3, r3, #0x44
  03974	e5931000	 ldr         r1, [r3]
  03978	e59f0250	 ldr         r0, [pc, #0x250]
  0397c	eb000000	 bl          SDCardDebugOutput
  03980	e3a03001	 mov         r3, #1
  03984	e58d3020	 str         r3, [sp, #0x20]
  03988	ea000001	 b           |$LN11@SDLoadXmit|
  0398c		 |$LN10@SDLoadXmit|
  0398c	e3a03000	 mov         r3, #0
  03990	e58d3020	 str         r3, [sp, #0x20]
  03994		 |$LN11@SDLoadXmit|

; 1691 : 
; 1692 :         // make sure the partial full flag is cleared
; 1693 :     TX_BUFFER_PARTIAL_NOT_FULL(pController);

  03994	e3a02000	 mov         r2, #0
  03998	e3a01024	 mov         r1, #0x24
  0399c	e59d0030	 ldr         r0, [sp, #0x30]
  039a0	eb000000	 bl          WRITE_MMC_REGISTER_DWORD

; 1694 : 
; 1695 : 
; 1696 :         // figure out how much to prefetch from the user
; 1697 :         // buffer safely
; 1698 :     remainingBytes = maxBytes - pRequest->HCParam;

  039a4	e59d3034	 ldr         r3, [sp, #0x34]
  039a8	e2833044	 add         r3, r3, #0x44
  039ac	e59d2038	 ldr         r2, [sp, #0x38]
  039b0	e5933000	 ldr         r3, [r3]
  039b4	e0423003	 sub         r3, r2, r3
  039b8	e58d3000	 str         r3, [sp]

; 1699 : 
; 1700 :     if (remainingBytes > MMC_TXFIFO_SIZE) {

  039bc	e59d3000	 ldr         r3, [sp]
  039c0	e3530020	 cmp         r3, #0x20
  039c4	9a000001	 bls         |$LN7@SDLoadXmit|

; 1701 :             // fix it
; 1702 :         remainingBytes = MMC_TXFIFO_SIZE;

  039c8	e3a03020	 mov         r3, #0x20
  039cc	e58d3000	 str         r3, [sp]
  039d0		 |$LN7@SDLoadXmit|

; 1703 :     } 
; 1704 :     pSrc = pRequest->pBlockBuffer+pRequest->HCParam;

  039d0	e59d3034	 ldr         r3, [sp, #0x34]
  039d4	e2832048	 add         r2, r3, #0x48
  039d8	e59d3034	 ldr         r3, [sp, #0x34]
  039dc	e2833044	 add         r3, r3, #0x44
  039e0	e5922000	 ldr         r2, [r2]
  039e4	e5933000	 ldr         r3, [r3]
  039e8	e0823003	 add         r3, r2, r3
  039ec	e58d3010	 str         r3, [sp, #0x10]

; 1705 : 
; 1706 :             // according to the spec (15.2.8.3) the TX Fifo interrupt asserts for every empty fifo
; 1707 :             // (32 bytes)
; 1708 :             // so we write a Fifo's worth, as per spec 
; 1709 :     ii = 0;

  039f0	e3a03000	 mov         r3, #0
  039f4	e58d300c	 str         r3, [sp, #0xC]
  039f8		 |$LN6@SDLoadXmit|

; 1710 :     while( remainingBytes > 0 )

  039f8	e59d3000	 ldr         r3, [sp]
  039fc	e3530000	 cmp         r3, #0
  03a00	9a000044	 bls         |$LN5@SDLoadXmit|

; 1711 :     {
; 1712 :         if( remainingBytes >= 4 )

  03a04	e59d3000	 ldr         r3, [sp]
  03a08	e3530004	 cmp         r3, #4
  03a0c	3a000033	 bcc         |$LN4@SDLoadXmit|

; 1713 :         {
; 1714 :             union {
; 1715 :                 BYTE dataByte[4];
; 1716 :                 DWORD dataLong;
; 1717 :             } data;
; 1718 :             register PBYTE pDst = data.dataByte;

  03a10	e28d3018	 add         r3, sp, #0x18
  03a14	e58d3014	 str         r3, [sp, #0x14]

; 1719 :             *(pDst++) = *(pSrc++);

  03a18	e59d3010	 ldr         r3, [sp, #0x10]
  03a1c	e5d32000	 ldrb        r2, [r3]
  03a20	e59d3014	 ldr         r3, [sp, #0x14]
  03a24	e5c32000	 strb        r2, [r3]
  03a28	e59d3014	 ldr         r3, [sp, #0x14]
  03a2c	e2833001	 add         r3, r3, #1
  03a30	e58d3014	 str         r3, [sp, #0x14]
  03a34	e59d3010	 ldr         r3, [sp, #0x10]
  03a38	e2833001	 add         r3, r3, #1
  03a3c	e58d3010	 str         r3, [sp, #0x10]

; 1720 :             *(pDst++) = *(pSrc++);

  03a40	e59d3010	 ldr         r3, [sp, #0x10]
  03a44	e5d32000	 ldrb        r2, [r3]
  03a48	e59d3014	 ldr         r3, [sp, #0x14]
  03a4c	e5c32000	 strb        r2, [r3]
  03a50	e59d3014	 ldr         r3, [sp, #0x14]
  03a54	e2833001	 add         r3, r3, #1
  03a58	e58d3014	 str         r3, [sp, #0x14]
  03a5c	e59d3010	 ldr         r3, [sp, #0x10]
  03a60	e2833001	 add         r3, r3, #1
  03a64	e58d3010	 str         r3, [sp, #0x10]

; 1721 :             *(pDst++) = *(pSrc++);

  03a68	e59d3010	 ldr         r3, [sp, #0x10]
  03a6c	e5d32000	 ldrb        r2, [r3]
  03a70	e59d3014	 ldr         r3, [sp, #0x14]
  03a74	e5c32000	 strb        r2, [r3]
  03a78	e59d3014	 ldr         r3, [sp, #0x14]
  03a7c	e2833001	 add         r3, r3, #1
  03a80	e58d3014	 str         r3, [sp, #0x14]
  03a84	e59d3010	 ldr         r3, [sp, #0x10]
  03a88	e2833001	 add         r3, r3, #1
  03a8c	e58d3010	 str         r3, [sp, #0x10]

; 1722 :             *(pDst++) = *(pSrc++);

  03a90	e59d3010	 ldr         r3, [sp, #0x10]
  03a94	e5d32000	 ldrb        r2, [r3]
  03a98	e59d3014	 ldr         r3, [sp, #0x14]
  03a9c	e5c32000	 strb        r2, [r3]
  03aa0	e59d3014	 ldr         r3, [sp, #0x14]
  03aa4	e2833001	 add         r3, r3, #1
  03aa8	e58d3014	 str         r3, [sp, #0x14]
  03aac	e59d3010	 ldr         r3, [sp, #0x10]
  03ab0	e2833001	 add         r3, r3, #1
  03ab4	e58d3010	 str         r3, [sp, #0x10]

; 1723 :             // transfer bytes to the fifo from the safe buffer
; 1724 :             *pMMC_TX_FifoDW = data.dataLong;

  03ab8	e59d2018	 ldr         r2, [sp, #0x18]
  03abc	e59d3004	 ldr         r3, [sp, #4]
  03ac0	e5832000	 str         r2, [r3]

; 1725 :             
; 1726 :             remainingBytes-=4;

  03ac4	e59d3000	 ldr         r3, [sp]
  03ac8	e2433004	 sub         r3, r3, #4
  03acc	e58d3000	 str         r3, [sp]

; 1727 :             ii+=4;

  03ad0	e59d300c	 ldr         r3, [sp, #0xC]
  03ad4	e2833004	 add         r3, r3, #4
  03ad8	e58d300c	 str         r3, [sp, #0xC]

; 1728 :         }
; 1729 :         else

  03adc	ea00000c	 b           |$LN3@SDLoadXmit|
  03ae0		 |$LN4@SDLoadXmit|

; 1730 :         {
; 1731 :                 // transfer bytes to the fifo from the safe buffer
; 1732 :             *pMMC_TX_Fifo = *(pSrc++);

  03ae0	e59d3010	 ldr         r3, [sp, #0x10]
  03ae4	e5d32000	 ldrb        r2, [r3]
  03ae8	e59d3008	 ldr         r3, [sp, #8]
  03aec	e5c32000	 strb        r2, [r3]
  03af0	e59d3010	 ldr         r3, [sp, #0x10]
  03af4	e2833001	 add         r3, r3, #1
  03af8	e58d3010	 str         r3, [sp, #0x10]

; 1733 :             remainingBytes--;

  03afc	e59d3000	 ldr         r3, [sp]
  03b00	e2433001	 sub         r3, r3, #1
  03b04	e58d3000	 str         r3, [sp]

; 1734 :             ii++;

  03b08	e59d300c	 ldr         r3, [sp, #0xC]
  03b0c	e2833001	 add         r3, r3, #1
  03b10	e58d300c	 str         r3, [sp, #0xC]
  03b14		 |$LN3@SDLoadXmit|

; 1735 :         }
; 1736 :     } // while

  03b14	eaffffb7	 b           |$LN6@SDLoadXmit|
  03b18		 |$LN5@SDLoadXmit|

; 1737 :     pRequest->HCParam += ii;

  03b18	e59d3034	 ldr         r3, [sp, #0x34]
  03b1c	e2833044	 add         r3, r3, #0x44
  03b20	e5932000	 ldr         r2, [r3]
  03b24	e59d300c	 ldr         r3, [sp, #0xC]
  03b28	e0822003	 add         r2, r2, r3
  03b2c	e59d3034	 ldr         r3, [sp, #0x34]
  03b30	e2833044	 add         r3, r3, #0x44
  03b34	e5832000	 str         r2, [r3]

; 1738 : 
; 1739 :         // check for a partial buffer
; 1740 :     if (ii < MMC_TXFIFO_SIZE) {

  03b38	e59d300c	 ldr         r3, [sp, #0xC]
  03b3c	e3530020	 cmp         r3, #0x20
  03b40	2a000003	 bcs         |$LN2@SDLoadXmit|

; 1741 :         TX_BUFFER_PARTIAL_FULL(pController);

  03b44	e3a02001	 mov         r2, #1
  03b48	e3a01024	 mov         r1, #0x24
  03b4c	e59d0030	 ldr         r0, [sp, #0x30]
  03b50	eb000000	 bl          WRITE_MMC_REGISTER_DWORD
  03b54		 |$LN2@SDLoadXmit|

; 1742 :     }
; 1743 : 
; 1744 :     DbgPrintZo(SDH_TRANSMIT_ZONE, (TEXT("SDLoadXmitFifo: New Current %d  \n"),pRequest->HCParam));

  03b54	e59f3070	 ldr         r3, [pc, #0x70]
  03b58	e5933440	 ldr         r3, [r3, #0x440]
  03b5c	e3130020	 tst         r3, #0x20
  03b60	0a000007	 beq         |$LN12@SDLoadXmit|
  03b64	e59d3034	 ldr         r3, [sp, #0x34]
  03b68	e2833044	 add         r3, r3, #0x44
  03b6c	e5931000	 ldr         r1, [r3]
  03b70	e59f0050	 ldr         r0, [pc, #0x50]
  03b74	eb000000	 bl          SDCardDebugOutput
  03b78	e3a03001	 mov         r3, #1
  03b7c	e58d3024	 str         r3, [sp, #0x24]
  03b80	ea000001	 b           |$LN13@SDLoadXmit|
  03b84		 |$LN12@SDLoadXmit|
  03b84	e3a03000	 mov         r3, #0
  03b88	e58d3024	 str         r3, [sp, #0x24]
  03b8c		 |$LN13@SDLoadXmit|

; 1745 :     
; 1746 :         // see if we are done
; 1747 :     if (pRequest->HCParam >= maxBytes) {

  03b8c	e59d3034	 ldr         r3, [sp, #0x34]
  03b90	e2833044	 add         r3, r3, #0x44
  03b94	e5932000	 ldr         r2, [r3]
  03b98	e59d3038	 ldr         r3, [sp, #0x38]
  03b9c	e1520003	 cmp         r2, r3
  03ba0	3a000002	 bcc         |$LN1@SDLoadXmit|

; 1748 :         return TRUE;

  03ba4	e3a03001	 mov         r3, #1
  03ba8	e58d301c	 str         r3, [sp, #0x1C]
  03bac	ea000001	 b           |$LN8@SDLoadXmit|
  03bb0		 |$LN1@SDLoadXmit|

; 1749 :     } 
; 1750 : 
; 1751 :     return FALSE;

  03bb0	e3a03000	 mov         r3, #0
  03bb4	e58d301c	 str         r3, [sp, #0x1C]
  03bb8		 |$LN8@SDLoadXmit|

; 1752 : }

  03bb8	e59d001c	 ldr         r0, [sp, #0x1C]
  03bbc	e28dd028	 add         sp, sp, #0x28
  03bc0	e89d6000	 ldmia       sp, {sp, lr}
  03bc4	e12fff1e	 bx          lr
  03bc8		 |$LN17@SDLoadXmit|
  03bc8		 |$LN18@SDLoadXmit|
  03bc8	00000000	 DCD         |??_C@_1EE@HFNIGNCC@?$AAS?$AAD?$AAL?$AAo?$AAa?$AAd?$AAX?$AAm?$AAi?$AAt?$AAF?$AAi?$AAf?$AAo?$AA?3?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?5@|
  03bcc		 |$LN19@SDLoadXmit|
  03bcc	00000000	 DCD         |dpCurSettings|
  03bd0		 |$LN20@SDLoadXmit|
  03bd0	00000000	 DCD         |??_C@_1DK@CJPLGAEE@?$AAS?$AAD?$AAL?$AAo?$AAa?$AAd?$AAX?$AAm?$AAi?$AAt?$AAF?$AAi?$AAf?$AAo?$AA?3?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?6?$AA?$AA@|
  03bd4		 |$M45134|

			 ENDP  ; |SDLoadXmitFifo|

	EXPORT	|GetMMCInterrupts|
	EXPORT	|HandleXmitInterrupt|

  00090			 AREA	 |.pdata|, PDATA
|$T45159| DCD	|$LN25@HandleXmit|
	DCD	0xc0006c05
|$T45161| DCD	|$LN15@HandleXmit|
	DCD	0x40000701

  0001c			 AREA	 |.xdata|, DATA
|$T45157| DCD	0x1
	DCD	|$LN19@HandleXmit|
	DCD	|$LN20@HandleXmit|
	DCD	|$LN15@HandleXmit|
	DCD	|$LN16@HandleXmit|
; Function compile flags: /Odtp

  03bd4			 AREA	 |.text|, CODE, ARM

  03bd4	00000000	 DCD         |__C_specific_handler|
  03bd8	00000000	 DCD         |$T45157|

  03bdc		 |HandleXmitInterrupt| PROC

; 1762 : {

  03bdc		 |$LN25@HandleXmit|
  03bdc	e1a0c00d	 mov         r12, sp
  03be0	e92d0001	 stmdb       sp!, {r0}
  03be4	e92d5800	 stmdb       sp!, {r11, r12, lr}
  03be8	e28db00c	 add         r11, sp, #0xC
  03bec	e24dd024	 sub         sp, sp, #0x24
  03bf0		 |$LN23@HandleXmit|

; 1763 :     PSD_BUS_REQUEST pRequest;       // current request
; 1764 :     DWORD maxBytes;
; 1765 :     
; 1766 :     ASSERT( pController->fDMATransfer == FALSE );

  03bf0	e59b3000	 ldr         r3, [r11]
  03bf4	e2833c0a	 add         r3, r3, #0xA, 24
  03bf8	e28330a8	 add         r3, r3, #0xA8
  03bfc	e5933000	 ldr         r3, [r3]
  03c00	e3530000	 cmp         r3, #0
  03c04	1a000002	 bne         |$LN10@HandleXmit|
  03c08	e3a03001	 mov         r3, #1
  03c0c	e50b3020	 str         r3, [r11, #-0x20]
  03c10	ea000008	 b           |$LN11@HandleXmit|
  03c14		 |$LN10@HandleXmit|
  03c14	e3a03c06	 mov         r3, #6, 24
  03c18	e38330e6	 orr         r3, r3, #0xE6
  03c1c	e59f217c	 ldr         r2, [pc, #0x17C]
  03c20	e59f117c	 ldr         r1, [pc, #0x17C]
  03c24	e59f016c	 ldr         r0, [pc, #0x16C]
  03c28	eb000000	 bl          NKDbgPrintfW
  03c2c	e6000010	 __debugbreak_ce
  03c30	e3a03000	 mov         r3, #0
  03c34	e50b3020	 str         r3, [r11, #-0x20]
  03c38		 |$LN11@HandleXmit|

; 1767 : 
; 1768 :         // get the current request  
; 1769 :     pRequest = pController->pCurrentRequest;

  03c38	e59b3000	 ldr         r3, [r11]
  03c3c	e283301c	 add         r3, r3, #0x1C
  03c40	e5933000	 ldr         r3, [r3]
  03c44	e50b302c	 str         r3, [r11, #-0x2C]

; 1770 : 
; 1771 :         // this should never happen because we mark the request as un-cancelable
; 1772 :     DEBUG_ASSERT(NULL != pRequest);

  03c48	e51b302c	 ldr         r3, [r11, #-0x2C]
  03c4c	e3530000	 cmp         r3, #0
  03c50	0a000002	 beq         |$LN12@HandleXmit|
  03c54	e3a03001	 mov         r3, #1
  03c58	e50b301c	 str         r3, [r11, #-0x1C]
  03c5c	ea000008	 b           |$LN13@HandleXmit|
  03c60		 |$LN12@HandleXmit|
  03c60	e3a03c06	 mov         r3, #6, 24
  03c64	e38330ec	 orr         r3, r3, #0xEC
  03c68	e59f2130	 ldr         r2, [pc, #0x130]
  03c6c	e59f1128	 ldr         r1, [pc, #0x128]
  03c70	e59f0120	 ldr         r0, [pc, #0x120]
  03c74	eb000000	 bl          NKDbgPrintfW
  03c78	e6000010	 __debugbreak_ce
  03c7c	e3a03000	 mov         r3, #0
  03c80	e50b301c	 str         r3, [r11, #-0x1C]
  03c84		 |$LN13@HandleXmit|

; 1773 :     if( pRequest == NULL )

  03c84	e51b302c	 ldr         r3, [r11, #-0x2C]
  03c88	e3530000	 cmp         r3, #0
  03c8c	1a000004	 bne         |$LN7@HandleXmit|

; 1774 :     {
; 1775 :         TX_FIFO_INTERRUPT_OFF(pController);

  03c90	e3a02040	 mov         r2, #0x40
  03c94	e3e01000	 mvn         r1, #0
  03c98	e59b0000	 ldr         r0, [r11]
  03c9c	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1776 :         return;

  03ca0	ea000036	 b           |$LN8@HandleXmit|
  03ca4		 |$LN7@HandleXmit|

; 1777 :     }
; 1778 : 
; 1779 :     maxBytes = pRequest->NumBlocks * pRequest->BlockSize;

  03ca4	e51b302c	 ldr         r3, [r11, #-0x2C]
  03ca8	e283203c	 add         r2, r3, #0x3C
  03cac	e51b302c	 ldr         r3, [r11, #-0x2C]
  03cb0	e2833040	 add         r3, r3, #0x40
  03cb4	e5922000	 ldr         r2, [r2]
  03cb8	e5933000	 ldr         r3, [r3]
  03cbc	e0030392	 mul         r3, r2, r3
  03cc0	e50b3030	 str         r3, [r11, #-0x30]
  03cc4		 |$LN6@HandleXmit|

; 1780 :     while (pRequest->HCParam < maxBytes && IsCardPresent()) {

  03cc4	e51b302c	 ldr         r3, [r11, #-0x2C]
  03cc8	e2833044	 add         r3, r3, #0x44
  03ccc	e5932000	 ldr         r2, [r3]
  03cd0	e51b3030	 ldr         r3, [r11, #-0x30]
  03cd4	e1520003	 cmp         r2, r3
  03cd8	2a000020	 bcs         |$LN5@HandleXmit|
  03cdc	eb000000	 bl          IsCardPresent
  03ce0	e50b0018	 str         r0, [r11, #-0x18]
  03ce4	e51b3018	 ldr         r3, [r11, #-0x18]
  03ce8	e3530000	 cmp         r3, #0
  03cec	0a00001b	 beq         |$LN5@HandleXmit|

; 1781 :         DWORD dwIntr = GetMMCInterrupts(pController);

  03cf0	e59b0000	 ldr         r0, [r11]
  03cf4	eb000000	 bl          GetMMCInterrupts
  03cf8	e50b0014	 str         r0, [r11, #-0x14]
  03cfc	e51b3014	 ldr         r3, [r11, #-0x14]
  03d00	e50b3028	 str         r3, [r11, #-0x28]

; 1782 :         if (dwIntr & MMC_IREG_TXFIFO_REQ) {

  03d04	e51b3028	 ldr         r3, [r11, #-0x28]
  03d08	e3130040	 tst         r3, #0x40
  03d0c	0a00000e	 beq         |$LN4@HandleXmit|
  03d10		 |$LN19@HandleXmit|

; 1783 :             BOOL fReturn ;
; 1784 :             __try {
; 1785 :                 fReturn = SDLoadXmitFifo(pController, pRequest, maxBytes);

  03d10	e51b2030	 ldr         r2, [r11, #-0x30]
  03d14	e51b102c	 ldr         r1, [r11, #-0x2C]
  03d18	e59b0000	 ldr         r0, [r11]
  03d1c	eb000000	 bl          SDLoadXmitFifo
  03d20	e50b0010	 str         r0, [r11, #-0x10]
  03d24	e51b3010	 ldr         r3, [r11, #-0x10]
  03d28	e50b3024	 str         r3, [r11, #-0x24]
  03d2c		 |$LN20@HandleXmit|

; 1786 :             }

  03d2c	ea000002	 b           |$LN21@HandleXmit|
  03d30		 |$LN16@HandleXmit|

; 1788 :                 fReturn = TRUE ;

  03d30	e3a03001	 mov         r3, #1
  03d34	e50b3024	 str         r3, [r11, #-0x24]
  03d38	eaffffff	 b           |$LN21@HandleXmit|
  03d3c		 |$LN21@HandleXmit|

; 1789 :             }
; 1790 :             if (fReturn)

  03d3c	e51b3024	 ldr         r3, [r11, #-0x24]
  03d40	e3530000	 cmp         r3, #0
  03d44	0a000000	 beq         |$LN2@HandleXmit|

; 1791 :                 break;                

  03d48	ea000004	 b           |$LN5@HandleXmit|
  03d4c		 |$LN2@HandleXmit|
  03d4c		 |$LN4@HandleXmit|

; 1792 :         }            
; 1793 :         if (dwIntr & (MMC_IREG_END_CMD | MMC_IREG_RES_ERR))

  03d4c	e51b3028	 ldr         r3, [r11, #-0x28]
  03d50	e3130f81	 tst         r3, #0x81, 30
  03d54	0a000000	 beq         |$LN1@HandleXmit|

; 1794 :             break;

  03d58	ea000000	 b           |$LN5@HandleXmit|
  03d5c		 |$LN1@HandleXmit|

; 1795 :     }

  03d5c	eaffffd8	 b           |$LN6@HandleXmit|
  03d60		 |$LN5@HandleXmit|

; 1796 :     // the request is complete  
; 1797 :     // turn off the Fifo Interrupts
; 1798 :     TX_FIFO_INTERRUPT_OFF(pController);

  03d60	e3a02040	 mov         r2, #0x40
  03d64	e3e01000	 mvn         r1, #0
  03d68	e59b0000	 ldr         r0, [r11]
  03d6c	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1799 :     SetCurrentState(pController, WriteDataTransferDone);

  03d70	e59b3000	 ldr         r3, [r11]
  03d74	e2832ecf	 add         r2, r3, #0xCF, 28
  03d78	e3a03005	 mov         r3, #5
  03d7c	e5823000	 str         r3, [r2]
  03d80		 |$LN8@HandleXmit|
  03d80		 |$LN14@HandleXmit|

; 1800 : 
; 1801 :     // now we need to wait for the controller to transmit (transfer done) and the card 
; 1802 :     // to complete programming (program done)
; 1803 :     // if the transfer is done or programming is done before we go back into the interrupt wait
; 1804 :     // the interrupt bit will be set and the IST loop will handle the transfer done in this same thread     
; 1805 : 
; 1806 : }

  03d80	e24bd00c	 sub         sp, r11, #0xC
  03d84	e89d6800	 ldmia       sp, {r11, sp, lr}
  03d88	e12fff1e	 bx          lr

			 ENDP  ; |HandleXmitInterrupt|

  03d8c		 |$LN15@HandleXmit|
  03d8c		 |$LN24@HandleXmit|

; 1787 :             __except(EXCEPTION_EXECUTE_HANDLER) {

  03d8c	e52de004	 str         lr, [sp, #-4]!
  03d90		 |$LN18@HandleXmit|
  03d90		 |$LN27@HandleXmit|
  03d90	e3a00001	 mov         r0, #1
  03d94		 |$LN17@HandleXmit|
  03d94	e49df004	 ldr         pc, [sp], #4
  03d98		 |$LN29@HandleXmit|
  03d98		 |$LN30@HandleXmit|
  03d98	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  03d9c		 |$LN31@HandleXmit|
  03d9c	00000000	 DCD         |dpCurSettings|
  03da0		 |$LN32@HandleXmit|
  03da0	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  03da4		 |$LN33@HandleXmit|
  03da4	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  03da8		 |$LN28@HandleXmit|
  03da8		 |$LN26@HandleXmit|
	EXPORT	|??_C@_1JG@CIJELANF@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAT?$AAr?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@EPPOABDL@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAC?$AAu?$AAr?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@BDJLEJNH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAa?$AAx?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?0@| [ DATA ] ; `string'
	EXPORT	|HandleReceiveInterrupt|

  000a0			 AREA	 |.pdata|, PDATA
|$T45193| DCD	|$LN32@HandleRece|
	DCD	0xc0009505
|$T45195| DCD	|$LN22@HandleRece|
	DCD	0x40000a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@CIJELANF@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAT?$AAr?$AAa@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "R"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "a", 0x0, "t", 0x0, "a", 0x0, " ", 0x0, "T", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "T", 0x0, "R", 0x0, "A", 0x0, "N", 0x0, "S", 0x0, "_"
	DCB	0x0, "D", 0x0, "O", 0x0, "N", 0x0, "E", 0x0, ".", 0x0, "."
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@EPPOABDL@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAC?$AAu?$AAr?$AAr@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "R"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "N"
	DCB	0x0, "e", 0x0, "w", 0x0, " ", 0x0, "C", 0x0, "u", 0x0, "r"
	DCB	0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@BDJLEJNH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAa?$AAx?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?0@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "R"
	DCB	0x0, "e", 0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "M"
	DCB	0x0, "a", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00030			 AREA	 |.xdata|, DATA
|$T45191| DCD	0x1
	DCD	|$LN26@HandleRece|
	DCD	|$LN27@HandleRece|
	DCD	|$LN22@HandleRece|
	DCD	|$LN23@HandleRece|
; Function compile flags: /Odtp

  03da8			 AREA	 |.text|, CODE, ARM

  03da8	00000000	 DCD         |__C_specific_handler|
  03dac	00000000	 DCD         |$T45191|

  03db0		 |HandleReceiveInterrupt| PROC

; 1816 : {

  03db0		 |$LN32@HandleRece|
  03db0	e1a0c00d	 mov         r12, sp
  03db4	e92d0001	 stmdb       sp!, {r0}
  03db8	e92d5800	 stmdb       sp!, {r11, r12, lr}
  03dbc	e28db00c	 add         r11, sp, #0xC
  03dc0	e24dd02c	 sub         sp, sp, #0x2C
  03dc4		 |$LN30@HandleRece|

; 1817 :     PSD_BUS_REQUEST pRequest;       // current request
; 1818 :     DWORD           maxBytes;       // max bytes
; 1819 :     ULONG           ii = 0;         // loop variable

  03dc4	e3a03000	 mov         r3, #0
  03dc8	e50b3030	 str         r3, [r11, #-0x30]

; 1820 : 
; 1821 :     ASSERT( pController->fDMATransfer == FALSE );

  03dcc	e59b3000	 ldr         r3, [r11]
  03dd0	e2833c0a	 add         r3, r3, #0xA, 24
  03dd4	e28330a8	 add         r3, r3, #0xA8
  03dd8	e5933000	 ldr         r3, [r3]
  03ddc	e3530000	 cmp         r3, #0
  03de0	1a000002	 bne         |$LN11@HandleRece|
  03de4	e3a03001	 mov         r3, #1
  03de8	e50b3028	 str         r3, [r11, #-0x28]
  03dec	ea000008	 b           |$LN12@HandleRece|
  03df0		 |$LN11@HandleRece|
  03df0	e3a03c07	 mov         r3, #7, 24
  03df4	e383301d	 orr         r3, r3, #0x1D
  03df8	e59f2224	 ldr         r2, [pc, #0x224]
  03dfc	e59f1224	 ldr         r1, [pc, #0x224]
  03e00	e59f0218	 ldr         r0, [pc, #0x218]
  03e04	eb000000	 bl          NKDbgPrintfW
  03e08	e6000010	 __debugbreak_ce
  03e0c	e3a03000	 mov         r3, #0
  03e10	e50b3028	 str         r3, [r11, #-0x28]
  03e14		 |$LN12@HandleRece|

; 1822 : 
; 1823 :         // get the current request  
; 1824 :     pRequest = pController->pCurrentRequest;

  03e14	e59b3000	 ldr         r3, [r11]
  03e18	e283301c	 add         r3, r3, #0x1C
  03e1c	e5933000	 ldr         r3, [r3]
  03e20	e50b3034	 str         r3, [r11, #-0x34]

; 1825 : 
; 1826 :         // this should never happen because we mark the request as un-cancelable
; 1827 :     DEBUG_ASSERT(NULL != pRequest);

  03e24	e51b3034	 ldr         r3, [r11, #-0x34]
  03e28	e3530000	 cmp         r3, #0
  03e2c	0a000002	 beq         |$LN13@HandleRece|
  03e30	e3a03001	 mov         r3, #1
  03e34	e50b3024	 str         r3, [r11, #-0x24]
  03e38	ea000008	 b           |$LN14@HandleRece|
  03e3c		 |$LN13@HandleRece|
  03e3c	e3a03c07	 mov         r3, #7, 24
  03e40	e3833023	 orr         r3, r3, #0x23
  03e44	e59f21d8	 ldr         r2, [pc, #0x1D8]
  03e48	e59f11c4	 ldr         r1, [pc, #0x1C4]
  03e4c	e59f01cc	 ldr         r0, [pc, #0x1CC]
  03e50	eb000000	 bl          NKDbgPrintfW
  03e54	e6000010	 __debugbreak_ce
  03e58	e3a03000	 mov         r3, #0
  03e5c	e50b3024	 str         r3, [r11, #-0x24]
  03e60		 |$LN14@HandleRece|

; 1828 :     if(NULL == pRequest)

  03e60	e51b3034	 ldr         r3, [r11, #-0x34]
  03e64	e3530000	 cmp         r3, #0
  03e68	1a000004	 bne         |$LN8@HandleRece|

; 1829 :     {
; 1830 :         RX_FIFO_INTERRUPT_OFF(pController);

  03e6c	e3a02020	 mov         r2, #0x20
  03e70	e3e01000	 mvn         r1, #0
  03e74	e59b0000	 ldr         r0, [r11]
  03e78	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1831 :         return;

  03e7c	ea00005d	 b           |$LN9@HandleRece|
  03e80		 |$LN8@HandleRece|

; 1832 :     }
; 1833 : 
; 1834 :     maxBytes = pRequest->NumBlocks * pRequest->BlockSize;

  03e80	e51b3034	 ldr         r3, [r11, #-0x34]
  03e84	e283203c	 add         r2, r3, #0x3C
  03e88	e51b3034	 ldr         r3, [r11, #-0x34]
  03e8c	e2833040	 add         r3, r3, #0x40
  03e90	e5922000	 ldr         r2, [r2]
  03e94	e5933000	 ldr         r3, [r3]
  03e98	e0030392	 mul         r3, r2, r3
  03e9c	e50b3038	 str         r3, [r11, #-0x38]

; 1835 :     
; 1836 :     DbgPrintZo(SDH_RECEIVE_ZONE, (TEXT("HandleReceiveInterrupt: Max: %d, Current %d \n"),
; 1837 :         maxBytes, pRequest->HCParam));

  03ea0	e59f316c	 ldr         r3, [pc, #0x16C]
  03ea4	e5933440	 ldr         r3, [r3, #0x440]
  03ea8	e3130008	 tst         r3, #8
  03eac	0a000008	 beq         |$LN15@HandleRece|
  03eb0	e51b3034	 ldr         r3, [r11, #-0x34]
  03eb4	e2833044	 add         r3, r3, #0x44
  03eb8	e5932000	 ldr         r2, [r3]
  03ebc	e51b1038	 ldr         r1, [r11, #-0x38]
  03ec0	e59f0154	 ldr         r0, [pc, #0x154]
  03ec4	eb000000	 bl          SDCardDebugOutput
  03ec8	e3a03001	 mov         r3, #1
  03ecc	e50b3020	 str         r3, [r11, #-0x20]
  03ed0	ea000001	 b           |$LN16@HandleRece|
  03ed4		 |$LN15@HandleRece|
  03ed4	e3a03000	 mov         r3, #0
  03ed8	e50b3020	 str         r3, [r11, #-0x20]
  03edc		 |$LN16@HandleRece|
  03edc		 |$LN6@HandleRece|

; 1838 :  
; 1839 :         // according to the spec (15.2.8.2) the RX Fifo interrupt asserts for every 32 bytes and
; 1840 :         // remains asserted until the RX fifo is empty, once it is empty 
; 1841 :         // the interrupt req resets and won't assert until 32 more bytes are received
; 1842 :         // or until the transfer is complete and their is a partial Fifo
; 1843 :     if ((maxBytes - pRequest->HCParam) >= (LONG)MMC_RXFIFO_SIZE) {
; 1844 :             // because the remaining bytes is greater than or equal to the fifo size,
; 1845 :             // the fifo better be full as per Intel spec!
; 1846 :         // DEBUG_ASSERT(RX_FIFO_FULL(pController)); @todo
; 1847 :     }
; 1848 : 
; 1849 :     // read a Fifo's worth, as per spec 
; 1850 :     while ( IsCardPresent() && pRequest->HCParam<maxBytes ) {

  03edc	eb000000	 bl          IsCardPresent
  03ee0	e50b001c	 str         r0, [r11, #-0x1C]
  03ee4	e51b301c	 ldr         r3, [r11, #-0x1C]
  03ee8	e3530000	 cmp         r3, #0
  03eec	0a00001a	 beq         |$LN5@HandleRece|
  03ef0	e51b3034	 ldr         r3, [r11, #-0x34]
  03ef4	e2833044	 add         r3, r3, #0x44
  03ef8	e5932000	 ldr         r2, [r3]
  03efc	e51b3038	 ldr         r3, [r11, #-0x38]
  03f00	e1520003	 cmp         r2, r3
  03f04	2a000014	 bcs         |$LN5@HandleRece|

; 1851 :         DWORD dwIntr = GetMMCInterrupts(pController);

  03f08	e59b0000	 ldr         r0, [r11]
  03f0c	eb000000	 bl          GetMMCInterrupts
  03f10	e50b0018	 str         r0, [r11, #-0x18]
  03f14	e51b3018	 ldr         r3, [r11, #-0x18]
  03f18	e50b302c	 str         r3, [r11, #-0x2C]

; 1852 :         if (dwIntr & MMC_IREG_RXFIFO_REQ) {

  03f1c	e51b302c	 ldr         r3, [r11, #-0x2C]
  03f20	e3130020	 tst         r3, #0x20
  03f24	0a000007	 beq         |$LN4@HandleRece|
  03f28		 |$LN26@HandleRece|

; 1853 :             __try { 
; 1854 :                 EmptyReceiveFifo(pController, pRequest, MMC_RXFIFO_SIZE, maxBytes);

  03f28	e51b3038	 ldr         r3, [r11, #-0x38]
  03f2c	e3a02020	 mov         r2, #0x20
  03f30	e51b1034	 ldr         r1, [r11, #-0x34]
  03f34	e59b0000	 ldr         r0, [r11]
  03f38	eb000000	 bl          EmptyReceiveFifo
  03f3c		 |$LN27@HandleRece|
  03f3c	ea000001	 b           |$LN28@HandleRece|
  03f40		 |$LN23@HandleRece|

; 1856 :                 break;

  03f40	ea000005	 b           |$LN5@HandleRece|
  03f44	eaffffff	 b           |$LN28@HandleRece|
  03f48		 |$LN28@HandleRece|
  03f48		 |$LN4@HandleRece|

; 1857 :             }
; 1858 :         }
; 1859 :         if (dwIntr & (MMC_IREG_END_CMD | MMC_IREG_RES_ERR))

  03f48	e51b302c	 ldr         r3, [r11, #-0x2C]
  03f4c	e3130f81	 tst         r3, #0x81, 30
  03f50	0a000000	 beq         |$LN2@HandleRece|

; 1860 :             break;

  03f54	ea000000	 b           |$LN5@HandleRece|
  03f58		 |$LN2@HandleRece|

; 1861 :     }

  03f58	eaffffdf	 b           |$LN6@HandleRece|
  03f5c		 |$LN5@HandleRece|

; 1862 : 
; 1863 :     DbgPrintZo(SDH_RECEIVE_ZONE, (TEXT("HandleReceiveInterrupt: New Current %d  \n"),pRequest->HCParam));

  03f5c	e59f30b0	 ldr         r3, [pc, #0xB0]
  03f60	e5933440	 ldr         r3, [r3, #0x440]
  03f64	e3130008	 tst         r3, #8
  03f68	0a000007	 beq         |$LN17@HandleRece|
  03f6c	e51b3034	 ldr         r3, [r11, #-0x34]
  03f70	e2833044	 add         r3, r3, #0x44
  03f74	e5931000	 ldr         r1, [r3]
  03f78	e59f0098	 ldr         r0, [pc, #0x98]
  03f7c	eb000000	 bl          SDCardDebugOutput
  03f80	e3a03001	 mov         r3, #1
  03f84	e50b3014	 str         r3, [r11, #-0x14]
  03f88	ea000001	 b           |$LN18@HandleRece|
  03f8c		 |$LN17@HandleRece|
  03f8c	e3a03000	 mov         r3, #0
  03f90	e50b3014	 str         r3, [r11, #-0x14]
  03f94		 |$LN18@HandleRece|

; 1864 :     
; 1865 :         // see if we are done
; 1866 :     if (pRequest->HCParam >= maxBytes) {

  03f94	e51b3034	 ldr         r3, [r11, #-0x34]
  03f98	e2833044	 add         r3, r3, #0x44
  03f9c	e5932000	 ldr         r2, [r3]
  03fa0	e51b3038	 ldr         r3, [r11, #-0x38]
  03fa4	e1520003	 cmp         r2, r3
  03fa8	3a000012	 bcc         |$LN1@HandleRece|

; 1867 :         DbgPrintZo(SDH_RECEIVE_ZONE, (TEXT("HandleReceiveInterrupt: Data Transfer Completing waiting for TRANS_DONE..\n")));    

  03fac	e59f3060	 ldr         r3, [pc, #0x60]
  03fb0	e5933440	 ldr         r3, [r3, #0x440]
  03fb4	e3130008	 tst         r3, #8
  03fb8	0a000004	 beq         |$LN19@HandleRece|
  03fbc	e59f004c	 ldr         r0, [pc, #0x4C]
  03fc0	eb000000	 bl          SDCardDebugOutput
  03fc4	e3a03001	 mov         r3, #1
  03fc8	e50b3010	 str         r3, [r11, #-0x10]
  03fcc	ea000001	 b           |$LN20@HandleRece|
  03fd0		 |$LN19@HandleRece|
  03fd0	e3a03000	 mov         r3, #0
  03fd4	e50b3010	 str         r3, [r11, #-0x10]
  03fd8		 |$LN20@HandleRece|

; 1868 :             // if we are finished, turn off the RX Fifo request interrupt
; 1869 :         RX_FIFO_INTERRUPT_OFF(pController);  

  03fd8	e3a02020	 mov         r2, #0x20
  03fdc	e3e01000	 mvn         r1, #0
  03fe0	e59b0000	 ldr         r0, [r11]
  03fe4	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 1870 :         SetCurrentState(pController, ReadDataTransferDone);

  03fe8	e59b3000	 ldr         r3, [r11]
  03fec	e2832ecf	 add         r2, r3, #0xCF, 28
  03ff0	e3a03009	 mov         r3, #9
  03ff4	e5823000	 str         r3, [r2]
  03ff8		 |$LN1@HandleRece|
  03ff8		 |$LN9@HandleRece|
  03ff8		 |$LN21@HandleRece|

; 1871 :         // now we need to wait for the controller to perform the CRC check and issue trailing clocks (transfer done)
; 1872 :         // if the transfer is done, the interrupt bit will be set and the IST loop will 
; 1873 :         // handle the transfer done in this same thread      
; 1874 :     }  
; 1875 : 
; 1876 :         // we could mark the request as cancelable again...
; 1877 : }

  03ff8	e24bd00c	 sub         sp, r11, #0xC
  03ffc	e89d6800	 ldmia       sp, {r11, sp, lr}
  04000	e12fff1e	 bx          lr

			 ENDP  ; |HandleReceiveInterrupt|

  04004		 |$LN22@HandleRece|
  04004		 |$LN31@HandleRece|

; 1855 :             }__except(EXCEPTION_EXECUTE_HANDLER) {

  04004	e52de004	 str         lr, [sp, #-4]!
  04008		 |$LN25@HandleRece|
  04008		 |$LN34@HandleRece|
  04008	e3a00001	 mov         r0, #1
  0400c		 |$LN24@HandleRece|
  0400c	e49df004	 ldr         pc, [sp], #4
  04010		 |$LN36@HandleRece|
  04010		 |$LN37@HandleRece|
  04010	00000000	 DCD         |??_C@_1JG@CIJELANF@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAT?$AAr?$AAa@|
  04014		 |$LN38@HandleRece|
  04014	00000000	 DCD         |dpCurSettings|
  04018		 |$LN39@HandleRece|
  04018	00000000	 DCD         |??_C@_1FE@EPPOABDL@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAN?$AAe?$AAw?$AA?5?$AAC?$AAu?$AAr?$AAr@|
  0401c		 |$LN40@HandleRece|
  0401c	00000000	 DCD         |??_C@_1FM@BDJLEJNH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAM?$AAa?$AAx?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?0@|
  04020		 |$LN41@HandleRece|
  04020	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  04024		 |$LN42@HandleRece|
  04024	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  04028		 |$LN43@HandleRece|
  04028	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  0402c		 |$LN35@HandleRece|
  0402c		 |$LN33@HandleRece|
	EXPORT	|PrepareDmaTransferOnDriverBuffer|

  000b0			 AREA	 |.pdata|, PDATA
|$T45215| DCD	|$LN17@PrepareDma|
	DCD	0x4000df04
; Function compile flags: /Odtp

  0402c			 AREA	 |.text|, CODE, ARM

  0402c		 |PrepareDmaTransferOnDriverBuffer| PROC

; 1887 : {

  0402c		 |$LN17@PrepareDma|
  0402c	e1a0c00d	 mov         r12, sp
  04030	e92d0003	 stmdb       sp!, {r0, r1}
  04034	e92d5000	 stmdb       sp!, {r12, lr}
  04038	e24dd024	 sub         sp, sp, #0x24
  0403c		 |$M45212|

; 1888 :     DWORD dwTransferLength;
; 1889 :     DWORD dwDataAddress;
; 1890 :     DWORD dwNextDescriptorAddress;
; 1891 :     DWORD dwDescriptorIndex = 0;

  0403c	e3a03000	 mov         r3, #0
  04040	e58d3000	 str         r3, [sp]

; 1892 : 
; 1893 :     ASSERT( MAXIMUM_DMA_TRANSFER_SIZE >= pController->systemInfo.dwPageSize );

  04044	e59d302c	 ldr         r3, [sp, #0x2C]
  04048	e2833048	 add         r3, r3, #0x48
  0404c	e5932000	 ldr         r2, [r3]
  04050	e3a03c1f	 mov         r3, #0x1F, 24
  04054	e38330ff	 orr         r3, r3, #0xFF
  04058	e1520003	 cmp         r2, r3
  0405c	8a000002	 bhi         |$LN11@PrepareDma|
  04060	e3a03001	 mov         r3, #1
  04064	e58d3018	 str         r3, [sp, #0x18]
  04068	ea000008	 b           |$LN12@PrepareDma|
  0406c		 |$LN11@PrepareDma|
  0406c	e3a03c07	 mov         r3, #7, 24
  04070	e3833065	 orr         r3, r3, #0x65
  04074	e59f2328	 ldr         r2, [pc, #0x328]
  04078	e59f1320	 ldr         r1, [pc, #0x320]
  0407c	e59f0318	 ldr         r0, [pc, #0x318]
  04080	eb000000	 bl          NKDbgPrintfW
  04084	e6000010	 __debugbreak_ce
  04088	e3a03000	 mov         r3, #0
  0408c	e58d3018	 str         r3, [sp, #0x18]
  04090		 |$LN12@PrepareDma|

; 1894 : 
; 1895 :     dwTransferLength = pRequest->BlockSize * pRequest->NumBlocks;

  04090	e59d3030	 ldr         r3, [sp, #0x30]
  04094	e2832040	 add         r2, r3, #0x40
  04098	e59d3030	 ldr         r3, [sp, #0x30]
  0409c	e283303c	 add         r3, r3, #0x3C
  040a0	e5922000	 ldr         r2, [r2]
  040a4	e5933000	 ldr         r3, [r3]
  040a8	e0030392	 mul         r3, r2, r3
  040ac	e58d3008	 str         r3, [sp, #8]

; 1896 :     dwDataAddress = pController->pDMABufferPhys.LowPart;

  040b0	e59d302c	 ldr         r3, [sp, #0x2C]
  040b4	e2833070	 add         r3, r3, #0x70
  040b8	e5933000	 ldr         r3, [r3]
  040bc	e58d3004	 str         r3, [sp, #4]

; 1897 :     dwNextDescriptorAddress = pController->pDMADescriptorsPhys.LowPart + sizeof(DMADescriptorChannelType);

  040c0	e59d302c	 ldr         r3, [sp, #0x2C]
  040c4	e2833080	 add         r3, r3, #0x80
  040c8	e5933000	 ldr         r3, [r3]
  040cc	e2833010	 add         r3, r3, #0x10
  040d0	e58d300c	 str         r3, [sp, #0xC]

; 1898 : 
; 1899 :     // copy the data to the driver buffer for writing
; 1900 :     if( !(TRANSFER_IS_READ(pRequest)) )

  040d4	e59d3030	 ldr         r3, [sp, #0x30]
  040d8	e2833010	 add         r3, r3, #0x10
  040dc	e5933000	 ldr         r3, [r3]
  040e0	e3530000	 cmp         r3, #0
  040e4	0a00000e	 beq         |$LN8@PrepareDma|

; 1901 :     {
; 1902 :         if( !SDPerformSafeCopy(pController->pDMABuffer,
; 1903 :                                pRequest->pBlockBuffer,
; 1904 :                                dwTransferLength) )

  040e8	e59d2008	 ldr         r2, [sp, #8]
  040ec	e59d3030	 ldr         r3, [sp, #0x30]
  040f0	e2833048	 add         r3, r3, #0x48
  040f4	e5931000	 ldr         r1, [r3]
  040f8	e59d302c	 ldr         r3, [sp, #0x2C]
  040fc	e2833068	 add         r3, r3, #0x68
  04100	e5930000	 ldr         r0, [r3]
  04104	eb000000	 bl          SDPerformSafeCopy
  04108	e5cd001c	 strb        r0, [sp, #0x1C]
  0410c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  04110	e3530000	 cmp         r3, #0
  04114	1a000002	 bne         |$LN7@PrepareDma|

; 1905 :         {
; 1906 :             return FALSE;

  04118	e3a03000	 mov         r3, #0
  0411c	e58d3014	 str         r3, [sp, #0x14]
  04120	ea000097	 b           |$LN9@PrepareDma|
  04124		 |$LN7@PrepareDma|
  04124		 |$LN8@PrepareDma|
  04124		 |$LN6@PrepareDma|

; 1907 :         }
; 1908 :     }
; 1909 : 
; 1910 :     // prepare the descriptors
; 1911 :     while( dwTransferLength > 0 )

  04124	e59d3008	 ldr         r3, [sp, #8]
  04128	e3530000	 cmp         r3, #0
  0412c	9a000088	 bls         |$LN5@PrepareDma|

; 1912 :     {
; 1913 :         DWORD dwBlockLength = dwTransferLength;

  04130	e59d3008	 ldr         r3, [sp, #8]
  04134	e58d3010	 str         r3, [sp, #0x10]

; 1914 :         if( dwBlockLength > pController->systemInfo.dwPageSize )

  04138	e59d302c	 ldr         r3, [sp, #0x2C]
  0413c	e2833048	 add         r3, r3, #0x48
  04140	e59d2010	 ldr         r2, [sp, #0x10]
  04144	e5933000	 ldr         r3, [r3]
  04148	e1520003	 cmp         r2, r3
  0414c	9a000003	 bls         |$LN4@PrepareDma|

; 1915 :         {
; 1916 :             dwBlockLength = pController->systemInfo.dwPageSize;

  04150	e59d302c	 ldr         r3, [sp, #0x2C]
  04154	e2833048	 add         r3, r3, #0x48
  04158	e5933000	 ldr         r3, [r3]
  0415c	e58d3010	 str         r3, [sp, #0x10]
  04160		 |$LN4@PrepareDma|

; 1917 :         }
; 1918 : 
; 1919 :         ASSERT( dwNextDescriptorAddress % 16 == 0 ); // make sure the address is 128 bit aligned

  04160	e59d100c	 ldr         r1, [sp, #0xC]
  04164	e3a00010	 mov         r0, #0x10
  04168	eb000000	 bl          __rt_udiv
  0416c	e3510000	 cmp         r1, #0
  04170	1a000002	 bne         |$LN13@PrepareDma|
  04174	e3a03001	 mov         r3, #1
  04178	e58d3020	 str         r3, [sp, #0x20]
  0417c	ea000008	 b           |$LN14@PrepareDma|
  04180		 |$LN13@PrepareDma|
  04180	e3a03c07	 mov         r3, #7, 24
  04184	e383307f	 orr         r3, r3, #0x7F
  04188	e59f2214	 ldr         r2, [pc, #0x214]
  0418c	e59f120c	 ldr         r1, [pc, #0x20C]
  04190	e59f0204	 ldr         r0, [pc, #0x204]
  04194	eb000000	 bl          NKDbgPrintfW
  04198	e6000010	 __debugbreak_ce
  0419c	e3a03000	 mov         r3, #0
  041a0	e58d3020	 str         r3, [sp, #0x20]
  041a4		 |$LN14@PrepareDma|

; 1920 :         pController->pDMADescriptors[dwDescriptorIndex].ddadr = dwNextDescriptorAddress;

  041a4	e59d302c	 ldr         r3, [sp, #0x2C]
  041a8	e2830078	 add         r0, r3, #0x78
  041ac	e59d1000	 ldr         r1, [sp]
  041b0	e3a03010	 mov         r3, #0x10
  041b4	e0020391	 mul         r2, r1, r3
  041b8	e5903000	 ldr         r3, [r0]
  041bc	e0832002	 add         r2, r3, r2
  041c0	e59d300c	 ldr         r3, [sp, #0xC]
  041c4	e5823000	 str         r3, [r2]

; 1921 : 
; 1922 :         if( (TRANSFER_IS_READ(pRequest)) )

  041c8	e59d3030	 ldr         r3, [sp, #0x30]
  041cc	e2833010	 add         r3, r3, #0x10
  041d0	e5933000	 ldr         r3, [r3]
  041d4	e3530000	 cmp         r3, #0
  041d8	1a000021	 bne         |$LN3@PrepareDma|

; 1923 :         {
; 1924 :             pController->pDMADescriptors[dwDescriptorIndex].dsadr = SDIO_RX_FIFO;

  041dc	e59d302c	 ldr         r3, [sp, #0x2C]
  041e0	e2830078	 add         r0, r3, #0x78
  041e4	e59d1000	 ldr         r1, [sp]
  041e8	e3a03010	 mov         r3, #0x10
  041ec	e0020391	 mul         r2, r1, r3
  041f0	e5903000	 ldr         r3, [r0]
  041f4	e0833002	 add         r3, r3, r2
  041f8	e2832004	 add         r2, r3, #4
  041fc	e59f3194	 ldr         r3, [pc, #0x194]
  04200	e5823000	 str         r3, [r2]

; 1925 :             pController->pDMADescriptors[dwDescriptorIndex].dtadr = dwDataAddress;

  04204	e59d302c	 ldr         r3, [sp, #0x2C]
  04208	e2830078	 add         r0, r3, #0x78
  0420c	e59d1000	 ldr         r1, [sp]
  04210	e3a03010	 mov         r3, #0x10
  04214	e0020391	 mul         r2, r1, r3
  04218	e5903000	 ldr         r3, [r0]
  0421c	e0833002	 add         r3, r3, r2
  04220	e2832008	 add         r2, r3, #8
  04224	e59d3004	 ldr         r3, [sp, #4]
  04228	e5823000	 str         r3, [r2]

; 1926 :             pController->pDMADescriptors[dwDescriptorIndex].dcmd  = DCMD_INC_TRG_ADDR |
; 1927 :                                                        DCMD_FLOW_SRC | 
; 1928 :                                                        //DCMD_END_IRQ_EN |
; 1929 :                                                        ( 3 << 16 ) | // 32 bytes maximum burst size of each data transfer
; 1930 :                                                        ( 3 << 14 ) | // 4 bytes width
; 1931 :                                                        dwBlockLength;

  0422c	e59d2010	 ldr         r2, [sp, #0x10]
  04230	e3a03206	 mov         r3, #6, 4
  04234	e383390f	 orr         r3, r3, #0xF, 18
  04238	e182e003	 orr         lr, r2, r3
  0423c	e59d302c	 ldr         r3, [sp, #0x2C]
  04240	e2830078	 add         r0, r3, #0x78
  04244	e59d1000	 ldr         r1, [sp]
  04248	e3a03010	 mov         r3, #0x10
  0424c	e0020391	 mul         r2, r1, r3
  04250	e5903000	 ldr         r3, [r0]
  04254	e0833002	 add         r3, r3, r2
  04258	e283300c	 add         r3, r3, #0xC
  0425c	e583e000	 str         lr, [r3]

; 1932 :         }
; 1933 :         else

  04260	ea000020	 b           |$LN2@PrepareDma|
  04264		 |$LN3@PrepareDma|

; 1934 :         {
; 1935 :             pController->pDMADescriptors[dwDescriptorIndex].dsadr = dwDataAddress;

  04264	e59d302c	 ldr         r3, [sp, #0x2C]
  04268	e2830078	 add         r0, r3, #0x78
  0426c	e59d1000	 ldr         r1, [sp]
  04270	e3a03010	 mov         r3, #0x10
  04274	e0020391	 mul         r2, r1, r3
  04278	e5903000	 ldr         r3, [r0]
  0427c	e0833002	 add         r3, r3, r2
  04280	e2832004	 add         r2, r3, #4
  04284	e59d3004	 ldr         r3, [sp, #4]
  04288	e5823000	 str         r3, [r2]

; 1936 :             pController->pDMADescriptors[dwDescriptorIndex].dtadr = SDIO_TX_FIFO;

  0428c	e59d302c	 ldr         r3, [sp, #0x2C]
  04290	e2830078	 add         r0, r3, #0x78
  04294	e59d1000	 ldr         r1, [sp]
  04298	e3a03010	 mov         r3, #0x10
  0429c	e0020391	 mul         r2, r1, r3
  042a0	e5903000	 ldr         r3, [r0]
  042a4	e0833002	 add         r3, r3, r2
  042a8	e2832008	 add         r2, r3, #8
  042ac	e59f30e0	 ldr         r3, [pc, #0xE0]
  042b0	e5823000	 str         r3, [r2]

; 1937 :             pController->pDMADescriptors[dwDescriptorIndex].dcmd  = DCMD_INC_SRC_ADDR |
; 1938 :                                                        DCMD_FLOW_TRG | 
; 1939 :                                                        //DCMD_END_IRQ_EN |
; 1940 :                                                        ( 3 << 16 ) | // 32 bytes maximum burst size of each data transfer
; 1941 :                                                        ( 3 << 14 ) | // 4 bytes width
; 1942 :                                                        dwBlockLength;

  042b4	e59d2010	 ldr         r2, [sp, #0x10]
  042b8	e3a03209	 mov         r3, #9, 4
  042bc	e383390f	 orr         r3, r3, #0xF, 18
  042c0	e182e003	 orr         lr, r2, r3
  042c4	e59d302c	 ldr         r3, [sp, #0x2C]
  042c8	e2830078	 add         r0, r3, #0x78
  042cc	e59d1000	 ldr         r1, [sp]
  042d0	e3a03010	 mov         r3, #0x10
  042d4	e0020391	 mul         r2, r1, r3
  042d8	e5903000	 ldr         r3, [r0]
  042dc	e0833002	 add         r3, r3, r2
  042e0	e283300c	 add         r3, r3, #0xC
  042e4	e583e000	 str         lr, [r3]
  042e8		 |$LN2@PrepareDma|

; 1943 :         }
; 1944 : 
; 1945 :         dwTransferLength -= dwBlockLength;

  042e8	e59d2008	 ldr         r2, [sp, #8]
  042ec	e59d3010	 ldr         r3, [sp, #0x10]
  042f0	e0423003	 sub         r3, r2, r3
  042f4	e58d3008	 str         r3, [sp, #8]

; 1946 : 
; 1947 :         if( dwTransferLength == 0 )

  042f8	e59d3008	 ldr         r3, [sp, #8]
  042fc	e3530000	 cmp         r3, #0
  04300	1a000008	 bne         |$LN1@PrepareDma|

; 1948 :         {
; 1949 :             pController->pDMADescriptors[dwDescriptorIndex].ddadr = 1; // this is the last descriptor, set the STOP bit

  04304	e59d302c	 ldr         r3, [sp, #0x2C]
  04308	e2830078	 add         r0, r3, #0x78
  0430c	e59d1000	 ldr         r1, [sp]
  04310	e3a03010	 mov         r3, #0x10
  04314	e0020391	 mul         r2, r1, r3
  04318	e5903000	 ldr         r3, [r0]
  0431c	e0832002	 add         r2, r3, r2
  04320	e3a03001	 mov         r3, #1
  04324	e5823000	 str         r3, [r2]
  04328		 |$LN1@PrepareDma|

; 1950 :         }
; 1951 : 
; 1952 :         dwDataAddress += dwBlockLength;

  04328	e59d2004	 ldr         r2, [sp, #4]
  0432c	e59d3010	 ldr         r3, [sp, #0x10]
  04330	e0823003	 add         r3, r2, r3
  04334	e58d3004	 str         r3, [sp, #4]

; 1953 :         dwNextDescriptorAddress += sizeof(DMADescriptorChannelType);

  04338	e59d300c	 ldr         r3, [sp, #0xC]
  0433c	e2833010	 add         r3, r3, #0x10
  04340	e58d300c	 str         r3, [sp, #0xC]

; 1954 :         dwDescriptorIndex++;

  04344	e59d3000	 ldr         r3, [sp]
  04348	e2833001	 add         r3, r3, #1
  0434c	e58d3000	 str         r3, [sp]

; 1955 :     } // while

  04350	eaffff73	 b           |$LN6@PrepareDma|
  04354		 |$LN5@PrepareDma|

; 1956 : 
; 1957 :     pController->fDMAUsingDriverBuffer = TRUE;

  04354	e59d302c	 ldr         r3, [sp, #0x2C]
  04358	e2833c0a	 add         r3, r3, #0xA, 24
  0435c	e28320ac	 add         r2, r3, #0xAC
  04360	e3a03001	 mov         r3, #1
  04364	e5823000	 str         r3, [r2]

; 1958 :     pController->dwBytesRemaining = 0;

  04368	e59d302c	 ldr         r3, [sp, #0x2C]
  0436c	e2833c0a	 add         r3, r3, #0xA, 24
  04370	e28320cc	 add         r2, r3, #0xCC
  04374	e3a03000	 mov         r3, #0
  04378	e5823000	 str         r3, [r2]

; 1959 :     return TRUE;

  0437c	e3a03001	 mov         r3, #1
  04380	e58d3014	 str         r3, [sp, #0x14]
  04384		 |$LN9@PrepareDma|

; 1960 : }

  04384	e59d0014	 ldr         r0, [sp, #0x14]
  04388	e28dd024	 add         sp, sp, #0x24
  0438c	e89d6000	 ldmia       sp, {sp, lr}
  04390	e12fff1e	 bx          lr
  04394		 |$LN18@PrepareDma|
  04394		 |$LN19@PrepareDma|
  04394	41100044	 DCD         0x41100044
  04398		 |$LN20@PrepareDma|
  04398	41100040	 DCD         0x41100040
  0439c		 |$LN21@PrepareDma|
  0439c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  043a0		 |$LN22@PrepareDma|
  043a0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  043a4		 |$LN23@PrepareDma|
  043a4	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  043a8		 |$M45213|

			 ENDP  ; |PrepareDmaTransferOnDriverBuffer|

	IMPORT	|CacheRangeFlush|
	IMPORT	|LockPages|
	IMPORT	|LocalReAlloc|
	IMPORT	|LocalAlloc|

  000b8			 AREA	 |.pdata|, PDATA
|$T45231| DCD	|$LN19@PrepareDma@2|
	DCD	0x4000ef04
; Function compile flags: /Odtp

  043a8			 AREA	 |.text|, CODE, ARM

  043a8		 |PrepareDmaTransfer| PROC

; 1970 : {

  043a8		 |$LN19@PrepareDma@2|
  043a8	e1a0c00d	 mov         r12, sp
  043ac	e92d0003	 stmdb       sp!, {r0, r1}
  043b0	e92d5000	 stmdb       sp!, {r12, lr}
  043b4	e24dd02c	 sub         sp, sp, #0x2C
  043b8		 |$M45228|

; 1971 :     DWORD dwTransferLength;
; 1972 :     DWORD dwMaximumPages;
; 1973 :     BOOL fRetVal = TRUE;

  043b8	e3a03001	 mov         r3, #1
  043bc	e58d3004	 str         r3, [sp, #4]

; 1974 : 
; 1975 :     dwTransferLength = pRequest->BlockSize * pRequest->NumBlocks;

  043c0	e59d3038	 ldr         r3, [sp, #0x38]
  043c4	e2832040	 add         r2, r3, #0x40
  043c8	e59d3038	 ldr         r3, [sp, #0x38]
  043cc	e283303c	 add         r3, r3, #0x3C
  043d0	e5922000	 ldr         r2, [r2]
  043d4	e5933000	 ldr         r3, [r3]
  043d8	e0030392	 mul         r3, r2, r3
  043dc	e58d3008	 str         r3, [sp, #8]

; 1976 :     pController->fDMAUsingDriverBuffer = FALSE;

  043e0	e59d3034	 ldr         r3, [sp, #0x34]
  043e4	e2833c0a	 add         r3, r3, #0xA, 24
  043e8	e28320ac	 add         r2, r3, #0xAC
  043ec	e3a03000	 mov         r3, #0
  043f0	e5823000	 str         r3, [r2]

; 1977 : 
; 1978 :     pController->dwClientBufferSize = 0;

  043f4	e59d3034	 ldr         r3, [sp, #0x34]
  043f8	e2833c0a	 add         r3, r3, #0xA, 24
  043fc	e28320b4	 add         r2, r3, #0xB4
  04400	e3a03000	 mov         r3, #0
  04404	e5823000	 str         r3, [r2]

; 1979 :     pController->pClientBuffer = NULL;

  04408	e59d3034	 ldr         r3, [sp, #0x34]
  0440c	e2833c0a	 add         r3, r3, #0xA, 24
  04410	e28320b8	 add         r2, r3, #0xB8
  04414	e3a03000	 mov         r3, #0
  04418	e5823000	 str         r3, [r2]

; 1980 : 
; 1981 :     if( pController->dwDmaChannel == 0xffffffff )

  0441c	e59d3034	 ldr         r3, [sp, #0x34]
  04420	e2833c0a	 add         r3, r3, #0xA, 24
  04424	e28330a4	 add         r3, r3, #0xA4
  04428	e5933000	 ldr         r3, [r3]
  0442c	e3730001	 cmn         r3, #1
  04430	1a000002	 bne         |$LN10@PrepareDma@2|

; 1982 :     { // DMA is disabled in registry
; 1983 :         return FALSE;

  04434	e3a03000	 mov         r3, #0
  04438	e58d3010	 str         r3, [sp, #0x10]
  0443c	ea0000c4	 b           |$LN11@PrepareDma@2|
  04440		 |$LN10@PrepareDma@2|

; 1984 :     }
; 1985 : 
; 1986 :     if( 0 != dwTransferLength % MMC_TXFIFO_SIZE )

  04440	e59d1008	 ldr         r1, [sp, #8]
  04444	e3a00020	 mov         r0, #0x20
  04448	eb000000	 bl          __rt_udiv
  0444c	e3510000	 cmp         r1, #0
  04450	0a000002	 beq         |$LN9@PrepareDma@2|

; 1987 :     {
; 1988 :         return FALSE; // data size not a multiple of FIFO size

  04454	e3a03000	 mov         r3, #0
  04458	e58d3010	 str         r3, [sp, #0x10]
  0445c	ea0000bc	 b           |$LN11@PrepareDma@2|
  04460		 |$LN9@PrepareDma@2|

; 1989 :     }
; 1990 :     
; 1991 :     if( ( 0 != (((DWORD)pRequest->pBlockBuffer) % SDIO_DMA_ALIGNMENT )) &&
; 1992 :         ( dwTransferLength > pController->dwDmaBufferSize ) )

  04460	e59d3038	 ldr         r3, [sp, #0x38]
  04464	e2833048	 add         r3, r3, #0x48
  04468	e5931000	 ldr         r1, [r3]
  0446c	e3a00020	 mov         r0, #0x20
  04470	eb000000	 bl          __rt_udiv
  04474	e3510000	 cmp         r1, #0
  04478	0a000008	 beq         |$LN8@PrepareDma@2|
  0447c	e59d3034	 ldr         r3, [sp, #0x34]
  04480	e2833088	 add         r3, r3, #0x88
  04484	e59d2008	 ldr         r2, [sp, #8]
  04488	e5933000	 ldr         r3, [r3]
  0448c	e1520003	 cmp         r2, r3
  04490	9a000002	 bls         |$LN8@PrepareDma@2|

; 1993 :     {
; 1994 :         return FALSE; // buffer is not 32 bytes aligned, and is too large to fit in driver's allocated buffer

  04494	e3a03000	 mov         r3, #0
  04498	e58d3010	 str         r3, [sp, #0x10]
  0449c	ea0000ac	 b           |$LN11@PrepareDma@2|
  044a0		 |$LN8@PrepareDma@2|

; 1995 :     }
; 1996 : 
; 1997 :     if( 0 != ((DWORD)pRequest->pBlockBuffer) % SDIO_DMA_ALIGNMENT )

  044a0	e59d3038	 ldr         r3, [sp, #0x38]
  044a4	e2833048	 add         r3, r3, #0x48
  044a8	e5931000	 ldr         r1, [r3]
  044ac	e3a00020	 mov         r0, #0x20
  044b0	eb000000	 bl          __rt_udiv
  044b4	e3510000	 cmp         r1, #0
  044b8	0a000006	 beq         |$LN7@PrepareDma@2|

; 1998 :     {
; 1999 :         // buffer is not 32 bytes aligned, we will use driver allocated DMA buffer
; 2000 :         return PrepareDmaTransferOnDriverBuffer( pController, pRequest );

  044bc	e59d1038	 ldr         r1, [sp, #0x38]
  044c0	e59d0034	 ldr         r0, [sp, #0x34]
  044c4	eb000000	 bl          PrepareDmaTransferOnDriverBuffer
  044c8	e58d0014	 str         r0, [sp, #0x14]
  044cc	e59d3014	 ldr         r3, [sp, #0x14]
  044d0	e58d3010	 str         r3, [sp, #0x10]
  044d4	ea00009e	 b           |$LN11@PrepareDma@2|
  044d8		 |$LN7@PrepareDma@2|

; 2001 :     }
; 2002 : 
; 2003 :     // buffer is 32 bytes aligned.  We will do DMA on client provided buffer
; 2004 : 
; 2005 :     // calculate the number of physical pages that the buffer occupies
; 2006 :     dwMaximumPages = COMPUTE_PAGES_SPANNED(pRequest->pBlockBuffer, dwTransferLength);

  044d8	e3e03b0d	 mvn         r3, #0xD, 22
  044dc	e22330fb	 eor         r3, r3, #0xFB
  044e0	e5933000	 ldr         r3, [r3]
  044e4	e3530a01	 cmp         r3, #1, 20
  044e8	1a000002	 bne         |$LN13@PrepareDma@2|
  044ec	e3a0300c	 mov         r3, #0xC
  044f0	e58d3018	 str         r3, [sp, #0x18]
  044f4	ea000001	 b           |$LN14@PrepareDma@2|
  044f8		 |$LN13@PrepareDma@2|
  044f8	e3a0300a	 mov         r3, #0xA
  044fc	e58d3018	 str         r3, [sp, #0x18]
  04500		 |$LN14@PrepareDma@2|
  04500	e59d3038	 ldr         r3, [sp, #0x38]
  04504	e2831048	 add         r1, r3, #0x48
  04508	e3e03b0d	 mvn         r3, #0xD, 22
  0450c	e22330fb	 eor         r3, r3, #0xFB
  04510	e5933000	 ldr         r3, [r3]
  04514	e2432001	 sub         r2, r3, #1
  04518	e5913000	 ldr         r3, [r1]
  0451c	e0032002	 and         r2, r3, r2
  04520	e59d3008	 ldr         r3, [sp, #8]
  04524	e0822003	 add         r2, r2, r3
  04528	e3e03b0d	 mvn         r3, #0xD, 22
  0452c	e22330fb	 eor         r3, r3, #0xFB
  04530	e5933000	 ldr         r3, [r3]
  04534	e2433001	 sub         r3, r3, #1
  04538	e0822003	 add         r2, r2, r3
  0453c	e59d3018	 ldr         r3, [sp, #0x18]
  04540	e1a03332	 mov         r3, r2, lsr r3
  04544	e58d3000	 str         r3, [sp]

; 2007 :     
; 2008 :     if( pController->pPFNs == NULL )

  04548	e59d3034	 ldr         r3, [sp, #0x34]
  0454c	e2833c0a	 add         r3, r3, #0xA, 24
  04550	e28330bc	 add         r3, r3, #0xBC
  04554	e5933000	 ldr         r3, [r3]
  04558	e3530000	 cmp         r3, #0
  0455c	1a000018	 bne         |$LN6@PrepareDma@2|

; 2009 :     {
; 2010 :         // allocate a buffer for PFNs
; 2011 :         pController->pPFNs = (PDWORD)LocalAlloc(0, dwMaximumPages * sizeof(DWORD) );

  04560	e59d2000	 ldr         r2, [sp]
  04564	e3a03004	 mov         r3, #4
  04568	e0010392	 mul         r1, r2, r3
  0456c	e3a00000	 mov         r0, #0
  04570	eb000000	 bl          LocalAlloc
  04574	e58d001c	 str         r0, [sp, #0x1C]
  04578	e59d3034	 ldr         r3, [sp, #0x34]
  0457c	e2833c0a	 add         r3, r3, #0xA, 24
  04580	e28320bc	 add         r2, r3, #0xBC
  04584	e59d301c	 ldr         r3, [sp, #0x1C]
  04588	e5823000	 str         r3, [r2]

; 2012 :         if( pController->pPFNs == NULL )

  0458c	e59d3034	 ldr         r3, [sp, #0x34]
  04590	e2833c0a	 add         r3, r3, #0xA, 24
  04594	e28330bc	 add         r3, r3, #0xBC
  04598	e5933000	 ldr         r3, [r3]
  0459c	e3530000	 cmp         r3, #0
  045a0	1a000002	 bne         |$LN5@PrepareDma@2|

; 2013 :         {
; 2014 :             return FALSE;

  045a4	e3a03000	 mov         r3, #0
  045a8	e58d3010	 str         r3, [sp, #0x10]
  045ac	ea000068	 b           |$LN11@PrepareDma@2|
  045b0		 |$LN5@PrepareDma@2|

; 2015 :         }
; 2016 :         pController->nPFNCount = dwMaximumPages;

  045b0	e59d3034	 ldr         r3, [sp, #0x34]
  045b4	e2832d2b	 add         r2, r3, #0x2B, 26
  045b8	e59d3000	 ldr         r3, [sp]
  045bc	e5823000	 str         r3, [r2]
  045c0	ea000020	 b           |$LN4@PrepareDma@2|
  045c4		 |$LN6@PrepareDma@2|

; 2017 :     }
; 2018 :     else if( dwMaximumPages > pController->nPFNCount )

  045c4	e59d3034	 ldr         r3, [sp, #0x34]
  045c8	e2833d2b	 add         r3, r3, #0x2B, 26
  045cc	e59d2000	 ldr         r2, [sp]
  045d0	e5933000	 ldr         r3, [r3]
  045d4	e1520003	 cmp         r2, r3
  045d8	9a00001a	 bls         |$LN3@PrepareDma@2|

; 2019 :     {
; 2020 :         // increase the buffer for PFNs
; 2021 :         HLOCAL hTemp = LocalReAlloc( pController->pPFNs, dwMaximumPages * sizeof(DWORD), LMEM_MOVEABLE );

  045dc	e3a02002	 mov         r2, #2
  045e0	e59d0000	 ldr         r0, [sp]
  045e4	e3a03004	 mov         r3, #4
  045e8	e0010390	 mul         r1, r0, r3
  045ec	e59d3034	 ldr         r3, [sp, #0x34]
  045f0	e2833c0a	 add         r3, r3, #0xA, 24
  045f4	e28330bc	 add         r3, r3, #0xBC
  045f8	e5930000	 ldr         r0, [r3]
  045fc	eb000000	 bl          LocalReAlloc
  04600	e58d0020	 str         r0, [sp, #0x20]
  04604	e59d3020	 ldr         r3, [sp, #0x20]
  04608	e58d300c	 str         r3, [sp, #0xC]

; 2022 :         if( hTemp == NULL )

  0460c	e59d300c	 ldr         r3, [sp, #0xC]
  04610	e3530000	 cmp         r3, #0
  04614	1a000002	 bne         |$LN2@PrepareDma@2|

; 2023 :         {
; 2024 :             return FALSE;

  04618	e3a03000	 mov         r3, #0
  0461c	e58d3010	 str         r3, [sp, #0x10]
  04620	ea00004b	 b           |$LN11@PrepareDma@2|
  04624		 |$LN2@PrepareDma@2|

; 2025 :         }
; 2026 : 
; 2027 :         pController->pPFNs = (PDWORD)hTemp;

  04624	e59d3034	 ldr         r3, [sp, #0x34]
  04628	e2833c0a	 add         r3, r3, #0xA, 24
  0462c	e28320bc	 add         r2, r3, #0xBC
  04630	e59d300c	 ldr         r3, [sp, #0xC]
  04634	e5823000	 str         r3, [r2]

; 2028 :         pController->nPFNCount = dwMaximumPages;

  04638	e59d3034	 ldr         r3, [sp, #0x34]
  0463c	e2832d2b	 add         r2, r3, #0x2B, 26
  04640	e59d3000	 ldr         r3, [sp]
  04644	e5823000	 str         r3, [r2]
  04648		 |$LN3@PrepareDma@2|
  04648		 |$LN4@PrepareDma@2|

; 2029 :     }
; 2030 : 
; 2031 :     // lock the pages containing the client provided buffer
; 2032 :     if( !LockPages( pRequest->pBlockBuffer, dwTransferLength, pController->pPFNs, (TRANSFER_IS_READ(pRequest)) ? LOCKFLAG_READ : LOCKFLAG_WRITE ) )

  04648	e59d3038	 ldr         r3, [sp, #0x38]
  0464c	e2833010	 add         r3, r3, #0x10
  04650	e5933000	 ldr         r3, [r3]
  04654	e3530000	 cmp         r3, #0
  04658	1a000002	 bne         |$LN15@PrepareDma@2|
  0465c	e3a03004	 mov         r3, #4
  04660	e58d3024	 str         r3, [sp, #0x24]
  04664	ea000001	 b           |$LN16@PrepareDma@2|
  04668		 |$LN15@PrepareDma@2|
  04668	e3a03001	 mov         r3, #1
  0466c	e58d3024	 str         r3, [sp, #0x24]
  04670		 |$LN16@PrepareDma@2|
  04670	e59d3024	 ldr         r3, [sp, #0x24]
  04674	e59d2034	 ldr         r2, [sp, #0x34]
  04678	e2822c0a	 add         r2, r2, #0xA, 24
  0467c	e28220bc	 add         r2, r2, #0xBC
  04680	e5922000	 ldr         r2, [r2]
  04684	e59d1008	 ldr         r1, [sp, #8]
  04688	e59d0038	 ldr         r0, [sp, #0x38]
  0468c	e2800048	 add         r0, r0, #0x48
  04690	e5900000	 ldr         r0, [r0]
  04694	eb000000	 bl          LockPages
  04698	e58d0028	 str         r0, [sp, #0x28]
  0469c	e59d3028	 ldr         r3, [sp, #0x28]
  046a0	e3530000	 cmp         r3, #0
  046a4	1a000001	 bne         |$LN1@PrepareDma@2|

; 2033 :     {
; 2034 :         fRetVal = FALSE;

  046a8	e3a03000	 mov         r3, #0
  046ac	e58d3004	 str         r3, [sp, #4]
  046b0		 |$LN1@PrepareDma@2|

; 2035 :     }
; 2036 :     CacheRangeFlush( pRequest->pBlockBuffer, dwTransferLength, CACHE_SYNC_ALL );

  046b0	e3a0207f	 mov         r2, #0x7F
  046b4	e59d1008	 ldr         r1, [sp, #8]
  046b8	e59d3038	 ldr         r3, [sp, #0x38]
  046bc	e2833048	 add         r3, r3, #0x48
  046c0	e5930000	 ldr         r0, [r3]
  046c4	eb000000	 bl          CacheRangeFlush

; 2037 :     
; 2038 :     // set the transfer parameters
; 2039 :     pController->dwPFNIndex = 0;

  046c8	e59d3034	 ldr         r3, [sp, #0x34]
  046cc	e2833c0a	 add         r3, r3, #0xA, 24
  046d0	e28320c8	 add         r2, r3, #0xC8
  046d4	e3a03000	 mov         r3, #0
  046d8	e5823000	 str         r3, [r2]

; 2040 :     pController->dwPageOffset = ((DWORD)pRequest->pBlockBuffer) % pController->systemInfo.dwPageSize;

  046dc	e59d3038	 ldr         r3, [sp, #0x38]
  046e0	e2832048	 add         r2, r3, #0x48
  046e4	e59d3034	 ldr         r3, [sp, #0x34]
  046e8	e2833048	 add         r3, r3, #0x48
  046ec	e5921000	 ldr         r1, [r2]
  046f0	e5930000	 ldr         r0, [r3]
  046f4	eb000000	 bl          __rt_udiv
  046f8	e59d3034	 ldr         r3, [sp, #0x34]
  046fc	e2833c0a	 add         r3, r3, #0xA, 24
  04700	e28330c4	 add         r3, r3, #0xC4
  04704	e5831000	 str         r1, [r3]

; 2041 :     pController->dwBytesRemaining = dwTransferLength;

  04708	e59d3034	 ldr         r3, [sp, #0x34]
  0470c	e2833c0a	 add         r3, r3, #0xA, 24
  04710	e28320cc	 add         r2, r3, #0xCC
  04714	e59d3008	 ldr         r3, [sp, #8]
  04718	e5823000	 str         r3, [r2]

; 2042 : 
; 2043 :     pController->dwClientBufferSize = dwTransferLength;

  0471c	e59d3034	 ldr         r3, [sp, #0x34]
  04720	e2833c0a	 add         r3, r3, #0xA, 24
  04724	e28320b4	 add         r2, r3, #0xB4
  04728	e59d3008	 ldr         r3, [sp, #8]
  0472c	e5823000	 str         r3, [r2]

; 2044 :     pController->pClientBuffer = pRequest->pBlockBuffer;

  04730	e59d3038	 ldr         r3, [sp, #0x38]
  04734	e2831048	 add         r1, r3, #0x48
  04738	e59d3034	 ldr         r3, [sp, #0x34]
  0473c	e2833c0a	 add         r3, r3, #0xA, 24
  04740	e28320b8	 add         r2, r3, #0xB8
  04744	e5913000	 ldr         r3, [r1]
  04748	e5823000	 str         r3, [r2]

; 2045 : 
; 2046 :     return fRetVal;

  0474c	e59d3004	 ldr         r3, [sp, #4]
  04750	e58d3010	 str         r3, [sp, #0x10]
  04754		 |$LN11@PrepareDma@2|

; 2047 : }

  04754	e59d0010	 ldr         r0, [sp, #0x10]
  04758	e28dd02c	 add         sp, sp, #0x2C
  0475c	e89d6000	 ldmia       sp, {sp, lr}
  04760	e12fff1e	 bx          lr
  04764		 |$M45229|

			 ENDP  ; |PrepareDmaTransfer|

	EXPORT	|DoDMATransferOnDriverBuffer|

  000c0			 AREA	 |.pdata|, PDATA
|$T45236| DCD	|$LN7@DoDMATrans|
	DCD	0x40006103
; Function compile flags: /Odtp

  04764			 AREA	 |.text|, CODE, ARM

  04764		 |DoDMATransferOnDriverBuffer| PROC

; 2050 : {

  04764		 |$LN7@DoDMATrans|
  04764	e1a0c00d	 mov         r12, sp
  04768	e92d0003	 stmdb       sp!, {r0, r1}
  0476c	e92d5000	 stmdb       sp!, {r12, lr}
  04770		 |$M45233|

; 2051 :     if (TRANSFER_IS_READ(pRequest)){

  04770	e59d300c	 ldr         r3, [sp, #0xC]
  04774	e2833010	 add         r3, r3, #0x10
  04778	e5933000	 ldr         r3, [r3]
  0477c	e3530000	 cmp         r3, #0
  04780	1a000010	 bne         |$LN2@DoDMATrans|

; 2052 :         pController->pDMARegisters->drcmr[DMA_CHMAP_SDIO_TX] = 0;

  04784	e59d3008	 ldr         r3, [sp, #8]
  04788	e283300c	 add         r3, r3, #0xC
  0478c	e5933000	 ldr         r3, [r3]
  04790	e2832f56	 add         r2, r3, #0x56, 30
  04794	e3a03000	 mov         r3, #0
  04798	e5823000	 str         r3, [r2]

; 2053 :         pController->pDMARegisters->drcmr[DMA_CHMAP_SDIO_RX] = DMA_MAP_VALID_MASK | pController->dwDmaChannel;

  0479c	e59d3008	 ldr         r3, [sp, #8]
  047a0	e2833c0a	 add         r3, r3, #0xA, 24
  047a4	e28330a4	 add         r3, r3, #0xA4
  047a8	e5933000	 ldr         r3, [r3]
  047ac	e3832080	 orr         r2, r3, #0x80
  047b0	e59d3008	 ldr         r3, [sp, #8]
  047b4	e283300c	 add         r3, r3, #0xC
  047b8	e5933000	 ldr         r3, [r3]
  047bc	e2833f55	 add         r3, r3, #0x55, 30
  047c0	e5832000	 str         r2, [r3]

; 2054 :     } else {

  047c4	ea00000f	 b           |$LN1@DoDMATrans|
  047c8		 |$LN2@DoDMATrans|

; 2055 :         pController->pDMARegisters->drcmr[DMA_CHMAP_SDIO_RX] = 0;

  047c8	e59d3008	 ldr         r3, [sp, #8]
  047cc	e283300c	 add         r3, r3, #0xC
  047d0	e5933000	 ldr         r3, [r3]
  047d4	e2832f55	 add         r2, r3, #0x55, 30
  047d8	e3a03000	 mov         r3, #0
  047dc	e5823000	 str         r3, [r2]

; 2056 :         pController->pDMARegisters->drcmr[DMA_CHMAP_SDIO_TX] = DMA_MAP_VALID_MASK | pController->dwDmaChannel;

  047e0	e59d3008	 ldr         r3, [sp, #8]
  047e4	e2833c0a	 add         r3, r3, #0xA, 24
  047e8	e28330a4	 add         r3, r3, #0xA4
  047ec	e5933000	 ldr         r3, [r3]
  047f0	e3832080	 orr         r2, r3, #0x80
  047f4	e59d3008	 ldr         r3, [sp, #8]
  047f8	e283300c	 add         r3, r3, #0xC
  047fc	e5933000	 ldr         r3, [r3]
  04800	e2833f56	 add         r3, r3, #0x56, 30
  04804	e5832000	 str         r2, [r3]
  04808		 |$LN1@DoDMATrans|

; 2057 :     } 
; 2058 : 
; 2059 :     // Set the DESCRIPTOR FETCH mode
; 2060 :     pController->pDMARegisters->dcsr[pController->dwDmaChannel] =  0;

  04808	e59d3008	 ldr         r3, [sp, #8]
  0480c	e283000c	 add         r0, r3, #0xC
  04810	e59d3008	 ldr         r3, [sp, #8]
  04814	e2833c0a	 add         r3, r3, #0xA, 24
  04818	e28330a4	 add         r3, r3, #0xA4
  0481c	e5931000	 ldr         r1, [r3]
  04820	e3a03004	 mov         r3, #4
  04824	e0020391	 mul         r2, r1, r3
  04828	e5903000	 ldr         r3, [r0]
  0482c	e0832002	 add         r2, r3, r2
  04830	e3a03000	 mov         r3, #0
  04834	e5823000	 str         r3, [r2]

; 2061 : 
; 2062 :     // program the transfer descriptor
; 2063 :     pController->pDMARegisters->ddg[pController->dwDmaChannel].ddadr = pController->pDMADescriptorsPhys.LowPart;

  04838	e59d3008	 ldr         r3, [sp, #8]
  0483c	e2830080	 add         r0, r3, #0x80
  04840	e59d3008	 ldr         r3, [sp, #8]
  04844	e283300c	 add         r3, r3, #0xC
  04848	e5933000	 ldr         r3, [r3]
  0484c	e2831c02	 add         r1, r3, #2, 24
  04850	e59d3008	 ldr         r3, [sp, #8]
  04854	e2833c0a	 add         r3, r3, #0xA, 24
  04858	e28330a4	 add         r3, r3, #0xA4
  0485c	e5932000	 ldr         r2, [r3]
  04860	e3a03010	 mov         r3, #0x10
  04864	e0030392	 mul         r3, r2, r3
  04868	e0812003	 add         r2, r1, r3
  0486c	e5903000	 ldr         r3, [r0]
  04870	e5823000	 str         r3, [r2]

; 2064 : 
; 2065 : #ifdef DEBUG
; 2066 :     pController->fDMATransferInProgress = TRUE;

  04874	e59d3008	 ldr         r3, [sp, #8]
  04878	e2832ead	 add         r2, r3, #0xAD, 28
  0487c	e3a03001	 mov         r3, #1
  04880	e5823000	 str         r3, [r2]

; 2067 : #endif
; 2068 : 
; 2069 :     pController->pDMARegisters->dcsr[pController->dwDmaChannel] |=  DCSR_RUN | DCSR_STOPIRQEN;          // set the RUN bit

  04884	e59d3008	 ldr         r3, [sp, #8]
  04888	e283000c	 add         r0, r3, #0xC
  0488c	e59d3008	 ldr         r3, [sp, #8]
  04890	e2833c0a	 add         r3, r3, #0xA, 24
  04894	e28330a4	 add         r3, r3, #0xA4
  04898	e5931000	 ldr         r1, [r3]
  0489c	e3a03004	 mov         r3, #4
  048a0	e0020391	 mul         r2, r1, r3
  048a4	e5903000	 ldr         r3, [r0]
  048a8	e0833002	 add         r3, r3, r2
  048ac	e5933000	 ldr         r3, [r3]
  048b0	e383e20a	 orr         lr, r3, #0xA, 4
  048b4	e59d3008	 ldr         r3, [sp, #8]
  048b8	e283000c	 add         r0, r3, #0xC
  048bc	e59d3008	 ldr         r3, [sp, #8]
  048c0	e2833c0a	 add         r3, r3, #0xA, 24
  048c4	e28330a4	 add         r3, r3, #0xA4
  048c8	e5931000	 ldr         r1, [r3]
  048cc	e3a03004	 mov         r3, #4
  048d0	e0020391	 mul         r2, r1, r3
  048d4	e5903000	 ldr         r3, [r0]
  048d8	e0833002	 add         r3, r3, r2
  048dc	e583e000	 str         lr, [r3]

; 2070 : }

  048e0	e89d6000	 ldmia       sp, {sp, lr}
  048e4	e12fff1e	 bx          lr
  048e8		 |$M45234|

			 ENDP  ; |DoDMATransferOnDriverBuffer|

	EXPORT	|DoDMATransferRead|

  000c8			 AREA	 |.pdata|, PDATA
|$T45243| DCD	|$LN8@DoDMATrans@2|
	DCD	0x4000bf04
; Function compile flags: /Odtp

  048e8			 AREA	 |.text|, CODE, ARM

  048e8		 |DoDMATransferRead| PROC

; 2073 : {

  048e8		 |$LN8@DoDMATrans@2|
  048e8	e1a0c00d	 mov         r12, sp
  048ec	e92d0003	 stmdb       sp!, {r0, r1}
  048f0	e92d5000	 stmdb       sp!, {r12, lr}
  048f4	e24dd00c	 sub         sp, sp, #0xC
  048f8		 |$M45240|

; 2074 :     DWORD dwTransferLength;
; 2075 :     DWORD dwTargetAddress;
; 2076 : 
; 2077 :     ASSERT( MAXIMUM_DMA_TRANSFER_SIZE >= pController->systemInfo.dwPageSize );

  048f8	e59d3014	 ldr         r3, [sp, #0x14]
  048fc	e2833048	 add         r3, r3, #0x48
  04900	e5932000	 ldr         r2, [r3]
  04904	e3a03c1f	 mov         r3, #0x1F, 24
  04908	e38330ff	 orr         r3, r3, #0xFF
  0490c	e1520003	 cmp         r2, r3
  04910	8a000002	 bhi         |$LN4@DoDMATrans@2|
  04914	e3a03001	 mov         r3, #1
  04918	e58d3008	 str         r3, [sp, #8]
  0491c	ea000008	 b           |$LN5@DoDMATrans@2|
  04920		 |$LN4@DoDMATrans@2|
  04920	e3a03b02	 mov         r3, #2, 22
  04924	e383301d	 orr         r3, r3, #0x1D
  04928	e59f22b0	 ldr         r2, [pc, #0x2B0]
  0492c	e59f12a8	 ldr         r1, [pc, #0x2A8]
  04930	e59f02a0	 ldr         r0, [pc, #0x2A0]
  04934	eb000000	 bl          NKDbgPrintfW
  04938	e6000010	 __debugbreak_ce
  0493c	e3a03000	 mov         r3, #0
  04940	e58d3008	 str         r3, [sp, #8]
  04944		 |$LN5@DoDMATrans@2|

; 2078 : 
; 2079 :     // calculate how much data should be read in this DMA transfer
; 2080 :     dwTransferLength = pController->systemInfo.dwPageSize - pController->dwPageOffset;

  04944	e59d3014	 ldr         r3, [sp, #0x14]
  04948	e2832048	 add         r2, r3, #0x48
  0494c	e59d3014	 ldr         r3, [sp, #0x14]
  04950	e2833c0a	 add         r3, r3, #0xA, 24
  04954	e28330c4	 add         r3, r3, #0xC4
  04958	e5922000	 ldr         r2, [r2]
  0495c	e5933000	 ldr         r3, [r3]
  04960	e0423003	 sub         r3, r2, r3
  04964	e58d3004	 str         r3, [sp, #4]

; 2081 :     if( dwTransferLength > pController->dwBytesRemaining )

  04968	e59d3014	 ldr         r3, [sp, #0x14]
  0496c	e2833c0a	 add         r3, r3, #0xA, 24
  04970	e28330cc	 add         r3, r3, #0xCC
  04974	e59d2004	 ldr         r2, [sp, #4]
  04978	e5933000	 ldr         r3, [r3]
  0497c	e1520003	 cmp         r2, r3
  04980	9a000004	 bls         |$LN1@DoDMATrans@2|

; 2082 :     {
; 2083 :         dwTransferLength = pController->dwBytesRemaining;

  04984	e59d3014	 ldr         r3, [sp, #0x14]
  04988	e2833c0a	 add         r3, r3, #0xA, 24
  0498c	e28330cc	 add         r3, r3, #0xCC
  04990	e5933000	 ldr         r3, [r3]
  04994	e58d3004	 str         r3, [sp, #4]
  04998		 |$LN1@DoDMATrans@2|

; 2084 :     }
; 2085 : 
; 2086 :     // calculate the target physical address
; 2087 :     dwTargetAddress = ( pController->pPFNs[pController->dwPFNIndex] << UserKInfo[KINX_PFN_SHIFT] ) + pController->dwPageOffset;

  04998	e59d3014	 ldr         r3, [sp, #0x14]
  0499c	e2833c0a	 add         r3, r3, #0xA, 24
  049a0	e28300bc	 add         r0, r3, #0xBC
  049a4	e59d3014	 ldr         r3, [sp, #0x14]
  049a8	e2833c0a	 add         r3, r3, #0xA, 24
  049ac	e28330c8	 add         r3, r3, #0xC8
  049b0	e5931000	 ldr         r1, [r3]
  049b4	e3a03004	 mov         r3, #4
  049b8	e0020391	 mul         r2, r1, r3
  049bc	e5903000	 ldr         r3, [r0]
  049c0	e0832002	 add         r2, r3, r2
  049c4	e3e03b0d	 mvn         r3, #0xD, 22
  049c8	e22330f7	 eor         r3, r3, #0xF7
  049cc	e5922000	 ldr         r2, [r2]
  049d0	e5933000	 ldr         r3, [r3]
  049d4	e1a02312	 mov         r2, r2, lsl r3
  049d8	e59d3014	 ldr         r3, [sp, #0x14]
  049dc	e2833c0a	 add         r3, r3, #0xA, 24
  049e0	e28330c4	 add         r3, r3, #0xC4
  049e4	e5933000	 ldr         r3, [r3]
  049e8	e0823003	 add         r3, r2, r3
  049ec	e58d3000	 str         r3, [sp]

; 2088 : 
; 2089 :     // Set the NO DESCRIPTOR FETCH mode
; 2090 :     pController->pDMARegisters->dcsr[pController->dwDmaChannel] =  DCSR_NOFETCH;// | DCSR_ENDINTR;

  049f0	e59d3014	 ldr         r3, [sp, #0x14]
  049f4	e283000c	 add         r0, r3, #0xC
  049f8	e59d3014	 ldr         r3, [sp, #0x14]
  049fc	e2833c0a	 add         r3, r3, #0xA, 24
  04a00	e28330a4	 add         r3, r3, #0xA4
  04a04	e5931000	 ldr         r1, [r3]
  04a08	e3a03004	 mov         r3, #4
  04a0c	e0020391	 mul         r2, r1, r3
  04a10	e5903000	 ldr         r3, [r0]
  04a14	e0832002	 add         r2, r3, r2
  04a18	e3a03101	 mov         r3, #1, 2
  04a1c	e5823000	 str         r3, [r2]

; 2091 : 
; 2092 :     pController->dwPFNIndex++;

  04a20	e59d3014	 ldr         r3, [sp, #0x14]
  04a24	e2833c0a	 add         r3, r3, #0xA, 24
  04a28	e28330c8	 add         r3, r3, #0xC8
  04a2c	e5933000	 ldr         r3, [r3]
  04a30	e2832001	 add         r2, r3, #1
  04a34	e59d3014	 ldr         r3, [sp, #0x14]
  04a38	e2833c0a	 add         r3, r3, #0xA, 24
  04a3c	e28330c8	 add         r3, r3, #0xC8
  04a40	e5832000	 str         r2, [r3]

; 2093 :     pController->dwPageOffset = 0;

  04a44	e59d3014	 ldr         r3, [sp, #0x14]
  04a48	e2833c0a	 add         r3, r3, #0xA, 24
  04a4c	e28320c4	 add         r2, r3, #0xC4
  04a50	e3a03000	 mov         r3, #0
  04a54	e5823000	 str         r3, [r2]

; 2094 :     pController->dwBytesRemaining -= dwTransferLength;

  04a58	e59d3014	 ldr         r3, [sp, #0x14]
  04a5c	e2833c0a	 add         r3, r3, #0xA, 24
  04a60	e28330cc	 add         r3, r3, #0xCC
  04a64	e5932000	 ldr         r2, [r3]
  04a68	e59d3004	 ldr         r3, [sp, #4]
  04a6c	e0422003	 sub         r2, r2, r3
  04a70	e59d3014	 ldr         r3, [sp, #0x14]
  04a74	e2833c0a	 add         r3, r3, #0xA, 24
  04a78	e28330cc	 add         r3, r3, #0xCC
  04a7c	e5832000	 str         r2, [r3]

; 2095 : 
; 2096 :     // program the source, target and transfer parameters
; 2097 :     pController->pDMARegisters->ddg[pController->dwDmaChannel].dsadr = SDIO_RX_FIFO;

  04a80	e59d3014	 ldr         r3, [sp, #0x14]
  04a84	e283300c	 add         r3, r3, #0xC
  04a88	e5933000	 ldr         r3, [r3]
  04a8c	e2831c02	 add         r1, r3, #2, 24
  04a90	e59d3014	 ldr         r3, [sp, #0x14]
  04a94	e2833c0a	 add         r3, r3, #0xA, 24
  04a98	e28330a4	 add         r3, r3, #0xA4
  04a9c	e5932000	 ldr         r2, [r3]
  04aa0	e3a03010	 mov         r3, #0x10
  04aa4	e0030392	 mul         r3, r2, r3
  04aa8	e0813003	 add         r3, r1, r3
  04aac	e2832004	 add         r2, r3, #4
  04ab0	e59f311c	 ldr         r3, [pc, #0x11C]
  04ab4	e5823000	 str         r3, [r2]

; 2098 :     pController->pDMARegisters->ddg[pController->dwDmaChannel].dtadr = dwTargetAddress;

  04ab8	e59d3014	 ldr         r3, [sp, #0x14]
  04abc	e283300c	 add         r3, r3, #0xC
  04ac0	e5933000	 ldr         r3, [r3]
  04ac4	e2831c02	 add         r1, r3, #2, 24
  04ac8	e59d3014	 ldr         r3, [sp, #0x14]
  04acc	e2833c0a	 add         r3, r3, #0xA, 24
  04ad0	e28330a4	 add         r3, r3, #0xA4
  04ad4	e5932000	 ldr         r2, [r3]
  04ad8	e3a03010	 mov         r3, #0x10
  04adc	e0030392	 mul         r3, r2, r3
  04ae0	e0813003	 add         r3, r1, r3
  04ae4	e2832008	 add         r2, r3, #8
  04ae8	e59d3000	 ldr         r3, [sp]
  04aec	e5823000	 str         r3, [r2]

; 2099 :     pController->pDMARegisters->ddg[pController->dwDmaChannel].dcmd = DCMD_INC_TRG_ADDR |
; 2100 :                                                                        DCMD_FLOW_SRC | 
; 2101 :                                                                        //DCMD_END_IRQ_EN |
; 2102 :                                                                        ( 3 << 16 ) | // 32 bytes maximum burst size of each data transfer
; 2103 :                                                                        ( 3 << 14 ) | // 4 bytes width
; 2104 :                                                                        dwTransferLength;

  04af0	e59d2004	 ldr         r2, [sp, #4]
  04af4	e3a03206	 mov         r3, #6, 4
  04af8	e383390f	 orr         r3, r3, #0xF, 18
  04afc	e1820003	 orr         r0, r2, r3
  04b00	e59d3014	 ldr         r3, [sp, #0x14]
  04b04	e283300c	 add         r3, r3, #0xC
  04b08	e5933000	 ldr         r3, [r3]
  04b0c	e2831c02	 add         r1, r3, #2, 24
  04b10	e59d3014	 ldr         r3, [sp, #0x14]
  04b14	e2833c0a	 add         r3, r3, #0xA, 24
  04b18	e28330a4	 add         r3, r3, #0xA4
  04b1c	e5932000	 ldr         r2, [r3]
  04b20	e3a03010	 mov         r3, #0x10
  04b24	e0030392	 mul         r3, r2, r3
  04b28	e0813003	 add         r3, r1, r3
  04b2c	e283300c	 add         r3, r3, #0xC
  04b30	e5830000	 str         r0, [r3]

; 2105 : 
; 2106 : #ifdef DEBUG
; 2107 :     pController->fDMATransferInProgress = TRUE;

  04b34	e59d3014	 ldr         r3, [sp, #0x14]
  04b38	e2832ead	 add         r2, r3, #0xAD, 28
  04b3c	e3a03001	 mov         r3, #1
  04b40	e5823000	 str         r3, [r2]

; 2108 : #endif
; 2109 : 
; 2110 :     pController->pDMARegisters->drcmr[DMA_CHMAP_SDIO_RX] = DMA_MAP_VALID_MASK | pController->dwDmaChannel;

  04b44	e59d3014	 ldr         r3, [sp, #0x14]
  04b48	e2833c0a	 add         r3, r3, #0xA, 24
  04b4c	e28330a4	 add         r3, r3, #0xA4
  04b50	e5933000	 ldr         r3, [r3]
  04b54	e3832080	 orr         r2, r3, #0x80
  04b58	e59d3014	 ldr         r3, [sp, #0x14]
  04b5c	e283300c	 add         r3, r3, #0xC
  04b60	e5933000	 ldr         r3, [r3]
  04b64	e2833f55	 add         r3, r3, #0x55, 30
  04b68	e5832000	 str         r2, [r3]

; 2111 :     pController->pDMARegisters->dcsr[pController->dwDmaChannel] |=  DCSR_RUN | DCSR_STOPIRQEN;          // set the RUN bit

  04b6c	e59d3014	 ldr         r3, [sp, #0x14]
  04b70	e283000c	 add         r0, r3, #0xC
  04b74	e59d3014	 ldr         r3, [sp, #0x14]
  04b78	e2833c0a	 add         r3, r3, #0xA, 24
  04b7c	e28330a4	 add         r3, r3, #0xA4
  04b80	e5931000	 ldr         r1, [r3]
  04b84	e3a03004	 mov         r3, #4
  04b88	e0020391	 mul         r2, r1, r3
  04b8c	e5903000	 ldr         r3, [r0]
  04b90	e0833002	 add         r3, r3, r2
  04b94	e5933000	 ldr         r3, [r3]
  04b98	e383e20a	 orr         lr, r3, #0xA, 4
  04b9c	e59d3014	 ldr         r3, [sp, #0x14]
  04ba0	e283000c	 add         r0, r3, #0xC
  04ba4	e59d3014	 ldr         r3, [sp, #0x14]
  04ba8	e2833c0a	 add         r3, r3, #0xA, 24
  04bac	e28330a4	 add         r3, r3, #0xA4
  04bb0	e5931000	 ldr         r1, [r3]
  04bb4	e3a03004	 mov         r3, #4
  04bb8	e0020391	 mul         r2, r1, r3
  04bbc	e5903000	 ldr         r3, [r0]
  04bc0	e0833002	 add         r3, r3, r2
  04bc4	e583e000	 str         lr, [r3]

; 2112 : }

  04bc8	e28dd00c	 add         sp, sp, #0xC
  04bcc	e89d6000	 ldmia       sp, {sp, lr}
  04bd0	e12fff1e	 bx          lr
  04bd4		 |$LN9@DoDMATrans@2|
  04bd4		 |$LN10@DoDMATrans@2|
  04bd4	41100040	 DCD         0x41100040
  04bd8		 |$LN11@DoDMATrans@2|
  04bd8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  04bdc		 |$LN12@DoDMATrans@2|
  04bdc	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  04be0		 |$LN13@DoDMATrans@2|
  04be0	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  04be4		 |$M45241|

			 ENDP  ; |DoDMATransferRead|

	EXPORT	|DoDMATransferWrite|

  000d0			 AREA	 |.pdata|, PDATA
|$T45255| DCD	|$LN8@DoDMATrans@3|
	DCD	0x4000bf04
; Function compile flags: /Odtp

  04be4			 AREA	 |.text|, CODE, ARM

  04be4		 |DoDMATransferWrite| PROC

; 2115 : {

  04be4		 |$LN8@DoDMATrans@3|
  04be4	e1a0c00d	 mov         r12, sp
  04be8	e92d0003	 stmdb       sp!, {r0, r1}
  04bec	e92d5000	 stmdb       sp!, {r12, lr}
  04bf0	e24dd00c	 sub         sp, sp, #0xC
  04bf4		 |$M45252|

; 2116 :     DWORD dwTransferLength;
; 2117 :     DWORD dwSourceAddress;
; 2118 : 
; 2119 :     ASSERT( MAXIMUM_DMA_TRANSFER_SIZE >= pController->systemInfo.dwPageSize );

  04bf4	e59d3014	 ldr         r3, [sp, #0x14]
  04bf8	e2833048	 add         r3, r3, #0x48
  04bfc	e5932000	 ldr         r2, [r3]
  04c00	e3a03c1f	 mov         r3, #0x1F, 24
  04c04	e38330ff	 orr         r3, r3, #0xFF
  04c08	e1520003	 cmp         r2, r3
  04c0c	8a000002	 bhi         |$LN4@DoDMATrans@3|
  04c10	e3a03001	 mov         r3, #1
  04c14	e58d3008	 str         r3, [sp, #8]
  04c18	ea000008	 b           |$LN5@DoDMATrans@3|
  04c1c		 |$LN4@DoDMATrans@3|
  04c1c	e3a03b02	 mov         r3, #2, 22
  04c20	e3833047	 orr         r3, r3, #0x47
  04c24	e59f22b0	 ldr         r2, [pc, #0x2B0]
  04c28	e59f12a8	 ldr         r1, [pc, #0x2A8]
  04c2c	e59f02a0	 ldr         r0, [pc, #0x2A0]
  04c30	eb000000	 bl          NKDbgPrintfW
  04c34	e6000010	 __debugbreak_ce
  04c38	e3a03000	 mov         r3, #0
  04c3c	e58d3008	 str         r3, [sp, #8]
  04c40		 |$LN5@DoDMATrans@3|

; 2120 : 
; 2121 :     // calculate how much data should be written in this DMA transfer
; 2122 :     dwTransferLength = pController->systemInfo.dwPageSize - pController->dwPageOffset;

  04c40	e59d3014	 ldr         r3, [sp, #0x14]
  04c44	e2832048	 add         r2, r3, #0x48
  04c48	e59d3014	 ldr         r3, [sp, #0x14]
  04c4c	e2833c0a	 add         r3, r3, #0xA, 24
  04c50	e28330c4	 add         r3, r3, #0xC4
  04c54	e5922000	 ldr         r2, [r2]
  04c58	e5933000	 ldr         r3, [r3]
  04c5c	e0423003	 sub         r3, r2, r3
  04c60	e58d3004	 str         r3, [sp, #4]

; 2123 :     if( dwTransferLength > pController->dwBytesRemaining )

  04c64	e59d3014	 ldr         r3, [sp, #0x14]
  04c68	e2833c0a	 add         r3, r3, #0xA, 24
  04c6c	e28330cc	 add         r3, r3, #0xCC
  04c70	e59d2004	 ldr         r2, [sp, #4]
  04c74	e5933000	 ldr         r3, [r3]
  04c78	e1520003	 cmp         r2, r3
  04c7c	9a000004	 bls         |$LN1@DoDMATrans@3|

; 2124 :     {
; 2125 :         dwTransferLength = pController->dwBytesRemaining;

  04c80	e59d3014	 ldr         r3, [sp, #0x14]
  04c84	e2833c0a	 add         r3, r3, #0xA, 24
  04c88	e28330cc	 add         r3, r3, #0xCC
  04c8c	e5933000	 ldr         r3, [r3]
  04c90	e58d3004	 str         r3, [sp, #4]
  04c94		 |$LN1@DoDMATrans@3|

; 2126 :     }
; 2127 : 
; 2128 :     // calculate the target physical address
; 2129 :     dwSourceAddress = ( pController->pPFNs[pController->dwPFNIndex] << UserKInfo[KINX_PFN_SHIFT] ) + pController->dwPageOffset;

  04c94	e59d3014	 ldr         r3, [sp, #0x14]
  04c98	e2833c0a	 add         r3, r3, #0xA, 24
  04c9c	e28300bc	 add         r0, r3, #0xBC
  04ca0	e59d3014	 ldr         r3, [sp, #0x14]
  04ca4	e2833c0a	 add         r3, r3, #0xA, 24
  04ca8	e28330c8	 add         r3, r3, #0xC8
  04cac	e5931000	 ldr         r1, [r3]
  04cb0	e3a03004	 mov         r3, #4
  04cb4	e0020391	 mul         r2, r1, r3
  04cb8	e5903000	 ldr         r3, [r0]
  04cbc	e0832002	 add         r2, r3, r2
  04cc0	e3e03b0d	 mvn         r3, #0xD, 22
  04cc4	e22330f7	 eor         r3, r3, #0xF7
  04cc8	e5922000	 ldr         r2, [r2]
  04ccc	e5933000	 ldr         r3, [r3]
  04cd0	e1a02312	 mov         r2, r2, lsl r3
  04cd4	e59d3014	 ldr         r3, [sp, #0x14]
  04cd8	e2833c0a	 add         r3, r3, #0xA, 24
  04cdc	e28330c4	 add         r3, r3, #0xC4
  04ce0	e5933000	 ldr         r3, [r3]
  04ce4	e0823003	 add         r3, r2, r3
  04ce8	e58d3000	 str         r3, [sp]

; 2130 : 
; 2131 :     // Set the NO DESCRIPTOR FETCH mode
; 2132 :     pController->pDMARegisters->dcsr[pController->dwDmaChannel] =  DCSR_NOFETCH; // | DCSR_ENDINTR;

  04cec	e59d3014	 ldr         r3, [sp, #0x14]
  04cf0	e283000c	 add         r0, r3, #0xC
  04cf4	e59d3014	 ldr         r3, [sp, #0x14]
  04cf8	e2833c0a	 add         r3, r3, #0xA, 24
  04cfc	e28330a4	 add         r3, r3, #0xA4
  04d00	e5931000	 ldr         r1, [r3]
  04d04	e3a03004	 mov         r3, #4
  04d08	e0020391	 mul         r2, r1, r3
  04d0c	e5903000	 ldr         r3, [r0]
  04d10	e0832002	 add         r2, r3, r2
  04d14	e3a03101	 mov         r3, #1, 2
  04d18	e5823000	 str         r3, [r2]

; 2133 : 
; 2134 :     pController->dwPFNIndex++;

  04d1c	e59d3014	 ldr         r3, [sp, #0x14]
  04d20	e2833c0a	 add         r3, r3, #0xA, 24
  04d24	e28330c8	 add         r3, r3, #0xC8
  04d28	e5933000	 ldr         r3, [r3]
  04d2c	e2832001	 add         r2, r3, #1
  04d30	e59d3014	 ldr         r3, [sp, #0x14]
  04d34	e2833c0a	 add         r3, r3, #0xA, 24
  04d38	e28330c8	 add         r3, r3, #0xC8
  04d3c	e5832000	 str         r2, [r3]

; 2135 :     pController->dwPageOffset = 0;

  04d40	e59d3014	 ldr         r3, [sp, #0x14]
  04d44	e2833c0a	 add         r3, r3, #0xA, 24
  04d48	e28320c4	 add         r2, r3, #0xC4
  04d4c	e3a03000	 mov         r3, #0
  04d50	e5823000	 str         r3, [r2]

; 2136 :     pController->dwBytesRemaining -= dwTransferLength;

  04d54	e59d3014	 ldr         r3, [sp, #0x14]
  04d58	e2833c0a	 add         r3, r3, #0xA, 24
  04d5c	e28330cc	 add         r3, r3, #0xCC
  04d60	e5932000	 ldr         r2, [r3]
  04d64	e59d3004	 ldr         r3, [sp, #4]
  04d68	e0422003	 sub         r2, r2, r3
  04d6c	e59d3014	 ldr         r3, [sp, #0x14]
  04d70	e2833c0a	 add         r3, r3, #0xA, 24
  04d74	e28330cc	 add         r3, r3, #0xCC
  04d78	e5832000	 str         r2, [r3]

; 2137 : 
; 2138 :     // program the source, target and transfer parameters
; 2139 :     pController->pDMARegisters->ddg[pController->dwDmaChannel].dsadr = dwSourceAddress;

  04d7c	e59d3014	 ldr         r3, [sp, #0x14]
  04d80	e283300c	 add         r3, r3, #0xC
  04d84	e5933000	 ldr         r3, [r3]
  04d88	e2831c02	 add         r1, r3, #2, 24
  04d8c	e59d3014	 ldr         r3, [sp, #0x14]
  04d90	e2833c0a	 add         r3, r3, #0xA, 24
  04d94	e28330a4	 add         r3, r3, #0xA4
  04d98	e5932000	 ldr         r2, [r3]
  04d9c	e3a03010	 mov         r3, #0x10
  04da0	e0030392	 mul         r3, r2, r3
  04da4	e0813003	 add         r3, r1, r3
  04da8	e2832004	 add         r2, r3, #4
  04dac	e59d3000	 ldr         r3, [sp]
  04db0	e5823000	 str         r3, [r2]

; 2140 :     pController->pDMARegisters->ddg[pController->dwDmaChannel].dtadr = SDIO_TX_FIFO;

  04db4	e59d3014	 ldr         r3, [sp, #0x14]
  04db8	e283300c	 add         r3, r3, #0xC
  04dbc	e5933000	 ldr         r3, [r3]
  04dc0	e2831c02	 add         r1, r3, #2, 24
  04dc4	e59d3014	 ldr         r3, [sp, #0x14]
  04dc8	e2833c0a	 add         r3, r3, #0xA, 24
  04dcc	e28330a4	 add         r3, r3, #0xA4
  04dd0	e5932000	 ldr         r2, [r3]
  04dd4	e3a03010	 mov         r3, #0x10
  04dd8	e0030392	 mul         r3, r2, r3
  04ddc	e0813003	 add         r3, r1, r3
  04de0	e2832008	 add         r2, r3, #8
  04de4	e59f30e4	 ldr         r3, [pc, #0xE4]
  04de8	e5823000	 str         r3, [r2]

; 2141 :     pController->pDMARegisters->ddg[pController->dwDmaChannel].dcmd = DCMD_INC_SRC_ADDR |
; 2142 :                                                                        DCMD_FLOW_TRG | 
; 2143 :                                                                        //DCMD_END_IRQ_EN |
; 2144 :                                                                        ( 3 << 16 ) | // 32 bytes maximum burst size of each data transfer
; 2145 :                                                                        ( 3 << 14 ) | // 1 byte width
; 2146 :                                                                        dwTransferLength;

  04dec	e59d2004	 ldr         r2, [sp, #4]
  04df0	e3a03209	 mov         r3, #9, 4
  04df4	e383390f	 orr         r3, r3, #0xF, 18
  04df8	e1820003	 orr         r0, r2, r3
  04dfc	e59d3014	 ldr         r3, [sp, #0x14]
  04e00	e283300c	 add         r3, r3, #0xC
  04e04	e5933000	 ldr         r3, [r3]
  04e08	e2831c02	 add         r1, r3, #2, 24
  04e0c	e59d3014	 ldr         r3, [sp, #0x14]
  04e10	e2833c0a	 add         r3, r3, #0xA, 24
  04e14	e28330a4	 add         r3, r3, #0xA4
  04e18	e5932000	 ldr         r2, [r3]
  04e1c	e3a03010	 mov         r3, #0x10
  04e20	e0030392	 mul         r3, r2, r3
  04e24	e0813003	 add         r3, r1, r3
  04e28	e283300c	 add         r3, r3, #0xC
  04e2c	e5830000	 str         r0, [r3]

; 2147 : 
; 2148 : #ifdef DEBUG
; 2149 :     pController->fDMATransferInProgress = TRUE;

  04e30	e59d3014	 ldr         r3, [sp, #0x14]
  04e34	e2832ead	 add         r2, r3, #0xAD, 28
  04e38	e3a03001	 mov         r3, #1
  04e3c	e5823000	 str         r3, [r2]

; 2150 : #endif
; 2151 : 
; 2152 :     pController->pDMARegisters->drcmr[DMA_CHMAP_SDIO_TX] = DMA_MAP_VALID_MASK | pController->dwDmaChannel;

  04e40	e59d3014	 ldr         r3, [sp, #0x14]
  04e44	e2833c0a	 add         r3, r3, #0xA, 24
  04e48	e28330a4	 add         r3, r3, #0xA4
  04e4c	e5933000	 ldr         r3, [r3]
  04e50	e3832080	 orr         r2, r3, #0x80
  04e54	e59d3014	 ldr         r3, [sp, #0x14]
  04e58	e283300c	 add         r3, r3, #0xC
  04e5c	e5933000	 ldr         r3, [r3]
  04e60	e2833f56	 add         r3, r3, #0x56, 30
  04e64	e5832000	 str         r2, [r3]

; 2153 :     pController->pDMARegisters->dcsr[pController->dwDmaChannel] |=  DCSR_RUN | DCSR_STOPIRQEN;          // set the RUN bit

  04e68	e59d3014	 ldr         r3, [sp, #0x14]
  04e6c	e283000c	 add         r0, r3, #0xC
  04e70	e59d3014	 ldr         r3, [sp, #0x14]
  04e74	e2833c0a	 add         r3, r3, #0xA, 24
  04e78	e28330a4	 add         r3, r3, #0xA4
  04e7c	e5931000	 ldr         r1, [r3]
  04e80	e3a03004	 mov         r3, #4
  04e84	e0020391	 mul         r2, r1, r3
  04e88	e5903000	 ldr         r3, [r0]
  04e8c	e0833002	 add         r3, r3, r2
  04e90	e5933000	 ldr         r3, [r3]
  04e94	e383e20a	 orr         lr, r3, #0xA, 4
  04e98	e59d3014	 ldr         r3, [sp, #0x14]
  04e9c	e283000c	 add         r0, r3, #0xC
  04ea0	e59d3014	 ldr         r3, [sp, #0x14]
  04ea4	e2833c0a	 add         r3, r3, #0xA, 24
  04ea8	e28330a4	 add         r3, r3, #0xA4
  04eac	e5931000	 ldr         r1, [r3]
  04eb0	e3a03004	 mov         r3, #4
  04eb4	e0020391	 mul         r2, r1, r3
  04eb8	e5903000	 ldr         r3, [r0]
  04ebc	e0833002	 add         r3, r3, r2
  04ec0	e583e000	 str         lr, [r3]

; 2154 : }

  04ec4	e28dd00c	 add         sp, sp, #0xC
  04ec8	e89d6000	 ldmia       sp, {sp, lr}
  04ecc	e12fff1e	 bx          lr
  04ed0		 |$LN9@DoDMATrans@3|
  04ed0		 |$LN10@DoDMATrans@3|
  04ed0	41100044	 DCD         0x41100044
  04ed4		 |$LN11@DoDMATrans@3|
  04ed4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  04ed8		 |$LN12@DoDMATrans@3|
  04ed8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  04edc		 |$LN13@DoDMATrans@3|
  04edc	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  04ee0		 |$M45253|

			 ENDP  ; |DoDMATransferWrite|

	EXPORT	|??_C@_1FC@JPKGLLGH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@NHKOAGKJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAe?$AAj?$AAe?$AAc?$AAt?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@EMGDOIFH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAB@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@OPBEPDKN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAB?$AAU?$AAS?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	IMPORT	|UnlockPages|

  000d8			 AREA	 |.pdata|, PDATA
|$T45275| DCD	|$LN39@HandleDMAI|
	DCD	0x40017604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@JPKGLLGH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, " ", 0x0, "e", 0x0, "j", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@NHKOAGKJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAe?$AAj?$AAe?$AAc?$AAt?$AAe?$AAd@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, " "
	DCB	0x0, "e", 0x0, "j", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@EMGDOIFH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAB@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "B", 0x0, "U", 0x0, "S", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@OPBEPDKN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAB?$AAU?$AAS?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, ":"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "B"
	DCB	0x0, "U", 0x0, "S", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  04ee0			 AREA	 |.text|, CODE, ARM

  04ee0		 |HandleDMAInterrupt| PROC

; 2164 : {

  04ee0		 |$LN39@HandleDMAI|
  04ee0	e1a0c00d	 mov         r12, sp
  04ee4	e92d0001	 stmdb       sp!, {r0}
  04ee8	e92d5000	 stmdb       sp!, {r12, lr}
  04eec	e24dd020	 sub         sp, sp, #0x20
  04ef0		 |$M45272|

; 2165 :     DWORD DCSR;
; 2166 :     PSD_BUS_REQUEST     pRequest;       // the request to complete
; 2167 : 
; 2168 :     // abort if we are trying to stop the DMA transfer from the ProcessCardRemoval routine
; 2169 :     if( pController->fDMATransferCancelled )

  04ef0	e59d3028	 ldr         r3, [sp, #0x28]
  04ef4	e2833eab	 add         r3, r3, #0xAB, 28
  04ef8	e5933000	 ldr         r3, [r3]
  04efc	e3530000	 cmp         r3, #0
  04f00	0a000000	 beq         |$LN24@HandleDMAI|

; 2170 :         return;

  04f04	ea000160	 b           |$LN25@HandleDMAI|
  04f08		 |$LN24@HandleDMAI|

; 2171 : 
; 2172 :         // get the current request  
; 2173 :     pRequest = pController->pCurrentRequest;

  04f08	e59d3028	 ldr         r3, [sp, #0x28]
  04f0c	e283301c	 add         r3, r3, #0x1C
  04f10	e5933000	 ldr         r3, [r3]
  04f14	e58d3000	 str         r3, [sp]

; 2174 : 
; 2175 :     if(NULL == pRequest)

  04f18	e59d3000	 ldr         r3, [sp]
  04f1c	e3530000	 cmp         r3, #0
  04f20	1a00002b	 bne         |$LN23@HandleDMAI|

; 2176 :     {
; 2177 :         pController->pDMARegisters->dcsr[pController->dwDmaChannel] = DCSR_NOFETCH;// | DCSR_ENDINTR;

  04f24	e59d3028	 ldr         r3, [sp, #0x28]
  04f28	e283000c	 add         r0, r3, #0xC
  04f2c	e59d3028	 ldr         r3, [sp, #0x28]
  04f30	e2833c0a	 add         r3, r3, #0xA, 24
  04f34	e28330a4	 add         r3, r3, #0xA4
  04f38	e5931000	 ldr         r1, [r3]
  04f3c	e3a03004	 mov         r3, #4
  04f40	e0020391	 mul         r2, r1, r3
  04f44	e5903000	 ldr         r3, [r0]
  04f48	e0832002	 add         r2, r3, r2
  04f4c	e3a03101	 mov         r3, #1, 2
  04f50	e5823000	 str         r3, [r2]

; 2178 :         if( !(pController->fDMAUsingDriverBuffer) )

  04f54	e59d3028	 ldr         r3, [sp, #0x28]
  04f58	e2833c0a	 add         r3, r3, #0xA, 24
  04f5c	e28330ac	 add         r3, r3, #0xAC
  04f60	e5933000	 ldr         r3, [r3]
  04f64	e3530000	 cmp         r3, #0
  04f68	1a000018	 bne         |$LN22@HandleDMAI|

; 2179 :         { // we use client provided DMA buffer.  Unlock the memory pages where it is located.
; 2180 :             if( pController->pClientBuffer )

  04f6c	e59d3028	 ldr         r3, [sp, #0x28]
  04f70	e2833c0a	 add         r3, r3, #0xA, 24
  04f74	e28330b8	 add         r3, r3, #0xB8
  04f78	e5933000	 ldr         r3, [r3]
  04f7c	e3530000	 cmp         r3, #0
  04f80	0a000012	 beq         |$LN21@HandleDMAI|

; 2181 :             {
; 2182 :                 UnlockPages( pController->pClientBuffer, pController->dwClientBufferSize );

  04f84	e59d3028	 ldr         r3, [sp, #0x28]
  04f88	e2833c0a	 add         r3, r3, #0xA, 24
  04f8c	e28330b4	 add         r3, r3, #0xB4
  04f90	e5931000	 ldr         r1, [r3]
  04f94	e59d3028	 ldr         r3, [sp, #0x28]
  04f98	e2833c0a	 add         r3, r3, #0xA, 24
  04f9c	e28330b8	 add         r3, r3, #0xB8
  04fa0	e5930000	 ldr         r0, [r3]
  04fa4	eb000000	 bl          UnlockPages

; 2183 :                 pController->pClientBuffer = NULL;

  04fa8	e59d3028	 ldr         r3, [sp, #0x28]
  04fac	e2833c0a	 add         r3, r3, #0xA, 24
  04fb0	e28320b8	 add         r2, r3, #0xB8
  04fb4	e3a03000	 mov         r3, #0
  04fb8	e5823000	 str         r3, [r2]

; 2184 :                 pController->dwClientBufferSize = 0;

  04fbc	e59d3028	 ldr         r3, [sp, #0x28]
  04fc0	e2833c0a	 add         r3, r3, #0xA, 24
  04fc4	e28320b4	 add         r2, r3, #0xB4
  04fc8	e3a03000	 mov         r3, #0
  04fcc	e5823000	 str         r3, [r2]
  04fd0		 |$LN21@HandleDMAI|
  04fd0		 |$LN22@HandleDMAI|

; 2185 :             }
; 2186 :         }
; 2187 :         return;

  04fd0	ea00012d	 b           |$LN25@HandleDMAI|
  04fd4		 |$LN23@HandleDMAI|

; 2188 :     }
; 2189 : 
; 2190 :     ASSERT(pController->fDMATransfer);

  04fd4	e59d3028	 ldr         r3, [sp, #0x28]
  04fd8	e2833c0a	 add         r3, r3, #0xA, 24
  04fdc	e28330a8	 add         r3, r3, #0xA8
  04fe0	e5933000	 ldr         r3, [r3]
  04fe4	e3530000	 cmp         r3, #0
  04fe8	0a000002	 beq         |$LN27@HandleDMAI|
  04fec	e3a03001	 mov         r3, #1
  04ff0	e58d3008	 str         r3, [sp, #8]
  04ff4	ea000008	 b           |$LN28@HandleDMAI|
  04ff8		 |$LN27@HandleDMAI|
  04ff8	e3a03b02	 mov         r3, #2, 22
  04ffc	e383308e	 orr         r3, r3, #0x8E
  05000	e59f24a4	 ldr         r2, [pc, #0x4A4]
  05004	e59f149c	 ldr         r1, [pc, #0x49C]
  05008	e59f0494	 ldr         r0, [pc, #0x494]
  0500c	eb000000	 bl          NKDbgPrintfW
  05010	e6000010	 __debugbreak_ce
  05014	e3a03000	 mov         r3, #0
  05018	e58d3008	 str         r3, [sp, #8]
  0501c		 |$LN28@HandleDMAI|

; 2191 :     
; 2192 : #ifdef DEBUG
; 2193 :     pController->fDMATransferInProgress = FALSE;

  0501c	e59d3028	 ldr         r3, [sp, #0x28]
  05020	e2832ead	 add         r2, r3, #0xAD, 28
  05024	e3a03000	 mov         r3, #0
  05028	e5823000	 str         r3, [r2]

; 2194 : #endif
; 2195 : 
; 2196 :     DCSR = pController->pDMARegisters->dcsr[pController->dwDmaChannel];

  0502c	e59d3028	 ldr         r3, [sp, #0x28]
  05030	e283000c	 add         r0, r3, #0xC
  05034	e59d3028	 ldr         r3, [sp, #0x28]
  05038	e2833c0a	 add         r3, r3, #0xA, 24
  0503c	e28330a4	 add         r3, r3, #0xA4
  05040	e5931000	 ldr         r1, [r3]
  05044	e3a03004	 mov         r3, #4
  05048	e0020391	 mul         r2, r1, r3
  0504c	e5903000	 ldr         r3, [r0]
  05050	e0833002	 add         r3, r3, r2
  05054	e5933000	 ldr         r3, [r3]
  05058	e58d3004	 str         r3, [sp, #4]

; 2197 : 
; 2198 :     // check for DMA bus errors
; 2199 :     if( DCSR & DCSR_BUSERRINTR )

  0505c	e59d3004	 ldr         r3, [sp, #4]
  05060	e3130001	 tst         r3, #1
  05064	0a000055	 beq         |$LN20@HandleDMAI|

; 2200 :     {
; 2201 :         ASSERT(0); // DMA Bus error!

  05068	e3a03b02	 mov         r3, #2, 22
  0506c	e3833099	 orr         r3, r3, #0x99
  05070	e59f2434	 ldr         r2, [pc, #0x434]
  05074	e59f142c	 ldr         r1, [pc, #0x42C]
  05078	e59f0424	 ldr         r0, [pc, #0x424]
  0507c	eb000000	 bl          NKDbgPrintfW
  05080	e6000010	 __debugbreak_ce

; 2202 : 
; 2203 :         DbgPrintZo(SDCARD_ZONE_ERROR, (TEXT("HandleDMAInterrupt: DMA BUS ERROR\n")));     

  05084	e59f3410	 ldr         r3, [pc, #0x410]
  05088	e5933440	 ldr         r3, [r3, #0x440]
  0508c	e3130902	 tst         r3, #2, 18
  05090	0a000004	 beq         |$LN29@HandleDMAI|
  05094	e59f0418	 ldr         r0, [pc, #0x418]
  05098	eb000000	 bl          SDCardDebugOutput
  0509c	e3a03001	 mov         r3, #1
  050a0	e58d300c	 str         r3, [sp, #0xC]
  050a4	ea000001	 b           |$LN30@HandleDMAI|
  050a8		 |$LN29@HandleDMAI|
  050a8	e3a03000	 mov         r3, #0
  050ac	e58d300c	 str         r3, [sp, #0xC]
  050b0		 |$LN30@HandleDMAI|

; 2204 :         
; 2205 :         if( !( pController->fClockAlwaysOn || 
; 2206 :                ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  050b0	e59d3028	 ldr         r3, [sp, #0x28]
  050b4	e2833d35	 add         r3, r3, #0x35, 26
  050b8	e5933000	 ldr         r3, [r3]
  050bc	e3530000	 cmp         r3, #0
  050c0	1a00000d	 bne         |$LN19@HandleDMAI|
  050c4	e59d3028	 ldr         r3, [sp, #0x28]
  050c8	e2833c0d	 add         r3, r3, #0xD, 24
  050cc	e2833044	 add         r3, r3, #0x44
  050d0	e5933000	 ldr         r3, [r3]
  050d4	e3530000	 cmp         r3, #0
  050d8	0a000005	 beq         |$LN18@HandleDMAI|
  050dc	e59d3028	 ldr         r3, [sp, #0x28]
  050e0	e2833c0d	 add         r3, r3, #0xD, 24
  050e4	e2833034	 add         r3, r3, #0x34
  050e8	e5933000	 ldr         r3, [r3]
  050ec	e3530000	 cmp         r3, #0
  050f0	1a000001	 bne         |$LN19@HandleDMAI|
  050f4		 |$LN18@HandleDMAI|

; 2207 :         {
; 2208 :                 // turn off the clock
; 2209 :             SDClockOff(pController);

  050f4	e59d0028	 ldr         r0, [sp, #0x28]
  050f8	eb000000	 bl          SDClockOff
  050fc		 |$LN19@HandleDMAI|

; 2210 :         }
; 2211 : 
; 2212 :         if( !(pController->fDMAUsingDriverBuffer) )

  050fc	e59d3028	 ldr         r3, [sp, #0x28]
  05100	e2833c0a	 add         r3, r3, #0xA, 24
  05104	e28330ac	 add         r3, r3, #0xAC
  05108	e5933000	 ldr         r3, [r3]
  0510c	e3530000	 cmp         r3, #0
  05110	1a000018	 bne         |$LN17@HandleDMAI|

; 2213 :         { // we use client provided DMA buffer.  Unlock the memory pages where it is located.
; 2214 :             if( pController->pClientBuffer )

  05114	e59d3028	 ldr         r3, [sp, #0x28]
  05118	e2833c0a	 add         r3, r3, #0xA, 24
  0511c	e28330b8	 add         r3, r3, #0xB8
  05120	e5933000	 ldr         r3, [r3]
  05124	e3530000	 cmp         r3, #0
  05128	0a000012	 beq         |$LN16@HandleDMAI|

; 2215 :             {
; 2216 :                 UnlockPages( pController->pClientBuffer, pController->dwClientBufferSize );

  0512c	e59d3028	 ldr         r3, [sp, #0x28]
  05130	e2833c0a	 add         r3, r3, #0xA, 24
  05134	e28330b4	 add         r3, r3, #0xB4
  05138	e5931000	 ldr         r1, [r3]
  0513c	e59d3028	 ldr         r3, [sp, #0x28]
  05140	e2833c0a	 add         r3, r3, #0xA, 24
  05144	e28330b8	 add         r3, r3, #0xB8
  05148	e5930000	 ldr         r0, [r3]
  0514c	eb000000	 bl          UnlockPages

; 2217 :                 pController->pClientBuffer = NULL;

  05150	e59d3028	 ldr         r3, [sp, #0x28]
  05154	e2833c0a	 add         r3, r3, #0xA, 24
  05158	e28320b8	 add         r2, r3, #0xB8
  0515c	e3a03000	 mov         r3, #0
  05160	e5823000	 str         r3, [r2]

; 2218 :                 pController->dwClientBufferSize = 0;

  05164	e59d3028	 ldr         r3, [sp, #0x28]
  05168	e2833c0a	 add         r3, r3, #0xA, 24
  0516c	e28320b4	 add         r2, r3, #0xB4
  05170	e3a03000	 mov         r3, #0
  05174	e5823000	 str         r3, [r2]
  05178		 |$LN16@HandleDMAI|
  05178		 |$LN17@HandleDMAI|

; 2219 :             }
; 2220 :         }
; 2221 : 
; 2222 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleDMAInterrupt reports DMA BUS ERROR\n")));

  05178	e59f331c	 ldr         r3, [pc, #0x31C]
  0517c	e5933440	 ldr         r3, [r3, #0x440]
  05180	e3130080	 tst         r3, #0x80
  05184	0a000004	 beq         |$LN31@HandleDMAI|
  05188	e59f0320	 ldr         r0, [pc, #0x320]
  0518c	eb000000	 bl          SDCardDebugOutput
  05190	e3a03001	 mov         r3, #1
  05194	e58d3010	 str         r3, [sp, #0x10]
  05198	ea000001	 b           |$LN32@HandleDMAI|
  0519c		 |$LN31@HandleDMAI|
  0519c	e3a03000	 mov         r3, #0
  051a0	e58d3010	 str         r3, [sp, #0x10]
  051a4		 |$LN32@HandleDMAI|

; 2223 :         IndicateBusRequestComplete(pController->pHCContext,
; 2224 :                                         pRequest ,
; 2225 :                                         SD_API_STATUS_UNSUCCESSFUL);

  051a4	e3a0210f	 mov         r2, #0xF, 2
  051a8	e59d1000	 ldr         r1, [sp]
  051ac	e59d3028	 ldr         r3, [sp, #0x28]
  051b0	e2833018	 add         r3, r3, #0x18
  051b4	e5930000	 ldr         r0, [r3]
  051b8	eb000000	 bl          IndicateBusRequestComplete

; 2226 :         return;

  051bc	ea0000b2	 b           |$LN25@HandleDMAI|
  051c0		 |$LN20@HandleDMAI|

; 2227 :     }
; 2228 : 
; 2229 :     if( DCSR & DCSR_STARTINTR )

  051c0	e59d3004	 ldr         r3, [sp, #4]
  051c4	e3130002	 tst         r3, #2
  051c8	0a000006	 beq         |$LN15@HandleDMAI|

; 2230 :     {
; 2231 :         ASSERT( FALSE ); // unexpected

  051cc	e3a03b02	 mov         r3, #2, 22
  051d0	e38330b7	 orr         r3, r3, #0xB7
  051d4	e59f22d0	 ldr         r2, [pc, #0x2D0]
  051d8	e59f12c8	 ldr         r1, [pc, #0x2C8]
  051dc	e59f02c0	 ldr         r0, [pc, #0x2C0]
  051e0	eb000000	 bl          NKDbgPrintfW
  051e4	e6000010	 __debugbreak_ce
  051e8		 |$LN15@HandleDMAI|

; 2232 :     }
; 2233 : 
; 2234 :     if( DCSR & DCSR_ENDINTR )

  051e8	e59d3004	 ldr         r3, [sp, #4]
  051ec	e3130004	 tst         r3, #4
  051f0	0a000006	 beq         |$LN14@HandleDMAI|

; 2235 :     {
; 2236 :         ASSERT( FALSE ); // unexpected

  051f4	e3a03b02	 mov         r3, #2, 22
  051f8	e38330bc	 orr         r3, r3, #0xBC
  051fc	e59f22a8	 ldr         r2, [pc, #0x2A8]
  05200	e59f12a0	 ldr         r1, [pc, #0x2A0]
  05204	e59f0298	 ldr         r0, [pc, #0x298]
  05208	eb000000	 bl          NKDbgPrintfW
  0520c	e6000010	 __debugbreak_ce
  05210		 |$LN14@HandleDMAI|

; 2237 :     }
; 2238 : 
; 2239 :     if( DCSR & DCSR_EOR_INTR )

  05210	e59d3004	 ldr         r3, [sp, #4]
  05214	e3130c02	 tst         r3, #2, 24
  05218	0a000006	 beq         |$LN13@HandleDMAI|

; 2240 :     {
; 2241 :         ASSERT( FALSE ); // unexpected

  0521c	e3a03b02	 mov         r3, #2, 22
  05220	e38330c1	 orr         r3, r3, #0xC1
  05224	e59f2280	 ldr         r2, [pc, #0x280]
  05228	e59f1278	 ldr         r1, [pc, #0x278]
  0522c	e59f0270	 ldr         r0, [pc, #0x270]
  05230	eb000000	 bl          NKDbgPrintfW
  05234	e6000010	 __debugbreak_ce
  05238		 |$LN13@HandleDMAI|

; 2242 :     }
; 2243 : 
; 2244 :     if( DCSR & DCSR_STOPINTR )

  05238	e59d3004	 ldr         r3, [sp, #4]
  0523c	e3130008	 tst         r3, #8
  05240	0a000091	 beq         |$LN12@HandleDMAI|

; 2245 :     {
; 2246 :         // check if there is more data to transfer
; 2247 :         if( pController->dwBytesRemaining > 0 )

  05244	e59d3028	 ldr         r3, [sp, #0x28]
  05248	e2833c0a	 add         r3, r3, #0xA, 24
  0524c	e28330cc	 add         r3, r3, #0xCC
  05250	e5933000	 ldr         r3, [r3]
  05254	e3530000	 cmp         r3, #0
  05258	9a000060	 bls         |$LN11@HandleDMAI|

; 2248 :         {
; 2249 :             // if card was ejected
; 2250 :             if( !IsCardPresent() )

  0525c	eb000000	 bl          IsCardPresent
  05260	e58d0014	 str         r0, [sp, #0x14]
  05264	e59d3014	 ldr         r3, [sp, #0x14]
  05268	e3530000	 cmp         r3, #0
  0526c	1a00004e	 bne         |$LN10@HandleDMAI|

; 2251 :             {
; 2252 :                 DbgPrintZo(SDCARD_ZONE_ERROR, (TEXT("HandleDMAInterrupt: Card ejected!\n")));     

  05270	e59f3224	 ldr         r3, [pc, #0x224]
  05274	e5933440	 ldr         r3, [r3, #0x440]
  05278	e3130902	 tst         r3, #2, 18
  0527c	0a000004	 beq         |$LN33@HandleDMAI|
  05280	e59f0218	 ldr         r0, [pc, #0x218]
  05284	eb000000	 bl          SDCardDebugOutput
  05288	e3a03001	 mov         r3, #1
  0528c	e58d3018	 str         r3, [sp, #0x18]
  05290	ea000001	 b           |$LN34@HandleDMAI|
  05294		 |$LN33@HandleDMAI|
  05294	e3a03000	 mov         r3, #0
  05298	e58d3018	 str         r3, [sp, #0x18]
  0529c		 |$LN34@HandleDMAI|

; 2253 : 
; 2254 :                 if( !( pController->fClockAlwaysOn || 
; 2255 :                        ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  0529c	e59d3028	 ldr         r3, [sp, #0x28]
  052a0	e2833d35	 add         r3, r3, #0x35, 26
  052a4	e5933000	 ldr         r3, [r3]
  052a8	e3530000	 cmp         r3, #0
  052ac	1a00000d	 bne         |$LN9@HandleDMAI|
  052b0	e59d3028	 ldr         r3, [sp, #0x28]
  052b4	e2833c0d	 add         r3, r3, #0xD, 24
  052b8	e2833044	 add         r3, r3, #0x44
  052bc	e5933000	 ldr         r3, [r3]
  052c0	e3530000	 cmp         r3, #0
  052c4	0a000005	 beq         |$LN8@HandleDMAI|
  052c8	e59d3028	 ldr         r3, [sp, #0x28]
  052cc	e2833c0d	 add         r3, r3, #0xD, 24
  052d0	e2833034	 add         r3, r3, #0x34
  052d4	e5933000	 ldr         r3, [r3]
  052d8	e3530000	 cmp         r3, #0
  052dc	1a000001	 bne         |$LN9@HandleDMAI|
  052e0		 |$LN8@HandleDMAI|

; 2256 :                 {
; 2257 :                         // turn off the clock
; 2258 :                     SDClockOff(pController);

  052e0	e59d0028	 ldr         r0, [sp, #0x28]
  052e4	eb000000	 bl          SDClockOff
  052e8		 |$LN9@HandleDMAI|

; 2259 :                 }
; 2260 : 
; 2261 :                 if( !(pController->fDMAUsingDriverBuffer) )

  052e8	e59d3028	 ldr         r3, [sp, #0x28]
  052ec	e2833c0a	 add         r3, r3, #0xA, 24
  052f0	e28330ac	 add         r3, r3, #0xAC
  052f4	e5933000	 ldr         r3, [r3]
  052f8	e3530000	 cmp         r3, #0
  052fc	1a000018	 bne         |$LN7@HandleDMAI|

; 2262 :                 { // we use client provided DMA buffer.  Unlock the memory pages where it is located.
; 2263 :                     if( pController->pClientBuffer )

  05300	e59d3028	 ldr         r3, [sp, #0x28]
  05304	e2833c0a	 add         r3, r3, #0xA, 24
  05308	e28330b8	 add         r3, r3, #0xB8
  0530c	e5933000	 ldr         r3, [r3]
  05310	e3530000	 cmp         r3, #0
  05314	0a000012	 beq         |$LN6@HandleDMAI|

; 2264 :                     {
; 2265 :                         UnlockPages( pController->pClientBuffer, pController->dwClientBufferSize );

  05318	e59d3028	 ldr         r3, [sp, #0x28]
  0531c	e2833c0a	 add         r3, r3, #0xA, 24
  05320	e28330b4	 add         r3, r3, #0xB4
  05324	e5931000	 ldr         r1, [r3]
  05328	e59d3028	 ldr         r3, [sp, #0x28]
  0532c	e2833c0a	 add         r3, r3, #0xA, 24
  05330	e28330b8	 add         r3, r3, #0xB8
  05334	e5930000	 ldr         r0, [r3]
  05338	eb000000	 bl          UnlockPages

; 2266 :                         pController->pClientBuffer = NULL;

  0533c	e59d3028	 ldr         r3, [sp, #0x28]
  05340	e2833c0a	 add         r3, r3, #0xA, 24
  05344	e28320b8	 add         r2, r3, #0xB8
  05348	e3a03000	 mov         r3, #0
  0534c	e5823000	 str         r3, [r2]

; 2267 :                         pController->dwClientBufferSize = 0;

  05350	e59d3028	 ldr         r3, [sp, #0x28]
  05354	e2833c0a	 add         r3, r3, #0xA, 24
  05358	e28320b4	 add         r2, r3, #0xB4
  0535c	e3a03000	 mov         r3, #0
  05360	e5823000	 str         r3, [r2]
  05364		 |$LN6@HandleDMAI|
  05364		 |$LN7@HandleDMAI|

; 2268 :                     }
; 2269 :                 }
; 2270 : 
; 2271 :                 DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleDMAInterrupt reports Card ejected\n")));

  05364	e59f3130	 ldr         r3, [pc, #0x130]
  05368	e5933440	 ldr         r3, [r3, #0x440]
  0536c	e3130080	 tst         r3, #0x80
  05370	0a000004	 beq         |$LN35@HandleDMAI|
  05374	e59f011c	 ldr         r0, [pc, #0x11C]
  05378	eb000000	 bl          SDCardDebugOutput
  0537c	e3a03001	 mov         r3, #1
  05380	e58d301c	 str         r3, [sp, #0x1C]
  05384	ea000001	 b           |$LN36@HandleDMAI|
  05388		 |$LN35@HandleDMAI|
  05388	e3a03000	 mov         r3, #0
  0538c	e58d301c	 str         r3, [sp, #0x1C]
  05390		 |$LN36@HandleDMAI|

; 2272 :                 IndicateBusRequestComplete(pController->pHCContext,
; 2273 :                                                 pRequest ,
; 2274 :                                                 SD_API_STATUS_DEVICE_REMOVED);

  05390	e3a02147	 mov         r2, #0x47, 2
  05394	e59d1000	 ldr         r1, [sp]
  05398	e59d3028	 ldr         r3, [sp, #0x28]
  0539c	e2833018	 add         r3, r3, #0x18
  053a0	e5930000	 ldr         r0, [r3]
  053a4	eb000000	 bl          IndicateBusRequestComplete

; 2275 :                 return;

  053a8	ea000037	 b           |$LN25@HandleDMAI|
  053ac		 |$LN10@HandleDMAI|

; 2276 :             }
; 2277 : 
; 2278 :             if (TRANSFER_IS_READ(pRequest)){

  053ac	e59d3000	 ldr         r3, [sp]
  053b0	e2833010	 add         r3, r3, #0x10
  053b4	e5933000	 ldr         r3, [r3]
  053b8	e3530000	 cmp         r3, #0
  053bc	1a000003	 bne         |$LN5@HandleDMAI|

; 2279 :                 DoDMATransferRead( pController, pRequest );

  053c0	e59d1000	 ldr         r1, [sp]
  053c4	e59d0028	 ldr         r0, [sp, #0x28]
  053c8	eb000000	 bl          DoDMATransferRead

; 2280 :             } else {

  053cc	ea000002	 b           |$LN4@HandleDMAI|
  053d0		 |$LN5@HandleDMAI|

; 2281 :                 DoDMATransferWrite( pController, pRequest );

  053d0	e59d1000	 ldr         r1, [sp]
  053d4	e59d0028	 ldr         r0, [sp, #0x28]
  053d8	eb000000	 bl          DoDMATransferWrite
  053dc		 |$LN4@HandleDMAI|

; 2282 :             }
; 2283 :         }
; 2284 :         else

  053dc	ea00002a	 b           |$LN3@HandleDMAI|
  053e0		 |$LN11@HandleDMAI|

; 2285 :         {
; 2286 :             pController->pDMARegisters->dcsr[pController->dwDmaChannel] = DCSR_NOFETCH;// | DCSR_ENDINTR;

  053e0	e59d3028	 ldr         r3, [sp, #0x28]
  053e4	e283000c	 add         r0, r3, #0xC
  053e8	e59d3028	 ldr         r3, [sp, #0x28]
  053ec	e2833c0a	 add         r3, r3, #0xA, 24
  053f0	e28330a4	 add         r3, r3, #0xA4
  053f4	e5931000	 ldr         r1, [r3]
  053f8	e3a03004	 mov         r3, #4
  053fc	e0020391	 mul         r2, r1, r3
  05400	e5903000	 ldr         r3, [r0]
  05404	e0832002	 add         r2, r3, r2
  05408	e3a03101	 mov         r3, #1, 2
  0540c	e5823000	 str         r3, [r2]

; 2287 :             if( !(pController->fDMAUsingDriverBuffer) )

  05410	e59d3028	 ldr         r3, [sp, #0x28]
  05414	e2833c0a	 add         r3, r3, #0xA, 24
  05418	e28330ac	 add         r3, r3, #0xAC
  0541c	e5933000	 ldr         r3, [r3]
  05420	e3530000	 cmp         r3, #0
  05424	1a000018	 bne         |$LN2@HandleDMAI|

; 2288 :             { // we use client provided DMA buffer.  Unlock the memory pages where it is located.
; 2289 :                 if( pController->pClientBuffer )

  05428	e59d3028	 ldr         r3, [sp, #0x28]
  0542c	e2833c0a	 add         r3, r3, #0xA, 24
  05430	e28330b8	 add         r3, r3, #0xB8
  05434	e5933000	 ldr         r3, [r3]
  05438	e3530000	 cmp         r3, #0
  0543c	0a000012	 beq         |$LN1@HandleDMAI|

; 2290 :                 {
; 2291 :                     UnlockPages( pController->pClientBuffer, pController->dwClientBufferSize );

  05440	e59d3028	 ldr         r3, [sp, #0x28]
  05444	e2833c0a	 add         r3, r3, #0xA, 24
  05448	e28330b4	 add         r3, r3, #0xB4
  0544c	e5931000	 ldr         r1, [r3]
  05450	e59d3028	 ldr         r3, [sp, #0x28]
  05454	e2833c0a	 add         r3, r3, #0xA, 24
  05458	e28330b8	 add         r3, r3, #0xB8
  0545c	e5930000	 ldr         r0, [r3]
  05460	eb000000	 bl          UnlockPages

; 2292 :                     pController->pClientBuffer = NULL;

  05464	e59d3028	 ldr         r3, [sp, #0x28]
  05468	e2833c0a	 add         r3, r3, #0xA, 24
  0546c	e28320b8	 add         r2, r3, #0xB8
  05470	e3a03000	 mov         r3, #0
  05474	e5823000	 str         r3, [r2]

; 2293 :                     pController->dwClientBufferSize = 0;

  05478	e59d3028	 ldr         r3, [sp, #0x28]
  0547c	e2833c0a	 add         r3, r3, #0xA, 24
  05480	e28320b4	 add         r2, r3, #0xB4
  05484	e3a03000	 mov         r3, #0
  05488	e5823000	 str         r3, [r2]
  0548c		 |$LN1@HandleDMAI|
  0548c		 |$LN2@HandleDMAI|
  0548c		 |$LN3@HandleDMAI|
  0548c		 |$LN12@HandleDMAI|
  0548c		 |$LN25@HandleDMAI|

; 2294 :                 }
; 2295 :             }
; 2296 :         }
; 2297 :     }
; 2298 : }

  0548c	e28dd020	 add         sp, sp, #0x20
  05490	e89d6000	 ldmia       sp, {sp, lr}
  05494	e12fff1e	 bx          lr
  05498		 |$LN40@HandleDMAI|
  05498		 |$LN41@HandleDMAI|
  05498	00000000	 DCD         |??_C@_1FC@JPKGLLGH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5@|
  0549c		 |$LN42@HandleDMAI|
  0549c	00000000	 DCD         |dpCurSettings|
  054a0		 |$LN43@HandleDMAI|
  054a0	00000000	 DCD         |??_C@_1EG@NHKOAGKJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAe?$AAj?$AAe?$AAc?$AAt?$AAe?$AAd@|
  054a4		 |$LN44@HandleDMAI|
  054a4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  054a8		 |$LN45@HandleDMAI|
  054a8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  054ac		 |$LN46@HandleDMAI|
  054ac	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  054b0		 |$LN47@HandleDMAI|
  054b0	00000000	 DCD         |??_C@_1FE@EMGDOIFH@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAB@|
  054b4		 |$LN48@HandleDMAI|
  054b4	00000000	 DCD         |??_C@_1EG@OPBEPDKN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAD?$AAM?$AAA?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAB?$AAU?$AAS?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  054b8		 |$M45273|

			 ENDP  ; |HandleDMAInterrupt|

	EXPORT	|CalculateTransferTimeout|
	IMPORT	|__rt_udiv64by64|

  000e0			 AREA	 |.pdata|, PDATA
|$T45291| DCD	|$LN7@CalculateT|
	DCD	0x40004e04
; Function compile flags: /Odtp

  054b8			 AREA	 |.text|, CODE, ARM

  054b8		 |CalculateTransferTimeout| PROC

; 2309 : {

  054b8		 |$LN7@CalculateT|
  054b8	e1a0c00d	 mov         r12, sp
  054bc	e92d0003	 stmdb       sp!, {r0, r1}
  054c0	e92d5000	 stmdb       sp!, {r12, lr}
  054c4	e24dd018	 sub         sp, sp, #0x18
  054c8		 |$M45288|

; 2310 :     unsigned __int64 dwTransferTime;
; 2311 : 
; 2312 :     // get the number of bytes to transfer
; 2313 :     dwTransferTime = pRequest->BlockSize * pRequest->NumBlocks;

  054c8	e59d3024	 ldr         r3, [sp, #0x24]
  054cc	e2832040	 add         r2, r3, #0x40
  054d0	e59d3024	 ldr         r3, [sp, #0x24]
  054d4	e283303c	 add         r3, r3, #0x3C
  054d8	e5922000	 ldr         r2, [r2]
  054dc	e5933000	 ldr         r3, [r3]
  054e0	e0030392	 mul         r3, r2, r3
  054e4	e58d3000	 str         r3, [sp]
  054e8	e3a03000	 mov         r3, #0
  054ec	e58d3004	 str         r3, [sp, #4]

; 2314 :     
; 2315 :     // now calculate the number of bits to transfer
; 2316 :     if( pController->f4BitMode )

  054f0	e59d3020	 ldr         r3, [sp, #0x20]
  054f4	e2833c0d	 add         r3, r3, #0xD, 24
  054f8	e283303c	 add         r3, r3, #0x3C
  054fc	e5933000	 ldr         r3, [r3]
  05500	e3530000	 cmp         r3, #0
  05504	0a00000b	 beq         |$LN2@CalculateT|

; 2317 :     {
; 2318 :         dwTransferTime *= 2;

  05508	e59d2000	 ldr         r2, [sp]
  0550c	e59d3004	 ldr         r3, [sp, #4]
  05510	e58d200c	 str         r2, [sp, #0xC]
  05514	e1a00083	 mov         r0, r3, lsl #1
  05518	e59d300c	 ldr         r3, [sp, #0xC]
  0551c	e1a01fa3	 mov         r1, r3, lsr #31
  05520	e59d300c	 ldr         r3, [sp, #0xC]
  05524	e1a02083	 mov         r2, r3, lsl #1
  05528	e1803001	 orr         r3, r0, r1
  0552c	e58d2000	 str         r2, [sp]
  05530	e58d3004	 str         r3, [sp, #4]

; 2319 :     }
; 2320 :     else

  05534	ea00000a	 b           |$LN1@CalculateT|
  05538		 |$LN2@CalculateT|

; 2321 :     {
; 2322 :         dwTransferTime *= 8;

  05538	e59d2000	 ldr         r2, [sp]
  0553c	e59d3004	 ldr         r3, [sp, #4]
  05540	e58d2010	 str         r2, [sp, #0x10]
  05544	e1a00183	 mov         r0, r3, lsl #3
  05548	e59d3010	 ldr         r3, [sp, #0x10]
  0554c	e1a01ea3	 mov         r1, r3, lsr #29
  05550	e59d3010	 ldr         r3, [sp, #0x10]
  05554	e1a02183	 mov         r2, r3, lsl #3
  05558	e1803001	 orr         r3, r0, r1
  0555c	e58d2000	 str         r2, [sp]
  05560	e58d3004	 str         r3, [sp, #4]
  05564		 |$LN1@CalculateT|

; 2323 :     }
; 2324 : 
; 2325 :     // increase the transfer time estimate by a factor of 5
; 2326 :     dwTransferTime *= TRANSFER_TIMEOUT_FACTOR; 

  05564	e59d3000	 ldr         r3, [sp]
  05568	e59d2004	 ldr         r2, [sp, #4]
  0556c	e58d3014	 str         r3, [sp, #0x14]
  05570	e3a03005	 mov         r3, #5
  05574	e0000392	 mul         r0, r2, r3
  05578	e59d1014	 ldr         r1, [sp, #0x14]
  0557c	e3a03005	 mov         r3, #5
  05580	e0832391	 umull       r2, r3, r1, r3
  05584	e0803003	 add         r3, r0, r3
  05588	e58d2000	 str         r2, [sp]
  0558c	e58d3004	 str         r3, [sp, #4]

; 2327 :     
; 2328 :     // now calculate how long (in seconds) it will take to transfer
; 2329 :     dwTransferTime /= pController->dwSDClockFrequency;

  05590	e59d3020	 ldr         r3, [sp, #0x20]
  05594	e2833c0d	 add         r3, r3, #0xD, 24
  05598	e283304c	 add         r3, r3, #0x4C
  0559c	e5932000	 ldr         r2, [r3]
  055a0	e59d0000	 ldr         r0, [sp]
  055a4	e59d1004	 ldr         r1, [sp, #4]
  055a8	e3a03000	 mov         r3, #0
  055ac	eb000000	 bl          __rt_udiv64by64
  055b0	e58d0000	 str         r0, [sp]
  055b4	e58d1004	 str         r1, [sp, #4]

; 2330 : 
; 2331 :     // add a 10 seconds constant delay
; 2332 :     dwTransferTime += TRANSFER_TIMEOUT_CONSTANT; 

  055b8	e59d2000	 ldr         r2, [sp]
  055bc	e59d3004	 ldr         r3, [sp, #4]
  055c0	e292200a	 adds        r2, r2, #0xA
  055c4	e2a33000	 adc         r3, r3, #0
  055c8	e58d2000	 str         r2, [sp]
  055cc	e58d3004	 str         r3, [sp, #4]

; 2333 : 
; 2334 :     // return the delay in milliseconds
; 2335 :     return (DWORD)(dwTransferTime * 1000);

  055d0	e59d2000	 ldr         r2, [sp]
  055d4	e3a03ffa	 mov         r3, #0xFA, 30
  055d8	e0030392	 mul         r3, r2, r3
  055dc	e58d3008	 str         r3, [sp, #8]

; 2336 : }

  055e0	e59d0008	 ldr         r0, [sp, #8]
  055e4	e28dd018	 add         sp, sp, #0x18
  055e8	e89d6000	 ldmia       sp, {sp, lr}
  055ec	e12fff1e	 bx          lr
  055f0		 |$M45289|

			 ENDP  ; |CalculateTransferTimeout|

	EXPORT	|??_C@_1CE@KKCHCOHK@?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAw?$AAr?$AAt?$AAn?$AA?3?$AA?5?$AA?$FL?$AA?$CF?$AAS?$AA?$FN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@FGEECGPI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@PFNHJMIN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@ECGKNCKB@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@JBDLHCPM@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@KKLLBAOO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@FIAGKBIM@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAg?$AAn?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@LMIGKDNL@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IG@MLMEEPCI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@MLLFABBN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IG@PDIANPAJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|HandleEndCommandInterrupt|

  000e8			 AREA	 |.pdata|, PDATA
|$T45330| DCD	|$LN78@HandleEndC|
	DCD	0xc0025a05
|$T45332| DCD	|$LN68@HandleEndC|
	DCD	0x40001201

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KKCHCOHK@?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAw?$AAr?$AAt?$AAn?$AA?3?$AA?5?$AA?$FL?$AA?$CF?$AAS?$AA?$FN?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "w"
	DCB	0x0, "r", 0x0, "t", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "["
	DCB	0x0, "%", 0x0, "S", 0x0, "]", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@FGEECGPI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AAi@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "W", 0x0, "R"
	DCB	0x0, "I", 0x0, "T", 0x0, "E", 0x0, " ", 0x0, "T", 0x0, "R"
	DCB	0x0, "A", 0x0, "N", 0x0, "S", 0x0, "F", 0x0, "E", 0x0, "R"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "s", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@PFNHJMIN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AAi@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "R", 0x0, "E"
	DCB	0x0, "A", 0x0, "D", 0x0, " ", 0x0, "T", 0x0, "R", 0x0, "A"
	DCB	0x0, "N", 0x0, "S", 0x0, "F", 0x0, "E", 0x0, "R", 0x0, " "
	DCB	0x0, "o", 0x0, "f", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "b", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "s"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e", 0x0, "s"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@ECGKNCKB@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "B", 0x0, "u", 0x0, "s"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "m"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@JBDLHCPM@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C"
	DCB	0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@KKLLBAOO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m"
	DCB	0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "s"
	DCB	0x0, " ", 0x0, "a", 0x0, " ", 0x0, "C", 0x0, "R", 0x0, "C"
	DCB	0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@FIAGKBIM@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAg?$AAn?$AAo?$AAr@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "g", 0x0, "n", 0x0, "o"
	DCB	0x0, "r", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "C"
	DCB	0x0, "R", 0x0, "C", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "C", 0x0, "M", 0x0, "D", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@LMIGKDNL@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "R", 0x0, "E", 0x0, "S"
	DCB	0x0, "P", 0x0, "O", 0x0, "N", 0x0, "S", 0x0, "E", 0x0, " "
	DCB	0x0, "T", 0x0, "I", 0x0, "M", 0x0, "E", 0x0, "O", 0x0, "U"
	DCB	0x0, "T", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@MLMEEPCI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m"
	DCB	0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, ",", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@MLLFABBN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "p", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "F", 0x0, "L", 0x0, "A"
	DCB	0x0, "S", 0x0, "H", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@PDIANPAJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@| DCB "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "E"
	DCB	0x0, "n", 0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "p"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m"
	DCB	0x0, "m", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, ",", 0x0, " ", 0x0, "F", 0x0, "L"
	DCB	0x0, "A", 0x0, "S", 0x0, "H", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00044			 AREA	 |.xdata|, DATA
|$T45328| DCD	0x1
	DCD	|$LN72@HandleEndC|
	DCD	|$LN73@HandleEndC|
	DCD	|$LN68@HandleEndC|
	DCD	|$LN69@HandleEndC|
; Function compile flags: /Odtp

  055f0			 AREA	 |.text|, CODE, ARM

  055f0	00000000	 DCD         |__C_specific_handler|
  055f4	00000000	 DCD         |$T45328|

  055f8		 |HandleEndCommandInterrupt| PROC

; 2345 : {

  055f8		 |$LN78@HandleEndC|
  055f8	e1a0c00d	 mov         r12, sp
  055fc	e92d0001	 stmdb       sp!, {r0}
  05600	e92d5800	 stmdb       sp!, {r11, r12, lr}
  05604	e28db00c	 add         r11, sp, #0xC
  05608	e24dd06c	 sub         sp, sp, #0x6C
  0560c		 |$LN76@HandleEndC|

; 2346 :     DWORD               statRegister;   // status register
; 2347 :     PSD_BUS_REQUEST     pRequest;       // the request to complete
; 2348 :     DWORD               regValue;       // intermediate reg value
; 2349 :     LONG                fifoCount;     // starting offset in response buffer
; 2350 :     PBYTE               pSrcPtr;
; 2351 : 
; 2352 :         // get the current request  
; 2353 :     pRequest = pController->pCurrentRequest;

  0560c	e59b3000	 ldr         r3, [r11]
  05610	e283301c	 add         r3, r3, #0x1C
  05614	e5933000	 ldr         r3, [r3]
  05618	e50b3070	 str         r3, [r11, #-0x70]

; 2354 : 
; 2355 :         // this should never happen because we mark the request as un-cancelable
; 2356 :     DEBUG_ASSERT(NULL != pRequest);

  0561c	e51b3070	 ldr         r3, [r11, #-0x70]
  05620	e3530000	 cmp         r3, #0
  05624	0a000002	 beq         |$LN43@HandleEndC|
  05628	e3a03001	 mov         r3, #1
  0562c	e50b3060	 str         r3, [r11, #-0x60]
  05630	ea000008	 b           |$LN44@HandleEndC|
  05634		 |$LN43@HandleEndC|
  05634	e3a03c09	 mov         r3, #9, 24
  05638	e3833034	 orr         r3, r3, #0x34
  0563c	e59f2958	 ldr         r2, [pc, #0x958]
  05640	e59f1928	 ldr         r1, [pc, #0x928]
  05644	e59f0948	 ldr         r0, [pc, #0x948]
  05648	eb000000	 bl          NKDbgPrintfW
  0564c	e6000010	 __debugbreak_ce
  05650	e3a03000	 mov         r3, #0
  05654	e50b3060	 str         r3, [r11, #-0x60]
  05658		 |$LN44@HandleEndC|

; 2357 :     if( pRequest == NULL )

  05658	e51b3070	 ldr         r3, [r11, #-0x70]
  0565c	e3530000	 cmp         r3, #0
  05660	1a000004	 bne         |$LN40@HandleEndC|

; 2358 :     {
; 2359 :         END_CMD_INTERRUPT_OFF(pController);

  05664	e3a02004	 mov         r2, #4
  05668	e3e01000	 mvn         r1, #0
  0566c	e59b0000	 ldr         r0, [r11]
  05670	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2360 :         return;

  05674	ea000236	 b           |$LN41@HandleEndC|
  05678		 |$LN40@HandleEndC|

; 2361 :     }
; 2362 : 
; 2363 :         // get the stat register
; 2364 :     statRegister = READ_MMC_REGISTER_DWORD(pController, MMC_STAT);

  05678	e3a01004	 mov         r1, #4
  0567c	e59b0000	 ldr         r0, [r11]
  05680	eb000000	 bl          READ_MMC_REGISTER_DWORD
  05684	e50b005c	 str         r0, [r11, #-0x5C]
  05688	e51b305c	 ldr         r3, [r11, #-0x5C]
  0568c	e50b3068	 str         r3, [r11, #-0x68]

; 2365 : 
; 2366 :         // mask the END_CMD interrupt, the command is complete , however
; 2367 :         // reading the STAT register doesn't clear the interrupt
; 2368 :         // we need to just mask this interrupt out
; 2369 :     END_CMD_INTERRUPT_OFF(pController);

  05690	e3a02004	 mov         r2, #4
  05694	e3e01000	 mvn         r1, #0
  05698	e59b0000	 ldr         r0, [r11]
  0569c	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2370 :         // mask the RESPONSE_ERROR interrupt
; 2371 :     PROGRAM_RESPONSE_ERROR_INTERRUPT_OFF(pController);

  056a0	e3a02c02	 mov         r2, #2, 24
  056a4	e3e01000	 mvn         r1, #0
  056a8	e59b0000	 ldr         r0, [r11]
  056ac	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2372 :        
; 2373 :     if (statRegister & MMC_STAT_FLASH_ERROR) {

  056b0	e51b3068	 ldr         r3, [r11, #-0x68]
  056b4	e3130c02	 tst         r3, #2, 24
  056b8	0a00003d	 beq         |$LN39@HandleEndC|

; 2374 :         ASSERT(0);

  056bc	e3a03c09	 mov         r3, #9, 24
  056c0	e3833046	 orr         r3, r3, #0x46
  056c4	e59f28d0	 ldr         r2, [pc, #0x8D0]
  056c8	e59f18c8	 ldr         r1, [pc, #0x8C8]
  056cc	e59f08c0	 ldr         r0, [pc, #0x8C0]
  056d0	eb000000	 bl          NKDbgPrintfW
  056d4	e6000010	 __debugbreak_ce

; 2375 :         regValue = READ_MMC_REGISTER_DWORD(pController, MMC_CMD);

  056d8	e3a01030	 mov         r1, #0x30
  056dc	e59b0000	 ldr         r0, [r11]
  056e0	eb000000	 bl          READ_MMC_REGISTER_DWORD
  056e4	e50b0058	 str         r0, [r11, #-0x58]
  056e8	e51b3058	 ldr         r3, [r11, #-0x58]
  056ec	e50b3074	 str         r3, [r11, #-0x74]

; 2376 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("HandleEndCommandInterrupt: response for command %d , FLASH ERROR \n"),regValue));

  056f0	e59f3878	 ldr         r3, [pc, #0x878]
  056f4	e5933440	 ldr         r3, [r3, #0x440]
  056f8	e3130901	 tst         r3, #1, 18
  056fc	0a000005	 beq         |$LN45@HandleEndC|
  05700	e51b1074	 ldr         r1, [r11, #-0x74]
  05704	e59f0898	 ldr         r0, [pc, #0x898]
  05708	eb000000	 bl          SDCardDebugOutput
  0570c	e3a03001	 mov         r3, #1
  05710	e50b3054	 str         r3, [r11, #-0x54]
  05714	ea000001	 b           |$LN46@HandleEndC|
  05718		 |$LN45@HandleEndC|
  05718	e3a03000	 mov         r3, #0
  0571c	e50b3054	 str         r3, [r11, #-0x54]
  05720		 |$LN46@HandleEndC|

; 2377 : 
; 2378 :         if( !( pController->fClockAlwaysOn || 
; 2379 :                ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  05720	e59b3000	 ldr         r3, [r11]
  05724	e2833d35	 add         r3, r3, #0x35, 26
  05728	e5933000	 ldr         r3, [r3]
  0572c	e3530000	 cmp         r3, #0
  05730	1a00000d	 bne         |$LN38@HandleEndC|
  05734	e59b3000	 ldr         r3, [r11]
  05738	e2833c0d	 add         r3, r3, #0xD, 24
  0573c	e2833044	 add         r3, r3, #0x44
  05740	e5933000	 ldr         r3, [r3]
  05744	e3530000	 cmp         r3, #0
  05748	0a000005	 beq         |$LN37@HandleEndC|
  0574c	e59b3000	 ldr         r3, [r11]
  05750	e2833c0d	 add         r3, r3, #0xD, 24
  05754	e2833034	 add         r3, r3, #0x34
  05758	e5933000	 ldr         r3, [r3]
  0575c	e3530000	 cmp         r3, #0
  05760	1a000001	 bne         |$LN38@HandleEndC|
  05764		 |$LN37@HandleEndC|

; 2380 :         {
; 2381 :                 // turn off the clock
; 2382 :             SDClockOff(pController);

  05764	e59b0000	 ldr         r0, [r11]
  05768	eb000000	 bl          SDClockOff
  0576c		 |$LN38@HandleEndC|

; 2383 :         }
; 2384 :             // complete the current request with a timeout
; 2385 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleEndCommandInterrupt reports FLASH ERROR\n")));

  0576c	e59f37fc	 ldr         r3, [pc, #0x7FC]
  05770	e5933440	 ldr         r3, [r3, #0x440]
  05774	e3130080	 tst         r3, #0x80
  05778	0a000004	 beq         |$LN47@HandleEndC|
  0577c	e59f081c	 ldr         r0, [pc, #0x81C]
  05780	eb000000	 bl          SDCardDebugOutput
  05784	e3a03001	 mov         r3, #1
  05788	e50b3050	 str         r3, [r11, #-0x50]
  0578c	ea000001	 b           |$LN48@HandleEndC|
  05790		 |$LN47@HandleEndC|
  05790	e3a03000	 mov         r3, #0
  05794	e50b3050	 str         r3, [r11, #-0x50]
  05798		 |$LN48@HandleEndC|

; 2386 :         IndicateBusRequestComplete(pController->pHCContext,
; 2387 :                                         pRequest ,
; 2388 :                                         SD_API_STATUS_UNSUCCESSFUL);

  05798	e3a0210f	 mov         r2, #0xF, 2
  0579c	e51b1070	 ldr         r1, [r11, #-0x70]
  057a0	e59b3000	 ldr         r3, [r11]
  057a4	e2833018	 add         r3, r3, #0x18
  057a8	e5930000	 ldr         r0, [r3]
  057ac	eb000000	 bl          IndicateBusRequestComplete

; 2389 :         return;

  057b0	ea0001e7	 b           |$LN41@HandleEndC|
  057b4		 |$LN39@HandleEndC|

; 2390 :     }
; 2391 : 
; 2392 :     if (statRegister & MMC_STAT_SPI_WR_ERROR) {

  057b4	e51b3068	 ldr         r3, [r11, #-0x68]
  057b8	e3130b01	 tst         r3, #1, 22
  057bc	0a000006	 beq         |$LN36@HandleEndC|

; 2393 :         ASSERT(0);

  057c0	e3a03c09	 mov         r3, #9, 24
  057c4	e3833059	 orr         r3, r3, #0x59
  057c8	e59f27cc	 ldr         r2, [pc, #0x7CC]
  057cc	e59f17c4	 ldr         r1, [pc, #0x7C4]
  057d0	e59f07bc	 ldr         r0, [pc, #0x7BC]
  057d4	eb000000	 bl          NKDbgPrintfW
  057d8	e6000010	 __debugbreak_ce
  057dc		 |$LN36@HandleEndC|

; 2394 :     }
; 2395 : 
; 2396 :     if (statRegister & MMC_STAT_RD_STALLED) {

  057dc	e51b3068	 ldr         r3, [r11, #-0x68]
  057e0	e3130901	 tst         r3, #1, 18
  057e4	0a000006	 beq         |$LN35@HandleEndC|

; 2397 :         ASSERT(0);

  057e8	e3a03c09	 mov         r3, #9, 24
  057ec	e383305d	 orr         r3, r3, #0x5D
  057f0	e59f27a4	 ldr         r2, [pc, #0x7A4]
  057f4	e59f179c	 ldr         r1, [pc, #0x79C]
  057f8	e59f0794	 ldr         r0, [pc, #0x794]
  057fc	eb000000	 bl          NKDbgPrintfW
  05800	e6000010	 __debugbreak_ce
  05804		 |$LN35@HandleEndC|

; 2398 :     }
; 2399 : 
; 2400 :     if (statRegister & MMC_STAT_RESPONSE_TIMEOUT) {

  05804	e51b3068	 ldr         r3, [r11, #-0x68]
  05808	e3130002	 tst         r3, #2
  0580c	0a000039	 beq         |$LN34@HandleEndC|

; 2401 :         regValue = READ_MMC_REGISTER_DWORD(pController, MMC_CMD);

  05810	e3a01030	 mov         r1, #0x30
  05814	e59b0000	 ldr         r0, [r11]
  05818	eb000000	 bl          READ_MMC_REGISTER_DWORD
  0581c	e50b004c	 str         r0, [r11, #-0x4C]
  05820	e51b304c	 ldr         r3, [r11, #-0x4C]
  05824	e50b3074	 str         r3, [r11, #-0x74]

; 2402 :         regValue &= 0x3F;

  05828	e51b3074	 ldr         r3, [r11, #-0x74]
  0582c	e203303f	 and         r3, r3, #0x3F
  05830	e50b3074	 str         r3, [r11, #-0x74]

; 2403 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("HandleEndCommandInterrupt: response for command %d , timed - out \n"),regValue));

  05834	e59f3734	 ldr         r3, [pc, #0x734]
  05838	e5933440	 ldr         r3, [r3, #0x440]
  0583c	e3130901	 tst         r3, #1, 18
  05840	0a000005	 beq         |$LN49@HandleEndC|
  05844	e51b1074	 ldr         r1, [r11, #-0x74]
  05848	e59f0740	 ldr         r0, [pc, #0x740]
  0584c	eb000000	 bl          SDCardDebugOutput
  05850	e3a03001	 mov         r3, #1
  05854	e50b3048	 str         r3, [r11, #-0x48]
  05858	ea000001	 b           |$LN50@HandleEndC|
  0585c		 |$LN49@HandleEndC|
  0585c	e3a03000	 mov         r3, #0
  05860	e50b3048	 str         r3, [r11, #-0x48]
  05864		 |$LN50@HandleEndC|

; 2404 : 
; 2405 :         if( !( pController->fClockAlwaysOn || 
; 2406 :                ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  05864	e59b3000	 ldr         r3, [r11]
  05868	e2833d35	 add         r3, r3, #0x35, 26
  0586c	e5933000	 ldr         r3, [r3]
  05870	e3530000	 cmp         r3, #0
  05874	1a00000d	 bne         |$LN33@HandleEndC|
  05878	e59b3000	 ldr         r3, [r11]
  0587c	e2833c0d	 add         r3, r3, #0xD, 24
  05880	e2833044	 add         r3, r3, #0x44
  05884	e5933000	 ldr         r3, [r3]
  05888	e3530000	 cmp         r3, #0
  0588c	0a000005	 beq         |$LN32@HandleEndC|
  05890	e59b3000	 ldr         r3, [r11]
  05894	e2833c0d	 add         r3, r3, #0xD, 24
  05898	e2833034	 add         r3, r3, #0x34
  0589c	e5933000	 ldr         r3, [r3]
  058a0	e3530000	 cmp         r3, #0
  058a4	1a000001	 bne         |$LN33@HandleEndC|
  058a8		 |$LN32@HandleEndC|

; 2407 :         {
; 2408 :                 // turn off the clock
; 2409 :             SDClockOff(pController);

  058a8	e59b0000	 ldr         r0, [r11]
  058ac	eb000000	 bl          SDClockOff
  058b0		 |$LN33@HandleEndC|

; 2410 :         }
; 2411 :             // complete the current request with a timeout
; 2412 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleEndCommandInterrupt reports RESPONSE TIMEOUT\n")));

  058b0	e59f36b8	 ldr         r3, [pc, #0x6B8]
  058b4	e5933440	 ldr         r3, [r3, #0x440]
  058b8	e3130080	 tst         r3, #0x80
  058bc	0a000004	 beq         |$LN51@HandleEndC|
  058c0	e59f06c4	 ldr         r0, [pc, #0x6C4]
  058c4	eb000000	 bl          SDCardDebugOutput
  058c8	e3a03001	 mov         r3, #1
  058cc	e50b3044	 str         r3, [r11, #-0x44]
  058d0	ea000001	 b           |$LN52@HandleEndC|
  058d4		 |$LN51@HandleEndC|
  058d4	e3a03000	 mov         r3, #0
  058d8	e50b3044	 str         r3, [r11, #-0x44]
  058dc		 |$LN52@HandleEndC|

; 2413 :         IndicateBusRequestComplete(pController->pHCContext,
; 2414 :                                         pRequest ,
; 2415 :                                         SD_API_STATUS_RESPONSE_TIMEOUT);

  058dc	e3a02153	 mov         r2, #0x53, 2
  058e0	e51b1070	 ldr         r1, [r11, #-0x70]
  058e4	e59b3000	 ldr         r3, [r11]
  058e8	e2833018	 add         r3, r3, #0x18
  058ec	e5930000	 ldr         r0, [r3]
  058f0	eb000000	 bl          IndicateBusRequestComplete

; 2416 :         return;

  058f4	ea000196	 b           |$LN41@HandleEndC|
  058f8		 |$LN34@HandleEndC|

; 2417 :     }
; 2418 : 
; 2419 :     if (statRegister & MMC_STAT_RESPONSE_CRC_ERROR)   {

  058f8	e51b3068	 ldr         r3, [r11, #-0x68]
  058fc	e3130020	 tst         r3, #0x20
  05900	0a000060	 beq         |$LN31@HandleEndC|

; 2420 :       // Intel PXA27x has bug calculating CRC for CMD2, CMD9, CMD10.
; 2421 :       // See "Intel(R) PXA27x Family Processor, Specification Update
; 2422 :       // - Revision 001" of April 2004 (order number 280071-001), 
; 2423 :       // Errata "E42" for details.
; 2424 :       // The recommended workaround is to ignore the error.
; 2425 :       // Note: Because the CRC just fails when bit 128 is set, one
; 2426 :       // could ignore the CRC only in instances where that bit was
; 2427 :       // set.  One could also calculate the CRC for the case where
; 2428 :       // bit 128 is set.
; 2429 :       // The developer chose not to spend time implementing these
; 2430 :       // workaround, and took the simple way out.
; 2431 :       // If there are problems with a device, especially during the
; 2432 :       // initial device handshaking, then adding these workarounds
; 2433 :       // would make more sense.
; 2434 :       //
; 2435 :       // Added CMD3 to list of CRC errors to ignore because it also has CRC errors!
; 2436 :       if ((pRequest->CommandCode == SD_CMD_ALL_SEND_CID) ||   // CMD2
; 2437 :          (pRequest->CommandCode == SD_CMD_MMC_SET_RCA) ||   // CMD3
; 2438 :          (pRequest->CommandCode == SD_CMD_SEND_CSD) ||      // CMD9
; 2439 :          (pRequest->CommandCode == SD_CMD_SEND_CID)) {      // CMD10

  05904	e51b3070	 ldr         r3, [r11, #-0x70]
  05908	e2833014	 add         r3, r3, #0x14
  0590c	e5d33000	 ldrb        r3, [r3]
  05910	e3530002	 cmp         r3, #2
  05914	0a00000e	 beq         |$LN29@HandleEndC|
  05918	e51b3070	 ldr         r3, [r11, #-0x70]
  0591c	e2833014	 add         r3, r3, #0x14
  05920	e5d33000	 ldrb        r3, [r3]
  05924	e3530003	 cmp         r3, #3
  05928	0a000009	 beq         |$LN29@HandleEndC|
  0592c	e51b3070	 ldr         r3, [r11, #-0x70]
  05930	e2833014	 add         r3, r3, #0x14
  05934	e5d33000	 ldrb        r3, [r3]
  05938	e3530009	 cmp         r3, #9
  0593c	0a000004	 beq         |$LN29@HandleEndC|
  05940	e51b3070	 ldr         r3, [r11, #-0x70]
  05944	e2833014	 add         r3, r3, #0x14
  05948	e5d33000	 ldrb        r3, [r3]
  0594c	e353000a	 cmp         r3, #0xA
  05950	1a000012	 bne         |$LN30@HandleEndC|
  05954		 |$LN29@HandleEndC|

; 2440 :          // If this is one of the commands that is affected by the
; 2441 :          // errata mentioned above, then clear the status register
; 2442 :          // of this error and continue as if it didn't occur.
; 2443 :          statRegister &= ~MMC_STAT_RESPONSE_CRC_ERROR;

  05954	e51b2068	 ldr         r2, [r11, #-0x68]
  05958	e3e03020	 mvn         r3, #0x20
  0595c	e0023003	 and         r3, r2, r3
  05960	e50b3068	 str         r3, [r11, #-0x68]

; 2444 :          DbgPrintZo(SDCARD_ZONE_ERROR, 
; 2445 :                   (TEXT("HandleEndCommandInterrupt: Ignoring CRC ERROR for CMD%d\n"), pRequest->CommandCode));

  05964	e59f3604	 ldr         r3, [pc, #0x604]
  05968	e5933440	 ldr         r3, [r3, #0x440]
  0596c	e3130902	 tst         r3, #2, 18
  05970	0a000007	 beq         |$LN53@HandleEndC|
  05974	e51b3070	 ldr         r3, [r11, #-0x70]
  05978	e2833014	 add         r3, r3, #0x14
  0597c	e5d31000	 ldrb        r1, [r3]
  05980	e59f0600	 ldr         r0, [pc, #0x600]
  05984	eb000000	 bl          SDCardDebugOutput
  05988	e3a03001	 mov         r3, #1
  0598c	e50b3040	 str         r3, [r11, #-0x40]
  05990	ea000001	 b           |$LN54@HandleEndC|
  05994		 |$LN53@HandleEndC|
  05994	e3a03000	 mov         r3, #0
  05998	e50b3040	 str         r3, [r11, #-0x40]
  0599c		 |$LN54@HandleEndC|

; 2446 :       }
; 2447 :       else

  0599c	ea000039	 b           |$LN28@HandleEndC|
  059a0		 |$LN30@HandleEndC|

; 2448 :       {
; 2449 :             // Report the CRC error and fail.
; 2450 :             regValue = READ_MMC_REGISTER_DWORD(pController, MMC_CMD);

  059a0	e3a01030	 mov         r1, #0x30
  059a4	e59b0000	 ldr         r0, [r11]
  059a8	eb000000	 bl          READ_MMC_REGISTER_DWORD
  059ac	e50b003c	 str         r0, [r11, #-0x3C]
  059b0	e51b303c	 ldr         r3, [r11, #-0x3C]
  059b4	e50b3074	 str         r3, [r11, #-0x74]

; 2451 :             regValue &= 0x3F;

  059b8	e51b3074	 ldr         r3, [r11, #-0x74]
  059bc	e203303f	 and         r3, r3, #0x3F
  059c0	e50b3074	 str         r3, [r11, #-0x74]

; 2452 : 
; 2453 :             if( !( pController->fClockAlwaysOn || 
; 2454 :                    ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  059c4	e59b3000	 ldr         r3, [r11]
  059c8	e2833d35	 add         r3, r3, #0x35, 26
  059cc	e5933000	 ldr         r3, [r3]
  059d0	e3530000	 cmp         r3, #0
  059d4	1a00000d	 bne         |$LN27@HandleEndC|
  059d8	e59b3000	 ldr         r3, [r11]
  059dc	e2833c0d	 add         r3, r3, #0xD, 24
  059e0	e2833044	 add         r3, r3, #0x44
  059e4	e5933000	 ldr         r3, [r3]
  059e8	e3530000	 cmp         r3, #0
  059ec	0a000005	 beq         |$LN26@HandleEndC|
  059f0	e59b3000	 ldr         r3, [r11]
  059f4	e2833c0d	 add         r3, r3, #0xD, 24
  059f8	e2833034	 add         r3, r3, #0x34
  059fc	e5933000	 ldr         r3, [r3]
  05a00	e3530000	 cmp         r3, #0
  05a04	1a000001	 bne         |$LN27@HandleEndC|
  05a08		 |$LN26@HandleEndC|

; 2455 :             {
; 2456 :                     // turn off the clock
; 2457 :                 SDClockOff(pController);

  05a08	e59b0000	 ldr         r0, [r11]
  05a0c	eb000000	 bl          SDClockOff
  05a10		 |$LN27@HandleEndC|

; 2458 :             }
; 2459 :             DbgPrintZo(SDCARD_ZONE_ERROR, (TEXT("HandleEndCommandInterrupt: response for command %d , contains a CRC error \n"), regValue));

  05a10	e59f3558	 ldr         r3, [pc, #0x558]
  05a14	e5933440	 ldr         r3, [r3, #0x440]
  05a18	e3130902	 tst         r3, #2, 18
  05a1c	0a000005	 beq         |$LN55@HandleEndC|
  05a20	e51b1074	 ldr         r1, [r11, #-0x74]
  05a24	e59f0558	 ldr         r0, [pc, #0x558]
  05a28	eb000000	 bl          SDCardDebugOutput
  05a2c	e3a03001	 mov         r3, #1
  05a30	e50b3038	 str         r3, [r11, #-0x38]
  05a34	ea000001	 b           |$LN56@HandleEndC|
  05a38		 |$LN55@HandleEndC|
  05a38	e3a03000	 mov         r3, #0
  05a3c	e50b3038	 str         r3, [r11, #-0x38]
  05a40		 |$LN56@HandleEndC|

; 2460 :                 // complete the current request with a CRC error status
; 2461 :             DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleEndCommandInterrupt reports CRC ERROR\n")));

  05a40	e59f3528	 ldr         r3, [pc, #0x528]
  05a44	e5933440	 ldr         r3, [r3, #0x440]
  05a48	e3130080	 tst         r3, #0x80
  05a4c	0a000004	 beq         |$LN57@HandleEndC|
  05a50	e59f0528	 ldr         r0, [pc, #0x528]
  05a54	eb000000	 bl          SDCardDebugOutput
  05a58	e3a03001	 mov         r3, #1
  05a5c	e50b3034	 str         r3, [r11, #-0x34]
  05a60	ea000001	 b           |$LN58@HandleEndC|
  05a64		 |$LN57@HandleEndC|
  05a64	e3a03000	 mov         r3, #0
  05a68	e50b3034	 str         r3, [r11, #-0x34]
  05a6c		 |$LN58@HandleEndC|

; 2462 :             IndicateBusRequestComplete(pController->pHCContext,
; 2463 :                                             pRequest ,
; 2464 :                                             SD_API_STATUS_CRC_ERROR);

  05a6c	e3a02137	 mov         r2, #0x37, 2
  05a70	e51b1070	 ldr         r1, [r11, #-0x70]
  05a74	e59b3000	 ldr         r3, [r11]
  05a78	e2833018	 add         r3, r3, #0x18
  05a7c	e5930000	 ldr         r0, [r3]
  05a80	eb000000	 bl          IndicateBusRequestComplete

; 2465 :             return;

  05a84	ea000132	 b           |$LN41@HandleEndC|
  05a88		 |$LN28@HandleEndC|
  05a88		 |$LN31@HandleEndC|

; 2466 :         }
; 2467 :     }
; 2468 : 
; 2469 :    
; 2470 :     if (NoResponse == pRequest->CommandResponse.ResponseType) {

  05a88	e51b3070	 ldr         r3, [r11, #-0x70]
  05a8c	e283301c	 add         r3, r3, #0x1C
  05a90	e5933000	 ldr         r3, [r3]
  05a94	e3530000	 cmp         r3, #0
  05a98	1a000002	 bne         |$LN25@HandleEndC|

; 2471 :         pSrcPtr = NULL;

  05a9c	e3a03000	 mov         r3, #0
  05aa0	e50b306c	 str         r3, [r11, #-0x6C]
  05aa4	ea00000f	 b           |$LN24@HandleEndC|
  05aa8		 |$LN25@HandleEndC|

; 2472 :     } else if (ResponseR2 == pRequest->CommandResponse.ResponseType) {

  05aa8	e51b3070	 ldr         r3, [r11, #-0x70]
  05aac	e283301c	 add         r3, r3, #0x1C
  05ab0	e5933000	 ldr         r3, [r3]
  05ab4	e3530003	 cmp         r3, #3
  05ab8	1a000005	 bne         |$LN23@HandleEndC|

; 2473 :             // 8 words - 128 bits
; 2474 :         fifoCount = SDH_RESPONSE_FIFO_DEPTH;

  05abc	e3a03008	 mov         r3, #8
  05ac0	e50b3078	 str         r3, [r11, #-0x78]

; 2475 :         pSrcPtr = pRequest->CommandResponse.ResponseBuffer + sizeof(pRequest->CommandResponse.ResponseBuffer);

  05ac4	e51b3070	 ldr         r3, [r11, #-0x70]
  05ac8	e2833031	 add         r3, r3, #0x31
  05acc	e50b306c	 str         r3, [r11, #-0x6C]

; 2476 :     } else {

  05ad0	ea000004	 b           |$LN22@HandleEndC|
  05ad4		 |$LN23@HandleEndC|

; 2477 :         // 3 WORDS - 48 bits
; 2478 :         fifoCount = 3;

  05ad4	e3a03003	 mov         r3, #3
  05ad8	e50b3078	 str         r3, [r11, #-0x78]

; 2479 :         pSrcPtr = pRequest->CommandResponse.ResponseBuffer + 3*sizeof(WORD);

  05adc	e51b3070	 ldr         r3, [r11, #-0x70]
  05ae0	e2833026	 add         r3, r3, #0x26
  05ae4	e50b306c	 str         r3, [r11, #-0x6C]
  05ae8		 |$LN22@HandleEndC|
  05ae8		 |$LN24@HandleEndC|

; 2480 :     }
; 2481 : 
; 2482 :     if (NoResponse != pRequest->CommandResponse.ResponseType && pSrcPtr!=NULL) {

  05ae8	e51b3070	 ldr         r3, [r11, #-0x70]
  05aec	e283301c	 add         r3, r3, #0x1C
  05af0	e5933000	 ldr         r3, [r3]
  05af4	e3530000	 cmp         r3, #0
  05af8	0a00001d	 beq         |$LN21@HandleEndC|
  05afc	e51b306c	 ldr         r3, [r11, #-0x6C]
  05b00	e3530000	 cmp         r3, #0
  05b04	0a00001a	 beq         |$LN21@HandleEndC|
  05b08		 |$LN20@HandleEndC|

; 2483 :         while (fifoCount--) {

  05b08	e51b3078	 ldr         r3, [r11, #-0x78]
  05b0c	e3530000	 cmp         r3, #0
  05b10	e51b3078	 ldr         r3, [r11, #-0x78]
  05b14	e2433001	 sub         r3, r3, #1
  05b18	e50b3078	 str         r3, [r11, #-0x78]
  05b1c	0a000014	 beq         |$LN19@HandleEndC|

; 2484 :             union {
; 2485 :                 WORD wDataWord;
; 2486 :                 BYTE bDataByte[2];
; 2487 :             } data;
; 2488 :             data.wDataWord = (USHORT)(READ_MMC_REGISTER_DWORD(pController, MMC_RES));

  05b20	e3a0103c	 mov         r1, #0x3C
  05b24	e59b0000	 ldr         r0, [r11]
  05b28	eb000000	 bl          READ_MMC_REGISTER_DWORD
  05b2c	e50b0030	 str         r0, [r11, #-0x30]
  05b30	e51b3030	 ldr         r3, [r11, #-0x30]
  05b34	e1a03803	 mov         r3, r3, lsl #16
  05b38	e1a03823	 mov         r3, r3, lsr #16
  05b3c	e14b36b4	 strh        r3, [r11, #-0x64]

; 2489 :             *(--pSrcPtr)=data.bDataByte[1];

  05b40	e51b306c	 ldr         r3, [r11, #-0x6C]
  05b44	e2433001	 sub         r3, r3, #1
  05b48	e50b306c	 str         r3, [r11, #-0x6C]
  05b4c	e55b2063	 ldrb        r2, [r11, #-0x63]
  05b50	e51b306c	 ldr         r3, [r11, #-0x6C]
  05b54	e5c32000	 strb        r2, [r3]

; 2490 :             *(--pSrcPtr)=data.bDataByte[0];

  05b58	e51b306c	 ldr         r3, [r11, #-0x6C]
  05b5c	e2433001	 sub         r3, r3, #1
  05b60	e50b306c	 str         r3, [r11, #-0x6C]
  05b64	e55b2064	 ldrb        r2, [r11, #-0x64]
  05b68	e51b306c	 ldr         r3, [r11, #-0x6C]
  05b6c	e5c32000	 strb        r2, [r3]

; 2491 :         }

  05b70	eaffffe4	 b           |$LN20@HandleEndC|
  05b74		 |$LN19@HandleEndC|
  05b74		 |$LN21@HandleEndC|

; 2492 :     }
; 2493 : 
; 2494 :         // check for command/response only
; 2495 :     if (SD_COMMAND == pRequest->TransferClass) {

  05b74	e51b3070	 ldr         r3, [r11, #-0x70]
  05b78	e2833010	 add         r3, r3, #0x10
  05b7c	e5933000	 ldr         r3, [r3]
  05b80	e3530002	 cmp         r3, #2
  05b84	1a000042	 bne         |$LN18@HandleEndC|

; 2496 : 
; 2497 :             // check to see if this request was a response with busy
; 2498 :         if (ResponseR1b == pRequest->CommandResponse.ResponseType) { 

  05b88	e51b3070	 ldr         r3, [r11, #-0x70]
  05b8c	e283301c	 add         r3, r3, #0x1C
  05b90	e5933000	 ldr         r3, [r3]
  05b94	e3530002	 cmp         r3, #2
  05b98	1a000014	 bne         |$LN17@HandleEndC|
  05b9c		 |$LN16@HandleEndC|

; 2499 : 
; 2500 :             while( ( !( statRegister & MMC_STAT_PROGRAM_DONE ) ) &&
; 2501 :                    ( !( pController->DriverShutdown ) ) &&
; 2502 :                    IsCardPresent() )

  05b9c	e51b3068	 ldr         r3, [r11, #-0x68]
  05ba0	e3130a01	 tst         r3, #1, 20
  05ba4	1a000011	 bne         |$LN15@HandleEndC|
  05ba8	e59b3000	 ldr         r3, [r11]
  05bac	e2833c0a	 add         r3, r3, #0xA, 24
  05bb0	e28330d4	 add         r3, r3, #0xD4
  05bb4	e5933000	 ldr         r3, [r3]
  05bb8	e3530000	 cmp         r3, #0
  05bbc	1a00000b	 bne         |$LN15@HandleEndC|
  05bc0	eb000000	 bl          IsCardPresent
  05bc4	e50b002c	 str         r0, [r11, #-0x2C]
  05bc8	e51b302c	 ldr         r3, [r11, #-0x2C]
  05bcc	e3530000	 cmp         r3, #0
  05bd0	0a000006	 beq         |$LN15@HandleEndC|

; 2503 :             {
; 2504 :                 statRegister = READ_MMC_REGISTER_DWORD(pController, MMC_STAT);

  05bd4	e3a01004	 mov         r1, #4
  05bd8	e59b0000	 ldr         r0, [r11]
  05bdc	eb000000	 bl          READ_MMC_REGISTER_DWORD
  05be0	e50b0028	 str         r0, [r11, #-0x28]
  05be4	e51b3028	 ldr         r3, [r11, #-0x28]
  05be8	e50b3068	 str         r3, [r11, #-0x68]

; 2505 :             }

  05bec	eaffffea	 b           |$LN16@HandleEndC|
  05bf0		 |$LN15@HandleEndC|
  05bf0		 |$LN17@HandleEndC|

; 2506 :         }
; 2507 : 
; 2508 :         if( !( pController->fClockAlwaysOn || 
; 2509 :                ( pController->fClockOnIfInterruptsEnabled && pController->fSDIOEnabled ) ) )

  05bf0	e59b3000	 ldr         r3, [r11]
  05bf4	e2833d35	 add         r3, r3, #0x35, 26
  05bf8	e5933000	 ldr         r3, [r3]
  05bfc	e3530000	 cmp         r3, #0
  05c00	1a00000d	 bne         |$LN14@HandleEndC|
  05c04	e59b3000	 ldr         r3, [r11]
  05c08	e2833c0d	 add         r3, r3, #0xD, 24
  05c0c	e2833044	 add         r3, r3, #0x44
  05c10	e5933000	 ldr         r3, [r3]
  05c14	e3530000	 cmp         r3, #0
  05c18	0a000005	 beq         |$LN13@HandleEndC|
  05c1c	e59b3000	 ldr         r3, [r11]
  05c20	e2833c0d	 add         r3, r3, #0xD, 24
  05c24	e2833034	 add         r3, r3, #0x34
  05c28	e5933000	 ldr         r3, [r3]
  05c2c	e3530000	 cmp         r3, #0
  05c30	1a000001	 bne         |$LN14@HandleEndC|
  05c34		 |$LN13@HandleEndC|

; 2510 :         {
; 2511 :                 // complete the current request here, there's no data phase
; 2512 :                 // turn off the clock
; 2513 :             SDClockOff(pController);

  05c34	e59b0000	 ldr         r0, [r11]
  05c38	eb000000	 bl          SDClockOff
  05c3c		 |$LN14@HandleEndC|

; 2514 :         }
; 2515 : 
; 2516 :         SetCurrentState(pController, CommandComplete);

  05c3c	e59b3000	 ldr         r3, [r11]
  05c40	e2832ecf	 add         r2, r3, #0xCF, 28
  05c44	e3a03002	 mov         r3, #2
  05c48	e5823000	 str         r3, [r2]

; 2517 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleEndCommandInterrupt reports Bus Request Completed\n")));

  05c4c	e59f331c	 ldr         r3, [pc, #0x31C]
  05c50	e5933440	 ldr         r3, [r3, #0x440]
  05c54	e3130080	 tst         r3, #0x80
  05c58	0a000004	 beq         |$LN59@HandleEndC|
  05c5c	e59f0318	 ldr         r0, [pc, #0x318]
  05c60	eb000000	 bl          SDCardDebugOutput
  05c64	e3a03001	 mov         r3, #1
  05c68	e50b3024	 str         r3, [r11, #-0x24]
  05c6c	ea000001	 b           |$LN60@HandleEndC|
  05c70		 |$LN59@HandleEndC|
  05c70	e3a03000	 mov         r3, #0
  05c74	e50b3024	 str         r3, [r11, #-0x24]
  05c78		 |$LN60@HandleEndC|

; 2518 :         IndicateBusRequestComplete(pController->pHCContext,
; 2519 :                                         pRequest ,
; 2520 :                                         SD_API_STATUS_SUCCESS);    

  05c78	e3a02000	 mov         r2, #0
  05c7c	e51b1070	 ldr         r1, [r11, #-0x70]
  05c80	e59b3000	 ldr         r3, [r11]
  05c84	e2833018	 add         r3, r3, #0x18
  05c88	e5930000	 ldr         r0, [r3]
  05c8c	eb000000	 bl          IndicateBusRequestComplete

; 2521 :     } else {

  05c90	ea0000af	 b           |$LN12@HandleEndC|
  05c94		 |$LN18@HandleEndC|

; 2522 : 
; 2523 :         // set the transfer timeout
; 2524 :         pController->dwControllerIstTimeout = CalculateTransferTimeout(pController, pRequest);

  05c94	e51b1070	 ldr         r1, [r11, #-0x70]
  05c98	e59b0000	 ldr         r0, [r11]
  05c9c	eb000000	 bl          CalculateTransferTimeout
  05ca0	e50b0020	 str         r0, [r11, #-0x20]
  05ca4	e59b3000	 ldr         r3, [r11]
  05ca8	e283203c	 add         r2, r3, #0x3C
  05cac	e51b3020	 ldr         r3, [r11, #-0x20]
  05cb0	e5823000	 str         r3, [r2]

; 2525 :         if (TRANSFER_IS_READ(pRequest)){   

  05cb4	e51b3070	 ldr         r3, [r11, #-0x70]
  05cb8	e2833010	 add         r3, r3, #0x10
  05cbc	e5933000	 ldr         r3, [r3]
  05cc0	e3530000	 cmp         r3, #0
  05cc4	1a000041	 bne         |$LN11@HandleEndC|

; 2526 :             DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleEndCommandInterrupt starting READ TRANSFER of %d blocks of %d bytes\n"), pRequest->NumBlocks, pRequest->BlockSize ));

  05cc8	e59f32a0	 ldr         r3, [pc, #0x2A0]
  05ccc	e5933440	 ldr         r3, [r3, #0x440]
  05cd0	e3130080	 tst         r3, #0x80
  05cd4	0a00000a	 beq         |$LN61@HandleEndC|
  05cd8	e51b3070	 ldr         r3, [r11, #-0x70]
  05cdc	e2833040	 add         r3, r3, #0x40
  05ce0	e5932000	 ldr         r2, [r3]
  05ce4	e51b3070	 ldr         r3, [r11, #-0x70]
  05ce8	e283303c	 add         r3, r3, #0x3C
  05cec	e5931000	 ldr         r1, [r3]
  05cf0	e59f0280	 ldr         r0, [pc, #0x280]
  05cf4	eb000000	 bl          SDCardDebugOutput
  05cf8	e3a03001	 mov         r3, #1
  05cfc	e50b301c	 str         r3, [r11, #-0x1C]
  05d00	ea000001	 b           |$LN62@HandleEndC|
  05d04		 |$LN61@HandleEndC|
  05d04	e3a03000	 mov         r3, #0
  05d08	e50b301c	 str         r3, [r11, #-0x1C]
  05d0c		 |$LN62@HandleEndC|

; 2527 : 
; 2528 :             if( pController->fDMATransfer )

  05d0c	e59b3000	 ldr         r3, [r11]
  05d10	e2833c0a	 add         r3, r3, #0xA, 24
  05d14	e28330a8	 add         r3, r3, #0xA8
  05d18	e5933000	 ldr         r3, [r3]
  05d1c	e3530000	 cmp         r3, #0
  05d20	0a000019	 beq         |$LN10@HandleEndC|

; 2529 :             {
; 2530 :                 SetCurrentState(pController, ReadDataTransfer);

  05d24	e59b3000	 ldr         r3, [r11]
  05d28	e2832ecf	 add         r2, r3, #0xCF, 28
  05d2c	e3a03008	 mov         r3, #8
  05d30	e5823000	 str         r3, [r2]

; 2531 :                 //RX_FIFO_INTERRUPT_ON(pController);
; 2532 :                 TRANSFER_DONE_INTERRUPT_ON(pController);

  05d34	e3a02000	 mov         r2, #0
  05d38	e3e01001	 mvn         r1, #1
  05d3c	e59b0000	 ldr         r0, [r11]
  05d40	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2533 :                 PROGRAM_DATA_ERROR_INTERRUPT_ON(pController);

  05d44	e3a02000	 mov         r2, #0
  05d48	e3e01c01	 mvn         r1, #1, 24
  05d4c	e59b0000	 ldr         r0, [r11]
  05d50	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2534 :                 if( pController->fDMAUsingDriverBuffer )

  05d54	e59b3000	 ldr         r3, [r11]
  05d58	e2833c0a	 add         r3, r3, #0xA, 24
  05d5c	e28330ac	 add         r3, r3, #0xAC
  05d60	e5933000	 ldr         r3, [r3]
  05d64	e3530000	 cmp         r3, #0
  05d68	0a000003	 beq         |$LN9@HandleEndC|

; 2535 :                 {
; 2536 :                     DoDMATransferOnDriverBuffer( pController, pRequest );

  05d6c	e51b1070	 ldr         r1, [r11, #-0x70]
  05d70	e59b0000	 ldr         r0, [r11]
  05d74	eb000000	 bl          DoDMATransferOnDriverBuffer

; 2537 :                 }
; 2538 :                 else

  05d78	ea000002	 b           |$LN8@HandleEndC|
  05d7c		 |$LN9@HandleEndC|

; 2539 :                 {
; 2540 :                     DoDMATransferRead( pController, pRequest );

  05d7c	e51b1070	 ldr         r1, [r11, #-0x70]
  05d80	e59b0000	 ldr         r0, [r11]
  05d84	eb000000	 bl          DoDMATransferRead
  05d88		 |$LN8@HandleEndC|

; 2541 :                 }
; 2542 :             }
; 2543 :             else

  05d88	ea00000f	 b           |$LN7@HandleEndC|
  05d8c		 |$LN10@HandleEndC|

; 2544 :             {
; 2545 : 
; 2546 :                     // turn on RX Fifo interrupts
; 2547 :                 RX_FIFO_INTERRUPT_ON(pController);

  05d8c	e3a02000	 mov         r2, #0
  05d90	e3e01020	 mvn         r1, #0x20
  05d94	e59b0000	 ldr         r0, [r11]
  05d98	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2548 :                 SetCurrentState(pController, ReadDataTransfer);

  05d9c	e59b3000	 ldr         r3, [r11]
  05da0	e2832ecf	 add         r2, r3, #0xCF, 28
  05da4	e3a03008	 mov         r3, #8
  05da8	e5823000	 str         r3, [r2]

; 2549 :                     // turn on the transfer done interrupt to check for timeout on reads
; 2550 :                     // the receive handler will turn this off after getting the first byte
; 2551 :                 TRANSFER_DONE_INTERRUPT_ON(pController);

  05dac	e3a02000	 mov         r2, #0
  05db0	e3e01001	 mvn         r1, #1
  05db4	e59b0000	 ldr         r0, [r11]
  05db8	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2552 :                 PROGRAM_DATA_ERROR_INTERRUPT_ON(pController);

  05dbc	e3a02000	 mov         r2, #0
  05dc0	e3e01c01	 mvn         r1, #1, 24
  05dc4	e59b0000	 ldr         r0, [r11]
  05dc8	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR
  05dcc		 |$LN7@HandleEndC|

; 2553 :             }
; 2554 :         } else {

  05dcc	ea000060	 b           |$LN6@HandleEndC|
  05dd0		 |$LN11@HandleEndC|

; 2555 :             DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("HandleEndCommandInterrupt starting WRITE TRANSFER of %d blocks of %d bytes\n"), pRequest->NumBlocks, pRequest->BlockSize ));

  05dd0	e59f3198	 ldr         r3, [pc, #0x198]
  05dd4	e5933440	 ldr         r3, [r3, #0x440]
  05dd8	e3130080	 tst         r3, #0x80
  05ddc	0a00000a	 beq         |$LN63@HandleEndC|
  05de0	e51b3070	 ldr         r3, [r11, #-0x70]
  05de4	e2833040	 add         r3, r3, #0x40
  05de8	e5932000	 ldr         r2, [r3]
  05dec	e51b3070	 ldr         r3, [r11, #-0x70]
  05df0	e283303c	 add         r3, r3, #0x3C
  05df4	e5931000	 ldr         r1, [r3]
  05df8	e59f0174	 ldr         r0, [pc, #0x174]
  05dfc	eb000000	 bl          SDCardDebugOutput
  05e00	e3a03001	 mov         r3, #1
  05e04	e50b3018	 str         r3, [r11, #-0x18]
  05e08	ea000001	 b           |$LN64@HandleEndC|
  05e0c		 |$LN63@HandleEndC|
  05e0c	e3a03000	 mov         r3, #0
  05e10	e50b3018	 str         r3, [r11, #-0x18]
  05e14		 |$LN64@HandleEndC|

; 2556 :             DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("Bytes wrtn: [%S]\n"), HexDisplay( pRequest->pBlockBuffer, TRANSFER_SIZE(pRequest) )) );

  05e14	e59f3154	 ldr         r3, [pc, #0x154]
  05e18	e5933440	 ldr         r3, [r3, #0x440]
  05e1c	e3130080	 tst         r3, #0x80
  05e20	0a000011	 beq         |$LN65@HandleEndC|
  05e24	e51b3070	 ldr         r3, [r11, #-0x70]
  05e28	e2832040	 add         r2, r3, #0x40
  05e2c	e51b3070	 ldr         r3, [r11, #-0x70]
  05e30	e283303c	 add         r3, r3, #0x3C
  05e34	e5922000	 ldr         r2, [r2]
  05e38	e5933000	 ldr         r3, [r3]
  05e3c	e0010392	 mul         r1, r2, r3
  05e40	e51b3070	 ldr         r3, [r11, #-0x70]
  05e44	e2833048	 add         r3, r3, #0x48
  05e48	e5930000	 ldr         r0, [r3]
  05e4c	eb000000	 bl          HexDisplay
  05e50	e50b0014	 str         r0, [r11, #-0x14]
  05e54	e51b1014	 ldr         r1, [r11, #-0x14]
  05e58	e59f010c	 ldr         r0, [pc, #0x10C]
  05e5c	eb000000	 bl          SDCardDebugOutput
  05e60	e3a03001	 mov         r3, #1
  05e64	e50b3010	 str         r3, [r11, #-0x10]
  05e68	ea000001	 b           |$LN66@HandleEndC|
  05e6c		 |$LN65@HandleEndC|
  05e6c	e3a03000	 mov         r3, #0
  05e70	e50b3010	 str         r3, [r11, #-0x10]
  05e74		 |$LN66@HandleEndC|

; 2557 :             SetCurrentState(pController, WriteDataTransfer);

  05e74	e59b3000	 ldr         r3, [r11]
  05e78	e2832ecf	 add         r2, r3, #0xCF, 28
  05e7c	e3a03004	 mov         r3, #4
  05e80	e5823000	 str         r3, [r2]

; 2558 : 
; 2559 :             if( pController->fDMATransfer )

  05e84	e59b3000	 ldr         r3, [r11]
  05e88	e2833c0a	 add         r3, r3, #0xA, 24
  05e8c	e28330a8	 add         r3, r3, #0xA8
  05e90	e5933000	 ldr         r3, [r3]
  05e94	e3530000	 cmp         r3, #0
  05e98	0a000015	 beq         |$LN5@HandleEndC|

; 2560 :             {
; 2561 :                 //TX_FIFO_INTERRUPT_ON(pController);
; 2562 :                 TRANSFER_DONE_INTERRUPT_ON(pController);

  05e9c	e3a02000	 mov         r2, #0
  05ea0	e3e01001	 mvn         r1, #1
  05ea4	e59b0000	 ldr         r0, [r11]
  05ea8	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2563 :                 PROGRAM_DATA_ERROR_INTERRUPT_ON(pController);

  05eac	e3a02000	 mov         r2, #0
  05eb0	e3e01c01	 mvn         r1, #1, 24
  05eb4	e59b0000	 ldr         r0, [r11]
  05eb8	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2564 :                 if( pController->fDMAUsingDriverBuffer )

  05ebc	e59b3000	 ldr         r3, [r11]
  05ec0	e2833c0a	 add         r3, r3, #0xA, 24
  05ec4	e28330ac	 add         r3, r3, #0xAC
  05ec8	e5933000	 ldr         r3, [r3]
  05ecc	e3530000	 cmp         r3, #0
  05ed0	0a000003	 beq         |$LN4@HandleEndC|

; 2565 :                 {
; 2566 :                     DoDMATransferOnDriverBuffer( pController, pRequest );

  05ed4	e51b1070	 ldr         r1, [r11, #-0x70]
  05ed8	e59b0000	 ldr         r0, [r11]
  05edc	eb000000	 bl          DoDMATransferOnDriverBuffer

; 2567 :                 }
; 2568 :                 else

  05ee0	ea000002	 b           |$LN3@HandleEndC|
  05ee4		 |$LN4@HandleEndC|

; 2569 :                 {
; 2570 :                     DoDMATransferWrite( pController, pRequest );

  05ee4	e51b1070	 ldr         r1, [r11, #-0x70]
  05ee8	e59b0000	 ldr         r0, [r11]
  05eec	eb000000	 bl          DoDMATransferWrite
  05ef0		 |$LN3@HandleEndC|

; 2571 :                 }
; 2572 :             }
; 2573 :             else

  05ef0	ea000017	 b           |$LN2@HandleEndC|
  05ef4		 |$LN5@HandleEndC|

; 2574 :             {
; 2575 :                     // turn on Fifo interrupts
; 2576 :                 TX_FIFO_INTERRUPT_ON(pController);

  05ef4	e3a02000	 mov         r2, #0
  05ef8	e3e01040	 mvn         r1, #0x40
  05efc	e59b0000	 ldr         r0, [r11]
  05f00	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2577 :                     // turn on transfer interrupts
; 2578 :                 TRANSFER_DONE_INTERRUPT_ON(pController);

  05f04	e3a02000	 mov         r2, #0
  05f08	e3e01001	 mvn         r1, #1
  05f0c	e59b0000	 ldr         r0, [r11]
  05f10	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2579 :                 PROGRAM_DATA_ERROR_INTERRUPT_ON(pController);

  05f14	e3a02000	 mov         r2, #0
  05f18	e3e01c01	 mvn         r1, #1, 24
  05f1c	e59b0000	 ldr         r0, [r11]
  05f20	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR
  05f24		 |$LN72@HandleEndC|

; 2580 : 
; 2581 :                 __try {
; 2582 :                     SDLoadXmitFifo(pController, pRequest,pRequest->NumBlocks * pRequest->BlockSize);

  05f24	e51b3070	 ldr         r3, [r11, #-0x70]
  05f28	e283203c	 add         r2, r3, #0x3C
  05f2c	e51b3070	 ldr         r3, [r11, #-0x70]
  05f30	e2833040	 add         r3, r3, #0x40
  05f34	e5921000	 ldr         r1, [r2]
  05f38	e5933000	 ldr         r3, [r3]
  05f3c	e0020391	 mul         r2, r1, r3
  05f40	e51b1070	 ldr         r1, [r11, #-0x70]
  05f44	e59b0000	 ldr         r0, [r11]
  05f48	eb000000	 bl          SDLoadXmitFifo
  05f4c		 |$LN73@HandleEndC|

; 2583 :                 }

  05f4c	ea000000	 b           |$LN74@HandleEndC|
  05f50		 |$LN69@HandleEndC|
  05f50	eaffffff	 b           |$LN74@HandleEndC|
  05f54		 |$LN74@HandleEndC|
  05f54		 |$LN2@HandleEndC|
  05f54		 |$LN6@HandleEndC|
  05f54		 |$LN12@HandleEndC|
  05f54		 |$LN41@HandleEndC|
  05f54		 |$LN67@HandleEndC|

; 2585 :                 };
; 2586 :             }
; 2587 :         }
; 2588 :     }
; 2589 : }

  05f54	e24bd00c	 sub         sp, r11, #0xC
  05f58	e89d6800	 ldmia       sp, {r11, sp, lr}
  05f5c	e12fff1e	 bx          lr

			 ENDP  ; |HandleEndCommandInterrupt|

  05f60		 |$LN68@HandleEndC|
  05f60		 |$LN77@HandleEndC|

; 2584 :                 __except(EXCEPTION_EXECUTE_HANDLER) {

  05f60	e52de004	 str         lr, [sp, #-4]!
  05f64		 |$LN71@HandleEndC|
  05f64		 |$LN80@HandleEndC|
  05f64	e3a00001	 mov         r0, #1
  05f68		 |$LN70@HandleEndC|
  05f68	e49df004	 ldr         pc, [sp], #4
  05f6c		 |$LN82@HandleEndC|
  05f6c		 |$LN83@HandleEndC|
  05f6c	00000000	 DCD         |??_C@_1CE@KKCHCOHK@?$AAB?$AAy?$AAt?$AAe?$AAs?$AA?5?$AAw?$AAr?$AAt?$AAn?$AA?3?$AA?5?$AA?$FL?$AA?$CF?$AAS?$AA?$FN?$AA?6?$AA?$AA@|
  05f70		 |$LN84@HandleEndC|
  05f70	00000000	 DCD         |dpCurSettings|
  05f74		 |$LN85@HandleEndC|
  05f74	00000000	 DCD         |??_C@_1JI@FGEECGPI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AAi@|
  05f78		 |$LN86@HandleEndC|
  05f78	00000000	 DCD         |??_C@_1JG@PFNHJMIN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AAi@|
  05f7c		 |$LN87@HandleEndC|
  05f7c	00000000	 DCD         |??_C@_1HC@ECGKNCKB@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@|
  05f80		 |$LN88@HandleEndC|
  05f80	00000000	 DCD         |??_C@_1FK@JBDLHCPM@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@|
  05f84		 |$LN89@HandleEndC|
  05f84	00000000	 DCD         |??_C@_1JI@KKLLBAOO@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@|
  05f88		 |$LN90@HandleEndC|
  05f88	00000000	 DCD         |??_C@_1HC@FIAGKBIM@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAI?$AAg?$AAn?$AAo?$AAr@|
  05f8c		 |$LN91@HandleEndC|
  05f8c	00000000	 DCD         |??_C@_1GI@LMIGKDNL@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@|
  05f90		 |$LN92@HandleEndC|
  05f90	00000000	 DCD         |??_C@_1IG@MLMEEPCI@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@|
  05f94		 |$LN93@HandleEndC|
  05f94	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  05f98		 |$LN94@HandleEndC|
  05f98	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  05f9c		 |$LN95@HandleEndC|
  05f9c	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  05fa0		 |$LN96@HandleEndC|
  05fa0	00000000	 DCD         |??_C@_1FO@MLLFABBN@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAr?$AAe?$AAp?$AAo?$AAr?$AAt@|
  05fa4		 |$LN97@HandleEndC|
  05fa4	00000000	 DCD         |??_C@_1IG@PDIANPAJ@?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAE?$AAn?$AAd?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAs?$AAp?$AAo@|
  05fa8		 |$LN81@HandleEndC|
  05fa8		 |$LN79@HandleEndC|
	EXPORT	|??_C@_1CI@FGOBLHIA@?$AAG?$AAo?$AAt?$AA?5?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|HandleSDIOInterrupt|

  000f8			 AREA	 |.pdata|, PDATA
|$T45357| DCD	|$LN8@HandleSDIO|
	DCD	0x40002a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FGOBLHIA@?$AAG?$AAo?$AAt?$AA?5?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?6?$AA?$AA@| DCB "G"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "S", 0x0, "D", 0x0, "I"
	DCB	0x0, "O", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  05fa8			 AREA	 |.text|, CODE, ARM

  05fa8		 |HandleSDIOInterrupt| PROC

; 2599 : {

  05fa8		 |$LN8@HandleSDIO|
  05fa8	e1a0c00d	 mov         r12, sp
  05fac	e92d0001	 stmdb       sp!, {r0}
  05fb0	e92d5000	 stmdb       sp!, {r12, lr}
  05fb4	e24dd008	 sub         sp, sp, #8
  05fb8		 |$M45354|

; 2600 :     if( IsCardPresent( pHCDevice ) && pHCDevice->DevicePresent ) 

  05fb8	e59d0010	 ldr         r0, [sp, #0x10]
  05fbc	eb000000	 bl          IsCardPresent
  05fc0	e58d0000	 str         r0, [sp]
  05fc4	e59d3000	 ldr         r3, [sp]
  05fc8	e3530000	 cmp         r3, #0
  05fcc	0a00001a	 beq         |$LN1@HandleSDIO|
  05fd0	e59d3010	 ldr         r3, [sp, #0x10]
  05fd4	e2833c0d	 add         r3, r3, #0xD, 24
  05fd8	e2833048	 add         r3, r3, #0x48
  05fdc	e5933000	 ldr         r3, [r3]
  05fe0	e3530000	 cmp         r3, #0
  05fe4	0a000014	 beq         |$LN1@HandleSDIO|

; 2601 :     {
; 2602 :             // disable the SDIO interrupt
; 2603 :         SDIO_INTERRUPT_OFF(pHCDevice);

  05fe8	e3a02b02	 mov         r2, #2, 22
  05fec	e3e01000	 mvn         r1, #0
  05ff0	e59d0010	 ldr         r0, [sp, #0x10]
  05ff4	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2604 :             // indicate that the card is interrupting
; 2605 :         DbgPrintZo(SDH_SDBUS_INTERACTION_ZONE, (TEXT("Got SDIO Interrupt\n")));

  05ff8	e59f304c	 ldr         r3, [pc, #0x4C]
  05ffc	e5933440	 ldr         r3, [r3, #0x440]
  06000	e3130080	 tst         r3, #0x80
  06004	0a000004	 beq         |$LN4@HandleSDIO|
  06008	e59f0038	 ldr         r0, [pc, #0x38]
  0600c	eb000000	 bl          SDCardDebugOutput
  06010	e3a03001	 mov         r3, #1
  06014	e58d3004	 str         r3, [sp, #4]
  06018	ea000001	 b           |$LN5@HandleSDIO|
  0601c		 |$LN4@HandleSDIO|
  0601c	e3a03000	 mov         r3, #0
  06020	e58d3004	 str         r3, [sp, #4]
  06024		 |$LN5@HandleSDIO|

; 2606 :         SDHCDIndicateSlotStateChange(pHCDevice->pHCContext, 
; 2607 :                                         0,
; 2608 :                                         DeviceInterrupting);

  06024	e3a02003	 mov         r2, #3
  06028	e3a01000	 mov         r1, #0
  0602c	e59d3010	 ldr         r3, [sp, #0x10]
  06030	e2833018	 add         r3, r3, #0x18
  06034	e5930000	 ldr         r0, [r3]
  06038	eb000000	 bl          SDHCDIndicateSlotStateChange
  0603c		 |$LN1@HandleSDIO|

; 2609 :     }
; 2610 : }

  0603c	e28dd008	 add         sp, sp, #8
  06040	e89d6000	 ldmia       sp, {sp, lr}
  06044	e12fff1e	 bx          lr
  06048		 |$LN9@HandleSDIO|
  06048		 |$LN10@HandleSDIO|
  06048	00000000	 DCD         |??_C@_1CI@FGOBLHIA@?$AAG?$AAo?$AAt?$AA?5?$AAS?$AAD?$AAI?$AAO?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?6?$AA?$AA@|
  0604c		 |$LN11@HandleSDIO|
  0604c	00000000	 DCD         |dpCurSettings|
  06050		 |$M45355|

			 ENDP  ; |HandleSDIOInterrupt|

	EXPORT	|??_C@_1DK@GOGJGBHH@?$AAS?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAI?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAM?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAR?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00100			 AREA	 |.pdata|, PDATA
|$T45369| DCD	|$LN8@GetMMCInte|
	DCD	0x40003f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@GOGJGBHH@?$AAS?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAI?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAM?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAR?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "=", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, " "
	DCB	0x0, "I", 0x0, "=", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X"
	DCB	0x0, " ", 0x0, "M", 0x0, "=", 0x0, "%", 0x0, "0", 0x0, "4"
	DCB	0x0, "X", 0x0, " ", 0x0, "R", 0x0, "=", 0x0, "%", 0x0, "0"
	DCB	0x0, "4", 0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  06050			 AREA	 |.text|, CODE, ARM

  06050		 |GetMMCInterrupts| PROC

; 2621 : {

  06050		 |$LN8@GetMMCInte|
  06050	e1a0c00d	 mov         r12, sp
  06054	e92d0001	 stmdb       sp!, {r0}
  06058	e92d5000	 stmdb       sp!, {r12, lr}
  0605c	e24dd02c	 sub         sp, sp, #0x2C
  06060		 |$M45366|

; 2622 :     DWORD intr;
; 2623 :     DWORD interrupts;    // current interrupts
; 2624 :     DWORD interruptMask; // interrupt mask
; 2625 : #ifdef DEBUG
; 2626 :     DWORD stat;
; 2627 : #endif
; 2628 : 
; 2629 :         // get interrupts
; 2630 :     intr = READ_MMC_REGISTER_DWORD(pHCDevice, MMC_IREG) 
; 2631 :                  & MMC_IREG_INTERRUPTS;

  06060	e3a0102c	 mov         r1, #0x2C
  06064	e59d0034	 ldr         r0, [sp, #0x34]
  06068	eb000000	 bl          READ_MMC_REGISTER_DWORD
  0606c	e58d001c	 str         r0, [sp, #0x1C]
  06070	e59d201c	 ldr         r2, [sp, #0x1C]
  06074	e3a03c1f	 mov         r3, #0x1F, 24
  06078	e38330ff	 orr         r3, r3, #0xFF
  0607c	e0023003	 and         r3, r2, r3
  06080	e58d300c	 str         r3, [sp, #0xC]

; 2632 : 
; 2633 :     // get the interrupt masks so we know which ones we don't care about
; 2634 :         // the handlers will turn off (mask) interrupts 
; 2635 :     interruptMask = (~(READ_MMC_REGISTER_DWORD(pHCDevice, MMC_IMASK))) 
; 2636 :                     & MMC_IREG_INTERRUPTS;

  06084	e3a01028	 mov         r1, #0x28
  06088	e59d0034	 ldr         r0, [sp, #0x34]
  0608c	eb000000	 bl          READ_MMC_REGISTER_DWORD
  06090	e58d0020	 str         r0, [sp, #0x20]
  06094	e59d3020	 ldr         r3, [sp, #0x20]
  06098	e1e02003	 mvn         r2, r3
  0609c	e3a03c1f	 mov         r3, #0x1F, 24
  060a0	e38330ff	 orr         r3, r3, #0xFF
  060a4	e0023003	 and         r3, r2, r3
  060a8	e58d3008	 str         r3, [sp, #8]

; 2637 : 
; 2638 :         // mask it
; 2639 :     interrupts = intr & interruptMask;

  060ac	e59d200c	 ldr         r2, [sp, #0xC]
  060b0	e59d3008	 ldr         r3, [sp, #8]
  060b4	e0023003	 and         r3, r2, r3
  060b8	e58d3010	 str         r3, [sp, #0x10]

; 2640 : 
; 2641 : #ifdef DEBUG
; 2642 :     stat = READ_MMC_REGISTER_DWORD(pHCDevice,MMC_STAT);

  060bc	e3a01004	 mov         r1, #4
  060c0	e59d0034	 ldr         r0, [sp, #0x34]
  060c4	eb000000	 bl          READ_MMC_REGISTER_DWORD
  060c8	e58d0024	 str         r0, [sp, #0x24]
  060cc	e59d3024	 ldr         r3, [sp, #0x24]
  060d0	e58d3004	 str         r3, [sp, #4]

; 2643 :                                      
; 2644 :     if( pHCDevice->fSDIOEnabled )

  060d4	e59d3034	 ldr         r3, [sp, #0x34]
  060d8	e2833c0d	 add         r3, r3, #0xD, 24
  060dc	e2833034	 add         r3, r3, #0x34
  060e0	e5933000	 ldr         r3, [r3]
  060e4	e3530000	 cmp         r3, #0
  060e8	0a00000f	 beq         |$LN1@GetMMCInte|

; 2645 :     {
; 2646 :         DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2647 :             (TEXT("S=%04X I=%04X M=%04X R=%04X\n"), 
; 2648 :                 stat, intr, interruptMask, interrupts));

  060ec	e59f3054	 ldr         r3, [pc, #0x54]
  060f0	e5933440	 ldr         r3, [r3, #0x440]
  060f4	e3130001	 tst         r3, #1
  060f8	0a000009	 beq         |$LN4@GetMMCInte|
  060fc	e59d3010	 ldr         r3, [sp, #0x10]
  06100	e58d3000	 str         r3, [sp]
  06104	e59d3008	 ldr         r3, [sp, #8]
  06108	e59d200c	 ldr         r2, [sp, #0xC]
  0610c	e59d1004	 ldr         r1, [sp, #4]
  06110	e59f002c	 ldr         r0, [pc, #0x2C]
  06114	eb000000	 bl          SDCardDebugOutput
  06118	e3a03001	 mov         r3, #1
  0611c	e58d3028	 str         r3, [sp, #0x28]
  06120	ea000001	 b           |$LN5@GetMMCInte|
  06124		 |$LN4@GetMMCInte|
  06124	e3a03000	 mov         r3, #0
  06128	e58d3028	 str         r3, [sp, #0x28]
  0612c		 |$LN5@GetMMCInte|
  0612c		 |$LN1@GetMMCInte|

; 2649 :     }
; 2650 : #endif
; 2651 : 
; 2652 :     return interrupts;

  0612c	e59d3010	 ldr         r3, [sp, #0x10]
  06130	e58d3018	 str         r3, [sp, #0x18]

; 2653 : }

  06134	e59d0018	 ldr         r0, [sp, #0x18]
  06138	e28dd02c	 add         sp, sp, #0x2C
  0613c	e89d6000	 ldmia       sp, {sp, lr}
  06140	e12fff1e	 bx          lr
  06144		 |$LN9@GetMMCInte|
  06144		 |$LN10@GetMMCInte|
  06144	00000000	 DCD         |??_C@_1DK@GOGJGBHH@?$AAS?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAI?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAM?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?5?$AAR?$AA?$DN?$AA?$CF?$AA0?$AA4?$AAX?$AA?6?$AA?$AA@|
  06148		 |$LN11@GetMMCInte|
  06148	00000000	 DCD         |dpCurSettings|
  0614c		 |$M45367|

			 ENDP  ; |GetMMCInterrupts|

	EXPORT	|??_C@_1DC@OCPACOGL@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?5?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@FCFEGPKL@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?5?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@FOAIIM@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@JNPLHFDH@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@BMAHLNJM@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|GetCurrentThread|
	IMPORT	|InterruptDone|
	IMPORT	|CeSetThreadPriority|

  00108			 AREA	 |.pdata|, PDATA
|$T45386| DCD	|$LN18@SDDMAIstTh|
	DCD	0x40007004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@OCPACOGL@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?5?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "I", 0x0, "s"
	DCB	0x0, "t", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, " ", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@FCFEGPKL@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?5?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "I", 0x0, "s"
	DCB	0x0, "t", 0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+"
	DCB	0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+"
	DCB	0x0, "+", 0x0, "+", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@FOAIIM@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "I", 0x0, "s"
	DCB	0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, ":", 0x0, " ", 0x0, "T", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "E", 0x0, "x"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@JNPLHFDH@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "S"
	DCB	0x0, "D", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "I", 0x0, "s"
	DCB	0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "a", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, "!", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, " ", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BMAHLNJM@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "I", 0x0, "s"
	DCB	0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, ":", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "r"
	DCB	0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, ",", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "C", 0x0, "E", 0x0, "T", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "P", 0x0, "r"
	DCB	0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "y"
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0614c			 AREA	 |.text|, CODE, ARM

  0614c		 |SDDMAIstThread| PROC

; 2663 : {

  0614c		 |$LN18@SDDMAIstTh|
  0614c	e1a0c00d	 mov         r12, sp
  06150	e92d0001	 stmdb       sp!, {r0}
  06154	e92d5000	 stmdb       sp!, {r12, lr}
  06158	e24dd024	 sub         sp, sp, #0x24
  0615c		 |$M45383|

; 2664 :     DWORD waitStatus;    // wait status
; 2665 : 
; 2666 :     if (!CeSetThreadPriority(GetCurrentThread(), 
; 2667 :         pHCDevice->DmaIstThreadPriority)) {

  0615c	eb000000	 bl          GetCurrentThread
  06160	e58d0008	 str         r0, [sp, #8]
  06164	e59d302c	 ldr         r3, [sp, #0x2C]
  06168	e2833c0a	 add         r3, r3, #0xA, 24
  0616c	e283309c	 add         r3, r3, #0x9C
  06170	e5931000	 ldr         r1, [r3]
  06174	e59d0008	 ldr         r0, [sp, #8]
  06178	eb000000	 bl          CeSetThreadPriority
  0617c	e58d000c	 str         r0, [sp, #0xC]
  06180	e59d300c	 ldr         r3, [sp, #0xC]
  06184	e3530000	 cmp         r3, #0
  06188	1a00000a	 bne         |$LN5@SDDMAIstTh|

; 2668 :         DbgPrintZo(SDCARD_ZONE_WARN, 
; 2669 :             (TEXT("SDDMAIstThread: warning, failed to set CEThreadPriority \n")));

  0618c	e59f3164	 ldr         r3, [pc, #0x164]
  06190	e5933440	 ldr         r3, [r3, #0x440]
  06194	e3130901	 tst         r3, #1, 18
  06198	0a000004	 beq         |$LN8@SDDMAIstTh|
  0619c	e59f0164	 ldr         r0, [pc, #0x164]
  061a0	eb000000	 bl          SDCardDebugOutput
  061a4	e3a03001	 mov         r3, #1
  061a8	e58d3010	 str         r3, [sp, #0x10]
  061ac	ea000001	 b           |$LN9@SDDMAIstTh|
  061b0		 |$LN8@SDDMAIstTh|
  061b0	e3a03000	 mov         r3, #0
  061b4	e58d3010	 str         r3, [sp, #0x10]
  061b8		 |$LN9@SDDMAIstTh|
  061b8		 |$LN5@SDDMAIstTh|
  061b8		 |$LN4@SDDMAIstTh|

; 2670 :     }
; 2671 : 
; 2672 :     while(1) {
; 2673 : 
; 2674 :         waitStatus = WaitForSingleObject(pHCDevice->hDMAInterruptEvent, INFINITE);

  061b8	e3e01000	 mvn         r1, #0
  061bc	e59d302c	 ldr         r3, [sp, #0x2C]
  061c0	e2833c0a	 add         r3, r3, #0xA, 24
  061c4	e2833098	 add         r3, r3, #0x98
  061c8	e5930000	 ldr         r0, [r3]
  061cc	eb000000	 bl          WaitForSingleObject
  061d0	e58d0014	 str         r0, [sp, #0x14]
  061d4	e59d3014	 ldr         r3, [sp, #0x14]
  061d8	e58d3000	 str         r3, [sp]

; 2675 : 
; 2676 :         if (WAIT_OBJECT_0 != waitStatus) {

  061dc	e59d3000	 ldr         r3, [sp]
  061e0	e3530000	 cmp         r3, #0
  061e4	0a00000e	 beq         |$LN2@SDDMAIstTh|

; 2677 :             DbgPrintZo(SDCARD_ZONE_WARN, 
; 2678 :                 (TEXT("SDDMAIstThread: Wait Failed! 0x%08X \n"), waitStatus));

  061e8	e59f3108	 ldr         r3, [pc, #0x108]
  061ec	e5933440	 ldr         r3, [r3, #0x440]
  061f0	e3130901	 tst         r3, #1, 18
  061f4	0a000005	 beq         |$LN10@SDDMAIstTh|
  061f8	e59d1000	 ldr         r1, [sp]
  061fc	e59f0100	 ldr         r0, [pc, #0x100]
  06200	eb000000	 bl          SDCardDebugOutput
  06204	e3a03001	 mov         r3, #1
  06208	e58d3018	 str         r3, [sp, #0x18]
  0620c	ea000001	 b           |$LN11@SDDMAIstTh|
  06210		 |$LN10@SDDMAIstTh|
  06210	e3a03000	 mov         r3, #0
  06214	e58d3018	 str         r3, [sp, #0x18]
  06218		 |$LN11@SDDMAIstTh|

; 2679 :                 // bail out
; 2680 :             return 0;

  06218	e3a03000	 mov         r3, #0
  0621c	e58d3004	 str         r3, [sp, #4]
  06220	ea00002f	 b           |$LN6@SDDMAIstTh|
  06224		 |$LN2@SDDMAIstTh|

; 2681 :         }
; 2682 : 
; 2683 :         if (pHCDevice->DriverShutdown) {

  06224	e59d302c	 ldr         r3, [sp, #0x2C]
  06228	e2833c0a	 add         r3, r3, #0xA, 24
  0622c	e28330d4	 add         r3, r3, #0xD4
  06230	e5933000	 ldr         r3, [r3]
  06234	e3530000	 cmp         r3, #0
  06238	0a000004	 beq         |$LN1@SDDMAIstTh|

; 2684 :             DbgPrintZo(1, (TEXT("SDDMAIstThread: Thread Exiting\n")));

  0623c	e59f00bc	 ldr         r0, [pc, #0xBC]
  06240	eb000000	 bl          SDCardDebugOutput

; 2685 :             return 0;

  06244	e3a03000	 mov         r3, #0
  06248	e58d3004	 str         r3, [sp, #4]
  0624c	ea000024	 b           |$LN6@SDDMAIstTh|
  06250		 |$LN1@SDDMAIstTh|

; 2686 :         }
; 2687 : 
; 2688 :         DbgPrintZo(SDH_INTERRUPT_ZONE, (TEXT("SDDMAIst+++++++++++++ \n")));

  06250	e59f30a0	 ldr         r3, [pc, #0xA0]
  06254	e5933440	 ldr         r3, [r3, #0x440]
  06258	e3130001	 tst         r3, #1
  0625c	0a000004	 beq         |$LN12@SDDMAIstTh|
  06260	e59f0094	 ldr         r0, [pc, #0x94]
  06264	eb000000	 bl          SDCardDebugOutput
  06268	e3a03001	 mov         r3, #1
  0626c	e58d301c	 str         r3, [sp, #0x1C]
  06270	ea000001	 b           |$LN13@SDDMAIstTh|
  06274		 |$LN12@SDDMAIstTh|
  06274	e3a03000	 mov         r3, #0
  06278	e58d301c	 str         r3, [sp, #0x1C]
  0627c		 |$LN13@SDDMAIstTh|

; 2689 :         ACQUIRE_LOCK(pHCDevice);

  0627c	e59d302c	 ldr         r3, [sp, #0x2C]
  06280	e2833c0a	 add         r3, r3, #0xA, 24
  06284	e28300d8	 add         r0, r3, #0xD8
  06288	eb000000	 bl          EnterCriticalSection

; 2690 :         HandleDMAInterrupt( pHCDevice );

  0628c	e59d002c	 ldr         r0, [sp, #0x2C]
  06290	eb000000	 bl          HandleDMAInterrupt

; 2691 :         RELEASE_LOCK(pHCDevice);

  06294	e59d302c	 ldr         r3, [sp, #0x2C]
  06298	e2833c0a	 add         r3, r3, #0xA, 24
  0629c	e28300d8	 add         r0, r3, #0xD8
  062a0	eb000000	 bl          LeaveCriticalSection

; 2692 :         DbgPrintZo(SDH_INTERRUPT_ZONE, (TEXT("SDDMAIst-------------- \n")));

  062a4	e59f304c	 ldr         r3, [pc, #0x4C]
  062a8	e5933440	 ldr         r3, [r3, #0x440]
  062ac	e3130001	 tst         r3, #1
  062b0	0a000004	 beq         |$LN14@SDDMAIstTh|
  062b4	e59f0038	 ldr         r0, [pc, #0x38]
  062b8	eb000000	 bl          SDCardDebugOutput
  062bc	e3a03001	 mov         r3, #1
  062c0	e58d3020	 str         r3, [sp, #0x20]
  062c4	ea000001	 b           |$LN15@SDDMAIstTh|
  062c8		 |$LN14@SDDMAIstTh|
  062c8	e3a03000	 mov         r3, #0
  062cc	e58d3020	 str         r3, [sp, #0x20]
  062d0		 |$LN15@SDDMAIstTh|

; 2693 :         
; 2694 :         InterruptDone(pHCDevice->dwDmaSysIntr);

  062d0	e59d302c	 ldr         r3, [sp, #0x2C]
  062d4	e2833ea9	 add         r3, r3, #0xA9, 28
  062d8	e5930000	 ldr         r0, [r3]
  062dc	eb000000	 bl          InterruptDone

; 2695 :     }

  062e0	eaffffb4	 b           |$LN4@SDDMAIstTh|
  062e4		 |$LN6@SDDMAIstTh|

; 2696 : }

  062e4	e59d0004	 ldr         r0, [sp, #4]
  062e8	e28dd024	 add         sp, sp, #0x24
  062ec	e89d6000	 ldmia       sp, {sp, lr}
  062f0	e12fff1e	 bx          lr
  062f4		 |$LN19@SDDMAIstTh|
  062f4		 |$LN20@SDDMAIstTh|
  062f4	00000000	 DCD         |??_C@_1DC@OCPACOGL@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?5?$AA?6?$AA?$AA@|
  062f8		 |$LN21@SDDMAIstTh|
  062f8	00000000	 DCD         |dpCurSettings|
  062fc		 |$LN22@SDDMAIstTh|
  062fc	00000000	 DCD         |??_C@_1DA@FCFEGPKL@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?5?$AA?6?$AA?$AA@|
  06300		 |$LN23@SDDMAIstTh|
  06300	00000000	 DCD         |??_C@_1EA@FOAIIM@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAx?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?6?$AA?$AA@|
  06304		 |$LN24@SDDMAIstTh|
  06304	00000000	 DCD         |??_C@_1EM@JNPLHFDH@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CB?$AA?5?$AA0?$AAx?$AA?$CF@|
  06308		 |$LN25@SDDMAIstTh|
  06308	00000000	 DCD         |??_C@_1HE@BMAHLNJM@?$AAS?$AAD?$AAD?$AAM?$AAA?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5@|
  0630c		 |$M45384|

			 ENDP  ; |SDDMAIstThread|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45399| DCD	|$LN5@GetCurrent|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentThread| PROC

; 351  : _inline HANDLE GetCurrentThread(void) {

  00000		 |$LN5@GetCurrent|
  00000	e24dd004	 sub         sp, sp, #4
  00004		 |$M45396|

; 352  : 	return ((HANDLE)(SH_CURTHREAD+SYS_HANDLE_BASE));

  00004	e3a03041	 mov         r3, #0x41
  00008	e58d3000	 str         r3, [sp]

; 353  : }

  0000c	e59d0000	 ldr         r0, [sp]
  00010	e28dd004	 add         sp, sp, #4
  00014	e12fff1e	 bx          lr
  00018		 |$M45397|

			 ENDP  ; |GetCurrentThread|

	EXPORT	|??_C@_1EO@FGGEDCCK@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@NGLEDICK@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@EKKLCNJE@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@BKFBGNMM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@IINGFEFN@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@LHAIIJOM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@CNHIBEGH@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@GLKNAGNO@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@GNNAIDMN@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@KLMEEMCM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@EPMGDGON@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL@| [ DATA ] ; `string'

  00110			 AREA	 |.pdata|, PDATA
|$T45429| DCD	|$LN42@SDControll|
	DCD	0x40011204
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\sdhc\sdcontrol.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@FGGEDCCK@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "S", 0x0, "T", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@NGLEDICK@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "_", 0x0, "I", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "D", 0x0, "I", 0x0, "O", 0x0, "_"
	DCB	0x0, "I", 0x0, "N", 0x0, "T", 0x0, " ", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@EKKLCNJE@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "_", 0x0, "I", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, "A", 0x0, "_"
	DCB	0x0, "T", 0x0, "R", 0x0, "A", 0x0, "N", 0x0, "_", 0x0, "D"
	DCB	0x0, "O", 0x0, "N", 0x0, "E", 0x0, " ", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@BKFBGNMM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "_", 0x0, "I", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "P", 0x0, "R", 0x0, "O", 0x0, "G", 0x0, "_"
	DCB	0x0, "D", 0x0, "O", 0x0, "N", 0x0, "E", 0x0, " ", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@IINGFEFN@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "_", 0x0, "I", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "T", 0x0, "X", 0x0, "F", 0x0, "I", 0x0, "F"
	DCB	0x0, "O", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "Q", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@LHAIIJOM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "_", 0x0, "I", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "R", 0x0, "X", 0x0, "F", 0x0, "I", 0x0, "F"
	DCB	0x0, "O", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "Q", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@CNHIBEGH@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "_", 0x0, "I", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "O", 0x0, "P", 0x0, "_"
	DCB	0x0, "C", 0x0, "M", 0x0, "D", 0x0, " ", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@GLKNAGNO@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "M"
	DCB	0x0, "C", 0x0, "_", 0x0, "I", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "E", 0x0, "N", 0x0, "D", 0x0, "_", 0x0, "C"
	DCB	0x0, "M", 0x0, "D", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@GNNAIDMN@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@KLMEEMCM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "e", 0x0, "x", 0x0, "p", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@EPMGDGON@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "S", 0x0, "T", 0x0, "H", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, "r", 0x0, "+", 0x0, "+", 0x0, "+"
	DCB	0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+"
	DCB	0x0, "+", 0x0, "+", 0x0, "+", 0x0, "+", 0x0, " ", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0630c			 AREA	 |.text|, CODE, ARM

  0630c		 |SDControllerISTHandler| PROC

; 2698 : {

  0630c		 |$LN42@SDControll|
  0630c	e1a0c00d	 mov         r12, sp
  06310	e92d0003	 stmdb       sp!, {r0, r1}
  06314	e92d5000	 stmdb       sp!, {r12, lr}
  06318	e24dd048	 sub         sp, sp, #0x48
  0631c		 |$M45426|

; 2699 :     DWORD interrupts;    // current interrupts
; 2700 :     DWORD interruptMask;
; 2701 :     BOOL  fForceTimeout;
; 2702 :     DbgPrintZo(SDH_INTERRUPT_ZONE, (TEXT("SDControllerISTHandler+++++++++++++ \n")));

  0631c	e59f33fc	 ldr         r3, [pc, #0x3FC]
  06320	e5933440	 ldr         r3, [r3, #0x440]
  06324	e3130001	 tst         r3, #1
  06328	0a000004	 beq         |$LN18@SDControll|
  0632c	e59f041c	 ldr         r0, [pc, #0x41C]
  06330	eb000000	 bl          SDCardDebugOutput
  06334	e3a03001	 mov         r3, #1
  06338	e58d3010	 str         r3, [sp, #0x10]
  0633c	ea000001	 b           |$LN19@SDControll|
  06340		 |$LN18@SDControll|
  06340	e3a03000	 mov         r3, #0
  06344	e58d3010	 str         r3, [sp, #0x10]
  06348		 |$LN19@SDControll|

; 2703 : 
; 2704 :     interrupts = GetMMCInterrupts(pHCDevice);

  06348	e59d0050	 ldr         r0, [sp, #0x50]
  0634c	eb000000	 bl          GetMMCInterrupts
  06350	e58d0014	 str         r0, [sp, #0x14]
  06354	e59d3014	 ldr         r3, [sp, #0x14]
  06358	e58d3008	 str         r3, [sp, #8]

; 2705 : 
; 2706 :     // We have observed that sometimes, after an abrupt card removal and insert,
; 2707 :     // the controller will "stall" during the first data transfer, there will be
; 2708 :     // no hardware timeout.  If this is the case, we will simulate a hardware timeout 
; 2709 :     // interrupt.
; 2710 :     fForceTimeout = FALSE;

  0635c	e3a03000	 mov         r3, #0
  06360	e58d3004	 str         r3, [sp, #4]

; 2711 :     if (fTimeOut) {

  06364	e59d3054	 ldr         r3, [sp, #0x54]
  06368	e3530000	 cmp         r3, #0
  0636c	0a000020	 beq         |$LN15@SDControll|

; 2712 :         // check if the MMC_IREG_DAT_ERR interrupt is enabled 
; 2713 :         interruptMask = (~(READ_MMC_REGISTER_DWORD(pHCDevice, MMC_IMASK))) 
; 2714 :                         & MMC_IREG_INTERRUPTS;

  06370	e3a01028	 mov         r1, #0x28
  06374	e59d0050	 ldr         r0, [sp, #0x50]
  06378	eb000000	 bl          READ_MMC_REGISTER_DWORD
  0637c	e58d0018	 str         r0, [sp, #0x18]
  06380	e59d3018	 ldr         r3, [sp, #0x18]
  06384	e1e02003	 mvn         r2, r3
  06388	e3a03c1f	 mov         r3, #0x1F, 24
  0638c	e38330ff	 orr         r3, r3, #0xFF
  06390	e0023003	 and         r3, r2, r3
  06394	e58d3000	 str         r3, [sp]

; 2715 :         if( interruptMask & MMC_IREG_DAT_ERR )

  06398	e59d3000	 ldr         r3, [sp]
  0639c	e3130c01	 tst         r3, #1, 24
  063a0	0a00000f	 beq         |$LN14@SDControll|

; 2716 :         {
; 2717 :             DbgPrintZo(SDCARD_ZONE_WARN, 
; 2718 :                 (TEXT("SDControllerIstThread: Unexpected hardware timeout!\n")));

  063a4	e59f3374	 ldr         r3, [pc, #0x374]
  063a8	e5933440	 ldr         r3, [r3, #0x440]
  063ac	e3130901	 tst         r3, #1, 18
  063b0	0a000004	 beq         |$LN20@SDControll|
  063b4	e59f0390	 ldr         r0, [pc, #0x390]
  063b8	eb000000	 bl          SDCardDebugOutput
  063bc	e3a03001	 mov         r3, #1
  063c0	e58d301c	 str         r3, [sp, #0x1C]
  063c4	ea000001	 b           |$LN21@SDControll|
  063c8		 |$LN20@SDControll|
  063c8	e3a03000	 mov         r3, #0
  063cc	e58d301c	 str         r3, [sp, #0x1C]
  063d0		 |$LN21@SDControll|

; 2719 :             interrupts |= MMC_IREG_DAT_ERR;

  063d0	e59d3008	 ldr         r3, [sp, #8]
  063d4	e3833c01	 orr         r3, r3, #1, 24
  063d8	e58d3008	 str         r3, [sp, #8]

; 2720 :             fForceTimeout = TRUE;

  063dc	e3a03001	 mov         r3, #1
  063e0	e58d3004	 str         r3, [sp, #4]
  063e4		 |$LN14@SDControll|

; 2721 :         }
; 2722 :         pHCDevice->dwControllerIstTimeout = INFINITE;

  063e4	e59d3050	 ldr         r3, [sp, #0x50]
  063e8	e283203c	 add         r2, r3, #0x3C
  063ec	e3e03000	 mvn         r3, #0
  063f0	e5823000	 str         r3, [r2]
  063f4		 |$LN15@SDControll|
  063f4		 |$LN13@SDControll|

; 2723 :     }
; 2724 : 
; 2725 : 
; 2726 :         // loop until all interrupts are serviced
; 2727 :     while (interrupts) {

  063f4	e59d3008	 ldr         r3, [sp, #8]
  063f8	e3530000	 cmp         r3, #0
  063fc	0a0000b5	 beq         |$LN12@SDControll|

; 2728 :         DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2729 :                 (TEXT("SDControllerIstThread: Controller Interrupt: 0x%08X \n"),interrupts));

  06400	e59f3318	 ldr         r3, [pc, #0x318]
  06404	e5933440	 ldr         r3, [r3, #0x440]
  06408	e3130001	 tst         r3, #1
  0640c	0a000005	 beq         |$LN22@SDControll|
  06410	e59d1008	 ldr         r1, [sp, #8]
  06414	e59f032c	 ldr         r0, [pc, #0x32C]
  06418	eb000000	 bl          SDCardDebugOutput
  0641c	e3a03001	 mov         r3, #1
  06420	e58d3020	 str         r3, [sp, #0x20]
  06424	ea000001	 b           |$LN23@SDControll|
  06428		 |$LN22@SDControll|
  06428	e3a03000	 mov         r3, #0
  0642c	e58d3020	 str         r3, [sp, #0x20]
  06430		 |$LN23@SDControll|

; 2730 : 
; 2731 :         if (interrupts & MMC_IREG_TINT) {

  06430	e59d3008	 ldr         r3, [sp, #8]
  06434	e3130080	 tst         r3, #0x80
  06438	0a000006	 beq         |$LN11@SDControll|

; 2732 :                 // no one should be turning this on
; 2733 :             DEBUG_ASSERT(FALSE);

  0643c	e3a03c0a	 mov         r3, #0xA, 24
  06440	e38330ad	 orr         r3, r3, #0xAD
  06444	e59f22f0	 ldr         r2, [pc, #0x2F0]
  06448	e59f12d0	 ldr         r1, [pc, #0x2D0]
  0644c	e59f02e4	 ldr         r0, [pc, #0x2E4]
  06450	eb000000	 bl          NKDbgPrintfW
  06454	e6000010	 __debugbreak_ce
  06458		 |$LN11@SDControll|

; 2734 :         }
; 2735 : 
; 2736 :         if (interrupts & MMC_IREG_RD_STALLED) {

  06458	e59d3008	 ldr         r3, [sp, #8]
  0645c	e3130b01	 tst         r3, #1, 22
  06460	0a000006	 beq         |$LN10@SDControll|

; 2737 :                 // no one should be turning this on
; 2738 :             DEBUG_ASSERT(FALSE);

  06464	e3a03c0a	 mov         r3, #0xA, 24
  06468	e38330b2	 orr         r3, r3, #0xB2
  0646c	e59f22c8	 ldr         r2, [pc, #0x2C8]
  06470	e59f12a8	 ldr         r1, [pc, #0x2A8]
  06474	e59f02bc	 ldr         r0, [pc, #0x2BC]
  06478	eb000000	 bl          NKDbgPrintfW
  0647c	e6000010	 __debugbreak_ce
  06480		 |$LN10@SDControll|

; 2739 :         }
; 2740 : 
; 2741 :         if (interrupts & MMC_IREG_SDIO_SUSPEND_ACK) {

  06480	e59d3008	 ldr         r3, [sp, #8]
  06484	e3130a01	 tst         r3, #1, 20
  06488	0a000006	 beq         |$LN9@SDControll|

; 2742 :                 // no one should be turning this on
; 2743 :             DEBUG_ASSERT(FALSE);

  0648c	e3a03c0a	 mov         r3, #0xA, 24
  06490	e38330b7	 orr         r3, r3, #0xB7
  06494	e59f22a0	 ldr         r2, [pc, #0x2A0]
  06498	e59f1280	 ldr         r1, [pc, #0x280]
  0649c	e59f0294	 ldr         r0, [pc, #0x294]
  064a0	eb000000	 bl          NKDbgPrintfW
  064a4	e6000010	 __debugbreak_ce
  064a8		 |$LN9@SDControll|

; 2744 :         }
; 2745 : 
; 2746 :         if (interrupts & MMC_IREG_CLOCK_IS_OFF) {

  064a8	e59d3008	 ldr         r3, [sp, #8]
  064ac	e3130010	 tst         r3, #0x10
  064b0	0a00000a	 beq         |$LN8@SDControll|

; 2747 :                 // no one should be turning this on
; 2748 :             DEBUG_ASSERT(FALSE);

  064b4	e3a03c0a	 mov         r3, #0xA, 24
  064b8	e38330bc	 orr         r3, r3, #0xBC
  064bc	e59f2278	 ldr         r2, [pc, #0x278]
  064c0	e59f1258	 ldr         r1, [pc, #0x258]
  064c4	e59f026c	 ldr         r0, [pc, #0x26C]
  064c8	eb000000	 bl          NKDbgPrintfW
  064cc	e6000010	 __debugbreak_ce

; 2749 :                 // mask the interrupt
; 2750 :             CLOCK_OFF_INTERRUPT_OFF(pHCDevice);

  064d0	e3a02010	 mov         r2, #0x10
  064d4	e3e01000	 mvn         r1, #0
  064d8	e59d0050	 ldr         r0, [sp, #0x50]
  064dc	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR
  064e0		 |$LN8@SDControll|

; 2751 :         }
; 2752 : 
; 2753 :         if (interrupts & (MMC_IREG_END_CMD | MMC_IREG_RES_ERR)) {

  064e0	e59d3008	 ldr         r3, [sp, #8]
  064e4	e3130f81	 tst         r3, #0x81, 30
  064e8	0a00000c	 beq         |$LN7@SDControll|

; 2754 :             DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2755 :                 (TEXT("SDControllerIstThread: MMC_IREG_END_CMD \n")));

  064ec	e59f322c	 ldr         r3, [pc, #0x22C]
  064f0	e5933440	 ldr         r3, [r3, #0x440]
  064f4	e3130001	 tst         r3, #1
  064f8	0a000004	 beq         |$LN24@SDControll|
  064fc	e59f0240	 ldr         r0, [pc, #0x240]
  06500	eb000000	 bl          SDCardDebugOutput
  06504	e3a03001	 mov         r3, #1
  06508	e58d3024	 str         r3, [sp, #0x24]
  0650c	ea000001	 b           |$LN25@SDControll|
  06510		 |$LN24@SDControll|
  06510	e3a03000	 mov         r3, #0
  06514	e58d3024	 str         r3, [sp, #0x24]
  06518		 |$LN25@SDControll|

; 2756 :             HandleEndCommandInterrupt(pHCDevice);

  06518	e59d0050	 ldr         r0, [sp, #0x50]
  0651c	eb000000	 bl          HandleEndCommandInterrupt
  06520		 |$LN7@SDControll|

; 2757 :         }
; 2758 : 
; 2759 :         if (interrupts & MMC_IREG_STOP_CMD) {

  06520	e59d3008	 ldr         r3, [sp, #8]
  06524	e3130008	 tst         r3, #8
  06528	0a000011	 beq         |$LN6@SDControll|

; 2760 :             DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2761 :                 (TEXT("SDControllerIstThread: MMC_IREG_STOP_CMD \n")));

  0652c	e59f31ec	 ldr         r3, [pc, #0x1EC]
  06530	e5933440	 ldr         r3, [r3, #0x440]
  06534	e3130001	 tst         r3, #1
  06538	0a000004	 beq         |$LN26@SDControll|
  0653c	e59f01fc	 ldr         r0, [pc, #0x1FC]
  06540	eb000000	 bl          SDCardDebugOutput
  06544	e3a03001	 mov         r3, #1
  06548	e58d3028	 str         r3, [sp, #0x28]
  0654c	ea000001	 b           |$LN27@SDControll|
  06550		 |$LN26@SDControll|
  06550	e3a03000	 mov         r3, #0
  06554	e58d3028	 str         r3, [sp, #0x28]
  06558		 |$LN27@SDControll|

; 2762 :             DEBUG_ASSERT(FALSE);

  06558	e3a03c0a	 mov         r3, #0xA, 24
  0655c	e38330ca	 orr         r3, r3, #0xCA
  06560	e59f21d4	 ldr         r2, [pc, #0x1D4]
  06564	e59f11b4	 ldr         r1, [pc, #0x1B4]
  06568	e59f01c8	 ldr         r0, [pc, #0x1C8]
  0656c	eb000000	 bl          NKDbgPrintfW
  06570	e6000010	 __debugbreak_ce
  06574		 |$LN6@SDControll|

; 2763 :         }
; 2764 :         
; 2765 :         if (interrupts & MMC_IREG_RXFIFO_REQ ) {

  06574	e59d3008	 ldr         r3, [sp, #8]
  06578	e3130020	 tst         r3, #0x20
  0657c	0a00000c	 beq         |$LN5@SDControll|

; 2766 :             DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2767 :                 (TEXT("SDControllerIstThread: MMC_IREG_RXFIFO_REQ \n")));

  06580	e59f3198	 ldr         r3, [pc, #0x198]
  06584	e5933440	 ldr         r3, [r3, #0x440]
  06588	e3130001	 tst         r3, #1
  0658c	0a000004	 beq         |$LN28@SDControll|
  06590	e59f019c	 ldr         r0, [pc, #0x19C]
  06594	eb000000	 bl          SDCardDebugOutput
  06598	e3a03001	 mov         r3, #1
  0659c	e58d302c	 str         r3, [sp, #0x2C]
  065a0	ea000001	 b           |$LN29@SDControll|
  065a4		 |$LN28@SDControll|
  065a4	e3a03000	 mov         r3, #0
  065a8	e58d302c	 str         r3, [sp, #0x2C]
  065ac		 |$LN29@SDControll|

; 2768 :             HandleReceiveInterrupt(pHCDevice);

  065ac	e59d0050	 ldr         r0, [sp, #0x50]
  065b0	eb000000	 bl          HandleReceiveInterrupt
  065b4		 |$LN5@SDControll|

; 2769 :         }
; 2770 :         
; 2771 :         if (interrupts & MMC_IREG_TXFIFO_REQ) {

  065b4	e59d3008	 ldr         r3, [sp, #8]
  065b8	e3130040	 tst         r3, #0x40
  065bc	0a00000c	 beq         |$LN4@SDControll|

; 2772 :             DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2773 :                 (TEXT("SDControllerIstThread: MMC_IREG_TXFIFO_REQ \n")));

  065c0	e59f3158	 ldr         r3, [pc, #0x158]
  065c4	e5933440	 ldr         r3, [r3, #0x440]
  065c8	e3130001	 tst         r3, #1
  065cc	0a000004	 beq         |$LN30@SDControll|
  065d0	e59f0158	 ldr         r0, [pc, #0x158]
  065d4	eb000000	 bl          SDCardDebugOutput
  065d8	e3a03001	 mov         r3, #1
  065dc	e58d3030	 str         r3, [sp, #0x30]
  065e0	ea000001	 b           |$LN31@SDControll|
  065e4		 |$LN30@SDControll|
  065e4	e3a03000	 mov         r3, #0
  065e8	e58d3030	 str         r3, [sp, #0x30]
  065ec		 |$LN31@SDControll|

; 2774 :             HandleXmitInterrupt(pHCDevice);

  065ec	e59d0050	 ldr         r0, [sp, #0x50]
  065f0	eb000000	 bl          HandleXmitInterrupt
  065f4		 |$LN4@SDControll|

; 2775 :         }
; 2776 : 
; 2777 :         if (interrupts & MMC_IREG_PROG_DONE) {

  065f4	e59d3008	 ldr         r3, [sp, #8]
  065f8	e3130002	 tst         r3, #2
  065fc	0a00000c	 beq         |$LN3@SDControll|

; 2778 :             DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2779 :                 (TEXT("SDControllerIstThread: MMC_IREG_PROG_DONE \n")));

  06600	e59f3118	 ldr         r3, [pc, #0x118]
  06604	e5933440	 ldr         r3, [r3, #0x440]
  06608	e3130001	 tst         r3, #1
  0660c	0a000004	 beq         |$LN32@SDControll|
  06610	e59f0114	 ldr         r0, [pc, #0x114]
  06614	eb000000	 bl          SDCardDebugOutput
  06618	e3a03001	 mov         r3, #1
  0661c	e58d3034	 str         r3, [sp, #0x34]
  06620	ea000001	 b           |$LN33@SDControll|
  06624		 |$LN32@SDControll|
  06624	e3a03000	 mov         r3, #0
  06628	e58d3034	 str         r3, [sp, #0x34]
  0662c		 |$LN33@SDControll|

; 2780 :             HandleProgramDone(pHCDevice);

  0662c	e59d0050	 ldr         r0, [sp, #0x50]
  06630	eb000000	 bl          HandleProgramDone
  06634		 |$LN3@SDControll|

; 2781 :         } 
; 2782 :             // DATA transfer done should be checked last so that the 
; 2783 :             // HandleReceive and HandleTransmit
; 2784 :             // have a chance to finish copying from the fifos
; 2785 :         if (interrupts & (MMC_IREG_DATA_TRAN_DONE|MMC_IREG_DAT_ERR)) {

  06634	e59d2008	 ldr         r2, [sp, #8]
  06638	e3a03c01	 mov         r3, #1, 24
  0663c	e3833001	 orr         r3, r3, #1
  06640	e1120003	 tst         r2, r3
  06644	0a00000d	 beq         |$LN2@SDControll|

; 2786 :             DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2787 :                 (TEXT("SDControllerIstThread: MMC_IREG_DATA_TRAN_DONE \n")));

  06648	e59f30d0	 ldr         r3, [pc, #0xD0]
  0664c	e5933440	 ldr         r3, [r3, #0x440]
  06650	e3130001	 tst         r3, #1
  06654	0a000004	 beq         |$LN34@SDControll|
  06658	e59f00c8	 ldr         r0, [pc, #0xC8]
  0665c	eb000000	 bl          SDCardDebugOutput
  06660	e3a03001	 mov         r3, #1
  06664	e58d3038	 str         r3, [sp, #0x38]
  06668	ea000001	 b           |$LN35@SDControll|
  0666c		 |$LN34@SDControll|
  0666c	e3a03000	 mov         r3, #0
  06670	e58d3038	 str         r3, [sp, #0x38]
  06674		 |$LN35@SDControll|

; 2788 :             HandleTransferDone(pHCDevice, fForceTimeout);

  06674	e59d1004	 ldr         r1, [sp, #4]
  06678	e59d0050	 ldr         r0, [sp, #0x50]
  0667c	eb000000	 bl          HandleTransferDone
  06680		 |$LN2@SDControll|

; 2789 :         }
; 2790 : 
; 2791 :         if (interrupts & MMC_IREG_SDIO_INT) {

  06680	e59d3008	 ldr         r3, [sp, #8]
  06684	e3130b02	 tst         r3, #2, 22
  06688	0a00000c	 beq         |$LN1@SDControll|

; 2792 :             DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2793 :                 (TEXT("SDControllerIstThread: MMC_IREG_SDIO_INT \n")));

  0668c	e59f308c	 ldr         r3, [pc, #0x8C]
  06690	e5933440	 ldr         r3, [r3, #0x440]
  06694	e3130001	 tst         r3, #1
  06698	0a000004	 beq         |$LN36@SDControll|
  0669c	e59f0080	 ldr         r0, [pc, #0x80]
  066a0	eb000000	 bl          SDCardDebugOutput
  066a4	e3a03001	 mov         r3, #1
  066a8	e58d303c	 str         r3, [sp, #0x3C]
  066ac	ea000001	 b           |$LN37@SDControll|
  066b0		 |$LN36@SDControll|
  066b0	e3a03000	 mov         r3, #0
  066b4	e58d303c	 str         r3, [sp, #0x3C]
  066b8		 |$LN37@SDControll|

; 2794 :             HandleSDIOInterrupt(pHCDevice);

  066b8	e59d0050	 ldr         r0, [sp, #0x50]
  066bc	eb000000	 bl          HandleSDIOInterrupt
  066c0		 |$LN1@SDControll|

; 2795 :         } 
; 2796 : 
; 2797 :         interrupts = GetMMCInterrupts(pHCDevice);

  066c0	e59d0050	 ldr         r0, [sp, #0x50]
  066c4	eb000000	 bl          GetMMCInterrupts
  066c8	e58d0040	 str         r0, [sp, #0x40]
  066cc	e59d3040	 ldr         r3, [sp, #0x40]
  066d0	e58d3008	 str         r3, [sp, #8]

; 2798 :     } // while

  066d4	eaffff46	 b           |$LN13@SDControll|
  066d8		 |$LN12@SDControll|

; 2799 :     DbgPrintZo(SDH_INTERRUPT_ZONE, (TEXT("SDControllerISTHandler-------------- \n")));

  066d8	e59f3040	 ldr         r3, [pc, #0x40]
  066dc	e5933440	 ldr         r3, [r3, #0x440]
  066e0	e3130001	 tst         r3, #1
  066e4	0a000004	 beq         |$LN38@SDControll|
  066e8	e59f002c	 ldr         r0, [pc, #0x2C]
  066ec	eb000000	 bl          SDCardDebugOutput
  066f0	e3a03001	 mov         r3, #1
  066f4	e58d3044	 str         r3, [sp, #0x44]
  066f8	ea000001	 b           |$LN39@SDControll|
  066fc		 |$LN38@SDControll|
  066fc	e3a03000	 mov         r3, #0
  06700	e58d3044	 str         r3, [sp, #0x44]
  06704		 |$LN39@SDControll|

; 2800 :     return TRUE;

  06704	e3a03001	 mov         r3, #1
  06708	e58d300c	 str         r3, [sp, #0xC]

; 2801 : }

  0670c	e59d000c	 ldr         r0, [sp, #0xC]
  06710	e28dd048	 add         sp, sp, #0x48
  06714	e89d6000	 ldmia       sp, {sp, lr}
  06718	e12fff1e	 bx          lr
  0671c		 |$LN43@SDControll|
  0671c		 |$LN44@SDControll|
  0671c	00000000	 DCD         |??_C@_1EO@FGGEDCCK@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  06720		 |$LN45@SDControll|
  06720	00000000	 DCD         |dpCurSettings|
  06724		 |$LN46@SDControll|
  06724	00000000	 DCD         |??_C@_1FG@NGLEDICK@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@|
  06728		 |$LN47@SDControll|
  06728	00000000	 DCD         |??_C@_1GC@EKKLCNJE@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@|
  0672c		 |$LN48@SDControll|
  0672c	00000000	 DCD         |??_C@_1FI@BKFBGNMM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@|
  06730		 |$LN49@SDControll|
  06730	00000000	 DCD         |??_C@_1FK@IINGFEFN@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@|
  06734		 |$LN50@SDControll|
  06734	00000000	 DCD         |??_C@_1FK@LHAIIJOM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@|
  06738		 |$LN51@SDControll|
  06738	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  0673c		 |$LN52@SDControll|
  0673c	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  06740		 |$LN53@SDControll|
  06740	00000000	 DCD         |??_C@_1FG@CNHIBEGH@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@|
  06744		 |$LN54@SDControll|
  06744	00000000	 DCD         |??_C@_1FE@GLKNAGNO@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAM?$AAC?$AA_?$AAI?$AAR?$AAE?$AAG?$AA_@|
  06748		 |$LN55@SDControll|
  06748	00000000	 DCD         |??_C@_1GM@GNNAIDMN@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe@|
  0674c		 |$LN56@SDControll|
  0674c	00000000	 DCD         |??_C@_1GK@KLMEEMCM@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe@|
  06750		 |$LN57@SDControll|
  06750	00000000	 DCD         |??_C@_1EM@EPMGDGON@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAS?$AAT?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL?$AA?$CL@|
  06754		 |$M45427|

			 ENDP  ; |SDControllerISTHandler|

	EXPORT	|??_C@_1EO@KHLFPECB@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@LHLMCMMJ@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@JPKGBDPC@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5@| [ DATA ] ; `string'

  00118			 AREA	 |.pdata|, PDATA
|$T45456| DCD	|$LN16@SDControll@2|
	DCD	0x40006104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KHLFPECB@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAx@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "T", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "E"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@LHLMCMMJ@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "a"
	DCB	0x0, "i", 0x0, "t", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, "!", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, " "
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@JPKGBDPC@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5@| DCB "S"
	DCB	0x0, "D", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, "I"
	DCB	0x0, "s", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "w", 0x0, "a"
	DCB	0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, ","
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "C", 0x0, "E", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  06754			 AREA	 |.text|, CODE, ARM

  06754		 |SDControllerIstThread| PROC

; 2810 : {

  06754		 |$LN16@SDControll@2|
  06754	e1a0c00d	 mov         r12, sp
  06758	e92d0001	 stmdb       sp!, {r0}
  0675c	e92d5000	 stmdb       sp!, {r12, lr}
  06760	e24dd020	 sub         sp, sp, #0x20
  06764		 |$M45453|

; 2811 :     DWORD waitStatus;    // wait status
; 2812 : 
; 2813 :     if (!CeSetThreadPriority(GetCurrentThread(), 
; 2814 :         pHCDevice->ControllerIstThreadPriority)) {

  06764	eb000000	 bl          GetCurrentThread
  06768	e58d0008	 str         r0, [sp, #8]
  0676c	e59d3028	 ldr         r3, [sp, #0x28]
  06770	e2833038	 add         r3, r3, #0x38
  06774	e5931000	 ldr         r1, [r3]
  06778	e59d0008	 ldr         r0, [sp, #8]
  0677c	eb000000	 bl          CeSetThreadPriority
  06780	e58d000c	 str         r0, [sp, #0xC]
  06784	e59d300c	 ldr         r3, [sp, #0xC]
  06788	e3530000	 cmp         r3, #0
  0678c	1a00000a	 bne         |$LN5@SDControll@2|

; 2815 :         DbgPrintZo(SDCARD_ZONE_WARN, 
; 2816 :             (TEXT("SDControllerIstThread: warning, failed to set CEThreadPriority \n")));

  06790	e59f3138	 ldr         r3, [pc, #0x138]
  06794	e5933440	 ldr         r3, [r3, #0x440]
  06798	e3130901	 tst         r3, #1, 18
  0679c	0a000004	 beq         |$LN8@SDControll@2|
  067a0	e59f012c	 ldr         r0, [pc, #0x12C]
  067a4	eb000000	 bl          SDCardDebugOutput
  067a8	e3a03001	 mov         r3, #1
  067ac	e58d3010	 str         r3, [sp, #0x10]
  067b0	ea000001	 b           |$LN9@SDControll@2|
  067b4		 |$LN8@SDControll@2|
  067b4	e3a03000	 mov         r3, #0
  067b8	e58d3010	 str         r3, [sp, #0x10]
  067bc		 |$LN9@SDControll@2|
  067bc		 |$LN5@SDControll@2|
  067bc		 |$LN4@SDControll@2|

; 2817 :     }
; 2818 : 
; 2819 :     while(1) {
; 2820 :         waitStatus = WaitForSingleObject(pHCDevice->hControllerInterruptEvent, 
; 2821 :                                          pHCDevice->dwControllerIstTimeout);

  067bc	e59d3028	 ldr         r3, [sp, #0x28]
  067c0	e283303c	 add         r3, r3, #0x3C
  067c4	e5931000	 ldr         r1, [r3]
  067c8	e59d3028	 ldr         r3, [sp, #0x28]
  067cc	e2833030	 add         r3, r3, #0x30
  067d0	e5930000	 ldr         r0, [r3]
  067d4	eb000000	 bl          WaitForSingleObject
  067d8	e58d0014	 str         r0, [sp, #0x14]
  067dc	e59d3014	 ldr         r3, [sp, #0x14]
  067e0	e58d3000	 str         r3, [sp]

; 2822 : 
; 2823 :         if (WAIT_FAILED == waitStatus) {

  067e4	e59d3000	 ldr         r3, [sp]
  067e8	e3730001	 cmn         r3, #1
  067ec	1a00000e	 bne         |$LN2@SDControll@2|

; 2824 :             DbgPrintZo(SDCARD_ZONE_WARN, 
; 2825 :                 (TEXT("SDControllerIstThread: Wait Failed! 0x%08X \n"), waitStatus));

  067f0	e59f30d8	 ldr         r3, [pc, #0xD8]
  067f4	e5933440	 ldr         r3, [r3, #0x440]
  067f8	e3130901	 tst         r3, #1, 18
  067fc	0a000005	 beq         |$LN10@SDControll@2|
  06800	e59d1000	 ldr         r1, [sp]
  06804	e59f00c0	 ldr         r0, [pc, #0xC0]
  06808	eb000000	 bl          SDCardDebugOutput
  0680c	e3a03001	 mov         r3, #1
  06810	e58d3018	 str         r3, [sp, #0x18]
  06814	ea000001	 b           |$LN11@SDControll@2|
  06818		 |$LN10@SDControll@2|
  06818	e3a03000	 mov         r3, #0
  0681c	e58d3018	 str         r3, [sp, #0x18]
  06820		 |$LN11@SDControll@2|

; 2826 :                 // bail out
; 2827 :             return 0;

  06820	e3a03000	 mov         r3, #0
  06824	e58d3004	 str         r3, [sp, #4]
  06828	ea000022	 b           |$LN6@SDControll@2|
  0682c		 |$LN2@SDControll@2|

; 2828 :         }
; 2829 : 
; 2830 :         if (pHCDevice->DriverShutdown) {

  0682c	e59d3028	 ldr         r3, [sp, #0x28]
  06830	e2833c0a	 add         r3, r3, #0xA, 24
  06834	e28330d4	 add         r3, r3, #0xD4
  06838	e5933000	 ldr         r3, [r3]
  0683c	e3530000	 cmp         r3, #0
  06840	0a000004	 beq         |$LN1@SDControll@2|

; 2831 :             DbgPrintZo(1, (TEXT("SDControllerIstThread: Thread Exiting\n")));

  06844	e59f007c	 ldr         r0, [pc, #0x7C]
  06848	eb000000	 bl          SDCardDebugOutput

; 2832 :             return 0;

  0684c	e3a03000	 mov         r3, #0
  06850	e58d3004	 str         r3, [sp, #4]
  06854	ea000017	 b           |$LN6@SDControll@2|
  06858		 |$LN1@SDControll@2|

; 2833 :         }
; 2834 :         ACQUIRE_LOCK(pHCDevice);

  06858	e59d3028	 ldr         r3, [sp, #0x28]
  0685c	e2833c0a	 add         r3, r3, #0xA, 24
  06860	e28300d8	 add         r0, r3, #0xD8
  06864	eb000000	 bl          EnterCriticalSection

; 2835 :         SDControllerISTHandler(pHCDevice, waitStatus != WAIT_OBJECT_0 );

  06868	e59d3000	 ldr         r3, [sp]
  0686c	e3530000	 cmp         r3, #0
  06870	0a000002	 beq         |$LN12@SDControll@2|
  06874	e3a03001	 mov         r3, #1
  06878	e58d301c	 str         r3, [sp, #0x1C]
  0687c	ea000001	 b           |$LN13@SDControll@2|
  06880		 |$LN12@SDControll@2|
  06880	e3a03000	 mov         r3, #0
  06884	e58d301c	 str         r3, [sp, #0x1C]
  06888		 |$LN13@SDControll@2|
  06888	e59d101c	 ldr         r1, [sp, #0x1C]
  0688c	e59d0028	 ldr         r0, [sp, #0x28]
  06890	eb000000	 bl          SDControllerISTHandler

; 2836 :         RELEASE_LOCK(pHCDevice);

  06894	e59d3028	 ldr         r3, [sp, #0x28]
  06898	e2833c0a	 add         r3, r3, #0xA, 24
  0689c	e28300d8	 add         r0, r3, #0xD8
  068a0	eb000000	 bl          LeaveCriticalSection

; 2837 :         InterruptDone(pHCDevice->dwSysintrSDMMC);

  068a4	e59d3028	 ldr         r3, [sp, #0x28]
  068a8	e283302c	 add         r3, r3, #0x2C
  068ac	e5930000	 ldr         r0, [r3]
  068b0	eb000000	 bl          InterruptDone

; 2838 :     }

  068b4	eaffffc0	 b           |$LN4@SDControll@2|
  068b8		 |$LN6@SDControll@2|

; 2839 : 
; 2840 : }

  068b8	e59d0004	 ldr         r0, [sp, #4]
  068bc	e28dd020	 add         sp, sp, #0x20
  068c0	e89d6000	 ldmia       sp, {sp, lr}
  068c4	e12fff1e	 bx          lr
  068c8		 |$LN17@SDControll@2|
  068c8		 |$LN18@SDControll@2|
  068c8	00000000	 DCD         |??_C@_1EO@KHLFPECB@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAx@|
  068cc		 |$LN19@SDControll@2|
  068cc	00000000	 DCD         |??_C@_1FK@LHLMCMMJ@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAW?$AAa?$AAi?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl@|
  068d0		 |$LN20@SDControll@2|
  068d0	00000000	 DCD         |dpCurSettings|
  068d4		 |$LN21@SDControll@2|
  068d4	00000000	 DCD         |??_C@_1IC@JPKGBDPC@?$AAS?$AAD?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AA?0?$AA?5@|
  068d8		 |$M45454|

			 ENDP  ; |SDControllerIstThread|

	EXPORT	|??_C@_1FO@PJLIMEKH@?$AAC?$AAa?$AAr?$AAd?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAF?$AAu?$AAl?$AAl@| [ DATA ] ; `string'
	EXPORT	|ProcessCardInsertion|

  00120			 AREA	 |.pdata|, PDATA
|$T45468| DCD	|$LN8@ProcessCar|
	DCD	0x40003804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@PJLIMEKH@?$AAC?$AAa?$AAr?$AAd?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAF?$AAu?$AAl?$AAl@| DCB "C"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, "D", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "I", 0x0, "s", 0x0, "t"
	DCB	0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "F", 0x0, "u", 0x0, "l"
	DCB	0x0, "l", 0x0, "y", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "s"
	DCB	0x0, "e", 0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "!", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  068d8			 AREA	 |.text|, CODE, ARM

  068d8		 |ProcessCardInsertion| PROC

; 2844 : {

  068d8		 |$LN8@ProcessCar|
  068d8	e1a0c00d	 mov         r12, sp
  068dc	e92d0001	 stmdb       sp!, {r0}
  068e0	e92d5000	 stmdb       sp!, {r12, lr}
  068e4	e24dd00c	 sub         sp, sp, #0xC
  068e8		 |$M45465|

; 2845 :     DWORD initializationClock = SD_DEFAULT_CARD_ID_CLOCK_RATE;

  068e8	e3a03b61	 mov         r3, #0x61, 22
  068ec	e3833e2a	 orr         r3, r3, #0x2A, 28
  068f0	e58d3004	 str         r3, [sp, #4]

; 2846 : 
; 2847 :     PSDH_HARDWARE_CONTEXT pHCDevice = (PSDH_HARDWARE_CONTEXT)pContext;

  068f4	e59d3014	 ldr         r3, [sp, #0x14]
  068f8	e58d3000	 str         r3, [sp]

; 2848 :     if (!pHCDevice->DevicePresent) {

  068fc	e59d3000	 ldr         r3, [sp]
  06900	e2833c0d	 add         r3, r3, #0xD, 24
  06904	e2833048	 add         r3, r3, #0x48
  06908	e5933000	 ldr         r3, [r3]
  0690c	e3530000	 cmp         r3, #0
  06910	1a000023	 bne         |$LN1@ProcessCar|

; 2849 :             // if we have stable insertion and there wasn't a device mark it
; 2850 :         DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2851 :             (TEXT("CardDetectIstThread: Device Fully Inserted ! \n"))); 

  06914	e59f3098	 ldr         r3, [pc, #0x98]
  06918	e5933440	 ldr         r3, [r3, #0x440]
  0691c	e3130001	 tst         r3, #1
  06920	0a000004	 beq         |$LN4@ProcessCar|
  06924	e59f0084	 ldr         r0, [pc, #0x84]
  06928	eb000000	 bl          SDCardDebugOutput
  0692c	e3a03001	 mov         r3, #1
  06930	e58d3008	 str         r3, [sp, #8]
  06934	ea000001	 b           |$LN5@ProcessCar|
  06938		 |$LN4@ProcessCar|
  06938	e3a03000	 mov         r3, #0
  0693c	e58d3008	 str         r3, [sp, #8]
  06940		 |$LN5@ProcessCar|

; 2852 :             // mark that the card is in the slot
; 2853 :         pHCDevice->DevicePresent = TRUE;

  06940	e59d3000	 ldr         r3, [sp]
  06944	e2833c0d	 add         r3, r3, #0xD, 24
  06948	e2832048	 add         r2, r3, #0x48
  0694c	e3a03001	 mov         r3, #1
  06950	e5823000	 str         r3, [r2]

; 2854 :     
; 2855 :             // flag that this is the first command sent
; 2856 :         pHCDevice->SendInitClocks = TRUE;

  06954	e59d3000	 ldr         r3, [sp]
  06958	e2833c0a	 add         r3, r3, #0xA, 24
  0695c	e28320ec	 add         r2, r3, #0xEC
  06960	e3a03001	 mov         r3, #1
  06964	e5823000	 str         r3, [r2]

; 2857 : 
; 2858 :             // turn the Multimedia Card power on
; 2859 :         MMCPowerControl( TRUE );

  06968	e3a00001	 mov         r0, #1
  0696c	eb000000	 bl          MMCPowerControl

; 2860 : 
; 2861 :             // reset the clock to the ID rate
; 2862 :             // shut off clock first
; 2863 :         SDClockOff(pHCDevice);

  06970	e59d0000	 ldr         r0, [sp]
  06974	eb000000	 bl          SDClockOff

; 2864 :             // set rate
; 2865 :         SDSetRate(pHCDevice, &initializationClock);

  06978	e28d1004	 add         r1, sp, #4
  0697c	e59d0000	 ldr         r0, [sp]
  06980	eb000000	 bl          SDSetRate

; 2866 : 
; 2867 :             // give the card some time for initialization
; 2868 :         Sleep(100);

  06984	e3a00064	 mov         r0, #0x64
  06988	eb000000	 bl          Sleep

; 2869 : 
; 2870 :             // indicate the slot change
; 2871 :         SDHCDIndicateSlotStateChange(pHCDevice->pHCContext, 
; 2872 :                                         0,
; 2873 :                                         DeviceInserted);

  0698c	e3a02002	 mov         r2, #2
  06990	e3a01000	 mov         r1, #0
  06994	e59d3000	 ldr         r3, [sp]
  06998	e2833018	 add         r3, r3, #0x18
  0699c	e5930000	 ldr         r0, [r3]
  069a0	eb000000	 bl          SDHCDIndicateSlotStateChange
  069a4		 |$LN1@ProcessCar|

; 2874 :     }
; 2875 : }

  069a4	e28dd00c	 add         sp, sp, #0xC
  069a8	e89d6000	 ldmia       sp, {sp, lr}
  069ac	e12fff1e	 bx          lr
  069b0		 |$LN9@ProcessCar|
  069b0		 |$LN10@ProcessCar|
  069b0	00000000	 DCD         |??_C@_1FO@PJLIMEKH@?$AAC?$AAa?$AAr?$AAd?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAF?$AAu?$AAl?$AAl@|
  069b4		 |$LN11@ProcessCar|
  069b4	00000000	 DCD         |dpCurSettings|
  069b8		 |$M45466|

			 ENDP  ; |ProcessCardInsertion|

	EXPORT	|??_C@_1FM@IFMJPHAN@?$AAC?$AAa?$AAr?$AAd?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAR?$AAe?$AAm?$AAo?$AAv?$AAa@| [ DATA ] ; `string'
	EXPORT	|ProcessCardRemoval|

  00128			 AREA	 |.pdata|, PDATA
|$T45478| DCD	|$LN12@ProcessCar@2|
	DCD	0x40008504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@IFMJPHAN@?$AAC?$AAa?$AAr?$AAd?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAR?$AAe?$AAm?$AAo?$AAv?$AAa@| DCB "C"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, "D", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "I", 0x0, "s", 0x0, "t"
	DCB	0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, ":", 0x0, " ", 0x0, "C", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  069b8			 AREA	 |.text|, CODE, ARM

  069b8		 |ProcessCardRemoval| PROC

; 2878 : {

  069b8		 |$LN12@ProcessCar@2|
  069b8	e1a0c00d	 mov         r12, sp
  069bc	e92d0001	 stmdb       sp!, {r0}
  069c0	e92d5000	 stmdb       sp!, {r12, lr}
  069c4	e24dd00c	 sub         sp, sp, #0xC
  069c8		 |$M45475|

; 2879 :     PSDH_HARDWARE_CONTEXT pHCDevice = (PSDH_HARDWARE_CONTEXT)pContext;

  069c8	e59d3014	 ldr         r3, [sp, #0x14]
  069cc	e58d3000	 str         r3, [sp]

; 2880 :     PSD_BUS_REQUEST pRequest;       // current request
; 2881 : 
; 2882 :     if( pHCDevice->DevicePresent )

  069d0	e59d3000	 ldr         r3, [sp]
  069d4	e2833c0d	 add         r3, r3, #0xD, 24
  069d8	e2833048	 add         r3, r3, #0x48
  069dc	e5933000	 ldr         r3, [r3]
  069e0	e3530000	 cmp         r3, #0
  069e4	0a000073	 beq         |$LN5@ProcessCar@2|

; 2883 :     {
; 2884 :         DbgPrintZo(SDH_INTERRUPT_ZONE, 
; 2885 :             (TEXT("CardDetectIstThread: Card Removal Detected! \n"))); 

  069e8	e59f31d8	 ldr         r3, [pc, #0x1D8]
  069ec	e5933440	 ldr         r3, [r3, #0x440]
  069f0	e3130001	 tst         r3, #1
  069f4	0a000004	 beq         |$LN8@ProcessCar@2|
  069f8	e59f01c4	 ldr         r0, [pc, #0x1C4]
  069fc	eb000000	 bl          SDCardDebugOutput
  06a00	e3a03001	 mov         r3, #1
  06a04	e58d3008	 str         r3, [sp, #8]
  06a08	ea000001	 b           |$LN9@ProcessCar@2|
  06a0c		 |$LN8@ProcessCar@2|
  06a0c	e3a03000	 mov         r3, #0
  06a10	e58d3008	 str         r3, [sp, #8]
  06a14		 |$LN9@ProcessCar@2|

; 2886 :             // mark that the card has been removed
; 2887 :         pHCDevice->DevicePresent = FALSE;

  06a14	e59d3000	 ldr         r3, [sp]
  06a18	e2833c0d	 add         r3, r3, #0xD, 24
  06a1c	e2832048	 add         r2, r3, #0x48
  06a20	e3a03000	 mov         r3, #0
  06a24	e5823000	 str         r3, [r2]

; 2888 : 
; 2889 :         
; 2890 :             // indicate the slot change 
; 2891 :         SDHCDIndicateSlotStateChange(pHCDevice->pHCContext, 
; 2892 :                                         0,
; 2893 :                                         DeviceEjected); 

  06a28	e3a02001	 mov         r2, #1
  06a2c	e3a01000	 mov         r1, #0
  06a30	e59d3000	 ldr         r3, [sp]
  06a34	e2833018	 add         r3, r3, #0x18
  06a38	e5930000	 ldr         r0, [r3]
  06a3c	eb000000	 bl          SDHCDIndicateSlotStateChange

; 2894 : 
; 2895 :             // shut off clock first
; 2896 :         SDClockOff(pHCDevice);

  06a40	e59d0000	 ldr         r0, [sp]
  06a44	eb000000	 bl          SDClockOff

; 2897 : 
; 2898 :         // Complete any pending request
; 2899 :         if((pRequest = pHCDevice->pCurrentRequest) != NULL)

  06a48	e59d3000	 ldr         r3, [sp]
  06a4c	e283301c	 add         r3, r3, #0x1C
  06a50	e5933000	 ldr         r3, [r3]
  06a54	e58d3004	 str         r3, [sp, #4]
  06a58	e59d3004	 ldr         r3, [sp, #4]
  06a5c	e3530000	 cmp         r3, #0
  06a60	0a000052	 beq         |$LN4@ProcessCar@2|

; 2900 :         {
; 2901 :             ALL_INTERRUPTS_OFF(pHCDevice);

  06a64	e3a02c1f	 mov         r2, #0x1F, 24
  06a68	e38220ff	 orr         r2, r2, #0xFF
  06a6c	e3e01000	 mvn         r1, #0
  06a70	e59d0000	 ldr         r0, [sp]
  06a74	eb000000	 bl          READ_MOD_WRITE_MMC_IMASK_AND_OR

; 2902 : 
; 2903 :             // if we were doing a DMA transfer, stop the DMA and reset the interrupt status
; 2904 :             if( pHCDevice->fDMATransfer )

  06a78	e59d3000	 ldr         r3, [sp]
  06a7c	e2833c0a	 add         r3, r3, #0xA, 24
  06a80	e28330a8	 add         r3, r3, #0xA8
  06a84	e5933000	 ldr         r3, [r3]
  06a88	e3530000	 cmp         r3, #0
  06a8c	0a000041	 beq         |$LN3@ProcessCar@2|

; 2905 :             {
; 2906 :                 pHCDevice->fDMATransferCancelled = TRUE;

  06a90	e59d3000	 ldr         r3, [sp]
  06a94	e2832eab	 add         r2, r3, #0xAB, 28
  06a98	e3a03001	 mov         r3, #1
  06a9c	e5823000	 str         r3, [r2]

; 2907 :                 pHCDevice->pDMARegisters->dcsr[pHCDevice->dwDmaChannel] &=  !(DCSR_RUN | DCSR_STOPIRQEN);

  06aa0	e59d3000	 ldr         r3, [sp]
  06aa4	e283000c	 add         r0, r3, #0xC
  06aa8	e59d3000	 ldr         r3, [sp]
  06aac	e2833c0a	 add         r3, r3, #0xA, 24
  06ab0	e28330a4	 add         r3, r3, #0xA4
  06ab4	e5931000	 ldr         r1, [r3]
  06ab8	e3a03004	 mov         r3, #4
  06abc	e0020391	 mul         r2, r1, r3
  06ac0	e5903000	 ldr         r3, [r0]
  06ac4	e0833002	 add         r3, r3, r2
  06ac8	e5933000	 ldr         r3, [r3]
  06acc	e203e000	 and         lr, r3, #0
  06ad0	e59d3000	 ldr         r3, [sp]
  06ad4	e283000c	 add         r0, r3, #0xC
  06ad8	e59d3000	 ldr         r3, [sp]
  06adc	e2833c0a	 add         r3, r3, #0xA, 24
  06ae0	e28330a4	 add         r3, r3, #0xA4
  06ae4	e5931000	 ldr         r1, [r3]
  06ae8	e3a03004	 mov         r3, #4
  06aec	e0020391	 mul         r2, r1, r3
  06af0	e5903000	 ldr         r3, [r0]
  06af4	e0833002	 add         r3, r3, r2
  06af8	e583e000	 str         lr, [r3]

; 2908 : 
; 2909 :                 if( !(pHCDevice->fDMAUsingDriverBuffer) )

  06afc	e59d3000	 ldr         r3, [sp]
  06b00	e2833c0a	 add         r3, r3, #0xA, 24
  06b04	e28330ac	 add         r3, r3, #0xAC
  06b08	e5933000	 ldr         r3, [r3]
  06b0c	e3530000	 cmp         r3, #0
  06b10	1a000018	 bne         |$LN2@ProcessCar@2|

; 2910 :                 { // we use client provided DMA buffer.  Unlock the memory pages where it is located.
; 2911 :                     if( pHCDevice->pClientBuffer )

  06b14	e59d3000	 ldr         r3, [sp]
  06b18	e2833c0a	 add         r3, r3, #0xA, 24
  06b1c	e28330b8	 add         r3, r3, #0xB8
  06b20	e5933000	 ldr         r3, [r3]
  06b24	e3530000	 cmp         r3, #0
  06b28	0a000012	 beq         |$LN1@ProcessCar@2|

; 2912 :                     {
; 2913 :                         UnlockPages( pHCDevice->pClientBuffer, pHCDevice->dwClientBufferSize );

  06b2c	e59d3000	 ldr         r3, [sp]
  06b30	e2833c0a	 add         r3, r3, #0xA, 24
  06b34	e28330b4	 add         r3, r3, #0xB4
  06b38	e5931000	 ldr         r1, [r3]
  06b3c	e59d3000	 ldr         r3, [sp]
  06b40	e2833c0a	 add         r3, r3, #0xA, 24
  06b44	e28330b8	 add         r3, r3, #0xB8
  06b48	e5930000	 ldr         r0, [r3]
  06b4c	eb000000	 bl          UnlockPages

; 2914 :                         pHCDevice->pClientBuffer = NULL;

  06b50	e59d3000	 ldr         r3, [sp]
  06b54	e2833c0a	 add         r3, r3, #0xA, 24
  06b58	e28320b8	 add         r2, r3, #0xB8
  06b5c	e3a03000	 mov         r3, #0
  06b60	e5823000	 str         r3, [r2]

; 2915 :                         pHCDevice->dwClientBufferSize = 0;

  06b64	e59d3000	 ldr         r3, [sp]
  06b68	e2833c0a	 add         r3, r3, #0xA, 24
  06b6c	e28320b4	 add         r2, r3, #0xB4
  06b70	e3a03000	 mov         r3, #0
  06b74	e5823000	 str         r3, [r2]
  06b78		 |$LN1@ProcessCar@2|
  06b78		 |$LN2@ProcessCar@2|

; 2916 :                     }
; 2917 :                 }
; 2918 : 
; 2919 :                 #ifdef DEBUG
; 2920 :                     pHCDevice->fDMATransferInProgress = FALSE;

  06b78	e59d3000	 ldr         r3, [sp]
  06b7c	e2832ead	 add         r2, r3, #0xAD, 28
  06b80	e3a03000	 mov         r3, #0
  06b84	e5823000	 str         r3, [r2]

; 2921 :                 #endif
; 2922 : 
; 2923 :                 InterruptDone(pHCDevice->dwDmaSysIntr);

  06b88	e59d3000	 ldr         r3, [sp]
  06b8c	e2833ea9	 add         r3, r3, #0xA9, 28
  06b90	e5930000	 ldr         r0, [r3]
  06b94	eb000000	 bl          InterruptDone
  06b98		 |$LN3@ProcessCar@2|

; 2924 :             }
; 2925 : 
; 2926 :             IndicateBusRequestComplete(pHCDevice->pHCContext,
; 2927 :                                             pRequest ,
; 2928 :                                             SD_API_STATUS_DEVICE_REMOVED);

  06b98	e3a02147	 mov         r2, #0x47, 2
  06b9c	e59d1004	 ldr         r1, [sp, #4]
  06ba0	e59d3000	 ldr         r3, [sp]
  06ba4	e2833018	 add         r3, r3, #0x18
  06ba8	e5930000	 ldr         r0, [r3]
  06bac	eb000000	 bl          IndicateBusRequestComplete
  06bb0		 |$LN4@ProcessCar@2|

; 2929 :         }
; 2930 : 
; 2931 :             // turn the Multimedia Card power off
; 2932 :         MMCPowerControl( FALSE );

  06bb0	e3a00000	 mov         r0, #0
  06bb4	eb000000	 bl          MMCPowerControl
  06bb8		 |$LN5@ProcessCar@2|

; 2933 :     }
; 2934 : }

  06bb8	e28dd00c	 add         sp, sp, #0xC
  06bbc	e89d6000	 ldmia       sp, {sp, lr}
  06bc0	e12fff1e	 bx          lr
  06bc4		 |$LN13@ProcessCar@2|
  06bc4		 |$LN14@ProcessCar@2|
  06bc4	00000000	 DCD         |??_C@_1FM@IFMJPHAN@?$AAC?$AAa?$AAr?$AAd?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AAI?$AAs?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAa?$AAr?$AAd?$AA?5?$AAR?$AAe?$AAm?$AAo?$AAv?$AAa@|
  06bc8		 |$LN15@ProcessCar@2|
  06bc8	00000000	 DCD         |dpCurSettings|
  06bcc		 |$M45476|

			 ENDP  ; |ProcessCardRemoval|

	EXPORT	|DriverShutdown|

  00130			 AREA	 |.pdata|, PDATA
|$T45487| DCD	|$LN5@DriverShut|
	DCD	0x40000f04
; Function compile flags: /Odtp

  06bcc			 AREA	 |.text|, CODE, ARM

  06bcc		 |DriverShutdown| PROC

; 2937 : {

  06bcc		 |$LN5@DriverShut|
  06bcc	e1a0c00d	 mov         r12, sp
  06bd0	e92d0001	 stmdb       sp!, {r0}
  06bd4	e92d5000	 stmdb       sp!, {r12, lr}
  06bd8	e24dd008	 sub         sp, sp, #8
  06bdc		 |$M45484|

; 2938 :     PSDH_HARDWARE_CONTEXT pHCDevice = (PSDH_HARDWARE_CONTEXT)pContext;

  06bdc	e59d3010	 ldr         r3, [sp, #0x10]
  06be0	e58d3000	 str         r3, [sp]

; 2939 :     return pHCDevice->DriverShutdown;

  06be4	e59d3000	 ldr         r3, [sp]
  06be8	e2833c0a	 add         r3, r3, #0xA, 24
  06bec	e28330d4	 add         r3, r3, #0xD4
  06bf0	e5933000	 ldr         r3, [r3]
  06bf4	e58d3004	 str         r3, [sp, #4]

; 2940 : }

  06bf8	e59d0004	 ldr         r0, [sp, #4]
  06bfc	e28dd008	 add         sp, sp, #8
  06c00	e89d6000	 ldmia       sp, {sp, lr}
  06c04	e12fff1e	 bx          lr
  06c08		 |$M45485|

			 ENDP  ; |DriverShutdown|

	EXPORT	|SDControllerPowerDown|
	IMPORT	|SDHCDPowerUpDown|

  00138			 AREA	 |.pdata|, PDATA
|$T45494| DCD	|$LN8@SDControll@3|
	DCD	0x40002704
; Function compile flags: /Odtp

  06c08			 AREA	 |.text|, CODE, ARM

  06c08		 |SDControllerPowerDown| PROC

; 2943 : {

  06c08		 |$LN8@SDControll@3|
  06c08	e1a0c00d	 mov         r12, sp
  06c0c	e92d0001	 stmdb       sp!, {r0}
  06c10	e92d5000	 stmdb       sp!, {r12, lr}
  06c14	e24dd004	 sub         sp, sp, #4
  06c18		 |$M45491|

; 2944 :     ASSERT( pHCDevice );

  06c18	e59d300c	 ldr         r3, [sp, #0xC]
  06c1c	e3530000	 cmp         r3, #0
  06c20	0a000002	 beq         |$LN4@SDControll@3|
  06c24	e3a03001	 mov         r3, #1
  06c28	e58d3000	 str         r3, [sp]
  06c2c	ea000007	 b           |$LN5@SDControll@3|
  06c30		 |$LN4@SDControll@3|
  06c30	e3a03d2e	 mov         r3, #0x2E, 26
  06c34	e59f2064	 ldr         r2, [pc, #0x64]
  06c38	e59f105c	 ldr         r1, [pc, #0x5C]
  06c3c	e59f0054	 ldr         r0, [pc, #0x54]
  06c40	eb000000	 bl          NKDbgPrintfW
  06c44	e6000010	 __debugbreak_ce
  06c48	e3a03000	 mov         r3, #0
  06c4c	e58d3000	 str         r3, [sp]
  06c50		 |$LN5@SDControll@3|

; 2945 :     if( !pHCDevice )

  06c50	e59d300c	 ldr         r3, [sp, #0xC]
  06c54	e3530000	 cmp         r3, #0
  06c58	1a000000	 bne         |$LN1@SDControll@3|

; 2946 :         return;

  06c5c	ea00000a	 b           |$LN2@SDControll@3|
  06c60		 |$LN1@SDControll@3|

; 2947 : 
; 2948 :     // Notify the SD Bus driver of the PowerDown event
; 2949 :     SDHCDPowerUpDown(pHCDevice->pHCContext, FALSE, FALSE, 0);

  06c60	e3a03000	 mov         r3, #0
  06c64	e3a02000	 mov         r2, #0
  06c68	e3a01000	 mov         r1, #0
  06c6c	e59d000c	 ldr         r0, [sp, #0xC]
  06c70	e2800018	 add         r0, r0, #0x18
  06c74	e5900000	 ldr         r0, [r0]
  06c78	eb000000	 bl          SDHCDPowerUpDown

; 2950 : 
; 2951 :     // shut off clock first
; 2952 :     SDClockOff(pHCDevice);

  06c7c	e59d000c	 ldr         r0, [sp, #0xC]
  06c80	eb000000	 bl          SDClockOff

; 2953 : 
; 2954 :     // turn the Multimedia Card power on
; 2955 :     MMCPowerControl( FALSE );

  06c84	e3a00000	 mov         r0, #0
  06c88	eb000000	 bl          MMCPowerControl
  06c8c		 |$LN2@SDControll@3|

; 2956 : }

  06c8c	e28dd004	 add         sp, sp, #4
  06c90	e89d6000	 ldmia       sp, {sp, lr}
  06c94	e12fff1e	 bx          lr
  06c98		 |$LN9@SDControll@3|
  06c98		 |$LN10@SDControll@3|
  06c98	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  06c9c		 |$LN11@SDControll@3|
  06c9c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  06ca0		 |$LN12@SDControll@3|
  06ca0	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  06ca4		 |$M45492|

			 ENDP  ; |SDControllerPowerDown|

	EXPORT	|SDControllerPowerUp|
	IMPORT	|SimulateCardInsertion|

  00140			 AREA	 |.pdata|, PDATA
|$T45505| DCD	|$LN8@SDControll@4|
	DCD	0x40002404
; Function compile flags: /Odtp

  06ca4			 AREA	 |.text|, CODE, ARM

  06ca4		 |SDControllerPowerUp| PROC

; 2959 : {

  06ca4		 |$LN8@SDControll@4|
  06ca4	e1a0c00d	 mov         r12, sp
  06ca8	e92d0001	 stmdb       sp!, {r0}
  06cac	e92d5000	 stmdb       sp!, {r12, lr}
  06cb0	e24dd004	 sub         sp, sp, #4
  06cb4		 |$M45502|

; 2960 :     ASSERT( pHCDevice );

  06cb4	e59d300c	 ldr         r3, [sp, #0xC]
  06cb8	e3530000	 cmp         r3, #0
  06cbc	0a000002	 beq         |$LN4@SDControll@4|
  06cc0	e3a03001	 mov         r3, #1
  06cc4	e58d3000	 str         r3, [sp]
  06cc8	ea000007	 b           |$LN5@SDControll@4|
  06ccc		 |$LN4@SDControll@4|
  06ccc	e3a03eb9	 mov         r3, #0xB9, 28
  06cd0	e59f2058	 ldr         r2, [pc, #0x58]
  06cd4	e59f1050	 ldr         r1, [pc, #0x50]
  06cd8	e59f0048	 ldr         r0, [pc, #0x48]
  06cdc	eb000000	 bl          NKDbgPrintfW
  06ce0	e6000010	 __debugbreak_ce
  06ce4	e3a03000	 mov         r3, #0
  06ce8	e58d3000	 str         r3, [sp]
  06cec		 |$LN5@SDControll@4|

; 2961 :     if( !pHCDevice )

  06cec	e59d300c	 ldr         r3, [sp, #0xC]
  06cf0	e3530000	 cmp         r3, #0
  06cf4	1a000000	 bne         |$LN1@SDControll@4|

; 2962 :         return;

  06cf8	ea000007	 b           |$LN2@SDControll@4|
  06cfc		 |$LN1@SDControll@4|

; 2963 : 
; 2964 :     // Notify the SD Bus driver of the PowerUp event
; 2965 :     SDHCDPowerUpDown(pHCDevice->pHCContext, TRUE, FALSE, 0);

  06cfc	e3a03000	 mov         r3, #0
  06d00	e3a02000	 mov         r2, #0
  06d04	e3a01001	 mov         r1, #1
  06d08	e59d000c	 ldr         r0, [sp, #0xC]
  06d0c	e2800018	 add         r0, r0, #0x18
  06d10	e5900000	 ldr         r0, [r0]
  06d14	eb000000	 bl          SDHCDPowerUpDown

; 2966 : 
; 2967 :     // simulate a card ejection/insertion
; 2968 :     SimulateCardInsertion();

  06d18	eb000000	 bl          SimulateCardInsertion
  06d1c		 |$LN2@SDControll@4|

; 2969 : 
; 2970 : }

  06d1c	e28dd004	 add         sp, sp, #4
  06d20	e89d6000	 ldmia       sp, {sp, lr}
  06d24	e12fff1e	 bx          lr
  06d28		 |$LN9@SDControll@4|
  06d28		 |$LN10@SDControll@4|
  06d28	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  06d2c		 |$LN11@SDControll@4|
  06d2c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  06d30		 |$LN12@SDControll@4|
  06d30	00000000	 DCD         |??_C@_1II@PANPOCEE@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  06d34		 |$M45503|

			 ENDP  ; |SDControllerPowerUp|

	EXPORT	|??_C@_1DI@EGOOBLIO@?$AAS?$AAD?$AA?1?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@KAJOFOFJ@?$AAT?$AAX?$AAF?$AAI?$AAF?$AAO?$AA?$DN?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@DLEOFOJH@?$AAR?$AAX?$AAF?$AAI?$AAF?$AAO?$AA?$DN?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@OMCJKBJM@?$AAR?$AAE?$AAS?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CEPFPBIN@?$AAA?$AAR?$AAG?$AAL?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@ENPDGPNC@?$AAA?$AAR?$AAG?$AAH?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@NPJLLGCA@?$AAC?$AAM?$AAD?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@IDNKDBHF@?$AAI?$AAR?$AAE?$AAG?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@GPDALGOG@?$AAI?$AAM?$AAA?$AAS?$AAK?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@PCODPKGM@?$AAP?$AAR?$AAT?$AAB?$AAU?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@BGLLOAIC@?$AAN?$AAO?$AAB?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@FPNBOEF@?$AAB?$AAL?$AAK?$AAL?$AAE?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@OEACIKB@?$AAR?$AAD?$AAT?$AAO?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@LMAFONHF@?$AAR?$AAE?$AAS?$AAT?$AAO?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@DBDDLPIN@?$AAC?$AAM?$AAD?$AAA?$AAT?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@CGEFKHIG@?$AAS?$AAP?$AAI?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@JKBJMCBP@?$AAC?$AAL?$AAK?$AAR?$AAT?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@LLNMJLOD@?$AAS?$AAT?$AAA?$AAT?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@PBHGKPHI@?$AAS?$AAT?$AAR?$AAP?$AAC?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@NIGGFPMH@?$AAS?$AAD?$AA?1?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAB?$AAe?$AAg?$AAi?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00148			 AREA	 |.pdata|, PDATA
|$T45554| DCD	|$LN46@DumpRegist|
	DCD	0x40014c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@EGOOBLIO@?$AAS?$AAD?$AA?1?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "/", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "D", 0x0, "u"
	DCB	0x0, "m", 0x0, "p", 0x0, " ", 0x0, "E", 0x0, "n", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@KAJOFOFJ@?$AAT?$AAX?$AAF?$AAI?$AAF?$AAO?$AA?$DN?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "X", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "="
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@DLEOFOJH@?$AAR?$AAX?$AAF?$AAI?$AAF?$AAO?$AA?$DN?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "X", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, "="
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@OMCJKBJM@?$AAR?$AAE?$AAS?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "E", 0x0, "S", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CEPFPBIN@?$AAA?$AAR?$AAG?$AAL?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "R", 0x0, "G", 0x0, "L", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@ENPDGPNC@?$AAA?$AAR?$AAG?$AAH?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "A"
	DCB	0x0, "R", 0x0, "G", 0x0, "H", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@NPJLLGCA@?$AAC?$AAM?$AAD?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "M", 0x0, "D", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@IDNKDBHF@?$AAI?$AAR?$AAE?$AAG?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "R", 0x0, "E", 0x0, "G", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@GPDALGOG@?$AAI?$AAM?$AAA?$AAS?$AAK?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "M", 0x0, "A", 0x0, "S", 0x0, "K", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@PCODPKGM@?$AAP?$AAR?$AAT?$AAB?$AAU?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "R", 0x0, "T", 0x0, "B", 0x0, "U", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@BGLLOAIC@?$AAN?$AAO?$AAB?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "N"
	DCB	0x0, "O", 0x0, "B", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@FPNBOEF@?$AAB?$AAL?$AAK?$AAL?$AAE?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "B"
	DCB	0x0, "L", 0x0, "K", 0x0, "L", 0x0, "E", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@OEACIKB@?$AAR?$AAD?$AAT?$AAO?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "D", 0x0, "T", 0x0, "O", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LMAFONHF@?$AAR?$AAE?$AAS?$AAT?$AAO?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "T", 0x0, "O", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@DBDDLPIN@?$AAC?$AAM?$AAD?$AAA?$AAT?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "M", 0x0, "D", 0x0, "A", 0x0, "T", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@CGEFKHIG@?$AAS?$AAP?$AAI?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@JKBJMCBP@?$AAC?$AAL?$AAK?$AAR?$AAT?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "L", 0x0, "K", 0x0, "R", 0x0, "T", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LLNMJLOD@?$AAS?$AAT?$AAA?$AAT?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "T", 0x0, "A", 0x0, "T", 0x0, " ", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@PBHGKPHI@?$AAS?$AAT?$AAR?$AAP?$AAC?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "T", 0x0, "R", 0x0, "P", 0x0, "C", 0x0, " ", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@NIGGFPMH@?$AAS?$AAD?$AA?1?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAB?$AAe?$AAg?$AAi?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "D", 0x0, "/", 0x0, "M", 0x0, "M", 0x0, "C", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "D", 0x0, "u"
	DCB	0x0, "m", 0x0, "p", 0x0, " ", 0x0, "B", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  06d34			 AREA	 |.text|, CODE, ARM

  06d34		 |DumpRegisters| PROC

; 2975 : {

  06d34		 |$LN46@DumpRegist|
  06d34	e1a0c00d	 mov         r12, sp
  06d38	e92d0001	 stmdb       sp!, {r0}
  06d3c	e92d5000	 stmdb       sp!, {r12, lr}
  06d40	e24dd054	 sub         sp, sp, #0x54
  06d44		 |$M45551|

; 2976 :     BOOL fQuit = TRUE;

  06d44	e3a03001	 mov         r3, #1
  06d48	e58d3000	 str         r3, [sp]

; 2977 : #ifdef EXTENSIVE_DEBUGGING
; 2978 :     fQuit = FALSE;
; 2979 : #endif
; 2980 :     if( !fQuit )

  06d4c	e59d3000	 ldr         r3, [sp]
  06d50	e3530000	 cmp         r3, #0
  06d54	1a00012a	 bne         |$LN1@DumpRegist|

; 2981 :     {
; 2982 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("SD/MMC Registers Dump Begin\r\n")));

  06d58	e59f34b4	 ldr         r3, [pc, #0x4B4]
  06d5c	e5933440	 ldr         r3, [r3, #0x440]
  06d60	e3130901	 tst         r3, #1, 18
  06d64	0a000004	 beq         |$LN4@DumpRegist|
  06d68	e59f04f0	 ldr         r0, [pc, #0x4F0]
  06d6c	eb000000	 bl          SDCardDebugOutput
  06d70	e3a03001	 mov         r3, #1
  06d74	e58d3004	 str         r3, [sp, #4]
  06d78	ea000001	 b           |$LN5@DumpRegist|
  06d7c		 |$LN4@DumpRegist|
  06d7c	e3a03000	 mov         r3, #0
  06d80	e58d3004	 str         r3, [sp, #4]
  06d84		 |$LN5@DumpRegist|

; 2983 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("STRPC =0x%08X\n"), pController->pSDMMCRegisters->strpc));

  06d84	e59f3488	 ldr         r3, [pc, #0x488]
  06d88	e5933440	 ldr         r3, [r3, #0x440]
  06d8c	e3130901	 tst         r3, #1, 18
  06d90	0a000008	 beq         |$LN6@DumpRegist|
  06d94	e59d305c	 ldr         r3, [sp, #0x5C]
  06d98	e2833004	 add         r3, r3, #4
  06d9c	e5933000	 ldr         r3, [r3]
  06da0	e5931000	 ldr         r1, [r3]
  06da4	e59f04b0	 ldr         r0, [pc, #0x4B0]
  06da8	eb000000	 bl          SDCardDebugOutput
  06dac	e3a03001	 mov         r3, #1
  06db0	e58d3008	 str         r3, [sp, #8]
  06db4	ea000001	 b           |$LN7@DumpRegist|
  06db8		 |$LN6@DumpRegist|
  06db8	e3a03000	 mov         r3, #0
  06dbc	e58d3008	 str         r3, [sp, #8]
  06dc0		 |$LN7@DumpRegist|

; 2984 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("STAT  =0x%08X\n"), pController->pSDMMCRegisters->stat));

  06dc0	e59f344c	 ldr         r3, [pc, #0x44C]
  06dc4	e5933440	 ldr         r3, [r3, #0x440]
  06dc8	e3130901	 tst         r3, #1, 18
  06dcc	0a000009	 beq         |$LN8@DumpRegist|
  06dd0	e59d305c	 ldr         r3, [sp, #0x5C]
  06dd4	e2833004	 add         r3, r3, #4
  06dd8	e5933000	 ldr         r3, [r3]
  06ddc	e2833004	 add         r3, r3, #4
  06de0	e5931000	 ldr         r1, [r3]
  06de4	e59f046c	 ldr         r0, [pc, #0x46C]
  06de8	eb000000	 bl          SDCardDebugOutput
  06dec	e3a03001	 mov         r3, #1
  06df0	e58d300c	 str         r3, [sp, #0xC]
  06df4	ea000001	 b           |$LN9@DumpRegist|
  06df8		 |$LN8@DumpRegist|
  06df8	e3a03000	 mov         r3, #0
  06dfc	e58d300c	 str         r3, [sp, #0xC]
  06e00		 |$LN9@DumpRegist|

; 2985 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("CLKRT =0x%08X\n"), pController->pSDMMCRegisters->clkrt));

  06e00	e59f340c	 ldr         r3, [pc, #0x40C]
  06e04	e5933440	 ldr         r3, [r3, #0x440]
  06e08	e3130901	 tst         r3, #1, 18
  06e0c	0a000009	 beq         |$LN10@DumpRegist|
  06e10	e59d305c	 ldr         r3, [sp, #0x5C]
  06e14	e2833004	 add         r3, r3, #4
  06e18	e5933000	 ldr         r3, [r3]
  06e1c	e2833008	 add         r3, r3, #8
  06e20	e5931000	 ldr         r1, [r3]
  06e24	e59f0428	 ldr         r0, [pc, #0x428]
  06e28	eb000000	 bl          SDCardDebugOutput
  06e2c	e3a03001	 mov         r3, #1
  06e30	e58d3010	 str         r3, [sp, #0x10]
  06e34	ea000001	 b           |$LN11@DumpRegist|
  06e38		 |$LN10@DumpRegist|
  06e38	e3a03000	 mov         r3, #0
  06e3c	e58d3010	 str         r3, [sp, #0x10]
  06e40		 |$LN11@DumpRegist|

; 2986 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("SPI   =0x%08X\n"), pController->pSDMMCRegisters->spi));

  06e40	e59f33cc	 ldr         r3, [pc, #0x3CC]
  06e44	e5933440	 ldr         r3, [r3, #0x440]
  06e48	e3130901	 tst         r3, #1, 18
  06e4c	0a000009	 beq         |$LN12@DumpRegist|
  06e50	e59d305c	 ldr         r3, [sp, #0x5C]
  06e54	e2833004	 add         r3, r3, #4
  06e58	e5933000	 ldr         r3, [r3]
  06e5c	e283300c	 add         r3, r3, #0xC
  06e60	e5931000	 ldr         r1, [r3]
  06e64	e59f03e4	 ldr         r0, [pc, #0x3E4]
  06e68	eb000000	 bl          SDCardDebugOutput
  06e6c	e3a03001	 mov         r3, #1
  06e70	e58d3014	 str         r3, [sp, #0x14]
  06e74	ea000001	 b           |$LN13@DumpRegist|
  06e78		 |$LN12@DumpRegist|
  06e78	e3a03000	 mov         r3, #0
  06e7c	e58d3014	 str         r3, [sp, #0x14]
  06e80		 |$LN13@DumpRegist|

; 2987 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("CMDAT =0x%08X\n"), pController->pSDMMCRegisters->cmdat));

  06e80	e59f338c	 ldr         r3, [pc, #0x38C]
  06e84	e5933440	 ldr         r3, [r3, #0x440]
  06e88	e3130901	 tst         r3, #1, 18
  06e8c	0a000009	 beq         |$LN14@DumpRegist|
  06e90	e59d305c	 ldr         r3, [sp, #0x5C]
  06e94	e2833004	 add         r3, r3, #4
  06e98	e5933000	 ldr         r3, [r3]
  06e9c	e2833010	 add         r3, r3, #0x10
  06ea0	e5931000	 ldr         r1, [r3]
  06ea4	e59f03a0	 ldr         r0, [pc, #0x3A0]
  06ea8	eb000000	 bl          SDCardDebugOutput
  06eac	e3a03001	 mov         r3, #1
  06eb0	e58d3018	 str         r3, [sp, #0x18]
  06eb4	ea000001	 b           |$LN15@DumpRegist|
  06eb8		 |$LN14@DumpRegist|
  06eb8	e3a03000	 mov         r3, #0
  06ebc	e58d3018	 str         r3, [sp, #0x18]
  06ec0		 |$LN15@DumpRegist|

; 2988 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("RESTO =0x%08X\n"), pController->pSDMMCRegisters->resto));

  06ec0	e59f334c	 ldr         r3, [pc, #0x34C]
  06ec4	e5933440	 ldr         r3, [r3, #0x440]
  06ec8	e3130901	 tst         r3, #1, 18
  06ecc	0a000009	 beq         |$LN16@DumpRegist|
  06ed0	e59d305c	 ldr         r3, [sp, #0x5C]
  06ed4	e2833004	 add         r3, r3, #4
  06ed8	e5933000	 ldr         r3, [r3]
  06edc	e2833014	 add         r3, r3, #0x14
  06ee0	e5931000	 ldr         r1, [r3]
  06ee4	e59f035c	 ldr         r0, [pc, #0x35C]
  06ee8	eb000000	 bl          SDCardDebugOutput
  06eec	e3a03001	 mov         r3, #1
  06ef0	e58d301c	 str         r3, [sp, #0x1C]
  06ef4	ea000001	 b           |$LN17@DumpRegist|
  06ef8		 |$LN16@DumpRegist|
  06ef8	e3a03000	 mov         r3, #0
  06efc	e58d301c	 str         r3, [sp, #0x1C]
  06f00		 |$LN17@DumpRegist|

; 2989 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("RDTO  =0x%08X\n"), pController->pSDMMCRegisters->rdto));

  06f00	e59f330c	 ldr         r3, [pc, #0x30C]
  06f04	e5933440	 ldr         r3, [r3, #0x440]
  06f08	e3130901	 tst         r3, #1, 18
  06f0c	0a000009	 beq         |$LN18@DumpRegist|
  06f10	e59d305c	 ldr         r3, [sp, #0x5C]
  06f14	e2833004	 add         r3, r3, #4
  06f18	e5933000	 ldr         r3, [r3]
  06f1c	e2833018	 add         r3, r3, #0x18
  06f20	e5931000	 ldr         r1, [r3]
  06f24	e59f0318	 ldr         r0, [pc, #0x318]
  06f28	eb000000	 bl          SDCardDebugOutput
  06f2c	e3a03001	 mov         r3, #1
  06f30	e58d3020	 str         r3, [sp, #0x20]
  06f34	ea000001	 b           |$LN19@DumpRegist|
  06f38		 |$LN18@DumpRegist|
  06f38	e3a03000	 mov         r3, #0
  06f3c	e58d3020	 str         r3, [sp, #0x20]
  06f40		 |$LN19@DumpRegist|

; 2990 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("BLKLE =0x%08X\n"), pController->pSDMMCRegisters->blkle));

  06f40	e59f32cc	 ldr         r3, [pc, #0x2CC]
  06f44	e5933440	 ldr         r3, [r3, #0x440]
  06f48	e3130901	 tst         r3, #1, 18
  06f4c	0a000009	 beq         |$LN20@DumpRegist|
  06f50	e59d305c	 ldr         r3, [sp, #0x5C]
  06f54	e2833004	 add         r3, r3, #4
  06f58	e5933000	 ldr         r3, [r3]
  06f5c	e283301c	 add         r3, r3, #0x1C
  06f60	e5931000	 ldr         r1, [r3]
  06f64	e59f02d4	 ldr         r0, [pc, #0x2D4]
  06f68	eb000000	 bl          SDCardDebugOutput
  06f6c	e3a03001	 mov         r3, #1
  06f70	e58d3024	 str         r3, [sp, #0x24]
  06f74	ea000001	 b           |$LN21@DumpRegist|
  06f78		 |$LN20@DumpRegist|
  06f78	e3a03000	 mov         r3, #0
  06f7c	e58d3024	 str         r3, [sp, #0x24]
  06f80		 |$LN21@DumpRegist|

; 2991 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("NOB   =0x%08X\n"), pController->pSDMMCRegisters->nob));

  06f80	e59f328c	 ldr         r3, [pc, #0x28C]
  06f84	e5933440	 ldr         r3, [r3, #0x440]
  06f88	e3130901	 tst         r3, #1, 18
  06f8c	0a000009	 beq         |$LN22@DumpRegist|
  06f90	e59d305c	 ldr         r3, [sp, #0x5C]
  06f94	e2833004	 add         r3, r3, #4
  06f98	e5933000	 ldr         r3, [r3]
  06f9c	e2833020	 add         r3, r3, #0x20
  06fa0	e5931000	 ldr         r1, [r3]
  06fa4	e59f0290	 ldr         r0, [pc, #0x290]
  06fa8	eb000000	 bl          SDCardDebugOutput
  06fac	e3a03001	 mov         r3, #1
  06fb0	e58d3028	 str         r3, [sp, #0x28]
  06fb4	ea000001	 b           |$LN23@DumpRegist|
  06fb8		 |$LN22@DumpRegist|
  06fb8	e3a03000	 mov         r3, #0
  06fbc	e58d3028	 str         r3, [sp, #0x28]
  06fc0		 |$LN23@DumpRegist|

; 2992 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("PRTBU =0x%08X\n"), pController->pSDMMCRegisters->prtbu));

  06fc0	e59f324c	 ldr         r3, [pc, #0x24C]
  06fc4	e5933440	 ldr         r3, [r3, #0x440]
  06fc8	e3130901	 tst         r3, #1, 18
  06fcc	0a000009	 beq         |$LN24@DumpRegist|
  06fd0	e59d305c	 ldr         r3, [sp, #0x5C]
  06fd4	e2833004	 add         r3, r3, #4
  06fd8	e5933000	 ldr         r3, [r3]
  06fdc	e2833024	 add         r3, r3, #0x24
  06fe0	e5931000	 ldr         r1, [r3]
  06fe4	e59f024c	 ldr         r0, [pc, #0x24C]
  06fe8	eb000000	 bl          SDCardDebugOutput
  06fec	e3a03001	 mov         r3, #1
  06ff0	e58d302c	 str         r3, [sp, #0x2C]
  06ff4	ea000001	 b           |$LN25@DumpRegist|
  06ff8		 |$LN24@DumpRegist|
  06ff8	e3a03000	 mov         r3, #0
  06ffc	e58d302c	 str         r3, [sp, #0x2C]
  07000		 |$LN25@DumpRegist|

; 2993 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("IMASK =0x%08X\n"), pController->pSDMMCRegisters->imask));

  07000	e59f320c	 ldr         r3, [pc, #0x20C]
  07004	e5933440	 ldr         r3, [r3, #0x440]
  07008	e3130901	 tst         r3, #1, 18
  0700c	0a000009	 beq         |$LN26@DumpRegist|
  07010	e59d305c	 ldr         r3, [sp, #0x5C]
  07014	e2833004	 add         r3, r3, #4
  07018	e5933000	 ldr         r3, [r3]
  0701c	e2833028	 add         r3, r3, #0x28
  07020	e5931000	 ldr         r1, [r3]
  07024	e59f0208	 ldr         r0, [pc, #0x208]
  07028	eb000000	 bl          SDCardDebugOutput
  0702c	e3a03001	 mov         r3, #1
  07030	e58d3030	 str         r3, [sp, #0x30]
  07034	ea000001	 b           |$LN27@DumpRegist|
  07038		 |$LN26@DumpRegist|
  07038	e3a03000	 mov         r3, #0
  0703c	e58d3030	 str         r3, [sp, #0x30]
  07040		 |$LN27@DumpRegist|

; 2994 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("IREG  =0x%08X\n"), pController->pSDMMCRegisters->ireg));

  07040	e59f31cc	 ldr         r3, [pc, #0x1CC]
  07044	e5933440	 ldr         r3, [r3, #0x440]
  07048	e3130901	 tst         r3, #1, 18
  0704c	0a000009	 beq         |$LN28@DumpRegist|
  07050	e59d305c	 ldr         r3, [sp, #0x5C]
  07054	e2833004	 add         r3, r3, #4
  07058	e5933000	 ldr         r3, [r3]
  0705c	e283302c	 add         r3, r3, #0x2C
  07060	e5931000	 ldr         r1, [r3]
  07064	e59f01c4	 ldr         r0, [pc, #0x1C4]
  07068	eb000000	 bl          SDCardDebugOutput
  0706c	e3a03001	 mov         r3, #1
  07070	e58d3034	 str         r3, [sp, #0x34]
  07074	ea000001	 b           |$LN29@DumpRegist|
  07078		 |$LN28@DumpRegist|
  07078	e3a03000	 mov         r3, #0
  0707c	e58d3034	 str         r3, [sp, #0x34]
  07080		 |$LN29@DumpRegist|

; 2995 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("CMD   =0x%08X\n"), pController->pSDMMCRegisters->cmd));

  07080	e59f318c	 ldr         r3, [pc, #0x18C]
  07084	e5933440	 ldr         r3, [r3, #0x440]
  07088	e3130901	 tst         r3, #1, 18
  0708c	0a000009	 beq         |$LN30@DumpRegist|
  07090	e59d305c	 ldr         r3, [sp, #0x5C]
  07094	e2833004	 add         r3, r3, #4
  07098	e5933000	 ldr         r3, [r3]
  0709c	e2833030	 add         r3, r3, #0x30
  070a0	e5931000	 ldr         r1, [r3]
  070a4	e59f0180	 ldr         r0, [pc, #0x180]
  070a8	eb000000	 bl          SDCardDebugOutput
  070ac	e3a03001	 mov         r3, #1
  070b0	e58d3038	 str         r3, [sp, #0x38]
  070b4	ea000001	 b           |$LN31@DumpRegist|
  070b8		 |$LN30@DumpRegist|
  070b8	e3a03000	 mov         r3, #0
  070bc	e58d3038	 str         r3, [sp, #0x38]
  070c0		 |$LN31@DumpRegist|

; 2996 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("ARGH  =0x%08X\n"), pController->pSDMMCRegisters->argh));

  070c0	e59f314c	 ldr         r3, [pc, #0x14C]
  070c4	e5933440	 ldr         r3, [r3, #0x440]
  070c8	e3130901	 tst         r3, #1, 18
  070cc	0a000009	 beq         |$LN32@DumpRegist|
  070d0	e59d305c	 ldr         r3, [sp, #0x5C]
  070d4	e2833004	 add         r3, r3, #4
  070d8	e5933000	 ldr         r3, [r3]
  070dc	e2833034	 add         r3, r3, #0x34
  070e0	e5931000	 ldr         r1, [r3]
  070e4	e59f013c	 ldr         r0, [pc, #0x13C]
  070e8	eb000000	 bl          SDCardDebugOutput
  070ec	e3a03001	 mov         r3, #1
  070f0	e58d303c	 str         r3, [sp, #0x3C]
  070f4	ea000001	 b           |$LN33@DumpRegist|
  070f8		 |$LN32@DumpRegist|
  070f8	e3a03000	 mov         r3, #0
  070fc	e58d303c	 str         r3, [sp, #0x3C]
  07100		 |$LN33@DumpRegist|

; 2997 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("ARGL  =0x%08X\n"), pController->pSDMMCRegisters->argl));

  07100	e59f310c	 ldr         r3, [pc, #0x10C]
  07104	e5933440	 ldr         r3, [r3, #0x440]
  07108	e3130901	 tst         r3, #1, 18
  0710c	0a000009	 beq         |$LN34@DumpRegist|
  07110	e59d305c	 ldr         r3, [sp, #0x5C]
  07114	e2833004	 add         r3, r3, #4
  07118	e5933000	 ldr         r3, [r3]
  0711c	e2833038	 add         r3, r3, #0x38
  07120	e5931000	 ldr         r1, [r3]
  07124	e59f00f8	 ldr         r0, [pc, #0xF8]
  07128	eb000000	 bl          SDCardDebugOutput
  0712c	e3a03001	 mov         r3, #1
  07130	e58d3040	 str         r3, [sp, #0x40]
  07134	ea000001	 b           |$LN35@DumpRegist|
  07138		 |$LN34@DumpRegist|
  07138	e3a03000	 mov         r3, #0
  0713c	e58d3040	 str         r3, [sp, #0x40]
  07140		 |$LN35@DumpRegist|

; 2998 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("RES   =0x%08X\n"), pController->pSDMMCRegisters->res));

  07140	e59f30cc	 ldr         r3, [pc, #0xCC]
  07144	e5933440	 ldr         r3, [r3, #0x440]
  07148	e3130901	 tst         r3, #1, 18
  0714c	0a000009	 beq         |$LN36@DumpRegist|
  07150	e59d305c	 ldr         r3, [sp, #0x5C]
  07154	e2833004	 add         r3, r3, #4
  07158	e5933000	 ldr         r3, [r3]
  0715c	e283303c	 add         r3, r3, #0x3C
  07160	e5931000	 ldr         r1, [r3]
  07164	e59f00b4	 ldr         r0, [pc, #0xB4]
  07168	eb000000	 bl          SDCardDebugOutput
  0716c	e3a03001	 mov         r3, #1
  07170	e58d3044	 str         r3, [sp, #0x44]
  07174	ea000001	 b           |$LN37@DumpRegist|
  07178		 |$LN36@DumpRegist|
  07178	e3a03000	 mov         r3, #0
  0717c	e58d3044	 str         r3, [sp, #0x44]
  07180		 |$LN37@DumpRegist|

; 2999 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("RXFIFO=----------\n")));

  07180	e59f308c	 ldr         r3, [pc, #0x8C]
  07184	e5933440	 ldr         r3, [r3, #0x440]
  07188	e3130901	 tst         r3, #1, 18
  0718c	0a000004	 beq         |$LN38@DumpRegist|
  07190	e59f0084	 ldr         r0, [pc, #0x84]
  07194	eb000000	 bl          SDCardDebugOutput
  07198	e3a03001	 mov         r3, #1
  0719c	e58d3048	 str         r3, [sp, #0x48]
  071a0	ea000001	 b           |$LN39@DumpRegist|
  071a4		 |$LN38@DumpRegist|
  071a4	e3a03000	 mov         r3, #0
  071a8	e58d3048	 str         r3, [sp, #0x48]
  071ac		 |$LN39@DumpRegist|

; 3000 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("TXFIFO=----------\n")));

  071ac	e59f3060	 ldr         r3, [pc, #0x60]
  071b0	e5933440	 ldr         r3, [r3, #0x440]
  071b4	e3130901	 tst         r3, #1, 18
  071b8	0a000004	 beq         |$LN40@DumpRegist|
  071bc	e59f0054	 ldr         r0, [pc, #0x54]
  071c0	eb000000	 bl          SDCardDebugOutput
  071c4	e3a03001	 mov         r3, #1
  071c8	e58d304c	 str         r3, [sp, #0x4C]
  071cc	ea000001	 b           |$LN41@DumpRegist|
  071d0		 |$LN40@DumpRegist|
  071d0	e3a03000	 mov         r3, #0
  071d4	e58d304c	 str         r3, [sp, #0x4C]
  071d8		 |$LN41@DumpRegist|

; 3001 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("SD/MMC Registers Dump End\r\n")));

  071d8	e59f3034	 ldr         r3, [pc, #0x34]
  071dc	e5933440	 ldr         r3, [r3, #0x440]
  071e0	e3130901	 tst         r3, #1, 18
  071e4	0a000004	 beq         |$LN42@DumpRegist|
  071e8	e59f0020	 ldr         r0, [pc, #0x20]
  071ec	eb000000	 bl          SDCardDebugOutput
  071f0	e3a03001	 mov         r3, #1
  071f4	e58d3050	 str         r3, [sp, #0x50]
  071f8	ea000001	 b           |$LN43@DumpRegist|
  071fc		 |$LN42@DumpRegist|
  071fc	e3a03000	 mov         r3, #0
  07200	e58d3050	 str         r3, [sp, #0x50]
  07204		 |$LN43@DumpRegist|
  07204		 |$LN1@DumpRegist|

; 3002 :     }
; 3003 : }

  07204	e28dd054	 add         sp, sp, #0x54
  07208	e89d6000	 ldmia       sp, {sp, lr}
  0720c	e12fff1e	 bx          lr
  07210		 |$LN47@DumpRegist|
  07210		 |$LN48@DumpRegist|
  07210	00000000	 DCD         |??_C@_1DI@EGOOBLIO@?$AAS?$AAD?$AA?1?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  07214		 |$LN49@DumpRegist|
  07214	00000000	 DCD         |dpCurSettings|
  07218		 |$LN50@DumpRegist|
  07218	00000000	 DCD         |??_C@_1CG@KAJOFOFJ@?$AAT?$AAX?$AAF?$AAI?$AAF?$AAO?$AA?$DN?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?6?$AA?$AA@|
  0721c		 |$LN51@DumpRegist|
  0721c	00000000	 DCD         |??_C@_1CG@DLEOFOJH@?$AAR?$AAX?$AAF?$AAI?$AAF?$AAO?$AA?$DN?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?6?$AA?$AA@|
  07220		 |$LN52@DumpRegist|
  07220	00000000	 DCD         |??_C@_1BO@OMCJKBJM@?$AAR?$AAE?$AAS?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07224		 |$LN53@DumpRegist|
  07224	00000000	 DCD         |??_C@_1BO@CEPFPBIN@?$AAA?$AAR?$AAG?$AAL?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07228		 |$LN54@DumpRegist|
  07228	00000000	 DCD         |??_C@_1BO@ENPDGPNC@?$AAA?$AAR?$AAG?$AAH?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  0722c		 |$LN55@DumpRegist|
  0722c	00000000	 DCD         |??_C@_1BO@NPJLLGCA@?$AAC?$AAM?$AAD?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07230		 |$LN56@DumpRegist|
  07230	00000000	 DCD         |??_C@_1BO@IDNKDBHF@?$AAI?$AAR?$AAE?$AAG?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07234		 |$LN57@DumpRegist|
  07234	00000000	 DCD         |??_C@_1BO@GPDALGOG@?$AAI?$AAM?$AAA?$AAS?$AAK?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07238		 |$LN58@DumpRegist|
  07238	00000000	 DCD         |??_C@_1BO@PCODPKGM@?$AAP?$AAR?$AAT?$AAB?$AAU?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  0723c		 |$LN59@DumpRegist|
  0723c	00000000	 DCD         |??_C@_1BO@BGLLOAIC@?$AAN?$AAO?$AAB?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07240		 |$LN60@DumpRegist|
  07240	00000000	 DCD         |??_C@_1BO@FPNBOEF@?$AAB?$AAL?$AAK?$AAL?$AAE?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07244		 |$LN61@DumpRegist|
  07244	00000000	 DCD         |??_C@_1BO@OEACIKB@?$AAR?$AAD?$AAT?$AAO?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07248		 |$LN62@DumpRegist|
  07248	00000000	 DCD         |??_C@_1BO@LMAFONHF@?$AAR?$AAE?$AAS?$AAT?$AAO?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  0724c		 |$LN63@DumpRegist|
  0724c	00000000	 DCD         |??_C@_1BO@DBDDLPIN@?$AAC?$AAM?$AAD?$AAA?$AAT?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07250		 |$LN64@DumpRegist|
  07250	00000000	 DCD         |??_C@_1BO@CGEFKHIG@?$AAS?$AAP?$AAI?$AA?5?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07254		 |$LN65@DumpRegist|
  07254	00000000	 DCD         |??_C@_1BO@JKBJMCBP@?$AAC?$AAL?$AAK?$AAR?$AAT?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07258		 |$LN66@DumpRegist|
  07258	00000000	 DCD         |??_C@_1BO@LLNMJLOD@?$AAS?$AAT?$AAA?$AAT?$AA?5?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  0725c		 |$LN67@DumpRegist|
  0725c	00000000	 DCD         |??_C@_1BO@PBHGKPHI@?$AAS?$AAT?$AAR?$AAP?$AAC?$AA?5?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?6?$AA?$AA@|
  07260		 |$LN68@DumpRegist|
  07260	00000000	 DCD         |??_C@_1DM@NIGGFPMH@?$AAS?$AAD?$AA?1?$AAM?$AAM?$AAC?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAB?$AAe?$AAg?$AAi?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  07264		 |$M45552|

			 ENDP  ; |DumpRegisters|

	EXPORT	|??_C@_1DE@KIKPKDPF@?$AAG?$AAP?$AAI?$AAO?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1MG@HIAFNOI@?$AAP?$AAi?$AAn?$AA?5?$AAF?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAd?$AAg?$AAe?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1ME@IKKGLGBH@?$AAP?$AAi?$AAn?$AA?5?$AAR?$AAi?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAd?$AAg?$AAe?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAR?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JM@BIHHMPJI@?$AAP?$AAi?$AAn?$AA?5?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6?$AA?5?$AAG?$AAP?$AAL?$AAR?$AA0?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@POLHHLEM@?$AAP?$AAi?$AAn?$AA?5?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6?$AA?5?$AAG?$AAP?$AAD?$AAR?$AA0?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BEC@JEAHNICN@?$AAA?$AAl?$AAt?$AA?4?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@BMFGGMJ@?$AAG?$AAP?$AAI?$AAO?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAB?$AAe?$AAg?$AAi?$AAn?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00150			 AREA	 |.pdata|, PDATA
|$T45604| DCD	|$LN20@DumpGPIORe|
	DCD	0x4000c904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@KIKPKDPF@?$AAG?$AAP?$AAI?$AAO?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "G"
	DCB	0x0, "P", 0x0, "I", 0x0, "O", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, " ", 0x0, "D", 0x0, "u", 0x0, "m", 0x0, "p"
	DCB	0x0, " ", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MG@HIAFNOI@?$AAP?$AAi?$AAn?$AA?5?$AAF?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAd?$AAg?$AAe?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAR@| DCB "P"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "E"
	DCB	0x0, "d", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, ":", 0x0, 0xa, 0x0, " "
	DCB	0x0, "G", 0x0, "F", 0x0, "E", 0x0, "R", 0x0, "0", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "G", 0x0, "F", 0x0, "E", 0x0, "R"
	DCB	0x0, "1", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G", 0x0, "F"
	DCB	0x0, "E", 0x0, "R", 0x0, "2", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "G", 0x0, "F", 0x0, "E", 0x0, "R", 0x0, "3", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1ME@IKKGLGBH@?$AAP?$AAi?$AAn?$AA?5?$AAR?$AAi?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAd?$AAg?$AAe?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAR?$AAe@| DCB "P"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "R", 0x0, "i", 0x0, "s"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "E", 0x0, "d"
	DCB	0x0, "g", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, ":", 0x0, 0xa, 0x0, " ", 0x0, "G"
	DCB	0x0, "R", 0x0, "E", 0x0, "R", 0x0, "0", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "G", 0x0, "R", 0x0, "E", 0x0, "R", 0x0, "1"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G", 0x0, "R", 0x0, "E"
	DCB	0x0, "R", 0x0, "2", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G"
	DCB	0x0, "R", 0x0, "E", 0x0, "R", 0x0, "3", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@BIHHMPJI@?$AAP?$AAi?$AAn?$AA?5?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6?$AA?5?$AAG?$AAP?$AAL?$AAR?$AA0?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@| DCB "P"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "L", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "l", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s"
	DCB	0x0, ":", 0x0, 0xa, 0x0, " ", 0x0, "G", 0x0, "P", 0x0, "L"
	DCB	0x0, "R", 0x0, "0", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G"
	DCB	0x0, "P", 0x0, "L", 0x0, "R", 0x0, "1", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "G", 0x0, "P", 0x0, "L", 0x0, "R", 0x0, "2"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G", 0x0, "P", 0x0, "L"
	DCB	0x0, "R", 0x0, "3", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@POLHHLEM@?$AAP?$AAi?$AAn?$AA?5?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6?$AA?5?$AAG?$AAP?$AAD?$AAR?$AA0?$AA?$DN@| DCB "P"
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, ":", 0x0, 0xa
	DCB	0x0, " ", 0x0, "G", 0x0, "P", 0x0, "D", 0x0, "R", 0x0, "0"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G", 0x0, "P", 0x0, "D"
	DCB	0x0, "R", 0x0, "1", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G"
	DCB	0x0, "P", 0x0, "D", 0x0, "R", 0x0, "2", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "G", 0x0, "P", 0x0, "D", 0x0, "R", 0x0, "3"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BEC@JEAHNICN@?$AAA?$AAl?$AAt?$AA?4?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6@| DCB "A"
	DCB	0x0, "l", 0x0, "t", 0x0, ".", 0x0, " ", 0x0, "F", 0x0, "u"
	DCB	0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "S", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, ":"
	DCB	0x0, 0xa, 0x0, " ", 0x0, "G", 0x0, "A", 0x0, "F", 0x0, "R"
	DCB	0x0, "0", 0x0, "_", 0x0, "L", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "G", 0x0, "A", 0x0, "F", 0x0, "R", 0x0, "1", 0x0, "_"
	DCB	0x0, "L", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G", 0x0, "A"
	DCB	0x0, "F", 0x0, "R", 0x0, "2", 0x0, "_", 0x0, "L", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "G", 0x0, "A", 0x0, "F", 0x0, "R"
	DCB	0x0, "3", 0x0, "_", 0x0, "L", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, " "
	DCB	0x0, "G", 0x0, "A", 0x0, "F", 0x0, "R", 0x0, "0", 0x0, "_"
	DCB	0x0, "U", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "G", 0x0, "A"
	DCB	0x0, "F", 0x0, "R", 0x0, "1", 0x0, "_", 0x0, "U", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "G", 0x0, "A", 0x0, "F", 0x0, "R"
	DCB	0x0, "2", 0x0, "_", 0x0, "U", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "G", 0x0, "A", 0x0, "F", 0x0, "R", 0x0, "3", 0x0, "_"
	DCB	0x0, "U", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@BMFGGMJ@?$AAG?$AAP?$AAI?$AAO?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAB?$AAe?$AAg?$AAi?$AAn?$AA?$AN?$AA?6?$AA?$AA@| DCB "G"
	DCB	0x0, "P", 0x0, "I", 0x0, "O", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "s", 0x0, " ", 0x0, "D", 0x0, "u", 0x0, "m", 0x0, "p"
	DCB	0x0, " ", 0x0, "B", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "n"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  07264			 AREA	 |.text|, CODE, ARM

  07264		 |DumpGPIORegisters| PROC

; 3006 : {

  07264		 |$LN20@DumpGPIORe|
  07264	e1a0c00d	 mov         r12, sp
  07268	e92d0001	 stmdb       sp!, {r0}
  0726c	e92d5000	 stmdb       sp!, {r12, lr}
  07270	e24dd058	 sub         sp, sp, #0x58
  07274		 |$M45601|

; 3007 :     BOOL fQuit = TRUE;

  07274	e3a03001	 mov         r3, #1
  07278	e58d3014	 str         r3, [sp, #0x14]

; 3008 : #ifdef EXTENSIVE_DEBUGGING
; 3009 :     fQuit = FALSE;
; 3010 : #endif
; 3011 :     if( !fQuit )

  0727c	e59d3014	 ldr         r3, [sp, #0x14]
  07280	e3530000	 cmp         r3, #0
  07284	1a0000b4	 bne         |$LN1@DumpGPIORe|

; 3012 :     {
; 3013 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("GPIO Registers Dump Begin\r\n")));

  07288	e59f32dc	 ldr         r3, [pc, #0x2DC]
  0728c	e5933440	 ldr         r3, [r3, #0x440]
  07290	e3130901	 tst         r3, #1, 18
  07294	0a000004	 beq         |$LN4@DumpGPIORe|
  07298	e59f02e4	 ldr         r0, [pc, #0x2E4]
  0729c	eb000000	 bl          SDCardDebugOutput
  072a0	e3a03001	 mov         r3, #1
  072a4	e58d303c	 str         r3, [sp, #0x3C]
  072a8	ea000001	 b           |$LN5@DumpGPIORe|
  072ac		 |$LN4@DumpGPIORe|
  072ac	e3a03000	 mov         r3, #0
  072b0	e58d303c	 str         r3, [sp, #0x3C]
  072b4		 |$LN5@DumpGPIORe|

; 3014 : 
; 3015 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("Alt. Function Select Registers:\n GAFR0_L=0x%08X, GAFR1_L=0x%08X, GAFR2_L=0x%08X, GAFR3_L=0x%08X\n GAFR0_U=0x%08X, GAFR1_U=0x%08X, GAFR2_U=0x%08X, GAFR3_U=0x%08X\n"),
; 3016 :             pController->pGPIORegisters->GAFR0_L, pController->pGPIORegisters->GAFR1_L, pController->pGPIORegisters->GAFR2_L, pController->pGPIORegisters->GAFR3_L,
; 3017 :             pController->pGPIORegisters->GAFR0_U, pController->pGPIORegisters->GAFR1_U, pController->pGPIORegisters->GAFR2_U, pController->pGPIORegisters->GAFR3_U));

  072b4	e59f32b0	 ldr         r3, [pc, #0x2B0]
  072b8	e5933440	 ldr         r3, [r3, #0x440]
  072bc	e3130901	 tst         r3, #1, 18
  072c0	0a000029	 beq         |$LN6@DumpGPIORe|
  072c4	e59d3060	 ldr         r3, [sp, #0x60]
  072c8	e5933000	 ldr         r3, [r3]
  072cc	e2833070	 add         r3, r3, #0x70
  072d0	e5933000	 ldr         r3, [r3]
  072d4	e58d3010	 str         r3, [sp, #0x10]
  072d8	e59d3060	 ldr         r3, [sp, #0x60]
  072dc	e5933000	 ldr         r3, [r3]
  072e0	e2833068	 add         r3, r3, #0x68
  072e4	e5933000	 ldr         r3, [r3]
  072e8	e58d300c	 str         r3, [sp, #0xC]
  072ec	e59d3060	 ldr         r3, [sp, #0x60]
  072f0	e5933000	 ldr         r3, [r3]
  072f4	e2833060	 add         r3, r3, #0x60
  072f8	e5933000	 ldr         r3, [r3]
  072fc	e58d3008	 str         r3, [sp, #8]
  07300	e59d3060	 ldr         r3, [sp, #0x60]
  07304	e5933000	 ldr         r3, [r3]
  07308	e2833058	 add         r3, r3, #0x58
  0730c	e5933000	 ldr         r3, [r3]
  07310	e58d3004	 str         r3, [sp, #4]
  07314	e59d3060	 ldr         r3, [sp, #0x60]
  07318	e5933000	 ldr         r3, [r3]
  0731c	e283306c	 add         r3, r3, #0x6C
  07320	e5933000	 ldr         r3, [r3]
  07324	e58d3000	 str         r3, [sp]
  07328	e59d3060	 ldr         r3, [sp, #0x60]
  0732c	e5933000	 ldr         r3, [r3]
  07330	e2833064	 add         r3, r3, #0x64
  07334	e5933000	 ldr         r3, [r3]
  07338	e59d2060	 ldr         r2, [sp, #0x60]
  0733c	e5922000	 ldr         r2, [r2]
  07340	e282205c	 add         r2, r2, #0x5C
  07344	e5922000	 ldr         r2, [r2]
  07348	e59d1060	 ldr         r1, [sp, #0x60]
  0734c	e5911000	 ldr         r1, [r1]
  07350	e2811054	 add         r1, r1, #0x54
  07354	e5911000	 ldr         r1, [r1]
  07358	e59f0220	 ldr         r0, [pc, #0x220]
  0735c	eb000000	 bl          SDCardDebugOutput
  07360	e3a03001	 mov         r3, #1
  07364	e58d3040	 str         r3, [sp, #0x40]
  07368	ea000001	 b           |$LN7@DumpGPIORe|
  0736c		 |$LN6@DumpGPIORe|
  0736c	e3a03000	 mov         r3, #0
  07370	e58d3040	 str         r3, [sp, #0x40]
  07374		 |$LN7@DumpGPIORe|

; 3018 : 
; 3019 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("Pin direction Registers:\n GPDR0=0x%08X, GPDR1=0x%08X, GPDR2=0x%08X, GPDR3=0x%08X\n"),
; 3020 :             pController->pGPIORegisters->GPDR0, pController->pGPIORegisters->GPDR1, pController->pGPIORegisters->GPDR2, pController->pGPIORegisters->GPDR3));

  07374	e59f31f0	 ldr         r3, [pc, #0x1F0]
  07378	e5933440	 ldr         r3, [r3, #0x440]
  0737c	e3130901	 tst         r3, #1, 18
  07380	0a000015	 beq         |$LN8@DumpGPIORe|
  07384	e59d3060	 ldr         r3, [sp, #0x60]
  07388	e5933000	 ldr         r3, [r3]
  0738c	e2833f43	 add         r3, r3, #0x43, 30
  07390	e5933000	 ldr         r3, [r3]
  07394	e58d3000	 str         r3, [sp]
  07398	e59d3060	 ldr         r3, [sp, #0x60]
  0739c	e5933000	 ldr         r3, [r3]
  073a0	e2833014	 add         r3, r3, #0x14
  073a4	e5933000	 ldr         r3, [r3]
  073a8	e59d2060	 ldr         r2, [sp, #0x60]
  073ac	e5922000	 ldr         r2, [r2]
  073b0	e2822010	 add         r2, r2, #0x10
  073b4	e5922000	 ldr         r2, [r2]
  073b8	e59d1060	 ldr         r1, [sp, #0x60]
  073bc	e5911000	 ldr         r1, [r1]
  073c0	e281100c	 add         r1, r1, #0xC
  073c4	e5911000	 ldr         r1, [r1]
  073c8	e59f01ac	 ldr         r0, [pc, #0x1AC]
  073cc	eb000000	 bl          SDCardDebugOutput
  073d0	e3a03001	 mov         r3, #1
  073d4	e58d3044	 str         r3, [sp, #0x44]
  073d8	ea000001	 b           |$LN9@DumpGPIORe|
  073dc		 |$LN8@DumpGPIORe|
  073dc	e3a03000	 mov         r3, #0
  073e0	e58d3044	 str         r3, [sp, #0x44]
  073e4		 |$LN9@DumpGPIORe|

; 3021 : 
; 3022 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("Pin Level Registers:\n GPLR0=0x%08X, GPLR1=0x%08X, GPLR2=0x%08X, GPLR3=0x%08X\n"),
; 3023 :             pController->pGPIORegisters->GPLR0, pController->pGPIORegisters->GPLR1, pController->pGPIORegisters->GPLR2, pController->pGPIORegisters->GPLR3));

  073e4	e59f3180	 ldr         r3, [pc, #0x180]
  073e8	e5933440	 ldr         r3, [r3, #0x440]
  073ec	e3130901	 tst         r3, #1, 18
  073f0	0a000014	 beq         |$LN10@DumpGPIORe|
  073f4	e59d3060	 ldr         r3, [sp, #0x60]
  073f8	e5933000	 ldr         r3, [r3]
  073fc	e2833c01	 add         r3, r3, #1, 24
  07400	e5933000	 ldr         r3, [r3]
  07404	e58d3000	 str         r3, [sp]
  07408	e59d3060	 ldr         r3, [sp, #0x60]
  0740c	e5933000	 ldr         r3, [r3]
  07410	e2833008	 add         r3, r3, #8
  07414	e5933000	 ldr         r3, [r3]
  07418	e59d2060	 ldr         r2, [sp, #0x60]
  0741c	e5922000	 ldr         r2, [r2]
  07420	e2822004	 add         r2, r2, #4
  07424	e5922000	 ldr         r2, [r2]
  07428	e59d1060	 ldr         r1, [sp, #0x60]
  0742c	e5911000	 ldr         r1, [r1]
  07430	e5911000	 ldr         r1, [r1]
  07434	e59f013c	 ldr         r0, [pc, #0x13C]
  07438	eb000000	 bl          SDCardDebugOutput
  0743c	e3a03001	 mov         r3, #1
  07440	e58d3048	 str         r3, [sp, #0x48]
  07444	ea000001	 b           |$LN11@DumpGPIORe|
  07448		 |$LN10@DumpGPIORe|
  07448	e3a03000	 mov         r3, #0
  0744c	e58d3048	 str         r3, [sp, #0x48]
  07450		 |$LN11@DumpGPIORe|

; 3024 : 
; 3025 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("Pin Rising Edge Detect Enable Registers:\n GRER0=0x%08X, GRER1=0x%08X, GRER2=0x%08X, GRER3=0x%08X\n"),
; 3026 :             pController->pGPIORegisters->GRER0, pController->pGPIORegisters->GRER1, pController->pGPIORegisters->GRER2, pController->pGPIORegisters->GRER3));

  07450	e59f3114	 ldr         r3, [pc, #0x114]
  07454	e5933440	 ldr         r3, [r3, #0x440]
  07458	e3130901	 tst         r3, #1, 18
  0745c	0a000015	 beq         |$LN12@DumpGPIORe|
  07460	e59d3060	 ldr         r3, [sp, #0x60]
  07464	e5933000	 ldr         r3, [r3]
  07468	e2833e13	 add         r3, r3, #0x13, 28
  0746c	e5933000	 ldr         r3, [r3]
  07470	e58d3000	 str         r3, [sp]
  07474	e59d3060	 ldr         r3, [sp, #0x60]
  07478	e5933000	 ldr         r3, [r3]
  0747c	e2833038	 add         r3, r3, #0x38
  07480	e5933000	 ldr         r3, [r3]
  07484	e59d2060	 ldr         r2, [sp, #0x60]
  07488	e5922000	 ldr         r2, [r2]
  0748c	e2822034	 add         r2, r2, #0x34
  07490	e5922000	 ldr         r2, [r2]
  07494	e59d1060	 ldr         r1, [sp, #0x60]
  07498	e5911000	 ldr         r1, [r1]
  0749c	e2811030	 add         r1, r1, #0x30
  074a0	e5911000	 ldr         r1, [r1]
  074a4	e59f00c8	 ldr         r0, [pc, #0xC8]
  074a8	eb000000	 bl          SDCardDebugOutput
  074ac	e3a03001	 mov         r3, #1
  074b0	e58d304c	 str         r3, [sp, #0x4C]
  074b4	ea000001	 b           |$LN13@DumpGPIORe|
  074b8		 |$LN12@DumpGPIORe|
  074b8	e3a03000	 mov         r3, #0
  074bc	e58d304c	 str         r3, [sp, #0x4C]
  074c0		 |$LN13@DumpGPIORe|

; 3027 : 
; 3028 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("Pin Falling Edge Detect Enable Registers:\n GFER0=0x%08X, GFER1=0x%08X, GFER2=0x%08X, GFER3=0x%08X\n"),
; 3029 :             pController->pGPIORegisters->GFER0, pController->pGPIORegisters->GFER1, pController->pGPIORegisters->GFER2, pController->pGPIORegisters->GFER3));

  074c0	e59f30a4	 ldr         r3, [pc, #0xA4]
  074c4	e5933440	 ldr         r3, [r3, #0x440]
  074c8	e3130901	 tst         r3, #1, 18
  074cc	0a000015	 beq         |$LN14@DumpGPIORe|
  074d0	e59d3060	 ldr         r3, [sp, #0x60]
  074d4	e5933000	 ldr         r3, [r3]
  074d8	e2833f4f	 add         r3, r3, #0x4F, 30
  074dc	e5933000	 ldr         r3, [r3]
  074e0	e58d3000	 str         r3, [sp]
  074e4	e59d3060	 ldr         r3, [sp, #0x60]
  074e8	e5933000	 ldr         r3, [r3]
  074ec	e2833044	 add         r3, r3, #0x44
  074f0	e5933000	 ldr         r3, [r3]
  074f4	e59d2060	 ldr         r2, [sp, #0x60]
  074f8	e5922000	 ldr         r2, [r2]
  074fc	e2822040	 add         r2, r2, #0x40
  07500	e5922000	 ldr         r2, [r2]
  07504	e59d1060	 ldr         r1, [sp, #0x60]
  07508	e5911000	 ldr         r1, [r1]
  0750c	e281103c	 add         r1, r1, #0x3C
  07510	e5911000	 ldr         r1, [r1]
  07514	e59f0054	 ldr         r0, [pc, #0x54]
  07518	eb000000	 bl          SDCardDebugOutput
  0751c	e3a03001	 mov         r3, #1
  07520	e58d3050	 str         r3, [sp, #0x50]
  07524	ea000001	 b           |$LN15@DumpGPIORe|
  07528		 |$LN14@DumpGPIORe|
  07528	e3a03000	 mov         r3, #0
  0752c	e58d3050	 str         r3, [sp, #0x50]
  07530		 |$LN15@DumpGPIORe|

; 3030 : 
; 3031 :         DbgPrintZo(SDCARD_ZONE_WARN, (TEXT("GPIO Registers Dump End\r\n")));

  07530	e59f3034	 ldr         r3, [pc, #0x34]
  07534	e5933440	 ldr         r3, [r3, #0x440]
  07538	e3130901	 tst         r3, #1, 18
  0753c	0a000004	 beq         |$LN16@DumpGPIORe|
  07540	e59f0020	 ldr         r0, [pc, #0x20]
  07544	eb000000	 bl          SDCardDebugOutput
  07548	e3a03001	 mov         r3, #1
  0754c	e58d3054	 str         r3, [sp, #0x54]
  07550	ea000001	 b           |$LN17@DumpGPIORe|
  07554		 |$LN16@DumpGPIORe|
  07554	e3a03000	 mov         r3, #0
  07558	e58d3054	 str         r3, [sp, #0x54]
  0755c		 |$LN17@DumpGPIORe|
  0755c		 |$LN1@DumpGPIORe|

; 3032 :     }
; 3033 : }

  0755c	e28dd058	 add         sp, sp, #0x58
  07560	e89d6000	 ldmia       sp, {sp, lr}
  07564	e12fff1e	 bx          lr
  07568		 |$LN21@DumpGPIORe|
  07568		 |$LN22@DumpGPIORe|
  07568	00000000	 DCD         |??_C@_1DE@KIKPKDPF@?$AAG?$AAP?$AAI?$AAO?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAE?$AAn?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0756c		 |$LN23@DumpGPIORe|
  0756c	00000000	 DCD         |dpCurSettings|
  07570		 |$LN24@DumpGPIORe|
  07570	00000000	 DCD         |??_C@_1MG@HIAFNOI@?$AAP?$AAi?$AAn?$AA?5?$AAF?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAd?$AAg?$AAe?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAR@|
  07574		 |$LN25@DumpGPIORe|
  07574	00000000	 DCD         |??_C@_1ME@IKKGLGBH@?$AAP?$AAi?$AAn?$AA?5?$AAR?$AAi?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAE?$AAd?$AAg?$AAe?$AA?5?$AAD?$AAe?$AAt?$AAe?$AAc?$AAt?$AA?5?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAR?$AAe@|
  07578		 |$LN26@DumpGPIORe|
  07578	00000000	 DCD         |??_C@_1JM@BIHHMPJI@?$AAP?$AAi?$AAn?$AA?5?$AAL?$AAe?$AAv?$AAe?$AAl?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6?$AA?5?$AAG?$AAP?$AAL?$AAR?$AA0?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@|
  0757c		 |$LN27@DumpGPIORe|
  0757c	00000000	 DCD         |??_C@_1KE@POLHHLEM@?$AAP?$AAi?$AAn?$AA?5?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6?$AA?5?$AAG?$AAP?$AAD?$AAR?$AA0?$AA?$DN@|
  07580		 |$LN28@DumpGPIORe|
  07580	00000000	 DCD         |??_C@_1BEC@JEAHNICN@?$AAA?$AAl?$AAt?$AA?4?$AA?5?$AAF?$AAu?$AAn?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAS?$AAe?$AAl?$AAe?$AAc?$AAt?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?3?$AA?6@|
  07584		 |$LN29@DumpGPIORe|
  07584	00000000	 DCD         |??_C@_1DI@BMFGGMJ@?$AAG?$AAP?$AAI?$AAO?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAs?$AA?5?$AAD?$AAu?$AAm?$AAp?$AA?5?$AAB?$AAe?$AAg?$AAi?$AAn?$AA?$AN?$AA?6?$AA?$AA@|
  07588		 |$M45602|

			 ENDP  ; |DumpGPIORegisters|

	END
