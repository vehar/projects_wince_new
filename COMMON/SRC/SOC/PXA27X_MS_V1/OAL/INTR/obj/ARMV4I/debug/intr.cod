; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\INTR\intr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_pProfilerISR| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|g_pProfilerISR| % 0x4
|g_pGpioRegs| %	0x4
|g_pICReg| %	0x4

  00000			 AREA	 |.data|, DATA
|g_IntPriorities| DCD 0x1a
	DCD	0xc
	DCD	0x1c
	DCD	0x1d
	DCD	0x9
	DCD	0x1f
	DCD	0x1
	DCD	0x19
	DCD	0x20
	DCD	0x21
	DCD	0xb
	DCD	0x3
	DCD	0x2
	DCD	0x7
	DCD	0x16
	DCD	0x14
	DCD	0x15
	DCD	0xe
	DCD	0x1b
	DCD	0x8
	DCD	0x17
	DCD	0x5
	DCD	0xf
	DCD	0xa
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|g_IntPriorities2| DCD 0x0
	DCD	0x4
	EXPORT	|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIntrInit|
	IMPORT	|OALIntrStaticTranslate|
	IMPORT	|BSPIntrInit|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALIntrMapInit|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T43370| DCD	|$LN12@OALIntrIni|
	DCD	0x40007a02
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\intr\intr.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrInit| PROC

; 106  : {

  00000		 |$LN12@OALIntrIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M43367|

; 107  :     BOOL rc = FALSE;

  00008	e3a03000	 mov         r3, #0
  0000c	e58d3004	 str         r3, [sp, #4]

; 108  :     UINT8 nIntPrio;
; 109  :     
; 110  :     OALMSG( OAL_FUNC&&OAL_INTR, (L"+OALInterruptInit\r\n") );

  00010	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130004	 tst         r3, #4
  0001c	0a000008	 beq         |$LN6@OALIntrIni|
  00020	e59f31a8	 ldr         r3, [pc, #0x1A8]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130901	 tst         r3, #1, 18
  0002c	0a000004	 beq         |$LN6@OALIntrIni|
  00030	e59f01ac	 ldr         r0, [pc, #0x1AC]
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e3a03001	 mov         r3, #1
  0003c	e58d300c	 str         r3, [sp, #0xC]
  00040	ea000001	 b           |$LN7@OALIntrIni|
  00044		 |$LN6@OALIntrIni|
  00044	e3a03000	 mov         r3, #0
  00048	e58d300c	 str         r3, [sp, #0xC]
  0004c		 |$LN7@OALIntrIni|

; 111  : 
; 112  :     // Initialize interrupt mapping
; 113  :     OALIntrMapInit();

  0004c	eb000000	 bl          OALIntrMapInit

; 114  : 
; 115  :     // Map a pointer to the GPIO regs
; 116  :     //
; 117  :     g_pGpioRegs  = (volatile BULVERDE_GPIO_REG *) OALPAtoUA(BULVERDE_BASE_REG_PA_GPIO);

  00050	e3a01000	 mov         r1, #0
  00054	e3a00101	 mov         r0, #1, 2
  00058	e380060e	 orr         r0, r0, #0xE, 12
  0005c	eb000000	 bl          OALPAtoVA
  00060	e58d0010	 str         r0, [sp, #0x10]
  00064	e59d2010	 ldr         r2, [sp, #0x10]
  00068	e59f3170	 ldr         r3, [pc, #0x170]
  0006c	e5832000	 str         r2, [r3]

; 118  : 
; 119  :     // Map a pointer to the interrupt controller.
; 120  :     //
; 121  :     g_pICReg = (volatile BULVERDE_INTR_REG *) OALPAtoVA(BULVERDE_BASE_REG_PA_INTC, FALSE);

  00070	e3a01000	 mov         r1, #0
  00074	e3a00101	 mov         r0, #1, 2
  00078	e380060d	 orr         r0, r0, #0xD, 12
  0007c	eb000000	 bl          OALPAtoVA
  00080	e58d0014	 str         r0, [sp, #0x14]
  00084	e59d2014	 ldr         r2, [sp, #0x14]
  00088	e59f3144	 ldr         r3, [pc, #0x144]
  0008c	e5832000	 str         r2, [r3]

; 122  : 
; 123  :     // Configure interrupt priorities.
; 124  :     //
; 125  :     for (nIntPrio = 0 ; nIntPrio < NUM_INT_PRIOS ; nIntPrio++)

  00090	e3a03000	 mov         r3, #0
  00094	e5cd3000	 strb        r3, [sp]
  00098	ea000003	 b           |$LN3@OALIntrIni|
  0009c		 |$LN2@OALIntrIni|
  0009c	e5dd3000	 ldrb        r3, [sp]
  000a0	e2833001	 add         r3, r3, #1
  000a4	e20330ff	 and         r3, r3, #0xFF
  000a8	e5cd3000	 strb        r3, [sp]
  000ac		 |$LN3@OALIntrIni|
  000ac	e5dd3000	 ldrb        r3, [sp]
  000b0	e3530020	 cmp         r3, #0x20
  000b4	aa000011	 bge         |$LN1@OALIntrIni|

; 126  :     {
; 127  :         g_pICReg->ipr[nIntPrio] = ((1 << 31) | g_IntPriorities[nIntPrio]);

  000b8	e5dd3000	 ldrb        r3, [sp]
  000bc	e1a01003	 mov         r1, r3
  000c0	e3a03004	 mov         r3, #4
  000c4	e0020391	 mul         r2, r1, r3
  000c8	e59f310c	 ldr         r3, [pc, #0x10C]
  000cc	e0833002	 add         r3, r3, r2
  000d0	e5933000	 ldr         r3, [r3]
  000d4	e3830102	 orr         r0, r3, #2, 2
  000d8	e59f30f4	 ldr         r3, [pc, #0xF4]
  000dc	e5933000	 ldr         r3, [r3]
  000e0	e283101c	 add         r1, r3, #0x1C
  000e4	e5dd3000	 ldrb        r3, [sp]
  000e8	e1a02003	 mov         r2, r3
  000ec	e3a03004	 mov         r3, #4
  000f0	e0030392	 mul         r3, r2, r3
  000f4	e0813003	 add         r3, r1, r3
  000f8	e5830000	 str         r0, [r3]

; 128  :     }

  000fc	eaffffe6	 b           |$LN2@OALIntrIni|
  00100		 |$LN1@OALIntrIni|

; 129  :     g_pICReg->ipr2[0] = ((1 << 31) | g_IntPriorities2[0]);

  00100	e59f30d0	 ldr         r3, [pc, #0xD0]
  00104	e5933000	 ldr         r3, [r3]
  00108	e3832102	 orr         r2, r3, #2, 2
  0010c	e59f30c0	 ldr         r3, [pc, #0xC0]
  00110	e5933000	 ldr         r3, [r3]
  00114	e28330b0	 add         r3, r3, #0xB0
  00118	e5832000	 str         r2, [r3]

; 130  :     g_pICReg->ipr2[1] = ((1 << 31) | g_IntPriorities2[1]);

  0011c	e59f30b4	 ldr         r3, [pc, #0xB4]
  00120	e5933004	 ldr         r3, [r3, #4]
  00124	e3832102	 orr         r2, r3, #2, 2
  00128	e59f30a4	 ldr         r3, [pc, #0xA4]
  0012c	e5933000	 ldr         r3, [r3]
  00130	e28330b4	 add         r3, r3, #0xB4
  00134	e5832000	 str         r2, [r3]

; 131  : 
; 132  :     //
; 133  :     // Set DIM, the only bit in the ICCR.  
; 134  :     // The effect is that only enabled and unmasked
; 135  :     // interrupts bring the processor out of IDLE mode.
; 136  :     //
; 137  :     g_pICReg->iccr = 0x1;

  00138	e59f3094	 ldr         r3, [pc, #0x94]
  0013c	e5933000	 ldr         r3, [r3]
  00140	e2832014	 add         r2, r3, #0x14
  00144	e3a03001	 mov         r3, #1
  00148	e5823000	 str         r3, [r2]

; 138  : 
; 139  : #ifdef OAL_BSP_CALLBACKS
; 140  :     // Give BSP change to initialize subordinate controller
; 141  :     rc = BSPIntrInit();

  0014c	eb000000	 bl          BSPIntrInit
  00150	e58d0018	 str         r0, [sp, #0x18]
  00154	e59d3018	 ldr         r3, [sp, #0x18]
  00158	e58d3004	 str         r3, [sp, #4]

; 142  : #else
; 143  :     rc = TRUE;
; 144  : #endif
; 145  : 
; 146  :     // Setup static interrupt mappings (first one isn't really needed)
; 147  :     OALIntrStaticTranslate(SYSINTR_RESCHED, IRQ_OSMR0);

  0015c	e3a0101a	 mov         r1, #0x1A
  00160	e3a00001	 mov         r0, #1
  00164	eb000000	 bl          OALIntrStaticTranslate

; 148  :     OALIntrStaticTranslate(SYSINTR_RTC_ALARM, IRQ_RTCALARM);

  00168	e3a0101f	 mov         r1, #0x1F
  0016c	e3a0000d	 mov         r0, #0xD
  00170	eb000000	 bl          OALIntrStaticTranslate

; 149  : 
; 150  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALInterruptInit(rc = %d)\r\n", rc));

  00174	e59f3054	 ldr         r3, [pc, #0x54]
  00178	e5933440	 ldr         r3, [r3, #0x440]
  0017c	e3130901	 tst         r3, #1, 18
  00180	0a000009	 beq         |$LN8@OALIntrIni|
  00184	e59f3044	 ldr         r3, [pc, #0x44]
  00188	e5933440	 ldr         r3, [r3, #0x440]
  0018c	e3130004	 tst         r3, #4
  00190	0a000005	 beq         |$LN8@OALIntrIni|
  00194	e59d1004	 ldr         r1, [sp, #4]
  00198	e59f002c	 ldr         r0, [pc, #0x2C]
  0019c	eb000000	 bl          NKDbgPrintfW
  001a0	e3a03001	 mov         r3, #1
  001a4	e58d301c	 str         r3, [sp, #0x1C]
  001a8	ea000001	 b           |$LN9@OALIntrIni|
  001ac		 |$LN8@OALIntrIni|
  001ac	e3a03000	 mov         r3, #0
  001b0	e58d301c	 str         r3, [sp, #0x1C]
  001b4		 |$LN9@OALIntrIni|

; 151  :     return rc;

  001b4	e59d3004	 ldr         r3, [sp, #4]
  001b8	e58d3008	 str         r3, [sp, #8]

; 152  : }

  001bc	e59d0008	 ldr         r0, [sp, #8]
  001c0	e28dd020	 add         sp, sp, #0x20
  001c4	e49de004	 ldr         lr, [sp], #4
  001c8	e12fff1e	 bx          lr
  001cc		 |$LN13@OALIntrIni|
  001cc		 |$LN14@OALIntrIni|
  001cc	00000000	 DCD         |??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001d0		 |$LN15@OALIntrIni|
  001d0	00000000	 DCD         |dpCurSettings|
  001d4		 |$LN16@OALIntrIni|
  001d4	00000000	 DCD         |g_pICReg|
  001d8		 |$LN17@OALIntrIni|
  001d8	00000000	 DCD         |g_IntPriorities2|
  001dc		 |$LN18@OALIntrIni|
  001dc	00000000	 DCD         |g_IntPriorities|
  001e0		 |$LN19@OALIntrIni|
  001e0	00000000	 DCD         |g_pGpioRegs|
  001e4		 |$LN20@OALIntrIni|
  001e4	00000000	 DCD         |??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  001e8		 |$M43368|

			 ENDP  ; |OALIntrInit|

	EXPORT	|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|OALIntrRequestIrqs|
	IMPORT	|BSPIntrRequestIrqs|

  00008			 AREA	 |.pdata|, PDATA
|$T43392| DCD	|$LN10@OALIntrReq|
	DCD	0x40004c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, "-", 0x0, ">", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  001e8			 AREA	 |.text|, CODE, ARM

  001e8		 |OALIntrRequestIrqs| PROC

; 164  : {

  001e8		 |$LN10@OALIntrReq|
  001e8	e1a0c00d	 mov         r12, sp
  001ec	e92d0007	 stmdb       sp!, {r0 - r2}
  001f0	e92d5000	 stmdb       sp!, {r12, lr}
  001f4	e24dd034	 sub         sp, sp, #0x34
  001f8		 |$M43389|

; 165  :     BOOL rc = FALSE;

  001f8	e3a03000	 mov         r3, #0
  001fc	e58d3010	 str         r3, [sp, #0x10]

; 166  : 
; 167  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 168  :         L"+OALIntrRequestIrqs(0x%08x->%d/%d/0x%08x/%d, 0x%08x, 0x%08x)\r\n",
; 169  :         pDevLoc, pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc,
; 170  :         pDevLoc->Pin, pCount, pIrqs
; 171  :     ));

  00200	e59f3108	 ldr         r3, [pc, #0x108]
  00204	e5933440	 ldr         r3, [r3, #0x440]
  00208	e3130901	 tst         r3, #1, 18
  0020c	0a00001a	 beq         |$LN4@OALIntrReq|
  00210	e59f30f8	 ldr         r3, [pc, #0xF8]
  00214	e5933440	 ldr         r3, [r3, #0x440]
  00218	e3130004	 tst         r3, #4
  0021c	0a000016	 beq         |$LN4@OALIntrReq|
  00220	e59d3044	 ldr         r3, [sp, #0x44]
  00224	e58d300c	 str         r3, [sp, #0xC]
  00228	e59d3040	 ldr         r3, [sp, #0x40]
  0022c	e58d3008	 str         r3, [sp, #8]
  00230	e59d303c	 ldr         r3, [sp, #0x3C]
  00234	e2833010	 add         r3, r3, #0x10
  00238	e5933000	 ldr         r3, [r3]
  0023c	e58d3004	 str         r3, [sp, #4]
  00240	e59d303c	 ldr         r3, [sp, #0x3C]
  00244	e2833008	 add         r3, r3, #8
  00248	e5933000	 ldr         r3, [r3]
  0024c	e58d3000	 str         r3, [sp]
  00250	e59d303c	 ldr         r3, [sp, #0x3C]
  00254	e2833004	 add         r3, r3, #4
  00258	e5933000	 ldr         r3, [r3]
  0025c	e59d203c	 ldr         r2, [sp, #0x3C]
  00260	e5922000	 ldr         r2, [r2]
  00264	e59d103c	 ldr         r1, [sp, #0x3C]
  00268	e59f00a4	 ldr         r0, [pc, #0xA4]
  0026c	eb000000	 bl          NKDbgPrintfW
  00270	e3a03001	 mov         r3, #1
  00274	e58d3028	 str         r3, [sp, #0x28]
  00278	ea000001	 b           |$LN5@OALIntrReq|
  0027c		 |$LN4@OALIntrReq|
  0027c	e3a03000	 mov         r3, #0
  00280	e58d3028	 str         r3, [sp, #0x28]
  00284		 |$LN5@OALIntrReq|

; 172  : 
; 173  :     // This shouldn't happen
; 174  :     if (*pCount < 1) goto cleanUp;

  00284	e59d3040	 ldr         r3, [sp, #0x40]
  00288	e5933000	 ldr         r3, [r3]
  0028c	e3530001	 cmp         r3, #1
  00290	2a000000	 bcs         |$LN1@OALIntrReq|
  00294	ea000006	 b           |$cleanUp$43138|
  00298		 |$LN1@OALIntrReq|

; 175  : 
; 176  : #ifdef OAL_BSP_CALLBACKS
; 177  :     rc = BSPIntrRequestIrqs(pDevLoc, pCount, pIrqs);

  00298	e59d2044	 ldr         r2, [sp, #0x44]
  0029c	e59d1040	 ldr         r1, [sp, #0x40]
  002a0	e59d003c	 ldr         r0, [sp, #0x3C]
  002a4	eb000000	 bl          BSPIntrRequestIrqs
  002a8	e58d002c	 str         r0, [sp, #0x2C]
  002ac	e59d302c	 ldr         r3, [sp, #0x2C]
  002b0	e58d3010	 str         r3, [sp, #0x10]
  002b4		 |$cleanUp$43138|

; 178  : #endif    
; 179  : 
; 180  : cleanUp:        
; 181  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrRequestIrqs(rc = %d)\r\n", rc));

  002b4	e59f3054	 ldr         r3, [pc, #0x54]
  002b8	e5933440	 ldr         r3, [r3, #0x440]
  002bc	e3130901	 tst         r3, #1, 18
  002c0	0a000009	 beq         |$LN6@OALIntrReq|
  002c4	e59f3044	 ldr         r3, [pc, #0x44]
  002c8	e5933440	 ldr         r3, [r3, #0x440]
  002cc	e3130004	 tst         r3, #4
  002d0	0a000005	 beq         |$LN6@OALIntrReq|
  002d4	e59d1010	 ldr         r1, [sp, #0x10]
  002d8	e59f002c	 ldr         r0, [pc, #0x2C]
  002dc	eb000000	 bl          NKDbgPrintfW
  002e0	e3a03001	 mov         r3, #1
  002e4	e58d3030	 str         r3, [sp, #0x30]
  002e8	ea000001	 b           |$LN7@OALIntrReq|
  002ec		 |$LN6@OALIntrReq|
  002ec	e3a03000	 mov         r3, #0
  002f0	e58d3030	 str         r3, [sp, #0x30]
  002f4		 |$LN7@OALIntrReq|

; 182  :     return rc;

  002f4	e59d3010	 ldr         r3, [sp, #0x10]
  002f8	e58d3024	 str         r3, [sp, #0x24]

; 183  : }

  002fc	e59d0024	 ldr         r0, [sp, #0x24]
  00300	e28dd034	 add         sp, sp, #0x34
  00304	e89d6000	 ldmia       sp, {sp, lr}
  00308	e12fff1e	 bx          lr
  0030c		 |$LN11@OALIntrReq|
  0030c		 |$LN12@OALIntrReq|
  0030c	00000000	 DCD         |??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00310		 |$LN13@OALIntrReq|
  00310	00000000	 DCD         |dpCurSettings|
  00314		 |$LN14@OALIntrReq|
  00314	00000000	 DCD         |??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@|
  00318		 |$M43390|

			 ENDP  ; |OALIntrRequestIrqs|

	EXPORT	|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@MDFPIGAB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|OALIntrEnableIrqs|
	IMPORT	|BSPIntrEnableIrq|

  00010			 AREA	 |.pdata|, PDATA
|$T43406| DCD	|$LN19@OALIntrEna|
	DCD	0x40008004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@MDFPIGAB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "("
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00318			 AREA	 |.text|, CODE, ARM

  00318		 |OALIntrEnableIrqs| PROC

; 191  : {

  00318		 |$LN19@OALIntrEna|
  00318	e1a0c00d	 mov         r12, sp
  0031c	e92d0003	 stmdb       sp!, {r0, r1}
  00320	e92d5000	 stmdb       sp!, {r12, lr}
  00324	e24dd01c	 sub         sp, sp, #0x1C
  00328		 |$M43403|

; 192  :     BOOL rc = TRUE;

  00328	e3a03001	 mov         r3, #1
  0032c	e58d3000	 str         r3, [sp]

; 193  :     UINT32 irq, i;
; 194  : 
; 195  : 
; 196  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 197  :         L"+OALIntrEnableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 198  :     ));

  00330	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00334	e5933440	 ldr         r3, [r3, #0x440]
  00338	e3130901	 tst         r3, #1, 18
  0033c	0a00000a	 beq         |$LN13@OALIntrEna|
  00340	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00344	e5933440	 ldr         r3, [r3, #0x440]
  00348	e3130004	 tst         r3, #4
  0034c	0a000006	 beq         |$LN13@OALIntrEna|
  00350	e59d2028	 ldr         r2, [sp, #0x28]
  00354	e59d1024	 ldr         r1, [sp, #0x24]
  00358	e59f01b4	 ldr         r0, [pc, #0x1B4]
  0035c	eb000000	 bl          NKDbgPrintfW
  00360	e3a03001	 mov         r3, #1
  00364	e58d3010	 str         r3, [sp, #0x10]
  00368	ea000001	 b           |$LN14@OALIntrEna|
  0036c		 |$LN13@OALIntrEna|
  0036c	e3a03000	 mov         r3, #0
  00370	e58d3010	 str         r3, [sp, #0x10]
  00374		 |$LN14@OALIntrEna|

; 199  :     
; 200  :     for (i = 0; i < count; i++) {

  00374	e3a03000	 mov         r3, #0
  00378	e58d3004	 str         r3, [sp, #4]
  0037c	ea000002	 b           |$LN10@OALIntrEna|
  00380		 |$LN9@OALIntrEna|
  00380	e59d3004	 ldr         r3, [sp, #4]
  00384	e2833001	 add         r3, r3, #1
  00388	e58d3004	 str         r3, [sp, #4]
  0038c		 |$LN10@OALIntrEna|
  0038c	e59d2004	 ldr         r2, [sp, #4]
  00390	e59d3024	 ldr         r3, [sp, #0x24]
  00394	e1520003	 cmp         r2, r3
  00398	2a000044	 bcs         |$LN8@OALIntrEna|

; 201  : #ifndef OAL_BSP_CALLBACKS
; 202  :         irq = pIrqs[i];
; 203  : #else
; 204  :         // Give BSP chance to enable irq on subordinate interrupt controller
; 205  :         irq = BSPIntrEnableIrq(pIrqs[i]);

  0039c	e59d1004	 ldr         r1, [sp, #4]
  003a0	e3a03004	 mov         r3, #4
  003a4	e0020391	 mul         r2, r1, r3
  003a8	e59d3028	 ldr         r3, [sp, #0x28]
  003ac	e0833002	 add         r3, r3, r2
  003b0	e5930000	 ldr         r0, [r3]
  003b4	eb000000	 bl          BSPIntrEnableIrq
  003b8	e58d0014	 str         r0, [sp, #0x14]
  003bc	e59d3014	 ldr         r3, [sp, #0x14]
  003c0	e58d3008	 str         r3, [sp, #8]

; 206  :         if (irq == OAL_INTR_IRQ_UNDEFINED) continue;

  003c4	e59d3008	 ldr         r3, [sp, #8]
  003c8	e3730001	 cmn         r3, #1
  003cc	1a000000	 bne         |$LN7@OALIntrEna|
  003d0	eaffffea	 b           |$LN9@OALIntrEna|
  003d4		 |$LN7@OALIntrEna|

; 207  : #endif
; 208  :         if (irq <= IRQ_RTCALARM) {

  003d4	e59d3008	 ldr         r3, [sp, #8]
  003d8	e353001f	 cmp         r3, #0x1F
  003dc	8a00000c	 bhi         |$LN6@OALIntrEna|

; 209  :             // Enable the primary IRQ
; 210  :             SETREG32(&g_pICReg->icmr, (1 << irq));

  003e0	e59f3128	 ldr         r3, [pc, #0x128]
  003e4	e5933000	 ldr         r3, [r3]
  003e8	e2831004	 add         r1, r3, #4
  003ec	e59d2008	 ldr         r2, [sp, #8]
  003f0	e3a03001	 mov         r3, #1
  003f4	e1a02213	 mov         r2, r3, lsl r2
  003f8	e5913000	 ldr         r3, [r1]
  003fc	e1832002	 orr         r2, r3, r2
  00400	e59f3108	 ldr         r3, [pc, #0x108]
  00404	e5933000	 ldr         r3, [r3]
  00408	e2833004	 add         r3, r3, #4
  0040c	e5832000	 str         r2, [r3]
  00410	ea000025	 b           |$LN5@OALIntrEna|
  00414		 |$LN6@OALIntrEna|

; 211  :         }
; 212  :         else if ((irq >= IRQ_WTM) && (irq <= IRQ_CAMQCKCAP))

  00414	e59d3008	 ldr         r3, [sp, #8]
  00418	e3530020	 cmp         r3, #0x20
  0041c	3a000010	 bcc         |$LN4@OALIntrEna|
  00420	e59d3008	 ldr         r3, [sp, #8]
  00424	e3530021	 cmp         r3, #0x21
  00428	8a00000d	 bhi         |$LN4@OALIntrEna|

; 213  :         {
; 214  :             SETREG32(&g_pICReg->icmr2, (1 << (irq - IRQ_WTM)));

  0042c	e59f30dc	 ldr         r3, [pc, #0xDC]
  00430	e5933000	 ldr         r3, [r3]
  00434	e28310a0	 add         r1, r3, #0xA0
  00438	e59d3008	 ldr         r3, [sp, #8]
  0043c	e2432020	 sub         r2, r3, #0x20
  00440	e3a03001	 mov         r3, #1
  00444	e1a02213	 mov         r2, r3, lsl r2
  00448	e5913000	 ldr         r3, [r1]
  0044c	e1832002	 orr         r2, r3, r2
  00450	e59f30b8	 ldr         r3, [pc, #0xB8]
  00454	e5933000	 ldr         r3, [r3]
  00458	e28330a0	 add         r3, r3, #0xA0
  0045c	e5832000	 str         r2, [r3]
  00460	ea000011	 b           |$LN3@OALIntrEna|
  00464		 |$LN4@OALIntrEna|

; 215  :         }
; 216  :         else if (irq >= IRQ_GPIOXX_2_GPIOMIN && irq <= IRQ_GPIOXX_2_GPIOMAX) {

  00464	e59d3008	 ldr         r3, [sp, #8]
  00468	e3530064	 cmp         r3, #0x64
  0046c	3a00000c	 bcc         |$LN2@OALIntrEna|
  00470	e59d3008	 ldr         r3, [sp, #8]
  00474	e35300da	 cmp         r3, #0xDA
  00478	8a000009	 bhi         |$LN2@OALIntrEna|

; 217  :             //Enable IRQ_GPIOXX_2
; 218  :             SETREG32(&g_pICReg->icmr, (1 << IRQ_GPIOXX_2));

  0047c	e59f308c	 ldr         r3, [pc, #0x8C]
  00480	e5933000	 ldr         r3, [r3]
  00484	e2833004	 add         r3, r3, #4
  00488	e5933000	 ldr         r3, [r3]
  0048c	e3832b01	 orr         r2, r3, #1, 22
  00490	e59f3078	 ldr         r3, [pc, #0x78]
  00494	e5933000	 ldr         r3, [r3]
  00498	e2833004	 add         r3, r3, #4
  0049c	e5832000	 str         r2, [r3]

; 219  :             //Note: To actually enable this GPIO irq generation make sure
; 220  :             //the corresponding GRERx/GFERx bits are also set
; 221  :         } else {

  004a0	ea000001	 b           |$LN1@OALIntrEna|
  004a4		 |$LN2@OALIntrEna|

; 222  :             rc = FALSE;

  004a4	e3a03000	 mov         r3, #0
  004a8	e58d3000	 str         r3, [sp]
  004ac		 |$LN1@OALIntrEna|
  004ac		 |$LN3@OALIntrEna|
  004ac		 |$LN5@OALIntrEna|

; 223  :         }            
; 224  :     }

  004ac	eaffffb3	 b           |$LN9@OALIntrEna|
  004b0		 |$LN8@OALIntrEna|

; 225  : 
; 226  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrEnableIrqs(rc = %d)\r\n", rc));

  004b0	e59f3054	 ldr         r3, [pc, #0x54]
  004b4	e5933440	 ldr         r3, [r3, #0x440]
  004b8	e3130901	 tst         r3, #1, 18
  004bc	0a000009	 beq         |$LN15@OALIntrEna|
  004c0	e59f3044	 ldr         r3, [pc, #0x44]
  004c4	e5933440	 ldr         r3, [r3, #0x440]
  004c8	e3130004	 tst         r3, #4
  004cc	0a000005	 beq         |$LN15@OALIntrEna|
  004d0	e59d1000	 ldr         r1, [sp]
  004d4	e59f002c	 ldr         r0, [pc, #0x2C]
  004d8	eb000000	 bl          NKDbgPrintfW
  004dc	e3a03001	 mov         r3, #1
  004e0	e58d3018	 str         r3, [sp, #0x18]
  004e4	ea000001	 b           |$LN16@OALIntrEna|
  004e8		 |$LN15@OALIntrEna|
  004e8	e3a03000	 mov         r3, #0
  004ec	e58d3018	 str         r3, [sp, #0x18]
  004f0		 |$LN16@OALIntrEna|

; 227  :     return rc;    

  004f0	e59d3000	 ldr         r3, [sp]
  004f4	e58d300c	 str         r3, [sp, #0xC]

; 228  : }

  004f8	e59d000c	 ldr         r0, [sp, #0xC]
  004fc	e28dd01c	 add         sp, sp, #0x1C
  00500	e89d6000	 ldmia       sp, {sp, lr}
  00504	e12fff1e	 bx          lr
  00508		 |$LN20@OALIntrEna|
  00508		 |$LN21@OALIntrEna|
  00508	00000000	 DCD         |??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0050c		 |$LN22@OALIntrEna|
  0050c	00000000	 DCD         |dpCurSettings|
  00510		 |$LN23@OALIntrEna|
  00510	00000000	 DCD         |g_pICReg|
  00514		 |$LN24@OALIntrEna|
  00514	00000000	 DCD         |??_C@_1EC@MDFPIGAB@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@|
  00518		 |$M43404|

			 ENDP  ; |OALIntrEnableIrqs|

	EXPORT	|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DisableGPIOIrq|
	EXPORT	|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|OALIntrDisableIrqs|
	IMPORT	|BSPIntrDisableIrq|

  00018			 AREA	 |.pdata|, PDATA
|$T43420| DCD	|$LN17@OALIntrDis|
	DCD	0x40006e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00518			 AREA	 |.text|, CODE, ARM

  00518		 |OALIntrDisableIrqs| PROC

; 236  : {

  00518		 |$LN17@OALIntrDis|
  00518	e1a0c00d	 mov         r12, sp
  0051c	e92d0003	 stmdb       sp!, {r0, r1}
  00520	e92d5000	 stmdb       sp!, {r12, lr}
  00524	e24dd014	 sub         sp, sp, #0x14
  00528		 |$M43417|

; 237  :     UINT32 irq, i;
; 238  : 
; 239  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 240  :         L"+OALIntrDisableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 241  :     ));

  00528	e59f3194	 ldr         r3, [pc, #0x194]
  0052c	e5933440	 ldr         r3, [r3, #0x440]
  00530	e3130901	 tst         r3, #1, 18
  00534	0a00000a	 beq         |$LN11@OALIntrDis|
  00538	e59f3184	 ldr         r3, [pc, #0x184]
  0053c	e5933440	 ldr         r3, [r3, #0x440]
  00540	e3130004	 tst         r3, #4
  00544	0a000006	 beq         |$LN11@OALIntrDis|
  00548	e59d2020	 ldr         r2, [sp, #0x20]
  0054c	e59d101c	 ldr         r1, [sp, #0x1C]
  00550	e59f0174	 ldr         r0, [pc, #0x174]
  00554	eb000000	 bl          NKDbgPrintfW
  00558	e3a03001	 mov         r3, #1
  0055c	e58d3008	 str         r3, [sp, #8]
  00560	ea000001	 b           |$LN12@OALIntrDis|
  00564		 |$LN11@OALIntrDis|
  00564	e3a03000	 mov         r3, #0
  00568	e58d3008	 str         r3, [sp, #8]
  0056c		 |$LN12@OALIntrDis|

; 242  :     
; 243  :     for (i = 0; i < count; i++) {

  0056c	e3a03000	 mov         r3, #0
  00570	e58d3000	 str         r3, [sp]
  00574	ea000002	 b           |$LN8@OALIntrDis|
  00578		 |$LN7@OALIntrDis|
  00578	e59d3000	 ldr         r3, [sp]
  0057c	e2833001	 add         r3, r3, #1
  00580	e58d3000	 str         r3, [sp]
  00584		 |$LN8@OALIntrDis|
  00584	e59d2000	 ldr         r2, [sp]
  00588	e59d301c	 ldr         r3, [sp, #0x1C]
  0058c	e1520003	 cmp         r2, r3
  00590	2a000038	 bcs         |$LN6@OALIntrDis|

; 244  : #ifndef OAL_BSP_CALLBACKS
; 245  :         irq = pIrqs[i];
; 246  : #else
; 247  :         // Give BSP chance to disable irq on subordinate interrupt controller
; 248  :         irq = BSPIntrDisableIrq(pIrqs[i]);

  00594	e59d1000	 ldr         r1, [sp]
  00598	e3a03004	 mov         r3, #4
  0059c	e0020391	 mul         r2, r1, r3
  005a0	e59d3020	 ldr         r3, [sp, #0x20]
  005a4	e0833002	 add         r3, r3, r2
  005a8	e5930000	 ldr         r0, [r3]
  005ac	eb000000	 bl          BSPIntrDisableIrq
  005b0	e58d000c	 str         r0, [sp, #0xC]
  005b4	e59d300c	 ldr         r3, [sp, #0xC]
  005b8	e58d3004	 str         r3, [sp, #4]

; 249  : #endif
; 250  :         if (irq <= IRQ_RTCALARM) {

  005bc	e59d3004	 ldr         r3, [sp, #4]
  005c0	e353001f	 cmp         r3, #0x1F
  005c4	8a00000d	 bhi         |$LN5@OALIntrDis|

; 251  :             // Disable the primary IRQ
; 252  :             CLRREG32(&g_pICReg->icmr, (1 << irq));

  005c8	e59f30f8	 ldr         r3, [pc, #0xF8]
  005cc	e5933000	 ldr         r3, [r3]
  005d0	e2831004	 add         r1, r3, #4
  005d4	e59d2004	 ldr         r2, [sp, #4]
  005d8	e3a03001	 mov         r3, #1
  005dc	e1a03213	 mov         r3, r3, lsl r2
  005e0	e1e02003	 mvn         r2, r3
  005e4	e5913000	 ldr         r3, [r1]
  005e8	e0032002	 and         r2, r3, r2
  005ec	e59f30d4	 ldr         r3, [pc, #0xD4]
  005f0	e5933000	 ldr         r3, [r3]
  005f4	e2833004	 add         r3, r3, #4
  005f8	e5832000	 str         r2, [r3]
  005fc	ea00001c	 b           |$LN4@OALIntrDis|
  00600		 |$LN5@OALIntrDis|

; 253  :         }
; 254  :         else if ((irq >= IRQ_WTM) && (irq <= IRQ_CAMQCKCAP)) {

  00600	e59d3004	 ldr         r3, [sp, #4]
  00604	e3530020	 cmp         r3, #0x20
  00608	3a000011	 bcc         |$LN3@OALIntrDis|
  0060c	e59d3004	 ldr         r3, [sp, #4]
  00610	e3530021	 cmp         r3, #0x21
  00614	8a00000e	 bhi         |$LN3@OALIntrDis|

; 255  :             CLRREG32(&g_pICReg->icmr2, (1 << (irq - IRQ_WTM)));

  00618	e59f30a8	 ldr         r3, [pc, #0xA8]
  0061c	e5933000	 ldr         r3, [r3]
  00620	e28310a0	 add         r1, r3, #0xA0
  00624	e59d3004	 ldr         r3, [sp, #4]
  00628	e2432020	 sub         r2, r3, #0x20
  0062c	e3a03001	 mov         r3, #1
  00630	e1a03213	 mov         r3, r3, lsl r2
  00634	e1e02003	 mvn         r2, r3
  00638	e5913000	 ldr         r3, [r1]
  0063c	e0032002	 and         r2, r3, r2
  00640	e59f3080	 ldr         r3, [pc, #0x80]
  00644	e5933000	 ldr         r3, [r3]
  00648	e28330a0	 add         r3, r3, #0xA0
  0064c	e5832000	 str         r2, [r3]
  00650	ea000007	 b           |$LN2@OALIntrDis|
  00654		 |$LN3@OALIntrDis|

; 256  :         }
; 257  :         else if (irq >= IRQ_GPIOXX_2_GPIOMIN && irq <= IRQ_GPIOXX_2_GPIOMAX) {

  00654	e59d3004	 ldr         r3, [sp, #4]
  00658	e3530064	 cmp         r3, #0x64
  0065c	3a000004	 bcc         |$LN1@OALIntrDis|
  00660	e59d3004	 ldr         r3, [sp, #4]
  00664	e35300da	 cmp         r3, #0xDA
  00668	8a000001	 bhi         |$LN1@OALIntrDis|

; 258  :             //Clear GRERx and GFERx bit disabling interrupt generation.
; 259  :             //Note: Since the next line clears the GRERx and GFERx bits,
; 260  :             //to reenable this GPIO irq generation calling OALIntrEnableIrqs
; 261  :             //is not enough - make sure corresponding GRERx/GFERx bits are also set.
; 262  :             DisableGPIOIrq(irq);

  0066c	e59d0004	 ldr         r0, [sp, #4]
  00670	eb000000	 bl          DisableGPIOIrq
  00674		 |$LN1@OALIntrDis|
  00674		 |$LN2@OALIntrDis|
  00674		 |$LN4@OALIntrDis|

; 263  :         }
; 264  :     }

  00674	eaffffbf	 b           |$LN7@OALIntrDis|
  00678		 |$LN6@OALIntrDis|

; 265  : 
; 266  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrDisableIrqs\r\n"));

  00678	e59f3044	 ldr         r3, [pc, #0x44]
  0067c	e5933440	 ldr         r3, [r3, #0x440]
  00680	e3130901	 tst         r3, #1, 18
  00684	0a000008	 beq         |$LN13@OALIntrDis|
  00688	e59f3034	 ldr         r3, [pc, #0x34]
  0068c	e5933440	 ldr         r3, [r3, #0x440]
  00690	e3130004	 tst         r3, #4
  00694	0a000004	 beq         |$LN13@OALIntrDis|
  00698	e59f0020	 ldr         r0, [pc, #0x20]
  0069c	eb000000	 bl          NKDbgPrintfW
  006a0	e3a03001	 mov         r3, #1
  006a4	e58d3010	 str         r3, [sp, #0x10]
  006a8	ea000001	 b           |$LN14@OALIntrDis|
  006ac		 |$LN13@OALIntrDis|
  006ac	e3a03000	 mov         r3, #0
  006b0	e58d3010	 str         r3, [sp, #0x10]
  006b4		 |$LN14@OALIntrDis|

; 267  : }

  006b4	e28dd014	 add         sp, sp, #0x14
  006b8	e89d6000	 ldmia       sp, {sp, lr}
  006bc	e12fff1e	 bx          lr
  006c0		 |$LN18@OALIntrDis|
  006c0		 |$LN19@OALIntrDis|
  006c0	00000000	 DCD         |??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  006c4		 |$LN20@OALIntrDis|
  006c4	00000000	 DCD         |dpCurSettings|
  006c8		 |$LN21@OALIntrDis|
  006c8	00000000	 DCD         |g_pICReg|
  006cc		 |$LN22@OALIntrDis|
  006cc	00000000	 DCD         |??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@|
  006d0		 |$M43418|

			 ENDP  ; |OALIntrDisableIrqs|

	EXPORT	|??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIntrDoneIrqs|
	IMPORT	|BSPIntrDoneIrq|

  00020			 AREA	 |.pdata|, PDATA
|$T43434| DCD	|$LN16@OALIntrDon|
	DCD	0x40006704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "r", 0x0, "q", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  006d0			 AREA	 |.text|, CODE, ARM

  006d0		 |OALIntrDoneIrqs| PROC

; 275  : {

  006d0		 |$LN16@OALIntrDon|
  006d0	e1a0c00d	 mov         r12, sp
  006d4	e92d0003	 stmdb       sp!, {r0, r1}
  006d8	e92d5000	 stmdb       sp!, {r12, lr}
  006dc	e24dd014	 sub         sp, sp, #0x14
  006e0		 |$M43431|

; 276  :     UINT32 irq, i;
; 277  : 
; 278  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 279  :         L"+OALIntrDoneIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 280  :     ));

  006e0	e59f3178	 ldr         r3, [pc, #0x178]
  006e4	e5933440	 ldr         r3, [r3, #0x440]
  006e8	e3130901	 tst         r3, #1, 18
  006ec	0a00000a	 beq         |$LN10@OALIntrDon|
  006f0	e59f3168	 ldr         r3, [pc, #0x168]
  006f4	e5933440	 ldr         r3, [r3, #0x440]
  006f8	e3130902	 tst         r3, #2, 18
  006fc	0a000006	 beq         |$LN10@OALIntrDon|
  00700	e59d2020	 ldr         r2, [sp, #0x20]
  00704	e59d101c	 ldr         r1, [sp, #0x1C]
  00708	e59f0158	 ldr         r0, [pc, #0x158]
  0070c	eb000000	 bl          NKDbgPrintfW
  00710	e3a03001	 mov         r3, #1
  00714	e58d3008	 str         r3, [sp, #8]
  00718	ea000001	 b           |$LN11@OALIntrDon|
  0071c		 |$LN10@OALIntrDon|
  0071c	e3a03000	 mov         r3, #0
  00720	e58d3008	 str         r3, [sp, #8]
  00724		 |$LN11@OALIntrDon|

; 281  : 
; 282  :     for (i = 0; i < count; i++) {

  00724	e3a03000	 mov         r3, #0
  00728	e58d3000	 str         r3, [sp]
  0072c	ea000002	 b           |$LN7@OALIntrDon|
  00730		 |$LN6@OALIntrDon|
  00730	e59d3000	 ldr         r3, [sp]
  00734	e2833001	 add         r3, r3, #1
  00738	e58d3000	 str         r3, [sp]
  0073c		 |$LN7@OALIntrDon|
  0073c	e59d2000	 ldr         r2, [sp]
  00740	e59d301c	 ldr         r3, [sp, #0x1C]
  00744	e1520003	 cmp         r2, r3
  00748	2a000031	 bcs         |$LN5@OALIntrDon|

; 283  : #ifndef OAL_BSP_CALLBACKS
; 284  :         irq = pIrqs[i];
; 285  : #else
; 286  :         // Give BSP chance to finish irq on subordinate interrupt controller
; 287  :         irq = BSPIntrDoneIrq(pIrqs[i]);

  0074c	e59d1000	 ldr         r1, [sp]
  00750	e3a03004	 mov         r3, #4
  00754	e0020391	 mul         r2, r1, r3
  00758	e59d3020	 ldr         r3, [sp, #0x20]
  0075c	e0833002	 add         r3, r3, r2
  00760	e5930000	 ldr         r0, [r3]
  00764	eb000000	 bl          BSPIntrDoneIrq
  00768	e58d000c	 str         r0, [sp, #0xC]
  0076c	e59d300c	 ldr         r3, [sp, #0xC]
  00770	e58d3004	 str         r3, [sp, #4]

; 288  :         if (irq == OAL_INTR_IRQ_UNDEFINED) continue;

  00774	e59d3004	 ldr         r3, [sp, #4]
  00778	e3730001	 cmn         r3, #1
  0077c	1a000000	 bne         |$LN4@OALIntrDon|
  00780	eaffffea	 b           |$LN6@OALIntrDon|
  00784		 |$LN4@OALIntrDon|

; 289  : #endif
; 290  :         if (irq <= IRQ_RTCALARM) {

  00784	e59d3004	 ldr         r3, [sp, #4]
  00788	e353001f	 cmp         r3, #0x1F
  0078c	8a00000c	 bhi         |$LN3@OALIntrDon|

; 291  :             // Enable the primary IRQ
; 292  :             SETREG32(&g_pICReg->icmr, (1 << irq));

  00790	e59f30cc	 ldr         r3, [pc, #0xCC]
  00794	e5933000	 ldr         r3, [r3]
  00798	e2831004	 add         r1, r3, #4
  0079c	e59d2004	 ldr         r2, [sp, #4]
  007a0	e3a03001	 mov         r3, #1
  007a4	e1a02213	 mov         r2, r3, lsl r2
  007a8	e5913000	 ldr         r3, [r1]
  007ac	e1832002	 orr         r2, r3, r2
  007b0	e59f30ac	 ldr         r3, [pc, #0xAC]
  007b4	e5933000	 ldr         r3, [r3]
  007b8	e2833004	 add         r3, r3, #4
  007bc	e5832000	 str         r2, [r3]
  007c0	ea000012	 b           |$LN2@OALIntrDon|
  007c4		 |$LN3@OALIntrDon|

; 293  :         }            
; 294  :         else if ((irq >= IRQ_WTM) && (irq <= IRQ_CAMQCKCAP))

  007c4	e59d3004	 ldr         r3, [sp, #4]
  007c8	e3530020	 cmp         r3, #0x20
  007cc	3a00000f	 bcc         |$LN1@OALIntrDon|
  007d0	e59d3004	 ldr         r3, [sp, #4]
  007d4	e3530021	 cmp         r3, #0x21
  007d8	8a00000c	 bhi         |$LN1@OALIntrDon|

; 295  :         {
; 296  :             SETREG32(&g_pICReg->icmr2, (1 << (irq - IRQ_WTM)));

  007dc	e59f3080	 ldr         r3, [pc, #0x80]
  007e0	e5933000	 ldr         r3, [r3]
  007e4	e28310a0	 add         r1, r3, #0xA0
  007e8	e59d3004	 ldr         r3, [sp, #4]
  007ec	e2432020	 sub         r2, r3, #0x20
  007f0	e3a03001	 mov         r3, #1
  007f4	e1a02213	 mov         r2, r3, lsl r2
  007f8	e5913000	 ldr         r3, [r1]
  007fc	e1832002	 orr         r2, r3, r2
  00800	e59f305c	 ldr         r3, [pc, #0x5C]
  00804	e5933000	 ldr         r3, [r3]
  00808	e28330a0	 add         r3, r3, #0xA0
  0080c	e5832000	 str         r2, [r3]
  00810		 |$LN1@OALIntrDon|
  00810		 |$LN2@OALIntrDon|

; 297  :         }
; 298  :     }

  00810	eaffffc6	 b           |$LN6@OALIntrDon|
  00814		 |$LN5@OALIntrDon|

; 299  : 
; 300  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrDoneIrqs\r\n"));

  00814	e59f3044	 ldr         r3, [pc, #0x44]
  00818	e5933440	 ldr         r3, [r3, #0x440]
  0081c	e3130901	 tst         r3, #1, 18
  00820	0a000008	 beq         |$LN12@OALIntrDon|
  00824	e59f3034	 ldr         r3, [pc, #0x34]
  00828	e5933440	 ldr         r3, [r3, #0x440]
  0082c	e3130902	 tst         r3, #2, 18
  00830	0a000004	 beq         |$LN12@OALIntrDon|
  00834	e59f0020	 ldr         r0, [pc, #0x20]
  00838	eb000000	 bl          NKDbgPrintfW
  0083c	e3a03001	 mov         r3, #1
  00840	e58d3010	 str         r3, [sp, #0x10]
  00844	ea000001	 b           |$LN13@OALIntrDon|
  00848		 |$LN12@OALIntrDon|
  00848	e3a03000	 mov         r3, #0
  0084c	e58d3010	 str         r3, [sp, #0x10]
  00850		 |$LN13@OALIntrDon|

; 301  : }

  00850	e28dd014	 add         sp, sp, #0x14
  00854	e89d6000	 ldmia       sp, {sp, lr}
  00858	e12fff1e	 bx          lr
  0085c		 |$LN17@OALIntrDon|
  0085c		 |$LN18@OALIntrDon|
  0085c	00000000	 DCD         |??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00860		 |$LN19@OALIntrDon|
  00860	00000000	 DCD         |dpCurSettings|
  00864		 |$LN20@OALIntrDon|
  00864	00000000	 DCD         |g_pICReg|
  00868		 |$LN21@OALIntrDon|
  00868	00000000	 DCD         |??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0086c		 |$M43432|

			 ENDP  ; |OALIntrDoneIrqs|

	EXPORT	|ClearGPIOIrq|
	EXPORT	|FindIRQ_GPIOXX_2|
	EXPORT	|OEMInterruptHandler|
	IMPORT	|OALIntrTranslateIrq|
	IMPORT	|NKIsSysIntrValid|
	IMPORT	|NKCallIntChain|
	IMPORT	|BSPIntrActiveIrq|
	IMPORT	|OALTimerIntrHandler|

  00028			 AREA	 |.pdata|, PDATA
|$T43445| DCD	|$LN35@OEMInterru|
	DCD	0x40012204
; Function compile flags: /Odtp

  0086c			 AREA	 |.text|, CODE, ARM

  0086c		 |OEMInterruptHandler| PROC

; 309  : {

  0086c		 |$LN35@OEMInterru|
  0086c	e1a0c00d	 mov         r12, sp
  00870	e92d0001	 stmdb       sp!, {r0}
  00874	e92d5000	 stmdb       sp!, {r12, lr}
  00878	e24dd02c	 sub         sp, sp, #0x2C
  0087c		 |$M43442|

; 310  :     UINT32 irq = OAL_INTR_IRQ_UNDEFINED;

  0087c	e3e03000	 mvn         r3, #0
  00880	e58d3004	 str         r3, [sp, #4]

; 311  :     UINT32 sysIntr = SYSINTR_NOP;

  00884	e3a03000	 mov         r3, #0
  00888	e58d3000	 str         r3, [sp]

; 312  : 
; 313  :     if (!g_pICReg) {

  0088c	e59f3454	 ldr         r3, [pc, #0x454]
  00890	e5933000	 ldr         r3, [r3]
  00894	e3530000	 cmp         r3, #0
  00898	1a000002	 bne         |$LN30@OEMInterru|

; 314  :         return(SYSINTR_NOP);

  0089c	e3a03000	 mov         r3, #0
  008a0	e58d300c	 str         r3, [sp, #0xC]
  008a4	ea00010b	 b           |$LN31@OEMInterru|
  008a8		 |$LN30@OEMInterru|

; 315  :     }
; 316  : 
; 317  :     // Determine the IRQ of the highest priority pending interrupt
; 318  :     irq = (UINT16)((g_pICReg->ichp >> 16) & 0x3F);

  008a8	e59f3438	 ldr         r3, [pc, #0x438]
  008ac	e5933000	 ldr         r3, [r3]
  008b0	e2833018	 add         r3, r3, #0x18
  008b4	e5933000	 ldr         r3, [r3]
  008b8	e1a03503	 mov         r3, r3, lsl #10
  008bc	e1a03d23	 mov         r3, r3, lsr #26
  008c0	e1a03803	 mov         r3, r3, lsl #16
  008c4	e1a03823	 mov         r3, r3, lsr #16
  008c8	e58d3004	 str         r3, [sp, #4]

; 319  : 
; 320  :     if (irq == 0)

  008cc	e59d3004	 ldr         r3, [sp, #4]
  008d0	e3530000	 cmp         r3, #0
  008d4	1a000002	 bne         |$LN29@OEMInterru|

; 321  :     {
; 322  :         return(SYSINTR_NOP);

  008d8	e3a03000	 mov         r3, #0
  008dc	e58d300c	 str         r3, [sp, #0xC]
  008e0	ea0000fc	 b           |$LN31@OEMInterru|
  008e4		 |$LN29@OEMInterru|

; 323  :     }
; 324  : 
; 325  :     // System timer interrupt?
; 326  :     if (irq == IRQ_OSMR0)

  008e4	e59d3004	 ldr         r3, [sp, #4]
  008e8	e353001a	 cmp         r3, #0x1A
  008ec	1a000004	 bne         |$LN28@OEMInterru|

; 327  :     {
; 328  :         // The rest is up to the timer interrupt handler.
; 329  :         //
; 330  :         sysIntr = OALTimerIntrHandler();

  008f0	eb000000	 bl          OALTimerIntrHandler
  008f4	e58d0010	 str         r0, [sp, #0x10]
  008f8	e59d3010	 ldr         r3, [sp, #0x10]
  008fc	e58d3000	 str         r3, [sp]
  00900	ea0000f2	 b           |$LN27@OEMInterru|
  00904		 |$LN28@OEMInterru|

; 331  : 
; 332  :     }
; 333  :     // Profiling timer interrupt?
; 334  :     else if (irq == IRQ_OSMR2)

  00904	e59d3004	 ldr         r3, [sp, #4]
  00908	e353001c	 cmp         r3, #0x1C
  0090c	1a000019	 bne         |$LN26@OEMInterru|

; 335  :     {
; 336  :         // Mask the interrupt
; 337  :         CLRREG32(&g_pICReg->icmr, (1 << irq));

  00910	e59f33d0	 ldr         r3, [pc, #0x3D0]
  00914	e5933000	 ldr         r3, [r3]
  00918	e2831004	 add         r1, r3, #4
  0091c	e59d2004	 ldr         r2, [sp, #4]
  00920	e3a03001	 mov         r3, #1
  00924	e1a03213	 mov         r3, r3, lsl r2
  00928	e1e02003	 mvn         r2, r3
  0092c	e5913000	 ldr         r3, [r1]
  00930	e0032002	 and         r2, r3, r2
  00934	e59f33ac	 ldr         r3, [pc, #0x3AC]
  00938	e5933000	 ldr         r3, [r3]
  0093c	e2833004	 add         r3, r3, #4
  00940	e5832000	 str         r2, [r3]

; 338  : 
; 339  :         // The rest is up to the profiling interrupt handler (if profiling
; 340  :         // is enabled).
; 341  :         //
; 342  :         if (g_pProfilerISR) {

  00944	e59f33a4	 ldr         r3, [pc, #0x3A4]
  00948	e5933000	 ldr         r3, [r3]
  0094c	e3530000	 cmp         r3, #0
  00950	0a000007	 beq         |$LN25@OEMInterru|

; 343  :             sysIntr = g_pProfilerISR(ra);

  00954	e59d0034	 ldr         r0, [sp, #0x34]
  00958	e59f3390	 ldr         r3, [pc, #0x390]
  0095c	e5933000	 ldr         r3, [r3]
  00960	e1a0e00f	 mov         lr, pc
  00964	e12fff13	 bx          r3
  00968	e58d0014	 str         r0, [sp, #0x14]
  0096c	e59d3014	 ldr         r3, [sp, #0x14]
  00970	e58d3000	 str         r3, [sp]
  00974		 |$LN25@OEMInterru|

; 344  :         }
; 345  :     }
; 346  :     // Board-level interrupts
; 347  :     else

  00974	ea0000d5	 b           |$LN24@OEMInterru|
  00978		 |$LN26@OEMInterru|

; 348  :     {
; 349  : #ifdef OAL_BSP_CALLBACKS
; 350  :         UINT32 origIrq = irq;  // save the original so we can tell if it's BSP specific irq

  00978	e59d3004	 ldr         r3, [sp, #4]
  0097c	e58d3008	 str         r3, [sp, #8]

; 351  :         
; 352  :         if (irq == IRQ_GPIO0 || irq == IRQ_GPIO1 || irq == IRQ_GPIOXX_2)

  00980	e59d3004	 ldr         r3, [sp, #4]
  00984	e3530008	 cmp         r3, #8
  00988	0a000005	 beq         |$LN22@OEMInterru|
  0098c	e59d3004	 ldr         r3, [sp, #4]
  00990	e3530009	 cmp         r3, #9
  00994	0a000002	 beq         |$LN22@OEMInterru|
  00998	e59d3004	 ldr         r3, [sp, #4]
  0099c	e353000a	 cmp         r3, #0xA
  009a0	1a000035	 bne         |$LN23@OEMInterru|
  009a4		 |$LN22@OEMInterru|

; 353  :         {
; 354  :             // Give BSP chance to translate IRQ -- if there is subordinate
; 355  :             // interrupt controller in BSP it give chance to decode its status
; 356  :             // and change IRQ
; 357  :             irq = BSPIntrActiveIrq(irq);

  009a4	e59d0004	 ldr         r0, [sp, #4]
  009a8	eb000000	 bl          BSPIntrActiveIrq
  009ac	e58d0018	 str         r0, [sp, #0x18]
  009b0	e59d3018	 ldr         r3, [sp, #0x18]
  009b4	e58d3004	 str         r3, [sp, #4]

; 358  : 
; 359  :             // if irq equals IRQ_GPIOXX_2 demultiplex it to a particular emulated GPIO IRQ if it's not a BSP specific IRQ
; 360  :             if (irq == IRQ_GPIOXX_2 && origIrq== irq) {

  009b8	e59d3004	 ldr         r3, [sp, #4]
  009bc	e353000a	 cmp         r3, #0xA
  009c0	1a000020	 bne         |$LN21@OEMInterru|
  009c4	e59d2008	 ldr         r2, [sp, #8]
  009c8	e59d3004	 ldr         r3, [sp, #4]
  009cc	e1520003	 cmp         r2, r3
  009d0	1a00001c	 bne         |$LN21@OEMInterru|

; 361  :                 
; 362  :                 // find the GPIO IRQ
; 363  :                 irq = FindIRQ_GPIOXX_2();

  009d4	eb000000	 bl          FindIRQ_GPIOXX_2
  009d8	e58d001c	 str         r0, [sp, #0x1C]
  009dc	e59d301c	 ldr         r3, [sp, #0x1C]
  009e0	e58d3004	 str         r3, [sp, #4]

; 364  : 
; 365  :                 if (irq != OAL_INTR_IRQ_UNDEFINED)

  009e4	e59d3004	 ldr         r3, [sp, #4]
  009e8	e3730001	 cmn         r3, #1
  009ec	0a000014	 beq         |$LN20@OEMInterru|

; 366  :                 {
; 367  :                     // Mask the interrupt
; 368  :                     CLRREG32(&g_pICReg->icmr, (1 << IRQ_GPIOXX_2));

  009f0	e59f32f0	 ldr         r3, [pc, #0x2F0]
  009f4	e5933000	 ldr         r3, [r3]
  009f8	e2833004	 add         r3, r3, #4
  009fc	e5932000	 ldr         r2, [r3]
  00a00	e3e03b01	 mvn         r3, #1, 22
  00a04	e0022003	 and         r2, r2, r3
  00a08	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00a0c	e5933000	 ldr         r3, [r3]
  00a10	e2833004	 add         r3, r3, #4
  00a14	e5832000	 str         r2, [r3]

; 369  :                     
; 370  :                     //clear the GEDRx bit otherwise this ISR will be called again
; 371  :                     ClearGPIOIrq(irq);

  00a18	e59d0004	 ldr         r0, [sp, #4]
  00a1c	eb000000	 bl          ClearGPIOIrq

; 372  : 
; 373  :                     // Unmask the interrupt
; 374  :                     SETREG32(&g_pICReg->icmr, (1 << IRQ_GPIOXX_2));

  00a20	e59f32c0	 ldr         r3, [pc, #0x2C0]
  00a24	e5933000	 ldr         r3, [r3]
  00a28	e2833004	 add         r3, r3, #4
  00a2c	e5933000	 ldr         r3, [r3]
  00a30	e3832b01	 orr         r2, r3, #1, 22
  00a34	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00a38	e5933000	 ldr         r3, [r3]
  00a3c	e2833004	 add         r3, r3, #4
  00a40	e5832000	 str         r2, [r3]
  00a44		 |$LN20@OEMInterru|

; 375  :                 }

  00a44	ea00000b	 b           |$LN19@OEMInterru|
  00a48		 |$LN21@OEMInterru|

; 376  :             }
; 377  :             else if (irq == IRQ_GPIO1 && origIrq== irq) {

  00a48	e59d3004	 ldr         r3, [sp, #4]
  00a4c	e3530009	 cmp         r3, #9
  00a50	1a000008	 bne         |$LN18@OEMInterru|
  00a54	e59d2008	 ldr         r2, [sp, #8]
  00a58	e59d3004	 ldr         r3, [sp, #4]
  00a5c	e1520003	 cmp         r2, r3
  00a60	1a000004	 bne         |$LN18@OEMInterru|

; 378  :                 //clear the GEDRx bit otherwise this ISR will be called again
; 379  :                 g_pGpioRegs->GEDR0 = 1u << 1;

  00a64	e59f3280	 ldr         r3, [pc, #0x280]
  00a68	e5933000	 ldr         r3, [r3]
  00a6c	e2832048	 add         r2, r3, #0x48
  00a70	e3a03002	 mov         r3, #2
  00a74	e5823000	 str         r3, [r2]
  00a78		 |$LN18@OEMInterru|
  00a78		 |$LN19@OEMInterru|

; 380  :             }
; 381  :         }
; 382  :         else

  00a78	ea000021	 b           |$LN17@OEMInterru|
  00a7c		 |$LN23@OEMInterru|

; 383  : #endif
; 384  :         {
; 385  :             // Mask the interrupt
; 386  :             if ((irq >= IRQ_WTM) && (irq <= IRQ_CAMQCKCAP))

  00a7c	e59d3004	 ldr         r3, [sp, #4]
  00a80	e3530020	 cmp         r3, #0x20
  00a84	3a000011	 bcc         |$LN16@OEMInterru|
  00a88	e59d3004	 ldr         r3, [sp, #4]
  00a8c	e3530021	 cmp         r3, #0x21
  00a90	8a00000e	 bhi         |$LN16@OEMInterru|

; 387  :             {
; 388  :                 CLRREG32(&g_pICReg->icmr2, (1 << (irq - IRQ_WTM)));

  00a94	e59f324c	 ldr         r3, [pc, #0x24C]
  00a98	e5933000	 ldr         r3, [r3]
  00a9c	e28310a0	 add         r1, r3, #0xA0
  00aa0	e59d3004	 ldr         r3, [sp, #4]
  00aa4	e2432020	 sub         r2, r3, #0x20
  00aa8	e3a03001	 mov         r3, #1
  00aac	e1a03213	 mov         r3, r3, lsl r2
  00ab0	e1e02003	 mvn         r2, r3
  00ab4	e5913000	 ldr         r3, [r1]
  00ab8	e0032002	 and         r2, r3, r2
  00abc	e59f3224	 ldr         r3, [pc, #0x224]
  00ac0	e5933000	 ldr         r3, [r3]
  00ac4	e28330a0	 add         r3, r3, #0xA0
  00ac8	e5832000	 str         r2, [r3]

; 389  :             }
; 390  :             else

  00acc	ea00000c	 b           |$LN15@OEMInterru|
  00ad0		 |$LN16@OEMInterru|

; 391  :             {
; 392  :                 CLRREG32(&g_pICReg->icmr, (1 << irq));

  00ad0	e59f3210	 ldr         r3, [pc, #0x210]
  00ad4	e5933000	 ldr         r3, [r3]
  00ad8	e2831004	 add         r1, r3, #4
  00adc	e59d2004	 ldr         r2, [sp, #4]
  00ae0	e3a03001	 mov         r3, #1
  00ae4	e1a03213	 mov         r3, r3, lsl r2
  00ae8	e1e02003	 mvn         r2, r3
  00aec	e5913000	 ldr         r3, [r1]
  00af0	e0032002	 and         r2, r3, r2
  00af4	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00af8	e5933000	 ldr         r3, [r3]
  00afc	e2833004	 add         r3, r3, #4
  00b00	e5832000	 str         r2, [r3]
  00b04		 |$LN15@OEMInterru|
  00b04		 |$LN17@OEMInterru|

; 393  :             }
; 394  :         }
; 395  : 
; 396  : #ifdef OAL_ILTIMING
; 397  :         if (g_oalILT.active) {
; 398  :             g_oalILT.interrupts++;
; 399  :         }        
; 400  : #endif
; 401  :         // First find if IRQ is claimed by chain
; 402  :         sysIntr = (UINT16)NKCallIntChain((UCHAR)irq);

  00b04	e59d3004	 ldr         r3, [sp, #4]
  00b08	e20300ff	 and         r0, r3, #0xFF
  00b0c	eb000000	 bl          NKCallIntChain
  00b10	e58d0020	 str         r0, [sp, #0x20]
  00b14	e59d3020	 ldr         r3, [sp, #0x20]
  00b18	e1a03803	 mov         r3, r3, lsl #16
  00b1c	e1a03823	 mov         r3, r3, lsr #16
  00b20	e58d3000	 str         r3, [sp]

; 403  :         
; 404  :         //installable ISR returned SYSINTR_NOP?
; 405  :         if (SYSINTR_NOP == sysIntr)

  00b24	e59d3000	 ldr         r3, [sp]
  00b28	e3530000	 cmp         r3, #0
  00b2c	1a00002c	 bne         |$LN14@OEMInterru|

; 406  :         {
; 407  : #ifdef OAL_BSP_CALLBACKS
; 408  :             if (origIrq != irq) {

  00b30	e59d2008	 ldr         r2, [sp, #8]
  00b34	e59d3004	 ldr         r3, [sp, #4]
  00b38	e1520003	 cmp         r2, r3
  00b3c	0a000002	 beq         |$LN13@OEMInterru|

; 409  :                 // BSP specific irq
; 410  :                 BSPIntrEnableIrq (irq);

  00b40	e59d0004	 ldr         r0, [sp, #4]
  00b44	eb000000	 bl          BSPIntrEnableIrq

; 411  :             } else

  00b48	ea000022	 b           |$LN12@OEMInterru|
  00b4c		 |$LN13@OEMInterru|

; 412  : #endif
; 413  :             {
; 414  :                 //no additional processing is required.
; 415  :                 //Unmask the interrupt
; 416  :                 if (irq <= IRQ_RTCALARM) {

  00b4c	e59d3004	 ldr         r3, [sp, #4]
  00b50	e353001f	 cmp         r3, #0x1F
  00b54	8a00000c	 bhi         |$LN11@OEMInterru|

; 417  :                     SETREG32(&g_pICReg->icmr, (1 << irq));

  00b58	e59f3188	 ldr         r3, [pc, #0x188]
  00b5c	e5933000	 ldr         r3, [r3]
  00b60	e2831004	 add         r1, r3, #4
  00b64	e59d2004	 ldr         r2, [sp, #4]
  00b68	e3a03001	 mov         r3, #1
  00b6c	e1a02213	 mov         r2, r3, lsl r2
  00b70	e5913000	 ldr         r3, [r1]
  00b74	e1832002	 orr         r2, r3, r2
  00b78	e59f3168	 ldr         r3, [pc, #0x168]
  00b7c	e5933000	 ldr         r3, [r3]
  00b80	e2833004	 add         r3, r3, #4
  00b84	e5832000	 str         r2, [r3]
  00b88	ea000012	 b           |$LN10@OEMInterru|
  00b8c		 |$LN11@OEMInterru|

; 418  :                 }
; 419  :                 else if ((irq >= IRQ_WTM) && (irq <= IRQ_CAMQCKCAP)) {

  00b8c	e59d3004	 ldr         r3, [sp, #4]
  00b90	e3530020	 cmp         r3, #0x20
  00b94	3a00000f	 bcc         |$LN9@OEMInterru|
  00b98	e59d3004	 ldr         r3, [sp, #4]
  00b9c	e3530021	 cmp         r3, #0x21
  00ba0	8a00000c	 bhi         |$LN9@OEMInterru|

; 420  :                     SETREG32(&g_pICReg->icmr2, (1 << (irq - IRQ_WTM)));

  00ba4	e59f313c	 ldr         r3, [pc, #0x13C]
  00ba8	e5933000	 ldr         r3, [r3]
  00bac	e28310a0	 add         r1, r3, #0xA0
  00bb0	e59d3004	 ldr         r3, [sp, #4]
  00bb4	e2432020	 sub         r2, r3, #0x20
  00bb8	e3a03001	 mov         r3, #1
  00bbc	e1a02213	 mov         r2, r3, lsl r2
  00bc0	e5913000	 ldr         r3, [r1]
  00bc4	e1832002	 orr         r2, r3, r2
  00bc8	e59f3118	 ldr         r3, [pc, #0x118]
  00bcc	e5933000	 ldr         r3, [r3]
  00bd0	e28330a0	 add         r3, r3, #0xA0
  00bd4	e5832000	 str         r2, [r3]
  00bd8		 |$LN9@OEMInterru|
  00bd8		 |$LN10@OEMInterru|
  00bd8		 |$LN12@OEMInterru|

; 421  :                 }
; 422  :             }
; 423  :             
; 424  :             return SYSINTR_NOP;

  00bd8	e3a03000	 mov         r3, #0
  00bdc	e58d300c	 str         r3, [sp, #0xC]
  00be0	ea00003c	 b           |$LN31@OEMInterru|
  00be4		 |$LN14@OEMInterru|

; 425  :         }
; 426  :         
; 427  :         if (sysIntr == (UINT16)SYSINTR_CHAIN || !NKIsSysIntrValid(sysIntr))

  00be4	e59d3000	 ldr         r3, [sp]
  00be8	e3530003	 cmp         r3, #3
  00bec	0a000005	 beq         |$LN7@OEMInterru|
  00bf0	e59d0000	 ldr         r0, [sp]
  00bf4	eb000000	 bl          NKIsSysIntrValid
  00bf8	e58d0024	 str         r0, [sp, #0x24]
  00bfc	e59d3024	 ldr         r3, [sp, #0x24]
  00c00	e3530000	 cmp         r3, #0
  00c04	1a000004	 bne         |$LN8@OEMInterru|
  00c08		 |$LN7@OEMInterru|

; 428  :         {
; 429  :             // IRQ wasn't claimed, use static mapping
; 430  :             sysIntr = OALIntrTranslateIrq(irq);

  00c08	e59d0004	 ldr         r0, [sp, #4]
  00c0c	eb000000	 bl          OALIntrTranslateIrq
  00c10	e58d0028	 str         r0, [sp, #0x28]
  00c14	e59d3028	 ldr         r3, [sp, #0x28]
  00c18	e58d3000	 str         r3, [sp]
  00c1c		 |$LN8@OEMInterru|

; 431  :         }
; 432  : 
; 433  :         // unmask interrupts in case it's NOP or invalid
; 434  :         if (SYSINTR_NOP == sysIntr) {

  00c1c	e59d3000	 ldr         r3, [sp]
  00c20	e3530000	 cmp         r3, #0
  00c24	1a000029	 bne         |$LN6@OEMInterru|

; 435  : #ifdef OAL_BSP_CALLBACKS
; 436  :             if (origIrq != irq) {

  00c28	e59d2008	 ldr         r2, [sp, #8]
  00c2c	e59d3004	 ldr         r3, [sp, #4]
  00c30	e1520003	 cmp         r2, r3
  00c34	0a000002	 beq         |$LN5@OEMInterru|

; 437  :                 // BSP specific irq
; 438  :                 BSPIntrEnableIrq (irq);

  00c38	e59d0004	 ldr         r0, [sp, #4]
  00c3c	eb000000	 bl          BSPIntrEnableIrq

; 439  :             } else

  00c40	ea000022	 b           |$LN4@OEMInterru|
  00c44		 |$LN5@OEMInterru|

; 440  : #endif
; 441  :             {
; 442  :                 // Unmask the interrupt
; 443  :                 if (irq <= IRQ_RTCALARM) {

  00c44	e59d3004	 ldr         r3, [sp, #4]
  00c48	e353001f	 cmp         r3, #0x1F
  00c4c	8a00000c	 bhi         |$LN3@OEMInterru|

; 444  :                     SETREG32(&g_pICReg->icmr, (1 << irq));

  00c50	e59f3090	 ldr         r3, [pc, #0x90]
  00c54	e5933000	 ldr         r3, [r3]
  00c58	e2831004	 add         r1, r3, #4
  00c5c	e59d2004	 ldr         r2, [sp, #4]
  00c60	e3a03001	 mov         r3, #1
  00c64	e1a02213	 mov         r2, r3, lsl r2
  00c68	e5913000	 ldr         r3, [r1]
  00c6c	e1832002	 orr         r2, r3, r2
  00c70	e59f3070	 ldr         r3, [pc, #0x70]
  00c74	e5933000	 ldr         r3, [r3]
  00c78	e2833004	 add         r3, r3, #4
  00c7c	e5832000	 str         r2, [r3]
  00c80	ea000012	 b           |$LN2@OEMInterru|
  00c84		 |$LN3@OEMInterru|

; 445  :                 }
; 446  :                 else if ((irq >= IRQ_WTM) && (irq <= IRQ_CAMQCKCAP)) {

  00c84	e59d3004	 ldr         r3, [sp, #4]
  00c88	e3530020	 cmp         r3, #0x20
  00c8c	3a00000f	 bcc         |$LN1@OEMInterru|
  00c90	e59d3004	 ldr         r3, [sp, #4]
  00c94	e3530021	 cmp         r3, #0x21
  00c98	8a00000c	 bhi         |$LN1@OEMInterru|

; 447  :                     SETREG32(&g_pICReg->icmr2, (1 << (irq - IRQ_WTM)));

  00c9c	e59f3044	 ldr         r3, [pc, #0x44]
  00ca0	e5933000	 ldr         r3, [r3]
  00ca4	e28310a0	 add         r1, r3, #0xA0
  00ca8	e59d3004	 ldr         r3, [sp, #4]
  00cac	e2432020	 sub         r2, r3, #0x20
  00cb0	e3a03001	 mov         r3, #1
  00cb4	e1a02213	 mov         r2, r3, lsl r2
  00cb8	e5913000	 ldr         r3, [r1]
  00cbc	e1832002	 orr         r2, r3, r2
  00cc0	e59f3020	 ldr         r3, [pc, #0x20]
  00cc4	e5933000	 ldr         r3, [r3]
  00cc8	e28330a0	 add         r3, r3, #0xA0
  00ccc	e5832000	 str         r2, [r3]
  00cd0		 |$LN1@OEMInterru|
  00cd0		 |$LN2@OEMInterru|
  00cd0		 |$LN4@OEMInterru|
  00cd0		 |$LN6@OEMInterru|
  00cd0		 |$LN24@OEMInterru|
  00cd0		 |$LN27@OEMInterru|

; 448  :                 }
; 449  :             }
; 450  :         }
; 451  :     }
; 452  : 
; 453  :     return (sysIntr);

  00cd0	e59d3000	 ldr         r3, [sp]
  00cd4	e58d300c	 str         r3, [sp, #0xC]
  00cd8		 |$LN31@OEMInterru|

; 454  : }

  00cd8	e59d000c	 ldr         r0, [sp, #0xC]
  00cdc	e28dd02c	 add         sp, sp, #0x2C
  00ce0	e89d6000	 ldmia       sp, {sp, lr}
  00ce4	e12fff1e	 bx          lr
  00ce8		 |$LN36@OEMInterru|
  00ce8		 |$LN37@OEMInterru|
  00ce8	00000000	 DCD         |g_pICReg|
  00cec		 |$LN38@OEMInterru|
  00cec	00000000	 DCD         |g_pGpioRegs|
  00cf0		 |$LN39@OEMInterru|
  00cf0	00000000	 DCD         |g_pProfilerISR|
  00cf4		 |$M43443|

			 ENDP  ; |OEMInterruptHandler|

	EXPORT	|OEMInterruptHandlerFIQ|

  00030			 AREA	 |.pdata|, PDATA
|$T43454| DCD	|$LN5@OEMInterru@2|
	DCD	0x40000100
; Function compile flags: /Odtp

  00cf4			 AREA	 |.text|, CODE, ARM

  00cf4		 |OEMInterruptHandlerFIQ| PROC

; 462  : {

  00cf4		 |$LN5@OEMInterru@2|
  00cf4		 |$M43451|

; 463  : }

  00cf4	e12fff1e	 bx          lr
  00cf8		 |$M43452|

			 ENDP  ; |OEMInterruptHandlerFIQ|


  00038			 AREA	 |.pdata|, PDATA
|$T43459| DCD	|$LN12@DisableGPI|
	DCD	0x40009703
; Function compile flags: /Odtp

  00cf8			 AREA	 |.text|, CODE, ARM

  00cf8		 |DisableGPIOIrq| PROC

; 470  : {

  00cf8		 |$LN12@DisableGPI|
  00cf8	e1a0c00d	 mov         r12, sp
  00cfc	e92d0001	 stmdb       sp!, {r0}
  00d00	e92d5000	 stmdb       sp!, {r12, lr}
  00d04		 |$M43456|

; 471  :     if (IRQ_GPIOXX_2_GPIO2 <= irq && irq <= IRQ_GPIOXX_2_GPIO31) {

  00d04	e59d3008	 ldr         r3, [sp, #8]
  00d08	e3530064	 cmp         r3, #0x64
  00d0c	3a000021	 bcc         |$LN7@DisableGPI|
  00d10	e59d3008	 ldr         r3, [sp, #8]
  00d14	e3530081	 cmp         r3, #0x81
  00d18	8a00001e	 bhi         |$LN7@DisableGPI|

; 472  :         g_pGpioRegs->GFER0 &= ~(1 << (irq +2 - IRQ_GPIOXX_2_GPIO2));

  00d1c	e59f322c	 ldr         r3, [pc, #0x22C]
  00d20	e5933000	 ldr         r3, [r3]
  00d24	e283103c	 add         r1, r3, #0x3C
  00d28	e59d3008	 ldr         r3, [sp, #8]
  00d2c	e2833002	 add         r3, r3, #2
  00d30	e2432064	 sub         r2, r3, #0x64
  00d34	e3a03001	 mov         r3, #1
  00d38	e1a03213	 mov         r3, r3, lsl r2
  00d3c	e1e02003	 mvn         r2, r3
  00d40	e5913000	 ldr         r3, [r1]
  00d44	e0032002	 and         r2, r3, r2
  00d48	e59f3200	 ldr         r3, [pc, #0x200]
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e283303c	 add         r3, r3, #0x3C
  00d54	e5832000	 str         r2, [r3]

; 473  :         g_pGpioRegs->GRER0 &= ~(1 << (irq +2 - IRQ_GPIOXX_2_GPIO2));

  00d58	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00d5c	e5933000	 ldr         r3, [r3]
  00d60	e2831030	 add         r1, r3, #0x30
  00d64	e59d3008	 ldr         r3, [sp, #8]
  00d68	e2833002	 add         r3, r3, #2
  00d6c	e2432064	 sub         r2, r3, #0x64
  00d70	e3a03001	 mov         r3, #1
  00d74	e1a03213	 mov         r3, r3, lsl r2
  00d78	e1e02003	 mvn         r2, r3
  00d7c	e5913000	 ldr         r3, [r1]
  00d80	e0032002	 and         r2, r3, r2
  00d84	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00d88	e5933000	 ldr         r3, [r3]
  00d8c	e2833030	 add         r3, r3, #0x30
  00d90	e5832000	 str         r2, [r3]
  00d94	ea00006b	 b           |$LN6@DisableGPI|
  00d98		 |$LN7@DisableGPI|

; 474  :     }
; 475  :     else if (IRQ_GPIOXX_2_GPIO32 <= irq && irq <= IRQ_GPIOXX_2_GPIO63) {

  00d98	e59d3008	 ldr         r3, [sp, #8]
  00d9c	e3530082	 cmp         r3, #0x82
  00da0	3a00001f	 bcc         |$LN5@DisableGPI|
  00da4	e59d3008	 ldr         r3, [sp, #8]
  00da8	e35300a1	 cmp         r3, #0xA1
  00dac	8a00001c	 bhi         |$LN5@DisableGPI|

; 476  :         g_pGpioRegs->GFER1 &= ~(1 << (irq - IRQ_GPIOXX_2_GPIO32));

  00db0	e59f3198	 ldr         r3, [pc, #0x198]
  00db4	e5933000	 ldr         r3, [r3]
  00db8	e2831040	 add         r1, r3, #0x40
  00dbc	e59d3008	 ldr         r3, [sp, #8]
  00dc0	e2432082	 sub         r2, r3, #0x82
  00dc4	e3a03001	 mov         r3, #1
  00dc8	e1a03213	 mov         r3, r3, lsl r2
  00dcc	e1e02003	 mvn         r2, r3
  00dd0	e5913000	 ldr         r3, [r1]
  00dd4	e0032002	 and         r2, r3, r2
  00dd8	e59f3170	 ldr         r3, [pc, #0x170]
  00ddc	e5933000	 ldr         r3, [r3]
  00de0	e2833040	 add         r3, r3, #0x40
  00de4	e5832000	 str         r2, [r3]

; 477  :         g_pGpioRegs->GRER1 &= ~(1 << (irq - IRQ_GPIOXX_2_GPIO32));

  00de8	e59f3160	 ldr         r3, [pc, #0x160]
  00dec	e5933000	 ldr         r3, [r3]
  00df0	e2831034	 add         r1, r3, #0x34
  00df4	e59d3008	 ldr         r3, [sp, #8]
  00df8	e2432082	 sub         r2, r3, #0x82
  00dfc	e3a03001	 mov         r3, #1
  00e00	e1a03213	 mov         r3, r3, lsl r2
  00e04	e1e02003	 mvn         r2, r3
  00e08	e5913000	 ldr         r3, [r1]
  00e0c	e0032002	 and         r2, r3, r2
  00e10	e59f3138	 ldr         r3, [pc, #0x138]
  00e14	e5933000	 ldr         r3, [r3]
  00e18	e2833034	 add         r3, r3, #0x34
  00e1c	e5832000	 str         r2, [r3]
  00e20	ea000048	 b           |$LN4@DisableGPI|
  00e24		 |$LN5@DisableGPI|

; 478  :     }
; 479  :     else if (IRQ_GPIOXX_2_GPIO64 <= irq && irq <= IRQ_GPIOXX_2_GPIO95)  {

  00e24	e59d3008	 ldr         r3, [sp, #8]
  00e28	e35300a2	 cmp         r3, #0xA2
  00e2c	3a00001f	 bcc         |$LN3@DisableGPI|
  00e30	e59d3008	 ldr         r3, [sp, #8]
  00e34	e35300c1	 cmp         r3, #0xC1
  00e38	8a00001c	 bhi         |$LN3@DisableGPI|

; 480  :         g_pGpioRegs->GFER2 &= ~(1 << (irq - IRQ_GPIOXX_2_GPIO64));

  00e3c	e59f310c	 ldr         r3, [pc, #0x10C]
  00e40	e5933000	 ldr         r3, [r3]
  00e44	e2831044	 add         r1, r3, #0x44
  00e48	e59d3008	 ldr         r3, [sp, #8]
  00e4c	e24320a2	 sub         r2, r3, #0xA2
  00e50	e3a03001	 mov         r3, #1
  00e54	e1a03213	 mov         r3, r3, lsl r2
  00e58	e1e02003	 mvn         r2, r3
  00e5c	e5913000	 ldr         r3, [r1]
  00e60	e0032002	 and         r2, r3, r2
  00e64	e59f30e4	 ldr         r3, [pc, #0xE4]
  00e68	e5933000	 ldr         r3, [r3]
  00e6c	e2833044	 add         r3, r3, #0x44
  00e70	e5832000	 str         r2, [r3]

; 481  :         g_pGpioRegs->GRER2 &= ~(1 << (irq - IRQ_GPIOXX_2_GPIO64));

  00e74	e59f30d4	 ldr         r3, [pc, #0xD4]
  00e78	e5933000	 ldr         r3, [r3]
  00e7c	e2831038	 add         r1, r3, #0x38
  00e80	e59d3008	 ldr         r3, [sp, #8]
  00e84	e24320a2	 sub         r2, r3, #0xA2
  00e88	e3a03001	 mov         r3, #1
  00e8c	e1a03213	 mov         r3, r3, lsl r2
  00e90	e1e02003	 mvn         r2, r3
  00e94	e5913000	 ldr         r3, [r1]
  00e98	e0032002	 and         r2, r3, r2
  00e9c	e59f30ac	 ldr         r3, [pc, #0xAC]
  00ea0	e5933000	 ldr         r3, [r3]
  00ea4	e2833038	 add         r3, r3, #0x38
  00ea8	e5832000	 str         r2, [r3]
  00eac	ea000025	 b           |$LN2@DisableGPI|
  00eb0		 |$LN3@DisableGPI|

; 482  :     }
; 483  :     else if (IRQ_GPIOXX_2_GPIO96 <= irq && irq <= IRQ_GPIOXX_2_GPIOMAX)  {

  00eb0	e59d3008	 ldr         r3, [sp, #8]
  00eb4	e35300c2	 cmp         r3, #0xC2
  00eb8	3a000022	 bcc         |$LN1@DisableGPI|
  00ebc	e59d3008	 ldr         r3, [sp, #8]
  00ec0	e35300da	 cmp         r3, #0xDA
  00ec4	8a00001f	 bhi         |$LN1@DisableGPI|

; 484  :         g_pGpioRegs->GFER3 &= ~(1 << (irq - IRQ_GPIOXX_2_GPIO96)) & GPIO_GFER3_VLD_MSK;

  00ec8	e59f3080	 ldr         r3, [pc, #0x80]
  00ecc	e5933000	 ldr         r3, [r3]
  00ed0	e2831f4f	 add         r1, r3, #0x4F, 30
  00ed4	e59d3008	 ldr         r3, [sp, #8]
  00ed8	e24320c2	 sub         r2, r3, #0xC2
  00edc	e3a03001	 mov         r3, #1
  00ee0	e1a03213	 mov         r3, r3, lsl r2
  00ee4	e1e02003	 mvn         r2, r3
  00ee8	e3e034fe	 mvn         r3, #0xFE, 8
  00eec	e0022003	 and         r2, r2, r3
  00ef0	e5913000	 ldr         r3, [r1]
  00ef4	e0032002	 and         r2, r3, r2
  00ef8	e59f3050	 ldr         r3, [pc, #0x50]
  00efc	e5933000	 ldr         r3, [r3]
  00f00	e2833f4f	 add         r3, r3, #0x4F, 30
  00f04	e5832000	 str         r2, [r3]

; 485  :         g_pGpioRegs->GRER3 &= ~(1 << (irq - IRQ_GPIOXX_2_GPIO96)) & GPIO_GRER3_VLD_MSK;

  00f08	e59f3040	 ldr         r3, [pc, #0x40]
  00f0c	e5933000	 ldr         r3, [r3]
  00f10	e2831e13	 add         r1, r3, #0x13, 28
  00f14	e59d3008	 ldr         r3, [sp, #8]
  00f18	e24320c2	 sub         r2, r3, #0xC2
  00f1c	e3a03001	 mov         r3, #1
  00f20	e1a03213	 mov         r3, r3, lsl r2
  00f24	e1e02003	 mvn         r2, r3
  00f28	e3e034fe	 mvn         r3, #0xFE, 8
  00f2c	e0022003	 and         r2, r2, r3
  00f30	e5913000	 ldr         r3, [r1]
  00f34	e0032002	 and         r2, r3, r2
  00f38	e59f3010	 ldr         r3, [pc, #0x10]
  00f3c	e5933000	 ldr         r3, [r3]
  00f40	e2833e13	 add         r3, r3, #0x13, 28
  00f44	e5832000	 str         r2, [r3]
  00f48		 |$LN1@DisableGPI|
  00f48		 |$LN2@DisableGPI|
  00f48		 |$LN4@DisableGPI|
  00f48		 |$LN6@DisableGPI|

; 486  :     }
; 487  : }

  00f48	e89d6000	 ldmia       sp, {sp, lr}
  00f4c	e12fff1e	 bx          lr
  00f50		 |$LN13@DisableGPI|
  00f50		 |$LN14@DisableGPI|
  00f50	00000000	 DCD         |g_pGpioRegs|
  00f54		 |$M43457|

			 ENDP  ; |DisableGPIOIrq|


  00040			 AREA	 |.pdata|, PDATA
|$T43466| DCD	|$LN12@ClearGPIOI|
	DCD	0x40004203
; Function compile flags: /Odtp

  00f54			 AREA	 |.text|, CODE, ARM

  00f54		 |ClearGPIOIrq| PROC

; 494  : {

  00f54		 |$LN12@ClearGPIOI|
  00f54	e1a0c00d	 mov         r12, sp
  00f58	e92d0001	 stmdb       sp!, {r0}
  00f5c	e92d5000	 stmdb       sp!, {r12, lr}
  00f60		 |$M43463|

; 495  : 
; 496  :     if (IRQ_GPIOXX_2_GPIO2 <= irq && irq <= IRQ_GPIOXX_2_GPIO31)

  00f60	e59d3008	 ldr         r3, [sp, #8]
  00f64	e3530064	 cmp         r3, #0x64
  00f68	3a00000c	 bcc         |$LN7@ClearGPIOI|
  00f6c	e59d3008	 ldr         r3, [sp, #8]
  00f70	e3530081	 cmp         r3, #0x81
  00f74	8a000009	 bhi         |$LN7@ClearGPIOI|

; 497  :         g_pGpioRegs->GEDR0 = 1 << (irq +2 - IRQ_GPIOXX_2_GPIO2);

  00f78	e59d3008	 ldr         r3, [sp, #8]
  00f7c	e2833002	 add         r3, r3, #2
  00f80	e2432064	 sub         r2, r3, #0x64
  00f84	e3a03001	 mov         r3, #1
  00f88	e1a02213	 mov         r2, r3, lsl r2
  00f8c	e59f30c4	 ldr         r3, [pc, #0xC4]
  00f90	e5933000	 ldr         r3, [r3]
  00f94	e2833048	 add         r3, r3, #0x48
  00f98	e5832000	 str         r2, [r3]
  00f9c	ea00002b	 b           |$LN6@ClearGPIOI|
  00fa0		 |$LN7@ClearGPIOI|

; 498  :     else if (IRQ_GPIOXX_2_GPIO32 <= irq && irq <= IRQ_GPIOXX_2_GPIO63)

  00fa0	e59d3008	 ldr         r3, [sp, #8]
  00fa4	e3530082	 cmp         r3, #0x82
  00fa8	3a00000b	 bcc         |$LN5@ClearGPIOI|
  00fac	e59d3008	 ldr         r3, [sp, #8]
  00fb0	e35300a1	 cmp         r3, #0xA1
  00fb4	8a000008	 bhi         |$LN5@ClearGPIOI|

; 499  :         g_pGpioRegs->GEDR1 = 1 << (irq - IRQ_GPIOXX_2_GPIO32);

  00fb8	e59d3008	 ldr         r3, [sp, #8]
  00fbc	e2432082	 sub         r2, r3, #0x82
  00fc0	e3a03001	 mov         r3, #1
  00fc4	e1a02213	 mov         r2, r3, lsl r2
  00fc8	e59f3088	 ldr         r3, [pc, #0x88]
  00fcc	e5933000	 ldr         r3, [r3]
  00fd0	e283304c	 add         r3, r3, #0x4C
  00fd4	e5832000	 str         r2, [r3]
  00fd8	ea00001c	 b           |$LN4@ClearGPIOI|
  00fdc		 |$LN5@ClearGPIOI|

; 500  :     else if (IRQ_GPIOXX_2_GPIO64 <= irq && irq <= IRQ_GPIOXX_2_GPIO95)

  00fdc	e59d3008	 ldr         r3, [sp, #8]
  00fe0	e35300a2	 cmp         r3, #0xA2
  00fe4	3a00000b	 bcc         |$LN3@ClearGPIOI|
  00fe8	e59d3008	 ldr         r3, [sp, #8]
  00fec	e35300c1	 cmp         r3, #0xC1
  00ff0	8a000008	 bhi         |$LN3@ClearGPIOI|

; 501  :         g_pGpioRegs->GEDR2 = 1 << (irq - IRQ_GPIOXX_2_GPIO64);

  00ff4	e59d3008	 ldr         r3, [sp, #8]
  00ff8	e24320a2	 sub         r2, r3, #0xA2
  00ffc	e3a03001	 mov         r3, #1
  01000	e1a02213	 mov         r2, r3, lsl r2
  01004	e59f304c	 ldr         r3, [pc, #0x4C]
  01008	e5933000	 ldr         r3, [r3]
  0100c	e2833050	 add         r3, r3, #0x50
  01010	e5832000	 str         r2, [r3]
  01014	ea00000d	 b           |$LN2@ClearGPIOI|
  01018		 |$LN3@ClearGPIOI|

; 502  :     else if (IRQ_GPIOXX_2_GPIO96 <= irq && irq <= IRQ_GPIOXX_2_GPIOMAX)

  01018	e59d3008	 ldr         r3, [sp, #8]
  0101c	e35300c2	 cmp         r3, #0xC2
  01020	3a00000a	 bcc         |$LN1@ClearGPIOI|
  01024	e59d3008	 ldr         r3, [sp, #8]
  01028	e35300da	 cmp         r3, #0xDA
  0102c	8a000007	 bhi         |$LN1@ClearGPIOI|

; 503  :         g_pGpioRegs->GEDR3 = (1 << (irq - IRQ_GPIOXX_2_GPIO96));

  01030	e59d3008	 ldr         r3, [sp, #8]
  01034	e24320c2	 sub         r2, r3, #0xC2
  01038	e3a03001	 mov         r3, #1
  0103c	e1a02213	 mov         r2, r3, lsl r2
  01040	e59f3010	 ldr         r3, [pc, #0x10]
  01044	e5933000	 ldr         r3, [r3]
  01048	e2833f52	 add         r3, r3, #0x52, 30
  0104c	e5832000	 str         r2, [r3]
  01050		 |$LN1@ClearGPIOI|
  01050		 |$LN2@ClearGPIOI|
  01050		 |$LN4@ClearGPIOI|
  01050		 |$LN6@ClearGPIOI|

; 504  : }

  01050	e89d6000	 ldmia       sp, {sp, lr}
  01054	e12fff1e	 bx          lr
  01058		 |$LN13@ClearGPIOI|
  01058		 |$LN14@ClearGPIOI|
  01058	00000000	 DCD         |g_pGpioRegs|
  0105c		 |$M43464|

			 ENDP  ; |ClearGPIOIrq|

	EXPORT	|FirstSetBitPos|

  00048			 AREA	 |.pdata|, PDATA
|$T43485| DCD	|$LN30@FirstSetBi|
	DCD	0x40006004
; Function compile flags: /Odtp

  0105c			 AREA	 |.text|, CODE, ARM

  0105c		 |FirstSetBitPos| PROC

; 514  : {

  0105c		 |$LN30@FirstSetBi|
  0105c	e1a0c00d	 mov         r12, sp
  01060	e92d0001	 stmdb       sp!, {r0}
  01064	e92d5000	 stmdb       sp!, {r12, lr}
  01068	e24dd00c	 sub         sp, sp, #0xC
  0106c		 |$M43482|

; 515  :     UINT32 pos = 0;

  0106c	e3a03000	 mov         r3, #0
  01070	e58d3000	 str         r3, [sp]

; 516  : 
; 517  :     if (!val) return -1;

  01074	e59d3014	 ldr         r3, [sp, #0x14]
  01078	e3530000	 cmp         r3, #0
  0107c	1a000002	 bne         |$LN14@FirstSetBi|
  01080	e3e03000	 mvn         r3, #0
  01084	e58d3004	 str         r3, [sp, #4]
  01088	ea00004f	 b           |$LN15@FirstSetBi|
  0108c		 |$LN14@FirstSetBi|

; 518  :     
; 519  :     //zero out all high order bits that are 1 except the lowest one
; 520  :     val &= (INT32)(0-val);

  0108c	e59d3014	 ldr         r3, [sp, #0x14]
  01090	e2632000	 rsb         r2, r3, #0
  01094	e59d3014	 ldr         r3, [sp, #0x14]
  01098	e0033002	 and         r3, r3, r2
  0109c	e58d3014	 str         r3, [sp, #0x14]
  010a0		 |$LN13@FirstSetBi|

; 521  :     for (;;)
; 522  :         {
; 523  :             switch (val)

  010a0	e59d3014	 ldr         r3, [sp, #0x14]
  010a4	e58d3008	 str         r3, [sp, #8]
  010a8	e59d3008	 ldr         r3, [sp, #8]
  010ac	e3530010	 cmp         r3, #0x10
  010b0	8a000015	 bhi         |$LN17@FirstSetBi|
  010b4	e59d3008	 ldr         r3, [sp, #8]
  010b8	e3530010	 cmp         r3, #0x10
  010bc	0a00002b	 beq         |$LN5@FirstSetBi|
  010c0	e59d3008	 ldr         r3, [sp, #8]
  010c4	e2433001	 sub         r3, r3, #1
  010c8	e58d3008	 str         r3, [sp, #8]
  010cc	e59d3008	 ldr         r3, [sp, #8]
  010d0	e3530007	 cmp         r3, #7
  010d4	8a000035	 bhi         |$LN1@FirstSetBi|
  010d8	e59d2008	 ldr         r2, [sp, #8]
  010dc	e1a03102	 mov         r3, r2, lsl #2
  010e0	e083300f	 add         r3, r3, pc
  010e4	e5933004	 ldr         r3, [r3, #4]
  010e8	e08ff003	 add         pc, pc, r3
  010ec		 |$LN19@FirstSetBi|
  010ec		 |$LN18@FirstSetBi|
  010ec		 |$LN20@FirstSetBi|
  010ec	00000044	 DCD         0x44
  010f0		 |$LN21@FirstSetBi|
  010f0	00000050	 DCD         0x50
  010f4		 |$LN22@FirstSetBi|
  010f4	000000c0	 DCD         0xc0
  010f8		 |$LN23@FirstSetBi|
  010f8	00000060	 DCD         0x60
  010fc		 |$LN24@FirstSetBi|
  010fc	000000c0	 DCD         0xc0
  01100		 |$LN25@FirstSetBi|
  01100	000000c0	 DCD         0xc0
  01104		 |$LN26@FirstSetBi|
  01104	000000c0	 DCD         0xc0
  01108		 |$LN27@FirstSetBi|
  01108	00000070	 DCD         0x70
  0110c		 |$LN17@FirstSetBi|
  0110c	e59d3008	 ldr         r3, [sp, #8]
  01110	e3530020	 cmp         r3, #0x20
  01114	0a000019	 beq         |$LN4@FirstSetBi|
  01118	e59d3008	 ldr         r3, [sp, #8]
  0111c	e3530040	 cmp         r3, #0x40
  01120	0a00001a	 beq         |$LN3@FirstSetBi|
  01124	e59d3008	 ldr         r3, [sp, #8]
  01128	e3530080	 cmp         r3, #0x80
  0112c	0a00001b	 beq         |$LN2@FirstSetBi|
  01130	ea00001e	 b           |$LN1@FirstSetBi|
  01134		 |$LN9@FirstSetBi|

; 524  :                 {
; 525  :                 case 1: return pos;

  01134	e59d3000	 ldr         r3, [sp]
  01138	e58d3004	 str         r3, [sp, #4]
  0113c	ea000022	 b           |$LN15@FirstSetBi|
  01140		 |$LN8@FirstSetBi|

; 526  :                 case 2: return pos+1;

  01140	e59d3000	 ldr         r3, [sp]
  01144	e2833001	 add         r3, r3, #1
  01148	e58d3004	 str         r3, [sp, #4]
  0114c	ea00001e	 b           |$LN15@FirstSetBi|
  01150		 |$LN7@FirstSetBi|

; 527  :                 case 4: return pos+2;

  01150	e59d3000	 ldr         r3, [sp]
  01154	e2833002	 add         r3, r3, #2
  01158	e58d3004	 str         r3, [sp, #4]
  0115c	ea00001a	 b           |$LN15@FirstSetBi|
  01160		 |$LN6@FirstSetBi|

; 528  :                 case 8: return pos+3;

  01160	e59d3000	 ldr         r3, [sp]
  01164	e2833003	 add         r3, r3, #3
  01168	e58d3004	 str         r3, [sp, #4]
  0116c	ea000016	 b           |$LN15@FirstSetBi|
  01170		 |$LN5@FirstSetBi|

; 529  :                 case 16: return pos+4;

  01170	e59d3000	 ldr         r3, [sp]
  01174	e2833004	 add         r3, r3, #4
  01178	e58d3004	 str         r3, [sp, #4]
  0117c	ea000012	 b           |$LN15@FirstSetBi|
  01180		 |$LN4@FirstSetBi|

; 530  :                 case 32: return pos+5;

  01180	e59d3000	 ldr         r3, [sp]
  01184	e2833005	 add         r3, r3, #5
  01188	e58d3004	 str         r3, [sp, #4]
  0118c	ea00000e	 b           |$LN15@FirstSetBi|
  01190		 |$LN3@FirstSetBi|

; 531  :                 case 64: return pos+6;

  01190	e59d3000	 ldr         r3, [sp]
  01194	e2833006	 add         r3, r3, #6
  01198	e58d3004	 str         r3, [sp, #4]
  0119c	ea00000a	 b           |$LN15@FirstSetBi|
  011a0		 |$LN2@FirstSetBi|

; 532  :                 case 128: return pos+7;

  011a0	e59d3000	 ldr         r3, [sp]
  011a4	e2833007	 add         r3, r3, #7
  011a8	e58d3004	 str         r3, [sp, #4]
  011ac	ea000006	 b           |$LN15@FirstSetBi|
  011b0		 |$LN1@FirstSetBi|

; 533  :                 default: 
; 534  :                     val >>= 8;

  011b0	e59d3014	 ldr         r3, [sp, #0x14]
  011b4	e1a03423	 mov         r3, r3, lsr #8
  011b8	e58d3014	 str         r3, [sp, #0x14]

; 535  :                     pos += 8;

  011bc	e59d3000	 ldr         r3, [sp]
  011c0	e2833008	 add         r3, r3, #8
  011c4	e58d3000	 str         r3, [sp]

; 536  :                 }
; 537  :         }

  011c8	eaffffb4	 b           |$LN13@FirstSetBi|
  011cc		 |$LN15@FirstSetBi|

; 538  : }

  011cc	e59d0004	 ldr         r0, [sp, #4]
  011d0	e28dd00c	 add         sp, sp, #0xC
  011d4	e89d6000	 ldmia       sp, {sp, lr}
  011d8	e12fff1e	 bx          lr
  011dc		 |$M43483|

			 ENDP  ; |FirstSetBitPos|


  00050			 AREA	 |.pdata|, PDATA
|$T43491| DCD	|$LN15@FindIRQ_GP|
	DCD	0x40005802
; Function compile flags: /Odtp

  011dc			 AREA	 |.text|, CODE, ARM

  011dc		 |FindIRQ_GPIOXX_2| PROC

; 549  : {

  011dc		 |$LN15@FindIRQ_GP|
  011dc	e52de004	 str         lr, [sp, #-4]!
  011e0	e24dd01c	 sub         sp, sp, #0x1C
  011e4		 |$M43488|

; 550  :     //look up GEDR to find the GPIO Pin that caused interrupt
; 551  :     UINT32 retIrq = OAL_INTR_IRQ_UNDEFINED;

  011e4	e3e03000	 mvn         r3, #0
  011e8	e58d3000	 str         r3, [sp]

; 552  :     UINT32 regVal;
; 553  : 
; 554  :     if (regVal = (g_pGpioRegs->GEDR0 & ~0x03 & GPIO_GEDR0_VLD_MSK)) {     //~0x03 masks GPIO0 and GPIO1 bit positions

  011ec	e59f3144	 ldr         r3, [pc, #0x144]
  011f0	e5933000	 ldr         r3, [r3]
  011f4	e2833048	 add         r3, r3, #0x48
  011f8	e5932000	 ldr         r2, [r3]
  011fc	e3e03003	 mvn         r3, #3
  01200	e0023003	 and         r3, r2, r3
  01204	e58d3004	 str         r3, [sp, #4]
  01208	e59d3004	 ldr         r3, [sp, #4]
  0120c	e3530000	 cmp         r3, #0
  01210	0a000007	 beq         |$LN10@FindIRQ_GP|

; 555  :         retIrq = FirstSetBitPos(regVal >> 2) + IRQ_GPIOXX_2_GPIO2;

  01214	e59d3004	 ldr         r3, [sp, #4]
  01218	e1a00123	 mov         r0, r3, lsr #2
  0121c	eb000000	 bl          FirstSetBitPos
  01220	e58d000c	 str         r0, [sp, #0xC]
  01224	e59d300c	 ldr         r3, [sp, #0xC]
  01228	e2833064	 add         r3, r3, #0x64
  0122c	e58d3000	 str         r3, [sp]
  01230	ea000031	 b           |$LN9@FindIRQ_GP|
  01234		 |$LN10@FindIRQ_GP|

; 556  :     }
; 557  :     else if (regVal = (g_pGpioRegs->GEDR1 & GPIO_GEDR1_VLD_MSK)) {

  01234	e59f30fc	 ldr         r3, [pc, #0xFC]
  01238	e5933000	 ldr         r3, [r3]
  0123c	e283304c	 add         r3, r3, #0x4C
  01240	e5933000	 ldr         r3, [r3]
  01244	e58d3004	 str         r3, [sp, #4]
  01248	e59d3004	 ldr         r3, [sp, #4]
  0124c	e3530000	 cmp         r3, #0
  01250	0a000006	 beq         |$LN8@FindIRQ_GP|

; 558  :         retIrq = FirstSetBitPos(regVal) + IRQ_GPIOXX_2_GPIO32;

  01254	e59d0004	 ldr         r0, [sp, #4]
  01258	eb000000	 bl          FirstSetBitPos
  0125c	e58d0010	 str         r0, [sp, #0x10]
  01260	e59d3010	 ldr         r3, [sp, #0x10]
  01264	e2833082	 add         r3, r3, #0x82
  01268	e58d3000	 str         r3, [sp]
  0126c	ea000022	 b           |$LN7@FindIRQ_GP|
  01270		 |$LN8@FindIRQ_GP|

; 559  :     }
; 560  :     else if (regVal = (g_pGpioRegs->GEDR2 & GPIO_GEDR2_VLD_MSK)) {

  01270	e59f30c0	 ldr         r3, [pc, #0xC0]
  01274	e5933000	 ldr         r3, [r3]
  01278	e2833050	 add         r3, r3, #0x50
  0127c	e5933000	 ldr         r3, [r3]
  01280	e58d3004	 str         r3, [sp, #4]
  01284	e59d3004	 ldr         r3, [sp, #4]
  01288	e3530000	 cmp         r3, #0
  0128c	0a000006	 beq         |$LN6@FindIRQ_GP|

; 561  :         retIrq = FirstSetBitPos(regVal) + IRQ_GPIOXX_2_GPIO64;

  01290	e59d0004	 ldr         r0, [sp, #4]
  01294	eb000000	 bl          FirstSetBitPos
  01298	e58d0014	 str         r0, [sp, #0x14]
  0129c	e59d3014	 ldr         r3, [sp, #0x14]
  012a0	e28330a2	 add         r3, r3, #0xA2
  012a4	e58d3000	 str         r3, [sp]
  012a8	ea000013	 b           |$LN5@FindIRQ_GP|
  012ac		 |$LN6@FindIRQ_GP|

; 562  :     }
; 563  :     else if (regVal = (g_pGpioRegs->GEDR3 & GPIO_GEDR3_VLD_MSK)) {

  012ac	e59f3084	 ldr         r3, [pc, #0x84]
  012b0	e5933000	 ldr         r3, [r3]
  012b4	e2833f52	 add         r3, r3, #0x52, 30
  012b8	e5932000	 ldr         r2, [r3]
  012bc	e3e034fe	 mvn         r3, #0xFE, 8
  012c0	e0023003	 and         r3, r2, r3
  012c4	e58d3004	 str         r3, [sp, #4]
  012c8	e59d3004	 ldr         r3, [sp, #4]
  012cc	e3530000	 cmp         r3, #0
  012d0	0a000006	 beq         |$LN4@FindIRQ_GP|

; 564  :         retIrq = FirstSetBitPos(regVal) + IRQ_GPIOXX_2_GPIO96;

  012d4	e59d0004	 ldr         r0, [sp, #4]
  012d8	eb000000	 bl          FirstSetBitPos
  012dc	e58d0018	 str         r0, [sp, #0x18]
  012e0	e59d3018	 ldr         r3, [sp, #0x18]
  012e4	e28330c2	 add         r3, r3, #0xC2
  012e8	e58d3000	 str         r3, [sp]

; 565  :     }
; 566  :     else { 

  012ec	ea000002	 b           |$LN3@FindIRQ_GP|
  012f0		 |$LN4@FindIRQ_GP|

; 567  :         return OAL_INTR_IRQ_UNDEFINED;

  012f0	e3e03000	 mvn         r3, #0
  012f4	e58d3008	 str         r3, [sp, #8]
  012f8	ea00000a	 b           |$LN11@FindIRQ_GP|
  012fc		 |$LN3@FindIRQ_GP|
  012fc		 |$LN5@FindIRQ_GP|
  012fc		 |$LN7@FindIRQ_GP|
  012fc		 |$LN9@FindIRQ_GP|

; 568  :     }
; 569  :     
; 570  :     if (retIrq < IRQ_GPIOXX_2_GPIOMIN|| retIrq > IRQ_GPIOXX_2_GPIOMAX)

  012fc	e59d3000	 ldr         r3, [sp]
  01300	e3530064	 cmp         r3, #0x64
  01304	3a000002	 bcc         |$LN1@FindIRQ_GP|
  01308	e59d3000	 ldr         r3, [sp]
  0130c	e35300da	 cmp         r3, #0xDA
  01310	9a000002	 bls         |$LN2@FindIRQ_GP|
  01314		 |$LN1@FindIRQ_GP|

; 571  :         return OAL_INTR_IRQ_UNDEFINED;

  01314	e3e03000	 mvn         r3, #0
  01318	e58d3008	 str         r3, [sp, #8]
  0131c	ea000001	 b           |$LN11@FindIRQ_GP|
  01320		 |$LN2@FindIRQ_GP|

; 572  : 
; 573  :     return retIrq;

  01320	e59d3000	 ldr         r3, [sp]
  01324	e58d3008	 str         r3, [sp, #8]
  01328		 |$LN11@FindIRQ_GP|

; 574  : }

  01328	e59d0008	 ldr         r0, [sp, #8]
  0132c	e28dd01c	 add         sp, sp, #0x1C
  01330	e49de004	 ldr         lr, [sp], #4
  01334	e12fff1e	 bx          lr
  01338		 |$LN16@FindIRQ_GP|
  01338		 |$LN17@FindIRQ_GP|
  01338	00000000	 DCD         |g_pGpioRegs|
  0133c		 |$M43489|

			 ENDP  ; |FindIRQ_GPIOXX_2|

	END
