; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\PMUIOCTL\pmuioctl.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|bPMURunning| [ DATA ]
	EXPORT	|dCCFreqLock| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|pPMURegBuf|, 0x4

	 COMMON	|PVTuneReleaseCCF|, 0x4

	 COMMON	|pPMUCCFBuf|, 0x4

	 COMMON	|pCPUIdBuf|, 0x4

	 COMMON	|PVTuneInterrupt|, 0x4

	 COMMON	|PVTuneReleasePMU|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|bPMURunning| %	0x4
|dCCFreqLock| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1DO@FNGJILFI@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlPMUCCFCall|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|XllpXSC1FreqChange|
	IMPORT	|INTERRUPTS_ON|
	IMPORT	|INTERRUPTS_OFF|
	IMPORT	|memcpy|
	IMPORT	|XllpXSC1ReadCLKCFG|
	IMPORT	|NKSetLastError|
	IMPORT	|OALPAtoVA|
	IMPORT	|__rt_udiv|

  00008			 AREA	 |.bss|, NOINIT
|savedCLKCFG| %	0x4
|savedCCCR| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T43441| DCD	|$LN23@OALIoCtlPM|
	DCD	0x4000fa04
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\pmuioctl\pmuioctl.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FNGJILFI@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "I"
	DCB	0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "%", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlPMUCCFCall| PROC

; 69   : {             

  00000		 |$LN23@OALIoCtlPM|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd030	 sub         sp, sp, #0x30
  00010		 |$M43438|

; 70   :     DWORD len;
; 71   :     BOOL retval=FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 72   :     unsigned long LMult,NMult,CLKCFGReg,CLKCFGMask;
; 73   :     volatile XLLP_CLKMGR_T  *v_pCLKReg=(volatile XLLP_CLKMGR_T*)OALPAtoVA(BULVERDE_BASE_REG_PA_CLKMGR, FALSE);      

  00018	e3a01000	 mov         r1, #0
  0001c	e3a00441	 mov         r0, #0x41, 8
  00020	e3800603	 orr         r0, r0, #3, 12
  00024	eb000000	 bl          OALPAtoVA
  00028	e58d0020	 str         r0, [sp, #0x20]
  0002c	e59d3020	 ldr         r3, [sp, #0x20]
  00030	e58d3018	 str         r3, [sp, #0x18]

; 74   : 
; 75   :     if ((pInpBuffer == NULL) || (inpSize != sizeof(PMUCCFInfo)))

  00034	e59d303c	 ldr         r3, [sp, #0x3C]
  00038	e3530000	 cmp         r3, #0
  0003c	0a000002	 beq         |$LN17@OALIoCtlPM|
  00040	e59d3040	 ldr         r3, [sp, #0x40]
  00044	e3530010	 cmp         r3, #0x10
  00048	0a000004	 beq         |$LN18@OALIoCtlPM|
  0004c		 |$LN17@OALIoCtlPM|

; 76   :     {
; 77   :         NKSetLastError(ERROR_INVALID_PARAMETER);

  0004c	e3a00057	 mov         r0, #0x57
  00050	eb000000	 bl          NKSetLastError

; 78   :         return FALSE;

  00054	e3a03000	 mov         r3, #0
  00058	e58d301c	 str         r3, [sp, #0x1C]
  0005c	ea0000d6	 b           |$LN19@OALIoCtlPM|
  00060		 |$LN18@OALIoCtlPM|

; 79   :     }
; 80   :     
; 81   :     pPMUCCFBuf = (PPMUCCFInfo) pInpBuffer;

  00060	e59d203c	 ldr         r2, [sp, #0x3C]
  00064	e59f3378	 ldr         r3, [pc, #0x378]
  00068	e5832000	 str         r2, [r3]

; 82   :     pPMUCCFBuf->curFreq = 0;

  0006c	e59f3370	 ldr         r3, [pc, #0x370]
  00070	e5933000	 ldr         r3, [r3]
  00074	e2832008	 add         r2, r3, #8
  00078	e3a03000	 mov         r3, #0
  0007c	e5823000	 str         r3, [r2]

; 83   :     
; 84   :     // Check PMU CCF control code
; 85   :     //
; 86   :     switch (pPMUCCFBuf->subcode)

  00080	e59f335c	 ldr         r3, [pc, #0x35C]
  00084	e5933000	 ldr         r3, [r3]
  00088	e5933000	 ldr         r3, [r3]
  0008c	e58d3024	 str         r3, [sp, #0x24]
  00090	e59d3024	 ldr         r3, [sp, #0x24]
  00094	e3530001	 cmp         r3, #1
  00098	0a000006	 beq         |$LN14@OALIoCtlPM|
  0009c	e59d3024	 ldr         r3, [sp, #0x24]
  000a0	e3530002	 cmp         r3, #2
  000a4	0a000058	 beq         |$LN7@OALIoCtlPM|
  000a8	e59d3024	 ldr         r3, [sp, #0x24]
  000ac	e3530003	 cmp         r3, #3
  000b0	0a00009a	 beq         |$LN3@OALIoCtlPM|
  000b4	ea0000b7	 b           |$LN1@OALIoCtlPM|
  000b8		 |$LN14@OALIoCtlPM|

; 87   :     {
; 88   :     
; 89   :         case PMU_CCF_GETCURRENT:
; 90   :       
; 91   :             //
; 92   :             // Extract the L and N fields from the
; 93   :             // Core Clock Status register (CCSR)
; 94   :             //
; 95   :             
; 96   :             LMult = v_pCLKReg->ccsr & 0x0000001F;

  000b8	e59d3018	 ldr         r3, [sp, #0x18]
  000bc	e283300c	 add         r3, r3, #0xC
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e203301f	 and         r3, r3, #0x1F
  000c8	e58d3000	 str         r3, [sp]

; 97   :             NMult = (v_pCLKReg->ccsr & 0x00000380) >> 7;

  000cc	e59d3018	 ldr         r3, [sp, #0x18]
  000d0	e283300c	 add         r3, r3, #0xC
  000d4	e5933000	 ldr         r3, [r3]
  000d8	e2033d0e	 and         r3, r3, #0xE, 26
  000dc	e1a033a3	 mov         r3, r3, lsr #7
  000e0	e58d300c	 str         r3, [sp, #0xC]

; 98   : 
; 99   :             //
; 100  :             // Compute the current frequency
; 101  :             // Deal in KHz for PMU
; 102  :             // NMult = (N * 10)/2
; 103  :             //
; 104  :             pPMUCCFBuf->curFreq = (LMult * CRYSTAL_KHZDIVTEN);

  000e4	e59d1000	 ldr         r1, [sp]
  000e8	e3a03c05	 mov         r3, #5, 24
  000ec	e3833014	 orr         r3, r3, #0x14
  000f0	e0020391	 mul         r2, r1, r3
  000f4	e59f32e8	 ldr         r3, [pc, #0x2E8]
  000f8	e5933000	 ldr         r3, [r3]
  000fc	e2833008	 add         r3, r3, #8
  00100	e5832000	 str         r2, [r3]

; 105  : 
; 106  :             //
; 107  :             // Read CCCKCFG to determine if we're in turbo mode
; 108  :             //
; 109  :             CLKCFGReg = XllpXSC1ReadCLKCFG();

  00104	eb000000	 bl          XllpXSC1ReadCLKCFG
  00108	e58d0028	 str         r0, [sp, #0x28]
  0010c	e59d3028	 ldr         r3, [sp, #0x28]
  00110	e58d3004	 str         r3, [sp, #4]

; 110  : 
; 111  :             if (CLKCFGReg & 0x01)

  00114	e59d3004	 ldr         r3, [sp, #4]
  00118	e3130001	 tst         r3, #1
  0011c	0a00000c	 beq         |$LN13@OALIoCtlPM|

; 112  :             {
; 113  :                 //
; 114  :                 // Turbo mode set
; 115  :                 //
; 116  :                 pPMUCCFBuf->curFreq *= (NMult*5);

  00120	e59f32bc	 ldr         r3, [pc, #0x2BC]
  00124	e5933000	 ldr         r3, [r3]
  00128	e2830008	 add         r0, r3, #8
  0012c	e59d100c	 ldr         r1, [sp, #0xC]
  00130	e3a03005	 mov         r3, #5
  00134	e0020391	 mul         r2, r1, r3
  00138	e5903000	 ldr         r3, [r0]
  0013c	e0020293	 mul         r2, r3, r2
  00140	e59f329c	 ldr         r3, [pc, #0x29C]
  00144	e5933000	 ldr         r3, [r3]
  00148	e2833008	 add         r3, r3, #8
  0014c	e5832000	 str         r2, [r3]

; 117  :             }
; 118  :             else

  00150	ea000009	 b           |$LN12@OALIoCtlPM|
  00154		 |$LN13@OALIoCtlPM|

; 119  :             {
; 120  :                 pPMUCCFBuf->curFreq *= 10;

  00154	e59f3288	 ldr         r3, [pc, #0x288]
  00158	e5933000	 ldr         r3, [r3]
  0015c	e2833008	 add         r3, r3, #8
  00160	e5931000	 ldr         r1, [r3]
  00164	e3a0300a	 mov         r3, #0xA
  00168	e0020391	 mul         r2, r1, r3
  0016c	e59f3270	 ldr         r3, [pc, #0x270]
  00170	e5933000	 ldr         r3, [r3]
  00174	e2833008	 add         r3, r3, #8
  00178	e5832000	 str         r2, [r3]
  0017c		 |$LN12@OALIoCtlPM|

; 121  :             }
; 122  : 
; 123  : 
; 124  :             if (pPMUCCFBuf->curFreq != 0)

  0017c	e59f3260	 ldr         r3, [pc, #0x260]
  00180	e5933000	 ldr         r3, [r3]
  00184	e2833008	 add         r3, r3, #8
  00188	e5933000	 ldr         r3, [r3]
  0018c	e3530000	 cmp         r3, #0
  00190	0a00001a	 beq         |$LN11@OALIoCtlPM|

; 125  :             {
; 126  :                 //
; 127  :                 // Return frequency in output buffer
; 128  :                 //
; 129  :                 len = sizeof(DWORD);

  00194	e3a03004	 mov         r3, #4
  00198	e58d3010	 str         r3, [sp, #0x10]

; 130  :                 if ((outSize == len) && (pOutBuffer != NULL) && (pOutSize != NULL))

  0019c	e59d2048	 ldr         r2, [sp, #0x48]
  001a0	e59d3010	 ldr         r3, [sp, #0x10]
  001a4	e1520003	 cmp         r2, r3
  001a8	1a000011	 bne         |$LN10@OALIoCtlPM|
  001ac	e59d3044	 ldr         r3, [sp, #0x44]
  001b0	e3530000	 cmp         r3, #0
  001b4	0a00000e	 beq         |$LN10@OALIoCtlPM|
  001b8	e59d304c	 ldr         r3, [sp, #0x4C]
  001bc	e3530000	 cmp         r3, #0
  001c0	0a00000b	 beq         |$LN10@OALIoCtlPM|

; 131  :                 {
; 132  :                     memcpy(pOutBuffer,&(pPMUCCFBuf->curFreq),len);

  001c4	e59d2010	 ldr         r2, [sp, #0x10]
  001c8	e59f3214	 ldr         r3, [pc, #0x214]
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e2831008	 add         r1, r3, #8
  001d4	e59d0044	 ldr         r0, [sp, #0x44]
  001d8	eb000000	 bl          memcpy

; 133  :                     *pOutSize = len;

  001dc	e59d2010	 ldr         r2, [sp, #0x10]
  001e0	e59d304c	 ldr         r3, [sp, #0x4C]
  001e4	e5832000	 str         r2, [r3]

; 134  :                     retval = TRUE;

  001e8	e3a03001	 mov         r3, #1
  001ec	e58d3008	 str         r3, [sp, #8]

; 135  :                 }
; 136  :                 else

  001f0	ea000001	 b           |$LN9@OALIoCtlPM|
  001f4		 |$LN10@OALIoCtlPM|

; 137  :                 {
; 138  :                     NKSetLastError(ERROR_INSUFFICIENT_BUFFER);

  001f4	e3a0007a	 mov         r0, #0x7A
  001f8	eb000000	 bl          NKSetLastError
  001fc		 |$LN9@OALIoCtlPM|

; 139  :                 }
; 140  :              }
; 141  :              else

  001fc	ea000001	 b           |$LN8@OALIoCtlPM|
  00200		 |$LN11@OALIoCtlPM|

; 142  :              {
; 143  :                 NKSetLastError(ERROR_NOT_SUPPORTED);

  00200	e3a00032	 mov         r0, #0x32
  00204	eb000000	 bl          NKSetLastError
  00208		 |$LN8@OALIoCtlPM|

; 144  :              }
; 145  : 
; 146  : 
; 147  :         break;

  00208	ea000069	 b           |$LN15@OALIoCtlPM|
  0020c		 |$LN7@OALIoCtlPM|

; 148  : 
; 149  : 
; 150  :         case PMU_CCF_SETLOCK:
; 151  :             //
; 152  :             // Save the current CCCR setting
; 153  :             //
; 154  :             savedCCCR = v_pCLKReg->ccsr;

  0020c	e59d3018	 ldr         r3, [sp, #0x18]
  00210	e283300c	 add         r3, r3, #0xC
  00214	e5932000	 ldr         r2, [r3]
  00218	e59f31c0	 ldr         r3, [pc, #0x1C0]
  0021c	e5832000	 str         r2, [r3]

; 155  : 
; 156  :             //
; 157  :             // Check CPDIS bit.  If we are running in 13MHz mode,
; 158  :             // other frequency changes are invalid.
; 159  :             //
; 160  :             if (savedCCCR & 0x80000000)

  00220	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00224	e5933000	 ldr         r3, [r3]
  00228	e3130102	 tst         r3, #2, 2
  0022c	0a000002	 beq         |$LN6@OALIoCtlPM|

; 161  :             {
; 162  :                 NKSetLastError(ERROR_INVALID_FUNCTION);

  00230	e3a00001	 mov         r0, #1
  00234	eb000000	 bl          NKSetLastError

; 163  :                 break;

  00238	ea00005d	 b           |$LN15@OALIoCtlPM|
  0023c		 |$LN6@OALIoCtlPM|

; 164  :             }
; 165  : 
; 166  :             //
; 167  :             // Read Clock Configuration CP14, r6 to get
; 168  :             // curret bus mode and turbo settings
; 169  :             //
; 170  :             savedCLKCFG = XllpXSC1ReadCLKCFG();

  0023c	eb000000	 bl          XllpXSC1ReadCLKCFG
  00240	e58d002c	 str         r0, [sp, #0x2C]
  00244	e59d202c	 ldr         r2, [sp, #0x2C]
  00248	e59f3188	 ldr         r3, [pc, #0x188]
  0024c	e5832000	 str         r2, [r3]

; 171  : 
; 172  :             //
; 173  :             // For new frequency, set F and preserve B setting
; 174  :             //
; 175  :             CLKCFGMask = 0x2 | (savedCLKCFG & 0x8);

  00250	e59f3180	 ldr         r3, [pc, #0x180]
  00254	e5933000	 ldr         r3, [r3]
  00258	e2033008	 and         r3, r3, #8
  0025c	e3833002	 orr         r3, r3, #2
  00260	e58d3014	 str         r3, [sp, #0x14]

; 176  : 
; 177  :             //
; 178  :             // No Turbo Mode; Set N for a turbo multiplier of 1 (== Run Mode);
; 179  :             //
; 180  :             NMult = 2;

  00264	e3a03002	 mov         r3, #2
  00268	e58d300c	 str         r3, [sp, #0xC]

; 181  : 
; 182  :             //
; 183  :             // Determine the Run mode multiplier (L) for the new Freq
; 184  :             // PMU frequencies are in KHz.
; 185  :             //
; 186  :             LMult = pPMUCCFBuf->newFreq / CRYSTAL_KHZ;

  0026c	e59f3170	 ldr         r3, [pc, #0x170]
  00270	e5933000	 ldr         r3, [r3]
  00274	e2833004	 add         r3, r3, #4
  00278	e5931000	 ldr         r1, [r3]
  0027c	e3a00c32	 mov         r0, #0x32, 24
  00280	e38000c8	 orr         r0, r0, #0xC8
  00284	eb000000	 bl          __rt_udiv
  00288	e58d0000	 str         r0, [sp]

; 187  : 
; 188  :             //
; 189  :             // For frequencies about 15, must use normal Bus mode
; 190  :             //
; 191  :             if (LMult > 15)

  0028c	e59d3000	 ldr         r3, [sp]
  00290	e353000f	 cmp         r3, #0xF
  00294	9a000001	 bls         |$LN5@OALIoCtlPM|

; 192  :             {
; 193  :                 CLKCFGMask = 0x2;     // B= 0 (Normal), F=1

  00298	e3a03002	 mov         r3, #2
  0029c	e58d3014	 str         r3, [sp, #0x14]
  002a0		 |$LN5@OALIoCtlPM|

; 194  :             }
; 195  : 
; 196  :             //
; 197  :             // Save (already translated) callback address
; 198  :             //
; 199  :             PVTuneReleaseCCF = (ReleaseCCFCallback) pPMUCCFBuf->pCallback;

  002a0	e59f313c	 ldr         r3, [pc, #0x13C]
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e283300c	 add         r3, r3, #0xC
  002ac	e5932000	 ldr         r2, [r3]
  002b0	e59f3118	 ldr         r3, [pc, #0x118]
  002b4	e5832000	 str         r2, [r3]

; 200  : 
; 201  :             //
; 202  :             // Disable all interrupts
; 203  :             //
; 204  :             INTERRUPTS_OFF();

  002b8	eb000000	 bl          INTERRUPTS_OFF

; 205  : 
; 206  :             //
; 207  :             // Disallow Mode change if PMU is already locked.
; 208  :             //
; 209  :             if (dCCFreqLock)

  002bc	e59f3110	 ldr         r3, [pc, #0x110]
  002c0	e5933000	 ldr         r3, [r3]
  002c4	e3530000	 cmp         r3, #0
  002c8	0a000003	 beq         |$LN4@OALIoCtlPM|

; 210  :             {
; 211  :                 INTERRUPTS_ON();

  002cc	eb000000	 bl          INTERRUPTS_ON

; 212  :                 NKSetLastError(ERROR_INVALID_FUNCTION);

  002d0	e3a00001	 mov         r0, #1
  002d4	eb000000	 bl          NKSetLastError

; 213  :                 break;

  002d8	ea000035	 b           |$LN15@OALIoCtlPM|
  002dc		 |$LN4@OALIoCtlPM|

; 214  :             }
; 215  : 
; 216  :             //
; 217  :             // Setup Lock
; 218  :             //
; 219  :             dCCFreqLock++;

  002dc	e59f30f0	 ldr         r3, [pc, #0xF0]
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e2832001	 add         r2, r3, #1
  002e8	e59f30e4	 ldr         r3, [pc, #0xE4]
  002ec	e5832000	 str         r2, [r3]

; 220  : 
; 221  :             //
; 222  :             // Set up the new frequency multipliers, N and L
; 223  :             // CPDIS, PPDIS = 0, enable after freq. change.
; 224  :             //
; 225  :             // Check for CPDIS bit is done above and if set
; 226  :             // frequency change is not allowed.
; 227  :             //
; 228  :             v_pCLKReg->cccr =  (NMult << 7) | LMult;

  002f0	e59d300c	 ldr         r3, [sp, #0xC]
  002f4	e1a02383	 mov         r2, r3, lsl #7
  002f8	e59d3000	 ldr         r3, [sp]
  002fc	e1822003	 orr         r2, r2, r3
  00300	e59d3018	 ldr         r3, [sp, #0x18]
  00304	e5832000	 str         r2, [r3]

; 229  : 
; 230  :             //
; 231  :             // Notify frequency sensitive drivers to disable themselves
; 232  :             //    - Display driver
; 233  :             //
; 234  : 
; 235  :             //
; 236  :             // Program the CCLKCFG (CP14, reg6) for a frequency change
; 237  :             // Parameter is mask to use for CLKCFG register
; 238  :             //
; 239  :             XllpXSC1FreqChange(CLKCFGMask);

  00308	e59d0014	 ldr         r0, [sp, #0x14]
  0030c	eb000000	 bl          XllpXSC1FreqChange

; 240  : 
; 241  : 
; 242  :             //
; 243  :             // TBD: Resume frequency sensitive drivers
; 244  :             //
; 245  : 
; 246  : 
; 247  :             INTERRUPTS_ON();

  00310	eb000000	 bl          INTERRUPTS_ON

; 248  : 
; 249  :             retval = TRUE;

  00314	e3a03001	 mov         r3, #1
  00318	e58d3008	 str         r3, [sp, #8]

; 250  : 
; 251  : 
; 252  :             break;

  0031c	ea000024	 b           |$LN15@OALIoCtlPM|
  00320		 |$LN3@OALIoCtlPM|

; 253  : 
; 254  : 
; 255  :         case PMU_CCF_UNLOCK:
; 256  : 
; 257  :             //
; 258  :             // Restore the prior CCCR settings and run mode
; 259  :             // thereby instantiating another frequency change.
; 260  :             //
; 261  : 
; 262  :             //
; 263  :             // Disable all interrupts
; 264  :             //
; 265  :             INTERRUPTS_OFF();

  00320	eb000000	 bl          INTERRUPTS_OFF

; 266  : 
; 267  :             if (dCCFreqLock == 0)

  00324	e59f30a8	 ldr         r3, [pc, #0xA8]
  00328	e5933000	 ldr         r3, [r3]
  0032c	e3530000	 cmp         r3, #0
  00330	1a000003	 bne         |$LN2@OALIoCtlPM|

; 268  :             {
; 269  :                 //
; 270  :                 // Currently no lock taken out
; 271  :                 // so just return
; 272  :                 //
; 273  :                 INTERRUPTS_ON();

  00334	eb000000	 bl          INTERRUPTS_ON

; 274  :                 retval = TRUE;

  00338	e3a03001	 mov         r3, #1
  0033c	e58d3008	 str         r3, [sp, #8]

; 275  :                 break;

  00340	ea00001b	 b           |$LN15@OALIoCtlPM|
  00344		 |$LN2@OALIoCtlPM|

; 276  :             }
; 277  : 
; 278  : 
; 279  :             //
; 280  :             // Restore prior CCCR contents
; 281  :             // (Zero reserved bits)
; 282  :             //
; 283  :             v_pCLKReg->cccr = savedCCCR & ~XLLP_CCCR_RESERVED_BITS;

  00344	e59f3094	 ldr         r3, [pc, #0x94]
  00348	e5932000	 ldr         r2, [r3]
  0034c	e59f3088	 ldr         r3, [pc, #0x88]
  00350	e0022003	 and         r2, r2, r3
  00354	e59d3018	 ldr         r3, [sp, #0x18]
  00358	e5832000	 str         r2, [r3]

; 284  : 
; 285  :             //
; 286  :             // Notify frequency sensitive drivers to disable themselves
; 287  :             //    - Display driver (LCD frequency (K) is derived from L
; 288  :             //          L = 2-7.   K=1
; 289  :             //          L = 8-15,  K=4
; 290  :             //          L = 16-31, K=8
; 291  :             //
; 292  : 
; 293  :             //
; 294  :             // Program the CLKCFG (CP14, reg6) for a frequency change
; 295  :             // Parameter is the saved clock configuration settings to
; 296  :             // restore proper run and bus modes.
; 297  :             //
; 298  :             XllpXSC1FreqChange(savedCLKCFG);

  0035c	e59f3074	 ldr         r3, [pc, #0x74]
  00360	e5930000	 ldr         r0, [r3]
  00364	eb000000	 bl          XllpXSC1FreqChange

; 299  : 
; 300  :             //
; 301  :             // TBS: Resume frequency sensitive drivers
; 302  :             //
; 303  : 
; 304  :             //
; 305  :             // Unlock Freq. Change
; 306  :             //
; 307  :             dCCFreqLock--;

  00368	e59f3064	 ldr         r3, [pc, #0x64]
  0036c	e5933000	 ldr         r3, [r3]
  00370	e2432001	 sub         r2, r3, #1
  00374	e59f3058	 ldr         r3, [pc, #0x58]
  00378	e5832000	 str         r2, [r3]

; 308  : 
; 309  :             INTERRUPTS_ON();

  0037c	eb000000	 bl          INTERRUPTS_ON

; 310  : 
; 311  :             PVTuneReleaseCCF = NULL;

  00380	e59f2048	 ldr         r2, [pc, #0x48]
  00384	e3a03000	 mov         r3, #0
  00388	e5823000	 str         r3, [r2]

; 312  : 
; 313  :             retval = TRUE;

  0038c	e3a03001	 mov         r3, #1
  00390	e58d3008	 str         r3, [sp, #8]

; 314  : 
; 315  :             break;

  00394	ea000006	 b           |$LN15@OALIoCtlPM|
  00398		 |$LN1@OALIoCtlPM|

; 316  :         default:
; 317  :             NKDbgPrintfW(TEXT("Unsupported IOCTL called: %X\r\n"), code);

  00398	e59d1038	 ldr         r1, [sp, #0x38]
  0039c	e59f0028	 ldr         r0, [pc, #0x28]
  003a0	eb000000	 bl          NKDbgPrintfW

; 318  :             NKSetLastError(ERROR_NOT_SUPPORTED);

  003a4	e3a00032	 mov         r0, #0x32
  003a8	eb000000	 bl          NKSetLastError

; 319  :             retval=FALSE;

  003ac	e3a03000	 mov         r3, #0
  003b0	e58d3008	 str         r3, [sp, #8]
  003b4		 |$LN15@OALIoCtlPM|

; 320  :     }   // End switch on pPMUCCFBuf->subcode
; 321  : 
; 322  :     return retval;

  003b4	e59d3008	 ldr         r3, [sp, #8]
  003b8	e58d301c	 str         r3, [sp, #0x1C]
  003bc		 |$LN19@OALIoCtlPM|

; 323  : }

  003bc	e59d001c	 ldr         r0, [sp, #0x1C]
  003c0	e28dd030	 add         sp, sp, #0x30
  003c4	e89d6000	 ldmia       sp, {sp, lr}
  003c8	e12fff1e	 bx          lr
  003cc		 |$LN24@OALIoCtlPM|
  003cc		 |$LN25@OALIoCtlPM|
  003cc	00000000	 DCD         |??_C@_1DO@FNGJILFI@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  003d0		 |$LN26@OALIoCtlPM|
  003d0	00000000	 DCD         |PVTuneReleaseCCF|
  003d4		 |$LN27@OALIoCtlPM|
  003d4	00000000	 DCD         |dCCFreqLock|
  003d8		 |$LN28@OALIoCtlPM|
  003d8	00000000	 DCD         |savedCLKCFG|
  003dc		 |$LN29@OALIoCtlPM|
  003dc	ce00079f	 DCD         0xce00079f
  003e0		 |$LN30@OALIoCtlPM|
  003e0	00000000	 DCD         |savedCCCR|
  003e4		 |$LN31@OALIoCtlPM|
  003e4	00000000	 DCD         |pPMUCCFBuf|
  003e8		 |$M43439|

			 ENDP  ; |OALIoCtlPMUCCFCall|

	EXPORT	|OALIoCtlPMUConfigCall|
	IMPORT	|OALIntrTranslateIrq|
	IMPORT	|WritePMUReg|
	IMPORT	|ReadPMUReg|

  00008			 AREA	 |.pdata|, PDATA
|$T43466| DCD	|$LN36@OALIoCtlPM@2|
	DCD	0x4000e204
; Function compile flags: /Odtp

  003e8			 AREA	 |.text|, CODE, ARM

  003e8		 |OALIoCtlPMUConfigCall| PROC

; 328  : {

  003e8		 |$LN36@OALIoCtlPM@2|
  003e8	e1a0c00d	 mov         r12, sp
  003ec	e92d000f	 stmdb       sp!, {r0 - r3}
  003f0	e92d5000	 stmdb       sp!, {r12, lr}
  003f4	e24dd018	 sub         sp, sp, #0x18
  003f8		 |$M43463|

; 329  :     DWORD len;
; 330  :     BOOL retval = FALSE;

  003f8	e3a03000	 mov         r3, #0
  003fc	e58d3000	 str         r3, [sp]

; 331  :    
; 332  :     if ((pInpBuffer == NULL) || (inpSize != sizeof(PMURegInfo)))

  00400	e59d3024	 ldr         r3, [sp, #0x24]
  00404	e3530000	 cmp         r3, #0
  00408	0a000002	 beq         |$LN19@OALIoCtlPM@2|
  0040c	e59d3028	 ldr         r3, [sp, #0x28]
  00410	e3530018	 cmp         r3, #0x18
  00414	0a000004	 beq         |$LN20@OALIoCtlPM@2|
  00418		 |$LN19@OALIoCtlPM@2|

; 333  :     {
; 334  :         NKSetLastError(ERROR_INVALID_PARAMETER);

  00418	e3a00057	 mov         r0, #0x57
  0041c	eb000000	 bl          NKSetLastError

; 335  :         return FALSE;

  00420	e3a03000	 mov         r3, #0
  00424	e58d3008	 str         r3, [sp, #8]
  00428	ea0000c7	 b           |$LN21@OALIoCtlPM@2|
  0042c		 |$LN20@OALIoCtlPM@2|

; 336  :     }
; 337  :     //
; 338  :     // Check PMU control code
; 339  :     //
; 340  :     switch (*(LPDWORD)pInpBuffer)

  0042c	e59d3024	 ldr         r3, [sp, #0x24]
  00430	e5933000	 ldr         r3, [r3]
  00434	e58d300c	 str         r3, [sp, #0xC]
  00438	e59d300c	 ldr         r3, [sp, #0xC]
  0043c	e2433001	 sub         r3, r3, #1
  00440	e58d300c	 str         r3, [sp, #0xC]
  00444	e59d300c	 ldr         r3, [sp, #0xC]
  00448	e3530008	 cmp         r3, #8
  0044c	8a0000b5	 bhi         |$LN1@OALIoCtlPM@2|
  00450	e59d200c	 ldr         r2, [sp, #0xC]
  00454	e1a03102	 mov         r3, r2, lsl #2
  00458	e083300f	 add         r3, r3, pc
  0045c	e5933004	 ldr         r3, [r3, #4]
  00460	e08ff003	 add         pc, pc, r3
  00464		 |$LN24@OALIoCtlPM@2|
  00464		 |$LN23@OALIoCtlPM@2|
  00464		 |$LN25@OALIoCtlPM@2|
  00464	00000070	 DCD         0x70
  00468		 |$LN26@OALIoCtlPM@2|
  00468	000000b0	 DCD         0xb0
  0046c		 |$LN27@OALIoCtlPM@2|
  0046c	000000bc	 DCD         0xbc
  00470		 |$LN28@OALIoCtlPM@2|
  00470	000000e4	 DCD         0xe4
  00474		 |$LN29@OALIoCtlPM@2|
  00474	000000f0	 DCD         0xf0
  00478		 |$LN30@OALIoCtlPM@2|
  00478	000001b8	 DCD         0x1b8
  0047c		 |$LN31@OALIoCtlPM@2|
  0047c	00000020	 DCD         0x20
  00480		 |$LN32@OALIoCtlPM@2|
  00480	00000054	 DCD         0x54
  00484		 |$LN33@OALIoCtlPM@2|
  00484	0000021c	 DCD         0x21c
  00488		 |$LN16@OALIoCtlPM@2|

; 341  :     {
; 342  :         case PMU_ALLOCATE:
; 343  :             //
; 344  :             // A user has allocated the PMU.
; 345  :             // Register the ReleasePMU callback with the kernel.
; 346  :             // (Address translated in API (Pmudll))
; 347  :             //
; 348  :             pPMURegBuf = (PPMURegInfo)pInpBuffer;

  00488	e59d2024	 ldr         r2, [sp, #0x24]
  0048c	e59f32cc	 ldr         r3, [pc, #0x2CC]
  00490	e5832000	 str         r2, [r3]

; 349  :             PVTuneReleasePMU = (ReleasePMUCallback) pPMURegBuf->pCallback;

  00494	e59f32c4	 ldr         r3, [pc, #0x2C4]
  00498	e5933000	 ldr         r3, [r3]
  0049c	e283300c	 add         r3, r3, #0xC
  004a0	e5932000	 ldr         r2, [r3]
  004a4	e59f32c0	 ldr         r3, [pc, #0x2C0]
  004a8	e5832000	 str         r2, [r3]

; 350  :             return TRUE;

  004ac	e3a03001	 mov         r3, #1
  004b0	e58d3008	 str         r3, [sp, #8]
  004b4	ea0000a4	 b           |$LN21@OALIoCtlPM@2|

; 351  :             break;

  004b8	ea0000a1	 b           |$LN17@OALIoCtlPM@2|
  004bc		 |$LN15@OALIoCtlPM@2|

; 352  : 
; 353  :         case PMU_RELEASE:
; 354  :             //
; 355  :             // A user has released the PMU.
; 356  :             // Unregister the ReleasePMU callback.
; 357  :             //
; 358  :             PVTuneReleasePMU = NULL;

  004bc	e59f22a8	 ldr         r2, [pc, #0x2A8]
  004c0	e3a03000	 mov         r3, #0
  004c4	e5823000	 str         r3, [r2]

; 359  :             return TRUE;

  004c8	e3a03001	 mov         r3, #1
  004cc	e58d3008	 str         r3, [sp, #8]
  004d0	ea00009d	 b           |$LN21@OALIoCtlPM@2|

; 360  :             break;

  004d4	ea00009a	 b           |$LN17@OALIoCtlPM@2|
  004d8		 |$LN14@OALIoCtlPM@2|

; 361  : 
; 362  :         case PMU_ENABLE_IRQ:
; 363  :             pPMURegBuf = (PPMURegInfo)pInpBuffer;

  004d8	e59d2024	 ldr         r2, [sp, #0x24]
  004dc	e59f327c	 ldr         r3, [pc, #0x27C]
  004e0	e5832000	 str         r2, [r3]

; 364  :             PVTuneInterrupt = (PMUInterruptCallback) pPMURegBuf->pCallback;

  004e4	e59f3274	 ldr         r3, [pc, #0x274]
  004e8	e5933000	 ldr         r3, [r3]
  004ec	e283300c	 add         r3, r3, #0xC
  004f0	e5932000	 ldr         r2, [r3]
  004f4	e59f326c	 ldr         r3, [pc, #0x26C]
  004f8	e5832000	 str         r2, [r3]

; 365  :             bPMURunning = TRUE;

  004fc	e59f2260	 ldr         r2, [pc, #0x260]
  00500	e3a03001	 mov         r3, #1
  00504	e5823000	 str         r3, [r2]

; 366  : 
; 367  :             //Enable PMU IRQ
; 368  :             //VTune now uses an installable ISR
; 369  :             /*{
; 370  :                 UINT32 irq = IRQ_PMU;
; 371  :                 OALIntrEnableIrqs( 1, &irq);
; 372  :             }*/
; 373  : 
; 374  :             return TRUE;

  00508	e3a03001	 mov         r3, #1
  0050c	e58d3008	 str         r3, [sp, #8]
  00510	ea00008d	 b           |$LN21@OALIoCtlPM@2|

; 375  :             break;

  00514	ea00008a	 b           |$LN17@OALIoCtlPM@2|
  00518		 |$LN13@OALIoCtlPM@2|

; 376  : 
; 377  :         case PMU_ENABLE_FIQ:
; 378  :             NKSetLastError(ERROR_INVALID_FUNCTION);

  00518	e3a00001	 mov         r0, #1
  0051c	eb000000	 bl          NKSetLastError

; 379  :             break;

  00520	ea000087	 b           |$LN17@OALIoCtlPM@2|
  00524		 |$LN12@OALIoCtlPM@2|

; 380  : 
; 381  :         case PMU_DISABLE_IRQ:
; 382  :             PVTuneInterrupt = NULL;

  00524	e59f223c	 ldr         r2, [pc, #0x23C]
  00528	e3a03000	 mov         r3, #0
  0052c	e5823000	 str         r3, [r2]

; 383  :             //Disable PMU IRQ
; 384  :             //VTune now uses an installable ISR
; 385  :             /*{
; 386  :                 UINT32 irq = IRQ_PMU;
; 387  :                 OALIntrDisableIrqs( 1, &irq);
; 388  :             }*/
; 389  :             bPMURunning = FALSE;

  00530	e59f222c	 ldr         r2, [pc, #0x22C]
  00534	e3a03000	 mov         r3, #0
  00538	e5823000	 str         r3, [r2]

; 390  :             return TRUE;

  0053c	e3a03001	 mov         r3, #1
  00540	e58d3008	 str         r3, [sp, #8]
  00544	ea000080	 b           |$LN21@OALIoCtlPM@2|

; 391  :             break;

  00548	ea00007d	 b           |$LN17@OALIoCtlPM@2|
  0054c		 |$LN11@OALIoCtlPM@2|

; 392  : 
; 393  :         case PMU_DISABLE_FIQ:
; 394  :             NKSetLastError(ERROR_INVALID_FUNCTION);

  0054c	e3a00001	 mov         r0, #1
  00550	eb000000	 bl          NKSetLastError

; 395  :             break;

  00554	ea00007a	 b           |$LN17@OALIoCtlPM@2|
  00558		 |$LN10@OALIoCtlPM@2|

; 396  : 
; 397  :         case PMU_READ_REG:
; 398  :             //
; 399  :             // Read from the specified PMU register
; 400  :             //      2nd DWORD has register number
; 401  :             //      Register value (DWORD) written to output buffer
; 402  :             //
; 403  :             pPMURegBuf = (PPMURegInfo)pInpBuffer;

  00558	e59d2024	 ldr         r2, [sp, #0x24]
  0055c	e59f31fc	 ldr         r3, [pc, #0x1FC]
  00560	e5832000	 str         r2, [r3]

; 404  : 
; 405  :             if (pPMURegBuf->PMUReg > MAXPMUREG)

  00564	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00568	e5933000	 ldr         r3, [r3]
  0056c	e2833004	 add         r3, r3, #4
  00570	e5933000	 ldr         r3, [r3]
  00574	e3530008	 cmp         r3, #8
  00578	9a000002	 bls         |$LN9@OALIoCtlPM@2|

; 406  :             {
; 407  :                 NKSetLastError(ERROR_INVALID_PARAMETER);

  0057c	e3a00057	 mov         r0, #0x57
  00580	eb000000	 bl          NKSetLastError

; 408  :                 break;

  00584	ea00006e	 b           |$LN17@OALIoCtlPM@2|
  00588		 |$LN9@OALIoCtlPM@2|

; 409  :             }
; 410  : 
; 411  :             //
; 412  :             // Read the CP14 PMU register
; 413  :             //
; 414  :             pPMURegBuf->PMUValue = ReadPMUReg(pPMURegBuf->PMUReg);

  00588	e59f31d0	 ldr         r3, [pc, #0x1D0]
  0058c	e5933000	 ldr         r3, [r3]
  00590	e2833004	 add         r3, r3, #4
  00594	e5930000	 ldr         r0, [r3]
  00598	eb000000	 bl          ReadPMUReg
  0059c	e58d0010	 str         r0, [sp, #0x10]
  005a0	e59f31b8	 ldr         r3, [pc, #0x1B8]
  005a4	e5933000	 ldr         r3, [r3]
  005a8	e2832008	 add         r2, r3, #8
  005ac	e59d3010	 ldr         r3, [sp, #0x10]
  005b0	e5823000	 str         r3, [r2]

; 415  : 
; 416  :             //
; 417  :             // Return results
; 418  :             //
; 419  :             len = sizeof(DWORD);

  005b4	e3a03004	 mov         r3, #4
  005b8	e58d3004	 str         r3, [sp, #4]

; 420  :             if ((outSize == len) && (pOutBuffer != NULL) && (pOutSize != NULL))

  005bc	e59d2030	 ldr         r2, [sp, #0x30]
  005c0	e59d3004	 ldr         r3, [sp, #4]
  005c4	e1520003	 cmp         r2, r3
  005c8	1a000011	 bne         |$LN8@OALIoCtlPM@2|
  005cc	e59d302c	 ldr         r3, [sp, #0x2C]
  005d0	e3530000	 cmp         r3, #0
  005d4	0a00000e	 beq         |$LN8@OALIoCtlPM@2|
  005d8	e59d3034	 ldr         r3, [sp, #0x34]
  005dc	e3530000	 cmp         r3, #0
  005e0	0a00000b	 beq         |$LN8@OALIoCtlPM@2|

; 421  :             {
; 422  :                 memcpy(pOutBuffer,&(pPMURegBuf->PMUValue),len);

  005e4	e59d2004	 ldr         r2, [sp, #4]
  005e8	e59f3170	 ldr         r3, [pc, #0x170]
  005ec	e5933000	 ldr         r3, [r3]
  005f0	e2831008	 add         r1, r3, #8
  005f4	e59d002c	 ldr         r0, [sp, #0x2C]
  005f8	eb000000	 bl          memcpy

; 423  :                 *pOutSize = len;

  005fc	e59d2004	 ldr         r2, [sp, #4]
  00600	e59d3034	 ldr         r3, [sp, #0x34]
  00604	e5832000	 str         r2, [r3]

; 424  :                 retval = TRUE;

  00608	e3a03001	 mov         r3, #1
  0060c	e58d3000	 str         r3, [sp]

; 425  :             }
; 426  :             else

  00610	ea000001	 b           |$LN7@OALIoCtlPM@2|
  00614		 |$LN8@OALIoCtlPM@2|

; 427  :             {
; 428  :                 NKSetLastError(ERROR_INSUFFICIENT_BUFFER);

  00614	e3a0007a	 mov         r0, #0x7A
  00618	eb000000	 bl          NKSetLastError
  0061c		 |$LN7@OALIoCtlPM@2|

; 429  :             }
; 430  :             break;

  0061c	ea000048	 b           |$LN17@OALIoCtlPM@2|
  00620		 |$LN6@OALIoCtlPM@2|

; 431  :         case PMU_WRITE_REG:
; 432  :             //
; 433  :             // Write to the specified PMU register
; 434  :             //      2nd DWORD has register number
; 435  :             //      3rd DWORD is value to write to register
; 436  :             //
; 437  :             pPMURegBuf = (PPMURegInfo)pInpBuffer;

  00620	e59d2024	 ldr         r2, [sp, #0x24]
  00624	e59f3134	 ldr         r3, [pc, #0x134]
  00628	e5832000	 str         r2, [r3]

; 438  : 
; 439  :             if (pPMURegBuf->PMUReg > MAXPMUREG)

  0062c	e59f312c	 ldr         r3, [pc, #0x12C]
  00630	e5933000	 ldr         r3, [r3]
  00634	e2833004	 add         r3, r3, #4
  00638	e5933000	 ldr         r3, [r3]
  0063c	e3530008	 cmp         r3, #8
  00640	9a000002	 bls         |$LN5@OALIoCtlPM@2|

; 440  :             {
; 441  :                 NKSetLastError(ERROR_INVALID_PARAMETER);

  00644	e3a00057	 mov         r0, #0x57
  00648	eb000000	 bl          NKSetLastError

; 442  :                 break;

  0064c	ea00003c	 b           |$LN17@OALIoCtlPM@2|
  00650		 |$LN5@OALIoCtlPM@2|

; 443  :             }
; 444  : 
; 445  :             //
; 446  :             // Write to the CP14 PMU register and return
; 447  :             //
; 448  :             WritePMUReg (pPMURegBuf->PMUReg, pPMURegBuf->PMUValue);

  00650	e59f3108	 ldr         r3, [pc, #0x108]
  00654	e5933000	 ldr         r3, [r3]
  00658	e2833008	 add         r3, r3, #8
  0065c	e5931000	 ldr         r1, [r3]
  00660	e59f30f8	 ldr         r3, [pc, #0xF8]
  00664	e5933000	 ldr         r3, [r3]
  00668	e2833004	 add         r3, r3, #4
  0066c	e5930000	 ldr         r0, [r3]
  00670	eb000000	 bl          WritePMUReg

; 449  : 
; 450  :             return TRUE;

  00674	e3a03001	 mov         r3, #1
  00678	e58d3008	 str         r3, [sp, #8]
  0067c	ea000032	 b           |$LN21@OALIoCtlPM@2|

; 451  :             break;

  00680	ea00002f	 b           |$LN17@OALIoCtlPM@2|
  00684		 |$LN4@OALIoCtlPM@2|

; 452  : 
; 453  :         case PMU_OEM_INFO:
; 454  :             //
; 455  :             // Obtain the OEM information used for the
; 456  :             //      SYSINTR_PMU interrupt ID
; 457  :             //      VTune's PMU driver global area
; 458  :             //
; 459  :             pPMURegBuf = (PPMURegInfo)pInpBuffer;

  00684	e59d2024	 ldr         r2, [sp, #0x24]
  00688	e59f30d0	 ldr         r3, [pc, #0xD0]
  0068c	e5832000	 str         r2, [r3]

; 460  :             pPMURegBuf->OEMData.sysintrID = OALIntrTranslateIrq(IRQ_PMU);       //SYSINTR_PMU

  00690	e3a0000c	 mov         r0, #0xC
  00694	eb000000	 bl          OALIntrTranslateIrq
  00698	e58d0014	 str         r0, [sp, #0x14]
  0069c	e59f30bc	 ldr         r3, [pc, #0xBC]
  006a0	e5933000	 ldr         r3, [r3]
  006a4	e2832010	 add         r2, r3, #0x10
  006a8	e59d3014	 ldr         r3, [sp, #0x14]
  006ac	e5823000	 str         r3, [r2]

; 461  : 
; 462  :             // Return results
; 463  :             //
; 464  :             len = (sizeof(OEMInfo));

  006b0	e3a03008	 mov         r3, #8
  006b4	e58d3004	 str         r3, [sp, #4]

; 465  :             if ((outSize >= len) && (pOutBuffer != NULL) && (pOutSize != NULL))

  006b8	e59d2030	 ldr         r2, [sp, #0x30]
  006bc	e59d3004	 ldr         r3, [sp, #4]
  006c0	e1520003	 cmp         r2, r3
  006c4	3a000011	 bcc         |$LN3@OALIoCtlPM@2|
  006c8	e59d302c	 ldr         r3, [sp, #0x2C]
  006cc	e3530000	 cmp         r3, #0
  006d0	0a00000e	 beq         |$LN3@OALIoCtlPM@2|
  006d4	e59d3034	 ldr         r3, [sp, #0x34]
  006d8	e3530000	 cmp         r3, #0
  006dc	0a00000b	 beq         |$LN3@OALIoCtlPM@2|

; 466  :             {
; 467  :                 memcpy(pOutBuffer,&(pPMURegBuf->OEMData),len);

  006e0	e59d2004	 ldr         r2, [sp, #4]
  006e4	e59f3074	 ldr         r3, [pc, #0x74]
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e2831010	 add         r1, r3, #0x10
  006f0	e59d002c	 ldr         r0, [sp, #0x2C]
  006f4	eb000000	 bl          memcpy

; 468  :                 *pOutSize = len;

  006f8	e59d2004	 ldr         r2, [sp, #4]
  006fc	e59d3034	 ldr         r3, [sp, #0x34]
  00700	e5832000	 str         r2, [r3]

; 469  :                 retval = TRUE;

  00704	e3a03001	 mov         r3, #1
  00708	e58d3000	 str         r3, [sp]

; 470  :             }
; 471  :             else

  0070c	ea000001	 b           |$LN2@OALIoCtlPM@2|
  00710		 |$LN3@OALIoCtlPM@2|

; 472  :             {
; 473  :                 NKSetLastError(ERROR_INSUFFICIENT_BUFFER);

  00710	e3a0007a	 mov         r0, #0x7A
  00714	eb000000	 bl          NKSetLastError
  00718		 |$LN2@OALIoCtlPM@2|

; 474  :             }
; 475  : 
; 476  :             return TRUE;

  00718	e3a03001	 mov         r3, #1
  0071c	e58d3008	 str         r3, [sp, #8]
  00720	ea000009	 b           |$LN21@OALIoCtlPM@2|

; 477  :             break;

  00724	ea000006	 b           |$LN17@OALIoCtlPM@2|
  00728		 |$LN1@OALIoCtlPM@2|

; 478  :         default:
; 479  :             NKDbgPrintfW(TEXT("Unsupported IOCTL called: %X\r\n"), code);

  00728	e59d1020	 ldr         r1, [sp, #0x20]
  0072c	e59f0028	 ldr         r0, [pc, #0x28]
  00730	eb000000	 bl          NKDbgPrintfW

; 480  :             NKSetLastError(ERROR_NOT_SUPPORTED);

  00734	e3a00032	 mov         r0, #0x32
  00738	eb000000	 bl          NKSetLastError

; 481  :             retval=FALSE;

  0073c	e3a03000	 mov         r3, #0
  00740	e58d3000	 str         r3, [sp]
  00744		 |$LN17@OALIoCtlPM@2|

; 482  : 
; 483  :     }  // end switch
; 484  :     
; 485  :     
; 486  :     return retval;

  00744	e59d3000	 ldr         r3, [sp]
  00748	e58d3008	 str         r3, [sp, #8]
  0074c		 |$LN21@OALIoCtlPM@2|

; 487  : }

  0074c	e59d0008	 ldr         r0, [sp, #8]
  00750	e28dd018	 add         sp, sp, #0x18
  00754	e89d6000	 ldmia       sp, {sp, lr}
  00758	e12fff1e	 bx          lr
  0075c		 |$LN37@OALIoCtlPM@2|
  0075c		 |$LN38@OALIoCtlPM@2|
  0075c	00000000	 DCD         |??_C@_1DO@FNGJILFI@?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAe?$AAd?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00760		 |$LN39@OALIoCtlPM@2|
  00760	00000000	 DCD         |pPMURegBuf|
  00764		 |$LN40@OALIoCtlPM@2|
  00764	00000000	 DCD         |bPMURunning|
  00768		 |$LN41@OALIoCtlPM@2|
  00768	00000000	 DCD         |PVTuneInterrupt|
  0076c		 |$LN42@OALIoCtlPM@2|
  0076c	00000000	 DCD         |PVTuneReleasePMU|
  00770		 |$M43464|

			 ENDP  ; |OALIoCtlPMUConfigCall|

	EXPORT	|OALIoCtlGetCPUIdCall|
	IMPORT	|XSC1GetCPUId|

  00010			 AREA	 |.pdata|, PDATA
|$T43478| DCD	|$LN9@OALIoCtlGe|
	DCD	0x40003a04
; Function compile flags: /Odtp

  00770			 AREA	 |.text|, CODE, ARM

  00770		 |OALIoCtlGetCPUIdCall| PROC

; 493  : {

  00770		 |$LN9@OALIoCtlGe|
  00770	e1a0c00d	 mov         r12, sp
  00774	e92d000f	 stmdb       sp!, {r0 - r3}
  00778	e92d5000	 stmdb       sp!, {r12, lr}
  0077c	e24dd010	 sub         sp, sp, #0x10
  00780		 |$M43475|

; 494  :     BOOL retval=FALSE;

  00780	e3a03000	 mov         r3, #0
  00784	e58d3000	 str         r3, [sp]

; 495  :     DWORD len;
; 496  :     if ((pInpBuffer == NULL) || (inpSize != sizeof(CPUIdInfo)))

  00788	e59d301c	 ldr         r3, [sp, #0x1C]
  0078c	e3530000	 cmp         r3, #0
  00790	0a000002	 beq         |$LN3@OALIoCtlGe|
  00794	e59d3020	 ldr         r3, [sp, #0x20]
  00798	e3530004	 cmp         r3, #4
  0079c	0a000004	 beq         |$LN4@OALIoCtlGe|
  007a0		 |$LN3@OALIoCtlGe|

; 497  :     {
; 498  :         NKSetLastError(ERROR_INVALID_PARAMETER);

  007a0	e3a00057	 mov         r0, #0x57
  007a4	eb000000	 bl          NKSetLastError

; 499  :         return FALSE;

  007a8	e3a03000	 mov         r3, #0
  007ac	e58d3008	 str         r3, [sp, #8]
  007b0	ea000023	 b           |$LN5@OALIoCtlGe|
  007b4		 |$LN4@OALIoCtlGe|

; 500  :     }
; 501  : 
; 502  :     pCPUIdBuf = (PCPUIdInfo) pInpBuffer;

  007b4	e59d201c	 ldr         r2, [sp, #0x1C]
  007b8	e59f3094	 ldr         r3, [pc, #0x94]
  007bc	e5832000	 str         r2, [r3]

; 503  : 
; 504  :     // Read the CP15 R0 Register to get the ID information
; 505  :     //
; 506  :     pCPUIdBuf->CPUId = XSC1GetCPUId();

  007c0	eb000000	 bl          XSC1GetCPUId
  007c4	e58d000c	 str         r0, [sp, #0xC]
  007c8	e59d200c	 ldr         r2, [sp, #0xC]
  007cc	e59f3080	 ldr         r3, [pc, #0x80]
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e5832000	 str         r2, [r3]

; 507  : 
; 508  :     // Return results
; 509  :     //
; 510  :     len = sizeof(DWORD);

  007d8	e3a03004	 mov         r3, #4
  007dc	e58d3004	 str         r3, [sp, #4]

; 511  :     if ((outSize == len) && (pOutBuffer != NULL) && (pOutSize != NULL))

  007e0	e59d2028	 ldr         r2, [sp, #0x28]
  007e4	e59d3004	 ldr         r3, [sp, #4]
  007e8	e1520003	 cmp         r2, r3
  007ec	1a000010	 bne         |$LN2@OALIoCtlGe|
  007f0	e59d3024	 ldr         r3, [sp, #0x24]
  007f4	e3530000	 cmp         r3, #0
  007f8	0a00000d	 beq         |$LN2@OALIoCtlGe|
  007fc	e59d302c	 ldr         r3, [sp, #0x2C]
  00800	e3530000	 cmp         r3, #0
  00804	0a00000a	 beq         |$LN2@OALIoCtlGe|

; 512  :     {
; 513  :         memcpy(pOutBuffer,&(pCPUIdBuf->CPUId),len);

  00808	e59d2004	 ldr         r2, [sp, #4]
  0080c	e59f3040	 ldr         r3, [pc, #0x40]
  00810	e5931000	 ldr         r1, [r3]
  00814	e59d0024	 ldr         r0, [sp, #0x24]
  00818	eb000000	 bl          memcpy

; 514  :         *pOutSize = len;

  0081c	e59d2004	 ldr         r2, [sp, #4]
  00820	e59d302c	 ldr         r3, [sp, #0x2C]
  00824	e5832000	 str         r2, [r3]

; 515  :         retval = TRUE;

  00828	e3a03001	 mov         r3, #1
  0082c	e58d3000	 str         r3, [sp]

; 516  :     }
; 517  :     else

  00830	ea000001	 b           |$LN1@OALIoCtlGe|
  00834		 |$LN2@OALIoCtlGe|

; 518  :     {
; 519  :         NKSetLastError(ERROR_INSUFFICIENT_BUFFER);

  00834	e3a0007a	 mov         r0, #0x7A
  00838	eb000000	 bl          NKSetLastError
  0083c		 |$LN1@OALIoCtlGe|

; 520  :     }
; 521  :     return retval;

  0083c	e59d3000	 ldr         r3, [sp]
  00840	e58d3008	 str         r3, [sp, #8]
  00844		 |$LN5@OALIoCtlGe|

; 522  : }

  00844	e59d0008	 ldr         r0, [sp, #8]
  00848	e28dd010	 add         sp, sp, #0x10
  0084c	e89d6000	 ldmia       sp, {sp, lr}
  00850	e12fff1e	 bx          lr
  00854		 |$LN10@OALIoCtlGe|
  00854		 |$LN11@OALIoCtlGe|
  00854	00000000	 DCD         |pCPUIdBuf|
  00858		 |$M43476|

			 ENDP  ; |OALIoCtlGetCPUIdCall|

	END
