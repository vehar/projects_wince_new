ARM macroassembler      Page:1 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ; 
   14 00000000          ;****************************************************************************** 
   15 00000000          ; 
   16 00000000          ; Copyright 2002 Intel Corporation. All Rights Reserved. 
   17 00000000          ; 
   18 00000000          ; Portions of the source code contained or described herein and all documents 
   19 00000000          ; related to such source code (Material) are owned by Intel Corporation 
   20 00000000          ; or its suppliers or licensors and is licensed by Microsoft Corporation for distribution.   
   21 00000000          ; Title to the Material remains with Intel Corporation or its suppliers and licensors.  
   22 00000000          ; Use of the Materials is subject to the terms of the Microsoft license agreement which accompanied the Materials.   
   23 00000000          ; No other license under any patent, copyright, trade secret or other intellectual 
   24 00000000          ; property right is granted to or conferred upon you by disclosure or 
   25 00000000          ; delivery of the Materials, either expressly, by implication, inducement, 
   26 00000000          ; estoppel or otherwise  
   27 00000000          ; Some portion of the Materials may be copyrighted by Microsoft Corporation. 
   28 00000000          ; 
   29 00000000          ;  FILENAME:       pmuregs.s 
   30 00000000          ; 
   31 00000000          ;  PURPOSE:        Provides low level PMU primitive functions written specifically for 
   32 00000000          ;                  the Bulverde/Mainstone processor/platform.  Specially design to fit   
   33 00000000          ;                  into Intel VTUNE Architecture 
   34 00000000          ;                   
   35 00000000          ;  
   36 00000000          ;  LAST MODIFIED:  11/21/02 
   37 00000000          ;****************************************************************************** 
   38 00000000          ; 
   39 00000000          ; List of primitive functions in this source code include: 
   40 00000000          ; 
   41 00000000              EXPORT ReadPMUReg           
   42 00000000              EXPORT WritePMUReg 
   43 00000000            
   44                       AREA    |.text|, CODE, READONLY, ALIGN=5        ; Align =5 required for "ALIGN 32" to work 
   45 00000000            
   46 00000000          ; 
   47 00000000          ; ReadPMUReg - Read the PMU Register 
   48 00000000          ; 
   49 00000000          ; Description: 
   50 00000000          ;   This routine reads the designated PMU register via CoProcesser 14. 
   51 00000000          ; 
   52 00000000          ; Input Parameters: 
   53 00000000          ;       r0 - arg1, PMU register number to read.  Number between 0 to 8 
   54 00000000          ;   if r0 contains: 
   55 00000000          ;       0 -> PMNC,  PMU Control Register 
   56 00000000          ;       1 -> CCNT,  PMU Clock Counter 
   57 00000000          ;       2 -> PMN0,  PMU Count Register 0 
   58 00000000          ;       3 -> PMN1,  PMU Count Register 1 
   59 00000000          ;       4 -> PMN2,  PMU Count Register 2 
   60 00000000          ;       5 -> PMN3,  PMU Count Register 3 
   61 00000000          ;       6 -> INTEN, PMU Interupt Enable Register 
   62 00000000          ;       7 -> FLAG,  PMU Overflow Flag Status Register 
   63 00000000          ;       8 -> EVTSEL PMU Event Select Register            
   64 00000000          ; 
   65 00000000          ; Returns: 
   66 00000000          ;   r0 - 32-bit value read from CoProcessor 
   67 00000000          ;     
   68 00000000          ; Registers Modified: 
   69 00000000          ;   CoProcessor Register Modified: None 
   70 00000000          ;   General Purpose Registers Modified: r0   
   71 00000000          ; 
   72 00000000          ; NOTE:   
   73 00000000          ;   Error checking not included 
   74 00000000          ; 
   75 00000000            
   76 00000000          ReadPMUReg  FUNCTION 
   77 00000000            
   78 00000000 e3500008     cmp     r0, #8 
   79 00000004 908ff100     addls   pc, pc, r0, lsl #2 
   80 00000008 ea000019     b       RRet 
   81 0000000c ea000007     b       RdPMNC 
   82 00000010 ea000008     b       RdCCNT 
   83 00000014 ea000009     b       RdPMN0 
   84 00000018 ea00000a     b       RdPMN1 
   85 0000001c ea00000b     b       RdPMN2 
   86 00000020 ea00000c     b       RdPMN3 
   87 00000024 ea00000d     b       RdINTEN 
   88 00000028 ea00000e     b       RdFLAG 
   89 0000002c ea00000f     b       RdEVTSEL 
   90 00000030            
   91 00000030          RdPMNC   
   92 00000030 ee100e11     mrc     p14, 0, r0, c0, c1, 0       ; Read PMNC 
   93 00000034 ea00000e     b       RRet 
   94 00000038          RdCCNT   
   95 00000038 ee110e11     mrc     p14, 0, r0, c1, c1, 0       ; Read CCNT 
   96 0000003c ea00000c     b       RRet 
   97 00000040          RdPMN0   
   98 00000040 ee100e12     mrc     p14, 0, r0, c0, c2, 0       ; Read PMN0 
   99 00000044 ea00000a     b       RRet 
  100 00000048          RdPMN1   
  101 00000048 ee110e12     mrc     p14, 0, r0, c1, c2, 0       ; Read PMN1 
  102 0000004c ea000008     b       RRet 
  103 00000050          RdPMN2   
  104 00000050 ee120e12     mrc     p14, 0, r0, c2, c2, 0       ; Read PMN2 
  105 00000054 ea000006     b       RRet 
  106 00000058          RdPMN3   
  107 00000058 ee130e12     mrc     p14, 0, r0, c3, c2, 0       ; Read PMN3 
  108 0000005c ea000004     b       RRet 
  109 00000060          RdINTEN   
  110 00000060 ee140e11     mrc     p14, 0, r0, c4, c1, 0       ; Read INTEN 
  111 00000064 ea000002     b       RRet 
  112 00000068          RdFLAG   
  113 00000068 ee150e11     mrc     p14, 0, r0, c5, c1, 0       ; Read FLAG 
  114 0000006c ea000000     b       RRet 
  115 00000070          RdEVTSEL   
  116 00000070 ee180e11     mrc     p14, 0, r0, c8, c1, 0       ; Read EVTSEL 
  117 00000074            
  118 00000074          RRet 
  119 00000074              IF :DEF: Interworking 
  120 00000074                IF Interworking :LOR: Thumbing 
  121 00000074 e12fff1e         bx  lr 
  122 00000078                ELSE 
  124 00000078                ENDIF  
  125 00000078              ELSE 
  127 00000078              ENDIF  
  128 00000078                
  129 00000078              ENDFUNC 
  130 00000078            
  131 00000078          ; 
  132 00000078          ; WritePMUReg - Writes to the PMU Register 
  133 00000078          ; 
  134 00000078          ; Description: 
  135 00000078          ;   This routine writes to the designated PMU register via CoProcesser 14. 
  136 00000078          ; 
  137 00000078          ; Input Parameters:    
  138 00000078          ;       r0 - arg1 - PMU register number to write 
  139 00000078          ;       r1 - arg2 - Value to write to PMU register 
  140 00000078          ; 
  141 00000078          ;   if r0 contains: 
  142 00000078          ;       0 -> PMNC,  PMU Control Register 
  143 00000078          ;       1 -> CCNT,  PMU Clock Counter 
  144 00000078          ;       2 -> PMN0,  PMU Count Register 0 
  145 00000078          ;       3 -> PMN1,  PMU Count Register 1 
  146 00000078          ;       4 -> PMN2,  PMU Count Register 2 
  147 00000078          ;       5 -> PMN3,  PMU Count Register 3 
  148 00000078          ;       6 -> INTEN, PMU Interupt Enable Register 
  149 00000078          ;       7 -> FLAG,  PMU Overflow Flag Status Register 
  150 00000078          ;       8 -> EVTSEL PMU Event Select Register 
  151 00000078          ; 
  152 00000078          ; Returns: 
  153 00000078          ;   None 
  154 00000078          ; 
  155 00000078          ; Registers Modified: 
  156 00000078          ;   CoProcessor Register Modified: PMU Register 
  157 00000078          ;   General Purpose Registers Modified: None 
  158 00000078          ; 
  159 00000078          ; NOTE    
  160 00000078          ;   Error checking not included 
  161 00000078          ; 
  162 00000078            
  163 00000078          WritePMUReg  FUNCTION 
  164 00000078            
  165 00000078 e3500008     cmp     r0, #8 
  166 0000007c 908ff100     addls   pc, pc, r0, lsl #2 
  167 00000080 ea000019     b       WRet 
  168 00000084 ea000007     b       WrPMNC 
  169 00000088 ea000008     b       WrCCNT 
  170 0000008c ea000009     b       WrPMN0 
  171 00000090 ea00000a     b       WrPMN1 
  172 00000094 ea00000b     b       WrPMN2 
  173 00000098 ea00000c     b       WrPMN3 
  174 0000009c ea00000d     b       WrINTEN 
  175 000000a0 ea00000e     b       WrFLAG 
  176 000000a4 ea00000f     b       WrEVTSEL 
  177 000000a8            
  178 000000a8          WrPMNC   
  179 000000a8 ee001e11     mcr     p14, 0, r1, c0, c1, 0       ; Write PMNC 
  180 000000ac ea00000e     b       WRet 
  181 000000b0          WrCCNT   
  182 000000b0 ee011e11     mcr     p14, 0, r1, c1, c1, 0       ; Write CCNT 
  183 000000b4 ea00000c     b       WRet 
  184 000000b8          WrPMN0   
  185 000000b8 ee001e12     mcr     p14, 0, r1, c0, c2, 0       ; Write PMN0 
  186 000000bc ea00000a     b       WRet 
  187 000000c0          WrPMN1   
  188 000000c0 ee011e12     mcr     p14, 0, r1, c1, c2, 0       ; Write PMN1 
  189 000000c4 ea000008     b       WRet 
  190 000000c8          WrPMN2   
  191 000000c8 ee021e12     mcr     p14, 0, r1, c2, c2, 0       ; Write PMN2 
  192 000000cc ea000006     b       WRet 
  193 000000d0          WrPMN3   
  194 000000d0 ee031e12     mcr     p14, 0, r1, c3, c2, 0       ; Write PMN3 
  195 000000d4 ea000004     b       WRet 
  196 000000d8          WrINTEN   
  197 000000d8 ee041e11     mcr     p14, 0, r1, c4, c1, 0       ; Write INTEN 
  198 000000dc ea000002     b       WRet 
  199 000000e0          WrFLAG   
  200 000000e0 ee051e11     mcr     p14, 0, r1, c5, c1, 0       ; Write FLAG 
  201 000000e4 ea000000     b       WRet 
  202 000000e8          WrEVTSEL   
  203 000000e8 ee081e11     mcr     p14, 0, r1, c8, c1, 0       ; Write EVTSEL 
  204 000000ec               
  205 000000ec          WRet    
  206 000000ec              IF :DEF: Interworking 
  207 000000ec                IF Interworking :LOR: Thumbing 
  208 000000ec e12fff1e         bx  lr 
  209 000000f0                ELSE 
  211 000000f0                ENDIF  
  212 000000f0              ELSE 
  214 000000f0              ENDIF 
  215 000000f0               
  216 000000f0            
  217 000000f0                
  218 000000f0              ENDFUNC 
  219 000000f0            
  220 000000f0           END  
Assembly terminated, errors: 0, warnings: 0 
