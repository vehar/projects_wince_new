; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\TIMER\VARTICK\timer.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_TotalPartialCounts| % 0x4
|g_LastPartialCounts| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALTimerUpdateRescheduleTime|
	EXPORT	|OALTimerInit|
	IMPORT	|XllpOstConfigureTimer|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALTimerQueryPerformanceCounter|
	IMPORT	|OALTimerQueryPerformanceFrequency|
	IMPORT	|g_pOemGlobal|
	IMPORT	|g_pNKGlobal|
	IMPORT	|g_oalTimer|
	IMPORT	|__rt_udiv|

  00008			 AREA	 |.bss|, NOINIT
|LastTimerMatch| % 0x4
|g_XllpOSTHandle| % 0x8

  00000			 AREA	 |.pdata|, PDATA
|$T44810| DCD	|$LN5@OALTimerIn|
	DCD	0x40007304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\timer\vartick\timer.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerInit| PROC

; 52   : {

  00000		 |$LN5@OALTimerIn|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M44807|

; 53   :     UINT32 TimerMatch;
; 54   :     UINT32 TimerCount;
; 55   : 
; 56   :     // Initialize timer state global variable.
; 57   :     //
; 58   :     g_oalTimer.countsPerMSec          = countsPerMSec;

  00010	e59d2020	 ldr         r2, [sp, #0x20]
  00014	e59f3198	 ldr         r3, [pc, #0x198]
  00018	e5832000	 str         r2, [r3]

; 59   :     g_oalTimer.msecPerSysTick         = msecPerSysTick;

  0001c	e59d201c	 ldr         r2, [sp, #0x1C]
  00020	e59f318c	 ldr         r3, [pc, #0x18C]
  00024	e583200c	 str         r2, [r3, #0xC]

; 60   :     g_oalTimer.actualMSecPerSysTick   = msecPerSysTick;

  00028	e59d201c	 ldr         r2, [sp, #0x1C]
  0002c	e59f3180	 ldr         r3, [pc, #0x180]
  00030	e5832014	 str         r2, [r3, #0x14]

; 61   :     g_oalTimer.countsMargin           = countsMargin;

  00034	e59d2024	 ldr         r2, [sp, #0x24]
  00038	e59f3174	 ldr         r3, [pc, #0x174]
  0003c	e5832004	 str         r2, [r3, #4]

; 62   : 
; 63   :     g_oalTimer.countsPerSysTick       = (countsPerMSec * msecPerSysTick);

  00040	e59d1020	 ldr         r1, [sp, #0x20]
  00044	e59d301c	 ldr         r3, [sp, #0x1C]
  00048	e0020391	 mul         r2, r1, r3
  0004c	e59f3160	 ldr         r3, [pc, #0x160]
  00050	e5832010	 str         r2, [r3, #0x10]

; 64   :     g_oalTimer.actualCountsPerSysTick = (countsPerMSec * msecPerSysTick);

  00054	e59d1020	 ldr         r1, [sp, #0x20]
  00058	e59d301c	 ldr         r3, [sp, #0x1C]
  0005c	e0020391	 mul         r2, r1, r3
  00060	e59f314c	 ldr         r3, [pc, #0x14C]
  00064	e5832018	 str         r2, [r3, #0x18]

; 65   :     g_oalTimer.curCounts              = 0;

  00068	e59f2144	 ldr         r2, [pc, #0x144]
  0006c	e3a03000	 mov         r3, #0
  00070	e5823020	 str         r3, [r2, #0x20]
  00074	e59f2138	 ldr         r2, [pc, #0x138]
  00078	e3a03000	 mov         r3, #0
  0007c	e5823024	 str         r3, [r2, #0x24]

; 66   :     g_oalTimer.maxPeriodMSec          = (UINT32)0x7FFFFFFF/g_oalTimer.countsPerMSec;

  00080	e59f312c	 ldr         r3, [pc, #0x12C]
  00084	e5930000	 ldr         r0, [r3]
  00088	e3e01102	 mvn         r1, #2, 2
  0008c	eb000000	 bl          __rt_udiv
  00090	e59f311c	 ldr         r3, [pc, #0x11C]
  00094	e5830008	 str         r0, [r3, #8]

; 67   : 
; 68   :     // Initialize kernel-exported values.
; 69   :     //
; 70   :     idleconv     = countsPerMSec;

  00098	e59f3128	 ldr         r3, [pc, #0x128]
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e28320d8	 add         r2, r3, #0xD8
  000a4	e59d3020	 ldr         r3, [sp, #0x20]
  000a8	e5823000	 str         r3, [r2]

; 71   :     curridlehigh = 0;

  000ac	e59f3114	 ldr         r3, [pc, #0x114]
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e28320d4	 add         r2, r3, #0xD4
  000b8	e3a03000	 mov         r3, #0
  000bc	e5823000	 str         r3, [r2]

; 72   :     curridlehigh = 0;

  000c0	e59f3100	 ldr         r3, [pc, #0x100]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e28320d4	 add         r2, r3, #0xD4
  000cc	e3a03000	 mov         r3, #0
  000d0	e5823000	 str         r3, [r2]

; 73   : 
; 74   :     // Initialize update reschedule time function pointer
; 75   :     pOEMUpdateRescheduleTime = OALTimerUpdateRescheduleTime;

  000d4	e59f30e0	 ldr         r3, [pc, #0xE0]
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e283204c	 add         r2, r3, #0x4C
  000e0	e59f30dc	 ldr         r3, [pc, #0xDC]
  000e4	e5823000	 str         r3, [r2]

; 76   :     
; 77   :     // Initialize high resolution timer function pointers
; 78   :     pQueryPerformanceFrequency = OALTimerQueryPerformanceFrequency;

  000e8	e59f30cc	 ldr         r3, [pc, #0xCC]
  000ec	e5933000	 ldr         r3, [r3]
  000f0	e2832034	 add         r2, r3, #0x34
  000f4	e59f30c4	 ldr         r3, [pc, #0xC4]
  000f8	e5823000	 str         r3, [r2]

; 79   :     pQueryPerformanceCounter   = OALTimerQueryPerformanceCounter;

  000fc	e59f30b8	 ldr         r3, [pc, #0xB8]
  00100	e5933000	 ldr         r3, [r3]
  00104	e2832030	 add         r2, r3, #0x30
  00108	e59f30a8	 ldr         r3, [pc, #0xA8]
  0010c	e5823000	 str         r3, [r2]

; 80   : 
; 81   :     // Obtain pointers to OST and INTC registers.
; 82   :     //
; 83   :     g_XllpOSTHandle.pOSTRegs  = (XLLP_OST_T *) OALPAtoVA(BULVERDE_BASE_REG_PA_OST, FALSE);

  00110	e3a01000	 mov         r1, #0
  00114	e3a00101	 mov         r0, #1, 2
  00118	e380060a	 orr         r0, r0, #0xA, 12
  0011c	eb000000	 bl          OALPAtoVA
  00120	e58d000c	 str         r0, [sp, #0xC]
  00124	e59d200c	 ldr         r2, [sp, #0xC]
  00128	e59f3080	 ldr         r3, [pc, #0x80]
  0012c	e5832000	 str         r2, [r3]

; 84   :     g_XllpOSTHandle.pINTCRegs = (XLLP_INTC_T *)OALPAtoVA(BULVERDE_BASE_REG_PA_INTC, FALSE);

  00130	e3a01000	 mov         r1, #0
  00134	e3a00101	 mov         r0, #1, 2
  00138	e380060d	 orr         r0, r0, #0xD, 12
  0013c	eb000000	 bl          OALPAtoVA
  00140	e58d0010	 str         r0, [sp, #0x10]
  00144	e59d2010	 ldr         r2, [sp, #0x10]
  00148	e59f3060	 ldr         r3, [pc, #0x60]
  0014c	e5832004	 str         r2, [r3, #4]

; 85   : 
; 86   :     // XLLI initializes oier and rtsr to zeroes, so no further
; 87   :     // initialization needs to be done.  Match timers and
; 88   :     // alarms are disabled.
; 89   :     //
; 90   :     // Current usage of Match registers:
; 91   :     //  M0 - Scheduler
; 92   :     //  M1 - Touch Panel
; 93   :     //  M2 - Profiler
; 94   : 
; 95   :     // Configure and arm the timer interrupt  to interrupt starting at current count + 1 system tick interval.
; 96   :     //
; 97   :     TimerCount = g_XllpOSTHandle.pOSTRegs->oscr0;

  00150	e59f3058	 ldr         r3, [pc, #0x58]
  00154	e5933000	 ldr         r3, [r3]
  00158	e2833010	 add         r3, r3, #0x10
  0015c	e5933000	 ldr         r3, [r3]
  00160	e58d3000	 str         r3, [sp]

; 98   :     TimerMatch = TimerCount + g_oalTimer.countsPerSysTick;

  00164	e59d2000	 ldr         r2, [sp]
  00168	e59f3044	 ldr         r3, [pc, #0x44]
  0016c	e5933010	 ldr         r3, [r3, #0x10]
  00170	e0823003	 add         r3, r2, r3
  00174	e58d3004	 str         r3, [sp, #4]

; 99   :     XllpOstConfigureTimer (&g_XllpOSTHandle, MatchReg0, TimerMatch);

  00178	e59d2004	 ldr         r2, [sp, #4]
  0017c	e3a01000	 mov         r1, #0
  00180	e59f0028	 ldr         r0, [pc, #0x28]
  00184	eb000000	 bl          XllpOstConfigureTimer

; 100  : 
; 101  :     // set LastTimerMatch to TimerCount
; 102  :     //
; 103  :     LastTimerMatch = TimerCount;

  00188	e59d2000	 ldr         r2, [sp]
  0018c	e59f3018	 ldr         r3, [pc, #0x18]
  00190	e5832000	 str         r2, [r3]

; 104  :     
; 105  :     return(TRUE);

  00194	e3a03001	 mov         r3, #1
  00198	e58d3008	 str         r3, [sp, #8]

; 106  : }

  0019c	e59d0008	 ldr         r0, [sp, #8]
  001a0	e28dd014	 add         sp, sp, #0x14
  001a4	e89d6000	 ldmia       sp, {sp, lr}
  001a8	e12fff1e	 bx          lr
  001ac		 |$LN6@OALTimerIn|
  001ac		 |$LN7@OALTimerIn|
  001ac	00000000	 DCD         |LastTimerMatch|
  001b0		 |$LN8@OALTimerIn|
  001b0	00000000	 DCD         |g_XllpOSTHandle|
  001b4		 |$LN9@OALTimerIn|
  001b4	00000000	 DCD         |g_oalTimer|
  001b8		 |$LN10@OALTimerIn|
  001b8	00000000	 DCD         |OALTimerQueryPerformanceCounter|
  001bc		 |$LN11@OALTimerIn|
  001bc	00000000	 DCD         |g_pOemGlobal|
  001c0		 |$LN12@OALTimerIn|
  001c0	00000000	 DCD         |OALTimerQueryPerformanceFrequency|
  001c4		 |$LN13@OALTimerIn|
  001c4	00000000	 DCD         |OALTimerUpdateRescheduleTime|
  001c8		 |$LN14@OALTimerIn|
  001c8	00000000	 DCD         |g_pNKGlobal|
  001cc		 |$M44808|

			 ENDP  ; |OALTimerInit|

	EXPORT	|OALTimerCountsSinceSysTick|

  00008			 AREA	 |.pdata|, PDATA
|$T44825| DCD	|$LN8@OALTimerCo|
	DCD	0x40001701
; Function compile flags: /Odtp

  001cc			 AREA	 |.text|, CODE, ARM

  001cc		 |OALTimerCountsSinceSysTick| PROC

; 118  : {

  001cc		 |$LN8@OALTimerCo|
  001cc	e24dd00c	 sub         sp, sp, #0xC
  001d0		 |$M44822|
  001d0		 |$LN3@OALTimerCo|

; 119  :     UINT32 ltm, count;
; 120  :     
; 121  :     // The previous version of this read oscr0 first, causing LastTimerMatch to 
; 122  :     // end up ahead of oscr0 in rare cases where a timer interrupt would occur 
; 123  :     // between reading oscr0 and LastTimerMatch.
; 124  :     // Reversing the read order would have caused a similar problem where the counts
; 125  :     // returned would have been from two ticks ago, rather than the last tick.
; 126  :     // To address both of these, we read LastTimerMatch twice, and compare to make sure
; 127  :     // that no timer interrupts have occured between the reads. 
; 128  :     do {
; 129  :         ltm = LastTimerMatch;

  001d0	e59f3048	 ldr         r3, [pc, #0x48]
  001d4	e5933000	 ldr         r3, [r3]
  001d8	e58d3004	 str         r3, [sp, #4]

; 130  :         count = g_XllpOSTHandle.pOSTRegs->oscr0;

  001dc	e59f3040	 ldr         r3, [pc, #0x40]
  001e0	e5933000	 ldr         r3, [r3]
  001e4	e2833010	 add         r3, r3, #0x10
  001e8	e5933000	 ldr         r3, [r3]
  001ec	e58d3000	 str         r3, [sp]

; 131  :     } while (ltm != LastTimerMatch);

  001f0	e59f3028	 ldr         r3, [pc, #0x28]
  001f4	e5932000	 ldr         r2, [r3]
  001f8	e59d3004	 ldr         r3, [sp, #4]
  001fc	e1530002	 cmp         r3, r2
  00200	1afffff2	 bne         |$LN3@OALTimerCo|

; 132  : 
; 133  :     return (INT32) (count - ltm);

  00204	e59d2000	 ldr         r2, [sp]
  00208	e59d3004	 ldr         r3, [sp, #4]
  0020c	e0423003	 sub         r3, r2, r3
  00210	e58d3008	 str         r3, [sp, #8]

; 134  : }

  00214	e59d0008	 ldr         r0, [sp, #8]
  00218	e28dd00c	 add         sp, sp, #0xC
  0021c	e12fff1e	 bx          lr
  00220		 |$LN9@OALTimerCo|
  00220		 |$LN10@OALTimerCo|
  00220	00000000	 DCD         |LastTimerMatch|
  00224		 |$LN11@OALTimerCo|
  00224	00000000	 DCD         |g_XllpOSTHandle|
  00228		 |$M44823|

			 ENDP  ; |OALTimerCountsSinceSysTick|

	EXPORT	|RechargeTimer|
	EXPORT	|OALTimerIntrHandler|
	IMPORT	|OEMWriteDebugLED|

  00010			 AREA	 |.pdata|, PDATA
|$T44834| DCD	|$LN8@OALTimerIn@2|
	DCD	0x40006d02
; Function compile flags: /Odtp

  00228			 AREA	 |.text|, CODE, ARM

  00228		 |OALTimerIntrHandler| PROC

; 144  : {

  00228		 |$LN8@OALTimerIn@2|
  00228	e52de004	 str         lr, [sp, #-4]!
  0022c	e24dd008	 sub         sp, sp, #8
  00230		 |$M44831|

; 145  :     UINT32 sysIntr = SYSINTR_NOP;

  00230	e3a03000	 mov         r3, #0
  00234	e58d3000	 str         r3, [sp]

; 146  : 
; 147  :     LastTimerMatch = g_XllpOSTHandle.pOSTRegs->osmr0;

  00238	e59f3198	 ldr         r3, [pc, #0x198]
  0023c	e5933000	 ldr         r3, [r3]
  00240	e5932000	 ldr         r2, [r3]
  00244	e59f3188	 ldr         r3, [pc, #0x188]
  00248	e5832000	 str         r2, [r3]

; 148  : 
; 149  : 
; 150  : #ifdef OAL_ILTIMING
; 151  :     if (g_oalILT.active) {
; 152  :         g_oalILT.isrTime1 = OALTimerCountsSinceSysTick();
; 153  :     }        
; 154  : #endif
; 155  : 
; 156  :     // g_LastPartialCounts represents fractional milliseconds which will
; 157  :     // be added to CurMSec once they add up to one MSec.
; 158  :     g_TotalPartialCounts += g_LastPartialCounts;

  0024c	e59f317c	 ldr         r3, [pc, #0x17C]
  00250	e5932000	 ldr         r2, [r3]
  00254	e59f3170	 ldr         r3, [pc, #0x170]
  00258	e5933000	 ldr         r3, [r3]
  0025c	e0832002	 add         r2, r3, r2
  00260	e59f3164	 ldr         r3, [pc, #0x164]
  00264	e5832000	 str         r2, [r3]

; 159  :     g_LastPartialCounts = 0;

  00268	e59f2160	 ldr         r2, [pc, #0x160]
  0026c	e3a03000	 mov         r3, #0
  00270	e5823000	 str         r3, [r2]

; 160  : 
; 161  :     if ((g_TotalPartialCounts > g_oalTimer.countsPerMSec)) 

  00274	e59f3150	 ldr         r3, [pc, #0x150]
  00278	e5932000	 ldr         r2, [r3]
  0027c	e59f3144	 ldr         r3, [pc, #0x144]
  00280	e5933000	 ldr         r3, [r3]
  00284	e1520003	 cmp         r2, r3
  00288	9a00000f	 bls         |$LN3@OALTimerIn@2|

; 162  :     {
; 163  :         CurMSec++;

  0028c	e59f3130	 ldr         r3, [pc, #0x130]
  00290	e5933000	 ldr         r3, [r3]
  00294	e28330c8	 add         r3, r3, #0xC8
  00298	e5933000	 ldr         r3, [r3]
  0029c	e2832001	 add         r2, r3, #1
  002a0	e59f311c	 ldr         r3, [pc, #0x11C]
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e28330c8	 add         r3, r3, #0xC8
  002ac	e5832000	 str         r2, [r3]

; 164  :         g_TotalPartialCounts -= g_oalTimer.countsPerMSec;

  002b0	e59f3114	 ldr         r3, [pc, #0x114]
  002b4	e5932000	 ldr         r2, [r3]
  002b8	e59f3108	 ldr         r3, [pc, #0x108]
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e0422003	 sub         r2, r2, r3
  002c4	e59f3100	 ldr         r3, [pc, #0x100]
  002c8	e5832000	 str         r2, [r3]
  002cc		 |$LN3@OALTimerIn@2|

; 165  :     }
; 166  :     
; 167  :     // Update the millisecond and high resolution counters
; 168  :     CurMSec += g_oalTimer.actualMSecPerSysTick;

  002cc	e59f30f0	 ldr         r3, [pc, #0xF0]
  002d0	e5933000	 ldr         r3, [r3]
  002d4	e28330c8	 add         r3, r3, #0xC8
  002d8	e5932000	 ldr         r2, [r3]
  002dc	e59f30e4	 ldr         r3, [pc, #0xE4]
  002e0	e5933014	 ldr         r3, [r3, #0x14]
  002e4	e0822003	 add         r2, r2, r3
  002e8	e59f30d4	 ldr         r3, [pc, #0xD4]
  002ec	e5933000	 ldr         r3, [r3]
  002f0	e28330c8	 add         r3, r3, #0xC8
  002f4	e5832000	 str         r2, [r3]

; 169  :     g_oalTimer.curCounts += g_oalTimer.actualCountsPerSysTick;

  002f8	e59f30c8	 ldr         r3, [pc, #0xC8]
  002fc	e5931018	 ldr         r1, [r3, #0x18]
  00300	e59f30c0	 ldr         r3, [pc, #0xC0]
  00304	e5932020	 ldr         r2, [r3, #0x20]
  00308	e59f30b8	 ldr         r3, [pc, #0xB8]
  0030c	e5933024	 ldr         r3, [r3, #0x24]
  00310	e0921001	 adds        r1, r2, r1
  00314	e2a32000	 adc         r2, r3, #0
  00318	e59f30a8	 ldr         r3, [pc, #0xA8]
  0031c	e5831020	 str         r1, [r3, #0x20]
  00320	e59f30a0	 ldr         r3, [pc, #0xA0]
  00324	e5832024	 str         r2, [r3, #0x24]

; 170  : 
; 171  :     //Re-schedule?
; 172  :     if ((INT32)(CurMSec - dwReschedTime) >= 0)  {

  00328	e59f3094	 ldr         r3, [pc, #0x94]
  0032c	e5933000	 ldr         r3, [r3]
  00330	e28320c8	 add         r2, r3, #0xC8
  00334	e59f3088	 ldr         r3, [pc, #0x88]
  00338	e5933000	 ldr         r3, [r3]
  0033c	e28330c4	 add         r3, r3, #0xC4
  00340	e5922000	 ldr         r2, [r2]
  00344	e5933000	 ldr         r3, [r3]
  00348	e0523003	 subs        r3, r2, r3
  0034c	4a00000a	 bmi         |$LN2@OALTimerIn@2|

; 173  :         sysIntr = SYSINTR_RESCHED;

  00350	e3a03001	 mov         r3, #1
  00354	e58d3000	 str         r3, [sp]

; 174  : 
; 175  :         // Recharge timer with the maximum period possible from now. Kernel will call
; 176  :         // OALTimerUpdateRescheduleTime to set it to the correct value it wants.
; 177  :         RechargeTimer(CurMSec + g_oalTimer.maxPeriodMSec);

  00358	e59f3064	 ldr         r3, [pc, #0x64]
  0035c	e5933000	 ldr         r3, [r3]
  00360	e28330c8	 add         r3, r3, #0xC8
  00364	e5932000	 ldr         r2, [r3]
  00368	e59f3058	 ldr         r3, [pc, #0x58]
  0036c	e5933008	 ldr         r3, [r3, #8]
  00370	e0820003	 add         r0, r2, r3
  00374	eb000000	 bl          RechargeTimer

; 178  :     }
; 179  :     else {

  00378	ea000004	 b           |$LN1@OALTimerIn@2|
  0037c		 |$LN2@OALTimerIn@2|

; 180  :         RechargeTimer(dwReschedTime);

  0037c	e59f3040	 ldr         r3, [pc, #0x40]
  00380	e5933000	 ldr         r3, [r3]
  00384	e28330c4	 add         r3, r3, #0xC4
  00388	e5930000	 ldr         r0, [r3]
  0038c	eb000000	 bl          RechargeTimer
  00390		 |$LN1@OALTimerIn@2|

; 181  :     }
; 182  :     
; 183  :     // Update LEDs.
; 184  :     // (Right shift by 10 instead of expensive division by 1000. This will 
; 185  :     // cause the LEDs to update every 1.024 seconds instead every 1 second,
; 186  :     // which is okay as this is just a notification and not a measurement of any sort)
; 187  :     OEMWriteDebugLED(0, CurMSec >> 10);

  00390	e59f302c	 ldr         r3, [pc, #0x2C]
  00394	e5933000	 ldr         r3, [r3]
  00398	e28330c8	 add         r3, r3, #0xC8
  0039c	e5933000	 ldr         r3, [r3]
  003a0	e1a01523	 mov         r1, r3, lsr #10
  003a4	e3a00000	 mov         r0, #0
  003a8	eb000000	 bl          OEMWriteDebugLED

; 188  : 
; 189  : #ifdef OAL_ILTIMING
; 190  :     if (g_oalILT.active) {
; 191  :         g_oalILT.counter--;
; 192  :         if (g_oalILT.counter == 0) {
; 193  :             sysIntr = SYSINTR_TIMING;
; 194  :             g_oalILT.counter = g_oalILT.counterSet;
; 195  :             g_oalILT.isrTime2 = OALTimerCountsSinceSysTick();
; 196  :         }
; 197  :     }
; 198  : #endif
; 199  : 
; 200  :     return (sysIntr);

  003ac	e59d3000	 ldr         r3, [sp]
  003b0	e58d3004	 str         r3, [sp, #4]

; 201  : }

  003b4	e59d0004	 ldr         r0, [sp, #4]
  003b8	e28dd008	 add         sp, sp, #8
  003bc	e49de004	 ldr         lr, [sp], #4
  003c0	e12fff1e	 bx          lr
  003c4		 |$LN9@OALTimerIn@2|
  003c4		 |$LN10@OALTimerIn@2|
  003c4	00000000	 DCD         |g_pNKGlobal|
  003c8		 |$LN11@OALTimerIn@2|
  003c8	00000000	 DCD         |g_oalTimer|
  003cc		 |$LN12@OALTimerIn@2|
  003cc	00000000	 DCD         |g_TotalPartialCounts|
  003d0		 |$LN13@OALTimerIn@2|
  003d0	00000000	 DCD         |g_LastPartialCounts|
  003d4		 |$LN14@OALTimerIn@2|
  003d4	00000000	 DCD         |LastTimerMatch|
  003d8		 |$LN15@OALTimerIn@2|
  003d8	00000000	 DCD         |g_XllpOSTHandle|
  003dc		 |$M44832|

			 ENDP  ; |OALTimerIntrHandler|


  00018			 AREA	 |.pdata|, PDATA
|$T44846| DCD	|$LN8@OALTimerUp|
	DCD	0x40002c04
; Function compile flags: /Odtp

  003dc			 AREA	 |.text|, CODE, ARM

  003dc		 |OALTimerUpdateRescheduleTime| PROC

; 210  : {

  003dc		 |$LN8@OALTimerUp|
  003dc	e1a0c00d	 mov         r12, sp
  003e0	e92d0001	 stmdb       sp!, {r0}
  003e4	e92d5000	 stmdb       sp!, {r12, lr}
  003e8	e24dd00c	 sub         sp, sp, #0xC
  003ec		 |$M44843|

; 211  :     UINT32 baseMSec;
; 212  :     INT32 counts;
; 213  : 
; 214  :     // Get current system timer counter
; 215  :     baseMSec = CurMSec;

  003ec	e59f3094	 ldr         r3, [pc, #0x94]
  003f0	e5933000	 ldr         r3, [r3]
  003f4	e28330c8	 add         r3, r3, #0xC8
  003f8	e5933000	 ldr         r3, [r3]
  003fc	e58d3004	 str         r3, [sp, #4]

; 216  : 
; 217  :     // Return if we are already setup correctly
; 218  :     if (time == (baseMSec + g_oalTimer.actualMSecPerSysTick)) goto cleanUp;

  00400	e59d2004	 ldr         r2, [sp, #4]
  00404	e59f3078	 ldr         r3, [pc, #0x78]
  00408	e5933014	 ldr         r3, [r3, #0x14]
  0040c	e0822003	 add         r2, r2, r3
  00410	e59d3014	 ldr         r3, [sp, #0x14]
  00414	e1530002	 cmp         r3, r2
  00418	1a000000	 bne         |$LN3@OALTimerUp|
  0041c	ea000015	 b           |$cleanUp$44766|
  00420		 |$LN3@OALTimerUp|

; 219  : 
; 220  :     // How far we are from next tick
; 221  :     counts = g_oalTimer.actualCountsPerSysTick - OALTimerCountsSinceSysTick();

  00420	eb000000	 bl          OALTimerCountsSinceSysTick
  00424	e58d0008	 str         r0, [sp, #8]
  00428	e59f3054	 ldr         r3, [pc, #0x54]
  0042c	e5932018	 ldr         r2, [r3, #0x18]
  00430	e59d3008	 ldr         r3, [sp, #8]
  00434	e0423003	 sub         r3, r2, r3
  00438	e58d3000	 str         r3, [sp]

; 222  : 
; 223  :     // If timer interrupts occurs, or we are within 1 ms of the scheduled
; 224  :     // interrupt, just return - timer ISR will take care of it.
; 225  :     if (baseMSec != CurMSec || counts < (INT32)g_oalTimer.countsPerMSec) {

  0043c	e59f3044	 ldr         r3, [pc, #0x44]
  00440	e5933000	 ldr         r3, [r3]
  00444	e28330c8	 add         r3, r3, #0xC8
  00448	e5932000	 ldr         r2, [r3]
  0044c	e59d3004	 ldr         r3, [sp, #4]
  00450	e1530002	 cmp         r3, r2
  00454	1a000004	 bne         |$LN1@OALTimerUp|
  00458	e59d2000	 ldr         r2, [sp]
  0045c	e59f3020	 ldr         r3, [pc, #0x20]
  00460	e5933000	 ldr         r3, [r3]
  00464	e1520003	 cmp         r2, r3
  00468	aa000000	 bge         |$LN2@OALTimerUp|
  0046c		 |$LN1@OALTimerUp|

; 226  :         goto cleanUp;

  0046c	ea000001	 b           |$cleanUp$44766|
  00470		 |$LN2@OALTimerUp|

; 227  :     }        
; 228  : 
; 229  :     //Note: We are going to assume that RechargeTimer will not take more than 1 ms and since we have already
; 230  :     // checked above that there is at least 1 ms before the next timer interrupt, no timer interrupts
; 231  :     // can occur during RechargeTimer execution (thus we satisfy the condition imposed by RechargeTimer)
; 232  :     RechargeTimer(time);

  00470	e59d0014	 ldr         r0, [sp, #0x14]
  00474	eb000000	 bl          RechargeTimer
  00478		 |$cleanUp$44766|

; 233  : 
; 234  : cleanUp:
; 235  :     return;    
; 236  : }

  00478	e28dd00c	 add         sp, sp, #0xC
  0047c	e89d6000	 ldmia       sp, {sp, lr}
  00480	e12fff1e	 bx          lr
  00484		 |$LN9@OALTimerUp|
  00484		 |$LN10@OALTimerUp|
  00484	00000000	 DCD         |g_oalTimer|
  00488		 |$LN11@OALTimerUp|
  00488	00000000	 DCD         |g_pNKGlobal|
  0048c		 |$M44844|

			 ENDP  ; |OALTimerUpdateRescheduleTime|


  00000			 AREA	 |.pdata|, PDATA
|$T44854| DCD	|$LN16@RechargeTi|
	DCD	0x40008604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RechargeTimer| PROC

; 246  : {

  00000		 |$LN16@RechargeTi|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M44851|

; 247  :     UINT32 baseMSec;
; 248  :     UINT32 deltaMSec = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 249  :     UINT32 deltaCounts;
; 250  :     UINT32 TimerCount;
; 251  :     UINT32 newTimerMatch;
; 252  : 
; 253  :     baseMSec = CurMSec;

  00018	e59f31e4	 ldr         r3, [pc, #0x1E4]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e28330c8	 add         r3, r3, #0xC8
  00024	e5933000	 ldr         r3, [r3]
  00028	e58d3008	 str         r3, [sp, #8]

; 254  :     deltaMSec = reschedMSec - baseMSec;

  0002c	e59d201c	 ldr         r2, [sp, #0x1C]
  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e0423003	 sub         r3, r2, r3
  00038	e58d300c	 str         r3, [sp, #0xC]

; 255  : 
; 256  :     // reschedule time already passed?
; 257  :     if ((INT32)deltaMSec < 0) 

  0003c	e59d300c	 ldr         r3, [sp, #0xC]
  00040	e3530000	 cmp         r3, #0
  00044	aa000002	 bge         |$LN11@RechargeTi|

; 258  :     {
; 259  :             deltaMSec = 0;

  00048	e3a03000	 mov         r3, #0
  0004c	e58d300c	 str         r3, [sp, #0xC]
  00050	ea000007	 b           |$LN10@RechargeTi|
  00054		 |$LN11@RechargeTi|

; 260  :     }
; 261  :     else if (deltaMSec > g_oalTimer.maxPeriodMSec) 

  00054	e59d200c	 ldr         r2, [sp, #0xC]
  00058	e59f31a8	 ldr         r3, [pc, #0x1A8]
  0005c	e5933008	 ldr         r3, [r3, #8]
  00060	e1520003	 cmp         r2, r3
  00064	9a000002	 bls         |$LN9@RechargeTi|

; 262  :     { 
; 263  :         // If next tick is longer than maximal tick period,
; 264  :         // then schedule next tick for max allowed MSec by the timer counter
; 265  :         deltaMSec = g_oalTimer.maxPeriodMSec;

  00068	e59f3198	 ldr         r3, [pc, #0x198]
  0006c	e5933008	 ldr         r3, [r3, #8]
  00070	e58d300c	 str         r3, [sp, #0xC]
  00074		 |$LN9@RechargeTi|
  00074		 |$LN10@RechargeTi|

; 266  :     }
; 267  :     
; 268  :     // at this point we know the deltaMSec from CurMSec when next systick has to be scheduled
; 269  : 
; 270  :     // since timers work off of counts calculate deltaCounts
; 271  :     deltaCounts = deltaMSec * g_oalTimer.countsPerMSec;

  00074	e59d200c	 ldr         r2, [sp, #0xC]
  00078	e59f3188	 ldr         r3, [pc, #0x188]
  0007c	e5933000	 ldr         r3, [r3]
  00080	e0030392	 mul         r3, r2, r3
  00084	e58d3000	 str         r3, [sp]

; 272  : 
; 273  :     // Recharge timer to start new period
; 274  : 
; 275  :     // ideal case: increment matchreg (osmr0) by deltaCounts
; 276  :     // but can't do simply this because while this routine is being executed oscr0 is incrementing.
; 277  :     // Hence, for these two conditions need to increment deltaCounts so that new osmr0 will be ahead of oscr0.
; 278  :     // 1) if deltaCounts is too small and incrementing osmr0 by deltaCounts puts it before oscr0
; 279  :     // 2) if incremeting osmr0 by deltaCounts puts it ahead of oscr0 but so close that by the time osmr0 is set oscr0 
; 280  :     //     will be ahead of it
; 281  :     // For both these conditions it is suffice to use this condition if (osmr0 + deltaCounts) < (oscr0 + margin) then increment deltaCounts
; 282  : 
; 283  :     newTimerMatch = LastTimerMatch + deltaCounts;

  00088	e59f3184	 ldr         r3, [pc, #0x184]
  0008c	e5932000	 ldr         r2, [r3]
  00090	e59d3000	 ldr         r3, [sp]
  00094	e0823003	 add         r3, r2, r3
  00098	e58d3004	 str         r3, [sp, #4]

; 284  :  
; 285  :     /*** TIMER SPECIFIC CODE ***/
; 286  :     TimerCount = g_XllpOSTHandle.pOSTRegs->oscr0;

  0009c	e59f3168	 ldr         r3, [pc, #0x168]
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e2833010	 add         r3, r3, #0x10
  000a8	e5933000	 ldr         r3, [r3]
  000ac	e58d3010	 str         r3, [sp, #0x10]

; 287  :     /*** TIMER SPECIFIC CODE END***/
; 288  : 
; 289  :     // setting osmr0 to newTimerMatch puts it before oscr0?
; 290  :     if (((INT32)(TimerCount + g_oalTimer.countsMargin - LastTimerMatch - deltaCounts)  >  0)) {

  000b0	e59d2010	 ldr         r2, [sp, #0x10]
  000b4	e59f314c	 ldr         r3, [pc, #0x14C]
  000b8	e5933004	 ldr         r3, [r3, #4]
  000bc	e0822003	 add         r2, r2, r3
  000c0	e59f314c	 ldr         r3, [pc, #0x14C]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e0422003	 sub         r2, r2, r3
  000cc	e59d3000	 ldr         r3, [sp]
  000d0	e0423003	 sub         r3, r2, r3
  000d4	e3530000	 cmp         r3, #0
  000d8	da000030	 ble         |$LN8@RechargeTi|

; 291  : 
; 292  :         // set the new match value to the earliest we can set it to
; 293  :         newTimerMatch =   TimerCount +  g_oalTimer.countsMargin;

  000dc	e59d2010	 ldr         r2, [sp, #0x10]
  000e0	e59f3120	 ldr         r3, [pc, #0x120]
  000e4	e5933004	 ldr         r3, [r3, #4]
  000e8	e0823003	 add         r3, r2, r3
  000ec	e58d3004	 str         r3, [sp, #4]

; 294  : 
; 295  :         //since timermatch value changed we need to recalculate deltaCounts and deltaMSec.
; 296  :         //These values are used to set actualMSecPerSysTick and actualCountsPerSysTick.
; 297  :         deltaCounts = (INT32)(newTimerMatch - LastTimerMatch);

  000f0	e59f311c	 ldr         r3, [pc, #0x11C]
  000f4	e5932000	 ldr         r2, [r3]
  000f8	e59d3004	 ldr         r3, [sp, #4]
  000fc	e0433002	 sub         r3, r3, r2
  00100	e58d3000	 str         r3, [sp]

; 298  : 
; 299  :         // deltaMSec  denotes the time that CurMSec should be incremented by next time when timer ISR runs.
; 300  :         // This is calculated by dividing deltaCounts by countsPerMsec. The following code avoids this expensive 
; 301  :         // division for the most common cases of delta being between 0 and 1ms and between 1 and 2ms
; 302  :         if (deltaCounts < g_oalTimer.countsPerMSec) { // deltaCounts < 1MSec

  00104	e59d2000	 ldr         r2, [sp]
  00108	e59f30f8	 ldr         r3, [pc, #0xF8]
  0010c	e5933000	 ldr         r3, [r3]
  00110	e1520003	 cmp         r2, r3
  00114	2a000005	 bcs         |$LN7@RechargeTi|

; 303  :             deltaMSec = 0;

  00118	e3a03000	 mov         r3, #0
  0011c	e58d300c	 str         r3, [sp, #0xC]

; 304  :             g_LastPartialCounts = deltaCounts;

  00120	e59d2000	 ldr         r2, [sp]
  00124	e59f30e4	 ldr         r3, [pc, #0xE4]
  00128	e5832000	 str         r2, [r3]
  0012c	ea00001b	 b           |$LN6@RechargeTi|
  00130		 |$LN7@RechargeTi|

; 305  :         }
; 306  :         else if (deltaCounts < (g_oalTimer.countsPerMSec << 1)) {  // deltaCounts < 2MSec

  00130	e59f30d0	 ldr         r3, [pc, #0xD0]
  00134	e5933000	 ldr         r3, [r3]
  00138	e1a02083	 mov         r2, r3, lsl #1
  0013c	e59d3000	 ldr         r3, [sp]
  00140	e1530002	 cmp         r3, r2
  00144	2a000008	 bcs         |$LN5@RechargeTi|

; 307  :             deltaMSec = 1;

  00148	e3a03001	 mov         r3, #1
  0014c	e58d300c	 str         r3, [sp, #0xC]

; 308  :             g_LastPartialCounts = deltaCounts - g_oalTimer.countsPerMSec;

  00150	e59d2000	 ldr         r2, [sp]
  00154	e59f30ac	 ldr         r3, [pc, #0xAC]
  00158	e5933000	 ldr         r3, [r3]
  0015c	e0422003	 sub         r2, r2, r3
  00160	e59f30a8	 ldr         r3, [pc, #0xA8]
  00164	e5832000	 str         r2, [r3]

; 309  :         }
; 310  :         else {

  00168	ea00000c	 b           |$LN4@RechargeTi|
  0016c		 |$LN5@RechargeTi|

; 311  :             deltaMSec = deltaCounts / g_oalTimer.countsPerMSec;            

  0016c	e59d1000	 ldr         r1, [sp]
  00170	e59f3090	 ldr         r3, [pc, #0x90]
  00174	e5930000	 ldr         r0, [r3]
  00178	eb000000	 bl          __rt_udiv
  0017c	e58d000c	 str         r0, [sp, #0xC]

; 312  :             g_LastPartialCounts = deltaCounts - deltaMSec * g_oalTimer.countsPerMSec;

  00180	e59d100c	 ldr         r1, [sp, #0xC]
  00184	e59f307c	 ldr         r3, [pc, #0x7C]
  00188	e5933000	 ldr         r3, [r3]
  0018c	e0020391	 mul         r2, r1, r3
  00190	e59d3000	 ldr         r3, [sp]
  00194	e0432002	 sub         r2, r3, r2
  00198	e59f3070	 ldr         r3, [pc, #0x70]
  0019c	e5832000	 str         r2, [r3]
  001a0		 |$LN4@RechargeTi|
  001a0		 |$LN6@RechargeTi|
  001a0		 |$LN8@RechargeTi|

; 313  :         }
; 314  :     }
; 315  : 
; 316  : 
; 317  :     /*** TIMER SPECIFIC CODE ***/
; 318  :      XllpOstConfigureTimer(&g_XllpOSTHandle, MatchReg0, newTimerMatch);

  001a0	e59d2004	 ldr         r2, [sp, #4]
  001a4	e3a01000	 mov         r1, #0
  001a8	e59f005c	 ldr         r0, [pc, #0x5C]
  001ac	eb000000	 bl          XllpOstConfigureTimer

; 319  :     /*** TIMER SPECIFIC CODE END***/
; 320  : 
; 321  :     g_oalTimer.actualMSecPerSysTick = deltaMSec;

  001b0	e59d200c	 ldr         r2, [sp, #0xC]
  001b4	e59f304c	 ldr         r3, [pc, #0x4C]
  001b8	e5832014	 str         r2, [r3, #0x14]

; 322  :     g_oalTimer.actualCountsPerSysTick = deltaCounts;

  001bc	e59d2000	 ldr         r2, [sp]
  001c0	e59f3040	 ldr         r3, [pc, #0x40]
  001c4	e5832018	 str         r2, [r3, #0x18]

; 323  : 
; 324  : #ifdef DEBUG
; 325  :     //code to check assumption that timer interrupt should not occur during this routine
; 326  :     //
; 327  :     if (baseMSec != CurMSec)

  001c8	e59f3034	 ldr         r3, [pc, #0x34]
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e28330c8	 add         r3, r3, #0xC8
  001d4	e5932000	 ldr         r2, [r3]
  001d8	e59d3008	 ldr         r3, [sp, #8]
  001dc	e1530002	 cmp         r3, r2
  001e0	0a000004	 beq         |$LN3@RechargeTi|

; 328  :         {
; 329  :             OEMWriteDebugLED(0, (0xEbbb | 0x1));     //code for error 

  001e4	e3a01ceb	 mov         r1, #0xEB, 24
  001e8	e38110bb	 orr         r1, r1, #0xBB
  001ec	e3a00000	 mov         r0, #0
  001f0	eb000000	 bl          OEMWriteDebugLED
  001f4		 |$LN2@RechargeTi|

; 330  :             while(1) {};

  001f4	eafffffe	 b           |$LN2@RechargeTi|
  001f8		 |$LN3@RechargeTi|

; 331  :         }
; 332  :     
; 333  : #endif
; 334  : 
; 335  : }

  001f8	e28dd014	 add         sp, sp, #0x14
  001fc	e89d6000	 ldmia       sp, {sp, lr}
  00200	e12fff1e	 bx          lr
  00204		 |$LN17@RechargeTi|
  00204		 |$LN18@RechargeTi|
  00204	00000000	 DCD         |g_pNKGlobal|
  00208		 |$LN19@RechargeTi|
  00208	00000000	 DCD         |g_oalTimer|
  0020c		 |$LN20@RechargeTi|
  0020c	00000000	 DCD         |g_XllpOSTHandle|
  00210		 |$LN21@RechargeTi|
  00210	00000000	 DCD         |g_LastPartialCounts|
  00214		 |$LN22@RechargeTi|
  00214	00000000	 DCD         |LastTimerMatch|
  00218		 |$M44852|

			 ENDP  ; |RechargeTimer|

	END
