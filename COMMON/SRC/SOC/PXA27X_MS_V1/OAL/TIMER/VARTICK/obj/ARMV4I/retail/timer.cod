; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\TIMER\VARTICK\timer.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_TotalPartialCounts| % 0x4
|g_LastPartialCounts| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALTimerCountsSinceSysTick|

  00008			 AREA	 |.bss|, NOINIT
|LastTimerMatch| % 0x4
|g_XllpOSTHandle| % 0x8
|LastTimerMatch| % 0x4
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\timer\vartick\timer.c

  00000			 AREA	 |.pdata|, PDATA
|$T44847| DCD	|$LN9@OALTimerCo|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerCountsSinceSysTick| PROC

; 118  : {

  00000		 |$LN9@OALTimerCo|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M44844|

; 119  :     UINT32 ltm, count;
; 120  :     
; 121  :     // The previous version of this read oscr0 first, causing LastTimerMatch to 
; 122  :     // end up ahead of oscr0 in rare cases where a timer interrupt would occur 
; 123  :     // between reading oscr0 and LastTimerMatch.
; 124  :     // Reversing the read order would have caused a similar problem where the counts
; 125  :     // returned would have been from two ticks ago, rather than the last tick.
; 126  :     // To address both of these, we read LastTimerMatch twice, and compare to make sure
; 127  :     // that no timer interrupts have occured between the reads. 
; 128  :     do {
; 129  :         ltm = LastTimerMatch;
; 130  :         count = g_XllpOSTHandle.pOSTRegs->oscr0;
; 131  :     } while (ltm != LastTimerMatch);
; 132  : 
; 133  :     return (INT32) (count - ltm);

  00004	e59f2020	 ldr         r2, [pc, #0x20]
  00008	e592e004	 ldr         lr, [r2, #4]
  0000c		 |$LL3@OALTimerCo|
  0000c	e5921000	 ldr         r1, [r2]
  00010	e59e0010	 ldr         r0, [lr, #0x10]
  00014	e5923000	 ldr         r3, [r2]
  00018	e1510003	 cmp         r1, r3
  0001c	1afffffa	 bne         |$LL3@OALTimerCo|
  00020	e0400001	 sub         r0, r0, r1

; 134  : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN10@OALTimerCo|
  0002c		 |$LN11@OALTimerCo|
  0002c	00000000	 DCD         |LastTimerMatch|
  00030		 |$M44845|

			 ENDP  ; |OALTimerCountsSinceSysTick|

	EXPORT	|RechargeTimer|
	IMPORT	|XllpOstConfigureTimer|
	IMPORT	|g_oalTimer|
	IMPORT	|g_pNKGlobal|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T44864| DCD	|$LN14@RechargeTi|
	DCD	0x40003601
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |RechargeTimer| PROC

; 246  : {

  00000		 |$LN14@RechargeTi|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M44861|

; 247  :     UINT32 baseMSec;
; 248  :     UINT32 deltaMSec = 0;
; 249  :     UINT32 deltaCounts;
; 250  :     UINT32 TimerCount;
; 251  :     UINT32 newTimerMatch;
; 252  : 
; 253  :     baseMSec = CurMSec;

  00004	e59f30c8	 ldr         r3, [pc, #0xC8]

; 254  :     deltaMSec = reschedMSec - baseMSec;

  00008	e59f80c0	 ldr         r8, [pc, #0xC0]
  0000c	e5933000	 ldr         r3, [r3]
  00010	e59330c8	 ldr         r3, [r3, #0xC8]
  00014	e0504003	 subs        r4, r0, r3

; 255  : 
; 256  :     // reschedule time already passed?
; 257  :     if ((INT32)deltaMSec < 0) 
; 258  :     {
; 259  :             deltaMSec = 0;

  00018	43a04000	 movmi       r4, #0
  0001c	4a000002	 bmi         |$LN6@RechargeTi|

; 260  :     }
; 261  :     else if (deltaMSec > g_oalTimer.maxPeriodMSec) 

  00020	e5983008	 ldr         r3, [r8, #8]
  00024	e1540003	 cmp         r4, r3

; 262  :     { 
; 263  :         // If next tick is longer than maximal tick period,
; 264  :         // then schedule next tick for max allowed MSec by the timer counter
; 265  :         deltaMSec = g_oalTimer.maxPeriodMSec;

  00028	81a04003	 movhi       r4, r3
  0002c		 |$LN6@RechargeTi|

; 266  :     }
; 267  :     
; 268  :     // at this point we know the deltaMSec from CurMSec when next systick has to be scheduled
; 269  : 
; 270  :     // since timers work off of counts calculate deltaCounts
; 271  :     deltaCounts = deltaMSec * g_oalTimer.countsPerMSec;
; 272  : 
; 273  :     // Recharge timer to start new period
; 274  : 
; 275  :     // ideal case: increment matchreg (osmr0) by deltaCounts
; 276  :     // but can't do simply this because while this routine is being executed oscr0 is incrementing.
; 277  :     // Hence, for these two conditions need to increment deltaCounts so that new osmr0 will be ahead of oscr0.
; 278  :     // 1) if deltaCounts is too small and incrementing osmr0 by deltaCounts puts it before oscr0
; 279  :     // 2) if incremeting osmr0 by deltaCounts puts it ahead of oscr0 but so close that by the time osmr0 is set oscr0 
; 280  :     //     will be ahead of it
; 281  :     // For both these conditions it is suffice to use this condition if (osmr0 + deltaCounts) < (oscr0 + margin) then increment deltaCounts
; 282  : 
; 283  :     newTimerMatch = LastTimerMatch + deltaCounts;

  0002c	e59f6098	 ldr         r6, [pc, #0x98]
  00030	e5987000	 ldr         r7, [r8]

; 284  :  
; 285  :     /*** TIMER SPECIFIC CODE ***/
; 286  :     TimerCount = g_XllpOSTHandle.pOSTRegs->oscr0;
; 287  :     /*** TIMER SPECIFIC CODE END***/
; 288  : 
; 289  :     // setting osmr0 to newTimerMatch puts it before oscr0?
; 290  :     if (((INT32)(TimerCount + g_oalTimer.countsMargin - LastTimerMatch - deltaCounts)  >  0)) {

  00034	e5980004	 ldr         r0, [r8, #4]
  00038	e5963004	 ldr         r3, [r6, #4]
  0003c	e5961000	 ldr         r1, [r6]
  00040	e0050497	 mul         r5, r7, r4
  00044	e593e010	 ldr         lr, [r3, #0x10]
  00048	e5962000	 ldr         r2, [r6]
  0004c	e0403005	 sub         r3, r0, r5
  00050	e083300e	 add         r3, r3, lr
  00054	e0433002	 sub         r3, r3, r2
  00058	e3530000	 cmp         r3, #0
  0005c	e0819005	 add         r9, r1, r5
  00060	da000011	 ble         |$LN1@RechargeTi|

; 291  : 
; 292  :         // set the new match value to the earliest we can set it to
; 293  :         newTimerMatch =   TimerCount +  g_oalTimer.countsMargin;
; 294  : 
; 295  :         //since timermatch value changed we need to recalculate deltaCounts and deltaMSec.
; 296  :         //These values are used to set actualMSecPerSysTick and actualCountsPerSysTick.
; 297  :         deltaCounts = (INT32)(newTimerMatch - LastTimerMatch);

  00064	e5963000	 ldr         r3, [r6]
  00068	e080900e	 add         r9, r0, lr
  0006c	e0495003	 sub         r5, r9, r3

; 298  : 
; 299  :         // deltaMSec  denotes the time that CurMSec should be incremented by next time when timer ISR runs.
; 300  :         // This is calculated by dividing deltaCounts by countsPerMsec. The following code avoids this expensive 
; 301  :         // division for the most common cases of delta being between 0 and 1ms and between 1 and 2ms
; 302  :         if (deltaCounts < g_oalTimer.countsPerMSec) { // deltaCounts < 1MSec

  00070	e1550007	 cmp         r5, r7

; 303  :             deltaMSec = 0;
; 304  :             g_LastPartialCounts = deltaCounts;

  00074	35865010	 strcc       r5, [r6, #0x10]
  00078	33a04000	 movcc       r4, #0
  0007c	3a00000a	 bcc         |$LN1@RechargeTi|

; 305  :         }
; 306  :         else if (deltaCounts < (g_oalTimer.countsPerMSec << 1)) {  // deltaCounts < 2MSec

  00080	e1550087	 cmp         r5, r7, lsl #1

; 307  :             deltaMSec = 1;
; 308  :             g_LastPartialCounts = deltaCounts - g_oalTimer.countsPerMSec;

  00084	30453007	 subcc       r3, r5, r7
  00088	33a04001	 movcc       r4, #1
  0008c	3a000005	 bcc         |$LN11@RechargeTi|

; 309  :         }
; 310  :         else {
; 311  :             deltaMSec = deltaCounts / g_oalTimer.countsPerMSec;            

  00090	e1a00007	 mov         r0, r7
  00094	e1a01005	 mov         r1, r5
  00098	eb000000	 bl          __rt_udiv
  0009c	e1a04000	 mov         r4, r0

; 312  :             g_LastPartialCounts = deltaCounts - deltaMSec * g_oalTimer.countsPerMSec;

  000a0	e0030497	 mul         r3, r7, r4
  000a4	e0453003	 sub         r3, r5, r3
  000a8		 |$LN11@RechargeTi|
  000a8	e5863010	 str         r3, [r6, #0x10]
  000ac		 |$LN1@RechargeTi|

; 313  :         }
; 314  :     }
; 315  : 
; 316  : 
; 317  :     /*** TIMER SPECIFIC CODE ***/
; 318  :      XllpOstConfigureTimer(&g_XllpOSTHandle, MatchReg0, newTimerMatch);

  000ac	e1a02009	 mov         r2, r9
  000b0	e3a01000	 mov         r1, #0
  000b4	e2860004	 add         r0, r6, #4
  000b8	eb000000	 bl          XllpOstConfigureTimer

; 319  :     /*** TIMER SPECIFIC CODE END***/
; 320  : 
; 321  :     g_oalTimer.actualMSecPerSysTick = deltaMSec;

  000bc	e5884014	 str         r4, [r8, #0x14]

; 322  :     g_oalTimer.actualCountsPerSysTick = deltaCounts;

  000c0	e5885018	 str         r5, [r8, #0x18]

; 323  : 
; 324  : #ifdef DEBUG
; 325  :     //code to check assumption that timer interrupt should not occur during this routine
; 326  :     //
; 327  :     if (baseMSec != CurMSec)
; 328  :         {
; 329  :             OEMWriteDebugLED(0, (0xEbbb | 0x1));     //code for error 
; 330  :             while(1) {};
; 331  :         }
; 332  :     
; 333  : #endif
; 334  : 
; 335  : }

  000c4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN15@RechargeTi|
  000cc		 |$LN16@RechargeTi|
  000cc	00000000	 DCD         |LastTimerMatch|
  000d0		 |$LN17@RechargeTi|
  000d0	00000000	 DCD         |g_oalTimer|
  000d4		 |$LN18@RechargeTi|
  000d4	00000000	 DCD         |g_pNKGlobal|
  000d8		 |$M44862|

			 ENDP  ; |RechargeTimer|

	EXPORT	|OALTimerIntrHandler|
	IMPORT	|OEMWriteDebugLED|

  00000			 AREA	 |.pdata|, PDATA
|$T44879| DCD	|$LN9@OALTimerIn|
	DCD	0x40003801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerIntrHandler| PROC

; 144  : {

  00000		 |$LN9@OALTimerIn|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44876|

; 145  :     UINT32 sysIntr = SYSINTR_NOP;
; 146  : 
; 147  :     LastTimerMatch = g_XllpOSTHandle.pOSTRegs->osmr0;

  00004	e59f00d0	 ldr         r0, [pc, #0xD0]

; 148  : 
; 149  : 
; 150  : #ifdef OAL_ILTIMING
; 151  :     if (g_oalILT.active) {
; 152  :         g_oalILT.isrTime1 = OALTimerCountsSinceSysTick();
; 153  :     }        
; 154  : #endif
; 155  : 
; 156  :     // g_LastPartialCounts represents fractional milliseconds which will
; 157  :     // be added to CurMSec once they add up to one MSec.
; 158  :     g_TotalPartialCounts += g_LastPartialCounts;
; 159  :     g_LastPartialCounts = 0;
; 160  : 
; 161  :     if ((g_TotalPartialCounts > g_oalTimer.countsPerMSec)) 

  00008	e59fe0c8	 ldr         lr, [pc, #0xC8]
  0000c	e59f40c0	 ldr         r4, [pc, #0xC0]
  00010	e5903004	 ldr         r3, [r0, #4]
  00014	e590100c	 ldr         r1, [r0, #0xC]
  00018	e59e2000	 ldr         r2, [lr]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e3a06000	 mov         r6, #0
  00024	e3a05000	 mov         r5, #0
  00028	e5803000	 str         r3, [r0]
  0002c	e5903010	 ldr         r3, [r0, #0x10]
  00030	e5806010	 str         r6, [r0, #0x10]
  00034	e0811003	 add         r1, r1, r3
  00038	e1510002	 cmp         r1, r2

; 162  :     {
; 163  :         CurMSec++;

  0003c	85942000	 ldrhi       r2, [r4]
  00040	e580100c	 str         r1, [r0, #0xC]
  00044	859230c8	 ldrhi       r3, [r2, #0xC8]
  00048	82833001	 addhi       r3, r3, #1
  0004c	858230c8	 strhi       r3, [r2, #0xC8]

; 164  :         g_TotalPartialCounts -= g_oalTimer.countsPerMSec;

  00050	859e3000	 ldrhi       r3, [lr]

; 165  :     }
; 166  :     
; 167  :     // Update the millisecond and high resolution counters
; 168  :     CurMSec += g_oalTimer.actualMSecPerSysTick;

  00054	e59e2014	 ldr         r2, [lr, #0x14]
  00058	80413003	 subhi       r3, r1, r3
  0005c	e5941000	 ldr         r1, [r4]
  00060	8580300c	 strhi       r3, [r0, #0xC]
  00064	e59130c8	 ldr         r3, [r1, #0xC8]
  00068	e0833002	 add         r3, r3, r2
  0006c	e58130c8	 str         r3, [r1, #0xC8]

; 169  :     g_oalTimer.curCounts += g_oalTimer.actualCountsPerSysTick;

  00070	e59e1020	 ldr         r1, [lr, #0x20]
  00074	e59e3018	 ldr         r3, [lr, #0x18]
  00078	e59e2024	 ldr         r2, [lr, #0x24]

; 170  : 
; 171  :     //Re-schedule?
; 172  :     if ((INT32)(CurMSec - dwReschedTime) >= 0)  {

  0007c	e5940000	 ldr         r0, [r4]
  00080	e0913003	 adds        r3, r1, r3
  00084	e2a22000	 adc         r2, r2, #0
  00088	e58e3020	 str         r3, [lr, #0x20]
  0008c	e58e2024	 str         r2, [lr, #0x24]
  00090	e59020c8	 ldr         r2, [r0, #0xC8]
  00094	e59030c4	 ldr         r3, [r0, #0xC4]
  00098	e0523003	 subs        r3, r2, r3

; 173  :         sysIntr = SYSINTR_RESCHED;
; 174  : 
; 175  :         // Recharge timer with the maximum period possible from now. Kernel will call
; 176  :         // OALTimerUpdateRescheduleTime to set it to the correct value it wants.
; 177  :         RechargeTimer(CurMSec + g_oalTimer.maxPeriodMSec);

  0009c	559020c8	 ldrpl       r2, [r0, #0xC8]
  000a0	559e3008	 ldrpl       r3, [lr, #8]
  000a4	53a05001	 movpl       r5, #1
  000a8	50820003	 addpl       r0, r2, r3

; 178  :     }
; 179  :     else {
; 180  :         RechargeTimer(dwReschedTime);

  000ac	459000c4	 ldrmi       r0, [r0, #0xC4]
  000b0	eb000000	 bl          RechargeTimer

; 181  :     }
; 182  :     
; 183  :     // Update LEDs.
; 184  :     // (Right shift by 10 instead of expensive division by 1000. This will 
; 185  :     // cause the LEDs to update every 1.024 seconds instead every 1 second,
; 186  :     // which is okay as this is just a notification and not a measurement of any sort)
; 187  :     OEMWriteDebugLED(0, CurMSec >> 10);

  000b4	e5943000	 ldr         r3, [r4]
  000b8	e3a00000	 mov         r0, #0
  000bc	e59330c8	 ldr         r3, [r3, #0xC8]
  000c0	e1a01523	 mov         r1, r3, lsr #10
  000c4	eb000000	 bl          OEMWriteDebugLED

; 188  : 
; 189  : #ifdef OAL_ILTIMING
; 190  :     if (g_oalILT.active) {
; 191  :         g_oalILT.counter--;
; 192  :         if (g_oalILT.counter == 0) {
; 193  :             sysIntr = SYSINTR_TIMING;
; 194  :             g_oalILT.counter = g_oalILT.counterSet;
; 195  :             g_oalILT.isrTime2 = OALTimerCountsSinceSysTick();
; 196  :         }
; 197  :     }
; 198  : #endif
; 199  : 
; 200  :     return (sysIntr);
; 201  : }

  000c8	e1a00005	 mov         r0, r5
  000cc	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000d0	e12fff1e	 bx          lr
  000d4		 |$LN10@OALTimerIn|
  000d4		 |$LN11@OALTimerIn|
  000d4	00000000	 DCD         |g_pNKGlobal|
  000d8		 |$LN12@OALTimerIn|
  000d8	00000000	 DCD         |g_oalTimer|
  000dc		 |$LN13@OALTimerIn|
  000dc	00000000	 DCD         |LastTimerMatch|
  000e0		 |$M44877|

			 ENDP  ; |OALTimerIntrHandler|

	EXPORT	|OALTimerUpdateRescheduleTime|

  00000			 AREA	 |.pdata|, PDATA
|$T44892| DCD	|$LN8@OALTimerUp|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerUpdateRescheduleTime| PROC

; 210  : {

  00000		 |$LN8@OALTimerUp|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M44889|
  00004	e1a04000	 mov         r4, r0

; 211  :     UINT32 baseMSec;
; 212  :     INT32 counts;
; 213  : 
; 214  :     // Get current system timer counter
; 215  :     baseMSec = CurMSec;

  00008	e59f304c	 ldr         r3, [pc, #0x4C]

; 216  : 
; 217  :     // Return if we are already setup correctly
; 218  :     if (time == (baseMSec + g_oalTimer.actualMSecPerSysTick)) goto cleanUp;

  0000c	e59f5044	 ldr         r5, [pc, #0x44]
  00010	e5936000	 ldr         r6, [r3]
  00014	e5953014	 ldr         r3, [r5, #0x14]
  00018	e59670c8	 ldr         r7, [r6, #0xC8]
  0001c	e0833007	 add         r3, r3, r7
  00020	e1540003	 cmp         r4, r3
  00024	0a000009	 beq         |$cleanUp$44790|

; 219  : 
; 220  :     // How far we are from next tick
; 221  :     counts = g_oalTimer.actualCountsPerSysTick - OALTimerCountsSinceSysTick();

  00028	eb000000	 bl          OALTimerCountsSinceSysTick

; 222  : 
; 223  :     // If timer interrupts occurs, or we are within 1 ms of the scheduled
; 224  :     // interrupt, just return - timer ISR will take care of it.
; 225  :     if (baseMSec != CurMSec || counts < (INT32)g_oalTimer.countsPerMSec) {

  0002c	e59630c8	 ldr         r3, [r6, #0xC8]
  00030	e1570003	 cmp         r7, r3
  00034	1a000005	 bne         |$cleanUp$44790|
  00038	e5953018	 ldr         r3, [r5, #0x18]
  0003c	e5952000	 ldr         r2, [r5]
  00040	e0433000	 sub         r3, r3, r0
  00044	e1530002	 cmp         r3, r2

; 226  :         goto cleanUp;
; 227  :     }        
; 228  : 
; 229  :     //Note: We are going to assume that RechargeTimer will not take more than 1 ms and since we have already
; 230  :     // checked above that there is at least 1 ms before the next timer interrupt, no timer interrupts
; 231  :     // can occur during RechargeTimer execution (thus we satisfy the condition imposed by RechargeTimer)
; 232  :     RechargeTimer(time);

  00048	a1a00004	 movge       r0, r4
  0004c	ab000000	 blge        RechargeTimer
  00050		 |$cleanUp$44790|

; 233  : 
; 234  : cleanUp:
; 235  :     return;    
; 236  : }

  00050	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN9@OALTimerUp|
  00058		 |$LN10@OALTimerUp|
  00058	00000000	 DCD         |g_oalTimer|
  0005c		 |$LN11@OALTimerUp|
  0005c	00000000	 DCD         |g_pNKGlobal|
  00060		 |$M44890|

			 ENDP  ; |OALTimerUpdateRescheduleTime|

	EXPORT	|OALTimerInit|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALTimerQueryPerformanceCounter|
	IMPORT	|OALTimerQueryPerformanceFrequency|
	IMPORT	|g_pOemGlobal|

  00000			 AREA	 |.pdata|, PDATA
|$T44908| DCD	|$LN5@OALTimerIn@2|
	DCD	0x40003e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerInit| PROC

; 52   : {

  00000		 |$LN5@OALTimerIn@2|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M44905|
  00004	e1a05001	 mov         r5, r1

; 53   :     UINT32 TimerMatch;
; 54   :     UINT32 TimerCount;
; 55   : 
; 56   :     // Initialize timer state global variable.
; 57   :     //
; 58   :     g_oalTimer.countsPerMSec          = countsPerMSec;

  00008	e59f70e4	 ldr         r7, [pc, #0xE4]

; 59   :     g_oalTimer.msecPerSysTick         = msecPerSysTick;
; 60   :     g_oalTimer.actualMSecPerSysTick   = msecPerSysTick;
; 61   :     g_oalTimer.countsMargin           = countsMargin;
; 62   : 
; 63   :     g_oalTimer.countsPerSysTick       = (countsPerMSec * msecPerSysTick);

  0000c	e0030590	 mul         r3, r0, r5

; 64   :     g_oalTimer.actualCountsPerSysTick = (countsPerMSec * msecPerSysTick);
; 65   :     g_oalTimer.curCounts              = 0;

  00010	e3a09000	 mov         r9, #0
  00014	e5875000	 str         r5, [r7]
  00018	e587000c	 str         r0, [r7, #0xC]
  0001c	e5870014	 str         r0, [r7, #0x14]
  00020	e5872004	 str         r2, [r7, #4]
  00024	e5873010	 str         r3, [r7, #0x10]
  00028	e5873018	 str         r3, [r7, #0x18]
  0002c	e5879020	 str         r9, [r7, #0x20]

; 66   :     g_oalTimer.maxPeriodMSec          = (UINT32)0x7FFFFFFF/g_oalTimer.countsPerMSec;

  00030	e3e01102	 mvn         r1, #2, 2
  00034	e1a00005	 mov         r0, r5
  00038	e5879024	 str         r9, [r7, #0x24]
  0003c	eb000000	 bl          __rt_udiv

; 67   : 
; 68   :     // Initialize kernel-exported values.
; 69   :     //
; 70   :     idleconv     = countsPerMSec;

  00040	e59f20a8	 ldr         r2, [pc, #0xA8]
  00044	e5870008	 str         r0, [r7, #8]

; 71   :     curridlehigh = 0;
; 72   :     curridlehigh = 0;
; 73   : 
; 74   :     // Initialize update reschedule time function pointer
; 75   :     pOEMUpdateRescheduleTime = OALTimerUpdateRescheduleTime;

  00048	e59f609c	 ldr         r6, [pc, #0x9C]
  0004c	e5923000	 ldr         r3, [r2]
  00050	e59f4090	 ldr         r4, [pc, #0x90]

; 76   :     
; 77   :     // Initialize high resolution timer function pointers
; 78   :     pQueryPerformanceFrequency = OALTimerQueryPerformanceFrequency;

  00054	e59fe088	 ldr         lr, [pc, #0x88]
  00058	e58350d8	 str         r5, [r3, #0xD8]
  0005c	e5923000	 ldr         r3, [r2]

; 79   :     pQueryPerformanceCounter   = OALTimerQueryPerformanceCounter;

  00060	e59f5078	 ldr         r5, [pc, #0x78]
  00064	e3a08101	 mov         r8, #1, 2
  00068	e58390d4	 str         r9, [r3, #0xD4]
  0006c	e5923000	 ldr         r3, [r2]

; 80   : 
; 81   :     // Obtain pointers to OST and INTC registers.
; 82   :     //
; 83   :     g_XllpOSTHandle.pOSTRegs  = (XLLP_OST_T *) OALPAtoVA(BULVERDE_BASE_REG_PA_OST, FALSE);

  00070	e3a01000	 mov         r1, #0
  00074	e388060a	 orr         r0, r8, #0xA, 12
  00078	e58390d4	 str         r9, [r3, #0xD4]
  0007c	e5963000	 ldr         r3, [r6]
  00080	e583404c	 str         r4, [r3, #0x4C]
  00084	e5963000	 ldr         r3, [r6]
  00088	e583e034	 str         lr, [r3, #0x34]
  0008c	e5963000	 ldr         r3, [r6]
  00090	e5835030	 str         r5, [r3, #0x30]
  00094	eb000000	 bl          OALPAtoVA
  00098	e59f503c	 ldr         r5, [pc, #0x3C]

; 84   :     g_XllpOSTHandle.pINTCRegs = (XLLP_INTC_T *)OALPAtoVA(BULVERDE_BASE_REG_PA_INTC, FALSE);

  0009c	e3a01000	 mov         r1, #0
  000a0	e5850004	 str         r0, [r5, #4]
  000a4	e388060d	 orr         r0, r8, #0xD, 12
  000a8	eb000000	 bl          OALPAtoVA
  000ac	e5850008	 str         r0, [r5, #8]

; 85   : 
; 86   :     // XLLI initializes oier and rtsr to zeroes, so no further
; 87   :     // initialization needs to be done.  Match timers and
; 88   :     // alarms are disabled.
; 89   :     //
; 90   :     // Current usage of Match registers:
; 91   :     //  M0 - Scheduler
; 92   :     //  M1 - Touch Panel
; 93   :     //  M2 - Profiler
; 94   : 
; 95   :     // Configure and arm the timer interrupt  to interrupt starting at current count + 1 system tick interval.
; 96   :     //
; 97   :     TimerCount = g_XllpOSTHandle.pOSTRegs->oscr0;

  000b0	e5953004	 ldr         r3, [r5, #4]

; 98   :     TimerMatch = TimerCount + g_oalTimer.countsPerSysTick;

  000b4	e5972010	 ldr         r2, [r7, #0x10]

; 99   :     XllpOstConfigureTimer (&g_XllpOSTHandle, MatchReg0, TimerMatch);

  000b8	e3a01000	 mov         r1, #0
  000bc	e5934010	 ldr         r4, [r3, #0x10]
  000c0	e2850004	 add         r0, r5, #4
  000c4	e0822004	 add         r2, r2, r4
  000c8	eb000000	 bl          XllpOstConfigureTimer

; 100  : 
; 101  :     // set LastTimerMatch to TimerCount
; 102  :     //
; 103  :     LastTimerMatch = TimerCount;

  000cc	e5854000	 str         r4, [r5]

; 104  :     
; 105  :     return(TRUE);

  000d0	e3a00001	 mov         r0, #1

; 106  : }

  000d4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN6@OALTimerIn@2|
  000dc		 |$LN7@OALTimerIn@2|
  000dc	00000000	 DCD         |LastTimerMatch|
  000e0		 |$LN8@OALTimerIn@2|
  000e0	00000000	 DCD         |OALTimerQueryPerformanceCounter|
  000e4		 |$LN9@OALTimerIn@2|
  000e4	00000000	 DCD         |OALTimerQueryPerformanceFrequency|
  000e8		 |$LN10@OALTimerIn@2|
  000e8	00000000	 DCD         |OALTimerUpdateRescheduleTime|
  000ec		 |$LN11@OALTimerIn@2|
  000ec	00000000	 DCD         |g_pOemGlobal|
  000f0		 |$LN12@OALTimerIn@2|
  000f0	00000000	 DCD         |g_pNKGlobal|
  000f4		 |$LN13@OALTimerIn@2|
  000f4	00000000	 DCD         |g_oalTimer|
  000f8		 |$M44906|

			 ENDP  ; |OALTimerInit|

	END
