; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\TIMER\FIXTICK\timer.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALTimerInit|
	IMPORT	|XllpOstConfigureTimer|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALTimerQueryPerformanceCounter|
	IMPORT	|OALTimerQueryPerformanceFrequency|
	IMPORT	|g_pOemGlobal|
	IMPORT	|g_pNKGlobal|
	IMPORT	|g_oalTimer|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.bss|, NOINIT
|g_XllpOSTHandle| % 0x8

  00000			 AREA	 |.pdata|, PDATA
|$T44768| DCD	|$LN5@OALTimerIn|
	DCD	0x40006704
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\timer\fixtick\timer.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerInit| PROC

; 45   : {

  00000		 |$LN5@OALTimerIn|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M44765|

; 46   :     UINT32 TimerMatch;
; 47   : 
; 48   :     // Initialize timer state global variable.
; 49   :     //
; 50   :     g_oalTimer.countsPerMSec          = countsPerMSec;

  00010	e59d201c	 ldr         r2, [sp, #0x1C]
  00014	e59f316c	 ldr         r3, [pc, #0x16C]
  00018	e5832000	 str         r2, [r3]

; 51   :     g_oalTimer.msecPerSysTick         = msecPerSysTick;

  0001c	e59d2018	 ldr         r2, [sp, #0x18]
  00020	e59f3160	 ldr         r3, [pc, #0x160]
  00024	e583200c	 str         r2, [r3, #0xC]

; 52   :     g_oalTimer.actualMSecPerSysTick   = msecPerSysTick;

  00028	e59d2018	 ldr         r2, [sp, #0x18]
  0002c	e59f3154	 ldr         r3, [pc, #0x154]
  00030	e5832014	 str         r2, [r3, #0x14]

; 53   :     g_oalTimer.countsMargin           = countsMargin;

  00034	e59d2020	 ldr         r2, [sp, #0x20]
  00038	e59f3148	 ldr         r3, [pc, #0x148]
  0003c	e5832004	 str         r2, [r3, #4]

; 54   : 
; 55   :     g_oalTimer.countsPerSysTick       = (countsPerMSec * msecPerSysTick);

  00040	e59d101c	 ldr         r1, [sp, #0x1C]
  00044	e59d3018	 ldr         r3, [sp, #0x18]
  00048	e0020391	 mul         r2, r1, r3
  0004c	e59f3134	 ldr         r3, [pc, #0x134]
  00050	e5832010	 str         r2, [r3, #0x10]

; 56   :     g_oalTimer.actualCountsPerSysTick = (countsPerMSec * msecPerSysTick);

  00054	e59d101c	 ldr         r1, [sp, #0x1C]
  00058	e59d3018	 ldr         r3, [sp, #0x18]
  0005c	e0020391	 mul         r2, r1, r3
  00060	e59f3120	 ldr         r3, [pc, #0x120]
  00064	e5832018	 str         r2, [r3, #0x18]

; 57   :     g_oalTimer.curCounts              = 0;

  00068	e59f2118	 ldr         r2, [pc, #0x118]
  0006c	e3a03000	 mov         r3, #0
  00070	e5823020	 str         r3, [r2, #0x20]
  00074	e59f210c	 ldr         r2, [pc, #0x10C]
  00078	e3a03000	 mov         r3, #0
  0007c	e5823024	 str         r3, [r2, #0x24]

; 58   :     g_oalTimer.maxPeriodMSec          = (UINT32)0x7FFFFFFF/g_oalTimer.countsPerMSec;

  00080	e59f3100	 ldr         r3, [pc, #0x100]
  00084	e5930000	 ldr         r0, [r3]
  00088	e3e01102	 mvn         r1, #2, 2
  0008c	eb000000	 bl          __rt_udiv
  00090	e59f30f0	 ldr         r3, [pc, #0xF0]
  00094	e5830008	 str         r0, [r3, #8]

; 59   : 
; 60   :     // Initialize kernel-exported values.
; 61   :     //
; 62   :     idleconv     = countsPerMSec;

  00098	e59f30f8	 ldr         r3, [pc, #0xF8]
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e28320d8	 add         r2, r3, #0xD8
  000a4	e59d301c	 ldr         r3, [sp, #0x1C]
  000a8	e5823000	 str         r3, [r2]

; 63   :     curridlehigh = 0;

  000ac	e59f30e4	 ldr         r3, [pc, #0xE4]
  000b0	e5933000	 ldr         r3, [r3]
  000b4	e28320d4	 add         r2, r3, #0xD4
  000b8	e3a03000	 mov         r3, #0
  000bc	e5823000	 str         r3, [r2]

; 64   :     curridlehigh = 0;

  000c0	e59f30d0	 ldr         r3, [pc, #0xD0]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e28320d4	 add         r2, r3, #0xD4
  000cc	e3a03000	 mov         r3, #0
  000d0	e5823000	 str         r3, [r2]

; 65   : 
; 66   :     // Initialize high resolution timer function pointers
; 67   :     pQueryPerformanceFrequency = OALTimerQueryPerformanceFrequency;

  000d4	e59f30b4	 ldr         r3, [pc, #0xB4]
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e2832034	 add         r2, r3, #0x34
  000e0	e59f30ac	 ldr         r3, [pc, #0xAC]
  000e4	e5823000	 str         r3, [r2]

; 68   :     pQueryPerformanceCounter   = OALTimerQueryPerformanceCounter;

  000e8	e59f30a0	 ldr         r3, [pc, #0xA0]
  000ec	e5933000	 ldr         r3, [r3]
  000f0	e2832030	 add         r2, r3, #0x30
  000f4	e59f3090	 ldr         r3, [pc, #0x90]
  000f8	e5823000	 str         r3, [r2]

; 69   : 
; 70   :     // Obtain pointers to OST and INTC registers.
; 71   :     //
; 72   :     g_XllpOSTHandle.pOSTRegs  = (XLLP_OST_T *) OALPAtoVA(BULVERDE_BASE_REG_PA_OST, FALSE);

  000fc	e3a01000	 mov         r1, #0
  00100	e3a00101	 mov         r0, #1, 2
  00104	e380060a	 orr         r0, r0, #0xA, 12
  00108	eb000000	 bl          OALPAtoVA
  0010c	e58d0008	 str         r0, [sp, #8]
  00110	e59d2008	 ldr         r2, [sp, #8]
  00114	e59f3068	 ldr         r3, [pc, #0x68]
  00118	e5832000	 str         r2, [r3]

; 73   :     g_XllpOSTHandle.pINTCRegs = (XLLP_INTC_T *)OALPAtoVA(BULVERDE_BASE_REG_PA_INTC, FALSE);

  0011c	e3a01000	 mov         r1, #0
  00120	e3a00101	 mov         r0, #1, 2
  00124	e380060d	 orr         r0, r0, #0xD, 12
  00128	eb000000	 bl          OALPAtoVA
  0012c	e58d000c	 str         r0, [sp, #0xC]
  00130	e59d200c	 ldr         r2, [sp, #0xC]
  00134	e59f3048	 ldr         r3, [pc, #0x48]
  00138	e5832004	 str         r2, [r3, #4]

; 74   : 
; 75   :     // XLLI initializes oier and rtsr to zeroes, so no further
; 76   :     // initialization needs to be done.  Match timers and
; 77   :     // alarms are disabled.
; 78   :     //
; 79   :     // Current usage of Match registers:
; 80   :     //  M0 - Scheduler
; 81   :     //  M1 - Touch Panel
; 82   :     //  M2 - Profiler
; 83   : 
; 84   :     // Configure and arm the timer interrupt  to interrupt every specified system tick interval.
; 85   :     //
; 86   :     TimerMatch = (g_XllpOSTHandle.pOSTRegs->oscr0 + g_oalTimer.countsPerSysTick);

  0013c	e59f3040	 ldr         r3, [pc, #0x40]
  00140	e5933000	 ldr         r3, [r3]
  00144	e2833010	 add         r3, r3, #0x10
  00148	e5932000	 ldr         r2, [r3]
  0014c	e59f3034	 ldr         r3, [pc, #0x34]
  00150	e5933010	 ldr         r3, [r3, #0x10]
  00154	e0823003	 add         r3, r2, r3
  00158	e58d3000	 str         r3, [sp]

; 87   :     XllpOstConfigureTimer (&g_XllpOSTHandle, MatchReg0, TimerMatch);

  0015c	e59d2000	 ldr         r2, [sp]
  00160	e3a01000	 mov         r1, #0
  00164	e59f0018	 ldr         r0, [pc, #0x18]
  00168	eb000000	 bl          XllpOstConfigureTimer

; 88   : 
; 89   :     return(TRUE);

  0016c	e3a03001	 mov         r3, #1
  00170	e58d3004	 str         r3, [sp, #4]

; 90   : }

  00174	e59d0004	 ldr         r0, [sp, #4]
  00178	e28dd010	 add         sp, sp, #0x10
  0017c	e89d6000	 ldmia       sp, {sp, lr}
  00180	e12fff1e	 bx          lr
  00184		 |$LN6@OALTimerIn|
  00184		 |$LN7@OALTimerIn|
  00184	00000000	 DCD         |g_XllpOSTHandle|
  00188		 |$LN8@OALTimerIn|
  00188	00000000	 DCD         |g_oalTimer|
  0018c		 |$LN9@OALTimerIn|
  0018c	00000000	 DCD         |OALTimerQueryPerformanceCounter|
  00190		 |$LN10@OALTimerIn|
  00190	00000000	 DCD         |g_pOemGlobal|
  00194		 |$LN11@OALTimerIn|
  00194	00000000	 DCD         |OALTimerQueryPerformanceFrequency|
  00198		 |$LN12@OALTimerIn|
  00198	00000000	 DCD         |g_pNKGlobal|
  0019c		 |$M44766|

			 ENDP  ; |OALTimerInit|

	EXPORT	|OALTimerCountsSinceSysTick|

  00008			 AREA	 |.pdata|, PDATA
|$T44781| DCD	|$LN8@OALTimerCo|
	DCD	0x40001c01
; Function compile flags: /Odtp

  0019c			 AREA	 |.text|, CODE, ARM

  0019c		 |OALTimerCountsSinceSysTick| PROC

; 102  : {

  0019c		 |$LN8@OALTimerCo|
  0019c	e24dd00c	 sub         sp, sp, #0xC
  001a0		 |$M44778|
  001a0		 |$LN3@OALTimerCo|

; 103  :     UINT32 count, match;
; 104  :     
; 105  :     // Ensure a timer interrupt doesn't happen between the reads
; 106  :     do {
; 107  :         match = g_XllpOSTHandle.pOSTRegs->osmr0;

  001a0	e59f3060	 ldr         r3, [pc, #0x60]
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e5933000	 ldr         r3, [r3]
  001ac	e58d3004	 str         r3, [sp, #4]

; 108  :         count = g_XllpOSTHandle.pOSTRegs->oscr0;

  001b0	e59f3050	 ldr         r3, [pc, #0x50]
  001b4	e5933000	 ldr         r3, [r3]
  001b8	e2833010	 add         r3, r3, #0x10
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e58d3000	 str         r3, [sp]

; 109  :     } while (match != g_XllpOSTHandle.pOSTRegs->osmr0);

  001c4	e59f303c	 ldr         r3, [pc, #0x3C]
  001c8	e5933000	 ldr         r3, [r3]
  001cc	e5932000	 ldr         r2, [r3]
  001d0	e59d3004	 ldr         r3, [sp, #4]
  001d4	e1530002	 cmp         r3, r2
  001d8	1afffff0	 bne         |$LN3@OALTimerCo|

; 110  : 
; 111  :     return (INT32) (count - (match - g_oalTimer.countsPerSysTick));

  001dc	e59d2004	 ldr         r2, [sp, #4]
  001e0	e59f301c	 ldr         r3, [pc, #0x1C]
  001e4	e5933010	 ldr         r3, [r3, #0x10]
  001e8	e0422003	 sub         r2, r2, r3
  001ec	e59d3000	 ldr         r3, [sp]
  001f0	e0433002	 sub         r3, r3, r2
  001f4	e58d3008	 str         r3, [sp, #8]

; 112  : }

  001f8	e59d0008	 ldr         r0, [sp, #8]
  001fc	e28dd00c	 add         sp, sp, #0xC
  00200	e12fff1e	 bx          lr
  00204		 |$LN9@OALTimerCo|
  00204		 |$LN10@OALTimerCo|
  00204	00000000	 DCD         |g_oalTimer|
  00208		 |$LN11@OALTimerCo|
  00208	00000000	 DCD         |g_XllpOSTHandle|
  0020c		 |$M44779|

			 ENDP  ; |OALTimerCountsSinceSysTick|

	EXPORT	|OALTimerIntrHandler|
	IMPORT	|OEMWriteDebugLED|
	IMPORT	|XllpOstConfigureMatchReg|

  00010			 AREA	 |.pdata|, PDATA
|$T44790| DCD	|$LN8@OALTimerIn@2|
	DCD	0x40005602
; Function compile flags: /Odtp

  0020c			 AREA	 |.text|, CODE, ARM

  0020c		 |OALTimerIntrHandler| PROC

; 123  : {

  0020c		 |$LN8@OALTimerIn@2|
  0020c	e52de004	 str         lr, [sp, #-4]!
  00210	e24dd010	 sub         sp, sp, #0x10
  00214		 |$M44787|

; 124  :     UINT32 sysIntr = SYSINTR_NOP;

  00214	e3a03000	 mov         r3, #0
  00218	e58d3000	 str         r3, [sp]

; 125  :     UINT32 TimerCount;
; 126  :     UINT32 TimerMatch;
; 127  : 
; 128  :     // Configure and arm the timer interrupt  to interrupt every specified system tick interval.
; 129  :     //
; 130  :     TimerCount = g_XllpOSTHandle.pOSTRegs->oscr0;

  0021c	e59f313c	 ldr         r3, [pc, #0x13C]
  00220	e5933000	 ldr         r3, [r3]
  00224	e2833010	 add         r3, r3, #0x10
  00228	e5933000	 ldr         r3, [r3]
  0022c	e58d3004	 str         r3, [sp, #4]

; 131  :     TimerMatch = g_XllpOSTHandle.pOSTRegs->osmr0;

  00230	e59f3128	 ldr         r3, [pc, #0x128]
  00234	e5933000	 ldr         r3, [r3]
  00238	e5933000	 ldr         r3, [r3]
  0023c	e58d3008	 str         r3, [sp, #8]

; 132  : 
; 133  : #ifdef OAL_ILTIMING
; 134  :     if (g_oalILT.active) {
; 135  :         g_oalILT.isrTime1 = TimerCount - TimerMatch;
; 136  :     }        
; 137  : #endif
; 138  : 
; 139  :     if ((INT32)(TimerCount - TimerMatch - g_oalTimer.countsMargin) < 0)

  00240	e59d2004	 ldr         r2, [sp, #4]
  00244	e59d3008	 ldr         r3, [sp, #8]
  00248	e0422003	 sub         r2, r2, r3
  0024c	e59f3108	 ldr         r3, [pc, #0x108]
  00250	e5933004	 ldr         r3, [r3, #4]
  00254	e0523003	 subs        r3, r2, r3
  00258	5a000007	 bpl         |$LN3@OALTimerIn@2|

; 140  :     {
; 141  :         XllpOstConfigureTimer(&g_XllpOSTHandle, MatchReg0, (TimerMatch + g_oalTimer.countsPerSysTick));

  0025c	e59d2008	 ldr         r2, [sp, #8]
  00260	e59f30f4	 ldr         r3, [pc, #0xF4]
  00264	e5933010	 ldr         r3, [r3, #0x10]
  00268	e0822003	 add         r2, r2, r3
  0026c	e3a01000	 mov         r1, #0
  00270	e59f00e8	 ldr         r0, [pc, #0xE8]
  00274	eb000000	 bl          XllpOstConfigureTimer

; 142  :     }
; 143  :     else

  00278	ea000004	 b           |$LN2@OALTimerIn@2|
  0027c		 |$LN3@OALTimerIn@2|

; 144  :     {
; 145  :         XllpOstConfigureMatchReg(&g_XllpOSTHandle, MatchReg0, g_oalTimer.countsPerSysTick);

  0027c	e59f30d8	 ldr         r3, [pc, #0xD8]
  00280	e5932010	 ldr         r2, [r3, #0x10]
  00284	e3a01000	 mov         r1, #0
  00288	e59f00d0	 ldr         r0, [pc, #0xD0]
  0028c	eb000000	 bl          XllpOstConfigureMatchReg
  00290		 |$LN2@OALTimerIn@2|

; 146  :     }
; 147  : 
; 148  :     // Update high resolution counter.
; 149  :     //
; 150  :     g_oalTimer.curCounts += g_oalTimer.countsPerSysTick;

  00290	e59f30c4	 ldr         r3, [pc, #0xC4]
  00294	e5931010	 ldr         r1, [r3, #0x10]
  00298	e59f30bc	 ldr         r3, [pc, #0xBC]
  0029c	e5932020	 ldr         r2, [r3, #0x20]
  002a0	e59f30b4	 ldr         r3, [pc, #0xB4]
  002a4	e5933024	 ldr         r3, [r3, #0x24]
  002a8	e0921001	 adds        r1, r2, r1
  002ac	e2a32000	 adc         r2, r3, #0
  002b0	e59f30a4	 ldr         r3, [pc, #0xA4]
  002b4	e5831020	 str         r1, [r3, #0x20]
  002b8	e59f309c	 ldr         r3, [pc, #0x9C]
  002bc	e5832024	 str         r2, [r3, #0x24]

; 151  : 
; 152  :     // Update the millisecond counter.
; 153  :     //
; 154  :     CurMSec += g_oalTimer.msecPerSysTick;

  002c0	e59f3090	 ldr         r3, [pc, #0x90]
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e28330c8	 add         r3, r3, #0xC8
  002cc	e5932000	 ldr         r2, [r3]
  002d0	e59f3084	 ldr         r3, [pc, #0x84]
  002d4	e593300c	 ldr         r3, [r3, #0xC]
  002d8	e0822003	 add         r2, r2, r3
  002dc	e59f3074	 ldr         r3, [pc, #0x74]
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e28330c8	 add         r3, r3, #0xC8
  002e8	e5832000	 str         r2, [r3]

; 155  : 
; 156  :     // Update LEDs.
; 157  :     //
; 158  :     OEMWriteDebugLED(0, (CurMSec/1000));

  002ec	e59f3064	 ldr         r3, [pc, #0x64]
  002f0	e5933000	 ldr         r3, [r3]
  002f4	e28330c8	 add         r3, r3, #0xC8
  002f8	e5931000	 ldr         r1, [r3]
  002fc	e3a00ffa	 mov         r0, #0xFA, 30
  00300	eb000000	 bl          __rt_udiv
  00304	e1a01000	 mov         r1, r0
  00308	e3a00000	 mov         r0, #0
  0030c	eb000000	 bl          OEMWriteDebugLED

; 159  : 
; 160  :     // Reschedule?
; 161  :     //
; 162  :     if ((int)(CurMSec - dwReschedTime) >= 0) sysIntr = SYSINTR_RESCHED;

  00310	e59f3040	 ldr         r3, [pc, #0x40]
  00314	e5933000	 ldr         r3, [r3]
  00318	e28320c8	 add         r2, r3, #0xC8
  0031c	e59f3034	 ldr         r3, [pc, #0x34]
  00320	e5933000	 ldr         r3, [r3]
  00324	e28330c4	 add         r3, r3, #0xC4
  00328	e5922000	 ldr         r2, [r2]
  0032c	e5933000	 ldr         r3, [r3]
  00330	e0523003	 subs        r3, r2, r3
  00334	4a000001	 bmi         |$LN1@OALTimerIn@2|
  00338	e3a03001	 mov         r3, #1
  0033c	e58d3000	 str         r3, [sp]
  00340		 |$LN1@OALTimerIn@2|

; 163  : 
; 164  : #ifdef OAL_ILTIMING
; 165  :     if (g_oalILT.active) {
; 166  :         if (--g_oalILT.counter == 0) {
; 167  :             sysIntr = SYSINTR_TIMING;
; 168  :             g_oalILT.counter = g_oalILT.counterSet;
; 169  :             g_oalILT.isrTime2 = g_XllpOSTHandle.pOSTRegs->oscr0 - TimerMatch;
; 170  :         }
; 171  :     }
; 172  : #endif
; 173  : 
; 174  :     return (sysIntr);

  00340	e59d3000	 ldr         r3, [sp]
  00344	e58d300c	 str         r3, [sp, #0xC]

; 175  : }

  00348	e59d000c	 ldr         r0, [sp, #0xC]
  0034c	e28dd010	 add         sp, sp, #0x10
  00350	e49de004	 ldr         lr, [sp], #4
  00354	e12fff1e	 bx          lr
  00358		 |$LN9@OALTimerIn@2|
  00358		 |$LN10@OALTimerIn@2|
  00358	00000000	 DCD         |g_pNKGlobal|
  0035c		 |$LN11@OALTimerIn@2|
  0035c	00000000	 DCD         |g_oalTimer|
  00360		 |$LN12@OALTimerIn@2|
  00360	00000000	 DCD         |g_XllpOSTHandle|
  00364		 |$M44788|

			 ENDP  ; |OALTimerIntrHandler|

	END
