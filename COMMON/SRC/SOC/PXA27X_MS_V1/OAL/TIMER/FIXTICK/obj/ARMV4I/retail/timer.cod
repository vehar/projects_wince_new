; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\TIMER\FIXTICK\timer.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALTimerInit|
	IMPORT	|XllpOstConfigureTimer|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALTimerQueryPerformanceCounter|
	IMPORT	|OALTimerQueryPerformanceFrequency|
	IMPORT	|g_pOemGlobal|
	IMPORT	|g_pNKGlobal|
	IMPORT	|g_oalTimer|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.bss|, NOINIT
|g_XllpOSTHandle| % 0x8
|g_XllpOSTHandle| % 0x8
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\timer\fixtick\timer.c

  00000			 AREA	 |.pdata|, PDATA
|$T44808| DCD	|$LN5@OALTimerIn|
	DCD	0x40003901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerInit| PROC

; 45   : {

  00000		 |$LN5@OALTimerIn|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44805|
  00004	e1a06001	 mov         r6, r1

; 46   :     UINT32 TimerMatch;
; 47   : 
; 48   :     // Initialize timer state global variable.
; 49   :     //
; 50   :     g_oalTimer.countsPerMSec          = countsPerMSec;

  00008	e59f70d0	 ldr         r7, [pc, #0xD0]

; 51   :     g_oalTimer.msecPerSysTick         = msecPerSysTick;
; 52   :     g_oalTimer.actualMSecPerSysTick   = msecPerSysTick;
; 53   :     g_oalTimer.countsMargin           = countsMargin;
; 54   : 
; 55   :     g_oalTimer.countsPerSysTick       = (countsPerMSec * msecPerSysTick);

  0000c	e0030690	 mul         r3, r0, r6

; 56   :     g_oalTimer.actualCountsPerSysTick = (countsPerMSec * msecPerSysTick);
; 57   :     g_oalTimer.curCounts              = 0;

  00010	e3a08000	 mov         r8, #0
  00014	e5876000	 str         r6, [r7]
  00018	e587000c	 str         r0, [r7, #0xC]
  0001c	e5870014	 str         r0, [r7, #0x14]
  00020	e5872004	 str         r2, [r7, #4]
  00024	e5873010	 str         r3, [r7, #0x10]
  00028	e5873018	 str         r3, [r7, #0x18]
  0002c	e5878020	 str         r8, [r7, #0x20]

; 58   :     g_oalTimer.maxPeriodMSec          = (UINT32)0x7FFFFFFF/g_oalTimer.countsPerMSec;

  00030	e3e01102	 mvn         r1, #2, 2
  00034	e1a00006	 mov         r0, r6
  00038	e5878024	 str         r8, [r7, #0x24]
  0003c	eb000000	 bl          __rt_udiv

; 59   : 
; 60   :     // Initialize kernel-exported values.
; 61   :     //
; 62   :     idleconv     = countsPerMSec;

  00040	e59f2094	 ldr         r2, [pc, #0x94]
  00044	e5870008	 str         r0, [r7, #8]

; 63   :     curridlehigh = 0;
; 64   :     curridlehigh = 0;
; 65   : 
; 66   :     // Initialize high resolution timer function pointers
; 67   :     pQueryPerformanceFrequency = OALTimerQueryPerformanceFrequency;

  00048	e59f5088	 ldr         r5, [pc, #0x88]
  0004c	e5923000	 ldr         r3, [r2]
  00050	e59f407c	 ldr         r4, [pc, #0x7C]

; 68   :     pQueryPerformanceCounter   = OALTimerQueryPerformanceCounter;

  00054	e59fe074	 ldr         lr, [pc, #0x74]
  00058	e58360d8	 str         r6, [r3, #0xD8]
  0005c	e5923000	 ldr         r3, [r2]
  00060	e3a06101	 mov         r6, #1, 2

; 69   : 
; 70   :     // Obtain pointers to OST and INTC registers.
; 71   :     //
; 72   :     g_XllpOSTHandle.pOSTRegs  = (XLLP_OST_T *) OALPAtoVA(BULVERDE_BASE_REG_PA_OST, FALSE);

  00064	e3a01000	 mov         r1, #0
  00068	e58380d4	 str         r8, [r3, #0xD4]
  0006c	e5923000	 ldr         r3, [r2]
  00070	e386060a	 orr         r0, r6, #0xA, 12
  00074	e58380d4	 str         r8, [r3, #0xD4]
  00078	e5953000	 ldr         r3, [r5]
  0007c	e5834034	 str         r4, [r3, #0x34]
  00080	e5953000	 ldr         r3, [r5]
  00084	e583e030	 str         lr, [r3, #0x30]
  00088	eb000000	 bl          OALPAtoVA
  0008c	e59f4038	 ldr         r4, [pc, #0x38]

; 73   :     g_XllpOSTHandle.pINTCRegs = (XLLP_INTC_T *)OALPAtoVA(BULVERDE_BASE_REG_PA_INTC, FALSE);

  00090	e3a01000	 mov         r1, #0
  00094	e5840000	 str         r0, [r4]
  00098	e386060d	 orr         r0, r6, #0xD, 12
  0009c	eb000000	 bl          OALPAtoVA
  000a0	e5840004	 str         r0, [r4, #4]

; 74   : 
; 75   :     // XLLI initializes oier and rtsr to zeroes, so no further
; 76   :     // initialization needs to be done.  Match timers and
; 77   :     // alarms are disabled.
; 78   :     //
; 79   :     // Current usage of Match registers:
; 80   :     //  M0 - Scheduler
; 81   :     //  M1 - Touch Panel
; 82   :     //  M2 - Profiler
; 83   : 
; 84   :     // Configure and arm the timer interrupt  to interrupt every specified system tick interval.
; 85   :     //
; 86   :     TimerMatch = (g_XllpOSTHandle.pOSTRegs->oscr0 + g_oalTimer.countsPerSysTick);

  000a4	e5943000	 ldr         r3, [r4]
  000a8	e5972010	 ldr         r2, [r7, #0x10]

; 87   :     XllpOstConfigureTimer (&g_XllpOSTHandle, MatchReg0, TimerMatch);

  000ac	e3a01000	 mov         r1, #0
  000b0	e5933010	 ldr         r3, [r3, #0x10]
  000b4	e1a00004	 mov         r0, r4
  000b8	e0832002	 add         r2, r3, r2
  000bc	eb000000	 bl          XllpOstConfigureTimer

; 88   : 
; 89   :     return(TRUE);

  000c0	e3a00001	 mov         r0, #1

; 90   : }

  000c4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN6@OALTimerIn|
  000cc		 |$LN7@OALTimerIn|
  000cc	00000000	 DCD         |g_XllpOSTHandle|
  000d0		 |$LN8@OALTimerIn|
  000d0	00000000	 DCD         |OALTimerQueryPerformanceCounter|
  000d4		 |$LN9@OALTimerIn|
  000d4	00000000	 DCD         |OALTimerQueryPerformanceFrequency|
  000d8		 |$LN10@OALTimerIn|
  000d8	00000000	 DCD         |g_pOemGlobal|
  000dc		 |$LN11@OALTimerIn|
  000dc	00000000	 DCD         |g_pNKGlobal|
  000e0		 |$LN12@OALTimerIn|
  000e0	00000000	 DCD         |g_oalTimer|
  000e4		 |$M44806|

			 ENDP  ; |OALTimerInit|

	EXPORT	|OALTimerCountsSinceSysTick|

  00000			 AREA	 |.pdata|, PDATA
|$T44827| DCD	|$LN9@OALTimerCo|
	DCD	0x40000e00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerCountsSinceSysTick| PROC

; 102  : {

  00000		 |$LN9@OALTimerCo|
  00000		 |$M44824|

; 103  :     UINT32 count, match;
; 104  :     
; 105  :     // Ensure a timer interrupt doesn't happen between the reads
; 106  :     do {
; 107  :         match = g_XllpOSTHandle.pOSTRegs->osmr0;
; 108  :         count = g_XllpOSTHandle.pOSTRegs->oscr0;
; 109  :     } while (match != g_XllpOSTHandle.pOSTRegs->osmr0);
; 110  : 
; 111  :     return (INT32) (count - (match - g_oalTimer.countsPerSysTick));

  00000	e59f302c	 ldr         r3, [pc, #0x2C]
  00004	e5932000	 ldr         r2, [r3]
  00008		 |$LL3@OALTimerCo|
  00008	e5921000	 ldr         r1, [r2]
  0000c	e5920010	 ldr         r0, [r2, #0x10]
  00010	e5923000	 ldr         r3, [r2]
  00014	e1510003	 cmp         r1, r3
  00018	1afffffa	 bne         |$LL3@OALTimerCo|
  0001c	e59f300c	 ldr         r3, [pc, #0xC]
  00020	e5933010	 ldr         r3, [r3, #0x10]
  00024	e0433001	 sub         r3, r3, r1
  00028	e0830000	 add         r0, r3, r0

; 112  : }

  0002c	e12fff1e	 bx          lr
  00030		 |$LN10@OALTimerCo|
  00030		 |$LN11@OALTimerCo|
  00030	00000000	 DCD         |g_oalTimer|
  00034		 |$LN12@OALTimerCo|
  00034	00000000	 DCD         |g_XllpOSTHandle|
  00038		 |$M44825|

			 ENDP  ; |OALTimerCountsSinceSysTick|

	EXPORT	|OALTimerIntrHandler|
	IMPORT	|OEMWriteDebugLED|
	IMPORT	|XllpOstConfigureMatchReg|

  00000			 AREA	 |.pdata|, PDATA
|$T44842| DCD	|$LN8@OALTimerIn@2|
	DCD	0x40003201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerIntrHandler| PROC

; 123  : {

  00000		 |$LN8@OALTimerIn@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M44839|

; 124  :     UINT32 sysIntr = SYSINTR_NOP;
; 125  :     UINT32 TimerCount;
; 126  :     UINT32 TimerMatch;
; 127  : 
; 128  :     // Configure and arm the timer interrupt  to interrupt every specified system tick interval.
; 129  :     //
; 130  :     TimerCount = g_XllpOSTHandle.pOSTRegs->oscr0;

  00004	e59f00b8	 ldr         r0, [pc, #0xB8]

; 131  :     TimerMatch = g_XllpOSTHandle.pOSTRegs->osmr0;
; 132  : 
; 133  : #ifdef OAL_ILTIMING
; 134  :     if (g_oalILT.active) {
; 135  :         g_oalILT.isrTime1 = TimerCount - TimerMatch;
; 136  :     }        
; 137  : #endif
; 138  : 
; 139  :     if ((INT32)(TimerCount - TimerMatch - g_oalTimer.countsMargin) < 0)

  00008	e59f50b0	 ldr         r5, [pc, #0xB0]
  0000c	e3a06000	 mov         r6, #0
  00010	e5901000	 ldr         r1, [r0]
  00014	e5952004	 ldr         r2, [r5, #4]
  00018	e5913010	 ldr         r3, [r1, #0x10]
  0001c	e591e000	 ldr         lr, [r1]

; 140  :     {
; 141  :         XllpOstConfigureTimer(&g_XllpOSTHandle, MatchReg0, (TimerMatch + g_oalTimer.countsPerSysTick));

  00020	e3a01000	 mov         r1, #0
  00024	e0433002	 sub         r3, r3, r2
  00028	e053300e	 subs        r3, r3, lr
  0002c	5a000003	 bpl         |$LN3@OALTimerIn@2|
  00030	e5953010	 ldr         r3, [r5, #0x10]
  00034	e083200e	 add         r2, r3, lr
  00038	eb000000	 bl          XllpOstConfigureTimer

; 142  :     }
; 143  :     else

  0003c	ea000001	 b           |$LN2@OALTimerIn@2|
  00040		 |$LN3@OALTimerIn@2|

; 144  :     {
; 145  :         XllpOstConfigureMatchReg(&g_XllpOSTHandle, MatchReg0, g_oalTimer.countsPerSysTick);

  00040	e5952010	 ldr         r2, [r5, #0x10]
  00044	eb000000	 bl          XllpOstConfigureMatchReg
  00048		 |$LN2@OALTimerIn@2|

; 146  :     }
; 147  : 
; 148  :     // Update high resolution counter.
; 149  :     //
; 150  :     g_oalTimer.curCounts += g_oalTimer.countsPerSysTick;
; 151  : 
; 152  :     // Update the millisecond counter.
; 153  :     //
; 154  :     CurMSec += g_oalTimer.msecPerSysTick;

  00048	e5951020	 ldr         r1, [r5, #0x20]
  0004c	e5953010	 ldr         r3, [r5, #0x10]
  00050	e59f4064	 ldr         r4, [pc, #0x64]
  00054	e5952024	 ldr         r2, [r5, #0x24]
  00058	e0913003	 adds        r3, r1, r3
  0005c	e594e000	 ldr         lr, [r4]
  00060	e2a22000	 adc         r2, r2, #0
  00064	e5853020	 str         r3, [r5, #0x20]
  00068	e5852024	 str         r2, [r5, #0x24]
  0006c	e59e20c8	 ldr         r2, [lr, #0xC8]
  00070	e595300c	 ldr         r3, [r5, #0xC]

; 155  : 
; 156  :     // Update LEDs.
; 157  :     //
; 158  :     OEMWriteDebugLED(0, (CurMSec/1000));

  00074	e59f103c	 ldr         r1, [pc, #0x3C]
  00078	e3a00000	 mov         r0, #0
  0007c	e0823003	 add         r3, r2, r3
  00080	e58e30c8	 str         r3, [lr, #0xC8]
  00084	e5943000	 ldr         r3, [r4]
  00088	e593e0c8	 ldr         lr, [r3, #0xC8]
  0008c	e083219e	 umull       r2, r3, lr, r1
  00090	e1a01323	 mov         r1, r3, lsr #6
  00094	eb000000	 bl          OEMWriteDebugLED

; 159  : 
; 160  :     // Reschedule?
; 161  :     //
; 162  :     if ((int)(CurMSec - dwReschedTime) >= 0) sysIntr = SYSINTR_RESCHED;

  00098	e5943000	 ldr         r3, [r4]
  0009c	e59320c8	 ldr         r2, [r3, #0xC8]
  000a0	e59330c4	 ldr         r3, [r3, #0xC4]
  000a4	e0523003	 subs        r3, r2, r3
  000a8	53a06001	 movpl       r6, #1

; 163  : 
; 164  : #ifdef OAL_ILTIMING
; 165  :     if (g_oalILT.active) {
; 166  :         if (--g_oalILT.counter == 0) {
; 167  :             sysIntr = SYSINTR_TIMING;
; 168  :             g_oalILT.counter = g_oalILT.counterSet;
; 169  :             g_oalILT.isrTime2 = g_XllpOSTHandle.pOSTRegs->oscr0 - TimerMatch;
; 170  :         }
; 171  :     }
; 172  : #endif
; 173  : 
; 174  :     return (sysIntr);
; 175  : }

  000ac	e1a00006	 mov         r0, r6
  000b0	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN9@OALTimerIn@2|
  000b8		 |$LN10@OALTimerIn@2|
  000b8	10624dd3	 DCD         0x10624dd3
  000bc		 |$LN11@OALTimerIn@2|
  000bc	00000000	 DCD         |g_pNKGlobal|
  000c0		 |$LN12@OALTimerIn@2|
  000c0	00000000	 DCD         |g_oalTimer|
  000c4		 |$LN13@OALTimerIn@2|
  000c4	00000000	 DCD         |g_XllpOSTHandle|
  000c8		 |$M44840|

			 ENDP  ; |OALTimerIntrHandler|

	END
