; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\CACHE\cfw.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|ARMCacheInfo| [ DATA ]
	EXPORT	|DCACHE_LINES| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|ARMCacheInfo| DCD 0x0
	DCD	0x8000
	DCD	0x20
	DCD	0x20
	DCD	0x8000
	DCD	0x20
	DCD	0x20
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|DCACHE_LINES| DCD 0x400
	EXPORT	|OEMCacheRangeFlush|
	IMPORT	|OALClearDTLB|
	IMPORT	|OALClearDTLBEntry|
	IMPORT	|OALClearITLB|
	IMPORT	|OALClearITLBEntry|
	IMPORT	|XScaleFlushICacheLines|
	IMPORT	|OALFlushICache|
	IMPORT	|XScaleCleanDCacheLines|
	IMPORT	|XScaleFlushDCacheLines|
	IMPORT	|XScaleFlushDCache|
	IMPORT	|gpvCacheFlushBaseMemoryAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T39135| DCD	|$LN27@OEMCacheRa|
	DCD	0x4000a704
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\cache\cfw.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMCacheRangeFlush| PROC

; 74   : {

  00000		 |$LN27@OEMCacheRa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M39132|

; 75   : 
; 76   :     // cache maintenance constants
; 77   :     const DWORD PAGE_SIZE = 4096;       // 4KB pages used by winCE on XScale

  00010	e3a03a01	 mov         r3, #1, 20
  00014	e58d3000	 str         r3, [sp]

; 78   : 
; 79   :     // these are defined in assembly language
; 80   :     extern void OALFlushICache(void);
; 81   :     extern void XScaleFlushICacheLines(LPVOID, DWORD, DWORD);
; 82   :     extern void XScaleFlushDCache(DWORD, DWORD, DWORD);
; 83   :     extern void XScaleFlushDCacheLines(PVOID, DWORD, DWORD);
; 84   :     extern void XScaleCleanDCacheLines(LPVOID, DWORD, DWORD);
; 85   :     extern void OALClearITLB(void);
; 86   :     extern void OALClearITLBEntry(LPVOID);
; 87   :     extern void OALClearDTLB(void);
; 88   :     extern void OALClearDTLBEntry(LPVOID);
; 89   :     extern void OALClearUTLB(void);
; 90   :     extern const PVOID gpvCacheFlushBaseMemoryAddress;
; 91   : 
; 92   : 
; 93   :     ///////////////////////////////////////////////////////////////////////////
; 94   :     //  Flush DCACHE 
; 95   :     ///////////////////////////////////////////////////////////////////////////
; 96   :     
; 97   :     if(dwFlags & CACHE_SYNC_DISCARD)

  00018	e59d302c	 ldr         r3, [sp, #0x2C]
  0001c	e3130001	 tst         r3, #1
  00020	0a00002d	 beq         |$LN22@OEMCacheRa|

; 98   :     {
; 99   :         // Write-back and invalidate either all or a range
; 100  :         //
; 101  :         if (!(dwLength || (DWORD)pAddr))    // If length and address are both zero, flush all.

  00024	e59d3028	 ldr         r3, [sp, #0x28]
  00028	e3530000	 cmp         r3, #0
  0002c	1a00000a	 bne         |$LN21@OEMCacheRa|
  00030	e59d3024	 ldr         r3, [sp, #0x24]
  00034	e3530000	 cmp         r3, #0
  00038	1a000007	 bne         |$LN21@OEMCacheRa|

; 102  :         {
; 103  :             XScaleFlushDCache(DCACHE_LINES, ARMCacheInfo.dwL1DCacheLineSize, (DWORD) gpvCacheFlushBaseMemoryAddress);

  0003c	e59f3254	 ldr         r3, [pc, #0x254]
  00040	e5932000	 ldr         r2, [r3]
  00044	e59f3244	 ldr         r3, [pc, #0x244]
  00048	e5931014	 ldr         r1, [r3, #0x14]
  0004c	e59f3240	 ldr         r3, [pc, #0x240]
  00050	e5930000	 ldr         r0, [r3]
  00054	eb000000	 bl          XScaleFlushDCache
  00058	ea00001e	 b           |$LN20@OEMCacheRa|
  0005c		 |$LN21@OEMCacheRa|

; 104  :         }
; 105  :         else if (dwLength >= (DWORD) ARMCacheInfo.dwL1DCacheSize)

  0005c	e59d2028	 ldr         r2, [sp, #0x28]
  00060	e59f3228	 ldr         r3, [pc, #0x228]
  00064	e5933010	 ldr         r3, [r3, #0x10]
  00068	e1520003	 cmp         r2, r3
  0006c	3a000007	 bcc         |$LN19@OEMCacheRa|

; 106  :         {
; 107  :             XScaleFlushDCache(DCACHE_LINES, ARMCacheInfo.dwL1DCacheLineSize, (DWORD) gpvCacheFlushBaseMemoryAddress);

  00070	e59f3220	 ldr         r3, [pc, #0x220]
  00074	e5932000	 ldr         r2, [r3]
  00078	e59f3210	 ldr         r3, [pc, #0x210]
  0007c	e5931014	 ldr         r1, [r3, #0x14]
  00080	e59f320c	 ldr         r3, [pc, #0x20C]
  00084	e5930000	 ldr         r0, [r3]
  00088	eb000000	 bl          XScaleFlushDCache

; 108  :         }
; 109  :         else

  0008c	ea000011	 b           |$LN18@OEMCacheRa|
  00090		 |$LN19@OEMCacheRa|

; 110  :         {
; 111  :             // normalize address and length
; 112  :             DWORD dwNormalizedAddress, dwNormalizedLength;
; 113  :             dwNormalizedAddress = (DWORD) pAddr & ~(ARMCacheInfo.dwL1DCacheLineSize - 1);

  00090	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00094	e5933014	 ldr         r3, [r3, #0x14]
  00098	e2433001	 sub         r3, r3, #1
  0009c	e1e02003	 mvn         r2, r3
  000a0	e59d3024	 ldr         r3, [sp, #0x24]
  000a4	e0033002	 and         r3, r3, r2
  000a8	e58d3008	 str         r3, [sp, #8]

; 114  :             dwNormalizedLength = dwLength + ((DWORD) pAddr - dwNormalizedAddress);

  000ac	e59d2024	 ldr         r2, [sp, #0x24]
  000b0	e59d3008	 ldr         r3, [sp, #8]
  000b4	e0422003	 sub         r2, r2, r3
  000b8	e59d3028	 ldr         r3, [sp, #0x28]
  000bc	e0833002	 add         r3, r3, r2
  000c0	e58d3004	 str         r3, [sp, #4]

; 115  : 
; 116  :             // invalidate all the indicated cache entries
; 117  :             XScaleFlushDCacheLines((LPVOID) dwNormalizedAddress, dwNormalizedLength, ARMCacheInfo.dwL1DCacheLineSize);

  000c4	e59f31c4	 ldr         r3, [pc, #0x1C4]
  000c8	e5932014	 ldr         r2, [r3, #0x14]
  000cc	e59d1004	 ldr         r1, [sp, #4]
  000d0	e59d0008	 ldr         r0, [sp, #8]
  000d4	eb000000	 bl          XScaleFlushDCacheLines
  000d8		 |$LN18@OEMCacheRa|
  000d8		 |$LN20@OEMCacheRa|

; 118  :         }

  000d8	ea00002f	 b           |$LN17@OEMCacheRa|
  000dc		 |$LN22@OEMCacheRa|

; 119  :     }
; 120  :     else if(dwFlags & CACHE_SYNC_WRITEBACK)

  000dc	e59d302c	 ldr         r3, [sp, #0x2C]
  000e0	e3130004	 tst         r3, #4
  000e4	0a00002c	 beq         |$LN16@OEMCacheRa|

; 121  :     {
; 122  :         // write back the address range
; 123  :         //
; 124  :         if (!(dwLength || (DWORD)pAddr))    // If length and address are both zero, flush all.

  000e8	e59d3028	 ldr         r3, [sp, #0x28]
  000ec	e3530000	 cmp         r3, #0
  000f0	1a00000a	 bne         |$LN15@OEMCacheRa|
  000f4	e59d3024	 ldr         r3, [sp, #0x24]
  000f8	e3530000	 cmp         r3, #0
  000fc	1a000007	 bne         |$LN15@OEMCacheRa|

; 125  :         {
; 126  :             XScaleFlushDCache(DCACHE_LINES, ARMCacheInfo.dwL1DCacheLineSize, (DWORD) gpvCacheFlushBaseMemoryAddress);

  00100	e59f3190	 ldr         r3, [pc, #0x190]
  00104	e5932000	 ldr         r2, [r3]
  00108	e59f3180	 ldr         r3, [pc, #0x180]
  0010c	e5931014	 ldr         r1, [r3, #0x14]
  00110	e59f317c	 ldr         r3, [pc, #0x17C]
  00114	e5930000	 ldr         r0, [r3]
  00118	eb000000	 bl          XScaleFlushDCache
  0011c	ea00001e	 b           |$LN14@OEMCacheRa|
  00120		 |$LN15@OEMCacheRa|

; 127  :         }
; 128  :         else if (dwLength >= (DWORD) ARMCacheInfo.dwL1DCacheSize)

  00120	e59d2028	 ldr         r2, [sp, #0x28]
  00124	e59f3164	 ldr         r3, [pc, #0x164]
  00128	e5933010	 ldr         r3, [r3, #0x10]
  0012c	e1520003	 cmp         r2, r3
  00130	3a000007	 bcc         |$LN13@OEMCacheRa|

; 129  :         {
; 130  :             XScaleFlushDCache(DCACHE_LINES, ARMCacheInfo.dwL1DCacheLineSize, (DWORD) gpvCacheFlushBaseMemoryAddress);

  00134	e59f315c	 ldr         r3, [pc, #0x15C]
  00138	e5932000	 ldr         r2, [r3]
  0013c	e59f314c	 ldr         r3, [pc, #0x14C]
  00140	e5931014	 ldr         r1, [r3, #0x14]
  00144	e59f3148	 ldr         r3, [pc, #0x148]
  00148	e5930000	 ldr         r0, [r3]
  0014c	eb000000	 bl          XScaleFlushDCache

; 131  :         }
; 132  :         else

  00150	ea000011	 b           |$LN12@OEMCacheRa|
  00154		 |$LN13@OEMCacheRa|

; 133  :         {
; 134  :             // normalize address to cache line alignment and adjust the length accordingly
; 135  :             DWORD dwNormalizedAddress = (DWORD) pAddr & ~(ARMCacheInfo.dwL1DCacheLineSize - 1);

  00154	e59f3134	 ldr         r3, [pc, #0x134]
  00158	e5933014	 ldr         r3, [r3, #0x14]
  0015c	e2433001	 sub         r3, r3, #1
  00160	e1e02003	 mvn         r2, r3
  00164	e59d3024	 ldr         r3, [sp, #0x24]
  00168	e0033002	 and         r3, r3, r2
  0016c	e58d3010	 str         r3, [sp, #0x10]

; 136  :             DWORD dwNormalizedLength = dwLength + ((DWORD) pAddr - dwNormalizedAddress);

  00170	e59d2024	 ldr         r2, [sp, #0x24]
  00174	e59d3010	 ldr         r3, [sp, #0x10]
  00178	e0422003	 sub         r2, r2, r3
  0017c	e59d3028	 ldr         r3, [sp, #0x28]
  00180	e0833002	 add         r3, r3, r2
  00184	e58d300c	 str         r3, [sp, #0xC]

; 137  : 
; 138  :             // write back all the indicated cache entries
; 139  :             XScaleCleanDCacheLines((LPVOID) dwNormalizedAddress, dwNormalizedLength, ARMCacheInfo.dwL1DCacheLineSize);

  00188	e59f3100	 ldr         r3, [pc, #0x100]
  0018c	e5932014	 ldr         r2, [r3, #0x14]
  00190	e59d100c	 ldr         r1, [sp, #0xC]
  00194	e59d0010	 ldr         r0, [sp, #0x10]
  00198	eb000000	 bl          XScaleCleanDCacheLines
  0019c		 |$LN12@OEMCacheRa|
  0019c		 |$LN14@OEMCacheRa|
  0019c		 |$LN16@OEMCacheRa|
  0019c		 |$LN17@OEMCacheRa|

; 140  :         }
; 141  :     }
; 142  : 
; 143  : 
; 144  :     ///////////////////////////////////////////////////////////////////////////
; 145  :     //  Flush ICACHE
; 146  :     ///////////////////////////////////////////////////////////////////////////
; 147  : 
; 148  :     if(dwFlags & CACHE_SYNC_INSTRUCTIONS)

  0019c	e59d302c	 ldr         r3, [sp, #0x2C]
  001a0	e3130002	 tst         r3, #2
  001a4	0a000020	 beq         |$LN11@OEMCacheRa|

; 149  :     {
; 150  : 
; 151  :         if (!(dwLength || (DWORD)pAddr))    // If length and address are both zero, flush all.

  001a8	e59d3028	 ldr         r3, [sp, #0x28]
  001ac	e3530000	 cmp         r3, #0
  001b0	1a000004	 bne         |$LN10@OEMCacheRa|
  001b4	e59d3024	 ldr         r3, [sp, #0x24]
  001b8	e3530000	 cmp         r3, #0
  001bc	1a000001	 bne         |$LN10@OEMCacheRa|

; 152  :         {
; 153  :             OALFlushICache();

  001c0	eb000000	 bl          OALFlushICache
  001c4	ea000018	 b           |$LN9@OEMCacheRa|
  001c8		 |$LN10@OEMCacheRa|

; 154  :         }
; 155  :         else if (dwLength >= (DWORD) ARMCacheInfo.dwL1ICacheSize)

  001c8	e59d2028	 ldr         r2, [sp, #0x28]
  001cc	e59f30bc	 ldr         r3, [pc, #0xBC]
  001d0	e5933004	 ldr         r3, [r3, #4]
  001d4	e1520003	 cmp         r2, r3
  001d8	3a000001	 bcc         |$LN8@OEMCacheRa|

; 156  :         {
; 157  :             OALFlushICache();

  001dc	eb000000	 bl          OALFlushICache

; 158  :         }
; 159  :         else

  001e0	ea000011	 b           |$LN7@OEMCacheRa|
  001e4		 |$LN8@OEMCacheRa|

; 160  :         {
; 161  :             // normalize address and length
; 162  :             DWORD dwNormalizedAddress, dwNormalizedLength;
; 163  :             dwNormalizedAddress = (DWORD) pAddr & ~(ARMCacheInfo.dwL1ICacheLineSize - 1);

  001e4	e59f30a4	 ldr         r3, [pc, #0xA4]
  001e8	e5933008	 ldr         r3, [r3, #8]
  001ec	e2433001	 sub         r3, r3, #1
  001f0	e1e02003	 mvn         r2, r3
  001f4	e59d3024	 ldr         r3, [sp, #0x24]
  001f8	e0033002	 and         r3, r3, r2
  001fc	e58d3018	 str         r3, [sp, #0x18]

; 164  :             dwNormalizedLength = dwLength + ((DWORD) pAddr - dwNormalizedAddress);

  00200	e59d2024	 ldr         r2, [sp, #0x24]
  00204	e59d3018	 ldr         r3, [sp, #0x18]
  00208	e0422003	 sub         r2, r2, r3
  0020c	e59d3028	 ldr         r3, [sp, #0x28]
  00210	e0833002	 add         r3, r3, r2
  00214	e58d3014	 str         r3, [sp, #0x14]

; 165  :             
; 166  :             // invalidate all the indicated cache entries
; 167  :             XScaleFlushICacheLines((LPVOID) dwNormalizedAddress, dwNormalizedLength, ARMCacheInfo.dwL1ICacheLineSize);

  00218	e59f3070	 ldr         r3, [pc, #0x70]
  0021c	e5932008	 ldr         r2, [r3, #8]
  00220	e59d1014	 ldr         r1, [sp, #0x14]
  00224	e59d0018	 ldr         r0, [sp, #0x18]
  00228	eb000000	 bl          XScaleFlushICacheLines
  0022c		 |$LN7@OEMCacheRa|
  0022c		 |$LN9@OEMCacheRa|
  0022c		 |$LN11@OEMCacheRa|

; 168  :         }
; 169  :     }
; 170  : 
; 171  : 
; 172  :     ///////////////////////////////////////////////////////////////////////////
; 173  :     //  Flush I-TLB
; 174  :     ///////////////////////////////////////////////////////////////////////////
; 175  : 
; 176  :     if(dwFlags & CACHE_SYNC_FLUSH_I_TLB)

  0022c	e59d302c	 ldr         r3, [sp, #0x2C]
  00230	e3130008	 tst         r3, #8
  00234	0a000007	 beq         |$LN6@OEMCacheRa|

; 177  :     {
; 178  : 
; 179  :         if(dwLength == PAGE_SIZE)

  00238	e59d2028	 ldr         r2, [sp, #0x28]
  0023c	e59d3000	 ldr         r3, [sp]
  00240	e1520003	 cmp         r2, r3
  00244	1a000002	 bne         |$LN5@OEMCacheRa|

; 180  :         {
; 181  :             // flush a single entry from the I-TLB
; 182  :             //
; 183  :             OALClearITLBEntry(pAddr);         

  00248	e59d0024	 ldr         r0, [sp, #0x24]
  0024c	eb000000	 bl          OALClearITLBEntry

; 184  :         }
; 185  :         else

  00250	ea000000	 b           |$LN4@OEMCacheRa|
  00254		 |$LN5@OEMCacheRa|

; 186  :         {
; 187  :             // flush the entire TLB
; 188  :             //
; 189  :             OALClearITLB();

  00254	eb000000	 bl          OALClearITLB
  00258		 |$LN4@OEMCacheRa|
  00258		 |$LN6@OEMCacheRa|

; 190  :         }
; 191  :     }
; 192  : 
; 193  : 
; 194  :     ///////////////////////////////////////////////////////////////////////////
; 195  :     //  Flush D-TLB
; 196  :     ///////////////////////////////////////////////////////////////////////////
; 197  : 
; 198  :     if(dwFlags & CACHE_SYNC_FLUSH_D_TLB)

  00258	e59d302c	 ldr         r3, [sp, #0x2C]
  0025c	e3130010	 tst         r3, #0x10
  00260	0a000007	 beq         |$LN3@OEMCacheRa|

; 199  :     {
; 200  : 
; 201  :         if(dwLength == PAGE_SIZE)

  00264	e59d2028	 ldr         r2, [sp, #0x28]
  00268	e59d3000	 ldr         r3, [sp]
  0026c	e1520003	 cmp         r2, r3
  00270	1a000002	 bne         |$LN2@OEMCacheRa|

; 202  :         {
; 203  :             // flush a single entry from the I-TLB
; 204  :             //
; 205  :             OALClearDTLBEntry(pAddr);

  00274	e59d0024	 ldr         r0, [sp, #0x24]
  00278	eb000000	 bl          OALClearDTLBEntry

; 206  :         }
; 207  :         else

  0027c	ea000000	 b           |$LN1@OEMCacheRa|
  00280		 |$LN2@OEMCacheRa|

; 208  :         {
; 209  :             // flush the entire TLB
; 210  :             //
; 211  :             OALClearDTLB();

  00280	eb000000	 bl          OALClearDTLB
  00284		 |$LN1@OEMCacheRa|
  00284		 |$LN3@OEMCacheRa|

; 212  :         }
; 213  :     }
; 214  : 
; 215  : }

  00284	e28dd01c	 add         sp, sp, #0x1C
  00288	e89d6000	 ldmia       sp, {sp, lr}
  0028c	e12fff1e	 bx          lr
  00290		 |$LN28@OEMCacheRa|
  00290		 |$LN29@OEMCacheRa|
  00290	00000000	 DCD         |ARMCacheInfo|
  00294		 |$LN30@OEMCacheRa|
  00294	00000000	 DCD         |DCACHE_LINES|
  00298		 |$LN31@OEMCacheRa|
  00298	00000000	 DCD         |gpvCacheFlushBaseMemoryAddress|
  0029c		 |$M39133|

			 ENDP  ; |OEMCacheRangeFlush|

	EXPORT	|??_C@_1HM@CNICKLBN@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu?$AAt?$AAe?$AAs?$AA?3?$AA?5?$AAO?$AAn?$AAl?$AAy?$AA?5?$AAP?$AAA?$AAG@| [ DATA ] ; `string'
	EXPORT	|OEMSetMemoryAttributes|
	IMPORT	|NKVirtualSetAttributes|
	IMPORT	|NKDbgPrintfW|

  00008			 AREA	 |.pdata|, PDATA
|$T39146| DCD	|$LN6@OEMSetMemo|
	DCD	0x40001b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@CNICKLBN@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu?$AAt?$AAe?$AAs?$AA?3?$AA?5?$AAO?$AAn?$AAl?$AAy?$AA?5?$AAP?$AAA?$AAG@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "M"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, "A"
	DCB	0x0, "t", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "b", 0x0, "u"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "O"
	DCB	0x0, "n", 0x0, "l", 0x0, "y", 0x0, " ", 0x0, "P", 0x0, "A"
	DCB	0x0, "G", 0x0, "E", 0x0, "_", 0x0, "W", 0x0, "R", 0x0, "I"
	DCB	0x0, "T", 0x0, "E", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "B"
	DCB	0x0, "I", 0x0, "N", 0x0, "E", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0029c			 AREA	 |.text|, CODE, ARM

  0029c		 |OEMSetMemoryAttributes| PROC

; 233  : {

  0029c		 |$LN6@OEMSetMemo|
  0029c	e1a0c00d	 mov         r12, sp
  002a0	e92d000f	 stmdb       sp!, {r0 - r3}
  002a4	e92d5000	 stmdb       sp!, {r12, lr}
  002a8	e24dd010	 sub         sp, sp, #0x10
  002ac		 |$M39143|

; 234  :     if (PAGE_WRITECOMBINE != dwAttributes) {

  002ac	e59d3024	 ldr         r3, [sp, #0x24]
  002b0	e3530b01	 cmp         r3, #1, 22
  002b4	0a000004	 beq         |$LN1@OEMSetMemo|

; 235  :         DEBUGMSG (1, (L"OEMSetMemoryAttributes: Only PAGE_WRITECOMBINE is supported\r\n"));

  002b8	e59f0044	 ldr         r0, [pc, #0x44]
  002bc	eb000000	 bl          NKDbgPrintfW

; 236  :         return FALSE;

  002c0	e3a03000	 mov         r3, #0
  002c4	e58d3004	 str         r3, [sp, #4]
  002c8	ea000009	 b           |$LN2@OEMSetMemo|
  002cc		 |$LN1@OEMSetMemo|

; 237  :     }
; 238  : 
; 239  :     return NKVirtualSetAttributes (pVirtAddr, cbSize,
; 240  :                                   0x4,                  // not cacheable, but bufferable
; 241  :                                   0xC,                  // Mask of all cache related bits
; 242  :                                   &dwAttributes);

  002cc	e28d3024	 add         r3, sp, #0x24
  002d0	e58d3000	 str         r3, [sp]
  002d4	e3a0300c	 mov         r3, #0xC
  002d8	e3a02004	 mov         r2, #4
  002dc	e59d1020	 ldr         r1, [sp, #0x20]
  002e0	e59d0018	 ldr         r0, [sp, #0x18]
  002e4	eb000000	 bl          NKVirtualSetAttributes
  002e8	e58d000c	 str         r0, [sp, #0xC]
  002ec	e59d300c	 ldr         r3, [sp, #0xC]
  002f0	e58d3004	 str         r3, [sp, #4]
  002f4		 |$LN2@OEMSetMemo|

; 243  : }

  002f4	e59d0004	 ldr         r0, [sp, #4]
  002f8	e28dd010	 add         sp, sp, #0x10
  002fc	e89d6000	 ldmia       sp, {sp, lr}
  00300	e12fff1e	 bx          lr
  00304		 |$LN7@OEMSetMemo|
  00304		 |$LN8@OEMSetMemo|
  00304	00000000	 DCD         |??_C@_1HM@CNICKLBN@?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAA?$AAt?$AAt?$AAr?$AAi?$AAb?$AAu?$AAt?$AAe?$AAs?$AA?3?$AA?5?$AAO?$AAn?$AAl?$AAy?$AA?5?$AAP?$AAA?$AAG@|
  00308		 |$M39144|

			 ENDP  ; |OEMSetMemoryAttributes|

	END
