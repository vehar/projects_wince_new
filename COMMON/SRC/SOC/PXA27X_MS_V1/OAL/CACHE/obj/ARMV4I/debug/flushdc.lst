ARM macroassembler      Page:1 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000            
   17 00000000              OPT     1       ; reenable listing 
   18 00000000              OPT     128     ; disable listing of macro expansions 
   19 00000000              INCLUDE armmacros.s 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000            
   14 00000000          ;/*********************************************************************** 
   15 00000000          ;  Copyright (c) ARM Limited 1998.  All rights reserved. 
   16 00000000          ; 
   17 00000000          ; NOTE: The CALL and CALLEQ macros shouldn't be used in OS startup code 
   18 00000000          ;       before the MMU is enabled since in the Thumbing case it relies 
   19 00000000          ;       on an absolute address which will be virtual in the case of the 
   20 00000000          ;       OS code and if the MMU isn't enabled, all branches should be 
   21 00000000          ;       relative (or a computed physical address). 
   22 00000000          ; 
   23 00000000          ;***********************************************************************/ 
   24 00000000            
   25 00000000            IF Interworking :LOR: Thumbing 
   26 00000000            
   27 00000000              MACRO 
   28 00000000              CALL $Fn 
   29 00000000              ldr     r12, =$Fn 
   30 00000000              mov     lr, pc 
   31 00000000              bx      r12 
   32 00000000              MEND 
   33 00000000            
   34 00000000              MACRO 
   35 00000000              CALLEQ $Fn 
   36 00000000              ldreq   r12, =$Fn 
   37 00000000              moveq   lr, pc 
   38 00000000              bxeq    r12 
   39 00000000              MEND 
   40 00000000            
   41 00000000              MACRO 
   42 00000000              RETURN 
   43 00000000              bx      lr 
   44 00000000              MEND 
   45 00000000            
   46 00000000              MACRO 
   47 00000000              RETURN_EQ 
   48 00000000              bxeq    lr 
   49 00000000              MEND 
   50 00000000            
   51 00000000              MACRO 
   52 00000000              RETURN_NE 
   53 00000000              bxne    lr 
   54 00000000              MEND 
   55 00000000            
   56 00000000            ELSE 
   83 00000000            ENDIF 
   84 00000000            
   85 00000000              END  
   20 00000000            
   21 00000000              EXTERN CacheBufferFlag 
   22 00000000            
   23 00000000              TEXTAREA 
   24 00000000            
   25 00000000            
   26 00000000              LEAF_ENTRY      XScaleFlushDCache 
   27 00000000          ;++ 
   28 00000000          ; Routine Description: 
   29 00000000          ;    Clean and invalidate the Data Cache 
   30 00000000          ; 
   31 00000000          ; This code writes back and invalidates the entire data cache by 
   32 00000000          ; allocating lines from a predefined memory range set aside for 
   33 00000000          ; this purpose. 
   34 00000000          ; 
   35 00000000          ; Syntax: 
   36 00000000          ;   void XScaleFlushDCache(DWORD dwCacheBlocks, 
   37 00000000          ;                              DWORD dwLineSize, 
   38 00000000          ;                              DWORD dwCacheFlushMemoryBase); 
   39 00000000          ; 
   40 00000000          ; Arguments: 
   41 00000000          ;   dwCacheBlocks - number of cache lines in the data cache 
   42 00000000          ;   dwLineSize - number of bytes in each cache line 
   43 00000000          ;   dwCacheFlushMemoryBase - pointer to uncached/unbuffered memory reserved 
   44 00000000          ;                            for cache flush operations. 
   45 00000000          ; 
   46 00000000          ; Return Value: 
   47 00000000          ;       -- none -- 
   48 00000000          ; r0..r3 junk 
   49 00000000          ; CC flags junk 
   50 00000000          ;-- 
   51 00000000            
   52 00000000              ; Save r4. 
   53 00000000              ; 
   54 00000000 e92d0010     stmdb   sp!, {r4}     
   55 00000004               
   56 00000004              ; 
   57 00000004              ;   Check global flag to see which 32K buffer to use. We will alternate from call to call. 
   58 00000004              ;     0: 0->32K 
   59 00000004              ;     1: 32K->64K 
   60 00000004              ; 
   61 00000004 e59f404c     ldr     r4, =CacheBufferFlag 
   62 00000008 e5943000     ldr     r3, [r4] 
   63 0000000c e3130001     tst     r3, #1 
   64 00000010 12822902     addne   r2, r2, #0x8000                         ; use upper range 
   65 00000014 e2233001     eor     r3, r3, #1 
   66 00000018 e5843000     str     r3, [r4]                                ; set/clear flag 
   67 0000001c            
   68 0000001c            
   69 0000001c          LOOP1 
   70 0000001c ee072fb2     mcr p15, 0, r2, c7, c2, 5                       ; Allocate a line at the virtual address ZBANK_BASE_C_VIRTUAL 
   71 00000020                                                              ;  (tossing out a dirty line back to memory) 
   72 00000020 e0822001     add r2, r2, r1 
   73 00000024 ee072fb2     mcr p15, 0, r2, c7, c2, 5 
   74 00000028            
   75 00000028 e0822001     add r2, r2, r1 
   76 0000002c ee072fb2     mcr p15, 0, r2, c7, c2, 5 
   77 00000030            
   78 00000030 e0822001     add r2, r2, r1 
   79 00000034 ee072fb2     mcr p15, 0, r2, c7, c2, 5 
   80 00000038            
   81 00000038 e0822001     add  r2, r2, r1 
   82 0000003c e2500004     subs r0, r0, #4                                 ; Decrement loop count 
   83 00000040 1afffff5     bne LOOP1 
   84 00000044            
   85 00000044            
   86 00000044              ; Deal with Sighting #22271: Drain write buffer may be ignored if no outstanding memory requests 
   87 00000044              ;  exist within the core. 
   88 00000044              ; 
   89 00000044              ;  I will deal with this by doing an arbitrary read from c=b=0 space (i.e. uncached, nonbuffered), 
   90 00000044              ;   forcing the drain. 
   91 00000044              ; 
   92 00000044 e3a0220a     ldr r2, =SDRAM_BASE_U_VIRTUAL 
   93 00000048 ee070f9a     mcr p15, 0, r0, c7, c10, 4  ; drain the write buffer 
   94 0000004c e5921000     ldr r1, [r2]                     
   95 00000050            
   96 00000050              ; Restore r4. 
   97 00000050              ; 
   98 00000050 e8bd0010     ldmia   sp!, {r4}    
   99 00000054            
  100 00000054              RETURN 
  101 00000058            
  102 00000058              END 
  103 00000058 00000000 *literal pool: symbol:  CacheBufferFlag + 0x0 
Assembly terminated, errors: 0, warnings: 0 
