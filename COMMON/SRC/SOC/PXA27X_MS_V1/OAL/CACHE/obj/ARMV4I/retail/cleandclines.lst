ARM macroassembler      Page:1 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000            
   17 00000000              OPT     1       ; reenable listing 
   18 00000000              OPT     128     ; disable listing of macro expansions 
   19 00000000              INCLUDE armmacros.s 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000            
   14 00000000          ;/*********************************************************************** 
   15 00000000          ;  Copyright (c) ARM Limited 1998.  All rights reserved. 
   16 00000000          ; 
   17 00000000          ; NOTE: The CALL and CALLEQ macros shouldn't be used in OS startup code 
   18 00000000          ;       before the MMU is enabled since in the Thumbing case it relies 
   19 00000000          ;       on an absolute address which will be virtual in the case of the 
   20 00000000          ;       OS code and if the MMU isn't enabled, all branches should be 
   21 00000000          ;       relative (or a computed physical address). 
   22 00000000          ; 
   23 00000000          ;***********************************************************************/ 
   24 00000000            
   25 00000000            IF Interworking :LOR: Thumbing 
   26 00000000            
   27 00000000              MACRO 
   28 00000000              CALL $Fn 
   29 00000000              ldr     r12, =$Fn 
   30 00000000              mov     lr, pc 
   31 00000000              bx      r12 
   32 00000000              MEND 
   33 00000000            
   34 00000000              MACRO 
   35 00000000              CALLEQ $Fn 
   36 00000000              ldreq   r12, =$Fn 
   37 00000000              moveq   lr, pc 
   38 00000000              bxeq    r12 
   39 00000000              MEND 
   40 00000000            
   41 00000000              MACRO 
   42 00000000              RETURN 
   43 00000000              bx      lr 
   44 00000000              MEND 
   45 00000000            
   46 00000000              MACRO 
   47 00000000              RETURN_EQ 
   48 00000000              bxeq    lr 
   49 00000000              MEND 
   50 00000000            
   51 00000000              MACRO 
   52 00000000              RETURN_NE 
   53 00000000              bxne    lr 
   54 00000000              MEND 
   55 00000000            
   56 00000000            ELSE 
   83 00000000            ENDIF 
   84 00000000            
   85 00000000              END  
   20 00000000            
   21 00000000              TEXTAREA 
   22 00000000            
   23 00000000              LEAF_ENTRY  XScaleCleanDCacheLines 
   24 00000000          ;++ 
   25 00000000          ; Routine Description: 
   26 00000000          ;    Clean some number of Data Cache lines 
   27 00000000          ; 
   28 00000000          ; Syntax: 
   29 00000000          ;   void XScaleCleanDCacheLines(PVOID pAddr, DWORD dwLength, DWORD dwLineLength); 
   30 00000000          ; 
   31 00000000          ; Arguments: 
   32 00000000          ;   pAddr -- virtual address at which to start cleaning, on dwLineLength-byte  
   33 00000000          ;            alignment 
   34 00000000          ;   dwLength -- number of bytes to cleaning, must be > zero 
   35 00000000          ;   dwLineLength -- number of bytes in a cache line 
   36 00000000          ; 
   37 00000000          ; Return Value: 
   38 00000000          ;   -- none -- 
   39 00000000          ; r0..r2 junk 
   40 00000000          ; CC flags junk  
   41 00000000          ;-- 
   42 00000000            
   43 00000000              ; invalidate the range of lines 
   44 00000000          10 
   45 00000000 ee070f3a     mcr     p15, 0, r0, c7, c10, 1  ; clean each entry 
   46 00000004 e0800002     add     r0, r0, r2              ; on to the next line 
   47 00000008 e0511002     subs    r1, r1, r2              ; reduce the number of bytes left 
   48 0000000c cafffffb     bgt     %b10                    ; loop while > 0 bytes left 
   49 00000010            
   50 00000010              ; load parameter for write buffer drain 
   51 00000010 ee072f9a     mcr     p15, 0, r2, c7, c10, 4      ; drain write buffer 
   52 00000014               
   53 00000014            
   54 00000014              ;  bcm:  since you do not call XScaleDrainWriteBuffer, need to deal with sighting 
   55 00000014               
   56 00000014              ; Deal with Sighting #22271: Drain write buffer may be ignored if no outstanding memory requests 
   57 00000014              ;  exist within the core. 
   58 00000014              ; 
   59 00000014              ;  I will deal with this by doing an arbitrary read from c=b=0 space (i.e. uncached, nonbuffered), 
   60 00000014              ;   forcing the drain. 
   61 00000014              ; 
   62 00000014 e3a0220a     ldr     r2, =SDRAM_BASE_U_VIRTUAL 
   63 00000018 ee070f9a     mcr     p15, 0, r0, c7, c10, 4  ; drain the write buffer 
   64 0000001c e5921000     ldr     r1, [r2]                     
   65 00000020              
   66 00000020               
   67 00000020               
   68 00000020              RETURN 
   69 00000024               
   70 00000024              END 
Assembly terminated, errors: 0, warnings: 0 
