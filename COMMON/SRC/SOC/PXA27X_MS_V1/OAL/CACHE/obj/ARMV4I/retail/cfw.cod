; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\CACHE\cfw.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|ARMCacheInfo| [ DATA ]
	EXPORT	|DCACHE_LINES| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|ARMCacheInfo| DCD 0x0
	DCD	0x8000
	DCD	0x20
	DCD	0x20
	DCD	0x8000
	DCD	0x20
	DCD	0x20
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
|DCACHE_LINES| DCD 0x400
	EXPORT	|OEMCacheRangeFlush|
	IMPORT	|OALClearDTLB|
	IMPORT	|OALClearDTLBEntry|
	IMPORT	|OALClearITLB|
	IMPORT	|OALFlushICache|
	IMPORT	|XScaleFlushDCache|
	IMPORT	|gpvCacheFlushBaseMemoryAddress|
	IMPORT	|OALClearITLBEntry|
	IMPORT	|XScaleFlushICacheLines|
	IMPORT	|XScaleCleanDCacheLines|
	IMPORT	|XScaleFlushDCacheLines|
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\cache\cfw.c

  00000			 AREA	 |.pdata|, PDATA
|$T39172| DCD	|$LN29@OEMCacheRa|
	DCD	0x40004901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMCacheRangeFlush| PROC

; 74   : {

  00000		 |$LN29@OEMCacheRa|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M39169|
  00004	e1a06002	 mov         r6, r2
  00008	e1a04001	 mov         r4, r1
  0000c	e1a05000	 mov         r5, r0

; 75   : 
; 76   :     // cache maintenance constants
; 77   :     const DWORD PAGE_SIZE = 4096;       // 4KB pages used by winCE on XScale
; 78   : 
; 79   :     // these are defined in assembly language
; 80   :     extern void OALFlushICache(void);
; 81   :     extern void XScaleFlushICacheLines(LPVOID, DWORD, DWORD);
; 82   :     extern void XScaleFlushDCache(DWORD, DWORD, DWORD);
; 83   :     extern void XScaleFlushDCacheLines(PVOID, DWORD, DWORD);
; 84   :     extern void XScaleCleanDCacheLines(LPVOID, DWORD, DWORD);
; 85   :     extern void OALClearITLB(void);
; 86   :     extern void OALClearITLBEntry(LPVOID);
; 87   :     extern void OALClearDTLB(void);
; 88   :     extern void OALClearDTLBEntry(LPVOID);
; 89   :     extern void OALClearUTLB(void);
; 90   :     extern const PVOID gpvCacheFlushBaseMemoryAddress;
; 91   : 
; 92   : 
; 93   :     ///////////////////////////////////////////////////////////////////////////
; 94   :     //  Flush DCACHE 
; 95   :     ///////////////////////////////////////////////////////////////////////////
; 96   :     
; 97   :     if(dwFlags & CACHE_SYNC_DISCARD)

  00010	e3160001	 tst         r6, #1
  00014	0a00000c	 beq         |$LN22@OEMCacheRa|

; 98   :     {
; 99   :         // Write-back and invalidate either all or a range
; 100  :         //
; 101  :         if (!(dwLength || (DWORD)pAddr))    // If length and address are both zero, flush all.

  00018	e3540000	 cmp         r4, #0
  0001c	1a000002	 bne         |$LN21@OEMCacheRa|
  00020	e3550000	 cmp         r5, #0
  00024	1a000002	 bne         |$LN19@OEMCacheRa|

; 102  :         {
; 103  :             XScaleFlushDCache(DCACHE_LINES, ARMCacheInfo.dwL1DCacheLineSize, (DWORD) gpvCacheFlushBaseMemoryAddress);

  00028	ea000026	 b           |$LN25@OEMCacheRa|
  0002c		 |$LN21@OEMCacheRa|

; 104  :         }
; 105  :         else if (dwLength >= (DWORD) ARMCacheInfo.dwL1DCacheSize)

  0002c	e3540902	 cmp         r4, #2, 18

; 106  :         {
; 107  :             XScaleFlushDCache(DCACHE_LINES, ARMCacheInfo.dwL1DCacheLineSize, (DWORD) gpvCacheFlushBaseMemoryAddress);
; 108  :         }
; 109  :         else

  00030	2a000024	 bcs         |$LN25@OEMCacheRa|
  00034		 |$LN19@OEMCacheRa|

; 110  :         {
; 111  :             // normalize address and length
; 112  :             DWORD dwNormalizedAddress, dwNormalizedLength;
; 113  :             dwNormalizedAddress = (DWORD) pAddr & ~(ARMCacheInfo.dwL1DCacheLineSize - 1);

  00034	e3c5001f	 bic         r0, r5, #0x1F

; 114  :             dwNormalizedLength = dwLength + ((DWORD) pAddr - dwNormalizedAddress);
; 115  : 
; 116  :             // invalidate all the indicated cache entries
; 117  :             XScaleFlushDCacheLines((LPVOID) dwNormalizedAddress, dwNormalizedLength, ARMCacheInfo.dwL1DCacheLineSize);

  00038	e0453000	 sub         r3, r5, r0
  0003c	e0831004	 add         r1, r3, r4
  00040	e3a02020	 mov         r2, #0x20
  00044	eb000000	 bl          XScaleFlushDCacheLines

; 118  :         }

  00048	ea00000a	 b           |$LN12@OEMCacheRa|
  0004c		 |$LN22@OEMCacheRa|

; 119  :     }
; 120  :     else if(dwFlags & CACHE_SYNC_WRITEBACK)

  0004c	e3160004	 tst         r6, #4
  00050	0a000008	 beq         |$LN12@OEMCacheRa|

; 121  :     {
; 122  :         // write back the address range
; 123  :         //
; 124  :         if (!(dwLength || (DWORD)pAddr))    // If length and address are both zero, flush all.

  00054	e3540000	 cmp         r4, #0
  00058	1a000018	 bne         |$LN15@OEMCacheRa|
  0005c	e3550000	 cmp         r5, #0
  00060	0a000018	 beq         |$LN25@OEMCacheRa|
  00064		 |$LN13@OEMCacheRa|

; 133  :         {
; 134  :             // normalize address to cache line alignment and adjust the length accordingly
; 135  :             DWORD dwNormalizedAddress = (DWORD) pAddr & ~(ARMCacheInfo.dwL1DCacheLineSize - 1);

  00064	e3c5001f	 bic         r0, r5, #0x1F

; 136  :             DWORD dwNormalizedLength = dwLength + ((DWORD) pAddr - dwNormalizedAddress);
; 137  : 
; 138  :             // write back all the indicated cache entries
; 139  :             XScaleCleanDCacheLines((LPVOID) dwNormalizedAddress, dwNormalizedLength, ARMCacheInfo.dwL1DCacheLineSize);

  00068	e0453000	 sub         r3, r5, r0
  0006c	e0831004	 add         r1, r3, r4
  00070	e3a02020	 mov         r2, #0x20
  00074	eb000000	 bl          XScaleCleanDCacheLines
  00078		 |$LN12@OEMCacheRa|

; 140  :         }
; 141  :     }
; 142  : 
; 143  : 
; 144  :     ///////////////////////////////////////////////////////////////////////////
; 145  :     //  Flush ICACHE
; 146  :     ///////////////////////////////////////////////////////////////////////////
; 147  : 
; 148  :     if(dwFlags & CACHE_SYNC_INSTRUCTIONS)

  00078	e3160002	 tst         r6, #2
  0007c	0a000008	 beq         |$LN7@OEMCacheRa|

; 149  :     {
; 150  : 
; 151  :         if (!(dwLength || (DWORD)pAddr))    // If length and address are both zero, flush all.

  00080	e3540000	 cmp         r4, #0
  00084	1a000015	 bne         |$LN10@OEMCacheRa|
  00088	e3550000	 cmp         r5, #0
  0008c	0a000015	 beq         |$LN26@OEMCacheRa|
  00090		 |$LN8@OEMCacheRa|

; 160  :         {
; 161  :             // normalize address and length
; 162  :             DWORD dwNormalizedAddress, dwNormalizedLength;
; 163  :             dwNormalizedAddress = (DWORD) pAddr & ~(ARMCacheInfo.dwL1ICacheLineSize - 1);

  00090	e3c5001f	 bic         r0, r5, #0x1F

; 164  :             dwNormalizedLength = dwLength + ((DWORD) pAddr - dwNormalizedAddress);
; 165  :             
; 166  :             // invalidate all the indicated cache entries
; 167  :             XScaleFlushICacheLines((LPVOID) dwNormalizedAddress, dwNormalizedLength, ARMCacheInfo.dwL1ICacheLineSize);

  00094	e0453000	 sub         r3, r5, r0
  00098	e0831004	 add         r1, r3, r4
  0009c	e3a02020	 mov         r2, #0x20
  000a0	eb000000	 bl          XScaleFlushICacheLines
  000a4		 |$LN7@OEMCacheRa|

; 168  :         }
; 169  :     }
; 170  : 
; 171  : 
; 172  :     ///////////////////////////////////////////////////////////////////////////
; 173  :     //  Flush I-TLB
; 174  :     ///////////////////////////////////////////////////////////////////////////
; 175  : 
; 176  :     if(dwFlags & CACHE_SYNC_FLUSH_I_TLB)

  000a4	e3160008	 tst         r6, #8
  000a8	0a000011	 beq         |$LN4@OEMCacheRa|

; 177  :     {
; 178  : 
; 179  :         if(dwLength == PAGE_SIZE)

  000ac	e3540a01	 cmp         r4, #1, 20
  000b0	1a00000e	 bne         |$LN5@OEMCacheRa|

; 180  :         {
; 181  :             // flush a single entry from the I-TLB
; 182  :             //
; 183  :             OALClearITLBEntry(pAddr);         

  000b4	e1a00005	 mov         r0, r5
  000b8	eb000000	 bl          OALClearITLBEntry

; 184  :         }
; 185  :         else

  000bc	ea00000c	 b           |$LN4@OEMCacheRa|
  000c0		 |$LN15@OEMCacheRa|

; 125  :         {
; 126  :             XScaleFlushDCache(DCACHE_LINES, ARMCacheInfo.dwL1DCacheLineSize, (DWORD) gpvCacheFlushBaseMemoryAddress);
; 127  :         }
; 128  :         else if (dwLength >= (DWORD) ARMCacheInfo.dwL1DCacheSize)

  000c0	e3540902	 cmp         r4, #2, 18
  000c4	3affffe6	 bcc         |$LN13@OEMCacheRa|
  000c8		 |$LN25@OEMCacheRa|

; 129  :         {
; 130  :             XScaleFlushDCache(DCACHE_LINES, ARMCacheInfo.dwL1DCacheLineSize, (DWORD) gpvCacheFlushBaseMemoryAddress);

  000c8	e59f3050	 ldr         r3, [pc, #0x50]
  000cc	e3a01020	 mov         r1, #0x20
  000d0	e3a00b01	 mov         r0, #1, 22
  000d4	e5932000	 ldr         r2, [r3]
  000d8	eb000000	 bl          XScaleFlushDCache

; 131  :         }
; 132  :         else

  000dc	eaffffe5	 b           |$LN12@OEMCacheRa|
  000e0		 |$LN10@OEMCacheRa|

; 152  :         {
; 153  :             OALFlushICache();
; 154  :         }
; 155  :         else if (dwLength >= (DWORD) ARMCacheInfo.dwL1ICacheSize)

  000e0	e3540902	 cmp         r4, #2, 18
  000e4	3affffe9	 bcc         |$LN8@OEMCacheRa|
  000e8		 |$LN26@OEMCacheRa|

; 156  :         {
; 157  :             OALFlushICache();

  000e8	eb000000	 bl          OALFlushICache

; 158  :         }
; 159  :         else

  000ec	eaffffec	 b           |$LN7@OEMCacheRa|
  000f0		 |$LN5@OEMCacheRa|

; 186  :         {
; 187  :             // flush the entire TLB
; 188  :             //
; 189  :             OALClearITLB();

  000f0	eb000000	 bl          OALClearITLB
  000f4		 |$LN4@OEMCacheRa|

; 190  :         }
; 191  :     }
; 192  : 
; 193  : 
; 194  :     ///////////////////////////////////////////////////////////////////////////
; 195  :     //  Flush D-TLB
; 196  :     ///////////////////////////////////////////////////////////////////////////
; 197  : 
; 198  :     if(dwFlags & CACHE_SYNC_FLUSH_D_TLB)

  000f4	e3160010	 tst         r6, #0x10
  000f8	0a000006	 beq         |$LN1@OEMCacheRa|

; 199  :     {
; 200  : 
; 201  :         if(dwLength == PAGE_SIZE)

  000fc	e3540a01	 cmp         r4, #1, 20
  00100	1a000003	 bne         |$LN2@OEMCacheRa|

; 202  :         {
; 203  :             // flush a single entry from the I-TLB
; 204  :             //
; 205  :             OALClearDTLBEntry(pAddr);

  00104	e1a00005	 mov         r0, r5
  00108	eb000000	 bl          OALClearDTLBEntry

; 212  :         }
; 213  :     }
; 214  : 
; 215  : }

  0010c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00110	e12fff1e	 bx          lr
  00114		 |$LN2@OEMCacheRa|

; 206  :         }
; 207  :         else
; 208  :         {
; 209  :             // flush the entire TLB
; 210  :             //
; 211  :             OALClearDTLB();

  00114	eb000000	 bl          OALClearDTLB
  00118		 |$LN1@OEMCacheRa|

; 212  :         }
; 213  :     }
; 214  : 
; 215  : }

  00118	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN30@OEMCacheRa|
  00120		 |$LN31@OEMCacheRa|
  00120	00000000	 DCD         |gpvCacheFlushBaseMemoryAddress|
  00124		 |$M39170|

			 ENDP  ; |OEMCacheRangeFlush|

	EXPORT	|OEMSetMemoryAttributes|
	IMPORT	|NKVirtualSetAttributes|

  00000			 AREA	 |.pdata|, PDATA
|$T39186| DCD	|$LN6@OEMSetMemo|
	DCD	0x40001004
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMSetMemoryAttributes| PROC

; 233  : {

  00000		 |$LN6@OEMSetMemo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M39183|
  00010	e58d3018	 str         r3, [sp, #0x18]
  00014	e1a01002	 mov         r1, r2

; 234  :     if (PAGE_WRITECOMBINE != dwAttributes) {

  00018	e3530b01	 cmp         r3, #1, 22

; 235  :         DEBUGMSG (1, (L"OEMSetMemoryAttributes: Only PAGE_WRITECOMBINE is supported\r\n"));
; 236  :         return FALSE;
; 237  :     }
; 238  : 
; 239  :     return NKVirtualSetAttributes (pVirtAddr, cbSize,
; 240  :                                   0x4,                  // not cacheable, but bufferable
; 241  :                                   0xC,                  // Mask of all cache related bits
; 242  :                                   &dwAttributes);

  0001c	028d3018	 addeq       r3, sp, #0x18
  00020	058d3000	 streq       r3, [sp]
  00024	03a0300c	 moveq       r3, #0xC
  00028	13a00000	 movne       r0, #0
  0002c	03a02004	 moveq       r2, #4
  00030	0b000000	 bleq        NKVirtualSetAttributes

; 243  : }

  00034	e28dd004	 add         sp, sp, #4
  00038	e89d6000	 ldmia       sp, {sp, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M39184|

			 ENDP  ; |OEMSetMemoryAttributes|

	END
