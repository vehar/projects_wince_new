; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\RTC\rtc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMGetRealTime|
	EXPORT	|??_C@_1DO@ODEGBKEH@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@JJILIKOH@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAp?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|OALPAtoVA|
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\rtc\rtc.c

  00000			 AREA	 |.pdata|, PDATA
|$T44973| DCD	|$LN14@OEMGetReal|
	DCD	0x40003f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@ODEGBKEH@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JJILIKOH@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAp?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "p", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMGetRealTime| PROC

; 64   : {

  00000		 |$LN14@OEMGetReal|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44970|
  00004	e1a06000	 mov         r6, r0
  00008	e3a03101	 mov         r3, #1, 2

; 65   :     volatile BULVERDE_RTC_REG *pRTCRegs = (volatile BULVERDE_RTC_REG *) OALPAtoVA(BULVERDE_BASE_REG_PA_RTC, FALSE);

  0000c	e3830609	 orr         r0, r3, #9, 12
  00010	e3a01000	 mov         r1, #0
  00014	eb000000	 bl          OALPAtoVA

; 66   :     DayRegister  dayReg;
; 67   :     YearRegister yearReg;
; 68   :     BOOL     retVal  = FALSE;
; 69   :     WORD     seconds = 0;
; 70   : 
; 71   :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OEMGetRealTime(pTime = 0x%x)\r\n", pTime));

  00018	e59f70d8	 ldr         r7, [pc, #0xD8]
  0001c	e1a05000	 mov         r5, r0
  00020	e3a04000	 mov         r4, #0
  00024	e5973440	 ldr         r3, [r7, #0x440]
  00028	e3130040	 tst         r3, #0x40
  0002c	0a000005	 beq         |$LN7@OEMGetReal|
  00030	e3130004	 tst         r3, #4
  00034	0a000003	 beq         |$LN7@OEMGetReal|
  00038	e59f00b4	 ldr         r0, [pc, #0xB4]
  0003c	e1a01006	 mov         r1, r6
  00040	eb000000	 bl          NKDbgPrintfW
  00044	e5973440	 ldr         r3, [r7, #0x440]
  00048		 |$LN7@OEMGetReal|

; 72   :     if (!pTime) goto Done;

  00048	e3560000	 cmp         r6, #0
  0004c	0a00001f	 beq         |$Done$44799|
  00050		 |$LL3@OEMGetReal|

; 73   : 
; 74   :     do
; 75   :     {
; 76   :         // Get register values
; 77   :         dayReg.value  = (UINT32)pRTCRegs->rdcr;

  00050	e5958010	 ldr         r8, [r5, #0x10]

; 78   :         seconds = dayReg.seconds;
; 79   :         yearReg.value = (UINT32)pRTCRegs->rycr; 

  00054	e5954014	 ldr         r4, [r5, #0x14]

; 80   :     } while (seconds != (pRTCRegs->rdcr & 0x3F));

  00058	e5953010	 ldr         r3, [r5, #0x10]
  0005c	e208203f	 and         r2, r8, #0x3F
  00060	e203303f	 and         r3, r3, #0x3F
  00064	e1520003	 cmp         r2, r3
  00068	1afffff8	 bne         |$LL3@OEMGetReal|

; 81   : 
; 82   :     // Fill in the SYSTEMTIME structure with the appropriate values
; 83   :     pTime->wYear      = yearReg.year;
; 84   :     pTime->wMonth     = yearReg.month;
; 85   :     pTime->wDay       = yearReg.dayOfMonth;
; 86   :     pTime->wDayOfWeek = dayReg.dayOfWeek - 1;   // Hardware is [1,7] Structure is [0,6]

  0006c	e1a03608	 mov         r3, r8, lsl #12
  00070	e1a03ea3	 mov         r3, r3, lsr #29
  00074	e2833cff	 add         r3, r3, #0xFF, 24
  00078	e1a02584	 mov         r2, r4, lsl #11
  0007c	e1a01b84	 mov         r1, r4, lsl #23

; 87   :     pTime->wHour      = dayReg.hours;

  00080	e1a00788	 mov         r0, r8, lsl #15

; 88   :     pTime->wMinute    = dayReg.minutes;

  00084	e1a0ea08	 mov         lr, r8, lsl #20

; 89   :     pTime->wSecond    = dayReg.seconds;

  00088	e208503f	 and         r5, r8, #0x3F
  0008c	e28330ff	 add         r3, r3, #0xFF
  00090	e1a02a22	 mov         r2, r2, lsr #20
  00094	e1a01e21	 mov         r1, r1, lsr #28
  00098	e204401f	 and         r4, r4, #0x1F
  0009c	e1a00da0	 mov         r0, r0, lsr #27
  000a0	e1a0ed2e	 mov         lr, lr, lsr #26

; 90   :     pTime->wMilliseconds = 0;

  000a4	e3a08000	 mov         r8, #0
  000a8	e1c630b4	 strh        r3, [r6, #4]
  000ac	e1c620b0	 strh        r2, [r6]
  000b0	e1c610b2	 strh        r1, [r6, #2]
  000b4	e1c640b6	 strh        r4, [r6, #6]
  000b8	e1c600b8	 strh        r0, [r6, #8]
  000bc	e1c6e0ba	 strh        lr, [r6, #0xA]
  000c0	e1c650bc	 strh        r5, [r6, #0xC]
  000c4	e1c680be	 strh        r8, [r6, #0xE]

; 91   :     retVal = TRUE;

  000c8	e5973440	 ldr         r3, [r7, #0x440]
  000cc	e3a04001	 mov         r4, #1
  000d0		 |$Done$44799|

; 92   : 
; 93   : Done:
; 94   :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMGetRealTime(retVal = %d)\r\n", retVal));

  000d0	e3130040	 tst         r3, #0x40
  000d4	13130004	 tstne       r3, #4
  000d8	159f0010	 ldrne       r0, [pc, #0x10]
  000dc	11a01004	 movne       r1, r4
  000e0	1b000000	 blne        NKDbgPrintfW

; 95   :     return(retVal);
; 96   : }

  000e4	e1a00004	 mov         r0, r4
  000e8	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$LN15@OEMGetReal|
  000f0		 |$LN16@OEMGetReal|
  000f0	00000000	 DCD         |??_C@_1DO@ODEGBKEH@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000f4		 |$LN17@OEMGetReal|
  000f4	00000000	 DCD         |??_C@_1EA@JJILIKOH@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAp?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000f8		 |$LN18@OEMGetReal|
  000f8	00000000	 DCD         |dpCurSettings|
  000fc		 |$M44971|

			 ENDP  ; |OEMGetRealTime|


  00000			 AREA	 |.pdata|, PDATA
|$T44988| DCD	|$LN8@IsLeapYear|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsLeapYear| PROC

; 340  : {

  00000		 |$LN8@IsLeapYear|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M44985|
  00004	e1a0e000	 mov         lr, r0

; 341  :     BOOL leap = FALSE;
; 342  : 
; 343  :     // Leap years must be a multiple of 4
; 344  :     if ((wYear % 4) == 0)

  00008	e1b0300e	 movs        r3, lr
  0000c	42833003	 addmi       r3, r3, #3
  00010	e1a03143	 mov         r3, r3, asr #2
  00014	e05e3103	 subs        r3, lr, r3, lsl #2
  00018	e3a00000	 mov         r0, #0
  0001c	1a00000f	 bne         |$LN1@IsLeapYear|

; 345  :     {
; 346  :         leap = TRUE;
; 347  : 
; 348  :         // It is not a leap year if it is a multiple of 100
; 349  :         if ((wYear % 100) == 0)

  00020	e59f4040	 ldr         r4, [pc, #0x40]
  00024	e3a02064	 mov         r2, #0x64
  00028	e3a00001	 mov         r0, #1
  0002c	e0c3149e	 smull       r1, r3, lr, r4
  00030	e1a032c3	 mov         r3, r3, asr #5
  00034	e0833fa3	 add         r3, r3, r3, lsr #31
  00038	e0020293	 mul         r2, r3, r2
  0003c	e05e3002	 subs        r3, lr, r2

; 350  :         {
; 351  :             leap = FALSE;
; 352  : 
; 353  :             // Unless it is a multiple of 400
; 354  :             if ((wYear % 400) == 0)

  00040	00c3149e	 smulleq     r1, r3, lr, r4
  00044	03a02e19	 moveq       r2, #0x19, 28
  00048	01a033c3	 moveq       r3, r3, asr #7
  0004c	00833fa3	 addeq       r3, r3, r3, lsr #31
  00050	00020293	 muleq       r2, r3, r2
  00054	03a00000	 moveq       r0, #0
  00058	005e3002	 subeqs      r3, lr, r2

; 355  :             {
; 356  :                 leap = TRUE;

  0005c	03a00001	 moveq       r0, #1
  00060		 |$LN1@IsLeapYear|

; 357  :             }
; 358  :         }
; 359  :     }
; 360  : 
; 361  :     return leap;
; 362  : }

  00060	e8bd4010	 ldmia       sp!, {r4, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN9@IsLeapYear|
  00068		 |$LN10@IsLeapYear|
  00068	51eb851f	 DCD         0x51eb851f
  0006c		 |$M44986|

			 ENDP  ; |IsLeapYear|

	EXPORT	|??_C@_1CA@IAMHBLKN@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@JDCGKPJI@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@DLBJCAA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAW?$AAe?$AAe?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@POBMIPOL@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAi?$AAn?$AAu?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@LJJELEAM@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAo?$AAu?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@IGFLKAOF@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAY?$AAe?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@NEMLEECJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45031| DCD	|$LN45@IsSystemTi|
	DCD	0x40008a01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IAMHBLKN@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "M", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "h"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@JDCGKPJI@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "D", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "M", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "h", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@DLBJCAA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAW?$AAe?$AAe?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "D", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "W", 0x0, "e", 0x0, "e", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@POBMIPOL@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAi?$AAn?$AAu?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "M", 0x0, "i", 0x0, "n", 0x0, "u", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LJJELEAM@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAo?$AAu?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "H", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@IGFLKAOF@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAY?$AAe?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "Y", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@NEMLEECJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "A", 0x0, "r", 0x0, "g", 0x0, "u", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IsSystemTimeStructValid| PROC

; 261  : {

  00000		 |$LN45@IsSystemTi|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45028|
  00004	e3500000	 cmp         r0, #0

; 262  :     WORD dayCompare = 0;
; 263  : 
; 264  :     if (!pTime)

  00008	1a000007	 bne         |$LN14@IsSystemTi|

; 265  :     { 
; 266  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Argument\r\n"));

  0000c	e59f31f4	 ldr         r3, [pc, #0x1F4]
  00010	e5933440	 ldr         r3, [r3, #0x440]
  00014	e3130040	 tst         r3, #0x40
  00018	0a000076	 beq         |$LN21@IsSystemTi|
  0001c	e3130001	 tst         r3, #1
  00020	0a000074	 beq         |$LN21@IsSystemTi|
  00024	e59f01f8	 ldr         r0, [pc, #0x1F8]

; 267  :         return FALSE;

  00028	ea000071	 b           |$LN41@IsSystemTi|
  0002c		 |$LN14@IsSystemTi|

; 268  :     }
; 269  : 
; 270  :     // Check the basic validity of the values that are passed in
; 271  :     if ((pTime->wYear > 4095))

  0002c	e1d0e0b0	 ldrh        lr, [r0]
  00030	e3a03c0f	 mov         r3, #0xF, 24
  00034	e38330ff	 orr         r3, r3, #0xFF
  00038	e15e0003	 cmp         lr, r3
  0003c	9a000007	 bls         |$LN13@IsSystemTi|

; 272  :     {
; 273  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Year\r\n"));

  00040	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00044	e5933440	 ldr         r3, [r3, #0x440]
  00048	e3130040	 tst         r3, #0x40
  0004c	0a000069	 beq         |$LN21@IsSystemTi|
  00050	e3130001	 tst         r3, #1
  00054	0a000067	 beq         |$LN21@IsSystemTi|
  00058	e59f01c0	 ldr         r0, [pc, #0x1C0]

; 274  :         return FALSE;

  0005c	ea000064	 b           |$LN41@IsSystemTi|
  00060		 |$LN13@IsSystemTi|

; 275  :     }
; 276  : 
; 277  :     if ((pTime->wMonth > 12) || (pTime->wMonth == 0))

  00060	e1d020b2	 ldrh        r2, [r0, #2]
  00064	e352000c	 cmp         r2, #0xC
  00068	8a00005a	 bhi         |$LN11@IsSystemTi|
  0006c	e3520000	 cmp         r2, #0
  00070	0a000058	 beq         |$LN11@IsSystemTi|

; 281  :     } 
; 282  : 
; 283  :     if (!(pTime->wHour < 24))

  00074	e1d030b8	 ldrh        r3, [r0, #8]
  00078	e3530018	 cmp         r3, #0x18
  0007c	3a000007	 bcc         |$LN10@IsSystemTi|

; 284  :     {
; 285  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Hour\r\n"));

  00080	e59f3180	 ldr         r3, [pc, #0x180]
  00084	e5933440	 ldr         r3, [r3, #0x440]
  00088	e3130040	 tst         r3, #0x40
  0008c	0a000059	 beq         |$LN21@IsSystemTi|
  00090	e3130001	 tst         r3, #1
  00094	0a000057	 beq         |$LN21@IsSystemTi|
  00098	e59f017c	 ldr         r0, [pc, #0x17C]

; 286  :         return FALSE;

  0009c	ea000054	 b           |$LN41@IsSystemTi|
  000a0		 |$LN10@IsSystemTi|

; 287  :     }
; 288  :     if (!(pTime->wMinute < 60))

  000a0	e1d030ba	 ldrh        r3, [r0, #0xA]
  000a4	e353003c	 cmp         r3, #0x3C
  000a8	3a000007	 bcc         |$LN9@IsSystemTi|
  000ac		 |$LN42@IsSystemTi|

; 289  :     {
; 290  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Minutes\r\n"));

  000ac	e59f3154	 ldr         r3, [pc, #0x154]
  000b0	e5933440	 ldr         r3, [r3, #0x440]
  000b4	e3130040	 tst         r3, #0x40
  000b8	0a00004e	 beq         |$LN21@IsSystemTi|
  000bc	e3130001	 tst         r3, #1
  000c0	0a00004c	 beq         |$LN21@IsSystemTi|
  000c4	e59f014c	 ldr         r0, [pc, #0x14C]

; 291  :         return FALSE;

  000c8	ea000049	 b           |$LN41@IsSystemTi|
  000cc		 |$LN9@IsSystemTi|

; 292  :     }
; 293  : 
; 294  :     if (!(pTime->wSecond < 60))

  000cc	e1d030bc	 ldrh        r3, [r0, #0xC]
  000d0	e353003c	 cmp         r3, #0x3C

; 295  :     {
; 296  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Minutes\r\n"));
; 297  :         return FALSE;

  000d4	2afffff4	 bcs         |$LN42@IsSystemTi|

; 298  :     }
; 299  : 
; 300  :     // SYSTEMTIME struct store the day of week starting
; 301  :     // at 0 while the hardware is expecting a 1.
; 302  :     if ((pTime->wDayOfWeek >= 7))

  000d8	e1d030b4	 ldrh        r3, [r0, #4]
  000dc	e3530007	 cmp         r3, #7
  000e0	3a000007	 bcc         |$LN7@IsSystemTi|

; 303  :     {
; 304  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Day of Week\r\n"));

  000e4	e59f311c	 ldr         r3, [pc, #0x11C]
  000e8	e5933440	 ldr         r3, [r3, #0x440]
  000ec	e3130040	 tst         r3, #0x40
  000f0	0a000040	 beq         |$LN21@IsSystemTi|
  000f4	e3130001	 tst         r3, #1
  000f8	0a00003e	 beq         |$LN21@IsSystemTi|
  000fc	e59f0110	 ldr         r0, [pc, #0x110]

; 305  :         return FALSE;

  00100	ea00003b	 b           |$LN41@IsSystemTi|
  00104		 |$LN7@IsSystemTi|

; 306  :     }
; 307  : 
; 308  :     // Calculate the day comparison value
; 309  :     if ((pTime->wMonth == 4) ||
; 310  :         (pTime->wMonth == 6) ||
; 311  :         (pTime->wMonth == 9) ||
; 312  :         (pTime->wMonth == 11))

  00104	e3520004	 cmp         r2, #4
  00108	0a000023	 beq         |$LN5@IsSystemTi|
  0010c	e3520006	 cmp         r2, #6
  00110	0a000021	 beq         |$LN5@IsSystemTi|
  00114	e3520009	 cmp         r2, #9
  00118	0a00001f	 beq         |$LN5@IsSystemTi|
  0011c	e352000b	 cmp         r2, #0xB
  00120	0a00001d	 beq         |$LN5@IsSystemTi|

; 315  :     }
; 316  :     else if (pTime->wMonth == 2)

  00124	e3520002	 cmp         r2, #2
  00128	1a000019	 bne         |$LN3@IsSystemTi|

; 317  :     {
; 318  :         dayCompare = (IsLeapYear(pTime->wYear)) ? 29:28;

  0012c	e1b0300e	 movs        r3, lr
  00130	42833003	 addmi       r3, r3, #3
  00134	e1a03143	 mov         r3, r3, asr #2
  00138	e05e3103	 subs        r3, lr, r3, lsl #2
  0013c	1a000010	 bne         |$LN31@IsSystemTi|
  00140	e59f40c8	 ldr         r4, [pc, #0xC8]
  00144	e3a02064	 mov         r2, #0x64
  00148	e0c3149e	 smull       r1, r3, lr, r4
  0014c	e1a032c3	 mov         r3, r3, asr #5
  00150	e0833fa3	 add         r3, r3, r3, lsr #31
  00154	e0020293	 mul         r2, r3, r2
  00158	e05e3002	 subs        r3, lr, r2
  0015c	1a000006	 bne         |$LN35@IsSystemTi|
  00160	e0c3149e	 smull       r1, r3, lr, r4
  00164	e3a02e19	 mov         r2, #0x19, 28
  00168	e1a033c3	 mov         r3, r3, asr #7
  0016c	e0833fa3	 add         r3, r3, r3, lsr #31
  00170	e0020293	 mul         r2, r3, r2
  00174	e05e3002	 subs        r3, lr, r2
  00178	1a000001	 bne         |$LN31@IsSystemTi|
  0017c		 |$LN35@IsSystemTi|
  0017c	e3a0301d	 mov         r3, #0x1D
  00180	ea000000	 b           |$LN32@IsSystemTi|
  00184		 |$LN31@IsSystemTi|
  00184	e3a0301c	 mov         r3, #0x1C
  00188		 |$LN32@IsSystemTi|
  00188	e1a02803	 mov         r2, r3, lsl #16
  0018c	e1a02822	 mov         r2, r2, lsr #16

; 319  :     }
; 320  :     else

  00190	ea000002	 b           |$LN2@IsSystemTi|
  00194		 |$LN3@IsSystemTi|

; 321  :     {
; 322  :         dayCompare = 31;

  00194	e3a0201f	 mov         r2, #0x1F
  00198	ea000000	 b           |$LN2@IsSystemTi|
  0019c		 |$LN5@IsSystemTi|

; 313  :     {
; 314  :         dayCompare = 30;

  0019c	e3a0201e	 mov         r2, #0x1E
  001a0		 |$LN2@IsSystemTi|

; 323  :     }
; 324  : 
; 325  :     // This should be checking for a wDay == 0 as an error
; 326  :     // but the documentation does not specify.
; 327  :     if ((pTime->wDay > dayCompare))

  001a0	e1d030b6	 ldrh        r3, [r0, #6]
  001a4	e1530002	 cmp         r3, r2
  001a8	9a000007	 bls         |$LN1@IsSystemTi|

; 328  :     {
; 329  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Day of Month\r\n"));

  001ac	e59f3054	 ldr         r3, [pc, #0x54]
  001b0	e5933440	 ldr         r3, [r3, #0x440]
  001b4	e3130040	 tst         r3, #0x40
  001b8	0a00000e	 beq         |$LN21@IsSystemTi|
  001bc	e3130001	 tst         r3, #1
  001c0	0a00000c	 beq         |$LN21@IsSystemTi|
  001c4	e59f0040	 ldr         r0, [pc, #0x40]

; 330  :         return FALSE;

  001c8	ea000009	 b           |$LN41@IsSystemTi|
  001cc		 |$LN1@IsSystemTi|

; 331  :     }
; 332  : 
; 333  :     return TRUE;

  001cc	e3a00001	 mov         r0, #1

; 334  : }

  001d0	e8bd4010	 ldmia       sp!, {r4, lr}
  001d4	e12fff1e	 bx          lr
  001d8		 |$LN11@IsSystemTi|

; 278  :     {
; 279  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Month\r\n"));

  001d8	e59f3028	 ldr         r3, [pc, #0x28]
  001dc	e5933440	 ldr         r3, [r3, #0x440]
  001e0	e3130040	 tst         r3, #0x40
  001e4	0a000003	 beq         |$LN21@IsSystemTi|
  001e8	e3130001	 tst         r3, #1
  001ec	0a000001	 beq         |$LN21@IsSystemTi|
  001f0	e59f000c	 ldr         r0, [pc, #0xC]
  001f4		 |$LN41@IsSystemTi|
  001f4	eb000000	 bl          NKDbgPrintfW
  001f8		 |$LN21@IsSystemTi|

; 280  :         return FALSE;

  001f8	e3a00000	 mov         r0, #0

; 334  : }

  001fc	e8bd4010	 ldmia       sp!, {r4, lr}
  00200	e12fff1e	 bx          lr
  00204		 |$LN46@IsSystemTi|
  00204		 |$LN47@IsSystemTi|
  00204	00000000	 DCD         |??_C@_1CA@IAMHBLKN@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  00208		 |$LN48@IsSystemTi|
  00208	00000000	 DCD         |dpCurSettings|
  0020c		 |$LN49@IsSystemTi|
  0020c	00000000	 DCD         |??_C@_1CO@JDCGKPJI@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  00210		 |$LN50@IsSystemTi|
  00210	51eb851f	 DCD         0x51eb851f
  00214		 |$LN51@IsSystemTi|
  00214	00000000	 DCD         |??_C@_1CM@DLBJCAA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAW?$AAe?$AAe?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  00218		 |$LN52@IsSystemTi|
  00218	00000000	 DCD         |??_C@_1CE@POBMIPOL@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAi?$AAn?$AAu?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  0021c		 |$LN53@IsSystemTi|
  0021c	00000000	 DCD         |??_C@_1BO@LJJELEAM@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAo?$AAu?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00220		 |$LN54@IsSystemTi|
  00220	00000000	 DCD         |??_C@_1BO@IGFLKAOF@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAY?$AAe?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00224		 |$LN55@IsSystemTi|
  00224	00000000	 DCD         |??_C@_1CG@NEMLEECJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00228		 |$M45029|

			 ENDP  ; |IsSystemTimeStructValid|

	EXPORT	|OEMSetRealTime|
	EXPORT	|??_C@_1DO@PPIKCHPP@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|INTERRUPTS_ENABLE|

  00000			 AREA	 |.pdata|, PDATA
|$T45062| DCD	|$LN16@OEMSetReal|
	DCD	0x40005802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@PPIKCHPP@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "3"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMSetRealTime| PROC

; 105  : {

  00000		 |$LN16@OEMSetReal|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M45059|
  00008	e1a07000	 mov         r7, r0
  0000c	e3a03101	 mov         r3, #1, 2

; 106  :     volatile BULVERDE_RTC_REG *pRTCRegs = (volatile BULVERDE_RTC_REG *) OALPAtoVA(BULVERDE_BASE_REG_PA_RTC, FALSE);

  00010	e3830609	 orr         r0, r3, #9, 12
  00014	e3a01000	 mov         r1, #0
  00018	eb000000	 bl          OALPAtoVA

; 107  :     BOOL         retVal = FALSE;
; 108  :     DayRegister  dayReg;
; 109  :     YearRegister yearReg;
; 110  :     BOOL enabled;
; 111  : 
; 112  : 
; 113  :     if (!pTime) goto Done;

  0001c	e59fa138	 ldr         r10, [pc, #0x138]
  00020	e1a08000	 mov         r8, r0
  00024	e3a09000	 mov         r9, #0
  00028	e3570000	 cmp         r7, #0
  0002c	0a00003e	 beq         |$Done$44817|

; 114  : 
; 115  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 116  :         L"+OEMSetRealTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 117  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 118  :         pTime->wSecond, pTime->wMilliseconds
; 119  :     ));

  00030	e59a3440	 ldr         r3, [r10, #0x440]
  00034	e3130040	 tst         r3, #0x40
  00038	0a00000e	 beq         |$LN8@OEMSetReal|
  0003c	e3130004	 tst         r3, #4
  00040	0a00000c	 beq         |$LN8@OEMSetReal|
  00044	e1d7e0be	 ldrh        lr, [r7, #0xE]
  00048	e1d740bc	 ldrh        r4, [r7, #0xC]
  0004c	e1d750ba	 ldrh        r5, [r7, #0xA]
  00050	e1d760b8	 ldrh        r6, [r7, #8]
  00054	e1d730b6	 ldrh        r3, [r7, #6]
  00058	e1d720b2	 ldrh        r2, [r7, #2]
  0005c	e1d710b0	 ldrh        r1, [r7]
  00060	e59f00f0	 ldr         r0, [pc, #0xF0]
  00064	e58de00c	 str         lr, [sp, #0xC]
  00068	e58d4008	 str         r4, [sp, #8]
  0006c	e58d5004	 str         r5, [sp, #4]
  00070	e58d6000	 str         r6, [sp]
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$LN8@OEMSetReal|

; 120  : 
; 121  :     if (!IsSystemTimeStructValid(pTime)) goto Done;

  00078	e1a00007	 mov         r0, r7
  0007c	eb000000	 bl          IsSystemTimeStructValid
  00080	e3500000	 cmp         r0, #0
  00084	0a000028	 beq         |$Done$44817|

; 122  : 
; 123  :     dayReg.value = 0;
; 124  :     yearReg.value = 0;
; 125  :     #define RDCRBITSSET 0x000fffff  //RDCR register bits set by the code
; 126  :     #define RYCRBITSSET 0x001fffff  //RYCR register bits set
; 127  :     
; 128  :     // Set up the format of the register variables
; 129  :     yearReg.year        = pTime->wYear;
; 130  :     yearReg.month       = pTime->wMonth;
; 131  :     yearReg.dayOfMonth  = pTime->wDay;
; 132  :     dayReg.dayOfWeek    = pTime->wDayOfWeek + 1;    // Hardware is [1,7] Structure is [0,6]
; 133  :     dayReg.hours        = pTime->wHour;
; 134  :     dayReg.minutes      = pTime->wMinute;
; 135  :     dayReg.seconds      = pTime->wSecond;

  00088	e1d730b4	 ldrh        r3, [r7, #4]
  0008c	e1d710b8	 ldrh        r1, [r7, #8]
  00090	e1d700ba	 ldrh        r0, [r7, #0xA]
  00094	e2833001	 add         r3, r3, #1
  00098	e1d7e0b0	 ldrh        lr, [r7]
  0009c	e1d750b2	 ldrh        r5, [r7, #2]
  000a0	e3a04c0f	 mov         r4, #0xF, 24
  000a4	e1a02883	 mov         r2, r3, lsl #17
  000a8	e38430ff	 orr         r3, r4, #0xFF
  000ac	e1d760b6	 ldrh        r6, [r7, #6]
  000b0	e201401f	 and         r4, r1, #0x1F
  000b4	e1d770bc	 ldrh        r7, [r7, #0xC]
  000b8	e200103f	 and         r1, r0, #0x3F
  000bc	e202080e	 and         r0, r2, #0xE, 16
  000c0	e00ee003	 and         lr, lr, r3
  000c4	e205200f	 and         r2, r5, #0xF
  000c8	e1813304	 orr         r3, r1, r4, lsl #6
  000cc	e1801303	 orr         r1, r0, r3, lsl #6
  000d0	e182e20e	 orr         lr, r2, lr, lsl #4
  000d4	e206201f	 and         r2, r6, #0x1F
  000d8	e207303f	 and         r3, r7, #0x3F

; 136  : 
; 137  :     enabled = INTERRUPTS_ENABLE(FALSE);

  000dc	e3a00000	 mov         r0, #0
  000e0	e1814003	 orr         r4, r1, r3
  000e4	e182528e	 orr         r5, r2, lr, lsl #5
  000e8	eb000000	 bl          INTERRUPTS_ENABLE

; 138  :     
; 139  :     // Set the value in the RTC and be sure to write to the day register 
; 140  :     // after the year...this will set the year register up properly.
; 141  :     pRTCRegs->rycr = yearReg.value;
; 142  :     pRTCRegs->rdcr = dayReg.value;

  000ec	e3e034ff	 mvn         r3, #0xFF, 8
  000f0	e3e014ff	 mvn         r1, #0xFF, 8
  000f4	e223260f	 eor         r2, r3, #0xF, 12
  000f8	e221160e	 eor         r1, r1, #0xE, 12
  000fc		 |$LN1@OEMSetReal|
  000fc	e5885014	 str         r5, [r8, #0x14]
  00100	e5884010	 str         r4, [r8, #0x10]

; 143  :     // Wait for RDCR & RYCR update
; 144  :     while(((pRTCRegs->rdcr & RDCRBITSSET) != dayReg.value) || ((pRTCRegs->rycr & RYCRBITSSET) != yearReg.value)) {

  00104	e5983010	 ldr         r3, [r8, #0x10]
  00108	e0033002	 and         r3, r3, r2
  0010c	e1530004	 cmp         r3, r4
  00110	1afffff9	 bne         |$LN1@OEMSetReal|
  00114	e5983014	 ldr         r3, [r8, #0x14]
  00118	e0033001	 and         r3, r3, r1
  0011c	e1530005	 cmp         r3, r5

; 145  :         pRTCRegs->rycr = yearReg.value;
; 146  :         pRTCRegs->rdcr = dayReg.value;
; 147  :     }

  00120	1afffff5	 bne         |$LN1@OEMSetReal|

; 148  : 
; 149  :     INTERRUPTS_ENABLE(enabled);

  00124	eb000000	 bl          INTERRUPTS_ENABLE

; 150  :     
; 151  :     retVal         = TRUE;

  00128	e3a09001	 mov         r9, #1
  0012c		 |$Done$44817|

; 152  : 
; 153  : Done:
; 154  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetRealTime(retVal = %d)\r\n", retVal));

  0012c	e59a3440	 ldr         r3, [r10, #0x440]
  00130	e3130040	 tst         r3, #0x40
  00134	13130004	 tstne       r3, #4
  00138	159f0014	 ldrne       r0, [pc, #0x14]
  0013c	11a01009	 movne       r1, r9
  00140	1b000000	 blne        NKDbgPrintfW

; 155  :     return(retVal);
; 156  : }

  00144	e1a00009	 mov         r0, r9
  00148	e28dd010	 add         sp, sp, #0x10
  0014c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00150	e12fff1e	 bx          lr
  00154		 |$LN17@OEMSetReal|
  00154		 |$LN18@OEMSetReal|
  00154	00000000	 DCD         |??_C@_1DO@PPIKCHPP@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00158		 |$LN19@OEMSetReal|
  00158	00000000	 DCD         |??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@|
  0015c		 |$LN20@OEMSetReal|
  0015c	00000000	 DCD         |dpCurSettings|
  00160		 |$M45060|

			 ENDP  ; |OEMSetRealTime|

	EXPORT	|OEMSetAlarmTime|
	EXPORT	|??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| [ DATA ] ; `string'
	IMPORT	|OALIntrDoneIrqs|

  00000			 AREA	 |.pdata|, PDATA
|$T45085| DCD	|$LN11@OEMSetAlar|
	DCD	0x40005e02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMSetAlarmTime| PROC

; 166  : {

  00000		 |$LN11@OEMSetAlar|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd018	 sub         sp, sp, #0x18
  00008		 |$M45082|
  00008	e1a08000	 mov         r8, r0
  0000c	e3a03101	 mov         r3, #1, 2

; 167  :     volatile BULVERDE_RTC_REG *pRTCRegs = (volatile BULVERDE_RTC_REG *) OALPAtoVA(BULVERDE_BASE_REG_PA_RTC, FALSE);

  00010	e3830609	 orr         r0, r3, #9, 12
  00014	e3a01000	 mov         r1, #0
  00018	eb000000	 bl          OALPAtoVA

; 168  :     BOOL         retVal = FALSE;
; 169  :     UINT32       irq;
; 170  :     DayRegister  dayReg;
; 171  :     YearRegister yearReg;
; 172  :     BOOL enabled;
; 173  : 
; 174  : 
; 175  :     if (!pTime) goto Done;

  0001c	e59fb150	 ldr         r11, [pc, #0x150]
  00020	e58d0010	 str         r0, [sp, #0x10]
  00024	e3a07000	 mov         r7, #0
  00028	e3580000	 cmp         r8, #0
  0002c	0a000044	 beq         |$Done$44838|

; 176  : 
; 177  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 178  :         L"+OEMSetAlarmTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 179  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 180  :         pTime->wSecond, pTime->wMilliseconds
; 181  :     ));

  00030	e59b3440	 ldr         r3, [r11, #0x440]
  00034	e3130040	 tst         r3, #0x40
  00038	0a00000e	 beq         |$LN5@OEMSetAlar|
  0003c	e3130004	 tst         r3, #4
  00040	0a00000c	 beq         |$LN5@OEMSetAlar|
  00044	e1d8e0be	 ldrh        lr, [r8, #0xE]
  00048	e1d840bc	 ldrh        r4, [r8, #0xC]
  0004c	e1d850ba	 ldrh        r5, [r8, #0xA]
  00050	e1d860b8	 ldrh        r6, [r8, #8]
  00054	e1d830b6	 ldrh        r3, [r8, #6]
  00058	e1d820b2	 ldrh        r2, [r8, #2]
  0005c	e1d810b0	 ldrh        r1, [r8]
  00060	e59f0108	 ldr         r0, [pc, #0x108]
  00064	e58de00c	 str         lr, [sp, #0xC]
  00068	e58d4008	 str         r4, [sp, #8]
  0006c	e58d5004	 str         r5, [sp, #4]
  00070	e58d6000	 str         r6, [sp]
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$LN5@OEMSetAlar|

; 182  : 
; 183  :     if (!IsSystemTimeStructValid(pTime)) goto Done;

  00078	e1a00008	 mov         r0, r8
  0007c	eb000000	 bl          IsSystemTimeStructValid
  00080	e3500000	 cmp         r0, #0
  00084	0a00002e	 beq         |$Done$44838|

; 184  : 
; 185  :     // Set up the format of the register variables
; 186  :     yearReg.year        = pTime->wYear;
; 187  :     yearReg.month       = pTime->wMonth;
; 188  :     yearReg.dayOfMonth  = pTime->wDay;
; 189  :     dayReg.dayOfWeek    = pTime->wDayOfWeek + 1;    // Hardware is [1,7] Structure is [0,6]
; 190  :     dayReg.hours        = pTime->wHour;
; 191  :     dayReg.minutes      = pTime->wMinute;
; 192  :     dayReg.seconds      = pTime->wSecond;

  00088	e1d830b4	 ldrh        r3, [r8, #4]
  0008c	e1d810b8	 ldrh        r1, [r8, #8]
  00090	e1d800ba	 ldrh        r0, [r8, #0xA]
  00094	e1d850b0	 ldrh        r5, [r8]
  00098	e2833001	 add         r3, r3, #1
  0009c	e1d860b2	 ldrh        r6, [r8, #2]
  000a0	e3a02c0f	 mov         r2, #0xF, 24
  000a4	e1a03883	 mov         r3, r3, lsl #17
  000a8	e1d8a0bc	 ldrh        r10, [r8, #0xC]
  000ac	e1d870b6	 ldrh        r7, [r8, #6]
  000b0	e38220ff	 orr         r2, r2, #0xFF
  000b4	e201401f	 and         r4, r1, #0x1F
  000b8	e200003f	 and         r0, r0, #0x3F
  000bc	e203e80e	 and         lr, r3, #0xE, 16
  000c0	e1803304	 orr         r3, r0, r4, lsl #6
  000c4	e59d8014	 ldr         r8, [sp, #0x14]
  000c8	e59d9014	 ldr         r9, [sp, #0x14]
  000cc	e0051002	 and         r1, r5, r2
  000d0	e206200f	 and         r2, r6, #0xF
  000d4	e18e4303	 orr         r4, lr, r3, lsl #6
  000d8	e3a064ff	 mov         r6, #0xFF, 8
  000dc	e20a303f	 and         r3, r10, #0x3F
  000e0	e1825201	 orr         r5, r2, r1, lsl #4
  000e4	e207001f	 and         r0, r7, #0x1F
  000e8	e386e60e	 orr         lr, r6, #0xE, 12
  000ec	e386260f	 orr         r2, r6, #0xF, 12
  000f0	e1841003	 orr         r1, r4, r3
  000f4	e1804285	 orr         r4, r0, r5, lsl #5
  000f8	e0093002	 and         r3, r9, r2
  000fc	e008e00e	 and         lr, r8, lr

; 193  : 
; 194  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00100	e3a00000	 mov         r0, #0
  00104	e1815003	 orr         r5, r1, r3
  00108	e184400e	 orr         r4, r4, lr
  0010c	eb000000	 bl          INTERRUPTS_ENABLE

; 195  : 
; 196  :     // Set the value in the RTC and be sure to write to the day register 
; 197  :     // after the year...this will set the year register up properly.
; 198  :     pRTCRegs->ryar1 = yearReg.value;
; 199  :     pRTCRegs->rdar1 = dayReg.value;
; 200  : 
; 201  :     INTERRUPTS_ENABLE(enabled);

  00110	e59d6010	 ldr         r6, [sp, #0x10]
  00114	e586401c	 str         r4, [r6, #0x1C]
  00118	e5865018	 str         r5, [r6, #0x18]
  0011c	eb000000	 bl          INTERRUPTS_ENABLE

; 202  : 
; 203  :     retVal          = TRUE;
; 204  : 
; 205  : 
; 206  :     // Enable the RTC wristwatch1 alarm
; 207  :     // (this will also clear the RDAL1 bit if it is set)
; 208  :     pRTCRegs->rtsr  |= XLLP_RTSR_RDALE1;

  00120	e5963008	 ldr         r3, [r6, #8]

; 209  : 
; 210  :     // Enable the RTC alarm interrupt
; 211  :     irq = IRQ_RTCALARM;

  00124	e3a0201f	 mov         r2, #0x1F

; 212  :     OALIntrDoneIrqs(1, &irq);

  00128	e28d1014	 add         r1, sp, #0x14
  0012c	e3833020	 orr         r3, r3, #0x20
  00130	e5863008	 str         r3, [r6, #8]
  00134	e3a00001	 mov         r0, #1
  00138	e58d2014	 str         r2, [sp, #0x14]
  0013c	eb000000	 bl          OALIntrDoneIrqs

; 213  :     retVal = TRUE;

  00140	e3a07001	 mov         r7, #1
  00144		 |$Done$44838|

; 214  : 
; 215  : Done:
; 216  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetAlarmTime(rc = %d)\r\n", retVal));

  00144	e59b3440	 ldr         r3, [r11, #0x440]
  00148	e3130040	 tst         r3, #0x40
  0014c	13130004	 tstne       r3, #4
  00150	159f0014	 ldrne       r0, [pc, #0x14]
  00154	11a01007	 movne       r1, r7
  00158	1b000000	 blne        NKDbgPrintfW

; 217  :     return(retVal);
; 218  : }

  0015c	e1a00007	 mov         r0, r7
  00160	e28dd018	 add         sp, sp, #0x18
  00164	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00168	e12fff1e	 bx          lr
  0016c		 |$LN12@OEMSetAlar|
  0016c		 |$LN13@OEMSetAlar|
  0016c	00000000	 DCD         |??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00170		 |$LN14@OEMSetAlar|
  00170	00000000	 DCD         |??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@|
  00174		 |$LN15@OEMSetAlar|
  00174	00000000	 DCD         |dpCurSettings|
  00178		 |$M45083|

			 ENDP  ; |OEMSetAlarmTime|

	EXPORT	|OALIoCtlHalInitRTC|
	EXPORT	|??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@KJHHKJFF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45109| DCD	|$LN15@OALIoCtlHa|
	DCD	0x40002b01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@KJHHKJFF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, "V", 0x0, "A"
	DCB	0x0, "L", 0x0, "I", 0x0, "D", 0x0, " ", 0x0, "P", 0x0, "A"
	DCB	0x0, "R", 0x0, "A", 0x0, "M", 0x0, "E", 0x0, "T", 0x0, "E"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalInitRTC| PROC

; 233  : ) {

  00000		 |$LN15@OALIoCtlHa|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M45106|
  00004	e1a07002	 mov         r7, r2
  00008	e1a06001	 mov         r6, r1

; 234  :     BOOL rc = FALSE;
; 235  :     SYSTEMTIME *pTime = (SYSTEMTIME*)pInpBuffer;
; 236  : 
; 237  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlHalInitRTC(...)\r\n"));

  0000c	e59f4094	 ldr         r4, [pc, #0x94]
  00010	e3a05000	 mov         r5, #0
  00014	e5943440	 ldr         r3, [r4, #0x440]
  00018	e3130a01	 tst         r3, #1, 20
  0001c	0a000004	 beq         |$LN6@OALIoCtlHa|
  00020	e3130004	 tst         r3, #4
  00024	0a000002	 beq         |$LN6@OALIoCtlHa|
  00028	e59f0074	 ldr         r0, [pc, #0x74]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e5943440	 ldr         r3, [r4, #0x440]
  00034		 |$LN6@OALIoCtlHa|

; 238  : 
; 239  :     if(pOutSize) {

  00034	e59d0018	 ldr         r0, [sp, #0x18]
  00038	e3500000	 cmp         r0, #0

; 240  :         *pOutSize = 0;

  0003c	13a03000	 movne       r3, #0
  00040	15803000	 strne       r3, [r0]
  00044	15943440	 ldrne       r3, [r4, #0x440]

; 241  :     }
; 242  : 
; 243  :     // Validate inputs
; 244  :     if (pInpBuffer == NULL || inpSize < sizeof(SYSTEMTIME)) {

  00048	e3560000	 cmp         r6, #0
  0004c	0a000005	 beq         |$LN1@OALIoCtlHa|
  00050	e3570010	 cmp         r7, #0x10
  00054	3a000003	 bcc         |$LN1@OALIoCtlHa|

; 248  :         goto cleanUp;
; 249  :     }
; 250  : 
; 251  :     rc = OEMSetRealTime(pTime);

  00058	e1a00006	 mov         r0, r6
  0005c	eb000000	 bl          OEMSetRealTime
  00060	e1a05000	 mov         r5, r0
  00064	ea000003	 b           |$LN12@OALIoCtlHa|
  00068		 |$LN1@OALIoCtlHa|

; 245  :         OALMSG(OAL_ERROR, (
; 246  :             L"ERROR: OALIoCtlHalInitRTC: INVALID PARAMETER\r\n"
; 247  :         ));

  00068	e3130001	 tst         r3, #1
  0006c	0a000002	 beq         |$cleanUp$44869|
  00070	e59f0028	 ldr         r0, [pc, #0x28]
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$LN12@OALIoCtlHa|
  00078	e5943440	 ldr         r3, [r4, #0x440]
  0007c		 |$cleanUp$44869|

; 252  : 
; 253  : cleanUp:
; 254  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"-OALIoCtlHalInitRTC(rc = %d)\r\n", rc));

  0007c	e3130a01	 tst         r3, #1, 20
  00080	13130004	 tstne       r3, #4
  00084	159f0010	 ldrne       r0, [pc, #0x10]
  00088	11a01005	 movne       r1, r5
  0008c	1b000000	 blne        NKDbgPrintfW

; 255  :     return rc;
; 256  : }

  00090	e1a00005	 mov         r0, r5
  00094	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN16@OALIoCtlHa|
  0009c		 |$LN17@OALIoCtlHa|
  0009c	00000000	 DCD         |??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000a0		 |$LN18@OALIoCtlHa|
  000a0	00000000	 DCD         |??_C@_1FO@KJHHKJFF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL@|
  000a4		 |$LN19@OALIoCtlHa|
  000a4	00000000	 DCD         |??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000a8		 |$LN20@OALIoCtlHa|
  000a8	00000000	 DCD         |dpCurSettings|
  000ac		 |$M45107|

			 ENDP  ; |OALIoCtlHalInitRTC|

	END
