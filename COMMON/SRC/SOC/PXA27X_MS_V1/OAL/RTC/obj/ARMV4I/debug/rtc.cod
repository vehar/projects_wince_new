; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\PXA27X_MS_V1\OAL\RTC\rtc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1DO@ODEGBKEH@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@JJILIKOH@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAp?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMGetRealTime|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|OALPAtoVA|

  00000			 AREA	 |.pdata|, PDATA
|$T44921| DCD	|$LN13@OEMGetReal|
	DCD	0x40008c04
; File c:\wince600\platform\common\src\soc\pxa27x_ms_v1\oal\rtc\rtc.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@ODEGBKEH@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JJILIKOH@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAp?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "p", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMGetRealTime| PROC

; 64   : {

  00000		 |$LN13@OEMGetReal|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M44918|

; 65   :     volatile BULVERDE_RTC_REG *pRTCRegs = (volatile BULVERDE_RTC_REG *) OALPAtoVA(BULVERDE_BASE_REG_PA_RTC, FALSE);

  00010	e3a01000	 mov         r1, #0
  00014	e3a00101	 mov         r0, #1, 2
  00018	e3800609	 orr         r0, r0, #9, 12
  0001c	eb000000	 bl          OALPAtoVA
  00020	e58d0018	 str         r0, [sp, #0x18]
  00024	e59d3018	 ldr         r3, [sp, #0x18]
  00028	e58d300c	 str         r3, [sp, #0xC]

; 66   :     DayRegister  dayReg;
; 67   :     YearRegister yearReg;
; 68   :     BOOL     retVal  = FALSE;

  0002c	e3a03000	 mov         r3, #0
  00030	e58d3000	 str         r3, [sp]

; 69   :     WORD     seconds = 0;

  00034	e3a03000	 mov         r3, #0
  00038	e1cd30b4	 strh        r3, [sp, #4]

; 70   : 
; 71   :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OEMGetRealTime(pTime = 0x%x)\r\n", pTime));

  0003c	e59f31e4	 ldr         r3, [pc, #0x1E4]
  00040	e5933440	 ldr         r3, [r3, #0x440]
  00044	e3130040	 tst         r3, #0x40
  00048	0a000009	 beq         |$LN7@OEMGetReal|
  0004c	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00050	e5933440	 ldr         r3, [r3, #0x440]
  00054	e3130004	 tst         r3, #4
  00058	0a000005	 beq         |$LN7@OEMGetReal|
  0005c	e59d102c	 ldr         r1, [sp, #0x2C]
  00060	e59f01c4	 ldr         r0, [pc, #0x1C4]
  00064	eb000000	 bl          NKDbgPrintfW
  00068	e3a03001	 mov         r3, #1
  0006c	e58d301c	 str         r3, [sp, #0x1C]
  00070	ea000001	 b           |$LN8@OEMGetReal|
  00074		 |$LN7@OEMGetReal|
  00074	e3a03000	 mov         r3, #0
  00078	e58d301c	 str         r3, [sp, #0x1C]
  0007c		 |$LN8@OEMGetReal|

; 72   :     if (!pTime) goto Done;

  0007c	e59d302c	 ldr         r3, [sp, #0x2C]
  00080	e3530000	 cmp         r3, #0
  00084	1a000000	 bne         |$LN4@OEMGetReal|
  00088	ea00004f	 b           |$Done$44775|
  0008c		 |$LN4@OEMGetReal|
  0008c		 |$LN3@OEMGetReal|

; 73   : 
; 74   :     do
; 75   :     {
; 76   :         // Get register values
; 77   :         dayReg.value  = (UINT32)pRTCRegs->rdcr;

  0008c	e59d300c	 ldr         r3, [sp, #0xC]
  00090	e2833010	 add         r3, r3, #0x10
  00094	e5933000	 ldr         r3, [r3]
  00098	e58d3008	 str         r3, [sp, #8]

; 78   :         seconds = dayReg.seconds;

  0009c	e59d3008	 ldr         r3, [sp, #8]
  000a0	e203303f	 and         r3, r3, #0x3F
  000a4	e1a03803	 mov         r3, r3, lsl #16
  000a8	e1a03823	 mov         r3, r3, lsr #16
  000ac	e1cd30b4	 strh        r3, [sp, #4]

; 79   :         yearReg.value = (UINT32)pRTCRegs->rycr; 

  000b0	e59d300c	 ldr         r3, [sp, #0xC]
  000b4	e2833014	 add         r3, r3, #0x14
  000b8	e5933000	 ldr         r3, [r3]
  000bc	e58d3010	 str         r3, [sp, #0x10]

; 80   :     } while (seconds != (pRTCRegs->rdcr & 0x3F));

  000c0	e1dd20b4	 ldrh        r2, [sp, #4]
  000c4	e59d300c	 ldr         r3, [sp, #0xC]
  000c8	e2833010	 add         r3, r3, #0x10
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e203303f	 and         r3, r3, #0x3F
  000d4	e1520003	 cmp         r2, r3
  000d8	1affffeb	 bne         |$LN3@OEMGetReal|

; 81   : 
; 82   :     // Fill in the SYSTEMTIME structure with the appropriate values
; 83   :     pTime->wYear      = yearReg.year;

  000dc	e59d3010	 ldr         r3, [sp, #0x10]
  000e0	e1a03583	 mov         r3, r3, lsl #11
  000e4	e1a03a23	 mov         r3, r3, lsr #20
  000e8	e1a02803	 mov         r2, r3, lsl #16
  000ec	e1a02822	 mov         r2, r2, lsr #16
  000f0	e59d302c	 ldr         r3, [sp, #0x2C]
  000f4	e1c320b0	 strh        r2, [r3]

; 84   :     pTime->wMonth     = yearReg.month;

  000f8	e59d3010	 ldr         r3, [sp, #0x10]
  000fc	e1a03b83	 mov         r3, r3, lsl #23
  00100	e1a01e23	 mov         r1, r3, lsr #28
  00104	e59d302c	 ldr         r3, [sp, #0x2C]
  00108	e2832002	 add         r2, r3, #2
  0010c	e1a03801	 mov         r3, r1, lsl #16
  00110	e1a03823	 mov         r3, r3, lsr #16
  00114	e1c230b0	 strh        r3, [r2]

; 85   :     pTime->wDay       = yearReg.dayOfMonth;

  00118	e59d3010	 ldr         r3, [sp, #0x10]
  0011c	e203101f	 and         r1, r3, #0x1F
  00120	e59d302c	 ldr         r3, [sp, #0x2C]
  00124	e2832006	 add         r2, r3, #6
  00128	e1a03801	 mov         r3, r1, lsl #16
  0012c	e1a03823	 mov         r3, r3, lsr #16
  00130	e1c230b0	 strh        r3, [r2]

; 86   :     pTime->wDayOfWeek = dayReg.dayOfWeek - 1;   // Hardware is [1,7] Structure is [0,6]

  00134	e59d3008	 ldr         r3, [sp, #8]
  00138	e1a03603	 mov         r3, r3, lsl #12
  0013c	e1a03ea3	 mov         r3, r3, lsr #29
  00140	e2431001	 sub         r1, r3, #1
  00144	e59d302c	 ldr         r3, [sp, #0x2C]
  00148	e2832004	 add         r2, r3, #4
  0014c	e1a03801	 mov         r3, r1, lsl #16
  00150	e1a03823	 mov         r3, r3, lsr #16
  00154	e1c230b0	 strh        r3, [r2]

; 87   :     pTime->wHour      = dayReg.hours;

  00158	e59d3008	 ldr         r3, [sp, #8]
  0015c	e1a03783	 mov         r3, r3, lsl #15
  00160	e1a01da3	 mov         r1, r3, lsr #27
  00164	e59d302c	 ldr         r3, [sp, #0x2C]
  00168	e2832008	 add         r2, r3, #8
  0016c	e1a03801	 mov         r3, r1, lsl #16
  00170	e1a03823	 mov         r3, r3, lsr #16
  00174	e1c230b0	 strh        r3, [r2]

; 88   :     pTime->wMinute    = dayReg.minutes;

  00178	e59d3008	 ldr         r3, [sp, #8]
  0017c	e1a03a03	 mov         r3, r3, lsl #20
  00180	e1a01d23	 mov         r1, r3, lsr #26
  00184	e59d302c	 ldr         r3, [sp, #0x2C]
  00188	e283200a	 add         r2, r3, #0xA
  0018c	e1a03801	 mov         r3, r1, lsl #16
  00190	e1a03823	 mov         r3, r3, lsr #16
  00194	e1c230b0	 strh        r3, [r2]

; 89   :     pTime->wSecond    = dayReg.seconds;

  00198	e59d3008	 ldr         r3, [sp, #8]
  0019c	e203103f	 and         r1, r3, #0x3F
  001a0	e59d302c	 ldr         r3, [sp, #0x2C]
  001a4	e283200c	 add         r2, r3, #0xC
  001a8	e1a03801	 mov         r3, r1, lsl #16
  001ac	e1a03823	 mov         r3, r3, lsr #16
  001b0	e1c230b0	 strh        r3, [r2]

; 90   :     pTime->wMilliseconds = 0;

  001b4	e59d302c	 ldr         r3, [sp, #0x2C]
  001b8	e283200e	 add         r2, r3, #0xE
  001bc	e3a03000	 mov         r3, #0
  001c0	e1c230b0	 strh        r3, [r2]

; 91   :     retVal = TRUE;

  001c4	e3a03001	 mov         r3, #1
  001c8	e58d3000	 str         r3, [sp]
  001cc		 |$Done$44775|

; 92   : 
; 93   : Done:
; 94   :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMGetRealTime(retVal = %d)\r\n", retVal));

  001cc	e59f3054	 ldr         r3, [pc, #0x54]
  001d0	e5933440	 ldr         r3, [r3, #0x440]
  001d4	e3130040	 tst         r3, #0x40
  001d8	0a000009	 beq         |$LN9@OEMGetReal|
  001dc	e59f3044	 ldr         r3, [pc, #0x44]
  001e0	e5933440	 ldr         r3, [r3, #0x440]
  001e4	e3130004	 tst         r3, #4
  001e8	0a000005	 beq         |$LN9@OEMGetReal|
  001ec	e59d1000	 ldr         r1, [sp]
  001f0	e59f002c	 ldr         r0, [pc, #0x2C]
  001f4	eb000000	 bl          NKDbgPrintfW
  001f8	e3a03001	 mov         r3, #1
  001fc	e58d3020	 str         r3, [sp, #0x20]
  00200	ea000001	 b           |$LN10@OEMGetReal|
  00204		 |$LN9@OEMGetReal|
  00204	e3a03000	 mov         r3, #0
  00208	e58d3020	 str         r3, [sp, #0x20]
  0020c		 |$LN10@OEMGetReal|

; 95   :     return(retVal);

  0020c	e59d3000	 ldr         r3, [sp]
  00210	e58d3014	 str         r3, [sp, #0x14]

; 96   : }

  00214	e59d0014	 ldr         r0, [sp, #0x14]
  00218	e28dd024	 add         sp, sp, #0x24
  0021c	e89d6000	 ldmia       sp, {sp, lr}
  00220	e12fff1e	 bx          lr
  00224		 |$LN14@OEMGetReal|
  00224		 |$LN15@OEMGetReal|
  00224	00000000	 DCD         |??_C@_1DO@ODEGBKEH@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00228		 |$LN16@OEMGetReal|
  00228	00000000	 DCD         |dpCurSettings|
  0022c		 |$LN17@OEMGetReal|
  0022c	00000000	 DCD         |??_C@_1EA@JJILIKOH@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAp?$AAT?$AAi?$AAm?$AAe?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00230		 |$M44919|

			 ENDP  ; |OEMGetRealTime|

	EXPORT	|??_C@_1DO@PPIKCHPP@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|OEMSetRealTime|
	IMPORT	|INTERRUPTS_ENABLE|

  00008			 AREA	 |.pdata|, PDATA
|$T44939| DCD	|$LN14@OEMSetReal|
	DCD	0x4000cf04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@PPIKCHPP@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "V", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "3"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00230			 AREA	 |.text|, CODE, ARM

  00230		 |OEMSetRealTime| PROC

; 105  : {

  00230		 |$LN14@OEMSetReal|
  00230	e1a0c00d	 mov         r12, sp
  00234	e92d0001	 stmdb       sp!, {r0}
  00238	e92d5000	 stmdb       sp!, {r12, lr}
  0023c	e24dd04c	 sub         sp, sp, #0x4C
  00240		 |$M44936|

; 106  :     volatile BULVERDE_RTC_REG *pRTCRegs = (volatile BULVERDE_RTC_REG *) OALPAtoVA(BULVERDE_BASE_REG_PA_RTC, FALSE);

  00240	e3a01000	 mov         r1, #0
  00244	e3a00101	 mov         r0, #1, 2
  00248	e3800609	 orr         r0, r0, #9, 12
  0024c	eb000000	 bl          OALPAtoVA
  00250	e58d0038	 str         r0, [sp, #0x38]
  00254	e59d3038	 ldr         r3, [sp, #0x38]
  00258	e58d3018	 str         r3, [sp, #0x18]

; 107  :     BOOL         retVal = FALSE;

  0025c	e3a03000	 mov         r3, #0
  00260	e58d3010	 str         r3, [sp, #0x10]

; 108  :     DayRegister  dayReg;
; 109  :     YearRegister yearReg;
; 110  :     BOOL enabled;
; 111  : 
; 112  : 
; 113  :     if (!pTime) goto Done;

  00264	e59d3054	 ldr         r3, [sp, #0x54]
  00268	e3530000	 cmp         r3, #0
  0026c	1a000000	 bne         |$LN5@OEMSetReal|
  00270	ea0000a4	 b           |$Done$44793|
  00274		 |$LN5@OEMSetReal|

; 114  : 
; 115  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 116  :         L"+OEMSetRealTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 117  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 118  :         pTime->wSecond, pTime->wMilliseconds
; 119  :     ));

  00274	e59f32e8	 ldr         r3, [pc, #0x2E8]
  00278	e5933440	 ldr         r3, [r3, #0x440]
  0027c	e3130040	 tst         r3, #0x40
  00280	0a000020	 beq         |$LN8@OEMSetReal|
  00284	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00288	e5933440	 ldr         r3, [r3, #0x440]
  0028c	e3130004	 tst         r3, #4
  00290	0a00001c	 beq         |$LN8@OEMSetReal|
  00294	e59d3054	 ldr         r3, [sp, #0x54]
  00298	e283300e	 add         r3, r3, #0xE
  0029c	e1d330b0	 ldrh        r3, [r3]
  002a0	e58d300c	 str         r3, [sp, #0xC]
  002a4	e59d3054	 ldr         r3, [sp, #0x54]
  002a8	e283300c	 add         r3, r3, #0xC
  002ac	e1d330b0	 ldrh        r3, [r3]
  002b0	e58d3008	 str         r3, [sp, #8]
  002b4	e59d3054	 ldr         r3, [sp, #0x54]
  002b8	e283300a	 add         r3, r3, #0xA
  002bc	e1d330b0	 ldrh        r3, [r3]
  002c0	e58d3004	 str         r3, [sp, #4]
  002c4	e59d3054	 ldr         r3, [sp, #0x54]
  002c8	e2833008	 add         r3, r3, #8
  002cc	e1d330b0	 ldrh        r3, [r3]
  002d0	e58d3000	 str         r3, [sp]
  002d4	e59d3054	 ldr         r3, [sp, #0x54]
  002d8	e2833006	 add         r3, r3, #6
  002dc	e1d330b0	 ldrh        r3, [r3]
  002e0	e59d2054	 ldr         r2, [sp, #0x54]
  002e4	e2822002	 add         r2, r2, #2
  002e8	e1d220b0	 ldrh        r2, [r2]
  002ec	e59d1054	 ldr         r1, [sp, #0x54]
  002f0	e1d110b0	 ldrh        r1, [r1]
  002f4	e59f026c	 ldr         r0, [pc, #0x26C]
  002f8	eb000000	 bl          NKDbgPrintfW
  002fc	e3a03001	 mov         r3, #1
  00300	e58d303c	 str         r3, [sp, #0x3C]
  00304	ea000001	 b           |$LN9@OEMSetReal|
  00308		 |$LN8@OEMSetReal|
  00308	e3a03000	 mov         r3, #0
  0030c	e58d303c	 str         r3, [sp, #0x3C]
  00310		 |$LN9@OEMSetReal|

; 120  : 
; 121  :     if (!IsSystemTimeStructValid(pTime)) goto Done;

  00310	e59d0054	 ldr         r0, [sp, #0x54]
  00314	eb000000	 bl          IsSystemTimeStructValid
  00318	e58d0040	 str         r0, [sp, #0x40]
  0031c	e59d3040	 ldr         r3, [sp, #0x40]
  00320	e3530000	 cmp         r3, #0
  00324	1a000000	 bne         |$LN4@OEMSetReal|
  00328	ea000076	 b           |$Done$44793|
  0032c		 |$LN4@OEMSetReal|

; 122  : 
; 123  :     dayReg.value = 0;

  0032c	e3a03000	 mov         r3, #0
  00330	e58d3014	 str         r3, [sp, #0x14]

; 124  :     yearReg.value = 0;

  00334	e3a03000	 mov         r3, #0
  00338	e58d3020	 str         r3, [sp, #0x20]

; 125  :     #define RDCRBITSSET 0x000fffff  //RDCR register bits set by the code
; 126  :     #define RYCRBITSSET 0x001fffff  //RYCR register bits set
; 127  :     
; 128  :     // Set up the format of the register variables
; 129  :     yearReg.year        = pTime->wYear;

  0033c	e59d3054	 ldr         r3, [sp, #0x54]
  00340	e1d310b0	 ldrh        r1, [r3]
  00344	e59d2020	 ldr         r2, [sp, #0x20]
  00348	e3e0397f	 mvn         r3, #0x7F, 18
  0034c	e2233c3e	 eor         r3, r3, #0x3E, 24
  00350	e0022003	 and         r2, r2, r3
  00354	e3a03c0f	 mov         r3, #0xF, 24
  00358	e38330ff	 orr         r3, r3, #0xFF
  0035c	e0013003	 and         r3, r1, r3
  00360	e1a03483	 mov         r3, r3, lsl #9
  00364	e1823003	 orr         r3, r2, r3
  00368	e58d3020	 str         r3, [sp, #0x20]

; 130  :     yearReg.month       = pTime->wMonth;

  0036c	e59d3054	 ldr         r3, [sp, #0x54]
  00370	e2833002	 add         r3, r3, #2
  00374	e1d310b0	 ldrh        r1, [r3]
  00378	e59d2020	 ldr         r2, [sp, #0x20]
  0037c	e3e03e1e	 mvn         r3, #0x1E, 28
  00380	e0022003	 and         r2, r2, r3
  00384	e201300f	 and         r3, r1, #0xF
  00388	e1a03283	 mov         r3, r3, lsl #5
  0038c	e1823003	 orr         r3, r2, r3
  00390	e58d3020	 str         r3, [sp, #0x20]

; 131  :     yearReg.dayOfMonth  = pTime->wDay;

  00394	e59d3054	 ldr         r3, [sp, #0x54]
  00398	e2833006	 add         r3, r3, #6
  0039c	e1d310b0	 ldrh        r1, [r3]
  003a0	e59d2020	 ldr         r2, [sp, #0x20]
  003a4	e3e0301f	 mvn         r3, #0x1F
  003a8	e0022003	 and         r2, r2, r3
  003ac	e201301f	 and         r3, r1, #0x1F
  003b0	e1823003	 orr         r3, r2, r3
  003b4	e58d3020	 str         r3, [sp, #0x20]

; 132  :     dayReg.dayOfWeek    = pTime->wDayOfWeek + 1;    // Hardware is [1,7] Structure is [0,6]

  003b8	e59d3054	 ldr         r3, [sp, #0x54]
  003bc	e2833004	 add         r3, r3, #4
  003c0	e1d330b0	 ldrh        r3, [r3]
  003c4	e2831001	 add         r1, r3, #1
  003c8	e59d2014	 ldr         r2, [sp, #0x14]
  003cc	e3e0380e	 mvn         r3, #0xE, 16
  003d0	e0022003	 and         r2, r2, r3
  003d4	e2013007	 and         r3, r1, #7
  003d8	e1a03883	 mov         r3, r3, lsl #17
  003dc	e1823003	 orr         r3, r2, r3
  003e0	e58d3014	 str         r3, [sp, #0x14]

; 133  :     dayReg.hours        = pTime->wHour;

  003e4	e59d3054	 ldr         r3, [sp, #0x54]
  003e8	e2833008	 add         r3, r3, #8
  003ec	e1d310b0	 ldrh        r1, [r3]
  003f0	e59d2014	 ldr         r2, [sp, #0x14]
  003f4	e3e03a1f	 mvn         r3, #0x1F, 20
  003f8	e0022003	 and         r2, r2, r3
  003fc	e201301f	 and         r3, r1, #0x1F
  00400	e1a03603	 mov         r3, r3, lsl #12
  00404	e1823003	 orr         r3, r2, r3
  00408	e58d3014	 str         r3, [sp, #0x14]

; 134  :     dayReg.minutes      = pTime->wMinute;

  0040c	e59d3054	 ldr         r3, [sp, #0x54]
  00410	e283300a	 add         r3, r3, #0xA
  00414	e1d310b0	 ldrh        r1, [r3]
  00418	e59d2014	 ldr         r2, [sp, #0x14]
  0041c	e3e03d3f	 mvn         r3, #0x3F, 26
  00420	e0022003	 and         r2, r2, r3
  00424	e201303f	 and         r3, r1, #0x3F
  00428	e1a03303	 mov         r3, r3, lsl #6
  0042c	e1823003	 orr         r3, r2, r3
  00430	e58d3014	 str         r3, [sp, #0x14]

; 135  :     dayReg.seconds      = pTime->wSecond;

  00434	e59d3054	 ldr         r3, [sp, #0x54]
  00438	e283300c	 add         r3, r3, #0xC
  0043c	e1d310b0	 ldrh        r1, [r3]
  00440	e59d2014	 ldr         r2, [sp, #0x14]
  00444	e3e0303f	 mvn         r3, #0x3F
  00448	e0022003	 and         r2, r2, r3
  0044c	e201303f	 and         r3, r1, #0x3F
  00450	e1823003	 orr         r3, r2, r3
  00454	e58d3014	 str         r3, [sp, #0x14]

; 136  : 
; 137  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00458	e3a00000	 mov         r0, #0
  0045c	eb000000	 bl          INTERRUPTS_ENABLE
  00460	e58d0044	 str         r0, [sp, #0x44]
  00464	e59d3044	 ldr         r3, [sp, #0x44]
  00468	e58d301c	 str         r3, [sp, #0x1C]

; 138  :     
; 139  :     // Set the value in the RTC and be sure to write to the day register 
; 140  :     // after the year...this will set the year register up properly.
; 141  :     pRTCRegs->rycr = yearReg.value;

  0046c	e59d3018	 ldr         r3, [sp, #0x18]
  00470	e2832014	 add         r2, r3, #0x14
  00474	e59d3020	 ldr         r3, [sp, #0x20]
  00478	e5823000	 str         r3, [r2]

; 142  :     pRTCRegs->rdcr = dayReg.value;

  0047c	e59d3018	 ldr         r3, [sp, #0x18]
  00480	e2832010	 add         r2, r3, #0x10
  00484	e59d3014	 ldr         r3, [sp, #0x14]
  00488	e5823000	 str         r3, [r2]
  0048c		 |$LN3@OEMSetReal|

; 143  :     // Wait for RDCR & RYCR update
; 144  :     while(((pRTCRegs->rdcr & RDCRBITSSET) != dayReg.value) || ((pRTCRegs->rycr & RYCRBITSSET) != yearReg.value)) {

  0048c	e59d3018	 ldr         r3, [sp, #0x18]
  00490	e2833010	 add         r3, r3, #0x10
  00494	e5932000	 ldr         r2, [r3]
  00498	e3e034ff	 mvn         r3, #0xFF, 8
  0049c	e223360f	 eor         r3, r3, #0xF, 12
  004a0	e0022003	 and         r2, r2, r3
  004a4	e59d3014	 ldr         r3, [sp, #0x14]
  004a8	e1520003	 cmp         r2, r3
  004ac	1a000008	 bne         |$LN1@OEMSetReal|
  004b0	e59d3018	 ldr         r3, [sp, #0x18]
  004b4	e2833014	 add         r3, r3, #0x14
  004b8	e5932000	 ldr         r2, [r3]
  004bc	e3e034ff	 mvn         r3, #0xFF, 8
  004c0	e223360e	 eor         r3, r3, #0xE, 12
  004c4	e0022003	 and         r2, r2, r3
  004c8	e59d3020	 ldr         r3, [sp, #0x20]
  004cc	e1520003	 cmp         r2, r3
  004d0	0a000008	 beq         |$LN2@OEMSetReal|
  004d4		 |$LN1@OEMSetReal|

; 145  :         pRTCRegs->rycr = yearReg.value;

  004d4	e59d3018	 ldr         r3, [sp, #0x18]
  004d8	e2832014	 add         r2, r3, #0x14
  004dc	e59d3020	 ldr         r3, [sp, #0x20]
  004e0	e5823000	 str         r3, [r2]

; 146  :         pRTCRegs->rdcr = dayReg.value;

  004e4	e59d3018	 ldr         r3, [sp, #0x18]
  004e8	e2832010	 add         r2, r3, #0x10
  004ec	e59d3014	 ldr         r3, [sp, #0x14]
  004f0	e5823000	 str         r3, [r2]

; 147  :     }

  004f4	eaffffe4	 b           |$LN3@OEMSetReal|
  004f8		 |$LN2@OEMSetReal|

; 148  : 
; 149  :     INTERRUPTS_ENABLE(enabled);

  004f8	e59d001c	 ldr         r0, [sp, #0x1C]
  004fc	eb000000	 bl          INTERRUPTS_ENABLE

; 150  :     
; 151  :     retVal         = TRUE;

  00500	e3a03001	 mov         r3, #1
  00504	e58d3010	 str         r3, [sp, #0x10]
  00508		 |$Done$44793|

; 152  : 
; 153  : Done:
; 154  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetRealTime(retVal = %d)\r\n", retVal));

  00508	e59f3054	 ldr         r3, [pc, #0x54]
  0050c	e5933440	 ldr         r3, [r3, #0x440]
  00510	e3130040	 tst         r3, #0x40
  00514	0a000009	 beq         |$LN10@OEMSetReal|
  00518	e59f3044	 ldr         r3, [pc, #0x44]
  0051c	e5933440	 ldr         r3, [r3, #0x440]
  00520	e3130004	 tst         r3, #4
  00524	0a000005	 beq         |$LN10@OEMSetReal|
  00528	e59d1010	 ldr         r1, [sp, #0x10]
  0052c	e59f002c	 ldr         r0, [pc, #0x2C]
  00530	eb000000	 bl          NKDbgPrintfW
  00534	e3a03001	 mov         r3, #1
  00538	e58d3048	 str         r3, [sp, #0x48]
  0053c	ea000001	 b           |$LN11@OEMSetReal|
  00540		 |$LN10@OEMSetReal|
  00540	e3a03000	 mov         r3, #0
  00544	e58d3048	 str         r3, [sp, #0x48]
  00548		 |$LN11@OEMSetReal|

; 155  :     return(retVal);

  00548	e59d3010	 ldr         r3, [sp, #0x10]
  0054c	e58d3034	 str         r3, [sp, #0x34]

; 156  : }

  00550	e59d0034	 ldr         r0, [sp, #0x34]
  00554	e28dd04c	 add         sp, sp, #0x4C
  00558	e89d6000	 ldmia       sp, {sp, lr}
  0055c	e12fff1e	 bx          lr
  00560		 |$LN15@OEMSetReal|
  00560		 |$LN16@OEMSetReal|
  00560	00000000	 DCD         |??_C@_1DO@PPIKCHPP@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00564		 |$LN17@OEMSetReal|
  00564	00000000	 DCD         |dpCurSettings|
  00568		 |$LN18@OEMSetReal|
  00568	00000000	 DCD         |??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@|
  0056c		 |$M44937|

			 ENDP  ; |OEMSetRealTime|

	EXPORT	|??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| [ DATA ] ; `string'
	EXPORT	|OEMSetAlarmTime|
	IMPORT	|OALIntrDoneIrqs|

  00010			 AREA	 |.pdata|, PDATA
|$T44957| DCD	|$LN11@OEMSetAlar|
	DCD	0x4000be04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  0056c			 AREA	 |.text|, CODE, ARM

  0056c		 |OEMSetAlarmTime| PROC

; 166  : {

  0056c		 |$LN11@OEMSetAlar|
  0056c	e1a0c00d	 mov         r12, sp
  00570	e92d0001	 stmdb       sp!, {r0}
  00574	e92d5000	 stmdb       sp!, {r12, lr}
  00578	e24dd050	 sub         sp, sp, #0x50
  0057c		 |$M44954|

; 167  :     volatile BULVERDE_RTC_REG *pRTCRegs = (volatile BULVERDE_RTC_REG *) OALPAtoVA(BULVERDE_BASE_REG_PA_RTC, FALSE);

  0057c	e3a01000	 mov         r1, #0
  00580	e3a00101	 mov         r0, #1, 2
  00584	e3800609	 orr         r0, r0, #9, 12
  00588	eb000000	 bl          OALPAtoVA
  0058c	e58d003c	 str         r0, [sp, #0x3C]
  00590	e59d303c	 ldr         r3, [sp, #0x3C]
  00594	e58d301c	 str         r3, [sp, #0x1C]

; 168  :     BOOL         retVal = FALSE;

  00598	e3a03000	 mov         r3, #0
  0059c	e58d3010	 str         r3, [sp, #0x10]

; 169  :     UINT32       irq;
; 170  :     DayRegister  dayReg;
; 171  :     YearRegister yearReg;
; 172  :     BOOL enabled;
; 173  : 
; 174  : 
; 175  :     if (!pTime) goto Done;

  005a0	e59d3058	 ldr         r3, [sp, #0x58]
  005a4	e3530000	 cmp         r3, #0
  005a8	1a000000	 bne         |$LN2@OEMSetAlar|
  005ac	ea000093	 b           |$Done$44814|
  005b0		 |$LN2@OEMSetAlar|

; 176  : 
; 177  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 178  :         L"+OEMSetAlarmTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 179  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 180  :         pTime->wSecond, pTime->wMilliseconds
; 181  :     ));

  005b0	e59f32a4	 ldr         r3, [pc, #0x2A4]
  005b4	e5933440	 ldr         r3, [r3, #0x440]
  005b8	e3130040	 tst         r3, #0x40
  005bc	0a000020	 beq         |$LN5@OEMSetAlar|
  005c0	e59f3294	 ldr         r3, [pc, #0x294]
  005c4	e5933440	 ldr         r3, [r3, #0x440]
  005c8	e3130004	 tst         r3, #4
  005cc	0a00001c	 beq         |$LN5@OEMSetAlar|
  005d0	e59d3058	 ldr         r3, [sp, #0x58]
  005d4	e283300e	 add         r3, r3, #0xE
  005d8	e1d330b0	 ldrh        r3, [r3]
  005dc	e58d300c	 str         r3, [sp, #0xC]
  005e0	e59d3058	 ldr         r3, [sp, #0x58]
  005e4	e283300c	 add         r3, r3, #0xC
  005e8	e1d330b0	 ldrh        r3, [r3]
  005ec	e58d3008	 str         r3, [sp, #8]
  005f0	e59d3058	 ldr         r3, [sp, #0x58]
  005f4	e283300a	 add         r3, r3, #0xA
  005f8	e1d330b0	 ldrh        r3, [r3]
  005fc	e58d3004	 str         r3, [sp, #4]
  00600	e59d3058	 ldr         r3, [sp, #0x58]
  00604	e2833008	 add         r3, r3, #8
  00608	e1d330b0	 ldrh        r3, [r3]
  0060c	e58d3000	 str         r3, [sp]
  00610	e59d3058	 ldr         r3, [sp, #0x58]
  00614	e2833006	 add         r3, r3, #6
  00618	e1d330b0	 ldrh        r3, [r3]
  0061c	e59d2058	 ldr         r2, [sp, #0x58]
  00620	e2822002	 add         r2, r2, #2
  00624	e1d220b0	 ldrh        r2, [r2]
  00628	e59d1058	 ldr         r1, [sp, #0x58]
  0062c	e1d110b0	 ldrh        r1, [r1]
  00630	e59f0228	 ldr         r0, [pc, #0x228]
  00634	eb000000	 bl          NKDbgPrintfW
  00638	e3a03001	 mov         r3, #1
  0063c	e58d3040	 str         r3, [sp, #0x40]
  00640	ea000001	 b           |$LN6@OEMSetAlar|
  00644		 |$LN5@OEMSetAlar|
  00644	e3a03000	 mov         r3, #0
  00648	e58d3040	 str         r3, [sp, #0x40]
  0064c		 |$LN6@OEMSetAlar|

; 182  : 
; 183  :     if (!IsSystemTimeStructValid(pTime)) goto Done;

  0064c	e59d0058	 ldr         r0, [sp, #0x58]
  00650	eb000000	 bl          IsSystemTimeStructValid
  00654	e58d0044	 str         r0, [sp, #0x44]
  00658	e59d3044	 ldr         r3, [sp, #0x44]
  0065c	e3530000	 cmp         r3, #0
  00660	1a000000	 bne         |$LN1@OEMSetAlar|
  00664	ea000065	 b           |$Done$44814|
  00668		 |$LN1@OEMSetAlar|

; 184  : 
; 185  :     // Set up the format of the register variables
; 186  :     yearReg.year        = pTime->wYear;

  00668	e59d3058	 ldr         r3, [sp, #0x58]
  0066c	e1d310b0	 ldrh        r1, [r3]
  00670	e59d2024	 ldr         r2, [sp, #0x24]
  00674	e3e0397f	 mvn         r3, #0x7F, 18
  00678	e2233c3e	 eor         r3, r3, #0x3E, 24
  0067c	e0022003	 and         r2, r2, r3
  00680	e3a03c0f	 mov         r3, #0xF, 24
  00684	e38330ff	 orr         r3, r3, #0xFF
  00688	e0013003	 and         r3, r1, r3
  0068c	e1a03483	 mov         r3, r3, lsl #9
  00690	e1823003	 orr         r3, r2, r3
  00694	e58d3024	 str         r3, [sp, #0x24]

; 187  :     yearReg.month       = pTime->wMonth;

  00698	e59d3058	 ldr         r3, [sp, #0x58]
  0069c	e2833002	 add         r3, r3, #2
  006a0	e1d310b0	 ldrh        r1, [r3]
  006a4	e59d2024	 ldr         r2, [sp, #0x24]
  006a8	e3e03e1e	 mvn         r3, #0x1E, 28
  006ac	e0022003	 and         r2, r2, r3
  006b0	e201300f	 and         r3, r1, #0xF
  006b4	e1a03283	 mov         r3, r3, lsl #5
  006b8	e1823003	 orr         r3, r2, r3
  006bc	e58d3024	 str         r3, [sp, #0x24]

; 188  :     yearReg.dayOfMonth  = pTime->wDay;

  006c0	e59d3058	 ldr         r3, [sp, #0x58]
  006c4	e2833006	 add         r3, r3, #6
  006c8	e1d310b0	 ldrh        r1, [r3]
  006cc	e59d2024	 ldr         r2, [sp, #0x24]
  006d0	e3e0301f	 mvn         r3, #0x1F
  006d4	e0022003	 and         r2, r2, r3
  006d8	e201301f	 and         r3, r1, #0x1F
  006dc	e1823003	 orr         r3, r2, r3
  006e0	e58d3024	 str         r3, [sp, #0x24]

; 189  :     dayReg.dayOfWeek    = pTime->wDayOfWeek + 1;    // Hardware is [1,7] Structure is [0,6]

  006e4	e59d3058	 ldr         r3, [sp, #0x58]
  006e8	e2833004	 add         r3, r3, #4
  006ec	e1d330b0	 ldrh        r3, [r3]
  006f0	e2831001	 add         r1, r3, #1
  006f4	e59d2018	 ldr         r2, [sp, #0x18]
  006f8	e3e0380e	 mvn         r3, #0xE, 16
  006fc	e0022003	 and         r2, r2, r3
  00700	e2013007	 and         r3, r1, #7
  00704	e1a03883	 mov         r3, r3, lsl #17
  00708	e1823003	 orr         r3, r2, r3
  0070c	e58d3018	 str         r3, [sp, #0x18]

; 190  :     dayReg.hours        = pTime->wHour;

  00710	e59d3058	 ldr         r3, [sp, #0x58]
  00714	e2833008	 add         r3, r3, #8
  00718	e1d310b0	 ldrh        r1, [r3]
  0071c	e59d2018	 ldr         r2, [sp, #0x18]
  00720	e3e03a1f	 mvn         r3, #0x1F, 20
  00724	e0022003	 and         r2, r2, r3
  00728	e201301f	 and         r3, r1, #0x1F
  0072c	e1a03603	 mov         r3, r3, lsl #12
  00730	e1823003	 orr         r3, r2, r3
  00734	e58d3018	 str         r3, [sp, #0x18]

; 191  :     dayReg.minutes      = pTime->wMinute;

  00738	e59d3058	 ldr         r3, [sp, #0x58]
  0073c	e283300a	 add         r3, r3, #0xA
  00740	e1d310b0	 ldrh        r1, [r3]
  00744	e59d2018	 ldr         r2, [sp, #0x18]
  00748	e3e03d3f	 mvn         r3, #0x3F, 26
  0074c	e0022003	 and         r2, r2, r3
  00750	e201303f	 and         r3, r1, #0x3F
  00754	e1a03303	 mov         r3, r3, lsl #6
  00758	e1823003	 orr         r3, r2, r3
  0075c	e58d3018	 str         r3, [sp, #0x18]

; 192  :     dayReg.seconds      = pTime->wSecond;

  00760	e59d3058	 ldr         r3, [sp, #0x58]
  00764	e283300c	 add         r3, r3, #0xC
  00768	e1d310b0	 ldrh        r1, [r3]
  0076c	e59d2018	 ldr         r2, [sp, #0x18]
  00770	e3e0303f	 mvn         r3, #0x3F
  00774	e0022003	 and         r2, r2, r3
  00778	e201303f	 and         r3, r1, #0x3F
  0077c	e1823003	 orr         r3, r2, r3
  00780	e58d3018	 str         r3, [sp, #0x18]

; 193  : 
; 194  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00784	e3a00000	 mov         r0, #0
  00788	eb000000	 bl          INTERRUPTS_ENABLE
  0078c	e58d0048	 str         r0, [sp, #0x48]
  00790	e59d3048	 ldr         r3, [sp, #0x48]
  00794	e58d3020	 str         r3, [sp, #0x20]

; 195  : 
; 196  :     // Set the value in the RTC and be sure to write to the day register 
; 197  :     // after the year...this will set the year register up properly.
; 198  :     pRTCRegs->ryar1 = yearReg.value;

  00798	e59d301c	 ldr         r3, [sp, #0x1C]
  0079c	e283201c	 add         r2, r3, #0x1C
  007a0	e59d3024	 ldr         r3, [sp, #0x24]
  007a4	e5823000	 str         r3, [r2]

; 199  :     pRTCRegs->rdar1 = dayReg.value;

  007a8	e59d301c	 ldr         r3, [sp, #0x1C]
  007ac	e2832018	 add         r2, r3, #0x18
  007b0	e59d3018	 ldr         r3, [sp, #0x18]
  007b4	e5823000	 str         r3, [r2]

; 200  : 
; 201  :     INTERRUPTS_ENABLE(enabled);

  007b8	e59d0020	 ldr         r0, [sp, #0x20]
  007bc	eb000000	 bl          INTERRUPTS_ENABLE

; 202  : 
; 203  :     retVal          = TRUE;

  007c0	e3a03001	 mov         r3, #1
  007c4	e58d3010	 str         r3, [sp, #0x10]

; 204  : 
; 205  : 
; 206  :     // Enable the RTC wristwatch1 alarm
; 207  :     // (this will also clear the RDAL1 bit if it is set)
; 208  :     pRTCRegs->rtsr  |= XLLP_RTSR_RDALE1;

  007c8	e59d301c	 ldr         r3, [sp, #0x1C]
  007cc	e2833008	 add         r3, r3, #8
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e3832020	 orr         r2, r3, #0x20
  007d8	e59d301c	 ldr         r3, [sp, #0x1C]
  007dc	e2833008	 add         r3, r3, #8
  007e0	e5832000	 str         r2, [r3]

; 209  : 
; 210  :     // Enable the RTC alarm interrupt
; 211  :     irq = IRQ_RTCALARM;

  007e4	e3a0301f	 mov         r3, #0x1F
  007e8	e58d3014	 str         r3, [sp, #0x14]

; 212  :     OALIntrDoneIrqs(1, &irq);

  007ec	e28d1014	 add         r1, sp, #0x14
  007f0	e3a00001	 mov         r0, #1
  007f4	eb000000	 bl          OALIntrDoneIrqs

; 213  :     retVal = TRUE;

  007f8	e3a03001	 mov         r3, #1
  007fc	e58d3010	 str         r3, [sp, #0x10]
  00800		 |$Done$44814|

; 214  : 
; 215  : Done:
; 216  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetAlarmTime(rc = %d)\r\n", retVal));

  00800	e59f3054	 ldr         r3, [pc, #0x54]
  00804	e5933440	 ldr         r3, [r3, #0x440]
  00808	e3130040	 tst         r3, #0x40
  0080c	0a000009	 beq         |$LN7@OEMSetAlar|
  00810	e59f3044	 ldr         r3, [pc, #0x44]
  00814	e5933440	 ldr         r3, [r3, #0x440]
  00818	e3130004	 tst         r3, #4
  0081c	0a000005	 beq         |$LN7@OEMSetAlar|
  00820	e59d1010	 ldr         r1, [sp, #0x10]
  00824	e59f002c	 ldr         r0, [pc, #0x2C]
  00828	eb000000	 bl          NKDbgPrintfW
  0082c	e3a03001	 mov         r3, #1
  00830	e58d304c	 str         r3, [sp, #0x4C]
  00834	ea000001	 b           |$LN8@OEMSetAlar|
  00838		 |$LN7@OEMSetAlar|
  00838	e3a03000	 mov         r3, #0
  0083c	e58d304c	 str         r3, [sp, #0x4C]
  00840		 |$LN8@OEMSetAlar|

; 217  :     return(retVal);

  00840	e59d3010	 ldr         r3, [sp, #0x10]
  00844	e58d3038	 str         r3, [sp, #0x38]

; 218  : }

  00848	e59d0038	 ldr         r0, [sp, #0x38]
  0084c	e28dd050	 add         sp, sp, #0x50
  00850	e89d6000	 ldmia       sp, {sp, lr}
  00854	e12fff1e	 bx          lr
  00858		 |$LN12@OEMSetAlar|
  00858		 |$LN13@OEMSetAlar|
  00858	00000000	 DCD         |??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0085c		 |$LN14@OEMSetAlar|
  0085c	00000000	 DCD         |dpCurSettings|
  00860		 |$LN15@OEMSetAlar|
  00860	00000000	 DCD         |??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@|
  00864		 |$M44955|

			 ENDP  ; |OEMSetAlarmTime|

	EXPORT	|??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@KJHHKJFF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalInitRTC|

  00018			 AREA	 |.pdata|, PDATA
|$T44973| DCD	|$LN14@OALIoCtlHa|
	DCD	0x40004e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@KJHHKJFF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "N", 0x0, "V", 0x0, "A"
	DCB	0x0, "L", 0x0, "I", 0x0, "D", 0x0, " ", 0x0, "P", 0x0, "A"
	DCB	0x0, "R", 0x0, "A", 0x0, "M", 0x0, "E", 0x0, "T", 0x0, "E"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00864			 AREA	 |.text|, CODE, ARM

  00864		 |OALIoCtlHalInitRTC| PROC

; 233  : ) {

  00864		 |$LN14@OALIoCtlHa|
  00864	e1a0c00d	 mov         r12, sp
  00868	e92d000f	 stmdb       sp!, {r0 - r3}
  0086c	e92d5000	 stmdb       sp!, {r12, lr}
  00870	e24dd01c	 sub         sp, sp, #0x1C
  00874		 |$M44970|

; 234  :     BOOL rc = FALSE;

  00874	e3a03000	 mov         r3, #0
  00878	e58d3000	 str         r3, [sp]

; 235  :     SYSTEMTIME *pTime = (SYSTEMTIME*)pInpBuffer;

  0087c	e59d3028	 ldr         r3, [sp, #0x28]
  00880	e58d3004	 str         r3, [sp, #4]

; 236  : 
; 237  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlHalInitRTC(...)\r\n"));

  00884	e59f3104	 ldr         r3, [pc, #0x104]
  00888	e5933440	 ldr         r3, [r3, #0x440]
  0088c	e3130a01	 tst         r3, #1, 20
  00890	0a000008	 beq         |$LN6@OALIoCtlHa|
  00894	e59f30f4	 ldr         r3, [pc, #0xF4]
  00898	e5933440	 ldr         r3, [r3, #0x440]
  0089c	e3130004	 tst         r3, #4
  008a0	0a000004	 beq         |$LN6@OALIoCtlHa|
  008a4	e59f00ec	 ldr         r0, [pc, #0xEC]
  008a8	eb000000	 bl          NKDbgPrintfW
  008ac	e3a03001	 mov         r3, #1
  008b0	e58d300c	 str         r3, [sp, #0xC]
  008b4	ea000001	 b           |$LN7@OALIoCtlHa|
  008b8		 |$LN6@OALIoCtlHa|
  008b8	e3a03000	 mov         r3, #0
  008bc	e58d300c	 str         r3, [sp, #0xC]
  008c0		 |$LN7@OALIoCtlHa|

; 238  : 
; 239  :     if(pOutSize) {

  008c0	e59d3038	 ldr         r3, [sp, #0x38]
  008c4	e3530000	 cmp         r3, #0
  008c8	0a000002	 beq         |$LN3@OALIoCtlHa|

; 240  :         *pOutSize = 0;

  008cc	e59d2038	 ldr         r2, [sp, #0x38]
  008d0	e3a03000	 mov         r3, #0
  008d4	e5823000	 str         r3, [r2]
  008d8		 |$LN3@OALIoCtlHa|

; 241  :     }
; 242  : 
; 243  :     // Validate inputs
; 244  :     if (pInpBuffer == NULL || inpSize < sizeof(SYSTEMTIME)) {

  008d8	e59d3028	 ldr         r3, [sp, #0x28]
  008dc	e3530000	 cmp         r3, #0
  008e0	0a000002	 beq         |$LN1@OALIoCtlHa|
  008e4	e59d302c	 ldr         r3, [sp, #0x2C]
  008e8	e3530010	 cmp         r3, #0x10
  008ec	2a00000b	 bcs         |$LN2@OALIoCtlHa|
  008f0		 |$LN1@OALIoCtlHa|

; 245  :         OALMSG(OAL_ERROR, (
; 246  :             L"ERROR: OALIoCtlHalInitRTC: INVALID PARAMETER\r\n"
; 247  :         ));

  008f0	e59f3098	 ldr         r3, [pc, #0x98]
  008f4	e5933440	 ldr         r3, [r3, #0x440]
  008f8	e3130001	 tst         r3, #1
  008fc	0a000004	 beq         |$LN8@OALIoCtlHa|
  00900	e59f008c	 ldr         r0, [pc, #0x8C]
  00904	eb000000	 bl          NKDbgPrintfW
  00908	e3a03001	 mov         r3, #1
  0090c	e58d3010	 str         r3, [sp, #0x10]
  00910	ea000001	 b           |$LN9@OALIoCtlHa|
  00914		 |$LN8@OALIoCtlHa|
  00914	e3a03000	 mov         r3, #0
  00918	e58d3010	 str         r3, [sp, #0x10]
  0091c		 |$LN9@OALIoCtlHa|

; 248  :         goto cleanUp;

  0091c	ea000004	 b           |$cleanUp$44845|
  00920		 |$LN2@OALIoCtlHa|

; 249  :     }
; 250  : 
; 251  :     rc = OEMSetRealTime(pTime);

  00920	e59d0004	 ldr         r0, [sp, #4]
  00924	eb000000	 bl          OEMSetRealTime
  00928	e58d0014	 str         r0, [sp, #0x14]
  0092c	e59d3014	 ldr         r3, [sp, #0x14]
  00930	e58d3000	 str         r3, [sp]
  00934		 |$cleanUp$44845|

; 252  : 
; 253  : cleanUp:
; 254  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"-OALIoCtlHalInitRTC(rc = %d)\r\n", rc));

  00934	e59f3054	 ldr         r3, [pc, #0x54]
  00938	e5933440	 ldr         r3, [r3, #0x440]
  0093c	e3130a01	 tst         r3, #1, 20
  00940	0a000009	 beq         |$LN10@OALIoCtlHa|
  00944	e59f3044	 ldr         r3, [pc, #0x44]
  00948	e5933440	 ldr         r3, [r3, #0x440]
  0094c	e3130004	 tst         r3, #4
  00950	0a000005	 beq         |$LN10@OALIoCtlHa|
  00954	e59d1000	 ldr         r1, [sp]
  00958	e59f002c	 ldr         r0, [pc, #0x2C]
  0095c	eb000000	 bl          NKDbgPrintfW
  00960	e3a03001	 mov         r3, #1
  00964	e58d3018	 str         r3, [sp, #0x18]
  00968	ea000001	 b           |$LN11@OALIoCtlHa|
  0096c		 |$LN10@OALIoCtlHa|
  0096c	e3a03000	 mov         r3, #0
  00970	e58d3018	 str         r3, [sp, #0x18]
  00974		 |$LN11@OALIoCtlHa|

; 255  :     return rc;

  00974	e59d3000	 ldr         r3, [sp]
  00978	e58d3008	 str         r3, [sp, #8]

; 256  : }

  0097c	e59d0008	 ldr         r0, [sp, #8]
  00980	e28dd01c	 add         sp, sp, #0x1C
  00984	e89d6000	 ldmia       sp, {sp, lr}
  00988	e12fff1e	 bx          lr
  0098c		 |$LN15@OALIoCtlHa|
  0098c		 |$LN16@OALIoCtlHa|
  0098c	00000000	 DCD         |??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00990		 |$LN17@OALIoCtlHa|
  00990	00000000	 DCD         |dpCurSettings|
  00994		 |$LN18@OALIoCtlHa|
  00994	00000000	 DCD         |??_C@_1FO@KJHHKJFF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?3?$AA?5?$AAI?$AAN?$AAV?$AAA?$AAL@|
  00998		 |$LN19@OALIoCtlHa|
  00998	00000000	 DCD         |??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0099c		 |$M44971|

			 ENDP  ; |OALIoCtlHalInitRTC|

	EXPORT	|??_C@_1CO@JDCGKPJI@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@DLBJCAA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAW?$AAe?$AAe?$AAk?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@POBMIPOL@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAi?$AAn?$AAu?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@LJJELEAM@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAo?$AAu?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@IAMHBLKN@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@IGFLKAOF@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAY?$AAe?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@NEMLEECJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T45002| DCD	|$LN37@IsSystemTi|
	DCD	0x40010204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@JDCGKPJI@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "D", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "M", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "h", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@DLBJCAA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAW?$AAe?$AAe?$AAk?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "D", 0x0, "a", 0x0, "y", 0x0, " ", 0x0, "o"
	DCB	0x0, "f", 0x0, " ", 0x0, "W", 0x0, "e", 0x0, "e", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@POBMIPOL@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAi?$AAn?$AAu?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "M", 0x0, "i", 0x0, "n", 0x0, "u", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@LJJELEAM@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAo?$AAu?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "H", 0x0, "o", 0x0, "u", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@IAMHBLKN@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "M", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "h"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@IGFLKAOF@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAY?$AAe?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "Y", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@NEMLEECJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "A", 0x0, "r", 0x0, "g", 0x0, "u", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  0099c			 AREA	 |.text|, CODE, ARM

  0099c		 |IsSystemTimeStructValid| PROC

; 261  : {

  0099c		 |$LN37@IsSystemTi|
  0099c	e1a0c00d	 mov         r12, sp
  009a0	e92d0001	 stmdb       sp!, {r0}
  009a4	e92d5000	 stmdb       sp!, {r12, lr}
  009a8	e24dd030	 sub         sp, sp, #0x30
  009ac		 |$M44999|

; 262  :     WORD dayCompare = 0;

  009ac	e3a03000	 mov         r3, #0
  009b0	e1cd30b0	 strh        r3, [sp]

; 263  : 
; 264  :     if (!pTime)

  009b4	e59d3038	 ldr         r3, [sp, #0x38]
  009b8	e3530000	 cmp         r3, #0
  009bc	1a000011	 bne         |$LN14@IsSystemTi|

; 265  :     { 
; 266  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Argument\r\n"));

  009c0	e59f33c0	 ldr         r3, [pc, #0x3C0]
  009c4	e5933440	 ldr         r3, [r3, #0x440]
  009c8	e3130040	 tst         r3, #0x40
  009cc	0a000008	 beq         |$LN17@IsSystemTi|
  009d0	e59f33b0	 ldr         r3, [pc, #0x3B0]
  009d4	e5933440	 ldr         r3, [r3, #0x440]
  009d8	e3130001	 tst         r3, #1
  009dc	0a000004	 beq         |$LN17@IsSystemTi|
  009e0	e59f03b8	 ldr         r0, [pc, #0x3B8]
  009e4	eb000000	 bl          NKDbgPrintfW
  009e8	e3a03001	 mov         r3, #1
  009ec	e58d3008	 str         r3, [sp, #8]
  009f0	ea000001	 b           |$LN18@IsSystemTi|
  009f4		 |$LN17@IsSystemTi|
  009f4	e3a03000	 mov         r3, #0
  009f8	e58d3008	 str         r3, [sp, #8]
  009fc		 |$LN18@IsSystemTi|

; 267  :         return FALSE;

  009fc	e3a03000	 mov         r3, #0
  00a00	e58d3004	 str         r3, [sp, #4]
  00a04	ea0000da	 b           |$LN15@IsSystemTi|
  00a08		 |$LN14@IsSystemTi|

; 268  :     }
; 269  : 
; 270  :     // Check the basic validity of the values that are passed in
; 271  :     if ((pTime->wYear > 4095))

  00a08	e59d3038	 ldr         r3, [sp, #0x38]
  00a0c	e1d330b0	 ldrh        r3, [r3]
  00a10	e1a02003	 mov         r2, r3
  00a14	e3a03c0f	 mov         r3, #0xF, 24
  00a18	e38330ff	 orr         r3, r3, #0xFF
  00a1c	e1520003	 cmp         r2, r3
  00a20	da000011	 ble         |$LN13@IsSystemTi|

; 272  :     {
; 273  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Year\r\n"));

  00a24	e59f335c	 ldr         r3, [pc, #0x35C]
  00a28	e5933440	 ldr         r3, [r3, #0x440]
  00a2c	e3130040	 tst         r3, #0x40
  00a30	0a000008	 beq         |$LN19@IsSystemTi|
  00a34	e59f334c	 ldr         r3, [pc, #0x34C]
  00a38	e5933440	 ldr         r3, [r3, #0x440]
  00a3c	e3130001	 tst         r3, #1
  00a40	0a000004	 beq         |$LN19@IsSystemTi|
  00a44	e59f0350	 ldr         r0, [pc, #0x350]
  00a48	eb000000	 bl          NKDbgPrintfW
  00a4c	e3a03001	 mov         r3, #1
  00a50	e58d300c	 str         r3, [sp, #0xC]
  00a54	ea000001	 b           |$LN20@IsSystemTi|
  00a58		 |$LN19@IsSystemTi|
  00a58	e3a03000	 mov         r3, #0
  00a5c	e58d300c	 str         r3, [sp, #0xC]
  00a60		 |$LN20@IsSystemTi|

; 274  :         return FALSE;

  00a60	e3a03000	 mov         r3, #0
  00a64	e58d3004	 str         r3, [sp, #4]
  00a68	ea0000c1	 b           |$LN15@IsSystemTi|
  00a6c		 |$LN13@IsSystemTi|

; 275  :     }
; 276  : 
; 277  :     if ((pTime->wMonth > 12) || (pTime->wMonth == 0))

  00a6c	e59d3038	 ldr         r3, [sp, #0x38]
  00a70	e2833002	 add         r3, r3, #2
  00a74	e1d330b0	 ldrh        r3, [r3]
  00a78	e353000c	 cmp         r3, #0xC
  00a7c	ca000004	 bgt         |$LN11@IsSystemTi|
  00a80	e59d3038	 ldr         r3, [sp, #0x38]
  00a84	e2833002	 add         r3, r3, #2
  00a88	e1d330b0	 ldrh        r3, [r3]
  00a8c	e3530000	 cmp         r3, #0
  00a90	1a000011	 bne         |$LN12@IsSystemTi|
  00a94		 |$LN11@IsSystemTi|

; 278  :     {
; 279  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Month\r\n"));

  00a94	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00a98	e5933440	 ldr         r3, [r3, #0x440]
  00a9c	e3130040	 tst         r3, #0x40
  00aa0	0a000008	 beq         |$LN21@IsSystemTi|
  00aa4	e59f32dc	 ldr         r3, [pc, #0x2DC]
  00aa8	e5933440	 ldr         r3, [r3, #0x440]
  00aac	e3130001	 tst         r3, #1
  00ab0	0a000004	 beq         |$LN21@IsSystemTi|
  00ab4	e59f02dc	 ldr         r0, [pc, #0x2DC]
  00ab8	eb000000	 bl          NKDbgPrintfW
  00abc	e3a03001	 mov         r3, #1
  00ac0	e58d3010	 str         r3, [sp, #0x10]
  00ac4	ea000001	 b           |$LN22@IsSystemTi|
  00ac8		 |$LN21@IsSystemTi|
  00ac8	e3a03000	 mov         r3, #0
  00acc	e58d3010	 str         r3, [sp, #0x10]
  00ad0		 |$LN22@IsSystemTi|

; 280  :         return FALSE;

  00ad0	e3a03000	 mov         r3, #0
  00ad4	e58d3004	 str         r3, [sp, #4]
  00ad8	ea0000a5	 b           |$LN15@IsSystemTi|
  00adc		 |$LN12@IsSystemTi|

; 281  :     } 
; 282  : 
; 283  :     if (!(pTime->wHour < 24))

  00adc	e59d3038	 ldr         r3, [sp, #0x38]
  00ae0	e2833008	 add         r3, r3, #8
  00ae4	e1d330b0	 ldrh        r3, [r3]
  00ae8	e3530018	 cmp         r3, #0x18
  00aec	ba000011	 blt         |$LN10@IsSystemTi|

; 284  :     {
; 285  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Hour\r\n"));

  00af0	e59f3290	 ldr         r3, [pc, #0x290]
  00af4	e5933440	 ldr         r3, [r3, #0x440]
  00af8	e3130040	 tst         r3, #0x40
  00afc	0a000008	 beq         |$LN23@IsSystemTi|
  00b00	e59f3280	 ldr         r3, [pc, #0x280]
  00b04	e5933440	 ldr         r3, [r3, #0x440]
  00b08	e3130001	 tst         r3, #1
  00b0c	0a000004	 beq         |$LN23@IsSystemTi|
  00b10	e59f027c	 ldr         r0, [pc, #0x27C]
  00b14	eb000000	 bl          NKDbgPrintfW
  00b18	e3a03001	 mov         r3, #1
  00b1c	e58d3014	 str         r3, [sp, #0x14]
  00b20	ea000001	 b           |$LN24@IsSystemTi|
  00b24		 |$LN23@IsSystemTi|
  00b24	e3a03000	 mov         r3, #0
  00b28	e58d3014	 str         r3, [sp, #0x14]
  00b2c		 |$LN24@IsSystemTi|

; 286  :         return FALSE;

  00b2c	e3a03000	 mov         r3, #0
  00b30	e58d3004	 str         r3, [sp, #4]
  00b34	ea00008e	 b           |$LN15@IsSystemTi|
  00b38		 |$LN10@IsSystemTi|

; 287  :     }
; 288  :     if (!(pTime->wMinute < 60))

  00b38	e59d3038	 ldr         r3, [sp, #0x38]
  00b3c	e283300a	 add         r3, r3, #0xA
  00b40	e1d330b0	 ldrh        r3, [r3]
  00b44	e353003c	 cmp         r3, #0x3C
  00b48	ba000011	 blt         |$LN9@IsSystemTi|

; 289  :     {
; 290  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Minutes\r\n"));

  00b4c	e59f3234	 ldr         r3, [pc, #0x234]
  00b50	e5933440	 ldr         r3, [r3, #0x440]
  00b54	e3130040	 tst         r3, #0x40
  00b58	0a000008	 beq         |$LN25@IsSystemTi|
  00b5c	e59f3224	 ldr         r3, [pc, #0x224]
  00b60	e5933440	 ldr         r3, [r3, #0x440]
  00b64	e3130001	 tst         r3, #1
  00b68	0a000004	 beq         |$LN25@IsSystemTi|
  00b6c	e59f021c	 ldr         r0, [pc, #0x21C]
  00b70	eb000000	 bl          NKDbgPrintfW
  00b74	e3a03001	 mov         r3, #1
  00b78	e58d3018	 str         r3, [sp, #0x18]
  00b7c	ea000001	 b           |$LN26@IsSystemTi|
  00b80		 |$LN25@IsSystemTi|
  00b80	e3a03000	 mov         r3, #0
  00b84	e58d3018	 str         r3, [sp, #0x18]
  00b88		 |$LN26@IsSystemTi|

; 291  :         return FALSE;

  00b88	e3a03000	 mov         r3, #0
  00b8c	e58d3004	 str         r3, [sp, #4]
  00b90	ea000077	 b           |$LN15@IsSystemTi|
  00b94		 |$LN9@IsSystemTi|

; 292  :     }
; 293  : 
; 294  :     if (!(pTime->wSecond < 60))

  00b94	e59d3038	 ldr         r3, [sp, #0x38]
  00b98	e283300c	 add         r3, r3, #0xC
  00b9c	e1d330b0	 ldrh        r3, [r3]
  00ba0	e353003c	 cmp         r3, #0x3C
  00ba4	ba000011	 blt         |$LN8@IsSystemTi|

; 295  :     {
; 296  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Minutes\r\n"));

  00ba8	e59f31d8	 ldr         r3, [pc, #0x1D8]
  00bac	e5933440	 ldr         r3, [r3, #0x440]
  00bb0	e3130040	 tst         r3, #0x40
  00bb4	0a000008	 beq         |$LN27@IsSystemTi|
  00bb8	e59f31c8	 ldr         r3, [pc, #0x1C8]
  00bbc	e5933440	 ldr         r3, [r3, #0x440]
  00bc0	e3130001	 tst         r3, #1
  00bc4	0a000004	 beq         |$LN27@IsSystemTi|
  00bc8	e59f01c0	 ldr         r0, [pc, #0x1C0]
  00bcc	eb000000	 bl          NKDbgPrintfW
  00bd0	e3a03001	 mov         r3, #1
  00bd4	e58d301c	 str         r3, [sp, #0x1C]
  00bd8	ea000001	 b           |$LN28@IsSystemTi|
  00bdc		 |$LN27@IsSystemTi|
  00bdc	e3a03000	 mov         r3, #0
  00be0	e58d301c	 str         r3, [sp, #0x1C]
  00be4		 |$LN28@IsSystemTi|

; 297  :         return FALSE;

  00be4	e3a03000	 mov         r3, #0
  00be8	e58d3004	 str         r3, [sp, #4]
  00bec	ea000060	 b           |$LN15@IsSystemTi|
  00bf0		 |$LN8@IsSystemTi|

; 298  :     }
; 299  : 
; 300  :     // SYSTEMTIME struct store the day of week starting
; 301  :     // at 0 while the hardware is expecting a 1.
; 302  :     if ((pTime->wDayOfWeek >= 7))

  00bf0	e59d3038	 ldr         r3, [sp, #0x38]
  00bf4	e2833004	 add         r3, r3, #4
  00bf8	e1d330b0	 ldrh        r3, [r3]
  00bfc	e3530007	 cmp         r3, #7
  00c00	ba000011	 blt         |$LN7@IsSystemTi|

; 303  :     {
; 304  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Day of Week\r\n"));

  00c04	e59f317c	 ldr         r3, [pc, #0x17C]
  00c08	e5933440	 ldr         r3, [r3, #0x440]
  00c0c	e3130040	 tst         r3, #0x40
  00c10	0a000008	 beq         |$LN29@IsSystemTi|
  00c14	e59f316c	 ldr         r3, [pc, #0x16C]
  00c18	e5933440	 ldr         r3, [r3, #0x440]
  00c1c	e3130001	 tst         r3, #1
  00c20	0a000004	 beq         |$LN29@IsSystemTi|
  00c24	e59f0160	 ldr         r0, [pc, #0x160]
  00c28	eb000000	 bl          NKDbgPrintfW
  00c2c	e3a03001	 mov         r3, #1
  00c30	e58d3020	 str         r3, [sp, #0x20]
  00c34	ea000001	 b           |$LN30@IsSystemTi|
  00c38		 |$LN29@IsSystemTi|
  00c38	e3a03000	 mov         r3, #0
  00c3c	e58d3020	 str         r3, [sp, #0x20]
  00c40		 |$LN30@IsSystemTi|

; 305  :         return FALSE;

  00c40	e3a03000	 mov         r3, #0
  00c44	e58d3004	 str         r3, [sp, #4]
  00c48	ea000049	 b           |$LN15@IsSystemTi|
  00c4c		 |$LN7@IsSystemTi|

; 306  :     }
; 307  : 
; 308  :     // Calculate the day comparison value
; 309  :     if ((pTime->wMonth == 4) ||
; 310  :         (pTime->wMonth == 6) ||
; 311  :         (pTime->wMonth == 9) ||
; 312  :         (pTime->wMonth == 11))

  00c4c	e59d3038	 ldr         r3, [sp, #0x38]
  00c50	e2833002	 add         r3, r3, #2
  00c54	e1d330b0	 ldrh        r3, [r3]
  00c58	e3530004	 cmp         r3, #4
  00c5c	0a00000e	 beq         |$LN5@IsSystemTi|
  00c60	e59d3038	 ldr         r3, [sp, #0x38]
  00c64	e2833002	 add         r3, r3, #2
  00c68	e1d330b0	 ldrh        r3, [r3]
  00c6c	e3530006	 cmp         r3, #6
  00c70	0a000009	 beq         |$LN5@IsSystemTi|
  00c74	e59d3038	 ldr         r3, [sp, #0x38]
  00c78	e2833002	 add         r3, r3, #2
  00c7c	e1d330b0	 ldrh        r3, [r3]
  00c80	e3530009	 cmp         r3, #9
  00c84	0a000004	 beq         |$LN5@IsSystemTi|
  00c88	e59d3038	 ldr         r3, [sp, #0x38]
  00c8c	e2833002	 add         r3, r3, #2
  00c90	e1d330b0	 ldrh        r3, [r3]
  00c94	e353000b	 cmp         r3, #0xB
  00c98	1a000002	 bne         |$LN6@IsSystemTi|
  00c9c		 |$LN5@IsSystemTi|

; 313  :     {
; 314  :         dayCompare = 30;

  00c9c	e3a0301e	 mov         r3, #0x1E
  00ca0	e1cd30b0	 strh        r3, [sp]
  00ca4	ea000017	 b           |$LN4@IsSystemTi|
  00ca8		 |$LN6@IsSystemTi|

; 315  :     }
; 316  :     else if (pTime->wMonth == 2)

  00ca8	e59d3038	 ldr         r3, [sp, #0x38]
  00cac	e2833002	 add         r3, r3, #2
  00cb0	e1d330b0	 ldrh        r3, [r3]
  00cb4	e3530002	 cmp         r3, #2
  00cb8	1a000010	 bne         |$LN3@IsSystemTi|

; 317  :     {
; 318  :         dayCompare = (IsLeapYear(pTime->wYear)) ? 29:28;

  00cbc	e59d3038	 ldr         r3, [sp, #0x38]
  00cc0	e1d300b0	 ldrh        r0, [r3]
  00cc4	eb000000	 bl          IsLeapYear
  00cc8	e58d0024	 str         r0, [sp, #0x24]
  00ccc	e59d3024	 ldr         r3, [sp, #0x24]
  00cd0	e3530000	 cmp         r3, #0
  00cd4	0a000002	 beq         |$LN31@IsSystemTi|
  00cd8	e3a0301d	 mov         r3, #0x1D
  00cdc	e58d3028	 str         r3, [sp, #0x28]
  00ce0	ea000001	 b           |$LN32@IsSystemTi|
  00ce4		 |$LN31@IsSystemTi|
  00ce4	e3a0301c	 mov         r3, #0x1C
  00ce8	e58d3028	 str         r3, [sp, #0x28]
  00cec		 |$LN32@IsSystemTi|
  00cec	e59d3028	 ldr         r3, [sp, #0x28]
  00cf0	e1a03803	 mov         r3, r3, lsl #16
  00cf4	e1a03823	 mov         r3, r3, lsr #16
  00cf8	e1cd30b0	 strh        r3, [sp]

; 319  :     }
; 320  :     else

  00cfc	ea000001	 b           |$LN2@IsSystemTi|
  00d00		 |$LN3@IsSystemTi|

; 321  :     {
; 322  :         dayCompare = 31;

  00d00	e3a0301f	 mov         r3, #0x1F
  00d04	e1cd30b0	 strh        r3, [sp]
  00d08		 |$LN2@IsSystemTi|
  00d08		 |$LN4@IsSystemTi|

; 323  :     }
; 324  : 
; 325  :     // This should be checking for a wDay == 0 as an error
; 326  :     // but the documentation does not specify.
; 327  :     if ((pTime->wDay > dayCompare))

  00d08	e59d3038	 ldr         r3, [sp, #0x38]
  00d0c	e2833006	 add         r3, r3, #6
  00d10	e1d330b0	 ldrh        r3, [r3]
  00d14	e1a02003	 mov         r2, r3
  00d18	e1dd30b0	 ldrh        r3, [sp]
  00d1c	e1520003	 cmp         r2, r3
  00d20	da000011	 ble         |$LN1@IsSystemTi|

; 328  :     {
; 329  :         OALMSG(OAL_RTC&&OAL_ERROR, (L"Invalid Day of Month\r\n"));

  00d24	e59f305c	 ldr         r3, [pc, #0x5C]
  00d28	e5933440	 ldr         r3, [r3, #0x440]
  00d2c	e3130040	 tst         r3, #0x40
  00d30	0a000008	 beq         |$LN33@IsSystemTi|
  00d34	e59f304c	 ldr         r3, [pc, #0x4C]
  00d38	e5933440	 ldr         r3, [r3, #0x440]
  00d3c	e3130001	 tst         r3, #1
  00d40	0a000004	 beq         |$LN33@IsSystemTi|
  00d44	e59f0038	 ldr         r0, [pc, #0x38]
  00d48	eb000000	 bl          NKDbgPrintfW
  00d4c	e3a03001	 mov         r3, #1
  00d50	e58d302c	 str         r3, [sp, #0x2C]
  00d54	ea000001	 b           |$LN34@IsSystemTi|
  00d58		 |$LN33@IsSystemTi|
  00d58	e3a03000	 mov         r3, #0
  00d5c	e58d302c	 str         r3, [sp, #0x2C]
  00d60		 |$LN34@IsSystemTi|

; 330  :         return FALSE;

  00d60	e3a03000	 mov         r3, #0
  00d64	e58d3004	 str         r3, [sp, #4]
  00d68	ea000001	 b           |$LN15@IsSystemTi|
  00d6c		 |$LN1@IsSystemTi|

; 331  :     }
; 332  : 
; 333  :     return TRUE;

  00d6c	e3a03001	 mov         r3, #1
  00d70	e58d3004	 str         r3, [sp, #4]
  00d74		 |$LN15@IsSystemTi|

; 334  : }

  00d74	e59d0004	 ldr         r0, [sp, #4]
  00d78	e28dd030	 add         sp, sp, #0x30
  00d7c	e89d6000	 ldmia       sp, {sp, lr}
  00d80	e12fff1e	 bx          lr
  00d84		 |$LN38@IsSystemTi|
  00d84		 |$LN39@IsSystemTi|
  00d84	00000000	 DCD         |??_C@_1CO@JDCGKPJI@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  00d88		 |$LN40@IsSystemTi|
  00d88	00000000	 DCD         |dpCurSettings|
  00d8c		 |$LN41@IsSystemTi|
  00d8c	00000000	 DCD         |??_C@_1CM@DLBJCAA@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAa?$AAy?$AA?5?$AAo?$AAf?$AA?5?$AAW?$AAe?$AAe?$AAk?$AA?$AN?$AA?6?$AA?$AA@|
  00d90		 |$LN42@IsSystemTi|
  00d90	00000000	 DCD         |??_C@_1CE@POBMIPOL@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAi?$AAn?$AAu?$AAt?$AAe?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00d94		 |$LN43@IsSystemTi|
  00d94	00000000	 DCD         |??_C@_1BO@LJJELEAM@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAH?$AAo?$AAu?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00d98		 |$LN44@IsSystemTi|
  00d98	00000000	 DCD         |??_C@_1CA@IAMHBLKN@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAM?$AAo?$AAn?$AAt?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  00d9c		 |$LN45@IsSystemTi|
  00d9c	00000000	 DCD         |??_C@_1BO@IGFLKAOF@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAY?$AAe?$AAa?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  00da0		 |$LN46@IsSystemTi|
  00da0	00000000	 DCD         |??_C@_1CG@NEMLEECJ@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  00da4		 |$M45000|

			 ENDP  ; |IsSystemTimeStructValid|

	IMPORT	|__rt_sdiv|

  00028			 AREA	 |.pdata|, PDATA
|$T45018| DCD	|$LN8@IsLeapYear|
	DCD	0x40002404
; Function compile flags: /Odtp

  00da4			 AREA	 |.text|, CODE, ARM

  00da4		 |IsLeapYear| PROC

; 340  : {

  00da4		 |$LN8@IsLeapYear|
  00da4	e1a0c00d	 mov         r12, sp
  00da8	e92d0001	 stmdb       sp!, {r0}
  00dac	e92d5000	 stmdb       sp!, {r12, lr}
  00db0	e24dd008	 sub         sp, sp, #8
  00db4		 |$M45015|

; 341  :     BOOL leap = FALSE;

  00db4	e3a03000	 mov         r3, #0
  00db8	e58d3000	 str         r3, [sp]

; 342  : 
; 343  :     // Leap years must be a multiple of 4
; 344  :     if ((wYear % 4) == 0)

  00dbc	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00dc0	e1a01003	 mov         r1, r3
  00dc4	e3a00004	 mov         r0, #4
  00dc8	eb000000	 bl          __rt_sdiv
  00dcc	e3510000	 cmp         r1, #0
  00dd0	1a000011	 bne         |$LN3@IsLeapYear|

; 345  :     {
; 346  :         leap = TRUE;

  00dd4	e3a03001	 mov         r3, #1
  00dd8	e58d3000	 str         r3, [sp]

; 347  : 
; 348  :         // It is not a leap year if it is a multiple of 100
; 349  :         if ((wYear % 100) == 0)

  00ddc	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00de0	e1a01003	 mov         r1, r3
  00de4	e3a00064	 mov         r0, #0x64
  00de8	eb000000	 bl          __rt_sdiv
  00dec	e3510000	 cmp         r1, #0
  00df0	1a000009	 bne         |$LN2@IsLeapYear|

; 350  :         {
; 351  :             leap = FALSE;

  00df4	e3a03000	 mov         r3, #0
  00df8	e58d3000	 str         r3, [sp]

; 352  : 
; 353  :             // Unless it is a multiple of 400
; 354  :             if ((wYear % 400) == 0)

  00dfc	e1dd31b0	 ldrh        r3, [sp, #0x10]
  00e00	e1a01003	 mov         r1, r3
  00e04	e3a00e19	 mov         r0, #0x19, 28
  00e08	eb000000	 bl          __rt_sdiv
  00e0c	e3510000	 cmp         r1, #0
  00e10	1a000001	 bne         |$LN1@IsLeapYear|

; 355  :             {
; 356  :                 leap = TRUE;

  00e14	e3a03001	 mov         r3, #1
  00e18	e58d3000	 str         r3, [sp]
  00e1c		 |$LN1@IsLeapYear|
  00e1c		 |$LN2@IsLeapYear|
  00e1c		 |$LN3@IsLeapYear|

; 357  :             }
; 358  :         }
; 359  :     }
; 360  : 
; 361  :     return leap;

  00e1c	e59d3000	 ldr         r3, [sp]
  00e20	e58d3004	 str         r3, [sp, #4]

; 362  : }

  00e24	e59d0004	 ldr         r0, [sp, #4]
  00e28	e28dd008	 add         sp, sp, #8
  00e2c	e89d6000	 ldmia       sp, {sp, lr}
  00e30	e12fff1e	 bx          lr
  00e34		 |$M45016|

			 ENDP  ; |IsLeapYear|

	END
