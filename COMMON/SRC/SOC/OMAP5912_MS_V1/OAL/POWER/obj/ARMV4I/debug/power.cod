; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP5912_MS_V1\OAL\POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMInterruptPending|
	IMPORT	|OALIntrIsIrqPending|
	IMPORT	|OALIntrTranslateSysIntr|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T44034| DCD	|$LN14@OEMInterru|
	DCD	0x40004c04
; File c:\wince600\platform\common\src\soc\omap5912_ms_v1\oal\power\power.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptPending| PROC

; 39   : {

  00000		 |$LN14@OEMInterru|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M44031|

; 40   :     BOOL pending = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 41   :     const UINT32 *pIrqs;
; 42   :     UINT32 ix, count;
; 43   : 
; 44   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 45   :         L"+OEMInterruptPending(%d)\r\n", sysIntr
; 46   :     ));

  00018	e59f3108	 ldr         r3, [pc, #0x108]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130901	 tst         r3, #1, 18
  00024	0a000009	 beq         |$LN7@OEMInterru|
  00028	e59f30f8	 ldr         r3, [pc, #0xF8]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130902	 tst         r3, #2, 18
  00034	0a000005	 beq         |$LN7@OEMInterru|
  00038	e59d102c	 ldr         r1, [sp, #0x2C]
  0003c	e59f00e8	 ldr         r0, [pc, #0xE8]
  00040	eb000000	 bl          NKDbgPrintfW
  00044	e3a03001	 mov         r3, #1
  00048	e58d3014	 str         r3, [sp, #0x14]
  0004c	ea000001	 b           |$LN8@OEMInterru|
  00050		 |$LN7@OEMInterru|
  00050	e3a03000	 mov         r3, #0
  00054	e58d3014	 str         r3, [sp, #0x14]
  00058		 |$LN8@OEMInterru|

; 47   : 
; 48   :     if (OALIntrTranslateSysIntr(sysIntr, &count, &pIrqs)) {

  00058	e28d200c	 add         r2, sp, #0xC
  0005c	e28d1000	 add         r1, sp, #0
  00060	e59d002c	 ldr         r0, [sp, #0x2C]
  00064	eb000000	 bl          OALIntrTranslateSysIntr
  00068	e58d0018	 str         r0, [sp, #0x18]
  0006c	e59d3018	 ldr         r3, [sp, #0x18]
  00070	e3530000	 cmp         r3, #0
  00074	0a000014	 beq         |$LN4@OEMInterru|

; 49   :         for (ix = 0; ix < count; ix++ && !pending) {

  00078	e3a03000	 mov         r3, #0
  0007c	e58d3004	 str         r3, [sp, #4]
  00080	ea000002	 b           |$LN3@OEMInterru|
  00084		 |$LN2@OEMInterru|
  00084	e59d3004	 ldr         r3, [sp, #4]
  00088	e2833001	 add         r3, r3, #1
  0008c	e58d3004	 str         r3, [sp, #4]
  00090		 |$LN3@OEMInterru|
  00090	e59d2004	 ldr         r2, [sp, #4]
  00094	e59d3000	 ldr         r3, [sp]
  00098	e1520003	 cmp         r2, r3
  0009c	2a00000a	 bcs         |$LN1@OEMInterru|

; 50   :             pending = OALIntrIsIrqPending(pIrqs[ix]);

  000a0	e59d1004	 ldr         r1, [sp, #4]
  000a4	e3a03004	 mov         r3, #4
  000a8	e0020391	 mul         r2, r1, r3
  000ac	e59d300c	 ldr         r3, [sp, #0xC]
  000b0	e0833002	 add         r3, r3, r2
  000b4	e5930000	 ldr         r0, [r3]
  000b8	eb000000	 bl          OALIntrIsIrqPending
  000bc	e58d001c	 str         r0, [sp, #0x1C]
  000c0	e59d301c	 ldr         r3, [sp, #0x1C]
  000c4	e58d3008	 str         r3, [sp, #8]

; 51   :         }            

  000c8	eaffffed	 b           |$LN2@OEMInterru|
  000cc		 |$LN1@OEMInterru|
  000cc		 |$LN4@OEMInterru|

; 52   :     }
; 53   : 
; 54   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 55   :         L"-OEMInterruptPending(rc = %d)\r\n", pending
; 56   :     ));

  000cc	e59f3054	 ldr         r3, [pc, #0x54]
  000d0	e5933440	 ldr         r3, [r3, #0x440]
  000d4	e3130901	 tst         r3, #1, 18
  000d8	0a000009	 beq         |$LN10@OEMInterru|
  000dc	e59f3044	 ldr         r3, [pc, #0x44]
  000e0	e5933440	 ldr         r3, [r3, #0x440]
  000e4	e3130902	 tst         r3, #2, 18
  000e8	0a000005	 beq         |$LN10@OEMInterru|
  000ec	e59d1008	 ldr         r1, [sp, #8]
  000f0	e59f002c	 ldr         r0, [pc, #0x2C]
  000f4	eb000000	 bl          NKDbgPrintfW
  000f8	e3a03001	 mov         r3, #1
  000fc	e58d3020	 str         r3, [sp, #0x20]
  00100	ea000001	 b           |$LN11@OEMInterru|
  00104		 |$LN10@OEMInterru|
  00104	e3a03000	 mov         r3, #0
  00108	e58d3020	 str         r3, [sp, #0x20]
  0010c		 |$LN11@OEMInterru|

; 57   :     return pending;

  0010c	e59d3008	 ldr         r3, [sp, #8]
  00110	e58d3010	 str         r3, [sp, #0x10]

; 58   : }

  00114	e59d0010	 ldr         r0, [sp, #0x10]
  00118	e28dd024	 add         sp, sp, #0x24
  0011c	e89d6000	 ldmia       sp, {sp, lr}
  00120	e12fff1e	 bx          lr
  00124		 |$LN15@OEMInterru|
  00124		 |$LN16@OEMInterru|
  00124	00000000	 DCD         |??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00128		 |$LN17@OEMInterru|
  00128	00000000	 DCD         |dpCurSettings|
  0012c		 |$LN18@OEMInterru|
  0012c	00000000	 DCD         |??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00130		 |$M44032|

			 ENDP  ; |OEMInterruptPending|

	EXPORT	|OEMPowerOff|
	IMPORT	|BSPPowerOn|
	IMPORT	|g_oalWakeSource|
	IMPORT	|OALCPUIdle|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALPowerWakeSource|
	IMPORT	|OALStall|
	IMPORT	|BSPPowerOff|
	IMPORT	|OALPAtoVA|

  00008			 AREA	 |.pdata|, PDATA
|$T44043| DCD	|$LN15@OEMPowerOf|
	DCD	0x40011d02
; Function compile flags: /Odtp

  00130			 AREA	 |.text|, CODE, ARM

  00130		 |OEMPowerOff| PROC

; 67   : {

  00130		 |$LN15@OEMPowerOf|
  00130	e52de004	 str         lr, [sp, #-4]!
  00134	e24dd090	 sub         sp, sp, #0x90
  00138		 |$M44040|

; 68   :     OMAP5912_INTC_REGS *pIntcL1Regs = OALPAtoUA(OMAP5912_INTC_L1_REGS_PA);

  00138	e3a01000	 mov         r1, #0
  0013c	e3e00b4d	 mvn         r0, #0x4D, 22
  00140	e22000ff	 eor         r0, r0, #0xFF
  00144	eb000000	 bl          OALPAtoVA
  00148	e58d0058	 str         r0, [sp, #0x58]
  0014c	e59d3058	 ldr         r3, [sp, #0x58]
  00150	e58d3004	 str         r3, [sp, #4]

; 69   :     OMAP5912_INTC_REGS *pIntcL2ARegs = OALPAtoUA(OMAP5912_INTC_L2A_REGS_PA);

  00154	e3a01000	 mov         r1, #0
  00158	e3a004ff	 mov         r0, #0xFF, 8
  0015c	e38008fe	 orr         r0, r0, #0xFE, 16
  00160	eb000000	 bl          OALPAtoVA
  00164	e58d005c	 str         r0, [sp, #0x5C]
  00168	e59d305c	 ldr         r3, [sp, #0x5C]
  0016c	e58d3028	 str         r3, [sp, #0x28]

; 70   :     OMAP5912_INTC_REGS *pIntcL2BRegs = OALPAtoUA(OMAP5912_INTC_L2B_REGS_PA);

  00170	e3a01000	 mov         r1, #0
  00174	e3a00c01	 mov         r0, #1, 24
  00178	e2400802	 sub         r0, r0, #2, 16
  0017c	eb000000	 bl          OALPAtoVA
  00180	e58d0060	 str         r0, [sp, #0x60]
  00184	e59d3060	 ldr         r3, [sp, #0x60]
  00188	e58d3024	 str         r3, [sp, #0x24]

; 71   :     OMAP5912_INTC_REGS *pIntcL2CRegs = OALPAtoUA(OMAP5912_INTC_L2C_REGS_PA);

  0018c	e3a01000	 mov         r1, #0
  00190	e3a00c02	 mov         r0, #2, 24
  00194	e2400802	 sub         r0, r0, #2, 16
  00198	eb000000	 bl          OALPAtoVA
  0019c	e58d0064	 str         r0, [sp, #0x64]
  001a0	e59d3064	 ldr         r3, [sp, #0x64]
  001a4	e58d3020	 str         r3, [sp, #0x20]

; 72   :     OMAP5912_INTC_REGS *pIntcL2DRegs = OALPAtoUA(OMAP5912_INTC_L2D_REGS_PA);

  001a8	e3a01000	 mov         r1, #0
  001ac	e3e00b7f	 mvn         r0, #0x7F, 22
  001b0	e22000ff	 eor         r0, r0, #0xFF
  001b4	eb000000	 bl          OALPAtoVA
  001b8	e58d0068	 str         r0, [sp, #0x68]
  001bc	e59d3068	 ldr         r3, [sp, #0x68]
  001c0	e58d3040	 str         r3, [sp, #0x40]

; 73   :     OMAP5912_GPIO_REGS *pGPIO1Regs = OALPAtoUA(OMAP5912_GPIO1_REGS_PA);

  001c4	e3a01000	 mov         r1, #0
  001c8	e3a00b01	 mov         r0, #1, 22
  001cc	e2400a42	 sub         r0, r0, #0x42, 20
  001d0	eb000000	 bl          OALPAtoVA
  001d4	e58d006c	 str         r0, [sp, #0x6C]
  001d8	e59d306c	 ldr         r3, [sp, #0x6C]
  001dc	e58d303c	 str         r3, [sp, #0x3C]

; 74   :     OMAP5912_GPIO_REGS *pGPIO2Regs = OALPAtoUA(OMAP5912_GPIO2_REGS_PA);

  001e0	e3a01000	 mov         r1, #0
  001e4	e3a00b03	 mov         r0, #3, 22
  001e8	e2400a42	 sub         r0, r0, #0x42, 20
  001ec	eb000000	 bl          OALPAtoVA
  001f0	e58d0070	 str         r0, [sp, #0x70]
  001f4	e59d3070	 ldr         r3, [sp, #0x70]
  001f8	e58d3038	 str         r3, [sp, #0x38]

; 75   :     OMAP5912_GPIO_REGS *pGPIO3Regs = OALPAtoUA(OMAP5912_GPIO3_REGS_PA);

  001fc	e3a01000	 mov         r1, #0
  00200	e3a00b01	 mov         r0, #1, 22
  00204	e2400a45	 sub         r0, r0, #0x45, 20
  00208	eb000000	 bl          OALPAtoVA
  0020c	e58d0074	 str         r0, [sp, #0x74]
  00210	e59d3074	 ldr         r3, [sp, #0x74]
  00214	e58d304c	 str         r3, [sp, #0x4C]

; 76   :     OMAP5912_GPIO_REGS *pGPIO4Regs = OALPAtoUA(OMAP5912_GPIO4_REGS_PA);

  00218	e3a01000	 mov         r1, #0
  0021c	e3a00b03	 mov         r0, #3, 22
  00220	e2400a45	 sub         r0, r0, #0x45, 20
  00224	eb000000	 bl          OALPAtoVA
  00228	e58d0078	 str         r0, [sp, #0x78]
  0022c	e59d3078	 ldr         r3, [sp, #0x78]
  00230	e58d3034	 str         r3, [sp, #0x34]

; 77   :     OMAP5912_ULPD_REGS *pULPDRegs = OALPAtoUA(OMAP5912_ULPD_REGS_PA);

  00234	e3a01000	 mov         r1, #0
  00238	e2410b7e	 sub         r0, r1, #0x7E, 22
  0023c	eb000000	 bl          OALPAtoVA
  00240	e58d007c	 str         r0, [sp, #0x7C]
  00244	e59d307c	 ldr         r3, [sp, #0x7C]
  00248	e58d3014	 str         r3, [sp, #0x14]

; 78   :     OMAP5912_RTC_REGS *pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  0024c	e3a01000	 mov         r1, #0
  00250	e3a00b02	 mov         r0, #2, 22
  00254	e2400913	 sub         r0, r0, #0x13, 18
  00258	eb000000	 bl          OALPAtoVA
  0025c	e58d0080	 str         r0, [sp, #0x80]
  00260	e59d3080	 ldr         r3, [sp, #0x80]
  00264	e58d302c	 str         r3, [sp, #0x2C]

; 79   :     UINT32 intcL1, intcL2A, intcL2B, intcL2C, intcL2D;
; 80   :     UINT32 gpio1, gpio2, gpio3, gpio4;
; 81   :     UINT32 sysIntr;
; 82   :     UINT8 rtcIntrReg;
; 83   : 
; 84   :     // Give chance to do board specific stuff
; 85   :     BSPPowerOff();

  00268	eb000000	 bl          BSPPowerOff

; 86   : 
; 87   :     OALStall(1000000);

  0026c	e3a0093d	 mov         r0, #0x3D, 18
  00270	e3800d09	 orr         r0, r0, #9, 26
  00274	eb000000	 bl          OALStall

; 88   : 
; 89   :     // Save existing interrupt masks and peripheral states
; 90   :     intcL1 = INREG32(&pIntcL1Regs->MIR);

  00278	e59d3004	 ldr         r3, [sp, #4]
  0027c	e2833004	 add         r3, r3, #4
  00280	e5933000	 ldr         r3, [r3]
  00284	e58d3054	 str         r3, [sp, #0x54]

; 91   :     intcL2A = INREG32(&pIntcL2ARegs->MIR); 

  00288	e59d3028	 ldr         r3, [sp, #0x28]
  0028c	e2833004	 add         r3, r3, #4
  00290	e5933000	 ldr         r3, [r3]
  00294	e58d300c	 str         r3, [sp, #0xC]

; 92   :     intcL2B = INREG32(&pIntcL2BRegs->MIR); 

  00298	e59d3024	 ldr         r3, [sp, #0x24]
  0029c	e2833004	 add         r3, r3, #4
  002a0	e5933000	 ldr         r3, [r3]
  002a4	e58d3048	 str         r3, [sp, #0x48]

; 93   :     intcL2C = INREG32(&pIntcL2CRegs->MIR); 

  002a8	e59d3020	 ldr         r3, [sp, #0x20]
  002ac	e2833004	 add         r3, r3, #4
  002b0	e5933000	 ldr         r3, [r3]
  002b4	e58d301c	 str         r3, [sp, #0x1C]

; 94   :     intcL2D = INREG32(&pIntcL2DRegs->MIR); 

  002b8	e59d3040	 ldr         r3, [sp, #0x40]
  002bc	e2833004	 add         r3, r3, #4
  002c0	e5933000	 ldr         r3, [r3]
  002c4	e58d3000	 str         r3, [sp]

; 95   :     gpio1 = INREG32(&pGPIO1Regs->IRQENABLE1);

  002c8	e59d303c	 ldr         r3, [sp, #0x3C]
  002cc	e283301c	 add         r3, r3, #0x1C
  002d0	e5933000	 ldr         r3, [r3]
  002d4	e58d3030	 str         r3, [sp, #0x30]

; 96   :     gpio2 = INREG32(&pGPIO2Regs->IRQENABLE1);

  002d8	e59d3038	 ldr         r3, [sp, #0x38]
  002dc	e283301c	 add         r3, r3, #0x1C
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e58d3008	 str         r3, [sp, #8]

; 97   :     gpio3 = INREG32(&pGPIO3Regs->IRQENABLE1);

  002e8	e59d304c	 ldr         r3, [sp, #0x4C]
  002ec	e283301c	 add         r3, r3, #0x1C
  002f0	e5933000	 ldr         r3, [r3]
  002f4	e58d3018	 str         r3, [sp, #0x18]

; 98   :     gpio4 = INREG32(&pGPIO4Regs->IRQENABLE1);

  002f8	e59d3034	 ldr         r3, [sp, #0x34]
  002fc	e283301c	 add         r3, r3, #0x1C
  00300	e5933000	 ldr         r3, [r3]
  00304	e58d3050	 str         r3, [sp, #0x50]

; 99   :     rtcIntrReg = INREG8(&pRTCRegs->INTR);

  00308	e59d302c	 ldr         r3, [sp, #0x2C]
  0030c	e2833048	 add         r3, r3, #0x48
  00310	e5d33000	 ldrb        r3, [r3]
  00314	e5cd3044	 strb        r3, [sp, #0x44]

; 100  : 
; 101  :     // Disable most interrupts including RTC (left IRQ_L2FIQ/IRQ_L2IRQ enabled) 
; 102  :     OUTREG32(&pIntcL1Regs->MIR, 0xFFFFFFFC);

  00318	e59d3004	 ldr         r3, [sp, #4]
  0031c	e2832004	 add         r2, r3, #4
  00320	e3e03003	 mvn         r3, #3
  00324	e5823000	 str         r3, [r2]

; 103  :     OUTREG32(&pIntcL2ARegs->MIR, 0xFFFFFFFF);

  00328	e59d3028	 ldr         r3, [sp, #0x28]
  0032c	e2832004	 add         r2, r3, #4
  00330	e3e03000	 mvn         r3, #0
  00334	e5823000	 str         r3, [r2]

; 104  :     OUTREG32(&pIntcL2BRegs->MIR, 0xFFFFFFFF);

  00338	e59d3024	 ldr         r3, [sp, #0x24]
  0033c	e2832004	 add         r2, r3, #4
  00340	e3e03000	 mvn         r3, #0
  00344	e5823000	 str         r3, [r2]

; 105  :     OUTREG32(&pIntcL2CRegs->MIR, 0xFFFFFFFF);

  00348	e59d3020	 ldr         r3, [sp, #0x20]
  0034c	e2832004	 add         r2, r3, #4
  00350	e3e03000	 mvn         r3, #0
  00354	e5823000	 str         r3, [r2]

; 106  :     OUTREG32(&pIntcL2DRegs->MIR, 0xFFFFFFFF);

  00358	e59d3040	 ldr         r3, [sp, #0x40]
  0035c	e2832004	 add         r2, r3, #4
  00360	e3e03000	 mvn         r3, #0
  00364	e5823000	 str         r3, [r2]

; 107  :     OUTREG32(&pGPIO1Regs->IRQENABLE1, 0);

  00368	e59d303c	 ldr         r3, [sp, #0x3C]
  0036c	e283201c	 add         r2, r3, #0x1C
  00370	e3a03000	 mov         r3, #0
  00374	e5823000	 str         r3, [r2]

; 108  :     OUTREG32(&pGPIO2Regs->IRQENABLE1, 0);

  00378	e59d3038	 ldr         r3, [sp, #0x38]
  0037c	e283201c	 add         r2, r3, #0x1C
  00380	e3a03000	 mov         r3, #0
  00384	e5823000	 str         r3, [r2]

; 109  :     OUTREG32(&pGPIO3Regs->IRQENABLE1, 0);

  00388	e59d304c	 ldr         r3, [sp, #0x4C]
  0038c	e283201c	 add         r2, r3, #0x1C
  00390	e3a03000	 mov         r3, #0
  00394	e5823000	 str         r3, [r2]

; 110  :     OUTREG32(&pGPIO4Regs->IRQENABLE1, 0);

  00398	e59d3034	 ldr         r3, [sp, #0x34]
  0039c	e283201c	 add         r2, r3, #0x1C
  003a0	e3a03000	 mov         r3, #0
  003a4	e5823000	 str         r3, [r2]

; 111  :     OUTREG8(&pRTCRegs->INTR, rtcIntrReg & ~RTC_INTR_ALARM);

  003a8	e5dd3044	 ldrb        r3, [sp, #0x44]
  003ac	e1a02003	 mov         r2, r3
  003b0	e3e03008	 mvn         r3, #8
  003b4	e0023003	 and         r3, r2, r3
  003b8	e20320ff	 and         r2, r3, #0xFF
  003bc	e59d302c	 ldr         r3, [sp, #0x2C]
  003c0	e2833048	 add         r3, r3, #0x48
  003c4	e5c32000	 strb        r2, [r3]

; 112  : 
; 113  :     OALStall(1000000);

  003c8	e3a0093d	 mov         r0, #0x3D, 18
  003cc	e3800d09	 orr         r0, r0, #9, 26
  003d0	eb000000	 bl          OALStall

; 114  : 
; 115  :     // Enable wake sources interrupts
; 116  :     for (sysIntr = SYSINTR_FIRMWARE; sysIntr < SYSINTR_MAXIMUM; sysIntr++) {

  003d4	e3a03010	 mov         r3, #0x10
  003d8	e58d3010	 str         r3, [sp, #0x10]
  003dc	ea000002	 b           |$LN10@OEMPowerOf|
  003e0		 |$LN9@OEMPowerOf|
  003e0	e59d3010	 ldr         r3, [sp, #0x10]
  003e4	e2833001	 add         r3, r3, #1
  003e8	e58d3010	 str         r3, [sp, #0x10]
  003ec		 |$LN10@OEMPowerOf|
  003ec	e59d3010	 ldr         r3, [sp, #0x10]
  003f0	e3530048	 cmp         r3, #0x48
  003f4	2a000015	 bcs         |$LN8@OEMPowerOf|

; 117  :         // Skip if sysIntr isn't allowed as wake source
; 118  :         if (!OALPowerWakeSource(sysIntr)) continue;

  003f8	e59d0010	 ldr         r0, [sp, #0x10]
  003fc	eb000000	 bl          OALPowerWakeSource
  00400	e58d0084	 str         r0, [sp, #0x84]
  00404	e59d3084	 ldr         r3, [sp, #0x84]
  00408	e3530000	 cmp         r3, #0
  0040c	1a000000	 bne         |$LN7@OEMPowerOf|
  00410	eafffff2	 b           |$LN9@OEMPowerOf|
  00414		 |$LN7@OEMPowerOf|

; 119  :         // Enable it as interrupt
; 120  :         OEMInterruptEnable(sysIntr, NULL, 0);

  00414	e3a02000	 mov         r2, #0
  00418	e3a01000	 mov         r1, #0
  0041c	e59d0010	 ldr         r0, [sp, #0x10]
  00420	eb000000	 bl          OEMInterruptEnable

; 121  : 
; 122  :         if( (SYSINTR_RTC_ALARM == sysIntr) && (rtcIntrReg & RTC_INTR_ALARM) )

  00424	e59d3010	 ldr         r3, [sp, #0x10]
  00428	e353000d	 cmp         r3, #0xD
  0042c	1a000006	 bne         |$LN6@OEMPowerOf|
  00430	e5dd3044	 ldrb        r3, [sp, #0x44]
  00434	e3130008	 tst         r3, #8
  00438	0a000003	 beq         |$LN6@OEMPowerOf|

; 123  :         {
; 124  :             // In the case where we want the RTC to act as a wakeup source we will restore the RTC device's original interrupt
; 125  :             // control state.  We do not force the RTC to be generating interrupts here because we assume the RTC module has already
; 126  :             // been properly setup.
; 127  : 
; 128  :             OUTREG8(&pRTCRegs->INTR, rtcIntrReg);

  0043c	e59d302c	 ldr         r3, [sp, #0x2C]
  00440	e2832048	 add         r2, r3, #0x48
  00444	e5dd3044	 ldrb        r3, [sp, #0x44]
  00448	e5c23000	 strb        r3, [r2]
  0044c		 |$LN6@OEMPowerOf|

; 129  :         }
; 130  :     }

  0044c	eaffffe3	 b           |$LN9@OEMPowerOf|
  00450		 |$LN8@OEMPowerOf|

; 131  : 
; 132  :     // Enable deep sleep
; 133  :     SETREG16(&pULPDRegs->POWER_CTRL, POWER_CTRL_DEEP_SLEEP_EN);

  00450	e59d3014	 ldr         r3, [sp, #0x14]
  00454	e2833050	 add         r3, r3, #0x50
  00458	e1d330b0	 ldrh        r3, [r3]
  0045c	e3833010	 orr         r3, r3, #0x10
  00460	e1a02803	 mov         r2, r3, lsl #16
  00464	e1a02822	 mov         r2, r2, lsr #16
  00468	e59d3014	 ldr         r3, [sp, #0x14]
  0046c	e2833050	 add         r3, r3, #0x50
  00470	e1c320b0	 strh        r2, [r3]

; 134  : 
; 135  :     OALStall(1000000);

  00474	e3a0093d	 mov         r0, #0x3D, 18
  00478	e3800d09	 orr         r0, r0, #9, 26
  0047c	eb000000	 bl          OALStall

; 136  : 
; 137  :     // Move SoC/CPU to idle mode, there is no special power-off
; 138  :     // mode on OMAP5912 (but deep sleep is very similar to it)
; 139  :     OALCPUIdle();

  00480	eb000000	 bl          OALCPUIdle

; 140  : 
; 141  :     // Find wakeup source
; 142  :     for (sysIntr = SYSINTR_FIRMWARE; sysIntr < SYSINTR_MAXIMUM; sysIntr++) {

  00484	e3a03010	 mov         r3, #0x10
  00488	e58d3010	 str         r3, [sp, #0x10]
  0048c	ea000002	 b           |$LN5@OEMPowerOf|
  00490		 |$LN4@OEMPowerOf|
  00490	e59d3010	 ldr         r3, [sp, #0x10]
  00494	e2833001	 add         r3, r3, #1
  00498	e58d3010	 str         r3, [sp, #0x10]
  0049c		 |$LN5@OEMPowerOf|
  0049c	e59d3010	 ldr         r3, [sp, #0x10]
  004a0	e3530048	 cmp         r3, #0x48
  004a4	2a000011	 bcs         |$LN3@OEMPowerOf|

; 143  :         // Skip if sysIntr isn't allowed as wake source
; 144  :         if (!OALPowerWakeSource(sysIntr)) continue;

  004a8	e59d0010	 ldr         r0, [sp, #0x10]
  004ac	eb000000	 bl          OALPowerWakeSource
  004b0	e58d0088	 str         r0, [sp, #0x88]
  004b4	e59d3088	 ldr         r3, [sp, #0x88]
  004b8	e3530000	 cmp         r3, #0
  004bc	1a000000	 bne         |$LN2@OEMPowerOf|
  004c0	eafffff2	 b           |$LN4@OEMPowerOf|
  004c4		 |$LN2@OEMPowerOf|

; 145  :         // When this sysIntr is pending we find wake source
; 146  :         if (OEMInterruptPending(sysIntr)) {

  004c4	e59d0010	 ldr         r0, [sp, #0x10]
  004c8	eb000000	 bl          OEMInterruptPending
  004cc	e58d008c	 str         r0, [sp, #0x8C]
  004d0	e59d308c	 ldr         r3, [sp, #0x8C]
  004d4	e3530000	 cmp         r3, #0
  004d8	0a000003	 beq         |$LN1@OEMPowerOf|

; 147  :             g_oalWakeSource = sysIntr;

  004dc	e59d2010	 ldr         r2, [sp, #0x10]
  004e0	e59f30b8	 ldr         r3, [pc, #0xB8]
  004e4	e5832000	 str         r2, [r3]

; 148  :             break;

  004e8	ea000000	 b           |$LN3@OEMPowerOf|
  004ec		 |$LN1@OEMPowerOf|

; 149  :         }
; 150  :     }

  004ec	eaffffe7	 b           |$LN4@OEMPowerOf|
  004f0		 |$LN3@OEMPowerOf|

; 151  : 
; 152  :     // Do board specific stuff    
; 153  :     BSPPowerOn();

  004f0	eb000000	 bl          BSPPowerOn

; 154  : 
; 155  :     // Restore interrupt masks and peripheral states
; 156  :     OUTREG8(&pRTCRegs->INTR, rtcIntrReg);

  004f4	e59d302c	 ldr         r3, [sp, #0x2C]
  004f8	e2832048	 add         r2, r3, #0x48
  004fc	e5dd3044	 ldrb        r3, [sp, #0x44]
  00500	e5c23000	 strb        r3, [r2]

; 157  :     OUTREG32(&pIntcL1Regs->MIR, intcL1);

  00504	e59d3004	 ldr         r3, [sp, #4]
  00508	e2832004	 add         r2, r3, #4
  0050c	e59d3054	 ldr         r3, [sp, #0x54]
  00510	e5823000	 str         r3, [r2]

; 158  :     OUTREG32(&pIntcL2ARegs->MIR, intcL2A);

  00514	e59d3028	 ldr         r3, [sp, #0x28]
  00518	e2832004	 add         r2, r3, #4
  0051c	e59d300c	 ldr         r3, [sp, #0xC]
  00520	e5823000	 str         r3, [r2]

; 159  :     OUTREG32(&pIntcL2BRegs->MIR, intcL2B);

  00524	e59d3024	 ldr         r3, [sp, #0x24]
  00528	e2832004	 add         r2, r3, #4
  0052c	e59d3048	 ldr         r3, [sp, #0x48]
  00530	e5823000	 str         r3, [r2]

; 160  :     OUTREG32(&pIntcL2CRegs->MIR, intcL2C);

  00534	e59d3020	 ldr         r3, [sp, #0x20]
  00538	e2832004	 add         r2, r3, #4
  0053c	e59d301c	 ldr         r3, [sp, #0x1C]
  00540	e5823000	 str         r3, [r2]

; 161  :     OUTREG32(&pIntcL2DRegs->MIR, intcL2D);

  00544	e59d3040	 ldr         r3, [sp, #0x40]
  00548	e2832004	 add         r2, r3, #4
  0054c	e59d3000	 ldr         r3, [sp]
  00550	e5823000	 str         r3, [r2]

; 162  :     OUTREG32(&pGPIO1Regs->IRQENABLE1, gpio1);

  00554	e59d303c	 ldr         r3, [sp, #0x3C]
  00558	e283201c	 add         r2, r3, #0x1C
  0055c	e59d3030	 ldr         r3, [sp, #0x30]
  00560	e5823000	 str         r3, [r2]

; 163  :     OUTREG32(&pGPIO2Regs->IRQENABLE1, gpio2);

  00564	e59d3038	 ldr         r3, [sp, #0x38]
  00568	e283201c	 add         r2, r3, #0x1C
  0056c	e59d3008	 ldr         r3, [sp, #8]
  00570	e5823000	 str         r3, [r2]

; 164  :     OUTREG32(&pGPIO3Regs->IRQENABLE1, gpio3);

  00574	e59d304c	 ldr         r3, [sp, #0x4C]
  00578	e283201c	 add         r2, r3, #0x1C
  0057c	e59d3018	 ldr         r3, [sp, #0x18]
  00580	e5823000	 str         r3, [r2]

; 165  :     OUTREG32(&pGPIO4Regs->IRQENABLE1, gpio4);

  00584	e59d3034	 ldr         r3, [sp, #0x34]
  00588	e283201c	 add         r2, r3, #0x1C
  0058c	e59d3050	 ldr         r3, [sp, #0x50]
  00590	e5823000	 str         r3, [r2]

; 166  : }

  00594	e28dd090	 add         sp, sp, #0x90
  00598	e49de004	 ldr         lr, [sp], #4
  0059c	e12fff1e	 bx          lr
  005a0		 |$LN16@OEMPowerOf|
  005a0		 |$LN17@OEMPowerOf|
  005a0	00000000	 DCD         |g_oalWakeSource|
  005a4		 |$M44041|

			 ENDP  ; |OEMPowerOff|

	END
