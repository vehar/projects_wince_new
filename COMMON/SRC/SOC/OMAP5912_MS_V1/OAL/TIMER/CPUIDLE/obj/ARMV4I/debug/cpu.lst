ARM macroassembler      Page:1 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ; Portions Copyright (c) Texas Instruments.  All rights reserved.  
   14 00000000          ; 
   15 00000000          ;------------------------------------------------------------------------------ 
   16 00000000            
   17 00000000                  INCLUDE kxarm.h 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;++ 
   14 00000000          ; 
   15 00000000          ; 
   16 00000000          ; Module Name: 
   17 00000000          ; 
   18 00000000          ;    kxarm.h 
   19 00000000          ; 
   20 00000000          ; Abstract: 
   21 00000000          ; 
   22 00000000          ;    This is an implementation of the WINCE/ARM Calling Sequence 
   23 00000000          ;    Specification. 
   24 00000000          ; 
   25 00000000          ; Environment: 
   26 00000000          ;    String Library 
   27 00000000          ; 
   28 00000000          ; Revision History: 
   29 00000000          ;-- 
   30 00000000            
   31 00000000                          GBLS    VBar 
   32 00000000          VBar    SETS    "|" 
   33 00000000                          GBLL    HaveExceptHandler 
   34 00000000                          GBLS    AreaName 
   35 00000000                          GBLS    FuncName 
   36 00000000                          GBLS    PrologName 
   37 00000000                          GBLS    FuncEndName 
   38 00000000                          GBLS    ExceptHandler 
   39 00000000                          GBLS    ExceptData 
   40 00000000          AreaName SETS   "|.text|" 
   41 00000000          HaveExceptHandler SETL {FALSE} 
   42 00000000            
   43 00000000                  MACRO 
   44 00000000                  TEXTAREA 
   45 00000000                  AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   47 00000000                  MEND 
   48 00000000            
   49 00000000              MACRO 
   50 00000000              THUMBAREA 
   51 00000000              AREA |.text|,ALIGN=2,CODE,READONLY,THUMB 
   52 00000000          AreaName SETS "|.text|" 
   53 00000000              MEND 
   54 00000000            
   55 00000000                  MACRO 
   56 00000000                  STARTUPTEXT 
   57 00000000                  AREA |.astart|,ALIGN=2,CODE 
   58 00000000          AreaName SETS "|.astart|" 
   59 00000000                  MEND 
   60 00000000            
   61 00000000                  MACRO 
   62 00000000                  START_REGION    $NameBegin 
   63 00000000                  LCLS    TempName 
   64 00000000          TempName SETS    VBar:CC:"$NameBegin":CC:VBar 
   65 00000000                  EXPORT  $TempName[DATA] 
   66 00000000          $TempName 
   67 00000000                  MEND 
   68 00000000            
   69 00000000                  MACRO 
   70 00000000                  END_REGION              $NameEnd 
   71 00000000                  LCLS    TempName 
   72 00000000          TempName SETS    VBar:CC:"$NameEnd":CC:VBar 
   73 00000000                  EXPORT  $TempName[DATA] 
   74 00000000          $TempName 
   75 00000000                  MEND 
   76 00000000            
   77 00000000          ; 
   78 00000000          ;   This macro should be used if the assembly function is in ARM 
   79 00000000          ; 
   80 00000000            
   81 00000000                  MACRO 
   82 00000000                  NESTED_ARMENTRY $Name 
   83 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
   84 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
   85 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
   86 00000000                  LCLS    ExceptBit 
   87 00000000                  IF HaveExceptHandler 
   88 00000000          ExceptBit   SETS        "0x80000000" 
   89 00000000                  ELSE 
   90 00000000          ExceptBit   SETS        "0" 
   91 00000000                  ENDIF 
   92 00000000            
   93 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
   94 00000000                  DCD         $FuncName 
   95 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
   96 00000000                  AREA $AreaName,CODE,READONLY 
   97 00000000                  ALIGN   2 
   98 00000000                  EXPORT  $FuncName [FUNC] 
   99 00000000                  IF HaveExceptHandler 
  100 00000000              DCD $ExceptHandler 
  101 00000000              DCD $ExceptData 
  102 00000000          HaveExceptHandler SETL {FALSE} 
  103 00000000                  ENDIF 
  104 00000000          $FuncName 
  105 00000000                  ROUT 
  106 00000000                  MEND 
  107 00000000            
  108 00000000          ; 
  109 00000000          ;   This macro should be used if the assembly function is in THUMB 
  110 00000000          ; 
  111 00000000                  MACRO 
  112 00000000                  NESTED_THUMBENTRY       $Name 
  113 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  114 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  115 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  116 00000000                  LCLS    ExceptBit 
  117 00000000                  IF HaveExceptHandler 
  118 00000000          ExceptBit   SETS        "0x80000000" 
  119 00000000                  ELSE 
  120 00000000          ExceptBit   SETS        "0" 
  121 00000000                  ENDIF 
  122 00000000            
  123 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  124 00000000                  DCD         $FuncName 
  125 00000000              DCD     (($PrologName-$FuncName)/2) :OR: ((($FuncEndName-$FuncName)/2):SHL:8) :OR: $ExceptBit 
  126 00000000                  AREA $AreaName,CODE,READONLY 
  127 00000000                  ALIGN   2 
  128 00000000                  EXPORT  $FuncName [FUNC] 
  129 00000000                  IF HaveExceptHandler 
  130 00000000              DCD $ExceptHandler 
  131 00000000              DCD $ExceptData 
  132 00000000          HaveExceptHandler SETL {FALSE} 
  133 00000000                  ENDIF 
  134 00000000          $FuncName 
  135 00000000                  ROUT 
  136 00000000                  MEND 
  137 00000000            
  138 00000000          ; 
  139 00000000          ;   This macro should be used if the assembly function is in ARM 
  140 00000000          ; 
  141 00000000                  MACRO 
  142 00000000                  NESTED_ENTRY    $Name 
  143 00000000          FuncName    SETS    VBar:CC:"$Name":CC:VBar 
  144 00000000          PrologName  SETS    VBar:CC:"$Name":CC:"_Prolog":CC:VBar 
  145 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  146 00000000                  LCLS    ExceptBit 
  147 00000000                  IF HaveExceptHandler 
  148 00000000          ExceptBit   SETS        "0x80000000" 
  149 00000000                  ELSE 
  150 00000000          ExceptBit   SETS        "0" 
  151 00000000                  ENDIF 
  152 00000000            
  153 00000000                  AREA |.pdata|,ALIGN=2,PDATA 
  154 00000000                  DCD         $FuncName 
  155 00000000              DCD     (($PrologName-$FuncName)/4) :OR: ((($FuncEndName-$FuncName)/4):SHL:8) :OR: 0x40000000 :OR: $ExceptBit 
  156 00000000                  AREA $AreaName,CODE,READONLY 
  157 00000000                  ALIGN   2 
  158 00000000                  EXPORT  $FuncName [FUNC] 
  159 00000000                  IF HaveExceptHandler 
  160 00000000              DCD $ExceptHandler 
  161 00000000              DCD $ExceptData 
  162 00000000          HaveExceptHandler SETL {FALSE} 
  163 00000000                  ENDIF 
  164 00000000          $FuncName 
  165 00000000                  ROUT 
  166 00000000                  MEND 
  167 00000000            
  168 00000000                  MACRO 
  169 00000000                  PROLOG_END 
  170 00000000          $PrologName 
  171 00000000                  MEND 
  172 00000000            
  173 00000000                  MACRO 
  174 00000000                  LEAF_ENTRY      $Name 
  175 00000000          FuncName SETS    VBar:CC:"$Name":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"$Name":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  $FuncName [FUNC] 
  180 00000000          $FuncName 
  181 00000000                  ROUT 
  182 00000000                  MEND 
  183 00000000            
  184 00000000                  MACRO 
  185 00000000                  ALTERNATE_ENTRY $Name 
  186 00000000                  LCLS    TempName 
  187 00000000          TempName SETS    VBar:CC:"$Name":CC:VBar 
  188 00000000                  EXPORT  $TempName [FUNC] 
  189 00000000          $TempName 
  190 00000000                  MEND 
  191 00000000            
  192 00000000                  MACRO 
  193 00000000                  ENTRY_END       $Name 
  194 00000000          $FuncEndName 
  195 00000000                  MEND 
  196 00000000            
  197 00000000                  MACRO 
  198 00000000                  EXCEPTION_HANDLER       $Handler 
  199 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  200 00000000          ExceptData SETS "0" 
  201 00000000          HaveExceptHandler SETL {TRUE} 
  202 00000000                  MEND 
  203 00000000            
  204 00000000                  MACRO 
  205 00000000                  EXCEPTION_HANDLER_DATA  $Handler, $HandlerData 
  206 00000000          ExceptHandler SETS    VBar:CC:"$Handler":CC:VBar 
  207 00000000          ExceptData SETS    VBar:CC:"$HandlerData":CC:VBar 
  208 00000000          HaveExceptHandler SETL {TRUE} 
  209 00000000                  MEND 
  210 00000000            
  211 00000000                  MACRO 
  212 00000000                  EXCEPTION_HANDLER_MILLICODE     $Handler, $HandlerData 
  213 00000000          ExceptHandler SETS    "$Handler" 
  214 00000000          ExceptData SETS    "$HandlerData" 
  215 00000000          HaveExceptHandler SETL {TRUE} 
  216 00000000                  MEND 
  217 00000000            
  218 00000000            
  219 00000000                  END 
   18 00000000                  INCLUDE omap5912_emif.inc 
    1 00000000          ; 
    2 00000000          ; Copyright (c) Microsoft Corporation.  All rights reserved. 
    3 00000000          ; 
    4 00000000          ; 
    5 00000000          ; Use of this sample source code is subject to the terms of the Microsoft 
    6 00000000          ; license agreement under which you licensed this sample source code. If 
    7 00000000          ; you did not accept the terms of the license agreement, you are not 
    8 00000000          ; authorized to use this sample source code. For the terms of the license, 
    9 00000000          ; please see the license agreement between you and Microsoft or, if applicable, 
   10 00000000          ; see the LICENSE.RTF on your install media or the root of your tools installation. 
   11 00000000          ; THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES. 
   12 00000000          ; 
   13 00000000          ;------------------------------------------------------------------------------ 
   14 00000000          ; 
   15 00000000          ;  File:  omap5912_emif.inc 
   16 00000000          ; 
   17 00000000          ;  This file defines offset addresses for EMIF registers.  
   18 00000000          ; 
   19 00000000          OMAP5912_EMIF_OCPT1_PRIOR_REGS_OA               EQU     0x0000 
   20 00000000          OMAP5912_EMIF_EMIFS_LRUREG_REGS_OA              EQU     0x0004 
   21 00000000          OMAP5912_EMIF_EMIFF_PRIORITY_REGS_OA            EQU     0x0008 
   22 00000000          OMAP5912_EMIF_EMIFS_CONFIG_REGS_OA              EQU     0x000C 
   23 00000000          OMAP5912_EMIF_EMIFS_CFG_0_REGS_OA               EQU     0x0010 
   24 00000000          OMAP5912_EMIF_EMIFS_CFG_1_REGS_OA               EQU     0x0014 
   25 00000000          OMAP5912_EMIF_EMIFS_CFG_2_REGS_OA               EQU     0x0018 
   26 00000000          OMAP5912_EMIF_EMIFS_CFG_3_REGS_OA               EQU     0x001C 
   27 00000000          OMAP5912_EMIF_EMIFF_CONFIG_REGS_OA              EQU     0x0020 
   28 00000000          OMAP5912_EMIF_EMIFF_MRS_REGS_OA                 EQU     0x0024 
   29 00000000          OMAP5912_EMIF_EMIFS_TIMEOUT1_REGS_OA            EQU     0x0028 
   30 00000000          OMAP5912_EMIF_EMIFS_TIMEOUT2_REGS_OA            EQU     0x002C 
   31 00000000          OMAP5912_EMIF_EMIFS_TIMEOUT3_REGS_OA            EQU     0x0030 
   32 00000000          OMAP5912_EMIF_ENDIANISM_CONTROL_REGS_OA         EQU     0x0034 
   33 00000000          OMAP5912_EMIF_RESERVED_0038_REGS_OA             EQU     0x0038 
   34 00000000          OMAP5912_EMIF_EMIFF_CONFIG2_REGS_OA             EQU     0x003C 
   35 00000000          OMAP5912_EMIF_EMIFS_FL_CFG_DYN_WAIT_REGS_OA     EQU     0x0040 
   36 00000000          OMAP5912_EMIF_EMIFS_ABORT_ADDR_REGS_OA          EQU     0x0044 
   37 00000000          OMAP5912_EMIF_EMIFS_ABORT_TYPE_REGS_OA          EQU     0x0048 
   38 00000000          OMAP5912_EMIF_EMIFS_ABORT_TOUT_REGS_OA          EQU     0x004C 
   39 00000000          OMAP5912_EMIF_EMIFS_ACFG_0_I_REGS_OA            EQU     0x0050 
   40 00000000          OMAP5912_EMIF_EMIFS_ACFG_1_I_REGS_OA            EQU     0x0054 
   41 00000000          OMAP5912_EMIF_EMIFS_ACFG_2_I_REGS_OA            EQU     0x0058 
   42 00000000          OMAP5912_EMIF_EMIFS_ACFG_3_I_REGS_OA            EQU     0x005C 
   43 00000000          OMAP5912_EMIF_EMIFF_DOUBLER_EN_REGS_OA          EQU     0x0060 
   44 00000000          OMAP5912_EMIF_EMIFF_DLL_WRT_CONTROL_REGS_OA     EQU     0x0064 
   45 00000000          OMAP5912_EMIF_EMIFF_DLL_WRT_STATUS_REGS_OA      EQU     0x0068 
   46 00000000          OMAP5912_EMIF_RESERVED_006C_REGS_OA             EQU     0x006C 
   47 00000000          OMAP5912_EMIF_EMIFF_MRS_NEW_REGS_OA             EQU     0x0070 
   48 00000000          OMAP5912_EMIF_EMIFF_EMRS0_REGS_OA               EQU     0x0074 
   49 00000000          OMAP5912_EMIF_EMIFF_EMRS1_REGS_OA               EQU     0x0078 
   50 00000000          OMAP5912_EMIF_RESERVED_007C_REGS_OA             EQU     0x007C 
   51 00000000          OMAP5912_EMIF_EMIFF_OPERATION_REGS_OA           EQU     0x0080 
   52 00000000          OMAP5912_EMIF_EMIFF_MANUAL_CMD_REGS_OA          EQU     0x0084 
   53 00000000          OMAP5912_EMIF_RESERVED_0088_REGS_OA             EQU     0x0088 
   54 00000000          OMAP5912_EMIF_EMIFF_TIMEOUT1_REGS_OA            EQU     0x008C 
   55 00000000          OMAP5912_EMIF_EMIFF_TIMEOUT2_REGS_OA            EQU     0x0090 
   56 00000000          OMAP5912_EMIF_EMIFF_TIMEOUT3_REGS_OA            EQU     0x0094 
   57 00000000          OMAP5912_EMIF_EMIFF_ABORT_ADDRESS_REGS_OA       EQU     0x0098 
   58 00000000          OMAP5912_EMIF_EMIFF_ABORT_TYPE_REGS_OA          EQU     0x009C 
   59 00000000          OMAP5912_EMIF_OCPT1_PTOR1_REGS_OA               EQU     0x00A0 
   60 00000000          OMAP5912_EMIF_OCPT1_PTOR2_REGS_OA               EQU     0x00A4 
   61 00000000          OMAP5912_EMIF_OCPT1_PTOR3_REGS_OA               EQU     0x00A8 
   62 00000000          OMAP5912_EMIF_OCPT1_ATOR_REGS_OA                EQU     0x00AC 
   63 00000000          OMAP5912_EMIF_OCPT1_AADDR_REGS_OA               EQU     0x00B0 
   64 00000000          OMAP5912_EMIF_OCPT1_ATYPER_REGS_OA              EQU     0x00B4 
   65 00000000          OMAP5912_EMIF_OCPT_CONFIG_REGS_OA               EQU     0x00B8 
   66 00000000          OMAP5912_EMIF_EMIFF_DLL_LRD_STATUS_REGS_OA      EQU     0x00BC 
   67 00000000          OMAP5912_EMIF_EMIFF_DLL_URD_CONTROL_REGS_OA     EQU     0x00C0 
   68 00000000          OMAP5912_EMIF_EMIFF_DLL_URD_STATUS_REGS_OA      EQU     0x00C4 
   69 00000000          OMAP5912_EMIF_EMIFF_EMRS2_REGS_OA               EQU     0x00C8 
   70 00000000          OMAP5912_EMIF_EMIFF_DLL_LRD_CONTROL_REGS_OA     EQU     0x00CC 
   71 00000000          OMAP5912_EMIF_OCPT2_PRIOR_REGS_OA               EQU     0x00D0 
   72 00000000          OMAP5912_EMIF_OCPT2_PTOR1_REGS_OA               EQU     0x00D4 
   73 00000000          OMAP5912_EMIF_OCPT2_PTOR2_REGS_OA               EQU     0x00D8 
   74 00000000          OMAP5912_EMIF_OCPT2_PTOR3_REGS_OA               EQU     0x00DC 
   75 00000000          OMAP5912_EMIF_OCPT2_ATOR_REGS_OA                EQU     0x00E0 
   76 00000000          OMAP5912_EMIF_OCPT2_AADDR_REGS_OA               EQU     0x00E4 
   77 00000000          OMAP5912_EMIF_OCPT2_ATYPER_REGS_OA              EQU     0x00E8 
   78 00000000            
   79 00000000          ;------------------------------------------------------------------------------ 
   80 00000000            
   81 00000000                                                          END 
   19 00000000            
   20 00000000                  EXPORT OALCPUIdle 
   21 00000000                  IMPORT g_pOALEMIFRegs 
   22 00000000                   
   23 00000000                  TEXTAREA 
   45                           AREA |.text|,ALIGN=2,CODE,READONLY 
   46 00000000          AreaName SETS "|.text|" 
   24 00000000            
   25 00000000          ;------------------------------------------------------------------------------- 
   26 00000000          ; 
   27 00000000          ;  Function:  OALCPUIdle 
   28 00000000          ; 
   29 00000000          ; 
   30 00000000          ;  This routine is called by the kernel when there are no threads ready to 
   31 00000000          ;  run. The CPU should be put into a reduced power mode and halted. It is 
   32 00000000          ;  important to be able to resume execution quickly upon receiving an interrupt. 
   33 00000000          ; 
   34 00000000          ; 
   35 00000000            
   36 00000000                  ALIGN   1024                    ; Align on 1KB boundary to avoid 
   37 00000000                                                  ; ARM926EJ-S WFI bug 
   38 00000000            
   39 00000000                  LEAF_ENTRY OALCPUIdle 
  175 00000000          FuncName SETS    VBar:CC:"OALCPUIdle":CC:VBar 
  176 00000000          PrologName SETS "Invalid Prolog" 
  177 00000000          FuncEndName SETS    VBar:CC:"OALCPUIdle":CC:"_end":CC:VBar 
  178 00000000                  ALIGN   2 
  179 00000000                  EXPORT  |OALCPUIdle| [FUNC] 
  180 00000000          |OALCPUIdle| 
  181 00000000                  ROUT 
   40 00000000            
   41 00000000 e3a00000         mov     r0, #0 
   42 00000004 ee070f9a         mcr     p15, 0, r0, c7, c10, 4 
   43 00000008            
   44 00000008                  ; Prefetch sleep command          
   45 00000008 e28f0024         add     r0, pc, #(SLEEP - . + 8) 
   46 0000000c ee070f3d         mcr     p15, 0, r0, c7, c13, 1 
   47 00000010                   
   48 00000010                  ; Set SDRAM to self-refresh mode 
   49 00000010 e59f0024         ldr     r0, =g_pOALEMIFRegs 
   50 00000014 e5900000         ldr     r0, [r0] 
   51 00000018 e5901020         ldr     r1, [r0, #OMAP5912_EMIF_EMIFF_CONFIG_REGS_OA] 
   52 0000001c e3811001         orr     r1, r1, #(1 :SHL: 0) 
   53 00000020 e5801020         str     r1, [r0, #OMAP5912_EMIF_EMIFF_CONFIG_REGS_OA] 
   54 00000024            
   55 00000024                  ; Write Sleep Command 
   56 00000024 ee070f90 SLEEP   mcr     p15, 0, r0, c7, c0, 4 
   57 00000028            
   58 00000028 e1a00000         nop 
   59 0000002c e1a00000         nop 
   60 00000030 e1a00000         nop 
   61 00000034 e1a00000         nop 
   62 00000038                   
   63 00000038 e1a0f00e         mov pc, lr 
   64 0000003c            
   65 0000003c                  ENTRY_END 
  194 0000003c          |OALCPUIdle_end| 
   66 0000003c            
   67 0000003c                  END 
   68 0000003c 00000000 *literal pool: symbol:  g_pOALEMIFRegs + 0x0 
Assembly terminated, errors: 0, warnings: 0 
