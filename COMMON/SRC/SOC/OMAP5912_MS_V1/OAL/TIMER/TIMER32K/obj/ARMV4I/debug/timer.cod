; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP5912_MS_V1\OAL\TIMER\TIMER32K\timer.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|g_timer|, 0x18

	 COMMON	|g_pOALEMIFRegs|, 0x4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1DC@BNLGCJKD@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALTimerInit|
	IMPORT	|OALPAtoVA|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALIntrRequestSysIntr|
	IMPORT	|g_oalTimerIrq|
	IMPORT	|g_pNKGlobal|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T44066| DCD	|$LN14@OALTimerIn|
	DCD	0x40009c04
; File c:\wince600\platform\common\src\soc\omap5912_ms_v1\oal\timer\timer32k\timer.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@BNLGCJKD@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " "
	DCB	0x0, "e", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerInit| PROC

; 100  : ) {

  00000		 |$LN14@OALTimerIn|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M44063|

; 101  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 102  :     UINT32 sysIntr;
; 103  : 
; 104  : 
; 105  :     OALMSG(OAL_TIMER&&OAL_FUNC, (
; 106  :         L"+OALTimerInit(%d, %d, %d)\r\n", sysTickMSec, countsPerMSec,
; 107  :         countsMargin
; 108  :     ));

  00018	e59f3234	 ldr         r3, [pc, #0x234]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130b02	 tst         r3, #2, 22
  00024	0a00000b	 beq         |$LN6@OALTimerIn|
  00028	e59f3224	 ldr         r3, [pc, #0x224]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130004	 tst         r3, #4
  00034	0a000007	 beq         |$LN6@OALTimerIn|
  00038	e59d3038	 ldr         r3, [sp, #0x38]
  0003c	e59d2034	 ldr         r2, [sp, #0x34]
  00040	e59d1030	 ldr         r1, [sp, #0x30]
  00044	e59f0220	 ldr         r0, [pc, #0x220]
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e3a03001	 mov         r3, #1
  00050	e58d300c	 str         r3, [sp, #0xC]
  00054	ea000001	 b           |$LN7@OALTimerIn|
  00058		 |$LN6@OALTimerIn|
  00058	e3a03000	 mov         r3, #0
  0005c	e58d300c	 str         r3, [sp, #0xC]
  00060		 |$LN7@OALTimerIn|

; 109  : 
; 110  :     // 32K timer has 24 bits
; 111  :     g_timer.maxIdleMSec = 0x1000000 >> 5;

  00060	e59f21f0	 ldr         r2, [pc, #0x1F0]
  00064	e3a03702	 mov         r3, #2, 14
  00068	e5823000	 str         r3, [r2]

; 112  :     g_timer.updatePeriod = FALSE;

  0006c	e59f21e4	 ldr         r2, [pc, #0x1E4]
  00070	e3a03000	 mov         r3, #0
  00074	e5823014	 str         r3, [r2, #0x14]

; 113  : 
; 114  :     // Set idle conversion constant and counters
; 115  :     idleconv = 32768;

  00078	e59f31e8	 ldr         r3, [pc, #0x1E8]
  0007c	e5933000	 ldr         r3, [r3]
  00080	e28320d8	 add         r2, r3, #0xD8
  00084	e3a03902	 mov         r3, #2, 18
  00088	e5823000	 str         r3, [r2]

; 116  :     curridlehigh = curridlelow = 0;

  0008c	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00090	e5933000	 ldr         r3, [r3]
  00094	e28320d0	 add         r2, r3, #0xD0
  00098	e3a03000	 mov         r3, #0
  0009c	e5823000	 str         r3, [r2]
  000a0	e59f31c0	 ldr         r3, [pc, #0x1C0]
  000a4	e5933000	 ldr         r3, [r3]
  000a8	e28320d4	 add         r2, r3, #0xD4
  000ac	e3a03000	 mov         r3, #0
  000b0	e5823000	 str         r3, [r2]

; 117  :     g_timer.curCounts = 0;

  000b4	e59f219c	 ldr         r2, [pc, #0x19C]
  000b8	e3a03000	 mov         r3, #0
  000bc	e5823008	 str         r3, [r2, #8]
  000c0	e59f2190	 ldr         r2, [pc, #0x190]
  000c4	e3a03000	 mov         r3, #0
  000c8	e582300c	 str         r3, [r2, #0xC]

; 118  : 
; 119  :     // Set global variable to tell interrupt module about timer used
; 120  :     g_oalTimerIrq = IRQ_TIMER32K;

  000cc	e59f2190	 ldr         r2, [pc, #0x190]
  000d0	e3a03036	 mov         r3, #0x36
  000d4	e5823000	 str         r3, [r2]

; 121  : 
; 122  :     // Request SYSINTR for timer IRQ, it is done to reserve it...
; 123  :     sysIntr = OALIntrRequestSysIntr(1, &g_oalTimerIrq, OAL_INTR_FORCE_STATIC);

  000d8	e3a02004	 mov         r2, #4
  000dc	e59f1180	 ldr         r1, [pc, #0x180]
  000e0	e3a00001	 mov         r0, #1
  000e4	eb000000	 bl          OALIntrRequestSysIntr
  000e8	e58d0010	 str         r0, [sp, #0x10]
  000ec	e59d3010	 ldr         r3, [sp, #0x10]
  000f0	e58d3004	 str         r3, [sp, #4]

; 124  : 
; 125  :     // Enable System Tick interrupt
; 126  :     if (!OEMInterruptEnable(sysIntr, NULL, 0)) {

  000f4	e3a02000	 mov         r2, #0
  000f8	e3a01000	 mov         r1, #0
  000fc	e59d0004	 ldr         r0, [sp, #4]
  00100	eb000000	 bl          OEMInterruptEnable
  00104	e58d0014	 str         r0, [sp, #0x14]
  00108	e59d3014	 ldr         r3, [sp, #0x14]
  0010c	e3530000	 cmp         r3, #0
  00110	1a00000b	 bne         |$LN3@OALTimerIn|

; 127  :         OALMSG(OAL_ERROR, (
; 128  :             L"ERROR: OALTimerInit: Interrupt enable for system timer failed"
; 129  :         ));

  00114	e59f3138	 ldr         r3, [pc, #0x138]
  00118	e5933440	 ldr         r3, [r3, #0x440]
  0011c	e3130001	 tst         r3, #1
  00120	0a000004	 beq         |$LN8@OALTimerIn|
  00124	e59f0134	 ldr         r0, [pc, #0x134]
  00128	eb000000	 bl          NKDbgPrintfW
  0012c	e3a03001	 mov         r3, #1
  00130	e58d3018	 str         r3, [sp, #0x18]
  00134	ea000001	 b           |$LN9@OALTimerIn|
  00138		 |$LN8@OALTimerIn|
  00138	e3a03000	 mov         r3, #0
  0013c	e58d3018	 str         r3, [sp, #0x18]
  00140		 |$LN9@OALTimerIn|

; 130  :         goto cleanUp;

  00140	ea00002c	 b           |$cleanUp$43926|
  00144		 |$LN3@OALTimerIn|

; 131  :     }
; 132  : 
; 133  :     // Get virtual addresses for hardware
; 134  :     g_timer.pTimerRegs = OALPAtoUA(OMAP5912_TIMER32K_REGS_PA);

  00144	e3a01000	 mov         r1, #0
  00148	e2410a47	 sub         r0, r1, #0x47, 20
  0014c	eb000000	 bl          OALPAtoVA
  00150	e58d001c	 str         r0, [sp, #0x1C]
  00154	e59d201c	 ldr         r2, [sp, #0x1C]
  00158	e59f30f8	 ldr         r3, [pc, #0xF8]
  0015c	e5832010	 str         r2, [r3, #0x10]

; 135  :     g_pOALEMIFRegs = OALPAtoUA(OMAP5912_EMIF_REGS_PA);

  00160	e3a01000	 mov         r1, #0
  00164	e2410b4d	 sub         r0, r1, #0x4D, 22
  00168	eb000000	 bl          OALPAtoVA
  0016c	e58d0020	 str         r0, [sp, #0x20]
  00170	e59d2020	 ldr         r2, [sp, #0x20]
  00174	e59f30e0	 ldr         r3, [pc, #0xE0]
  00178	e5832000	 str         r2, [r3]

; 136  : 
; 137  :     // Start timer
; 138  :     OUTREG32(&g_timer.pTimerRegs->TVR, TIMER_PERIOD - 1);

  0017c	e59f30d4	 ldr         r3, [pc, #0xD4]
  00180	e5932010	 ldr         r2, [r3, #0x10]
  00184	e3a0301f	 mov         r3, #0x1F
  00188	e5823000	 str         r3, [r2]

; 139  :     SETREG32(&g_timer.pTimerRegs->CR, CR_TRB);

  0018c	e59f30c4	 ldr         r3, [pc, #0xC4]
  00190	e5933010	 ldr         r3, [r3, #0x10]
  00194	e2833008	 add         r3, r3, #8
  00198	e5933000	 ldr         r3, [r3]
  0019c	e3832002	 orr         r2, r3, #2
  001a0	e59f30b0	 ldr         r3, [pc, #0xB0]
  001a4	e5933010	 ldr         r3, [r3, #0x10]
  001a8	e2833008	 add         r3, r3, #8
  001ac	e5832000	 str         r2, [r3]
  001b0		 |$LN2@OALTimerIn|

; 140  :     while ((INREG32(&g_timer.pTimerRegs->CR) & CR_TRB) != 0);

  001b0	e59f30a0	 ldr         r3, [pc, #0xA0]
  001b4	e5933010	 ldr         r3, [r3, #0x10]
  001b8	e2833008	 add         r3, r3, #8
  001bc	e5933000	 ldr         r3, [r3]
  001c0	e3130002	 tst         r3, #2
  001c4	0a000000	 beq         |$LN1@OALTimerIn|
  001c8	eafffff8	 b           |$LN2@OALTimerIn|
  001cc		 |$LN1@OALTimerIn|

; 141  :     SETREG32(&g_timer.pTimerRegs->CR, CR_TSS|CR_INT_EN|CR_ARL);

  001cc	e59f3084	 ldr         r3, [pc, #0x84]
  001d0	e5933010	 ldr         r3, [r3, #0x10]
  001d4	e2833008	 add         r3, r3, #8
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e383200d	 orr         r2, r3, #0xD
  001e0	e59f3070	 ldr         r3, [pc, #0x70]
  001e4	e5933010	 ldr         r3, [r3, #0x10]
  001e8	e2833008	 add         r3, r3, #8
  001ec	e5832000	 str         r2, [r3]

; 142  : 
; 143  :     // Done
; 144  :     rc = TRUE;

  001f0	e3a03001	 mov         r3, #1
  001f4	e58d3000	 str         r3, [sp]
  001f8		 |$cleanUp$43926|

; 145  : 
; 146  : cleanUp:
; 147  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OALTimerInit(rc = %d)\r\n", rc));

  001f8	e59f3054	 ldr         r3, [pc, #0x54]
  001fc	e5933440	 ldr         r3, [r3, #0x440]
  00200	e3130b02	 tst         r3, #2, 22
  00204	0a000009	 beq         |$LN10@OALTimerIn|
  00208	e59f3044	 ldr         r3, [pc, #0x44]
  0020c	e5933440	 ldr         r3, [r3, #0x440]
  00210	e3130004	 tst         r3, #4
  00214	0a000005	 beq         |$LN10@OALTimerIn|
  00218	e59d1000	 ldr         r1, [sp]
  0021c	e59f002c	 ldr         r0, [pc, #0x2C]
  00220	eb000000	 bl          NKDbgPrintfW
  00224	e3a03001	 mov         r3, #1
  00228	e58d3024	 str         r3, [sp, #0x24]
  0022c	ea000001	 b           |$LN11@OALTimerIn|
  00230		 |$LN10@OALTimerIn|
  00230	e3a03000	 mov         r3, #0
  00234	e58d3024	 str         r3, [sp, #0x24]
  00238		 |$LN11@OALTimerIn|

; 148  :     return rc;

  00238	e59d3000	 ldr         r3, [sp]
  0023c	e58d3008	 str         r3, [sp, #8]

; 149  : }

  00240	e59d0008	 ldr         r0, [sp, #8]
  00244	e28dd028	 add         sp, sp, #0x28
  00248	e89d6000	 ldmia       sp, {sp, lr}
  0024c	e12fff1e	 bx          lr
  00250		 |$LN15@OALTimerIn|
  00250		 |$LN16@OALTimerIn|
  00250	00000000	 DCD         |??_C@_1DC@BNLGCJKD@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00254		 |$LN17@OALTimerIn|
  00254	00000000	 DCD         |dpCurSettings|
  00258		 |$LN18@OALTimerIn|
  00258	00000000	 DCD         |g_timer|
  0025c		 |$LN19@OALTimerIn|
  0025c	00000000	 DCD         |g_pOALEMIFRegs|
  00260		 |$LN20@OALTimerIn|
  00260	00000000	 DCD         |??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@|
  00264		 |$LN21@OALTimerIn|
  00264	00000000	 DCD         |g_oalTimerIrq|
  00268		 |$LN22@OALTimerIn|
  00268	00000000	 DCD         |g_pNKGlobal|
  0026c		 |$LN23@OALTimerIn|
  0026c	00000000	 DCD         |??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00270		 |$M44064|

			 ENDP  ; |OALTimerInit|

	EXPORT	|OALTimerIntrHandler|
	IMPORT	|OEMWriteDebugLED|

  00008			 AREA	 |.pdata|, PDATA
|$T44081| DCD	|$LN17@OALTimerIn@2|
	DCD	0x40008a02
; Function compile flags: /Odtp

  00270			 AREA	 |.text|, CODE, ARM

  00270		 |OALTimerIntrHandler| PROC

; 159  : {

  00270		 |$LN17@OALTimerIn@2|
  00270	e52de004	 str         lr, [sp, #-4]!
  00274	e24dd018	 sub         sp, sp, #0x18
  00278		 |$M44078|

; 160  :     UINT32 sysIntr = SYSINTR_NOP;

  00278	e3a03000	 mov         r3, #0
  0027c	e58d3000	 str         r3, [sp]

; 161  :     UINT32 delta;
; 162  : 
; 163  :     // Should we update timer period?
; 164  :     if (g_timer.updatePeriod) {

  00280	e59f320c	 ldr         r3, [pc, #0x20C]
  00284	e5933014	 ldr         r3, [r3, #0x14]
  00288	e3530000	 cmp         r3, #0
  0028c	0a000047	 beq         |$LN12@OALTimerIn@2|

; 165  :         UINT32 set = INREG32(&g_timer.pTimerRegs->TVR);

  00290	e59f31fc	 ldr         r3, [pc, #0x1FC]
  00294	e5933010	 ldr         r3, [r3, #0x10]
  00298	e5933000	 ldr         r3, [r3]
  0029c	e58d3008	 str         r3, [sp, #8]

; 166  :         UINT32 cnt = INREG32(&g_timer.pTimerRegs->TCR);

  002a0	e59f31ec	 ldr         r3, [pc, #0x1EC]
  002a4	e5933010	 ldr         r3, [r3, #0x10]
  002a8	e2833004	 add         r3, r3, #4
  002ac	e5933000	 ldr         r3, [r3]
  002b0	e58d300c	 str         r3, [sp, #0xC]
  002b4		 |$LN11@OALTimerIn@2|
  002b4		 |$LN8@OALTimerIn@2|

; 167  :         // Wait for timer value change...
; 168  :         do {
; 169  :             while (cnt == INREG32(&g_timer.pTimerRegs->TCR));

  002b4	e59f31d8	 ldr         r3, [pc, #0x1D8]
  002b8	e5933010	 ldr         r3, [r3, #0x10]
  002bc	e2833004	 add         r3, r3, #4
  002c0	e5932000	 ldr         r2, [r3]
  002c4	e59d300c	 ldr         r3, [sp, #0xC]
  002c8	e1530002	 cmp         r3, r2
  002cc	1a000000	 bne         |$LN7@OALTimerIn@2|
  002d0	eafffff7	 b           |$LN8@OALTimerIn@2|
  002d4		 |$LN7@OALTimerIn@2|

; 170  :             cnt = INREG32(&g_timer.pTimerRegs->TCR);

  002d4	e59f31b8	 ldr         r3, [pc, #0x1B8]
  002d8	e5933010	 ldr         r3, [r3, #0x10]
  002dc	e2833004	 add         r3, r3, #4
  002e0	e5933000	 ldr         r3, [r3]
  002e4	e58d300c	 str         r3, [sp, #0xC]

; 171  :         } while (cnt == set);

  002e8	e59d200c	 ldr         r2, [sp, #0xC]
  002ec	e59d3008	 ldr         r3, [sp, #8]
  002f0	e1520003	 cmp         r2, r3
  002f4	0affffee	 beq         |$LN11@OALTimerIn@2|

; 172  :         // Set new value
; 173  :         OUTREG32(&g_timer.pTimerRegs->TVR, TIMER_PERIOD - 1);

  002f8	e59f3194	 ldr         r3, [pc, #0x194]
  002fc	e5932010	 ldr         r2, [r3, #0x10]
  00300	e3a0301f	 mov         r3, #0x1F
  00304	e5823000	 str         r3, [r2]

; 174  :         SETREG32(&g_timer.pTimerRegs->CR, CR_TRB);

  00308	e59f3184	 ldr         r3, [pc, #0x184]
  0030c	e5933010	 ldr         r3, [r3, #0x10]
  00310	e2833008	 add         r3, r3, #8
  00314	e5933000	 ldr         r3, [r3]
  00318	e3832002	 orr         r2, r3, #2
  0031c	e59f3170	 ldr         r3, [pc, #0x170]
  00320	e5933010	 ldr         r3, [r3, #0x10]
  00324	e2833008	 add         r3, r3, #8
  00328	e5832000	 str         r2, [r3]
  0032c		 |$LN6@OALTimerIn@2|

; 175  :         // Wait while it is set
; 176  :         while ((INREG32(&g_timer.pTimerRegs->CR) & CR_TRB) != 0);

  0032c	e59f3160	 ldr         r3, [pc, #0x160]
  00330	e5933010	 ldr         r3, [r3, #0x10]
  00334	e2833008	 add         r3, r3, #8
  00338	e5933000	 ldr         r3, [r3]
  0033c	e3130002	 tst         r3, #2
  00340	0a000000	 beq         |$LN5@OALTimerIn@2|
  00344	eafffff8	 b           |$LN6@OALTimerIn@2|
  00348		 |$LN5@OALTimerIn@2|
  00348		 |$LN4@OALTimerIn@2|

; 177  :         // Wait until one tick (any timer set in this time is ignored)
; 178  :         while (INREG32(&g_timer.pTimerRegs->TCR) != (TIMER_PERIOD - 2));

  00348	e59f3144	 ldr         r3, [pc, #0x144]
  0034c	e5933010	 ldr         r3, [r3, #0x10]
  00350	e2833004	 add         r3, r3, #4
  00354	e5933000	 ldr         r3, [r3]
  00358	e353001e	 cmp         r3, #0x1E
  0035c	0a000000	 beq         |$LN3@OALTimerIn@2|
  00360	eafffff8	 b           |$LN4@OALTimerIn@2|
  00364		 |$LN3@OALTimerIn@2|

; 179  :         g_timer.curCounts += (set + 1) - cnt + 1;

  00364	e59d3008	 ldr         r3, [sp, #8]
  00368	e2832001	 add         r2, r3, #1
  0036c	e59d300c	 ldr         r3, [sp, #0xC]
  00370	e0423003	 sub         r3, r2, r3
  00374	e2831001	 add         r1, r3, #1
  00378	e59f3114	 ldr         r3, [pc, #0x114]
  0037c	e5932008	 ldr         r2, [r3, #8]
  00380	e59f310c	 ldr         r3, [pc, #0x10C]
  00384	e593300c	 ldr         r3, [r3, #0xC]
  00388	e0921001	 adds        r1, r2, r1
  0038c	e2a32000	 adc         r2, r3, #0
  00390	e59f30fc	 ldr         r3, [pc, #0xFC]
  00394	e5831008	 str         r1, [r3, #8]
  00398	e59f30f4	 ldr         r3, [pc, #0xF4]
  0039c	e583200c	 str         r2, [r3, #0xC]

; 180  :         // We are done with period update
; 181  :         g_timer.updatePeriod = FALSE;

  003a0	e59f20ec	 ldr         r2, [pc, #0xEC]
  003a4	e3a03000	 mov         r3, #0
  003a8	e5823014	 str         r3, [r2, #0x14]

; 182  :     }
; 183  :     else {

  003ac	ea000009	 b           |$LN2@OALTimerIn@2|
  003b0		 |$LN12@OALTimerIn@2|

; 184  :         g_timer.curCounts += TIMER_PERIOD;

  003b0	e59f30dc	 ldr         r3, [pc, #0xDC]
  003b4	e5932008	 ldr         r2, [r3, #8]
  003b8	e59f30d4	 ldr         r3, [pc, #0xD4]
  003bc	e593300c	 ldr         r3, [r3, #0xC]
  003c0	e2921020	 adds        r1, r2, #0x20
  003c4	e2a32000	 adc         r2, r3, #0
  003c8	e59f30c4	 ldr         r3, [pc, #0xC4]
  003cc	e5831008	 str         r1, [r3, #8]
  003d0	e59f30bc	 ldr         r3, [pc, #0xBC]
  003d4	e583200c	 str         r2, [r3, #0xC]
  003d8		 |$LN2@OALTimerIn@2|

; 185  :     }
; 186  : 
; 187  :     // Update the millisecond and high resolution counters
; 188  :     CurMSec = (UINT32)((g_timer.curCounts * 1000) >> 15);

  003d8	e59f30b4	 ldr         r3, [pc, #0xB4]
  003dc	e5931008	 ldr         r1, [r3, #8]
  003e0	e59f30ac	 ldr         r3, [pc, #0xAC]
  003e4	e593200c	 ldr         r2, [r3, #0xC]
  003e8	e58d1014	 str         r1, [sp, #0x14]
  003ec	e3a03ffa	 mov         r3, #0xFA, 30
  003f0	e0000392	 mul         r0, r2, r3
  003f4	e59d1014	 ldr         r1, [sp, #0x14]
  003f8	e3a03ffa	 mov         r3, #0xFA, 30
  003fc	e0832391	 umull       r2, r3, r1, r3
  00400	e0803003	 add         r3, r0, r3
  00404	e1a027a2	 mov         r2, r2, lsr #15
  00408	e1a03883	 mov         r3, r3, lsl #17
  0040c	e1832002	 orr         r2, r3, r2
  00410	e59f3078	 ldr         r3, [pc, #0x78]
  00414	e5933000	 ldr         r3, [r3]
  00418	e28330c8	 add         r3, r3, #0xC8
  0041c	e5832000	 str         r2, [r3]

; 189  : 
; 190  :     // Reschedule?
; 191  :     delta = dwReschedTime - CurMSec;

  00420	e59f3068	 ldr         r3, [pc, #0x68]
  00424	e5933000	 ldr         r3, [r3]
  00428	e28320c4	 add         r2, r3, #0xC4
  0042c	e59f305c	 ldr         r3, [pc, #0x5C]
  00430	e5933000	 ldr         r3, [r3]
  00434	e28330c8	 add         r3, r3, #0xC8
  00438	e5922000	 ldr         r2, [r2]
  0043c	e5933000	 ldr         r3, [r3]
  00440	e0423003	 sub         r3, r2, r3
  00444	e58d3004	 str         r3, [sp, #4]

; 192  :     if ((INT32)delta <= 0) sysIntr = SYSINTR_RESCHED;

  00448	e59d3004	 ldr         r3, [sp, #4]
  0044c	e3530000	 cmp         r3, #0
  00450	ca000001	 bgt         |$LN1@OALTimerIn@2|
  00454	e3a03001	 mov         r3, #1
  00458	e58d3000	 str         r3, [sp]
  0045c		 |$LN1@OALTimerIn@2|

; 193  : 
; 194  :     // Update LEDs.
; 195  :     // (Right shift by 10 instead of expensive division by 1000. This will 
; 196  :     // cause the LEDs to update every 1.024 seconds instead every 1 second,
; 197  :     // which is okay as this is just a notification and not a measurement of any sort)
; 198  :     OEMWriteDebugLED(0x0f, CurMSec >> 10);

  0045c	e59f302c	 ldr         r3, [pc, #0x2C]
  00460	e5933000	 ldr         r3, [r3]
  00464	e28330c8	 add         r3, r3, #0xC8
  00468	e5933000	 ldr         r3, [r3]
  0046c	e1a01523	 mov         r1, r3, lsr #10
  00470	e3a0000f	 mov         r0, #0xF
  00474	eb000000	 bl          OEMWriteDebugLED

; 199  : 
; 200  :     // Return
; 201  :     return sysIntr;

  00478	e59d3000	 ldr         r3, [sp]
  0047c	e58d3010	 str         r3, [sp, #0x10]

; 202  : }

  00480	e59d0010	 ldr         r0, [sp, #0x10]
  00484	e28dd018	 add         sp, sp, #0x18
  00488	e49de004	 ldr         lr, [sp], #4
  0048c	e12fff1e	 bx          lr
  00490		 |$LN18@OALTimerIn@2|
  00490		 |$LN19@OALTimerIn@2|
  00490	00000000	 DCD         |g_pNKGlobal|
  00494		 |$LN20@OALTimerIn@2|
  00494	00000000	 DCD         |g_timer|
  00498		 |$M44079|

			 ENDP  ; |OALTimerIntrHandler|

	EXPORT	|OEMIdle|
	IMPORT	|OALCPUIdle|
	IMPORT	|OALIntrIsIrqPending|

  00010			 AREA	 |.pdata|, PDATA
|$T44089| DCD	|$LN34@OEMIdle|
	DCD	0x40013604
; Function compile flags: /Odtp

  00498			 AREA	 |.text|, CODE, ARM

  00498		 |OEMIdle| PROC

; 219  : {

  00498		 |$LN34@OEMIdle|
  00498	e1a0c00d	 mov         r12, sp
  0049c	e92d0001	 stmdb       sp!, {r0}
  004a0	e92d5000	 stmdb       sp!, {r12, lr}
  004a4	e24dd040	 sub         sp, sp, #0x40
  004a8		 |$M44086|

; 220  :     UINT32 baseMSec, idleMSec;
; 221  :     INT32 usedCounts, idleCounts=0;

  004a8	e3a03000	 mov         r3, #0
  004ac	e58d3000	 str         r3, [sp]

; 222  :     ULARGE_INTEGER idle;
; 223  :     UINT32 cnt, set;
; 224  :     OMAP5912_TIMER32K_REGS *pTimerRegs = g_timer.pTimerRegs;

  004b0	e59f34b4	 ldr         r3, [pc, #0x4B4]
  004b4	e5933010	 ldr         r3, [r3, #0x10]
  004b8	e58d3008	 str         r3, [sp, #8]

; 225  : 
; 226  :     // Return, if we are waiting for restoring timer period
; 227  :     if (g_timer.updatePeriod) {

  004bc	e59f34a8	 ldr         r3, [pc, #0x4A8]
  004c0	e5933014	 ldr         r3, [r3, #0x14]
  004c4	e3530000	 cmp         r3, #0
  004c8	0a000000	 beq         |$LN29@OEMIdle|

; 228  :         return;

  004cc	ea000122	 b           |$LN30@OEMIdle|
  004d0		 |$LN29@OEMIdle|

; 229  :     }
; 230  : 
; 231  :     // Get current system timer counter
; 232  :     baseMSec = CurMSec;

  004d0	e59f3490	 ldr         r3, [pc, #0x490]
  004d4	e5933000	 ldr         r3, [r3]
  004d8	e28330c8	 add         r3, r3, #0xC8
  004dc	e5933000	 ldr         r3, [r3]
  004e0	e58d3010	 str         r3, [sp, #0x10]

; 233  : 
; 234  :     // Compute the remaining idle time
; 235  :     idleMSec = dwReschedTime - baseMSec;

  004e4	e59f347c	 ldr         r3, [pc, #0x47C]
  004e8	e5933000	 ldr         r3, [r3]
  004ec	e28330c4	 add         r3, r3, #0xC4
  004f0	e5932000	 ldr         r2, [r3]
  004f4	e59d3010	 ldr         r3, [sp, #0x10]
  004f8	e0423003	 sub         r3, r2, r3
  004fc	e58d3018	 str         r3, [sp, #0x18]

; 236  : 
; 237  :     // Idle time has expired - we need to return
; 238  :     if ((INT32)idleMSec <= 0) return;

  00500	e59d3018	 ldr         r3, [sp, #0x18]
  00504	e3530000	 cmp         r3, #0
  00508	ca000000	 bgt         |$LN28@OEMIdle|
  0050c	ea000112	 b           |$LN30@OEMIdle|
  00510		 |$LN28@OEMIdle|

; 239  : 
; 240  :     // Limit the maximum idle time to what is supported.
; 241  :     if (idleMSec > g_timer.maxIdleMSec) idleMSec = g_timer.maxIdleMSec;

  00510	e59d2018	 ldr         r2, [sp, #0x18]
  00514	e59f3450	 ldr         r3, [pc, #0x450]
  00518	e5933000	 ldr         r3, [r3]
  0051c	e1520003	 cmp         r2, r3
  00520	9a000002	 bls         |$LN27@OEMIdle|
  00524	e59f3440	 ldr         r3, [pc, #0x440]
  00528	e5933000	 ldr         r3, [r3]
  0052c	e58d3018	 str         r3, [sp, #0x18]
  00530		 |$LN27@OEMIdle|

; 242  : 
; 243  :     // Find where we are and if interrupt is pending
; 244  :     cnt = INREG32(&pTimerRegs->TCR);

  00530	e59d3008	 ldr         r3, [sp, #8]
  00534	e2833004	 add         r3, r3, #4
  00538	e5933000	 ldr         r3, [r3]
  0053c	e58d300c	 str         r3, [sp, #0xC]

; 245  :     if (OALIntrIsIrqPending(IRQ_TIMER32K) || cnt < TIMER_MARGIN) 

  00540	e3a00036	 mov         r0, #0x36
  00544	eb000000	 bl          OALIntrIsIrqPending
  00548	e58d0024	 str         r0, [sp, #0x24]
  0054c	e59d3024	 ldr         r3, [sp, #0x24]
  00550	e3530000	 cmp         r3, #0
  00554	1a000002	 bne         |$LN25@OEMIdle|
  00558	e59d300c	 ldr         r3, [sp, #0xC]
  0055c	e3530003	 cmp         r3, #3
  00560	2a000000	 bcs         |$LN26@OEMIdle|
  00564		 |$LN25@OEMIdle|

; 246  :     {
; 247  :         // Full period was used, leave OEMIdle...
; 248  :         return;

  00564	ea0000fc	 b           |$LN30@OEMIdle|
  00568		 |$LN26@OEMIdle|
  00568		 |$LN24@OEMIdle|
  00568		 |$LN21@OEMIdle|

; 249  :     }
; 250  : 
; 251  :     
; 252  :     // Wait for timer value change...
; 253  :     do {
; 254  :         while (cnt == INREG32(&pTimerRegs->TCR));

  00568	e59d3008	 ldr         r3, [sp, #8]
  0056c	e2833004	 add         r3, r3, #4
  00570	e5932000	 ldr         r2, [r3]
  00574	e59d300c	 ldr         r3, [sp, #0xC]
  00578	e1530002	 cmp         r3, r2
  0057c	1a000000	 bne         |$LN20@OEMIdle|
  00580	eafffff8	 b           |$LN21@OEMIdle|
  00584		 |$LN20@OEMIdle|

; 255  :         // We have check for interrupt one more time...
; 256  :         cnt = INREG32(&pTimerRegs->TCR);

  00584	e59d3008	 ldr         r3, [sp, #8]
  00588	e2833004	 add         r3, r3, #4
  0058c	e5933000	 ldr         r3, [r3]
  00590	e58d300c	 str         r3, [sp, #0xC]

; 257  :     } while (cnt == TIMER_PERIOD - 1);

  00594	e59d300c	 ldr         r3, [sp, #0xC]
  00598	e353001f	 cmp         r3, #0x1F
  0059c	0afffff1	 beq         |$LN24@OEMIdle|

; 258  : 
; 259  :     // If there is pending interrupt now use short idle...
; 260  :     if (OALIntrIsIrqPending(IRQ_TIMER32K)) {

  005a0	e3a00036	 mov         r0, #0x36
  005a4	eb000000	 bl          OALIntrIsIrqPending
  005a8	e58d0028	 str         r0, [sp, #0x28]
  005ac	e59d3028	 ldr         r3, [sp, #0x28]
  005b0	e3530000	 cmp         r3, #0
  005b4	0a000001	 beq         |$LN19@OEMIdle|

; 261  :         // Full period was used, leave OEMIdle...
; 262  :         return;

  005b8	ea0000e7	 b           |$LN30@OEMIdle|

; 263  :     } else {

  005bc	ea00002c	 b           |$LN18@OEMIdle|
  005c0		 |$LN19@OEMIdle|

; 264  : 
; 265  :         // Idle time in hi-res ticks
; 266  :         idleCounts = idleMSec << 5;

  005c0	e59d3018	 ldr         r3, [sp, #0x18]
  005c4	e1a03283	 mov         r3, r3, lsl #5
  005c8	e58d3000	 str         r3, [sp]

; 267  : 
; 268  :         // We already used
; 269  :         usedCounts = TIMER_PERIOD - cnt + 1;

  005cc	e59d300c	 ldr         r3, [sp, #0xC]
  005d0	e2633020	 rsb         r3, r3, #0x20
  005d4	e2833001	 add         r3, r3, #1
  005d8	e58d3014	 str         r3, [sp, #0x14]

; 270  : 
; 271  :         // New timer period without timer setup compensation
; 272  :         if (idleMSec == 1)

  005dc	e59d3018	 ldr         r3, [sp, #0x18]
  005e0	e3530001	 cmp         r3, #1
  005e4	1a000002	 bne         |$LN17@OEMIdle|

; 273  :         {
; 274  :             set = TIMER_PERIOD - 1;

  005e8	e3a0301f	 mov         r3, #0x1F
  005ec	e58d3004	 str         r3, [sp, #4]

; 275  :         }
; 276  :         else

  005f0	ea000004	 b           |$LN16@OEMIdle|
  005f4		 |$LN17@OEMIdle|

; 277  :         {
; 278  :             set = idleCounts - usedCounts - 1;

  005f4	e59d2000	 ldr         r2, [sp]
  005f8	e59d3014	 ldr         r3, [sp, #0x14]
  005fc	e0423003	 sub         r3, r2, r3
  00600	e2433001	 sub         r3, r3, #1
  00604	e58d3004	 str         r3, [sp, #4]
  00608		 |$LN16@OEMIdle|

; 279  :         }
; 280  : 
; 281  :         // Set new value
; 282  :         OUTREG32(&pTimerRegs->TVR, set);

  00608	e59d2004	 ldr         r2, [sp, #4]
  0060c	e59d3008	 ldr         r3, [sp, #8]
  00610	e5832000	 str         r2, [r3]

; 283  :         SETREG32(&pTimerRegs->CR, CR_TRB);

  00614	e59d3008	 ldr         r3, [sp, #8]
  00618	e2833008	 add         r3, r3, #8
  0061c	e5933000	 ldr         r3, [r3]
  00620	e3832002	 orr         r2, r3, #2
  00624	e59d3008	 ldr         r3, [sp, #8]
  00628	e2833008	 add         r3, r3, #8
  0062c	e5832000	 str         r2, [r3]
  00630		 |$LN15@OEMIdle|

; 284  :         // Wait while it is set
; 285  :         while ((INREG32(&pTimerRegs->CR) & CR_TRB) != 0);

  00630	e59d3008	 ldr         r3, [sp, #8]
  00634	e2833008	 add         r3, r3, #8
  00638	e5933000	 ldr         r3, [r3]
  0063c	e3130002	 tst         r3, #2
  00640	0a000000	 beq         |$LN14@OEMIdle|
  00644	eafffff9	 b           |$LN15@OEMIdle|
  00648		 |$LN14@OEMIdle|
  00648		 |$LN13@OEMIdle|

; 286  :         // Wait until one tick (any timer set in this time is ignored)
; 287  :         while (INREG32(&pTimerRegs->TCR) != (set - 1));

  00648	e59d3008	 ldr         r3, [sp, #8]
  0064c	e2831004	 add         r1, r3, #4
  00650	e59d3004	 ldr         r3, [sp, #4]
  00654	e2432001	 sub         r2, r3, #1
  00658	e5913000	 ldr         r3, [r1]
  0065c	e1530002	 cmp         r3, r2
  00660	0a000000	 beq         |$LN12@OEMIdle|
  00664	eafffff7	 b           |$LN13@OEMIdle|
  00668		 |$LN12@OEMIdle|

; 288  : 
; 289  :         // There must be period update
; 290  :         g_timer.updatePeriod = TRUE;

  00668	e59f22fc	 ldr         r2, [pc, #0x2FC]
  0066c	e3a03001	 mov         r3, #1
  00670	e5823014	 str         r3, [r2, #0x14]
  00674		 |$LN18@OEMIdle|

; 291  :     }
; 292  : 
; 293  :     // Move SoC/CPU to idle mode - interrupt are disabled
; 294  :     OALCPUIdle();

  00674	eb000000	 bl          OALCPUIdle

; 295  : 
; 296  :     // Get current counter value
; 297  :     cnt = INREG32(&pTimerRegs->TCR);

  00678	e59d3008	 ldr         r3, [sp, #8]
  0067c	e2833004	 add         r3, r3, #4
  00680	e5933000	 ldr         r3, [r3]
  00684	e58d300c	 str         r3, [sp, #0xC]

; 298  : 
; 299  : 
; 300  : 
; 301  :     if (OALIntrIsIrqPending(IRQ_TIMER32K) || cnt < TIMER_MARGIN)

  00688	e3a00036	 mov         r0, #0x36
  0068c	eb000000	 bl          OALIntrIsIrqPending
  00690	e58d002c	 str         r0, [sp, #0x2C]
  00694	e59d302c	 ldr         r3, [sp, #0x2C]
  00698	e3530000	 cmp         r3, #0
  0069c	1a000002	 bne         |$LN10@OEMIdle|
  006a0	e59d300c	 ldr         r3, [sp, #0xC]
  006a4	e3530003	 cmp         r3, #3
  006a8	2a000005	 bcs         |$LN11@OEMIdle|
  006ac		 |$LN10@OEMIdle|

; 302  :     {
; 303  :         // It's timer interrupt, or no timer interrupt but close enough
; 304  :         idleCounts = (set + 1) + usedCounts;

  006ac	e59d3004	 ldr         r3, [sp, #4]
  006b0	e2832001	 add         r2, r3, #1
  006b4	e59d3014	 ldr         r3, [sp, #0x14]
  006b8	e0823003	 add         r3, r2, r3
  006bc	e58d3000	 str         r3, [sp]

; 305  :     }
; 306  :     else

  006c0	ea00003b	 b           |$LN9@OEMIdle|
  006c4		 |$LN11@OEMIdle|
  006c4		 |$LN8@OEMIdle|

; 307  :     {
; 308  : 
; 309  :         // Wait for timer value change...
; 310  :         while (cnt == INREG32(&pTimerRegs->TCR));

  006c4	e59d3008	 ldr         r3, [sp, #8]
  006c8	e2833004	 add         r3, r3, #4
  006cc	e5932000	 ldr         r2, [r3]
  006d0	e59d300c	 ldr         r3, [sp, #0xC]
  006d4	e1530002	 cmp         r3, r2
  006d8	1a000000	 bne         |$LN7@OEMIdle|
  006dc	eafffff8	 b           |$LN8@OEMIdle|
  006e0		 |$LN7@OEMIdle|

; 311  : 
; 312  :         // We have recheck pending IRQ
; 313  :         cnt = INREG32(&pTimerRegs->TCR);

  006e0	e59d3008	 ldr         r3, [sp, #8]
  006e4	e2833004	 add         r3, r3, #4
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e58d300c	 str         r3, [sp, #0xC]

; 314  :         if (!OALIntrIsIrqPending(IRQ_TIMER32K)) {

  006f0	e3a00036	 mov         r0, #0x36
  006f4	eb000000	 bl          OALIntrIsIrqPending
  006f8	e58d0030	 str         r0, [sp, #0x30]
  006fc	e59d3030	 ldr         r3, [sp, #0x30]
  00700	e3530000	 cmp         r3, #0
  00704	1a000025	 bne         |$LN6@OEMIdle|

; 315  :             // no timer interrupt, must be some other interrupts, so just add how many counts elapsed
; 316  :             idleCounts = usedCounts + (set + 1) - cnt + 1;

  00708	e59d3004	 ldr         r3, [sp, #4]
  0070c	e2832001	 add         r2, r3, #1
  00710	e59d3014	 ldr         r3, [sp, #0x14]
  00714	e0832002	 add         r2, r3, r2
  00718	e59d300c	 ldr         r3, [sp, #0xC]
  0071c	e0423003	 sub         r3, r2, r3
  00720	e2833001	 add         r3, r3, #1
  00724	e58d3000	 str         r3, [sp]

; 317  : 
; 318  :             // set the timer back to 1 msec
; 319  :             set = TIMER_PERIOD - 1;

  00728	e3a0301f	 mov         r3, #0x1F
  0072c	e58d3004	 str         r3, [sp, #4]

; 320  :             // Set new value
; 321  :             OUTREG32(&pTimerRegs->TVR, set);

  00730	e59d2004	 ldr         r2, [sp, #4]
  00734	e59d3008	 ldr         r3, [sp, #8]
  00738	e5832000	 str         r2, [r3]

; 322  :             SETREG32(&pTimerRegs->CR, CR_TRB);

  0073c	e59d3008	 ldr         r3, [sp, #8]
  00740	e2833008	 add         r3, r3, #8
  00744	e5933000	 ldr         r3, [r3]
  00748	e3832002	 orr         r2, r3, #2
  0074c	e59d3008	 ldr         r3, [sp, #8]
  00750	e2833008	 add         r3, r3, #8
  00754	e5832000	 str         r2, [r3]
  00758		 |$LN5@OEMIdle|

; 323  :             // Wait while it is set
; 324  :             while ((INREG32(&pTimerRegs->CR) & CR_TRB) != 0);

  00758	e59d3008	 ldr         r3, [sp, #8]
  0075c	e2833008	 add         r3, r3, #8
  00760	e5933000	 ldr         r3, [r3]
  00764	e3130002	 tst         r3, #2
  00768	0a000000	 beq         |$LN4@OEMIdle|
  0076c	eafffff9	 b           |$LN5@OEMIdle|
  00770		 |$LN4@OEMIdle|
  00770		 |$LN3@OEMIdle|

; 325  :             // Wait until one tick (any timer set in this time is ignored)
; 326  :             while (INREG32(&pTimerRegs->TCR) != (set - 1));

  00770	e59d3008	 ldr         r3, [sp, #8]
  00774	e2831004	 add         r1, r3, #4
  00778	e59d3004	 ldr         r3, [sp, #4]
  0077c	e2432001	 sub         r2, r3, #1
  00780	e5913000	 ldr         r3, [r1]
  00784	e1530002	 cmp         r3, r2
  00788	0a000000	 beq         |$LN2@OEMIdle|
  0078c	eafffff7	 b           |$LN3@OEMIdle|
  00790		 |$LN2@OEMIdle|

; 327  :             g_timer.updatePeriod = FALSE;

  00790	e59f21d4	 ldr         r2, [pc, #0x1D4]
  00794	e3a03000	 mov         r3, #0
  00798	e5823014	 str         r3, [r2, #0x14]

; 328  :         }
; 329  :         else 

  0079c	ea000004	 b           |$LN1@OEMIdle|
  007a0		 |$LN6@OEMIdle|

; 330  :         {
; 331  :             // timer interrupted
; 332  :             idleCounts = (set + 1) + usedCounts;

  007a0	e59d3004	 ldr         r3, [sp, #4]
  007a4	e2832001	 add         r2, r3, #1
  007a8	e59d3014	 ldr         r3, [sp, #0x14]
  007ac	e0823003	 add         r3, r2, r3
  007b0	e58d3000	 str         r3, [sp]
  007b4		 |$LN1@OEMIdle|
  007b4		 |$LN9@OEMIdle|

; 333  :         }
; 334  : 
; 335  :     } 
; 336  : 
; 337  :     // Align between idle and tick in every 32768
; 338  :     idle.LowPart   = curridlelow;

  007b4	e59f31ac	 ldr         r3, [pc, #0x1AC]
  007b8	e5933000	 ldr         r3, [r3]
  007bc	e28330d0	 add         r3, r3, #0xD0
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e58d301c	 str         r3, [sp, #0x1C]

; 339  :     idle.HighPart  = curridlehigh;

  007c8	e59f3198	 ldr         r3, [pc, #0x198]
  007cc	e5933000	 ldr         r3, [r3]
  007d0	e28330d4	 add         r3, r3, #0xD4
  007d4	e5933000	 ldr         r3, [r3]
  007d8	e58d3020	 str         r3, [sp, #0x20]

; 340  :     idle.QuadPart &= ~0x7fffull;

  007dc	e59d201c	 ldr         r2, [sp, #0x1C]
  007e0	e3e03c7f	 mvn         r3, #0x7F, 24
  007e4	e22330ff	 eor         r3, r3, #0xFF
  007e8	e0022003	 and         r2, r2, r3
  007ec	e59d3020	 ldr         r3, [sp, #0x20]
  007f0	e58d201c	 str         r2, [sp, #0x1C]
  007f4	e58d3020	 str         r3, [sp, #0x20]

; 341  :     idle.QuadPart |= (g_timer.curCounts * 1000)&0x7fffull;

  007f8	e59f316c	 ldr         r3, [pc, #0x16C]
  007fc	e5931008	 ldr         r1, [r3, #8]
  00800	e59f3164	 ldr         r3, [pc, #0x164]
  00804	e593200c	 ldr         r2, [r3, #0xC]
  00808	e58d1034	 str         r1, [sp, #0x34]
  0080c	e3a03ffa	 mov         r3, #0xFA, 30
  00810	e0000392	 mul         r0, r2, r3
  00814	e59d1034	 ldr         r1, [sp, #0x34]
  00818	e3a03ffa	 mov         r3, #0xFA, 30
  0081c	e0832391	 umull       r2, r3, r1, r3
  00820	e0801003	 add         r1, r0, r3
  00824	e3a03c7f	 mov         r3, #0x7F, 24
  00828	e38330ff	 orr         r3, r3, #0xFF
  0082c	e0022003	 and         r2, r2, r3
  00830	e2011000	 and         r1, r1, #0
  00834	e59d301c	 ldr         r3, [sp, #0x1C]
  00838	e1832002	 orr         r2, r3, r2
  0083c	e59d3020	 ldr         r3, [sp, #0x20]
  00840	e1833001	 orr         r3, r3, r1
  00844	e58d201c	 str         r2, [sp, #0x1C]
  00848	e58d3020	 str         r3, [sp, #0x20]

; 342  : 
; 343  :     // Fix system tick counters & idle counter
; 344  :     g_timer.curCounts += idleCounts;

  0084c	e59d1000	 ldr         r1, [sp]
  00850	e59d3000	 ldr         r3, [sp]
  00854	e1a00fc3	 mov         r0, r3, asr #31
  00858	e59f310c	 ldr         r3, [pc, #0x10C]
  0085c	e5932008	 ldr         r2, [r3, #8]
  00860	e59f3104	 ldr         r3, [pc, #0x104]
  00864	e593300c	 ldr         r3, [r3, #0xC]
  00868	e0921001	 adds        r1, r2, r1
  0086c	e0a32000	 adc         r2, r3, r0
  00870	e59f30f4	 ldr         r3, [pc, #0xF4]
  00874	e5831008	 str         r1, [r3, #8]
  00878	e59f30ec	 ldr         r3, [pc, #0xEC]
  0087c	e583200c	 str         r2, [r3, #0xC]

; 345  :     CurMSec = (UINT32)((g_timer.curCounts * 1000) >> 15);

  00880	e59f30e4	 ldr         r3, [pc, #0xE4]
  00884	e5931008	 ldr         r1, [r3, #8]
  00888	e59f30dc	 ldr         r3, [pc, #0xDC]
  0088c	e593200c	 ldr         r2, [r3, #0xC]
  00890	e58d1038	 str         r1, [sp, #0x38]
  00894	e3a03ffa	 mov         r3, #0xFA, 30
  00898	e0000392	 mul         r0, r2, r3
  0089c	e59d1038	 ldr         r1, [sp, #0x38]
  008a0	e3a03ffa	 mov         r3, #0xFA, 30
  008a4	e0832391	 umull       r2, r3, r1, r3
  008a8	e0803003	 add         r3, r0, r3
  008ac	e1a027a2	 mov         r2, r2, lsr #15
  008b0	e1a03883	 mov         r3, r3, lsl #17
  008b4	e1832002	 orr         r2, r3, r2
  008b8	e59f30a8	 ldr         r3, [pc, #0xA8]
  008bc	e5933000	 ldr         r3, [r3]
  008c0	e28330c8	 add         r3, r3, #0xC8
  008c4	e5832000	 str         r2, [r3]

; 346  : 
; 347  :     // Update idle counters
; 348  :     idle.QuadPart += idleCounts * 1000;

  008c8	e59d2000	 ldr         r2, [sp]
  008cc	e3a03ffa	 mov         r3, #0xFA, 30
  008d0	e0030392	 mul         r3, r2, r3
  008d4	e58d303c	 str         r3, [sp, #0x3C]
  008d8	e59d003c	 ldr         r0, [sp, #0x3C]
  008dc	e59d303c	 ldr         r3, [sp, #0x3C]
  008e0	e1a01fc3	 mov         r1, r3, asr #31
  008e4	e59d201c	 ldr         r2, [sp, #0x1C]
  008e8	e59d3020	 ldr         r3, [sp, #0x20]
  008ec	e0922000	 adds        r2, r2, r0
  008f0	e0a33001	 adc         r3, r3, r1
  008f4	e58d201c	 str         r2, [sp, #0x1C]
  008f8	e58d3020	 str         r3, [sp, #0x20]

; 349  :     curridlelow  = idle.LowPart;

  008fc	e59f3064	 ldr         r3, [pc, #0x64]
  00900	e5933000	 ldr         r3, [r3]
  00904	e28320d0	 add         r2, r3, #0xD0
  00908	e59d301c	 ldr         r3, [sp, #0x1C]
  0090c	e5823000	 str         r3, [r2]

; 350  :     curridlehigh = idle.HighPart;

  00910	e59f3050	 ldr         r3, [pc, #0x50]
  00914	e5933000	 ldr         r3, [r3]
  00918	e28320d4	 add         r2, r3, #0xD4
  0091c	e59d3020	 ldr         r3, [sp, #0x20]
  00920	e5823000	 str         r3, [r2]

; 351  : 
; 352  :     OEMWriteDebugLED(0x0f, CurMSec >> 10);

  00924	e59f303c	 ldr         r3, [pc, #0x3C]
  00928	e5933000	 ldr         r3, [r3]
  0092c	e28330c8	 add         r3, r3, #0xC8
  00930	e5933000	 ldr         r3, [r3]
  00934	e1a01523	 mov         r1, r3, lsr #10
  00938	e3a0000f	 mov         r0, #0xF
  0093c	eb000000	 bl          OEMWriteDebugLED

; 353  :     OEMWriteDebugLED(0xf0, curridlelow >> 21);

  00940	e59f3020	 ldr         r3, [pc, #0x20]
  00944	e5933000	 ldr         r3, [r3]
  00948	e28330d0	 add         r3, r3, #0xD0
  0094c	e5933000	 ldr         r3, [r3]
  00950	e1a01aa3	 mov         r1, r3, lsr #21
  00954	e3a000f0	 mov         r0, #0xF0
  00958	eb000000	 bl          OEMWriteDebugLED
  0095c		 |$LN30@OEMIdle|

; 354  : }

  0095c	e28dd040	 add         sp, sp, #0x40
  00960	e89d6000	 ldmia       sp, {sp, lr}
  00964	e12fff1e	 bx          lr
  00968		 |$LN35@OEMIdle|
  00968		 |$LN36@OEMIdle|
  00968	00000000	 DCD         |g_pNKGlobal|
  0096c		 |$LN37@OEMIdle|
  0096c	00000000	 DCD         |g_timer|
  00970		 |$M44087|

			 ENDP  ; |OEMIdle|

	EXPORT	|OEMGetTickCount|

  00018			 AREA	 |.pdata|, PDATA
|$T44098| DCD	|$LN5@OEMGetTick|
	DCD	0x40000a01
; Function compile flags: /Odtp

  00970			 AREA	 |.text|, CODE, ARM

  00970		 |OEMGetTickCount| PROC

; 366  : {

  00970		 |$LN5@OEMGetTick|
  00970	e24dd004	 sub         sp, sp, #4
  00974		 |$M44095|

; 367  :     return CurMSec;

  00974	e59f3018	 ldr         r3, [pc, #0x18]
  00978	e5933000	 ldr         r3, [r3]
  0097c	e28330c8	 add         r3, r3, #0xC8
  00980	e5933000	 ldr         r3, [r3]
  00984	e58d3000	 str         r3, [sp]

; 368  : }

  00988	e59d0000	 ldr         r0, [sp]
  0098c	e28dd004	 add         sp, sp, #4
  00990	e12fff1e	 bx          lr
  00994		 |$LN6@OEMGetTick|
  00994		 |$LN7@OEMGetTick|
  00994	00000000	 DCD         |g_pNKGlobal|
  00998		 |$M44096|

			 ENDP  ; |OEMGetTickCount|

	END
