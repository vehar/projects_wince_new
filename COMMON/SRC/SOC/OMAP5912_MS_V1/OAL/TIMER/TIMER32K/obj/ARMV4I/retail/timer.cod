; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP5912_MS_V1\OAL\TIMER\TIMER32K\timer.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
	 COMMON	|g_timer|, 0x18

	 COMMON	|g_pOALEMIFRegs|, 0x4


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALTimerInit|
	EXPORT	|??_C@_1DC@BNLGCJKD@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALPAtoVA|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALIntrRequestSysIntr|
	IMPORT	|g_pNKGlobal|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|g_oalTimerIrq|
; File c:\wince600\platform\common\src\soc\omap5912_ms_v1\oal\timer\timer32k\timer.c

  00000			 AREA	 |.pdata|, PDATA
|$T44112| DCD	|$LN16@OALTimerIn|
	DCD	0x40005801

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@BNLGCJKD@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " "
	DCB	0x0, "e", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "y", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerInit| PROC

; 100  : ) {

  00000		 |$LN16@OALTimerIn|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M44109|
  00004	e1a0e000	 mov         lr, r0

; 101  :     BOOL rc = FALSE;
; 102  :     UINT32 sysIntr;
; 103  : 
; 104  : 
; 105  :     OALMSG(OAL_TIMER&&OAL_FUNC, (
; 106  :         L"+OALTimerInit(%d, %d, %d)\r\n", sysTickMSec, countsPerMSec,
; 107  :         countsMargin
; 108  :     ));

  00008	e59f414c	 ldr         r4, [pc, #0x14C]
  0000c	e3a05000	 mov         r5, #0
  00010	e5943440	 ldr         r3, [r4, #0x440]
  00014	e3130b02	 tst         r3, #2, 22
  00018	13130004	 tstne       r3, #4
  0001c	159f0134	 ldrne       r0, [pc, #0x134]
  00020	11a03002	 movne       r3, r2
  00024	11a02001	 movne       r2, r1
  00028	11a0100e	 movne       r1, lr
  0002c	1b000000	 blne        NKDbgPrintfW

; 109  : 
; 110  :     // 32K timer has 24 bits
; 111  :     g_timer.maxIdleMSec = 0x1000000 >> 5;
; 112  :     g_timer.updatePeriod = FALSE;
; 113  : 
; 114  :     // Set idle conversion constant and counters
; 115  :     idleconv = 32768;

  00030	e59f211c	 ldr         r2, [pc, #0x11C]
  00034	e59f6114	 ldr         r6, [pc, #0x114]
  00038	e3a01702	 mov         r1, #2, 14
  0003c	e5923000	 ldr         r3, [r2]
  00040	e3a00000	 mov         r0, #0
  00044	e5861000	 str         r1, [r6]
  00048	e3a01902	 mov         r1, #2, 18
  0004c	e5860014	 str         r0, [r6, #0x14]
  00050	e58310d8	 str         r1, [r3, #0xD8]

; 116  :     curridlehigh = curridlelow = 0;

  00054	e5923000	 ldr         r3, [r2]
  00058	e3a01000	 mov         r1, #0

; 117  :     g_timer.curCounts = 0;
; 118  : 
; 119  :     // Set global variable to tell interrupt module about timer used
; 120  :     g_oalTimerIrq = IRQ_TIMER32K;

  0005c	e59fe0e8	 ldr         lr, [pc, #0xE8]
  00060	e58310d0	 str         r1, [r3, #0xD0]
  00064	e5923000	 ldr         r3, [r2]
  00068	e3a07036	 mov         r7, #0x36

; 121  : 
; 122  :     // Request SYSINTR for timer IRQ, it is done to reserve it...
; 123  :     sysIntr = OALIntrRequestSysIntr(1, &g_oalTimerIrq, OAL_INTR_FORCE_STATIC);

  0006c	e3a02004	 mov         r2, #4
  00070	e58310d4	 str         r1, [r3, #0xD4]
  00074	e5861008	 str         r1, [r6, #8]
  00078	e586100c	 str         r1, [r6, #0xC]
  0007c	e1a0100e	 mov         r1, lr
  00080	e3a00001	 mov         r0, #1
  00084	e58e7000	 str         r7, [lr]
  00088	eb000000	 bl          OALIntrRequestSysIntr

; 124  : 
; 125  :     // Enable System Tick interrupt
; 126  :     if (!OEMInterruptEnable(sysIntr, NULL, 0)) {

  0008c	e3a02000	 mov         r2, #0
  00090	e3a01000	 mov         r1, #0
  00094	eb000000	 bl          OEMInterruptEnable
  00098	e3500000	 cmp         r0, #0
  0009c	1a000005	 bne         |$LN3@OALTimerIn|

; 127  :         OALMSG(OAL_ERROR, (
; 128  :             L"ERROR: OALTimerInit: Interrupt enable for system timer failed"
; 129  :         ));

  000a0	e5943440	 ldr         r3, [r4, #0x440]
  000a4	e3130001	 tst         r3, #1
  000a8	0a00001c	 beq         |$cleanUp$43950|
  000ac	e59f0094	 ldr         r0, [pc, #0x94]
  000b0	eb000000	 bl          NKDbgPrintfW

; 130  :         goto cleanUp;

  000b4	ea000018	 b           |$LN13@OALTimerIn|
  000b8		 |$LN3@OALTimerIn|

; 131  :     }
; 132  : 
; 133  :     // Get virtual addresses for hardware
; 134  :     g_timer.pTimerRegs = OALPAtoUA(OMAP5912_TIMER32K_REGS_PA);

  000b8	e3a01000	 mov         r1, #0
  000bc	e2410a47	 sub         r0, r1, #0x47, 20
  000c0	eb000000	 bl          OALPAtoVA

; 135  :     g_pOALEMIFRegs = OALPAtoUA(OMAP5912_EMIF_REGS_PA);

  000c4	e3a01000	 mov         r1, #0
  000c8	e1a03000	 mov         r3, r0
  000cc	e2410b4d	 sub         r0, r1, #0x4D, 22
  000d0	e5863010	 str         r3, [r6, #0x10]
  000d4	eb000000	 bl          OALPAtoVA
  000d8	e59f3064	 ldr         r3, [pc, #0x64]

; 136  : 
; 137  :     // Start timer
; 138  :     OUTREG32(&g_timer.pTimerRegs->TVR, TIMER_PERIOD - 1);

  000dc	e5962010	 ldr         r2, [r6, #0x10]
  000e0	e5830000	 str         r0, [r3]
  000e4	e3a0301f	 mov         r3, #0x1F
  000e8	e5823000	 str         r3, [r2]

; 139  :     SETREG32(&g_timer.pTimerRegs->CR, CR_TRB);

  000ec	e5962010	 ldr         r2, [r6, #0x10]
  000f0	e5b23008	 ldr         r3, [r2, #8]!
  000f4	e3833002	 orr         r3, r3, #2
  000f8	e5823000	 str         r3, [r2]
  000fc	e5962010	 ldr         r2, [r6, #0x10]
  00100		 |$LL2@OALTimerIn|

; 140  :     while ((INREG32(&g_timer.pTimerRegs->CR) & CR_TRB) != 0);

  00100	e5923008	 ldr         r3, [r2, #8]
  00104	e3130002	 tst         r3, #2
  00108	1afffffc	 bne         |$LL2@OALTimerIn|

; 141  :     SETREG32(&g_timer.pTimerRegs->CR, CR_TSS|CR_INT_EN|CR_ARL);

  0010c	e5923008	 ldr         r3, [r2, #8]

; 142  : 
; 143  :     // Done
; 144  :     rc = TRUE;

  00110	e3a05001	 mov         r5, #1
  00114	e383300d	 orr         r3, r3, #0xD
  00118	e5823008	 str         r3, [r2, #8]
  0011c		 |$LN13@OALTimerIn|
  0011c	e5943440	 ldr         r3, [r4, #0x440]
  00120		 |$cleanUp$43950|

; 145  : 
; 146  : cleanUp:
; 147  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OALTimerInit(rc = %d)\r\n", rc));

  00120	e3130b02	 tst         r3, #2, 22
  00124	13130004	 tstne       r3, #4
  00128	159f0010	 ldrne       r0, [pc, #0x10]
  0012c	11a01005	 movne       r1, r5
  00130	1b000000	 blne        NKDbgPrintfW

; 148  :     return rc;
; 149  : }

  00134	e1a00005	 mov         r0, r5
  00138	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  0013c	e12fff1e	 bx          lr
  00140		 |$LN17@OALTimerIn|
  00140		 |$LN18@OALTimerIn|
  00140	00000000	 DCD         |??_C@_1DC@BNLGCJKD@?$AA?9?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00144		 |$LN19@OALTimerIn|
  00144	00000000	 DCD         |g_pOALEMIFRegs|
  00148		 |$LN20@OALTimerIn|
  00148	00000000	 DCD         |??_C@_1HM@CJGLDOPJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAe@|
  0014c		 |$LN21@OALTimerIn|
  0014c	00000000	 DCD         |g_oalTimerIrq|
  00150		 |$LN22@OALTimerIn|
  00150	00000000	 DCD         |g_timer|
  00154		 |$LN23@OALTimerIn|
  00154	00000000	 DCD         |g_pNKGlobal|
  00158		 |$LN24@OALTimerIn|
  00158	00000000	 DCD         |??_C@_1DI@BBHLNDEO@?$AA?$CL?$AAO?$AAA?$AAL?$AAT?$AAi?$AAm?$AAe?$AAr?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0015c		 |$LN25@OALTimerIn|
  0015c	00000000	 DCD         |dpCurSettings|
  00160		 |$M44110|

			 ENDP  ; |OALTimerInit|

	EXPORT	|OALTimerIntrHandler|
	IMPORT	|OEMWriteDebugLED|

  00000			 AREA	 |.pdata|, PDATA
|$T44138| DCD	|$LN21@OALTimerIn@2|
	DCD	0x40004801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALTimerIntrHandler| PROC

; 159  : {

  00000		 |$LN21@OALTimerIn@2|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M44135|

; 160  :     UINT32 sysIntr = SYSINTR_NOP;
; 161  :     UINT32 delta;
; 162  : 
; 163  :     // Should we update timer period?
; 164  :     if (g_timer.updatePeriod) {

  00004	e59f0110	 ldr         r0, [pc, #0x110]
  00008	e3a04000	 mov         r4, #0
  0000c	e5903014	 ldr         r3, [r0, #0x14]
  00010	e3530000	 cmp         r3, #0
  00014	0a000021	 beq         |$LN12@OALTimerIn@2|

; 165  :         UINT32 set = INREG32(&g_timer.pTimerRegs->TVR);

  00018	e5901010	 ldr         r1, [r0, #0x10]

; 166  :         UINT32 cnt = INREG32(&g_timer.pTimerRegs->TCR);

  0001c	e5915000	 ldr         r5, [r1]
  00020	e1a02001	 mov         r2, r1
  00024	e5b2e004	 ldr         lr, [r2, #4]!
  00028		 |$LL8@OALTimerIn@2|

; 167  :         // Wait for timer value change...
; 168  :         do {
; 169  :             while (cnt == INREG32(&g_timer.pTimerRegs->TCR));

  00028	e5923000	 ldr         r3, [r2]
  0002c	e15e0003	 cmp         lr, r3
  00030	0afffffc	 beq         |$LL8@OALTimerIn@2|

; 170  :             cnt = INREG32(&g_timer.pTimerRegs->TCR);

  00034	e592e000	 ldr         lr, [r2]

; 171  :         } while (cnt == set);

  00038	e15e0005	 cmp         lr, r5
  0003c	0afffff9	 beq         |$LL8@OALTimerIn@2|

; 172  :         // Set new value
; 173  :         OUTREG32(&g_timer.pTimerRegs->TVR, TIMER_PERIOD - 1);

  00040	e3a0301f	 mov         r3, #0x1F
  00044	e5813000	 str         r3, [r1]

; 174  :         SETREG32(&g_timer.pTimerRegs->CR, CR_TRB);

  00048	e5902010	 ldr         r2, [r0, #0x10]
  0004c	e5b23008	 ldr         r3, [r2, #8]!
  00050	e3833002	 orr         r3, r3, #2
  00054	e5823000	 str         r3, [r2]
  00058	e5902010	 ldr         r2, [r0, #0x10]
  0005c		 |$LL6@OALTimerIn@2|

; 175  :         // Wait while it is set
; 176  :         while ((INREG32(&g_timer.pTimerRegs->CR) & CR_TRB) != 0);

  0005c	e5923008	 ldr         r3, [r2, #8]
  00060	e3130002	 tst         r3, #2
  00064	1afffffc	 bne         |$LL6@OALTimerIn@2|
  00068		 |$LL4@OALTimerIn@2|

; 177  :         // Wait until one tick (any timer set in this time is ignored)
; 178  :         while (INREG32(&g_timer.pTimerRegs->TCR) != (TIMER_PERIOD - 2));

  00068	e5923004	 ldr         r3, [r2, #4]
  0006c	e353001e	 cmp         r3, #0x1E
  00070	1afffffc	 bne         |$LL4@OALTimerIn@2|

; 179  :         g_timer.curCounts += (set + 1) - cnt + 1;

  00074	e5901008	 ldr         r1, [r0, #8]
  00078	e045300e	 sub         r3, r5, lr
  0007c	e590200c	 ldr         r2, [r0, #0xC]
  00080	e2833002	 add         r3, r3, #2
  00084	e0933001	 adds        r3, r3, r1
  00088	e5803008	 str         r3, [r0, #8]
  0008c	e2a23000	 adc         r3, r2, #0
  00090	e580300c	 str         r3, [r0, #0xC]

; 180  :         // We are done with period update
; 181  :         g_timer.updatePeriod = FALSE;

  00094	e3a03000	 mov         r3, #0
  00098	e5803014	 str         r3, [r0, #0x14]

; 182  :     }
; 183  :     else {

  0009c	ea000005	 b           |$LN2@OALTimerIn@2|
  000a0		 |$LN12@OALTimerIn@2|

; 184  :         g_timer.curCounts += TIMER_PERIOD;

  000a0	e5903008	 ldr         r3, [r0, #8]
  000a4	e590200c	 ldr         r2, [r0, #0xC]
  000a8	e2933020	 adds        r3, r3, #0x20
  000ac	e2a22000	 adc         r2, r2, #0
  000b0	e5803008	 str         r3, [r0, #8]
  000b4	e580200c	 str         r2, [r0, #0xC]
  000b8		 |$LN2@OALTimerIn@2|

; 185  :     }
; 186  : 
; 187  :     // Update the millisecond and high resolution counters
; 188  :     CurMSec = (UINT32)((g_timer.curCounts * 1000) >> 15);

  000b8	e5903008	 ldr         r3, [r0, #8]
  000bc	e590100c	 ldr         r1, [r0, #0xC]
  000c0	e3a02ffa	 mov         r2, #0xFA, 30
  000c4	e0820293	 umull       r0, r2, r3, r2
  000c8	e59fe048	 ldr         lr, [pc, #0x48]
  000cc	e3a03ffa	 mov         r3, #0xFA, 30
  000d0	e0232391	 mla         r3, r1, r3, r2
  000d4	e59e2000	 ldr         r2, [lr]
  000d8	e1a03883	 mov         r3, r3, lsl #17
  000dc	e18337a0	 orr         r3, r3, r0, lsr #15
  000e0	e58230c8	 str         r3, [r2, #0xC8]

; 189  : 
; 190  :     // Reschedule?
; 191  :     delta = dwReschedTime - CurMSec;

  000e4	e59e1000	 ldr         r1, [lr]

; 192  :     if ((INT32)delta <= 0) sysIntr = SYSINTR_RESCHED;
; 193  : 
; 194  :     // Update LEDs.
; 195  :     // (Right shift by 10 instead of expensive division by 1000. This will 
; 196  :     // cause the LEDs to update every 1.024 seconds instead every 1 second,
; 197  :     // which is okay as this is just a notification and not a measurement of any sort)
; 198  :     OEMWriteDebugLED(0x0f, CurMSec >> 10);

  000e8	e3a0000f	 mov         r0, #0xF
  000ec	e59120c4	 ldr         r2, [r1, #0xC4]
  000f0	e59130c8	 ldr         r3, [r1, #0xC8]
  000f4	e0423003	 sub         r3, r2, r3
  000f8	e3530000	 cmp         r3, #0
  000fc	e59130c8	 ldr         r3, [r1, #0xC8]
  00100	d3a04001	 movle       r4, #1
  00104	e1a01523	 mov         r1, r3, lsr #10
  00108	eb000000	 bl          OEMWriteDebugLED

; 199  : 
; 200  :     // Return
; 201  :     return sysIntr;
; 202  : }

  0010c	e1a00004	 mov         r0, r4
  00110	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$LN22@OALTimerIn@2|
  00118		 |$LN23@OALTimerIn@2|
  00118	00000000	 DCD         |g_pNKGlobal|
  0011c		 |$LN24@OALTimerIn@2|
  0011c	00000000	 DCD         |g_timer|
  00120		 |$M44136|

			 ENDP  ; |OALTimerIntrHandler|

	EXPORT	|OEMIdle|
	IMPORT	|OALCPUIdle|
	IMPORT	|OALIntrIsIrqPending|

  00000			 AREA	 |.pdata|, PDATA
|$T44174| DCD	|$LN44@OEMIdle|
	DCD	0x40008901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMIdle| PROC

; 219  : {

  00000		 |$LN44@OEMIdle|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M44171|

; 220  :     UINT32 baseMSec, idleMSec;
; 221  :     INT32 usedCounts, idleCounts=0;
; 222  :     ULARGE_INTEGER idle;
; 223  :     UINT32 cnt, set;
; 224  :     OMAP5912_TIMER32K_REGS *pTimerRegs = g_timer.pTimerRegs;

  00004	e59f8214	 ldr         r8, [pc, #0x214]

; 225  : 
; 226  :     // Return, if we are waiting for restoring timer period
; 227  :     if (g_timer.updatePeriod) {

  00008	e5983014	 ldr         r3, [r8, #0x14]
  0000c	e5984010	 ldr         r4, [r8, #0x10]
  00010	e3530000	 cmp         r3, #0
  00014	1a00007e	 bne         |$LN25@OEMIdle|

; 228  :         return;
; 229  :     }
; 230  : 
; 231  :     // Get current system timer counter
; 232  :     baseMSec = CurMSec;

  00018	e59fa1fc	 ldr         r10, [pc, #0x1FC]
  0001c	e59a3000	 ldr         r3, [r10]
  00020	e59320c8	 ldr         r2, [r3, #0xC8]

; 233  : 
; 234  :     // Compute the remaining idle time
; 235  :     idleMSec = dwReschedTime - baseMSec;

  00024	e59330c4	 ldr         r3, [r3, #0xC4]
  00028	e0436002	 sub         r6, r3, r2

; 236  : 
; 237  :     // Idle time has expired - we need to return
; 238  :     if ((INT32)idleMSec <= 0) return;

  0002c	e3560000	 cmp         r6, #0
  00030	da000077	 ble         |$LN25@OEMIdle|

; 239  : 
; 240  :     // Limit the maximum idle time to what is supported.
; 241  :     if (idleMSec > g_timer.maxIdleMSec) idleMSec = g_timer.maxIdleMSec;

  00034	e5983000	 ldr         r3, [r8]

; 242  : 
; 243  :     // Find where we are and if interrupt is pending
; 244  :     cnt = INREG32(&pTimerRegs->TCR);

  00038	e5945004	 ldr         r5, [r4, #4]

; 245  :     if (OALIntrIsIrqPending(IRQ_TIMER32K) || cnt < TIMER_MARGIN) 

  0003c	e3a00036	 mov         r0, #0x36
  00040	e1560003	 cmp         r6, r3
  00044	81a06003	 movhi       r6, r3
  00048	eb000000	 bl          OALIntrIsIrqPending
  0004c	e3500000	 cmp         r0, #0
  00050	1a00006f	 bne         |$LN25@OEMIdle|
  00054	e3550003	 cmp         r5, #3
  00058	3a00006d	 bcc         |$LN25@OEMIdle|
  0005c		 |$LL21@OEMIdle|

; 246  :     {
; 247  :         // Full period was used, leave OEMIdle...
; 248  :         return;
; 249  :     }
; 250  : 
; 251  :     
; 252  :     // Wait for timer value change...
; 253  :     do {
; 254  :         while (cnt == INREG32(&pTimerRegs->TCR));

  0005c	e5943004	 ldr         r3, [r4, #4]
  00060	e1550003	 cmp         r5, r3
  00064	0afffffc	 beq         |$LL21@OEMIdle|

; 255  :         // We have check for interrupt one more time...
; 256  :         cnt = INREG32(&pTimerRegs->TCR);

  00068	e5945004	 ldr         r5, [r4, #4]

; 257  :     } while (cnt == TIMER_PERIOD - 1);

  0006c	e355001f	 cmp         r5, #0x1F
  00070	0afffff9	 beq         |$LL21@OEMIdle|

; 258  : 
; 259  :     // If there is pending interrupt now use short idle...
; 260  :     if (OALIntrIsIrqPending(IRQ_TIMER32K)) {

  00074	e3a00036	 mov         r0, #0x36
  00078	eb000000	 bl          OALIntrIsIrqPending
  0007c	e3500000	 cmp         r0, #0
  00080	1a000063	 bne         |$LN25@OEMIdle|

; 261  :         // Full period was used, leave OEMIdle...
; 262  :         return;
; 263  :     } else {
; 264  : 
; 265  :         // Idle time in hi-res ticks
; 266  :         idleCounts = idleMSec << 5;
; 267  : 
; 268  :         // We already used
; 269  :         usedCounts = TIMER_PERIOD - cnt + 1;
; 270  : 
; 271  :         // New timer period without timer setup compensation
; 272  :         if (idleMSec == 1)

  00084	e3560001	 cmp         r6, #1

; 273  :         {
; 274  :             set = TIMER_PERIOD - 1;

  00088	03a0601f	 moveq       r6, #0x1F
  0008c	e2657021	 rsb         r7, r5, #0x21

; 275  :         }
; 276  :         else
; 277  :         {
; 278  :             set = idleCounts - usedCounts - 1;

  00090	10673286	 rsbne       r3, r7, r6, lsl #5
  00094	12436001	 subne       r6, r3, #1

; 279  :         }
; 280  : 
; 281  :         // Set new value
; 282  :         OUTREG32(&pTimerRegs->TVR, set);
; 283  :         SETREG32(&pTimerRegs->CR, CR_TRB);

  00098	e1a05004	 mov         r5, r4
  0009c	e5846000	 str         r6, [r4]
  000a0	e5b53008	 ldr         r3, [r5, #8]!
  000a4	e3833002	 orr         r3, r3, #2
  000a8	e5853000	 str         r3, [r5]
  000ac		 |$LL15@OEMIdle|

; 284  :         // Wait while it is set
; 285  :         while ((INREG32(&pTimerRegs->CR) & CR_TRB) != 0);

  000ac	e5953000	 ldr         r3, [r5]
  000b0	e3130002	 tst         r3, #2
  000b4	1afffffc	 bne         |$LL15@OEMIdle|
  000b8	e2462001	 sub         r2, r6, #1
  000bc		 |$LL13@OEMIdle|

; 286  :         // Wait until one tick (any timer set in this time is ignored)
; 287  :         while (INREG32(&pTimerRegs->TCR) != (set - 1));

  000bc	e5943004	 ldr         r3, [r4, #4]
  000c0	e1530002	 cmp         r3, r2
  000c4	1afffffc	 bne         |$LL13@OEMIdle|

; 288  : 
; 289  :         // There must be period update
; 290  :         g_timer.updatePeriod = TRUE;

  000c8	e3a03001	 mov         r3, #1
  000cc	e5883014	 str         r3, [r8, #0x14]

; 291  :     }
; 292  : 
; 293  :     // Move SoC/CPU to idle mode - interrupt are disabled
; 294  :     OALCPUIdle();

  000d0	eb000000	 bl          OALCPUIdle

; 295  : 
; 296  :     // Get current counter value
; 297  :     cnt = INREG32(&pTimerRegs->TCR);
; 298  : 
; 299  : 
; 300  : 
; 301  :     if (OALIntrIsIrqPending(IRQ_TIMER32K) || cnt < TIMER_MARGIN)

  000d4	e5949004	 ldr         r9, [r4, #4]
  000d8	e3a00036	 mov         r0, #0x36
  000dc	eb000000	 bl          OALIntrIsIrqPending
  000e0	e3500000	 cmp         r0, #0
  000e4	1a00001a	 bne         |$LN10@OEMIdle|
  000e8	e3590003	 cmp         r9, #3
  000ec	3a000018	 bcc         |$LN10@OEMIdle|
  000f0		 |$LL8@OEMIdle|

; 305  :     }
; 306  :     else
; 307  :     {
; 308  : 
; 309  :         // Wait for timer value change...
; 310  :         while (cnt == INREG32(&pTimerRegs->TCR));

  000f0	e5943004	 ldr         r3, [r4, #4]
  000f4	e1590003	 cmp         r9, r3
  000f8	0afffffc	 beq         |$LL8@OEMIdle|

; 311  : 
; 312  :         // We have recheck pending IRQ
; 313  :         cnt = INREG32(&pTimerRegs->TCR);
; 314  :         if (!OALIntrIsIrqPending(IRQ_TIMER32K)) {

  000fc	e5949004	 ldr         r9, [r4, #4]
  00100	e3a00036	 mov         r0, #0x36
  00104	eb000000	 bl          OALIntrIsIrqPending
  00108	e3500000	 cmp         r0, #0
  0010c	1a000010	 bne         |$LN10@OEMIdle|

; 315  :             // no timer interrupt, must be some other interrupts, so just add how many counts elapsed
; 316  :             idleCounts = usedCounts + (set + 1) - cnt + 1;
; 317  : 
; 318  :             // set the timer back to 1 msec
; 319  :             set = TIMER_PERIOD - 1;
; 320  :             // Set new value
; 321  :             OUTREG32(&pTimerRegs->TVR, set);

  00110	e3a0301f	 mov         r3, #0x1F
  00114	e5843000	 str         r3, [r4]

; 322  :             SETREG32(&pTimerRegs->CR, CR_TRB);

  00118	e5952000	 ldr         r2, [r5]
  0011c	e0463009	 sub         r3, r6, r9
  00120	e0831007	 add         r1, r3, r7
  00124	e3823002	 orr         r3, r2, #2
  00128	e5853000	 str         r3, [r5]
  0012c	e2819002	 add         r9, r1, #2
  00130		 |$LL5@OEMIdle|

; 323  :             // Wait while it is set
; 324  :             while ((INREG32(&pTimerRegs->CR) & CR_TRB) != 0);

  00130	e5953000	 ldr         r3, [r5]
  00134	e3130002	 tst         r3, #2
  00138	1afffffc	 bne         |$LL5@OEMIdle|
  0013c		 |$LL3@OEMIdle|

; 325  :             // Wait until one tick (any timer set in this time is ignored)
; 326  :             while (INREG32(&pTimerRegs->TCR) != (set - 1));

  0013c	e5943004	 ldr         r3, [r4, #4]
  00140	e353001e	 cmp         r3, #0x1E
  00144	1afffffc	 bne         |$LL3@OEMIdle|

; 327  :             g_timer.updatePeriod = FALSE;

  00148	e3a03000	 mov         r3, #0
  0014c	e5883014	 str         r3, [r8, #0x14]

; 328  :         }
; 329  :         else 

  00150	ea000001	 b           |$LN1@OEMIdle|
  00154		 |$LN10@OEMIdle|

; 302  :     {
; 303  :         // It's timer interrupt, or no timer interrupt but close enough
; 304  :         idleCounts = (set + 1) + usedCounts;

  00154	e0863007	 add         r3, r6, r7
  00158	e2839001	 add         r9, r3, #1
  0015c		 |$LN1@OEMIdle|

; 330  :         {
; 331  :             // timer interrupted
; 332  :             idleCounts = (set + 1) + usedCounts;
; 333  :         }
; 334  : 
; 335  :     } 
; 336  : 
; 337  :     // Align between idle and tick in every 32768
; 338  :     idle.LowPart   = curridlelow;

  0015c	e59a6000	 ldr         r6, [r10]

; 339  :     idle.HighPart  = curridlehigh;
; 340  :     idle.QuadPart &= ~0x7fffull;
; 341  :     idle.QuadPart |= (g_timer.curCounts * 1000)&0x7fffull;
; 342  : 
; 343  :     // Fix system tick counters & idle counter
; 344  :     g_timer.curCounts += idleCounts;
; 345  :     CurMSec = (UINT32)((g_timer.curCounts * 1000) >> 15);

  00160	e3a04ffa	 mov         r4, #0xFA, 30
  00164	e3a0bffa	 mov         r11, #0xFA, 30
  00168	e596e0d0	 ldr         lr, [r6, #0xD0]
  0016c	e59670d4	 ldr         r7, [r6, #0xD4]
  00170	e5980008	 ldr         r0, [r8, #8]
  00174	e5983008	 ldr         r3, [r8, #8]
  00178	e598200c	 ldr         r2, [r8, #0xC]
  0017c	e0854490	 umull       r4, r5, r0, r4
  00180	e0933009	 adds        r3, r3, r9
  00184	e0a22fc9	 adc         r2, r2, r9, asr #31
  00188	e5883008	 str         r3, [r8, #8]
  0018c	e588200c	 str         r2, [r8, #0xC]
  00190	e5982008	 ldr         r2, [r8, #8]
  00194	e598100c	 ldr         r1, [r8, #0xC]
  00198	e3e08c7f	 mvn         r8, #0x7F, 24
  0019c	e0830b92	 umull       r0, r3, r2, r11
  001a0	e3a02ffa	 mov         r2, #0xFA, 30
  001a4	e0233291	 mla         r3, r1, r2, r3
  001a8	e3a01c7f	 mov         r1, #0x7F, 24
  001ac	e1a03883	 mov         r3, r3, lsl #17
  001b0	e18327a0	 orr         r2, r3, r0, lsr #15
  001b4	e22830ff	 eor         r3, r8, #0xFF

; 346  : 
; 347  :     // Update idle counters
; 348  :     idle.QuadPart += idleCounts * 1000;

  001b8	e3a08ffa	 mov         r8, #0xFA, 30
  001bc	e38110ff	 orr         r1, r1, #0xFF
  001c0	e00e0003	 and         r0, lr, r3
  001c4	e58620c8	 str         r2, [r6, #0xC8]

; 349  :     curridlelow  = idle.LowPart;

  001c8	e0043001	 and         r3, r4, r1
  001cc	e0020899	 mul         r2, r9, r8
  001d0	e59ae000	 ldr         lr, [r10]
  001d4	e1833000	 orr         r3, r3, r0
  001d8	e0933002	 adds        r3, r3, r2
  001dc	e0a72fc2	 adc         r2, r7, r2, asr #31

; 350  :     curridlehigh = idle.HighPart;
; 351  : 
; 352  :     OEMWriteDebugLED(0x0f, CurMSec >> 10);

  001e0	e3a0000f	 mov         r0, #0xF
  001e4	e58e30d0	 str         r3, [lr, #0xD0]
  001e8	e59a3000	 ldr         r3, [r10]
  001ec	e58320d4	 str         r2, [r3, #0xD4]
  001f0	e59a3000	 ldr         r3, [r10]
  001f4	e59330c8	 ldr         r3, [r3, #0xC8]
  001f8	e1a01523	 mov         r1, r3, lsr #10
  001fc	eb000000	 bl          OEMWriteDebugLED

; 353  :     OEMWriteDebugLED(0xf0, curridlelow >> 21);

  00200	e59a3000	 ldr         r3, [r10]
  00204	e3a000f0	 mov         r0, #0xF0
  00208	e59330d0	 ldr         r3, [r3, #0xD0]
  0020c	e1a01aa3	 mov         r1, r3, lsr #21
  00210	eb000000	 bl          OEMWriteDebugLED
  00214		 |$LN25@OEMIdle|

; 354  : }

  00214	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00218	e12fff1e	 bx          lr
  0021c		 |$LN45@OEMIdle|
  0021c		 |$LN46@OEMIdle|
  0021c	00000000	 DCD         |g_pNKGlobal|
  00220		 |$LN47@OEMIdle|
  00220	00000000	 DCD         |g_timer|
  00224		 |$M44172|

			 ENDP  ; |OEMIdle|

	EXPORT	|OEMGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T44186| DCD	|$LN5@OEMGetTick|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMGetTickCount| PROC

; 366  : {

  00000		 |$LN5@OEMGetTick|
  00000		 |$M44183|

; 367  :     return CurMSec;

  00000	e59f3008	 ldr         r3, [pc, #8]
  00004	e5933000	 ldr         r3, [r3]
  00008	e59300c8	 ldr         r0, [r3, #0xC8]

; 368  : }

  0000c	e12fff1e	 bx          lr
  00010		 |$LN6@OEMGetTick|
  00010		 |$LN7@OEMGetTick|
  00010	00000000	 DCD         |g_pNKGlobal|
  00014		 |$M44184|

			 ENDP  ; |OEMGetTickCount|

	END
