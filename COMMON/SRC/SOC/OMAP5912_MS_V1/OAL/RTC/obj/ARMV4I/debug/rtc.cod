; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP5912_MS_V1\OAL\RTC\rtc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_pRTCRegs| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMSetRealTime|
	EXPORT	|??_C@_1GA@HLCFANML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalInitRTC|
	IMPORT	|g_pOemGlobal|
	IMPORT	|OALPAtoVA|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T44118| DCD	|$LN18@OALIoCtlHa|
	DCD	0x40009504
; File c:\wince600\platform\common\src\soc\omap5912_ms_v1\oal\rtc\rtc.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HLCFANML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, "r"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalInitRTC| PROC

; 50   : {

  00000		 |$LN18@OALIoCtlHa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M44115|

; 51   :     SYSTEMTIME *lpst = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 52   :     BOOL rc = FALSE;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3000	 str         r3, [sp]

; 53   :     UINT8 stat;
; 54   : 
; 55   :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlHalInitRTC(...)\r\n"));

  00020	e59f3214	 ldr         r3, [pc, #0x214]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130a01	 tst         r3, #1, 20
  0002c	0a000008	 beq         |$LN10@OALIoCtlHa|
  00030	e59f3204	 ldr         r3, [pc, #0x204]
  00034	e5933440	 ldr         r3, [r3, #0x440]
  00038	e3130004	 tst         r3, #4
  0003c	0a000004	 beq         |$LN10@OALIoCtlHa|
  00040	e59f0208	 ldr         r0, [pc, #0x208]
  00044	eb000000	 bl          NKDbgPrintfW
  00048	e3a03001	 mov         r3, #1
  0004c	e58d3010	 str         r3, [sp, #0x10]
  00050	ea000001	 b           |$LN11@OALIoCtlHa|
  00054		 |$LN10@OALIoCtlHa|
  00054	e3a03000	 mov         r3, #0
  00058	e58d3010	 str         r3, [sp, #0x10]
  0005c		 |$LN11@OALIoCtlHa|

; 56   : 
; 57   :     if(pOutSize) {

  0005c	e59d3040	 ldr         r3, [sp, #0x40]
  00060	e3530000	 cmp         r3, #0
  00064	0a000002	 beq         |$LN7@OALIoCtlHa|

; 58   :         *pOutSize = 0;

  00068	e59d2040	 ldr         r2, [sp, #0x40]
  0006c	e3a03000	 mov         r3, #0
  00070	e5823000	 str         r3, [r2]
  00074		 |$LN7@OALIoCtlHa|

; 59   :     }
; 60   : 
; 61   :     // Validity checks
; 62   :     if(code!=IOCTL_HAL_INIT_RTC || pInpBuffer==NULL || inpSize!=sizeof(SYSTEMTIME))

  00074	e59d202c	 ldr         r2, [sp, #0x2C]
  00078	e59f31cc	 ldr         r3, [pc, #0x1CC]
  0007c	e1520003	 cmp         r2, r3
  00080	1a000005	 bne         |$LN5@OALIoCtlHa|
  00084	e59d3030	 ldr         r3, [sp, #0x30]
  00088	e3530000	 cmp         r3, #0
  0008c	0a000002	 beq         |$LN5@OALIoCtlHa|
  00090	e59d3034	 ldr         r3, [sp, #0x34]
  00094	e3530010	 cmp         r3, #0x10
  00098	0a00000d	 beq         |$LN6@OALIoCtlHa|
  0009c		 |$LN5@OALIoCtlHa|

; 63   :     {
; 64   :         OALMSG(OAL_ERROR, (L"ERROR: Invalid calling parameters...returning\r\n"));

  0009c	e59f3198	 ldr         r3, [pc, #0x198]
  000a0	e5933440	 ldr         r3, [r3, #0x440]
  000a4	e3130001	 tst         r3, #1
  000a8	0a000004	 beq         |$LN12@OALIoCtlHa|
  000ac	e59f0194	 ldr         r0, [pc, #0x194]
  000b0	eb000000	 bl          NKDbgPrintfW
  000b4	e3a03001	 mov         r3, #1
  000b8	e58d3014	 str         r3, [sp, #0x14]
  000bc	ea000001	 b           |$LN13@OALIoCtlHa|
  000c0		 |$LN12@OALIoCtlHa|
  000c0	e3a03000	 mov         r3, #0
  000c4	e58d3014	 str         r3, [sp, #0x14]
  000c8		 |$LN13@OALIoCtlHa|

; 65   :         rc = FALSE;

  000c8	e3a03000	 mov         r3, #0
  000cc	e58d3000	 str         r3, [sp]

; 66   :         goto cleanUp;

  000d0	ea000042	 b           |$cleanUp$43927|
  000d4		 |$LN6@OALIoCtlHa|

; 67   :     }
; 68   : 
; 69   :     // Initialize virtual address pointer
; 70   :     if (g_pRTCRegs == NULL) g_pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  000d4	e59f3168	 ldr         r3, [pc, #0x168]
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e3530000	 cmp         r3, #0
  000e0	1a000007	 bne         |$LN4@OALIoCtlHa|
  000e4	e3a01000	 mov         r1, #0
  000e8	e3a00b02	 mov         r0, #2, 22
  000ec	e2400913	 sub         r0, r0, #0x13, 18
  000f0	eb000000	 bl          OALPAtoVA
  000f4	e58d0018	 str         r0, [sp, #0x18]
  000f8	e59d2018	 ldr         r2, [sp, #0x18]
  000fc	e59f3140	 ldr         r3, [pc, #0x140]
  00100	e5832000	 str         r2, [r3]
  00104		 |$LN4@OALIoCtlHa|

; 71   :     
; 72   :     // Initialize the control register.
; 73   :     OUTREG8(&g_pRTCRegs->CTRL, RTC_CTRL_INIT);

  00104	e59f3138	 ldr         r3, [pc, #0x138]
  00108	e5933000	 ldr         r3, [r3]
  0010c	e2832040	 add         r2, r3, #0x40
  00110	e3a03000	 mov         r3, #0
  00114	e5c23000	 strb        r3, [r2]
  00118		 |$LN3@OALIoCtlHa|

; 74   : 
; 75   :     // Wait until RUN is active
; 76   :     while ((INREG8(&g_pRTCRegs->STAT) & RTC_STAT_RUN) != 0);

  00118	e59f3124	 ldr         r3, [pc, #0x124]
  0011c	e5933000	 ldr         r3, [r3]
  00120	e2833044	 add         r3, r3, #0x44
  00124	e5d33000	 ldrb        r3, [r3]
  00128	e3130002	 tst         r3, #2
  0012c	0a000000	 beq         |$LN2@OALIoCtlHa|
  00130	eafffff8	 b           |$LN3@OALIoCtlHa|
  00134		 |$LN2@OALIoCtlHa|

; 77   : 
; 78   :     // Initialize interrupt register
; 79   :     OUTREG8(&g_pRTCRegs->INTR, 0);

  00134	e59f3108	 ldr         r3, [pc, #0x108]
  00138	e5933000	 ldr         r3, [r3]
  0013c	e2832048	 add         r2, r3, #0x48
  00140	e3a03000	 mov         r3, #0
  00144	e5c23000	 strb        r3, [r2]

; 80   : 
; 81   :     // Save reset status
; 82   :     stat = INREG8(&g_pRTCRegs->STAT);

  00148	e59f30f4	 ldr         r3, [pc, #0xF4]
  0014c	e5933000	 ldr         r3, [r3]
  00150	e2833044	 add         r3, r3, #0x44
  00154	e5d33000	 ldrb        r3, [r3]
  00158	e5cd3004	 strb        r3, [sp, #4]

; 83   :     
; 84   :     // Clear power up status and alarm interrupt
; 85   :     OUTREG8(&g_pRTCRegs->STAT, RTC_STAT_ALARM|RTC_STAT_RESET);

  0015c	e59f30e0	 ldr         r3, [pc, #0xE0]
  00160	e5933000	 ldr         r3, [r3]
  00164	e2832044	 add         r2, r3, #0x44
  00168	e3a030c0	 mov         r3, #0xC0
  0016c	e5c23000	 strb        r3, [r2]

; 86   : 
; 87   :     // Start the RTC
; 88   :     SETREG8(&g_pRTCRegs->CTRL, RTC_CTRL_RUN);

  00170	e59f30cc	 ldr         r3, [pc, #0xCC]
  00174	e5933000	 ldr         r3, [r3]
  00178	e2833040	 add         r3, r3, #0x40
  0017c	e5d33000	 ldrb        r3, [r3]
  00180	e3833001	 orr         r3, r3, #1
  00184	e20320ff	 and         r2, r3, #0xFF
  00188	e59f30b4	 ldr         r3, [pc, #0xB4]
  0018c	e5933000	 ldr         r3, [r3]
  00190	e2833040	 add         r3, r3, #0x40
  00194	e5c32000	 strb        r2, [r3]

; 89   : 
; 90   :     rc = TRUE;

  00198	e3a03001	 mov         r3, #1
  0019c	e58d3000	 str         r3, [sp]

; 91   :     
; 92   :     // Set time defined in platform only once after powerup
; 93   :     lpst = (SYSTEMTIME *)pInpBuffer;

  001a0	e59d3030	 ldr         r3, [sp, #0x30]
  001a4	e58d3008	 str         r3, [sp, #8]

; 94   :     if ((stat & RTC_STAT_RESET) == RTC_STAT_RESET) {

  001a8	e5dd3004	 ldrb        r3, [sp, #4]
  001ac	e2033080	 and         r3, r3, #0x80
  001b0	e3530080	 cmp         r3, #0x80
  001b4	1a000004	 bne         |$LN1@OALIoCtlHa|

; 95   :         rc = OEMSetRealTime(lpst);

  001b8	e59d0008	 ldr         r0, [sp, #8]
  001bc	eb000000	 bl          OEMSetRealTime
  001c0	e58d001c	 str         r0, [sp, #0x1C]
  001c4	e59d301c	 ldr         r3, [sp, #0x1C]
  001c8	e58d3000	 str         r3, [sp]
  001cc		 |$LN1@OALIoCtlHa|

; 96   :     }
; 97   : 
; 98   :     // OMAP5912 has 1s alarm resolution
; 99   :     g_pOemGlobal->dwAlarmResolution = 1000;

  001cc	e59f306c	 ldr         r3, [pc, #0x6C]
  001d0	e5933000	 ldr         r3, [r3]
  001d4	e28320e4	 add         r2, r3, #0xE4
  001d8	e3a03ffa	 mov         r3, #0xFA, 30
  001dc	e5823000	 str         r3, [r2]
  001e0		 |$cleanUp$43927|

; 100  :     
; 101  : cleanUp:
; 102  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"-OALIoCtlHalInitRTC(rc = %d)\r\n", rc));

  001e0	e59f3054	 ldr         r3, [pc, #0x54]
  001e4	e5933440	 ldr         r3, [r3, #0x440]
  001e8	e3130a01	 tst         r3, #1, 20
  001ec	0a000009	 beq         |$LN14@OALIoCtlHa|
  001f0	e59f3044	 ldr         r3, [pc, #0x44]
  001f4	e5933440	 ldr         r3, [r3, #0x440]
  001f8	e3130004	 tst         r3, #4
  001fc	0a000005	 beq         |$LN14@OALIoCtlHa|
  00200	e59d1000	 ldr         r1, [sp]
  00204	e59f002c	 ldr         r0, [pc, #0x2C]
  00208	eb000000	 bl          NKDbgPrintfW
  0020c	e3a03001	 mov         r3, #1
  00210	e58d3020	 str         r3, [sp, #0x20]
  00214	ea000001	 b           |$LN15@OALIoCtlHa|
  00218		 |$LN14@OALIoCtlHa|
  00218	e3a03000	 mov         r3, #0
  0021c	e58d3020	 str         r3, [sp, #0x20]
  00220		 |$LN15@OALIoCtlHa|

; 103  :     return rc;

  00220	e59d3000	 ldr         r3, [sp]
  00224	e58d300c	 str         r3, [sp, #0xC]

; 104  : }

  00228	e59d000c	 ldr         r0, [sp, #0xC]
  0022c	e28dd024	 add         sp, sp, #0x24
  00230	e89d6000	 ldmia       sp, {sp, lr}
  00234	e12fff1e	 bx          lr
  00238		 |$LN19@OALIoCtlHa|
  00238		 |$LN20@OALIoCtlHa|
  00238	00000000	 DCD         |??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0023c		 |$LN21@OALIoCtlHa|
  0023c	00000000	 DCD         |dpCurSettings|
  00240		 |$LN22@OALIoCtlHa|
  00240	00000000	 DCD         |g_pOemGlobal|
  00244		 |$LN23@OALIoCtlHa|
  00244	00000000	 DCD         |g_pRTCRegs|
  00248		 |$LN24@OALIoCtlHa|
  00248	00000000	 DCD         |??_C@_1GA@HLCFANML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr@|
  0024c		 |$LN25@OALIoCtlHa|
  0024c	01010038	 DCD         0x1010038
  00250		 |$LN26@OALIoCtlHa|
  00250	00000000	 DCD         |??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00254		 |$M44116|

			 ENDP  ; |OALIoCtlHalInitRTC|

	EXPORT	|??_C@_1GG@MNNCNIB@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMGetRealTime|
	IMPORT	|INTERRUPTS_ENABLE|

  00008			 AREA	 |.pdata|, PDATA
|$T44141| DCD	|$LN13@OEMGetReal|
	DCD	0x4000e204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@MNNCNIB@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, "."
	DCB	0x0, "%", 0x0, "0", 0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00254			 AREA	 |.text|, CODE, ARM

  00254		 |OEMGetRealTime| PROC

; 115  : {

  00254		 |$LN13@OEMGetReal|
  00254	e1a0c00d	 mov         r12, sp
  00258	e92d0001	 stmdb       sp!, {r0}
  0025c	e92d5000	 stmdb       sp!, {r12, lr}
  00260	e24dd054	 sub         sp, sp, #0x54
  00264		 |$M44138|

; 116  :     BOOL rc = FALSE;

  00264	e3a03000	 mov         r3, #0
  00268	e58d3018	 str         r3, [sp, #0x18]

; 117  :     BOOL enabled;
; 118  :     UINT8 year, month, dweek, day, hour, min, sec;
; 119  : 
; 120  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OEMGetRealTime\r\n"));

  0026c	e59f335c	 ldr         r3, [pc, #0x35C]
  00270	e5933440	 ldr         r3, [r3, #0x440]
  00274	e3130040	 tst         r3, #0x40
  00278	0a000008	 beq         |$LN7@OEMGetReal|
  0027c	e59f334c	 ldr         r3, [pc, #0x34C]
  00280	e5933440	 ldr         r3, [r3, #0x440]
  00284	e3130004	 tst         r3, #4
  00288	0a000004	 beq         |$LN7@OEMGetReal|
  0028c	e59f0344	 ldr         r0, [pc, #0x344]
  00290	eb000000	 bl          NKDbgPrintfW
  00294	e3a03001	 mov         r3, #1
  00298	e58d3044	 str         r3, [sp, #0x44]
  0029c	ea000001	 b           |$LN8@OEMGetReal|
  002a0		 |$LN7@OEMGetReal|
  002a0	e3a03000	 mov         r3, #0
  002a4	e58d3044	 str         r3, [sp, #0x44]
  002a8		 |$LN8@OEMGetReal|

; 121  : 
; 122  :     if (!pTime) goto cleanUp;

  002a8	e59d305c	 ldr         r3, [sp, #0x5C]
  002ac	e3530000	 cmp         r3, #0
  002b0	1a000000	 bne         |$LN4@OEMGetReal|
  002b4	ea0000be	 b           |$cleanUp$43963|
  002b8		 |$LN4@OEMGetReal|

; 123  : 
; 124  :     // Initialize virtual address pointer
; 125  :     if (g_pRTCRegs == NULL) g_pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  002b8	e59f3314	 ldr         r3, [pc, #0x314]
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e3530000	 cmp         r3, #0
  002c4	1a000007	 bne         |$LN3@OEMGetReal|
  002c8	e3a01000	 mov         r1, #0
  002cc	e3a00b02	 mov         r0, #2, 22
  002d0	e2400913	 sub         r0, r0, #0x13, 18
  002d4	eb000000	 bl          OALPAtoVA
  002d8	e58d0048	 str         r0, [sp, #0x48]
  002dc	e59d2048	 ldr         r2, [sp, #0x48]
  002e0	e59f32ec	 ldr         r3, [pc, #0x2EC]
  002e4	e5832000	 str         r2, [r3]
  002e8		 |$LN3@OEMGetReal|

; 126  : 
; 127  :     
; 128  :     // Disable interrupts when registers are read
; 129  :     enabled = INTERRUPTS_ENABLE(FALSE);

  002e8	e3a00000	 mov         r0, #0
  002ec	eb000000	 bl          INTERRUPTS_ENABLE
  002f0	e58d004c	 str         r0, [sp, #0x4C]
  002f4	e59d304c	 ldr         r3, [sp, #0x4C]
  002f8	e58d3024	 str         r3, [sp, #0x24]
  002fc		 |$LN2@OEMGetReal|

; 130  : 
; 131  :     // Wait for BUSY low. Anytime BUSY is low, there is
; 132  :     // at least 15us to carry out the R/W.
; 133  :     while ((INREG8(&g_pRTCRegs->STAT) & RTC_STAT_BUSY) != 0);

  002fc	e59f32d0	 ldr         r3, [pc, #0x2D0]
  00300	e5933000	 ldr         r3, [r3]
  00304	e2833044	 add         r3, r3, #0x44
  00308	e5d33000	 ldrb        r3, [r3]
  0030c	e3130001	 tst         r3, #1
  00310	0a000000	 beq         |$LN1@OEMGetReal|
  00314	eafffff8	 b           |$LN2@OEMGetReal|
  00318		 |$LN1@OEMGetReal|

; 134  : 
; 135  :     // Read RTC time registers
; 136  :     year  = INREG8(&g_pRTCRegs->YEAR);

  00318	e59f32b4	 ldr         r3, [pc, #0x2B4]
  0031c	e5933000	 ldr         r3, [r3]
  00320	e2833014	 add         r3, r3, #0x14
  00324	e5d33000	 ldrb        r3, [r3]
  00328	e5cd3028	 strb        r3, [sp, #0x28]

; 137  :     month = INREG8(&g_pRTCRegs->MONTH);

  0032c	e59f32a0	 ldr         r3, [pc, #0x2A0]
  00330	e5933000	 ldr         r3, [r3]
  00334	e2833010	 add         r3, r3, #0x10
  00338	e5d33000	 ldrb        r3, [r3]
  0033c	e5cd3020	 strb        r3, [sp, #0x20]

; 138  :     dweek = INREG8(&g_pRTCRegs->WEEKDAY);

  00340	e59f328c	 ldr         r3, [pc, #0x28C]
  00344	e5933000	 ldr         r3, [r3]
  00348	e2833018	 add         r3, r3, #0x18
  0034c	e5d33000	 ldrb        r3, [r3]
  00350	e5cd301e	 strb        r3, [sp, #0x1E]

; 139  :     day   = INREG8(&g_pRTCRegs->DAY);

  00354	e59f3278	 ldr         r3, [pc, #0x278]
  00358	e5933000	 ldr         r3, [r3]
  0035c	e283300c	 add         r3, r3, #0xC
  00360	e5d33000	 ldrb        r3, [r3]
  00364	e5cd3014	 strb        r3, [sp, #0x14]

; 140  :     hour  = INREG8(&g_pRTCRegs->HOURS);

  00368	e59f3264	 ldr         r3, [pc, #0x264]
  0036c	e5933000	 ldr         r3, [r3]
  00370	e2833008	 add         r3, r3, #8
  00374	e5d33000	 ldrb        r3, [r3]
  00378	e5cd301f	 strb        r3, [sp, #0x1F]

; 141  :     min   = INREG8(&g_pRTCRegs->MINS);

  0037c	e59f3250	 ldr         r3, [pc, #0x250]
  00380	e5933000	 ldr         r3, [r3]
  00384	e2833004	 add         r3, r3, #4
  00388	e5d33000	 ldrb        r3, [r3]
  0038c	e5cd301d	 strb        r3, [sp, #0x1D]

; 142  :     sec   = INREG8(&g_pRTCRegs->SECS);

  00390	e59f323c	 ldr         r3, [pc, #0x23C]
  00394	e5933000	 ldr         r3, [r3]
  00398	e5d33000	 ldrb        r3, [r3]
  0039c	e5cd301c	 strb        r3, [sp, #0x1C]

; 143  : 
; 144  :     // Enable interrupts
; 145  :     INTERRUPTS_ENABLE(enabled);

  003a0	e59d0024	 ldr         r0, [sp, #0x24]
  003a4	eb000000	 bl          INTERRUPTS_ENABLE

; 146  : 
; 147  :     // Convert from RTC Binary Coded Decimal to SYSTEMTIME and store.
; 148  :     pTime->wYear         = BCD2BIN(year)+RTC_YEAR_BEGIN;

  003a8	e5dd3028	 ldrb        r3, [sp, #0x28]
  003ac	e1a01243	 mov         r1, r3, asr #4
  003b0	e3a0300a	 mov         r3, #0xA
  003b4	e0020391	 mul         r2, r1, r3
  003b8	e5dd3028	 ldrb        r3, [sp, #0x28]
  003bc	e203300f	 and         r3, r3, #0xF
  003c0	e0823003	 add         r3, r2, r3
  003c4	e2833e7d	 add         r3, r3, #0x7D, 28
  003c8	e1a02803	 mov         r2, r3, lsl #16
  003cc	e1a02822	 mov         r2, r2, lsr #16
  003d0	e59d305c	 ldr         r3, [sp, #0x5C]
  003d4	e1c320b0	 strh        r2, [r3]

; 149  :     pTime->wMonth        = BCD2BIN(month);

  003d8	e5dd3020	 ldrb        r3, [sp, #0x20]
  003dc	e1a01243	 mov         r1, r3, asr #4
  003e0	e3a0300a	 mov         r3, #0xA
  003e4	e0020391	 mul         r2, r1, r3
  003e8	e5dd3020	 ldrb        r3, [sp, #0x20]
  003ec	e203300f	 and         r3, r3, #0xF
  003f0	e0821003	 add         r1, r2, r3
  003f4	e59d305c	 ldr         r3, [sp, #0x5C]
  003f8	e2832002	 add         r2, r3, #2
  003fc	e1a03801	 mov         r3, r1, lsl #16
  00400	e1a03823	 mov         r3, r3, lsr #16
  00404	e1c230b0	 strh        r3, [r2]

; 150  :     pTime->wDayOfWeek    = BCD2BIN(dweek);

  00408	e5dd301e	 ldrb        r3, [sp, #0x1E]
  0040c	e1a01243	 mov         r1, r3, asr #4
  00410	e3a0300a	 mov         r3, #0xA
  00414	e0020391	 mul         r2, r1, r3
  00418	e5dd301e	 ldrb        r3, [sp, #0x1E]
  0041c	e203300f	 and         r3, r3, #0xF
  00420	e0821003	 add         r1, r2, r3
  00424	e59d305c	 ldr         r3, [sp, #0x5C]
  00428	e2832004	 add         r2, r3, #4
  0042c	e1a03801	 mov         r3, r1, lsl #16
  00430	e1a03823	 mov         r3, r3, lsr #16
  00434	e1c230b0	 strh        r3, [r2]

; 151  :     pTime->wDay          = BCD2BIN(day);

  00438	e5dd3014	 ldrb        r3, [sp, #0x14]
  0043c	e1a01243	 mov         r1, r3, asr #4
  00440	e3a0300a	 mov         r3, #0xA
  00444	e0020391	 mul         r2, r1, r3
  00448	e5dd3014	 ldrb        r3, [sp, #0x14]
  0044c	e203300f	 and         r3, r3, #0xF
  00450	e0821003	 add         r1, r2, r3
  00454	e59d305c	 ldr         r3, [sp, #0x5C]
  00458	e2832006	 add         r2, r3, #6
  0045c	e1a03801	 mov         r3, r1, lsl #16
  00460	e1a03823	 mov         r3, r3, lsr #16
  00464	e1c230b0	 strh        r3, [r2]

; 152  :     pTime->wHour         = BCD2BIN(hour);

  00468	e5dd301f	 ldrb        r3, [sp, #0x1F]
  0046c	e1a01243	 mov         r1, r3, asr #4
  00470	e3a0300a	 mov         r3, #0xA
  00474	e0020391	 mul         r2, r1, r3
  00478	e5dd301f	 ldrb        r3, [sp, #0x1F]
  0047c	e203300f	 and         r3, r3, #0xF
  00480	e0821003	 add         r1, r2, r3
  00484	e59d305c	 ldr         r3, [sp, #0x5C]
  00488	e2832008	 add         r2, r3, #8
  0048c	e1a03801	 mov         r3, r1, lsl #16
  00490	e1a03823	 mov         r3, r3, lsr #16
  00494	e1c230b0	 strh        r3, [r2]

; 153  :     pTime->wMinute       = BCD2BIN(min);

  00498	e5dd301d	 ldrb        r3, [sp, #0x1D]
  0049c	e1a01243	 mov         r1, r3, asr #4
  004a0	e3a0300a	 mov         r3, #0xA
  004a4	e0020391	 mul         r2, r1, r3
  004a8	e5dd301d	 ldrb        r3, [sp, #0x1D]
  004ac	e203300f	 and         r3, r3, #0xF
  004b0	e0821003	 add         r1, r2, r3
  004b4	e59d305c	 ldr         r3, [sp, #0x5C]
  004b8	e283200a	 add         r2, r3, #0xA
  004bc	e1a03801	 mov         r3, r1, lsl #16
  004c0	e1a03823	 mov         r3, r3, lsr #16
  004c4	e1c230b0	 strh        r3, [r2]

; 154  :     pTime->wSecond       = BCD2BIN(sec);

  004c8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  004cc	e1a01243	 mov         r1, r3, asr #4
  004d0	e3a0300a	 mov         r3, #0xA
  004d4	e0020391	 mul         r2, r1, r3
  004d8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  004dc	e203300f	 and         r3, r3, #0xF
  004e0	e0821003	 add         r1, r2, r3
  004e4	e59d305c	 ldr         r3, [sp, #0x5C]
  004e8	e283200c	 add         r2, r3, #0xC
  004ec	e1a03801	 mov         r3, r1, lsl #16
  004f0	e1a03823	 mov         r3, r3, lsr #16
  004f4	e1c230b0	 strh        r3, [r2]

; 155  :     pTime->wMilliseconds = 0;

  004f8	e59d305c	 ldr         r3, [sp, #0x5C]
  004fc	e283200e	 add         r2, r3, #0xE
  00500	e3a03000	 mov         r3, #0
  00504	e1c230b0	 strh        r3, [r2]

; 156  : 
; 157  :     rc = TRUE;

  00508	e3a03001	 mov         r3, #1
  0050c	e58d3018	 str         r3, [sp, #0x18]

; 158  : 	
; 159  : 
; 160  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 161  :         L"-OEMGetRealTime(rc = %d, %d/%d/%d %d:%d:%d.%03d)\r\n", rc,
; 162  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 163  :         pTime->wSecond, pTime->wMilliseconds
; 164  :     ));

  00510	e59f30b8	 ldr         r3, [pc, #0xB8]
  00514	e5933440	 ldr         r3, [r3, #0x440]
  00518	e3130040	 tst         r3, #0x40
  0051c	0a000022	 beq         |$LN9@OEMGetReal|
  00520	e59f30a8	 ldr         r3, [pc, #0xA8]
  00524	e5933440	 ldr         r3, [r3, #0x440]
  00528	e3130004	 tst         r3, #4
  0052c	0a00001e	 beq         |$LN9@OEMGetReal|
  00530	e59d305c	 ldr         r3, [sp, #0x5C]
  00534	e283300e	 add         r3, r3, #0xE
  00538	e1d330b0	 ldrh        r3, [r3]
  0053c	e58d3010	 str         r3, [sp, #0x10]
  00540	e59d305c	 ldr         r3, [sp, #0x5C]
  00544	e283300c	 add         r3, r3, #0xC
  00548	e1d330b0	 ldrh        r3, [r3]
  0054c	e58d300c	 str         r3, [sp, #0xC]
  00550	e59d305c	 ldr         r3, [sp, #0x5C]
  00554	e283300a	 add         r3, r3, #0xA
  00558	e1d330b0	 ldrh        r3, [r3]
  0055c	e58d3008	 str         r3, [sp, #8]
  00560	e59d305c	 ldr         r3, [sp, #0x5C]
  00564	e2833008	 add         r3, r3, #8
  00568	e1d330b0	 ldrh        r3, [r3]
  0056c	e58d3004	 str         r3, [sp, #4]
  00570	e59d305c	 ldr         r3, [sp, #0x5C]
  00574	e2833006	 add         r3, r3, #6
  00578	e1d330b0	 ldrh        r3, [r3]
  0057c	e58d3000	 str         r3, [sp]
  00580	e59d305c	 ldr         r3, [sp, #0x5C]
  00584	e2833002	 add         r3, r3, #2
  00588	e1d330b0	 ldrh        r3, [r3]
  0058c	e59d205c	 ldr         r2, [sp, #0x5C]
  00590	e1d220b0	 ldrh        r2, [r2]
  00594	e59d1018	 ldr         r1, [sp, #0x18]
  00598	e59f002c	 ldr         r0, [pc, #0x2C]
  0059c	eb000000	 bl          NKDbgPrintfW
  005a0	e3a03001	 mov         r3, #1
  005a4	e58d3050	 str         r3, [sp, #0x50]
  005a8	ea000001	 b           |$LN10@OEMGetReal|
  005ac		 |$LN9@OEMGetReal|
  005ac	e3a03000	 mov         r3, #0
  005b0	e58d3050	 str         r3, [sp, #0x50]
  005b4		 |$LN10@OEMGetReal|
  005b4		 |$cleanUp$43963|

; 165  : 
; 166  : cleanUp:
; 167  :     return rc;

  005b4	e59d3018	 ldr         r3, [sp, #0x18]
  005b8	e58d3040	 str         r3, [sp, #0x40]

; 168  : }

  005bc	e59d0040	 ldr         r0, [sp, #0x40]
  005c0	e28dd054	 add         sp, sp, #0x54
  005c4	e89d6000	 ldmia       sp, {sp, lr}
  005c8	e12fff1e	 bx          lr
  005cc		 |$LN14@OEMGetReal|
  005cc		 |$LN15@OEMGetReal|
  005cc	00000000	 DCD         |??_C@_1GG@MNNCNIB@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF@|
  005d0		 |$LN16@OEMGetReal|
  005d0	00000000	 DCD         |dpCurSettings|
  005d4		 |$LN17@OEMGetReal|
  005d4	00000000	 DCD         |g_pRTCRegs|
  005d8		 |$LN18@OEMGetReal|
  005d8	00000000	 DCD         |??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  005dc		 |$M44139|

			 ENDP  ; |OEMGetRealTime|

	EXPORT	|??_C@_1DG@MOFFCBMN@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|__rt_sdiv|

  00010			 AREA	 |.pdata|, PDATA
|$T44161| DCD	|$LN15@OEMSetReal|
	DCD	0x40011304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MOFFCBMN@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "3"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  005dc			 AREA	 |.text|, CODE, ARM

  005dc		 |OEMSetRealTime| PROC

; 178  : {

  005dc		 |$LN15@OEMSetReal|
  005dc	e1a0c00d	 mov         r12, sp
  005e0	e92d0001	 stmdb       sp!, {r0}
  005e4	e92d5010	 stmdb       sp!, {r4, r12, lr}
  005e8	e24dd04c	 sub         sp, sp, #0x4C
  005ec		 |$M44158|

; 179  :     BOOL rc = FALSE;

  005ec	e3a03000	 mov         r3, #0
  005f0	e58d3014	 str         r3, [sp, #0x14]

; 180  :     BOOL enabled;
; 181  :     UINT8 year, month, dweek, day, hour, min, sec;
; 182  : 
; 183  :     if(!pTime) goto cleanUp;

  005f4	e59d3058	 ldr         r3, [sp, #0x58]
  005f8	e3530000	 cmp         r3, #0
  005fc	1a000000	 bne         |$LN6@OEMSetReal|
  00600	ea0000ee	 b           |$cleanUp$43992|
  00604		 |$LN6@OEMSetReal|

; 184  : 
; 185  :     // year must be in [RTC_YEAR_BEGIN, RTC_YEAR_END)
; 186  : 	if(pTime->wYear<RTC_YEAR_BEGIN || pTime->wYear>=RTC_YEAR_END) goto cleanUp;

  00604	e59d3058	 ldr         r3, [sp, #0x58]
  00608	e1d330b0	 ldrh        r3, [r3]
  0060c	e3530e7d	 cmp         r3, #0x7D, 28
  00610	ba000006	 blt         |$LN4@OEMSetReal|
  00614	e59d3058	 ldr         r3, [sp, #0x58]
  00618	e1d330b0	 ldrh        r3, [r3]
  0061c	e1a02003	 mov         r2, r3
  00620	e3a03b02	 mov         r3, #2, 22
  00624	e3833034	 orr         r3, r3, #0x34
  00628	e1520003	 cmp         r2, r3
  0062c	ba000000	 blt         |$LN5@OEMSetReal|
  00630		 |$LN4@OEMSetReal|
  00630	ea0000e2	 b           |$cleanUp$43992|
  00634		 |$LN5@OEMSetReal|

; 187  : 
; 188  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 189  :         L"+OEMSetRealTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 190  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 191  :         pTime->wSecond, pTime->wMilliseconds
; 192  :     ));

  00634	e59f33e0	 ldr         r3, [pc, #0x3E0]
  00638	e5933440	 ldr         r3, [r3, #0x440]
  0063c	e3130040	 tst         r3, #0x40
  00640	0a000020	 beq         |$LN9@OEMSetReal|
  00644	e59f33d0	 ldr         r3, [pc, #0x3D0]
  00648	e5933440	 ldr         r3, [r3, #0x440]
  0064c	e3130004	 tst         r3, #4
  00650	0a00001c	 beq         |$LN9@OEMSetReal|
  00654	e59d3058	 ldr         r3, [sp, #0x58]
  00658	e283300e	 add         r3, r3, #0xE
  0065c	e1d330b0	 ldrh        r3, [r3]
  00660	e58d300c	 str         r3, [sp, #0xC]
  00664	e59d3058	 ldr         r3, [sp, #0x58]
  00668	e283300c	 add         r3, r3, #0xC
  0066c	e1d330b0	 ldrh        r3, [r3]
  00670	e58d3008	 str         r3, [sp, #8]
  00674	e59d3058	 ldr         r3, [sp, #0x58]
  00678	e283300a	 add         r3, r3, #0xA
  0067c	e1d330b0	 ldrh        r3, [r3]
  00680	e58d3004	 str         r3, [sp, #4]
  00684	e59d3058	 ldr         r3, [sp, #0x58]
  00688	e2833008	 add         r3, r3, #8
  0068c	e1d330b0	 ldrh        r3, [r3]
  00690	e58d3000	 str         r3, [sp]
  00694	e59d3058	 ldr         r3, [sp, #0x58]
  00698	e2833006	 add         r3, r3, #6
  0069c	e1d330b0	 ldrh        r3, [r3]
  006a0	e59d2058	 ldr         r2, [sp, #0x58]
  006a4	e2822002	 add         r2, r2, #2
  006a8	e1d220b0	 ldrh        r2, [r2]
  006ac	e59d1058	 ldr         r1, [sp, #0x58]
  006b0	e1d110b0	 ldrh        r1, [r1]
  006b4	e59f0368	 ldr         r0, [pc, #0x368]
  006b8	eb000000	 bl          NKDbgPrintfW
  006bc	e3a03001	 mov         r3, #1
  006c0	e58d303c	 str         r3, [sp, #0x3C]
  006c4	ea000001	 b           |$LN10@OEMSetReal|
  006c8		 |$LN9@OEMSetReal|
  006c8	e3a03000	 mov         r3, #0
  006cc	e58d303c	 str         r3, [sp, #0x3C]
  006d0		 |$LN10@OEMSetReal|

; 193  : 
; 194  :     // Initialize virtual address pointer
; 195  :     if (g_pRTCRegs == NULL) g_pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  006d0	e59f3348	 ldr         r3, [pc, #0x348]
  006d4	e5933000	 ldr         r3, [r3]
  006d8	e3530000	 cmp         r3, #0
  006dc	1a000007	 bne         |$LN3@OEMSetReal|
  006e0	e3a01000	 mov         r1, #0
  006e4	e3a00b02	 mov         r0, #2, 22
  006e8	e2400913	 sub         r0, r0, #0x13, 18
  006ec	eb000000	 bl          OALPAtoVA
  006f0	e58d0040	 str         r0, [sp, #0x40]
  006f4	e59d2040	 ldr         r2, [sp, #0x40]
  006f8	e59f3320	 ldr         r3, [pc, #0x320]
  006fc	e5832000	 str         r2, [r3]
  00700		 |$LN3@OEMSetReal|

; 196  : 
; 197  :     year = BIN2BCD(pTime->wYear-RTC_YEAR_BEGIN);

  00700	e59d3058	 ldr         r3, [sp, #0x58]
  00704	e1d330b0	 ldrh        r3, [r3]
  00708	e2433e7d	 sub         r3, r3, #0x7D, 28
  0070c	e20330ff	 and         r3, r3, #0xFF
  00710	e1a01003	 mov         r1, r3
  00714	e3a0000a	 mov         r0, #0xA
  00718	eb000000	 bl          __rt_sdiv
  0071c	e1a04200	 mov         r4, r0, lsl #4
  00720	e59d3058	 ldr         r3, [sp, #0x58]
  00724	e1d330b0	 ldrh        r3, [r3]
  00728	e2433e7d	 sub         r3, r3, #0x7D, 28
  0072c	e20330ff	 and         r3, r3, #0xFF
  00730	e1a01003	 mov         r1, r3
  00734	e3a0000a	 mov         r0, #0xA
  00738	eb000000	 bl          __rt_sdiv
  0073c	e1843001	 orr         r3, r4, r1
  00740	e20330ff	 and         r3, r3, #0xFF
  00744	e5cd3024	 strb        r3, [sp, #0x24]

; 198  :     month = BIN2BCD(pTime->wMonth);

  00748	e59d3058	 ldr         r3, [sp, #0x58]
  0074c	e2833002	 add         r3, r3, #2
  00750	e1d330b0	 ldrh        r3, [r3]
  00754	e20330ff	 and         r3, r3, #0xFF
  00758	e1a01003	 mov         r1, r3
  0075c	e3a0000a	 mov         r0, #0xA
  00760	eb000000	 bl          __rt_sdiv
  00764	e1a04200	 mov         r4, r0, lsl #4
  00768	e59d3058	 ldr         r3, [sp, #0x58]
  0076c	e2833002	 add         r3, r3, #2
  00770	e1d330b0	 ldrh        r3, [r3]
  00774	e20330ff	 and         r3, r3, #0xFF
  00778	e1a01003	 mov         r1, r3
  0077c	e3a0000a	 mov         r0, #0xA
  00780	eb000000	 bl          __rt_sdiv
  00784	e1843001	 orr         r3, r4, r1
  00788	e20330ff	 and         r3, r3, #0xFF
  0078c	e5cd301c	 strb        r3, [sp, #0x1C]

; 199  :     dweek = BIN2BCD(pTime->wDayOfWeek);

  00790	e59d3058	 ldr         r3, [sp, #0x58]
  00794	e2833004	 add         r3, r3, #4
  00798	e1d330b0	 ldrh        r3, [r3]
  0079c	e20330ff	 and         r3, r3, #0xFF
  007a0	e1a01003	 mov         r1, r3
  007a4	e3a0000a	 mov         r0, #0xA
  007a8	eb000000	 bl          __rt_sdiv
  007ac	e1a04200	 mov         r4, r0, lsl #4
  007b0	e59d3058	 ldr         r3, [sp, #0x58]
  007b4	e2833004	 add         r3, r3, #4
  007b8	e1d330b0	 ldrh        r3, [r3]
  007bc	e20330ff	 and         r3, r3, #0xFF
  007c0	e1a01003	 mov         r1, r3
  007c4	e3a0000a	 mov         r0, #0xA
  007c8	eb000000	 bl          __rt_sdiv
  007cc	e1843001	 orr         r3, r4, r1
  007d0	e20330ff	 and         r3, r3, #0xFF
  007d4	e5cd301a	 strb        r3, [sp, #0x1A]

; 200  :     day   = BIN2BCD(pTime->wDay);

  007d8	e59d3058	 ldr         r3, [sp, #0x58]
  007dc	e2833006	 add         r3, r3, #6
  007e0	e1d330b0	 ldrh        r3, [r3]
  007e4	e20330ff	 and         r3, r3, #0xFF
  007e8	e1a01003	 mov         r1, r3
  007ec	e3a0000a	 mov         r0, #0xA
  007f0	eb000000	 bl          __rt_sdiv
  007f4	e1a04200	 mov         r4, r0, lsl #4
  007f8	e59d3058	 ldr         r3, [sp, #0x58]
  007fc	e2833006	 add         r3, r3, #6
  00800	e1d330b0	 ldrh        r3, [r3]
  00804	e20330ff	 and         r3, r3, #0xFF
  00808	e1a01003	 mov         r1, r3
  0080c	e3a0000a	 mov         r0, #0xA
  00810	eb000000	 bl          __rt_sdiv
  00814	e1843001	 orr         r3, r4, r1
  00818	e20330ff	 and         r3, r3, #0xFF
  0081c	e5cd3010	 strb        r3, [sp, #0x10]

; 201  :     hour  = BIN2BCD(pTime->wHour);

  00820	e59d3058	 ldr         r3, [sp, #0x58]
  00824	e2833008	 add         r3, r3, #8
  00828	e1d330b0	 ldrh        r3, [r3]
  0082c	e20330ff	 and         r3, r3, #0xFF
  00830	e1a01003	 mov         r1, r3
  00834	e3a0000a	 mov         r0, #0xA
  00838	eb000000	 bl          __rt_sdiv
  0083c	e1a04200	 mov         r4, r0, lsl #4
  00840	e59d3058	 ldr         r3, [sp, #0x58]
  00844	e2833008	 add         r3, r3, #8
  00848	e1d330b0	 ldrh        r3, [r3]
  0084c	e20330ff	 and         r3, r3, #0xFF
  00850	e1a01003	 mov         r1, r3
  00854	e3a0000a	 mov         r0, #0xA
  00858	eb000000	 bl          __rt_sdiv
  0085c	e1843001	 orr         r3, r4, r1
  00860	e20330ff	 and         r3, r3, #0xFF
  00864	e5cd301b	 strb        r3, [sp, #0x1B]

; 202  :     min   = BIN2BCD(pTime->wMinute);

  00868	e59d3058	 ldr         r3, [sp, #0x58]
  0086c	e283300a	 add         r3, r3, #0xA
  00870	e1d330b0	 ldrh        r3, [r3]
  00874	e20330ff	 and         r3, r3, #0xFF
  00878	e1a01003	 mov         r1, r3
  0087c	e3a0000a	 mov         r0, #0xA
  00880	eb000000	 bl          __rt_sdiv
  00884	e1a04200	 mov         r4, r0, lsl #4
  00888	e59d3058	 ldr         r3, [sp, #0x58]
  0088c	e283300a	 add         r3, r3, #0xA
  00890	e1d330b0	 ldrh        r3, [r3]
  00894	e20330ff	 and         r3, r3, #0xFF
  00898	e1a01003	 mov         r1, r3
  0089c	e3a0000a	 mov         r0, #0xA
  008a0	eb000000	 bl          __rt_sdiv
  008a4	e1843001	 orr         r3, r4, r1
  008a8	e20330ff	 and         r3, r3, #0xFF
  008ac	e5cd3019	 strb        r3, [sp, #0x19]

; 203  :     sec   = BIN2BCD(pTime->wSecond);  

  008b0	e59d3058	 ldr         r3, [sp, #0x58]
  008b4	e283300c	 add         r3, r3, #0xC
  008b8	e1d330b0	 ldrh        r3, [r3]
  008bc	e20330ff	 and         r3, r3, #0xFF
  008c0	e1a01003	 mov         r1, r3
  008c4	e3a0000a	 mov         r0, #0xA
  008c8	eb000000	 bl          __rt_sdiv
  008cc	e1a04200	 mov         r4, r0, lsl #4
  008d0	e59d3058	 ldr         r3, [sp, #0x58]
  008d4	e283300c	 add         r3, r3, #0xC
  008d8	e1d330b0	 ldrh        r3, [r3]
  008dc	e20330ff	 and         r3, r3, #0xFF
  008e0	e1a01003	 mov         r1, r3
  008e4	e3a0000a	 mov         r0, #0xA
  008e8	eb000000	 bl          __rt_sdiv
  008ec	e1843001	 orr         r3, r4, r1
  008f0	e20330ff	 and         r3, r3, #0xFF
  008f4	e5cd3018	 strb        r3, [sp, #0x18]

; 204  : 
; 205  :     // Disable interrupts when registers are written
; 206  :     enabled = INTERRUPTS_ENABLE(FALSE);

  008f8	e3a00000	 mov         r0, #0
  008fc	eb000000	 bl          INTERRUPTS_ENABLE
  00900	e58d0044	 str         r0, [sp, #0x44]
  00904	e59d3044	 ldr         r3, [sp, #0x44]
  00908	e58d3020	 str         r3, [sp, #0x20]
  0090c		 |$LN2@OEMSetReal|

; 207  : 
; 208  :     // Wait for BUSY low. Anytime BUSY is low, there is
; 209  :     // at least 15us to carry out the R/W.
; 210  :     while ((INREG8(&g_pRTCRegs->STAT) & RTC_STAT_BUSY) != 0);

  0090c	e59f310c	 ldr         r3, [pc, #0x10C]
  00910	e5933000	 ldr         r3, [r3]
  00914	e2833044	 add         r3, r3, #0x44
  00918	e5d33000	 ldrb        r3, [r3]
  0091c	e3130001	 tst         r3, #1
  00920	0a000000	 beq         |$LN1@OEMSetReal|
  00924	eafffff8	 b           |$LN2@OEMSetReal|
  00928		 |$LN1@OEMSetReal|

; 211  : 
; 212  :     // Write RTC time registers.
; 213  :     OUTREG8(&g_pRTCRegs->YEAR, year);

  00928	e59f30f0	 ldr         r3, [pc, #0xF0]
  0092c	e5933000	 ldr         r3, [r3]
  00930	e2832014	 add         r2, r3, #0x14
  00934	e5dd3024	 ldrb        r3, [sp, #0x24]
  00938	e5c23000	 strb        r3, [r2]

; 214  :     OUTREG8(&g_pRTCRegs->MONTH, month);

  0093c	e59f30dc	 ldr         r3, [pc, #0xDC]
  00940	e5933000	 ldr         r3, [r3]
  00944	e2832010	 add         r2, r3, #0x10
  00948	e5dd301c	 ldrb        r3, [sp, #0x1C]
  0094c	e5c23000	 strb        r3, [r2]

; 215  :     OUTREG8(&g_pRTCRegs->WEEKDAY, dweek);

  00950	e59f30c8	 ldr         r3, [pc, #0xC8]
  00954	e5933000	 ldr         r3, [r3]
  00958	e2832018	 add         r2, r3, #0x18
  0095c	e5dd301a	 ldrb        r3, [sp, #0x1A]
  00960	e5c23000	 strb        r3, [r2]

; 216  :     OUTREG8(&g_pRTCRegs->DAY, day);

  00964	e59f30b4	 ldr         r3, [pc, #0xB4]
  00968	e5933000	 ldr         r3, [r3]
  0096c	e283200c	 add         r2, r3, #0xC
  00970	e5dd3010	 ldrb        r3, [sp, #0x10]
  00974	e5c23000	 strb        r3, [r2]

; 217  :     OUTREG8(&g_pRTCRegs->HOURS, hour);

  00978	e59f30a0	 ldr         r3, [pc, #0xA0]
  0097c	e5933000	 ldr         r3, [r3]
  00980	e2832008	 add         r2, r3, #8
  00984	e5dd301b	 ldrb        r3, [sp, #0x1B]
  00988	e5c23000	 strb        r3, [r2]

; 218  :     OUTREG8(&g_pRTCRegs->MINS, min);

  0098c	e59f308c	 ldr         r3, [pc, #0x8C]
  00990	e5933000	 ldr         r3, [r3]
  00994	e2832004	 add         r2, r3, #4
  00998	e5dd3019	 ldrb        r3, [sp, #0x19]
  0099c	e5c23000	 strb        r3, [r2]

; 219  :     OUTREG8(&g_pRTCRegs->SECS, sec);

  009a0	e5dd2018	 ldrb        r2, [sp, #0x18]
  009a4	e59f3074	 ldr         r3, [pc, #0x74]
  009a8	e5933000	 ldr         r3, [r3]
  009ac	e5c32000	 strb        r2, [r3]

; 220  : 
; 221  :     // Enable interrupts
; 222  :     INTERRUPTS_ENABLE(enabled);

  009b0	e59d0020	 ldr         r0, [sp, #0x20]
  009b4	eb000000	 bl          INTERRUPTS_ENABLE

; 223  : 
; 224  :     rc = TRUE;

  009b8	e3a03001	 mov         r3, #1
  009bc	e58d3014	 str         r3, [sp, #0x14]
  009c0		 |$cleanUp$43992|

; 225  : 
; 226  : cleanUp:
; 227  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetRealTime(rc = %d)\r\n", rc));

  009c0	e59f3054	 ldr         r3, [pc, #0x54]
  009c4	e5933440	 ldr         r3, [r3, #0x440]
  009c8	e3130040	 tst         r3, #0x40
  009cc	0a000009	 beq         |$LN11@OEMSetReal|
  009d0	e59f3044	 ldr         r3, [pc, #0x44]
  009d4	e5933440	 ldr         r3, [r3, #0x440]
  009d8	e3130004	 tst         r3, #4
  009dc	0a000005	 beq         |$LN11@OEMSetReal|
  009e0	e59d1014	 ldr         r1, [sp, #0x14]
  009e4	e59f002c	 ldr         r0, [pc, #0x2C]
  009e8	eb000000	 bl          NKDbgPrintfW
  009ec	e3a03001	 mov         r3, #1
  009f0	e58d3048	 str         r3, [sp, #0x48]
  009f4	ea000001	 b           |$LN12@OEMSetReal|
  009f8		 |$LN11@OEMSetReal|
  009f8	e3a03000	 mov         r3, #0
  009fc	e58d3048	 str         r3, [sp, #0x48]
  00a00		 |$LN12@OEMSetReal|

; 228  :     return rc;

  00a00	e59d3014	 ldr         r3, [sp, #0x14]
  00a04	e58d3038	 str         r3, [sp, #0x38]

; 229  : }

  00a08	e59d0038	 ldr         r0, [sp, #0x38]
  00a0c	e28dd04c	 add         sp, sp, #0x4C
  00a10	e89d6010	 ldmia       sp, {r4, sp, lr}
  00a14	e12fff1e	 bx          lr
  00a18		 |$LN16@OEMSetReal|
  00a18		 |$LN17@OEMSetReal|
  00a18	00000000	 DCD         |??_C@_1DG@MOFFCBMN@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00a1c		 |$LN18@OEMSetReal|
  00a1c	00000000	 DCD         |dpCurSettings|
  00a20		 |$LN19@OEMSetReal|
  00a20	00000000	 DCD         |g_pRTCRegs|
  00a24		 |$LN20@OEMSetReal|
  00a24	00000000	 DCD         |??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@|
  00a28		 |$M44159|

			 ENDP  ; |OEMSetRealTime|

	EXPORT	|??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| [ DATA ] ; `string'
	EXPORT	|OEMSetAlarmTime|
	IMPORT	|OEMInterruptDone|

  00018			 AREA	 |.pdata|, PDATA
|$T44180| DCD	|$LN15@OEMSetAlar|
	DCD	0x40011a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00a28			 AREA	 |.text|, CODE, ARM

  00a28		 |OEMSetAlarmTime| PROC

; 239  : {

  00a28		 |$LN15@OEMSetAlar|
  00a28	e1a0c00d	 mov         r12, sp
  00a2c	e92d0001	 stmdb       sp!, {r0}
  00a30	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00a34	e24dd048	 sub         sp, sp, #0x48
  00a38		 |$M44177|

; 240  :     BOOL rc = FALSE;

  00a38	e3a03000	 mov         r3, #0
  00a3c	e58d3014	 str         r3, [sp, #0x14]

; 241  :     BOOL enabled;
; 242  :     UINT8 year, month, day, hour, min, sec;
; 243  : 
; 244  :     if(!pTime) goto cleanUp;

  00a40	e59d3054	 ldr         r3, [sp, #0x54]
  00a44	e3530000	 cmp         r3, #0
  00a48	1a000000	 bne         |$LN6@OEMSetAlar|
  00a4c	ea0000f5	 b           |$cleanUp$44045|
  00a50		 |$LN6@OEMSetAlar|

; 245  : 
; 246  :     // year must be in [RTC_YEAR_BEGIN, RTC_YEAR_END)
; 247  :     if(pTime->wYear<RTC_YEAR_BEGIN || pTime->wYear>=RTC_YEAR_END) goto cleanUp;

  00a50	e59d3054	 ldr         r3, [sp, #0x54]
  00a54	e1d330b0	 ldrh        r3, [r3]
  00a58	e3530e7d	 cmp         r3, #0x7D, 28
  00a5c	ba000006	 blt         |$LN4@OEMSetAlar|
  00a60	e59d3054	 ldr         r3, [sp, #0x54]
  00a64	e1d330b0	 ldrh        r3, [r3]
  00a68	e1a02003	 mov         r2, r3
  00a6c	e3a03b02	 mov         r3, #2, 22
  00a70	e3833034	 orr         r3, r3, #0x34
  00a74	e1520003	 cmp         r2, r3
  00a78	ba000000	 blt         |$LN5@OEMSetAlar|
  00a7c		 |$LN4@OEMSetAlar|
  00a7c	ea0000e9	 b           |$cleanUp$44045|
  00a80		 |$LN5@OEMSetAlar|

; 248  : 
; 249  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 250  :         L"+OEMSetAlarmTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 251  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 252  :         pTime->wSecond, pTime->wMilliseconds
; 253  :     ));

  00a80	e59f33fc	 ldr         r3, [pc, #0x3FC]
  00a84	e5933440	 ldr         r3, [r3, #0x440]
  00a88	e3130040	 tst         r3, #0x40
  00a8c	0a000020	 beq         |$LN9@OEMSetAlar|
  00a90	e59f33ec	 ldr         r3, [pc, #0x3EC]
  00a94	e5933440	 ldr         r3, [r3, #0x440]
  00a98	e3130004	 tst         r3, #4
  00a9c	0a00001c	 beq         |$LN9@OEMSetAlar|
  00aa0	e59d3054	 ldr         r3, [sp, #0x54]
  00aa4	e283300e	 add         r3, r3, #0xE
  00aa8	e1d330b0	 ldrh        r3, [r3]
  00aac	e58d300c	 str         r3, [sp, #0xC]
  00ab0	e59d3054	 ldr         r3, [sp, #0x54]
  00ab4	e283300c	 add         r3, r3, #0xC
  00ab8	e1d330b0	 ldrh        r3, [r3]
  00abc	e58d3008	 str         r3, [sp, #8]
  00ac0	e59d3054	 ldr         r3, [sp, #0x54]
  00ac4	e283300a	 add         r3, r3, #0xA
  00ac8	e1d330b0	 ldrh        r3, [r3]
  00acc	e58d3004	 str         r3, [sp, #4]
  00ad0	e59d3054	 ldr         r3, [sp, #0x54]
  00ad4	e2833008	 add         r3, r3, #8
  00ad8	e1d330b0	 ldrh        r3, [r3]
  00adc	e58d3000	 str         r3, [sp]
  00ae0	e59d3054	 ldr         r3, [sp, #0x54]
  00ae4	e2833006	 add         r3, r3, #6
  00ae8	e1d330b0	 ldrh        r3, [r3]
  00aec	e59d2054	 ldr         r2, [sp, #0x54]
  00af0	e2822002	 add         r2, r2, #2
  00af4	e1d220b0	 ldrh        r2, [r2]
  00af8	e59d1054	 ldr         r1, [sp, #0x54]
  00afc	e1d110b0	 ldrh        r1, [r1]
  00b00	e59f0384	 ldr         r0, [pc, #0x384]
  00b04	eb000000	 bl          NKDbgPrintfW
  00b08	e3a03001	 mov         r3, #1
  00b0c	e58d3038	 str         r3, [sp, #0x38]
  00b10	ea000001	 b           |$LN10@OEMSetAlar|
  00b14		 |$LN9@OEMSetAlar|
  00b14	e3a03000	 mov         r3, #0
  00b18	e58d3038	 str         r3, [sp, #0x38]
  00b1c		 |$LN10@OEMSetAlar|

; 254  : 
; 255  :     // Get virtual address
; 256  :     if (g_pRTCRegs == NULL) g_pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  00b1c	e59f3364	 ldr         r3, [pc, #0x364]
  00b20	e5933000	 ldr         r3, [r3]
  00b24	e3530000	 cmp         r3, #0
  00b28	1a000007	 bne         |$LN3@OEMSetAlar|
  00b2c	e3a01000	 mov         r1, #0
  00b30	e3a00b02	 mov         r0, #2, 22
  00b34	e2400913	 sub         r0, r0, #0x13, 18
  00b38	eb000000	 bl          OALPAtoVA
  00b3c	e58d003c	 str         r0, [sp, #0x3C]
  00b40	e59d203c	 ldr         r2, [sp, #0x3C]
  00b44	e59f333c	 ldr         r3, [pc, #0x33C]
  00b48	e5832000	 str         r2, [r3]
  00b4c		 |$LN3@OEMSetAlar|

; 257  : 
; 258  :     year = BIN2BCD(pTime->wYear-RTC_YEAR_BEGIN);

  00b4c	e59d3054	 ldr         r3, [sp, #0x54]
  00b50	e1d330b0	 ldrh        r3, [r3]
  00b54	e2433e7d	 sub         r3, r3, #0x7D, 28
  00b58	e20330ff	 and         r3, r3, #0xFF
  00b5c	e1a01003	 mov         r1, r3
  00b60	e3a0000a	 mov         r0, #0xA
  00b64	eb000000	 bl          __rt_sdiv
  00b68	e1a04200	 mov         r4, r0, lsl #4
  00b6c	e59d3054	 ldr         r3, [sp, #0x54]
  00b70	e1d330b0	 ldrh        r3, [r3]
  00b74	e2433e7d	 sub         r3, r3, #0x7D, 28
  00b78	e20330ff	 and         r3, r3, #0xFF
  00b7c	e1a01003	 mov         r1, r3
  00b80	e3a0000a	 mov         r0, #0xA
  00b84	eb000000	 bl          __rt_sdiv
  00b88	e1843001	 orr         r3, r4, r1
  00b8c	e20330ff	 and         r3, r3, #0xFF
  00b90	e5cd3020	 strb        r3, [sp, #0x20]

; 259  :     month = BIN2BCD(pTime->wMonth);

  00b94	e59d3054	 ldr         r3, [sp, #0x54]
  00b98	e2833002	 add         r3, r3, #2
  00b9c	e1d330b0	 ldrh        r3, [r3]
  00ba0	e20330ff	 and         r3, r3, #0xFF
  00ba4	e1a01003	 mov         r1, r3
  00ba8	e3a0000a	 mov         r0, #0xA
  00bac	eb000000	 bl          __rt_sdiv
  00bb0	e1a04200	 mov         r4, r0, lsl #4
  00bb4	e59d3054	 ldr         r3, [sp, #0x54]
  00bb8	e2833002	 add         r3, r3, #2
  00bbc	e1d330b0	 ldrh        r3, [r3]
  00bc0	e20330ff	 and         r3, r3, #0xFF
  00bc4	e1a01003	 mov         r1, r3
  00bc8	e3a0000a	 mov         r0, #0xA
  00bcc	eb000000	 bl          __rt_sdiv
  00bd0	e1843001	 orr         r3, r4, r1
  00bd4	e20330ff	 and         r3, r3, #0xFF
  00bd8	e5cd301b	 strb        r3, [sp, #0x1B]

; 260  :     day   = BIN2BCD(pTime->wDay);

  00bdc	e59d3054	 ldr         r3, [sp, #0x54]
  00be0	e2833006	 add         r3, r3, #6
  00be4	e1d330b0	 ldrh        r3, [r3]
  00be8	e20330ff	 and         r3, r3, #0xFF
  00bec	e1a01003	 mov         r1, r3
  00bf0	e3a0000a	 mov         r0, #0xA
  00bf4	eb000000	 bl          __rt_sdiv
  00bf8	e1a04200	 mov         r4, r0, lsl #4
  00bfc	e59d3054	 ldr         r3, [sp, #0x54]
  00c00	e2833006	 add         r3, r3, #6
  00c04	e1d330b0	 ldrh        r3, [r3]
  00c08	e20330ff	 and         r3, r3, #0xFF
  00c0c	e1a01003	 mov         r1, r3
  00c10	e3a0000a	 mov         r0, #0xA
  00c14	eb000000	 bl          __rt_sdiv
  00c18	e1843001	 orr         r3, r4, r1
  00c1c	e20330ff	 and         r3, r3, #0xFF
  00c20	e5cd3010	 strb        r3, [sp, #0x10]

; 261  :     hour  = BIN2BCD(pTime->wHour);

  00c24	e59d3054	 ldr         r3, [sp, #0x54]
  00c28	e2833008	 add         r3, r3, #8
  00c2c	e1d330b0	 ldrh        r3, [r3]
  00c30	e20330ff	 and         r3, r3, #0xFF
  00c34	e1a01003	 mov         r1, r3
  00c38	e3a0000a	 mov         r0, #0xA
  00c3c	eb000000	 bl          __rt_sdiv
  00c40	e1a04200	 mov         r4, r0, lsl #4
  00c44	e59d3054	 ldr         r3, [sp, #0x54]
  00c48	e2833008	 add         r3, r3, #8
  00c4c	e1d330b0	 ldrh        r3, [r3]
  00c50	e20330ff	 and         r3, r3, #0xFF
  00c54	e1a01003	 mov         r1, r3
  00c58	e3a0000a	 mov         r0, #0xA
  00c5c	eb000000	 bl          __rt_sdiv
  00c60	e1843001	 orr         r3, r4, r1
  00c64	e20330ff	 and         r3, r3, #0xFF
  00c68	e5cd301a	 strb        r3, [sp, #0x1A]

; 262  :     min   = BIN2BCD(pTime->wMinute);

  00c6c	e59d3054	 ldr         r3, [sp, #0x54]
  00c70	e283300a	 add         r3, r3, #0xA
  00c74	e1d330b0	 ldrh        r3, [r3]
  00c78	e20330ff	 and         r3, r3, #0xFF
  00c7c	e1a01003	 mov         r1, r3
  00c80	e3a0000a	 mov         r0, #0xA
  00c84	eb000000	 bl          __rt_sdiv
  00c88	e1a04200	 mov         r4, r0, lsl #4
  00c8c	e59d3054	 ldr         r3, [sp, #0x54]
  00c90	e283300a	 add         r3, r3, #0xA
  00c94	e1d330b0	 ldrh        r3, [r3]
  00c98	e20330ff	 and         r3, r3, #0xFF
  00c9c	e1a01003	 mov         r1, r3
  00ca0	e3a0000a	 mov         r0, #0xA
  00ca4	eb000000	 bl          __rt_sdiv
  00ca8	e1843001	 orr         r3, r4, r1
  00cac	e20330ff	 and         r3, r3, #0xFF
  00cb0	e5cd3019	 strb        r3, [sp, #0x19]

; 263  :     sec   = BIN2BCD(pTime->wSecond);  

  00cb4	e59d3054	 ldr         r3, [sp, #0x54]
  00cb8	e283300c	 add         r3, r3, #0xC
  00cbc	e1d330b0	 ldrh        r3, [r3]
  00cc0	e20330ff	 and         r3, r3, #0xFF
  00cc4	e1a01003	 mov         r1, r3
  00cc8	e3a0000a	 mov         r0, #0xA
  00ccc	eb000000	 bl          __rt_sdiv
  00cd0	e1a04200	 mov         r4, r0, lsl #4
  00cd4	e59d3054	 ldr         r3, [sp, #0x54]
  00cd8	e283300c	 add         r3, r3, #0xC
  00cdc	e1d330b0	 ldrh        r3, [r3]
  00ce0	e20330ff	 and         r3, r3, #0xFF
  00ce4	e1a01003	 mov         r1, r3
  00ce8	e3a0000a	 mov         r0, #0xA
  00cec	eb000000	 bl          __rt_sdiv
  00cf0	e1843001	 orr         r3, r4, r1
  00cf4	e20330ff	 and         r3, r3, #0xFF
  00cf8	e5cd3018	 strb        r3, [sp, #0x18]

; 264  : 
; 265  :     // Reset interrupt
; 266  :     OUTREG8(&g_pRTCRegs->STAT, RTC_STAT_ALARM);

  00cfc	e59f3184	 ldr         r3, [pc, #0x184]
  00d00	e5933000	 ldr         r3, [r3]
  00d04	e2832044	 add         r2, r3, #0x44
  00d08	e3a03040	 mov         r3, #0x40
  00d0c	e5c23000	 strb        r3, [r2]

; 267  : 
; 268  :     // Disable alarm interrupt for while
; 269  :     CLRREG8(&g_pRTCRegs->INTR, RTC_INTR_ALARM);

  00d10	e59f3170	 ldr         r3, [pc, #0x170]
  00d14	e5933000	 ldr         r3, [r3]
  00d18	e2833048	 add         r3, r3, #0x48
  00d1c	e5d33000	 ldrb        r3, [r3]
  00d20	e1a02003	 mov         r2, r3
  00d24	e3e03008	 mvn         r3, #8
  00d28	e0023003	 and         r3, r2, r3
  00d2c	e20320ff	 and         r2, r3, #0xFF
  00d30	e59f3150	 ldr         r3, [pc, #0x150]
  00d34	e5933000	 ldr         r3, [r3]
  00d38	e2833048	 add         r3, r3, #0x48
  00d3c	e5c32000	 strb        r2, [r3]

; 270  : 
; 271  :     // Disable interrupts when registers are written
; 272  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00d40	e3a00000	 mov         r0, #0
  00d44	eb000000	 bl          INTERRUPTS_ENABLE
  00d48	e58d0040	 str         r0, [sp, #0x40]
  00d4c	e59d3040	 ldr         r3, [sp, #0x40]
  00d50	e58d301c	 str         r3, [sp, #0x1C]
  00d54		 |$LN2@OEMSetAlar|

; 273  : 
; 274  :     // Wait for BUSY low. Anytime BUSY is low, there is
; 275  :     // at least 15us to carry out the R/W.
; 276  :     while ((INREG8(&g_pRTCRegs->STAT) & RTC_STAT_BUSY) != 0);

  00d54	e59f312c	 ldr         r3, [pc, #0x12C]
  00d58	e5933000	 ldr         r3, [r3]
  00d5c	e2833044	 add         r3, r3, #0x44
  00d60	e5d33000	 ldrb        r3, [r3]
  00d64	e3130001	 tst         r3, #1
  00d68	0a000000	 beq         |$LN1@OEMSetAlar|
  00d6c	eafffff8	 b           |$LN2@OEMSetAlar|
  00d70		 |$LN1@OEMSetAlar|

; 277  : 
; 278  :     // Write RTC time registers.
; 279  :     OUTREG8(&g_pRTCRegs->ALARM_YEAR, year);

  00d70	e59f3110	 ldr         r3, [pc, #0x110]
  00d74	e5933000	 ldr         r3, [r3]
  00d78	e2832034	 add         r2, r3, #0x34
  00d7c	e5dd3020	 ldrb        r3, [sp, #0x20]
  00d80	e5c23000	 strb        r3, [r2]

; 280  :     OUTREG8(&g_pRTCRegs->ALARM_MONTH, month);

  00d84	e59f30fc	 ldr         r3, [pc, #0xFC]
  00d88	e5933000	 ldr         r3, [r3]
  00d8c	e2832030	 add         r2, r3, #0x30
  00d90	e5dd301b	 ldrb        r3, [sp, #0x1B]
  00d94	e5c23000	 strb        r3, [r2]

; 281  :     OUTREG8(&g_pRTCRegs->ALARM_DAY, day);

  00d98	e59f30e8	 ldr         r3, [pc, #0xE8]
  00d9c	e5933000	 ldr         r3, [r3]
  00da0	e283202c	 add         r2, r3, #0x2C
  00da4	e5dd3010	 ldrb        r3, [sp, #0x10]
  00da8	e5c23000	 strb        r3, [r2]

; 282  :     OUTREG8(&g_pRTCRegs->ALARM_HOURS, hour);

  00dac	e59f30d4	 ldr         r3, [pc, #0xD4]
  00db0	e5933000	 ldr         r3, [r3]
  00db4	e2832028	 add         r2, r3, #0x28
  00db8	e5dd301a	 ldrb        r3, [sp, #0x1A]
  00dbc	e5c23000	 strb        r3, [r2]

; 283  :     OUTREG8(&g_pRTCRegs->ALARM_MINS, min);

  00dc0	e59f30c0	 ldr         r3, [pc, #0xC0]
  00dc4	e5933000	 ldr         r3, [r3]
  00dc8	e2832024	 add         r2, r3, #0x24
  00dcc	e5dd3019	 ldrb        r3, [sp, #0x19]
  00dd0	e5c23000	 strb        r3, [r2]

; 284  :     OUTREG8(&g_pRTCRegs->ALARM_SECS, sec);

  00dd4	e59f30ac	 ldr         r3, [pc, #0xAC]
  00dd8	e5933000	 ldr         r3, [r3]
  00ddc	e2832020	 add         r2, r3, #0x20
  00de0	e5dd3018	 ldrb        r3, [sp, #0x18]
  00de4	e5c23000	 strb        r3, [r2]

; 285  : 
; 286  :     // Re-enable alarm interrupt
; 287  :     SETREG8(&g_pRTCRegs->INTR, RTC_INTR_ALARM);

  00de8	e59f3098	 ldr         r3, [pc, #0x98]
  00dec	e5933000	 ldr         r3, [r3]
  00df0	e2833048	 add         r3, r3, #0x48
  00df4	e5d33000	 ldrb        r3, [r3]
  00df8	e3833008	 orr         r3, r3, #8
  00dfc	e20320ff	 and         r2, r3, #0xFF
  00e00	e59f3080	 ldr         r3, [pc, #0x80]
  00e04	e5933000	 ldr         r3, [r3]
  00e08	e2833048	 add         r3, r3, #0x48
  00e0c	e5c32000	 strb        r2, [r3]

; 288  : 
; 289  :     // Enable interrupts
; 290  :     INTERRUPTS_ENABLE(enabled);

  00e10	e59d001c	 ldr         r0, [sp, #0x1C]
  00e14	eb000000	 bl          INTERRUPTS_ENABLE

; 291  :     
; 292  :     // Re-enable interrupt (it is disabled since last alarm occurs)
; 293  :     OEMInterruptDone(SYSINTR_RTC_ALARM);

  00e18	e3a0000d	 mov         r0, #0xD
  00e1c	eb000000	 bl          OEMInterruptDone

; 294  : 
; 295  :     rc = TRUE;

  00e20	e3a03001	 mov         r3, #1
  00e24	e58d3014	 str         r3, [sp, #0x14]
  00e28		 |$cleanUp$44045|

; 296  : 
; 297  : cleanUp:
; 298  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetAlarmTime(rc = %d)\r\n", rc));

  00e28	e59f3054	 ldr         r3, [pc, #0x54]
  00e2c	e5933440	 ldr         r3, [r3, #0x440]
  00e30	e3130040	 tst         r3, #0x40
  00e34	0a000009	 beq         |$LN11@OEMSetAlar|
  00e38	e59f3044	 ldr         r3, [pc, #0x44]
  00e3c	e5933440	 ldr         r3, [r3, #0x440]
  00e40	e3130004	 tst         r3, #4
  00e44	0a000005	 beq         |$LN11@OEMSetAlar|
  00e48	e59d1014	 ldr         r1, [sp, #0x14]
  00e4c	e59f002c	 ldr         r0, [pc, #0x2C]
  00e50	eb000000	 bl          NKDbgPrintfW
  00e54	e3a03001	 mov         r3, #1
  00e58	e58d3044	 str         r3, [sp, #0x44]
  00e5c	ea000001	 b           |$LN12@OEMSetAlar|
  00e60		 |$LN11@OEMSetAlar|
  00e60	e3a03000	 mov         r3, #0
  00e64	e58d3044	 str         r3, [sp, #0x44]
  00e68		 |$LN12@OEMSetAlar|

; 299  :     return rc;

  00e68	e59d3014	 ldr         r3, [sp, #0x14]
  00e6c	e58d3034	 str         r3, [sp, #0x34]

; 300  : }

  00e70	e59d0034	 ldr         r0, [sp, #0x34]
  00e74	e28dd048	 add         sp, sp, #0x48
  00e78	e89d6010	 ldmia       sp, {r4, sp, lr}
  00e7c	e12fff1e	 bx          lr
  00e80		 |$LN16@OEMSetAlar|
  00e80		 |$LN17@OEMSetAlar|
  00e80	00000000	 DCD         |??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00e84		 |$LN18@OEMSetAlar|
  00e84	00000000	 DCD         |dpCurSettings|
  00e88		 |$LN19@OEMSetAlar|
  00e88	00000000	 DCD         |g_pRTCRegs|
  00e8c		 |$LN20@OEMSetAlar|
  00e8c	00000000	 DCD         |??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@|
  00e90		 |$M44178|

			 ENDP  ; |OEMSetAlarmTime|

	END
