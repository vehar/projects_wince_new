; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP5912_MS_V1\OAL\RTC\rtc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|g_pRTCRegs| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMGetRealTime|
	EXPORT	|??_C@_1GG@MNNCNIB@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|INTERRUPTS_ENABLE|
	IMPORT	|OALPAtoVA|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\soc\omap5912_ms_v1\oal\rtc\rtc.c

  00000			 AREA	 |.pdata|, PDATA
|$T44166| DCD	|$LN14@OEMGetReal|
	DCD	0x40008d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@MNNCNIB@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, "."
	DCB	0x0, "%", 0x0, "0", 0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMGetRealTime| PROC

; 115  : {

  00000		 |$LN14@OEMGetReal|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd024	 sub         sp, sp, #0x24
  00008		 |$M44163|
  00008	e1a04000	 mov         r4, r0
  0000c	e58d4020	 str         r4, [sp, #0x20]

; 116  :     BOOL rc = FALSE;
; 117  :     BOOL enabled;
; 118  :     UINT8 year, month, dweek, day, hour, min, sec;
; 119  : 
; 120  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"+OEMGetRealTime\r\n"));

  00010	e59f3210	 ldr         r3, [pc, #0x210]
  00014	e3a05000	 mov         r5, #0
  00018	e5933440	 ldr         r3, [r3, #0x440]
  0001c	e3130040	 tst         r3, #0x40
  00020	13130004	 tstne       r3, #4
  00024	159f0204	 ldrne       r0, [pc, #0x204]
  00028	1b000000	 blne        NKDbgPrintfW

; 121  : 
; 122  :     if (!pTime) goto cleanUp;

  0002c	e3540000	 cmp         r4, #0
  00030	0a000077	 beq         |$cleanUp$43987|

; 123  : 
; 124  :     // Initialize virtual address pointer
; 125  :     if (g_pRTCRegs == NULL) g_pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  00034	e59f41f0	 ldr         r4, [pc, #0x1F0]
  00038	e5943000	 ldr         r3, [r4]
  0003c	e3530000	 cmp         r3, #0
  00040	1a000004	 bne         |$LN3@OEMGetReal|
  00044	e3a03b02	 mov         r3, #2, 22
  00048	e2430913	 sub         r0, r3, #0x13, 18
  0004c	e3a01000	 mov         r1, #0
  00050	eb000000	 bl          OALPAtoVA
  00054	e5840000	 str         r0, [r4]
  00058		 |$LN3@OEMGetReal|

; 126  : 
; 127  :     
; 128  :     // Disable interrupts when registers are read
; 129  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00058	e3a00000	 mov         r0, #0
  0005c	eb000000	 bl          INTERRUPTS_ENABLE
  00060	e5942000	 ldr         r2, [r4]
  00064		 |$LL2@OEMGetReal|

; 130  : 
; 131  :     // Wait for BUSY low. Anytime BUSY is low, there is
; 132  :     // at least 15us to carry out the R/W.
; 133  :     while ((INREG8(&g_pRTCRegs->STAT) & RTC_STAT_BUSY) != 0);

  00064	e5d23044	 ldrb        r3, [r2, #0x44]
  00068	e3130001	 tst         r3, #1
  0006c	1afffffc	 bne         |$LL2@OEMGetReal|

; 134  : 
; 135  :     // Read RTC time registers
; 136  :     year  = INREG8(&g_pRTCRegs->YEAR);

  00070	e5d29014	 ldrb        r9, [r2, #0x14]

; 137  :     month = INREG8(&g_pRTCRegs->MONTH);

  00074	e5d28010	 ldrb        r8, [r2, #0x10]

; 138  :     dweek = INREG8(&g_pRTCRegs->WEEKDAY);

  00078	e5d2a018	 ldrb        r10, [r2, #0x18]

; 139  :     day   = INREG8(&g_pRTCRegs->DAY);

  0007c	e5d2700c	 ldrb        r7, [r2, #0xC]

; 140  :     hour  = INREG8(&g_pRTCRegs->HOURS);

  00080	e5d26008	 ldrb        r6, [r2, #8]

; 141  :     min   = INREG8(&g_pRTCRegs->MINS);

  00084	e5d24004	 ldrb        r4, [r2, #4]

; 142  :     sec   = INREG8(&g_pRTCRegs->SECS);

  00088	e5d25000	 ldrb        r5, [r2]
  0008c	e5cd9014	 strb        r9, [sp, #0x14]
  00090	e5cd8015	 strb        r8, [sp, #0x15]
  00094	e5cd5019	 strb        r5, [sp, #0x19]
  00098	e5cda01a	 strb        r10, [sp, #0x1A]
  0009c	e5cd7016	 strb        r7, [sp, #0x16]
  000a0	e5cd6017	 strb        r6, [sp, #0x17]
  000a4	e5cd4018	 strb        r4, [sp, #0x18]

; 143  : 
; 144  :     // Enable interrupts
; 145  :     INTERRUPTS_ENABLE(enabled);

  000a8	eb000000	 bl          INTERRUPTS_ENABLE

; 146  : 
; 147  :     // Convert from RTC Binary Coded Decimal to SYSTEMTIME and store.
; 148  :     pTime->wYear         = BCD2BIN(year)+RTC_YEAR_BEGIN;

  000ac	e1a03229	 mov         r3, r9, lsr #4
  000b0	e28330c8	 add         r3, r3, #0xC8

; 149  :     pTime->wMonth        = BCD2BIN(month);
; 150  :     pTime->wDayOfWeek    = BCD2BIN(dweek);
; 151  :     pTime->wDay          = BCD2BIN(day);
; 152  :     pTime->wHour         = BCD2BIN(hour);
; 153  :     pTime->wMinute       = BCD2BIN(min);

  000b4	e1a0e224	 mov         lr, r4, lsr #4

; 154  :     pTime->wSecond       = BCD2BIN(sec);

  000b8	e1a04225	 mov         r4, r5, lsr #4
  000bc	e1a05803	 mov         r5, r3, lsl #16
  000c0	e1a0322a	 mov         r3, r10, lsr #4
  000c4	e1a01227	 mov         r1, r7, lsr #4
  000c8	e1a07803	 mov         r7, r3, lsl #16

; 155  :     pTime->wMilliseconds = 0;

  000cc	e59d3020	 ldr         r3, [sp, #0x20]
  000d0	e1a02228	 mov         r2, r8, lsr #4
  000d4	e1cd21bc	 strh        r2, [sp, #0x1C]
  000d8	e3a02000	 mov         r2, #0
  000dc	e1c320be	 strh        r2, [r3, #0xE]
  000e0	e5dd3014	 ldrb        r3, [sp, #0x14]
  000e4	e1a00226	 mov         r0, r6, lsr #4
  000e8	e1a0a800	 mov         r10, r0, lsl #16
  000ec	e5dd2015	 ldrb        r2, [sp, #0x15]
  000f0	e20600ff	 and         r0, r6, #0xFF
  000f4	e203300f	 and         r3, r3, #0xF
  000f8	e1a05825	 mov         r5, r5, lsr #16
  000fc	e3a0600a	 mov         r6, #0xA
  00100	e0233695	 mla         r3, r5, r6, r3
  00104	e1dd61bc	 ldrh        r6, [sp, #0x1C]
  00108	e202200f	 and         r2, r2, #0xF
  0010c	e3a0500a	 mov         r5, #0xA
  00110	e0252596	 mla         r5, r6, r5, r2
  00114	e5dd201a	 ldrb        r2, [sp, #0x1A]
  00118	e1a0b801	 mov         r11, r1, lsl #16
  0011c	e5dd1016	 ldrb        r1, [sp, #0x16]
  00120	e202600f	 and         r6, r2, #0xF
  00124	e3a0200a	 mov         r2, #0xA
  00128	e1a0b82b	 mov         r11, r11, lsr #16
  0012c	e201100f	 and         r1, r1, #0xF
  00130	e1a0980e	 mov         r9, lr, lsl #16
  00134	e5dde018	 ldrb        lr, [sp, #0x18]
  00138	e021129b	 mla         r1, r11, r2, r1
  0013c	e3a0200a	 mov         r2, #0xA
  00140	e1a0a82a	 mov         r10, r10, lsr #16
  00144	e200000f	 and         r0, r0, #0xF
  00148	e1a08804	 mov         r8, r4, lsl #16
  0014c	e5dd4019	 ldrb        r4, [sp, #0x19]
  00150	e020029a	 mla         r0, r10, r2, r0
  00154	e3a0200a	 mov         r2, #0xA
  00158	e1a09829	 mov         r9, r9, lsr #16
  0015c	e20ee00f	 and         lr, lr, #0xF
  00160	e02ee299	 mla         lr, r9, r2, lr
  00164	e3a0200a	 mov         r2, #0xA
  00168	e1a08828	 mov         r8, r8, lsr #16
  0016c	e204400f	 and         r4, r4, #0xF
  00170	e0244298	 mla         r4, r8, r2, r4
  00174	e1a02803	 mov         r2, r3, lsl #16
  00178	e3a0300a	 mov         r3, #0xA
  0017c	e1a07827	 mov         r7, r7, lsr #16
  00180	e1a08805	 mov         r8, r5, lsl #16
  00184	e0256397	 mla         r5, r7, r3, r6
  00188	e1a06801	 mov         r6, r1, lsl #16
  0018c	e1a07800	 mov         r7, r0, lsl #16
  00190	e1a0e80e	 mov         lr, lr, lsl #16
  00194	e1a04804	 mov         r4, r4, lsl #16
  00198	e59d3020	 ldr         r3, [sp, #0x20]
  0019c	e1a06826	 mov         r6, r6, lsr #16
  001a0	e1a07827	 mov         r7, r7, lsr #16
  001a4	e1a02822	 mov         r2, r2, lsr #16
  001a8	e1a08828	 mov         r8, r8, lsr #16
  001ac	e1a0e82e	 mov         lr, lr, lsr #16
  001b0	e1a04824	 mov         r4, r4, lsr #16

; 156  : 
; 157  :     rc = TRUE;
; 158  : 	
; 159  : 
; 160  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 161  :         L"-OEMGetRealTime(rc = %d, %d/%d/%d %d:%d:%d.%03d)\r\n", rc,
; 162  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 163  :         pTime->wSecond, pTime->wMilliseconds
; 164  :     ));

  001b4	e59f106c	 ldr         r1, [pc, #0x6C]
  001b8	e1c320b0	 strh        r2, [r3]
  001bc	e1c380b2	 strh        r8, [r3, #2]
  001c0	e1c350b4	 strh        r5, [r3, #4]
  001c4	e1c360b6	 strh        r6, [r3, #6]
  001c8	e1c370b8	 strh        r7, [r3, #8]
  001cc	e1c3e0ba	 strh        lr, [r3, #0xA]
  001d0	e1c340bc	 strh        r4, [r3, #0xC]
  001d4	e5911440	 ldr         r1, [r1, #0x440]
  001d8	e3a05001	 mov         r5, #1
  001dc	e3110040	 tst         r1, #0x40
  001e0	0a00000b	 beq         |$cleanUp$43987|
  001e4	e3110004	 tst         r1, #4
  001e8	0a000009	 beq         |$cleanUp$43987|
  001ec	e59f0030	 ldr         r0, [pc, #0x30]
  001f0	e1a03008	 mov         r3, r8
  001f4	e3a08000	 mov         r8, #0
  001f8	e3a01001	 mov         r1, #1
  001fc	e58d8010	 str         r8, [sp, #0x10]
  00200	e58d400c	 str         r4, [sp, #0xC]
  00204	e58de008	 str         lr, [sp, #8]
  00208	e58d7004	 str         r7, [sp, #4]
  0020c	e58d6000	 str         r6, [sp]
  00210	eb000000	 bl          NKDbgPrintfW
  00214		 |$cleanUp$43987|

; 165  : 
; 166  : cleanUp:
; 167  :     return rc;
; 168  : }

  00214	e1a00005	 mov         r0, r5
  00218	e28dd024	 add         sp, sp, #0x24
  0021c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00220	e12fff1e	 bx          lr
  00224		 |$LN15@OEMGetReal|
  00224		 |$LN16@OEMGetReal|
  00224	00000000	 DCD         |??_C@_1GG@MNNCNIB@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF@|
  00228		 |$LN17@OEMGetReal|
  00228	00000000	 DCD         |dpCurSettings|
  0022c		 |$LN18@OEMGetReal|
  0022c	00000000	 DCD         |g_pRTCRegs|
  00230		 |$LN19@OEMGetReal|
  00230	00000000	 DCD         |??_C@_1CE@MMIOOJN@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00234		 |$M44164|

			 ENDP  ; |OEMGetRealTime|

	EXPORT	|OEMSetRealTime|
	EXPORT	|??_C@_1DG@MOFFCBMN@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44195| DCD	|$LN16@OEMSetReal|
	DCD	0x4000a702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@MOFFCBMN@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "3"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMSetRealTime| PROC

; 178  : {

  00000		 |$LN16@OEMSetReal|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd054	 sub         sp, sp, #0x54
  00008		 |$M44192|
  00008	e1b07000	 movs        r7, r0

; 179  :     BOOL rc = FALSE;
; 180  :     BOOL enabled;
; 181  :     UINT8 year, month, dweek, day, hour, min, sec;
; 182  : 
; 183  :     if(!pTime) goto cleanUp;

  0000c	e59f2278	 ldr         r2, [pc, #0x278]
  00010	e3a04000	 mov         r4, #0
  00014	0a000091	 beq         |$cleanUp$44016|

; 184  : 
; 185  :     // year must be in [RTC_YEAR_BEGIN, RTC_YEAR_END)
; 186  : 	if(pTime->wYear<RTC_YEAR_BEGIN || pTime->wYear>=RTC_YEAR_END) goto cleanUp;

  00018	e1d710b0	 ldrh        r1, [r7]
  0001c	e3510e7d	 cmp         r1, #0x7D, 28
  00020	3a00008e	 bcc         |$cleanUp$44016|
  00024	e3a03b02	 mov         r3, #2, 22
  00028	e3833034	 orr         r3, r3, #0x34
  0002c	e1510003	 cmp         r1, r3
  00030	2a00008a	 bcs         |$cleanUp$44016|

; 187  : 
; 188  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 189  :         L"+OEMSetRealTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 190  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 191  :         pTime->wSecond, pTime->wMilliseconds
; 192  :     ));

  00034	e5923440	 ldr         r3, [r2, #0x440]
  00038	e3130040	 tst         r3, #0x40
  0003c	0a00000d	 beq         |$LN9@OEMSetReal|
  00040	e3130004	 tst         r3, #4
  00044	0a00000b	 beq         |$LN9@OEMSetReal|
  00048	e1d7e0be	 ldrh        lr, [r7, #0xE]
  0004c	e1d740bc	 ldrh        r4, [r7, #0xC]
  00050	e1d750ba	 ldrh        r5, [r7, #0xA]
  00054	e1d760b8	 ldrh        r6, [r7, #8]
  00058	e1d730b6	 ldrh        r3, [r7, #6]
  0005c	e1d720b2	 ldrh        r2, [r7, #2]
  00060	e59f0230	 ldr         r0, [pc, #0x230]
  00064	e58de00c	 str         lr, [sp, #0xC]
  00068	e58d4008	 str         r4, [sp, #8]
  0006c	e58d5004	 str         r5, [sp, #4]
  00070	e58d6000	 str         r6, [sp]
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$LN9@OEMSetReal|

; 193  : 
; 194  :     // Initialize virtual address pointer
; 195  :     if (g_pRTCRegs == NULL) g_pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  00078	e59f4210	 ldr         r4, [pc, #0x210]
  0007c	e5943000	 ldr         r3, [r4]
  00080	e3530000	 cmp         r3, #0
  00084	1a000004	 bne         |$LN3@OEMSetReal|
  00088	e3a03b02	 mov         r3, #2, 22
  0008c	e2430913	 sub         r0, r3, #0x13, 18
  00090	e3a01000	 mov         r1, #0
  00094	eb000000	 bl          OALPAtoVA
  00098	e5840000	 str         r0, [r4]
  0009c		 |$LN3@OEMSetReal|

; 196  : 
; 197  :     year = BIN2BCD(pTime->wYear-RTC_YEAR_BEGIN);

  0009c	e1d730b0	 ldrh        r3, [r7]

; 198  :     month = BIN2BCD(pTime->wMonth);
; 199  :     dweek = BIN2BCD(pTime->wDayOfWeek);
; 200  :     day   = BIN2BCD(pTime->wDay);
; 201  :     hour  = BIN2BCD(pTime->wHour);
; 202  :     min   = BIN2BCD(pTime->wMinute);
; 203  :     sec   = BIN2BCD(pTime->wSecond);  

  000a0	e5d7500c	 ldrb        r5, [r7, #0xC]
  000a4	e5d72002	 ldrb        r2, [r7, #2]
  000a8	e2833030	 add         r3, r3, #0x30
  000ac	e20360ff	 and         r6, r3, #0xFF
  000b0	e1a03005	 mov         r3, r5
  000b4	e59f51d8	 ldr         r5, [pc, #0x1D8]
  000b8	e5d78004	 ldrb        r8, [r7, #4]
  000bc	e5d79006	 ldrb        r9, [r7, #6]
  000c0	e5d7a008	 ldrb        r10, [r7, #8]
  000c4	e5d7b00a	 ldrb        r11, [r7, #0xA]
  000c8	e1a07002	 mov         r7, r2
  000cc	e58d3014	 str         r3, [sp, #0x14]
  000d0	e0c32596	 smull       r2, r3, r6, r5
  000d4	e58d6018	 str         r6, [sp, #0x18]
  000d8	e58d701c	 str         r7, [sp, #0x1C]
  000dc	e58d8020	 str         r8, [sp, #0x20]
  000e0	e58d2030	 str         r2, [sp, #0x30]
  000e4	e0c21597	 smull       r1, r2, r7, r5
  000e8	e59d7014	 ldr         r7, [sp, #0x14]
  000ec	e1a03143	 mov         r3, r3, asr #2
  000f0	e1a02142	 mov         r2, r2, asr #2
  000f4	e58d1034	 str         r1, [sp, #0x34]
  000f8	e0c10598	 smull       r0, r1, r8, r5
  000fc	e0828fa2	 add         r8, r2, r2, lsr #31
  00100	e0882108	 add         r2, r8, r8, lsl #2
  00104	e1a01141	 mov         r1, r1, asr #2
  00108	e58d0038	 str         r0, [sp, #0x38]
  0010c	e0c0e599	 smull       lr, r0, r9, r5
  00110	e58d9024	 str         r9, [sp, #0x24]
  00114	e0819fa1	 add         r9, r1, r1, lsr #31
  00118	e0891109	 add         r1, r9, r9, lsl #2
  0011c	e1a00140	 mov         r0, r0, asr #2
  00120	e58de03c	 str         lr, [sp, #0x3C]
  00124	e0ce459a	 smull       r4, lr, r10, r5
  00128	e58da028	 str         r10, [sp, #0x28]
  0012c	e080afa0	 add         r10, r0, r0, lsr #31
  00130	e08a010a	 add         r0, r10, r10, lsl #2
  00134	e1a0e14e	 mov         lr, lr, asr #2
  00138	e58d4040	 str         r4, [sp, #0x40]
  0013c	e0c4659b	 smull       r6, r4, r11, r5
  00140	e58db02c	 str         r11, [sp, #0x2C]
  00144	e08ebfae	 add         r11, lr, lr, lsr #31
  00148	e1a04144	 mov         r4, r4, asr #2
  0014c	e08be10b	 add         lr, r11, r11, lsl #2
  00150	e58d6044	 str         r6, [sp, #0x44]
  00154	e0c56597	 smull       r6, r5, r7, r5
  00158	e0837fa3	 add         r7, r3, r3, lsr #31
  0015c	e0873107	 add         r3, r7, r7, lsl #2
  00160	e0844fa4	 add         r4, r4, r4, lsr #31
  00164	e1a05145	 mov         r5, r5, asr #2
  00168	e58d604c	 str         r6, [sp, #0x4C]
  0016c	e59d6018	 ldr         r6, [sp, #0x18]
  00170	e58d4048	 str         r4, [sp, #0x48]
  00174	e0844104	 add         r4, r4, r4, lsl #2
  00178	e0463083	 sub         r3, r6, r3, lsl #1
  0017c	e59d601c	 ldr         r6, [sp, #0x1C]
  00180	e0855fa5	 add         r5, r5, r5, lsr #31
  00184	e1833207	 orr         r3, r3, r7, lsl #4
  00188	e0462082	 sub         r2, r6, r2, lsl #1
  0018c	e59d6020	 ldr         r6, [sp, #0x20]

; 204  : 
; 205  :     // Disable interrupts when registers are written
; 206  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00190	e59d7018	 ldr         r7, [sp, #0x18]
  00194	e58d5050	 str         r5, [sp, #0x50]
  00198	e0461081	 sub         r1, r6, r1, lsl #1
  0019c	e59d6024	 ldr         r6, [sp, #0x24]
  001a0	e59d701c	 ldr         r7, [sp, #0x1C]
  001a4	e0855105	 add         r5, r5, r5, lsl #2
  001a8	e0466080	 sub         r6, r6, r0, lsl #1
  001ac	e59d0028	 ldr         r0, [sp, #0x28]
  001b0	e5cd3010	 strb        r3, [sp, #0x10]
  001b4	e59d3030	 ldr         r3, [sp, #0x30]
  001b8	e040e08e	 sub         lr, r0, lr, lsl #1
  001bc	e59d002c	 ldr         r0, [sp, #0x2C]
  001c0	e59d3034	 ldr         r3, [sp, #0x34]
  001c4	e59d3038	 ldr         r3, [sp, #0x38]
  001c8	e0404084	 sub         r4, r0, r4, lsl #1
  001cc	e59d0014	 ldr         r0, [sp, #0x14]
  001d0	e1827208	 orr         r7, r2, r8, lsl #4
  001d4	e59d2020	 ldr         r2, [sp, #0x20]
  001d8	e0405085	 sub         r5, r0, r5, lsl #1
  001dc	e3a00000	 mov         r0, #0
  001e0	e59d303c	 ldr         r3, [sp, #0x3C]
  001e4	e59d3040	 ldr         r3, [sp, #0x40]
  001e8	e59d3044	 ldr         r3, [sp, #0x44]
  001ec	e59d3048	 ldr         r3, [sp, #0x48]
  001f0	e59d2024	 ldr         r2, [sp, #0x24]
  001f4	e59d2028	 ldr         r2, [sp, #0x28]
  001f8	e1844203	 orr         r4, r4, r3, lsl #4
  001fc	e59d304c	 ldr         r3, [sp, #0x4C]
  00200	e59d3050	 ldr         r3, [sp, #0x50]
  00204	e59d202c	 ldr         r2, [sp, #0x2C]
  00208	e59d2014	 ldr         r2, [sp, #0x14]
  0020c	e1818209	 orr         r8, r1, r9, lsl #4
  00210	e1855203	 orr         r5, r5, r3, lsl #4
  00214	e186620a	 orr         r6, r6, r10, lsl #4
  00218	e18e920b	 orr         r9, lr, r11, lsl #4
  0021c	eb000000	 bl          INTERRUPTS_ENABLE
  00220	e59f3068	 ldr         r3, [pc, #0x68]
  00224	e5932000	 ldr         r2, [r3]
  00228		 |$LL2@OEMSetReal|

; 207  : 
; 208  :     // Wait for BUSY low. Anytime BUSY is low, there is
; 209  :     // at least 15us to carry out the R/W.
; 210  :     while ((INREG8(&g_pRTCRegs->STAT) & RTC_STAT_BUSY) != 0);

  00228	e5d23044	 ldrb        r3, [r2, #0x44]
  0022c	e3130001	 tst         r3, #1
  00230	1afffffc	 bne         |$LL2@OEMSetReal|

; 211  : 
; 212  :     // Write RTC time registers.
; 213  :     OUTREG8(&g_pRTCRegs->YEAR, year);

  00234	e5dd3010	 ldrb        r3, [sp, #0x10]
  00238	e5c23014	 strb        r3, [r2, #0x14]

; 214  :     OUTREG8(&g_pRTCRegs->MONTH, month);

  0023c	e5c27010	 strb        r7, [r2, #0x10]

; 215  :     OUTREG8(&g_pRTCRegs->WEEKDAY, dweek);

  00240	e5c28018	 strb        r8, [r2, #0x18]

; 216  :     OUTREG8(&g_pRTCRegs->DAY, day);

  00244	e5c2600c	 strb        r6, [r2, #0xC]

; 217  :     OUTREG8(&g_pRTCRegs->HOURS, hour);

  00248	e5c29008	 strb        r9, [r2, #8]

; 218  :     OUTREG8(&g_pRTCRegs->MINS, min);

  0024c	e5c24004	 strb        r4, [r2, #4]

; 219  :     OUTREG8(&g_pRTCRegs->SECS, sec);

  00250	e5c25000	 strb        r5, [r2]

; 220  : 
; 221  :     // Enable interrupts
; 222  :     INTERRUPTS_ENABLE(enabled);

  00254	eb000000	 bl          INTERRUPTS_ENABLE
  00258	e59f202c	 ldr         r2, [pc, #0x2C]

; 223  : 
; 224  :     rc = TRUE;

  0025c	e3a04001	 mov         r4, #1
  00260		 |$cleanUp$44016|

; 225  : 
; 226  : cleanUp:
; 227  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetRealTime(rc = %d)\r\n", rc));

  00260	e5923440	 ldr         r3, [r2, #0x440]
  00264	e3130040	 tst         r3, #0x40
  00268	13130004	 tstne       r3, #4
  0026c	159f0014	 ldrne       r0, [pc, #0x14]
  00270	11a01004	 movne       r1, r4
  00274	1b000000	 blne        NKDbgPrintfW

; 228  :     return rc;
; 229  : }

  00278	e1a00004	 mov         r0, r4
  0027c	e28dd054	 add         sp, sp, #0x54
  00280	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00284	e12fff1e	 bx          lr
  00288		 |$LN17@OEMSetReal|
  00288		 |$LN18@OEMSetReal|
  00288	00000000	 DCD         |??_C@_1DG@MOFFCBMN@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0028c		 |$LN19@OEMSetReal|
  0028c	00000000	 DCD         |dpCurSettings|
  00290		 |$LN20@OEMSetReal|
  00290	00000000	 DCD         |g_pRTCRegs|
  00294		 |$LN21@OEMSetReal|
  00294	66666667	 DCD         0x66666667
  00298		 |$LN22@OEMSetReal|
  00298	00000000	 DCD         |??_C@_1FE@NLGIDKMA@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3?$AA?$CF@|
  0029c		 |$M44193|

			 ENDP  ; |OEMSetRealTime|

	EXPORT	|OEMSetAlarmTime|
	EXPORT	|??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| [ DATA ] ; `string'
	IMPORT	|OEMInterruptDone|

  00000			 AREA	 |.pdata|, PDATA
|$T44224| DCD	|$LN16@OEMSetAlar|
	DCD	0x4000a402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, "/", 0x0, "%", 0x0, "d", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, "%", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "3", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMSetAlarmTime| PROC

; 239  : {

  00000		 |$LN16@OEMSetAlar|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd04c	 sub         sp, sp, #0x4C
  00008		 |$M44221|
  00008	e1b07000	 movs        r7, r0

; 240  :     BOOL rc = FALSE;
; 241  :     BOOL enabled;
; 242  :     UINT8 year, month, day, hour, min, sec;
; 243  : 
; 244  :     if(!pTime) goto cleanUp;

  0000c	e59f226c	 ldr         r2, [pc, #0x26C]
  00010	e3a04000	 mov         r4, #0
  00014	0a00008e	 beq         |$cleanUp$44069|

; 245  : 
; 246  :     // year must be in [RTC_YEAR_BEGIN, RTC_YEAR_END)
; 247  :     if(pTime->wYear<RTC_YEAR_BEGIN || pTime->wYear>=RTC_YEAR_END) goto cleanUp;

  00018	e1d710b0	 ldrh        r1, [r7]
  0001c	e3510e7d	 cmp         r1, #0x7D, 28
  00020	3a00008b	 bcc         |$cleanUp$44069|
  00024	e3a03b02	 mov         r3, #2, 22
  00028	e3833034	 orr         r3, r3, #0x34
  0002c	e1510003	 cmp         r1, r3
  00030	2a000087	 bcs         |$cleanUp$44069|

; 248  : 
; 249  :     OALMSG(OAL_RTC&&OAL_FUNC, (
; 250  :         L"+OEMSetAlarmTime(%d/%d/%d %d:%d:%d.%03d)\r\n", 
; 251  :         pTime->wYear, pTime->wMonth, pTime->wDay, pTime->wHour, pTime->wMinute,
; 252  :         pTime->wSecond, pTime->wMilliseconds
; 253  :     ));

  00034	e5923440	 ldr         r3, [r2, #0x440]
  00038	e3130040	 tst         r3, #0x40
  0003c	0a00000d	 beq         |$LN9@OEMSetAlar|
  00040	e3130004	 tst         r3, #4
  00044	0a00000b	 beq         |$LN9@OEMSetAlar|
  00048	e1d7e0be	 ldrh        lr, [r7, #0xE]
  0004c	e1d740bc	 ldrh        r4, [r7, #0xC]
  00050	e1d750ba	 ldrh        r5, [r7, #0xA]
  00054	e1d760b8	 ldrh        r6, [r7, #8]
  00058	e1d730b6	 ldrh        r3, [r7, #6]
  0005c	e1d720b2	 ldrh        r2, [r7, #2]
  00060	e59f0224	 ldr         r0, [pc, #0x224]
  00064	e58de00c	 str         lr, [sp, #0xC]
  00068	e58d4008	 str         r4, [sp, #8]
  0006c	e58d5004	 str         r5, [sp, #4]
  00070	e58d6000	 str         r6, [sp]
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$LN9@OEMSetAlar|

; 254  : 
; 255  :     // Get virtual address
; 256  :     if (g_pRTCRegs == NULL) g_pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  00078	e59f4204	 ldr         r4, [pc, #0x204]
  0007c	e594b000	 ldr         r11, [r4]
  00080	e58db02c	 str         r11, [sp, #0x2C]
  00084	e35b0000	 cmp         r11, #0
  00088	1a000006	 bne         |$LN3@OEMSetAlar|
  0008c	e3a03b02	 mov         r3, #2, 22
  00090	e2430913	 sub         r0, r3, #0x13, 18
  00094	e3a01000	 mov         r1, #0
  00098	eb000000	 bl          OALPAtoVA
  0009c	e1a0b000	 mov         r11, r0
  000a0	e58db02c	 str         r11, [sp, #0x2C]
  000a4	e584b000	 str         r11, [r4]
  000a8		 |$LN3@OEMSetAlar|

; 257  : 
; 258  :     year = BIN2BCD(pTime->wYear-RTC_YEAR_BEGIN);

  000a8	e1d730b0	 ldrh        r3, [r7]

; 259  :     month = BIN2BCD(pTime->wMonth);
; 260  :     day   = BIN2BCD(pTime->wDay);

  000ac	e5d71006	 ldrb        r1, [r7, #6]

; 261  :     hour  = BIN2BCD(pTime->wHour);
; 262  :     min   = BIN2BCD(pTime->wMinute);
; 263  :     sec   = BIN2BCD(pTime->wSecond);  

  000b0	e59f21d0	 ldr         r2, [pc, #0x1D0]
  000b4	e2833030	 add         r3, r3, #0x30
  000b8	e5d76002	 ldrb        r6, [r7, #2]
  000bc	e5d78008	 ldrb        r8, [r7, #8]
  000c0	e5d7900a	 ldrb        r9, [r7, #0xA]
  000c4	e5d7a00c	 ldrb        r10, [r7, #0xC]
  000c8	e20300ff	 and         r0, r3, #0xFF
  000cc	e1a07001	 mov         r7, r1
  000d0	e0c31290	 smull       r1, r3, r0, r2
  000d4	e58d0014	 str         r0, [sp, #0x14]
  000d8	e58d701c	 str         r7, [sp, #0x1C]
  000dc	e58d6018	 str         r6, [sp, #0x18]
  000e0	e58d1030	 str         r1, [sp, #0x30]
  000e4	e0c10296	 smull       r0, r1, r6, r2
  000e8	e58d8020	 str         r8, [sp, #0x20]

; 264  : 
; 265  :     // Reset interrupt
; 266  :     OUTREG8(&g_pRTCRegs->STAT, RTC_STAT_ALARM);

  000ec	e3a06040	 mov         r6, #0x40
  000f0	e58d9024	 str         r9, [sp, #0x24]
  000f4	e58d0034	 str         r0, [sp, #0x34]
  000f8	e0ce0297	 smull       r0, lr, r7, r2

; 267  : 
; 268  :     // Disable alarm interrupt for while
; 269  :     CLRREG8(&g_pRTCRegs->INTR, RTC_INTR_ALARM);

  000fc	e5cb6044	 strb        r6, [r11, #0x44]
  00100	e5db6048	 ldrb        r6, [r11, #0x48]
  00104	e58da028	 str         r10, [sp, #0x28]
  00108	e58d0038	 str         r0, [sp, #0x38]
  0010c	e0c40298	 smull       r0, r4, r8, r2
  00110	e20660f7	 and         r6, r6, #0xF7
  00114	e58d003c	 str         r0, [sp, #0x3C]
  00118	e0c50299	 smull       r0, r5, r9, r2
  0011c	e58d0040	 str         r0, [sp, #0x40]
  00120	e0c2029a	 smull       r0, r2, r10, r2
  00124	e58d0044	 str         r0, [sp, #0x44]
  00128	e1a00143	 mov         r0, r3, asr #2
  0012c	e1a03141	 mov         r3, r1, asr #2
  00130	e1a0114e	 mov         r1, lr, asr #2
  00134	e1a0e144	 mov         lr, r4, asr #2
  00138	e1a04145	 mov         r4, r5, asr #2
  0013c	e59d5014	 ldr         r5, [sp, #0x14]
  00140	e0807fa0	 add         r7, r0, r0, lsr #31
  00144	e0838fa3	 add         r8, r3, r3, lsr #31
  00148	e0873107	 add         r3, r7, r7, lsl #2
  0014c	e0453083	 sub         r3, r5, r3, lsl #1
  00150	e59d5018	 ldr         r5, [sp, #0x18]
  00154	e1a02142	 mov         r2, r2, asr #2
  00158	e084bfa4	 add         r11, r4, r4, lsr #31
  0015c	e0824fa2	 add         r4, r2, r2, lsr #31
  00160	e0882108	 add         r2, r8, r8, lsl #2
  00164	e0452082	 sub         r2, r5, r2, lsl #1
  00168	e59d501c	 ldr         r5, [sp, #0x1C]
  0016c	e0819fa1	 add         r9, r1, r1, lsr #31
  00170	e0891109	 add         r1, r9, r9, lsl #2
  00174	e0451081	 sub         r1, r5, r1, lsl #1
  00178	e59d5020	 ldr         r5, [sp, #0x20]
  0017c	e08eafae	 add         r10, lr, lr, lsr #31
  00180	e08a010a	 add         r0, r10, r10, lsl #2
  00184	e0455080	 sub         r5, r5, r0, lsl #1
  00188	e59d0024	 ldr         r0, [sp, #0x24]
  0018c	e08be10b	 add         lr, r11, r11, lsl #2
  00190	e1833207	 orr         r3, r3, r7, lsl #4

; 270  : 
; 271  :     // Disable interrupts when registers are written
; 272  :     enabled = INTERRUPTS_ENABLE(FALSE);

  00194	e59d7014	 ldr         r7, [sp, #0x14]
  00198	e040e08e	 sub         lr, r0, lr, lsl #1
  0019c	e59d0028	 ldr         r0, [sp, #0x28]
  001a0	e5cd3010	 strb        r3, [sp, #0x10]
  001a4	e59d3030	 ldr         r3, [sp, #0x30]
  001a8	e59d3034	 ldr         r3, [sp, #0x34]
  001ac	e59d7018	 ldr         r7, [sp, #0x18]
  001b0	e59d3038	 ldr         r3, [sp, #0x38]
  001b4	e58d4048	 str         r4, [sp, #0x48]
  001b8	e59d303c	 ldr         r3, [sp, #0x3C]
  001bc	e0844104	 add         r4, r4, r4, lsl #2
  001c0	e1827208	 orr         r7, r2, r8, lsl #4
  001c4	e59d201c	 ldr         r2, [sp, #0x1C]
  001c8	e59d2020	 ldr         r2, [sp, #0x20]
  001cc	e59d3040	 ldr         r3, [sp, #0x40]
  001d0	e59d2024	 ldr         r2, [sp, #0x24]
  001d4	e59d3044	 ldr         r3, [sp, #0x44]
  001d8	e0404084	 sub         r4, r0, r4, lsl #1
  001dc	e1818209	 orr         r8, r1, r9, lsl #4
  001e0	e3a00000	 mov         r0, #0
  001e4	e185520a	 orr         r5, r5, r10, lsl #4
  001e8	e18e920b	 orr         r9, lr, r11, lsl #4
  001ec	e59d3048	 ldr         r3, [sp, #0x48]
  001f0	e59d2028	 ldr         r2, [sp, #0x28]
  001f4	e1844203	 orr         r4, r4, r3, lsl #4
  001f8	e59d302c	 ldr         r3, [sp, #0x2C]
  001fc	e5c36048	 strb        r6, [r3, #0x48]
  00200	eb000000	 bl          INTERRUPTS_ENABLE
  00204	e59f3078	 ldr         r3, [pc, #0x78]
  00208	e5932000	 ldr         r2, [r3]
  0020c		 |$LL2@OEMSetAlar|

; 273  : 
; 274  :     // Wait for BUSY low. Anytime BUSY is low, there is
; 275  :     // at least 15us to carry out the R/W.
; 276  :     while ((INREG8(&g_pRTCRegs->STAT) & RTC_STAT_BUSY) != 0);

  0020c	e5d23044	 ldrb        r3, [r2, #0x44]
  00210	e3130001	 tst         r3, #1
  00214	1afffffc	 bne         |$LL2@OEMSetAlar|

; 277  : 
; 278  :     // Write RTC time registers.
; 279  :     OUTREG8(&g_pRTCRegs->ALARM_YEAR, year);

  00218	e5dd3010	 ldrb        r3, [sp, #0x10]
  0021c	e5c23034	 strb        r3, [r2, #0x34]

; 280  :     OUTREG8(&g_pRTCRegs->ALARM_MONTH, month);

  00220	e5c27030	 strb        r7, [r2, #0x30]

; 281  :     OUTREG8(&g_pRTCRegs->ALARM_DAY, day);

  00224	e5c2802c	 strb        r8, [r2, #0x2C]

; 282  :     OUTREG8(&g_pRTCRegs->ALARM_HOURS, hour);

  00228	e5c25028	 strb        r5, [r2, #0x28]

; 283  :     OUTREG8(&g_pRTCRegs->ALARM_MINS, min);

  0022c	e5c29024	 strb        r9, [r2, #0x24]

; 284  :     OUTREG8(&g_pRTCRegs->ALARM_SECS, sec);

  00230	e5c24020	 strb        r4, [r2, #0x20]

; 285  : 
; 286  :     // Re-enable alarm interrupt
; 287  :     SETREG8(&g_pRTCRegs->INTR, RTC_INTR_ALARM);

  00234	e5d23048	 ldrb        r3, [r2, #0x48]

; 288  : 
; 289  :     // Enable interrupts
; 290  :     INTERRUPTS_ENABLE(enabled);

  00238	e3833008	 orr         r3, r3, #8
  0023c	e5c23048	 strb        r3, [r2, #0x48]
  00240	eb000000	 bl          INTERRUPTS_ENABLE

; 291  :     
; 292  :     // Re-enable interrupt (it is disabled since last alarm occurs)
; 293  :     OEMInterruptDone(SYSINTR_RTC_ALARM);

  00244	e3a0000d	 mov         r0, #0xD
  00248	eb000000	 bl          OEMInterruptDone
  0024c	e59f202c	 ldr         r2, [pc, #0x2C]

; 294  : 
; 295  :     rc = TRUE;

  00250	e3a04001	 mov         r4, #1
  00254		 |$cleanUp$44069|

; 296  : 
; 297  : cleanUp:
; 298  :     OALMSG(OAL_RTC&&OAL_FUNC, (L"-OEMSetAlarmTime(rc = %d)\r\n", rc));

  00254	e5923440	 ldr         r3, [r2, #0x440]
  00258	e3130040	 tst         r3, #0x40
  0025c	13130004	 tstne       r3, #4
  00260	159f0014	 ldrne       r0, [pc, #0x14]
  00264	11a01004	 movne       r1, r4
  00268	1b000000	 blne        NKDbgPrintfW

; 299  :     return rc;
; 300  : }

  0026c	e1a00004	 mov         r0, r4
  00270	e28dd04c	 add         sp, sp, #0x4C
  00274	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00278	e12fff1e	 bx          lr
  0027c		 |$LN17@OEMSetAlar|
  0027c		 |$LN18@OEMSetAlar|
  0027c	00000000	 DCD         |??_C@_1DI@MKCLCMDC@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00280		 |$LN19@OEMSetAlar|
  00280	00000000	 DCD         |dpCurSettings|
  00284		 |$LN20@OEMSetAlar|
  00284	00000000	 DCD         |g_pRTCRegs|
  00288		 |$LN21@OEMSetAlar|
  00288	66666667	 DCD         0x66666667
  0028c		 |$LN22@OEMSetAlar|
  0028c	00000000	 DCD         |??_C@_1FG@LDBAHALN@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?1?$AA?$CF?$AAd?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?$CF?$AAd?$AA?3@|
  00290		 |$M44222|

			 ENDP  ; |OEMSetAlarmTime|

	EXPORT	|OALIoCtlHalInitRTC|
	EXPORT	|??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@HLCFANML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|g_pOemGlobal|

  00000			 AREA	 |.pdata|, PDATA
|$T44252| DCD	|$LN19@OALIoCtlHa|
	DCD	0x40004f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@HLCFANML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "s", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, "r"
	DCB	0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "n", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIoCtlHalInitRTC| PROC

; 50   : {

  00000		 |$LN19@OALIoCtlHa|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M44249|
  00004	e1a04002	 mov         r4, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1a07000	 mov         r7, r0

; 51   :     SYSTEMTIME *lpst = NULL;
; 52   :     BOOL rc = FALSE;
; 53   :     UINT8 stat;
; 54   : 
; 55   :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlHalInitRTC(...)\r\n"));

  00010	e59f5120	 ldr         r5, [pc, #0x120]
  00014	e595e440	 ldr         lr, [r5, #0x440]
  00018	e31e0a01	 tst         lr, #1, 20
  0001c	0a000004	 beq         |$LN10@OALIoCtlHa|
  00020	e31e0004	 tst         lr, #4
  00024	0a000002	 beq         |$LN10@OALIoCtlHa|
  00028	e59f0104	 ldr         r0, [pc, #0x104]
  0002c	eb000000	 bl          NKDbgPrintfW
  00030	e595e440	 ldr         lr, [r5, #0x440]
  00034		 |$LN10@OALIoCtlHa|

; 56   : 
; 57   :     if(pOutSize) {

  00034	e59d301c	 ldr         r3, [sp, #0x1C]
  00038	e3a08000	 mov         r8, #0
  0003c	e3530000	 cmp         r3, #0

; 58   :         *pOutSize = 0;

  00040	15838000	 strne       r8, [r3]

; 59   :     }
; 60   : 
; 61   :     // Validity checks
; 62   :     if(code!=IOCTL_HAL_INIT_RTC || pInpBuffer==NULL || inpSize!=sizeof(SYSTEMTIME))

  00044	e59f30e4	 ldr         r3, [pc, #0xE4]
  00048	1595e440	 ldrne       lr, [r5, #0x440]
  0004c	e1570003	 cmp         r7, r3
  00050	1a000024	 bne         |$LN5@OALIoCtlHa|
  00054	e3560000	 cmp         r6, #0
  00058	0a000022	 beq         |$LN5@OALIoCtlHa|
  0005c	e3540010	 cmp         r4, #0x10
  00060	1a000020	 bne         |$LN5@OALIoCtlHa|

; 66   :         goto cleanUp;
; 67   :     }
; 68   : 
; 69   :     // Initialize virtual address pointer
; 70   :     if (g_pRTCRegs == NULL) g_pRTCRegs = OALPAtoUA(OMAP5912_RTC_REGS_PA);

  00064	e59f40c0	 ldr         r4, [pc, #0xC0]
  00068	e5940000	 ldr         r0, [r4]
  0006c	e3500000	 cmp         r0, #0
  00070	1a000004	 bne         |$LN4@OALIoCtlHa|
  00074	e3a03b02	 mov         r3, #2, 22
  00078	e2430913	 sub         r0, r3, #0x13, 18
  0007c	e3a01000	 mov         r1, #0
  00080	eb000000	 bl          OALPAtoVA
  00084	e5840000	 str         r0, [r4]
  00088		 |$LN4@OALIoCtlHa|

; 71   :     
; 72   :     // Initialize the control register.
; 73   :     OUTREG8(&g_pRTCRegs->CTRL, RTC_CTRL_INIT);

  00088	e5c08040	 strb        r8, [r0, #0x40]
  0008c		 |$LL3@OALIoCtlHa|

; 74   : 
; 75   :     // Wait until RUN is active
; 76   :     while ((INREG8(&g_pRTCRegs->STAT) & RTC_STAT_RUN) != 0);

  0008c	e5d03044	 ldrb        r3, [r0, #0x44]
  00090	e3130002	 tst         r3, #2
  00094	1afffffc	 bne         |$LL3@OALIoCtlHa|

; 77   : 
; 78   :     // Initialize interrupt register
; 79   :     OUTREG8(&g_pRTCRegs->INTR, 0);

  00098	e5c08048	 strb        r8, [r0, #0x48]

; 80   : 
; 81   :     // Save reset status
; 82   :     stat = INREG8(&g_pRTCRegs->STAT);

  0009c	e5d02044	 ldrb        r2, [r0, #0x44]

; 83   :     
; 84   :     // Clear power up status and alarm interrupt
; 85   :     OUTREG8(&g_pRTCRegs->STAT, RTC_STAT_ALARM|RTC_STAT_RESET);

  000a0	e3a030c0	 mov         r3, #0xC0
  000a4	e5c03044	 strb        r3, [r0, #0x44]

; 86   : 
; 87   :     // Start the RTC
; 88   :     SETREG8(&g_pRTCRegs->CTRL, RTC_CTRL_RUN);

  000a8	e5d03040	 ldrb        r3, [r0, #0x40]

; 89   : 
; 90   :     rc = TRUE;
; 91   :     
; 92   :     // Set time defined in platform only once after powerup
; 93   :     lpst = (SYSTEMTIME *)pInpBuffer;
; 94   :     if ((stat & RTC_STAT_RESET) == RTC_STAT_RESET) {

  000ac	e2022080	 and         r2, r2, #0x80
  000b0	e3a04001	 mov         r4, #1
  000b4	e3833001	 orr         r3, r3, #1
  000b8	e5c03040	 strb        r3, [r0, #0x40]
  000bc	e3520080	 cmp         r2, #0x80
  000c0	1a000002	 bne         |$LN1@OALIoCtlHa|

; 95   :         rc = OEMSetRealTime(lpst);

  000c4	e1a00006	 mov         r0, r6
  000c8	eb000000	 bl          OEMSetRealTime
  000cc	e1a04000	 mov         r4, r0
  000d0		 |$LN1@OALIoCtlHa|

; 96   :     }
; 97   : 
; 98   :     // OMAP5912 has 1s alarm resolution
; 99   :     g_pOemGlobal->dwAlarmResolution = 1000;

  000d0	e59f3050	 ldr         r3, [pc, #0x50]
  000d4	e3a02ffa	 mov         r2, #0xFA, 30
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e58320e4	 str         r2, [r3, #0xE4]
  000e0	e595e440	 ldr         lr, [r5, #0x440]
  000e4	ea000005	 b           |$cleanUp$43951|
  000e8		 |$LN5@OALIoCtlHa|

; 63   :     {
; 64   :         OALMSG(OAL_ERROR, (L"ERROR: Invalid calling parameters...returning\r\n"));

  000e8	e31e0001	 tst         lr, #1
  000ec	0a000002	 beq         |$LN12@OALIoCtlHa|
  000f0	e59f002c	 ldr         r0, [pc, #0x2C]
  000f4	eb000000	 bl          NKDbgPrintfW
  000f8	e595e440	 ldr         lr, [r5, #0x440]
  000fc		 |$LN12@OALIoCtlHa|

; 65   :         rc = FALSE;

  000fc	e3a04000	 mov         r4, #0
  00100		 |$cleanUp$43951|

; 100  :     
; 101  : cleanUp:
; 102  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"-OALIoCtlHalInitRTC(rc = %d)\r\n", rc));

  00100	e31e0a01	 tst         lr, #1, 20
  00104	131e0004	 tstne       lr, #4
  00108	159f0010	 ldrne       r0, [pc, #0x10]
  0010c	11a01004	 movne       r1, r4
  00110	1b000000	 blne        NKDbgPrintfW

; 103  :     return rc;
; 104  : }

  00114	e1a00004	 mov         r0, r4
  00118	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0011c	e12fff1e	 bx          lr
  00120		 |$LN20@OALIoCtlHa|
  00120		 |$LN21@OALIoCtlHa|
  00120	00000000	 DCD         |??_C@_1DO@FGGICPPB@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00124		 |$LN22@OALIoCtlHa|
  00124	00000000	 DCD         |??_C@_1GA@HLCFANML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAa?$AAl?$AAl?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAa?$AAr?$AAa?$AAm?$AAe?$AAt?$AAe?$AAr@|
  00128		 |$LN23@OALIoCtlHa|
  00128	00000000	 DCD         |g_pOemGlobal|
  0012c		 |$LN24@OALIoCtlHa|
  0012c	00000000	 DCD         |g_pRTCRegs|
  00130		 |$LN25@OALIoCtlHa|
  00130	01010038	 DCD         0x1010038
  00134		 |$LN26@OALIoCtlHa|
  00134	00000000	 DCD         |??_C@_1DG@PECFOPGF@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?4?$AA?4?$AA?4?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00138		 |$LN27@OALIoCtlHa|
  00138	00000000	 DCD         |dpCurSettings|
  0013c		 |$M44250|

			 ENDP  ; |OALIoCtlHalInitRTC|

	END
