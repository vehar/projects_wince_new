; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP5912_MS_V1\OAL\INTR\intr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_oalTimerIrq| [ DATA ]

  00000			 AREA	 |.data|, DATA
|g_oalTimerIrq| DCD 0xffffffff
	%	4
|g_intcL1Level| DCD 0x42
	DCD	0x42
	DCD	0x43
	DCD	0x43
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x40
	DCD	0x40
|g_intcL2ALevel| DCD 0x42
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
|g_intcL2BLevel| DCD 0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
|g_intcL2CLevel| DCD 0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
|g_intcL2DLevel| DCD 0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIntrEnableIrqs|
	EXPORT	|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIntrInit|
	IMPORT	|BSPIntrInit|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALIntrStaticTranslate|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALIntrMapInit|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.bss|, NOINIT
|g_pMPUIORegs| % 0x4
|g_pGPIO4Regs| % 0x4
|g_pGPIO3Regs| % 0x4
|g_pGPIO2Regs| % 0x4
|g_pGPIO1Regs| % 0x4
|g_pIntcL2DRegs| % 0x4
|g_pIntcL2CRegs| % 0x4
|g_pIntcL2BRegs| % 0x4
|g_pIntcL2ARegs| % 0x4
|g_pIntcL1Regs| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T44343| DCD	|$LN12@OALIntrIni|
	DCD	0x40012302
; File c:\wince600\platform\common\src\soc\omap5912_ms_v1\oal\intr\intr.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrInit| PROC

; 181  : {

  00000		 |$LN12@OALIntrIni|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd044	 sub         sp, sp, #0x44
  00008		 |$M44340|

; 182  :     BOOL rc = FALSE;

  00008	e3a03000	 mov         r3, #0
  0000c	e58d3000	 str         r3, [sp]

; 183  :     UINT32 irq, i;
; 184  : 
; 185  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"+OALInterruptInit\r\n"));

  00010	e59f3430	 ldr         r3, [pc, #0x430]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130901	 tst         r3, #1, 18
  0001c	0a000008	 beq         |$LN6@OALIntrIni|
  00020	e59f3420	 ldr         r3, [pc, #0x420]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	0a000004	 beq         |$LN6@OALIntrIni|
  00030	e59f0450	 ldr         r0, [pc, #0x450]
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e3a03001	 mov         r3, #1
  0003c	e58d3010	 str         r3, [sp, #0x10]
  00040	ea000001	 b           |$LN7@OALIntrIni|
  00044		 |$LN6@OALIntrIni|
  00044	e3a03000	 mov         r3, #0
  00048	e58d3010	 str         r3, [sp, #0x10]
  0004c		 |$LN7@OALIntrIni|

; 186  : 
; 187  :     // Initialize interrupt mapping
; 188  :     OALIntrMapInit();

  0004c	eb000000	 bl          OALIntrMapInit

; 189  : 
; 190  :     // Get interrupt controller registers virtual uncached addresses
; 191  :     g_pIntcL1Regs = OALPAtoUA(OMAP5912_INTC_L1_REGS_PA);

  00050	e3a01000	 mov         r1, #0
  00054	e3e00b4d	 mvn         r0, #0x4D, 22
  00058	e22000ff	 eor         r0, r0, #0xFF
  0005c	eb000000	 bl          OALPAtoVA
  00060	e58d0014	 str         r0, [sp, #0x14]
  00064	e59d2014	 ldr         r2, [sp, #0x14]
  00068	e59f33fc	 ldr         r3, [pc, #0x3FC]
  0006c	e5832000	 str         r2, [r3]

; 192  :     g_pIntcL2ARegs = OALPAtoUA(OMAP5912_INTC_L2A_REGS_PA);

  00070	e3a01000	 mov         r1, #0
  00074	e3a004ff	 mov         r0, #0xFF, 8
  00078	e38008fe	 orr         r0, r0, #0xFE, 16
  0007c	eb000000	 bl          OALPAtoVA
  00080	e58d0018	 str         r0, [sp, #0x18]
  00084	e59d2018	 ldr         r2, [sp, #0x18]
  00088	e59f33d4	 ldr         r3, [pc, #0x3D4]
  0008c	e5832000	 str         r2, [r3]

; 193  :     g_pIntcL2BRegs = OALPAtoUA(OMAP5912_INTC_L2B_REGS_PA);

  00090	e3a01000	 mov         r1, #0
  00094	e3a00c01	 mov         r0, #1, 24
  00098	e2400802	 sub         r0, r0, #2, 16
  0009c	eb000000	 bl          OALPAtoVA
  000a0	e58d001c	 str         r0, [sp, #0x1C]
  000a4	e59d201c	 ldr         r2, [sp, #0x1C]
  000a8	e59f33ac	 ldr         r3, [pc, #0x3AC]
  000ac	e5832000	 str         r2, [r3]

; 194  :     g_pIntcL2CRegs = OALPAtoUA(OMAP5912_INTC_L2C_REGS_PA);

  000b0	e3a01000	 mov         r1, #0
  000b4	e3a00c02	 mov         r0, #2, 24
  000b8	e2400802	 sub         r0, r0, #2, 16
  000bc	eb000000	 bl          OALPAtoVA
  000c0	e58d0020	 str         r0, [sp, #0x20]
  000c4	e59d2020	 ldr         r2, [sp, #0x20]
  000c8	e59f3384	 ldr         r3, [pc, #0x384]
  000cc	e5832000	 str         r2, [r3]

; 195  :     g_pIntcL2DRegs = OALPAtoUA(OMAP5912_INTC_L2D_REGS_PA);

  000d0	e3a01000	 mov         r1, #0
  000d4	e3e00b7f	 mvn         r0, #0x7F, 22
  000d8	e22000ff	 eor         r0, r0, #0xFF
  000dc	eb000000	 bl          OALPAtoVA
  000e0	e58d0024	 str         r0, [sp, #0x24]
  000e4	e59d2024	 ldr         r2, [sp, #0x24]
  000e8	e59f335c	 ldr         r3, [pc, #0x35C]
  000ec	e5832000	 str         r2, [r3]

; 196  :     g_pGPIO1Regs = OALPAtoUA(OMAP5912_GPIO1_REGS_PA);

  000f0	e3a01000	 mov         r1, #0
  000f4	e3a00b01	 mov         r0, #1, 22
  000f8	e2400a42	 sub         r0, r0, #0x42, 20
  000fc	eb000000	 bl          OALPAtoVA
  00100	e58d0028	 str         r0, [sp, #0x28]
  00104	e59d2028	 ldr         r2, [sp, #0x28]
  00108	e59f3374	 ldr         r3, [pc, #0x374]
  0010c	e5832000	 str         r2, [r3]

; 197  :     g_pGPIO2Regs = OALPAtoUA(OMAP5912_GPIO2_REGS_PA);

  00110	e3a01000	 mov         r1, #0
  00114	e3a00b03	 mov         r0, #3, 22
  00118	e2400a42	 sub         r0, r0, #0x42, 20
  0011c	eb000000	 bl          OALPAtoVA
  00120	e58d002c	 str         r0, [sp, #0x2C]
  00124	e59d202c	 ldr         r2, [sp, #0x2C]
  00128	e59f3350	 ldr         r3, [pc, #0x350]
  0012c	e5832000	 str         r2, [r3]

; 198  :     g_pGPIO3Regs = OALPAtoUA(OMAP5912_GPIO3_REGS_PA);

  00130	e3a01000	 mov         r1, #0
  00134	e3a00b01	 mov         r0, #1, 22
  00138	e2400a45	 sub         r0, r0, #0x45, 20
  0013c	eb000000	 bl          OALPAtoVA
  00140	e58d0030	 str         r0, [sp, #0x30]
  00144	e59d2030	 ldr         r2, [sp, #0x30]
  00148	e59f332c	 ldr         r3, [pc, #0x32C]
  0014c	e5832000	 str         r2, [r3]

; 199  :     g_pGPIO4Regs = OALPAtoUA(OMAP5912_GPIO4_REGS_PA);

  00150	e3a01000	 mov         r1, #0
  00154	e3a00b03	 mov         r0, #3, 22
  00158	e2400a45	 sub         r0, r0, #0x45, 20
  0015c	eb000000	 bl          OALPAtoVA
  00160	e58d0034	 str         r0, [sp, #0x34]
  00164	e59d2034	 ldr         r2, [sp, #0x34]
  00168	e59f3308	 ldr         r3, [pc, #0x308]
  0016c	e5832000	 str         r2, [r3]

; 200  :     g_pMPUIORegs = OALPAtoUA(OMAP5912_ARMIO_REGS_PA);

  00170	e3a01000	 mov         r1, #0
  00174	e2410a4b	 sub         r0, r1, #0x4B, 20
  00178	eb000000	 bl          OALPAtoVA
  0017c	e58d0038	 str         r0, [sp, #0x38]
  00180	e59d2038	 ldr         r2, [sp, #0x38]
  00184	e59f32e8	 ldr         r3, [pc, #0x2E8]
  00188	e5832000	 str         r2, [r3]

; 201  : 
; 202  :     // Disable all interrupts
; 203  :     OUTREG32(&g_pIntcL1Regs->MIR, 0xFFFFFFFF);

  0018c	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00190	e5933000	 ldr         r3, [r3]
  00194	e2832004	 add         r2, r3, #4
  00198	e3e03000	 mvn         r3, #0
  0019c	e5823000	 str         r3, [r2]

; 204  :     OUTREG32(&g_pIntcL2ARegs->MIR, 0xFFFFFFFF);

  001a0	e59f32bc	 ldr         r3, [pc, #0x2BC]
  001a4	e5933000	 ldr         r3, [r3]
  001a8	e2832004	 add         r2, r3, #4
  001ac	e3e03000	 mvn         r3, #0
  001b0	e5823000	 str         r3, [r2]

; 205  :     OUTREG32(&g_pIntcL2BRegs->MIR, 0xFFFFFFFF);

  001b4	e59f32a0	 ldr         r3, [pc, #0x2A0]
  001b8	e5933000	 ldr         r3, [r3]
  001bc	e2832004	 add         r2, r3, #4
  001c0	e3e03000	 mvn         r3, #0
  001c4	e5823000	 str         r3, [r2]

; 206  :     OUTREG32(&g_pIntcL2CRegs->MIR, 0xFFFFFFFF);

  001c8	e59f3284	 ldr         r3, [pc, #0x284]
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e2832004	 add         r2, r3, #4
  001d4	e3e03000	 mvn         r3, #0
  001d8	e5823000	 str         r3, [r2]

; 207  :     OUTREG32(&g_pIntcL2DRegs->MIR, 0xFFFFFFFF);

  001dc	e59f3268	 ldr         r3, [pc, #0x268]
  001e0	e5933000	 ldr         r3, [r3]
  001e4	e2832004	 add         r2, r3, #4
  001e8	e3e03000	 mvn         r3, #0
  001ec	e5823000	 str         r3, [r2]

; 208  :     OUTREG32(&g_pGPIO1Regs->IRQENABLE1, 0);

  001f0	e59f328c	 ldr         r3, [pc, #0x28C]
  001f4	e5933000	 ldr         r3, [r3]
  001f8	e283201c	 add         r2, r3, #0x1C
  001fc	e3a03000	 mov         r3, #0
  00200	e5823000	 str         r3, [r2]

; 209  :     OUTREG32(&g_pGPIO2Regs->IRQENABLE1, 0);

  00204	e59f3274	 ldr         r3, [pc, #0x274]
  00208	e5933000	 ldr         r3, [r3]
  0020c	e283201c	 add         r2, r3, #0x1C
  00210	e3a03000	 mov         r3, #0
  00214	e5823000	 str         r3, [r2]

; 210  :     OUTREG32(&g_pGPIO3Regs->IRQENABLE1, 0);

  00218	e59f325c	 ldr         r3, [pc, #0x25C]
  0021c	e5933000	 ldr         r3, [r3]
  00220	e283201c	 add         r2, r3, #0x1C
  00224	e3a03000	 mov         r3, #0
  00228	e5823000	 str         r3, [r2]

; 211  :     OUTREG32(&g_pGPIO4Regs->IRQENABLE1, 0);

  0022c	e59f3244	 ldr         r3, [pc, #0x244]
  00230	e5933000	 ldr         r3, [r3]
  00234	e283201c	 add         r2, r3, #0x1C
  00238	e3a03000	 mov         r3, #0
  0023c	e5823000	 str         r3, [r2]

; 212  :     OUTREG16(&g_pMPUIORegs->IO_INT_MASK, 0xFFFF);

  00240	e59f322c	 ldr         r3, [pc, #0x22C]
  00244	e5933000	 ldr         r3, [r3]
  00248	e283202c	 add         r2, r3, #0x2C
  0024c	e3a03cff	 mov         r3, #0xFF, 24
  00250	e38330ff	 orr         r3, r3, #0xFF
  00254	e1c230b0	 strh        r3, [r2]

; 213  : 
; 214  :     // Initialize interrupt routing, level and priority
; 215  :     for (i = 0; i < 32; i++) {

  00258	e3a03000	 mov         r3, #0
  0025c	e58d3004	 str         r3, [sp, #4]
  00260	ea000002	 b           |$LN3@OALIntrIni|
  00264		 |$LN2@OALIntrIni|
  00264	e59d3004	 ldr         r3, [sp, #4]
  00268	e2833001	 add         r3, r3, #1
  0026c	e58d3004	 str         r3, [sp, #4]
  00270		 |$LN3@OALIntrIni|
  00270	e59d3004	 ldr         r3, [sp, #4]
  00274	e3530020	 cmp         r3, #0x20
  00278	2a000046	 bcs         |$LN1@OALIntrIni|

; 216  :         OUTREG32(&g_pIntcL1Regs->ILR[i], g_intcL1Level[i]);

  0027c	e59d1004	 ldr         r1, [sp, #4]
  00280	e3a03004	 mov         r3, #4
  00284	e0020391	 mul         r2, r1, r3
  00288	e59f31e0	 ldr         r3, [pc, #0x1E0]
  0028c	e0830002	 add         r0, r3, r2
  00290	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00294	e5933000	 ldr         r3, [r3]
  00298	e283101c	 add         r1, r3, #0x1C
  0029c	e59d2004	 ldr         r2, [sp, #4]
  002a0	e3a03004	 mov         r3, #4
  002a4	e0030392	 mul         r3, r2, r3
  002a8	e0812003	 add         r2, r1, r3
  002ac	e5903000	 ldr         r3, [r0]
  002b0	e5823000	 str         r3, [r2]

; 217  :         OUTREG32(&g_pIntcL2ARegs->ILR[i], g_intcL2ALevel[i]);

  002b4	e59d1004	 ldr         r1, [sp, #4]
  002b8	e3a03004	 mov         r3, #4
  002bc	e0020391	 mul         r2, r1, r3
  002c0	e59f31a0	 ldr         r3, [pc, #0x1A0]
  002c4	e0830002	 add         r0, r3, r2
  002c8	e59f3194	 ldr         r3, [pc, #0x194]
  002cc	e5933000	 ldr         r3, [r3]
  002d0	e283101c	 add         r1, r3, #0x1C
  002d4	e59d2004	 ldr         r2, [sp, #4]
  002d8	e3a03004	 mov         r3, #4
  002dc	e0030392	 mul         r3, r2, r3
  002e0	e0812003	 add         r2, r1, r3
  002e4	e5903000	 ldr         r3, [r0]
  002e8	e5823000	 str         r3, [r2]

; 218  :         OUTREG32(&g_pIntcL2BRegs->ILR[i], g_intcL2BLevel[i]);

  002ec	e59d1004	 ldr         r1, [sp, #4]
  002f0	e3a03004	 mov         r3, #4
  002f4	e0020391	 mul         r2, r1, r3
  002f8	e59f3160	 ldr         r3, [pc, #0x160]
  002fc	e0830002	 add         r0, r3, r2
  00300	e59f3154	 ldr         r3, [pc, #0x154]
  00304	e5933000	 ldr         r3, [r3]
  00308	e283101c	 add         r1, r3, #0x1C
  0030c	e59d2004	 ldr         r2, [sp, #4]
  00310	e3a03004	 mov         r3, #4
  00314	e0030392	 mul         r3, r2, r3
  00318	e0812003	 add         r2, r1, r3
  0031c	e5903000	 ldr         r3, [r0]
  00320	e5823000	 str         r3, [r2]

; 219  :         OUTREG32(&g_pIntcL2CRegs->ILR[i], g_intcL2CLevel[i]);

  00324	e59d1004	 ldr         r1, [sp, #4]
  00328	e3a03004	 mov         r3, #4
  0032c	e0020391	 mul         r2, r1, r3
  00330	e59f3120	 ldr         r3, [pc, #0x120]
  00334	e0830002	 add         r0, r3, r2
  00338	e59f3114	 ldr         r3, [pc, #0x114]
  0033c	e5933000	 ldr         r3, [r3]
  00340	e283101c	 add         r1, r3, #0x1C
  00344	e59d2004	 ldr         r2, [sp, #4]
  00348	e3a03004	 mov         r3, #4
  0034c	e0030392	 mul         r3, r2, r3
  00350	e0812003	 add         r2, r1, r3
  00354	e5903000	 ldr         r3, [r0]
  00358	e5823000	 str         r3, [r2]

; 220  :         OUTREG32(&g_pIntcL2DRegs->ILR[i], g_intcL2DLevel[i]);

  0035c	e59d1004	 ldr         r1, [sp, #4]
  00360	e3a03004	 mov         r3, #4
  00364	e0020391	 mul         r2, r1, r3
  00368	e59f30e0	 ldr         r3, [pc, #0xE0]
  0036c	e0830002	 add         r0, r3, r2
  00370	e59f30d4	 ldr         r3, [pc, #0xD4]
  00374	e5933000	 ldr         r3, [r3]
  00378	e283101c	 add         r1, r3, #0x1C
  0037c	e59d2004	 ldr         r2, [sp, #4]
  00380	e3a03004	 mov         r3, #4
  00384	e0030392	 mul         r3, r2, r3
  00388	e0812003	 add         r2, r1, r3
  0038c	e5903000	 ldr         r3, [r0]
  00390	e5823000	 str         r3, [r2]

; 221  :     }

  00394	eaffffb2	 b           |$LN2@OALIntrIni|
  00398		 |$LN1@OALIntrIni|

; 222  : 
; 223  :     // Enable interrupts from L2 controllers
; 224  :     irq = IRQ_L2FIQ; OALIntrEnableIrqs(1, &irq);

  00398	e3a03002	 mov         r3, #2
  0039c	e58d3008	 str         r3, [sp, #8]
  003a0	e28d1008	 add         r1, sp, #8
  003a4	e3a00001	 mov         r0, #1
  003a8	eb000000	 bl          OALIntrEnableIrqs

; 225  :     irq = IRQ_L2IRQ; OALIntrEnableIrqs(1, &irq);

  003ac	e3a03000	 mov         r3, #0
  003b0	e58d3008	 str         r3, [sp, #8]
  003b4	e28d1008	 add         r1, sp, #8
  003b8	e3a00001	 mov         r0, #1
  003bc	eb000000	 bl          OALIntrEnableIrqs

; 226  : 
; 227  :     // Add static mapping for RTC alarm
; 228  :     OALIntrStaticTranslate(SYSINTR_RTC_ALARM, IRQ_RTC_ALARM);

  003c0	e3a0103a	 mov         r1, #0x3A
  003c4	e3a0000d	 mov         r0, #0xD
  003c8	eb000000	 bl          OALIntrStaticTranslate

; 229  : 
; 230  :     // And enable it (it will not occur until it is set in OEMSetAlarmTime)
; 231  :     OEMInterruptEnable(SYSINTR_RTC_ALARM, NULL, 0);

  003cc	e3a02000	 mov         r2, #0
  003d0	e3a01000	 mov         r1, #0
  003d4	e3a0000d	 mov         r0, #0xD
  003d8	eb000000	 bl          OEMInterruptEnable

; 232  : 
; 233  :     // Call board specific initialization
; 234  :     rc = BSPIntrInit();

  003dc	eb000000	 bl          BSPIntrInit
  003e0	e58d003c	 str         r0, [sp, #0x3C]
  003e4	e59d303c	 ldr         r3, [sp, #0x3C]
  003e8	e58d3000	 str         r3, [sp]

; 235  : 
; 236  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALInterruptInit(rc = %d)\r\n", rc));

  003ec	e59f3054	 ldr         r3, [pc, #0x54]
  003f0	e5933440	 ldr         r3, [r3, #0x440]
  003f4	e3130901	 tst         r3, #1, 18
  003f8	0a000009	 beq         |$LN8@OALIntrIni|
  003fc	e59f3044	 ldr         r3, [pc, #0x44]
  00400	e5933440	 ldr         r3, [r3, #0x440]
  00404	e3130004	 tst         r3, #4
  00408	0a000005	 beq         |$LN8@OALIntrIni|
  0040c	e59d1000	 ldr         r1, [sp]
  00410	e59f002c	 ldr         r0, [pc, #0x2C]
  00414	eb000000	 bl          NKDbgPrintfW
  00418	e3a03001	 mov         r3, #1
  0041c	e58d3040	 str         r3, [sp, #0x40]
  00420	ea000001	 b           |$LN9@OALIntrIni|
  00424		 |$LN8@OALIntrIni|
  00424	e3a03000	 mov         r3, #0
  00428	e58d3040	 str         r3, [sp, #0x40]
  0042c		 |$LN9@OALIntrIni|

; 237  :     return rc;

  0042c	e59d3000	 ldr         r3, [sp]
  00430	e58d300c	 str         r3, [sp, #0xC]

; 238  : }

  00434	e59d000c	 ldr         r0, [sp, #0xC]
  00438	e28dd044	 add         sp, sp, #0x44
  0043c	e49de004	 ldr         lr, [sp], #4
  00440	e12fff1e	 bx          lr
  00444		 |$LN13@OALIntrIni|
  00444		 |$LN14@OALIntrIni|
  00444	00000000	 DCD         |??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00448		 |$LN15@OALIntrIni|
  00448	00000000	 DCD         |dpCurSettings|
  0044c		 |$LN16@OALIntrIni|
  0044c	00000000	 DCD         |g_pIntcL2DRegs|
  00450		 |$LN17@OALIntrIni|
  00450	00000000	 DCD         |g_intcL2DLevel|
  00454		 |$LN18@OALIntrIni|
  00454	00000000	 DCD         |g_pIntcL2CRegs|
  00458		 |$LN19@OALIntrIni|
  00458	00000000	 DCD         |g_intcL2CLevel|
  0045c		 |$LN20@OALIntrIni|
  0045c	00000000	 DCD         |g_pIntcL2BRegs|
  00460		 |$LN21@OALIntrIni|
  00460	00000000	 DCD         |g_intcL2BLevel|
  00464		 |$LN22@OALIntrIni|
  00464	00000000	 DCD         |g_pIntcL2ARegs|
  00468		 |$LN23@OALIntrIni|
  00468	00000000	 DCD         |g_intcL2ALevel|
  0046c		 |$LN24@OALIntrIni|
  0046c	00000000	 DCD         |g_pIntcL1Regs|
  00470		 |$LN25@OALIntrIni|
  00470	00000000	 DCD         |g_intcL1Level|
  00474		 |$LN26@OALIntrIni|
  00474	00000000	 DCD         |g_pMPUIORegs|
  00478		 |$LN27@OALIntrIni|
  00478	00000000	 DCD         |g_pGPIO4Regs|
  0047c		 |$LN28@OALIntrIni|
  0047c	00000000	 DCD         |g_pGPIO3Regs|
  00480		 |$LN29@OALIntrIni|
  00480	00000000	 DCD         |g_pGPIO2Regs|
  00484		 |$LN30@OALIntrIni|
  00484	00000000	 DCD         |g_pGPIO1Regs|
  00488		 |$LN31@OALIntrIni|
  00488	00000000	 DCD         |??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0048c		 |$M44341|

			 ENDP  ; |OALIntrInit|

	EXPORT	|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|OALIntrRequestIrqs|
	IMPORT	|BSPIntrRequestIrqs|

  00008			 AREA	 |.pdata|, PDATA
|$T44376| DCD	|$LN17@OALIntrReq|
	DCD	0x40006204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, "-", 0x0, ">", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0048c			 AREA	 |.text|, CODE, ARM

  0048c		 |OALIntrRequestIrqs| PROC

; 248  : {

  0048c		 |$LN17@OALIntrReq|
  0048c	e1a0c00d	 mov         r12, sp
  00490	e92d0007	 stmdb       sp!, {r0 - r2}
  00494	e92d5000	 stmdb       sp!, {r12, lr}
  00498	e24dd034	 sub         sp, sp, #0x34
  0049c		 |$M44373|

; 249  :     BOOL rc = FALSE;

  0049c	e3a03000	 mov         r3, #0
  004a0	e58d3010	 str         r3, [sp, #0x10]

; 250  : 
; 251  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 252  :         L"+OALIntrRequestIrqs(0x%08x->%d/%d/0x%08x/%d, 0x%08x, 0x%08x)\r\n",
; 253  :         pDevLoc, pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc,
; 254  :         pDevLoc->Pin, pCount, pIrqs
; 255  :     ));

  004a4	e59f3160	 ldr         r3, [pc, #0x160]
  004a8	e5933440	 ldr         r3, [r3, #0x440]
  004ac	e3130901	 tst         r3, #1, 18
  004b0	0a00001a	 beq         |$LN11@OALIntrReq|
  004b4	e59f3150	 ldr         r3, [pc, #0x150]
  004b8	e5933440	 ldr         r3, [r3, #0x440]
  004bc	e3130004	 tst         r3, #4
  004c0	0a000016	 beq         |$LN11@OALIntrReq|
  004c4	e59d3044	 ldr         r3, [sp, #0x44]
  004c8	e58d300c	 str         r3, [sp, #0xC]
  004cc	e59d3040	 ldr         r3, [sp, #0x40]
  004d0	e58d3008	 str         r3, [sp, #8]
  004d4	e59d303c	 ldr         r3, [sp, #0x3C]
  004d8	e2833010	 add         r3, r3, #0x10
  004dc	e5933000	 ldr         r3, [r3]
  004e0	e58d3004	 str         r3, [sp, #4]
  004e4	e59d303c	 ldr         r3, [sp, #0x3C]
  004e8	e2833008	 add         r3, r3, #8
  004ec	e5933000	 ldr         r3, [r3]
  004f0	e58d3000	 str         r3, [sp]
  004f4	e59d303c	 ldr         r3, [sp, #0x3C]
  004f8	e2833004	 add         r3, r3, #4
  004fc	e5933000	 ldr         r3, [r3]
  00500	e59d203c	 ldr         r2, [sp, #0x3C]
  00504	e5922000	 ldr         r2, [r2]
  00508	e59d103c	 ldr         r1, [sp, #0x3C]
  0050c	e59f00fc	 ldr         r0, [pc, #0xFC]
  00510	eb000000	 bl          NKDbgPrintfW
  00514	e3a03001	 mov         r3, #1
  00518	e58d3028	 str         r3, [sp, #0x28]
  0051c	ea000001	 b           |$LN12@OALIntrReq|
  00520		 |$LN11@OALIntrReq|
  00520	e3a03000	 mov         r3, #0
  00524	e58d3028	 str         r3, [sp, #0x28]
  00528		 |$LN12@OALIntrReq|

; 256  : 
; 257  :     // This shouldn't happen
; 258  :     if (*pCount < 1) goto cleanUp;

  00528	e59d3040	 ldr         r3, [sp, #0x40]
  0052c	e5933000	 ldr         r3, [r3]
  00530	e3530001	 cmp         r3, #1
  00534	2a000000	 bcs         |$LN8@OALIntrReq|
  00538	ea00001c	 b           |$cleanUp$43970|
  0053c		 |$LN8@OALIntrReq|

; 259  : 
; 260  :     switch (pDevLoc->IfcType) {

  0053c	e59d303c	 ldr         r3, [sp, #0x3C]
  00540	e5933000	 ldr         r3, [r3]
  00544	e3530000	 cmp         r3, #0
  00548	0a000000	 beq         |$LN5@OALIntrReq|
  0054c	ea00000d	 b           |$LN6@OALIntrReq|
  00550		 |$LN5@OALIntrReq|

; 261  :     case Internal:
; 262  :         switch ((ULONG)pDevLoc->LogicalLoc) {

  00550	e59d303c	 ldr         r3, [sp, #0x3C]
  00554	e2833008	 add         r3, r3, #8
  00558	e5933000	 ldr         r3, [r3]
  0055c	e3730913	 cmn         r3, #0x13, 18
  00560	0a000000	 beq         |$LN2@OALIntrReq|
  00564	ea000007	 b           |$LN3@OALIntrReq|
  00568		 |$LN2@OALIntrReq|

; 263  :         case OMAP5912_USBD_REGS_PA:
; 264  :             *pCount = 1;

  00568	e59d2040	 ldr         r2, [sp, #0x40]
  0056c	e3a03001	 mov         r3, #1
  00570	e5823000	 str         r3, [r2]

; 265  :             pIrqs[0] = IRQ_USB;

  00574	e59d2044	 ldr         r2, [sp, #0x44]
  00578	e3a0303e	 mov         r3, #0x3E
  0057c	e5823000	 str         r3, [r2]

; 266  :             rc = TRUE;

  00580	e3a03001	 mov         r3, #1
  00584	e58d3010	 str         r3, [sp, #0x10]
  00588		 |$LN3@OALIntrReq|
  00588		 |$LN6@OALIntrReq|

; 267  :             break;
; 268  :         }
; 269  :         break;
; 270  :     }
; 271  :             
; 272  : #ifdef OAL_BSP_CALLBACKS
; 273  :     if (!rc) rc = BSPIntrRequestIrqs(pDevLoc, pCount, pIrqs);

  00588	e59d3010	 ldr         r3, [sp, #0x10]
  0058c	e3530000	 cmp         r3, #0
  00590	1a000006	 bne         |$LN1@OALIntrReq|
  00594	e59d2044	 ldr         r2, [sp, #0x44]
  00598	e59d1040	 ldr         r1, [sp, #0x40]
  0059c	e59d003c	 ldr         r0, [sp, #0x3C]
  005a0	eb000000	 bl          BSPIntrRequestIrqs
  005a4	e58d002c	 str         r0, [sp, #0x2C]
  005a8	e59d302c	 ldr         r3, [sp, #0x2C]
  005ac	e58d3010	 str         r3, [sp, #0x10]
  005b0		 |$LN1@OALIntrReq|
  005b0		 |$cleanUp$43970|

; 274  : #endif
; 275  : 
; 276  : cleanUp:
; 277  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrRequestIrqs(rc = %d)\r\n", rc));

  005b0	e59f3054	 ldr         r3, [pc, #0x54]
  005b4	e5933440	 ldr         r3, [r3, #0x440]
  005b8	e3130901	 tst         r3, #1, 18
  005bc	0a000009	 beq         |$LN13@OALIntrReq|
  005c0	e59f3044	 ldr         r3, [pc, #0x44]
  005c4	e5933440	 ldr         r3, [r3, #0x440]
  005c8	e3130004	 tst         r3, #4
  005cc	0a000005	 beq         |$LN13@OALIntrReq|
  005d0	e59d1010	 ldr         r1, [sp, #0x10]
  005d4	e59f002c	 ldr         r0, [pc, #0x2C]
  005d8	eb000000	 bl          NKDbgPrintfW
  005dc	e3a03001	 mov         r3, #1
  005e0	e58d3030	 str         r3, [sp, #0x30]
  005e4	ea000001	 b           |$LN14@OALIntrReq|
  005e8		 |$LN13@OALIntrReq|
  005e8	e3a03000	 mov         r3, #0
  005ec	e58d3030	 str         r3, [sp, #0x30]
  005f0		 |$LN14@OALIntrReq|

; 278  :     return rc;

  005f0	e59d3010	 ldr         r3, [sp, #0x10]
  005f4	e58d3024	 str         r3, [sp, #0x24]

; 279  : }

  005f8	e59d0024	 ldr         r0, [sp, #0x24]
  005fc	e28dd034	 add         sp, sp, #0x34
  00600	e89d6000	 ldmia       sp, {sp, lr}
  00604	e12fff1e	 bx          lr
  00608		 |$LN18@OALIntrReq|
  00608		 |$LN19@OALIntrReq|
  00608	00000000	 DCD         |??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0060c		 |$LN20@OALIntrReq|
  0060c	00000000	 DCD         |dpCurSettings|
  00610		 |$LN21@OALIntrReq|
  00610	00000000	 DCD         |??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@|
  00614		 |$M44374|

			 ENDP  ; |OALIntrRequestIrqs|

	EXPORT	|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00010			 AREA	 |.pdata|, PDATA
|$T44390| DCD	|$LN33@OALIntrEna|
	DCD	0x40013504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00614			 AREA	 |.text|, CODE, ARM

  00614		 |OALIntrEnableIrqs| PROC

; 286  : {

  00614		 |$LN33@OALIntrEna|
  00614	e1a0c00d	 mov         r12, sp
  00618	e92d0003	 stmdb       sp!, {r0, r1}
  0061c	e92d5000	 stmdb       sp!, {r12, lr}
  00620	e24dd018	 sub         sp, sp, #0x18
  00624		 |$M44387|

; 287  :     BOOL rc = TRUE;

  00624	e3a03001	 mov         r3, #1
  00628	e58d3000	 str         r3, [sp]

; 288  :     UINT32 irq, i;
; 289  : 
; 290  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 291  :         L"+OALntrEnableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 292  :     ));

  0062c	e59f3484	 ldr         r3, [pc, #0x484]
  00630	e5933440	 ldr         r3, [r3, #0x440]
  00634	e3130901	 tst         r3, #1, 18
  00638	0a00000a	 beq         |$LN27@OALIntrEna|
  0063c	e59f3474	 ldr         r3, [pc, #0x474]
  00640	e5933440	 ldr         r3, [r3, #0x440]
  00644	e3130902	 tst         r3, #2, 18
  00648	0a000006	 beq         |$LN27@OALIntrEna|
  0064c	e59d2024	 ldr         r2, [sp, #0x24]
  00650	e59d1020	 ldr         r1, [sp, #0x20]
  00654	e59f0488	 ldr         r0, [pc, #0x488]
  00658	eb000000	 bl          NKDbgPrintfW
  0065c	e3a03001	 mov         r3, #1
  00660	e58d3010	 str         r3, [sp, #0x10]
  00664	ea000001	 b           |$LN28@OALIntrEna|
  00668		 |$LN27@OALIntrEna|
  00668	e3a03000	 mov         r3, #0
  0066c	e58d3010	 str         r3, [sp, #0x10]
  00670		 |$LN28@OALIntrEna|

; 293  : 
; 294  :     for (i = 0; i < count; i++) {

  00670	e3a03000	 mov         r3, #0
  00674	e58d3004	 str         r3, [sp, #4]
  00678	ea000002	 b           |$LN24@OALIntrEna|
  0067c		 |$LN23@OALIntrEna|
  0067c	e59d3004	 ldr         r3, [sp, #4]
  00680	e2833001	 add         r3, r3, #1
  00684	e58d3004	 str         r3, [sp, #4]
  00688		 |$LN24@OALIntrEna|
  00688	e59d2004	 ldr         r2, [sp, #4]
  0068c	e59d3020	 ldr         r3, [sp, #0x20]
  00690	e1520003	 cmp         r2, r3
  00694	2a0000f0	 bcs         |$LN22@OALIntrEna|

; 295  :         irq = pIrqs[i];

  00698	e59d1004	 ldr         r1, [sp, #4]
  0069c	e3a03004	 mov         r3, #4
  006a0	e0020391	 mul         r2, r1, r3
  006a4	e59d3024	 ldr         r3, [sp, #0x24]
  006a8	e0833002	 add         r3, r3, r2
  006ac	e5933000	 ldr         r3, [r3]
  006b0	e58d3008	 str         r3, [sp, #8]

; 296  :         if (irq < 32) {

  006b4	e59d3008	 ldr         r3, [sp, #8]
  006b8	e3530020	 cmp         r3, #0x20
  006bc	2a00000d	 bcs         |$LN21@OALIntrEna|

; 297  :             CLRREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  006c0	e59f3410	 ldr         r3, [pc, #0x410]
  006c4	e5933000	 ldr         r3, [r3]
  006c8	e2831004	 add         r1, r3, #4
  006cc	e59d2008	 ldr         r2, [sp, #8]
  006d0	e3a03001	 mov         r3, #1
  006d4	e1a03213	 mov         r3, r3, lsl r2
  006d8	e1e02003	 mvn         r2, r3
  006dc	e5913000	 ldr         r3, [r1]
  006e0	e0032002	 and         r2, r3, r2
  006e4	e59f33ec	 ldr         r3, [pc, #0x3EC]
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e2833004	 add         r3, r3, #4
  006f0	e5832000	 str         r2, [r3]
  006f4	ea0000d7	 b           |$LN20@OALIntrEna|
  006f8		 |$LN21@OALIntrEna|

; 298  :         } else if (irq < 64) {

  006f8	e59d3008	 ldr         r3, [sp, #8]
  006fc	e3530040	 cmp         r3, #0x40
  00700	2a00000e	 bcs         |$LN19@OALIntrEna|

; 299  :             CLRREG32(&g_pIntcL2ARegs->MIR, 1 << (irq - 32));

  00704	e59f33b4	 ldr         r3, [pc, #0x3B4]
  00708	e5933000	 ldr         r3, [r3]
  0070c	e2831004	 add         r1, r3, #4
  00710	e59d3008	 ldr         r3, [sp, #8]
  00714	e2432020	 sub         r2, r3, #0x20
  00718	e3a03001	 mov         r3, #1
  0071c	e1a03213	 mov         r3, r3, lsl r2
  00720	e1e02003	 mvn         r2, r3
  00724	e5913000	 ldr         r3, [r1]
  00728	e0032002	 and         r2, r3, r2
  0072c	e59f338c	 ldr         r3, [pc, #0x38C]
  00730	e5933000	 ldr         r3, [r3]
  00734	e2833004	 add         r3, r3, #4
  00738	e5832000	 str         r2, [r3]
  0073c	ea0000c5	 b           |$LN18@OALIntrEna|
  00740		 |$LN19@OALIntrEna|

; 300  :         } else if (irq < 96) {

  00740	e59d3008	 ldr         r3, [sp, #8]
  00744	e3530060	 cmp         r3, #0x60
  00748	2a00000e	 bcs         |$LN17@OALIntrEna|

; 301  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (irq - 64));

  0074c	e59f3374	 ldr         r3, [pc, #0x374]
  00750	e5933000	 ldr         r3, [r3]
  00754	e2831004	 add         r1, r3, #4
  00758	e59d3008	 ldr         r3, [sp, #8]
  0075c	e2432040	 sub         r2, r3, #0x40
  00760	e3a03001	 mov         r3, #1
  00764	e1a03213	 mov         r3, r3, lsl r2
  00768	e1e02003	 mvn         r2, r3
  0076c	e5913000	 ldr         r3, [r1]
  00770	e0032002	 and         r2, r3, r2
  00774	e59f334c	 ldr         r3, [pc, #0x34C]
  00778	e5933000	 ldr         r3, [r3]
  0077c	e2833004	 add         r3, r3, #4
  00780	e5832000	 str         r2, [r3]
  00784	ea0000b3	 b           |$LN16@OALIntrEna|
  00788		 |$LN17@OALIntrEna|

; 302  :         } else if (irq < 128) {

  00788	e59d3008	 ldr         r3, [sp, #8]
  0078c	e3530080	 cmp         r3, #0x80
  00790	2a00000e	 bcs         |$LN15@OALIntrEna|

; 303  :             CLRREG32(&g_pIntcL2CRegs->MIR, 1 << (irq - 96));

  00794	e59f3344	 ldr         r3, [pc, #0x344]
  00798	e5933000	 ldr         r3, [r3]
  0079c	e2831004	 add         r1, r3, #4
  007a0	e59d3008	 ldr         r3, [sp, #8]
  007a4	e2432060	 sub         r2, r3, #0x60
  007a8	e3a03001	 mov         r3, #1
  007ac	e1a03213	 mov         r3, r3, lsl r2
  007b0	e1e02003	 mvn         r2, r3
  007b4	e5913000	 ldr         r3, [r1]
  007b8	e0032002	 and         r2, r3, r2
  007bc	e59f331c	 ldr         r3, [pc, #0x31C]
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e2833004	 add         r3, r3, #4
  007c8	e5832000	 str         r2, [r3]
  007cc	ea0000a1	 b           |$LN14@OALIntrEna|
  007d0		 |$LN15@OALIntrEna|

; 304  :         } else if (irq < 160) {

  007d0	e59d3008	 ldr         r3, [sp, #8]
  007d4	e35300a0	 cmp         r3, #0xA0
  007d8	2a00000e	 bcs         |$LN13@OALIntrEna|

; 305  :             CLRREG32(&g_pIntcL2DRegs->MIR, 1 << (irq - 128));

  007dc	e59f32f8	 ldr         r3, [pc, #0x2F8]
  007e0	e5933000	 ldr         r3, [r3]
  007e4	e2831004	 add         r1, r3, #4
  007e8	e59d3008	 ldr         r3, [sp, #8]
  007ec	e2432080	 sub         r2, r3, #0x80
  007f0	e3a03001	 mov         r3, #1
  007f4	e1a03213	 mov         r3, r3, lsl r2
  007f8	e1e02003	 mvn         r2, r3
  007fc	e5913000	 ldr         r3, [r1]
  00800	e0032002	 and         r2, r3, r2
  00804	e59f32d0	 ldr         r3, [pc, #0x2D0]
  00808	e5933000	 ldr         r3, [r3]
  0080c	e2833004	 add         r3, r3, #4
  00810	e5832000	 str         r2, [r3]
  00814	ea00008f	 b           |$LN12@OALIntrEna|
  00818		 |$LN13@OALIntrEna|

; 306  :         } else if (irq < IRQ_GPIO_16) {

  00818	e59d3008	 ldr         r3, [sp, #8]
  0081c	e35300b0	 cmp         r3, #0xB0
  00820	2a000017	 bcs         |$LN11@OALIntrEna|

; 307  :             CLRREG32(&g_pIntcL1Regs->MIR, 1 << IRQ_GPIO1);

  00824	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00828	e5933000	 ldr         r3, [r3]
  0082c	e2833004	 add         r3, r3, #4
  00830	e5932000	 ldr         r2, [r3]
  00834	e3e03901	 mvn         r3, #1, 18
  00838	e0022003	 and         r2, r2, r3
  0083c	e59f3294	 ldr         r3, [pc, #0x294]
  00840	e5933000	 ldr         r3, [r3]
  00844	e2833004	 add         r3, r3, #4
  00848	e5832000	 str         r2, [r3]

; 308  :             SETREG32(&g_pGPIO1Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_0));

  0084c	e59f3280	 ldr         r3, [pc, #0x280]
  00850	e5933000	 ldr         r3, [r3]
  00854	e283101c	 add         r1, r3, #0x1C
  00858	e59d3008	 ldr         r3, [sp, #8]
  0085c	e24320a0	 sub         r2, r3, #0xA0
  00860	e3a03001	 mov         r3, #1
  00864	e1a02213	 mov         r2, r3, lsl r2
  00868	e5913000	 ldr         r3, [r1]
  0086c	e1832002	 orr         r2, r3, r2
  00870	e59f325c	 ldr         r3, [pc, #0x25C]
  00874	e5933000	 ldr         r3, [r3]
  00878	e283301c	 add         r3, r3, #0x1C
  0087c	e5832000	 str         r2, [r3]
  00880	ea000074	 b           |$LN10@OALIntrEna|
  00884		 |$LN11@OALIntrEna|

; 309  :         } else if (irq < IRQ_GPIO_32) {

  00884	e59d3008	 ldr         r3, [sp, #8]
  00888	e35300c0	 cmp         r3, #0xC0
  0088c	2a000017	 bcs         |$LN9@OALIntrEna|

; 310  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (IRQ_GPIO2-64));

  00890	e59f3230	 ldr         r3, [pc, #0x230]
  00894	e5933000	 ldr         r3, [r3]
  00898	e2833004	 add         r3, r3, #4
  0089c	e5932000	 ldr         r2, [r3]
  008a0	e3e03c01	 mvn         r3, #1, 24
  008a4	e0022003	 and         r2, r2, r3
  008a8	e59f3218	 ldr         r3, [pc, #0x218]
  008ac	e5933000	 ldr         r3, [r3]
  008b0	e2833004	 add         r3, r3, #4
  008b4	e5832000	 str         r2, [r3]

; 311  :             SETREG32(&g_pGPIO2Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_16));

  008b8	e59f3210	 ldr         r3, [pc, #0x210]
  008bc	e5933000	 ldr         r3, [r3]
  008c0	e283101c	 add         r1, r3, #0x1C
  008c4	e59d3008	 ldr         r3, [sp, #8]
  008c8	e24320b0	 sub         r2, r3, #0xB0
  008cc	e3a03001	 mov         r3, #1
  008d0	e1a02213	 mov         r2, r3, lsl r2
  008d4	e5913000	 ldr         r3, [r1]
  008d8	e1832002	 orr         r2, r3, r2
  008dc	e59f31ec	 ldr         r3, [pc, #0x1EC]
  008e0	e5933000	 ldr         r3, [r3]
  008e4	e283301c	 add         r3, r3, #0x1C
  008e8	e5832000	 str         r2, [r3]
  008ec	ea000059	 b           |$LN8@OALIntrEna|
  008f0		 |$LN9@OALIntrEna|

; 312  :         } else if (irq < IRQ_GPIO_48) {

  008f0	e59d3008	 ldr         r3, [sp, #8]
  008f4	e35300d0	 cmp         r3, #0xD0
  008f8	2a000017	 bcs         |$LN7@OALIntrEna|

; 313  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (IRQ_GPIO3-64));

  008fc	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00900	e5933000	 ldr         r3, [r3]
  00904	e2833004	 add         r3, r3, #4
  00908	e5932000	 ldr         r2, [r3]
  0090c	e3e03c02	 mvn         r3, #2, 24
  00910	e0022003	 and         r2, r2, r3
  00914	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00918	e5933000	 ldr         r3, [r3]
  0091c	e2833004	 add         r3, r3, #4
  00920	e5832000	 str         r2, [r3]

; 314  :             SETREG32(&g_pGPIO3Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_32));

  00924	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00928	e5933000	 ldr         r3, [r3]
  0092c	e283101c	 add         r1, r3, #0x1C
  00930	e59d3008	 ldr         r3, [sp, #8]
  00934	e24320c0	 sub         r2, r3, #0xC0
  00938	e3a03001	 mov         r3, #1
  0093c	e1a02213	 mov         r2, r3, lsl r2
  00940	e5913000	 ldr         r3, [r1]
  00944	e1832002	 orr         r2, r3, r2
  00948	e59f317c	 ldr         r3, [pc, #0x17C]
  0094c	e5933000	 ldr         r3, [r3]
  00950	e283301c	 add         r3, r3, #0x1C
  00954	e5832000	 str         r2, [r3]
  00958	ea00003e	 b           |$LN6@OALIntrEna|
  0095c		 |$LN7@OALIntrEna|

; 315  :         } else if (irq < IRQ_MPUIO_0) {

  0095c	e59d3008	 ldr         r3, [sp, #8]
  00960	e35300e0	 cmp         r3, #0xE0
  00964	2a000017	 bcs         |$LN5@OALIntrEna|

; 316  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (IRQ_GPIO4-64));

  00968	e59f3158	 ldr         r3, [pc, #0x158]
  0096c	e5933000	 ldr         r3, [r3]
  00970	e2833004	 add         r3, r3, #4
  00974	e5932000	 ldr         r2, [r3]
  00978	e3e03801	 mvn         r3, #1, 16
  0097c	e0022003	 and         r2, r2, r3
  00980	e59f3140	 ldr         r3, [pc, #0x140]
  00984	e5933000	 ldr         r3, [r3]
  00988	e2833004	 add         r3, r3, #4
  0098c	e5832000	 str         r2, [r3]

; 317  :             SETREG32(&g_pGPIO4Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_48));

  00990	e59f312c	 ldr         r3, [pc, #0x12C]
  00994	e5933000	 ldr         r3, [r3]
  00998	e283101c	 add         r1, r3, #0x1C
  0099c	e59d3008	 ldr         r3, [sp, #8]
  009a0	e24320d0	 sub         r2, r3, #0xD0
  009a4	e3a03001	 mov         r3, #1
  009a8	e1a02213	 mov         r2, r3, lsl r2
  009ac	e5913000	 ldr         r3, [r1]
  009b0	e1832002	 orr         r2, r3, r2
  009b4	e59f3108	 ldr         r3, [pc, #0x108]
  009b8	e5933000	 ldr         r3, [r3]
  009bc	e283301c	 add         r3, r3, #0x1C
  009c0	e5832000	 str         r2, [r3]
  009c4	ea000023	 b           |$LN4@OALIntrEna|
  009c8		 |$LN5@OALIntrEna|

; 318  :         } else if (irq < OMAP5912_IRQ_MAXIMUM) {

  009c8	e59d3008	 ldr         r3, [sp, #8]
  009cc	e35300f0	 cmp         r3, #0xF0
  009d0	2a00001b	 bcs         |$LN3@OALIntrEna|

; 319  :             CLRREG32(&g_pIntcL2ARegs->MIR, 1 << (IRQ_MPUIO-32));

  009d4	e59f30e4	 ldr         r3, [pc, #0xE4]
  009d8	e5933000	 ldr         r3, [r3]
  009dc	e2833004	 add         r3, r3, #4
  009e0	e5932000	 ldr         r2, [r3]
  009e4	e3e03020	 mvn         r3, #0x20
  009e8	e0022003	 and         r2, r2, r3
  009ec	e59f30cc	 ldr         r3, [pc, #0xCC]
  009f0	e5933000	 ldr         r3, [r3]
  009f4	e2833004	 add         r3, r3, #4
  009f8	e5832000	 str         r2, [r3]

; 320  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  009fc	e59f30b8	 ldr         r3, [pc, #0xB8]
  00a00	e5933000	 ldr         r3, [r3]
  00a04	e283302c	 add         r3, r3, #0x2C
  00a08	e1d330b0	 ldrh        r3, [r3]
  00a0c	e1a01003	 mov         r1, r3
  00a10	e59d3008	 ldr         r3, [sp, #8]
  00a14	e24320e0	 sub         r2, r3, #0xE0
  00a18	e3a03001	 mov         r3, #1
  00a1c	e1a03213	 mov         r3, r3, lsl r2
  00a20	e1e03003	 mvn         r3, r3
  00a24	e0013003	 and         r3, r1, r3
  00a28	e1a02803	 mov         r2, r3, lsl #16
  00a2c	e1a02822	 mov         r2, r2, lsr #16
  00a30	e59f3084	 ldr         r3, [pc, #0x84]
  00a34	e5933000	 ldr         r3, [r3]
  00a38	e283302c	 add         r3, r3, #0x2C
  00a3c	e1c320b0	 strh        r2, [r3]
  00a40	ea000004	 b           |$LN2@OALIntrEna|
  00a44		 |$LN3@OALIntrEna|

; 321  :         } else if (irq != OAL_INTR_IRQ_UNDEFINED) {

  00a44	e59d3008	 ldr         r3, [sp, #8]
  00a48	e3730001	 cmn         r3, #1
  00a4c	0a000001	 beq         |$LN1@OALIntrEna|

; 322  :             rc = FALSE;

  00a50	e3a03000	 mov         r3, #0
  00a54	e58d3000	 str         r3, [sp]
  00a58		 |$LN1@OALIntrEna|
  00a58		 |$LN2@OALIntrEna|
  00a58		 |$LN4@OALIntrEna|
  00a58		 |$LN6@OALIntrEna|
  00a58		 |$LN8@OALIntrEna|
  00a58		 |$LN10@OALIntrEna|
  00a58		 |$LN12@OALIntrEna|
  00a58		 |$LN14@OALIntrEna|
  00a58		 |$LN16@OALIntrEna|
  00a58		 |$LN18@OALIntrEna|
  00a58		 |$LN20@OALIntrEna|

; 323  :         }
; 324  :     }

  00a58	eaffff07	 b           |$LN23@OALIntrEna|
  00a5c		 |$LN22@OALIntrEna|

; 325  : 
; 326  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrEnableIrqs(rc = %d)\r\n", rc));

  00a5c	e59f3054	 ldr         r3, [pc, #0x54]
  00a60	e5933440	 ldr         r3, [r3, #0x440]
  00a64	e3130901	 tst         r3, #1, 18
  00a68	0a000009	 beq         |$LN29@OALIntrEna|
  00a6c	e59f3044	 ldr         r3, [pc, #0x44]
  00a70	e5933440	 ldr         r3, [r3, #0x440]
  00a74	e3130902	 tst         r3, #2, 18
  00a78	0a000005	 beq         |$LN29@OALIntrEna|
  00a7c	e59d1000	 ldr         r1, [sp]
  00a80	e59f002c	 ldr         r0, [pc, #0x2C]
  00a84	eb000000	 bl          NKDbgPrintfW
  00a88	e3a03001	 mov         r3, #1
  00a8c	e58d3014	 str         r3, [sp, #0x14]
  00a90	ea000001	 b           |$LN30@OALIntrEna|
  00a94		 |$LN29@OALIntrEna|
  00a94	e3a03000	 mov         r3, #0
  00a98	e58d3014	 str         r3, [sp, #0x14]
  00a9c		 |$LN30@OALIntrEna|

; 327  :     return rc;

  00a9c	e59d3000	 ldr         r3, [sp]
  00aa0	e58d300c	 str         r3, [sp, #0xC]

; 328  : }

  00aa4	e59d000c	 ldr         r0, [sp, #0xC]
  00aa8	e28dd018	 add         sp, sp, #0x18
  00aac	e89d6000	 ldmia       sp, {sp, lr}
  00ab0	e12fff1e	 bx          lr
  00ab4		 |$LN34@OALIntrEna|
  00ab4		 |$LN35@OALIntrEna|
  00ab4	00000000	 DCD         |??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00ab8		 |$LN36@OALIntrEna|
  00ab8	00000000	 DCD         |dpCurSettings|
  00abc		 |$LN37@OALIntrEna|
  00abc	00000000	 DCD         |g_pMPUIORegs|
  00ac0		 |$LN38@OALIntrEna|
  00ac0	00000000	 DCD         |g_pIntcL2ARegs|
  00ac4		 |$LN39@OALIntrEna|
  00ac4	00000000	 DCD         |g_pGPIO4Regs|
  00ac8		 |$LN40@OALIntrEna|
  00ac8	00000000	 DCD         |g_pIntcL2BRegs|
  00acc		 |$LN41@OALIntrEna|
  00acc	00000000	 DCD         |g_pGPIO3Regs|
  00ad0		 |$LN42@OALIntrEna|
  00ad0	00000000	 DCD         |g_pGPIO2Regs|
  00ad4		 |$LN43@OALIntrEna|
  00ad4	00000000	 DCD         |g_pGPIO1Regs|
  00ad8		 |$LN44@OALIntrEna|
  00ad8	00000000	 DCD         |g_pIntcL1Regs|
  00adc		 |$LN45@OALIntrEna|
  00adc	00000000	 DCD         |g_pIntcL2DRegs|
  00ae0		 |$LN46@OALIntrEna|
  00ae0	00000000	 DCD         |g_pIntcL2CRegs|
  00ae4		 |$LN47@OALIntrEna|
  00ae4	00000000	 DCD         |??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00ae8		 |$M44388|

			 ENDP  ; |OALIntrEnableIrqs|

	EXPORT	|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|OALIntrDisableIrqs|

  00018			 AREA	 |.pdata|, PDATA
|$T44413| DCD	|$LN31@OALIntrDis|
	DCD	0x4000f504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00ae8			 AREA	 |.text|, CODE, ARM

  00ae8		 |OALIntrDisableIrqs| PROC

; 335  : {

  00ae8		 |$LN31@OALIntrDis|
  00ae8	e1a0c00d	 mov         r12, sp
  00aec	e92d0003	 stmdb       sp!, {r0, r1}
  00af0	e92d5000	 stmdb       sp!, {r12, lr}
  00af4	e24dd010	 sub         sp, sp, #0x10
  00af8		 |$M44410|

; 336  :     UINT32 irq, i;
; 337  : 
; 338  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 339  :         L"+OALIntrDisableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 340  :     ));

  00af8	e59f338c	 ldr         r3, [pc, #0x38C]
  00afc	e5933440	 ldr         r3, [r3, #0x440]
  00b00	e3130901	 tst         r3, #1, 18
  00b04	0a00000a	 beq         |$LN25@OALIntrDis|
  00b08	e59f337c	 ldr         r3, [pc, #0x37C]
  00b0c	e5933440	 ldr         r3, [r3, #0x440]
  00b10	e3130004	 tst         r3, #4
  00b14	0a000006	 beq         |$LN25@OALIntrDis|
  00b18	e59d201c	 ldr         r2, [sp, #0x1C]
  00b1c	e59d1018	 ldr         r1, [sp, #0x18]
  00b20	e59f0390	 ldr         r0, [pc, #0x390]
  00b24	eb000000	 bl          NKDbgPrintfW
  00b28	e3a03001	 mov         r3, #1
  00b2c	e58d3008	 str         r3, [sp, #8]
  00b30	ea000001	 b           |$LN26@OALIntrDis|
  00b34		 |$LN25@OALIntrDis|
  00b34	e3a03000	 mov         r3, #0
  00b38	e58d3008	 str         r3, [sp, #8]
  00b3c		 |$LN26@OALIntrDis|

; 341  : 
; 342  :     for (i = 0; i < count; i++) {

  00b3c	e3a03000	 mov         r3, #0
  00b40	e58d3000	 str         r3, [sp]
  00b44	ea000002	 b           |$LN22@OALIntrDis|
  00b48		 |$LN21@OALIntrDis|
  00b48	e59d3000	 ldr         r3, [sp]
  00b4c	e2833001	 add         r3, r3, #1
  00b50	e58d3000	 str         r3, [sp]
  00b54		 |$LN22@OALIntrDis|
  00b54	e59d2000	 ldr         r2, [sp]
  00b58	e59d3018	 ldr         r3, [sp, #0x18]
  00b5c	e1520003	 cmp         r2, r3
  00b60	2a0000b6	 bcs         |$LN20@OALIntrDis|

; 343  :         irq = pIrqs[i];

  00b64	e59d1000	 ldr         r1, [sp]
  00b68	e3a03004	 mov         r3, #4
  00b6c	e0020391	 mul         r2, r1, r3
  00b70	e59d301c	 ldr         r3, [sp, #0x1C]
  00b74	e0833002	 add         r3, r3, r2
  00b78	e5933000	 ldr         r3, [r3]
  00b7c	e58d3004	 str         r3, [sp, #4]

; 344  :         if (irq < 32) {

  00b80	e59d3004	 ldr         r3, [sp, #4]
  00b84	e3530020	 cmp         r3, #0x20
  00b88	2a00000c	 bcs         |$LN19@OALIntrDis|

; 345  :             SETREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  00b8c	e59f3320	 ldr         r3, [pc, #0x320]
  00b90	e5933000	 ldr         r3, [r3]
  00b94	e2831004	 add         r1, r3, #4
  00b98	e59d2004	 ldr         r2, [sp, #4]
  00b9c	e3a03001	 mov         r3, #1
  00ba0	e1a02213	 mov         r2, r3, lsl r2
  00ba4	e5913000	 ldr         r3, [r1]
  00ba8	e1832002	 orr         r2, r3, r2
  00bac	e59f3300	 ldr         r3, [pc, #0x300]
  00bb0	e5933000	 ldr         r3, [r3]
  00bb4	e2833004	 add         r3, r3, #4
  00bb8	e5832000	 str         r2, [r3]
  00bbc	ea00009e	 b           |$LN18@OALIntrDis|
  00bc0		 |$LN19@OALIntrDis|

; 346  :         } else if (irq < 64) {

  00bc0	e59d3004	 ldr         r3, [sp, #4]
  00bc4	e3530040	 cmp         r3, #0x40
  00bc8	2a00000d	 bcs         |$LN17@OALIntrDis|

; 347  :             SETREG32(&g_pIntcL2ARegs->MIR, 1 << (irq - 32));

  00bcc	e59f32dc	 ldr         r3, [pc, #0x2DC]
  00bd0	e5933000	 ldr         r3, [r3]
  00bd4	e2831004	 add         r1, r3, #4
  00bd8	e59d3004	 ldr         r3, [sp, #4]
  00bdc	e2432020	 sub         r2, r3, #0x20
  00be0	e3a03001	 mov         r3, #1
  00be4	e1a02213	 mov         r2, r3, lsl r2
  00be8	e5913000	 ldr         r3, [r1]
  00bec	e1832002	 orr         r2, r3, r2
  00bf0	e59f32b8	 ldr         r3, [pc, #0x2B8]
  00bf4	e5933000	 ldr         r3, [r3]
  00bf8	e2833004	 add         r3, r3, #4
  00bfc	e5832000	 str         r2, [r3]
  00c00	ea00008d	 b           |$LN16@OALIntrDis|
  00c04		 |$LN17@OALIntrDis|

; 348  :         } else if (irq < 96) {

  00c04	e59d3004	 ldr         r3, [sp, #4]
  00c08	e3530060	 cmp         r3, #0x60
  00c0c	2a00000d	 bcs         |$LN15@OALIntrDis|

; 349  :             SETREG32(&g_pIntcL2BRegs->MIR, 1 << (irq - 64));

  00c10	e59f3294	 ldr         r3, [pc, #0x294]
  00c14	e5933000	 ldr         r3, [r3]
  00c18	e2831004	 add         r1, r3, #4
  00c1c	e59d3004	 ldr         r3, [sp, #4]
  00c20	e2432040	 sub         r2, r3, #0x40
  00c24	e3a03001	 mov         r3, #1
  00c28	e1a02213	 mov         r2, r3, lsl r2
  00c2c	e5913000	 ldr         r3, [r1]
  00c30	e1832002	 orr         r2, r3, r2
  00c34	e59f3270	 ldr         r3, [pc, #0x270]
  00c38	e5933000	 ldr         r3, [r3]
  00c3c	e2833004	 add         r3, r3, #4
  00c40	e5832000	 str         r2, [r3]
  00c44	ea00007c	 b           |$LN14@OALIntrDis|
  00c48		 |$LN15@OALIntrDis|

; 350  :         } else if (irq < 128) {

  00c48	e59d3004	 ldr         r3, [sp, #4]
  00c4c	e3530080	 cmp         r3, #0x80
  00c50	2a00000d	 bcs         |$LN13@OALIntrDis|

; 351  :             SETREG32(&g_pIntcL2CRegs->MIR, 1 << (irq - 96));

  00c54	e59f324c	 ldr         r3, [pc, #0x24C]
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e2831004	 add         r1, r3, #4
  00c60	e59d3004	 ldr         r3, [sp, #4]
  00c64	e2432060	 sub         r2, r3, #0x60
  00c68	e3a03001	 mov         r3, #1
  00c6c	e1a02213	 mov         r2, r3, lsl r2
  00c70	e5913000	 ldr         r3, [r1]
  00c74	e1832002	 orr         r2, r3, r2
  00c78	e59f3228	 ldr         r3, [pc, #0x228]
  00c7c	e5933000	 ldr         r3, [r3]
  00c80	e2833004	 add         r3, r3, #4
  00c84	e5832000	 str         r2, [r3]
  00c88	ea00006b	 b           |$LN12@OALIntrDis|
  00c8c		 |$LN13@OALIntrDis|

; 352  :         } else if (irq < 160) {

  00c8c	e59d3004	 ldr         r3, [sp, #4]
  00c90	e35300a0	 cmp         r3, #0xA0
  00c94	2a00000d	 bcs         |$LN11@OALIntrDis|

; 353  :             SETREG32(&g_pIntcL2DRegs->MIR, 1 << (irq - 128));

  00c98	e59f3204	 ldr         r3, [pc, #0x204]
  00c9c	e5933000	 ldr         r3, [r3]
  00ca0	e2831004	 add         r1, r3, #4
  00ca4	e59d3004	 ldr         r3, [sp, #4]
  00ca8	e2432080	 sub         r2, r3, #0x80
  00cac	e3a03001	 mov         r3, #1
  00cb0	e1a02213	 mov         r2, r3, lsl r2
  00cb4	e5913000	 ldr         r3, [r1]
  00cb8	e1832002	 orr         r2, r3, r2
  00cbc	e59f31e0	 ldr         r3, [pc, #0x1E0]
  00cc0	e5933000	 ldr         r3, [r3]
  00cc4	e2833004	 add         r3, r3, #4
  00cc8	e5832000	 str         r2, [r3]
  00ccc	ea00005a	 b           |$LN10@OALIntrDis|
  00cd0		 |$LN11@OALIntrDis|

; 354  :         } else if (irq < IRQ_GPIO_16) {

  00cd0	e59d3004	 ldr         r3, [sp, #4]
  00cd4	e35300b0	 cmp         r3, #0xB0
  00cd8	2a00000e	 bcs         |$LN9@OALIntrDis|

; 355  :             CLRREG32(&g_pGPIO1Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_0));

  00cdc	e59f31bc	 ldr         r3, [pc, #0x1BC]
  00ce0	e5933000	 ldr         r3, [r3]
  00ce4	e283101c	 add         r1, r3, #0x1C
  00ce8	e59d3004	 ldr         r3, [sp, #4]
  00cec	e24320a0	 sub         r2, r3, #0xA0
  00cf0	e3a03001	 mov         r3, #1
  00cf4	e1a03213	 mov         r3, r3, lsl r2
  00cf8	e1e02003	 mvn         r2, r3
  00cfc	e5913000	 ldr         r3, [r1]
  00d00	e0032002	 and         r2, r3, r2
  00d04	e59f3194	 ldr         r3, [pc, #0x194]
  00d08	e5933000	 ldr         r3, [r3]
  00d0c	e283301c	 add         r3, r3, #0x1C
  00d10	e5832000	 str         r2, [r3]
  00d14	ea000048	 b           |$LN8@OALIntrDis|
  00d18		 |$LN9@OALIntrDis|

; 356  :         } else if (irq < IRQ_GPIO_32) {

  00d18	e59d3004	 ldr         r3, [sp, #4]
  00d1c	e35300c0	 cmp         r3, #0xC0
  00d20	2a00000e	 bcs         |$LN7@OALIntrDis|

; 357  :             CLRREG32(&g_pGPIO2Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_16));

  00d24	e59f3170	 ldr         r3, [pc, #0x170]
  00d28	e5933000	 ldr         r3, [r3]
  00d2c	e283101c	 add         r1, r3, #0x1C
  00d30	e59d3004	 ldr         r3, [sp, #4]
  00d34	e24320b0	 sub         r2, r3, #0xB0
  00d38	e3a03001	 mov         r3, #1
  00d3c	e1a03213	 mov         r3, r3, lsl r2
  00d40	e1e02003	 mvn         r2, r3
  00d44	e5913000	 ldr         r3, [r1]
  00d48	e0032002	 and         r2, r3, r2
  00d4c	e59f3148	 ldr         r3, [pc, #0x148]
  00d50	e5933000	 ldr         r3, [r3]
  00d54	e283301c	 add         r3, r3, #0x1C
  00d58	e5832000	 str         r2, [r3]
  00d5c	ea000036	 b           |$LN6@OALIntrDis|
  00d60		 |$LN7@OALIntrDis|

; 358  :         } else if (irq < IRQ_GPIO_48) {

  00d60	e59d3004	 ldr         r3, [sp, #4]
  00d64	e35300d0	 cmp         r3, #0xD0
  00d68	2a00000e	 bcs         |$LN5@OALIntrDis|

; 359  :             CLRREG32(&g_pGPIO3Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_32));

  00d6c	e59f3124	 ldr         r3, [pc, #0x124]
  00d70	e5933000	 ldr         r3, [r3]
  00d74	e283101c	 add         r1, r3, #0x1C
  00d78	e59d3004	 ldr         r3, [sp, #4]
  00d7c	e24320c0	 sub         r2, r3, #0xC0
  00d80	e3a03001	 mov         r3, #1
  00d84	e1a03213	 mov         r3, r3, lsl r2
  00d88	e1e02003	 mvn         r2, r3
  00d8c	e5913000	 ldr         r3, [r1]
  00d90	e0032002	 and         r2, r3, r2
  00d94	e59f30fc	 ldr         r3, [pc, #0xFC]
  00d98	e5933000	 ldr         r3, [r3]
  00d9c	e283301c	 add         r3, r3, #0x1C
  00da0	e5832000	 str         r2, [r3]
  00da4	ea000024	 b           |$LN4@OALIntrDis|
  00da8		 |$LN5@OALIntrDis|

; 360  :         } else if (irq < IRQ_MPUIO_0) {

  00da8	e59d3004	 ldr         r3, [sp, #4]
  00dac	e35300e0	 cmp         r3, #0xE0
  00db0	2a00000e	 bcs         |$LN3@OALIntrDis|

; 361  :             CLRREG32(&g_pGPIO4Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_48));

  00db4	e59f30d8	 ldr         r3, [pc, #0xD8]
  00db8	e5933000	 ldr         r3, [r3]
  00dbc	e283101c	 add         r1, r3, #0x1C
  00dc0	e59d3004	 ldr         r3, [sp, #4]
  00dc4	e24320d0	 sub         r2, r3, #0xD0
  00dc8	e3a03001	 mov         r3, #1
  00dcc	e1a03213	 mov         r3, r3, lsl r2
  00dd0	e1e02003	 mvn         r2, r3
  00dd4	e5913000	 ldr         r3, [r1]
  00dd8	e0032002	 and         r2, r3, r2
  00ddc	e59f30b0	 ldr         r3, [pc, #0xB0]
  00de0	e5933000	 ldr         r3, [r3]
  00de4	e283301c	 add         r3, r3, #0x1C
  00de8	e5832000	 str         r2, [r3]
  00dec	ea000012	 b           |$LN2@OALIntrDis|
  00df0		 |$LN3@OALIntrDis|

; 362  :         } else if (irq < OMAP5912_IRQ_MAXIMUM) {

  00df0	e59d3004	 ldr         r3, [sp, #4]
  00df4	e35300f0	 cmp         r3, #0xF0
  00df8	2a00000f	 bcs         |$LN1@OALIntrDis|

; 363  :             SETREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  00dfc	e59f308c	 ldr         r3, [pc, #0x8C]
  00e00	e5933000	 ldr         r3, [r3]
  00e04	e283302c	 add         r3, r3, #0x2C
  00e08	e1d330b0	 ldrh        r3, [r3]
  00e0c	e1a01003	 mov         r1, r3
  00e10	e59d3004	 ldr         r3, [sp, #4]
  00e14	e24320e0	 sub         r2, r3, #0xE0
  00e18	e3a03001	 mov         r3, #1
  00e1c	e1a03213	 mov         r3, r3, lsl r2
  00e20	e1813003	 orr         r3, r1, r3
  00e24	e1a02803	 mov         r2, r3, lsl #16
  00e28	e1a02822	 mov         r2, r2, lsr #16
  00e2c	e59f305c	 ldr         r3, [pc, #0x5C]
  00e30	e5933000	 ldr         r3, [r3]
  00e34	e283302c	 add         r3, r3, #0x2C
  00e38	e1c320b0	 strh        r2, [r3]
  00e3c		 |$LN1@OALIntrDis|
  00e3c		 |$LN2@OALIntrDis|
  00e3c		 |$LN4@OALIntrDis|
  00e3c		 |$LN6@OALIntrDis|
  00e3c		 |$LN8@OALIntrDis|
  00e3c		 |$LN10@OALIntrDis|
  00e3c		 |$LN12@OALIntrDis|
  00e3c		 |$LN14@OALIntrDis|
  00e3c		 |$LN16@OALIntrDis|
  00e3c		 |$LN18@OALIntrDis|

; 364  :         }
; 365  :     }

  00e3c	eaffff41	 b           |$LN21@OALIntrDis|
  00e40		 |$LN20@OALIntrDis|

; 366  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrDisableIrqs\r\n"));

  00e40	e59f3044	 ldr         r3, [pc, #0x44]
  00e44	e5933440	 ldr         r3, [r3, #0x440]
  00e48	e3130901	 tst         r3, #1, 18
  00e4c	0a000008	 beq         |$LN27@OALIntrDis|
  00e50	e59f3034	 ldr         r3, [pc, #0x34]
  00e54	e5933440	 ldr         r3, [r3, #0x440]
  00e58	e3130004	 tst         r3, #4
  00e5c	0a000004	 beq         |$LN27@OALIntrDis|
  00e60	e59f0020	 ldr         r0, [pc, #0x20]
  00e64	eb000000	 bl          NKDbgPrintfW
  00e68	e3a03001	 mov         r3, #1
  00e6c	e58d300c	 str         r3, [sp, #0xC]
  00e70	ea000001	 b           |$LN28@OALIntrDis|
  00e74		 |$LN27@OALIntrDis|
  00e74	e3a03000	 mov         r3, #0
  00e78	e58d300c	 str         r3, [sp, #0xC]
  00e7c		 |$LN28@OALIntrDis|

; 367  : }

  00e7c	e28dd010	 add         sp, sp, #0x10
  00e80	e89d6000	 ldmia       sp, {sp, lr}
  00e84	e12fff1e	 bx          lr
  00e88		 |$LN32@OALIntrDis|
  00e88		 |$LN33@OALIntrDis|
  00e88	00000000	 DCD         |??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00e8c		 |$LN34@OALIntrDis|
  00e8c	00000000	 DCD         |dpCurSettings|
  00e90		 |$LN35@OALIntrDis|
  00e90	00000000	 DCD         |g_pMPUIORegs|
  00e94		 |$LN36@OALIntrDis|
  00e94	00000000	 DCD         |g_pGPIO4Regs|
  00e98		 |$LN37@OALIntrDis|
  00e98	00000000	 DCD         |g_pGPIO3Regs|
  00e9c		 |$LN38@OALIntrDis|
  00e9c	00000000	 DCD         |g_pGPIO2Regs|
  00ea0		 |$LN39@OALIntrDis|
  00ea0	00000000	 DCD         |g_pGPIO1Regs|
  00ea4		 |$LN40@OALIntrDis|
  00ea4	00000000	 DCD         |g_pIntcL2DRegs|
  00ea8		 |$LN41@OALIntrDis|
  00ea8	00000000	 DCD         |g_pIntcL2CRegs|
  00eac		 |$LN42@OALIntrDis|
  00eac	00000000	 DCD         |g_pIntcL2BRegs|
  00eb0		 |$LN43@OALIntrDis|
  00eb0	00000000	 DCD         |g_pIntcL2ARegs|
  00eb4		 |$LN44@OALIntrDis|
  00eb4	00000000	 DCD         |g_pIntcL1Regs|
  00eb8		 |$LN45@OALIntrDis|
  00eb8	00000000	 DCD         |??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@|
  00ebc		 |$M44411|

			 ENDP  ; |OALIntrDisableIrqs|

	EXPORT	|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIntrDoneIrqs|

  00020			 AREA	 |.pdata|, PDATA
|$T44434| DCD	|$LN29@OALIntrDon|
	DCD	0x4000e704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00ebc			 AREA	 |.text|, CODE, ARM

  00ebc		 |OALIntrDoneIrqs| PROC

; 374  : {

  00ebc		 |$LN29@OALIntrDon|
  00ebc	e1a0c00d	 mov         r12, sp
  00ec0	e92d0003	 stmdb       sp!, {r0, r1}
  00ec4	e92d5000	 stmdb       sp!, {r12, lr}
  00ec8	e24dd00c	 sub         sp, sp, #0xC
  00ecc		 |$M44431|

; 375  :     UINT32 irq, i;
; 376  : 
; 377  : 
; 378  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 379  :         L"+OALIntrDoneIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 380  :     ));

  00ecc	e59f3380	 ldr         r3, [pc, #0x380]
  00ed0	e5933440	 ldr         r3, [r3, #0x440]
  00ed4	e3130901	 tst         r3, #1, 18
  00ed8	0a00000a	 beq         |$LN25@OALIntrDon|
  00edc	e59f3370	 ldr         r3, [pc, #0x370]
  00ee0	e5933440	 ldr         r3, [r3, #0x440]
  00ee4	e3130902	 tst         r3, #2, 18
  00ee8	0a000006	 beq         |$LN25@OALIntrDon|
  00eec	e59d2018	 ldr         r2, [sp, #0x18]
  00ef0	e59d1014	 ldr         r1, [sp, #0x14]
  00ef4	e59f0354	 ldr         r0, [pc, #0x354]
  00ef8	eb000000	 bl          NKDbgPrintfW
  00efc	e3a03001	 mov         r3, #1
  00f00	e58d3008	 str         r3, [sp, #8]
  00f04	ea000001	 b           |$LN26@OALIntrDon|
  00f08		 |$LN25@OALIntrDon|
  00f08	e3a03000	 mov         r3, #0
  00f0c	e58d3008	 str         r3, [sp, #8]
  00f10		 |$LN26@OALIntrDon|

; 381  : 
; 382  :     for (i = 0; i < count; i++) {

  00f10	e3a03000	 mov         r3, #0
  00f14	e58d3000	 str         r3, [sp]
  00f18	ea000002	 b           |$LN22@OALIntrDon|
  00f1c		 |$LN21@OALIntrDon|
  00f1c	e59d3000	 ldr         r3, [sp]
  00f20	e2833001	 add         r3, r3, #1
  00f24	e58d3000	 str         r3, [sp]
  00f28		 |$LN22@OALIntrDon|
  00f28	e59d2000	 ldr         r2, [sp]
  00f2c	e59d3014	 ldr         r3, [sp, #0x14]
  00f30	e1520003	 cmp         r2, r3
  00f34	2a0000b8	 bcs         |$LN20@OALIntrDon|

; 383  :         irq = pIrqs[i];

  00f38	e59d1000	 ldr         r1, [sp]
  00f3c	e3a03004	 mov         r3, #4
  00f40	e0020391	 mul         r2, r1, r3
  00f44	e59d3018	 ldr         r3, [sp, #0x18]
  00f48	e0833002	 add         r3, r3, r2
  00f4c	e5933000	 ldr         r3, [r3]
  00f50	e58d3004	 str         r3, [sp, #4]

; 384  :         if (irq < 32) {

  00f54	e59d3004	 ldr         r3, [sp, #4]
  00f58	e3530020	 cmp         r3, #0x20
  00f5c	2a00000d	 bcs         |$LN19@OALIntrDon|

; 385  :             CLRREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  00f60	e59f32e4	 ldr         r3, [pc, #0x2E4]
  00f64	e5933000	 ldr         r3, [r3]
  00f68	e2831004	 add         r1, r3, #4
  00f6c	e59d2004	 ldr         r2, [sp, #4]
  00f70	e3a03001	 mov         r3, #1
  00f74	e1a03213	 mov         r3, r3, lsl r2
  00f78	e1e02003	 mvn         r2, r3
  00f7c	e5913000	 ldr         r3, [r1]
  00f80	e0032002	 and         r2, r3, r2
  00f84	e59f32c0	 ldr         r3, [pc, #0x2C0]
  00f88	e5933000	 ldr         r3, [r3]
  00f8c	e2833004	 add         r3, r3, #4
  00f90	e5832000	 str         r2, [r3]
  00f94	ea00009f	 b           |$LN18@OALIntrDon|
  00f98		 |$LN19@OALIntrDon|

; 386  :         } else if (irq < 64) {

  00f98	e59d3004	 ldr         r3, [sp, #4]
  00f9c	e3530040	 cmp         r3, #0x40
  00fa0	2a00000e	 bcs         |$LN17@OALIntrDon|

; 387  :             CLRREG32(&g_pIntcL2ARegs->MIR, 1 << (irq - 32));

  00fa4	e59f329c	 ldr         r3, [pc, #0x29C]
  00fa8	e5933000	 ldr         r3, [r3]
  00fac	e2831004	 add         r1, r3, #4
  00fb0	e59d3004	 ldr         r3, [sp, #4]
  00fb4	e2432020	 sub         r2, r3, #0x20
  00fb8	e3a03001	 mov         r3, #1
  00fbc	e1a03213	 mov         r3, r3, lsl r2
  00fc0	e1e02003	 mvn         r2, r3
  00fc4	e5913000	 ldr         r3, [r1]
  00fc8	e0032002	 and         r2, r3, r2
  00fcc	e59f3274	 ldr         r3, [pc, #0x274]
  00fd0	e5933000	 ldr         r3, [r3]
  00fd4	e2833004	 add         r3, r3, #4
  00fd8	e5832000	 str         r2, [r3]
  00fdc	ea00008d	 b           |$LN16@OALIntrDon|
  00fe0		 |$LN17@OALIntrDon|

; 388  :         } else if (irq < 96) {

  00fe0	e59d3004	 ldr         r3, [sp, #4]
  00fe4	e3530060	 cmp         r3, #0x60
  00fe8	2a00000e	 bcs         |$LN15@OALIntrDon|

; 389  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (irq - 64));

  00fec	e59f3250	 ldr         r3, [pc, #0x250]
  00ff0	e5933000	 ldr         r3, [r3]
  00ff4	e2831004	 add         r1, r3, #4
  00ff8	e59d3004	 ldr         r3, [sp, #4]
  00ffc	e2432040	 sub         r2, r3, #0x40
  01000	e3a03001	 mov         r3, #1
  01004	e1a03213	 mov         r3, r3, lsl r2
  01008	e1e02003	 mvn         r2, r3
  0100c	e5913000	 ldr         r3, [r1]
  01010	e0032002	 and         r2, r3, r2
  01014	e59f3228	 ldr         r3, [pc, #0x228]
  01018	e5933000	 ldr         r3, [r3]
  0101c	e2833004	 add         r3, r3, #4
  01020	e5832000	 str         r2, [r3]
  01024	ea00007b	 b           |$LN14@OALIntrDon|
  01028		 |$LN15@OALIntrDon|

; 390  :         } else if (irq < 128) {

  01028	e59d3004	 ldr         r3, [sp, #4]
  0102c	e3530080	 cmp         r3, #0x80
  01030	2a00000e	 bcs         |$LN13@OALIntrDon|

; 391  :             CLRREG32(&g_pIntcL2CRegs->MIR, 1 << (irq - 96));

  01034	e59f3204	 ldr         r3, [pc, #0x204]
  01038	e5933000	 ldr         r3, [r3]
  0103c	e2831004	 add         r1, r3, #4
  01040	e59d3004	 ldr         r3, [sp, #4]
  01044	e2432060	 sub         r2, r3, #0x60
  01048	e3a03001	 mov         r3, #1
  0104c	e1a03213	 mov         r3, r3, lsl r2
  01050	e1e02003	 mvn         r2, r3
  01054	e5913000	 ldr         r3, [r1]
  01058	e0032002	 and         r2, r3, r2
  0105c	e59f31dc	 ldr         r3, [pc, #0x1DC]
  01060	e5933000	 ldr         r3, [r3]
  01064	e2833004	 add         r3, r3, #4
  01068	e5832000	 str         r2, [r3]
  0106c	ea000069	 b           |$LN12@OALIntrDon|
  01070		 |$LN13@OALIntrDon|

; 392  :         } else if (irq < 160) {

  01070	e59d3004	 ldr         r3, [sp, #4]
  01074	e35300a0	 cmp         r3, #0xA0
  01078	2a00000e	 bcs         |$LN11@OALIntrDon|

; 393  :             CLRREG32(&g_pIntcL2DRegs->MIR, 1 << (irq - 128));

  0107c	e59f31b8	 ldr         r3, [pc, #0x1B8]
  01080	e5933000	 ldr         r3, [r3]
  01084	e2831004	 add         r1, r3, #4
  01088	e59d3004	 ldr         r3, [sp, #4]
  0108c	e2432080	 sub         r2, r3, #0x80
  01090	e3a03001	 mov         r3, #1
  01094	e1a03213	 mov         r3, r3, lsl r2
  01098	e1e02003	 mvn         r2, r3
  0109c	e5913000	 ldr         r3, [r1]
  010a0	e0032002	 and         r2, r3, r2
  010a4	e59f3190	 ldr         r3, [pc, #0x190]
  010a8	e5933000	 ldr         r3, [r3]
  010ac	e2833004	 add         r3, r3, #4
  010b0	e5832000	 str         r2, [r3]
  010b4	ea000057	 b           |$LN10@OALIntrDon|
  010b8		 |$LN11@OALIntrDon|

; 394  :         } else if (irq < IRQ_GPIO_16) {

  010b8	e59d3004	 ldr         r3, [sp, #4]
  010bc	e35300b0	 cmp         r3, #0xB0
  010c0	2a00000d	 bcs         |$LN9@OALIntrDon|

; 395  :             SETREG32(&g_pGPIO1Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_0));

  010c4	e59f316c	 ldr         r3, [pc, #0x16C]
  010c8	e5933000	 ldr         r3, [r3]
  010cc	e283101c	 add         r1, r3, #0x1C
  010d0	e59d3004	 ldr         r3, [sp, #4]
  010d4	e24320a0	 sub         r2, r3, #0xA0
  010d8	e3a03001	 mov         r3, #1
  010dc	e1a02213	 mov         r2, r3, lsl r2
  010e0	e5913000	 ldr         r3, [r1]
  010e4	e1832002	 orr         r2, r3, r2
  010e8	e59f3148	 ldr         r3, [pc, #0x148]
  010ec	e5933000	 ldr         r3, [r3]
  010f0	e283301c	 add         r3, r3, #0x1C
  010f4	e5832000	 str         r2, [r3]
  010f8	ea000046	 b           |$LN8@OALIntrDon|
  010fc		 |$LN9@OALIntrDon|

; 396  :         } else if (irq < IRQ_GPIO_32) {

  010fc	e59d3004	 ldr         r3, [sp, #4]
  01100	e35300c0	 cmp         r3, #0xC0
  01104	2a00000d	 bcs         |$LN7@OALIntrDon|

; 397  :             SETREG32(&g_pGPIO2Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_16));

  01108	e59f3124	 ldr         r3, [pc, #0x124]
  0110c	e5933000	 ldr         r3, [r3]
  01110	e283101c	 add         r1, r3, #0x1C
  01114	e59d3004	 ldr         r3, [sp, #4]
  01118	e24320b0	 sub         r2, r3, #0xB0
  0111c	e3a03001	 mov         r3, #1
  01120	e1a02213	 mov         r2, r3, lsl r2
  01124	e5913000	 ldr         r3, [r1]
  01128	e1832002	 orr         r2, r3, r2
  0112c	e59f3100	 ldr         r3, [pc, #0x100]
  01130	e5933000	 ldr         r3, [r3]
  01134	e283301c	 add         r3, r3, #0x1C
  01138	e5832000	 str         r2, [r3]
  0113c	ea000035	 b           |$LN6@OALIntrDon|
  01140		 |$LN7@OALIntrDon|

; 398  :         } else if (irq < IRQ_GPIO_48) {

  01140	e59d3004	 ldr         r3, [sp, #4]
  01144	e35300d0	 cmp         r3, #0xD0
  01148	2a00000d	 bcs         |$LN5@OALIntrDon|

; 399  :             SETREG32(&g_pGPIO3Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_32));

  0114c	e59f30dc	 ldr         r3, [pc, #0xDC]
  01150	e5933000	 ldr         r3, [r3]
  01154	e283101c	 add         r1, r3, #0x1C
  01158	e59d3004	 ldr         r3, [sp, #4]
  0115c	e24320c0	 sub         r2, r3, #0xC0
  01160	e3a03001	 mov         r3, #1
  01164	e1a02213	 mov         r2, r3, lsl r2
  01168	e5913000	 ldr         r3, [r1]
  0116c	e1832002	 orr         r2, r3, r2
  01170	e59f30b8	 ldr         r3, [pc, #0xB8]
  01174	e5933000	 ldr         r3, [r3]
  01178	e283301c	 add         r3, r3, #0x1C
  0117c	e5832000	 str         r2, [r3]
  01180	ea000024	 b           |$LN4@OALIntrDon|
  01184		 |$LN5@OALIntrDon|

; 400  :         } else if (irq < IRQ_MPUIO_0) {

  01184	e59d3004	 ldr         r3, [sp, #4]
  01188	e35300e0	 cmp         r3, #0xE0
  0118c	2a00000d	 bcs         |$LN3@OALIntrDon|

; 401  :             SETREG32(&g_pGPIO4Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_48));

  01190	e59f3094	 ldr         r3, [pc, #0x94]
  01194	e5933000	 ldr         r3, [r3]
  01198	e283101c	 add         r1, r3, #0x1C
  0119c	e59d3004	 ldr         r3, [sp, #4]
  011a0	e24320d0	 sub         r2, r3, #0xD0
  011a4	e3a03001	 mov         r3, #1
  011a8	e1a02213	 mov         r2, r3, lsl r2
  011ac	e5913000	 ldr         r3, [r1]
  011b0	e1832002	 orr         r2, r3, r2
  011b4	e59f3070	 ldr         r3, [pc, #0x70]
  011b8	e5933000	 ldr         r3, [r3]
  011bc	e283301c	 add         r3, r3, #0x1C
  011c0	e5832000	 str         r2, [r3]
  011c4	ea000013	 b           |$LN2@OALIntrDon|
  011c8		 |$LN3@OALIntrDon|

; 402  :         } else if (irq < OMAP5912_IRQ_MAXIMUM) {

  011c8	e59d3004	 ldr         r3, [sp, #4]
  011cc	e35300f0	 cmp         r3, #0xF0
  011d0	2a000010	 bcs         |$LN1@OALIntrDon|

; 403  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  011d4	e59f304c	 ldr         r3, [pc, #0x4C]
  011d8	e5933000	 ldr         r3, [r3]
  011dc	e283302c	 add         r3, r3, #0x2C
  011e0	e1d330b0	 ldrh        r3, [r3]
  011e4	e1a01003	 mov         r1, r3
  011e8	e59d3004	 ldr         r3, [sp, #4]
  011ec	e24320e0	 sub         r2, r3, #0xE0
  011f0	e3a03001	 mov         r3, #1
  011f4	e1a03213	 mov         r3, r3, lsl r2
  011f8	e1e03003	 mvn         r3, r3
  011fc	e0013003	 and         r3, r1, r3
  01200	e1a02803	 mov         r2, r3, lsl #16
  01204	e1a02822	 mov         r2, r2, lsr #16
  01208	e59f3018	 ldr         r3, [pc, #0x18]
  0120c	e5933000	 ldr         r3, [r3]
  01210	e283302c	 add         r3, r3, #0x2C
  01214	e1c320b0	 strh        r2, [r3]
  01218		 |$LN1@OALIntrDon|
  01218		 |$LN2@OALIntrDon|
  01218		 |$LN4@OALIntrDon|
  01218		 |$LN6@OALIntrDon|
  01218		 |$LN8@OALIntrDon|
  01218		 |$LN10@OALIntrDon|
  01218		 |$LN12@OALIntrDon|
  01218		 |$LN14@OALIntrDon|
  01218		 |$LN16@OALIntrDon|
  01218		 |$LN18@OALIntrDon|

; 404  :         }
; 405  :     }

  01218	eaffff3f	 b           |$LN21@OALIntrDon|
  0121c		 |$LN20@OALIntrDon|

; 406  : }

  0121c	e28dd00c	 add         sp, sp, #0xC
  01220	e89d6000	 ldmia       sp, {sp, lr}
  01224	e12fff1e	 bx          lr
  01228		 |$LN30@OALIntrDon|
  01228		 |$LN31@OALIntrDon|
  01228	00000000	 DCD         |g_pMPUIORegs|
  0122c		 |$LN32@OALIntrDon|
  0122c	00000000	 DCD         |g_pGPIO4Regs|
  01230		 |$LN33@OALIntrDon|
  01230	00000000	 DCD         |g_pGPIO3Regs|
  01234		 |$LN34@OALIntrDon|
  01234	00000000	 DCD         |g_pGPIO2Regs|
  01238		 |$LN35@OALIntrDon|
  01238	00000000	 DCD         |g_pGPIO1Regs|
  0123c		 |$LN36@OALIntrDon|
  0123c	00000000	 DCD         |g_pIntcL2DRegs|
  01240		 |$LN37@OALIntrDon|
  01240	00000000	 DCD         |g_pIntcL2CRegs|
  01244		 |$LN38@OALIntrDon|
  01244	00000000	 DCD         |g_pIntcL2BRegs|
  01248		 |$LN39@OALIntrDon|
  01248	00000000	 DCD         |g_pIntcL2ARegs|
  0124c		 |$LN40@OALIntrDon|
  0124c	00000000	 DCD         |g_pIntcL1Regs|
  01250		 |$LN41@OALIntrDon|
  01250	00000000	 DCD         |??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01254		 |$LN42@OALIntrDon|
  01254	00000000	 DCD         |dpCurSettings|
  01258		 |$M44432|

			 ENDP  ; |OALIntrDoneIrqs|

	EXPORT	|OEMInterruptHandler|
	IMPORT	|OALIntrTranslateIrq|
	IMPORT	|ProfilerHit|
	IMPORT	|g_oalProfilerEnabled|
	IMPORT	|g_oalProfilerIrq|
	IMPORT	|OALTimerIntrHandler|

  00028			 AREA	 |.pdata|, PDATA
|$T44454| DCD	|$LN43@OEMInterru|
	DCD	0x40015e04
; Function compile flags: /Odtp

  01258			 AREA	 |.text|, CODE, ARM

  01258		 |OEMInterruptHandler| PROC

; 416  : {

  01258		 |$LN43@OEMInterru|
  01258	e1a0c00d	 mov         r12, sp
  0125c	e92d0001	 stmdb       sp!, {r0}
  01260	e92d5000	 stmdb       sp!, {r12, lr}
  01264	e24dd028	 sub         sp, sp, #0x28
  01268		 |$M44451|

; 417  :     UINT32 irq = OAL_INTR_IRQ_UNDEFINED;

  01268	e3e03000	 mvn         r3, #0
  0126c	e58d300c	 str         r3, [sp, #0xC]

; 418  :     UINT32 sysIntr = SYSINTR_NOP;

  01270	e3a03000	 mov         r3, #0
  01274	e58d3000	 str         r3, [sp]

; 419  :     UINT32 data, mask;
; 420  :     OMAP5912_GPIO_REGS *pGPIORegs = NULL;

  01278	e3a03000	 mov         r3, #0
  0127c	e58d3008	 str         r3, [sp, #8]

; 421  :     OMAP5912_ARMIO_REGS *pMPUIORegs = NULL;

  01280	e3a03000	 mov         r3, #0
  01284	e58d3010	 str         r3, [sp, #0x10]

; 422  : 
; 423  :     // Get pending interrupt
; 424  :     irq = INREG32(&g_pIntcL1Regs->SIR_IRQ);

  01288	e59f350c	 ldr         r3, [pc, #0x50C]
  0128c	e5933000	 ldr         r3, [r3]
  01290	e2833010	 add         r3, r3, #0x10
  01294	e5933000	 ldr         r3, [r3]
  01298	e58d300c	 str         r3, [sp, #0xC]

; 425  : 
; 426  :     // First check if it is interrupt from cascade controller
; 427  :     if (irq != IRQ_L2IRQ) {

  0129c	e59d300c	 ldr         r3, [sp, #0xC]
  012a0	e3530000	 cmp         r3, #0
  012a4	0a00003c	 beq         |$LN37@OEMInterru|

; 428  :         // It isn't cascade interrupt, check for GPIO interrupt
; 429  :         if (irq == IRQ_GPIO1 && (data = INREG32(&g_pGPIO1Regs->IRQSTATUS1)) != 0) {

  012a8	e59d300c	 ldr         r3, [sp, #0xC]
  012ac	e353000e	 cmp         r3, #0xE
  012b0	1a00002c	 bne         |$LN36@OEMInterru|
  012b4	e59f3510	 ldr         r3, [pc, #0x510]
  012b8	e5933000	 ldr         r3, [r3]
  012bc	e2833018	 add         r3, r3, #0x18
  012c0	e5933000	 ldr         r3, [r3]
  012c4	e58d3014	 str         r3, [sp, #0x14]
  012c8	e59d3014	 ldr         r3, [sp, #0x14]
  012cc	e3530000	 cmp         r3, #0
  012d0	0a000024	 beq         |$LN36@OEMInterru|

; 430  :             // It is interrupt from GPIO1, find which one, mask and clear it.
; 431  :             for (irq = IRQ_GPIO_0, mask = 1; mask != 0; mask <<= 1, irq++) {

  012d4	e3a030a0	 mov         r3, #0xA0
  012d8	e58d300c	 str         r3, [sp, #0xC]
  012dc	e3a03001	 mov         r3, #1
  012e0	e58d3004	 str         r3, [sp, #4]
  012e4	ea000005	 b           |$LN35@OEMInterru|
  012e8		 |$LN34@OEMInterru|
  012e8	e59d3004	 ldr         r3, [sp, #4]
  012ec	e1a03083	 mov         r3, r3, lsl #1
  012f0	e58d3004	 str         r3, [sp, #4]
  012f4	e59d300c	 ldr         r3, [sp, #0xC]
  012f8	e2833001	 add         r3, r3, #1
  012fc	e58d300c	 str         r3, [sp, #0xC]
  01300		 |$LN35@OEMInterru|
  01300	e59d3004	 ldr         r3, [sp, #4]
  01304	e3530000	 cmp         r3, #0
  01308	0a000005	 beq         |$LN33@OEMInterru|

; 432  :                 if ((mask & data) != 0) break;

  0130c	e59d2004	 ldr         r2, [sp, #4]
  01310	e59d3014	 ldr         r3, [sp, #0x14]
  01314	e1120003	 tst         r2, r3
  01318	0a000000	 beq         |$LN32@OEMInterru|
  0131c	ea000000	 b           |$LN33@OEMInterru|
  01320		 |$LN32@OEMInterru|

; 433  :             }

  01320	eafffff0	 b           |$LN34@OEMInterru|
  01324		 |$LN33@OEMInterru|

; 434  :             CLRPORT32(&g_pGPIO1Regs->IRQENABLE1, mask);

  01324	e59f34a0	 ldr         r3, [pc, #0x4A0]
  01328	e5933000	 ldr         r3, [r3]
  0132c	e283101c	 add         r1, r3, #0x1C
  01330	e59d3004	 ldr         r3, [sp, #4]
  01334	e1e02003	 mvn         r2, r3
  01338	e5913000	 ldr         r3, [r1]
  0133c	e0032002	 and         r2, r3, r2
  01340	e59f3484	 ldr         r3, [pc, #0x484]
  01344	e5933000	 ldr         r3, [r3]
  01348	e283301c	 add         r3, r3, #0x1C
  0134c	e5832000	 str         r2, [r3]

; 435  :             OUTPORT32(&g_pGPIO4Regs->IRQSTATUS1, mask);

  01350	e59f3468	 ldr         r3, [pc, #0x468]
  01354	e5933000	 ldr         r3, [r3]
  01358	e2832018	 add         r2, r3, #0x18
  0135c	e59d3004	 ldr         r3, [sp, #4]
  01360	e5823000	 str         r3, [r2]

; 436  :         } else {

  01364	ea00000b	 b           |$LN31@OEMInterru|
  01368		 |$LN36@OEMInterru|

; 437  :             SETREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  01368	e59f342c	 ldr         r3, [pc, #0x42C]
  0136c	e5933000	 ldr         r3, [r3]
  01370	e2831004	 add         r1, r3, #4
  01374	e59d200c	 ldr         r2, [sp, #0xC]
  01378	e3a03001	 mov         r3, #1
  0137c	e1a02213	 mov         r2, r3, lsl r2
  01380	e5913000	 ldr         r3, [r1]
  01384	e1832002	 orr         r2, r3, r2
  01388	e59f340c	 ldr         r3, [pc, #0x40C]
  0138c	e5933000	 ldr         r3, [r3]
  01390	e2833004	 add         r3, r3, #4
  01394	e5832000	 str         r2, [r3]
  01398		 |$LN31@OEMInterru|

; 438  :         }
; 439  :     } else {

  01398	ea0000c5	 b           |$LN30@OEMInterru|
  0139c		 |$LN37@OEMInterru|

; 440  : 
; 441  :         // It is interrupt from L2, get number from there
; 442  :         irq = INREG32(&g_pIntcL2ARegs->SIR_IRQ) + 32;

  0139c	e59f3408	 ldr         r3, [pc, #0x408]
  013a0	e5933000	 ldr         r3, [r3]
  013a4	e2833010	 add         r3, r3, #0x10
  013a8	e5933000	 ldr         r3, [r3]
  013ac	e2833020	 add         r3, r3, #0x20
  013b0	e58d300c	 str         r3, [sp, #0xC]

; 443  : 
; 444  :         // check for GPIO interrupts
; 445  :         switch (irq) {

  013b4	e59d300c	 ldr         r3, [sp, #0xC]
  013b8	e58d301c	 str         r3, [sp, #0x1C]
  013bc	e59d301c	 ldr         r3, [sp, #0x1C]
  013c0	e3530049	 cmp         r3, #0x49
  013c4	8a000009	 bhi         |$LN40@OEMInterru|
  013c8	e59d301c	 ldr         r3, [sp, #0x1C]
  013cc	e3530049	 cmp         r3, #0x49
  013d0	0a000010	 beq         |$LN26@OEMInterru|
  013d4	e59d301c	 ldr         r3, [sp, #0x1C]
  013d8	e3530025	 cmp         r3, #0x25
  013dc	0a000019	 beq         |$LN24@OEMInterru|
  013e0	e59d301c	 ldr         r3, [sp, #0x1C]
  013e4	e3530048	 cmp         r3, #0x48
  013e8	0a000004	 beq         |$LN27@OEMInterru|
  013ec	ea00001a	 b           |$LN28@OEMInterru|
  013f0		 |$LN40@OEMInterru|
  013f0	e59d301c	 ldr         r3, [sp, #0x1C]
  013f4	e3530050	 cmp         r3, #0x50
  013f8	0a00000c	 beq         |$LN25@OEMInterru|
  013fc	ea000016	 b           |$LN28@OEMInterru|
  01400		 |$LN27@OEMInterru|

; 446  :         case IRQ_GPIO2:
; 447  :             irq = IRQ_GPIO_16;

  01400	e3a030b0	 mov         r3, #0xB0
  01404	e58d300c	 str         r3, [sp, #0xC]

; 448  :             pGPIORegs=g_pGPIO2Regs;

  01408	e59f33b8	 ldr         r3, [pc, #0x3B8]
  0140c	e5933000	 ldr         r3, [r3]
  01410	e58d3008	 str         r3, [sp, #8]

; 449  :             break;

  01414	ea000010	 b           |$LN28@OEMInterru|
  01418		 |$LN26@OEMInterru|

; 450  :         case IRQ_GPIO3:
; 451  :             irq = IRQ_GPIO_32;

  01418	e3a030c0	 mov         r3, #0xC0
  0141c	e58d300c	 str         r3, [sp, #0xC]

; 452  :             pGPIORegs=g_pGPIO3Regs;

  01420	e59f339c	 ldr         r3, [pc, #0x39C]
  01424	e5933000	 ldr         r3, [r3]
  01428	e58d3008	 str         r3, [sp, #8]

; 453  :             break;

  0142c	ea00000a	 b           |$LN28@OEMInterru|
  01430		 |$LN25@OEMInterru|

; 454  :         case IRQ_GPIO4:
; 455  :             irq = IRQ_GPIO_48;

  01430	e3a030d0	 mov         r3, #0xD0
  01434	e58d300c	 str         r3, [sp, #0xC]

; 456  :             pGPIORegs=g_pGPIO4Regs;

  01438	e59f3380	 ldr         r3, [pc, #0x380]
  0143c	e5933000	 ldr         r3, [r3]
  01440	e58d3008	 str         r3, [sp, #8]

; 457  :             break;

  01444	ea000004	 b           |$LN28@OEMInterru|
  01448		 |$LN24@OEMInterru|

; 458  :         case IRQ_MPUIO:
; 459  :             irq = IRQ_MPUIO_0;

  01448	e3a030e0	 mov         r3, #0xE0
  0144c	e58d300c	 str         r3, [sp, #0xC]

; 460  :             pMPUIORegs = g_pMPUIORegs;

  01450	e59f3364	 ldr         r3, [pc, #0x364]
  01454	e5933000	 ldr         r3, [r3]
  01458	e58d3010	 str         r3, [sp, #0x10]
  0145c		 |$LN28@OEMInterru|

; 461  :             break;
; 462  :         }
; 463  : 
; 464  :         // If it is interrupt from GPIOx, find which one, mask and clear it..
; 465  :         if (pGPIORegs != NULL && (data = INREG32(&pGPIORegs->IRQSTATUS1)) != 0) {

  0145c	e59d3008	 ldr         r3, [sp, #8]
  01460	e3530000	 cmp         r3, #0
  01464	0a000026	 beq         |$LN23@OEMInterru|
  01468	e59d3008	 ldr         r3, [sp, #8]
  0146c	e2833018	 add         r3, r3, #0x18
  01470	e5933000	 ldr         r3, [r3]
  01474	e58d3014	 str         r3, [sp, #0x14]
  01478	e59d3014	 ldr         r3, [sp, #0x14]
  0147c	e3530000	 cmp         r3, #0
  01480	0a00001f	 beq         |$LN23@OEMInterru|

; 466  :             for (mask = 1; mask != 0; mask <<= 1, irq++) {

  01484	e3a03001	 mov         r3, #1
  01488	e58d3004	 str         r3, [sp, #4]
  0148c	ea000005	 b           |$LN22@OEMInterru|
  01490		 |$LN21@OEMInterru|
  01490	e59d3004	 ldr         r3, [sp, #4]
  01494	e1a03083	 mov         r3, r3, lsl #1
  01498	e58d3004	 str         r3, [sp, #4]
  0149c	e59d300c	 ldr         r3, [sp, #0xC]
  014a0	e2833001	 add         r3, r3, #1
  014a4	e58d300c	 str         r3, [sp, #0xC]
  014a8		 |$LN22@OEMInterru|
  014a8	e59d3004	 ldr         r3, [sp, #4]
  014ac	e3530000	 cmp         r3, #0
  014b0	0a000005	 beq         |$LN20@OEMInterru|

; 467  :                 if ((mask & data) != 0) break;

  014b4	e59d2004	 ldr         r2, [sp, #4]
  014b8	e59d3014	 ldr         r3, [sp, #0x14]
  014bc	e1120003	 tst         r2, r3
  014c0	0a000000	 beq         |$LN19@OEMInterru|
  014c4	ea000000	 b           |$LN20@OEMInterru|
  014c8		 |$LN19@OEMInterru|

; 468  :             }

  014c8	eafffff0	 b           |$LN21@OEMInterru|
  014cc		 |$LN20@OEMInterru|

; 469  :             CLRPORT32(&pGPIORegs->IRQENABLE1, mask);

  014cc	e59d3008	 ldr         r3, [sp, #8]
  014d0	e283101c	 add         r1, r3, #0x1C
  014d4	e59d3004	 ldr         r3, [sp, #4]
  014d8	e1e02003	 mvn         r2, r3
  014dc	e5913000	 ldr         r3, [r1]
  014e0	e0032002	 and         r2, r3, r2
  014e4	e59d3008	 ldr         r3, [sp, #8]
  014e8	e283301c	 add         r3, r3, #0x1C
  014ec	e5832000	 str         r2, [r3]

; 470  :             OUTPORT32(&pGPIORegs->IRQSTATUS1, mask);

  014f0	e59d3008	 ldr         r3, [sp, #8]
  014f4	e2832018	 add         r2, r3, #0x18
  014f8	e59d3004	 ldr         r3, [sp, #4]
  014fc	e5823000	 str         r3, [r2]
  01500	ea000066	 b           |$LN18@OEMInterru|
  01504		 |$LN23@OEMInterru|

; 471  :         }
; 472  :         else if (pMPUIORegs != NULL && (data = INREG16(&pMPUIORegs->IO_INT_STAT)) != 0) {

  01504	e59d3010	 ldr         r3, [sp, #0x10]
  01508	e3530000	 cmp         r3, #0
  0150c	0a000023	 beq         |$LN17@OEMInterru|
  01510	e59d3010	 ldr         r3, [sp, #0x10]
  01514	e2833024	 add         r3, r3, #0x24
  01518	e1d330b0	 ldrh        r3, [r3]
  0151c	e58d3014	 str         r3, [sp, #0x14]
  01520	e59d3014	 ldr         r3, [sp, #0x14]
  01524	e3530000	 cmp         r3, #0
  01528	0a00001c	 beq         |$LN17@OEMInterru|

; 473  :             for (mask = 1; mask != 0; mask <<= 1, irq++) {

  0152c	e3a03001	 mov         r3, #1
  01530	e58d3004	 str         r3, [sp, #4]
  01534	ea000005	 b           |$LN16@OEMInterru|
  01538		 |$LN15@OEMInterru|
  01538	e59d3004	 ldr         r3, [sp, #4]
  0153c	e1a03083	 mov         r3, r3, lsl #1
  01540	e58d3004	 str         r3, [sp, #4]
  01544	e59d300c	 ldr         r3, [sp, #0xC]
  01548	e2833001	 add         r3, r3, #1
  0154c	e58d300c	 str         r3, [sp, #0xC]
  01550		 |$LN16@OEMInterru|
  01550	e59d3004	 ldr         r3, [sp, #4]
  01554	e3530000	 cmp         r3, #0
  01558	0a000005	 beq         |$LN14@OEMInterru|

; 474  :                 if ((mask & data) != 0) break;

  0155c	e59d2004	 ldr         r2, [sp, #4]
  01560	e59d3014	 ldr         r3, [sp, #0x14]
  01564	e1120003	 tst         r2, r3
  01568	0a000000	 beq         |$LN13@OEMInterru|
  0156c	ea000000	 b           |$LN14@OEMInterru|
  01570		 |$LN13@OEMInterru|

; 475  :             }

  01570	eafffff0	 b           |$LN15@OEMInterru|
  01574		 |$LN14@OEMInterru|

; 476  :             SETPORT16(&pMPUIORegs->IO_INT_MASK, mask);

  01574	e59d3010	 ldr         r3, [sp, #0x10]
  01578	e283302c	 add         r3, r3, #0x2C
  0157c	e1d320b0	 ldrh        r2, [r3]
  01580	e59d3004	 ldr         r3, [sp, #4]
  01584	e1823003	 orr         r3, r2, r3
  01588	e1a02803	 mov         r2, r3, lsl #16
  0158c	e1a02822	 mov         r2, r2, lsr #16
  01590	e59d3010	 ldr         r3, [sp, #0x10]
  01594	e283302c	 add         r3, r3, #0x2C
  01598	e1c320b0	 strh        r2, [r3]
  0159c	ea00003f	 b           |$LN12@OEMInterru|
  015a0		 |$LN17@OEMInterru|

; 477  :         }
; 478  :         else if (irq < 64) {

  015a0	e59d300c	 ldr         r3, [sp, #0xC]
  015a4	e3530040	 cmp         r3, #0x40
  015a8	2a00000d	 bcs         |$LN11@OEMInterru|

; 479  :             // Mask interrupt on L2A
; 480  :             SETPORT32(&g_pIntcL2ARegs->MIR, 1 << (irq - 32));

  015ac	e59f31f8	 ldr         r3, [pc, #0x1F8]
  015b0	e5933000	 ldr         r3, [r3]
  015b4	e2831004	 add         r1, r3, #4
  015b8	e59d300c	 ldr         r3, [sp, #0xC]
  015bc	e2432020	 sub         r2, r3, #0x20
  015c0	e3a03001	 mov         r3, #1
  015c4	e1a02213	 mov         r2, r3, lsl r2
  015c8	e5913000	 ldr         r3, [r1]
  015cc	e1832002	 orr         r2, r3, r2
  015d0	e59f31d4	 ldr         r3, [pc, #0x1D4]
  015d4	e5933000	 ldr         r3, [r3]
  015d8	e2833004	 add         r3, r3, #4
  015dc	e5832000	 str         r2, [r3]
  015e0	ea00002e	 b           |$LN10@OEMInterru|
  015e4		 |$LN11@OEMInterru|

; 481  :         } else if (irq < 96) {

  015e4	e59d300c	 ldr         r3, [sp, #0xC]
  015e8	e3530060	 cmp         r3, #0x60
  015ec	2a00000d	 bcs         |$LN9@OEMInterru|

; 482  :             // Mask interrupt on L2B
; 483  :             SETPORT32(&g_pIntcL2BRegs->MIR, 1 << (irq - 64));

  015f0	e59f31c0	 ldr         r3, [pc, #0x1C0]
  015f4	e5933000	 ldr         r3, [r3]
  015f8	e2831004	 add         r1, r3, #4
  015fc	e59d300c	 ldr         r3, [sp, #0xC]
  01600	e2432040	 sub         r2, r3, #0x40
  01604	e3a03001	 mov         r3, #1
  01608	e1a02213	 mov         r2, r3, lsl r2
  0160c	e5913000	 ldr         r3, [r1]
  01610	e1832002	 orr         r2, r3, r2
  01614	e59f319c	 ldr         r3, [pc, #0x19C]
  01618	e5933000	 ldr         r3, [r3]
  0161c	e2833004	 add         r3, r3, #4
  01620	e5832000	 str         r2, [r3]
  01624	ea00001d	 b           |$LN8@OEMInterru|
  01628		 |$LN9@OEMInterru|

; 484  :         } else if (irq < 128) {

  01628	e59d300c	 ldr         r3, [sp, #0xC]
  0162c	e3530080	 cmp         r3, #0x80
  01630	2a00000d	 bcs         |$LN7@OEMInterru|

; 485  :             // Mask interrupt on L2C
; 486  :             SETPORT32(&g_pIntcL2CRegs->MIR, 1 << (irq - 96));

  01634	e59f3178	 ldr         r3, [pc, #0x178]
  01638	e5933000	 ldr         r3, [r3]
  0163c	e2831004	 add         r1, r3, #4
  01640	e59d300c	 ldr         r3, [sp, #0xC]
  01644	e2432060	 sub         r2, r3, #0x60
  01648	e3a03001	 mov         r3, #1
  0164c	e1a02213	 mov         r2, r3, lsl r2
  01650	e5913000	 ldr         r3, [r1]
  01654	e1832002	 orr         r2, r3, r2
  01658	e59f3154	 ldr         r3, [pc, #0x154]
  0165c	e5933000	 ldr         r3, [r3]
  01660	e2833004	 add         r3, r3, #4
  01664	e5832000	 str         r2, [r3]

; 487  :         } else {

  01668	ea00000c	 b           |$LN6@OEMInterru|
  0166c		 |$LN7@OEMInterru|

; 488  :             // Mask interrupt on L2D
; 489  :             SETPORT32(&g_pIntcL2DRegs->MIR, 1 << (irq - 128));

  0166c	e59f313c	 ldr         r3, [pc, #0x13C]
  01670	e5933000	 ldr         r3, [r3]
  01674	e2831004	 add         r1, r3, #4
  01678	e59d300c	 ldr         r3, [sp, #0xC]
  0167c	e2432080	 sub         r2, r3, #0x80
  01680	e3a03001	 mov         r3, #1
  01684	e1a02213	 mov         r2, r3, lsl r2
  01688	e5913000	 ldr         r3, [r1]
  0168c	e1832002	 orr         r2, r3, r2
  01690	e59f3118	 ldr         r3, [pc, #0x118]
  01694	e5933000	 ldr         r3, [r3]
  01698	e2833004	 add         r3, r3, #4
  0169c	e5832000	 str         r2, [r3]
  016a0		 |$LN6@OEMInterru|
  016a0		 |$LN8@OEMInterru|
  016a0		 |$LN10@OEMInterru|
  016a0		 |$LN12@OEMInterru|
  016a0		 |$LN18@OEMInterru|

; 490  :         }
; 491  : 
; 492  :         // Acknowledge interrupt on L2
; 493  :         OUTREG32(&g_pIntcL2ARegs->CNTL, CNTL_NEW_IRQ);

  016a0	e59f3104	 ldr         r3, [pc, #0x104]
  016a4	e5933000	 ldr         r3, [r3]
  016a8	e2832018	 add         r2, r3, #0x18
  016ac	e3a03001	 mov         r3, #1
  016b0	e5823000	 str         r3, [r2]
  016b4		 |$LN30@OEMInterru|

; 494  :     }
; 495  : 
; 496  :     // Acknowledge interrupt on L1
; 497  :     OUTREG32(&g_pIntcL1Regs->CNTL, CNTL_NEW_IRQ);

  016b4	e59f30e0	 ldr         r3, [pc, #0xE0]
  016b8	e5933000	 ldr         r3, [r3]
  016bc	e2832018	 add         r2, r3, #0x18
  016c0	e3a03001	 mov         r3, #1
  016c4	e5823000	 str         r3, [r2]

; 498  : 
; 499  :     // Check if this is timer IRQ
; 500  :     if (irq == g_oalTimerIrq) {

  016c8	e59d200c	 ldr         r2, [sp, #0xC]
  016cc	e59f30d4	 ldr         r3, [pc, #0xD4]
  016d0	e5933000	 ldr         r3, [r3]
  016d4	e1520003	 cmp         r2, r3
  016d8	1a000008	 bne         |$LN5@OEMInterru|

; 501  :          // Call timer interrupt handler
; 502  : 
; 503  :         sysIntr = OALTimerIntrHandler(ra);

  016dc	e59d0030	 ldr         r0, [sp, #0x30]
  016e0	eb000000	 bl          OALTimerIntrHandler
  016e4	e58d0020	 str         r0, [sp, #0x20]
  016e8	e59d3020	 ldr         r3, [sp, #0x20]
  016ec	e58d3000	 str         r3, [sp]

; 504  :         // We are done with interrupt
; 505  :         OALIntrDoneIrqs(1, &irq);

  016f0	e28d100c	 add         r1, sp, #0xC
  016f4	e3a00001	 mov         r0, #1
  016f8	eb000000	 bl          OALIntrDoneIrqs
  016fc	ea000020	 b           |$LN4@OEMInterru|
  01700		 |$LN5@OEMInterru|

; 506  :     } else if (irq == g_oalProfilerIrq && g_oalProfilerEnabled == TRUE) {

  01700	e59d200c	 ldr         r2, [sp, #0xC]
  01704	e59f3098	 ldr         r3, [pc, #0x98]
  01708	e5933000	 ldr         r3, [r3]
  0170c	e1520003	 cmp         r2, r3
  01710	1a000013	 bne         |$LN3@OEMInterru|
  01714	e59f3084	 ldr         r3, [pc, #0x84]
  01718	e5933000	 ldr         r3, [r3]
  0171c	e3530001	 cmp         r3, #1
  01720	1a00000f	 bne         |$LN3@OEMInterru|

; 507  :         // Call profiler and reenable interrupt
; 508  :         ProfilerHit(ra);

  01724	e59d0030	 ldr         r0, [sp, #0x30]
  01728	eb000000	 bl          ProfilerHit

; 509  :         CLRREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  0172c	e59f3068	 ldr         r3, [pc, #0x68]
  01730	e5933000	 ldr         r3, [r3]
  01734	e2831004	 add         r1, r3, #4
  01738	e59d200c	 ldr         r2, [sp, #0xC]
  0173c	e3a03001	 mov         r3, #1
  01740	e1a03213	 mov         r3, r3, lsl r2
  01744	e1e02003	 mvn         r2, r3
  01748	e5913000	 ldr         r3, [r1]
  0174c	e0032002	 and         r2, r3, r2
  01750	e59f3044	 ldr         r3, [pc, #0x44]
  01754	e5933000	 ldr         r3, [r3]
  01758	e2833004	 add         r3, r3, #4
  0175c	e5832000	 str         r2, [r3]
  01760	ea000007	 b           |$LN2@OEMInterru|
  01764		 |$LN3@OEMInterru|

; 510  :     } else if (irq != OAL_INTR_IRQ_UNDEFINED) {

  01764	e59d300c	 ldr         r3, [sp, #0xC]
  01768	e3730001	 cmn         r3, #1
  0176c	0a000004	 beq         |$LN1@OEMInterru|

; 511  :         // We don't assume IRQ sharing, use static mapping
; 512  :         sysIntr = OALIntrTranslateIrq(irq);

  01770	e59d000c	 ldr         r0, [sp, #0xC]
  01774	eb000000	 bl          OALIntrTranslateIrq
  01778	e58d0024	 str         r0, [sp, #0x24]
  0177c	e59d3024	 ldr         r3, [sp, #0x24]
  01780	e58d3000	 str         r3, [sp]
  01784		 |$LN1@OEMInterru|
  01784		 |$LN2@OEMInterru|
  01784		 |$LN4@OEMInterru|

; 513  :     }
; 514  :     
; 515  :     return sysIntr;

  01784	e59d3000	 ldr         r3, [sp]
  01788	e58d3018	 str         r3, [sp, #0x18]

; 516  : }

  0178c	e59d0018	 ldr         r0, [sp, #0x18]
  01790	e28dd028	 add         sp, sp, #0x28
  01794	e89d6000	 ldmia       sp, {sp, lr}
  01798	e12fff1e	 bx          lr
  0179c		 |$LN44@OEMInterru|
  0179c		 |$LN45@OEMInterru|
  0179c	00000000	 DCD         |g_pIntcL1Regs|
  017a0		 |$LN46@OEMInterru|
  017a0	00000000	 DCD         |g_oalProfilerEnabled|
  017a4		 |$LN47@OEMInterru|
  017a4	00000000	 DCD         |g_oalProfilerIrq|
  017a8		 |$LN48@OEMInterru|
  017a8	00000000	 DCD         |g_oalTimerIrq|
  017ac		 |$LN49@OEMInterru|
  017ac	00000000	 DCD         |g_pIntcL2ARegs|
  017b0		 |$LN50@OEMInterru|
  017b0	00000000	 DCD         |g_pIntcL2DRegs|
  017b4		 |$LN51@OEMInterru|
  017b4	00000000	 DCD         |g_pIntcL2CRegs|
  017b8		 |$LN52@OEMInterru|
  017b8	00000000	 DCD         |g_pIntcL2BRegs|
  017bc		 |$LN53@OEMInterru|
  017bc	00000000	 DCD         |g_pMPUIORegs|
  017c0		 |$LN54@OEMInterru|
  017c0	00000000	 DCD         |g_pGPIO4Regs|
  017c4		 |$LN55@OEMInterru|
  017c4	00000000	 DCD         |g_pGPIO3Regs|
  017c8		 |$LN56@OEMInterru|
  017c8	00000000	 DCD         |g_pGPIO2Regs|
  017cc		 |$LN57@OEMInterru|
  017cc	00000000	 DCD         |g_pGPIO1Regs|
  017d0		 |$M44452|

			 ENDP  ; |OEMInterruptHandler|

	EXPORT	|OALIntrIsIrqPending|

  00030			 AREA	 |.pdata|, PDATA
|$T44476| DCD	|$LN26@OALIntrIsI|
	DCD	0x4000a404
; Function compile flags: /Odtp

  017d0			 AREA	 |.text|, CODE, ARM

  017d0		 |OALIntrIsIrqPending| PROC

; 526  : {

  017d0		 |$LN26@OALIntrIsI|
  017d0	e1a0c00d	 mov         r12, sp
  017d4	e92d0001	 stmdb       sp!, {r0}
  017d8	e92d5000	 stmdb       sp!, {r12, lr}
  017dc	e24dd00c	 sub         sp, sp, #0xC
  017e0		 |$M44473|

; 527  :     BOOL rc = FALSE;

  017e0	e3a03000	 mov         r3, #0
  017e4	e58d3000	 str         r3, [sp]

; 528  : 
; 529  :     if (irq < 32) {

  017e8	e59d3014	 ldr         r3, [sp, #0x14]
  017ec	e3530020	 cmp         r3, #0x20
  017f0	2a000008	 bcs         |$LN19@OALIntrIsI|

; 530  :         rc = INREG32(&g_pIntcL1Regs->ITR) & (1 << irq);

  017f4	e59d2014	 ldr         r2, [sp, #0x14]
  017f8	e3a03001	 mov         r3, #1
  017fc	e1a02213	 mov         r2, r3, lsl r2
  01800	e59f3254	 ldr         r3, [pc, #0x254]
  01804	e5933000	 ldr         r3, [r3]
  01808	e5933000	 ldr         r3, [r3]
  0180c	e0033002	 and         r3, r3, r2
  01810	e58d3000	 str         r3, [sp]
  01814	ea000079	 b           |$LN18@OALIntrIsI|
  01818		 |$LN19@OALIntrIsI|

; 531  :     } else if (irq < 64) {

  01818	e59d3014	 ldr         r3, [sp, #0x14]
  0181c	e3530040	 cmp         r3, #0x40
  01820	2a000009	 bcs         |$LN17@OALIntrIsI|

; 532  :         rc = INREG32(&g_pIntcL2ARegs->ITR) & (1 << (irq - 32));

  01824	e59d3014	 ldr         r3, [sp, #0x14]
  01828	e2432020	 sub         r2, r3, #0x20
  0182c	e3a03001	 mov         r3, #1
  01830	e1a02213	 mov         r2, r3, lsl r2
  01834	e59f321c	 ldr         r3, [pc, #0x21C]
  01838	e5933000	 ldr         r3, [r3]
  0183c	e5933000	 ldr         r3, [r3]
  01840	e0033002	 and         r3, r3, r2
  01844	e58d3000	 str         r3, [sp]
  01848	ea00006c	 b           |$LN16@OALIntrIsI|
  0184c		 |$LN17@OALIntrIsI|

; 533  :     } else if (irq < 96) {

  0184c	e59d3014	 ldr         r3, [sp, #0x14]
  01850	e3530060	 cmp         r3, #0x60
  01854	2a000009	 bcs         |$LN15@OALIntrIsI|

; 534  :         rc = INREG32(&g_pIntcL2BRegs->ITR) & (1 << (irq - 64));

  01858	e59d3014	 ldr         r3, [sp, #0x14]
  0185c	e2432040	 sub         r2, r3, #0x40
  01860	e3a03001	 mov         r3, #1
  01864	e1a02213	 mov         r2, r3, lsl r2
  01868	e59f31e4	 ldr         r3, [pc, #0x1E4]
  0186c	e5933000	 ldr         r3, [r3]
  01870	e5933000	 ldr         r3, [r3]
  01874	e0033002	 and         r3, r3, r2
  01878	e58d3000	 str         r3, [sp]
  0187c	ea00005f	 b           |$LN14@OALIntrIsI|
  01880		 |$LN15@OALIntrIsI|

; 535  :     } else if (irq < 128) {

  01880	e59d3014	 ldr         r3, [sp, #0x14]
  01884	e3530080	 cmp         r3, #0x80
  01888	2a000009	 bcs         |$LN13@OALIntrIsI|

; 536  :         rc = INREG32(&g_pIntcL2CRegs->ITR) & (1 << (irq - 96));

  0188c	e59d3014	 ldr         r3, [sp, #0x14]
  01890	e2432060	 sub         r2, r3, #0x60
  01894	e3a03001	 mov         r3, #1
  01898	e1a02213	 mov         r2, r3, lsl r2
  0189c	e59f31ac	 ldr         r3, [pc, #0x1AC]
  018a0	e5933000	 ldr         r3, [r3]
  018a4	e5933000	 ldr         r3, [r3]
  018a8	e0033002	 and         r3, r3, r2
  018ac	e58d3000	 str         r3, [sp]
  018b0	ea000052	 b           |$LN12@OALIntrIsI|
  018b4		 |$LN13@OALIntrIsI|

; 537  :     } else if(irq < 160){

  018b4	e59d3014	 ldr         r3, [sp, #0x14]
  018b8	e35300a0	 cmp         r3, #0xA0
  018bc	2a000009	 bcs         |$LN11@OALIntrIsI|

; 538  :         rc = INREG32(&g_pIntcL2DRegs->ITR) & (1 << (irq - 128));

  018c0	e59d3014	 ldr         r3, [sp, #0x14]
  018c4	e2432080	 sub         r2, r3, #0x80
  018c8	e3a03001	 mov         r3, #1
  018cc	e1a02213	 mov         r2, r3, lsl r2
  018d0	e59f3174	 ldr         r3, [pc, #0x174]
  018d4	e5933000	 ldr         r3, [r3]
  018d8	e5933000	 ldr         r3, [r3]
  018dc	e0033002	 and         r3, r3, r2
  018e0	e58d3000	 str         r3, [sp]
  018e4	ea000045	 b           |$LN10@OALIntrIsI|
  018e8		 |$LN11@OALIntrIsI|

; 539  :     } else if (irq < IRQ_GPIO_16) {

  018e8	e59d3014	 ldr         r3, [sp, #0x14]
  018ec	e35300b0	 cmp         r3, #0xB0
  018f0	2a00000a	 bcs         |$LN9@OALIntrIsI|

; 540  :         rc = INREG32(&g_pGPIO1Regs->IRQSTATUS1) & (1 << (irq - IRQ_GPIO_0));

  018f4	e59f314c	 ldr         r3, [pc, #0x14C]
  018f8	e5933000	 ldr         r3, [r3]
  018fc	e2831018	 add         r1, r3, #0x18
  01900	e59d3014	 ldr         r3, [sp, #0x14]
  01904	e24320a0	 sub         r2, r3, #0xA0
  01908	e3a03001	 mov         r3, #1
  0190c	e1a02213	 mov         r2, r3, lsl r2
  01910	e5913000	 ldr         r3, [r1]
  01914	e0033002	 and         r3, r3, r2
  01918	e58d3000	 str         r3, [sp]
  0191c	ea000037	 b           |$LN8@OALIntrIsI|
  01920		 |$LN9@OALIntrIsI|

; 541  :     } else if (irq < IRQ_GPIO_32) {

  01920	e59d3014	 ldr         r3, [sp, #0x14]
  01924	e35300c0	 cmp         r3, #0xC0
  01928	2a00000a	 bcs         |$LN7@OALIntrIsI|

; 542  :         rc = INREG32(&g_pGPIO2Regs->IRQSTATUS1) & (1 << (irq - IRQ_GPIO_16));

  0192c	e59f3110	 ldr         r3, [pc, #0x110]
  01930	e5933000	 ldr         r3, [r3]
  01934	e2831018	 add         r1, r3, #0x18
  01938	e59d3014	 ldr         r3, [sp, #0x14]
  0193c	e24320b0	 sub         r2, r3, #0xB0
  01940	e3a03001	 mov         r3, #1
  01944	e1a02213	 mov         r2, r3, lsl r2
  01948	e5913000	 ldr         r3, [r1]
  0194c	e0033002	 and         r3, r3, r2
  01950	e58d3000	 str         r3, [sp]
  01954	ea000029	 b           |$LN6@OALIntrIsI|
  01958		 |$LN7@OALIntrIsI|

; 543  :     } else if (irq < IRQ_GPIO_48) {

  01958	e59d3014	 ldr         r3, [sp, #0x14]
  0195c	e35300d0	 cmp         r3, #0xD0
  01960	2a00000a	 bcs         |$LN5@OALIntrIsI|

; 544  :         rc = INREG32(&g_pGPIO3Regs->IRQSTATUS1) & (1 << (irq - IRQ_GPIO_32));

  01964	e59f30d4	 ldr         r3, [pc, #0xD4]
  01968	e5933000	 ldr         r3, [r3]
  0196c	e2831018	 add         r1, r3, #0x18
  01970	e59d3014	 ldr         r3, [sp, #0x14]
  01974	e24320c0	 sub         r2, r3, #0xC0
  01978	e3a03001	 mov         r3, #1
  0197c	e1a02213	 mov         r2, r3, lsl r2
  01980	e5913000	 ldr         r3, [r1]
  01984	e0033002	 and         r3, r3, r2
  01988	e58d3000	 str         r3, [sp]
  0198c	ea00001b	 b           |$LN4@OALIntrIsI|
  01990		 |$LN5@OALIntrIsI|

; 545  :     } else if (irq < IRQ_MPUIO_0) {

  01990	e59d3014	 ldr         r3, [sp, #0x14]
  01994	e35300e0	 cmp         r3, #0xE0
  01998	2a00000a	 bcs         |$LN3@OALIntrIsI|

; 546  :         rc = INREG32(&g_pGPIO4Regs->IRQSTATUS1) & (1 << (irq - IRQ_GPIO_48));

  0199c	e59f3098	 ldr         r3, [pc, #0x98]
  019a0	e5933000	 ldr         r3, [r3]
  019a4	e2831018	 add         r1, r3, #0x18
  019a8	e59d3014	 ldr         r3, [sp, #0x14]
  019ac	e24320d0	 sub         r2, r3, #0xD0
  019b0	e3a03001	 mov         r3, #1
  019b4	e1a02213	 mov         r2, r3, lsl r2
  019b8	e5913000	 ldr         r3, [r1]
  019bc	e0033002	 and         r3, r3, r2
  019c0	e58d3000	 str         r3, [sp]
  019c4	ea00000d	 b           |$LN2@OALIntrIsI|
  019c8		 |$LN3@OALIntrIsI|

; 547  :     } else if (irq < OMAP5912_IRQ_MAXIMUM) {

  019c8	e59d3014	 ldr         r3, [sp, #0x14]
  019cc	e35300f0	 cmp         r3, #0xF0
  019d0	2a00000a	 bcs         |$LN1@OALIntrIsI|

; 548  :         rc = INREG16(&g_pMPUIORegs->IO_INT_STAT) & (1 << (irq - IRQ_MPUIO_0));

  019d4	e59f305c	 ldr         r3, [pc, #0x5C]
  019d8	e5933000	 ldr         r3, [r3]
  019dc	e2833024	 add         r3, r3, #0x24
  019e0	e1d330b0	 ldrh        r3, [r3]
  019e4	e1a01003	 mov         r1, r3
  019e8	e59d3014	 ldr         r3, [sp, #0x14]
  019ec	e24320e0	 sub         r2, r3, #0xE0
  019f0	e3a03001	 mov         r3, #1
  019f4	e1a03213	 mov         r3, r3, lsl r2
  019f8	e0013003	 and         r3, r1, r3
  019fc	e58d3000	 str         r3, [sp]
  01a00		 |$LN1@OALIntrIsI|
  01a00		 |$LN2@OALIntrIsI|
  01a00		 |$LN4@OALIntrIsI|
  01a00		 |$LN6@OALIntrIsI|
  01a00		 |$LN8@OALIntrIsI|
  01a00		 |$LN10@OALIntrIsI|
  01a00		 |$LN12@OALIntrIsI|
  01a00		 |$LN14@OALIntrIsI|
  01a00		 |$LN16@OALIntrIsI|
  01a00		 |$LN18@OALIntrIsI|

; 549  :     }
; 550  : 
; 551  :     return (rc != 0);

  01a00	e59d3000	 ldr         r3, [sp]
  01a04	e3530000	 cmp         r3, #0
  01a08	0a000002	 beq         |$LN22@OALIntrIsI|
  01a0c	e3a03001	 mov         r3, #1
  01a10	e58d3008	 str         r3, [sp, #8]
  01a14	ea000001	 b           |$LN23@OALIntrIsI|
  01a18		 |$LN22@OALIntrIsI|
  01a18	e3a03000	 mov         r3, #0
  01a1c	e58d3008	 str         r3, [sp, #8]
  01a20		 |$LN23@OALIntrIsI|
  01a20	e59d3008	 ldr         r3, [sp, #8]
  01a24	e58d3004	 str         r3, [sp, #4]

; 552  : }

  01a28	e59d0004	 ldr         r0, [sp, #4]
  01a2c	e28dd00c	 add         sp, sp, #0xC
  01a30	e89d6000	 ldmia       sp, {sp, lr}
  01a34	e12fff1e	 bx          lr
  01a38		 |$LN27@OALIntrIsI|
  01a38		 |$LN28@OALIntrIsI|
  01a38	00000000	 DCD         |g_pMPUIORegs|
  01a3c		 |$LN29@OALIntrIsI|
  01a3c	00000000	 DCD         |g_pGPIO4Regs|
  01a40		 |$LN30@OALIntrIsI|
  01a40	00000000	 DCD         |g_pGPIO3Regs|
  01a44		 |$LN31@OALIntrIsI|
  01a44	00000000	 DCD         |g_pGPIO2Regs|
  01a48		 |$LN32@OALIntrIsI|
  01a48	00000000	 DCD         |g_pGPIO1Regs|
  01a4c		 |$LN33@OALIntrIsI|
  01a4c	00000000	 DCD         |g_pIntcL2DRegs|
  01a50		 |$LN34@OALIntrIsI|
  01a50	00000000	 DCD         |g_pIntcL2CRegs|
  01a54		 |$LN35@OALIntrIsI|
  01a54	00000000	 DCD         |g_pIntcL2BRegs|
  01a58		 |$LN36@OALIntrIsI|
  01a58	00000000	 DCD         |g_pIntcL2ARegs|
  01a5c		 |$LN37@OALIntrIsI|
  01a5c	00000000	 DCD         |g_pIntcL1Regs|
  01a60		 |$M44474|

			 ENDP  ; |OALIntrIsIrqPending|

	END
