; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\OMAP5912_MS_V1\OAL\INTR\intr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_oalTimerIrq| [ DATA ]

  00000			 AREA	 |.data|, DATA
|g_oalTimerIrq| DCD 0xffffffff
	%	4
|g_intcL1Level| DCD 0x42
	DCD	0x42
	DCD	0x43
	DCD	0x43
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x40
	DCD	0x40
|g_intcL2ALevel| DCD 0x42
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
|g_intcL2BLevel| DCD 0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
|g_intcL2CLevel| DCD 0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x40
	DCD	0x42
|g_intcL2DLevel| DCD 0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42
	DCD	0x42

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALIntrRequestIrqs|
	EXPORT	|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|BSPIntrRequestIrqs|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
; File c:\wince600\platform\common\src\soc\omap5912_ms_v1\oal\intr\intr.c

  00000			 AREA	 |.pdata|, PDATA
|$T44397| DCD	|$LN19@OALIntrReq|
	DCD	0x40003702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, "-", 0x0, ">", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrRequestIrqs| PROC

; 248  : {

  00000		 |$LN19@OALIntrReq|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M44394|
  00008	e1a09002	 mov         r9, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a06000	 mov         r6, r0

; 249  :     BOOL rc = FALSE;
; 250  : 
; 251  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 252  :         L"+OALIntrRequestIrqs(0x%08x->%d/%d/0x%08x/%d, 0x%08x, 0x%08x)\r\n",
; 253  :         pDevLoc, pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc,
; 254  :         pDevLoc->Pin, pCount, pIrqs
; 255  :     ));

  00014	e59f80bc	 ldr         r8, [pc, #0xBC]
  00018	e3a05000	 mov         r5, #0
  0001c	e598e440	 ldr         lr, [r8, #0x440]
  00020	e31e0901	 tst         lr, #1, 18
  00024	0a00000d	 beq         |$LN11@OALIntrReq|
  00028	e31e0004	 tst         lr, #4
  0002c	0a00000b	 beq         |$LN11@OALIntrReq|
  00030	e596e010	 ldr         lr, [r6, #0x10]
  00034	e5964008	 ldr         r4, [r6, #8]
  00038	e5963004	 ldr         r3, [r6, #4]
  0003c	e5962000	 ldr         r2, [r6]
  00040	e59f008c	 ldr         r0, [pc, #0x8C]
  00044	e1a01006	 mov         r1, r6
  00048	e58de004	 str         lr, [sp, #4]
  0004c	e58d4000	 str         r4, [sp]
  00050	e58d900c	 str         r9, [sp, #0xC]
  00054	e58d7008	 str         r7, [sp, #8]
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	e598e440	 ldr         lr, [r8, #0x440]
  00060		 |$LN11@OALIntrReq|

; 256  : 
; 257  :     // This shouldn't happen
; 258  :     if (*pCount < 1) goto cleanUp;

  00060	e5973000	 ldr         r3, [r7]
  00064	e3530001	 cmp         r3, #1
  00068	3a00000f	 bcc         |$cleanUp$43994|

; 259  : 
; 260  :     switch (pDevLoc->IfcType) {

  0006c	e5963000	 ldr         r3, [r6]
  00070	e3530000	 cmp         r3, #0

; 261  :     case Internal:
; 262  :         switch ((ULONG)pDevLoc->LogicalLoc) {

  00074	05963008	 ldreq       r3, [r6, #8]
  00078	03730913	 cmneq       r3, #0x13, 18

; 263  :         case OMAP5912_USBD_REGS_PA:
; 264  :             *pCount = 1;

  0007c	03a03001	 moveq       r3, #1
  00080	05873000	 streq       r3, [r7]

; 265  :             pIrqs[0] = IRQ_USB;

  00084	03a0303e	 moveq       r3, #0x3E
  00088	05893000	 streq       r3, [r9]

; 266  :             rc = TRUE;
; 267  :             break;
; 268  :         }
; 269  :         break;
; 270  :     }
; 271  :             
; 272  : #ifdef OAL_BSP_CALLBACKS
; 273  :     if (!rc) rc = BSPIntrRequestIrqs(pDevLoc, pCount, pIrqs);

  0008c	03a05001	 moveq       r5, #1
  00090	0a000004	 beq         |$LN16@OALIntrReq|
  00094	e1a02009	 mov         r2, r9
  00098	e1a01007	 mov         r1, r7
  0009c	e1a00006	 mov         r0, r6
  000a0	eb000000	 bl          BSPIntrRequestIrqs
  000a4	e1a05000	 mov         r5, r0
  000a8		 |$LN16@OALIntrReq|
  000a8	e598e440	 ldr         lr, [r8, #0x440]
  000ac		 |$cleanUp$43994|

; 274  : #endif
; 275  : 
; 276  : cleanUp:
; 277  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrRequestIrqs(rc = %d)\r\n", rc));

  000ac	e31e0901	 tst         lr, #1, 18
  000b0	131e0004	 tstne       lr, #4
  000b4	159f0014	 ldrne       r0, [pc, #0x14]
  000b8	11a01005	 movne       r1, r5
  000bc	1b000000	 blne        NKDbgPrintfW

; 278  :     return rc;
; 279  : }

  000c0	e1a00005	 mov         r0, r5
  000c4	e28dd010	 add         sp, sp, #0x10
  000c8	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$LN20@OALIntrReq|
  000d0		 |$LN21@OALIntrReq|
  000d0	00000000	 DCD         |??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000d4		 |$LN22@OALIntrReq|
  000d4	00000000	 DCD         |??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@|
  000d8		 |$LN23@OALIntrReq|
  000d8	00000000	 DCD         |dpCurSettings|
  000dc		 |$M44395|

			 ENDP  ; |OALIntrRequestIrqs|

	EXPORT	|OALIntrEnableIrqs|
	EXPORT	|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.bss|, NOINIT
|g_pIntcL1Regs| % 0x4
|g_pIntcL1Regs| % 0x4
|g_pIntcL2ARegs| % 0x4
|g_pIntcL2BRegs| % 0x4
|g_pIntcL2CRegs| % 0x4
|g_pIntcL2DRegs| % 0x4
|g_pGPIO1Regs| % 0x4
|g_pGPIO2Regs| % 0x4
|g_pGPIO3Regs| % 0x4
|g_pGPIO4Regs| % 0x4
|g_pMPUIORegs| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T44421| DCD	|$LN36@OALIntrEna|
	DCD	0x40009d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrEnableIrqs| PROC

; 286  : {

  00000		 |$LN36@OALIntrEna|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M44418|
  00008	e1a07001	 mov         r7, r1
  0000c	e1a04000	 mov         r4, r0

; 287  :     BOOL rc = TRUE;
; 288  :     UINT32 irq, i;
; 289  : 
; 290  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 291  :         L"+OALntrEnableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 292  :     ));

  00010	e59f5250	 ldr         r5, [pc, #0x250]
  00014	e3a06001	 mov         r6, #1
  00018	e5953440	 ldr         r3, [r5, #0x440]
  0001c	e3130901	 tst         r3, #1, 18
  00020	0a000006	 beq         |$LN27@OALIntrEna|
  00024	e3130902	 tst         r3, #2, 18
  00028	0a000004	 beq         |$LN27@OALIntrEna|
  0002c	e59f023c	 ldr         r0, [pc, #0x23C]
  00030	e1a02007	 mov         r2, r7
  00034	e1a01004	 mov         r1, r4
  00038	eb000000	 bl          NKDbgPrintfW
  0003c	e5953440	 ldr         r3, [r5, #0x440]
  00040		 |$LN27@OALIntrEna|

; 293  : 
; 294  :     for (i = 0; i < count; i++) {

  00040	e3540000	 cmp         r4, #0
  00044	0a00007d	 beq         |$LN22@OALIntrEna|
  00048	e59f321c	 ldr         r3, [pc, #0x21C]
  0004c	e5932024	 ldr         r2, [r3, #0x24]
  00050	e5930000	 ldr         r0, [r3]
  00054	e593e020	 ldr         lr, [r3, #0x20]
  00058	e5931014	 ldr         r1, [r3, #0x14]
  0005c	e5938008	 ldr         r8, [r3, #8]
  00060	e5939018	 ldr         r9, [r3, #0x18]
  00064	e593a00c	 ldr         r10, [r3, #0xC]
  00068	e593b01c	 ldr         r11, [r3, #0x1C]
  0006c	e58d2000	 str         r2, [sp]
  00070	e5932010	 ldr         r2, [r3, #0x10]
  00074	e5933004	 ldr         r3, [r3, #4]

; 295  :         irq = pIrqs[i];
; 296  :         if (irq < 32) {
; 297  :             CLRREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  00078	e59d5000	 ldr         r5, [sp]
  0007c	e58d2004	 str         r2, [sp, #4]
  00080	e58d3008	 str         r3, [sp, #8]
  00084		 |$LL24@OALIntrEna|
  00084	e5972000	 ldr         r2, [r7]
  00088	e3520020	 cmp         r2, #0x20
  0008c	35903004	 ldrcc       r3, [r0, #4]
  00090	33a05001	 movcc       r5, #1
  00094	31c33215	 biccc       r3, r3, r5, lsl r2

; 320  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  00098	359d5000	 ldrcc       r5, [sp]
  0009c	35803004	 strcc       r3, [r0, #4]
  000a0	3a000061	 bcc         |$LN23@OALIntrEna|
  000a4	e3520040	 cmp         r2, #0x40
  000a8	359e3004	 ldrcc       r3, [lr, #4]
  000ac	32422020	 subcc       r2, r2, #0x20
  000b0	33a05001	 movcc       r5, #1
  000b4	31c33215	 biccc       r3, r3, r5, lsl r2
  000b8	359d5000	 ldrcc       r5, [sp]
  000bc	358e3004	 strcc       r3, [lr, #4]
  000c0	3a000059	 bcc         |$LN23@OALIntrEna|
  000c4	e3520060	 cmp         r2, #0x60
  000c8	35913004	 ldrcc       r3, [r1, #4]
  000cc	32422040	 subcc       r2, r2, #0x40
  000d0	33a05001	 movcc       r5, #1
  000d4	31c33215	 biccc       r3, r3, r5, lsl r2
  000d8	359d5000	 ldrcc       r5, [sp]
  000dc	35813004	 strcc       r3, [r1, #4]
  000e0	3a000051	 bcc         |$LN23@OALIntrEna|
  000e4	e3520080	 cmp         r2, #0x80
  000e8	35983004	 ldrcc       r3, [r8, #4]
  000ec	32422060	 subcc       r2, r2, #0x60
  000f0	33a05001	 movcc       r5, #1
  000f4	31c33215	 biccc       r3, r3, r5, lsl r2
  000f8	359d5000	 ldrcc       r5, [sp]
  000fc	35883004	 strcc       r3, [r8, #4]
  00100	3a000049	 bcc         |$LN23@OALIntrEna|
  00104	e35200a0	 cmp         r2, #0xA0
  00108	35993004	 ldrcc       r3, [r9, #4]
  0010c	32422080	 subcc       r2, r2, #0x80
  00110	33a05001	 movcc       r5, #1
  00114	31c33215	 biccc       r3, r3, r5, lsl r2
  00118	359d5000	 ldrcc       r5, [sp]
  0011c	35893004	 strcc       r3, [r9, #4]
  00120	3a000041	 bcc         |$LN23@OALIntrEna|

; 298  :         } else if (irq < 64) {
; 299  :             CLRREG32(&g_pIntcL2ARegs->MIR, 1 << (irq - 32));
; 300  :         } else if (irq < 96) {
; 301  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (irq - 64));
; 302  :         } else if (irq < 128) {
; 303  :             CLRREG32(&g_pIntcL2CRegs->MIR, 1 << (irq - 96));
; 304  :         } else if (irq < 160) {
; 305  :             CLRREG32(&g_pIntcL2DRegs->MIR, 1 << (irq - 128));
; 306  :         } else if (irq < IRQ_GPIO_16) {

  00124	e35200b0	 cmp         r2, #0xB0
  00128	2a000009	 bcs         |$LN11@OALIntrEna|

; 307  :             CLRREG32(&g_pIntcL1Regs->MIR, 1 << IRQ_GPIO1);

  0012c	e5903004	 ldr         r3, [r0, #4]

; 308  :             SETREG32(&g_pGPIO1Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_0));

  00130	e24220a0	 sub         r2, r2, #0xA0
  00134	e3a05001	 mov         r5, #1
  00138	e3c33901	 bic         r3, r3, #1, 18
  0013c	e5803004	 str         r3, [r0, #4]
  00140	e59a301c	 ldr         r3, [r10, #0x1C]
  00144	e1833215	 orr         r3, r3, r5, lsl r2

; 320  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  00148	e59d5000	 ldr         r5, [sp]
  0014c	e58a301c	 str         r3, [r10, #0x1C]
  00150	ea000035	 b           |$LN23@OALIntrEna|
  00154		 |$LN11@OALIntrEna|

; 309  :         } else if (irq < IRQ_GPIO_32) {

  00154	e35200c0	 cmp         r2, #0xC0
  00158	2a000009	 bcs         |$LN9@OALIntrEna|

; 310  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (IRQ_GPIO2-64));

  0015c	e5913004	 ldr         r3, [r1, #4]

; 311  :             SETREG32(&g_pGPIO2Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_16));

  00160	e24220b0	 sub         r2, r2, #0xB0
  00164	e3a05001	 mov         r5, #1
  00168	e3c33c01	 bic         r3, r3, #1, 24
  0016c	e5813004	 str         r3, [r1, #4]
  00170	e59b301c	 ldr         r3, [r11, #0x1C]
  00174	e1833215	 orr         r3, r3, r5, lsl r2

; 320  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  00178	e59d5000	 ldr         r5, [sp]
  0017c	e58b301c	 str         r3, [r11, #0x1C]
  00180	ea000029	 b           |$LN23@OALIntrEna|
  00184		 |$LN9@OALIntrEna|

; 312  :         } else if (irq < IRQ_GPIO_48) {

  00184	e35200d0	 cmp         r2, #0xD0
  00188	2a000009	 bcs         |$LN7@OALIntrEna|

; 313  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (IRQ_GPIO3-64));

  0018c	e5913004	 ldr         r3, [r1, #4]

; 314  :             SETREG32(&g_pGPIO3Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_32));

  00190	e24220c0	 sub         r2, r2, #0xC0
  00194	e3c33c02	 bic         r3, r3, #2, 24
  00198	e5813004	 str         r3, [r1, #4]
  0019c	e595301c	 ldr         r3, [r5, #0x1C]
  001a0	e3a05001	 mov         r5, #1
  001a4	e1833215	 orr         r3, r3, r5, lsl r2
  001a8	e59d5000	 ldr         r5, [sp]
  001ac	e585301c	 str         r3, [r5, #0x1C]
  001b0	ea00001d	 b           |$LN23@OALIntrEna|
  001b4		 |$LN7@OALIntrEna|

; 315  :         } else if (irq < IRQ_MPUIO_0) {

  001b4	e35200e0	 cmp         r2, #0xE0
  001b8	2a00000b	 bcs         |$LN5@OALIntrEna|

; 316  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (IRQ_GPIO4-64));

  001bc	e5913004	 ldr         r3, [r1, #4]

; 317  :             SETREG32(&g_pGPIO4Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_48));

  001c0	e24220d0	 sub         r2, r2, #0xD0
  001c4	e3a05001	 mov         r5, #1
  001c8	e3c33801	 bic         r3, r3, #1, 16
  001cc	e5813004	 str         r3, [r1, #4]
  001d0	e59d3004	 ldr         r3, [sp, #4]
  001d4	e593301c	 ldr         r3, [r3, #0x1C]
  001d8	e1833215	 orr         r3, r3, r5, lsl r2
  001dc	e59d2004	 ldr         r2, [sp, #4]

; 320  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  001e0	e59d5000	 ldr         r5, [sp]
  001e4	e582301c	 str         r3, [r2, #0x1C]
  001e8	ea00000f	 b           |$LN23@OALIntrEna|
  001ec		 |$LN5@OALIntrEna|

; 318  :         } else if (irq < OMAP5912_IRQ_MAXIMUM) {

  001ec	e35200f0	 cmp         r2, #0xF0
  001f0	2a00000b	 bcs         |$LN3@OALIntrEna|

; 319  :             CLRREG32(&g_pIntcL2ARegs->MIR, 1 << (IRQ_MPUIO-32));

  001f4	e59e3004	 ldr         r3, [lr, #4]

; 320  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  001f8	e24220e0	 sub         r2, r2, #0xE0
  001fc	e3a05001	 mov         r5, #1
  00200	e3c33020	 bic         r3, r3, #0x20
  00204	e58e3004	 str         r3, [lr, #4]
  00208	e59d3008	 ldr         r3, [sp, #8]
  0020c	e1d332bc	 ldrh        r3, [r3, #0x2C]
  00210	e1c33215	 bic         r3, r3, r5, lsl r2
  00214	e59d2008	 ldr         r2, [sp, #8]
  00218	e59d5000	 ldr         r5, [sp]
  0021c	e1c232bc	 strh        r3, [r2, #0x2C]
  00220	ea000001	 b           |$LN23@OALIntrEna|
  00224		 |$LN3@OALIntrEna|

; 321  :         } else if (irq != OAL_INTR_IRQ_UNDEFINED) {

  00224	e3720001	 cmn         r2, #1

; 322  :             rc = FALSE;

  00228	13a06000	 movne       r6, #0
  0022c		 |$LN23@OALIntrEna|
  0022c	e2877004	 add         r7, r7, #4
  00230	e2544001	 subs        r4, r4, #1
  00234	1affff92	 bne         |$LL24@OALIntrEna|
  00238	e59f5028	 ldr         r5, [pc, #0x28]
  0023c	e5953440	 ldr         r3, [r5, #0x440]
  00240		 |$LN22@OALIntrEna|

; 323  :         }
; 324  :     }
; 325  : 
; 326  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrEnableIrqs(rc = %d)\r\n", rc));

  00240	e3130901	 tst         r3, #1, 18
  00244	13130902	 tstne       r3, #2, 18
  00248	159f0014	 ldrne       r0, [pc, #0x14]
  0024c	11a01006	 movne       r1, r6
  00250	1b000000	 blne        NKDbgPrintfW

; 327  :     return rc;
; 328  : }

  00254	e1a00006	 mov         r0, r6
  00258	e28dd00c	 add         sp, sp, #0xC
  0025c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00260	e12fff1e	 bx          lr
  00264		 |$LN37@OALIntrEna|
  00264		 |$LN38@OALIntrEna|
  00264	00000000	 DCD         |??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00268		 |$LN39@OALIntrEna|
  00268	00000000	 DCD         |dpCurSettings|
  0026c		 |$LN40@OALIntrEna|
  0026c	00000000	 DCD         |g_pIntcL1Regs|
  00270		 |$LN41@OALIntrEna|
  00270	00000000	 DCD         |??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00274		 |$M44419|

			 ENDP  ; |OALIntrEnableIrqs|

	EXPORT	|OALIntrDisableIrqs|
	EXPORT	|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44444| DCD	|$LN35@OALIntrDis|
	DCD	0x40007702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrDisableIrqs| PROC

; 335  : {

  00000		 |$LN35@OALIntrDis|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M44441|
  00008	e1a06001	 mov         r6, r1
  0000c	e1a04000	 mov         r4, r0

; 336  :     UINT32 irq, i;
; 337  : 
; 338  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 339  :         L"+OALIntrDisableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 340  :     ));

  00010	e59f51b8	 ldr         r5, [pc, #0x1B8]
  00014	e5953440	 ldr         r3, [r5, #0x440]
  00018	e3130901	 tst         r3, #1, 18
  0001c	0a000006	 beq         |$LN25@OALIntrDis|
  00020	e3130004	 tst         r3, #4
  00024	0a000004	 beq         |$LN25@OALIntrDis|
  00028	e59f01a8	 ldr         r0, [pc, #0x1A8]
  0002c	e1a02006	 mov         r2, r6
  00030	e1a01004	 mov         r1, r4
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e5953440	 ldr         r3, [r5, #0x440]
  0003c		 |$LN25@OALIntrDis|

; 341  : 
; 342  :     for (i = 0; i < count; i++) {

  0003c	e3540000	 cmp         r4, #0
  00040	0a00005a	 beq         |$LN20@OALIntrDis|
  00044	e59f3188	 ldr         r3, [pc, #0x188]
  00048	e593201c	 ldr         r2, [r3, #0x1C]
  0004c	e5930000	 ldr         r0, [r3]
  00050	e593e020	 ldr         lr, [r3, #0x20]
  00054	e58d2000	 str         r2, [sp]
  00058	e5932024	 ldr         r2, [r3, #0x24]
  0005c	e5937014	 ldr         r7, [r3, #0x14]
  00060	e5938008	 ldr         r8, [r3, #8]
  00064	e58d2004	 str         r2, [sp, #4]
  00068	e5932010	 ldr         r2, [r3, #0x10]
  0006c	e5939018	 ldr         r9, [r3, #0x18]
  00070	e593b00c	 ldr         r11, [r3, #0xC]
  00074	e593a004	 ldr         r10, [r3, #4]

; 359  :             CLRREG32(&g_pGPIO3Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_32));

  00078	e59d5000	 ldr         r5, [sp]
  0007c	e58d2008	 str         r2, [sp, #8]
  00080	e3a02001	 mov         r2, #1
  00084		 |$LL22@OALIntrDis|
  00084	e5961000	 ldr         r1, [r6]
  00088	e3510020	 cmp         r1, #0x20
  0008c	35903004	 ldrcc       r3, [r0, #4]
  00090	31833112	 orrcc       r3, r3, r2, lsl r1
  00094	35803004	 strcc       r3, [r0, #4]
  00098	3a00003f	 bcc         |$LN21@OALIntrDis|
  0009c	e3510040	 cmp         r1, #0x40
  000a0	359e2004	 ldrcc       r2, [lr, #4]
  000a4	32413020	 subcc       r3, r1, #0x20
  000a8	33a01001	 movcc       r1, #1
  000ac	31823311	 orrcc       r3, r2, r1, lsl r3
  000b0	358e3004	 strcc       r3, [lr, #4]
  000b4	3a000037	 bcc         |$LN31@OALIntrDis|
  000b8	e3510060	 cmp         r1, #0x60
  000bc	35972004	 ldrcc       r2, [r7, #4]
  000c0	32413040	 subcc       r3, r1, #0x40
  000c4	33a01001	 movcc       r1, #1
  000c8	31823311	 orrcc       r3, r2, r1, lsl r3
  000cc	35873004	 strcc       r3, [r7, #4]
  000d0	3a000030	 bcc         |$LN31@OALIntrDis|
  000d4	e3510080	 cmp         r1, #0x80
  000d8	35982004	 ldrcc       r2, [r8, #4]
  000dc	32413060	 subcc       r3, r1, #0x60
  000e0	33a01001	 movcc       r1, #1
  000e4	31823311	 orrcc       r3, r2, r1, lsl r3
  000e8	35883004	 strcc       r3, [r8, #4]
  000ec	3a000029	 bcc         |$LN31@OALIntrDis|
  000f0	e35100a0	 cmp         r1, #0xA0
  000f4	35992004	 ldrcc       r2, [r9, #4]
  000f8	32413080	 subcc       r3, r1, #0x80
  000fc	33a01001	 movcc       r1, #1
  00100	31823311	 orrcc       r3, r2, r1, lsl r3
  00104	35893004	 strcc       r3, [r9, #4]
  00108	3a000022	 bcc         |$LN31@OALIntrDis|
  0010c	e35100b0	 cmp         r1, #0xB0
  00110	359b301c	 ldrcc       r3, [r11, #0x1C]
  00114	324120a0	 subcc       r2, r1, #0xA0
  00118	33a01001	 movcc       r1, #1
  0011c	31c33211	 biccc       r3, r3, r1, lsl r2
  00120	358b301c	 strcc       r3, [r11, #0x1C]
  00124	3a00001b	 bcc         |$LN31@OALIntrDis|
  00128	e35100c0	 cmp         r1, #0xC0
  0012c	3595301c	 ldrcc       r3, [r5, #0x1C]
  00130	324120b0	 subcc       r2, r1, #0xB0
  00134	33a01001	 movcc       r1, #1
  00138	31c33211	 biccc       r3, r3, r1, lsl r2
  0013c	3585301c	 strcc       r3, [r5, #0x1C]
  00140	3a000014	 bcc         |$LN31@OALIntrDis|

; 343  :         irq = pIrqs[i];
; 344  :         if (irq < 32) {
; 345  :             SETREG32(&g_pIntcL1Regs->MIR, 1 << irq);
; 346  :         } else if (irq < 64) {
; 347  :             SETREG32(&g_pIntcL2ARegs->MIR, 1 << (irq - 32));
; 348  :         } else if (irq < 96) {
; 349  :             SETREG32(&g_pIntcL2BRegs->MIR, 1 << (irq - 64));
; 350  :         } else if (irq < 128) {
; 351  :             SETREG32(&g_pIntcL2CRegs->MIR, 1 << (irq - 96));
; 352  :         } else if (irq < 160) {
; 353  :             SETREG32(&g_pIntcL2DRegs->MIR, 1 << (irq - 128));
; 354  :         } else if (irq < IRQ_GPIO_16) {
; 355  :             CLRREG32(&g_pGPIO1Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_0));
; 356  :         } else if (irq < IRQ_GPIO_32) {
; 357  :             CLRREG32(&g_pGPIO2Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_16));
; 358  :         } else if (irq < IRQ_GPIO_48) {

  00144	e35100d0	 cmp         r1, #0xD0
  00148	2a000007	 bcs         |$LN5@OALIntrDis|

; 359  :             CLRREG32(&g_pGPIO3Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_32));

  0014c	e24120c0	 sub         r2, r1, #0xC0
  00150	e59d1004	 ldr         r1, [sp, #4]
  00154		 |$LN32@OALIntrDis|
  00154	e591301c	 ldr         r3, [r1, #0x1C]
  00158	e3a05001	 mov         r5, #1
  0015c	e1c33215	 bic         r3, r3, r5, lsl r2
  00160	e59d5000	 ldr         r5, [sp]
  00164	e581301c	 str         r3, [r1, #0x1C]
  00168	ea00000a	 b           |$LN31@OALIntrDis|
  0016c		 |$LN5@OALIntrDis|

; 360  :         } else if (irq < IRQ_MPUIO_0) {

  0016c	e35100e0	 cmp         r1, #0xE0

; 361  :             CLRREG32(&g_pGPIO4Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_48));

  00170	324120d0	 subcc       r2, r1, #0xD0
  00174	359d1008	 ldrcc       r1, [sp, #8]
  00178	3afffff5	 bcc         |$LN32@OALIntrDis|

; 362  :         } else if (irq < OMAP5912_IRQ_MAXIMUM) {

  0017c	e35100f0	 cmp         r1, #0xF0
  00180	2a000005	 bcs         |$LN21@OALIntrDis|

; 363  :             SETREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  00184	e1da22bc	 ldrh        r2, [r10, #0x2C]
  00188	e24130e0	 sub         r3, r1, #0xE0
  0018c	e3a01001	 mov         r1, #1
  00190	e1823311	 orr         r3, r2, r1, lsl r3
  00194	e1ca32bc	 strh        r3, [r10, #0x2C]
  00198		 |$LN31@OALIntrDis|
  00198	e3a02001	 mov         r2, #1
  0019c		 |$LN21@OALIntrDis|
  0019c	e2866004	 add         r6, r6, #4
  001a0	e2544001	 subs        r4, r4, #1
  001a4	1affffb6	 bne         |$LL22@OALIntrDis|
  001a8	e59f5020	 ldr         r5, [pc, #0x20]
  001ac	e5953440	 ldr         r3, [r5, #0x440]
  001b0		 |$LN20@OALIntrDis|

; 364  :         }
; 365  :     }
; 366  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrDisableIrqs\r\n"));

  001b0	e3130901	 tst         r3, #1, 18
  001b4	13130004	 tstne       r3, #4
  001b8	159f000c	 ldrne       r0, [pc, #0xC]
  001bc	1b000000	 blne        NKDbgPrintfW

; 367  : }

  001c0	e28dd00c	 add         sp, sp, #0xC
  001c4	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001c8	e12fff1e	 bx          lr
  001cc		 |$LN36@OALIntrDis|
  001cc		 |$LN37@OALIntrDis|
  001cc	00000000	 DCD         |??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  001d0		 |$LN38@OALIntrDis|
  001d0	00000000	 DCD         |dpCurSettings|
  001d4		 |$LN39@OALIntrDis|
  001d4	00000000	 DCD         |g_pIntcL1Regs|
  001d8		 |$LN40@OALIntrDis|
  001d8	00000000	 DCD         |??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@|
  001dc		 |$M44442|

			 ENDP  ; |OALIntrDisableIrqs|

	EXPORT	|OALIntrDoneIrqs|
	EXPORT	|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T44465| DCD	|$LN33@OALIntrDon|
	DCD	0x40006f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrDoneIrqs| PROC

; 374  : {

  00000		 |$LN33@OALIntrDon|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M44462|
  00008	e1a05001	 mov         r5, r1
  0000c	e1a04000	 mov         r4, r0

; 375  :     UINT32 irq, i;
; 376  : 
; 377  : 
; 378  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 379  :         L"+OALIntrDoneIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 380  :     ));

  00010	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130901	 tst         r3, #1, 18
  0001c	13130902	 tstne       r3, #2, 18
  00020	159f018c	 ldrne       r0, [pc, #0x18C]
  00024	11a02005	 movne       r2, r5
  00028	11a01004	 movne       r1, r4
  0002c	1b000000	 blne        NKDbgPrintfW

; 381  : 
; 382  :     for (i = 0; i < count; i++) {

  00030	e3540000	 cmp         r4, #0
  00034	0a00005a	 beq         |$LN20@OALIntrDon|
  00038	e59f3170	 ldr         r3, [pc, #0x170]
  0003c	e5930000	 ldr         r0, [r3]
  00040	e5939020	 ldr         r9, [r3, #0x20]
  00044	e593a014	 ldr         r10, [r3, #0x14]
  00048	e593b008	 ldr         r11, [r3, #8]
  0004c	e5932018	 ldr         r2, [r3, #0x18]
  00050	e593e00c	 ldr         lr, [r3, #0xC]
  00054	e593601c	 ldr         r6, [r3, #0x1C]
  00058	e5937024	 ldr         r7, [r3, #0x24]
  0005c	e5938010	 ldr         r8, [r3, #0x10]
  00060	e5933004	 ldr         r3, [r3, #4]
  00064	e58d2004	 str         r2, [sp, #4]
  00068	e3a02001	 mov         r2, #1
  0006c	e58d3000	 str         r3, [sp]
  00070		 |$LL22@OALIntrDon|

; 383  :         irq = pIrqs[i];

  00070	e5951000	 ldr         r1, [r5]

; 384  :         if (irq < 32) {

  00074	e3510020	 cmp         r1, #0x20

; 385  :             CLRREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  00078	35903004	 ldrcc       r3, [r0, #4]
  0007c	31c33112	 biccc       r3, r3, r2, lsl r1
  00080	35803004	 strcc       r3, [r0, #4]
  00084	3a000042	 bcc         |$LN29@OALIntrDon|

; 386  :         } else if (irq < 64) {

  00088	e3510040	 cmp         r1, #0x40

; 387  :             CLRREG32(&g_pIntcL2ARegs->MIR, 1 << (irq - 32));

  0008c	35993004	 ldrcc       r3, [r9, #4]
  00090	32412020	 subcc       r2, r1, #0x20
  00094	33a01001	 movcc       r1, #1
  00098	31c33211	 biccc       r3, r3, r1, lsl r2
  0009c	35893004	 strcc       r3, [r9, #4]
  000a0	3a00003a	 bcc         |$LN30@OALIntrDon|

; 388  :         } else if (irq < 96) {

  000a4	e3510060	 cmp         r1, #0x60

; 389  :             CLRREG32(&g_pIntcL2BRegs->MIR, 1 << (irq - 64));

  000a8	359a3004	 ldrcc       r3, [r10, #4]
  000ac	32412040	 subcc       r2, r1, #0x40
  000b0	33a01001	 movcc       r1, #1
  000b4	31c33211	 biccc       r3, r3, r1, lsl r2
  000b8	358a3004	 strcc       r3, [r10, #4]
  000bc	3a000033	 bcc         |$LN30@OALIntrDon|

; 390  :         } else if (irq < 128) {

  000c0	e3510080	 cmp         r1, #0x80

; 391  :             CLRREG32(&g_pIntcL2CRegs->MIR, 1 << (irq - 96));

  000c4	359b3004	 ldrcc       r3, [r11, #4]
  000c8	32412060	 subcc       r2, r1, #0x60
  000cc	33a01001	 movcc       r1, #1
  000d0	31c33211	 biccc       r3, r3, r1, lsl r2
  000d4	358b3004	 strcc       r3, [r11, #4]
  000d8	3a00002c	 bcc         |$LN30@OALIntrDon|

; 392  :         } else if (irq < 160) {

  000dc	e35100a0	 cmp         r1, #0xA0

; 393  :             CLRREG32(&g_pIntcL2DRegs->MIR, 1 << (irq - 128));

  000e0	32412080	 subcc       r2, r1, #0x80
  000e4	359d1004	 ldrcc       r1, [sp, #4]
  000e8	35913004	 ldrcc       r3, [r1, #4]
  000ec	33a01001	 movcc       r1, #1
  000f0	31c33211	 biccc       r3, r3, r1, lsl r2
  000f4	359d1004	 ldrcc       r1, [sp, #4]
  000f8	35813004	 strcc       r3, [r1, #4]
  000fc	3a000023	 bcc         |$LN30@OALIntrDon|

; 394  :         } else if (irq < IRQ_GPIO_16) {

  00100	e35100b0	 cmp         r1, #0xB0

; 395  :             SETREG32(&g_pGPIO1Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_0));

  00104	359e201c	 ldrcc       r2, [lr, #0x1C]
  00108	324130a0	 subcc       r3, r1, #0xA0
  0010c	33a01001	 movcc       r1, #1
  00110	31823311	 orrcc       r3, r2, r1, lsl r3
  00114	358e301c	 strcc       r3, [lr, #0x1C]
  00118	3a00001c	 bcc         |$LN30@OALIntrDon|

; 396  :         } else if (irq < IRQ_GPIO_32) {

  0011c	e35100c0	 cmp         r1, #0xC0

; 397  :             SETREG32(&g_pGPIO2Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_16));

  00120	3596201c	 ldrcc       r2, [r6, #0x1C]
  00124	324130b0	 subcc       r3, r1, #0xB0
  00128	33a01001	 movcc       r1, #1
  0012c	31823311	 orrcc       r3, r2, r1, lsl r3
  00130	3586301c	 strcc       r3, [r6, #0x1C]
  00134	3a000015	 bcc         |$LN30@OALIntrDon|

; 398  :         } else if (irq < IRQ_GPIO_48) {

  00138	e35100d0	 cmp         r1, #0xD0

; 399  :             SETREG32(&g_pGPIO3Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_32));

  0013c	3597201c	 ldrcc       r2, [r7, #0x1C]
  00140	324130c0	 subcc       r3, r1, #0xC0
  00144	33a01001	 movcc       r1, #1
  00148	31823311	 orrcc       r3, r2, r1, lsl r3
  0014c	3587301c	 strcc       r3, [r7, #0x1C]
  00150	3a00000e	 bcc         |$LN30@OALIntrDon|

; 400  :         } else if (irq < IRQ_MPUIO_0) {

  00154	e35100e0	 cmp         r1, #0xE0

; 401  :             SETREG32(&g_pGPIO4Regs->IRQENABLE1, 1 << (irq - IRQ_GPIO_48));

  00158	3598201c	 ldrcc       r2, [r8, #0x1C]
  0015c	324130d0	 subcc       r3, r1, #0xD0
  00160	33a01001	 movcc       r1, #1
  00164	31823311	 orrcc       r3, r2, r1, lsl r3
  00168	3588301c	 strcc       r3, [r8, #0x1C]
  0016c	3a000007	 bcc         |$LN30@OALIntrDon|

; 402  :         } else if (irq < OMAP5912_IRQ_MAXIMUM) {

  00170	e35100f0	 cmp         r1, #0xF0
  00174	2a000007	 bcs         |$LN21@OALIntrDon|

; 403  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  00178	e1d332bc	 ldrh        r3, [r3, #0x2C]
  0017c	e24120e0	 sub         r2, r1, #0xE0
  00180	e3a01001	 mov         r1, #1
  00184	e1c33211	 bic         r3, r3, r1, lsl r2
  00188	e59d2000	 ldr         r2, [sp]
  0018c	e1c232bc	 strh        r3, [r2, #0x2C]
  00190		 |$LN30@OALIntrDon|
  00190	e3a02001	 mov         r2, #1
  00194		 |$LN29@OALIntrDon|

; 381  : 
; 382  :     for (i = 0; i < count; i++) {

  00194	e59d3000	 ldr         r3, [sp]

; 403  :             CLRREG16(&g_pMPUIORegs->IO_INT_MASK, 1 << (irq - IRQ_MPUIO_0));

  00198		 |$LN21@OALIntrDon|
  00198	e2855004	 add         r5, r5, #4
  0019c	e2544001	 subs        r4, r4, #1
  001a0	1affffb2	 bne         |$LL22@OALIntrDon|
  001a4		 |$LN20@OALIntrDon|

; 404  :         }
; 405  :     }
; 406  : }

  001a4	e28dd008	 add         sp, sp, #8
  001a8	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001ac	e12fff1e	 bx          lr
  001b0		 |$LN34@OALIntrDon|
  001b0		 |$LN35@OALIntrDon|
  001b0	00000000	 DCD         |g_pIntcL1Regs|
  001b4		 |$LN36@OALIntrDon|
  001b4	00000000	 DCD         |??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001b8		 |$LN37@OALIntrDon|
  001b8	00000000	 DCD         |dpCurSettings|
  001bc		 |$M44463|

			 ENDP  ; |OALIntrDoneIrqs|

	EXPORT	|OEMInterruptHandler|
	IMPORT	|OALIntrTranslateIrq|
	IMPORT	|ProfilerHit|
	IMPORT	|g_oalProfilerEnabled|
	IMPORT	|g_oalProfilerIrq|
	IMPORT	|OALTimerIntrHandler|

  00000			 AREA	 |.pdata|, PDATA
|$T44500| DCD	|$LN53@OEMInterru|
	DCD	0x40009e02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptHandler| PROC

; 416  : {

  00000		 |$LN53@OEMInterru|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44497|
  00008	e1a07000	 mov         r7, r0

; 417  :     UINT32 irq = OAL_INTR_IRQ_UNDEFINED;
; 418  :     UINT32 sysIntr = SYSINTR_NOP;
; 419  :     UINT32 data, mask;
; 420  :     OMAP5912_GPIO_REGS *pGPIORegs = NULL;
; 421  :     OMAP5912_ARMIO_REGS *pMPUIORegs = NULL;
; 422  : 
; 423  :     // Get pending interrupt
; 424  :     irq = INREG32(&g_pIntcL1Regs->SIR_IRQ);

  0000c	e59f4260	 ldr         r4, [pc, #0x260]
  00010	e3a05000	 mov         r5, #0
  00014	e3a02000	 mov         r2, #0
  00018	e5946000	 ldr         r6, [r4]
  0001c	e3a01000	 mov         r1, #0
  00020	e3a09001	 mov         r9, #1
  00024	e5963010	 ldr         r3, [r6, #0x10]
  00028	e1b00003	 movs        r0, r3
  0002c	e58d0000	 str         r0, [sp]

; 425  : 
; 426  :     // First check if it is interrupt from cascade controller
; 427  :     if (irq != IRQ_L2IRQ) {

  00030	0a000019	 beq         |$LN37@OEMInterru|

; 428  :         // It isn't cascade interrupt, check for GPIO interrupt
; 429  :         if (irq == IRQ_GPIO1 && (data = INREG32(&g_pGPIO1Regs->IRQSTATUS1)) != 0) {

  00034	e350000e	 cmp         r0, #0xE
  00038	1a000012	 bne         |$LN36@OEMInterru|
  0003c	e594e00c	 ldr         lr, [r4, #0xC]
  00040	e59e3018	 ldr         r3, [lr, #0x18]
  00044	e3530000	 cmp         r3, #0
  00048	0a00000e	 beq         |$LN36@OEMInterru|

; 430  :             // It is interrupt from GPIO1, find which one, mask and clear it.
; 431  :             for (irq = IRQ_GPIO_0, mask = 1; mask != 0; mask <<= 1, irq++) {

  0004c	e3a000a0	 mov         r0, #0xA0
  00050	e58d0000	 str         r0, [sp]
  00054	e3a01001	 mov         r1, #1
  00058		 |$LL35@OEMInterru|

; 432  :                 if ((mask & data) != 0) break;

  00058	e1110003	 tst         r1, r3
  0005c	1a000002	 bne         |$LN43@OEMInterru|
  00060	e2800001	 add         r0, r0, #1
  00064	e1b01081	 movs        r1, r1, lsl #1
  00068	1afffffa	 bne         |$LL35@OEMInterru|
  0006c		 |$LN43@OEMInterru|

; 433  :             }
; 434  :             CLRPORT32(&g_pGPIO1Regs->IRQENABLE1, mask);

  0006c	e59e301c	 ldr         r3, [lr, #0x1C]

; 435  :             OUTPORT32(&g_pGPIO4Regs->IRQSTATUS1, mask);

  00070	e5942010	 ldr         r2, [r4, #0x10]
  00074	e58d0000	 str         r0, [sp]
  00078	e1c33001	 bic         r3, r3, r1
  0007c	e58e301c	 str         r3, [lr, #0x1C]
  00080	e5821018	 str         r1, [r2, #0x18]

; 436  :         } else {

  00084	ea000052	 b           |$LN30@OEMInterru|
  00088		 |$LN36@OEMInterru|

; 437  :             SETREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  00088	e5963004	 ldr         r3, [r6, #4]
  0008c	e3a02001	 mov         r2, #1
  00090	e1833012	 orr         r3, r3, r2, lsl r0
  00094	e5863004	 str         r3, [r6, #4]

; 438  :         }
; 439  :     } else {

  00098	ea00004d	 b           |$LN30@OEMInterru|
  0009c		 |$LN37@OEMInterru|

; 440  : 
; 441  :         // It is interrupt from L2, get number from there
; 442  :         irq = INREG32(&g_pIntcL2ARegs->SIR_IRQ) + 32;

  0009c	e594e020	 ldr         lr, [r4, #0x20]
  000a0	e59e3010	 ldr         r3, [lr, #0x10]
  000a4	e2830020	 add         r0, r3, #0x20
  000a8	e58d0000	 str         r0, [sp]

; 443  : 
; 444  :         // check for GPIO interrupts
; 445  :         switch (irq) {

  000ac	e3500025	 cmp         r0, #0x25
  000b0	0a00000e	 beq         |$LN24@OEMInterru|
  000b4	e3500048	 cmp         r0, #0x48
  000b8	0a000009	 beq         |$LN27@OEMInterru|
  000bc	e3500049	 cmp         r0, #0x49
  000c0	0a000004	 beq         |$LN26@OEMInterru|
  000c4	e3500050	 cmp         r0, #0x50
  000c8	1a00002c	 bne         |$LN17@OEMInterru|

; 454  :         case IRQ_GPIO4:
; 455  :             irq = IRQ_GPIO_48;
; 456  :             pGPIORegs=g_pGPIO4Regs;

  000cc	e5942010	 ldr         r2, [r4, #0x10]
  000d0	e3a000d0	 mov         r0, #0xD0

; 457  :             break;

  000d4	ea000007	 b           |$LN49@OEMInterru|
  000d8		 |$LN26@OEMInterru|

; 450  :         case IRQ_GPIO3:
; 451  :             irq = IRQ_GPIO_32;
; 452  :             pGPIORegs=g_pGPIO3Regs;

  000d8	e5942024	 ldr         r2, [r4, #0x24]
  000dc	e3a000c0	 mov         r0, #0xC0

; 453  :             break;

  000e0	ea000004	 b           |$LN49@OEMInterru|
  000e4		 |$LN27@OEMInterru|

; 446  :         case IRQ_GPIO2:
; 447  :             irq = IRQ_GPIO_16;
; 448  :             pGPIORegs=g_pGPIO2Regs;

  000e4	e594201c	 ldr         r2, [r4, #0x1C]
  000e8	e3a000b0	 mov         r0, #0xB0

; 449  :             break;

  000ec	ea000001	 b           |$LN49@OEMInterru|
  000f0		 |$LN24@OEMInterru|

; 458  :         case IRQ_MPUIO:
; 459  :             irq = IRQ_MPUIO_0;
; 460  :             pMPUIORegs = g_pMPUIORegs;

  000f0	e5941004	 ldr         r1, [r4, #4]
  000f4	e3a000e0	 mov         r0, #0xE0
  000f8		 |$LN49@OEMInterru|
  000f8	e58d0000	 str         r0, [sp]

; 461  :             break;
; 462  :         }
; 463  : 
; 464  :         // If it is interrupt from GPIOx, find which one, mask and clear it..
; 465  :         if (pGPIORegs != NULL && (data = INREG32(&pGPIORegs->IRQSTATUS1)) != 0) {

  000fc	e3520000	 cmp         r2, #0
  00100	0a00000e	 beq         |$LN23@OEMInterru|
  00104	e5923018	 ldr         r3, [r2, #0x18]
  00108	e3530000	 cmp         r3, #0
  0010c	0a00000b	 beq         |$LN23@OEMInterru|

; 466  :             for (mask = 1; mask != 0; mask <<= 1, irq++) {

  00110	e3a01001	 mov         r1, #1
  00114		 |$LL22@OEMInterru|

; 467  :                 if ((mask & data) != 0) break;

  00114	e1110003	 tst         r1, r3
  00118	1a000002	 bne         |$LN44@OEMInterru|
  0011c	e2800001	 add         r0, r0, #1
  00120	e1b01081	 movs        r1, r1, lsl #1
  00124	1afffffa	 bne         |$LL22@OEMInterru|
  00128		 |$LN44@OEMInterru|

; 468  :             }
; 469  :             CLRPORT32(&pGPIORegs->IRQENABLE1, mask);

  00128	e592301c	 ldr         r3, [r2, #0x1C]
  0012c	e58d0000	 str         r0, [sp]
  00130	e1c33001	 bic         r3, r3, r1
  00134	e582301c	 str         r3, [r2, #0x1C]

; 470  :             OUTPORT32(&pGPIORegs->IRQSTATUS1, mask);

  00138	e5821018	 str         r1, [r2, #0x18]
  0013c	ea000023	 b           |$LN6@OEMInterru|
  00140		 |$LN23@OEMInterru|

; 471  :         }
; 472  :         else if (pMPUIORegs != NULL && (data = INREG16(&pMPUIORegs->IO_INT_STAT)) != 0) {

  00140	e3510000	 cmp         r1, #0
  00144	0a00000d	 beq         |$LN17@OEMInterru|
  00148	e1d132b4	 ldrh        r3, [r1, #0x24]
  0014c	e3530000	 cmp         r3, #0
  00150	0a00000a	 beq         |$LN17@OEMInterru|

; 473  :             for (mask = 1; mask != 0; mask <<= 1, irq++) {

  00154	e3a02001	 mov         r2, #1
  00158		 |$LL16@OEMInterru|

; 474  :                 if ((mask & data) != 0) break;

  00158	e1120003	 tst         r2, r3
  0015c	1a000002	 bne         |$LN45@OEMInterru|
  00160	e2800001	 add         r0, r0, #1
  00164	e1b02082	 movs        r2, r2, lsl #1
  00168	1afffffa	 bne         |$LL16@OEMInterru|
  0016c		 |$LN45@OEMInterru|

; 475  :             }
; 476  :             SETPORT16(&pMPUIORegs->IO_INT_MASK, mask);

  0016c	e1d132bc	 ldrh        r3, [r1, #0x2C]
  00170	e58d0000	 str         r0, [sp]
  00174	e1833002	 orr         r3, r3, r2
  00178	e1c132bc	 strh        r3, [r1, #0x2C]
  0017c	ea000013	 b           |$LN6@OEMInterru|
  00180		 |$LN17@OEMInterru|

; 477  :         }
; 478  :         else if (irq < 64) {

  00180	e3500040	 cmp         r0, #0x40

; 479  :             // Mask interrupt on L2A
; 480  :             SETPORT32(&g_pIntcL2ARegs->MIR, 1 << (irq - 32));

  00184	359e2004	 ldrcc       r2, [lr, #4]
  00188	32403020	 subcc       r3, r0, #0x20
  0018c	33a01001	 movcc       r1, #1
  00190	31823311	 orrcc       r3, r2, r1, lsl r3
  00194	358e3004	 strcc       r3, [lr, #4]
  00198	3a00000c	 bcc         |$LN6@OEMInterru|

; 481  :         } else if (irq < 96) {

  0019c	e3500060	 cmp         r0, #0x60

; 482  :             // Mask interrupt on L2B
; 483  :             SETPORT32(&g_pIntcL2BRegs->MIR, 1 << (irq - 64));

  001a0	35941014	 ldrcc       r1, [r4, #0x14]
  001a4	32402040	 subcc       r2, r0, #0x40
  001a8	3a000004	 bcc         |$LN50@OEMInterru|

; 484  :         } else if (irq < 128) {

  001ac	e3500080	 cmp         r0, #0x80

; 485  :             // Mask interrupt on L2C
; 486  :             SETPORT32(&g_pIntcL2CRegs->MIR, 1 << (irq - 96));

  001b0	35941008	 ldrcc       r1, [r4, #8]

; 487  :         } else {
; 488  :             // Mask interrupt on L2D
; 489  :             SETPORT32(&g_pIntcL2DRegs->MIR, 1 << (irq - 128));

  001b4	25941018	 ldrcs       r1, [r4, #0x18]
  001b8	32402060	 subcc       r2, r0, #0x60
  001bc	22402080	 subcs       r2, r0, #0x80
  001c0		 |$LN50@OEMInterru|
  001c0	e5913004	 ldr         r3, [r1, #4]
  001c4	e3a08001	 mov         r8, #1
  001c8	e1833218	 orr         r3, r3, r8, lsl r2
  001cc	e5813004	 str         r3, [r1, #4]
  001d0		 |$LN6@OEMInterru|

; 490  :         }
; 491  : 
; 492  :         // Acknowledge interrupt on L2
; 493  :         OUTREG32(&g_pIntcL2ARegs->CNTL, CNTL_NEW_IRQ);

  001d0	e58e9018	 str         r9, [lr, #0x18]
  001d4		 |$LN30@OEMInterru|

; 494  :     }
; 495  : 
; 496  :     // Acknowledge interrupt on L1
; 497  :     OUTREG32(&g_pIntcL1Regs->CNTL, CNTL_NEW_IRQ);
; 498  : 
; 499  :     // Check if this is timer IRQ
; 500  :     if (irq == g_oalTimerIrq) {

  001d4	e59f3094	 ldr         r3, [pc, #0x94]
  001d8	e5869018	 str         r9, [r6, #0x18]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e1500003	 cmp         r0, r3
  001e4	1a000006	 bne         |$LN5@OEMInterru|

; 501  :          // Call timer interrupt handler
; 502  : 
; 503  :         sysIntr = OALTimerIntrHandler(ra);

  001e8	e1a00007	 mov         r0, r7
  001ec	eb000000	 bl          OALTimerIntrHandler
  001f0	e1a05000	 mov         r5, r0

; 504  :         // We are done with interrupt
; 505  :         OALIntrDoneIrqs(1, &irq);

  001f4	e3a00001	 mov         r0, #1
  001f8	e28d1000	 add         r1, sp, #0
  001fc	eb000000	 bl          OALIntrDoneIrqs
  00200	ea000014	 b           |$LN1@OEMInterru|
  00204		 |$LN5@OEMInterru|

; 506  :     } else if (irq == g_oalProfilerIrq && g_oalProfilerEnabled == TRUE) {

  00204	e59f3060	 ldr         r3, [pc, #0x60]
  00208	e5933000	 ldr         r3, [r3]
  0020c	e1500003	 cmp         r0, r3
  00210	1a00000c	 bne         |$LN3@OEMInterru|
  00214	e59f304c	 ldr         r3, [pc, #0x4C]
  00218	e5933000	 ldr         r3, [r3]
  0021c	e3530001	 cmp         r3, #1
  00220	1a000008	 bne         |$LN3@OEMInterru|

; 507  :         // Call profiler and reenable interrupt
; 508  :         ProfilerHit(ra);

  00224	e1a00007	 mov         r0, r7
  00228	eb000000	 bl          ProfilerHit

; 509  :         CLRREG32(&g_pIntcL1Regs->MIR, 1 << irq);

  0022c	e5941000	 ldr         r1, [r4]
  00230	e59d2000	 ldr         r2, [sp]
  00234	e3a00001	 mov         r0, #1
  00238	e5913004	 ldr         r3, [r1, #4]
  0023c	e1c33210	 bic         r3, r3, r0, lsl r2
  00240	e5813004	 str         r3, [r1, #4]
  00244	ea000003	 b           |$LN1@OEMInterru|
  00248		 |$LN3@OEMInterru|

; 510  :     } else if (irq != OAL_INTR_IRQ_UNDEFINED) {

  00248	e3700001	 cmn         r0, #1
  0024c	0a000001	 beq         |$LN1@OEMInterru|

; 511  :         // We don't assume IRQ sharing, use static mapping
; 512  :         sysIntr = OALIntrTranslateIrq(irq);

  00250	eb000000	 bl          OALIntrTranslateIrq
  00254	e1a05000	 mov         r5, r0
  00258		 |$LN1@OEMInterru|

; 513  :     }
; 514  :     
; 515  :     return sysIntr;
; 516  : }

  00258	e1a00005	 mov         r0, r5
  0025c	e28dd004	 add         sp, sp, #4
  00260	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  00264	e12fff1e	 bx          lr
  00268		 |$LN54@OEMInterru|
  00268		 |$LN55@OEMInterru|
  00268	00000000	 DCD         |g_oalProfilerEnabled|
  0026c		 |$LN56@OEMInterru|
  0026c	00000000	 DCD         |g_oalProfilerIrq|
  00270		 |$LN57@OEMInterru|
  00270	00000000	 DCD         |g_oalTimerIrq|
  00274		 |$LN58@OEMInterru|
  00274	00000000	 DCD         |g_pIntcL1Regs|
  00278		 |$M44498|

			 ENDP  ; |OEMInterruptHandler|

	EXPORT	|OALIntrIsIrqPending|

  00000			 AREA	 |.pdata|, PDATA
|$T44521| DCD	|$LN29@OALIntrIsI|
	DCD	0x40004500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrIsIrqPending| PROC

; 526  : {

  00000		 |$LN29@OALIntrIsI|
  00000		 |$M44518|

; 527  :     BOOL rc = FALSE;
; 528  : 
; 529  :     if (irq < 32) {

  00000	e3500020	 cmp         r0, #0x20

; 530  :         rc = INREG32(&g_pIntcL1Regs->ITR) & (1 << irq);

  00004	359f3104	 ldrcc       r3, [pc, #0x104]
  00008	33a02001	 movcc       r2, #1
  0000c	35933000	 ldrcc       r3, [r3]
  00010	35933000	 ldrcc       r3, [r3]
  00014	30033012	 andcc       r3, r3, r2, lsl r0
  00018	3a000037	 bcc         |$LN1@OALIntrIsI|

; 531  :     } else if (irq < 64) {

  0001c	e3500040	 cmp         r0, #0x40

; 532  :         rc = INREG32(&g_pIntcL2ARegs->ITR) & (1 << (irq - 32));

  00020	359f30e8	 ldrcc       r3, [pc, #0xE8]
  00024	32402020	 subcc       r2, r0, #0x20
  00028	35933020	 ldrcc       r3, [r3, #0x20]
  0002c	35933000	 ldrcc       r3, [r3]
  00030	3a00002f	 bcc         |$LN24@OALIntrIsI|

; 533  :     } else if (irq < 96) {

  00034	e3500060	 cmp         r0, #0x60

; 534  :         rc = INREG32(&g_pIntcL2BRegs->ITR) & (1 << (irq - 64));

  00038	359f30d0	 ldrcc       r3, [pc, #0xD0]
  0003c	32402040	 subcc       r2, r0, #0x40
  00040	35933014	 ldrcc       r3, [r3, #0x14]
  00044	35933000	 ldrcc       r3, [r3]
  00048	3a000029	 bcc         |$LN24@OALIntrIsI|

; 535  :     } else if (irq < 128) {

  0004c	e3500080	 cmp         r0, #0x80

; 536  :         rc = INREG32(&g_pIntcL2CRegs->ITR) & (1 << (irq - 96));

  00050	359f30b8	 ldrcc       r3, [pc, #0xB8]
  00054	32402060	 subcc       r2, r0, #0x60
  00058	35933008	 ldrcc       r3, [r3, #8]
  0005c	35933000	 ldrcc       r3, [r3]
  00060	3a000023	 bcc         |$LN24@OALIntrIsI|

; 537  :     } else if(irq < 160){

  00064	e35000a0	 cmp         r0, #0xA0

; 538  :         rc = INREG32(&g_pIntcL2DRegs->ITR) & (1 << (irq - 128));

  00068	359f30a0	 ldrcc       r3, [pc, #0xA0]
  0006c	32402080	 subcc       r2, r0, #0x80
  00070	35933018	 ldrcc       r3, [r3, #0x18]
  00074	35933000	 ldrcc       r3, [r3]
  00078	3a00001d	 bcc         |$LN24@OALIntrIsI|

; 539  :     } else if (irq < IRQ_GPIO_16) {

  0007c	e35000b0	 cmp         r0, #0xB0

; 540  :         rc = INREG32(&g_pGPIO1Regs->IRQSTATUS1) & (1 << (irq - IRQ_GPIO_0));

  00080	359f3088	 ldrcc       r3, [pc, #0x88]
  00084	324020a0	 subcc       r2, r0, #0xA0
  00088	3593300c	 ldrcc       r3, [r3, #0xC]
  0008c	35933018	 ldrcc       r3, [r3, #0x18]
  00090	3a000017	 bcc         |$LN24@OALIntrIsI|

; 541  :     } else if (irq < IRQ_GPIO_32) {

  00094	e35000c0	 cmp         r0, #0xC0

; 542  :         rc = INREG32(&g_pGPIO2Regs->IRQSTATUS1) & (1 << (irq - IRQ_GPIO_16));

  00098	359f3070	 ldrcc       r3, [pc, #0x70]
  0009c	324020b0	 subcc       r2, r0, #0xB0
  000a0	3593301c	 ldrcc       r3, [r3, #0x1C]
  000a4	35933018	 ldrcc       r3, [r3, #0x18]
  000a8	3a000011	 bcc         |$LN24@OALIntrIsI|

; 543  :     } else if (irq < IRQ_GPIO_48) {

  000ac	e35000d0	 cmp         r0, #0xD0

; 544  :         rc = INREG32(&g_pGPIO3Regs->IRQSTATUS1) & (1 << (irq - IRQ_GPIO_32));

  000b0	359f3058	 ldrcc       r3, [pc, #0x58]
  000b4	324020c0	 subcc       r2, r0, #0xC0
  000b8	35933024	 ldrcc       r3, [r3, #0x24]
  000bc	35933018	 ldrcc       r3, [r3, #0x18]
  000c0	3a00000b	 bcc         |$LN24@OALIntrIsI|

; 545  :     } else if (irq < IRQ_MPUIO_0) {

  000c4	e35000e0	 cmp         r0, #0xE0

; 546  :         rc = INREG32(&g_pGPIO4Regs->IRQSTATUS1) & (1 << (irq - IRQ_GPIO_48));

  000c8	359f3040	 ldrcc       r3, [pc, #0x40]
  000cc	324020d0	 subcc       r2, r0, #0xD0
  000d0	35933010	 ldrcc       r3, [r3, #0x10]
  000d4	35933018	 ldrcc       r3, [r3, #0x18]
  000d8	3a000005	 bcc         |$LN24@OALIntrIsI|

; 547  :     } else if (irq < OMAP5912_IRQ_MAXIMUM) {

  000dc	e35000f0	 cmp         r0, #0xF0
  000e0	2a000008	 bcs         |$LN22@OALIntrIsI|

; 548  :         rc = INREG16(&g_pMPUIORegs->IO_INT_STAT) & (1 << (irq - IRQ_MPUIO_0));

  000e4	e59f3024	 ldr         r3, [pc, #0x24]
  000e8	e24020e0	 sub         r2, r0, #0xE0
  000ec	e5933004	 ldr         r3, [r3, #4]
  000f0	e1d332b4	 ldrh        r3, [r3, #0x24]
  000f4		 |$LN24@OALIntrIsI|
  000f4	e3a01001	 mov         r1, #1
  000f8	e0033211	 and         r3, r3, r1, lsl r2
  000fc		 |$LN1@OALIntrIsI|

; 549  :     }
; 550  : 
; 551  :     return (rc != 0);

  000fc	e3530000	 cmp         r3, #0
  00100	13a00001	 movne       r0, #1

; 552  : }

  00104	112fff1e	 bxne        lr
  00108		 |$LN22@OALIntrIsI|

; 549  :     }
; 550  : 
; 551  :     return (rc != 0);

  00108	e3a00000	 mov         r0, #0

; 552  : }

  0010c	e12fff1e	 bx          lr
  00110		 |$LN30@OALIntrIsI|
  00110		 |$LN31@OALIntrIsI|
  00110	00000000	 DCD         |g_pIntcL1Regs|
  00114		 |$M44519|

			 ENDP  ; |OALIntrIsIrqPending|

	EXPORT	|OALIntrInit|
	EXPORT	|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|BSPIntrInit|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALIntrStaticTranslate|
	IMPORT	|OALPAtoVA|
	IMPORT	|OALIntrMapInit|

  00000			 AREA	 |.pdata|, PDATA
|$T44539| DCD	|$LN14@OALIntrIni|
	DCD	0x40009702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrInit| PROC

; 181  : {

  00000		 |$LN14@OALIntrIni|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M44536|

; 182  :     BOOL rc = FALSE;
; 183  :     UINT32 irq, i;
; 184  : 
; 185  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"+OALInterruptInit\r\n"));

  00008	e59f923c	 ldr         r9, [pc, #0x23C]
  0000c	e5993440	 ldr         r3, [r9, #0x440]
  00010	e3130901	 tst         r3, #1, 18
  00014	13130004	 tstne       r3, #4
  00018	159f0238	 ldrne       r0, [pc, #0x238]
  0001c	1b000000	 blne        NKDbgPrintfW

; 186  : 
; 187  :     // Initialize interrupt mapping
; 188  :     OALIntrMapInit();

  00020	eb000000	 bl          OALIntrMapInit
  00024	e3e03b4d	 mvn         r3, #0x4D, 22

; 189  : 
; 190  :     // Get interrupt controller registers virtual uncached addresses
; 191  :     g_pIntcL1Regs = OALPAtoUA(OMAP5912_INTC_L1_REGS_PA);

  00028	e22300ff	 eor         r0, r3, #0xFF
  0002c	e3a01000	 mov         r1, #0
  00030	eb000000	 bl          OALPAtoVA
  00034	e59f8218	 ldr         r8, [pc, #0x218]
  00038	e3a034ff	 mov         r3, #0xFF, 8

; 192  :     g_pIntcL2ARegs = OALPAtoUA(OMAP5912_INTC_L2A_REGS_PA);

  0003c	e3a01000	 mov         r1, #0
  00040	e5880000	 str         r0, [r8]
  00044	e38308fe	 orr         r0, r3, #0xFE, 16
  00048	eb000000	 bl          OALPAtoVA
  0004c	e3a02c01	 mov         r2, #1, 24
  00050	e1a03000	 mov         r3, r0

; 193  :     g_pIntcL2BRegs = OALPAtoUA(OMAP5912_INTC_L2B_REGS_PA);

  00054	e2420802	 sub         r0, r2, #2, 16
  00058	e3a01000	 mov         r1, #0
  0005c	e5883020	 str         r3, [r8, #0x20]
  00060	eb000000	 bl          OALPAtoVA
  00064	e3a02c02	 mov         r2, #2, 24
  00068	e1a03000	 mov         r3, r0

; 194  :     g_pIntcL2CRegs = OALPAtoUA(OMAP5912_INTC_L2C_REGS_PA);

  0006c	e2420802	 sub         r0, r2, #2, 16
  00070	e3a01000	 mov         r1, #0
  00074	e5883014	 str         r3, [r8, #0x14]
  00078	eb000000	 bl          OALPAtoVA
  0007c	e3e02b7f	 mvn         r2, #0x7F, 22
  00080	e1a03000	 mov         r3, r0

; 195  :     g_pIntcL2DRegs = OALPAtoUA(OMAP5912_INTC_L2D_REGS_PA);

  00084	e22200ff	 eor         r0, r2, #0xFF
  00088	e3a01000	 mov         r1, #0
  0008c	e5883008	 str         r3, [r8, #8]
  00090	eb000000	 bl          OALPAtoVA
  00094	e3a05b01	 mov         r5, #1, 22
  00098	e1a03000	 mov         r3, r0

; 196  :     g_pGPIO1Regs = OALPAtoUA(OMAP5912_GPIO1_REGS_PA);

  0009c	e2450a42	 sub         r0, r5, #0x42, 20
  000a0	e3a01000	 mov         r1, #0
  000a4	e5883018	 str         r3, [r8, #0x18]
  000a8	eb000000	 bl          OALPAtoVA
  000ac	e3a04b03	 mov         r4, #3, 22
  000b0	e1a03000	 mov         r3, r0

; 197  :     g_pGPIO2Regs = OALPAtoUA(OMAP5912_GPIO2_REGS_PA);

  000b4	e2440a42	 sub         r0, r4, #0x42, 20
  000b8	e3a01000	 mov         r1, #0
  000bc	e588300c	 str         r3, [r8, #0xC]
  000c0	eb000000	 bl          OALPAtoVA
  000c4	e1a03000	 mov         r3, r0

; 198  :     g_pGPIO3Regs = OALPAtoUA(OMAP5912_GPIO3_REGS_PA);

  000c8	e2450a45	 sub         r0, r5, #0x45, 20
  000cc	e3a01000	 mov         r1, #0
  000d0	e588301c	 str         r3, [r8, #0x1C]
  000d4	eb000000	 bl          OALPAtoVA
  000d8	e1a03000	 mov         r3, r0

; 199  :     g_pGPIO4Regs = OALPAtoUA(OMAP5912_GPIO4_REGS_PA);

  000dc	e2440a45	 sub         r0, r4, #0x45, 20
  000e0	e3a01000	 mov         r1, #0
  000e4	e5883024	 str         r3, [r8, #0x24]
  000e8	eb000000	 bl          OALPAtoVA

; 200  :     g_pMPUIORegs = OALPAtoUA(OMAP5912_ARMIO_REGS_PA);

  000ec	e3a01000	 mov         r1, #0
  000f0	e1a03000	 mov         r3, r0
  000f4	e2410a4b	 sub         r0, r1, #0x4B, 20
  000f8	e5883010	 str         r3, [r8, #0x10]
  000fc	eb000000	 bl          OALPAtoVA

; 201  : 
; 202  :     // Disable all interrupts
; 203  :     OUTREG32(&g_pIntcL1Regs->MIR, 0xFFFFFFFF);

  00100	e5986000	 ldr         r6, [r8]

; 204  :     OUTREG32(&g_pIntcL2ARegs->MIR, 0xFFFFFFFF);

  00104	e5987020	 ldr         r7, [r8, #0x20]

; 205  :     OUTREG32(&g_pIntcL2BRegs->MIR, 0xFFFFFFFF);

  00108	e5985014	 ldr         r5, [r8, #0x14]

; 206  :     OUTREG32(&g_pIntcL2CRegs->MIR, 0xFFFFFFFF);

  0010c	e5984008	 ldr         r4, [r8, #8]

; 207  :     OUTREG32(&g_pIntcL2DRegs->MIR, 0xFFFFFFFF);

  00110	e598e018	 ldr         lr, [r8, #0x18]

; 208  :     OUTREG32(&g_pGPIO1Regs->IRQENABLE1, 0);

  00114	e3e02000	 mvn         r2, #0
  00118	e598300c	 ldr         r3, [r8, #0xC]
  0011c	e5862004	 str         r2, [r6, #4]
  00120	e5872004	 str         r2, [r7, #4]

; 209  :     OUTREG32(&g_pGPIO2Regs->IRQENABLE1, 0);

  00124	e5852004	 str         r2, [r5, #4]
  00128	e5842004	 str         r2, [r4, #4]
  0012c	e3a09000	 mov         r9, #0
  00130	e58e2004	 str         r2, [lr, #4]
  00134	e598101c	 ldr         r1, [r8, #0x1C]

; 210  :     OUTREG32(&g_pGPIO3Regs->IRQENABLE1, 0);
; 211  :     OUTREG32(&g_pGPIO4Regs->IRQENABLE1, 0);

  00138	e5982010	 ldr         r2, [r8, #0x10]
  0013c	e583901c	 str         r9, [r3, #0x1C]
  00140	e5983024	 ldr         r3, [r8, #0x24]
  00144	e5880004	 str         r0, [r8, #4]

; 212  :     OUTREG16(&g_pMPUIORegs->IO_INT_MASK, 0xFFFF);
; 213  : 
; 214  :     // Initialize interrupt routing, level and priority
; 215  :     for (i = 0; i < 32; i++) {

  00148	e59fa100	 ldr         r10, [pc, #0x100]
  0014c	e3a08cff	 mov         r8, #0xFF, 24
  00150	e581901c	 str         r9, [r1, #0x1C]
  00154	e583901c	 str         r9, [r3, #0x1C]
  00158	e38830ff	 orr         r3, r8, #0xFF
  0015c	e287801c	 add         r8, r7, #0x1C
  00160	e0466007	 sub         r6, r6, r7
  00164	e0455007	 sub         r5, r5, r7
  00168	e0444007	 sub         r4, r4, r7
  0016c	e04e7007	 sub         r7, lr, r7
  00170	e582901c	 str         r9, [r2, #0x1C]
  00174	e3a0e000	 mov         lr, #0
  00178	e1c032bc	 strh        r3, [r0, #0x2C]
  0017c	e28ab080	 add         r11, r10, #0x80
  00180	e28a9c01	 add         r9, r10, #1, 24
  00184		 |$LL3@OALIntrIni|

; 216  :         OUTREG32(&g_pIntcL1Regs->ILR[i], g_intcL1Level[i]);

  00184	e79e300a	 ldr         r3, [lr, +r10]

; 217  :         OUTREG32(&g_pIntcL2ARegs->ILR[i], g_intcL2ALevel[i]);
; 218  :         OUTREG32(&g_pIntcL2BRegs->ILR[i], g_intcL2BLevel[i]);

  00188	e0851008	 add         r1, r5, r8

; 219  :         OUTREG32(&g_pIntcL2CRegs->ILR[i], g_intcL2CLevel[i]);

  0018c	e0842008	 add         r2, r4, r8
  00190	e7863008	 str         r3, [r6, +r8]
  00194	e79e300b	 ldr         r3, [lr, +r11]

; 220  :         OUTREG32(&g_pIntcL2DRegs->ILR[i], g_intcL2DLevel[i]);

  00198	e0870008	 add         r0, r7, r8
  0019c	e5883000	 str         r3, [r8]
  001a0	e79e3009	 ldr         r3, [lr, +r9]
  001a4	e2888004	 add         r8, r8, #4
  001a8	e5813000	 str         r3, [r1]
  001ac	e28a3d06	 add         r3, r10, #6, 26
  001b0	e79e3003	 ldr         r3, [lr, +r3]
  001b4	e5823000	 str         r3, [r2]
  001b8	e28a3c02	 add         r3, r10, #2, 24
  001bc	e79e3003	 ldr         r3, [lr, +r3]
  001c0	e28ee004	 add         lr, lr, #4
  001c4	e35e0080	 cmp         lr, #0x80
  001c8	e5803000	 str         r3, [r0]
  001cc	3affffec	 bcc         |$LL3@OALIntrIni|

; 221  :     }
; 222  : 
; 223  :     // Enable interrupts from L2 controllers
; 224  :     irq = IRQ_L2FIQ; OALIntrEnableIrqs(1, &irq);

  001d0	e3a03002	 mov         r3, #2
  001d4	e28d1000	 add         r1, sp, #0
  001d8	e3a00001	 mov         r0, #1
  001dc	e58d3000	 str         r3, [sp]
  001e0	eb000000	 bl          OALIntrEnableIrqs

; 225  :     irq = IRQ_L2IRQ; OALIntrEnableIrqs(1, &irq);

  001e4	e3a03000	 mov         r3, #0
  001e8	e28d1000	 add         r1, sp, #0
  001ec	e3a00001	 mov         r0, #1
  001f0	e58d3000	 str         r3, [sp]
  001f4	eb000000	 bl          OALIntrEnableIrqs

; 226  : 
; 227  :     // Add static mapping for RTC alarm
; 228  :     OALIntrStaticTranslate(SYSINTR_RTC_ALARM, IRQ_RTC_ALARM);

  001f8	e3a0103a	 mov         r1, #0x3A
  001fc	e3a0000d	 mov         r0, #0xD
  00200	eb000000	 bl          OALIntrStaticTranslate

; 229  : 
; 230  :     // And enable it (it will not occur until it is set in OEMSetAlarmTime)
; 231  :     OEMInterruptEnable(SYSINTR_RTC_ALARM, NULL, 0);

  00204	e3a02000	 mov         r2, #0
  00208	e3a01000	 mov         r1, #0
  0020c	e3a0000d	 mov         r0, #0xD
  00210	eb000000	 bl          OEMInterruptEnable

; 232  : 
; 233  :     // Call board specific initialization
; 234  :     rc = BSPIntrInit();

  00214	eb000000	 bl          BSPIntrInit

; 235  : 
; 236  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALInterruptInit(rc = %d)\r\n", rc));

  00218	e59f902c	 ldr         r9, [pc, #0x2C]
  0021c	e1a04000	 mov         r4, r0
  00220	e5993440	 ldr         r3, [r9, #0x440]
  00224	e3130901	 tst         r3, #1, 18
  00228	13130004	 tstne       r3, #4
  0022c	159f0014	 ldrne       r0, [pc, #0x14]
  00230	11a01004	 movne       r1, r4
  00234	1b000000	 blne        NKDbgPrintfW

; 237  :     return rc;
; 238  : }

  00238	e1a00004	 mov         r0, r4
  0023c	e28dd004	 add         sp, sp, #4
  00240	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00244	e12fff1e	 bx          lr
  00248		 |$LN15@OALIntrIni|
  00248		 |$LN16@OALIntrIni|
  00248	00000000	 DCD         |??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0024c		 |$LN17@OALIntrIni|
  0024c	00000000	 DCD         |dpCurSettings|
  00250		 |$LN18@OALIntrIni|
  00250	00000000	 DCD         |g_intcL1Level|
  00254		 |$LN19@OALIntrIni|
  00254	00000000	 DCD         |g_pIntcL1Regs|
  00258		 |$LN20@OALIntrIni|
  00258	00000000	 DCD         |??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0025c		 |$M44537|

			 ENDP  ; |OALIntrInit|

	END
