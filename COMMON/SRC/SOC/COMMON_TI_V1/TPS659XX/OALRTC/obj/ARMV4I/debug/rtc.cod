; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TPS659XX\OALRTC\rtc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|s_rtc|	%	0x40

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1EG@LALIIKNN@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|SystemTimeToString|
	IMPORT	|OALLogPrintf|

  00040			 AREA	 |.bss|, NOINIT
|?buffer@?1??SystemTimeToString@@9@9| % 0x80		; `SystemTimeToString'::`2'::buffer

  00000			 AREA	 |.pdata|, PDATA
|$T45331| DCD	|$LN5@SystemTime|
	DCD	0x40002a04
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@LALIIKNN@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0@| DCB "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, ".", 0x0, "%"
	DCB	0x0, "0", 0x0, "3", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SystemTimeToString| PROC

; 94   : {

  00000		 |$LN5@SystemTime|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd034	 sub         sp, sp, #0x34
  00010		 |$M45328|

; 95   :     static WCHAR buffer[64];
; 96   : 
; 97   :     OALLogPrintf(
; 98   :         buffer, 64, L"%04d.%02d.%02d %02d:%02d:%02d.%03d",
; 99   :         pSystemTime->wYear, pSystemTime->wMonth, pSystemTime->wDay,
; 100  :         pSystemTime->wHour, pSystemTime->wMinute, pSystemTime->wSecond, 
; 101  :         pSystemTime->wMilliseconds
; 102  :         );        

  00010	e59d303c	 ldr         r3, [sp, #0x3C]
  00014	e283300e	 add         r3, r3, #0xE
  00018	e1d330b0	 ldrh        r3, [r3]
  0001c	e58d3014	 str         r3, [sp, #0x14]
  00020	e59d303c	 ldr         r3, [sp, #0x3C]
  00024	e283300c	 add         r3, r3, #0xC
  00028	e1d330b0	 ldrh        r3, [r3]
  0002c	e58d3010	 str         r3, [sp, #0x10]
  00030	e59d303c	 ldr         r3, [sp, #0x3C]
  00034	e283300a	 add         r3, r3, #0xA
  00038	e1d330b0	 ldrh        r3, [r3]
  0003c	e58d300c	 str         r3, [sp, #0xC]
  00040	e59d303c	 ldr         r3, [sp, #0x3C]
  00044	e2833008	 add         r3, r3, #8
  00048	e1d330b0	 ldrh        r3, [r3]
  0004c	e58d3008	 str         r3, [sp, #8]
  00050	e59d303c	 ldr         r3, [sp, #0x3C]
  00054	e2833006	 add         r3, r3, #6
  00058	e1d330b0	 ldrh        r3, [r3]
  0005c	e58d3004	 str         r3, [sp, #4]
  00060	e59d303c	 ldr         r3, [sp, #0x3C]
  00064	e2833002	 add         r3, r3, #2
  00068	e1d330b0	 ldrh        r3, [r3]
  0006c	e58d3000	 str         r3, [sp]
  00070	e59d303c	 ldr         r3, [sp, #0x3C]
  00074	e1d330b0	 ldrh        r3, [r3]
  00078	e59f2024	 ldr         r2, [pc, #0x24]
  0007c	e3a01040	 mov         r1, #0x40
  00080	e59f0018	 ldr         r0, [pc, #0x18]
  00084	eb000000	 bl          OALLogPrintf

; 103  :     return buffer;

  00088	e59f3010	 ldr         r3, [pc, #0x10]
  0008c	e58d3030	 str         r3, [sp, #0x30]

; 104  : }

  00090	e59d0030	 ldr         r0, [sp, #0x30]
  00094	e28dd034	 add         sp, sp, #0x34
  00098	e89d6000	 ldmia       sp, {sp, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN6@SystemTime|
  000a0		 |$LN7@SystemTime|
  000a0	00000000	 DCD         |?buffer@?1??SystemTimeToString@@9@9|
  000a4		 |$LN8@SystemTime|
  000a4	00000000	 DCD         |??_C@_1EG@LALIIKNN@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0@|
  000a8		 |$M45329|

			 ENDP  ; |SystemTimeToString|

	EXPORT	|??_C@_1DM@BLINKFCK@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|HWTimeToString|

  000c0			 AREA	 |.bss|, NOINIT
|?buffer@?1??HWTimeToString@@9@9| % 0x80		; `HWTimeToString'::`2'::buffer

  00008			 AREA	 |.pdata|, PDATA
|$T45345| DCD	|$LN5@HWTimeToSt|
	DCD	0x40005604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BLINKFCK@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?$AA@| DCB "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "d", 0x0, ".", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "d", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d"
	DCB	0x0, ":", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, ":"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  000a8			 AREA	 |.text|, CODE, ARM

  000a8		 |HWTimeToString| PROC

; 112  : {

  000a8		 |$LN5@HWTimeToSt|
  000a8	e1a0c00d	 mov         r12, sp
  000ac	e92d0001	 stmdb       sp!, {r0}
  000b0	e92d5000	 stmdb       sp!, {r12, lr}
  000b4	e24dd02c	 sub         sp, sp, #0x2C
  000b8		 |$M45342|

; 113  :     static WCHAR buffer[64];
; 114  : 
; 115  :     OALLogPrintf(
; 116  :         buffer, 64, L"%04d.%02d.%02d %02d:%02d:%02d",
; 117  :         BCD2BIN(bcdTime[5]) + RTC_BASE_YEAR_MIN, 
; 118  :         BCD2BIN(bcdTime[4]), 
; 119  :         BCD2BIN(bcdTime[3]),
; 120  :         BCD2BIN(bcdTime[2]), 
; 121  :         BCD2BIN(bcdTime[1]), 
; 122  :         BCD2BIN(bcdTime[0])
; 123  :         );        

  000b8	e59d3034	 ldr         r3, [sp, #0x34]
  000bc	e5d33000	 ldrb        r3, [r3]
  000c0	e1a01243	 mov         r1, r3, asr #4
  000c4	e3a0300a	 mov         r3, #0xA
  000c8	e0020391	 mul         r2, r1, r3
  000cc	e59d3034	 ldr         r3, [sp, #0x34]
  000d0	e5d33000	 ldrb        r3, [r3]
  000d4	e203300f	 and         r3, r3, #0xF
  000d8	e0823003	 add         r3, r2, r3
  000dc	e58d3010	 str         r3, [sp, #0x10]
  000e0	e59d3034	 ldr         r3, [sp, #0x34]
  000e4	e2833001	 add         r3, r3, #1
  000e8	e5d33000	 ldrb        r3, [r3]
  000ec	e1a01243	 mov         r1, r3, asr #4
  000f0	e3a0300a	 mov         r3, #0xA
  000f4	e0020391	 mul         r2, r1, r3
  000f8	e59d3034	 ldr         r3, [sp, #0x34]
  000fc	e2833001	 add         r3, r3, #1
  00100	e5d33000	 ldrb        r3, [r3]
  00104	e203300f	 and         r3, r3, #0xF
  00108	e0823003	 add         r3, r2, r3
  0010c	e58d300c	 str         r3, [sp, #0xC]
  00110	e59d3034	 ldr         r3, [sp, #0x34]
  00114	e2833002	 add         r3, r3, #2
  00118	e5d33000	 ldrb        r3, [r3]
  0011c	e1a01243	 mov         r1, r3, asr #4
  00120	e3a0300a	 mov         r3, #0xA
  00124	e0020391	 mul         r2, r1, r3
  00128	e59d3034	 ldr         r3, [sp, #0x34]
  0012c	e2833002	 add         r3, r3, #2
  00130	e5d33000	 ldrb        r3, [r3]
  00134	e203300f	 and         r3, r3, #0xF
  00138	e0823003	 add         r3, r2, r3
  0013c	e58d3008	 str         r3, [sp, #8]
  00140	e59d3034	 ldr         r3, [sp, #0x34]
  00144	e2833003	 add         r3, r3, #3
  00148	e5d33000	 ldrb        r3, [r3]
  0014c	e1a01243	 mov         r1, r3, asr #4
  00150	e3a0300a	 mov         r3, #0xA
  00154	e0020391	 mul         r2, r1, r3
  00158	e59d3034	 ldr         r3, [sp, #0x34]
  0015c	e2833003	 add         r3, r3, #3
  00160	e5d33000	 ldrb        r3, [r3]
  00164	e203300f	 and         r3, r3, #0xF
  00168	e0823003	 add         r3, r2, r3
  0016c	e58d3004	 str         r3, [sp, #4]
  00170	e59d3034	 ldr         r3, [sp, #0x34]
  00174	e2833004	 add         r3, r3, #4
  00178	e5d33000	 ldrb        r3, [r3]
  0017c	e1a01243	 mov         r1, r3, asr #4
  00180	e3a0300a	 mov         r3, #0xA
  00184	e0020391	 mul         r2, r1, r3
  00188	e59d3034	 ldr         r3, [sp, #0x34]
  0018c	e2833004	 add         r3, r3, #4
  00190	e5d33000	 ldrb        r3, [r3]
  00194	e203300f	 and         r3, r3, #0xF
  00198	e0823003	 add         r3, r2, r3
  0019c	e58d3000	 str         r3, [sp]
  001a0	e59d3034	 ldr         r3, [sp, #0x34]
  001a4	e2833005	 add         r3, r3, #5
  001a8	e5d33000	 ldrb        r3, [r3]
  001ac	e1a01243	 mov         r1, r3, asr #4
  001b0	e3a0300a	 mov         r3, #0xA
  001b4	e0020391	 mul         r2, r1, r3
  001b8	e59d3034	 ldr         r3, [sp, #0x34]
  001bc	e2833005	 add         r3, r3, #5
  001c0	e5d33000	 ldrb        r3, [r3]
  001c4	e203300f	 and         r3, r3, #0xF
  001c8	e0823003	 add         r3, r2, r3
  001cc	e2833e7d	 add         r3, r3, #0x7D, 28
  001d0	e59f2024	 ldr         r2, [pc, #0x24]
  001d4	e3a01040	 mov         r1, #0x40
  001d8	e59f0018	 ldr         r0, [pc, #0x18]
  001dc	eb000000	 bl          OALLogPrintf

; 124  :     return buffer;

  001e0	e59f3010	 ldr         r3, [pc, #0x10]
  001e4	e58d3028	 str         r3, [sp, #0x28]

; 125  : }

  001e8	e59d0028	 ldr         r0, [sp, #0x28]
  001ec	e28dd02c	 add         sp, sp, #0x2C
  001f0	e89d6000	 ldmia       sp, {sp, lr}
  001f4	e12fff1e	 bx          lr
  001f8		 |$LN6@HWTimeToSt|
  001f8		 |$LN7@HWTimeToSt|
  001f8	00000000	 DCD         |?buffer@?1??HWTimeToString@@9@9|
  001fc		 |$LN8@HWTimeToSt|
  001fc	00000000	 DCD         |??_C@_1DM@BLINKFCK@?$AA?$CF?$AA0?$AA4?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?4?$AA?$CF?$AA0?$AA2?$AAd?$AA?5?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?3?$AA?$CF?$AA0?$AA2?$AAd?$AA?$AA@|
  00200		 |$M45343|

			 ENDP  ; |HWTimeToString|

	EXPORT	|ReadBaseOffset|

  00010			 AREA	 |.pdata|, PDATA
|$T45353| DCD	|$LN5@ReadBaseOf|
	DCD	0x4000ee04
; Function compile flags: /Odtp

  00200			 AREA	 |.text|, CODE, ARM

  00200		 |ReadBaseOffset| PROC

; 133  : {

  00200		 |$LN5@ReadBaseOf|
  00200	e1a0c00d	 mov         r12, sp
  00204	e92d0001	 stmdb       sp!, {r0}
  00208	e92d5000	 stmdb       sp!, {r12, lr}
  0020c	e24dd044	 sub         sp, sp, #0x44
  00210		 |$M45350|

; 134  :     UCHAR   val;
; 135  : 
; 136  :     // Read backup registers for secure time offset
; 137  :     *pOffset = 0;

  00210	e59d204c	 ldr         r2, [sp, #0x4C]
  00214	e3a03000	 mov         r3, #0
  00218	e5823000	 str         r3, [r2]
  0021c	e59d204c	 ldr         r2, [sp, #0x4C]
  00220	e3a03000	 mov         r3, #0
  00224	e5823004	 str         r3, [r2, #4]

; 138  : 
; 139  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_H, &val);

  00228	e28d2000	 add         r2, sp, #0
  0022c	e3a01803	 mov         r1, #3, 16
  00230	e381101b	 orr         r1, r1, #0x1B
  00234	e59f3378	 ldr         r3, [pc, #0x378]
  00238	e5930018	 ldr         r0, [r3, #0x18]
  0023c	eb000000	 bl          TWLReadByteReg

; 140  :     *pOffset = (*pOffset << 8) | val;

  00240	e59d304c	 ldr         r3, [sp, #0x4C]
  00244	e5932000	 ldr         r2, [r3]
  00248	e59d304c	 ldr         r3, [sp, #0x4C]
  0024c	e5933004	 ldr         r3, [r3, #4]
  00250	e58d2004	 str         r2, [sp, #4]
  00254	e1a00403	 mov         r0, r3, lsl #8
  00258	e59d3004	 ldr         r3, [sp, #4]
  0025c	e1a02c23	 mov         r2, r3, lsr #24
  00260	e59d3004	 ldr         r3, [sp, #4]
  00264	e1a01403	 mov         r1, r3, lsl #8
  00268	e1800002	 orr         r0, r0, r2
  0026c	e5dd3000	 ldrb        r3, [sp]
  00270	e58d3008	 str         r3, [sp, #8]
  00274	e59d2008	 ldr         r2, [sp, #8]
  00278	e59d3008	 ldr         r3, [sp, #8]
  0027c	e1a03fc3	 mov         r3, r3, asr #31
  00280	e1811002	 orr         r1, r1, r2
  00284	e1802003	 orr         r2, r0, r3
  00288	e59d304c	 ldr         r3, [sp, #0x4C]
  0028c	e5831000	 str         r1, [r3]
  00290	e59d304c	 ldr         r3, [sp, #0x4C]
  00294	e5832004	 str         r2, [r3, #4]

; 141  : 
; 142  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_G, &val);

  00298	e28d2000	 add         r2, sp, #0
  0029c	e3a01803	 mov         r1, #3, 16
  002a0	e381101a	 orr         r1, r1, #0x1A
  002a4	e59f3308	 ldr         r3, [pc, #0x308]
  002a8	e5930018	 ldr         r0, [r3, #0x18]
  002ac	eb000000	 bl          TWLReadByteReg

; 143  :     *pOffset = (*pOffset << 8) | val;

  002b0	e59d304c	 ldr         r3, [sp, #0x4C]
  002b4	e5932000	 ldr         r2, [r3]
  002b8	e59d304c	 ldr         r3, [sp, #0x4C]
  002bc	e5933004	 ldr         r3, [r3, #4]
  002c0	e58d200c	 str         r2, [sp, #0xC]
  002c4	e1a00403	 mov         r0, r3, lsl #8
  002c8	e59d300c	 ldr         r3, [sp, #0xC]
  002cc	e1a02c23	 mov         r2, r3, lsr #24
  002d0	e59d300c	 ldr         r3, [sp, #0xC]
  002d4	e1a01403	 mov         r1, r3, lsl #8
  002d8	e1800002	 orr         r0, r0, r2
  002dc	e5dd3000	 ldrb        r3, [sp]
  002e0	e58d3010	 str         r3, [sp, #0x10]
  002e4	e59d2010	 ldr         r2, [sp, #0x10]
  002e8	e59d3010	 ldr         r3, [sp, #0x10]
  002ec	e1a03fc3	 mov         r3, r3, asr #31
  002f0	e1811002	 orr         r1, r1, r2
  002f4	e1802003	 orr         r2, r0, r3
  002f8	e59d304c	 ldr         r3, [sp, #0x4C]
  002fc	e5831000	 str         r1, [r3]
  00300	e59d304c	 ldr         r3, [sp, #0x4C]
  00304	e5832004	 str         r2, [r3, #4]

; 144  : 
; 145  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_F, &val);

  00308	e28d2000	 add         r2, sp, #0
  0030c	e3a01803	 mov         r1, #3, 16
  00310	e3811019	 orr         r1, r1, #0x19
  00314	e59f3298	 ldr         r3, [pc, #0x298]
  00318	e5930018	 ldr         r0, [r3, #0x18]
  0031c	eb000000	 bl          TWLReadByteReg

; 146  :     *pOffset = (*pOffset << 8) | val;

  00320	e59d304c	 ldr         r3, [sp, #0x4C]
  00324	e5932000	 ldr         r2, [r3]
  00328	e59d304c	 ldr         r3, [sp, #0x4C]
  0032c	e5933004	 ldr         r3, [r3, #4]
  00330	e58d2014	 str         r2, [sp, #0x14]
  00334	e1a00403	 mov         r0, r3, lsl #8
  00338	e59d3014	 ldr         r3, [sp, #0x14]
  0033c	e1a02c23	 mov         r2, r3, lsr #24
  00340	e59d3014	 ldr         r3, [sp, #0x14]
  00344	e1a01403	 mov         r1, r3, lsl #8
  00348	e1800002	 orr         r0, r0, r2
  0034c	e5dd3000	 ldrb        r3, [sp]
  00350	e58d3018	 str         r3, [sp, #0x18]
  00354	e59d2018	 ldr         r2, [sp, #0x18]
  00358	e59d3018	 ldr         r3, [sp, #0x18]
  0035c	e1a03fc3	 mov         r3, r3, asr #31
  00360	e1811002	 orr         r1, r1, r2
  00364	e1802003	 orr         r2, r0, r3
  00368	e59d304c	 ldr         r3, [sp, #0x4C]
  0036c	e5831000	 str         r1, [r3]
  00370	e59d304c	 ldr         r3, [sp, #0x4C]
  00374	e5832004	 str         r2, [r3, #4]

; 147  : 
; 148  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_E, &val);

  00378	e28d2000	 add         r2, sp, #0
  0037c	e3a01803	 mov         r1, #3, 16
  00380	e3811018	 orr         r1, r1, #0x18
  00384	e59f3228	 ldr         r3, [pc, #0x228]
  00388	e5930018	 ldr         r0, [r3, #0x18]
  0038c	eb000000	 bl          TWLReadByteReg

; 149  :     *pOffset = (*pOffset << 8) | val;

  00390	e59d304c	 ldr         r3, [sp, #0x4C]
  00394	e5932000	 ldr         r2, [r3]
  00398	e59d304c	 ldr         r3, [sp, #0x4C]
  0039c	e5933004	 ldr         r3, [r3, #4]
  003a0	e58d201c	 str         r2, [sp, #0x1C]
  003a4	e1a00403	 mov         r0, r3, lsl #8
  003a8	e59d301c	 ldr         r3, [sp, #0x1C]
  003ac	e1a02c23	 mov         r2, r3, lsr #24
  003b0	e59d301c	 ldr         r3, [sp, #0x1C]
  003b4	e1a01403	 mov         r1, r3, lsl #8
  003b8	e1800002	 orr         r0, r0, r2
  003bc	e5dd3000	 ldrb        r3, [sp]
  003c0	e58d3020	 str         r3, [sp, #0x20]
  003c4	e59d2020	 ldr         r2, [sp, #0x20]
  003c8	e59d3020	 ldr         r3, [sp, #0x20]
  003cc	e1a03fc3	 mov         r3, r3, asr #31
  003d0	e1811002	 orr         r1, r1, r2
  003d4	e1802003	 orr         r2, r0, r3
  003d8	e59d304c	 ldr         r3, [sp, #0x4C]
  003dc	e5831000	 str         r1, [r3]
  003e0	e59d304c	 ldr         r3, [sp, #0x4C]
  003e4	e5832004	 str         r2, [r3, #4]

; 150  : 
; 151  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_D, &val);

  003e8	e28d2000	 add         r2, sp, #0
  003ec	e3a01803	 mov         r1, #3, 16
  003f0	e3811017	 orr         r1, r1, #0x17
  003f4	e59f31b8	 ldr         r3, [pc, #0x1B8]
  003f8	e5930018	 ldr         r0, [r3, #0x18]
  003fc	eb000000	 bl          TWLReadByteReg

; 152  :     *pOffset = (*pOffset << 8) | val;

  00400	e59d304c	 ldr         r3, [sp, #0x4C]
  00404	e5932000	 ldr         r2, [r3]
  00408	e59d304c	 ldr         r3, [sp, #0x4C]
  0040c	e5933004	 ldr         r3, [r3, #4]
  00410	e58d2024	 str         r2, [sp, #0x24]
  00414	e1a00403	 mov         r0, r3, lsl #8
  00418	e59d3024	 ldr         r3, [sp, #0x24]
  0041c	e1a02c23	 mov         r2, r3, lsr #24
  00420	e59d3024	 ldr         r3, [sp, #0x24]
  00424	e1a01403	 mov         r1, r3, lsl #8
  00428	e1800002	 orr         r0, r0, r2
  0042c	e5dd3000	 ldrb        r3, [sp]
  00430	e58d3028	 str         r3, [sp, #0x28]
  00434	e59d2028	 ldr         r2, [sp, #0x28]
  00438	e59d3028	 ldr         r3, [sp, #0x28]
  0043c	e1a03fc3	 mov         r3, r3, asr #31
  00440	e1811002	 orr         r1, r1, r2
  00444	e1802003	 orr         r2, r0, r3
  00448	e59d304c	 ldr         r3, [sp, #0x4C]
  0044c	e5831000	 str         r1, [r3]
  00450	e59d304c	 ldr         r3, [sp, #0x4C]
  00454	e5832004	 str         r2, [r3, #4]

; 153  : 
; 154  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_C, &val);

  00458	e28d2000	 add         r2, sp, #0
  0045c	e3a01803	 mov         r1, #3, 16
  00460	e3811016	 orr         r1, r1, #0x16
  00464	e59f3148	 ldr         r3, [pc, #0x148]
  00468	e5930018	 ldr         r0, [r3, #0x18]
  0046c	eb000000	 bl          TWLReadByteReg

; 155  :     *pOffset = (*pOffset << 8) | val;

  00470	e59d304c	 ldr         r3, [sp, #0x4C]
  00474	e5932000	 ldr         r2, [r3]
  00478	e59d304c	 ldr         r3, [sp, #0x4C]
  0047c	e5933004	 ldr         r3, [r3, #4]
  00480	e58d202c	 str         r2, [sp, #0x2C]
  00484	e1a00403	 mov         r0, r3, lsl #8
  00488	e59d302c	 ldr         r3, [sp, #0x2C]
  0048c	e1a02c23	 mov         r2, r3, lsr #24
  00490	e59d302c	 ldr         r3, [sp, #0x2C]
  00494	e1a01403	 mov         r1, r3, lsl #8
  00498	e1800002	 orr         r0, r0, r2
  0049c	e5dd3000	 ldrb        r3, [sp]
  004a0	e58d3030	 str         r3, [sp, #0x30]
  004a4	e59d2030	 ldr         r2, [sp, #0x30]
  004a8	e59d3030	 ldr         r3, [sp, #0x30]
  004ac	e1a03fc3	 mov         r3, r3, asr #31
  004b0	e1811002	 orr         r1, r1, r2
  004b4	e1802003	 orr         r2, r0, r3
  004b8	e59d304c	 ldr         r3, [sp, #0x4C]
  004bc	e5831000	 str         r1, [r3]
  004c0	e59d304c	 ldr         r3, [sp, #0x4C]
  004c4	e5832004	 str         r2, [r3, #4]

; 156  : 
; 157  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_B, &val);

  004c8	e28d2000	 add         r2, sp, #0
  004cc	e3a01803	 mov         r1, #3, 16
  004d0	e3811015	 orr         r1, r1, #0x15
  004d4	e59f30d8	 ldr         r3, [pc, #0xD8]
  004d8	e5930018	 ldr         r0, [r3, #0x18]
  004dc	eb000000	 bl          TWLReadByteReg

; 158  :     *pOffset = (*pOffset << 8) | val;

  004e0	e59d304c	 ldr         r3, [sp, #0x4C]
  004e4	e5932000	 ldr         r2, [r3]
  004e8	e59d304c	 ldr         r3, [sp, #0x4C]
  004ec	e5933004	 ldr         r3, [r3, #4]
  004f0	e58d2034	 str         r2, [sp, #0x34]
  004f4	e1a00403	 mov         r0, r3, lsl #8
  004f8	e59d3034	 ldr         r3, [sp, #0x34]
  004fc	e1a02c23	 mov         r2, r3, lsr #24
  00500	e59d3034	 ldr         r3, [sp, #0x34]
  00504	e1a01403	 mov         r1, r3, lsl #8
  00508	e1800002	 orr         r0, r0, r2
  0050c	e5dd3000	 ldrb        r3, [sp]
  00510	e58d3038	 str         r3, [sp, #0x38]
  00514	e59d2038	 ldr         r2, [sp, #0x38]
  00518	e59d3038	 ldr         r3, [sp, #0x38]
  0051c	e1a03fc3	 mov         r3, r3, asr #31
  00520	e1811002	 orr         r1, r1, r2
  00524	e1802003	 orr         r2, r0, r3
  00528	e59d304c	 ldr         r3, [sp, #0x4C]
  0052c	e5831000	 str         r1, [r3]
  00530	e59d304c	 ldr         r3, [sp, #0x4C]
  00534	e5832004	 str         r2, [r3, #4]

; 159  : 
; 160  :     TWLReadByteReg(s_rtc.hTWL, TWL_BACKUP_REG_A, &val);

  00538	e28d2000	 add         r2, sp, #0
  0053c	e3a01803	 mov         r1, #3, 16
  00540	e3811014	 orr         r1, r1, #0x14
  00544	e59f3068	 ldr         r3, [pc, #0x68]
  00548	e5930018	 ldr         r0, [r3, #0x18]
  0054c	eb000000	 bl          TWLReadByteReg

; 161  :     *pOffset = (*pOffset << 8) | val;

  00550	e59d304c	 ldr         r3, [sp, #0x4C]
  00554	e5932000	 ldr         r2, [r3]
  00558	e59d304c	 ldr         r3, [sp, #0x4C]
  0055c	e5933004	 ldr         r3, [r3, #4]
  00560	e58d203c	 str         r2, [sp, #0x3C]
  00564	e1a00403	 mov         r0, r3, lsl #8
  00568	e59d303c	 ldr         r3, [sp, #0x3C]
  0056c	e1a02c23	 mov         r2, r3, lsr #24
  00570	e59d303c	 ldr         r3, [sp, #0x3C]
  00574	e1a01403	 mov         r1, r3, lsl #8
  00578	e1800002	 orr         r0, r0, r2
  0057c	e5dd3000	 ldrb        r3, [sp]
  00580	e58d3040	 str         r3, [sp, #0x40]
  00584	e59d2040	 ldr         r2, [sp, #0x40]
  00588	e59d3040	 ldr         r3, [sp, #0x40]
  0058c	e1a03fc3	 mov         r3, r3, asr #31
  00590	e1811002	 orr         r1, r1, r2
  00594	e1802003	 orr         r2, r0, r3
  00598	e59d304c	 ldr         r3, [sp, #0x4C]
  0059c	e5831000	 str         r1, [r3]
  005a0	e59d304c	 ldr         r3, [sp, #0x4C]
  005a4	e5832004	 str         r2, [r3, #4]

; 162  : }

  005a8	e28dd044	 add         sp, sp, #0x44
  005ac	e89d6000	 ldmia       sp, {sp, lr}
  005b0	e12fff1e	 bx          lr
  005b4		 |$LN6@ReadBaseOf|
  005b4		 |$LN7@ReadBaseOf|
  005b4	00000000	 DCD         |s_rtc|
  005b8		 |$M45351|

			 ENDP  ; |ReadBaseOffset|

	IMPORT	|TWLReadRegs|

  00018			 AREA	 |.pdata|, PDATA
|$T45361| DCD	|$LN5@TWLReadByt|
	DCD	0x40001004
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  005b8			 AREA	 |.text|, CODE, ARM

  005b8		 |TWLReadByteReg| PROC

; 67   : {

  005b8		 |$LN5@TWLReadByt|
  005b8	e1a0c00d	 mov         r12, sp
  005bc	e92d0007	 stmdb       sp!, {r0 - r2}
  005c0	e92d5000	 stmdb       sp!, {r12, lr}
  005c4	e24dd008	 sub         sp, sp, #8
  005c8		 |$M45358|

; 68   :     return TWLReadRegs(hTWL,address,data,sizeof(*data));

  005c8	e3a03001	 mov         r3, #1
  005cc	e59d2018	 ldr         r2, [sp, #0x18]
  005d0	e59d1014	 ldr         r1, [sp, #0x14]
  005d4	e59d0010	 ldr         r0, [sp, #0x10]
  005d8	eb000000	 bl          TWLReadRegs
  005dc	e58d0004	 str         r0, [sp, #4]
  005e0	e59d3004	 ldr         r3, [sp, #4]
  005e4	e58d3000	 str         r3, [sp]

; 69   : }

  005e8	e59d0000	 ldr         r0, [sp]
  005ec	e28dd008	 add         sp, sp, #8
  005f0	e89d6000	 ldmia       sp, {sp, lr}
  005f4	e12fff1e	 bx          lr
  005f8		 |$M45359|

			 ENDP  ; |TWLReadByteReg|

	EXPORT	|WriteBaseOffset|

  00020			 AREA	 |.pdata|, PDATA
|$T45366| DCD	|$LN5@WriteBaseO|
	DCD	0x40006a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  005f8			 AREA	 |.text|, CODE, ARM

  005f8		 |WriteBaseOffset| PROC

; 170  : {

  005f8		 |$LN5@WriteBaseO|
  005f8	e1a0c00d	 mov         r12, sp
  005fc	e92d0001	 stmdb       sp!, {r0}
  00600	e92d5000	 stmdb       sp!, {r12, lr}
  00604	e24dd004	 sub         sp, sp, #4
  00608		 |$M45363|

; 171  :     UCHAR   val;
; 172  : 
; 173  :     // Write backup registers with secure time offset
; 174  :     val = (UCHAR)(*pOffset >> 0);

  00608	e59d300c	 ldr         r3, [sp, #0xC]
  0060c	e5933000	 ldr         r3, [r3]
  00610	e20330ff	 and         r3, r3, #0xFF
  00614	e5cd3000	 strb        r3, [sp]

; 175  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_A, val);

  00618	e5dd2000	 ldrb        r2, [sp]
  0061c	e3a01803	 mov         r1, #3, 16
  00620	e3811014	 orr         r1, r1, #0x14
  00624	e59f3170	 ldr         r3, [pc, #0x170]
  00628	e5930018	 ldr         r0, [r3, #0x18]
  0062c	eb000000	 bl          TWLWriteByteReg

; 176  : 
; 177  :     val = (UCHAR)(*pOffset >> 8);

  00630	e59d300c	 ldr         r3, [sp, #0xC]
  00634	e5932000	 ldr         r2, [r3]
  00638	e59d300c	 ldr         r3, [sp, #0xC]
  0063c	e5933004	 ldr         r3, [r3, #4]
  00640	e1a02422	 mov         r2, r2, lsr #8
  00644	e1a03c03	 mov         r3, r3, lsl #24
  00648	e1833002	 orr         r3, r3, r2
  0064c	e20330ff	 and         r3, r3, #0xFF
  00650	e5cd3000	 strb        r3, [sp]

; 178  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_B, val);

  00654	e5dd2000	 ldrb        r2, [sp]
  00658	e3a01803	 mov         r1, #3, 16
  0065c	e3811015	 orr         r1, r1, #0x15
  00660	e59f3134	 ldr         r3, [pc, #0x134]
  00664	e5930018	 ldr         r0, [r3, #0x18]
  00668	eb000000	 bl          TWLWriteByteReg

; 179  : 
; 180  :     val = (UCHAR)(*pOffset >> 16);

  0066c	e59d300c	 ldr         r3, [sp, #0xC]
  00670	e5932000	 ldr         r2, [r3]
  00674	e59d300c	 ldr         r3, [sp, #0xC]
  00678	e5933004	 ldr         r3, [r3, #4]
  0067c	e1a02822	 mov         r2, r2, lsr #16
  00680	e1a03803	 mov         r3, r3, lsl #16
  00684	e1833002	 orr         r3, r3, r2
  00688	e20330ff	 and         r3, r3, #0xFF
  0068c	e5cd3000	 strb        r3, [sp]

; 181  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_C, val);

  00690	e5dd2000	 ldrb        r2, [sp]
  00694	e3a01803	 mov         r1, #3, 16
  00698	e3811016	 orr         r1, r1, #0x16
  0069c	e59f30f8	 ldr         r3, [pc, #0xF8]
  006a0	e5930018	 ldr         r0, [r3, #0x18]
  006a4	eb000000	 bl          TWLWriteByteReg

; 182  : 
; 183  :     val = (UCHAR)(*pOffset >> 24);

  006a8	e59d300c	 ldr         r3, [sp, #0xC]
  006ac	e5932000	 ldr         r2, [r3]
  006b0	e59d300c	 ldr         r3, [sp, #0xC]
  006b4	e5933004	 ldr         r3, [r3, #4]
  006b8	e1a02c22	 mov         r2, r2, lsr #24
  006bc	e1a03403	 mov         r3, r3, lsl #8
  006c0	e1833002	 orr         r3, r3, r2
  006c4	e20330ff	 and         r3, r3, #0xFF
  006c8	e5cd3000	 strb        r3, [sp]

; 184  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_D, val);

  006cc	e5dd2000	 ldrb        r2, [sp]
  006d0	e3a01803	 mov         r1, #3, 16
  006d4	e3811017	 orr         r1, r1, #0x17
  006d8	e59f30bc	 ldr         r3, [pc, #0xBC]
  006dc	e5930018	 ldr         r0, [r3, #0x18]
  006e0	eb000000	 bl          TWLWriteByteReg

; 185  : 
; 186  :     val = (UCHAR)(*pOffset >> 32);

  006e4	e59d300c	 ldr         r3, [sp, #0xC]
  006e8	e5933004	 ldr         r3, [r3, #4]
  006ec	e20330ff	 and         r3, r3, #0xFF
  006f0	e5cd3000	 strb        r3, [sp]

; 187  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_E, val);

  006f4	e5dd2000	 ldrb        r2, [sp]
  006f8	e3a01803	 mov         r1, #3, 16
  006fc	e3811018	 orr         r1, r1, #0x18
  00700	e59f3094	 ldr         r3, [pc, #0x94]
  00704	e5930018	 ldr         r0, [r3, #0x18]
  00708	eb000000	 bl          TWLWriteByteReg

; 188  : 
; 189  :     val = (UCHAR)(*pOffset >> 40);

  0070c	e59d300c	 ldr         r3, [sp, #0xC]
  00710	e5933004	 ldr         r3, [r3, #4]
  00714	e1a03423	 mov         r3, r3, lsr #8
  00718	e20330ff	 and         r3, r3, #0xFF
  0071c	e5cd3000	 strb        r3, [sp]

; 190  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_F, val);

  00720	e5dd2000	 ldrb        r2, [sp]
  00724	e3a01803	 mov         r1, #3, 16
  00728	e3811019	 orr         r1, r1, #0x19
  0072c	e59f3068	 ldr         r3, [pc, #0x68]
  00730	e5930018	 ldr         r0, [r3, #0x18]
  00734	eb000000	 bl          TWLWriteByteReg

; 191  : 
; 192  :     val = (UCHAR)(*pOffset >> 48);

  00738	e59d300c	 ldr         r3, [sp, #0xC]
  0073c	e5933004	 ldr         r3, [r3, #4]
  00740	e1a03823	 mov         r3, r3, lsr #16
  00744	e20330ff	 and         r3, r3, #0xFF
  00748	e5cd3000	 strb        r3, [sp]

; 193  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_G, val);

  0074c	e5dd2000	 ldrb        r2, [sp]
  00750	e3a01803	 mov         r1, #3, 16
  00754	e381101a	 orr         r1, r1, #0x1A
  00758	e59f303c	 ldr         r3, [pc, #0x3C]
  0075c	e5930018	 ldr         r0, [r3, #0x18]
  00760	eb000000	 bl          TWLWriteByteReg

; 194  : 
; 195  :     val = (UCHAR)(*pOffset >> 56);

  00764	e59d300c	 ldr         r3, [sp, #0xC]
  00768	e5933004	 ldr         r3, [r3, #4]
  0076c	e1a03c23	 mov         r3, r3, lsr #24
  00770	e20330ff	 and         r3, r3, #0xFF
  00774	e5cd3000	 strb        r3, [sp]

; 196  :     TWLWriteByteReg(s_rtc.hTWL, TWL_BACKUP_REG_H, val);

  00778	e5dd2000	 ldrb        r2, [sp]
  0077c	e3a01803	 mov         r1, #3, 16
  00780	e381101b	 orr         r1, r1, #0x1B
  00784	e59f3010	 ldr         r3, [pc, #0x10]
  00788	e5930018	 ldr         r0, [r3, #0x18]
  0078c	eb000000	 bl          TWLWriteByteReg

; 197  : }

  00790	e28dd004	 add         sp, sp, #4
  00794	e89d6000	 ldmia       sp, {sp, lr}
  00798	e12fff1e	 bx          lr
  0079c		 |$LN6@WriteBaseO|
  0079c		 |$LN7@WriteBaseO|
  0079c	00000000	 DCD         |s_rtc|
  007a0		 |$M45364|

			 ENDP  ; |WriteBaseOffset|

	IMPORT	|TWLWriteRegs|

  00028			 AREA	 |.pdata|, PDATA
|$T45374| DCD	|$LN5@TWLWriteBy|
	DCD	0x40001004
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\triton\inc\twl.h

  007a0			 AREA	 |.text|, CODE, ARM

  007a0		 |TWLWriteByteReg| PROC

; 57   : {

  007a0		 |$LN5@TWLWriteBy|
  007a0	e1a0c00d	 mov         r12, sp
  007a4	e92d000f	 stmdb       sp!, {r0 - r3}
  007a8	e92d5000	 stmdb       sp!, {r12, lr}
  007ac	e24dd008	 sub         sp, sp, #8
  007b0		 |$M45371|

; 58   :     return TWLWriteRegs(hTWL,address,&data,sizeof(data));

  007b0	e3a03001	 mov         r3, #1
  007b4	e28d2018	 add         r2, sp, #0x18
  007b8	e59d1014	 ldr         r1, [sp, #0x14]
  007bc	e59d0010	 ldr         r0, [sp, #0x10]
  007c0	eb000000	 bl          TWLWriteRegs
  007c4	e58d0004	 str         r0, [sp, #4]
  007c8	e59d3004	 ldr         r3, [sp, #4]
  007cc	e58d3000	 str         r3, [sp]

; 59   : }

  007d0	e59d0000	 ldr         r0, [sp]
  007d4	e28dd008	 add         sp, sp, #8
  007d8	e89d6000	 ldmia       sp, {sp, lr}
  007dc	e12fff1e	 bx          lr
  007e0		 |$M45372|

			 ENDP  ; |TWLWriteByteReg|

	EXPORT	|??_C@_1EA@NFLJEDAN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@DMPAACGN@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@GDGDGGII@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAG?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@KEKFOIGH@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@LBOBPPKI@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AAT?$AAW?$AAL?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@CGLDPGNO@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@GMIOKMIL@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OALIoCtlHalInitRTC|
	IMPORT	|OEMGetTickCount|
	IMPORT	|NKSystemTimeToFileTime|
	IMPORT	|TWLOpen|
	IMPORT	|BSPSetT2MSECURE|
	IMPORT	|dwOEMHighSecurity|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__rt_sdiv|
	IMPORT	|__security_check_cookie|

  00030			 AREA	 |.pdata|, PDATA
|$T45400| DCD	|$LN23@OALIoCtlHa|
	DCD	0xc0021d04
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\oalrtc\rtc.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@NFLJEDAN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, " ", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@DMPAACGN@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "R"
	DCB	0x0, "T", 0x0, "C", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@GDGDGGII@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAG?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "G"
	DCB	0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "R", 0x0, "T", 0x0, "C", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@KEKFOIGH@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@LBOBPPKI@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AAT?$AAW?$AAL?$AA_@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, " ", 0x0, "R"
	DCB	0x0, "T", 0x0, "C", 0x0, " ", 0x0, "T", 0x0, "W", 0x0, "L"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "C", 0x0, "U", 0x0, "R"
	DCB	0x0, "E", 0x0, "D", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "G"
	DCB	0x0, "_", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@CGLDPGNO@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@| DCB " "
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "T", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "o"
	DCB	0x0, "n", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@GMIOKMIL@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "R", 0x0, "T", 0x0, "C"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T45396| DCD	0xffffffb4
; Function compile flags: /Odtp

  007e0			 AREA	 |.text|, CODE, ARM

  007e0	00000000	 DCD         |__GSHandlerCheck|
  007e4	00000000	 DCD         |$T45396|

  007e8		 |OALIoCtlHalInitRTC| PROC

; 216  : {

  007e8		 |$LN23@OALIoCtlHa|
  007e8	e1a0c00d	 mov         r12, sp
  007ec	e92d000f	 stmdb       sp!, {r0 - r3}
  007f0	e92d5010	 stmdb       sp!, {r4, r12, lr}
  007f4	e24dd058	 sub         sp, sp, #0x58
  007f8		 |$M45397|
  007f8	e59f3858	 ldr         r3, [pc, #0x858]
  007fc	e5933000	 ldr         r3, [r3]
  00800	e58d3028	 str         r3, [sp, #0x28]

; 217  :     BOOL            rc = FALSE;

  00804	e3a03000	 mov         r3, #0
  00808	e58d3000	 str         r3, [sp]

; 218  :     SYSTEMTIME      *pGivenTime = (LPSYSTEMTIME) pInBuffer;

  0080c	e59d3068	 ldr         r3, [sp, #0x68]
  00810	e58d3010	 str         r3, [sp, #0x10]

; 219  :     UCHAR           bcdTime[6];
; 220  :     UCHAR           status;
; 221  :     UCHAR           secure;
; 222  : 
; 223  :     UNREFERENCED_PARAMETER(pOutSize);
; 224  :     UNREFERENCED_PARAMETER(outSize);
; 225  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 226  :     UNREFERENCED_PARAMETER(inSize);
; 227  :     UNREFERENCED_PARAMETER(code);
; 228  : 
; 229  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OALIoCtlHalInitRTC()\r\n"));

  00814	e59f3818	 ldr         r3, [pc, #0x818]
  00818	e5933440	 ldr         r3, [r3, #0x440]
  0081c	e3130b02	 tst         r3, #2, 22
  00820	0a000008	 beq         |$LN7@OALIoCtlHa|
  00824	e59f3808	 ldr         r3, [pc, #0x808]
  00828	e5933440	 ldr         r3, [r3, #0x440]
  0082c	e3130004	 tst         r3, #4
  00830	0a000004	 beq         |$LN7@OALIoCtlHa|
  00834	e59f0818	 ldr         r0, [pc, #0x818]
  00838	eb000000	 bl          NKDbgPrintfW
  0083c	e3a03001	 mov         r3, #1
  00840	e58d3030	 str         r3, [sp, #0x30]
  00844	ea000001	 b           |$LN8@OALIoCtlHa|
  00848		 |$LN7@OALIoCtlHa|
  00848	e3a03000	 mov         r3, #0
  0084c	e58d3030	 str         r3, [sp, #0x30]
  00850		 |$LN8@OALIoCtlHa|

; 230  : 
; 231  :    
; 232  :     // Initialize RTC critical section
; 233  :     InitializeCriticalSection(&s_rtc.cs);

  00850	e59f37e0	 ldr         r3, [pc, #0x7E0]
  00854	e2830004	 add         r0, r3, #4
  00858	eb000000	 bl          InitializeCriticalSection

; 234  : 
; 235  :     // Set CPU GPIO_64 (T2 MSECURE) to be output/high (unsecure)
; 236  :     // This allows write access to the T2 RTC calendar/time registers
; 237  :     // OMAP35XX GP only
; 238  :     if( dwOEMHighSecurity == OEM_HIGH_SECURITY_GP )

  0085c	e59f37ec	 ldr         r3, [pc, #0x7EC]
  00860	e5933000	 ldr         r3, [r3]
  00864	e3530002	 cmp         r3, #2
  00868	1a000001	 bne         |$LN4@OALIoCtlHa|

; 239  :     {
; 240  :         BSPSetT2MSECURE(TRUE);

  0086c	e3a00001	 mov         r0, #1
  00870	eb000000	 bl          BSPSetT2MSECURE
  00874		 |$LN4@OALIoCtlHa|

; 241  :     }
; 242  : 
; 243  :     // First read RTC status from Triton 
; 244  :     s_rtc.hTWL = TWLOpen();

  00874	eb000000	 bl          TWLOpen
  00878	e58d0034	 str         r0, [sp, #0x34]
  0087c	e59d2034	 ldr         r2, [sp, #0x34]
  00880	e59f37b0	 ldr         r3, [pc, #0x7B0]
  00884	e5832018	 str         r2, [r3, #0x18]

; 245  :     if (s_rtc.hTWL == NULL)

  00888	e59f37a8	 ldr         r3, [pc, #0x7A8]
  0088c	e5933018	 ldr         r3, [r3, #0x18]
  00890	e3530000	 cmp         r3, #0
  00894	1a00000b	 bne         |$LN3@OALIoCtlHa|

; 246  :         {
; 247  :         OALMSG(OAL_ERROR, (L" OALIoCtlHalInitRTC(): Failed to open Triton\r\n"));

  00898	e59f3794	 ldr         r3, [pc, #0x794]
  0089c	e5933440	 ldr         r3, [r3, #0x440]
  008a0	e3130001	 tst         r3, #1
  008a4	0a000004	 beq         |$LN9@OALIoCtlHa|
  008a8	e59f079c	 ldr         r0, [pc, #0x79C]
  008ac	eb000000	 bl          NKDbgPrintfW
  008b0	e3a03001	 mov         r3, #1
  008b4	e58d3038	 str         r3, [sp, #0x38]
  008b8	ea000001	 b           |$LN10@OALIoCtlHa|
  008bc		 |$LN9@OALIoCtlHa|
  008bc	e3a03000	 mov         r3, #0
  008c0	e58d3038	 str         r3, [sp, #0x38]
  008c4		 |$LN10@OALIoCtlHa|

; 248  :         goto cleanUp;

  008c4	ea0001c1	 b           |$cleanUp$45162|
  008c8		 |$LN3@OALIoCtlHa|

; 249  :         }
; 250  : 
; 251  :     // Read secure registers for secure hash
; 252  :     status = 0;

  008c8	e3a03000	 mov         r3, #0
  008cc	e5cd3014	 strb        r3, [sp, #0x14]

; 253  : 
; 254  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECURED_REG_A, &secure);

  008d0	e28d2004	 add         r2, sp, #4
  008d4	e3a01803	 mov         r1, #3, 16
  008d8	e59f3758	 ldr         r3, [pc, #0x758]
  008dc	e5930018	 ldr         r0, [r3, #0x18]
  008e0	eb000000	 bl          TWLReadByteReg

; 255  :     status |= secure;

  008e4	e5dd3004	 ldrb        r3, [sp, #4]
  008e8	e1a02003	 mov         r2, r3
  008ec	e5dd3014	 ldrb        r3, [sp, #0x14]
  008f0	e1833002	 orr         r3, r3, r2
  008f4	e20330ff	 and         r3, r3, #0xFF
  008f8	e5cd3014	 strb        r3, [sp, #0x14]

; 256  : 
; 257  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECURED_REG_B, &secure);

  008fc	e28d2004	 add         r2, sp, #4
  00900	e3a01803	 mov         r1, #3, 16
  00904	e3811001	 orr         r1, r1, #1
  00908	e59f3728	 ldr         r3, [pc, #0x728]
  0090c	e5930018	 ldr         r0, [r3, #0x18]
  00910	eb000000	 bl          TWLReadByteReg

; 258  :     status |= secure;

  00914	e5dd3004	 ldrb        r3, [sp, #4]
  00918	e1a02003	 mov         r2, r3
  0091c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00920	e1833002	 orr         r3, r3, r2
  00924	e20330ff	 and         r3, r3, #0xFF
  00928	e5cd3014	 strb        r3, [sp, #0x14]

; 259  : 
; 260  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECURED_REG_C, &secure);

  0092c	e28d2004	 add         r2, sp, #4
  00930	e3a01803	 mov         r1, #3, 16
  00934	e3811002	 orr         r1, r1, #2
  00938	e59f36f8	 ldr         r3, [pc, #0x6F8]
  0093c	e5930018	 ldr         r0, [r3, #0x18]
  00940	eb000000	 bl          TWLReadByteReg

; 261  :     status |= secure;

  00944	e5dd3004	 ldrb        r3, [sp, #4]
  00948	e1a02003	 mov         r2, r3
  0094c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00950	e1833002	 orr         r3, r3, r2
  00954	e20330ff	 and         r3, r3, #0xFF
  00958	e5cd3014	 strb        r3, [sp, #0x14]

; 262  : 
; 263  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECURED_REG_D, &secure);

  0095c	e28d2004	 add         r2, sp, #4
  00960	e3a01803	 mov         r1, #3, 16
  00964	e3811003	 orr         r1, r1, #3
  00968	e59f36c8	 ldr         r3, [pc, #0x6C8]
  0096c	e5930018	 ldr         r0, [r3, #0x18]
  00970	eb000000	 bl          TWLReadByteReg

; 264  :     status |= secure;

  00974	e5dd3004	 ldrb        r3, [sp, #4]
  00978	e1a02003	 mov         r2, r3
  0097c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00980	e1833002	 orr         r3, r3, r2
  00984	e20330ff	 and         r3, r3, #0xFF
  00988	e5cd3014	 strb        r3, [sp, #0x14]

; 265  : 
; 266  : 
; 267  :     OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  RTC TWL_SECURED_REG_= 0x%x\r\n", status));

  0098c	e59f36a0	 ldr         r3, [pc, #0x6A0]
  00990	e5933440	 ldr         r3, [r3, #0x440]
  00994	e3130b02	 tst         r3, #2, 22
  00998	0a000009	 beq         |$LN11@OALIoCtlHa|
  0099c	e59f3690	 ldr         r3, [pc, #0x690]
  009a0	e5933440	 ldr         r3, [r3, #0x440]
  009a4	e3130004	 tst         r3, #4
  009a8	0a000005	 beq         |$LN11@OALIoCtlHa|
  009ac	e5dd1014	 ldrb        r1, [sp, #0x14]
  009b0	e59f0690	 ldr         r0, [pc, #0x690]
  009b4	eb000000	 bl          NKDbgPrintfW
  009b8	e3a03001	 mov         r3, #1
  009bc	e58d303c	 str         r3, [sp, #0x3C]
  009c0	ea000001	 b           |$LN12@OALIoCtlHa|
  009c4		 |$LN11@OALIoCtlHa|
  009c4	e3a03000	 mov         r3, #0
  009c8	e58d303c	 str         r3, [sp, #0x3C]
  009cc		 |$LN12@OALIoCtlHa|

; 268  : 
; 269  : #if 0
; 270  :     // Not needed for CE embedded, only need to reset RTC if TWL/TPS PMIC is reset
; 271  :     // Check for a clean boot of device - if so, reset date/time to system default (LTK2026)
; 272  :     pColdBoot = OALArgsQuery(OAL_ARGS_QUERY_COLDBOOT);
; 273  :     if ((pColdBoot != NULL) && *pColdBoot)
; 274  :         {
; 275  :         OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  Clean boot, reset date time\r\n"));
; 276  :         status = 0;
; 277  :         }
; 278  : #endif
; 279  : 		
; 280  :     // Start RTC when it isn't running
; 281  :     if (status == 0 && pGivenTime != NULL)

  009cc	e5dd3014	 ldrb        r3, [sp, #0x14]
  009d0	e3530000	 cmp         r3, #0
  009d4	1a0000d2	 bne         |$LN2@OALIoCtlHa|
  009d8	e59d3010	 ldr         r3, [sp, #0x10]
  009dc	e3530000	 cmp         r3, #0
  009e0	0a0000cf	 beq         |$LN2@OALIoCtlHa|

; 282  :         {
; 283  :         OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  Resetting RTC\r\n"));

  009e4	e59f3648	 ldr         r3, [pc, #0x648]
  009e8	e5933440	 ldr         r3, [r3, #0x440]
  009ec	e3130b02	 tst         r3, #2, 22
  009f0	0a000008	 beq         |$LN13@OALIoCtlHa|
  009f4	e59f3638	 ldr         r3, [pc, #0x638]
  009f8	e5933440	 ldr         r3, [r3, #0x440]
  009fc	e3130004	 tst         r3, #4
  00a00	0a000004	 beq         |$LN13@OALIoCtlHa|
  00a04	e59f0638	 ldr         r0, [pc, #0x638]
  00a08	eb000000	 bl          NKDbgPrintfW
  00a0c	e3a03001	 mov         r3, #1
  00a10	e58d3040	 str         r3, [sp, #0x40]
  00a14	ea000001	 b           |$LN14@OALIoCtlHa|
  00a18		 |$LN13@OALIoCtlHa|
  00a18	e3a03000	 mov         r3, #0
  00a1c	e58d3040	 str         r3, [sp, #0x40]
  00a20		 |$LN14@OALIoCtlHa|

; 284  : 
; 285  :         // Write power_up and alarm bits to clear power up flag (and any interrupt flag)
; 286  :         TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_STATUS_REG, TWL_RTC_STATUS_POWER_UP|TWL_RTC_STATUS_ALARM);

  00a20	e3a020c0	 mov         r2, #0xC0
  00a24	e3a01803	 mov         r1, #3, 16
  00a28	e381102a	 orr         r1, r1, #0x2A
  00a2c	e59f3604	 ldr         r3, [pc, #0x604]
  00a30	e5930018	 ldr         r0, [r3, #0x18]
  00a34	eb000000	 bl          TWLWriteByteReg

; 287  : 
; 288  :         //  Convert system time to BCD
; 289  :         bcdTime[5] = BIN2BCD(pGivenTime->wYear - RTC_BASE_YEAR_MIN);

  00a38	e59d3010	 ldr         r3, [sp, #0x10]
  00a3c	e1d330b0	 ldrh        r3, [r3]
  00a40	e2433e7d	 sub         r3, r3, #0x7D, 28
  00a44	e20330ff	 and         r3, r3, #0xFF
  00a48	e1a01003	 mov         r1, r3
  00a4c	e3a0000a	 mov         r0, #0xA
  00a50	eb000000	 bl          __rt_sdiv
  00a54	e1a04200	 mov         r4, r0, lsl #4
  00a58	e59d3010	 ldr         r3, [sp, #0x10]
  00a5c	e1d330b0	 ldrh        r3, [r3]
  00a60	e2433e7d	 sub         r3, r3, #0x7D, 28
  00a64	e20330ff	 and         r3, r3, #0xFF
  00a68	e1a01003	 mov         r1, r3
  00a6c	e3a0000a	 mov         r0, #0xA
  00a70	eb000000	 bl          __rt_sdiv
  00a74	e1843001	 orr         r3, r4, r1
  00a78	e20330ff	 and         r3, r3, #0xFF
  00a7c	e5cd300d	 strb        r3, [sp, #0xD]

; 290  :         bcdTime[4] = BIN2BCD(pGivenTime->wMonth);

  00a80	e59d3010	 ldr         r3, [sp, #0x10]
  00a84	e2833002	 add         r3, r3, #2
  00a88	e1d330b0	 ldrh        r3, [r3]
  00a8c	e20330ff	 and         r3, r3, #0xFF
  00a90	e1a01003	 mov         r1, r3
  00a94	e3a0000a	 mov         r0, #0xA
  00a98	eb000000	 bl          __rt_sdiv
  00a9c	e1a04200	 mov         r4, r0, lsl #4
  00aa0	e59d3010	 ldr         r3, [sp, #0x10]
  00aa4	e2833002	 add         r3, r3, #2
  00aa8	e1d330b0	 ldrh        r3, [r3]
  00aac	e20330ff	 and         r3, r3, #0xFF
  00ab0	e1a01003	 mov         r1, r3
  00ab4	e3a0000a	 mov         r0, #0xA
  00ab8	eb000000	 bl          __rt_sdiv
  00abc	e1843001	 orr         r3, r4, r1
  00ac0	e20330ff	 and         r3, r3, #0xFF
  00ac4	e5cd300c	 strb        r3, [sp, #0xC]

; 291  :         bcdTime[3] = BIN2BCD(pGivenTime->wDay);

  00ac8	e59d3010	 ldr         r3, [sp, #0x10]
  00acc	e2833006	 add         r3, r3, #6
  00ad0	e1d330b0	 ldrh        r3, [r3]
  00ad4	e20330ff	 and         r3, r3, #0xFF
  00ad8	e1a01003	 mov         r1, r3
  00adc	e3a0000a	 mov         r0, #0xA
  00ae0	eb000000	 bl          __rt_sdiv
  00ae4	e1a04200	 mov         r4, r0, lsl #4
  00ae8	e59d3010	 ldr         r3, [sp, #0x10]
  00aec	e2833006	 add         r3, r3, #6
  00af0	e1d330b0	 ldrh        r3, [r3]
  00af4	e20330ff	 and         r3, r3, #0xFF
  00af8	e1a01003	 mov         r1, r3
  00afc	e3a0000a	 mov         r0, #0xA
  00b00	eb000000	 bl          __rt_sdiv
  00b04	e1843001	 orr         r3, r4, r1
  00b08	e20330ff	 and         r3, r3, #0xFF
  00b0c	e5cd300b	 strb        r3, [sp, #0xB]

; 292  :         bcdTime[2] = BIN2BCD(pGivenTime->wHour);

  00b10	e59d3010	 ldr         r3, [sp, #0x10]
  00b14	e2833008	 add         r3, r3, #8
  00b18	e1d330b0	 ldrh        r3, [r3]
  00b1c	e20330ff	 and         r3, r3, #0xFF
  00b20	e1a01003	 mov         r1, r3
  00b24	e3a0000a	 mov         r0, #0xA
  00b28	eb000000	 bl          __rt_sdiv
  00b2c	e1a04200	 mov         r4, r0, lsl #4
  00b30	e59d3010	 ldr         r3, [sp, #0x10]
  00b34	e2833008	 add         r3, r3, #8
  00b38	e1d330b0	 ldrh        r3, [r3]
  00b3c	e20330ff	 and         r3, r3, #0xFF
  00b40	e1a01003	 mov         r1, r3
  00b44	e3a0000a	 mov         r0, #0xA
  00b48	eb000000	 bl          __rt_sdiv
  00b4c	e1843001	 orr         r3, r4, r1
  00b50	e20330ff	 and         r3, r3, #0xFF
  00b54	e5cd300a	 strb        r3, [sp, #0xA]

; 293  :         bcdTime[1] = BIN2BCD(pGivenTime->wMinute);

  00b58	e59d3010	 ldr         r3, [sp, #0x10]
  00b5c	e283300a	 add         r3, r3, #0xA
  00b60	e1d330b0	 ldrh        r3, [r3]
  00b64	e20330ff	 and         r3, r3, #0xFF
  00b68	e1a01003	 mov         r1, r3
  00b6c	e3a0000a	 mov         r0, #0xA
  00b70	eb000000	 bl          __rt_sdiv
  00b74	e1a04200	 mov         r4, r0, lsl #4
  00b78	e59d3010	 ldr         r3, [sp, #0x10]
  00b7c	e283300a	 add         r3, r3, #0xA
  00b80	e1d330b0	 ldrh        r3, [r3]
  00b84	e20330ff	 and         r3, r3, #0xFF
  00b88	e1a01003	 mov         r1, r3
  00b8c	e3a0000a	 mov         r0, #0xA
  00b90	eb000000	 bl          __rt_sdiv
  00b94	e1843001	 orr         r3, r4, r1
  00b98	e20330ff	 and         r3, r3, #0xFF
  00b9c	e5cd3009	 strb        r3, [sp, #9]

; 294  :         bcdTime[0] = BIN2BCD(pGivenTime->wSecond);

  00ba0	e59d3010	 ldr         r3, [sp, #0x10]
  00ba4	e283300c	 add         r3, r3, #0xC
  00ba8	e1d330b0	 ldrh        r3, [r3]
  00bac	e20330ff	 and         r3, r3, #0xFF
  00bb0	e1a01003	 mov         r1, r3
  00bb4	e3a0000a	 mov         r0, #0xA
  00bb8	eb000000	 bl          __rt_sdiv
  00bbc	e1a04200	 mov         r4, r0, lsl #4
  00bc0	e59d3010	 ldr         r3, [sp, #0x10]
  00bc4	e283300c	 add         r3, r3, #0xC
  00bc8	e1d330b0	 ldrh        r3, [r3]
  00bcc	e20330ff	 and         r3, r3, #0xFF
  00bd0	e1a01003	 mov         r1, r3
  00bd4	e3a0000a	 mov         r0, #0xA
  00bd8	eb000000	 bl          __rt_sdiv
  00bdc	e1843001	 orr         r3, r4, r1
  00be0	e20330ff	 and         r3, r3, #0xFF
  00be4	e5cd3008	 strb        r3, [sp, #8]

; 295  : 
; 296  :         //  Initialize RTC with given values
; 297  :         TWLWriteByteReg(s_rtc.hTWL, TWL_YEARS_REG, bcdTime[5]);

  00be8	e5dd200d	 ldrb        r2, [sp, #0xD]
  00bec	e3a01803	 mov         r1, #3, 16
  00bf0	e3811021	 orr         r1, r1, #0x21
  00bf4	e59f343c	 ldr         r3, [pc, #0x43C]
  00bf8	e5930018	 ldr         r0, [r3, #0x18]
  00bfc	eb000000	 bl          TWLWriteByteReg

; 298  :         TWLWriteByteReg(s_rtc.hTWL, TWL_MONTHS_REG, bcdTime[4]);

  00c00	e5dd200c	 ldrb        r2, [sp, #0xC]
  00c04	e3a01803	 mov         r1, #3, 16
  00c08	e3811020	 orr         r1, r1, #0x20
  00c0c	e59f3424	 ldr         r3, [pc, #0x424]
  00c10	e5930018	 ldr         r0, [r3, #0x18]
  00c14	eb000000	 bl          TWLWriteByteReg

; 299  :         TWLWriteByteReg(s_rtc.hTWL, TWL_DAYS_REG, bcdTime[3]);

  00c18	e5dd200b	 ldrb        r2, [sp, #0xB]
  00c1c	e3a01803	 mov         r1, #3, 16
  00c20	e381101f	 orr         r1, r1, #0x1F
  00c24	e59f340c	 ldr         r3, [pc, #0x40C]
  00c28	e5930018	 ldr         r0, [r3, #0x18]
  00c2c	eb000000	 bl          TWLWriteByteReg

; 300  :         TWLWriteByteReg(s_rtc.hTWL, TWL_HOURS_REG, bcdTime[2]);

  00c30	e5dd200a	 ldrb        r2, [sp, #0xA]
  00c34	e3a01803	 mov         r1, #3, 16
  00c38	e381101e	 orr         r1, r1, #0x1E
  00c3c	e59f33f4	 ldr         r3, [pc, #0x3F4]
  00c40	e5930018	 ldr         r0, [r3, #0x18]
  00c44	eb000000	 bl          TWLWriteByteReg

; 301  :         TWLWriteByteReg(s_rtc.hTWL, TWL_MINUTES_REG, bcdTime[1]);

  00c48	e5dd2009	 ldrb        r2, [sp, #9]
  00c4c	e3a01803	 mov         r1, #3, 16
  00c50	e381101d	 orr         r1, r1, #0x1D
  00c54	e59f33dc	 ldr         r3, [pc, #0x3DC]
  00c58	e5930018	 ldr         r0, [r3, #0x18]
  00c5c	eb000000	 bl          TWLWriteByteReg

; 302  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECONDS_REG, bcdTime[0]);

  00c60	e5dd2008	 ldrb        r2, [sp, #8]
  00c64	e3a01803	 mov         r1, #3, 16
  00c68	e381101c	 orr         r1, r1, #0x1C
  00c6c	e59f33c4	 ldr         r3, [pc, #0x3C4]
  00c70	e5930018	 ldr         r0, [r3, #0x18]
  00c74	eb000000	 bl          TWLWriteByteReg

; 303  : 
; 304  :         //  Enable RTC
; 305  :         TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, TWL_RTC_CTRL_RUN);

  00c78	e3a02001	 mov         r2, #1
  00c7c	e3a01803	 mov         r1, #3, 16
  00c80	e3811029	 orr         r1, r1, #0x29
  00c84	e59f33ac	 ldr         r3, [pc, #0x3AC]
  00c88	e5930018	 ldr         r0, [r3, #0x18]
  00c8c	eb000000	 bl          TWLWriteByteReg

; 306  : 
; 307  :         //  Write fake hash to secure regs
; 308  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECURED_REG_A, 0xAA);

  00c90	e3a020aa	 mov         r2, #0xAA
  00c94	e3a01803	 mov         r1, #3, 16
  00c98	e59f3398	 ldr         r3, [pc, #0x398]
  00c9c	e5930018	 ldr         r0, [r3, #0x18]
  00ca0	eb000000	 bl          TWLWriteByteReg

; 309  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECURED_REG_B, 0xBB);

  00ca4	e3a020bb	 mov         r2, #0xBB
  00ca8	e3a01803	 mov         r1, #3, 16
  00cac	e3811001	 orr         r1, r1, #1
  00cb0	e59f3380	 ldr         r3, [pc, #0x380]
  00cb4	e5930018	 ldr         r0, [r3, #0x18]
  00cb8	eb000000	 bl          TWLWriteByteReg

; 310  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECURED_REG_C, 0xCC);

  00cbc	e3a020cc	 mov         r2, #0xCC
  00cc0	e3a01803	 mov         r1, #3, 16
  00cc4	e3811002	 orr         r1, r1, #2
  00cc8	e59f3368	 ldr         r3, [pc, #0x368]
  00ccc	e5930018	 ldr         r0, [r3, #0x18]
  00cd0	eb000000	 bl          TWLWriteByteReg

; 311  :         TWLWriteByteReg(s_rtc.hTWL, TWL_SECURED_REG_D, 0xDD);

  00cd4	e3a020dd	 mov         r2, #0xDD
  00cd8	e3a01803	 mov         r1, #3, 16
  00cdc	e3811003	 orr         r1, r1, #3
  00ce0	e59f3350	 ldr         r3, [pc, #0x350]
  00ce4	e5930018	 ldr         r0, [r3, #0x18]
  00ce8	eb000000	 bl          TWLWriteByteReg

; 312  : 
; 313  :         //  Convert given time initialization date/time to FILETIME
; 314  :         NKSystemTimeToFileTime(pGivenTime, (FILETIME*)&s_rtc.baseFiletime);

  00cec	e59f3344	 ldr         r3, [pc, #0x344]
  00cf0	e2831020	 add         r1, r3, #0x20
  00cf4	e59d0010	 ldr         r0, [sp, #0x10]
  00cf8	eb000000	 bl          NKSystemTimeToFileTime

; 315  : 
; 316  :         //  Set a default value for base offset
; 317  :         s_rtc.baseOffset = 0;

  00cfc	e59f2334	 ldr         r2, [pc, #0x334]
  00d00	e3a03000	 mov         r3, #0
  00d04	e5823028	 str         r3, [r2, #0x28]
  00d08	e59f2328	 ldr         r2, [pc, #0x328]
  00d0c	e3a03000	 mov         r3, #0
  00d10	e582302c	 str         r3, [r2, #0x2C]

; 318  : 
; 319  :         //  Save off base offset to the backup regs
; 320  :         WriteBaseOffset( &s_rtc.baseOffset ); 

  00d14	e59f331c	 ldr         r3, [pc, #0x31C]
  00d18	e2830028	 add         r0, r3, #0x28
  00d1c	eb000000	 bl          WriteBaseOffset

; 321  :         }
; 322  :     else

  00d20	ea00008d	 b           |$LN1@OALIoCtlHa|
  00d24		 |$LN2@OALIoCtlHa|

; 323  :         {
; 324  :         SYSTEMTIME  baseSystemTime;
; 325  : 
; 326  :         OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  Getting RTC\r\n"));

  00d24	e59f3308	 ldr         r3, [pc, #0x308]
  00d28	e5933440	 ldr         r3, [r3, #0x440]
  00d2c	e3130b02	 tst         r3, #2, 22
  00d30	0a000008	 beq         |$LN15@OALIoCtlHa|
  00d34	e59f32f8	 ldr         r3, [pc, #0x2F8]
  00d38	e5933440	 ldr         r3, [r3, #0x440]
  00d3c	e3130004	 tst         r3, #4
  00d40	0a000004	 beq         |$LN15@OALIoCtlHa|
  00d44	e59f02f4	 ldr         r0, [pc, #0x2F4]
  00d48	eb000000	 bl          NKDbgPrintfW
  00d4c	e3a03001	 mov         r3, #1
  00d50	e58d3044	 str         r3, [sp, #0x44]
  00d54	ea000001	 b           |$LN16@OALIoCtlHa|
  00d58		 |$LN15@OALIoCtlHa|
  00d58	e3a03000	 mov         r3, #0
  00d5c	e58d3044	 str         r3, [sp, #0x44]
  00d60		 |$LN16@OALIoCtlHa|

; 327  : 
; 328  :         //  Set get time flag            
; 329  :         TWLReadByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, &status);

  00d60	e28d2014	 add         r2, sp, #0x14
  00d64	e3a01803	 mov         r1, #3, 16
  00d68	e3811029	 orr         r1, r1, #0x29
  00d6c	e59f32c4	 ldr         r3, [pc, #0x2C4]
  00d70	e5930018	 ldr         r0, [r3, #0x18]
  00d74	eb000000	 bl          TWLReadByteReg

; 330  : 
; 331  :         status |= TWL_RTC_CTRL_RUN | TWL_RTC_CTRL_GET_TIME;

  00d78	e5dd3014	 ldrb        r3, [sp, #0x14]
  00d7c	e3833041	 orr         r3, r3, #0x41
  00d80	e20330ff	 and         r3, r3, #0xFF
  00d84	e5cd3014	 strb        r3, [sp, #0x14]

; 332  :         TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, status);

  00d88	e5dd2014	 ldrb        r2, [sp, #0x14]
  00d8c	e3a01803	 mov         r1, #3, 16
  00d90	e3811029	 orr         r1, r1, #0x29
  00d94	e59f329c	 ldr         r3, [pc, #0x29C]
  00d98	e5930018	 ldr         r0, [r3, #0x18]
  00d9c	eb000000	 bl          TWLWriteByteReg

; 333  : 
; 334  :         //  Get date and time from RTC
; 335  :         TWLReadByteReg(s_rtc.hTWL, TWL_YEARS_REG, &bcdTime[5]);

  00da0	e28d3008	 add         r3, sp, #8
  00da4	e2832005	 add         r2, r3, #5
  00da8	e3a01803	 mov         r1, #3, 16
  00dac	e3811021	 orr         r1, r1, #0x21
  00db0	e59f3280	 ldr         r3, [pc, #0x280]
  00db4	e5930018	 ldr         r0, [r3, #0x18]
  00db8	eb000000	 bl          TWLReadByteReg

; 336  :         TWLReadByteReg(s_rtc.hTWL, TWL_MONTHS_REG, &bcdTime[4]);

  00dbc	e28d3008	 add         r3, sp, #8
  00dc0	e2832004	 add         r2, r3, #4
  00dc4	e3a01803	 mov         r1, #3, 16
  00dc8	e3811020	 orr         r1, r1, #0x20
  00dcc	e59f3264	 ldr         r3, [pc, #0x264]
  00dd0	e5930018	 ldr         r0, [r3, #0x18]
  00dd4	eb000000	 bl          TWLReadByteReg

; 337  :         TWLReadByteReg(s_rtc.hTWL, TWL_DAYS_REG, &bcdTime[3]);

  00dd8	e28d3008	 add         r3, sp, #8
  00ddc	e2832003	 add         r2, r3, #3
  00de0	e3a01803	 mov         r1, #3, 16
  00de4	e381101f	 orr         r1, r1, #0x1F
  00de8	e59f3248	 ldr         r3, [pc, #0x248]
  00dec	e5930018	 ldr         r0, [r3, #0x18]
  00df0	eb000000	 bl          TWLReadByteReg

; 338  :         TWLReadByteReg(s_rtc.hTWL, TWL_HOURS_REG, &bcdTime[2]);

  00df4	e28d3008	 add         r3, sp, #8
  00df8	e2832002	 add         r2, r3, #2
  00dfc	e3a01803	 mov         r1, #3, 16
  00e00	e381101e	 orr         r1, r1, #0x1E
  00e04	e59f322c	 ldr         r3, [pc, #0x22C]
  00e08	e5930018	 ldr         r0, [r3, #0x18]
  00e0c	eb000000	 bl          TWLReadByteReg

; 339  :         TWLReadByteReg(s_rtc.hTWL, TWL_MINUTES_REG, &bcdTime[1]);

  00e10	e28d3008	 add         r3, sp, #8
  00e14	e2832001	 add         r2, r3, #1
  00e18	e3a01803	 mov         r1, #3, 16
  00e1c	e381101d	 orr         r1, r1, #0x1D
  00e20	e59f3210	 ldr         r3, [pc, #0x210]
  00e24	e5930018	 ldr         r0, [r3, #0x18]
  00e28	eb000000	 bl          TWLReadByteReg

; 340  :         TWLReadByteReg(s_rtc.hTWL, TWL_SECONDS_REG, &bcdTime[0]);

  00e2c	e28d2008	 add         r2, sp, #8
  00e30	e3a01803	 mov         r1, #3, 16
  00e34	e381101c	 orr         r1, r1, #0x1C
  00e38	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00e3c	e5930018	 ldr         r0, [r3, #0x18]
  00e40	eb000000	 bl          TWLReadByteReg

; 341  : 
; 342  :         //  Convert current RTC date/time to FILETIME
; 343  :         baseSystemTime.wYear    = BCD2BIN(bcdTime[5]) + RTC_BASE_YEAR_MIN;

  00e44	e5dd300d	 ldrb        r3, [sp, #0xD]
  00e48	e1a01243	 mov         r1, r3, asr #4
  00e4c	e3a0300a	 mov         r3, #0xA
  00e50	e0020391	 mul         r2, r1, r3
  00e54	e5dd300d	 ldrb        r3, [sp, #0xD]
  00e58	e203300f	 and         r3, r3, #0xF
  00e5c	e0823003	 add         r3, r2, r3
  00e60	e2833e7d	 add         r3, r3, #0x7D, 28
  00e64	e1a03803	 mov         r3, r3, lsl #16
  00e68	e1a03823	 mov         r3, r3, lsr #16
  00e6c	e1cd31b8	 strh        r3, [sp, #0x18]

; 344  :         baseSystemTime.wMonth   = BCD2BIN(bcdTime[4]);

  00e70	e5dd300c	 ldrb        r3, [sp, #0xC]
  00e74	e1a01243	 mov         r1, r3, asr #4
  00e78	e3a0300a	 mov         r3, #0xA
  00e7c	e0020391	 mul         r2, r1, r3
  00e80	e5dd300c	 ldrb        r3, [sp, #0xC]
  00e84	e203300f	 and         r3, r3, #0xF
  00e88	e0823003	 add         r3, r2, r3
  00e8c	e1a03803	 mov         r3, r3, lsl #16
  00e90	e1a03823	 mov         r3, r3, lsr #16
  00e94	e1cd31ba	 strh        r3, [sp, #0x1A]

; 345  :         baseSystemTime.wDay     = BCD2BIN(bcdTime[3]);

  00e98	e5dd300b	 ldrb        r3, [sp, #0xB]
  00e9c	e1a01243	 mov         r1, r3, asr #4
  00ea0	e3a0300a	 mov         r3, #0xA
  00ea4	e0020391	 mul         r2, r1, r3
  00ea8	e5dd300b	 ldrb        r3, [sp, #0xB]
  00eac	e203300f	 and         r3, r3, #0xF
  00eb0	e0823003	 add         r3, r2, r3
  00eb4	e1a03803	 mov         r3, r3, lsl #16
  00eb8	e1a03823	 mov         r3, r3, lsr #16
  00ebc	e1cd31be	 strh        r3, [sp, #0x1E]

; 346  :         baseSystemTime.wHour    = BCD2BIN(bcdTime[2]);

  00ec0	e5dd300a	 ldrb        r3, [sp, #0xA]
  00ec4	e1a01243	 mov         r1, r3, asr #4
  00ec8	e3a0300a	 mov         r3, #0xA
  00ecc	e0020391	 mul         r2, r1, r3
  00ed0	e5dd300a	 ldrb        r3, [sp, #0xA]
  00ed4	e203300f	 and         r3, r3, #0xF
  00ed8	e0823003	 add         r3, r2, r3
  00edc	e1a03803	 mov         r3, r3, lsl #16
  00ee0	e1a03823	 mov         r3, r3, lsr #16
  00ee4	e1cd32b0	 strh        r3, [sp, #0x20]

; 347  :         baseSystemTime.wMinute  = BCD2BIN(bcdTime[1]);

  00ee8	e5dd3009	 ldrb        r3, [sp, #9]
  00eec	e1a01243	 mov         r1, r3, asr #4
  00ef0	e3a0300a	 mov         r3, #0xA
  00ef4	e0020391	 mul         r2, r1, r3
  00ef8	e5dd3009	 ldrb        r3, [sp, #9]
  00efc	e203300f	 and         r3, r3, #0xF
  00f00	e0823003	 add         r3, r2, r3
  00f04	e1a03803	 mov         r3, r3, lsl #16
  00f08	e1a03823	 mov         r3, r3, lsr #16
  00f0c	e1cd32b2	 strh        r3, [sp, #0x22]

; 348  :         baseSystemTime.wSecond  = BCD2BIN(bcdTime[0]);

  00f10	e5dd3008	 ldrb        r3, [sp, #8]
  00f14	e1a01243	 mov         r1, r3, asr #4
  00f18	e3a0300a	 mov         r3, #0xA
  00f1c	e0020391	 mul         r2, r1, r3
  00f20	e5dd3008	 ldrb        r3, [sp, #8]
  00f24	e203300f	 and         r3, r3, #0xF
  00f28	e0823003	 add         r3, r2, r3
  00f2c	e1a03803	 mov         r3, r3, lsl #16
  00f30	e1a03823	 mov         r3, r3, lsr #16
  00f34	e1cd32b4	 strh        r3, [sp, #0x24]

; 349  :         baseSystemTime.wMilliseconds = 0;

  00f38	e3a03000	 mov         r3, #0
  00f3c	e1cd32b6	 strh        r3, [sp, #0x26]

; 350  : 
; 351  :         NKSystemTimeToFileTime(&baseSystemTime, (FILETIME*)&s_rtc.baseFiletime);

  00f40	e59f30f0	 ldr         r3, [pc, #0xF0]
  00f44	e2831020	 add         r1, r3, #0x20
  00f48	e28d0018	 add         r0, sp, #0x18
  00f4c	eb000000	 bl          NKSystemTimeToFileTime

; 352  : 
; 353  :         //  Read the offset from the backup regs
; 354  :         ReadBaseOffset( &s_rtc.baseOffset ); 

  00f50	e59f30e0	 ldr         r3, [pc, #0xE0]
  00f54	e2830028	 add         r0, r3, #0x28
  00f58	eb000000	 bl          ReadBaseOffset
  00f5c		 |$LN1@OALIoCtlHa|

; 355  :         }        
; 356  : 
; 357  : 
; 358  :     OALMSG(OAL_TIMER && OAL_FUNC, (L" OALIoCtlHalInitRTC():  RTC = %s\r\n", HWTimeToString(bcdTime)));

  00f5c	e59f30d0	 ldr         r3, [pc, #0xD0]
  00f60	e5933440	 ldr         r3, [r3, #0x440]
  00f64	e3130b02	 tst         r3, #2, 22
  00f68	0a00000c	 beq         |$LN17@OALIoCtlHa|
  00f6c	e59f30c0	 ldr         r3, [pc, #0xC0]
  00f70	e5933440	 ldr         r3, [r3, #0x440]
  00f74	e3130004	 tst         r3, #4
  00f78	0a000008	 beq         |$LN17@OALIoCtlHa|
  00f7c	e28d0008	 add         r0, sp, #8
  00f80	eb000000	 bl          HWTimeToString
  00f84	e58d0048	 str         r0, [sp, #0x48]
  00f88	e59d1048	 ldr         r1, [sp, #0x48]
  00f8c	e59f00a8	 ldr         r0, [pc, #0xA8]
  00f90	eb000000	 bl          NKDbgPrintfW
  00f94	e3a03001	 mov         r3, #1
  00f98	e58d304c	 str         r3, [sp, #0x4C]
  00f9c	ea000001	 b           |$LN18@OALIoCtlHa|
  00fa0		 |$LN17@OALIoCtlHa|
  00fa0	e3a03000	 mov         r3, #0
  00fa4	e58d304c	 str         r3, [sp, #0x4C]
  00fa8		 |$LN18@OALIoCtlHa|

; 359  : 
; 360  : 
; 361  :     // Now update RTC state values
; 362  :     s_rtc.initialized   = TRUE;

  00fa8	e59f2088	 ldr         r2, [pc, #0x88]
  00fac	e3a03001	 mov         r3, #1
  00fb0	e5823000	 str         r3, [r2]

; 363  :     s_rtc.baseTickCount = OEMGetTickCount();

  00fb4	eb000000	 bl          OEMGetTickCount
  00fb8	e58d0050	 str         r0, [sp, #0x50]
  00fbc	e59d2050	 ldr         r2, [sp, #0x50]
  00fc0	e59f3070	 ldr         r3, [pc, #0x70]
  00fc4	e5832030	 str         r2, [r3, #0x30]

; 364  : 
; 365  : 
; 366  :     //  Success
; 367  :     rc = TRUE;

  00fc8	e3a03001	 mov         r3, #1
  00fcc	e58d3000	 str         r3, [sp]
  00fd0		 |$cleanUp$45162|

; 368  : 
; 369  : 
; 370  : cleanUp:
; 371  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OALIoCtlHalInitRTC() rc = %d\r\n", rc));

  00fd0	e59f305c	 ldr         r3, [pc, #0x5C]
  00fd4	e5933440	 ldr         r3, [r3, #0x440]
  00fd8	e3130b02	 tst         r3, #2, 22
  00fdc	0a000009	 beq         |$LN19@OALIoCtlHa|
  00fe0	e59f304c	 ldr         r3, [pc, #0x4C]
  00fe4	e5933440	 ldr         r3, [r3, #0x440]
  00fe8	e3130004	 tst         r3, #4
  00fec	0a000005	 beq         |$LN19@OALIoCtlHa|
  00ff0	e59d1000	 ldr         r1, [sp]
  00ff4	e59f0034	 ldr         r0, [pc, #0x34]
  00ff8	eb000000	 bl          NKDbgPrintfW
  00ffc	e3a03001	 mov         r3, #1
  01000	e58d3054	 str         r3, [sp, #0x54]
  01004	ea000001	 b           |$LN20@OALIoCtlHa|
  01008		 |$LN19@OALIoCtlHa|
  01008	e3a03000	 mov         r3, #0
  0100c	e58d3054	 str         r3, [sp, #0x54]
  01010		 |$LN20@OALIoCtlHa|

; 372  :     return rc;

  01010	e59d0028	 ldr         r0, [sp, #0x28]
  01014	eb000000	 bl          __security_check_cookie
  01018	e59d3000	 ldr         r3, [sp]
  0101c	e58d302c	 str         r3, [sp, #0x2C]

; 373  : }

  01020	e59d002c	 ldr         r0, [sp, #0x2C]
  01024	e28dd058	 add         sp, sp, #0x58
  01028	e89d6010	 ldmia       sp, {r4, sp, lr}
  0102c	e12fff1e	 bx          lr
  01030		 |$LN24@OALIoCtlHa|
  01030		 |$LN25@OALIoCtlHa|
  01030	00000000	 DCD         |??_C@_1EA@NFLJEDAN@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01034		 |$LN26@OALIoCtlHa|
  01034	00000000	 DCD         |dpCurSettings|
  01038		 |$LN27@OALIoCtlHa|
  01038	00000000	 DCD         |s_rtc|
  0103c		 |$LN28@OALIoCtlHa|
  0103c	00000000	 DCD         |??_C@_1EG@DMPAACGN@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs@|
  01040		 |$LN29@OALIoCtlHa|
  01040	00000000	 DCD         |??_C@_1EM@GDGDGGII@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAG?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@|
  01044		 |$LN30@OALIoCtlHa|
  01044	00000000	 DCD         |??_C@_1FA@KEKFOIGH@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn@|
  01048		 |$LN31@OALIoCtlHa|
  01048	00000000	 DCD         |??_C@_1GK@LBOBPPKI@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AA?5?$AAR?$AAT?$AAC?$AA?5?$AAT?$AAW?$AAL?$AA_@|
  0104c		 |$LN32@OALIoCtlHa|
  0104c	00000000	 DCD         |??_C@_1FO@CGLDPGNO@?$AA?5?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo@|
  01050		 |$LN33@OALIoCtlHa|
  01050	00000000	 DCD         |dwOEMHighSecurity|
  01054		 |$LN34@OALIoCtlHa|
  01054	00000000	 DCD         |??_C@_1DA@GMIOKMIL@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAI?$AAn?$AAi?$AAt?$AAR?$AAT?$AAC?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01058		 |$LN35@OALIoCtlHa|
  01058	00000000	 DCD         |__security_cookie|
  0105c		 |$M45398|

			 ENDP  ; |OALIoCtlHalInitRTC|

	EXPORT	|??_C@_1DC@DJKOOINA@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalRtcTime|
	EXPORT	|??_C@_1CI@OLGNILCF@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMGetRealTime|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|NKFileTimeToSystemTime|
	IMPORT	|g_ResumeRTC|
	IMPORT	|EnterCriticalSection|

  00038			 AREA	 |.pdata|, PDATA
|$T45424| DCD	|$LN12@OEMGetReal|
	DCD	0x40008d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@DJKOOINA@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OLGNILCF@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "G", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0105c			 AREA	 |.text|, CODE, ARM

  0105c		 |OEMGetRealTime| PROC

; 387  : {

  0105c		 |$LN12@OEMGetReal|
  0105c	e1a0c00d	 mov         r12, sp
  01060	e92d0001	 stmdb       sp!, {r0}
  01064	e92d5000	 stmdb       sp!, {r12, lr}
  01068	e24dd034	 sub         sp, sp, #0x34
  0106c		 |$M45421|

; 388  :     DWORD       delta;
; 389  :     ULONGLONG   time;
; 390  : 
; 391  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OEMGetRealTime()\r\n"));

  0106c	e59f320c	 ldr         r3, [pc, #0x20C]
  01070	e5933440	 ldr         r3, [r3, #0x440]
  01074	e3130b02	 tst         r3, #2, 22
  01078	0a000008	 beq         |$LN6@OEMGetReal|
  0107c	e59f31fc	 ldr         r3, [pc, #0x1FC]
  01080	e5933440	 ldr         r3, [r3, #0x440]
  01084	e3130004	 tst         r3, #4
  01088	0a000004	 beq         |$LN6@OEMGetReal|
  0108c	e59f01f8	 ldr         r0, [pc, #0x1F8]
  01090	eb000000	 bl          NKDbgPrintfW
  01094	e3a03001	 mov         r3, #1
  01098	e58d3020	 str         r3, [sp, #0x20]
  0109c	ea000001	 b           |$LN7@OEMGetReal|
  010a0		 |$LN6@OEMGetReal|
  010a0	e3a03000	 mov         r3, #0
  010a4	e58d3020	 str         r3, [sp, #0x20]
  010a8		 |$LN7@OEMGetReal|

; 392  : 
; 393  :     if (!s_rtc.initialized)

  010a8	e59f31d4	 ldr         r3, [pc, #0x1D4]
  010ac	e5933000	 ldr         r3, [r3]
  010b0	e3530000	 cmp         r3, #0
  010b4	1a00001f	 bne         |$LN3@OEMGetReal|

; 394  :         {
; 395  :         // Return default time if RTC isn't initialized
; 396  :         pSystemTime->wYear   = RTC_BASE_YEAR_MIN;

  010b8	e59d203c	 ldr         r2, [sp, #0x3C]
  010bc	e3a03e7d	 mov         r3, #0x7D, 28
  010c0	e1c230b0	 strh        r3, [r2]

; 397  :         pSystemTime->wMonth  = 1;

  010c4	e59d303c	 ldr         r3, [sp, #0x3C]
  010c8	e2832002	 add         r2, r3, #2
  010cc	e3a03001	 mov         r3, #1
  010d0	e1c230b0	 strh        r3, [r2]

; 398  :         pSystemTime->wDay    = 1;

  010d4	e59d303c	 ldr         r3, [sp, #0x3C]
  010d8	e2832006	 add         r2, r3, #6
  010dc	e3a03001	 mov         r3, #1
  010e0	e1c230b0	 strh        r3, [r2]

; 399  :         pSystemTime->wHour   = 0;

  010e4	e59d303c	 ldr         r3, [sp, #0x3C]
  010e8	e2832008	 add         r2, r3, #8
  010ec	e3a03000	 mov         r3, #0
  010f0	e1c230b0	 strh        r3, [r2]

; 400  :         pSystemTime->wMinute = 0;

  010f4	e59d303c	 ldr         r3, [sp, #0x3C]
  010f8	e283200a	 add         r2, r3, #0xA
  010fc	e3a03000	 mov         r3, #0
  01100	e1c230b0	 strh        r3, [r2]

; 401  :         pSystemTime->wSecond = 0;

  01104	e59d303c	 ldr         r3, [sp, #0x3C]
  01108	e283200c	 add         r2, r3, #0xC
  0110c	e3a03000	 mov         r3, #0
  01110	e1c230b0	 strh        r3, [r2]

; 402  :         pSystemTime->wDayOfWeek    = 0;

  01114	e59d303c	 ldr         r3, [sp, #0x3C]
  01118	e2832004	 add         r2, r3, #4
  0111c	e3a03000	 mov         r3, #0
  01120	e1c230b0	 strh        r3, [r2]

; 403  :         pSystemTime->wMilliseconds = 0;

  01124	e59d303c	 ldr         r3, [sp, #0x3C]
  01128	e283200e	 add         r2, r3, #0xE
  0112c	e3a03000	 mov         r3, #0
  01130	e1c230b0	 strh        r3, [r2]

; 404  :         }
; 405  :     else

  01134	ea000037	 b           |$LN2@OEMGetReal|
  01138		 |$LN3@OEMGetReal|

; 406  :         {
; 407  :         EnterCriticalSection(&s_rtc.cs);

  01138	e59f3144	 ldr         r3, [pc, #0x144]
  0113c	e2830004	 add         r0, r3, #4
  01140	eb000000	 bl          EnterCriticalSection

; 408  :         if (g_ResumeRTC)

  01144	e59f313c	 ldr         r3, [pc, #0x13C]
  01148	e5933000	 ldr         r3, [r3]
  0114c	e3530000	 cmp         r3, #0
  01150	0a00000b	 beq         |$LN1@OEMGetReal|

; 409  :     		{
; 410  :             // suspend/resume occured, sync RTC
; 411  :             OALIoCtlHalRtcTime(0, NULL, 0, NULL, 0, NULL);

  01154	e3a03000	 mov         r3, #0
  01158	e58d3004	 str         r3, [sp, #4]
  0115c	e3a03000	 mov         r3, #0
  01160	e58d3000	 str         r3, [sp]
  01164	e3a03000	 mov         r3, #0
  01168	e3a02000	 mov         r2, #0
  0116c	e3a01000	 mov         r1, #0
  01170	e3a00000	 mov         r0, #0
  01174	eb000000	 bl          OALIoCtlHalRtcTime

; 412  :             g_ResumeRTC = FALSE;

  01178	e59f2108	 ldr         r2, [pc, #0x108]
  0117c	e3a03000	 mov         r3, #0
  01180	e5823000	 str         r3, [r2]
  01184		 |$LN1@OEMGetReal|

; 413  : 	    	}
; 414  :         delta = OEMGetTickCount() - s_rtc.baseTickCount;

  01184	eb000000	 bl          OEMGetTickCount
  01188	e58d0024	 str         r0, [sp, #0x24]
  0118c	e59d2024	 ldr         r2, [sp, #0x24]
  01190	e59f30ec	 ldr         r3, [pc, #0xEC]
  01194	e5933030	 ldr         r3, [r3, #0x30]
  01198	e0423003	 sub         r3, r2, r3
  0119c	e58d3010	 str         r3, [sp, #0x10]

; 415  :         time = s_rtc.baseFiletime + s_rtc.baseOffset + ((ULONGLONG)delta) * 10000;

  011a0	e59f30dc	 ldr         r3, [pc, #0xDC]
  011a4	e5930020	 ldr         r0, [r3, #0x20]
  011a8	e59f30d4	 ldr         r3, [pc, #0xD4]
  011ac	e5931024	 ldr         r1, [r3, #0x24]
  011b0	e59f30cc	 ldr         r3, [pc, #0xCC]
  011b4	e5932028	 ldr         r2, [r3, #0x28]
  011b8	e59f30c4	 ldr         r3, [pc, #0xC4]
  011bc	e593302c	 ldr         r3, [r3, #0x2C]
  011c0	e090e002	 adds        lr, r0, r2
  011c4	e0a10003	 adc         r0, r1, r3
  011c8	e59d3010	 ldr         r3, [sp, #0x10]
  011cc	e58d3028	 str         r3, [sp, #0x28]
  011d0	e59d1028	 ldr         r1, [sp, #0x28]
  011d4	e3a03c27	 mov         r3, #0x27, 24
  011d8	e3833010	 orr         r3, r3, #0x10
  011dc	e0832391	 umull       r2, r3, r1, r3
  011e0	e09e2002	 adds        r2, lr, r2
  011e4	e0a03003	 adc         r3, r0, r3
  011e8	e58d2008	 str         r2, [sp, #8]
  011ec	e58d300c	 str         r3, [sp, #0xC]

; 416  :         NKFileTimeToSystemTime((FILETIME*)&time, pSystemTime);

  011f0	e59d103c	 ldr         r1, [sp, #0x3C]
  011f4	e28d0008	 add         r0, sp, #8
  011f8	eb000000	 bl          NKFileTimeToSystemTime

; 417  :         pSystemTime->wMilliseconds = 0;

  011fc	e59d303c	 ldr         r3, [sp, #0x3C]
  01200	e283200e	 add         r2, r3, #0xE
  01204	e3a03000	 mov         r3, #0
  01208	e1c230b0	 strh        r3, [r2]

; 418  :         LeaveCriticalSection(&s_rtc.cs);

  0120c	e59f3070	 ldr         r3, [pc, #0x70]
  01210	e2830004	 add         r0, r3, #4
  01214	eb000000	 bl          LeaveCriticalSection
  01218		 |$LN2@OEMGetReal|

; 419  :         }
; 420  : 
; 421  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OEMGetRealTime() = %s\r\n", SystemTimeToString(pSystemTime)));

  01218	e59f3060	 ldr         r3, [pc, #0x60]
  0121c	e5933440	 ldr         r3, [r3, #0x440]
  01220	e3130b02	 tst         r3, #2, 22
  01224	0a00000c	 beq         |$LN8@OEMGetReal|
  01228	e59f3050	 ldr         r3, [pc, #0x50]
  0122c	e5933440	 ldr         r3, [r3, #0x440]
  01230	e3130004	 tst         r3, #4
  01234	0a000008	 beq         |$LN8@OEMGetReal|
  01238	e59d003c	 ldr         r0, [sp, #0x3C]
  0123c	eb000000	 bl          SystemTimeToString
  01240	e58d002c	 str         r0, [sp, #0x2C]
  01244	e59d102c	 ldr         r1, [sp, #0x2C]
  01248	e59f002c	 ldr         r0, [pc, #0x2C]
  0124c	eb000000	 bl          NKDbgPrintfW
  01250	e3a03001	 mov         r3, #1
  01254	e58d3030	 str         r3, [sp, #0x30]
  01258	ea000001	 b           |$LN9@OEMGetReal|
  0125c		 |$LN8@OEMGetReal|
  0125c	e3a03000	 mov         r3, #0
  01260	e58d3030	 str         r3, [sp, #0x30]
  01264		 |$LN9@OEMGetReal|

; 422  : 
; 423  :     return TRUE;

  01264	e3a03001	 mov         r3, #1
  01268	e58d301c	 str         r3, [sp, #0x1C]

; 424  : }

  0126c	e59d001c	 ldr         r0, [sp, #0x1C]
  01270	e28dd034	 add         sp, sp, #0x34
  01274	e89d6000	 ldmia       sp, {sp, lr}
  01278	e12fff1e	 bx          lr
  0127c		 |$LN13@OEMGetReal|
  0127c		 |$LN14@OEMGetReal|
  0127c	00000000	 DCD         |??_C@_1DC@DJKOOINA@?$AA?9?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01280		 |$LN15@OEMGetReal|
  01280	00000000	 DCD         |dpCurSettings|
  01284		 |$LN16@OEMGetReal|
  01284	00000000	 DCD         |s_rtc|
  01288		 |$LN17@OEMGetReal|
  01288	00000000	 DCD         |g_ResumeRTC|
  0128c		 |$LN18@OEMGetReal|
  0128c	00000000	 DCD         |??_C@_1CI@OLGNILCF@?$AA?$CL?$AAO?$AAE?$AAM?$AAG?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01290		 |$M45422|

			 ENDP  ; |OEMGetRealTime|

	EXPORT	|??_C@_1CE@NIIADMMF@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@NEGNBBJ@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMSetRealTime|

  00040			 AREA	 |.pdata|, PDATA
|$T45442| DCD	|$LN12@OEMSetReal|
	DCD	0x40008504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NIIADMMF@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@NEGNBBJ@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "l", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01290			 AREA	 |.text|, CODE, ARM

  01290		 |OEMSetRealTime| PROC

; 438  : {

  01290		 |$LN12@OEMSetReal|
  01290	e1a0c00d	 mov         r12, sp
  01294	e92d0001	 stmdb       sp!, {r0}
  01298	e92d5000	 stmdb       sp!, {r12, lr}
  0129c	e24dd040	 sub         sp, sp, #0x40
  012a0		 |$M45439|

; 439  :     BOOL        rc = FALSE;

  012a0	e3a03000	 mov         r3, #0
  012a4	e58d3010	 str         r3, [sp, #0x10]

; 440  :     ULONGLONG   fileTime;
; 441  :     DWORD       tickDelta;
; 442  : 
; 443  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OEMSetRealTime(%s)\r\n", SystemTimeToString(pSystemTime)));

  012a8	e59f31e4	 ldr         r3, [pc, #0x1E4]
  012ac	e5933440	 ldr         r3, [r3, #0x440]
  012b0	e3130b02	 tst         r3, #2, 22
  012b4	0a00000c	 beq         |$LN6@OEMSetReal|
  012b8	e59f31d4	 ldr         r3, [pc, #0x1D4]
  012bc	e5933440	 ldr         r3, [r3, #0x440]
  012c0	e3130004	 tst         r3, #4
  012c4	0a000008	 beq         |$LN6@OEMSetReal|
  012c8	e59d0048	 ldr         r0, [sp, #0x48]
  012cc	eb000000	 bl          SystemTimeToString
  012d0	e58d0024	 str         r0, [sp, #0x24]
  012d4	e59d1024	 ldr         r1, [sp, #0x24]
  012d8	e59f01c0	 ldr         r0, [pc, #0x1C0]
  012dc	eb000000	 bl          NKDbgPrintfW
  012e0	e3a03001	 mov         r3, #1
  012e4	e58d3028	 str         r3, [sp, #0x28]
  012e8	ea000001	 b           |$LN7@OEMSetReal|
  012ec		 |$LN6@OEMSetReal|
  012ec	e3a03000	 mov         r3, #0
  012f0	e58d3028	 str         r3, [sp, #0x28]
  012f4		 |$LN7@OEMSetReal|

; 444  : 
; 445  :     if (s_rtc.initialized)

  012f4	e59f319c	 ldr         r3, [pc, #0x19C]
  012f8	e5933000	 ldr         r3, [r3]
  012fc	e3530000	 cmp         r3, #0
  01300	0a00004d	 beq         |$LN3@OEMSetReal|

; 446  :         {
; 447  :         // Save time to global structure
; 448  :         EnterCriticalSection(&s_rtc.cs);

  01304	e59f318c	 ldr         r3, [pc, #0x18C]
  01308	e2830004	 add         r0, r3, #4
  0130c	eb000000	 bl          EnterCriticalSection

; 449  : 
; 450  :         if (g_ResumeRTC)

  01310	e59f3184	 ldr         r3, [pc, #0x184]
  01314	e5933000	 ldr         r3, [r3]
  01318	e3530000	 cmp         r3, #0
  0131c	0a00000b	 beq         |$LN2@OEMSetReal|

; 451  :     		{
; 452  :             OALIoCtlHalRtcTime(0, NULL, 0, NULL, 0, NULL);

  01320	e3a03000	 mov         r3, #0
  01324	e58d3004	 str         r3, [sp, #4]
  01328	e3a03000	 mov         r3, #0
  0132c	e58d3000	 str         r3, [sp]
  01330	e3a03000	 mov         r3, #0
  01334	e3a02000	 mov         r2, #0
  01338	e3a01000	 mov         r1, #0
  0133c	e3a00000	 mov         r0, #0
  01340	eb000000	 bl          OALIoCtlHalRtcTime

; 453  :             g_ResumeRTC = FALSE;

  01344	e59f2150	 ldr         r2, [pc, #0x150]
  01348	e3a03000	 mov         r3, #0
  0134c	e5823000	 str         r3, [r2]
  01350		 |$LN2@OEMSetReal|

; 454  : 	    	}
; 455  : 		
; 456  :         // Round to seconds
; 457  :         pSystemTime->wMilliseconds = 0;

  01350	e59d3048	 ldr         r3, [sp, #0x48]
  01354	e283200e	 add         r2, r3, #0xE
  01358	e3a03000	 mov         r3, #0
  0135c	e1c230b0	 strh        r3, [r2]

; 458  : 
; 459  :         // Convert to filetime
; 460  :         if (NKSystemTimeToFileTime(pSystemTime, (FILETIME*)&fileTime))

  01360	e28d1008	 add         r1, sp, #8
  01364	e59d0048	 ldr         r0, [sp, #0x48]
  01368	eb000000	 bl          NKSystemTimeToFileTime
  0136c	e58d002c	 str         r0, [sp, #0x2C]
  01370	e59d302c	 ldr         r3, [sp, #0x2C]
  01374	e3530000	 cmp         r3, #0
  01378	0a00002c	 beq         |$LN1@OEMSetReal|

; 461  :             {
; 462  :             // Compute the tick delta (indicates the time in the RTC)
; 463  :             tickDelta = OEMGetTickCount() - s_rtc.baseTickCount;

  0137c	eb000000	 bl          OEMGetTickCount
  01380	e58d0030	 str         r0, [sp, #0x30]
  01384	e59d2030	 ldr         r2, [sp, #0x30]
  01388	e59f3108	 ldr         r3, [pc, #0x108]
  0138c	e5933030	 ldr         r3, [r3, #0x30]
  01390	e0423003	 sub         r3, r2, r3
  01394	e58d3014	 str         r3, [sp, #0x14]

; 464  :             
; 465  :             // Update all the parameters
; 466  :             s_rtc.baseFiletime  = s_rtc.baseFiletime + ((ULONGLONG)tickDelta)*10000;

  01398	e59d3014	 ldr         r3, [sp, #0x14]
  0139c	e58d3034	 str         r3, [sp, #0x34]
  013a0	e59d2034	 ldr         r2, [sp, #0x34]
  013a4	e3a03c27	 mov         r3, #0x27, 24
  013a8	e3833010	 orr         r3, r3, #0x10
  013ac	e0801392	 umull       r1, r0, r2, r3
  013b0	e59f30e0	 ldr         r3, [pc, #0xE0]
  013b4	e5932020	 ldr         r2, [r3, #0x20]
  013b8	e59f30d8	 ldr         r3, [pc, #0xD8]
  013bc	e5933024	 ldr         r3, [r3, #0x24]
  013c0	e0921001	 adds        r1, r2, r1
  013c4	e0a32000	 adc         r2, r3, r0
  013c8	e59f30c8	 ldr         r3, [pc, #0xC8]
  013cc	e5831020	 str         r1, [r3, #0x20]
  013d0	e59f30c0	 ldr         r3, [pc, #0xC0]
  013d4	e5832024	 str         r2, [r3, #0x24]

; 467  :             s_rtc.baseOffset    = fileTime - s_rtc.baseFiletime;

  013d8	e59d1008	 ldr         r1, [sp, #8]
  013dc	e59d000c	 ldr         r0, [sp, #0xC]
  013e0	e59f30b0	 ldr         r3, [pc, #0xB0]
  013e4	e5932020	 ldr         r2, [r3, #0x20]
  013e8	e59f30a8	 ldr         r3, [pc, #0xA8]
  013ec	e5933024	 ldr         r3, [r3, #0x24]
  013f0	e0511002	 subs        r1, r1, r2
  013f4	e0c02003	 sbc         r2, r0, r3
  013f8	e59f3098	 ldr         r3, [pc, #0x98]
  013fc	e5831028	 str         r1, [r3, #0x28]
  01400	e59f3090	 ldr         r3, [pc, #0x90]
  01404	e583202c	 str         r2, [r3, #0x2C]

; 468  :             s_rtc.baseTickCount = OEMGetTickCount();

  01408	eb000000	 bl          OEMGetTickCount
  0140c	e58d0038	 str         r0, [sp, #0x38]
  01410	e59d2038	 ldr         r2, [sp, #0x38]
  01414	e59f307c	 ldr         r3, [pc, #0x7C]
  01418	e5832030	 str         r2, [r3, #0x30]

; 469  : 
; 470  :             //  Save off base offset to the backup regs
; 471  :             WriteBaseOffset( &s_rtc.baseOffset ); 

  0141c	e59f3074	 ldr         r3, [pc, #0x74]
  01420	e2830028	 add         r0, r3, #0x28
  01424	eb000000	 bl          WriteBaseOffset

; 472  : 
; 473  :             // Done
; 474  :             rc = TRUE;

  01428	e3a03001	 mov         r3, #1
  0142c	e58d3010	 str         r3, [sp, #0x10]
  01430		 |$LN1@OEMSetReal|

; 475  :             }
; 476  : 
; 477  :         LeaveCriticalSection(&s_rtc.cs);

  01430	e59f3060	 ldr         r3, [pc, #0x60]
  01434	e2830004	 add         r0, r3, #4
  01438	eb000000	 bl          LeaveCriticalSection
  0143c		 |$LN3@OEMSetReal|

; 478  :         }
; 479  :     
; 480  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"-OEMSetRealTime\r\n"));

  0143c	e59f3050	 ldr         r3, [pc, #0x50]
  01440	e5933440	 ldr         r3, [r3, #0x440]
  01444	e3130b02	 tst         r3, #2, 22
  01448	0a000008	 beq         |$LN8@OEMSetReal|
  0144c	e59f3040	 ldr         r3, [pc, #0x40]
  01450	e5933440	 ldr         r3, [r3, #0x440]
  01454	e3130004	 tst         r3, #4
  01458	0a000004	 beq         |$LN8@OEMSetReal|
  0145c	e59f002c	 ldr         r0, [pc, #0x2C]
  01460	eb000000	 bl          NKDbgPrintfW
  01464	e3a03001	 mov         r3, #1
  01468	e58d303c	 str         r3, [sp, #0x3C]
  0146c	ea000001	 b           |$LN9@OEMSetReal|
  01470		 |$LN8@OEMSetReal|
  01470	e3a03000	 mov         r3, #0
  01474	e58d303c	 str         r3, [sp, #0x3C]
  01478		 |$LN9@OEMSetReal|

; 481  : 
; 482  :     return rc;

  01478	e59d3010	 ldr         r3, [sp, #0x10]
  0147c	e58d3020	 str         r3, [sp, #0x20]

; 483  : }

  01480	e59d0020	 ldr         r0, [sp, #0x20]
  01484	e28dd040	 add         sp, sp, #0x40
  01488	e89d6000	 ldmia       sp, {sp, lr}
  0148c	e12fff1e	 bx          lr
  01490		 |$LN13@OEMSetReal|
  01490		 |$LN14@OEMSetReal|
  01490	00000000	 DCD         |??_C@_1CE@NIIADMMF@?$AA?9?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  01494		 |$LN15@OEMSetReal|
  01494	00000000	 DCD         |dpCurSettings|
  01498		 |$LN16@OEMSetReal|
  01498	00000000	 DCD         |s_rtc|
  0149c		 |$LN17@OEMSetReal|
  0149c	00000000	 DCD         |g_ResumeRTC|
  014a0		 |$LN18@OEMSetReal|
  014a0	00000000	 DCD         |??_C@_1CM@NEGNBBJ@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAR?$AAe?$AAa?$AAl?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  014a4		 |$M45440|

			 ENDP  ; |OEMSetRealTime|

	EXPORT	|FiletimeToHWTime|
	EXPORT	|??_C@_1CO@MAJAHDBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|OEMSetAlarmTime|

  00048			 AREA	 |.pdata|, PDATA
|$T45460| DCD	|$LN10@OEMSetAlar|
	DCD	0xc0009904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@MAJAHDBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "m", 0x0, "T"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%", 0x0, "s"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00004			 AREA	 |.xdata|, DATA
|$T45456| DCD	0xffffffd8
; Function compile flags: /Odtp

  014a4			 AREA	 |.text|, CODE, ARM

  014a4	00000000	 DCD         |__GSHandlerCheck|
  014a8	00000000	 DCD         |$T45456|

  014ac		 |OEMSetAlarmTime| PROC

; 495  : {

  014ac		 |$LN10@OEMSetAlar|
  014ac	e1a0c00d	 mov         r12, sp
  014b0	e92d0001	 stmdb       sp!, {r0}
  014b4	e92d5000	 stmdb       sp!, {r12, lr}
  014b8	e24dd030	 sub         sp, sp, #0x30
  014bc		 |$M45457|
  014bc	e59f3248	 ldr         r3, [pc, #0x248]
  014c0	e5933000	 ldr         r3, [r3]
  014c4	e58d3014	 str         r3, [sp, #0x14]

; 496  :     BOOL rc = FALSE;

  014c8	e3a03000	 mov         r3, #0
  014cc	e58d3008	 str         r3, [sp, #8]

; 497  : 
; 498  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OEMSetAlarmTime(%s)\r\n", SystemTimeToString(pSystemTime)));

  014d0	e59f3230	 ldr         r3, [pc, #0x230]
  014d4	e5933440	 ldr         r3, [r3, #0x440]
  014d8	e3130b02	 tst         r3, #2, 22
  014dc	0a00000c	 beq         |$LN6@OEMSetAlar|
  014e0	e59f3220	 ldr         r3, [pc, #0x220]
  014e4	e5933440	 ldr         r3, [r3, #0x440]
  014e8	e3130004	 tst         r3, #4
  014ec	0a000008	 beq         |$LN6@OEMSetAlar|
  014f0	e59d0038	 ldr         r0, [sp, #0x38]
  014f4	eb000000	 bl          SystemTimeToString
  014f8	e58d0024	 str         r0, [sp, #0x24]
  014fc	e59d1024	 ldr         r1, [sp, #0x24]
  01500	e59f01fc	 ldr         r0, [pc, #0x1FC]
  01504	eb000000	 bl          NKDbgPrintfW
  01508	e3a03001	 mov         r3, #1
  0150c	e58d3028	 str         r3, [sp, #0x28]
  01510	ea000001	 b           |$LN7@OEMSetAlar|
  01514		 |$LN6@OEMSetAlar|
  01514	e3a03000	 mov         r3, #0
  01518	e58d3028	 str         r3, [sp, #0x28]
  0151c		 |$LN7@OEMSetAlar|

; 499  : 
; 500  :     if (s_rtc.initialized)

  0151c	e59f31d8	 ldr         r3, [pc, #0x1D8]
  01520	e5933000	 ldr         r3, [r3]
  01524	e3530000	 cmp         r3, #0
  01528	0a00006b	 beq         |$LN3@OEMSetAlar|

; 501  :         {
; 502  :         // Save time to global structure
; 503  :         EnterCriticalSection(&s_rtc.cs);

  0152c	e59f31c8	 ldr         r3, [pc, #0x1C8]
  01530	e2830004	 add         r0, r3, #4
  01534	eb000000	 bl          EnterCriticalSection

; 504  : 
; 505  :         if (g_ResumeRTC)

  01538	e59f31c0	 ldr         r3, [pc, #0x1C0]
  0153c	e5933000	 ldr         r3, [r3]
  01540	e3530000	 cmp         r3, #0
  01544	0a00000b	 beq         |$LN2@OEMSetAlar|

; 506  :     		{
; 507  :             OALIoCtlHalRtcTime(0, NULL, 0, NULL, 0, NULL);

  01548	e3a03000	 mov         r3, #0
  0154c	e58d3004	 str         r3, [sp, #4]
  01550	e3a03000	 mov         r3, #0
  01554	e58d3000	 str         r3, [sp]
  01558	e3a03000	 mov         r3, #0
  0155c	e3a02000	 mov         r2, #0
  01560	e3a01000	 mov         r1, #0
  01564	e3a00000	 mov         r0, #0
  01568	eb000000	 bl          OALIoCtlHalRtcTime

; 508  :             g_ResumeRTC = FALSE;

  0156c	e59f218c	 ldr         r2, [pc, #0x18C]
  01570	e3a03000	 mov         r3, #0
  01574	e5823000	 str         r3, [r2]
  01578		 |$LN2@OEMSetAlar|

; 509  : 	    	}
; 510  : 
; 511  :         // Round to seconds
; 512  :         pSystemTime->wMilliseconds = 0;

  01578	e59d3038	 ldr         r3, [sp, #0x38]
  0157c	e283200e	 add         r2, r3, #0xE
  01580	e3a03000	 mov         r3, #0
  01584	e1c230b0	 strh        r3, [r2]

; 513  : 
; 514  :         // Convert to filetime
; 515  :         if (NKSystemTimeToFileTime(pSystemTime, (FILETIME*)&s_rtc.alarmFiletime))

  01588	e59f316c	 ldr         r3, [pc, #0x16C]
  0158c	e2831038	 add         r1, r3, #0x38
  01590	e59d0038	 ldr         r0, [sp, #0x38]
  01594	eb000000	 bl          NKSystemTimeToFileTime
  01598	e58d002c	 str         r0, [sp, #0x2C]
  0159c	e59d302c	 ldr         r3, [sp, #0x2C]
  015a0	e3530000	 cmp         r3, #0
  015a4	0a000049	 beq         |$LN1@OEMSetAlar|

; 516  :             {
; 517  :             UCHAR   status;
; 518  :             UCHAR   bcdTime[6];
; 519  : 
; 520  :             //  Adjust alarm time by secure offset
; 521  :             s_rtc.alarmFiletime  = s_rtc.alarmFiletime - s_rtc.baseOffset;

  015a8	e59f314c	 ldr         r3, [pc, #0x14C]
  015ac	e5931038	 ldr         r1, [r3, #0x38]
  015b0	e59f3144	 ldr         r3, [pc, #0x144]
  015b4	e593003c	 ldr         r0, [r3, #0x3C]
  015b8	e59f313c	 ldr         r3, [pc, #0x13C]
  015bc	e5932028	 ldr         r2, [r3, #0x28]
  015c0	e59f3134	 ldr         r3, [pc, #0x134]
  015c4	e593302c	 ldr         r3, [r3, #0x2C]
  015c8	e0511002	 subs        r1, r1, r2
  015cc	e0c02003	 sbc         r2, r0, r3
  015d0	e59f3124	 ldr         r3, [pc, #0x124]
  015d4	e5831038	 str         r1, [r3, #0x38]
  015d8	e59f311c	 ldr         r3, [pc, #0x11C]
  015dc	e583203c	 str         r2, [r3, #0x3C]

; 522  : 
; 523  :             //  Convert to BCD time format
; 524  :             FiletimeToHWTime( s_rtc.alarmFiletime, bcdTime );

  015e0	e28d200c	 add         r2, sp, #0xC
  015e4	e59f3110	 ldr         r3, [pc, #0x110]
  015e8	e5930038	 ldr         r0, [r3, #0x38]
  015ec	e59f3108	 ldr         r3, [pc, #0x108]
  015f0	e593103c	 ldr         r1, [r3, #0x3C]
  015f4	eb000000	 bl          FiletimeToHWTime

; 525  : 
; 526  :             //  Write alarm registers
; 527  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_YEARS_REG, bcdTime[5]);

  015f8	e5dd2011	 ldrb        r2, [sp, #0x11]
  015fc	e3a01803	 mov         r1, #3, 16
  01600	e3811028	 orr         r1, r1, #0x28
  01604	e59f30f0	 ldr         r3, [pc, #0xF0]
  01608	e5930018	 ldr         r0, [r3, #0x18]
  0160c	eb000000	 bl          TWLWriteByteReg

; 528  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_MONTHS_REG, bcdTime[4]);

  01610	e5dd2010	 ldrb        r2, [sp, #0x10]
  01614	e3a01803	 mov         r1, #3, 16
  01618	e3811027	 orr         r1, r1, #0x27
  0161c	e59f30d8	 ldr         r3, [pc, #0xD8]
  01620	e5930018	 ldr         r0, [r3, #0x18]
  01624	eb000000	 bl          TWLWriteByteReg

; 529  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_DAYS_REG, bcdTime[3]);

  01628	e5dd200f	 ldrb        r2, [sp, #0xF]
  0162c	e3a01803	 mov         r1, #3, 16
  01630	e3811026	 orr         r1, r1, #0x26
  01634	e59f30c0	 ldr         r3, [pc, #0xC0]
  01638	e5930018	 ldr         r0, [r3, #0x18]
  0163c	eb000000	 bl          TWLWriteByteReg

; 530  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_HOURS_REG, bcdTime[2]);

  01640	e5dd200e	 ldrb        r2, [sp, #0xE]
  01644	e3a01803	 mov         r1, #3, 16
  01648	e3811025	 orr         r1, r1, #0x25
  0164c	e59f30a8	 ldr         r3, [pc, #0xA8]
  01650	e5930018	 ldr         r0, [r3, #0x18]
  01654	eb000000	 bl          TWLWriteByteReg

; 531  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_MINUTES_REG, bcdTime[1]);

  01658	e5dd200d	 ldrb        r2, [sp, #0xD]
  0165c	e3a01803	 mov         r1, #3, 16
  01660	e3811024	 orr         r1, r1, #0x24
  01664	e59f3090	 ldr         r3, [pc, #0x90]
  01668	e5930018	 ldr         r0, [r3, #0x18]
  0166c	eb000000	 bl          TWLWriteByteReg

; 532  :             TWLWriteByteReg(s_rtc.hTWL, TWL_ALARM_SECONDS_REG, bcdTime[0]);

  01670	e5dd200c	 ldrb        r2, [sp, #0xC]
  01674	e3a01803	 mov         r1, #3, 16
  01678	e3811023	 orr         r1, r1, #0x23
  0167c	e59f3078	 ldr         r3, [pc, #0x78]
  01680	e5930018	 ldr         r0, [r3, #0x18]
  01684	eb000000	 bl          TWLWriteByteReg

; 533  : 
; 534  :             //  Set toggle bit to latch alarm registers
; 535  :             TWLReadByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, &status);

  01688	e28d2012	 add         r2, sp, #0x12
  0168c	e3a01803	 mov         r1, #3, 16
  01690	e3811029	 orr         r1, r1, #0x29
  01694	e59f3060	 ldr         r3, [pc, #0x60]
  01698	e5930018	 ldr         r0, [r3, #0x18]
  0169c	eb000000	 bl          TWLReadByteReg

; 536  : 
; 537  :             status |= TWL_RTC_CTRL_RUN | TWL_RTC_CTRL_GET_TIME;

  016a0	e5dd3012	 ldrb        r3, [sp, #0x12]
  016a4	e3833041	 orr         r3, r3, #0x41
  016a8	e20330ff	 and         r3, r3, #0xFF
  016ac	e5cd3012	 strb        r3, [sp, #0x12]

; 538  :             TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, status);

  016b0	e5dd2012	 ldrb        r2, [sp, #0x12]
  016b4	e3a01803	 mov         r1, #3, 16
  016b8	e3811029	 orr         r1, r1, #0x29
  016bc	e59f3038	 ldr         r3, [pc, #0x38]
  016c0	e5930018	 ldr         r0, [r3, #0x18]
  016c4	eb000000	 bl          TWLWriteByteReg

; 539  : 
; 540  :             // Done
; 541  :             rc = TRUE;

  016c8	e3a03001	 mov         r3, #1
  016cc	e58d3008	 str         r3, [sp, #8]
  016d0		 |$LN1@OEMSetAlar|

; 542  :             }
; 543  : 
; 544  :         LeaveCriticalSection(&s_rtc.cs);

  016d0	e59f3024	 ldr         r3, [pc, #0x24]
  016d4	e2830004	 add         r0, r3, #4
  016d8	eb000000	 bl          LeaveCriticalSection
  016dc		 |$LN3@OEMSetAlar|

; 545  :         }
; 546  :     
; 547  :     return rc;

  016dc	e59d0014	 ldr         r0, [sp, #0x14]
  016e0	eb000000	 bl          __security_check_cookie
  016e4	e59d3008	 ldr         r3, [sp, #8]
  016e8	e58d3020	 str         r3, [sp, #0x20]

; 548  : }

  016ec	e59d0020	 ldr         r0, [sp, #0x20]
  016f0	e28dd030	 add         sp, sp, #0x30
  016f4	e89d6000	 ldmia       sp, {sp, lr}
  016f8	e12fff1e	 bx          lr
  016fc		 |$LN11@OEMSetAlar|
  016fc		 |$LN12@OEMSetAlar|
  016fc	00000000	 DCD         |s_rtc|
  01700		 |$LN13@OEMSetAlar|
  01700	00000000	 DCD         |g_ResumeRTC|
  01704		 |$LN14@OEMSetAlar|
  01704	00000000	 DCD         |??_C@_1CO@MAJAHDBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAS?$AAe?$AAt?$AAA?$AAl?$AAa?$AAr?$AAm?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CF?$AAs?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01708		 |$LN15@OEMSetAlar|
  01708	00000000	 DCD         |dpCurSettings|
  0170c		 |$LN16@OEMSetAlar|
  0170c	00000000	 DCD         |__security_cookie|
  01710		 |$M45458|

			 ENDP  ; |OEMSetAlarmTime|

	EXPORT	|??_C@_1DA@PEAOFAFN@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]

  00050			 AREA	 |.pdata|, PDATA
|$T45476| DCD	|$LN7@OALIoCtlHa@2|
	DCD	0xc000a904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PEAOFAFN@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "R"
	DCB	0x0, "t", 0x0, "c", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00008			 AREA	 |.xdata|, DATA
|$T45472| DCD	0xffffffd8
; Function compile flags: /Odtp

  01710			 AREA	 |.text|, CODE, ARM

  01710	00000000	 DCD         |__GSHandlerCheck|
  01714	00000000	 DCD         |$T45472|

  01718		 |OALIoCtlHalRtcTime| PROC

; 566  : {

  01718		 |$LN7@OALIoCtlHa@2|
  01718	e1a0c00d	 mov         r12, sp
  0171c	e92d000f	 stmdb       sp!, {r0 - r3}
  01720	e92d5000	 stmdb       sp!, {r12, lr}
  01724	e24dd02c	 sub         sp, sp, #0x2C
  01728		 |$M45473|
  01728	e59f3288	 ldr         r3, [pc, #0x288]
  0172c	e5933000	 ldr         r3, [r3]
  01730	e58d301c	 str         r3, [sp, #0x1C]

; 567  :     SYSTEMTIME  baseSystemTime;
; 568  :     UCHAR       status;
; 569  :     UCHAR       bcdTime[6];
; 570  : 
; 571  :     UNREFERENCED_PARAMETER(pOutSize);
; 572  :     UNREFERENCED_PARAMETER(outSize);
; 573  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 574  :     UNREFERENCED_PARAMETER(inSize);
; 575  :     UNREFERENCED_PARAMETER(pInBuffer);
; 576  :     UNREFERENCED_PARAMETER(code);
; 577  : 
; 578  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OALIoCtlHalRtcTime()\r\n"));

  01734	e59f3278	 ldr         r3, [pc, #0x278]
  01738	e5933440	 ldr         r3, [r3, #0x440]
  0173c	e3130b02	 tst         r3, #2, 22
  01740	0a000008	 beq         |$LN3@OALIoCtlHa@2|
  01744	e59f3268	 ldr         r3, [pc, #0x268]
  01748	e5933440	 ldr         r3, [r3, #0x440]
  0174c	e3130004	 tst         r3, #4
  01750	0a000004	 beq         |$LN3@OALIoCtlHa@2|
  01754	e59f0254	 ldr         r0, [pc, #0x254]
  01758	eb000000	 bl          NKDbgPrintfW
  0175c	e3a03001	 mov         r3, #1
  01760	e58d3024	 str         r3, [sp, #0x24]
  01764	ea000001	 b           |$LN4@OALIoCtlHa@2|
  01768		 |$LN3@OALIoCtlHa@2|
  01768	e3a03000	 mov         r3, #0
  0176c	e58d3024	 str         r3, [sp, #0x24]
  01770		 |$LN4@OALIoCtlHa@2|

; 579  : 
; 580  :     //  The RTC in Triton2 is set to periodically sync with the kernel time
; 581  :     //  to ensure there is no clock drift.  When a sync event is triggered,
; 582  :     //  the T2 RTC is used to set the base time in the kernel.
; 583  : 
; 584  :     EnterCriticalSection(&s_rtc.cs);

  01770	e59f3234	 ldr         r3, [pc, #0x234]
  01774	e2830004	 add         r0, r3, #4
  01778	eb000000	 bl          EnterCriticalSection

; 585  : 
; 586  :     //  Set get time flag            
; 587  :     TWLReadByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, &status);

  0177c	e28d2018	 add         r2, sp, #0x18
  01780	e3a01803	 mov         r1, #3, 16
  01784	e3811029	 orr         r1, r1, #0x29
  01788	e59f321c	 ldr         r3, [pc, #0x21C]
  0178c	e5930018	 ldr         r0, [r3, #0x18]
  01790	eb000000	 bl          TWLReadByteReg

; 588  : 
; 589  :     status |= TWL_RTC_CTRL_RUN | TWL_RTC_CTRL_GET_TIME;

  01794	e5dd3018	 ldrb        r3, [sp, #0x18]
  01798	e3833041	 orr         r3, r3, #0x41
  0179c	e20330ff	 and         r3, r3, #0xFF
  017a0	e5cd3018	 strb        r3, [sp, #0x18]

; 590  :     TWLWriteByteReg(s_rtc.hTWL, TWL_RTC_CTRL_REG, status);

  017a4	e5dd2018	 ldrb        r2, [sp, #0x18]
  017a8	e3a01803	 mov         r1, #3, 16
  017ac	e3811029	 orr         r1, r1, #0x29
  017b0	e59f31f4	 ldr         r3, [pc, #0x1F4]
  017b4	e5930018	 ldr         r0, [r3, #0x18]
  017b8	eb000000	 bl          TWLWriteByteReg

; 591  : 
; 592  :     //  Get date and time from RTC
; 593  :     TWLReadByteReg(s_rtc.hTWL, TWL_YEARS_REG, &bcdTime[5]);

  017bc	e28d3000	 add         r3, sp, #0
  017c0	e2832005	 add         r2, r3, #5
  017c4	e3a01803	 mov         r1, #3, 16
  017c8	e3811021	 orr         r1, r1, #0x21
  017cc	e59f31d8	 ldr         r3, [pc, #0x1D8]
  017d0	e5930018	 ldr         r0, [r3, #0x18]
  017d4	eb000000	 bl          TWLReadByteReg

; 594  :     TWLReadByteReg(s_rtc.hTWL, TWL_MONTHS_REG, &bcdTime[4]);

  017d8	e28d3000	 add         r3, sp, #0
  017dc	e2832004	 add         r2, r3, #4
  017e0	e3a01803	 mov         r1, #3, 16
  017e4	e3811020	 orr         r1, r1, #0x20
  017e8	e59f31bc	 ldr         r3, [pc, #0x1BC]
  017ec	e5930018	 ldr         r0, [r3, #0x18]
  017f0	eb000000	 bl          TWLReadByteReg

; 595  :     TWLReadByteReg(s_rtc.hTWL, TWL_DAYS_REG, &bcdTime[3]);

  017f4	e28d3000	 add         r3, sp, #0
  017f8	e2832003	 add         r2, r3, #3
  017fc	e3a01803	 mov         r1, #3, 16
  01800	e381101f	 orr         r1, r1, #0x1F
  01804	e59f31a0	 ldr         r3, [pc, #0x1A0]
  01808	e5930018	 ldr         r0, [r3, #0x18]
  0180c	eb000000	 bl          TWLReadByteReg

; 596  :     TWLReadByteReg(s_rtc.hTWL, TWL_HOURS_REG, &bcdTime[2]);

  01810	e28d3000	 add         r3, sp, #0
  01814	e2832002	 add         r2, r3, #2
  01818	e3a01803	 mov         r1, #3, 16
  0181c	e381101e	 orr         r1, r1, #0x1E
  01820	e59f3184	 ldr         r3, [pc, #0x184]
  01824	e5930018	 ldr         r0, [r3, #0x18]
  01828	eb000000	 bl          TWLReadByteReg

; 597  :     TWLReadByteReg(s_rtc.hTWL, TWL_MINUTES_REG, &bcdTime[1]);

  0182c	e28d3000	 add         r3, sp, #0
  01830	e2832001	 add         r2, r3, #1
  01834	e3a01803	 mov         r1, #3, 16
  01838	e381101d	 orr         r1, r1, #0x1D
  0183c	e59f3168	 ldr         r3, [pc, #0x168]
  01840	e5930018	 ldr         r0, [r3, #0x18]
  01844	eb000000	 bl          TWLReadByteReg

; 598  :     TWLReadByteReg(s_rtc.hTWL, TWL_SECONDS_REG, &bcdTime[0]);

  01848	e28d2000	 add         r2, sp, #0
  0184c	e3a01803	 mov         r1, #3, 16
  01850	e381101c	 orr         r1, r1, #0x1C
  01854	e59f3150	 ldr         r3, [pc, #0x150]
  01858	e5930018	 ldr         r0, [r3, #0x18]
  0185c	eb000000	 bl          TWLReadByteReg

; 599  : 
; 600  :     //  Convert current RTC date/time to FILETIME
; 601  :     baseSystemTime.wYear    = BCD2BIN(bcdTime[5]) + RTC_BASE_YEAR_MIN;

  01860	e5dd3005	 ldrb        r3, [sp, #5]
  01864	e1a01243	 mov         r1, r3, asr #4
  01868	e3a0300a	 mov         r3, #0xA
  0186c	e0020391	 mul         r2, r1, r3
  01870	e5dd3005	 ldrb        r3, [sp, #5]
  01874	e203300f	 and         r3, r3, #0xF
  01878	e0823003	 add         r3, r2, r3
  0187c	e2833e7d	 add         r3, r3, #0x7D, 28
  01880	e1a03803	 mov         r3, r3, lsl #16
  01884	e1a03823	 mov         r3, r3, lsr #16
  01888	e1cd30b8	 strh        r3, [sp, #8]

; 602  :     baseSystemTime.wMonth   = BCD2BIN(bcdTime[4]);

  0188c	e5dd3004	 ldrb        r3, [sp, #4]
  01890	e1a01243	 mov         r1, r3, asr #4
  01894	e3a0300a	 mov         r3, #0xA
  01898	e0020391	 mul         r2, r1, r3
  0189c	e5dd3004	 ldrb        r3, [sp, #4]
  018a0	e203300f	 and         r3, r3, #0xF
  018a4	e0823003	 add         r3, r2, r3
  018a8	e1a03803	 mov         r3, r3, lsl #16
  018ac	e1a03823	 mov         r3, r3, lsr #16
  018b0	e1cd30ba	 strh        r3, [sp, #0xA]

; 603  :     baseSystemTime.wDay     = BCD2BIN(bcdTime[3]);

  018b4	e5dd3003	 ldrb        r3, [sp, #3]
  018b8	e1a01243	 mov         r1, r3, asr #4
  018bc	e3a0300a	 mov         r3, #0xA
  018c0	e0020391	 mul         r2, r1, r3
  018c4	e5dd3003	 ldrb        r3, [sp, #3]
  018c8	e203300f	 and         r3, r3, #0xF
  018cc	e0823003	 add         r3, r2, r3
  018d0	e1a03803	 mov         r3, r3, lsl #16
  018d4	e1a03823	 mov         r3, r3, lsr #16
  018d8	e1cd30be	 strh        r3, [sp, #0xE]

; 604  :     baseSystemTime.wHour    = BCD2BIN(bcdTime[2]);

  018dc	e5dd3002	 ldrb        r3, [sp, #2]
  018e0	e1a01243	 mov         r1, r3, asr #4
  018e4	e3a0300a	 mov         r3, #0xA
  018e8	e0020391	 mul         r2, r1, r3
  018ec	e5dd3002	 ldrb        r3, [sp, #2]
  018f0	e203300f	 and         r3, r3, #0xF
  018f4	e0823003	 add         r3, r2, r3
  018f8	e1a03803	 mov         r3, r3, lsl #16
  018fc	e1a03823	 mov         r3, r3, lsr #16
  01900	e1cd31b0	 strh        r3, [sp, #0x10]

; 605  :     baseSystemTime.wMinute  = BCD2BIN(bcdTime[1]);

  01904	e5dd3001	 ldrb        r3, [sp, #1]
  01908	e1a01243	 mov         r1, r3, asr #4
  0190c	e3a0300a	 mov         r3, #0xA
  01910	e0020391	 mul         r2, r1, r3
  01914	e5dd3001	 ldrb        r3, [sp, #1]
  01918	e203300f	 and         r3, r3, #0xF
  0191c	e0823003	 add         r3, r2, r3
  01920	e1a03803	 mov         r3, r3, lsl #16
  01924	e1a03823	 mov         r3, r3, lsr #16
  01928	e1cd31b2	 strh        r3, [sp, #0x12]

; 606  :     baseSystemTime.wSecond  = BCD2BIN(bcdTime[0]);

  0192c	e5dd3000	 ldrb        r3, [sp]
  01930	e1a01243	 mov         r1, r3, asr #4
  01934	e3a0300a	 mov         r3, #0xA
  01938	e0020391	 mul         r2, r1, r3
  0193c	e5dd3000	 ldrb        r3, [sp]
  01940	e203300f	 and         r3, r3, #0xF
  01944	e0823003	 add         r3, r2, r3
  01948	e1a03803	 mov         r3, r3, lsl #16
  0194c	e1a03823	 mov         r3, r3, lsr #16
  01950	e1cd31b4	 strh        r3, [sp, #0x14]

; 607  :     baseSystemTime.wMilliseconds = 0;

  01954	e3a03000	 mov         r3, #0
  01958	e1cd31b6	 strh        r3, [sp, #0x16]

; 608  : 
; 609  :     //  Update the base filetime to match RTC
; 610  :     NKSystemTimeToFileTime(&baseSystemTime, (FILETIME*)&s_rtc.baseFiletime);

  0195c	e59f3048	 ldr         r3, [pc, #0x48]
  01960	e2831020	 add         r1, r3, #0x20
  01964	e28d0008	 add         r0, sp, #8
  01968	eb000000	 bl          NKSystemTimeToFileTime

; 611  : 
; 612  :     //  Reset the tick count
; 613  :     s_rtc.baseTickCount = OEMGetTickCount();

  0196c	eb000000	 bl          OEMGetTickCount
  01970	e58d0028	 str         r0, [sp, #0x28]
  01974	e59d2028	 ldr         r2, [sp, #0x28]
  01978	e59f302c	 ldr         r3, [pc, #0x2C]
  0197c	e5832030	 str         r2, [r3, #0x30]

; 614  :     
; 615  :     LeaveCriticalSection(&s_rtc.cs);

  01980	e59f3024	 ldr         r3, [pc, #0x24]
  01984	e2830004	 add         r0, r3, #4
  01988	eb000000	 bl          LeaveCriticalSection

; 616  : 
; 617  :     return TRUE;

  0198c	e59d001c	 ldr         r0, [sp, #0x1C]
  01990	eb000000	 bl          __security_check_cookie
  01994	e3a03001	 mov         r3, #1
  01998	e58d3020	 str         r3, [sp, #0x20]

; 618  : }

  0199c	e59d0020	 ldr         r0, [sp, #0x20]
  019a0	e28dd02c	 add         sp, sp, #0x2C
  019a4	e89d6000	 ldmia       sp, {sp, lr}
  019a8	e12fff1e	 bx          lr
  019ac		 |$LN8@OALIoCtlHa@2|
  019ac		 |$LN9@OALIoCtlHa@2|
  019ac	00000000	 DCD         |s_rtc|
  019b0		 |$LN10@OALIoCtlHa@2|
  019b0	00000000	 DCD         |??_C@_1DA@PEAOFAFN@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAT?$AAi?$AAm?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  019b4		 |$LN11@OALIoCtlHa@2|
  019b4	00000000	 DCD         |dpCurSettings|
  019b8		 |$LN12@OALIoCtlHa@2|
  019b8	00000000	 DCD         |__security_cookie|
  019bc		 |$M45474|

			 ENDP  ; |OALIoCtlHalRtcTime|

	EXPORT	|??_C@_1DC@KHBDMOPE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlHalRtcAlarm|
	IMPORT	|NKSetInterruptEvent|

  00058			 AREA	 |.pdata|, PDATA
|$T45489| DCD	|$LN7@OALIoCtlHa@3|
	DCD	0x40001d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@KHBDMOPE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "R"
	DCB	0x0, "t", 0x0, "c", 0x0, "A", 0x0, "l", 0x0, "a", 0x0, "r"
	DCB	0x0, "m", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  019bc			 AREA	 |.text|, CODE, ARM

  019bc		 |OALIoCtlHalRtcAlarm| PROC

; 636  : {

  019bc		 |$LN7@OALIoCtlHa@3|
  019bc	e1a0c00d	 mov         r12, sp
  019c0	e92d000f	 stmdb       sp!, {r0 - r3}
  019c4	e92d5000	 stmdb       sp!, {r12, lr}
  019c8	e24dd008	 sub         sp, sp, #8
  019cc		 |$M45486|

; 637  :     OALMSG(OAL_TIMER && OAL_FUNC, (L"+OALIoCtlHalRtcAlarm()\r\n"));

  019cc	e59f3058	 ldr         r3, [pc, #0x58]
  019d0	e5933440	 ldr         r3, [r3, #0x440]
  019d4	e3130b02	 tst         r3, #2, 22
  019d8	0a000008	 beq         |$LN3@OALIoCtlHa@3|
  019dc	e59f3048	 ldr         r3, [pc, #0x48]
  019e0	e5933440	 ldr         r3, [r3, #0x440]
  019e4	e3130004	 tst         r3, #4
  019e8	0a000004	 beq         |$LN3@OALIoCtlHa@3|
  019ec	e59f0034	 ldr         r0, [pc, #0x34]
  019f0	eb000000	 bl          NKDbgPrintfW
  019f4	e3a03001	 mov         r3, #1
  019f8	e58d3004	 str         r3, [sp, #4]
  019fc	ea000001	 b           |$LN4@OALIoCtlHa@3|
  01a00		 |$LN3@OALIoCtlHa@3|
  01a00	e3a03000	 mov         r3, #0
  01a04	e58d3004	 str         r3, [sp, #4]
  01a08		 |$LN4@OALIoCtlHa@3|

; 638  : 
; 639  :     UNREFERENCED_PARAMETER(pOutSize);
; 640  :     UNREFERENCED_PARAMETER(outSize);
; 641  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 642  :     UNREFERENCED_PARAMETER(inSize);
; 643  :     UNREFERENCED_PARAMETER(pInBuffer);
; 644  :     UNREFERENCED_PARAMETER(code);
; 645  : 
; 646  :     //  Alarm has been triggered by RTC driver.
; 647  :     NKSetInterruptEvent(SYSINTR_RTC_ALARM);

  01a08	e3a0000d	 mov         r0, #0xD
  01a0c	eb000000	 bl          NKSetInterruptEvent

; 648  :     return TRUE;

  01a10	e3a03001	 mov         r3, #1
  01a14	e58d3000	 str         r3, [sp]

; 649  : }

  01a18	e59d0000	 ldr         r0, [sp]
  01a1c	e28dd008	 add         sp, sp, #8
  01a20	e89d6000	 ldmia       sp, {sp, lr}
  01a24	e12fff1e	 bx          lr
  01a28		 |$LN8@OALIoCtlHa@3|
  01a28		 |$LN9@OALIoCtlHa@3|
  01a28	00000000	 DCD         |??_C@_1DC@KHBDMOPE@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAH?$AAa?$AAl?$AAR?$AAt?$AAc?$AAA?$AAl?$AAa?$AAr?$AAm?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01a2c		 |$LN10@OALIoCtlHa@3|
  01a2c	00000000	 DCD         |dpCurSettings|
  01a30		 |$M45487|

			 ENDP  ; |OALIoCtlHalRtcAlarm|


  00060			 AREA	 |.pdata|, PDATA
|$T45498| DCD	|$LN7@FiletimeTo|
	DCD	0x40007c04
; Function compile flags: /Odtp

  01a30			 AREA	 |.text|, CODE, ARM

  01a30		 |FiletimeToHWTime| PROC

; 658  : {

  01a30		 |$LN7@FiletimeTo|
  01a30	e1a0c00d	 mov         r12, sp
  01a34	e92d000f	 stmdb       sp!, {r0 - r3}
  01a38	e92d5010	 stmdb       sp!, {r4, r12, lr}
  01a3c	e24dd014	 sub         sp, sp, #0x14
  01a40		 |$M45495|

; 659  :     SYSTEMTIME systemTime;
; 660  : 
; 661  :     //  Convert filetime to RTC HW time format
; 662  :     NKFileTimeToSystemTime((FILETIME*)&fileTime, &systemTime);

  01a40	e28d1000	 add         r1, sp, #0
  01a44	e28d0020	 add         r0, sp, #0x20
  01a48	eb000000	 bl          NKFileTimeToSystemTime

; 663  : 
; 664  :     //  Limit RTC year range
; 665  :     if( systemTime.wYear < RTC_BASE_YEAR_MIN )

  01a4c	e1dd30b0	 ldrh        r3, [sp]
  01a50	e3530e7d	 cmp         r3, #0x7D, 28
  01a54	aa000001	 bge         |$LN2@FiletimeTo|

; 666  :         systemTime.wYear = RTC_BASE_YEAR_MIN;

  01a58	e3a03e7d	 mov         r3, #0x7D, 28
  01a5c	e1cd30b0	 strh        r3, [sp]
  01a60		 |$LN2@FiletimeTo|

; 667  : 
; 668  :     if( systemTime.wYear > RTC_BASE_YEAR_MAX )

  01a60	e1dd30b0	 ldrh        r3, [sp]
  01a64	e1a02003	 mov         r2, r3
  01a68	e3a03b02	 mov         r3, #2, 22
  01a6c	e3833033	 orr         r3, r3, #0x33
  01a70	e1520003	 cmp         r2, r3
  01a74	da000002	 ble         |$LN1@FiletimeTo|

; 669  :         systemTime.wYear = RTC_BASE_YEAR_MAX;

  01a78	e3a03b02	 mov         r3, #2, 22
  01a7c	e3833033	 orr         r3, r3, #0x33
  01a80	e1cd30b0	 strh        r3, [sp]
  01a84		 |$LN1@FiletimeTo|

; 670  : 
; 671  :     bcdTime[5] = BIN2BCD(systemTime.wYear - RTC_BASE_YEAR_MIN);

  01a84	e1dd30b0	 ldrh        r3, [sp]
  01a88	e2433e7d	 sub         r3, r3, #0x7D, 28
  01a8c	e20330ff	 and         r3, r3, #0xFF
  01a90	e1a01003	 mov         r1, r3
  01a94	e3a0000a	 mov         r0, #0xA
  01a98	eb000000	 bl          __rt_sdiv
  01a9c	e1a04200	 mov         r4, r0, lsl #4
  01aa0	e1dd30b0	 ldrh        r3, [sp]
  01aa4	e2433e7d	 sub         r3, r3, #0x7D, 28
  01aa8	e20330ff	 and         r3, r3, #0xFF
  01aac	e1a01003	 mov         r1, r3
  01ab0	e3a0000a	 mov         r0, #0xA
  01ab4	eb000000	 bl          __rt_sdiv
  01ab8	e1841001	 orr         r1, r4, r1
  01abc	e59d3028	 ldr         r3, [sp, #0x28]
  01ac0	e2832005	 add         r2, r3, #5
  01ac4	e20130ff	 and         r3, r1, #0xFF
  01ac8	e5c23000	 strb        r3, [r2]

; 672  :     bcdTime[4] = BIN2BCD(systemTime.wMonth);

  01acc	e1dd30b2	 ldrh        r3, [sp, #2]
  01ad0	e20330ff	 and         r3, r3, #0xFF
  01ad4	e1a01003	 mov         r1, r3
  01ad8	e3a0000a	 mov         r0, #0xA
  01adc	eb000000	 bl          __rt_sdiv
  01ae0	e1a04200	 mov         r4, r0, lsl #4
  01ae4	e1dd30b2	 ldrh        r3, [sp, #2]
  01ae8	e20330ff	 and         r3, r3, #0xFF
  01aec	e1a01003	 mov         r1, r3
  01af0	e3a0000a	 mov         r0, #0xA
  01af4	eb000000	 bl          __rt_sdiv
  01af8	e1841001	 orr         r1, r4, r1
  01afc	e59d3028	 ldr         r3, [sp, #0x28]
  01b00	e2832004	 add         r2, r3, #4
  01b04	e20130ff	 and         r3, r1, #0xFF
  01b08	e5c23000	 strb        r3, [r2]

; 673  :     bcdTime[3] = BIN2BCD(systemTime.wDay);

  01b0c	e1dd30b6	 ldrh        r3, [sp, #6]
  01b10	e20330ff	 and         r3, r3, #0xFF
  01b14	e1a01003	 mov         r1, r3
  01b18	e3a0000a	 mov         r0, #0xA
  01b1c	eb000000	 bl          __rt_sdiv
  01b20	e1a04200	 mov         r4, r0, lsl #4
  01b24	e1dd30b6	 ldrh        r3, [sp, #6]
  01b28	e20330ff	 and         r3, r3, #0xFF
  01b2c	e1a01003	 mov         r1, r3
  01b30	e3a0000a	 mov         r0, #0xA
  01b34	eb000000	 bl          __rt_sdiv
  01b38	e1841001	 orr         r1, r4, r1
  01b3c	e59d3028	 ldr         r3, [sp, #0x28]
  01b40	e2832003	 add         r2, r3, #3
  01b44	e20130ff	 and         r3, r1, #0xFF
  01b48	e5c23000	 strb        r3, [r2]

; 674  :     bcdTime[2] = BIN2BCD(systemTime.wHour);

  01b4c	e1dd30b8	 ldrh        r3, [sp, #8]
  01b50	e20330ff	 and         r3, r3, #0xFF
  01b54	e1a01003	 mov         r1, r3
  01b58	e3a0000a	 mov         r0, #0xA
  01b5c	eb000000	 bl          __rt_sdiv
  01b60	e1a04200	 mov         r4, r0, lsl #4
  01b64	e1dd30b8	 ldrh        r3, [sp, #8]
  01b68	e20330ff	 and         r3, r3, #0xFF
  01b6c	e1a01003	 mov         r1, r3
  01b70	e3a0000a	 mov         r0, #0xA
  01b74	eb000000	 bl          __rt_sdiv
  01b78	e1841001	 orr         r1, r4, r1
  01b7c	e59d3028	 ldr         r3, [sp, #0x28]
  01b80	e2832002	 add         r2, r3, #2
  01b84	e20130ff	 and         r3, r1, #0xFF
  01b88	e5c23000	 strb        r3, [r2]

; 675  :     bcdTime[1] = BIN2BCD(systemTime.wMinute);

  01b8c	e1dd30ba	 ldrh        r3, [sp, #0xA]
  01b90	e20330ff	 and         r3, r3, #0xFF
  01b94	e1a01003	 mov         r1, r3
  01b98	e3a0000a	 mov         r0, #0xA
  01b9c	eb000000	 bl          __rt_sdiv
  01ba0	e1a04200	 mov         r4, r0, lsl #4
  01ba4	e1dd30ba	 ldrh        r3, [sp, #0xA]
  01ba8	e20330ff	 and         r3, r3, #0xFF
  01bac	e1a01003	 mov         r1, r3
  01bb0	e3a0000a	 mov         r0, #0xA
  01bb4	eb000000	 bl          __rt_sdiv
  01bb8	e1841001	 orr         r1, r4, r1
  01bbc	e59d3028	 ldr         r3, [sp, #0x28]
  01bc0	e2832001	 add         r2, r3, #1
  01bc4	e20130ff	 and         r3, r1, #0xFF
  01bc8	e5c23000	 strb        r3, [r2]

; 676  :     bcdTime[0] = BIN2BCD(systemTime.wSecond);

  01bcc	e1dd30bc	 ldrh        r3, [sp, #0xC]
  01bd0	e20330ff	 and         r3, r3, #0xFF
  01bd4	e1a01003	 mov         r1, r3
  01bd8	e3a0000a	 mov         r0, #0xA
  01bdc	eb000000	 bl          __rt_sdiv
  01be0	e1a04200	 mov         r4, r0, lsl #4
  01be4	e1dd30bc	 ldrh        r3, [sp, #0xC]
  01be8	e20330ff	 and         r3, r3, #0xFF
  01bec	e1a01003	 mov         r1, r3
  01bf0	e3a0000a	 mov         r0, #0xA
  01bf4	eb000000	 bl          __rt_sdiv
  01bf8	e1843001	 orr         r3, r4, r1
  01bfc	e20320ff	 and         r2, r3, #0xFF
  01c00	e59d3028	 ldr         r3, [sp, #0x28]
  01c04	e5c32000	 strb        r2, [r3]

; 677  :         
; 678  :     return TRUE;

  01c08	e3a03001	 mov         r3, #1
  01c0c	e58d3010	 str         r3, [sp, #0x10]

; 679  : }

  01c10	e59d0010	 ldr         r0, [sp, #0x10]
  01c14	e28dd014	 add         sp, sp, #0x14
  01c18	e89d6010	 ldmia       sp, {r4, sp, lr}
  01c1c	e12fff1e	 bx          lr
  01c20		 |$M45496|

			 ENDP  ; |FiletimeToHWTime|

	END
