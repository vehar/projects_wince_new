; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TPS659XX\DRIVER\tps659xx.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19IAPNKDAH@?$AAG?$AAp?$AAi?$AAo?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?_rgKeypadMatrixQueue@@3PAY07EA| [ DATA ] ; _rgKeypadMatrixQueue
	EXPORT	|DEVICE_IFC_TWL_GUID| [ DATA ]
	EXPORT	|dpCurSettings| [ DATA ]
	EXPORT	|?_SIHEntry_GPIO@@3USIHEntry_t@@A| [ DATA ] ; _SIHEntry_GPIO
	EXPORT	|?_SIHEntry_Keypad@@3USIHEntry_t@@A| [ DATA ] ; _SIHEntry_Keypad
	EXPORT	|?_SIHEntry_BCI@@3USIHEntry_t@@A| [ DATA ] ; _SIHEntry_BCI
	EXPORT	|?_SIHEntry_MADC@@3USIHEntry_t@@A| [ DATA ] ; _SIHEntry_MADC
	EXPORT	|?_SIHEntry_USB@@3USIHEntry_t@@A| [ DATA ] ; _SIHEntry_USB
	EXPORT	|?_SIHEntry_Power@@3USIHEntry_t@@A| [ DATA ] ; _SIHEntry_Power
	EXPORT	|?_nKeypadMatrixQueueHead@@3KA| [ DATA ] ; _nKeypadMatrixQueueHead
	EXPORT	|?_nKeypadMatrixQueueTail@@3KA| [ DATA ] ; _nKeypadMatrixQueueTail
	EXPORT	|?_nKeypadMatrixQueueCount@@3JA| [ DATA ] ; _nKeypadMatrixQueueCount

  00000			 AREA	 |.bss|, NOINIT
|?_rgKeypadMatrixQueue@@3PAY07EA| % 0x80		; _rgKeypadMatrixQueue
|?_nKeypadMatrixQueueHead@@3KA| % 0x4			; _nKeypadMatrixQueueHead
|?_nKeypadMatrixQueueTail@@3KA| % 0x4			; _nKeypadMatrixQueueTail
|?_nKeypadMatrixQueueCount@@3JA| % 0x4			; _nKeypadMatrixQueueCount

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19IAPNKDAH@?$AAG?$AAp?$AAi?$AAo?$AA?$AA@| DCB "G", 0x0, "p", 0x0, "i"
	DCB	0x0, "o", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "T", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "o", 0x0, "n", 0x0
	DCB	" ", 0x0, "(", 0x0, "T", 0x0, "W", 0x0, "L", 0x0, ")", 0x0
	DCB	0x0, 0x0
	%	38
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"R", 0x0, "T", 0x0, "C", 0x0, 0x0, 0x0
	%	56
	DCD	0x8003
|?_SIHEntry_Keypad@@3USIHEntry_t@@A| DCD 0x200e9	; _SIHEntry_Keypad
	DCD	0x200e3
	DCD	0x200e4
	DCB	0xf
	DCB	0xf
	%	2
	DCD	0x4
	DCD	0x0
	DCD	0x0
	DCB	0x0
	DCB	0x0
	%	2
	DCD	0x0
|?_SIHEntry_GPIO@@3USIHEntry_t@@A| DCD 0x100c5		; _SIHEntry_GPIO
	DCD	0x100b1
	DCD	0x100b4
	DCB	0xff
	DCB	0xff
	%	2
	DCD	0x8
	DCD	0x100b2
	DCD	0x100b5
	DCB	0xff
	DCB	0xff
	%	2
	DCD	0x8
	DCD	0x100b3
	DCD	0x100b6
	DCB	0x3
	DCB	0x3
	%	2
	DCD	0x2
	DCD	0x0
	DCD	0x0
	DCB	0x0
	DCB	0x0
	%	2
	%	4
|?_SIHEntry_BCI@@3USIHEntry_t@@A| DCD 0x200c6		; _SIHEntry_BCI
	DCD	0x200b9
	DCD	0x200bb
	DCB	0xff
	DCB	0xff
	%	2
	DCD	0x8
	DCD	0x200ba
	DCD	0x200bc
	DCB	0xf
	DCB	0xf
	%	2
	DCD	0x4
	DCD	0x0
	DCD	0x0
	DCB	0x0
	DCB	0x0
	%	2
	%	4
|?_SIHEntry_MADC@@3USIHEntry_t@@A| DCD 0x20067		; _SIHEntry_MADC
	DCD	0x20061
	DCD	0x20062
	DCB	0xf
	DCB	0xf
	%	2
	DCD	0x4
	DCD	0x0
	DCD	0x0
	DCB	0x0
	DCB	0x0
	%	2
	DCD	0x0
|?_SIHEntry_Power@@3USIHEntry_t@@A| DCD 0x30035		; _SIHEntry_Power
	DCD	0x3002e
	DCD	0x3002f
	DCB	0xff
	DCB	0xff
	%	2
	DCD	0x8
	DCD	0x0
	DCD	0x0
	DCB	0x0
	DCB	0x0
	%	2
	%	4
|?_SIHEntry_USB@@3USIHEntry_t@@A| DCD 0x0		; _SIHEntry_USB
	DCD	0x13
	DCD	0xd
	DCB	0x1e
	DCB	0x0
	%	2
	DCD	0x8
	DCD	0x13
	DCD	0x10
	DCB	0x1e
	DCB	0x0
	%	2
	DCD	0x8
	DCD	0x8c
	DCD	0x86
	DCB	0x0
	DCB	0x0
	%	2
	DCD	0x8
	DCD	0x8c
	DCD	0x89
	DCB	0x0
	DCB	0x0
	%	2
	DCD	0x8
	DCD	0x0
	DCD	0x0
	DCB	0x0
	DCB	0x0
	%	2
	DCD	0x0
|s_pSIHEntries| DCD |?_SIHEntry_GPIO@@3USIHEntry_t@@A|
	DCD	|?_SIHEntry_Keypad@@3USIHEntry_t@@A|
	DCD	|?_SIHEntry_BCI@@3USIHEntry_t@@A|
	DCD	|?_SIHEntry_MADC@@3USIHEntry_t@@A|
	DCD	|?_SIHEntry_USB@@3USIHEntry_t@@A|
	DCD	|?_SIHEntry_Power@@3USIHEntry_t@@A|
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|DEVICE_IFC_TWL_GUID| DCD 0xdef0a04b
	DCW	0xb967
	DCW	0x43db
	DCB	0x95
	DCB	0x9e
	DCB	0xd9
	DCB	0xfc
	DCB	0x62
	DCB	0x25
	DCB	0xcd
	DCB	0xeb
|s_deviceRegParams| DCD |??_C@_19IAPNKDAH@?$AAG?$AAp?$AAi?$AAo?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x8
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xc
	DCD	0x4
	DCD	0x64
	EXPORT	|?GetFirstEventByGroup@@YAPAPAXPAUDevice_t@@K@Z| ; GetFirstEventByGroup

  00000			 AREA	 |.pdata|, PDATA
|$T37149| DCD	|$LN21@GetFirstEv|
	DCD	0x40003304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\driver\tps659xx.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetFirstEventByGroup@@YAPAPAXPAUDevice_t@@K@Z| PROC ; GetFirstEventByGroup

; 248  : {

  00000		 |$LN21@GetFirstEv|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M37146|

; 249  :     HANDLE *pEvent = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 250  :     switch (group)

  00018	e59d3018	 ldr         r3, [sp, #0x18]
  0001c	e58d3008	 str         r3, [sp, #8]
  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e3530005	 cmp         r3, #5
  00028	8a000021	 bhi         |$LN7@GetFirstEv|
  0002c	e59d2008	 ldr         r2, [sp, #8]
  00030	e1a03102	 mov         r3, r2, lsl #2
  00034	e083300f	 add         r3, r3, pc
  00038	e5933004	 ldr         r3, [r3, #4]
  0003c	e08ff003	 add         pc, pc, r3
  00040		 |$LN12@GetFirstEv|
  00040		 |$LN11@GetFirstEv|
  00040		 |$LN13@GetFirstEv|
  00040	00000014	 DCD         0x14
  00044		 |$LN14@GetFirstEv|
  00044	00000024	 DCD         0x24
  00048		 |$LN15@GetFirstEv|
  00048	00000034	 DCD         0x34
  0004c		 |$LN16@GetFirstEv|
  0004c	00000044	 DCD         0x44
  00050		 |$LN17@GetFirstEv|
  00050	00000054	 DCD         0x54
  00054		 |$LN18@GetFirstEv|
  00054	00000064	 DCD         0x64
  00058		 |$LN6@GetFirstEv|

; 251  :         {
; 252  :         case 0:
; 253  :             pEvent = pDevice->hSetIntrEvent + TWL_ARRAYINDEX(TWL_INTR_GPIO_0);

  00058	e59d3014	 ldr         r3, [sp, #0x14]
  0005c	e28330a8	 add         r3, r3, #0xA8
  00060	e58d3000	 str         r3, [sp]

; 254  :             break;

  00064	ea000012	 b           |$LN7@GetFirstEv|
  00068		 |$LN5@GetFirstEv|

; 255  :         case 1:
; 256  :             pEvent = pDevice->hSetIntrEvent + TWL_ARRAYINDEX(TWL_INTR_ITKPI);

  00068	e59d3014	 ldr         r3, [sp, #0x14]
  0006c	e28330f0	 add         r3, r3, #0xF0
  00070	e58d3000	 str         r3, [sp]

; 257  :             break;

  00074	ea00000e	 b           |$LN7@GetFirstEv|
  00078		 |$LN4@GetFirstEv|

; 258  :         case 2:
; 259  :             pEvent = pDevice->hSetIntrEvent + TWL_ARRAYINDEX(TWL_INTR_WOVF);

  00078	e59d3014	 ldr         r3, [sp, #0x14]
  0007c	e2833068	 add         r3, r3, #0x68
  00080	e58d3000	 str         r3, [sp]

; 260  :             break;

  00084	ea00000a	 b           |$LN7@GetFirstEv|
  00088		 |$LN3@GetFirstEv|

; 261  :         case 3:
; 262  :             pEvent = pDevice->hSetIntrEvent + TWL_ARRAYINDEX(TWL_INTR_MADC_RT);

  00088	e59d3014	 ldr         r3, [sp, #0x14]
  0008c	e2833098	 add         r3, r3, #0x98
  00090	e58d3000	 str         r3, [sp]

; 263  :             break;

  00094	ea000006	 b           |$LN7@GetFirstEv|
  00098		 |$LN2@GetFirstEv|

; 264  :         case 4:
; 265  :             pEvent = pDevice->hSetIntrEvent + TWL_ARRAYINDEX(TWL_INTR_USB_RISE_IDGND);

  00098	e59d3014	 ldr         r3, [sp, #0x14]
  0009c	e2833c01	 add         r3, r3, #1, 24
  000a0	e58d3000	 str         r3, [sp]

; 266  :             break;

  000a4	ea000002	 b           |$LN7@GetFirstEv|
  000a8		 |$LN1@GetFirstEv|

; 267  :         case 5:
; 268  :             pEvent = pDevice->hSetIntrEvent + TWL_ARRAYINDEX(TWL_INTR_PWRON);

  000a8	e59d3014	 ldr         r3, [sp, #0x14]
  000ac	e2833048	 add         r3, r3, #0x48
  000b0	e58d3000	 str         r3, [sp]
  000b4		 |$LN7@GetFirstEv|

; 269  :             break;
; 270  :         }
; 271  :     
; 272  :     return pEvent;

  000b4	e59d3000	 ldr         r3, [sp]
  000b8	e58d3004	 str         r3, [sp, #4]

; 273  : }

  000bc	e59d0004	 ldr         r0, [sp, #4]
  000c0	e28dd00c	 add         sp, sp, #0xC
  000c4	e89d6000	 ldmia       sp, {sp, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M37147|

			 ENDP  ; |?GetFirstEventByGroup@@YAPAPAXPAUDevice_t@@K@Z|, GetFirstEventByGroup

	EXPORT	|?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|	; ReadRegs
	IMPORT	|LeaveCriticalSection|
	IMPORT	|I2CRead|
	IMPORT	|I2CSetSlaveAddress|
	IMPORT	|BSPGetTritonSlaveAddress|
	IMPORT	|EnterCriticalSection|

  00008			 AREA	 |.pdata|, PDATA
|$T37155| DCD	|$LN8@ReadRegs|
	DCD	0x40004404
; Function compile flags: /Odtp

  000cc			 AREA	 |.text|, CODE, ARM

  000cc		 |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z| PROC ; ReadRegs

; 289  : {

  000cc		 |$LN8@ReadRegs|
  000cc	e1a0c00d	 mov         r12, sp
  000d0	e92d000f	 stmdb       sp!, {r0 - r3}
  000d4	e92d5000	 stmdb       sp!, {r12, lr}
  000d8	e24dd010	 sub         sp, sp, #0x10
  000dc		 |$M37152|

; 290  :     BOOL rc = FALSE;

  000dc	e3a03000	 mov         r3, #0
  000e0	e58d3000	 str         r3, [sp]

; 291  : 
; 292  :     EnterCriticalSection(&pDevice->cs);

  000e4	e59d3018	 ldr         r3, [sp, #0x18]
  000e8	e2830018	 add         r0, r3, #0x18
  000ec	eb000000	 bl          EnterCriticalSection

; 293  :     // set slave address if necessary
; 294  :     if (pDevice->slaveAddress != HIWORD(address))

  000f0	e59d3018	 ldr         r3, [sp, #0x18]
  000f4	e283102c	 add         r1, r3, #0x2C
  000f8	e59d301c	 ldr         r3, [sp, #0x1C]
  000fc	e1a03823	 mov         r3, r3, lsr #16
  00100	e1a02803	 mov         r2, r3, lsl #16
  00104	e1a02822	 mov         r2, r2, lsr #16
  00108	e5913000	 ldr         r3, [r1]
  0010c	e1530002	 cmp         r3, r2
  00110	0a000017	 beq         |$LN3@ReadRegs|

; 295  :         {
; 296  :         I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress() | HIWORD(address));        

  00114	eb000000	 bl          BSPGetTritonSlaveAddress
  00118	e1a03800	 mov         r3, r0, lsl #16
  0011c	e1a03823	 mov         r3, r3, lsr #16
  00120	e1cd30b8	 strh        r3, [sp, #8]
  00124	e1dd30b8	 ldrh        r3, [sp, #8]
  00128	e1a02003	 mov         r2, r3
  0012c	e59d301c	 ldr         r3, [sp, #0x1C]
  00130	e1a03823	 mov         r3, r3, lsr #16
  00134	e1a03803	 mov         r3, r3, lsl #16
  00138	e1a03823	 mov         r3, r3, lsr #16
  0013c	e1823003	 orr         r3, r2, r3
  00140	e1a01803	 mov         r1, r3, lsl #16
  00144	e1a01821	 mov         r1, r1, lsr #16
  00148	e59d3018	 ldr         r3, [sp, #0x18]
  0014c	e2833010	 add         r3, r3, #0x10
  00150	e5930000	 ldr         r0, [r3]
  00154	eb000000	 bl          I2CSetSlaveAddress

; 297  :         pDevice->slaveAddress = HIWORD(address);

  00158	e59d301c	 ldr         r3, [sp, #0x1C]
  0015c	e1a03823	 mov         r3, r3, lsr #16
  00160	e1a02803	 mov         r2, r3, lsl #16
  00164	e1a02822	 mov         r2, r2, lsr #16
  00168	e59d3018	 ldr         r3, [sp, #0x18]
  0016c	e283302c	 add         r3, r3, #0x2C
  00170	e5832000	 str         r2, [r3]
  00174		 |$LN3@ReadRegs|

; 298  :         }
; 299  : 
; 300  :     if (I2CRead(pDevice->hI2C, (UCHAR)address, pBuffer, size) != size)

  00174	e59d3024	 ldr         r3, [sp, #0x24]
  00178	e59d2020	 ldr         r2, [sp, #0x20]
  0017c	e59d101c	 ldr         r1, [sp, #0x1C]
  00180	e20110ff	 and         r1, r1, #0xFF
  00184	e59d0018	 ldr         r0, [sp, #0x18]
  00188	e2800010	 add         r0, r0, #0x10
  0018c	e5900000	 ldr         r0, [r0]
  00190	eb000000	 bl          I2CRead
  00194	e58d000c	 str         r0, [sp, #0xC]
  00198	e59d200c	 ldr         r2, [sp, #0xC]
  0019c	e59d3024	 ldr         r3, [sp, #0x24]
  001a0	e1520003	 cmp         r2, r3
  001a4	0a000001	 beq         |$LN2@ReadRegs|
  001a8	ea000002	 b           |$LN1@ReadRegs|

; 301  :         {
; 302  :         goto cleanUp;

  001ac	ea000001	 b           |$cleanUp$36453|
  001b0		 |$LN2@ReadRegs|

; 303  :         }
; 304  :     
; 305  :     // We succceded
; 306  :     rc = TRUE;

  001b0	e3a03001	 mov         r3, #1
  001b4	e58d3000	 str         r3, [sp]
  001b8		 |$LN1@ReadRegs|
  001b8		 |$cleanUp$36453|

; 307  : 
; 308  : cleanUp:    
; 309  :     LeaveCriticalSection(&pDevice->cs);

  001b8	e59d3018	 ldr         r3, [sp, #0x18]
  001bc	e2830018	 add         r0, r3, #0x18
  001c0	eb000000	 bl          LeaveCriticalSection

; 310  :     return rc;

  001c4	e59d3000	 ldr         r3, [sp]
  001c8	e58d3004	 str         r3, [sp, #4]

; 311  : }

  001cc	e59d0004	 ldr         r0, [sp, #4]
  001d0	e28dd010	 add         sp, sp, #0x10
  001d4	e89d6000	 ldmia       sp, {sp, lr}
  001d8	e12fff1e	 bx          lr
  001dc		 |$M37153|

			 ENDP  ; |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|, ReadRegs

	EXPORT	|?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|	; WriteRegs
	IMPORT	|I2CWrite|

  00010			 AREA	 |.pdata|, PDATA
|$T37161| DCD	|$LN8@WriteRegs|
	DCD	0x40004404
; Function compile flags: /Odtp

  001dc			 AREA	 |.text|, CODE, ARM

  001dc		 |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z| PROC ; WriteRegs

; 327  : {

  001dc		 |$LN8@WriteRegs|
  001dc	e1a0c00d	 mov         r12, sp
  001e0	e92d000f	 stmdb       sp!, {r0 - r3}
  001e4	e92d5000	 stmdb       sp!, {r12, lr}
  001e8	e24dd010	 sub         sp, sp, #0x10
  001ec		 |$M37158|

; 328  :     BOOL rc = FALSE;

  001ec	e3a03000	 mov         r3, #0
  001f0	e58d3000	 str         r3, [sp]

; 329  : 
; 330  :     EnterCriticalSection(&pDevice->cs);

  001f4	e59d3018	 ldr         r3, [sp, #0x18]
  001f8	e2830018	 add         r0, r3, #0x18
  001fc	eb000000	 bl          EnterCriticalSection

; 331  : 
; 332  :     // set slave address if necessary
; 333  :     if (pDevice->slaveAddress != HIWORD(address))

  00200	e59d3018	 ldr         r3, [sp, #0x18]
  00204	e283102c	 add         r1, r3, #0x2C
  00208	e59d301c	 ldr         r3, [sp, #0x1C]
  0020c	e1a03823	 mov         r3, r3, lsr #16
  00210	e1a02803	 mov         r2, r3, lsl #16
  00214	e1a02822	 mov         r2, r2, lsr #16
  00218	e5913000	 ldr         r3, [r1]
  0021c	e1530002	 cmp         r3, r2
  00220	0a000017	 beq         |$LN3@WriteRegs|

; 334  :         {
; 335  :         I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress() | HIWORD(address));        

  00224	eb000000	 bl          BSPGetTritonSlaveAddress
  00228	e1a03800	 mov         r3, r0, lsl #16
  0022c	e1a03823	 mov         r3, r3, lsr #16
  00230	e1cd30b8	 strh        r3, [sp, #8]
  00234	e1dd30b8	 ldrh        r3, [sp, #8]
  00238	e1a02003	 mov         r2, r3
  0023c	e59d301c	 ldr         r3, [sp, #0x1C]
  00240	e1a03823	 mov         r3, r3, lsr #16
  00244	e1a03803	 mov         r3, r3, lsl #16
  00248	e1a03823	 mov         r3, r3, lsr #16
  0024c	e1823003	 orr         r3, r2, r3
  00250	e1a01803	 mov         r1, r3, lsl #16
  00254	e1a01821	 mov         r1, r1, lsr #16
  00258	e59d3018	 ldr         r3, [sp, #0x18]
  0025c	e2833010	 add         r3, r3, #0x10
  00260	e5930000	 ldr         r0, [r3]
  00264	eb000000	 bl          I2CSetSlaveAddress

; 336  :         pDevice->slaveAddress = HIWORD(address);

  00268	e59d301c	 ldr         r3, [sp, #0x1C]
  0026c	e1a03823	 mov         r3, r3, lsr #16
  00270	e1a02803	 mov         r2, r3, lsl #16
  00274	e1a02822	 mov         r2, r2, lsr #16
  00278	e59d3018	 ldr         r3, [sp, #0x18]
  0027c	e283302c	 add         r3, r3, #0x2C
  00280	e5832000	 str         r2, [r3]
  00284		 |$LN3@WriteRegs|

; 337  :         }
; 338  : 
; 339  :     if (I2CWrite(pDevice->hI2C, (UCHAR)address, pBuffer, size) != size)

  00284	e59d3024	 ldr         r3, [sp, #0x24]
  00288	e59d2020	 ldr         r2, [sp, #0x20]
  0028c	e59d101c	 ldr         r1, [sp, #0x1C]
  00290	e20110ff	 and         r1, r1, #0xFF
  00294	e59d0018	 ldr         r0, [sp, #0x18]
  00298	e2800010	 add         r0, r0, #0x10
  0029c	e5900000	 ldr         r0, [r0]
  002a0	eb000000	 bl          I2CWrite
  002a4	e58d000c	 str         r0, [sp, #0xC]
  002a8	e59d200c	 ldr         r2, [sp, #0xC]
  002ac	e59d3024	 ldr         r3, [sp, #0x24]
  002b0	e1520003	 cmp         r2, r3
  002b4	0a000001	 beq         |$LN2@WriteRegs|
  002b8	ea000002	 b           |$LN1@WriteRegs|

; 340  :         {
; 341  :         goto cleanUp;

  002bc	ea000001	 b           |$cleanUp$36471|
  002c0		 |$LN2@WriteRegs|

; 342  :         }   
; 343  : 
; 344  :     // We succceded
; 345  :     rc = TRUE;

  002c0	e3a03001	 mov         r3, #1
  002c4	e58d3000	 str         r3, [sp]
  002c8		 |$LN1@WriteRegs|
  002c8		 |$cleanUp$36471|

; 346  : 
; 347  : cleanUp:  
; 348  :     LeaveCriticalSection(&pDevice->cs);

  002c8	e59d3018	 ldr         r3, [sp, #0x18]
  002cc	e2830018	 add         r0, r3, #0x18
  002d0	eb000000	 bl          LeaveCriticalSection

; 349  :     return rc;

  002d4	e59d3000	 ldr         r3, [sp]
  002d8	e58d3004	 str         r3, [sp, #4]

; 350  : }

  002dc	e59d0004	 ldr         r0, [sp, #4]
  002e0	e28dd010	 add         sp, sp, #0x10
  002e4	e89d6000	 ldmia       sp, {sp, lr}
  002e8	e12fff1e	 bx          lr
  002ec		 |$M37159|

			 ENDP  ; |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|, WriteRegs

	EXPORT	|SetEvent|
	EXPORT	|??_C@_1OK@GMCJEOHN@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa?$AAt?$AAr?$AAi?$AAx?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?3?$AA_?$AAn?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM@| [ DATA ] ; `string'
	EXPORT	|?WriteKeypadMatrixQueue@@YAHQAEPAX@Z|	; WriteKeypadMatrixQueue
	IMPORT	|InterlockedIncrement|
	IMPORT	|memcpy|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|__rt_udiv|

  00018			 AREA	 |.pdata|, PDATA
|$T37176| DCD	|$LN10@WriteKeypa|
	DCD	0x40005d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1OK@GMCJEOHN@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa?$AAt?$AAr?$AAi?$AAx?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?3?$AA_?$AAn?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, "M", 0x0, "a"
	DCB	0x0, "t", 0x0, "r", 0x0, "i", 0x0, "x", 0x0, "Q", 0x0, "u"
	DCB	0x0, "e", 0x0, "u", 0x0, "e", 0x0, ":", 0x0, "_", 0x0, "n"
	DCB	0x0, "K", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, "M", 0x0, "a", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "x"
	DCB	0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, "C"
	DCB	0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  002ec			 AREA	 |.text|, CODE, ARM

  002ec		 |?WriteKeypadMatrixQueue@@YAHQAEPAX@Z| PROC ; WriteKeypadMatrixQueue

; 363  : {    

  002ec		 |$LN10@WriteKeypa|
  002ec	e1a0c00d	 mov         r12, sp
  002f0	e92d0003	 stmdb       sp!, {r0, r1}
  002f4	e92d5000	 stmdb       sp!, {r12, lr}
  002f8	e24dd038	 sub         sp, sp, #0x38
  002fc		 |$M37173|

; 364  :     DEBUGMSG(ZONE_INFO, 
; 365  :         (L"WriteKeypadMatrixQueue:_nKeypadMatrixQueueCount=%d, "
; 366  :          L"0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X\r\n",
; 367  :          _nKeypadMatrixQueueCount, matrix[0], matrix[1], matrix[2], 
; 368  :          matrix[3], matrix[4], matrix[5], matrix[6], matrix[7]
; 369  :         ));

  002fc	e59f3158	 ldr         r3, [pc, #0x158]
  00300	e5933440	 ldr         r3, [r3, #0x440]
  00304	e3130010	 tst         r3, #0x10
  00308	0a000023	 beq         |$LN6@WriteKeypa|
  0030c	e59d3040	 ldr         r3, [sp, #0x40]
  00310	e2833007	 add         r3, r3, #7
  00314	e5d33000	 ldrb        r3, [r3]
  00318	e58d3014	 str         r3, [sp, #0x14]
  0031c	e59d3040	 ldr         r3, [sp, #0x40]
  00320	e2833006	 add         r3, r3, #6
  00324	e5d33000	 ldrb        r3, [r3]
  00328	e58d3010	 str         r3, [sp, #0x10]
  0032c	e59d3040	 ldr         r3, [sp, #0x40]
  00330	e2833005	 add         r3, r3, #5
  00334	e5d33000	 ldrb        r3, [r3]
  00338	e58d300c	 str         r3, [sp, #0xC]
  0033c	e59d3040	 ldr         r3, [sp, #0x40]
  00340	e2833004	 add         r3, r3, #4
  00344	e5d33000	 ldrb        r3, [r3]
  00348	e58d3008	 str         r3, [sp, #8]
  0034c	e59d3040	 ldr         r3, [sp, #0x40]
  00350	e2833003	 add         r3, r3, #3
  00354	e5d33000	 ldrb        r3, [r3]
  00358	e58d3004	 str         r3, [sp, #4]
  0035c	e59d3040	 ldr         r3, [sp, #0x40]
  00360	e2833002	 add         r3, r3, #2
  00364	e5d33000	 ldrb        r3, [r3]
  00368	e58d3000	 str         r3, [sp]
  0036c	e59d3040	 ldr         r3, [sp, #0x40]
  00370	e2833001	 add         r3, r3, #1
  00374	e5d33000	 ldrb        r3, [r3]
  00378	e59d2040	 ldr         r2, [sp, #0x40]
  0037c	e5d22000	 ldrb        r2, [r2]
  00380	e59f10c4	 ldr         r1, [pc, #0xC4]
  00384	e5911000	 ldr         r1, [r1]
  00388	e59f00c8	 ldr         r0, [pc, #0xC8]
  0038c	eb000000	 bl          NKDbgPrintfW
  00390	e3a03001	 mov         r3, #1
  00394	e58d3034	 str         r3, [sp, #0x34]
  00398	ea000001	 b           |$LN7@WriteKeypa|
  0039c		 |$LN6@WriteKeypa|
  0039c	e3a03000	 mov         r3, #0
  003a0	e58d3034	 str         r3, [sp, #0x34]
  003a4		 |$LN7@WriteKeypa|

; 370  :     
; 371  :     if (_nKeypadMatrixQueueCount < MATRIX_QUEUE_SIZE)

  003a4	e59f30a0	 ldr         r3, [pc, #0xA0]
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e3530010	 cmp         r3, #0x10
  003b0	aa000017	 bge         |$LN3@WriteKeypa|

; 372  :         {
; 373  :         memcpy(_rgKeypadMatrixQueue[_nKeypadMatrixQueueTail], matrix,  TWL_KEYPAD_ROWS);

  003b4	e3a02008	 mov         r2, #8
  003b8	e59d1040	 ldr         r1, [sp, #0x40]
  003bc	e59f308c	 ldr         r3, [pc, #0x8C]
  003c0	e593e000	 ldr         lr, [r3]
  003c4	e3a03008	 mov         r3, #8
  003c8	e000039e	 mul         r0, lr, r3
  003cc	e59f3080	 ldr         r3, [pc, #0x80]
  003d0	e0830000	 add         r0, r3, r0
  003d4	eb000000	 bl          memcpy

; 374  :         _nKeypadMatrixQueueTail = (_nKeypadMatrixQueueTail + 1) % MATRIX_QUEUE_SIZE;

  003d8	e59f3070	 ldr         r3, [pc, #0x70]
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e2831001	 add         r1, r3, #1
  003e4	e3a00010	 mov         r0, #0x10
  003e8	eb000000	 bl          __rt_udiv
  003ec	e59f305c	 ldr         r3, [pc, #0x5C]
  003f0	e5831000	 str         r1, [r3]

; 375  :         
; 376  :         InterlockedIncrement(&_nKeypadMatrixQueueCount);

  003f4	e59f0050	 ldr         r0, [pc, #0x50]
  003f8	eb000000	 bl          InterlockedIncrement

; 377  :         
; 378  :         SetEvent(hKeypadEvent);

  003fc	e59d0044	 ldr         r0, [sp, #0x44]
  00400	eb000000	 bl          SetEvent

; 379  :         return TRUE;

  00404	e3a03001	 mov         r3, #1
  00408	e58d3030	 str         r3, [sp, #0x30]
  0040c	ea00000a	 b           |$LN4@WriteKeypa|
  00410	ea000007	 b           |$LN2@WriteKeypa|
  00414		 |$LN3@WriteKeypa|

; 380  :         }
; 381  :     else if (hKeypadEvent != NULL)

  00414	e59d3044	 ldr         r3, [sp, #0x44]
  00418	e3530000	 cmp         r3, #0
  0041c	0a000004	 beq         |$LN1@WriteKeypa|

; 382  :         {
; 383  :         // keypad matrix queue is full so just signal keypad listener
; 384  :         // and throw-away the character
; 385  :         SetEvent(hKeypadEvent);

  00420	e59d0044	 ldr         r0, [sp, #0x44]
  00424	eb000000	 bl          SetEvent

; 386  :         return TRUE;

  00428	e3a03001	 mov         r3, #1
  0042c	e58d3030	 str         r3, [sp, #0x30]
  00430	ea000001	 b           |$LN4@WriteKeypa|
  00434		 |$LN1@WriteKeypa|
  00434		 |$LN2@WriteKeypa|

; 387  :         }
; 388  : 
; 389  :     
; 390  :     return FALSE;

  00434	e3a03000	 mov         r3, #0
  00438	e58d3030	 str         r3, [sp, #0x30]
  0043c		 |$LN4@WriteKeypa|

; 391  : }

  0043c	e59d0030	 ldr         r0, [sp, #0x30]
  00440	e28dd038	 add         sp, sp, #0x38
  00444	e89d6000	 ldmia       sp, {sp, lr}
  00448	e12fff1e	 bx          lr
  0044c		 |$LN11@WriteKeypa|
  0044c		 |$LN12@WriteKeypa|
  0044c	00000000	 DCD         |?_nKeypadMatrixQueueCount@@3JA|
  00450		 |$LN13@WriteKeypa|
  00450	00000000	 DCD         |?_nKeypadMatrixQueueTail@@3KA|
  00454		 |$LN14@WriteKeypa|
  00454	00000000	 DCD         |?_rgKeypadMatrixQueue@@3PAY07EA|
  00458		 |$LN15@WriteKeypa|
  00458	00000000	 DCD         |??_C@_1OK@GMCJEOHN@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa?$AAt?$AAr?$AAi?$AAx?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?3?$AA_?$AAn?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM@|
  0045c		 |$LN16@WriteKeypa|
  0045c	00000000	 DCD         |dpCurSettings|
  00460		 |$M37174|

			 ENDP  ; |?WriteKeypadMatrixQueue@@YAHQAEPAX@Z|, WriteKeypadMatrixQueue

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T37188| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M37185|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M37186|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1OI@DEJFGDKH@?$AAR?$AAe?$AAa?$AAd?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa?$AAt?$AAr?$AAi?$AAx?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?3?$AA_?$AAn?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa@| [ DATA ] ; `string'
	EXPORT	|?ReadKeypadMatrixQueue@@YAHQAEPAX@Z|	; ReadKeypadMatrixQueue
	IMPORT	|InterlockedDecrement|

  00020			 AREA	 |.pdata|, PDATA
|$T37204| DCD	|$LN9@ReadKeypad|
	DCD	0x40005804
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\driver\tps659xx.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1OI@DEJFGDKH@?$AAR?$AAe?$AAa?$AAd?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa?$AAt?$AAr?$AAi?$AAx?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?3?$AA_?$AAn?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "K", 0x0, "e", 0x0, "y"
	DCB	0x0, "p", 0x0, "a", 0x0, "d", 0x0, "M", 0x0, "a", 0x0, "t"
	DCB	0x0, "r", 0x0, "i", 0x0, "x", 0x0, "Q", 0x0, "u", 0x0, "e"
	DCB	0x0, "u", 0x0, "e", 0x0, ":", 0x0, "_", 0x0, "n", 0x0, "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, "M"
	DCB	0x0, "a", 0x0, "t", 0x0, "r", 0x0, "i", 0x0, "x", 0x0, "Q"
	DCB	0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, "C", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00460			 AREA	 |.text|, CODE, ARM

  00460		 |?ReadKeypadMatrixQueue@@YAHQAEPAX@Z| PROC ; ReadKeypadMatrixQueue

; 404  : {

  00460		 |$LN9@ReadKeypad|
  00460	e1a0c00d	 mov         r12, sp
  00464	e92d0003	 stmdb       sp!, {r0, r1}
  00468	e92d5000	 stmdb       sp!, {r12, lr}
  0046c	e24dd038	 sub         sp, sp, #0x38
  00470		 |$M37201|

; 405  :     DEBUGMSG(ZONE_INFO, 
; 406  :         (L"ReadKeypadMatrixQueue:_nKeypadMatrixQueueCount=%d, "
; 407  :          L"0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X\r\n",
; 408  :          _nKeypadMatrixQueueCount, matrix[0], matrix[1], matrix[2], 
; 409  :          matrix[3], matrix[4], matrix[5], matrix[6], matrix[7]
; 410  :         ));

  00470	e59f3144	 ldr         r3, [pc, #0x144]
  00474	e5933440	 ldr         r3, [r3, #0x440]
  00478	e3130010	 tst         r3, #0x10
  0047c	0a000023	 beq         |$LN5@ReadKeypad|
  00480	e59d3040	 ldr         r3, [sp, #0x40]
  00484	e2833007	 add         r3, r3, #7
  00488	e5d33000	 ldrb        r3, [r3]
  0048c	e58d3014	 str         r3, [sp, #0x14]
  00490	e59d3040	 ldr         r3, [sp, #0x40]
  00494	e2833006	 add         r3, r3, #6
  00498	e5d33000	 ldrb        r3, [r3]
  0049c	e58d3010	 str         r3, [sp, #0x10]
  004a0	e59d3040	 ldr         r3, [sp, #0x40]
  004a4	e2833005	 add         r3, r3, #5
  004a8	e5d33000	 ldrb        r3, [r3]
  004ac	e58d300c	 str         r3, [sp, #0xC]
  004b0	e59d3040	 ldr         r3, [sp, #0x40]
  004b4	e2833004	 add         r3, r3, #4
  004b8	e5d33000	 ldrb        r3, [r3]
  004bc	e58d3008	 str         r3, [sp, #8]
  004c0	e59d3040	 ldr         r3, [sp, #0x40]
  004c4	e2833003	 add         r3, r3, #3
  004c8	e5d33000	 ldrb        r3, [r3]
  004cc	e58d3004	 str         r3, [sp, #4]
  004d0	e59d3040	 ldr         r3, [sp, #0x40]
  004d4	e2833002	 add         r3, r3, #2
  004d8	e5d33000	 ldrb        r3, [r3]
  004dc	e58d3000	 str         r3, [sp]
  004e0	e59d3040	 ldr         r3, [sp, #0x40]
  004e4	e2833001	 add         r3, r3, #1
  004e8	e5d33000	 ldrb        r3, [r3]
  004ec	e59d2040	 ldr         r2, [sp, #0x40]
  004f0	e5d22000	 ldrb        r2, [r2]
  004f4	e59f10b0	 ldr         r1, [pc, #0xB0]
  004f8	e5911000	 ldr         r1, [r1]
  004fc	e59f00b4	 ldr         r0, [pc, #0xB4]
  00500	eb000000	 bl          NKDbgPrintfW
  00504	e3a03001	 mov         r3, #1
  00508	e58d3034	 str         r3, [sp, #0x34]
  0050c	ea000001	 b           |$LN6@ReadKeypad|
  00510		 |$LN5@ReadKeypad|
  00510	e3a03000	 mov         r3, #0
  00514	e58d3034	 str         r3, [sp, #0x34]
  00518		 |$LN6@ReadKeypad|

; 411  :     
; 412  :     if (_nKeypadMatrixQueueCount > 0)

  00518	e59f308c	 ldr         r3, [pc, #0x8C]
  0051c	e5933000	 ldr         r3, [r3]
  00520	e3530000	 cmp         r3, #0
  00524	da00001a	 ble         |$LN2@ReadKeypad|

; 413  :         {
; 414  :         memcpy(matrix, _rgKeypadMatrixQueue[_nKeypadMatrixQueueHead], TWL_KEYPAD_ROWS);

  00528	e3a02008	 mov         r2, #8
  0052c	e59f307c	 ldr         r3, [pc, #0x7C]
  00530	e5930000	 ldr         r0, [r3]
  00534	e3a03008	 mov         r3, #8
  00538	e0010390	 mul         r1, r0, r3
  0053c	e59f3070	 ldr         r3, [pc, #0x70]
  00540	e0831001	 add         r1, r3, r1
  00544	e59d0040	 ldr         r0, [sp, #0x40]
  00548	eb000000	 bl          memcpy

; 415  :         _nKeypadMatrixQueueHead = (_nKeypadMatrixQueueHead + 1) % MATRIX_QUEUE_SIZE;

  0054c	e59f305c	 ldr         r3, [pc, #0x5C]
  00550	e5933000	 ldr         r3, [r3]
  00554	e2831001	 add         r1, r3, #1
  00558	e3a00010	 mov         r0, #0x10
  0055c	eb000000	 bl          __rt_udiv
  00560	e59f3048	 ldr         r3, [pc, #0x48]
  00564	e5831000	 str         r1, [r3]

; 416  :         
; 417  :         InterlockedDecrement(&_nKeypadMatrixQueueCount);

  00568	e59f003c	 ldr         r0, [pc, #0x3C]
  0056c	eb000000	 bl          InterlockedDecrement

; 418  : 
; 419  :         // indicate more data is available
; 420  :         if (_nKeypadMatrixQueueCount > 0) SetEvent(hKeypadEvent);

  00570	e59f3034	 ldr         r3, [pc, #0x34]
  00574	e5933000	 ldr         r3, [r3]
  00578	e3530000	 cmp         r3, #0
  0057c	da000001	 ble         |$LN1@ReadKeypad|
  00580	e59d0044	 ldr         r0, [sp, #0x44]
  00584	eb000000	 bl          SetEvent
  00588		 |$LN1@ReadKeypad|

; 421  :         return TRUE;

  00588	e3a03001	 mov         r3, #1
  0058c	e58d3030	 str         r3, [sp, #0x30]
  00590	ea000001	 b           |$LN3@ReadKeypad|
  00594		 |$LN2@ReadKeypad|

; 422  :         }
; 423  :     
; 424  :     // return number of items in the queue
; 425  :     return FALSE;

  00594	e3a03000	 mov         r3, #0
  00598	e58d3030	 str         r3, [sp, #0x30]
  0059c		 |$LN3@ReadKeypad|

; 426  : }

  0059c	e59d0030	 ldr         r0, [sp, #0x30]
  005a0	e28dd038	 add         sp, sp, #0x38
  005a4	e89d6000	 ldmia       sp, {sp, lr}
  005a8	e12fff1e	 bx          lr
  005ac		 |$LN10@ReadKeypad|
  005ac		 |$LN11@ReadKeypad|
  005ac	00000000	 DCD         |?_nKeypadMatrixQueueCount@@3JA|
  005b0		 |$LN12@ReadKeypad|
  005b0	00000000	 DCD         |?_nKeypadMatrixQueueHead@@3KA|
  005b4		 |$LN13@ReadKeypad|
  005b4	00000000	 DCD         |?_rgKeypadMatrixQueue@@3PAY07EA|
  005b8		 |$LN14@ReadKeypad|
  005b8	00000000	 DCD         |??_C@_1OI@DEJFGDKH@?$AAR?$AAe?$AAa?$AAd?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa?$AAt?$AAr?$AAi?$AAx?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?3?$AA_?$AAn?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAM?$AAa@|
  005bc		 |$LN15@ReadKeypad|
  005bc	00000000	 DCD         |dpCurSettings|
  005c0		 |$M37202|

			 ENDP  ; |?ReadKeypadMatrixQueue@@YAHQAEPAX@Z|, ReadKeypadMatrixQueue

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?SendPBMessage@@YAHPAUDevice_t@@EE@Z|	; SendPBMessage
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00028			 AREA	 |.pdata|, PDATA
|$T37221| DCD	|$LN11@SendPBMess|
	DCD	0xc0004b04

  00000			 AREA	 |.xdata|, DATA
|$T37217| DCD	0xffffffd8
; Function compile flags: /Odtp

  005c0			 AREA	 |.text|, CODE, ARM

  005c0	00000000	 DCD         |__GSHandlerCheck|
  005c4	00000000	 DCD         |$T37217|

  005c8		 |?SendPBMessage@@YAHPAUDevice_t@@EE@Z| PROC ; SendPBMessage

; 439  : {

  005c8		 |$LN11@SendPBMess|
  005c8	e1a0c00d	 mov         r12, sp
  005cc	e92d0007	 stmdb       sp!, {r0 - r2}
  005d0	e92d5000	 stmdb       sp!, {r12, lr}
  005d4	e24dd01c	 sub         sp, sp, #0x1C
  005d8		 |$M37218|
  005d8	e59f3110	 ldr         r3, [pc, #0x110]
  005dc	e5933000	 ldr         r3, [r3]
  005e0	e58d3008	 str         r3, [sp, #8]

; 440  :     UINT16 pb_message;
; 441  :     UINT8 data[5];
; 442  :     
; 443  :     data[0] = 0x02; // Enable I2C access to the Power Bus 

  005e4	e3a03002	 mov         r3, #2
  005e8	e5cd3000	 strb        r3, [sp]

; 444  :     if(!WriteRegs(pDevice, TWL_PB_CFG, data, 1))

  005ec	e3a03001	 mov         r3, #1
  005f0	e28d2000	 add         r2, sp, #0
  005f4	e3a01803	 mov         r1, #3, 16
  005f8	e381104a	 orr         r1, r1, #0x4A
  005fc	e59d0024	 ldr         r0, [sp, #0x24]
  00600	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|
  00604	e58d0010	 str         r0, [sp, #0x10]
  00608	e59d3010	 ldr         r3, [sp, #0x10]
  0060c	e3530000	 cmp         r3, #0
  00610	1a000001	 bne         |$LN6@SendPBMess|
  00614	ea00002d	 b           |$LN5@SendPBMess|

; 445  :         goto cleanUp;

  00618	ea00002c	 b           |$cleanUp$36499|
  0061c		 |$LN6@SendPBMess|

; 446  :     
; 447  :     // Form the message for VDAC 
; 448  :     pb_message = TwlTargetMessage(TWL_PROCESSOR_GRP1, power_res_id, res_state);

  0061c	e5dd3028	 ldrb        r3, [sp, #0x28]
  00620	e1a03203	 mov         r3, r3, lsl #4
  00624	e3832a02	 orr         r2, r3, #2, 20
  00628	e5dd302c	 ldrb        r3, [sp, #0x2C]
  0062c	e1823003	 orr         r3, r2, r3
  00630	e1a03803	 mov         r3, r3, lsl #16
  00634	e1a03823	 mov         r3, r3, lsr #16
  00638	e1cd30b6	 strh        r3, [sp, #6]

; 449  :     
; 450  :     // Extract the Message MSB 
; 451  :     data[0] = (UINT8) (pb_message >> 8);

  0063c	e1dd30b6	 ldrh        r3, [sp, #6]
  00640	e1a03443	 mov         r3, r3, asr #8
  00644	e20330ff	 and         r3, r3, #0xFF
  00648	e5cd3000	 strb        r3, [sp]

; 452  :     if(!WriteRegs(pDevice, TWL_PB_WORD_MSB, data, 1))

  0064c	e3a03001	 mov         r3, #1
  00650	e28d2000	 add         r2, sp, #0
  00654	e3a01803	 mov         r1, #3, 16
  00658	e381104b	 orr         r1, r1, #0x4B
  0065c	e59d0024	 ldr         r0, [sp, #0x24]
  00660	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|
  00664	e58d0014	 str         r0, [sp, #0x14]
  00668	e59d3014	 ldr         r3, [sp, #0x14]
  0066c	e3530000	 cmp         r3, #0
  00670	1a000001	 bne         |$LN4@SendPBMess|
  00674	ea000015	 b           |$LN3@SendPBMess|

; 453  :         goto cleanUp;

  00678	ea000014	 b           |$cleanUp$36499|
  0067c		 |$LN4@SendPBMess|

; 454  :     
; 455  :     // Extract the Message LSB 
; 456  :     data[0] = (UINT8) (pb_message & 0x00FF);

  0067c	e1dd30b6	 ldrh        r3, [sp, #6]
  00680	e20330ff	 and         r3, r3, #0xFF
  00684	e20330ff	 and         r3, r3, #0xFF
  00688	e5cd3000	 strb        r3, [sp]

; 457  :     if(!WriteRegs(pDevice, TWL_PB_WORD_LSB, data, 1))

  0068c	e3a03001	 mov         r3, #1
  00690	e28d2000	 add         r2, sp, #0
  00694	e3a01803	 mov         r1, #3, 16
  00698	e381104c	 orr         r1, r1, #0x4C
  0069c	e59d0024	 ldr         r0, [sp, #0x24]
  006a0	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|
  006a4	e58d0018	 str         r0, [sp, #0x18]
  006a8	e59d3018	 ldr         r3, [sp, #0x18]
  006ac	e3530000	 cmp         r3, #0
  006b0	1a000001	 bne         |$LN2@SendPBMess|
  006b4	ea000005	 b           |$LN1@SendPBMess|

; 458  :         goto cleanUp;

  006b8	ea000004	 b           |$cleanUp$36499|
  006bc		 |$LN2@SendPBMess|

; 459  :     
; 460  :     return (TRUE);

  006bc	e59d0008	 ldr         r0, [sp, #8]
  006c0	eb000000	 bl          __security_check_cookie
  006c4	e3a03001	 mov         r3, #1
  006c8	e58d300c	 str         r3, [sp, #0xC]
  006cc	ea000003	 b           |$LN7@SendPBMess|
  006d0		 |$LN1@SendPBMess|
  006d0		 |$LN3@SendPBMess|
  006d0		 |$LN5@SendPBMess|
  006d0		 |$cleanUp$36499|

; 461  :     
; 462  : cleanUp:
; 463  :     return FALSE;    

  006d0	e59d0008	 ldr         r0, [sp, #8]
  006d4	eb000000	 bl          __security_check_cookie
  006d8	e3a03000	 mov         r3, #0
  006dc	e58d300c	 str         r3, [sp, #0xC]
  006e0		 |$LN7@SendPBMess|

; 464  : }

  006e0	e59d000c	 ldr         r0, [sp, #0xC]
  006e4	e28dd01c	 add         sp, sp, #0x1C
  006e8	e89d6000	 ldmia       sp, {sp, lr}
  006ec	e12fff1e	 bx          lr
  006f0		 |$LN12@SendPBMess|
  006f0		 |$LN13@SendPBMess|
  006f0	00000000	 DCD         |__security_cookie|
  006f4		 |$M37219|

			 ENDP  ; |?SendPBMessage@@YAHPAUDevice_t@@EE@Z|, SendPBMessage

	EXPORT	|?InitializeHardware@@YAHPAUDevice_t@@@Z| ; InitializeHardware

  00030			 AREA	 |.pdata|, PDATA
|$T37229| DCD	|$LN5@Initialize|
	DCD	0x40001604
; Function compile flags: /Odtp

  006f4			 AREA	 |.text|, CODE, ARM

  006f4		 |?InitializeHardware@@YAHPAUDevice_t@@@Z| PROC ; InitializeHardware

; 477  : {

  006f4		 |$LN5@Initialize|
  006f4	e1a0c00d	 mov         r12, sp
  006f8	e92d0001	 stmdb       sp!, {r0}
  006fc	e92d5000	 stmdb       sp!, {r12, lr}
  00700	e24dd004	 sub         sp, sp, #4
  00704		 |$M37226|

; 478  :     // Enable LDO for T2 PHY
; 479  :     SendPBMessage(pDevice, TWL_VUSB_3V1_RES_ID, TWL_RES_ACTIVE);

  00704	e3a0200e	 mov         r2, #0xE
  00708	e3a01013	 mov         r1, #0x13
  0070c	e59d000c	 ldr         r0, [sp, #0xC]
  00710	eb000000	 bl          |?SendPBMessage@@YAHPAUDevice_t@@EE@Z|

; 480  :     SendPBMessage(pDevice, TWL_VUSB_1V5_RES_ID, TWL_RES_ACTIVE);

  00714	e3a0200e	 mov         r2, #0xE
  00718	e3a01011	 mov         r1, #0x11
  0071c	e59d000c	 ldr         r0, [sp, #0xC]
  00720	eb000000	 bl          |?SendPBMessage@@YAHPAUDevice_t@@EE@Z|

; 481  :     SendPBMessage(pDevice, TWL_VUSB_1V8_RES_ID, TWL_RES_ACTIVE);

  00724	e3a0200e	 mov         r2, #0xE
  00728	e3a01012	 mov         r1, #0x12
  0072c	e59d000c	 ldr         r0, [sp, #0xC]
  00730	eb000000	 bl          |?SendPBMessage@@YAHPAUDevice_t@@EE@Z|

; 482  : 
; 483  :     return TRUE;

  00734	e3a03001	 mov         r3, #1
  00738	e58d3000	 str         r3, [sp]

; 484  : }

  0073c	e59d0000	 ldr         r0, [sp]
  00740	e28dd004	 add         sp, sp, #4
  00744	e89d6000	 ldmia       sp, {sp, lr}
  00748	e12fff1e	 bx          lr
  0074c		 |$M37227|

			 ENDP  ; |?InitializeHardware@@YAHPAUDevice_t@@@Z|, InitializeHardware

	EXPORT	|??_C@_1HK@PFDOHPFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?ProcessSecondaryInterrupts_USB@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z| ; ProcessSecondaryInterrupts_USB
	IMPORT	|SetEventData|
	IMPORT	|Sleep|

  00038			 AREA	 |.pdata|, PDATA
|$T37239| DCD	|$LN9@ProcessSec|
	DCD	0xc0006504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@PFDOHPFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "d", 0x0, "a", 0x0, "r", 0x0, "y", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "s", 0x0, "_", 0x0, "U", 0x0, "S", 0x0, "B"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, ".", 0x0, 0x0
	DCB	0x0					; `string'

  00004			 AREA	 |.xdata|, DATA
|$T37235| DCD	0xffffffe0
; Function compile flags: /Odtp

  0074c			 AREA	 |.text|, CODE, ARM

  0074c	00000000	 DCD         |__GSHandlerCheck|
  00750	00000000	 DCD         |$T37235|

  00754		 |?ProcessSecondaryInterrupts_USB@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z| PROC ; ProcessSecondaryInterrupts_USB

; 498  : {    

  00754		 |$LN9@ProcessSec|
  00754	e1a0c00d	 mov         r12, sp
  00758	e92d0007	 stmdb       sp!, {r0 - r2}
  0075c	e92d5000	 stmdb       sp!, {r12, lr}
  00760	e24dd018	 sub         sp, sp, #0x18
  00764		 |$M37236|
  00764	e59f3178	 ldr         r3, [pc, #0x178]
  00768	e5933000	 ldr         r3, [r3]
  0076c	e58d300c	 str         r3, [sp, #0xC]

; 499  :     // PIH and SIH will be cleared by reading the LATCH registers.
; 500  :     // Since USB driver will handle all the possible interrupts,
; 501  :     // the interrupts bits are passed to usb driver by event data.
; 502  :     BYTE data[] = {0, 0, 0, 0, 0, 0};

  00770	e3a03000	 mov         r3, #0
  00774	e5cd3004	 strb        r3, [sp, #4]
  00778	e3a03000	 mov         r3, #0
  0077c	e5cd3005	 strb        r3, [sp, #5]
  00780	e3a03000	 mov         r3, #0
  00784	e5cd3006	 strb        r3, [sp, #6]
  00788	e3a03000	 mov         r3, #0
  0078c	e5cd3007	 strb        r3, [sp, #7]
  00790	e3a03000	 mov         r3, #0
  00794	e5cd3008	 strb        r3, [sp, #8]
  00798	e3a03000	 mov         r3, #0
  0079c	e5cd3009	 strb        r3, [sp, #9]

; 503  : 
; 504  :     UNREFERENCED_PARAMETER(pSIHEntry);
; 505  : 
; 506  :     // Debounce for 5 ms
; 507  :     Sleep(5);

  007a0	e3a00005	 mov         r0, #5
  007a4	eb000000	 bl          Sleep

; 508  :     DWORD ed = 0;

  007a8	e3a03000	 mov         r3, #0
  007ac	e58d3000	 str         r3, [sp]

; 509  : 
; 510  :     // Clear all intrrupts
; 511  :     ReadRegs(pDevice, TWL_USB_INT_LATCH, &data[0], 1);

  007b0	e3a03001	 mov         r3, #1
  007b4	e28d2004	 add         r2, sp, #4
  007b8	e3a01014	 mov         r1, #0x14
  007bc	e59d0020	 ldr         r0, [sp, #0x20]
  007c0	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 512  :     ReadRegs(pDevice, TWL_OTHER_INT_LATCH, &data[1], 1);

  007c4	e3a03001	 mov         r3, #1
  007c8	e28d2004	 add         r2, sp, #4
  007cc	e2822001	 add         r2, r2, #1
  007d0	e3a0108d	 mov         r1, #0x8D
  007d4	e59d0020	 ldr         r0, [sp, #0x20]
  007d8	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 513  :     ReadRegs(pDevice, TWL_CARKIT_INT_LATCH, &data[2], 1);

  007dc	e3a03001	 mov         r3, #1
  007e0	e28d2004	 add         r2, sp, #4
  007e4	e2822002	 add         r2, r2, #2
  007e8	e3a01021	 mov         r1, #0x21
  007ec	e59d0020	 ldr         r0, [sp, #0x20]
  007f0	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 514  :     ReadRegs(pDevice, TWL_CARKIT_SM_1_INT_LATCH, &data[3], 1);

  007f4	e3a03001	 mov         r3, #1
  007f8	e28d2004	 add         r2, sp, #4
  007fc	e2822003	 add         r2, r2, #3
  00800	e3a0109b	 mov         r1, #0x9B
  00804	e59d0020	 ldr         r0, [sp, #0x20]
  00808	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 515  :     ReadRegs(pDevice, TWL_CARKIT_SM_2_INT_LATCH, &data[4], 1);

  0080c	e3a03001	 mov         r3, #1
  00810	e28d2004	 add         r2, sp, #4
  00814	e2822004	 add         r2, r2, #4
  00818	e3a010a0	 mov         r1, #0xA0
  0081c	e59d0020	 ldr         r0, [sp, #0x20]
  00820	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 516  :     ReadRegs(pDevice, TWL_REG_CTRL_ERROR, &data[5], 1);

  00824	e3a03001	 mov         r3, #1
  00828	e28d2004	 add         r2, sp, #4
  0082c	e2822005	 add         r2, r2, #5
  00830	e3a010b5	 mov         r1, #0xB5
  00834	e59d0020	 ldr         r0, [sp, #0x20]
  00838	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 517  : 
; 518  :     //RETAILMSG(1, (TEXT("ProcessSecondaryInterrupts USB_INT (0x%x), OTHER_INT (0x%x)\r\n"),
; 519  :     //    data[0], data[1]));
; 520  :     // Currently only USB and OTHER intrs are handled
; 521  :     ed = (data[1] << 8) + data[0];

  0083c	e5dd3005	 ldrb        r3, [sp, #5]
  00840	e1a02403	 mov         r2, r3, lsl #8
  00844	e5dd3004	 ldrb        r3, [sp, #4]
  00848	e0823003	 add         r3, r2, r3
  0084c	e58d3000	 str         r3, [sp]

; 522  :     if ((*rgEvents != NULL) && (*rgEvents != INVALID_HANDLE_VALUE))

  00850	e59d3024	 ldr         r3, [sp, #0x24]
  00854	e5933000	 ldr         r3, [r3]
  00858	e3530000	 cmp         r3, #0
  0085c	0a00000b	 beq         |$LN2@ProcessSec|
  00860	e59d3024	 ldr         r3, [sp, #0x24]
  00864	e5933000	 ldr         r3, [r3]
  00868	e3730001	 cmn         r3, #1
  0086c	0a000007	 beq         |$LN2@ProcessSec|

; 523  :         {
; 524  :         SetEventData(*rgEvents, ed);

  00870	e59d1000	 ldr         r1, [sp]
  00874	e59d3024	 ldr         r3, [sp, #0x24]
  00878	e5930000	 ldr         r0, [r3]
  0087c	eb000000	 bl          SetEventData

; 525  :         SetEvent(*rgEvents);

  00880	e59d3024	 ldr         r3, [sp, #0x24]
  00884	e5930000	 ldr         r0, [r3]
  00888	eb000000	 bl          SetEvent

; 526  :         }
; 527  :     else

  0088c	ea00000a	 b           |$LN1@ProcessSec|
  00890		 |$LN2@ProcessSec|

; 528  :         {
; 529  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: ProcessSecondaryInterrupts_USB: "
; 530  :             L"Invalid event handle."
; 531  :             ));

  00890	e59f3048	 ldr         r3, [pc, #0x48]
  00894	e5933440	 ldr         r3, [r3, #0x440]
  00898	e3130001	 tst         r3, #1
  0089c	0a000004	 beq         |$LN5@ProcessSec|
  008a0	e59f0034	 ldr         r0, [pc, #0x34]
  008a4	eb000000	 bl          NKDbgPrintfW
  008a8	e3a03001	 mov         r3, #1
  008ac	e58d3014	 str         r3, [sp, #0x14]
  008b0	ea000001	 b           |$LN6@ProcessSec|
  008b4		 |$LN5@ProcessSec|
  008b4	e3a03000	 mov         r3, #0
  008b8	e58d3014	 str         r3, [sp, #0x14]
  008bc		 |$LN6@ProcessSec|
  008bc		 |$LN1@ProcessSec|

; 532  :         }
; 533  : 
; 534  :     return TRUE;

  008bc	e59d000c	 ldr         r0, [sp, #0xC]
  008c0	eb000000	 bl          __security_check_cookie
  008c4	e3a03001	 mov         r3, #1
  008c8	e58d3010	 str         r3, [sp, #0x10]

; 535  : }

  008cc	e59d0010	 ldr         r0, [sp, #0x10]
  008d0	e28dd018	 add         sp, sp, #0x18
  008d4	e89d6000	 ldmia       sp, {sp, lr}
  008d8	e12fff1e	 bx          lr
  008dc		 |$LN10@ProcessSec|
  008dc		 |$LN11@ProcessSec|
  008dc	00000000	 DCD         |??_C@_1HK@PFDOHPFD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@|
  008e0		 |$LN12@ProcessSec|
  008e0	00000000	 DCD         |dpCurSettings|
  008e4		 |$LN13@ProcessSec|
  008e4	00000000	 DCD         |__security_cookie|
  008e8		 |$M37237|

			 ENDP  ; |?ProcessSecondaryInterrupts_USB@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z|, ProcessSecondaryInterrupts_USB

	EXPORT	|??_C@_1II@HGOFBIBB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@MPDFOMGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?ProcessSecondaryInterrupts_Keypad@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z| ; ProcessSecondaryInterrupts_Keypad
	IMPORT	|GetTickCount|

  00040			 AREA	 |.pdata|, PDATA
|$T37255| DCD	|$LN10@ProcessSec@2|
	DCD	0xc0005604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@HGOFBIBB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "S", 0x0, "e", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "d"
	DCB	0x0, "a", 0x0, "r", 0x0, "y", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "d", 0x0, "a", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2"
	DCB	0x0, "X", 0x0, ";", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "c"
	DCB	0x0, "k", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@MPDFOMGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "P", 0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, "S", 0x0, "e", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "d", 0x0, "a", 0x0, "r", 0x0, "y", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "s", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, 0x0, 0x0				; `string'

  00008			 AREA	 |.xdata|, DATA
|$T37251| DCD	0xffffffd4
; Function compile flags: /Odtp

  008e8			 AREA	 |.text|, CODE, ARM

  008e8	00000000	 DCD         |__GSHandlerCheck|
  008ec	00000000	 DCD         |$T37251|

  008f0		 |?ProcessSecondaryInterrupts_Keypad@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z| PROC ; ProcessSecondaryInterrupts_Keypad

; 550  : {

  008f0		 |$LN10@ProcessSec@2|
  008f0	e1a0c00d	 mov         r12, sp
  008f4	e92d0007	 stmdb       sp!, {r0 - r2}
  008f8	e92d5000	 stmdb       sp!, {r12, lr}
  008fc	e24dd028	 sub         sp, sp, #0x28
  00900		 |$M37252|
  00900	e59f313c	 ldr         r3, [pc, #0x13C]
  00904	e5933000	 ldr         r3, [r3]
  00908	e58d3010	 str         r3, [sp, #0x10]

; 551  :     UINT8 status;
; 552  :     UINT8 matrix[TWL_KEYPAD_ROWS];
; 553  :     
; 554  :     // loop through all status registers for the secondary interrupt handler
; 555  :     StatusRegister_t const* pStatusRegister = &pSIHEntry->StatusRegisters[0];

  0090c	e59d3038	 ldr         r3, [sp, #0x38]
  00910	e2833004	 add         r3, r3, #4
  00914	e58d3000	 str         r3, [sp]

; 556  :     
; 557  :     // get status of secondary interrupt
; 558  :     if (ReadRegs(pDevice, pStatusRegister->statusSubaddress, &status, 
; 559  :         sizeof(status)) == FALSE)

  00918	e3a03001	 mov         r3, #1
  0091c	e28d2004	 add         r2, sp, #4
  00920	e59d1000	 ldr         r1, [sp]
  00924	e5911000	 ldr         r1, [r1]
  00928	e59d0030	 ldr         r0, [sp, #0x30]
  0092c	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|
  00930	e58d0018	 str         r0, [sp, #0x18]
  00934	e59d3018	 ldr         r3, [sp, #0x18]
  00938	e3530000	 cmp         r3, #0
  0093c	1a000011	 bne         |$LN1@ProcessSec@2|

; 560  :         {
; 561  :         RETAILMSG(ZONE_ERROR, (L"ERROR: ProcessSecondaryInterrupts: "
; 562  :             L"Failed to read status register(0x%08X)",
; 563  :             pStatusRegister->statusSubaddress
; 564  :             ));

  00940	e59f30f4	 ldr         r3, [pc, #0xF4]
  00944	e5933440	 ldr         r3, [r3, #0x440]
  00948	e3130001	 tst         r3, #1
  0094c	0a000006	 beq         |$LN4@ProcessSec@2|
  00950	e59d3000	 ldr         r3, [sp]
  00954	e5931000	 ldr         r1, [r3]
  00958	e59f00e0	 ldr         r0, [pc, #0xE0]
  0095c	eb000000	 bl          NKDbgPrintfW
  00960	e3a03001	 mov         r3, #1
  00964	e58d301c	 str         r3, [sp, #0x1C]
  00968	ea000001	 b           |$LN5@ProcessSec@2|
  0096c		 |$LN4@ProcessSec@2|
  0096c	e3a03000	 mov         r3, #0
  00970	e58d301c	 str         r3, [sp, #0x1C]
  00974		 |$LN5@ProcessSec@2|

; 565  :         return FALSE;

  00974	e59d0010	 ldr         r0, [sp, #0x10]
  00978	eb000000	 bl          __security_check_cookie
  0097c	e3a03000	 mov         r3, #0
  00980	e58d3014	 str         r3, [sp, #0x14]
  00984	ea000027	 b           |$LN2@ProcessSec@2|
  00988		 |$LN1@ProcessSec@2|

; 566  :         };
; 567  : 
; 568  :     DEBUGMSG(ZONE_INFO | ZONE_IST, (L"INFO: ProcessSecondaryInterrupts "
; 569  :         L"secondary status=0x%02X; tick=%d\r\n", status, GetTickCount()
; 570  :         ));

  00988	e59f30ac	 ldr         r3, [pc, #0xAC]
  0098c	e5933440	 ldr         r3, [r3, #0x440]
  00990	e2032010	 and         r2, r3, #0x10
  00994	e59f30a0	 ldr         r3, [pc, #0xA0]
  00998	e5933440	 ldr         r3, [r3, #0x440]
  0099c	e2033020	 and         r3, r3, #0x20
  009a0	e1923003	 orrs        r3, r2, r3
  009a4	0a000009	 beq         |$LN6@ProcessSec@2|
  009a8	eb000000	 bl          GetTickCount
  009ac	e58d0020	 str         r0, [sp, #0x20]
  009b0	e59d2020	 ldr         r2, [sp, #0x20]
  009b4	e5dd3004	 ldrb        r3, [sp, #4]
  009b8	e1a01003	 mov         r1, r3
  009bc	e59f0074	 ldr         r0, [pc, #0x74]
  009c0	eb000000	 bl          NKDbgPrintfW
  009c4	e3a03001	 mov         r3, #1
  009c8	e58d3024	 str         r3, [sp, #0x24]
  009cc	ea000001	 b           |$LN7@ProcessSec@2|
  009d0		 |$LN6@ProcessSec@2|
  009d0	e3a03000	 mov         r3, #0
  009d4	e58d3024	 str         r3, [sp, #0x24]
  009d8		 |$LN7@ProcessSec@2|

; 571  : 
; 572  :     // read TWL_KEYPAD_ROWS amount of rows...
; 573  :     ReadRegs(pDevice, TWL_FULL_CODE_7_0, matrix, TWL_KEYPAD_ROWS);

  009d8	e3a03008	 mov         r3, #8
  009dc	e28d2008	 add         r2, sp, #8
  009e0	e3a01802	 mov         r1, #2, 16
  009e4	e38110db	 orr         r1, r1, #0xDB
  009e8	e59d0030	 ldr         r0, [sp, #0x30]
  009ec	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 574  :     WriteKeypadMatrixQueue(matrix, *rgEvents);

  009f0	e59d3034	 ldr         r3, [sp, #0x34]
  009f4	e5931000	 ldr         r1, [r3]
  009f8	e28d0008	 add         r0, sp, #8
  009fc	eb000000	 bl          |?WriteKeypadMatrixQueue@@YAHQAEPAX@Z|

; 575  :     WriteRegs(pDevice, pStatusRegister->statusSubaddress, &status, sizeof(status));

  00a00	e3a03001	 mov         r3, #1
  00a04	e28d2004	 add         r2, sp, #4
  00a08	e59d1000	 ldr         r1, [sp]
  00a0c	e5911000	 ldr         r1, [r1]
  00a10	e59d0030	 ldr         r0, [sp, #0x30]
  00a14	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 576  : 
; 577  :     return TRUE;

  00a18	e59d0010	 ldr         r0, [sp, #0x10]
  00a1c	eb000000	 bl          __security_check_cookie
  00a20	e3a03001	 mov         r3, #1
  00a24	e58d3014	 str         r3, [sp, #0x14]
  00a28		 |$LN2@ProcessSec@2|

; 578  : }

  00a28	e59d0014	 ldr         r0, [sp, #0x14]
  00a2c	e28dd028	 add         sp, sp, #0x28
  00a30	e89d6000	 ldmia       sp, {sp, lr}
  00a34	e12fff1e	 bx          lr
  00a38		 |$LN11@ProcessSec@2|
  00a38		 |$LN12@ProcessSec@2|
  00a38	00000000	 DCD         |??_C@_1II@HGOFBIBB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs@|
  00a3c		 |$LN13@ProcessSec@2|
  00a3c	00000000	 DCD         |dpCurSettings|
  00a40		 |$LN14@ProcessSec@2|
  00a40	00000000	 DCD         |??_C@_1JE@MPDFOMGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@|
  00a44		 |$LN15@ProcessSec@2|
  00a44	00000000	 DCD         |__security_cookie|
  00a48		 |$M37253|

			 ENDP  ; |?ProcessSecondaryInterrupts_Keypad@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z|, ProcessSecondaryInterrupts_Keypad

	EXPORT	|?ProcessSecondaryInterrupts@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z| ; ProcessSecondaryInterrupts

  00048			 AREA	 |.pdata|, PDATA
|$T37270| DCD	|$LN16@ProcessSec@3|
	DCD	0x40007c04
; Function compile flags: /Odtp

  00a48			 AREA	 |.text|, CODE, ARM

  00a48		 |?ProcessSecondaryInterrupts@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z| PROC ; ProcessSecondaryInterrupts

; 593  : {

  00a48		 |$LN16@ProcessSec@3|
  00a48	e1a0c00d	 mov         r12, sp
  00a4c	e92d0007	 stmdb       sp!, {r0 - r2}
  00a50	e92d5000	 stmdb       sp!, {r12, lr}
  00a54	e24dd028	 sub         sp, sp, #0x28
  00a58		 |$M37267|

; 594  :     UINT8 status;
; 595  :     UINT8 clearMask;    
; 596  :     int interruptCount;
; 597  :     int statusRegisterIndex = 0;

  00a58	e3a03000	 mov         r3, #0
  00a5c	e58d3004	 str         r3, [sp, #4]

; 598  :     StatusRegister_t const* pStatusRegister;
; 599  :     
; 600  :     // loop through all status registers for the secondary interrupt handler
; 601  :     pStatusRegister = &pSIHEntry->StatusRegisters[statusRegisterIndex];

  00a60	e59d3038	 ldr         r3, [sp, #0x38]
  00a64	e2831004	 add         r1, r3, #4
  00a68	e59d2004	 ldr         r2, [sp, #4]
  00a6c	e3a03010	 mov         r3, #0x10
  00a70	e0030392	 mul         r3, r2, r3
  00a74	e0813003	 add         r3, r1, r3
  00a78	e58d3000	 str         r3, [sp]
  00a7c		 |$LN7@ProcessSec@3|

; 602  :     while (pStatusRegister->interruptCount > 0)

  00a7c	e59d3000	 ldr         r3, [sp]
  00a80	e283300c	 add         r3, r3, #0xC
  00a84	e5933000	 ldr         r3, [r3]
  00a88	e3530000	 cmp         r3, #0
  00a8c	9a000060	 bls         |$LN6@ProcessSec@3|

; 603  :         {
; 604  :         // get status of secondary interrupt
; 605  :         if (ReadRegs(pDevice, pStatusRegister->statusSubaddress, &status, 
; 606  :             sizeof(status)) == FALSE)

  00a90	e3a03001	 mov         r3, #1
  00a94	e28d2008	 add         r2, sp, #8
  00a98	e59d1000	 ldr         r1, [sp]
  00a9c	e5911000	 ldr         r1, [r1]
  00aa0	e59d0030	 ldr         r0, [sp, #0x30]
  00aa4	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|
  00aa8	e58d0018	 str         r0, [sp, #0x18]
  00aac	e59d3018	 ldr         r3, [sp, #0x18]
  00ab0	e3530000	 cmp         r3, #0
  00ab4	1a00000d	 bne         |$LN5@ProcessSec@3|

; 607  :             {
; 608  :             RETAILMSG(ZONE_ERROR, (L"ERROR: ProcessSecondaryInterrupts: "
; 609  :                 L"Failed to read status register(0x%08X)",
; 610  :                 pStatusRegister->statusSubaddress
; 611  :                 ));

  00ab8	e59f3170	 ldr         r3, [pc, #0x170]
  00abc	e5933440	 ldr         r3, [r3, #0x440]
  00ac0	e3130001	 tst         r3, #1
  00ac4	0a000006	 beq         |$LN10@ProcessSec@3|
  00ac8	e59d3000	 ldr         r3, [sp]
  00acc	e5931000	 ldr         r1, [r3]
  00ad0	e59f015c	 ldr         r0, [pc, #0x15C]
  00ad4	eb000000	 bl          NKDbgPrintfW
  00ad8	e3a03001	 mov         r3, #1
  00adc	e58d301c	 str         r3, [sp, #0x1C]
  00ae0	ea000001	 b           |$LN11@ProcessSec@3|
  00ae4		 |$LN10@ProcessSec@3|
  00ae4	e3a03000	 mov         r3, #0
  00ae8	e58d301c	 str         r3, [sp, #0x1C]
  00aec		 |$LN11@ProcessSec@3|

; 612  :             break;

  00aec	ea000048	 b           |$LN6@ProcessSec@3|
  00af0		 |$LN5@ProcessSec@3|

; 613  :             };
; 614  : 
; 615  :         DEBUGMSG(ZONE_INFO | ZONE_IST, (L"INFO: ProcessSecondaryInterrupts "
; 616  :             L"secondary status=0x%02X; tick=%d\r\n", status, GetTickCount()
; 617  :             ));

  00af0	e59f3138	 ldr         r3, [pc, #0x138]
  00af4	e5933440	 ldr         r3, [r3, #0x440]
  00af8	e2032010	 and         r2, r3, #0x10
  00afc	e59f312c	 ldr         r3, [pc, #0x12C]
  00b00	e5933440	 ldr         r3, [r3, #0x440]
  00b04	e2033020	 and         r3, r3, #0x20
  00b08	e1923003	 orrs        r3, r2, r3
  00b0c	0a000009	 beq         |$LN12@ProcessSec@3|
  00b10	eb000000	 bl          GetTickCount
  00b14	e58d0020	 str         r0, [sp, #0x20]
  00b18	e59d2020	 ldr         r2, [sp, #0x20]
  00b1c	e5dd3008	 ldrb        r3, [sp, #8]
  00b20	e1a01003	 mov         r1, r3
  00b24	e59f0100	 ldr         r0, [pc, #0x100]
  00b28	eb000000	 bl          NKDbgPrintfW
  00b2c	e3a03001	 mov         r3, #1
  00b30	e58d3024	 str         r3, [sp, #0x24]
  00b34	ea000001	 b           |$LN13@ProcessSec@3|
  00b38		 |$LN12@ProcessSec@3|
  00b38	e3a03000	 mov         r3, #0
  00b3c	e58d3024	 str         r3, [sp, #0x24]
  00b40		 |$LN13@ProcessSec@3|

; 618  : 
; 619  :         // loop through and signal relevant events
; 620  :         clearMask = status;

  00b40	e5dd3008	 ldrb        r3, [sp, #8]
  00b44	e5cd3010	 strb        r3, [sp, #0x10]

; 621  :         interruptCount = pStatusRegister->interruptCount;

  00b48	e59d3000	 ldr         r3, [sp]
  00b4c	e283300c	 add         r3, r3, #0xC
  00b50	e5933000	 ldr         r3, [r3]
  00b54	e58d300c	 str         r3, [sp, #0xC]
  00b58		 |$LN4@ProcessSec@3|

; 622  :         while (interruptCount-- && status != 0)

  00b58	e59d300c	 ldr         r3, [sp, #0xC]
  00b5c	e3530000	 cmp         r3, #0
  00b60	e59d300c	 ldr         r3, [sp, #0xC]
  00b64	e2433001	 sub         r3, r3, #1
  00b68	e58d300c	 str         r3, [sp, #0xC]
  00b6c	0a000014	 beq         |$LN3@ProcessSec@3|
  00b70	e5dd3008	 ldrb        r3, [sp, #8]
  00b74	e3530000	 cmp         r3, #0
  00b78	0a000011	 beq         |$LN3@ProcessSec@3|

; 623  :         {
; 624  :             if ((status & 0x01) && *rgEvents)

  00b7c	e5dd3008	 ldrb        r3, [sp, #8]
  00b80	e3130001	 tst         r3, #1
  00b84	0a000006	 beq         |$LN2@ProcessSec@3|
  00b88	e59d3034	 ldr         r3, [sp, #0x34]
  00b8c	e5933000	 ldr         r3, [r3]
  00b90	e3530000	 cmp         r3, #0
  00b94	0a000002	 beq         |$LN2@ProcessSec@3|

; 625  :             {
; 626  :                 SetEvent(*rgEvents);

  00b98	e59d3034	 ldr         r3, [sp, #0x34]
  00b9c	e5930000	 ldr         r0, [r3]
  00ba0	eb000000	 bl          SetEvent
  00ba4		 |$LN2@ProcessSec@3|

; 627  :             }
; 628  :             status >>= 1;

  00ba4	e5dd3008	 ldrb        r3, [sp, #8]
  00ba8	e1a030a3	 mov         r3, r3, lsr #1
  00bac	e20330ff	 and         r3, r3, #0xFF
  00bb0	e5cd3008	 strb        r3, [sp, #8]

; 629  :             ++rgEvents;

  00bb4	e59d3034	 ldr         r3, [sp, #0x34]
  00bb8	e2833004	 add         r3, r3, #4
  00bbc	e58d3034	 str         r3, [sp, #0x34]

; 630  :         }

  00bc0	eaffffe4	 b           |$LN4@ProcessSec@3|
  00bc4		 |$LN3@ProcessSec@3|

; 631  :         
; 632  :         // clear secondary interrupt handler for more events
; 633  :         if(clearMask)

  00bc4	e5dd3010	 ldrb        r3, [sp, #0x10]
  00bc8	e3530000	 cmp         r3, #0
  00bcc	0a000005	 beq         |$LN1@ProcessSec@3|

; 634  :             {
; 635  :             WriteRegs(pDevice, pStatusRegister->statusSubaddress, 
; 636  :                 &clearMask, sizeof(clearMask)
; 637  :                 );

  00bd0	e3a03001	 mov         r3, #1
  00bd4	e28d2010	 add         r2, sp, #0x10
  00bd8	e59d1000	 ldr         r1, [sp]
  00bdc	e5911000	 ldr         r1, [r1]
  00be0	e59d0030	 ldr         r0, [sp, #0x30]
  00be4	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|
  00be8		 |$LN1@ProcessSec@3|

; 638  :             }
; 639  : 
; 640  :         // next status register
; 641  :         ++statusRegisterIndex;

  00be8	e59d3004	 ldr         r3, [sp, #4]
  00bec	e2833001	 add         r3, r3, #1
  00bf0	e58d3004	 str         r3, [sp, #4]

; 642  :         pStatusRegister = &pSIHEntry->StatusRegisters[statusRegisterIndex];

  00bf4	e59d3038	 ldr         r3, [sp, #0x38]
  00bf8	e2831004	 add         r1, r3, #4
  00bfc	e59d2004	 ldr         r2, [sp, #4]
  00c00	e3a03010	 mov         r3, #0x10
  00c04	e0030392	 mul         r3, r2, r3
  00c08	e0813003	 add         r3, r1, r3
  00c0c	e58d3000	 str         r3, [sp]

; 643  :         }

  00c10	eaffff99	 b           |$LN7@ProcessSec@3|
  00c14		 |$LN6@ProcessSec@3|

; 644  : 
; 645  :     return TRUE;

  00c14	e3a03001	 mov         r3, #1
  00c18	e58d3014	 str         r3, [sp, #0x14]

; 646  : }

  00c1c	e59d0014	 ldr         r0, [sp, #0x14]
  00c20	e28dd028	 add         sp, sp, #0x28
  00c24	e89d6000	 ldmia       sp, {sp, lr}
  00c28	e12fff1e	 bx          lr
  00c2c		 |$LN17@ProcessSec@3|
  00c2c		 |$LN18@ProcessSec@3|
  00c2c	00000000	 DCD         |??_C@_1II@HGOFBIBB@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAs@|
  00c30		 |$LN19@ProcessSec@3|
  00c30	00000000	 DCD         |dpCurSettings|
  00c34		 |$LN20@ProcessSec@3|
  00c34	00000000	 DCD         |??_C@_1JE@MPDFOMGM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAS?$AAe?$AAc?$AAo?$AAn?$AAd?$AAa?$AAr?$AAy?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt@|
  00c38		 |$M37268|

			 ENDP  ; |?ProcessSecondaryInterrupts@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z|, ProcessSecondaryInterrupts

	EXPORT	|??_C@_1FK@IGNFGCFG@?$AAT?$AAW?$AAL?$AA?3?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|?SetInterruptMode@@YAHPAUDevice_t@@W4InterruptMode_e@@@Z| ; SetInterruptMode

  00050			 AREA	 |.pdata|, PDATA
|$T37288| DCD	|$LN39@SetInterru|
	DCD	0x4000fd04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@IGNFGCFG@?$AAT?$AAW?$AAL?$AA?3?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "T"
	DCB	0x0, "W", 0x0, "L", 0x0, ":", 0x0, "S", 0x0, "e", 0x0, "t"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00c38			 AREA	 |.text|, CODE, ARM

  00c38		 |?SetInterruptMode@@YAHPAUDevice_t@@W4InterruptMode_e@@@Z| PROC ; SetInterruptMode

; 660  : {  

  00c38		 |$LN39@SetInterru|
  00c38	e1a0c00d	 mov         r12, sp
  00c3c	e92d0003	 stmdb       sp!, {r0, r1}
  00c40	e92d5000	 stmdb       sp!, {r12, lr}
  00c44	e24dd02c	 sub         sp, sp, #0x2C
  00c48		 |$M37285|

; 661  :     int i = 0;

  00c48	e3a03000	 mov         r3, #0
  00c4c	e58d3008	 str         r3, [sp, #8]

; 662  :     int offset = 0;

  00c50	e3a03000	 mov         r3, #0
  00c54	e58d3010	 str         r3, [sp, #0x10]

; 663  :     UINT8 mask = 0xFF;

  00c58	e3a030ff	 mov         r3, #0xFF
  00c5c	e5cd300c	 strb        r3, [sp, #0xC]

; 664  :     StatusRegister_t const *pStatusReg;
; 665  :     SIHEntry_t const *pEntry = s_pSIHEntries[0];

  00c60	e59f33b8	 ldr         r3, [pc, #0x3B8]
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e58d3004	 str         r3, [sp, #4]

; 666  :     switch (intrMode)

  00c6c	e59d3038	 ldr         r3, [sp, #0x38]
  00c70	e58d3018	 str         r3, [sp, #0x18]
  00c74	e59d3018	 ldr         r3, [sp, #0x18]
  00c78	e3530000	 cmp         r3, #0
  00c7c	0a000006	 beq         |$LN24@SetInterru|
  00c80	e59d3018	 ldr         r3, [sp, #0x18]
  00c84	e3530001	 cmp         r3, #1
  00c88	0a000051	 beq         |$LN15@SetInterru|
  00c8c	e59d3018	 ldr         r3, [sp, #0x18]
  00c90	e3530002	 cmp         r3, #2
  00c94	0a0000ae	 beq         |$LN6@SetInterru|
  00c98	ea0000da	 b           |$LN25@SetInterru|
  00c9c		 |$LN24@SetInterru|
  00c9c		 |$LN23@SetInterru|

; 667  :         {
; 668  :         case kTritonIntrEnabled:
; 669  :             do
; 670  :                 {
; 671  :                 pStatusReg = pEntry->StatusRegisters;

  00c9c	e59d3004	 ldr         r3, [sp, #4]
  00ca0	e2833004	 add         r3, r3, #4
  00ca4	e58d3000	 str         r3, [sp]

; 672  : 
; 673  :                 // For USB, there are separate set/clr registers.
; 674  :                 // So we need to make sure all interrupts which
; 675  :                 // aren't part of the interrupts being enabled are
; 676  :                 // in fact disabled before we start enabling interrupts
; 677  :                 // which need to be enabled
; 678  :                 if (pEntry->ctrlSubaddress == 0)

  00ca8	e59d3004	 ldr         r3, [sp, #4]
  00cac	e5933000	 ldr         r3, [r3]
  00cb0	e3530000	 cmp         r3, #0
  00cb4	1a00001a	 bne         |$LN20@SetInterru|
  00cb8		 |$LN19@SetInterru|

; 679  :                     {
; 680  :                     while (pStatusReg->interruptCount)

  00cb8	e59d3000	 ldr         r3, [sp]
  00cbc	e283300c	 add         r3, r3, #0xC
  00cc0	e5933000	 ldr         r3, [r3]
  00cc4	e3530000	 cmp         r3, #0
  00cc8	0a000012	 beq         |$LN18@SetInterru|

; 681  :                         {
; 682  :                         mask = 0xFF & ~(pStatusReg->ffEnable);

  00ccc	e59d3000	 ldr         r3, [sp]
  00cd0	e2833008	 add         r3, r3, #8
  00cd4	e5d33000	 ldrb        r3, [r3]
  00cd8	e1e03003	 mvn         r3, r3
  00cdc	e20330ff	 and         r3, r3, #0xFF
  00ce0	e20330ff	 and         r3, r3, #0xFF
  00ce4	e5cd300c	 strb        r3, [sp, #0xC]

; 683  :                         WriteRegs(pDevice, pStatusReg->maskSubaddress + 2,
; 684  :                             &mask, sizeof(UINT8));

  00ce8	e3a03001	 mov         r3, #1
  00cec	e28d200c	 add         r2, sp, #0xC
  00cf0	e59d1000	 ldr         r1, [sp]
  00cf4	e2811004	 add         r1, r1, #4
  00cf8	e5911000	 ldr         r1, [r1]
  00cfc	e2811002	 add         r1, r1, #2
  00d00	e59d0034	 ldr         r0, [sp, #0x34]
  00d04	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 685  :                         pStatusReg++;

  00d08	e59d3000	 ldr         r3, [sp]
  00d0c	e2833010	 add         r3, r3, #0x10
  00d10	e58d3000	 str         r3, [sp]

; 686  :                         }

  00d14	eaffffe7	 b           |$LN19@SetInterru|
  00d18		 |$LN18@SetInterru|

; 687  : 
; 688  :                     // point back to beginning of status register array
; 689  :                     // to start enabling interrupts
; 690  :                     pStatusReg = pEntry->StatusRegisters;

  00d18	e59d3004	 ldr         r3, [sp, #4]
  00d1c	e2833004	 add         r3, r3, #4
  00d20	e58d3000	 str         r3, [sp]
  00d24		 |$LN20@SetInterru|

; 691  :                     }
; 692  : 
; 693  :                 // USB has specific set/clr registers
; 694  :                 offset = (pEntry->ctrlSubaddress == 0) ? 1 : 0; 

  00d24	e59d3004	 ldr         r3, [sp, #4]
  00d28	e5933000	 ldr         r3, [r3]
  00d2c	e3530000	 cmp         r3, #0
  00d30	1a000002	 bne         |$LN29@SetInterru|
  00d34	e3a03001	 mov         r3, #1
  00d38	e58d301c	 str         r3, [sp, #0x1C]
  00d3c	ea000001	 b           |$LN30@SetInterru|
  00d40		 |$LN29@SetInterru|
  00d40	e3a03000	 mov         r3, #0
  00d44	e58d301c	 str         r3, [sp, #0x1C]
  00d48		 |$LN30@SetInterru|
  00d48	e59d301c	 ldr         r3, [sp, #0x1C]
  00d4c	e58d3010	 str         r3, [sp, #0x10]
  00d50		 |$LN17@SetInterru|

; 695  :                 while (pStatusReg->interruptCount)

  00d50	e59d3000	 ldr         r3, [sp]
  00d54	e283300c	 add         r3, r3, #0xC
  00d58	e5933000	 ldr         r3, [r3]
  00d5c	e3530000	 cmp         r3, #0
  00d60	0a00000d	 beq         |$LN16@SetInterru|

; 696  :                     {
; 697  :                     WriteRegs(pDevice, pStatusReg->maskSubaddress + offset, 
; 698  :                         &pStatusReg->ffEnable, sizeof(UINT8)
; 699  :                         );

  00d64	e3a03001	 mov         r3, #1
  00d68	e59d2000	 ldr         r2, [sp]
  00d6c	e2822008	 add         r2, r2, #8
  00d70	e59d1000	 ldr         r1, [sp]
  00d74	e2811004	 add         r1, r1, #4
  00d78	e5910000	 ldr         r0, [r1]
  00d7c	e59d1010	 ldr         r1, [sp, #0x10]
  00d80	e0801001	 add         r1, r0, r1
  00d84	e59d0034	 ldr         r0, [sp, #0x34]
  00d88	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 700  :                     pStatusReg++;

  00d8c	e59d3000	 ldr         r3, [sp]
  00d90	e2833010	 add         r3, r3, #0x10
  00d94	e58d3000	 str         r3, [sp]

; 701  :                     }

  00d98	eaffffec	 b           |$LN17@SetInterru|
  00d9c		 |$LN16@SetInterru|

; 702  :                 pEntry = s_pSIHEntries[++i];

  00d9c	e59d3008	 ldr         r3, [sp, #8]
  00da0	e2833001	 add         r3, r3, #1
  00da4	e58d3008	 str         r3, [sp, #8]
  00da8	e59d1008	 ldr         r1, [sp, #8]
  00dac	e3a03004	 mov         r3, #4
  00db0	e0020391	 mul         r2, r1, r3
  00db4	e59f3264	 ldr         r3, [pc, #0x264]
  00db8	e0833002	 add         r3, r3, r2
  00dbc	e5933000	 ldr         r3, [r3]
  00dc0	e58d3004	 str         r3, [sp, #4]

; 703  :                 }
; 704  :                 
; 705  :                 while(pEntry);        

  00dc4	e59d3004	 ldr         r3, [sp, #4]
  00dc8	e3530000	 cmp         r3, #0
  00dcc	1affffb2	 bne         |$LN23@SetInterru|

; 706  :             break;

  00dd0	ea00008c	 b           |$LN25@SetInterru|
  00dd4		 |$LN15@SetInterru|
  00dd4		 |$LN14@SetInterru|

; 707  :             
; 708  :         case kTritonIntrWakeup:
; 709  :             do
; 710  :                 {
; 711  :                 pStatusReg = pEntry->StatusRegisters;

  00dd4	e59d3004	 ldr         r3, [sp, #4]
  00dd8	e2833004	 add         r3, r3, #4
  00ddc	e58d3000	 str         r3, [sp]

; 712  : 
; 713  :                 // For USB, there are separate set/clr registers.
; 714  :                 // So we need to make sure all interrupts which
; 715  :                 // aren't part of the wakeup interrupts are
; 716  :                 // in fact disabled before we start enabling wakeup
; 717  :                 // interrupts 
; 718  :                 if (pEntry->ctrlSubaddress == 0)

  00de0	e59d3004	 ldr         r3, [sp, #4]
  00de4	e5933000	 ldr         r3, [r3]
  00de8	e3530000	 cmp         r3, #0
  00dec	1a00001a	 bne         |$LN11@SetInterru|
  00df0		 |$LN10@SetInterru|

; 719  :                     {
; 720  :                     while (pStatusReg->interruptCount)

  00df0	e59d3000	 ldr         r3, [sp]
  00df4	e283300c	 add         r3, r3, #0xC
  00df8	e5933000	 ldr         r3, [r3]
  00dfc	e3530000	 cmp         r3, #0
  00e00	0a000012	 beq         |$LN9@SetInterru|

; 721  :                         {
; 722  :                         // first clear interrupts which isn't part of wakeup
; 723  :                         mask = 0xFF & ~(pStatusReg->ffWakeupEnable);

  00e04	e59d3000	 ldr         r3, [sp]
  00e08	e2833009	 add         r3, r3, #9
  00e0c	e5d33000	 ldrb        r3, [r3]
  00e10	e1e03003	 mvn         r3, r3
  00e14	e20330ff	 and         r3, r3, #0xFF
  00e18	e20330ff	 and         r3, r3, #0xFF
  00e1c	e5cd300c	 strb        r3, [sp, #0xC]

; 724  :                         WriteRegs(pDevice, pStatusReg->maskSubaddress + 2,
; 725  :                             &mask, sizeof(UINT8));

  00e20	e3a03001	 mov         r3, #1
  00e24	e28d200c	 add         r2, sp, #0xC
  00e28	e59d1000	 ldr         r1, [sp]
  00e2c	e2811004	 add         r1, r1, #4
  00e30	e5911000	 ldr         r1, [r1]
  00e34	e2811002	 add         r1, r1, #2
  00e38	e59d0034	 ldr         r0, [sp, #0x34]
  00e3c	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 726  :                         pStatusReg++;

  00e40	e59d3000	 ldr         r3, [sp]
  00e44	e2833010	 add         r3, r3, #0x10
  00e48	e58d3000	 str         r3, [sp]

; 727  :                         }

  00e4c	eaffffe7	 b           |$LN10@SetInterru|
  00e50		 |$LN9@SetInterru|

; 728  : 
; 729  :                     // point back to beginning of status register array
; 730  :                     // to start enabling wakeup interrupts
; 731  :                     pStatusReg = pEntry->StatusRegisters;

  00e50	e59d3004	 ldr         r3, [sp, #4]
  00e54	e2833004	 add         r3, r3, #4
  00e58	e58d3000	 str         r3, [sp]
  00e5c		 |$LN11@SetInterru|

; 732  :                     }
; 733  : 
; 734  :                 // USB has specific set/clr registers
; 735  :                 offset = (pEntry->ctrlSubaddress == 0) ? 1 : 0;

  00e5c	e59d3004	 ldr         r3, [sp, #4]
  00e60	e5933000	 ldr         r3, [r3]
  00e64	e3530000	 cmp         r3, #0
  00e68	1a000002	 bne         |$LN31@SetInterru|
  00e6c	e3a03001	 mov         r3, #1
  00e70	e58d3020	 str         r3, [sp, #0x20]
  00e74	ea000001	 b           |$LN32@SetInterru|
  00e78		 |$LN31@SetInterru|
  00e78	e3a03000	 mov         r3, #0
  00e7c	e58d3020	 str         r3, [sp, #0x20]
  00e80		 |$LN32@SetInterru|
  00e80	e59d3020	 ldr         r3, [sp, #0x20]
  00e84	e58d3010	 str         r3, [sp, #0x10]
  00e88		 |$LN8@SetInterru|

; 736  :                 while (pStatusReg->interruptCount)

  00e88	e59d3000	 ldr         r3, [sp]
  00e8c	e283300c	 add         r3, r3, #0xC
  00e90	e5933000	 ldr         r3, [r3]
  00e94	e3530000	 cmp         r3, #0
  00e98	0a00001f	 beq         |$LN7@SetInterru|

; 737  :                     {
; 738  :                     DEBUGMSG(ZONE_INFO, (L"TWL:Setting Interrupt mode: "
; 739  :                         L"0x%02X, 0x%02X\r\n", 
; 740  :                         pStatusReg->maskSubaddress, pStatusReg->ffWakeupEnable
; 741  :                         ));

  00e9c	e59f3184	 ldr         r3, [pc, #0x184]
  00ea0	e5933440	 ldr         r3, [r3, #0x440]
  00ea4	e3130010	 tst         r3, #0x10
  00ea8	0a00000b	 beq         |$LN33@SetInterru|
  00eac	e59d3000	 ldr         r3, [sp]
  00eb0	e2833009	 add         r3, r3, #9
  00eb4	e5d33000	 ldrb        r3, [r3]
  00eb8	e1a02003	 mov         r2, r3
  00ebc	e59d3000	 ldr         r3, [sp]
  00ec0	e2833004	 add         r3, r3, #4
  00ec4	e5931000	 ldr         r1, [r3]
  00ec8	e59f0154	 ldr         r0, [pc, #0x154]
  00ecc	eb000000	 bl          NKDbgPrintfW
  00ed0	e3a03001	 mov         r3, #1
  00ed4	e58d3024	 str         r3, [sp, #0x24]
  00ed8	ea000001	 b           |$LN34@SetInterru|
  00edc		 |$LN33@SetInterru|
  00edc	e3a03000	 mov         r3, #0
  00ee0	e58d3024	 str         r3, [sp, #0x24]
  00ee4		 |$LN34@SetInterru|

; 742  :                     
; 743  :                     WriteRegs(pDevice, pStatusReg->maskSubaddress + offset, 
; 744  :                         &pStatusReg->ffWakeupEnable, sizeof(UINT8)
; 745  :                         );

  00ee4	e3a03001	 mov         r3, #1
  00ee8	e59d2000	 ldr         r2, [sp]
  00eec	e2822009	 add         r2, r2, #9
  00ef0	e59d1000	 ldr         r1, [sp]
  00ef4	e2811004	 add         r1, r1, #4
  00ef8	e5910000	 ldr         r0, [r1]
  00efc	e59d1010	 ldr         r1, [sp, #0x10]
  00f00	e0801001	 add         r1, r0, r1
  00f04	e59d0034	 ldr         r0, [sp, #0x34]
  00f08	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 746  :                     pStatusReg++;

  00f0c	e59d3000	 ldr         r3, [sp]
  00f10	e2833010	 add         r3, r3, #0x10
  00f14	e58d3000	 str         r3, [sp]

; 747  :                     }

  00f18	eaffffda	 b           |$LN8@SetInterru|
  00f1c		 |$LN7@SetInterru|

; 748  :                 
; 749  :                 pEntry = s_pSIHEntries[++i];

  00f1c	e59d3008	 ldr         r3, [sp, #8]
  00f20	e2833001	 add         r3, r3, #1
  00f24	e58d3008	 str         r3, [sp, #8]
  00f28	e59d1008	 ldr         r1, [sp, #8]
  00f2c	e3a03004	 mov         r3, #4
  00f30	e0020391	 mul         r2, r1, r3
  00f34	e59f30e4	 ldr         r3, [pc, #0xE4]
  00f38	e0833002	 add         r3, r3, r2
  00f3c	e5933000	 ldr         r3, [r3]
  00f40	e58d3004	 str         r3, [sp, #4]

; 750  :                 }
; 751  :                 while(pEntry);

  00f44	e59d3004	 ldr         r3, [sp, #4]
  00f48	e3530000	 cmp         r3, #0
  00f4c	1affffa0	 bne         |$LN14@SetInterru|

; 752  :             break;

  00f50	ea00002c	 b           |$LN25@SetInterru|
  00f54		 |$LN6@SetInterru|
  00f54		 |$LN5@SetInterru|

; 753  : 
; 754  :         case kTritonIntrDisabled:
; 755  :             do
; 756  :                 {
; 757  :                 pStatusReg = pEntry->StatusRegisters;

  00f54	e59d3004	 ldr         r3, [sp, #4]
  00f58	e2833004	 add         r3, r3, #4
  00f5c	e58d3000	 str         r3, [sp]

; 758  :                 
; 759  :                 // USB has specific set/clr registers
; 760  :                 offset = (pEntry->ctrlSubaddress == 0) ? 2 : 0;

  00f60	e59d3004	 ldr         r3, [sp, #4]
  00f64	e5933000	 ldr         r3, [r3]
  00f68	e3530000	 cmp         r3, #0
  00f6c	1a000002	 bne         |$LN35@SetInterru|
  00f70	e3a03002	 mov         r3, #2
  00f74	e58d3028	 str         r3, [sp, #0x28]
  00f78	ea000001	 b           |$LN36@SetInterru|
  00f7c		 |$LN35@SetInterru|
  00f7c	e3a03000	 mov         r3, #0
  00f80	e58d3028	 str         r3, [sp, #0x28]
  00f84		 |$LN36@SetInterru|
  00f84	e59d3028	 ldr         r3, [sp, #0x28]
  00f88	e58d3010	 str         r3, [sp, #0x10]
  00f8c		 |$LN2@SetInterru|

; 761  :                 while (pStatusReg->interruptCount)

  00f8c	e59d3000	 ldr         r3, [sp]
  00f90	e283300c	 add         r3, r3, #0xC
  00f94	e5933000	 ldr         r3, [r3]
  00f98	e3530000	 cmp         r3, #0
  00f9c	0a00000c	 beq         |$LN1@SetInterru|

; 762  :                     {
; 763  :                     WriteRegs(pDevice, pStatusReg->maskSubaddress + offset, 
; 764  :                         &mask, sizeof(UINT8)
; 765  :                         );

  00fa0	e3a03001	 mov         r3, #1
  00fa4	e28d200c	 add         r2, sp, #0xC
  00fa8	e59d1000	 ldr         r1, [sp]
  00fac	e2811004	 add         r1, r1, #4
  00fb0	e5910000	 ldr         r0, [r1]
  00fb4	e59d1010	 ldr         r1, [sp, #0x10]
  00fb8	e0801001	 add         r1, r0, r1
  00fbc	e59d0034	 ldr         r0, [sp, #0x34]
  00fc0	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 766  :                     pStatusReg++;

  00fc4	e59d3000	 ldr         r3, [sp]
  00fc8	e2833010	 add         r3, r3, #0x10
  00fcc	e58d3000	 str         r3, [sp]

; 767  :                     }

  00fd0	eaffffed	 b           |$LN2@SetInterru|
  00fd4		 |$LN1@SetInterru|

; 768  :                 pEntry = s_pSIHEntries[++i];

  00fd4	e59d3008	 ldr         r3, [sp, #8]
  00fd8	e2833001	 add         r3, r3, #1
  00fdc	e58d3008	 str         r3, [sp, #8]
  00fe0	e59d1008	 ldr         r1, [sp, #8]
  00fe4	e3a03004	 mov         r3, #4
  00fe8	e0020391	 mul         r2, r1, r3
  00fec	e59f302c	 ldr         r3, [pc, #0x2C]
  00ff0	e0833002	 add         r3, r3, r2
  00ff4	e5933000	 ldr         r3, [r3]
  00ff8	e58d3004	 str         r3, [sp, #4]

; 769  :                 }
; 770  :                 while(pEntry);

  00ffc	e59d3004	 ldr         r3, [sp, #4]
  01000	e3530000	 cmp         r3, #0
  01004	1affffd2	 bne         |$LN5@SetInterru|
  01008		 |$LN25@SetInterru|

; 771  :             break;
; 772  :         }
; 773  :     return TRUE;

  01008	e3a03001	 mov         r3, #1
  0100c	e58d3014	 str         r3, [sp, #0x14]

; 774  : }

  01010	e59d0014	 ldr         r0, [sp, #0x14]
  01014	e28dd02c	 add         sp, sp, #0x2C
  01018	e89d6000	 ldmia       sp, {sp, lr}
  0101c	e12fff1e	 bx          lr
  01020		 |$LN40@SetInterru|
  01020		 |$LN41@SetInterru|
  01020	00000000	 DCD         |s_pSIHEntries|
  01024		 |$LN42@SetInterru|
  01024	00000000	 DCD         |??_C@_1FK@IGNFGCFG@?$AAT?$AAW?$AAL?$AA?3?$AAS?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  01028		 |$LN43@SetInterru|
  01028	00000000	 DCD         |dpCurSettings|
  0102c		 |$M37286|

			 ENDP  ; |?SetInterruptMode@@YAHPAUDevice_t@@W4InterruptMode_e@@@Z|, SetInterruptMode

	EXPORT	|??_C@_1CI@EOEIPNHJ@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?TWL_Deinit@@YAHK@Z|			; TWL_Deinit
	EXPORT	|??_C@_1GE@PGNGFJMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|?TWL_InterruptThread@@YAKPAX@Z|	; TWL_InterruptThread
	EXPORT	|??_C@_1FM@DGNECLFG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NGHKLMFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@CICNOGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@CJPEBFJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@LOHDLJHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@DLLOHCNE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAW?$AAL@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@MFEKFGBA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@DEHICOJK@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?TWL_Init@@YAKPBGPBX@Z|		; TWL_Init
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|GPIOInterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|GPIOSetMode|
	IMPORT	|GPIOOpen|
	IMPORT	|I2COpen|
	IMPORT	|BSPGetTritonBusID|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|
	IMPORT	|LocalAlloc|

  0008c			 AREA	 |.bss|, NOINIT
|s_pSIHRoutines| % 0x18

  00058			 AREA	 |.pdata|, PDATA
|$T37320| DCD	|$LN42@TWL_Init|
	DCD	0x40014904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@EOEIPNHJ@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@PGNGFJMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@DGNECLFG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NGHKLMFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@CICNOGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@CJPEBFJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "G", 0x0, "p", 0x0, "i", 0x0, "o", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@LOHDLJHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@DLLOHCNE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAW?$AAL@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "T", 0x0, "W"
	DCB	0x0, "L", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@MFEKFGBA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "T", 0x0, "W", 0x0, "L", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@DEHICOJK@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0102c			 AREA	 |.text|, CODE, ARM

  0102c		 |?TWL_Init@@YAKPBGPBX@Z| PROC		; TWL_Init

; 788  : {

  0102c		 |$LN42@TWL_Init|
  0102c	e1a0c00d	 mov         r12, sp
  01030	e92d0003	 stmdb       sp!, {r0, r1}
  01034	e92d5000	 stmdb       sp!, {r12, lr}
  01038	e24dd06c	 sub         sp, sp, #0x6C
  0103c		 |$M37317|

; 789  :     DWORD rc = (DWORD)NULL;

  0103c	e3a03000	 mov         r3, #0
  01040	e58d300c	 str         r3, [sp, #0xC]

; 790  :     Device_t *pDevice = NULL;

  01044	e3a03000	 mov         r3, #0
  01048	e58d3008	 str         r3, [sp, #8]

; 791  : 
; 792  :     UNREFERENCED_PARAMETER(pBusContext);
; 793  : 
; 794  :     DEBUGMSG(ZONE_FUNCTION, (
; 795  :         L"+TWL_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 796  :         ));

  0104c	e59f34b8	 ldr         r3, [pc, #0x4B8]
  01050	e5933440	 ldr         r3, [r3, #0x440]
  01054	e3130004	 tst         r3, #4
  01058	0a000006	 beq         |$LN20@TWL_Init|
  0105c	e59d2078	 ldr         r2, [sp, #0x78]
  01060	e59d1074	 ldr         r1, [sp, #0x74]
  01064	e59f04e0	 ldr         r0, [pc, #0x4E0]
  01068	eb000000	 bl          NKDbgPrintfW
  0106c	e3a03001	 mov         r3, #1
  01070	e58d301c	 str         r3, [sp, #0x1C]
  01074	ea000001	 b           |$LN21@TWL_Init|
  01078		 |$LN20@TWL_Init|
  01078	e3a03000	 mov         r3, #0
  0107c	e58d301c	 str         r3, [sp, #0x1C]
  01080		 |$LN21@TWL_Init|

; 797  : 
; 798  :     // Create device structure
; 799  :     pDevice = (Device_t *)LocalAlloc(LPTR, sizeof(Device_t));

  01080	e3a01e1a	 mov         r1, #0x1A, 28
  01084	e3a00040	 mov         r0, #0x40
  01088	eb000000	 bl          LocalAlloc
  0108c	e58d0020	 str         r0, [sp, #0x20]
  01090	e59d3020	 ldr         r3, [sp, #0x20]
  01094	e58d3008	 str         r3, [sp, #8]

; 800  :     if (pDevice == NULL)

  01098	e59d3008	 ldr         r3, [sp, #8]
  0109c	e3530000	 cmp         r3, #0
  010a0	1a00000c	 bne         |$LN17@TWL_Init|

; 801  :         {
; 802  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 803  :             L"Failed allocate TWL controller structure\r\n"
; 804  :             ));

  010a4	e59f3460	 ldr         r3, [pc, #0x460]
  010a8	e5933440	 ldr         r3, [r3, #0x440]
  010ac	e3130001	 tst         r3, #1
  010b0	0a000004	 beq         |$LN22@TWL_Init|
  010b4	e59f048c	 ldr         r0, [pc, #0x48C]
  010b8	eb000000	 bl          NKDbgPrintfW
  010bc	e3a03001	 mov         r3, #1
  010c0	e58d3024	 str         r3, [sp, #0x24]
  010c4	ea000001	 b           |$LN23@TWL_Init|
  010c8		 |$LN22@TWL_Init|
  010c8	e3a03000	 mov         r3, #0
  010cc	e58d3024	 str         r3, [sp, #0x24]
  010d0		 |$LN23@TWL_Init|

; 805  :         goto cleanUp;

  010d0	ea0000f5	 b           |$LN16@TWL_Init|
  010d4	ea0000f4	 b           |$cleanUp$36618|
  010d8		 |$LN17@TWL_Init|

; 806  :         }
; 807  : 
; 808  :     // clear memory
; 809  :     memset(pDevice, 0, sizeof(Device_t));

  010d8	e3a02e1a	 mov         r2, #0x1A, 28
  010dc	e3a01000	 mov         r1, #0
  010e0	e59d0008	 ldr         r0, [sp, #8]
  010e4	eb000000	 bl          memset

; 810  : 
; 811  :     // Set cookie and initial power state
; 812  :     pDevice->cookie = TWL_DEVICE_COOKIE;

  010e8	e59d2008	 ldr         r2, [sp, #8]
  010ec	e59f3450	 ldr         r3, [pc, #0x450]
  010f0	e5823000	 str         r3, [r2]

; 813  :     pDevice->powerState = D0;

  010f4	e59d3008	 ldr         r3, [sp, #8]
  010f8	e2832044	 add         r2, r3, #0x44
  010fc	e3a03000	 mov         r3, #0
  01100	e5823000	 str         r3, [r2]

; 814  : 
; 815  :     // Initalize critical section
; 816  :     InitializeCriticalSection(&pDevice->cs);

  01104	e59d3008	 ldr         r3, [sp, #8]
  01108	e2830018	 add         r0, r3, #0x18
  0110c	eb000000	 bl          InitializeCriticalSection

; 817  : 
; 818  :     // Read device parameters
; 819  :     if (GetDeviceRegistryParams(
; 820  :             szContext, pDevice, dimof(s_deviceRegParams), s_deviceRegParams
; 821  :             ) != ERROR_SUCCESS)

  01110	e59f3428	 ldr         r3, [pc, #0x428]
  01114	e3a02002	 mov         r2, #2
  01118	e59d1008	 ldr         r1, [sp, #8]
  0111c	e59d0074	 ldr         r0, [sp, #0x74]
  01120	eb000000	 bl          GetDeviceRegistryParams
  01124	e58d0028	 str         r0, [sp, #0x28]
  01128	e59d3028	 ldr         r3, [sp, #0x28]
  0112c	e3530000	 cmp         r3, #0
  01130	0a00000c	 beq         |$LN15@TWL_Init|

; 822  :         {
; 823  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 824  :             L"Failed read TWL driver registry parameters\r\n"
; 825  :             ));

  01134	e59f33d0	 ldr         r3, [pc, #0x3D0]
  01138	e5933440	 ldr         r3, [r3, #0x440]
  0113c	e3130001	 tst         r3, #1
  01140	0a000004	 beq         |$LN24@TWL_Init|
  01144	e59f03f0	 ldr         r0, [pc, #0x3F0]
  01148	eb000000	 bl          NKDbgPrintfW
  0114c	e3a03001	 mov         r3, #1
  01150	e58d302c	 str         r3, [sp, #0x2C]
  01154	ea000001	 b           |$LN25@TWL_Init|
  01158		 |$LN24@TWL_Init|
  01158	e3a03000	 mov         r3, #0
  0115c	e58d302c	 str         r3, [sp, #0x2C]
  01160		 |$LN25@TWL_Init|

; 826  :         goto cleanUp;

  01160	ea0000d1	 b           |$LN14@TWL_Init|
  01164	ea0000d0	 b           |$cleanUp$36618|
  01168		 |$LN15@TWL_Init|

; 827  :         }
; 828  : 
; 829  :     // Open i2c bus
; 830  :     pDevice->hI2C = I2COpen(BSPGetTritonBusID());

  01168	eb000000	 bl          BSPGetTritonBusID
  0116c	e58d0030	 str         r0, [sp, #0x30]
  01170	e59d0030	 ldr         r0, [sp, #0x30]
  01174	eb000000	 bl          I2COpen
  01178	e58d0034	 str         r0, [sp, #0x34]
  0117c	e59d3008	 ldr         r3, [sp, #8]
  01180	e2832010	 add         r2, r3, #0x10
  01184	e59d3034	 ldr         r3, [sp, #0x34]
  01188	e5823000	 str         r3, [r2]

; 831  :     if (pDevice->hI2C == NULL)

  0118c	e59d3008	 ldr         r3, [sp, #8]
  01190	e2833010	 add         r3, r3, #0x10
  01194	e5933000	 ldr         r3, [r3]
  01198	e3530000	 cmp         r3, #0
  0119c	1a00000c	 bne         |$LN13@TWL_Init|

; 832  :         {
; 833  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 834  :             L"Failed open I2C bus driver\r\n"
; 835  :             ));

  011a0	e59f3364	 ldr         r3, [pc, #0x364]
  011a4	e5933440	 ldr         r3, [r3, #0x440]
  011a8	e3130001	 tst         r3, #1
  011ac	0a000004	 beq         |$LN26@TWL_Init|
  011b0	e59f0380	 ldr         r0, [pc, #0x380]
  011b4	eb000000	 bl          NKDbgPrintfW
  011b8	e3a03001	 mov         r3, #1
  011bc	e58d3038	 str         r3, [sp, #0x38]
  011c0	ea000001	 b           |$LN27@TWL_Init|
  011c4		 |$LN26@TWL_Init|
  011c4	e3a03000	 mov         r3, #0
  011c8	e58d3038	 str         r3, [sp, #0x38]
  011cc		 |$LN27@TWL_Init|

; 836  :         goto cleanUp;

  011cc	ea0000b6	 b           |$LN12@TWL_Init|
  011d0	ea0000b5	 b           |$cleanUp$36618|
  011d4		 |$LN13@TWL_Init|

; 837  :         }
; 838  :     I2CSetSlaveAddress(pDevice->hI2C, BSPGetTritonSlaveAddress());

  011d4	eb000000	 bl          BSPGetTritonSlaveAddress
  011d8	e1a03800	 mov         r3, r0, lsl #16
  011dc	e1a03823	 mov         r3, r3, lsr #16
  011e0	e1cd33bc	 strh        r3, [sp, #0x3C]
  011e4	e1dd13bc	 ldrh        r1, [sp, #0x3C]
  011e8	e59d3008	 ldr         r3, [sp, #8]
  011ec	e2833010	 add         r3, r3, #0x10
  011f0	e5930000	 ldr         r0, [r3]
  011f4	eb000000	 bl          I2CSetSlaveAddress

; 839  : 
; 840  :     // Open gpio driver
; 841  :     pDevice->hGpio = GPIOOpen();

  011f8	eb000000	 bl          GPIOOpen
  011fc	e58d0040	 str         r0, [sp, #0x40]
  01200	e59d3008	 ldr         r3, [sp, #8]
  01204	e2832014	 add         r2, r3, #0x14
  01208	e59d3040	 ldr         r3, [sp, #0x40]
  0120c	e5823000	 str         r3, [r2]

; 842  :     if (pDevice->hGpio == NULL)

  01210	e59d3008	 ldr         r3, [sp, #8]
  01214	e2833014	 add         r3, r3, #0x14
  01218	e5933000	 ldr         r3, [r3]
  0121c	e3530000	 cmp         r3, #0
  01220	1a00000c	 bne         |$LN11@TWL_Init|

; 843  :         {
; 844  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 845  :             L"Failed to open Gpio driver \r\n"
; 846  :             ));

  01224	e59f32e0	 ldr         r3, [pc, #0x2E0]
  01228	e5933440	 ldr         r3, [r3, #0x440]
  0122c	e3130001	 tst         r3, #1
  01230	0a000004	 beq         |$LN28@TWL_Init|
  01234	e59f02f8	 ldr         r0, [pc, #0x2F8]
  01238	eb000000	 bl          NKDbgPrintfW
  0123c	e3a03001	 mov         r3, #1
  01240	e58d3044	 str         r3, [sp, #0x44]
  01244	ea000001	 b           |$LN29@TWL_Init|
  01248		 |$LN28@TWL_Init|
  01248	e3a03000	 mov         r3, #0
  0124c	e58d3044	 str         r3, [sp, #0x44]
  01250		 |$LN29@TWL_Init|

; 847  :         goto cleanUp;

  01250	ea000095	 b           |$LN10@TWL_Init|
  01254	ea000094	 b           |$cleanUp$36618|
  01258		 |$LN11@TWL_Init|

; 848  :         }
; 849  : 
; 850  :     InitializeHardware(pDevice);   

  01258	e59d0008	 ldr         r0, [sp, #8]
  0125c	eb000000	 bl          |?InitializeHardware@@YAHPAUDevice_t@@@Z|

; 851  : 
; 852  :     // initialze callback arrays
; 853  :     s_pSIHRoutines[0] = ProcessSecondaryInterrupts;

  01260	e59f22c0	 ldr         r2, [pc, #0x2C0]
  01264	e59f32b8	 ldr         r3, [pc, #0x2B8]
  01268	e5832000	 str         r2, [r3]

; 854  :     s_pSIHRoutines[1] = ProcessSecondaryInterrupts_Keypad;

  0126c	e59f22bc	 ldr         r2, [pc, #0x2BC]
  01270	e59f32ac	 ldr         r3, [pc, #0x2AC]
  01274	e5832004	 str         r2, [r3, #4]

; 855  :     s_pSIHRoutines[2] = ProcessSecondaryInterrupts;

  01278	e59f22a8	 ldr         r2, [pc, #0x2A8]
  0127c	e59f32a0	 ldr         r3, [pc, #0x2A0]
  01280	e5832008	 str         r2, [r3, #8]

; 856  :     s_pSIHRoutines[3] = ProcessSecondaryInterrupts;

  01284	e59f229c	 ldr         r2, [pc, #0x29C]
  01288	e59f3294	 ldr         r3, [pc, #0x294]
  0128c	e583200c	 str         r2, [r3, #0xC]

; 857  :     s_pSIHRoutines[4] = ProcessSecondaryInterrupts_USB;

  01290	e59f2294	 ldr         r2, [pc, #0x294]
  01294	e59f3288	 ldr         r3, [pc, #0x288]
  01298	e5832010	 str         r2, [r3, #0x10]

; 858  :     s_pSIHRoutines[5] = ProcessSecondaryInterrupts;

  0129c	e59f2284	 ldr         r2, [pc, #0x284]
  012a0	e59f327c	 ldr         r3, [pc, #0x27C]
  012a4	e5832014	 str         r2, [r3, #0x14]

; 859  : 
; 860  :     // set triton interrupts to initial settings
; 861  :     if (!InitializeInterrupts(pDevice))

  012a8	e59d0008	 ldr         r0, [sp, #8]
  012ac	eb000000	 bl          |?InitializeInterrupts@@YAHPAUDevice_t@@@Z|
  012b0	e58d0048	 str         r0, [sp, #0x48]
  012b4	e59d3048	 ldr         r3, [sp, #0x48]
  012b8	e3530000	 cmp         r3, #0
  012bc	1a00000c	 bne         |$LN9@TWL_Init|

; 862  :         {
; 863  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 864  :             L"Failed initialize triton interrupts\r\n"
; 865  :             ));

  012c0	e59f3244	 ldr         r3, [pc, #0x244]
  012c4	e5933440	 ldr         r3, [r3, #0x440]
  012c8	e3130001	 tst         r3, #1
  012cc	0a000004	 beq         |$LN30@TWL_Init|
  012d0	e59f0248	 ldr         r0, [pc, #0x248]
  012d4	eb000000	 bl          NKDbgPrintfW
  012d8	e3a03001	 mov         r3, #1
  012dc	e58d304c	 str         r3, [sp, #0x4C]
  012e0	ea000001	 b           |$LN31@TWL_Init|
  012e4		 |$LN30@TWL_Init|
  012e4	e3a03000	 mov         r3, #0
  012e8	e58d304c	 str         r3, [sp, #0x4C]
  012ec		 |$LN31@TWL_Init|

; 866  :         goto cleanUp;

  012ec	ea00006e	 b           |$LN8@TWL_Init|
  012f0	ea00006d	 b           |$cleanUp$36618|
  012f4		 |$LN9@TWL_Init|

; 867  :         }
; 868  : 
; 869  :     // NOTE:
; 870  :     //  Triton generates a low level interrupt.
; 871  :     GPIOSetMode(pDevice->hGpio, pDevice->gpio, GPIO_DIR_INPUT | GPIO_INT_LOW);

  012f4	e3a02009	 mov         r2, #9
  012f8	e59d3008	 ldr         r3, [sp, #8]
  012fc	e2833008	 add         r3, r3, #8
  01300	e5931000	 ldr         r1, [r3]
  01304	e59d3008	 ldr         r3, [sp, #8]
  01308	e2833014	 add         r3, r3, #0x14
  0130c	e5930000	 ldr         r0, [r3]
  01310	eb000000	 bl          GPIOSetMode

; 872  : 
; 873  :     //---------------------------------------------------------------------
; 874  :     
; 875  :     // Create interrupt event
; 876  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  01314	e3a03000	 mov         r3, #0
  01318	e3a02000	 mov         r2, #0
  0131c	e3a01000	 mov         r1, #0
  01320	e3a00000	 mov         r0, #0
  01324	eb000000	 bl          CreateEventW
  01328	e58d0050	 str         r0, [sp, #0x50]
  0132c	e59d3008	 ldr         r3, [sp, #8]
  01330	e2832038	 add         r2, r3, #0x38
  01334	e59d3050	 ldr         r3, [sp, #0x50]
  01338	e5823000	 str         r3, [r2]

; 877  :     if (pDevice->hIntrEvent == NULL)

  0133c	e59d3008	 ldr         r3, [sp, #8]
  01340	e2833038	 add         r3, r3, #0x38
  01344	e5933000	 ldr         r3, [r3]
  01348	e3530000	 cmp         r3, #0
  0134c	1a00000c	 bne         |$LN7@TWL_Init|

; 878  :         {
; 879  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Init: "
; 880  :             L"Failed create interrupt event\r\n"
; 881  :             ));

  01350	e59f31b4	 ldr         r3, [pc, #0x1B4]
  01354	e5933440	 ldr         r3, [r3, #0x440]
  01358	e3130001	 tst         r3, #1
  0135c	0a000004	 beq         |$LN32@TWL_Init|
  01360	e59f01b4	 ldr         r0, [pc, #0x1B4]
  01364	eb000000	 bl          NKDbgPrintfW
  01368	e3a03001	 mov         r3, #1
  0136c	e58d3054	 str         r3, [sp, #0x54]
  01370	ea000001	 b           |$LN33@TWL_Init|
  01374		 |$LN32@TWL_Init|
  01374	e3a03000	 mov         r3, #0
  01378	e58d3054	 str         r3, [sp, #0x54]
  0137c		 |$LN33@TWL_Init|

; 882  :         goto cleanUp;

  0137c	ea00004a	 b           |$LN6@TWL_Init|
  01380	ea000049	 b           |$cleanUp$36618|
  01384		 |$LN7@TWL_Init|

; 883  :         }
; 884  : 
; 885  :     // Initialize interrupt
; 886  :     if (!GPIOInterruptInitialize(pDevice->hGpio, pDevice->gpio, &pDevice->sysIntr, pDevice->hIntrEvent))

  01384	e59d3008	 ldr         r3, [sp, #8]
  01388	e2833038	 add         r3, r3, #0x38
  0138c	e5933000	 ldr         r3, [r3]
  01390	e59d2008	 ldr         r2, [sp, #8]
  01394	e2822030	 add         r2, r2, #0x30
  01398	e59d1008	 ldr         r1, [sp, #8]
  0139c	e2811008	 add         r1, r1, #8
  013a0	e5911000	 ldr         r1, [r1]
  013a4	e59d0008	 ldr         r0, [sp, #8]
  013a8	e2800014	 add         r0, r0, #0x14
  013ac	e5900000	 ldr         r0, [r0]
  013b0	eb000000	 bl          GPIOInterruptInitialize
  013b4	e58d0058	 str         r0, [sp, #0x58]
  013b8	e59d3058	 ldr         r3, [sp, #0x58]
  013bc	e3530000	 cmp         r3, #0
  013c0	1a00000c	 bne         |$LN5@TWL_Init|

; 887  :         {
; 888  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: TWL_Init: "
; 889  :             L"InterruptInitialize failed\r\n"
; 890  :             ));

  013c4	e59f3140	 ldr         r3, [pc, #0x140]
  013c8	e5933440	 ldr         r3, [r3, #0x440]
  013cc	e3130001	 tst         r3, #1
  013d0	0a000004	 beq         |$LN34@TWL_Init|
  013d4	e59f013c	 ldr         r0, [pc, #0x13C]
  013d8	eb000000	 bl          NKDbgPrintfW
  013dc	e3a03001	 mov         r3, #1
  013e0	e58d305c	 str         r3, [sp, #0x5C]
  013e4	ea000001	 b           |$LN35@TWL_Init|
  013e8		 |$LN34@TWL_Init|
  013e8	e3a03000	 mov         r3, #0
  013ec	e58d305c	 str         r3, [sp, #0x5C]
  013f0		 |$LN35@TWL_Init|

; 891  :         goto cleanUp;

  013f0	ea00002d	 b           |$LN4@TWL_Init|
  013f4	ea00002c	 b           |$cleanUp$36618|
  013f8		 |$LN5@TWL_Init|

; 892  :         }
; 893  : 
; 894  :     // Start interrupt service thread
; 895  :     pDevice->intrThreadExit = FALSE;

  013f8	e59d3008	 ldr         r3, [sp, #8]
  013fc	e2832040	 add         r2, r3, #0x40
  01400	e3a03000	 mov         r3, #0
  01404	e5823000	 str         r3, [r2]

; 896  :     pDevice->hIntrThread = CreateThread(
; 897  :                                 NULL, 0, TWL_InterruptThread, pDevice, 0,NULL
; 898  :                                 );

  01408	e3a03000	 mov         r3, #0
  0140c	e58d3004	 str         r3, [sp, #4]
  01410	e3a03000	 mov         r3, #0
  01414	e58d3000	 str         r3, [sp]
  01418	e59d3008	 ldr         r3, [sp, #8]
  0141c	e59f20f0	 ldr         r2, [pc, #0xF0]
  01420	e3a01000	 mov         r1, #0
  01424	e3a00000	 mov         r0, #0
  01428	eb000000	 bl          CreateThread
  0142c	e58d0060	 str         r0, [sp, #0x60]
  01430	e59d3008	 ldr         r3, [sp, #8]
  01434	e283203c	 add         r2, r3, #0x3C
  01438	e59d3060	 ldr         r3, [sp, #0x60]
  0143c	e5823000	 str         r3, [r2]

; 899  :     if (!pDevice->hIntrThread)

  01440	e59d3008	 ldr         r3, [sp, #8]
  01444	e283303c	 add         r3, r3, #0x3C
  01448	e5933000	 ldr         r3, [r3]
  0144c	e3530000	 cmp         r3, #0
  01450	1a00000c	 bne         |$LN3@TWL_Init|

; 900  :         {
; 901  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: TWL_Init: "
; 902  :             L"Failed create interrupt thread\r\n"
; 903  :             ));

  01454	e59f30b0	 ldr         r3, [pc, #0xB0]
  01458	e5933440	 ldr         r3, [r3, #0x440]
  0145c	e3130001	 tst         r3, #1
  01460	0a000004	 beq         |$LN36@TWL_Init|
  01464	e59f00a4	 ldr         r0, [pc, #0xA4]
  01468	eb000000	 bl          NKDbgPrintfW
  0146c	e3a03001	 mov         r3, #1
  01470	e58d3064	 str         r3, [sp, #0x64]
  01474	ea000001	 b           |$LN37@TWL_Init|
  01478		 |$LN36@TWL_Init|
  01478	e3a03000	 mov         r3, #0
  0147c	e58d3064	 str         r3, [sp, #0x64]
  01480		 |$LN37@TWL_Init|

; 904  :         goto cleanUp;

  01480	ea000009	 b           |$LN2@TWL_Init|
  01484	ea000008	 b           |$cleanUp$36618|
  01488		 |$LN3@TWL_Init|

; 905  :         }
; 906  : 
; 907  :     // Set thread priority
; 908  :     CeSetThreadPriority(pDevice->hIntrThread, pDevice->priority256);

  01488	e59d3008	 ldr         r3, [sp, #8]
  0148c	e283300c	 add         r3, r3, #0xC
  01490	e5931000	 ldr         r1, [r3]
  01494	e59d3008	 ldr         r3, [sp, #8]
  01498	e283303c	 add         r3, r3, #0x3C
  0149c	e5930000	 ldr         r0, [r3]
  014a0	eb000000	 bl          CeSetThreadPriority

; 909  : 
; 910  :     // Return non-null value
; 911  :     rc = (DWORD)pDevice;

  014a4	e59d3008	 ldr         r3, [sp, #8]
  014a8	e58d300c	 str         r3, [sp, #0xC]
  014ac		 |$LN2@TWL_Init|
  014ac		 |$LN4@TWL_Init|
  014ac		 |$LN6@TWL_Init|
  014ac		 |$LN8@TWL_Init|
  014ac		 |$LN10@TWL_Init|
  014ac		 |$LN12@TWL_Init|
  014ac		 |$LN14@TWL_Init|
  014ac		 |$LN16@TWL_Init|
  014ac		 |$cleanUp$36618|

; 912  :     
; 913  : cleanUp:
; 914  :     if (rc == 0) TWL_Deinit((DWORD)pDevice);

  014ac	e59d300c	 ldr         r3, [sp, #0xC]
  014b0	e3530000	 cmp         r3, #0
  014b4	1a000001	 bne         |$LN1@TWL_Init|
  014b8	e59d0008	 ldr         r0, [sp, #8]
  014bc	eb000000	 bl          |?TWL_Deinit@@YAHK@Z|
  014c0		 |$LN1@TWL_Init|

; 915  :     DEBUGMSG(ZONE_FUNCTION, (L"-TWL_Init(rc = %d\r\n", rc));

  014c0	e59f3044	 ldr         r3, [pc, #0x44]
  014c4	e5933440	 ldr         r3, [r3, #0x440]
  014c8	e3130004	 tst         r3, #4
  014cc	0a000005	 beq         |$LN38@TWL_Init|
  014d0	e59d100c	 ldr         r1, [sp, #0xC]
  014d4	e59f002c	 ldr         r0, [pc, #0x2C]
  014d8	eb000000	 bl          NKDbgPrintfW
  014dc	e3a03001	 mov         r3, #1
  014e0	e58d3068	 str         r3, [sp, #0x68]
  014e4	ea000001	 b           |$LN39@TWL_Init|
  014e8		 |$LN38@TWL_Init|
  014e8	e3a03000	 mov         r3, #0
  014ec	e58d3068	 str         r3, [sp, #0x68]
  014f0		 |$LN39@TWL_Init|

; 916  :     return rc;

  014f0	e59d300c	 ldr         r3, [sp, #0xC]
  014f4	e58d3018	 str         r3, [sp, #0x18]

; 917  : }

  014f8	e59d0018	 ldr         r0, [sp, #0x18]
  014fc	e28dd06c	 add         sp, sp, #0x6C
  01500	e89d6000	 ldmia       sp, {sp, lr}
  01504	e12fff1e	 bx          lr
  01508		 |$LN43@TWL_Init|
  01508		 |$LN44@TWL_Init|
  01508	00000000	 DCD         |??_C@_1CI@EOEIPNHJ@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0150c		 |$LN45@TWL_Init|
  0150c	00000000	 DCD         |dpCurSettings|
  01510		 |$LN46@TWL_Init|
  01510	00000000	 DCD         |??_C@_1GE@PGNGFJMI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  01514		 |$LN47@TWL_Init|
  01514	00000000	 DCD         |?TWL_InterruptThread@@YAKPAX@Z|
  01518		 |$LN48@TWL_Init|
  01518	00000000	 DCD         |??_C@_1FM@DGNECLFG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@|
  0151c		 |$LN49@TWL_Init|
  0151c	00000000	 DCD         |??_C@_1GC@NGHKLMFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  01520		 |$LN50@TWL_Init|
  01520	00000000	 DCD         |??_C@_1GO@CICNOGD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi@|
  01524		 |$LN51@TWL_Init|
  01524	00000000	 DCD         |s_pSIHRoutines|
  01528		 |$LN52@TWL_Init|
  01528	00000000	 DCD         |?ProcessSecondaryInterrupts@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z|
  0152c		 |$LN53@TWL_Init|
  0152c	00000000	 DCD         |?ProcessSecondaryInterrupts_USB@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z|
  01530		 |$LN54@TWL_Init|
  01530	00000000	 DCD         |?ProcessSecondaryInterrupts_Keypad@@YAHPAUDevice_t@@PAPAXPBUSIHEntry_t@@@Z|
  01534		 |$LN55@TWL_Init|
  01534	00000000	 DCD         |??_C@_1FO@CJPEBFJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@|
  01538		 |$LN56@TWL_Init|
  01538	00000000	 DCD         |??_C@_1FM@LOHDLJHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAI?$AA2?$AAC@|
  0153c		 |$LN57@TWL_Init|
  0153c	00000000	 DCD         |??_C@_1HM@DLLOHCNE@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAW?$AAL@|
  01540		 |$LN58@TWL_Init|
  01540	00000000	 DCD         |s_deviceRegParams|
  01544		 |$LN59@TWL_Init|
  01544	74776c44	 DCD         0x74776c44
  01548		 |$LN60@TWL_Init|
  01548	00000000	 DCD         |??_C@_1HI@MFEKFGBA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  0154c		 |$LN61@TWL_Init|
  0154c	00000000	 DCD         |??_C@_1DA@DEHICOJK@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01550		 |$M37318|

			 ENDP  ; |?TWL_Init@@YAKPBGPBX@Z|, TWL_Init

	EXPORT	|??_C@_1CO@JAMPJPMN@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@EGEHIKDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@PKNKJDDN@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|GPIOClose|
	IMPORT	|I2CClose|
	IMPORT	|GPIOInterruptDisable|
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|

  00060			 AREA	 |.pdata|, PDATA
|$T37351| DCD	|$LN19@TWL_Deinit|
	DCD	0x40008704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@JAMPJPMN@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@EGEHIKDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@PKNKJDDN@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01550			 AREA	 |.text|, CODE, ARM

  01550		 |?TWL_Deinit@@YAHK@Z| PROC		; TWL_Deinit

; 929  : {

  01550		 |$LN19@TWL_Deinit|
  01550	e1a0c00d	 mov         r12, sp
  01554	e92d0001	 stmdb       sp!, {r0}
  01558	e92d5000	 stmdb       sp!, {r12, lr}
  0155c	e24dd018	 sub         sp, sp, #0x18
  01560		 |$M37348|

; 930  :     BOOL rc = FALSE;

  01560	e3a03000	 mov         r3, #0
  01564	e58d3004	 str         r3, [sp, #4]

; 931  :     Device_t *pDevice = (Device_t*)context;

  01568	e59d3020	 ldr         r3, [sp, #0x20]
  0156c	e58d3000	 str         r3, [sp]

; 932  : 
; 933  : 
; 934  :     DEBUGMSG(ZONE_FUNCTION, (L"+TWL_Deinit(0x%08x)\r\n", context));

  01570	e59f31e4	 ldr         r3, [pc, #0x1E4]
  01574	e5933440	 ldr         r3, [r3, #0x440]
  01578	e3130004	 tst         r3, #4
  0157c	0a000005	 beq         |$LN11@TWL_Deinit|
  01580	e59d1020	 ldr         r1, [sp, #0x20]
  01584	e59f01dc	 ldr         r0, [pc, #0x1DC]
  01588	eb000000	 bl          NKDbgPrintfW
  0158c	e3a03001	 mov         r3, #1
  01590	e58d300c	 str         r3, [sp, #0xC]
  01594	ea000001	 b           |$LN12@TWL_Deinit|
  01598		 |$LN11@TWL_Deinit|
  01598	e3a03000	 mov         r3, #0
  0159c	e58d300c	 str         r3, [sp, #0xC]
  015a0		 |$LN12@TWL_Deinit|

; 935  : 
; 936  :     // Check if we get correct context
; 937  :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))

  015a0	e59d3000	 ldr         r3, [sp]
  015a4	e3530000	 cmp         r3, #0
  015a8	0a000004	 beq         |$LN7@TWL_Deinit|
  015ac	e59d3000	 ldr         r3, [sp]
  015b0	e5932000	 ldr         r2, [r3]
  015b4	e59f31a8	 ldr         r3, [pc, #0x1A8]
  015b8	e1520003	 cmp         r2, r3
  015bc	0a00000c	 beq         |$LN8@TWL_Deinit|
  015c0		 |$LN7@TWL_Deinit|

; 938  :         {
; 939  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: TWL_Deinit: "
; 940  :             L"Incorrect context paramer\r\n"
; 941  :             ));

  015c0	e59f3194	 ldr         r3, [pc, #0x194]
  015c4	e5933440	 ldr         r3, [r3, #0x440]
  015c8	e3130001	 tst         r3, #1
  015cc	0a000004	 beq         |$LN13@TWL_Deinit|
  015d0	e59f0188	 ldr         r0, [pc, #0x188]
  015d4	eb000000	 bl          NKDbgPrintfW
  015d8	e3a03001	 mov         r3, #1
  015dc	e58d3010	 str         r3, [sp, #0x10]
  015e0	ea000001	 b           |$LN14@TWL_Deinit|
  015e4		 |$LN13@TWL_Deinit|
  015e4	e3a03000	 mov         r3, #0
  015e8	e58d3010	 str         r3, [sp, #0x10]
  015ec		 |$LN14@TWL_Deinit|

; 942  :         goto cleanUp;

  015ec	ea000047	 b           |$LN6@TWL_Deinit|
  015f0	ea000046	 b           |$cleanUp$36666|
  015f4		 |$LN8@TWL_Deinit|

; 943  :         }
; 944  : 
; 945  :     // Close interrupt thread
; 946  :     if (pDevice->hIntrThread != NULL)

  015f4	e59d3000	 ldr         r3, [sp]
  015f8	e283303c	 add         r3, r3, #0x3C
  015fc	e5933000	 ldr         r3, [r3]
  01600	e3530000	 cmp         r3, #0
  01604	0a000010	 beq         |$LN5@TWL_Deinit|

; 947  :         {
; 948  :         // Signal stop to thread
; 949  :         pDevice->intrThreadExit = TRUE;

  01608	e59d3000	 ldr         r3, [sp]
  0160c	e2832040	 add         r2, r3, #0x40
  01610	e3a03001	 mov         r3, #1
  01614	e5823000	 str         r3, [r2]

; 950  :         // Set event to wake it
; 951  :         SetEvent(pDevice->hIntrEvent);

  01618	e59d3000	 ldr         r3, [sp]
  0161c	e2833038	 add         r3, r3, #0x38
  01620	e5930000	 ldr         r0, [r3]
  01624	eb000000	 bl          SetEvent

; 952  :         // Wait until thread exits
; 953  :         WaitForSingleObject(pDevice->hIntrThread, INFINITE);

  01628	e3e01000	 mvn         r1, #0
  0162c	e59d3000	 ldr         r3, [sp]
  01630	e283303c	 add         r3, r3, #0x3C
  01634	e5930000	 ldr         r0, [r3]
  01638	eb000000	 bl          WaitForSingleObject

; 954  :         // Close handle
; 955  :         CloseHandle(pDevice->hIntrThread);

  0163c	e59d3000	 ldr         r3, [sp]
  01640	e283303c	 add         r3, r3, #0x3C
  01644	e5930000	 ldr         r0, [r3]
  01648	eb000000	 bl          CloseHandle
  0164c		 |$LN5@TWL_Deinit|

; 956  :         }
; 957  : 
; 958  :     // Disable interrupt
; 959  :     if (pDevice->sysIntr != 0)

  0164c	e59d3000	 ldr         r3, [sp]
  01650	e2833030	 add         r3, r3, #0x30
  01654	e5933000	 ldr         r3, [r3]
  01658	e3530000	 cmp         r3, #0
  0165c	0a000009	 beq         |$LN4@TWL_Deinit|

; 960  :         {
; 961  :         GPIOInterruptDisable(pDevice->hGpio, pDevice->gpio, pDevice->sysIntr);

  01660	e59d3000	 ldr         r3, [sp]
  01664	e2833030	 add         r3, r3, #0x30
  01668	e5932000	 ldr         r2, [r3]
  0166c	e59d3000	 ldr         r3, [sp]
  01670	e2833008	 add         r3, r3, #8
  01674	e5931000	 ldr         r1, [r3]
  01678	e59d3000	 ldr         r3, [sp]
  0167c	e2833014	 add         r3, r3, #0x14
  01680	e5930000	 ldr         r0, [r3]
  01684	eb000000	 bl          GPIOInterruptDisable
  01688		 |$LN4@TWL_Deinit|

; 962  :         }
; 963  : 
; 964  :     // Close interrupt handler
; 965  :     if (pDevice->hIntrEvent != NULL) CloseHandle(pDevice->hIntrEvent);

  01688	e59d3000	 ldr         r3, [sp]
  0168c	e2833038	 add         r3, r3, #0x38
  01690	e5933000	 ldr         r3, [r3]
  01694	e3530000	 cmp         r3, #0
  01698	0a000003	 beq         |$LN3@TWL_Deinit|
  0169c	e59d3000	 ldr         r3, [sp]
  016a0	e2833038	 add         r3, r3, #0x38
  016a4	e5930000	 ldr         r0, [r3]
  016a8	eb000000	 bl          CloseHandle
  016ac		 |$LN3@TWL_Deinit|

; 966  : 
; 967  :     // Close I2C bus
; 968  :     if (pDevice->hI2C != NULL) I2CClose(pDevice->hI2C);

  016ac	e59d3000	 ldr         r3, [sp]
  016b0	e2833010	 add         r3, r3, #0x10
  016b4	e5933000	 ldr         r3, [r3]
  016b8	e3530000	 cmp         r3, #0
  016bc	0a000003	 beq         |$LN2@TWL_Deinit|
  016c0	e59d3000	 ldr         r3, [sp]
  016c4	e2833010	 add         r3, r3, #0x10
  016c8	e5930000	 ldr         r0, [r3]
  016cc	eb000000	 bl          I2CClose
  016d0		 |$LN2@TWL_Deinit|

; 969  : 
; 970  :     // close Gpio 
; 971  :     if (pDevice->hGpio != NULL) GPIOClose(pDevice->hGpio);

  016d0	e59d3000	 ldr         r3, [sp]
  016d4	e2833014	 add         r3, r3, #0x14
  016d8	e5933000	 ldr         r3, [r3]
  016dc	e3530000	 cmp         r3, #0
  016e0	0a000003	 beq         |$LN1@TWL_Deinit|
  016e4	e59d3000	 ldr         r3, [sp]
  016e8	e2833014	 add         r3, r3, #0x14
  016ec	e5930000	 ldr         r0, [r3]
  016f0	eb000000	 bl          GPIOClose
  016f4		 |$LN1@TWL_Deinit|

; 972  : 
; 973  :     // Delete critical section
; 974  :     DeleteCriticalSection(&pDevice->cs);

  016f4	e59d3000	 ldr         r3, [sp]
  016f8	e2830018	 add         r0, r3, #0x18
  016fc	eb000000	 bl          DeleteCriticalSection

; 975  : 
; 976  :     // Free device structure
; 977  :     LocalFree(pDevice);

  01700	e59d0000	 ldr         r0, [sp]
  01704	eb000000	 bl          LocalFree

; 978  : 
; 979  :     // Done
; 980  :     rc = TRUE;

  01708	e3a03001	 mov         r3, #1
  0170c	e58d3004	 str         r3, [sp, #4]
  01710		 |$LN6@TWL_Deinit|
  01710		 |$cleanUp$36666|

; 981  : 
; 982  : cleanUp:
; 983  :     DEBUGMSG(ZONE_FUNCTION, (L"-TWL_Deinit(rc = %d)\r\n", rc));

  01710	e59f3044	 ldr         r3, [pc, #0x44]
  01714	e5933440	 ldr         r3, [r3, #0x440]
  01718	e3130004	 tst         r3, #4
  0171c	0a000005	 beq         |$LN15@TWL_Deinit|
  01720	e59d1004	 ldr         r1, [sp, #4]
  01724	e59f002c	 ldr         r0, [pc, #0x2C]
  01728	eb000000	 bl          NKDbgPrintfW
  0172c	e3a03001	 mov         r3, #1
  01730	e58d3014	 str         r3, [sp, #0x14]
  01734	ea000001	 b           |$LN16@TWL_Deinit|
  01738		 |$LN15@TWL_Deinit|
  01738	e3a03000	 mov         r3, #0
  0173c	e58d3014	 str         r3, [sp, #0x14]
  01740		 |$LN16@TWL_Deinit|

; 984  :     return rc;

  01740	e59d3004	 ldr         r3, [sp, #4]
  01744	e58d3008	 str         r3, [sp, #8]

; 985  : }

  01748	e59d0008	 ldr         r0, [sp, #8]
  0174c	e28dd018	 add         sp, sp, #0x18
  01750	e89d6000	 ldmia       sp, {sp, lr}
  01754	e12fff1e	 bx          lr
  01758		 |$LN20@TWL_Deinit|
  01758		 |$LN21@TWL_Deinit|
  01758	00000000	 DCD         |??_C@_1CO@JAMPJPMN@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0175c		 |$LN22@TWL_Deinit|
  0175c	00000000	 DCD         |dpCurSettings|
  01760		 |$LN23@TWL_Deinit|
  01760	00000000	 DCD         |??_C@_1FO@EGEHIKDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  01764		 |$LN24@TWL_Deinit|
  01764	74776c44	 DCD         0x74776c44
  01768		 |$LN25@TWL_Deinit|
  01768	00000000	 DCD         |??_C@_1CM@PKNKJDDN@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0176c		 |$M37349|

			 ENDP  ; |?TWL_Deinit@@YAHK@Z|, TWL_Deinit

	EXPORT	|??_C@_1HE@EHLBAGMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|?TWL_Open@@YAKKKK@Z|			; TWL_Open

  00068			 AREA	 |.pdata|, PDATA
|$T37365| DCD	|$LN8@TWL_Open|
	DCD	0x40002f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@EHLBAGMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "T", 0x0, "W", 0x0, "L", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "n"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "u", 0x0, "c", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0176c			 AREA	 |.text|, CODE, ARM

  0176c		 |?TWL_Open@@YAKKKK@Z| PROC		; TWL_Open

; 999  : {

  0176c		 |$LN8@TWL_Open|
  0176c	e1a0c00d	 mov         r12, sp
  01770	e92d0007	 stmdb       sp!, {r0 - r2}
  01774	e92d5000	 stmdb       sp!, {r12, lr}
  01778	e24dd010	 sub         sp, sp, #0x10
  0177c		 |$M37362|

; 1000 :     Instance_t *pInstance = (Instance_t*)LocalAlloc(LPTR, sizeof(Instance_t));

  0177c	e3a0100c	 mov         r1, #0xC
  01780	e3a00040	 mov         r0, #0x40
  01784	eb000000	 bl          LocalAlloc
  01788	e58d0008	 str         r0, [sp, #8]
  0178c	e59d3008	 ldr         r3, [sp, #8]
  01790	e58d3000	 str         r3, [sp]

; 1001 : 
; 1002 :     UNREFERENCED_PARAMETER(accessCode);
; 1003 :     UNREFERENCED_PARAMETER(shareMode);
; 1004 : 
; 1005 :     if (pInstance == NULL)

  01794	e59d3000	 ldr         r3, [sp]
  01798	e3530000	 cmp         r3, #0
  0179c	1a00000d	 bne         |$LN1@TWL_Open|

; 1006 :     {
; 1007 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_Open: "
; 1008 :             L"Failed allocate TWL instance structure\r\n"
; 1009 :             ));

  017a0	e59f307c	 ldr         r3, [pc, #0x7C]
  017a4	e5933440	 ldr         r3, [r3, #0x440]
  017a8	e3130001	 tst         r3, #1
  017ac	0a000004	 beq         |$LN4@TWL_Open|
  017b0	e59f0068	 ldr         r0, [pc, #0x68]
  017b4	eb000000	 bl          NKDbgPrintfW
  017b8	e3a03001	 mov         r3, #1
  017bc	e58d300c	 str         r3, [sp, #0xC]
  017c0	ea000001	 b           |$LN5@TWL_Open|
  017c4		 |$LN4@TWL_Open|
  017c4	e3a03000	 mov         r3, #0
  017c8	e58d300c	 str         r3, [sp, #0xC]
  017cc		 |$LN5@TWL_Open|

; 1010 :         return NULL;

  017cc	e3a03000	 mov         r3, #0
  017d0	e58d3004	 str         r3, [sp, #4]
  017d4	ea00000c	 b           |$LN2@TWL_Open|
  017d8		 |$LN1@TWL_Open|

; 1011 :     }
; 1012 : 
; 1013 :     pInstance->cookie = TWL_INSTANCE_COOKIE;

  017d8	e59d2000	 ldr         r2, [sp]
  017dc	e59f3038	 ldr         r3, [pc, #0x38]
  017e0	e5823000	 str         r3, [r2]

; 1014 :     pInstance->pDevice = (Device_t*)context;

  017e4	e59d3000	 ldr         r3, [sp]
  017e8	e2832008	 add         r2, r3, #8
  017ec	e59d3018	 ldr         r3, [sp, #0x18]
  017f0	e5823000	 str         r3, [r2]

; 1015 :     pInstance->address = 0;

  017f4	e59d3000	 ldr         r3, [sp]
  017f8	e2832004	 add         r2, r3, #4
  017fc	e3a03000	 mov         r3, #0
  01800	e5823000	 str         r3, [r2]

; 1016 : 
; 1017 :     return (DWORD)pInstance;

  01804	e59d3000	 ldr         r3, [sp]
  01808	e58d3004	 str         r3, [sp, #4]
  0180c		 |$LN2@TWL_Open|

; 1018 : }

  0180c	e59d0004	 ldr         r0, [sp, #4]
  01810	e28dd010	 add         sp, sp, #0x10
  01814	e89d6000	 ldmia       sp, {sp, lr}
  01818	e12fff1e	 bx          lr
  0181c		 |$LN9@TWL_Open|
  0181c		 |$LN10@TWL_Open|
  0181c	74776c49	 DCD         0x74776c49
  01820		 |$LN11@TWL_Open|
  01820	00000000	 DCD         |??_C@_1HE@EHLBAGMH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  01824		 |$LN12@TWL_Open|
  01824	00000000	 DCD         |dpCurSettings|
  01828		 |$M37363|

			 ENDP  ; |?TWL_Open@@YAKKKK@Z|, TWL_Open

	EXPORT	|?TWL_Close@@YAHK@Z|			; TWL_Close

  00070			 AREA	 |.pdata|, PDATA
|$T37375| DCD	|$LN6@TWL_Close|
	DCD	0x40001b04
; Function compile flags: /Odtp

  01828			 AREA	 |.text|, CODE, ARM

  01828		 |?TWL_Close@@YAHK@Z| PROC		; TWL_Close

; 1030 : {

  01828		 |$LN6@TWL_Close|
  01828	e1a0c00d	 mov         r12, sp
  0182c	e92d0001	 stmdb       sp!, {r0}
  01830	e92d5000	 stmdb       sp!, {r12, lr}
  01834	e24dd00c	 sub         sp, sp, #0xC
  01838		 |$M37372|

; 1031 :     BOOL rc = FALSE;

  01838	e3a03000	 mov         r3, #0
  0183c	e58d3000	 str         r3, [sp]

; 1032 :     Instance_t *pInstance = (Instance_t*)context;

  01840	e59d3014	 ldr         r3, [sp, #0x14]
  01844	e58d3004	 str         r3, [sp, #4]

; 1033 : 
; 1034 :     if (pInstance != NULL && pInstance->cookie == TWL_INSTANCE_COOKIE)

  01848	e59d3004	 ldr         r3, [sp, #4]
  0184c	e3530000	 cmp         r3, #0
  01850	0a000008	 beq         |$LN1@TWL_Close|
  01854	e59d3004	 ldr         r3, [sp, #4]
  01858	e5932000	 ldr         r2, [r3]
  0185c	e59f302c	 ldr         r3, [pc, #0x2C]
  01860	e1520003	 cmp         r2, r3
  01864	1a000003	 bne         |$LN1@TWL_Close|

; 1035 :         {
; 1036 :         LocalFree(pInstance);

  01868	e59d0004	 ldr         r0, [sp, #4]
  0186c	eb000000	 bl          LocalFree

; 1037 :         rc = TRUE;

  01870	e3a03001	 mov         r3, #1
  01874	e58d3000	 str         r3, [sp]
  01878		 |$LN1@TWL_Close|

; 1038 :         }
; 1039 :     
; 1040 :     return rc;

  01878	e59d3000	 ldr         r3, [sp]
  0187c	e58d3008	 str         r3, [sp, #8]

; 1041 : }

  01880	e59d0008	 ldr         r0, [sp, #8]
  01884	e28dd00c	 add         sp, sp, #0xC
  01888	e89d6000	 ldmia       sp, {sp, lr}
  0188c	e12fff1e	 bx          lr
  01890		 |$LN7@TWL_Close|
  01890		 |$LN8@TWL_Close|
  01890	74776c49	 DCD         0x74776c49
  01894		 |$M37373|

			 ENDP  ; |?TWL_Close@@YAHK@Z|, TWL_Close

	EXPORT	|?TWL_Read@@YAKKPAXK@Z|			; TWL_Read

  00078			 AREA	 |.pdata|, PDATA
|$T37383| DCD	|$LN8@TWL_Read|
	DCD	0x40002304
; Function compile flags: /Odtp

  01894			 AREA	 |.text|, CODE, ARM

  01894		 |?TWL_Read@@YAKKPAXK@Z| PROC		; TWL_Read

; 1055 : {

  01894		 |$LN8@TWL_Read|
  01894	e1a0c00d	 mov         r12, sp
  01898	e92d0007	 stmdb       sp!, {r0 - r2}
  0189c	e92d5000	 stmdb       sp!, {r12, lr}
  018a0	e24dd00c	 sub         sp, sp, #0xC
  018a4		 |$M37380|

; 1056 :     Instance_t *pInstance = (Instance_t*)context;

  018a4	e59d3014	 ldr         r3, [sp, #0x14]
  018a8	e58d3000	 str         r3, [sp]

; 1057 : 
; 1058 :     if (pInstance == NULL || pInstance->cookie != TWL_INSTANCE_COOKIE)

  018ac	e59d3000	 ldr         r3, [sp]
  018b0	e3530000	 cmp         r3, #0
  018b4	0a000004	 beq         |$LN2@TWL_Read|
  018b8	e59d3000	 ldr         r3, [sp]
  018bc	e5932000	 ldr         r2, [r3]
  018c0	e59f3054	 ldr         r3, [pc, #0x54]
  018c4	e1520003	 cmp         r2, r3
  018c8	0a000003	 beq         |$LN3@TWL_Read|
  018cc		 |$LN2@TWL_Read|

; 1059 :         {
; 1060 :         count = 0;

  018cc	e3a03000	 mov         r3, #0
  018d0	e58d301c	 str         r3, [sp, #0x1C]
  018d4	ea00000a	 b           |$LN1@TWL_Read|

; 1061 :         goto cleanUp;

  018d8	ea000009	 b           |$cleanUp$36704|
  018dc		 |$LN3@TWL_Read|

; 1062 :         }
; 1063 : 
; 1064 :     count = TWL_ReadRegs(context, pInstance->address, pBuffer, count);

  018dc	e59d301c	 ldr         r3, [sp, #0x1C]
  018e0	e59d2018	 ldr         r2, [sp, #0x18]
  018e4	e59d1000	 ldr         r1, [sp]
  018e8	e2811004	 add         r1, r1, #4
  018ec	e5911000	 ldr         r1, [r1]
  018f0	e59d0014	 ldr         r0, [sp, #0x14]
  018f4	eb000000	 bl          |?TWL_ReadRegs@@YAHKKPAXK@Z|
  018f8	e58d0008	 str         r0, [sp, #8]
  018fc	e59d3008	 ldr         r3, [sp, #8]
  01900	e58d301c	 str         r3, [sp, #0x1C]
  01904		 |$LN1@TWL_Read|
  01904		 |$cleanUp$36704|

; 1065 : 
; 1066 : cleanUp:
; 1067 :     return count;

  01904	e59d301c	 ldr         r3, [sp, #0x1C]
  01908	e58d3004	 str         r3, [sp, #4]

; 1068 : }

  0190c	e59d0004	 ldr         r0, [sp, #4]
  01910	e28dd00c	 add         sp, sp, #0xC
  01914	e89d6000	 ldmia       sp, {sp, lr}
  01918	e12fff1e	 bx          lr
  0191c		 |$LN9@TWL_Read|
  0191c		 |$LN10@TWL_Read|
  0191c	74776c49	 DCD         0x74776c49
  01920		 |$M37381|

			 ENDP  ; |?TWL_Read@@YAKKPAXK@Z|, TWL_Read

	EXPORT	|?TWL_Write@@YAKKPBXK@Z|		; TWL_Write

  00080			 AREA	 |.pdata|, PDATA
|$T37391| DCD	|$LN9@TWL_Write|
	DCD	0x40002604
; Function compile flags: /Odtp

  01920			 AREA	 |.text|, CODE, ARM

  01920		 |?TWL_Write@@YAKKPBXK@Z| PROC		; TWL_Write

; 1082 : {

  01920		 |$LN9@TWL_Write|
  01920	e1a0c00d	 mov         r12, sp
  01924	e92d0007	 stmdb       sp!, {r0 - r2}
  01928	e92d5000	 stmdb       sp!, {r12, lr}
  0192c	e24dd00c	 sub         sp, sp, #0xC
  01930		 |$M37388|

; 1083 :     Instance_t *pInstance = (Instance_t*)context;

  01930	e59d3014	 ldr         r3, [sp, #0x14]
  01934	e58d3000	 str         r3, [sp]

; 1084 : 
; 1085 :     if (pInstance == NULL || pInstance->cookie != TWL_INSTANCE_COOKIE)

  01938	e59d3000	 ldr         r3, [sp]
  0193c	e3530000	 cmp         r3, #0
  01940	0a000004	 beq         |$LN3@TWL_Write|
  01944	e59d3000	 ldr         r3, [sp]
  01948	e5932000	 ldr         r2, [r3]
  0194c	e59f3060	 ldr         r3, [pc, #0x60]
  01950	e1520003	 cmp         r2, r3
  01954	0a000003	 beq         |$LN4@TWL_Write|
  01958		 |$LN3@TWL_Write|

; 1086 :         {
; 1087 :         count = 0;

  01958	e3a03000	 mov         r3, #0
  0195c	e58d301c	 str         r3, [sp, #0x1C]
  01960	ea00000d	 b           |$LN2@TWL_Write|

; 1088 :         goto cleanUp;

  01964	ea00000c	 b           |$cleanUp$36715|
  01968		 |$LN4@TWL_Write|

; 1089 :         }
; 1090 : 
; 1091 :     if (TWL_WriteRegs(context, pInstance->address, pBuffer, count) == FALSE)

  01968	e59d301c	 ldr         r3, [sp, #0x1C]
  0196c	e59d2018	 ldr         r2, [sp, #0x18]
  01970	e59d1000	 ldr         r1, [sp]
  01974	e2811004	 add         r1, r1, #4
  01978	e5911000	 ldr         r1, [r1]
  0197c	e59d0014	 ldr         r0, [sp, #0x14]
  01980	eb000000	 bl          |?TWL_WriteRegs@@YAHKKPBXK@Z|
  01984	e58d0008	 str         r0, [sp, #8]
  01988	e59d3008	 ldr         r3, [sp, #8]
  0198c	e3530000	 cmp         r3, #0
  01990	1a000001	 bne         |$LN1@TWL_Write|

; 1092 :         {
; 1093 :         count = 0;

  01994	e3a03000	 mov         r3, #0
  01998	e58d301c	 str         r3, [sp, #0x1C]
  0199c		 |$LN1@TWL_Write|
  0199c		 |$LN2@TWL_Write|
  0199c		 |$cleanUp$36715|

; 1094 :         }
; 1095 : 
; 1096 : cleanUp:
; 1097 :     return count;

  0199c	e59d301c	 ldr         r3, [sp, #0x1C]
  019a0	e58d3004	 str         r3, [sp, #4]

; 1098 : }

  019a4	e59d0004	 ldr         r0, [sp, #4]
  019a8	e28dd00c	 add         sp, sp, #0xC
  019ac	e89d6000	 ldmia       sp, {sp, lr}
  019b0	e12fff1e	 bx          lr
  019b4		 |$LN10@TWL_Write|
  019b4		 |$LN11@TWL_Write|
  019b4	74776c49	 DCD         0x74776c49
  019b8		 |$M37389|

			 ENDP  ; |?TWL_Write@@YAKKPBXK@Z|, TWL_Write

	EXPORT	|?TWL_Seek@@YAHKJG@Z|			; TWL_Seek

  00088			 AREA	 |.pdata|, PDATA
|$T37399| DCD	|$LN8@TWL_Seek|
	DCD	0x40001f04
; Function compile flags: /Odtp

  019b8			 AREA	 |.text|, CODE, ARM

  019b8		 |?TWL_Seek@@YAHKJG@Z| PROC		; TWL_Seek

; 1112 : {

  019b8		 |$LN8@TWL_Seek|
  019b8	e1a0c00d	 mov         r12, sp
  019bc	e92d0007	 stmdb       sp!, {r0 - r2}
  019c0	e92d5000	 stmdb       sp!, {r12, lr}
  019c4	e24dd00c	 sub         sp, sp, #0xC
  019c8		 |$M37396|

; 1113 :     BOOL rc = FALSE;

  019c8	e3a03000	 mov         r3, #0
  019cc	e58d3000	 str         r3, [sp]

; 1114 :     Instance_t *pInstance = (Instance_t*)context;

  019d0	e59d3014	 ldr         r3, [sp, #0x14]
  019d4	e58d3004	 str         r3, [sp, #4]

; 1115 : 
; 1116 :     UNREFERENCED_PARAMETER(type);
; 1117 : 
; 1118 :     if (pInstance == NULL || pInstance->cookie != TWL_INSTANCE_COOKIE)

  019d8	e59d3004	 ldr         r3, [sp, #4]
  019dc	e3530000	 cmp         r3, #0
  019e0	0a000004	 beq         |$LN2@TWL_Seek|
  019e4	e59d3004	 ldr         r3, [sp, #4]
  019e8	e5932000	 ldr         r2, [r3]
  019ec	e59f303c	 ldr         r3, [pc, #0x3C]
  019f0	e1520003	 cmp         r2, r3
  019f4	0a000001	 beq         |$LN3@TWL_Seek|
  019f8		 |$LN2@TWL_Seek|

; 1119 :         {
; 1120 :         goto cleanUp;

  019f8	ea000006	 b           |$LN1@TWL_Seek|
  019fc	ea000005	 b           |$cleanUp$36728|
  01a00		 |$LN3@TWL_Seek|

; 1121 :         }
; 1122 : 
; 1123 :     pInstance->address = amount;

  01a00	e59d3004	 ldr         r3, [sp, #4]
  01a04	e2832004	 add         r2, r3, #4
  01a08	e59d3018	 ldr         r3, [sp, #0x18]
  01a0c	e5823000	 str         r3, [r2]

; 1124 :     
; 1125 :     rc = TRUE;

  01a10	e3a03001	 mov         r3, #1
  01a14	e58d3000	 str         r3, [sp]
  01a18		 |$LN1@TWL_Seek|
  01a18		 |$cleanUp$36728|

; 1126 : 
; 1127 : cleanUp:
; 1128 :     return rc;

  01a18	e59d3000	 ldr         r3, [sp]
  01a1c	e58d3008	 str         r3, [sp, #8]

; 1129 : }

  01a20	e59d0008	 ldr         r0, [sp, #8]
  01a24	e28dd00c	 add         sp, sp, #0xC
  01a28	e89d6000	 ldmia       sp, {sp, lr}
  01a2c	e12fff1e	 bx          lr
  01a30		 |$LN9@TWL_Seek|
  01a30		 |$LN10@TWL_Seek|
  01a30	74776c49	 DCD         0x74776c49
  01a34		 |$M37397|

			 ENDP  ; |?TWL_Seek@@YAHKJG@Z|, TWL_Seek

	EXPORT	|?TWL_PowerUp@@YAXK@Z|			; TWL_PowerUp

  00090			 AREA	 |.pdata|, PDATA
|$T37408| DCD	|$LN9@TWL_PowerU|
	DCD	0x40002804
; Function compile flags: /Odtp

  01a34			 AREA	 |.text|, CODE, ARM

  01a34		 |?TWL_PowerUp@@YAXK@Z| PROC		; TWL_PowerUp

; 1141 : {

  01a34		 |$LN9@TWL_PowerU|
  01a34	e1a0c00d	 mov         r12, sp
  01a38	e92d0001	 stmdb       sp!, {r0}
  01a3c	e92d5000	 stmdb       sp!, {r12, lr}
  01a40	e24dd008	 sub         sp, sp, #8
  01a44		 |$M37405|

; 1142 :     Device_t *pDevice = (Device_t*)context;

  01a44	e59d3010	 ldr         r3, [sp, #0x10]
  01a48	e58d3000	 str         r3, [sp]

; 1143 : 
; 1144 :     // Check if we get correct context
; 1145 :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))

  01a4c	e59d3000	 ldr         r3, [sp]
  01a50	e3530000	 cmp         r3, #0
  01a54	0a000004	 beq         |$LN1@TWL_PowerU|
  01a58	e59d3000	 ldr         r3, [sp]
  01a5c	e5932000	 ldr         r2, [r3]
  01a60	e59f3068	 ldr         r3, [pc, #0x68]
  01a64	e1520003	 cmp         r2, r3
  01a68	0a00000b	 beq         |$LN2@TWL_PowerU|
  01a6c		 |$LN1@TWL_PowerU|

; 1146 :         {
; 1147 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: TWL_Deinit: "
; 1148 :             L"Incorrect context paramer\r\n"
; 1149 :             ));

  01a6c	e59f3058	 ldr         r3, [pc, #0x58]
  01a70	e5933440	 ldr         r3, [r3, #0x440]
  01a74	e3130001	 tst         r3, #1
  01a78	0a000004	 beq         |$LN5@TWL_PowerU|
  01a7c	e59f0044	 ldr         r0, [pc, #0x44]
  01a80	eb000000	 bl          NKDbgPrintfW
  01a84	e3a03001	 mov         r3, #1
  01a88	e58d3004	 str         r3, [sp, #4]
  01a8c	ea000001	 b           |$LN6@TWL_PowerU|
  01a90		 |$LN5@TWL_PowerU|
  01a90	e3a03000	 mov         r3, #0
  01a94	e58d3004	 str         r3, [sp, #4]
  01a98		 |$LN6@TWL_PowerU|

; 1150 :         return;

  01a98	ea000007	 b           |$LN3@TWL_PowerU|
  01a9c		 |$LN2@TWL_PowerU|

; 1151 :         }
; 1152 :     
; 1153 :     GPIOSetMode(pDevice->hGpio, pDevice->gpio, GPIO_DIR_INPUT | GPIO_INT_LOW);

  01a9c	e3a02009	 mov         r2, #9
  01aa0	e59d3000	 ldr         r3, [sp]
  01aa4	e2833008	 add         r3, r3, #8
  01aa8	e5931000	 ldr         r1, [r3]
  01aac	e59d3000	 ldr         r3, [sp]
  01ab0	e2833014	 add         r3, r3, #0x14
  01ab4	e5930000	 ldr         r0, [r3]
  01ab8	eb000000	 bl          GPIOSetMode
  01abc		 |$LN3@TWL_PowerU|

; 1154 : }

  01abc	e28dd008	 add         sp, sp, #8
  01ac0	e89d6000	 ldmia       sp, {sp, lr}
  01ac4	e12fff1e	 bx          lr
  01ac8		 |$LN10@TWL_PowerU|
  01ac8		 |$LN11@TWL_PowerU|
  01ac8	00000000	 DCD         |??_C@_1FO@EGEHIKDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  01acc		 |$LN12@TWL_PowerU|
  01acc	00000000	 DCD         |dpCurSettings|
  01ad0		 |$LN13@TWL_PowerU|
  01ad0	74776c44	 DCD         0x74776c44
  01ad4		 |$M37406|

			 ENDP  ; |?TWL_PowerUp@@YAXK@Z|, TWL_PowerUp

	EXPORT	|?TWL_PowerDown@@YAXK@Z|		; TWL_PowerDown

  00098			 AREA	 |.pdata|, PDATA
|$T37419| DCD	|$LN9@TWL_PowerD|
	DCD	0x40002804
; Function compile flags: /Odtp

  01ad4			 AREA	 |.text|, CODE, ARM

  01ad4		 |?TWL_PowerDown@@YAXK@Z| PROC		; TWL_PowerDown

; 1166 : {

  01ad4		 |$LN9@TWL_PowerD|
  01ad4	e1a0c00d	 mov         r12, sp
  01ad8	e92d0001	 stmdb       sp!, {r0}
  01adc	e92d5000	 stmdb       sp!, {r12, lr}
  01ae0	e24dd008	 sub         sp, sp, #8
  01ae4		 |$M37416|

; 1167 :     Device_t *pDevice = (Device_t*)context;

  01ae4	e59d3010	 ldr         r3, [sp, #0x10]
  01ae8	e58d3000	 str         r3, [sp]

; 1168 : 
; 1169 :     // Check if we get correct context
; 1170 :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))

  01aec	e59d3000	 ldr         r3, [sp]
  01af0	e3530000	 cmp         r3, #0
  01af4	0a000004	 beq         |$LN1@TWL_PowerD|
  01af8	e59d3000	 ldr         r3, [sp]
  01afc	e5932000	 ldr         r2, [r3]
  01b00	e59f3068	 ldr         r3, [pc, #0x68]
  01b04	e1520003	 cmp         r2, r3
  01b08	0a00000b	 beq         |$LN2@TWL_PowerD|
  01b0c		 |$LN1@TWL_PowerD|

; 1171 :         {
; 1172 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: TWL_Deinit: "
; 1173 :             L"Incorrect context paramer\r\n"
; 1174 :             ));

  01b0c	e59f3058	 ldr         r3, [pc, #0x58]
  01b10	e5933440	 ldr         r3, [r3, #0x440]
  01b14	e3130001	 tst         r3, #1
  01b18	0a000004	 beq         |$LN5@TWL_PowerD|
  01b1c	e59f0044	 ldr         r0, [pc, #0x44]
  01b20	eb000000	 bl          NKDbgPrintfW
  01b24	e3a03001	 mov         r3, #1
  01b28	e58d3004	 str         r3, [sp, #4]
  01b2c	ea000001	 b           |$LN6@TWL_PowerD|
  01b30		 |$LN5@TWL_PowerD|
  01b30	e3a03000	 mov         r3, #0
  01b34	e58d3004	 str         r3, [sp, #4]
  01b38		 |$LN6@TWL_PowerD|

; 1175 :         return;

  01b38	ea000007	 b           |$LN3@TWL_PowerD|
  01b3c		 |$LN2@TWL_PowerD|

; 1176 :         }
; 1177 : 
; 1178 :     // OMAP only wakes-up from edge detections but we enable both edge and 
; 1179 :     // level to make sure we don't drop an interrupt
; 1180 :     GPIOSetMode(pDevice->hGpio, pDevice->gpio, 
; 1181 :         GPIO_DIR_INPUT | GPIO_INT_HIGH_LOW | GPIO_INT_LOW
; 1182 :         );

  01b3c	e3a0200d	 mov         r2, #0xD
  01b40	e59d3000	 ldr         r3, [sp]
  01b44	e2833008	 add         r3, r3, #8
  01b48	e5931000	 ldr         r1, [r3]
  01b4c	e59d3000	 ldr         r3, [sp]
  01b50	e2833014	 add         r3, r3, #0x14
  01b54	e5930000	 ldr         r0, [r3]
  01b58	eb000000	 bl          GPIOSetMode
  01b5c		 |$LN3@TWL_PowerD|

; 1183 : }

  01b5c	e28dd008	 add         sp, sp, #8
  01b60	e89d6000	 ldmia       sp, {sp, lr}
  01b64	e12fff1e	 bx          lr
  01b68		 |$LN10@TWL_PowerD|
  01b68		 |$LN11@TWL_PowerD|
  01b68	00000000	 DCD         |??_C@_1FO@EGEHIKDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  01b6c		 |$LN12@TWL_PowerD|
  01b6c	00000000	 DCD         |dpCurSettings|
  01b70		 |$LN13@TWL_PowerD|
  01b70	74776c44	 DCD         0x74776c44
  01b74		 |$M37417|

			 ENDP  ; |?TWL_PowerDown@@YAXK@Z|, TWL_PowerDown

	EXPORT	|__$ArrayPad$| [ DATA ]

  000a0			 AREA	 |.pdata|, PDATA
|$T37433| DCD	|$LN14@TWL_ReadRe|
	DCD	0xc0005104

  0000c			 AREA	 |.xdata|, DATA
|$T37429| DCD	0xffffffd0
; Function compile flags: /Odtp

  01b74			 AREA	 |.text|, CODE, ARM

  01b74	00000000	 DCD         |__GSHandlerCheck|
  01b78	00000000	 DCD         |$T37429|

  01b7c		 |?TWL_ReadRegs@@YAHKKPAXK@Z| PROC	; TWL_ReadRegs

; 1195 : {

  01b7c		 |$LN14@TWL_ReadRe|
  01b7c	e1a0c00d	 mov         r12, sp
  01b80	e92d000f	 stmdb       sp!, {r0 - r3}
  01b84	e92d5000	 stmdb       sp!, {r12, lr}
  01b88	e24dd028	 sub         sp, sp, #0x28
  01b8c		 |$M37430|
  01b8c	e59f3128	 ldr         r3, [pc, #0x128]
  01b90	e5933000	 ldr         r3, [r3]
  01b94	e58d3010	 str         r3, [sp, #0x10]

; 1196 :     BOOL rc = FALSE;

  01b98	e3a03000	 mov         r3, #0
  01b9c	e58d3004	 str         r3, [sp, #4]

; 1197 :     UINT8 matrix[TWL_KEYPAD_ROWS];
; 1198 :     Device_t *pDevice = ((Instance_t*)context)->pDevice;

  01ba0	e59d3030	 ldr         r3, [sp, #0x30]
  01ba4	e2833008	 add         r3, r3, #8
  01ba8	e5933000	 ldr         r3, [r3]
  01bac	e58d3000	 str         r3, [sp]

; 1199 : /*
; 1200 :     // Check if we get correct context
; 1201 :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))
; 1202 :         {
; 1203 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_ReadRegs: "
; 1204 :             L"Incorrect context parameter\r\n"
; 1205 :             ));
; 1206 :         goto cleanUp;
; 1207 :         }
; 1208 : */
; 1209 :     if (size > 0xFF) goto cleanUp;

  01bb0	e59d303c	 ldr         r3, [sp, #0x3C]
  01bb4	e35300ff	 cmp         r3, #0xFF
  01bb8	9a000001	 bls         |$LN7@TWL_ReadRe|
  01bbc	ea000035	 b           |$LN6@TWL_ReadRe|
  01bc0	ea000034	 b           |$cleanUp$36757|
  01bc4		 |$LN7@TWL_ReadRe|

; 1210 : 
; 1211 :     // check for cached keypad state values
; 1212 :     if (address == TWL_LOGADDR_FULL_CODE_7_0)

  01bc4	e59d2034	 ldr         r2, [sp, #0x34]
  01bc8	e3a030db	 mov         r3, #0xDB
  01bcc	e24338fe	 sub         r3, r3, #0xFE, 16
  01bd0	e1520003	 cmp         r2, r3
  01bd4	1a000027	 bne         |$LN5@TWL_ReadRe|

; 1213 :         {
; 1214 :         // if null buffer or zero count return back number of bytes
; 1215 :         // in queue which needs to be read out
; 1216 :         if (pBuffer == NULL)

  01bd8	e59d3038	 ldr         r3, [sp, #0x38]
  01bdc	e3530000	 cmp         r3, #0
  01be0	1a000004	 bne         |$LN4@TWL_ReadRe|

; 1217 :             {
; 1218 :             rc = _nKeypadMatrixQueueCount;

  01be4	e59f30cc	 ldr         r3, [pc, #0xCC]
  01be8	e5933000	 ldr         r3, [r3]
  01bec	e58d3004	 str         r3, [sp, #4]
  01bf0	ea000028	 b           |$LN3@TWL_ReadRe|

; 1219 :             goto cleanUp;

  01bf4	ea000027	 b           |$cleanUp$36757|
  01bf8		 |$LN4@TWL_ReadRe|

; 1220 :             }
; 1221 : 
; 1222 :         // get cached keypad scan keys from internal queue
; 1223 :         size = min(size, TWL_KEYPAD_ROWS);

  01bf8	e59d303c	 ldr         r3, [sp, #0x3C]
  01bfc	e3530008	 cmp         r3, #8
  01c00	2a000002	 bcs         |$LN10@TWL_ReadRe|
  01c04	e59d303c	 ldr         r3, [sp, #0x3C]
  01c08	e58d3018	 str         r3, [sp, #0x18]
  01c0c	ea000001	 b           |$LN11@TWL_ReadRe|
  01c10		 |$LN10@TWL_ReadRe|
  01c10	e3a03008	 mov         r3, #8
  01c14	e58d3018	 str         r3, [sp, #0x18]
  01c18		 |$LN11@TWL_ReadRe|
  01c18	e59d3018	 ldr         r3, [sp, #0x18]
  01c1c	e58d303c	 str         r3, [sp, #0x3C]

; 1224 :         if (ReadKeypadMatrixQueue(matrix, GetFirstEventByGroup(pDevice, 1)) == FALSE)

  01c20	e3a01001	 mov         r1, #1
  01c24	e59d0000	 ldr         r0, [sp]
  01c28	eb000000	 bl          |?GetFirstEventByGroup@@YAPAPAXPAUDevice_t@@K@Z|
  01c2c	e58d001c	 str         r0, [sp, #0x1C]
  01c30	e59d101c	 ldr         r1, [sp, #0x1C]
  01c34	e28d0008	 add         r0, sp, #8
  01c38	eb000000	 bl          |?ReadKeypadMatrixQueue@@YAHQAEPAX@Z|
  01c3c	e58d0020	 str         r0, [sp, #0x20]
  01c40	e59d3020	 ldr         r3, [sp, #0x20]
  01c44	e3530000	 cmp         r3, #0
  01c48	1a000003	 bne         |$LN2@TWL_ReadRe|

; 1225 :             {
; 1226 :             // read TWL_KEYPAD_ROWS amount of rows...
; 1227 :             memset(matrix, 0, sizeof(matrix));

  01c4c	e3a02008	 mov         r2, #8
  01c50	e3a01000	 mov         r1, #0
  01c54	e28d0008	 add         r0, sp, #8
  01c58	eb000000	 bl          memset
  01c5c		 |$LN2@TWL_ReadRe|

; 1228 :             }
; 1229 :         memcpy(pBuffer, matrix, size);

  01c5c	e59d203c	 ldr         r2, [sp, #0x3C]
  01c60	e28d1008	 add         r1, sp, #8
  01c64	e59d0038	 ldr         r0, [sp, #0x38]
  01c68	eb000000	 bl          memcpy

; 1230 :         rc = TRUE;

  01c6c	e3a03001	 mov         r3, #1
  01c70	e58d3004	 str         r3, [sp, #4]

; 1231 :         }
; 1232 :     else

  01c74	ea000007	 b           |$LN1@TWL_ReadRe|
  01c78		 |$LN5@TWL_ReadRe|

; 1233 :         {
; 1234 :         rc = ReadRegs(pDevice, address, pBuffer, size);

  01c78	e59d303c	 ldr         r3, [sp, #0x3C]
  01c7c	e59d2038	 ldr         r2, [sp, #0x38]
  01c80	e59d1034	 ldr         r1, [sp, #0x34]
  01c84	e59d0000	 ldr         r0, [sp]
  01c88	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|
  01c8c	e58d0024	 str         r0, [sp, #0x24]
  01c90	e59d3024	 ldr         r3, [sp, #0x24]
  01c94	e58d3004	 str         r3, [sp, #4]
  01c98		 |$LN1@TWL_ReadRe|
  01c98		 |$LN3@TWL_ReadRe|
  01c98		 |$LN6@TWL_ReadRe|
  01c98		 |$cleanUp$36757|

; 1235 :         }
; 1236 : 
; 1237 : cleanUp:
; 1238 :     return rc;

  01c98	e59d0010	 ldr         r0, [sp, #0x10]
  01c9c	eb000000	 bl          __security_check_cookie
  01ca0	e59d3004	 ldr         r3, [sp, #4]
  01ca4	e58d3014	 str         r3, [sp, #0x14]

; 1239 : }

  01ca8	e59d0014	 ldr         r0, [sp, #0x14]
  01cac	e28dd028	 add         sp, sp, #0x28
  01cb0	e89d6000	 ldmia       sp, {sp, lr}
  01cb4	e12fff1e	 bx          lr
  01cb8		 |$LN15@TWL_ReadRe|
  01cb8		 |$LN16@TWL_ReadRe|
  01cb8	00000000	 DCD         |?_nKeypadMatrixQueueCount@@3JA|
  01cbc		 |$LN17@TWL_ReadRe|
  01cbc	00000000	 DCD         |__security_cookie|
  01cc0		 |$M37431|

			 ENDP  ; |?TWL_ReadRegs@@YAHKKPAXK@Z|, TWL_ReadRegs


  000a8			 AREA	 |.pdata|, PDATA
|$T37442| DCD	|$LN9@TWL_WriteR|
	DCD	0x40002204
; Function compile flags: /Odtp

  01cc0			 AREA	 |.text|, CODE, ARM

  01cc0		 |?TWL_WriteRegs@@YAHKKPBXK@Z| PROC	; TWL_WriteRegs

; 1251 : {

  01cc0		 |$LN9@TWL_WriteR|
  01cc0	e1a0c00d	 mov         r12, sp
  01cc4	e92d000f	 stmdb       sp!, {r0 - r3}
  01cc8	e92d5000	 stmdb       sp!, {r12, lr}
  01ccc	e24dd010	 sub         sp, sp, #0x10
  01cd0		 |$M37439|

; 1252 :     BOOL rc = FALSE;

  01cd0	e3a03000	 mov         r3, #0
  01cd4	e58d3004	 str         r3, [sp, #4]

; 1253 :     Device_t *pDevice = ((Instance_t*)context)->pDevice;

  01cd8	e59d3018	 ldr         r3, [sp, #0x18]
  01cdc	e2833008	 add         r3, r3, #8
  01ce0	e5933000	 ldr         r3, [r3]
  01ce4	e58d3000	 str         r3, [sp]

; 1254 : /*
; 1255 :     // Check if we get correct context
; 1256 :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))
; 1257 :         {
; 1258 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_WriteRegs: "
; 1259 :             L"Incorrect context parameter\r\n"
; 1260 :             ));
; 1261 :         goto cleanUp;
; 1262 :         }
; 1263 : */
; 1264 :     if (size > 0xFF) goto cleanUp;

  01ce8	e59d3024	 ldr         r3, [sp, #0x24]
  01cec	e35300ff	 cmp         r3, #0xFF
  01cf0	9a000001	 bls         |$LN4@TWL_WriteR|
  01cf4	ea00000d	 b           |$LN3@TWL_WriteR|
  01cf8	ea00000c	 b           |$cleanUp$36774|
  01cfc		 |$LN4@TWL_WriteR|

; 1265 :     if (address & 0xFF000000) goto cleanUp;

  01cfc	e59d301c	 ldr         r3, [sp, #0x1C]
  01d00	e31304ff	 tst         r3, #0xFF, 8
  01d04	0a000001	 beq         |$LN2@TWL_WriteR|
  01d08	ea000008	 b           |$LN1@TWL_WriteR|
  01d0c	ea000007	 b           |$cleanUp$36774|
  01d10		 |$LN2@TWL_WriteR|

; 1266 : 
; 1267 :     rc = WriteRegs(pDevice, address, pBuffer, size);

  01d10	e59d3024	 ldr         r3, [sp, #0x24]
  01d14	e59d2020	 ldr         r2, [sp, #0x20]
  01d18	e59d101c	 ldr         r1, [sp, #0x1C]
  01d1c	e59d0000	 ldr         r0, [sp]
  01d20	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|
  01d24	e58d000c	 str         r0, [sp, #0xC]
  01d28	e59d300c	 ldr         r3, [sp, #0xC]
  01d2c	e58d3004	 str         r3, [sp, #4]
  01d30		 |$LN1@TWL_WriteR|
  01d30		 |$LN3@TWL_WriteR|
  01d30		 |$cleanUp$36774|

; 1268 :     
; 1269 : cleanUp:
; 1270 :     return rc;

  01d30	e59d3004	 ldr         r3, [sp, #4]
  01d34	e58d3008	 str         r3, [sp, #8]

; 1271 : }

  01d38	e59d0008	 ldr         r0, [sp, #8]
  01d3c	e28dd010	 add         sp, sp, #0x10
  01d40	e89d6000	 ldmia       sp, {sp, lr}
  01d44	e12fff1e	 bx          lr
  01d48		 |$M37440|

			 ENDP  ; |?TWL_WriteRegs@@YAHKKPBXK@Z|, TWL_WriteRegs

	EXPORT	|??_C@_1HI@NFLLDFGD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAr?$AAi?$AAt?$AAo?$AAn@| [ DATA ] ; `string'
	IMPORT	|GPIOInterruptDone|

  000b0			 AREA	 |.pdata|, PDATA
|$T37450| DCD	|$LN13@TWL_Interr|
	DCD	0x40006c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@NFLLDFGD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAr?$AAi?$AAt?$AAo?$AAn@| DCB "I"
	DCB	0x0, "N", 0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "T", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "o"
	DCB	0x0, "n", 0x0, "2", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01d48			 AREA	 |.text|, CODE, ARM

  01d48		 |?TWL_InterruptThread@@YAKPAX@Z| PROC	; TWL_InterruptThread

; 1284 : {

  01d48		 |$LN13@TWL_Interr|
  01d48	e1a0c00d	 mov         r12, sp
  01d4c	e92d0001	 stmdb       sp!, {r0}
  01d50	e92d5010	 stmdb       sp!, {r4, r12, lr}
  01d54	e24dd020	 sub         sp, sp, #0x20
  01d58		 |$M37447|

; 1285 :     Device_t *pDevice = (Device_t*)pContext;

  01d58	e59d302c	 ldr         r3, [sp, #0x2C]
  01d5c	e58d3004	 str         r3, [sp, #4]

; 1286 :     DWORD timeout = INFINITE;

  01d60	e3e03000	 mvn         r3, #0
  01d64	e58d3010	 str         r3, [sp, #0x10]

; 1287 :     UINT8 status;
; 1288 :     DWORD id;
; 1289 :     HANDLE *pEvents = NULL;

  01d68	e3a03000	 mov         r3, #0
  01d6c	e58d300c	 str         r3, [sp, #0xC]
  01d70		 |$LN6@TWL_Interr|

; 1290 : 
; 1291 : 
; 1292 :     // Loop until we are not stopped...
; 1293 :     while (!pDevice->intrThreadExit)

  01d70	e59d3004	 ldr         r3, [sp, #4]
  01d74	e2833040	 add         r3, r3, #0x40
  01d78	e5933000	 ldr         r3, [r3]
  01d7c	e3530000	 cmp         r3, #0
  01d80	1a000052	 bne         |$LN5@TWL_Interr|

; 1294 :         {
; 1295 :         // Wait for event
; 1296 :         WaitForSingleObject(pDevice->hIntrEvent, timeout);

  01d84	e59d1010	 ldr         r1, [sp, #0x10]
  01d88	e59d3004	 ldr         r3, [sp, #4]
  01d8c	e2833038	 add         r3, r3, #0x38
  01d90	e5930000	 ldr         r0, [r3]
  01d94	eb000000	 bl          WaitForSingleObject

; 1297 :         if (pDevice->intrThreadExit) break;

  01d98	e59d3004	 ldr         r3, [sp, #4]
  01d9c	e2833040	 add         r3, r3, #0x40
  01da0	e5933000	 ldr         r3, [r3]
  01da4	e3530000	 cmp         r3, #0
  01da8	0a000000	 beq         |$LN4@TWL_Interr|
  01dac	ea000047	 b           |$LN5@TWL_Interr|
  01db0		 |$LN4@TWL_Interr|

; 1298 : 
; 1299 :         // NOTE:
; 1300 :         //   We can't encapsulate this here since the clients may
; 1301 :         // call into the triton driver causing a deadlock
; 1302 :         //
; 1303 :         //EnterCriticalSection(&pDevice->cs);
; 1304 :         // Get and clear interrupt status register
; 1305 :         ReadRegs(pDevice, TWL_PIH_ISR_P1, &status, sizeof(status));

  01db0	e3a03001	 mov         r3, #1
  01db4	e28d2008	 add         r2, sp, #8
  01db8	e3a01801	 mov         r1, #1, 16
  01dbc	e3811081	 orr         r1, r1, #0x81
  01dc0	e59d0004	 ldr         r0, [sp, #4]
  01dc4	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 1306 : 
; 1307 :         DEBUGMSG(ZONE_IST, (L"INFO: TWL_InterruptThread "
; 1308 :             L"Triton2 interrupt status=0x%02X\r\n", status
; 1309 :             ));

  01dc8	e59f3124	 ldr         r3, [pc, #0x124]
  01dcc	e5933440	 ldr         r3, [r3, #0x440]
  01dd0	e3130020	 tst         r3, #0x20
  01dd4	0a000006	 beq         |$LN9@TWL_Interr|
  01dd8	e5dd3008	 ldrb        r3, [sp, #8]
  01ddc	e1a01003	 mov         r1, r3
  01de0	e59f0108	 ldr         r0, [pc, #0x108]
  01de4	eb000000	 bl          NKDbgPrintfW
  01de8	e3a03001	 mov         r3, #1
  01dec	e58d3018	 str         r3, [sp, #0x18]
  01df0	ea000001	 b           |$LN10@TWL_Interr|
  01df4		 |$LN9@TWL_Interr|
  01df4	e3a03000	 mov         r3, #0
  01df8	e58d3018	 str         r3, [sp, #0x18]
  01dfc		 |$LN10@TWL_Interr|

; 1310 : 
; 1311 :         // Process each interrupt
; 1312 :         id = 0;

  01dfc	e3a03000	 mov         r3, #0
  01e00	e58d3000	 str         r3, [sp]

; 1313 :         status &= 0x3F;

  01e04	e5dd3008	 ldrb        r3, [sp, #8]
  01e08	e203303f	 and         r3, r3, #0x3F
  01e0c	e20330ff	 and         r3, r3, #0xFF
  01e10	e5cd3008	 strb        r3, [sp, #8]
  01e14		 |$LN3@TWL_Interr|

; 1314 :         while (status != 0)

  01e14	e5dd3008	 ldrb        r3, [sp, #8]
  01e18	e3530000	 cmp         r3, #0
  01e1c	0a000020	 beq         |$LN2@TWL_Interr|

; 1315 :             {
; 1316 :             if ((status & 0x1) != 0)

  01e20	e5dd3008	 ldrb        r3, [sp, #8]
  01e24	e3130001	 tst         r3, #1
  01e28	0a000015	 beq         |$LN1@TWL_Interr|

; 1317 :                 {
; 1318 :                 pEvents = GetFirstEventByGroup(pDevice, id);

  01e2c	e59d1000	 ldr         r1, [sp]
  01e30	e59d0004	 ldr         r0, [sp, #4]
  01e34	eb000000	 bl          |?GetFirstEventByGroup@@YAPAPAXPAUDevice_t@@K@Z|
  01e38	e58d001c	 str         r0, [sp, #0x1C]
  01e3c	e59d301c	 ldr         r3, [sp, #0x1C]
  01e40	e58d300c	 str         r3, [sp, #0xC]

; 1319 :                 s_pSIHRoutines[id](pDevice, pEvents, s_pSIHEntries[id]); 

  01e44	e59d1000	 ldr         r1, [sp]
  01e48	e3a03004	 mov         r3, #4
  01e4c	e0020391	 mul         r2, r1, r3
  01e50	e59f3094	 ldr         r3, [pc, #0x94]
  01e54	e0833002	 add         r3, r3, r2
  01e58	e5932000	 ldr         r2, [r3]
  01e5c	e59d100c	 ldr         r1, [sp, #0xC]
  01e60	e59d0004	 ldr         r0, [sp, #4]
  01e64	e59d4000	 ldr         r4, [sp]
  01e68	e3a03004	 mov         r3, #4
  01e6c	e00e0394	 mul         lr, r4, r3
  01e70	e59f3070	 ldr         r3, [pc, #0x70]
  01e74	e083300e	 add         r3, r3, lr
  01e78	e5933000	 ldr         r3, [r3]
  01e7c	e1a0e00f	 mov         lr, pc
  01e80	e12fff13	 bx          r3
  01e84		 |$LN1@TWL_Interr|

; 1320 :                 }
; 1321 :             status >>= 1;

  01e84	e5dd3008	 ldrb        r3, [sp, #8]
  01e88	e1a030a3	 mov         r3, r3, lsr #1
  01e8c	e20330ff	 and         r3, r3, #0xFF
  01e90	e5cd3008	 strb        r3, [sp, #8]

; 1322 :             id++;

  01e94	e59d3000	 ldr         r3, [sp]
  01e98	e2833001	 add         r3, r3, #1
  01e9c	e58d3000	 str         r3, [sp]

; 1323 :             }

  01ea0	eaffffdb	 b           |$LN3@TWL_Interr|
  01ea4		 |$LN2@TWL_Interr|

; 1324 :         
; 1325 : 
; 1326 :         //LeaveCriticalSection(&pDevice->cs);
; 1327 :         
; 1328 :         GPIOInterruptDone(pDevice->hGpio, pDevice->gpio, pDevice->sysIntr);

  01ea4	e59d3004	 ldr         r3, [sp, #4]
  01ea8	e2833030	 add         r3, r3, #0x30
  01eac	e5932000	 ldr         r2, [r3]
  01eb0	e59d3004	 ldr         r3, [sp, #4]
  01eb4	e2833008	 add         r3, r3, #8
  01eb8	e5931000	 ldr         r1, [r3]
  01ebc	e59d3004	 ldr         r3, [sp, #4]
  01ec0	e2833014	 add         r3, r3, #0x14
  01ec4	e5930000	 ldr         r0, [r3]
  01ec8	eb000000	 bl          GPIOInterruptDone

; 1329 :         }

  01ecc	eaffffa7	 b           |$LN6@TWL_Interr|
  01ed0		 |$LN5@TWL_Interr|

; 1330 : 
; 1331 :     return ERROR_SUCCESS;

  01ed0	e3a03000	 mov         r3, #0
  01ed4	e58d3014	 str         r3, [sp, #0x14]

; 1332 : }

  01ed8	e59d0014	 ldr         r0, [sp, #0x14]
  01edc	e28dd020	 add         sp, sp, #0x20
  01ee0	e89d6010	 ldmia       sp, {r4, sp, lr}
  01ee4	e12fff1e	 bx          lr
  01ee8		 |$LN14@TWL_Interr|
  01ee8		 |$LN15@TWL_Interr|
  01ee8	00000000	 DCD         |s_pSIHRoutines|
  01eec		 |$LN16@TWL_Interr|
  01eec	00000000	 DCD         |s_pSIHEntries|
  01ef0		 |$LN17@TWL_Interr|
  01ef0	00000000	 DCD         |??_C@_1HI@NFLLDFGD@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAT?$AAr?$AAi?$AAt?$AAo?$AAn@|
  01ef4		 |$LN18@TWL_Interr|
  01ef4	00000000	 DCD         |dpCurSettings|
  01ef8		 |$M37448|

			 ENDP  ; |?TWL_InterruptThread@@YAKPAX@Z|, TWL_InterruptThread

	EXPORT	|??_C@_1HK@KCKOPBNN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@IPDFAG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@FPPGLIND@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@GLFHNJCB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|?TWL_EnableWakeup@@YAHKKH@Z|		; TWL_EnableWakeup
	IMPORT	|GPIOInterruptWakeUp|

  000b8			 AREA	 |.pdata|, PDATA
|$T37473| DCD	|$LN30@TWL_Enable|
	DCD	0x4000e604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@KCKOPBNN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "W", 0x0, "L", 0x0, "_", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W", 0x0, "a", 0x0, "k"
	DCB	0x0, "e", 0x0, "u", 0x0, "p", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "s"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "a"
	DCB	0x0, "s", 0x0, " ", 0x0, "w", 0x0, "a", 0x0, "k", 0x0, "e"
	DCB	0x0, "u", 0x0, "p", 0x0, " ", 0x0, "s", 0x0, "o", 0x0, "u"
	DCB	0x0, "r", 0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@IPDFAG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAe@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "W", 0x0, "L", 0x0, "_", 0x0, "E", 0x0, "n", 0x0, "a"
	DCB	0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W", 0x0, "a", 0x0, "k"
	DCB	0x0, "e", 0x0, "u", 0x0, "p", 0x0, ":", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "e", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "a", 0x0, "s", 0x0, " ", 0x0, "w", 0x0, "a"
	DCB	0x0, "k", 0x0, "e", 0x0, "u", 0x0, "p", 0x0, " ", 0x0, "s"
	DCB	0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@FPPGLIND@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W", 0x0, "a"
	DCB	0x0, "k", 0x0, "e", 0x0, "u", 0x0, "p", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "S", 0x0, "I", 0x0, "H", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@GLFHNJCB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W", 0x0, "a"
	DCB	0x0, "k", 0x0, "e", 0x0, "u", 0x0, "p", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, " ", 0x0, "I", 0x0, "d", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01ef8			 AREA	 |.text|, CODE, ARM

  01ef8		 |?TWL_EnableWakeup@@YAHKKH@Z| PROC	; TWL_EnableWakeup

; 1614 : {

  01ef8		 |$LN30@TWL_Enable|
  01ef8	e1a0c00d	 mov         r12, sp
  01efc	e92d0007	 stmdb       sp!, {r0 - r2}
  01f00	e92d5000	 stmdb       sp!, {r12, lr}
  01f04	e24dd03c	 sub         sp, sp, #0x3C
  01f08		 |$M37470|

; 1615 :     BOOL rc = FALSE;

  01f08	e3a03000	 mov         r3, #0
  01f0c	e58d3010	 str         r3, [sp, #0x10]

; 1616 :     BOOL bLocked = FALSE;    

  01f10	e3a03000	 mov         r3, #0
  01f14	e58d3014	 str         r3, [sp, #0x14]

; 1617 :     Device_t *pDevice = ((Instance_t*)context)->pDevice;

  01f18	e59d3044	 ldr         r3, [sp, #0x44]
  01f1c	e2833008	 add         r3, r3, #8
  01f20	e5933000	 ldr         r3, [r3]
  01f24	e58d3008	 str         r3, [sp, #8]

; 1618 :     SIHEntry_t const *pSIHEntry;
; 1619 :     StatusRegister_t const *pStatusRegister;
; 1620 :     int nArrayIndex;
; 1621 : /*
; 1622 :     // Check if we get correct context
; 1623 :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))
; 1624 :         {
; 1625 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IntrEnable: "
; 1626 :             L"Incorrect context parameter\r\n"
; 1627 :             ));
; 1628 :         goto cleanUp;
; 1629 :         }
; 1630 : */
; 1631 :     if (TWL_ARRAYINDEX(intrId) >= TWL_MAX_INTR)

  01f28	e59d2048	 ldr         r2, [sp, #0x48]
  01f2c	e3a03c0f	 mov         r3, #0xF, 24
  01f30	e38330ff	 orr         r3, r3, #0xFF
  01f34	e0023003	 and         r3, r2, r3
  01f38	e3530056	 cmp         r3, #0x56
  01f3c	3a00000d	 bcc         |$LN13@TWL_Enable|

; 1632 :         {
; 1633 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_EnableWakeup: "
; 1634 :             L"Incorrect interrupt Id %d\r\n", intrId
; 1635 :             ));

  01f40	e59f3334	 ldr         r3, [pc, #0x334]
  01f44	e5933440	 ldr         r3, [r3, #0x440]
  01f48	e3130001	 tst         r3, #1
  01f4c	0a000005	 beq         |$LN16@TWL_Enable|
  01f50	e59d1048	 ldr         r1, [sp, #0x48]
  01f54	e59f0330	 ldr         r0, [pc, #0x330]
  01f58	eb000000	 bl          NKDbgPrintfW
  01f5c	e3a03001	 mov         r3, #1
  01f60	e58d301c	 str         r3, [sp, #0x1C]
  01f64	ea000001	 b           |$LN17@TWL_Enable|
  01f68		 |$LN16@TWL_Enable|
  01f68	e3a03000	 mov         r3, #0
  01f6c	e58d301c	 str         r3, [sp, #0x1C]
  01f70		 |$LN17@TWL_Enable|

; 1636 :         goto cleanUp;

  01f70	ea0000b4	 b           |$LN12@TWL_Enable|
  01f74	ea0000b3	 b           |$cleanUp$36903|
  01f78		 |$LN13@TWL_Enable|

; 1637 :         }
; 1638 : 
; 1639 :     // We have take critical section there to avoid concurrent
; 1640 :     // enable register modification
; 1641 :     bLocked = TRUE;

  01f78	e3a03001	 mov         r3, #1
  01f7c	e58d3014	 str         r3, [sp, #0x14]

; 1642 :     EnterCriticalSection(&pDevice->cs);

  01f80	e59d3008	 ldr         r3, [sp, #8]
  01f84	e2830018	 add         r0, r3, #0x18
  01f88	eb000000	 bl          EnterCriticalSection

; 1643 : 
; 1644 :     // get secondary interrupt handler info
; 1645 :     nArrayIndex = TWL_SIHINDEX(intrId);

  01f8c	e59d3048	 ldr         r3, [sp, #0x48]
  01f90	e1a03803	 mov         r3, r3, lsl #16
  01f94	e1a03e23	 mov         r3, r3, lsr #28
  01f98	e58d300c	 str         r3, [sp, #0xC]

; 1646 :     if (nArrayIndex > MAX_SIH_COUNT)

  01f9c	e59d300c	 ldr         r3, [sp, #0xC]
  01fa0	e3530006	 cmp         r3, #6
  01fa4	da00000d	 ble         |$LN11@TWL_Enable|

; 1647 :         {
; 1648 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_EnableWakeup: "
; 1649 :             L"Invalid SIH index %d\r\n", nArrayIndex
; 1650 :             ));

  01fa8	e59f32cc	 ldr         r3, [pc, #0x2CC]
  01fac	e5933440	 ldr         r3, [r3, #0x440]
  01fb0	e3130001	 tst         r3, #1
  01fb4	0a000005	 beq         |$LN18@TWL_Enable|
  01fb8	e59d100c	 ldr         r1, [sp, #0xC]
  01fbc	e59f02c4	 ldr         r0, [pc, #0x2C4]
  01fc0	eb000000	 bl          NKDbgPrintfW
  01fc4	e3a03001	 mov         r3, #1
  01fc8	e58d3020	 str         r3, [sp, #0x20]
  01fcc	ea000001	 b           |$LN19@TWL_Enable|
  01fd0		 |$LN18@TWL_Enable|
  01fd0	e3a03000	 mov         r3, #0
  01fd4	e58d3020	 str         r3, [sp, #0x20]
  01fd8		 |$LN19@TWL_Enable|

; 1651 :         goto cleanUp;

  01fd8	ea00009a	 b           |$LN10@TWL_Enable|
  01fdc	ea000099	 b           |$cleanUp$36903|
  01fe0		 |$LN11@TWL_Enable|

; 1652 :         }
; 1653 :     
; 1654 :     pSIHEntry = s_pSIHEntries[nArrayIndex];

  01fe0	e59d100c	 ldr         r1, [sp, #0xC]
  01fe4	e3a03004	 mov         r3, #4
  01fe8	e0020391	 mul         r2, r1, r3
  01fec	e59f3290	 ldr         r3, [pc, #0x290]
  01ff0	e0833002	 add         r3, r3, r2
  01ff4	e5933000	 ldr         r3, [r3]
  01ff8	e58d3004	 str         r3, [sp, #4]

; 1655 : 
; 1656 :     // get mask register value
; 1657 :     pStatusRegister = pSIHEntry->StatusRegisters + TWL_REGISTERINDEX(intrId);

  01ffc	e59d3004	 ldr         r3, [sp, #4]
  02000	e2831004	 add         r1, r3, #4
  02004	e59d3048	 ldr         r3, [sp, #0x48]
  02008	e1a03403	 mov         r3, r3, lsl #8
  0200c	e1a02c23	 mov         r2, r3, lsr #24
  02010	e3a03010	 mov         r3, #0x10
  02014	e0030392	 mul         r3, r2, r3
  02018	e0813003	 add         r3, r1, r3
  0201c	e58d3000	 str         r3, [sp]

; 1658 : 
; 1659 :     // NOTE:
; 1660 :     //  The bit must be cleared to indicate the interrupt is unmasked
; 1661 :     // set enable/disable mask only if the request doesn't match the current state
; 1662 :     if (!!((pStatusRegister->ffWakeupEnable) & (1 << TWL_MASKBIT(intrId))) != !bEnable)

  02020	e59d3000	 ldr         r3, [sp]
  02024	e2833009	 add         r3, r3, #9
  02028	e5d33000	 ldrb        r3, [r3]
  0202c	e1a01003	 mov         r1, r3
  02030	e59d3048	 ldr         r3, [sp, #0x48]
  02034	e1a03203	 mov         r3, r3, lsl #4
  02038	e1a02e23	 mov         r2, r3, lsr #28
  0203c	e3a03001	 mov         r3, #1
  02040	e1a03213	 mov         r3, r3, lsl r2
  02044	e1110003	 tst         r1, r3
  02048	0a000002	 beq         |$LN20@TWL_Enable|
  0204c	e3a03001	 mov         r3, #1
  02050	e58d3024	 str         r3, [sp, #0x24]
  02054	ea000001	 b           |$LN21@TWL_Enable|
  02058		 |$LN20@TWL_Enable|
  02058	e3a03000	 mov         r3, #0
  0205c	e58d3024	 str         r3, [sp, #0x24]
  02060		 |$LN21@TWL_Enable|
  02060	e59d304c	 ldr         r3, [sp, #0x4C]
  02064	e3530000	 cmp         r3, #0
  02068	1a000002	 bne         |$LN22@TWL_Enable|
  0206c	e3a03001	 mov         r3, #1
  02070	e58d3028	 str         r3, [sp, #0x28]
  02074	ea000001	 b           |$LN23@TWL_Enable|
  02078		 |$LN22@TWL_Enable|
  02078	e3a03000	 mov         r3, #0
  0207c	e58d3028	 str         r3, [sp, #0x28]
  02080		 |$LN23@TWL_Enable|
  02080	e59d2024	 ldr         r2, [sp, #0x24]
  02084	e59d3028	 ldr         r3, [sp, #0x28]
  02088	e1520003	 cmp         r2, r3
  0208c	0a00006b	 beq         |$LN9@TWL_Enable|

; 1663 :         {
; 1664 :         if (bEnable)

  02090	e59d304c	 ldr         r3, [sp, #0x4C]
  02094	e3530000	 cmp         r3, #0
  02098	0a000015	 beq         |$LN8@TWL_Enable|

; 1665 :             {
; 1666 :             ((StatusRegister_t*)pStatusRegister)->ffWakeupEnable &= 
; 1667 :                                             ~(1 << TWL_MASKBIT(intrId));

  0209c	e59d3000	 ldr         r3, [sp]
  020a0	e2831009	 add         r1, r3, #9
  020a4	e59d3048	 ldr         r3, [sp, #0x48]
  020a8	e1a03203	 mov         r3, r3, lsl #4
  020ac	e1a02e23	 mov         r2, r3, lsr #28
  020b0	e3a03001	 mov         r3, #1
  020b4	e1a03213	 mov         r3, r3, lsl r2
  020b8	e1e02003	 mvn         r2, r3
  020bc	e5d13000	 ldrb        r3, [r1]
  020c0	e0031002	 and         r1, r3, r2
  020c4	e59d3000	 ldr         r3, [sp]
  020c8	e2832009	 add         r2, r3, #9
  020cc	e20130ff	 and         r3, r1, #0xFF
  020d0	e5c23000	 strb        r3, [r2]

; 1668 :             pDevice->wakeupCount++;

  020d4	e59d3008	 ldr         r3, [sp, #8]
  020d8	e2833034	 add         r3, r3, #0x34
  020dc	e5933000	 ldr         r3, [r3]
  020e0	e2832001	 add         r2, r3, #1
  020e4	e59d3008	 ldr         r3, [sp, #8]
  020e8	e2833034	 add         r3, r3, #0x34
  020ec	e5832000	 str         r2, [r3]

; 1669 :             }
; 1670 :         else

  020f0	ea000013	 b           |$LN7@TWL_Enable|
  020f4		 |$LN8@TWL_Enable|

; 1671 :             {
; 1672 :             ((StatusRegister_t*)pStatusRegister)->ffWakeupEnable |= 
; 1673 :                                             (1 << TWL_MASKBIT(intrId));

  020f4	e59d3000	 ldr         r3, [sp]
  020f8	e2831009	 add         r1, r3, #9
  020fc	e59d3048	 ldr         r3, [sp, #0x48]
  02100	e1a03203	 mov         r3, r3, lsl #4
  02104	e1a02e23	 mov         r2, r3, lsr #28
  02108	e3a03001	 mov         r3, #1
  0210c	e1a02213	 mov         r2, r3, lsl r2
  02110	e5d13000	 ldrb        r3, [r1]
  02114	e1831002	 orr         r1, r3, r2
  02118	e59d3000	 ldr         r3, [sp]
  0211c	e2832009	 add         r2, r3, #9
  02120	e20130ff	 and         r3, r1, #0xFF
  02124	e5c23000	 strb        r3, [r2]

; 1674 :             pDevice->wakeupCount--;

  02128	e59d3008	 ldr         r3, [sp, #8]
  0212c	e2833034	 add         r3, r3, #0x34
  02130	e5933000	 ldr         r3, [r3]
  02134	e2432001	 sub         r2, r3, #1
  02138	e59d3008	 ldr         r3, [sp, #8]
  0213c	e2833034	 add         r3, r3, #0x34
  02140	e5832000	 str         r2, [r3]
  02144		 |$LN7@TWL_Enable|

; 1675 :             }
; 1676 : 
; 1677 :         // (un)register as wakeup interrupt, as necessary
; 1678 :         if (pDevice->wakeupCount == 1)

  02144	e59d3008	 ldr         r3, [sp, #8]
  02148	e2833034	 add         r3, r3, #0x34
  0214c	e5933000	 ldr         r3, [r3]
  02150	e3530001	 cmp         r3, #1
  02154	1a00001a	 bne         |$LN6@TWL_Enable|

; 1679 :             {
; 1680 :                 if (!GPIOInterruptWakeUp(pDevice->hGpio, pDevice->gpio, pDevice->sysIntr,TRUE))

  02158	e3a03001	 mov         r3, #1
  0215c	e59d2008	 ldr         r2, [sp, #8]
  02160	e2822030	 add         r2, r2, #0x30
  02164	e5922000	 ldr         r2, [r2]
  02168	e59d1008	 ldr         r1, [sp, #8]
  0216c	e2811008	 add         r1, r1, #8
  02170	e5911000	 ldr         r1, [r1]
  02174	e59d0008	 ldr         r0, [sp, #8]
  02178	e2800014	 add         r0, r0, #0x14
  0217c	e5900000	 ldr         r0, [r0]
  02180	eb000000	 bl          GPIOInterruptWakeUp
  02184	e58d002c	 str         r0, [sp, #0x2C]
  02188	e59d302c	 ldr         r3, [sp, #0x2C]
  0218c	e3530000	 cmp         r3, #0
  02190	1a00000a	 bne         |$LN5@TWL_Enable|

; 1681 :                 {
; 1682 :                 DEBUGMSG(ZONE_ERROR, (L"WARN: TWL_EnableWakeup: "
; 1683 :                     L"Failed enable as wakeup source\r\n"
; 1684 :                     ));

  02194	e59f30e0	 ldr         r3, [pc, #0xE0]
  02198	e5933440	 ldr         r3, [r3, #0x440]
  0219c	e3130001	 tst         r3, #1
  021a0	0a000004	 beq         |$LN24@TWL_Enable|
  021a4	e59f00d4	 ldr         r0, [pc, #0xD4]
  021a8	eb000000	 bl          NKDbgPrintfW
  021ac	e3a03001	 mov         r3, #1
  021b0	e58d3030	 str         r3, [sp, #0x30]
  021b4	ea000001	 b           |$LN25@TWL_Enable|
  021b8		 |$LN24@TWL_Enable|
  021b8	e3a03000	 mov         r3, #0
  021bc	e58d3030	 str         r3, [sp, #0x30]
  021c0		 |$LN25@TWL_Enable|
  021c0		 |$LN5@TWL_Enable|

; 1685 :                 }
; 1686 :             }

  021c0	ea00001e	 b           |$LN4@TWL_Enable|
  021c4		 |$LN6@TWL_Enable|

; 1687 :         else if (pDevice->wakeupCount == 0)

  021c4	e59d3008	 ldr         r3, [sp, #8]
  021c8	e2833034	 add         r3, r3, #0x34
  021cc	e5933000	 ldr         r3, [r3]
  021d0	e3530000	 cmp         r3, #0
  021d4	1a000019	 bne         |$LN3@TWL_Enable|

; 1688 :             {
; 1689 :             if (!GPIOInterruptWakeUp(pDevice->hGpio, pDevice->gpio, pDevice->sysIntr,FALSE))

  021d8	e3a03000	 mov         r3, #0
  021dc	e59d2008	 ldr         r2, [sp, #8]
  021e0	e2822030	 add         r2, r2, #0x30
  021e4	e5922000	 ldr         r2, [r2]
  021e8	e59d1008	 ldr         r1, [sp, #8]
  021ec	e2811008	 add         r1, r1, #8
  021f0	e5911000	 ldr         r1, [r1]
  021f4	e59d0008	 ldr         r0, [sp, #8]
  021f8	e2800014	 add         r0, r0, #0x14
  021fc	e5900000	 ldr         r0, [r0]
  02200	eb000000	 bl          GPIOInterruptWakeUp
  02204	e58d0034	 str         r0, [sp, #0x34]
  02208	e59d3034	 ldr         r3, [sp, #0x34]
  0220c	e3530000	 cmp         r3, #0
  02210	1a00000a	 bne         |$LN2@TWL_Enable|

; 1690 :                 {
; 1691 :                 DEBUGMSG(ZONE_ERROR, (L"WARN: TWL_EnableWakeup: "
; 1692 :                     L"Failed to disable as wakeup source\r\n"
; 1693 :                     ));

  02214	e59f3060	 ldr         r3, [pc, #0x60]
  02218	e5933440	 ldr         r3, [r3, #0x440]
  0221c	e3130001	 tst         r3, #1
  02220	0a000004	 beq         |$LN26@TWL_Enable|
  02224	e59f004c	 ldr         r0, [pc, #0x4C]
  02228	eb000000	 bl          NKDbgPrintfW
  0222c	e3a03001	 mov         r3, #1
  02230	e58d3038	 str         r3, [sp, #0x38]
  02234	ea000001	 b           |$LN27@TWL_Enable|
  02238		 |$LN26@TWL_Enable|
  02238	e3a03000	 mov         r3, #0
  0223c	e58d3038	 str         r3, [sp, #0x38]
  02240		 |$LN27@TWL_Enable|
  02240		 |$LN2@TWL_Enable|
  02240		 |$LN3@TWL_Enable|
  02240		 |$LN4@TWL_Enable|
  02240		 |$LN9@TWL_Enable|

; 1694 :                 }
; 1695 :             }
; 1696 :         }
; 1697 :     
; 1698 :     rc = TRUE;

  02240	e3a03001	 mov         r3, #1
  02244	e58d3010	 str         r3, [sp, #0x10]
  02248		 |$LN10@TWL_Enable|
  02248		 |$LN12@TWL_Enable|
  02248		 |$cleanUp$36903|

; 1699 :     
; 1700 : cleanUp:
; 1701 :     if (bLocked == TRUE) LeaveCriticalSection(&pDevice->cs);

  02248	e59d3014	 ldr         r3, [sp, #0x14]
  0224c	e3530001	 cmp         r3, #1
  02250	1a000002	 bne         |$LN1@TWL_Enable|
  02254	e59d3008	 ldr         r3, [sp, #8]
  02258	e2830018	 add         r0, r3, #0x18
  0225c	eb000000	 bl          LeaveCriticalSection
  02260		 |$LN1@TWL_Enable|

; 1702 :     return rc;

  02260	e59d3010	 ldr         r3, [sp, #0x10]
  02264	e58d3018	 str         r3, [sp, #0x18]

; 1703 : }

  02268	e59d0018	 ldr         r0, [sp, #0x18]
  0226c	e28dd03c	 add         sp, sp, #0x3C
  02270	e89d6000	 ldmia       sp, {sp, lr}
  02274	e12fff1e	 bx          lr
  02278		 |$LN31@TWL_Enable|
  02278		 |$LN32@TWL_Enable|
  02278	00000000	 DCD         |??_C@_1HK@KCKOPBNN@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt@|
  0227c		 |$LN33@TWL_Enable|
  0227c	00000000	 DCD         |dpCurSettings|
  02280		 |$LN34@TWL_Enable|
  02280	00000000	 DCD         |??_C@_1HC@IPDFAG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAe@|
  02284		 |$LN35@TWL_Enable|
  02284	00000000	 DCD         |s_pSIHEntries|
  02288		 |$LN36@TWL_Enable|
  02288	00000000	 DCD         |??_C@_1GA@FPPGLIND@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd@|
  0228c		 |$LN37@TWL_Enable|
  0228c	00000000	 DCD         |??_C@_1GK@GLFHNJCB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@|
  02290		 |$M37471|

			 ENDP  ; |?TWL_EnableWakeup@@YAHKKH@Z|, TWL_EnableWakeup

	EXPORT	|??_C@_1DE@FNPJKBFA@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@MKPBECMG@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@GEHCJFKO@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@NHHJGHGC@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@GLGMEDCN@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@FJGLKMH@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@GLKMEJPC@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI@| [ DATA ] ; `string'
	EXPORT	|?IsEqualGUID@@YAHABU_GUID@@0@Z|	; IsEqualGUID
	EXPORT	|??_C@_1OG@GOFHADCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@| [ DATA ] ; `string'
	EXPORT	|GetCurrentProcessId|
	EXPORT	|??_C@_1GE@KIBCNFIC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@CDCPDGAH@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|?TWL_IOControl@@YAHKKPAEK0KPAK@Z|	; TWL_IOControl
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|SetLastError|
	IMPORT	|GetCallerProcess|
	IMPORT	|__C_specific_handler|

  000c0			 AREA	 |.pdata|, PDATA
|$T37546| DCD	|$LN109@TWL_IOCont|
	DCD	0xc0025305
|$T37548| DCD	|$LN97@TWL_IOCont|
	DCD	0x40000502
|$T37550| DCD	|$LN90@TWL_IOCont|
	DCD	0x40000502
|$T37552| DCD	|$LN83@TWL_IOCont|
	DCD	0x40002202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@FNPJKBFA@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@MKPBECMG@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "W", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "G", 0x0, "E"
	DCB	0x0, "T", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "D"
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@GEHCJFKO@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "W", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@NHHJGHGC@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "W", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "D"
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@GLGMEDCN@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "T"
	DCB	0x0, "W", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@FJGLKMH@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN@| DCB "T"
	DCB	0x0, "W", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "Q", 0x0, "U", 0x0, "E", 0x0, "R", 0x0, "Y"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@GLKMEJPC@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI@| DCB "T"
	DCB	0x0, "W", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "C", 0x0, "A", 0x0, "P", 0x0, "A", 0x0, "B"
	DCB	0x0, "I", 0x0, "L", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "E"
	DCB	0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1OG@GOFHADCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "D", 0x0, "K"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "R", 0x0, "I", 0x0, "V", 0x0, "E", 0x0, "R", 0x0, "_"
	DCB	0x0, "I", 0x0, "F", 0x0, "C", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "n", 0x0, "l", 0x0, "y", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "(", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@KIBCNFIC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@CDCPDGAH@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00010			 AREA	 |.xdata|, DATA
|$T37544| DCD	0x3
	DCD	|$LN101@TWL_IOCont|
	DCD	|$LN102@TWL_IOCont|
	DCD	|$LN97@TWL_IOCont|
	DCD	|$LN98@TWL_IOCont|
	DCD	|$LN94@TWL_IOCont|
	DCD	|$LN95@TWL_IOCont|
	DCD	|$LN90@TWL_IOCont|
	DCD	|$LN91@TWL_IOCont|
	DCD	|$LN87@TWL_IOCont|
	DCD	|$LN88@TWL_IOCont|
	DCD	|$LN83@TWL_IOCont|
	DCD	|$LN84@TWL_IOCont|
; Function compile flags: /Odtp

  02290			 AREA	 |.text|, CODE, ARM

  02290	00000000	 DCD         |__C_specific_handler|
  02294	00000000	 DCD         |$T37544|

  02298		 |?TWL_IOControl@@YAHKKPAEK0KPAK@Z| PROC ; TWL_IOControl

; 1722 : {

  02298		 |$LN109@TWL_IOCont|
  02298	e1a0c00d	 mov         r12, sp
  0229c	e92d000f	 stmdb       sp!, {r0 - r3}
  022a0	e92d5800	 stmdb       sp!, {r11, r12, lr}
  022a4	e28db00c	 add         r11, sp, #0xC
  022a8	e24dd0d4	 sub         sp, sp, #0xD4
  022ac		 |$LN107@TWL_IOCont|

; 1723 :     DEBUGMSG(ZONE_FUNCTION, (
; 1724 :         L"+TWL_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 1725 :         context, code, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 1726 :         ));

  022ac	e59f3970	 ldr         r3, [pc, #0x970]
  022b0	e5933440	 ldr         r3, [r3, #0x440]
  022b4	e3130004	 tst         r3, #4
  022b8	0a00000f	 beq         |$LN53@TWL_IOCont|
  022bc	e59b3018	 ldr         r3, [r11, #0x18]
  022c0	e58d300c	 str         r3, [sp, #0xC]
  022c4	e59b3014	 ldr         r3, [r11, #0x14]
  022c8	e58d3008	 str         r3, [sp, #8]
  022cc	e59b3010	 ldr         r3, [r11, #0x10]
  022d0	e58d3004	 str         r3, [sp, #4]
  022d4	e59b300c	 ldr         r3, [r11, #0xC]
  022d8	e58d3000	 str         r3, [sp]
  022dc	e59b3008	 ldr         r3, [r11, #8]
  022e0	e59b2004	 ldr         r2, [r11, #4]
  022e4	e59b1000	 ldr         r1, [r11]
  022e8	e59f09a0	 ldr         r0, [pc, #0x9A0]
  022ec	eb000000	 bl          NKDbgPrintfW
  022f0	e3a03001	 mov         r3, #1
  022f4	e50b3074	 str         r3, [r11, #-0x74]
  022f8	ea000001	 b           |$LN54@TWL_IOCont|
  022fc		 |$LN53@TWL_IOCont|
  022fc	e3a03000	 mov         r3, #0
  02300	e50b3074	 str         r3, [r11, #-0x74]
  02304		 |$LN54@TWL_IOCont|

; 1727 :     
; 1728 :     BOOL rc = FALSE;

  02304	e3a03000	 mov         r3, #0
  02308	e50b30c8	 str         r3, [r11, #-0xC8]

; 1729 :     const void* pBuffer;
; 1730 :     Device_t *pDevice;
; 1731 :     DEVICE_IFC_TWL ifc;
; 1732 :     DWORD address, size;
; 1733 :     Instance_t *pInstance = (Instance_t*)context;

  0230c	e59b3000	 ldr         r3, [r11]
  02310	e50b30c4	 str         r3, [r11, #-0xC4]

; 1734 : 
; 1735 :     if (pInstance == NULL || pInstance->cookie != TWL_INSTANCE_COOKIE)

  02314	e51b30c4	 ldr         r3, [r11, #-0xC4]
  02318	e3530000	 cmp         r3, #0
  0231c	0a000004	 beq         |$LN49@TWL_IOCont|
  02320	e51b30c4	 ldr         r3, [r11, #-0xC4]
  02324	e5932000	 ldr         r2, [r3]
  02328	e59f395c	 ldr         r3, [pc, #0x95C]
  0232c	e1520003	 cmp         r2, r3
  02330	0a000000	 beq         |$LN50@TWL_IOCont|
  02334		 |$LN49@TWL_IOCont|

; 1736 :         {
; 1737 :         goto cleanUp;

  02334	ea000218	 b           |$cleanUp$36945|
  02338		 |$LN50@TWL_IOCont|

; 1738 :         }
; 1739 : 
; 1740 :     pDevice = pInstance->pDevice;

  02338	e51b30c4	 ldr         r3, [r11, #-0xC4]
  0233c	e2833008	 add         r3, r3, #8
  02340	e5933000	 ldr         r3, [r3]
  02344	e50b30d0	 str         r3, [r11, #-0xD0]

; 1741 : 
; 1742 : 
; 1743 :     // Check if we get correct context
; 1744 :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))

  02348	e51b30d0	 ldr         r3, [r11, #-0xD0]
  0234c	e3530000	 cmp         r3, #0
  02350	0a000004	 beq         |$LN46@TWL_IOCont|
  02354	e51b30d0	 ldr         r3, [r11, #-0xD0]
  02358	e5932000	 ldr         r2, [r3]
  0235c	e59f3924	 ldr         r3, [pc, #0x924]
  02360	e1520003	 cmp         r2, r3
  02364	0a00000b	 beq         |$LN47@TWL_IOCont|
  02368		 |$LN46@TWL_IOCont|

; 1745 :         {
; 1746 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IOControl: "
; 1747 :             L"Incorrect context paramer\r\n"
; 1748 :             ));

  02368	e59f38b4	 ldr         r3, [pc, #0x8B4]
  0236c	e5933440	 ldr         r3, [r3, #0x440]
  02370	e3130001	 tst         r3, #1
  02374	0a000004	 beq         |$LN55@TWL_IOCont|
  02378	e59f0904	 ldr         r0, [pc, #0x904]
  0237c	eb000000	 bl          NKDbgPrintfW
  02380	e3a03001	 mov         r3, #1
  02384	e50b3070	 str         r3, [r11, #-0x70]
  02388	ea000001	 b           |$LN56@TWL_IOCont|
  0238c		 |$LN55@TWL_IOCont|
  0238c	e3a03000	 mov         r3, #0
  02390	e50b3070	 str         r3, [r11, #-0x70]
  02394		 |$LN56@TWL_IOCont|

; 1749 :         goto cleanUp;

  02394	ea000200	 b           |$cleanUp$36945|
  02398		 |$LN47@TWL_IOCont|

; 1750 :         }
; 1751 : 
; 1752 :     switch (code)

  02398	e59b3004	 ldr         r3, [r11, #4]
  0239c	e50b306c	 str         r3, [r11, #-0x6C]
  023a0	e51b206c	 ldr         r2, [r11, #-0x6C]
  023a4	e59f38d4	 ldr         r3, [pc, #0x8D4]
  023a8	e1520003	 cmp         r2, r3
  023ac	8a000020	 bhi         |$LN77@TWL_IOCont|
  023b0	e51b206c	 ldr         r2, [r11, #-0x6C]
  023b4	e59f38c4	 ldr         r3, [pc, #0x8C4]
  023b8	e1520003	 cmp         r2, r3
  023bc	0a0001d6	 beq         |$LN4@TWL_IOCont|
  023c0	e51b206c	 ldr         r2, [r11, #-0x6C]
  023c4	e59f38b0	 ldr         r3, [pc, #0x8B0]
  023c8	e1520003	 cmp         r2, r3
  023cc	8a00000e	 bhi         |$LN78@TWL_IOCont|
  023d0	e51b206c	 ldr         r2, [r11, #-0x6C]
  023d4	e59f38a0	 ldr         r3, [pc, #0x8A0]
  023d8	e1520003	 cmp         r2, r3
  023dc	0a0000ae	 beq         |$LN27@TWL_IOCont|
  023e0	e51b206c	 ldr         r2, [r11, #-0x6C]
  023e4	e3a03822	 mov         r3, #0x22, 16
  023e8	e3833b01	 orr         r3, r3, #1, 22
  023ec	e1520003	 cmp         r2, r3
  023f0	0a00002a	 beq         |$LN42@TWL_IOCont|
  023f4	e51b206c	 ldr         r2, [r11, #-0x6C]
  023f8	e3a03822	 mov         r3, #0x22, 16
  023fc	e3833b03	 orr         r3, r3, #3, 22
  02400	e1520003	 cmp         r2, r3
  02404	0a00007c	 beq         |$LN33@TWL_IOCont|
  02408	ea0001e3	 b           |$LN43@TWL_IOCont|
  0240c		 |$LN78@TWL_IOCont|
  0240c	e51b206c	 ldr         r2, [r11, #-0x6C]
  02410	e59f3860	 ldr         r3, [pc, #0x860]
  02414	e1520003	 cmp         r2, r3
  02418	0a000196	 beq         |$LN8@TWL_IOCont|
  0241c	e51b206c	 ldr         r2, [r11, #-0x6C]
  02420	e3a03822	 mov         r3, #0x22, 16
  02424	e3833ec1	 orr         r3, r3, #0xC1, 28
  02428	e1520003	 cmp         r2, r3
  0242c	0a0001cd	 beq         |$LN2@TWL_IOCont|
  02430	ea0001d9	 b           |$LN43@TWL_IOCont|
  02434		 |$LN77@TWL_IOCont|
  02434	e51b206c	 ldr         r2, [r11, #-0x6C]
  02438	e59f3834	 ldr         r3, [pc, #0x834]
  0243c	e1520003	 cmp         r2, r3
  02440	8a00000d	 bhi         |$LN79@TWL_IOCont|
  02444	e51b206c	 ldr         r2, [r11, #-0x6C]
  02448	e59f3824	 ldr         r3, [pc, #0x824]
  0244c	e1520003	 cmp         r2, r3
  02450	0a000154	 beq         |$LN11@TWL_IOCont|
  02454	e51b206c	 ldr         r2, [r11, #-0x6C]
  02458	e59f3810	 ldr         r3, [pc, #0x810]
  0245c	e1520003	 cmp         r2, r3
  02460	0a00019a	 beq         |$LN6@TWL_IOCont|
  02464	e51b206c	 ldr         r2, [r11, #-0x6C]
  02468	e3a03832	 mov         r3, #0x32, 16
  0246c	e3833a01	 orr         r3, r3, #1, 20
  02470	e1520003	 cmp         r2, r3
  02474	0a0000a5	 beq         |$LN24@TWL_IOCont|
  02478	ea0001c7	 b           |$LN43@TWL_IOCont|
  0247c		 |$LN79@TWL_IOCont|
  0247c	e51b206c	 ldr         r2, [r11, #-0x6C]
  02480	e59f37e4	 ldr         r3, [pc, #0x7E4]
  02484	e1520003	 cmp         r2, r3
  02488	0a0000de	 beq         |$LN20@TWL_IOCont|
  0248c	e51b206c	 ldr         r2, [r11, #-0x6C]
  02490	e59f37d0	 ldr         r3, [pc, #0x7D0]
  02494	e1520003	 cmp         r2, r3
  02498	0a0000cc	 beq         |$LN21@TWL_IOCont|
  0249c	ea0001be	 b           |$LN43@TWL_IOCont|
  024a0		 |$LN42@TWL_IOCont|

; 1753 :         {
; 1754 :         case IOCTL_DDK_GET_DRIVER_IFC:
; 1755 :             // We can give interface only to our peer in device process
; 1756 :             if (GetCurrentProcessId() != (DWORD)GetCallerProcess())

  024a0	eb000000	 bl          GetCurrentProcessId
  024a4	e50b0068	 str         r0, [r11, #-0x68]
  024a8	eb000000	 bl          GetCallerProcess
  024ac	e50b0064	 str         r0, [r11, #-0x64]
  024b0	e51b2068	 ldr         r2, [r11, #-0x68]
  024b4	e51b3064	 ldr         r3, [r11, #-0x64]
  024b8	e1520003	 cmp         r2, r3
  024bc	0a000010	 beq         |$LN41@TWL_IOCont|

; 1757 :                 {
; 1758 :                 DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IOControl: "
; 1759 :                     L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 1760 :                     L"device process (caller process id 0x%08x)\r\n",
; 1761 :                     GetCallerProcess()
; 1762 :                     ));

  024c0	e59f375c	 ldr         r3, [pc, #0x75C]
  024c4	e5933440	 ldr         r3, [r3, #0x440]
  024c8	e3130001	 tst         r3, #1
  024cc	0a000007	 beq         |$LN57@TWL_IOCont|
  024d0	eb000000	 bl          GetCallerProcess
  024d4	e50b0060	 str         r0, [r11, #-0x60]
  024d8	e51b1060	 ldr         r1, [r11, #-0x60]
  024dc	e59f0780	 ldr         r0, [pc, #0x780]
  024e0	eb000000	 bl          NKDbgPrintfW
  024e4	e3a03001	 mov         r3, #1
  024e8	e50b305c	 str         r3, [r11, #-0x5C]
  024ec	ea000001	 b           |$LN58@TWL_IOCont|
  024f0		 |$LN57@TWL_IOCont|
  024f0	e3a03000	 mov         r3, #0
  024f4	e50b305c	 str         r3, [r11, #-0x5C]
  024f8		 |$LN58@TWL_IOCont|

; 1763 :                 SetLastError(ERROR_ACCESS_DENIED);

  024f8	e3a00005	 mov         r0, #5
  024fc	eb000000	 bl          SetLastError

; 1764 :                 break;

  02500	ea0001a5	 b           |$LN43@TWL_IOCont|
  02504		 |$LN41@TWL_IOCont|

; 1765 :                 }
; 1766 :             // Check input parameters
; 1767 :             if ((pInBuffer == NULL) || (inSize < sizeof(GUID)))

  02504	e59b3008	 ldr         r3, [r11, #8]
  02508	e3530000	 cmp         r3, #0
  0250c	0a000002	 beq         |$LN39@TWL_IOCont|
  02510	e59b300c	 ldr         r3, [r11, #0xC]
  02514	e3530010	 cmp         r3, #0x10
  02518	2a000002	 bcs         |$LN40@TWL_IOCont|
  0251c		 |$LN39@TWL_IOCont|

; 1768 :                 {
; 1769 :                 SetLastError(ERROR_INVALID_PARAMETER);

  0251c	e3a00057	 mov         r0, #0x57
  02520	eb000000	 bl          SetLastError

; 1770 :                 break;

  02524	ea00019c	 b           |$LN43@TWL_IOCont|
  02528		 |$LN40@TWL_IOCont|

; 1771 :                 }
; 1772 :             if (IsEqualGUID(*(GUID*)pInBuffer, DEVICE_IFC_TWL_GUID))

  02528	e59f1730	 ldr         r1, [pc, #0x730]
  0252c	e59b0008	 ldr         r0, [r11, #8]
  02530	eb000000	 bl          |?IsEqualGUID@@YAHABU_GUID@@0@Z|
  02534	e50b0058	 str         r0, [r11, #-0x58]
  02538	e51b3058	 ldr         r3, [r11, #-0x58]
  0253c	e3530000	 cmp         r3, #0
  02540	0a00002a	 beq         |$LN38@TWL_IOCont|

; 1773 :                 {
; 1774 :                 if (pOutSize != NULL) *pOutSize = sizeof(DEVICE_IFC_TWL);

  02544	e59b3018	 ldr         r3, [r11, #0x18]
  02548	e3530000	 cmp         r3, #0
  0254c	0a000002	 beq         |$LN37@TWL_IOCont|
  02550	e59b2018	 ldr         r2, [r11, #0x18]
  02554	e3a0301c	 mov         r3, #0x1C
  02558	e5823000	 str         r3, [r2]
  0255c		 |$LN37@TWL_IOCont|

; 1775 :                 if (pOutBuffer == NULL || outSize < sizeof(DEVICE_IFC_TWL))

  0255c	e59b3010	 ldr         r3, [r11, #0x10]
  02560	e3530000	 cmp         r3, #0
  02564	0a000002	 beq         |$LN35@TWL_IOCont|
  02568	e59b3014	 ldr         r3, [r11, #0x14]
  0256c	e353001c	 cmp         r3, #0x1C
  02570	2a000002	 bcs         |$LN36@TWL_IOCont|
  02574		 |$LN35@TWL_IOCont|

; 1776 :                     {
; 1777 :                     SetLastError(ERROR_INVALID_PARAMETER);

  02574	e3a00057	 mov         r0, #0x57
  02578	eb000000	 bl          SetLastError

; 1778 :                     break;

  0257c	ea000186	 b           |$LN43@TWL_IOCont|
  02580		 |$LN36@TWL_IOCont|

; 1779 :                     }
; 1780 :                 ifc.context = context;

  02580	e59b3000	 ldr         r3, [r11]
  02584	e50b30b8	 str         r3, [r11, #-0xB8]

; 1781 :                 ifc.pfnReadRegs = TWL_ReadRegs;

  02588	e59f36cc	 ldr         r3, [pc, #0x6CC]
  0258c	e50b30b4	 str         r3, [r11, #-0xB4]

; 1782 :                 ifc.pfnWriteRegs = TWL_WriteRegs;

  02590	e59f36c0	 ldr         r3, [pc, #0x6C0]
  02594	e50b30b0	 str         r3, [r11, #-0xB0]

; 1783 :                 ifc.pfnInterruptInitialize = TWL_InterruptInitialize;

  02598	e59f36b4	 ldr         r3, [pc, #0x6B4]
  0259c	e50b30ac	 str         r3, [r11, #-0xAC]

; 1784 :                 ifc.pfnInterruptMask = TWL_InterruptMask;

  025a0	e59f36a8	 ldr         r3, [pc, #0x6A8]
  025a4	e50b30a4	 str         r3, [r11, #-0xA4]

; 1785 :                 ifc.pfnInterruptDisable = TWL_InterruptDisable;

  025a8	e59f369c	 ldr         r3, [pc, #0x69C]
  025ac	e50b30a8	 str         r3, [r11, #-0xA8]

; 1786 :                 ifc.pfnEnableWakeup = TWL_EnableWakeup;

  025b0	e59f3690	 ldr         r3, [pc, #0x690]
  025b4	e50b30a0	 str         r3, [r11, #-0xA0]

; 1787 :                 if (!CeSafeCopyMemory(pOutBuffer, &ifc, sizeof(DEVICE_IFC_TWL)))

  025b8	e3a0201c	 mov         r2, #0x1C
  025bc	e24b10b8	 sub         r1, r11, #0xB8
  025c0	e59b0010	 ldr         r0, [r11, #0x10]
  025c4	eb000000	 bl          CeSafeCopyMemory
  025c8	e50b0054	 str         r0, [r11, #-0x54]
  025cc	e51b3054	 ldr         r3, [r11, #-0x54]
  025d0	e3530000	 cmp         r3, #0
  025d4	1a000002	 bne         |$LN34@TWL_IOCont|

; 1788 :                     {
; 1789 :                     SetLastError(ERROR_INVALID_PARAMETER);

  025d8	e3a00057	 mov         r0, #0x57
  025dc	eb000000	 bl          SetLastError

; 1790 :                     break;

  025e0	ea00016d	 b           |$LN43@TWL_IOCont|
  025e4		 |$LN34@TWL_IOCont|

; 1791 :                     }
; 1792 :                 rc = TRUE;

  025e4	e3a03001	 mov         r3, #1
  025e8	e50b30c8	 str         r3, [r11, #-0xC8]

; 1793 :                 break;

  025ec	ea00016a	 b           |$LN43@TWL_IOCont|
  025f0		 |$LN38@TWL_IOCont|

; 1794 :                 }
; 1795 :             SetLastError(ERROR_INVALID_PARAMETER);

  025f0	e3a00057	 mov         r0, #0x57
  025f4	eb000000	 bl          SetLastError

; 1796 :             break;

  025f8	ea000167	 b           |$LN43@TWL_IOCont|
  025fc		 |$LN33@TWL_IOCont|

; 1797 :             
; 1798 :         case IOCTL_TWL_READREGS:
; 1799 :             if ((pInBuffer == NULL) || 
; 1800 :                 (inSize < sizeof(IOCTL_TWL_READREGS_IN)))

  025fc	e59b3008	 ldr         r3, [r11, #8]
  02600	e3530000	 cmp         r3, #0
  02604	0a000002	 beq         |$LN31@TWL_IOCont|
  02608	e59b300c	 ldr         r3, [r11, #0xC]
  0260c	e3530008	 cmp         r3, #8
  02610	2a000002	 bcs         |$LN32@TWL_IOCont|
  02614		 |$LN31@TWL_IOCont|

; 1801 :                 {
; 1802 :                 SetLastError(ERROR_INVALID_PARAMETER);

  02614	e3a00057	 mov         r0, #0x57
  02618	eb000000	 bl          SetLastError

; 1803 :                 break;

  0261c	ea00015e	 b           |$LN43@TWL_IOCont|
  02620		 |$LN32@TWL_IOCont|

; 1804 :                 }
; 1805 :             address = ((IOCTL_TWL_READREGS_IN*)pInBuffer)->address;

  02620	e59b3008	 ldr         r3, [r11, #8]
  02624	e5933000	 ldr         r3, [r3]
  02628	e50b30bc	 str         r3, [r11, #-0xBC]

; 1806 :             size = ((IOCTL_TWL_READREGS_IN*)pInBuffer)->size;

  0262c	e59b3008	 ldr         r3, [r11, #8]
  02630	e2833004	 add         r3, r3, #4
  02634	e5933000	 ldr         r3, [r3]
  02638	e50b30c0	 str         r3, [r11, #-0xC0]

; 1807 :             if (pOutSize != NULL) *pOutSize = size;

  0263c	e59b3018	 ldr         r3, [r11, #0x18]
  02640	e3530000	 cmp         r3, #0
  02644	0a000002	 beq         |$LN30@TWL_IOCont|
  02648	e51b20c0	 ldr         r2, [r11, #-0xC0]
  0264c	e59b3018	 ldr         r3, [r11, #0x18]
  02650	e5832000	 str         r2, [r3]
  02654		 |$LN30@TWL_IOCont|

; 1808 :             if ((pOutBuffer == NULL) || (outSize < size))

  02654	e59b3010	 ldr         r3, [r11, #0x10]
  02658	e3530000	 cmp         r3, #0
  0265c	0a000003	 beq         |$LN28@TWL_IOCont|
  02660	e59b2014	 ldr         r2, [r11, #0x14]
  02664	e51b30c0	 ldr         r3, [r11, #-0xC0]
  02668	e1520003	 cmp         r2, r3
  0266c	2a000002	 bcs         |$LN29@TWL_IOCont|
  02670		 |$LN28@TWL_IOCont|

; 1809 :                 {
; 1810 :                 SetLastError(ERROR_INVALID_PARAMETER);

  02670	e3a00057	 mov         r0, #0x57
  02674	eb000000	 bl          SetLastError

; 1811 :                 break;

  02678	ea000147	 b           |$LN43@TWL_IOCont|
  0267c		 |$LN29@TWL_IOCont|

; 1812 :                 }
; 1813 :             rc = TWL_ReadRegs(context, address, pOutBuffer, size);

  0267c	e51b30c0	 ldr         r3, [r11, #-0xC0]
  02680	e59b2010	 ldr         r2, [r11, #0x10]
  02684	e51b10bc	 ldr         r1, [r11, #-0xBC]
  02688	e59b0000	 ldr         r0, [r11]
  0268c	eb000000	 bl          |?TWL_ReadRegs@@YAHKKPAXK@Z|
  02690	e50b0050	 str         r0, [r11, #-0x50]
  02694	e51b3050	 ldr         r3, [r11, #-0x50]
  02698	e50b30c8	 str         r3, [r11, #-0xC8]
  0269c		 |$LN27@TWL_IOCont|

; 1814 : 
; 1815 :         case IOCTL_TWL_WRITEREGS:
; 1816 :             if ((pInBuffer == NULL) || 
; 1817 :                 (inSize < sizeof(IOCTL_TWL_WRITEREGS_IN)))

  0269c	e59b3008	 ldr         r3, [r11, #8]
  026a0	e3530000	 cmp         r3, #0
  026a4	0a000002	 beq         |$LN25@TWL_IOCont|
  026a8	e59b300c	 ldr         r3, [r11, #0xC]
  026ac	e353000c	 cmp         r3, #0xC
  026b0	2a000002	 bcs         |$LN26@TWL_IOCont|
  026b4		 |$LN25@TWL_IOCont|

; 1818 :                 {
; 1819 :                 SetLastError(ERROR_INVALID_PARAMETER);

  026b4	e3a00057	 mov         r0, #0x57
  026b8	eb000000	 bl          SetLastError

; 1820 :                 break;

  026bc	ea000136	 b           |$LN43@TWL_IOCont|
  026c0		 |$LN26@TWL_IOCont|

; 1821 :                 }
; 1822 :             address = ((IOCTL_TWL_WRITEREGS_IN*)pInBuffer)->address;

  026c0	e59b3008	 ldr         r3, [r11, #8]
  026c4	e5933000	 ldr         r3, [r3]
  026c8	e50b30bc	 str         r3, [r11, #-0xBC]

; 1823 :             pBuffer = ((IOCTL_TWL_WRITEREGS_IN*)pInBuffer)->pBuffer;

  026cc	e59b3008	 ldr         r3, [r11, #8]
  026d0	e2833004	 add         r3, r3, #4
  026d4	e5933000	 ldr         r3, [r3]
  026d8	e50b30cc	 str         r3, [r11, #-0xCC]

; 1824 :             size = ((IOCTL_TWL_WRITEREGS_IN*)pInBuffer)->size;

  026dc	e59b3008	 ldr         r3, [r11, #8]
  026e0	e2833008	 add         r3, r3, #8
  026e4	e5933000	 ldr         r3, [r3]
  026e8	e50b30c0	 str         r3, [r11, #-0xC0]

; 1825 :             /*
; 1826 :             if (inSize < (sizeof(IOCTL_TWL_WRITEREGS_IN) + size))
; 1827 :                 {
; 1828 :                 SetLastError(ERROR_INVALID_PARAMETER);
; 1829 :                 break;
; 1830 :                 }
; 1831 :             */	
; 1832 :             rc = TWL_WriteRegs(context, address, pBuffer, size);

  026ec	e51b30c0	 ldr         r3, [r11, #-0xC0]
  026f0	e51b20cc	 ldr         r2, [r11, #-0xCC]
  026f4	e51b10bc	 ldr         r1, [r11, #-0xBC]
  026f8	e59b0000	 ldr         r0, [r11]
  026fc	eb000000	 bl          |?TWL_WriteRegs@@YAHKKPBXK@Z|
  02700	e50b004c	 str         r0, [r11, #-0x4C]
  02704	e51b304c	 ldr         r3, [r11, #-0x4C]
  02708	e50b30c8	 str         r3, [r11, #-0xC8]

; 1833 :             break;

  0270c	ea000122	 b           |$LN43@TWL_IOCont|
  02710		 |$LN24@TWL_IOCont|

; 1834 : 
; 1835 :         case IOCTL_POWER_CAPABILITIES: 
; 1836 :             DEBUGMSG(ZONE_INFO, (L"TWL: Received IOCTL_POWER_CAPABILITIES\r\n"));

  02710	e59f350c	 ldr         r3, [pc, #0x50C]
  02714	e5933440	 ldr         r3, [r3, #0x440]
  02718	e3130010	 tst         r3, #0x10
  0271c	0a000004	 beq         |$LN59@TWL_IOCont|
  02720	e59f051c	 ldr         r0, [pc, #0x51C]
  02724	eb000000	 bl          NKDbgPrintfW
  02728	e3a03001	 mov         r3, #1
  0272c	e50b3048	 str         r3, [r11, #-0x48]
  02730	ea000001	 b           |$LN60@TWL_IOCont|
  02734		 |$LN59@TWL_IOCont|
  02734	e3a03000	 mov         r3, #0
  02738	e50b3048	 str         r3, [r11, #-0x48]
  0273c		 |$LN60@TWL_IOCont|

; 1837 :             if (pOutBuffer && outSize >= sizeof (POWER_CAPABILITIES) && 
; 1838 :                 pOutSize) 

  0273c	e59b3010	 ldr         r3, [r11, #0x10]
  02740	e3530000	 cmp         r3, #0
  02744	0a000020	 beq         |$LN23@TWL_IOCont|
  02748	e59b3014	 ldr         r3, [r11, #0x14]
  0274c	e3530030	 cmp         r3, #0x30
  02750	3a00001d	 bcc         |$LN23@TWL_IOCont|
  02754	e59b3018	 ldr         r3, [r11, #0x18]
  02758	e3530000	 cmp         r3, #0
  0275c	0a00001a	 beq         |$LN23@TWL_IOCont|
  02760		 |$LN87@TWL_IOCont|

; 1839 :                 {
; 1840 :                     __try 
; 1841 :                         {
; 1842 :                         PPOWER_CAPABILITIES PowerCaps;
; 1843 :                         PowerCaps = (PPOWER_CAPABILITIES)pOutBuffer;

  02760	e59b3010	 ldr         r3, [r11, #0x10]
  02764	e50b309c	 str         r3, [r11, #-0x9C]

; 1844 :          
; 1845 :                         // Only supports D0 (permanently on) and D4(off.         
; 1846 :                         memset(PowerCaps, 0, sizeof(*PowerCaps));

  02768	e3a02030	 mov         r2, #0x30
  0276c	e3a01000	 mov         r1, #0
  02770	e51b009c	 ldr         r0, [r11, #-0x9C]
  02774	eb000000	 bl          memset

; 1847 :                         PowerCaps->DeviceDx = (DX_MASK(D0) | 
; 1848 :                                                DX_MASK(D2) | 
; 1849 :                                                DX_MASK(D3) | 
; 1850 :                                                DX_MASK(D4));

  02778	e51b209c	 ldr         r2, [r11, #-0x9C]
  0277c	e3a0301d	 mov         r3, #0x1D
  02780	e5c23000	 strb        r3, [r2]

; 1851 :                         *pOutSize = sizeof(*PowerCaps);                        

  02784	e59b2018	 ldr         r2, [r11, #0x18]
  02788	e3a03030	 mov         r3, #0x30
  0278c	e5823000	 str         r3, [r2]

; 1852 :                         rc = TRUE;

  02790	e3a03001	 mov         r3, #1
  02794	e50b30c8	 str         r3, [r11, #-0xC8]
  02798		 |$LN88@TWL_IOCont|

; 1853 :                         }

  02798	ea00000b	 b           |$LN89@TWL_IOCont|
  0279c		 |$LN84@TWL_IOCont|

; 1855 :                         {
; 1856 :                         RETAILMSG(ZONE_ERROR, (L"exception in ioctl\r\n"));

  0279c	e59f3480	 ldr         r3, [pc, #0x480]
  027a0	e5933440	 ldr         r3, [r3, #0x440]
  027a4	e3130001	 tst         r3, #1
  027a8	0a000004	 beq         |$LN61@TWL_IOCont|
  027ac	e59f048c	 ldr         r0, [pc, #0x48C]
  027b0	eb000000	 bl          NKDbgPrintfW
  027b4	e3a03001	 mov         r3, #1
  027b8	e50b3044	 str         r3, [r11, #-0x44]
  027bc	ea000001	 b           |$LN62@TWL_IOCont|
  027c0		 |$LN61@TWL_IOCont|
  027c0	e3a03000	 mov         r3, #0
  027c4	e50b3044	 str         r3, [r11, #-0x44]
  027c8		 |$LN62@TWL_IOCont|
  027c8	eaffffff	 b           |$LN89@TWL_IOCont|
  027cc		 |$LN89@TWL_IOCont|
  027cc		 |$LN23@TWL_IOCont|

; 1857 :                         }
; 1858 :                 }
; 1859 :             break;

  027cc	ea0000f2	 b           |$LN43@TWL_IOCont|
  027d0		 |$LN21@TWL_IOCont|

; 1860 : 
; 1861 :         // deprecated
; 1862 :         case IOCTL_POWER_QUERY: 
; 1863 :             rc = TRUE;

  027d0	e3a03001	 mov         r3, #1
  027d4	e50b30c8	 str         r3, [r11, #-0xC8]

; 1864 :             DEBUGMSG(ZONE_INFO,(L"TWL: Received IOCTL_POWER_QUERY\r\n"));

  027d8	e59f3444	 ldr         r3, [pc, #0x444]
  027dc	e5933440	 ldr         r3, [r3, #0x440]
  027e0	e3130010	 tst         r3, #0x10
  027e4	0a000004	 beq         |$LN63@TWL_IOCont|
  027e8	e59f044c	 ldr         r0, [pc, #0x44C]
  027ec	eb000000	 bl          NKDbgPrintfW
  027f0	e3a03001	 mov         r3, #1
  027f4	e50b3040	 str         r3, [r11, #-0x40]
  027f8	ea000001	 b           |$LN64@TWL_IOCont|
  027fc		 |$LN63@TWL_IOCont|
  027fc	e3a03000	 mov         r3, #0
  02800	e50b3040	 str         r3, [r11, #-0x40]
  02804		 |$LN64@TWL_IOCont|

; 1865 :             break;

  02804	ea0000e4	 b           |$LN43@TWL_IOCont|
  02808		 |$LN20@TWL_IOCont|

; 1866 : 
; 1867 :         // requests a change from one device power state to another
; 1868 :         case IOCTL_POWER_SET: 
; 1869 :             DEBUGMSG(ZONE_INFO,(L"TWL: Received IOCTL_POWER_SET\r\n"));

  02808	e59f3414	 ldr         r3, [pc, #0x414]
  0280c	e5933440	 ldr         r3, [r3, #0x440]
  02810	e3130010	 tst         r3, #0x10
  02814	0a000004	 beq         |$LN65@TWL_IOCont|
  02818	e59f0418	 ldr         r0, [pc, #0x418]
  0281c	eb000000	 bl          NKDbgPrintfW
  02820	e3a03001	 mov         r3, #1
  02824	e50b303c	 str         r3, [r11, #-0x3C]
  02828	ea000001	 b           |$LN66@TWL_IOCont|
  0282c		 |$LN65@TWL_IOCont|
  0282c	e3a03000	 mov         r3, #0
  02830	e50b303c	 str         r3, [r11, #-0x3C]
  02834		 |$LN66@TWL_IOCont|

; 1870 :             if (pOutBuffer && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  02834	e59b3010	 ldr         r3, [r11, #0x10]
  02838	e3530000	 cmp         r3, #0
  0283c	0a000058	 beq         |$LN19@TWL_IOCont|
  02840	e59b3014	 ldr         r3, [r11, #0x14]
  02844	e3530004	 cmp         r3, #4
  02848	3a000055	 bcc         |$LN19@TWL_IOCont|
  0284c		 |$LN94@TWL_IOCont|

; 1871 :                 {
; 1872 :                 __try 
; 1873 :                     {
; 1874 :                     CEDEVICE_POWER_STATE ReqDx = *(PCEDEVICE_POWER_STATE)pOutBuffer;

  0284c	e59b3010	 ldr         r3, [r11, #0x10]
  02850	e5933000	 ldr         r3, [r3]
  02854	e50b3098	 str         r3, [r11, #-0x98]

; 1875 :                     switch (ReqDx)

  02858	e51b3098	 ldr         r3, [r11, #-0x98]
  0285c	e50b3038	 str         r3, [r11, #-0x38]
  02860	e51b3038	 ldr         r3, [r11, #-0x38]
  02864	e3530004	 cmp         r3, #4
  02868	8a000028	 bhi         |$LN16@TWL_IOCont|
  0286c	e51b2038	 ldr         r2, [r11, #-0x38]
  02870	e1a03102	 mov         r3, r2, lsl #2
  02874	e083300f	 add         r3, r3, pc
  02878	e5933004	 ldr         r3, [r3, #4]
  0287c	e08ff003	 add         pc, pc, r3
  02880		 |$LN114@TWL_IOCont|
  02880		 |$LN113@TWL_IOCont|
  02880		 |$LN115@TWL_IOCont|
  02880	00000010	 DCD         0x10
  02884		 |$LN116@TWL_IOCont|
  02884	00000030	 DCD         0x30
  02888		 |$LN117@TWL_IOCont|
  02888	00000030	 DCD         0x30
  0288c		 |$LN118@TWL_IOCont|
  0288c	00000050	 DCD         0x50
  02890		 |$LN119@TWL_IOCont|
  02890	00000070	 DCD         0x70
  02894		 |$LN15@TWL_IOCont|

; 1876 :                         {
; 1877 :                         case D0:
; 1878 :                             SetInterruptMode(pDevice, kTritonIntrEnabled);

  02894	e3a01000	 mov         r1, #0
  02898	e51b00d0	 ldr         r0, [r11, #-0xD0]
  0289c	eb000000	 bl          |?SetInterruptMode@@YAHPAUDevice_t@@W4InterruptMode_e@@@Z|

; 1879 :                             pDevice->powerState = D0;

  028a0	e51b30d0	 ldr         r3, [r11, #-0xD0]
  028a4	e2832044	 add         r2, r3, #0x44
  028a8	e3a03000	 mov         r3, #0
  028ac	e5823000	 str         r3, [r2]

; 1880 :                             break;

  028b0	ea000016	 b           |$LN16@TWL_IOCont|
  028b4		 |$LN14@TWL_IOCont|

; 1881 :                             
; 1882 :                         case D1:
; 1883 :                         case D2:
; 1884 :                             SetInterruptMode(pDevice, kTritonIntrEnabled);

  028b4	e3a01000	 mov         r1, #0
  028b8	e51b00d0	 ldr         r0, [r11, #-0xD0]
  028bc	eb000000	 bl          |?SetInterruptMode@@YAHPAUDevice_t@@W4InterruptMode_e@@@Z|

; 1885 :                             pDevice->powerState = D2;

  028c0	e51b30d0	 ldr         r3, [r11, #-0xD0]
  028c4	e2832044	 add         r2, r3, #0x44
  028c8	e3a03002	 mov         r3, #2
  028cc	e5823000	 str         r3, [r2]

; 1886 :                             break;

  028d0	ea00000e	 b           |$LN16@TWL_IOCont|
  028d4		 |$LN13@TWL_IOCont|

; 1887 : 
; 1888 :                         case D3:
; 1889 :                             SetInterruptMode(pDevice, kTritonIntrWakeup);

  028d4	e3a01001	 mov         r1, #1
  028d8	e51b00d0	 ldr         r0, [r11, #-0xD0]
  028dc	eb000000	 bl          |?SetInterruptMode@@YAHPAUDevice_t@@W4InterruptMode_e@@@Z|

; 1890 :                             pDevice->powerState = D3;

  028e0	e51b30d0	 ldr         r3, [r11, #-0xD0]
  028e4	e2832044	 add         r2, r3, #0x44
  028e8	e3a03003	 mov         r3, #3
  028ec	e5823000	 str         r3, [r2]

; 1891 :                             break;

  028f0	ea000006	 b           |$LN16@TWL_IOCont|
  028f4		 |$LN12@TWL_IOCont|

; 1892 : 
; 1893 :                         case D4:
; 1894 :                             SetInterruptMode(pDevice, kTritonIntrDisabled);

  028f4	e3a01002	 mov         r1, #2
  028f8	e51b00d0	 ldr         r0, [r11, #-0xD0]
  028fc	eb000000	 bl          |?SetInterruptMode@@YAHPAUDevice_t@@W4InterruptMode_e@@@Z|

; 1895 :                             pDevice->powerState = D4;

  02900	e51b30d0	 ldr         r3, [r11, #-0xD0]
  02904	e2832044	 add         r2, r3, #0x44
  02908	e3a03004	 mov         r3, #4
  0290c	e5823000	 str         r3, [r2]
  02910		 |$LN16@TWL_IOCont|

; 1896 :                             break;
; 1897 :                         }
; 1898 :                     *(PCEDEVICE_POWER_STATE)pOutBuffer = pDevice->powerState;

  02910	e51b30d0	 ldr         r3, [r11, #-0xD0]
  02914	e2833044	 add         r3, r3, #0x44
  02918	e5932000	 ldr         r2, [r3]
  0291c	e59b3010	 ldr         r3, [r11, #0x10]
  02920	e5832000	 str         r2, [r3]

; 1899 :                     *pOutSize = sizeof(CEDEVICE_POWER_STATE);

  02924	e59b2018	 ldr         r2, [r11, #0x18]
  02928	e3a03004	 mov         r3, #4
  0292c	e5823000	 str         r3, [r2]

; 1900 :                     DEBUGMSG(ZONE_INFO, (L"TWL: IOCTL_POWER_SET to D%u \r\n",
; 1901 :                         pDevice->powerState
; 1902 :                         ));

  02930	e59f32ec	 ldr         r3, [pc, #0x2EC]
  02934	e5933440	 ldr         r3, [r3, #0x440]
  02938	e3130010	 tst         r3, #0x10
  0293c	0a000007	 beq         |$LN67@TWL_IOCont|
  02940	e51b30d0	 ldr         r3, [r11, #-0xD0]
  02944	e2833044	 add         r3, r3, #0x44
  02948	e5931000	 ldr         r1, [r3]
  0294c	e59f02e0	 ldr         r0, [pc, #0x2E0]
  02950	eb000000	 bl          NKDbgPrintfW
  02954	e3a03001	 mov         r3, #1
  02958	e50b3034	 str         r3, [r11, #-0x34]
  0295c	ea000001	 b           |$LN68@TWL_IOCont|
  02960		 |$LN67@TWL_IOCont|
  02960	e3a03000	 mov         r3, #0
  02964	e50b3034	 str         r3, [r11, #-0x34]
  02968		 |$LN68@TWL_IOCont|

; 1903 : 
; 1904 :                     rc = TRUE;

  02968	e3a03001	 mov         r3, #1
  0296c	e50b30c8	 str         r3, [r11, #-0xC8]
  02970		 |$LN95@TWL_IOCont|

; 1905 :                     }

  02970	ea00000b	 b           |$LN96@TWL_IOCont|
  02974		 |$LN91@TWL_IOCont|

; 1907 :                     {
; 1908 :                     RETAILMSG(ZONE_ERROR, (L"Exception in ioctl\r\n"));

  02974	e59f32a8	 ldr         r3, [pc, #0x2A8]
  02978	e5933440	 ldr         r3, [r3, #0x440]
  0297c	e3130001	 tst         r3, #1
  02980	0a000004	 beq         |$LN69@TWL_IOCont|
  02984	e59f029c	 ldr         r0, [pc, #0x29C]
  02988	eb000000	 bl          NKDbgPrintfW
  0298c	e3a03001	 mov         r3, #1
  02990	e50b3030	 str         r3, [r11, #-0x30]
  02994	ea000001	 b           |$LN70@TWL_IOCont|
  02998		 |$LN69@TWL_IOCont|
  02998	e3a03000	 mov         r3, #0
  0299c	e50b3030	 str         r3, [r11, #-0x30]
  029a0		 |$LN70@TWL_IOCont|
  029a0	eaffffff	 b           |$LN96@TWL_IOCont|
  029a4		 |$LN96@TWL_IOCont|
  029a4		 |$LN19@TWL_IOCont|

; 1909 :                     }
; 1910 :             }
; 1911 :             break;

  029a4	ea00007c	 b           |$LN43@TWL_IOCont|
  029a8		 |$LN11@TWL_IOCont|

; 1912 : 
; 1913 :         // gets the current device power state
; 1914 :         case IOCTL_POWER_GET: 
; 1915 :             DEBUGMSG(ZONE_INFO, (L"TWL: Received IOCTL_POWER_GET\r\n"));

  029a8	e59f3274	 ldr         r3, [pc, #0x274]
  029ac	e5933440	 ldr         r3, [r3, #0x440]
  029b0	e3130010	 tst         r3, #0x10
  029b4	0a000004	 beq         |$LN71@TWL_IOCont|
  029b8	e59f0270	 ldr         r0, [pc, #0x270]
  029bc	eb000000	 bl          NKDbgPrintfW
  029c0	e3a03001	 mov         r3, #1
  029c4	e50b302c	 str         r3, [r11, #-0x2C]
  029c8	ea000001	 b           |$LN72@TWL_IOCont|
  029cc		 |$LN71@TWL_IOCont|
  029cc	e3a03000	 mov         r3, #0
  029d0	e50b302c	 str         r3, [r11, #-0x2C]
  029d4		 |$LN72@TWL_IOCont|

; 1916 :             if (pOutBuffer != NULL && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  029d4	e59b3010	 ldr         r3, [r11, #0x10]
  029d8	e3530000	 cmp         r3, #0
  029dc	0a000024	 beq         |$LN10@TWL_IOCont|
  029e0	e59b3014	 ldr         r3, [r11, #0x14]
  029e4	e3530004	 cmp         r3, #4
  029e8	3a000021	 bcc         |$LN10@TWL_IOCont|
  029ec		 |$LN101@TWL_IOCont|

; 1917 :                 {
; 1918 :                 __try 
; 1919 :                     {
; 1920 :                     *(PCEDEVICE_POWER_STATE)pOutBuffer = pDevice->powerState;

  029ec	e51b30d0	 ldr         r3, [r11, #-0xD0]
  029f0	e2833044	 add         r3, r3, #0x44
  029f4	e5932000	 ldr         r2, [r3]
  029f8	e59b3010	 ldr         r3, [r11, #0x10]
  029fc	e5832000	 str         r2, [r3]

; 1921 :  
; 1922 :                     rc = TRUE;

  02a00	e3a03001	 mov         r3, #1
  02a04	e50b30c8	 str         r3, [r11, #-0xC8]

; 1923 : 
; 1924 :                     DEBUGMSG(ZONE_INFO, (L"TWL: "
; 1925 :                             L"IOCTL_POWER_GET to D%u \r\n",
; 1926 :                             pDevice->powerState
; 1927 :                             ));

  02a08	e59f3214	 ldr         r3, [pc, #0x214]
  02a0c	e5933440	 ldr         r3, [r3, #0x440]
  02a10	e3130010	 tst         r3, #0x10
  02a14	0a000007	 beq         |$LN73@TWL_IOCont|
  02a18	e51b30d0	 ldr         r3, [r11, #-0xD0]
  02a1c	e2833044	 add         r3, r3, #0x44
  02a20	e5931000	 ldr         r1, [r3]
  02a24	e59f0200	 ldr         r0, [pc, #0x200]
  02a28	eb000000	 bl          NKDbgPrintfW
  02a2c	e3a03001	 mov         r3, #1
  02a30	e50b3028	 str         r3, [r11, #-0x28]
  02a34	ea000001	 b           |$LN74@TWL_IOCont|
  02a38		 |$LN73@TWL_IOCont|
  02a38	e3a03000	 mov         r3, #0
  02a3c	e50b3028	 str         r3, [r11, #-0x28]
  02a40		 |$LN74@TWL_IOCont|
  02a40		 |$LN102@TWL_IOCont|

; 1928 :                     }

  02a40	ea00000b	 b           |$LN103@TWL_IOCont|
  02a44		 |$LN98@TWL_IOCont|

; 1930 :                     {
; 1931 :                     RETAILMSG(ZONE_ERROR, (L"Exception in ioctl\r\n"));

  02a44	e59f31d8	 ldr         r3, [pc, #0x1D8]
  02a48	e5933440	 ldr         r3, [r3, #0x440]
  02a4c	e3130001	 tst         r3, #1
  02a50	0a000004	 beq         |$LN75@TWL_IOCont|
  02a54	e59f01cc	 ldr         r0, [pc, #0x1CC]
  02a58	eb000000	 bl          NKDbgPrintfW
  02a5c	e3a03001	 mov         r3, #1
  02a60	e50b3024	 str         r3, [r11, #-0x24]
  02a64	ea000001	 b           |$LN76@TWL_IOCont|
  02a68		 |$LN75@TWL_IOCont|
  02a68	e3a03000	 mov         r3, #0
  02a6c	e50b3024	 str         r3, [r11, #-0x24]
  02a70		 |$LN76@TWL_IOCont|
  02a70	eaffffff	 b           |$LN103@TWL_IOCont|
  02a74		 |$LN103@TWL_IOCont|
  02a74		 |$LN10@TWL_IOCont|

; 1932 :                     }
; 1933 :                 }     
; 1934 :             break;

  02a74	ea000048	 b           |$LN43@TWL_IOCont|
  02a78		 |$LN8@TWL_IOCont|

; 1935 : 
; 1936 :         case IOCTL_TWL_INTRINIT:
; 1937 :             if (pInBuffer != NULL && inSize == sizeof(IOCTL_TWL_INTRINIT_IN))

  02a78	e59b3008	 ldr         r3, [r11, #8]
  02a7c	e3530000	 cmp         r3, #0
  02a80	0a000011	 beq         |$LN7@TWL_IOCont|
  02a84	e59b300c	 ldr         r3, [r11, #0xC]
  02a88	e353000c	 cmp         r3, #0xC
  02a8c	1a00000e	 bne         |$LN7@TWL_IOCont|

; 1938 :                 {
; 1939 :                 IOCTL_TWL_INTRINIT_IN *pInParam = (IOCTL_TWL_INTRINIT_IN*)pInBuffer;

  02a90	e59b3008	 ldr         r3, [r11, #8]
  02a94	e50b3094	 str         r3, [r11, #-0x94]

; 1940 :                 rc = TWL_InterruptInitializeProxy(context, pInParam->procId, pInParam->intrId, pInParam->hEvent);

  02a98	e51b3094	 ldr         r3, [r11, #-0x94]
  02a9c	e2833008	 add         r3, r3, #8
  02aa0	e5933000	 ldr         r3, [r3]
  02aa4	e51b2094	 ldr         r2, [r11, #-0x94]
  02aa8	e2822004	 add         r2, r2, #4
  02aac	e5922000	 ldr         r2, [r2]
  02ab0	e51b1094	 ldr         r1, [r11, #-0x94]
  02ab4	e5911000	 ldr         r1, [r1]
  02ab8	e59b0000	 ldr         r0, [r11]
  02abc	eb000000	 bl          |?TWL_InterruptInitializeProxy@@YAHKIKPAX@Z|
  02ac0	e50b0020	 str         r0, [r11, #-0x20]
  02ac4	e51b3020	 ldr         r3, [r11, #-0x20]
  02ac8	e50b30c8	 str         r3, [r11, #-0xC8]
  02acc		 |$LN7@TWL_IOCont|

; 1941 :                 }
; 1942 :             break;

  02acc	ea000032	 b           |$LN43@TWL_IOCont|
  02ad0		 |$LN6@TWL_IOCont|

; 1943 : 
; 1944 :         case IOCTL_TWL_WAKEENABLE:
; 1945 :             if (pInBuffer != NULL && inSize == sizeof(IOCTL_TWL_WAKEENABLE_IN))

  02ad0	e59b3008	 ldr         r3, [r11, #8]
  02ad4	e3530000	 cmp         r3, #0
  02ad8	0a00000e	 beq         |$LN5@TWL_IOCont|
  02adc	e59b300c	 ldr         r3, [r11, #0xC]
  02ae0	e3530008	 cmp         r3, #8
  02ae4	1a00000b	 bne         |$LN5@TWL_IOCont|

; 1946 :                 {
; 1947 :                 IOCTL_TWL_WAKEENABLE_IN *pInParam = (IOCTL_TWL_WAKEENABLE_IN*)pInBuffer;

  02ae8	e59b3008	 ldr         r3, [r11, #8]
  02aec	e50b3090	 str         r3, [r11, #-0x90]

; 1948 :                 rc = TWL_EnableWakeup(context, pInParam->intrId, pInParam->bEnable);

  02af0	e51b3090	 ldr         r3, [r11, #-0x90]
  02af4	e2833004	 add         r3, r3, #4
  02af8	e5932000	 ldr         r2, [r3]
  02afc	e51b3090	 ldr         r3, [r11, #-0x90]
  02b00	e5931000	 ldr         r1, [r3]
  02b04	e59b0000	 ldr         r0, [r11]
  02b08	eb000000	 bl          |?TWL_EnableWakeup@@YAHKKH@Z|
  02b0c	e50b001c	 str         r0, [r11, #-0x1C]
  02b10	e51b301c	 ldr         r3, [r11, #-0x1C]
  02b14	e50b30c8	 str         r3, [r11, #-0xC8]
  02b18		 |$LN5@TWL_IOCont|

; 1949 :                 }
; 1950 :             break;

  02b18	ea00001f	 b           |$LN43@TWL_IOCont|
  02b1c		 |$LN4@TWL_IOCont|

; 1951 : 
; 1952 :         case IOCTL_TWL_INTRMASK:
; 1953 :             if (pInBuffer != NULL && inSize == sizeof(IOCTL_TWL_INTRMASK_IN))

  02b1c	e59b3008	 ldr         r3, [r11, #8]
  02b20	e3530000	 cmp         r3, #0
  02b24	0a00000e	 beq         |$LN3@TWL_IOCont|
  02b28	e59b300c	 ldr         r3, [r11, #0xC]
  02b2c	e353000c	 cmp         r3, #0xC
  02b30	1a00000b	 bne         |$LN3@TWL_IOCont|

; 1954 :                 {
; 1955 :                 IOCTL_TWL_INTRMASK_IN *pInParam = (IOCTL_TWL_INTRMASK_IN*)pInBuffer;

  02b34	e59b3008	 ldr         r3, [r11, #8]
  02b38	e50b308c	 str         r3, [r11, #-0x8C]

; 1956 :                 rc = TWL_InterruptMask(context, pInParam->procId, pInParam->bEnable);

  02b3c	e51b308c	 ldr         r3, [r11, #-0x8C]
  02b40	e2833008	 add         r3, r3, #8
  02b44	e5932000	 ldr         r2, [r3]
  02b48	e51b308c	 ldr         r3, [r11, #-0x8C]
  02b4c	e5931000	 ldr         r1, [r3]
  02b50	e59b0000	 ldr         r0, [r11]
  02b54	eb000000	 bl          |?TWL_InterruptMask@@YAHKKH@Z|
  02b58	e50b0018	 str         r0, [r11, #-0x18]
  02b5c	e51b3018	 ldr         r3, [r11, #-0x18]
  02b60	e50b30c8	 str         r3, [r11, #-0xC8]
  02b64		 |$LN3@TWL_IOCont|

; 1957 :                 }
; 1958 :             break;

  02b64	ea00000c	 b           |$LN43@TWL_IOCont|
  02b68		 |$LN2@TWL_IOCont|

; 1959 : 
; 1960 :         case IOCTL_TWL_INTRDISABLE:
; 1961 :             if (pInBuffer != NULL && inSize == sizeof(DWORD))

  02b68	e59b3008	 ldr         r3, [r11, #8]
  02b6c	e3530000	 cmp         r3, #0
  02b70	0a000009	 beq         |$LN1@TWL_IOCont|
  02b74	e59b300c	 ldr         r3, [r11, #0xC]
  02b78	e3530004	 cmp         r3, #4
  02b7c	1a000006	 bne         |$LN1@TWL_IOCont|

; 1962 :                 {
; 1963 :                 rc = TWL_InterruptDisable(context, *(DWORD*)pInBuffer);

  02b80	e59b3008	 ldr         r3, [r11, #8]
  02b84	e5931000	 ldr         r1, [r3]
  02b88	e59b0000	 ldr         r0, [r11]
  02b8c	eb000000	 bl          |?TWL_InterruptDisable@@YAHKK@Z|
  02b90	e50b0014	 str         r0, [r11, #-0x14]
  02b94	e51b3014	 ldr         r3, [r11, #-0x14]
  02b98	e50b30c8	 str         r3, [r11, #-0xC8]
  02b9c		 |$LN1@TWL_IOCont|
  02b9c		 |$LN43@TWL_IOCont|
  02b9c		 |$cleanUp$36945|

; 1964 :                 }
; 1965 :             break;
; 1966 :         }
; 1967 : 
; 1968 : cleanUp:
; 1969 :     DEBUGMSG(ZONE_FUNCTION, (L"-TWL_IOControl(rc = %d)\r\n", rc));

  02b9c	e59f3080	 ldr         r3, [pc, #0x80]
  02ba0	e5933440	 ldr         r3, [r3, #0x440]
  02ba4	e3130004	 tst         r3, #4
  02ba8	0a000005	 beq         |$LN80@TWL_IOCont|
  02bac	e51b10c8	 ldr         r1, [r11, #-0xC8]
  02bb0	e59f0068	 ldr         r0, [pc, #0x68]
  02bb4	eb000000	 bl          NKDbgPrintfW
  02bb8	e3a03001	 mov         r3, #1
  02bbc	e50b3010	 str         r3, [r11, #-0x10]
  02bc0	ea000001	 b           |$LN81@TWL_IOCont|
  02bc4		 |$LN80@TWL_IOCont|
  02bc4	e3a03000	 mov         r3, #0
  02bc8	e50b3010	 str         r3, [r11, #-0x10]
  02bcc		 |$LN81@TWL_IOCont|

; 1970 :     return rc;

  02bcc	e51b30c8	 ldr         r3, [r11, #-0xC8]
  02bd0	e50b3078	 str         r3, [r11, #-0x78]
  02bd4		 |$LN82@TWL_IOCont|

; 1971 : }

  02bd4	e51b0078	 ldr         r0, [r11, #-0x78]
  02bd8	e24bd00c	 sub         sp, r11, #0xC
  02bdc	e89d6800	 ldmia       sp, {r11, sp, lr}
  02be0	e12fff1e	 bx          lr

			 ENDP  ; |?TWL_IOControl@@YAHKKPAEK0KPAK@Z|, TWL_IOControl

  02be4		 |$LN97@TWL_IOCont|
  02be4		 |$LN108@TWL_IOCont|

; 1929 :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  02be4	e52de004	 str         lr, [sp, #-4]!
  02be8	e24dd010	 sub         sp, sp, #0x10
  02bec		 |$LN100@TWL_IOCont|
  02bec		 |$LN120@TWL_IOCont|
  02bec	e3a00001	 mov         r0, #1
  02bf0		 |$LN99@TWL_IOCont|
  02bf0	e28dd010	 add         sp, sp, #0x10
  02bf4	e49df004	 ldr         pc, [sp], #4
  02bf8		 |$LN121@TWL_IOCont|
  02bf8		 |$LN90@TWL_IOCont|
  02bf8		 |$LN110@TWL_IOCont|

; 1906 :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  02bf8	e52de004	 str         lr, [sp, #-4]!
  02bfc	e24dd010	 sub         sp, sp, #0x10
  02c00		 |$LN93@TWL_IOCont|
  02c00		 |$LN122@TWL_IOCont|
  02c00	e3a00001	 mov         r0, #1
  02c04		 |$LN92@TWL_IOCont|
  02c04	e28dd010	 add         sp, sp, #0x10
  02c08	e49df004	 ldr         pc, [sp], #4
  02c0c		 |$LN123@TWL_IOCont|
  02c0c		 |$LN83@TWL_IOCont|
  02c0c		 |$LN111@TWL_IOCont|

; 1854 :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  02c0c	e52de004	 str         lr, [sp, #-4]!
  02c10	e24dd010	 sub         sp, sp, #0x10
  02c14		 |$LN86@TWL_IOCont|
  02c14		 |$LN124@TWL_IOCont|
  02c14	e3a00001	 mov         r0, #1
  02c18		 |$LN85@TWL_IOCont|
  02c18	e28dd010	 add         sp, sp, #0x10
  02c1c	e49df004	 ldr         pc, [sp], #4
  02c20		 |$LN126@TWL_IOCont|
  02c20		 |$LN127@TWL_IOCont|
  02c20	00000000	 DCD         |??_C@_1DE@FNPJKBFA@?$AA?9?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02c24		 |$LN128@TWL_IOCont|
  02c24	00000000	 DCD         |dpCurSettings|
  02c28		 |$LN129@TWL_IOCont|
  02c28	00000000	 DCD         |??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  02c2c		 |$LN130@TWL_IOCont|
  02c2c	00000000	 DCD         |??_C@_1DO@MKPBECMG@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  02c30		 |$LN131@TWL_IOCont|
  02c30	00000000	 DCD         |??_C@_1EA@GEHCJFKO@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  02c34		 |$LN132@TWL_IOCont|
  02c34	00000000	 DCD         |??_C@_1DO@NHHJGHGC@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  02c38		 |$LN133@TWL_IOCont|
  02c38	00000000	 DCD         |??_C@_1EA@GLGMEDCN@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  02c3c		 |$LN134@TWL_IOCont|
  02c3c	00000000	 DCD         |??_C@_1EE@FJGLKMH@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN@|
  02c40		 |$LN135@TWL_IOCont|
  02c40	00000000	 DCD         |??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  02c44		 |$LN136@TWL_IOCont|
  02c44	00000000	 DCD         |??_C@_1FC@GLKMEJPC@?$AAT?$AAW?$AAL?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI@|
  02c48		 |$LN137@TWL_IOCont|
  02c48	00000000	 DCD         |?TWL_EnableWakeup@@YAHKKH@Z|
  02c4c		 |$LN138@TWL_IOCont|
  02c4c	00000000	 DCD         |?TWL_InterruptDisable@@YAHKK@Z|
  02c50		 |$LN139@TWL_IOCont|
  02c50	00000000	 DCD         |?TWL_InterruptMask@@YAHKKH@Z|
  02c54		 |$LN140@TWL_IOCont|
  02c54	00000000	 DCD         |?TWL_InterruptInitialize@@YAHKKPAX@Z|
  02c58		 |$LN141@TWL_IOCont|
  02c58	00000000	 DCD         |?TWL_WriteRegs@@YAHKKPBXK@Z|
  02c5c		 |$LN142@TWL_IOCont|
  02c5c	00000000	 DCD         |?TWL_ReadRegs@@YAHKKPAXK@Z|
  02c60		 |$LN143@TWL_IOCont|
  02c60	00000000	 DCD         |DEVICE_IFC_TWL_GUID|
  02c64		 |$LN144@TWL_IOCont|
  02c64	00000000	 DCD         |??_C@_1OG@GOFHADCJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@|
  02c68		 |$LN145@TWL_IOCont|
  02c68	0032100c	 DCD         0x32100c
  02c6c		 |$LN146@TWL_IOCont|
  02c6c	00321008	 DCD         0x321008
  02c70		 |$LN147@TWL_IOCont|
  02c70	00220c18	 DCD         0x220c18
  02c74		 |$LN148@TWL_IOCont|
  02c74	00321004	 DCD         0x321004
  02c78		 |$LN149@TWL_IOCont|
  02c78	00220c0c	 DCD         0x220c0c
  02c7c		 |$LN150@TWL_IOCont|
  02c7c	00220c04	 DCD         0x220c04
  02c80		 |$LN151@TWL_IOCont|
  02c80	00220c14	 DCD         0x220c14
  02c84		 |$LN152@TWL_IOCont|
  02c84	00000000	 DCD         |??_C@_1GE@KIBCNFIC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  02c88		 |$LN153@TWL_IOCont|
  02c88	74776c44	 DCD         0x74776c44
  02c8c		 |$LN154@TWL_IOCont|
  02c8c	74776c49	 DCD         0x74776c49
  02c90		 |$LN155@TWL_IOCont|
  02c90	00000000	 DCD         |??_C@_1IC@CDCPDGAH@?$AA?$CL?$AAT?$AAW?$AAL?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  02c94		 |$LN125@TWL_IOCont|
  02c94		 |$LN112@TWL_IOCont|
	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T37601| DCD	|$LN5@GetCurrent|
	DCD	0x40000b02
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M37598|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00008	e3a0000c	 mov         r0, #0xC
  0000c	eb000000	 bl          __GetUserKData
  00010	e58d0004	 str         r0, [sp, #4]
  00014	e59d3004	 ldr         r3, [sp, #4]
  00018	e58d3000	 str         r3, [sp]

; 375  : }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd008	 add         sp, sp, #8
  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M37599|

			 ENDP  ; |GetCurrentProcessId|

	IMPORT	|memcmp|
; File c:\wince600\public\common\sdk\inc\objbase.h

  00000			 AREA	 |.pdata|, PDATA
|$T37611| DCD	|$LN7@IsEqualGUI|
	DCD	0x40001704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsEqualGUID@@YAHABU_GUID@@0@Z| PROC	; IsEqualGUID

; 493  : {

  00000		 |$LN7@IsEqualGUI|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M37608|

; 494  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

  00010	e3a02010	 mov         r2, #0x10
  00014	e59d1018	 ldr         r1, [sp, #0x18]
  00018	e59d0014	 ldr         r0, [sp, #0x14]
  0001c	eb000000	 bl          memcmp
  00020	e58d0004	 str         r0, [sp, #4]
  00024	e59d3004	 ldr         r3, [sp, #4]
  00028	e3530000	 cmp         r3, #0
  0002c	1a000002	 bne         |$LN3@IsEqualGUI|
  00030	e3a03001	 mov         r3, #1
  00034	e58d3008	 str         r3, [sp, #8]
  00038	ea000001	 b           |$LN4@IsEqualGUI|
  0003c		 |$LN3@IsEqualGUI|
  0003c	e3a03000	 mov         r3, #0
  00040	e58d3008	 str         r3, [sp, #8]
  00044		 |$LN4@IsEqualGUI|
  00044	e59d3008	 ldr         r3, [sp, #8]
  00048	e58d3000	 str         r3, [sp]

; 495  : }

  0004c	e59d0000	 ldr         r0, [sp]
  00050	e28dd00c	 add         sp, sp, #0xC
  00054	e89d6000	 ldmia       sp, {sp, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M37609|

			 ENDP  ; |?IsEqualGUID@@YAHABU_GUID@@0@Z|, IsEqualGUID

	EXPORT	|??_C@_1GC@JNKEAOHF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@LIOOGALJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr@| [ DATA ] ; `string'

  000e0			 AREA	 |.pdata|, PDATA
|$T37625| DCD	|$LN24@TWL_Interr@2|
	DCD	0x4000ac04
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\driver\tps659xx.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@JNKEAOHF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "S", 0x0, "I", 0x0, "H"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "x"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@LIOOGALJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r"
	DCB	0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "I", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02c94			 AREA	 |.text|, CODE, ARM

  02c94		 |?TWL_InterruptMask@@YAHKKH@Z| PROC	; TWL_InterruptMask

; 1344 : {

  02c94		 |$LN24@TWL_Interr@2|
  02c94	e1a0c00d	 mov         r12, sp
  02c98	e92d0007	 stmdb       sp!, {r0 - r2}
  02c9c	e92d5000	 stmdb       sp!, {r12, lr}
  02ca0	e24dd038	 sub         sp, sp, #0x38
  02ca4		 |$M37622|

; 1345 :     BOOL rc = FALSE;

  02ca4	e3a03000	 mov         r3, #0
  02ca8	e58d3010	 str         r3, [sp, #0x10]

; 1346 :     BOOL bLocked = FALSE;    

  02cac	e3a03000	 mov         r3, #0
  02cb0	e58d3014	 str         r3, [sp, #0x14]

; 1347 :     Device_t *pDevice = ((Instance_t*)context)->pDevice;

  02cb4	e59d3040	 ldr         r3, [sp, #0x40]
  02cb8	e2833008	 add         r3, r3, #8
  02cbc	e5933000	 ldr         r3, [r3]
  02cc0	e58d3008	 str         r3, [sp, #8]

; 1348 :     UINT8 mask;
; 1349 :     SIHEntry_t const *pSIHEntry;
; 1350 :     StatusRegister_t const *pStatusRegister;
; 1351 :     int nArrayIndex;
; 1352 : /*
; 1353 :     // Check if we get correct context
; 1354 :     if ((pDevice == NULL) || (pDevice->cookie != TWL_DEVICE_COOKIE))
; 1355 :         {
; 1356 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_IntrEnable: "
; 1357 :             L"Incorrect context parameter\r\n"
; 1358 :             ));
; 1359 :         goto cleanUp;
; 1360 :         }
; 1361 : */
; 1362 :     if (TWL_ARRAYINDEX(intrId) >= TWL_MAX_INTR)

  02cc4	e59d2044	 ldr         r2, [sp, #0x44]
  02cc8	e3a03c0f	 mov         r3, #0xF, 24
  02ccc	e38330ff	 orr         r3, r3, #0xFF
  02cd0	e0023003	 and         r3, r2, r3
  02cd4	e3530056	 cmp         r3, #0x56
  02cd8	3a00000d	 bcc         |$LN13@TWL_Interr@2|

; 1363 :         {
; 1364 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_InterruptMask: "
; 1365 :             L"Incorrect interrupt Id %d\r\n", intrId
; 1366 :             ));

  02cdc	e59f3258	 ldr         r3, [pc, #0x258]
  02ce0	e5933440	 ldr         r3, [r3, #0x440]
  02ce4	e3130001	 tst         r3, #1
  02ce8	0a000005	 beq         |$LN16@TWL_Interr@2|
  02cec	e59d1044	 ldr         r1, [sp, #0x44]
  02cf0	e59f0248	 ldr         r0, [pc, #0x248]
  02cf4	eb000000	 bl          NKDbgPrintfW
  02cf8	e3a03001	 mov         r3, #1
  02cfc	e58d3024	 str         r3, [sp, #0x24]
  02d00	ea000001	 b           |$LN17@TWL_Interr@2|
  02d04		 |$LN16@TWL_Interr@2|
  02d04	e3a03000	 mov         r3, #0
  02d08	e58d3024	 str         r3, [sp, #0x24]
  02d0c		 |$LN17@TWL_Interr@2|

; 1367 :         goto cleanUp;

  02d0c	ea00007c	 b           |$LN12@TWL_Interr@2|
  02d10	ea00007b	 b           |$cleanUp$36813|
  02d14		 |$LN13@TWL_Interr@2|

; 1368 :         }
; 1369 : 
; 1370 :     // We have take critical section there to avoid concurrent
; 1371 :     // enable register modification
; 1372 :     bLocked = TRUE;

  02d14	e3a03001	 mov         r3, #1
  02d18	e58d3014	 str         r3, [sp, #0x14]

; 1373 :     EnterCriticalSection(&pDevice->cs);

  02d1c	e59d3008	 ldr         r3, [sp, #8]
  02d20	e2830018	 add         r0, r3, #0x18
  02d24	eb000000	 bl          EnterCriticalSection

; 1374 : 
; 1375 :     // get secondary interrupt handler info
; 1376 :     nArrayIndex = TWL_SIHINDEX(intrId);

  02d28	e59d3044	 ldr         r3, [sp, #0x44]
  02d2c	e1a03803	 mov         r3, r3, lsl #16
  02d30	e1a03e23	 mov         r3, r3, lsr #28
  02d34	e58d300c	 str         r3, [sp, #0xC]

; 1377 :     if (nArrayIndex >= MAX_SIH_COUNT)

  02d38	e59d300c	 ldr         r3, [sp, #0xC]
  02d3c	e3530006	 cmp         r3, #6
  02d40	ba00000d	 blt         |$LN11@TWL_Interr@2|

; 1378 :         {
; 1379 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_InterruptMask: "
; 1380 :             L"Invalid SIH index %d\r\n", nArrayIndex
; 1381 :             ));

  02d44	e59f31f0	 ldr         r3, [pc, #0x1F0]
  02d48	e5933440	 ldr         r3, [r3, #0x440]
  02d4c	e3130001	 tst         r3, #1
  02d50	0a000005	 beq         |$LN18@TWL_Interr@2|
  02d54	e59d100c	 ldr         r1, [sp, #0xC]
  02d58	e59f01d8	 ldr         r0, [pc, #0x1D8]
  02d5c	eb000000	 bl          NKDbgPrintfW
  02d60	e3a03001	 mov         r3, #1
  02d64	e58d3028	 str         r3, [sp, #0x28]
  02d68	ea000001	 b           |$LN19@TWL_Interr@2|
  02d6c		 |$LN18@TWL_Interr@2|
  02d6c	e3a03000	 mov         r3, #0
  02d70	e58d3028	 str         r3, [sp, #0x28]
  02d74		 |$LN19@TWL_Interr@2|

; 1382 :         goto cleanUp;

  02d74	ea000062	 b           |$LN10@TWL_Interr@2|
  02d78	ea000061	 b           |$cleanUp$36813|
  02d7c		 |$LN11@TWL_Interr@2|

; 1383 :         }
; 1384 :     
; 1385 :     pSIHEntry = s_pSIHEntries[nArrayIndex];

  02d7c	e59d100c	 ldr         r1, [sp, #0xC]
  02d80	e3a03004	 mov         r3, #4
  02d84	e0020391	 mul         r2, r1, r3
  02d88	e59f31a4	 ldr         r3, [pc, #0x1A4]
  02d8c	e0833002	 add         r3, r3, r2
  02d90	e5933000	 ldr         r3, [r3]
  02d94	e58d3004	 str         r3, [sp, #4]

; 1386 : 
; 1387 :     // get mask register value
; 1388 :     pStatusRegister = pSIHEntry->StatusRegisters + TWL_REGISTERINDEX(intrId);

  02d98	e59d3004	 ldr         r3, [sp, #4]
  02d9c	e2831004	 add         r1, r3, #4
  02da0	e59d3044	 ldr         r3, [sp, #0x44]
  02da4	e1a03403	 mov         r3, r3, lsl #8
  02da8	e1a02c23	 mov         r2, r3, lsr #24
  02dac	e3a03010	 mov         r3, #0x10
  02db0	e0030392	 mul         r3, r2, r3
  02db4	e0813003	 add         r3, r1, r3
  02db8	e58d3000	 str         r3, [sp]

; 1389 :    
; 1390 :     int delta = 0;

  02dbc	e3a03000	 mov         r3, #0
  02dc0	e58d301c	 str         r3, [sp, #0x1C]

; 1391 :     // Enable interrupt
; 1392 :     // USB register is an enable register
; 1393 :     if (SIHEntry_USB == TWL_SIHINDEX(intrId))

  02dc4	e59d3044	 ldr         r3, [sp, #0x44]
  02dc8	e1a03803	 mov         r3, r3, lsl #16
  02dcc	e1a03e23	 mov         r3, r3, lsr #28
  02dd0	e3530004	 cmp         r3, #4
  02dd4	1a000011	 bne         |$LN9@TWL_Interr@2|

; 1394 :     {
; 1395 :         mask = (UINT8) ((1 << TWL_MASKBIT(intrId)));

  02dd8	e59d3044	 ldr         r3, [sp, #0x44]
  02ddc	e1a03203	 mov         r3, r3, lsl #4
  02de0	e1a02e23	 mov         r2, r3, lsr #28
  02de4	e3a03001	 mov         r3, #1
  02de8	e1a03213	 mov         r3, r3, lsl r2
  02dec	e20330ff	 and         r3, r3, #0xFF
  02df0	e5cd3018	 strb        r3, [sp, #0x18]

; 1396 :         // Move to the Set address;
; 1397 :         delta = (bEnable == TRUE) ? 2 : 1;

  02df4	e59d3048	 ldr         r3, [sp, #0x48]
  02df8	e3530001	 cmp         r3, #1
  02dfc	1a000002	 bne         |$LN20@TWL_Interr@2|
  02e00	e3a03002	 mov         r3, #2
  02e04	e58d302c	 str         r3, [sp, #0x2C]
  02e08	ea000001	 b           |$LN21@TWL_Interr@2|
  02e0c		 |$LN20@TWL_Interr@2|
  02e0c	e3a03001	 mov         r3, #1
  02e10	e58d302c	 str         r3, [sp, #0x2C]
  02e14		 |$LN21@TWL_Interr@2|
  02e14	e59d302c	 ldr         r3, [sp, #0x2C]
  02e18	e58d301c	 str         r3, [sp, #0x1C]

; 1398 :     }
; 1399 :     else

  02e1c	ea000027	 b           |$LN8@TWL_Interr@2|
  02e20		 |$LN9@TWL_Interr@2|

; 1400 :     {
; 1401 :         // Get actual mask
; 1402 :         if (!ReadRegs(pDevice, pStatusRegister->maskSubaddress, 
; 1403 :             &mask, sizeof(mask)))

  02e20	e3a03001	 mov         r3, #1
  02e24	e28d2018	 add         r2, sp, #0x18
  02e28	e59d1000	 ldr         r1, [sp]
  02e2c	e2811004	 add         r1, r1, #4
  02e30	e5911000	 ldr         r1, [r1]
  02e34	e59d0008	 ldr         r0, [sp, #8]
  02e38	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|
  02e3c	e58d0030	 str         r0, [sp, #0x30]
  02e40	e59d3030	 ldr         r3, [sp, #0x30]
  02e44	e3530000	 cmp         r3, #0
  02e48	1a000001	 bne         |$LN7@TWL_Interr@2|
  02e4c	ea00002c	 b           |$LN6@TWL_Interr@2|

; 1404 :             {
; 1405 :             goto cleanUp;

  02e50	ea00002b	 b           |$cleanUp$36813|
  02e54		 |$LN7@TWL_Interr@2|

; 1406 :             }
; 1407 :         if (bEnable == TRUE)

  02e54	e59d3048	 ldr         r3, [sp, #0x48]
  02e58	e3530001	 cmp         r3, #1
  02e5c	1a000009	 bne         |$LN5@TWL_Interr@2|

; 1408 :             {
; 1409 :             mask |= (1 << TWL_MASKBIT(intrId));

  02e60	e59d3044	 ldr         r3, [sp, #0x44]
  02e64	e1a03203	 mov         r3, r3, lsl #4
  02e68	e1a02e23	 mov         r2, r3, lsr #28
  02e6c	e3a03001	 mov         r3, #1
  02e70	e1a02213	 mov         r2, r3, lsl r2
  02e74	e5dd3018	 ldrb        r3, [sp, #0x18]
  02e78	e1833002	 orr         r3, r3, r2
  02e7c	e20330ff	 and         r3, r3, #0xFF
  02e80	e5cd3018	 strb        r3, [sp, #0x18]

; 1410 :             }
; 1411 :         else

  02e84	ea000009	 b           |$LN4@TWL_Interr@2|
  02e88		 |$LN5@TWL_Interr@2|

; 1412 :             {
; 1413 :             mask &= ~(1 << TWL_MASKBIT(intrId));

  02e88	e59d3044	 ldr         r3, [sp, #0x44]
  02e8c	e1a03203	 mov         r3, r3, lsl #4
  02e90	e1a02e23	 mov         r2, r3, lsr #28
  02e94	e3a03001	 mov         r3, #1
  02e98	e1a03213	 mov         r3, r3, lsl r2
  02e9c	e1e02003	 mvn         r2, r3
  02ea0	e5dd3018	 ldrb        r3, [sp, #0x18]
  02ea4	e0033002	 and         r3, r3, r2
  02ea8	e20330ff	 and         r3, r3, #0xFF
  02eac	e5cd3018	 strb        r3, [sp, #0x18]
  02eb0		 |$LN4@TWL_Interr@2|

; 1414 :             }
; 1415 :         ((StatusRegister_t*)pStatusRegister)->ffEnable = mask;

  02eb0	e59d3000	 ldr         r3, [sp]
  02eb4	e2832008	 add         r2, r3, #8
  02eb8	e5dd3018	 ldrb        r3, [sp, #0x18]
  02ebc	e5c23000	 strb        r3, [r2]
  02ec0		 |$LN8@TWL_Interr@2|

; 1416 :     }
; 1417 :     
; 1418 :     // Write it back
; 1419 :     if (!WriteRegs(pDevice, pStatusRegister->maskSubaddress + delta, 
; 1420 :         &mask, sizeof(mask)))

  02ec0	e3a03001	 mov         r3, #1
  02ec4	e28d2018	 add         r2, sp, #0x18
  02ec8	e59d1000	 ldr         r1, [sp]
  02ecc	e2811004	 add         r1, r1, #4
  02ed0	e5910000	 ldr         r0, [r1]
  02ed4	e59d101c	 ldr         r1, [sp, #0x1C]
  02ed8	e0801001	 add         r1, r0, r1
  02edc	e59d0008	 ldr         r0, [sp, #8]
  02ee0	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|
  02ee4	e58d0034	 str         r0, [sp, #0x34]
  02ee8	e59d3034	 ldr         r3, [sp, #0x34]
  02eec	e3530000	 cmp         r3, #0
  02ef0	1a000001	 bne         |$LN3@TWL_Interr@2|
  02ef4	ea000002	 b           |$LN2@TWL_Interr@2|

; 1421 :         {        
; 1422 :         goto cleanUp;

  02ef8	ea000001	 b           |$cleanUp$36813|
  02efc		 |$LN3@TWL_Interr@2|

; 1423 :         }
; 1424 :     
; 1425 :     rc = TRUE;

  02efc	e3a03001	 mov         r3, #1
  02f00	e58d3010	 str         r3, [sp, #0x10]
  02f04		 |$LN2@TWL_Interr@2|
  02f04		 |$LN6@TWL_Interr@2|
  02f04		 |$LN10@TWL_Interr@2|
  02f04		 |$LN12@TWL_Interr@2|
  02f04		 |$cleanUp$36813|

; 1426 :     
; 1427 : cleanUp:
; 1428 :     if (bLocked == TRUE) LeaveCriticalSection(&pDevice->cs);

  02f04	e59d3014	 ldr         r3, [sp, #0x14]
  02f08	e3530001	 cmp         r3, #1
  02f0c	1a000002	 bne         |$LN1@TWL_Interr@2|
  02f10	e59d3008	 ldr         r3, [sp, #8]
  02f14	e2830018	 add         r0, r3, #0x18
  02f18	eb000000	 bl          LeaveCriticalSection
  02f1c		 |$LN1@TWL_Interr@2|

; 1429 :     return rc;

  02f1c	e59d3010	 ldr         r3, [sp, #0x10]
  02f20	e58d3020	 str         r3, [sp, #0x20]

; 1430 : }

  02f24	e59d0020	 ldr         r0, [sp, #0x20]
  02f28	e28dd038	 add         sp, sp, #0x38
  02f2c	e89d6000	 ldmia       sp, {sp, lr}
  02f30	e12fff1e	 bx          lr
  02f34		 |$LN25@TWL_Interr@2|
  02f34		 |$LN26@TWL_Interr@2|
  02f34	00000000	 DCD         |s_pSIHEntries|
  02f38		 |$LN27@TWL_Interr@2|
  02f38	00000000	 DCD         |??_C@_1GC@JNKEAOHF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@|
  02f3c		 |$LN28@TWL_Interr@2|
  02f3c	00000000	 DCD         |dpCurSettings|
  02f40		 |$LN29@TWL_Interr@2|
  02f40	00000000	 DCD         |??_C@_1GM@LIOOGALJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAM?$AAa?$AAs?$AAk?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr@|
  02f44		 |$M37623|

			 ENDP  ; |?TWL_InterruptMask@@YAHKKH@Z|, TWL_InterruptMask


  000e8			 AREA	 |.pdata|, PDATA
|$T37636| DCD	|$LN6@TWL_Interr@3|
	DCD	0x40001604
; Function compile flags: /Odtp

  02f44			 AREA	 |.text|, CODE, ARM

  02f44		 |?TWL_InterruptInitialize@@YAHKKPAX@Z| PROC ; TWL_InterruptInitialize

; 1525 : {

  02f44		 |$LN6@TWL_Interr@3|
  02f44	e1a0c00d	 mov         r12, sp
  02f48	e92d0007	 stmdb       sp!, {r0 - r2}
  02f4c	e92d5000	 stmdb       sp!, {r12, lr}
  02f50	e24dd00c	 sub         sp, sp, #0xC
  02f54		 |$M37633|

; 1526 :     BOOL rc = FALSE;

  02f54	e3a03000	 mov         r3, #0
  02f58	e58d3000	 str         r3, [sp]

; 1527 :     
; 1528 :     if (hEvent != NULL)

  02f5c	e59d301c	 ldr         r3, [sp, #0x1C]
  02f60	e3530000	 cmp         r3, #0
  02f64	0a000006	 beq         |$LN1@TWL_Interr@3|

; 1529 :         {
; 1530 :         rc = TWL_InterruptSetEvent(context, intrId, hEvent);

  02f68	e59d201c	 ldr         r2, [sp, #0x1C]
  02f6c	e59d1018	 ldr         r1, [sp, #0x18]
  02f70	e59d0014	 ldr         r0, [sp, #0x14]
  02f74	eb000000	 bl          |?TWL_InterruptSetEvent@@YAHKKPAX@Z|
  02f78	e58d0008	 str         r0, [sp, #8]
  02f7c	e59d3008	 ldr         r3, [sp, #8]
  02f80	e58d3000	 str         r3, [sp]
  02f84		 |$LN1@TWL_Interr@3|

; 1531 :         }
; 1532 : 
; 1533 :     return rc;

  02f84	e59d3000	 ldr         r3, [sp]
  02f88	e58d3004	 str         r3, [sp, #4]

; 1534 : }

  02f8c	e59d0004	 ldr         r0, [sp, #4]
  02f90	e28dd00c	 add         sp, sp, #0xC
  02f94	e89d6000	 ldmia       sp, {sp, lr}
  02f98	e12fff1e	 bx          lr
  02f9c		 |$M37634|

			 ENDP  ; |?TWL_InterruptInitialize@@YAHKKPAX@Z|, TWL_InterruptInitialize

	EXPORT	|??_C@_1KA@ONEMGNNK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@OIDEFEGA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAE?$AAv@| [ DATA ] ; `string'
	EXPORT	|GetCurrentProcess|
	EXPORT	|??_C@_1JM@ICAMEBJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@OIAJOOGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@| [ DATA ] ; `string'
	IMPORT	|DuplicateHandle|

  000f0			 AREA	 |.pdata|, PDATA
|$T37653| DCD	|$LN24@TWL_Interr@4|
	DCD	0x4000b104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@ONEMGNNK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "I", 0x0, "d", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, "n", 0x0, "'", 0x0, "t"
	DCB	0x0, " ", 0x0, "a", 0x0, "s", 0x0, "s", 0x0, "o", 0x0, "c"
	DCB	0x0, "i", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "e"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@OIDEFEGA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAE?$AAv@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "d", 0x0, "u", 0x0, "p", 0x0, "l", 0x0, "i"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@ICAMEBJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "I", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " ", 0x0, "a"
	DCB	0x0, "s", 0x0, "s", 0x0, "o", 0x0, "c", 0x0, "i", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "w", 0x0, "i"
	DCB	0x0, "t", 0x0, "h", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@OIAJOOGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "E", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "I", 0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  02f9c			 AREA	 |.text|, CODE, ARM

  02f9c		 |?TWL_InterruptSetEvent@@YAHKKPAX@Z| PROC ; TWL_InterruptSetEvent

; 1442 : {

  02f9c		 |$LN24@TWL_Interr@4|
  02f9c	e1a0c00d	 mov         r12, sp
  02fa0	e92d0007	 stmdb       sp!, {r0 - r2}
  02fa4	e92d5000	 stmdb       sp!, {r12, lr}
  02fa8	e24dd048	 sub         sp, sp, #0x48
  02fac		 |$M37650|

; 1443 :     BOOL rc = FALSE;

  02fac	e3a03000	 mov         r3, #0
  02fb0	e58d3014	 str         r3, [sp, #0x14]

; 1444 :     Device_t *pDevice = ((Instance_t*)context)->pDevice;

  02fb4	e59d3050	 ldr         r3, [sp, #0x50]
  02fb8	e2833008	 add         r3, r3, #8
  02fbc	e5933000	 ldr         r3, [r3]
  02fc0	e58d300c	 str         r3, [sp, #0xC]

; 1445 :     int nArrayIndex;
; 1446 : 
; 1447 :     // We have take critical section there to avoid concurrent
; 1448 :     // enable register modification
; 1449 :     EnterCriticalSection(&pDevice->cs);

  02fc4	e59d300c	 ldr         r3, [sp, #0xC]
  02fc8	e2830018	 add         r0, r3, #0x18
  02fcc	eb000000	 bl          EnterCriticalSection

; 1450 : 
; 1451 : 
; 1452 :     nArrayIndex = TWL_ARRAYINDEX(intrId);

  02fd0	e59d2054	 ldr         r2, [sp, #0x54]
  02fd4	e3a03c0f	 mov         r3, #0xF, 24
  02fd8	e38330ff	 orr         r3, r3, #0xFF
  02fdc	e0023003	 and         r3, r2, r3
  02fe0	e58d3010	 str         r3, [sp, #0x10]

; 1453 : 
; 1454 :     if ((nArrayIndex > TWL_MAX_INTR))

  02fe4	e59d3010	 ldr         r3, [sp, #0x10]
  02fe8	e3530056	 cmp         r3, #0x56
  02fec	da00000d	 ble         |$LN11@TWL_Interr@4|

; 1455 :         {
; 1456 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_InterruptSetEvent: "
; 1457 :             L"Incorrect interrupt Id 0x%08X\r\n", intrId
; 1458 :             ));

  02ff0	e59f324c	 ldr         r3, [pc, #0x24C]
  02ff4	e5933440	 ldr         r3, [r3, #0x440]
  02ff8	e3130001	 tst         r3, #1
  02ffc	0a000005	 beq         |$LN14@TWL_Interr@4|
  03000	e59d1054	 ldr         r1, [sp, #0x54]
  03004	e59f0250	 ldr         r0, [pc, #0x250]
  03008	eb000000	 bl          NKDbgPrintfW
  0300c	e3a03001	 mov         r3, #1
  03010	e58d3028	 str         r3, [sp, #0x28]
  03014	ea000001	 b           |$LN15@TWL_Interr@4|
  03018		 |$LN14@TWL_Interr@4|
  03018	e3a03000	 mov         r3, #0
  0301c	e58d3028	 str         r3, [sp, #0x28]
  03020		 |$LN15@TWL_Interr@4|

; 1459 :         goto cleanUp;

  03020	ea00007d	 b           |$LN10@TWL_Interr@4|
  03024	ea00007c	 b           |$cleanUp$36843|
  03028		 |$LN11@TWL_Interr@4|

; 1460 :         }
; 1461 :     
; 1462 :     // Special caes.  If keypad interrupt clear cached
; 1463 :     // states
; 1464 :     if (intrId == TWL_INTR_ITKPI)

  03028	e59d2054	 ldr         r2, [sp, #0x54]
  0302c	e3a03a01	 mov         r3, #1, 20
  03030	e383302a	 orr         r3, r3, #0x2A
  03034	e1520003	 cmp         r2, r3
  03038	1a000008	 bne         |$LN9@TWL_Interr@4|

; 1465 :     {
; 1466 :         _nKeypadMatrixQueueCount = 0;

  0303c	e59f2214	 ldr         r2, [pc, #0x214]
  03040	e3a03000	 mov         r3, #0
  03044	e5823000	 str         r3, [r2]

; 1467 :         _nKeypadMatrixQueueHead = 0;

  03048	e59f2204	 ldr         r2, [pc, #0x204]
  0304c	e3a03000	 mov         r3, #0
  03050	e5823000	 str         r3, [r2]

; 1468 :         _nKeypadMatrixQueueTail = 0;

  03054	e59f21f4	 ldr         r2, [pc, #0x1F4]
  03058	e3a03000	 mov         r3, #0
  0305c	e5823000	 str         r3, [r2]
  03060		 |$LN9@TWL_Interr@4|

; 1469 :     }
; 1470 : 
; 1471 :     // If handle isn't NULL we set new association, 
; 1472 :     // otherwise we delete it....
; 1473 :     if (hEvent != NULL)

  03060	e59d3058	 ldr         r3, [sp, #0x58]
  03064	e3530000	 cmp         r3, #0
  03068	0a00003d	 beq         |$LN8@TWL_Interr@4|

; 1474 :     {
; 1475 :         if (pDevice->hSetIntrEvent[nArrayIndex] != NULL)

  0306c	e59d300c	 ldr         r3, [sp, #0xC]
  03070	e2831048	 add         r1, r3, #0x48
  03074	e59d2010	 ldr         r2, [sp, #0x10]
  03078	e3a03004	 mov         r3, #4
  0307c	e0030392	 mul         r3, r2, r3
  03080	e0813003	 add         r3, r1, r3
  03084	e5933000	 ldr         r3, [r3]
  03088	e3530000	 cmp         r3, #0
  0308c	0a00000c	 beq         |$LN7@TWL_Interr@4|

; 1476 :             {
; 1477 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_InterruptSetEvent: "
; 1478 :                 L"Interrupt Id %d already associated with event\r\n"
; 1479 :                 ));

  03090	e59f31ac	 ldr         r3, [pc, #0x1AC]
  03094	e5933440	 ldr         r3, [r3, #0x440]
  03098	e3130001	 tst         r3, #1
  0309c	0a000004	 beq         |$LN16@TWL_Interr@4|
  030a0	e59f01a4	 ldr         r0, [pc, #0x1A4]
  030a4	eb000000	 bl          NKDbgPrintfW
  030a8	e3a03001	 mov         r3, #1
  030ac	e58d302c	 str         r3, [sp, #0x2C]
  030b0	ea000001	 b           |$LN17@TWL_Interr@4|
  030b4		 |$LN16@TWL_Interr@4|
  030b4	e3a03000	 mov         r3, #0
  030b8	e58d302c	 str         r3, [sp, #0x2C]
  030bc		 |$LN17@TWL_Interr@4|

; 1480 :             goto cleanUp;

  030bc	ea000056	 b           |$LN6@TWL_Interr@4|
  030c0	ea000055	 b           |$cleanUp$36843|
  030c4		 |$LN7@TWL_Interr@4|

; 1481 :             }
; 1482 :         rc = DuplicateHandle(
; 1483 :             GetCurrentProcess(), hEvent, GetCurrentProcess(),
; 1484 :             &pDevice->hSetIntrEvent[nArrayIndex], 0, FALSE, 
; 1485 :             DUPLICATE_SAME_ACCESS
; 1486 :             );

  030c4	eb000000	 bl          GetCurrentProcess
  030c8	e58d0030	 str         r0, [sp, #0x30]
  030cc	eb000000	 bl          GetCurrentProcess
  030d0	e58d0034	 str         r0, [sp, #0x34]
  030d4	e3a03002	 mov         r3, #2
  030d8	e58d3008	 str         r3, [sp, #8]
  030dc	e3a03000	 mov         r3, #0
  030e0	e58d3004	 str         r3, [sp, #4]
  030e4	e3a03000	 mov         r3, #0
  030e8	e58d3000	 str         r3, [sp]
  030ec	e59d300c	 ldr         r3, [sp, #0xC]
  030f0	e2831048	 add         r1, r3, #0x48
  030f4	e59d2010	 ldr         r2, [sp, #0x10]
  030f8	e3a03004	 mov         r3, #4
  030fc	e0030392	 mul         r3, r2, r3
  03100	e0813003	 add         r3, r1, r3
  03104	e59d2030	 ldr         r2, [sp, #0x30]
  03108	e59d1058	 ldr         r1, [sp, #0x58]
  0310c	e59d0034	 ldr         r0, [sp, #0x34]
  03110	eb000000	 bl          DuplicateHandle
  03114	e58d0038	 str         r0, [sp, #0x38]
  03118	e59d3038	 ldr         r3, [sp, #0x38]
  0311c	e58d3014	 str         r3, [sp, #0x14]

; 1487 :         if (!rc)

  03120	e59d3014	 ldr         r3, [sp, #0x14]
  03124	e3530000	 cmp         r3, #0
  03128	1a00000c	 bne         |$LN5@TWL_Interr@4|

; 1488 :         {        
; 1489 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_InterruptSetEvent: "
; 1490 :                 L"Event handler duplication failed\r\n"
; 1491 :                 ));

  0312c	e59f3110	 ldr         r3, [pc, #0x110]
  03130	e5933440	 ldr         r3, [r3, #0x440]
  03134	e3130001	 tst         r3, #1
  03138	0a000004	 beq         |$LN18@TWL_Interr@4|
  0313c	e59f0104	 ldr         r0, [pc, #0x104]
  03140	eb000000	 bl          NKDbgPrintfW
  03144	e3a03001	 mov         r3, #1
  03148	e58d303c	 str         r3, [sp, #0x3C]
  0314c	ea000001	 b           |$LN19@TWL_Interr@4|
  03150		 |$LN18@TWL_Interr@4|
  03150	e3a03000	 mov         r3, #0
  03154	e58d303c	 str         r3, [sp, #0x3C]
  03158		 |$LN19@TWL_Interr@4|

; 1492 :         goto cleanUp;

  03158	ea00002f	 b           |$LN4@TWL_Interr@4|
  0315c	ea00002e	 b           |$cleanUp$36843|
  03160		 |$LN5@TWL_Interr@4|

; 1493 :         }
; 1494 :         }
; 1495 :     else

  03160	ea00002d	 b           |$LN3@TWL_Interr@4|
  03164		 |$LN8@TWL_Interr@4|

; 1496 :     {
; 1497 :         if (pDevice->hSetIntrEvent[nArrayIndex] == NULL)

  03164	e59d300c	 ldr         r3, [sp, #0xC]
  03168	e2831048	 add         r1, r3, #0x48
  0316c	e59d2010	 ldr         r2, [sp, #0x10]
  03170	e3a03004	 mov         r3, #4
  03174	e0030392	 mul         r3, r2, r3
  03178	e0813003	 add         r3, r1, r3
  0317c	e5933000	 ldr         r3, [r3]
  03180	e3530000	 cmp         r3, #0
  03184	1a00000d	 bne         |$LN2@TWL_Interr@4|

; 1498 :             {
; 1499 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: TWL_InterruptSetEvent: "
; 1500 :                 L"Interrupt Id 0x%08X isn't associated with event\r\n",
; 1501 :                 intrId
; 1502 :                 ));

  03188	e59f30b4	 ldr         r3, [pc, #0xB4]
  0318c	e5933440	 ldr         r3, [r3, #0x440]
  03190	e3130001	 tst         r3, #1
  03194	0a000005	 beq         |$LN20@TWL_Interr@4|
  03198	e59d1054	 ldr         r1, [sp, #0x54]
  0319c	e59f009c	 ldr         r0, [pc, #0x9C]
  031a0	eb000000	 bl          NKDbgPrintfW
  031a4	e3a03001	 mov         r3, #1
  031a8	e58d3040	 str         r3, [sp, #0x40]
  031ac	ea000001	 b           |$LN21@TWL_Interr@4|
  031b0		 |$LN20@TWL_Interr@4|
  031b0	e3a03000	 mov         r3, #0
  031b4	e58d3040	 str         r3, [sp, #0x40]
  031b8		 |$LN21@TWL_Interr@4|

; 1503 :             goto cleanUp;

  031b8	ea000017	 b           |$LN1@TWL_Interr@4|
  031bc	ea000016	 b           |$cleanUp$36843|
  031c0		 |$LN2@TWL_Interr@4|

; 1504 :             }
; 1505 :         rc = CloseHandle(pDevice->hSetIntrEvent[nArrayIndex]);

  031c0	e59d300c	 ldr         r3, [sp, #0xC]
  031c4	e2831048	 add         r1, r3, #0x48
  031c8	e59d2010	 ldr         r2, [sp, #0x10]
  031cc	e3a03004	 mov         r3, #4
  031d0	e0030392	 mul         r3, r2, r3
  031d4	e0813003	 add         r3, r1, r3
  031d8	e5930000	 ldr         r0, [r3]
  031dc	eb000000	 bl          CloseHandle
  031e0	e58d0044	 str         r0, [sp, #0x44]
  031e4	e59d3044	 ldr         r3, [sp, #0x44]
  031e8	e58d3014	 str         r3, [sp, #0x14]

; 1506 :         pDevice->hSetIntrEvent[nArrayIndex] = NULL;

  031ec	e59d300c	 ldr         r3, [sp, #0xC]
  031f0	e2831048	 add         r1, r3, #0x48
  031f4	e59d2010	 ldr         r2, [sp, #0x10]
  031f8	e3a03004	 mov         r3, #4
  031fc	e0030392	 mul         r3, r2, r3
  03200	e0812003	 add         r2, r1, r3
  03204	e3a03000	 mov         r3, #0
  03208	e5823000	 str         r3, [r2]

; 1507 :         TWL_InterruptMask(context, intrId, TRUE);

  0320c	e3a02001	 mov         r2, #1
  03210	e59d1054	 ldr         r1, [sp, #0x54]
  03214	e59d0050	 ldr         r0, [sp, #0x50]
  03218	eb000000	 bl          |?TWL_InterruptMask@@YAHKKH@Z|
  0321c		 |$LN3@TWL_Interr@4|
  0321c		 |$LN1@TWL_Interr@4|
  0321c		 |$LN4@TWL_Interr@4|
  0321c		 |$LN6@TWL_Interr@4|
  0321c		 |$LN10@TWL_Interr@4|
  0321c		 |$cleanUp$36843|

; 1508 :     }
; 1509 :     
; 1510 : cleanUp:
; 1511 :     LeaveCriticalSection(&pDevice->cs);

  0321c	e59d300c	 ldr         r3, [sp, #0xC]
  03220	e2830018	 add         r0, r3, #0x18
  03224	eb000000	 bl          LeaveCriticalSection

; 1512 :     return rc;

  03228	e59d3014	 ldr         r3, [sp, #0x14]
  0322c	e58d3024	 str         r3, [sp, #0x24]

; 1513 : }

  03230	e59d0024	 ldr         r0, [sp, #0x24]
  03234	e28dd048	 add         sp, sp, #0x48
  03238	e89d6000	 ldmia       sp, {sp, lr}
  0323c	e12fff1e	 bx          lr
  03240		 |$LN25@TWL_Interr@4|
  03240		 |$LN26@TWL_Interr@4|
  03240	00000000	 DCD         |??_C@_1KA@ONEMGNNK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@|
  03244		 |$LN27@TWL_Interr@4|
  03244	00000000	 DCD         |dpCurSettings|
  03248		 |$LN28@TWL_Interr@4|
  03248	00000000	 DCD         |??_C@_1IC@OIDEFEGA@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAE?$AAv@|
  0324c		 |$LN29@TWL_Interr@4|
  0324c	00000000	 DCD         |??_C@_1JM@ICAMEBJI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@|
  03250		 |$LN30@TWL_Interr@4|
  03250	00000000	 DCD         |?_nKeypadMatrixQueueTail@@3KA|
  03254		 |$LN31@TWL_Interr@4|
  03254	00000000	 DCD         |?_nKeypadMatrixQueueHead@@3KA|
  03258		 |$LN32@TWL_Interr@4|
  03258	00000000	 DCD         |?_nKeypadMatrixQueueCount@@3JA|
  0325c		 |$LN33@TWL_Interr@4|
  0325c	00000000	 DCD         |??_C@_1HM@OIAJOOGF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAS?$AAe?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AAI?$AAn@|
  03260		 |$M37651|

			 ENDP  ; |?TWL_InterruptSetEvent@@YAHKKPAX@Z|, TWL_InterruptSetEvent

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T37668| DCD	|$LN5@GetCurrent@2|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcess| PROC

; 361  : _inline HANDLE GetCurrentProcess(void) {

  00000		 |$LN5@GetCurrent@2|
  00000	e24dd004	 sub         sp, sp, #4
  00004		 |$M37665|

; 362  : 	return ((HANDLE)(SH_CURPROC+SYS_HANDLE_BASE));

  00004	e3a03042	 mov         r3, #0x42
  00008	e58d3000	 str         r3, [sp]

; 363  : }

  0000c	e59d0000	 ldr         r0, [sp]
  00010	e28dd004	 add         sp, sp, #4
  00014	e12fff1e	 bx          lr
  00018		 |$M37666|

			 ENDP  ; |GetCurrentProcess|


  000f8			 AREA	 |.pdata|, PDATA
|$T37676| DCD	|$LN5@TWL_Interr@5|
	DCD	0x40000f04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\driver\tps659xx.cpp

  03260			 AREA	 |.text|, CODE, ARM

  03260		 |?TWL_InterruptDisable@@YAHKK@Z| PROC	; TWL_InterruptDisable

; 1544 :         {

  03260		 |$LN5@TWL_Interr@5|
  03260	e1a0c00d	 mov         r12, sp
  03264	e92d0003	 stmdb       sp!, {r0, r1}
  03268	e92d5000	 stmdb       sp!, {r12, lr}
  0326c	e24dd008	 sub         sp, sp, #8
  03270		 |$M37673|

; 1545 :     return TWL_InterruptSetEvent(context, intrId, NULL);

  03270	e3a02000	 mov         r2, #0
  03274	e59d1014	 ldr         r1, [sp, #0x14]
  03278	e59d0010	 ldr         r0, [sp, #0x10]
  0327c	eb000000	 bl          |?TWL_InterruptSetEvent@@YAHKKPAX@Z|
  03280	e58d0004	 str         r0, [sp, #4]
  03284	e59d3004	 ldr         r3, [sp, #4]
  03288	e58d3000	 str         r3, [sp]

; 1546 :         }

  0328c	e59d0000	 ldr         r0, [sp]
  03290	e28dd008	 add         sp, sp, #8
  03294	e89d6000	 ldmia       sp, {sp, lr}
  03298	e12fff1e	 bx          lr
  0329c		 |$M37674|

			 ENDP  ; |?TWL_InterruptDisable@@YAHKK@Z|, TWL_InterruptDisable

	EXPORT	|??_C@_1JO@MEKAAHHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAP?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@MMBGIKIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAP?$AAr@| [ DATA ] ; `string'
	IMPORT	|GetLastError|
	IMPORT	|OpenProcess|

  00100			 AREA	 |.pdata|, PDATA
|$T37689| DCD	|$LN14@TWL_Interr@6|
	DCD	0x40005c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@MEKAAHHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAP?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "x", 0x0, "y", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "d", 0x0, "u"
	DCB	0x0, "p", 0x0, "l", 0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@MMBGIKIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAP?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, "!", 0x0, " "
	DCB	0x0, "T", 0x0, "W", 0x0, "L", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "x", 0x0, "y", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "g", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "r", 0x0, "o", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "("
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0329c			 AREA	 |.text|, CODE, ARM

  0329c		 |?TWL_InterruptInitializeProxy@@YAHKIKPAX@Z| PROC ; TWL_InterruptInitializeProxy

; 1558 : {   

  0329c		 |$LN14@TWL_Interr@6|
  0329c	e1a0c00d	 mov         r12, sp
  032a0	e92d000f	 stmdb       sp!, {r0 - r3}
  032a4	e92d5000	 stmdb       sp!, {r12, lr}
  032a8	e24dd048	 sub         sp, sp, #0x48
  032ac		 |$M37686|

; 1559 :     HANDLE hProc;
; 1560 :     HANDLE hEvent = NULL;

  032ac	e3a03000	 mov         r3, #0
  032b0	e58d3014	 str         r3, [sp, #0x14]

; 1561 :     BOOL rc = FALSE;    

  032b4	e3a03000	 mov         r3, #0
  032b8	e58d300c	 str         r3, [sp, #0xC]

; 1562 :     
; 1563 :     // If handle isn't NULL we set new association, 
; 1564 :     // otherwise we delete it....
; 1565 :     if (hEventOrig != NULL)

  032bc	e59d305c	 ldr         r3, [sp, #0x5C]
  032c0	e3530000	 cmp         r3, #0
  032c4	0a00003e	 beq         |$LN5@TWL_Interr@6|

; 1566 :         {
; 1567 :         hProc = OpenProcess(0, FALSE, procId);

  032c8	e59d2054	 ldr         r2, [sp, #0x54]
  032cc	e3a01000	 mov         r1, #0
  032d0	e3a00000	 mov         r0, #0
  032d4	eb000000	 bl          OpenProcess
  032d8	e58d0028	 str         r0, [sp, #0x28]
  032dc	e59d3028	 ldr         r3, [sp, #0x28]
  032e0	e58d3010	 str         r3, [sp, #0x10]

; 1568 :         if (hProc == NULL)

  032e4	e59d3010	 ldr         r3, [sp, #0x10]
  032e8	e3530000	 cmp         r3, #0
  032ec	1a00000f	 bne         |$LN4@TWL_Interr@6|

; 1569 :             {
; 1570 :             RETAILMSG(ZONE_ERROR, (L"ERROR! TWL_InterruptInitializeProxy: "
; 1571 :                 L"Unable to get process handle (err=0x%08X)\r\n",
; 1572 :                 GetLastError()
; 1573 :                 ));

  032f0	e59f310c	 ldr         r3, [pc, #0x10C]
  032f4	e5933440	 ldr         r3, [r3, #0x440]
  032f8	e3130001	 tst         r3, #1
  032fc	0a000007	 beq         |$LN8@TWL_Interr@6|
  03300	eb000000	 bl          GetLastError
  03304	e58d002c	 str         r0, [sp, #0x2C]
  03308	e59d102c	 ldr         r1, [sp, #0x2C]
  0330c	e59f00f4	 ldr         r0, [pc, #0xF4]
  03310	eb000000	 bl          NKDbgPrintfW
  03314	e3a03001	 mov         r3, #1
  03318	e58d3030	 str         r3, [sp, #0x30]
  0331c	ea000001	 b           |$LN9@TWL_Interr@6|
  03320		 |$LN8@TWL_Interr@6|
  03320	e3a03000	 mov         r3, #0
  03324	e58d3030	 str         r3, [sp, #0x30]
  03328		 |$LN9@TWL_Interr@6|

; 1574 :             goto cleanUp;

  03328	ea00002e	 b           |$LN3@TWL_Interr@6|
  0332c	ea00002d	 b           |$cleanUp$36883|
  03330		 |$LN4@TWL_Interr@6|

; 1575 :             }
; 1576 :         
; 1577 :         // create a duplicate handle
; 1578 :         rc = DuplicateHandle(
; 1579 :             hProc, hEventOrig, GetCurrentProcess(),
; 1580 :             &hEvent, 0, FALSE, 
; 1581 :             DUPLICATE_SAME_ACCESS
; 1582 :             );

  03330	eb000000	 bl          GetCurrentProcess
  03334	e58d0034	 str         r0, [sp, #0x34]
  03338	e3a03002	 mov         r3, #2
  0333c	e58d3008	 str         r3, [sp, #8]
  03340	e3a03000	 mov         r3, #0
  03344	e58d3004	 str         r3, [sp, #4]
  03348	e3a03000	 mov         r3, #0
  0334c	e58d3000	 str         r3, [sp]
  03350	e28d3014	 add         r3, sp, #0x14
  03354	e59d2034	 ldr         r2, [sp, #0x34]
  03358	e59d105c	 ldr         r1, [sp, #0x5C]
  0335c	e59d0010	 ldr         r0, [sp, #0x10]
  03360	eb000000	 bl          DuplicateHandle
  03364	e58d0038	 str         r0, [sp, #0x38]
  03368	e59d3038	 ldr         r3, [sp, #0x38]
  0336c	e58d300c	 str         r3, [sp, #0xC]

; 1583 : 
; 1584 :         // release resources
; 1585 :         CloseHandle(hProc);

  03370	e59d0010	 ldr         r0, [sp, #0x10]
  03374	eb000000	 bl          CloseHandle

; 1586 :         if (rc == FALSE)

  03378	e59d300c	 ldr         r3, [sp, #0xC]
  0337c	e3530000	 cmp         r3, #0
  03380	1a00000f	 bne         |$LN2@TWL_Interr@6|

; 1587 :         {
; 1588 :             RETAILMSG(ZONE_ERROR, (L"ERROR! TWL_InterruptInitializeProxy: "
; 1589 :                 L"Unable to duplicate handle (err=0x%08X)\r\n",
; 1590 :                 GetLastError()
; 1591 :                 ));

  03384	e59f3078	 ldr         r3, [pc, #0x78]
  03388	e5933440	 ldr         r3, [r3, #0x440]
  0338c	e3130001	 tst         r3, #1
  03390	0a000007	 beq         |$LN10@TWL_Interr@6|
  03394	eb000000	 bl          GetLastError
  03398	e58d003c	 str         r0, [sp, #0x3C]
  0339c	e59d103c	 ldr         r1, [sp, #0x3C]
  033a0	e59f0058	 ldr         r0, [pc, #0x58]
  033a4	eb000000	 bl          NKDbgPrintfW
  033a8	e3a03001	 mov         r3, #1
  033ac	e58d3040	 str         r3, [sp, #0x40]
  033b0	ea000001	 b           |$LN11@TWL_Interr@6|
  033b4		 |$LN10@TWL_Interr@6|
  033b4	e3a03000	 mov         r3, #0
  033b8	e58d3040	 str         r3, [sp, #0x40]
  033bc		 |$LN11@TWL_Interr@6|

; 1592 :             goto cleanUp;

  033bc	ea000009	 b           |$LN1@TWL_Interr@6|
  033c0	ea000008	 b           |$cleanUp$36883|
  033c4		 |$LN2@TWL_Interr@6|
  033c4		 |$LN5@TWL_Interr@6|

; 1593 :             }
; 1594 :         }
; 1595 :             
; 1596 :     // call local routine to map event with interrupt
; 1597 :     rc = TWL_InterruptInitialize(context, intrId, hEvent);

  033c4	e59d2014	 ldr         r2, [sp, #0x14]
  033c8	e59d1058	 ldr         r1, [sp, #0x58]
  033cc	e59d0050	 ldr         r0, [sp, #0x50]
  033d0	eb000000	 bl          |?TWL_InterruptInitialize@@YAHKKPAX@Z|
  033d4	e58d0044	 str         r0, [sp, #0x44]
  033d8	e59d3044	 ldr         r3, [sp, #0x44]
  033dc	e58d300c	 str         r3, [sp, #0xC]

; 1598 :     
; 1599 :     // release this handle
; 1600 :     CloseHandle(hEvent);

  033e0	e59d0014	 ldr         r0, [sp, #0x14]
  033e4	eb000000	 bl          CloseHandle
  033e8		 |$LN1@TWL_Interr@6|
  033e8		 |$LN3@TWL_Interr@6|
  033e8		 |$cleanUp$36883|

; 1601 :             
; 1602 : cleanUp:
; 1603 :     return rc;

  033e8	e59d300c	 ldr         r3, [sp, #0xC]
  033ec	e58d3024	 str         r3, [sp, #0x24]

; 1604 : }

  033f0	e59d0024	 ldr         r0, [sp, #0x24]
  033f4	e28dd048	 add         sp, sp, #0x48
  033f8	e89d6000	 ldmia       sp, {sp, lr}
  033fc	e12fff1e	 bx          lr
  03400		 |$LN15@TWL_Interr@6|
  03400		 |$LN16@TWL_Interr@6|
  03400	00000000	 DCD         |??_C@_1JO@MEKAAHHG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAP?$AAr@|
  03404		 |$LN17@TWL_Interr@6|
  03404	00000000	 DCD         |dpCurSettings|
  03408		 |$LN18@TWL_Interr@6|
  03408	00000000	 DCD         |??_C@_1KC@MMBGIKIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$CB?$AA?5?$AAT?$AAW?$AAL?$AA_?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAP?$AAr@|
  0340c		 |$M37687|

			 ENDP  ; |?TWL_InterruptInitializeProxy@@YAHKIKPAX@Z|, TWL_InterruptInitializeProxy

	EXPORT	|__$ArrayPad$| [ DATA ]

  00108			 AREA	 |.pdata|, PDATA
|$T37701| DCD	|$LN5@Initialize@2|
	DCD	0xc000a804

  00044			 AREA	 |.xdata|, DATA
|$T37697| DCD	0xffffffec
; Function compile flags: /Odtp

  0340c			 AREA	 |.text|, CODE, ARM

  0340c	00000000	 DCD         |__GSHandlerCheck|
  03410	00000000	 DCD         |$T37697|

  03414		 |?InitializeInterrupts@@YAHPAUDevice_t@@@Z| PROC ; InitializeInterrupts

; 1984 : {

  03414		 |$LN5@Initialize@2|
  03414	e1a0c00d	 mov         r12, sp
  03418	e92d0001	 stmdb       sp!, {r0}
  0341c	e92d5000	 stmdb       sp!, {r12, lr}
  03420	e24dd014	 sub         sp, sp, #0x14
  03424		 |$M37698|
  03424	e59f3284	 ldr         r3, [pc, #0x284]
  03428	e5933000	 ldr         r3, [r3]
  0342c	e58d300c	 str         r3, [sp, #0xC]

; 1985 :     BOOL rc = TRUE;

  03430	e3a03001	 mov         r3, #1
  03434	e58d3000	 str         r3, [sp]

; 1986 :     UINT8 data[5];
; 1987 : 
; 1988 :     // mask all interrupts
; 1989 :     data[0] = 0xFF;

  03438	e3a030ff	 mov         r3, #0xFF
  0343c	e5cd3004	 strb        r3, [sp, #4]

; 1990 :     WriteRegs(pDevice, TWL_PWR_IMR1, data, 1);

  03440	e3a03001	 mov         r3, #1
  03444	e28d2004	 add         r2, sp, #4
  03448	e3a01803	 mov         r1, #3, 16
  0344c	e381102f	 orr         r1, r1, #0x2F
  03450	e59d001c	 ldr         r0, [sp, #0x1C]
  03454	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 1991 :     WriteRegs(pDevice, TWL_BCIIMR1A, data, 1);

  03458	e3a03001	 mov         r3, #1
  0345c	e28d2004	 add         r2, sp, #4
  03460	e3a01802	 mov         r1, #2, 16
  03464	e38110bb	 orr         r1, r1, #0xBB
  03468	e59d001c	 ldr         r0, [sp, #0x1C]
  0346c	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 1992 :     WriteRegs(pDevice, TWL_BCIIMR2A, data, 1);

  03470	e3a03001	 mov         r3, #1
  03474	e28d2004	 add         r2, sp, #4
  03478	e3a01802	 mov         r1, #2, 16
  0347c	e38110bc	 orr         r1, r1, #0xBC
  03480	e59d001c	 ldr         r0, [sp, #0x1C]
  03484	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 1993 :     WriteRegs(pDevice, TWL_MADC_IMR1, data, 1);    

  03488	e3a03001	 mov         r3, #1
  0348c	e28d2004	 add         r2, sp, #4
  03490	e3a01802	 mov         r1, #2, 16
  03494	e3811062	 orr         r1, r1, #0x62
  03498	e59d001c	 ldr         r0, [sp, #0x1C]
  0349c	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 1994 :     WriteRegs(pDevice, TWL_KEYP_IMR1, data, 1);

  034a0	e3a03001	 mov         r3, #1
  034a4	e28d2004	 add         r2, sp, #4
  034a8	e3a01802	 mov         r1, #2, 16
  034ac	e38110e4	 orr         r1, r1, #0xE4
  034b0	e59d001c	 ldr         r0, [sp, #0x1C]
  034b4	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 1995 :     WriteRegs(pDevice, TWL_GPIO_IMR1A, data, 1);

  034b8	e3a03001	 mov         r3, #1
  034bc	e28d2004	 add         r2, sp, #4
  034c0	e3a01801	 mov         r1, #1, 16
  034c4	e38110b4	 orr         r1, r1, #0xB4
  034c8	e59d001c	 ldr         r0, [sp, #0x1C]
  034cc	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 1996 :     WriteRegs(pDevice, TWL_GPIO_IMR2A, data, 1);

  034d0	e3a03001	 mov         r3, #1
  034d4	e28d2004	 add         r2, sp, #4
  034d8	e3a01801	 mov         r1, #1, 16
  034dc	e38110b5	 orr         r1, r1, #0xB5
  034e0	e59d001c	 ldr         r0, [sp, #0x1C]
  034e4	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 1997 :     WriteRegs(pDevice, TWL_GPIO_IMR3A, data, 1);

  034e8	e3a03001	 mov         r3, #1
  034ec	e28d2004	 add         r2, sp, #4
  034f0	e3a01801	 mov         r1, #1, 16
  034f4	e38110b6	 orr         r1, r1, #0xB6
  034f8	e59d001c	 ldr         r0, [sp, #0x1C]
  034fc	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 1998 : 
; 1999 :     // Clear all USB interrupts
; 2000 :     ReadRegs(pDevice, TWL_USB_INT_LATCH, &data[0], 1);

  03500	e3a03001	 mov         r3, #1
  03504	e28d2004	 add         r2, sp, #4
  03508	e3a01014	 mov         r1, #0x14
  0350c	e59d001c	 ldr         r0, [sp, #0x1C]
  03510	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 2001 :     ReadRegs(pDevice, TWL_OTHER_INT_LATCH, &data[0], 1);

  03514	e3a03001	 mov         r3, #1
  03518	e28d2004	 add         r2, sp, #4
  0351c	e3a0108d	 mov         r1, #0x8D
  03520	e59d001c	 ldr         r0, [sp, #0x1C]
  03524	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 2002 :     ReadRegs(pDevice, TWL_CARKIT_INT_LATCH, &data[0], 1);

  03528	e3a03001	 mov         r3, #1
  0352c	e28d2004	 add         r2, sp, #4
  03530	e3a01021	 mov         r1, #0x21
  03534	e59d001c	 ldr         r0, [sp, #0x1C]
  03538	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 2003 :     ReadRegs(pDevice, TWL_CARKIT_SM_1_INT_LATCH, &data[0], 1);

  0353c	e3a03001	 mov         r3, #1
  03540	e28d2004	 add         r2, sp, #4
  03544	e3a0109b	 mov         r1, #0x9B
  03548	e59d001c	 ldr         r0, [sp, #0x1C]
  0354c	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 2004 :     ReadRegs(pDevice, TWL_CARKIT_SM_2_INT_LATCH, &data[0], 1);

  03550	e3a03001	 mov         r3, #1
  03554	e28d2004	 add         r2, sp, #4
  03558	e3a010a0	 mov         r1, #0xA0
  0355c	e59d001c	 ldr         r0, [sp, #0x1C]
  03560	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 2005 :     ReadRegs(pDevice, TWL_REG_CTRL_ERROR, &data[0], 1);

  03564	e3a03001	 mov         r3, #1
  03568	e28d2004	 add         r2, sp, #4
  0356c	e3a010b5	 mov         r1, #0xB5
  03570	e59d001c	 ldr         r0, [sp, #0x1C]
  03574	eb000000	 bl          |?ReadRegs@@YAHPAUDevice_t@@KPAXK@Z|

; 2006 : 
; 2007 :     // Disable all USB interrupts
; 2008 :     data[0] = 0xFF;

  03578	e3a030ff	 mov         r3, #0xFF
  0357c	e5cd3004	 strb        r3, [sp, #4]

; 2009 :     WriteRegs(pDevice, TWL_USB_INT_EN_FALL_CLR, data, 1);

  03580	e3a03001	 mov         r3, #1
  03584	e28d2004	 add         r2, sp, #4
  03588	e3a01012	 mov         r1, #0x12
  0358c	e59d001c	 ldr         r0, [sp, #0x1C]
  03590	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2010 :     WriteRegs(pDevice, TWL_USB_INT_EN_RISE_CLR, data, 1);

  03594	e3a03001	 mov         r3, #1
  03598	e28d2004	 add         r2, sp, #4
  0359c	e3a0100f	 mov         r1, #0xF
  035a0	e59d001c	 ldr         r0, [sp, #0x1C]
  035a4	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2011 :     WriteRegs(pDevice, TWL_OTHER_INT_EN_RISE_CLR, data, 1);

  035a8	e3a03001	 mov         r3, #1
  035ac	e28d2004	 add         r2, sp, #4
  035b0	e3a01088	 mov         r1, #0x88
  035b4	e59d001c	 ldr         r0, [sp, #0x1C]
  035b8	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2012 :     WriteRegs(pDevice, TWL_OTHER_INT_EN_FALL_CLR, data, 1);

  035bc	e3a03001	 mov         r3, #1
  035c0	e28d2004	 add         r2, sp, #4
  035c4	e3a0108b	 mov         r1, #0x8B
  035c8	e59d001c	 ldr         r0, [sp, #0x1C]
  035cc	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2013 :     WriteRegs(pDevice, TWL_CARKIT_INT_EN_CLR, data, 1);

  035d0	e3a03001	 mov         r3, #1
  035d4	e28d2004	 add         r2, sp, #4
  035d8	e3a0101f	 mov         r1, #0x1F
  035dc	e59d001c	 ldr         r0, [sp, #0x1C]
  035e0	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2014 :     WriteRegs(pDevice, TWL_CARKIT_SM_1_INT_EN_CLR, data, 1);

  035e4	e3a03001	 mov         r3, #1
  035e8	e28d2004	 add         r2, sp, #4
  035ec	e3a01099	 mov         r1, #0x99
  035f0	e59d001c	 ldr         r0, [sp, #0x1C]
  035f4	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2015 :     WriteRegs(pDevice, TWL_CARKIT_SM_2_INT_EN_CLR, data, 1);

  035f8	e3a03001	 mov         r3, #1
  035fc	e28d2004	 add         r2, sp, #4
  03600	e3a0109e	 mov         r1, #0x9E
  03604	e59d001c	 ldr         r0, [sp, #0x1C]
  03608	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2016 :     WriteRegs(pDevice, TWL_REG_CTRL_EN_CLR, data, 1);

  0360c	e3a03001	 mov         r3, #1
  03610	e28d2004	 add         r2, sp, #4
  03614	e3a010b4	 mov         r1, #0xB4
  03618	e59d001c	 ldr         r0, [sp, #0x1C]
  0361c	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2017 : 
; 2018 :     // put power and rtc interrupts in exclusive mode
; 2019 :     data[0] = TWL_SIH_CTRL_EXCLEN;

  03620	e3a03001	 mov         r3, #1
  03624	e5cd3004	 strb        r3, [sp, #4]

; 2020 :     WriteRegs(pDevice, TWL_PWR_SIH_CTRL, data, 1);

  03628	e3a03001	 mov         r3, #1
  0362c	e28d2004	 add         r2, sp, #4
  03630	e3a01803	 mov         r1, #3, 16
  03634	e3811035	 orr         r1, r1, #0x35
  03638	e59d001c	 ldr         r0, [sp, #0x1C]
  0363c	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2021 : 
; 2022 :     // set edge interrupt and ctrl for power
; 2023 : 
; 2024 :     // RTC_IT_RISING
; 2025 :     // USB_PRES_RISING | USB_PRES_FALLING
; 2026 :     // CHG_PRES_RISING | CHG_PRES_FALLING
; 2027 :     data[0] = TWL_RTC_IT_RISING | TWL_USB_PRES_RISING | TWL_USB_PRES_FALLING |
; 2028 :               TWL_CHG_PRES_RISING | TWL_CHG_PRES_FALLING;

  03640	e3a030bc	 mov         r3, #0xBC
  03644	e5cd3004	 strb        r3, [sp, #4]

; 2029 :     
; 2030 :     WriteRegs(pDevice, TWL_PWR_EDR1, data, 1);

  03648	e3a03001	 mov         r3, #1
  0364c	e28d2004	 add         r2, sp, #4
  03650	e3a01803	 mov         r1, #3, 16
  03654	e3811033	 orr         r1, r1, #0x33
  03658	e59d001c	 ldr         r0, [sp, #0x1C]
  0365c	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2031 : 
; 2032 :     // set edge interrupt and ctrl for keypad
; 2033 : 
; 2034 :     // set edge interrupt and ctrl for bci
; 2035 : 
; 2036 :     // interrupt on both edges for all interrupts
; 2037 :     data[0] = 0xFF;

  03660	e3a030ff	 mov         r3, #0xFF
  03664	e5cd3004	 strb        r3, [sp, #4]

; 2038 :     data[1] = 0xFF;

  03668	e3a030ff	 mov         r3, #0xFF
  0366c	e5cd3005	 strb        r3, [sp, #5]

; 2039 :     data[2] = 0xFF;

  03670	e3a030ff	 mov         r3, #0xFF
  03674	e5cd3006	 strb        r3, [sp, #6]

; 2040 :     WriteRegs(pDevice, TWL_BCIEDR1, data, 3);

  03678	e3a03003	 mov         r3, #3
  0367c	e28d2004	 add         r2, sp, #4
  03680	e3a01802	 mov         r1, #2, 16
  03684	e38110c3	 orr         r1, r1, #0xC3
  03688	e59d001c	 ldr         r0, [sp, #0x1C]
  0368c	eb000000	 bl          |?WriteRegs@@YAHPAUDevice_t@@KPBXK@Z|

; 2041 : 
; 2042 :     // set edge interrupt and ctrl for madc
; 2043 : 
; 2044 :     // set edge interrupt and ctrl for gpio
; 2045 : 
; 2046 :     // set interrupts for USB
; 2047 : 
; 2048 :     return rc;

  03690	e59d000c	 ldr         r0, [sp, #0xC]
  03694	eb000000	 bl          __security_check_cookie
  03698	e59d3000	 ldr         r3, [sp]
  0369c	e58d3010	 str         r3, [sp, #0x10]

; 2049 : }

  036a0	e59d0010	 ldr         r0, [sp, #0x10]
  036a4	e28dd014	 add         sp, sp, #0x14
  036a8	e89d6000	 ldmia       sp, {sp, lr}
  036ac	e12fff1e	 bx          lr
  036b0		 |$LN6@Initialize@2|
  036b0		 |$LN7@Initialize@2|
  036b0	00000000	 DCD         |__security_cookie|
  036b4		 |$M37699|

			 ENDP  ; |?InitializeInterrupts@@YAHPAUDevice_t@@@Z|, InitializeInterrupts

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00110			 AREA	 |.pdata|, PDATA
|$T37709| DCD	|$LN8@DllMain|
	DCD	0x40001404
; Function compile flags: /Odtp

  036b4			 AREA	 |.text|, CODE, ARM

  036b4		 |DllMain| PROC

; 2064 : {

  036b4		 |$LN8@DllMain|
  036b4	e1a0c00d	 mov         r12, sp
  036b8	e92d0007	 stmdb       sp!, {r0 - r2}
  036bc	e92d5000	 stmdb       sp!, {r12, lr}
  036c0	e24dd004	 sub         sp, sp, #4
  036c4		 |$M37706|

; 2065 :     UNREFERENCED_PARAMETER(pReserved);
; 2066 :     switch (reason)

  036c4	e59d3010	 ldr         r3, [sp, #0x10]
  036c8	e3530001	 cmp         r3, #1
  036cc	0a000000	 beq         |$LN1@DllMain|
  036d0	ea000004	 b           |$LN2@DllMain|
  036d4		 |$LN1@DllMain|

; 2067 :         {
; 2068 :         case DLL_PROCESS_ATTACH:
; 2069 :             RETAILREGISTERZONES((HMODULE)hDLL);

  036d4	e59f1024	 ldr         r1, [pc, #0x24]
  036d8	e59d000c	 ldr         r0, [sp, #0xC]
  036dc	eb000000	 bl          RegisterDbgZones

; 2070 :             DisableThreadLibraryCalls((HMODULE)hDLL);

  036e0	e59d000c	 ldr         r0, [sp, #0xC]
  036e4	eb000000	 bl          DisableThreadLibraryCalls
  036e8		 |$LN2@DllMain|

; 2071 :             break;
; 2072 :         }
; 2073 :     return TRUE;

  036e8	e3a03001	 mov         r3, #1
  036ec	e58d3000	 str         r3, [sp]

; 2074 : }

  036f0	e59d0000	 ldr         r0, [sp]
  036f4	e28dd004	 add         sp, sp, #4
  036f8	e89d6000	 ldmia       sp, {sp, lr}
  036fc	e12fff1e	 bx          lr
  03700		 |$LN9@DllMain|
  03700		 |$LN10@DllMain|
  03700	00000000	 DCD         |dpCurSettings|
  03704		 |$M37707|

			 ENDP  ; |DllMain|

	END
