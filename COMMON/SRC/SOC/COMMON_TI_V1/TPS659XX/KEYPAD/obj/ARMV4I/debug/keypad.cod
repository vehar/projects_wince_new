; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\TPS659XX\KEYPAD\keypad.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@MBPNPOKM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAL?$AAe?$AAd?$AAN?$AAu?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@CGBLFBGH@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAL?$AAi?$AAg?$AAh?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@MAKEJFGC@?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAs?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@NNCBJPIE@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAO?$AAf?$AAf?$AAK?$AAe?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@BCDOPOGB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@PCIKFLJA@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAD?$AAi?$AAv?$AAi?$AAd?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DEVICE_IFC_TWL_GUID| [ DATA ]
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@MBPNPOKM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAL?$AAe?$AAd?$AAN?$AAu?$AAm?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "e", 0x0, "d", 0x0, "N", 0x0, "u", 0x0, "m", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CGBLFBGH@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAL?$AAi?$AAg?$AAh?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "K"
	DCB	0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, "L"
	DCB	0x0, "i", 0x0, "g", 0x0, "h", 0x0, "t", 0x0, "T", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@MAKEJFGC@?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAs?$AAk?$AA?$AA@| DCB "P"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M", 0x0, "a"
	DCB	0x0, "s", 0x0, "k", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@NNCBJPIE@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAO?$AAf?$AAf?$AAK?$AAe?$AAy?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "O"
	DCB	0x0, "f", 0x0, "f", 0x0, "K", 0x0, "e", 0x0, "y", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| DCB "N"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "p"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| DCB "F"
	DCB	0x0, "i", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, "R", 0x0, "e"
	DCB	0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| DCB "S"
	DCB	0x0, "a", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "P"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@BCDOPOGB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "e", 0x0, "C", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@PCIKFLJA@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAD?$AAi?$AAv?$AAi?$AAd?$AAe?$AAr?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "D", 0x0, "i"
	DCB	0x0, "v", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, "r", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "k", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3
|g_iDisplayOrientation| DCD 0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|DEVICE_IFC_TWL_GUID| DCD 0xdef0a04b
	DCW	0xb967
	DCW	0x43db
	DCB	0x95
	DCB	0x9e
	DCB	0xd9
	DCB	0xfc
	DCB	0x62
	DCB	0x25
	DCB	0xcd
	DCB	0xeb
|s_deviceRegParams| DCD |??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x4
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x8
	DCD	0x4
	DCD	0x1
	DCD	|??_C@_1BK@PCIKFLJA@?$AAC?$AAl?$AAo?$AAc?$AAk?$AAD?$AAi?$AAv?$AAi?$AAd?$AAe?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xc
	DCD	0x4
	DCD	0x5
	DCD	|??_C@_1CA@BCDOPOGB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x10
	DCD	0x4
	DCD	0x4
	DCD	|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x14
	DCD	0x4
	DCD	0x28
	DCD	|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x18
	DCD	0x4
	DCD	0x1f4
	DCD	|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x1c
	DCD	0x4
	DCD	0x7d
	DCD	|??_C@_1BK@NNCBJPIE@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAO?$AAf?$AAf?$AAK?$AAe?$AAy?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x40
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BE@MAKEJFGC@?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAa?$AAs?$AAk?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x2c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CG@CGBLFBGH@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAL?$AAi?$AAg?$AAh?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x48
	DCD	0x4
	DCD	0x1388
	DCD	|??_C@_1BK@MBPNPOKM@?$AAK?$AAe?$AAy?$AAp?$AAa?$AAd?$AAL?$AAe?$AAd?$AAN?$AAu?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x44
	DCD	0x4
	DCD	0xffffffff
|?ucOrientationDMDO_0VKTable@?1??RemapVKeyToScreenOrientation@@9@9| DCB 0x26 ; `RemapVKeyToScreenOrientation'::`2'::ucOrientationDMDO_0VKTable
	DCB	0x27
	DCB	0x28
	DCB	0x25
|?ucOrientationDMDO_90VKTable@?1??RemapVKeyToScreenOrientation@@9@9| DCB 0x27 ; `RemapVKeyToScreenOrientation'::`2'::ucOrientationDMDO_90VKTable
	DCB	0x28
	DCB	0x25
	DCB	0x26
|?ucOrientationDMDO_180VKTable@?1??RemapVKeyToScreenOrientation@@9@9| DCB 0x28 ; `RemapVKeyToScreenOrientation'::`2'::ucOrientationDMDO_180VKTable
	DCB	0x25
	DCB	0x26
	DCB	0x27
|?ucOrientationDMDO_270VKTable@?1??RemapVKeyToScreenOrientation@@9@9| DCB 0x25 ; `RemapVKeyToScreenOrientation'::`2'::ucOrientationDMDO_270VKTable
	DCB	0x26
	DCB	0x27
	DCB	0x28
	EXPORT	|SendKeyPadEvent|
	IMPORT	|keybd_event|
	IMPORT	|g_keypadExtraSeq|

  00000			 AREA	 |.pdata|, PDATA
|$T44286| DCD	|$LN13@SendKeyPad|
	DCD	0x40006304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\keypad\keypad.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SendKeyPadEvent| PROC

; 142  : {

  00000		 |$LN13@SendKeyPad|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M44283|

; 143  :     USHORT index;
; 144  :     UCHAR vk_extra = 0, order;

  00010	e3a03000	 mov         r3, #0
  00014	e5cd3000	 strb        r3, [sp]

; 145  :     
; 146  :     order = KEYPAD_EXTRASEQ_ORDER_NONE; // no extra key needed

  00018	e3a030ff	 mov         r3, #0xFF
  0001c	e5cd3004	 strb        r3, [sp, #4]

; 147  :     
; 148  :     // Remap for rotation angle
; 149  :     bVk = RemapVKeyToScreenOrientation(bVk);

  00020	e5dd0010	 ldrb        r0, [sp, #0x10]
  00024	eb000000	 bl          RemapVKeyToScreenOrientation
  00028	e5cd0005	 strb        r0, [sp, #5]
  0002c	e5dd3005	 ldrb        r3, [sp, #5]
  00030	e5cd3010	 strb        r3, [sp, #0x10]

; 150  :     
; 151  :     // Check extra virtual key sequence table
; 152  :     for (index = 0; index < g_keypadExtraSeq.count; index ++)

  00034	e3a03000	 mov         r3, #0
  00038	e1cd30b2	 strh        r3, [sp, #2]
  0003c	ea000004	 b           |$LN8@SendKeyPad|
  00040		 |$LN7@SendKeyPad|
  00040	e1dd30b2	 ldrh        r3, [sp, #2]
  00044	e2833001	 add         r3, r3, #1
  00048	e1a03803	 mov         r3, r3, lsl #16
  0004c	e1a03823	 mov         r3, r3, lsr #16
  00050	e1cd30b2	 strh        r3, [sp, #2]
  00054		 |$LN8@SendKeyPad|
  00054	e1dd30b2	 ldrh        r3, [sp, #2]
  00058	e1a02003	 mov         r2, r3
  0005c	e59f3124	 ldr         r3, [pc, #0x124]
  00060	e1d330b0	 ldrh        r3, [r3]
  00064	e1520003	 cmp         r2, r3
  00068	aa000020	 bge         |$LN6@SendKeyPad|

; 153  :         {
; 154  :         if (g_keypadExtraSeq.pItem[index].vk_orig == bVk)

  0006c	e1dd30b2	 ldrh        r3, [sp, #2]
  00070	e1a01003	 mov         r1, r3
  00074	e3a03003	 mov         r3, #3
  00078	e0020391	 mul         r2, r1, r3
  0007c	e59f3104	 ldr         r3, [pc, #0x104]
  00080	e5933004	 ldr         r3, [r3, #4]
  00084	e0833002	 add         r3, r3, r2
  00088	e5d33000	 ldrb        r3, [r3]
  0008c	e1a02003	 mov         r2, r3
  00090	e5dd3010	 ldrb        r3, [sp, #0x10]
  00094	e1520003	 cmp         r2, r3
  00098	1a000013	 bne         |$LN5@SendKeyPad|

; 155  :             {
; 156  :             vk_extra = g_keypadExtraSeq.pItem[index].vk_extra;

  0009c	e1dd30b2	 ldrh        r3, [sp, #2]
  000a0	e1a01003	 mov         r1, r3
  000a4	e3a03003	 mov         r3, #3
  000a8	e0020391	 mul         r2, r1, r3
  000ac	e59f30d4	 ldr         r3, [pc, #0xD4]
  000b0	e5933004	 ldr         r3, [r3, #4]
  000b4	e0833002	 add         r3, r3, r2
  000b8	e2833001	 add         r3, r3, #1
  000bc	e5d33000	 ldrb        r3, [r3]
  000c0	e5cd3000	 strb        r3, [sp]

; 157  :             order = g_keypadExtraSeq.pItem[index].order;

  000c4	e1dd30b2	 ldrh        r3, [sp, #2]
  000c8	e1a01003	 mov         r1, r3
  000cc	e3a03003	 mov         r3, #3
  000d0	e0020391	 mul         r2, r1, r3
  000d4	e59f30ac	 ldr         r3, [pc, #0xAC]
  000d8	e5933004	 ldr         r3, [r3, #4]
  000dc	e0833002	 add         r3, r3, r2
  000e0	e2833002	 add         r3, r3, #2
  000e4	e5d33000	 ldrb        r3, [r3]
  000e8	e5cd3004	 strb        r3, [sp, #4]
  000ec		 |$LN5@SendKeyPad|

; 158  :             }
; 159  :         }

  000ec	eaffffd3	 b           |$LN7@SendKeyPad|
  000f0		 |$LN6@SendKeyPad|

; 160  :       
; 161  :     // Check to send extra vk first  
; 162  :     if (order == KEYPAD_EXTRASEQ_ORDER_EXTRAFIRST || 
; 163  :         (order == KEYPAD_EXTRASEQ_ORDER_EXTRAORIG && (dwFlags & KEYEVENTF_KEYUP) == 0) )

  000f0	e5dd3004	 ldrb        r3, [sp, #4]
  000f4	e3530000	 cmp         r3, #0
  000f8	0a000005	 beq         |$LN3@SendKeyPad|
  000fc	e5dd3004	 ldrb        r3, [sp, #4]
  00100	e3530001	 cmp         r3, #1
  00104	1a000008	 bne         |$LN4@SendKeyPad|
  00108	e59d3018	 ldr         r3, [sp, #0x18]
  0010c	e3130002	 tst         r3, #2
  00110	1a000005	 bne         |$LN4@SendKeyPad|
  00114		 |$LN3@SendKeyPad|

; 164  :         {
; 165  :         keybd_event(
; 166  :             vk_extra,
; 167  :             0,
; 168  :             dwFlags | KEYEVENTF_SILENT,
; 169  :             dwExtraInfo);

  00114	e59d301c	 ldr         r3, [sp, #0x1C]
  00118	e59d2018	 ldr         r2, [sp, #0x18]
  0011c	e3822004	 orr         r2, r2, #4
  00120	e3a01000	 mov         r1, #0
  00124	e5dd0000	 ldrb        r0, [sp]
  00128	eb000000	 bl          keybd_event
  0012c		 |$LN4@SendKeyPad|

; 170  :         }
; 171  :           
; 172  :     // Send original vk
; 173  :     keybd_event(
; 174  :         bVk,
; 175  :         bScan,
; 176  :         dwFlags,
; 177  :         dwExtraInfo);

  0012c	e59d301c	 ldr         r3, [sp, #0x1C]
  00130	e59d2018	 ldr         r2, [sp, #0x18]
  00134	e5dd1014	 ldrb        r1, [sp, #0x14]
  00138	e5dd0010	 ldrb        r0, [sp, #0x10]
  0013c	eb000000	 bl          keybd_event

; 178  :       
; 179  :    // Check to send extra key
; 180  :    if (order == KEYPAD_EXTRASEQ_ORDER_ORIGFIRST || 
; 181  :        (order == KEYPAD_EXTRASEQ_ORDER_EXTRAORIG && (dwFlags & KEYEVENTF_KEYUP)))

  00140	e5dd3004	 ldrb        r3, [sp, #4]
  00144	e3530002	 cmp         r3, #2
  00148	0a000005	 beq         |$LN1@SendKeyPad|
  0014c	e5dd3004	 ldrb        r3, [sp, #4]
  00150	e3530001	 cmp         r3, #1
  00154	1a000008	 bne         |$LN2@SendKeyPad|
  00158	e59d3018	 ldr         r3, [sp, #0x18]
  0015c	e3130002	 tst         r3, #2
  00160	0a000005	 beq         |$LN2@SendKeyPad|
  00164		 |$LN1@SendKeyPad|

; 182  :        {
; 183  :        keybd_event(
; 184  :            vk_extra,
; 185  :            0,
; 186  :            dwFlags | KEYEVENTF_SILENT,
; 187  :            dwExtraInfo);

  00164	e59d301c	 ldr         r3, [sp, #0x1C]
  00168	e59d2018	 ldr         r2, [sp, #0x18]
  0016c	e3822004	 orr         r2, r2, #4
  00170	e3a01000	 mov         r1, #0
  00174	e5dd0000	 ldrb        r0, [sp]
  00178	eb000000	 bl          keybd_event
  0017c		 |$LN2@SendKeyPad|

; 188  :        }
; 189  : }

  0017c	e28dd008	 add         sp, sp, #8
  00180	e89d6000	 ldmia       sp, {sp, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$LN14@SendKeyPad|
  00188		 |$LN15@SendKeyPad|
  00188	00000000	 DCD         |g_keypadExtraSeq|
  0018c		 |$M44284|

			 ENDP  ; |SendKeyPadEvent|

	EXPORT	|??_C@_1DO@HFBDPGNP@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@OOAHNOJF@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@OKMNCGKP@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5@| [ DATA ] ; `string'
	EXPORT	|PressedReleasedKeys|
	IMPORT	|PowerPolicyNotify|
	IMPORT	|NKDbgPrintfW|

  00008			 AREA	 |.pdata|, PDATA
|$T44300| DCD	|$LN31@PressedRel|
	DCD	0x4000a804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@HFBDPGNP@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "e"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, "K", 0x0, "e", 0x0, "y"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@OOAHNOJF@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx@| DCB " "
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "e"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, "K", 0x0, "e", 0x0, "y"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e", 0x0, "y"
	DCB	0x0, " ", 0x0, "U", 0x0, "p", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@OKMNCGKP@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5@| DCB " "
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "e"
	DCB	0x0, "d", 0x0, "R", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, "K", 0x0, "e", 0x0, "y"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e", 0x0, "y"
	DCB	0x0, " ", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, ":"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0018c			 AREA	 |.text|, CODE, ARM

  0018c		 |PressedReleasedKeys| PROC

; 204  : {

  0018c		 |$LN31@PressedRel|
  0018c	e1a0c00d	 mov         r12, sp
  00190	e92d0007	 stmdb       sp!, {r0 - r2}
  00194	e92d5000	 stmdb       sp!, {r12, lr}
  00198	e24dd020	 sub         sp, sp, #0x20
  0019c		 |$M44297|

; 205  :     UINT8 vk;
; 206  :     int ic;
; 207  : 
; 208  :     for (ic = 0, vk = 0; ic < VK_KEYS/DWORD_BITS; ic++)

  0019c	e3a03000	 mov         r3, #0
  001a0	e58d3004	 str         r3, [sp, #4]
  001a4	e3a03000	 mov         r3, #0
  001a8	e5cd3000	 strb        r3, [sp]
  001ac	ea000002	 b           |$LN19@PressedRel|
  001b0		 |$LN18@PressedRel|
  001b0	e59d3004	 ldr         r3, [sp, #4]
  001b4	e2833001	 add         r3, r3, #1
  001b8	e58d3004	 str         r3, [sp, #4]
  001bc		 |$LN19@PressedRel|
  001bc	e59d3004	 ldr         r3, [sp, #4]
  001c0	e3530008	 cmp         r3, #8
  001c4	aa000090	 bge         |$LN17@PressedRel|

; 209  :         {
; 210  :         DWORD change = vkState[ic] ^ vkNewState[ic];

  001c8	e59d1004	 ldr         r1, [sp, #4]
  001cc	e3a03004	 mov         r3, #4
  001d0	e0020391	 mul         r2, r1, r3
  001d4	e59d302c	 ldr         r3, [sp, #0x2C]
  001d8	e0830002	 add         r0, r3, r2
  001dc	e59d1004	 ldr         r1, [sp, #4]
  001e0	e3a03004	 mov         r3, #4
  001e4	e0020391	 mul         r2, r1, r3
  001e8	e59d3030	 ldr         r3, [sp, #0x30]
  001ec	e0833002	 add         r3, r3, r2
  001f0	e5902000	 ldr         r2, [r0]
  001f4	e5933000	 ldr         r3, [r3]
  001f8	e0223003	 eor         r3, r2, r3
  001fc	e58d3008	 str         r3, [sp, #8]

; 211  :         if (change == 0)

  00200	e59d3008	 ldr         r3, [sp, #8]
  00204	e3530000	 cmp         r3, #0
  00208	1a000004	 bne         |$LN16@PressedRel|

; 212  :             {
; 213  :             vk += DWORD_BITS;

  0020c	e5dd3000	 ldrb        r3, [sp]
  00210	e2833020	 add         r3, r3, #0x20
  00214	e20330ff	 and         r3, r3, #0xFF
  00218	e5cd3000	 strb        r3, [sp]

; 214  :             }
; 215  :         else

  0021c	ea000079	 b           |$LN15@PressedRel|
  00220		 |$LN16@PressedRel|

; 216  :             {
; 217  :             DWORD mask;
; 218  :             for (mask = 1; mask != 0; mask <<= 1, vk++)

  00220	e3a03001	 mov         r3, #1
  00224	e58d300c	 str         r3, [sp, #0xC]
  00228	ea000006	 b           |$LN14@PressedRel|
  0022c		 |$LN13@PressedRel|
  0022c	e59d300c	 ldr         r3, [sp, #0xC]
  00230	e1a03083	 mov         r3, r3, lsl #1
  00234	e58d300c	 str         r3, [sp, #0xC]
  00238	e5dd3000	 ldrb        r3, [sp]
  0023c	e2833001	 add         r3, r3, #1
  00240	e20330ff	 and         r3, r3, #0xFF
  00244	e5cd3000	 strb        r3, [sp]
  00248		 |$LN14@PressedRel|
  00248	e59d300c	 ldr         r3, [sp, #0xC]
  0024c	e3530000	 cmp         r3, #0
  00250	0a00006c	 beq         |$LN12@PressedRel|

; 219  :                 {
; 220  :                 // Check for change
; 221  :                 if ((change & mask) != 0)

  00254	e59d2008	 ldr         r2, [sp, #8]
  00258	e59d300c	 ldr         r3, [sp, #0xC]
  0025c	e1120003	 tst         r2, r3
  00260	0a000067	 beq         |$LN11@PressedRel|

; 222  :                     {
; 223  :                     if ((vkNewState[ic] & mask) != 0)

  00264	e59d1004	 ldr         r1, [sp, #4]
  00268	e3a03004	 mov         r3, #4
  0026c	e0020391	 mul         r2, r1, r3
  00270	e59d3030	 ldr         r3, [sp, #0x30]
  00274	e0833002	 add         r3, r3, r2
  00278	e5932000	 ldr         r2, [r3]
  0027c	e59d300c	 ldr         r3, [sp, #0xC]
  00280	e1120003	 tst         r2, r3
  00284	0a000013	 beq         |$LN10@PressedRel|

; 224  :                         {
; 225  :                         DEBUGMSG(PressedReleasedKeys, 
; 226  :                             (L" PressedReleasedKeys: Key Down: 0x%x\r\n", vk
; 227  :                             )); 

  00288	e59f3194	 ldr         r3, [pc, #0x194]
  0028c	e3530000	 cmp         r3, #0
  00290	0a000005	 beq         |$LN22@PressedRel|
  00294	e5dd1000	 ldrb        r1, [sp]
  00298	e59f0188	 ldr         r0, [pc, #0x188]
  0029c	eb000000	 bl          NKDbgPrintfW
  002a0	e3a03001	 mov         r3, #1
  002a4	e58d3010	 str         r3, [sp, #0x10]
  002a8	ea000001	 b           |$LN23@PressedRel|
  002ac		 |$LN22@PressedRel|
  002ac	e3a03000	 mov         r3, #0
  002b0	e58d3010	 str         r3, [sp, #0x10]
  002b4		 |$LN23@PressedRel|

; 228  :                         // Send key down event
; 229  :                         if (vk != VK_OFF)

  002b4	e5dd3000	 ldrb        r3, [sp]
  002b8	e35300df	 cmp         r3, #0xDF
  002bc	0a000004	 beq         |$LN9@PressedRel|

; 230  :                             {
; 231  :                             SendKeyPadEvent(vk, 0, 0, 0);

  002c0	e3a03000	 mov         r3, #0
  002c4	e3a02000	 mov         r2, #0
  002c8	e3a01000	 mov         r1, #0
  002cc	e5dd0000	 ldrb        r0, [sp]
  002d0	eb000000	 bl          SendKeyPadEvent
  002d4		 |$LN9@PressedRel|

; 232  :                             }
; 233  :                         }
; 234  :                     else

  002d4	ea00004a	 b           |$LN8@PressedRel|
  002d8		 |$LN10@PressedRel|

; 235  :                         {
; 236  :                         DEBUGMSG(PressedReleasedKeys, 
; 237  :                             (L" PressedReleasedKeys: Key Up: 0x%x\r\n", vk
; 238  :                             ));

  002d8	e59f3144	 ldr         r3, [pc, #0x144]
  002dc	e3530000	 cmp         r3, #0
  002e0	0a000005	 beq         |$LN24@PressedRel|
  002e4	e5dd1000	 ldrb        r1, [sp]
  002e8	e59f0130	 ldr         r0, [pc, #0x130]
  002ec	eb000000	 bl          NKDbgPrintfW
  002f0	e3a03001	 mov         r3, #1
  002f4	e58d3014	 str         r3, [sp, #0x14]
  002f8	ea000001	 b           |$LN25@PressedRel|
  002fc		 |$LN24@PressedRel|
  002fc	e3a03000	 mov         r3, #0
  00300	e58d3014	 str         r3, [sp, #0x14]
  00304		 |$LN25@PressedRel|

; 239  : 
; 240  :                         // Need to send the keydown as well as keyup for
; 241  :                         // device to suspend under cebase.                          
; 242  :                         if (pDevice->bEnableOffKey == TRUE && vk == VK_OFF)

  00304	e59d3028	 ldr         r3, [sp, #0x28]
  00308	e2833040	 add         r3, r3, #0x40
  0030c	e5933000	 ldr         r3, [r3]
  00310	e3530001	 cmp         r3, #1
  00314	1a000007	 bne         |$LN7@PressedRel|
  00318	e5dd3000	 ldrb        r3, [sp]
  0031c	e35300df	 cmp         r3, #0xDF
  00320	1a000004	 bne         |$LN7@PressedRel|

; 243  :                             {
; 244  :                             SendKeyPadEvent(vk, 0, 0, 0);

  00324	e3a03000	 mov         r3, #0
  00328	e3a02000	 mov         r2, #0
  0032c	e3a01000	 mov         r1, #0
  00330	e5dd0000	 ldrb        r0, [sp]
  00334	eb000000	 bl          SendKeyPadEvent
  00338		 |$LN7@PressedRel|

; 245  :                             }
; 246  :                         
; 247  :                         // Send key down event
; 248  :                         if (pDevice->bEnableOffKey != FALSE || vk != VK_OFF)

  00338	e59d3028	 ldr         r3, [sp, #0x28]
  0033c	e2833040	 add         r3, r3, #0x40
  00340	e5933000	 ldr         r3, [r3]
  00344	e3530000	 cmp         r3, #0
  00348	1a000002	 bne         |$LN5@PressedRel|
  0034c	e5dd3000	 ldrb        r3, [sp]
  00350	e35300df	 cmp         r3, #0xDF
  00354	0a000004	 beq         |$LN6@PressedRel|
  00358		 |$LN5@PressedRel|

; 249  :                             {
; 250  :                             SendKeyPadEvent(vk, 0, KEYEVENTF_KEYUP, 0);

  00358	e3a03000	 mov         r3, #0
  0035c	e3a02002	 mov         r2, #2
  00360	e3a01000	 mov         r1, #0
  00364	e5dd0000	 ldrb        r0, [sp]
  00368	eb000000	 bl          SendKeyPadEvent
  0036c		 |$LN6@PressedRel|

; 251  :                             }
; 252  :                         
; 253  :                         // send PowerPolicyNotify notification
; 254  :                         switch (vk)

  0036c	e5dd3000	 ldrb        r3, [sp]
  00370	e58d3018	 str         r3, [sp, #0x18]
  00374	e59d3018	 ldr         r3, [sp, #0x18]
  00378	e35300c6	 cmp         r3, #0xC6
  0037c	ca000009	 bgt         |$LN28@PressedRel|
  00380	e59d3018	 ldr         r3, [sp, #0x18]
  00384	e35300c1	 cmp         r3, #0xC1
  00388	aa00001a	 bge         |$LN1@PressedRel|
  0038c	e59d3018	 ldr         r3, [sp, #0x18]
  00390	e353005d	 cmp         r3, #0x5D
  00394	0a000017	 beq         |$LN1@PressedRel|
  00398	e59d3018	 ldr         r3, [sp, #0x18]
  0039c	e3530081	 cmp         r3, #0x81
  003a0	0a000004	 beq         |$LN2@PressedRel|
  003a4	ea000016	 b           |$LN3@PressedRel|
  003a8		 |$LN28@PressedRel|
  003a8	e59d3018	 ldr         r3, [sp, #0x18]
  003ac	e35300df	 cmp         r3, #0xDF
  003b0	0a000000	 beq         |$LN2@PressedRel|
  003b4	ea000012	 b           |$LN3@PressedRel|
  003b8		 |$LN2@PressedRel|

; 255  :                             {
; 256  :                             case VK_TPOWER:
; 257  :                             case VK_OFF:
; 258  :                                 // only disable interrupts if we are about to enter
; 259  :                                 // a suspend state
; 260  :                                 RETAILMSG(ZONE_IST, 
; 261  :                                     (L" PressedReleasedKeys: 0x%02X\r\n", 
; 262  :                                     vk
; 263  :                                     ));

  003b8	e59f305c	 ldr         r3, [pc, #0x5C]
  003bc	e5933440	 ldr         r3, [r3, #0x440]
  003c0	e3130010	 tst         r3, #0x10
  003c4	0a000005	 beq         |$LN26@PressedRel|
  003c8	e5dd1000	 ldrb        r1, [sp]
  003cc	e59f0044	 ldr         r0, [pc, #0x44]
  003d0	eb000000	 bl          NKDbgPrintfW
  003d4	e3a03001	 mov         r3, #1
  003d8	e58d301c	 str         r3, [sp, #0x1C]
  003dc	ea000001	 b           |$LN27@PressedRel|
  003e0		 |$LN26@PressedRel|
  003e0	e3a03000	 mov         r3, #0
  003e4	e58d301c	 str         r3, [sp, #0x1C]
  003e8		 |$LN27@PressedRel|

; 264  :                                 PowerPolicyNotify(PPN_SUSPENDKEYPRESSED, 0);

  003e8	e3a01000	 mov         r1, #0
  003ec	e3a00004	 mov         r0, #4
  003f0	eb000000	 bl          PowerPolicyNotify

; 265  :                                 break;

  003f4	ea000002	 b           |$LN3@PressedRel|
  003f8		 |$LN1@PressedRel|

; 266  : 
; 267  :                             case VK_APPS:
; 268  :                             case VK_APP1:
; 269  :                             case VK_APP2:
; 270  :                             case VK_APP3:
; 271  :                             case VK_APP4:
; 272  :                             case VK_APP5:
; 273  :                             case VK_APP6:                     
; 274  :                                 PowerPolicyNotify(PPN_APPBUTTONPRESSED, 0);

  003f8	e3a01000	 mov         r1, #0
  003fc	e3a00006	 mov         r0, #6
  00400	eb000000	 bl          PowerPolicyNotify
  00404		 |$LN3@PressedRel|
  00404		 |$LN8@PressedRel|
  00404		 |$LN11@PressedRel|

; 275  :                                 break;
; 276  :                             }
; 277  :                         
; 278  :                         }
; 279  :                     }
; 280  :                 }

  00404	eaffff88	 b           |$LN13@PressedRel|
  00408		 |$LN12@PressedRel|
  00408		 |$LN15@PressedRel|

; 281  :             }
; 282  :         }

  00408	eaffff68	 b           |$LN18@PressedRel|
  0040c		 |$LN17@PressedRel|

; 283  : }

  0040c	e28dd020	 add         sp, sp, #0x20
  00410	e89d6000	 ldmia       sp, {sp, lr}
  00414	e12fff1e	 bx          lr
  00418		 |$LN32@PressedRel|
  00418		 |$LN33@PressedRel|
  00418	00000000	 DCD         |??_C@_1DO@HFBDPGNP@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA2?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  0041c		 |$LN34@PressedRel|
  0041c	00000000	 DCD         |dpCurSettings|
  00420		 |$LN35@PressedRel|
  00420	00000000	 DCD         |??_C@_1EK@OOAHNOJF@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx@|
  00424		 |$LN36@PressedRel|
  00424	00000000	 DCD         |PressedReleasedKeys|
  00428		 |$LN37@PressedRel|
  00428	00000000	 DCD         |??_C@_1EO@OKMNCGKP@?$AA?5?$AAP?$AAr?$AAe?$AAs?$AAs?$AAe?$AAd?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AAd?$AAK?$AAe?$AAy?$AAs?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5@|
  0042c		 |$M44298|

			 ENDP  ; |PressedReleasedKeys|

	EXPORT	|??_C@_1EC@ODFKNGPJ@?$AA?9?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@HKLOGBGD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@IMFODOPK@?$AA?$CL?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|SetPowerState|

  00010			 AREA	 |.pdata|, PDATA
|$T44318| DCD	|$LN15@SetPowerSt|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@ODFKNGPJ@?$AA?9?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@HKLOGBGD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, ":", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@IMFODOPK@?$AA?$CL?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| DCB "+"
	DCB	0x0, "S", 0x0, "e", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  0042c			 AREA	 |.text|, CODE, ARM

  0042c		 |SetPowerState| PROC

; 297  : {

  0042c		 |$LN15@SetPowerSt|
  0042c	e1a0c00d	 mov         r12, sp
  00430	e92d0003	 stmdb       sp!, {r0, r1}
  00434	e92d5000	 stmdb       sp!, {r12, lr}
  00438	e24dd018	 sub         sp, sp, #0x18
  0043c		 |$M44315|

; 298  :     BOOL rc = FALSE;

  0043c	e3a03000	 mov         r3, #0
  00440	e58d3000	 str         r3, [sp]

; 299  :     
; 300  :     DEBUGMSG(ZONE_FUNCTION, (
; 301  :         L"+SetPowerState(0x%08X, 0x%08x)\r\n", pDevice, power
; 302  :         ));

  00444	e59f30f0	 ldr         r3, [pc, #0xF0]
  00448	e5933440	 ldr         r3, [r3, #0x440]
  0044c	e3130004	 tst         r3, #4
  00450	0a000006	 beq         |$LN7@SetPowerSt|
  00454	e59d2024	 ldr         r2, [sp, #0x24]
  00458	e59d1020	 ldr         r1, [sp, #0x20]
  0045c	e59f00e0	 ldr         r0, [pc, #0xE0]
  00460	eb000000	 bl          NKDbgPrintfW
  00464	e3a03001	 mov         r3, #1
  00468	e58d3008	 str         r3, [sp, #8]
  0046c	ea000001	 b           |$LN8@SetPowerSt|
  00470		 |$LN7@SetPowerSt|
  00470	e3a03000	 mov         r3, #0
  00474	e58d3008	 str         r3, [sp, #8]
  00478		 |$LN8@SetPowerSt|

; 303  : 
; 304  :     switch (power)

  00478	e59d3024	 ldr         r3, [sp, #0x24]
  0047c	e58d300c	 str         r3, [sp, #0xC]
  00480	e59d300c	 ldr         r3, [sp, #0xC]
  00484	e3530000	 cmp         r3, #0
  00488	ba000004	 blt         |$LN1@SetPowerSt|
  0048c	e59d300c	 ldr         r3, [sp, #0xC]
  00490	e3530004	 cmp         r3, #4
  00494	da000000	 ble         |$LN2@SetPowerSt|
  00498	ea000000	 b           |$LN1@SetPowerSt|
  0049c		 |$LN2@SetPowerSt|

; 305  :         {
; 306  :         case D0:
; 307  :         case D1:
; 308  :         case D2:
; 309  :         case D3:
; 310  :         case D4:
; 311  :             break;

  0049c	ea00000c	 b           |$LN3@SetPowerSt|
  004a0		 |$LN1@SetPowerSt|

; 312  : 
; 313  :         default:
; 314  :             RETAILMSG(ZONE_WARN, (L"WARN: KPD::SetPowerState: "
; 315  :                 L"Invalid power state (%d)\r\n", power
; 316  :                 ));            

  004a0	e59f3094	 ldr         r3, [pc, #0x94]
  004a4	e5933440	 ldr         r3, [r3, #0x440]
  004a8	e3130002	 tst         r3, #2
  004ac	0a000005	 beq         |$LN9@SetPowerSt|
  004b0	e59d1024	 ldr         r1, [sp, #0x24]
  004b4	e59f0084	 ldr         r0, [pc, #0x84]
  004b8	eb000000	 bl          NKDbgPrintfW
  004bc	e3a03001	 mov         r3, #1
  004c0	e58d3010	 str         r3, [sp, #0x10]
  004c4	ea000001	 b           |$LN10@SetPowerSt|
  004c8		 |$LN9@SetPowerSt|
  004c8	e3a03000	 mov         r3, #0
  004cc	e58d3010	 str         r3, [sp, #0x10]
  004d0		 |$LN10@SetPowerSt|

; 317  :             goto cleanUp;

  004d0	ea000005	 b           |$cleanUp$43791|
  004d4		 |$LN3@SetPowerSt|

; 318  :         }
; 319  : 
; 320  :     pDevice->powerState = power;

  004d4	e59d3020	 ldr         r3, [sp, #0x20]
  004d8	e2832030	 add         r2, r3, #0x30
  004dc	e59d3024	 ldr         r3, [sp, #0x24]
  004e0	e5823000	 str         r3, [r2]

; 321  : 
; 322  :     rc = TRUE;

  004e4	e3a03001	 mov         r3, #1
  004e8	e58d3000	 str         r3, [sp]
  004ec		 |$cleanUp$43791|

; 323  :     
; 324  : cleanUp:
; 325  :     DEBUGMSG(ZONE_FUNCTION, (
; 326  :         L"-SetPowerState(0x%08X, 0x%08x)\r\n", pDevice, power
; 327  :         ));

  004ec	e59f3048	 ldr         r3, [pc, #0x48]
  004f0	e5933440	 ldr         r3, [r3, #0x440]
  004f4	e3130004	 tst         r3, #4
  004f8	0a000006	 beq         |$LN11@SetPowerSt|
  004fc	e59d2024	 ldr         r2, [sp, #0x24]
  00500	e59d1020	 ldr         r1, [sp, #0x20]
  00504	e59f002c	 ldr         r0, [pc, #0x2C]
  00508	eb000000	 bl          NKDbgPrintfW
  0050c	e3a03001	 mov         r3, #1
  00510	e58d3014	 str         r3, [sp, #0x14]
  00514	ea000001	 b           |$LN12@SetPowerSt|
  00518		 |$LN11@SetPowerSt|
  00518	e3a03000	 mov         r3, #0
  0051c	e58d3014	 str         r3, [sp, #0x14]
  00520		 |$LN12@SetPowerSt|

; 328  :         
; 329  :     return rc;

  00520	e59d3000	 ldr         r3, [sp]
  00524	e58d3004	 str         r3, [sp, #4]

; 330  : }

  00528	e59d0004	 ldr         r0, [sp, #4]
  0052c	e28dd018	 add         sp, sp, #0x18
  00530	e89d6000	 ldmia       sp, {sp, lr}
  00534	e12fff1e	 bx          lr
  00538		 |$LN16@SetPowerSt|
  00538		 |$LN17@SetPowerSt|
  00538	00000000	 DCD         |??_C@_1EC@ODFKNGPJ@?$AA?9?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@|
  0053c		 |$LN18@SetPowerSt|
  0053c	00000000	 DCD         |dpCurSettings|
  00540		 |$LN19@SetPowerSt|
  00540	00000000	 DCD         |??_C@_1GK@HKLOGBGD@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA?3?$AA?3?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi@|
  00544		 |$LN20@SetPowerSt|
  00544	00000000	 DCD         |??_C@_1EC@IMFODOPK@?$AA?$CL?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@|
  00548		 |$M44316|

			 ENDP  ; |SetPowerState|

	EXPORT	|??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KPD_Deinit|
	EXPORT	|??_C@_1HA@DMKMDEBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@| [ DATA ] ; `string'
	EXPORT	|KPD_LightThread|
	EXPORT	|??_C@_1GG@OLEPONEG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@DPOBCHFM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAk@| [ DATA ] ; `string'
	EXPORT	|KPD_IntrThread|
	EXPORT	|??_C@_1IC@DJCOBBPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAs?$AAs?$AAo?$AAc?$AAi?$AAa?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@OGEIAHHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAk@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@BNIEGKOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAT?$AAW?$AAL@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KPD_Init|
	IMPORT	|CreateThread|
	IMPORT	|TWLWakeEnable|
	IMPORT	|TWLInterruptMask|
	IMPORT	|TWLInterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|TWLWriteRegs|
	IMPORT	|TWLOpen|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|memset|
	IMPORT	|LocalAlloc|

  00018			 AREA	 |.pdata|, PDATA
|$T44355| DCD	|$LN39@KPD_Init|
	DCD	0x40015c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@DMKMDEBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, "p", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "l", 0x0, "i"
	DCB	0x0, "g", 0x0, "h", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@OLEPONEG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, "p", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@DPOBCHFM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAk@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "k", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@DJCOBBPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAs?$AAs?$AAo?$AAc?$AAi?$AAa?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "s", 0x0, "s", 0x0, "o", 0x0, "c", 0x0, "i", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t"
	DCB	0x0, "h", 0x0, " ", 0x0, "T", 0x0, "W", 0x0, "L", 0x0, " "
	DCB	0x0, "K", 0x0, "B", 0x0, "D", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@OGEIAHHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAk@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "k", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "e"
	DCB	0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@BNIEGKOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAT?$AAW?$AAL@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "T", 0x0, "W"
	DCB	0x0, "L", 0x0, " ", 0x0, "b", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "K", 0x0, "P"
	DCB	0x0, "D", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "K", 0x0, "D", 0x0, "P", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00548			 AREA	 |.text|, CODE, ARM

  00548		 |KPD_Init| PROC

; 343  : {

  00548		 |$LN39@KPD_Init|
  00548	e1a0c00d	 mov         r12, sp
  0054c	e92d0003	 stmdb       sp!, {r0, r1}
  00550	e92d5000	 stmdb       sp!, {r12, lr}
  00554	e24dd078	 sub         sp, sp, #0x78
  00558		 |$M44352|

; 344  :     DWORD rc = (DWORD)NULL;

  00558	e3a03000	 mov         r3, #0
  0055c	e58d300c	 str         r3, [sp, #0xC]

; 345  :     KeypadDevice_t *pDevice = NULL;

  00560	e3a03000	 mov         r3, #0
  00564	e58d3008	 str         r3, [sp, #8]

; 346  :     UINT8 regval;
; 347  : 
; 348  :     UNREFERENCED_PARAMETER(pBusContext);
; 349  : 
; 350  :     DEBUGMSG(ZONE_FUNCTION, (
; 351  :         L"+KPD_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 352  :         ));

  00568	e59f3510	 ldr         r3, [pc, #0x510]
  0056c	e5933440	 ldr         r3, [r3, #0x440]
  00570	e3130004	 tst         r3, #4
  00574	0a000006	 beq         |$LN15@KPD_Init|
  00578	e59d2084	 ldr         r2, [sp, #0x84]
  0057c	e59d1080	 ldr         r1, [sp, #0x80]
  00580	e59f052c	 ldr         r0, [pc, #0x52C]
  00584	eb000000	 bl          NKDbgPrintfW
  00588	e3a03001	 mov         r3, #1
  0058c	e58d3028	 str         r3, [sp, #0x28]
  00590	ea000001	 b           |$LN16@KPD_Init|
  00594		 |$LN15@KPD_Init|
  00594	e3a03000	 mov         r3, #0
  00598	e58d3028	 str         r3, [sp, #0x28]
  0059c		 |$LN16@KPD_Init|

; 353  : 
; 354  :     // Create device structure
; 355  :     pDevice = (KeypadDevice_t *)LocalAlloc(LPTR, sizeof(KeypadDevice_t));

  0059c	e3a0104c	 mov         r1, #0x4C
  005a0	e3a00040	 mov         r0, #0x40
  005a4	eb000000	 bl          LocalAlloc
  005a8	e58d002c	 str         r0, [sp, #0x2C]
  005ac	e59d302c	 ldr         r3, [sp, #0x2C]
  005b0	e58d3008	 str         r3, [sp, #8]

; 356  :     if (pDevice == NULL)

  005b4	e59d3008	 ldr         r3, [sp, #8]
  005b8	e3530000	 cmp         r3, #0
  005bc	1a00000b	 bne         |$LN12@KPD_Init|

; 357  :         {
; 358  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 359  :             L"Failed allocate KDP driver structure\r\n"
; 360  :             ));

  005c0	e59f34b8	 ldr         r3, [pc, #0x4B8]
  005c4	e5933440	 ldr         r3, [r3, #0x440]
  005c8	e3130001	 tst         r3, #1
  005cc	0a000004	 beq         |$LN17@KPD_Init|
  005d0	e59f04d8	 ldr         r0, [pc, #0x4D8]
  005d4	eb000000	 bl          NKDbgPrintfW
  005d8	e3a03001	 mov         r3, #1
  005dc	e58d3030	 str         r3, [sp, #0x30]
  005e0	ea000001	 b           |$LN18@KPD_Init|
  005e4		 |$LN17@KPD_Init|
  005e4	e3a03000	 mov         r3, #0
  005e8	e58d3030	 str         r3, [sp, #0x30]
  005ec		 |$LN18@KPD_Init|

; 361  :         goto cleanUp;

  005ec	ea00010b	 b           |$cleanUp$43814|
  005f0		 |$LN12@KPD_Init|

; 362  :         }
; 363  : 
; 364  :     memset(pDevice, 0, sizeof(KeypadDevice_t));

  005f0	e3a0204c	 mov         r2, #0x4C
  005f4	e3a01000	 mov         r1, #0
  005f8	e59d0008	 ldr         r0, [sp, #8]
  005fc	eb000000	 bl          memset

; 365  : 
; 366  :     // Set cookie & initialize critical section
; 367  :     pDevice->cookie = KPD_DEVICE_COOKIE;

  00600	e59d2008	 ldr         r2, [sp, #8]
  00604	e59f34a0	 ldr         r3, [pc, #0x4A0]
  00608	e5823000	 str         r3, [r2]

; 368  :     
; 369  :     // Read device parameters
; 370  :     if (GetDeviceRegistryParams(
; 371  :             szContext, pDevice, dimof(s_deviceRegParams), s_deviceRegParams)
; 372  :             != ERROR_SUCCESS)

  0060c	e59f3494	 ldr         r3, [pc, #0x494]
  00610	e3a0200b	 mov         r2, #0xB
  00614	e59d1008	 ldr         r1, [sp, #8]
  00618	e59d0080	 ldr         r0, [sp, #0x80]
  0061c	eb000000	 bl          GetDeviceRegistryParams
  00620	e58d0034	 str         r0, [sp, #0x34]
  00624	e59d3034	 ldr         r3, [sp, #0x34]
  00628	e3530000	 cmp         r3, #0
  0062c	0a00000b	 beq         |$LN11@KPD_Init|

; 373  :         {
; 374  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 375  :             L"Failed read KPD driver registry parameters\r\n"
; 376  :             ));

  00630	e59f3448	 ldr         r3, [pc, #0x448]
  00634	e5933440	 ldr         r3, [r3, #0x440]
  00638	e3130001	 tst         r3, #1
  0063c	0a000004	 beq         |$LN19@KPD_Init|
  00640	e59f045c	 ldr         r0, [pc, #0x45C]
  00644	eb000000	 bl          NKDbgPrintfW
  00648	e3a03001	 mov         r3, #1
  0064c	e58d3038	 str         r3, [sp, #0x38]
  00650	ea000001	 b           |$LN20@KPD_Init|
  00654		 |$LN19@KPD_Init|
  00654	e3a03000	 mov         r3, #0
  00658	e58d3038	 str         r3, [sp, #0x38]
  0065c		 |$LN20@KPD_Init|

; 377  :         goto cleanUp;

  0065c	ea0000ef	 b           |$cleanUp$43814|
  00660		 |$LN11@KPD_Init|

; 378  :         }
; 379  : 
; 380  :     // Open parent bus
; 381  :     pDevice->hTWL = TWLOpen();

  00660	eb000000	 bl          TWLOpen
  00664	e58d003c	 str         r0, [sp, #0x3C]
  00668	e59d3008	 ldr         r3, [sp, #8]
  0066c	e2832034	 add         r2, r3, #0x34
  00670	e59d303c	 ldr         r3, [sp, #0x3C]
  00674	e5823000	 str         r3, [r2]

; 382  :     if (pDevice->hTWL == NULL)

  00678	e59d3008	 ldr         r3, [sp, #8]
  0067c	e2833034	 add         r3, r3, #0x34
  00680	e5933000	 ldr         r3, [r3]
  00684	e3530000	 cmp         r3, #0
  00688	1a00000b	 bne         |$LN10@KPD_Init|

; 383  :         {
; 384  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 385  :             L"Failed open TWL bus driver\r\n"
; 386  :             ));

  0068c	e59f33ec	 ldr         r3, [pc, #0x3EC]
  00690	e5933440	 ldr         r3, [r3, #0x440]
  00694	e3130001	 tst         r3, #1
  00698	0a000004	 beq         |$LN21@KPD_Init|
  0069c	e59f03fc	 ldr         r0, [pc, #0x3FC]
  006a0	eb000000	 bl          NKDbgPrintfW
  006a4	e3a03001	 mov         r3, #1
  006a8	e58d3040	 str         r3, [sp, #0x40]
  006ac	ea000001	 b           |$LN22@KPD_Init|
  006b0		 |$LN21@KPD_Init|
  006b0	e3a03000	 mov         r3, #0
  006b4	e58d3040	 str         r3, [sp, #0x40]
  006b8		 |$LN22@KPD_Init|

; 387  :         goto cleanUp;

  006b8	ea0000d8	 b           |$cleanUp$43814|
  006bc		 |$LN10@KPD_Init|

; 388  :         }
; 389  : 
; 390  :     // Set debounce delay and enable hardware mode
; 391  :     regval = TWL_KBD_CTRL_KBD_ON | TWL_KBD_CTRL_NRESET | TWL_KBD_CTRL_NSOFT_MODE;

  006bc	e3a03043	 mov         r3, #0x43
  006c0	e5cd3010	 strb        r3, [sp, #0x10]

; 392  :     TWLWriteRegs(pDevice->hTWL, TWL_KEYP_CTRL_REG, &regval, sizeof(regval));

  006c4	e3a03001	 mov         r3, #1
  006c8	e28d2010	 add         r2, sp, #0x10
  006cc	e3a01802	 mov         r1, #2, 16
  006d0	e38110d2	 orr         r1, r1, #0xD2
  006d4	e59d0008	 ldr         r0, [sp, #8]
  006d8	e2800034	 add         r0, r0, #0x34
  006dc	e5900000	 ldr         r0, [r0]
  006e0	eb000000	 bl          TWLWriteRegs

; 393  :     regval = 0x07 << 5;

  006e4	e3a030e0	 mov         r3, #0xE0
  006e8	e5cd3010	 strb        r3, [sp, #0x10]

; 394  :     TWLWriteRegs(pDevice->hTWL, TWL_LK_PTV_REG, &regval, sizeof(regval));

  006ec	e3a03001	 mov         r3, #1
  006f0	e28d2010	 add         r2, sp, #0x10
  006f4	e3a01802	 mov         r1, #2, 16
  006f8	e38110d5	 orr         r1, r1, #0xD5
  006fc	e59d0008	 ldr         r0, [sp, #8]
  00700	e2800034	 add         r0, r0, #0x34
  00704	e5900000	 ldr         r0, [r0]
  00708	eb000000	 bl          TWLWriteRegs

; 395  :     regval = (UINT8)pDevice->debounceCount & 0x3F;

  0070c	e59d3008	 ldr         r3, [sp, #8]
  00710	e2833010	 add         r3, r3, #0x10
  00714	e5933000	 ldr         r3, [r3]
  00718	e20330ff	 and         r3, r3, #0xFF
  0071c	e203303f	 and         r3, r3, #0x3F
  00720	e20330ff	 and         r3, r3, #0xFF
  00724	e5cd3010	 strb        r3, [sp, #0x10]

; 396  :     TWLWriteRegs(pDevice->hTWL, TWL_KEY_DEB_REG, &regval, sizeof(regval));

  00728	e3a03001	 mov         r3, #1
  0072c	e28d2010	 add         r2, sp, #0x10
  00730	e3a01802	 mov         r1, #2, 16
  00734	e38110d3	 orr         r1, r1, #0xD3
  00738	e59d0008	 ldr         r0, [sp, #8]
  0073c	e2800034	 add         r0, r0, #0x34
  00740	e5900000	 ldr         r0, [r0]
  00744	eb000000	 bl          TWLWriteRegs

; 397  :   
; 398  :     // Create interrupt event
; 399  :     pDevice->hIntrEventKeypad = CreateEvent(NULL, FALSE, FALSE, NULL);

  00748	e3a03000	 mov         r3, #0
  0074c	e3a02000	 mov         r2, #0
  00750	e3a01000	 mov         r1, #0
  00754	e3a00000	 mov         r0, #0
  00758	eb000000	 bl          CreateEventW
  0075c	e58d0044	 str         r0, [sp, #0x44]
  00760	e59d3008	 ldr         r3, [sp, #8]
  00764	e2832020	 add         r2, r3, #0x20
  00768	e59d3044	 ldr         r3, [sp, #0x44]
  0076c	e5823000	 str         r3, [r2]

; 400  :     if (pDevice->hIntrEventKeypad == NULL)

  00770	e59d3008	 ldr         r3, [sp, #8]
  00774	e2833020	 add         r3, r3, #0x20
  00778	e5933000	 ldr         r3, [r3]
  0077c	e3530000	 cmp         r3, #0
  00780	1a00000b	 bne         |$LN9@KPD_Init|

; 401  :         {
; 402  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 403  :             L"Failed create keypad interrupt event\r\n"
; 404  :             ));

  00784	e59f32f4	 ldr         r3, [pc, #0x2F4]
  00788	e5933440	 ldr         r3, [r3, #0x440]
  0078c	e3130001	 tst         r3, #1
  00790	0a000004	 beq         |$LN23@KPD_Init|
  00794	e59f0300	 ldr         r0, [pc, #0x300]
  00798	eb000000	 bl          NKDbgPrintfW
  0079c	e3a03001	 mov         r3, #1
  007a0	e58d3048	 str         r3, [sp, #0x48]
  007a4	ea000001	 b           |$LN24@KPD_Init|
  007a8		 |$LN23@KPD_Init|
  007a8	e3a03000	 mov         r3, #0
  007ac	e58d3048	 str         r3, [sp, #0x48]
  007b0		 |$LN24@KPD_Init|

; 405  :         goto cleanUp;

  007b0	ea00009a	 b           |$cleanUp$43814|
  007b4		 |$LN9@KPD_Init|

; 406  :         }
; 407  : 
; 408  :     // Associate event with TWL KP interrupt
; 409  :     if (!TWLInterruptInitialize(pDevice->hTWL, TWL_INTR_ITKPI, pDevice->hIntrEventKeypad))

  007b4	e59d3008	 ldr         r3, [sp, #8]
  007b8	e2833020	 add         r3, r3, #0x20
  007bc	e5932000	 ldr         r2, [r3]
  007c0	e3a01a01	 mov         r1, #1, 20
  007c4	e381102a	 orr         r1, r1, #0x2A
  007c8	e59d3008	 ldr         r3, [sp, #8]
  007cc	e2833034	 add         r3, r3, #0x34
  007d0	e5930000	 ldr         r0, [r3]
  007d4	eb000000	 bl          TWLInterruptInitialize
  007d8	e58d004c	 str         r0, [sp, #0x4C]
  007dc	e59d304c	 ldr         r3, [sp, #0x4C]
  007e0	e3530000	 cmp         r3, #0
  007e4	1a00000b	 bne         |$LN8@KPD_Init|

; 410  :         {
; 411  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Init: "
; 412  :             L"Failed associate event with TWL KBD interrupt\r\n"
; 413  :             ));

  007e8	e59f3290	 ldr         r3, [pc, #0x290]
  007ec	e5933440	 ldr         r3, [r3, #0x440]
  007f0	e3130001	 tst         r3, #1
  007f4	0a000004	 beq         |$LN25@KPD_Init|
  007f8	e59f0298	 ldr         r0, [pc, #0x298]
  007fc	eb000000	 bl          NKDbgPrintfW
  00800	e3a03001	 mov         r3, #1
  00804	e58d3050	 str         r3, [sp, #0x50]
  00808	ea000001	 b           |$LN26@KPD_Init|
  0080c		 |$LN25@KPD_Init|
  0080c	e3a03000	 mov         r3, #0
  00810	e58d3050	 str         r3, [sp, #0x50]
  00814		 |$LN26@KPD_Init|

; 414  :         goto cleanUp;

  00814	ea000081	 b           |$cleanUp$43814|
  00818		 |$LN8@KPD_Init|

; 415  :         }
; 416  : 
; 417  :     // Enable KP event
; 418  :     if (!TWLInterruptMask(pDevice->hTWL, TWL_INTR_ITKPI, FALSE))

  00818	e3a02000	 mov         r2, #0
  0081c	e3a01a01	 mov         r1, #1, 20
  00820	e381102a	 orr         r1, r1, #0x2A
  00824	e59d3008	 ldr         r3, [sp, #8]
  00828	e2833034	 add         r3, r3, #0x34
  0082c	e5930000	 ldr         r0, [r3]
  00830	eb000000	 bl          TWLInterruptMask
  00834	e58d0054	 str         r0, [sp, #0x54]
  00838	e59d3054	 ldr         r3, [sp, #0x54]
  0083c	e3530000	 cmp         r3, #0
  00840	1a00000a	 bne         |$LN7@KPD_Init|

; 419  :         {
; 420  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Init: "
; 421  :             L"Failed associate event with TWL KBD interrupt\r\n"
; 422  :             ));

  00844	e59f3234	 ldr         r3, [pc, #0x234]
  00848	e5933440	 ldr         r3, [r3, #0x440]
  0084c	e3130001	 tst         r3, #1
  00850	0a000004	 beq         |$LN27@KPD_Init|
  00854	e59f023c	 ldr         r0, [pc, #0x23C]
  00858	eb000000	 bl          NKDbgPrintfW
  0085c	e3a03001	 mov         r3, #1
  00860	e58d3058	 str         r3, [sp, #0x58]
  00864	ea000001	 b           |$LN28@KPD_Init|
  00868		 |$LN27@KPD_Init|
  00868	e3a03000	 mov         r3, #0
  0086c	e58d3058	 str         r3, [sp, #0x58]
  00870		 |$LN28@KPD_Init|
  00870		 |$LN7@KPD_Init|

; 423  :         }
; 424  :         
; 425  :     // register to be wake-up enabled
; 426  :     if (pDevice->enableWake != 0)

  00870	e59d3008	 ldr         r3, [sp, #8]
  00874	e2833008	 add         r3, r3, #8
  00878	e5933000	 ldr         r3, [r3]
  0087c	e3530000	 cmp         r3, #0
  00880	0a000006	 beq         |$LN6@KPD_Init|

; 427  :         {
; 428  :         TWLWakeEnable(pDevice->hTWL, TWL_INTR_ITKPI, TRUE);

  00884	e3a02001	 mov         r2, #1
  00888	e3a01a01	 mov         r1, #1, 20
  0088c	e381102a	 orr         r1, r1, #0x2A
  00890	e59d3008	 ldr         r3, [sp, #8]
  00894	e2833034	 add         r3, r3, #0x34
  00898	e5930000	 ldr         r0, [r3]
  0089c	eb000000	 bl          TWLWakeEnable
  008a0		 |$LN6@KPD_Init|

; 429  :         }
; 430  : 
; 431  :     // Start keypad interrupt service thread
; 432  :     pDevice->hIntrThreadKeypad = CreateThread(
; 433  :         NULL, 0, KPD_IntrThread, pDevice, 0,NULL
; 434  :         );

  008a0	e3a03000	 mov         r3, #0
  008a4	e58d3004	 str         r3, [sp, #4]
  008a8	e3a03000	 mov         r3, #0
  008ac	e58d3000	 str         r3, [sp]
  008b0	e59d3008	 ldr         r3, [sp, #8]
  008b4	e59f21d8	 ldr         r2, [pc, #0x1D8]
  008b8	e3a01000	 mov         r1, #0
  008bc	e3a00000	 mov         r0, #0
  008c0	eb000000	 bl          CreateThread
  008c4	e58d005c	 str         r0, [sp, #0x5C]
  008c8	e59d3008	 ldr         r3, [sp, #8]
  008cc	e2832024	 add         r2, r3, #0x24
  008d0	e59d305c	 ldr         r3, [sp, #0x5C]
  008d4	e5823000	 str         r3, [r2]

; 435  :     if (!pDevice->hIntrThreadKeypad)

  008d8	e59d3008	 ldr         r3, [sp, #8]
  008dc	e2833024	 add         r3, r3, #0x24
  008e0	e5933000	 ldr         r3, [r3]
  008e4	e3530000	 cmp         r3, #0
  008e8	1a00000b	 bne         |$LN5@KPD_Init|

; 436  :         {
; 437  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Init: "
; 438  :             L"Failed create keypad interrupt thread\r\n"
; 439  :             ));

  008ec	e59f318c	 ldr         r3, [pc, #0x18C]
  008f0	e5933440	 ldr         r3, [r3, #0x440]
  008f4	e3130001	 tst         r3, #1
  008f8	0a000004	 beq         |$LN29@KPD_Init|
  008fc	e59f018c	 ldr         r0, [pc, #0x18C]
  00900	eb000000	 bl          NKDbgPrintfW
  00904	e3a03001	 mov         r3, #1
  00908	e58d3060	 str         r3, [sp, #0x60]
  0090c	ea000001	 b           |$LN30@KPD_Init|
  00910		 |$LN29@KPD_Init|
  00910	e3a03000	 mov         r3, #0
  00914	e58d3060	 str         r3, [sp, #0x60]
  00918		 |$LN30@KPD_Init|

; 440  :         goto cleanUp;

  00918	ea000040	 b           |$cleanUp$43814|
  0091c		 |$LN5@KPD_Init|

; 441  :         }
; 442  : 
; 443  :     if( pDevice->KpLedNum != -1)

  0091c	e59d3008	 ldr         r3, [sp, #8]
  00920	e2833044	 add         r3, r3, #0x44
  00924	e5933000	 ldr         r3, [r3]
  00928	e3730001	 cmn         r3, #1
  0092c	0a000039	 beq         |$LN4@KPD_Init|

; 444  :         {
; 445  :         // Create keypress notification event
; 446  :         pDevice->hKeypressEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00930	e3a03000	 mov         r3, #0
  00934	e3a02000	 mov         r2, #0
  00938	e3a01000	 mov         r1, #0
  0093c	e3a00000	 mov         r0, #0
  00940	eb000000	 bl          CreateEventW
  00944	e58d0064	 str         r0, [sp, #0x64]
  00948	e59d3008	 ldr         r3, [sp, #8]
  0094c	e283203c	 add         r2, r3, #0x3C
  00950	e59d3064	 ldr         r3, [sp, #0x64]
  00954	e5823000	 str         r3, [r2]

; 447  :         if ( pDevice->hKeypressEvent == NULL )

  00958	e59d3008	 ldr         r3, [sp, #8]
  0095c	e283303c	 add         r3, r3, #0x3C
  00960	e5933000	 ldr         r3, [r3]
  00964	e3530000	 cmp         r3, #0
  00968	1a00000b	 bne         |$LN3@KPD_Init|

; 448  :             {
; 449  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Init: "
; 450  :                 L"Failed to create keypress event\r\n"
; 451  :                 ));

  0096c	e59f310c	 ldr         r3, [pc, #0x10C]
  00970	e5933440	 ldr         r3, [r3, #0x440]
  00974	e3130001	 tst         r3, #1
  00978	0a000004	 beq         |$LN31@KPD_Init|
  0097c	e59f0108	 ldr         r0, [pc, #0x108]
  00980	eb000000	 bl          NKDbgPrintfW
  00984	e3a03001	 mov         r3, #1
  00988	e58d3068	 str         r3, [sp, #0x68]
  0098c	ea000001	 b           |$LN32@KPD_Init|
  00990		 |$LN31@KPD_Init|
  00990	e3a03000	 mov         r3, #0
  00994	e58d3068	 str         r3, [sp, #0x68]
  00998		 |$LN32@KPD_Init|

; 452  :             goto cleanUp;

  00998	ea000020	 b           |$cleanUp$43814|
  0099c		 |$LN3@KPD_Init|

; 453  :             }
; 454  :     
; 455  :         // Start interrupt service thread
; 456  :         pDevice->hLightThread = CreateThread(
; 457  :             NULL, 0, KPD_LightThread, pDevice, 0,NULL
; 458  :             );

  0099c	e3a03000	 mov         r3, #0
  009a0	e58d3004	 str         r3, [sp, #4]
  009a4	e3a03000	 mov         r3, #0
  009a8	e58d3000	 str         r3, [sp]
  009ac	e59d3008	 ldr         r3, [sp, #8]
  009b0	e59f20d0	 ldr         r2, [pc, #0xD0]
  009b4	e3a01000	 mov         r1, #0
  009b8	e3a00000	 mov         r0, #0
  009bc	eb000000	 bl          CreateThread
  009c0	e58d006c	 str         r0, [sp, #0x6C]
  009c4	e59d3008	 ldr         r3, [sp, #8]
  009c8	e2832038	 add         r2, r3, #0x38
  009cc	e59d306c	 ldr         r3, [sp, #0x6C]
  009d0	e5823000	 str         r3, [r2]

; 459  :         if (!pDevice->hLightThread)

  009d4	e59d3008	 ldr         r3, [sp, #8]
  009d8	e2833038	 add         r3, r3, #0x38
  009dc	e5933000	 ldr         r3, [r3]
  009e0	e3530000	 cmp         r3, #0
  009e4	1a00000b	 bne         |$LN2@KPD_Init|

; 460  :         {
; 461  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Init: "
; 462  :                 L"Failed to create keypad light thread\r\n"
; 463  :                 ));

  009e8	e59f3090	 ldr         r3, [pc, #0x90]
  009ec	e5933440	 ldr         r3, [r3, #0x440]
  009f0	e3130001	 tst         r3, #1
  009f4	0a000004	 beq         |$LN33@KPD_Init|
  009f8	e59f0084	 ldr         r0, [pc, #0x84]
  009fc	eb000000	 bl          NKDbgPrintfW
  00a00	e3a03001	 mov         r3, #1
  00a04	e58d3070	 str         r3, [sp, #0x70]
  00a08	ea000001	 b           |$LN34@KPD_Init|
  00a0c		 |$LN33@KPD_Init|
  00a0c	e3a03000	 mov         r3, #0
  00a10	e58d3070	 str         r3, [sp, #0x70]
  00a14		 |$LN34@KPD_Init|

; 464  :             goto cleanUp;

  00a14	ea000001	 b           |$cleanUp$43814|
  00a18		 |$LN2@KPD_Init|
  00a18		 |$LN4@KPD_Init|

; 465  :             }
; 466  :         }
; 467  : 
; 468  :     // Return non-null value
; 469  :     rc = (DWORD)pDevice;

  00a18	e59d3008	 ldr         r3, [sp, #8]
  00a1c	e58d300c	 str         r3, [sp, #0xC]
  00a20		 |$cleanUp$43814|

; 470  : 
; 471  : cleanUp:
; 472  :     if (rc == 0)

  00a20	e59d300c	 ldr         r3, [sp, #0xC]
  00a24	e3530000	 cmp         r3, #0
  00a28	1a000001	 bne         |$LN1@KPD_Init|

; 473  :         {
; 474  :         KPD_Deinit((DWORD)pDevice);

  00a2c	e59d0008	 ldr         r0, [sp, #8]
  00a30	eb000000	 bl          KPD_Deinit
  00a34		 |$LN1@KPD_Init|

; 475  :         }
; 476  :     DEBUGMSG(ZONE_FUNCTION, (L"-KPD_Init(rc = %d\r\n", rc));

  00a34	e59f3044	 ldr         r3, [pc, #0x44]
  00a38	e5933440	 ldr         r3, [r3, #0x440]
  00a3c	e3130004	 tst         r3, #4
  00a40	0a000005	 beq         |$LN35@KPD_Init|
  00a44	e59d100c	 ldr         r1, [sp, #0xC]
  00a48	e59f002c	 ldr         r0, [pc, #0x2C]
  00a4c	eb000000	 bl          NKDbgPrintfW
  00a50	e3a03001	 mov         r3, #1
  00a54	e58d3074	 str         r3, [sp, #0x74]
  00a58	ea000001	 b           |$LN36@KPD_Init|
  00a5c		 |$LN35@KPD_Init|
  00a5c	e3a03000	 mov         r3, #0
  00a60	e58d3074	 str         r3, [sp, #0x74]
  00a64		 |$LN36@KPD_Init|

; 477  :     return rc;

  00a64	e59d300c	 ldr         r3, [sp, #0xC]
  00a68	e58d3024	 str         r3, [sp, #0x24]

; 478  : }

  00a6c	e59d0024	 ldr         r0, [sp, #0x24]
  00a70	e28dd078	 add         sp, sp, #0x78
  00a74	e89d6000	 ldmia       sp, {sp, lr}
  00a78	e12fff1e	 bx          lr
  00a7c		 |$LN40@KPD_Init|
  00a7c		 |$LN41@KPD_Init|
  00a7c	00000000	 DCD         |??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00a80		 |$LN42@KPD_Init|
  00a80	00000000	 DCD         |dpCurSettings|
  00a84		 |$LN43@KPD_Init|
  00a84	00000000	 DCD         |??_C@_1HA@DMKMDEBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@|
  00a88		 |$LN44@KPD_Init|
  00a88	00000000	 DCD         |KPD_LightThread|
  00a8c		 |$LN45@KPD_Init|
  00a8c	00000000	 DCD         |??_C@_1GG@OLEPONEG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@|
  00a90		 |$LN46@KPD_Init|
  00a90	00000000	 DCD         |??_C@_1HC@DPOBCHFM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAk@|
  00a94		 |$LN47@KPD_Init|
  00a94	00000000	 DCD         |KPD_IntrThread|
  00a98		 |$LN48@KPD_Init|
  00a98	00000000	 DCD         |??_C@_1IC@DJCOBBPN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAs?$AAs?$AAo?$AAc?$AAi?$AAa?$AAt@|
  00a9c		 |$LN49@KPD_Init|
  00a9c	00000000	 DCD         |??_C@_1HA@OGEIAHHP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAk@|
  00aa0		 |$LN50@KPD_Init|
  00aa0	00000000	 DCD         |??_C@_1FM@BNIEGKOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAT?$AAW?$AAL@|
  00aa4		 |$LN51@KPD_Init|
  00aa4	00000000	 DCD         |??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@|
  00aa8		 |$LN52@KPD_Init|
  00aa8	00000000	 DCD         |s_deviceRegParams|
  00aac		 |$LN53@KPD_Init|
  00aac	6b706444	 DCD         0x6b706444
  00ab0		 |$LN54@KPD_Init|
  00ab0	00000000	 DCD         |??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00ab4		 |$LN55@KPD_Init|
  00ab4	00000000	 DCD         |??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00ab8		 |$M44353|

			 ENDP  ; |KPD_Init|

	EXPORT	|??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|TWLClose|
	IMPORT	|TWLInterruptDisable|
	IMPORT	|CloseHandle|
	IMPORT	|WaitForSingleObject|

  00020			 AREA	 |.pdata|, PDATA
|$T44383| DCD	|$LN19@KPD_Deinit|
	DCD	0x40009804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00ab8			 AREA	 |.text|, CODE, ARM

  00ab8		 |KPD_Deinit| PROC

; 490  : {

  00ab8		 |$LN19@KPD_Deinit|
  00ab8	e1a0c00d	 mov         r12, sp
  00abc	e92d0001	 stmdb       sp!, {r0}
  00ac0	e92d5000	 stmdb       sp!, {r12, lr}
  00ac4	e24dd018	 sub         sp, sp, #0x18
  00ac8		 |$M44380|

; 491  :     BOOL rc = FALSE;

  00ac8	e3a03000	 mov         r3, #0
  00acc	e58d3004	 str         r3, [sp, #4]

; 492  :     KeypadDevice_t *pDevice = (KeypadDevice_t*)context;

  00ad0	e59d3020	 ldr         r3, [sp, #0x20]
  00ad4	e58d3000	 str         r3, [sp]

; 493  : 
; 494  : 
; 495  :     DEBUGMSG(ZONE_FUNCTION, (L"+KPD_Deinit(0x%08x)\r\n", context));

  00ad8	e59f3228	 ldr         r3, [pc, #0x228]
  00adc	e5933440	 ldr         r3, [r3, #0x440]
  00ae0	e3130004	 tst         r3, #4
  00ae4	0a000005	 beq         |$LN11@KPD_Deinit|
  00ae8	e59d1020	 ldr         r1, [sp, #0x20]
  00aec	e59f0220	 ldr         r0, [pc, #0x220]
  00af0	eb000000	 bl          NKDbgPrintfW
  00af4	e3a03001	 mov         r3, #1
  00af8	e58d300c	 str         r3, [sp, #0xC]
  00afc	ea000001	 b           |$LN12@KPD_Deinit|
  00b00		 |$LN11@KPD_Deinit|
  00b00	e3a03000	 mov         r3, #0
  00b04	e58d300c	 str         r3, [sp, #0xC]
  00b08		 |$LN12@KPD_Deinit|

; 496  : 
; 497  :     // Check if we get correct context
; 498  :     if ((pDevice == NULL) || (pDevice->cookie != KPD_DEVICE_COOKIE))

  00b08	e59d3000	 ldr         r3, [sp]
  00b0c	e3530000	 cmp         r3, #0
  00b10	0a000004	 beq         |$LN7@KPD_Deinit|
  00b14	e59d3000	 ldr         r3, [sp]
  00b18	e5932000	 ldr         r2, [r3]
  00b1c	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00b20	e1520003	 cmp         r2, r3
  00b24	0a00000b	 beq         |$LN8@KPD_Deinit|
  00b28		 |$LN7@KPD_Deinit|

; 499  :         {
; 500  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Deinit: "
; 501  :             L"Incorrect context parameter\r\n"
; 502  :             ));

  00b28	e59f31d8	 ldr         r3, [pc, #0x1D8]
  00b2c	e5933440	 ldr         r3, [r3, #0x440]
  00b30	e3130001	 tst         r3, #1
  00b34	0a000004	 beq         |$LN13@KPD_Deinit|
  00b38	e59f01cc	 ldr         r0, [pc, #0x1CC]
  00b3c	eb000000	 bl          NKDbgPrintfW
  00b40	e3a03001	 mov         r3, #1
  00b44	e58d3010	 str         r3, [sp, #0x10]
  00b48	ea000001	 b           |$LN14@KPD_Deinit|
  00b4c		 |$LN13@KPD_Deinit|
  00b4c	e3a03000	 mov         r3, #0
  00b50	e58d3010	 str         r3, [sp, #0x10]
  00b54		 |$LN14@KPD_Deinit|

; 503  :         goto cleanUp;

  00b54	ea000058	 b           |$cleanUp$43871|
  00b58		 |$LN8@KPD_Deinit|

; 504  :         }
; 505  : 
; 506  :     // Signal stop to threads
; 507  :     pDevice->intrThreadExit = TRUE;

  00b58	e59d3000	 ldr         r3, [sp]
  00b5c	e2832028	 add         r2, r3, #0x28
  00b60	e3a03001	 mov         r3, #1
  00b64	e5823000	 str         r3, [r2]

; 508  :         
; 509  :     // Close interrupt thread
; 510  :     if (pDevice->hIntrThreadKeypad != NULL)

  00b68	e59d3000	 ldr         r3, [sp]
  00b6c	e2833024	 add         r3, r3, #0x24
  00b70	e5933000	 ldr         r3, [r3]
  00b74	e3530000	 cmp         r3, #0
  00b78	0a00000c	 beq         |$LN6@KPD_Deinit|

; 511  :         {
; 512  :         // Set event to wake it
; 513  :         SetEvent(pDevice->hIntrEventKeypad);

  00b7c	e59d3000	 ldr         r3, [sp]
  00b80	e2833020	 add         r3, r3, #0x20
  00b84	e5930000	 ldr         r0, [r3]
  00b88	eb000000	 bl          SetEvent

; 514  :         // Wait until thread exits
; 515  :         WaitForSingleObject(pDevice->hIntrThreadKeypad, INFINITE);

  00b8c	e3e01000	 mvn         r1, #0
  00b90	e59d3000	 ldr         r3, [sp]
  00b94	e2833024	 add         r3, r3, #0x24
  00b98	e5930000	 ldr         r0, [r3]
  00b9c	eb000000	 bl          WaitForSingleObject

; 516  :         // Close handle
; 517  :         CloseHandle(pDevice->hIntrThreadKeypad);

  00ba0	e59d3000	 ldr         r3, [sp]
  00ba4	e2833024	 add         r3, r3, #0x24
  00ba8	e5930000	 ldr         r0, [r3]
  00bac	eb000000	 bl          CloseHandle
  00bb0		 |$LN6@KPD_Deinit|

; 518  :         }
; 519  : 
; 520  :     // Close interrupt thread
; 521  :     if( pDevice->hLightThread )

  00bb0	e59d3000	 ldr         r3, [sp]
  00bb4	e2833038	 add         r3, r3, #0x38
  00bb8	e5933000	 ldr         r3, [r3]
  00bbc	e3530000	 cmp         r3, #0
  00bc0	0a00000c	 beq         |$LN5@KPD_Deinit|

; 522  :             {
; 523  :             // Set event to wake it
; 524  :         SetEvent(pDevice->hKeypressEvent);

  00bc4	e59d3000	 ldr         r3, [sp]
  00bc8	e283303c	 add         r3, r3, #0x3C
  00bcc	e5930000	 ldr         r0, [r3]
  00bd0	eb000000	 bl          SetEvent

; 525  :             // Wait until thread exits
; 526  :         WaitForSingleObject(pDevice->hLightThread, INFINITE);

  00bd4	e3e01000	 mvn         r1, #0
  00bd8	e59d3000	 ldr         r3, [sp]
  00bdc	e2833038	 add         r3, r3, #0x38
  00be0	e5930000	 ldr         r0, [r3]
  00be4	eb000000	 bl          WaitForSingleObject

; 527  :             // Close handle
; 528  :         CloseHandle(pDevice->hLightThread);

  00be8	e59d3000	 ldr         r3, [sp]
  00bec	e2833038	 add         r3, r3, #0x38
  00bf0	e5930000	 ldr         r0, [r3]
  00bf4	eb000000	 bl          CloseHandle
  00bf8		 |$LN5@KPD_Deinit|

; 529  :         }
; 530  : 
; 531  : 
; 532  :     // Close TWL driver
; 533  :     if (pDevice->hTWL != NULL)

  00bf8	e59d3000	 ldr         r3, [sp]
  00bfc	e2833034	 add         r3, r3, #0x34
  00c00	e5933000	 ldr         r3, [r3]
  00c04	e3530000	 cmp         r3, #0
  00c08	0a000015	 beq         |$LN4@KPD_Deinit|

; 534  :         {
; 535  :         TWLInterruptMask(pDevice->hTWL, TWL_INTR_ITKPI, TRUE);

  00c0c	e3a02001	 mov         r2, #1
  00c10	e3a01a01	 mov         r1, #1, 20
  00c14	e381102a	 orr         r1, r1, #0x2A
  00c18	e59d3000	 ldr         r3, [sp]
  00c1c	e2833034	 add         r3, r3, #0x34
  00c20	e5930000	 ldr         r0, [r3]
  00c24	eb000000	 bl          TWLInterruptMask

; 536  :         
; 537  :         if (pDevice->hIntrEventKeypad != NULL)

  00c28	e59d3000	 ldr         r3, [sp]
  00c2c	e2833020	 add         r3, r3, #0x20
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e3530000	 cmp         r3, #0
  00c38	0a000005	 beq         |$LN3@KPD_Deinit|

; 538  :             {
; 539  :             TWLInterruptDisable(pDevice->hTWL, TWL_INTR_ITKPI);

  00c3c	e3a01a01	 mov         r1, #1, 20
  00c40	e381102a	 orr         r1, r1, #0x2A
  00c44	e59d3000	 ldr         r3, [sp]
  00c48	e2833034	 add         r3, r3, #0x34
  00c4c	e5930000	 ldr         r0, [r3]
  00c50	eb000000	 bl          TWLInterruptDisable
  00c54		 |$LN3@KPD_Deinit|

; 540  :             }
; 541  :         
; 542  :         TWLClose(pDevice->hTWL);

  00c54	e59d3000	 ldr         r3, [sp]
  00c58	e2833034	 add         r3, r3, #0x34
  00c5c	e5930000	 ldr         r0, [r3]
  00c60	eb000000	 bl          TWLClose
  00c64		 |$LN4@KPD_Deinit|

; 543  :         }
; 544  : 
; 545  :     // Close interrupt handler
; 546  :     if (pDevice->hIntrEventKeypad != NULL) CloseHandle(pDevice->hIntrEventKeypad);

  00c64	e59d3000	 ldr         r3, [sp]
  00c68	e2833020	 add         r3, r3, #0x20
  00c6c	e5933000	 ldr         r3, [r3]
  00c70	e3530000	 cmp         r3, #0
  00c74	0a000003	 beq         |$LN2@KPD_Deinit|
  00c78	e59d3000	 ldr         r3, [sp]
  00c7c	e2833020	 add         r3, r3, #0x20
  00c80	e5930000	 ldr         r0, [r3]
  00c84	eb000000	 bl          CloseHandle
  00c88		 |$LN2@KPD_Deinit|

; 547  :     if (pDevice->hKeypressEvent != NULL) CloseHandle(pDevice->hKeypressEvent);

  00c88	e59d3000	 ldr         r3, [sp]
  00c8c	e283303c	 add         r3, r3, #0x3C
  00c90	e5933000	 ldr         r3, [r3]
  00c94	e3530000	 cmp         r3, #0
  00c98	0a000003	 beq         |$LN1@KPD_Deinit|
  00c9c	e59d3000	 ldr         r3, [sp]
  00ca0	e283303c	 add         r3, r3, #0x3C
  00ca4	e5930000	 ldr         r0, [r3]
  00ca8	eb000000	 bl          CloseHandle
  00cac		 |$LN1@KPD_Deinit|

; 548  :     // Free device structure
; 549  :     LocalFree(pDevice);

  00cac	e59d0000	 ldr         r0, [sp]
  00cb0	eb000000	 bl          LocalFree

; 550  : 
; 551  :     // Done
; 552  :     rc = TRUE;

  00cb4	e3a03001	 mov         r3, #1
  00cb8	e58d3004	 str         r3, [sp, #4]
  00cbc		 |$cleanUp$43871|

; 553  : 
; 554  : cleanUp:
; 555  :     DEBUGMSG(ZONE_FUNCTION, (L"-KPD_Deinit(rc = %d)\r\n", rc));

  00cbc	e59f3044	 ldr         r3, [pc, #0x44]
  00cc0	e5933440	 ldr         r3, [r3, #0x440]
  00cc4	e3130004	 tst         r3, #4
  00cc8	0a000005	 beq         |$LN15@KPD_Deinit|
  00ccc	e59d1004	 ldr         r1, [sp, #4]
  00cd0	e59f002c	 ldr         r0, [pc, #0x2C]
  00cd4	eb000000	 bl          NKDbgPrintfW
  00cd8	e3a03001	 mov         r3, #1
  00cdc	e58d3014	 str         r3, [sp, #0x14]
  00ce0	ea000001	 b           |$LN16@KPD_Deinit|
  00ce4		 |$LN15@KPD_Deinit|
  00ce4	e3a03000	 mov         r3, #0
  00ce8	e58d3014	 str         r3, [sp, #0x14]
  00cec		 |$LN16@KPD_Deinit|

; 556  :     return rc;

  00cec	e59d3004	 ldr         r3, [sp, #4]
  00cf0	e58d3008	 str         r3, [sp, #8]

; 557  : }

  00cf4	e59d0008	 ldr         r0, [sp, #8]
  00cf8	e28dd018	 add         sp, sp, #0x18
  00cfc	e89d6000	 ldmia       sp, {sp, lr}
  00d00	e12fff1e	 bx          lr
  00d04		 |$LN20@KPD_Deinit|
  00d04		 |$LN21@KPD_Deinit|
  00d04	00000000	 DCD         |??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00d08		 |$LN22@KPD_Deinit|
  00d08	00000000	 DCD         |dpCurSettings|
  00d0c		 |$LN23@KPD_Deinit|
  00d0c	00000000	 DCD         |??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  00d10		 |$LN24@KPD_Deinit|
  00d10	6b706444	 DCD         0x6b706444
  00d14		 |$LN25@KPD_Deinit|
  00d14	00000000	 DCD         |??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00d18		 |$M44381|

			 ENDP  ; |KPD_Deinit|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44395| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M44392|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M44393|

			 ENDP  ; |SetEvent|

	EXPORT	|KPD_Open|

  00028			 AREA	 |.pdata|, PDATA
|$T44403| DCD	|$LN5@KPD_Open|
	DCD	0x40000a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\tps659xx\keypad\keypad.c

  00d18			 AREA	 |.text|, CODE, ARM

  00d18		 |KPD_Open| PROC

; 571  : {

  00d18		 |$LN5@KPD_Open|
  00d18	e1a0c00d	 mov         r12, sp
  00d1c	e92d0007	 stmdb       sp!, {r0 - r2}
  00d20	e92d5000	 stmdb       sp!, {r12, lr}
  00d24	e24dd004	 sub         sp, sp, #4
  00d28		 |$M44400|

; 572  :     UNREFERENCED_PARAMETER(context);
; 573  :     UNREFERENCED_PARAMETER(accessCode);
; 574  :     UNREFERENCED_PARAMETER(shareMode);
; 575  :     return context;

  00d28	e59d300c	 ldr         r3, [sp, #0xC]
  00d2c	e58d3000	 str         r3, [sp]

; 576  : }

  00d30	e59d0000	 ldr         r0, [sp]
  00d34	e28dd004	 add         sp, sp, #4
  00d38	e89d6000	 ldmia       sp, {sp, lr}
  00d3c	e12fff1e	 bx          lr
  00d40		 |$M44401|

			 ENDP  ; |KPD_Open|

	EXPORT	|KPD_Close|

  00030			 AREA	 |.pdata|, PDATA
|$T44409| DCD	|$LN5@KPD_Close|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00d40			 AREA	 |.text|, CODE, ARM

  00d40		 |KPD_Close| PROC

; 588  : {

  00d40		 |$LN5@KPD_Close|
  00d40	e1a0c00d	 mov         r12, sp
  00d44	e92d0001	 stmdb       sp!, {r0}
  00d48	e92d5000	 stmdb       sp!, {r12, lr}
  00d4c	e24dd004	 sub         sp, sp, #4
  00d50		 |$M44406|

; 589  :     UNREFERENCED_PARAMETER(context);
; 590  :     return TRUE;

  00d50	e3a03001	 mov         r3, #1
  00d54	e58d3000	 str         r3, [sp]

; 591  : }

  00d58	e59d0000	 ldr         r0, [sp]
  00d5c	e28dd004	 add         sp, sp, #4
  00d60	e89d6000	 ldmia       sp, {sp, lr}
  00d64	e12fff1e	 bx          lr
  00d68		 |$M44407|

			 ENDP  ; |KPD_Close|

	EXPORT	|KPD_PowerUp|

  00038			 AREA	 |.pdata|, PDATA
|$T44414| DCD	|$LN5@KPD_PowerU|
	DCD	0x40000503
; Function compile flags: /Odtp

  00d68			 AREA	 |.text|, CODE, ARM

  00d68		 |KPD_PowerUp| PROC

; 605  : {

  00d68		 |$LN5@KPD_PowerU|
  00d68	e1a0c00d	 mov         r12, sp
  00d6c	e92d0001	 stmdb       sp!, {r0}
  00d70	e92d5000	 stmdb       sp!, {r12, lr}
  00d74		 |$M44411|

; 606  :     UNREFERENCED_PARAMETER(context);
; 607  : }

  00d74	e89d6000	 ldmia       sp, {sp, lr}
  00d78	e12fff1e	 bx          lr
  00d7c		 |$M44412|

			 ENDP  ; |KPD_PowerUp|

	EXPORT	|??_C@_1DE@FLLFNOFI@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@FGLLAMKJ@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@BHHDBCBL@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@NKFDJLND@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@ELDDCJAN@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@BIGNMEJI@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@FCMOPFEB@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@BLFHBIKN@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@HBIPLMFL@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@MFFMFLPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@OHNKFBP@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|KPD_IOControl|
	IMPORT	|__C_specific_handler|

  00040			 AREA	 |.pdata|, PDATA
|$T44489| DCD	|$LN87@KPD_IOCont|
	DCD	0xc0014a05
|$T44491| DCD	|$LN74@KPD_IOCont|
	DCD	0x40000502
|$T44493| DCD	|$LN67@KPD_IOCont|
	DCD	0x40000502
|$T44495| DCD	|$LN60@KPD_IOCont|
	DCD	0x40000502
|$T44497| DCD	|$LN53@KPD_IOCont|
	DCD	0x40001402

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@FLLFNOFI@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FGLLAMKJ@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "G", 0x0, "E"
	DCB	0x0, "T", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "D"
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@BHHDBCBL@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@NKFDJLND@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s"
	DCB	0x0, "t", 0x0, " ", 0x0, "D", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@ELDDCJAN@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "D"
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@BIGNMEJI@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@FCMOPFEB@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "P", 0x0, "O"
	DCB	0x0, "W", 0x0, "E", 0x0, "R", 0x0, "_", 0x0, "Q", 0x0, "U"
	DCB	0x0, "E", 0x0, "R", 0x0, "Y", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@BLFHBIKN@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "Q", 0x0, "U", 0x0, "E", 0x0, "R", 0x0, "Y"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "i", 0x0, "o", 0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@HBIPLMFL@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "c", 0x0, "e", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "W", 0x0, "E", 0x0, "R"
	DCB	0x0, "_", 0x0, "C", 0x0, "A", 0x0, "P", 0x0, "A", 0x0, "B"
	DCB	0x0, "I", 0x0, "L", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "E"
	DCB	0x0, "S", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@MFFMFLPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@OHNKFBP@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T44487| DCD	0x4
	DCD	|$LN78@KPD_IOCont|
	DCD	|$LN79@KPD_IOCont|
	DCD	|$LN74@KPD_IOCont|
	DCD	|$LN75@KPD_IOCont|
	DCD	|$LN71@KPD_IOCont|
	DCD	|$LN72@KPD_IOCont|
	DCD	|$LN67@KPD_IOCont|
	DCD	|$LN68@KPD_IOCont|
	DCD	|$LN64@KPD_IOCont|
	DCD	|$LN65@KPD_IOCont|
	DCD	|$LN60@KPD_IOCont|
	DCD	|$LN61@KPD_IOCont|
	DCD	|$LN57@KPD_IOCont|
	DCD	|$LN58@KPD_IOCont|
	DCD	|$LN53@KPD_IOCont|
	DCD	|$LN54@KPD_IOCont|
; Function compile flags: /Odtp

  00d7c			 AREA	 |.text|, CODE, ARM

  00d7c	00000000	 DCD         |__C_specific_handler|
  00d80	00000000	 DCD         |$T44487|

  00d84		 |KPD_IOControl| PROC

; 625  : {

  00d84		 |$LN87@KPD_IOCont|
  00d84	e1a0c00d	 mov         r12, sp
  00d88	e92d000f	 stmdb       sp!, {r0 - r3}
  00d8c	e92d5800	 stmdb       sp!, {r11, r12, lr}
  00d90	e28db00c	 add         r11, sp, #0xC
  00d94	e24dd07c	 sub         sp, sp, #0x7C
  00d98		 |$LN85@KPD_IOCont|

; 626  :     BOOL rc = FALSE;

  00d98	e3a03000	 mov         r3, #0
  00d9c	e50b3074	 str         r3, [r11, #-0x74]

; 627  :     KeypadDevice_t *pDevice = (KeypadDevice_t*)context;

  00da0	e59b3000	 ldr         r3, [r11]
  00da4	e50b3078	 str         r3, [r11, #-0x78]

; 628  : 
; 629  :     UNREFERENCED_PARAMETER(inSize);
; 630  :     UNREFERENCED_PARAMETER(pInBuffer);
; 631  : 
; 632  :     DEBUGMSG(ZONE_FUNCTION, (
; 633  :         L"+KPD_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 634  :         context, code, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 635  :         ));

  00da8	e59f3550	 ldr         r3, [pc, #0x550]
  00dac	e5933440	 ldr         r3, [r3, #0x440]
  00db0	e3130004	 tst         r3, #4
  00db4	0a00000f	 beq         |$LN22@KPD_IOCont|
  00db8	e59b3018	 ldr         r3, [r11, #0x18]
  00dbc	e58d300c	 str         r3, [sp, #0xC]
  00dc0	e59b3014	 ldr         r3, [r11, #0x14]
  00dc4	e58d3008	 str         r3, [sp, #8]
  00dc8	e59b3010	 ldr         r3, [r11, #0x10]
  00dcc	e58d3004	 str         r3, [sp, #4]
  00dd0	e59b300c	 ldr         r3, [r11, #0xC]
  00dd4	e58d3000	 str         r3, [sp]
  00dd8	e59b3008	 ldr         r3, [r11, #8]
  00ddc	e59b2004	 ldr         r2, [r11, #4]
  00de0	e59b1000	 ldr         r1, [r11]
  00de4	e59f0548	 ldr         r0, [pc, #0x548]
  00de8	eb000000	 bl          NKDbgPrintfW
  00dec	e3a03001	 mov         r3, #1
  00df0	e50b3050	 str         r3, [r11, #-0x50]
  00df4	ea000001	 b           |$LN23@KPD_IOCont|
  00df8		 |$LN22@KPD_IOCont|
  00df8	e3a03000	 mov         r3, #0
  00dfc	e50b3050	 str         r3, [r11, #-0x50]
  00e00		 |$LN23@KPD_IOCont|

; 636  :         
; 637  :     // Check if we get correct context
; 638  :     if ((pDevice == NULL) || (pDevice->cookie != KPD_DEVICE_COOKIE))

  00e00	e51b3078	 ldr         r3, [r11, #-0x78]
  00e04	e3530000	 cmp         r3, #0
  00e08	0a000004	 beq         |$LN18@KPD_IOCont|
  00e0c	e51b3078	 ldr         r3, [r11, #-0x78]
  00e10	e5932000	 ldr         r2, [r3]
  00e14	e59f3514	 ldr         r3, [pc, #0x514]
  00e18	e1520003	 cmp         r2, r3
  00e1c	0a00000b	 beq         |$LN19@KPD_IOCont|
  00e20		 |$LN18@KPD_IOCont|

; 639  :         {
; 640  :         RETAILMSG(ZONE_ERROR, (L"ERROR: KPD_IOControl: "
; 641  :             L"Incorrect context parameter\r\n"
; 642  :             ));

  00e20	e59f34d8	 ldr         r3, [pc, #0x4D8]
  00e24	e5933440	 ldr         r3, [r3, #0x440]
  00e28	e3130001	 tst         r3, #1
  00e2c	0a000004	 beq         |$LN24@KPD_IOCont|
  00e30	e59f04f4	 ldr         r0, [pc, #0x4F4]
  00e34	eb000000	 bl          NKDbgPrintfW
  00e38	e3a03001	 mov         r3, #1
  00e3c	e50b304c	 str         r3, [r11, #-0x4C]
  00e40	ea000001	 b           |$LN25@KPD_IOCont|
  00e44		 |$LN24@KPD_IOCont|
  00e44	e3a03000	 mov         r3, #0
  00e48	e50b304c	 str         r3, [r11, #-0x4C]
  00e4c		 |$LN25@KPD_IOCont|

; 643  :         goto cleanUp;

  00e4c	ea000104	 b           |$cleanUp$43926|
  00e50		 |$LN19@KPD_IOCont|

; 644  :         }
; 645  :     
; 646  :     switch (code)

  00e50	e59b3004	 ldr         r3, [r11, #4]
  00e54	e50b3048	 str         r3, [r11, #-0x48]
  00e58	e51b2048	 ldr         r2, [r11, #-0x48]
  00e5c	e3a03832	 mov         r3, #0x32, 16
  00e60	e3833a01	 orr         r3, r3, #1, 20
  00e64	e0423003	 sub         r3, r2, r3
  00e68	e50b3048	 str         r3, [r11, #-0x48]
  00e6c	e51b3048	 ldr         r3, [r11, #-0x48]
  00e70	e353000c	 cmp         r3, #0xC
  00e74	8a0000fa	 bhi         |$LN16@KPD_IOCont|
  00e78	e51b2048	 ldr         r2, [r11, #-0x48]
  00e7c	e1a03102	 mov         r3, r2, lsl #2
  00e80	e083300f	 add         r3, r3, pc
  00e84	e5933004	 ldr         r3, [r3, #4]
  00e88	e08ff003	 add         pc, pc, r3
  00e8c		 |$LN93@KPD_IOCont|
  00e8c		 |$LN92@KPD_IOCont|
  00e8c		 |$LN94@KPD_IOCont|
  00e8c	00000030	 DCD         0x30
  00e90		 |$LN95@KPD_IOCont|
  00e90	000003d4	 DCD         0x3d4
  00e94		 |$LN96@KPD_IOCont|
  00e94	000003d4	 DCD         0x3d4
  00e98		 |$LN97@KPD_IOCont|
  00e98	000003d4	 DCD         0x3d4
  00e9c		 |$LN98@KPD_IOCont|
  00e9c	00000308	 DCD         0x308
  00ea0		 |$LN99@KPD_IOCont|
  00ea0	000003d4	 DCD         0x3d4
  00ea4		 |$LN100@KPD_IOCont|
  00ea4	000003d4	 DCD         0x3d4
  00ea8		 |$LN101@KPD_IOCont|
  00ea8	000003d4	 DCD         0x3d4
  00eac		 |$LN102@KPD_IOCont|
  00eac	000001d0	 DCD         0x1d0
  00eb0		 |$LN103@KPD_IOCont|
  00eb0	000003d4	 DCD         0x3d4
  00eb4		 |$LN104@KPD_IOCont|
  00eb4	000003d4	 DCD         0x3d4
  00eb8		 |$LN105@KPD_IOCont|
  00eb8	000003d4	 DCD         0x3d4
  00ebc		 |$LN106@KPD_IOCont|
  00ebc	000000fc	 DCD         0xfc
  00ec0		 |$LN15@KPD_IOCont|

; 647  :         {
; 648  :         case IOCTL_POWER_CAPABILITIES: 
; 649  :             DEBUGMSG(ZONE_INFO, (L"KPD: Received IOCTL_POWER_CAPABILITIES\r\n"));

  00ec0	e59f3438	 ldr         r3, [pc, #0x438]
  00ec4	e5933440	 ldr         r3, [r3, #0x440]
  00ec8	e3130008	 tst         r3, #8
  00ecc	0a000004	 beq         |$LN26@KPD_IOCont|
  00ed0	e59f0450	 ldr         r0, [pc, #0x450]
  00ed4	eb000000	 bl          NKDbgPrintfW
  00ed8	e3a03001	 mov         r3, #1
  00edc	e50b3044	 str         r3, [r11, #-0x44]
  00ee0	ea000001	 b           |$LN27@KPD_IOCont|
  00ee4		 |$LN26@KPD_IOCont|
  00ee4	e3a03000	 mov         r3, #0
  00ee8	e50b3044	 str         r3, [r11, #-0x44]
  00eec		 |$LN27@KPD_IOCont|

; 650  :             if (pOutBuffer && outSize >= sizeof (POWER_CAPABILITIES) && 
; 651  :                 pOutSize) 

  00eec	e59b3010	 ldr         r3, [r11, #0x10]
  00ef0	e3530000	 cmp         r3, #0
  00ef4	0a000023	 beq         |$LN14@KPD_IOCont|
  00ef8	e59b3014	 ldr         r3, [r11, #0x14]
  00efc	e3530030	 cmp         r3, #0x30
  00f00	3a000020	 bcc         |$LN14@KPD_IOCont|
  00f04	e59b3018	 ldr         r3, [r11, #0x18]
  00f08	e3530000	 cmp         r3, #0
  00f0c	0a00001d	 beq         |$LN14@KPD_IOCont|
  00f10		 |$LN57@KPD_IOCont|

; 652  :                 {
; 653  :                     __try 
; 654  :                         {
; 655  :                         PPOWER_CAPABILITIES PowerCaps;
; 656  :                         PowerCaps = (PPOWER_CAPABILITIES)pOutBuffer;

  00f10	e59b3010	 ldr         r3, [r11, #0x10]
  00f14	e50b3070	 str         r3, [r11, #-0x70]

; 657  :          
; 658  :                         // Only supports D0 (permanently on) and D4(off.         
; 659  :                         memset(PowerCaps, 0, sizeof(*PowerCaps));

  00f18	e3a02030	 mov         r2, #0x30
  00f1c	e3a01000	 mov         r1, #0
  00f20	e51b0070	 ldr         r0, [r11, #-0x70]
  00f24	eb000000	 bl          memset

; 660  :                         PowerCaps->DeviceDx = (UCHAR)pDevice->powerMask;

  00f28	e51b3078	 ldr         r3, [r11, #-0x78]
  00f2c	e283302c	 add         r3, r3, #0x2C
  00f30	e5933000	 ldr         r3, [r3]
  00f34	e20320ff	 and         r2, r3, #0xFF
  00f38	e51b3070	 ldr         r3, [r11, #-0x70]
  00f3c	e5c32000	 strb        r2, [r3]

; 661  :                         *pOutSize = sizeof(*PowerCaps);

  00f40	e59b2018	 ldr         r2, [r11, #0x18]
  00f44	e3a03030	 mov         r3, #0x30
  00f48	e5823000	 str         r3, [r2]

; 662  :                         
; 663  :                         rc = TRUE;

  00f4c	e3a03001	 mov         r3, #1
  00f50	e50b3074	 str         r3, [r11, #-0x74]
  00f54		 |$LN58@KPD_IOCont|

; 664  :                         }

  00f54	ea00000b	 b           |$LN59@KPD_IOCont|
  00f58		 |$LN54@KPD_IOCont|

; 666  :                         {
; 667  :                         RETAILMSG(ZONE_ERROR, (L"exception in ioctl\r\n"));

  00f58	e59f33a0	 ldr         r3, [pc, #0x3A0]
  00f5c	e5933440	 ldr         r3, [r3, #0x440]
  00f60	e3130001	 tst         r3, #1
  00f64	0a000004	 beq         |$LN28@KPD_IOCont|
  00f68	e59f03b4	 ldr         r0, [pc, #0x3B4]
  00f6c	eb000000	 bl          NKDbgPrintfW
  00f70	e3a03001	 mov         r3, #1
  00f74	e50b3040	 str         r3, [r11, #-0x40]
  00f78	ea000001	 b           |$LN29@KPD_IOCont|
  00f7c		 |$LN28@KPD_IOCont|
  00f7c	e3a03000	 mov         r3, #0
  00f80	e50b3040	 str         r3, [r11, #-0x40]
  00f84		 |$LN29@KPD_IOCont|
  00f84	eaffffff	 b           |$LN59@KPD_IOCont|
  00f88		 |$LN59@KPD_IOCont|
  00f88		 |$LN14@KPD_IOCont|

; 668  :                         }
; 669  :                 }
; 670  :             break;

  00f88	ea0000b5	 b           |$LN16@KPD_IOCont|
  00f8c		 |$LN12@KPD_IOCont|

; 671  : 
; 672  :         // determines whether changing power state is feasible
; 673  :         case IOCTL_POWER_QUERY: 
; 674  :             DEBUGMSG(ZONE_INFO,(L"KPD: Received IOCTL_POWER_QUERY\r\n"));

  00f8c	e59f336c	 ldr         r3, [pc, #0x36C]
  00f90	e5933440	 ldr         r3, [r3, #0x440]
  00f94	e3130008	 tst         r3, #8
  00f98	0a000004	 beq         |$LN30@KPD_IOCont|
  00f9c	e59f037c	 ldr         r0, [pc, #0x37C]
  00fa0	eb000000	 bl          NKDbgPrintfW
  00fa4	e3a03001	 mov         r3, #1
  00fa8	e50b303c	 str         r3, [r11, #-0x3C]
  00fac	ea000001	 b           |$LN31@KPD_IOCont|
  00fb0		 |$LN30@KPD_IOCont|
  00fb0	e3a03000	 mov         r3, #0
  00fb4	e50b303c	 str         r3, [r11, #-0x3C]
  00fb8		 |$LN31@KPD_IOCont|

; 675  :             if (pOutBuffer && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  00fb8	e59b3010	 ldr         r3, [r11, #0x10]
  00fbc	e3530000	 cmp         r3, #0
  00fc0	0a000025	 beq         |$LN11@KPD_IOCont|
  00fc4	e59b3014	 ldr         r3, [r11, #0x14]
  00fc8	e3530004	 cmp         r3, #4
  00fcc	3a000022	 bcc         |$LN11@KPD_IOCont|
  00fd0		 |$LN64@KPD_IOCont|

; 676  :                 {
; 677  :                 // Return a good status on any valid query, since we are 
; 678  :                 // always ready to change power states (if asked for state 
; 679  :                 // we don't support, we move to next highest, eg D3->D4).
; 680  :                 __try 
; 681  :                     {
; 682  :                     CEDEVICE_POWER_STATE ReqDx = *(PCEDEVICE_POWER_STATE)pOutBuffer;

  00fd0	e59b3010	 ldr         r3, [r11, #0x10]
  00fd4	e5933000	 ldr         r3, [r3]
  00fd8	e50b306c	 str         r3, [r11, #-0x6C]

; 683  :  
; 684  :                     if (VALID_DX(ReqDx)) 

  00fdc	e51b306c	 ldr         r3, [r11, #-0x6C]
  00fe0	e3730001	 cmn         r3, #1
  00fe4	da000004	 ble         |$LN9@KPD_IOCont|
  00fe8	e51b306c	 ldr         r3, [r11, #-0x6C]
  00fec	e3530005	 cmp         r3, #5
  00ff0	aa000001	 bge         |$LN9@KPD_IOCont|

; 685  :                         {
; 686  :                         // This is a valid Dx state so return a good status.
; 687  :                         rc = TRUE;

  00ff4	e3a03001	 mov         r3, #1
  00ff8	e50b3074	 str         r3, [r11, #-0x74]
  00ffc		 |$LN9@KPD_IOCont|

; 688  :                         }
; 689  :  
; 690  :                     DEBUGMSG(ZONE_INFO, (L"KPD: IOCTL_POWER_QUERY %d\r\n"));

  00ffc	e59f32fc	 ldr         r3, [pc, #0x2FC]
  01000	e5933440	 ldr         r3, [r3, #0x440]
  01004	e3130008	 tst         r3, #8
  01008	0a000004	 beq         |$LN32@KPD_IOCont|
  0100c	e59f0308	 ldr         r0, [pc, #0x308]
  01010	eb000000	 bl          NKDbgPrintfW
  01014	e3a03001	 mov         r3, #1
  01018	e50b3038	 str         r3, [r11, #-0x38]
  0101c	ea000001	 b           |$LN33@KPD_IOCont|
  01020		 |$LN32@KPD_IOCont|
  01020	e3a03000	 mov         r3, #0
  01024	e50b3038	 str         r3, [r11, #-0x38]
  01028		 |$LN33@KPD_IOCont|
  01028		 |$LN65@KPD_IOCont|

; 691  :                     }

  01028	ea00000b	 b           |$LN66@KPD_IOCont|
  0102c		 |$LN61@KPD_IOCont|

; 693  :                     {
; 694  :                     RETAILMSG(ZONE_ERROR, (L"Exception in ioctl\r\n"));

  0102c	e59f32cc	 ldr         r3, [pc, #0x2CC]
  01030	e5933440	 ldr         r3, [r3, #0x440]
  01034	e3130001	 tst         r3, #1
  01038	0a000004	 beq         |$LN34@KPD_IOCont|
  0103c	e59f02c0	 ldr         r0, [pc, #0x2C0]
  01040	eb000000	 bl          NKDbgPrintfW
  01044	e3a03001	 mov         r3, #1
  01048	e50b3034	 str         r3, [r11, #-0x34]
  0104c	ea000001	 b           |$LN35@KPD_IOCont|
  01050		 |$LN34@KPD_IOCont|
  01050	e3a03000	 mov         r3, #0
  01054	e50b3034	 str         r3, [r11, #-0x34]
  01058		 |$LN35@KPD_IOCont|
  01058	eaffffff	 b           |$LN66@KPD_IOCont|
  0105c		 |$LN66@KPD_IOCont|
  0105c		 |$LN11@KPD_IOCont|

; 695  :                     }
; 696  :                 }
; 697  :             break;

  0105c	ea000080	 b           |$LN16@KPD_IOCont|
  01060		 |$LN8@KPD_IOCont|

; 698  : 
; 699  :         // requests a change from one device power state to another
; 700  :         case IOCTL_POWER_SET: 
; 701  :             DEBUGMSG(ZONE_INFO,(L"KPD: Received IOCTL_POWER_SET\r\n"));

  01060	e59f3298	 ldr         r3, [pc, #0x298]
  01064	e5933440	 ldr         r3, [r3, #0x440]
  01068	e3130008	 tst         r3, #8
  0106c	0a000004	 beq         |$LN36@KPD_IOCont|
  01070	e59f02a0	 ldr         r0, [pc, #0x2A0]
  01074	eb000000	 bl          NKDbgPrintfW
  01078	e3a03001	 mov         r3, #1
  0107c	e50b3030	 str         r3, [r11, #-0x30]
  01080	ea000001	 b           |$LN37@KPD_IOCont|
  01084		 |$LN36@KPD_IOCont|
  01084	e3a03000	 mov         r3, #0
  01088	e50b3030	 str         r3, [r11, #-0x30]
  0108c		 |$LN37@KPD_IOCont|

; 702  :             if (pOutBuffer && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  0108c	e59b3010	 ldr         r3, [r11, #0x10]
  01090	e3530000	 cmp         r3, #0
  01094	0a00003e	 beq         |$LN7@KPD_IOCont|
  01098	e59b3014	 ldr         r3, [r11, #0x14]
  0109c	e3530004	 cmp         r3, #4
  010a0	3a00003b	 bcc         |$LN7@KPD_IOCont|
  010a4		 |$LN71@KPD_IOCont|

; 703  :                 {
; 704  :                 __try 
; 705  :                     {
; 706  :                     CEDEVICE_POWER_STATE ReqDx = *(PCEDEVICE_POWER_STATE)pOutBuffer;

  010a4	e59b3010	 ldr         r3, [r11, #0x10]
  010a8	e5933000	 ldr         r3, [r3]
  010ac	e50b3068	 str         r3, [r11, #-0x68]

; 707  :  
; 708  :                     if (SetPowerState(pDevice, ReqDx))

  010b0	e51b1068	 ldr         r1, [r11, #-0x68]
  010b4	e51b0078	 ldr         r0, [r11, #-0x78]
  010b8	eb000000	 bl          SetPowerState
  010bc	e50b002c	 str         r0, [r11, #-0x2C]
  010c0	e51b302c	 ldr         r3, [r11, #-0x2C]
  010c4	e3530000	 cmp         r3, #0
  010c8	0a000018	 beq         |$LN5@KPD_IOCont|

; 709  :                         {   
; 710  :                         *(PCEDEVICE_POWER_STATE)pOutBuffer = pDevice->powerState;

  010cc	e51b3078	 ldr         r3, [r11, #-0x78]
  010d0	e2833030	 add         r3, r3, #0x30
  010d4	e5932000	 ldr         r2, [r3]
  010d8	e59b3010	 ldr         r3, [r11, #0x10]
  010dc	e5832000	 str         r2, [r3]

; 711  :                         *pOutSize = sizeof(CEDEVICE_POWER_STATE);

  010e0	e59b2018	 ldr         r2, [r11, #0x18]
  010e4	e3a03004	 mov         r3, #4
  010e8	e5823000	 str         r3, [r2]

; 712  :  
; 713  :                         rc = TRUE;

  010ec	e3a03001	 mov         r3, #1
  010f0	e50b3074	 str         r3, [r11, #-0x74]

; 714  :                         DEBUGMSG(ZONE_INFO, (L"KPD: "
; 715  :                             L"IOCTL_POWER_SET to D%u \r\n",
; 716  :                             pDevice->powerState
; 717  :                             ));

  010f4	e59f3204	 ldr         r3, [pc, #0x204]
  010f8	e5933440	 ldr         r3, [r3, #0x440]
  010fc	e3130008	 tst         r3, #8
  01100	0a000007	 beq         |$LN38@KPD_IOCont|
  01104	e51b3078	 ldr         r3, [r11, #-0x78]
  01108	e2833030	 add         r3, r3, #0x30
  0110c	e5931000	 ldr         r1, [r3]
  01110	e59f01fc	 ldr         r0, [pc, #0x1FC]
  01114	eb000000	 bl          NKDbgPrintfW
  01118	e3a03001	 mov         r3, #1
  0111c	e50b3028	 str         r3, [r11, #-0x28]
  01120	ea000001	 b           |$LN39@KPD_IOCont|
  01124		 |$LN38@KPD_IOCont|
  01124	e3a03000	 mov         r3, #0
  01128	e50b3028	 str         r3, [r11, #-0x28]
  0112c		 |$LN39@KPD_IOCont|

; 718  :                         }
; 719  :                     else 

  0112c	ea00000b	 b           |$LN4@KPD_IOCont|
  01130		 |$LN5@KPD_IOCont|

; 720  :                         {
; 721  :                         RETAILMSG(ZONE_ERROR, (L"KPD: "
; 722  :                             L"Invalid state request D%u \r\n", ReqDx
; 723  :                             ));

  01130	e59f31c8	 ldr         r3, [pc, #0x1C8]
  01134	e5933440	 ldr         r3, [r3, #0x440]
  01138	e3130001	 tst         r3, #1
  0113c	0a000005	 beq         |$LN40@KPD_IOCont|
  01140	e51b1068	 ldr         r1, [r11, #-0x68]
  01144	e59f01c4	 ldr         r0, [pc, #0x1C4]
  01148	eb000000	 bl          NKDbgPrintfW
  0114c	e3a03001	 mov         r3, #1
  01150	e50b3024	 str         r3, [r11, #-0x24]
  01154	ea000001	 b           |$LN41@KPD_IOCont|
  01158		 |$LN40@KPD_IOCont|
  01158	e3a03000	 mov         r3, #0
  0115c	e50b3024	 str         r3, [r11, #-0x24]
  01160		 |$LN41@KPD_IOCont|
  01160		 |$LN4@KPD_IOCont|
  01160		 |$LN72@KPD_IOCont|

; 724  :                         }
; 725  :                     }

  01160	ea00000b	 b           |$LN73@KPD_IOCont|
  01164		 |$LN68@KPD_IOCont|

; 727  :                     {
; 728  :                     RETAILMSG(ZONE_ERROR, (L"Exception in ioctl\r\n"));

  01164	e59f3194	 ldr         r3, [pc, #0x194]
  01168	e5933440	 ldr         r3, [r3, #0x440]
  0116c	e3130001	 tst         r3, #1
  01170	0a000004	 beq         |$LN42@KPD_IOCont|
  01174	e59f0188	 ldr         r0, [pc, #0x188]
  01178	eb000000	 bl          NKDbgPrintfW
  0117c	e3a03001	 mov         r3, #1
  01180	e50b3020	 str         r3, [r11, #-0x20]
  01184	ea000001	 b           |$LN43@KPD_IOCont|
  01188		 |$LN42@KPD_IOCont|
  01188	e3a03000	 mov         r3, #0
  0118c	e50b3020	 str         r3, [r11, #-0x20]
  01190		 |$LN43@KPD_IOCont|
  01190	eaffffff	 b           |$LN73@KPD_IOCont|
  01194		 |$LN73@KPD_IOCont|
  01194		 |$LN7@KPD_IOCont|

; 729  :                     }
; 730  :             }
; 731  :             break;

  01194	ea000032	 b           |$LN16@KPD_IOCont|
  01198		 |$LN3@KPD_IOCont|

; 732  : 
; 733  :         // gets the current device power state
; 734  :         case IOCTL_POWER_GET: 
; 735  :             RETAILMSG(ZONE_INFO, (L"KPD: Received IOCTL_POWER_GET\r\n"));

  01198	e59f3160	 ldr         r3, [pc, #0x160]
  0119c	e5933440	 ldr         r3, [r3, #0x440]
  011a0	e3130008	 tst         r3, #8
  011a4	0a000004	 beq         |$LN44@KPD_IOCont|
  011a8	e59f015c	 ldr         r0, [pc, #0x15C]
  011ac	eb000000	 bl          NKDbgPrintfW
  011b0	e3a03001	 mov         r3, #1
  011b4	e50b301c	 str         r3, [r11, #-0x1C]
  011b8	ea000001	 b           |$LN45@KPD_IOCont|
  011bc		 |$LN44@KPD_IOCont|
  011bc	e3a03000	 mov         r3, #0
  011c0	e50b301c	 str         r3, [r11, #-0x1C]
  011c4		 |$LN45@KPD_IOCont|

; 736  :             if (pOutBuffer != NULL && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  011c4	e59b3010	 ldr         r3, [r11, #0x10]
  011c8	e3530000	 cmp         r3, #0
  011cc	0a000024	 beq         |$LN2@KPD_IOCont|
  011d0	e59b3014	 ldr         r3, [r11, #0x14]
  011d4	e3530004	 cmp         r3, #4
  011d8	3a000021	 bcc         |$LN2@KPD_IOCont|
  011dc		 |$LN78@KPD_IOCont|

; 737  :                 {
; 738  :                 __try 
; 739  :                     {
; 740  :                     *(PCEDEVICE_POWER_STATE)pOutBuffer = pDevice->powerState;

  011dc	e51b3078	 ldr         r3, [r11, #-0x78]
  011e0	e2833030	 add         r3, r3, #0x30
  011e4	e5932000	 ldr         r2, [r3]
  011e8	e59b3010	 ldr         r3, [r11, #0x10]
  011ec	e5832000	 str         r2, [r3]

; 741  :  
; 742  :                     rc = TRUE;

  011f0	e3a03001	 mov         r3, #1
  011f4	e50b3074	 str         r3, [r11, #-0x74]

; 743  : 
; 744  :                     DEBUGMSG(ZONE_INFO, (L"KPD: "
; 745  :                             L"IOCTL_POWER_GET to D%u \r\n",
; 746  :                             pDevice->powerState
; 747  :                             ));

  011f8	e59f3100	 ldr         r3, [pc, #0x100]
  011fc	e5933440	 ldr         r3, [r3, #0x440]
  01200	e3130008	 tst         r3, #8
  01204	0a000007	 beq         |$LN46@KPD_IOCont|
  01208	e51b3078	 ldr         r3, [r11, #-0x78]
  0120c	e2833030	 add         r3, r3, #0x30
  01210	e5931000	 ldr         r1, [r3]
  01214	e59f00ec	 ldr         r0, [pc, #0xEC]
  01218	eb000000	 bl          NKDbgPrintfW
  0121c	e3a03001	 mov         r3, #1
  01220	e50b3018	 str         r3, [r11, #-0x18]
  01224	ea000001	 b           |$LN47@KPD_IOCont|
  01228		 |$LN46@KPD_IOCont|
  01228	e3a03000	 mov         r3, #0
  0122c	e50b3018	 str         r3, [r11, #-0x18]
  01230		 |$LN47@KPD_IOCont|
  01230		 |$LN79@KPD_IOCont|

; 748  :                     }

  01230	ea00000b	 b           |$LN80@KPD_IOCont|
  01234		 |$LN75@KPD_IOCont|

; 750  :                     {
; 751  :                     RETAILMSG(ZONE_ERROR, (L"Exception in ioctl\r\n"));

  01234	e59f30c4	 ldr         r3, [pc, #0xC4]
  01238	e5933440	 ldr         r3, [r3, #0x440]
  0123c	e3130001	 tst         r3, #1
  01240	0a000004	 beq         |$LN48@KPD_IOCont|
  01244	e59f00b8	 ldr         r0, [pc, #0xB8]
  01248	eb000000	 bl          NKDbgPrintfW
  0124c	e3a03001	 mov         r3, #1
  01250	e50b3014	 str         r3, [r11, #-0x14]
  01254	ea000001	 b           |$LN49@KPD_IOCont|
  01258		 |$LN48@KPD_IOCont|
  01258	e3a03000	 mov         r3, #0
  0125c	e50b3014	 str         r3, [r11, #-0x14]
  01260		 |$LN49@KPD_IOCont|
  01260	eaffffff	 b           |$LN80@KPD_IOCont|
  01264		 |$LN80@KPD_IOCont|
  01264		 |$LN2@KPD_IOCont|
  01264		 |$LN16@KPD_IOCont|
  01264		 |$cleanUp$43926|

; 752  :                     }
; 753  :                 }     
; 754  :             break;
; 755  :         }
; 756  : 
; 757  : cleanUp:
; 758  :     DEBUGMSG(ZONE_FUNCTION, (L"-KPD_IOControl(rc = %d)\r\n", rc));

  01264	e59f3094	 ldr         r3, [pc, #0x94]
  01268	e5933440	 ldr         r3, [r3, #0x440]
  0126c	e3130004	 tst         r3, #4
  01270	0a000005	 beq         |$LN50@KPD_IOCont|
  01274	e51b1074	 ldr         r1, [r11, #-0x74]
  01278	e59f007c	 ldr         r0, [pc, #0x7C]
  0127c	eb000000	 bl          NKDbgPrintfW
  01280	e3a03001	 mov         r3, #1
  01284	e50b3010	 str         r3, [r11, #-0x10]
  01288	ea000001	 b           |$LN51@KPD_IOCont|
  0128c		 |$LN50@KPD_IOCont|
  0128c	e3a03000	 mov         r3, #0
  01290	e50b3010	 str         r3, [r11, #-0x10]
  01294		 |$LN51@KPD_IOCont|

; 759  :     return rc;

  01294	e51b3074	 ldr         r3, [r11, #-0x74]
  01298	e50b3054	 str         r3, [r11, #-0x54]
  0129c		 |$LN52@KPD_IOCont|

; 760  : }

  0129c	e51b0054	 ldr         r0, [r11, #-0x54]
  012a0	e24bd00c	 sub         sp, r11, #0xC
  012a4	e89d6800	 ldmia       sp, {r11, sp, lr}
  012a8	e12fff1e	 bx          lr

			 ENDP  ; |KPD_IOControl|

  012ac		 |$LN74@KPD_IOCont|
  012ac		 |$LN86@KPD_IOCont|

; 749  :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  012ac	e52de004	 str         lr, [sp, #-4]!
  012b0	e24dd010	 sub         sp, sp, #0x10
  012b4		 |$LN77@KPD_IOCont|
  012b4		 |$LN107@KPD_IOCont|
  012b4	e3a00001	 mov         r0, #1
  012b8		 |$LN76@KPD_IOCont|
  012b8	e28dd010	 add         sp, sp, #0x10
  012bc	e49df004	 ldr         pc, [sp], #4
  012c0		 |$LN108@KPD_IOCont|
  012c0		 |$LN67@KPD_IOCont|
  012c0		 |$LN88@KPD_IOCont|

; 726  :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  012c0	e52de004	 str         lr, [sp, #-4]!
  012c4	e24dd010	 sub         sp, sp, #0x10
  012c8		 |$LN70@KPD_IOCont|
  012c8		 |$LN109@KPD_IOCont|
  012c8	e3a00001	 mov         r0, #1
  012cc		 |$LN69@KPD_IOCont|
  012cc	e28dd010	 add         sp, sp, #0x10
  012d0	e49df004	 ldr         pc, [sp], #4
  012d4		 |$LN110@KPD_IOCont|
  012d4		 |$LN60@KPD_IOCont|
  012d4		 |$LN89@KPD_IOCont|

; 692  :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  012d4	e52de004	 str         lr, [sp, #-4]!
  012d8	e24dd010	 sub         sp, sp, #0x10
  012dc		 |$LN63@KPD_IOCont|
  012dc		 |$LN111@KPD_IOCont|
  012dc	e3a00001	 mov         r0, #1
  012e0		 |$LN62@KPD_IOCont|
  012e0	e28dd010	 add         sp, sp, #0x10
  012e4	e49df004	 ldr         pc, [sp], #4
  012e8		 |$LN112@KPD_IOCont|
  012e8		 |$LN53@KPD_IOCont|
  012e8		 |$LN90@KPD_IOCont|

; 665  :                     __except(EXCEPTION_EXECUTE_HANDLER) 

  012e8	e52de004	 str         lr, [sp, #-4]!
  012ec	e24dd010	 sub         sp, sp, #0x10
  012f0		 |$LN56@KPD_IOCont|
  012f0		 |$LN113@KPD_IOCont|
  012f0	e3a00001	 mov         r0, #1
  012f4		 |$LN55@KPD_IOCont|
  012f4	e28dd010	 add         sp, sp, #0x10
  012f8	e49df004	 ldr         pc, [sp], #4
  012fc		 |$LN115@KPD_IOCont|
  012fc		 |$LN116@KPD_IOCont|
  012fc	00000000	 DCD         |??_C@_1DE@FLLFNOFI@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01300		 |$LN117@KPD_IOCont|
  01300	00000000	 DCD         |dpCurSettings|
  01304		 |$LN118@KPD_IOCont|
  01304	00000000	 DCD         |??_C@_1CK@OBPLBNBH@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  01308		 |$LN119@KPD_IOCont|
  01308	00000000	 DCD         |??_C@_1DO@FGLLAMKJ@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  0130c		 |$LN120@KPD_IOCont|
  0130c	00000000	 DCD         |??_C@_1EA@BHHDBCBL@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAG?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  01310		 |$LN121@KPD_IOCont|
  01310	00000000	 DCD         |??_C@_1EE@NKFDJLND@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AAr?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN@|
  01314		 |$LN122@KPD_IOCont|
  01314	00000000	 DCD         |??_C@_1DO@ELDDCJAN@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?5?$AAt?$AAo?$AA?5?$AAD?$AA?$CF?$AAu?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  01318		 |$LN123@KPD_IOCont|
  01318	00000000	 DCD         |??_C@_1EA@BIGNMEJI@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAS?$AAE?$AAT?$AA?$AN?$AA?6?$AA?$AA@|
  0131c		 |$LN124@KPD_IOCont|
  0131c	00000000	 DCD         |??_C@_1DI@FCMOPFEB@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01320		 |$LN125@KPD_IOCont|
  01320	00000000	 DCD         |??_C@_1EE@BLFHBIKN@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAQ?$AAU?$AAE?$AAR?$AAY?$AA?$AN@|
  01324		 |$LN126@KPD_IOCont|
  01324	00000000	 DCD         |??_C@_1CK@MHJHMPML@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  01328		 |$LN127@KPD_IOCont|
  01328	00000000	 DCD         |??_C@_1FC@HBIPLMFL@?$AAK?$AAP?$AAD?$AA?3?$AA?5?$AAR?$AAe?$AAc?$AAe?$AAi?$AAv?$AAe?$AAd?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAP?$AAO?$AAW?$AAE?$AAR?$AA_?$AAC?$AAA?$AAP?$AAA?$AAB?$AAI@|
  0132c		 |$LN128@KPD_IOCont|
  0132c	00000000	 DCD         |??_C@_1GI@MFFMFLPL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  01330		 |$LN129@KPD_IOCont|
  01330	6b706444	 DCD         0x6b706444
  01334		 |$LN130@KPD_IOCont|
  01334	00000000	 DCD         |??_C@_1IC@OHNKFBP@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  01338		 |$LN114@KPD_IOCont|
  01338		 |$LN91@KPD_IOCont|
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|ChangeDisplaySettingsEx|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00068			 AREA	 |.pdata|, PDATA
|$T44554| DCD	|$LN27@RemapVKeyT|
	DCD	0xc0007604

  00044			 AREA	 |.xdata|, DATA
|$T44550| DCD	0xffffffdc
; Function compile flags: /Odtp

  01338			 AREA	 |.text|, CODE, ARM

  01338	00000000	 DCD         |__GSHandlerCheck|
  0133c	00000000	 DCD         |$T44550|

  01340		 |RemapVKeyToScreenOrientation| PROC

; 946  : {

  01340		 |$LN27@RemapVKeyT|
  01340	e1a0c00d	 mov         r12, sp
  01344	e92d0001	 stmdb       sp!, {r0}
  01348	e92d5000	 stmdb       sp!, {r12, lr}
  0134c	e24dd0e4	 sub         sp, sp, #0xE4
  01350		 |$M44551|
  01350	e59f31bc	 ldr         r3, [pc, #0x1BC]
  01354	e5933000	 ldr         r3, [r3]
  01358	e58d30cc	 str         r3, [sp, #0xCC]

; 947  :     // Arrow key translation for rotate 0, 90, 180 and 270. 
; 948  :     static const UCHAR   ucOrientationDMDO_0VKTable[4]   = {VK_TUP,    VK_TRIGHT, VK_TDOWN,  VK_TLEFT };
; 949  :     static const UCHAR   ucOrientationDMDO_90VKTable[4]  = {VK_TRIGHT, VK_TDOWN,  VK_TLEFT,  VK_TUP   };
; 950  :     static const UCHAR   ucOrientationDMDO_180VKTable[4] = {VK_TDOWN,  VK_TLEFT,  VK_TUP,    VK_TRIGHT};
; 951  :     static const UCHAR   ucOrientationDMDO_270VKTable[4] = {VK_LEFT,   VK_TUP,    VK_TRIGHT, VK_TDOWN };
; 952  : 
; 953  :     UCHAR   ucRetVal = ucVKey;

  0135c	e5dd30ec	 ldrb        r3, [sp, #0xEC]
  01360	e5cd3004	 strb        r3, [sp, #4]

; 954  : 
; 955  :     // if the input key is VK_TUP, VK_TRIGHT, VK_TDOWN, or VK_TLEFT, we might need to translate it
; 956  :     // according to the screen rotation.
; 957  :     if ( (ucVKey == VK_TUP) || (ucVKey == VK_TRIGHT) || (ucVKey == VK_TDOWN) || (ucVKey == VK_TLEFT) )

  01364	e5dd30ec	 ldrb        r3, [sp, #0xEC]
  01368	e3530026	 cmp         r3, #0x26
  0136c	0a000008	 beq         |$LN15@RemapVKeyT|
  01370	e5dd30ec	 ldrb        r3, [sp, #0xEC]
  01374	e3530027	 cmp         r3, #0x27
  01378	0a000005	 beq         |$LN15@RemapVKeyT|
  0137c	e5dd30ec	 ldrb        r3, [sp, #0xEC]
  01380	e3530028	 cmp         r3, #0x28
  01384	0a000002	 beq         |$LN15@RemapVKeyT|
  01388	e5dd30ec	 ldrb        r3, [sp, #0xEC]
  0138c	e3530025	 cmp         r3, #0x25
  01390	1a000053	 bne         |$LN16@RemapVKeyT|
  01394		 |$LN15@RemapVKeyT|

; 958  :     {
; 959  :         int     iVKeyIndex = 0;

  01394	e3a03000	 mov         r3, #0
  01398	e58d3008	 str         r3, [sp, #8]

; 960  : 
; 961  :         // If we haven't determine the screen orientation, we need to figure it out first.
; 962  :         if (g_iDisplayOrientation == -1) 

  0139c	e59f316c	 ldr         r3, [pc, #0x16C]
  013a0	e5933000	 ldr         r3, [r3]
  013a4	e3730001	 cmn         r3, #1
  013a8	1a000013	 bne         |$LN14@RemapVKeyT|

; 963  :         {
; 964  :             DEVMODE devMode;
; 965  :             
; 966  :             //  Get current screen orientation
; 967  :             devMode.dmSize = sizeof(devMode);

  013ac	e3a030c0	 mov         r3, #0xC0
  013b0	e1cd35b0	 strh        r3, [sp, #0x50]

; 968  :             devMode.dmFields = DM_DISPLAYORIENTATION;

  013b4	e3a03502	 mov         r3, #2, 10
  013b8	e58d3054	 str         r3, [sp, #0x54]

; 969  :             devMode.dmDisplayOrientation = DMDO_0;

  013bc	e3a03000	 mov         r3, #0
  013c0	e58d30c8	 str         r3, [sp, #0xC8]

; 970  :             if (ChangeDisplaySettingsEx(NULL, &devMode, NULL, CDS_TEST, NULL) == DISP_CHANGE_SUCCESSFUL)

  013c4	e3a03000	 mov         r3, #0
  013c8	e58d3000	 str         r3, [sp]
  013cc	e3a03002	 mov         r3, #2
  013d0	e3a02000	 mov         r2, #0
  013d4	e28d100c	 add         r1, sp, #0xC
  013d8	e3a00000	 mov         r0, #0
  013dc	eb000000	 bl          ChangeDisplaySettingsEx
  013e0	e58d00d8	 str         r0, [sp, #0xD8]
  013e4	e59d30d8	 ldr         r3, [sp, #0xD8]
  013e8	e3530000	 cmp         r3, #0
  013ec	1a000002	 bne         |$LN13@RemapVKeyT|

; 971  :             {
; 972  :                 g_iDisplayOrientation = devMode.dmDisplayOrientation;

  013f0	e59d20c8	 ldr         r2, [sp, #0xC8]
  013f4	e59f3114	 ldr         r3, [pc, #0x114]
  013f8	e5832000	 str         r2, [r3]
  013fc		 |$LN13@RemapVKeyT|
  013fc		 |$LN14@RemapVKeyT|

; 973  :             }
; 974  :         }
; 975  : 
; 976  :         // translate VK_XXX to index.
; 977  :         switch (ucVKey)

  013fc	e5dd30ec	 ldrb        r3, [sp, #0xEC]
  01400	e58d30dc	 str         r3, [sp, #0xDC]
  01404	e59d30dc	 ldr         r3, [sp, #0xDC]
  01408	e2433025	 sub         r3, r3, #0x25
  0140c	e58d30dc	 str         r3, [sp, #0xDC]
  01410	e59d30dc	 ldr         r3, [sp, #0xDC]
  01414	e3530003	 cmp         r3, #3
  01418	8a000013	 bhi         |$LN11@RemapVKeyT|
  0141c	e59d20dc	 ldr         r2, [sp, #0xDC]
  01420	e1a03102	 mov         r3, r2, lsl #2
  01424	e083300f	 add         r3, r3, pc
  01428	e5933004	 ldr         r3, [r3, #4]
  0142c	e08ff003	 add         pc, pc, r3
  01430		 |$LN20@RemapVKeyT|
  01430		 |$LN19@RemapVKeyT|
  01430		 |$LN21@RemapVKeyT|
  01430	00000030	 DCD         0x30
  01434		 |$LN22@RemapVKeyT|
  01434	0000000c	 DCD         0xc
  01438		 |$LN23@RemapVKeyT|
  01438	00000018	 DCD         0x18
  0143c		 |$LN24@RemapVKeyT|
  0143c	00000024	 DCD         0x24
  01440		 |$LN10@RemapVKeyT|

; 978  :         {
; 979  :             case VK_TUP:
; 980  :                 iVKeyIndex = 0;

  01440	e3a03000	 mov         r3, #0
  01444	e58d3008	 str         r3, [sp, #8]

; 981  :                 break;

  01448	ea000007	 b           |$LN11@RemapVKeyT|
  0144c		 |$LN9@RemapVKeyT|

; 982  :             case VK_TRIGHT:
; 983  :                 iVKeyIndex = 1;

  0144c	e3a03001	 mov         r3, #1
  01450	e58d3008	 str         r3, [sp, #8]

; 984  :                 break;

  01454	ea000004	 b           |$LN11@RemapVKeyT|
  01458		 |$LN8@RemapVKeyT|

; 985  :             case VK_TDOWN:
; 986  :                 iVKeyIndex = 2;

  01458	e3a03002	 mov         r3, #2
  0145c	e58d3008	 str         r3, [sp, #8]

; 987  :                 break;

  01460	ea000001	 b           |$LN11@RemapVKeyT|
  01464		 |$LN7@RemapVKeyT|

; 988  :             case VK_TLEFT:
; 989  :                 iVKeyIndex = 3;

  01464	e3a03003	 mov         r3, #3
  01468	e58d3008	 str         r3, [sp, #8]
  0146c		 |$LN11@RemapVKeyT|

; 990  :                 break;
; 991  :         }
; 992  : 
; 993  :         // Transalte VK_XXX according to the screen rotation. No translation is needed
; 994  :         // if the screen is in DMD0 mode or we can't determine the screen orientation. 
; 995  :         switch (g_iDisplayOrientation)

  0146c	e59f309c	 ldr         r3, [pc, #0x9C]
  01470	e5933000	 ldr         r3, [r3]
  01474	e58d30e0	 str         r3, [sp, #0xE0]
  01478	e59d30e0	 ldr         r3, [sp, #0xE0]
  0147c	e3530001	 cmp         r3, #1
  01480	0a000006	 beq         |$LN4@RemapVKeyT|
  01484	e59d30e0	 ldr         r3, [sp, #0xE0]
  01488	e3530002	 cmp         r3, #2
  0148c	0a000009	 beq         |$LN3@RemapVKeyT|
  01490	e59d30e0	 ldr         r3, [sp, #0xE0]
  01494	e3530004	 cmp         r3, #4
  01498	0a00000c	 beq         |$LN2@RemapVKeyT|
  0149c	ea000010	 b           |$LN1@RemapVKeyT|
  014a0		 |$LN4@RemapVKeyT|

; 996  :         {
; 997  :             case DMDO_90:
; 998  :                 ucRetVal = ucOrientationDMDO_90VKTable[iVKeyIndex];

  014a0	e59f2064	 ldr         r2, [pc, #0x64]
  014a4	e59d3008	 ldr         r3, [sp, #8]
  014a8	e0823003	 add         r3, r2, r3
  014ac	e5d33000	 ldrb        r3, [r3]
  014b0	e5cd3004	 strb        r3, [sp, #4]

; 999  :                 break;

  014b4	ea00000a	 b           |$LN5@RemapVKeyT|
  014b8		 |$LN3@RemapVKeyT|

; 1000 :             case DMDO_180:
; 1001 :                 ucRetVal = ucOrientationDMDO_180VKTable[iVKeyIndex];

  014b8	e59f2048	 ldr         r2, [pc, #0x48]
  014bc	e59d3008	 ldr         r3, [sp, #8]
  014c0	e0823003	 add         r3, r2, r3
  014c4	e5d33000	 ldrb        r3, [r3]
  014c8	e5cd3004	 strb        r3, [sp, #4]

; 1002 :                 break;

  014cc	ea000004	 b           |$LN5@RemapVKeyT|
  014d0		 |$LN2@RemapVKeyT|

; 1003 :             case DMDO_270:
; 1004 :                 ucRetVal = ucOrientationDMDO_270VKTable[iVKeyIndex];

  014d0	e59f202c	 ldr         r2, [pc, #0x2C]
  014d4	e59d3008	 ldr         r3, [sp, #8]
  014d8	e0823003	 add         r3, r2, r3
  014dc	e5d33000	 ldrb        r3, [r3]
  014e0	e5cd3004	 strb        r3, [sp, #4]
  014e4		 |$LN1@RemapVKeyT|
  014e4		 |$LN5@RemapVKeyT|
  014e4		 |$LN16@RemapVKeyT|

; 1005 :                 break;
; 1006 :            case DMDO_0:
; 1007 :            default:
; 1008 :                 break;
; 1009 :         }
; 1010 :     }
; 1011 : 
; 1012 :     return ucRetVal;

  014e4	e59d00cc	 ldr         r0, [sp, #0xCC]
  014e8	eb000000	 bl          __security_check_cookie
  014ec	e5dd3004	 ldrb        r3, [sp, #4]
  014f0	e5cd30d4	 strb        r3, [sp, #0xD4]

; 1013 : }

  014f4	e5dd00d4	 ldrb        r0, [sp, #0xD4]
  014f8	e28dd0e4	 add         sp, sp, #0xE4
  014fc	e89d6000	 ldmia       sp, {sp, lr}
  01500	e12fff1e	 bx          lr
  01504		 |$LN28@RemapVKeyT|
  01504		 |$LN29@RemapVKeyT|
  01504	00000000	 DCD         |?ucOrientationDMDO_270VKTable@?1??RemapVKeyToScreenOrientation@@9@9|
  01508		 |$LN30@RemapVKeyT|
  01508	00000000	 DCD         |?ucOrientationDMDO_180VKTable@?1??RemapVKeyToScreenOrientation@@9@9|
  0150c		 |$LN31@RemapVKeyT|
  0150c	00000000	 DCD         |?ucOrientationDMDO_90VKTable@?1??RemapVKeyToScreenOrientation@@9@9|
  01510		 |$LN32@RemapVKeyT|
  01510	00000000	 DCD         |g_iDisplayOrientation|
  01514		 |$LN33@RemapVKeyT|
  01514	00000000	 DCD         |__security_cookie|
  01518		 |$M44552|

			 ENDP  ; |RemapVKeyToScreenOrientation|

	EXPORT	|??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|memcpy|
	IMPORT	|GetTickCount|
	IMPORT	|TWLReadRegs|
	IMPORT	|g_keypadRepeat|
	IMPORT	|g_keypadRemap|
	IMPORT	|CeSetThreadPriority|

  00070			 AREA	 |.pdata|, PDATA
|$T44574| DCD	|$LN23@KPD_IntrTh|
	DCD	0xc000d304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, " ", 0x0, "a", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "m", 0x0, "a", 0x0, "p"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00048			 AREA	 |.xdata|, DATA
|$T44570| DCD	0xffffffd0
; Function compile flags: /Odtp

  01518			 AREA	 |.text|, CODE, ARM

  01518	00000000	 DCD         |__GSHandlerCheck|
  0151c	00000000	 DCD         |$T44570|

  01520		 |KPD_IntrThread| PROC

; 1102 : {

  01520		 |$LN23@KPD_IntrTh|
  01520	e1a0c00d	 mov         r12, sp
  01524	e92d0001	 stmdb       sp!, {r0}
  01528	e92d5000	 stmdb       sp!, {r12, lr}
  0152c	e24dd084	 sub         sp, sp, #0x84
  01530		 |$M44571|
  01530	e59f3330	 ldr         r3, [pc, #0x330]
  01534	e5933000	 ldr         r3, [r3]
  01538	e58d3060	 str         r3, [sp, #0x60]

; 1103 :     KeypadDevice_t *pDevice = (KeypadDevice_t*)pContext;

  0153c	e59d308c	 ldr         r3, [sp, #0x8C]
  01540	e58d3000	 str         r3, [sp]

; 1104 :     KeypadRemapState_t *pRemapState = NULL;

  01544	e3a03000	 mov         r3, #0
  01548	e58d3004	 str         r3, [sp, #4]

; 1105 :     KeypadRepeatState_t *pRepeatState = NULL;

  0154c	e3a03000	 mov         r3, #0
  01550	e58d3008	 str         r3, [sp, #8]

; 1106 :     UINT8 matrix[MATRIX_SIZE];
; 1107 :     DWORD vkState[VK_KEYS/DWORD_BITS];
; 1108 :     DWORD vkNewState[VK_KEYS/DWORD_BITS];
; 1109 :     DWORD timeout;
; 1110 : 
; 1111 :     // Init data
; 1112 :     memset(matrix, 0, sizeof(matrix));

  01554	e3a02008	 mov         r2, #8
  01558	e3a01000	 mov         r1, #0
  0155c	e28d0050	 add         r0, sp, #0x50
  01560	eb000000	 bl          memset

; 1113 :     memset(vkState, 0, sizeof(vkState));

  01564	e3a02020	 mov         r2, #0x20
  01568	e3a01000	 mov         r1, #0
  0156c	e28d002c	 add         r0, sp, #0x2C
  01570	eb000000	 bl          memset

; 1114 :     memset(vkNewState, 0, sizeof(vkNewState));

  01574	e3a02020	 mov         r2, #0x20
  01578	e3a01000	 mov         r1, #0
  0157c	e28d000c	 add         r0, sp, #0xC
  01580	eb000000	 bl          memset

; 1115 : 
; 1116 :     // Set thread priority
; 1117 :     CeSetThreadPriority(pDevice->hIntrThreadKeypad, pDevice->priority256);

  01584	e59d3000	 ldr         r3, [sp]
  01588	e2833004	 add         r3, r3, #4
  0158c	e5931000	 ldr         r1, [r3]
  01590	e59d3000	 ldr         r3, [sp]
  01594	e2833024	 add         r3, r3, #0x24
  01598	e5930000	 ldr         r0, [r3]
  0159c	eb000000	 bl          CeSetThreadPriority

; 1118 : 
; 1119 :     // Initialize remap informations
; 1120 :     if (g_keypadRemap.count > 0)

  015a0	e59f32bc	 ldr         r3, [pc, #0x2BC]
  015a4	e1d330b0	 ldrh        r3, [r3]
  015a8	e3530000	 cmp         r3, #0
  015ac	da000017	 ble         |$LN12@KPD_IntrTh|

; 1121 :         {
; 1122 :         // Allocate state structure for remap, zero initialized
; 1123 :         pRemapState = LocalAlloc(
; 1124 :             LPTR, g_keypadRemap.count * sizeof(KeypadRemapState_t)
; 1125 :             );

  015b0	e59f32ac	 ldr         r3, [pc, #0x2AC]
  015b4	e1d320b0	 ldrh        r2, [r3]
  015b8	e3a03010	 mov         r3, #0x10
  015bc	e0010392	 mul         r1, r2, r3
  015c0	e3a00040	 mov         r0, #0x40
  015c4	eb000000	 bl          LocalAlloc
  015c8	e58d0068	 str         r0, [sp, #0x68]
  015cc	e59d3068	 ldr         r3, [sp, #0x68]
  015d0	e58d3004	 str         r3, [sp, #4]

; 1126 :         if (pRemapState == NULL)

  015d4	e59d3004	 ldr         r3, [sp, #4]
  015d8	e3530000	 cmp         r3, #0
  015dc	1a00000b	 bne         |$LN11@KPD_IntrTh|

; 1127 :             {
; 1128 :             DEBUGMSG(ZONE_ERROR, (L" KPD_IntrThread: "
; 1129 :                 L"Failed allocate memory for virtual key remap\r\n"
; 1130 :                 ));

  015e0	e59f3270	 ldr         r3, [pc, #0x270]
  015e4	e5933440	 ldr         r3, [r3, #0x440]
  015e8	e3130001	 tst         r3, #1
  015ec	0a000004	 beq         |$LN15@KPD_IntrTh|
  015f0	e59f0268	 ldr         r0, [pc, #0x268]
  015f4	eb000000	 bl          NKDbgPrintfW
  015f8	e3a03001	 mov         r3, #1
  015fc	e58d306c	 str         r3, [sp, #0x6C]
  01600	ea000001	 b           |$LN16@KPD_IntrTh|
  01604		 |$LN15@KPD_IntrTh|
  01604	e3a03000	 mov         r3, #0
  01608	e58d306c	 str         r3, [sp, #0x6C]
  0160c		 |$LN16@KPD_IntrTh|

; 1131 :             goto cleanUp;

  0160c	ea00007e	 b           |$cleanUp$44156|
  01610		 |$LN11@KPD_IntrTh|
  01610		 |$LN12@KPD_IntrTh|

; 1132 :             }
; 1133 :         }
; 1134 : 
; 1135 :     // Initialize repeat informations
; 1136 :     if (g_keypadRepeat.count > 0)

  01610	e59f3244	 ldr         r3, [pc, #0x244]
  01614	e1d330b0	 ldrh        r3, [r3]
  01618	e3530000	 cmp         r3, #0
  0161c	da000017	 ble         |$LN10@KPD_IntrTh|

; 1137 :         {
; 1138 :         // Allocate state structure for repeat, zero initialized
; 1139 :         pRepeatState = LocalAlloc(
; 1140 :             LPTR, g_keypadRepeat.count * sizeof(KeypadRepeatState_t)
; 1141 :             );

  01620	e59f3234	 ldr         r3, [pc, #0x234]
  01624	e1d320b0	 ldrh        r2, [r3]
  01628	e3a0300c	 mov         r3, #0xC
  0162c	e0010392	 mul         r1, r2, r3
  01630	e3a00040	 mov         r0, #0x40
  01634	eb000000	 bl          LocalAlloc
  01638	e58d0070	 str         r0, [sp, #0x70]
  0163c	e59d3070	 ldr         r3, [sp, #0x70]
  01640	e58d3008	 str         r3, [sp, #8]

; 1142 :         if (pRepeatState == NULL)

  01644	e59d3008	 ldr         r3, [sp, #8]
  01648	e3530000	 cmp         r3, #0
  0164c	1a00000b	 bne         |$LN9@KPD_IntrTh|

; 1143 :             {
; 1144 :             DEBUGMSG(ZONE_ERROR, (L" KPD_IntrThread: "
; 1145 :                 L"Failed allocate memory for virtual key auto repeat\r\n"
; 1146 :                 ));

  01650	e59f3200	 ldr         r3, [pc, #0x200]
  01654	e5933440	 ldr         r3, [r3, #0x440]
  01658	e3130001	 tst         r3, #1
  0165c	0a000004	 beq         |$LN17@KPD_IntrTh|
  01660	e59f01ec	 ldr         r0, [pc, #0x1EC]
  01664	eb000000	 bl          NKDbgPrintfW
  01668	e3a03001	 mov         r3, #1
  0166c	e58d3074	 str         r3, [sp, #0x74]
  01670	ea000001	 b           |$LN18@KPD_IntrTh|
  01674		 |$LN17@KPD_IntrTh|
  01674	e3a03000	 mov         r3, #0
  01678	e58d3074	 str         r3, [sp, #0x74]
  0167c		 |$LN18@KPD_IntrTh|

; 1147 :             goto cleanUp;

  0167c	ea000062	 b           |$cleanUp$44156|
  01680		 |$LN9@KPD_IntrTh|
  01680		 |$LN10@KPD_IntrTh|

; 1148 :             }
; 1149 :         }
; 1150 : 
; 1151 :     // Set delay to sample period
; 1152 :     timeout = pDevice->samplePeriod;

  01680	e59d3000	 ldr         r3, [sp]
  01684	e2833014	 add         r3, r3, #0x14
  01688	e5933000	 ldr         r3, [r3]
  0168c	e58d304c	 str         r3, [sp, #0x4C]
  01690		 |$LN8@KPD_IntrTh|

; 1153 : 
; 1154 :     // Loop until we are not stopped...
; 1155 :     while (!pDevice->intrThreadExit)

  01690	e59d3000	 ldr         r3, [sp]
  01694	e2833028	 add         r3, r3, #0x28
  01698	e5933000	 ldr         r3, [r3]
  0169c	e3530000	 cmp         r3, #0
  016a0	1a000059	 bne         |$LN7@KPD_IntrTh|

; 1156 :         {
; 1157 :         DWORD time;
; 1158 :         BOOL keyDown = FALSE;

  016a4	e3a03000	 mov         r3, #0
  016a8	e58d305c	 str         r3, [sp, #0x5C]

; 1159 : 
; 1160 :         // Wait for event
; 1161 :         WaitForSingleObject(pDevice->hIntrEventKeypad, timeout);

  016ac	e59d104c	 ldr         r1, [sp, #0x4C]
  016b0	e59d3000	 ldr         r3, [sp]
  016b4	e2833020	 add         r3, r3, #0x20
  016b8	e5930000	 ldr         r0, [r3]
  016bc	eb000000	 bl          WaitForSingleObject

; 1162 :         if (pDevice->intrThreadExit) break;

  016c0	e59d3000	 ldr         r3, [sp]
  016c4	e2833028	 add         r3, r3, #0x28
  016c8	e5933000	 ldr         r3, [r3]
  016cc	e3530000	 cmp         r3, #0
  016d0	0a000000	 beq         |$LN6@KPD_IntrTh|
  016d4	ea00004c	 b           |$LN7@KPD_IntrTh|
  016d8		 |$LN6@KPD_IntrTh|

; 1163 : 
; 1164 :         // read MATRIX_SIZE amount of rows..
; 1165 :         if (TWLReadRegs(pDevice->hTWL, TWL_LOGADDR_FULL_CODE_7_0, NULL, 0))

  016d8	e3a03000	 mov         r3, #0
  016dc	e3a02000	 mov         r2, #0
  016e0	e3a010db	 mov         r1, #0xDB
  016e4	e24118fe	 sub         r1, r1, #0xFE, 16
  016e8	e59d0000	 ldr         r0, [sp]
  016ec	e2800034	 add         r0, r0, #0x34
  016f0	e5900000	 ldr         r0, [r0]
  016f4	eb000000	 bl          TWLReadRegs
  016f8	e58d0078	 str         r0, [sp, #0x78]
  016fc	e59d3078	 ldr         r3, [sp, #0x78]
  01700	e3530000	 cmp         r3, #0
  01704	0a000008	 beq         |$LN5@KPD_IntrTh|

; 1166 :             {
; 1167 :             TWLReadRegs(pDevice->hTWL, TWL_LOGADDR_FULL_CODE_7_0, matrix, sizeof(matrix));

  01708	e3a03008	 mov         r3, #8
  0170c	e28d2050	 add         r2, sp, #0x50
  01710	e3a010db	 mov         r1, #0xDB
  01714	e24118fe	 sub         r1, r1, #0xFE, 16
  01718	e59d0000	 ldr         r0, [sp]
  0171c	e2800034	 add         r0, r0, #0x34
  01720	e5900000	 ldr         r0, [r0]
  01724	eb000000	 bl          TWLReadRegs

; 1168 :             }
; 1169 :         else

  01728	ea000003	 b           |$LN4@KPD_IntrTh|
  0172c		 |$LN5@KPD_IntrTh|

; 1170 :             {
; 1171 :             memset(matrix, 0, sizeof(matrix));

  0172c	e3a02008	 mov         r2, #8
  01730	e3a01000	 mov         r1, #0
  01734	e28d0050	 add         r0, sp, #0x50
  01738	eb000000	 bl          memset
  0173c		 |$LN4@KPD_IntrTh|

; 1172 :             }
; 1173 :        
; 1174 :         // Convert physical state to virtual keys state
; 1175 :         PhysicalStateToVirtualState(matrix, vkNewState, &keyDown);

  0173c	e28d205c	 add         r2, sp, #0x5C
  01740	e28d100c	 add         r1, sp, #0xC
  01744	e28d0050	 add         r0, sp, #0x50
  01748	eb000000	 bl          PhysicalStateToVirtualState

; 1176 : 
; 1177 :         time = GetTickCount();

  0174c	eb000000	 bl          GetTickCount
  01750	e58d007c	 str         r0, [sp, #0x7C]
  01754	e59d307c	 ldr         r3, [sp, #0x7C]
  01758	e58d3058	 str         r3, [sp, #0x58]

; 1178 : 
; 1179 :         // Remap multi virtual keys to final virtual key
; 1180 :         VirtualKeyRemap(time, &keyDown, pRemapState, vkNewState);

  0175c	e28d300c	 add         r3, sp, #0xC
  01760	e59d2004	 ldr         r2, [sp, #4]
  01764	e28d105c	 add         r1, sp, #0x5C
  01768	e59d0058	 ldr         r0, [sp, #0x58]
  0176c	eb000000	 bl          VirtualKeyRemap

; 1181 :         PressedReleasedKeys(pDevice, vkState, vkNewState);

  01770	e28d200c	 add         r2, sp, #0xC
  01774	e28d102c	 add         r1, sp, #0x2C
  01778	e59d0000	 ldr         r0, [sp]
  0177c	eb000000	 bl          PressedReleasedKeys

; 1182 :         AutoRepeat(pDevice, vkNewState, time, pRepeatState);

  01780	e59d3008	 ldr         r3, [sp, #8]
  01784	e59d2058	 ldr         r2, [sp, #0x58]
  01788	e28d100c	 add         r1, sp, #0xC
  0178c	e59d0000	 ldr         r0, [sp]
  01790	eb000000	 bl          AutoRepeat

; 1183 : 
; 1184 :         if( pDevice->hKeypressEvent != NULL )

  01794	e59d3000	 ldr         r3, [sp]
  01798	e283303c	 add         r3, r3, #0x3C
  0179c	e5933000	 ldr         r3, [r3]
  017a0	e3530000	 cmp         r3, #0
  017a4	0a000003	 beq         |$LN3@KPD_IntrTh|

; 1185 :             {
; 1186 :             // Signal keypad light thread
; 1187 :             SetEvent(pDevice->hKeypressEvent);

  017a8	e59d3000	 ldr         r3, [sp]
  017ac	e283303c	 add         r3, r3, #0x3C
  017b0	e5930000	 ldr         r0, [r3]
  017b4	eb000000	 bl          SetEvent
  017b8		 |$LN3@KPD_IntrTh|

; 1188 :             }
; 1189 : 
; 1190 :         //--------------------------------------------------------------
; 1191 :         // Prepare for next run
; 1192 :         //--------------------------------------------------------------
; 1193 : 
; 1194 :         // New state become old
; 1195 :         memcpy(vkState, vkNewState, sizeof(vkState));

  017b8	e3a02020	 mov         r2, #0x20
  017bc	e28d100c	 add         r1, sp, #0xC
  017c0	e28d002c	 add         r0, sp, #0x2C
  017c4	eb000000	 bl          memcpy

; 1196 :         // Get new state for virtual key table
; 1197 :         memset(vkNewState, 0, sizeof(vkNewState));

  017c8	e3a02020	 mov         r2, #0x20
  017cc	e3a01000	 mov         r1, #0
  017d0	e28d000c	 add         r0, sp, #0xC
  017d4	eb000000	 bl          memset

; 1198 : 
; 1199 :         // Set timeout period depending on data state
; 1200 :         timeout = keyDown ? pDevice->samplePeriod : INFINITE;

  017d8	e59d305c	 ldr         r3, [sp, #0x5C]
  017dc	e3530000	 cmp         r3, #0
  017e0	0a000004	 beq         |$LN19@KPD_IntrTh|
  017e4	e59d3000	 ldr         r3, [sp]
  017e8	e2833014	 add         r3, r3, #0x14
  017ec	e5933000	 ldr         r3, [r3]
  017f0	e58d3080	 str         r3, [sp, #0x80]
  017f4	ea000001	 b           |$LN20@KPD_IntrTh|
  017f8		 |$LN19@KPD_IntrTh|
  017f8	e3e03000	 mvn         r3, #0
  017fc	e58d3080	 str         r3, [sp, #0x80]
  01800		 |$LN20@KPD_IntrTh|
  01800	e59d3080	 ldr         r3, [sp, #0x80]
  01804	e58d304c	 str         r3, [sp, #0x4C]

; 1201 : 
; 1202 :         // Interrupt is done
; 1203 :         }

  01808	eaffffa0	 b           |$LN8@KPD_IntrTh|
  0180c		 |$LN7@KPD_IntrTh|
  0180c		 |$cleanUp$44156|

; 1204 : 
; 1205 : cleanUp:
; 1206 :     if ( pRemapState != NULL )

  0180c	e59d3004	 ldr         r3, [sp, #4]
  01810	e3530000	 cmp         r3, #0
  01814	0a000001	 beq         |$LN2@KPD_IntrTh|

; 1207 :         {
; 1208 :         LocalFree(pRemapState);

  01818	e59d0004	 ldr         r0, [sp, #4]
  0181c	eb000000	 bl          LocalFree
  01820		 |$LN2@KPD_IntrTh|

; 1209 :         }
; 1210 : 
; 1211 :     if ( pRepeatState != NULL )

  01820	e59d3008	 ldr         r3, [sp, #8]
  01824	e3530000	 cmp         r3, #0
  01828	0a000001	 beq         |$LN1@KPD_IntrTh|

; 1212 :         {
; 1213 :         LocalFree(pRepeatState);

  0182c	e59d0008	 ldr         r0, [sp, #8]
  01830	eb000000	 bl          LocalFree
  01834		 |$LN1@KPD_IntrTh|

; 1214 :         }
; 1215 : 
; 1216 :     return ERROR_SUCCESS;

  01834	e59d0060	 ldr         r0, [sp, #0x60]
  01838	eb000000	 bl          __security_check_cookie
  0183c	e3a03000	 mov         r3, #0
  01840	e58d3064	 str         r3, [sp, #0x64]

; 1217 : }

  01844	e59d0064	 ldr         r0, [sp, #0x64]
  01848	e28dd084	 add         sp, sp, #0x84
  0184c	e89d6000	 ldmia       sp, {sp, lr}
  01850	e12fff1e	 bx          lr
  01854		 |$LN24@KPD_IntrTh|
  01854		 |$LN25@KPD_IntrTh|
  01854	00000000	 DCD         |??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  01858		 |$LN26@KPD_IntrTh|
  01858	00000000	 DCD         |dpCurSettings|
  0185c		 |$LN27@KPD_IntrTh|
  0185c	00000000	 DCD         |g_keypadRepeat|
  01860		 |$LN28@KPD_IntrTh|
  01860	00000000	 DCD         |??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  01864		 |$LN29@KPD_IntrTh|
  01864	00000000	 DCD         |g_keypadRemap|
  01868		 |$LN30@KPD_IntrTh|
  01868	00000000	 DCD         |__security_cookie|
  0186c		 |$M44572|

			 ENDP  ; |KPD_IntrThread|

	IMPORT	|g_keypadVK|

  00078			 AREA	 |.pdata|, PDATA
|$T44586| DCD	|$LN14@PhysicalSt|
	DCD	0x40005e04
; Function compile flags: /Odtp

  0186c			 AREA	 |.text|, CODE, ARM

  0186c		 |PhysicalStateToVirtualState| PROC

; 774  : {

  0186c		 |$LN14@PhysicalSt|
  0186c	e1a0c00d	 mov         r12, sp
  01870	e92d0007	 stmdb       sp!, {r0 - r2}
  01874	e92d5000	 stmdb       sp!, {r12, lr}
  01878	e24dd018	 sub         sp, sp, #0x18
  0187c		 |$M44583|

; 775  :     BOOL keyDown = FALSE;

  0187c	e3a03000	 mov         r3, #0
  01880	e58d300c	 str         r3, [sp, #0xC]

; 776  :     USHORT state;
; 777  :     ULONG ik, ix, row, column;
; 778  :    
; 779  : 
; 780  :     for (row = 0, ik = 0; row < KEYPAD_ROWS; row++)

  01884	e3a03000	 mov         r3, #0
  01888	e58d3008	 str         r3, [sp, #8]
  0188c	e3a03000	 mov         r3, #0
  01890	e58d3010	 str         r3, [sp, #0x10]
  01894	ea000002	 b           |$LN9@PhysicalSt|
  01898		 |$LN8@PhysicalSt|
  01898	e59d3008	 ldr         r3, [sp, #8]
  0189c	e2833001	 add         r3, r3, #1
  018a0	e58d3008	 str         r3, [sp, #8]
  018a4		 |$LN9@PhysicalSt|
  018a4	e59d3008	 ldr         r3, [sp, #8]
  018a8	e3530008	 cmp         r3, #8
  018ac	2a00003f	 bcs         |$LN7@PhysicalSt|

; 781  :         {
; 782  : 
; 783  :         // Get matrix state        
; 784  :         ix = row;

  018b0	e59d3008	 ldr         r3, [sp, #8]
  018b4	e58d3004	 str         r3, [sp, #4]

; 785  :         state = matrix[ix] & 0xFF;

  018b8	e59d2020	 ldr         r2, [sp, #0x20]
  018bc	e59d3004	 ldr         r3, [sp, #4]
  018c0	e0823003	 add         r3, r2, r3
  018c4	e5d33000	 ldrb        r3, [r3]
  018c8	e20330ff	 and         r3, r3, #0xFF
  018cc	e1a03803	 mov         r3, r3, lsl #16
  018d0	e1a03823	 mov         r3, r3, lsr #16
  018d4	e1cd31b4	 strh        r3, [sp, #0x14]

; 786  : 
; 787  :         // If no-key is pressed continue with new rows
; 788  :         if (state == 0) 

  018d8	e1dd31b4	 ldrh        r3, [sp, #0x14]
  018dc	e3530000	 cmp         r3, #0
  018e0	1a000003	 bne         |$LN6@PhysicalSt|

; 789  :             {
; 790  :             ik += KEYPAD_COLUMNS;

  018e4	e59d3010	 ldr         r3, [sp, #0x10]
  018e8	e2833008	 add         r3, r3, #8
  018ec	e58d3010	 str         r3, [sp, #0x10]

; 791  :             continue;

  018f0	eaffffe8	 b           |$LN8@PhysicalSt|
  018f4		 |$LN6@PhysicalSt|

; 792  :             }
; 793  :         
; 794  :         for (column = 0; column < KEYPAD_COLUMNS; column++, ik++)

  018f4	e3a03000	 mov         r3, #0
  018f8	e58d3000	 str         r3, [sp]
  018fc	ea000005	 b           |$LN5@PhysicalSt|
  01900		 |$LN4@PhysicalSt|
  01900	e59d3000	 ldr         r3, [sp]
  01904	e2833001	 add         r3, r3, #1
  01908	e58d3000	 str         r3, [sp]
  0190c	e59d3010	 ldr         r3, [sp, #0x10]
  01910	e2833001	 add         r3, r3, #1
  01914	e58d3010	 str         r3, [sp, #0x10]
  01918		 |$LN5@PhysicalSt|
  01918	e59d3000	 ldr         r3, [sp]
  0191c	e3530008	 cmp         r3, #8
  01920	2a000021	 bcs         |$LN3@PhysicalSt|

; 795  :             {
; 796  :             if ((state & (1 << column)) != 0)

  01924	e1dd31b4	 ldrh        r3, [sp, #0x14]
  01928	e1a01003	 mov         r1, r3
  0192c	e59d2000	 ldr         r2, [sp]
  01930	e3a03001	 mov         r3, #1
  01934	e1a03213	 mov         r3, r3, lsl r2
  01938	e1110003	 tst         r1, r3
  0193c	0a000019	 beq         |$LN2@PhysicalSt|

; 797  :                 {
; 798  :                 // g_keypadVK is defined by the platform
; 799  :                 UINT8 vk = g_keypadVK[ik];

  01940	e59f2098	 ldr         r2, [pc, #0x98]
  01944	e59d3010	 ldr         r3, [sp, #0x10]
  01948	e0823003	 add         r3, r2, r3
  0194c	e5d33000	 ldrb        r3, [r3]
  01950	e5cd3016	 strb        r3, [sp, #0x16]

; 800  :                 vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  01954	e5dd3016	 ldrb        r3, [sp, #0x16]
  01958	e1a012c3	 mov         r1, r3, asr #5
  0195c	e3a03004	 mov         r3, #4
  01960	e0020391	 mul         r2, r1, r3
  01964	e59d3024	 ldr         r3, [sp, #0x24]
  01968	e0831002	 add         r1, r3, r2
  0196c	e5dd3016	 ldrb        r3, [sp, #0x16]
  01970	e203201f	 and         r2, r3, #0x1F
  01974	e3a03001	 mov         r3, #1
  01978	e1a02213	 mov         r2, r3, lsl r2
  0197c	e5913000	 ldr         r3, [r1]
  01980	e1830002	 orr         r0, r3, r2
  01984	e5dd3016	 ldrb        r3, [sp, #0x16]
  01988	e1a012c3	 mov         r1, r3, asr #5
  0198c	e3a03004	 mov         r3, #4
  01990	e0020391	 mul         r2, r1, r3
  01994	e59d3024	 ldr         r3, [sp, #0x24]
  01998	e0833002	 add         r3, r3, r2
  0199c	e5830000	 str         r0, [r3]

; 801  :                 keyDown = TRUE;

  019a0	e3a03001	 mov         r3, #1
  019a4	e58d300c	 str         r3, [sp, #0xC]
  019a8		 |$LN2@PhysicalSt|

; 802  :                 }
; 803  :             }

  019a8	eaffffd4	 b           |$LN4@PhysicalSt|
  019ac		 |$LN3@PhysicalSt|

; 804  :         }

  019ac	eaffffb9	 b           |$LN8@PhysicalSt|
  019b0		 |$LN7@PhysicalSt|

; 805  : 
; 806  :     if (keyDown && (pKeyDown != NULL)) *pKeyDown = TRUE;

  019b0	e59d300c	 ldr         r3, [sp, #0xC]
  019b4	e3530000	 cmp         r3, #0
  019b8	0a000005	 beq         |$LN1@PhysicalSt|
  019bc	e59d3028	 ldr         r3, [sp, #0x28]
  019c0	e3530000	 cmp         r3, #0
  019c4	0a000002	 beq         |$LN1@PhysicalSt|
  019c8	e59d2028	 ldr         r2, [sp, #0x28]
  019cc	e3a03001	 mov         r3, #1
  019d0	e5823000	 str         r3, [r2]
  019d4		 |$LN1@PhysicalSt|

; 807  : }

  019d4	e28dd018	 add         sp, sp, #0x18
  019d8	e89d6000	 ldmia       sp, {sp, lr}
  019dc	e12fff1e	 bx          lr
  019e0		 |$LN15@PhysicalSt|
  019e0		 |$LN16@PhysicalSt|
  019e0	00000000	 DCD         |g_keypadVK|
  019e4		 |$M44584|

			 ENDP  ; |PhysicalStateToVirtualState|

	EXPORT	|??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'

  00080			 AREA	 |.pdata|, PDATA
|$T44597| DCD	|$LN41@VirtualKey|
	DCD	0x4001b804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "h", 0x0, "o", 0x0, "l"
	DCB	0x0, "d", 0x0, " ", 0x0, "v", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "v"
	DCB	0x0, "k", 0x0, "e", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  019e4			 AREA	 |.text|, CODE, ARM

  019e4		 |VirtualKeyRemap| PROC

; 823  : {

  019e4		 |$LN41@VirtualKey|
  019e4	e1a0c00d	 mov         r12, sp
  019e8	e92d000f	 stmdb       sp!, {r0 - r3}
  019ec	e92d5000	 stmdb       sp!, {r12, lr}
  019f0	e24dd024	 sub         sp, sp, #0x24
  019f4		 |$M44594|

; 824  :     BOOL keyDown = FALSE;

  019f4	e3a03000	 mov         r3, #0
  019f8	e58d3004	 str         r3, [sp, #4]

; 825  :     int ix;
; 826  :     
; 827  :     for (ix = 0; ix < g_keypadRemap.count; ix++)

  019fc	e3a03000	 mov         r3, #0
  01a00	e58d3000	 str         r3, [sp]
  01a04	ea000002	 b           |$LN32@VirtualKey|
  01a08		 |$LN31@VirtualKey|
  01a08	e59d3000	 ldr         r3, [sp]
  01a0c	e2833001	 add         r3, r3, #1
  01a10	e58d3000	 str         r3, [sp]
  01a14		 |$LN32@VirtualKey|
  01a14	e59f36a4	 ldr         r3, [pc, #0x6A4]
  01a18	e1d330b0	 ldrh        r3, [r3]
  01a1c	e1a02003	 mov         r2, r3
  01a20	e59d3000	 ldr         r3, [sp]
  01a24	e1530002	 cmp         r3, r2
  01a28	aa000195	 bge         |$LN30@VirtualKey|

; 828  :         {
; 829  :         const KEYPAD_REMAP_ITEM *pItem = &g_keypadRemap.pItem[ix];

  01a2c	e59d1000	 ldr         r1, [sp]
  01a30	e3a03008	 mov         r3, #8
  01a34	e0020391	 mul         r2, r1, r3
  01a38	e59f3680	 ldr         r3, [pc, #0x680]
  01a3c	e5933004	 ldr         r3, [r3, #4]
  01a40	e0833002	 add         r3, r3, r2
  01a44	e58d300c	 str         r3, [sp, #0xC]

; 830  :         KeypadRemapState_t *pState = &pRemapState[ix];

  01a48	e59d1000	 ldr         r1, [sp]
  01a4c	e3a03010	 mov         r3, #0x10
  01a50	e0020391	 mul         r2, r1, r3
  01a54	e59d3034	 ldr         r3, [sp, #0x34]
  01a58	e0833002	 add         r3, r3, r2
  01a5c	e58d3014	 str         r3, [sp, #0x14]

; 831  :         DWORD state = 0;

  01a60	e3a03000	 mov         r3, #0
  01a64	e58d3018	 str         r3, [sp, #0x18]

; 832  :         USHORT down = 0;

  01a68	e3a03000	 mov         r3, #0
  01a6c	e1cd30ba	 strh        r3, [sp, #0xA]

; 833  :         UINT8 vk = 0;

  01a70	e3a03000	 mov         r3, #0
  01a74	e5cd3008	 strb        r3, [sp, #8]

; 834  : 
; 835  :         // Count number of keys down & save down/up state
; 836  :         int ik;
; 837  :         for (ik = 0; ik < pItem->keys; ik++)

  01a78	e3a03000	 mov         r3, #0
  01a7c	e58d3010	 str         r3, [sp, #0x10]
  01a80	ea000002	 b           |$LN29@VirtualKey|
  01a84		 |$LN28@VirtualKey|
  01a84	e59d3010	 ldr         r3, [sp, #0x10]
  01a88	e2833001	 add         r3, r3, #1
  01a8c	e58d3010	 str         r3, [sp, #0x10]
  01a90		 |$LN29@VirtualKey|
  01a90	e59d300c	 ldr         r3, [sp, #0xC]
  01a94	e2833001	 add         r3, r3, #1
  01a98	e5d33000	 ldrb        r3, [r3]
  01a9c	e1a02003	 mov         r2, r3
  01aa0	e59d3010	 ldr         r3, [sp, #0x10]
  01aa4	e1530002	 cmp         r3, r2
  01aa8	aa00001f	 bge         |$LN27@VirtualKey|

; 838  :             {
; 839  :             vk = pItem->pVKeys[ik];

  01aac	e59d300c	 ldr         r3, [sp, #0xC]
  01ab0	e2833004	 add         r3, r3, #4
  01ab4	e5932000	 ldr         r2, [r3]
  01ab8	e59d3010	 ldr         r3, [sp, #0x10]
  01abc	e0823003	 add         r3, r2, r3
  01ac0	e5d33000	 ldrb        r3, [r3]
  01ac4	e5cd3008	 strb        r3, [sp, #8]

; 840  :             if ((vkNewState[vk >> 5] & (1 << (vk & 0x1F))) != 0)

  01ac8	e5dd3008	 ldrb        r3, [sp, #8]
  01acc	e1a012c3	 mov         r1, r3, asr #5
  01ad0	e3a03004	 mov         r3, #4
  01ad4	e0020391	 mul         r2, r1, r3
  01ad8	e59d3038	 ldr         r3, [sp, #0x38]
  01adc	e0831002	 add         r1, r3, r2
  01ae0	e5dd3008	 ldrb        r3, [sp, #8]
  01ae4	e203201f	 and         r2, r3, #0x1F
  01ae8	e3a03001	 mov         r3, #1
  01aec	e1a02213	 mov         r2, r3, lsl r2
  01af0	e5913000	 ldr         r3, [r1]
  01af4	e1130002	 tst         r3, r2
  01af8	0a00000a	 beq         |$LN26@VirtualKey|

; 841  :                 {
; 842  :                 state |= 1 << ik;

  01afc	e59d2010	 ldr         r2, [sp, #0x10]
  01b00	e3a03001	 mov         r3, #1
  01b04	e1a02213	 mov         r2, r3, lsl r2
  01b08	e59d3018	 ldr         r3, [sp, #0x18]
  01b0c	e1833002	 orr         r3, r3, r2
  01b10	e58d3018	 str         r3, [sp, #0x18]

; 843  :                 down++;

  01b14	e1dd30ba	 ldrh        r3, [sp, #0xA]
  01b18	e2833001	 add         r3, r3, #1
  01b1c	e1a03803	 mov         r3, r3, lsl #16
  01b20	e1a03823	 mov         r3, r3, lsr #16
  01b24	e1cd30ba	 strh        r3, [sp, #0xA]
  01b28		 |$LN26@VirtualKey|

; 844  :                 }
; 845  :             }

  01b28	eaffffd5	 b           |$LN28@VirtualKey|
  01b2c		 |$LN27@VirtualKey|

; 846  : 
; 847  :         // Depending on number of keys down
; 848  :         if (down >= pItem->keys && pItem->keys > 1)

  01b2c	e1dd30ba	 ldrh        r3, [sp, #0xA]
  01b30	e1a02003	 mov         r2, r3
  01b34	e59d300c	 ldr         r3, [sp, #0xC]
  01b38	e2833001	 add         r3, r3, #1
  01b3c	e5d33000	 ldrb        r3, [r3]
  01b40	e1520003	 cmp         r2, r3
  01b44	ba000057	 blt         |$LN25@VirtualKey|
  01b48	e59d300c	 ldr         r3, [sp, #0xC]
  01b4c	e2833001	 add         r3, r3, #1
  01b50	e5d33000	 ldrb        r3, [r3]
  01b54	e3530001	 cmp         r3, #1
  01b58	da000052	 ble         |$LN25@VirtualKey|

; 849  :             {
; 850  :             // Clear all mapping keys
; 851  :             for (ik = 0; ik < pItem->keys; ik++)

  01b5c	e3a03000	 mov         r3, #0
  01b60	e58d3010	 str         r3, [sp, #0x10]
  01b64	ea000002	 b           |$LN24@VirtualKey|
  01b68		 |$LN23@VirtualKey|
  01b68	e59d3010	 ldr         r3, [sp, #0x10]
  01b6c	e2833001	 add         r3, r3, #1
  01b70	e58d3010	 str         r3, [sp, #0x10]
  01b74		 |$LN24@VirtualKey|
  01b74	e59d300c	 ldr         r3, [sp, #0xC]
  01b78	e2833001	 add         r3, r3, #1
  01b7c	e5d33000	 ldrb        r3, [r3]
  01b80	e1a02003	 mov         r2, r3
  01b84	e59d3010	 ldr         r3, [sp, #0x10]
  01b88	e1530002	 cmp         r3, r2
  01b8c	aa00001b	 bge         |$LN22@VirtualKey|

; 852  :                 {
; 853  :                 vk = pItem->pVKeys[ik];

  01b90	e59d300c	 ldr         r3, [sp, #0xC]
  01b94	e2833004	 add         r3, r3, #4
  01b98	e5932000	 ldr         r2, [r3]
  01b9c	e59d3010	 ldr         r3, [sp, #0x10]
  01ba0	e0823003	 add         r3, r2, r3
  01ba4	e5d33000	 ldrb        r3, [r3]
  01ba8	e5cd3008	 strb        r3, [sp, #8]

; 854  :                 vkNewState[vk >> 5] &= ~(1 << (vk & 0x1F));

  01bac	e5dd3008	 ldrb        r3, [sp, #8]
  01bb0	e1a012c3	 mov         r1, r3, asr #5
  01bb4	e3a03004	 mov         r3, #4
  01bb8	e0020391	 mul         r2, r1, r3
  01bbc	e59d3038	 ldr         r3, [sp, #0x38]
  01bc0	e0831002	 add         r1, r3, r2
  01bc4	e5dd3008	 ldrb        r3, [sp, #8]
  01bc8	e203201f	 and         r2, r3, #0x1F
  01bcc	e3a03001	 mov         r3, #1
  01bd0	e1a03213	 mov         r3, r3, lsl r2
  01bd4	e1e02003	 mvn         r2, r3
  01bd8	e5913000	 ldr         r3, [r1]
  01bdc	e0030002	 and         r0, r3, r2
  01be0	e5dd3008	 ldrb        r3, [sp, #8]
  01be4	e1a012c3	 mov         r1, r3, asr #5
  01be8	e3a03004	 mov         r3, #4
  01bec	e0020391	 mul         r2, r1, r3
  01bf0	e59d3038	 ldr         r3, [sp, #0x38]
  01bf4	e0833002	 add         r3, r3, r2
  01bf8	e5830000	 str         r0, [r3]

; 855  :                 }

  01bfc	eaffffd9	 b           |$LN23@VirtualKey|
  01c00		 |$LN22@VirtualKey|

; 856  :             // All keys are down set final key
; 857  :             vk = pItem->vkey;

  01c00	e59d300c	 ldr         r3, [sp, #0xC]
  01c04	e5d33000	 ldrb        r3, [r3]
  01c08	e5cd3008	 strb        r3, [sp, #8]

; 858  :             vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  01c0c	e5dd3008	 ldrb        r3, [sp, #8]
  01c10	e1a012c3	 mov         r1, r3, asr #5
  01c14	e3a03004	 mov         r3, #4
  01c18	e0020391	 mul         r2, r1, r3
  01c1c	e59d3038	 ldr         r3, [sp, #0x38]
  01c20	e0831002	 add         r1, r3, r2
  01c24	e5dd3008	 ldrb        r3, [sp, #8]
  01c28	e203201f	 and         r2, r3, #0x1F
  01c2c	e3a03001	 mov         r3, #1
  01c30	e1a02213	 mov         r2, r3, lsl r2
  01c34	e5913000	 ldr         r3, [r1]
  01c38	e1830002	 orr         r0, r3, r2
  01c3c	e5dd3008	 ldrb        r3, [sp, #8]
  01c40	e1a012c3	 mov         r1, r3, asr #5
  01c44	e3a03004	 mov         r3, #4
  01c48	e0020391	 mul         r2, r1, r3
  01c4c	e59d3038	 ldr         r3, [sp, #0x38]
  01c50	e0833002	 add         r3, r3, r2
  01c54	e5830000	 str         r0, [r3]

; 859  :             DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 860  :                 L"Mapped vkey: 0x%x\r\n", vk
; 861  :                 ));

  01c58	e59f3458	 ldr         r3, [pc, #0x458]
  01c5c	e5933440	 ldr         r3, [r3, #0x440]
  01c60	e3130010	 tst         r3, #0x10
  01c64	0a000005	 beq         |$LN35@VirtualKey|
  01c68	e5dd1008	 ldrb        r1, [sp, #8]
  01c6c	e59f0448	 ldr         r0, [pc, #0x448]
  01c70	eb000000	 bl          NKDbgPrintfW
  01c74	e3a03001	 mov         r3, #1
  01c78	e58d301c	 str         r3, [sp, #0x1C]
  01c7c	ea000001	 b           |$LN36@VirtualKey|
  01c80		 |$LN35@VirtualKey|
  01c80	e3a03000	 mov         r3, #0
  01c84	e58d301c	 str         r3, [sp, #0x1C]
  01c88		 |$LN36@VirtualKey|

; 862  :             // Clear remap pending flag
; 863  :             pState->pending = FALSE;

  01c88	e59d2014	 ldr         r2, [sp, #0x14]
  01c8c	e3a03000	 mov         r3, #0
  01c90	e5823000	 str         r3, [r2]

; 864  :             // Set remap processing flag
; 865  :             pState->remapped = TRUE;

  01c94	e59d3014	 ldr         r3, [sp, #0x14]
  01c98	e2832004	 add         r2, r3, #4
  01c9c	e3a03001	 mov         r3, #1
  01ca0	e5823000	 str         r3, [r2]
  01ca4	ea0000f1	 b           |$LN21@VirtualKey|
  01ca8		 |$LN25@VirtualKey|

; 866  :             }
; 867  :         else if ( down > 0 )

  01ca8	e1dd30ba	 ldrh        r3, [sp, #0xA]
  01cac	e3530000	 cmp         r3, #0
  01cb0	da0000b1	 ble         |$LN20@VirtualKey|

; 868  :             {
; 869  :             // If already remapping or remapping is not pending
; 870  :             // or pending time expired
; 871  :             if  ( !pState->remapped &&  
; 872  :                  (!pState->pending || (INT32)( time - pState->time ) < 0 ) )

  01cb4	e59d3014	 ldr         r3, [sp, #0x14]
  01cb8	e2833004	 add         r3, r3, #4
  01cbc	e5933000	 ldr         r3, [r3]
  01cc0	e3530000	 cmp         r3, #0
  01cc4	1a000047	 bne         |$LN19@VirtualKey|
  01cc8	e59d3014	 ldr         r3, [sp, #0x14]
  01ccc	e5933000	 ldr         r3, [r3]
  01cd0	e3530000	 cmp         r3, #0
  01cd4	0a000005	 beq         |$LN18@VirtualKey|
  01cd8	e59d3014	 ldr         r3, [sp, #0x14]
  01cdc	e2833008	 add         r3, r3, #8
  01ce0	e59d202c	 ldr         r2, [sp, #0x2C]
  01ce4	e5933000	 ldr         r3, [r3]
  01ce8	e0523003	 subs        r3, r2, r3
  01cec	5a00003d	 bpl         |$LN19@VirtualKey|
  01cf0		 |$LN18@VirtualKey|

; 873  :                 {                
; 874  :                 // If we are not pending and not already remapping, start
; 875  :                 if (!pState->pending && !pState->remapped)

  01cf0	e59d3014	 ldr         r3, [sp, #0x14]
  01cf4	e5933000	 ldr         r3, [r3]
  01cf8	e3530000	 cmp         r3, #0
  01cfc	1a00000f	 bne         |$LN17@VirtualKey|
  01d00	e59d3014	 ldr         r3, [sp, #0x14]
  01d04	e2833004	 add         r3, r3, #4
  01d08	e5933000	 ldr         r3, [r3]
  01d0c	e3530000	 cmp         r3, #0
  01d10	1a00000a	 bne         |$LN17@VirtualKey|

; 876  :                     {
; 877  :                     pState->pending = TRUE;

  01d14	e59d2014	 ldr         r2, [sp, #0x14]
  01d18	e3a03001	 mov         r3, #1
  01d1c	e5823000	 str         r3, [r2]

; 878  :                     pState->time = time + pItem->delay;

  01d20	e59d300c	 ldr         r3, [sp, #0xC]
  01d24	e2833002	 add         r3, r3, #2
  01d28	e1d320b0	 ldrh        r2, [r3]
  01d2c	e59d302c	 ldr         r3, [sp, #0x2C]
  01d30	e0832002	 add         r2, r3, r2
  01d34	e59d3014	 ldr         r3, [sp, #0x14]
  01d38	e2833008	 add         r3, r3, #8
  01d3c	e5832000	 str         r2, [r3]
  01d40		 |$LN17@VirtualKey|

; 879  :                     }
; 880  :                 // Clear all mapping keys
; 881  :                 for (ik = 0; ik < pItem->keys; ik++)

  01d40	e3a03000	 mov         r3, #0
  01d44	e58d3010	 str         r3, [sp, #0x10]
  01d48	ea000002	 b           |$LN16@VirtualKey|
  01d4c		 |$LN15@VirtualKey|
  01d4c	e59d3010	 ldr         r3, [sp, #0x10]
  01d50	e2833001	 add         r3, r3, #1
  01d54	e58d3010	 str         r3, [sp, #0x10]
  01d58		 |$LN16@VirtualKey|
  01d58	e59d300c	 ldr         r3, [sp, #0xC]
  01d5c	e2833001	 add         r3, r3, #1
  01d60	e5d33000	 ldrb        r3, [r3]
  01d64	e1a02003	 mov         r2, r3
  01d68	e59d3010	 ldr         r3, [sp, #0x10]
  01d6c	e1530002	 cmp         r3, r2
  01d70	aa00001b	 bge         |$LN14@VirtualKey|

; 882  :                     {
; 883  :                     vk = pItem->pVKeys[ik];

  01d74	e59d300c	 ldr         r3, [sp, #0xC]
  01d78	e2833004	 add         r3, r3, #4
  01d7c	e5932000	 ldr         r2, [r3]
  01d80	e59d3010	 ldr         r3, [sp, #0x10]
  01d84	e0823003	 add         r3, r2, r3
  01d88	e5d33000	 ldrb        r3, [r3]
  01d8c	e5cd3008	 strb        r3, [sp, #8]

; 884  :                     vkNewState[vk >> 5] &= ~( 1 << ( vk & 0x1F ) );

  01d90	e5dd3008	 ldrb        r3, [sp, #8]
  01d94	e1a012c3	 mov         r1, r3, asr #5
  01d98	e3a03004	 mov         r3, #4
  01d9c	e0020391	 mul         r2, r1, r3
  01da0	e59d3038	 ldr         r3, [sp, #0x38]
  01da4	e0831002	 add         r1, r3, r2
  01da8	e5dd3008	 ldrb        r3, [sp, #8]
  01dac	e203201f	 and         r2, r3, #0x1F
  01db0	e3a03001	 mov         r3, #1
  01db4	e1a03213	 mov         r3, r3, lsl r2
  01db8	e1e02003	 mvn         r2, r3
  01dbc	e5913000	 ldr         r3, [r1]
  01dc0	e0030002	 and         r0, r3, r2
  01dc4	e5dd3008	 ldrb        r3, [sp, #8]
  01dc8	e1a012c3	 mov         r1, r3, asr #5
  01dcc	e3a03004	 mov         r3, #4
  01dd0	e0020391	 mul         r2, r1, r3
  01dd4	e59d3038	 ldr         r3, [sp, #0x38]
  01dd8	e0833002	 add         r3, r3, r2
  01ddc	e5830000	 str         r0, [r3]

; 885  :                     }

  01de0	eaffffd9	 b           |$LN15@VirtualKey|
  01de4		 |$LN14@VirtualKey|

; 886  :                 }
; 887  :             else if ( pState->remapped || 

  01de4	ea000063	 b           |$LN13@VirtualKey|
  01de8		 |$LN19@VirtualKey|

; 888  :                      (pItem->keys == 1 && (INT32)( time - pState->time ) >= 0) )

  01de8	e59d3014	 ldr         r3, [sp, #0x14]
  01dec	e2833004	 add         r3, r3, #4
  01df0	e5933000	 ldr         r3, [r3]
  01df4	e3530000	 cmp         r3, #0
  01df8	1a00000a	 bne         |$LN11@VirtualKey|
  01dfc	e59d300c	 ldr         r3, [sp, #0xC]
  01e00	e2833001	 add         r3, r3, #1
  01e04	e5d33000	 ldrb        r3, [r3]
  01e08	e3530001	 cmp         r3, #1
  01e0c	1a000059	 bne         |$LN12@VirtualKey|
  01e10	e59d3014	 ldr         r3, [sp, #0x14]
  01e14	e2833008	 add         r3, r3, #8
  01e18	e59d202c	 ldr         r2, [sp, #0x2C]
  01e1c	e5933000	 ldr         r3, [r3]
  01e20	e0523003	 subs        r3, r2, r3
  01e24	4a000053	 bmi         |$LN12@VirtualKey|
  01e28		 |$LN11@VirtualKey|

; 889  :                 {
; 890  :                 // This is press and hold key
; 891  :                 DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 892  :                     L"Mapped press and hold vkey: 0x%x\r\n", vk
; 893  :                     ));

  01e28	e59f3288	 ldr         r3, [pc, #0x288]
  01e2c	e5933440	 ldr         r3, [r3, #0x440]
  01e30	e3130010	 tst         r3, #0x10
  01e34	0a000005	 beq         |$LN37@VirtualKey|
  01e38	e5dd1008	 ldrb        r1, [sp, #8]
  01e3c	e59f0270	 ldr         r0, [pc, #0x270]
  01e40	eb000000	 bl          NKDbgPrintfW
  01e44	e3a03001	 mov         r3, #1
  01e48	e58d3020	 str         r3, [sp, #0x20]
  01e4c	ea000001	 b           |$LN38@VirtualKey|
  01e50		 |$LN37@VirtualKey|
  01e50	e3a03000	 mov         r3, #0
  01e54	e58d3020	 str         r3, [sp, #0x20]
  01e58		 |$LN38@VirtualKey|

; 894  :                     
; 895  :                 // Clear all mapping keys
; 896  :                 for (ik = 0; ik < pItem->keys; ik++)

  01e58	e3a03000	 mov         r3, #0
  01e5c	e58d3010	 str         r3, [sp, #0x10]
  01e60	ea000002	 b           |$LN10@VirtualKey|
  01e64		 |$LN9@VirtualKey|
  01e64	e59d3010	 ldr         r3, [sp, #0x10]
  01e68	e2833001	 add         r3, r3, #1
  01e6c	e58d3010	 str         r3, [sp, #0x10]
  01e70		 |$LN10@VirtualKey|
  01e70	e59d300c	 ldr         r3, [sp, #0xC]
  01e74	e2833001	 add         r3, r3, #1
  01e78	e5d33000	 ldrb        r3, [r3]
  01e7c	e1a02003	 mov         r2, r3
  01e80	e59d3010	 ldr         r3, [sp, #0x10]
  01e84	e1530002	 cmp         r3, r2
  01e88	aa00001b	 bge         |$LN8@VirtualKey|

; 897  :                     {
; 898  :                     vk = pItem->pVKeys[ik];

  01e8c	e59d300c	 ldr         r3, [sp, #0xC]
  01e90	e2833004	 add         r3, r3, #4
  01e94	e5932000	 ldr         r2, [r3]
  01e98	e59d3010	 ldr         r3, [sp, #0x10]
  01e9c	e0823003	 add         r3, r2, r3
  01ea0	e5d33000	 ldrb        r3, [r3]
  01ea4	e5cd3008	 strb        r3, [sp, #8]

; 899  :                     vkNewState[vk >> 5] &= ~( 1 << ( vk & 0x1F ) );

  01ea8	e5dd3008	 ldrb        r3, [sp, #8]
  01eac	e1a012c3	 mov         r1, r3, asr #5
  01eb0	e3a03004	 mov         r3, #4
  01eb4	e0020391	 mul         r2, r1, r3
  01eb8	e59d3038	 ldr         r3, [sp, #0x38]
  01ebc	e0831002	 add         r1, r3, r2
  01ec0	e5dd3008	 ldrb        r3, [sp, #8]
  01ec4	e203201f	 and         r2, r3, #0x1F
  01ec8	e3a03001	 mov         r3, #1
  01ecc	e1a03213	 mov         r3, r3, lsl r2
  01ed0	e1e02003	 mvn         r2, r3
  01ed4	e5913000	 ldr         r3, [r1]
  01ed8	e0030002	 and         r0, r3, r2
  01edc	e5dd3008	 ldrb        r3, [sp, #8]
  01ee0	e1a012c3	 mov         r1, r3, asr #5
  01ee4	e3a03004	 mov         r3, #4
  01ee8	e0020391	 mul         r2, r1, r3
  01eec	e59d3038	 ldr         r3, [sp, #0x38]
  01ef0	e0833002	 add         r3, r3, r2
  01ef4	e5830000	 str         r0, [r3]

; 900  :                     }

  01ef8	eaffffd9	 b           |$LN9@VirtualKey|
  01efc		 |$LN8@VirtualKey|

; 901  :                     
; 902  :                 vk = pItem->vkey;

  01efc	e59d300c	 ldr         r3, [sp, #0xC]
  01f00	e5d33000	 ldrb        r3, [r3]
  01f04	e5cd3008	 strb        r3, [sp, #8]

; 903  :                 vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  01f08	e5dd3008	 ldrb        r3, [sp, #8]
  01f0c	e1a012c3	 mov         r1, r3, asr #5
  01f10	e3a03004	 mov         r3, #4
  01f14	e0020391	 mul         r2, r1, r3
  01f18	e59d3038	 ldr         r3, [sp, #0x38]
  01f1c	e0831002	 add         r1, r3, r2
  01f20	e5dd3008	 ldrb        r3, [sp, #8]
  01f24	e203201f	 and         r2, r3, #0x1F
  01f28	e3a03001	 mov         r3, #1
  01f2c	e1a02213	 mov         r2, r3, lsl r2
  01f30	e5913000	 ldr         r3, [r1]
  01f34	e1830002	 orr         r0, r3, r2
  01f38	e5dd3008	 ldrb        r3, [sp, #8]
  01f3c	e1a012c3	 mov         r1, r3, asr #5
  01f40	e3a03004	 mov         r3, #4
  01f44	e0020391	 mul         r2, r1, r3
  01f48	e59d3038	 ldr         r3, [sp, #0x38]
  01f4c	e0833002	 add         r3, r3, r2
  01f50	e5830000	 str         r0, [r3]

; 904  :                 keyDown = TRUE;

  01f54	e3a03001	 mov         r3, #1
  01f58	e58d3004	 str         r3, [sp, #4]

; 905  :                 pState->pending = FALSE;

  01f5c	e59d2014	 ldr         r2, [sp, #0x14]
  01f60	e3a03000	 mov         r3, #0
  01f64	e5823000	 str         r3, [r2]

; 906  :                 pState->remapped = TRUE;

  01f68	e59d3014	 ldr         r3, [sp, #0x14]
  01f6c	e2832004	 add         r2, r3, #4
  01f70	e3a03001	 mov         r3, #1
  01f74	e5823000	 str         r3, [r2]
  01f78		 |$LN12@VirtualKey|
  01f78		 |$LN13@VirtualKey|

; 907  :                 }
; 908  :             }
; 909  :         else

  01f78	ea00003c	 b           |$LN7@VirtualKey|
  01f7c		 |$LN20@VirtualKey|

; 910  :             {            
; 911  :             // All keys are up, if remapping was pending set keys
; 912  :             if ( pState->pending )

  01f7c	e59d3014	 ldr         r3, [sp, #0x14]
  01f80	e5933000	 ldr         r3, [r3]
  01f84	e3530000	 cmp         r3, #0
  01f88	0a000034	 beq         |$LN6@VirtualKey|

; 913  :                 {            
; 914  :                 for (ik = 0; ik < pItem->keys; ik++)

  01f8c	e3a03000	 mov         r3, #0
  01f90	e58d3010	 str         r3, [sp, #0x10]
  01f94	ea000002	 b           |$LN5@VirtualKey|
  01f98		 |$LN4@VirtualKey|
  01f98	e59d3010	 ldr         r3, [sp, #0x10]
  01f9c	e2833001	 add         r3, r3, #1
  01fa0	e58d3010	 str         r3, [sp, #0x10]
  01fa4		 |$LN5@VirtualKey|
  01fa4	e59d300c	 ldr         r3, [sp, #0xC]
  01fa8	e2833001	 add         r3, r3, #1
  01fac	e5d33000	 ldrb        r3, [r3]
  01fb0	e1a02003	 mov         r2, r3
  01fb4	e59d3010	 ldr         r3, [sp, #0x10]
  01fb8	e1530002	 cmp         r3, r2
  01fbc	aa000024	 bge         |$LN3@VirtualKey|

; 915  :                     {
; 916  :                     if ( ( pState->state & ( 1 << ik ) ) != 0 )

  01fc0	e59d3014	 ldr         r3, [sp, #0x14]
  01fc4	e283100c	 add         r1, r3, #0xC
  01fc8	e59d2010	 ldr         r2, [sp, #0x10]
  01fcc	e3a03001	 mov         r3, #1
  01fd0	e1a02213	 mov         r2, r3, lsl r2
  01fd4	e5913000	 ldr         r3, [r1]
  01fd8	e1130002	 tst         r3, r2
  01fdc	0a00001b	 beq         |$LN2@VirtualKey|

; 917  :                         {                        
; 918  :                         vk = pItem->pVKeys[ik];

  01fe0	e59d300c	 ldr         r3, [sp, #0xC]
  01fe4	e2833004	 add         r3, r3, #4
  01fe8	e5932000	 ldr         r2, [r3]
  01fec	e59d3010	 ldr         r3, [sp, #0x10]
  01ff0	e0823003	 add         r3, r2, r3
  01ff4	e5d33000	 ldrb        r3, [r3]
  01ff8	e5cd3008	 strb        r3, [sp, #8]

; 919  :                         vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  01ffc	e5dd3008	 ldrb        r3, [sp, #8]
  02000	e1a012c3	 mov         r1, r3, asr #5
  02004	e3a03004	 mov         r3, #4
  02008	e0020391	 mul         r2, r1, r3
  0200c	e59d3038	 ldr         r3, [sp, #0x38]
  02010	e0831002	 add         r1, r3, r2
  02014	e5dd3008	 ldrb        r3, [sp, #8]
  02018	e203201f	 and         r2, r3, #0x1F
  0201c	e3a03001	 mov         r3, #1
  02020	e1a02213	 mov         r2, r3, lsl r2
  02024	e5913000	 ldr         r3, [r1]
  02028	e1830002	 orr         r0, r3, r2
  0202c	e5dd3008	 ldrb        r3, [sp, #8]
  02030	e1a012c3	 mov         r1, r3, asr #5
  02034	e3a03004	 mov         r3, #4
  02038	e0020391	 mul         r2, r1, r3
  0203c	e59d3038	 ldr         r3, [sp, #0x38]
  02040	e0833002	 add         r3, r3, r2
  02044	e5830000	 str         r0, [r3]

; 920  :                         keyDown = TRUE;

  02048	e3a03001	 mov         r3, #1
  0204c	e58d3004	 str         r3, [sp, #4]
  02050		 |$LN2@VirtualKey|

; 921  :                         }
; 922  :                     }

  02050	eaffffd0	 b           |$LN4@VirtualKey|
  02054		 |$LN3@VirtualKey|

; 923  :                 pState->pending = FALSE;

  02054	e59d2014	 ldr         r2, [sp, #0x14]
  02058	e3a03000	 mov         r3, #0
  0205c	e5823000	 str         r3, [r2]
  02060		 |$LN6@VirtualKey|

; 924  :                 }
; 925  :             pState->remapped = FALSE;

  02060	e59d3014	 ldr         r3, [sp, #0x14]
  02064	e2832004	 add         r2, r3, #4
  02068	e3a03000	 mov         r3, #0
  0206c	e5823000	 str         r3, [r2]
  02070		 |$LN7@VirtualKey|
  02070		 |$LN21@VirtualKey|

; 926  :             }
; 927  :         // Save key state
; 928  :         pState->state = state;

  02070	e59d3014	 ldr         r3, [sp, #0x14]
  02074	e283200c	 add         r2, r3, #0xC
  02078	e59d3018	 ldr         r3, [sp, #0x18]
  0207c	e5823000	 str         r3, [r2]

; 929  :         }

  02080	eafffe60	 b           |$LN31@VirtualKey|
  02084		 |$LN30@VirtualKey|

; 930  : 
; 931  :     // Set output variable
; 932  :     if (keyDown && (pKeyDown != NULL)) *pKeyDown = TRUE;

  02084	e59d3004	 ldr         r3, [sp, #4]
  02088	e3530000	 cmp         r3, #0
  0208c	0a000005	 beq         |$LN1@VirtualKey|
  02090	e59d3030	 ldr         r3, [sp, #0x30]
  02094	e3530000	 cmp         r3, #0
  02098	0a000002	 beq         |$LN1@VirtualKey|
  0209c	e59d2030	 ldr         r2, [sp, #0x30]
  020a0	e3a03001	 mov         r3, #1
  020a4	e5823000	 str         r3, [r2]
  020a8		 |$LN1@VirtualKey|

; 933  : }

  020a8	e28dd024	 add         sp, sp, #0x24
  020ac	e89d6000	 ldmia       sp, {sp, lr}
  020b0	e12fff1e	 bx          lr
  020b4		 |$LN42@VirtualKey|
  020b4		 |$LN43@VirtualKey|
  020b4	00000000	 DCD         |??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@|
  020b8		 |$LN44@VirtualKey|
  020b8	00000000	 DCD         |dpCurSettings|
  020bc		 |$LN45@VirtualKey|
  020bc	00000000	 DCD         |??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@|
  020c0		 |$LN46@VirtualKey|
  020c0	00000000	 DCD         |g_keypadRemap|
  020c4		 |$M44595|

			 ENDP  ; |VirtualKeyRemap|

	EXPORT	|??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@OIDADBP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@| [ DATA ] ; `string'

  00088			 AREA	 |.pdata|, PDATA
|$T44613| DCD	|$LN27@AutoRepeat|
	DCD	0x4000ca04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "p", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@OIDADBP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "b"
	DCB	0x0, "c", 0x0, "a", 0x0, "u", 0x0, "s", 0x0, "e", 0x0, " "
	DCB	0x0, "o", 0x0, "f", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  020c4			 AREA	 |.text|, CODE, ARM

  020c4		 |AutoRepeat| PROC

; 1028 : {

  020c4		 |$LN27@AutoRepeat|
  020c4	e1a0c00d	 mov         r12, sp
  020c8	e92d000f	 stmdb       sp!, {r0 - r3}
  020cc	e92d5000	 stmdb       sp!, {r12, lr}
  020d0	e24dd028	 sub         sp, sp, #0x28
  020d4		 |$M44610|

; 1029 :     ULONG ix;
; 1030 : 
; 1031 :     for (ix = 0; ix < g_keypadRepeat.count; ix++)

  020d4	e3a03000	 mov         r3, #0
  020d8	e58d3000	 str         r3, [sp]
  020dc	ea000002	 b           |$LN16@AutoRepeat|
  020e0		 |$LN15@AutoRepeat|
  020e0	e59d3000	 ldr         r3, [sp]
  020e4	e2833001	 add         r3, r3, #1
  020e8	e58d3000	 str         r3, [sp]
  020ec		 |$LN16@AutoRepeat|
  020ec	e59f32f4	 ldr         r3, [pc, #0x2F4]
  020f0	e1d320b0	 ldrh        r2, [r3]
  020f4	e59d3000	 ldr         r3, [sp]
  020f8	e1530002	 cmp         r3, r2
  020fc	2a0000b3	 bcs         |$LN14@AutoRepeat|

; 1032 :         {
; 1033 :         const KEYPAD_REPEAT_ITEM *pItem = &g_keypadRepeat.pItem[ix];

  02100	e59d1000	 ldr         r1, [sp]
  02104	e3a03010	 mov         r3, #0x10
  02108	e0020391	 mul         r2, r1, r3
  0210c	e59f32d4	 ldr         r3, [pc, #0x2D4]
  02110	e5933004	 ldr         r3, [r3, #4]
  02114	e0833002	 add         r3, r3, r2
  02118	e58d3008	 str         r3, [sp, #8]

; 1034 :         KeypadRepeatState_t *pState = &pRepeatState[ix];

  0211c	e59d1000	 ldr         r1, [sp]
  02120	e3a0300c	 mov         r3, #0xC
  02124	e0020391	 mul         r2, r1, r3
  02128	e59d303c	 ldr         r3, [sp, #0x3C]
  0212c	e0833002	 add         r3, r3, r2
  02130	e58d300c	 str         r3, [sp, #0xC]

; 1035 :         DWORD delay;        
; 1036 :         UINT8 vkBlock;
; 1037 :         UINT8 vk = pItem->vkey;

  02134	e59d3008	 ldr         r3, [sp, #8]
  02138	e5d33000	 ldrb        r3, [r3]
  0213c	e5cd3004	 strb        r3, [sp, #4]

; 1038 : 
; 1039 :         if ((vkNewState[vk >> 5] & (1 << (vk & 0x1F))) != 0)

  02140	e5dd3004	 ldrb        r3, [sp, #4]
  02144	e1a012c3	 mov         r1, r3, asr #5
  02148	e3a03004	 mov         r3, #4
  0214c	e0020391	 mul         r2, r1, r3
  02150	e59d3034	 ldr         r3, [sp, #0x34]
  02154	e0831002	 add         r1, r3, r2
  02158	e5dd3004	 ldrb        r3, [sp, #4]
  0215c	e203201f	 and         r2, r3, #0x1F
  02160	e3a03001	 mov         r3, #1
  02164	e1a02213	 mov         r2, r3, lsl r2
  02168	e5913000	 ldr         r3, [r1]
  0216c	e1130002	 tst         r3, r2
  02170	0a00008e	 beq         |$LN13@AutoRepeat|

; 1040 :             {
; 1041 :             if (!pState->pending)

  02174	e59d300c	 ldr         r3, [sp, #0xC]
  02178	e5933000	 ldr         r3, [r3]
  0217c	e3530000	 cmp         r3, #0
  02180	1a000018	 bne         |$LN12@AutoRepeat|

; 1042 :                 {
; 1043 :                 // Key was just pressed
; 1044 :                 delay = pItem->firstDelay;

  02184	e59d3008	 ldr         r3, [sp, #8]
  02188	e2833002	 add         r3, r3, #2
  0218c	e1d330b0	 ldrh        r3, [r3]
  02190	e58d3010	 str         r3, [sp, #0x10]

; 1045 :                 if (delay == 0) delay = pDevice->firstRepeat;

  02194	e59d3010	 ldr         r3, [sp, #0x10]
  02198	e3530000	 cmp         r3, #0
  0219c	1a000003	 bne         |$LN11@AutoRepeat|
  021a0	e59d3030	 ldr         r3, [sp, #0x30]
  021a4	e2833018	 add         r3, r3, #0x18
  021a8	e5933000	 ldr         r3, [r3]
  021ac	e58d3010	 str         r3, [sp, #0x10]
  021b0		 |$LN11@AutoRepeat|

; 1046 :                 pState->time = time + delay;

  021b0	e59d2038	 ldr         r2, [sp, #0x38]
  021b4	e59d3010	 ldr         r3, [sp, #0x10]
  021b8	e0822003	 add         r2, r2, r3
  021bc	e59d300c	 ldr         r3, [sp, #0xC]
  021c0	e2833004	 add         r3, r3, #4
  021c4	e5832000	 str         r2, [r3]

; 1047 :                 pState->pending = TRUE;

  021c8	e59d200c	 ldr         r2, [sp, #0xC]
  021cc	e3a03001	 mov         r3, #1
  021d0	e5823000	 str         r3, [r2]

; 1048 :                 pState->blocked = FALSE;

  021d4	e59d300c	 ldr         r3, [sp, #0xC]
  021d8	e2832008	 add         r2, r3, #8
  021dc	e3a03000	 mov         r3, #0
  021e0	e5823000	 str         r3, [r2]
  021e4	ea000070	 b           |$LN10@AutoRepeat|
  021e8		 |$LN12@AutoRepeat|

; 1049 :                 }
; 1050 :             else if (((INT32)(time - pState->time)) >= 0)

  021e8	e59d300c	 ldr         r3, [sp, #0xC]
  021ec	e2833004	 add         r3, r3, #4
  021f0	e59d2038	 ldr         r2, [sp, #0x38]
  021f4	e5933000	 ldr         r3, [r3]
  021f8	e0523003	 subs        r3, r2, r3
  021fc	4a00006a	 bmi         |$LN9@AutoRepeat|

; 1051 :                 {
; 1052 :                 // Check if any blocking keys are pressed
; 1053 :                 const KEYPAD_REPEAT_BLOCK *pBlock = pItem->pBlock;

  02200	e59d3008	 ldr         r3, [sp, #8]
  02204	e283300c	 add         r3, r3, #0xC
  02208	e5933000	 ldr         r3, [r3]
  0220c	e58d3014	 str         r3, [sp, #0x14]

; 1054 :                 if (pBlock != 0)

  02210	e59d3014	 ldr         r3, [sp, #0x14]
  02214	e3530000	 cmp         r3, #0
  02218	0a000032	 beq         |$LN8@AutoRepeat|

; 1055 :                     {
; 1056 :                     int ik;
; 1057 :                     for ( ik = 0; ik < pBlock->count; ik++ )

  0221c	e3a03000	 mov         r3, #0
  02220	e58d3018	 str         r3, [sp, #0x18]
  02224	ea000002	 b           |$LN7@AutoRepeat|
  02228		 |$LN6@AutoRepeat|
  02228	e59d3018	 ldr         r3, [sp, #0x18]
  0222c	e2833001	 add         r3, r3, #1
  02230	e58d3018	 str         r3, [sp, #0x18]
  02234		 |$LN7@AutoRepeat|
  02234	e59d3014	 ldr         r3, [sp, #0x14]
  02238	e5d33000	 ldrb        r3, [r3]
  0223c	e1a02003	 mov         r2, r3
  02240	e59d3018	 ldr         r3, [sp, #0x18]
  02244	e1530002	 cmp         r3, r2
  02248	aa000026	 bge         |$LN5@AutoRepeat|

; 1058 :                         {
; 1059 :                         vkBlock = pBlock->pVKey[ik];

  0224c	e59d3014	 ldr         r3, [sp, #0x14]
  02250	e2833004	 add         r3, r3, #4
  02254	e5932000	 ldr         r2, [r3]
  02258	e59d3018	 ldr         r3, [sp, #0x18]
  0225c	e0823003	 add         r3, r2, r3
  02260	e5d33000	 ldrb        r3, [r3]
  02264	e5cd3005	 strb        r3, [sp, #5]

; 1060 :                         if ((vkNewState[vkBlock >> 5] &
; 1061 :                                (1 << (vkBlock & 0x1F))) != 0)

  02268	e5dd3005	 ldrb        r3, [sp, #5]
  0226c	e1a012c3	 mov         r1, r3, asr #5
  02270	e3a03004	 mov         r3, #4
  02274	e0020391	 mul         r2, r1, r3
  02278	e59d3034	 ldr         r3, [sp, #0x34]
  0227c	e0831002	 add         r1, r3, r2
  02280	e5dd3005	 ldrb        r3, [sp, #5]
  02284	e203201f	 and         r2, r3, #0x1F
  02288	e3a03001	 mov         r3, #1
  0228c	e1a02213	 mov         r2, r3, lsl r2
  02290	e5913000	 ldr         r3, [r1]
  02294	e1130002	 tst         r3, r2
  02298	0a000011	 beq         |$LN4@AutoRepeat|

; 1062 :                             {
; 1063 :                             pState->blocked = TRUE;

  0229c	e59d300c	 ldr         r3, [sp, #0xC]
  022a0	e2832008	 add         r2, r3, #8
  022a4	e3a03001	 mov         r3, #1
  022a8	e5823000	 str         r3, [r2]

; 1064 :                             DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 1065 :                                 L"Block repeat: 0x%x bcause of 0x%x\r\n",
; 1066 :                                 vk, vkBlock
; 1067 :                                 ));

  022ac	e59f312c	 ldr         r3, [pc, #0x12C]
  022b0	e5933440	 ldr         r3, [r3, #0x440]
  022b4	e3130010	 tst         r3, #0x10
  022b8	0a000006	 beq         |$LN19@AutoRepeat|
  022bc	e5dd2005	 ldrb        r2, [sp, #5]
  022c0	e5dd1004	 ldrb        r1, [sp, #4]
  022c4	e59f0118	 ldr         r0, [pc, #0x118]
  022c8	eb000000	 bl          NKDbgPrintfW
  022cc	e3a03001	 mov         r3, #1
  022d0	e58d301c	 str         r3, [sp, #0x1C]
  022d4	ea000001	 b           |$LN20@AutoRepeat|
  022d8		 |$LN19@AutoRepeat|
  022d8	e3a03000	 mov         r3, #0
  022dc	e58d301c	 str         r3, [sp, #0x1C]
  022e0		 |$LN20@AutoRepeat|

; 1068 :                             break;

  022e0	ea000000	 b           |$LN5@AutoRepeat|
  022e4		 |$LN4@AutoRepeat|

; 1069 :                             }
; 1070 :                         }

  022e4	eaffffcf	 b           |$LN6@AutoRepeat|
  022e8		 |$LN5@AutoRepeat|
  022e8		 |$LN8@AutoRepeat|

; 1071 :                     }
; 1072 :                 
; 1073 :                 // Repeat if not blocked
; 1074 :                 if (!pState->blocked)

  022e8	e59d300c	 ldr         r3, [sp, #0xC]
  022ec	e2833008	 add         r3, r3, #8
  022f0	e5933000	 ldr         r3, [r3]
  022f4	e3530000	 cmp         r3, #0
  022f8	1a00001a	 bne         |$LN3@AutoRepeat|

; 1075 :                     {
; 1076 :                     DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 1077 :                         L"Key Repeat: 0x%x\r\n", vk
; 1078 :                         ));

  022fc	e59f30dc	 ldr         r3, [pc, #0xDC]
  02300	e5933440	 ldr         r3, [r3, #0x440]
  02304	e3130010	 tst         r3, #0x10
  02308	0a000005	 beq         |$LN21@AutoRepeat|
  0230c	e5dd1004	 ldrb        r1, [sp, #4]
  02310	e59f00c4	 ldr         r0, [pc, #0xC4]
  02314	eb000000	 bl          NKDbgPrintfW
  02318	e3a03001	 mov         r3, #1
  0231c	e58d3020	 str         r3, [sp, #0x20]
  02320	ea000001	 b           |$LN22@AutoRepeat|
  02324		 |$LN21@AutoRepeat|
  02324	e3a03000	 mov         r3, #0
  02328	e58d3020	 str         r3, [sp, #0x20]
  0232c		 |$LN22@AutoRepeat|

; 1079 :                     SendKeyPadEvent(vk, 0, pItem->silent ? KEYEVENTF_SILENT : 0, 0);

  0232c	e59d3008	 ldr         r3, [sp, #8]
  02330	e2833008	 add         r3, r3, #8
  02334	e5933000	 ldr         r3, [r3]
  02338	e3530000	 cmp         r3, #0
  0233c	0a000002	 beq         |$LN23@AutoRepeat|
  02340	e3a03004	 mov         r3, #4
  02344	e58d3024	 str         r3, [sp, #0x24]
  02348	ea000001	 b           |$LN24@AutoRepeat|
  0234c		 |$LN23@AutoRepeat|
  0234c	e3a03000	 mov         r3, #0
  02350	e58d3024	 str         r3, [sp, #0x24]
  02354		 |$LN24@AutoRepeat|
  02354	e3a03000	 mov         r3, #0
  02358	e59d2024	 ldr         r2, [sp, #0x24]
  0235c	e3a01000	 mov         r1, #0
  02360	e5dd0004	 ldrb        r0, [sp, #4]
  02364	eb000000	 bl          SendKeyPadEvent
  02368		 |$LN3@AutoRepeat|

; 1080 :                     }
; 1081 :                 // Set time for next repeat
; 1082 :                 delay = pItem->nextDelay;

  02368	e59d3008	 ldr         r3, [sp, #8]
  0236c	e2833004	 add         r3, r3, #4
  02370	e1d330b0	 ldrh        r3, [r3]
  02374	e58d3010	 str         r3, [sp, #0x10]

; 1083 :                 if (delay == 0) delay = pDevice->nextRepeat;

  02378	e59d3010	 ldr         r3, [sp, #0x10]
  0237c	e3530000	 cmp         r3, #0
  02380	1a000003	 bne         |$LN2@AutoRepeat|
  02384	e59d3030	 ldr         r3, [sp, #0x30]
  02388	e283301c	 add         r3, r3, #0x1C
  0238c	e5933000	 ldr         r3, [r3]
  02390	e58d3010	 str         r3, [sp, #0x10]
  02394		 |$LN2@AutoRepeat|

; 1084 :                 pState->time = time + delay;

  02394	e59d2038	 ldr         r2, [sp, #0x38]
  02398	e59d3010	 ldr         r3, [sp, #0x10]
  0239c	e0822003	 add         r2, r2, r3
  023a0	e59d300c	 ldr         r3, [sp, #0xC]
  023a4	e2833004	 add         r3, r3, #4
  023a8	e5832000	 str         r2, [r3]
  023ac		 |$LN9@AutoRepeat|
  023ac		 |$LN10@AutoRepeat|

; 1085 :                 }
; 1086 :             }
; 1087 :         else

  023ac	ea000006	 b           |$LN1@AutoRepeat|
  023b0		 |$LN13@AutoRepeat|

; 1088 :             {
; 1089 :             pState->pending = FALSE;

  023b0	e59d200c	 ldr         r2, [sp, #0xC]
  023b4	e3a03000	 mov         r3, #0
  023b8	e5823000	 str         r3, [r2]

; 1090 :             pState->blocked = FALSE;

  023bc	e59d300c	 ldr         r3, [sp, #0xC]
  023c0	e2832008	 add         r2, r3, #8
  023c4	e3a03000	 mov         r3, #0
  023c8	e5823000	 str         r3, [r2]
  023cc		 |$LN1@AutoRepeat|

; 1091 :             }
; 1092 :         }

  023cc	eaffff43	 b           |$LN15@AutoRepeat|
  023d0		 |$LN14@AutoRepeat|

; 1093 : }

  023d0	e28dd028	 add         sp, sp, #0x28
  023d4	e89d6000	 ldmia       sp, {sp, lr}
  023d8	e12fff1e	 bx          lr
  023dc		 |$LN28@AutoRepeat|
  023dc		 |$LN29@AutoRepeat|
  023dc	00000000	 DCD         |??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@|
  023e0		 |$LN30@AutoRepeat|
  023e0	00000000	 DCD         |dpCurSettings|
  023e4		 |$LN31@AutoRepeat|
  023e4	00000000	 DCD         |??_C@_1GK@OIDADBP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@|
  023e8		 |$LN32@AutoRepeat|
  023e8	00000000	 DCD         |g_keypadRepeat|
  023ec		 |$M44611|

			 ENDP  ; |AutoRepeat|

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@OPEGNFKJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@FAODOCHI@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAL?$AAi?$AAg?$AAh?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx@| [ DATA ] ; `string'
	IMPORT	|NLedSetDevice|

  00090			 AREA	 |.pdata|, PDATA
|$T44627| DCD	|$LN13@KPD_LightT|
	DCD	0x40006f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@OPEGNFKJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "T", 0x0, "P", 0x0, "S", 0x0, "6", 0x0, "5", 0x0, "9"
	DCB	0x0, "X", 0x0, "X", 0x0, "\\", 0x0, "K", 0x0, "E", 0x0, "Y"
	DCB	0x0, "P", 0x0, "A", 0x0, "D", 0x0, "\\", 0x0, ".", 0x0, "\\"
	DCB	0x0, "k", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d"
	DCB	0x0, ".", 0x0, "c", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@FAODOCHI@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAL?$AAi?$AAg?$AAh?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "L", 0x0, "i"
	DCB	0x0, "g", 0x0, "h", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "s"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "r", 0x0, "o", 0x0, "u", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "e", 0x0, ".", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  023ec			 AREA	 |.text|, CODE, ARM

  023ec		 |KPD_LightThread| PROC

; 1229 : {

  023ec		 |$LN13@KPD_LightT|
  023ec	e1a0c00d	 mov         r12, sp
  023f0	e92d0001	 stmdb       sp!, {r0}
  023f4	e92d5000	 stmdb       sp!, {r12, lr}
  023f8	e24dd034	 sub         sp, sp, #0x34
  023fc		 |$M44624|

; 1230 :     DWORD               rc;
; 1231 :     struct NLED_SETTINGS_INFO  nledInfo;
; 1232 :     KeypadDevice_t     *pDevice = (KeypadDevice_t*)pContext;

  023fc	e59d303c	 ldr         r3, [sp, #0x3C]
  02400	e58d3000	 str         r3, [sp]

; 1233 :     DWORD               keypadLightTimeout = pDevice->KpLightTimeout_ms;

  02404	e59d3000	 ldr         r3, [sp]
  02408	e2833048	 add         r3, r3, #0x48
  0240c	e5933000	 ldr         r3, [r3]
  02410	e58d3024	 str         r3, [sp, #0x24]

; 1234 :     
; 1235 :     if( !pDevice ) 

  02414	e59d3000	 ldr         r3, [sp]
  02418	e3530000	 cmp         r3, #0
  0241c	1a000012	 bne         |$LN5@KPD_LightT|

; 1236 :         {
; 1237 :         DEBUGMSG(ZONE_ERROR, (L" KPD_LightThread: "
; 1238 :             L"Invalid context passed to thread routine.\r\n"
; 1239 :             ));

  02420	e59f317c	 ldr         r3, [pc, #0x17C]
  02424	e5933440	 ldr         r3, [r3, #0x440]
  02428	e3130001	 tst         r3, #1
  0242c	0a000004	 beq         |$LN8@KPD_LightT|
  02430	e59f0168	 ldr         r0, [pc, #0x168]
  02434	eb000000	 bl          NKDbgPrintfW
  02438	e3a03001	 mov         r3, #1
  0243c	e58d302c	 str         r3, [sp, #0x2C]
  02440	ea000001	 b           |$LN9@KPD_LightT|
  02444		 |$LN8@KPD_LightT|
  02444	e3a03000	 mov         r3, #0
  02448	e58d302c	 str         r3, [sp, #0x2C]
  0244c		 |$LN9@KPD_LightT|

; 1240 :         ASSERT( FALSE );

  0244c	e3a03b01	 mov         r3, #1, 22
  02450	e38330d8	 orr         r3, r3, #0xD8
  02454	e59f2140	 ldr         r2, [pc, #0x140]
  02458	e59f1138	 ldr         r1, [pc, #0x138]
  0245c	e59f0130	 ldr         r0, [pc, #0x130]
  02460	eb000000	 bl          NKDbgPrintfW
  02464	e6000010	 __debugbreak_ce

; 1241 :         goto cleanUp;

  02468	ea000043	 b           |$cleanUp$44194|
  0246c		 |$LN5@KPD_LightT|

; 1242 :         }
; 1243 : 
; 1244 :     // Set Thread Priority
; 1245 :     CeSetThreadPriority(pDevice->hLightThread, pDevice->priority256 + 1);

  0246c	e59d3000	 ldr         r3, [sp]
  02470	e2833004	 add         r3, r3, #4
  02474	e5933000	 ldr         r3, [r3]
  02478	e2831001	 add         r1, r3, #1
  0247c	e59d3000	 ldr         r3, [sp]
  02480	e2833038	 add         r3, r3, #0x38
  02484	e5930000	 ldr         r0, [r3]
  02488	eb000000	 bl          CeSetThreadPriority

; 1246 : 
; 1247 :     // initialize nled info
; 1248 :     
; 1249 :     // Setting NLED control parameters
; 1250 :     memset(&nledInfo, 0, sizeof(struct NLED_SETTINGS_INFO));

  0248c	e3a0201c	 mov         r2, #0x1C
  02490	e3a01000	 mov         r1, #0
  02494	e28d0008	 add         r0, sp, #8
  02498	eb000000	 bl          memset

; 1251 :     nledInfo.LedNum = pDevice->KpLedNum;

  0249c	e59d3000	 ldr         r3, [sp]
  024a0	e2833044	 add         r3, r3, #0x44
  024a4	e5933000	 ldr         r3, [r3]
  024a8	e58d3008	 str         r3, [sp, #8]

; 1252 :     nledInfo.TotalCycleTime = 0;

  024ac	e3a03000	 mov         r3, #0
  024b0	e58d3010	 str         r3, [sp, #0x10]

; 1253 :     nledInfo.OnTime = 0;

  024b4	e3a03000	 mov         r3, #0
  024b8	e58d3014	 str         r3, [sp, #0x14]

; 1254 :     nledInfo.OffTime = 0;

  024bc	e3a03000	 mov         r3, #0
  024c0	e58d3018	 str         r3, [sp, #0x18]

; 1255 :     nledInfo.MetaCycleOn = 1;

  024c4	e3a03001	 mov         r3, #1
  024c8	e58d301c	 str         r3, [sp, #0x1C]

; 1256 :     nledInfo.MetaCycleOff = 0;

  024cc	e3a03000	 mov         r3, #0
  024d0	e58d3020	 str         r3, [sp, #0x20]

; 1257 :     nledInfo.OffOnBlink = 1;

  024d4	e3a03001	 mov         r3, #1
  024d8	e58d300c	 str         r3, [sp, #0xC]

; 1258 :     NLedSetDevice(NLED_SETTINGS_INFO_ID, (void*)&nledInfo);

  024dc	e28d1008	 add         r1, sp, #8
  024e0	e3a00002	 mov         r0, #2
  024e4	eb000000	 bl          NLedSetDevice
  024e8		 |$LN10@KPD_LightT|
  024e8		 |$LN4@KPD_LightT|

; 1259 :     
; 1260 :     // Loop until we are not stopped
; 1261 :     for(;;)
; 1262 :         {
; 1263 :         rc = WaitForSingleObject(pDevice->hKeypressEvent, keypadLightTimeout);

  024e8	e59d1024	 ldr         r1, [sp, #0x24]
  024ec	e59d3000	 ldr         r3, [sp]
  024f0	e283303c	 add         r3, r3, #0x3C
  024f4	e5930000	 ldr         r0, [r3]
  024f8	eb000000	 bl          WaitForSingleObject
  024fc	e58d0030	 str         r0, [sp, #0x30]
  02500	e59d3030	 ldr         r3, [sp, #0x30]
  02504	e58d3004	 str         r3, [sp, #4]

; 1264 : 
; 1265 :         // check for thread termination
; 1266 :         if (pDevice->intrThreadExit) break;

  02508	e59d3000	 ldr         r3, [sp]
  0250c	e2833028	 add         r3, r3, #0x28
  02510	e5933000	 ldr         r3, [r3]
  02514	e3530000	 cmp         r3, #0
  02518	0a000000	 beq         |$LN2@KPD_LightT|
  0251c	ea000016	 b           |$LN3@KPD_LightT|
  02520		 |$LN2@KPD_LightT|

; 1267 : 
; 1268 :         // check for thread termination
; 1269 :         if (WAIT_TIMEOUT == rc)

  02520	e59d2004	 ldr         r2, [sp, #4]
  02524	e3a03c01	 mov         r3, #1, 24
  02528	e3833002	 orr         r3, r3, #2
  0252c	e1520003	 cmp         r2, r3
  02530	1a000007	 bne         |$LN1@KPD_LightT|

; 1270 :             {
; 1271 :             keypadLightTimeout = INFINITE;

  02534	e3e03000	 mvn         r3, #0
  02538	e58d3024	 str         r3, [sp, #0x24]

; 1272 :             nledInfo.OffOnBlink = 0;

  0253c	e3a03000	 mov         r3, #0
  02540	e58d300c	 str         r3, [sp, #0xC]

; 1273 :             NLedSetDevice(NLED_SETTINGS_INFO_ID, (void*)&nledInfo);

  02544	e28d1008	 add         r1, sp, #8
  02548	e3a00002	 mov         r0, #2
  0254c	eb000000	 bl          NLedSetDevice

; 1274 :             continue;

  02550	eaffffe4	 b           |$LN4@KPD_LightT|
  02554		 |$LN1@KPD_LightT|

; 1275 :             }
; 1276 : 
; 1277 :         keypadLightTimeout = pDevice->KpLightTimeout_ms;

  02554	e59d3000	 ldr         r3, [sp]
  02558	e2833048	 add         r3, r3, #0x48
  0255c	e5933000	 ldr         r3, [r3]
  02560	e58d3024	 str         r3, [sp, #0x24]

; 1278 :         nledInfo.OffOnBlink = 1;

  02564	e3a03001	 mov         r3, #1
  02568	e58d300c	 str         r3, [sp, #0xC]

; 1279 :         NLedSetDevice(NLED_SETTINGS_INFO_ID, (void*)&nledInfo);

  0256c	e28d1008	 add         r1, sp, #8
  02570	e3a00002	 mov         r0, #2
  02574	eb000000	 bl          NLedSetDevice

; 1280 :         }

  02578	eaffffda	 b           |$LN10@KPD_LightT|
  0257c		 |$LN3@KPD_LightT|
  0257c		 |$cleanUp$44194|

; 1281 : 
; 1282 : cleanUp:
; 1283 :     return ERROR_SUCCESS;

  0257c	e3a03000	 mov         r3, #0
  02580	e58d3028	 str         r3, [sp, #0x28]

; 1284 : }

  02584	e59d0028	 ldr         r0, [sp, #0x28]
  02588	e28dd034	 add         sp, sp, #0x34
  0258c	e89d6000	 ldmia       sp, {sp, lr}
  02590	e12fff1e	 bx          lr
  02594		 |$LN14@KPD_LightT|
  02594		 |$LN15@KPD_LightT|
  02594	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02598		 |$LN16@KPD_LightT|
  02598	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  0259c		 |$LN17@KPD_LightT|
  0259c	00000000	 DCD         |??_C@_1JI@OPEGNFKJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  025a0		 |$LN18@KPD_LightT|
  025a0	00000000	 DCD         |??_C@_1HM@FAODOCHI@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAL?$AAi?$AAg?$AAh?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx@|
  025a4		 |$LN19@KPD_LightT|
  025a4	00000000	 DCD         |dpCurSettings|
  025a8		 |$M44625|

			 ENDP  ; |KPD_LightThread|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00098			 AREA	 |.pdata|, PDATA
|$T44639| DCD	|$LN8@DllMain|
	DCD	0x40001404
; Function compile flags: /Odtp

  025a8			 AREA	 |.text|, CODE, ARM

  025a8		 |DllMain| PROC

; 1299 : {

  025a8		 |$LN8@DllMain|
  025a8	e1a0c00d	 mov         r12, sp
  025ac	e92d0007	 stmdb       sp!, {r0 - r2}
  025b0	e92d5000	 stmdb       sp!, {r12, lr}
  025b4	e24dd004	 sub         sp, sp, #4
  025b8		 |$M44636|

; 1300 :     UNREFERENCED_PARAMETER(pReserved);
; 1301 :     switch (reason)

  025b8	e59d3010	 ldr         r3, [sp, #0x10]
  025bc	e3530001	 cmp         r3, #1
  025c0	0a000000	 beq         |$LN1@DllMain|
  025c4	ea000004	 b           |$LN2@DllMain|
  025c8		 |$LN1@DllMain|

; 1302 :         {
; 1303 :         case DLL_PROCESS_ATTACH:
; 1304 :             RETAILREGISTERZONES((HMODULE)hDLL);

  025c8	e59f1024	 ldr         r1, [pc, #0x24]
  025cc	e59d000c	 ldr         r0, [sp, #0xC]
  025d0	eb000000	 bl          RegisterDbgZones

; 1305 :             DisableThreadLibraryCalls((HMODULE)hDLL);

  025d4	e59d000c	 ldr         r0, [sp, #0xC]
  025d8	eb000000	 bl          DisableThreadLibraryCalls
  025dc		 |$LN2@DllMain|

; 1306 :             break;
; 1307 :         }
; 1308 :     return TRUE;

  025dc	e3a03001	 mov         r3, #1
  025e0	e58d3000	 str         r3, [sp]

; 1309 : }

  025e4	e59d0000	 ldr         r0, [sp]
  025e8	e28dd004	 add         sp, sp, #4
  025ec	e89d6000	 ldmia       sp, {sp, lr}
  025f0	e12fff1e	 bx          lr
  025f4		 |$LN9@DllMain|
  025f4		 |$LN10@DllMain|
  025f4	00000000	 DCD         |dpCurSettings|
  025f8		 |$M44637|

			 ENDP  ; |DllMain|

	END
