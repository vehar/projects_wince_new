; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\PM\POLICYADAPTERS\DEVMON\devmon.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.data|, DATA
|s_DevPerfTable| DCD 0x0
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x1
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x2
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x3
	DCD	0x4
	DCD	0x1
	DCD	0x1
	DCD	0x4
	DCD	0x4
	DCD	0x1
	DCD	0x1
	DCD	0x5
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x6
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x7
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x8
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x9
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0xa
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0xb
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0xc
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0xd
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0xe
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0xf
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x10
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x11
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x12
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x13
	DCD	0x4
	DCD	0x0
	DCD	0x1
	DCD	0x14
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x15
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x16
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x17
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x18
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x19
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x1a
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x1b
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x1c
	DCD	0x4
	DCD	0x2
	DCD	0x1
	DCD	0x1d
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x1e
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x1f
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x20
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x21
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x22
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x23
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x24
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x25
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x26
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x27
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x28
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x29
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x2a
	DCD	0x4
	DCD	0x1
	DCD	0x2
	DCD	0x2b
	DCD	0x4
	DCD	0x1
	DCD	0x2
	DCD	0x2c
	DCD	0x4
	DCD	0x1
	DCD	0x2
	DCD	0x2d
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x2e
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x2f
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x30
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x31
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x32
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x33
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x34
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x35
	DCD	0x4
	DCD	0x0
	DCD	0x2
	DCD	0x36
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x37
	DCD	0x4
	DCD	0x0
	DCD	0x6
	DCD	0x38
	DCD	0x4
	DCD	0x0
	DCD	0x6
	DCD	0x39
	DCD	0x4
	DCD	0x0
	DCD	0x6
	DCD	0x3a
	DCD	0x4
	DCD	0x2
	DCD	0x6
	DCD	0x3b
	DCD	0x4
	DCD	0x2
	DCD	0xffffffff
	DCD	0x3c
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x3d
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x3e
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x3f
	DCD	0x4
	DCD	0x2
	DCD	0x3
	DCD	0x40
	DCD	0x4
	DCD	0x2
	DCD	0x3
	DCD	0x41
	DCD	0x4
	DCD	0x2
	DCD	0x3
	DCD	0x42
	DCD	0x4
	DCD	0x2
	DCD	0xffffffff
	DCD	0x43
	DCD	0x4
	DCD	0x2
	DCD	0xffffffff
	DCD	0x44
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x49
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x45
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x46
	DCD	0x4
	DCD	0x0
	DCD	0xffffffff
	DCD	0x48
	DCD	0x4
	DCD	0x2
	DCD	0x8
	%	16
	EXPORT	|?Lock@@YAXXZ|				; Lock
	IMPORT	|EnterCriticalSection|

  00000			 AREA	 |.bss|, NOINIT
|s_DeviceMonitorInfo| % 0x78

  00000			 AREA	 |.pdata|, PDATA
|$T37719| DCD	|$LN5@Lock|
	DCD	0x40000701
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\pm\policyadapters\devmon\devmon.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@@YAXXZ| PROC			; Lock

; 66   : {

  00000		 |$LN5@Lock|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37716|

; 67   :     EnterCriticalSection(&s_DeviceMonitorInfo.cs);

  00004	e59f300c	 ldr         r3, [pc, #0xC]
  00008	e2830004	 add         r0, r3, #4
  0000c	eb000000	 bl          EnterCriticalSection

; 68   : }

  00010	e49de004	 ldr         lr, [sp], #4
  00014	e12fff1e	 bx          lr
  00018		 |$LN6@Lock|
  00018		 |$LN7@Lock|
  00018	00000000	 DCD         |s_DeviceMonitorInfo|
  0001c		 |$M37717|

			 ENDP  ; |?Lock@@YAXXZ|, Lock

	EXPORT	|?Unlock@@YAXXZ|			; Unlock
	IMPORT	|LeaveCriticalSection|

  00008			 AREA	 |.pdata|, PDATA
|$T37726| DCD	|$LN5@Unlock|
	DCD	0x40000701
; Function compile flags: /Odtp

  0001c			 AREA	 |.text|, CODE, ARM

  0001c		 |?Unlock@@YAXXZ| PROC			; Unlock

; 78   : {

  0001c		 |$LN5@Unlock|
  0001c	e52de004	 str         lr, [sp, #-4]!
  00020		 |$M37723|

; 79   :     LeaveCriticalSection(&s_DeviceMonitorInfo.cs);

  00020	e59f300c	 ldr         r3, [pc, #0xC]
  00024	e2830004	 add         r0, r3, #4
  00028	eb000000	 bl          LeaveCriticalSection

; 80   : }

  0002c	e49de004	 ldr         lr, [sp], #4
  00030	e12fff1e	 bx          lr
  00034		 |$LN6@Unlock|
  00034		 |$LN7@Unlock|
  00034	00000000	 DCD         |s_DeviceMonitorInfo|
  00038		 |$M37724|

			 ENDP  ; |?Unlock@@YAXXZ|, Unlock

	EXPORT	|??_C@_1BK@CFNMIKKN@?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?InitializeSuspendState@@YAHPBG@Z|	; InitializeSuspendState
	IMPORT	|RegCloseKey|
	IMPORT	|KernelIoControl|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|

  00010			 AREA	 |.pdata|, PDATA
|$T37739| DCD	|$LN8@Initialize|
	DCD	0x40003704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@CFNMIKKN@?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AA@| DCB "S"
	DCB	0x0, "u", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00038			 AREA	 |.text|, CODE, ARM

  00038		 |?InitializeSuspendState@@YAHPBG@Z| PROC ; InitializeSuspendState

; 92   : {

  00038		 |$LN8@Initialize|
  00038	e1a0c00d	 mov         r12, sp
  0003c	e92d0001	 stmdb       sp!, {r0}
  00040	e92d5000	 stmdb       sp!, {r12, lr}
  00044	e24dd038	 sub         sp, sp, #0x38
  00048		 |$M37736|

; 93   :     DWORD state;
; 94   :     DWORD size;
; 95   :     BOOL rc = TRUE;

  00048	e3a03001	 mov         r3, #1
  0004c	e58d3008	 str         r3, [sp, #8]

; 96   :     HKEY hKey = NULL;

  00050	e3a03000	 mov         r3, #0
  00054	e58d300c	 str         r3, [sp, #0xC]

; 97   : 
; 98   :     // read registry to get initialization information
; 99   :     if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, szContext, 0, 0, &hKey) != ERROR_SUCCESS)

  00058	e28d300c	 add         r3, sp, #0xC
  0005c	e58d3000	 str         r3, [sp]
  00060	e3a03000	 mov         r3, #0
  00064	e3a02000	 mov         r2, #0
  00068	e59d1040	 ldr         r1, [sp, #0x40]
  0006c	e3a0010a	 mov         r0, #0xA, 2
  00070	eb000000	 bl          RegOpenKeyExW
  00074	e58d0030	 str         r0, [sp, #0x30]
  00078	e59d3030	 ldr         r3, [sp, #0x30]
  0007c	e3530000	 cmp         r3, #0
  00080	0a000001	 beq         |$LN3@Initialize|
  00084	ea00001a	 b           |$LN2@Initialize|

; 100  :         {
; 101  :         goto cleanUp;

  00088	ea000019	 b           |$cleanUp$37596|
  0008c		 |$LN3@Initialize|

; 102  :         }
; 103  : 
; 104  :     // get ceiling value
; 105  :     size = sizeof(DWORD);

  0008c	e3a03004	 mov         r3, #4
  00090	e58d3010	 str         r3, [sp, #0x10]

; 106  :     if (RegQueryValueEx(hKey, SYSTEM_SUSPEND_STATE, 0, 0, (BYTE*)&state, &size) == ERROR_SUCCESS)

  00094	e28d3010	 add         r3, sp, #0x10
  00098	e58d3004	 str         r3, [sp, #4]
  0009c	e28d3014	 add         r3, sp, #0x14
  000a0	e58d3000	 str         r3, [sp]
  000a4	e3a03000	 mov         r3, #0
  000a8	e3a02000	 mov         r2, #0
  000ac	e59f105c	 ldr         r1, [pc, #0x5C]
  000b0	e59d000c	 ldr         r0, [sp, #0xC]
  000b4	eb000000	 bl          RegQueryValueExW
  000b8	e58d0034	 str         r0, [sp, #0x34]
  000bc	e59d3034	 ldr         r3, [sp, #0x34]
  000c0	e3530000	 cmp         r3, #0
  000c4	1a000008	 bne         |$LN1@Initialize|

; 107  :         {
; 108  :         KernelIoControl(IOCTL_PRCM_SET_SUSPENDSTATE, &state, sizeof(DWORD), NULL, 0, NULL);

  000c8	e3a03000	 mov         r3, #0
  000cc	e58d3004	 str         r3, [sp, #4]
  000d0	e3a03000	 mov         r3, #0
  000d4	e58d3000	 str         r3, [sp]
  000d8	e3a03000	 mov         r3, #0
  000dc	e3a02004	 mov         r2, #4
  000e0	e28d1014	 add         r1, sp, #0x14
  000e4	e59f0020	 ldr         r0, [pc, #0x20]
  000e8	eb000000	 bl          KernelIoControl
  000ec		 |$LN1@Initialize|

; 109  :         }
; 110  : 
; 111  :     RegCloseKey(hKey);

  000ec	e59d000c	 ldr         r0, [sp, #0xC]
  000f0	eb000000	 bl          RegCloseKey
  000f4		 |$LN2@Initialize|
  000f4		 |$cleanUp$37596|

; 112  : 
; 113  : cleanUp:
; 114  :     return rc;

  000f4	e59d3008	 ldr         r3, [sp, #8]
  000f8	e58d302c	 str         r3, [sp, #0x2C]

; 115  : }

  000fc	e59d002c	 ldr         r0, [sp, #0x2C]
  00100	e28dd038	 add         sp, sp, #0x38
  00104	e89d6000	 ldmia       sp, {sp, lr}
  00108	e12fff1e	 bx          lr
  0010c		 |$LN9@Initialize|
  0010c		 |$LN10@Initialize|
  0010c	01f50fd0	 DCD         0x1f50fd0
  00110		 |$LN11@Initialize|
  00110	00000000	 DCD         |??_C@_1BK@CFNMIKKN@?$AAS?$AAu?$AAs?$AAp?$AAe?$AAn?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$AA@|
  00114		 |$M37737|

			 ENDP  ; |?InitializeSuspendState@@YAHPBG@Z|, InitializeSuspendState

	EXPORT	|?UpdateConstraint@@YAXPAUDevicePerformanceMapTbl_t@@H@Z| ; UpdateConstraint
	IMPORT	|PmxUpdateConstraint|

  00018			 AREA	 |.pdata|, PDATA
|$T37747| DCD	|$LN14@UpdateCons|
	DCD	0x40007f04
; Function compile flags: /Odtp

  00114			 AREA	 |.text|, CODE, ARM

  00114		 |?UpdateConstraint@@YAXPAUDevicePerformanceMapTbl_t@@H@Z| PROC ; UpdateConstraint

; 128  : {

  00114		 |$LN14@UpdateCons|
  00114	e1a0c00d	 mov         r12, sp
  00118	e92d0003	 stmdb       sp!, {r0, r1}
  0011c	e92d5000	 stmdb       sp!, {r12, lr}
  00120	e24dd014	 sub         sp, sp, #0x14
  00124		 |$M37744|

; 129  :     DWORD i;
; 130  :     DWORD opm = (DWORD)kOpm0;

  00124	e3a03000	 mov         r3, #0
  00128	e58d3010	 str         r3, [sp, #0x10]

; 131  :     POWERDOMAIN_CONSTRAINT_INFO domainConstraint;
; 132  : 
; 133  :     // check domain states
; 134  :     if (pDeviceMap->powerDomain != POWERDOMAIN_NULL)

  0012c	e59d301c	 ldr         r3, [sp, #0x1C]
  00130	e283300c	 add         r3, r3, #0xC
  00134	e5933000	 ldr         r3, [r3]
  00138	e3730001	 cmn         r3, #1
  0013c	0a00004c	 beq         |$LN9@UpdateCons|

; 135  :         {
; 136  :         if (bPreNotify == TRUE && (s_DeviceMonitorInfo.domainMask & (1 << pDeviceMap->powerDomain)) == 0)

  00140	e59d3020	 ldr         r3, [sp, #0x20]
  00144	e3530001	 cmp         r3, #1
  00148	1a000021	 bne         |$LN8@UpdateCons|
  0014c	e59d301c	 ldr         r3, [sp, #0x1C]
  00150	e283300c	 add         r3, r3, #0xC
  00154	e5932000	 ldr         r2, [r3]
  00158	e3a03001	 mov         r3, #1
  0015c	e1a02213	 mov         r2, r3, lsl r2
  00160	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00164	e5933018	 ldr         r3, [r3, #0x18]
  00168	e1130002	 tst         r3, r2
  0016c	1a000018	 bne         |$LN8@UpdateCons|

; 137  :             {
; 138  :             // apply constraint if we don't already have a constraint
; 139  :             // on the power domain
; 140  : 
; 141  :             // initialize structure
; 142  :             domainConstraint.powerDomain = pDeviceMap->powerDomain;

  00170	e59d301c	 ldr         r3, [sp, #0x1C]
  00174	e283300c	 add         r3, r3, #0xC
  00178	e5933000	 ldr         r3, [r3]
  0017c	e58d3008	 str         r3, [sp, #8]

; 143  :             domainConstraint.state = DEFAULT_ENABLE_DOMAIN_POWERSTATE;

  00180	e3a03002	 mov         r3, #2
  00184	e58d300c	 str         r3, [sp, #0xC]

; 144  :             domainConstraint.size = sizeof(POWERDOMAIN_CONSTRAINT_INFO);

  00188	e3a0300c	 mov         r3, #0xC
  0018c	e58d3004	 str         r3, [sp, #4]

; 145  : 
; 146  :             // apply constraint
; 147  :             PmxUpdateConstraint(s_DeviceMonitorInfo.hDomainConstraint, 
; 148  :                 CONSTRAINT_MSG_POWERDOMAIN_REQUEST, 
; 149  :                 &domainConstraint, 
; 150  :                 sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 151  :                 );

  00190	e3a0300c	 mov         r3, #0xC
  00194	e28d2004	 add         r2, sp, #4
  00198	e3a01001	 mov         r1, #1
  0019c	e59f0168	 ldr         r0, [pc, #0x168]
  001a0	e5900024	 ldr         r0, [r0, #0x24]
  001a4	eb000000	 bl          PmxUpdateConstraint

; 152  : 
; 153  :             // set domain mask
; 154  :             s_DeviceMonitorInfo.domainMask |= (1 << pDeviceMap->powerDomain);

  001a8	e59d301c	 ldr         r3, [sp, #0x1C]
  001ac	e283300c	 add         r3, r3, #0xC
  001b0	e5932000	 ldr         r2, [r3]
  001b4	e3a03001	 mov         r3, #1
  001b8	e1a02213	 mov         r2, r3, lsl r2
  001bc	e59f3148	 ldr         r3, [pc, #0x148]
  001c0	e5933018	 ldr         r3, [r3, #0x18]
  001c4	e1832002	 orr         r2, r3, r2
  001c8	e59f313c	 ldr         r3, [pc, #0x13C]
  001cc	e5832018	 str         r2, [r3, #0x18]
  001d0	ea000027	 b           |$LN7@UpdateCons|
  001d4		 |$LN8@UpdateCons|

; 155  :             }
; 156  :         else if (bPreNotify == FALSE && s_DeviceMonitorInfo.rgDomainCount[pDeviceMap->powerDomain] == 0)                 

  001d4	e59d3020	 ldr         r3, [sp, #0x20]
  001d8	e3530000	 cmp         r3, #0
  001dc	1a000024	 bne         |$LN6@UpdateCons|
  001e0	e59d301c	 ldr         r3, [sp, #0x1C]
  001e4	e283300c	 add         r3, r3, #0xC
  001e8	e5931000	 ldr         r1, [r3]
  001ec	e3a03004	 mov         r3, #4
  001f0	e0020391	 mul         r2, r1, r3
  001f4	e59f3110	 ldr         r3, [pc, #0x110]
  001f8	e2833050	 add         r3, r3, #0x50
  001fc	e0833002	 add         r3, r3, r2
  00200	e5933000	 ldr         r3, [r3]
  00204	e3530000	 cmp         r3, #0
  00208	1a000019	 bne         |$LN6@UpdateCons|

; 157  :             {
; 158  :             // release constraint on domain if we no longer need it
; 159  : 
; 160  :             // initialize structure
; 161  :             domainConstraint.powerDomain = pDeviceMap->powerDomain;

  0020c	e59d301c	 ldr         r3, [sp, #0x1C]
  00210	e283300c	 add         r3, r3, #0xC
  00214	e5933000	 ldr         r3, [r3]
  00218	e58d3008	 str         r3, [sp, #8]

; 162  :             domainConstraint.state = CONSTRAINT_STATE_NULL;

  0021c	e3e03cff	 mvn         r3, #0xFF, 24
  00220	e22330ff	 eor         r3, r3, #0xFF
  00224	e58d300c	 str         r3, [sp, #0xC]

; 163  :             domainConstraint.size = sizeof(POWERDOMAIN_CONSTRAINT_INFO);

  00228	e3a0300c	 mov         r3, #0xC
  0022c	e58d3004	 str         r3, [sp, #4]

; 164  : 
; 165  :             // apply constraint
; 166  :             PmxUpdateConstraint(s_DeviceMonitorInfo.hDomainConstraint, 
; 167  :                 CONSTRAINT_MSG_POWERDOMAIN_REQUEST, 
; 168  :                 &domainConstraint, 
; 169  :                 sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 170  :                 );

  00230	e3a0300c	 mov         r3, #0xC
  00234	e28d2004	 add         r2, sp, #4
  00238	e3a01001	 mov         r1, #1
  0023c	e59f00c8	 ldr         r0, [pc, #0xC8]
  00240	e5900024	 ldr         r0, [r0, #0x24]
  00244	eb000000	 bl          PmxUpdateConstraint

; 171  : 
; 172  :             // clear domain mask
; 173  :             s_DeviceMonitorInfo.domainMask &= ~(1 << pDeviceMap->powerDomain);

  00248	e59d301c	 ldr         r3, [sp, #0x1C]
  0024c	e283300c	 add         r3, r3, #0xC
  00250	e5932000	 ldr         r2, [r3]
  00254	e3a03001	 mov         r3, #1
  00258	e1a03213	 mov         r3, r3, lsl r2
  0025c	e1e02003	 mvn         r2, r3
  00260	e59f30a4	 ldr         r3, [pc, #0xA4]
  00264	e5933018	 ldr         r3, [r3, #0x18]
  00268	e0032002	 and         r2, r3, r2
  0026c	e59f3098	 ldr         r3, [pc, #0x98]
  00270	e5832018	 str         r2, [r3, #0x18]
  00274		 |$LN6@UpdateCons|
  00274		 |$LN7@UpdateCons|
  00274		 |$LN9@UpdateCons|

; 174  :             }
; 175  :         }
; 176  : 
; 177  :     // check operating mode
; 178  :         for (i = (DWORD)kOpm0; i < (DWORD)kOpmCount; ++i)

  00274	e3a03000	 mov         r3, #0
  00278	e58d3000	 str         r3, [sp]
  0027c	ea000002	 b           |$LN5@UpdateCons|
  00280		 |$LN4@UpdateCons|
  00280	e59d3000	 ldr         r3, [sp]
  00284	e2833001	 add         r3, r3, #1
  00288	e58d3000	 str         r3, [sp]
  0028c		 |$LN5@UpdateCons|
  0028c	e59d3000	 ldr         r3, [sp]
  00290	e353000a	 cmp         r3, #0xA
  00294	2a00000b	 bcs         |$LN3@UpdateCons|

; 179  :             {
; 180  :             if (s_DeviceMonitorInfo.rgOpmCount[i] > 0)

  00298	e59d1000	 ldr         r1, [sp]
  0029c	e3a03004	 mov         r3, #4
  002a0	e0020391	 mul         r2, r1, r3
  002a4	e59f3060	 ldr         r3, [pc, #0x60]
  002a8	e2833028	 add         r3, r3, #0x28
  002ac	e0833002	 add         r3, r3, r2
  002b0	e5933000	 ldr         r3, [r3]
  002b4	e3530000	 cmp         r3, #0
  002b8	9a000001	 bls         |$LN2@UpdateCons|

; 181  :                 {
; 182  :                 opm = i;

  002bc	e59d3000	 ldr         r3, [sp]
  002c0	e58d3010	 str         r3, [sp, #0x10]
  002c4		 |$LN2@UpdateCons|

; 183  :                 }
; 184  :             }

  002c4	eaffffed	 b           |$LN4@UpdateCons|
  002c8		 |$LN3@UpdateCons|

; 185  : 
; 186  :         // check if the constraint needs to be changed
; 187  :         if (opm != s_DeviceMonitorInfo.currentOpm)

  002c8	e59d2010	 ldr         r2, [sp, #0x10]
  002cc	e59f3038	 ldr         r3, [pc, #0x38]
  002d0	e593301c	 ldr         r3, [r3, #0x1C]
  002d4	e1520003	 cmp         r2, r3
  002d8	0a000008	 beq         |$LN1@UpdateCons|

; 188  :             {
; 189  :             PmxUpdateConstraint(s_DeviceMonitorInfo.hDvfsConstraint, 
; 190  :                 CONSTRAINT_MSG_DVFS_REQUEST, 
; 191  :                 &opm, 
; 192  :                 sizeof(DWORD)
; 193  :                 );

  002dc	e3a03004	 mov         r3, #4
  002e0	e28d2010	 add         r2, sp, #0x10
  002e4	e3a01001	 mov         r1, #1
  002e8	e59f001c	 ldr         r0, [pc, #0x1C]
  002ec	e5900020	 ldr         r0, [r0, #0x20]
  002f0	eb000000	 bl          PmxUpdateConstraint

; 194  : 
; 195  :             s_DeviceMonitorInfo.currentOpm = opm;

  002f4	e59d2010	 ldr         r2, [sp, #0x10]
  002f8	e59f300c	 ldr         r3, [pc, #0xC]
  002fc	e583201c	 str         r2, [r3, #0x1C]
  00300		 |$LN1@UpdateCons|

; 196  :             }
; 197  : 
; 198  : }

  00300	e28dd014	 add         sp, sp, #0x14
  00304	e89d6000	 ldmia       sp, {sp, lr}
  00308	e12fff1e	 bx          lr
  0030c		 |$LN15@UpdateCons|
  0030c		 |$LN16@UpdateCons|
  0030c	00000000	 DCD         |s_DeviceMonitorInfo|
  00310		 |$M37745|

			 ENDP  ; |?UpdateConstraint@@YAXPAUDevicePerformanceMapTbl_t@@H@Z|, UpdateConstraint

	EXPORT	|??_C@_1O@MGOKFMBN@?$AAP?$AAW?$AAR?$AAD?$AAO?$AAM?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?DEVMON_InitPolicy@@YAPAXPBG@Z|	; DEVMON_InitPolicy
	IMPORT	|PmxSetConstraintById|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|

  00020			 AREA	 |.pdata|, PDATA
|$T37755| DCD	|$LN5@DEVMON_Ini|
	DCD	0x40003904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@MGOKFMBN@?$AAP?$AAW?$AAR?$AAD?$AAO?$AAM?$AA?$AA@| DCB "P", 0x0, "W"
	DCB	0x0, "R", 0x0, "D", 0x0, "O", 0x0, "M", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@| DCB "D", 0x0, "V", 0x0, "F"
	DCB	0x0, "S", 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00310			 AREA	 |.text|, CODE, ARM

  00310		 |?DEVMON_InitPolicy@@YAPAXPBG@Z| PROC	; DEVMON_InitPolicy

; 210  : {

  00310		 |$LN5@DEVMON_Ini|
  00310	e1a0c00d	 mov         r12, sp
  00314	e92d0001	 stmdb       sp!, {r0}
  00318	e92d5000	 stmdb       sp!, {r12, lr}
  0031c	e24dd01c	 sub         sp, sp, #0x1C
  00320		 |$M37752|

; 211  :     DWORD dwLevel = CONSTRAINT_STATE_NULL;

  00320	e3e03cff	 mvn         r3, #0xFF, 24
  00324	e22330ff	 eor         r3, r3, #0xFF
  00328	e58d300c	 str         r3, [sp, #0xC]

; 212  :     POWERDOMAIN_CONSTRAINT_INFO domainConstraint;
; 213  :     
; 214  :     // initializt global structure
; 215  :     memset(&s_DeviceMonitorInfo, 0, sizeof(DeviceMonitorPolicyInfo_t));

  0032c	e3a02078	 mov         r2, #0x78
  00330	e3a01000	 mov         r1, #0
  00334	e59f00a8	 ldr         r0, [pc, #0xA8]
  00338	eb000000	 bl          memset

; 216  : 
; 217  :     s_DeviceMonitorInfo.currentOpm = kOpm0;

  0033c	e59f20a0	 ldr         r2, [pc, #0xA0]
  00340	e3a03000	 mov         r3, #0
  00344	e582301c	 str         r3, [r2, #0x1C]

; 218  :     s_DeviceMonitorInfo.cookie = DEVMON_COOKIE;

  00348	e59f2094	 ldr         r2, [pc, #0x94]
  0034c	e59f309c	 ldr         r3, [pc, #0x9C]
  00350	e5823000	 str         r3, [r2]

; 219  :     InitializeCriticalSection(&s_DeviceMonitorInfo.cs);

  00354	e59f3088	 ldr         r3, [pc, #0x88]
  00358	e2830004	 add         r0, r3, #4
  0035c	eb000000	 bl          InitializeCriticalSection

; 220  : 
; 221  :     s_DeviceMonitorInfo.hDvfsConstraint = PmxSetConstraintById(
; 222  :         CONSTRAINT_ID_DVFS, 
; 223  :         CONSTRAINT_MSG_DVFS_REQUEST, 
; 224  :         &dwLevel,
; 225  :         sizeof(DWORD)
; 226  :         );

  00360	e3a03004	 mov         r3, #4
  00364	e28d200c	 add         r2, sp, #0xC
  00368	e3a01001	 mov         r1, #1
  0036c	e59f0078	 ldr         r0, [pc, #0x78]
  00370	eb000000	 bl          PmxSetConstraintById
  00374	e58d0014	 str         r0, [sp, #0x14]
  00378	e59d2014	 ldr         r2, [sp, #0x14]
  0037c	e59f3060	 ldr         r3, [pc, #0x60]
  00380	e5832020	 str         r2, [r3, #0x20]

; 227  : 
; 228  :     // initialize domain constraint
; 229  :     domainConstraint.powerDomain = POWERDOMAIN_CORE;

  00384	e3a03001	 mov         r3, #1
  00388	e58d3004	 str         r3, [sp, #4]

; 230  :     domainConstraint.size = sizeof(POWERDOMAIN_CONSTRAINT_INFO);

  0038c	e3a0300c	 mov         r3, #0xC
  00390	e58d3000	 str         r3, [sp]

; 231  :     domainConstraint.state = CONSTRAINT_STATE_NULL;

  00394	e3e03cff	 mvn         r3, #0xFF, 24
  00398	e22330ff	 eor         r3, r3, #0xFF
  0039c	e58d3008	 str         r3, [sp, #8]

; 232  :     
; 233  :     s_DeviceMonitorInfo.hDomainConstraint = PmxSetConstraintById(
; 234  :         CONSTRAINT_ID_DOMAIN, 
; 235  :         CONSTRAINT_MSG_POWERDOMAIN_REQUEST, 
; 236  :         (void*)&domainConstraint, 
; 237  :         sizeof(POWERDOMAIN_CONSTRAINT_INFO)
; 238  :         );

  003a0	e3a0300c	 mov         r3, #0xC
  003a4	e28d2000	 add         r2, sp, #0
  003a8	e3a01001	 mov         r1, #1
  003ac	e59f0034	 ldr         r0, [pc, #0x34]
  003b0	eb000000	 bl          PmxSetConstraintById
  003b4	e58d0018	 str         r0, [sp, #0x18]
  003b8	e59d2018	 ldr         r2, [sp, #0x18]
  003bc	e59f3020	 ldr         r3, [pc, #0x20]
  003c0	e5832024	 str         r2, [r3, #0x24]

; 239  :     
; 240  :     // initialize suspend state
; 241  :     InitializeSuspendState(szContext);

  003c4	e59d0024	 ldr         r0, [sp, #0x24]
  003c8	eb000000	 bl          |?InitializeSuspendState@@YAHPBG@Z|

; 242  : 
; 243  :     return (HANDLE)&s_DeviceMonitorInfo;

  003cc	e59f3010	 ldr         r3, [pc, #0x10]
  003d0	e58d3010	 str         r3, [sp, #0x10]

; 244  : } 

  003d4	e59d0010	 ldr         r0, [sp, #0x10]
  003d8	e28dd01c	 add         sp, sp, #0x1C
  003dc	e89d6000	 ldmia       sp, {sp, lr}
  003e0	e12fff1e	 bx          lr
  003e4		 |$LN6@DEVMON_Ini|
  003e4		 |$LN7@DEVMON_Ini|
  003e4	00000000	 DCD         |s_DeviceMonitorInfo|
  003e8		 |$LN8@DEVMON_Ini|
  003e8	00000000	 DCD         |??_C@_1O@MGOKFMBN@?$AAP?$AAW?$AAR?$AAD?$AAO?$AAM?$AA?$AA@|
  003ec		 |$LN9@DEVMON_Ini|
  003ec	00000000	 DCD         |??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@|
  003f0		 |$LN10@DEVMON_Ini|
  003f0	646d6f6e	 DCD         0x646d6f6e
  003f4		 |$M37753|

			 ENDP  ; |?DEVMON_InitPolicy@@YAPAXPBG@Z|, DEVMON_InitPolicy

	EXPORT	|?DEVMON_DeinitPolicy@@YAHPAX@Z|	; DEVMON_DeinitPolicy
	IMPORT	|DeleteCriticalSection|
	IMPORT	|PmxReleaseConstraint|

  00028			 AREA	 |.pdata|, PDATA
|$T37766| DCD	|$LN8@DEVMON_Dei|
	DCD	0x40001f04
; Function compile flags: /Odtp

  003f4			 AREA	 |.text|, CODE, ARM

  003f4		 |?DEVMON_DeinitPolicy@@YAHPAX@Z| PROC	; DEVMON_DeinitPolicy

; 256  : {

  003f4		 |$LN8@DEVMON_Dei|
  003f4	e1a0c00d	 mov         r12, sp
  003f8	e92d0001	 stmdb       sp!, {r0}
  003fc	e92d5000	 stmdb       sp!, {r12, lr}
  00400	e24dd008	 sub         sp, sp, #8
  00404		 |$M37763|

; 257  :     BOOL rc = FALSE;

  00404	e3a03000	 mov         r3, #0
  00408	e58d3000	 str         r3, [sp]

; 258  : 
; 259  :     // validate parameters
; 260  :     if (hPolicyAdapter != (HANDLE)&s_DeviceMonitorInfo) goto cleanUp;

  0040c	e59d2010	 ldr         r2, [sp, #0x10]
  00410	e59f3054	 ldr         r3, [pc, #0x54]
  00414	e1520003	 cmp         r2, r3
  00418	0a000001	 beq         |$LN3@DEVMON_Dei|
  0041c	ea00000c	 b           |$LN2@DEVMON_Dei|
  00420	ea00000b	 b           |$cleanUp$37646|
  00424		 |$LN3@DEVMON_Dei|

; 261  : 
; 262  :     // reset structure
; 263  :     if (s_DeviceMonitorInfo.hDvfsConstraint != NULL)

  00424	e59f3040	 ldr         r3, [pc, #0x40]
  00428	e5933020	 ldr         r3, [r3, #0x20]
  0042c	e3530000	 cmp         r3, #0
  00430	0a000002	 beq         |$LN1@DEVMON_Dei|

; 264  :         {
; 265  :         PmxReleaseConstraint(s_DeviceMonitorInfo.hDvfsConstraint);

  00434	e59f3030	 ldr         r3, [pc, #0x30]
  00438	e5930020	 ldr         r0, [r3, #0x20]
  0043c	eb000000	 bl          PmxReleaseConstraint
  00440		 |$LN1@DEVMON_Dei|

; 266  :         }
; 267  : 
; 268  :     DeleteCriticalSection(&s_DeviceMonitorInfo.cs);

  00440	e59f3024	 ldr         r3, [pc, #0x24]
  00444	e2830004	 add         r0, r3, #4
  00448	eb000000	 bl          DeleteCriticalSection

; 269  : 
; 270  :     rc = TRUE;

  0044c	e3a03001	 mov         r3, #1
  00450	e58d3000	 str         r3, [sp]
  00454		 |$LN2@DEVMON_Dei|
  00454		 |$cleanUp$37646|

; 271  : 
; 272  : cleanUp:
; 273  :     return rc;

  00454	e59d3000	 ldr         r3, [sp]
  00458	e58d3004	 str         r3, [sp, #4]

; 274  : } 

  0045c	e59d0004	 ldr         r0, [sp, #4]
  00460	e28dd008	 add         sp, sp, #8
  00464	e89d6000	 ldmia       sp, {sp, lr}
  00468	e12fff1e	 bx          lr
  0046c		 |$LN9@DEVMON_Dei|
  0046c		 |$LN10@DEVMON_Dei|
  0046c	00000000	 DCD         |s_DeviceMonitorInfo|
  00470		 |$M37764|

			 ENDP  ; |?DEVMON_DeinitPolicy@@YAHPAX@Z|, DEVMON_DeinitPolicy

	EXPORT	|?DEVMON_PreDeviceStateChange@@YAHPAXIII@Z| ; DEVMON_PreDeviceStateChange

  00030			 AREA	 |.pdata|, PDATA
|$T37774| DCD	|$LN12@DEVMON_Pre|
	DCD	0x4000ba04
; Function compile flags: /Odtp

  00470			 AREA	 |.text|, CODE, ARM

  00470		 |?DEVMON_PreDeviceStateChange@@YAHPAXIII@Z| PROC ; DEVMON_PreDeviceStateChange

; 289  : {

  00470		 |$LN12@DEVMON_Pre|
  00470	e1a0c00d	 mov         r12, sp
  00474	e92d000f	 stmdb       sp!, {r0 - r3}
  00478	e92d5000	 stmdb       sp!, {r12, lr}
  0047c	e24dd004	 sub         sp, sp, #4
  00480		 |$M37771|

; 290  :     // validate parameters
; 291  :     if (hPolicyAdapter != (HANDLE)&s_DeviceMonitorInfo) return FALSE;

  00480	e59d200c	 ldr         r2, [sp, #0xC]
  00484	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00488	e1520003	 cmp         r2, r3
  0048c	0a000002	 beq         |$LN7@DEVMON_Pre|
  00490	e3a03000	 mov         r3, #0
  00494	e58d3000	 str         r3, [sp]
  00498	ea0000a8	 b           |$LN8@DEVMON_Pre|
  0049c		 |$LN7@DEVMON_Pre|

; 292  : 
; 293  :     // record the new device state for the device
; 294  :     if (dev >= OMAP_DEVICE_GENERIC) return TRUE;

  0049c	e59d3010	 ldr         r3, [sp, #0x10]
  004a0	e3530049	 cmp         r3, #0x49
  004a4	3a000002	 bcc         |$LN6@DEVMON_Pre|
  004a8	e3a03001	 mov         r3, #1
  004ac	e58d3000	 str         r3, [sp]
  004b0	ea0000a2	 b           |$LN8@DEVMON_Pre|
  004b4		 |$LN6@DEVMON_Pre|

; 295  : 
; 296  :     UPDATE_DEVICE_STATE(s_DevPerfTable, dev, newState);

  004b4	e59d1010	 ldr         r1, [sp, #0x10]
  004b8	e3a03010	 mov         r3, #0x10
  004bc	e0020391	 mul         r2, r1, r3
  004c0	e59f3288	 ldr         r3, [pc, #0x288]
  004c4	e0833002	 add         r3, r3, r2
  004c8	e2832004	 add         r2, r3, #4
  004cc	e59d3018	 ldr         r3, [sp, #0x18]
  004d0	e5823000	 str         r3, [r2]

; 297  :         
; 298  :     // D3 is the inflection point
; 299  :     if (newState < (UINT)D3 && oldState >= (UINT)D3)

  004d4	e59d3018	 ldr         r3, [sp, #0x18]
  004d8	e3530003	 cmp         r3, #3
  004dc	2a000049	 bcs         |$LN5@DEVMON_Pre|
  004e0	e59d3014	 ldr         r3, [sp, #0x14]
  004e4	e3530003	 cmp         r3, #3
  004e8	3a000046	 bcc         |$LN5@DEVMON_Pre|

; 300  :         {
; 301  :         // apply any constraints defined for device
; 302  :         //
; 303  :         s_DeviceMonitorInfo.rgOpmCount[s_DevPerfTable[dev].opm] += 1;

  004ec	e59d1010	 ldr         r1, [sp, #0x10]
  004f0	e3a03010	 mov         r3, #0x10
  004f4	e0020391	 mul         r2, r1, r3
  004f8	e59f3250	 ldr         r3, [pc, #0x250]
  004fc	e0833002	 add         r3, r3, r2
  00500	e2833008	 add         r3, r3, #8
  00504	e5931000	 ldr         r1, [r3]
  00508	e3a03004	 mov         r3, #4
  0050c	e0020391	 mul         r2, r1, r3
  00510	e59f323c	 ldr         r3, [pc, #0x23C]
  00514	e2833028	 add         r3, r3, #0x28
  00518	e0833002	 add         r3, r3, r2
  0051c	e5933000	 ldr         r3, [r3]
  00520	e2830001	 add         r0, r3, #1
  00524	e59d1010	 ldr         r1, [sp, #0x10]
  00528	e3a03010	 mov         r3, #0x10
  0052c	e0020391	 mul         r2, r1, r3
  00530	e59f3218	 ldr         r3, [pc, #0x218]
  00534	e0833002	 add         r3, r3, r2
  00538	e2833008	 add         r3, r3, #8
  0053c	e5931000	 ldr         r1, [r3]
  00540	e3a03004	 mov         r3, #4
  00544	e0020391	 mul         r2, r1, r3
  00548	e59f3204	 ldr         r3, [pc, #0x204]
  0054c	e2833028	 add         r3, r3, #0x28
  00550	e0833002	 add         r3, r3, r2
  00554	e5830000	 str         r0, [r3]

; 304  : 
; 305  :         // update power domain states
; 306  :         if (s_DevPerfTable[dev].powerDomain != POWERDOMAIN_NULL)

  00558	e59d1010	 ldr         r1, [sp, #0x10]
  0055c	e3a03010	 mov         r3, #0x10
  00560	e0020391	 mul         r2, r1, r3
  00564	e59f31e4	 ldr         r3, [pc, #0x1E4]
  00568	e0833002	 add         r3, r3, r2
  0056c	e283300c	 add         r3, r3, #0xC
  00570	e5933000	 ldr         r3, [r3]
  00574	e3730001	 cmn         r3, #1
  00578	0a00001a	 beq         |$LN4@DEVMON_Pre|

; 307  :             {
; 308  :             s_DeviceMonitorInfo.rgDomainCount[s_DevPerfTable[dev].powerDomain] += 1;

  0057c	e59d1010	 ldr         r1, [sp, #0x10]
  00580	e3a03010	 mov         r3, #0x10
  00584	e0020391	 mul         r2, r1, r3
  00588	e59f31c0	 ldr         r3, [pc, #0x1C0]
  0058c	e0833002	 add         r3, r3, r2
  00590	e283300c	 add         r3, r3, #0xC
  00594	e5931000	 ldr         r1, [r3]
  00598	e3a03004	 mov         r3, #4
  0059c	e0020391	 mul         r2, r1, r3
  005a0	e59f31ac	 ldr         r3, [pc, #0x1AC]
  005a4	e2833050	 add         r3, r3, #0x50
  005a8	e0833002	 add         r3, r3, r2
  005ac	e5933000	 ldr         r3, [r3]
  005b0	e2830001	 add         r0, r3, #1
  005b4	e59d1010	 ldr         r1, [sp, #0x10]
  005b8	e3a03010	 mov         r3, #0x10
  005bc	e0020391	 mul         r2, r1, r3
  005c0	e59f3188	 ldr         r3, [pc, #0x188]
  005c4	e0833002	 add         r3, r3, r2
  005c8	e283300c	 add         r3, r3, #0xC
  005cc	e5931000	 ldr         r1, [r3]
  005d0	e3a03004	 mov         r3, #4
  005d4	e0020391	 mul         r2, r1, r3
  005d8	e59f3174	 ldr         r3, [pc, #0x174]
  005dc	e2833050	 add         r3, r3, #0x50
  005e0	e0833002	 add         r3, r3, r2
  005e4	e5830000	 str         r0, [r3]
  005e8		 |$LN4@DEVMON_Pre|

; 309  :             }
; 310  :         UpdateConstraint(&s_DevPerfTable[dev], TRUE);

  005e8	e3a01001	 mov         r1, #1
  005ec	e59d0010	 ldr         r0, [sp, #0x10]
  005f0	e3a03010	 mov         r3, #0x10
  005f4	e0020390	 mul         r2, r0, r3
  005f8	e59f3150	 ldr         r3, [pc, #0x150]
  005fc	e0830002	 add         r0, r3, r2
  00600	eb000000	 bl          |?UpdateConstraint@@YAXPAUDevicePerformanceMapTbl_t@@H@Z|
  00604	ea00004b	 b           |$LN3@DEVMON_Pre|
  00608		 |$LN5@DEVMON_Pre|

; 311  :         }
; 312  :     else if (newState >= (UINT)D3 && oldState < (UINT)D3)

  00608	e59d3018	 ldr         r3, [sp, #0x18]
  0060c	e3530003	 cmp         r3, #3
  00610	3a000048	 bcc         |$LN2@DEVMON_Pre|
  00614	e59d3014	 ldr         r3, [sp, #0x14]
  00618	e3530003	 cmp         r3, #3
  0061c	2a000045	 bcs         |$LN2@DEVMON_Pre|

; 313  :         {
; 314  :         // release any constraints defined for device
; 315  :         //
; 316  :         s_DeviceMonitorInfo.rgOpmCount[s_DevPerfTable[dev].opm] -= 1;

  00620	e59d1010	 ldr         r1, [sp, #0x10]
  00624	e3a03010	 mov         r3, #0x10
  00628	e0020391	 mul         r2, r1, r3
  0062c	e59f311c	 ldr         r3, [pc, #0x11C]
  00630	e0833002	 add         r3, r3, r2
  00634	e2833008	 add         r3, r3, #8
  00638	e5931000	 ldr         r1, [r3]
  0063c	e3a03004	 mov         r3, #4
  00640	e0020391	 mul         r2, r1, r3
  00644	e59f3108	 ldr         r3, [pc, #0x108]
  00648	e2833028	 add         r3, r3, #0x28
  0064c	e0833002	 add         r3, r3, r2
  00650	e5933000	 ldr         r3, [r3]
  00654	e2430001	 sub         r0, r3, #1
  00658	e59d1010	 ldr         r1, [sp, #0x10]
  0065c	e3a03010	 mov         r3, #0x10
  00660	e0020391	 mul         r2, r1, r3
  00664	e59f30e4	 ldr         r3, [pc, #0xE4]
  00668	e0833002	 add         r3, r3, r2
  0066c	e2833008	 add         r3, r3, #8
  00670	e5931000	 ldr         r1, [r3]
  00674	e3a03004	 mov         r3, #4
  00678	e0020391	 mul         r2, r1, r3
  0067c	e59f30d0	 ldr         r3, [pc, #0xD0]
  00680	e2833028	 add         r3, r3, #0x28
  00684	e0833002	 add         r3, r3, r2
  00688	e5830000	 str         r0, [r3]

; 317  : 
; 318  :         // update power domain states
; 319  :         if (s_DevPerfTable[dev].powerDomain != POWERDOMAIN_NULL)

  0068c	e59d1010	 ldr         r1, [sp, #0x10]
  00690	e3a03010	 mov         r3, #0x10
  00694	e0020391	 mul         r2, r1, r3
  00698	e59f30b0	 ldr         r3, [pc, #0xB0]
  0069c	e0833002	 add         r3, r3, r2
  006a0	e283300c	 add         r3, r3, #0xC
  006a4	e5933000	 ldr         r3, [r3]
  006a8	e3730001	 cmn         r3, #1
  006ac	0a00001a	 beq         |$LN1@DEVMON_Pre|

; 320  :             {
; 321  :             s_DeviceMonitorInfo.rgDomainCount[s_DevPerfTable[dev].powerDomain] -= 1;

  006b0	e59d1010	 ldr         r1, [sp, #0x10]
  006b4	e3a03010	 mov         r3, #0x10
  006b8	e0020391	 mul         r2, r1, r3
  006bc	e59f308c	 ldr         r3, [pc, #0x8C]
  006c0	e0833002	 add         r3, r3, r2
  006c4	e283300c	 add         r3, r3, #0xC
  006c8	e5931000	 ldr         r1, [r3]
  006cc	e3a03004	 mov         r3, #4
  006d0	e0020391	 mul         r2, r1, r3
  006d4	e59f3078	 ldr         r3, [pc, #0x78]
  006d8	e2833050	 add         r3, r3, #0x50
  006dc	e0833002	 add         r3, r3, r2
  006e0	e5933000	 ldr         r3, [r3]
  006e4	e2430001	 sub         r0, r3, #1
  006e8	e59d1010	 ldr         r1, [sp, #0x10]
  006ec	e3a03010	 mov         r3, #0x10
  006f0	e0020391	 mul         r2, r1, r3
  006f4	e59f3054	 ldr         r3, [pc, #0x54]
  006f8	e0833002	 add         r3, r3, r2
  006fc	e283300c	 add         r3, r3, #0xC
  00700	e5931000	 ldr         r1, [r3]
  00704	e3a03004	 mov         r3, #4
  00708	e0020391	 mul         r2, r1, r3
  0070c	e59f3040	 ldr         r3, [pc, #0x40]
  00710	e2833050	 add         r3, r3, #0x50
  00714	e0833002	 add         r3, r3, r2
  00718	e5830000	 str         r0, [r3]
  0071c		 |$LN1@DEVMON_Pre|

; 322  :             }
; 323  :         UpdateConstraint(&s_DevPerfTable[dev], FALSE);

  0071c	e3a01000	 mov         r1, #0
  00720	e59d0010	 ldr         r0, [sp, #0x10]
  00724	e3a03010	 mov         r3, #0x10
  00728	e0020390	 mul         r2, r0, r3
  0072c	e59f301c	 ldr         r3, [pc, #0x1C]
  00730	e0830002	 add         r0, r3, r2
  00734	eb000000	 bl          |?UpdateConstraint@@YAXPAUDevicePerformanceMapTbl_t@@H@Z|
  00738		 |$LN2@DEVMON_Pre|
  00738		 |$LN3@DEVMON_Pre|

; 324  :         }
; 325  :     
; 326  :     return TRUE;

  00738	e3a03001	 mov         r3, #1
  0073c	e58d3000	 str         r3, [sp]
  00740		 |$LN8@DEVMON_Pre|

; 327  : }

  00740	e59d0000	 ldr         r0, [sp]
  00744	e28dd004	 add         sp, sp, #4
  00748	e89d6000	 ldmia       sp, {sp, lr}
  0074c	e12fff1e	 bx          lr
  00750		 |$LN13@DEVMON_Pre|
  00750		 |$LN14@DEVMON_Pre|
  00750	00000000	 DCD         |s_DevPerfTable|
  00754		 |$LN15@DEVMON_Pre|
  00754	00000000	 DCD         |s_DeviceMonitorInfo|
  00758		 |$M37772|

			 ENDP  ; |?DEVMON_PreDeviceStateChange@@YAHPAXIII@Z|, DEVMON_PreDeviceStateChange

	EXPORT	|?DEVMON_PostDeviceStateChange@@YAHPAXIII@Z| ; DEVMON_PostDeviceStateChange

  00038			 AREA	 |.pdata|, PDATA
|$T37783| DCD	|$LN5@DEVMON_Pos|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00758			 AREA	 |.text|, CODE, ARM

  00758		 |?DEVMON_PostDeviceStateChange@@YAHPAXIII@Z| PROC ; DEVMON_PostDeviceStateChange

; 342  : {

  00758		 |$LN5@DEVMON_Pos|
  00758	e1a0c00d	 mov         r12, sp
  0075c	e92d000f	 stmdb       sp!, {r0 - r3}
  00760	e92d5000	 stmdb       sp!, {r12, lr}
  00764	e24dd004	 sub         sp, sp, #4
  00768		 |$M37780|

; 343  :     UNREFERENCED_PARAMETER(hPolicyAdapter);
; 344  :     UNREFERENCED_PARAMETER(dev);
; 345  :     UNREFERENCED_PARAMETER(oldState);
; 346  :     UNREFERENCED_PARAMETER(newState);
; 347  :     return FALSE;

  00768	e3a03000	 mov         r3, #0
  0076c	e58d3000	 str         r3, [sp]

; 348  : }

  00770	e59d0000	 ldr         r0, [sp]
  00774	e28dd004	 add         sp, sp, #4
  00778	e89d6000	 ldmia       sp, {sp, lr}
  0077c	e12fff1e	 bx          lr
  00780		 |$M37781|

			 ENDP  ; |?DEVMON_PostDeviceStateChange@@YAHPAXIII@Z|, DEVMON_PostDeviceStateChange

	EXPORT	|??0?$IndexList@K@@QAA@XZ|		; IndexList<unsigned long>::IndexList<unsigned long>
	IMPORT	|atexit|

  00000			 AREA	 |.pdata|, PDATA
|$T37788| DCD	|$LN5@dynamic|
	DCD	0x40000901
; Function compile flags: /Odtp

  00000			 AREA	 |.text$yc|, CODE, ARM

  00000		 |??__Es_IndexList@@YAXXZ| PROC		; `dynamic initializer for 's_IndexList''

; 54   : static IndexList<DWORD>             s_IndexList;

  00000		 |$LN5@dynamic|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37785|
  00004	e59f0014	 ldr         r0, [pc, #0x14]
  00008	eb000000	 bl          |??0?$IndexList@K@@QAA@XZ|
  0000c	e59f0008	 ldr         r0, [pc, #8]
  00010	eb000000	 bl          atexit
  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN6@dynamic|
  0001c		 |$LN7@dynamic|
  0001c	00000000	 DCD         |??__Fs_IndexList@@YAXXZ|
  00020		 |$LN8@dynamic|
  00020	00000000	 DCD         |s_IndexList|
  00024		 |$M37786|

			 ENDP  ; |??__Es_IndexList@@YAXXZ|, `dynamic initializer for 's_IndexList''

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T37799| DCD	|$LN5@IndexList|
	DCD	0x40001204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0?$IndexList@K@@QAA@XZ| PROC	; IndexList<unsigned long>::IndexList<unsigned long>

; 51   :     IndexList()

  00000		 |$LN5@IndexList|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M37796|

; 52   :     {        
; 53   :         memset(&m_Head, 0, sizeof(IndexData));

  00010	e3a02088	 mov         r2, #0x88
  00014	e3a01000	 mov         r1, #0
  00018	e59d000c	 ldr         r0, [sp, #0xC]
  0001c	eb000000	 bl          memset

; 54   :         m_maxIndex = INDEXED_CHUNK_SIZE - 1;

  00020	e59d300c	 ldr         r3, [sp, #0xC]
  00024	e2832088	 add         r2, r3, #0x88
  00028	e3a0301f	 mov         r3, #0x1F
  0002c	e5823000	 str         r3, [r2]

; 55   :     }

  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d0000	 ldr         r0, [sp]
  0003c	e28dd004	 add         sp, sp, #4
  00040	e89d6000	 ldmia       sp, {sp, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M37797|

			 ENDP  ; |??0?$IndexList@K@@QAA@XZ|, IndexList<unsigned long>::IndexList<unsigned long>

	EXPORT	|??1?$IndexList@K@@QAA@XZ|		; IndexList<unsigned long>::~IndexList<unsigned long>

  00000			 AREA	 |.pdata|, PDATA
|$T37806| DCD	|$LN5@dynamic@2|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text$yd|, CODE, ARM

  00000		 |??__Fs_IndexList@@YAXXZ| PROC		; `dynamic atexit destructor for 's_IndexList''
  00000		 |$LN5@dynamic@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M37803|
  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          |??1?$IndexList@K@@QAA@XZ|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@dynamic@2|
  00014		 |$LN7@dynamic@2|
  00014	00000000	 DCD         |s_IndexList|
  00018		 |$M37804|

			 ENDP  ; |??__Fs_IndexList@@YAXXZ|, `dynamic atexit destructor for 's_IndexList''

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T37816| DCD	|$LN7@IndexList@2|
	DCD	0x40001704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1?$IndexList@K@@QAA@XZ| PROC	; IndexList<unsigned long>::~IndexList<unsigned long>

; 58   :     {

  00000		 |$LN7@IndexList@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M37813|

; 59   :         IndexData *pCurrent;
; 60   :         IndexData *pDelete;
; 61   : 
; 62   :         pCurrent = m_Head.pNext;

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3004	 str         r3, [sp, #4]
  0001c		 |$LN2@IndexList@2|

; 63   :         while (pCurrent != NULL)

  0001c	e59d3004	 ldr         r3, [sp, #4]
  00020	e3530000	 cmp         r3, #0
  00024	0a000009	 beq         |$LN1@IndexList@2|

; 64   :             {
; 65   :             pDelete = pCurrent;

  00028	e59d3004	 ldr         r3, [sp, #4]
  0002c	e58d3000	 str         r3, [sp]

; 66   :             pCurrent = pCurrent->pNext;

  00030	e59d3004	 ldr         r3, [sp, #4]
  00034	e5933000	 ldr         r3, [r3]
  00038	e58d3004	 str         r3, [sp, #4]

; 67   :             delete pDelete;

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e58d3008	 str         r3, [sp, #8]
  00044	e59d0008	 ldr         r0, [sp, #8]
  00048	eb000000	 bl          |??3@YAXPAX@Z|

; 68   :             }

  0004c	eafffff2	 b           |$LN2@IndexList@2|
  00050		 |$LN1@IndexList@2|

; 69   :     }

  00050	e28dd00c	 add         sp, sp, #0xC
  00054	e89d6000	 ldmia       sp, {sp, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M37814|

			 ENDP  ; |??1?$IndexList@K@@QAA@XZ|, IndexList<unsigned long>::~IndexList<unsigned long>


  00078			 AREA	 |.bss|, NOINIT
|s_IndexList| %	0x8c

  00000			 AREA	 |.CRT$XCU|, DATA
|s_IndexList$initializer$| DCD |??__Es_IndexList@@YAXXZ|
	END
