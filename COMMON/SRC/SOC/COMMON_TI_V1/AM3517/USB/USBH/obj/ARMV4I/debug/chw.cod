; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBH\chw.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@| [ DATA ] ; `string'
	EXPORT	|?g_hUsbProcessingEvent@@3PAXA| [ DATA ] ; g_hUsbProcessingEvent
	EXPORT	|?m_pChw@CHW@@2PAV1@A| [ DATA ]		; CHW::m_pChw

  00000			 AREA	 |.bss|, NOINIT
|?g_hUsbProcessingEvent@@3PAXA| % 0x4			; g_hUsbProcessingEvent
|?m_pChw@CHW@@2PAV1@A| % 0x4				; CHW::m_pChw

  00000			 AREA	 |.data|, DATA
|cszCfgStateStrings| DCD |??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@|
	DCD	|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@|
	DCD	|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@|
	DCD	|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@|
	DCD	|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@|
	DCD	|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@|
	DCD	|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@|
	DCD	|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@|
	DCD	|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@|
	DCD	|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@|
	DCD	|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JPBDFEOB@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "V", 0x0, "A"
	DCB	0x0, "L", 0x0, "I", 0x0, "D", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IMCKALLA@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAO?$AAN?$AAE?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "D", 0x0, "O", 0x0, "N", 0x0, "E"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@CEGNOBAM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "F", 0x0, "A", 0x0, "I", 0x0, "L"
	DCB	0x0, "E", 0x0, "D", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@PGHDEMEK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAI?$AAG?$AAN?$AAA?$AAL?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "I", 0x0, "G", 0x0, "N"
	DCB	0x0, "A", 0x0, "L", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "E", 0x0, "N", 0x0, "T", 0x0, "E"
	DCB	0x0, "R", 0x0, "_", 0x0, "O", 0x0, "P", 0x0, "E", 0x0, "R"
	DCB	0x0, "A", 0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, "A"
	DCB	0x0, "L", 0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T"
	DCB	0x0, "E", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@FBBOBKGN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAI?$AAN?$AAS?$AAE?$AAR?$AAT?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "S", 0x0, "E"
	DCB	0x0, "R", 0x0, "T", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "O"
	DCB	0x0, "_", 0x0, "U", 0x0, "P", 0x0, "S", 0x0, "T", 0x0, "R"
	DCB	0x0, "E", 0x0, "A", 0x0, "M", 0x0, "_", 0x0, "H", 0x0, "U"
	DCB	0x0, "B", 0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R", 0x0, "T"
	DCB	0x0, "_", 0x0, "A", 0x0, "R", 0x0, "R", 0x0, "A", 0x0, "Y"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@LCLFDJDO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "C", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "T", 0x0, "E", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "F", 0x0, "U", 0x0, "N", 0x0, "C", 0x0, "T"
	DCB	0x0, "I", 0x0, "O", 0x0, "N", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@COKEBMOE@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAC?$AAR?$AAE?$AAA?$AAT?$AAE?$AA_?$AAN?$AAE?$AAW?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "C", 0x0, "R", 0x0, "E", 0x0, "A"
	DCB	0x0, "T", 0x0, "E", 0x0, "_", 0x0, "N", 0x0, "E", 0x0, "W"
	DCB	0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@HPGGGHKI@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "H"
	DCB	0x0, "U", 0x0, "B", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S"
	DCB	0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O"
	DCB	0x0, "R", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@KPBCOGEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "H", 0x0, "U", 0x0, "B", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P"
	DCB	0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@CFFAAPDL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GA@NDHJOKMM@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAD?$AAE?$AAT?$AAE?$AAR?$AAM?$AAI?$AAN?$AAE?$AA_?$AAC@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "T", 0x0, "E"
	DCB	0x0, "R", 0x0, "M", 0x0, "I", 0x0, "N", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "T", 0x0, "O", 0x0, "_", 0x0, "C", 0x0, "H"
	DCB	0x0, "O", 0x0, "O", 0x0, "S", 0x0, "E", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@JADKDKDC@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@NPLCKJLH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I"
	DCB	0x0, "G", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@MEMGEMJJ@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "U"
	DCB	0x0, "P", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F"
	DCB	0x0, "I", 0x0, "G", 0x0, "U", 0x0, "R", 0x0, "A", 0x0, "T"
	DCB	0x0, "I", 0x0, "O", 0x0, "N", 0x0, "_", 0x0, "D", 0x0, "E"
	DCB	0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T"
	DCB	0x0, "O", 0x0, "R", 0x0, "_", 0x0, "A", 0x0, "R", 0x0, "R"
	DCB	0x0, "A", 0x0, "Y", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@BCHKIAPP@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@FNPCBDHK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "I"
	DCB	0x0, "N", 0x0, "I", 0x0, "T", 0x0, "I", 0x0, "A", 0x0, "L"
	DCB	0x0, "_", 0x0, "D", 0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C"
	DCB	0x0, "E", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C"
	DCB	0x0, "R", 0x0, "I", 0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@BBOOKHNN@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAL?$AAE?$AAA?$AAV?$AAE?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "L", 0x0, "E", 0x0, "A", 0x0, "V"
	DCB	0x0, "E", 0x0, "_", 0x0, "A", 0x0, "D", 0x0, "D", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "S", 0x0, "0", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@LGLHPFAK@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "A"
	DCB	0x0, "D", 0x0, "D", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "S"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@BLNLBKIO@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AAU?$AAL?$AAI?$AAN?$AAG?$AA_@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "S", 0x0, "C", 0x0, "H", 0x0, "E"
	DCB	0x0, "D", 0x0, "U", 0x0, "L", 0x0, "I", 0x0, "N", 0x0, "G"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "D", 0x0, "E", 0x0, "S", 0x0, "C", 0x0, "R", 0x0, "I"
	DCB	0x0, "P", 0x0, "T", 0x0, "O", 0x0, "R", 0x0, "_", 0x0, "T"
	DCB	0x0, "E", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@NMCKCJLL@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAR?$AAE?$AAS?$AAE?$AAT?$AA_?$AAA?$AAN?$AAD?$AA_?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "R", 0x0, "E", 0x0, "S", 0x0, "E"
	DCB	0x0, "T", 0x0, "_", 0x0, "A", 0x0, "N", 0x0, "D", 0x0, "_"
	DCB	0x0, "E", 0x0, "N", 0x0, "A", 0x0, "B", 0x0, "L", 0x0, "E"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R", 0x0, "T", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@KNOIBOPH@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAU?$AAS?$AAI?$AAN?$AAG?$AA_?$AAA?$AAD?$AAD?$AAR?$AAE@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "U", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "G", 0x0, "_", 0x0, "A", 0x0, "D", 0x0, "D", 0x0, "R"
	DCB	0x0, "E", 0x0, "S", 0x0, "S", 0x0, "0", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@COMJHLEF@?$AAD?$AAE?$AAV?$AAI?$AAC?$AAE?$AA_?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AA_?$AAO?$AAP?$AAE?$AAN?$AAI?$AAN?$AAG?$AA_?$AAE?$AAN?$AAD@| DCB "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "I", 0x0, "C", 0x0, "E", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F", 0x0, "I", 0x0, "G"
	DCB	0x0, "_", 0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U"
	DCB	0x0, "S", 0x0, "_", 0x0, "O", 0x0, "P", 0x0, "E", 0x0, "N"
	DCB	0x0, "I", 0x0, "N", 0x0, "G", 0x0, "_", 0x0, "E", 0x0, "N"
	DCB	0x0, "D", 0x0, "P", 0x0, "O", 0x0, "I", 0x0, "N", 0x0, "T"
	DCB	0x0, "0", 0x0, "_", 0x0, "P", 0x0, "I", 0x0, "P", 0x0, "E"
	DCB	0x0, 0x0, 0x0				; `string'
	EXPORT	|??_C@_15MAOEGKJF@?$AA?$CF?$AAS?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_02KNHHEEKP@?5?5?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_03NDEAONJP@?5?5?5?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_01CLKCMJKC@?5?$AA@| [ DATA ]	; `string'
	EXPORT	|??_C@_02LMMGGCAJ@?3?5?$AA@| [ DATA ]	; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?memdump@@YAXPAEGG@Z|			; memdump
	IMPORT	|NKDbgPrintfW|
	IMPORT	|strlen|
	IMPORT	|strcat|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__rt_udiv|
	IMPORT	|__rt_sdiv|
	IMPORT	|__security_check_cookie|

  00000			 AREA	 |.pdata|, PDATA
|$T43051| DCD	|$LN31@memdump|
	DCD	0xc0011804
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15MAOEGKJF@?$AA?$CF?$AAS?$AA?$AA@| DCB "%", 0x0, "S", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_02KNHHEEKP@?5?5?$AA@| DCB "  ", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_03NDEAONJP@?5?5?5?$AA@| DCB "   ", 0x0		; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_01CLKCMJKC@?5?$AA@| DCB " ", 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_02LMMGGCAJ@?3?5?$AA@| DCB ": ", 0x0		; `string'

  00000			 AREA	 |.xdata|, DATA
|$T43047| DCD	0xffffffe0
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__GSHandlerCheck|
  00004	00000000	 DCD         |$T43047|

  00008		 |?memdump@@YAXPAEGG@Z| PROC		; memdump

; 73   : {    

  00008		 |$LN31@memdump|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d0007	 stmdb       sp!, {r0 - r2}
  00010	e92d5000	 stmdb       sp!, {r12, lr}
  00014	e24dd090	 sub         sp, sp, #0x90
  00018		 |$M43048|
  00018	e59f3444	 ldr         r3, [pc, #0x444]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e58d3084	 str         r3, [sp, #0x84]

; 74   :     unsigned short i,j,l;
; 75   :     unsigned char tmp_str[100];
; 76   :     unsigned char tmp_str1[10];
; 77   :     for (i = 0; i < num_bytes; i += 16){

  00024	e3a03000	 mov         r3, #0
  00028	e1cd30b0	 strh        r3, [sp]
  0002c	ea000004	 b           |$LN24@memdump|
  00030		 |$LN23@memdump|
  00030	e1dd30b0	 ldrh        r3, [sp]
  00034	e2833010	 add         r3, r3, #0x10
  00038	e1a03803	 mov         r3, r3, lsl #16
  0003c	e1a03823	 mov         r3, r3, lsr #16
  00040	e1cd30b0	 strh        r3, [sp]
  00044		 |$LN24@memdump|
  00044	e1dd30b0	 ldrh        r3, [sp]
  00048	e1a02003	 mov         r2, r3
  0004c	e1dd39bc	 ldrh        r3, [sp, #0x9C]
  00050	e1520003	 cmp         r2, r3
  00054	aa0000f8	 bge         |$LN22@memdump|

; 78   :         unsigned short n ;
; 79   :         tmp_str[0]='\0';

  00058	e3a03000	 mov         r3, #0
  0005c	e5cd3010	 strb        r3, [sp, #0x10]

; 80   :         n = i+offset ;

  00060	e1dd30b0	 ldrh        r3, [sp]
  00064	e1a02003	 mov         r2, r3
  00068	e1dd3ab0	 ldrh        r3, [sp, #0xA0]
  0006c	e0823003	 add         r3, r2, r3
  00070	e1a03803	 mov         r3, r3, lsl #16
  00074	e1a03823	 mov         r3, r3, lsr #16
  00078	e1cd37b8	 strh        r3, [sp, #0x78]

; 81   :         for (j=0; j<4; j++) {

  0007c	e3a03000	 mov         r3, #0
  00080	e1cd37b6	 strh        r3, [sp, #0x76]
  00084	ea000004	 b           |$LN21@memdump|
  00088		 |$LN20@memdump|
  00088	e1dd37b6	 ldrh        r3, [sp, #0x76]
  0008c	e2833001	 add         r3, r3, #1
  00090	e1a03803	 mov         r3, r3, lsl #16
  00094	e1a03823	 mov         r3, r3, lsr #16
  00098	e1cd37b6	 strh        r3, [sp, #0x76]
  0009c		 |$LN21@memdump|
  0009c	e1dd37b6	 ldrh        r3, [sp, #0x76]
  000a0	e3530004	 cmp         r3, #4
  000a4	aa000021	 bge         |$LN19@memdump|

; 82   :             l=n%16;

  000a8	e1dd37b8	 ldrh        r3, [sp, #0x78]
  000ac	e1a01003	 mov         r1, r3
  000b0	e3a00010	 mov         r0, #0x10
  000b4	eb000000	 bl          __rt_sdiv
  000b8	e1a03801	 mov         r3, r1, lsl #16
  000bc	e1a03823	 mov         r3, r3, lsr #16
  000c0	e1cd37b4	 strh        r3, [sp, #0x74]

; 83   :             if (l>=10)

  000c4	e1dd37b4	 ldrh        r3, [sp, #0x74]
  000c8	e353000a	 cmp         r3, #0xA
  000cc	ba000009	 blt         |$LN18@memdump|

; 84   :             tmp_str[3-j]=(unsigned char)('A'+l-10);

  000d0	e1dd37b4	 ldrh        r3, [sp, #0x74]
  000d4	e2833041	 add         r3, r3, #0x41
  000d8	e243300a	 sub         r3, r3, #0xA
  000dc	e20310ff	 and         r1, r3, #0xFF
  000e0	e1dd37b6	 ldrh        r3, [sp, #0x76]
  000e4	e2632003	 rsb         r2, r3, #3
  000e8	e28d3010	 add         r3, sp, #0x10
  000ec	e0833002	 add         r3, r3, r2
  000f0	e5c31000	 strb        r1, [r3]

; 85   :             else

  000f4	ea000007	 b           |$LN17@memdump|
  000f8		 |$LN18@memdump|

; 86   :             tmp_str[3-j]=(unsigned char)(l+'0');

  000f8	e1dd37b4	 ldrh        r3, [sp, #0x74]
  000fc	e2833030	 add         r3, r3, #0x30
  00100	e20310ff	 and         r1, r3, #0xFF
  00104	e1dd37b6	 ldrh        r3, [sp, #0x76]
  00108	e2632003	 rsb         r2, r3, #3
  0010c	e28d3010	 add         r3, sp, #0x10
  00110	e0833002	 add         r3, r3, r2
  00114	e5c31000	 strb        r1, [r3]
  00118		 |$LN17@memdump|

; 87   :             n >>= 4 ;

  00118	e1dd37b8	 ldrh        r3, [sp, #0x78]
  0011c	e1a03223	 mov         r3, r3, lsr #4
  00120	e1a03803	 mov         r3, r3, lsl #16
  00124	e1a03823	 mov         r3, r3, lsr #16
  00128	e1cd37b8	 strh        r3, [sp, #0x78]

; 88   :         }

  0012c	eaffffd5	 b           |$LN20@memdump|
  00130		 |$LN19@memdump|

; 89   :         tmp_str[4]='\0';

  00130	e3a03000	 mov         r3, #0
  00134	e5cd3014	 strb        r3, [sp, #0x14]

; 90   :         strcat ( (char *)tmp_str, ": ");

  00138	e59f1320	 ldr         r1, [pc, #0x320]
  0013c	e28d0010	 add         r0, sp, #0x10
  00140	eb000000	 bl          strcat

; 91   :         /*          Output the hex bytes        */
; 92   :         for (j = i; j < (i+16); j++) {

  00144	e1dd30b0	 ldrh        r3, [sp]
  00148	e1cd37b6	 strh        r3, [sp, #0x76]
  0014c	ea000004	 b           |$LN16@memdump|
  00150		 |$LN15@memdump|
  00150	e1dd37b6	 ldrh        r3, [sp, #0x76]
  00154	e2833001	 add         r3, r3, #1
  00158	e1a03803	 mov         r3, r3, lsl #16
  0015c	e1a03823	 mov         r3, r3, lsr #16
  00160	e1cd37b6	 strh        r3, [sp, #0x76]
  00164		 |$LN16@memdump|
  00164	e1dd37b6	 ldrh        r3, [sp, #0x76]
  00168	e1a02003	 mov         r2, r3
  0016c	e1dd30b0	 ldrh        r3, [sp]
  00170	e2833010	 add         r3, r3, #0x10
  00174	e1520003	 cmp         r2, r3
  00178	aa00003f	 bge         |$LN14@memdump|

; 93   :             int m ;
; 94   :             if (j < num_bytes)  {

  0017c	e1dd37b6	 ldrh        r3, [sp, #0x76]
  00180	e1a02003	 mov         r2, r3
  00184	e1dd39bc	 ldrh        r3, [sp, #0x9C]
  00188	e1520003	 cmp         r2, r3
  0018c	aa000036	 bge         |$LN13@memdump|

; 95   :                 m=((unsigned int)((unsigned char)*(data+j)))/16 ;

  00190	e1dd37b6	 ldrh        r3, [sp, #0x76]
  00194	e1a02003	 mov         r2, r3
  00198	e59d3098	 ldr         r3, [sp, #0x98]
  0019c	e0833002	 add         r3, r3, r2
  001a0	e5d31000	 ldrb        r1, [r3]
  001a4	e3a00010	 mov         r0, #0x10
  001a8	eb000000	 bl          __rt_udiv
  001ac	e58d007c	 str         r0, [sp, #0x7C]

; 96   :                 if (m>=10)

  001b0	e59d307c	 ldr         r3, [sp, #0x7C]
  001b4	e353000a	 cmp         r3, #0xA
  001b8	ba000006	 blt         |$LN12@memdump|

; 97   :                     tmp_str1[0]='A'+(unsigned char)m-10;

  001bc	e59d307c	 ldr         r3, [sp, #0x7C]
  001c0	e20330ff	 and         r3, r3, #0xFF
  001c4	e2833041	 add         r3, r3, #0x41
  001c8	e243300a	 sub         r3, r3, #0xA
  001cc	e20330ff	 and         r3, r3, #0xFF
  001d0	e5cd3004	 strb        r3, [sp, #4]

; 98   :                 else

  001d4	ea000004	 b           |$LN11@memdump|
  001d8		 |$LN12@memdump|

; 99   :                     tmp_str1[0]=(unsigned char)m+'0';

  001d8	e59d307c	 ldr         r3, [sp, #0x7C]
  001dc	e20330ff	 and         r3, r3, #0xFF
  001e0	e2833030	 add         r3, r3, #0x30
  001e4	e20330ff	 and         r3, r3, #0xFF
  001e8	e5cd3004	 strb        r3, [sp, #4]
  001ec		 |$LN11@memdump|

; 100  :                 m=((unsigned int)((unsigned char)*(data+j)))%16 ;

  001ec	e1dd37b6	 ldrh        r3, [sp, #0x76]
  001f0	e1a02003	 mov         r2, r3
  001f4	e59d3098	 ldr         r3, [sp, #0x98]
  001f8	e0833002	 add         r3, r3, r2
  001fc	e5d31000	 ldrb        r1, [r3]
  00200	e3a00010	 mov         r0, #0x10
  00204	eb000000	 bl          __rt_udiv
  00208	e58d107c	 str         r1, [sp, #0x7C]

; 101  :                 if (m>=10)

  0020c	e59d307c	 ldr         r3, [sp, #0x7C]
  00210	e353000a	 cmp         r3, #0xA
  00214	ba000006	 blt         |$LN10@memdump|

; 102  :                     tmp_str1[1]='A'+(unsigned char)m-10;

  00218	e59d307c	 ldr         r3, [sp, #0x7C]
  0021c	e20330ff	 and         r3, r3, #0xFF
  00220	e2833041	 add         r3, r3, #0x41
  00224	e243300a	 sub         r3, r3, #0xA
  00228	e20330ff	 and         r3, r3, #0xFF
  0022c	e5cd3005	 strb        r3, [sp, #5]

; 103  :                 else

  00230	ea000004	 b           |$LN9@memdump|
  00234		 |$LN10@memdump|

; 104  :                     tmp_str1[1]=(unsigned char)m+'0';

  00234	e59d307c	 ldr         r3, [sp, #0x7C]
  00238	e20330ff	 and         r3, r3, #0xFF
  0023c	e2833030	 add         r3, r3, #0x30
  00240	e20330ff	 and         r3, r3, #0xFF
  00244	e5cd3005	 strb        r3, [sp, #5]
  00248		 |$LN9@memdump|

; 105  :                 tmp_str1[2]='\0';

  00248	e3a03000	 mov         r3, #0
  0024c	e5cd3006	 strb        r3, [sp, #6]

; 106  :                 strcat ((char *)tmp_str, (char *)tmp_str1);

  00250	e28d1004	 add         r1, sp, #4
  00254	e28d0010	 add         r0, sp, #0x10
  00258	eb000000	 bl          strcat

; 107  :                 strcat ((char *)tmp_str, " ");

  0025c	e59f11f8	 ldr         r1, [pc, #0x1F8]
  00260	e28d0010	 add         r0, sp, #0x10
  00264	eb000000	 bl          strcat

; 108  :             }
; 109  :             else {

  00268	ea000002	 b           |$LN8@memdump|
  0026c		 |$LN13@memdump|

; 110  :                 strcat((char *)tmp_str,"   ");

  0026c	e59f11e4	 ldr         r1, [pc, #0x1E4]
  00270	e28d0010	 add         r0, sp, #0x10
  00274	eb000000	 bl          strcat
  00278		 |$LN8@memdump|

; 111  :             }
; 112  :         }

  00278	eaffffb4	 b           |$LN15@memdump|
  0027c		 |$LN14@memdump|

; 113  :         strcat((char *)tmp_str, "  ");

  0027c	e59f11d0	 ldr         r1, [pc, #0x1D0]
  00280	e28d0010	 add         r0, sp, #0x10
  00284	eb000000	 bl          strcat

; 114  :         l=(unsigned short)strlen((char *)tmp_str);

  00288	e28d0010	 add         r0, sp, #0x10
  0028c	eb000000	 bl          strlen
  00290	e58d0088	 str         r0, [sp, #0x88]
  00294	e59d3088	 ldr         r3, [sp, #0x88]
  00298	e1a03803	 mov         r3, r3, lsl #16
  0029c	e1a03823	 mov         r3, r3, lsr #16
  002a0	e1cd37b4	 strh        r3, [sp, #0x74]

; 115  : 
; 116  :         /*         * Output the ASCII bytes        */
; 117  :         for (j = i; j < (i+16); j++){

  002a4	e1dd30b0	 ldrh        r3, [sp]
  002a8	e1cd37b6	 strh        r3, [sp, #0x76]
  002ac	ea000004	 b           |$LN7@memdump|
  002b0		 |$LN6@memdump|
  002b0	e1dd37b6	 ldrh        r3, [sp, #0x76]
  002b4	e2833001	 add         r3, r3, #1
  002b8	e1a03803	 mov         r3, r3, lsl #16
  002bc	e1a03823	 mov         r3, r3, lsr #16
  002c0	e1cd37b6	 strh        r3, [sp, #0x76]
  002c4		 |$LN7@memdump|
  002c4	e1dd37b6	 ldrh        r3, [sp, #0x76]
  002c8	e1a02003	 mov         r2, r3
  002cc	e1dd30b0	 ldrh        r3, [sp]
  002d0	e2833010	 add         r3, r3, #0x10
  002d4	e1520003	 cmp         r2, r3
  002d8	aa00002d	 bge         |$LN5@memdump|

; 118  :             if (j < num_bytes){

  002dc	e1dd37b6	 ldrh        r3, [sp, #0x76]
  002e0	e1a02003	 mov         r2, r3
  002e4	e1dd39bc	 ldrh        r3, [sp, #0x9C]
  002e8	e1520003	 cmp         r2, r3
  002ec	aa00001c	 bge         |$LN4@memdump|

; 119  :                 char c = *(data+j);

  002f0	e1dd37b6	 ldrh        r3, [sp, #0x76]
  002f4	e1a02003	 mov         r2, r3
  002f8	e59d3098	 ldr         r3, [sp, #0x98]
  002fc	e0833002	 add         r3, r3, r2
  00300	e5d33000	 ldrb        r3, [r3]
  00304	e1a03c03	 mov         r3, r3, lsl #24
  00308	e1a03c43	 mov         r3, r3, asr #24
  0030c	e5cd3080	 strb        r3, [sp, #0x80]

; 120  :                 if (c < ' ' || c > 'z')

  00310	e1dd38d0	 ldrsb       r3, [sp, #0x80]
  00314	e3530020	 cmp         r3, #0x20
  00318	ba000002	 blt         |$LN2@memdump|
  0031c	e1dd38d0	 ldrsb       r3, [sp, #0x80]
  00320	e353007a	 cmp         r3, #0x7A
  00324	da000001	 ble         |$LN3@memdump|
  00328		 |$LN2@memdump|

; 121  :                     c = '.';

  00328	e3a0302e	 mov         r3, #0x2E
  0032c	e5cd3080	 strb        r3, [sp, #0x80]
  00330		 |$LN3@memdump|

; 122  :                 tmp_str[l++]=c;

  00330	e1dd38d0	 ldrsb       r3, [sp, #0x80]
  00334	e20310ff	 and         r1, r3, #0xFF
  00338	e1dd37b4	 ldrh        r3, [sp, #0x74]
  0033c	e1a02003	 mov         r2, r3
  00340	e28d3010	 add         r3, sp, #0x10
  00344	e0833002	 add         r3, r3, r2
  00348	e5c31000	 strb        r1, [r3]
  0034c	e1dd37b4	 ldrh        r3, [sp, #0x74]
  00350	e2833001	 add         r3, r3, #1
  00354	e1a03803	 mov         r3, r3, lsl #16
  00358	e1a03823	 mov         r3, r3, lsr #16
  0035c	e1cd37b4	 strh        r3, [sp, #0x74]

; 123  :             }
; 124  :             else

  00360	ea00000a	 b           |$LN1@memdump|
  00364		 |$LN4@memdump|

; 125  :                 tmp_str[l++]=' ';

  00364	e1dd37b4	 ldrh        r3, [sp, #0x74]
  00368	e1a02003	 mov         r2, r3
  0036c	e28d3010	 add         r3, sp, #0x10
  00370	e0832002	 add         r2, r3, r2
  00374	e3a03020	 mov         r3, #0x20
  00378	e5c23000	 strb        r3, [r2]
  0037c	e1dd37b4	 ldrh        r3, [sp, #0x74]
  00380	e2833001	 add         r3, r3, #1
  00384	e1a03803	 mov         r3, r3, lsl #16
  00388	e1a03823	 mov         r3, r3, lsr #16
  0038c	e1cd37b4	 strh        r3, [sp, #0x74]
  00390		 |$LN1@memdump|

; 126  :         }

  00390	eaffffc6	 b           |$LN6@memdump|
  00394		 |$LN5@memdump|

; 127  :         tmp_str[l++]='\r';        tmp_str[l++]='\n';        tmp_str[l++]='\0';

  00394	e1dd37b4	 ldrh        r3, [sp, #0x74]
  00398	e1a02003	 mov         r2, r3
  0039c	e28d3010	 add         r3, sp, #0x10
  003a0	e0832002	 add         r2, r3, r2
  003a4	e3a0300d	 mov         r3, #0xD
  003a8	e5c23000	 strb        r3, [r2]
  003ac	e1dd37b4	 ldrh        r3, [sp, #0x74]
  003b0	e2833001	 add         r3, r3, #1
  003b4	e1a03803	 mov         r3, r3, lsl #16
  003b8	e1a03823	 mov         r3, r3, lsr #16
  003bc	e1cd37b4	 strh        r3, [sp, #0x74]
  003c0	e1dd37b4	 ldrh        r3, [sp, #0x74]
  003c4	e1a02003	 mov         r2, r3
  003c8	e28d3010	 add         r3, sp, #0x10
  003cc	e0832002	 add         r2, r3, r2
  003d0	e3a0300a	 mov         r3, #0xA
  003d4	e5c23000	 strb        r3, [r2]
  003d8	e1dd37b4	 ldrh        r3, [sp, #0x74]
  003dc	e2833001	 add         r3, r3, #1
  003e0	e1a03803	 mov         r3, r3, lsl #16
  003e4	e1a03823	 mov         r3, r3, lsr #16
  003e8	e1cd37b4	 strh        r3, [sp, #0x74]
  003ec	e1dd37b4	 ldrh        r3, [sp, #0x74]
  003f0	e1a02003	 mov         r2, r3
  003f4	e28d3010	 add         r3, sp, #0x10
  003f8	e0832002	 add         r2, r3, r2
  003fc	e3a03000	 mov         r3, #0
  00400	e5c23000	 strb        r3, [r2]
  00404	e1dd37b4	 ldrh        r3, [sp, #0x74]
  00408	e2833001	 add         r3, r3, #1
  0040c	e1a03803	 mov         r3, r3, lsl #16
  00410	e1a03823	 mov         r3, r3, lsr #16
  00414	e1cd37b4	 strh        r3, [sp, #0x74]

; 128  :         RETAILMSG(1, (L"%S", tmp_str));    

  00418	e28d1010	 add         r1, sp, #0x10
  0041c	e59f002c	 ldr         r0, [pc, #0x2C]
  00420	eb000000	 bl          NKDbgPrintfW
  00424	e3a03001	 mov         r3, #1
  00428	e58d308c	 str         r3, [sp, #0x8C]
  0042c	ea000001	 b           |$LN28@memdump|
  00430	e3a03000	 mov         r3, #0
  00434	e58d308c	 str         r3, [sp, #0x8C]
  00438		 |$LN28@memdump|

; 129  :     }

  00438	eafffefc	 b           |$LN23@memdump|
  0043c		 |$LN22@memdump|

; 73   : {    

  0043c	e59d0084	 ldr         r0, [sp, #0x84]
  00440	eb000000	 bl          __security_check_cookie

; 130  : }

  00444	e28dd090	 add         sp, sp, #0x90
  00448	e89d6000	 ldmia       sp, {sp, lr}
  0044c	e12fff1e	 bx          lr
  00450		 |$LN32@memdump|
  00450		 |$LN33@memdump|
  00450	00000000	 DCD         |??_C@_15MAOEGKJF@?$AA?$CF?$AAS?$AA?$AA@|
  00454		 |$LN34@memdump|
  00454	00000000	 DCD         |??_C@_02KNHHEEKP@?5?5?$AA@|
  00458		 |$LN35@memdump|
  00458	00000000	 DCD         |??_C@_03NDEAONJP@?5?5?5?$AA@|
  0045c		 |$LN36@memdump|
  0045c	00000000	 DCD         |??_C@_01CLKCMJKC@?5?$AA@|
  00460		 |$LN37@memdump|
  00460	00000000	 DCD         |??_C@_02LMMGGCAJ@?3?5?$AA@|
  00464		 |$LN38@memdump|
  00464	00000000	 DCD         |__security_cookie|
  00468		 |$M43049|

			 ENDP  ; |?memdump@@YAXPAEGG@Z|, memdump

	EXPORT	|?ReadFIFO@@YAHPAKPAXK@Z|		; ReadFIFO

  00008			 AREA	 |.pdata|, PDATA
|$T43064| DCD	|$LN11@ReadFIFO|
	DCD	0x40004404
; Function compile flags: /Odtp

  00468			 AREA	 |.text|, CODE, ARM

  00468		 |?ReadFIFO@@YAHPAKPAXK@Z| PROC		; ReadFIFO

; 133  : {

  00468		 |$LN11@ReadFIFO|
  00468	e1a0c00d	 mov         r12, sp
  0046c	e92d0007	 stmdb       sp!, {r0 - r2}
  00470	e92d5000	 stmdb       sp!, {r12, lr}
  00474	e24dd020	 sub         sp, sp, #0x20
  00478		 |$M43061|

; 134  :     DWORD total  = size / 4;

  00478	e59d1030	 ldr         r1, [sp, #0x30]
  0047c	e3a00004	 mov         r0, #4
  00480	eb000000	 bl          __rt_udiv
  00484	e58d0010	 str         r0, [sp, #0x10]

; 135  :     DWORD remain = size % 4;

  00488	e59d1030	 ldr         r1, [sp, #0x30]
  0048c	e3a00004	 mov         r0, #4
  00490	eb000000	 bl          __rt_udiv
  00494	e58d100c	 str         r1, [sp, #0xC]

; 136  :     DWORD i		 = 0;

  00498	e3a03000	 mov         r3, #0
  0049c	e58d3000	 str         r3, [sp]

; 137  : 
; 138  :     DWORD* pDword = (DWORD*)pData;

  004a0	e59d302c	 ldr         r3, [sp, #0x2C]
  004a4	e58d3008	 str         r3, [sp, #8]

; 139  : 
; 140  :     volatile ULONG *pReg = (volatile ULONG*)pFifoBase;

  004a8	e59d3028	 ldr         r3, [sp, #0x28]
  004ac	e58d3004	 str         r3, [sp, #4]

; 141  : 
; 142  :     // this is 32-bit align
; 143  :     for (i = 0; i < total; i++)

  004b0	e3a03000	 mov         r3, #0
  004b4	e58d3000	 str         r3, [sp]
  004b8	ea000002	 b           |$LN6@ReadFIFO|
  004bc		 |$LN5@ReadFIFO|
  004bc	e59d3000	 ldr         r3, [sp]
  004c0	e2833001	 add         r3, r3, #1
  004c4	e58d3000	 str         r3, [sp]
  004c8		 |$LN6@ReadFIFO|
  004c8	e59d2000	 ldr         r2, [sp]
  004cc	e59d3010	 ldr         r3, [sp, #0x10]
  004d0	e1520003	 cmp         r2, r3
  004d4	2a000007	 bcs         |$LN4@ReadFIFO|

; 144  :     {
; 145  :         *pDword++ = INREG32(pReg);

  004d8	e59d3004	 ldr         r3, [sp, #4]
  004dc	e5932000	 ldr         r2, [r3]
  004e0	e59d3008	 ldr         r3, [sp, #8]
  004e4	e5832000	 str         r2, [r3]
  004e8	e59d3008	 ldr         r3, [sp, #8]
  004ec	e2833004	 add         r3, r3, #4
  004f0	e58d3008	 str         r3, [sp, #8]

; 146  :     }

  004f4	eafffff0	 b           |$LN5@ReadFIFO|
  004f8		 |$LN4@ReadFIFO|

; 147  :         
; 148  :     // Set the pByte equal to the last bytes of data being transferred
; 149  :     if (remain != 0)

  004f8	e59d300c	 ldr         r3, [sp, #0xC]
  004fc	e3530000	 cmp         r3, #0
  00500	0a000016	 beq         |$LN3@ReadFIFO|

; 150  :     {
; 151  :         UCHAR* pUCHAR = (UCHAR*) pDword;

  00504	e59d3008	 ldr         r3, [sp, #8]
  00508	e58d3018	 str         r3, [sp, #0x18]

; 152  :         DWORD dwTemp = INREG32(pReg);

  0050c	e59d3004	 ldr         r3, [sp, #4]
  00510	e5933000	 ldr         r3, [r3]
  00514	e58d3014	 str         r3, [sp, #0x14]
  00518		 |$LN2@ReadFIFO|

; 153  :         
; 154  :         while (remain--)

  00518	e59d300c	 ldr         r3, [sp, #0xC]
  0051c	e3530000	 cmp         r3, #0
  00520	e59d300c	 ldr         r3, [sp, #0xC]
  00524	e2433001	 sub         r3, r3, #1
  00528	e58d300c	 str         r3, [sp, #0xC]
  0052c	0a00000b	 beq         |$LN1@ReadFIFO|

; 155  :         {
; 156  :             *pUCHAR++ = (UCHAR) (dwTemp & 0xFF);

  00530	e59d3014	 ldr         r3, [sp, #0x14]
  00534	e20330ff	 and         r3, r3, #0xFF
  00538	e20320ff	 and         r2, r3, #0xFF
  0053c	e59d3018	 ldr         r3, [sp, #0x18]
  00540	e5c32000	 strb        r2, [r3]
  00544	e59d3018	 ldr         r3, [sp, #0x18]
  00548	e2833001	 add         r3, r3, #1
  0054c	e58d3018	 str         r3, [sp, #0x18]

; 157  :             dwTemp>>=8;

  00550	e59d3014	 ldr         r3, [sp, #0x14]
  00554	e1a03423	 mov         r3, r3, lsr #8
  00558	e58d3014	 str         r3, [sp, #0x14]

; 158  :         }

  0055c	eaffffed	 b           |$LN2@ReadFIFO|
  00560		 |$LN1@ReadFIFO|
  00560		 |$LN3@ReadFIFO|

; 159  :     }
; 160  : /*
; 161  :     RETAILMSG(1,(TEXT("Read fifo\r\n")));
; 162  :     memdump((UCHAR*)pData,(USHORT)size,0);
; 163  :     RETAILMSG(1,(TEXT("\r\n")));
; 164  : */
; 165  :     return TRUE;

  00560	e3a03001	 mov         r3, #1
  00564	e58d301c	 str         r3, [sp, #0x1C]

; 166  : }

  00568	e59d001c	 ldr         r0, [sp, #0x1C]
  0056c	e28dd020	 add         sp, sp, #0x20
  00570	e89d6000	 ldmia       sp, {sp, lr}
  00574	e12fff1e	 bx          lr
  00578		 |$M43062|

			 ENDP  ; |?ReadFIFO@@YAHPAKPAXK@Z|, ReadFIFO

	EXPORT	|??_C@_1GK@LINCOMEM@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|?WriteFIFO@@YAHPAKPAXK@Z|		; WriteFIFO
	IMPORT	|dpCurSettings|

  00010			 AREA	 |.pdata|, PDATA
|$T43072| DCD	|$LN13@WriteFIFO|
	DCD	0x40005004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@LINCOMEM@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AA?5@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "F", 0x0, "I"
	DCB	0x0, "F", 0x0, "O", 0x0, ":", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, "t", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00578			 AREA	 |.text|, CODE, ARM

  00578		 |?WriteFIFO@@YAHPAKPAXK@Z| PROC	; WriteFIFO

; 169  : {

  00578		 |$LN13@WriteFIFO|
  00578	e1a0c00d	 mov         r12, sp
  0057c	e92d0007	 stmdb       sp!, {r0 - r2}
  00580	e92d5000	 stmdb       sp!, {r12, lr}
  00584	e24dd020	 sub         sp, sp, #0x20
  00588		 |$M43069|

; 170  :     DWORD total					= size / 4;

  00588	e59d1030	 ldr         r1, [sp, #0x30]
  0058c	e3a00004	 mov         r0, #4
  00590	eb000000	 bl          __rt_udiv
  00594	e58d0010	 str         r0, [sp, #0x10]

; 171  :     DWORD remain				= size % 4;

  00598	e59d1030	 ldr         r1, [sp, #0x30]
  0059c	e3a00004	 mov         r0, #4
  005a0	eb000000	 bl          __rt_udiv
  005a4	e58d100c	 str         r1, [sp, #0xC]

; 172  :     DWORD i						= 0;

  005a8	e3a03000	 mov         r3, #0
  005ac	e58d3000	 str         r3, [sp]

; 173  :     DWORD* pDword				= (DWORD*)pData;

  005b0	e59d302c	 ldr         r3, [sp, #0x2C]
  005b4	e58d3008	 str         r3, [sp, #8]

; 174  : 
; 175  :     volatile ULONG *pReg = (volatile ULONG*)pFifoBase;

  005b8	e59d3028	 ldr         r3, [sp, #0x28]
  005bc	e58d3004	 str         r3, [sp, #4]

; 176  : 
; 177  :     // Critical section would be handled outside
; 178  :     DEBUGMSG(ZONE_VERBOSE, (TEXT("WriteFIFO: total (0x%x), remain (0x%x), size(0x%x)\r\n"), total, remain, size));    

  005c0	e59f30ec	 ldr         r3, [pc, #0xEC]
  005c4	e5933440	 ldr         r3, [r3, #0x440]
  005c8	e3130a01	 tst         r3, #1, 20
  005cc	0a000007	 beq         |$LN9@WriteFIFO|
  005d0	e59d3030	 ldr         r3, [sp, #0x30]
  005d4	e59d200c	 ldr         r2, [sp, #0xC]
  005d8	e59d1010	 ldr         r1, [sp, #0x10]
  005dc	e59f00cc	 ldr         r0, [pc, #0xCC]
  005e0	eb000000	 bl          NKDbgPrintfW
  005e4	e3a03001	 mov         r3, #1
  005e8	e58d301c	 str         r3, [sp, #0x1C]
  005ec	ea000001	 b           |$LN10@WriteFIFO|
  005f0		 |$LN9@WriteFIFO|
  005f0	e3a03000	 mov         r3, #0
  005f4	e58d301c	 str         r3, [sp, #0x1C]
  005f8		 |$LN10@WriteFIFO|

; 179  : /*
; 180  :     memdump((UCHAR*)pData,(USHORT)size,0);
; 181  :     RETAILMSG(1,(TEXT("\r\n")));
; 182  : */
; 183  :     // this is 32-bit align
; 184  :     for (i = 0; i < total; i++)

  005f8	e3a03000	 mov         r3, #0
  005fc	e58d3000	 str         r3, [sp]
  00600	ea000002	 b           |$LN6@WriteFIFO|
  00604		 |$LN5@WriteFIFO|
  00604	e59d3000	 ldr         r3, [sp]
  00608	e2833001	 add         r3, r3, #1
  0060c	e58d3000	 str         r3, [sp]
  00610		 |$LN6@WriteFIFO|
  00610	e59d2000	 ldr         r2, [sp]
  00614	e59d3010	 ldr         r3, [sp, #0x10]
  00618	e1520003	 cmp         r2, r3
  0061c	2a000007	 bcs         |$LN4@WriteFIFO|

; 185  :     {
; 186  :         OUTREG32(pReg, *pDword++);

  00620	e59d3008	 ldr         r3, [sp, #8]
  00624	e5932000	 ldr         r2, [r3]
  00628	e59d3004	 ldr         r3, [sp, #4]
  0062c	e5832000	 str         r2, [r3]
  00630	e59d3008	 ldr         r3, [sp, #8]
  00634	e2833004	 add         r3, r3, #4
  00638	e58d3008	 str         r3, [sp, #8]

; 187  :     }

  0063c	eafffff0	 b           |$LN5@WriteFIFO|
  00640		 |$LN4@WriteFIFO|

; 188  : 
; 189  :     // Set the pByte equal to the last bytes of data being transferred
; 190  :     if (remain != 0)

  00640	e59d300c	 ldr         r3, [sp, #0xC]
  00644	e3530000	 cmp         r3, #0
  00648	0a000012	 beq         |$LN3@WriteFIFO|

; 191  :     {
; 192  :         // Pointer to the first byte of data
; 193  :         USHORT *pWORD =(USHORT *)pDword;

  0064c	e59d3008	 ldr         r3, [sp, #8]
  00650	e58d3014	 str         r3, [sp, #0x14]

; 194  : 
; 195  :         // Finally if there is remain
; 196  :         if (remain & 0x2)  // either 2 or 3

  00654	e59d300c	 ldr         r3, [sp, #0xC]
  00658	e3130002	 tst         r3, #2
  0065c	0a000006	 beq         |$LN2@WriteFIFO|

; 197  :         {
; 198  :             // Write 2 bytes to there
; 199  :             OUTREG16(pReg, *pWORD++);        

  00660	e59d3014	 ldr         r3, [sp, #0x14]
  00664	e1d320b0	 ldrh        r2, [r3]
  00668	e59d3004	 ldr         r3, [sp, #4]
  0066c	e1c320b0	 strh        r2, [r3]
  00670	e59d3014	 ldr         r3, [sp, #0x14]
  00674	e2833002	 add         r3, r3, #2
  00678	e58d3014	 str         r3, [sp, #0x14]
  0067c		 |$LN2@WriteFIFO|

; 200  :         }
; 201  : 
; 202  :         if (remain & 0x1)

  0067c	e59d300c	 ldr         r3, [sp, #0xC]
  00680	e3130001	 tst         r3, #1
  00684	0a000003	 beq         |$LN1@WriteFIFO|

; 203  :         {
; 204  :             // Write 1 byte to there
; 205  :             OUTREG8(pReg, *((UCHAR*)pWORD));

  00688	e59d3014	 ldr         r3, [sp, #0x14]
  0068c	e5d32000	 ldrb        r2, [r3]
  00690	e59d3004	 ldr         r3, [sp, #4]
  00694	e5c32000	 strb        r2, [r3]
  00698		 |$LN1@WriteFIFO|
  00698		 |$LN3@WriteFIFO|

; 206  :         }
; 207  :     }
; 208  :     return TRUE;

  00698	e3a03001	 mov         r3, #1
  0069c	e58d3018	 str         r3, [sp, #0x18]

; 209  : }

  006a0	e59d0018	 ldr         r0, [sp, #0x18]
  006a4	e28dd020	 add         sp, sp, #0x20
  006a8	e89d6000	 ldmia       sp, {sp, lr}
  006ac	e12fff1e	 bx          lr
  006b0		 |$LN14@WriteFIFO|
  006b0		 |$LN15@WriteFIFO|
  006b0	00000000	 DCD         |??_C@_1GK@LINCOMEM@?$AAW?$AAr?$AAi?$AAt?$AAe?$AAF?$AAI?$AAF?$AAO?$AA?3?$AA?5?$AAt?$AAo?$AAt?$AAa?$AAl?$AA?5?$AA?$CI?$AA0?$AAx?$AA?$CF?$AAx?$AA?$CJ?$AA?0?$AA?5?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AA?5@|
  006b4		 |$LN16@WriteFIFO|
  006b4	00000000	 DCD         |dpCurSettings|
  006b8		 |$M43070|

			 ENDP  ; |?WriteFIFO@@YAHPAKPAXK@Z|, WriteFIFO

	EXPORT	|??_C@_1FK@PKPBIFIM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAP?$AA?5?$AAc?$AAo@| [ DATA ] ; `string'
	EXPORT	|?LoadEnpointConfiguration@CHW@@AAAHXZ|	; CHW::LoadEnpointConfiguration
	EXPORT	|??_7CHW@@6B@| [ DATA ]			; CHW::`vftable'
	EXPORT	|??0CHW@@QAA@SAE0KKQAVCPhysMem@@PAX@Z|	; CHW::CHW
	EXPORT	|?GetFrameNumber@CHW@@UAAHPAK@Z|	; CHW::GetFrameNumber
	EXPORT	|?GetFrameLength@CHW@@UAAHPAG@Z|	; CHW::GetFrameLength
	EXPORT	|?SetFrameLength@CHW@@UAAHPAXG@Z|	; CHW::SetFrameLength
	EXPORT	|?StopAdjustingFrame@CHW@@UAAHXZ|	; CHW::StopAdjustingFrame
	EXPORT	|?PowerMgmtCallback@CHW@@UAAXH@Z|	; CHW::PowerMgmtCallback
	EXPORT	|?DidPortStatusChange@CHW@@UAAHE@Z|	; CHW::DidPortStatusChange
	EXPORT	|?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z| ; CHW::GetPortStatus
	EXPORT	|?RootHubFeature@CHW@@UAAHEEG@Z|	; CHW::RootHubFeature
	EXPORT	|?ResetAndEnablePort@CHW@@UAAHE@Z|	; CHW::ResetAndEnablePort
	EXPORT	|?DisablePort@CHW@@UAAXE@Z|		; CHW::DisablePort
	EXPORT	|?WaitForPortStatusChange@CHW@@UAAHPAX@Z| ; CHW::WaitForPortStatusChange
	EXPORT	|?SetCapability@?ICHcd@CHW@@UAAKK@Z|	; CHW[::CHcd]::SetCapability
	EXPORT	|?GetCapability@?ICHcd@CHW@@UAAKXZ|	; CHW[::CHcd]::GetCapability
	EXPORT	|?SuspendHC@CHcd@@UAAHXZ|		; CHcd::SuspendHC
	EXPORT	|?ResumeNotification@CHcd@@MAAHXZ|	; CHcd::ResumeNotification
	EXPORT	|?Initialize@CHW@@UAAHXZ|		; CHW::Initialize
	EXPORT	|?DeInitialize@CHW@@UAAXXZ|		; CHW::DeInitialize
	EXPORT	|?SignalCheckForDoneTransfers@CHW@@UAAXK@Z| ; CHW::SignalCheckForDoneTransfers
	IMPORT	|CreateSemaphoreW|
	IMPORT	|?CreateDescriptors@@YAXXZ|		; CreateDescriptors
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|
	IMPORT	|??0CCppiDmaController@@QAA@K@Z|	; CCppiDmaController::CCppiDmaController
	IMPORT	|??0CHcd@@QAA@XZ|			; CHcd::CHcd
	IMPORT	|_purecall|
	IMPORT	|??_ECHW@@UAAPAXI@Z|, WEAK |??_GCHW@@UAAPAXI@Z| ; CHW::`vector deleting destructor', CHW::`scalar deleting destructor'
	IMPORT	|?DisableDevice@CHcd@@UAAHIH@Z|		; CHcd::DisableDevice
	IMPORT	|?SuspendResume@CHcd@@UAAHIH@Z|		; CHcd::SuspendResume

  00018			 AREA	 |.pdata|, PDATA
|$T43083| DCD	|$LN11@CHW|
	DCD	0x4000f404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@PKPBIFIM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAP?$AA?5?$AAc?$AAo@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "C"
	DCB	0x0, "H", 0x0, "W", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "f"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_7CHW@@6B@| DCD |_purecall|				; CHW::`vftable'
	DCD	|_purecall|
	DCD	|??_ECHW@@UAAPAXI@Z|
	DCD	|_purecall|
	DCD	|_purecall|
	DCD	|?GetFrameNumber@CHW@@UAAHPAK@Z|
	DCD	|?GetFrameLength@CHW@@UAAHPAG@Z|
	DCD	|?SetFrameLength@CHW@@UAAHPAXG@Z|
	DCD	|?StopAdjustingFrame@CHW@@UAAHXZ|
	DCD	|?PowerMgmtCallback@CHW@@UAAXH@Z|
	DCD	|?DisableDevice@CHcd@@UAAHIH@Z|
	DCD	|?SuspendResume@CHcd@@UAAHIH@Z|
	DCD	|?DidPortStatusChange@CHW@@UAAHE@Z|
	DCD	|?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z|
	DCD	|?RootHubFeature@CHW@@UAAHEEG@Z|
	DCD	|?ResetAndEnablePort@CHW@@UAAHE@Z|
	DCD	|?DisablePort@CHW@@UAAXE@Z|
	DCD	|?WaitForPortStatusChange@CHW@@UAAHPAX@Z|
	DCD	|?SetCapability@?ICHcd@CHW@@UAAKK@Z|
	DCD	|?GetCapability@?ICHcd@CHW@@UAAKXZ|
	DCD	|?SuspendHC@CHcd@@UAAHXZ|
	DCD	|?ResumeNotification@CHcd@@MAAHXZ|
	DCD	|?Initialize@CHW@@UAAHXZ|
	DCD	|?DeInitialize@CHW@@UAAXXZ|
	DCD	|?SignalCheckForDoneTransfers@CHW@@UAAXK@Z|
; Function compile flags: /Odtp

  006b8			 AREA	 |.text|, CODE, ARM

  006b8		 |??0CHW@@QAA@SAE0KKQAVCPhysMem@@PAX@Z| PROC ; CHW::CHW

; 234  : {

  006b8		 |$LN11@CHW|
  006b8	e1a0c00d	 mov         r12, sp
  006bc	e92d000f	 stmdb       sp!, {r0 - r3}
  006c0	e92d5000	 stmdb       sp!, {r12, lr}
  006c4	e24dd024	 sub         sp, sp, #0x24
  006c8		 |$M43080|
  006c8	e59d002c	 ldr         r0, [sp, #0x2C]
  006cc	eb000000	 bl          |??0CHcd@@QAA@XZ|
  006d0	e58d0008	 str         r0, [sp, #8]
  006d4	e59f23a8	 ldr         r2, [pc, #0x3A8]
  006d8	e59d302c	 ldr         r3, [sp, #0x2C]
  006dc	e5832000	 str         r2, [r3]
  006e0	e59d2030	 ldr         r2, [sp, #0x30]
  006e4	e59d302c	 ldr         r3, [sp, #0x2C]
  006e8	e2833f52	 add         r3, r3, #0x52, 30
  006ec	e5832000	 str         r2, [r3]
  006f0	e59d2034	 ldr         r2, [sp, #0x34]
  006f4	e59d302c	 ldr         r3, [sp, #0x2C]
  006f8	e2833f53	 add         r3, r3, #0x53, 30
  006fc	e5832000	 str         r2, [r3]
  00700	e59d302c	 ldr         r3, [sp, #0x2C]
  00704	e2832f56	 add         r2, r3, #0x56, 30
  00708	e59d303c	 ldr         r3, [sp, #0x3C]
  0070c	e5823000	 str         r3, [r2]
  00710	e59d302c	 ldr         r3, [sp, #0x2C]
  00714	e2832f5d	 add         r2, r3, #0x5D, 30
  00718	e59d3038	 ldr         r3, [sp, #0x38]
  0071c	e5823000	 str         r3, [r2]
  00720	e59d302c	 ldr         r3, [sp, #0x2C]
  00724	e2832f63	 add         r2, r3, #0x63, 30
  00728	e59d3040	 ldr         r3, [sp, #0x40]
  0072c	e5823000	 str         r3, [r2]
  00730	e59d302c	 ldr         r3, [sp, #0x2C]
  00734	e2832e19	 add         r2, r3, #0x19, 28
  00738	e59d3044	 ldr         r3, [sp, #0x44]
  0073c	e5823000	 str         r3, [r2]
  00740	e59d302c	 ldr         r3, [sp, #0x2C]
  00744	e2833f56	 add         r3, r3, #0x56, 30
  00748	e5931000	 ldr         r1, [r3]
  0074c	e59d302c	 ldr         r3, [sp, #0x2C]
  00750	e2830e33	 add         r0, r3, #0x33, 28
  00754	eb000000	 bl          |??0CCppiDmaController@@QAA@K@Z|
  00758	e58d000c	 str         r0, [sp, #0xC]

; 235  :     // definitions for static variables
; 236  :     m_pHCCA = 0;

  0075c	e59d302c	 ldr         r3, [sp, #0x2C]
  00760	e2832e15	 add         r2, r3, #0x15, 28
  00764	e3a03000	 mov         r3, #0
  00768	e5823000	 str         r3, [r2]

; 237  :     m_wFrameHigh = 0;

  0076c	e59d302c	 ldr         r3, [sp, #0x2C]
  00770	e2832e17	 add         r2, r3, #0x17, 28
  00774	e3a03000	 mov         r3, #0
  00778	e1c230b0	 strh        r3, [r2]

; 238  :     m_hUsbInterruptEvent = NULL;

  0077c	e59d302c	 ldr         r3, [sp, #0x2C]
  00780	e2832f5e	 add         r2, r3, #0x5E, 30
  00784	e3a03000	 mov         r3, #0
  00788	e5823000	 str         r3, [r2]

; 239  :     m_hUsbHubChangeEvent = NULL;

  0078c	e59d302c	 ldr         r3, [sp, #0x2C]
  00790	e2832f61	 add         r2, r3, #0x61, 30
  00794	e3a03000	 mov         r3, #0
  00798	e5823000	 str         r3, [r2]

; 240  :     m_hUsbInterruptThread = NULL;

  0079c	e59d302c	 ldr         r3, [sp, #0x2C]
  007a0	e2832f5f	 add         r2, r3, #0x5F, 30
  007a4	e3a03000	 mov         r3, #0
  007a8	e5823000	 str         r3, [r2]

; 241  :     m_fUsbInterruptThreadClosing = FALSE;

  007ac	e59d302c	 ldr         r3, [sp, #0x2C]
  007b0	e2832f62	 add         r2, r3, #0x62, 30
  007b4	e3a03000	 mov         r3, #0
  007b8	e5823000	 str         r3, [r2]

; 242  :     m_pControlHead = 0;

  007bc	e59d302c	 ldr         r3, [sp, #0x2C]
  007c0	e28320a8	 add         r2, r3, #0xA8
  007c4	e3a03000	 mov         r3, #0
  007c8	e5823000	 str         r3, [r2]

; 243  :     m_pBulkInHead = 0;

  007cc	e59d302c	 ldr         r3, [sp, #0x2C]
  007d0	e28320ac	 add         r2, r3, #0xAC
  007d4	e3a03000	 mov         r3, #0
  007d8	e5823000	 str         r3, [r2]

; 244  :     m_pBulkOutHead = 0;

  007dc	e59d302c	 ldr         r3, [sp, #0x2C]
  007e0	e28320b0	 add         r2, r3, #0xB0
  007e4	e3a03000	 mov         r3, #0
  007e8	e5823000	 str         r3, [r2]

; 245  :     m_pIntInHead = 0;

  007ec	e59d302c	 ldr         r3, [sp, #0x2C]
  007f0	e28320b4	 add         r2, r3, #0xB4
  007f4	e3a03000	 mov         r3, #0
  007f8	e5823000	 str         r3, [r2]

; 246  :     m_pIntOutHead = 0;

  007fc	e59d302c	 ldr         r3, [sp, #0x2C]
  00800	e28320b8	 add         r2, r3, #0xB8
  00804	e3a03000	 mov         r3, #0
  00808	e5823000	 str         r3, [r2]

; 247  :     m_fConstructionStatus = TRUE;

  0080c	e59d302c	 ldr         r3, [sp, #0x2C]
  00810	e2832f55	 add         r2, r3, #0x55, 30
  00814	e3a03001	 mov         r3, #1
  00818	e5823000	 str         r3, [r2]

; 248  : 
; 249  : #ifdef MUSB_USEDMA
; 250  : #ifdef MUSB_USEDMA_FOR_ISO
; 251  : 
; 252  :     m_pIsoInHead = NULL;

  0081c	e59d302c	 ldr         r3, [sp, #0x2C]
  00820	e28320bc	 add         r2, r3, #0xBC
  00824	e3a03000	 mov         r3, #0
  00828	e5823000	 str         r3, [r2]

; 253  :     m_pIsoOutHead = NULL;

  0082c	e59d302c	 ldr         r3, [sp, #0x2C]
  00830	e28320c0	 add         r2, r3, #0xC0
  00834	e3a03000	 mov         r3, #0
  00838	e5823000	 str         r3, [r2]

; 254  : 
; 255  : #endif // MUSB_USEDMA_FOR_ISO
; 256  : #endif // MUSB_USEDMA
; 257  : 
; 258  :     m_dwCap = 0;

  0083c	e59d302c	 ldr         r3, [sp, #0x2C]
  00840	e2832e1a	 add         r2, r3, #0x1A, 28
  00844	e3a03000	 mov         r3, #0
  00848	e5823000	 str         r3, [r2]

; 259  :     m_portStatus = 0;

  0084c	e59d302c	 ldr         r3, [sp, #0x2C]
  00850	e2833c01	 add         r3, r3, #1, 24
  00854	e283209e	 add         r2, r3, #0x9E
  00858	e3a03000	 mov         r3, #0
  0085c	e5c23000	 strb        r3, [r2]

; 260  :     m_wFifoOffset = 0;

  00860	e59d302c	 ldr         r3, [sp, #0x2C]
  00864	e2832f67	 add         r2, r3, #0x67, 30
  00868	e3a03000	 mov         r3, #0
  0086c	e1c230b0	 strh        r3, [r2]

; 261  :     lastFn = 0;

  00870	e59d302c	 ldr         r3, [sp, #0x2C]
  00874	e2832f51	 add         r2, r3, #0x51, 30
  00878	e3a03000	 mov         r3, #0
  0087c	e1c230b0	 strh        r3, [r2]

; 262  :     m_fHighSpeed = FALSE;

  00880	e59d302c	 ldr         r3, [sp, #0x2C]
  00884	e2832f8a	 add         r2, r3, #0x8A, 30
  00888	e3a03000	 mov         r3, #0
  0088c	e5823000	 str         r3, [r2]

; 263  :     m_fPowerUpFlag = FALSE;

  00890	e59d302c	 ldr         r3, [sp, #0x2C]
  00894	e2832f65	 add         r2, r3, #0x65, 30
  00898	e3a03000	 mov         r3, #0
  0089c	e5823000	 str         r3, [r2]

; 264  :     m_fPowerResuming = FALSE;

  008a0	e59d302c	 ldr         r3, [sp, #0x2C]
  008a4	e2832f66	 add         r2, r3, #0x66, 30
  008a8	e3a03000	 mov         r3, #0
  008ac	e5823000	 str         r3, [r2]

; 265  : 
; 266  :     m_pProcessEDControl = NULL;

  008b0	e59d302c	 ldr         r3, [sp, #0x2C]
  008b4	e28320c4	 add         r2, r3, #0xC4
  008b8	e3a03000	 mov         r3, #0
  008bc	e5823000	 str         r3, [r2]

; 267  :     memset(m_pProcessEDIn, 0, sizeof(m_pProcessEDIn));

  008c0	e3a0203c	 mov         r2, #0x3C
  008c4	e3a01000	 mov         r1, #0
  008c8	e59d302c	 ldr         r3, [sp, #0x2C]
  008cc	e28300c8	 add         r0, r3, #0xC8
  008d0	eb000000	 bl          memset

; 268  :     memset(m_pProcessEDOut, 0, sizeof(m_pProcessEDOut));

  008d4	e3a0203c	 mov         r2, #0x3C
  008d8	e3a01000	 mov         r1, #0
  008dc	e59d302c	 ldr         r3, [sp, #0x2C]
  008e0	e2830f41	 add         r0, r3, #0x41, 30
  008e4	eb000000	 bl          memset

; 269  : 
; 270  :     //CLEAR_INTERRUPTS();
; 271  :     InitializeCriticalSection( &m_csFrameCounter );

  008e8	e59d302c	 ldr         r3, [sp, #0x2C]
  008ec	e2830f57	 add         r0, r3, #0x57, 30
  008f0	eb000000	 bl          InitializeCriticalSection

; 272  :     InitializeCriticalSection( &m_csUsbProcLock );

  008f4	e59d302c	 ldr         r3, [sp, #0x2C]
  008f8	e2830f8b	 add         r0, r3, #0x8B, 30
  008fc	eb000000	 bl          InitializeCriticalSection

; 273  : 
; 274  :     //WRITE_PORT_UCHAR((m_portBase + USB_DEVCTL_REG_OFFSET), 0);
; 275  :     WRITE_PORT_UCHAR((m_portBase + USB_EOIR_REG_OFFSET), 0);

  00900	e59d302c	 ldr         r3, [sp, #0x2C]
  00904	e2833f52	 add         r3, r3, #0x52, 30
  00908	e5933000	 ldr         r3, [r3]
  0090c	e2832060	 add         r2, r3, #0x60
  00910	e3a03000	 mov         r3, #0
  00914	e5c23000	 strb        r3, [r2]

; 276  : 
; 277  :     CreateDescriptors();

  00918	eb000000	 bl          |?CreateDescriptors@@YAXXZ|

; 278  : 
; 279  :     /* Creation of the EP Sempahore objects. */
; 280  :     m_Ep0ProtectSem = CreateSemaphore(NULL, 1, 1, NULL);

  0091c	e3a03000	 mov         r3, #0
  00920	e3a02001	 mov         r2, #1
  00924	e3a01001	 mov         r1, #1
  00928	e3a00000	 mov         r0, #0
  0092c	eb000000	 bl          CreateSemaphoreW
  00930	e58d0010	 str         r0, [sp, #0x10]
  00934	e59d302c	 ldr         r3, [sp, #0x2C]
  00938	e2832f6b	 add         r2, r3, #0x6B, 30
  0093c	e59d3010	 ldr         r3, [sp, #0x10]
  00940	e5823000	 str         r3, [r2]

; 281  :     for (UINT8 i = 0; i < (MGC_MAX_USB_ENDS - 1); i ++)

  00944	e3a03000	 mov         r3, #0
  00948	e5cd3000	 strb        r3, [sp]
  0094c	ea000003	 b           |$LN4@CHW|
  00950		 |$LN3@CHW|
  00950	e5dd3000	 ldrb        r3, [sp]
  00954	e2833001	 add         r3, r3, #1
  00958	e20330ff	 and         r3, r3, #0xFF
  0095c	e5cd3000	 strb        r3, [sp]
  00960		 |$LN4@CHW|
  00960	e5dd3000	 ldrb        r3, [sp]
  00964	e353000f	 cmp         r3, #0xF
  00968	aa00001e	 bge         |$LN2@CHW|

; 282  :     {
; 283  :         m_EpInProtectSem[i] = CreateSemaphore(NULL, 1, 1, NULL);

  0096c	e3a03000	 mov         r3, #0
  00970	e3a02001	 mov         r2, #1
  00974	e3a01001	 mov         r1, #1
  00978	e3a00000	 mov         r0, #0
  0097c	eb000000	 bl          CreateSemaphoreW
  00980	e58d0014	 str         r0, [sp, #0x14]
  00984	e59d302c	 ldr         r3, [sp, #0x2C]
  00988	e2831e1b	 add         r1, r3, #0x1B, 28
  0098c	e5dd3000	 ldrb        r3, [sp]
  00990	e1a02003	 mov         r2, r3
  00994	e3a03004	 mov         r3, #4
  00998	e0030392	 mul         r3, r2, r3
  0099c	e0812003	 add         r2, r1, r3
  009a0	e59d3014	 ldr         r3, [sp, #0x14]
  009a4	e5823000	 str         r3, [r2]

; 284  :         m_EpOutProtectSem[i] = CreateSemaphore(NULL, 1, 1, NULL);

  009a8	e3a03000	 mov         r3, #0
  009ac	e3a02001	 mov         r2, #1
  009b0	e3a01001	 mov         r1, #1
  009b4	e3a00000	 mov         r0, #0
  009b8	eb000000	 bl          CreateSemaphoreW
  009bc	e58d0018	 str         r0, [sp, #0x18]
  009c0	e59d302c	 ldr         r3, [sp, #0x2C]
  009c4	e2831f7b	 add         r1, r3, #0x7B, 30
  009c8	e5dd3000	 ldrb        r3, [sp]
  009cc	e1a02003	 mov         r2, r3
  009d0	e3a03004	 mov         r3, #4
  009d4	e0030392	 mul         r3, r2, r3
  009d8	e0812003	 add         r2, r1, r3
  009dc	e59d3018	 ldr         r3, [sp, #0x18]
  009e0	e5823000	 str         r3, [r2]

; 285  :     }

  009e4	eaffffd9	 b           |$LN3@CHW|
  009e8		 |$LN2@CHW|

; 286  : 
; 287  :     // Start with a clean configuration
; 288  :     memset(m_EpInConfig, 0, sizeof(m_EpInConfig));

  009e8	e3a02078	 mov         r2, #0x78
  009ec	e3a01000	 mov         r1, #0
  009f0	e59d302c	 ldr         r3, [sp, #0x2C]
  009f4	e2830d09	 add         r0, r3, #9, 26
  009f8	eb000000	 bl          memset

; 289  :     memset(m_EpOutConfig, 0, sizeof(m_EpOutConfig));

  009fc	e3a02078	 mov         r2, #0x78
  00a00	e3a01000	 mov         r1, #0
  00a04	e59d302c	 ldr         r3, [sp, #0x2C]
  00a08	e2830fae	 add         r0, r3, #0xAE, 30
  00a0c	eb000000	 bl          memset

; 290  : 
; 291  :     if (!LoadEnpointConfiguration())

  00a10	e59d002c	 ldr         r0, [sp, #0x2C]
  00a14	eb000000	 bl          |?LoadEnpointConfiguration@CHW@@AAAHXZ|
  00a18	e58d001c	 str         r0, [sp, #0x1C]
  00a1c	e59d301c	 ldr         r3, [sp, #0x1C]
  00a20	e3530000	 cmp         r3, #0
  00a24	1a00000e	 bne         |$LN1@CHW|

; 292  :     {
; 293  :         DEBUGMSG( ZONE_ERROR, (TEXT("-CHW::CHW - failed to read EP configuration\n")));

  00a28	e59f3050	 ldr         r3, [pc, #0x50]
  00a2c	e5933440	 ldr         r3, [r3, #0x440]
  00a30	e3130901	 tst         r3, #1, 18
  00a34	0a000004	 beq         |$LN7@CHW|
  00a38	e59f003c	 ldr         r0, [pc, #0x3C]
  00a3c	eb000000	 bl          NKDbgPrintfW
  00a40	e3a03001	 mov         r3, #1
  00a44	e58d3020	 str         r3, [sp, #0x20]
  00a48	ea000001	 b           |$LN8@CHW|
  00a4c		 |$LN7@CHW|
  00a4c	e3a03000	 mov         r3, #0
  00a50	e58d3020	 str         r3, [sp, #0x20]
  00a54		 |$LN8@CHW|

; 294  :         m_fConstructionStatus = FALSE;

  00a54	e59d302c	 ldr         r3, [sp, #0x2C]
  00a58	e2832f55	 add         r2, r3, #0x55, 30
  00a5c	e3a03000	 mov         r3, #0
  00a60	e5823000	 str         r3, [r2]
  00a64		 |$LN1@CHW|

; 295  :     }
; 296  : }

  00a64	e59d302c	 ldr         r3, [sp, #0x2C]
  00a68	e58d3004	 str         r3, [sp, #4]
  00a6c	e59d0004	 ldr         r0, [sp, #4]
  00a70	e28dd024	 add         sp, sp, #0x24
  00a74	e89d6000	 ldmia       sp, {sp, lr}
  00a78	e12fff1e	 bx          lr
  00a7c		 |$LN12@CHW|
  00a7c		 |$LN13@CHW|
  00a7c	00000000	 DCD         |??_C@_1FK@PKPBIFIM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAP?$AA?5?$AAc?$AAo@|
  00a80		 |$LN14@CHW|
  00a80	00000000	 DCD         |dpCurSettings|
  00a84		 |$LN15@CHW|
  00a84	00000000	 DCD         |??_7CHW@@6B@|
  00a88		 |$M43081|

			 ENDP  ; |??0CHW@@QAA@SAE0KKQAVCPhysMem@@PAX@Z|, CHW::CHW

; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\hcd.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T43093| DCD	|$LN5@SuspendHC|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SuspendHC@CHcd@@UAAHXZ| PROC		; CHcd::SuspendHC

; 112  :     virtual BOOL    SuspendHC() { return FALSE; }; // Default does not support it function.

  00000		 |$LN5@SuspendHC|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43090|
  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M43091|

			 ENDP  ; |?SuspendHC@CHcd@@UAAHXZ|, CHcd::SuspendHC

	EXPORT	|?Unlock@LockObject@@QAAXXZ|		; LockObject::Unlock
	EXPORT	|?Lock@LockObject@@QAAXXZ|		; LockObject::Lock

  00000			 AREA	 |.pdata|, PDATA
|$T43101| DCD	|$LN6@ResumeNoti|
	DCD	0x40003d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?ResumeNotification@CHcd@@MAAHXZ| PROC ; CHcd::ResumeNotification

; 120  :     virtual BOOL ResumeNotification ()  {

  00000		 |$LN6@ResumeNoti|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M43098|

; 121  :         Lock();

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e2830090	 add         r0, r3, #0x90
  00018	eb000000	 bl          |?Lock@LockObject@@QAAXXZ|

; 122  :         BOOL fReturn = FALSE;

  0001c	e3a03000	 mov         r3, #0
  00020	e58d3000	 str         r3, [sp]

; 123  :         if (m_pCRootHub) {

  00024	e59d3014	 ldr         r3, [sp, #0x14]
  00028	e28330a4	 add         r3, r3, #0xA4
  0002c	e5933000	 ldr         r3, [r3]
  00030	e3530000	 cmp         r3, #0
  00034	0a000025	 beq         |$LN1@ResumeNoti|

; 124  :             fReturn = m_pCRootHub->ResumeNotification();

  00038	e59d3014	 ldr         r3, [sp, #0x14]
  0003c	e28330a4	 add         r3, r3, #0xA4
  00040	e5932000	 ldr         r2, [r3]
  00044	e59d3014	 ldr         r3, [sp, #0x14]
  00048	e28330a4	 add         r3, r3, #0xA4
  0004c	e5930000	 ldr         r0, [r3]
  00050	e5923000	 ldr         r3, [r2]
  00054	e2833028	 add         r3, r3, #0x28
  00058	e5933000	 ldr         r3, [r3]
  0005c	e1a0e00f	 mov         lr, pc
  00060	e12fff13	 bx          r3
  00064	e58d0008	 str         r0, [sp, #8]
  00068	e59d3008	 ldr         r3, [sp, #8]
  0006c	e58d3000	 str         r3, [sp]

; 125  :             m_pCRootHub->NotifyOnSuspendedResumed(FALSE);

  00070	e3a01000	 mov         r1, #0
  00074	e59d3014	 ldr         r3, [sp, #0x14]
  00078	e28330a4	 add         r3, r3, #0xA4
  0007c	e5932000	 ldr         r2, [r3]
  00080	e59d3014	 ldr         r3, [sp, #0x14]
  00084	e28330a4	 add         r3, r3, #0xA4
  00088	e5930000	 ldr         r0, [r3]
  0008c	e5923000	 ldr         r3, [r2]
  00090	e283302c	 add         r3, r3, #0x2C
  00094	e5933000	 ldr         r3, [r3]
  00098	e1a0e00f	 mov         lr, pc
  0009c	e12fff13	 bx          r3

; 126  :             m_pCRootHub->NotifyOnSuspendedResumed(TRUE);

  000a0	e3a01001	 mov         r1, #1
  000a4	e59d3014	 ldr         r3, [sp, #0x14]
  000a8	e28330a4	 add         r3, r3, #0xA4
  000ac	e5932000	 ldr         r2, [r3]
  000b0	e59d3014	 ldr         r3, [sp, #0x14]
  000b4	e28330a4	 add         r3, r3, #0xA4
  000b8	e5930000	 ldr         r0, [r3]
  000bc	e5923000	 ldr         r3, [r2]
  000c0	e283302c	 add         r3, r3, #0x2C
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e1a0e00f	 mov         lr, pc
  000cc	e12fff13	 bx          r3
  000d0		 |$LN1@ResumeNoti|

; 127  :         }
; 128  :         Unlock();

  000d0	e59d3014	 ldr         r3, [sp, #0x14]
  000d4	e2830090	 add         r0, r3, #0x90
  000d8	eb000000	 bl          |?Unlock@LockObject@@QAAXXZ|

; 129  :         return fReturn;

  000dc	e59d3000	 ldr         r3, [sp]
  000e0	e58d3004	 str         r3, [sp, #4]

; 130  :     }

  000e4	e59d0004	 ldr         r0, [sp, #4]
  000e8	e28dd00c	 add         sp, sp, #0xC
  000ec	e89d6000	 ldmia       sp, {sp, lr}
  000f0	e12fff1e	 bx          lr
  000f4		 |$M43099|

			 ENDP  ; |?ResumeNotification@CHcd@@MAAHXZ|, CHcd::ResumeNotification

	IMPORT	|EnterCriticalSection|
; File c:\wince600\public\common\oak\drivers\usb\hcd\usb20\usb2com\sync.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T43108| DCD	|$LN5@Lock|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@LockObject@@QAAXXZ| PROC	; LockObject::Lock

; 74   :     void Lock(void) { EnterCriticalSection(&m_CSection); };

  00000		 |$LN5@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43105|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          EnterCriticalSection
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M43106|

			 ENDP  ; |?Lock@LockObject@@QAAXXZ|, LockObject::Lock

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T43115| DCD	|$LN5@Unlock|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@LockObject@@QAAXXZ| PROC	; LockObject::Unlock

; 75   :     void Unlock(void) {LeaveCriticalSection( &m_CSection); };

  00000		 |$LN5@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43112|
  0000c	e59d0008	 ldr         r0, [sp, #8]
  00010	eb000000	 bl          LeaveCriticalSection
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M43113|

			 ENDP  ; |?Unlock@LockObject@@QAAXXZ|, LockObject::Unlock

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@DNBFFCLP@?$AAc?$AA?3?$AA?2?$AAw?$AAi?$AAn?$AAc?$AAe?$AA6?$AA0?$AA0?$AA?2?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T43124| DCD	|$LN7@SignalChec|
	DCD	0x40001604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@DNBFFCLP@?$AAc?$AA?3?$AA?2?$AAw?$AAi?$AAn?$AAc?$AAe?$AA6?$AA0?$AA0?$AA?2?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2@| DCB "c"
	DCB	0x0, ":", 0x0, "\\", 0x0, "w", 0x0, "i", 0x0, "n", 0x0, "c"
	DCB	0x0, "e", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "p"
	DCB	0x0, "l", 0x0, "a", 0x0, "t", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, "m", 0x0, "\\", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "m"
	DCB	0x0, "o", 0x0, "n", 0x0, "\\", 0x0, "s", 0x0, "r", 0x0, "c"
	DCB	0x0, "\\", 0x0, "s", 0x0, "o", 0x0, "c", 0x0, "\\", 0x0, "c"
	DCB	0x0, "o", 0x0, "m", 0x0, "m", 0x0, "o", 0x0, "n", 0x0, "_"
	DCB	0x0, "t", 0x0, "i", 0x0, "_", 0x0, "v", 0x0, "1", 0x0, "\\"
	DCB	0x0, "a", 0x0, "m", 0x0, "3", 0x0, "5", 0x0, "1", 0x0, "7"
	DCB	0x0, "\\", 0x0, "u", 0x0, "s", 0x0, "b", 0x0, "\\", 0x0, "u"
	DCB	0x0, "s", 0x0, "b", 0x0, "h", 0x0, "\\", 0x0, "c", 0x0, "h"
	DCB	0x0, "w", 0x0, ".", 0x0, "h", 0x0, "p", 0x0, "p", 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SignalCheckForDoneTransfers@CHW@@UAAXK@Z| PROC ; CHW::SignalCheckForDoneTransfers

; 85   :     virtual void   SignalCheckForDoneTransfers ( DWORD  ) { ASSERT(FALSE); };

  00000		 |$LN7@SignalChec|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43121|
  00010	ea000002	 b           |$LN3@SignalChec|
  00014	e3a03001	 mov         r3, #1
  00018	e58d3000	 str         r3, [sp]
  0001c	ea000007	 b           |$LN4@SignalChec|
  00020		 |$LN3@SignalChec|
  00020	e3a03055	 mov         r3, #0x55
  00024	e59f2028	 ldr         r2, [pc, #0x28]
  00028	e59f1020	 ldr         r1, [pc, #0x20]
  0002c	e59f0018	 ldr         r0, [pc, #0x18]
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e6000010	 __debugbreak_ce
  00038	e3a03000	 mov         r3, #0
  0003c	e58d3000	 str         r3, [sp]
  00040		 |$LN4@SignalChec|
  00040	e28dd004	 add         sp, sp, #4
  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN8@SignalChec|
  0004c		 |$LN9@SignalChec|
  0004c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00050		 |$LN10@SignalChec|
  00050	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00054		 |$LN11@SignalChec|
  00054	00000000	 DCD         |??_C@_1JC@DNBFFCLP@?$AAc?$AA?3?$AA?2?$AAw?$AAi?$AAn?$AAc?$AAe?$AA6?$AA0?$AA0?$AA?2?$AAp?$AAl?$AAa?$AAt?$AAf?$AAo?$AAr?$AAm?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo?$AAn?$AA?2?$AAs?$AAr?$AAc?$AA?2@|
  00058		 |$M43122|

			 ENDP  ; |?SignalCheckForDoneTransfers@CHW@@UAAXK@Z|, CHW::SignalCheckForDoneTransfers


  00000			 AREA	 |.pdata|, PDATA
|$T43136| DCD	|$LN5@StopAdjust|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?StopAdjustingFrame@CHW@@UAAHXZ| PROC	; CHW::StopAdjustingFrame

; 94   :     BOOL StopAdjustingFrame(void) { return TRUE; };

  00000		 |$LN5@StopAdjust|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43133|
  00010	e3a03001	 mov         r3, #1
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M43134|

			 ENDP  ; |?StopAdjustingFrame@CHW@@UAAHXZ|, CHW::StopAdjustingFrame


  00000			 AREA	 |.pdata|, PDATA
|$T43144| DCD	|$LN5@GetCapabil|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetCapability@?ICHcd@CHW@@UAAKXZ| PROC ; CHW[::CHcd]::GetCapability

; 116  :     DWORD CHcd::GetCapability(void) { return m_dwCap; }

  00000		 |$LN5@GetCapabil|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43141|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833e1a	 add         r3, r3, #0x1A, 28
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M43142|

			 ENDP  ; |?GetCapability@?ICHcd@CHW@@UAAKXZ|, CHW[::CHcd]::GetCapability


  00000			 AREA	 |.pdata|, PDATA
|$T43152| DCD	|$LN5@SetCapabil|
	DCD	0x40001404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?SetCapability@?ICHcd@CHW@@UAAKK@Z| PROC ; CHW[::CHcd]::SetCapability

; 117  :     DWORD CHcd::SetCapability(DWORD dwCap) { return (m_dwCap |= dwCap); }

  00000		 |$LN5@SetCapabil|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43149|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833e1a	 add         r3, r3, #0x1A, 28
  00018	e5932000	 ldr         r2, [r3]
  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e1822003	 orr         r2, r2, r3
  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e2833e1a	 add         r3, r3, #0x1A, 28
  0002c	e5832000	 str         r2, [r3]
  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e2833e1a	 add         r3, r3, #0x1A, 28
  00038	e5933000	 ldr         r3, [r3]
  0003c	e58d3000	 str         r3, [sp]
  00040	e59d0000	 ldr         r0, [sp]
  00044	e28dd004	 add         sp, sp, #4
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M43150|

			 ENDP  ; |?SetCapability@?ICHcd@CHW@@UAAKK@Z|, CHW[::CHcd]::SetCapability

	EXPORT	|??1CHW@@UAA@XZ|			; CHW::~CHW
	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T43160| DCD	|$LN6@scalar|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??_GCHW@@UAAPAXI@Z| PROC		; CHW::`scalar deleting destructor'
  00000		 |$LN6@scalar|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M43157|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??1CHW@@UAA@XZ|
  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e3130001	 tst         r3, #1
  00020	0a000001	 beq         |$LN1@scalar|
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |??3@YAXPAX@Z|
  0002c		 |$LN1@scalar|
  0002c	e59d300c	 ldr         r3, [sp, #0xC]
  00030	e58d3000	 str         r3, [sp]
  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M43158|

			 ENDP  ; |??_GCHW@@UAAPAXI@Z|, CHW::`scalar deleting destructor'

	IMPORT	|??1CHcd@@UAA@XZ|			; CHcd::~CHcd
	IMPORT	|??1CCppiDmaController@@QAA@XZ|		; CCppiDmaController::~CCppiDmaController
	IMPORT	|CloseHandle|
	IMPORT	|DeleteCriticalSection|

  00020			 AREA	 |.pdata|, PDATA
|$T43167| DCD	|$LN11@CHW@2|
	DCD	0x40005204
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.cpp

  00a88			 AREA	 |.text|, CODE, ARM

  00a88		 |??1CHW@@UAA@XZ| PROC			; CHW::~CHW

; 299  : {

  00a88		 |$LN11@CHW@2|
  00a88	e1a0c00d	 mov         r12, sp
  00a8c	e92d0001	 stmdb       sp!, {r0}
  00a90	e92d5000	 stmdb       sp!, {r12, lr}
  00a94	e24dd004	 sub         sp, sp, #4
  00a98		 |$M43164|
  00a98	e59f212c	 ldr         r2, [pc, #0x12C]
  00a9c	e59d300c	 ldr         r3, [sp, #0xC]
  00aa0	e5832000	 str         r2, [r3]

; 300  :     DeInitialize();

  00aa4	e59d000c	 ldr         r0, [sp, #0xC]
  00aa8	eb000000	 bl          |?DeInitialize@CHW@@UAAXXZ|

; 301  :     DeleteCriticalSection( &m_csFrameCounter );

  00aac	e59d300c	 ldr         r3, [sp, #0xC]
  00ab0	e2830f57	 add         r0, r3, #0x57, 30
  00ab4	eb000000	 bl          DeleteCriticalSection

; 302  :     DeleteCriticalSection( &m_csUsbProcLock );

  00ab8	e59d300c	 ldr         r3, [sp, #0xC]
  00abc	e2830f8b	 add         r0, r3, #0x8B, 30
  00ac0	eb000000	 bl          DeleteCriticalSection

; 303  : 
; 304  :     if (m_Ep0ProtectSem)

  00ac4	e59d300c	 ldr         r3, [sp, #0xC]
  00ac8	e2833f6b	 add         r3, r3, #0x6B, 30
  00acc	e5933000	 ldr         r3, [r3]
  00ad0	e3530000	 cmp         r3, #0
  00ad4	0a000003	 beq         |$LN6@CHW@2|

; 305  :         CloseHandle(m_Ep0ProtectSem);

  00ad8	e59d300c	 ldr         r3, [sp, #0xC]
  00adc	e2833f6b	 add         r3, r3, #0x6B, 30
  00ae0	e5930000	 ldr         r0, [r3]
  00ae4	eb000000	 bl          CloseHandle
  00ae8		 |$LN6@CHW@2|

; 306  :     for (UINT8 i = 0; i < (MGC_MAX_USB_ENDS - 1); i ++)

  00ae8	e3a03000	 mov         r3, #0
  00aec	e5cd3000	 strb        r3, [sp]
  00af0	ea000003	 b           |$LN5@CHW@2|
  00af4		 |$LN4@CHW@2|
  00af4	e5dd3000	 ldrb        r3, [sp]
  00af8	e2833001	 add         r3, r3, #1
  00afc	e20330ff	 and         r3, r3, #0xFF
  00b00	e5cd3000	 strb        r3, [sp]
  00b04		 |$LN5@CHW@2|
  00b04	e5dd3000	 ldrb        r3, [sp]
  00b08	e353000f	 cmp         r3, #0xF
  00b0c	aa000026	 bge         |$LN3@CHW@2|

; 307  :     {
; 308  :         if (m_EpInProtectSem[i])

  00b10	e59d300c	 ldr         r3, [sp, #0xC]
  00b14	e2831e1b	 add         r1, r3, #0x1B, 28
  00b18	e5dd3000	 ldrb        r3, [sp]
  00b1c	e1a02003	 mov         r2, r3
  00b20	e3a03004	 mov         r3, #4
  00b24	e0030392	 mul         r3, r2, r3
  00b28	e0813003	 add         r3, r1, r3
  00b2c	e5933000	 ldr         r3, [r3]
  00b30	e3530000	 cmp         r3, #0
  00b34	0a000008	 beq         |$LN2@CHW@2|

; 309  :             CloseHandle(m_EpInProtectSem[i]);

  00b38	e59d300c	 ldr         r3, [sp, #0xC]
  00b3c	e2831e1b	 add         r1, r3, #0x1B, 28
  00b40	e5dd3000	 ldrb        r3, [sp]
  00b44	e1a02003	 mov         r2, r3
  00b48	e3a03004	 mov         r3, #4
  00b4c	e0030392	 mul         r3, r2, r3
  00b50	e0813003	 add         r3, r1, r3
  00b54	e5930000	 ldr         r0, [r3]
  00b58	eb000000	 bl          CloseHandle
  00b5c		 |$LN2@CHW@2|

; 310  :         if (m_EpOutProtectSem[i])

  00b5c	e59d300c	 ldr         r3, [sp, #0xC]
  00b60	e2831f7b	 add         r1, r3, #0x7B, 30
  00b64	e5dd3000	 ldrb        r3, [sp]
  00b68	e1a02003	 mov         r2, r3
  00b6c	e3a03004	 mov         r3, #4
  00b70	e0030392	 mul         r3, r2, r3
  00b74	e0813003	 add         r3, r1, r3
  00b78	e5933000	 ldr         r3, [r3]
  00b7c	e3530000	 cmp         r3, #0
  00b80	0a000008	 beq         |$LN1@CHW@2|

; 311  :             CloseHandle(m_EpOutProtectSem[i]);

  00b84	e59d300c	 ldr         r3, [sp, #0xC]
  00b88	e2831f7b	 add         r1, r3, #0x7B, 30
  00b8c	e5dd3000	 ldrb        r3, [sp]
  00b90	e1a02003	 mov         r2, r3
  00b94	e3a03004	 mov         r3, #4
  00b98	e0030392	 mul         r3, r2, r3
  00b9c	e0813003	 add         r3, r1, r3
  00ba0	e5930000	 ldr         r0, [r3]
  00ba4	eb000000	 bl          CloseHandle
  00ba8		 |$LN1@CHW@2|

; 312  :     }

  00ba8	eaffffd1	 b           |$LN4@CHW@2|
  00bac		 |$LN3@CHW@2|

; 313  : }

  00bac	e59d300c	 ldr         r3, [sp, #0xC]
  00bb0	e2830e33	 add         r0, r3, #0x33, 28
  00bb4	eb000000	 bl          |??1CCppiDmaController@@QAA@XZ|
  00bb8	e59d000c	 ldr         r0, [sp, #0xC]
  00bbc	eb000000	 bl          |??1CHcd@@UAA@XZ|
  00bc0	e28dd004	 add         sp, sp, #4
  00bc4	e89d6000	 ldmia       sp, {sp, lr}
  00bc8	e12fff1e	 bx          lr
  00bcc		 |$LN12@CHW@2|
  00bcc		 |$LN13@CHW@2|
  00bcc	00000000	 DCD         |??_7CHW@@6B@|
  00bd0		 |$M43165|

			 ENDP  ; |??1CHW@@UAA@XZ|, CHW::~CHW

	EXPORT	|??_C@_1DI@MBIOGDIA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?0?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CB?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?UsbProcessingThreadStub@CHW@@CAKPAX@Z| ; CHW::UsbProcessingThreadStub
	EXPORT	|??_C@_1EM@OLPEIAAA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|?UsbInterruptThreadStub@CHW@@CAKPAX@Z|	; CHW::UsbInterruptThreadStub
	EXPORT	|??_C@_1GC@NNLMHGPK@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAn?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@JKJEGADD@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@EHEBHJLG@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt@| [ DATA ] ; `string'
	EXPORT	|?InitialiseFIFOs@CHW@@AAAXXZ|		; CHW::InitialiseFIFOs
	EXPORT	|??_C@_1EO@ICAPHDAA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAz?$AAe?$AAr?$AAo?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@LGMEKEEG@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAb?$AAa?$AAs?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAi?$AAn?$AAt?$AAr@| [ DATA ] ; `string'
	IMPORT	|CeSetThreadPriority|
	IMPORT	|g_IstThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|InterruptInitialize|
	IMPORT	|InterruptDisable|
	IMPORT	|CreateEventW|
	IMPORT	|?Initialize@CCppiDmaController@@QAAHIPAX0@Z| ; CCppiDmaController::Initialize
	IMPORT	|?ReInit@CPhysMem@@QAAXXZ|		; CPhysMem::ReInit
	IMPORT	|GetTickCount|

  00028			 AREA	 |.pdata|, PDATA
|$T43201| DCD	|$LN35@Initialize|
	DCD	0x40016804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@MBIOGDIA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?0?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CB?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ",", 0x0, " ", 0x0, "s"
	DCB	0x0, "u", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, "!", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@OLPEIAAA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ".", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "I", 0x0, "S", 0x0, "T", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NNLMHGPK@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAn?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ".", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@JKJEGADD@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ".", 0x0, " ", 0x0, "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "H", 0x0, "u", 0x0, "b"
	DCB	0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@EHEBHJLG@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, ".", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@ICAPHDAA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAz?$AAe?$AAr?$AAo?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "z", 0x0, "e", 0x0, "r", 0x0, "o", 0x0, " ", 0x0, "R"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "A", 0x0, "M", 0x0, "3", 0x0, "5", 0x0, "1", 0x0, "7"
	DCB	0x0, "\\", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "\\", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "H", 0x0, "\\", 0x0, ".", 0x0, "\\"
	DCB	0x0, "c", 0x0, "h", 0x0, "w", 0x0, ".", 0x0, "c", 0x0, "p"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@LGMEKEEG@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAb?$AAa?$AAs?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAi?$AAn?$AAt?$AAr@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "b", 0x0, "a"
	DCB	0x0, "s", 0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00bd0			 AREA	 |.text|, CODE, ARM

  00bd0		 |?Initialize@CHW@@UAAHXZ| PROC		; CHW::Initialize

; 335  : {

  00bd0		 |$LN35@Initialize|
  00bd0	e1a0c00d	 mov         r12, sp
  00bd4	e92d0001	 stmdb       sp!, {r0}
  00bd8	e92d5000	 stmdb       sp!, {r12, lr}
  00bdc	e24dd068	 sub         sp, sp, #0x68
  00be0		 |$M43198|

; 336  :     DEBUGMSG( ZONE_INIT, (TEXT("+CHW::Initialize base=0x%x, intr=0x%x\n"), m_portBase, m_dwSysIntr));

  00be0	e59f3550	 ldr         r3, [pc, #0x550]
  00be4	e5933440	 ldr         r3, [r3, #0x440]
  00be8	e3130002	 tst         r3, #2
  00bec	0a00000a	 beq         |$LN11@Initialize|
  00bf0	e59d3070	 ldr         r3, [sp, #0x70]
  00bf4	e2833f5d	 add         r3, r3, #0x5D, 30
  00bf8	e5932000	 ldr         r2, [r3]
  00bfc	e59d3070	 ldr         r3, [sp, #0x70]
  00c00	e2833f52	 add         r3, r3, #0x52, 30
  00c04	e5931000	 ldr         r1, [r3]
  00c08	e59f055c	 ldr         r0, [pc, #0x55C]
  00c0c	eb000000	 bl          NKDbgPrintfW
  00c10	e3a03001	 mov         r3, #1
  00c14	e58d301c	 str         r3, [sp, #0x1C]
  00c18	ea000001	 b           |$LN12@Initialize|
  00c1c		 |$LN11@Initialize|
  00c1c	e3a03000	 mov         r3, #0
  00c20	e58d301c	 str         r3, [sp, #0x1C]
  00c24		 |$LN12@Initialize|

; 337  : 
; 338  : #ifdef DEBUG
; 339  :     dwTickCountLastTime = GetTickCount();

  00c24	eb000000	 bl          GetTickCount
  00c28	e58d0020	 str         r0, [sp, #0x20]
  00c2c	e59d3070	 ldr         r3, [sp, #0x70]
  00c30	e2832d05	 add         r2, r3, #5, 26
  00c34	e59d3020	 ldr         r3, [sp, #0x20]
  00c38	e5823000	 str         r3, [r2]

; 340  : #endif
; 341  : 
; 342  :     DEBUGCHK( m_wFrameHigh == 0 );

  00c3c	e59d3070	 ldr         r3, [sp, #0x70]
  00c40	e2833e17	 add         r3, r3, #0x17, 28
  00c44	e1d330b0	 ldrh        r3, [r3]
  00c48	e3530000	 cmp         r3, #0
  00c4c	1a000002	 bne         |$LN13@Initialize|
  00c50	e3a03001	 mov         r3, #1
  00c54	e58d3024	 str         r3, [sp, #0x24]
  00c58	ea000008	 b           |$LN14@Initialize|
  00c5c		 |$LN13@Initialize|
  00c5c	e3a03c01	 mov         r3, #1, 24
  00c60	e3833056	 orr         r3, r3, #0x56
  00c64	e59f24e8	 ldr         r2, [pc, #0x4E8]
  00c68	e59f14c8	 ldr         r1, [pc, #0x4C8]
  00c6c	e59f04dc	 ldr         r0, [pc, #0x4DC]
  00c70	eb000000	 bl          NKDbgPrintfW
  00c74	e6000010	 __debugbreak_ce
  00c78	e3a03000	 mov         r3, #0
  00c7c	e58d3024	 str         r3, [sp, #0x24]
  00c80		 |$LN14@Initialize|

; 343  : 
; 344  :     if (!m_fConstructionStatus)

  00c80	e59d3070	 ldr         r3, [sp, #0x70]
  00c84	e2833f55	 add         r3, r3, #0x55, 30
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e3530000	 cmp         r3, #0
  00c90	1a000002	 bne         |$LN8@Initialize|

; 345  :         return FALSE;

  00c94	e3a03000	 mov         r3, #0
  00c98	e58d3008	 str         r3, [sp, #8]
  00c9c	ea000120	 b           |$LN9@Initialize|
  00ca0		 |$LN8@Initialize|

; 346  : 
; 347  :     if ( m_portBase == 0 ) {

  00ca0	e59d3070	 ldr         r3, [sp, #0x70]
  00ca4	e2833f52	 add         r3, r3, #0x52, 30
  00ca8	e5933000	 ldr         r3, [r3]
  00cac	e3530000	 cmp         r3, #0
  00cb0	1a00000d	 bne         |$LN7@Initialize|

; 348  :         DEBUGMSG( ZONE_ERROR, (TEXT("-CHW::Initialize - zero Register Base\n")));

  00cb4	e59f347c	 ldr         r3, [pc, #0x47C]
  00cb8	e5933440	 ldr         r3, [r3, #0x440]
  00cbc	e3130901	 tst         r3, #1, 18
  00cc0	0a000004	 beq         |$LN15@Initialize|
  00cc4	e59f049c	 ldr         r0, [pc, #0x49C]
  00cc8	eb000000	 bl          NKDbgPrintfW
  00ccc	e3a03001	 mov         r3, #1
  00cd0	e58d3028	 str         r3, [sp, #0x28]
  00cd4	ea000001	 b           |$LN16@Initialize|
  00cd8		 |$LN15@Initialize|
  00cd8	e3a03000	 mov         r3, #0
  00cdc	e58d3028	 str         r3, [sp, #0x28]
  00ce0		 |$LN16@Initialize|

; 349  :         return FALSE;

  00ce0	e3a03000	 mov         r3, #0
  00ce4	e58d3008	 str         r3, [sp, #8]
  00ce8	ea00010d	 b           |$LN9@Initialize|
  00cec		 |$LN7@Initialize|

; 350  :     }
; 351  : 
; 352  :     m_pMem->ReInit();

  00cec	e59d3070	 ldr         r3, [sp, #0x70]
  00cf0	e2833f63	 add         r3, r3, #0x63, 30
  00cf4	e5930000	 ldr         r0, [r3]
  00cf8	eb000000	 bl          |?ReInit@CPhysMem@@QAAXXZ|

; 353  : 
; 354  :     InitialiseFIFOs();

  00cfc	e59d0070	 ldr         r0, [sp, #0x70]
  00d00	eb000000	 bl          |?InitialiseFIFOs@CHW@@AAAXXZ|

; 355  :     m_bHostEndPointUseageCount = 1;

  00d04	e59d3070	 ldr         r3, [sp, #0x70]
  00d08	e2833c01	 add         r3, r3, #1, 24
  00d0c	e283209f	 add         r2, r3, #0x9F
  00d10	e3a03001	 mov         r3, #1
  00d14	e5c23000	 strb        r3, [r2]

; 356  :     m_bulkEpNum = 0;

  00d18	e59d3070	 ldr         r3, [sp, #0x70]
  00d1c	e2832f69	 add         r2, r3, #0x69, 30
  00d20	e3a03000	 mov         r3, #0
  00d24	e5c23000	 strb        r3, [r2]

; 357  :     m_bulkEpUseCount = 0;

  00d28	e59d3070	 ldr         r3, [sp, #0x70]
  00d2c	e2833c01	 add         r3, r3, #1, 24
  00d30	e28320a5	 add         r2, r3, #0xA5
  00d34	e3a03000	 mov         r3, #0
  00d38	e5c23000	 strb        r3, [r2]

; 358  :     m_bulkEpConfigured = FALSE;

  00d3c	e59d3070	 ldr         r3, [sp, #0x70]
  00d40	e2832f6a	 add         r2, r3, #0x6A, 30
  00d44	e3a03000	 mov         r3, #0
  00d48	e5823000	 str         r3, [r2]

; 359  : 
; 360  : #ifdef MUSB_USEDMA
; 361  : 
; 362  :     m_pChw = this;

  00d4c	e59d2070	 ldr         r2, [sp, #0x70]
  00d50	e59f340c	 ldr         r3, [pc, #0x40C]
  00d54	e5832000	 str         r2, [r3]

; 363  : 
; 364  :     // Initialize DMA controller
; 365  :     if (!m_dmaCrtl.Initialize(AM3517_USB0_REGS_PA, m_portBase, m_cppiBase))

  00d58	e59d3070	 ldr         r3, [sp, #0x70]
  00d5c	e2833f53	 add         r3, r3, #0x53, 30
  00d60	e5933000	 ldr         r3, [r3]
  00d64	e59d2070	 ldr         r2, [sp, #0x70]
  00d68	e2822f52	 add         r2, r2, #0x52, 30
  00d6c	e5922000	 ldr         r2, [r2]
  00d70	e3a01317	 mov         r1, #0x17, 6
  00d74	e3811701	 orr         r1, r1, #1, 14
  00d78	e59d0070	 ldr         r0, [sp, #0x70]
  00d7c	e2800e33	 add         r0, r0, #0x33, 28
  00d80	eb000000	 bl          |?Initialize@CCppiDmaController@@QAAHIPAX0@Z|
  00d84	e58d002c	 str         r0, [sp, #0x2C]
  00d88	e59d302c	 ldr         r3, [sp, #0x2C]
  00d8c	e3530000	 cmp         r3, #0
  00d90	1a00000d	 bne         |$LN6@Initialize|

; 366  :     {
; 367  :         DEBUGMSG(ZONE_ERROR, (TEXT("-CHW::Initialize. Failed to initialize DMA\n")));

  00d94	e59f339c	 ldr         r3, [pc, #0x39C]
  00d98	e5933440	 ldr         r3, [r3, #0x440]
  00d9c	e3130901	 tst         r3, #1, 18
  00da0	0a000004	 beq         |$LN17@Initialize|
  00da4	e59f03b4	 ldr         r0, [pc, #0x3B4]
  00da8	eb000000	 bl          NKDbgPrintfW
  00dac	e3a03001	 mov         r3, #1
  00db0	e58d3030	 str         r3, [sp, #0x30]
  00db4	ea000001	 b           |$LN18@Initialize|
  00db8		 |$LN17@Initialize|
  00db8	e3a03000	 mov         r3, #0
  00dbc	e58d3030	 str         r3, [sp, #0x30]
  00dc0		 |$LN18@Initialize|

; 368  :         return FALSE;

  00dc0	e3a03000	 mov         r3, #0
  00dc4	e58d3008	 str         r3, [sp, #8]
  00dc8	ea0000d5	 b           |$LN9@Initialize|
  00dcc		 |$LN6@Initialize|

; 369  :     }
; 370  : 
; 371  : #endif // MUSB_USEDMA
; 372  : 
; 373  :     DEBUGCHK( m_hUsbInterruptEvent == NULL );

  00dcc	e59d3070	 ldr         r3, [sp, #0x70]
  00dd0	e2833f5e	 add         r3, r3, #0x5E, 30
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e3530000	 cmp         r3, #0
  00ddc	1a000002	 bne         |$LN19@Initialize|
  00de0	e3a03001	 mov         r3, #1
  00de4	e58d3034	 str         r3, [sp, #0x34]
  00de8	ea000008	 b           |$LN20@Initialize|
  00dec		 |$LN19@Initialize|
  00dec	e3a03c01	 mov         r3, #1, 24
  00df0	e3833075	 orr         r3, r3, #0x75
  00df4	e59f2358	 ldr         r2, [pc, #0x358]
  00df8	e59f1338	 ldr         r1, [pc, #0x338]
  00dfc	e59f034c	 ldr         r0, [pc, #0x34C]
  00e00	eb000000	 bl          NKDbgPrintfW
  00e04	e6000010	 __debugbreak_ce
  00e08	e3a03000	 mov         r3, #0
  00e0c	e58d3034	 str         r3, [sp, #0x34]
  00e10		 |$LN20@Initialize|

; 374  :     m_hUsbInterruptEvent = CreateEvent( NULL, FALSE, FALSE, NULL );

  00e10	e3a03000	 mov         r3, #0
  00e14	e3a02000	 mov         r2, #0
  00e18	e3a01000	 mov         r1, #0
  00e1c	e3a00000	 mov         r0, #0
  00e20	eb000000	 bl          CreateEventW
  00e24	e58d0038	 str         r0, [sp, #0x38]
  00e28	e59d3070	 ldr         r3, [sp, #0x70]
  00e2c	e2832f5e	 add         r2, r3, #0x5E, 30
  00e30	e59d3038	 ldr         r3, [sp, #0x38]
  00e34	e5823000	 str         r3, [r2]

; 375  :     m_hUsbHubChangeEvent = CreateEvent( NULL, FALSE, FALSE, NULL );

  00e38	e3a03000	 mov         r3, #0
  00e3c	e3a02000	 mov         r2, #0
  00e40	e3a01000	 mov         r1, #0
  00e44	e3a00000	 mov         r0, #0
  00e48	eb000000	 bl          CreateEventW
  00e4c	e58d003c	 str         r0, [sp, #0x3C]
  00e50	e59d3070	 ldr         r3, [sp, #0x70]
  00e54	e2832f61	 add         r2, r3, #0x61, 30
  00e58	e59d303c	 ldr         r3, [sp, #0x3C]
  00e5c	e5823000	 str         r3, [r2]

; 376  :     if ( m_hUsbInterruptEvent == NULL || m_hUsbHubChangeEvent==NULL ){

  00e60	e59d3070	 ldr         r3, [sp, #0x70]
  00e64	e2833f5e	 add         r3, r3, #0x5E, 30
  00e68	e5933000	 ldr         r3, [r3]
  00e6c	e3530000	 cmp         r3, #0
  00e70	0a000004	 beq         |$LN4@Initialize|
  00e74	e59d3070	 ldr         r3, [sp, #0x70]
  00e78	e2833f61	 add         r3, r3, #0x61, 30
  00e7c	e5933000	 ldr         r3, [r3]
  00e80	e3530000	 cmp         r3, #0
  00e84	1a00000d	 bne         |$LN5@Initialize|
  00e88		 |$LN4@Initialize|

; 377  :         DEBUGMSG(ZONE_ERROR, (TEXT("-CHW::Initialize. Error creating USBInterrupt or USBHubEvent event\n")));

  00e88	e59f32a8	 ldr         r3, [pc, #0x2A8]
  00e8c	e5933440	 ldr         r3, [r3, #0x440]
  00e90	e3130901	 tst         r3, #1, 18
  00e94	0a000004	 beq         |$LN21@Initialize|
  00e98	e59f02bc	 ldr         r0, [pc, #0x2BC]
  00e9c	eb000000	 bl          NKDbgPrintfW
  00ea0	e3a03001	 mov         r3, #1
  00ea4	e58d3040	 str         r3, [sp, #0x40]
  00ea8	ea000001	 b           |$LN22@Initialize|
  00eac		 |$LN21@Initialize|
  00eac	e3a03000	 mov         r3, #0
  00eb0	e58d3040	 str         r3, [sp, #0x40]
  00eb4		 |$LN22@Initialize|

; 378  :         return FALSE;

  00eb4	e3a03000	 mov         r3, #0
  00eb8	e58d3008	 str         r3, [sp, #8]
  00ebc	ea000098	 b           |$LN9@Initialize|
  00ec0		 |$LN5@Initialize|

; 379  :     }
; 380  : 
; 381  :     InterruptDisable( m_dwSysIntr ); // Just to make sure this is really ours.

  00ec0	e59d3070	 ldr         r3, [sp, #0x70]
  00ec4	e2833f5d	 add         r3, r3, #0x5D, 30
  00ec8	e5930000	 ldr         r0, [r3]
  00ecc	eb000000	 bl          InterruptDisable

; 382  :     // Initialize Interrupt. When interrupt id # m_sysIntr is triggered,
; 383  :     // m_hUsbInterruptEvent will be signaled. Last 2 params must be NULL
; 384  :     if ( !InterruptInitialize( m_dwSysIntr, m_hUsbInterruptEvent, NULL, NULL) ) {

  00ed0	e3a03000	 mov         r3, #0
  00ed4	e3a02000	 mov         r2, #0
  00ed8	e59d1070	 ldr         r1, [sp, #0x70]
  00edc	e2811f5e	 add         r1, r1, #0x5E, 30
  00ee0	e5911000	 ldr         r1, [r1]
  00ee4	e59d0070	 ldr         r0, [sp, #0x70]
  00ee8	e2800f5d	 add         r0, r0, #0x5D, 30
  00eec	e5900000	 ldr         r0, [r0]
  00ef0	eb000000	 bl          InterruptInitialize
  00ef4	e58d0044	 str         r0, [sp, #0x44]
  00ef8	e59d3044	 ldr         r3, [sp, #0x44]
  00efc	e3530000	 cmp         r3, #0
  00f00	1a00000d	 bne         |$LN3@Initialize|

; 385  :         DEBUGMSG(ZONE_ERROR, (TEXT("-CHW::Initialize. Error on InterruptInitialize\r\n")));

  00f04	e59f322c	 ldr         r3, [pc, #0x22C]
  00f08	e5933440	 ldr         r3, [r3, #0x440]
  00f0c	e3130901	 tst         r3, #1, 18
  00f10	0a000004	 beq         |$LN23@Initialize|
  00f14	e59f023c	 ldr         r0, [pc, #0x23C]
  00f18	eb000000	 bl          NKDbgPrintfW
  00f1c	e3a03001	 mov         r3, #1
  00f20	e58d3048	 str         r3, [sp, #0x48]
  00f24	ea000001	 b           |$LN24@Initialize|
  00f28		 |$LN23@Initialize|
  00f28	e3a03000	 mov         r3, #0
  00f2c	e58d3048	 str         r3, [sp, #0x48]
  00f30		 |$LN24@Initialize|

; 386  :         return FALSE;

  00f30	e3a03000	 mov         r3, #0
  00f34	e58d3008	 str         r3, [sp, #8]
  00f38	ea000079	 b           |$LN9@Initialize|
  00f3c		 |$LN3@Initialize|

; 387  :     }
; 388  : 
; 389  :     // Start up our IST - the parameter passed to the thread
; 390  :     // is unused for now
; 391  :     DEBUGCHK( m_hUsbInterruptThread == NULL &&
; 392  :               m_fUsbInterruptThreadClosing == FALSE );

  00f3c	e59d3070	 ldr         r3, [sp, #0x70]
  00f40	e2833f5f	 add         r3, r3, #0x5F, 30
  00f44	e5933000	 ldr         r3, [r3]
  00f48	e3530000	 cmp         r3, #0
  00f4c	1a000007	 bne         |$LN25@Initialize|
  00f50	e59d3070	 ldr         r3, [sp, #0x70]
  00f54	e2833f62	 add         r3, r3, #0x62, 30
  00f58	e5933000	 ldr         r3, [r3]
  00f5c	e3530000	 cmp         r3, #0
  00f60	1a000002	 bne         |$LN25@Initialize|
  00f64	e3a03001	 mov         r3, #1
  00f68	e58d304c	 str         r3, [sp, #0x4C]
  00f6c	ea000007	 b           |$LN26@Initialize|
  00f70		 |$LN25@Initialize|
  00f70	e3a03f62	 mov         r3, #0x62, 30
  00f74	e59f21d8	 ldr         r2, [pc, #0x1D8]
  00f78	e59f11b8	 ldr         r1, [pc, #0x1B8]
  00f7c	e59f01cc	 ldr         r0, [pc, #0x1CC]
  00f80	eb000000	 bl          NKDbgPrintfW
  00f84	e6000010	 __debugbreak_ce
  00f88	e3a03000	 mov         r3, #0
  00f8c	e58d304c	 str         r3, [sp, #0x4C]
  00f90		 |$LN26@Initialize|

; 393  :     m_hUsbInterruptThread = CreateThread( 0, 0, UsbInterruptThreadStub, this, 0, NULL );

  00f90	e3a03000	 mov         r3, #0
  00f94	e58d3004	 str         r3, [sp, #4]
  00f98	e3a03000	 mov         r3, #0
  00f9c	e58d3000	 str         r3, [sp]
  00fa0	e59d3070	 ldr         r3, [sp, #0x70]
  00fa4	e59f21a0	 ldr         r2, [pc, #0x1A0]
  00fa8	e3a01000	 mov         r1, #0
  00fac	e3a00000	 mov         r0, #0
  00fb0	eb000000	 bl          CreateThread
  00fb4	e58d0050	 str         r0, [sp, #0x50]
  00fb8	e59d3070	 ldr         r3, [sp, #0x70]
  00fbc	e2832f5f	 add         r2, r3, #0x5F, 30
  00fc0	e59d3050	 ldr         r3, [sp, #0x50]
  00fc4	e5823000	 str         r3, [r2]

; 394  :     if ( m_hUsbInterruptThread == NULL ) {

  00fc8	e59d3070	 ldr         r3, [sp, #0x70]
  00fcc	e2833f5f	 add         r3, r3, #0x5F, 30
  00fd0	e5933000	 ldr         r3, [r3]
  00fd4	e3530000	 cmp         r3, #0
  00fd8	1a00000d	 bne         |$LN2@Initialize|

; 395  :         DEBUGMSG(ZONE_ERROR, (TEXT("-CHW::Initialize. Error creating IST\n")));

  00fdc	e59f3154	 ldr         r3, [pc, #0x154]
  00fe0	e5933440	 ldr         r3, [r3, #0x440]
  00fe4	e3130901	 tst         r3, #1, 18
  00fe8	0a000004	 beq         |$LN27@Initialize|
  00fec	e59f014c	 ldr         r0, [pc, #0x14C]
  00ff0	eb000000	 bl          NKDbgPrintfW
  00ff4	e3a03001	 mov         r3, #1
  00ff8	e58d3054	 str         r3, [sp, #0x54]
  00ffc	ea000001	 b           |$LN28@Initialize|
  01000		 |$LN27@Initialize|
  01000	e3a03000	 mov         r3, #0
  01004	e58d3054	 str         r3, [sp, #0x54]
  01008		 |$LN28@Initialize|

; 396  :         return FALSE;

  01008	e3a03000	 mov         r3, #0
  0100c	e58d3008	 str         r3, [sp, #8]
  01010	ea000043	 b           |$LN9@Initialize|
  01014		 |$LN2@Initialize|

; 397  :     }
; 398  : 
; 399  :     CeSetThreadPriority( m_hUsbInterruptThread, g_IstThreadPriority );

  01014	e59f3120	 ldr         r3, [pc, #0x120]
  01018	e5931000	 ldr         r1, [r3]
  0101c	e59d3070	 ldr         r3, [sp, #0x70]
  01020	e2833f5f	 add         r3, r3, #0x5F, 30
  01024	e5930000	 ldr         r0, [r3]
  01028	eb000000	 bl          CeSetThreadPriority

; 400  : 
; 401  :     g_hUsbProcessingEvent = CreateEvent( NULL, FALSE, FALSE, NULL );

  0102c	e3a03000	 mov         r3, #0
  01030	e3a02000	 mov         r2, #0
  01034	e3a01000	 mov         r1, #0
  01038	e3a00000	 mov         r0, #0
  0103c	eb000000	 bl          CreateEventW
  01040	e58d0058	 str         r0, [sp, #0x58]
  01044	e59d2058	 ldr         r2, [sp, #0x58]
  01048	e59f30f8	 ldr         r3, [pc, #0xF8]
  0104c	e5832000	 str         r2, [r3]

; 402  :     m_hUsbProcessingThread = CreateThread( 0, 0, UsbProcessingThreadStub, this, 0, NULL );

  01050	e3a03000	 mov         r3, #0
  01054	e58d3004	 str         r3, [sp, #4]
  01058	e3a03000	 mov         r3, #0
  0105c	e58d3000	 str         r3, [sp]
  01060	e59d3070	 ldr         r3, [sp, #0x70]
  01064	e59f20d8	 ldr         r2, [pc, #0xD8]
  01068	e3a01000	 mov         r1, #0
  0106c	e3a00000	 mov         r0, #0
  01070	eb000000	 bl          CreateThread
  01074	e58d005c	 str         r0, [sp, #0x5C]
  01078	e59d3070	 ldr         r3, [sp, #0x70]
  0107c	e2832d06	 add         r2, r3, #6, 26
  01080	e59d305c	 ldr         r3, [sp, #0x5C]
  01084	e5823000	 str         r3, [r2]

; 403  :     if ( m_hUsbProcessingThread == NULL ) {

  01088	e59d3070	 ldr         r3, [sp, #0x70]
  0108c	e2833d06	 add         r3, r3, #6, 26
  01090	e5933000	 ldr         r3, [r3]
  01094	e3530000	 cmp         r3, #0
  01098	1a00000d	 bne         |$LN1@Initialize|

; 404  :         DEBUGMSG(ZONE_ERROR, (TEXT("-CHW::Initialize. Error creating IST\n")));

  0109c	e59f3094	 ldr         r3, [pc, #0x94]
  010a0	e5933440	 ldr         r3, [r3, #0x440]
  010a4	e3130901	 tst         r3, #1, 18
  010a8	0a000004	 beq         |$LN29@Initialize|
  010ac	e59f008c	 ldr         r0, [pc, #0x8C]
  010b0	eb000000	 bl          NKDbgPrintfW
  010b4	e3a03001	 mov         r3, #1
  010b8	e58d3060	 str         r3, [sp, #0x60]
  010bc	ea000001	 b           |$LN30@Initialize|
  010c0		 |$LN29@Initialize|
  010c0	e3a03000	 mov         r3, #0
  010c4	e58d3060	 str         r3, [sp, #0x60]
  010c8		 |$LN30@Initialize|

; 405  :         return FALSE;

  010c8	e3a03000	 mov         r3, #0
  010cc	e58d3008	 str         r3, [sp, #8]
  010d0	ea000013	 b           |$LN9@Initialize|
  010d4		 |$LN1@Initialize|

; 406  :     }
; 407  : 
; 408  :     CeSetThreadPriority( m_hUsbProcessingThread, g_IstThreadPriority + 1 );

  010d4	e59f3060	 ldr         r3, [pc, #0x60]
  010d8	e5933000	 ldr         r3, [r3]
  010dc	e2831001	 add         r1, r3, #1
  010e0	e59d3070	 ldr         r3, [sp, #0x70]
  010e4	e2833d06	 add         r3, r3, #6, 26
  010e8	e5930000	 ldr         r0, [r3]
  010ec	eb000000	 bl          CeSetThreadPriority

; 409  : 
; 410  :     DEBUGMSG(ZONE_INIT, (TEXT("-CHW::Initialize, success!\n")));

  010f0	e59f3040	 ldr         r3, [pc, #0x40]
  010f4	e5933440	 ldr         r3, [r3, #0x440]
  010f8	e3130002	 tst         r3, #2
  010fc	0a000004	 beq         |$LN31@Initialize|
  01100	e59f002c	 ldr         r0, [pc, #0x2C]
  01104	eb000000	 bl          NKDbgPrintfW
  01108	e3a03001	 mov         r3, #1
  0110c	e58d3064	 str         r3, [sp, #0x64]
  01110	ea000001	 b           |$LN32@Initialize|
  01114		 |$LN31@Initialize|
  01114	e3a03000	 mov         r3, #0
  01118	e58d3064	 str         r3, [sp, #0x64]
  0111c		 |$LN32@Initialize|

; 411  : 
; 412  :     return TRUE;

  0111c	e3a03001	 mov         r3, #1
  01120	e58d3008	 str         r3, [sp, #8]
  01124		 |$LN9@Initialize|

; 413  : }

  01124	e59d0008	 ldr         r0, [sp, #8]
  01128	e28dd068	 add         sp, sp, #0x68
  0112c	e89d6000	 ldmia       sp, {sp, lr}
  01130	e12fff1e	 bx          lr
  01134		 |$LN36@Initialize|
  01134		 |$LN37@Initialize|
  01134	00000000	 DCD         |??_C@_1DI@MBIOGDIA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?0?$AA?5?$AAs?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CB?$AA?6?$AA?$AA@|
  01138		 |$LN38@Initialize|
  01138	00000000	 DCD         |dpCurSettings|
  0113c		 |$LN39@Initialize|
  0113c	00000000	 DCD         |g_IstThreadPriority|
  01140		 |$LN40@Initialize|
  01140	00000000	 DCD         |??_C@_1EM@OLPEIAAA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg@|
  01144		 |$LN41@Initialize|
  01144	00000000	 DCD         |?UsbProcessingThreadStub@CHW@@CAKPAX@Z|
  01148		 |$LN42@Initialize|
  01148	00000000	 DCD         |?g_hUsbProcessingEvent@@3PAXA|
  0114c		 |$LN43@Initialize|
  0114c	00000000	 DCD         |?UsbInterruptThreadStub@CHW@@CAKPAX@Z|
  01150		 |$LN44@Initialize|
  01150	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01154		 |$LN45@Initialize|
  01154	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01158		 |$LN46@Initialize|
  01158	00000000	 DCD         |??_C@_1GC@NNLMHGPK@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAo?$AAn?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr@|
  0115c		 |$LN47@Initialize|
  0115c	00000000	 DCD         |??_C@_1II@JKJEGADD@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg@|
  01160		 |$LN48@Initialize|
  01160	00000000	 DCD         |??_C@_1FI@EHEBHJLG@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?4?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt@|
  01164		 |$LN49@Initialize|
  01164	00000000	 DCD         |?m_pChw@CHW@@2PAV1@A|
  01168		 |$LN50@Initialize|
  01168	00000000	 DCD         |??_C@_1EO@ICAPHDAA@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AA?9?$AA?5?$AAz?$AAe?$AAr?$AAo?$AA?5?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr@|
  0116c		 |$LN51@Initialize|
  0116c	00000000	 DCD         |??_C@_1EO@LGMEKEEG@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAb?$AAa?$AAs?$AAe?$AA?$DN?$AA0?$AAx?$AA?$CF?$AAx?$AA?0?$AA?5?$AAi?$AAn?$AAt?$AAr@|
  01170		 |$M43199|

			 ENDP  ; |?Initialize@CHW@@UAAHXZ|, CHW::Initialize

	EXPORT	|??_C@_1CK@LAJBPFEC@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@MOEIDJAN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@LDAJLLMB@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAm?$AA_?$AAh?$AAU?$AAs?$AAb?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1CK@MAOGODKE@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|?Deinitialize@CCppiDmaController@@QAAXXZ| ; CCppiDmaController::Deinitialize
	IMPORT	|TerminateThread|
	IMPORT	|WaitForSingleObject|

  00030			 AREA	 |.pdata|, PDATA
|$T43234| DCD	|$LN24@DeInitiali|
	DCD	0x4000d504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@LAJBPFEC@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "D"
	DCB	0x0, "e", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@MOEIDJAN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "c", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@LDAJLLMB@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAm?$AA_?$AAh?$AAU?$AAs?$AAb?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "D", 0x0, "e"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "m", 0x0, "_", 0x0, "h", 0x0, "U", 0x0, "s", 0x0, "b"
	DCB	0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "d", 0x0, "i"
	DCB	0x0, "d", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "e"
	DCB	0x0, "x", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "l"
	DCB	0x0, "e", 0x0, "a", 0x0, "n", 0x0, "l", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@MAOGODKE@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "D"
	DCB	0x0, "e", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01170			 AREA	 |.text|, CODE, ARM

  01170		 |?DeInitialize@CHW@@UAAXXZ| PROC	; CHW::DeInitialize

; 428  : {

  01170		 |$LN24@DeInitiali|
  01170	e1a0c00d	 mov         r12, sp
  01174	e92d0001	 stmdb       sp!, {r0}
  01178	e92d5000	 stmdb       sp!, {r12, lr}
  0117c	e24dd028	 sub         sp, sp, #0x28
  01180		 |$M43231|

; 429  :     m_fUsbInterruptThreadClosing = TRUE; // tell USBInterruptThread that we are closing

  01180	e59d3030	 ldr         r3, [sp, #0x30]
  01184	e2832f62	 add         r2, r3, #0x62, 30
  01188	e3a03001	 mov         r3, #1
  0118c	e5823000	 str         r3, [r2]

; 430  :     DEBUGMSG( ZONE_INIT, (TEXT("+CHW::DeInitialize\r\n")));

  01190	e59f3310	 ldr         r3, [pc, #0x310]
  01194	e5933440	 ldr         r3, [r3, #0x440]
  01198	e3130002	 tst         r3, #2
  0119c	0a000004	 beq         |$LN10@DeInitiali|
  011a0	e59f0318	 ldr         r0, [pc, #0x318]
  011a4	eb000000	 bl          NKDbgPrintfW
  011a8	e3a03001	 mov         r3, #1
  011ac	e58d3008	 str         r3, [sp, #8]
  011b0	ea000001	 b           |$LN11@DeInitiali|
  011b4		 |$LN10@DeInitiali|
  011b4	e3a03000	 mov         r3, #0
  011b8	e58d3008	 str         r3, [sp, #8]
  011bc		 |$LN11@DeInitiali|

; 431  : 
; 432  :     // Wake up the interrupt thread and give it time to die.
; 433  :     if ( m_hUsbInterruptEvent ) {

  011bc	e59d3030	 ldr         r3, [sp, #0x30]
  011c0	e2833f5e	 add         r3, r3, #0x5E, 30
  011c4	e5933000	 ldr         r3, [r3]
  011c8	e3530000	 cmp         r3, #0
  011cc	0a000053	 beq         |$LN7@DeInitiali|

; 434  : 
; 435  :         SetEvent(m_hUsbInterruptEvent);

  011d0	e59d3030	 ldr         r3, [sp, #0x30]
  011d4	e2833f5e	 add         r3, r3, #0x5E, 30
  011d8	e5930000	 ldr         r0, [r3]
  011dc	eb000000	 bl          SetEvent

; 436  :         if ( m_hUsbInterruptThread ) {

  011e0	e59d3030	 ldr         r3, [sp, #0x30]
  011e4	e2833f5f	 add         r3, r3, #0x5F, 30
  011e8	e5933000	 ldr         r3, [r3]
  011ec	e3530000	 cmp         r3, #0
  011f0	0a00002f	 beq         |$LN6@DeInitiali|

; 437  :             DWORD dwWaitReturn = WaitForSingleObject(m_hUsbInterruptThread, 5000);

  011f4	e3a01c13	 mov         r1, #0x13, 24
  011f8	e3811088	 orr         r1, r1, #0x88
  011fc	e59d3030	 ldr         r3, [sp, #0x30]
  01200	e2833f5f	 add         r3, r3, #0x5F, 30
  01204	e5930000	 ldr         r0, [r3]
  01208	eb000000	 bl          WaitForSingleObject
  0120c	e58d000c	 str         r0, [sp, #0xC]
  01210	e59d300c	 ldr         r3, [sp, #0xC]
  01214	e58d3000	 str         r3, [sp]

; 438  :             if ( dwWaitReturn != WAIT_OBJECT_0 ) {

  01218	e59d3000	 ldr         r3, [sp]
  0121c	e3530000	 cmp         r3, #0
  01220	0a00001b	 beq         |$LN5@DeInitiali|

; 439  :                 DEBUGMSG( ZONE_ERROR, (TEXT("CHW::DeInitialize: m_hUsbInterruptThread didn't exit cleanly\r\n")));

  01224	e59f327c	 ldr         r3, [pc, #0x27C]
  01228	e5933440	 ldr         r3, [r3, #0x440]
  0122c	e3130901	 tst         r3, #1, 18
  01230	0a000004	 beq         |$LN12@DeInitiali|
  01234	e59f0280	 ldr         r0, [pc, #0x280]
  01238	eb000000	 bl          NKDbgPrintfW
  0123c	e3a03001	 mov         r3, #1
  01240	e58d3010	 str         r3, [sp, #0x10]
  01244	ea000001	 b           |$LN13@DeInitiali|
  01248		 |$LN12@DeInitiali|
  01248	e3a03000	 mov         r3, #0
  0124c	e58d3010	 str         r3, [sp, #0x10]
  01250		 |$LN13@DeInitiali|

; 440  :                 DEBUGCHK( 0 );

  01250	ea000002	 b           |$LN14@DeInitiali|
  01254	e3a03001	 mov         r3, #1
  01258	e58d3014	 str         r3, [sp, #0x14]
  0125c	ea000007	 b           |$LN15@DeInitiali|
  01260		 |$LN14@DeInitiali|
  01260	e3a03f6e	 mov         r3, #0x6E, 30
  01264	e59f2248	 ldr         r2, [pc, #0x248]
  01268	e59f1238	 ldr         r1, [pc, #0x238]
  0126c	e59f023c	 ldr         r0, [pc, #0x23C]
  01270	eb000000	 bl          NKDbgPrintfW
  01274	e6000010	 __debugbreak_ce
  01278	e3a03000	 mov         r3, #0
  0127c	e58d3014	 str         r3, [sp, #0x14]
  01280		 |$LN15@DeInitiali|

; 441  : #pragma prefast(suppress:258, "If we reach this code proper thread termination was attempted, but failed. So clean up by force is the last resort.")
; 442  : #pragma warning(push)
; 443  : #pragma warning(disable: 6258)
; 444  :                 TerminateThread(m_hUsbInterruptThread, DWORD(-1));

  01280	e3e01000	 mvn         r1, #0
  01284	e59d3030	 ldr         r3, [sp, #0x30]
  01288	e2833f5f	 add         r3, r3, #0x5F, 30
  0128c	e5930000	 ldr         r0, [r3]
  01290	eb000000	 bl          TerminateThread
  01294		 |$LN5@DeInitiali|

; 445  : #pragma warning(pop)
; 446  :             }
; 447  :             CloseHandle(m_hUsbInterruptThread);

  01294	e59d3030	 ldr         r3, [sp, #0x30]
  01298	e2833f5f	 add         r3, r3, #0x5F, 30
  0129c	e5930000	 ldr         r0, [r3]
  012a0	eb000000	 bl          CloseHandle

; 448  :             m_hUsbInterruptThread = NULL;

  012a4	e59d3030	 ldr         r3, [sp, #0x30]
  012a8	e2832f5f	 add         r2, r3, #0x5F, 30
  012ac	e3a03000	 mov         r3, #0
  012b0	e5823000	 str         r3, [r2]
  012b4		 |$LN6@DeInitiali|

; 449  :         }
; 450  : 
; 451  :         // we have to close our interrupt before closing the event!
; 452  :         InterruptDisable( m_dwSysIntr );

  012b4	e59d3030	 ldr         r3, [sp, #0x30]
  012b8	e2833f5d	 add         r3, r3, #0x5D, 30
  012bc	e5930000	 ldr         r0, [r3]
  012c0	eb000000	 bl          InterruptDisable

; 453  :         DEBUGMSG( ZONE_INIT, (TEXT("CHW::DeInitialize: closing event handle %x\r\n"), m_hUsbInterruptEvent));

  012c4	e59f31dc	 ldr         r3, [pc, #0x1DC]
  012c8	e5933440	 ldr         r3, [r3, #0x440]
  012cc	e3130002	 tst         r3, #2
  012d0	0a000007	 beq         |$LN16@DeInitiali|
  012d4	e59d3030	 ldr         r3, [sp, #0x30]
  012d8	e2833f5e	 add         r3, r3, #0x5E, 30
  012dc	e5931000	 ldr         r1, [r3]
  012e0	e59f01d0	 ldr         r0, [pc, #0x1D0]
  012e4	eb000000	 bl          NKDbgPrintfW
  012e8	e3a03001	 mov         r3, #1
  012ec	e58d3018	 str         r3, [sp, #0x18]
  012f0	ea000001	 b           |$LN17@DeInitiali|
  012f4		 |$LN16@DeInitiali|
  012f4	e3a03000	 mov         r3, #0
  012f8	e58d3018	 str         r3, [sp, #0x18]
  012fc		 |$LN17@DeInitiali|

; 454  :         CloseHandle(m_hUsbInterruptEvent);

  012fc	e59d3030	 ldr         r3, [sp, #0x30]
  01300	e2833f5e	 add         r3, r3, #0x5E, 30
  01304	e5930000	 ldr         r0, [r3]
  01308	eb000000	 bl          CloseHandle

; 455  :         m_hUsbInterruptEvent = NULL;

  0130c	e59d3030	 ldr         r3, [sp, #0x30]
  01310	e2832f5e	 add         r2, r3, #0x5E, 30
  01314	e3a03000	 mov         r3, #0
  01318	e5823000	 str         r3, [r2]

; 456  :     } else {

  0131c	ea000003	 b           |$LN4@DeInitiali|
  01320		 |$LN7@DeInitiali|

; 457  :         InterruptDisable( m_dwSysIntr );

  01320	e59d3030	 ldr         r3, [sp, #0x30]
  01324	e2833f5d	 add         r3, r3, #0x5D, 30
  01328	e5930000	 ldr         r0, [r3]
  0132c	eb000000	 bl          InterruptDisable
  01330		 |$LN4@DeInitiali|

; 458  :     }
; 459  : 
; 460  :     if ( m_hUsbHubChangeEvent) {

  01330	e59d3030	 ldr         r3, [sp, #0x30]
  01334	e2833f61	 add         r3, r3, #0x61, 30
  01338	e5933000	 ldr         r3, [r3]
  0133c	e3530000	 cmp         r3, #0
  01340	0a00000b	 beq         |$LN3@DeInitiali|

; 461  :         SetEvent(m_hUsbHubChangeEvent);

  01344	e59d3030	 ldr         r3, [sp, #0x30]
  01348	e2833f61	 add         r3, r3, #0x61, 30
  0134c	e5930000	 ldr         r0, [r3]
  01350	eb000000	 bl          SetEvent

; 462  :         CloseHandle (m_hUsbHubChangeEvent);

  01354	e59d3030	 ldr         r3, [sp, #0x30]
  01358	e2833f61	 add         r3, r3, #0x61, 30
  0135c	e5930000	 ldr         r0, [r3]
  01360	eb000000	 bl          CloseHandle

; 463  :         m_hUsbHubChangeEvent = NULL;

  01364	e59d3030	 ldr         r3, [sp, #0x30]
  01368	e2832f61	 add         r2, r3, #0x61, 30
  0136c	e3a03000	 mov         r3, #0
  01370	e5823000	 str         r3, [r2]
  01374		 |$LN3@DeInitiali|

; 464  :     }
; 465  : 
; 466  :     if (m_hUsbProcessingThread)

  01374	e59d3030	 ldr         r3, [sp, #0x30]
  01378	e2833d06	 add         r3, r3, #6, 26
  0137c	e5933000	 ldr         r3, [r3]
  01380	e3530000	 cmp         r3, #0
  01384	0a00002d	 beq         |$LN2@DeInitiali|

; 467  :     {
; 468  :         SetEvent(g_hUsbProcessingEvent);

  01388	e59f311c	 ldr         r3, [pc, #0x11C]
  0138c	e5930000	 ldr         r0, [r3]
  01390	eb000000	 bl          SetEvent

; 469  :         DWORD dwWaitReturn = WaitForSingleObject(m_hUsbProcessingThread, 5000);

  01394	e3a01c13	 mov         r1, #0x13, 24
  01398	e3811088	 orr         r1, r1, #0x88
  0139c	e59d3030	 ldr         r3, [sp, #0x30]
  013a0	e2833d06	 add         r3, r3, #6, 26
  013a4	e5930000	 ldr         r0, [r3]
  013a8	eb000000	 bl          WaitForSingleObject
  013ac	e58d001c	 str         r0, [sp, #0x1C]
  013b0	e59d301c	 ldr         r3, [sp, #0x1C]
  013b4	e58d3004	 str         r3, [sp, #4]

; 470  :         if ( dwWaitReturn != WAIT_OBJECT_0 )

  013b8	e59d3004	 ldr         r3, [sp, #4]
  013bc	e3530000	 cmp         r3, #0
  013c0	0a000010	 beq         |$LN1@DeInitiali|

; 471  :         {
; 472  :             DEBUGCHK( 0 );

  013c4	ea000002	 b           |$LN18@DeInitiali|
  013c8	e3a03001	 mov         r3, #1
  013cc	e58d3020	 str         r3, [sp, #0x20]
  013d0	ea000007	 b           |$LN19@DeInitiali|
  013d4		 |$LN18@DeInitiali|
  013d4	e3a03f76	 mov         r3, #0x76, 30
  013d8	e59f20d4	 ldr         r2, [pc, #0xD4]
  013dc	e59f10c4	 ldr         r1, [pc, #0xC4]
  013e0	e59f00c8	 ldr         r0, [pc, #0xC8]
  013e4	eb000000	 bl          NKDbgPrintfW
  013e8	e6000010	 __debugbreak_ce
  013ec	e3a03000	 mov         r3, #0
  013f0	e58d3020	 str         r3, [sp, #0x20]
  013f4		 |$LN19@DeInitiali|

; 473  : #pragma prefast(suppress:258, "If we reach this code proper thread termination was attempted, but failed. So clean up by force is the last resort.")
; 474  : #pragma warning(push)
; 475  : #pragma warning(disable: 6258)
; 476  :             TerminateThread(m_hUsbProcessingThread, DWORD(-1));

  013f4	e3e01000	 mvn         r1, #0
  013f8	e59d3030	 ldr         r3, [sp, #0x30]
  013fc	e2833d06	 add         r3, r3, #6, 26
  01400	e5930000	 ldr         r0, [r3]
  01404	eb000000	 bl          TerminateThread
  01408		 |$LN1@DeInitiali|

; 477  : #pragma warning(pop)
; 478  :         }
; 479  : 
; 480  :         CloseHandle(m_hUsbProcessingThread);

  01408	e59d3030	 ldr         r3, [sp, #0x30]
  0140c	e2833d06	 add         r3, r3, #6, 26
  01410	e5930000	 ldr         r0, [r3]
  01414	eb000000	 bl          CloseHandle

; 481  :         m_hUsbProcessingThread = NULL;

  01418	e59d3030	 ldr         r3, [sp, #0x30]
  0141c	e2832d06	 add         r2, r3, #6, 26
  01420	e3a03000	 mov         r3, #0
  01424	e5823000	 str         r3, [r2]

; 482  :         CloseHandle(g_hUsbProcessingEvent);

  01428	e59f307c	 ldr         r3, [pc, #0x7C]
  0142c	e5930000	 ldr         r0, [r3]
  01430	eb000000	 bl          CloseHandle

; 483  :         g_hUsbProcessingEvent = NULL;

  01434	e59f2070	 ldr         r2, [pc, #0x70]
  01438	e3a03000	 mov         r3, #0
  0143c	e5823000	 str         r3, [r2]
  01440		 |$LN2@DeInitiali|

; 484  :     }
; 485  : 
; 486  :     m_fUsbInterruptThreadClosing = FALSE;

  01440	e59d3030	 ldr         r3, [sp, #0x30]
  01444	e2832f62	 add         r2, r3, #0x62, 30
  01448	e3a03000	 mov         r3, #0
  0144c	e5823000	 str         r3, [r2]

; 487  :     m_wFrameHigh = 0;

  01450	e59d3030	 ldr         r3, [sp, #0x30]
  01454	e2832e17	 add         r2, r3, #0x17, 28
  01458	e3a03000	 mov         r3, #0
  0145c	e1c230b0	 strh        r3, [r2]

; 488  : 
; 489  : #ifdef MUSB_USEDMA
; 490  : 
; 491  :     // Deinitialize CPPI controller
; 492  :     m_dmaCrtl.Deinitialize();

  01460	e59d3030	 ldr         r3, [sp, #0x30]
  01464	e2830e33	 add         r0, r3, #0x33, 28
  01468	eb000000	 bl          |?Deinitialize@CCppiDmaController@@QAAXXZ|

; 493  : 
; 494  : #endif // MUSB_USEDMA
; 495  : 
; 496  :     DEBUGMSG( ZONE_INIT, (TEXT("-CHW::DeInitialize\r\n")));

  0146c	e59f3034	 ldr         r3, [pc, #0x34]
  01470	e5933440	 ldr         r3, [r3, #0x440]
  01474	e3130002	 tst         r3, #2
  01478	0a000004	 beq         |$LN20@DeInitiali|
  0147c	e59f0020	 ldr         r0, [pc, #0x20]
  01480	eb000000	 bl          NKDbgPrintfW
  01484	e3a03001	 mov         r3, #1
  01488	e58d3024	 str         r3, [sp, #0x24]
  0148c	ea000001	 b           |$LN21@DeInitiali|
  01490		 |$LN20@DeInitiali|
  01490	e3a03000	 mov         r3, #0
  01494	e58d3024	 str         r3, [sp, #0x24]
  01498		 |$LN21@DeInitiali|

; 497  : }

  01498	e28dd028	 add         sp, sp, #0x28
  0149c	e89d6000	 ldmia       sp, {sp, lr}
  014a0	e12fff1e	 bx          lr
  014a4		 |$LN25@DeInitiali|
  014a4		 |$LN26@DeInitiali|
  014a4	00000000	 DCD         |??_C@_1CK@LAJBPFEC@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  014a8		 |$LN27@DeInitiali|
  014a8	00000000	 DCD         |dpCurSettings|
  014ac		 |$LN28@DeInitiali|
  014ac	00000000	 DCD         |?g_hUsbProcessingEvent@@3PAXA|
  014b0		 |$LN29@DeInitiali|
  014b0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  014b4		 |$LN30@DeInitiali|
  014b4	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  014b8		 |$LN31@DeInitiali|
  014b8	00000000	 DCD         |??_C@_1FK@MOEIDJAN@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAe?$AAv?$AAe?$AAn?$AAt@|
  014bc		 |$LN32@DeInitiali|
  014bc	00000000	 DCD         |??_C@_1HO@LDAJLLMB@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?3?$AA?5?$AAm?$AA_?$AAh?$AAU?$AAs?$AAb?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@|
  014c0		 |$LN33@DeInitiali|
  014c0	00000000	 DCD         |??_C@_1CK@MAOGODKE@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAD?$AAe?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  014c4		 |$M43232|

			 ENDP  ; |?DeInitialize@CHW@@UAAXXZ|, CHW::DeInitialize

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T43249| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M43246|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M43247|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1DK@FFAMHNIM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@HLJNPNJC@?$AAU?$AAS?$AAB?$AAH?$AA?3?$AA?5?$AAD?$AAE?$AAV?$AAC?$AAT?$AAL?$AA?5?$AAV?$AAB?$AAU?$AAS?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@DAOPFKKH@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?EnterOperationalState@CHW@@QAAXXZ|	; CHW::EnterOperationalState
	IMPORT	|Sleep|
	IMPORT	|USBHPDD_PowerVBUS|

  00038			 AREA	 |.pdata|, PDATA
|$T43262| DCD	|$LN15@EnterOpera|
	DCD	0x40007204
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@FFAMHNIM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "E"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@HLJNPNJC@?$AAU?$AAS?$AAB?$AAH?$AA?3?$AA?5?$AAD?$AAE?$AAV?$AAC?$AAT?$AAL?$AA?5?$AAV?$AAB?$AAU?$AAS?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "H", 0x0, ":", 0x0, " ", 0x0, "D"
	DCB	0x0, "E", 0x0, "V", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, " "
	DCB	0x0, "V", 0x0, "B", 0x0, "U", 0x0, "S", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " ", 0x0, "t"
	DCB	0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@DAOPFKKH@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "E"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "r", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "a", 0x0, "l", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  014c4			 AREA	 |.text|, CODE, ARM

  014c4		 |?EnterOperationalState@CHW@@QAAXXZ| PROC ; CHW::EnterOperationalState

; 514  : {

  014c4		 |$LN15@EnterOpera|
  014c4	e1a0c00d	 mov         r12, sp
  014c8	e92d0001	 stmdb       sp!, {r0}
  014cc	e92d5000	 stmdb       sp!, {r12, lr}
  014d0	e24dd01c	 sub         sp, sp, #0x1C
  014d4		 |$M43259|

; 515  :     DEBUGMSG( ZONE_INIT, (TEXT("+CHW::EnterOperationalState\n")));

  014d4	e59f31a4	 ldr         r3, [pc, #0x1A4]
  014d8	e5933440	 ldr         r3, [r3, #0x440]
  014dc	e3130002	 tst         r3, #2
  014e0	0a000004	 beq         |$LN7@EnterOpera|
  014e4	e59f019c	 ldr         r0, [pc, #0x19C]
  014e8	eb000000	 bl          NKDbgPrintfW
  014ec	e3a03001	 mov         r3, #1
  014f0	e58d3008	 str         r3, [sp, #8]
  014f4	ea000001	 b           |$LN8@EnterOpera|
  014f8		 |$LN7@EnterOpera|
  014f8	e3a03000	 mov         r3, #0
  014fc	e58d3008	 str         r3, [sp, #8]
  01500		 |$LN8@EnterOpera|

; 516  : 
; 517  :     // Enable non-iso interrupts in CRTL register.
; 518  :     //WRITE_PORT_UCHAR( (m_portBase+USB_CTRL_REG_OFFSET), BIT3);
; 519  : 
; 520  :     // Enable interrupts in USBINTE (apart from SOF)
; 521  :     WRITE_PORT_UCHAR( (m_portBase+USB_INTRUSBE_REG_OFFSET), 0xf7);

  01500	e59d3024	 ldr         r3, [sp, #0x24]
  01504	e2833f52	 add         r3, r3, #0x52, 30
  01508	e5933000	 ldr         r3, [r3]
  0150c	e2833b01	 add         r3, r3, #1, 22
  01510	e283200b	 add         r2, r3, #0xB
  01514	e3a030f7	 mov         r3, #0xF7
  01518	e5c23000	 strb        r3, [r2]

; 522  : 
; 523  :     // set TESTMODE reg to 0
; 524  :     WRITE_PORT_UCHAR( (m_portBase+USB_TESTMODE_REG_OFFSET), 0);

  0151c	e59d3024	 ldr         r3, [sp, #0x24]
  01520	e2833f52	 add         r3, r3, #0x52, 30
  01524	e5933000	 ldr         r3, [r3]
  01528	e2833b01	 add         r3, r3, #1, 22
  0152c	e283200f	 add         r2, r3, #0xF
  01530	e3a03000	 mov         r3, #0
  01534	e5c23000	 strb        r3, [r2]

; 525  : 
; 526  : #ifdef NO_HIGHSPEED
; 527  :     // no HS
; 528  :     WRITE_PORT_UCHAR( (m_portBase+USB_POWER_REG_OFFSET), BIT0);
; 529  : #else
; 530  :     // Enable HS
; 531  :     WRITE_PORT_UCHAR( (m_portBase+USB_POWER_REG_OFFSET), BIT0|BIT5);

  01538	e59d3024	 ldr         r3, [sp, #0x24]
  0153c	e2833f52	 add         r3, r3, #0x52, 30
  01540	e5933000	 ldr         r3, [r3]
  01544	e2833b01	 add         r3, r3, #1, 22
  01548	e2832001	 add         r2, r3, #1
  0154c	e3a03021	 mov         r3, #0x21
  01550	e5c23000	 strb        r3, [r2]

; 532  : #endif
; 533  : 
; 534  :     // VBUS power on
; 535  :     USBHPDD_PowerVBUS(TRUE);

  01554	e3a00001	 mov         r0, #1
  01558	eb000000	 bl          USBHPDD_PowerVBUS

; 536  : 
; 537  :     // Wait for VBUS power to settle - DEVCTL[3-4] bits
; 538  :     DWORD dwTimeout = GetTickCount() + 2000;

  0155c	eb000000	 bl          GetTickCount
  01560	e58d000c	 str         r0, [sp, #0xC]
  01564	e59d300c	 ldr         r3, [sp, #0xC]
  01568	e2833e7d	 add         r3, r3, #0x7D, 28
  0156c	e58d3000	 str         r3, [sp]
  01570		 |$LN4@EnterOpera|

; 539  :     for(;;)
; 540  :     {
; 541  :         volatile UINT8 test = READ_PORT_UCHAR((m_portBase+USB_DEVCTL_REG_OFFSET));

  01570	e59d3024	 ldr         r3, [sp, #0x24]
  01574	e2833f52	 add         r3, r3, #0x52, 30
  01578	e5933000	 ldr         r3, [r3]
  0157c	e2833e46	 add         r3, r3, #0x46, 28
  01580	e5d33000	 ldrb        r3, [r3]
  01584	e5cd3004	 strb        r3, [sp, #4]

; 542  : 
; 543  :         if ((test & (BIT3 | BIT4)) == (BIT3 | BIT4))

  01588	e5dd3004	 ldrb        r3, [sp, #4]
  0158c	e2033018	 and         r3, r3, #0x18
  01590	e3530018	 cmp         r3, #0x18
  01594	1a000000	 bne         |$LN2@EnterOpera|

; 544  :             break;

  01598	ea000010	 b           |$LN3@EnterOpera|
  0159c		 |$LN2@EnterOpera|

; 545  : 
; 546  :         if (GetTickCount() > dwTimeout)

  0159c	eb000000	 bl          GetTickCount
  015a0	e58d0010	 str         r0, [sp, #0x10]
  015a4	e59d2010	 ldr         r2, [sp, #0x10]
  015a8	e59d3000	 ldr         r3, [sp]
  015ac	e1520003	 cmp         r2, r3
  015b0	9a000007	 bls         |$LN1@EnterOpera|

; 547  :         {
; 548  :             RETAILMSG(1, (L"USBH: DEVCTL VBUS ready timeout!\r\n"));

  015b4	e59f00c8	 ldr         r0, [pc, #0xC8]
  015b8	eb000000	 bl          NKDbgPrintfW
  015bc	e3a03001	 mov         r3, #1
  015c0	e58d3014	 str         r3, [sp, #0x14]
  015c4	ea000001	 b           |$LN10@EnterOpera|
  015c8	e3a03000	 mov         r3, #0
  015cc	e58d3014	 str         r3, [sp, #0x14]
  015d0		 |$LN10@EnterOpera|

; 549  :             break;

  015d0	ea000002	 b           |$LN3@EnterOpera|
  015d4		 |$LN1@EnterOpera|

; 550  :         }
; 551  : 
; 552  :         Sleep(10);

  015d4	e3a0000a	 mov         r0, #0xA
  015d8	eb000000	 bl          Sleep

; 553  :     }

  015dc	eaffffe3	 b           |$LN4@EnterOpera|
  015e0		 |$LN3@EnterOpera|

; 554  : 
; 555  :     // Clear any VBUS error due to power up
; 556  :     // WRITE_PORT_ULONG( (m_portBase+USB_INTCLRR_REG_OFFSET), 0x80 << CSL_USB_INTMSKR_USB_SHIFT);
; 557  : 
; 558  :     // Enable interrupts
; 559  :     WRITE_PORT_ULONG( (m_portBase+USB_EP_INTMSKSETR_REG_OFFSET),
; 560  :                       USB_OTG_TXINT_MASK |
; 561  :                       USB_OTG_RXINT_MASK );

  015e0	e59d3024	 ldr         r3, [sp, #0x24]
  015e4	e2833f52	 add         r3, r3, #0x52, 30
  015e8	e5933000	 ldr         r3, [r3]
  015ec	e2832030	 add         r2, r3, #0x30
  015f0	e3e03801	 mvn         r3, #1, 16
  015f4	e5823000	 str         r3, [r2]

; 562  :     WRITE_PORT_ULONG( (m_portBase+USB_CORE_INTMSKSETR_REG_OFFSET),
; 563  :                       USB_OTG_USBINT_MASK );

  015f8	e59d3024	 ldr         r3, [sp, #0x24]
  015fc	e2833f52	 add         r3, r3, #0x52, 30
  01600	e5933000	 ldr         r3, [r3]
  01604	e2832050	 add         r2, r3, #0x50
  01608	e3a0377f	 mov         r3, #0x7F, 14
  0160c	e3833803	 orr         r3, r3, #3, 16
  01610	e5823000	 str         r3, [r2]

; 564  : 
; 565  :     // SOF is enabled only when required
; 566  :     WRITE_PORT_ULONG( (m_portBase+USB_CORE_INTMSKCLRR_REG_OFFSET),
; 567  :                       CSL_USB_INTRUSB_SOF_MASK << CSL_USB_INTMSKR_USB_SHIFT);

  01614	e59d3024	 ldr         r3, [sp, #0x24]
  01618	e2833f52	 add         r3, r3, #0x52, 30
  0161c	e5933000	 ldr         r3, [r3]
  01620	e2832054	 add         r2, r3, #0x54
  01624	e3a03702	 mov         r3, #2, 14
  01628	e5823000	 str         r3, [r2]

; 568  : 
; 569  :     // start session in dev control register
; 570  :     WRITE_PORT_UCHAR( (m_portBase+USB_DEVCTL_REG_OFFSET), BIT0);

  0162c	e59d3024	 ldr         r3, [sp, #0x24]
  01630	e2833f52	 add         r3, r3, #0x52, 30
  01634	e5933000	 ldr         r3, [r3]
  01638	e2832e46	 add         r2, r3, #0x46, 28
  0163c	e3a03001	 mov         r3, #1
  01640	e5c23000	 strb        r3, [r2]

; 571  : 
; 572  :     DEBUGMSG( ZONE_INIT, (TEXT("-CHW::EnterOperationalState\n")));

  01644	e59f3034	 ldr         r3, [pc, #0x34]
  01648	e5933440	 ldr         r3, [r3, #0x440]
  0164c	e3130002	 tst         r3, #2
  01650	0a000004	 beq         |$LN11@EnterOpera|
  01654	e59f0020	 ldr         r0, [pc, #0x20]
  01658	eb000000	 bl          NKDbgPrintfW
  0165c	e3a03001	 mov         r3, #1
  01660	e58d3018	 str         r3, [sp, #0x18]
  01664	ea000001	 b           |$LN12@EnterOpera|
  01668		 |$LN11@EnterOpera|
  01668	e3a03000	 mov         r3, #0
  0166c	e58d3018	 str         r3, [sp, #0x18]
  01670		 |$LN12@EnterOpera|

; 573  : }

  01670	e28dd01c	 add         sp, sp, #0x1C
  01674	e89d6000	 ldmia       sp, {sp, lr}
  01678	e12fff1e	 bx          lr
  0167c		 |$LN16@EnterOpera|
  0167c		 |$LN17@EnterOpera|
  0167c	00000000	 DCD         |??_C@_1DK@FFAMHNIM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@|
  01680		 |$LN18@EnterOpera|
  01680	00000000	 DCD         |dpCurSettings|
  01684		 |$LN19@EnterOpera|
  01684	00000000	 DCD         |??_C@_1EG@HLJNPNJC@?$AAU?$AAS?$AAB?$AAH?$AA?3?$AA?5?$AAD?$AAE?$AAV?$AAC?$AAT?$AAL?$AA?5?$AAV?$AAB?$AAU?$AAS?$AA?5?$AAr?$AAe?$AAa?$AAd?$AAy?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$CB@|
  01688		 |$LN20@EnterOpera|
  01688	00000000	 DCD         |??_C@_1DK@DAOPFKKH@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAE?$AAn?$AAt?$AAe?$AAr?$AAO?$AAp?$AAe?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AAa?$AAl?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?6?$AA?$AA@|
  0168c		 |$M43260|

			 ENDP  ; |?EnterOperationalState@CHW@@QAAXXZ|, CHW::EnterOperationalState

	EXPORT	|??_C@_1DE@NJKMHBMF@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAt?$AAo?$AAp?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@HGHHHPKK@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAt?$AAo?$AAp?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?StopHostController@CHW@@QAAXXZ|	; CHW::StopHostController

  00040			 AREA	 |.pdata|, PDATA
|$T43276| DCD	|$LN9@StopHostCo|
	DCD	0x40003604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@NJKMHBMF@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAt?$AAo?$AAp?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "S"
	DCB	0x0, "t", 0x0, "o", 0x0, "p", 0x0, "H", 0x0, "o", 0x0, "s"
	DCB	0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@HGHHHPKK@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAt?$AAo?$AAp?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "S"
	DCB	0x0, "t", 0x0, "o", 0x0, "p", 0x0, "H", 0x0, "o", 0x0, "s"
	DCB	0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0168c			 AREA	 |.text|, CODE, ARM

  0168c		 |?StopHostController@CHW@@QAAXXZ| PROC	; CHW::StopHostController

; 589  : {

  0168c		 |$LN9@StopHostCo|
  0168c	e1a0c00d	 mov         r12, sp
  01690	e92d0001	 stmdb       sp!, {r0}
  01694	e92d5000	 stmdb       sp!, {r12, lr}
  01698	e24dd008	 sub         sp, sp, #8
  0169c		 |$M43273|

; 590  :     DEBUGMSG( ZONE_INIT, (TEXT("+CHW::StopHostController\n")));

  0169c	e59f30b8	 ldr         r3, [pc, #0xB8]
  016a0	e5933440	 ldr         r3, [r3, #0x440]
  016a4	e3130002	 tst         r3, #2
  016a8	0a000004	 beq         |$LN3@StopHostCo|
  016ac	e59f00ac	 ldr         r0, [pc, #0xAC]
  016b0	eb000000	 bl          NKDbgPrintfW
  016b4	e3a03001	 mov         r3, #1
  016b8	e58d3000	 str         r3, [sp]
  016bc	ea000001	 b           |$LN4@StopHostCo|
  016c0		 |$LN3@StopHostCo|
  016c0	e3a03000	 mov         r3, #0
  016c4	e58d3000	 str         r3, [sp]
  016c8		 |$LN4@StopHostCo|

; 591  : 
; 592  :     // Disable interrupts in USBINTE
; 593  :     WRITE_PORT_UCHAR( (m_portBase+USB_INTRUSBE_REG_OFFSET), 0);

  016c8	e59d3010	 ldr         r3, [sp, #0x10]
  016cc	e2833f52	 add         r3, r3, #0x52, 30
  016d0	e5933000	 ldr         r3, [r3]
  016d4	e2833b01	 add         r3, r3, #1, 22
  016d8	e283200b	 add         r2, r3, #0xB
  016dc	e3a03000	 mov         r3, #0
  016e0	e5c23000	 strb        r3, [r2]

; 594  : 
; 595  :     // Disable interrupts
; 596  :     WRITE_PORT_ULONG( (m_portBase+USB_EP_INTMSKCLRR_REG_OFFSET),
; 597  :                       USB_OTG_TXINT_MASK |
; 598  :                       USB_OTG_RXINT_MASK );

  016e4	e59d3010	 ldr         r3, [sp, #0x10]
  016e8	e2833f52	 add         r3, r3, #0x52, 30
  016ec	e5933000	 ldr         r3, [r3]
  016f0	e2832034	 add         r2, r3, #0x34
  016f4	e3e03801	 mvn         r3, #1, 16
  016f8	e5823000	 str         r3, [r2]

; 599  :     WRITE_PORT_ULONG( (m_portBase+USB_CORE_INTMSKCLRR_REG_OFFSET),
; 600  :                       USB_OTG_USBINT_MASK );

  016fc	e59d3010	 ldr         r3, [sp, #0x10]
  01700	e2833f52	 add         r3, r3, #0x52, 30
  01704	e5933000	 ldr         r3, [r3]
  01708	e2832054	 add         r2, r3, #0x54
  0170c	e3a0377f	 mov         r3, #0x7F, 14
  01710	e3833803	 orr         r3, r3, #3, 16
  01714	e5823000	 str         r3, [r2]

; 601  :     
; 602  :     // Remove power
; 603  :     USBHPDD_PowerVBUS(FALSE);

  01718	e3a00000	 mov         r0, #0
  0171c	eb000000	 bl          USBHPDD_PowerVBUS

; 604  : 
; 605  :     DEBUGMSG( ZONE_INIT, (TEXT("-CHW::StopHostController\n")));

  01720	e59f3034	 ldr         r3, [pc, #0x34]
  01724	e5933440	 ldr         r3, [r3, #0x440]
  01728	e3130002	 tst         r3, #2
  0172c	0a000004	 beq         |$LN5@StopHostCo|
  01730	e59f0020	 ldr         r0, [pc, #0x20]
  01734	eb000000	 bl          NKDbgPrintfW
  01738	e3a03001	 mov         r3, #1
  0173c	e58d3004	 str         r3, [sp, #4]
  01740	ea000001	 b           |$LN6@StopHostCo|
  01744		 |$LN5@StopHostCo|
  01744	e3a03000	 mov         r3, #0
  01748	e58d3004	 str         r3, [sp, #4]
  0174c		 |$LN6@StopHostCo|

; 606  : }

  0174c	e28dd008	 add         sp, sp, #8
  01750	e89d6000	 ldmia       sp, {sp, lr}
  01754	e12fff1e	 bx          lr
  01758		 |$LN10@StopHostCo|
  01758		 |$LN11@StopHostCo|
  01758	00000000	 DCD         |??_C@_1DE@NJKMHBMF@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAt?$AAo?$AAp?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?6?$AA?$AA@|
  0175c		 |$LN12@StopHostCo|
  0175c	00000000	 DCD         |dpCurSettings|
  01760		 |$LN13@StopHostCo|
  01760	00000000	 DCD         |??_C@_1DE@HGHHHPKK@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAS?$AAt?$AAo?$AAp?$AAH?$AAo?$AAs?$AAt?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?6?$AA?$AA@|
  01764		 |$M43274|

			 ENDP  ; |?StopHostController@CHW@@QAAXXZ|, CHW::StopHostController

	EXPORT	|??_C@_1DE@DHFIICJL@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@PGBAFNJ@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAu?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@BCDGKHCO@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SetInterruptEvent|

  00048			 AREA	 |.pdata|, PDATA
|$T43291| DCD	|$LN14@PowerMgmtC|
	DCD	0x40005004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@DHFIICJL@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?6?$AA?$AN?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "P"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M", 0x0, "g"
	DCB	0x0, "m", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, 0xa, 0x0, 0xd
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@PGBAFNJ@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAu?$AAs@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "P", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M", 0x0, "g", 0x0, "m"
	DCB	0x0, "t", 0x0, "C", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "b"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, ":", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "u"
	DCB	0x0, "s", 0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m"
	DCB	0x0, "b", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, " ", 0x0, "w", 0x0, "h", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "`", 0x0, "t", 0x0, "h"
	DCB	0x0, "i", 0x0, "s", 0x0, "'", 0x0, " ", 0x0, "i", 0x0, "s"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@BCDGKHCO@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?6?$AA?$AN?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "P"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "M", 0x0, "g"
	DCB	0x0, "m", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01764			 AREA	 |.text|, CODE, ARM

  01764		 |?PowerMgmtCallback@CHW@@UAAXH@Z| PROC	; CHW::PowerMgmtCallback

; 621  : {

  01764		 |$LN14@PowerMgmtC|
  01764	e1a0c00d	 mov         r12, sp
  01768	e92d0003	 stmdb       sp!, {r0, r1}
  0176c	e92d5000	 stmdb       sp!, {r12, lr}
  01770	e24dd00c	 sub         sp, sp, #0xC
  01774		 |$M43288|

; 622  :     DEBUGMSG(ZONE_INIT && ZONE_VERBOSE, (TEXT("+CHW::PowerMgmtCallback(%d)\n\r"), fOff));

  01774	e59f311c	 ldr         r3, [pc, #0x11C]
  01778	e5933440	 ldr         r3, [r3, #0x440]
  0177c	e3130002	 tst         r3, #2
  01780	0a000009	 beq         |$LN6@PowerMgmtC|
  01784	e59f310c	 ldr         r3, [pc, #0x10C]
  01788	e5933440	 ldr         r3, [r3, #0x440]
  0178c	e3130a01	 tst         r3, #1, 20
  01790	0a000005	 beq         |$LN6@PowerMgmtC|
  01794	e59d1018	 ldr         r1, [sp, #0x18]
  01798	e59f0100	 ldr         r0, [pc, #0x100]
  0179c	eb000000	 bl          NKDbgPrintfW
  017a0	e3a03001	 mov         r3, #1
  017a4	e58d3000	 str         r3, [sp]
  017a8	ea000001	 b           |$LN7@PowerMgmtC|
  017ac		 |$LN6@PowerMgmtC|
  017ac	e3a03000	 mov         r3, #0
  017b0	e58d3000	 str         r3, [sp]
  017b4		 |$LN7@PowerMgmtC|

; 623  : 
; 624  :     if ( fOff )

  017b4	e59d3018	 ldr         r3, [sp, #0x18]
  017b8	e3530000	 cmp         r3, #0
  017bc	0a000006	 beq         |$LN3@PowerMgmtC|

; 625  :     {   
; 626  : 		// suspending...
; 627  : 		m_fPowerResuming = FALSE;

  017c0	e59d3014	 ldr         r3, [sp, #0x14]
  017c4	e2832f66	 add         r2, r3, #0x66, 30
  017c8	e3a03000	 mov         r3, #0
  017cc	e5823000	 str         r3, [r2]

; 628  :         StopHostController();

  017d0	e59d0014	 ldr         r0, [sp, #0x14]
  017d4	eb000000	 bl          |?StopHostController@CHW@@QAAXXZ|

; 629  :     }
; 630  :     else

  017d8	ea00001b	 b           |$LN2@PowerMgmtC|
  017dc		 |$LN3@PowerMgmtC|

; 631  :     {   // resuming...
; 632  :         m_fPowerUpFlag = TRUE;

  017dc	e59d3014	 ldr         r3, [sp, #0x14]
  017e0	e2832f65	 add         r2, r3, #0x65, 30
  017e4	e3a03001	 mov         r3, #1
  017e8	e5823000	 str         r3, [r2]

; 633  :         if (!m_fPowerResuming)

  017ec	e59d3014	 ldr         r3, [sp, #0x14]
  017f0	e2833f66	 add         r3, r3, #0x66, 30
  017f4	e5933000	 ldr         r3, [r3]
  017f8	e3530000	 cmp         r3, #0
  017fc	1a000012	 bne         |$LN1@PowerMgmtC|

; 634  :         {
; 635  :             // can't use member data while `this' is invalid
; 636  :             DEBUGMSG(ZONE_INIT && ZONE_VERBOSE, (TEXT("CHW::PowerMgmtCallback: can't use member data while `this' is invalid\n\r")));

  01800	e59f3090	 ldr         r3, [pc, #0x90]
  01804	e5933440	 ldr         r3, [r3, #0x440]
  01808	e3130002	 tst         r3, #2
  0180c	0a000008	 beq         |$LN8@PowerMgmtC|
  01810	e59f3080	 ldr         r3, [pc, #0x80]
  01814	e5933440	 ldr         r3, [r3, #0x440]
  01818	e3130a01	 tst         r3, #1, 20
  0181c	0a000004	 beq         |$LN8@PowerMgmtC|
  01820	e59f0074	 ldr         r0, [pc, #0x74]
  01824	eb000000	 bl          NKDbgPrintfW
  01828	e3a03001	 mov         r3, #1
  0182c	e58d3004	 str         r3, [sp, #4]
  01830	ea000001	 b           |$LN9@PowerMgmtC|
  01834		 |$LN8@PowerMgmtC|
  01834	e3a03000	 mov         r3, #0
  01838	e58d3004	 str         r3, [sp, #4]
  0183c		 |$LN9@PowerMgmtC|

; 637  :             SetInterruptEvent(m_dwSysIntr);

  0183c	e59d3014	 ldr         r3, [sp, #0x14]
  01840	e2833f5d	 add         r3, r3, #0x5D, 30
  01844	e5930000	 ldr         r0, [r3]
  01848	eb000000	 bl          SetInterruptEvent
  0184c		 |$LN1@PowerMgmtC|
  0184c		 |$LN2@PowerMgmtC|

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     DEBUGMSG(ZONE_INIT && ZONE_VERBOSE, (TEXT("-CHW::PowerMgmtCallback\n\r")));

  0184c	e59f3044	 ldr         r3, [pc, #0x44]
  01850	e5933440	 ldr         r3, [r3, #0x440]
  01854	e3130002	 tst         r3, #2
  01858	0a000008	 beq         |$LN10@PowerMgmtC|
  0185c	e59f3034	 ldr         r3, [pc, #0x34]
  01860	e5933440	 ldr         r3, [r3, #0x440]
  01864	e3130a01	 tst         r3, #1, 20
  01868	0a000004	 beq         |$LN10@PowerMgmtC|
  0186c	e59f0020	 ldr         r0, [pc, #0x20]
  01870	eb000000	 bl          NKDbgPrintfW
  01874	e3a03001	 mov         r3, #1
  01878	e58d3008	 str         r3, [sp, #8]
  0187c	ea000001	 b           |$LN11@PowerMgmtC|
  01880		 |$LN10@PowerMgmtC|
  01880	e3a03000	 mov         r3, #0
  01884	e58d3008	 str         r3, [sp, #8]
  01888		 |$LN11@PowerMgmtC|

; 642  :     return;
; 643  : }

  01888	e28dd00c	 add         sp, sp, #0xC
  0188c	e89d6000	 ldmia       sp, {sp, lr}
  01890	e12fff1e	 bx          lr
  01894		 |$LN15@PowerMgmtC|
  01894		 |$LN16@PowerMgmtC|
  01894	00000000	 DCD         |??_C@_1DE@DHFIICJL@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?6?$AA?$AN?$AA?$AA@|
  01898		 |$LN17@PowerMgmtC|
  01898	00000000	 DCD         |dpCurSettings|
  0189c		 |$LN18@PowerMgmtC|
  0189c	00000000	 DCD         |??_C@_1JA@PGBAFNJ@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3?$AA?5?$AAc?$AAa?$AAn?$AA?8?$AAt?$AA?5?$AAu?$AAs@|
  018a0		 |$LN19@PowerMgmtC|
  018a0	00000000	 DCD         |??_C@_1DM@BCDGKHCO@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAP?$AAo?$AAw?$AAe?$AAr?$AAM?$AAg?$AAm?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?6?$AA?$AN?$AA?$AA@|
  018a4		 |$M43289|

			 ENDP  ; |?PowerMgmtCallback@CHW@@UAAXH@Z|, CHW::PowerMgmtCallback

	EXPORT	|?UsbInterruptThread@CHW@@AAAKPAX@Z|	; CHW::UsbInterruptThread

  00050			 AREA	 |.pdata|, PDATA
|$T43302| DCD	|$LN5@UsbInterru|
	DCD	0x40000e04
; Function compile flags: /Odtp

  018a4			 AREA	 |.text|, CODE, ARM

  018a4		 |?UsbInterruptThreadStub@CHW@@CAKPAX@Z| PROC ; CHW::UsbInterruptThreadStub

; 647  : {

  018a4		 |$LN5@UsbInterru|
  018a4	e1a0c00d	 mov         r12, sp
  018a8	e92d0001	 stmdb       sp!, {r0}
  018ac	e92d5000	 stmdb       sp!, {r12, lr}
  018b0	e24dd008	 sub         sp, sp, #8
  018b4		 |$M43299|

; 648  :     return ((CHW *)context)->UsbInterruptThread(context);

  018b4	e59d1010	 ldr         r1, [sp, #0x10]
  018b8	e59d0010	 ldr         r0, [sp, #0x10]
  018bc	eb000000	 bl          |?UsbInterruptThread@CHW@@AAAKPAX@Z|
  018c0	e58d0004	 str         r0, [sp, #4]
  018c4	e59d3004	 ldr         r3, [sp, #4]
  018c8	e58d3000	 str         r3, [sp]

; 649  : }

  018cc	e59d0000	 ldr         r0, [sp]
  018d0	e28dd008	 add         sp, sp, #8
  018d4	e89d6000	 ldmia       sp, {sp, lr}
  018d8	e12fff1e	 bx          lr
  018dc		 |$M43300|

			 ENDP  ; |?UsbInterruptThreadStub@CHW@@CAKPAX@Z|, CHW::UsbInterruptThreadStub

	EXPORT	|??_C@_1DE@KLPCCKKC@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?UnlockProcessingThread@CHW@@QAAXXZ|	; CHW::UnlockProcessingThread
	EXPORT	|??_C@_1CG@HANODHMK@?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAT?$AAX?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@BEDPNNNI@?$AAh?$AAo?$AAs?$AAt?$AAE?$AAP?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAH?$AAO?$AAS?$AAT?$AA_?$AAR?$AAX?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@EPINBLKK@?$AA4?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@MHJGIIDL@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AAO?$AAU?$AAT?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@HOJFCMNN@?$AA3?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@NENBPOFC@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AAI?$AAN?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@PPLAEJPK@?$AA2?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@FPGAPOOI@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAD?$AAA?$AAT?$AAA?$AAO?$AAU?$AAT?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@KHKOOANC@?$AA1?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@DGBNBKKB@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAD?$AAA?$AAT?$AAA?$AAI?$AAN?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@OGIMLNFC@?$AAI?$AAN?$AAC?$AAT?$AAL?$AA?9?$AAN?$AAR?$AAD?$AAY?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@JFEALIHC@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@KJEIHILO@?$AAU?$AAS?$AAB?$AAH?$AA?3?$AA?5?$AAV?$AAB?$AAU?$AAS?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AA?9?$AA?5?$AAr?$AAe?$AAs?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@KOKNPNHF@?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAU?$AAs?$AAb?$AAV?$AAa?$AAl?$AAu?$AAe@| [ DATA ] ; `string'
	EXPORT	|?LockProcessingThread@CHW@@QAAXXZ|	; CHW::LockProcessingThread
	EXPORT	|??_C@_1II@MCJCLEKF@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAs?$AAb?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|?CeResumeThreadStub@CHW@@CAKPAX@Z|	; CHW::CeResumeThreadStub
	EXPORT	|??_C@_1DG@LADNJBCG@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|InterruptDone|
	IMPORT	|?OnCompletionEvent@CCppiDmaController@@IAAXXZ| ; CCppiDmaController::OnCompletionEvent
	IMPORT	|HcdPdd_InitiatePowerUp|

  00058			 AREA	 |.pdata|, PDATA
|$T43352| DCD	|$LN136@UsbInterru@2|
	DCD	0x40058404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@KLPCCKKC@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@HANODHMK@?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAT?$AAX?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| DCB "_"
	DCB	0x0, "H", 0x0, "O", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "T"
	DCB	0x0, "X", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BEDPNNNI@?$AAh?$AAo?$AAs?$AAt?$AAE?$AAP?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAH?$AAO?$AAS?$AAT?$AA_?$AAR?$AAX?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| DCB "h"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, "E", 0x0, "P", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "H", 0x0, "O"
	DCB	0x0, "S", 0x0, "T", 0x0, "_", 0x0, "R", 0x0, "X", 0x0, "C"
	DCB	0x0, "S", 0x0, "R", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@EPINBLKK@?$AA4?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "4"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@MHJGIIDL@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AAO?$AAU?$AAT?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "S"
	DCB	0x0, "T", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "_", 0x0, "S"
	DCB	0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U", 0x0, "S", 0x0, "O"
	DCB	0x0, "U", 0x0, "T", 0x0, ":", 0x0, "_", 0x0, "H", 0x0, "O"
	DCB	0x0, "S", 0x0, "T", 0x0, "_", 0x0, "C", 0x0, "S", 0x0, "R"
	DCB	0x0, "0", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@HOJFCMNN@?$AA3?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "3"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@NENBPOFC@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AAI?$AAN?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@| DCB "S"
	DCB	0x0, "T", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "_", 0x0, "S"
	DCB	0x0, "T", 0x0, "A", 0x0, "T", 0x0, "U", 0x0, "S", 0x0, "I"
	DCB	0x0, "N", 0x0, ":", 0x0, "_", 0x0, "H", 0x0, "O", 0x0, "S"
	DCB	0x0, "T", 0x0, "_", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, "0"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@PPLAEJPK@?$AA2?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "2"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@FPGAPOOI@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAD?$AAA?$AAT?$AAA?$AAO?$AAU?$AAT?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| DCB "S"
	DCB	0x0, "T", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "_", 0x0, "D"
	DCB	0x0, "A", 0x0, "T", 0x0, "A", 0x0, "O", 0x0, "U", 0x0, "T"
	DCB	0x0, ":", 0x0, "_", 0x0, "H", 0x0, "O", 0x0, "S", 0x0, "T"
	DCB	0x0, "_", 0x0, "C", 0x0, "S", 0x0, "R", 0x0, "0", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@KHKOOANC@?$AA1?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "1"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@DGBNBKKB@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAD?$AAA?$AAT?$AAA?$AAI?$AAN?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| DCB "S"
	DCB	0x0, "T", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "_", 0x0, "D"
	DCB	0x0, "A", 0x0, "T", 0x0, "A", 0x0, "I", 0x0, "N", 0x0, ":"
	DCB	0x0, "_", 0x0, "H", 0x0, "O", 0x0, "S", 0x0, "T", 0x0, "_"
	DCB	0x0, "C", 0x0, "S", 0x0, "R", 0x0, "0", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@OGIMLNFC@?$AAI?$AAN?$AAC?$AAT?$AAL?$AA?9?$AAN?$AAR?$AAD?$AAY?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "N", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "-", 0x0, "N"
	DCB	0x0, "R", 0x0, "D", 0x0, "Y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@JFEALIHC@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@| DCB "S"
	DCB	0x0, "T", 0x0, "A", 0x0, "G", 0x0, "E", 0x0, "_", 0x0, "S"
	DCB	0x0, "E", 0x0, "T", 0x0, "U", 0x0, "P", 0x0, ":", 0x0, "_"
	DCB	0x0, "H", 0x0, "O", 0x0, "S", 0x0, "T", 0x0, "_", 0x0, "C"
	DCB	0x0, "S", 0x0, "R", 0x0, "0", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@KJEIHILO@?$AAU?$AAS?$AAB?$AAH?$AA?3?$AA?5?$AAV?$AAB?$AAU?$AAS?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AA?9?$AA?5?$AAr?$AAe?$AAs?$AAe@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "H", 0x0, ":", 0x0, " ", 0x0, "V"
	DCB	0x0, "B", 0x0, "U", 0x0, "S", 0x0, " ", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@KOKNPNHF@?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAU?$AAs?$AAb?$AAV?$AAa?$AAl?$AAu?$AAe@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "U"
	DCB	0x0, "s", 0x0, "b", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, "u"
	DCB	0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "R", 0x0, "x", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, "u"
	DCB	0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "T", 0x0, "x", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, "u"
	DCB	0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@MCJCLEKF@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAs?$AAb?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "T", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, "C", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "m", 0x0, "e"
	DCB	0x0, ";", 0x0, " ", 0x0, "s", 0x0, "l", 0x0, "e", 0x0, "e"
	DCB	0x0, "p", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, ".", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@LADNJBCG@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "T"
	DCB	0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xa
	DCB	0x0, 0xd, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  018dc			 AREA	 |.text|, CODE, ARM

  018dc		 |?UsbInterruptThread@CHW@@AAAKPAX@Z| PROC ; CHW::UsbInterruptThread

; 665  : {

  018dc		 |$LN136@UsbInterru@2|
  018dc	e1a0c00d	 mov         r12, sp
  018e0	e92d0003	 stmdb       sp!, {r0, r1}
  018e4	e92d5000	 stmdb       sp!, {r12, lr}
  018e8	e24dd0a0	 sub         sp, sp, #0xA0
  018ec		 |$M43349|

; 666  :     UINT16 IntrUsbValue;
; 667  :     UINT8  IntrTxValue;
; 668  :     UINT8  IntrRxValue;
; 669  :     DWORD  CoreIntStatus;
; 670  : 	DWORD  EpIntStatus;
; 671  :     UINT16 _HOST_CSR0, _HOST_RXCSR, _HOST_TXCSR, _RXCOUNT, _COUNT0;
; 672  :     DWORD CopyCount;
; 673  :     UINT8 *pPkt, *pData, RequestType, Reg, bShift;
; 674  :     USBTD *pTD;
; 675  :     USBED *pED;
; 676  : 
; 677  : 	UNREFERENCED_PARAMETER(context);
; 678  : 
; 679  :     DEBUGMSG(ZONE_INIT && ZONE_VERBOSE, (TEXT("+CHW::USBInterruptThread\n\r")));

  018ec	e59f32a4	 ldr         r3, [pc, #0x2A4]
  018f0	e5933440	 ldr         r3, [r3, #0x440]
  018f4	e3130002	 tst         r3, #2
  018f8	0a000008	 beq         |$LN92@UsbInterru@2|
  018fc	e59f3294	 ldr         r3, [pc, #0x294]
  01900	e5933440	 ldr         r3, [r3, #0x440]
  01904	e3130a01	 tst         r3, #1, 20
  01908	0a000004	 beq         |$LN92@UsbInterru@2|
  0190c	e59f0294	 ldr         r0, [pc, #0x294]
  01910	eb000000	 bl          NKDbgPrintfW
  01914	e3a03001	 mov         r3, #1
  01918	e58d3054	 str         r3, [sp, #0x54]
  0191c	ea000001	 b           |$LN93@UsbInterru@2|
  01920		 |$LN92@UsbInterru@2|
  01920	e3a03000	 mov         r3, #0
  01924	e58d3054	 str         r3, [sp, #0x54]
  01928		 |$LN93@UsbInterru@2|
  01928		 |$LN126@UsbInterru@2|
  01928		 |$LN89@UsbInterru@2|

; 680  : 
; 681  :     while ( !m_fUsbInterruptThreadClosing ) {

  01928	e59d30a8	 ldr         r3, [sp, #0xA8]
  0192c	e2833f62	 add         r3, r3, #0x62, 30
  01930	e5933000	 ldr         r3, [r3]
  01934	e3530000	 cmp         r3, #0
  01938	1a000523	 bne         |$LN88@UsbInterru@2|

; 682  : 
; 683  :         WaitForSingleObject(m_hUsbInterruptEvent, INFINITE);

  0193c	e3e01000	 mvn         r1, #0
  01940	e59d30a8	 ldr         r3, [sp, #0xA8]
  01944	e2833f5e	 add         r3, r3, #0x5E, 30
  01948	e5930000	 ldr         r0, [r3]
  0194c	eb000000	 bl          WaitForSingleObject

; 684  :         
; 685  :         if ( m_fUsbInterruptThreadClosing ) {

  01950	e59d30a8	 ldr         r3, [sp, #0xA8]
  01954	e2833f62	 add         r3, r3, #0x62, 30
  01958	e5933000	 ldr         r3, [r3]
  0195c	e3530000	 cmp         r3, #0
  01960	0a000000	 beq         |$LN87@UsbInterru@2|

; 686  :             break;

  01964	ea000518	 b           |$LN88@UsbInterru@2|
  01968		 |$LN87@UsbInterru@2|

; 687  :         }
; 688  : 
; 689  :         // Power management handling.
; 690  :         // This flag gets cleared in the resume thread.
; 691  :         if(m_fPowerUpFlag)

  01968	e59d30a8	 ldr         r3, [sp, #0xA8]
  0196c	e2833f65	 add         r3, r3, #0x65, 30
  01970	e5933000	 ldr         r3, [r3]
  01974	e3530000	 cmp         r3, #0
  01978	0a00002a	 beq         |$LN86@UsbInterru@2|

; 692  :         {
; 693  :             if (m_fPowerResuming) {

  0197c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01980	e2833f66	 add         r3, r3, #0x66, 30
  01984	e5933000	 ldr         r3, [r3]
  01988	e3530000	 cmp         r3, #0
  0198c	0a000000	 beq         |$LN85@UsbInterru@2|

; 694  :                 // this means we've restarted an IST and it's taken an early interrupt;
; 695  :                 // just pretend it didn't happen for now because we're about to be told to exit again.
; 696  :                 continue;

  01990	eaffffe4	 b           |$LN89@UsbInterru@2|
  01994		 |$LN85@UsbInterru@2|

; 697  :             }
; 698  :             HcdPdd_InitiatePowerUp((DWORD) m_pPddContext);

  01994	e59d30a8	 ldr         r3, [sp, #0xA8]
  01998	e2833e19	 add         r3, r3, #0x19, 28
  0199c	e5930000	 ldr         r0, [r3]
  019a0	eb000000	 bl          HcdPdd_InitiatePowerUp
  019a4		 |$LN84@UsbInterru@2|

; 699  :             HANDLE ht;
; 700  : 
; 701  :             while ((ht = CreateThread(NULL, 0, CeResumeThreadStub, this, 0, NULL)) == NULL) {

  019a4	e3a03000	 mov         r3, #0
  019a8	e58d3004	 str         r3, [sp, #4]
  019ac	e3a03000	 mov         r3, #0
  019b0	e58d3000	 str         r3, [sp]
  019b4	e59d30a8	 ldr         r3, [sp, #0xA8]
  019b8	e59f21e4	 ldr         r2, [pc, #0x1E4]
  019bc	e3a01000	 mov         r1, #0
  019c0	e3a00000	 mov         r0, #0
  019c4	eb000000	 bl          CreateThread
  019c8	e58d0058	 str         r0, [sp, #0x58]
  019cc	e59d3058	 ldr         r3, [sp, #0x58]
  019d0	e58d3038	 str         r3, [sp, #0x38]
  019d4	e59d3038	 ldr         r3, [sp, #0x38]
  019d8	e3530000	 cmp         r3, #0
  019dc	1a00000a	 bne         |$LN83@UsbInterru@2|

; 702  :                 RETAILMSG(1, (TEXT("CHW::UsbInterruptThread: Cannot start thread for resume; sleeping.\n")));

  019e0	e59f01b8	 ldr         r0, [pc, #0x1B8]
  019e4	eb000000	 bl          NKDbgPrintfW
  019e8	e3a03001	 mov         r3, #1
  019ec	e58d305c	 str         r3, [sp, #0x5C]
  019f0	ea000001	 b           |$LN95@UsbInterru@2|
  019f4	e3a03000	 mov         r3, #0
  019f8	e58d305c	 str         r3, [sp, #0x5C]
  019fc		 |$LN95@UsbInterru@2|

; 703  :                 Sleep(15000);  // 15 seconds later, maybe it'll work.

  019fc	e3a00c3a	 mov         r0, #0x3A, 24
  01a00	e3800098	 orr         r0, r0, #0x98
  01a04	eb000000	 bl          Sleep

; 704  :             }

  01a08	eaffffe5	 b           |$LN84@UsbInterru@2|
  01a0c		 |$LN83@UsbInterru@2|

; 705  :             CeSetThreadPriority( ht, g_IstThreadPriority );

  01a0c	e59f3188	 ldr         r3, [pc, #0x188]
  01a10	e5931000	 ldr         r1, [r3]
  01a14	e59d0038	 ldr         r0, [sp, #0x38]
  01a18	eb000000	 bl          CeSetThreadPriority

; 706  :             CloseHandle(ht);

  01a1c	e59d0038	 ldr         r0, [sp, #0x38]
  01a20	eb000000	 bl          CloseHandle

; 707  : 
; 708  :             // The CE resume thread will force this IST to exit so we'll be cooperative proactively.
; 709  :             break;

  01a24	ea0004e8	 b           |$LN88@UsbInterru@2|
  01a28		 |$LN86@UsbInterru@2|

; 710  :         }
; 711  : 
; 712  :         LockProcessingThread();

  01a28	e59d00a8	 ldr         r0, [sp, #0xA8]
  01a2c	eb000000	 bl          |?LockProcessingThread@CHW@@QAAXXZ|

; 713  : 
; 714  : #ifdef MUSB_USEDMA
; 715  :         // Handle CDMA interrupts
; 716  :         m_dmaCrtl.OnCompletionEvent();

  01a30	e59d30a8	 ldr         r3, [sp, #0xA8]
  01a34	e2830e33	 add         r0, r3, #0x33, 28
  01a38	eb000000	 bl          |?OnCompletionEvent@CCppiDmaController@@IAAXXZ|

; 717  : #endif
; 718  : 
; 719  :         // Inspect USB Interrupts
; 720  :         CoreIntStatus = READ_PORT_ULONG( (m_portBase+USB_CORE_INTMASKEDR_REG_OFFSET));

  01a3c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01a40	e2833f52	 add         r3, r3, #0x52, 30
  01a44	e5933000	 ldr         r3, [r3]
  01a48	e2833058	 add         r3, r3, #0x58
  01a4c	e5933000	 ldr         r3, [r3]
  01a50	e58d301c	 str         r3, [sp, #0x1C]

; 721  :         WRITE_PORT_ULONG( (m_portBase+USB_CORE_INTCLRR_REG_OFFSET), CoreIntStatus);

  01a54	e59d30a8	 ldr         r3, [sp, #0xA8]
  01a58	e2833f52	 add         r3, r3, #0x52, 30
  01a5c	e5933000	 ldr         r3, [r3]
  01a60	e2832048	 add         r2, r3, #0x48
  01a64	e59d301c	 ldr         r3, [sp, #0x1C]
  01a68	e5823000	 str         r3, [r2]

; 722  : 		EpIntStatus = READ_PORT_ULONG( (m_portBase+USB_EP_INTMASKEDR_REG_OFFSET));

  01a6c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01a70	e2833f52	 add         r3, r3, #0x52, 30
  01a74	e5933000	 ldr         r3, [r3]
  01a78	e2833038	 add         r3, r3, #0x38
  01a7c	e5933000	 ldr         r3, [r3]
  01a80	e58d300c	 str         r3, [sp, #0xC]

; 723  :         WRITE_PORT_ULONG( (m_portBase+USB_EP_INTCLRR_REG_OFFSET), EpIntStatus);

  01a84	e59d30a8	 ldr         r3, [sp, #0xA8]
  01a88	e2833f52	 add         r3, r3, #0x52, 30
  01a8c	e5933000	 ldr         r3, [r3]
  01a90	e2832028	 add         r2, r3, #0x28
  01a94	e59d300c	 ldr         r3, [sp, #0xC]
  01a98	e5823000	 str         r3, [r2]

; 724  : 
; 725  :         IntrUsbValue = (UINT16)((CoreIntStatus & USB_OTG_USBINT_MASK) >> CSL_USB_INTMSKR_USB_SHIFT);

  01a9c	e59d201c	 ldr         r2, [sp, #0x1C]
  01aa0	e3a0377f	 mov         r3, #0x7F, 14
  01aa4	e3833803	 orr         r3, r3, #3, 16
  01aa8	e0023003	 and         r3, r2, r3
  01aac	e1a03823	 mov         r3, r3, lsr #16
  01ab0	e1a03803	 mov         r3, r3, lsl #16
  01ab4	e1a03823	 mov         r3, r3, lsr #16
  01ab8	e1cd32b0	 strh        r3, [sp, #0x20]

; 726  :         IntrRxValue = (UINT8)((EpIntStatus & USB_OTG_RXINT_MASK) >> USB_OTG_RXINT_SHIFT);

  01abc	e59d200c	 ldr         r2, [sp, #0xC]
  01ac0	e3a034ff	 mov         r3, #0xFF, 8
  01ac4	e38338fe	 orr         r3, r3, #0xFE, 16
  01ac8	e0023003	 and         r3, r2, r3
  01acc	e1a03823	 mov         r3, r3, lsr #16
  01ad0	e20330ff	 and         r3, r3, #0xFF
  01ad4	e5cd3030	 strb        r3, [sp, #0x30]

; 727  :         IntrTxValue = (UINT8)(EpIntStatus & USB_OTG_TXINT_MASK) >> USB_OTG_TXINT_SHIFT;

  01ad8	e59d200c	 ldr         r2, [sp, #0xC]
  01adc	e3a03cff	 mov         r3, #0xFF, 24
  01ae0	e38330ff	 orr         r3, r3, #0xFF
  01ae4	e0023003	 and         r3, r2, r3
  01ae8	e20330ff	 and         r3, r3, #0xFF
  01aec	e5cd3010	 strb        r3, [sp, #0x10]

; 728  :         
; 729  : 		((SOhcdPdd*)m_pPddContext)->pSysConfReg->CONTROL_LVL_INTR_CLEAR |= (1 << 4);

  01af0	e59d30a8	 ldr         r3, [sp, #0xA8]
  01af4	e2833e19	 add         r3, r3, #0x19, 28
  01af8	e5933000	 ldr         r3, [r3]
  01afc	e2833f89	 add         r3, r3, #0x89, 30
  01b00	e5933000	 ldr         r3, [r3]
  01b04	e2833fc9	 add         r3, r3, #0xC9, 30
  01b08	e5933000	 ldr         r3, [r3]
  01b0c	e3832010	 orr         r2, r3, #0x10
  01b10	e59d30a8	 ldr         r3, [sp, #0xA8]
  01b14	e2833e19	 add         r3, r3, #0x19, 28
  01b18	e5933000	 ldr         r3, [r3]
  01b1c	e2833f89	 add         r3, r3, #0x89, 30
  01b20	e5933000	 ldr         r3, [r3]
  01b24	e2833fc9	 add         r3, r3, #0xC9, 30
  01b28	e5832000	 str         r2, [r3]

; 730  : 
; 731  :         DEBUGMSG(ZONE_VERBOSE, (TEXT("USBInterruptThread: IntrUsbValue=0x%x, IntrRxValue=0x%x, IntrTxValue=0x%x\n\r"), 
; 732  :             IntrUsbValue, IntrRxValue, IntrTxValue));

  01b2c	e59f3064	 ldr         r3, [pc, #0x64]
  01b30	e5933440	 ldr         r3, [r3, #0x440]
  01b34	e3130a01	 tst         r3, #1, 20
  01b38	0a000007	 beq         |$LN96@UsbInterru@2|
  01b3c	e5dd3010	 ldrb        r3, [sp, #0x10]
  01b40	e5dd2030	 ldrb        r2, [sp, #0x30]
  01b44	e1dd12b0	 ldrh        r1, [sp, #0x20]
  01b48	e59f0044	 ldr         r0, [pc, #0x44]
  01b4c	eb000000	 bl          NKDbgPrintfW
  01b50	e3a03001	 mov         r3, #1
  01b54	e58d3060	 str         r3, [sp, #0x60]
  01b58	ea000001	 b           |$LN97@UsbInterru@2|
  01b5c		 |$LN96@UsbInterru@2|
  01b5c	e3a03000	 mov         r3, #0
  01b60	e58d3060	 str         r3, [sp, #0x60]
  01b64		 |$LN97@UsbInterru@2|

; 733  : 
; 734  :         if(IntrUsbValue)

  01b64	e1dd32b0	 ldrh        r3, [sp, #0x20]
  01b68	e3530000	 cmp         r3, #0
  01b6c	0a000043	 beq         |$LN82@UsbInterru@2|

; 735  :         {
; 736  :             if (IntrUsbValue & CSL_USB_INTRUSB_SOF_MASK)
; 737  :             {
; 738  :                 // SOFs are handled by the processing thread
; 739  :             }
; 740  : 
; 741  :             if (IntrUsbValue & CSL_USB_INTRUSB_VBUSERR_MASK)

  01b70	e1dd32b0	 ldrh        r3, [sp, #0x20]
  01b74	e3130080	 tst         r3, #0x80
  01b78	0a00001a	 beq         |$LN80@UsbInterru@2|

; 742  :             {
; 743  :                 // session is stopped due to VBUS error
; 744  :                 RETAILMSG(1, (L"USBH: VBUS error detected - resetting controller\r\n"));

  01b7c	e59f000c	 ldr         r0, [pc, #0xC]
  01b80	eb000000	 bl          NKDbgPrintfW
  01b84	e3a03001	 mov         r3, #1
  01b88	e58d3064	 str         r3, [sp, #0x64]
  01b8c	ea000008	 b           |$LN99@UsbInterru@2|
  01b90		 |$LN153@UsbInterru@2|
  01b90		 |$LN154@UsbInterru@2|
  01b90	00000000	 DCD         |??_C@_1GG@KJEIHILO@?$AAU?$AAS?$AAB?$AAH?$AA?3?$AA?5?$AAV?$AAB?$AAU?$AAS?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AA?9?$AA?5?$AAr?$AAe?$AAs?$AAe@|
  01b94		 |$LN155@UsbInterru@2|
  01b94	00000000	 DCD         |??_C@_1JI@KOKNPNHF@?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAU?$AAs?$AAb?$AAV?$AAa?$AAl?$AAu?$AAe@|
  01b98		 |$LN156@UsbInterru@2|
  01b98	00000000	 DCD         |dpCurSettings|
  01b9c		 |$LN157@UsbInterru@2|
  01b9c	00000000	 DCD         |g_IstThreadPriority|
  01ba0		 |$LN158@UsbInterru@2|
  01ba0	00000000	 DCD         |??_C@_1II@MCJCLEKF@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAs?$AAb?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAC?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5@|
  01ba4		 |$LN159@UsbInterru@2|
  01ba4	00000000	 DCD         |?CeResumeThreadStub@CHW@@CAKPAX@Z|
  01ba8		 |$LN160@UsbInterru@2|
  01ba8	00000000	 DCD         |??_C@_1DG@LADNJBCG@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@|
  01bac	e3a03000	 mov         r3, #0
  01bb0	e58d3064	 str         r3, [sp, #0x64]
  01bb4		 |$LN99@UsbInterru@2|

; 745  :                 USBHPDD_PowerVBUS(FALSE);

  01bb4	e3a00000	 mov         r0, #0
  01bb8	eb000000	 bl          USBHPDD_PowerVBUS

; 746  :                 WRITE_PORT_ULONG( (m_portBase+USB_CTRL_REG_OFFSET), BIT0);  // soft reset of USB module

  01bbc	e59d30a8	 ldr         r3, [sp, #0xA8]
  01bc0	e2833f52	 add         r3, r3, #0x52, 30
  01bc4	e5933000	 ldr         r3, [r3]
  01bc8	e2832004	 add         r2, r3, #4
  01bcc	e3a03001	 mov         r3, #1
  01bd0	e5823000	 str         r3, [r2]

; 747  :                 InitialiseFIFOs();

  01bd4	e59d00a8	 ldr         r0, [sp, #0xA8]
  01bd8	eb000000	 bl          |?InitialiseFIFOs@CHW@@AAAXXZ|

; 748  :                 EnterOperationalState();

  01bdc	e59d00a8	 ldr         r0, [sp, #0xA8]
  01be0	eb000000	 bl          |?EnterOperationalState@CHW@@QAAXXZ|

; 749  :             }
; 750  :             else

  01be4	ea000025	 b           |$LN79@UsbInterru@2|
  01be8		 |$LN80@UsbInterru@2|

; 751  :             {
; 752  :                 if (IntrUsbValue & CSL_USB_INTRUSB_CONN_MASK)

  01be8	e1dd32b0	 ldrh        r3, [sp, #0x20]
  01bec	e3130010	 tst         r3, #0x10
  01bf0	0a00000e	 beq         |$LN78@UsbInterru@2|

; 753  :                 {
; 754  :                     //device connected
; 755  :                     m_portStatus = m_portStatus | (PORT_STATUS_CON_CHANGED | PORT_STATUS_DEVICE_ATTACHED);

  01bf4	e59d30a8	 ldr         r3, [sp, #0xA8]
  01bf8	e2833c01	 add         r3, r3, #1, 24
  01bfc	e283309e	 add         r3, r3, #0x9E
  01c00	e5d33000	 ldrb        r3, [r3]
  01c04	e3833003	 orr         r3, r3, #3
  01c08	e20320ff	 and         r2, r3, #0xFF
  01c0c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01c10	e2833c01	 add         r3, r3, #1, 24
  01c14	e283309e	 add         r3, r3, #0x9E
  01c18	e5c32000	 strb        r2, [r3]

; 756  :                     SetEvent(m_hUsbHubChangeEvent);

  01c1c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01c20	e2833f61	 add         r3, r3, #0x61, 30
  01c24	e5930000	 ldr         r0, [r3]
  01c28	eb000000	 bl          SetEvent
  01c2c	ea000013	 b           |$LN77@UsbInterru@2|
  01c30		 |$LN78@UsbInterru@2|

; 757  :                 }
; 758  :                 else if (IntrUsbValue & CSL_USB_INTRUSB_DISCON_MASK)

  01c30	e1dd32b0	 ldrh        r3, [sp, #0x20]
  01c34	e3130020	 tst         r3, #0x20
  01c38	0a000010	 beq         |$LN76@UsbInterru@2|

; 759  :                 {
; 760  :                     //device disconnected
; 761  :                     m_portStatus = (m_portStatus & ~PORT_STATUS_DEVICE_ATTACHED) | PORT_STATUS_CON_CHANGED;

  01c3c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01c40	e2833c01	 add         r3, r3, #1, 24
  01c44	e283309e	 add         r3, r3, #0x9E
  01c48	e5d33000	 ldrb        r3, [r3]
  01c4c	e1a02003	 mov         r2, r3
  01c50	e3e03002	 mvn         r3, #2
  01c54	e0023003	 and         r3, r2, r3
  01c58	e3833001	 orr         r3, r3, #1
  01c5c	e20320ff	 and         r2, r3, #0xFF
  01c60	e59d30a8	 ldr         r3, [sp, #0xA8]
  01c64	e2833c01	 add         r3, r3, #1, 24
  01c68	e283309e	 add         r3, r3, #0x9E
  01c6c	e5c32000	 strb        r2, [r3]

; 762  :                     SetEvent(m_hUsbHubChangeEvent);

  01c70	e59d30a8	 ldr         r3, [sp, #0xA8]
  01c74	e2833f61	 add         r3, r3, #0x61, 30
  01c78	e5930000	 ldr         r0, [r3]
  01c7c	eb000000	 bl          SetEvent
  01c80		 |$LN76@UsbInterru@2|
  01c80		 |$LN77@UsbInterru@2|
  01c80		 |$LN79@UsbInterru@2|
  01c80		 |$LN82@UsbInterru@2|

; 763  :                 }
; 764  : 
; 765  : #if 0
; 766  :                 if (IntrUsbValue & CSL_USB_INTRUSB_DRVVBUSCHG_MASK)
; 767  :                 {
; 768  :                     RETAILMSG(1, (L"USBH: DRVVBUS changed\r\n"));
; 769  :                     UINT32 drvvbus = READ_PORT_ULONG( (m_portBase+USB_STATR_REG_OFFSET));
; 770  :                     if (drvvbus)
; 771  :                         USBHPDD_PowerVBUS(TRUE);
; 772  :                 }
; 773  : #endif
; 774  :             }
; 775  : 
; 776  :             // RETAILMSG(FALSE,(TEXT("DevCtl = 0x%x"),READ_PORT_UCHAR( (m_portBase+USB_DEVCTL_REG_OFFSET))));
; 777  :         }
; 778  : 
; 779  : 
; 780  :         if (IntrTxValue & BIT0)

  01c80	e5dd3010	 ldrb        r3, [sp, #0x10]
  01c84	e3130001	 tst         r3, #1
  01c88	0a0001dd	 beq         |$LN75@UsbInterru@2|

; 781  :         {
; 782  :             /*EP0 interrupt*/
; 783  :             pED = (USBED*)m_pProcessEDControl;

  01c8c	e59d30a8	 ldr         r3, [sp, #0xA8]
  01c90	e28330c4	 add         r3, r3, #0xC4
  01c94	e5933000	 ldr         r3, [r3]
  01c98	e58d3028	 str         r3, [sp, #0x28]

; 784  :             if (!pED)

  01c9c	e59d3028	 ldr         r3, [sp, #0x28]
  01ca0	e3530000	 cmp         r3, #0
  01ca4	1a000001	 bne         |$LN74@UsbInterru@2|
  01ca8	ea0001d5	 b           |$LN73@UsbInterru@2|

; 785  :             {
; 786  :                 // EP0 transfer aborted
; 787  :                 goto _skipControl;

  01cac	ea0001d4	 b           |$_skipControl$41847|
  01cb0		 |$LN74@UsbInterru@2|

; 788  :             }
; 789  :             pTD = (USBTD*)pED->HeadTD;

  01cb0	e59d3028	 ldr         r3, [sp, #0x28]
  01cb4	e2833014	 add         r3, r3, #0x14
  01cb8	e5933000	 ldr         r3, [r3]
  01cbc	e58d3008	 str         r3, [sp, #8]

; 790  : 
; 791  :             // Skip if no TDs or only the NULL TD
; 792  :             if (!pTD || pED->HeadTD == pED->TailTD)

  01cc0	e59d3008	 ldr         r3, [sp, #8]
  01cc4	e3530000	 cmp         r3, #0
  01cc8	0a000007	 beq         |$LN71@UsbInterru@2|
  01ccc	e59d3028	 ldr         r3, [sp, #0x28]
  01cd0	e2832014	 add         r2, r3, #0x14
  01cd4	e59d3028	 ldr         r3, [sp, #0x28]
  01cd8	e2833018	 add         r3, r3, #0x18
  01cdc	e5922000	 ldr         r2, [r2]
  01ce0	e5933000	 ldr         r3, [r3]
  01ce4	e1520003	 cmp         r2, r3
  01ce8	1a000001	 bne         |$LN72@UsbInterru@2|
  01cec		 |$LN71@UsbInterru@2|

; 793  :             {
; 794  :                 goto _skipControl;

  01cec	ea0001c4	 b           |$LN70@UsbInterru@2|
  01cf0	ea0001c3	 b           |$_skipControl$41847|
  01cf4		 |$LN72@UsbInterru@2|

; 795  :             }
; 796  : 
; 797  :             pPkt = (UINT8 *)pTD->sTransfer.lpvClientBuffer;

  01cf4	e59d3008	 ldr         r3, [sp, #8]
  01cf8	e283302c	 add         r3, r3, #0x2C
  01cfc	e5933000	 ldr         r3, [r3]
  01d00	e58d3024	 str         r3, [sp, #0x24]

; 798  : 
; 799  :             // Check for an error condition (can occur at any stage)
; 800  :             _HOST_CSR0 = READ_PORT_USHORT((m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)));

  01d04	e59d30a8	 ldr         r3, [sp, #0xA8]
  01d08	e2833f52	 add         r3, r3, #0x52, 30
  01d0c	e5933000	 ldr         r3, [r3]
  01d10	e2833c05	 add         r3, r3, #5, 24
  01d14	e2833002	 add         r3, r3, #2
  01d18	e1d330b0	 ldrh        r3, [r3]
  01d1c	e1cd33b6	 strh        r3, [sp, #0x36]

; 801  :             if (_HOST_CSR0 & (MGC_M_CSR0_H_ERROR | MGC_M_CSR0_H_RXSTALL | MGC_M_CSR0_H_NAKTIMEOUT))

  01d20	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01d24	e3130094	 tst         r3, #0x94
  01d28	0a00004d	 beq         |$LN69@UsbInterru@2|

; 802  :             {
; 803  :                 if (_HOST_CSR0 & MGC_M_CSR0_H_ERROR) {

  01d2c	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01d30	e3130010	 tst         r3, #0x10
  01d34	0a000010	 beq         |$LN68@UsbInterru@2|

; 804  :                     _HOST_CSR0 &= (~MGC_M_CSR0_H_ERROR);

  01d38	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01d3c	e1a02003	 mov         r2, r3
  01d40	e3e03010	 mvn         r3, #0x10
  01d44	e0023003	 and         r3, r2, r3
  01d48	e1a03803	 mov         r3, r3, lsl #16
  01d4c	e1a03823	 mov         r3, r3, lsr #16
  01d50	e1cd33b6	 strh        r3, [sp, #0x36]

; 805  :                     *pTD->sTransfer.lpfComplete = TRUE;

  01d54	e59d3008	 ldr         r3, [sp, #8]
  01d58	e2833040	 add         r3, r3, #0x40
  01d5c	e5932000	 ldr         r2, [r3]
  01d60	e3a03001	 mov         r3, #1
  01d64	e5823000	 str         r3, [r2]

; 806  :                     *pTD->sTransfer.lpdwError = USB_DEVICE_NOT_RESPONDING_ERROR;

  01d68	e59d3008	 ldr         r3, [sp, #8]
  01d6c	e2833048	 add         r3, r3, #0x48
  01d70	e5932000	 ldr         r2, [r3]
  01d74	e3a03005	 mov         r3, #5
  01d78	e5823000	 str         r3, [r2]
  01d7c		 |$LN68@UsbInterru@2|

; 807  :                 }
; 808  :                 if(_HOST_CSR0 & MGC_M_CSR0_H_RXSTALL) {

  01d7c	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01d80	e3130004	 tst         r3, #4
  01d84	0a000010	 beq         |$LN67@UsbInterru@2|

; 809  :                     _HOST_CSR0 &= (~MGC_M_CSR0_H_RXSTALL);

  01d88	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01d8c	e1a02003	 mov         r2, r3
  01d90	e3e03004	 mvn         r3, #4
  01d94	e0023003	 and         r3, r2, r3
  01d98	e1a03803	 mov         r3, r3, lsl #16
  01d9c	e1a03823	 mov         r3, r3, lsr #16
  01da0	e1cd33b6	 strh        r3, [sp, #0x36]

; 810  :                     *pTD->sTransfer.lpfComplete = TRUE;

  01da4	e59d3008	 ldr         r3, [sp, #8]
  01da8	e2833040	 add         r3, r3, #0x40
  01dac	e5932000	 ldr         r2, [r3]
  01db0	e3a03001	 mov         r3, #1
  01db4	e5823000	 str         r3, [r2]

; 811  :                     *pTD->sTransfer.lpdwError = USB_STALL_ERROR;

  01db8	e59d3008	 ldr         r3, [sp, #8]
  01dbc	e2833048	 add         r3, r3, #0x48
  01dc0	e5932000	 ldr         r2, [r3]
  01dc4	e3a03004	 mov         r3, #4
  01dc8	e5823000	 str         r3, [r2]
  01dcc		 |$LN67@UsbInterru@2|

; 812  :                 }
; 813  :                 if(_HOST_CSR0 & MGC_M_CSR0_H_NAKTIMEOUT) {

  01dcc	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01dd0	e3130080	 tst         r3, #0x80
  01dd4	0a000010	 beq         |$LN66@UsbInterru@2|

; 814  :                     _HOST_CSR0 &= (~(MGC_M_CSR0_H_NAKTIMEOUT|MGC_M_CSR0_H_REQPKT|MGC_M_CSR0_TXPKTRDY));

  01dd8	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01ddc	e1a02003	 mov         r2, r3
  01de0	e3e030a2	 mvn         r3, #0xA2
  01de4	e0023003	 and         r3, r2, r3
  01de8	e1a03803	 mov         r3, r3, lsl #16
  01dec	e1a03823	 mov         r3, r3, lsr #16
  01df0	e1cd33b6	 strh        r3, [sp, #0x36]

; 815  :                     *pTD->sTransfer.lpfComplete = TRUE;

  01df4	e59d3008	 ldr         r3, [sp, #8]
  01df8	e2833040	 add         r3, r3, #0x40
  01dfc	e5932000	 ldr         r2, [r3]
  01e00	e3a03001	 mov         r3, #1
  01e04	e5823000	 str         r3, [r2]

; 816  :                     *pTD->sTransfer.lpdwError = USB_DEVICE_NOT_RESPONDING_ERROR;

  01e08	e59d3008	 ldr         r3, [sp, #8]
  01e0c	e2833048	 add         r3, r3, #0x48
  01e10	e5932000	 ldr         r2, [r3]
  01e14	e3a03005	 mov         r3, #5
  01e18	e5823000	 str         r3, [r2]
  01e1c		 |$LN66@UsbInterru@2|

; 817  :                 }
; 818  :                 _HOST_CSR0 |= MGC_M_CSR0_FLUSHFIFO;

  01e1c	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01e20	e3833c01	 orr         r3, r3, #1, 24
  01e24	e1a03803	 mov         r3, r3, lsl #16
  01e28	e1a03823	 mov         r3, r3, lsr #16
  01e2c	e1cd33b6	 strh        r3, [sp, #0x36]

; 819  :                 WRITE_PORT_USHORT((m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)),_HOST_CSR0);

  01e30	e59d30a8	 ldr         r3, [sp, #0xA8]
  01e34	e2833f52	 add         r3, r3, #0x52, 30
  01e38	e5933000	 ldr         r3, [r3]
  01e3c	e2833c05	 add         r3, r3, #5, 24
  01e40	e2832002	 add         r2, r3, #2
  01e44	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01e48	e1c230b0	 strh        r3, [r2]

; 820  :                 pED->TransferStatus = STATUS_COMPLETE;

  01e4c	e59d3028	 ldr         r3, [sp, #0x28]
  01e50	e283201c	 add         r2, r3, #0x1C
  01e54	e3a03002	 mov         r3, #2
  01e58	e5823000	 str         r3, [r2]
  01e5c	ea000168	 b           |$LN65@UsbInterru@2|

; 821  :                 goto _skipControl;

  01e60	ea000167	 b           |$_skipControl$41847|
  01e64		 |$LN69@UsbInterru@2|

; 822  :             }
; 823  : 
; 824  :             switch(pTD->TransferStage){

  01e64	e59d3008	 ldr         r3, [sp, #8]
  01e68	e2833050	 add         r3, r3, #0x50
  01e6c	e5933000	 ldr         r3, [r3]
  01e70	e58d3068	 str         r3, [sp, #0x68]
  01e74	e59d3068	 ldr         r3, [sp, #0x68]
  01e78	e3530004	 cmp         r3, #4
  01e7c	8a000160	 bhi         |$LN63@UsbInterru@2|
  01e80	e59d2068	 ldr         r2, [sp, #0x68]
  01e84	e1a03102	 mov         r3, r2, lsl #2
  01e88	e083300f	 add         r3, r3, pc
  01e8c	e5933004	 ldr         r3, [r3, #4]
  01e90	e08ff003	 add         pc, pc, r3
  01e94		 |$LN128@UsbInterru@2|
  01e94		 |$LN127@UsbInterru@2|
  01e94		 |$LN129@UsbInterru@2|
  01e94	00000010	 DCD         0x10
  01e98		 |$LN130@UsbInterru@2|
  01e98	0000010c	 DCD         0x10c
  01e9c		 |$LN131@UsbInterru@2|
  01e9c	000002d4	 DCD         0x2d4
  01ea0		 |$LN132@UsbInterru@2|
  01ea0	00000398	 DCD         0x398
  01ea4		 |$LN133@UsbInterru@2|
  01ea4	000004a0	 DCD         0x4a0
  01ea8		 |$LN62@UsbInterru@2|

; 825  :                 /*case current stage*/
; 826  :                 case STAGE_SETUP:
; 827  :                     _HOST_CSR0 = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)));

  01ea8	e59d30a8	 ldr         r3, [sp, #0xA8]
  01eac	e2833f52	 add         r3, r3, #0x52, 30
  01eb0	e5933000	 ldr         r3, [r3]
  01eb4	e2833c05	 add         r3, r3, #5, 24
  01eb8	e2833002	 add         r3, r3, #2
  01ebc	e1d330b0	 ldrh        r3, [r3]
  01ec0	e1cd33b6	 strh        r3, [sp, #0x36]

; 828  :                     if(!(_HOST_CSR0 & MGC_M_CSR0_TXPKTRDY)){

  01ec4	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01ec8	e3130002	 tst         r3, #2
  01ecc	1a00001d	 bne         |$LN61@UsbInterru@2|

; 829  :                         /*TX successful*/
; 830  :                         if(pTD->BytesToTransfer){

  01ed0	e59d3008	 ldr         r3, [sp, #8]
  01ed4	e2833058	 add         r3, r3, #0x58
  01ed8	e5933000	 ldr         r3, [r3]
  01edc	e3530000	 cmp         r3, #0
  01ee0	0a000013	 beq         |$LN60@UsbInterru@2|

; 831  :                             /*data stage required*/
; 832  :                             pPkt = (UINT8 *)pTD->sTransfer.lpvControlHeader;

  01ee4	e59d3008	 ldr         r3, [sp, #8]
  01ee8	e2833014	 add         r3, r3, #0x14
  01eec	e5933000	 ldr         r3, [r3]
  01ef0	e58d3024	 str         r3, [sp, #0x24]

; 833  :                             RequestType = *pPkt;

  01ef4	e59d3024	 ldr         r3, [sp, #0x24]
  01ef8	e5d33000	 ldrb        r3, [r3]
  01efc	e5cd3031	 strb        r3, [sp, #0x31]

; 834  :                             if(RequestType & 0x80){

  01f00	e5dd3031	 ldrb        r3, [sp, #0x31]
  01f04	e3130080	 tst         r3, #0x80
  01f08	0a000004	 beq         |$LN59@UsbInterru@2|

; 835  :                                 /*data stage - device to host*/
; 836  :                                 pTD->TransferStage = STAGE_DATAIN;

  01f0c	e59d3008	 ldr         r3, [sp, #8]
  01f10	e2832050	 add         r2, r3, #0x50
  01f14	e3a03001	 mov         r3, #1
  01f18	e5823000	 str         r3, [r2]

; 837  :                             }
; 838  :                             else{

  01f1c	ea000003	 b           |$LN58@UsbInterru@2|
  01f20		 |$LN59@UsbInterru@2|

; 839  :                                 /*data stage - host to device*/
; 840  :                                 pTD->TransferStage = STAGE_DATAOUT;

  01f20	e59d3008	 ldr         r3, [sp, #8]
  01f24	e2832050	 add         r2, r3, #0x50
  01f28	e3a03002	 mov         r3, #2
  01f2c	e5823000	 str         r3, [r2]
  01f30		 |$LN58@UsbInterru@2|

; 841  :                             }
; 842  :                         }
; 843  :                         else {

  01f30	ea000003	 b           |$LN57@UsbInterru@2|
  01f34		 |$LN60@UsbInterru@2|

; 844  :                             /*no data stage*/
; 845  :                             pTD->TransferStage = STAGE_STATUSIN;

  01f34	e59d3008	 ldr         r3, [sp, #8]
  01f38	e2832050	 add         r2, r3, #0x50
  01f3c	e3a03003	 mov         r3, #3
  01f40	e5823000	 str         r3, [r2]
  01f44		 |$LN57@UsbInterru@2|

; 846  :                         }
; 847  :                     }
; 848  :                     else{

  01f44	ea000011	 b           |$LN56@UsbInterru@2|
  01f48		 |$LN61@UsbInterru@2|

; 849  :                         RETAILMSG(FALSE,(TEXT("STAGE_SETUP:_HOST_CSR0 = 0x%x"),_HOST_CSR0));

  01f48	ea000006	 b           |$LN100@UsbInterru@2|
  01f4c	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01f50	e1a01003	 mov         r1, r3
  01f54	e59f0f8c	 ldr         r0, [pc, #0xF8C]
  01f58	eb000000	 bl          NKDbgPrintfW
  01f5c	e3a03001	 mov         r3, #1
  01f60	e58d306c	 str         r3, [sp, #0x6C]
  01f64	ea000001	 b           |$LN101@UsbInterru@2|
  01f68		 |$LN100@UsbInterru@2|
  01f68	e3a03000	 mov         r3, #0
  01f6c	e58d306c	 str         r3, [sp, #0x6C]
  01f70		 |$LN101@UsbInterru@2|

; 850  :                         RETAILMSG(0, (L"INCTL-NRDY\r\n"));

  01f70	ea000004	 b           |$LN102@UsbInterru@2|
  01f74	e59f0f68	 ldr         r0, [pc, #0xF68]
  01f78	eb000000	 bl          NKDbgPrintfW
  01f7c	e3a03001	 mov         r3, #1
  01f80	e58d3070	 str         r3, [sp, #0x70]
  01f84	ea000001	 b           |$LN103@UsbInterru@2|
  01f88		 |$LN102@UsbInterru@2|
  01f88	e3a03000	 mov         r3, #0
  01f8c	e58d3070	 str         r3, [sp, #0x70]
  01f90		 |$LN103@UsbInterru@2|
  01f90		 |$LN56@UsbInterru@2|

; 851  :                     }
; 852  :                     pED->TransferStatus = STATUS_IDLE;

  01f90	e59d3028	 ldr         r3, [sp, #0x28]
  01f94	e283201c	 add         r2, r3, #0x1C
  01f98	e3a03000	 mov         r3, #0
  01f9c	e5823000	 str         r3, [r2]

; 853  :                     break;

  01fa0	ea000117	 b           |$LN63@UsbInterru@2|
  01fa4		 |$LN55@UsbInterru@2|

; 854  :                 case STAGE_DATAIN:
; 855  :                     /*Device to host*/
; 856  :                     _HOST_CSR0 = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)));

  01fa4	e59d30a8	 ldr         r3, [sp, #0xA8]
  01fa8	e2833f52	 add         r3, r3, #0x52, 30
  01fac	e5933000	 ldr         r3, [r3]
  01fb0	e2833c05	 add         r3, r3, #5, 24
  01fb4	e2833002	 add         r3, r3, #2
  01fb8	e1d330b0	 ldrh        r3, [r3]
  01fbc	e1cd33b6	 strh        r3, [sp, #0x36]

; 857  : 
; 858  :                     /*check for RXPKTRDY*/
; 859  :                     if (_HOST_CSR0 & MGC_M_CSR0_RXPKTRDY) {

  01fc0	e1dd33b6	 ldrh        r3, [sp, #0x36]
  01fc4	e3130001	 tst         r3, #1
  01fc8	0a000053	 beq         |$LN54@UsbInterru@2|

; 860  :                         pPkt = (UINT8*)pTD->sTransfer.lpvClientBuffer;

  01fcc	e59d3008	 ldr         r3, [sp, #8]
  01fd0	e283302c	 add         r3, r3, #0x2C
  01fd4	e5933000	 ldr         r3, [r3]
  01fd8	e58d3024	 str         r3, [sp, #0x24]

; 861  :                         CopyCount = _COUNT0 = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_COUNT0)));

  01fdc	e59d30a8	 ldr         r3, [sp, #0xA8]
  01fe0	e2833f52	 add         r3, r3, #0x52, 30
  01fe4	e5933000	 ldr         r3, [r3]
  01fe8	e2833c05	 add         r3, r3, #5, 24
  01fec	e2833008	 add         r3, r3, #8
  01ff0	e1d330b0	 ldrh        r3, [r3]
  01ff4	e1cd33b2	 strh        r3, [sp, #0x32]
  01ff8	e1dd33b2	 ldrh        r3, [sp, #0x32]
  01ffc	e58d3018	 str         r3, [sp, #0x18]

; 862  :                         pData = pPkt;

  02000	e59d3024	 ldr         r3, [sp, #0x24]
  02004	e58d3014	 str         r3, [sp, #0x14]

; 863  :                         pData += pTD->BytesTransferred;

  02008	e59d3008	 ldr         r3, [sp, #8]
  0200c	e2833054	 add         r3, r3, #0x54
  02010	e59d2014	 ldr         r2, [sp, #0x14]
  02014	e5933000	 ldr         r3, [r3]
  02018	e0823003	 add         r3, r2, r3
  0201c	e58d3014	 str         r3, [sp, #0x14]

; 864  : 						
; 865  : 						ReadFIFO((DWORD*)(m_portBase+MGC_FIFO_OFFSET(0)), pData, CopyCount);

  02020	e59d2018	 ldr         r2, [sp, #0x18]
  02024	e59d1014	 ldr         r1, [sp, #0x14]
  02028	e59d30a8	 ldr         r3, [sp, #0xA8]
  0202c	e2833f52	 add         r3, r3, #0x52, 30
  02030	e5933000	 ldr         r3, [r3]
  02034	e2830e42	 add         r0, r3, #0x42, 28
  02038	eb000000	 bl          |?ReadFIFO@@YAHPAKPAXK@Z|

; 866  : 						pTD->BytesToTransfer -= CopyCount;

  0203c	e59d3008	 ldr         r3, [sp, #8]
  02040	e2833058	 add         r3, r3, #0x58
  02044	e5932000	 ldr         r2, [r3]
  02048	e59d3018	 ldr         r3, [sp, #0x18]
  0204c	e0422003	 sub         r2, r2, r3
  02050	e59d3008	 ldr         r3, [sp, #8]
  02054	e2833058	 add         r3, r3, #0x58
  02058	e5832000	 str         r2, [r3]

; 867  : 						pTD->BytesTransferred += CopyCount;

  0205c	e59d3008	 ldr         r3, [sp, #8]
  02060	e2833054	 add         r3, r3, #0x54
  02064	e5932000	 ldr         r2, [r3]
  02068	e59d3018	 ldr         r3, [sp, #0x18]
  0206c	e0822003	 add         r2, r2, r3
  02070	e59d3008	 ldr         r3, [sp, #8]
  02074	e2833054	 add         r3, r3, #0x54
  02078	e5832000	 str         r2, [r3]

; 868  :                         _HOST_CSR0 &= (~MGC_M_CSR0_RXPKTRDY);

  0207c	e1dd33b6	 ldrh        r3, [sp, #0x36]
  02080	e1a02003	 mov         r2, r3
  02084	e3e03001	 mvn         r3, #1
  02088	e0023003	 and         r3, r2, r3
  0208c	e1a03803	 mov         r3, r3, lsl #16
  02090	e1a03823	 mov         r3, r3, lsr #16
  02094	e1cd33b6	 strh        r3, [sp, #0x36]

; 869  :                         WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)),_HOST_CSR0);

  02098	e59d30a8	 ldr         r3, [sp, #0xA8]
  0209c	e2833f52	 add         r3, r3, #0x52, 30
  020a0	e5933000	 ldr         r3, [r3]
  020a4	e2833c05	 add         r3, r3, #5, 24
  020a8	e2832002	 add         r2, r3, #2
  020ac	e1dd33b6	 ldrh        r3, [sp, #0x36]
  020b0	e1c230b0	 strh        r3, [r2]

; 870  : 
; 871  :                         if(!pTD->BytesToTransfer || (_COUNT0 < pED->bfMaxPacketSize)){

  020b4	e59d3008	 ldr         r3, [sp, #8]
  020b8	e2833058	 add         r3, r3, #0x58
  020bc	e5933000	 ldr         r3, [r3]
  020c0	e3530000	 cmp         r3, #0
  020c4	0a000006	 beq         |$LN52@UsbInterru@2|
  020c8	e1dd33b2	 ldrh        r3, [sp, #0x32]
  020cc	e1a02003	 mov         r2, r3
  020d0	e59d3028	 ldr         r3, [sp, #0x28]
  020d4	e283300e	 add         r3, r3, #0xE
  020d8	e1d330b0	 ldrh        r3, [r3]
  020dc	e1520003	 cmp         r2, r3
  020e0	aa000004	 bge         |$LN53@UsbInterru@2|
  020e4		 |$LN52@UsbInterru@2|

; 872  :                             /*data phase complete*/
; 873  :                             pTD->TransferStage = STAGE_STATUSOUT;

  020e4	e59d3008	 ldr         r3, [sp, #8]
  020e8	e2832050	 add         r2, r3, #0x50
  020ec	e3a03004	 mov         r3, #4
  020f0	e5823000	 str         r3, [r2]

; 874  :                         }
; 875  :                         else{

  020f4	ea000003	 b           |$LN51@UsbInterru@2|
  020f8		 |$LN53@UsbInterru@2|

; 876  :                             /* data phase to continue*/
; 877  :                             pTD->TransferStage = STAGE_DATAIN;

  020f8	e59d3008	 ldr         r3, [sp, #8]
  020fc	e2832050	 add         r2, r3, #0x50
  02100	e3a03001	 mov         r3, #1
  02104	e5823000	 str         r3, [r2]
  02108		 |$LN51@UsbInterru@2|

; 878  :                         }
; 879  :                         pED->TransferStatus = STATUS_IDLE;

  02108	e59d3028	 ldr         r3, [sp, #0x28]
  0210c	e283201c	 add         r2, r3, #0x1C
  02110	e3a03000	 mov         r3, #0
  02114	e5823000	 str         r3, [r2]

; 880  :                     }
; 881  :                     else{

  02118	ea000012	 b           |$LN50@UsbInterru@2|
  0211c		 |$LN54@UsbInterru@2|

; 882  :                         RETAILMSG(FALSE,(TEXT("STAGE_DATAIN:_HOST_CSR0 = 0x%x"),_HOST_CSR0));

  0211c	ea000006	 b           |$LN104@UsbInterru@2|
  02120	e1dd33b6	 ldrh        r3, [sp, #0x36]
  02124	e1a01003	 mov         r1, r3
  02128	e59f0db0	 ldr         r0, [pc, #0xDB0]
  0212c	eb000000	 bl          NKDbgPrintfW
  02130	e3a03001	 mov         r3, #1
  02134	e58d3074	 str         r3, [sp, #0x74]
  02138	ea000001	 b           |$LN105@UsbInterru@2|
  0213c		 |$LN104@UsbInterru@2|
  0213c	e3a03000	 mov         r3, #0
  02140	e58d3074	 str         r3, [sp, #0x74]
  02144		 |$LN105@UsbInterru@2|

; 883  :                         RETAILMSG(0, (L"1CTL_%08X\r\n", pTD));

  02144	ea000005	 b           |$LN106@UsbInterru@2|
  02148	e59d1008	 ldr         r1, [sp, #8]
  0214c	e59f0d88	 ldr         r0, [pc, #0xD88]
  02150	eb000000	 bl          NKDbgPrintfW
  02154	e3a03001	 mov         r3, #1
  02158	e58d3078	 str         r3, [sp, #0x78]
  0215c	ea000001	 b           |$LN107@UsbInterru@2|
  02160		 |$LN106@UsbInterru@2|
  02160	e3a03000	 mov         r3, #0
  02164	e58d3078	 str         r3, [sp, #0x78]
  02168		 |$LN107@UsbInterru@2|
  02168		 |$LN50@UsbInterru@2|

; 884  :                     }
; 885  :                     break;

  02168	ea0000a5	 b           |$LN63@UsbInterru@2|
  0216c		 |$LN49@UsbInterru@2|

; 886  :                 case STAGE_DATAOUT:
; 887  :                     /*Host to device*/
; 888  :                     _HOST_CSR0 = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)));

  0216c	e59d30a8	 ldr         r3, [sp, #0xA8]
  02170	e2833f52	 add         r3, r3, #0x52, 30
  02174	e5933000	 ldr         r3, [r3]
  02178	e2833c05	 add         r3, r3, #5, 24
  0217c	e2833002	 add         r3, r3, #2
  02180	e1d330b0	 ldrh        r3, [r3]
  02184	e1cd33b6	 strh        r3, [sp, #0x36]

; 889  :                     if(!(_HOST_CSR0 & MGC_M_CSR0_TXPKTRDY)){

  02188	e1dd33b6	 ldrh        r3, [sp, #0x36]
  0218c	e3130002	 tst         r3, #2
  02190	1a000012	 bne         |$LN48@UsbInterru@2|

; 890  :                         /*TX successful*/
; 891  :                         if(!pTD->BytesToTransfer){

  02194	e59d3008	 ldr         r3, [sp, #8]
  02198	e2833058	 add         r3, r3, #0x58
  0219c	e5933000	 ldr         r3, [r3]
  021a0	e3530000	 cmp         r3, #0
  021a4	1a000004	 bne         |$LN47@UsbInterru@2|

; 892  :                             /*data phase complete*/
; 893  :                             pTD->TransferStage = STAGE_STATUSIN;

  021a8	e59d3008	 ldr         r3, [sp, #8]
  021ac	e2832050	 add         r2, r3, #0x50
  021b0	e3a03003	 mov         r3, #3
  021b4	e5823000	 str         r3, [r2]

; 894  :                         }
; 895  :                         else{

  021b8	ea000003	 b           |$LN46@UsbInterru@2|
  021bc		 |$LN47@UsbInterru@2|

; 896  :                             /* data phase to continue*/
; 897  :                             pTD->TransferStage = STAGE_DATAOUT;

  021bc	e59d3008	 ldr         r3, [sp, #8]
  021c0	e2832050	 add         r2, r3, #0x50
  021c4	e3a03002	 mov         r3, #2
  021c8	e5823000	 str         r3, [r2]
  021cc		 |$LN46@UsbInterru@2|

; 898  :                         }
; 899  :                         pED->TransferStatus = STATUS_IDLE;

  021cc	e59d3028	 ldr         r3, [sp, #0x28]
  021d0	e283201c	 add         r2, r3, #0x1C
  021d4	e3a03000	 mov         r3, #0
  021d8	e5823000	 str         r3, [r2]

; 900  :                     }
; 901  :                     else{

  021dc	ea000012	 b           |$LN45@UsbInterru@2|
  021e0		 |$LN48@UsbInterru@2|

; 902  :                         RETAILMSG(FALSE,(TEXT("STAGE_DATAOUT:_HOST_CSR0 = 0x%x"),_HOST_CSR0));

  021e0	ea000006	 b           |$LN108@UsbInterru@2|
  021e4	e1dd33b6	 ldrh        r3, [sp, #0x36]
  021e8	e1a01003	 mov         r1, r3
  021ec	e59f0ce4	 ldr         r0, [pc, #0xCE4]
  021f0	eb000000	 bl          NKDbgPrintfW
  021f4	e3a03001	 mov         r3, #1
  021f8	e58d307c	 str         r3, [sp, #0x7C]
  021fc	ea000001	 b           |$LN109@UsbInterru@2|
  02200		 |$LN108@UsbInterru@2|
  02200	e3a03000	 mov         r3, #0
  02204	e58d307c	 str         r3, [sp, #0x7C]
  02208		 |$LN109@UsbInterru@2|

; 903  :                         RETAILMSG(0, (L"2CTL_%08X\r\n", pTD));

  02208	ea000005	 b           |$LN110@UsbInterru@2|
  0220c	e59d1008	 ldr         r1, [sp, #8]
  02210	e59f0cbc	 ldr         r0, [pc, #0xCBC]
  02214	eb000000	 bl          NKDbgPrintfW
  02218	e3a03001	 mov         r3, #1
  0221c	e58d3080	 str         r3, [sp, #0x80]
  02220	ea000001	 b           |$LN111@UsbInterru@2|
  02224		 |$LN110@UsbInterru@2|
  02224	e3a03000	 mov         r3, #0
  02228	e58d3080	 str         r3, [sp, #0x80]
  0222c		 |$LN111@UsbInterru@2|
  0222c		 |$LN45@UsbInterru@2|

; 904  :                     }
; 905  :                     break;

  0222c	ea000074	 b           |$LN63@UsbInterru@2|
  02230		 |$LN44@UsbInterru@2|

; 906  :                 case STAGE_STATUSIN:
; 907  :                     _HOST_CSR0 = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)));

  02230	e59d30a8	 ldr         r3, [sp, #0xA8]
  02234	e2833f52	 add         r3, r3, #0x52, 30
  02238	e5933000	 ldr         r3, [r3]
  0223c	e2833c05	 add         r3, r3, #5, 24
  02240	e2833002	 add         r3, r3, #2
  02244	e1d330b0	 ldrh        r3, [r3]
  02248	e1cd33b6	 strh        r3, [sp, #0x36]

; 908  :                     if (_HOST_CSR0 & MGC_M_CSR0_RXPKTRDY) {

  0224c	e1dd33b6	 ldrh        r3, [sp, #0x36]
  02250	e3130001	 tst         r3, #1
  02254	0a00000e	 beq         |$LN43@UsbInterru@2|

; 909  :                         _HOST_CSR0 &= (~MGC_M_CSR0_RXPKTRDY);

  02258	e1dd33b6	 ldrh        r3, [sp, #0x36]
  0225c	e1a02003	 mov         r2, r3
  02260	e3e03001	 mvn         r3, #1
  02264	e0023003	 and         r3, r2, r3
  02268	e1a03803	 mov         r3, r3, lsl #16
  0226c	e1a03823	 mov         r3, r3, lsr #16
  02270	e1cd33b6	 strh        r3, [sp, #0x36]

; 910  :                         WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)),_HOST_CSR0);

  02274	e59d30a8	 ldr         r3, [sp, #0xA8]
  02278	e2833f52	 add         r3, r3, #0x52, 30
  0227c	e5933000	 ldr         r3, [r3]
  02280	e2833c05	 add         r3, r3, #5, 24
  02284	e2832002	 add         r2, r3, #2
  02288	e1dd33b6	 ldrh        r3, [sp, #0x36]
  0228c	e1c230b0	 strh        r3, [r2]

; 911  :                     }
; 912  :                     else{

  02290	ea000009	 b           |$LN42@UsbInterru@2|
  02294		 |$LN43@UsbInterru@2|

; 913  :                         RETAILMSG(FALSE,(TEXT("STAGE_STATUSIN:_HOST_CSR0 = 0x%x"),_HOST_CSR0));

  02294	ea000006	 b           |$LN112@UsbInterru@2|
  02298	e1dd33b6	 ldrh        r3, [sp, #0x36]
  0229c	e1a01003	 mov         r1, r3
  022a0	e59f0c28	 ldr         r0, [pc, #0xC28]
  022a4	eb000000	 bl          NKDbgPrintfW
  022a8	e3a03001	 mov         r3, #1
  022ac	e58d3084	 str         r3, [sp, #0x84]
  022b0	ea000001	 b           |$LN113@UsbInterru@2|
  022b4		 |$LN112@UsbInterru@2|
  022b4	e3a03000	 mov         r3, #0
  022b8	e58d3084	 str         r3, [sp, #0x84]
  022bc		 |$LN113@UsbInterru@2|
  022bc		 |$LN42@UsbInterru@2|

; 914  :                     }
; 915  :                     *pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;

  022bc	e59d3008	 ldr         r3, [sp, #8]
  022c0	e2831054	 add         r1, r3, #0x54
  022c4	e59d3008	 ldr         r3, [sp, #8]
  022c8	e2833044	 add         r3, r3, #0x44
  022cc	e5932000	 ldr         r2, [r3]
  022d0	e5913000	 ldr         r3, [r1]
  022d4	e5823000	 str         r3, [r2]

; 916  :                     *pTD->sTransfer.lpfComplete = TRUE;

  022d8	e59d3008	 ldr         r3, [sp, #8]
  022dc	e2833040	 add         r3, r3, #0x40
  022e0	e5932000	 ldr         r2, [r3]
  022e4	e3a03001	 mov         r3, #1
  022e8	e5823000	 str         r3, [r2]

; 917  :                     *pTD->sTransfer.lpdwError = USB_NO_ERROR;

  022ec	e59d3008	 ldr         r3, [sp, #8]
  022f0	e2833048	 add         r3, r3, #0x48
  022f4	e5932000	 ldr         r2, [r3]
  022f8	e3a03000	 mov         r3, #0
  022fc	e5823000	 str         r3, [r2]

; 918  :                     pED->TransferStatus = STATUS_COMPLETE;

  02300	e59d3028	 ldr         r3, [sp, #0x28]
  02304	e283201c	 add         r2, r3, #0x1C
  02308	e3a03002	 mov         r3, #2
  0230c	e5823000	 str         r3, [r2]

; 919  :                     RETAILMSG(0, (L"3CTL_%08X\r\n", pTD));

  02310	ea000005	 b           |$LN114@UsbInterru@2|
  02314	e59d1008	 ldr         r1, [sp, #8]
  02318	e59f0bac	 ldr         r0, [pc, #0xBAC]
  0231c	eb000000	 bl          NKDbgPrintfW
  02320	e3a03001	 mov         r3, #1
  02324	e58d3088	 str         r3, [sp, #0x88]
  02328	ea000001	 b           |$LN115@UsbInterru@2|
  0232c		 |$LN114@UsbInterru@2|
  0232c	e3a03000	 mov         r3, #0
  02330	e58d3088	 str         r3, [sp, #0x88]
  02334		 |$LN115@UsbInterru@2|

; 920  :                     break;

  02334	ea000032	 b           |$LN63@UsbInterru@2|
  02338		 |$LN41@UsbInterru@2|

; 921  :                 case STAGE_STATUSOUT:
; 922  :                     _HOST_CSR0 = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)));

  02338	e59d30a8	 ldr         r3, [sp, #0xA8]
  0233c	e2833f52	 add         r3, r3, #0x52, 30
  02340	e5933000	 ldr         r3, [r3]
  02344	e2833c05	 add         r3, r3, #5, 24
  02348	e2833002	 add         r3, r3, #2
  0234c	e1d330b0	 ldrh        r3, [r3]
  02350	e1cd33b6	 strh        r3, [sp, #0x36]

; 923  :                     if(!(_HOST_CSR0 & MGC_M_CSR0_TXPKTRDY)){

  02354	e1dd33b6	 ldrh        r3, [sp, #0x36]
  02358	e3130002	 tst         r3, #2
  0235c	1a000000	 bne         |$LN40@UsbInterru@2|

; 924  :                         /*TX successful*/
; 925  :                     }
; 926  :                     else {

  02360	ea000009	 b           |$LN39@UsbInterru@2|
  02364		 |$LN40@UsbInterru@2|

; 927  :                         RETAILMSG(FALSE,(TEXT("STAGE_STATUSOUT:_HOST_CSR0 = 0x%x"),_HOST_CSR0));

  02364	ea000006	 b           |$LN116@UsbInterru@2|
  02368	e1dd33b6	 ldrh        r3, [sp, #0x36]
  0236c	e1a01003	 mov         r1, r3
  02370	e59f0b50	 ldr         r0, [pc, #0xB50]
  02374	eb000000	 bl          NKDbgPrintfW
  02378	e3a03001	 mov         r3, #1
  0237c	e58d308c	 str         r3, [sp, #0x8C]
  02380	ea000001	 b           |$LN117@UsbInterru@2|
  02384		 |$LN116@UsbInterru@2|
  02384	e3a03000	 mov         r3, #0
  02388	e58d308c	 str         r3, [sp, #0x8C]
  0238c		 |$LN117@UsbInterru@2|
  0238c		 |$LN39@UsbInterru@2|

; 928  :                     }
; 929  :                     *pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;

  0238c	e59d3008	 ldr         r3, [sp, #8]
  02390	e2831054	 add         r1, r3, #0x54
  02394	e59d3008	 ldr         r3, [sp, #8]
  02398	e2833044	 add         r3, r3, #0x44
  0239c	e5932000	 ldr         r2, [r3]
  023a0	e5913000	 ldr         r3, [r1]
  023a4	e5823000	 str         r3, [r2]

; 930  :                     *pTD->sTransfer.lpfComplete = TRUE;

  023a8	e59d3008	 ldr         r3, [sp, #8]
  023ac	e2833040	 add         r3, r3, #0x40
  023b0	e5932000	 ldr         r2, [r3]
  023b4	e3a03001	 mov         r3, #1
  023b8	e5823000	 str         r3, [r2]

; 931  :                     *pTD->sTransfer.lpdwError = USB_NO_ERROR;

  023bc	e59d3008	 ldr         r3, [sp, #8]
  023c0	e2833048	 add         r3, r3, #0x48
  023c4	e5932000	 ldr         r2, [r3]
  023c8	e3a03000	 mov         r3, #0
  023cc	e5823000	 str         r3, [r2]

; 932  :                     pED->TransferStatus = STATUS_COMPLETE;

  023d0	e59d3028	 ldr         r3, [sp, #0x28]
  023d4	e283201c	 add         r2, r3, #0x1C
  023d8	e3a03002	 mov         r3, #2
  023dc	e5823000	 str         r3, [r2]

; 933  :                     RETAILMSG(0, (L"4CTL_%08X\r\n", pTD));

  023e0	ea000005	 b           |$LN118@UsbInterru@2|
  023e4	e59d1008	 ldr         r1, [sp, #8]
  023e8	e59f0ad4	 ldr         r0, [pc, #0xAD4]
  023ec	eb000000	 bl          NKDbgPrintfW
  023f0	e3a03001	 mov         r3, #1
  023f4	e58d3090	 str         r3, [sp, #0x90]
  023f8	ea000001	 b           |$LN119@UsbInterru@2|
  023fc		 |$LN118@UsbInterru@2|
  023fc	e3a03000	 mov         r3, #0
  02400	e58d3090	 str         r3, [sp, #0x90]
  02404		 |$LN119@UsbInterru@2|
  02404		 |$LN63@UsbInterru@2|
  02404		 |$LN75@UsbInterru@2|
  02404		 |$LN65@UsbInterru@2|
  02404		 |$LN70@UsbInterru@2|
  02404		 |$LN73@UsbInterru@2|
  02404		 |$_skipControl$41847|

; 934  :                     break;
; 935  :             }
; 936  :         }
; 937  : 
; 938  : _skipControl:
; 939  : 
; 940  :         /*RX interrupt*/
; 941  :         Reg = IntrRxValue;

  02404	e5dd3030	 ldrb        r3, [sp, #0x30]
  02408	e5cd302d	 strb        r3, [sp, #0x2D]

; 942  :         bShift = 1;

  0240c	e3a03001	 mov         r3, #1
  02410	e5cd302c	 strb        r3, [sp, #0x2C]

; 943  :         Reg >>= 1;

  02414	e5dd302d	 ldrb        r3, [sp, #0x2D]
  02418	e1a030a3	 mov         r3, r3, lsr #1
  0241c	e20330ff	 and         r3, r3, #0xFF
  02420	e5cd302d	 strb        r3, [sp, #0x2D]
  02424		 |$LN38@UsbInterru@2|

; 944  :         while (Reg) {

  02424	e5dd302d	 ldrb        r3, [sp, #0x2D]
  02428	e3530000	 cmp         r3, #0
  0242c	0a000178	 beq         |$LN37@UsbInterru@2|

; 945  :             if (Reg & 1) {

  02430	e5dd302d	 ldrb        r3, [sp, #0x2D]
  02434	e3130001	 tst         r3, #1
  02438	0a00016c	 beq         |$LN36@UsbInterru@2|

; 946  :                 pED = (USBED*)m_pProcessEDIn[bShift - 1];

  0243c	e59d30a8	 ldr         r3, [sp, #0xA8]
  02440	e28310c8	 add         r1, r3, #0xC8
  02444	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02448	e2432001	 sub         r2, r3, #1
  0244c	e3a03004	 mov         r3, #4
  02450	e0030392	 mul         r3, r2, r3
  02454	e0813003	 add         r3, r1, r3
  02458	e5933000	 ldr         r3, [r3]
  0245c	e58d3028	 str         r3, [sp, #0x28]

; 947  :                 if(pED){

  02460	e59d3028	 ldr         r3, [sp, #0x28]
  02464	e3530000	 cmp         r3, #0
  02468	0a000160	 beq         |$LN35@UsbInterru@2|

; 948  :                     pTD = (USBTD*)pED->HeadTD;

  0246c	e59d3028	 ldr         r3, [sp, #0x28]
  02470	e2833014	 add         r3, r3, #0x14
  02474	e5933000	 ldr         r3, [r3]
  02478	e58d3008	 str         r3, [sp, #8]

; 949  : 
; 950  :                     // Skip if no TDs or only the NULL TD
; 951  :                     if (!pTD || pED->HeadTD == pED->TailTD)

  0247c	e59d3008	 ldr         r3, [sp, #8]
  02480	e3530000	 cmp         r3, #0
  02484	0a000007	 beq         |$LN33@UsbInterru@2|
  02488	e59d3028	 ldr         r3, [sp, #0x28]
  0248c	e2832014	 add         r2, r3, #0x14
  02490	e59d3028	 ldr         r3, [sp, #0x28]
  02494	e2833018	 add         r3, r3, #0x18
  02498	e5922000	 ldr         r2, [r2]
  0249c	e5933000	 ldr         r3, [r3]
  024a0	e1520003	 cmp         r2, r3
  024a4	1a000001	 bne         |$LN34@UsbInterru@2|
  024a8		 |$LN33@UsbInterru@2|

; 952  :                     {
; 953  :                         goto _skipRx;

  024a8	ea000159	 b           |$LN32@UsbInterru@2|
  024ac	ea000158	 b           |$_skipRx$41919|
  024b0		 |$LN34@UsbInterru@2|

; 954  :                     }
; 955  : 
; 956  :                     _HOST_RXCSR = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(bShift, MGC_O_HDRC_RXCSR)));

  024b0	e59d30a8	 ldr         r3, [sp, #0xA8]
  024b4	e2831f52	 add         r1, r3, #0x52, 30
  024b8	e5dd302c	 ldrb        r3, [sp, #0x2C]
  024bc	e1a02003	 mov         r2, r3
  024c0	e3a03010	 mov         r3, #0x10
  024c4	e0030392	 mul         r3, r2, r3
  024c8	e2833c05	 add         r3, r3, #5, 24
  024cc	e2832006	 add         r2, r3, #6
  024d0	e5913000	 ldr         r3, [r1]
  024d4	e0833002	 add         r3, r3, r2
  024d8	e1d330b0	 ldrh        r3, [r3]
  024dc	e1cd32be	 strh        r3, [sp, #0x2E]

; 957  : 
; 958  :                     /*check for RXPKTRDY*/
; 959  :                     if (_HOST_RXCSR & MGC_M_RXCSR_RXPKTRDY) {

  024e0	e1dd32be	 ldrh        r3, [sp, #0x2E]
  024e4	e3130001	 tst         r3, #1
  024e8	0a0000ee	 beq         |$LN31@UsbInterru@2|

; 960  :                         //pED->bfToggleCarry = (!pED->bfToggleCarry);
; 961  :                         pED->bfToggleCarry = (_HOST_RXCSR & (0x1<<9));

  024ec	e1dd32be	 ldrh        r3, [sp, #0x2E]
  024f0	e2033c02	 and         r3, r3, #2, 24
  024f4	e1a02803	 mov         r2, r3, lsl #16
  024f8	e1a02822	 mov         r2, r2, lsr #16
  024fc	e59d3028	 ldr         r3, [sp, #0x28]
  02500	e2833028	 add         r3, r3, #0x28
  02504	e1c320b0	 strh        r2, [r3]

; 962  :                         pPkt = (UINT8*)pTD->sTransfer.lpvClientBuffer;

  02508	e59d3008	 ldr         r3, [sp, #8]
  0250c	e283302c	 add         r3, r3, #0x2C
  02510	e5933000	 ldr         r3, [r3]
  02514	e58d3024	 str         r3, [sp, #0x24]

; 963  :                         CopyCount = _RXCOUNT = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(bShift, MGC_O_HDRC_RXCOUNT)));

  02518	e59d30a8	 ldr         r3, [sp, #0xA8]
  0251c	e2831f52	 add         r1, r3, #0x52, 30
  02520	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02524	e1a02003	 mov         r2, r3
  02528	e3a03010	 mov         r3, #0x10
  0252c	e0030392	 mul         r3, r2, r3
  02530	e2833c05	 add         r3, r3, #5, 24
  02534	e2832008	 add         r2, r3, #8
  02538	e5913000	 ldr         r3, [r1]
  0253c	e0833002	 add         r3, r3, r2
  02540	e1d330b0	 ldrh        r3, [r3]
  02544	e1cd33b4	 strh        r3, [sp, #0x34]
  02548	e1dd33b4	 ldrh        r3, [sp, #0x34]
  0254c	e58d3018	 str         r3, [sp, #0x18]

; 964  : 
; 965  : 
; 966  : 						if(pTD->BytesToTransfer < CopyCount) {

  02550	e59d3008	 ldr         r3, [sp, #8]
  02554	e2833058	 add         r3, r3, #0x58
  02558	e5932000	 ldr         r2, [r3]
  0255c	e59d3018	 ldr         r3, [sp, #0x18]
  02560	e1520003	 cmp         r2, r3
  02564	2a00003c	 bcs         |$LN30@UsbInterru@2|
  02568		 |$LN29@UsbInterru@2|

; 967  :                             /*data OVERRUN*/
; 968  :                             UINT8 temp;
; 969  :                             while (CopyCount) {

  02568	e59d3018	 ldr         r3, [sp, #0x18]
  0256c	e3530000	 cmp         r3, #0
  02570	0a00000e	 beq         |$LN28@UsbInterru@2|

; 970  :                                 temp = READ_PORT_UCHAR( (m_portBase+MGC_FIFO_OFFSET(bShift)));

  02574	e59d30a8	 ldr         r3, [sp, #0xA8]
  02578	e2831f52	 add         r1, r3, #0x52, 30
  0257c	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02580	e1a02003	 mov         r2, r3
  02584	e3a03004	 mov         r3, #4
  02588	e0030392	 mul         r3, r2, r3
  0258c	e2832e42	 add         r2, r3, #0x42, 28
  02590	e5913000	 ldr         r3, [r1]
  02594	e0833002	 add         r3, r3, r2
  02598	e5d33000	 ldrb        r3, [r3]
  0259c	e5cd303c	 strb        r3, [sp, #0x3C]

; 971  :                                 CopyCount--;

  025a0	e59d3018	 ldr         r3, [sp, #0x18]
  025a4	e2433001	 sub         r3, r3, #1
  025a8	e58d3018	 str         r3, [sp, #0x18]

; 972  :                             }

  025ac	eaffffed	 b           |$LN29@UsbInterru@2|
  025b0		 |$LN28@UsbInterru@2|

; 973  :                             _HOST_RXCSR &= (~MGC_M_RXCSR_RXPKTRDY);

  025b0	e1dd32be	 ldrh        r3, [sp, #0x2E]
  025b4	e1a02003	 mov         r2, r3
  025b8	e3e03001	 mvn         r3, #1
  025bc	e0023003	 and         r3, r2, r3
  025c0	e1a03803	 mov         r3, r3, lsl #16
  025c4	e1a03823	 mov         r3, r3, lsr #16
  025c8	e1cd32be	 strh        r3, [sp, #0x2E]

; 974  :                             WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(bShift, MGC_O_HDRC_RXCSR)),_HOST_RXCSR/*|MGC_M_RXCSR_FLUSHFIFO*/);

  025cc	e59d30a8	 ldr         r3, [sp, #0xA8]
  025d0	e2831f52	 add         r1, r3, #0x52, 30
  025d4	e5dd302c	 ldrb        r3, [sp, #0x2C]
  025d8	e1a02003	 mov         r2, r3
  025dc	e3a03010	 mov         r3, #0x10
  025e0	e0030392	 mul         r3, r2, r3
  025e4	e2833c05	 add         r3, r3, #5, 24
  025e8	e2832006	 add         r2, r3, #6
  025ec	e5913000	 ldr         r3, [r1]
  025f0	e0832002	 add         r2, r3, r2
  025f4	e1dd32be	 ldrh        r3, [sp, #0x2E]
  025f8	e1c230b0	 strh        r3, [r2]

; 975  :                             *pTD->sTransfer.lpdwBytesTransferred = 0;

  025fc	e59d3008	 ldr         r3, [sp, #8]
  02600	e2833044	 add         r3, r3, #0x44
  02604	e5932000	 ldr         r2, [r3]
  02608	e3a03000	 mov         r3, #0
  0260c	e5823000	 str         r3, [r2]

; 976  :                             *pTD->sTransfer.lpfComplete = TRUE;

  02610	e59d3008	 ldr         r3, [sp, #8]
  02614	e2833040	 add         r3, r3, #0x40
  02618	e5932000	 ldr         r2, [r3]
  0261c	e3a03001	 mov         r3, #1
  02620	e5823000	 str         r3, [r2]

; 977  :                             *pTD->sTransfer.lpdwError = USB_DATA_OVERRUN_ERROR;

  02624	e59d3008	 ldr         r3, [sp, #8]
  02628	e2833048	 add         r3, r3, #0x48
  0262c	e5932000	 ldr         r2, [r3]
  02630	e3a03008	 mov         r3, #8
  02634	e5823000	 str         r3, [r2]

; 978  :                             pED->bfHalted = TRUE;

  02638	e59d3028	 ldr         r3, [sp, #0x28]
  0263c	e2832024	 add         r2, r3, #0x24
  02640	e3a03001	 mov         r3, #1
  02644	e5823000	 str         r3, [r2]

; 979  :                             pED->TransferStatus = STATUS_COMPLETE;

  02648	e59d3028	 ldr         r3, [sp, #0x28]
  0264c	e283201c	 add         r2, r3, #0x1C
  02650	e3a03002	 mov         r3, #2
  02654	e5823000	 str         r3, [r2]

; 980  :                         }
; 981  :                         else{

  02658	ea000091	 b           |$LN27@UsbInterru@2|
  0265c		 |$LN30@UsbInterru@2|

; 982  :                             pData = pPkt;

  0265c	e59d3024	 ldr         r3, [sp, #0x24]
  02660	e58d3014	 str         r3, [sp, #0x14]

; 983  :                             pData += pTD->BytesTransferred;

  02664	e59d3008	 ldr         r3, [sp, #8]
  02668	e2833054	 add         r3, r3, #0x54
  0266c	e59d2014	 ldr         r2, [sp, #0x14]
  02670	e5933000	 ldr         r3, [r3]
  02674	e0823003	 add         r3, r2, r3
  02678	e58d3014	 str         r3, [sp, #0x14]

; 984  : 
; 985  : 							ReadFIFO((DWORD*)(m_portBase+MGC_FIFO_OFFSET(bShift)), pData, CopyCount);

  0267c	e59d2018	 ldr         r2, [sp, #0x18]
  02680	e59d1014	 ldr         r1, [sp, #0x14]
  02684	e59d30a8	 ldr         r3, [sp, #0xA8]
  02688	e283ef52	 add         lr, r3, #0x52, 30
  0268c	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02690	e1a00003	 mov         r0, r3
  02694	e3a03004	 mov         r3, #4
  02698	e0030390	 mul         r3, r0, r3
  0269c	e2830e42	 add         r0, r3, #0x42, 28
  026a0	e59e3000	 ldr         r3, [lr]
  026a4	e0830000	 add         r0, r3, r0
  026a8	eb000000	 bl          |?ReadFIFO@@YAHPAKPAXK@Z|

; 986  : 
; 987  :                             pTD->BytesTransferred += _RXCOUNT;

  026ac	e59d3008	 ldr         r3, [sp, #8]
  026b0	e2833054	 add         r3, r3, #0x54
  026b4	e1dd23b4	 ldrh        r2, [sp, #0x34]
  026b8	e5933000	 ldr         r3, [r3]
  026bc	e0832002	 add         r2, r3, r2
  026c0	e59d3008	 ldr         r3, [sp, #8]
  026c4	e2833054	 add         r3, r3, #0x54
  026c8	e5832000	 str         r2, [r3]

; 988  :                             pTD->BytesToTransfer -= _RXCOUNT;

  026cc	e59d3008	 ldr         r3, [sp, #8]
  026d0	e2833058	 add         r3, r3, #0x58
  026d4	e1dd23b4	 ldrh        r2, [sp, #0x34]
  026d8	e5933000	 ldr         r3, [r3]
  026dc	e0432002	 sub         r2, r3, r2
  026e0	e59d3008	 ldr         r3, [sp, #8]
  026e4	e2833058	 add         r3, r3, #0x58
  026e8	e5832000	 str         r2, [r3]

; 989  :                             _HOST_RXCSR &= (~MGC_M_RXCSR_RXPKTRDY);

  026ec	e1dd32be	 ldrh        r3, [sp, #0x2E]
  026f0	e1a02003	 mov         r2, r3
  026f4	e3e03001	 mvn         r3, #1
  026f8	e0023003	 and         r3, r2, r3
  026fc	e1a03803	 mov         r3, r3, lsl #16
  02700	e1a03823	 mov         r3, r3, lsr #16
  02704	e1cd32be	 strh        r3, [sp, #0x2E]

; 990  :                             WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(bShift, MGC_O_HDRC_RXCSR)),_HOST_RXCSR);

  02708	e59d30a8	 ldr         r3, [sp, #0xA8]
  0270c	e2831f52	 add         r1, r3, #0x52, 30
  02710	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02714	e1a02003	 mov         r2, r3
  02718	e3a03010	 mov         r3, #0x10
  0271c	e0030392	 mul         r3, r2, r3
  02720	e2833c05	 add         r3, r3, #5, 24
  02724	e2832006	 add         r2, r3, #6
  02728	e5913000	 ldr         r3, [r1]
  0272c	e0832002	 add         r2, r3, r2
  02730	e1dd32be	 ldrh        r3, [sp, #0x2E]
  02734	e1c230b0	 strh        r3, [r2]

; 991  :     /*5.8.3 of USB 2.0*/
; 992  :                             if(!pTD->BytesToTransfer){

  02738	e59d3008	 ldr         r3, [sp, #8]
  0273c	e2833058	 add         r3, r3, #0x58
  02740	e5933000	 ldr         r3, [r3]
  02744	e3530000	 cmp         r3, #0
  02748	1a000015	 bne         |$LN26@UsbInterru@2|

; 993  :                                 *pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;

  0274c	e59d3008	 ldr         r3, [sp, #8]
  02750	e2831054	 add         r1, r3, #0x54
  02754	e59d3008	 ldr         r3, [sp, #8]
  02758	e2833044	 add         r3, r3, #0x44
  0275c	e5932000	 ldr         r2, [r3]
  02760	e5913000	 ldr         r3, [r1]
  02764	e5823000	 str         r3, [r2]

; 994  :                                 *pTD->sTransfer.lpfComplete = TRUE;

  02768	e59d3008	 ldr         r3, [sp, #8]
  0276c	e2833040	 add         r3, r3, #0x40
  02770	e5932000	 ldr         r2, [r3]
  02774	e3a03001	 mov         r3, #1
  02778	e5823000	 str         r3, [r2]

; 995  :                                 *pTD->sTransfer.lpdwError = USB_NO_ERROR;

  0277c	e59d3008	 ldr         r3, [sp, #8]
  02780	e2833048	 add         r3, r3, #0x48
  02784	e5932000	 ldr         r2, [r3]
  02788	e3a03000	 mov         r3, #0
  0278c	e5823000	 str         r3, [r2]

; 996  :                                 pED->TransferStatus = STATUS_COMPLETE;

  02790	e59d3028	 ldr         r3, [sp, #0x28]
  02794	e283201c	 add         r2, r3, #0x1C
  02798	e3a03002	 mov         r3, #2
  0279c	e5823000	 str         r3, [r2]
  027a0	ea00003f	 b           |$LN25@UsbInterru@2|
  027a4		 |$LN26@UsbInterru@2|

; 997  :                             }
; 998  :                             else if(_RXCOUNT < pED->bfMaxPacketSize){

  027a4	e1dd33b4	 ldrh        r3, [sp, #0x34]
  027a8	e1a02003	 mov         r2, r3
  027ac	e59d3028	 ldr         r3, [sp, #0x28]
  027b0	e283300e	 add         r3, r3, #0xE
  027b4	e1d330b0	 ldrh        r3, [r3]
  027b8	e1520003	 cmp         r2, r3
  027bc	aa000034	 bge         |$LN24@UsbInterru@2|

; 999  :                                 /*data UNDERRUN (pTD->BytesToTransfer is not 0) handling depending on USB_SHORT_TRANSFER_OK*/
; 1000 :                                 if(pTD->sTransfer.dwFlags & USB_SHORT_TRANSFER_OK){

  027c0	e59d3008	 ldr         r3, [sp, #8]
  027c4	e2833010	 add         r3, r3, #0x10
  027c8	e5933000	 ldr         r3, [r3]
  027cc	e3130c02	 tst         r3, #2, 24
  027d0	0a000015	 beq         |$LN23@UsbInterru@2|

; 1001 :                                     *pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;

  027d4	e59d3008	 ldr         r3, [sp, #8]
  027d8	e2831054	 add         r1, r3, #0x54
  027dc	e59d3008	 ldr         r3, [sp, #8]
  027e0	e2833044	 add         r3, r3, #0x44
  027e4	e5932000	 ldr         r2, [r3]
  027e8	e5913000	 ldr         r3, [r1]
  027ec	e5823000	 str         r3, [r2]

; 1002 :                                     *pTD->sTransfer.lpfComplete = TRUE;

  027f0	e59d3008	 ldr         r3, [sp, #8]
  027f4	e2833040	 add         r3, r3, #0x40
  027f8	e5932000	 ldr         r2, [r3]
  027fc	e3a03001	 mov         r3, #1
  02800	e5823000	 str         r3, [r2]

; 1003 :                                     *pTD->sTransfer.lpdwError = USB_NO_ERROR;

  02804	e59d3008	 ldr         r3, [sp, #8]
  02808	e2833048	 add         r3, r3, #0x48
  0280c	e5932000	 ldr         r2, [r3]
  02810	e3a03000	 mov         r3, #0
  02814	e5823000	 str         r3, [r2]

; 1004 :                                     pED->TransferStatus = STATUS_COMPLETE;

  02818	e59d3028	 ldr         r3, [sp, #0x28]
  0281c	e283201c	 add         r2, r3, #0x1C
  02820	e3a03002	 mov         r3, #2
  02824	e5823000	 str         r3, [r2]

; 1005 :                                 }
; 1006 :                                 else{

  02828	ea000018	 b           |$LN22@UsbInterru@2|
  0282c		 |$LN23@UsbInterru@2|

; 1007 :                                     *pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;

  0282c	e59d3008	 ldr         r3, [sp, #8]
  02830	e2831054	 add         r1, r3, #0x54
  02834	e59d3008	 ldr         r3, [sp, #8]
  02838	e2833044	 add         r3, r3, #0x44
  0283c	e5932000	 ldr         r2, [r3]
  02840	e5913000	 ldr         r3, [r1]
  02844	e5823000	 str         r3, [r2]

; 1008 :                                     *pTD->sTransfer.lpfComplete = TRUE;

  02848	e59d3008	 ldr         r3, [sp, #8]
  0284c	e2833040	 add         r3, r3, #0x40
  02850	e5932000	 ldr         r2, [r3]
  02854	e3a03001	 mov         r3, #1
  02858	e5823000	 str         r3, [r2]

; 1009 :                                     *pTD->sTransfer.lpdwError = USB_DATA_UNDERRUN_ERROR;

  0285c	e59d3008	 ldr         r3, [sp, #8]
  02860	e2833048	 add         r3, r3, #0x48
  02864	e5932000	 ldr         r2, [r3]
  02868	e3a03009	 mov         r3, #9
  0286c	e5823000	 str         r3, [r2]

; 1010 :                                     pED->bfHalted = TRUE;

  02870	e59d3028	 ldr         r3, [sp, #0x28]
  02874	e2832024	 add         r2, r3, #0x24
  02878	e3a03001	 mov         r3, #1
  0287c	e5823000	 str         r3, [r2]

; 1011 :                                     pED->TransferStatus = STATUS_COMPLETE;

  02880	e59d3028	 ldr         r3, [sp, #0x28]
  02884	e283201c	 add         r2, r3, #0x1C
  02888	e3a03002	 mov         r3, #2
  0288c	e5823000	 str         r3, [r2]
  02890		 |$LN22@UsbInterru@2|

; 1012 :                                 }
; 1013 :                             }
; 1014 :                             else

  02890	ea000003	 b           |$LN21@UsbInterru@2|
  02894		 |$LN24@UsbInterru@2|

; 1015 :                                 pED->TransferStatus = STATUS_IDLE;

  02894	e59d3028	 ldr         r3, [sp, #0x28]
  02898	e283201c	 add         r2, r3, #0x1C
  0289c	e3a03000	 mov         r3, #0
  028a0	e5823000	 str         r3, [r2]
  028a4		 |$LN21@UsbInterru@2|
  028a4		 |$LN25@UsbInterru@2|
  028a4		 |$LN27@UsbInterru@2|

; 1016 :                         }
; 1017 :                     }
; 1018 :                     else{

  028a4	ea000051	 b           |$LN20@UsbInterru@2|
  028a8		 |$LN31@UsbInterru@2|

; 1019 :                         RETAILMSG(FALSE,(TEXT("hostEP= %d HOST_RXCSR = 0x%x"),pED->bHostEndPointNum,_HOST_RXCSR));

  028a8	ea00000a	 b           |$LN120@UsbInterru@2|
  028ac	e1dd32be	 ldrh        r3, [sp, #0x2E]
  028b0	e1a02003	 mov         r2, r3
  028b4	e59d3028	 ldr         r3, [sp, #0x28]
  028b8	e2833010	 add         r3, r3, #0x10
  028bc	e5d33000	 ldrb        r3, [r3]
  028c0	e1a01003	 mov         r1, r3
  028c4	e59f05f4	 ldr         r0, [pc, #0x5F4]
  028c8	eb000000	 bl          NKDbgPrintfW
  028cc	e3a03001	 mov         r3, #1
  028d0	e58d3094	 str         r3, [sp, #0x94]
  028d4	ea000001	 b           |$LN121@UsbInterru@2|
  028d8		 |$LN120@UsbInterru@2|
  028d8	e3a03000	 mov         r3, #0
  028dc	e58d3094	 str         r3, [sp, #0x94]
  028e0		 |$LN121@UsbInterru@2|

; 1020 : 
; 1021 :                         TransferStatus Status = STATUS_IDLE;

  028e0	e3a03000	 mov         r3, #0
  028e4	e58d3040	 str         r3, [sp, #0x40]

; 1022 :                         if(_HOST_RXCSR & MGC_M_RXCSR_H_ERROR){

  028e8	e1dd32be	 ldrh        r3, [sp, #0x2E]
  028ec	e3130004	 tst         r3, #4
  028f0	0a000008	 beq         |$LN19@UsbInterru@2|

; 1023 :                             _HOST_RXCSR &= (~(MGC_M_RXCSR_H_REQPKT|MGC_M_RXCSR_H_ERROR));

  028f4	e1dd32be	 ldrh        r3, [sp, #0x2E]
  028f8	e1a02003	 mov         r2, r3
  028fc	e3e03024	 mvn         r3, #0x24
  02900	e0023003	 and         r3, r2, r3
  02904	e1a03803	 mov         r3, r3, lsl #16
  02908	e1a03823	 mov         r3, r3, lsr #16
  0290c	e1cd32be	 strh        r3, [sp, #0x2E]

; 1024 :                             //*pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;
; 1025 :                             //*pTD->sTransfer.lpfComplete = TRUE;
; 1026 :                             //*pTD->sTransfer.lpdwError = USB_DEVICE_NOT_RESPONDING_ERROR;
; 1027 :                             Status = STATUS_NO_RESPONSE;

  02910	e3a03003	 mov         r3, #3
  02914	e58d3040	 str         r3, [sp, #0x40]
  02918		 |$LN19@UsbInterru@2|

; 1028 :                         }
; 1029 :                         if(_HOST_RXCSR & MGC_M_RXCSR_H_RXSTALL){

  02918	e1dd32be	 ldrh        r3, [sp, #0x2E]
  0291c	e3130040	 tst         r3, #0x40
  02920	0a000016	 beq         |$LN18@UsbInterru@2|

; 1030 :                             _HOST_RXCSR &= (~(MGC_M_RXCSR_H_REQPKT|MGC_M_RXCSR_H_RXSTALL));

  02924	e1dd32be	 ldrh        r3, [sp, #0x2E]
  02928	e1a02003	 mov         r2, r3
  0292c	e3e03060	 mvn         r3, #0x60
  02930	e0023003	 and         r3, r2, r3
  02934	e1a03803	 mov         r3, r3, lsl #16
  02938	e1a03823	 mov         r3, r3, lsr #16
  0293c	e1cd32be	 strh        r3, [sp, #0x2E]

; 1031 :                             //*pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;
; 1032 :                             *pTD->sTransfer.lpfComplete = TRUE;

  02940	e59d3008	 ldr         r3, [sp, #8]
  02944	e2833040	 add         r3, r3, #0x40
  02948	e5932000	 ldr         r2, [r3]
  0294c	e3a03001	 mov         r3, #1
  02950	e5823000	 str         r3, [r2]

; 1033 :                             *pTD->sTransfer.lpdwError = USB_STALL_ERROR;

  02954	e59d3008	 ldr         r3, [sp, #8]
  02958	e2833048	 add         r3, r3, #0x48
  0295c	e5932000	 ldr         r2, [r3]
  02960	e3a03004	 mov         r3, #4
  02964	e5823000	 str         r3, [r2]

; 1034 :                             pED->bfHalted = TRUE;

  02968	e59d3028	 ldr         r3, [sp, #0x28]
  0296c	e2832024	 add         r2, r3, #0x24
  02970	e3a03001	 mov         r3, #1
  02974	e5823000	 str         r3, [r2]

; 1035 :                             Status = STATUS_COMPLETE;

  02978	e3a03002	 mov         r3, #2
  0297c	e58d3040	 str         r3, [sp, #0x40]
  02980		 |$LN18@UsbInterru@2|

; 1036 :                         }
; 1037 :                         if(_HOST_RXCSR & MGC_M_RXCSR_DATAERROR){

  02980	e1dd32be	 ldrh        r3, [sp, #0x2E]
  02984	e3130008	 tst         r3, #8
  02988	0a000008	 beq         |$LN17@UsbInterru@2|

; 1038 :                             _HOST_RXCSR &= (~(MGC_M_RXCSR_H_REQPKT|MGC_M_RXCSR_DATAERROR));

  0298c	e1dd32be	 ldrh        r3, [sp, #0x2E]
  02990	e1a02003	 mov         r2, r3
  02994	e3e03028	 mvn         r3, #0x28
  02998	e0023003	 and         r3, r2, r3
  0299c	e1a03803	 mov         r3, r3, lsl #16
  029a0	e1a03823	 mov         r3, r3, lsr #16
  029a4	e1cd32be	 strh        r3, [sp, #0x2E]

; 1039 :                             //*pTD->sTransfer.lpfComplete = TRUE;
; 1040 :                             //*pTD->sTransfer.lpdwError = USB_DEVICE_NOT_RESPONDING_ERROR;
; 1041 :                             Status = STATUS_NAK;

  029a8	e3a03004	 mov         r3, #4
  029ac	e58d3040	 str         r3, [sp, #0x40]
  029b0		 |$LN17@UsbInterru@2|

; 1042 :                         }
; 1043 :                         WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(bShift, MGC_O_HDRC_RXCSR)),_HOST_RXCSR);

  029b0	e59d30a8	 ldr         r3, [sp, #0xA8]
  029b4	e2831f52	 add         r1, r3, #0x52, 30
  029b8	e5dd302c	 ldrb        r3, [sp, #0x2C]
  029bc	e1a02003	 mov         r2, r3
  029c0	e3a03010	 mov         r3, #0x10
  029c4	e0030392	 mul         r3, r2, r3
  029c8	e2833c05	 add         r3, r3, #5, 24
  029cc	e2832006	 add         r2, r3, #6
  029d0	e5913000	 ldr         r3, [r1]
  029d4	e0832002	 add         r2, r3, r2
  029d8	e1dd32be	 ldrh        r3, [sp, #0x2E]
  029dc	e1c230b0	 strh        r3, [r2]

; 1044 :                         pED->TransferStatus = Status;

  029e0	e59d3028	 ldr         r3, [sp, #0x28]
  029e4	e283201c	 add         r2, r3, #0x1C
  029e8	e59d3040	 ldr         r3, [sp, #0x40]
  029ec	e5823000	 str         r3, [r2]
  029f0		 |$LN20@UsbInterru@2|
  029f0		 |$LN35@UsbInterru@2|
  029f0		 |$LN36@UsbInterru@2|

; 1045 :                     }
; 1046 :                 }
; 1047 :             }
; 1048 :             Reg >>= 1;

  029f0	e5dd302d	 ldrb        r3, [sp, #0x2D]
  029f4	e1a030a3	 mov         r3, r3, lsr #1
  029f8	e20330ff	 and         r3, r3, #0xFF
  029fc	e5cd302d	 strb        r3, [sp, #0x2D]

; 1049 :             bShift++;

  02a00	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02a04	e2833001	 add         r3, r3, #1
  02a08	e20330ff	 and         r3, r3, #0xFF
  02a0c	e5cd302c	 strb        r3, [sp, #0x2C]

; 1050 :         }

  02a10	eafffe83	 b           |$LN38@UsbInterru@2|
  02a14		 |$LN37@UsbInterru@2|
  02a14		 |$LN32@UsbInterru@2|
  02a14		 |$_skipRx$41919|

; 1051 : 
; 1052 : _skipRx:
; 1053 : 
; 1054 :         /*TX interrupt*/
; 1055 :         Reg = IntrTxValue;

  02a14	e5dd3010	 ldrb        r3, [sp, #0x10]
  02a18	e5cd302d	 strb        r3, [sp, #0x2D]

; 1056 :         bShift = 1;

  02a1c	e3a03001	 mov         r3, #1
  02a20	e5cd302c	 strb        r3, [sp, #0x2C]

; 1057 :         Reg >>= 1;

  02a24	e5dd302d	 ldrb        r3, [sp, #0x2D]
  02a28	e1a030a3	 mov         r3, r3, lsr #1
  02a2c	e20330ff	 and         r3, r3, #0xFF
  02a30	e5cd302d	 strb        r3, [sp, #0x2D]
  02a34		 |$LN16@UsbInterru@2|

; 1058 :         while (Reg) {

  02a34	e5dd302d	 ldrb        r3, [sp, #0x2D]
  02a38	e3530000	 cmp         r3, #0
  02a3c	0a0000d2	 beq         |$LN15@UsbInterru@2|

; 1059 :             if (Reg & 1) {

  02a40	e5dd302d	 ldrb        r3, [sp, #0x2D]
  02a44	e3130001	 tst         r3, #1
  02a48	0a0000c6	 beq         |$LN14@UsbInterru@2|

; 1060 :                 pED = (USBED*)m_pProcessEDOut[bShift - 1];

  02a4c	e59d30a8	 ldr         r3, [sp, #0xA8]
  02a50	e2831f41	 add         r1, r3, #0x41, 30
  02a54	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02a58	e2432001	 sub         r2, r3, #1
  02a5c	e3a03004	 mov         r3, #4
  02a60	e0030392	 mul         r3, r2, r3
  02a64	e0813003	 add         r3, r1, r3
  02a68	e5933000	 ldr         r3, [r3]
  02a6c	e58d3028	 str         r3, [sp, #0x28]

; 1061 :                 if(pED){

  02a70	e59d3028	 ldr         r3, [sp, #0x28]
  02a74	e3530000	 cmp         r3, #0
  02a78	0a0000ba	 beq         |$LN13@UsbInterru@2|

; 1062 :                     pTD = (USBTD*)pED->HeadTD;

  02a7c	e59d3028	 ldr         r3, [sp, #0x28]
  02a80	e2833014	 add         r3, r3, #0x14
  02a84	e5933000	 ldr         r3, [r3]
  02a88	e58d3008	 str         r3, [sp, #8]

; 1063 : 
; 1064 :                     // Skip if no TDs or only the NULL TD
; 1065 :                     if (!pTD || pED->HeadTD == pED->TailTD)

  02a8c	e59d3008	 ldr         r3, [sp, #8]
  02a90	e3530000	 cmp         r3, #0
  02a94	0a000007	 beq         |$LN11@UsbInterru@2|
  02a98	e59d3028	 ldr         r3, [sp, #0x28]
  02a9c	e2832014	 add         r2, r3, #0x14
  02aa0	e59d3028	 ldr         r3, [sp, #0x28]
  02aa4	e2833018	 add         r3, r3, #0x18
  02aa8	e5922000	 ldr         r2, [r2]
  02aac	e5933000	 ldr         r3, [r3]
  02ab0	e1520003	 cmp         r2, r3
  02ab4	1a000001	 bne         |$LN12@UsbInterru@2|
  02ab8		 |$LN11@UsbInterru@2|

; 1066 :                     {
; 1067 :                         goto _skipTx;

  02ab8	ea0000b3	 b           |$LN10@UsbInterru@2|
  02abc	ea0000b2	 b           |$_skipTx$41957|
  02ac0		 |$LN12@UsbInterru@2|

; 1068 :                     }
; 1069 : 
; 1070 :                     _HOST_TXCSR = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(bShift, MGC_O_HDRC_TXCSR)));

  02ac0	e59d30a8	 ldr         r3, [sp, #0xA8]
  02ac4	e2831f52	 add         r1, r3, #0x52, 30
  02ac8	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02acc	e1a02003	 mov         r2, r3
  02ad0	e3a03010	 mov         r3, #0x10
  02ad4	e0030392	 mul         r3, r2, r3
  02ad8	e2833c05	 add         r3, r3, #5, 24
  02adc	e2832002	 add         r2, r3, #2
  02ae0	e5913000	 ldr         r3, [r1]
  02ae4	e0833002	 add         r3, r3, r2
  02ae8	e1d330b0	 ldrh        r3, [r3]
  02aec	e1cd32b2	 strh        r3, [sp, #0x22]

; 1071 :                     if(!(_HOST_TXCSR & MGC_M_TXCSR_H_RXSTALL) &&
; 1072 :                        !(_HOST_TXCSR & MGC_M_TXCSR_H_NAKTIMEOUT) &&
; 1073 :                        !(_HOST_TXCSR & MGC_M_TXCSR_H_ERROR))

  02af0	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02af4	e3130020	 tst         r3, #0x20
  02af8	1a000047	 bne         |$LN9@UsbInterru@2|
  02afc	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02b00	e3130080	 tst         r3, #0x80
  02b04	1a000044	 bne         |$LN9@UsbInterru@2|
  02b08	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02b0c	e3130004	 tst         r3, #4
  02b10	1a000041	 bne         |$LN9@UsbInterru@2|

; 1074 :                     {
; 1075 :                         if (!(_HOST_TXCSR & MGC_M_TXCSR_TXPKTRDY))

  02b14	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02b18	e3130001	 tst         r3, #1
  02b1c	1a00003d	 bne         |$LN8@UsbInterru@2|

; 1076 :                         {
; 1077 :                             /*TX successful*/
; 1078 :                             //pED->bfToggleCarry = (!pED->bfToggleCarry);
; 1079 :                             pED->bfToggleCarry = (_HOST_TXCSR & (0x1<<8));

  02b20	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02b24	e2033c01	 and         r3, r3, #1, 24
  02b28	e1a02803	 mov         r2, r3, lsl #16
  02b2c	e1a02822	 mov         r2, r2, lsr #16
  02b30	e59d3028	 ldr         r3, [sp, #0x28]
  02b34	e2833028	 add         r3, r3, #0x28
  02b38	e1c320b0	 strh        r2, [r3]

; 1080 :                             pTD->BytesTransferred += pTD->TXCOUNT;

  02b3c	e59d3008	 ldr         r3, [sp, #8]
  02b40	e2832054	 add         r2, r3, #0x54
  02b44	e59d3008	 ldr         r3, [sp, #8]
  02b48	e283305c	 add         r3, r3, #0x5C
  02b4c	e5922000	 ldr         r2, [r2]
  02b50	e5933000	 ldr         r3, [r3]
  02b54	e0822003	 add         r2, r2, r3
  02b58	e59d3008	 ldr         r3, [sp, #8]
  02b5c	e2833054	 add         r3, r3, #0x54
  02b60	e5832000	 str         r2, [r3]

; 1081 :                             pTD->BytesToTransfer -= pTD->TXCOUNT;

  02b64	e59d3008	 ldr         r3, [sp, #8]
  02b68	e2832058	 add         r2, r3, #0x58
  02b6c	e59d3008	 ldr         r3, [sp, #8]
  02b70	e283305c	 add         r3, r3, #0x5C
  02b74	e5922000	 ldr         r2, [r2]
  02b78	e5933000	 ldr         r3, [r3]
  02b7c	e0422003	 sub         r2, r2, r3
  02b80	e59d3008	 ldr         r3, [sp, #8]
  02b84	e2833058	 add         r3, r3, #0x58
  02b88	e5832000	 str         r2, [r3]

; 1082 :                             pTD->TXCOUNT = 0;

  02b8c	e59d3008	 ldr         r3, [sp, #8]
  02b90	e283205c	 add         r2, r3, #0x5C
  02b94	e3a03000	 mov         r3, #0
  02b98	e5823000	 str         r3, [r2]

; 1083 :                             if(pTD->BytesToTransfer)

  02b9c	e59d3008	 ldr         r3, [sp, #8]
  02ba0	e2833058	 add         r3, r3, #0x58
  02ba4	e5933000	 ldr         r3, [r3]
  02ba8	e3530000	 cmp         r3, #0
  02bac	0a000004	 beq         |$LN7@UsbInterru@2|

; 1084 :                             {
; 1085 :                                 pED->TransferStatus = STATUS_IDLE;

  02bb0	e59d3028	 ldr         r3, [sp, #0x28]
  02bb4	e283201c	 add         r2, r3, #0x1C
  02bb8	e3a03000	 mov         r3, #0
  02bbc	e5823000	 str         r3, [r2]

; 1086 :                             }
; 1087 :                             else{

  02bc0	ea000014	 b           |$LN6@UsbInterru@2|
  02bc4		 |$LN7@UsbInterru@2|

; 1088 :                                 *pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;

  02bc4	e59d3008	 ldr         r3, [sp, #8]
  02bc8	e2831054	 add         r1, r3, #0x54
  02bcc	e59d3008	 ldr         r3, [sp, #8]
  02bd0	e2833044	 add         r3, r3, #0x44
  02bd4	e5932000	 ldr         r2, [r3]
  02bd8	e5913000	 ldr         r3, [r1]
  02bdc	e5823000	 str         r3, [r2]

; 1089 :                                 *pTD->sTransfer.lpfComplete = TRUE;

  02be0	e59d3008	 ldr         r3, [sp, #8]
  02be4	e2833040	 add         r3, r3, #0x40
  02be8	e5932000	 ldr         r2, [r3]
  02bec	e3a03001	 mov         r3, #1
  02bf0	e5823000	 str         r3, [r2]

; 1090 :                                 *pTD->sTransfer.lpdwError = USB_NO_ERROR;

  02bf4	e59d3008	 ldr         r3, [sp, #8]
  02bf8	e2833048	 add         r3, r3, #0x48
  02bfc	e5932000	 ldr         r2, [r3]
  02c00	e3a03000	 mov         r3, #0
  02c04	e5823000	 str         r3, [r2]

; 1091 :                                 pED->TransferStatus = STATUS_COMPLETE;

  02c08	e59d3028	 ldr         r3, [sp, #0x28]
  02c0c	e283201c	 add         r2, r3, #0x1C
  02c10	e3a03002	 mov         r3, #2
  02c14	e5823000	 str         r3, [r2]
  02c18		 |$LN6@UsbInterru@2|
  02c18		 |$LN8@UsbInterru@2|

; 1092 :                             }
; 1093 :                         }
; 1094 :                         else
; 1095 :                         {
; 1096 :                             // TX not complete yet, wait for next interrupt
; 1097 :                             // RETAILMSG(1, (L"EP%d: TX not complete yet!\r\n", pED->bHostEndPointNum));
; 1098 :                         }
; 1099 :                     }
; 1100 :                     else{

  02c18	ea000052	 b           |$LN4@UsbInterru@2|
  02c1c		 |$LN9@UsbInterru@2|

; 1101 :                         RETAILMSG(FALSE,(TEXT("_HOST_TXCSR = 0x%x"),_HOST_TXCSR));

  02c1c	ea000006	 b           |$LN122@UsbInterru@2|
  02c20	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02c24	e1a01003	 mov         r1, r3
  02c28	e59f028c	 ldr         r0, [pc, #0x28C]
  02c2c	eb000000	 bl          NKDbgPrintfW
  02c30	e3a03001	 mov         r3, #1
  02c34	e58d3098	 str         r3, [sp, #0x98]
  02c38	ea000001	 b           |$LN123@UsbInterru@2|
  02c3c		 |$LN122@UsbInterru@2|
  02c3c	e3a03000	 mov         r3, #0
  02c40	e58d3098	 str         r3, [sp, #0x98]
  02c44		 |$LN123@UsbInterru@2|

; 1102 :                         TransferStatus Status = STATUS_COMPLETE;

  02c44	e3a03002	 mov         r3, #2
  02c48	e58d3044	 str         r3, [sp, #0x44]

; 1103 : 
; 1104 :                         if(_HOST_TXCSR & MGC_M_TXCSR_H_ERROR){

  02c4c	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02c50	e3130004	 tst         r3, #4
  02c54	0a000008	 beq         |$LN3@UsbInterru@2|

; 1105 :                             _HOST_TXCSR &= (~MGC_M_TXCSR_H_ERROR);

  02c58	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02c5c	e1a02003	 mov         r2, r3
  02c60	e3e03004	 mvn         r3, #4
  02c64	e0023003	 and         r3, r2, r3
  02c68	e1a03803	 mov         r3, r3, lsl #16
  02c6c	e1a03823	 mov         r3, r3, lsr #16
  02c70	e1cd32b2	 strh        r3, [sp, #0x22]

; 1106 : 
; 1107 :                             //*pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;
; 1108 :                             //*pTD->sTransfer.lpfComplete = TRUE;
; 1109 :                             //*pTD->sTransfer.lpdwError = USB_DEVICE_NOT_RESPONDING_ERROR;
; 1110 :                             Status = STATUS_NO_RESPONSE;

  02c74	e3a03003	 mov         r3, #3
  02c78	e58d3044	 str         r3, [sp, #0x44]
  02c7c		 |$LN3@UsbInterru@2|

; 1111 :                         }
; 1112 :                         if(_HOST_TXCSR & MGC_M_TXCSR_H_RXSTALL){

  02c7c	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02c80	e3130020	 tst         r3, #0x20
  02c84	0a000016	 beq         |$LN2@UsbInterru@2|

; 1113 :                             _HOST_TXCSR &= (~MGC_M_TXCSR_H_RXSTALL);

  02c88	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02c8c	e1a02003	 mov         r2, r3
  02c90	e3e03020	 mvn         r3, #0x20
  02c94	e0023003	 and         r3, r2, r3
  02c98	e1a03803	 mov         r3, r3, lsl #16
  02c9c	e1a03823	 mov         r3, r3, lsr #16
  02ca0	e1cd32b2	 strh        r3, [sp, #0x22]

; 1114 :                             //*pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;
; 1115 :                             *pTD->sTransfer.lpfComplete = TRUE;

  02ca4	e59d3008	 ldr         r3, [sp, #8]
  02ca8	e2833040	 add         r3, r3, #0x40
  02cac	e5932000	 ldr         r2, [r3]
  02cb0	e3a03001	 mov         r3, #1
  02cb4	e5823000	 str         r3, [r2]

; 1116 :                             *pTD->sTransfer.lpdwError = USB_STALL_ERROR;

  02cb8	e59d3008	 ldr         r3, [sp, #8]
  02cbc	e2833048	 add         r3, r3, #0x48
  02cc0	e5932000	 ldr         r2, [r3]
  02cc4	e3a03004	 mov         r3, #4
  02cc8	e5823000	 str         r3, [r2]

; 1117 :                             pED->bfHalted = TRUE;

  02ccc	e59d3028	 ldr         r3, [sp, #0x28]
  02cd0	e2832024	 add         r2, r3, #0x24
  02cd4	e3a03001	 mov         r3, #1
  02cd8	e5823000	 str         r3, [r2]

; 1118 :                             Status = STATUS_COMPLETE;

  02cdc	e3a03002	 mov         r3, #2
  02ce0	e58d3044	 str         r3, [sp, #0x44]
  02ce4		 |$LN2@UsbInterru@2|

; 1119 :                         }
; 1120 :                         if(_HOST_TXCSR & MGC_M_TXCSR_H_NAKTIMEOUT){

  02ce4	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02ce8	e3130080	 tst         r3, #0x80
  02cec	0a00000d	 beq         |$LN1@UsbInterru@2|

; 1121 :                             _HOST_TXCSR &= (~(MGC_M_TXCSR_H_NAKTIMEOUT|MGC_M_TXCSR_TXPKTRDY));

  02cf0	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02cf4	e1a02003	 mov         r2, r3
  02cf8	e3e03081	 mvn         r3, #0x81
  02cfc	e0023003	 and         r3, r2, r3
  02d00	e1a03803	 mov         r3, r3, lsl #16
  02d04	e1a03823	 mov         r3, r3, lsr #16
  02d08	e1cd32b2	 strh        r3, [sp, #0x22]

; 1122 :                             //*pTD->sTransfer.lpdwBytesTransferred = pTD->BytesTransferred;
; 1123 :                             //*pTD->sTransfer.lpfComplete = TRUE;
; 1124 :                             //*pTD->sTransfer.lpdwError = USB_DEVICE_NOT_RESPONDING_ERROR;
; 1125 :                             _HOST_TXCSR |= MGC_M_TXCSR_FLUSHFIFO;

  02d0c	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02d10	e3833008	 orr         r3, r3, #8
  02d14	e1a03803	 mov         r3, r3, lsl #16
  02d18	e1a03823	 mov         r3, r3, lsr #16
  02d1c	e1cd32b2	 strh        r3, [sp, #0x22]

; 1126 :                             Status = STATUS_IDLE;

  02d20	e3a03000	 mov         r3, #0
  02d24	e58d3044	 str         r3, [sp, #0x44]
  02d28		 |$LN1@UsbInterru@2|

; 1127 :                         }
; 1128 :                         WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(bShift, MGC_O_HDRC_TXCSR)),_HOST_TXCSR);

  02d28	e59d30a8	 ldr         r3, [sp, #0xA8]
  02d2c	e2831f52	 add         r1, r3, #0x52, 30
  02d30	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02d34	e1a02003	 mov         r2, r3
  02d38	e3a03010	 mov         r3, #0x10
  02d3c	e0030392	 mul         r3, r2, r3
  02d40	e2833c05	 add         r3, r3, #5, 24
  02d44	e2832002	 add         r2, r3, #2
  02d48	e5913000	 ldr         r3, [r1]
  02d4c	e0832002	 add         r2, r3, r2
  02d50	e1dd32b2	 ldrh        r3, [sp, #0x22]
  02d54	e1c230b0	 strh        r3, [r2]

; 1129 :                         pED->TransferStatus = Status;

  02d58	e59d3028	 ldr         r3, [sp, #0x28]
  02d5c	e283201c	 add         r2, r3, #0x1C
  02d60	e59d3044	 ldr         r3, [sp, #0x44]
  02d64	e5823000	 str         r3, [r2]
  02d68		 |$LN4@UsbInterru@2|
  02d68		 |$LN13@UsbInterru@2|
  02d68		 |$LN14@UsbInterru@2|

; 1130 :                     }
; 1131 :                 }
; 1132 :             }
; 1133 :             Reg >>= 1;

  02d68	e5dd302d	 ldrb        r3, [sp, #0x2D]
  02d6c	e1a030a3	 mov         r3, r3, lsr #1
  02d70	e20330ff	 and         r3, r3, #0xFF
  02d74	e5cd302d	 strb        r3, [sp, #0x2D]

; 1134 :             bShift++;

  02d78	e5dd302c	 ldrb        r3, [sp, #0x2C]
  02d7c	e2833001	 add         r3, r3, #1
  02d80	e20330ff	 and         r3, r3, #0xFF
  02d84	e5cd302c	 strb        r3, [sp, #0x2C]

; 1135 :         }

  02d88	eaffff29	 b           |$LN16@UsbInterru@2|
  02d8c		 |$LN15@UsbInterru@2|
  02d8c		 |$LN10@UsbInterru@2|
  02d8c		 |$_skipTx$41957|

; 1136 : 
; 1137 : _skipTx:
; 1138 : 
; 1139 :         UnlockProcessingThread();

  02d8c	e59d00a8	 ldr         r0, [sp, #0xA8]
  02d90	eb000000	 bl          |?UnlockProcessingThread@CHW@@QAAXXZ|

; 1140 : 
; 1141 :         SetEvent(g_hUsbProcessingEvent);

  02d94	e59f311c	 ldr         r3, [pc, #0x11C]
  02d98	e5930000	 ldr         r0, [r3]
  02d9c	eb000000	 bl          SetEvent

; 1142 : 
; 1143 :         WRITE_PORT_ULONG((m_portBase + USB_EOIR_REG_OFFSET), 0);

  02da0	e59d30a8	 ldr         r3, [sp, #0xA8]
  02da4	e2833f52	 add         r3, r3, #0x52, 30
  02da8	e5933000	 ldr         r3, [r3]
  02dac	e2832060	 add         r2, r3, #0x60
  02db0	e3a03000	 mov         r3, #0
  02db4	e5823000	 str         r3, [r2]

; 1144 : 
; 1145 :         InterruptDone(m_dwSysIntr);

  02db8	e59d30a8	 ldr         r3, [sp, #0xA8]
  02dbc	e2833f5d	 add         r3, r3, #0x5D, 30
  02dc0	e5930000	 ldr         r0, [r3]
  02dc4	eb000000	 bl          InterruptDone

; 1146 :     }

  02dc8	eafffad6	 b           |$LN126@UsbInterru@2|
  02dcc		 |$LN88@UsbInterru@2|

; 1147 : 
; 1148 :     // Disable and clear interrupts
; 1149 :     WRITE_PORT_ULONG((m_portBase + USB_EP_INTMSKCLRR_REG_OFFSET), 
; 1150 :                         USB_OTG_TXINT_MASK |
; 1151 :                         USB_OTG_RXINT_MASK );

  02dcc	e59d30a8	 ldr         r3, [sp, #0xA8]
  02dd0	e2833f52	 add         r3, r3, #0x52, 30
  02dd4	e5933000	 ldr         r3, [r3]
  02dd8	e2832034	 add         r2, r3, #0x34
  02ddc	e3e03801	 mvn         r3, #1, 16
  02de0	e5823000	 str         r3, [r2]

; 1152 :     WRITE_PORT_ULONG((m_portBase + USB_CORE_INTMSKCLRR_REG_OFFSET), 
; 1153 :                         USB_OTG_USBINT_MASK);

  02de4	e59d30a8	 ldr         r3, [sp, #0xA8]
  02de8	e2833f52	 add         r3, r3, #0x52, 30
  02dec	e5933000	 ldr         r3, [r3]
  02df0	e2832054	 add         r2, r3, #0x54
  02df4	e3a0377f	 mov         r3, #0x7F, 14
  02df8	e3833803	 orr         r3, r3, #3, 16
  02dfc	e5823000	 str         r3, [r2]

; 1154 : 
; 1155 :     WRITE_PORT_ULONG((m_portBase + USB_EP_INTCLRR_REG_OFFSET), 
; 1156 :                         USB_OTG_TXINT_MASK |
; 1157 :                         USB_OTG_RXINT_MASK );

  02e00	e59d30a8	 ldr         r3, [sp, #0xA8]
  02e04	e2833f52	 add         r3, r3, #0x52, 30
  02e08	e5933000	 ldr         r3, [r3]
  02e0c	e2832028	 add         r2, r3, #0x28
  02e10	e3e03801	 mvn         r3, #1, 16
  02e14	e5823000	 str         r3, [r2]

; 1158 :     WRITE_PORT_ULONG((m_portBase + USB_CORE_INTCLRR_REG_OFFSET), 
; 1159 :                         USB_OTG_USBINT_MASK);

  02e18	e59d30a8	 ldr         r3, [sp, #0xA8]
  02e1c	e2833f52	 add         r3, r3, #0x52, 30
  02e20	e5933000	 ldr         r3, [r3]
  02e24	e2832048	 add         r2, r3, #0x48
  02e28	e3a0377f	 mov         r3, #0x7F, 14
  02e2c	e3833803	 orr         r3, r3, #3, 16
  02e30	e5823000	 str         r3, [r2]

; 1160 :     WRITE_PORT_ULONG((m_portBase + USB_EOIR_REG_OFFSET), 0);

  02e34	e59d30a8	 ldr         r3, [sp, #0xA8]
  02e38	e2833f52	 add         r3, r3, #0x52, 30
  02e3c	e5933000	 ldr         r3, [r3]
  02e40	e2832060	 add         r2, r3, #0x60
  02e44	e3a03000	 mov         r3, #0
  02e48	e5823000	 str         r3, [r2]

; 1161 :     InterruptDone(m_dwSysIntr);

  02e4c	e59d30a8	 ldr         r3, [sp, #0xA8]
  02e50	e2833f5d	 add         r3, r3, #0x5D, 30
  02e54	e5930000	 ldr         r0, [r3]
  02e58	eb000000	 bl          InterruptDone

; 1162 : 
; 1163 :     DEBUGMSG(ZONE_INIT && ZONE_VERBOSE, (TEXT("-CHW::USBInterruptThread\n")));

  02e5c	e59f3050	 ldr         r3, [pc, #0x50]
  02e60	e5933440	 ldr         r3, [r3, #0x440]
  02e64	e3130002	 tst         r3, #2
  02e68	0a000008	 beq         |$LN124@UsbInterru@2|
  02e6c	e59f3040	 ldr         r3, [pc, #0x40]
  02e70	e5933440	 ldr         r3, [r3, #0x440]
  02e74	e3130a01	 tst         r3, #1, 20
  02e78	0a000004	 beq         |$LN124@UsbInterru@2|
  02e7c	e59f002c	 ldr         r0, [pc, #0x2C]
  02e80	eb000000	 bl          NKDbgPrintfW
  02e84	e3a03001	 mov         r3, #1
  02e88	e58d309c	 str         r3, [sp, #0x9C]
  02e8c	ea000001	 b           |$LN125@UsbInterru@2|
  02e90		 |$LN124@UsbInterru@2|
  02e90	e3a03000	 mov         r3, #0
  02e94	e58d309c	 str         r3, [sp, #0x9C]
  02e98		 |$LN125@UsbInterru@2|

; 1164 : 
; 1165 :     return (0);

  02e98	e3a03000	 mov         r3, #0
  02e9c	e58d3050	 str         r3, [sp, #0x50]

; 1166 : }

  02ea0	e59d0050	 ldr         r0, [sp, #0x50]
  02ea4	e28dd0a0	 add         sp, sp, #0xA0
  02ea8	e89d6000	 ldmia       sp, {sp, lr}
  02eac	e12fff1e	 bx          lr
  02eb0		 |$LN137@UsbInterru@2|
  02eb0		 |$LN138@UsbInterru@2|
  02eb0	00000000	 DCD         |??_C@_1DE@KLPCCKKC@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAS?$AAB?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@|
  02eb4		 |$LN139@UsbInterru@2|
  02eb4	00000000	 DCD         |dpCurSettings|
  02eb8		 |$LN140@UsbInterru@2|
  02eb8	00000000	 DCD         |?g_hUsbProcessingEvent@@3PAXA|
  02ebc		 |$LN141@UsbInterru@2|
  02ebc	00000000	 DCD         |??_C@_1CG@HANODHMK@?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAT?$AAX?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@|
  02ec0		 |$LN142@UsbInterru@2|
  02ec0	00000000	 DCD         |??_C@_1DK@BEDPNNNI@?$AAh?$AAo?$AAs?$AAt?$AAE?$AAP?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?5?$AAH?$AAO?$AAS?$AAT?$AA_?$AAR?$AAX?$AAC?$AAS?$AAR?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@|
  02ec4		 |$LN143@UsbInterru@2|
  02ec4	00000000	 DCD         |??_C@_1BI@EPINBLKK@?$AA4?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  02ec8		 |$LN144@UsbInterru@2|
  02ec8	00000000	 DCD         |??_C@_1EE@MHJGIIDL@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AAO?$AAU?$AAT?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF@|
  02ecc		 |$LN145@UsbInterru@2|
  02ecc	00000000	 DCD         |??_C@_1BI@HOJFCMNN@?$AA3?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  02ed0		 |$LN146@UsbInterru@2|
  02ed0	00000000	 DCD         |??_C@_1EC@NENBPOFC@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAT?$AAA?$AAT?$AAU?$AAS?$AAI?$AAN?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx@|
  02ed4		 |$LN147@UsbInterru@2|
  02ed4	00000000	 DCD         |??_C@_1BI@PPLAEJPK@?$AA2?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  02ed8		 |$LN148@UsbInterru@2|
  02ed8	00000000	 DCD         |??_C@_1EA@FPGAPOOI@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAD?$AAA?$AAT?$AAA?$AAO?$AAU?$AAT?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@|
  02edc		 |$LN149@UsbInterru@2|
  02edc	00000000	 DCD         |??_C@_1BI@KHKOOANC@?$AA1?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  02ee0		 |$LN150@UsbInterru@2|
  02ee0	00000000	 DCD         |??_C@_1DO@DGBNBKKB@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAD?$AAA?$AAT?$AAA?$AAI?$AAN?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@|
  02ee4		 |$LN151@UsbInterru@2|
  02ee4	00000000	 DCD         |??_C@_1BK@OGIMLNFC@?$AAI?$AAN?$AAC?$AAT?$AAL?$AA?9?$AAN?$AAR?$AAD?$AAY?$AA?$AN?$AA?6?$AA?$AA@|
  02ee8		 |$LN152@UsbInterru@2|
  02ee8	00000000	 DCD         |??_C@_1DM@JFEALIHC@?$AAS?$AAT?$AAA?$AAG?$AAE?$AA_?$AAS?$AAE?$AAT?$AAU?$AAP?$AA?3?$AA_?$AAH?$AAO?$AAS?$AAT?$AA_?$AAC?$AAS?$AAR?$AA0?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AA@|
  02eec		 |$M43350|

			 ENDP  ; |?UsbInterruptThread@CHW@@AAAKPAX@Z|, CHW::UsbInterruptThread

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T43381| DCD	|$LN5@LockProces|
	DCD	0x40000803
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?LockProcessingThread@CHW@@QAAXXZ| PROC ; CHW::LockProcessingThread

; 124  :     void LockProcessingThread() { EnterCriticalSection(&m_csUsbProcLock); }

  00000		 |$LN5@LockProces|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43378|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2830f8b	 add         r0, r3, #0x8B, 30
  00014	eb000000	 bl          EnterCriticalSection
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M43379|

			 ENDP  ; |?LockProcessingThread@CHW@@QAAXXZ|, CHW::LockProcessingThread


  00000			 AREA	 |.pdata|, PDATA
|$T43388| DCD	|$LN5@UnlockProc|
	DCD	0x40000803
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UnlockProcessingThread@CHW@@QAAXXZ| PROC ; CHW::UnlockProcessingThread

; 125  :     void UnlockProcessingThread() { LeaveCriticalSection(&m_csUsbProcLock); }

  00000		 |$LN5@UnlockProc|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43385|
  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2830f8b	 add         r0, r3, #0x8B, 30
  00014	eb000000	 bl          LeaveCriticalSection
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M43386|

			 ENDP  ; |?UnlockProcessingThread@CHW@@QAAXXZ|, CHW::UnlockProcessingThread

	EXPORT	|??_C@_1KG@CDNDLPFK@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAF?$AAr?$AAa?$AAm?$AAe?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAe?$AAd?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|?UpdateFrameCounter@CHW@@AAAXXZ|	; CHW::UpdateFrameCounter

  00060			 AREA	 |.pdata|, PDATA
|$T43397| DCD	|$LN9@UpdateFram|
	DCD	0x40003f04
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@CDNDLPFK@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAF?$AAr?$AAa?$AAm?$AAe?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAe?$AAd?$AA?5?$AAf@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "U", 0x0, "p"
	DCB	0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "F", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "C", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "m"
	DCB	0x0, "i", 0x0, "s", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, ";"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, "o", 0x0, "c", 0x0, "h"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "m", 0x0, "a", 0x0, "y"
	DCB	0x0, " ", 0x0, "h", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " "
	DCB	0x0, "b", 0x0, "e", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "d"
	DCB	0x0, "r", 0x0, "o", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d"
	DCB	0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02eec			 AREA	 |.text|, CODE, ARM

  02eec		 |?UpdateFrameCounter@CHW@@AAAXXZ| PROC	; CHW::UpdateFrameCounter

; 1186 : {

  02eec		 |$LN9@UpdateFram|
  02eec	e1a0c00d	 mov         r12, sp
  02ef0	e92d0001	 stmdb       sp!, {r0}
  02ef4	e92d5000	 stmdb       sp!, {r12, lr}
  02ef8	e24dd010	 sub         sp, sp, #0x10
  02efc		 |$M43394|

; 1187 : 
; 1188 :     EnterCriticalSection( &m_csFrameCounter );

  02efc	e59d3018	 ldr         r3, [sp, #0x18]
  02f00	e2830f57	 add         r0, r3, #0x57, 30
  02f04	eb000000	 bl          EnterCriticalSection

; 1189 : 
; 1190 : #if 1 // Frame counter is only 11-bit long!
; 1191 : 
; 1192 : #ifdef DEBUG
; 1193 :     // If this fails, we haven't been called in a long time,
; 1194 :     // so the frame number is no longer accurate
; 1195 :     if (GetTickCount() - dwTickCountLastTime >= 0x700 )

  02f08	eb000000	 bl          GetTickCount
  02f0c	e58d0004	 str         r0, [sp, #4]
  02f10	e59d3018	 ldr         r3, [sp, #0x18]
  02f14	e2833d05	 add         r3, r3, #5, 26
  02f18	e59d2004	 ldr         r2, [sp, #4]
  02f1c	e5933000	 ldr         r3, [r3]
  02f20	e0423003	 sub         r3, r2, r3
  02f24	e3530c07	 cmp         r3, #7, 24
  02f28	3a000006	 bcc         |$LN2@UpdateFram|

; 1196 :         DEBUGMSG(1, (TEXT("CHW::UpdateFrameCounter missed frame count;")
; 1197 :                      TEXT(" isoch packets may have been dropped.\r\n")));

  02f2c	e59f00b0	 ldr         r0, [pc, #0xB0]
  02f30	eb000000	 bl          NKDbgPrintfW
  02f34	e3a03001	 mov         r3, #1
  02f38	e58d3008	 str         r3, [sp, #8]
  02f3c	ea000001	 b           |$LN6@UpdateFram|
  02f40	e3a03000	 mov         r3, #0
  02f44	e58d3008	 str         r3, [sp, #8]
  02f48		 |$LN6@UpdateFram|
  02f48		 |$LN2@UpdateFram|

; 1198 :     dwTickCountLastTime = GetTickCount();

  02f48	eb000000	 bl          GetTickCount
  02f4c	e58d000c	 str         r0, [sp, #0xC]
  02f50	e59d3018	 ldr         r3, [sp, #0x18]
  02f54	e2832d05	 add         r2, r3, #5, 26
  02f58	e59d300c	 ldr         r3, [sp, #0xC]
  02f5c	e5823000	 str         r3, [r2]

; 1199 : #endif // DEBUG
; 1200 : 
; 1201 : #else  // Original code
; 1202 : 
; 1203 : #ifdef DEBUG
; 1204 :     // If this fails, we haven't been called in a long time,
; 1205 :     // so the frame number is no longer accurate
; 1206 :     if (GetTickCount() - dwTickCountLastTime >= 64000 )
; 1207 :         DEBUGMSG(1, (TEXT("CHW::UpdateFrameCounter missed frame count;")
; 1208 :                      TEXT(" isoch packets may have been dropped.\r\n")));
; 1209 :     dwTickCountLastTime = GetTickCount();
; 1210 : #endif // DEBUG
; 1211 : 
; 1212 : #endif
; 1213 : 
; 1214 :     //WORD fn = m_pHCCA->HccaFrameNumber;
; 1215 :     WORD fn = READ_PORT_USHORT( (m_portBase + USB_FRAME_REG_OFFSET));

  02f60	e59d3018	 ldr         r3, [sp, #0x18]
  02f64	e2833f52	 add         r3, r3, #0x52, 30
  02f68	e5933000	 ldr         r3, [r3]
  02f6c	e2833b01	 add         r3, r3, #1, 22
  02f70	e283300c	 add         r3, r3, #0xC
  02f74	e1d330b0	 ldrh        r3, [r3]
  02f78	e1cd30b0	 strh        r3, [sp]

; 1216 : 
; 1217 :     if (fn < lastFn)

  02f7c	e1dd30b0	 ldrh        r3, [sp]
  02f80	e1a02003	 mov         r2, r3
  02f84	e59d3018	 ldr         r3, [sp, #0x18]
  02f88	e2833f51	 add         r3, r3, #0x51, 30
  02f8c	e1d330b0	 ldrh        r3, [r3]
  02f90	e1520003	 cmp         r2, r3
  02f94	aa000008	 bge         |$LN1@UpdateFram|

; 1218 :         ++m_wFrameHigh;

  02f98	e59d3018	 ldr         r3, [sp, #0x18]
  02f9c	e2833e17	 add         r3, r3, #0x17, 28
  02fa0	e1d330b0	 ldrh        r3, [r3]
  02fa4	e2833001	 add         r3, r3, #1
  02fa8	e1a02803	 mov         r2, r3, lsl #16
  02fac	e1a02822	 mov         r2, r2, lsr #16
  02fb0	e59d3018	 ldr         r3, [sp, #0x18]
  02fb4	e2833e17	 add         r3, r3, #0x17, 28
  02fb8	e1c320b0	 strh        r2, [r3]
  02fbc		 |$LN1@UpdateFram|

; 1219 :     lastFn = fn;

  02fbc	e59d3018	 ldr         r3, [sp, #0x18]
  02fc0	e2832f51	 add         r2, r3, #0x51, 30
  02fc4	e1dd30b0	 ldrh        r3, [sp]
  02fc8	e1c230b0	 strh        r3, [r2]

; 1220 : 
; 1221 :     LeaveCriticalSection( &m_csFrameCounter );

  02fcc	e59d3018	 ldr         r3, [sp, #0x18]
  02fd0	e2830f57	 add         r0, r3, #0x57, 30
  02fd4	eb000000	 bl          LeaveCriticalSection

; 1222 : }

  02fd8	e28dd010	 add         sp, sp, #0x10
  02fdc	e89d6000	 ldmia       sp, {sp, lr}
  02fe0	e12fff1e	 bx          lr
  02fe4		 |$LN10@UpdateFram|
  02fe4		 |$LN11@UpdateFram|
  02fe4	00000000	 DCD         |??_C@_1KG@CDNDLPFK@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAF?$AAr?$AAa?$AAm?$AAe?$AAC?$AAo?$AAu?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAm?$AAi?$AAs?$AAs?$AAe?$AAd?$AA?5?$AAf@|
  02fe8		 |$M43395|

			 ENDP  ; |?UpdateFrameCounter@CHW@@AAAXXZ|, CHW::UpdateFrameCounter


  00068			 AREA	 |.pdata|, PDATA
|$T43405| DCD	|$LN5@GetFrameNu|
	DCD	0x40001604
; Function compile flags: /Odtp

  02fe8			 AREA	 |.text|, CODE, ARM

  02fe8		 |?GetFrameNumber@CHW@@UAAHPAK@Z| PROC	; CHW::GetFrameNumber

; 1235 : {

  02fe8		 |$LN5@GetFrameNu|
  02fe8	e1a0c00d	 mov         r12, sp
  02fec	e92d0003	 stmdb       sp!, {r0, r1}
  02ff0	e92d5000	 stmdb       sp!, {r12, lr}
  02ff4	e24dd004	 sub         sp, sp, #4
  02ff8		 |$M43402|

; 1236 :     UpdateFrameCounter();

  02ff8	e59d000c	 ldr         r0, [sp, #0xC]
  02ffc	eb000000	 bl          |?UpdateFrameCounter@CHW@@AAAXXZ|

; 1237 : 
; 1238 : #if 1 // Frame counter is only 11-bit long!
; 1239 : 
; 1240 :     *lpdwFrameNumber = ((DWORD) m_wFrameHigh << 11) | lastFn ;

  03000	e59d300c	 ldr         r3, [sp, #0xC]
  03004	e2833e17	 add         r3, r3, #0x17, 28
  03008	e1d330b0	 ldrh        r3, [r3]
  0300c	e1a02583	 mov         r2, r3, lsl #11
  03010	e59d300c	 ldr         r3, [sp, #0xC]
  03014	e2833f51	 add         r3, r3, #0x51, 30
  03018	e1d330b0	 ldrh        r3, [r3]
  0301c	e1822003	 orr         r2, r2, r3
  03020	e59d3010	 ldr         r3, [sp, #0x10]
  03024	e5832000	 str         r2, [r3]

; 1241 : 
; 1242 : #else // Original code
; 1243 : 
; 1244 :     *lpdwFrameNumber = ((DWORD) m_wFrameHigh << 16) | lastFn ;
; 1245 : 
; 1246 : #endif
; 1247 : 
; 1248 :     return TRUE;

  03028	e3a03001	 mov         r3, #1
  0302c	e58d3000	 str         r3, [sp]

; 1249 : }

  03030	e59d0000	 ldr         r0, [sp]
  03034	e28dd004	 add         sp, sp, #4
  03038	e89d6000	 ldmia       sp, {sp, lr}
  0303c	e12fff1e	 bx          lr
  03040		 |$M43403|

			 ENDP  ; |?GetFrameNumber@CHW@@UAAHPAK@Z|, CHW::GetFrameNumber


  00070			 AREA	 |.pdata|, PDATA
|$T43411| DCD	|$LN5@GetFrameLe|
	DCD	0x40000e04
; Function compile flags: /Odtp

  03040			 AREA	 |.text|, CODE, ARM

  03040		 |?GetFrameLength@CHW@@UAAHPAG@Z| PROC	; CHW::GetFrameLength

; 1263 : {

  03040		 |$LN5@GetFrameLe|
  03040	e1a0c00d	 mov         r12, sp
  03044	e92d0003	 stmdb       sp!, {r0, r1}
  03048	e92d5000	 stmdb       sp!, {r12, lr}
  0304c	e24dd004	 sub         sp, sp, #4
  03050		 |$M43408|

; 1264 :     *lpuFrameLength = 12000;

  03050	e59d2010	 ldr         r2, [sp, #0x10]
  03054	e3a03c2e	 mov         r3, #0x2E, 24
  03058	e38330e0	 orr         r3, r3, #0xE0
  0305c	e1c230b0	 strh        r3, [r2]

; 1265 :     return TRUE;

  03060	e3a03001	 mov         r3, #1
  03064	e58d3000	 str         r3, [sp]

; 1266 : }

  03068	e59d0000	 ldr         r0, [sp]
  0306c	e28dd004	 add         sp, sp, #4
  03070	e89d6000	 ldmia       sp, {sp, lr}
  03074	e12fff1e	 bx          lr
  03078		 |$M43409|

			 ENDP  ; |?GetFrameLength@CHW@@UAAHPAG@Z|, CHW::GetFrameLength


  00078			 AREA	 |.pdata|, PDATA
|$T43417| DCD	|$LN5@SetFrameLe|
	DCD	0x40000a04
; Function compile flags: /Odtp

  03078			 AREA	 |.text|, CODE, ARM

  03078		 |?SetFrameLength@CHW@@UAAHPAXG@Z| PROC	; CHW::SetFrameLength

; 1283 : {

  03078		 |$LN5@SetFrameLe|
  03078	e1a0c00d	 mov         r12, sp
  0307c	e92d0007	 stmdb       sp!, {r0 - r2}
  03080	e92d5000	 stmdb       sp!, {r12, lr}
  03084	e24dd004	 sub         sp, sp, #4
  03088		 |$M43414|

; 1284 :     // Not supported
; 1285 :     return FALSE;

  03088	e3a03000	 mov         r3, #0
  0308c	e58d3000	 str         r3, [sp]

; 1286 : }

  03090	e59d0000	 ldr         r0, [sp]
  03094	e28dd004	 add         sp, sp, #4
  03098	e89d6000	 ldmia       sp, {sp, lr}
  0309c	e12fff1e	 bx          lr
  030a0		 |$M43415|

			 ENDP  ; |?SetFrameLength@CHW@@UAAHPAXG@Z|, CHW::SetFrameLength


  00080			 AREA	 |.pdata|, PDATA
|$T43425| DCD	|$LN7@DidPortSta|
	DCD	0x40001604
; Function compile flags: /Odtp

  030a0			 AREA	 |.text|, CODE, ARM

  030a0		 |?DidPortStatusChange@CHW@@UAAHE@Z| PROC ; CHW::DidPortStatusChange

; 1299 : {

  030a0		 |$LN7@DidPortSta|
  030a0	e1a0c00d	 mov         r12, sp
  030a4	e92d0003	 stmdb       sp!, {r0, r1}
  030a8	e92d5000	 stmdb       sp!, {r12, lr}
  030ac	e24dd00c	 sub         sp, sp, #0xC
  030b0		 |$M43422|

; 1300 :     USB_HUB_AND_PORT_STATUS s;
; 1301 :     CHW::GetPortStatus(port, s);

  030b0	e28d2000	 add         r2, sp, #0
  030b4	e5dd1018	 ldrb        r1, [sp, #0x18]
  030b8	e59d0014	 ldr         r0, [sp, #0x14]
  030bc	eb000000	 bl          |?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z|

; 1302 :     return s.change.word ? TRUE : FALSE;

  030c0	e1dd30b2	 ldrh        r3, [sp, #2]
  030c4	e3530000	 cmp         r3, #0
  030c8	0a000002	 beq         |$LN3@DidPortSta|
  030cc	e3a03001	 mov         r3, #1
  030d0	e58d3008	 str         r3, [sp, #8]
  030d4	ea000001	 b           |$LN4@DidPortSta|
  030d8		 |$LN3@DidPortSta|
  030d8	e3a03000	 mov         r3, #0
  030dc	e58d3008	 str         r3, [sp, #8]
  030e0		 |$LN4@DidPortSta|
  030e0	e59d3008	 ldr         r3, [sp, #8]
  030e4	e58d3004	 str         r3, [sp, #4]

; 1303 : }

  030e8	e59d0004	 ldr         r0, [sp, #4]
  030ec	e28dd00c	 add         sp, sp, #0xC
  030f0	e89d6000	 ldmia       sp, {sp, lr}
  030f4	e12fff1e	 bx          lr
  030f8		 |$M43423|

			 ENDP  ; |?DidPortStatusChange@CHW@@UAAHE@Z|, CHW::DidPortStatusChange


  00088			 AREA	 |.pdata|, PDATA
|$T43449| DCD	|$LN25@GetPortSta|
	DCD	0x40011904
; Function compile flags: /Odtp

  030f8			 AREA	 |.text|, CODE, ARM

  030f8		 |?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z| PROC ; CHW::GetPortStatus

; 1321 : {

  030f8		 |$LN25@GetPortSta|
  030f8	e1a0c00d	 mov         r12, sp
  030fc	e92d0007	 stmdb       sp!, {r0 - r2}
  03100	e92d5000	 stmdb       sp!, {r12, lr}
  03104	e24dd028	 sub         sp, sp, #0x28
  03108		 |$M43446|

; 1322 :     memset( &rStatus, 0, sizeof( USB_HUB_AND_PORT_STATUS ) );

  03108	e3a02004	 mov         r2, #4
  0310c	e3a01000	 mov         r1, #0
  03110	e59d0038	 ldr         r0, [sp, #0x38]
  03114	eb000000	 bl          memset

; 1323 : 
; 1324 :     if ( port > 0 )

  03118	e5dd3034	 ldrb        r3, [sp, #0x34]
  0311c	e3530000	 cmp         r3, #0
  03120	da0000a9	 ble         |$LN2@GetPortSta|

; 1325 :     {
; 1326 :         rStatus.change.port.ConnectStatusChange = (m_portStatus & PORT_STATUS_CON_CHANGED) ? 1 : 0;

  03124	e59d3030	 ldr         r3, [sp, #0x30]
  03128	e2833c01	 add         r3, r3, #1, 24
  0312c	e283309e	 add         r3, r3, #0x9E
  03130	e5d33000	 ldrb        r3, [r3]
  03134	e3130001	 tst         r3, #1
  03138	0a000002	 beq         |$LN5@GetPortSta|
  0313c	e3a03001	 mov         r3, #1
  03140	e58d3004	 str         r3, [sp, #4]
  03144	ea000001	 b           |$LN6@GetPortSta|
  03148		 |$LN5@GetPortSta|
  03148	e3a03000	 mov         r3, #0
  0314c	e58d3004	 str         r3, [sp, #4]
  03150		 |$LN6@GetPortSta|
  03150	e59d3004	 ldr         r3, [sp, #4]
  03154	e1a01803	 mov         r1, r3, lsl #16
  03158	e1a01821	 mov         r1, r1, lsr #16
  0315c	e59d3038	 ldr         r3, [sp, #0x38]
  03160	e2833002	 add         r3, r3, #2
  03164	e1d320b0	 ldrh        r2, [r3]
  03168	e3e03001	 mvn         r3, #1
  0316c	e0022003	 and         r2, r2, r3
  03170	e2013001	 and         r3, r1, #1
  03174	e1823003	 orr         r3, r2, r3
  03178	e1a02803	 mov         r2, r3, lsl #16
  0317c	e1a02822	 mov         r2, r2, lsr #16
  03180	e59d3038	 ldr         r3, [sp, #0x38]
  03184	e2833002	 add         r3, r3, #2
  03188	e1c320b0	 strh        r2, [r3]

; 1327 :         rStatus.change.port.PortEnableChange = 0;

  0318c	e59d3038	 ldr         r3, [sp, #0x38]
  03190	e2833002	 add         r3, r3, #2
  03194	e1d320b0	 ldrh        r2, [r3]
  03198	e3a03cff	 mov         r3, #0xFF, 24
  0319c	e38330fd	 orr         r3, r3, #0xFD
  031a0	e0022003	 and         r2, r2, r3
  031a4	e59d3038	 ldr         r3, [sp, #0x38]
  031a8	e2833002	 add         r3, r3, #2
  031ac	e1c320b0	 strh        r2, [r3]

; 1328 :         rStatus.change.port.OverCurrentChange = 0;

  031b0	e59d3038	 ldr         r3, [sp, #0x38]
  031b4	e2833002	 add         r3, r3, #2
  031b8	e1d320b0	 ldrh        r2, [r3]
  031bc	e3a03cff	 mov         r3, #0xFF, 24
  031c0	e38330f7	 orr         r3, r3, #0xF7
  031c4	e0022003	 and         r2, r2, r3
  031c8	e59d3038	 ldr         r3, [sp, #0x38]
  031cc	e2833002	 add         r3, r3, #2
  031d0	e1c320b0	 strh        r2, [r3]

; 1329 :         rStatus.change.port.SuspendChange = 0;

  031d4	e59d3038	 ldr         r3, [sp, #0x38]
  031d8	e2833002	 add         r3, r3, #2
  031dc	e1d320b0	 ldrh        r2, [r3]
  031e0	e3a03cff	 mov         r3, #0xFF, 24
  031e4	e38330fb	 orr         r3, r3, #0xFB
  031e8	e0022003	 and         r2, r2, r3
  031ec	e59d3038	 ldr         r3, [sp, #0x38]
  031f0	e2833002	 add         r3, r3, #2
  031f4	e1c320b0	 strh        r2, [r3]

; 1330 :         rStatus.change.port.ResetChange = 0;

  031f8	e59d3038	 ldr         r3, [sp, #0x38]
  031fc	e2833002	 add         r3, r3, #2
  03200	e1d320b0	 ldrh        r2, [r3]
  03204	e3a03cff	 mov         r3, #0xFF, 24
  03208	e38330ef	 orr         r3, r3, #0xEF
  0320c	e0022003	 and         r2, r2, r3
  03210	e59d3038	 ldr         r3, [sp, #0x38]
  03214	e2833002	 add         r3, r3, #2
  03218	e1c320b0	 strh        r2, [r3]

; 1331 :         /* high speed - !PORT_LOW_SPEED && PORT_HIGH_SPEED
; 1332 :          * low speed  - PORT_LOW_SPEED
; 1333 :          * full speed - !PORT_LOW_SPEED && !PORT_HIGH_SPEED
; 1334 :          */
; 1335 :         rStatus.status.port.DeviceIsLowSpeed = (READ_PORT_UCHAR( (m_portBase+USB_DEVCTL_REG_OFFSET)) & (1<<5))?1:0;

  0321c	e59d3030	 ldr         r3, [sp, #0x30]
  03220	e2833f52	 add         r3, r3, #0x52, 30
  03224	e5933000	 ldr         r3, [r3]
  03228	e2833e46	 add         r3, r3, #0x46, 28
  0322c	e5d33000	 ldrb        r3, [r3]
  03230	e3130020	 tst         r3, #0x20
  03234	0a000002	 beq         |$LN7@GetPortSta|
  03238	e3a03001	 mov         r3, #1
  0323c	e58d3008	 str         r3, [sp, #8]
  03240	ea000001	 b           |$LN8@GetPortSta|
  03244		 |$LN7@GetPortSta|
  03244	e3a03000	 mov         r3, #0
  03248	e58d3008	 str         r3, [sp, #8]
  0324c		 |$LN8@GetPortSta|
  0324c	e59d3008	 ldr         r3, [sp, #8]
  03250	e1a01803	 mov         r1, r3, lsl #16
  03254	e1a01821	 mov         r1, r1, lsr #16
  03258	e59d3038	 ldr         r3, [sp, #0x38]
  0325c	e1d320b0	 ldrh        r2, [r3]
  03260	e3e03c02	 mvn         r3, #2, 24
  03264	e0022003	 and         r2, r2, r3
  03268	e2013001	 and         r3, r1, #1
  0326c	e1a03483	 mov         r3, r3, lsl #9
  03270	e1823003	 orr         r3, r2, r3
  03274	e1a02803	 mov         r2, r3, lsl #16
  03278	e1a02822	 mov         r2, r2, lsr #16
  0327c	e59d3038	 ldr         r3, [sp, #0x38]
  03280	e1c320b0	 strh        r2, [r3]

; 1336 :         rStatus.status.port.DeviceIsHighSpeed = (READ_PORT_UCHAR( (m_portBase+USB_DEVCTL_REG_OFFSET)) & (1<<6))?1:0;

  03284	e59d3030	 ldr         r3, [sp, #0x30]
  03288	e2833f52	 add         r3, r3, #0x52, 30
  0328c	e5933000	 ldr         r3, [r3]
  03290	e2833e46	 add         r3, r3, #0x46, 28
  03294	e5d33000	 ldrb        r3, [r3]
  03298	e3130040	 tst         r3, #0x40
  0329c	0a000002	 beq         |$LN9@GetPortSta|
  032a0	e3a03001	 mov         r3, #1
  032a4	e58d300c	 str         r3, [sp, #0xC]
  032a8	ea000001	 b           |$LN10@GetPortSta|
  032ac		 |$LN9@GetPortSta|
  032ac	e3a03000	 mov         r3, #0
  032b0	e58d300c	 str         r3, [sp, #0xC]
  032b4		 |$LN10@GetPortSta|
  032b4	e59d300c	 ldr         r3, [sp, #0xC]
  032b8	e1a01803	 mov         r1, r3, lsl #16
  032bc	e1a01821	 mov         r1, r1, lsr #16
  032c0	e59d3038	 ldr         r3, [sp, #0x38]
  032c4	e1d320b0	 ldrh        r2, [r3]
  032c8	e3e03b01	 mvn         r3, #1, 22
  032cc	e0022003	 and         r2, r2, r3
  032d0	e2013001	 and         r3, r1, #1
  032d4	e1a03503	 mov         r3, r3, lsl #10
  032d8	e1823003	 orr         r3, r2, r3
  032dc	e1a02803	 mov         r2, r3, lsl #16
  032e0	e1a02822	 mov         r2, r2, lsr #16
  032e4	e59d3038	 ldr         r3, [sp, #0x38]
  032e8	e1c320b0	 strh        r2, [r3]

; 1337 :         rStatus.status.port.PortConnected = (m_portStatus & PORT_STATUS_DEVICE_ATTACHED) ? 1 : 0;

  032ec	e59d3030	 ldr         r3, [sp, #0x30]
  032f0	e2833c01	 add         r3, r3, #1, 24
  032f4	e283309e	 add         r3, r3, #0x9E
  032f8	e5d33000	 ldrb        r3, [r3]
  032fc	e3130002	 tst         r3, #2
  03300	0a000002	 beq         |$LN11@GetPortSta|
  03304	e3a03001	 mov         r3, #1
  03308	e58d3010	 str         r3, [sp, #0x10]
  0330c	ea000001	 b           |$LN12@GetPortSta|
  03310		 |$LN11@GetPortSta|
  03310	e3a03000	 mov         r3, #0
  03314	e58d3010	 str         r3, [sp, #0x10]
  03318		 |$LN12@GetPortSta|
  03318	e59d3010	 ldr         r3, [sp, #0x10]
  0331c	e1a01803	 mov         r1, r3, lsl #16
  03320	e1a01821	 mov         r1, r1, lsr #16
  03324	e59d3038	 ldr         r3, [sp, #0x38]
  03328	e1d320b0	 ldrh        r2, [r3]
  0332c	e3e03001	 mvn         r3, #1
  03330	e0022003	 and         r2, r2, r3
  03334	e2013001	 and         r3, r1, #1
  03338	e1823003	 orr         r3, r2, r3
  0333c	e1a02803	 mov         r2, r3, lsl #16
  03340	e1a02822	 mov         r2, r2, lsr #16
  03344	e59d3038	 ldr         r3, [sp, #0x38]
  03348	e1c320b0	 strh        r2, [r3]

; 1338 :         rStatus.status.port.PortEnabled = 1;

  0334c	e59d3038	 ldr         r3, [sp, #0x38]
  03350	e1d330b0	 ldrh        r3, [r3]
  03354	e3832002	 orr         r2, r3, #2
  03358	e59d3038	 ldr         r3, [sp, #0x38]
  0335c	e1c320b0	 strh        r2, [r3]

; 1339 :         rStatus.status.port.PortOverCurrent = 0;

  03360	e59d3038	 ldr         r3, [sp, #0x38]
  03364	e1d320b0	 ldrh        r2, [r3]
  03368	e3a03cff	 mov         r3, #0xFF, 24
  0336c	e38330f7	 orr         r3, r3, #0xF7
  03370	e0022003	 and         r2, r2, r3
  03374	e59d3038	 ldr         r3, [sp, #0x38]
  03378	e1c320b0	 strh        r2, [r3]

; 1340 :         // we assume root hub ports are always powered, but believe the HW.
; 1341 :         rStatus.status.port.PortPower = 1;

  0337c	e59d3038	 ldr         r3, [sp, #0x38]
  03380	e1d330b0	 ldrh        r3, [r3]
  03384	e3832c01	 orr         r2, r3, #1, 24
  03388	e59d3038	 ldr         r3, [sp, #0x38]
  0338c	e1c320b0	 strh        r2, [r3]

; 1342 :         rStatus.status.port.PortReset = 0;

  03390	e59d3038	 ldr         r3, [sp, #0x38]
  03394	e1d320b0	 ldrh        r2, [r3]
  03398	e3a03cff	 mov         r3, #0xFF, 24
  0339c	e38330ef	 orr         r3, r3, #0xEF
  033a0	e0022003	 and         r2, r2, r3
  033a4	e59d3038	 ldr         r3, [sp, #0x38]
  033a8	e1c320b0	 strh        r2, [r3]

; 1343 :         rStatus.status.port.PortSuspended = 0;

  033ac	e59d3038	 ldr         r3, [sp, #0x38]
  033b0	e1d320b0	 ldrh        r2, [r3]
  033b4	e3a03cff	 mov         r3, #0xFF, 24
  033b8	e38330fb	 orr         r3, r3, #0xFB
  033bc	e0022003	 and         r2, r2, r3
  033c0	e59d3038	 ldr         r3, [sp, #0x38]
  033c4	e1c320b0	 strh        r2, [r3]

; 1344 :     }
; 1345 : #ifdef DEBUG // these are available in OHCI but this driver doesn't use them
; 1346 :     else {

  033c8	ea00005a	 b           |$LN1@GetPortSta|
  033cc		 |$LN2@GetPortSta|

; 1347 :         // request is to Hub. rStatus was already memset to 0 above.
; 1348 :         DEBUGCHK( port == 0 );

  033cc	e5dd3034	 ldrb        r3, [sp, #0x34]
  033d0	e3530000	 cmp         r3, #0
  033d4	1a000002	 bne         |$LN13@GetPortSta|
  033d8	e3a03001	 mov         r3, #1
  033dc	e58d3014	 str         r3, [sp, #0x14]
  033e0	ea000008	 b           |$LN14@GetPortSta|
  033e4		 |$LN13@GetPortSta|
  033e4	e3a03c05	 mov         r3, #5, 24
  033e8	e3833044	 orr         r3, r3, #0x44
  033ec	e59f2164	 ldr         r2, [pc, #0x164]
  033f0	e59f115c	 ldr         r1, [pc, #0x15C]
  033f4	e59f0154	 ldr         r0, [pc, #0x154]
  033f8	eb000000	 bl          NKDbgPrintfW
  033fc	e6000010	 __debugbreak_ce
  03400	e3a03000	 mov         r3, #0
  03404	e58d3014	 str         r3, [sp, #0x14]
  03408		 |$LN14@GetPortSta|

; 1349 :         // local power supply good
; 1350 :         DEBUGCHK( rStatus.status.hub.LocalPowerStatus == 0 );

  03408	e59d3038	 ldr         r3, [sp, #0x38]
  0340c	e1d330b0	 ldrh        r3, [r3]
  03410	e2033001	 and         r3, r3, #1
  03414	e3530000	 cmp         r3, #0
  03418	1a000002	 bne         |$LN15@GetPortSta|
  0341c	e3a03001	 mov         r3, #1
  03420	e58d3018	 str         r3, [sp, #0x18]
  03424	ea000008	 b           |$LN16@GetPortSta|
  03428		 |$LN15@GetPortSta|
  03428	e3a03c05	 mov         r3, #5, 24
  0342c	e3833046	 orr         r3, r3, #0x46
  03430	e59f2120	 ldr         r2, [pc, #0x120]
  03434	e59f1118	 ldr         r1, [pc, #0x118]
  03438	e59f0110	 ldr         r0, [pc, #0x110]
  0343c	eb000000	 bl          NKDbgPrintfW
  03440	e6000010	 __debugbreak_ce
  03444	e3a03000	 mov         r3, #0
  03448	e58d3018	 str         r3, [sp, #0x18]
  0344c		 |$LN16@GetPortSta|

; 1351 :         // no over current condition
; 1352 :         DEBUGCHK( rStatus.status.hub.OverCurrentIndicator == 0 );

  0344c	e59d3038	 ldr         r3, [sp, #0x38]
  03450	e1d330b0	 ldrh        r3, [r3]
  03454	e1a03f03	 mov         r3, r3, lsl #30
  03458	e1a03fa3	 mov         r3, r3, lsr #31
  0345c	e1a03803	 mov         r3, r3, lsl #16
  03460	e1a03823	 mov         r3, r3, lsr #16
  03464	e3530000	 cmp         r3, #0
  03468	1a000002	 bne         |$LN17@GetPortSta|
  0346c	e3a03001	 mov         r3, #1
  03470	e58d301c	 str         r3, [sp, #0x1C]
  03474	ea000008	 b           |$LN18@GetPortSta|
  03478		 |$LN17@GetPortSta|
  03478	e3a03c05	 mov         r3, #5, 24
  0347c	e3833048	 orr         r3, r3, #0x48
  03480	e59f20d0	 ldr         r2, [pc, #0xD0]
  03484	e59f10c8	 ldr         r1, [pc, #0xC8]
  03488	e59f00c0	 ldr         r0, [pc, #0xC0]
  0348c	eb000000	 bl          NKDbgPrintfW
  03490	e6000010	 __debugbreak_ce
  03494	e3a03000	 mov         r3, #0
  03498	e58d301c	 str         r3, [sp, #0x1C]
  0349c		 |$LN18@GetPortSta|

; 1353 :         // no change in power supply status
; 1354 :         DEBUGCHK( rStatus.change.hub.LocalPowerChange == 0 );

  0349c	e59d3038	 ldr         r3, [sp, #0x38]
  034a0	e2833002	 add         r3, r3, #2
  034a4	e1d330b0	 ldrh        r3, [r3]
  034a8	e2033001	 and         r3, r3, #1
  034ac	e3530000	 cmp         r3, #0
  034b0	1a000002	 bne         |$LN19@GetPortSta|
  034b4	e3a03001	 mov         r3, #1
  034b8	e58d3020	 str         r3, [sp, #0x20]
  034bc	ea000008	 b           |$LN20@GetPortSta|
  034c0		 |$LN19@GetPortSta|
  034c0	e3a03c05	 mov         r3, #5, 24
  034c4	e383304a	 orr         r3, r3, #0x4A
  034c8	e59f2088	 ldr         r2, [pc, #0x88]
  034cc	e59f1080	 ldr         r1, [pc, #0x80]
  034d0	e59f0078	 ldr         r0, [pc, #0x78]
  034d4	eb000000	 bl          NKDbgPrintfW
  034d8	e6000010	 __debugbreak_ce
  034dc	e3a03000	 mov         r3, #0
  034e0	e58d3020	 str         r3, [sp, #0x20]
  034e4		 |$LN20@GetPortSta|

; 1355 :         // no change in over current status
; 1356 :         DEBUGCHK( rStatus.change.hub.OverCurrentIndicatorChange == 0 );

  034e4	e59d3038	 ldr         r3, [sp, #0x38]
  034e8	e2833002	 add         r3, r3, #2
  034ec	e1d330b0	 ldrh        r3, [r3]
  034f0	e1a03f03	 mov         r3, r3, lsl #30
  034f4	e1a03fa3	 mov         r3, r3, lsr #31
  034f8	e1a03803	 mov         r3, r3, lsl #16
  034fc	e1a03823	 mov         r3, r3, lsr #16
  03500	e3530000	 cmp         r3, #0
  03504	1a000002	 bne         |$LN21@GetPortSta|
  03508	e3a03001	 mov         r3, #1
  0350c	e58d3024	 str         r3, [sp, #0x24]
  03510	ea000008	 b           |$LN22@GetPortSta|
  03514		 |$LN21@GetPortSta|
  03514	e3a03c05	 mov         r3, #5, 24
  03518	e383304c	 orr         r3, r3, #0x4C
  0351c	e59f2034	 ldr         r2, [pc, #0x34]
  03520	e59f102c	 ldr         r1, [pc, #0x2C]
  03524	e59f0024	 ldr         r0, [pc, #0x24]
  03528	eb000000	 bl          NKDbgPrintfW
  0352c	e6000010	 __debugbreak_ce
  03530	e3a03000	 mov         r3, #0
  03534	e58d3024	 str         r3, [sp, #0x24]
  03538		 |$LN22@GetPortSta|
  03538		 |$LN1@GetPortSta|

; 1357 :     }
; 1358 : #endif // DEBUG
; 1359 : 
; 1360 :     return TRUE;

  03538	e3a03001	 mov         r3, #1
  0353c	e58d3000	 str         r3, [sp]

; 1361 : }

  03540	e59d0000	 ldr         r0, [sp]
  03544	e28dd028	 add         sp, sp, #0x28
  03548	e89d6000	 ldmia       sp, {sp, lr}
  0354c	e12fff1e	 bx          lr
  03550		 |$LN26@GetPortSta|
  03550		 |$LN27@GetPortSta|
  03550	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  03554		 |$LN28@GetPortSta|
  03554	00000000	 DCD         |dpCurSettings|
  03558		 |$LN29@GetPortSta|
  03558	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0355c		 |$M43447|

			 ENDP  ; |?GetPortStatus@CHW@@UAAHEAAU_USB_HUB_AND_PORT_STATUS@@@Z|, CHW::GetPortStatus

	EXPORT	|?GetRootHubDescriptor@CHW@@QAAXAAU_USB_HUB_DESCRIPTOR@@@Z| ; CHW::GetRootHubDescriptor

  00090			 AREA	 |.pdata|, PDATA
|$T43462| DCD	|$LN9@GetRootHub|
	DCD	0x40003b04
; Function compile flags: /Odtp

  0355c			 AREA	 |.text|, CODE, ARM

  0355c		 |?GetRootHubDescriptor@CHW@@QAAXAAU_USB_HUB_DESCRIPTOR@@@Z| PROC ; CHW::GetRootHubDescriptor

; 1375 : {

  0355c		 |$LN9@GetRootHub|
  0355c	e1a0c00d	 mov         r12, sp
  03560	e92d0003	 stmdb       sp!, {r0, r1}
  03564	e92d5000	 stmdb       sp!, {r12, lr}
  03568	e24dd008	 sub         sp, sp, #8
  0356c		 |$M43459|

; 1376 :     PREFAST_DEBUGCHK ( m_portBase != 0 );

  0356c	e59d3010	 ldr         r3, [sp, #0x10]
  03570	e2833f52	 add         r3, r3, #0x52, 30
  03574	e5933000	 ldr         r3, [r3]
  03578	e3530000	 cmp         r3, #0
  0357c	0a000002	 beq         |$LN3@GetRootHub|
  03580	e3a03001	 mov         r3, #1
  03584	e58d3000	 str         r3, [sp]
  03588	ea000007	 b           |$LN4@GetRootHub|
  0358c		 |$LN3@GetRootHub|
  0358c	e3a03e56	 mov         r3, #0x56, 28
  03590	e59f20ac	 ldr         r2, [pc, #0xAC]
  03594	e59f10a4	 ldr         r1, [pc, #0xA4]
  03598	e59f009c	 ldr         r0, [pc, #0x9C]
  0359c	eb000000	 bl          NKDbgPrintfW
  035a0	e6000010	 __debugbreak_ce
  035a4	e3a03000	 mov         r3, #0
  035a8	e58d3000	 str         r3, [sp]
  035ac		 |$LN4@GetRootHub|

; 1377 : 
; 1378 :     descriptor.bNumberOfPorts = 1;

  035ac	e59d3014	 ldr         r3, [sp, #0x14]
  035b0	e2832002	 add         r2, r3, #2
  035b4	e3a03001	 mov         r3, #1
  035b8	e5c23000	 strb        r3, [r2]

; 1379 :     DEBUGCHK( descriptor.bNumberOfPorts >= 1 && descriptor.bNumberOfPorts <= 15 );

  035bc	e59d3014	 ldr         r3, [sp, #0x14]
  035c0	e2833002	 add         r3, r3, #2
  035c4	e5d33000	 ldrb        r3, [r3]
  035c8	e3530001	 cmp         r3, #1
  035cc	ba000007	 blt         |$LN5@GetRootHub|
  035d0	e59d3014	 ldr         r3, [sp, #0x14]
  035d4	e2833002	 add         r3, r3, #2
  035d8	e5d33000	 ldrb        r3, [r3]
  035dc	e353000f	 cmp         r3, #0xF
  035e0	ca000002	 bgt         |$LN5@GetRootHub|
  035e4	e3a03001	 mov         r3, #1
  035e8	e58d3004	 str         r3, [sp, #4]
  035ec	ea000008	 b           |$LN6@GetRootHub|
  035f0		 |$LN5@GetRootHub|
  035f0	e3a03c05	 mov         r3, #5, 24
  035f4	e3833063	 orr         r3, r3, #0x63
  035f8	e59f2044	 ldr         r2, [pc, #0x44]
  035fc	e59f103c	 ldr         r1, [pc, #0x3C]
  03600	e59f0034	 ldr         r0, [pc, #0x34]
  03604	eb000000	 bl          NKDbgPrintfW
  03608	e6000010	 __debugbreak_ce
  0360c	e3a03000	 mov         r3, #0
  03610	e58d3004	 str         r3, [sp, #4]
  03614		 |$LN6@GetRootHub|

; 1380 : 
; 1381 :     descriptor.bDescriptorLength = USB_HUB_DESCRIPTOR_MINIMUM_SIZE + (1-1)*2;

  03614	e59d2014	 ldr         r2, [sp, #0x14]
  03618	e3a03009	 mov         r3, #9
  0361c	e5c23000	 strb        r3, [r2]

; 1382 :     descriptor.bDescriptorType = USB_HUB_DESCRIPTOR_TYPE;

  03620	e59d3014	 ldr         r3, [sp, #0x14]
  03624	e2832001	 add         r2, r3, #1
  03628	e3a03029	 mov         r3, #0x29
  0362c	e5c23000	 strb        r3, [r2]

; 1383 : }

  03630	e28dd008	 add         sp, sp, #8
  03634	e89d6000	 ldmia       sp, {sp, lr}
  03638	e12fff1e	 bx          lr
  0363c		 |$LN10@GetRootHub|
  0363c		 |$LN11@GetRootHub|
  0363c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  03640		 |$LN12@GetRootHub|
  03640	00000000	 DCD         |dpCurSettings|
  03644		 |$LN13@GetRootHub|
  03644	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  03648		 |$M43460|

			 ENDP  ; |?GetRootHubDescriptor@CHW@@QAAXAAU_USB_HUB_DESCRIPTOR@@@Z|, CHW::GetRootHubDescriptor

	EXPORT	|??_C@_1JC@PFDOENJH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1OI@JCDBICJK@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@OPLDIJOH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@| [ DATA ] ; `string'

  00098			 AREA	 |.pdata|, PDATA
|$T43479| DCD	|$LN16@RootHubFea|
	DCD	0x40004504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@PFDOENJH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@| DCB "!"
	DCB	0x0, "!", 0x0, "!", 0x0, " ", 0x0, "C", 0x0, "H", 0x0, "W"
	DCB	0x0, ":", 0x0, ":", 0x0, "R", 0x0, "o", 0x0, "o", 0x0, "t"
	DCB	0x0, "H", 0x0, "u", 0x0, "b", 0x0, "F", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "f", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "l", 0x0, "t"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1OI@JCDBICJK@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@| DCB "!"
	DCB	0x0, "!", 0x0, "!", 0x0, " ", 0x0, "C", 0x0, "H", 0x0, "W"
	DCB	0x0, ":", 0x0, ":", 0x0, "R", 0x0, "o", 0x0, "o", 0x0, "t"
	DCB	0x0, "H", 0x0, "u", 0x0, "b", 0x0, "F", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, " ", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "_"
	DCB	0x0, "R", 0x0, "E", 0x0, "Q", 0x0, "U", 0x0, "E", 0x0, "S"
	DCB	0x0, "T", 0x0, "_", 0x0, "C", 0x0, "L", 0x0, "E", 0x0, "A"
	DCB	0x0, "R", 0x0, "_", 0x0, "F", 0x0, "E", 0x0, "A", 0x0, "T"
	DCB	0x0, "U", 0x0, "R", 0x0, "E", 0x0, ",", 0x0, " ", 0x0, "f"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "_", 0x0, "H"
	DCB	0x0, "U", 0x0, "B", 0x0, "_", 0x0, "F", 0x0, "E", 0x0, "A"
	DCB	0x0, "T", 0x0, "U", 0x0, "R", 0x0, "E", 0x0, "_", 0x0, "C"
	DCB	0x0, "_", 0x0, "P", 0x0, "O", 0x0, "R", 0x0, "T", 0x0, "_"
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "N", 0x0, "E", 0x0, "C"
	DCB	0x0, "T", 0x0, "I", 0x0, "O", 0x0, "N", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@OPLDIJOH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@| DCB "!"
	DCB	0x0, "!", 0x0, "!", 0x0, " ", 0x0, "C", 0x0, "H", 0x0, "W"
	DCB	0x0, ":", 0x0, ":", 0x0, "R", 0x0, "o", 0x0, "o", 0x0, "t"
	DCB	0x0, "H", 0x0, "u", 0x0, "b", 0x0, "F", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "f", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  03648			 AREA	 |.text|, CODE, ARM

  03648		 |?RootHubFeature@CHW@@UAAHEEG@Z| PROC	; CHW::RootHubFeature

; 1401 : {

  03648		 |$LN16@RootHubFea|
  03648	e1a0c00d	 mov         r12, sp
  0364c	e92d000f	 stmdb       sp!, {r0 - r3}
  03650	e92d5000	 stmdb       sp!, {r12, lr}
  03654	e24dd01c	 sub         sp, sp, #0x1C
  03658		 |$M43476|

; 1402 :     BOOL fResult = FALSE;

  03658	e3a03000	 mov         r3, #0
  0365c	e58d3004	 str         r3, [sp, #4]

; 1403 : 
; 1404 :     DEBUGMSG(1, (L"!!! CHW::RootHubFeature: port %d, setorclear %d, feature %d\r\n",
; 1405 :         (UINT32)port, (UINT32)setOrClearFeature, (UINT32)feature));

  03660	e1dd33b0	 ldrh        r3, [sp, #0x30]
  03664	e5dd202c	 ldrb        r2, [sp, #0x2C]
  03668	e5dd1028	 ldrb        r1, [sp, #0x28]
  0366c	e59f00e4	 ldr         r0, [pc, #0xE4]
  03670	eb000000	 bl          NKDbgPrintfW
  03674	e3a03001	 mov         r3, #1
  03678	e58d3010	 str         r3, [sp, #0x10]
  0367c	ea000001	 b           |$LN9@RootHubFea|
  03680	e3a03000	 mov         r3, #0
  03684	e58d3010	 str         r3, [sp, #0x10]
  03688		 |$LN9@RootHubFea|

; 1406 : 
; 1407 :     if (port > 0)

  03688	e5dd3028	 ldrb        r3, [sp, #0x28]
  0368c	e3530000	 cmp         r3, #0
  03690	da00001c	 ble         |$LN5@RootHubFea|

; 1408 :     {
; 1409 :         // Clear port port con status change feature ...
; 1410 : 
; 1411 :         if (setOrClearFeature == USB_REQUEST_CLEAR_FEATURE)

  03694	e5dd302c	 ldrb        r3, [sp, #0x2C]
  03698	e3530001	 cmp         r3, #1
  0369c	1a000017	 bne         |$LN4@RootHubFea|

; 1412 :         {
; 1413 :             switch (feature)

  036a0	e1dd33b0	 ldrh        r3, [sp, #0x30]
  036a4	e3530010	 cmp         r3, #0x10
  036a8	0a000000	 beq         |$LN1@RootHubFea|
  036ac	ea000013	 b           |$LN2@RootHubFea|
  036b0		 |$LN1@RootHubFea|

; 1414 :             {
; 1415 :             case USB_HUB_FEATURE_C_PORT_CONNECTION:
; 1416 : 
; 1417 :                 DEBUGMSG(1, (L"!!! CHW::RootHubFeature: port %d, setorclear USB_REQUEST_CLEAR_FEATURE, feature USB_HUB_FEATURE_C_PORT_CONNECTION\r\n",
; 1418 :                     (UINT32)port));

  036b0	e5dd1028	 ldrb        r1, [sp, #0x28]
  036b4	e59f0098	 ldr         r0, [pc, #0x98]
  036b8	eb000000	 bl          NKDbgPrintfW
  036bc	e3a03001	 mov         r3, #1
  036c0	e58d3014	 str         r3, [sp, #0x14]
  036c4	ea000001	 b           |$LN11@RootHubFea|
  036c8	e3a03000	 mov         r3, #0
  036cc	e58d3014	 str         r3, [sp, #0x14]
  036d0		 |$LN11@RootHubFea|

; 1419 : 
; 1420 :                 m_portStatus &= ~PORT_STATUS_CON_CHANGED;

  036d0	e59d3024	 ldr         r3, [sp, #0x24]
  036d4	e2833c01	 add         r3, r3, #1, 24
  036d8	e283309e	 add         r3, r3, #0x9E
  036dc	e5d33000	 ldrb        r3, [r3]
  036e0	e1a02003	 mov         r2, r3
  036e4	e3e03001	 mvn         r3, #1
  036e8	e0021003	 and         r1, r2, r3
  036ec	e59d3024	 ldr         r3, [sp, #0x24]
  036f0	e2833c01	 add         r3, r3, #1, 24
  036f4	e283209e	 add         r2, r3, #0x9E
  036f8	e20130ff	 and         r3, r1, #0xFF
  036fc	e5c23000	 strb        r3, [r2]
  03700		 |$LN2@RootHubFea|
  03700		 |$LN4@RootHubFea|

; 1421 :                 break;
; 1422 :             }
; 1423 :         }
; 1424 : 
; 1425 :         fResult = TRUE;

  03700	e3a03001	 mov         r3, #1
  03704	e58d3004	 str         r3, [sp, #4]
  03708		 |$LN5@RootHubFea|

; 1426 :     }
; 1427 : 
; 1428 :     DEBUGMSG(1, (L"!!! CHW::RootHubFeature: port %d, setorclear %d, feature %d, result %d\r\n",
; 1429 :         (UINT32)port, (UINT32)setOrClearFeature, (UINT32)feature, fResult));

  03708	e59d3004	 ldr         r3, [sp, #4]
  0370c	e58d3000	 str         r3, [sp]
  03710	e1dd33b0	 ldrh        r3, [sp, #0x30]
  03714	e5dd202c	 ldrb        r2, [sp, #0x2C]
  03718	e5dd1028	 ldrb        r1, [sp, #0x28]
  0371c	e59f002c	 ldr         r0, [pc, #0x2C]
  03720	eb000000	 bl          NKDbgPrintfW
  03724	e3a03001	 mov         r3, #1
  03728	e58d3018	 str         r3, [sp, #0x18]
  0372c	ea000001	 b           |$LN13@RootHubFea|
  03730	e3a03000	 mov         r3, #0
  03734	e58d3018	 str         r3, [sp, #0x18]
  03738		 |$LN13@RootHubFea|

; 1430 : 
; 1431 :     return fResult;

  03738	e59d3004	 ldr         r3, [sp, #4]
  0373c	e58d300c	 str         r3, [sp, #0xC]

; 1432 : }

  03740	e59d000c	 ldr         r0, [sp, #0xC]
  03744	e28dd01c	 add         sp, sp, #0x1C
  03748	e89d6000	 ldmia       sp, {sp, lr}
  0374c	e12fff1e	 bx          lr
  03750		 |$LN17@RootHubFea|
  03750		 |$LN18@RootHubFea|
  03750	00000000	 DCD         |??_C@_1JC@PFDOENJH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@|
  03754		 |$LN19@RootHubFea|
  03754	00000000	 DCD         |??_C@_1OI@JCDBICJK@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@|
  03758		 |$LN20@RootHubFea|
  03758	00000000	 DCD         |??_C@_1HM@OPLDIJOH@?$AA?$CB?$AA?$CB?$AA?$CB?$AA?5?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAR?$AAo?$AAo?$AAt?$AAH?$AAu?$AAb?$AAF?$AAe?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAp?$AAo?$AAr?$AAt?$AA?5?$AA?$CF?$AAd@|
  0375c		 |$M43477|

			 ENDP  ; |?RootHubFeature@CHW@@UAAHEEG@Z|, CHW::RootHubFeature

	EXPORT	|??_C@_1FE@POJMKFHF@?$AAR?$AAo?$AAo?$AAt?$AA?5?$AAh?$AAu?$AAb?$AA?0?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AA?$CG?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@PFPKIPLL@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000a0			 AREA	 |.pdata|, PDATA
|$T43493| DCD	|$LN12@ResetAndEn|
	DCD	0x40005b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@POJMKFHF@?$AAR?$AAo?$AAo?$AAt?$AA?5?$AAh?$AAu?$AAb?$AA?0?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AA?$CG?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?0?$AA?5@| DCB "R"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "h", 0x0, "u"
	DCB	0x0, "b", 0x0, ",", 0x0, " ", 0x0, "a", 0x0, "f", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, " ", 0x0, "&", 0x0, " ", 0x0, "e"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, ","
	DCB	0x0, " ", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@PFPKIPLL@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0375c			 AREA	 |.text|, CODE, ARM

  0375c		 |?ResetAndEnablePort@CHW@@UAAHE@Z| PROC ; CHW::ResetAndEnablePort

; 1449 : {

  0375c		 |$LN12@ResetAndEn|
  0375c	e1a0c00d	 mov         r12, sp
  03760	e92d0003	 stmdb       sp!, {r0, r1}
  03764	e92d5000	 stmdb       sp!, {r12, lr}
  03768	e24dd014	 sub         sp, sp, #0x14
  0376c		 |$M43490|

; 1450 :     BOOL fSuccess = TRUE;

  0376c	e3a03001	 mov         r3, #1
  03770	e58d3000	 str         r3, [sp]

; 1451 :     UCHAR Power;
; 1452 :     if( port >0 ){

  03774	e5dd3020	 ldrb        r3, [sp, #0x20]
  03778	e3530000	 cmp         r3, #0
  0377c	da00003b	 ble         |$LN3@ResetAndEn|

; 1453 :         // reset the host controller. It is recommended to wait for 50ms
; 1454 :         Power = READ_PORT_UCHAR( (m_portBase+USB_POWER_REG_OFFSET));

  03780	e59d301c	 ldr         r3, [sp, #0x1C]
  03784	e2833f52	 add         r3, r3, #0x52, 30
  03788	e5933000	 ldr         r3, [r3]
  0378c	e2833b01	 add         r3, r3, #1, 22
  03790	e2833001	 add         r3, r3, #1
  03794	e5d33000	 ldrb        r3, [r3]
  03798	e5cd3004	 strb        r3, [sp, #4]

; 1455 :         WRITE_PORT_UCHAR( (m_portBase+USB_POWER_REG_OFFSET), Power|BIT3);

  0379c	e5dd3004	 ldrb        r3, [sp, #4]
  037a0	e3833008	 orr         r3, r3, #8
  037a4	e20320ff	 and         r2, r3, #0xFF
  037a8	e59d301c	 ldr         r3, [sp, #0x1C]
  037ac	e2833f52	 add         r3, r3, #0x52, 30
  037b0	e5933000	 ldr         r3, [r3]
  037b4	e2833b01	 add         r3, r3, #1, 22
  037b8	e2833001	 add         r3, r3, #1
  037bc	e5c32000	 strb        r2, [r3]

; 1456 :         Sleep(200);

  037c0	e3a000c8	 mov         r0, #0xC8
  037c4	eb000000	 bl          Sleep

; 1457 :         WRITE_PORT_UCHAR( (m_portBase+USB_POWER_REG_OFFSET), Power & (~BIT3));

  037c8	e5dd3004	 ldrb        r3, [sp, #4]
  037cc	e1a02003	 mov         r2, r3
  037d0	e3e03008	 mvn         r3, #8
  037d4	e0023003	 and         r3, r2, r3
  037d8	e20320ff	 and         r2, r3, #0xFF
  037dc	e59d301c	 ldr         r3, [sp, #0x1C]
  037e0	e2833f52	 add         r3, r3, #0x52, 30
  037e4	e5933000	 ldr         r3, [r3]
  037e8	e2833b01	 add         r3, r3, #1, 22
  037ec	e2833001	 add         r3, r3, #1
  037f0	e5c32000	 strb        r2, [r3]

; 1458 :         Power = READ_PORT_UCHAR( (m_portBase+USB_POWER_REG_OFFSET));

  037f4	e59d301c	 ldr         r3, [sp, #0x1C]
  037f8	e2833f52	 add         r3, r3, #0x52, 30
  037fc	e5933000	 ldr         r3, [r3]
  03800	e2833b01	 add         r3, r3, #1, 22
  03804	e2833001	 add         r3, r3, #1
  03808	e5d33000	 ldrb        r3, [r3]
  0380c	e5cd3004	 strb        r3, [sp, #4]

; 1459 :         RETAILMSG(FALSE,(TEXT("Power = 0x%x\n"),Power));

  03810	ea000006	 b           |$LN6@ResetAndEn|
  03814	e5dd3004	 ldrb        r3, [sp, #4]
  03818	e1a01003	 mov         r1, r3
  0381c	e59f00a0	 ldr         r0, [pc, #0xA0]
  03820	eb000000	 bl          NKDbgPrintfW
  03824	e3a03001	 mov         r3, #1
  03828	e58d300c	 str         r3, [sp, #0xC]
  0382c	ea000001	 b           |$LN7@ResetAndEn|
  03830		 |$LN6@ResetAndEn|
  03830	e3a03000	 mov         r3, #0
  03834	e58d300c	 str         r3, [sp, #0xC]
  03838		 |$LN7@ResetAndEn|

; 1460 :         Sleep(400);

  03838	e3a00e19	 mov         r0, #0x19, 28
  0383c	eb000000	 bl          Sleep

; 1461 :         if(Power & (1<<4))

  03840	e5dd3004	 ldrb        r3, [sp, #4]
  03844	e3130010	 tst         r3, #0x10
  03848	0a000004	 beq         |$LN2@ResetAndEn|

; 1462 :             m_fHighSpeed = TRUE;

  0384c	e59d301c	 ldr         r3, [sp, #0x1C]
  03850	e2832f8a	 add         r2, r3, #0x8A, 30
  03854	e3a03001	 mov         r3, #1
  03858	e5823000	 str         r3, [r2]

; 1463 :         else

  0385c	ea000003	 b           |$LN1@ResetAndEn|
  03860		 |$LN2@ResetAndEn|

; 1464 :             m_fHighSpeed = FALSE;

  03860	e59d301c	 ldr         r3, [sp, #0x1C]
  03864	e2832f8a	 add         r2, r3, #0x8A, 30
  03868	e3a03000	 mov         r3, #0
  0386c	e5823000	 str         r3, [r2]
  03870		 |$LN1@ResetAndEn|
  03870		 |$LN3@ResetAndEn|

; 1465 :     }
; 1466 : 
; 1467 :     DEBUGMSG( ZONE_REGISTERS, (TEXT("Root hub, after reset & enable, port %d \n"), port) );

  03870	e59f3048	 ldr         r3, [pc, #0x48]
  03874	e5933440	 ldr         r3, [r3, #0x440]
  03878	e3130004	 tst         r3, #4
  0387c	0a000006	 beq         |$LN8@ResetAndEn|
  03880	e5dd3020	 ldrb        r3, [sp, #0x20]
  03884	e1a01003	 mov         r1, r3
  03888	e59f002c	 ldr         r0, [pc, #0x2C]
  0388c	eb000000	 bl          NKDbgPrintfW
  03890	e3a03001	 mov         r3, #1
  03894	e58d3010	 str         r3, [sp, #0x10]
  03898	ea000001	 b           |$LN9@ResetAndEn|
  0389c		 |$LN8@ResetAndEn|
  0389c	e3a03000	 mov         r3, #0
  038a0	e58d3010	 str         r3, [sp, #0x10]
  038a4		 |$LN9@ResetAndEn|

; 1468 :     return fSuccess;

  038a4	e59d3000	 ldr         r3, [sp]
  038a8	e58d3008	 str         r3, [sp, #8]

; 1469 : }

  038ac	e59d0008	 ldr         r0, [sp, #8]
  038b0	e28dd014	 add         sp, sp, #0x14
  038b4	e89d6000	 ldmia       sp, {sp, lr}
  038b8	e12fff1e	 bx          lr
  038bc		 |$LN13@ResetAndEn|
  038bc		 |$LN14@ResetAndEn|
  038bc	00000000	 DCD         |??_C@_1FE@POJMKFHF@?$AAR?$AAo?$AAo?$AAt?$AA?5?$AAh?$AAu?$AAb?$AA?0?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AA?$CG?$AA?5?$AAe?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?0?$AA?5@|
  038c0		 |$LN15@ResetAndEn|
  038c0	00000000	 DCD         |dpCurSettings|
  038c4		 |$LN16@ResetAndEn|
  038c4	00000000	 DCD         |??_C@_1BM@PFPKIPLL@?$AAP?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?6?$AA?$AA@|
  038c8		 |$M43491|

			 ENDP  ; |?ResetAndEnablePort@CHW@@UAAHE@Z|, CHW::ResetAndEnablePort


  000a8			 AREA	 |.pdata|, PDATA
|$T43502| DCD	|$LN5@DisablePor|
	DCD	0x40000f03
; Function compile flags: /Odtp

  038c8			 AREA	 |.text|, CODE, ARM

  038c8		 |?DisablePort@CHW@@UAAXE@Z| PROC	; CHW::DisablePort

; 1482 : {

  038c8		 |$LN5@DisablePor|
  038c8	e1a0c00d	 mov         r12, sp
  038cc	e92d0003	 stmdb       sp!, {r0, r1}
  038d0	e92d5010	 stmdb       sp!, {r4, r12, lr}
  038d4		 |$M43499|

; 1483 :     RootHubFeature(port, USB_REQUEST_CLEAR_FEATURE, USB_HUB_FEATURE_PORT_ENABLE);

  038d4	e3a03001	 mov         r3, #1
  038d8	e3a02001	 mov         r2, #1
  038dc	e5dd1010	 ldrb        r1, [sp, #0x10]
  038e0	e59d000c	 ldr         r0, [sp, #0xC]
  038e4	e5900000	 ldr         r0, [r0]
  038e8	e280e038	 add         lr, r0, #0x38
  038ec	e59d000c	 ldr         r0, [sp, #0xC]
  038f0	e59e4000	 ldr         r4, [lr]
  038f4	e1a0e00f	 mov         lr, pc
  038f8	e12fff14	 bx          r4

; 1484 : }

  038fc	e89d6010	 ldmia       sp, {r4, sp, lr}
  03900	e12fff1e	 bx          lr
  03904		 |$M43500|

			 ENDP  ; |?DisablePort@CHW@@UAAXE@Z|, CHW::DisablePort

	EXPORT	|??_C@_1FA@LCMCINEE@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@PALDDFM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5@| [ DATA ] ; `string'
	IMPORT	|WaitForMultipleObjects|

  000b0			 AREA	 |.pdata|, PDATA
|$T43512| DCD	|$LN12@WaitForPor|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@LCMCINEE@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, "l"
	DCB	0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@PALDDFM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "W"
	DCB	0x0, "a", 0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "S", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "g", 0x0, "e", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "m", 0x0, "u", 0x0, "l", 0x0, "t", 0x0, "i"
	DCB	0x0, "p", 0x0, "l", 0x0, "e", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03904			 AREA	 |.text|, CODE, ARM

  03904		 |?WaitForPortStatusChange@CHW@@UAAHPAX@Z| PROC ; CHW::WaitForPortStatusChange

; 1486 : {

  03904		 |$LN12@WaitForPor|
  03904	e1a0c00d	 mov         r12, sp
  03908	e92d0003	 stmdb       sp!, {r0, r1}
  0390c	e92d5000	 stmdb       sp!, {r12, lr}
  03910	e24dd014	 sub         sp, sp, #0x14
  03914		 |$M43509|

; 1487 :     if (m_hUsbHubChangeEvent)

  03914	e59d301c	 ldr         r3, [sp, #0x1C]
  03918	e2833f61	 add         r3, r3, #0x61, 30
  0391c	e5933000	 ldr         r3, [r3]
  03920	e3530000	 cmp         r3, #0
  03924	0a000034	 beq         |$LN3@WaitForPor|

; 1488 :         {
; 1489 :         if (m_hHubChanged!=NULL)

  03928	e59d3020	 ldr         r3, [sp, #0x20]
  0392c	e3530000	 cmp         r3, #0
  03930	0a00001a	 beq         |$LN2@WaitForPor|

; 1490 :             {
; 1491 :             HANDLE hArray[2];
; 1492 :             hArray[0]=m_hHubChanged;

  03934	e59d3020	 ldr         r3, [sp, #0x20]
  03938	e58d3000	 str         r3, [sp]

; 1493 :             hArray[1]=m_hUsbHubChangeEvent;

  0393c	e59d301c	 ldr         r3, [sp, #0x1C]
  03940	e2833f61	 add         r3, r3, #0x61, 30
  03944	e5933000	 ldr         r3, [r3]
  03948	e58d3004	 str         r3, [sp, #4]

; 1494 :             DEBUGMSG(ZONE_INIT && ZONE_VERBOSE, (TEXT("-CHW::WaitForPortStatusChange - multiple\n")));

  0394c	e59f30c4	 ldr         r3, [pc, #0xC4]
  03950	e5933440	 ldr         r3, [r3, #0x440]
  03954	e3130002	 tst         r3, #2
  03958	0a000008	 beq         |$LN6@WaitForPor|
  0395c	e59f30b4	 ldr         r3, [pc, #0xB4]
  03960	e5933440	 ldr         r3, [r3, #0x440]
  03964	e3130a01	 tst         r3, #1, 20
  03968	0a000004	 beq         |$LN6@WaitForPor|
  0396c	e59f00a8	 ldr         r0, [pc, #0xA8]
  03970	eb000000	 bl          NKDbgPrintfW
  03974	e3a03001	 mov         r3, #1
  03978	e58d300c	 str         r3, [sp, #0xC]
  0397c	ea000001	 b           |$LN7@WaitForPor|
  03980		 |$LN6@WaitForPor|
  03980	e3a03000	 mov         r3, #0
  03984	e58d300c	 str         r3, [sp, #0xC]
  03988		 |$LN7@WaitForPor|

; 1495 :             WaitForMultipleObjects(2,hArray,FALSE,INFINITE);

  03988	e3e03000	 mvn         r3, #0
  0398c	e3a02000	 mov         r2, #0
  03990	e28d1000	 add         r1, sp, #0
  03994	e3a00002	 mov         r0, #2
  03998	eb000000	 bl          WaitForMultipleObjects

; 1496 :             }
; 1497 :         else

  0399c	ea000013	 b           |$LN1@WaitForPor|
  039a0		 |$LN2@WaitForPor|

; 1498 :             {
; 1499 :             DEBUGMSG(ZONE_INIT && ZONE_VERBOSE, (TEXT("-CHW::WaitForPortStatusChange - single\n")));

  039a0	e59f3070	 ldr         r3, [pc, #0x70]
  039a4	e5933440	 ldr         r3, [r3, #0x440]
  039a8	e3130002	 tst         r3, #2
  039ac	0a000008	 beq         |$LN8@WaitForPor|
  039b0	e59f3060	 ldr         r3, [pc, #0x60]
  039b4	e5933440	 ldr         r3, [r3, #0x440]
  039b8	e3130a01	 tst         r3, #1, 20
  039bc	0a000004	 beq         |$LN8@WaitForPor|
  039c0	e59f004c	 ldr         r0, [pc, #0x4C]
  039c4	eb000000	 bl          NKDbgPrintfW
  039c8	e3a03001	 mov         r3, #1
  039cc	e58d3010	 str         r3, [sp, #0x10]
  039d0	ea000001	 b           |$LN9@WaitForPor|
  039d4		 |$LN8@WaitForPor|
  039d4	e3a03000	 mov         r3, #0
  039d8	e58d3010	 str         r3, [sp, #0x10]
  039dc		 |$LN9@WaitForPor|

; 1500 :             WaitForSingleObject(m_hUsbHubChangeEvent,INFINITE);

  039dc	e3e01000	 mvn         r1, #0
  039e0	e59d301c	 ldr         r3, [sp, #0x1C]
  039e4	e2833f61	 add         r3, r3, #0x61, 30
  039e8	e5930000	 ldr         r0, [r3]
  039ec	eb000000	 bl          WaitForSingleObject
  039f0		 |$LN1@WaitForPor|

; 1501 :             }
; 1502 :         return TRUE;

  039f0	e3a03001	 mov         r3, #1
  039f4	e58d3008	 str         r3, [sp, #8]
  039f8	ea000001	 b           |$LN4@WaitForPor|
  039fc		 |$LN3@WaitForPor|

; 1503 :         }
; 1504 : 
; 1505 :     return FALSE;

  039fc	e3a03000	 mov         r3, #0
  03a00	e58d3008	 str         r3, [sp, #8]
  03a04		 |$LN4@WaitForPor|

; 1506 : }

  03a04	e59d0008	 ldr         r0, [sp, #8]
  03a08	e28dd014	 add         sp, sp, #0x14
  03a0c	e89d6000	 ldmia       sp, {sp, lr}
  03a10	e12fff1e	 bx          lr
  03a14		 |$LN13@WaitForPor|
  03a14		 |$LN14@WaitForPor|
  03a14	00000000	 DCD         |??_C@_1FA@LCMCINEE@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5@|
  03a18		 |$LN15@WaitForPor|
  03a18	00000000	 DCD         |dpCurSettings|
  03a1c		 |$LN16@WaitForPor|
  03a1c	00000000	 DCD         |??_C@_1FE@PALDDFM@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAP?$AAo?$AAr?$AAt?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AAC?$AAh?$AAa?$AAn?$AAg?$AAe?$AA?5?$AA?9?$AA?5@|
  03a20		 |$M43510|

			 ENDP  ; |?WaitForPortStatusChange@CHW@@UAAHPAX@Z|, CHW::WaitForPortStatusChange

	EXPORT	|??_C@_1DG@GHFBFGDF@?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAD?$AAU?$AAM?$AAP?$AA?5?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AAS?$AA?5?$AAD?$AAO?$AAN?$AAE?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@GCACGEGK@?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAD?$AAU?$AAM?$AAP?$AA?5?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AAS?$AA?5?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?DumpAllRegisters@CHW@@CAXXZ|		; CHW::DumpAllRegisters

  000b8			 AREA	 |.pdata|, PDATA
|$T43525| DCD	|$LN12@DumpAllReg|
	DCD	0x40002a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@GHFBFGDF@?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAD?$AAU?$AAM?$AAP?$AA?5?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AAS?$AA?5?$AAD?$AAO?$AAN?$AAE?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D"
	DCB	0x0, "U", 0x0, "M", 0x0, "P", 0x0, " ", 0x0, "R", 0x0, "E"
	DCB	0x0, "G", 0x0, "I", 0x0, "S", 0x0, "T", 0x0, "E", 0x0, "R"
	DCB	0x0, "S", 0x0, " ", 0x0, "D", 0x0, "O", 0x0, "N", 0x0, "E"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@GCACGEGK@?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAD?$AAU?$AAM?$AAP?$AA?5?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AAS?$AA?5?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D"
	DCB	0x0, "U", 0x0, "M", 0x0, "P", 0x0, " ", 0x0, "R", 0x0, "E"
	DCB	0x0, "G", 0x0, "I", 0x0, "S", 0x0, "T", 0x0, "E", 0x0, "R"
	DCB	0x0, "S", 0x0, " ", 0x0, "B", 0x0, "E", 0x0, "G", 0x0, "I"
	DCB	0x0, "N", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03a20			 AREA	 |.text|, CODE, ARM

  03a20		 |?DumpAllRegisters@CHW@@CAXXZ| PROC	; CHW::DumpAllRegisters

; 1522 : {

  03a20		 |$LN12@DumpAllReg|
  03a20	e52de004	 str         lr, [sp, #-4]!
  03a24	e24dd00c	 sub         sp, sp, #0xC
  03a28		 |$M43522|

; 1523 :     DEBUGMSG(ZONE_REGISTERS, (TEXT("CHW - DUMP REGISTERS BEGIN\n")));

  03a28	e59f3090	 ldr         r3, [pc, #0x90]
  03a2c	e5933440	 ldr         r3, [r3, #0x440]
  03a30	e3130004	 tst         r3, #4
  03a34	0a000004	 beq         |$LN6@DumpAllReg|
  03a38	e59f0084	 ldr         r0, [pc, #0x84]
  03a3c	eb000000	 bl          NKDbgPrintfW
  03a40	e3a03001	 mov         r3, #1
  03a44	e58d3004	 str         r3, [sp, #4]
  03a48	ea000001	 b           |$LN7@DumpAllReg|
  03a4c		 |$LN6@DumpAllReg|
  03a4c	e3a03000	 mov         r3, #0
  03a50	e58d3004	 str         r3, [sp, #4]
  03a54		 |$LN7@DumpAllReg|

; 1524 :     for ( USHORT port = 1; port <= UHCD_NUM_ROOT_HUB_PORTS; port++ ) {

  03a54	e3a03001	 mov         r3, #1
  03a58	e1cd30b0	 strh        r3, [sp]
  03a5c	ea000004	 b           |$LN3@DumpAllReg|
  03a60		 |$LN2@DumpAllReg|
  03a60	e1dd30b0	 ldrh        r3, [sp]
  03a64	e2833001	 add         r3, r3, #1
  03a68	e1a03803	 mov         r3, r3, lsl #16
  03a6c	e1a03823	 mov         r3, r3, lsr #16
  03a70	e1cd30b0	 strh        r3, [sp]
  03a74		 |$LN3@DumpAllReg|
  03a74	e1dd30b0	 ldrh        r3, [sp]
  03a78	e3530002	 cmp         r3, #2
  03a7c	ca000000	 bgt         |$LN1@DumpAllReg|

; 1525 :         ;
; 1526 :     }

  03a80	eafffff6	 b           |$LN2@DumpAllReg|
  03a84		 |$LN1@DumpAllReg|

; 1527 :     DEBUGMSG(ZONE_REGISTERS, (TEXT("CHW - DUMP REGISTERS DONE\n")));

  03a84	e59f3034	 ldr         r3, [pc, #0x34]
  03a88	e5933440	 ldr         r3, [r3, #0x440]
  03a8c	e3130004	 tst         r3, #4
  03a90	0a000004	 beq         |$LN8@DumpAllReg|
  03a94	e59f0020	 ldr         r0, [pc, #0x20]
  03a98	eb000000	 bl          NKDbgPrintfW
  03a9c	e3a03001	 mov         r3, #1
  03aa0	e58d3008	 str         r3, [sp, #8]
  03aa4	ea000001	 b           |$LN9@DumpAllReg|
  03aa8		 |$LN8@DumpAllReg|
  03aa8	e3a03000	 mov         r3, #0
  03aac	e58d3008	 str         r3, [sp, #8]
  03ab0		 |$LN9@DumpAllReg|

; 1528 : }

  03ab0	e28dd00c	 add         sp, sp, #0xC
  03ab4	e49de004	 ldr         lr, [sp], #4
  03ab8	e12fff1e	 bx          lr
  03abc		 |$LN13@DumpAllReg|
  03abc		 |$LN14@DumpAllReg|
  03abc	00000000	 DCD         |??_C@_1DG@GHFBFGDF@?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAD?$AAU?$AAM?$AAP?$AA?5?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AAS?$AA?5?$AAD?$AAO?$AAN?$AAE?$AA?6?$AA?$AA@|
  03ac0		 |$LN15@DumpAllReg|
  03ac0	00000000	 DCD         |dpCurSettings|
  03ac4		 |$LN16@DumpAllReg|
  03ac4	00000000	 DCD         |??_C@_1DI@GCACGEGK@?$AAC?$AAH?$AAW?$AA?5?$AA?9?$AA?5?$AAD?$AAU?$AAM?$AAP?$AA?5?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAE?$AAR?$AAS?$AA?5?$AAB?$AAE?$AAG?$AAI?$AAN?$AA?6?$AA?$AA@|
  03ac8		 |$M43523|

			 ENDP  ; |?DumpAllRegisters@CHW@@CAXXZ|, CHW::DumpAllRegisters

	EXPORT	|?UsbProcessingThread@CHW@@AAAKXZ|	; CHW::UsbProcessingThread

  000c0			 AREA	 |.pdata|, PDATA
|$T43535| DCD	|$LN5@UsbProcess|
	DCD	0x40000d04
; Function compile flags: /Odtp

  03ac8			 AREA	 |.text|, CODE, ARM

  03ac8		 |?UsbProcessingThreadStub@CHW@@CAKPAX@Z| PROC ; CHW::UsbProcessingThreadStub

; 1532 : {

  03ac8		 |$LN5@UsbProcess|
  03ac8	e1a0c00d	 mov         r12, sp
  03acc	e92d0001	 stmdb       sp!, {r0}
  03ad0	e92d5000	 stmdb       sp!, {r12, lr}
  03ad4	e24dd008	 sub         sp, sp, #8
  03ad8		 |$M43532|

; 1533 :     return ((CHW *)context)->UsbProcessingThread();

  03ad8	e59d0010	 ldr         r0, [sp, #0x10]
  03adc	eb000000	 bl          |?UsbProcessingThread@CHW@@AAAKXZ|
  03ae0	e58d0004	 str         r0, [sp, #4]
  03ae4	e59d3004	 ldr         r3, [sp, #4]
  03ae8	e58d3000	 str         r3, [sp]

; 1534 : }

  03aec	e59d0000	 ldr         r0, [sp]
  03af0	e28dd008	 add         sp, sp, #8
  03af4	e89d6000	 ldmia       sp, {sp, lr}
  03af8	e12fff1e	 bx          lr
  03afc		 |$M43533|

			 ENDP  ; |?UsbProcessingThreadStub@CHW@@CAKPAX@Z|, CHW::UsbProcessingThreadStub

	EXPORT	|??_C@_1II@LBNMOOPF@?$AAR?$AAX?$AA?5?$AAI?$AAS?$AAO?$AA?5?$AAd?$AAo?$AAe?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAe?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@DCFKBPOJ@?$AAT?$AAX?$AA?5?$AAI?$AAS?$AAO?$AA?5?$AAd?$AAo?$AAe?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAe?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@HAFKPJPD@?$AAI?$AAN?$AA?5?$AAg?$AAi?$AAv?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BGCEKLPB@?$AAI?$AAN?$AA?5?$AAt?$AAa?$AAk?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@MPMDMEEF@?$AAO?$AAU?$AAT?$AA?5?$AAg?$AAi?$AAv?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@KJLNJGEH@?$AAO?$AAU?$AAT?$AA?5?$AAt?$AAa?$AAk?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@OAANCGDM@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAE?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAF?$AAr?$AAo?$AAm?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@GIDBIEEG@?$AAP?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?9?$AA?9?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@POIBIBDK@?$AAP?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|?InitializeTransaction@CHW@@QAAXIPAX0@Z| ; CHW::InitializeTransaction
	IMPORT	|ReleaseSemaphore|
	IMPORT	|?FreeTD@@YAXPAU_USBTD@@@Z|		; FreeTD
	IMPORT	|?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z| ; RemoveElementFromList
	IMPORT	|?ValidateTransferState@CCppiDmaController@@IAAHXZ| ; CCppiDmaController::ValidateTransferState

  000c8			 AREA	 |.pdata|, PDATA
|$T43581| DCD	|$LN178@UsbProcess@2|
	DCD	0x4005be04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@LBNMOOPF@?$AAR?$AAX?$AA?5?$AAI?$AAS?$AAO?$AA?5?$AAd?$AAo?$AAe?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAe?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl@| DCB "R"
	DCB	0x0, "X", 0x0, " ", 0x0, "I", 0x0, "S", 0x0, "O", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d", 0x0, "u"
	DCB	0x0, "l", 0x0, "e", 0x0, "!", 0x0, " ", 0x0, "C", 0x0, "u"
	DCB	0x0, "r", 0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@DCFKBPOJ@?$AAT?$AAX?$AA?5?$AAI?$AAS?$AAO?$AA?5?$AAd?$AAo?$AAe?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAe?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl@| DCB "T"
	DCB	0x0, "X", 0x0, " ", 0x0, "I", 0x0, "S", 0x0, "O", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "e"
	DCB	0x0, "t", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " "
	DCB	0x0, "s", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d", 0x0, "u"
	DCB	0x0, "l", 0x0, "e", 0x0, "!", 0x0, " ", 0x0, "C", 0x0, "u"
	DCB	0x0, "r", 0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, "F", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@HAFKPJPD@?$AAI?$AAN?$AA?5?$AAg?$AAi?$AAv?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "N", 0x0, " ", 0x0, "g", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BGCEKLPB@?$AAI?$AAN?$AA?5?$AAt?$AAa?$AAk?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "N", 0x0, " ", 0x0, "t", 0x0, "a", 0x0, "k", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@MPMDMEEF@?$AAO?$AAU?$AAT?$AA?5?$AAg?$AAi?$AAv?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "U", 0x0, "T", 0x0, " ", 0x0, "g", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@KJLNJGEH@?$AAO?$AAU?$AAT?$AA?5?$AAt?$AAa?$AAk?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "U", 0x0, "T", 0x0, " ", 0x0, "t", 0x0, "a", 0x0, "k"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@OAANCGDM@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAE?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAF?$AAr?$AAo?$AAm?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "E"
	DCB	0x0, "l", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "F", 0x0, "r", 0x0, "o", 0x0, "m", 0x0, "L", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@GIDBIEEG@?$AAP?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?9?$AA?9?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@POIBIBDK@?$AAP?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "P"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03afc			 AREA	 |.text|, CODE, ARM

  03afc		 |?UsbProcessingThread@CHW@@AAAKXZ| PROC ; CHW::UsbProcessingThread

; 1550 : {

  03afc		 |$LN178@UsbProcess@2|
  03afc	e1a0c00d	 mov         r12, sp
  03b00	e92d0001	 stmdb       sp!, {r0}
  03b04	e92d5000	 stmdb       sp!, {r12, lr}
  03b08	e24dd0e8	 sub         sp, sp, #0xE8
  03b0c		 |$M43578|

; 1551 :     USBED *pED;
; 1552 :     USBTD *pTD;
; 1553 :     BOOL fEnableSOF = FALSE;

  03b0c	e3a03000	 mov         r3, #0
  03b10	e58d3010	 str         r3, [sp, #0x10]

; 1554 :     BOOL fEnableSOFStateChanged = FALSE;

  03b14	e3a03000	 mov         r3, #0
  03b18	e58d3018	 str         r3, [sp, #0x18]

; 1555 :     DWORD dwWait;
; 1556 : 
; 1557 : #ifdef MUSB_USEDMA
; 1558 :     DWORD dwNow, dwLastStateCheck = 0;

  03b1c	e3a03000	 mov         r3, #0
  03b20	e58d300c	 str         r3, [sp, #0xC]
  03b24		 |$LN174@UsbProcess@2|
  03b24		 |$LN133@UsbProcess@2|

; 1559 : #endif
; 1560 : 
; 1561 :     for(;;)
; 1562 :     {
; 1563 :         dwWait = WaitForSingleObject(g_hUsbProcessingEvent, PROCESSING_EVENT_TIMEOUT);

  03b24	e3a01ffa	 mov         r1, #0xFA, 30
  03b28	e59f3654	 ldr         r3, [pc, #0x654]
  03b2c	e5930000	 ldr         r0, [r3]
  03b30	eb000000	 bl          WaitForSingleObject
  03b34	e58d0048	 str         r0, [sp, #0x48]
  03b38	e59d3048	 ldr         r3, [sp, #0x48]
  03b3c	e58d3000	 str         r3, [sp]

; 1564 : 
; 1565 :         if (m_fUsbInterruptThreadClosing)

  03b40	e59d30f0	 ldr         r3, [sp, #0xF0]
  03b44	e2833f62	 add         r3, r3, #0x62, 30
  03b48	e5933000	 ldr         r3, [r3]
  03b4c	e3530000	 cmp         r3, #0
  03b50	0a000000	 beq         |$LN131@UsbProcess@2|

; 1566 :             break;

  03b54	ea000599	 b           |$LN132@UsbProcess@2|
  03b58		 |$LN131@UsbProcess@2|

; 1567 : 
; 1568 : #ifdef MUSB_USEDMA
; 1569 : 
; 1570 :         // Validate DMA transfer state
; 1571 :         //
; 1572 :         // Notes: as far as error conditions (e.g. STALL) do not trigger DMA completion
; 1573 :         //        interrupt, the only possibilities to detect those errors are:
; 1574 :         //
; 1575 :         //        1) Enable/handle both EP and CPPI interrupts;
; 1576 :         //        2) Periodically poll transfer status checking for errors.
; 1577 :         //
; 1578 :         //        The first method is too expensive involving at least TWO interrupt
; 1579 :         //        events per USB packet! We will use the second one instead.
; 1580 : 
; 1581 :         if (((SOhcdPdd*)m_pPddContext)->CurrentDx == D0) // Do not fail transfers when powered down

  03b58	e59d30f0	 ldr         r3, [sp, #0xF0]
  03b5c	e2833e19	 add         r3, r3, #0x19, 28
  03b60	e5933000	 ldr         r3, [r3]
  03b64	e2833e22	 add         r3, r3, #0x22, 28
  03b68	e5933000	 ldr         r3, [r3]
  03b6c	e3530000	 cmp         r3, #0
  03b70	1a00001c	 bne         |$LN130@UsbProcess@2|

; 1582 :         {
; 1583 :             dwNow = GetTickCount();

  03b74	eb000000	 bl          GetTickCount
  03b78	e58d004c	 str         r0, [sp, #0x4C]
  03b7c	e59d304c	 ldr         r3, [sp, #0x4C]
  03b80	e58d3014	 str         r3, [sp, #0x14]

; 1584 :             if ((dwWait == WAIT_TIMEOUT) || ((INT32)(dwNow - dwLastStateCheck) >= PROCESSING_EVENT_TIMEOUT))

  03b84	e59d2000	 ldr         r2, [sp]
  03b88	e3a03c01	 mov         r3, #1, 24
  03b8c	e3833002	 orr         r3, r3, #2
  03b90	e1520003	 cmp         r2, r3
  03b94	0a000004	 beq         |$LN128@UsbProcess@2|
  03b98	e59d2014	 ldr         r2, [sp, #0x14]
  03b9c	e59d300c	 ldr         r3, [sp, #0xC]
  03ba0	e0423003	 sub         r3, r2, r3
  03ba4	e3530ffa	 cmp         r3, #0xFA, 30
  03ba8	ba00000e	 blt         |$LN129@UsbProcess@2|
  03bac		 |$LN128@UsbProcess@2|

; 1585 :             {
; 1586 :                 dwLastStateCheck = dwNow;

  03bac	e59d3014	 ldr         r3, [sp, #0x14]
  03bb0	e58d300c	 str         r3, [sp, #0xC]

; 1587 :                 if (m_dmaCrtl.ValidateTransferState() && (dwWait == WAIT_TIMEOUT))

  03bb4	e59d30f0	 ldr         r3, [sp, #0xF0]
  03bb8	e2830e33	 add         r0, r3, #0x33, 28
  03bbc	eb000000	 bl          |?ValidateTransferState@CCppiDmaController@@IAAHXZ|
  03bc0	e58d0050	 str         r0, [sp, #0x50]
  03bc4	e59d3050	 ldr         r3, [sp, #0x50]
  03bc8	e3530000	 cmp         r3, #0
  03bcc	0a000005	 beq         |$LN127@UsbProcess@2|
  03bd0	e59d2000	 ldr         r2, [sp]
  03bd4	e3a03c01	 mov         r3, #1, 24
  03bd8	e3833002	 orr         r3, r3, #2
  03bdc	e1520003	 cmp         r2, r3
  03be0	1a000000	 bne         |$LN127@UsbProcess@2|

; 1588 :                 {
; 1589 :                     // Nothing to do, just continue sleeping
; 1590 :                     continue;

  03be4	eaffffce	 b           |$LN133@UsbProcess@2|
  03be8		 |$LN127@UsbProcess@2|
  03be8		 |$LN129@UsbProcess@2|
  03be8		 |$LN130@UsbProcess@2|

; 1591 :                 }
; 1592 :             }
; 1593 :         }
; 1594 : 
; 1595 : #endif // MUSB_USEDMA
; 1596 : 
; 1597 :         LockProcessingThread();

  03be8	e59d00f0	 ldr         r0, [sp, #0xF0]
  03bec	eb000000	 bl          |?LockProcessingThread@CHW@@QAAXXZ|

; 1598 : 
; 1599 :         fEnableSOFStateChanged = FALSE;

  03bf0	e3a03000	 mov         r3, #0
  03bf4	e58d3018	 str         r3, [sp, #0x18]

; 1600 : 
; 1601 : 
; 1602 :         ///////////////////////////////////////////////////////////////////////////
; 1603 :         // Control requests
; 1604 : 
; 1605 :         pED = (USBED*)m_pControlHead;

  03bf8	e59d30f0	 ldr         r3, [sp, #0xF0]
  03bfc	e28330a8	 add         r3, r3, #0xA8
  03c00	e5933000	 ldr         r3, [r3]
  03c04	e58d3008	 str         r3, [sp, #8]
  03c08		 |$LN126@UsbProcess@2|

; 1606 :         while(pED){

  03c08	e59d3008	 ldr         r3, [sp, #8]
  03c0c	e3530000	 cmp         r3, #0
  03c10	0a000088	 beq         |$LN125@UsbProcess@2|
  03c14		 |$LN175@UsbProcess@2|
  03c14		 |$redoforsameEDCtl$42135|

; 1607 : redoforsameEDCtl:
; 1608 : 
; 1609 :             if(pED->HeadTD && (pED->HeadTD != pED->TailTD)){

  03c14	e59d3008	 ldr         r3, [sp, #8]
  03c18	e2833014	 add         r3, r3, #0x14
  03c1c	e5933000	 ldr         r3, [r3]
  03c20	e3530000	 cmp         r3, #0
  03c24	0a00007f	 beq         |$LN124@UsbProcess@2|
  03c28	e59d3008	 ldr         r3, [sp, #8]
  03c2c	e2832014	 add         r2, r3, #0x14
  03c30	e59d3008	 ldr         r3, [sp, #8]
  03c34	e2833018	 add         r3, r3, #0x18
  03c38	e5922000	 ldr         r2, [r2]
  03c3c	e5933000	 ldr         r3, [r3]
  03c40	e1520003	 cmp         r2, r3
  03c44	0a000077	 beq         |$LN124@UsbProcess@2|

; 1610 :                 pTD = (USBTD *)pED->HeadTD;

  03c48	e59d3008	 ldr         r3, [sp, #8]
  03c4c	e2833014	 add         r3, r3, #0x14
  03c50	e5933000	 ldr         r3, [r3]
  03c54	e58d3004	 str         r3, [sp, #4]

; 1611 :                 switch(pED->TransferStatus){

  03c58	e59d3008	 ldr         r3, [sp, #8]
  03c5c	e283301c	 add         r3, r3, #0x1C
  03c60	e5933000	 ldr         r3, [r3]
  03c64	e58d3054	 str         r3, [sp, #0x54]
  03c68	e59d3054	 ldr         r3, [sp, #0x54]
  03c6c	e3530000	 cmp         r3, #0
  03c70	0a000006	 beq         |$LN121@UsbProcess@2|
  03c74	e59d3054	 ldr         r3, [sp, #0x54]
  03c78	e3530001	 cmp         r3, #1
  03c7c	0a000021	 beq         |$LN119@UsbProcess@2|
  03c80	e59d3054	 ldr         r3, [sp, #0x54]
  03c84	e3530002	 cmp         r3, #2
  03c88	0a000035	 beq         |$LN117@UsbProcess@2|
  03c8c	ea000065	 b           |$LN122@UsbProcess@2|
  03c90		 |$LN121@UsbProcess@2|

; 1612 :                 case STATUS_IDLE:
; 1613 :                     if(!pED->bfSkip){

  03c90	e59d3008	 ldr         r3, [sp, #8]
  03c94	e283300c	 add         r3, r3, #0xC
  03c98	e5d33000	 ldrb        r3, [r3]
  03c9c	e3530000	 cmp         r3, #0
  03ca0	1a000017	 bne         |$LN120@UsbProcess@2|

; 1614 :                         m_pProcessEDControl = (PDWORD)pED;

  03ca4	e59d30f0	 ldr         r3, [sp, #0xF0]
  03ca8	e28320c4	 add         r2, r3, #0xC4
  03cac	e59d3008	 ldr         r3, [sp, #8]
  03cb0	e5823000	 str         r3, [r2]

; 1615 :                         pED->TransferStatus = STATUS_PROGRESS;

  03cb4	e59d3008	 ldr         r3, [sp, #8]
  03cb8	e283201c	 add         r2, r3, #0x1C
  03cbc	e3a03001	 mov         r3, #1
  03cc0	e5823000	 str         r3, [r2]

; 1616 :                         InitializeTransaction((UINT32)m_portBase, pED, pTD);

  03cc4	e59d3004	 ldr         r3, [sp, #4]
  03cc8	e59d2008	 ldr         r2, [sp, #8]
  03ccc	e59d10f0	 ldr         r1, [sp, #0xF0]
  03cd0	e2811f52	 add         r1, r1, #0x52, 30
  03cd4	e5911000	 ldr         r1, [r1]
  03cd8	e59d00f0	 ldr         r0, [sp, #0xF0]
  03cdc	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|

; 1617 :                         RETAILMSG(0, (L"PCTL_%08X\r\n", pTD));

  03ce0	ea000005	 b           |$LN136@UsbProcess@2|
  03ce4	e59d1004	 ldr         r1, [sp, #4]
  03ce8	e59f0490	 ldr         r0, [pc, #0x490]
  03cec	eb000000	 bl          NKDbgPrintfW
  03cf0	e3a03001	 mov         r3, #1
  03cf4	e58d3058	 str         r3, [sp, #0x58]
  03cf8	ea000001	 b           |$LN137@UsbProcess@2|
  03cfc		 |$LN136@UsbProcess@2|
  03cfc	e3a03000	 mov         r3, #0
  03d00	e58d3058	 str         r3, [sp, #0x58]
  03d04		 |$LN137@UsbProcess@2|
  03d04		 |$LN120@UsbProcess@2|

; 1618 :                     }
; 1619 :                     break;

  03d04	ea000047	 b           |$LN122@UsbProcess@2|
  03d08		 |$LN119@UsbProcess@2|

; 1620 :                 case STATUS_PROGRESS:
; 1621 :                     if ((m_portStatus & PORT_STATUS_DEVICE_ATTACHED) == 0)

  03d08	e59d30f0	 ldr         r3, [sp, #0xF0]
  03d0c	e2833c01	 add         r3, r3, #1, 24
  03d10	e283309e	 add         r3, r3, #0x9E
  03d14	e5d33000	 ldrb        r3, [r3]
  03d18	e3130002	 tst         r3, #2
  03d1c	1a00000f	 bne         |$LN118@UsbProcess@2|

; 1622 :                     {
; 1623 :                         // Device disconnected, need to fail the transfer
; 1624 :                         *pTD->sTransfer.lpfComplete = TRUE;

  03d20	e59d3004	 ldr         r3, [sp, #4]
  03d24	e2833040	 add         r3, r3, #0x40
  03d28	e5932000	 ldr         r2, [r3]
  03d2c	e3a03001	 mov         r3, #1
  03d30	e5823000	 str         r3, [r2]

; 1625 :                         *pTD->sTransfer.lpdwError = USB_CANCELED_ERROR;

  03d34	e59d3004	 ldr         r3, [sp, #4]
  03d38	e2833048	 add         r3, r3, #0x48
  03d3c	e5932000	 ldr         r2, [r3]
  03d40	e3a03c01	 mov         r3, #1, 24
  03d44	e3833001	 orr         r3, r3, #1
  03d48	e5823000	 str         r3, [r2]

; 1626 :                         pED->TransferStatus = STATUS_COMPLETE;

  03d4c	e59d3008	 ldr         r3, [sp, #8]
  03d50	e283201c	 add         r2, r3, #0x1C
  03d54	e3a03002	 mov         r3, #2
  03d58	e5823000	 str         r3, [r2]

; 1627 :                         goto redoforsameEDCtl;

  03d5c	eaffffac	 b           |$redoforsameEDCtl$42135|
  03d60		 |$LN118@UsbProcess@2|

; 1628 :                     }
; 1629 :                     break;

  03d60	ea000030	 b           |$LN122@UsbProcess@2|
  03d64		 |$LN117@UsbProcess@2|

; 1630 :                 case STATUS_COMPLETE:
; 1631 : 
; 1632 :                     RETAILMSG(0, (L"PCTL_%08X--\r\n", pTD));

  03d64	ea000005	 b           |$LN138@UsbProcess@2|
  03d68	e59d1004	 ldr         r1, [sp, #4]
  03d6c	e59f0408	 ldr         r0, [pc, #0x408]
  03d70	eb000000	 bl          NKDbgPrintfW
  03d74	e3a03001	 mov         r3, #1
  03d78	e58d305c	 str         r3, [sp, #0x5C]
  03d7c	ea000001	 b           |$LN139@UsbProcess@2|
  03d80		 |$LN138@UsbProcess@2|
  03d80	e3a03000	 mov         r3, #0
  03d84	e58d305c	 str         r3, [sp, #0x5C]
  03d88		 |$LN139@UsbProcess@2|

; 1633 :                     if(RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD)){

  03d88	e59d1004	 ldr         r1, [sp, #4]
  03d8c	e59d3008	 ldr         r3, [sp, #8]
  03d90	e2830014	 add         r0, r3, #0x14
  03d94	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|
  03d98	e58d0060	 str         r0, [sp, #0x60]
  03d9c	e59d3060	 ldr         r3, [sp, #0x60]
  03da0	e3530000	 cmp         r3, #0
  03da4	0a00000f	 beq         |$LN116@UsbProcess@2|

; 1634 :                         CTRLTCMSG(1, (L"TC: EP0 len %d", pTD->BytesTransferred));
; 1635 :                         if (pTD->sTransfer.lpfnCallback)

  03da8	e59d3004	 ldr         r3, [sp, #4]
  03dac	e2833008	 add         r3, r3, #8
  03db0	e5933000	 ldr         r3, [r3]
  03db4	e3530000	 cmp         r3, #0
  03db8	0a000007	 beq         |$LN115@UsbProcess@2|

; 1636 :                         {
; 1637 :                             ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  03dbc	e59d3004	 ldr         r3, [sp, #4]
  03dc0	e283300c	 add         r3, r3, #0xC
  03dc4	e5930000	 ldr         r0, [r3]
  03dc8	e59d3004	 ldr         r3, [sp, #4]
  03dcc	e2833008	 add         r3, r3, #8
  03dd0	e5933000	 ldr         r3, [r3]
  03dd4	e1a0e00f	 mov         lr, pc
  03dd8	e12fff13	 bx          r3
  03ddc		 |$LN115@UsbProcess@2|

; 1638 :                         }
; 1639 :                         FreeTD(pTD);

  03ddc	e59d0004	 ldr         r0, [sp, #4]
  03de0	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 1640 :                     }
; 1641 :                     else{

  03de4	ea000006	 b           |$LN114@UsbProcess@2|
  03de8		 |$LN116@UsbProcess@2|

; 1642 :                         RETAILMSG(1, (TEXT("RemoveElementFromList Failed\n")));

  03de8	e59f0388	 ldr         r0, [pc, #0x388]
  03dec	eb000000	 bl          NKDbgPrintfW
  03df0	e3a03001	 mov         r3, #1
  03df4	e58d3064	 str         r3, [sp, #0x64]
  03df8	ea000001	 b           |$LN141@UsbProcess@2|
  03dfc	e3a03000	 mov         r3, #0
  03e00	e58d3064	 str         r3, [sp, #0x64]
  03e04		 |$LN141@UsbProcess@2|
  03e04		 |$LN114@UsbProcess@2|

; 1643 :                     }
; 1644 :                     m_pProcessEDControl = NULL;

  03e04	e59d30f0	 ldr         r3, [sp, #0xF0]
  03e08	e28320c4	 add         r2, r3, #0xC4
  03e0c	e3a03000	 mov         r3, #0
  03e10	e5823000	 str         r3, [r2]

; 1645 :                     pED->TransferStatus = STATUS_IDLE;

  03e14	e59d3008	 ldr         r3, [sp, #8]
  03e18	e283201c	 add         r2, r3, #0x1C
  03e1c	e3a03000	 mov         r3, #0
  03e20	e5823000	 str         r3, [r2]

; 1646 :                     goto redoforsameEDCtl;

  03e24	eaffff7a	 b           |$LN175@UsbProcess@2|
  03e28		 |$LN122@UsbProcess@2|
  03e28		 |$LN124@UsbProcess@2|

; 1647 :                 }
; 1648 :             }
; 1649 :             pED = (USBED *)pED->NextED.next;

  03e28	e59d3008	 ldr         r3, [sp, #8]
  03e2c	e5933000	 ldr         r3, [r3]
  03e30	e58d3008	 str         r3, [sp, #8]

; 1650 :         }

  03e34	eaffff73	 b           |$LN126@UsbProcess@2|
  03e38		 |$LN125@UsbProcess@2|

; 1651 : 
; 1652 :         ///////////////////////////////////////////////////////////////////////////
; 1653 :         // Interrupt out requests
; 1654 : 
; 1655 :         pED = (USBED*)m_pIntOutHead;

  03e38	e59d30f0	 ldr         r3, [sp, #0xF0]
  03e3c	e28330b8	 add         r3, r3, #0xB8
  03e40	e5933000	 ldr         r3, [r3]
  03e44	e58d3008	 str         r3, [sp, #8]
  03e48		 |$LN113@UsbProcess@2|

; 1656 :         while(pED) {

  03e48	e59d3008	 ldr         r3, [sp, #8]
  03e4c	e3530000	 cmp         r3, #0
  03e50	0a00006b	 beq         |$LN112@UsbProcess@2|
  03e54		 |$redoforsameEDIntOut$42163|

; 1657 : redoforsameEDIntOut:
; 1658 : 
; 1659 :             if(pED->HeadTD && (pED->HeadTD != pED->TailTD)){

  03e54	e59d3008	 ldr         r3, [sp, #8]
  03e58	e2833014	 add         r3, r3, #0x14
  03e5c	e5933000	 ldr         r3, [r3]
  03e60	e3530000	 cmp         r3, #0
  03e64	0a000062	 beq         |$LN111@UsbProcess@2|
  03e68	e59d3008	 ldr         r3, [sp, #8]
  03e6c	e2832014	 add         r2, r3, #0x14
  03e70	e59d3008	 ldr         r3, [sp, #8]
  03e74	e2833018	 add         r3, r3, #0x18
  03e78	e5922000	 ldr         r2, [r2]
  03e7c	e5933000	 ldr         r3, [r3]
  03e80	e1520003	 cmp         r2, r3
  03e84	0a00005a	 beq         |$LN111@UsbProcess@2|

; 1660 :                 pTD = (USBTD *)pED->HeadTD;

  03e88	e59d3008	 ldr         r3, [sp, #8]
  03e8c	e2833014	 add         r3, r3, #0x14
  03e90	e5933000	 ldr         r3, [r3]
  03e94	e58d3004	 str         r3, [sp, #4]

; 1661 :                 switch(pED->TransferStatus){

  03e98	e59d3008	 ldr         r3, [sp, #8]
  03e9c	e283301c	 add         r3, r3, #0x1C
  03ea0	e5933000	 ldr         r3, [r3]
  03ea4	e58d3068	 str         r3, [sp, #0x68]
  03ea8	e59d3068	 ldr         r3, [sp, #0x68]
  03eac	e3530000	 cmp         r3, #0
  03eb0	0a000003	 beq         |$LN108@UsbProcess@2|
  03eb4	e59d3068	 ldr         r3, [sp, #0x68]
  03eb8	e3530002	 cmp         r3, #2
  03ebc	0a00001d	 beq         |$LN105@UsbProcess@2|
  03ec0	ea00004b	 b           |$LN109@UsbProcess@2|
  03ec4		 |$LN108@UsbProcess@2|

; 1662 :                 case STATUS_IDLE:
; 1663 :                     if(!pED->bfSkip){

  03ec4	e59d3008	 ldr         r3, [sp, #8]
  03ec8	e283300c	 add         r3, r3, #0xC
  03ecc	e5d33000	 ldrb        r3, [r3]
  03ed0	e3530000	 cmp         r3, #0
  03ed4	1a000015	 bne         |$LN107@UsbProcess@2|

; 1664 :                         m_pProcessEDOut[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  03ed8	e59d30f0	 ldr         r3, [sp, #0xF0]
  03edc	e2831f41	 add         r1, r3, #0x41, 30
  03ee0	e59d3008	 ldr         r3, [sp, #8]
  03ee4	e2833010	 add         r3, r3, #0x10
  03ee8	e5d33000	 ldrb        r3, [r3]
  03eec	e2432001	 sub         r2, r3, #1
  03ef0	e3a03004	 mov         r3, #4
  03ef4	e0030392	 mul         r3, r2, r3
  03ef8	e0812003	 add         r2, r1, r3
  03efc	e59d3008	 ldr         r3, [sp, #8]
  03f00	e5823000	 str         r3, [r2]

; 1665 :                         pED->TransferStatus = STATUS_PROGRESS;

  03f04	e59d3008	 ldr         r3, [sp, #8]
  03f08	e283201c	 add         r2, r3, #0x1C
  03f0c	e3a03001	 mov         r3, #1
  03f10	e5823000	 str         r3, [r2]

; 1666 :                         InitializeTransaction((UINT32)m_portBase, pED, pTD);

  03f14	e59d3004	 ldr         r3, [sp, #4]
  03f18	e59d2008	 ldr         r2, [sp, #8]
  03f1c	e59d10f0	 ldr         r1, [sp, #0xF0]
  03f20	e2811f52	 add         r1, r1, #0x52, 30
  03f24	e5911000	 ldr         r1, [r1]
  03f28	e59d00f0	 ldr         r0, [sp, #0xF0]
  03f2c	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|
  03f30		 |$LN107@UsbProcess@2|

; 1667 :                     }
; 1668 :                     break;

  03f30	ea00002f	 b           |$LN109@UsbProcess@2|

; 1669 :                 case STATUS_PROGRESS:
; 1670 :                     break;

  03f34	ea00002e	 b           |$LN109@UsbProcess@2|
  03f38		 |$LN105@UsbProcess@2|

; 1671 :                 case STATUS_COMPLETE:
; 1672 :                     if(RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD)){

  03f38	e59d1004	 ldr         r1, [sp, #4]
  03f3c	e59d3008	 ldr         r3, [sp, #8]
  03f40	e2830014	 add         r0, r3, #0x14
  03f44	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|
  03f48	e58d006c	 str         r0, [sp, #0x6C]
  03f4c	e59d306c	 ldr         r3, [sp, #0x6C]
  03f50	e3530000	 cmp         r3, #0
  03f54	0a00000f	 beq         |$LN104@UsbProcess@2|

; 1673 :                         INTTCMSG(1, (L"TC: EP%d INT OUT, len %d", pED->bHostEndPointNum, pTD->BytesTransferred));
; 1674 :                         if (pTD->sTransfer.lpfnCallback)

  03f58	e59d3004	 ldr         r3, [sp, #4]
  03f5c	e2833008	 add         r3, r3, #8
  03f60	e5933000	 ldr         r3, [r3]
  03f64	e3530000	 cmp         r3, #0
  03f68	0a000007	 beq         |$LN103@UsbProcess@2|

; 1675 :                         {
; 1676 :                             ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  03f6c	e59d3004	 ldr         r3, [sp, #4]
  03f70	e283300c	 add         r3, r3, #0xC
  03f74	e5930000	 ldr         r0, [r3]
  03f78	e59d3004	 ldr         r3, [sp, #4]
  03f7c	e2833008	 add         r3, r3, #8
  03f80	e5933000	 ldr         r3, [r3]
  03f84	e1a0e00f	 mov         lr, pc
  03f88	e12fff13	 bx          r3
  03f8c		 |$LN103@UsbProcess@2|

; 1677 :                         }
; 1678 :                         FreeTD(pTD);

  03f8c	e59d0004	 ldr         r0, [sp, #4]
  03f90	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 1679 :                     }
; 1680 :                     else{

  03f94	ea000006	 b           |$LN102@UsbProcess@2|
  03f98		 |$LN104@UsbProcess@2|

; 1681 :                         RETAILMSG(1,(TEXT("RemoveElementFromList Failed\n")));

  03f98	e59f01d8	 ldr         r0, [pc, #0x1D8]
  03f9c	eb000000	 bl          NKDbgPrintfW
  03fa0	e3a03001	 mov         r3, #1
  03fa4	e58d3070	 str         r3, [sp, #0x70]
  03fa8	ea000001	 b           |$LN143@UsbProcess@2|
  03fac	e3a03000	 mov         r3, #0
  03fb0	e58d3070	 str         r3, [sp, #0x70]
  03fb4		 |$LN143@UsbProcess@2|
  03fb4		 |$LN102@UsbProcess@2|

; 1682 :                     }
; 1683 :                     m_pProcessEDOut[pED->bHostEndPointNum - 1] = NULL;

  03fb4	e59d30f0	 ldr         r3, [sp, #0xF0]
  03fb8	e2831f41	 add         r1, r3, #0x41, 30
  03fbc	e59d3008	 ldr         r3, [sp, #8]
  03fc0	e2833010	 add         r3, r3, #0x10
  03fc4	e5d33000	 ldrb        r3, [r3]
  03fc8	e2432001	 sub         r2, r3, #1
  03fcc	e3a03004	 mov         r3, #4
  03fd0	e0030392	 mul         r3, r2, r3
  03fd4	e0812003	 add         r2, r1, r3
  03fd8	e3a03000	 mov         r3, #0
  03fdc	e5823000	 str         r3, [r2]

; 1684 :                     pED->TransferStatus = STATUS_IDLE;

  03fe0	e59d3008	 ldr         r3, [sp, #8]
  03fe4	e283201c	 add         r2, r3, #0x1C
  03fe8	e3a03000	 mov         r3, #0
  03fec	e5823000	 str         r3, [r2]

; 1685 :                     goto redoforsameEDIntOut;

  03ff0	eaffff97	 b           |$redoforsameEDIntOut$42163|
  03ff4		 |$LN109@UsbProcess@2|
  03ff4		 |$LN111@UsbProcess@2|

; 1686 :                 }
; 1687 :             }
; 1688 :             pED = (USBED *)pED->NextED.next;

  03ff4	e59d3008	 ldr         r3, [sp, #8]
  03ff8	e5933000	 ldr         r3, [r3]
  03ffc	e58d3008	 str         r3, [sp, #8]

; 1689 :         }

  04000	eaffff90	 b           |$LN113@UsbProcess@2|
  04004		 |$LN112@UsbProcess@2|

; 1690 : 
; 1691 :         ///////////////////////////////////////////////////////////////////////////
; 1692 :         // Interrupt in requests
; 1693 : 
; 1694 :         pED = (USBED*)m_pIntInHead;

  04004	e59d30f0	 ldr         r3, [sp, #0xF0]
  04008	e28330b4	 add         r3, r3, #0xB4
  0400c	e5933000	 ldr         r3, [r3]
  04010	e58d3008	 str         r3, [sp, #8]
  04014		 |$LN101@UsbProcess@2|

; 1695 :         while(pED) {

  04014	e59d3008	 ldr         r3, [sp, #8]
  04018	e3530000	 cmp         r3, #0
  0401c	0a00006f	 beq         |$LN100@UsbProcess@2|
  04020		 |$redoforsameEDIntIn$42187|

; 1696 : redoforsameEDIntIn:
; 1697 : 
; 1698 :             if(pED->HeadTD && (pED->HeadTD != pED->TailTD)){

  04020	e59d3008	 ldr         r3, [sp, #8]
  04024	e2833014	 add         r3, r3, #0x14
  04028	e5933000	 ldr         r3, [r3]
  0402c	e3530000	 cmp         r3, #0
  04030	0a000066	 beq         |$LN99@UsbProcess@2|
  04034	e59d3008	 ldr         r3, [sp, #8]
  04038	e2832014	 add         r2, r3, #0x14
  0403c	e59d3008	 ldr         r3, [sp, #8]
  04040	e2833018	 add         r3, r3, #0x18
  04044	e5922000	 ldr         r2, [r2]
  04048	e5933000	 ldr         r3, [r3]
  0404c	e1520003	 cmp         r2, r3
  04050	0a00005e	 beq         |$LN99@UsbProcess@2|

; 1699 :                 pTD = (USBTD *)pED->HeadTD;

  04054	e59d3008	 ldr         r3, [sp, #8]
  04058	e2833014	 add         r3, r3, #0x14
  0405c	e5933000	 ldr         r3, [r3]
  04060	e58d3004	 str         r3, [sp, #4]

; 1700 :                 switch(pED->TransferStatus){

  04064	e59d3008	 ldr         r3, [sp, #8]
  04068	e283301c	 add         r3, r3, #0x1C
  0406c	e5933000	 ldr         r3, [r3]
  04070	e58d3074	 str         r3, [sp, #0x74]
  04074	e59d3074	 ldr         r3, [sp, #0x74]
  04078	e3530000	 cmp         r3, #0
  0407c	0a000003	 beq         |$LN96@UsbProcess@2|
  04080	e59d3074	 ldr         r3, [sp, #0x74]
  04084	e3530002	 cmp         r3, #2
  04088	0a00001d	 beq         |$LN93@UsbProcess@2|
  0408c	ea00004f	 b           |$LN97@UsbProcess@2|
  04090		 |$LN96@UsbProcess@2|

; 1701 :                 case STATUS_IDLE:
; 1702 :                     if(!pED->bfSkip){

  04090	e59d3008	 ldr         r3, [sp, #8]
  04094	e283300c	 add         r3, r3, #0xC
  04098	e5d33000	 ldrb        r3, [r3]
  0409c	e3530000	 cmp         r3, #0
  040a0	1a000015	 bne         |$LN95@UsbProcess@2|

; 1703 :                         m_pProcessEDIn[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  040a4	e59d30f0	 ldr         r3, [sp, #0xF0]
  040a8	e28310c8	 add         r1, r3, #0xC8
  040ac	e59d3008	 ldr         r3, [sp, #8]
  040b0	e2833010	 add         r3, r3, #0x10
  040b4	e5d33000	 ldrb        r3, [r3]
  040b8	e2432001	 sub         r2, r3, #1
  040bc	e3a03004	 mov         r3, #4
  040c0	e0030392	 mul         r3, r2, r3
  040c4	e0812003	 add         r2, r1, r3
  040c8	e59d3008	 ldr         r3, [sp, #8]
  040cc	e5823000	 str         r3, [r2]

; 1704 :                         pED->TransferStatus = STATUS_PROGRESS;

  040d0	e59d3008	 ldr         r3, [sp, #8]
  040d4	e283201c	 add         r2, r3, #0x1C
  040d8	e3a03001	 mov         r3, #1
  040dc	e5823000	 str         r3, [r2]

; 1705 :                         InitializeTransaction((UINT32)m_portBase, pED, pTD);

  040e0	e59d3004	 ldr         r3, [sp, #4]
  040e4	e59d2008	 ldr         r2, [sp, #8]
  040e8	e59d10f0	 ldr         r1, [sp, #0xF0]
  040ec	e2811f52	 add         r1, r1, #0x52, 30
  040f0	e5911000	 ldr         r1, [r1]
  040f4	e59d00f0	 ldr         r0, [sp, #0xF0]
  040f8	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|
  040fc		 |$LN95@UsbProcess@2|

; 1706 :                     }
; 1707 :                     break;

  040fc	ea000033	 b           |$LN97@UsbProcess@2|

; 1708 :                 case STATUS_PROGRESS:
; 1709 :                     break;

  04100	ea000032	 b           |$LN97@UsbProcess@2|
  04104		 |$LN93@UsbProcess@2|

; 1710 :                 case STATUS_COMPLETE:
; 1711 :                     if(RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD)){

  04104	e59d1004	 ldr         r1, [sp, #4]
  04108	e59d3008	 ldr         r3, [sp, #8]
  0410c	e2830014	 add         r0, r3, #0x14
  04110	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|
  04114	e58d0078	 str         r0, [sp, #0x78]
  04118	e59d3078	 ldr         r3, [sp, #0x78]
  0411c	e3530000	 cmp         r3, #0
  04120	0a00000f	 beq         |$LN92@UsbProcess@2|

; 1712 :                         INTTCMSG(1, (L"TC: EP%d INT IN, len %d", pED->bHostEndPointNum, pTD->BytesTransferred));
; 1713 :                         if (pTD->sTransfer.lpfnCallback)

  04124	e59d3004	 ldr         r3, [sp, #4]
  04128	e2833008	 add         r3, r3, #8
  0412c	e5933000	 ldr         r3, [r3]
  04130	e3530000	 cmp         r3, #0
  04134	0a000007	 beq         |$LN91@UsbProcess@2|

; 1714 :                         {
; 1715 :                             ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  04138	e59d3004	 ldr         r3, [sp, #4]
  0413c	e283300c	 add         r3, r3, #0xC
  04140	e5930000	 ldr         r0, [r3]
  04144	e59d3004	 ldr         r3, [sp, #4]
  04148	e2833008	 add         r3, r3, #8
  0414c	e5933000	 ldr         r3, [r3]
  04150	e1a0e00f	 mov         lr, pc
  04154	e12fff13	 bx          r3
  04158		 |$LN91@UsbProcess@2|

; 1716 :                         }
; 1717 :                         FreeTD(pTD);

  04158	e59d0004	 ldr         r0, [sp, #4]
  0415c	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 1718 :                     }
; 1719 :                     else{

  04160	ea00000a	 b           |$LN90@UsbProcess@2|
  04164		 |$LN92@UsbProcess@2|

; 1720 :                         RETAILMSG(1,(TEXT("RemoveElementFromList Failed\n")));

  04164	e59f000c	 ldr         r0, [pc, #0xC]
  04168	eb000000	 bl          NKDbgPrintfW
  0416c	e3a03001	 mov         r3, #1
  04170	e58d307c	 str         r3, [sp, #0x7C]
  04174	ea000005	 b           |$LN145@UsbProcess@2|
  04178		 |$LN187@UsbProcess@2|
  04178		 |$LN188@UsbProcess@2|
  04178	00000000	 DCD         |??_C@_1DM@OAANCGDM@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAE?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAF?$AAr?$AAo?$AAm?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?6?$AA?$AA@|
  0417c		 |$LN189@UsbProcess@2|
  0417c	00000000	 DCD         |??_C@_1BM@GIDBIEEG@?$AAP?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?9?$AA?9?$AA?$AN?$AA?6?$AA?$AA@|
  04180		 |$LN190@UsbProcess@2|
  04180	00000000	 DCD         |??_C@_1BI@POIBIBDK@?$AAP?$AAC?$AAT?$AAL?$AA_?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  04184		 |$LN191@UsbProcess@2|
  04184	00000000	 DCD         |?g_hUsbProcessingEvent@@3PAXA|
  04188	e3a03000	 mov         r3, #0
  0418c	e58d307c	 str         r3, [sp, #0x7C]
  04190		 |$LN145@UsbProcess@2|
  04190		 |$LN90@UsbProcess@2|

; 1721 :                     }
; 1722 :                     m_pProcessEDIn[pED->bHostEndPointNum - 1] = NULL;

  04190	e59d30f0	 ldr         r3, [sp, #0xF0]
  04194	e28310c8	 add         r1, r3, #0xC8
  04198	e59d3008	 ldr         r3, [sp, #8]
  0419c	e2833010	 add         r3, r3, #0x10
  041a0	e5d33000	 ldrb        r3, [r3]
  041a4	e2432001	 sub         r2, r3, #1
  041a8	e3a03004	 mov         r3, #4
  041ac	e0030392	 mul         r3, r2, r3
  041b0	e0812003	 add         r2, r1, r3
  041b4	e3a03000	 mov         r3, #0
  041b8	e5823000	 str         r3, [r2]

; 1723 :                     pED->TransferStatus = STATUS_IDLE;

  041bc	e59d3008	 ldr         r3, [sp, #8]
  041c0	e283201c	 add         r2, r3, #0x1C
  041c4	e3a03000	 mov         r3, #0
  041c8	e5823000	 str         r3, [r2]

; 1724 :                     goto redoforsameEDIntIn;

  041cc	eaffff93	 b           |$redoforsameEDIntIn$42187|
  041d0		 |$LN97@UsbProcess@2|
  041d0		 |$LN99@UsbProcess@2|

; 1725 :                 }
; 1726 :             }
; 1727 :             pED = (USBED *)pED->NextED.next;

  041d0	e59d3008	 ldr         r3, [sp, #8]
  041d4	e5933000	 ldr         r3, [r3]
  041d8	e58d3008	 str         r3, [sp, #8]

; 1728 :         }

  041dc	eaffff8c	 b           |$LN101@UsbProcess@2|
  041e0		 |$LN100@UsbProcess@2|

; 1729 : 
; 1730 : 
; 1731 : #ifdef MUSB_USEDMA
; 1732 : #ifdef MUSB_USEDMA_FOR_ISO
; 1733 : 
; 1734 : 
; 1735 :         ///////////////////////////////////////////////////////////////////////////
; 1736 :         // Isochronous (out) requests
; 1737 : 
; 1738 :         pED = (USBED*)m_pIsoOutHead;

  041e0	e59d30f0	 ldr         r3, [sp, #0xF0]
  041e4	e28330c0	 add         r3, r3, #0xC0
  041e8	e5933000	 ldr         r3, [r3]
  041ec	e58d3008	 str         r3, [sp, #8]
  041f0		 |$LN89@UsbProcess@2|

; 1739 :         while(pED) {

  041f0	e59d3008	 ldr         r3, [sp, #8]
  041f4	e3530000	 cmp         r3, #0
  041f8	0a0000ba	 beq         |$LN88@UsbProcess@2|
  041fc		 |$redoforsameIsoOutED$42211|

; 1740 : redoforsameIsoOutED:
; 1741 : 
; 1742 :             if(pED->HeadTD && (pED->HeadTD != pED->TailTD))

  041fc	e59d3008	 ldr         r3, [sp, #8]
  04200	e2833014	 add         r3, r3, #0x14
  04204	e5933000	 ldr         r3, [r3]
  04208	e3530000	 cmp         r3, #0
  0420c	0a0000b1	 beq         |$LN87@UsbProcess@2|
  04210	e59d3008	 ldr         r3, [sp, #8]
  04214	e2832014	 add         r2, r3, #0x14
  04218	e59d3008	 ldr         r3, [sp, #8]
  0421c	e2833018	 add         r3, r3, #0x18
  04220	e5922000	 ldr         r2, [r2]
  04224	e5933000	 ldr         r3, [r3]
  04228	e1520003	 cmp         r2, r3
  0422c	0a0000a9	 beq         |$LN87@UsbProcess@2|

; 1743 :             {
; 1744 :                 pTD = (USBTD *)pED->HeadTD;

  04230	e59d3008	 ldr         r3, [sp, #8]
  04234	e2833014	 add         r3, r3, #0x14
  04238	e5933000	 ldr         r3, [r3]
  0423c	e58d3004	 str         r3, [sp, #4]

; 1745 : 
; 1746 :                 if (pTD->bAwaitingFrame)

  04240	e59d3004	 ldr         r3, [sp, #4]
  04244	e2833060	 add         r3, r3, #0x60
  04248	e5933000	 ldr         r3, [r3]
  0424c	e3530000	 cmp         r3, #0
  04250	0a000000	 beq         |$LN86@UsbProcess@2|

; 1747 :                 {
; 1748 :                     break;

  04254	ea0000a3	 b           |$LN88@UsbProcess@2|
  04258		 |$LN86@UsbProcess@2|

; 1749 :                 }
; 1750 : 
; 1751 :                 switch(pED->TransferStatus)

  04258	e59d3008	 ldr         r3, [sp, #8]
  0425c	e283301c	 add         r3, r3, #0x1C
  04260	e5933000	 ldr         r3, [r3]
  04264	e58d3080	 str         r3, [sp, #0x80]
  04268	e59d3080	 ldr         r3, [sp, #0x80]
  0426c	e3530000	 cmp         r3, #0
  04270	0a000003	 beq         |$LN83@UsbProcess@2|
  04274	e59d3080	 ldr         r3, [sp, #0x80]
  04278	e3530002	 cmp         r3, #2
  0427c	0a000050	 beq         |$LN75@UsbProcess@2|
  04280	ea000094	 b           |$LN84@UsbProcess@2|
  04284		 |$LN83@UsbProcess@2|

; 1752 :                 {
; 1753 :                     case STATUS_IDLE:
; 1754 :                         if(!pED->bfSkip){

  04284	e59d3008	 ldr         r3, [sp, #8]
  04288	e283300c	 add         r3, r3, #0xC
  0428c	e5d33000	 ldrb        r3, [r3]
  04290	e3530000	 cmp         r3, #0
  04294	1a000048	 bne         |$LN82@UsbProcess@2|

; 1755 :                             if( pED->bSemaphoreOwner == TRUE)

  04298	e59d3008	 ldr         r3, [sp, #8]
  0429c	e283302c	 add         r3, r3, #0x2C
  042a0	e5933000	 ldr         r3, [r3]
  042a4	e3530001	 cmp         r3, #1
  042a8	1a000015	 bne         |$LN81@UsbProcess@2|

; 1756 :                             {
; 1757 :                                 m_pProcessEDOut[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  042ac	e59d30f0	 ldr         r3, [sp, #0xF0]
  042b0	e2831f41	 add         r1, r3, #0x41, 30
  042b4	e59d3008	 ldr         r3, [sp, #8]
  042b8	e2833010	 add         r3, r3, #0x10
  042bc	e5d33000	 ldrb        r3, [r3]
  042c0	e2432001	 sub         r2, r3, #1
  042c4	e3a03004	 mov         r3, #4
  042c8	e0030392	 mul         r3, r2, r3
  042cc	e0812003	 add         r2, r1, r3
  042d0	e59d3008	 ldr         r3, [sp, #8]
  042d4	e5823000	 str         r3, [r2]

; 1758 :                                 pED->TransferStatus = STATUS_PROGRESS;

  042d8	e59d3008	 ldr         r3, [sp, #8]
  042dc	e283201c	 add         r2, r3, #0x1C
  042e0	e3a03001	 mov         r3, #1
  042e4	e5823000	 str         r3, [r2]

; 1759 : 
; 1760 :                                 //InitializeTransaction((UINT32)m_portBase, pED, pTD);
; 1761 :                                 pTD->bAwaitingFrame = TRUE;

  042e8	e59d3004	 ldr         r3, [sp, #4]
  042ec	e2832060	 add         r2, r3, #0x60
  042f0	e3a03001	 mov         r3, #1
  042f4	e5823000	 str         r3, [r2]
  042f8	ea00007a	 b           |$LN80@UsbProcess@2|

; 1762 : 
; 1763 :                                 //RETAILMSG(1, (L"TX ISO: wait1 TD %08X\r\n", pTD));
; 1764 : 
; 1765 :                                 //RETAILMSG(FALSE,(TEXT("OUT take %d\n"),pED->bHostEndPointNum));
; 1766 :                                 goto IsoOutDone;

  042fc	ea000079	 b           |$IsoOutDone$42223|
  04300	ea00002d	 b           |$LN79@UsbProcess@2|
  04304		 |$LN81@UsbProcess@2|

; 1767 :                             }
; 1768 :                             else if(WaitForSingleObject( pED->hSemaphore, 0 ) == WAIT_OBJECT_0){

  04304	e3a01000	 mov         r1, #0
  04308	e59d3008	 ldr         r3, [sp, #8]
  0430c	e2833030	 add         r3, r3, #0x30
  04310	e5930000	 ldr         r0, [r3]
  04314	eb000000	 bl          WaitForSingleObject
  04318	e58d0084	 str         r0, [sp, #0x84]
  0431c	e59d3084	 ldr         r3, [sp, #0x84]
  04320	e3530000	 cmp         r3, #0
  04324	1a000024	 bne         |$LN78@UsbProcess@2|

; 1769 :                                 pED->bSemaphoreOwner = TRUE;

  04328	e59d3008	 ldr         r3, [sp, #8]
  0432c	e283202c	 add         r2, r3, #0x2C
  04330	e3a03001	 mov         r3, #1
  04334	e5823000	 str         r3, [r2]

; 1770 : 
; 1771 :                                 m_pProcessEDOut[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  04338	e59d30f0	 ldr         r3, [sp, #0xF0]
  0433c	e2831f41	 add         r1, r3, #0x41, 30
  04340	e59d3008	 ldr         r3, [sp, #8]
  04344	e2833010	 add         r3, r3, #0x10
  04348	e5d33000	 ldrb        r3, [r3]
  0434c	e2432001	 sub         r2, r3, #1
  04350	e3a03004	 mov         r3, #4
  04354	e0030392	 mul         r3, r2, r3
  04358	e0812003	 add         r2, r1, r3
  0435c	e59d3008	 ldr         r3, [sp, #8]
  04360	e5823000	 str         r3, [r2]

; 1772 :                                 pED->TransferStatus = STATUS_PROGRESS;

  04364	e59d3008	 ldr         r3, [sp, #8]
  04368	e283201c	 add         r2, r3, #0x1C
  0436c	e3a03001	 mov         r3, #1
  04370	e5823000	 str         r3, [r2]

; 1773 : 
; 1774 :                                 //InitializeTransaction((UINT32)m_portBase, pED, pTD);
; 1775 :                                 pTD->bAwaitingFrame = TRUE;

  04374	e59d3004	 ldr         r3, [sp, #4]
  04378	e2832060	 add         r2, r3, #0x60
  0437c	e3a03001	 mov         r3, #1
  04380	e5823000	 str         r3, [r2]

; 1776 : 
; 1777 :                                 RETAILMSG(FALSE,(TEXT("OUT take %d\n"),pED->bHostEndPointNum));

  04384	ea000008	 b           |$LN146@UsbProcess@2|
  04388	e59d3008	 ldr         r3, [sp, #8]
  0438c	e2833010	 add         r3, r3, #0x10
  04390	e5d33000	 ldrb        r3, [r3]
  04394	e1a01003	 mov         r1, r3
  04398	e59f0e48	 ldr         r0, [pc, #0xE48]
  0439c	eb000000	 bl          NKDbgPrintfW
  043a0	e3a03001	 mov         r3, #1
  043a4	e58d3088	 str         r3, [sp, #0x88]
  043a8	ea000001	 b           |$LN147@UsbProcess@2|
  043ac		 |$LN146@UsbProcess@2|
  043ac	e3a03000	 mov         r3, #0
  043b0	e58d3088	 str         r3, [sp, #0x88]
  043b4		 |$LN147@UsbProcess@2|

; 1778 :                                 goto IsoOutDone;

  043b4	ea00004b	 b           |$LN77@UsbProcess@2|
  043b8	ea00004a	 b           |$IsoOutDone$42223|
  043bc		 |$LN78@UsbProcess@2|
  043bc		 |$LN79@UsbProcess@2|
  043bc		 |$LN82@UsbProcess@2|

; 1779 :                             }
; 1780 :                         }
; 1781 :                         break;

  043bc	ea000045	 b           |$LN84@UsbProcess@2|

; 1782 :                     case STATUS_PROGRESS:
; 1783 :                         break;

  043c0	ea000044	 b           |$LN84@UsbProcess@2|
  043c4		 |$LN75@UsbProcess@2|

; 1784 :                     case STATUS_COMPLETE:
; 1785 : 
; 1786 :                         if(RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD)){

  043c4	e59d1004	 ldr         r1, [sp, #4]
  043c8	e59d3008	 ldr         r3, [sp, #8]
  043cc	e2830014	 add         r0, r3, #0x14
  043d0	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|
  043d4	e58d008c	 str         r0, [sp, #0x8C]
  043d8	e59d308c	 ldr         r3, [sp, #0x8C]
  043dc	e3530000	 cmp         r3, #0
  043e0	0a000025	 beq         |$LN74@UsbProcess@2|

; 1787 :                             ISOTCMSG(1, (L"TC: EP%d ISO OUT, len %d", pED->bHostEndPointNum, pTD->BytesTransferred));
; 1788 :                             if (pTD->sTransfer.lpfnCallback)

  043e4	e59d3004	 ldr         r3, [sp, #4]
  043e8	e2833008	 add         r3, r3, #8
  043ec	e5933000	 ldr         r3, [r3]
  043f0	e3530000	 cmp         r3, #0
  043f4	0a000007	 beq         |$LN73@UsbProcess@2|

; 1789 :                             {
; 1790 :                                 ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  043f8	e59d3004	 ldr         r3, [sp, #4]
  043fc	e283300c	 add         r3, r3, #0xC
  04400	e5930000	 ldr         r0, [r3]
  04404	e59d3004	 ldr         r3, [sp, #4]
  04408	e2833008	 add         r3, r3, #8
  0440c	e5933000	 ldr         r3, [r3]
  04410	e1a0e00f	 mov         lr, pc
  04414	e12fff13	 bx          r3
  04418		 |$LN73@UsbProcess@2|

; 1791 :                             }
; 1792 :                             FreeTD(pTD);

  04418	e59d0004	 ldr         r0, [sp, #4]
  0441c	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 1793 :                             ReleaseSemaphore(pED->hSemaphore, 1, NULL );

  04420	e3a02000	 mov         r2, #0
  04424	e3a01001	 mov         r1, #1
  04428	e59d3008	 ldr         r3, [sp, #8]
  0442c	e2833030	 add         r3, r3, #0x30
  04430	e5930000	 ldr         r0, [r3]
  04434	eb000000	 bl          ReleaseSemaphore

; 1794 :                             pED->bSemaphoreOwner = FALSE;

  04438	e59d3008	 ldr         r3, [sp, #8]
  0443c	e283202c	 add         r2, r3, #0x2C
  04440	e3a03000	 mov         r3, #0
  04444	e5823000	 str         r3, [r2]

; 1795 :                             RETAILMSG(FALSE,(TEXT("OUT give %d\n"),pED->bHostEndPointNum));

  04448	ea000008	 b           |$LN148@UsbProcess@2|
  0444c	e59d3008	 ldr         r3, [sp, #8]
  04450	e2833010	 add         r3, r3, #0x10
  04454	e5d33000	 ldrb        r3, [r3]
  04458	e1a01003	 mov         r1, r3
  0445c	e59f0d80	 ldr         r0, [pc, #0xD80]
  04460	eb000000	 bl          NKDbgPrintfW
  04464	e3a03001	 mov         r3, #1
  04468	e58d3090	 str         r3, [sp, #0x90]
  0446c	ea000001	 b           |$LN149@UsbProcess@2|
  04470		 |$LN148@UsbProcess@2|
  04470	e3a03000	 mov         r3, #0
  04474	e58d3090	 str         r3, [sp, #0x90]
  04478		 |$LN149@UsbProcess@2|

; 1796 :                         }
; 1797 :                         else{

  04478	ea000006	 b           |$LN72@UsbProcess@2|
  0447c		 |$LN74@UsbProcess@2|

; 1798 :                             RETAILMSG(TRUE,(TEXT("RemoveElementFromList Failed\n")));

  0447c	e59f0d54	 ldr         r0, [pc, #0xD54]
  04480	eb000000	 bl          NKDbgPrintfW
  04484	e3a03001	 mov         r3, #1
  04488	e58d3094	 str         r3, [sp, #0x94]
  0448c	ea000001	 b           |$LN151@UsbProcess@2|
  04490	e3a03000	 mov         r3, #0
  04494	e58d3094	 str         r3, [sp, #0x94]
  04498		 |$LN151@UsbProcess@2|
  04498		 |$LN72@UsbProcess@2|

; 1799 :                         }
; 1800 :                         m_pProcessEDOut[pED->bHostEndPointNum - 1] = NULL;

  04498	e59d30f0	 ldr         r3, [sp, #0xF0]
  0449c	e2831f41	 add         r1, r3, #0x41, 30
  044a0	e59d3008	 ldr         r3, [sp, #8]
  044a4	e2833010	 add         r3, r3, #0x10
  044a8	e5d33000	 ldrb        r3, [r3]
  044ac	e2432001	 sub         r2, r3, #1
  044b0	e3a03004	 mov         r3, #4
  044b4	e0030392	 mul         r3, r2, r3
  044b8	e0812003	 add         r2, r1, r3
  044bc	e3a03000	 mov         r3, #0
  044c0	e5823000	 str         r3, [r2]

; 1801 :                         pED->TransferStatus = STATUS_IDLE;

  044c4	e59d3008	 ldr         r3, [sp, #8]
  044c8	e283201c	 add         r2, r3, #0x1C
  044cc	e3a03000	 mov         r3, #0
  044d0	e5823000	 str         r3, [r2]

; 1802 :                         goto redoforsameIsoOutED;

  044d4	eaffff48	 b           |$redoforsameIsoOutED$42211|
  044d8		 |$LN84@UsbProcess@2|
  044d8		 |$LN87@UsbProcess@2|

; 1803 :                 }
; 1804 :             }
; 1805 :             pED = (USBED *)pED->NextED.next;

  044d8	e59d3008	 ldr         r3, [sp, #8]
  044dc	e5933000	 ldr         r3, [r3]
  044e0	e58d3008	 str         r3, [sp, #8]

; 1806 :         }

  044e4	eaffff41	 b           |$LN89@UsbProcess@2|
  044e8		 |$LN88@UsbProcess@2|
  044e8		 |$LN77@UsbProcess@2|
  044e8		 |$LN80@UsbProcess@2|
  044e8		 |$IsoOutDone$42223|

; 1807 : 
; 1808 : IsoOutDone: ; // NOP
; 1809 : 
; 1810 : 
; 1811 :         ///////////////////////////////////////////////////////////////////////////
; 1812 :         // Isochronous (in) requests
; 1813 : 
; 1814 :         pED = (USBED*)m_pIsoInHead;

  044e8	e59d30f0	 ldr         r3, [sp, #0xF0]
  044ec	e28330bc	 add         r3, r3, #0xBC
  044f0	e5933000	 ldr         r3, [r3]
  044f4	e58d3008	 str         r3, [sp, #8]
  044f8		 |$LN71@UsbProcess@2|

; 1815 : 
; 1816 :         while(pED) {

  044f8	e59d3008	 ldr         r3, [sp, #8]
  044fc	e3530000	 cmp         r3, #0
  04500	0a0000ba	 beq         |$LN70@UsbProcess@2|
  04504		 |$redoforsameIsoInED$42244|

; 1817 : redoforsameIsoInED:
; 1818 : 
; 1819 :             if(pED->HeadTD && (pED->HeadTD != pED->TailTD)){

  04504	e59d3008	 ldr         r3, [sp, #8]
  04508	e2833014	 add         r3, r3, #0x14
  0450c	e5933000	 ldr         r3, [r3]
  04510	e3530000	 cmp         r3, #0
  04514	0a0000b1	 beq         |$LN69@UsbProcess@2|
  04518	e59d3008	 ldr         r3, [sp, #8]
  0451c	e2832014	 add         r2, r3, #0x14
  04520	e59d3008	 ldr         r3, [sp, #8]
  04524	e2833018	 add         r3, r3, #0x18
  04528	e5922000	 ldr         r2, [r2]
  0452c	e5933000	 ldr         r3, [r3]
  04530	e1520003	 cmp         r2, r3
  04534	0a0000a9	 beq         |$LN69@UsbProcess@2|

; 1820 :                 pTD = (USBTD *)pED->HeadTD;

  04538	e59d3008	 ldr         r3, [sp, #8]
  0453c	e2833014	 add         r3, r3, #0x14
  04540	e5933000	 ldr         r3, [r3]
  04544	e58d3004	 str         r3, [sp, #4]

; 1821 : 
; 1822 :                 if (pTD->bAwaitingFrame)

  04548	e59d3004	 ldr         r3, [sp, #4]
  0454c	e2833060	 add         r3, r3, #0x60
  04550	e5933000	 ldr         r3, [r3]
  04554	e3530000	 cmp         r3, #0
  04558	0a000000	 beq         |$LN68@UsbProcess@2|

; 1823 :                 {
; 1824 :                     break;

  0455c	ea0000a3	 b           |$LN70@UsbProcess@2|
  04560		 |$LN68@UsbProcess@2|

; 1825 :                 }
; 1826 : 
; 1827 :                 switch(pED->TransferStatus)

  04560	e59d3008	 ldr         r3, [sp, #8]
  04564	e283301c	 add         r3, r3, #0x1C
  04568	e5933000	 ldr         r3, [r3]
  0456c	e58d3098	 str         r3, [sp, #0x98]
  04570	e59d3098	 ldr         r3, [sp, #0x98]
  04574	e3530000	 cmp         r3, #0
  04578	0a000003	 beq         |$LN65@UsbProcess@2|
  0457c	e59d3098	 ldr         r3, [sp, #0x98]
  04580	e3530002	 cmp         r3, #2
  04584	0a000050	 beq         |$LN57@UsbProcess@2|
  04588	ea000094	 b           |$LN66@UsbProcess@2|
  0458c		 |$LN65@UsbProcess@2|

; 1828 :                 {
; 1829 :                     case STATUS_IDLE:
; 1830 :                         if(!pED->bfSkip){

  0458c	e59d3008	 ldr         r3, [sp, #8]
  04590	e283300c	 add         r3, r3, #0xC
  04594	e5d33000	 ldrb        r3, [r3]
  04598	e3530000	 cmp         r3, #0
  0459c	1a000048	 bne         |$LN64@UsbProcess@2|

; 1831 :                             if( pED->bSemaphoreOwner == TRUE)

  045a0	e59d3008	 ldr         r3, [sp, #8]
  045a4	e283302c	 add         r3, r3, #0x2C
  045a8	e5933000	 ldr         r3, [r3]
  045ac	e3530001	 cmp         r3, #1
  045b0	1a000015	 bne         |$LN63@UsbProcess@2|

; 1832 :                             {
; 1833 :                                 m_pProcessEDIn[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  045b4	e59d30f0	 ldr         r3, [sp, #0xF0]
  045b8	e28310c8	 add         r1, r3, #0xC8
  045bc	e59d3008	 ldr         r3, [sp, #8]
  045c0	e2833010	 add         r3, r3, #0x10
  045c4	e5d33000	 ldrb        r3, [r3]
  045c8	e2432001	 sub         r2, r3, #1
  045cc	e3a03004	 mov         r3, #4
  045d0	e0030392	 mul         r3, r2, r3
  045d4	e0812003	 add         r2, r1, r3
  045d8	e59d3008	 ldr         r3, [sp, #8]
  045dc	e5823000	 str         r3, [r2]

; 1834 :                                 pED->TransferStatus = STATUS_PROGRESS;

  045e0	e59d3008	 ldr         r3, [sp, #8]
  045e4	e283201c	 add         r2, r3, #0x1C
  045e8	e3a03001	 mov         r3, #1
  045ec	e5823000	 str         r3, [r2]

; 1835 : 
; 1836 :                                 //InitializeTransaction((UINT32)m_portBase, pED, pTD);
; 1837 :                                 pTD->bAwaitingFrame = TRUE;

  045f0	e59d3004	 ldr         r3, [sp, #4]
  045f4	e2832060	 add         r2, r3, #0x60
  045f8	e3a03001	 mov         r3, #1
  045fc	e5823000	 str         r3, [r2]
  04600	ea00007a	 b           |$LN62@UsbProcess@2|

; 1838 : 
; 1839 :                                 //RETAILMSG(FALSE,(TEXT("IN take %d\n"),pED->bHostEndPointNum));
; 1840 :                                 goto IsoInDone;

  04604	ea000079	 b           |$IsoInDone$42256|
  04608	ea00002d	 b           |$LN61@UsbProcess@2|
  0460c		 |$LN63@UsbProcess@2|

; 1841 :                             }
; 1842 :                             else if(WaitForSingleObject( pED->hSemaphore, 0 ) == WAIT_OBJECT_0){

  0460c	e3a01000	 mov         r1, #0
  04610	e59d3008	 ldr         r3, [sp, #8]
  04614	e2833030	 add         r3, r3, #0x30
  04618	e5930000	 ldr         r0, [r3]
  0461c	eb000000	 bl          WaitForSingleObject
  04620	e58d009c	 str         r0, [sp, #0x9C]
  04624	e59d309c	 ldr         r3, [sp, #0x9C]
  04628	e3530000	 cmp         r3, #0
  0462c	1a000024	 bne         |$LN60@UsbProcess@2|

; 1843 :                                 pED->bSemaphoreOwner = TRUE;

  04630	e59d3008	 ldr         r3, [sp, #8]
  04634	e283202c	 add         r2, r3, #0x2C
  04638	e3a03001	 mov         r3, #1
  0463c	e5823000	 str         r3, [r2]

; 1844 : 
; 1845 :                                 m_pProcessEDIn[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  04640	e59d30f0	 ldr         r3, [sp, #0xF0]
  04644	e28310c8	 add         r1, r3, #0xC8
  04648	e59d3008	 ldr         r3, [sp, #8]
  0464c	e2833010	 add         r3, r3, #0x10
  04650	e5d33000	 ldrb        r3, [r3]
  04654	e2432001	 sub         r2, r3, #1
  04658	e3a03004	 mov         r3, #4
  0465c	e0030392	 mul         r3, r2, r3
  04660	e0812003	 add         r2, r1, r3
  04664	e59d3008	 ldr         r3, [sp, #8]
  04668	e5823000	 str         r3, [r2]

; 1846 :                                 pED->TransferStatus = STATUS_PROGRESS;

  0466c	e59d3008	 ldr         r3, [sp, #8]
  04670	e283201c	 add         r2, r3, #0x1C
  04674	e3a03001	 mov         r3, #1
  04678	e5823000	 str         r3, [r2]

; 1847 : 
; 1848 :                                 //InitializeTransaction((UINT32)m_portBase, pED, pTD);
; 1849 :                                 pTD->bAwaitingFrame = TRUE;

  0467c	e59d3004	 ldr         r3, [sp, #4]
  04680	e2832060	 add         r2, r3, #0x60
  04684	e3a03001	 mov         r3, #1
  04688	e5823000	 str         r3, [r2]

; 1850 : 
; 1851 :                                 RETAILMSG(FALSE,(TEXT("IN take %d\n"),pED->bHostEndPointNum));

  0468c	ea000008	 b           |$LN152@UsbProcess@2|
  04690	e59d3008	 ldr         r3, [sp, #8]
  04694	e2833010	 add         r3, r3, #0x10
  04698	e5d33000	 ldrb        r3, [r3]
  0469c	e1a01003	 mov         r1, r3
  046a0	e59f0b38	 ldr         r0, [pc, #0xB38]
  046a4	eb000000	 bl          NKDbgPrintfW
  046a8	e3a03001	 mov         r3, #1
  046ac	e58d30a0	 str         r3, [sp, #0xA0]
  046b0	ea000001	 b           |$LN153@UsbProcess@2|
  046b4		 |$LN152@UsbProcess@2|
  046b4	e3a03000	 mov         r3, #0
  046b8	e58d30a0	 str         r3, [sp, #0xA0]
  046bc		 |$LN153@UsbProcess@2|

; 1852 :                                 goto IsoInDone;

  046bc	ea00004b	 b           |$LN59@UsbProcess@2|
  046c0	ea00004a	 b           |$IsoInDone$42256|
  046c4		 |$LN60@UsbProcess@2|
  046c4		 |$LN61@UsbProcess@2|
  046c4		 |$LN64@UsbProcess@2|

; 1853 :                             }
; 1854 :                         }
; 1855 :                         break;

  046c4	ea000045	 b           |$LN66@UsbProcess@2|

; 1856 :                     case STATUS_PROGRESS:
; 1857 :                         break;

  046c8	ea000044	 b           |$LN66@UsbProcess@2|
  046cc		 |$LN57@UsbProcess@2|

; 1858 :                     case STATUS_COMPLETE:
; 1859 : 
; 1860 :                         if(RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD)){

  046cc	e59d1004	 ldr         r1, [sp, #4]
  046d0	e59d3008	 ldr         r3, [sp, #8]
  046d4	e2830014	 add         r0, r3, #0x14
  046d8	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|
  046dc	e58d00a4	 str         r0, [sp, #0xA4]
  046e0	e59d30a4	 ldr         r3, [sp, #0xA4]
  046e4	e3530000	 cmp         r3, #0
  046e8	0a000025	 beq         |$LN56@UsbProcess@2|

; 1861 :                             ISOTCMSG(1, (L"TC: EP%d ISO IN, len %d", pED->bHostEndPointNum, pTD->BytesTransferred));
; 1862 :                             if (pTD->sTransfer.lpfnCallback)

  046ec	e59d3004	 ldr         r3, [sp, #4]
  046f0	e2833008	 add         r3, r3, #8
  046f4	e5933000	 ldr         r3, [r3]
  046f8	e3530000	 cmp         r3, #0
  046fc	0a000007	 beq         |$LN55@UsbProcess@2|

; 1863 :                             {
; 1864 :                                 ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  04700	e59d3004	 ldr         r3, [sp, #4]
  04704	e283300c	 add         r3, r3, #0xC
  04708	e5930000	 ldr         r0, [r3]
  0470c	e59d3004	 ldr         r3, [sp, #4]
  04710	e2833008	 add         r3, r3, #8
  04714	e5933000	 ldr         r3, [r3]
  04718	e1a0e00f	 mov         lr, pc
  0471c	e12fff13	 bx          r3
  04720		 |$LN55@UsbProcess@2|

; 1865 :                             }
; 1866 :                             FreeTD(pTD);

  04720	e59d0004	 ldr         r0, [sp, #4]
  04724	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 1867 :                             ReleaseSemaphore(pED->hSemaphore, 1, NULL );

  04728	e3a02000	 mov         r2, #0
  0472c	e3a01001	 mov         r1, #1
  04730	e59d3008	 ldr         r3, [sp, #8]
  04734	e2833030	 add         r3, r3, #0x30
  04738	e5930000	 ldr         r0, [r3]
  0473c	eb000000	 bl          ReleaseSemaphore

; 1868 :                             pED->bSemaphoreOwner = FALSE;

  04740	e59d3008	 ldr         r3, [sp, #8]
  04744	e283202c	 add         r2, r3, #0x2C
  04748	e3a03000	 mov         r3, #0
  0474c	e5823000	 str         r3, [r2]

; 1869 :                             RETAILMSG(FALSE,(TEXT("IN give %d\n"),pED->bHostEndPointNum));

  04750	ea000008	 b           |$LN154@UsbProcess@2|
  04754	e59d3008	 ldr         r3, [sp, #8]
  04758	e2833010	 add         r3, r3, #0x10
  0475c	e5d33000	 ldrb        r3, [r3]
  04760	e1a01003	 mov         r1, r3
  04764	e59f0a70	 ldr         r0, [pc, #0xA70]
  04768	eb000000	 bl          NKDbgPrintfW
  0476c	e3a03001	 mov         r3, #1
  04770	e58d30a8	 str         r3, [sp, #0xA8]
  04774	ea000001	 b           |$LN155@UsbProcess@2|
  04778		 |$LN154@UsbProcess@2|
  04778	e3a03000	 mov         r3, #0
  0477c	e58d30a8	 str         r3, [sp, #0xA8]
  04780		 |$LN155@UsbProcess@2|

; 1870 :                         }
; 1871 :                         else{

  04780	ea000006	 b           |$LN54@UsbProcess@2|
  04784		 |$LN56@UsbProcess@2|

; 1872 :                             RETAILMSG(TRUE,(TEXT("RemoveElementFromList Failed\n")));

  04784	e59f0a4c	 ldr         r0, [pc, #0xA4C]
  04788	eb000000	 bl          NKDbgPrintfW
  0478c	e3a03001	 mov         r3, #1
  04790	e58d30ac	 str         r3, [sp, #0xAC]
  04794	ea000001	 b           |$LN157@UsbProcess@2|
  04798	e3a03000	 mov         r3, #0
  0479c	e58d30ac	 str         r3, [sp, #0xAC]
  047a0		 |$LN157@UsbProcess@2|
  047a0		 |$LN54@UsbProcess@2|

; 1873 :                         }
; 1874 :                         m_pProcessEDIn[pED->bHostEndPointNum - 1] = NULL;

  047a0	e59d30f0	 ldr         r3, [sp, #0xF0]
  047a4	e28310c8	 add         r1, r3, #0xC8
  047a8	e59d3008	 ldr         r3, [sp, #8]
  047ac	e2833010	 add         r3, r3, #0x10
  047b0	e5d33000	 ldrb        r3, [r3]
  047b4	e2432001	 sub         r2, r3, #1
  047b8	e3a03004	 mov         r3, #4
  047bc	e0030392	 mul         r3, r2, r3
  047c0	e0812003	 add         r2, r1, r3
  047c4	e3a03000	 mov         r3, #0
  047c8	e5823000	 str         r3, [r2]

; 1875 :                         pED->TransferStatus = STATUS_IDLE;

  047cc	e59d3008	 ldr         r3, [sp, #8]
  047d0	e283201c	 add         r2, r3, #0x1C
  047d4	e3a03000	 mov         r3, #0
  047d8	e5823000	 str         r3, [r2]

; 1876 :                         goto redoforsameIsoInED;

  047dc	eaffff48	 b           |$redoforsameIsoInED$42244|
  047e0		 |$LN66@UsbProcess@2|
  047e0		 |$LN69@UsbProcess@2|

; 1877 :                 }
; 1878 :             }
; 1879 :             pED = (USBED *)pED->NextED.next;

  047e0	e59d3008	 ldr         r3, [sp, #8]
  047e4	e5933000	 ldr         r3, [r3]
  047e8	e58d3008	 str         r3, [sp, #8]

; 1880 :         }

  047ec	eaffff41	 b           |$LN71@UsbProcess@2|
  047f0		 |$LN70@UsbProcess@2|
  047f0		 |$LN59@UsbProcess@2|
  047f0		 |$LN62@UsbProcess@2|
  047f0		 |$IsoInDone$42256|

; 1881 : IsoInDone: ; // NOP
; 1882 : 
; 1883 :         // See if we have to trigger any ISO transfers
; 1884 : 
; 1885 :         {
; 1886 :             USBED *pIsoOutED = (USBED *)m_pIsoOutHead;

  047f0	e59d30f0	 ldr         r3, [sp, #0xF0]
  047f4	e28330c0	 add         r3, r3, #0xC0
  047f8	e5933000	 ldr         r3, [r3]
  047fc	e58d301c	 str         r3, [sp, #0x1C]

; 1887 :             USBED *pIsoInED = (USBED *)m_pIsoInHead;

  04800	e59d30f0	 ldr         r3, [sp, #0xF0]
  04804	e28330bc	 add         r3, r3, #0xBC
  04808	e5933000	 ldr         r3, [r3]
  0480c	e58d3028	 str         r3, [sp, #0x28]

; 1888 :             USBTD *pIsoOutTD = NULL;

  04810	e3a03000	 mov         r3, #0
  04814	e58d3024	 str         r3, [sp, #0x24]

; 1889 :             USBTD *pIsoInTD = NULL;

  04818	e3a03000	 mov         r3, #0
  0481c	e58d3020	 str         r3, [sp, #0x20]

; 1890 : 
; 1891 :             if (pIsoOutED && pIsoOutED->HeadTD && (pIsoOutED->HeadTD != pIsoOutED->TailTD) &&
; 1892 :                 ((USBTD *)pIsoOutED->HeadTD)->bAwaitingFrame)

  04820	e59d301c	 ldr         r3, [sp, #0x1C]
  04824	e3530000	 cmp         r3, #0
  04828	0a000017	 beq         |$LN53@UsbProcess@2|
  0482c	e59d301c	 ldr         r3, [sp, #0x1C]
  04830	e2833014	 add         r3, r3, #0x14
  04834	e5933000	 ldr         r3, [r3]
  04838	e3530000	 cmp         r3, #0
  0483c	0a000012	 beq         |$LN53@UsbProcess@2|
  04840	e59d301c	 ldr         r3, [sp, #0x1C]
  04844	e2832014	 add         r2, r3, #0x14
  04848	e59d301c	 ldr         r3, [sp, #0x1C]
  0484c	e2833018	 add         r3, r3, #0x18
  04850	e5922000	 ldr         r2, [r2]
  04854	e5933000	 ldr         r3, [r3]
  04858	e1520003	 cmp         r2, r3
  0485c	0a00000a	 beq         |$LN53@UsbProcess@2|
  04860	e59d301c	 ldr         r3, [sp, #0x1C]
  04864	e2833014	 add         r3, r3, #0x14
  04868	e5933000	 ldr         r3, [r3]
  0486c	e2833060	 add         r3, r3, #0x60
  04870	e5933000	 ldr         r3, [r3]
  04874	e3530000	 cmp         r3, #0
  04878	0a000003	 beq         |$LN53@UsbProcess@2|

; 1893 :             {
; 1894 :                 pIsoOutTD = (USBTD *)pIsoOutED->HeadTD;

  0487c	e59d301c	 ldr         r3, [sp, #0x1C]
  04880	e2833014	 add         r3, r3, #0x14
  04884	e5933000	 ldr         r3, [r3]
  04888	e58d3024	 str         r3, [sp, #0x24]
  0488c		 |$LN53@UsbProcess@2|

; 1895 :             }
; 1896 : 
; 1897 :             if (pIsoInED && pIsoInED->HeadTD && (pIsoInED->HeadTD != pIsoInED->TailTD) &&
; 1898 :                 ((USBTD *)pIsoInED->HeadTD)->bAwaitingFrame)

  0488c	e59d3028	 ldr         r3, [sp, #0x28]
  04890	e3530000	 cmp         r3, #0
  04894	0a000017	 beq         |$LN52@UsbProcess@2|
  04898	e59d3028	 ldr         r3, [sp, #0x28]
  0489c	e2833014	 add         r3, r3, #0x14
  048a0	e5933000	 ldr         r3, [r3]
  048a4	e3530000	 cmp         r3, #0
  048a8	0a000012	 beq         |$LN52@UsbProcess@2|
  048ac	e59d3028	 ldr         r3, [sp, #0x28]
  048b0	e2832014	 add         r2, r3, #0x14
  048b4	e59d3028	 ldr         r3, [sp, #0x28]
  048b8	e2833018	 add         r3, r3, #0x18
  048bc	e5922000	 ldr         r2, [r2]
  048c0	e5933000	 ldr         r3, [r3]
  048c4	e1520003	 cmp         r2, r3
  048c8	0a00000a	 beq         |$LN52@UsbProcess@2|
  048cc	e59d3028	 ldr         r3, [sp, #0x28]
  048d0	e2833014	 add         r3, r3, #0x14
  048d4	e5933000	 ldr         r3, [r3]
  048d8	e2833060	 add         r3, r3, #0x60
  048dc	e5933000	 ldr         r3, [r3]
  048e0	e3530000	 cmp         r3, #0
  048e4	0a000003	 beq         |$LN52@UsbProcess@2|

; 1899 :             {
; 1900 :                 pIsoInTD = (USBTD *)pIsoInED->HeadTD;

  048e8	e59d3028	 ldr         r3, [sp, #0x28]
  048ec	e2833014	 add         r3, r3, #0x14
  048f0	e5933000	 ldr         r3, [r3]
  048f4	e58d3020	 str         r3, [sp, #0x20]
  048f8		 |$LN52@UsbProcess@2|

; 1901 :             }
; 1902 : 
; 1903 :             if (pIsoOutTD || pIsoInTD)

  048f8	e59d3024	 ldr         r3, [sp, #0x24]
  048fc	e3530000	 cmp         r3, #0
  04900	1a000002	 bne         |$LN50@UsbProcess@2|
  04904	e59d3020	 ldr         r3, [sp, #0x20]
  04908	e3530000	 cmp         r3, #0
  0490c	0a000091	 beq         |$LN51@UsbProcess@2|
  04910		 |$LN50@UsbProcess@2|

; 1904 :             {
; 1905 :                 DWORD dwCurrentFrame;
; 1906 :                 INT32 nDiff;
; 1907 : 
; 1908 :                 GetFrameNumber(&dwCurrentFrame);

  04910	e28d1030	 add         r1, sp, #0x30
  04914	e59d30f0	 ldr         r3, [sp, #0xF0]
  04918	e5933000	 ldr         r3, [r3]
  0491c	e2833014	 add         r3, r3, #0x14
  04920	e59d00f0	 ldr         r0, [sp, #0xF0]
  04924	e5933000	 ldr         r3, [r3]
  04928	e1a0e00f	 mov         lr, pc
  0492c	e12fff13	 bx          r3

; 1909 : 
; 1910 :                 fEnableSOF = FALSE;

  04930	e3a03000	 mov         r3, #0
  04934	e58d3010	 str         r3, [sp, #0x10]

; 1911 : 
; 1912 :                 if (pIsoOutTD)

  04938	e59d3024	 ldr         r3, [sp, #0x24]
  0493c	e3530000	 cmp         r3, #0
  04940	0a00003f	 beq         |$LN49@UsbProcess@2|

; 1913 :                 {
; 1914 :                     nDiff = (INT32)(pIsoOutTD->sTransfer.dwStartingFrame - dwCurrentFrame);

  04944	e59d3024	 ldr         r3, [sp, #0x24]
  04948	e283301c	 add         r3, r3, #0x1C
  0494c	e5932000	 ldr         r2, [r3]
  04950	e59d3030	 ldr         r3, [sp, #0x30]
  04954	e0423003	 sub         r3, r2, r3
  04958	e58d302c	 str         r3, [sp, #0x2C]

; 1915 : 
; 1916 :                     if (nDiff + ISO_MAX_FRAME_ERROR < 0)

  0495c	e59d302c	 ldr         r3, [sp, #0x2C]
  04960	e293300c	 adds        r3, r3, #0xC
  04964	5a000025	 bpl         |$LN48@UsbProcess@2|

; 1917 :                     {
; 1918 :                         RETAILMSG(1, (L"TX ISO does not meet the schedule! CurFrame %08X, StartFrame %08X\r\n",
; 1919 :                             dwCurrentFrame, pIsoOutTD->sTransfer.dwStartingFrame));

  04968	e59d3024	 ldr         r3, [sp, #0x24]
  0496c	e283301c	 add         r3, r3, #0x1C
  04970	e5932000	 ldr         r2, [r3]
  04974	e59d1030	 ldr         r1, [sp, #0x30]
  04978	e59f0870	 ldr         r0, [pc, #0x870]
  0497c	eb000000	 bl          NKDbgPrintfW
  04980	e3a03001	 mov         r3, #1
  04984	e58d30b0	 str         r3, [sp, #0xB0]
  04988	ea000001	 b           |$LN159@UsbProcess@2|
  0498c	e3a03000	 mov         r3, #0
  04990	e58d30b0	 str         r3, [sp, #0xB0]
  04994		 |$LN159@UsbProcess@2|

; 1920 : 
; 1921 :                         // Do not currently fail this, just adjust start frames for subsequent transfers
; 1922 :                         DWORD dwAdjust = dwCurrentFrame - pIsoOutTD->sTransfer.dwStartingFrame;

  04994	e59d3024	 ldr         r3, [sp, #0x24]
  04998	e283301c	 add         r3, r3, #0x1C
  0499c	e59d2030	 ldr         r2, [sp, #0x30]
  049a0	e5933000	 ldr         r3, [r3]
  049a4	e0423003	 sub         r3, r2, r3
  049a8	e58d3038	 str         r3, [sp, #0x38]

; 1923 :                         USBTD *pTemp = pIsoOutTD;

  049ac	e59d3024	 ldr         r3, [sp, #0x24]
  049b0	e58d3034	 str         r3, [sp, #0x34]
  049b4		 |$LN47@UsbProcess@2|

; 1924 :                         while (pTemp->NextTD.next != pIsoOutED->TailTD)

  049b4	e59d301c	 ldr         r3, [sp, #0x1C]
  049b8	e2831018	 add         r1, r3, #0x18
  049bc	e59d3034	 ldr         r3, [sp, #0x34]
  049c0	e5932000	 ldr         r2, [r3]
  049c4	e5913000	 ldr         r3, [r1]
  049c8	e1520003	 cmp         r2, r3
  049cc	0a00000b	 beq         |$LN46@UsbProcess@2|

; 1925 :                         {
; 1926 :                             pTemp = (USBTD *)pTemp->NextTD.next;

  049d0	e59d3034	 ldr         r3, [sp, #0x34]
  049d4	e5933000	 ldr         r3, [r3]
  049d8	e58d3034	 str         r3, [sp, #0x34]

; 1927 :                             pTemp->sTransfer.dwStartingFrame += dwAdjust;

  049dc	e59d3034	 ldr         r3, [sp, #0x34]
  049e0	e283301c	 add         r3, r3, #0x1C
  049e4	e5932000	 ldr         r2, [r3]
  049e8	e59d3038	 ldr         r3, [sp, #0x38]
  049ec	e0822003	 add         r2, r2, r3
  049f0	e59d3034	 ldr         r3, [sp, #0x34]
  049f4	e283301c	 add         r3, r3, #0x1C
  049f8	e5832000	 str         r2, [r3]

; 1928 :                         }

  049fc	eaffffec	 b           |$LN47@UsbProcess@2|
  04a00		 |$LN46@UsbProcess@2|
  04a00		 |$LN48@UsbProcess@2|

; 1929 :                     }
; 1930 : 
; 1931 :                     if (nDiff <= 0)

  04a00	e59d302c	 ldr         r3, [sp, #0x2C]
  04a04	e3530000	 cmp         r3, #0
  04a08	ca00000b	 bgt         |$LN45@UsbProcess@2|

; 1932 :                     {
; 1933 :                         pIsoOutTD->bAwaitingFrame = FALSE;

  04a0c	e59d3024	 ldr         r3, [sp, #0x24]
  04a10	e2832060	 add         r2, r3, #0x60
  04a14	e3a03000	 mov         r3, #0
  04a18	e5823000	 str         r3, [r2]

; 1934 :                         InitializeTransaction((UINT32)m_portBase, pIsoOutED, pIsoOutTD);

  04a1c	e59d3024	 ldr         r3, [sp, #0x24]
  04a20	e59d201c	 ldr         r2, [sp, #0x1C]
  04a24	e59d10f0	 ldr         r1, [sp, #0xF0]
  04a28	e2811f52	 add         r1, r1, #0x52, 30
  04a2c	e5911000	 ldr         r1, [r1]
  04a30	e59d00f0	 ldr         r0, [sp, #0xF0]
  04a34	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|

; 1935 :                     }
; 1936 :                     else

  04a38	ea000001	 b           |$LN44@UsbProcess@2|
  04a3c		 |$LN45@UsbProcess@2|

; 1937 :                     {
; 1938 :                         fEnableSOF = TRUE;

  04a3c	e3a03001	 mov         r3, #1
  04a40	e58d3010	 str         r3, [sp, #0x10]
  04a44		 |$LN44@UsbProcess@2|
  04a44		 |$LN49@UsbProcess@2|

; 1939 :                     }
; 1940 :                 }
; 1941 : 
; 1942 :                 if (pIsoInTD)

  04a44	e59d3020	 ldr         r3, [sp, #0x20]
  04a48	e3530000	 cmp         r3, #0
  04a4c	0a00003f	 beq         |$LN43@UsbProcess@2|

; 1943 :                 {
; 1944 :                     nDiff = (INT32)(pIsoInTD->sTransfer.dwStartingFrame - dwCurrentFrame);

  04a50	e59d3020	 ldr         r3, [sp, #0x20]
  04a54	e283301c	 add         r3, r3, #0x1C
  04a58	e5932000	 ldr         r2, [r3]
  04a5c	e59d3030	 ldr         r3, [sp, #0x30]
  04a60	e0423003	 sub         r3, r2, r3
  04a64	e58d302c	 str         r3, [sp, #0x2C]

; 1945 : 
; 1946 :                     if (nDiff + ISO_MAX_FRAME_ERROR < 0)

  04a68	e59d302c	 ldr         r3, [sp, #0x2C]
  04a6c	e293300c	 adds        r3, r3, #0xC
  04a70	5a000025	 bpl         |$LN42@UsbProcess@2|

; 1947 :                     {
; 1948 :                         RETAILMSG(1, (L"RX ISO does not meet the schedule! CurFrame %08X, StartFrame %08X\r\n",
; 1949 :                             dwCurrentFrame, pIsoInTD->sTransfer.dwStartingFrame));

  04a74	e59d3020	 ldr         r3, [sp, #0x20]
  04a78	e283301c	 add         r3, r3, #0x1C
  04a7c	e5932000	 ldr         r2, [r3]
  04a80	e59d1030	 ldr         r1, [sp, #0x30]
  04a84	e59f0760	 ldr         r0, [pc, #0x760]
  04a88	eb000000	 bl          NKDbgPrintfW
  04a8c	e3a03001	 mov         r3, #1
  04a90	e58d30b4	 str         r3, [sp, #0xB4]
  04a94	ea000001	 b           |$LN161@UsbProcess@2|
  04a98	e3a03000	 mov         r3, #0
  04a9c	e58d30b4	 str         r3, [sp, #0xB4]
  04aa0		 |$LN161@UsbProcess@2|

; 1950 : 
; 1951 :                         // Do not currently fail this, just adjust start frames for subsequent transfers
; 1952 :                         DWORD dwAdjust = dwCurrentFrame - pIsoInTD->sTransfer.dwStartingFrame;

  04aa0	e59d3020	 ldr         r3, [sp, #0x20]
  04aa4	e283301c	 add         r3, r3, #0x1C
  04aa8	e59d2030	 ldr         r2, [sp, #0x30]
  04aac	e5933000	 ldr         r3, [r3]
  04ab0	e0423003	 sub         r3, r2, r3
  04ab4	e58d3040	 str         r3, [sp, #0x40]

; 1953 :                         USBTD *pTemp = pIsoInTD;

  04ab8	e59d3020	 ldr         r3, [sp, #0x20]
  04abc	e58d303c	 str         r3, [sp, #0x3C]
  04ac0		 |$LN41@UsbProcess@2|

; 1954 :                         while (pTemp->NextTD.next != pIsoInED->TailTD)

  04ac0	e59d3028	 ldr         r3, [sp, #0x28]
  04ac4	e2831018	 add         r1, r3, #0x18
  04ac8	e59d303c	 ldr         r3, [sp, #0x3C]
  04acc	e5932000	 ldr         r2, [r3]
  04ad0	e5913000	 ldr         r3, [r1]
  04ad4	e1520003	 cmp         r2, r3
  04ad8	0a00000b	 beq         |$LN40@UsbProcess@2|

; 1955 :                         {
; 1956 :                             pTemp = (USBTD *)pTemp->NextTD.next;

  04adc	e59d303c	 ldr         r3, [sp, #0x3C]
  04ae0	e5933000	 ldr         r3, [r3]
  04ae4	e58d303c	 str         r3, [sp, #0x3C]

; 1957 :                             pTemp->sTransfer.dwStartingFrame += dwAdjust;

  04ae8	e59d303c	 ldr         r3, [sp, #0x3C]
  04aec	e283301c	 add         r3, r3, #0x1C
  04af0	e5932000	 ldr         r2, [r3]
  04af4	e59d3040	 ldr         r3, [sp, #0x40]
  04af8	e0822003	 add         r2, r2, r3
  04afc	e59d303c	 ldr         r3, [sp, #0x3C]
  04b00	e283301c	 add         r3, r3, #0x1C
  04b04	e5832000	 str         r2, [r3]

; 1958 :                         }

  04b08	eaffffec	 b           |$LN41@UsbProcess@2|
  04b0c		 |$LN40@UsbProcess@2|
  04b0c		 |$LN42@UsbProcess@2|

; 1959 :                     }
; 1960 : 
; 1961 :                     if (nDiff <= 0)

  04b0c	e59d302c	 ldr         r3, [sp, #0x2C]
  04b10	e3530000	 cmp         r3, #0
  04b14	ca00000b	 bgt         |$LN39@UsbProcess@2|

; 1962 :                     {
; 1963 :                         pIsoInTD->bAwaitingFrame = FALSE;

  04b18	e59d3020	 ldr         r3, [sp, #0x20]
  04b1c	e2832060	 add         r2, r3, #0x60
  04b20	e3a03000	 mov         r3, #0
  04b24	e5823000	 str         r3, [r2]

; 1964 :                         InitializeTransaction((UINT32)m_portBase, pIsoInED, pIsoInTD);

  04b28	e59d3020	 ldr         r3, [sp, #0x20]
  04b2c	e59d2028	 ldr         r2, [sp, #0x28]
  04b30	e59d10f0	 ldr         r1, [sp, #0xF0]
  04b34	e2811f52	 add         r1, r1, #0x52, 30
  04b38	e5911000	 ldr         r1, [r1]
  04b3c	e59d00f0	 ldr         r0, [sp, #0xF0]
  04b40	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|

; 1965 :                     }
; 1966 :                     else

  04b44	ea000001	 b           |$LN38@UsbProcess@2|
  04b48		 |$LN39@UsbProcess@2|

; 1967 :                     {
; 1968 :                         fEnableSOF = TRUE;

  04b48	e3a03001	 mov         r3, #1
  04b4c	e58d3010	 str         r3, [sp, #0x10]
  04b50		 |$LN38@UsbProcess@2|
  04b50		 |$LN43@UsbProcess@2|

; 1969 :                     }
; 1970 :                 }
; 1971 : 
; 1972 :                 fEnableSOFStateChanged = TRUE;

  04b50	e3a03001	 mov         r3, #1
  04b54	e58d3018	 str         r3, [sp, #0x18]
  04b58		 |$LN51@UsbProcess@2|

; 1973 :             }
; 1974 :         }
; 1975 : 
; 1976 : #endif // MUSB_USEDMA_FOR_ISO
; 1977 : #endif // MUSB_USEDMA
; 1978 : 
; 1979 :         ///////////////////////////////////////////////////////////////////////////
; 1980 :         // Bulk (out) requests
; 1981 : 
; 1982 :         pED = (USBED*)m_pBulkOutHead;

  04b58	e59d30f0	 ldr         r3, [sp, #0xF0]
  04b5c	e28330b0	 add         r3, r3, #0xB0
  04b60	e5933000	 ldr         r3, [r3]
  04b64	e58d3008	 str         r3, [sp, #8]
  04b68		 |$LN37@UsbProcess@2|

; 1983 :         while(pED) {

  04b68	e59d3008	 ldr         r3, [sp, #8]
  04b6c	e3530000	 cmp         r3, #0
  04b70	0a0000ba	 beq         |$LN36@UsbProcess@2|
  04b74		 |$redoforsameOUTED$42319|

; 1984 : redoforsameOUTED:
; 1985 : 
; 1986 :             if(pED->HeadTD && (pED->HeadTD != pED->TailTD)){

  04b74	e59d3008	 ldr         r3, [sp, #8]
  04b78	e2833014	 add         r3, r3, #0x14
  04b7c	e5933000	 ldr         r3, [r3]
  04b80	e3530000	 cmp         r3, #0
  04b84	0a0000b1	 beq         |$LN35@UsbProcess@2|
  04b88	e59d3008	 ldr         r3, [sp, #8]
  04b8c	e2832014	 add         r2, r3, #0x14
  04b90	e59d3008	 ldr         r3, [sp, #8]
  04b94	e2833018	 add         r3, r3, #0x18
  04b98	e5922000	 ldr         r2, [r2]
  04b9c	e5933000	 ldr         r3, [r3]
  04ba0	e1520003	 cmp         r2, r3
  04ba4	0a0000a9	 beq         |$LN35@UsbProcess@2|

; 1987 :                 pTD = (USBTD *)pED->HeadTD;

  04ba8	e59d3008	 ldr         r3, [sp, #8]
  04bac	e2833014	 add         r3, r3, #0x14
  04bb0	e5933000	 ldr         r3, [r3]
  04bb4	e58d3004	 str         r3, [sp, #4]

; 1988 :                 switch(pED->TransferStatus){

  04bb8	e59d3008	 ldr         r3, [sp, #8]
  04bbc	e283301c	 add         r3, r3, #0x1C
  04bc0	e5933000	 ldr         r3, [r3]
  04bc4	e58d30b8	 str         r3, [sp, #0xB8]
  04bc8	e59d30b8	 ldr         r3, [sp, #0xB8]
  04bcc	e3530000	 cmp         r3, #0
  04bd0	0a000003	 beq         |$LN32@UsbProcess@2|
  04bd4	e59d30b8	 ldr         r3, [sp, #0xB8]
  04bd8	e3530002	 cmp         r3, #2
  04bdc	0a000056	 beq         |$LN24@UsbProcess@2|
  04be0	ea00009a	 b           |$LN33@UsbProcess@2|
  04be4		 |$LN32@UsbProcess@2|

; 1989 :                 case STATUS_IDLE:
; 1990 :                     if(!pED->bfSkip){

  04be4	e59d3008	 ldr         r3, [sp, #8]
  04be8	e283300c	 add         r3, r3, #0xC
  04bec	e5d33000	 ldrb        r3, [r3]
  04bf0	e3530000	 cmp         r3, #0
  04bf4	1a00004e	 bne         |$LN31@UsbProcess@2|

; 1991 :                         if( pED->bSemaphoreOwner == TRUE)

  04bf8	e59d3008	 ldr         r3, [sp, #8]
  04bfc	e283302c	 add         r3, r3, #0x2C
  04c00	e5933000	 ldr         r3, [r3]
  04c04	e3530001	 cmp         r3, #1
  04c08	1a000018	 bne         |$LN30@UsbProcess@2|

; 1992 :                         {
; 1993 :                             m_pProcessEDOut[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  04c0c	e59d30f0	 ldr         r3, [sp, #0xF0]
  04c10	e2831f41	 add         r1, r3, #0x41, 30
  04c14	e59d3008	 ldr         r3, [sp, #8]
  04c18	e2833010	 add         r3, r3, #0x10
  04c1c	e5d33000	 ldrb        r3, [r3]
  04c20	e2432001	 sub         r2, r3, #1
  04c24	e3a03004	 mov         r3, #4
  04c28	e0030392	 mul         r3, r2, r3
  04c2c	e0812003	 add         r2, r1, r3
  04c30	e59d3008	 ldr         r3, [sp, #8]
  04c34	e5823000	 str         r3, [r2]

; 1994 :                             pED->TransferStatus = STATUS_PROGRESS;

  04c38	e59d3008	 ldr         r3, [sp, #8]
  04c3c	e283201c	 add         r2, r3, #0x1C
  04c40	e3a03001	 mov         r3, #1
  04c44	e5823000	 str         r3, [r2]

; 1995 : 
; 1996 :                             InitializeTransaction((UINT32)m_portBase, pED, pTD);

  04c48	e59d3004	 ldr         r3, [sp, #4]
  04c4c	e59d2008	 ldr         r2, [sp, #8]
  04c50	e59d10f0	 ldr         r1, [sp, #0xF0]
  04c54	e2811f52	 add         r1, r1, #0x52, 30
  04c58	e5911000	 ldr         r1, [r1]
  04c5c	e59d00f0	 ldr         r0, [sp, #0xF0]
  04c60	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|
  04c64	ea00007d	 b           |$LN29@UsbProcess@2|

; 1997 :                             //RETAILMSG(FALSE,(TEXT("OUT take %d\n"),pED->bHostEndPointNum));
; 1998 :                             goto bulkoutdone;

  04c68	ea00007c	 b           |$bulkoutdone$42331|
  04c6c	ea000030	 b           |$LN28@UsbProcess@2|
  04c70		 |$LN30@UsbProcess@2|

; 1999 :                         }
; 2000 :                         else if(WaitForSingleObject( pED->hSemaphore, 0 ) == WAIT_OBJECT_0){

  04c70	e3a01000	 mov         r1, #0
  04c74	e59d3008	 ldr         r3, [sp, #8]
  04c78	e2833030	 add         r3, r3, #0x30
  04c7c	e5930000	 ldr         r0, [r3]
  04c80	eb000000	 bl          WaitForSingleObject
  04c84	e58d00bc	 str         r0, [sp, #0xBC]
  04c88	e59d30bc	 ldr         r3, [sp, #0xBC]
  04c8c	e3530000	 cmp         r3, #0
  04c90	1a000027	 bne         |$LN27@UsbProcess@2|

; 2001 :                             pED->bSemaphoreOwner = TRUE;

  04c94	e59d3008	 ldr         r3, [sp, #8]
  04c98	e283202c	 add         r2, r3, #0x2C
  04c9c	e3a03001	 mov         r3, #1
  04ca0	e5823000	 str         r3, [r2]

; 2002 :                             m_pProcessEDOut[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  04ca4	e59d30f0	 ldr         r3, [sp, #0xF0]
  04ca8	e2831f41	 add         r1, r3, #0x41, 30
  04cac	e59d3008	 ldr         r3, [sp, #8]
  04cb0	e2833010	 add         r3, r3, #0x10
  04cb4	e5d33000	 ldrb        r3, [r3]
  04cb8	e2432001	 sub         r2, r3, #1
  04cbc	e3a03004	 mov         r3, #4
  04cc0	e0030392	 mul         r3, r2, r3
  04cc4	e0812003	 add         r2, r1, r3
  04cc8	e59d3008	 ldr         r3, [sp, #8]
  04ccc	e5823000	 str         r3, [r2]

; 2003 :                             pED->TransferStatus = STATUS_PROGRESS;

  04cd0	e59d3008	 ldr         r3, [sp, #8]
  04cd4	e283201c	 add         r2, r3, #0x1C
  04cd8	e3a03001	 mov         r3, #1
  04cdc	e5823000	 str         r3, [r2]

; 2004 : 
; 2005 :                             InitializeTransaction((UINT32)m_portBase, pED, pTD);

  04ce0	e59d3004	 ldr         r3, [sp, #4]
  04ce4	e59d2008	 ldr         r2, [sp, #8]
  04ce8	e59d10f0	 ldr         r1, [sp, #0xF0]
  04cec	e2811f52	 add         r1, r1, #0x52, 30
  04cf0	e5911000	 ldr         r1, [r1]
  04cf4	e59d00f0	 ldr         r0, [sp, #0xF0]
  04cf8	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|

; 2006 :                             RETAILMSG(FALSE,(TEXT("OUT take %d\n"),pED->bHostEndPointNum));

  04cfc	ea000008	 b           |$LN162@UsbProcess@2|
  04d00	e59d3008	 ldr         r3, [sp, #8]
  04d04	e2833010	 add         r3, r3, #0x10
  04d08	e5d33000	 ldrb        r3, [r3]
  04d0c	e1a01003	 mov         r1, r3
  04d10	e59f04d0	 ldr         r0, [pc, #0x4D0]
  04d14	eb000000	 bl          NKDbgPrintfW
  04d18	e3a03001	 mov         r3, #1
  04d1c	e58d30c0	 str         r3, [sp, #0xC0]
  04d20	ea000001	 b           |$LN163@UsbProcess@2|
  04d24		 |$LN162@UsbProcess@2|
  04d24	e3a03000	 mov         r3, #0
  04d28	e58d30c0	 str         r3, [sp, #0xC0]
  04d2c		 |$LN163@UsbProcess@2|

; 2007 :                             goto bulkoutdone;

  04d2c	ea00004b	 b           |$LN26@UsbProcess@2|
  04d30	ea00004a	 b           |$bulkoutdone$42331|
  04d34		 |$LN27@UsbProcess@2|
  04d34		 |$LN28@UsbProcess@2|
  04d34		 |$LN31@UsbProcess@2|

; 2008 :                         }
; 2009 :                     }
; 2010 :                     break;

  04d34	ea000045	 b           |$LN33@UsbProcess@2|

; 2011 :                 case STATUS_PROGRESS:
; 2012 :                     break;

  04d38	ea000044	 b           |$LN33@UsbProcess@2|
  04d3c		 |$LN24@UsbProcess@2|

; 2013 :                 case STATUS_COMPLETE:
; 2014 :                     if(RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD)){

  04d3c	e59d1004	 ldr         r1, [sp, #4]
  04d40	e59d3008	 ldr         r3, [sp, #8]
  04d44	e2830014	 add         r0, r3, #0x14
  04d48	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|
  04d4c	e58d00c4	 str         r0, [sp, #0xC4]
  04d50	e59d30c4	 ldr         r3, [sp, #0xC4]
  04d54	e3530000	 cmp         r3, #0
  04d58	0a000025	 beq         |$LN23@UsbProcess@2|

; 2015 :                         BULKTCMSG(1, (L"TC: EP%d BULK OUT, len %d", pED->bHostEndPointNum, pTD->BytesTransferred));
; 2016 :                         if (pTD->sTransfer.lpfnCallback)

  04d5c	e59d3004	 ldr         r3, [sp, #4]
  04d60	e2833008	 add         r3, r3, #8
  04d64	e5933000	 ldr         r3, [r3]
  04d68	e3530000	 cmp         r3, #0
  04d6c	0a000007	 beq         |$LN22@UsbProcess@2|

; 2017 :                         {
; 2018 :                             ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  04d70	e59d3004	 ldr         r3, [sp, #4]
  04d74	e283300c	 add         r3, r3, #0xC
  04d78	e5930000	 ldr         r0, [r3]
  04d7c	e59d3004	 ldr         r3, [sp, #4]
  04d80	e2833008	 add         r3, r3, #8
  04d84	e5933000	 ldr         r3, [r3]
  04d88	e1a0e00f	 mov         lr, pc
  04d8c	e12fff13	 bx          r3
  04d90		 |$LN22@UsbProcess@2|

; 2019 :                         }
; 2020 :                         FreeTD(pTD);

  04d90	e59d0004	 ldr         r0, [sp, #4]
  04d94	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 2021 :                         ReleaseSemaphore(pED->hSemaphore, 1, NULL );

  04d98	e3a02000	 mov         r2, #0
  04d9c	e3a01001	 mov         r1, #1
  04da0	e59d3008	 ldr         r3, [sp, #8]
  04da4	e2833030	 add         r3, r3, #0x30
  04da8	e5930000	 ldr         r0, [r3]
  04dac	eb000000	 bl          ReleaseSemaphore

; 2022 :                         pED->bSemaphoreOwner = FALSE;

  04db0	e59d3008	 ldr         r3, [sp, #8]
  04db4	e283202c	 add         r2, r3, #0x2C
  04db8	e3a03000	 mov         r3, #0
  04dbc	e5823000	 str         r3, [r2]

; 2023 :                         RETAILMSG(FALSE,(TEXT("OUT give %d\n"),pED->bHostEndPointNum));

  04dc0	ea000008	 b           |$LN164@UsbProcess@2|
  04dc4	e59d3008	 ldr         r3, [sp, #8]
  04dc8	e2833010	 add         r3, r3, #0x10
  04dcc	e5d33000	 ldrb        r3, [r3]
  04dd0	e1a01003	 mov         r1, r3
  04dd4	e59f0408	 ldr         r0, [pc, #0x408]
  04dd8	eb000000	 bl          NKDbgPrintfW
  04ddc	e3a03001	 mov         r3, #1
  04de0	e58d30c8	 str         r3, [sp, #0xC8]
  04de4	ea000001	 b           |$LN165@UsbProcess@2|
  04de8		 |$LN164@UsbProcess@2|
  04de8	e3a03000	 mov         r3, #0
  04dec	e58d30c8	 str         r3, [sp, #0xC8]
  04df0		 |$LN165@UsbProcess@2|

; 2024 :                     }
; 2025 :                     else{

  04df0	ea000006	 b           |$LN21@UsbProcess@2|
  04df4		 |$LN23@UsbProcess@2|

; 2026 :                         RETAILMSG(TRUE,(TEXT("RemoveElementFromList Failed\n")));

  04df4	e59f03dc	 ldr         r0, [pc, #0x3DC]
  04df8	eb000000	 bl          NKDbgPrintfW
  04dfc	e3a03001	 mov         r3, #1
  04e00	e58d30cc	 str         r3, [sp, #0xCC]
  04e04	ea000001	 b           |$LN167@UsbProcess@2|
  04e08	e3a03000	 mov         r3, #0
  04e0c	e58d30cc	 str         r3, [sp, #0xCC]
  04e10		 |$LN167@UsbProcess@2|
  04e10		 |$LN21@UsbProcess@2|

; 2027 :                     }
; 2028 :                     m_pProcessEDOut[pED->bHostEndPointNum - 1] = NULL;

  04e10	e59d30f0	 ldr         r3, [sp, #0xF0]
  04e14	e2831f41	 add         r1, r3, #0x41, 30
  04e18	e59d3008	 ldr         r3, [sp, #8]
  04e1c	e2833010	 add         r3, r3, #0x10
  04e20	e5d33000	 ldrb        r3, [r3]
  04e24	e2432001	 sub         r2, r3, #1
  04e28	e3a03004	 mov         r3, #4
  04e2c	e0030392	 mul         r3, r2, r3
  04e30	e0812003	 add         r2, r1, r3
  04e34	e3a03000	 mov         r3, #0
  04e38	e5823000	 str         r3, [r2]

; 2029 :                     pED->TransferStatus = STATUS_IDLE;

  04e3c	e59d3008	 ldr         r3, [sp, #8]
  04e40	e283201c	 add         r2, r3, #0x1C
  04e44	e3a03000	 mov         r3, #0
  04e48	e5823000	 str         r3, [r2]

; 2030 :                     goto redoforsameOUTED;

  04e4c	eaffff48	 b           |$redoforsameOUTED$42319|
  04e50		 |$LN33@UsbProcess@2|
  04e50		 |$LN35@UsbProcess@2|

; 2031 :                 }
; 2032 :             }
; 2033 :             pED = (USBED *)pED->NextED.next;

  04e50	e59d3008	 ldr         r3, [sp, #8]
  04e54	e5933000	 ldr         r3, [r3]
  04e58	e58d3008	 str         r3, [sp, #8]

; 2034 :         }

  04e5c	eaffff41	 b           |$LN37@UsbProcess@2|
  04e60		 |$LN36@UsbProcess@2|
  04e60		 |$LN26@UsbProcess@2|
  04e60		 |$LN29@UsbProcess@2|
  04e60		 |$bulkoutdone$42331|

; 2035 : bulkoutdone: ; // NOP
; 2036 : 
; 2037 : 
; 2038 :         ///////////////////////////////////////////////////////////////////////////
; 2039 :         // Bulk (in) requests
; 2040 : 
; 2041 :         pED = (USBED*)m_pBulkInHead;

  04e60	e59d30f0	 ldr         r3, [sp, #0xF0]
  04e64	e28330ac	 add         r3, r3, #0xAC
  04e68	e5933000	 ldr         r3, [r3]
  04e6c	e58d3008	 str         r3, [sp, #8]
  04e70		 |$LN20@UsbProcess@2|

; 2042 :         while(pED) {

  04e70	e59d3008	 ldr         r3, [sp, #8]
  04e74	e3530000	 cmp         r3, #0
  04e78	0a0000ba	 beq         |$LN19@UsbProcess@2|
  04e7c		 |$redoforsameINED$42351|

; 2043 : redoforsameINED:
; 2044 : 
; 2045 :             if(pED->HeadTD && (pED->HeadTD != pED->TailTD)){

  04e7c	e59d3008	 ldr         r3, [sp, #8]
  04e80	e2833014	 add         r3, r3, #0x14
  04e84	e5933000	 ldr         r3, [r3]
  04e88	e3530000	 cmp         r3, #0
  04e8c	0a0000b1	 beq         |$LN18@UsbProcess@2|
  04e90	e59d3008	 ldr         r3, [sp, #8]
  04e94	e2832014	 add         r2, r3, #0x14
  04e98	e59d3008	 ldr         r3, [sp, #8]
  04e9c	e2833018	 add         r3, r3, #0x18
  04ea0	e5922000	 ldr         r2, [r2]
  04ea4	e5933000	 ldr         r3, [r3]
  04ea8	e1520003	 cmp         r2, r3
  04eac	0a0000a9	 beq         |$LN18@UsbProcess@2|

; 2046 :                 pTD = (USBTD *)pED->HeadTD;

  04eb0	e59d3008	 ldr         r3, [sp, #8]
  04eb4	e2833014	 add         r3, r3, #0x14
  04eb8	e5933000	 ldr         r3, [r3]
  04ebc	e58d3004	 str         r3, [sp, #4]

; 2047 :                 switch(pED->TransferStatus){

  04ec0	e59d3008	 ldr         r3, [sp, #8]
  04ec4	e283301c	 add         r3, r3, #0x1C
  04ec8	e5933000	 ldr         r3, [r3]
  04ecc	e58d30d0	 str         r3, [sp, #0xD0]
  04ed0	e59d30d0	 ldr         r3, [sp, #0xD0]
  04ed4	e3530000	 cmp         r3, #0
  04ed8	0a000003	 beq         |$LN15@UsbProcess@2|
  04edc	e59d30d0	 ldr         r3, [sp, #0xD0]
  04ee0	e3530002	 cmp         r3, #2
  04ee4	0a000056	 beq         |$LN7@UsbProcess@2|
  04ee8	ea00009a	 b           |$LN16@UsbProcess@2|
  04eec		 |$LN15@UsbProcess@2|

; 2048 :                 case STATUS_IDLE:
; 2049 :                     if(!pED->bfSkip){

  04eec	e59d3008	 ldr         r3, [sp, #8]
  04ef0	e283300c	 add         r3, r3, #0xC
  04ef4	e5d33000	 ldrb        r3, [r3]
  04ef8	e3530000	 cmp         r3, #0
  04efc	1a00004e	 bne         |$LN14@UsbProcess@2|

; 2050 :                         if( pED->bSemaphoreOwner == TRUE)

  04f00	e59d3008	 ldr         r3, [sp, #8]
  04f04	e283302c	 add         r3, r3, #0x2C
  04f08	e5933000	 ldr         r3, [r3]
  04f0c	e3530001	 cmp         r3, #1
  04f10	1a000018	 bne         |$LN13@UsbProcess@2|

; 2051 :                         {
; 2052 :                             m_pProcessEDIn[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  04f14	e59d30f0	 ldr         r3, [sp, #0xF0]
  04f18	e28310c8	 add         r1, r3, #0xC8
  04f1c	e59d3008	 ldr         r3, [sp, #8]
  04f20	e2833010	 add         r3, r3, #0x10
  04f24	e5d33000	 ldrb        r3, [r3]
  04f28	e2432001	 sub         r2, r3, #1
  04f2c	e3a03004	 mov         r3, #4
  04f30	e0030392	 mul         r3, r2, r3
  04f34	e0812003	 add         r2, r1, r3
  04f38	e59d3008	 ldr         r3, [sp, #8]
  04f3c	e5823000	 str         r3, [r2]

; 2053 :                             pED->TransferStatus = STATUS_PROGRESS;

  04f40	e59d3008	 ldr         r3, [sp, #8]
  04f44	e283201c	 add         r2, r3, #0x1C
  04f48	e3a03001	 mov         r3, #1
  04f4c	e5823000	 str         r3, [r2]

; 2054 : 
; 2055 :                             InitializeTransaction((UINT32)m_portBase, pED, pTD);

  04f50	e59d3004	 ldr         r3, [sp, #4]
  04f54	e59d2008	 ldr         r2, [sp, #8]
  04f58	e59d10f0	 ldr         r1, [sp, #0xF0]
  04f5c	e2811f52	 add         r1, r1, #0x52, 30
  04f60	e5911000	 ldr         r1, [r1]
  04f64	e59d00f0	 ldr         r0, [sp, #0xF0]
  04f68	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|
  04f6c	ea00007d	 b           |$LN12@UsbProcess@2|

; 2056 :                             //RETAILMSG(FALSE,(TEXT("IN take %d\n"),pED->bHostEndPointNum));
; 2057 :                             goto bulkindone;

  04f70	ea00007c	 b           |$bulkindone$42363|
  04f74	ea000030	 b           |$LN11@UsbProcess@2|
  04f78		 |$LN13@UsbProcess@2|

; 2058 :                         }
; 2059 :                         else if(WaitForSingleObject( pED->hSemaphore, 0 ) == WAIT_OBJECT_0){

  04f78	e3a01000	 mov         r1, #0
  04f7c	e59d3008	 ldr         r3, [sp, #8]
  04f80	e2833030	 add         r3, r3, #0x30
  04f84	e5930000	 ldr         r0, [r3]
  04f88	eb000000	 bl          WaitForSingleObject
  04f8c	e58d00d4	 str         r0, [sp, #0xD4]
  04f90	e59d30d4	 ldr         r3, [sp, #0xD4]
  04f94	e3530000	 cmp         r3, #0
  04f98	1a000027	 bne         |$LN10@UsbProcess@2|

; 2060 :                             pED->bSemaphoreOwner = TRUE;

  04f9c	e59d3008	 ldr         r3, [sp, #8]
  04fa0	e283202c	 add         r2, r3, #0x2C
  04fa4	e3a03001	 mov         r3, #1
  04fa8	e5823000	 str         r3, [r2]

; 2061 :                             m_pProcessEDIn[pED->bHostEndPointNum - 1] = (PDWORD)pED;

  04fac	e59d30f0	 ldr         r3, [sp, #0xF0]
  04fb0	e28310c8	 add         r1, r3, #0xC8
  04fb4	e59d3008	 ldr         r3, [sp, #8]
  04fb8	e2833010	 add         r3, r3, #0x10
  04fbc	e5d33000	 ldrb        r3, [r3]
  04fc0	e2432001	 sub         r2, r3, #1
  04fc4	e3a03004	 mov         r3, #4
  04fc8	e0030392	 mul         r3, r2, r3
  04fcc	e0812003	 add         r2, r1, r3
  04fd0	e59d3008	 ldr         r3, [sp, #8]
  04fd4	e5823000	 str         r3, [r2]

; 2062 :                             pED->TransferStatus = STATUS_PROGRESS;

  04fd8	e59d3008	 ldr         r3, [sp, #8]
  04fdc	e283201c	 add         r2, r3, #0x1C
  04fe0	e3a03001	 mov         r3, #1
  04fe4	e5823000	 str         r3, [r2]

; 2063 : 
; 2064 :                             InitializeTransaction((UINT32)m_portBase, pED, pTD);

  04fe8	e59d3004	 ldr         r3, [sp, #4]
  04fec	e59d2008	 ldr         r2, [sp, #8]
  04ff0	e59d10f0	 ldr         r1, [sp, #0xF0]
  04ff4	e2811f52	 add         r1, r1, #0x52, 30
  04ff8	e5911000	 ldr         r1, [r1]
  04ffc	e59d00f0	 ldr         r0, [sp, #0xF0]
  05000	eb000000	 bl          |?InitializeTransaction@CHW@@QAAXIPAX0@Z|

; 2065 :                             RETAILMSG(FALSE,(TEXT("IN take %d\n"),pED->bHostEndPointNum));

  05004	ea000008	 b           |$LN168@UsbProcess@2|
  05008	e59d3008	 ldr         r3, [sp, #8]
  0500c	e2833010	 add         r3, r3, #0x10
  05010	e5d33000	 ldrb        r3, [r3]
  05014	e1a01003	 mov         r1, r3
  05018	e59f01c0	 ldr         r0, [pc, #0x1C0]
  0501c	eb000000	 bl          NKDbgPrintfW
  05020	e3a03001	 mov         r3, #1
  05024	e58d30d8	 str         r3, [sp, #0xD8]
  05028	ea000001	 b           |$LN169@UsbProcess@2|
  0502c		 |$LN168@UsbProcess@2|
  0502c	e3a03000	 mov         r3, #0
  05030	e58d30d8	 str         r3, [sp, #0xD8]
  05034		 |$LN169@UsbProcess@2|

; 2066 :                             goto bulkindone;

  05034	ea00004b	 b           |$LN9@UsbProcess@2|
  05038	ea00004a	 b           |$bulkindone$42363|
  0503c		 |$LN10@UsbProcess@2|
  0503c		 |$LN11@UsbProcess@2|
  0503c		 |$LN14@UsbProcess@2|

; 2067 :                         }
; 2068 :                     }
; 2069 :                     break;

  0503c	ea000045	 b           |$LN16@UsbProcess@2|

; 2070 :                 case STATUS_PROGRESS:
; 2071 :                     break;

  05040	ea000044	 b           |$LN16@UsbProcess@2|
  05044		 |$LN7@UsbProcess@2|

; 2072 :                 case STATUS_COMPLETE:
; 2073 :                     if(RemoveElementFromList((ListHead**)&pED->HeadTD, (ListHead*)pTD)){

  05044	e59d1004	 ldr         r1, [sp, #4]
  05048	e59d3008	 ldr         r3, [sp, #8]
  0504c	e2830014	 add         r0, r3, #0x14
  05050	eb000000	 bl          |?RemoveElementFromList@@YAHPAPAUListHead@@PAU1@@Z|
  05054	e58d00dc	 str         r0, [sp, #0xDC]
  05058	e59d30dc	 ldr         r3, [sp, #0xDC]
  0505c	e3530000	 cmp         r3, #0
  05060	0a000025	 beq         |$LN6@UsbProcess@2|

; 2074 :                         BULKTCMSG(1, (L"TC: EP%d BULK IN, len %d", pED->bHostEndPointNum, pTD->BytesTransferred));
; 2075 :                         if (pTD->sTransfer.lpfnCallback)

  05064	e59d3004	 ldr         r3, [sp, #4]
  05068	e2833008	 add         r3, r3, #8
  0506c	e5933000	 ldr         r3, [r3]
  05070	e3530000	 cmp         r3, #0
  05074	0a000007	 beq         |$LN5@UsbProcess@2|

; 2076 :                         {
; 2077 :                             ( *pTD->sTransfer.lpfnCallback )( pTD->sTransfer.lpvCallbackParameter );

  05078	e59d3004	 ldr         r3, [sp, #4]
  0507c	e283300c	 add         r3, r3, #0xC
  05080	e5930000	 ldr         r0, [r3]
  05084	e59d3004	 ldr         r3, [sp, #4]
  05088	e2833008	 add         r3, r3, #8
  0508c	e5933000	 ldr         r3, [r3]
  05090	e1a0e00f	 mov         lr, pc
  05094	e12fff13	 bx          r3
  05098		 |$LN5@UsbProcess@2|

; 2078 :                         }
; 2079 :                         FreeTD(pTD);

  05098	e59d0004	 ldr         r0, [sp, #4]
  0509c	eb000000	 bl          |?FreeTD@@YAXPAU_USBTD@@@Z|

; 2080 :                         ReleaseSemaphore(pED->hSemaphore, 1, NULL );

  050a0	e3a02000	 mov         r2, #0
  050a4	e3a01001	 mov         r1, #1
  050a8	e59d3008	 ldr         r3, [sp, #8]
  050ac	e2833030	 add         r3, r3, #0x30
  050b0	e5930000	 ldr         r0, [r3]
  050b4	eb000000	 bl          ReleaseSemaphore

; 2081 :                         pED->bSemaphoreOwner = FALSE;

  050b8	e59d3008	 ldr         r3, [sp, #8]
  050bc	e283202c	 add         r2, r3, #0x2C
  050c0	e3a03000	 mov         r3, #0
  050c4	e5823000	 str         r3, [r2]

; 2082 :                         RETAILMSG(FALSE,(TEXT("IN give %d\n"),pED->bHostEndPointNum));

  050c8	ea000008	 b           |$LN170@UsbProcess@2|
  050cc	e59d3008	 ldr         r3, [sp, #8]
  050d0	e2833010	 add         r3, r3, #0x10
  050d4	e5d33000	 ldrb        r3, [r3]
  050d8	e1a01003	 mov         r1, r3
  050dc	e59f00f8	 ldr         r0, [pc, #0xF8]
  050e0	eb000000	 bl          NKDbgPrintfW
  050e4	e3a03001	 mov         r3, #1
  050e8	e58d30e0	 str         r3, [sp, #0xE0]
  050ec	ea000001	 b           |$LN171@UsbProcess@2|
  050f0		 |$LN170@UsbProcess@2|
  050f0	e3a03000	 mov         r3, #0
  050f4	e58d30e0	 str         r3, [sp, #0xE0]
  050f8		 |$LN171@UsbProcess@2|

; 2083 :                     }
; 2084 :                     else{

  050f8	ea000006	 b           |$LN4@UsbProcess@2|
  050fc		 |$LN6@UsbProcess@2|

; 2085 :                         RETAILMSG(TRUE,(TEXT("RemoveElementFromList Failed\n")));

  050fc	e59f00d4	 ldr         r0, [pc, #0xD4]
  05100	eb000000	 bl          NKDbgPrintfW
  05104	e3a03001	 mov         r3, #1
  05108	e58d30e4	 str         r3, [sp, #0xE4]
  0510c	ea000001	 b           |$LN173@UsbProcess@2|
  05110	e3a03000	 mov         r3, #0
  05114	e58d30e4	 str         r3, [sp, #0xE4]
  05118		 |$LN173@UsbProcess@2|
  05118		 |$LN4@UsbProcess@2|

; 2086 :                     }
; 2087 :                     m_pProcessEDIn[pED->bHostEndPointNum - 1] = NULL;

  05118	e59d30f0	 ldr         r3, [sp, #0xF0]
  0511c	e28310c8	 add         r1, r3, #0xC8
  05120	e59d3008	 ldr         r3, [sp, #8]
  05124	e2833010	 add         r3, r3, #0x10
  05128	e5d33000	 ldrb        r3, [r3]
  0512c	e2432001	 sub         r2, r3, #1
  05130	e3a03004	 mov         r3, #4
  05134	e0030392	 mul         r3, r2, r3
  05138	e0812003	 add         r2, r1, r3
  0513c	e3a03000	 mov         r3, #0
  05140	e5823000	 str         r3, [r2]

; 2088 :                     pED->TransferStatus = STATUS_IDLE;

  05144	e59d3008	 ldr         r3, [sp, #8]
  05148	e283201c	 add         r2, r3, #0x1C
  0514c	e3a03000	 mov         r3, #0
  05150	e5823000	 str         r3, [r2]

; 2089 :                     goto redoforsameINED;

  05154	eaffff48	 b           |$redoforsameINED$42351|
  05158		 |$LN16@UsbProcess@2|
  05158		 |$LN18@UsbProcess@2|

; 2090 :                 }
; 2091 :             }
; 2092 :             pED = (USBED *)pED->NextED.next;

  05158	e59d3008	 ldr         r3, [sp, #8]
  0515c	e5933000	 ldr         r3, [r3]
  05160	e58d3008	 str         r3, [sp, #8]

; 2093 :         }

  05164	eaffff41	 b           |$LN20@UsbProcess@2|
  05168		 |$LN19@UsbProcess@2|
  05168		 |$LN9@UsbProcess@2|
  05168		 |$LN12@UsbProcess@2|
  05168		 |$bulkindone$42363|

; 2094 : bulkindone: ; // NOP
; 2095 : 
; 2096 : 
; 2097 : #ifdef MUSB_USEDMA
; 2098 : #ifdef MUSB_USEDMA_FOR_ISO
; 2099 : 
; 2100 :         // Enable or disable SOF interrupts
; 2101 : 
; 2102 :         if (fEnableSOFStateChanged)

  05168	e59d3018	 ldr         r3, [sp, #0x18]
  0516c	e3530000	 cmp         r3, #0
  05170	0a00000f	 beq         |$LN3@UsbProcess@2|

; 2103 :         {
; 2104 :             if (fEnableSOF)

  05174	e59d3010	 ldr         r3, [sp, #0x10]
  05178	e3530000	 cmp         r3, #0
  0517c	0a000006	 beq         |$LN2@UsbProcess@2|

; 2105 :             {
; 2106 :                 WRITE_PORT_ULONG( (m_portBase+USB_CORE_INTMSKSETR_REG_OFFSET),
; 2107 :                                   (CSL_USB_INTRUSB_SOF_MASK << CSL_USB_INTMSKR_USB_SHIFT) );

  05180	e59d30f0	 ldr         r3, [sp, #0xF0]
  05184	e2833f52	 add         r3, r3, #0x52, 30
  05188	e5933000	 ldr         r3, [r3]
  0518c	e2832050	 add         r2, r3, #0x50
  05190	e3a03702	 mov         r3, #2, 14
  05194	e5823000	 str         r3, [r2]

; 2108 :             }
; 2109 :             else

  05198	ea000005	 b           |$LN1@UsbProcess@2|
  0519c		 |$LN2@UsbProcess@2|

; 2110 :             {
; 2111 :                 WRITE_PORT_ULONG( (m_portBase+USB_CORE_INTMSKCLRR_REG_OFFSET),
; 2112 :                                   (CSL_USB_INTRUSB_SOF_MASK << CSL_USB_INTMSKR_USB_SHIFT) );

  0519c	e59d30f0	 ldr         r3, [sp, #0xF0]
  051a0	e2833f52	 add         r3, r3, #0x52, 30
  051a4	e5933000	 ldr         r3, [r3]
  051a8	e2832054	 add         r2, r3, #0x54
  051ac	e3a03702	 mov         r3, #2, 14
  051b0	e5823000	 str         r3, [r2]
  051b4		 |$LN1@UsbProcess@2|
  051b4		 |$LN3@UsbProcess@2|

; 2113 :             }
; 2114 :         }
; 2115 : 
; 2116 : #endif // MUSB_USEDMA_FOR_ISO
; 2117 : #endif // MUSB_USEDMA
; 2118 : 
; 2119 :         UnlockProcessingThread();

  051b4	e59d00f0	 ldr         r0, [sp, #0xF0]
  051b8	eb000000	 bl          |?UnlockProcessingThread@CHW@@QAAXXZ|

; 2120 : 
; 2121 :     }

  051bc	eafffa58	 b           |$LN174@UsbProcess@2|
  051c0		 |$LN132@UsbProcess@2|

; 2122 : 
; 2123 :     return 0;

  051c0	e3a03000	 mov         r3, #0
  051c4	e58d3044	 str         r3, [sp, #0x44]

; 2124 : }

  051c8	e59d0044	 ldr         r0, [sp, #0x44]
  051cc	e28dd0e8	 add         sp, sp, #0xE8
  051d0	e89d6000	 ldmia       sp, {sp, lr}
  051d4	e12fff1e	 bx          lr
  051d8		 |$LN179@UsbProcess@2|
  051d8		 |$LN180@UsbProcess@2|
  051d8	00000000	 DCD         |??_C@_1DM@OAANCGDM@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAE?$AAl?$AAe?$AAm?$AAe?$AAn?$AAt?$AAF?$AAr?$AAo?$AAm?$AAL?$AAi?$AAs?$AAt?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?6?$AA?$AA@|
  051dc		 |$LN181@UsbProcess@2|
  051dc	00000000	 DCD         |??_C@_1BI@HAFKPJPD@?$AAI?$AAN?$AA?5?$AAg?$AAi?$AAv?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  051e0		 |$LN182@UsbProcess@2|
  051e0	00000000	 DCD         |??_C@_1BI@BGCEKLPB@?$AAI?$AAN?$AA?5?$AAt?$AAa?$AAk?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  051e4		 |$LN183@UsbProcess@2|
  051e4	00000000	 DCD         |??_C@_1BK@MPMDMEEF@?$AAO?$AAU?$AAT?$AA?5?$AAg?$AAi?$AAv?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  051e8		 |$LN184@UsbProcess@2|
  051e8	00000000	 DCD         |??_C@_1BK@KJLNJGEH@?$AAO?$AAU?$AAT?$AA?5?$AAt?$AAa?$AAk?$AAe?$AA?5?$AA?$CF?$AAd?$AA?6?$AA?$AA@|
  051ec		 |$LN185@UsbProcess@2|
  051ec	00000000	 DCD         |??_C@_1II@LBNMOOPF@?$AAR?$AAX?$AA?5?$AAI?$AAS?$AAO?$AA?5?$AAd?$AAo?$AAe?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAe?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl@|
  051f0		 |$LN186@UsbProcess@2|
  051f0	00000000	 DCD         |??_C@_1II@DCFKBPOJ@?$AAT?$AAX?$AA?5?$AAI?$AAS?$AAO?$AA?5?$AAd?$AAo?$AAe?$AAs?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAm?$AAe?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl@|
  051f4		 |$M43579|

			 ENDP  ; |?UsbProcessingThread@CHW@@AAAKXZ|, CHW::UsbProcessingThread

	EXPORT	|??_C@_1BE@BPNDPJJD@?$AAE?$AAP?$AAn?$AAu?$AAm?$AA?$DN?$AA?$CF?$AAx?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@EDHBCCDA@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@ELCACCKK@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@DKIHCKIL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| [ DATA ] ; `string'
	EXPORT	|?AllocateHostEndPoint@CHW@@QAAHIKH@Z|	; CHW::AllocateHostEndPoint

  000d0			 AREA	 |.pdata|, PDATA
|$T43615| DCD	|$LN39@AllocateHo|
	DCD	0x40013204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@BPNDPJJD@?$AAE?$AAP?$AAn?$AAu?$AAm?$AA?$DN?$AA?$CF?$AAx?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "P", 0x0, "n", 0x0, "u", 0x0, "m", 0x0, "=", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@EDHBCCDA@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, ",", 0x0, " ", 0x0, "t", 0x0, "y"
	DCB	0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "r", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@ELCACCKK@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, ","
	DCB	0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "d", 0x0, "i"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@| DCB "O", 0x0, "U", 0x0, "T", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@| DCB "I", 0x0, "N", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@DKIHCKIL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, "P", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, "0", 0x0, ",", 0x0, " ", 0x0, "t"
	DCB	0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "C", 0x0, "O"
	DCB	0x0, "N", 0x0, "T", 0x0, "R", 0x0, "O", 0x0, "L", 0x0, ","
	DCB	0x0, " ", 0x0, "d", 0x0, "i", 0x0, "r", 0x0, " ", 0x0, "B"
	DCB	0x0, "I", 0x0, "D", 0x0, "I", 0x0, "R", 0x0, ",", 0x0, " "
	DCB	0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O", 0x0, " ", 0x0, "6"
	DCB	0x0, "4", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  051f4			 AREA	 |.text|, CODE, ARM

  051f4		 |?AllocateHostEndPoint@CHW@@QAAHIKH@Z| PROC ; CHW::AllocateHostEndPoint

; 2128 : {

  051f4		 |$LN39@AllocateHo|
  051f4	e1a0c00d	 mov         r12, sp
  051f8	e92d000f	 stmdb       sp!, {r0 - r3}
  051fc	e92d5000	 stmdb       sp!, {r12, lr}
  05200	e24dd03c	 sub         sp, sp, #0x3C
  05204		 |$M43612|

; 2129 :     INT32 i = 0, EpNum = -1;

  05204	e3a03000	 mov         r3, #0
  05208	e58d3004	 str         r3, [sp, #4]
  0520c	e3e03000	 mvn         r3, #0
  05210	e58d3008	 str         r3, [sp, #8]

; 2130 : 
; 2131 :     // Use configurable static FIFO alloc
; 2132 : 
; 2133 :     if (TransferType == TYPE_CONTROL)

  05214	e59d3048	 ldr         r3, [sp, #0x48]
  05218	e3530001	 cmp         r3, #1
  0521c	1a00000d	 bne         |$LN20@AllocateHo|

; 2134 :     {
; 2135 :         EpNum = 0;

  05220	e3a03000	 mov         r3, #0
  05224	e58d3008	 str         r3, [sp, #8]

; 2136 :         DEBUGMSG(ZONE_INIT, (TEXT("CHW::AllocateHostEndPoint: allocated EP0, type CONTROL, dir BIDIR, FIFO 64\n")));

  05228	e59f3480	 ldr         r3, [pc, #0x480]
  0522c	e5933440	 ldr         r3, [r3, #0x440]
  05230	e3130002	 tst         r3, #2
  05234	0a000004	 beq         |$LN23@AllocateHo|
  05238	e59f0478	 ldr         r0, [pc, #0x478]
  0523c	eb000000	 bl          NKDbgPrintfW
  05240	e3a03001	 mov         r3, #1
  05244	e58d3020	 str         r3, [sp, #0x20]
  05248	ea000001	 b           |$LN24@AllocateHo|
  0524c		 |$LN23@AllocateHo|
  0524c	e3a03000	 mov         r3, #0
  05250	e58d3020	 str         r3, [sp, #0x20]
  05254		 |$LN24@AllocateHo|

; 2137 :     }
; 2138 :     else

  05254	ea000102	 b           |$LN19@AllocateHo|
  05258		 |$LN20@AllocateHo|

; 2139 :     {
; 2140 :         EP_CONFIG *pConfig = IsDirectionIN ? m_EpInConfig : m_EpOutConfig;

  05258	e59d3050	 ldr         r3, [sp, #0x50]
  0525c	e3530000	 cmp         r3, #0
  05260	0a000003	 beq         |$LN25@AllocateHo|
  05264	e59d3044	 ldr         r3, [sp, #0x44]
  05268	e2833d09	 add         r3, r3, #9, 26
  0526c	e58d3024	 str         r3, [sp, #0x24]
  05270	ea000002	 b           |$LN26@AllocateHo|
  05274		 |$LN25@AllocateHo|
  05274	e59d3044	 ldr         r3, [sp, #0x44]
  05278	e2833fae	 add         r3, r3, #0xAE, 30
  0527c	e58d3024	 str         r3, [sp, #0x24]
  05280		 |$LN26@AllocateHo|
  05280	e59d3024	 ldr         r3, [sp, #0x24]
  05284	e58d3014	 str         r3, [sp, #0x14]

; 2141 :         INT32 EpAlloc = -1;

  05288	e3e03000	 mvn         r3, #0
  0528c	e58d300c	 str         r3, [sp, #0xC]

; 2142 :         BOOL fStop = FALSE;

  05290	e3a03000	 mov         r3, #0
  05294	e58d3010	 str         r3, [sp, #0x10]

; 2143 : 
; 2144 :         if (TransferType == TYPE_BULK)

  05298	e59d3048	 ldr         r3, [sp, #0x48]
  0529c	e3530002	 cmp         r3, #2
  052a0	1a000043	 bne         |$LN18@AllocateHo|

; 2145 :         {
; 2146 :             // Search for shared BULK EP
; 2147 :             for (i = 0; !fStop && (i < (MGC_MAX_USB_ENDS - 1)); i ++)

  052a4	e3a03000	 mov         r3, #0
  052a8	e58d3004	 str         r3, [sp, #4]
  052ac	ea000002	 b           |$LN17@AllocateHo|
  052b0		 |$LN16@AllocateHo|
  052b0	e59d3004	 ldr         r3, [sp, #4]
  052b4	e2833001	 add         r3, r3, #1
  052b8	e58d3004	 str         r3, [sp, #4]
  052bc		 |$LN17@AllocateHo|
  052bc	e59d3010	 ldr         r3, [sp, #0x10]
  052c0	e3530000	 cmp         r3, #0
  052c4	1a00003a	 bne         |$LN15@AllocateHo|
  052c8	e59d3004	 ldr         r3, [sp, #4]
  052cc	e353000f	 cmp         r3, #0xF
  052d0	aa000037	 bge         |$LN15@AllocateHo|

; 2148 :             {
; 2149 :                 if ((pConfig[ i ].refCount > 0) &&
; 2150 :                     (pConfig[ i ].epTypeCurrent == TYPE_BULK) &&
; 2151 :                     pConfig[ i ].fSharedMode &&
; 2152 :                     (pConfig[ i ].fifoSize >= MaxPktSize))

  052d4	e59d1004	 ldr         r1, [sp, #4]
  052d8	e3a03008	 mov         r3, #8
  052dc	e0020391	 mul         r2, r1, r3
  052e0	e59d3014	 ldr         r3, [sp, #0x14]
  052e4	e0833002	 add         r3, r3, r2
  052e8	e5d33000	 ldrb        r3, [r3]
  052ec	e3530000	 cmp         r3, #0
  052f0	da00002e	 ble         |$LN14@AllocateHo|
  052f4	e59d1004	 ldr         r1, [sp, #4]
  052f8	e3a03008	 mov         r3, #8
  052fc	e0020391	 mul         r2, r1, r3
  05300	e59d3014	 ldr         r3, [sp, #0x14]
  05304	e0833002	 add         r3, r3, r2
  05308	e2833002	 add         r3, r3, #2
  0530c	e5d33000	 ldrb        r3, [r3]
  05310	e3530002	 cmp         r3, #2
  05314	1a000025	 bne         |$LN14@AllocateHo|
  05318	e59d1004	 ldr         r1, [sp, #4]
  0531c	e3a03008	 mov         r3, #8
  05320	e0020391	 mul         r2, r1, r3
  05324	e59d3014	 ldr         r3, [sp, #0x14]
  05328	e0833002	 add         r3, r3, r2
  0532c	e2833004	 add         r3, r3, #4
  05330	e5d33000	 ldrb        r3, [r3]
  05334	e3530000	 cmp         r3, #0
  05338	0a00001c	 beq         |$LN14@AllocateHo|
  0533c	e59d1004	 ldr         r1, [sp, #4]
  05340	e3a03008	 mov         r3, #8
  05344	e0020391	 mul         r2, r1, r3
  05348	e59d3014	 ldr         r3, [sp, #0x14]
  0534c	e0833002	 add         r3, r3, r2
  05350	e2833006	 add         r3, r3, #6
  05354	e1d320b0	 ldrh        r2, [r3]
  05358	e59d304c	 ldr         r3, [sp, #0x4C]
  0535c	e1520003	 cmp         r2, r3
  05360	3a000012	 bcc         |$LN14@AllocateHo|

; 2153 :                 {
; 2154 :                     pConfig[ i ].refCount ++;

  05364	e59d1004	 ldr         r1, [sp, #4]
  05368	e3a03008	 mov         r3, #8
  0536c	e0020391	 mul         r2, r1, r3
  05370	e59d3014	 ldr         r3, [sp, #0x14]
  05374	e0833002	 add         r3, r3, r2
  05378	e5d33000	 ldrb        r3, [r3]
  0537c	e2833001	 add         r3, r3, #1
  05380	e20300ff	 and         r0, r3, #0xFF
  05384	e59d1004	 ldr         r1, [sp, #4]
  05388	e3a03008	 mov         r3, #8
  0538c	e0020391	 mul         r2, r1, r3
  05390	e59d3014	 ldr         r3, [sp, #0x14]
  05394	e0833002	 add         r3, r3, r2
  05398	e5c30000	 strb        r0, [r3]

; 2155 :                     EpNum = i + 1;

  0539c	e59d3004	 ldr         r3, [sp, #4]
  053a0	e2833001	 add         r3, r3, #1
  053a4	e58d3008	 str         r3, [sp, #8]

; 2156 :                     fStop = TRUE;

  053a8	e3a03001	 mov         r3, #1
  053ac	e58d3010	 str         r3, [sp, #0x10]
  053b0		 |$LN14@AllocateHo|

; 2157 :                 }
; 2158 :             }

  053b0	eaffffbe	 b           |$LN16@AllocateHo|
  053b4		 |$LN15@AllocateHo|
  053b4		 |$LN18@AllocateHo|

; 2159 :         }
; 2160 : 
; 2161 :         if (!fStop)

  053b4	e59d3010	 ldr         r3, [sp, #0x10]
  053b8	e3530000	 cmp         r3, #0
  053bc	1a000070	 bne         |$LN13@AllocateHo|

; 2162 :         {
; 2163 :             for (i = 0; !fStop && (i < (MGC_MAX_USB_ENDS - 1)); i ++)

  053c0	e3a03000	 mov         r3, #0
  053c4	e58d3004	 str         r3, [sp, #4]
  053c8	ea000002	 b           |$LN12@AllocateHo|
  053cc		 |$LN11@AllocateHo|
  053cc	e59d3004	 ldr         r3, [sp, #4]
  053d0	e2833001	 add         r3, r3, #1
  053d4	e58d3004	 str         r3, [sp, #4]
  053d8		 |$LN12@AllocateHo|
  053d8	e59d3010	 ldr         r3, [sp, #0x10]
  053dc	e3530000	 cmp         r3, #0
  053e0	1a000051	 bne         |$LN10@AllocateHo|
  053e4	e59d3004	 ldr         r3, [sp, #4]
  053e8	e353000f	 cmp         r3, #0xF
  053ec	aa00004e	 bge         |$LN10@AllocateHo|

; 2164 :             {
; 2165 :                 if (((pConfig[ i ].epType == (UINT8)TransferType) ||
; 2166 :                      (pConfig[ i ].epType == TYPE_ANY)) &&
; 2167 :                     (pConfig[ i ].fifoSize >= MaxPktSize) &&
; 2168 :                     (pConfig[ i ].refCount == 0))

  053f0	e59d1004	 ldr         r1, [sp, #4]
  053f4	e3a03008	 mov         r3, #8
  053f8	e0020391	 mul         r2, r1, r3
  053fc	e59d3014	 ldr         r3, [sp, #0x14]
  05400	e0833002	 add         r3, r3, r2
  05404	e2833001	 add         r3, r3, #1
  05408	e5d33000	 ldrb        r3, [r3]
  0540c	e1a02003	 mov         r2, r3
  05410	e59d3048	 ldr         r3, [sp, #0x48]
  05414	e20330ff	 and         r3, r3, #0xFF
  05418	e1520003	 cmp         r2, r3
  0541c	0a000008	 beq         |$LN8@AllocateHo|
  05420	e59d1004	 ldr         r1, [sp, #4]
  05424	e3a03008	 mov         r3, #8
  05428	e0020391	 mul         r2, r1, r3
  0542c	e59d3014	 ldr         r3, [sp, #0x14]
  05430	e0833002	 add         r3, r3, r2
  05434	e2833001	 add         r3, r3, #1
  05438	e5d33000	 ldrb        r3, [r3]
  0543c	e3530005	 cmp         r3, #5
  05440	1a000038	 bne         |$LN9@AllocateHo|
  05444		 |$LN8@AllocateHo|
  05444	e59d1004	 ldr         r1, [sp, #4]
  05448	e3a03008	 mov         r3, #8
  0544c	e0020391	 mul         r2, r1, r3
  05450	e59d3014	 ldr         r3, [sp, #0x14]
  05454	e0833002	 add         r3, r3, r2
  05458	e2833006	 add         r3, r3, #6
  0545c	e1d320b0	 ldrh        r2, [r3]
  05460	e59d304c	 ldr         r3, [sp, #0x4C]
  05464	e1520003	 cmp         r2, r3
  05468	3a00002e	 bcc         |$LN9@AllocateHo|
  0546c	e59d1004	 ldr         r1, [sp, #4]
  05470	e3a03008	 mov         r3, #8
  05474	e0020391	 mul         r2, r1, r3
  05478	e59d3014	 ldr         r3, [sp, #0x14]
  0547c	e0833002	 add         r3, r3, r2
  05480	e5d33000	 ldrb        r3, [r3]
  05484	e3530000	 cmp         r3, #0
  05488	1a000026	 bne         |$LN9@AllocateHo|

; 2169 :                 {
; 2170 :                     if (EpAlloc >= 0)

  0548c	e59d300c	 ldr         r3, [sp, #0xC]
  05490	e3530000	 cmp         r3, #0
  05494	ba000013	 blt         |$LN7@AllocateHo|

; 2171 :                     {
; 2172 :                         // Only accept endpoints with smaller FIFO allocation
; 2173 :                         if (pConfig[ i ].fifoSize < pConfig[ EpAlloc ].fifoSize)

  05498	e59d1004	 ldr         r1, [sp, #4]
  0549c	e3a03008	 mov         r3, #8
  054a0	e0020391	 mul         r2, r1, r3
  054a4	e59d3014	 ldr         r3, [sp, #0x14]
  054a8	e0833002	 add         r3, r3, r2
  054ac	e2833006	 add         r3, r3, #6
  054b0	e1d330b0	 ldrh        r3, [r3]
  054b4	e1a00003	 mov         r0, r3
  054b8	e59d100c	 ldr         r1, [sp, #0xC]
  054bc	e3a03008	 mov         r3, #8
  054c0	e0020391	 mul         r2, r1, r3
  054c4	e59d3014	 ldr         r3, [sp, #0x14]
  054c8	e0833002	 add         r3, r3, r2
  054cc	e2833006	 add         r3, r3, #6
  054d0	e1d330b0	 ldrh        r3, [r3]
  054d4	e1500003	 cmp         r0, r3
  054d8	aa000001	 bge         |$LN6@AllocateHo|

; 2174 :                         {
; 2175 :                             EpAlloc = i;

  054dc	e59d3004	 ldr         r3, [sp, #4]
  054e0	e58d300c	 str         r3, [sp, #0xC]
  054e4		 |$LN6@AllocateHo|

; 2176 :                         }
; 2177 :                     }
; 2178 :                     else

  054e4	ea000001	 b           |$LN5@AllocateHo|
  054e8		 |$LN7@AllocateHo|

; 2179 :                     {
; 2180 :                         EpAlloc = i;

  054e8	e59d3004	 ldr         r3, [sp, #4]
  054ec	e58d300c	 str         r3, [sp, #0xC]
  054f0		 |$LN5@AllocateHo|

; 2181 :                     }
; 2182 : 
; 2183 :                     // Stop searching if endpoint is hardcoded for
; 2184 :                     // this transfer type and keep looking if
; 2185 :                     // configured for "any" transfer type
; 2186 :                     if (pConfig[ i ].epType == (UINT8)TransferType)

  054f0	e59d1004	 ldr         r1, [sp, #4]
  054f4	e3a03008	 mov         r3, #8
  054f8	e0020391	 mul         r2, r1, r3
  054fc	e59d3014	 ldr         r3, [sp, #0x14]
  05500	e0833002	 add         r3, r3, r2
  05504	e2833001	 add         r3, r3, #1
  05508	e5d33000	 ldrb        r3, [r3]
  0550c	e1a02003	 mov         r2, r3
  05510	e59d3048	 ldr         r3, [sp, #0x48]
  05514	e20330ff	 and         r3, r3, #0xFF
  05518	e1520003	 cmp         r2, r3
  0551c	1a000001	 bne         |$LN4@AllocateHo|

; 2187 :                     {
; 2188 :                         fStop = TRUE;

  05520	e3a03001	 mov         r3, #1
  05524	e58d3010	 str         r3, [sp, #0x10]
  05528		 |$LN4@AllocateHo|
  05528		 |$LN9@AllocateHo|

; 2189 :                     }
; 2190 :                 }
; 2191 :             }

  05528	eaffffa7	 b           |$LN11@AllocateHo|
  0552c		 |$LN10@AllocateHo|

; 2192 : 
; 2193 :             if (EpAlloc >= 0)

  0552c	e59d300c	 ldr         r3, [sp, #0xC]
  05530	e3530000	 cmp         r3, #0
  05534	ba000012	 blt         |$LN3@AllocateHo|

; 2194 :             {
; 2195 :                 pConfig[ EpAlloc ].refCount = 1;

  05538	e59d100c	 ldr         r1, [sp, #0xC]
  0553c	e3a03008	 mov         r3, #8
  05540	e0020391	 mul         r2, r1, r3
  05544	e59d3014	 ldr         r3, [sp, #0x14]
  05548	e0832002	 add         r2, r3, r2
  0554c	e3a03001	 mov         r3, #1
  05550	e5c23000	 strb        r3, [r2]

; 2196 :                 pConfig[ EpAlloc ].epTypeCurrent = (UINT8)TransferType;

  05554	e59d3048	 ldr         r3, [sp, #0x48]
  05558	e20300ff	 and         r0, r3, #0xFF
  0555c	e59d100c	 ldr         r1, [sp, #0xC]
  05560	e3a03008	 mov         r3, #8
  05564	e0020391	 mul         r2, r1, r3
  05568	e59d3014	 ldr         r3, [sp, #0x14]
  0556c	e0833002	 add         r3, r3, r2
  05570	e2833002	 add         r3, r3, #2
  05574	e5c30000	 strb        r0, [r3]

; 2197 :                 EpNum = EpAlloc + 1;

  05578	e59d300c	 ldr         r3, [sp, #0xC]
  0557c	e2833001	 add         r3, r3, #1
  05580	e58d3008	 str         r3, [sp, #8]
  05584		 |$LN3@AllocateHo|
  05584		 |$LN13@AllocateHo|

; 2198 :             }
; 2199 :         }
; 2200 : 
; 2201 :         if (EpNum > 0)

  05584	e59d3008	 ldr         r3, [sp, #8]
  05588	e3530000	 cmp         r3, #0
  0558c	da00001f	 ble         |$LN2@AllocateHo|

; 2202 :         {
; 2203 :             DEBUGMSG(ZONE_INIT, (TEXT("CHW::AllocateHostEndPoint: allocated EP %u, type %d, dir %s, FIFO %d\n"),
; 2204 :                 (INT32)EpNum,
; 2205 :                 TransferType,
; 2206 :                 IsDirectionIN ? L"IN" : L"OUT",
; 2207 :                 (INT32)pConfig[ EpNum - 1 ].fifoSize));

  05590	e59f3118	 ldr         r3, [pc, #0x118]
  05594	e5933440	 ldr         r3, [r3, #0x440]
  05598	e3130002	 tst         r3, #2
  0559c	0a000018	 beq         |$LN29@AllocateHo|
  055a0	e59d3050	 ldr         r3, [sp, #0x50]
  055a4	e3530000	 cmp         r3, #0
  055a8	0a000002	 beq         |$LN27@AllocateHo|
  055ac	e59f30f8	 ldr         r3, [pc, #0xF8]
  055b0	e58d3028	 str         r3, [sp, #0x28]
  055b4	ea000001	 b           |$LN28@AllocateHo|
  055b8		 |$LN27@AllocateHo|
  055b8	e59f30e8	 ldr         r3, [pc, #0xE8]
  055bc	e58d3028	 str         r3, [sp, #0x28]
  055c0		 |$LN28@AllocateHo|
  055c0	e59d3008	 ldr         r3, [sp, #8]
  055c4	e2431001	 sub         r1, r3, #1
  055c8	e3a03008	 mov         r3, #8
  055cc	e0020391	 mul         r2, r1, r3
  055d0	e59d3014	 ldr         r3, [sp, #0x14]
  055d4	e0833002	 add         r3, r3, r2
  055d8	e2833006	 add         r3, r3, #6
  055dc	e1d330b0	 ldrh        r3, [r3]
  055e0	e58d3000	 str         r3, [sp]
  055e4	e59d3028	 ldr         r3, [sp, #0x28]
  055e8	e59d2048	 ldr         r2, [sp, #0x48]
  055ec	e59d1008	 ldr         r1, [sp, #8]
  055f0	e59f00bc	 ldr         r0, [pc, #0xBC]
  055f4	eb000000	 bl          NKDbgPrintfW
  055f8	e3a03001	 mov         r3, #1
  055fc	e58d302c	 str         r3, [sp, #0x2C]
  05600	ea000001	 b           |$LN30@AllocateHo|
  05604		 |$LN29@AllocateHo|
  05604	e3a03000	 mov         r3, #0
  05608	e58d302c	 str         r3, [sp, #0x2C]
  0560c		 |$LN30@AllocateHo|

; 2208 :         }
; 2209 :         else

  0560c	ea000014	 b           |$LN1@AllocateHo|
  05610		 |$LN2@AllocateHo|

; 2210 :         {
; 2211 :             DEBUGMSG(ZONE_ERROR, (TEXT("CHW::AllocateHostEndPoint: failed to alloc EP, type %d, dir %s\n"),
; 2212 :                 TransferType,
; 2213 :                 IsDirectionIN ? L"IN" : L"OUT"));

  05610	e59f3098	 ldr         r3, [pc, #0x98]
  05614	e5933440	 ldr         r3, [r3, #0x440]
  05618	e3130901	 tst         r3, #1, 18
  0561c	0a00000e	 beq         |$LN33@AllocateHo|
  05620	e59d3050	 ldr         r3, [sp, #0x50]
  05624	e3530000	 cmp         r3, #0
  05628	0a000002	 beq         |$LN31@AllocateHo|
  0562c	e59f3078	 ldr         r3, [pc, #0x78]
  05630	e58d3030	 str         r3, [sp, #0x30]
  05634	ea000001	 b           |$LN32@AllocateHo|
  05638		 |$LN31@AllocateHo|
  05638	e59f3068	 ldr         r3, [pc, #0x68]
  0563c	e58d3030	 str         r3, [sp, #0x30]
  05640		 |$LN32@AllocateHo|
  05640	e59d2030	 ldr         r2, [sp, #0x30]
  05644	e59d1048	 ldr         r1, [sp, #0x48]
  05648	e59f0054	 ldr         r0, [pc, #0x54]
  0564c	eb000000	 bl          NKDbgPrintfW
  05650	e3a03001	 mov         r3, #1
  05654	e58d3034	 str         r3, [sp, #0x34]
  05658	ea000001	 b           |$LN34@AllocateHo|
  0565c		 |$LN33@AllocateHo|
  0565c	e3a03000	 mov         r3, #0
  05660	e58d3034	 str         r3, [sp, #0x34]
  05664		 |$LN34@AllocateHo|
  05664		 |$LN1@AllocateHo|
  05664		 |$LN19@AllocateHo|

; 2214 :         }
; 2215 :     }
; 2216 : 
; 2217 :     RETAILMSG(FALSE,(TEXT("EPnum=%x\n"),EpNum));

  05664	ea000005	 b           |$LN35@AllocateHo|
  05668	e59d1008	 ldr         r1, [sp, #8]
  0566c	e59f002c	 ldr         r0, [pc, #0x2C]
  05670	eb000000	 bl          NKDbgPrintfW
  05674	e3a03001	 mov         r3, #1
  05678	e58d3038	 str         r3, [sp, #0x38]
  0567c	ea000001	 b           |$LN36@AllocateHo|
  05680		 |$LN35@AllocateHo|
  05680	e3a03000	 mov         r3, #0
  05684	e58d3038	 str         r3, [sp, #0x38]
  05688		 |$LN36@AllocateHo|

; 2218 :     return EpNum;

  05688	e59d3008	 ldr         r3, [sp, #8]
  0568c	e58d301c	 str         r3, [sp, #0x1C]

; 2219 : }

  05690	e59d001c	 ldr         r0, [sp, #0x1C]
  05694	e28dd03c	 add         sp, sp, #0x3C
  05698	e89d6000	 ldmia       sp, {sp, lr}
  0569c	e12fff1e	 bx          lr
  056a0		 |$LN40@AllocateHo|
  056a0		 |$LN41@AllocateHo|
  056a0	00000000	 DCD         |??_C@_1BE@BPNDPJJD@?$AAE?$AAP?$AAn?$AAu?$AAm?$AA?$DN?$AA?$CF?$AAx?$AA?6?$AA?$AA@|
  056a4		 |$LN42@AllocateHo|
  056a4	00000000	 DCD         |??_C@_1IA@EDHBCCDA@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe@|
  056a8		 |$LN43@AllocateHo|
  056a8	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  056ac		 |$LN44@AllocateHo|
  056ac	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  056b0		 |$LN45@AllocateHo|
  056b0	00000000	 DCD         |dpCurSettings|
  056b4		 |$LN46@AllocateHo|
  056b4	00000000	 DCD         |??_C@_1IM@ELCACCKK@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@|
  056b8		 |$LN47@AllocateHo|
  056b8	00000000	 DCD         |??_C@_1JI@DKIHCKIL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc@|
  056bc		 |$M43613|

			 ENDP  ; |?AllocateHostEndPoint@CHW@@QAAHIKH@Z|, CHW::AllocateHostEndPoint

	EXPORT	|??_C@_1JA@KBPNELL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAF?$AAr?$AAe?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@JJDGNADD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAF?$AAr?$AAe?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg@| [ DATA ] ; `string'
	EXPORT	|?FreeHostEndPoint@CHW@@QAAXIH@Z|	; CHW::FreeHostEndPoint

  000d8			 AREA	 |.pdata|, PDATA
|$T43645| DCD	|$LN32@FreeHostEn|
	DCD	0x4000e404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@KBPNELL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAF?$AAr?$AAe?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "F", 0x0, "r"
	DCB	0x0, "e", 0x0, "e", 0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t"
	DCB	0x0, "E", 0x0, "n", 0x0, "d", 0x0, "P", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, "0", 0x0, ","
	DCB	0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " "
	DCB	0x0, "C", 0x0, "O", 0x0, "N", 0x0, "T", 0x0, "R", 0x0, "O"
	DCB	0x0, "L", 0x0, ",", 0x0, " ", 0x0, "d", 0x0, "i", 0x0, "r"
	DCB	0x0, " ", 0x0, "B", 0x0, "I", 0x0, "D", 0x0, "I", 0x0, "R"
	DCB	0x0, ",", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O"
	DCB	0x0, " ", 0x0, "6", 0x0, "4", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@JJDGNADD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAF?$AAr?$AAe?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "F", 0x0, "r"
	DCB	0x0, "e", 0x0, "e", 0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t"
	DCB	0x0, "E", 0x0, "n", 0x0, "d", 0x0, "P", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, ",", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "d", 0x0, "i", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, ",", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "F", 0x0, "O"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  056bc			 AREA	 |.text|, CODE, ARM

  056bc		 |?FreeHostEndPoint@CHW@@QAAXIH@Z| PROC	; CHW::FreeHostEndPoint

; 2222 : {

  056bc		 |$LN32@FreeHostEn|
  056bc	e1a0c00d	 mov         r12, sp
  056c0	e92d0007	 stmdb       sp!, {r0 - r2}
  056c4	e92d5000	 stmdb       sp!, {r12, lr}
  056c8	e24dd030	 sub         sp, sp, #0x30
  056cc		 |$M43642|

; 2223 :     // Use configurable static FIFO alloc
; 2224 : 
; 2225 :     DEBUGCHK(EndpointNum < MGC_MAX_USB_ENDS);

  056cc	e59d303c	 ldr         r3, [sp, #0x3C]
  056d0	e3530010	 cmp         r3, #0x10
  056d4	2a000002	 bcs         |$LN14@FreeHostEn|
  056d8	e3a03001	 mov         r3, #1
  056dc	e58d300c	 str         r3, [sp, #0xC]
  056e0	ea000008	 b           |$LN15@FreeHostEn|
  056e4		 |$LN14@FreeHostEn|
  056e4	e3a03b02	 mov         r3, #2, 22
  056e8	e38330b1	 orr         r3, r3, #0xB1
  056ec	e59f2348	 ldr         r2, [pc, #0x348]
  056f0	e59f133c	 ldr         r1, [pc, #0x33C]
  056f4	e59f033c	 ldr         r0, [pc, #0x33C]
  056f8	eb000000	 bl          NKDbgPrintfW
  056fc	e6000010	 __debugbreak_ce
  05700	e3a03000	 mov         r3, #0
  05704	e58d300c	 str         r3, [sp, #0xC]
  05708		 |$LN15@FreeHostEn|

; 2226 : 
; 2227 :     if ( (EndpointNum > 0) && (EndpointNum < MGC_MAX_USB_ENDS) )

  05708	e59d303c	 ldr         r3, [sp, #0x3C]
  0570c	e3530000	 cmp         r3, #0
  05710	9a0000b8	 bls         |$LN11@FreeHostEn|
  05714	e59d303c	 ldr         r3, [sp, #0x3C]
  05718	e3530010	 cmp         r3, #0x10
  0571c	2a0000b5	 bcs         |$LN11@FreeHostEn|

; 2228 :     {
; 2229 :         EP_CONFIG *pConfig = IsDirectionIN ? m_EpInConfig : m_EpOutConfig;

  05720	e59d3040	 ldr         r3, [sp, #0x40]
  05724	e3530000	 cmp         r3, #0
  05728	0a000003	 beq         |$LN16@FreeHostEn|
  0572c	e59d3038	 ldr         r3, [sp, #0x38]
  05730	e2833d09	 add         r3, r3, #9, 26
  05734	e58d3010	 str         r3, [sp, #0x10]
  05738	ea000002	 b           |$LN17@FreeHostEn|
  0573c		 |$LN16@FreeHostEn|
  0573c	e59d3038	 ldr         r3, [sp, #0x38]
  05740	e2833fae	 add         r3, r3, #0xAE, 30
  05744	e58d3010	 str         r3, [sp, #0x10]
  05748		 |$LN17@FreeHostEn|
  05748	e59d3010	 ldr         r3, [sp, #0x10]
  0574c	e58d3004	 str         r3, [sp, #4]

; 2230 :         EndpointNum --;

  05750	e59d303c	 ldr         r3, [sp, #0x3C]
  05754	e2433001	 sub         r3, r3, #1
  05758	e58d303c	 str         r3, [sp, #0x3C]

; 2231 : 
; 2232 :         DEBUGCHK(pConfig[ EndpointNum ].refCount > 0);

  0575c	e59d103c	 ldr         r1, [sp, #0x3C]
  05760	e3a03008	 mov         r3, #8
  05764	e0020391	 mul         r2, r1, r3
  05768	e59d3004	 ldr         r3, [sp, #4]
  0576c	e0833002	 add         r3, r3, r2
  05770	e5d33000	 ldrb        r3, [r3]
  05774	e3530000	 cmp         r3, #0
  05778	da000002	 ble         |$LN18@FreeHostEn|
  0577c	e3a03001	 mov         r3, #1
  05780	e58d3014	 str         r3, [sp, #0x14]
  05784	ea000008	 b           |$LN19@FreeHostEn|
  05788		 |$LN18@FreeHostEn|
  05788	e3a03b02	 mov         r3, #2, 22
  0578c	e38330b8	 orr         r3, r3, #0xB8
  05790	e59f22a4	 ldr         r2, [pc, #0x2A4]
  05794	e59f1298	 ldr         r1, [pc, #0x298]
  05798	e59f0298	 ldr         r0, [pc, #0x298]
  0579c	eb000000	 bl          NKDbgPrintfW
  057a0	e6000010	 __debugbreak_ce
  057a4	e3a03000	 mov         r3, #0
  057a8	e58d3014	 str         r3, [sp, #0x14]
  057ac		 |$LN19@FreeHostEn|

; 2233 : 
; 2234 :         DEBUGMSG(ZONE_INIT, (TEXT("CHW::FreeHostEndPoint: releasing EP %u, type %d, dir %s, FIFO %d\n"),
; 2235 :             (INT32)(EndpointNum + 1),
; 2236 :             (INT32)pConfig[ EndpointNum ].epTypeCurrent,
; 2237 :             IsDirectionIN ? L"IN" : L"OUT",
; 2238 :             (INT32)pConfig[ EndpointNum ].fifoSize));

  057ac	e59f3280	 ldr         r3, [pc, #0x280]
  057b0	e5933440	 ldr         r3, [r3, #0x440]
  057b4	e3130002	 tst         r3, #2
  057b8	0a00001e	 beq         |$LN22@FreeHostEn|
  057bc	e59d3040	 ldr         r3, [sp, #0x40]
  057c0	e3530000	 cmp         r3, #0
  057c4	0a000002	 beq         |$LN20@FreeHostEn|
  057c8	e59f3278	 ldr         r3, [pc, #0x278]
  057cc	e58d3018	 str         r3, [sp, #0x18]
  057d0	ea000001	 b           |$LN21@FreeHostEn|
  057d4		 |$LN20@FreeHostEn|
  057d4	e59f3268	 ldr         r3, [pc, #0x268]
  057d8	e58d3018	 str         r3, [sp, #0x18]
  057dc		 |$LN21@FreeHostEn|
  057dc	e59d103c	 ldr         r1, [sp, #0x3C]
  057e0	e3a03008	 mov         r3, #8
  057e4	e0020391	 mul         r2, r1, r3
  057e8	e59d3004	 ldr         r3, [sp, #4]
  057ec	e0833002	 add         r3, r3, r2
  057f0	e2833006	 add         r3, r3, #6
  057f4	e1d330b0	 ldrh        r3, [r3]
  057f8	e58d3000	 str         r3, [sp]
  057fc	e59d3018	 ldr         r3, [sp, #0x18]
  05800	e59d003c	 ldr         r0, [sp, #0x3C]
  05804	e3a02008	 mov         r2, #8
  05808	e0010290	 mul         r1, r0, r2
  0580c	e59d2004	 ldr         r2, [sp, #4]
  05810	e0822001	 add         r2, r2, r1
  05814	e2822002	 add         r2, r2, #2
  05818	e5d22000	 ldrb        r2, [r2]
  0581c	e59d103c	 ldr         r1, [sp, #0x3C]
  05820	e2811001	 add         r1, r1, #1
  05824	e59f0214	 ldr         r0, [pc, #0x214]
  05828	eb000000	 bl          NKDbgPrintfW
  0582c	e3a03001	 mov         r3, #1
  05830	e58d301c	 str         r3, [sp, #0x1C]
  05834	ea000001	 b           |$LN23@FreeHostEn|
  05838		 |$LN22@FreeHostEn|
  05838	e3a03000	 mov         r3, #0
  0583c	e58d301c	 str         r3, [sp, #0x1C]
  05840		 |$LN23@FreeHostEn|

; 2239 : 
; 2240 :         switch (pConfig[ EndpointNum ].epTypeCurrent)

  05840	e59d103c	 ldr         r1, [sp, #0x3C]
  05844	e3a03008	 mov         r3, #8
  05848	e0020391	 mul         r2, r1, r3
  0584c	e59d3004	 ldr         r3, [sp, #4]
  05850	e0833002	 add         r3, r3, r2
  05854	e2833002	 add         r3, r3, #2
  05858	e5d33000	 ldrb        r3, [r3]
  0585c	e58d3020	 str         r3, [sp, #0x20]
  05860	e59d3020	 ldr         r3, [sp, #0x20]
  05864	e3530002	 cmp         r3, #2
  05868	0a000006	 beq         |$LN8@FreeHostEn|
  0586c	e59d3020	 ldr         r3, [sp, #0x20]
  05870	e3530002	 cmp         r3, #2
  05874	da000051	 ble         |$LN2@FreeHostEn|
  05878	e59d3020	 ldr         r3, [sp, #0x20]
  0587c	e3530004	 cmp         r3, #4
  05880	da000028	 ble         |$LN5@FreeHostEn|
  05884	ea00004d	 b           |$LN2@FreeHostEn|
  05888		 |$LN8@FreeHostEn|

; 2241 :         {
; 2242 :         case TYPE_BULK:
; 2243 : 
; 2244 :             if (pConfig[ EndpointNum ].fSharedMode)

  05888	e59d103c	 ldr         r1, [sp, #0x3C]
  0588c	e3a03008	 mov         r3, #8
  05890	e0020391	 mul         r2, r1, r3
  05894	e59d3004	 ldr         r3, [sp, #4]
  05898	e0833002	 add         r3, r3, r2
  0589c	e2833004	 add         r3, r3, #4
  058a0	e5d33000	 ldrb        r3, [r3]
  058a4	e3530000	 cmp         r3, #0
  058a8	0a00001e	 beq         |$LN7@FreeHostEn|

; 2245 :             {
; 2246 :                 // Sharing mode enabled
; 2247 :                 pConfig[ EndpointNum ].refCount --;

  058ac	e59d103c	 ldr         r1, [sp, #0x3C]
  058b0	e3a03008	 mov         r3, #8
  058b4	e0020391	 mul         r2, r1, r3
  058b8	e59d3004	 ldr         r3, [sp, #4]
  058bc	e0833002	 add         r3, r3, r2
  058c0	e5d33000	 ldrb        r3, [r3]
  058c4	e2433001	 sub         r3, r3, #1
  058c8	e20300ff	 and         r0, r3, #0xFF
  058cc	e59d103c	 ldr         r1, [sp, #0x3C]
  058d0	e3a03008	 mov         r3, #8
  058d4	e0020391	 mul         r2, r1, r3
  058d8	e59d3004	 ldr         r3, [sp, #4]
  058dc	e0833002	 add         r3, r3, r2
  058e0	e5c30000	 strb        r0, [r3]

; 2248 : 
; 2249 :                 if (pConfig[ EndpointNum ].refCount == 0)

  058e4	e59d103c	 ldr         r1, [sp, #0x3C]
  058e8	e3a03008	 mov         r3, #8
  058ec	e0020391	 mul         r2, r1, r3
  058f0	e59d3004	 ldr         r3, [sp, #4]
  058f4	e0833002	 add         r3, r3, r2
  058f8	e5d33000	 ldrb        r3, [r3]
  058fc	e3530000	 cmp         r3, #0
  05900	1a000007	 bne         |$LN6@FreeHostEn|

; 2250 :                 {
; 2251 :                     pConfig[ EndpointNum ].epTypeCurrent = TYPE_UNKNOWN;

  05904	e59d103c	 ldr         r1, [sp, #0x3C]
  05908	e3a03008	 mov         r3, #8
  0590c	e0020391	 mul         r2, r1, r3
  05910	e59d3004	 ldr         r3, [sp, #4]
  05914	e0833002	 add         r3, r3, r2
  05918	e2832002	 add         r2, r3, #2
  0591c	e3a03000	 mov         r3, #0
  05920	e5c23000	 strb        r3, [r2]
  05924		 |$LN6@FreeHostEn|

; 2252 :                 }
; 2253 : 
; 2254 :                 break;

  05924	ea000032	 b           |$LN9@FreeHostEn|
  05928		 |$LN7@FreeHostEn|
  05928		 |$LN5@FreeHostEn|

; 2255 :             }
; 2256 : 
; 2257 :             // Do not break here, just fall through
; 2258 :             __fallthrough;
; 2259 : 
; 2260 :         case TYPE_ISOCHRONOUS:
; 2261 :         case TYPE_INTERRUPT:
; 2262 : 
; 2263 :             if (pConfig[ EndpointNum ].refCount == 1)

  05928	e59d103c	 ldr         r1, [sp, #0x3C]
  0592c	e3a03008	 mov         r3, #8
  05930	e0020391	 mul         r2, r1, r3
  05934	e59d3004	 ldr         r3, [sp, #4]
  05938	e0833002	 add         r3, r3, r2
  0593c	e5d33000	 ldrb        r3, [r3]
  05940	e3530001	 cmp         r3, #1
  05944	1a000007	 bne         |$LN4@FreeHostEn|

; 2264 :             {
; 2265 :                 pConfig[ EndpointNum ].refCount = 0;

  05948	e59d103c	 ldr         r1, [sp, #0x3C]
  0594c	e3a03008	 mov         r3, #8
  05950	e0020391	 mul         r2, r1, r3
  05954	e59d3004	 ldr         r3, [sp, #4]
  05958	e0832002	 add         r2, r3, r2
  0595c	e3a03000	 mov         r3, #0
  05960	e5c23000	 strb        r3, [r2]

; 2266 :             }
; 2267 :             else

  05964	ea00000c	 b           |$LN3@FreeHostEn|
  05968		 |$LN4@FreeHostEn|

; 2268 :             {
; 2269 :                 DEBUGCHK(FALSE);

  05968	ea000002	 b           |$LN24@FreeHostEn|
  0596c	e3a03001	 mov         r3, #1
  05970	e58d3024	 str         r3, [sp, #0x24]
  05974	ea000008	 b           |$LN25@FreeHostEn|
  05978		 |$LN24@FreeHostEn|
  05978	e3a03b02	 mov         r3, #2, 22
  0597c	e38330dd	 orr         r3, r3, #0xDD
  05980	e59f20b4	 ldr         r2, [pc, #0xB4]
  05984	e59f10a8	 ldr         r1, [pc, #0xA8]
  05988	e59f00a8	 ldr         r0, [pc, #0xA8]
  0598c	eb000000	 bl          NKDbgPrintfW
  05990	e6000010	 __debugbreak_ce
  05994	e3a03000	 mov         r3, #0
  05998	e58d3024	 str         r3, [sp, #0x24]
  0599c		 |$LN25@FreeHostEn|
  0599c		 |$LN3@FreeHostEn|

; 2270 :             }
; 2271 : 
; 2272 :             pConfig[ EndpointNum ].epTypeCurrent = TYPE_UNKNOWN;

  0599c	e59d103c	 ldr         r1, [sp, #0x3C]
  059a0	e3a03008	 mov         r3, #8
  059a4	e0020391	 mul         r2, r1, r3
  059a8	e59d3004	 ldr         r3, [sp, #4]
  059ac	e0833002	 add         r3, r3, r2
  059b0	e2832002	 add         r2, r3, #2
  059b4	e3a03000	 mov         r3, #0
  059b8	e5c23000	 strb        r3, [r2]

; 2273 : 
; 2274 :             break;

  059bc	ea00000c	 b           |$LN9@FreeHostEn|
  059c0		 |$LN2@FreeHostEn|

; 2275 : 
; 2276 :         default:
; 2277 : 
; 2278 :             DEBUGCHK(FALSE);

  059c0	ea000002	 b           |$LN26@FreeHostEn|
  059c4	e3a03001	 mov         r3, #1
  059c8	e58d3028	 str         r3, [sp, #0x28]
  059cc	ea000008	 b           |$LN27@FreeHostEn|
  059d0		 |$LN26@FreeHostEn|
  059d0	e3a03b02	 mov         r3, #2, 22
  059d4	e38330e6	 orr         r3, r3, #0xE6
  059d8	e59f205c	 ldr         r2, [pc, #0x5C]
  059dc	e59f1050	 ldr         r1, [pc, #0x50]
  059e0	e59f0050	 ldr         r0, [pc, #0x50]
  059e4	eb000000	 bl          NKDbgPrintfW
  059e8	e6000010	 __debugbreak_ce
  059ec	e3a03000	 mov         r3, #0
  059f0	e58d3028	 str         r3, [sp, #0x28]
  059f4		 |$LN27@FreeHostEn|
  059f4		 |$LN9@FreeHostEn|

; 2279 :         }
; 2280 :     }
; 2281 :     else

  059f4	ea00000a	 b           |$LN1@FreeHostEn|
  059f8		 |$LN11@FreeHostEn|

; 2282 :     {
; 2283 :         DEBUGMSG(ZONE_INIT, (TEXT("CHW::FreeHostEndPoint: releasing EP0, type CONTROL, dir BIDIR, FIFO 64\n")));

  059f8	e59f3034	 ldr         r3, [pc, #0x34]
  059fc	e5933440	 ldr         r3, [r3, #0x440]
  05a00	e3130002	 tst         r3, #2
  05a04	0a000004	 beq         |$LN28@FreeHostEn|
  05a08	e59f0020	 ldr         r0, [pc, #0x20]
  05a0c	eb000000	 bl          NKDbgPrintfW
  05a10	e3a03001	 mov         r3, #1
  05a14	e58d302c	 str         r3, [sp, #0x2C]
  05a18	ea000001	 b           |$LN29@FreeHostEn|
  05a1c		 |$LN28@FreeHostEn|
  05a1c	e3a03000	 mov         r3, #0
  05a20	e58d302c	 str         r3, [sp, #0x2C]
  05a24		 |$LN29@FreeHostEn|
  05a24		 |$LN1@FreeHostEn|

; 2284 :     }
; 2285 : }

  05a24	e28dd030	 add         sp, sp, #0x30
  05a28	e89d6000	 ldmia       sp, {sp, lr}
  05a2c	e12fff1e	 bx          lr
  05a30		 |$LN33@FreeHostEn|
  05a30		 |$LN34@FreeHostEn|
  05a30	00000000	 DCD         |??_C@_1JA@KBPNELL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAF?$AAr?$AAe?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg@|
  05a34		 |$LN35@FreeHostEn|
  05a34	00000000	 DCD         |dpCurSettings|
  05a38		 |$LN36@FreeHostEn|
  05a38	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  05a3c		 |$LN37@FreeHostEn|
  05a3c	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  05a40		 |$LN38@FreeHostEn|
  05a40	00000000	 DCD         |??_C@_1IE@JJDGNADD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAF?$AAr?$AAe?$AAe?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAP?$AAo?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAr?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg@|
  05a44		 |$LN39@FreeHostEn|
  05a44	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  05a48		 |$LN40@FreeHostEn|
  05a48	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  05a4c		 |$M43643|

			 ENDP  ; |?FreeHostEndPoint@CHW@@QAAXIH@Z|, CHW::FreeHostEndPoint

	EXPORT	|?StopHostEndpoint@CHW@@QAAXK@Z|	; CHW::StopHostEndpoint

  000e0			 AREA	 |.pdata|, PDATA
|$T43658| DCD	|$LN9@StopHostEn|
	DCD	0x40005a04
; Function compile flags: /Odtp

  05a4c			 AREA	 |.text|, CODE, ARM

  05a4c		 |?StopHostEndpoint@CHW@@QAAXK@Z| PROC	; CHW::StopHostEndpoint

; 2288 : {

  05a4c		 |$LN9@StopHostEn|
  05a4c	e1a0c00d	 mov         r12, sp
  05a50	e92d0003	 stmdb       sp!, {r0, r1}
  05a54	e92d5000	 stmdb       sp!, {r12, lr}
  05a58	e24dd008	 sub         sp, sp, #8
  05a5c		 |$M43655|

; 2289 :     UINT16 _HOST_CSR0, _HOST_TXCSR, _HOST_RXCSR;
; 2290 : 
; 2291 :     if(HostEndpointNum)

  05a5c	e59d3014	 ldr         r3, [sp, #0x14]
  05a60	e3530000	 cmp         r3, #0
  05a64	0a00003c	 beq         |$LN4@StopHostEn|

; 2292 :     {
; 2293 :         _HOST_RXCSR = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(HostEndpointNum, MGC_O_HDRC_RXCSR)));

  05a68	e59d3010	 ldr         r3, [sp, #0x10]
  05a6c	e2831f52	 add         r1, r3, #0x52, 30
  05a70	e59d2014	 ldr         r2, [sp, #0x14]
  05a74	e3a03010	 mov         r3, #0x10
  05a78	e0030392	 mul         r3, r2, r3
  05a7c	e2833c05	 add         r3, r3, #5, 24
  05a80	e2832006	 add         r2, r3, #6
  05a84	e5913000	 ldr         r3, [r1]
  05a88	e0833002	 add         r3, r3, r2
  05a8c	e1d330b0	 ldrh        r3, [r3]
  05a90	e1cd30b2	 strh        r3, [sp, #2]

; 2294 :         if(_HOST_RXCSR & MGC_M_RXCSR_H_REQPKT)

  05a94	e1dd30b2	 ldrh        r3, [sp, #2]
  05a98	e3130020	 tst         r3, #0x20
  05a9c	0a00000f	 beq         |$LN3@StopHostEn|

; 2295 :             WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(HostEndpointNum, MGC_O_HDRC_RXCSR)), _HOST_RXCSR&(~MGC_M_RXCSR_H_REQPKT));

  05aa0	e1dd30b2	 ldrh        r3, [sp, #2]
  05aa4	e1a02003	 mov         r2, r3
  05aa8	e3e03020	 mvn         r3, #0x20
  05aac	e0023003	 and         r3, r2, r3
  05ab0	e1a00803	 mov         r0, r3, lsl #16
  05ab4	e1a00820	 mov         r0, r0, lsr #16
  05ab8	e59d3010	 ldr         r3, [sp, #0x10]
  05abc	e2831f52	 add         r1, r3, #0x52, 30
  05ac0	e59d2014	 ldr         r2, [sp, #0x14]
  05ac4	e3a03010	 mov         r3, #0x10
  05ac8	e0030392	 mul         r3, r2, r3
  05acc	e2833c05	 add         r3, r3, #5, 24
  05ad0	e2832006	 add         r2, r3, #6
  05ad4	e5913000	 ldr         r3, [r1]
  05ad8	e0833002	 add         r3, r3, r2
  05adc	e1c300b0	 strh        r0, [r3]
  05ae0		 |$LN3@StopHostEn|

; 2296 : 
; 2297 :         _HOST_TXCSR = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(HostEndpointNum, MGC_O_HDRC_TXCSR)));

  05ae0	e59d3010	 ldr         r3, [sp, #0x10]
  05ae4	e2831f52	 add         r1, r3, #0x52, 30
  05ae8	e59d2014	 ldr         r2, [sp, #0x14]
  05aec	e3a03010	 mov         r3, #0x10
  05af0	e0030392	 mul         r3, r2, r3
  05af4	e2833c05	 add         r3, r3, #5, 24
  05af8	e2832002	 add         r2, r3, #2
  05afc	e5913000	 ldr         r3, [r1]
  05b00	e0833002	 add         r3, r3, r2
  05b04	e1d330b0	 ldrh        r3, [r3]
  05b08	e1cd30b0	 strh        r3, [sp]

; 2298 : 
; 2299 :         if(_HOST_TXCSR & MGC_M_TXCSR_TXPKTRDY)

  05b0c	e1dd30b0	 ldrh        r3, [sp]
  05b10	e3130001	 tst         r3, #1
  05b14	0a00000f	 beq         |$LN2@StopHostEn|

; 2300 :             WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(HostEndpointNum, MGC_O_HDRC_TXCSR)), _HOST_TXCSR&(~MGC_M_TXCSR_TXPKTRDY));

  05b18	e1dd30b0	 ldrh        r3, [sp]
  05b1c	e1a02003	 mov         r2, r3
  05b20	e3e03001	 mvn         r3, #1
  05b24	e0023003	 and         r3, r2, r3
  05b28	e1a00803	 mov         r0, r3, lsl #16
  05b2c	e1a00820	 mov         r0, r0, lsr #16
  05b30	e59d3010	 ldr         r3, [sp, #0x10]
  05b34	e2831f52	 add         r1, r3, #0x52, 30
  05b38	e59d2014	 ldr         r2, [sp, #0x14]
  05b3c	e3a03010	 mov         r3, #0x10
  05b40	e0030392	 mul         r3, r2, r3
  05b44	e2833c05	 add         r3, r3, #5, 24
  05b48	e2832002	 add         r2, r3, #2
  05b4c	e5913000	 ldr         r3, [r1]
  05b50	e0833002	 add         r3, r3, r2
  05b54	e1c300b0	 strh        r0, [r3]
  05b58		 |$LN2@StopHostEn|

; 2301 :     }
; 2302 :     else

  05b58	ea000012	 b           |$LN1@StopHostEn|
  05b5c		 |$LN4@StopHostEn|

; 2303 :     {
; 2304 :         _HOST_CSR0 = READ_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)));

  05b5c	e59d3010	 ldr         r3, [sp, #0x10]
  05b60	e2833f52	 add         r3, r3, #0x52, 30
  05b64	e5933000	 ldr         r3, [r3]
  05b68	e2833c05	 add         r3, r3, #5, 24
  05b6c	e2833002	 add         r3, r3, #2
  05b70	e1d330b0	 ldrh        r3, [r3]
  05b74	e1cd30b4	 strh        r3, [sp, #4]

; 2305 :         WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)), _HOST_CSR0&(~(MGC_M_CSR0_TXPKTRDY|MGC_M_CSR0_H_REQPKT)));

  05b78	e1dd30b4	 ldrh        r3, [sp, #4]
  05b7c	e1a02003	 mov         r2, r3
  05b80	e3e03022	 mvn         r3, #0x22
  05b84	e0023003	 and         r3, r2, r3
  05b88	e1a02803	 mov         r2, r3, lsl #16
  05b8c	e1a02822	 mov         r2, r2, lsr #16
  05b90	e59d3010	 ldr         r3, [sp, #0x10]
  05b94	e2833f52	 add         r3, r3, #0x52, 30
  05b98	e5933000	 ldr         r3, [r3]
  05b9c	e2833c05	 add         r3, r3, #5, 24
  05ba0	e2833002	 add         r3, r3, #2
  05ba4	e1c320b0	 strh        r2, [r3]
  05ba8		 |$LN1@StopHostEn|

; 2306 :     }
; 2307 : }

  05ba8	e28dd008	 add         sp, sp, #8
  05bac	e89d6000	 ldmia       sp, {sp, lr}
  05bb0	e12fff1e	 bx          lr
  05bb4		 |$M43656|

			 ENDP  ; |?StopHostEndpoint@CHW@@QAAXK@Z|, CHW::StopHostEndpoint

	EXPORT	|??_C@_1FO@DOMKDNLJ@?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|?ProgramHostEndpoint@CHW@@QAAXIPAX@Z|	; CHW::ProgramHostEndpoint

  000e8			 AREA	 |.pdata|, PDATA
|$T43683| DCD	|$LN39@ProgramHos|
	DCD	0x40016d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@DOMKDNLJ@?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$CF@| DCB "P"
	DCB	0x0, "r", 0x0, "o", 0x0, "g", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "H", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "E", 0x0, "n"
	DCB	0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, " ", 0x0, "T", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "D", 0x0, "i", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  05bb4			 AREA	 |.text|, CODE, ARM

  05bb4		 |?ProgramHostEndpoint@CHW@@QAAXIPAX@Z| PROC ; CHW::ProgramHostEndpoint

; 2310 : void CHW::ProgramHostEndpoint(UINT32 TransferType, void *pTemp){

  05bb4		 |$LN39@ProgramHos|
  05bb4	e1a0c00d	 mov         r12, sp
  05bb8	e92d0007	 stmdb       sp!, {r0 - r2}
  05bbc	e92d5000	 stmdb       sp!, {r12, lr}
  05bc0	e24dd02c	 sub         sp, sp, #0x2C
  05bc4		 |$M43680|

; 2311 :     USBED *pED = (USBED *)pTemp;

  05bc4	e59d303c	 ldr         r3, [sp, #0x3C]
  05bc8	e58d3000	 str         r3, [sp]

; 2312 :     UINT32 EpNum = pED->bHostEndPointNum;

  05bcc	e59d3000	 ldr         r3, [sp]
  05bd0	e2833010	 add         r3, r3, #0x10
  05bd4	e5d33000	 ldrb        r3, [r3]
  05bd8	e58d3004	 str         r3, [sp, #4]

; 2313 : 
; 2314 :     if(EpNum < MGC_MAX_USB_ENDS){

  05bdc	e59d3004	 ldr         r3, [sp, #4]
  05be0	e3530010	 cmp         r3, #0x10
  05be4	2a000149	 bcs         |$LN14@ProgramHos|

; 2315 : 
; 2316 :         switch (TransferType)

  05be8	e59d3038	 ldr         r3, [sp, #0x38]
  05bec	e58d300c	 str         r3, [sp, #0xC]
  05bf0	e59d300c	 ldr         r3, [sp, #0xC]
  05bf4	e2433001	 sub         r3, r3, #1
  05bf8	e58d300c	 str         r3, [sp, #0xC]
  05bfc	e59d300c	 ldr         r3, [sp, #0xC]
  05c00	e3530003	 cmp         r3, #3
  05c04	8a000104	 bhi         |$LN5@ProgramHos|
  05c08	e59d200c	 ldr         r2, [sp, #0xC]
  05c0c	e1a03102	 mov         r3, r2, lsl #2
  05c10	e083300f	 add         r3, r3, pc
  05c14	e5933004	 ldr         r3, [r3, #4]
  05c18	e08ff003	 add         pc, pc, r3
  05c1c		 |$LN32@ProgramHos|
  05c1c		 |$LN31@ProgramHos|
  05c1c		 |$LN33@ProgramHos|
  05c1c	0000000c	 DCD         0xc
  05c20		 |$LN34@ProgramHos|
  05c20	0000000c	 DCD         0xc
  05c24		 |$LN35@ProgramHos|
  05c24	00000020	 DCD         0x20
  05c28		 |$LN36@ProgramHos|
  05c28	00000020	 DCD         0x20
  05c2c		 |$LN11@ProgramHos|

; 2317 :         {
; 2318 :         case TYPE_CONTROL:
; 2319 :         case TYPE_BULK:
; 2320 : 
; 2321 :             pED->epType = (PIPE_TYPE)TransferType;

  05c2c	e59d3000	 ldr         r3, [sp]
  05c30	e2832020	 add         r2, r3, #0x20
  05c34	e59d3038	 ldr         r3, [sp, #0x38]
  05c38	e5823000	 str         r3, [r2]

; 2322 :             // Note: Bulk and control are programmed in InitializeTransaction()
; 2323 :             break;

  05c3c	ea000107	 b           |$LN12@ProgramHos|
  05c40		 |$LN10@ProgramHos|

; 2324 : 
; 2325 :         case TYPE_INTERRUPT:
; 2326 :         case TYPE_ISOCHRONOUS:
; 2327 : 
; 2328 :             {
; 2329 :                 UINT32 nXType = (TransferType == TYPE_INTERRUPT) ? 0x03 : 0x01;

  05c40	e59d3038	 ldr         r3, [sp, #0x38]
  05c44	e3530003	 cmp         r3, #3
  05c48	1a000002	 bne         |$LN17@ProgramHos|
  05c4c	e3a03003	 mov         r3, #3
  05c50	e58d3010	 str         r3, [sp, #0x10]
  05c54	ea000001	 b           |$LN18@ProgramHos|
  05c58		 |$LN17@ProgramHos|
  05c58	e3a03001	 mov         r3, #1
  05c5c	e58d3010	 str         r3, [sp, #0x10]
  05c60		 |$LN18@ProgramHos|
  05c60	e59d3010	 ldr         r3, [sp, #0x10]
  05c64	e58d3008	 str         r3, [sp, #8]

; 2330 : 
; 2331 :                 pED->epType = (PIPE_TYPE)TransferType;

  05c68	e59d3000	 ldr         r3, [sp]
  05c6c	e2832020	 add         r2, r3, #0x20
  05c70	e59d3038	 ldr         r3, [sp, #0x38]
  05c74	e5823000	 str         r3, [r2]

; 2332 : 
; 2333 :                 WRITE_PORT_UCHAR( (m_portBase + USB_INDEX_REG_OFFSET), (BYTE)EpNum);

  05c78	e59d3004	 ldr         r3, [sp, #4]
  05c7c	e20320ff	 and         r2, r3, #0xFF
  05c80	e59d3034	 ldr         r3, [sp, #0x34]
  05c84	e2833f52	 add         r3, r3, #0x52, 30
  05c88	e5933000	 ldr         r3, [r3]
  05c8c	e2833b01	 add         r3, r3, #1, 22
  05c90	e283300e	 add         r3, r3, #0xE
  05c94	e5c32000	 strb        r2, [r3]

; 2334 : 
; 2335 :                 if(pED->bfDirection == TD_IN_PID)

  05c98	e59d3000	 ldr         r3, [sp]
  05c9c	e2833006	 add         r3, r3, #6
  05ca0	e5d33000	 ldrb        r3, [r3]
  05ca4	e3530002	 cmp         r3, #2
  05ca8	1a000035	 bne         |$LN9@ProgramHos|

; 2336 :                 {
; 2337 :                     WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(EpNum, MGC_O_HDRC_RXTYPE)),
; 2338 :                         (BYTE)((pED->bfIsLowSpeed?(0x3<<6):FULL_HIGH_SPEED)|(nXType<<4)|(pED->bfEndpointNumber&0xf)));

  05cac	e59d3000	 ldr         r3, [sp]
  05cb0	e2833008	 add         r3, r3, #8
  05cb4	e5d33000	 ldrb        r3, [r3]
  05cb8	e3530000	 cmp         r3, #0
  05cbc	0a000002	 beq         |$LN21@ProgramHos|
  05cc0	e3a030c0	 mov         r3, #0xC0
  05cc4	e58d3014	 str         r3, [sp, #0x14]
  05cc8	ea00000b	 b           |$LN22@ProgramHos|
  05ccc		 |$LN21@ProgramHos|
  05ccc	e59d3000	 ldr         r3, [sp]
  05cd0	e2833009	 add         r3, r3, #9
  05cd4	e5d33000	 ldrb        r3, [r3]
  05cd8	e3530000	 cmp         r3, #0
  05cdc	0a000002	 beq         |$LN19@ProgramHos|
  05ce0	e3a03040	 mov         r3, #0x40
  05ce4	e58d3018	 str         r3, [sp, #0x18]
  05ce8	ea000001	 b           |$LN20@ProgramHos|
  05cec		 |$LN19@ProgramHos|
  05cec	e3a03080	 mov         r3, #0x80
  05cf0	e58d3018	 str         r3, [sp, #0x18]
  05cf4		 |$LN20@ProgramHos|
  05cf4	e59d3018	 ldr         r3, [sp, #0x18]
  05cf8	e58d3014	 str         r3, [sp, #0x14]
  05cfc		 |$LN22@ProgramHos|
  05cfc	e59d3008	 ldr         r3, [sp, #8]
  05d00	e1a02203	 mov         r2, r3, lsl #4
  05d04	e59d3014	 ldr         r3, [sp, #0x14]
  05d08	e1832002	 orr         r2, r3, r2
  05d0c	e59d3000	 ldr         r3, [sp]
  05d10	e2833005	 add         r3, r3, #5
  05d14	e5d33000	 ldrb        r3, [r3]
  05d18	e203300f	 and         r3, r3, #0xF
  05d1c	e1823003	 orr         r3, r2, r3
  05d20	e20300ff	 and         r0, r3, #0xFF
  05d24	e59d3034	 ldr         r3, [sp, #0x34]
  05d28	e2831f52	 add         r1, r3, #0x52, 30
  05d2c	e59d2004	 ldr         r2, [sp, #4]
  05d30	e3a03010	 mov         r3, #0x10
  05d34	e0030392	 mul         r3, r2, r3
  05d38	e2833c05	 add         r3, r3, #5, 24
  05d3c	e283200c	 add         r2, r3, #0xC
  05d40	e5913000	 ldr         r3, [r1]
  05d44	e0833002	 add         r3, r3, r2
  05d48	e5c30000	 strb        r0, [r3]

; 2339 :                     WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(EpNum, MGC_O_HDRC_RXINTERVAL)),
; 2340 :                         pED->bInterval);

  05d4c	e59d3000	 ldr         r3, [sp]
  05d50	e2830011	 add         r0, r3, #0x11
  05d54	e59d3034	 ldr         r3, [sp, #0x34]
  05d58	e2831f52	 add         r1, r3, #0x52, 30
  05d5c	e59d2004	 ldr         r2, [sp, #4]
  05d60	e3a03010	 mov         r3, #0x10
  05d64	e0030392	 mul         r3, r2, r3
  05d68	e2833c05	 add         r3, r3, #5, 24
  05d6c	e283200d	 add         r2, r3, #0xD
  05d70	e5913000	 ldr         r3, [r1]
  05d74	e0832002	 add         r2, r3, r2
  05d78	e5d03000	 ldrb        r3, [r0]
  05d7c	e5c23000	 strb        r3, [r2]

; 2341 :                 }
; 2342 :                 else

  05d80	ea000034	 b           |$LN8@ProgramHos|
  05d84		 |$LN9@ProgramHos|

; 2343 :                 {
; 2344 :                     WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(EpNum, MGC_O_HDRC_TXTYPE)),
; 2345 :                         (BYTE)((pED->bfIsLowSpeed?(0x3<<6):FULL_HIGH_SPEED)|(nXType<<4)|(pED->bfEndpointNumber&0xf)));

  05d84	e59d3000	 ldr         r3, [sp]
  05d88	e2833008	 add         r3, r3, #8
  05d8c	e5d33000	 ldrb        r3, [r3]
  05d90	e3530000	 cmp         r3, #0
  05d94	0a000002	 beq         |$LN25@ProgramHos|
  05d98	e3a030c0	 mov         r3, #0xC0
  05d9c	e58d301c	 str         r3, [sp, #0x1C]
  05da0	ea00000b	 b           |$LN26@ProgramHos|
  05da4		 |$LN25@ProgramHos|
  05da4	e59d3000	 ldr         r3, [sp]
  05da8	e2833009	 add         r3, r3, #9
  05dac	e5d33000	 ldrb        r3, [r3]
  05db0	e3530000	 cmp         r3, #0
  05db4	0a000002	 beq         |$LN23@ProgramHos|
  05db8	e3a03040	 mov         r3, #0x40
  05dbc	e58d3020	 str         r3, [sp, #0x20]
  05dc0	ea000001	 b           |$LN24@ProgramHos|
  05dc4		 |$LN23@ProgramHos|
  05dc4	e3a03080	 mov         r3, #0x80
  05dc8	e58d3020	 str         r3, [sp, #0x20]
  05dcc		 |$LN24@ProgramHos|
  05dcc	e59d3020	 ldr         r3, [sp, #0x20]
  05dd0	e58d301c	 str         r3, [sp, #0x1C]
  05dd4		 |$LN26@ProgramHos|
  05dd4	e59d3008	 ldr         r3, [sp, #8]
  05dd8	e1a02203	 mov         r2, r3, lsl #4
  05ddc	e59d301c	 ldr         r3, [sp, #0x1C]
  05de0	e1832002	 orr         r2, r3, r2
  05de4	e59d3000	 ldr         r3, [sp]
  05de8	e2833005	 add         r3, r3, #5
  05dec	e5d33000	 ldrb        r3, [r3]
  05df0	e203300f	 and         r3, r3, #0xF
  05df4	e1823003	 orr         r3, r2, r3
  05df8	e20300ff	 and         r0, r3, #0xFF
  05dfc	e59d3034	 ldr         r3, [sp, #0x34]
  05e00	e2831f52	 add         r1, r3, #0x52, 30
  05e04	e59d2004	 ldr         r2, [sp, #4]
  05e08	e3a03010	 mov         r3, #0x10
  05e0c	e0030392	 mul         r3, r2, r3
  05e10	e2833c05	 add         r3, r3, #5, 24
  05e14	e283200a	 add         r2, r3, #0xA
  05e18	e5913000	 ldr         r3, [r1]
  05e1c	e0833002	 add         r3, r3, r2
  05e20	e5c30000	 strb        r0, [r3]

; 2346 :                     WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(EpNum, MGC_O_HDRC_TXINTERVAL)),
; 2347 :                         pED->bInterval);

  05e24	e59d3000	 ldr         r3, [sp]
  05e28	e2830011	 add         r0, r3, #0x11
  05e2c	e59d3034	 ldr         r3, [sp, #0x34]
  05e30	e2831f52	 add         r1, r3, #0x52, 30
  05e34	e59d2004	 ldr         r2, [sp, #4]
  05e38	e3a03010	 mov         r3, #0x10
  05e3c	e0030392	 mul         r3, r2, r3
  05e40	e2833c05	 add         r3, r3, #5, 24
  05e44	e283200b	 add         r2, r3, #0xB
  05e48	e5913000	 ldr         r3, [r1]
  05e4c	e0832002	 add         r2, r3, r2
  05e50	e5d03000	 ldrb        r3, [r0]
  05e54	e5c23000	 strb        r3, [r2]
  05e58		 |$LN8@ProgramHos|

; 2348 :                 }
; 2349 : 
; 2350 :                 if (m_fHighSpeed && !pED->bfIsHighSpeed && pED->bfHubAddress)

  05e58	e59d3034	 ldr         r3, [sp, #0x34]
  05e5c	e2833f8a	 add         r3, r3, #0x8A, 30
  05e60	e5933000	 ldr         r3, [r3]
  05e64	e3530000	 cmp         r3, #0
  05e68	0a00003e	 beq         |$LN7@ProgramHos|
  05e6c	e59d3000	 ldr         r3, [sp]
  05e70	e2833009	 add         r3, r3, #9
  05e74	e5d33000	 ldrb        r3, [r3]
  05e78	e3530000	 cmp         r3, #0
  05e7c	1a000039	 bne         |$LN7@ProgramHos|
  05e80	e59d3000	 ldr         r3, [sp]
  05e84	e283300a	 add         r3, r3, #0xA
  05e88	e5d33000	 ldrb        r3, [r3]
  05e8c	e3530000	 cmp         r3, #0
  05e90	0a000034	 beq         |$LN7@ProgramHos|

; 2351 :                 {
; 2352 :                     WRITE_PORT_UCHAR( (m_portBase+MGC_BUSCTL_OFFSET(EpNum, MGC_O_HDRC_TXHUBADDR)), pED->bfHubAddress);

  05e94	e59d3000	 ldr         r3, [sp]
  05e98	e283000a	 add         r0, r3, #0xA
  05e9c	e59d3034	 ldr         r3, [sp, #0x34]
  05ea0	e2831f52	 add         r1, r3, #0x52, 30
  05ea4	e59d2004	 ldr         r2, [sp, #4]
  05ea8	e3a03008	 mov         r3, #8
  05eac	e0030392	 mul         r3, r2, r3
  05eb0	e2833b01	 add         r3, r3, #1, 22
  05eb4	e2832082	 add         r2, r3, #0x82
  05eb8	e5913000	 ldr         r3, [r1]
  05ebc	e0832002	 add         r2, r3, r2
  05ec0	e5d03000	 ldrb        r3, [r0]
  05ec4	e5c23000	 strb        r3, [r2]

; 2353 :                     WRITE_PORT_UCHAR( (m_portBase+MGC_BUSCTL_OFFSET(EpNum, MGC_O_HDRC_RXHUBADDR)), pED->bfHubAddress);

  05ec8	e59d3000	 ldr         r3, [sp]
  05ecc	e283000a	 add         r0, r3, #0xA
  05ed0	e59d3034	 ldr         r3, [sp, #0x34]
  05ed4	e2831f52	 add         r1, r3, #0x52, 30
  05ed8	e59d2004	 ldr         r2, [sp, #4]
  05edc	e3a03008	 mov         r3, #8
  05ee0	e0030392	 mul         r3, r2, r3
  05ee4	e2833b01	 add         r3, r3, #1, 22
  05ee8	e2832086	 add         r2, r3, #0x86
  05eec	e5913000	 ldr         r3, [r1]
  05ef0	e0832002	 add         r2, r3, r2
  05ef4	e5d03000	 ldrb        r3, [r0]
  05ef8	e5c23000	 strb        r3, [r2]

; 2354 :                     WRITE_PORT_UCHAR( (m_portBase+MGC_BUSCTL_OFFSET(EpNum, MGC_O_HDRC_TXHUBPORT)), pED->bfHubPort);

  05efc	e59d3000	 ldr         r3, [sp]
  05f00	e283000b	 add         r0, r3, #0xB
  05f04	e59d3034	 ldr         r3, [sp, #0x34]
  05f08	e2831f52	 add         r1, r3, #0x52, 30
  05f0c	e59d2004	 ldr         r2, [sp, #4]
  05f10	e3a03008	 mov         r3, #8
  05f14	e0030392	 mul         r3, r2, r3
  05f18	e2833b01	 add         r3, r3, #1, 22
  05f1c	e2832083	 add         r2, r3, #0x83
  05f20	e5913000	 ldr         r3, [r1]
  05f24	e0832002	 add         r2, r3, r2
  05f28	e5d03000	 ldrb        r3, [r0]
  05f2c	e5c23000	 strb        r3, [r2]

; 2355 :                     WRITE_PORT_UCHAR( (m_portBase+MGC_BUSCTL_OFFSET(EpNum, MGC_O_HDRC_RXHUBPORT)), pED->bfHubPort);

  05f30	e59d3000	 ldr         r3, [sp]
  05f34	e283000b	 add         r0, r3, #0xB
  05f38	e59d3034	 ldr         r3, [sp, #0x34]
  05f3c	e2831f52	 add         r1, r3, #0x52, 30
  05f40	e59d2004	 ldr         r2, [sp, #4]
  05f44	e3a03008	 mov         r3, #8
  05f48	e0030392	 mul         r3, r2, r3
  05f4c	e2833b01	 add         r3, r3, #1, 22
  05f50	e2832087	 add         r2, r3, #0x87
  05f54	e5913000	 ldr         r3, [r1]
  05f58	e0832002	 add         r2, r3, r2
  05f5c	e5d03000	 ldrb        r3, [r0]
  05f60	e5c23000	 strb        r3, [r2]

; 2356 :                 }
; 2357 :                 else

  05f64	ea00002b	 b           |$LN6@ProgramHos|
  05f68		 |$LN7@ProgramHos|

; 2358 :                 {
; 2359 :                     WRITE_PORT_UCHAR( (m_portBase+MGC_BUSCTL_OFFSET(EpNum, MGC_O_HDRC_TXHUBADDR)), 0);

  05f68	e59d3034	 ldr         r3, [sp, #0x34]
  05f6c	e2831f52	 add         r1, r3, #0x52, 30
  05f70	e59d2004	 ldr         r2, [sp, #4]
  05f74	e3a03008	 mov         r3, #8
  05f78	e0030392	 mul         r3, r2, r3
  05f7c	e2833b01	 add         r3, r3, #1, 22
  05f80	e2832082	 add         r2, r3, #0x82
  05f84	e5913000	 ldr         r3, [r1]
  05f88	e0832002	 add         r2, r3, r2
  05f8c	e3a03000	 mov         r3, #0
  05f90	e5c23000	 strb        r3, [r2]

; 2360 :                     WRITE_PORT_UCHAR( (m_portBase+MGC_BUSCTL_OFFSET(EpNum, MGC_O_HDRC_RXHUBADDR)), 0);

  05f94	e59d3034	 ldr         r3, [sp, #0x34]
  05f98	e2831f52	 add         r1, r3, #0x52, 30
  05f9c	e59d2004	 ldr         r2, [sp, #4]
  05fa0	e3a03008	 mov         r3, #8
  05fa4	e0030392	 mul         r3, r2, r3
  05fa8	e2833b01	 add         r3, r3, #1, 22
  05fac	e2832086	 add         r2, r3, #0x86
  05fb0	e5913000	 ldr         r3, [r1]
  05fb4	e0832002	 add         r2, r3, r2
  05fb8	e3a03000	 mov         r3, #0
  05fbc	e5c23000	 strb        r3, [r2]

; 2361 :                     WRITE_PORT_UCHAR( (m_portBase+MGC_BUSCTL_OFFSET(EpNum, MGC_O_HDRC_TXHUBPORT)), 0);

  05fc0	e59d3034	 ldr         r3, [sp, #0x34]
  05fc4	e2831f52	 add         r1, r3, #0x52, 30
  05fc8	e59d2004	 ldr         r2, [sp, #4]
  05fcc	e3a03008	 mov         r3, #8
  05fd0	e0030392	 mul         r3, r2, r3
  05fd4	e2833b01	 add         r3, r3, #1, 22
  05fd8	e2832083	 add         r2, r3, #0x83
  05fdc	e5913000	 ldr         r3, [r1]
  05fe0	e0832002	 add         r2, r3, r2
  05fe4	e3a03000	 mov         r3, #0
  05fe8	e5c23000	 strb        r3, [r2]

; 2362 :                     WRITE_PORT_UCHAR( (m_portBase+MGC_BUSCTL_OFFSET(EpNum, MGC_O_HDRC_RXHUBPORT)), 0);

  05fec	e59d3034	 ldr         r3, [sp, #0x34]
  05ff0	e2831f52	 add         r1, r3, #0x52, 30
  05ff4	e59d2004	 ldr         r2, [sp, #4]
  05ff8	e3a03008	 mov         r3, #8
  05ffc	e0030392	 mul         r3, r2, r3
  06000	e2833b01	 add         r3, r3, #1, 22
  06004	e2832087	 add         r2, r3, #0x87
  06008	e5913000	 ldr         r3, [r1]
  0600c	e0832002	 add         r2, r3, r2
  06010	e3a03000	 mov         r3, #0
  06014	e5c23000	 strb        r3, [r2]
  06018		 |$LN6@ProgramHos|

; 2363 :                 }
; 2364 :             }
; 2365 : 
; 2366 :             break;

  06018	ea000010	 b           |$LN12@ProgramHos|
  0601c		 |$LN5@ProgramHos|

; 2367 : 
; 2368 :         default:
; 2369 : 
; 2370 :             DEBUGCHK(FALSE);

  0601c	ea000002	 b           |$LN27@ProgramHos|
  06020	e3a03001	 mov         r3, #1
  06024	e58d3024	 str         r3, [sp, #0x24]
  06028	ea000008	 b           |$LN28@ProgramHos|
  0602c		 |$LN27@ProgramHos|
  0602c	e3a03c09	 mov         r3, #9, 24
  06030	e3833042	 orr         r3, r3, #0x42
  06034	e59f2128	 ldr         r2, [pc, #0x128]
  06038	e59f1120	 ldr         r1, [pc, #0x120]
  0603c	e59f0118	 ldr         r0, [pc, #0x118]
  06040	eb000000	 bl          NKDbgPrintfW
  06044	e6000010	 __debugbreak_ce
  06048	e3a03000	 mov         r3, #0
  0604c	e58d3024	 str         r3, [sp, #0x24]
  06050		 |$LN28@ProgramHos|

; 2371 :             pED->epType = TYPE_UNKNOWN;

  06050	e59d3000	 ldr         r3, [sp]
  06054	e2832020	 add         r2, r3, #0x20
  06058	e3a03000	 mov         r3, #0
  0605c	e5823000	 str         r3, [r2]
  06060		 |$LN12@ProgramHos|

; 2372 :         }
; 2373 : 
; 2374 :         if (pED->bHostEndPointNum)

  06060	e59d3000	 ldr         r3, [sp]
  06064	e2833010	 add         r3, r3, #0x10
  06068	e5d33000	 ldrb        r3, [r3]
  0606c	e3530000	 cmp         r3, #0
  06070	0a000020	 beq         |$LN4@ProgramHos|

; 2375 :         {
; 2376 :             if(pED->bfDirection == TD_IN_PID)

  06074	e59d3000	 ldr         r3, [sp]
  06078	e2833006	 add         r3, r3, #6
  0607c	e5d33000	 ldrb        r3, [r3]
  06080	e3530002	 cmp         r3, #2
  06084	1a00000d	 bne         |$LN3@ProgramHos|

; 2377 :             {
; 2378 :                 pED->hSemaphore = m_EpInProtectSem[pED->bHostEndPointNum - 1];

  06088	e59d3034	 ldr         r3, [sp, #0x34]
  0608c	e2831e1b	 add         r1, r3, #0x1B, 28
  06090	e59d3000	 ldr         r3, [sp]
  06094	e2833010	 add         r3, r3, #0x10
  06098	e5d33000	 ldrb        r3, [r3]
  0609c	e2432001	 sub         r2, r3, #1
  060a0	e3a03004	 mov         r3, #4
  060a4	e0030392	 mul         r3, r2, r3
  060a8	e0811003	 add         r1, r1, r3
  060ac	e59d3000	 ldr         r3, [sp]
  060b0	e2832030	 add         r2, r3, #0x30
  060b4	e5913000	 ldr         r3, [r1]
  060b8	e5823000	 str         r3, [r2]

; 2379 :             }
; 2380 :             else

  060bc	ea00000c	 b           |$LN2@ProgramHos|
  060c0		 |$LN3@ProgramHos|

; 2381 :             {
; 2382 :                 pED->hSemaphore = m_EpOutProtectSem[pED->bHostEndPointNum - 1];

  060c0	e59d3034	 ldr         r3, [sp, #0x34]
  060c4	e2831f7b	 add         r1, r3, #0x7B, 30
  060c8	e59d3000	 ldr         r3, [sp]
  060cc	e2833010	 add         r3, r3, #0x10
  060d0	e5d33000	 ldrb        r3, [r3]
  060d4	e2432001	 sub         r2, r3, #1
  060d8	e3a03004	 mov         r3, #4
  060dc	e0030392	 mul         r3, r2, r3
  060e0	e0811003	 add         r1, r1, r3
  060e4	e59d3000	 ldr         r3, [sp]
  060e8	e2832030	 add         r2, r3, #0x30
  060ec	e5913000	 ldr         r3, [r1]
  060f0	e5823000	 str         r3, [r2]
  060f4		 |$LN2@ProgramHos|

; 2383 :             }
; 2384 :         }
; 2385 :         else

  060f4	ea000005	 b           |$LN1@ProgramHos|
  060f8		 |$LN4@ProgramHos|

; 2386 :         {
; 2387 :             pED->hSemaphore = m_Ep0ProtectSem;

  060f8	e59d3034	 ldr         r3, [sp, #0x34]
  060fc	e2831f6b	 add         r1, r3, #0x6B, 30
  06100	e59d3000	 ldr         r3, [sp]
  06104	e2832030	 add         r2, r3, #0x30
  06108	e5913000	 ldr         r3, [r1]
  0610c	e5823000	 str         r3, [r2]
  06110		 |$LN1@ProgramHos|
  06110		 |$LN14@ProgramHos|

; 2388 :         }
; 2389 :     }
; 2390 : 
; 2391 :     RETAILMSG(FALSE,(TEXT("ProgramHostEndpoint EP %u Type %d Direction%x\n"),
; 2392 :             EpNum, pED->epType, pED->bfDirection ));

  06110	ea00000b	 b           |$LN29@ProgramHos|
  06114	e59d3000	 ldr         r3, [sp]
  06118	e2833006	 add         r3, r3, #6
  0611c	e5d33000	 ldrb        r3, [r3]
  06120	e59d2000	 ldr         r2, [sp]
  06124	e2822020	 add         r2, r2, #0x20
  06128	e5922000	 ldr         r2, [r2]
  0612c	e59d1004	 ldr         r1, [sp, #4]
  06130	e59f0020	 ldr         r0, [pc, #0x20]
  06134	eb000000	 bl          NKDbgPrintfW
  06138	e3a03001	 mov         r3, #1
  0613c	e58d3028	 str         r3, [sp, #0x28]
  06140	ea000001	 b           |$LN30@ProgramHos|
  06144		 |$LN29@ProgramHos|
  06144	e3a03000	 mov         r3, #0
  06148	e58d3028	 str         r3, [sp, #0x28]
  0614c		 |$LN30@ProgramHos|

; 2393 : }

  0614c	e28dd02c	 add         sp, sp, #0x2C
  06150	e89d6000	 ldmia       sp, {sp, lr}
  06154	e12fff1e	 bx          lr
  06158		 |$LN40@ProgramHos|
  06158		 |$LN41@ProgramHos|
  06158	00000000	 DCD         |??_C@_1FO@DOMKDNLJ@?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAH?$AAo?$AAs?$AAt?$AAE?$AAn?$AAd?$AAp?$AAo?$AAi?$AAn?$AAt?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAy?$AAp?$AAe?$AA?5?$AA?$CF@|
  0615c		 |$LN42@ProgramHos|
  0615c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  06160		 |$LN43@ProgramHos|
  06160	00000000	 DCD         |dpCurSettings|
  06164		 |$LN44@ProgramHos|
  06164	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  06168		 |$M43681|

			 ENDP  ; |?ProgramHostEndpoint@CHW@@QAAXIPAX@Z|, CHW::ProgramHostEndpoint

	EXPORT	|??_C@_1JO@JBNPPFHL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@GHFNHFJG@?$AAS?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@NNPHCMKB@?$AAD?$AAo?$AAu?$AAb?$AAl?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KO@HEOICAB@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_19PNJNFAOM@?$AAF?$AAi?$AAf?$AAo?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JO@JPFEPGFD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_17KCFFABIP@?$AAa?$AAn?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@OLFPFCKI@?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@KEIBCIAP@?$AAi?$AAs?$AAo?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19LOMGGDBD@?$AAb?$AAu?$AAl?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19BIEPDBPA@?$AAT?$AAy?$AAp?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@LJDLLKHL@?$AA?$CF?$AAs?$AA?2?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?2?$AAE?$AAP?$AA?$CF?$AAu?$AA?2?$AA?$CF?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|RegCloseKey|
	IMPORT	|_wcsicmp|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|StringCbPrintfW|

  000f0			 AREA	 |.pdata|, PDATA
|$T43713| DCD	|$LN44@LoadEnpoin|
	DCD	0xc0019f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@JBNPPFHL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "L", 0x0, "o"
	DCB	0x0, "a", 0x0, "d", 0x0, "E", 0x0, "n", 0x0, "p", 0x0, "o"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "f"
	DCB	0x0, "i", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, "!", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@GHFNHFJG@?$AAS?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?$AA@| DCB "S", 0x0, "h"
	DCB	0x0, "a", 0x0, "r", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@NNPHCMKB@?$AAD?$AAo?$AAu?$AAb?$AAl?$AAe?$AA?$AA@| DCB "D", 0x0, "o"
	DCB	0x0, "u", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KO@HEOICAB@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "L", 0x0, "o"
	DCB	0x0, "a", 0x0, "d", 0x0, "E", 0x0, "n", 0x0, "p", 0x0, "o"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "F", 0x0, "I", 0x0, "F"
	DCB	0x0, "O", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "u", 0x0, "n", 0x0, "s", 0x0, "p", 0x0, "e", 0x0, "c"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19PNJNFAOM@?$AAF?$AAi?$AAf?$AAo?$AA?$AA@| DCB "F", 0x0, "i", 0x0, "f"
	DCB	0x0, "o", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@JPFEPGFD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "L", 0x0, "o"
	DCB	0x0, "a", 0x0, "d", 0x0, "E", 0x0, "n", 0x0, "p", 0x0, "o"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "e", 0x0, "n", 0x0, "d", 0x0, "p", 0x0, "o", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "u", 0x0, "n", 0x0, "s", 0x0, "p", 0x0, "e"
	DCB	0x0, "c", 0x0, "i", 0x0, "f", 0x0, "i", 0x0, "e", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17KCFFABIP@?$AAa?$AAn?$AAy?$AA?$AA@| DCB "a", 0x0, "n", 0x0, "y", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@OLFPFCKI@?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AA@| DCB "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@KEIBCIAP@?$AAi?$AAs?$AAo?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AA?$AA@| DCB "i"
	DCB	0x0, "s", 0x0, "o", 0x0, "c", 0x0, "h", 0x0, "r", 0x0, "o"
	DCB	0x0, "n", 0x0, "o", 0x0, "u", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19LOMGGDBD@?$AAb?$AAu?$AAl?$AAk?$AA?$AA@| DCB "b", 0x0, "u", 0x0, "l"
	DCB	0x0, "k", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19BIEPDBPA@?$AAT?$AAy?$AAp?$AAe?$AA?$AA@| DCB "T", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@LJDLLKHL@?$AA?$CF?$AAs?$AA?2?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?2?$AAE?$AAP?$AA?$CF?$AAu?$AA?2?$AA?$CF?$AAs?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "F"
	DCB	0x0, "I", 0x0, "G", 0x0, "\\", 0x0, "E", 0x0, "P", 0x0, "%"
	DCB	0x0, "u", 0x0, "\\", 0x0, "%", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00004			 AREA	 |.xdata|, DATA
|$T43709| DCD	0xffffff8c
; Function compile flags: /Odtp

  06168			 AREA	 |.text|, CODE, ARM

  06168	00000000	 DCD         |__GSHandlerCheck|
  0616c	00000000	 DCD         |$T43709|

  06170		 |?LoadEnpointConfiguration@CHW@@AAAHXZ| PROC ; CHW::LoadEnpointConfiguration

; 2397 : {

  06170		 |$LN44@LoadEnpoin|
  06170	e1a0c00d	 mov         r12, sp
  06174	e92d0001	 stmdb       sp!, {r0}
  06178	e92d5000	 stmdb       sp!, {r12, lr}
  0617c	e24ddf47	 sub         sp, sp, #0x47, 30
  06180		 |$M43710|
  06180	e59f3660	 ldr         r3, [pc, #0x660]
  06184	e5933000	 ldr         r3, [r3]
  06188	e58d30b4	 str         r3, [sp, #0xB4]

; 2398 :     const TCHAR *pszKeyFormat = L"%s\\CONFIG\\EP%u\\%s";

  0618c	e59f3650	 ldr         r3, [pc, #0x650]
  06190	e58d3020	 str         r3, [sp, #0x20]

; 2399 :     HKEY hKey;
; 2400 :     EP_CONFIG *pConfig;
; 2401 :     DWORD i, j, dwSize, dwType, dwTemp;
; 2402 :     TCHAR *pszDir, szTemp[ 64 ];
; 2403 :     DWORD dwFifoUsage = 0;

  06194	e3a03000	 mov         r3, #0
  06198	e58d301c	 str         r3, [sp, #0x1C]

; 2404 :     DWORD dwFifoEmpty = MGC_FIFO_RAM_SIZE - 64; // 64 bytes reserved for control EP0.

  0619c	e3a03c7f	 mov         r3, #0x7F, 24
  061a0	e38330c0	 orr         r3, r3, #0xC0
  061a4	e58d3024	 str         r3, [sp, #0x24]

; 2405 : 
; 2406 :     // Loop through endpoints
; 2407 :     for (i = 0; i < (MGC_MAX_USB_ENDS - 1); i ++)

  061a8	e3a03000	 mov         r3, #0
  061ac	e58d3014	 str         r3, [sp, #0x14]
  061b0	ea000002	 b           |$LN33@LoadEnpoin|
  061b4		 |$LN32@LoadEnpoin|
  061b4	e59d3014	 ldr         r3, [sp, #0x14]
  061b8	e2833001	 add         r3, r3, #1
  061bc	e58d3014	 str         r3, [sp, #0x14]
  061c0		 |$LN33@LoadEnpoin|
  061c0	e59d3014	 ldr         r3, [sp, #0x14]
  061c4	e353000f	 cmp         r3, #0xF
  061c8	2a000158	 bcs         |$LN31@LoadEnpoin|

; 2408 :     {
; 2409 :         // Loop through directions
; 2410 :         for (j = 0; j < 2; j ++)

  061cc	e3a03000	 mov         r3, #0
  061d0	e58d30b0	 str         r3, [sp, #0xB0]
  061d4	ea000002	 b           |$LN30@LoadEnpoin|
  061d8		 |$LN29@LoadEnpoin|
  061d8	e59d30b0	 ldr         r3, [sp, #0xB0]
  061dc	e2833001	 add         r3, r3, #1
  061e0	e58d30b0	 str         r3, [sp, #0xB0]
  061e4		 |$LN30@LoadEnpoin|
  061e4	e59d30b0	 ldr         r3, [sp, #0xB0]
  061e8	e3530002	 cmp         r3, #2
  061ec	2a00014e	 bcs         |$LN28@LoadEnpoin|

; 2411 :         {
; 2412 :             if (j)

  061f0	e59d30b0	 ldr         r3, [sp, #0xB0]
  061f4	e3530000	 cmp         r3, #0
  061f8	0a000005	 beq         |$LN27@LoadEnpoin|

; 2413 :             {
; 2414 :                 pszDir = L"OUT";

  061fc	e59f35dc	 ldr         r3, [pc, #0x5DC]
  06200	e58d30ac	 str         r3, [sp, #0xAC]

; 2415 :                 pConfig = m_EpOutConfig;

  06204	e59d3124	 ldr         r3, [sp, #0x124]
  06208	e2833fae	 add         r3, r3, #0xAE, 30
  0620c	e58d3028	 str         r3, [sp, #0x28]

; 2416 :             }
; 2417 :             else

  06210	ea000004	 b           |$LN26@LoadEnpoin|
  06214		 |$LN27@LoadEnpoin|

; 2418 :             {
; 2419 :                 pszDir = L"IN";

  06214	e59f35c0	 ldr         r3, [pc, #0x5C0]
  06218	e58d30ac	 str         r3, [sp, #0xAC]

; 2420 :                 pConfig = m_EpInConfig;

  0621c	e59d3124	 ldr         r3, [sp, #0x124]
  06220	e2833d09	 add         r3, r3, #9, 26
  06224	e58d3028	 str         r3, [sp, #0x28]
  06228		 |$LN26@LoadEnpoin|

; 2421 :             }
; 2422 : 
; 2423 :             // Open endpoint key
; 2424 :             if( SUCCEEDED( StringCbPrintf( szTemp, sizeof( szTemp ),
; 2425 :                                pszKeyFormat, ((SOhcdPdd*)m_pPddContext)->szDriverRegKey, i + 1, pszDir ) ) )

  06228	e59d30ac	 ldr         r3, [sp, #0xAC]
  0622c	e58d3004	 str         r3, [sp, #4]
  06230	e59d3014	 ldr         r3, [sp, #0x14]
  06234	e2833001	 add         r3, r3, #1
  06238	e58d3000	 str         r3, [sp]
  0623c	e59d3124	 ldr         r3, [sp, #0x124]
  06240	e2833e19	 add         r3, r3, #0x19, 28
  06244	e5933000	 ldr         r3, [r3]
  06248	e2833008	 add         r3, r3, #8
  0624c	e59d2020	 ldr         r2, [sp, #0x20]
  06250	e3a01080	 mov         r1, #0x80
  06254	e28d002c	 add         r0, sp, #0x2C
  06258	eb000000	 bl          StringCbPrintfW
  0625c	e58d00e8	 str         r0, [sp, #0xE8]
  06260	e59d30e8	 ldr         r3, [sp, #0xE8]
  06264	e3530000	 cmp         r3, #0
  06268	ba00012b	 blt         |$LN25@LoadEnpoin|

; 2426 :             {
; 2427 :                 if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, szTemp, 0, 0, &hKey) == ERROR_SUCCESS)

  0626c	e28d3018	 add         r3, sp, #0x18
  06270	e58d3000	 str         r3, [sp]
  06274	e3a03000	 mov         r3, #0
  06278	e3a02000	 mov         r2, #0
  0627c	e28d102c	 add         r1, sp, #0x2C
  06280	e3a0010a	 mov         r0, #0xA, 2
  06284	eb000000	 bl          RegOpenKeyExW
  06288	e58d00ec	 str         r0, [sp, #0xEC]
  0628c	e59d30ec	 ldr         r3, [sp, #0xEC]
  06290	e3530000	 cmp         r3, #0
  06294	1a00011c	 bne         |$LN24@LoadEnpoin|

; 2428 :                 {
; 2429 :                     // Get EP type
; 2430 :                     dwType = REG_SZ;

  06298	e3a03001	 mov         r3, #1
  0629c	e58d300c	 str         r3, [sp, #0xC]

; 2431 : #pragma warning(push)
; 2432 : #pragma warning(disable: 6260 6386)
; 2433 :                     dwSize = sizeof(szTemp) * sizeof(TCHAR);

  062a0	e3a03c01	 mov         r3, #1, 24
  062a4	e58d3010	 str         r3, [sp, #0x10]

; 2434 : 
; 2435 :                     if (RegQueryValueEx(hKey, L"Type", NULL, &dwType, (LPBYTE)szTemp, &dwSize) != ERROR_SUCCESS)

  062a8	e28d3010	 add         r3, sp, #0x10
  062ac	e58d3004	 str         r3, [sp, #4]
  062b0	e28d302c	 add         r3, sp, #0x2C
  062b4	e58d3000	 str         r3, [sp]
  062b8	e28d300c	 add         r3, sp, #0xC
  062bc	e3a02000	 mov         r2, #0
  062c0	e59f1510	 ldr         r1, [pc, #0x510]
  062c4	e59d0018	 ldr         r0, [sp, #0x18]
  062c8	eb000000	 bl          RegQueryValueExW
  062cc	e58d00f0	 str         r0, [sp, #0xF0]
  062d0	e59d30f0	 ldr         r3, [sp, #0xF0]
  062d4	e3530000	 cmp         r3, #0
  062d8	0a000002	 beq         |$LN23@LoadEnpoin|

; 2436 :                     {
; 2437 :                         szTemp[ 0 ] = L'\0';

  062dc	e3a03000	 mov         r3, #0
  062e0	e1cd32bc	 strh        r3, [sp, #0x2C]

; 2438 :                     }
; 2439 :                     else

  062e4	ea000001	 b           |$LN22@LoadEnpoin|
  062e8		 |$LN23@LoadEnpoin|

; 2440 :                     {
; 2441 :                         // force zero-termination
; 2442 :                         szTemp[ (sizeof(szTemp) / sizeof(szTemp[0])) - 1 ] = L'\0';

  062e8	e3a03000	 mov         r3, #0
  062ec	e1cd3aba	 strh        r3, [sp, #0xAA]
  062f0		 |$LN22@LoadEnpoin|

; 2443 :                     }
; 2444 : #pragma warning(pop)
; 2445 :                     if (!wcsicmp(szTemp, L"bulk"))

  062f0	e59f14dc	 ldr         r1, [pc, #0x4DC]
  062f4	e28d002c	 add         r0, sp, #0x2C
  062f8	eb000000	 bl          _wcsicmp
  062fc	e58d00f4	 str         r0, [sp, #0xF4]
  06300	e59d30f4	 ldr         r3, [sp, #0xF4]
  06304	e3530000	 cmp         r3, #0
  06308	1a000008	 bne         |$LN21@LoadEnpoin|

; 2446 :                     {
; 2447 :                         pConfig[ i ].epType = TYPE_BULK;

  0630c	e59d1014	 ldr         r1, [sp, #0x14]
  06310	e3a03008	 mov         r3, #8
  06314	e0020391	 mul         r2, r1, r3
  06318	e59d3028	 ldr         r3, [sp, #0x28]
  0631c	e0833002	 add         r3, r3, r2
  06320	e2832001	 add         r2, r3, #1
  06324	e3a03002	 mov         r3, #2
  06328	e5c23000	 strb        r3, [r2]
  0632c	ea000043	 b           |$LN20@LoadEnpoin|
  06330		 |$LN21@LoadEnpoin|

; 2448 :                     }
; 2449 :                     else if (!wcsicmp(szTemp, L"isochronous"))

  06330	e59f1498	 ldr         r1, [pc, #0x498]
  06334	e28d002c	 add         r0, sp, #0x2C
  06338	eb000000	 bl          _wcsicmp
  0633c	e58d00f8	 str         r0, [sp, #0xF8]
  06340	e59d30f8	 ldr         r3, [sp, #0xF8]
  06344	e3530000	 cmp         r3, #0
  06348	1a000008	 bne         |$LN19@LoadEnpoin|

; 2450 :                     {
; 2451 :                         pConfig[ i ].epType = TYPE_ISOCHRONOUS;

  0634c	e59d1014	 ldr         r1, [sp, #0x14]
  06350	e3a03008	 mov         r3, #8
  06354	e0020391	 mul         r2, r1, r3
  06358	e59d3028	 ldr         r3, [sp, #0x28]
  0635c	e0833002	 add         r3, r3, r2
  06360	e2832001	 add         r2, r3, #1
  06364	e3a03004	 mov         r3, #4
  06368	e5c23000	 strb        r3, [r2]
  0636c	ea000033	 b           |$LN18@LoadEnpoin|
  06370		 |$LN19@LoadEnpoin|

; 2452 :                     }
; 2453 :                     else if (!wcsicmp(szTemp, L"interrupt"))

  06370	e59f1454	 ldr         r1, [pc, #0x454]
  06374	e28d002c	 add         r0, sp, #0x2C
  06378	eb000000	 bl          _wcsicmp
  0637c	e58d00fc	 str         r0, [sp, #0xFC]
  06380	e59d30fc	 ldr         r3, [sp, #0xFC]
  06384	e3530000	 cmp         r3, #0
  06388	1a000008	 bne         |$LN17@LoadEnpoin|

; 2454 :                     {
; 2455 :                         pConfig[ i ].epType = TYPE_INTERRUPT;

  0638c	e59d1014	 ldr         r1, [sp, #0x14]
  06390	e3a03008	 mov         r3, #8
  06394	e0020391	 mul         r2, r1, r3
  06398	e59d3028	 ldr         r3, [sp, #0x28]
  0639c	e0833002	 add         r3, r3, r2
  063a0	e2832001	 add         r2, r3, #1
  063a4	e3a03003	 mov         r3, #3
  063a8	e5c23000	 strb        r3, [r2]
  063ac	ea000023	 b           |$LN16@LoadEnpoin|
  063b0		 |$LN17@LoadEnpoin|

; 2456 :                     }
; 2457 :                     else if (!wcsicmp(szTemp, L"any"))

  063b0	e59f1410	 ldr         r1, [pc, #0x410]
  063b4	e28d002c	 add         r0, sp, #0x2C
  063b8	eb000000	 bl          _wcsicmp
  063bc	e58d0100	 str         r0, [sp, #0x100]
  063c0	e59d3100	 ldr         r3, [sp, #0x100]
  063c4	e3530000	 cmp         r3, #0
  063c8	1a000008	 bne         |$LN15@LoadEnpoin|

; 2458 :                     {
; 2459 :                         pConfig[ i ].epType = TYPE_ANY;

  063cc	e59d1014	 ldr         r1, [sp, #0x14]
  063d0	e3a03008	 mov         r3, #8
  063d4	e0020391	 mul         r2, r1, r3
  063d8	e59d3028	 ldr         r3, [sp, #0x28]
  063dc	e0833002	 add         r3, r3, r2
  063e0	e2832001	 add         r2, r3, #1
  063e4	e3a03005	 mov         r3, #5
  063e8	e5c23000	 strb        r3, [r2]

; 2460 :                     }
; 2461 :                     else

  063ec	ea000013	 b           |$LN14@LoadEnpoin|
  063f0		 |$LN15@LoadEnpoin|

; 2462 :                     {
; 2463 :                         DEBUGMSG( ZONE_ERROR, (TEXT("CHW::LoadEnpointConfiguration: endpoint type invalid or unspecified, EP %u %s\n"),
; 2464 :                             i, pszDir));

  063f0	e59f33b8	 ldr         r3, [pc, #0x3B8]
  063f4	e5933440	 ldr         r3, [r3, #0x440]
  063f8	e3130901	 tst         r3, #1, 18
  063fc	0a000006	 beq         |$LN36@LoadEnpoin|
  06400	e59d20ac	 ldr         r2, [sp, #0xAC]
  06404	e59d1014	 ldr         r1, [sp, #0x14]
  06408	e59f03b4	 ldr         r0, [pc, #0x3B4]
  0640c	eb000000	 bl          NKDbgPrintfW
  06410	e3a03001	 mov         r3, #1
  06414	e58d3104	 str         r3, [sp, #0x104]
  06418	ea000001	 b           |$LN37@LoadEnpoin|
  0641c		 |$LN36@LoadEnpoin|
  0641c	e3a03000	 mov         r3, #0
  06420	e58d3104	 str         r3, [sp, #0x104]
  06424		 |$LN37@LoadEnpoin|

; 2465 : 
; 2466 :                         RegCloseKey(hKey);

  06424	e59d0018	 ldr         r0, [sp, #0x18]
  06428	eb000000	 bl          RegCloseKey

; 2467 :                         return FALSE;

  0642c	e59d00b4	 ldr         r0, [sp, #0xB4]
  06430	eb000000	 bl          __security_check_cookie
  06434	e3a03000	 mov         r3, #0
  06438	e58d30cc	 str         r3, [sp, #0xCC]
  0643c	ea0000d6	 b           |$LN34@LoadEnpoin|
  06440		 |$LN14@LoadEnpoin|
  06440		 |$LN16@LoadEnpoin|
  06440		 |$LN18@LoadEnpoin|
  06440		 |$LN20@LoadEnpoin|

; 2468 :                     }
; 2469 : 
; 2470 :                     // Get FIFO size
; 2471 :                     dwType = REG_DWORD;

  06440	e3a03004	 mov         r3, #4
  06444	e58d300c	 str         r3, [sp, #0xC]

; 2472 :                     dwSize = sizeof(dwTemp);

  06448	e3a03004	 mov         r3, #4
  0644c	e58d3010	 str         r3, [sp, #0x10]

; 2473 :                     if (RegQueryValueEx(hKey, L"Fifo", NULL, &dwType, (LPBYTE)&dwTemp, &dwSize) != ERROR_SUCCESS)

  06450	e28d3010	 add         r3, sp, #0x10
  06454	e58d3004	 str         r3, [sp, #4]
  06458	e28d3008	 add         r3, sp, #8
  0645c	e58d3000	 str         r3, [sp]
  06460	e28d300c	 add         r3, sp, #0xC
  06464	e3a02000	 mov         r2, #0
  06468	e59f1350	 ldr         r1, [pc, #0x350]
  0646c	e59d0018	 ldr         r0, [sp, #0x18]
  06470	eb000000	 bl          RegQueryValueExW
  06474	e58d0108	 str         r0, [sp, #0x108]
  06478	e59d3108	 ldr         r3, [sp, #0x108]
  0647c	e3530000	 cmp         r3, #0
  06480	0a000001	 beq         |$LN13@LoadEnpoin|

; 2474 :                     {
; 2475 :                         dwTemp = 0;

  06484	e3a03000	 mov         r3, #0
  06488	e58d3008	 str         r3, [sp, #8]
  0648c		 |$LN13@LoadEnpoin|

; 2476 :                     }
; 2477 : 
; 2478 :                     if (!dwTemp || (dwTemp > 1024) || (dwTemp & 0x03))

  0648c	e59d3008	 ldr         r3, [sp, #8]
  06490	e3530000	 cmp         r3, #0
  06494	0a000005	 beq         |$LN11@LoadEnpoin|
  06498	e59d3008	 ldr         r3, [sp, #8]
  0649c	e3530b01	 cmp         r3, #1, 22
  064a0	8a000002	 bhi         |$LN11@LoadEnpoin|
  064a4	e59d3008	 ldr         r3, [sp, #8]
  064a8	e3130003	 tst         r3, #3
  064ac	0a000014	 beq         |$LN12@LoadEnpoin|
  064b0		 |$LN11@LoadEnpoin|

; 2479 :                     {
; 2480 :                         DEBUGMSG( ZONE_ERROR, (TEXT("CHW::LoadEnpointConfiguration: endpoint FIFO size invalid or unspecified, EP %u %s %d\n"),
; 2481 :                             i, pszDir, dwTemp));

  064b0	e59f32f8	 ldr         r3, [pc, #0x2F8]
  064b4	e5933440	 ldr         r3, [r3, #0x440]
  064b8	e3130901	 tst         r3, #1, 18
  064bc	0a000007	 beq         |$LN38@LoadEnpoin|
  064c0	e59d3008	 ldr         r3, [sp, #8]
  064c4	e59d20ac	 ldr         r2, [sp, #0xAC]
  064c8	e59d1014	 ldr         r1, [sp, #0x14]
  064cc	e59f02e8	 ldr         r0, [pc, #0x2E8]
  064d0	eb000000	 bl          NKDbgPrintfW
  064d4	e3a03001	 mov         r3, #1
  064d8	e58d310c	 str         r3, [sp, #0x10C]
  064dc	ea000001	 b           |$LN39@LoadEnpoin|
  064e0		 |$LN38@LoadEnpoin|
  064e0	e3a03000	 mov         r3, #0
  064e4	e58d310c	 str         r3, [sp, #0x10C]
  064e8		 |$LN39@LoadEnpoin|

; 2482 : 
; 2483 :                         RegCloseKey(hKey);

  064e8	e59d0018	 ldr         r0, [sp, #0x18]
  064ec	eb000000	 bl          RegCloseKey

; 2484 :                         return FALSE;

  064f0	e59d00b4	 ldr         r0, [sp, #0xB4]
  064f4	eb000000	 bl          __security_check_cookie
  064f8	e3a03000	 mov         r3, #0
  064fc	e58d30cc	 str         r3, [sp, #0xCC]
  06500	ea0000a5	 b           |$LN34@LoadEnpoin|
  06504		 |$LN12@LoadEnpoin|

; 2485 :                     }
; 2486 : 
; 2487 :                     pConfig[ i ].fifoSize = (UINT16)dwTemp;

  06504	e59d3008	 ldr         r3, [sp, #8]
  06508	e1a00803	 mov         r0, r3, lsl #16
  0650c	e1a00820	 mov         r0, r0, lsr #16
  06510	e59d1014	 ldr         r1, [sp, #0x14]
  06514	e3a03008	 mov         r3, #8
  06518	e0020391	 mul         r2, r1, r3
  0651c	e59d3028	 ldr         r3, [sp, #0x28]
  06520	e0833002	 add         r3, r3, r2
  06524	e2833006	 add         r3, r3, #6
  06528	e1c300b0	 strh        r0, [r3]

; 2488 : 
; 2489 :                     // Get double buffering mode flag
; 2490 :                     pConfig[ i ].fDBMode = 0;

  0652c	e59d1014	 ldr         r1, [sp, #0x14]
  06530	e3a03008	 mov         r3, #8
  06534	e0020391	 mul         r2, r1, r3
  06538	e59d3028	 ldr         r3, [sp, #0x28]
  0653c	e0833002	 add         r3, r3, r2
  06540	e2832003	 add         r2, r3, #3
  06544	e3a03000	 mov         r3, #0
  06548	e5c23000	 strb        r3, [r2]

; 2491 :                     dwType = REG_DWORD;

  0654c	e3a03004	 mov         r3, #4
  06550	e58d300c	 str         r3, [sp, #0xC]

; 2492 :                     dwSize = sizeof(dwTemp);

  06554	e3a03004	 mov         r3, #4
  06558	e58d3010	 str         r3, [sp, #0x10]

; 2493 :                     if (RegQueryValueEx(hKey, L"Double", NULL, &dwType, (LPBYTE)&dwTemp, &dwSize) == ERROR_SUCCESS)

  0655c	e28d3010	 add         r3, sp, #0x10
  06560	e58d3004	 str         r3, [sp, #4]
  06564	e28d3008	 add         r3, sp, #8
  06568	e58d3000	 str         r3, [sp]
  0656c	e28d300c	 add         r3, sp, #0xC
  06570	e3a02000	 mov         r2, #0
  06574	e59f123c	 ldr         r1, [pc, #0x23C]
  06578	e59d0018	 ldr         r0, [sp, #0x18]
  0657c	eb000000	 bl          RegQueryValueExW
  06580	e58d0110	 str         r0, [sp, #0x110]
  06584	e59d3110	 ldr         r3, [sp, #0x110]
  06588	e3530000	 cmp         r3, #0
  0658c	1a000008	 bne         |$LN10@LoadEnpoin|

; 2494 :                     {
; 2495 :                         pConfig[ i ].fDBMode = (UINT8)dwTemp;

  06590	e59d3008	 ldr         r3, [sp, #8]
  06594	e20300ff	 and         r0, r3, #0xFF
  06598	e59d1014	 ldr         r1, [sp, #0x14]
  0659c	e3a03008	 mov         r3, #8
  065a0	e0020391	 mul         r2, r1, r3
  065a4	e59d3028	 ldr         r3, [sp, #0x28]
  065a8	e0833002	 add         r3, r3, r2
  065ac	e2833003	 add         r3, r3, #3
  065b0	e5c30000	 strb        r0, [r3]
  065b4		 |$LN10@LoadEnpoin|

; 2496 :                     }
; 2497 : 
; 2498 :                     // Get sharing mode flag (applicable to bulk only) - default ON
; 2499 :                     pConfig[ i ].fSharedMode = 1;

  065b4	e59d1014	 ldr         r1, [sp, #0x14]
  065b8	e3a03008	 mov         r3, #8
  065bc	e0020391	 mul         r2, r1, r3
  065c0	e59d3028	 ldr         r3, [sp, #0x28]
  065c4	e0833002	 add         r3, r3, r2
  065c8	e2832004	 add         r2, r3, #4
  065cc	e3a03001	 mov         r3, #1
  065d0	e5c23000	 strb        r3, [r2]

; 2500 :                     if (pConfig[ i ].epType == TYPE_BULK || pConfig[ i ].epType == TYPE_ANY)

  065d4	e59d1014	 ldr         r1, [sp, #0x14]
  065d8	e3a03008	 mov         r3, #8
  065dc	e0020391	 mul         r2, r1, r3
  065e0	e59d3028	 ldr         r3, [sp, #0x28]
  065e4	e0833002	 add         r3, r3, r2
  065e8	e2833001	 add         r3, r3, #1
  065ec	e5d33000	 ldrb        r3, [r3]
  065f0	e3530002	 cmp         r3, #2
  065f4	0a000008	 beq         |$LN8@LoadEnpoin|
  065f8	e59d1014	 ldr         r1, [sp, #0x14]
  065fc	e3a03008	 mov         r3, #8
  06600	e0020391	 mul         r2, r1, r3
  06604	e59d3028	 ldr         r3, [sp, #0x28]
  06608	e0833002	 add         r3, r3, r2
  0660c	e2833001	 add         r3, r3, #1
  06610	e5d33000	 ldrb        r3, [r3]
  06614	e3530005	 cmp         r3, #5
  06618	1a000019	 bne         |$LN9@LoadEnpoin|
  0661c		 |$LN8@LoadEnpoin|

; 2501 :                     {
; 2502 :                         dwType = REG_DWORD;

  0661c	e3a03004	 mov         r3, #4
  06620	e58d300c	 str         r3, [sp, #0xC]

; 2503 :                         dwSize = sizeof(dwTemp);

  06624	e3a03004	 mov         r3, #4
  06628	e58d3010	 str         r3, [sp, #0x10]

; 2504 :                         if (RegQueryValueEx(hKey, L"Shared", NULL, &dwType, (LPBYTE)&dwTemp, &dwSize) == ERROR_SUCCESS)

  0662c	e28d3010	 add         r3, sp, #0x10
  06630	e58d3004	 str         r3, [sp, #4]
  06634	e28d3008	 add         r3, sp, #8
  06638	e58d3000	 str         r3, [sp]
  0663c	e28d300c	 add         r3, sp, #0xC
  06640	e3a02000	 mov         r2, #0
  06644	e59f1168	 ldr         r1, [pc, #0x168]
  06648	e59d0018	 ldr         r0, [sp, #0x18]
  0664c	eb000000	 bl          RegQueryValueExW
  06650	e58d0114	 str         r0, [sp, #0x114]
  06654	e59d3114	 ldr         r3, [sp, #0x114]
  06658	e3530000	 cmp         r3, #0
  0665c	1a000008	 bne         |$LN7@LoadEnpoin|

; 2505 :                         {
; 2506 :                             pConfig[ i ].fSharedMode = (UINT8)dwTemp;

  06660	e59d3008	 ldr         r3, [sp, #8]
  06664	e20300ff	 and         r0, r3, #0xFF
  06668	e59d1014	 ldr         r1, [sp, #0x14]
  0666c	e3a03008	 mov         r3, #8
  06670	e0020391	 mul         r2, r1, r3
  06674	e59d3028	 ldr         r3, [sp, #0x28]
  06678	e0833002	 add         r3, r3, r2
  0667c	e2833004	 add         r3, r3, #4
  06680	e5c30000	 strb        r0, [r3]
  06684		 |$LN7@LoadEnpoin|
  06684		 |$LN9@LoadEnpoin|

; 2507 :                         }
; 2508 :                     }
; 2509 : 
; 2510 :                     if (pConfig[ i ].fDBMode)

  06684	e59d1014	 ldr         r1, [sp, #0x14]
  06688	e3a03008	 mov         r3, #8
  0668c	e0020391	 mul         r2, r1, r3
  06690	e59d3028	 ldr         r3, [sp, #0x28]
  06694	e0833002	 add         r3, r3, r2
  06698	e2833003	 add         r3, r3, #3
  0669c	e5d33000	 ldrb        r3, [r3]
  066a0	e3530000	 cmp         r3, #0
  066a4	0a00000b	 beq         |$LN6@LoadEnpoin|

; 2511 :                     {
; 2512 :                         dwFifoUsage += (pConfig[ i ].fifoSize << 1);

  066a8	e59d1014	 ldr         r1, [sp, #0x14]
  066ac	e3a03008	 mov         r3, #8
  066b0	e0020391	 mul         r2, r1, r3
  066b4	e59d3028	 ldr         r3, [sp, #0x28]
  066b8	e0833002	 add         r3, r3, r2
  066bc	e2833006	 add         r3, r3, #6
  066c0	e1d330b0	 ldrh        r3, [r3]
  066c4	e1a02083	 mov         r2, r3, lsl #1
  066c8	e59d301c	 ldr         r3, [sp, #0x1C]
  066cc	e0833002	 add         r3, r3, r2
  066d0	e58d301c	 str         r3, [sp, #0x1C]

; 2513 :                     }
; 2514 :                     else

  066d4	ea000009	 b           |$LN5@LoadEnpoin|
  066d8		 |$LN6@LoadEnpoin|

; 2515 :                     {
; 2516 :                         dwFifoUsage += pConfig[ i ].fifoSize;

  066d8	e59d1014	 ldr         r1, [sp, #0x14]
  066dc	e3a03008	 mov         r3, #8
  066e0	e0020391	 mul         r2, r1, r3
  066e4	e59d3028	 ldr         r3, [sp, #0x28]
  066e8	e0833002	 add         r3, r3, r2
  066ec	e2833006	 add         r3, r3, #6
  066f0	e1d320b0	 ldrh        r2, [r3]
  066f4	e59d301c	 ldr         r3, [sp, #0x1C]
  066f8	e0833002	 add         r3, r3, r2
  066fc	e58d301c	 str         r3, [sp, #0x1C]
  06700		 |$LN5@LoadEnpoin|

; 2517 :                     }
; 2518 : 
; 2519 :                     RegCloseKey(hKey);

  06700	e59d0018	 ldr         r0, [sp, #0x18]
  06704	eb000000	 bl          RegCloseKey

; 2520 :                 }
; 2521 :                 else

  06708	ea000002	 b           |$LN4@LoadEnpoin|
  0670c		 |$LN24@LoadEnpoin|

; 2522 :                 {
; 2523 :                     // There is no way to completely skip unused endpoints. We still
; 2524 :                     // have to allocate at least 8 bytes (minimum).
; 2525 :                     dwFifoUsage += 8;

  0670c	e59d301c	 ldr         r3, [sp, #0x1C]
  06710	e2833008	 add         r3, r3, #8
  06714	e58d301c	 str         r3, [sp, #0x1C]
  06718		 |$LN4@LoadEnpoin|

; 2526 :                 }
; 2527 :             }
; 2528 :             else

  06718	ea000002	 b           |$LN3@LoadEnpoin|
  0671c		 |$LN25@LoadEnpoin|

; 2529 :             {
; 2530 :                 // There is no way to completely skip unused endpoints. We still
; 2531 :                 // have to allocate at least 8 bytes (minimum).
; 2532 :                 dwFifoUsage += 8;

  0671c	e59d301c	 ldr         r3, [sp, #0x1C]
  06720	e2833008	 add         r3, r3, #8
  06724	e58d301c	 str         r3, [sp, #0x1C]
  06728		 |$LN3@LoadEnpoin|

; 2533 :             }
; 2534 :         }

  06728	eafffeaa	 b           |$LN29@LoadEnpoin|
  0672c		 |$LN28@LoadEnpoin|

; 2535 :     }

  0672c	eafffea0	 b           |$LN32@LoadEnpoin|
  06730		 |$LN31@LoadEnpoin|

; 2536 : 
; 2537 :     // Validate configuration
; 2538 :     if (!dwFifoUsage || (dwFifoUsage > dwFifoEmpty))

  06730	e59d301c	 ldr         r3, [sp, #0x1C]
  06734	e3530000	 cmp         r3, #0
  06738	0a000003	 beq         |$LN1@LoadEnpoin|
  0673c	e59d201c	 ldr         r2, [sp, #0x1C]
  06740	e59d3024	 ldr         r3, [sp, #0x24]
  06744	e1520003	 cmp         r2, r3
  06748	9a00000f	 bls         |$LN2@LoadEnpoin|
  0674c		 |$LN1@LoadEnpoin|

; 2539 :     {
; 2540 :         DEBUGMSG( ZONE_ERROR, (TEXT("CHW::LoadEnpointConfiguration: endpoint configuration not defined or invalid!\n")));

  0674c	e59f305c	 ldr         r3, [pc, #0x5C]
  06750	e5933440	 ldr         r3, [r3, #0x440]
  06754	e3130901	 tst         r3, #1, 18
  06758	0a000004	 beq         |$LN40@LoadEnpoin|
  0675c	e59f0048	 ldr         r0, [pc, #0x48]
  06760	eb000000	 bl          NKDbgPrintfW
  06764	e3a03001	 mov         r3, #1
  06768	e58d3118	 str         r3, [sp, #0x118]
  0676c	ea000001	 b           |$LN41@LoadEnpoin|
  06770		 |$LN40@LoadEnpoin|
  06770	e3a03000	 mov         r3, #0
  06774	e58d3118	 str         r3, [sp, #0x118]
  06778		 |$LN41@LoadEnpoin|

; 2541 :         return FALSE;

  06778	e59d00b4	 ldr         r0, [sp, #0xB4]
  0677c	eb000000	 bl          __security_check_cookie
  06780	e3a03000	 mov         r3, #0
  06784	e58d30cc	 str         r3, [sp, #0xCC]
  06788	ea000003	 b           |$LN34@LoadEnpoin|
  0678c		 |$LN2@LoadEnpoin|

; 2542 :     }
; 2543 : 
; 2544 :     return TRUE;

  0678c	e59d00b4	 ldr         r0, [sp, #0xB4]
  06790	eb000000	 bl          __security_check_cookie
  06794	e3a03001	 mov         r3, #1
  06798	e58d30cc	 str         r3, [sp, #0xCC]
  0679c		 |$LN34@LoadEnpoin|

; 2545 : }

  0679c	e59d00cc	 ldr         r0, [sp, #0xCC]
  067a0	e28ddf47	 add         sp, sp, #0x47, 30
  067a4	e89d6000	 ldmia       sp, {sp, lr}
  067a8	e12fff1e	 bx          lr
  067ac		 |$LN45@LoadEnpoin|
  067ac		 |$LN46@LoadEnpoin|
  067ac	00000000	 DCD         |??_C@_1JO@JBNPPFHL@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@|
  067b0		 |$LN47@LoadEnpoin|
  067b0	00000000	 DCD         |dpCurSettings|
  067b4		 |$LN48@LoadEnpoin|
  067b4	00000000	 DCD         |??_C@_1O@GHFNHFJG@?$AAS?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?$AA@|
  067b8		 |$LN49@LoadEnpoin|
  067b8	00000000	 DCD         |??_C@_1O@NNPHCMKB@?$AAD?$AAo?$AAu?$AAb?$AAl?$AAe?$AA?$AA@|
  067bc		 |$LN50@LoadEnpoin|
  067bc	00000000	 DCD         |??_C@_1KO@HEOICAB@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@|
  067c0		 |$LN51@LoadEnpoin|
  067c0	00000000	 DCD         |??_C@_19PNJNFAOM@?$AAF?$AAi?$AAf?$AAo?$AA?$AA@|
  067c4		 |$LN52@LoadEnpoin|
  067c4	00000000	 DCD         |??_C@_1JO@JPFEPGFD@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAL?$AAo?$AAa?$AAd?$AAE?$AAn?$AAp?$AAo?$AAi?$AAn?$AAt?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAe@|
  067c8		 |$LN53@LoadEnpoin|
  067c8	00000000	 DCD         |??_C@_17KCFFABIP@?$AAa?$AAn?$AAy?$AA?$AA@|
  067cc		 |$LN54@LoadEnpoin|
  067cc	00000000	 DCD         |??_C@_1BE@OLFPFCKI@?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?$AA@|
  067d0		 |$LN55@LoadEnpoin|
  067d0	00000000	 DCD         |??_C@_1BI@KEIBCIAP@?$AAi?$AAs?$AAo?$AAc?$AAh?$AAr?$AAo?$AAn?$AAo?$AAu?$AAs?$AA?$AA@|
  067d4		 |$LN56@LoadEnpoin|
  067d4	00000000	 DCD         |??_C@_19LOMGGDBD@?$AAb?$AAu?$AAl?$AAk?$AA?$AA@|
  067d8		 |$LN57@LoadEnpoin|
  067d8	00000000	 DCD         |??_C@_19BIEPDBPA@?$AAT?$AAy?$AAp?$AAe?$AA?$AA@|
  067dc		 |$LN58@LoadEnpoin|
  067dc	00000000	 DCD         |??_C@_15BNKBCKPG@?$AAI?$AAN?$AA?$AA@|
  067e0		 |$LN59@LoadEnpoin|
  067e0	00000000	 DCD         |??_C@_17HCEMPBGG@?$AAO?$AAU?$AAT?$AA?$AA@|
  067e4		 |$LN60@LoadEnpoin|
  067e4	00000000	 DCD         |??_C@_1CE@LJDLLKHL@?$AA?$CF?$AAs?$AA?2?$AAC?$AAO?$AAN?$AAF?$AAI?$AAG?$AA?2?$AAE?$AAP?$AA?$CF?$AAu?$AA?2?$AA?$CF?$AAs?$AA?$AA@|
  067e8		 |$LN61@LoadEnpoin|
  067e8	00000000	 DCD         |__security_cookie|
  067ec		 |$M43711|

			 ENDP  ; |?LoadEnpointConfiguration@CHW@@AAAHXZ|, CHW::LoadEnpointConfiguration

	EXPORT	|?Byte2FifoSize@CHW@@AAAEG@Z|		; CHW::Byte2FifoSize

  000f8			 AREA	 |.pdata|, PDATA
|$T43745| DCD	|$LN24@Initialise|
	DCD	0x4001a704
; Function compile flags: /Odtp

  067ec			 AREA	 |.text|, CODE, ARM

  067ec		 |?InitialiseFIFOs@CHW@@AAAXXZ| PROC	; CHW::InitialiseFIFOs

; 2558 : {

  067ec		 |$LN24@Initialise|
  067ec	e1a0c00d	 mov         r12, sp
  067f0	e92d0001	 stmdb       sp!, {r0}
  067f4	e92d5000	 stmdb       sp!, {r12, lr}
  067f8	e24dd024	 sub         sp, sp, #0x24
  067fc		 |$M43742|

; 2559 :     // Use configurable static FIFO alloc
; 2560 : 
; 2561 :     UINT8 fifoSize, epNum, DPB;
; 2562 :     UINT16 byteFifoSize;
; 2563 : 
; 2564 :     m_wFifoOffset = 0;

  067fc	e59d302c	 ldr         r3, [sp, #0x2C]
  06800	e2832f67	 add         r2, r3, #0x67, 30
  06804	e3a03000	 mov         r3, #0
  06808	e1c230b0	 strh        r3, [r2]

; 2565 : 
; 2566 :     // Configure control EP0
; 2567 :     byteFifoSize = 64; // 64 bytes

  0680c	e3a03040	 mov         r3, #0x40
  06810	e1cd30b2	 strh        r3, [sp, #2]

; 2568 :     fifoSize = Byte2FifoSize(byteFifoSize);

  06814	e1dd10b2	 ldrh        r1, [sp, #2]
  06818	e59d002c	 ldr         r0, [sp, #0x2C]
  0681c	eb000000	 bl          |?Byte2FifoSize@CHW@@AAAEG@Z|
  06820	e5cd0005	 strb        r0, [sp, #5]
  06824	e5dd3005	 ldrb        r3, [sp, #5]
  06828	e5cd3004	 strb        r3, [sp, #4]

; 2569 :     DEBUGCHK(fifoSize != (UINT8)-1);

  0682c	e5dd3004	 ldrb        r3, [sp, #4]
  06830	e35300ff	 cmp         r3, #0xFF
  06834	0a000002	 beq         |$LN12@Initialise|
  06838	e3a03001	 mov         r3, #1
  0683c	e58d3008	 str         r3, [sp, #8]
  06840	ea000008	 b           |$LN13@Initialise|
  06844		 |$LN12@Initialise|
  06844	e3a03c0a	 mov         r3, #0xA, 24
  06848	e3833009	 orr         r3, r3, #9
  0684c	e59f2630	 ldr         r2, [pc, #0x630]
  06850	e59f1628	 ldr         r1, [pc, #0x628]
  06854	e59f0620	 ldr         r0, [pc, #0x620]
  06858	eb000000	 bl          NKDbgPrintfW
  0685c	e6000010	 __debugbreak_ce
  06860	e3a03000	 mov         r3, #0
  06864	e58d3008	 str         r3, [sp, #8]
  06868		 |$LN13@Initialise|

; 2570 : 
; 2571 :     // Index register
; 2572 :     WRITE_PORT_UCHAR( (m_portBase + USB_INDEX_REG_OFFSET), 0);

  06868	e59d302c	 ldr         r3, [sp, #0x2C]
  0686c	e2833f52	 add         r3, r3, #0x52, 30
  06870	e5933000	 ldr         r3, [r3]
  06874	e2833b01	 add         r3, r3, #1, 22
  06878	e283200e	 add         r2, r3, #0xE
  0687c	e3a03000	 mov         r3, #0
  06880	e5c23000	 strb        r3, [r2]

; 2573 : 
; 2574 :     // Adjust EP FIFO pointers
; 2575 :     WRITE_PORT_USHORT( (m_portBase+MGC_O_HDRC_TXFIFOADD), m_wFifoOffset >> 3);

  06884	e59d302c	 ldr         r3, [sp, #0x2C]
  06888	e2833f67	 add         r3, r3, #0x67, 30
  0688c	e1d330b0	 ldrh        r3, [r3]
  06890	e1a031c3	 mov         r3, r3, asr #3
  06894	e1a02803	 mov         r2, r3, lsl #16
  06898	e1a02822	 mov         r2, r2, lsr #16
  0689c	e59d302c	 ldr         r3, [sp, #0x2C]
  068a0	e2833f52	 add         r3, r3, #0x52, 30
  068a4	e5933000	 ldr         r3, [r3]
  068a8	e2833b01	 add         r3, r3, #1, 22
  068ac	e2833064	 add         r3, r3, #0x64
  068b0	e1c320b0	 strh        r2, [r3]

; 2576 :     WRITE_PORT_USHORT( (m_portBase+MGC_O_HDRC_RXFIFOADD), m_wFifoOffset >> 3);

  068b4	e59d302c	 ldr         r3, [sp, #0x2C]
  068b8	e2833f67	 add         r3, r3, #0x67, 30
  068bc	e1d330b0	 ldrh        r3, [r3]
  068c0	e1a031c3	 mov         r3, r3, asr #3
  068c4	e1a02803	 mov         r2, r3, lsl #16
  068c8	e1a02822	 mov         r2, r2, lsr #16
  068cc	e59d302c	 ldr         r3, [sp, #0x2C]
  068d0	e2833f52	 add         r3, r3, #0x52, 30
  068d4	e5933000	 ldr         r3, [r3]
  068d8	e2833b01	 add         r3, r3, #1, 22
  068dc	e2833066	 add         r3, r3, #0x66
  068e0	e1c320b0	 strh        r2, [r3]

; 2577 : 
; 2578 :     // Assign EP FIFO size
; 2579 :     WRITE_PORT_UCHAR( (m_portBase+MGC_O_HDRC_TXFIFOSZ), fifoSize);

  068e4	e59d302c	 ldr         r3, [sp, #0x2C]
  068e8	e2833f52	 add         r3, r3, #0x52, 30
  068ec	e5933000	 ldr         r3, [r3]
  068f0	e2833b01	 add         r3, r3, #1, 22
  068f4	e2832062	 add         r2, r3, #0x62
  068f8	e5dd3004	 ldrb        r3, [sp, #4]
  068fc	e5c23000	 strb        r3, [r2]

; 2580 :     WRITE_PORT_UCHAR( (m_portBase+MGC_O_HDRC_RXFIFOSZ), fifoSize);

  06900	e59d302c	 ldr         r3, [sp, #0x2C]
  06904	e2833f52	 add         r3, r3, #0x52, 30
  06908	e5933000	 ldr         r3, [r3]
  0690c	e2833b01	 add         r3, r3, #1, 22
  06910	e2832063	 add         r2, r3, #0x63
  06914	e5dd3004	 ldrb        r3, [sp, #4]
  06918	e5c23000	 strb        r3, [r2]

; 2581 : 
; 2582 :     m_wFifoOffset = m_wFifoOffset + byteFifoSize;

  0691c	e59d302c	 ldr         r3, [sp, #0x2C]
  06920	e2833f67	 add         r3, r3, #0x67, 30
  06924	e1d330b0	 ldrh        r3, [r3]
  06928	e1a02003	 mov         r2, r3
  0692c	e1dd30b2	 ldrh        r3, [sp, #2]
  06930	e0823003	 add         r3, r2, r3
  06934	e1a02803	 mov         r2, r3, lsl #16
  06938	e1a02822	 mov         r2, r2, lsr #16
  0693c	e59d302c	 ldr         r3, [sp, #0x2C]
  06940	e2833f67	 add         r3, r3, #0x67, 30
  06944	e1c320b0	 strh        r2, [r3]

; 2583 : 
; 2584 :     // Configure EP<1-4>
; 2585 :     for (epNum = 0; epNum < (MGC_MAX_USB_ENDS - 1); epNum ++)

  06948	e3a03000	 mov         r3, #0
  0694c	e5cd3001	 strb        r3, [sp, #1]
  06950	ea000003	 b           |$LN9@Initialise|
  06954		 |$LN8@Initialise|
  06954	e5dd3001	 ldrb        r3, [sp, #1]
  06958	e2833001	 add         r3, r3, #1
  0695c	e20330ff	 and         r3, r3, #0xFF
  06960	e5cd3001	 strb        r3, [sp, #1]
  06964		 |$LN9@Initialise|
  06964	e5dd3001	 ldrb        r3, [sp, #1]
  06968	e353000f	 cmp         r3, #0xF
  0696c	aa00013f	 bge         |$LN7@Initialise|

; 2586 :     {
; 2587 :         // Index register
; 2588 :         WRITE_PORT_UCHAR( (m_portBase + USB_INDEX_REG_OFFSET), (epNum + 1));

  06970	e5dd3001	 ldrb        r3, [sp, #1]
  06974	e2833001	 add         r3, r3, #1
  06978	e20320ff	 and         r2, r3, #0xFF
  0697c	e59d302c	 ldr         r3, [sp, #0x2C]
  06980	e2833f52	 add         r3, r3, #0x52, 30
  06984	e5933000	 ldr         r3, [r3]
  06988	e2833b01	 add         r3, r3, #1, 22
  0698c	e283300e	 add         r3, r3, #0xE
  06990	e5c32000	 strb        r2, [r3]

; 2589 : 
; 2590 :         ///////////////////////////////////////////////////////////////////////////
; 2591 :         // Configure in
; 2592 :         DPB = 0;

  06994	e3a03000	 mov         r3, #0
  06998	e5cd3000	 strb        r3, [sp]

; 2593 : 
; 2594 :         if (m_EpInConfig[ epNum ].epType != TYPE_UNKNOWN)

  0699c	e59d302c	 ldr         r3, [sp, #0x2C]
  069a0	e2831d09	 add         r1, r3, #9, 26
  069a4	e5dd3001	 ldrb        r3, [sp, #1]
  069a8	e1a02003	 mov         r2, r3
  069ac	e3a03008	 mov         r3, #8
  069b0	e0030392	 mul         r3, r2, r3
  069b4	e0813003	 add         r3, r1, r3
  069b8	e2833001	 add         r3, r3, #1
  069bc	e5d33000	 ldrb        r3, [r3]
  069c0	e3530000	 cmp         r3, #0
  069c4	0a00001c	 beq         |$LN6@Initialise|

; 2595 :         {
; 2596 :             byteFifoSize = m_EpInConfig[ epNum ].fifoSize;

  069c8	e59d302c	 ldr         r3, [sp, #0x2C]
  069cc	e2831d09	 add         r1, r3, #9, 26
  069d0	e5dd3001	 ldrb        r3, [sp, #1]
  069d4	e1a02003	 mov         r2, r3
  069d8	e3a03008	 mov         r3, #8
  069dc	e0030392	 mul         r3, r2, r3
  069e0	e0813003	 add         r3, r1, r3
  069e4	e2833006	 add         r3, r3, #6
  069e8	e1d330b0	 ldrh        r3, [r3]
  069ec	e1cd30b2	 strh        r3, [sp, #2]

; 2597 : 
; 2598 :             if (m_EpInConfig[ epNum ].fDBMode)

  069f0	e59d302c	 ldr         r3, [sp, #0x2C]
  069f4	e2831d09	 add         r1, r3, #9, 26
  069f8	e5dd3001	 ldrb        r3, [sp, #1]
  069fc	e1a02003	 mov         r2, r3
  06a00	e3a03008	 mov         r3, #8
  06a04	e0030392	 mul         r3, r2, r3
  06a08	e0813003	 add         r3, r1, r3
  06a0c	e2833003	 add         r3, r3, #3
  06a10	e5d33000	 ldrb        r3, [r3]
  06a14	e3530000	 cmp         r3, #0
  06a18	0a000006	 beq         |$LN5@Initialise|

; 2599 :             {
; 2600 :                 // Double buffered
; 2601 :                 byteFifoSize <<= 1;

  06a1c	e1dd30b2	 ldrh        r3, [sp, #2]
  06a20	e1a03083	 mov         r3, r3, lsl #1
  06a24	e1a03803	 mov         r3, r3, lsl #16
  06a28	e1a03823	 mov         r3, r3, lsr #16
  06a2c	e1cd30b2	 strh        r3, [sp, #2]

; 2602 :                 DPB = (1 << 4);

  06a30	e3a03010	 mov         r3, #0x10
  06a34	e5cd3000	 strb        r3, [sp]
  06a38		 |$LN5@Initialise|

; 2603 :             }
; 2604 :         }
; 2605 :         else

  06a38	ea000001	 b           |$LN4@Initialise|
  06a3c		 |$LN6@Initialise|

; 2606 :         {
; 2607 :             // 8 bytes minimum
; 2608 :             byteFifoSize = 8;

  06a3c	e3a03008	 mov         r3, #8
  06a40	e1cd30b2	 strh        r3, [sp, #2]
  06a44		 |$LN4@Initialise|

; 2609 :         }
; 2610 : 
; 2611 :         fifoSize = Byte2FifoSize(byteFifoSize);

  06a44	e1dd10b2	 ldrh        r1, [sp, #2]
  06a48	e59d002c	 ldr         r0, [sp, #0x2C]
  06a4c	eb000000	 bl          |?Byte2FifoSize@CHW@@AAAEG@Z|
  06a50	e5cd000c	 strb        r0, [sp, #0xC]
  06a54	e5dd300c	 ldrb        r3, [sp, #0xC]
  06a58	e5cd3004	 strb        r3, [sp, #4]

; 2612 : 
; 2613 :         DEBUGCHK(fifoSize != (UINT8)-1);

  06a5c	e5dd3004	 ldrb        r3, [sp, #4]
  06a60	e35300ff	 cmp         r3, #0xFF
  06a64	0a000002	 beq         |$LN14@Initialise|
  06a68	e3a03001	 mov         r3, #1
  06a6c	e58d3010	 str         r3, [sp, #0x10]
  06a70	ea000008	 b           |$LN15@Initialise|
  06a74		 |$LN14@Initialise|
  06a74	e3a03c0a	 mov         r3, #0xA, 24
  06a78	e3833035	 orr         r3, r3, #0x35
  06a7c	e59f2400	 ldr         r2, [pc, #0x400]
  06a80	e59f13f8	 ldr         r1, [pc, #0x3F8]
  06a84	e59f03f0	 ldr         r0, [pc, #0x3F0]
  06a88	eb000000	 bl          NKDbgPrintfW
  06a8c	e6000010	 __debugbreak_ce
  06a90	e3a03000	 mov         r3, #0
  06a94	e58d3010	 str         r3, [sp, #0x10]
  06a98		 |$LN15@Initialise|

; 2614 :         DEBUGCHK((m_wFifoOffset + byteFifoSize) <= MGC_FIFO_RAM_SIZE);

  06a98	e59d302c	 ldr         r3, [sp, #0x2C]
  06a9c	e2833f67	 add         r3, r3, #0x67, 30
  06aa0	e1d330b0	 ldrh        r3, [r3]
  06aa4	e1a02003	 mov         r2, r3
  06aa8	e1dd30b2	 ldrh        r3, [sp, #2]
  06aac	e0823003	 add         r3, r2, r3
  06ab0	e3530902	 cmp         r3, #2, 18
  06ab4	ca000002	 bgt         |$LN16@Initialise|
  06ab8	e3a03001	 mov         r3, #1
  06abc	e58d3014	 str         r3, [sp, #0x14]
  06ac0	ea000008	 b           |$LN17@Initialise|
  06ac4		 |$LN16@Initialise|
  06ac4	e3a03c0a	 mov         r3, #0xA, 24
  06ac8	e3833036	 orr         r3, r3, #0x36
  06acc	e59f23b0	 ldr         r2, [pc, #0x3B0]
  06ad0	e59f13a8	 ldr         r1, [pc, #0x3A8]
  06ad4	e59f03a0	 ldr         r0, [pc, #0x3A0]
  06ad8	eb000000	 bl          NKDbgPrintfW
  06adc	e6000010	 __debugbreak_ce
  06ae0	e3a03000	 mov         r3, #0
  06ae4	e58d3014	 str         r3, [sp, #0x14]
  06ae8		 |$LN17@Initialise|

; 2615 : 
; 2616 :         // Adjust EP FIFO pointer
; 2617 :         WRITE_PORT_USHORT( (m_portBase+MGC_O_HDRC_RXFIFOADD), m_wFifoOffset >> 3);

  06ae8	e59d302c	 ldr         r3, [sp, #0x2C]
  06aec	e2833f67	 add         r3, r3, #0x67, 30
  06af0	e1d330b0	 ldrh        r3, [r3]
  06af4	e1a031c3	 mov         r3, r3, asr #3
  06af8	e1a02803	 mov         r2, r3, lsl #16
  06afc	e1a02822	 mov         r2, r2, lsr #16
  06b00	e59d302c	 ldr         r3, [sp, #0x2C]
  06b04	e2833f52	 add         r3, r3, #0x52, 30
  06b08	e5933000	 ldr         r3, [r3]
  06b0c	e2833b01	 add         r3, r3, #1, 22
  06b10	e2833066	 add         r3, r3, #0x66
  06b14	e1c320b0	 strh        r2, [r3]

; 2618 :         m_wFifoOffset = m_wFifoOffset + byteFifoSize;

  06b18	e59d302c	 ldr         r3, [sp, #0x2C]
  06b1c	e2833f67	 add         r3, r3, #0x67, 30
  06b20	e1d330b0	 ldrh        r3, [r3]
  06b24	e1a02003	 mov         r2, r3
  06b28	e1dd30b2	 ldrh        r3, [sp, #2]
  06b2c	e0823003	 add         r3, r2, r3
  06b30	e1a02803	 mov         r2, r3, lsl #16
  06b34	e1a02822	 mov         r2, r2, lsr #16
  06b38	e59d302c	 ldr         r3, [sp, #0x2C]
  06b3c	e2833f67	 add         r3, r3, #0x67, 30
  06b40	e1c320b0	 strh        r2, [r3]

; 2619 : 
; 2620 :         // Assign EP FIFO size
; 2621 :         WRITE_PORT_UCHAR( (m_portBase+MGC_O_HDRC_RXFIFOSZ), fifoSize | DPB);

  06b44	e5dd3004	 ldrb        r3, [sp, #4]
  06b48	e1a02003	 mov         r2, r3
  06b4c	e5dd3000	 ldrb        r3, [sp]
  06b50	e1823003	 orr         r3, r2, r3
  06b54	e20320ff	 and         r2, r3, #0xFF
  06b58	e59d302c	 ldr         r3, [sp, #0x2C]
  06b5c	e2833f52	 add         r3, r3, #0x52, 30
  06b60	e5933000	 ldr         r3, [r3]
  06b64	e2833b01	 add         r3, r3, #1, 22
  06b68	e2833063	 add         r3, r3, #0x63
  06b6c	e5c32000	 strb        r2, [r3]

; 2622 : 
; 2623 :         ///////////////////////////////////////////////////////////////////////////
; 2624 :         // Configure out
; 2625 :         DPB = 0;

  06b70	e3a03000	 mov         r3, #0
  06b74	e5cd3000	 strb        r3, [sp]

; 2626 : 
; 2627 :         if (m_EpOutConfig[ epNum ].epType != TYPE_UNKNOWN)

  06b78	e59d302c	 ldr         r3, [sp, #0x2C]
  06b7c	e2831fae	 add         r1, r3, #0xAE, 30
  06b80	e5dd3001	 ldrb        r3, [sp, #1]
  06b84	e1a02003	 mov         r2, r3
  06b88	e3a03008	 mov         r3, #8
  06b8c	e0030392	 mul         r3, r2, r3
  06b90	e0813003	 add         r3, r1, r3
  06b94	e2833001	 add         r3, r3, #1
  06b98	e5d33000	 ldrb        r3, [r3]
  06b9c	e3530000	 cmp         r3, #0
  06ba0	0a00001c	 beq         |$LN3@Initialise|

; 2628 :         {
; 2629 :             byteFifoSize = m_EpOutConfig[ epNum ].fifoSize;

  06ba4	e59d302c	 ldr         r3, [sp, #0x2C]
  06ba8	e2831fae	 add         r1, r3, #0xAE, 30
  06bac	e5dd3001	 ldrb        r3, [sp, #1]
  06bb0	e1a02003	 mov         r2, r3
  06bb4	e3a03008	 mov         r3, #8
  06bb8	e0030392	 mul         r3, r2, r3
  06bbc	e0813003	 add         r3, r1, r3
  06bc0	e2833006	 add         r3, r3, #6
  06bc4	e1d330b0	 ldrh        r3, [r3]
  06bc8	e1cd30b2	 strh        r3, [sp, #2]

; 2630 : 
; 2631 :             if (m_EpOutConfig[ epNum ].fDBMode)

  06bcc	e59d302c	 ldr         r3, [sp, #0x2C]
  06bd0	e2831fae	 add         r1, r3, #0xAE, 30
  06bd4	e5dd3001	 ldrb        r3, [sp, #1]
  06bd8	e1a02003	 mov         r2, r3
  06bdc	e3a03008	 mov         r3, #8
  06be0	e0030392	 mul         r3, r2, r3
  06be4	e0813003	 add         r3, r1, r3
  06be8	e2833003	 add         r3, r3, #3
  06bec	e5d33000	 ldrb        r3, [r3]
  06bf0	e3530000	 cmp         r3, #0
  06bf4	0a000006	 beq         |$LN2@Initialise|

; 2632 :             {
; 2633 :                 // Double buffered
; 2634 :                 byteFifoSize <<= 1;

  06bf8	e1dd30b2	 ldrh        r3, [sp, #2]
  06bfc	e1a03083	 mov         r3, r3, lsl #1
  06c00	e1a03803	 mov         r3, r3, lsl #16
  06c04	e1a03823	 mov         r3, r3, lsr #16
  06c08	e1cd30b2	 strh        r3, [sp, #2]

; 2635 :                 DPB = (1 << 4);

  06c0c	e3a03010	 mov         r3, #0x10
  06c10	e5cd3000	 strb        r3, [sp]
  06c14		 |$LN2@Initialise|

; 2636 :             }
; 2637 :         }
; 2638 :         else

  06c14	ea000001	 b           |$LN1@Initialise|
  06c18		 |$LN3@Initialise|

; 2639 :         {
; 2640 :             // 8 bytes minimum
; 2641 :             byteFifoSize = 8;

  06c18	e3a03008	 mov         r3, #8
  06c1c	e1cd30b2	 strh        r3, [sp, #2]
  06c20		 |$LN1@Initialise|

; 2642 :         }
; 2643 : 
; 2644 :         fifoSize = Byte2FifoSize(byteFifoSize);

  06c20	e1dd10b2	 ldrh        r1, [sp, #2]
  06c24	e59d002c	 ldr         r0, [sp, #0x2C]
  06c28	eb000000	 bl          |?Byte2FifoSize@CHW@@AAAEG@Z|
  06c2c	e5cd0018	 strb        r0, [sp, #0x18]
  06c30	e5dd3018	 ldrb        r3, [sp, #0x18]
  06c34	e5cd3004	 strb        r3, [sp, #4]

; 2645 : 
; 2646 :         DEBUGCHK(fifoSize != (UINT8)-1);

  06c38	e5dd3004	 ldrb        r3, [sp, #4]
  06c3c	e35300ff	 cmp         r3, #0xFF
  06c40	0a000002	 beq         |$LN18@Initialise|
  06c44	e3a03001	 mov         r3, #1
  06c48	e58d301c	 str         r3, [sp, #0x1C]
  06c4c	ea000008	 b           |$LN19@Initialise|
  06c50		 |$LN18@Initialise|
  06c50	e3a03c0a	 mov         r3, #0xA, 24
  06c54	e3833056	 orr         r3, r3, #0x56
  06c58	e59f2224	 ldr         r2, [pc, #0x224]
  06c5c	e59f121c	 ldr         r1, [pc, #0x21C]
  06c60	e59f0214	 ldr         r0, [pc, #0x214]
  06c64	eb000000	 bl          NKDbgPrintfW
  06c68	e6000010	 __debugbreak_ce
  06c6c	e3a03000	 mov         r3, #0
  06c70	e58d301c	 str         r3, [sp, #0x1C]
  06c74		 |$LN19@Initialise|

; 2647 :         DEBUGCHK((m_wFifoOffset + byteFifoSize) <= MGC_FIFO_RAM_SIZE);

  06c74	e59d302c	 ldr         r3, [sp, #0x2C]
  06c78	e2833f67	 add         r3, r3, #0x67, 30
  06c7c	e1d330b0	 ldrh        r3, [r3]
  06c80	e1a02003	 mov         r2, r3
  06c84	e1dd30b2	 ldrh        r3, [sp, #2]
  06c88	e0823003	 add         r3, r2, r3
  06c8c	e3530902	 cmp         r3, #2, 18
  06c90	ca000002	 bgt         |$LN20@Initialise|
  06c94	e3a03001	 mov         r3, #1
  06c98	e58d3020	 str         r3, [sp, #0x20]
  06c9c	ea000008	 b           |$LN21@Initialise|
  06ca0		 |$LN20@Initialise|
  06ca0	e3a03c0a	 mov         r3, #0xA, 24
  06ca4	e3833057	 orr         r3, r3, #0x57
  06ca8	e59f21d4	 ldr         r2, [pc, #0x1D4]
  06cac	e59f11cc	 ldr         r1, [pc, #0x1CC]
  06cb0	e59f01c4	 ldr         r0, [pc, #0x1C4]
  06cb4	eb000000	 bl          NKDbgPrintfW
  06cb8	e6000010	 __debugbreak_ce
  06cbc	e3a03000	 mov         r3, #0
  06cc0	e58d3020	 str         r3, [sp, #0x20]
  06cc4		 |$LN21@Initialise|

; 2648 : 
; 2649 :         // Adjust EP FIFO pointer
; 2650 :         WRITE_PORT_USHORT( (m_portBase+MGC_O_HDRC_TXFIFOADD), m_wFifoOffset >> 3);

  06cc4	e59d302c	 ldr         r3, [sp, #0x2C]
  06cc8	e2833f67	 add         r3, r3, #0x67, 30
  06ccc	e1d330b0	 ldrh        r3, [r3]
  06cd0	e1a031c3	 mov         r3, r3, asr #3
  06cd4	e1a02803	 mov         r2, r3, lsl #16
  06cd8	e1a02822	 mov         r2, r2, lsr #16
  06cdc	e59d302c	 ldr         r3, [sp, #0x2C]
  06ce0	e2833f52	 add         r3, r3, #0x52, 30
  06ce4	e5933000	 ldr         r3, [r3]
  06ce8	e2833b01	 add         r3, r3, #1, 22
  06cec	e2833064	 add         r3, r3, #0x64
  06cf0	e1c320b0	 strh        r2, [r3]

; 2651 :         m_wFifoOffset = m_wFifoOffset + byteFifoSize;

  06cf4	e59d302c	 ldr         r3, [sp, #0x2C]
  06cf8	e2833f67	 add         r3, r3, #0x67, 30
  06cfc	e1d330b0	 ldrh        r3, [r3]
  06d00	e1a02003	 mov         r2, r3
  06d04	e1dd30b2	 ldrh        r3, [sp, #2]
  06d08	e0823003	 add         r3, r2, r3
  06d0c	e1a02803	 mov         r2, r3, lsl #16
  06d10	e1a02822	 mov         r2, r2, lsr #16
  06d14	e59d302c	 ldr         r3, [sp, #0x2C]
  06d18	e2833f67	 add         r3, r3, #0x67, 30
  06d1c	e1c320b0	 strh        r2, [r3]

; 2652 : 
; 2653 :         // Assign EP FIFO size
; 2654 :         WRITE_PORT_UCHAR( (m_portBase+MGC_O_HDRC_TXFIFOSZ), fifoSize | DPB);

  06d20	e5dd3004	 ldrb        r3, [sp, #4]
  06d24	e1a02003	 mov         r2, r3
  06d28	e5dd3000	 ldrb        r3, [sp]
  06d2c	e1823003	 orr         r3, r2, r3
  06d30	e20320ff	 and         r2, r3, #0xFF
  06d34	e59d302c	 ldr         r3, [sp, #0x2C]
  06d38	e2833f52	 add         r3, r3, #0x52, 30
  06d3c	e5933000	 ldr         r3, [r3]
  06d40	e2833b01	 add         r3, r3, #1, 22
  06d44	e2833062	 add         r3, r3, #0x62
  06d48	e5c32000	 strb        r2, [r3]

; 2655 : 
; 2656 : 
; 2657 :         // Clean any previous setup
; 2658 :         WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(epNum, MGC_O_HDRC_RXTYPE)), 0x0);

  06d4c	e59d302c	 ldr         r3, [sp, #0x2C]
  06d50	e2831f52	 add         r1, r3, #0x52, 30
  06d54	e5dd3001	 ldrb        r3, [sp, #1]
  06d58	e1a02003	 mov         r2, r3
  06d5c	e3a03010	 mov         r3, #0x10
  06d60	e0030392	 mul         r3, r2, r3
  06d64	e2833c05	 add         r3, r3, #5, 24
  06d68	e283200c	 add         r2, r3, #0xC
  06d6c	e5913000	 ldr         r3, [r1]
  06d70	e0832002	 add         r2, r3, r2
  06d74	e3a03000	 mov         r3, #0
  06d78	e5c23000	 strb        r3, [r2]

; 2659 :         WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(epNum, MGC_O_HDRC_TXTYPE)), 0x0);

  06d7c	e59d302c	 ldr         r3, [sp, #0x2C]
  06d80	e2831f52	 add         r1, r3, #0x52, 30
  06d84	e5dd3001	 ldrb        r3, [sp, #1]
  06d88	e1a02003	 mov         r2, r3
  06d8c	e3a03010	 mov         r3, #0x10
  06d90	e0030392	 mul         r3, r2, r3
  06d94	e2833c05	 add         r3, r3, #5, 24
  06d98	e283200a	 add         r2, r3, #0xA
  06d9c	e5913000	 ldr         r3, [r1]
  06da0	e0832002	 add         r2, r3, r2
  06da4	e3a03000	 mov         r3, #0
  06da8	e5c23000	 strb        r3, [r2]

; 2660 :         WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(epNum, MGC_O_HDRC_RXINTERVAL)), 0x0);

  06dac	e59d302c	 ldr         r3, [sp, #0x2C]
  06db0	e2831f52	 add         r1, r3, #0x52, 30
  06db4	e5dd3001	 ldrb        r3, [sp, #1]
  06db8	e1a02003	 mov         r2, r3
  06dbc	e3a03010	 mov         r3, #0x10
  06dc0	e0030392	 mul         r3, r2, r3
  06dc4	e2833c05	 add         r3, r3, #5, 24
  06dc8	e283200d	 add         r2, r3, #0xD
  06dcc	e5913000	 ldr         r3, [r1]
  06dd0	e0832002	 add         r2, r3, r2
  06dd4	e3a03000	 mov         r3, #0
  06dd8	e5c23000	 strb        r3, [r2]

; 2661 :         WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(epNum, MGC_O_HDRC_RXCSR)), 0);

  06ddc	e59d302c	 ldr         r3, [sp, #0x2C]
  06de0	e2831f52	 add         r1, r3, #0x52, 30
  06de4	e5dd3001	 ldrb        r3, [sp, #1]
  06de8	e1a02003	 mov         r2, r3
  06dec	e3a03010	 mov         r3, #0x10
  06df0	e0030392	 mul         r3, r2, r3
  06df4	e2833c05	 add         r3, r3, #5, 24
  06df8	e2832006	 add         r2, r3, #6
  06dfc	e5913000	 ldr         r3, [r1]
  06e00	e0832002	 add         r2, r3, r2
  06e04	e3a03000	 mov         r3, #0
  06e08	e1c230b0	 strh        r3, [r2]

; 2662 :         WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(epNum, MGC_O_HDRC_TXINTERVAL)), 0x0);

  06e0c	e59d302c	 ldr         r3, [sp, #0x2C]
  06e10	e2831f52	 add         r1, r3, #0x52, 30
  06e14	e5dd3001	 ldrb        r3, [sp, #1]
  06e18	e1a02003	 mov         r2, r3
  06e1c	e3a03010	 mov         r3, #0x10
  06e20	e0030392	 mul         r3, r2, r3
  06e24	e2833c05	 add         r3, r3, #5, 24
  06e28	e283200b	 add         r2, r3, #0xB
  06e2c	e5913000	 ldr         r3, [r1]
  06e30	e0832002	 add         r2, r3, r2
  06e34	e3a03000	 mov         r3, #0
  06e38	e5c23000	 strb        r3, [r2]

; 2663 :         WRITE_PORT_USHORT( (m_portBase + MGC_END_OFFSET(epNum, MGC_O_HDRC_TXCSR)), 0);

  06e3c	e59d302c	 ldr         r3, [sp, #0x2C]
  06e40	e2831f52	 add         r1, r3, #0x52, 30
  06e44	e5dd3001	 ldrb        r3, [sp, #1]
  06e48	e1a02003	 mov         r2, r3
  06e4c	e3a03010	 mov         r3, #0x10
  06e50	e0030392	 mul         r3, r2, r3
  06e54	e2833c05	 add         r3, r3, #5, 24
  06e58	e2832002	 add         r2, r3, #2
  06e5c	e5913000	 ldr         r3, [r1]
  06e60	e0832002	 add         r2, r3, r2
  06e64	e3a03000	 mov         r3, #0
  06e68	e1c230b0	 strh        r3, [r2]
  06e6c	eafffeb8	 b           |$LN8@Initialise|
  06e70		 |$LN7@Initialise|

; 2664 :     }
; 2665 : }

  06e70	e28dd024	 add         sp, sp, #0x24
  06e74	e89d6000	 ldmia       sp, {sp, lr}
  06e78	e12fff1e	 bx          lr
  06e7c		 |$LN25@Initialise|
  06e7c		 |$LN26@Initialise|
  06e7c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  06e80		 |$LN27@Initialise|
  06e80	00000000	 DCD         |dpCurSettings|
  06e84		 |$LN28@Initialise|
  06e84	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  06e88		 |$M43743|

			 ENDP  ; |?InitialiseFIFOs@CHW@@AAAXXZ|, CHW::InitialiseFIFOs

; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.hpp

  00000			 AREA	 |.pdata|, PDATA
|$T43755| DCD	|$LN9@Byte2FifoS|
	DCD	0x40002004
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Byte2FifoSize@CHW@@AAAEG@Z| PROC	; CHW::Byte2FifoSize

; 225  :     {

  00000		 |$LN9@Byte2FifoS|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M43752|

; 226  :         for (UINT8 i = 0; i < 10; i ++)

  00010	e3a03000	 mov         r3, #0
  00014	e5cd3000	 strb        r3, [sp]
  00018	ea000003	 b           |$LN4@Byte2FifoS|
  0001c		 |$LN3@Byte2FifoS|
  0001c	e5dd3000	 ldrb        r3, [sp]
  00020	e2833001	 add         r3, r3, #1
  00024	e20330ff	 and         r3, r3, #0xFF
  00028	e5cd3000	 strb        r3, [sp]
  0002c		 |$LN4@Byte2FifoS|
  0002c	e5dd3000	 ldrb        r3, [sp]
  00030	e353000a	 cmp         r3, #0xA
  00034	aa00000b	 bge         |$LN2@Byte2FifoS|

; 227  :         {
; 228  :             if (bs == (1 << (i + 3)))

  00038	e1dd31b4	 ldrh        r3, [sp, #0x14]
  0003c	e1a01003	 mov         r1, r3
  00040	e5dd3000	 ldrb        r3, [sp]
  00044	e2832003	 add         r2, r3, #3
  00048	e3a03001	 mov         r3, #1
  0004c	e1a03213	 mov         r3, r3, lsl r2
  00050	e1510003	 cmp         r1, r3
  00054	1a000002	 bne         |$LN1@Byte2FifoS|

; 229  :             {
; 230  :                 return i;

  00058	e5dd3000	 ldrb        r3, [sp]
  0005c	e5cd3004	 strb        r3, [sp, #4]
  00060	ea000002	 b           |$LN5@Byte2FifoS|
  00064		 |$LN1@Byte2FifoS|

; 231  :             }
; 232  :         }

  00064	eaffffec	 b           |$LN3@Byte2FifoS|
  00068		 |$LN2@Byte2FifoS|

; 233  : 
; 234  :         return (UINT8)-1;

  00068	e3a030ff	 mov         r3, #0xFF
  0006c	e5cd3004	 strb        r3, [sp, #4]
  00070		 |$LN5@Byte2FifoS|

; 235  :     }

  00070	e5dd0004	 ldrb        r0, [sp, #4]
  00074	e28dd008	 add         sp, sp, #8
  00078	e89d6000	 ldmia       sp, {sp, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$M43753|

			 ENDP  ; |?Byte2FifoSize@CHW@@AAAEG@Z|, CHW::Byte2FifoSize

	EXPORT	|??_C@_1HO@HBDHEAHO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@BHLIBBBH@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JA@MLIPDDJE@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@HPMAEEDM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi@| [ DATA ] ; `string'

  00100			 AREA	 |.pdata|, PDATA
|$T43821| DCD	|$LN76@Initialize@2|
	DCD	0x4003e604
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbh\chw.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@HBDHEAHO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "I"
	DCB	0x0, "N", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@BHLIBBBH@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "O"
	DCB	0x0, "U", 0x0, "T", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JA@MLIPDDJE@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e"
	DCB	0x0, "l", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@HPMAEEDM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi@| DCB "C"
	DCB	0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n"
	DCB	0x0, "s", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "i"
	DCB	0x0, "s", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  06e88			 AREA	 |.text|, CODE, ARM

  06e88		 |?InitializeTransaction@CHW@@QAAXIPAX0@Z| PROC ; CHW::InitializeTransaction

; 2679 : {

  06e88		 |$LN76@Initialize@2|
  06e88	e1a0c00d	 mov         r12, sp
  06e8c	e92d000f	 stmdb       sp!, {r0 - r3}
  06e90	e92d5010	 stmdb       sp!, {r4, r12, lr}
  06e94	e24dd0f8	 sub         sp, sp, #0xF8
  06e98		 |$M43818|

; 2680 :     UINT8 *pPkt, *pData, epType;
; 2681 :     DWORD CopyCount;
; 2682 :     UINT16 HOST_CSR;
; 2683 :     USBED *pED = (USBED *)pEndDesc;

  06e98	e59d310c	 ldr         r3, [sp, #0x10C]
  06e9c	e58d303c	 str         r3, [sp, #0x3C]

; 2684 :     USBTD *pTD = (USBTD *)pTransDesc;

  06ea0	e59d3110	 ldr         r3, [sp, #0x110]
  06ea4	e58d302c	 str         r3, [sp, #0x2C]

; 2685 : 
; 2686 :     // Just in case
; 2687 :     DEBUGCHK(pED != NULL);

  06ea8	e59d303c	 ldr         r3, [sp, #0x3C]
  06eac	e3530000	 cmp         r3, #0
  06eb0	0a000002	 beq         |$LN37@Initialize@2|
  06eb4	e3a03001	 mov         r3, #1
  06eb8	e58d30ac	 str         r3, [sp, #0xAC]
  06ebc	ea000008	 b           |$LN38@Initialize@2|
  06ec0		 |$LN37@Initialize@2|
  06ec0	e3a03c0a	 mov         r3, #0xA, 24
  06ec4	e383307f	 orr         r3, r3, #0x7F
  06ec8	e59f2f38	 ldr         r2, [pc, #0xF38]
  06ecc	e59f1f30	 ldr         r1, [pc, #0xF30]
  06ed0	e59f0f28	 ldr         r0, [pc, #0xF28]
  06ed4	eb000000	 bl          NKDbgPrintfW
  06ed8	e6000010	 __debugbreak_ce
  06edc	e3a03000	 mov         r3, #0
  06ee0	e58d30ac	 str         r3, [sp, #0xAC]
  06ee4		 |$LN38@Initialize@2|

; 2688 :     DEBUGCHK(pTD != NULL);

  06ee4	e59d302c	 ldr         r3, [sp, #0x2C]
  06ee8	e3530000	 cmp         r3, #0
  06eec	0a000002	 beq         |$LN39@Initialize@2|
  06ef0	e3a03001	 mov         r3, #1
  06ef4	e58d30b0	 str         r3, [sp, #0xB0]
  06ef8	ea000007	 b           |$LN40@Initialize@2|
  06efc		 |$LN39@Initialize@2|
  06efc	e3a03d2a	 mov         r3, #0x2A, 26
  06f00	e59f2f00	 ldr         r2, [pc, #0xF00]
  06f04	e59f1ef8	 ldr         r1, [pc, #0xEF8]
  06f08	e59f0ef0	 ldr         r0, [pc, #0xEF0]
  06f0c	eb000000	 bl          NKDbgPrintfW
  06f10	e6000010	 __debugbreak_ce
  06f14	e3a03000	 mov         r3, #0
  06f18	e58d30b0	 str         r3, [sp, #0xB0]
  06f1c		 |$LN40@Initialize@2|

; 2689 : 
; 2690 :     // Grab EP type
; 2691 :     epType = pED->bfAttributes & USB_ENDPOINT_TYPE_MASK;

  06f1c	e59d303c	 ldr         r3, [sp, #0x3C]
  06f20	e2833007	 add         r3, r3, #7
  06f24	e5d33000	 ldrb        r3, [r3]
  06f28	e2033003	 and         r3, r3, #3
  06f2c	e20330ff	 and         r3, r3, #0xFF
  06f30	e5cd3042	 strb        r3, [sp, #0x42]

; 2692 :     CopyCount = MIN(pED->bfMaxPacketSize, pTD->BytesToTransfer);

  06f34	e59d303c	 ldr         r3, [sp, #0x3C]
  06f38	e283300e	 add         r3, r3, #0xE
  06f3c	e1d320b0	 ldrh        r2, [r3]
  06f40	e59d302c	 ldr         r3, [sp, #0x2C]
  06f44	e2833058	 add         r3, r3, #0x58
  06f48	e5933000	 ldr         r3, [r3]
  06f4c	e1520003	 cmp         r2, r3
  06f50	2a000004	 bcs         |$LN41@Initialize@2|
  06f54	e59d303c	 ldr         r3, [sp, #0x3C]
  06f58	e283300e	 add         r3, r3, #0xE
  06f5c	e1d330b0	 ldrh        r3, [r3]
  06f60	e58d30b4	 str         r3, [sp, #0xB4]
  06f64	ea000003	 b           |$LN42@Initialize@2|
  06f68		 |$LN41@Initialize@2|
  06f68	e59d302c	 ldr         r3, [sp, #0x2C]
  06f6c	e2833058	 add         r3, r3, #0x58
  06f70	e5933000	 ldr         r3, [r3]
  06f74	e58d30b4	 str         r3, [sp, #0xB4]
  06f78		 |$LN42@Initialize@2|
  06f78	e59d30b4	 ldr         r3, [sp, #0xB4]
  06f7c	e58d3030	 str         r3, [sp, #0x30]

; 2693 : 
; 2694 :     // Fail transfer immediately when disconnected
; 2695 :     if ((m_portStatus & PORT_STATUS_DEVICE_ATTACHED) == 0)

  06f80	e59d3104	 ldr         r3, [sp, #0x104]
  06f84	e2833c01	 add         r3, r3, #1, 24
  06f88	e283309e	 add         r3, r3, #0x9E
  06f8c	e5d33000	 ldrb        r3, [r3]
  06f90	e3130002	 tst         r3, #2
  06f94	1a000020	 bne         |$LN34@Initialize@2|

; 2696 :     {
; 2697 :         DEBUGMSG(ZONE_WARNING, (L"CHW::InitializeTransaction: Device disconnected - failing transfer\r\n"));

  06f98	e59f3e64	 ldr         r3, [pc, #0xE64]
  06f9c	e5933440	 ldr         r3, [r3, #0x440]
  06fa0	e3130a02	 tst         r3, #2, 20
  06fa4	0a000004	 beq         |$LN43@Initialize@2|
  06fa8	e59f0e6c	 ldr         r0, [pc, #0xE6C]
  06fac	eb000000	 bl          NKDbgPrintfW
  06fb0	e3a03001	 mov         r3, #1
  06fb4	e58d30b8	 str         r3, [sp, #0xB8]
  06fb8	ea000001	 b           |$LN44@Initialize@2|
  06fbc		 |$LN43@Initialize@2|
  06fbc	e3a03000	 mov         r3, #0
  06fc0	e58d30b8	 str         r3, [sp, #0xB8]
  06fc4		 |$LN44@Initialize@2|

; 2698 :         *pTD->sTransfer.lpfComplete = TRUE;

  06fc4	e59d302c	 ldr         r3, [sp, #0x2C]
  06fc8	e2833040	 add         r3, r3, #0x40
  06fcc	e5932000	 ldr         r2, [r3]
  06fd0	e3a03001	 mov         r3, #1
  06fd4	e5823000	 str         r3, [r2]

; 2699 :         *pTD->sTransfer.lpdwError = USB_DEVICE_NOT_RESPONDING_ERROR;

  06fd8	e59d302c	 ldr         r3, [sp, #0x2C]
  06fdc	e2833048	 add         r3, r3, #0x48
  06fe0	e5932000	 ldr         r2, [r3]
  06fe4	e3a03005	 mov         r3, #5
  06fe8	e5823000	 str         r3, [r2]

; 2700 :         pED->bfHalted = TRUE;

  06fec	e59d303c	 ldr         r3, [sp, #0x3C]
  06ff0	e2832024	 add         r2, r3, #0x24
  06ff4	e3a03001	 mov         r3, #1
  06ff8	e5823000	 str         r3, [r2]

; 2701 :         pED->TransferStatus = STATUS_COMPLETE;

  06ffc	e59d303c	 ldr         r3, [sp, #0x3C]
  07000	e283201c	 add         r2, r3, #0x1C
  07004	e3a03002	 mov         r3, #2
  07008	e5823000	 str         r3, [r2]

; 2702 :         SetEvent(g_hUsbProcessingEvent);

  0700c	e59f3e00	 ldr         r3, [pc, #0xE00]
  07010	e5930000	 ldr         r0, [r3]
  07014	eb000000	 bl          SetEvent

; 2703 :         return;

  07018	ea000375	 b           |$LN35@Initialize@2|
  0701c		 |$LN34@Initialize@2|

; 2704 :     }
; 2705 : 
; 2706 :     // Cancel if powered down
; 2707 :     if (((SOhcdPdd*)m_pPddContext)->CurrentDx != D0)

  0701c	e59d3104	 ldr         r3, [sp, #0x104]
  07020	e2833e19	 add         r3, r3, #0x19, 28
  07024	e5933000	 ldr         r3, [r3]
  07028	e2833e22	 add         r3, r3, #0x22, 28
  0702c	e5933000	 ldr         r3, [r3]
  07030	e3530000	 cmp         r3, #0
  07034	0a000021	 beq         |$LN33@Initialize@2|

; 2708 :     {
; 2709 :         DEBUGMSG(ZONE_WARNING, (L"CHW::InitializeTransaction: Device powered down - cancelling transfer\r\n"));

  07038	e59f3dc4	 ldr         r3, [pc, #0xDC4]
  0703c	e5933440	 ldr         r3, [r3, #0x440]
  07040	e3130a02	 tst         r3, #2, 20
  07044	0a000004	 beq         |$LN45@Initialize@2|
  07048	e59f0dc8	 ldr         r0, [pc, #0xDC8]
  0704c	eb000000	 bl          NKDbgPrintfW
  07050	e3a03001	 mov         r3, #1
  07054	e58d30bc	 str         r3, [sp, #0xBC]
  07058	ea000001	 b           |$LN46@Initialize@2|
  0705c		 |$LN45@Initialize@2|
  0705c	e3a03000	 mov         r3, #0
  07060	e58d30bc	 str         r3, [sp, #0xBC]
  07064		 |$LN46@Initialize@2|

; 2710 :         *pTD->sTransfer.lpfComplete = TRUE;

  07064	e59d302c	 ldr         r3, [sp, #0x2C]
  07068	e2833040	 add         r3, r3, #0x40
  0706c	e5932000	 ldr         r2, [r3]
  07070	e3a03001	 mov         r3, #1
  07074	e5823000	 str         r3, [r2]

; 2711 :         *pTD->sTransfer.lpdwError = USB_CANCELED_ERROR;

  07078	e59d302c	 ldr         r3, [sp, #0x2C]
  0707c	e2833048	 add         r3, r3, #0x48
  07080	e5932000	 ldr         r2, [r3]
  07084	e3a03c01	 mov         r3, #1, 24
  07088	e3833001	 orr         r3, r3, #1
  0708c	e5823000	 str         r3, [r2]

; 2712 :         pED->bfHalted = TRUE;

  07090	e59d303c	 ldr         r3, [sp, #0x3C]
  07094	e2832024	 add         r2, r3, #0x24
  07098	e3a03001	 mov         r3, #1
  0709c	e5823000	 str         r3, [r2]

; 2713 :         pED->TransferStatus = STATUS_COMPLETE;

  070a0	e59d303c	 ldr         r3, [sp, #0x3C]
  070a4	e283201c	 add         r2, r3, #0x1C
  070a8	e3a03002	 mov         r3, #2
  070ac	e5823000	 str         r3, [r2]

; 2714 :         SetEvent(g_hUsbProcessingEvent);

  070b0	e59f3d5c	 ldr         r3, [pc, #0xD5C]
  070b4	e5930000	 ldr         r0, [r3]
  070b8	eb000000	 bl          SetEvent

; 2715 :         return;

  070bc	ea00034c	 b           |$LN35@Initialize@2|
  070c0		 |$LN33@Initialize@2|

; 2716 :     }
; 2717 : 
; 2718 :     switch(pED->bfDirection){

  070c0	e59d303c	 ldr         r3, [sp, #0x3C]
  070c4	e2833006	 add         r3, r3, #6
  070c8	e5d33000	 ldrb        r3, [r3]
  070cc	e58d30c0	 str         r3, [sp, #0xC0]
  070d0	e59d30c0	 ldr         r3, [sp, #0xC0]
  070d4	e3530000	 cmp         r3, #0
  070d8	0a000006	 beq         |$LN30@Initialize@2|
  070dc	e59d30c0	 ldr         r3, [sp, #0xC0]
  070e0	e3530001	 cmp         r3, #1
  070e4	0a0000e6	 beq         |$LN20@Initialize@2|
  070e8	e59d30c0	 ldr         r3, [sp, #0xC0]
  070ec	e3530002	 cmp         r3, #2
  070f0	0a000225	 beq         |$LN10@Initialize@2|
  070f4	ea00033e	 b           |$LN31@Initialize@2|
  070f8		 |$LN30@Initialize@2|

; 2719 :     case TD_SETUP_PID:
; 2720 : 
; 2721 :         WRITE_PORT_USHORT( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXFUNCADDR)), pTD->sTransfer.address);

  070f8	e59d302c	 ldr         r3, [sp, #0x2C]
  070fc	e2833004	 add         r3, r3, #4
  07100	e5d31000	 ldrb        r1, [r3]
  07104	e59d303c	 ldr         r3, [sp, #0x3C]
  07108	e2833010	 add         r3, r3, #0x10
  0710c	e5d33000	 ldrb        r3, [r3]
  07110	e1a02003	 mov         r2, r3
  07114	e3a03008	 mov         r3, #8
  07118	e0030392	 mul         r3, r2, r3
  0711c	e2832d12	 add         r2, r3, #0x12, 26
  07120	e59d3108	 ldr         r3, [sp, #0x108]
  07124	e0833002	 add         r3, r3, r2
  07128	e1c310b0	 strh        r1, [r3]

; 2722 :         WRITE_PORT_USHORT( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXFUNCADDR)), pTD->sTransfer.address);

  0712c	e59d302c	 ldr         r3, [sp, #0x2C]
  07130	e2833004	 add         r3, r3, #4
  07134	e5d31000	 ldrb        r1, [r3]
  07138	e59d303c	 ldr         r3, [sp, #0x3C]
  0713c	e2833010	 add         r3, r3, #0x10
  07140	e5d33000	 ldrb        r3, [r3]
  07144	e1a02003	 mov         r2, r3
  07148	e3a03008	 mov         r3, #8
  0714c	e0030392	 mul         r3, r2, r3
  07150	e2833b01	 add         r3, r3, #1, 22
  07154	e2832084	 add         r2, r3, #0x84
  07158	e59d3108	 ldr         r3, [sp, #0x108]
  0715c	e0833002	 add         r3, r3, r2
  07160	e1c310b0	 strh        r1, [r3]

; 2723 :         WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXMAXP)), pED->bfMaxPacketSize);

  07164	e59d303c	 ldr         r3, [sp, #0x3C]
  07168	e283100e	 add         r1, r3, #0xE
  0716c	e59d303c	 ldr         r3, [sp, #0x3C]
  07170	e2833010	 add         r3, r3, #0x10
  07174	e5d33000	 ldrb        r3, [r3]
  07178	e1a02003	 mov         r2, r3
  0717c	e3a03010	 mov         r3, #0x10
  07180	e0030392	 mul         r3, r2, r3
  07184	e2832c05	 add         r2, r3, #5, 24
  07188	e59d3108	 ldr         r3, [sp, #0x108]
  0718c	e0832002	 add         r2, r3, r2
  07190	e1d130b0	 ldrh        r3, [r1]
  07194	e1c230b0	 strh        r3, [r2]

; 2724 :         WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXMAXP)), pED->bfMaxPacketSize);

  07198	e59d303c	 ldr         r3, [sp, #0x3C]
  0719c	e283100e	 add         r1, r3, #0xE
  071a0	e59d303c	 ldr         r3, [sp, #0x3C]
  071a4	e2833010	 add         r3, r3, #0x10
  071a8	e5d33000	 ldrb        r3, [r3]
  071ac	e1a02003	 mov         r2, r3
  071b0	e3a03010	 mov         r3, #0x10
  071b4	e0030392	 mul         r3, r2, r3
  071b8	e2833c05	 add         r3, r3, #5, 24
  071bc	e2832004	 add         r2, r3, #4
  071c0	e59d3108	 ldr         r3, [sp, #0x108]
  071c4	e0832002	 add         r2, r3, r2
  071c8	e1d130b0	 ldrh        r3, [r1]
  071cc	e1c230b0	 strh        r3, [r2]

; 2725 : 
; 2726 :         WRITE_PORT_UCHAR( (portBase + MGC_END_OFFSET(0, MGC_O_HDRC_TYPE0)),
; 2727 :                 pED->bfIsHighSpeed?(0x1<<6):(pED->bfIsLowSpeed?(0x3<<6):(0x2<<6)));

  071d0	e59d303c	 ldr         r3, [sp, #0x3C]
  071d4	e2833009	 add         r3, r3, #9
  071d8	e5d33000	 ldrb        r3, [r3]
  071dc	e3530000	 cmp         r3, #0
  071e0	0a000002	 beq         |$LN49@Initialize@2|
  071e4	e3a03040	 mov         r3, #0x40
  071e8	e58d30c4	 str         r3, [sp, #0xC4]
  071ec	ea00000b	 b           |$LN50@Initialize@2|
  071f0		 |$LN49@Initialize@2|
  071f0	e59d303c	 ldr         r3, [sp, #0x3C]
  071f4	e2833008	 add         r3, r3, #8
  071f8	e5d33000	 ldrb        r3, [r3]
  071fc	e3530000	 cmp         r3, #0
  07200	0a000002	 beq         |$LN47@Initialize@2|
  07204	e3a030c0	 mov         r3, #0xC0
  07208	e58d30c8	 str         r3, [sp, #0xC8]
  0720c	ea000001	 b           |$LN48@Initialize@2|
  07210		 |$LN47@Initialize@2|
  07210	e3a03080	 mov         r3, #0x80
  07214	e58d30c8	 str         r3, [sp, #0xC8]
  07218		 |$LN48@Initialize@2|
  07218	e59d30c8	 ldr         r3, [sp, #0xC8]
  0721c	e58d30c4	 str         r3, [sp, #0xC4]
  07220		 |$LN50@Initialize@2|
  07220	e59d30c4	 ldr         r3, [sp, #0xC4]
  07224	e20320ff	 and         r2, r3, #0xFF
  07228	e59d3108	 ldr         r3, [sp, #0x108]
  0722c	e2833c05	 add         r3, r3, #5, 24
  07230	e283300a	 add         r3, r3, #0xA
  07234	e5c32000	 strb        r2, [r3]

; 2728 : 
; 2729 :         /*Host controller in High Speed
; 2730 :          *Device is not High speed
; 2731 :          *Device connected after hub
; 2732 :          */
; 2733 :         if(m_fHighSpeed && !pED->bfIsHighSpeed && pED->bfHubAddress){

  07238	e59d3104	 ldr         r3, [sp, #0x104]
  0723c	e2833f8a	 add         r3, r3, #0x8A, 30
  07240	e5933000	 ldr         r3, [r3]
  07244	e3530000	 cmp         r3, #0
  07248	0a000026	 beq         |$LN29@Initialize@2|
  0724c	e59d303c	 ldr         r3, [sp, #0x3C]
  07250	e2833009	 add         r3, r3, #9
  07254	e5d33000	 ldrb        r3, [r3]
  07258	e3530000	 cmp         r3, #0
  0725c	1a000021	 bne         |$LN29@Initialize@2|
  07260	e59d303c	 ldr         r3, [sp, #0x3C]
  07264	e283300a	 add         r3, r3, #0xA
  07268	e5d33000	 ldrb        r3, [r3]
  0726c	e3530000	 cmp         r3, #0
  07270	0a00001c	 beq         |$LN29@Initialize@2|

; 2734 :             WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(0, MGC_O_HDRC_TXHUBADDR)), pED->bfHubAddress);

  07274	e59d303c	 ldr         r3, [sp, #0x3C]
  07278	e283100a	 add         r1, r3, #0xA
  0727c	e59d3108	 ldr         r3, [sp, #0x108]
  07280	e2833b01	 add         r3, r3, #1, 22
  07284	e2832082	 add         r2, r3, #0x82
  07288	e5d13000	 ldrb        r3, [r1]
  0728c	e5c23000	 strb        r3, [r2]

; 2735 :             WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(0, MGC_O_HDRC_RXHUBADDR)), pED->bfHubAddress);

  07290	e59d303c	 ldr         r3, [sp, #0x3C]
  07294	e283100a	 add         r1, r3, #0xA
  07298	e59d3108	 ldr         r3, [sp, #0x108]
  0729c	e2833b01	 add         r3, r3, #1, 22
  072a0	e2832086	 add         r2, r3, #0x86
  072a4	e5d13000	 ldrb        r3, [r1]
  072a8	e5c23000	 strb        r3, [r2]

; 2736 :             WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(0, MGC_O_HDRC_TXHUBPORT)), pED->bfHubPort);

  072ac	e59d303c	 ldr         r3, [sp, #0x3C]
  072b0	e283100b	 add         r1, r3, #0xB
  072b4	e59d3108	 ldr         r3, [sp, #0x108]
  072b8	e2833b01	 add         r3, r3, #1, 22
  072bc	e2832083	 add         r2, r3, #0x83
  072c0	e5d13000	 ldrb        r3, [r1]
  072c4	e5c23000	 strb        r3, [r2]

; 2737 :             WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(0, MGC_O_HDRC_RXHUBPORT)), pED->bfHubPort);

  072c8	e59d303c	 ldr         r3, [sp, #0x3C]
  072cc	e283100b	 add         r1, r3, #0xB
  072d0	e59d3108	 ldr         r3, [sp, #0x108]
  072d4	e2833b01	 add         r3, r3, #1, 22
  072d8	e2832087	 add         r2, r3, #0x87
  072dc	e5d13000	 ldrb        r3, [r1]
  072e0	e5c23000	 strb        r3, [r2]

; 2738 :         }
; 2739 :         else{

  072e4	ea000013	 b           |$LN28@Initialize@2|
  072e8		 |$LN29@Initialize@2|

; 2740 :                     WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(0, MGC_O_HDRC_TXHUBADDR)), 0);

  072e8	e59d3108	 ldr         r3, [sp, #0x108]
  072ec	e2833b01	 add         r3, r3, #1, 22
  072f0	e2832082	 add         r2, r3, #0x82
  072f4	e3a03000	 mov         r3, #0
  072f8	e5c23000	 strb        r3, [r2]

; 2741 :                     WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(0, MGC_O_HDRC_RXHUBADDR)), 0);

  072fc	e59d3108	 ldr         r3, [sp, #0x108]
  07300	e2833b01	 add         r3, r3, #1, 22
  07304	e2832086	 add         r2, r3, #0x86
  07308	e3a03000	 mov         r3, #0
  0730c	e5c23000	 strb        r3, [r2]

; 2742 :                     WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(0, MGC_O_HDRC_TXHUBPORT)), 0);

  07310	e59d3108	 ldr         r3, [sp, #0x108]
  07314	e2833b01	 add         r3, r3, #1, 22
  07318	e2832083	 add         r2, r3, #0x83
  0731c	e3a03000	 mov         r3, #0
  07320	e5c23000	 strb        r3, [r2]

; 2743 :                     WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(0, MGC_O_HDRC_RXHUBPORT)), 0);

  07324	e59d3108	 ldr         r3, [sp, #0x108]
  07328	e2833b01	 add         r3, r3, #1, 22
  0732c	e2832087	 add         r2, r3, #0x87
  07330	e3a03000	 mov         r3, #0
  07334	e5c23000	 strb        r3, [r2]
  07338		 |$LN28@Initialize@2|

; 2744 :                 }
; 2745 :         switch(pTD->TransferStage){

  07338	e59d302c	 ldr         r3, [sp, #0x2C]
  0733c	e2833050	 add         r3, r3, #0x50
  07340	e5933000	 ldr         r3, [r3]
  07344	e58d30cc	 str         r3, [sp, #0xCC]
  07348	e59d30cc	 ldr         r3, [sp, #0xCC]
  0734c	e3530004	 cmp         r3, #4
  07350	8a00004a	 bhi         |$LN26@Initialize@2|
  07354	e59d20cc	 ldr         r2, [sp, #0xCC]
  07358	e1a03102	 mov         r3, r2, lsl #2
  0735c	e083300f	 add         r3, r3, pc
  07360	e5933004	 ldr         r3, [r3, #4]
  07364	e08ff003	 add         pc, pc, r3
  07368		 |$LN68@Initialize@2|
  07368		 |$LN67@Initialize@2|
  07368		 |$LN69@Initialize@2|
  07368	00000010	 DCD         0x10
  0736c		 |$LN70@Initialize@2|
  0736c	00000050	 DCD         0x50
  07370		 |$LN71@Initialize@2|
  07370	00000068	 DCD         0x68
  07374		 |$LN72@Initialize@2|
  07374	000000e4	 DCD         0xe4
  07378		 |$LN73@Initialize@2|
  07378	000000fc	 DCD         0xfc
  0737c		 |$LN25@Initialize@2|

; 2746 :         case STAGE_SETUP:
; 2747 :             pPkt = (UINT8 *)pTD->sTransfer.lpvControlHeader;

  0737c	e59d302c	 ldr         r3, [sp, #0x2C]
  07380	e2833014	 add         r3, r3, #0x14
  07384	e5933000	 ldr         r3, [r3]
  07388	e58d3038	 str         r3, [sp, #0x38]

; 2748 : 	
; 2749 : 			WriteFIFO((DWORD*)(portBase+MGC_FIFO_OFFSET(0)), pPkt, 8);

  0738c	e3a02008	 mov         r2, #8
  07390	e59d1038	 ldr         r1, [sp, #0x38]
  07394	e59d3108	 ldr         r3, [sp, #0x108]
  07398	e2830e42	 add         r0, r3, #0x42, 28
  0739c	eb000000	 bl          |?WriteFIFO@@YAHPAKPAXK@Z|

; 2750 : 
; 2751 : 			/*Setup Stage - SETUP packet*/
; 2752 :             WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)),
; 2753 :                            (MGC_M_CSR0_TXPKTRDY|MGC_M_CSR0_H_SETUPPKT|MGC_M_CSR0_H_WR_DATATOGGLE));

  073a0	e59d3108	 ldr         r3, [sp, #0x108]
  073a4	e2833c05	 add         r3, r3, #5, 24
  073a8	e2832002	 add         r2, r3, #2
  073ac	e3a03b01	 mov         r3, #1, 22
  073b0	e383300a	 orr         r3, r3, #0xA
  073b4	e1c230b0	 strh        r3, [r2]

; 2754 :             break;

  073b8	ea000030	 b           |$LN26@Initialize@2|
  073bc		 |$LN24@Initialize@2|

; 2755 :         case STAGE_DATAIN:
; 2756 :             // NOTE: PING is disabled because some MSD do not support it for EP0 IN transfers
; 2757 :             WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)),(MGC_M_CSR0_H_REQPKT|MGC_M_CSR0_H_DISPING));

  073bc	e59d3108	 ldr         r3, [sp, #0x108]
  073c0	e2833c05	 add         r3, r3, #5, 24
  073c4	e2832002	 add         r2, r3, #2
  073c8	e3a03e82	 mov         r3, #0x82, 28
  073cc	e1c230b0	 strh        r3, [r2]

; 2758 :             break;

  073d0	ea00002a	 b           |$LN26@Initialize@2|
  073d4		 |$LN23@Initialize@2|

; 2759 :         case STAGE_DATAOUT:
; 2760 :             pPkt = (UINT8 *)pTD->sTransfer.lpvClientBuffer;

  073d4	e59d302c	 ldr         r3, [sp, #0x2C]
  073d8	e283302c	 add         r3, r3, #0x2C
  073dc	e5933000	 ldr         r3, [r3]
  073e0	e58d3038	 str         r3, [sp, #0x38]

; 2761 : 
; 2762 : 			WriteFIFO((DWORD*)(portBase+MGC_FIFO_OFFSET(0)), pPkt, CopyCount);

  073e4	e59d2030	 ldr         r2, [sp, #0x30]
  073e8	e59d1038	 ldr         r1, [sp, #0x38]
  073ec	e59d3108	 ldr         r3, [sp, #0x108]
  073f0	e2830e42	 add         r0, r3, #0x42, 28
  073f4	eb000000	 bl          |?WriteFIFO@@YAHPAKPAXK@Z|

; 2763 : 	        pTD->BytesTransferred += CopyCount;

  073f8	e59d302c	 ldr         r3, [sp, #0x2C]
  073fc	e2833054	 add         r3, r3, #0x54
  07400	e5932000	 ldr         r2, [r3]
  07404	e59d3030	 ldr         r3, [sp, #0x30]
  07408	e0822003	 add         r2, r2, r3
  0740c	e59d302c	 ldr         r3, [sp, #0x2C]
  07410	e2833054	 add         r3, r3, #0x54
  07414	e5832000	 str         r2, [r3]

; 2764 : 			pTD->BytesToTransfer -= CopyCount;

  07418	e59d302c	 ldr         r3, [sp, #0x2C]
  0741c	e2833058	 add         r3, r3, #0x58
  07420	e5932000	 ldr         r2, [r3]
  07424	e59d3030	 ldr         r3, [sp, #0x30]
  07428	e0422003	 sub         r2, r2, r3
  0742c	e59d302c	 ldr         r3, [sp, #0x2C]
  07430	e2833058	 add         r3, r3, #0x58
  07434	e5832000	 str         r2, [r3]

; 2765 : 
; 2766 : 			/*Data Stage - OUT packet*/
; 2767 :             WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)),(MGC_M_CSR0_TXPKTRDY));

  07438	e59d3108	 ldr         r3, [sp, #0x108]
  0743c	e2833c05	 add         r3, r3, #5, 24
  07440	e2832002	 add         r2, r3, #2
  07444	e3a03002	 mov         r3, #2
  07448	e1c230b0	 strh        r3, [r2]

; 2768 :             break;

  0744c	ea00000b	 b           |$LN26@Initialize@2|
  07450		 |$LN22@Initialize@2|

; 2769 :         case STAGE_STATUSIN:
; 2770 :             /*data stage was from host to device - OUT transaction*/
; 2771 :             /*Status Stage - IN packet*/
; 2772 :             WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)),
; 2773 :                        (MGC_M_CSR0_H_REQPKT|MGC_M_CSR0_H_STATUSPKT |
; 2774 :                         MGC_M_CSR0_H_WR_DATATOGGLE|MGC_M_CSR0_H_DATATOGGLE));

  07450	e59d3108	 ldr         r3, [sp, #0x108]
  07454	e2833c05	 add         r3, r3, #5, 24
  07458	e2832002	 add         r2, r3, #2
  0745c	e3a03e66	 mov         r3, #0x66, 28
  07460	e1c230b0	 strh        r3, [r2]

; 2775 :             break;

  07464	ea000005	 b           |$LN26@Initialize@2|
  07468		 |$LN21@Initialize@2|

; 2776 :         case STAGE_STATUSOUT:
; 2777 :             /*data stage was from device to host - IN transaction*/
; 2778 :             /*Status Stage - OUT packet*/
; 2779 :             // NOTE: PING is disabled because some MSD do not support it for EP0 IN transfers
; 2780 :             WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(0, MGC_O_HDRC_CSR0)),
; 2781 :                            (MGC_M_CSR0_TXPKTRDY|MGC_M_CSR0_H_STATUSPKT |
; 2782 :                             MGC_M_CSR0_H_WR_DATATOGGLE|MGC_M_CSR0_H_DATATOGGLE|MGC_M_CSR0_H_DISPING));

  07468	e59d3108	 ldr         r3, [sp, #0x108]
  0746c	e2833c05	 add         r3, r3, #5, 24
  07470	e2832002	 add         r2, r3, #2
  07474	e3a03c0e	 mov         r3, #0xE, 24
  07478	e3833042	 orr         r3, r3, #0x42
  0747c	e1c230b0	 strh        r3, [r2]
  07480		 |$LN26@Initialize@2|

; 2783 :             break;
; 2784 :         }
; 2785 :         break;

  07480	ea00025b	 b           |$LN31@Initialize@2|
  07484		 |$LN20@Initialize@2|

; 2786 : 
; 2787 :     case TD_OUT_PID:
; 2788 : 
; 2789 :         WRITE_PORT_USHORT( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXFUNCADDR)), pTD->sTransfer.address);

  07484	e59d302c	 ldr         r3, [sp, #0x2C]
  07488	e2833004	 add         r3, r3, #4
  0748c	e5d31000	 ldrb        r1, [r3]
  07490	e59d303c	 ldr         r3, [sp, #0x3C]
  07494	e2833010	 add         r3, r3, #0x10
  07498	e5d33000	 ldrb        r3, [r3]
  0749c	e1a02003	 mov         r2, r3
  074a0	e3a03008	 mov         r3, #8
  074a4	e0030392	 mul         r3, r2, r3
  074a8	e2832d12	 add         r2, r3, #0x12, 26
  074ac	e59d3108	 ldr         r3, [sp, #0x108]
  074b0	e0833002	 add         r3, r3, r2
  074b4	e1c310b0	 strh        r1, [r3]

; 2790 :         WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXMAXP)), pED->bfMaxPacketSize);

  074b8	e59d303c	 ldr         r3, [sp, #0x3C]
  074bc	e283100e	 add         r1, r3, #0xE
  074c0	e59d303c	 ldr         r3, [sp, #0x3C]
  074c4	e2833010	 add         r3, r3, #0x10
  074c8	e5d33000	 ldrb        r3, [r3]
  074cc	e1a02003	 mov         r2, r3
  074d0	e3a03010	 mov         r3, #0x10
  074d4	e0030392	 mul         r3, r2, r3
  074d8	e2832c05	 add         r2, r3, #5, 24
  074dc	e59d3108	 ldr         r3, [sp, #0x108]
  074e0	e0832002	 add         r2, r3, r2
  074e4	e1d130b0	 ldrh        r3, [r1]
  074e8	e1c230b0	 strh        r3, [r2]

; 2791 : 
; 2792 :         if (pED->epType == TYPE_BULK)

  074ec	e59d303c	 ldr         r3, [sp, #0x3C]
  074f0	e2833020	 add         r3, r3, #0x20
  074f4	e5933000	 ldr         r3, [r3]
  074f8	e3530002	 cmp         r3, #2
  074fc	1a00007a	 bne         |$LN19@Initialize@2|

; 2793 :         {
; 2794 :             WRITE_PORT_UCHAR( (portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXTYPE)),
; 2795 :                 ((pED->bfIsLowSpeed?(0x3<<6):FULL_HIGH_SPEED)|(2<<4)|(pED->bfEndpointNumber&0xf)));

  07500	e59d303c	 ldr         r3, [sp, #0x3C]
  07504	e2833008	 add         r3, r3, #8
  07508	e5d33000	 ldrb        r3, [r3]
  0750c	e3530000	 cmp         r3, #0
  07510	0a000002	 beq         |$LN53@Initialize@2|
  07514	e3a030c0	 mov         r3, #0xC0
  07518	e58d30d0	 str         r3, [sp, #0xD0]
  0751c	ea00000b	 b           |$LN54@Initialize@2|
  07520		 |$LN53@Initialize@2|
  07520	e59d303c	 ldr         r3, [sp, #0x3C]
  07524	e2833009	 add         r3, r3, #9
  07528	e5d33000	 ldrb        r3, [r3]
  0752c	e3530000	 cmp         r3, #0
  07530	0a000002	 beq         |$LN51@Initialize@2|
  07534	e3a03040	 mov         r3, #0x40
  07538	e58d30d4	 str         r3, [sp, #0xD4]
  0753c	ea000001	 b           |$LN52@Initialize@2|
  07540		 |$LN51@Initialize@2|
  07540	e3a03080	 mov         r3, #0x80
  07544	e58d30d4	 str         r3, [sp, #0xD4]
  07548		 |$LN52@Initialize@2|
  07548	e59d30d4	 ldr         r3, [sp, #0xD4]
  0754c	e58d30d0	 str         r3, [sp, #0xD0]
  07550		 |$LN54@Initialize@2|
  07550	e59d30d0	 ldr         r3, [sp, #0xD0]
  07554	e3832020	 orr         r2, r3, #0x20
  07558	e59d303c	 ldr         r3, [sp, #0x3C]
  0755c	e2833005	 add         r3, r3, #5
  07560	e5d33000	 ldrb        r3, [r3]
  07564	e203300f	 and         r3, r3, #0xF
  07568	e1823003	 orr         r3, r2, r3
  0756c	e20310ff	 and         r1, r3, #0xFF
  07570	e59d303c	 ldr         r3, [sp, #0x3C]
  07574	e2833010	 add         r3, r3, #0x10
  07578	e5d33000	 ldrb        r3, [r3]
  0757c	e1a02003	 mov         r2, r3
  07580	e3a03010	 mov         r3, #0x10
  07584	e0030392	 mul         r3, r2, r3
  07588	e2833c05	 add         r3, r3, #5, 24
  0758c	e283200a	 add         r2, r3, #0xA
  07590	e59d3108	 ldr         r3, [sp, #0x108]
  07594	e0833002	 add         r3, r3, r2
  07598	e5c31000	 strb        r1, [r3]

; 2796 : 
; 2797 :             WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXINTERVAL)),
; 2798 :                 pED->bInterval);

  0759c	e59d303c	 ldr         r3, [sp, #0x3C]
  075a0	e2830011	 add         r0, r3, #0x11
  075a4	e59d3104	 ldr         r3, [sp, #0x104]
  075a8	e2831f52	 add         r1, r3, #0x52, 30
  075ac	e59d303c	 ldr         r3, [sp, #0x3C]
  075b0	e2833010	 add         r3, r3, #0x10
  075b4	e5d33000	 ldrb        r3, [r3]
  075b8	e1a02003	 mov         r2, r3
  075bc	e3a03010	 mov         r3, #0x10
  075c0	e0030392	 mul         r3, r2, r3
  075c4	e2833c05	 add         r3, r3, #5, 24
  075c8	e283200b	 add         r2, r3, #0xB
  075cc	e5913000	 ldr         r3, [r1]
  075d0	e0832002	 add         r2, r3, r2
  075d4	e5d03000	 ldrb        r3, [r0]
  075d8	e5c23000	 strb        r3, [r2]

; 2799 : 
; 2800 :             if(m_fHighSpeed && !pED->bfIsHighSpeed && pED->bfHubAddress)

  075dc	e59d3104	 ldr         r3, [sp, #0x104]
  075e0	e2833f8a	 add         r3, r3, #0x8A, 30
  075e4	e5933000	 ldr         r3, [r3]
  075e8	e3530000	 cmp         r3, #0
  075ec	0a000026	 beq         |$LN18@Initialize@2|
  075f0	e59d303c	 ldr         r3, [sp, #0x3C]
  075f4	e2833009	 add         r3, r3, #9
  075f8	e5d33000	 ldrb        r3, [r3]
  075fc	e3530000	 cmp         r3, #0
  07600	1a000021	 bne         |$LN18@Initialize@2|
  07604	e59d303c	 ldr         r3, [sp, #0x3C]
  07608	e283300a	 add         r3, r3, #0xA
  0760c	e5d33000	 ldrb        r3, [r3]
  07610	e3530000	 cmp         r3, #0
  07614	0a00001c	 beq         |$LN18@Initialize@2|

; 2801 :             {
; 2802 :                 WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXHUBADDR)), pED->bfHubAddress);

  07618	e59d303c	 ldr         r3, [sp, #0x3C]
  0761c	e283100a	 add         r1, r3, #0xA
  07620	e59d303c	 ldr         r3, [sp, #0x3C]
  07624	e2833010	 add         r3, r3, #0x10
  07628	e5d33000	 ldrb        r3, [r3]
  0762c	e1a02003	 mov         r2, r3
  07630	e3a03008	 mov         r3, #8
  07634	e0030392	 mul         r3, r2, r3
  07638	e2833b01	 add         r3, r3, #1, 22
  0763c	e2832082	 add         r2, r3, #0x82
  07640	e59d3108	 ldr         r3, [sp, #0x108]
  07644	e0832002	 add         r2, r3, r2
  07648	e5d13000	 ldrb        r3, [r1]
  0764c	e5c23000	 strb        r3, [r2]

; 2803 :                 WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXHUBPORT)), pED->bfHubPort);

  07650	e59d303c	 ldr         r3, [sp, #0x3C]
  07654	e283100b	 add         r1, r3, #0xB
  07658	e59d303c	 ldr         r3, [sp, #0x3C]
  0765c	e2833010	 add         r3, r3, #0x10
  07660	e5d33000	 ldrb        r3, [r3]
  07664	e1a02003	 mov         r2, r3
  07668	e3a03008	 mov         r3, #8
  0766c	e0030392	 mul         r3, r2, r3
  07670	e2833b01	 add         r3, r3, #1, 22
  07674	e2832083	 add         r2, r3, #0x83
  07678	e59d3108	 ldr         r3, [sp, #0x108]
  0767c	e0832002	 add         r2, r3, r2
  07680	e5d13000	 ldrb        r3, [r1]
  07684	e5c23000	 strb        r3, [r2]

; 2804 :             }
; 2805 :             else

  07688	ea000017	 b           |$LN17@Initialize@2|
  0768c		 |$LN18@Initialize@2|

; 2806 :             {
; 2807 :                 WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXHUBADDR)), 0);

  0768c	e59d303c	 ldr         r3, [sp, #0x3C]
  07690	e2833010	 add         r3, r3, #0x10
  07694	e5d33000	 ldrb        r3, [r3]
  07698	e1a02003	 mov         r2, r3
  0769c	e3a03008	 mov         r3, #8
  076a0	e0030392	 mul         r3, r2, r3
  076a4	e2833b01	 add         r3, r3, #1, 22
  076a8	e2832082	 add         r2, r3, #0x82
  076ac	e59d3108	 ldr         r3, [sp, #0x108]
  076b0	e0832002	 add         r2, r3, r2
  076b4	e3a03000	 mov         r3, #0
  076b8	e5c23000	 strb        r3, [r2]

; 2808 :                 WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXHUBPORT)), 0);

  076bc	e59d303c	 ldr         r3, [sp, #0x3C]
  076c0	e2833010	 add         r3, r3, #0x10
  076c4	e5d33000	 ldrb        r3, [r3]
  076c8	e1a02003	 mov         r2, r3
  076cc	e3a03008	 mov         r3, #8
  076d0	e0030392	 mul         r3, r2, r3
  076d4	e2833b01	 add         r3, r3, #1, 22
  076d8	e2832083	 add         r2, r3, #0x83
  076dc	e59d3108	 ldr         r3, [sp, #0x108]
  076e0	e0832002	 add         r2, r3, r2
  076e4	e3a03000	 mov         r3, #0
  076e8	e5c23000	 strb        r3, [r2]
  076ec		 |$LN17@Initialize@2|
  076ec		 |$LN19@Initialize@2|

; 2809 :             }
; 2810 :         }
; 2811 : 
; 2812 : #ifdef MUSB_USEDMA
; 2813 : 
; 2814 :         if (pED->pDmaChannel)

  076ec	e59d303c	 ldr         r3, [sp, #0x3C]
  076f0	e2833034	 add         r3, r3, #0x34
  076f4	e5933000	 ldr         r3, [r3]
  076f8	e3530000	 cmp         r3, #0
  076fc	0a00006a	 beq         |$LN16@Initialize@2|

; 2815 :         {
; 2816 :             UINT32 nFlags = pTD->sTransfer.dwFlags;

  07700	e59d302c	 ldr         r3, [sp, #0x2C]
  07704	e2833010	 add         r3, r3, #0x10
  07708	e5933000	 ldr         r3, [r3]
  0770c	e58d3048	 str         r3, [sp, #0x48]

; 2817 : 
; 2818 :             // Disable EP interrupt
; 2819 :             WRITE_PORT_ULONG((m_portBase+USB_EP_INTMSKCLRR_REG_OFFSET), 1 << (pED->bHostEndPointNum + USB_OTG_TXINT_SHIFT));

  07710	e59d303c	 ldr         r3, [sp, #0x3C]
  07714	e2833010	 add         r3, r3, #0x10
  07718	e5d33000	 ldrb        r3, [r3]
  0771c	e1a02003	 mov         r2, r3
  07720	e3a03001	 mov         r3, #1
  07724	e1a02213	 mov         r2, r3, lsl r2
  07728	e59d3104	 ldr         r3, [sp, #0x104]
  0772c	e2833f52	 add         r3, r3, #0x52, 30
  07730	e5933000	 ldr         r3, [r3]
  07734	e2833034	 add         r3, r3, #0x34
  07738	e5832000	 str         r2, [r3]

; 2820 : 
; 2821 :             if (pED->bfToggleCarry)

  0773c	e59d303c	 ldr         r3, [sp, #0x3C]
  07740	e2833028	 add         r3, r3, #0x28
  07744	e1d330b0	 ldrh        r3, [r3]
  07748	e3530000	 cmp         r3, #0
  0774c	0a000002	 beq         |$LN15@Initialize@2|

; 2822 :             {
; 2823 :                 nFlags |= USB_TOGGLE_CARRY;

  07750	e59d3048	 ldr         r3, [sp, #0x48]
  07754	e3833102	 orr         r3, r3, #2, 2
  07758	e58d3048	 str         r3, [sp, #0x48]
  0775c		 |$LN15@Initialize@2|

; 2824 :             }
; 2825 : 
; 2826 :             BOOL fResult = pED->pDmaChannel->IssueTransfer(
; 2827 :                 pED->bfEndpointNumber,
; 2828 :                 pTD->sTransfer.address,
; 2829 :                 epType,
; 2830 :                 pED->bfMaxPacketSize,
; 2831 :                 pTD->sTransfer.lpvClientBuffer,
; 2832 :                 pTD->sTransfer.paClientBuffer,
; 2833 :                 pTD->BytesToTransfer,
; 2834 :                 pTD->sTransfer.dwFrames,
; 2835 :                 (UINT32 *)pTD->sTransfer.aLengths,
; 2836 :                 pTD->sTransfer.adwIsochErrors,
; 2837 :                 pTD->sTransfer.adwIsochLengths,
; 2838 :                 nFlags,
; 2839 :                 pED,
; 2840 :                 pTD);

  0775c	e59d302c	 ldr         r3, [sp, #0x2C]
  07760	e58d3028	 str         r3, [sp, #0x28]
  07764	e59d303c	 ldr         r3, [sp, #0x3C]
  07768	e58d3024	 str         r3, [sp, #0x24]
  0776c	e59d3048	 ldr         r3, [sp, #0x48]
  07770	e58d3020	 str         r3, [sp, #0x20]
  07774	e59d302c	 ldr         r3, [sp, #0x2C]
  07778	e283303c	 add         r3, r3, #0x3C
  0777c	e5933000	 ldr         r3, [r3]
  07780	e58d301c	 str         r3, [sp, #0x1C]
  07784	e59d302c	 ldr         r3, [sp, #0x2C]
  07788	e2833038	 add         r3, r3, #0x38
  0778c	e5933000	 ldr         r3, [r3]
  07790	e58d3018	 str         r3, [sp, #0x18]
  07794	e59d302c	 ldr         r3, [sp, #0x2C]
  07798	e2833024	 add         r3, r3, #0x24
  0779c	e5933000	 ldr         r3, [r3]
  077a0	e58d3014	 str         r3, [sp, #0x14]
  077a4	e59d302c	 ldr         r3, [sp, #0x2C]
  077a8	e2833020	 add         r3, r3, #0x20
  077ac	e5933000	 ldr         r3, [r3]
  077b0	e58d3010	 str         r3, [sp, #0x10]
  077b4	e59d302c	 ldr         r3, [sp, #0x2C]
  077b8	e2833058	 add         r3, r3, #0x58
  077bc	e5933000	 ldr         r3, [r3]
  077c0	e58d300c	 str         r3, [sp, #0xC]
  077c4	e59d302c	 ldr         r3, [sp, #0x2C]
  077c8	e2833030	 add         r3, r3, #0x30
  077cc	e5933000	 ldr         r3, [r3]
  077d0	e58d3008	 str         r3, [sp, #8]
  077d4	e59d302c	 ldr         r3, [sp, #0x2C]
  077d8	e283302c	 add         r3, r3, #0x2C
  077dc	e5933000	 ldr         r3, [r3]
  077e0	e58d3004	 str         r3, [sp, #4]
  077e4	e59d303c	 ldr         r3, [sp, #0x3C]
  077e8	e283300e	 add         r3, r3, #0xE
  077ec	e1d330b0	 ldrh        r3, [r3]
  077f0	e58d3000	 str         r3, [sp]
  077f4	e5dd3042	 ldrb        r3, [sp, #0x42]
  077f8	e59d202c	 ldr         r2, [sp, #0x2C]
  077fc	e2822004	 add         r2, r2, #4
  07800	e5d22000	 ldrb        r2, [r2]
  07804	e59d103c	 ldr         r1, [sp, #0x3C]
  07808	e2811005	 add         r1, r1, #5
  0780c	e5d11000	 ldrb        r1, [r1]
  07810	e59d003c	 ldr         r0, [sp, #0x3C]
  07814	e2800034	 add         r0, r0, #0x34
  07818	e590e000	 ldr         lr, [r0]
  0781c	e59d003c	 ldr         r0, [sp, #0x3C]
  07820	e2800034	 add         r0, r0, #0x34
  07824	e5904000	 ldr         r4, [r0]
  07828	e59e0000	 ldr         r0, [lr]
  0782c	e280e004	 add         lr, r0, #4
  07830	e1a00004	 mov         r0, r4
  07834	e59e4000	 ldr         r4, [lr]
  07838	e1a0e00f	 mov         lr, pc
  0783c	e12fff14	 bx          r4
  07840	e58d00d8	 str         r0, [sp, #0xD8]
  07844	e59d30d8	 ldr         r3, [sp, #0xD8]
  07848	e58d3044	 str         r3, [sp, #0x44]

; 2841 : 
; 2842 :             if (!fResult)

  0784c	e59d3044	 ldr         r3, [sp, #0x44]
  07850	e3530000	 cmp         r3, #0
  07854	1a000013	 bne         |$LN14@Initialize@2|

; 2843 :             {
; 2844 :                 DEBUGMSG(1, (L"CHW::InitializeTransaction: Failed to start DMA OUT transfer!\r\n"));

  07858	e59f05b0	 ldr         r0, [pc, #0x5B0]
  0785c	eb000000	 bl          NKDbgPrintfW
  07860	e3a03001	 mov         r3, #1
  07864	e58d30dc	 str         r3, [sp, #0xDC]
  07868	ea000001	 b           |$LN56@Initialize@2|
  0786c	e3a03000	 mov         r3, #0
  07870	e58d30dc	 str         r3, [sp, #0xDC]
  07874		 |$LN56@Initialize@2|

; 2845 :                 DEBUGCHK(FALSE);

  07874	ea000002	 b           |$LN57@Initialize@2|
  07878	e3a03001	 mov         r3, #1
  0787c	e58d30e0	 str         r3, [sp, #0xE0]
  07880	ea000008	 b           |$LN58@Initialize@2|
  07884		 |$LN57@Initialize@2|
  07884	e3a03c0b	 mov         r3, #0xB, 24
  07888	e383301d	 orr         r3, r3, #0x1D
  0788c	e59f2574	 ldr         r2, [pc, #0x574]
  07890	e59f156c	 ldr         r1, [pc, #0x56C]
  07894	e59f0564	 ldr         r0, [pc, #0x564]
  07898	eb000000	 bl          NKDbgPrintfW
  0789c	e6000010	 __debugbreak_ce
  078a0	e3a03000	 mov         r3, #0
  078a4	e58d30e0	 str         r3, [sp, #0xE0]
  078a8		 |$LN58@Initialize@2|
  078a8		 |$LN14@Initialize@2|

; 2846 :             }
; 2847 :         }
; 2848 :         else

  078a8	ea000036	 b           |$LN13@Initialize@2|
  078ac		 |$LN16@Initialize@2|

; 2849 : 
; 2850 : #endif // MUSB_USEDMA
; 2851 : 
; 2852 :         {
; 2853 :             /*OUT Transaction*/
; 2854 :             pPkt = (UINT8 *)pTD->sTransfer.lpvClientBuffer;

  078ac	e59d302c	 ldr         r3, [sp, #0x2C]
  078b0	e283302c	 add         r3, r3, #0x2C
  078b4	e5933000	 ldr         r3, [r3]
  078b8	e58d3038	 str         r3, [sp, #0x38]

; 2855 :             pData = (UINT8 *)pTD->sTransfer.lpvClientBuffer;

  078bc	e59d302c	 ldr         r3, [sp, #0x2C]
  078c0	e283302c	 add         r3, r3, #0x2C
  078c4	e5933000	 ldr         r3, [r3]
  078c8	e58d3034	 str         r3, [sp, #0x34]

; 2856 :             pData += pTD->BytesTransferred;

  078cc	e59d302c	 ldr         r3, [sp, #0x2C]
  078d0	e2833054	 add         r3, r3, #0x54
  078d4	e59d2034	 ldr         r2, [sp, #0x34]
  078d8	e5933000	 ldr         r3, [r3]
  078dc	e0823003	 add         r3, r2, r3
  078e0	e58d3034	 str         r3, [sp, #0x34]

; 2857 : 
; 2858 :             /* Perform a check if the EndPoint is NON-BULK,if so switch back
; 2859 :              * to PIO Mode wherein the CPU in the context of the Calling
; 2860 :              * Thread performs the Transfer into the EndPoint FIFO
; 2861 :              */
; 2862 :             {
; 2863 :                 pTD->TXCOUNT = CopyCount;

  078e4	e59d302c	 ldr         r3, [sp, #0x2C]
  078e8	e283205c	 add         r2, r3, #0x5C
  078ec	e59d3030	 ldr         r3, [sp, #0x30]
  078f0	e5823000	 str         r3, [r2]

; 2864 : 
; 2865 : 				WriteFIFO((DWORD*)(portBase+MGC_FIFO_OFFSET(pED->bHostEndPointNum)), pData, CopyCount);

  078f4	e59d2030	 ldr         r2, [sp, #0x30]
  078f8	e59d1034	 ldr         r1, [sp, #0x34]
  078fc	e59d303c	 ldr         r3, [sp, #0x3C]
  07900	e2833010	 add         r3, r3, #0x10
  07904	e5d33000	 ldrb        r3, [r3]
  07908	e1a00003	 mov         r0, r3
  0790c	e3a03004	 mov         r3, #4
  07910	e0030390	 mul         r3, r0, r3
  07914	e2830e42	 add         r0, r3, #0x42, 28
  07918	e59d3108	 ldr         r3, [sp, #0x108]
  0791c	e0830000	 add         r0, r3, r0
  07920	eb000000	 bl          |?WriteFIFO@@YAHPAKPAXK@Z|

; 2866 :                 if(pED->bfToggleCarry)

  07924	e59d303c	 ldr         r3, [sp, #0x3C]
  07928	e2833028	 add         r3, r3, #0x28
  0792c	e1d330b0	 ldrh        r3, [r3]
  07930	e3530000	 cmp         r3, #0
  07934	0a000002	 beq         |$LN12@Initialize@2|

; 2867 :                     HOST_CSR = (MGC_M_TXCSR_H_WR_DATATOGGLE|MGC_M_TXCSR_H_DATATOGGLE);

  07938	e3a03c03	 mov         r3, #3, 24
  0793c	e1cd34b0	 strh        r3, [sp, #0x40]

; 2868 :                 else

  07940	ea000001	 b           |$LN11@Initialize@2|
  07944		 |$LN12@Initialize@2|

; 2869 :                     HOST_CSR = (MGC_M_TXCSR_CLRDATATOG);

  07944	e3a03040	 mov         r3, #0x40
  07948	e1cd34b0	 strh        r3, [sp, #0x40]
  0794c		 |$LN11@Initialize@2|

; 2870 :                 WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_TXCSR)),
; 2871 :                                    (HOST_CSR|MGC_M_TXCSR_TXPKTRDY));

  0794c	e1dd34b0	 ldrh        r3, [sp, #0x40]
  07950	e3833001	 orr         r3, r3, #1
  07954	e1a01803	 mov         r1, r3, lsl #16
  07958	e1a01821	 mov         r1, r1, lsr #16
  0795c	e59d303c	 ldr         r3, [sp, #0x3C]
  07960	e2833010	 add         r3, r3, #0x10
  07964	e5d33000	 ldrb        r3, [r3]
  07968	e1a02003	 mov         r2, r3
  0796c	e3a03010	 mov         r3, #0x10
  07970	e0030392	 mul         r3, r2, r3
  07974	e2833c05	 add         r3, r3, #5, 24
  07978	e2832002	 add         r2, r3, #2
  0797c	e59d3108	 ldr         r3, [sp, #0x108]
  07980	e0833002	 add         r3, r3, r2
  07984	e1c310b0	 strh        r1, [r3]
  07988		 |$LN13@Initialize@2|

; 2872 :             }
; 2873 :         }
; 2874 :         break;

  07988	ea000119	 b           |$LN31@Initialize@2|
  0798c		 |$LN10@Initialize@2|

; 2875 : 
; 2876 :     case TD_IN_PID:
; 2877 : 
; 2878 :         WRITE_PORT_USHORT( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXFUNCADDR)), pTD->sTransfer.address);

  0798c	e59d302c	 ldr         r3, [sp, #0x2C]
  07990	e2833004	 add         r3, r3, #4
  07994	e5d31000	 ldrb        r1, [r3]
  07998	e59d303c	 ldr         r3, [sp, #0x3C]
  0799c	e2833010	 add         r3, r3, #0x10
  079a0	e5d33000	 ldrb        r3, [r3]
  079a4	e1a02003	 mov         r2, r3
  079a8	e3a03008	 mov         r3, #8
  079ac	e0030392	 mul         r3, r2, r3
  079b0	e2833b01	 add         r3, r3, #1, 22
  079b4	e2832084	 add         r2, r3, #0x84
  079b8	e59d3108	 ldr         r3, [sp, #0x108]
  079bc	e0833002	 add         r3, r3, r2
  079c0	e1c310b0	 strh        r1, [r3]

; 2879 :         WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXMAXP)), pED->bfMaxPacketSize);

  079c4	e59d303c	 ldr         r3, [sp, #0x3C]
  079c8	e283100e	 add         r1, r3, #0xE
  079cc	e59d303c	 ldr         r3, [sp, #0x3C]
  079d0	e2833010	 add         r3, r3, #0x10
  079d4	e5d33000	 ldrb        r3, [r3]
  079d8	e1a02003	 mov         r2, r3
  079dc	e3a03010	 mov         r3, #0x10
  079e0	e0030392	 mul         r3, r2, r3
  079e4	e2833c05	 add         r3, r3, #5, 24
  079e8	e2832004	 add         r2, r3, #4
  079ec	e59d3108	 ldr         r3, [sp, #0x108]
  079f0	e0832002	 add         r2, r3, r2
  079f4	e1d130b0	 ldrh        r3, [r1]
  079f8	e1c230b0	 strh        r3, [r2]

; 2880 : 
; 2881 :         if (pED->epType == TYPE_BULK)

  079fc	e59d303c	 ldr         r3, [sp, #0x3C]
  07a00	e2833020	 add         r3, r3, #0x20
  07a04	e5933000	 ldr         r3, [r3]
  07a08	e3530002	 cmp         r3, #2
  07a0c	1a00007a	 bne         |$LN9@Initialize@2|

; 2882 :         {
; 2883 :             WRITE_PORT_UCHAR( (portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXTYPE)),
; 2884 :                 ((pED->bfIsLowSpeed?(0x3<<6):FULL_HIGH_SPEED)|(2<<4)|(pED->bfEndpointNumber&0xf)));

  07a10	e59d303c	 ldr         r3, [sp, #0x3C]
  07a14	e2833008	 add         r3, r3, #8
  07a18	e5d33000	 ldrb        r3, [r3]
  07a1c	e3530000	 cmp         r3, #0
  07a20	0a000002	 beq         |$LN61@Initialize@2|
  07a24	e3a030c0	 mov         r3, #0xC0
  07a28	e58d30e4	 str         r3, [sp, #0xE4]
  07a2c	ea00000b	 b           |$LN62@Initialize@2|
  07a30		 |$LN61@Initialize@2|
  07a30	e59d303c	 ldr         r3, [sp, #0x3C]
  07a34	e2833009	 add         r3, r3, #9
  07a38	e5d33000	 ldrb        r3, [r3]
  07a3c	e3530000	 cmp         r3, #0
  07a40	0a000002	 beq         |$LN59@Initialize@2|
  07a44	e3a03040	 mov         r3, #0x40
  07a48	e58d30e8	 str         r3, [sp, #0xE8]
  07a4c	ea000001	 b           |$LN60@Initialize@2|
  07a50		 |$LN59@Initialize@2|
  07a50	e3a03080	 mov         r3, #0x80
  07a54	e58d30e8	 str         r3, [sp, #0xE8]
  07a58		 |$LN60@Initialize@2|
  07a58	e59d30e8	 ldr         r3, [sp, #0xE8]
  07a5c	e58d30e4	 str         r3, [sp, #0xE4]
  07a60		 |$LN62@Initialize@2|
  07a60	e59d30e4	 ldr         r3, [sp, #0xE4]
  07a64	e3832020	 orr         r2, r3, #0x20
  07a68	e59d303c	 ldr         r3, [sp, #0x3C]
  07a6c	e2833005	 add         r3, r3, #5
  07a70	e5d33000	 ldrb        r3, [r3]
  07a74	e203300f	 and         r3, r3, #0xF
  07a78	e1823003	 orr         r3, r2, r3
  07a7c	e20310ff	 and         r1, r3, #0xFF
  07a80	e59d303c	 ldr         r3, [sp, #0x3C]
  07a84	e2833010	 add         r3, r3, #0x10
  07a88	e5d33000	 ldrb        r3, [r3]
  07a8c	e1a02003	 mov         r2, r3
  07a90	e3a03010	 mov         r3, #0x10
  07a94	e0030392	 mul         r3, r2, r3
  07a98	e2833c05	 add         r3, r3, #5, 24
  07a9c	e283200c	 add         r2, r3, #0xC
  07aa0	e59d3108	 ldr         r3, [sp, #0x108]
  07aa4	e0833002	 add         r3, r3, r2
  07aa8	e5c31000	 strb        r1, [r3]

; 2885 : 
; 2886 :             WRITE_PORT_UCHAR( (m_portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXINTERVAL)),
; 2887 :                 pED->bInterval);

  07aac	e59d303c	 ldr         r3, [sp, #0x3C]
  07ab0	e2830011	 add         r0, r3, #0x11
  07ab4	e59d3104	 ldr         r3, [sp, #0x104]
  07ab8	e2831f52	 add         r1, r3, #0x52, 30
  07abc	e59d303c	 ldr         r3, [sp, #0x3C]
  07ac0	e2833010	 add         r3, r3, #0x10
  07ac4	e5d33000	 ldrb        r3, [r3]
  07ac8	e1a02003	 mov         r2, r3
  07acc	e3a03010	 mov         r3, #0x10
  07ad0	e0030392	 mul         r3, r2, r3
  07ad4	e2833c05	 add         r3, r3, #5, 24
  07ad8	e283200d	 add         r2, r3, #0xD
  07adc	e5913000	 ldr         r3, [r1]
  07ae0	e0832002	 add         r2, r3, r2
  07ae4	e5d03000	 ldrb        r3, [r0]
  07ae8	e5c23000	 strb        r3, [r2]

; 2888 : 
; 2889 :             if(m_fHighSpeed && !pED->bfIsHighSpeed && pED->bfHubAddress)

  07aec	e59d3104	 ldr         r3, [sp, #0x104]
  07af0	e2833f8a	 add         r3, r3, #0x8A, 30
  07af4	e5933000	 ldr         r3, [r3]
  07af8	e3530000	 cmp         r3, #0
  07afc	0a000026	 beq         |$LN8@Initialize@2|
  07b00	e59d303c	 ldr         r3, [sp, #0x3C]
  07b04	e2833009	 add         r3, r3, #9
  07b08	e5d33000	 ldrb        r3, [r3]
  07b0c	e3530000	 cmp         r3, #0
  07b10	1a000021	 bne         |$LN8@Initialize@2|
  07b14	e59d303c	 ldr         r3, [sp, #0x3C]
  07b18	e283300a	 add         r3, r3, #0xA
  07b1c	e5d33000	 ldrb        r3, [r3]
  07b20	e3530000	 cmp         r3, #0
  07b24	0a00001c	 beq         |$LN8@Initialize@2|

; 2890 :             {
; 2891 :                 WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXHUBADDR)), pED->bfHubAddress);

  07b28	e59d303c	 ldr         r3, [sp, #0x3C]
  07b2c	e283100a	 add         r1, r3, #0xA
  07b30	e59d303c	 ldr         r3, [sp, #0x3C]
  07b34	e2833010	 add         r3, r3, #0x10
  07b38	e5d33000	 ldrb        r3, [r3]
  07b3c	e1a02003	 mov         r2, r3
  07b40	e3a03008	 mov         r3, #8
  07b44	e0030392	 mul         r3, r2, r3
  07b48	e2833b01	 add         r3, r3, #1, 22
  07b4c	e2832086	 add         r2, r3, #0x86
  07b50	e59d3108	 ldr         r3, [sp, #0x108]
  07b54	e0832002	 add         r2, r3, r2
  07b58	e5d13000	 ldrb        r3, [r1]
  07b5c	e5c23000	 strb        r3, [r2]

; 2892 :                 WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXHUBPORT)), pED->bfHubPort);

  07b60	e59d303c	 ldr         r3, [sp, #0x3C]
  07b64	e283100b	 add         r1, r3, #0xB
  07b68	e59d303c	 ldr         r3, [sp, #0x3C]
  07b6c	e2833010	 add         r3, r3, #0x10
  07b70	e5d33000	 ldrb        r3, [r3]
  07b74	e1a02003	 mov         r2, r3
  07b78	e3a03008	 mov         r3, #8
  07b7c	e0030392	 mul         r3, r2, r3
  07b80	e2833b01	 add         r3, r3, #1, 22
  07b84	e2832087	 add         r2, r3, #0x87
  07b88	e59d3108	 ldr         r3, [sp, #0x108]
  07b8c	e0832002	 add         r2, r3, r2
  07b90	e5d13000	 ldrb        r3, [r1]
  07b94	e5c23000	 strb        r3, [r2]

; 2893 :             }
; 2894 :             else

  07b98	ea000017	 b           |$LN7@Initialize@2|
  07b9c		 |$LN8@Initialize@2|

; 2895 :             {
; 2896 :                 WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXHUBADDR)), 0);

  07b9c	e59d303c	 ldr         r3, [sp, #0x3C]
  07ba0	e2833010	 add         r3, r3, #0x10
  07ba4	e5d33000	 ldrb        r3, [r3]
  07ba8	e1a02003	 mov         r2, r3
  07bac	e3a03008	 mov         r3, #8
  07bb0	e0030392	 mul         r3, r2, r3
  07bb4	e2833b01	 add         r3, r3, #1, 22
  07bb8	e2832086	 add         r2, r3, #0x86
  07bbc	e59d3108	 ldr         r3, [sp, #0x108]
  07bc0	e0832002	 add         r2, r3, r2
  07bc4	e3a03000	 mov         r3, #0
  07bc8	e5c23000	 strb        r3, [r2]

; 2897 :                 WRITE_PORT_UCHAR( (portBase+MGC_BUSCTL_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXHUBPORT)), 0);

  07bcc	e59d303c	 ldr         r3, [sp, #0x3C]
  07bd0	e2833010	 add         r3, r3, #0x10
  07bd4	e5d33000	 ldrb        r3, [r3]
  07bd8	e1a02003	 mov         r2, r3
  07bdc	e3a03008	 mov         r3, #8
  07be0	e0030392	 mul         r3, r2, r3
  07be4	e2833b01	 add         r3, r3, #1, 22
  07be8	e2832087	 add         r2, r3, #0x87
  07bec	e59d3108	 ldr         r3, [sp, #0x108]
  07bf0	e0832002	 add         r2, r3, r2
  07bf4	e3a03000	 mov         r3, #0
  07bf8	e5c23000	 strb        r3, [r2]
  07bfc		 |$LN7@Initialize@2|
  07bfc		 |$LN9@Initialize@2|

; 2898 :             }
; 2899 :         }
; 2900 : 
; 2901 : #ifdef MUSB_USEDMA
; 2902 : 
; 2903 :         // Use DMA transfer if applicable
; 2904 :         if (pED->pDmaChannel)

  07bfc	e59d303c	 ldr         r3, [sp, #0x3C]
  07c00	e2833034	 add         r3, r3, #0x34
  07c04	e5933000	 ldr         r3, [r3]
  07c08	e3530000	 cmp         r3, #0
  07c0c	0a00005f	 beq         |$LN6@Initialize@2|

; 2905 :         {
; 2906 :             UINT32 nFlags = pTD->sTransfer.dwFlags;

  07c10	e59d302c	 ldr         r3, [sp, #0x2C]
  07c14	e2833010	 add         r3, r3, #0x10
  07c18	e5933000	 ldr         r3, [r3]
  07c1c	e58d3050	 str         r3, [sp, #0x50]

; 2907 : 
; 2908 :             if (pED->bfToggleCarry)

  07c20	e59d303c	 ldr         r3, [sp, #0x3C]
  07c24	e2833028	 add         r3, r3, #0x28
  07c28	e1d330b0	 ldrh        r3, [r3]
  07c2c	e3530000	 cmp         r3, #0
  07c30	0a000002	 beq         |$LN5@Initialize@2|

; 2909 :             {
; 2910 :                 nFlags |= USB_TOGGLE_CARRY;

  07c34	e59d3050	 ldr         r3, [sp, #0x50]
  07c38	e3833102	 orr         r3, r3, #2, 2
  07c3c	e58d3050	 str         r3, [sp, #0x50]
  07c40		 |$LN5@Initialize@2|

; 2911 :             }
; 2912 : 
; 2913 :             BOOL fResult = pED->pDmaChannel->IssueTransfer(
; 2914 :                 pED->bfEndpointNumber,
; 2915 :                 pTD->sTransfer.address,
; 2916 :                 epType,
; 2917 :                 pED->bfMaxPacketSize,
; 2918 :                 pTD->sTransfer.lpvClientBuffer,
; 2919 :                 pTD->sTransfer.paClientBuffer,
; 2920 :                 pTD->BytesToTransfer,
; 2921 :                 pTD->sTransfer.dwFrames,
; 2922 :                 (UINT32 *)pTD->sTransfer.aLengths,
; 2923 :                 pTD->sTransfer.adwIsochErrors,
; 2924 :                 pTD->sTransfer.adwIsochLengths,
; 2925 :                 nFlags,
; 2926 :                 pED,
; 2927 :                 pTD);

  07c40	e59d302c	 ldr         r3, [sp, #0x2C]
  07c44	e58d3028	 str         r3, [sp, #0x28]
  07c48	e59d303c	 ldr         r3, [sp, #0x3C]
  07c4c	e58d3024	 str         r3, [sp, #0x24]
  07c50	e59d3050	 ldr         r3, [sp, #0x50]
  07c54	e58d3020	 str         r3, [sp, #0x20]
  07c58	e59d302c	 ldr         r3, [sp, #0x2C]
  07c5c	e283303c	 add         r3, r3, #0x3C
  07c60	e5933000	 ldr         r3, [r3]
  07c64	e58d301c	 str         r3, [sp, #0x1C]
  07c68	e59d302c	 ldr         r3, [sp, #0x2C]
  07c6c	e2833038	 add         r3, r3, #0x38
  07c70	e5933000	 ldr         r3, [r3]
  07c74	e58d3018	 str         r3, [sp, #0x18]
  07c78	e59d302c	 ldr         r3, [sp, #0x2C]
  07c7c	e2833024	 add         r3, r3, #0x24
  07c80	e5933000	 ldr         r3, [r3]
  07c84	e58d3014	 str         r3, [sp, #0x14]
  07c88	e59d302c	 ldr         r3, [sp, #0x2C]
  07c8c	e2833020	 add         r3, r3, #0x20
  07c90	e5933000	 ldr         r3, [r3]
  07c94	e58d3010	 str         r3, [sp, #0x10]
  07c98	e59d302c	 ldr         r3, [sp, #0x2C]
  07c9c	e2833058	 add         r3, r3, #0x58
  07ca0	e5933000	 ldr         r3, [r3]
  07ca4	e58d300c	 str         r3, [sp, #0xC]
  07ca8	e59d302c	 ldr         r3, [sp, #0x2C]
  07cac	e2833030	 add         r3, r3, #0x30
  07cb0	e5933000	 ldr         r3, [r3]
  07cb4	e58d3008	 str         r3, [sp, #8]
  07cb8	e59d302c	 ldr         r3, [sp, #0x2C]
  07cbc	e283302c	 add         r3, r3, #0x2C
  07cc0	e5933000	 ldr         r3, [r3]
  07cc4	e58d3004	 str         r3, [sp, #4]
  07cc8	e59d303c	 ldr         r3, [sp, #0x3C]
  07ccc	e283300e	 add         r3, r3, #0xE
  07cd0	e1d330b0	 ldrh        r3, [r3]
  07cd4	e58d3000	 str         r3, [sp]
  07cd8	e5dd3042	 ldrb        r3, [sp, #0x42]
  07cdc	e59d202c	 ldr         r2, [sp, #0x2C]
  07ce0	e2822004	 add         r2, r2, #4
  07ce4	e5d22000	 ldrb        r2, [r2]
  07ce8	e59d103c	 ldr         r1, [sp, #0x3C]
  07cec	e2811005	 add         r1, r1, #5
  07cf0	e5d11000	 ldrb        r1, [r1]
  07cf4	e59d003c	 ldr         r0, [sp, #0x3C]
  07cf8	e2800034	 add         r0, r0, #0x34
  07cfc	e590e000	 ldr         lr, [r0]
  07d00	e59d003c	 ldr         r0, [sp, #0x3C]
  07d04	e2800034	 add         r0, r0, #0x34
  07d08	e5904000	 ldr         r4, [r0]
  07d0c	e59e0000	 ldr         r0, [lr]
  07d10	e280e004	 add         lr, r0, #4
  07d14	e1a00004	 mov         r0, r4
  07d18	e59e4000	 ldr         r4, [lr]
  07d1c	e1a0e00f	 mov         lr, pc
  07d20	e12fff14	 bx          r4
  07d24	e58d00ec	 str         r0, [sp, #0xEC]
  07d28	e59d30ec	 ldr         r3, [sp, #0xEC]
  07d2c	e58d304c	 str         r3, [sp, #0x4C]

; 2928 : 
; 2929 :             if (!fResult)

  07d30	e59d304c	 ldr         r3, [sp, #0x4C]
  07d34	e3530000	 cmp         r3, #0
  07d38	1a000013	 bne         |$LN4@Initialize@2|

; 2930 :             {
; 2931 :                 DEBUGMSG(1, (L"CHW::InitializeTransaction: Failed to start DMA IN transfer!\r\n"));

  07d3c	e59f00c8	 ldr         r0, [pc, #0xC8]
  07d40	eb000000	 bl          NKDbgPrintfW
  07d44	e3a03001	 mov         r3, #1
  07d48	e58d30f0	 str         r3, [sp, #0xF0]
  07d4c	ea000001	 b           |$LN64@Initialize@2|
  07d50	e3a03000	 mov         r3, #0
  07d54	e58d30f0	 str         r3, [sp, #0xF0]
  07d58		 |$LN64@Initialize@2|

; 2932 :                 DEBUGCHK(FALSE);

  07d58	ea000002	 b           |$LN65@Initialize@2|
  07d5c	e3a03001	 mov         r3, #1
  07d60	e58d30f4	 str         r3, [sp, #0xF4]
  07d64	ea000008	 b           |$LN66@Initialize@2|
  07d68		 |$LN65@Initialize@2|
  07d68	e3a03c0b	 mov         r3, #0xB, 24
  07d6c	e3833074	 orr         r3, r3, #0x74
  07d70	e59f2090	 ldr         r2, [pc, #0x90]
  07d74	e59f1088	 ldr         r1, [pc, #0x88]
  07d78	e59f0080	 ldr         r0, [pc, #0x80]
  07d7c	eb000000	 bl          NKDbgPrintfW
  07d80	e6000010	 __debugbreak_ce
  07d84	e3a03000	 mov         r3, #0
  07d88	e58d30f4	 str         r3, [sp, #0xF4]
  07d8c		 |$LN66@Initialize@2|
  07d8c		 |$LN4@Initialize@2|

; 2933 :             }
; 2934 :         }
; 2935 :         else

  07d8c	ea000018	 b           |$LN3@Initialize@2|
  07d90		 |$LN6@Initialize@2|

; 2936 : 
; 2937 : #endif // MUSB_USEDMA
; 2938 : 
; 2939 :         {
; 2940 :             /*if (pTD->sTransfer.paClientBuffer != NULL)
; 2941 :             {
; 2942 :                 RETAILMSG(TRUE,(TEXT("EP %u Buff %08x Rx%x\n"), pED->bHostEndPointNum, pTD->sTransfer.paClientBuffer, pTD->BytesToTransfer));
; 2943 :             }*/
; 2944 : 
; 2945 :             /*IN Transaction*/
; 2946 :             if(pED->bfToggleCarry)

  07d90	e59d303c	 ldr         r3, [sp, #0x3C]
  07d94	e2833028	 add         r3, r3, #0x28
  07d98	e1d330b0	 ldrh        r3, [r3]
  07d9c	e3530000	 cmp         r3, #0
  07da0	0a000002	 beq         |$LN2@Initialize@2|

; 2947 :                 HOST_CSR = (MGC_M_RXCSR_H_WR_DATATOGGLE|MGC_M_RXCSR_H_DATATOGGLE);

  07da4	e3a03c06	 mov         r3, #6, 24
  07da8	e1cd34b0	 strh        r3, [sp, #0x40]

; 2948 :             else

  07dac	ea000001	 b           |$LN1@Initialize@2|
  07db0		 |$LN2@Initialize@2|

; 2949 :                 HOST_CSR = (MGC_M_RXCSR_CLRDATATOG);

  07db0	e3a03080	 mov         r3, #0x80
  07db4	e1cd34b0	 strh        r3, [sp, #0x40]
  07db8		 |$LN1@Initialize@2|

; 2950 :             WRITE_PORT_USHORT( (portBase + MGC_END_OFFSET(pED->bHostEndPointNum, MGC_O_HDRC_RXCSR)),
; 2951 :                                (HOST_CSR|MGC_M_RXCSR_H_REQPKT));

  07db8	e1dd34b0	 ldrh        r3, [sp, #0x40]
  07dbc	e3833020	 orr         r3, r3, #0x20
  07dc0	e1a01803	 mov         r1, r3, lsl #16
  07dc4	e1a01821	 mov         r1, r1, lsr #16
  07dc8	e59d303c	 ldr         r3, [sp, #0x3C]
  07dcc	e2833010	 add         r3, r3, #0x10
  07dd0	e5d33000	 ldrb        r3, [r3]
  07dd4	e1a02003	 mov         r2, r3
  07dd8	e3a03010	 mov         r3, #0x10
  07ddc	e0030392	 mul         r3, r2, r3
  07de0	e2833c05	 add         r3, r3, #5, 24
  07de4	e2832006	 add         r2, r3, #6
  07de8	e59d3108	 ldr         r3, [sp, #0x108]
  07dec	e0833002	 add         r3, r3, r2
  07df0	e1c310b0	 strh        r1, [r3]
  07df4		 |$LN3@Initialize@2|
  07df4		 |$LN31@Initialize@2|
  07df4		 |$LN35@Initialize@2|

; 2952 :         }
; 2953 : 
; 2954 :         break;
; 2955 :     }
; 2956 : }

  07df4	e28dd0f8	 add         sp, sp, #0xF8
  07df8	e89d6010	 ldmia       sp, {r4, sp, lr}
  07dfc	e12fff1e	 bx          lr
  07e00		 |$LN77@Initialize@2|
  07e00		 |$LN78@Initialize@2|
  07e00	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  07e04		 |$LN79@Initialize@2|
  07e04	00000000	 DCD         |dpCurSettings|
  07e08		 |$LN80@Initialize@2|
  07e08	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  07e0c		 |$LN81@Initialize@2|
  07e0c	00000000	 DCD         |??_C@_1HO@HBDHEAHO@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl@|
  07e10		 |$LN82@Initialize@2|
  07e10	00000000	 DCD         |??_C@_1IA@BHLIBBBH@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl@|
  07e14		 |$LN83@Initialize@2|
  07e14	00000000	 DCD         |?g_hUsbProcessingEvent@@3PAXA|
  07e18		 |$LN84@Initialize@2|
  07e18	00000000	 DCD         |??_C@_1JA@MLIPDDJE@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi@|
  07e1c		 |$LN85@Initialize@2|
  07e1c	00000000	 DCD         |??_C@_1IK@HPMAEEDM@?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAD?$AAe?$AAv?$AAi@|
  07e20		 |$M43819|

			 ENDP  ; |?InitializeTransaction@CHW@@QAAXIPAX0@Z|, CHW::InitializeTransaction

	EXPORT	|?DmaTransferComplete@CHW@@SAXPAVCCppiDmaChannel@@IIIIPAX1@Z| ; CHW::DmaTransferComplete

  00108			 AREA	 |.pdata|, PDATA
|$T43843| DCD	|$LN14@DmaTransfe|
	DCD	0x40008504
; Function compile flags: /Odtp

  07e20			 AREA	 |.text|, CODE, ARM

  07e20		 |?DmaTransferComplete@CHW@@SAXPAVCCppiDmaChannel@@IIIIPAX1@Z| PROC ; CHW::DmaTransferComplete

; 2974 : {

  07e20		 |$LN14@DmaTransfe|
  07e20	e1a0c00d	 mov         r12, sp
  07e24	e92d000f	 stmdb       sp!, {r0 - r3}
  07e28	e92d5000	 stmdb       sp!, {r12, lr}
  07e2c	e24dd018	 sub         sp, sp, #0x18
  07e30		 |$M43840|

; 2975 :     UNREFERENCED_PARAMETER(pChannel);
; 2976 :     UNREFERENCED_PARAMETER(nLength);
; 2977 :     UNREFERENCED_PARAMETER(nComplete);
; 2978 : 
; 2979 :     USBED *pED = (USBED *)pPrivate;

  07e30	e59d3034	 ldr         r3, [sp, #0x34]
  07e34	e58d3004	 str         r3, [sp, #4]

; 2980 :     USBTD *pTD = (USBTD *)pCookie;

  07e38	e59d3038	 ldr         r3, [sp, #0x38]
  07e3c	e58d3000	 str         r3, [sp]

; 2981 : 
; 2982 :     DEBUGCHK(m_pChw);

  07e40	e59f31dc	 ldr         r3, [pc, #0x1DC]
  07e44	e5933000	 ldr         r3, [r3]
  07e48	e3530000	 cmp         r3, #0
  07e4c	0a000002	 beq         |$LN4@DmaTransfe|
  07e50	e3a03001	 mov         r3, #1
  07e54	e58d3008	 str         r3, [sp, #8]
  07e58	ea000008	 b           |$LN5@DmaTransfe|
  07e5c		 |$LN4@DmaTransfe|
  07e5c	e3a03c0b	 mov         r3, #0xB, 24
  07e60	e38330a6	 orr         r3, r3, #0xA6
  07e64	e59f21c4	 ldr         r2, [pc, #0x1C4]
  07e68	e59f11bc	 ldr         r1, [pc, #0x1BC]
  07e6c	e59f01b4	 ldr         r0, [pc, #0x1B4]
  07e70	eb000000	 bl          NKDbgPrintfW
  07e74	e6000010	 __debugbreak_ce
  07e78	e3a03000	 mov         r3, #0
  07e7c	e58d3008	 str         r3, [sp, #8]
  07e80		 |$LN5@DmaTransfe|

; 2983 :     DEBUGCHK(pED && pTD);

  07e80	e59d3004	 ldr         r3, [sp, #4]
  07e84	e3530000	 cmp         r3, #0
  07e88	0a000005	 beq         |$LN6@DmaTransfe|
  07e8c	e59d3000	 ldr         r3, [sp]
  07e90	e3530000	 cmp         r3, #0
  07e94	0a000002	 beq         |$LN6@DmaTransfe|
  07e98	e3a03001	 mov         r3, #1
  07e9c	e58d300c	 str         r3, [sp, #0xC]
  07ea0	ea000008	 b           |$LN7@DmaTransfe|
  07ea4		 |$LN6@DmaTransfe|
  07ea4	e3a03c0b	 mov         r3, #0xB, 24
  07ea8	e38330a7	 orr         r3, r3, #0xA7
  07eac	e59f217c	 ldr         r2, [pc, #0x17C]
  07eb0	e59f1174	 ldr         r1, [pc, #0x174]
  07eb4	e59f016c	 ldr         r0, [pc, #0x16C]
  07eb8	eb000000	 bl          NKDbgPrintfW
  07ebc	e6000010	 __debugbreak_ce
  07ec0	e3a03000	 mov         r3, #0
  07ec4	e58d300c	 str         r3, [sp, #0xC]
  07ec8		 |$LN7@DmaTransfe|

; 2984 :     DEBUGCHK(pED->pDmaChannel == pChannel);

  07ec8	e59d3004	 ldr         r3, [sp, #4]
  07ecc	e2833034	 add         r3, r3, #0x34
  07ed0	e5932000	 ldr         r2, [r3]
  07ed4	e59d3020	 ldr         r3, [sp, #0x20]
  07ed8	e1520003	 cmp         r2, r3
  07edc	1a000002	 bne         |$LN8@DmaTransfe|
  07ee0	e3a03001	 mov         r3, #1
  07ee4	e58d3010	 str         r3, [sp, #0x10]
  07ee8	ea000008	 b           |$LN9@DmaTransfe|
  07eec		 |$LN8@DmaTransfe|
  07eec	e3a03c0b	 mov         r3, #0xB, 24
  07ef0	e38330a8	 orr         r3, r3, #0xA8
  07ef4	e59f2134	 ldr         r2, [pc, #0x134]
  07ef8	e59f112c	 ldr         r1, [pc, #0x12C]
  07efc	e59f0124	 ldr         r0, [pc, #0x124]
  07f00	eb000000	 bl          NKDbgPrintfW
  07f04	e6000010	 __debugbreak_ce
  07f08	e3a03000	 mov         r3, #0
  07f0c	e58d3010	 str         r3, [sp, #0x10]
  07f10		 |$LN9@DmaTransfe|

; 2985 : 
; 2986 :     m_pChw->LockProcessingThread();

  07f10	e59f310c	 ldr         r3, [pc, #0x10C]
  07f14	e5930000	 ldr         r0, [r3]
  07f18	eb000000	 bl          |?LockProcessingThread@CHW@@QAAXXZ|

; 2987 : 
; 2988 :     pTD->BytesTransferred += nComplete;

  07f1c	e59d3000	 ldr         r3, [sp]
  07f20	e2833054	 add         r3, r3, #0x54
  07f24	e5932000	 ldr         r2, [r3]
  07f28	e59d302c	 ldr         r3, [sp, #0x2C]
  07f2c	e0822003	 add         r2, r2, r3
  07f30	e59d3000	 ldr         r3, [sp]
  07f34	e2833054	 add         r3, r3, #0x54
  07f38	e5832000	 str         r2, [r3]

; 2989 :     pTD->BytesToTransfer -= nComplete;

  07f3c	e59d3000	 ldr         r3, [sp]
  07f40	e2833058	 add         r3, r3, #0x58
  07f44	e5932000	 ldr         r2, [r3]
  07f48	e59d302c	 ldr         r3, [sp, #0x2C]
  07f4c	e0422003	 sub         r2, r2, r3
  07f50	e59d3000	 ldr         r3, [sp]
  07f54	e2833058	 add         r3, r3, #0x58
  07f58	e5832000	 str         r2, [r3]

; 2990 : 
; 2991 :     *pTD->sTransfer.lpdwBytesTransferred = nComplete;

  07f5c	e59d3000	 ldr         r3, [sp]
  07f60	e2833044	 add         r3, r3, #0x44
  07f64	e5932000	 ldr         r2, [r3]
  07f68	e59d302c	 ldr         r3, [sp, #0x2C]
  07f6c	e5823000	 str         r3, [r2]

; 2992 :     *pTD->sTransfer.lpfComplete = TRUE;

  07f70	e59d3000	 ldr         r3, [sp]
  07f74	e2833040	 add         r3, r3, #0x40
  07f78	e5932000	 ldr         r2, [r3]
  07f7c	e3a03001	 mov         r3, #1
  07f80	e5823000	 str         r3, [r2]

; 2993 :     *pTD->sTransfer.lpdwError = nStatus;

  07f84	e59d3000	 ldr         r3, [sp]
  07f88	e2833048	 add         r3, r3, #0x48
  07f8c	e5932000	 ldr         r2, [r3]
  07f90	e59d3024	 ldr         r3, [sp, #0x24]
  07f94	e5823000	 str         r3, [r2]

; 2994 : 
; 2995 :     if (nStatus != USB_NO_ERROR)

  07f98	e59d3024	 ldr         r3, [sp, #0x24]
  07f9c	e3530000	 cmp         r3, #0
  07fa0	0a000003	 beq         |$LN1@DmaTransfe|

; 2996 :     {
; 2997 :         pED->bfHalted = TRUE;

  07fa4	e59d3004	 ldr         r3, [sp, #4]
  07fa8	e2832024	 add         r2, r3, #0x24
  07fac	e3a03001	 mov         r3, #1
  07fb0	e5823000	 str         r3, [r2]
  07fb4		 |$LN1@DmaTransfe|

; 2998 :     }
; 2999 : 
; 3000 :     pED->bfToggleCarry = (nOptions & USB_TOGGLE_CARRY) ? 1 : 0;

  07fb4	e59d3030	 ldr         r3, [sp, #0x30]
  07fb8	e3130102	 tst         r3, #2, 2
  07fbc	0a000002	 beq         |$LN10@DmaTransfe|
  07fc0	e3a03001	 mov         r3, #1
  07fc4	e58d3014	 str         r3, [sp, #0x14]
  07fc8	ea000001	 b           |$LN11@DmaTransfe|
  07fcc		 |$LN10@DmaTransfe|
  07fcc	e3a03000	 mov         r3, #0
  07fd0	e58d3014	 str         r3, [sp, #0x14]
  07fd4		 |$LN11@DmaTransfe|
  07fd4	e59d3014	 ldr         r3, [sp, #0x14]
  07fd8	e1a02803	 mov         r2, r3, lsl #16
  07fdc	e1a02822	 mov         r2, r2, lsr #16
  07fe0	e59d3004	 ldr         r3, [sp, #4]
  07fe4	e2833028	 add         r3, r3, #0x28
  07fe8	e1c320b0	 strh        r2, [r3]

; 3001 :     pED->TransferStatus = STATUS_COMPLETE;

  07fec	e59d3004	 ldr         r3, [sp, #4]
  07ff0	e283201c	 add         r2, r3, #0x1C
  07ff4	e3a03002	 mov         r3, #2
  07ff8	e5823000	 str         r3, [r2]

; 3002 : 
; 3003 :     m_pChw->UnlockProcessingThread();

  07ffc	e59f3020	 ldr         r3, [pc, #0x20]
  08000	e5930000	 ldr         r0, [r3]
  08004	eb000000	 bl          |?UnlockProcessingThread@CHW@@QAAXXZ|

; 3004 : 
; 3005 :     SetEvent(g_hUsbProcessingEvent);

  08008	e59f3010	 ldr         r3, [pc, #0x10]
  0800c	e5930000	 ldr         r0, [r3]
  08010	eb000000	 bl          SetEvent

; 3006 : }

  08014	e28dd018	 add         sp, sp, #0x18
  08018	e89d6000	 ldmia       sp, {sp, lr}
  0801c	e12fff1e	 bx          lr
  08020		 |$LN15@DmaTransfe|
  08020		 |$LN16@DmaTransfe|
  08020	00000000	 DCD         |?g_hUsbProcessingEvent@@3PAXA|
  08024		 |$LN17@DmaTransfe|
  08024	00000000	 DCD         |?m_pChw@CHW@@2PAV1@A|
  08028		 |$LN18@DmaTransfe|
  08028	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  0802c		 |$LN19@DmaTransfe|
  0802c	00000000	 DCD         |dpCurSettings|
  08030		 |$LN20@DmaTransfe|
  08030	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  08034		 |$M43841|

			 ENDP  ; |?DmaTransferComplete@CHW@@SAXPAVCCppiDmaChannel@@IIIIPAX1@Z|, CHW::DmaTransferComplete

	EXPORT	|?CeResumeThread@CHW@@AAAKXZ|		; CHW::CeResumeThread

  00110			 AREA	 |.pdata|, PDATA
|$T43855| DCD	|$LN5@CeResumeTh|
	DCD	0x40000d04
; Function compile flags: /Odtp

  08034			 AREA	 |.text|, CODE, ARM

  08034		 |?CeResumeThreadStub@CHW@@CAKPAX@Z| PROC ; CHW::CeResumeThreadStub

; 3011 : {

  08034		 |$LN5@CeResumeTh|
  08034	e1a0c00d	 mov         r12, sp
  08038	e92d0001	 stmdb       sp!, {r0}
  0803c	e92d5000	 stmdb       sp!, {r12, lr}
  08040	e24dd008	 sub         sp, sp, #8
  08044		 |$M43852|

; 3012 :     return ((CHW *)context)->CeResumeThread ( );

  08044	e59d0010	 ldr         r0, [sp, #0x10]
  08048	eb000000	 bl          |?CeResumeThread@CHW@@AAAKXZ|
  0804c	e58d0004	 str         r0, [sp, #4]
  08050	e59d3004	 ldr         r3, [sp, #4]
  08054	e58d3000	 str         r3, [sp]

; 3013 : }

  08058	e59d0000	 ldr         r0, [sp]
  0805c	e28dd008	 add         sp, sp, #8
  08060	e89d6000	 ldmia       sp, {sp, lr}
  08064	e12fff1e	 bx          lr
  08068		 |$M43853|

			 ENDP  ; |?CeResumeThreadStub@CHW@@CAKPAX@Z|, CHW::CeResumeThreadStub

	EXPORT	|??_C@_1CO@HKDOJG@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAe?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@KFKELHEK@?$AAU?$AAS?$AAB?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAH?$AAC?$AAD?$AA?5?$AAa?$AAt?$AA?5?$AAC?$AAE?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@NLLOGBLN@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAe?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@| [ DATA ] ; `string'

  00118			 AREA	 |.pdata|, PDATA
|$T43871| DCD	|$LN19@CeResumeTh@2|
	DCD	0x40008604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@HKDOJG@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAe?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "C"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "m"
	DCB	0x0, "e", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@KFKELHEK@?$AAU?$AAS?$AAB?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAH?$AAC?$AAD?$AA?5?$AAa?$AAt?$AA?5?$AAC?$AAE?$AA?5@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, " ", 0x0, "H", 0x0, "C", 0x0, "D"
	DCB	0x0, " ", 0x0, "a", 0x0, "t", 0x0, " ", 0x0, "C", 0x0, "E"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "m"
	DCB	0x0, "e", 0x0, ";", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, "."
	DCB	0x0, ".", 0x0, ".", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@NLLOGBLN@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAe?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@| DCB "+"
	DCB	0x0, "C", 0x0, "H", 0x0, "W", 0x0, ":", 0x0, ":", 0x0, "C"
	DCB	0x0, "e", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "u", 0x0, "m"
	DCB	0x0, "e", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0xd, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  08068			 AREA	 |.text|, CODE, ARM

  08068		 |?CeResumeThread@CHW@@AAAKXZ| PROC	; CHW::CeResumeThread

; 3032 : {

  08068		 |$LN19@CeResumeTh@2|
  08068	e1a0c00d	 mov         r12, sp
  0806c	e92d0001	 stmdb       sp!, {r0}
  08070	e92d5000	 stmdb       sp!, {r12, lr}
  08074	e24dd01c	 sub         sp, sp, #0x1C
  08078		 |$M43868|

; 3033 :     DEBUGMSG(ZONE_ERROR, (TEXT("+CHW::CeResumeThread\n\r")));

  08078	e59f31e8	 ldr         r3, [pc, #0x1E8]
  0807c	e5933440	 ldr         r3, [r3, #0x440]
  08080	e3130901	 tst         r3, #1, 18
  08084	0a000004	 beq         |$LN7@CeResumeTh@2|
  08088	e59f01ec	 ldr         r0, [pc, #0x1EC]
  0808c	eb000000	 bl          NKDbgPrintfW
  08090	e3a03001	 mov         r3, #1
  08094	e58d3004	 str         r3, [sp, #4]
  08098	ea000001	 b           |$LN8@CeResumeTh@2|
  0809c		 |$LN7@CeResumeTh@2|
  0809c	e3a03000	 mov         r3, #0
  080a0	e58d3004	 str         r3, [sp, #4]
  080a4		 |$LN8@CeResumeTh@2|

; 3034 :     // reconstruct the objects at the same addresses where they were before;
; 3035 :     // this allows us not to have to alert the PDD that the addresses have changed.
; 3036 : 
; 3037 :     DEBUGCHK( m_fPowerResuming == FALSE );

  080a4	e59d3024	 ldr         r3, [sp, #0x24]
  080a8	e2833f66	 add         r3, r3, #0x66, 30
  080ac	e5933000	 ldr         r3, [r3]
  080b0	e3530000	 cmp         r3, #0
  080b4	1a000002	 bne         |$LN9@CeResumeTh@2|
  080b8	e3a03001	 mov         r3, #1
  080bc	e58d3008	 str         r3, [sp, #8]
  080c0	ea000008	 b           |$LN10@CeResumeTh@2|
  080c4		 |$LN9@CeResumeTh@2|
  080c4	e3a03c0b	 mov         r3, #0xB, 24
  080c8	e38330dd	 orr         r3, r3, #0xDD
  080cc	e59f21a4	 ldr         r2, [pc, #0x1A4]
  080d0	e59f1190	 ldr         r1, [pc, #0x190]
  080d4	e59f0194	 ldr         r0, [pc, #0x194]
  080d8	eb000000	 bl          NKDbgPrintfW
  080dc	e6000010	 __debugbreak_ce
  080e0	e3a03000	 mov         r3, #0
  080e4	e58d3008	 str         r3, [sp, #8]
  080e8		 |$LN10@CeResumeTh@2|

; 3038 : 
; 3039 :     // order is important! resuming indicates that the hcd object is temporarily invalid
; 3040 :     // while powerup simply signals that a powerup event has occurred. once the powerup
; 3041 :     // flag is cleared, we will repeat this whole sequence should it get resignalled.
; 3042 :     m_fPowerUpFlag = FALSE;

  080e8	e59d3024	 ldr         r3, [sp, #0x24]
  080ec	e2832f65	 add         r2, r3, #0x65, 30
  080f0	e3a03000	 mov         r3, #0
  080f4	e5823000	 str         r3, [r2]

; 3043 :     m_fPowerResuming = TRUE;

  080f8	e59d3024	 ldr         r3, [sp, #0x24]
  080fc	e2832f66	 add         r2, r3, #0x66, 30
  08100	e3a03001	 mov         r3, #1
  08104	e5823000	 str         r3, [r2]

; 3044 : 
; 3045 :     DeviceDeInitialize();

  08108	e59d3024	 ldr         r3, [sp, #0x24]
  0810c	e5933000	 ldr         r3, [r3]
  08110	e2833010	 add         r3, r3, #0x10
  08114	e59d0024	 ldr         r0, [sp, #0x24]
  08118	e5933000	 ldr         r3, [r3]
  0811c	e1a0e00f	 mov         lr, pc
  08120	e12fff13	 bx          r3
  08124		 |$LN4@CeResumeTh@2|

; 3046 :     for(;;) {  // breaks out upon successful reinit of the object
; 3047 : 
; 3048 :         if (DeviceInitialize())

  08124	e59d3024	 ldr         r3, [sp, #0x24]
  08128	e5933000	 ldr         r3, [r3]
  0812c	e283300c	 add         r3, r3, #0xC
  08130	e59d0024	 ldr         r0, [sp, #0x24]
  08134	e5933000	 ldr         r3, [r3]
  08138	e1a0e00f	 mov         lr, pc
  0813c	e12fff13	 bx          r3
  08140	e58d000c	 str         r0, [sp, #0xC]
  08144	e59d300c	 ldr         r3, [sp, #0xC]
  08148	e3530000	 cmp         r3, #0
  0814c	0a000000	 beq         |$LN2@CeResumeTh@2|

; 3049 :             break;

  08150	ea000021	 b           |$LN3@CeResumeTh@2|
  08154		 |$LN2@CeResumeTh@2|

; 3050 :         // getting here means we couldn't reinit the HCD object!
; 3051 :         ASSERT(FALSE);

  08154	ea000002	 b           |$LN11@CeResumeTh@2|
  08158	e3a03001	 mov         r3, #1
  0815c	e58d3010	 str         r3, [sp, #0x10]
  08160	ea000008	 b           |$LN12@CeResumeTh@2|
  08164		 |$LN11@CeResumeTh@2|
  08164	e3a03c0b	 mov         r3, #0xB, 24
  08168	e38330eb	 orr         r3, r3, #0xEB
  0816c	e59f2104	 ldr         r2, [pc, #0x104]
  08170	e59f10fc	 ldr         r1, [pc, #0xFC]
  08174	e59f00f4	 ldr         r0, [pc, #0xF4]
  08178	eb000000	 bl          NKDbgPrintfW
  0817c	e6000010	 __debugbreak_ce
  08180	e3a03000	 mov         r3, #0
  08184	e58d3010	 str         r3, [sp, #0x10]
  08188		 |$LN12@CeResumeTh@2|

; 3052 :         DEBUGMSG(ZONE_ERROR, (TEXT("USB cannot reinit the HCD at CE resume; retrying...\n\r")));

  08188	e59f30d8	 ldr         r3, [pc, #0xD8]
  0818c	e5933440	 ldr         r3, [r3, #0x440]
  08190	e3130901	 tst         r3, #1, 18
  08194	0a000004	 beq         |$LN13@CeResumeTh@2|
  08198	e59f00cc	 ldr         r0, [pc, #0xCC]
  0819c	eb000000	 bl          NKDbgPrintfW
  081a0	e3a03001	 mov         r3, #1
  081a4	e58d3014	 str         r3, [sp, #0x14]
  081a8	ea000001	 b           |$LN14@CeResumeTh@2|
  081ac		 |$LN13@CeResumeTh@2|
  081ac	e3a03000	 mov         r3, #0
  081b0	e58d3014	 str         r3, [sp, #0x14]
  081b4		 |$LN14@CeResumeTh@2|

; 3053 :         DeviceDeInitialize();

  081b4	e59d3024	 ldr         r3, [sp, #0x24]
  081b8	e5933000	 ldr         r3, [r3]
  081bc	e2833010	 add         r3, r3, #0x10
  081c0	e59d0024	 ldr         r0, [sp, #0x24]
  081c4	e5933000	 ldr         r3, [r3]
  081c8	e1a0e00f	 mov         lr, pc
  081cc	e12fff13	 bx          r3

; 3054 :         Sleep(1000);

  081d0	e3a00ffa	 mov         r0, #0xFA, 30
  081d4	eb000000	 bl          Sleep

; 3055 :     }

  081d8	eaffffd1	 b           |$LN4@CeResumeTh@2|
  081dc		 |$LN3@CeResumeTh@2|

; 3056 : 
; 3057 :     // the hcd object is valid again. if a power event occurred between the two flag
; 3058 :     // assignments above then the IST will reinitiate this sequence.
; 3059 :     m_fPowerResuming = FALSE;

  081dc	e59d3024	 ldr         r3, [sp, #0x24]
  081e0	e2832f66	 add         r2, r3, #0x66, 30
  081e4	e3a03000	 mov         r3, #0
  081e8	e5823000	 str         r3, [r2]

; 3060 :     if (m_fPowerUpFlag)

  081ec	e59d3024	 ldr         r3, [sp, #0x24]
  081f0	e2833f65	 add         r3, r3, #0x65, 30
  081f4	e5933000	 ldr         r3, [r3]
  081f8	e3530000	 cmp         r3, #0
  081fc	0a000007	 beq         |$LN1@CeResumeTh@2|

; 3061 :         PowerMgmtCallback(TRUE);

  08200	e3a01001	 mov         r1, #1
  08204	e59d3024	 ldr         r3, [sp, #0x24]
  08208	e5933000	 ldr         r3, [r3]
  0820c	e2833024	 add         r3, r3, #0x24
  08210	e59d0024	 ldr         r0, [sp, #0x24]
  08214	e5933000	 ldr         r3, [r3]
  08218	e1a0e00f	 mov         lr, pc
  0821c	e12fff13	 bx          r3
  08220		 |$LN1@CeResumeTh@2|

; 3062 : 
; 3063 :     DEBUGMSG(ZONE_ERROR, (TEXT("-CHW::CeResumeThread\n\r")));

  08220	e59f3040	 ldr         r3, [pc, #0x40]
  08224	e5933440	 ldr         r3, [r3, #0x440]
  08228	e3130901	 tst         r3, #1, 18
  0822c	0a000004	 beq         |$LN15@CeResumeTh@2|
  08230	e59f002c	 ldr         r0, [pc, #0x2C]
  08234	eb000000	 bl          NKDbgPrintfW
  08238	e3a03001	 mov         r3, #1
  0823c	e58d3018	 str         r3, [sp, #0x18]
  08240	ea000001	 b           |$LN16@CeResumeTh@2|
  08244		 |$LN15@CeResumeTh@2|
  08244	e3a03000	 mov         r3, #0
  08248	e58d3018	 str         r3, [sp, #0x18]
  0824c		 |$LN16@CeResumeTh@2|

; 3064 :     return 0;

  0824c	e3a03000	 mov         r3, #0
  08250	e58d3000	 str         r3, [sp]

; 3065 : }

  08254	e59d0000	 ldr         r0, [sp]
  08258	e28dd01c	 add         sp, sp, #0x1C
  0825c	e89d6000	 ldmia       sp, {sp, lr}
  08260	e12fff1e	 bx          lr
  08264		 |$LN20@CeResumeTh@2|
  08264		 |$LN21@CeResumeTh@2|
  08264	00000000	 DCD         |??_C@_1CO@HKDOJG@?$AA?9?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAe?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@|
  08268		 |$LN22@CeResumeTh@2|
  08268	00000000	 DCD         |dpCurSettings|
  0826c		 |$LN23@CeResumeTh@2|
  0826c	00000000	 DCD         |??_C@_1GM@KFKELHEK@?$AAU?$AAS?$AAB?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAr?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAH?$AAC?$AAD?$AA?5?$AAa?$AAt?$AA?5?$AAC?$AAE?$AA?5@|
  08270		 |$LN24@CeResumeTh@2|
  08270	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  08274		 |$LN25@CeResumeTh@2|
  08274	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  08278		 |$LN26@CeResumeTh@2|
  08278	00000000	 DCD         |??_C@_1JG@MGKNAEPI@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0827c		 |$LN27@CeResumeTh@2|
  0827c	00000000	 DCD         |??_C@_1CO@NLLOGBLN@?$AA?$CL?$AAC?$AAH?$AAW?$AA?3?$AA?3?$AAC?$AAe?$AAR?$AAe?$AAs?$AAu?$AAm?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AN?$AA?$AA@|
  08280		 |$M43869|

			 ENDP  ; |?CeResumeThread@CHW@@AAAKXZ|, CHW::CeResumeThread

	END
