; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBCDMA\usbcdma.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|g_scheduleRx| % 0x3c
|g_scheduleTx| % 0x3c
|g_hDc|	%	0x4

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M", 0x0
	DCB	"A", 0x0, " ", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0
	DCB	"e", 0x0, "r", 0x0, 0x0, 0x0
	%	34
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"V", 0x0, "e", 0x0, "r", 0x0, "b", 0x0, "o", 0x0, "s", 0x0
	DCB	"e", 0x0, 0x0, 0x0
	%	48
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, 0x0, 0x0
	%	52
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0xffff
	%	4
|g_Dc|	DCD	0x0
	%	16
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x0
	DCD	0x65
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	%	4
	DCD	0x400
	DCD	0x0
	DCD	0x0
	%	4
	DCW	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4
	DCW	0x0
	DCB	0x0
	%	1
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4
	DCD	0x0
	DCD	0x0
	DCD	0x0
	%	4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1DM@IFKMFLFD@?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAD?$AAL?$AAL?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AA_?$AAD?$AAE?$AAT?$AAA?$AAC?$AAH?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CJBJJFLL@?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAD?$AAL?$AAL?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AA_?$AAA?$AAT?$AAT?$AAA?$AAC?$AAH?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DllEntry|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T46168| DCD	|$LN13@DllEntry|
	DCD	0x40003204
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbcdma\usbcdma.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@IFKMFLFD@?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAD?$AAL?$AAL?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AA_?$AAD?$AAE?$AAT?$AAA?$AAC?$AAH?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "D", 0x0, "L", 0x0, "L", 0x0, "_"
	DCB	0x0, "P", 0x0, "R", 0x0, "O", 0x0, "C", 0x0, "E", 0x0, "S"
	DCB	0x0, "S", 0x0, "_", 0x0, "D", 0x0, "E", 0x0, "T", 0x0, "A"
	DCB	0x0, "C", 0x0, "H", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CJBJJFLL@?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAD?$AAL?$AAL?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AA_?$AAA?$AAT?$AAT?$AAA?$AAC?$AAH?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "D", 0x0, "L", 0x0, "L", 0x0, "_"
	DCB	0x0, "P", 0x0, "R", 0x0, "O", 0x0, "C", 0x0, "E", 0x0, "S"
	DCB	0x0, "S", 0x0, "_", 0x0, "A", 0x0, "T", 0x0, "T", 0x0, "A"
	DCB	0x0, "C", 0x0, "H", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllEntry| PROC

; 140  : {

  00000		 |$LN13@DllEntry|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M46165|

; 141  : 	UNREFERENCED_PARAMETER(lpvReserved);
; 142  : 
; 143  :     switch (dwReason)

  00010	e59d301c	 ldr         r3, [sp, #0x1C]
  00014	e58d3004	 str         r3, [sp, #4]
  00018	e59d3004	 ldr         r3, [sp, #4]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000014	 beq         |$LN1@DllEntry|
  00024	e59d3004	 ldr         r3, [sp, #4]
  00028	e3530001	 cmp         r3, #1
  0002c	0a000000	 beq         |$LN2@DllEntry|
  00030	ea00001b	 b           |$LN3@DllEntry|
  00034		 |$LN2@DllEntry|

; 144  :     {
; 145  :         case DLL_PROCESS_ATTACH:
; 146  :             DEBUGMSG(ZONE_INIT, (_T("USBCDMA: DLL_PROCESS_ATTACH\r\n")));

  00034	e59f3084	 ldr         r3, [pc, #0x84]
  00038	e5933440	 ldr         r3, [r3, #0x440]
  0003c	e3130020	 tst         r3, #0x20
  00040	0a000004	 beq         |$LN7@DllEntry|
  00044	e59f0078	 ldr         r0, [pc, #0x78]
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e3a03001	 mov         r3, #1
  00050	e58d3008	 str         r3, [sp, #8]
  00054	ea000001	 b           |$LN8@DllEntry|
  00058		 |$LN7@DllEntry|
  00058	e3a03000	 mov         r3, #0
  0005c	e58d3008	 str         r3, [sp, #8]
  00060		 |$LN8@DllEntry|

; 147  :             DEBUGREGISTER(hInstDll);

  00060	e59f1058	 ldr         r1, [pc, #0x58]
  00064	e59d0018	 ldr         r0, [sp, #0x18]
  00068	eb000000	 bl          RegisterDbgZones

; 148  :             DisableThreadLibraryCalls((HMODULE)hInstDll);

  0006c	e59d0018	 ldr         r0, [sp, #0x18]
  00070	eb000000	 bl          DisableThreadLibraryCalls

; 149  :             break;

  00074	ea00000a	 b           |$LN3@DllEntry|
  00078		 |$LN1@DllEntry|

; 150  : 
; 151  :         case DLL_PROCESS_DETACH:
; 152  :             DEBUGMSG(ZONE_INIT, (_T("USBCDMA: DLL_PROCESS_DETACH\r\n")));

  00078	e59f3040	 ldr         r3, [pc, #0x40]
  0007c	e5933440	 ldr         r3, [r3, #0x440]
  00080	e3130020	 tst         r3, #0x20
  00084	0a000004	 beq         |$LN9@DllEntry|
  00088	e59f002c	 ldr         r0, [pc, #0x2C]
  0008c	eb000000	 bl          NKDbgPrintfW
  00090	e3a03001	 mov         r3, #1
  00094	e58d300c	 str         r3, [sp, #0xC]
  00098	ea000001	 b           |$LN10@DllEntry|
  0009c		 |$LN9@DllEntry|
  0009c	e3a03000	 mov         r3, #0
  000a0	e58d300c	 str         r3, [sp, #0xC]
  000a4		 |$LN10@DllEntry|
  000a4		 |$LN3@DllEntry|

; 153  :             break;
; 154  :     }
; 155  :     return TRUE;

  000a4	e3a03001	 mov         r3, #1
  000a8	e58d3000	 str         r3, [sp]

; 156  : }

  000ac	e59d0000	 ldr         r0, [sp]
  000b0	e28dd010	 add         sp, sp, #0x10
  000b4	e89d6000	 ldmia       sp, {sp, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$LN14@DllEntry|
  000bc		 |$LN15@DllEntry|
  000bc	00000000	 DCD         |??_C@_1DM@IFKMFLFD@?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAD?$AAL?$AAL?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AA_?$AAD?$AAE?$AAT?$AAA?$AAC?$AAH?$AA?$AN?$AA?6?$AA?$AA@|
  000c0		 |$LN16@DllEntry|
  000c0	00000000	 DCD         |dpCurSettings|
  000c4		 |$LN17@DllEntry|
  000c4	00000000	 DCD         |??_C@_1DM@CJBJJFLL@?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAD?$AAL?$AAL?$AA_?$AAP?$AAR?$AAO?$AAC?$AAE?$AAS?$AAS?$AA_?$AAA?$AAT?$AAT?$AAA?$AAC?$AAH?$AA?$AN?$AA?6?$AA?$AA@|
  000c8		 |$M46166|

			 ENDP  ; |DllEntry|

	EXPORT	|UCD_Close|

  00008			 AREA	 |.pdata|, PDATA
|$T46178| DCD	|$LN5@UCD_Close|
	DCD	0x40000a04
; Function compile flags: /Odtp

  000c8			 AREA	 |.text|, CODE, ARM

  000c8		 |UCD_Close| PROC

; 168  : { 

  000c8		 |$LN5@UCD_Close|
  000c8	e1a0c00d	 mov         r12, sp
  000cc	e92d0001	 stmdb       sp!, {r0}
  000d0	e92d5000	 stmdb       sp!, {r12, lr}
  000d4	e24dd004	 sub         sp, sp, #4
  000d8		 |$M46175|

; 169  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 170  : 
; 171  : 	return TRUE;

  000d8	e3a03001	 mov         r3, #1
  000dc	e58d3000	 str         r3, [sp]

; 172  : }

  000e0	e59d0000	 ldr         r0, [sp]
  000e4	e28dd004	 add         sp, sp, #4
  000e8	e89d6000	 ldmia       sp, {sp, lr}
  000ec	e12fff1e	 bx          lr
  000f0		 |$M46176|

			 ENDP  ; |UCD_Close|

	EXPORT	|UCD_Read|

  00010			 AREA	 |.pdata|, PDATA
|$T46184| DCD	|$LN5@UCD_Read|
	DCD	0x40000a04
; Function compile flags: /Odtp

  000f0			 AREA	 |.text|, CODE, ARM

  000f0		 |UCD_Read| PROC

; 178  : { 

  000f0		 |$LN5@UCD_Read|
  000f0	e1a0c00d	 mov         r12, sp
  000f4	e92d0007	 stmdb       sp!, {r0 - r2}
  000f8	e92d5000	 stmdb       sp!, {r12, lr}
  000fc	e24dd004	 sub         sp, sp, #4
  00100		 |$M46181|

; 179  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 180  : 	UNREFERENCED_PARAMETER(pBuffer);
; 181  : 	UNREFERENCED_PARAMETER(Count);
; 182  : 
; 183  : 	return 0;

  00100	e3a03000	 mov         r3, #0
  00104	e58d3000	 str         r3, [sp]

; 184  : }

  00108	e59d0000	 ldr         r0, [sp]
  0010c	e28dd004	 add         sp, sp, #4
  00110	e89d6000	 ldmia       sp, {sp, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$M46182|

			 ENDP  ; |UCD_Read|

	EXPORT	|UCD_Write|

  00018			 AREA	 |.pdata|, PDATA
|$T46190| DCD	|$LN5@UCD_Write|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00118			 AREA	 |.text|, CODE, ARM

  00118		 |UCD_Write| PROC

; 190  : { 

  00118		 |$LN5@UCD_Write|
  00118	e1a0c00d	 mov         r12, sp
  0011c	e92d0007	 stmdb       sp!, {r0 - r2}
  00120	e92d5000	 stmdb       sp!, {r12, lr}
  00124	e24dd004	 sub         sp, sp, #4
  00128		 |$M46187|

; 191  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 192  : 	UNREFERENCED_PARAMETER(pBuffer);
; 193  : 	UNREFERENCED_PARAMETER(Count);
; 194  : 
; 195  : 	return 0;

  00128	e3a03000	 mov         r3, #0
  0012c	e58d3000	 str         r3, [sp]

; 196  : }

  00130	e59d0000	 ldr         r0, [sp]
  00134	e28dd004	 add         sp, sp, #4
  00138	e89d6000	 ldmia       sp, {sp, lr}
  0013c	e12fff1e	 bx          lr
  00140		 |$M46188|

			 ENDP  ; |UCD_Write|

	EXPORT	|UCD_Seek|

  00020			 AREA	 |.pdata|, PDATA
|$T46196| DCD	|$LN5@UCD_Seek|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00140			 AREA	 |.text|, CODE, ARM

  00140		 |UCD_Seek| PROC

; 202  : { 

  00140		 |$LN5@UCD_Seek|
  00140	e1a0c00d	 mov         r12, sp
  00144	e92d0007	 stmdb       sp!, {r0 - r2}
  00148	e92d5000	 stmdb       sp!, {r12, lr}
  0014c	e24dd004	 sub         sp, sp, #4
  00150		 |$M46193|

; 203  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 204  : 	UNREFERENCED_PARAMETER(Amount);
; 205  : 	UNREFERENCED_PARAMETER(Type);
; 206  : 
; 207  : 	return 0; 

  00150	e3a03000	 mov         r3, #0
  00154	e58d3000	 str         r3, [sp]

; 208  : }

  00158	e59d0000	 ldr         r0, [sp]
  0015c	e28dd004	 add         sp, sp, #4
  00160	e89d6000	 ldmia       sp, {sp, lr}
  00164	e12fff1e	 bx          lr
  00168		 |$M46194|

			 ENDP  ; |UCD_Seek|

	EXPORT	|UCD_Open|

  00028			 AREA	 |.pdata|, PDATA
|$T46202| DCD	|$LN5@UCD_Open|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00168			 AREA	 |.text|, CODE, ARM

  00168		 |UCD_Open| PROC

; 214  : { 

  00168		 |$LN5@UCD_Open|
  00168	e1a0c00d	 mov         r12, sp
  0016c	e92d0007	 stmdb       sp!, {r0 - r2}
  00170	e92d5000	 stmdb       sp!, {r12, lr}
  00174	e24dd004	 sub         sp, sp, #4
  00178		 |$M46199|

; 215  : 	UNREFERENCED_PARAMETER(AccessCode);
; 216  : 	UNREFERENCED_PARAMETER(ShareMode);
; 217  : 
; 218  : 	return hDeviceContext; 

  00178	e59d300c	 ldr         r3, [sp, #0xC]
  0017c	e58d3000	 str         r3, [sp]

; 219  : }

  00180	e59d0000	 ldr         r0, [sp]
  00184	e28dd004	 add         sp, sp, #4
  00188	e89d6000	 ldmia       sp, {sp, lr}
  0018c	e12fff1e	 bx          lr
  00190		 |$M46200|

			 ENDP  ; |UCD_Open|

	EXPORT	|UCD_IOControl|

  00030			 AREA	 |.pdata|, PDATA
|$T46208| DCD	|$LN6@UCD_IOCont|
	DCD	0x40000f04
; Function compile flags: /Odtp

  00190			 AREA	 |.text|, CODE, ARM

  00190		 |UCD_IOControl| PROC

; 229  : {

  00190		 |$LN6@UCD_IOCont|
  00190	e1a0c00d	 mov         r12, sp
  00194	e92d000f	 stmdb       sp!, {r0 - r3}
  00198	e92d5000	 stmdb       sp!, {r12, lr}
  0019c	e24dd004	 sub         sp, sp, #4
  001a0		 |$M46205|

; 230  : 	UNREFERENCED_PARAMETER(hOpenContext);
; 231  : 	UNREFERENCED_PARAMETER(dwCode);
; 232  : 	UNREFERENCED_PARAMETER(pBufIn);
; 233  : 	UNREFERENCED_PARAMETER(dwLenIn);
; 234  : 	UNREFERENCED_PARAMETER(dwLenOut);
; 235  : 	UNREFERENCED_PARAMETER(pBufOut);
; 236  : 
; 237  :     if (pdwActualOut != NULL)

  001a0	e59d3024	 ldr         r3, [sp, #0x24]
  001a4	e3530000	 cmp         r3, #0
  001a8	0a000001	 beq         |$LN1@UCD_IOCont|

; 238  :         pdwActualOut = 0;

  001ac	e3a03000	 mov         r3, #0
  001b0	e58d3024	 str         r3, [sp, #0x24]
  001b4		 |$LN1@UCD_IOCont|

; 239  : 
; 240  :     return TRUE;

  001b4	e3a03001	 mov         r3, #1
  001b8	e58d3000	 str         r3, [sp]

; 241  : }

  001bc	e59d0000	 ldr         r0, [sp]
  001c0	e28dd004	 add         sp, sp, #4
  001c4	e89d6000	 ldmia       sp, {sp, lr}
  001c8	e12fff1e	 bx          lr
  001cc		 |$M46206|

			 ENDP  ; |UCD_IOControl|

	EXPORT	|??_C@_1EC@OEDDLCNM@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|USBCDMA_DeregisterUsbModule|
	EXPORT	|??_C@_1KM@NNNFEEDP@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LE@EFPEDKKD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@GAJJLCIH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@MPLEJILA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@LCDFCJNL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@GIAMIHPK@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@KJEGINGG@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@BGFLAGEJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@IECGBIPL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JO@BBLCKLIH@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH@| [ DATA ] ; `string'
	EXPORT	|USBCDMA_RegisterUsbModule|
	IMPORT	|HalAllocateCommonBuffer|
	IMPORT	|memcpy|

  00038			 AREA	 |.pdata|, PDATA
|$T46240| DCD	|$LN55@USBCDMA_Re|
	DCD	0x40029f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@OEDDLCNM@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@| DCB "F", 0x0, "A"
	DCB	0x0, "I", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@| DCB "S"
	DCB	0x0, "U", 0x0, "C", 0x0, "C", 0x0, "E", 0x0, "E", 0x0, "D"
	DCB	0x0, "E", 0x0, "D", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@NNNFEEDP@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "k", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "R", 0x0, "A", 0x0, "M", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LE@EFPEDKKD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@GAJJLCIH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "u"
	DCB	0x0, "l", 0x0, "e", 0x0, "s", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "y", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@MPLEJILA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "b"
	DCB	0x0, "a", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@LCDFCJNL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "p", 0x0, "v", 0x0, "H", 0x0, "d"
	DCB	0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@GIAMIHPK@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "p", 0x0, "p", 0x0, "a", 0x0, "H", 0x0, "d"
	DCB	0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@KJEGINGG@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "b", 0x0, "H", 0x0, "d", 0x0, "S"
	DCB	0x0, "i", 0x0, "z", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@BGFLAGEJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "n", 0x0, "H", 0x0, "d", 0x0, "C", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@IECGBIPL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R"
	DCB	0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D"
	DCB	0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "A", 0x0, "M", 0x0, "3", 0x0, "5", 0x0, "1", 0x0, "7"
	DCB	0x0, "\\", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "\\", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "u", 0x0, "s", 0x0, "b"
	DCB	0x0, "c", 0x0, "d", 0x0, "m", 0x0, "a", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JO@BBLCKLIH@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "U", 0x0, "s"
	DCB	0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, "H", 0x0, "D", 0x0, "s", 0x0, ",", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  001cc			 AREA	 |.text|, CODE, ARM

  001cc		 |USBCDMA_RegisterUsbModule| PROC

; 251  : {

  001cc		 |$LN55@USBCDMA_Re|
  001cc	e1a0c00d	 mov         r12, sp
  001d0	e92d000f	 stmdb       sp!, {r0 - r3}
  001d4	e92d5000	 stmdb       sp!, {r12, lr}
  001d8	e24dd0d0	 sub         sp, sp, #0xD0
  001dc		 |$M46237|

; 252  :     HANDLE hUsbModule = NULL;

  001dc	e3a03000	 mov         r3, #0
  001e0	e58d3014	 str         r3, [sp, #0x14]

; 253  :     UsbModule *pUsbModule = NULL;

  001e4	e3a03000	 mov         r3, #0
  001e8	e58d3010	 str         r3, [sp, #0x10]

; 254  :     int i;
; 255  : 
; 256  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 257  :     (L"+USBCDMA_RegisterUsbModule: %u HDs, %u bytes, 0x%08x, 0x%08x, 0x%08x, 0x%08x\r\n",
; 258  :         nHdCount,
; 259  :         cbHdSize,
; 260  :         ppaHdPool,
; 261  :         ppvHdPool,
; 262  :         callback,
; 263  :         param));

  001ec	e59f3a0c	 ldr         r3, [pc, #0xA0C]
  001f0	e5933440	 ldr         r3, [r3, #0x440]
  001f4	e3130020	 tst         r3, #0x20
  001f8	1a000006	 bne         |$LN31@USBCDMA_Re|
  001fc	e59f39fc	 ldr         r3, [pc, #0x9FC]
  00200	e5933440	 ldr         r3, [r3, #0x440]
  00204	e3130008	 tst         r3, #8
  00208	1a000002	 bne         |$LN31@USBCDMA_Re|
  0020c	e3a03000	 mov         r3, #0
  00210	e58d3064	 str         r3, [sp, #0x64]
  00214	ea00000c	 b           |$LN32@USBCDMA_Re|
  00218		 |$LN31@USBCDMA_Re|
  00218	e59d30ec	 ldr         r3, [sp, #0xEC]
  0021c	e58d3008	 str         r3, [sp, #8]
  00220	e59d30e8	 ldr         r3, [sp, #0xE8]
  00224	e58d3004	 str         r3, [sp, #4]
  00228	e59d30e4	 ldr         r3, [sp, #0xE4]
  0022c	e58d3000	 str         r3, [sp]
  00230	e59d30e0	 ldr         r3, [sp, #0xE0]
  00234	e5dd20dc	 ldrb        r2, [sp, #0xDC]
  00238	e1dd1db8	 ldrh        r1, [sp, #0xD8]
  0023c	e59f0a00	 ldr         r0, [pc, #0xA00]
  00240	eb000000	 bl          NKDbgPrintfW
  00244	e3a03001	 mov         r3, #1
  00248	e58d3064	 str         r3, [sp, #0x64]
  0024c		 |$LN32@USBCDMA_Re|

; 264  : 
; 265  :     // Check driver state
; 266  :     if (g_hDc == 0) 

  0024c	e59f39ec	 ldr         r3, [pc, #0x9EC]
  00250	e5933000	 ldr         r3, [r3]
  00254	e3530000	 cmp         r3, #0
  00258	1a000007	 bne         |$LN28@USBCDMA_Re|

; 267  : 	{
; 268  :         ERRORMSG(1,
; 269  :             (L" USBCDMA_RegisterUsbModule: ERROR - Driver not initialised\r\n"));

  0025c	e3a02c01	 mov         r2, #1, 24
  00260	e382200d	 orr         r2, r2, #0xD
  00264	e59f19ac	 ldr         r1, [pc, #0x9AC]
  00268	e59f09a4	 ldr         r0, [pc, #0x9A4]
  0026c	eb000000	 bl          NKDbgPrintfW
  00270	e59f09c4	 ldr         r0, [pc, #0x9C4]
  00274	eb000000	 bl          NKDbgPrintfW

; 270  :         goto done_unlocked;

  00278	ea00023a	 b           |$done_unlocked$45699|
  0027c		 |$LN28@USBCDMA_Re|

; 271  :     }
; 272  : 
; 273  :     Lock();

  0027c	eb000000	 bl          Lock

; 274  : 
; 275  :     // Check input parameters
; 276  : 
; 277  :     if (!IsPow2(nHdCount) || (nHdCount < 32) || (nHdCount > 4096)) 

  00280	e1dd0db8	 ldrh        r0, [sp, #0xD8]
  00284	eb000000	 bl          IsPow2
  00288	e58d0068	 str         r0, [sp, #0x68]
  0028c	e59d3068	 ldr         r3, [sp, #0x68]
  00290	e3530000	 cmp         r3, #0
  00294	0a000005	 beq         |$LN26@USBCDMA_Re|
  00298	e1dd3db8	 ldrh        r3, [sp, #0xD8]
  0029c	e3530020	 cmp         r3, #0x20
  002a0	ba000002	 blt         |$LN26@USBCDMA_Re|
  002a4	e1dd3db8	 ldrh        r3, [sp, #0xD8]
  002a8	e3530a01	 cmp         r3, #1, 20
  002ac	da000008	 ble         |$LN27@USBCDMA_Re|
  002b0		 |$LN26@USBCDMA_Re|

; 278  : 	{
; 279  :         ERRORMSG(1,
; 280  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid nHdCount %u\r\n",
; 281  :             nHdCount));

  002b0	e3a02c01	 mov         r2, #1, 24
  002b4	e3822019	 orr         r2, r2, #0x19
  002b8	e59f1958	 ldr         r1, [pc, #0x958]
  002bc	e59f0950	 ldr         r0, [pc, #0x950]
  002c0	eb000000	 bl          NKDbgPrintfW
  002c4	e1dd1db8	 ldrh        r1, [sp, #0xD8]
  002c8	e59f0968	 ldr         r0, [pc, #0x968]
  002cc	eb000000	 bl          NKDbgPrintfW

; 282  :         goto done;

  002d0	ea000223	 b           |$done$45703|
  002d4		 |$LN27@USBCDMA_Re|

; 283  :     }
; 284  : 
; 285  :     if (!IsPow2(cbHdSize) || (cbHdSize < 32)) 

  002d4	e5dd00dc	 ldrb        r0, [sp, #0xDC]
  002d8	eb000000	 bl          IsPow2
  002dc	e58d006c	 str         r0, [sp, #0x6C]
  002e0	e59d306c	 ldr         r3, [sp, #0x6C]
  002e4	e3530000	 cmp         r3, #0
  002e8	0a000002	 beq         |$LN24@USBCDMA_Re|
  002ec	e5dd30dc	 ldrb        r3, [sp, #0xDC]
  002f0	e3530020	 cmp         r3, #0x20
  002f4	aa000008	 bge         |$LN25@USBCDMA_Re|
  002f8		 |$LN24@USBCDMA_Re|

; 286  : 	{
; 287  :         ERRORMSG(1,
; 288  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid cbHdSize %u\r\n",
; 289  :             cbHdSize));

  002f8	e3a02c01	 mov         r2, #1, 24
  002fc	e3822021	 orr         r2, r2, #0x21
  00300	e59f1910	 ldr         r1, [pc, #0x910]
  00304	e59f0908	 ldr         r0, [pc, #0x908]
  00308	eb000000	 bl          NKDbgPrintfW
  0030c	e5dd10dc	 ldrb        r1, [sp, #0xDC]
  00310	e59f091c	 ldr         r0, [pc, #0x91C]
  00314	eb000000	 bl          NKDbgPrintfW

; 290  :         goto done;

  00318	ea000211	 b           |$done$45703|
  0031c		 |$LN25@USBCDMA_Re|

; 291  :     }
; 292  : 
; 293  :     if (ppaHdPool == NULL) 

  0031c	e59d30e0	 ldr         r3, [sp, #0xE0]
  00320	e3530000	 cmp         r3, #0
  00324	1a000008	 bne         |$LN23@USBCDMA_Re|

; 294  : 	{
; 295  :         ERRORMSG(1,
; 296  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid ppaHdPool 0x%08x\r\n",
; 297  :             ppaHdPool));

  00328	e3a02c01	 mov         r2, #1, 24
  0032c	e3822029	 orr         r2, r2, #0x29
  00330	e59f18e0	 ldr         r1, [pc, #0x8E0]
  00334	e59f08d8	 ldr         r0, [pc, #0x8D8]
  00338	eb000000	 bl          NKDbgPrintfW
  0033c	e59d10e0	 ldr         r1, [sp, #0xE0]
  00340	e59f08e8	 ldr         r0, [pc, #0x8E8]
  00344	eb000000	 bl          NKDbgPrintfW

; 298  :         goto done;

  00348	ea000205	 b           |$done$45703|
  0034c		 |$LN23@USBCDMA_Re|

; 299  :     }
; 300  : 
; 301  :     if (ppvHdPool == NULL) 

  0034c	e59d30e4	 ldr         r3, [sp, #0xE4]
  00350	e3530000	 cmp         r3, #0
  00354	1a000008	 bne         |$LN22@USBCDMA_Re|

; 302  : 	{
; 303  :         ERRORMSG(1,
; 304  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid ppvHdPool 0x%08x\r\n",
; 305  :             ppvHdPool));

  00358	e3a02c01	 mov         r2, #1, 24
  0035c	e3822031	 orr         r2, r2, #0x31
  00360	e59f18b0	 ldr         r1, [pc, #0x8B0]
  00364	e59f08a8	 ldr         r0, [pc, #0x8A8]
  00368	eb000000	 bl          NKDbgPrintfW
  0036c	e59d10e4	 ldr         r1, [sp, #0xE4]
  00370	e59f08b4	 ldr         r0, [pc, #0x8B4]
  00374	eb000000	 bl          NKDbgPrintfW

; 306  :         goto done;

  00378	ea0001f9	 b           |$done$45703|
  0037c		 |$LN22@USBCDMA_Re|

; 307  :     }
; 308  : 
; 309  :     if (callback == NULL) 

  0037c	e59d30e8	 ldr         r3, [sp, #0xE8]
  00380	e3530000	 cmp         r3, #0
  00384	1a000008	 bne         |$LN21@USBCDMA_Re|

; 310  : 	{
; 311  :         ERRORMSG(1,
; 312  :             (L" USBCDMA_RegisterUsbModule: ERROR - Invalid callback 0x%08x\r\n",
; 313  :             callback));

  00388	e3a02c01	 mov         r2, #1, 24
  0038c	e3822039	 orr         r2, r2, #0x39
  00390	e59f1880	 ldr         r1, [pc, #0x880]
  00394	e59f0878	 ldr         r0, [pc, #0x878]
  00398	eb000000	 bl          NKDbgPrintfW
  0039c	e59d10e8	 ldr         r1, [sp, #0xE8]
  003a0	e59f0880	 ldr         r0, [pc, #0x880]
  003a4	eb000000	 bl          NKDbgPrintfW

; 314  :         goto done;

  003a8	ea0001ed	 b           |$done$45703|
  003ac		 |$LN21@USBCDMA_Re|

; 315  :     }
; 316  : 
; 317  :     // Initialise [OUT] parameters
; 318  :     (*ppaHdPool).QuadPart = 0;

  003ac	e59d20e0	 ldr         r2, [sp, #0xE0]
  003b0	e3a03000	 mov         r3, #0
  003b4	e5823000	 str         r3, [r2]
  003b8	e59d20e0	 ldr         r2, [sp, #0xE0]
  003bc	e3a03000	 mov         r3, #0
  003c0	e5823004	 str         r3, [r2, #4]

; 319  :     (*ppvHdPool) = NULL;

  003c4	e59d20e4	 ldr         r2, [sp, #0xE4]
  003c8	e3a03000	 mov         r3, #0
  003cc	e5823000	 str         r3, [r2]

; 320  : 
; 321  :     // Check driver state
; 322  :     if (g_Dc.nNextUsbModule >= 2) 

  003d0	e59f3834	 ldr         r3, [pc, #0x834]
  003d4	e5933048	 ldr         r3, [r3, #0x48]
  003d8	e3530002	 cmp         r3, #2
  003dc	3a000009	 bcc         |$LN20@USBCDMA_Re|

; 323  : 	{
; 324  :         ERRORMSG(1,
; 325  :             (L" USBCDMA_RegisterUsbModule: ERROR - %u modules already registered\r\n",
; 326  :             g_Dc.nNextUsbModule));

  003e0	e3a02c01	 mov         r2, #1, 24
  003e4	e3822046	 orr         r2, r2, #0x46
  003e8	e59f1828	 ldr         r1, [pc, #0x828]
  003ec	e59f0820	 ldr         r0, [pc, #0x820]
  003f0	eb000000	 bl          NKDbgPrintfW
  003f4	e59f3810	 ldr         r3, [pc, #0x810]
  003f8	e5931048	 ldr         r1, [r3, #0x48]
  003fc	e59f0820	 ldr         r0, [pc, #0x820]
  00400	eb000000	 bl          NKDbgPrintfW

; 327  :         goto done;

  00404	ea0001d6	 b           |$done$45703|
  00408		 |$LN20@USBCDMA_Re|

; 328  :     }
; 329  : 
; 330  :     pUsbModule = &g_Dc.usb[g_Dc.nNextUsbModule];

  00408	e59f37fc	 ldr         r3, [pc, #0x7FC]
  0040c	e5931048	 ldr         r1, [r3, #0x48]
  00410	e3a03030	 mov         r3, #0x30
  00414	e0020391	 mul         r2, r1, r3
  00418	e59f37ec	 ldr         r3, [pc, #0x7EC]
  0041c	e2833050	 add         r3, r3, #0x50
  00420	e0833002	 add         r3, r3, r2
  00424	e58d3010	 str         r3, [sp, #0x10]

; 331  : 
; 332  :     // Check the USB module state is uninitialised
; 333  :     DEBUGCHK(pUsbModule->nHdCount == 0);

  00428	e59d3010	 ldr         r3, [sp, #0x10]
  0042c	e1d330b0	 ldrh        r3, [r3]
  00430	e3530000	 cmp         r3, #0
  00434	1a000002	 bne         |$LN33@USBCDMA_Re|
  00438	e3a03001	 mov         r3, #1
  0043c	e58d3070	 str         r3, [sp, #0x70]
  00440	ea000008	 b           |$LN34@USBCDMA_Re|
  00444		 |$LN33@USBCDMA_Re|
  00444	e3a03c01	 mov         r3, #1, 24
  00448	e383304d	 orr         r3, r3, #0x4D
  0044c	e59f27c4	 ldr         r2, [pc, #0x7C4]
  00450	e59f17a8	 ldr         r1, [pc, #0x7A8]
  00454	e59f07c4	 ldr         r0, [pc, #0x7C4]
  00458	eb000000	 bl          NKDbgPrintfW
  0045c	e6000010	 __debugbreak_ce
  00460	e3a03000	 mov         r3, #0
  00464	e58d3070	 str         r3, [sp, #0x70]
  00468		 |$LN34@USBCDMA_Re|

; 334  :     DEBUGCHK(pUsbModule->cbHdSize == 0);

  00468	e59d3010	 ldr         r3, [sp, #0x10]
  0046c	e2833002	 add         r3, r3, #2
  00470	e5d33000	 ldrb        r3, [r3]
  00474	e3530000	 cmp         r3, #0
  00478	1a000002	 bne         |$LN35@USBCDMA_Re|
  0047c	e3a03001	 mov         r3, #1
  00480	e58d3074	 str         r3, [sp, #0x74]
  00484	ea000008	 b           |$LN36@USBCDMA_Re|
  00488		 |$LN35@USBCDMA_Re|
  00488	e3a03c01	 mov         r3, #1, 24
  0048c	e383304e	 orr         r3, r3, #0x4E
  00490	e59f2780	 ldr         r2, [pc, #0x780]
  00494	e59f1764	 ldr         r1, [pc, #0x764]
  00498	e59f0780	 ldr         r0, [pc, #0x780]
  0049c	eb000000	 bl          NKDbgPrintfW
  004a0	e6000010	 __debugbreak_ce
  004a4	e3a03000	 mov         r3, #0
  004a8	e58d3074	 str         r3, [sp, #0x74]
  004ac		 |$LN36@USBCDMA_Re|

; 335  :     DEBUGCHK(pUsbModule->pvPool == NULL);

  004ac	e59d3010	 ldr         r3, [sp, #0x10]
  004b0	e2833004	 add         r3, r3, #4
  004b4	e5933000	 ldr         r3, [r3]
  004b8	e3530000	 cmp         r3, #0
  004bc	1a000002	 bne         |$LN37@USBCDMA_Re|
  004c0	e3a03001	 mov         r3, #1
  004c4	e58d3078	 str         r3, [sp, #0x78]
  004c8	ea000008	 b           |$LN38@USBCDMA_Re|
  004cc		 |$LN37@USBCDMA_Re|
  004cc	e3a03c01	 mov         r3, #1, 24
  004d0	e383304f	 orr         r3, r3, #0x4F
  004d4	e59f273c	 ldr         r2, [pc, #0x73C]
  004d8	e59f1720	 ldr         r1, [pc, #0x720]
  004dc	e59f073c	 ldr         r0, [pc, #0x73C]
  004e0	eb000000	 bl          NKDbgPrintfW
  004e4	e6000010	 __debugbreak_ce
  004e8	e3a03000	 mov         r3, #0
  004ec	e58d3078	 str         r3, [sp, #0x78]
  004f0		 |$LN38@USBCDMA_Re|

; 336  :     DEBUGCHK(pUsbModule->paPool.QuadPart == 0);

  004f0	e59d3010	 ldr         r3, [sp, #0x10]
  004f4	e2833008	 add         r3, r3, #8
  004f8	e58d307c	 str         r3, [sp, #0x7C]
  004fc	e59d307c	 ldr         r3, [sp, #0x7C]
  00500	e5933000	 ldr         r3, [r3]
  00504	e58d3080	 str         r3, [sp, #0x80]
  00508	e59d307c	 ldr         r3, [sp, #0x7C]
  0050c	e5933004	 ldr         r3, [r3, #4]
  00510	e58d3084	 str         r3, [sp, #0x84]
  00514	e59d2084	 ldr         r2, [sp, #0x84]
  00518	e59d3080	 ldr         r3, [sp, #0x80]
  0051c	e1933002	 orrs        r3, r3, r2
  00520	1a000002	 bne         |$LN39@USBCDMA_Re|
  00524	e3a03001	 mov         r3, #1
  00528	e58d3088	 str         r3, [sp, #0x88]
  0052c	ea000007	 b           |$LN40@USBCDMA_Re|
  00530		 |$LN39@USBCDMA_Re|
  00530	e3a03e15	 mov         r3, #0x15, 28
  00534	e59f26dc	 ldr         r2, [pc, #0x6DC]
  00538	e59f16c0	 ldr         r1, [pc, #0x6C0]
  0053c	e59f06dc	 ldr         r0, [pc, #0x6DC]
  00540	eb000000	 bl          NKDbgPrintfW
  00544	e6000010	 __debugbreak_ce
  00548	e3a03000	 mov         r3, #0
  0054c	e58d3088	 str         r3, [sp, #0x88]
  00550		 |$LN40@USBCDMA_Re|

; 337  :     DEBUGCHK(pUsbModule->cbPoolSize == 0);

  00550	e59d3010	 ldr         r3, [sp, #0x10]
  00554	e2833010	 add         r3, r3, #0x10
  00558	e5933000	 ldr         r3, [r3]
  0055c	e3530000	 cmp         r3, #0
  00560	1a000002	 bne         |$LN41@USBCDMA_Re|
  00564	e3a03001	 mov         r3, #1
  00568	e58d308c	 str         r3, [sp, #0x8C]
  0056c	ea000008	 b           |$LN42@USBCDMA_Re|
  00570		 |$LN41@USBCDMA_Re|
  00570	e3a03c01	 mov         r3, #1, 24
  00574	e3833051	 orr         r3, r3, #0x51
  00578	e59f2698	 ldr         r2, [pc, #0x698]
  0057c	e59f167c	 ldr         r1, [pc, #0x67C]
  00580	e59f0698	 ldr         r0, [pc, #0x698]
  00584	eb000000	 bl          NKDbgPrintfW
  00588	e6000010	 __debugbreak_ce
  0058c	e3a03000	 mov         r3, #0
  00590	e58d308c	 str         r3, [sp, #0x8C]
  00594		 |$LN42@USBCDMA_Re|

; 338  :     DEBUGCHK(pUsbModule->pvLinkingRam == NULL);

  00594	e59d3010	 ldr         r3, [sp, #0x10]
  00598	e2833014	 add         r3, r3, #0x14
  0059c	e5933000	 ldr         r3, [r3]
  005a0	e3530000	 cmp         r3, #0
  005a4	1a000002	 bne         |$LN43@USBCDMA_Re|
  005a8	e3a03001	 mov         r3, #1
  005ac	e58d3090	 str         r3, [sp, #0x90]
  005b0	ea000008	 b           |$LN44@USBCDMA_Re|
  005b4		 |$LN43@USBCDMA_Re|
  005b4	e3a03c01	 mov         r3, #1, 24
  005b8	e3833052	 orr         r3, r3, #0x52
  005bc	e59f2654	 ldr         r2, [pc, #0x654]
  005c0	e59f1638	 ldr         r1, [pc, #0x638]
  005c4	e59f0654	 ldr         r0, [pc, #0x654]
  005c8	eb000000	 bl          NKDbgPrintfW
  005cc	e6000010	 __debugbreak_ce
  005d0	e3a03000	 mov         r3, #0
  005d4	e58d3090	 str         r3, [sp, #0x90]
  005d8		 |$LN44@USBCDMA_Re|

; 339  :     DEBUGCHK(pUsbModule->paLinkingRam.QuadPart == 0);

  005d8	e59d3010	 ldr         r3, [sp, #0x10]
  005dc	e2833018	 add         r3, r3, #0x18
  005e0	e58d3094	 str         r3, [sp, #0x94]
  005e4	e59d3094	 ldr         r3, [sp, #0x94]
  005e8	e5933000	 ldr         r3, [r3]
  005ec	e58d3098	 str         r3, [sp, #0x98]
  005f0	e59d3094	 ldr         r3, [sp, #0x94]
  005f4	e5933004	 ldr         r3, [r3, #4]
  005f8	e58d309c	 str         r3, [sp, #0x9C]
  005fc	e59d209c	 ldr         r2, [sp, #0x9C]
  00600	e59d3098	 ldr         r3, [sp, #0x98]
  00604	e1933002	 orrs        r3, r3, r2
  00608	1a000002	 bne         |$LN45@USBCDMA_Re|
  0060c	e3a03001	 mov         r3, #1
  00610	e58d30a0	 str         r3, [sp, #0xA0]
  00614	ea000008	 b           |$LN46@USBCDMA_Re|
  00618		 |$LN45@USBCDMA_Re|
  00618	e3a03c01	 mov         r3, #1, 24
  0061c	e3833053	 orr         r3, r3, #0x53
  00620	e59f25f0	 ldr         r2, [pc, #0x5F0]
  00624	e59f15d4	 ldr         r1, [pc, #0x5D4]
  00628	e59f05f0	 ldr         r0, [pc, #0x5F0]
  0062c	eb000000	 bl          NKDbgPrintfW
  00630	e6000010	 __debugbreak_ce
  00634	e3a03000	 mov         r3, #0
  00638	e58d30a0	 str         r3, [sp, #0xA0]
  0063c		 |$LN46@USBCDMA_Re|

; 340  :     DEBUGCHK(pUsbModule->cbLinkingRamSize == 0);

  0063c	e59d3010	 ldr         r3, [sp, #0x10]
  00640	e2833020	 add         r3, r3, #0x20
  00644	e5933000	 ldr         r3, [r3]
  00648	e3530000	 cmp         r3, #0
  0064c	1a000002	 bne         |$LN47@USBCDMA_Re|
  00650	e3a03001	 mov         r3, #1
  00654	e58d30a4	 str         r3, [sp, #0xA4]
  00658	ea000007	 b           |$LN48@USBCDMA_Re|
  0065c		 |$LN47@USBCDMA_Re|
  0065c	e3a03f55	 mov         r3, #0x55, 30
  00660	e59f25b0	 ldr         r2, [pc, #0x5B0]
  00664	e59f1594	 ldr         r1, [pc, #0x594]
  00668	e59f05b0	 ldr         r0, [pc, #0x5B0]
  0066c	eb000000	 bl          NKDbgPrintfW
  00670	e6000010	 __debugbreak_ce
  00674	e3a03000	 mov         r3, #0
  00678	e58d30a4	 str         r3, [sp, #0xA4]
  0067c		 |$LN48@USBCDMA_Re|

; 341  :     //DEBUGCHK(pUsbModule->callback == NULL);
; 342  :     //DEBUGCHK(pUsbModule->param == NULL);
; 343  : 
; 344  :     // Allocate the USB module's host descriptor pool
; 345  :     {
; 346  : 		DMA_ADAPTER_OBJECT Adapter;
; 347  : 		VOID *pvPool;
; 348  : 		PHYSICAL_ADDRESS paPool;
; 349  : 		ULONG cbPoolSize = nHdCount * cbHdSize;

  0067c	e1dd3db8	 ldrh        r3, [sp, #0xD8]
  00680	e1a02003	 mov         r2, r3
  00684	e5dd30dc	 ldrb        r3, [sp, #0xDC]
  00688	e0030392	 mul         r3, r2, r3
  0068c	e58d3024	 str         r3, [sp, #0x24]

; 350  : 
; 351  : 		// The first module to register allocates additional space at the end of its host descriptor
; 352  : 		// pool for the shared teardown descriptor pool
; 353  : 		if (g_Dc.nNextUsbModule == 0)

  00690	e59f3574	 ldr         r3, [pc, #0x574]
  00694	e5933048	 ldr         r3, [r3, #0x48]
  00698	e3530000	 cmp         r3, #0
  0069c	1a000004	 bne         |$LN19@USBCDMA_Re|

; 354  : 		{
; 355  : 			cbPoolSize += g_Dc.cbTdPoolSize;

  006a0	e59d2024	 ldr         r2, [sp, #0x24]
  006a4	e59f3560	 ldr         r3, [pc, #0x560]
  006a8	e5933040	 ldr         r3, [r3, #0x40]
  006ac	e0823003	 add         r3, r2, r3
  006b0	e58d3024	 str         r3, [sp, #0x24]
  006b4		 |$LN19@USBCDMA_Re|

; 356  : 		}
; 357  : 
; 358  : 		Adapter.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);

  006b4	e3a0300c	 mov         r3, #0xC
  006b8	e1cd32b8	 strh        r3, [sp, #0x28]

; 359  : 		Adapter.InterfaceType = Internal;

  006bc	e3a03000	 mov         r3, #0
  006c0	e58d302c	 str         r3, [sp, #0x2C]

; 360  : 		Adapter.BusNumber = 0;

  006c4	e3a03000	 mov         r3, #0
  006c8	e58d3030	 str         r3, [sp, #0x30]

; 361  : 
; 362  : 		pvPool = HalAllocateCommonBuffer(
; 363  : 			&Adapter,
; 364  : 			cbPoolSize,
; 365  : 			&paPool,
; 366  : 			FALSE);

  006cc	e3a03000	 mov         r3, #0
  006d0	e28d201c	 add         r2, sp, #0x1C
  006d4	e59d1024	 ldr         r1, [sp, #0x24]
  006d8	e28d0028	 add         r0, sp, #0x28
  006dc	eb000000	 bl          HalAllocateCommonBuffer
  006e0	e58d00a8	 str         r0, [sp, #0xA8]
  006e4	e59d30a8	 ldr         r3, [sp, #0xA8]
  006e8	e58d3018	 str         r3, [sp, #0x18]

; 367  : 
; 368  : 		if (pvPool == NULL) 

  006ec	e59d3018	 ldr         r3, [sp, #0x18]
  006f0	e3530000	 cmp         r3, #0
  006f4	1a000007	 bne         |$LN18@USBCDMA_Re|

; 369  : 		{
; 370  : 			ERRORMSG(1,
; 371  : 				(L" USBCDMA_RegisterUsbModule: ERROR - Failed to allocate %u bytes for the descriptor pool\r\n", 
; 372  : 				cbPoolSize));

  006f8	e3a02f5d	 mov         r2, #0x5D, 30
  006fc	e59f1514	 ldr         r1, [pc, #0x514]
  00700	e59f050c	 ldr         r0, [pc, #0x50C]
  00704	eb000000	 bl          NKDbgPrintfW
  00708	e59d1024	 ldr         r1, [sp, #0x24]
  0070c	e59f0508	 ldr         r0, [pc, #0x508]
  00710	eb000000	 bl          NKDbgPrintfW

; 373  : 			goto done;

  00714	ea000112	 b           |$done$45703|
  00718		 |$LN18@USBCDMA_Re|

; 374  : 		}
; 375  : 
; 376  : 		// Set the USB module's pool parameters
; 377  : 		pUsbModule->nHdCount   = nHdCount;

  00718	e1dd2db8	 ldrh        r2, [sp, #0xD8]
  0071c	e59d3010	 ldr         r3, [sp, #0x10]
  00720	e1c320b0	 strh        r2, [r3]

; 378  : 		pUsbModule->cbHdSize   = cbHdSize;

  00724	e59d3010	 ldr         r3, [sp, #0x10]
  00728	e2832002	 add         r2, r3, #2
  0072c	e5dd30dc	 ldrb        r3, [sp, #0xDC]
  00730	e5c23000	 strb        r3, [r2]

; 379  : 		pUsbModule->pvPool     = pvPool;

  00734	e59d3010	 ldr         r3, [sp, #0x10]
  00738	e2832004	 add         r2, r3, #4
  0073c	e59d3018	 ldr         r3, [sp, #0x18]
  00740	e5823000	 str         r3, [r2]

; 380  : 		pUsbModule->paPool     = paPool;

  00744	e59d3010	 ldr         r3, [sp, #0x10]
  00748	e2830008	 add         r0, r3, #8
  0074c	e28d101c	 add         r1, sp, #0x1C
  00750	e3a02008	 mov         r2, #8
  00754	eb000000	 bl          memcpy

; 381  : 		pUsbModule->cbPoolSize = cbPoolSize;

  00758	e59d3010	 ldr         r3, [sp, #0x10]
  0075c	e2832010	 add         r2, r3, #0x10
  00760	e59d3024	 ldr         r3, [sp, #0x24]
  00764	e5823000	 str         r3, [r2]

; 382  :     }
; 383  : 
; 384  :     // Save information about the shared teardown descriptor memory area
; 385  :     if (g_Dc.nNextUsbModule == 0) {

  00768	e59f349c	 ldr         r3, [pc, #0x49C]
  0076c	e5933048	 ldr         r3, [r3, #0x48]
  00770	e3530000	 cmp         r3, #0
  00774	1a000013	 bne         |$LN17@USBCDMA_Re|

; 386  :         g_Dc.pvTdPool = (VOID *)((UINT)pUsbModule->pvPool + (nHdCount * cbHdSize));

  00778	e59d3010	 ldr         r3, [sp, #0x10]
  0077c	e2830004	 add         r0, r3, #4
  00780	e1dd3db8	 ldrh        r3, [sp, #0xD8]
  00784	e1a01003	 mov         r1, r3
  00788	e5dd30dc	 ldrb        r3, [sp, #0xDC]
  0078c	e0020391	 mul         r2, r1, r3
  00790	e5903000	 ldr         r3, [r0]
  00794	e0832002	 add         r2, r3, r2
  00798	e59f346c	 ldr         r3, [pc, #0x46C]
  0079c	e5832030	 str         r2, [r3, #0x30]

; 387  :         g_Dc.paTdPool.LowPart = pUsbModule->paPool.LowPart + (nHdCount * cbHdSize);

  007a0	e59d3010	 ldr         r3, [sp, #0x10]
  007a4	e2830008	 add         r0, r3, #8
  007a8	e1dd3db8	 ldrh        r3, [sp, #0xD8]
  007ac	e1a01003	 mov         r1, r3
  007b0	e5dd30dc	 ldrb        r3, [sp, #0xDC]
  007b4	e0020391	 mul         r2, r1, r3
  007b8	e5903000	 ldr         r3, [r0]
  007bc	e0832002	 add         r2, r3, r2
  007c0	e59f3444	 ldr         r3, [pc, #0x444]
  007c4	e5832038	 str         r2, [r3, #0x38]
  007c8		 |$LN17@USBCDMA_Re|

; 388  :     }
; 389  : 
; 390  :     // Initialise the shared teardown descriptor pool when the first module registers
; 391  :     if (g_Dc.nNextUsbModule == 0)

  007c8	e59f343c	 ldr         r3, [pc, #0x43C]
  007cc	e5933048	 ldr         r3, [r3, #0x48]
  007d0	e3530000	 cmp         r3, #0
  007d4	1a000005	 bne         |$LN16@USBCDMA_Re|

; 392  : 	{
; 393  :         if (!TdPoolInit())

  007d8	eb000000	 bl          TdPoolInit
  007dc	e58d00ac	 str         r0, [sp, #0xAC]
  007e0	e59d30ac	 ldr         r3, [sp, #0xAC]
  007e4	e3530000	 cmp         r3, #0
  007e8	1a000000	 bne         |$LN15@USBCDMA_Re|

; 394  : 		{
; 395  :             goto done;

  007ec	ea0000dc	 b           |$done$45703|
  007f0		 |$LN15@USBCDMA_Re|
  007f0		 |$LN16@USBCDMA_Re|

; 396  : 		}
; 397  : 	}
; 398  :     // Allocate the USB module's linking RAM
; 399  :     {
; 400  :     DMA_ADAPTER_OBJECT Adapter;
; 401  :     VOID *pvLinkingRam;
; 402  :     PHYSICAL_ADDRESS paLinkingRam;
; 403  :     ULONG cbLinkingRamSize = nHdCount * sizeof(UINT32);

  007f0	e1dd2db8	 ldrh        r2, [sp, #0xD8]
  007f4	e3a03004	 mov         r3, #4
  007f8	e0030392	 mul         r3, r2, r3
  007fc	e58d3034	 str         r3, [sp, #0x34]

; 404  : 
; 405  :     // The first module to register allocates additional linking RAM for the teardown descriptors
; 406  :     if (g_Dc.nNextUsbModule == 0)

  00800	e59f3404	 ldr         r3, [pc, #0x404]
  00804	e5933048	 ldr         r3, [r3, #0x48]
  00808	e3530000	 cmp         r3, #0
  0080c	1a000002	 bne         |$LN14@USBCDMA_Re|

; 407  : 	{
; 408  :         cbLinkingRamSize += (USB_CPPI_TD_COUNT * sizeof(UINT32));

  00810	e59d3034	 ldr         r3, [sp, #0x34]
  00814	e2833080	 add         r3, r3, #0x80
  00818	e58d3034	 str         r3, [sp, #0x34]
  0081c		 |$LN14@USBCDMA_Re|

; 409  : 	}
; 410  : 
; 411  :     Adapter.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);

  0081c	e3a0300c	 mov         r3, #0xC
  00820	e1cd34b4	 strh        r3, [sp, #0x44]

; 412  :     Adapter.InterfaceType = Internal;

  00824	e3a03000	 mov         r3, #0
  00828	e58d3048	 str         r3, [sp, #0x48]

; 413  :     Adapter.BusNumber = 0;

  0082c	e3a03000	 mov         r3, #0
  00830	e58d304c	 str         r3, [sp, #0x4C]

; 414  : 
; 415  :     pvLinkingRam = HalAllocateCommonBuffer(
; 416  :         &Adapter,
; 417  :         cbLinkingRamSize,
; 418  :         &paLinkingRam,
; 419  :         FALSE);

  00834	e3a03000	 mov         r3, #0
  00838	e28d203c	 add         r2, sp, #0x3C
  0083c	e59d1034	 ldr         r1, [sp, #0x34]
  00840	e28d0044	 add         r0, sp, #0x44
  00844	eb000000	 bl          HalAllocateCommonBuffer
  00848	e58d00b0	 str         r0, [sp, #0xB0]
  0084c	e59d30b0	 ldr         r3, [sp, #0xB0]
  00850	e58d3038	 str         r3, [sp, #0x38]

; 420  : 
; 421  :     if (pvLinkingRam == NULL) 

  00854	e59d3038	 ldr         r3, [sp, #0x38]
  00858	e3530000	 cmp         r3, #0
  0085c	1a000008	 bne         |$LN13@USBCDMA_Re|

; 422  : 	{
; 423  :         ERRORMSG(1,
; 424  :             (L" USBCDMA_RegisterUsbModule: ERROR - Failed to allocate %u bytes for the linking RAM\r\n", 
; 425  :             cbLinkingRamSize));

  00860	e3a02c01	 mov         r2, #1, 24
  00864	e38220a9	 orr         r2, r2, #0xA9
  00868	e59f13a8	 ldr         r1, [pc, #0x3A8]
  0086c	e59f03a0	 ldr         r0, [pc, #0x3A0]
  00870	eb000000	 bl          NKDbgPrintfW
  00874	e59d1034	 ldr         r1, [sp, #0x34]
  00878	e59f0390	 ldr         r0, [pc, #0x390]
  0087c	eb000000	 bl          NKDbgPrintfW

; 426  :         goto done;

  00880	ea0000b7	 b           |$done$45703|
  00884		 |$LN13@USBCDMA_Re|

; 427  :     }
; 428  : 
; 429  :     // Set the USB module's linking RAM parameters
; 430  :     pUsbModule->pvLinkingRam     = pvLinkingRam;

  00884	e59d3010	 ldr         r3, [sp, #0x10]
  00888	e2832014	 add         r2, r3, #0x14
  0088c	e59d3038	 ldr         r3, [sp, #0x38]
  00890	e5823000	 str         r3, [r2]

; 431  :     pUsbModule->paLinkingRam     = paLinkingRam;

  00894	e59d3010	 ldr         r3, [sp, #0x10]
  00898	e2830018	 add         r0, r3, #0x18
  0089c	e28d103c	 add         r1, sp, #0x3C
  008a0	e3a02008	 mov         r2, #8
  008a4	eb000000	 bl          memcpy

; 432  :     pUsbModule->cbLinkingRamSize = cbLinkingRamSize;

  008a8	e59d3010	 ldr         r3, [sp, #0x10]
  008ac	e2832020	 add         r2, r3, #0x20
  008b0	e59d3034	 ldr         r3, [sp, #0x34]
  008b4	e5823000	 str         r3, [r2]

; 433  :     }
; 434  : 
; 435  :     // Set the USB module's callback parameters
; 436  :     pUsbModule->callback = callback;

  008b8	e59d3010	 ldr         r3, [sp, #0x10]
  008bc	e2832024	 add         r2, r3, #0x24
  008c0	e59d30e8	 ldr         r3, [sp, #0xE8]
  008c4	e5823000	 str         r3, [r2]

; 437  :     pUsbModule->param    = param;

  008c8	e59d3010	 ldr         r3, [sp, #0x10]
  008cc	e2832028	 add         r2, r3, #0x28
  008d0	e59d30ec	 ldr         r3, [sp, #0xEC]
  008d4	e5823000	 str         r3, [r2]

; 438  : 
; 439  :     // Setup the USB CPPI linking RAM registers
; 440  :     if (g_Dc.nNextUsbModule == 0) {

  008d8	e59f332c	 ldr         r3, [pc, #0x32C]
  008dc	e5933048	 ldr         r3, [r3, #0x48]
  008e0	e3530000	 cmp         r3, #0
  008e4	1a00000f	 bne         |$LN12@USBCDMA_Re|

; 441  :         g_Dc.pCppiRegs->LRAM0BASE = pUsbModule->paLinkingRam.LowPart;

  008e8	e59d3010	 ldr         r3, [sp, #0x10]
  008ec	e2831018	 add         r1, r3, #0x18
  008f0	e59f3314	 ldr         r3, [pc, #0x314]
  008f4	e593302c	 ldr         r3, [r3, #0x2C]
  008f8	e2832dc2	 add         r2, r3, #0xC2, 26
  008fc	e5913000	 ldr         r3, [r1]
  00900	e5823000	 str         r3, [r2]

; 442  :         g_Dc.pCppiRegs->LRAM0SIZE = pUsbModule->cbLinkingRamSize;

  00904	e59d3010	 ldr         r3, [sp, #0x10]
  00908	e2831020	 add         r1, r3, #0x20
  0090c	e59f32f8	 ldr         r3, [pc, #0x2F8]
  00910	e593302c	 ldr         r3, [r3, #0x2C]
  00914	e2833a03	 add         r3, r3, #3, 20
  00918	e2832084	 add         r2, r3, #0x84
  0091c	e5913000	 ldr         r3, [r1]
  00920	e5823000	 str         r3, [r2]

; 443  :     }
; 444  :     else {

  00924	ea000007	 b           |$LN11@USBCDMA_Re|
  00928		 |$LN12@USBCDMA_Re|

; 445  :         g_Dc.pCppiRegs->LRAM1BASE = pUsbModule->paLinkingRam.LowPart;

  00928	e59d3010	 ldr         r3, [sp, #0x10]
  0092c	e2831018	 add         r1, r3, #0x18
  00930	e59f32d4	 ldr         r3, [pc, #0x2D4]
  00934	e593302c	 ldr         r3, [r3, #0x2C]
  00938	e2833a03	 add         r3, r3, #3, 20
  0093c	e2832088	 add         r2, r3, #0x88
  00940	e5913000	 ldr         r3, [r1]
  00944	e5823000	 str         r3, [r2]
  00948		 |$LN11@USBCDMA_Re|

; 446  :     }
; 447  : 
; 448  :     // Setup the USB CPPI memory region registers
; 449  :     if (g_Dc.nNextUsbModule == 0) {

  00948	e59f32bc	 ldr         r3, [pc, #0x2BC]
  0094c	e5933048	 ldr         r3, [r3, #0x48]
  00950	e3530000	 cmp         r3, #0
  00954	1a000026	 bne         |$LN10@USBCDMA_Re|

; 450  :         g_Dc.pCppiRegs->QMMEMREGION[0].QMEMRBASE = pUsbModule->paPool.LowPart;

  00958	e59d3010	 ldr         r3, [sp, #0x10]
  0095c	e2831008	 add         r1, r3, #8
  00960	e59f32a4	 ldr         r3, [pc, #0x2A4]
  00964	e593302c	 ldr         r3, [r3, #0x2C]
  00968	e2832901	 add         r2, r3, #1, 18
  0096c	e5913000	 ldr         r3, [r1]
  00970	e5823000	 str         r3, [r2]

; 451  :         g_Dc.pCppiRegs->QMMEMREGION[0].QMEMRCTRL =
; 452  :             ((0                         ) << 16) | /* Start index */
; 453  :             ((Log2(cbHdSize)         - 5) <<  8) | /* Desc. size  */
; 454  :             ((Log2(nHdCount   )      - 5) <<  0);  /* Desc. count */

  00974	e5dd00dc	 ldrb        r0, [sp, #0xDC]
  00978	eb000000	 bl          Log2
  0097c	e58d00b4	 str         r0, [sp, #0xB4]
  00980	e1dd0db8	 ldrh        r0, [sp, #0xD8]
  00984	eb000000	 bl          Log2
  00988	e58d00b8	 str         r0, [sp, #0xB8]
  0098c	e59d30b4	 ldr         r3, [sp, #0xB4]
  00990	e2433005	 sub         r3, r3, #5
  00994	e1a02403	 mov         r2, r3, lsl #8
  00998	e59d30b8	 ldr         r3, [sp, #0xB8]
  0099c	e2433005	 sub         r3, r3, #5
  009a0	e1822003	 orr         r2, r2, r3
  009a4	e59f3260	 ldr         r3, [pc, #0x260]
  009a8	e593302c	 ldr         r3, [r3, #0x2C]
  009ac	e2833901	 add         r3, r3, #1, 18
  009b0	e2833004	 add         r3, r3, #4
  009b4	e5832000	 str         r2, [r3]

; 455  : 
; 456  :         g_Dc.pCppiRegs->QMMEMREGION[1].QMEMRBASE = g_Dc.paTdPool.LowPart;

  009b8	e59f324c	 ldr         r3, [pc, #0x24C]
  009bc	e593302c	 ldr         r3, [r3, #0x2C]
  009c0	e2833901	 add         r3, r3, #1, 18
  009c4	e2832010	 add         r2, r3, #0x10
  009c8	e59f323c	 ldr         r3, [pc, #0x23C]
  009cc	e5933038	 ldr         r3, [r3, #0x38]
  009d0	e5823000	 str         r3, [r2]

; 457  :         g_Dc.pCppiRegs->QMMEMREGION[1].QMEMRCTRL =
; 458  :             ((nHdCount                  ) << 16) | /* Start index */
; 459  :             ((USB_CPPI_TD_SIZE_POW2  - 5) <<  8) | /* Desc. size  */
; 460  :             ((USB_CPPI_TD_COUNT_POW2 - 5) <<  0);  /* Desc. count */

  009d4	e1dd3db8	 ldrh        r3, [sp, #0xD8]
  009d8	e1a02803	 mov         r2, r3, lsl #16
  009dc	e59f3228	 ldr         r3, [pc, #0x228]
  009e0	e593302c	 ldr         r3, [r3, #0x2C]
  009e4	e2833901	 add         r3, r3, #1, 18
  009e8	e2833014	 add         r3, r3, #0x14
  009ec	e5832000	 str         r2, [r3]

; 461  :     }
; 462  :     else {

  009f0	ea000021	 b           |$LN9@USBCDMA_Re|
  009f4		 |$LN10@USBCDMA_Re|

; 463  :         UINT16 index = g_Dc.usb[0].nHdCount + USB_CPPI_TD_COUNT;

  009f4	e59f3210	 ldr         r3, [pc, #0x210]
  009f8	e1d335b0	 ldrh        r3, [r3, #0x50]
  009fc	e2833020	 add         r3, r3, #0x20
  00a00	e1a03803	 mov         r3, r3, lsl #16
  00a04	e1a03823	 mov         r3, r3, lsr #16
  00a08	e1cd35b0	 strh        r3, [sp, #0x50]

; 464  :         g_Dc.pCppiRegs->QMMEMREGION[2].QMEMRBASE = pUsbModule->paPool.LowPart;

  00a0c	e59d3010	 ldr         r3, [sp, #0x10]
  00a10	e2831008	 add         r1, r3, #8
  00a14	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00a18	e593302c	 ldr         r3, [r3, #0x2C]
  00a1c	e2833901	 add         r3, r3, #1, 18
  00a20	e2832020	 add         r2, r3, #0x20
  00a24	e5913000	 ldr         r3, [r1]
  00a28	e5823000	 str         r3, [r2]

; 465  :         g_Dc.pCppiRegs->QMMEMREGION[2].QMEMRCTRL =
; 466  :             ((index                     ) << 16) | /* Start index */
; 467  :             ((Log2(cbHdSize)         - 5) <<  8) | /* Desc. size  */
; 468  :             ((Log2(nHdCount)         - 5) <<  0);  /* Desc. count */

  00a2c	e5dd00dc	 ldrb        r0, [sp, #0xDC]
  00a30	eb000000	 bl          Log2
  00a34	e58d00bc	 str         r0, [sp, #0xBC]
  00a38	e1dd0db8	 ldrh        r0, [sp, #0xD8]
  00a3c	eb000000	 bl          Log2
  00a40	e58d00c0	 str         r0, [sp, #0xC0]
  00a44	e1dd35b0	 ldrh        r3, [sp, #0x50]
  00a48	e1a02803	 mov         r2, r3, lsl #16
  00a4c	e59d30bc	 ldr         r3, [sp, #0xBC]
  00a50	e2433005	 sub         r3, r3, #5
  00a54	e1a03403	 mov         r3, r3, lsl #8
  00a58	e1822003	 orr         r2, r2, r3
  00a5c	e59d30c0	 ldr         r3, [sp, #0xC0]
  00a60	e2433005	 sub         r3, r3, #5
  00a64	e1822003	 orr         r2, r2, r3
  00a68	e59f319c	 ldr         r3, [pc, #0x19C]
  00a6c	e593302c	 ldr         r3, [r3, #0x2C]
  00a70	e2833901	 add         r3, r3, #1, 18
  00a74	e2833024	 add         r3, r3, #0x24
  00a78	e5832000	 str         r2, [r3]
  00a7c		 |$LN9@USBCDMA_Re|

; 469  :     }
; 470  : 
; 471  :     if (!TdFreeQueueInit())

  00a7c	eb000000	 bl          TdFreeQueueInit
  00a80	e58d00c4	 str         r0, [sp, #0xC4]
  00a84	e59d30c4	 ldr         r3, [sp, #0xC4]
  00a88	e3530000	 cmp         r3, #0
  00a8c	1a000000	 bne         |$LN8@USBCDMA_Re|

; 472  : 	{
; 473  :         goto done;

  00a90	ea000033	 b           |$done$45703|
  00a94		 |$LN8@USBCDMA_Re|

; 474  : 	}
; 475  : 
; 476  :     // Finalise [OUT] parameters
; 477  :     (*ppaHdPool) = pUsbModule->paPool;

  00a94	e59d3010	 ldr         r3, [sp, #0x10]
  00a98	e2831008	 add         r1, r3, #8
  00a9c	e59d00e0	 ldr         r0, [sp, #0xE0]
  00aa0	e3a02008	 mov         r2, #8
  00aa4	eb000000	 bl          memcpy

; 478  :     (*ppvHdPool) = pUsbModule->pvPool;

  00aa8	e59d3010	 ldr         r3, [sp, #0x10]
  00aac	e2833004	 add         r3, r3, #4
  00ab0	e5932000	 ldr         r2, [r3]
  00ab4	e59d30e4	 ldr         r3, [sp, #0xE4]
  00ab8	e5832000	 str         r2, [r3]

; 479  : 
; 480  :     g_Dc.nNextUsbModule++;

  00abc	e59f3148	 ldr         r3, [pc, #0x148]
  00ac0	e5933048	 ldr         r3, [r3, #0x48]
  00ac4	e2832001	 add         r2, r3, #1
  00ac8	e59f313c	 ldr         r3, [pc, #0x13C]
  00acc	e5832048	 str         r2, [r3, #0x48]

; 481  :     hUsbModule = (HANDLE)pUsbModule;

  00ad0	e59d3010	 ldr         r3, [sp, #0x10]
  00ad4	e58d3014	 str         r3, [sp, #0x14]

; 482  : 
; 483  :     // Start CDMA scheduler based on initial values
; 484  :     // (Tx enabled, Rx disabled)
; 485  :     for(i=0;i<USB_CPPI_MAX_TX_CHANNELS;i++)

  00ad8	e3a03000	 mov         r3, #0
  00adc	e58d300c	 str         r3, [sp, #0xC]
  00ae0	ea000002	 b           |$LN7@USBCDMA_Re|
  00ae4		 |$LN6@USBCDMA_Re|
  00ae4	e59d300c	 ldr         r3, [sp, #0xC]
  00ae8	e2833001	 add         r3, r3, #1
  00aec	e58d300c	 str         r3, [sp, #0xC]
  00af0		 |$LN7@USBCDMA_Re|
  00af0	e59d300c	 ldr         r3, [sp, #0xC]
  00af4	e353000f	 cmp         r3, #0xF
  00af8	aa000007	 bge         |$LN5@USBCDMA_Re|

; 486  :         g_scheduleTx[i] = TRUE;

  00afc	e59d100c	 ldr         r1, [sp, #0xC]
  00b00	e3a03004	 mov         r3, #4
  00b04	e0020391	 mul         r2, r1, r3
  00b08	e59f30f8	 ldr         r3, [pc, #0xF8]
  00b0c	e0832002	 add         r2, r3, r2
  00b10	e3a03001	 mov         r3, #1
  00b14	e5823000	 str         r3, [r2]
  00b18	eafffff1	 b           |$LN6@USBCDMA_Re|
  00b1c		 |$LN5@USBCDMA_Re|

; 487  :     for(i=0;i<USB_CPPI_MAX_RX_CHANNELS;i++)

  00b1c	e3a03000	 mov         r3, #0
  00b20	e58d300c	 str         r3, [sp, #0xC]
  00b24	ea000002	 b           |$LN4@USBCDMA_Re|
  00b28		 |$LN3@USBCDMA_Re|
  00b28	e59d300c	 ldr         r3, [sp, #0xC]
  00b2c	e2833001	 add         r3, r3, #1
  00b30	e58d300c	 str         r3, [sp, #0xC]
  00b34		 |$LN4@USBCDMA_Re|
  00b34	e59d300c	 ldr         r3, [sp, #0xC]
  00b38	e353000f	 cmp         r3, #0xF
  00b3c	aa000007	 bge         |$LN2@USBCDMA_Re|

; 488  :         g_scheduleRx[i] = FALSE;

  00b40	e59d100c	 ldr         r1, [sp, #0xC]
  00b44	e3a03004	 mov         r3, #4
  00b48	e0020391	 mul         r2, r1, r3
  00b4c	e59f30b0	 ldr         r3, [pc, #0xB0]
  00b50	e0832002	 add         r2, r3, r2
  00b54	e3a03000	 mov         r3, #0
  00b58	e5823000	 str         r3, [r2]
  00b5c	eafffff1	 b           |$LN3@USBCDMA_Re|
  00b60		 |$LN2@USBCDMA_Re|

; 489  :     ConfigureScheduler();

  00b60	eb000000	 bl          ConfigureScheduler
  00b64		 |$done$45703|

; 490  : 
; 491  : done:
; 492  :     Unlock();

  00b64	eb000000	 bl          Unlock
  00b68		 |$done_unlocked$45699|

; 493  : 
; 494  : done_unlocked:
; 495  :     if (hUsbModule == NULL)

  00b68	e59d3014	 ldr         r3, [sp, #0x14]
  00b6c	e3530000	 cmp         r3, #0
  00b70	1a000001	 bne         |$LN1@USBCDMA_Re|

; 496  : 	{
; 497  :         USBCDMA_DeregisterUsbModule((HANDLE)pUsbModule);

  00b74	e59d0010	 ldr         r0, [sp, #0x10]
  00b78	eb000000	 bl          USBCDMA_DeregisterUsbModule
  00b7c		 |$LN1@USBCDMA_Re|

; 498  : 	}
; 499  : 
; 500  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 501  :         (L"-USBCDMA_RegisterUsbModule: %s\r\n",
; 502  :         (hUsbModule != NULL) ?
; 503  :             L"SUCCEEDED" :
; 504  :             L"FAILED"));

  00b7c	e59f307c	 ldr         r3, [pc, #0x7C]
  00b80	e5933440	 ldr         r3, [r3, #0x440]
  00b84	e3130020	 tst         r3, #0x20
  00b88	1a000006	 bne         |$LN49@USBCDMA_Re|
  00b8c	e59f306c	 ldr         r3, [pc, #0x6C]
  00b90	e5933440	 ldr         r3, [r3, #0x440]
  00b94	e3130008	 tst         r3, #8
  00b98	1a000002	 bne         |$LN49@USBCDMA_Re|
  00b9c	e3a03000	 mov         r3, #0
  00ba0	e58d30c8	 str         r3, [sp, #0xC8]
  00ba4	ea00000c	 b           |$LN52@USBCDMA_Re|
  00ba8		 |$LN49@USBCDMA_Re|
  00ba8	e59d3014	 ldr         r3, [sp, #0x14]
  00bac	e3530000	 cmp         r3, #0
  00bb0	0a000002	 beq         |$LN50@USBCDMA_Re|
  00bb4	e59f3040	 ldr         r3, [pc, #0x40]
  00bb8	e58d30cc	 str         r3, [sp, #0xCC]
  00bbc	ea000001	 b           |$LN51@USBCDMA_Re|
  00bc0		 |$LN50@USBCDMA_Re|
  00bc0	e59f3030	 ldr         r3, [pc, #0x30]
  00bc4	e58d30cc	 str         r3, [sp, #0xCC]
  00bc8		 |$LN51@USBCDMA_Re|
  00bc8	e59d10cc	 ldr         r1, [sp, #0xCC]
  00bcc	e59f0020	 ldr         r0, [pc, #0x20]
  00bd0	eb000000	 bl          NKDbgPrintfW
  00bd4	e3a03001	 mov         r3, #1
  00bd8	e58d30c8	 str         r3, [sp, #0xC8]
  00bdc		 |$LN52@USBCDMA_Re|

; 505  : 
; 506  :     return hUsbModule;

  00bdc	e59d3014	 ldr         r3, [sp, #0x14]
  00be0	e58d3060	 str         r3, [sp, #0x60]

; 507  : }

  00be4	e59d0060	 ldr         r0, [sp, #0x60]
  00be8	e28dd0d0	 add         sp, sp, #0xD0
  00bec	e89d6000	 ldmia       sp, {sp, lr}
  00bf0	e12fff1e	 bx          lr
  00bf4		 |$LN56@USBCDMA_Re|
  00bf4		 |$LN57@USBCDMA_Re|
  00bf4	00000000	 DCD         |??_C@_1EC@OEDDLCNM@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6@|
  00bf8		 |$LN58@USBCDMA_Re|
  00bf8	00000000	 DCD         |??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@|
  00bfc		 |$LN59@USBCDMA_Re|
  00bfc	00000000	 DCD         |??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@|
  00c00		 |$LN60@USBCDMA_Re|
  00c00	00000000	 DCD         |dpCurSettings|
  00c04		 |$LN61@USBCDMA_Re|
  00c04	00000000	 DCD         |g_scheduleRx|
  00c08		 |$LN62@USBCDMA_Re|
  00c08	00000000	 DCD         |g_scheduleTx|
  00c0c		 |$LN63@USBCDMA_Re|
  00c0c	00000000	 DCD         |g_Dc|
  00c10		 |$LN64@USBCDMA_Re|
  00c10	00000000	 DCD         |??_C@_1KM@NNNFEEDP@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c14		 |$LN65@USBCDMA_Re|
  00c14	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00c18		 |$LN66@USBCDMA_Re|
  00c18	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00c1c		 |$LN67@USBCDMA_Re|
  00c1c	00000000	 DCD         |??_C@_1LE@EFPEDKKD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c20		 |$LN68@USBCDMA_Re|
  00c20	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00c24		 |$LN69@USBCDMA_Re|
  00c24	00000000	 DCD         |??_C@_1II@GAJJLCIH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c28		 |$LN70@USBCDMA_Re|
  00c28	00000000	 DCD         |??_C@_1HM@MPLEJILA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c2c		 |$LN71@USBCDMA_Re|
  00c2c	00000000	 DCD         |??_C@_1HO@LCDFCJNL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c30		 |$LN72@USBCDMA_Re|
  00c30	00000000	 DCD         |??_C@_1HO@GIAMIHPK@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c34		 |$LN73@USBCDMA_Re|
  00c34	00000000	 DCD         |??_C@_1HE@KJEGINGG@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c38		 |$LN74@USBCDMA_Re|
  00c38	00000000	 DCD         |??_C@_1HE@BGFLAGEJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c3c		 |$LN75@USBCDMA_Re|
  00c3c	00000000	 DCD         |??_C@_1HK@IECGBIPL@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO@|
  00c40		 |$LN76@USBCDMA_Re|
  00c40	00000000	 DCD         |g_hDc|
  00c44		 |$LN77@USBCDMA_Re|
  00c44	00000000	 DCD         |??_C@_1JO@BBLCKLIH@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAR?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH@|
  00c48		 |$M46238|

			 ENDP  ; |USBCDMA_RegisterUsbModule|

	EXPORT	|??_C@_1EG@EJCDEOOA@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@LHKEEGKI@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@ECLLDLPE@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@JCCFFDOB@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@GEHFANGC@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	IMPORT	|HalFreeCommonBuffer|

  00040			 AREA	 |.pdata|, PDATA
|$T46278| DCD	|$LN21@USBCDMA_De|
	DCD	0x4000f404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@EJCDEOOA@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs@| DCB "-"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@LHKEEGKI@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, " ", 0x0, "m"
	DCB	0x0, "o", 0x0, "d", 0x0, "u", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@ECLLDLPE@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@JCCFFDOB@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "D", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "s", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@GEHFANGC@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA0?$AAx@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "r", 0x0, "e"
	DCB	0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "U", 0x0, "s", 0x0, "b", 0x0, "M", 0x0, "o", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00c48			 AREA	 |.text|, CODE, ARM

  00c48		 |USBCDMA_DeregisterUsbModule| PROC

; 512  : {

  00c48		 |$LN21@USBCDMA_De|
  00c48	e1a0c00d	 mov         r12, sp
  00c4c	e92d0001	 stmdb       sp!, {r0}
  00c50	e92d5000	 stmdb       sp!, {r12, lr}
  00c54	e24dd050	 sub         sp, sp, #0x50
  00c58		 |$M46275|

; 513  :     BOOL fRC = FALSE;

  00c58	e3a03000	 mov         r3, #0
  00c5c	e58d3010	 str         r3, [sp, #0x10]

; 514  :     UsbModule *pUsbModule;
; 515  :     int i;
; 516  : 
; 517  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 518  :         (L"+USBCDMA_DeregisterUsbModule: 0x%08x\r\n",
; 519  :         hUsbModule));

  00c60	e59f3384	 ldr         r3, [pc, #0x384]
  00c64	e5933440	 ldr         r3, [r3, #0x440]
  00c68	e3130020	 tst         r3, #0x20
  00c6c	1a000006	 bne         |$LN13@USBCDMA_De|
  00c70	e59f3374	 ldr         r3, [pc, #0x374]
  00c74	e5933440	 ldr         r3, [r3, #0x440]
  00c78	e3130008	 tst         r3, #8
  00c7c	1a000002	 bne         |$LN13@USBCDMA_De|
  00c80	e3a03000	 mov         r3, #0
  00c84	e58d3034	 str         r3, [sp, #0x34]
  00c88	ea000004	 b           |$LN14@USBCDMA_De|
  00c8c		 |$LN13@USBCDMA_De|
  00c8c	e59d1058	 ldr         r1, [sp, #0x58]
  00c90	e59f037c	 ldr         r0, [pc, #0x37C]
  00c94	eb000000	 bl          NKDbgPrintfW
  00c98	e3a03001	 mov         r3, #1
  00c9c	e58d3034	 str         r3, [sp, #0x34]
  00ca0		 |$LN14@USBCDMA_De|

; 520  : 
; 521  :     // Check driver state
; 522  :     if (g_hDc == 0) 

  00ca0	e59f3368	 ldr         r3, [pc, #0x368]
  00ca4	e5933000	 ldr         r3, [r3]
  00ca8	e3530000	 cmp         r3, #0
  00cac	1a000006	 bne         |$LN10@USBCDMA_De|

; 523  : 	{
; 524  :         ERRORMSG(1, (L" USBCDMA_DeregisterUsbModule: ERROR - Driver not initialised\r\n"));

  00cb0	e3a02f83	 mov         r2, #0x83, 30
  00cb4	e59f1340	 ldr         r1, [pc, #0x340]
  00cb8	e59f0338	 ldr         r0, [pc, #0x338]
  00cbc	eb000000	 bl          NKDbgPrintfW
  00cc0	e59f0344	 ldr         r0, [pc, #0x344]
  00cc4	eb000000	 bl          NKDbgPrintfW

; 525  :         goto done_unlocked;

  00cc8	ea0000a6	 b           |$done_unlocked$45794|
  00ccc		 |$LN10@USBCDMA_De|

; 526  :     }
; 527  : 
; 528  :     Lock();

  00ccc	eb000000	 bl          Lock

; 529  : 
; 530  :     // Stop CDMA scheduler
; 531  :     for(i=0;i<USB_CPPI_MAX_TX_CHANNELS;i++)

  00cd0	e3a03000	 mov         r3, #0
  00cd4	e58d3008	 str         r3, [sp, #8]
  00cd8	ea000002	 b           |$LN9@USBCDMA_De|
  00cdc		 |$LN8@USBCDMA_De|
  00cdc	e59d3008	 ldr         r3, [sp, #8]
  00ce0	e2833001	 add         r3, r3, #1
  00ce4	e58d3008	 str         r3, [sp, #8]
  00ce8		 |$LN9@USBCDMA_De|
  00ce8	e59d3008	 ldr         r3, [sp, #8]
  00cec	e353000f	 cmp         r3, #0xF
  00cf0	aa000007	 bge         |$LN7@USBCDMA_De|

; 532  :         g_scheduleTx[i] = FALSE;

  00cf4	e59d1008	 ldr         r1, [sp, #8]
  00cf8	e3a03004	 mov         r3, #4
  00cfc	e0020391	 mul         r2, r1, r3
  00d00	e59f3300	 ldr         r3, [pc, #0x300]
  00d04	e0832002	 add         r2, r3, r2
  00d08	e3a03000	 mov         r3, #0
  00d0c	e5823000	 str         r3, [r2]
  00d10	eafffff1	 b           |$LN8@USBCDMA_De|
  00d14		 |$LN7@USBCDMA_De|

; 533  :     for(i=0;i<USB_CPPI_MAX_RX_CHANNELS;i++)

  00d14	e3a03000	 mov         r3, #0
  00d18	e58d3008	 str         r3, [sp, #8]
  00d1c	ea000002	 b           |$LN6@USBCDMA_De|
  00d20		 |$LN5@USBCDMA_De|
  00d20	e59d3008	 ldr         r3, [sp, #8]
  00d24	e2833001	 add         r3, r3, #1
  00d28	e58d3008	 str         r3, [sp, #8]
  00d2c		 |$LN6@USBCDMA_De|
  00d2c	e59d3008	 ldr         r3, [sp, #8]
  00d30	e353000f	 cmp         r3, #0xF
  00d34	aa000007	 bge         |$LN4@USBCDMA_De|

; 534  :         g_scheduleRx[i] = FALSE;

  00d38	e59d1008	 ldr         r1, [sp, #8]
  00d3c	e3a03004	 mov         r3, #4
  00d40	e0020391	 mul         r2, r1, r3
  00d44	e59f32b8	 ldr         r3, [pc, #0x2B8]
  00d48	e0832002	 add         r2, r3, r2
  00d4c	e3a03000	 mov         r3, #0
  00d50	e5823000	 str         r3, [r2]
  00d54	eafffff1	 b           |$LN5@USBCDMA_De|
  00d58		 |$LN4@USBCDMA_De|

; 535  :     ConfigureScheduler();

  00d58	eb000000	 bl          ConfigureScheduler

; 536  : 
; 537  :     // Check input parameters
; 538  :     if ((hUsbModule != (HANDLE)&g_Dc.usb[0]) && (hUsbModule != (HANDLE)&g_Dc.usb[1])) 

  00d5c	e59d2058	 ldr         r2, [sp, #0x58]
  00d60	e59f3288	 ldr         r3, [pc, #0x288]
  00d64	e2833050	 add         r3, r3, #0x50
  00d68	e1520003	 cmp         r2, r3
  00d6c	0a00000e	 beq         |$LN3@USBCDMA_De|
  00d70	e59f3278	 ldr         r3, [pc, #0x278]
  00d74	e2833050	 add         r3, r3, #0x50
  00d78	e2832030	 add         r2, r3, #0x30
  00d7c	e59d3058	 ldr         r3, [sp, #0x58]
  00d80	e1530002	 cmp         r3, r2
  00d84	0a000008	 beq         |$LN3@USBCDMA_De|

; 539  : 	{
; 540  :         ERRORMSG(1,
; 541  :             (L" USBCDMA_DeregisterUsbModule: ERROR - Invalid handle 0x%08x\r\n",
; 542  :             hUsbModule));

  00d88	e3a02c02	 mov         r2, #2, 24
  00d8c	e382201e	 orr         r2, r2, #0x1E
  00d90	e59f1264	 ldr         r1, [pc, #0x264]
  00d94	e59f025c	 ldr         r0, [pc, #0x25C]
  00d98	eb000000	 bl          NKDbgPrintfW
  00d9c	e59d1058	 ldr         r1, [sp, #0x58]
  00da0	e59f0258	 ldr         r0, [pc, #0x258]
  00da4	eb000000	 bl          NKDbgPrintfW

; 543  :         goto done;

  00da8	ea00006d	 b           |$done$45805|
  00dac		 |$LN3@USBCDMA_De|

; 544  :     }
; 545  : 
; 546  :     pUsbModule = (UsbModule *)hUsbModule;

  00dac	e59d3058	 ldr         r3, [sp, #0x58]
  00db0	e58d300c	 str         r3, [sp, #0xC]

; 547  : 
; 548  :     // Check module state
; 549  :     if (pUsbModule->callback == NULL) 

  00db4	e59d300c	 ldr         r3, [sp, #0xC]
  00db8	e2833024	 add         r3, r3, #0x24
  00dbc	e5933000	 ldr         r3, [r3]
  00dc0	e3530000	 cmp         r3, #0
  00dc4	1a000008	 bne         |$LN2@USBCDMA_De|

; 550  : 	{
; 551  :         ERRORMSG(1,
; 552  :             (L" USBCDMA_DeregisterUsbModule: ERROR - USB module not registered 0x%08x\r\n",
; 553  :             pUsbModule));

  00dc8	e3a02c02	 mov         r2, #2, 24
  00dcc	e3822029	 orr         r2, r2, #0x29
  00dd0	e59f1224	 ldr         r1, [pc, #0x224]
  00dd4	e59f021c	 ldr         r0, [pc, #0x21C]
  00dd8	eb000000	 bl          NKDbgPrintfW
  00ddc	e59d100c	 ldr         r1, [sp, #0xC]
  00de0	e59f020c	 ldr         r0, [pc, #0x20C]
  00de4	eb000000	 bl          NKDbgPrintfW

; 554  :         goto done;

  00de8	ea00005d	 b           |$done$45805|
  00dec		 |$LN2@USBCDMA_De|

; 555  :     }
; 556  : 
; 557  :     // Deinitialise the shared teardown descriptor pool when the last module deregisters
; 558  :     if (pUsbModule == &g_Dc.usb[0])

  00dec	e59d200c	 ldr         r2, [sp, #0xC]
  00df0	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00df4	e2833050	 add         r3, r3, #0x50
  00df8	e1520003	 cmp         r2, r3
  00dfc	1a000000	 bne         |$LN1@USBCDMA_De|

; 559  : 	{
; 560  :         TdPoolDeinit();

  00e00	eb000000	 bl          TdPoolDeinit
  00e04		 |$LN1@USBCDMA_De|

; 561  : 	}
; 562  : 
; 563  :     // Free the USB module's resources
; 564  :     {
; 565  : 		DMA_ADAPTER_OBJECT Adapter;
; 566  : 		Adapter.ObjectSize = sizeof(DMA_ADAPTER_OBJECT);

  00e04	e3a0300c	 mov         r3, #0xC
  00e08	e1cd31b4	 strh        r3, [sp, #0x14]

; 567  : 		Adapter.InterfaceType = Internal;

  00e0c	e3a03000	 mov         r3, #0
  00e10	e58d3018	 str         r3, [sp, #0x18]

; 568  : 		Adapter.BusNumber = 0;

  00e14	e3a03000	 mov         r3, #0
  00e18	e58d301c	 str         r3, [sp, #0x1C]

; 569  : 
; 570  : 		// Free the USB module's linking RAM
; 571  : 		HalFreeCommonBuffer(
; 572  : 			&Adapter,
; 573  : 			pUsbModule->cbLinkingRamSize,
; 574  : 			pUsbModule->paLinkingRam,
; 575  : 			pUsbModule->pvLinkingRam,
; 576  : 			FALSE);

  00e1c	e3a03000	 mov         r3, #0
  00e20	e58d3004	 str         r3, [sp, #4]
  00e24	e59d300c	 ldr         r3, [sp, #0xC]
  00e28	e2833014	 add         r3, r3, #0x14
  00e2c	e5933000	 ldr         r3, [r3]
  00e30	e58d3000	 str         r3, [sp]
  00e34	e59d300c	 ldr         r3, [sp, #0xC]
  00e38	e2833018	 add         r3, r3, #0x18
  00e3c	e58d3038	 str         r3, [sp, #0x38]
  00e40	e59d3038	 ldr         r3, [sp, #0x38]
  00e44	e5932000	 ldr         r2, [r3]
  00e48	e5933004	 ldr         r3, [r3, #4]
  00e4c	e59d100c	 ldr         r1, [sp, #0xC]
  00e50	e2811020	 add         r1, r1, #0x20
  00e54	e5911000	 ldr         r1, [r1]
  00e58	e28d0014	 add         r0, sp, #0x14
  00e5c	eb000000	 bl          HalFreeCommonBuffer

; 577  : 
; 578  : 		// Reset the USB module's linking RAM parameters
; 579  : 		pUsbModule->cbLinkingRamSize      = 0;

  00e60	e59d300c	 ldr         r3, [sp, #0xC]
  00e64	e2832020	 add         r2, r3, #0x20
  00e68	e3a03000	 mov         r3, #0
  00e6c	e5823000	 str         r3, [r2]

; 580  : 		pUsbModule->paLinkingRam.QuadPart = 0;

  00e70	e59d300c	 ldr         r3, [sp, #0xC]
  00e74	e2833018	 add         r3, r3, #0x18
  00e78	e58d303c	 str         r3, [sp, #0x3C]
  00e7c	e59d203c	 ldr         r2, [sp, #0x3C]
  00e80	e3a03000	 mov         r3, #0
  00e84	e5823000	 str         r3, [r2]
  00e88	e59d203c	 ldr         r2, [sp, #0x3C]
  00e8c	e3a03000	 mov         r3, #0
  00e90	e5823004	 str         r3, [r2, #4]

; 581  : 		pUsbModule->pvLinkingRam          = NULL;

  00e94	e59d300c	 ldr         r3, [sp, #0xC]
  00e98	e2832014	 add         r2, r3, #0x14
  00e9c	e3a03000	 mov         r3, #0
  00ea0	e5823000	 str         r3, [r2]

; 582  : 
; 583  : 		// Free the USB module's descriptor pool
; 584  : 		HalFreeCommonBuffer(
; 585  : 			&Adapter,
; 586  : 			pUsbModule->cbPoolSize,
; 587  : 			pUsbModule->paPool,
; 588  : 			pUsbModule->pvPool,
; 589  : 			FALSE);

  00ea4	e3a03000	 mov         r3, #0
  00ea8	e58d3004	 str         r3, [sp, #4]
  00eac	e59d300c	 ldr         r3, [sp, #0xC]
  00eb0	e2833004	 add         r3, r3, #4
  00eb4	e5933000	 ldr         r3, [r3]
  00eb8	e58d3000	 str         r3, [sp]
  00ebc	e59d300c	 ldr         r3, [sp, #0xC]
  00ec0	e2833008	 add         r3, r3, #8
  00ec4	e58d3040	 str         r3, [sp, #0x40]
  00ec8	e59d3040	 ldr         r3, [sp, #0x40]
  00ecc	e5932000	 ldr         r2, [r3]
  00ed0	e5933004	 ldr         r3, [r3, #4]
  00ed4	e59d100c	 ldr         r1, [sp, #0xC]
  00ed8	e2811010	 add         r1, r1, #0x10
  00edc	e5911000	 ldr         r1, [r1]
  00ee0	e28d0014	 add         r0, sp, #0x14
  00ee4	eb000000	 bl          HalFreeCommonBuffer

; 590  : 
; 591  : 		// Clear the USB module's pool parameters
; 592  : 		pUsbModule->cbPoolSize      = 0;

  00ee8	e59d300c	 ldr         r3, [sp, #0xC]
  00eec	e2832010	 add         r2, r3, #0x10
  00ef0	e3a03000	 mov         r3, #0
  00ef4	e5823000	 str         r3, [r2]

; 593  : 		pUsbModule->paPool.QuadPart = 0;

  00ef8	e59d300c	 ldr         r3, [sp, #0xC]
  00efc	e2833008	 add         r3, r3, #8
  00f00	e58d3044	 str         r3, [sp, #0x44]
  00f04	e59d2044	 ldr         r2, [sp, #0x44]
  00f08	e3a03000	 mov         r3, #0
  00f0c	e5823000	 str         r3, [r2]
  00f10	e59d2044	 ldr         r2, [sp, #0x44]
  00f14	e3a03000	 mov         r3, #0
  00f18	e5823004	 str         r3, [r2, #4]

; 594  : 		pUsbModule->pvPool          = NULL;

  00f1c	e59d300c	 ldr         r3, [sp, #0xC]
  00f20	e2832004	 add         r2, r3, #4
  00f24	e3a03000	 mov         r3, #0
  00f28	e5823000	 str         r3, [r2]

; 595  : 		pUsbModule->cbHdSize        = 0;

  00f2c	e59d300c	 ldr         r3, [sp, #0xC]
  00f30	e2832002	 add         r2, r3, #2
  00f34	e3a03000	 mov         r3, #0
  00f38	e5c23000	 strb        r3, [r2]

; 596  : 		pUsbModule->nHdCount        = 0;

  00f3c	e59d200c	 ldr         r2, [sp, #0xC]
  00f40	e3a03000	 mov         r3, #0
  00f44	e1c230b0	 strh        r3, [r2]

; 597  :     }
; 598  : 
; 599  :     g_Dc.nNextUsbModule--;

  00f48	e59f30a0	 ldr         r3, [pc, #0xA0]
  00f4c	e5933048	 ldr         r3, [r3, #0x48]
  00f50	e2432001	 sub         r2, r3, #1
  00f54	e59f3094	 ldr         r3, [pc, #0x94]
  00f58	e5832048	 str         r2, [r3, #0x48]

; 600  : 
; 601  :     fRC = TRUE;

  00f5c	e3a03001	 mov         r3, #1
  00f60	e58d3010	 str         r3, [sp, #0x10]
  00f64		 |$done$45805|

; 602  : 
; 603  : done:
; 604  :     Unlock();

  00f64	eb000000	 bl          Unlock
  00f68		 |$done_unlocked$45794|

; 605  : 
; 606  : done_unlocked:
; 607  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 608  :         (L"-USBCDMA_DeregisterUsbModule: %s\r\n",
; 609  :         fRC ?
; 610  :             L"SUCCEEDED" :
; 611  :             L"FAILED"));

  00f68	e59f307c	 ldr         r3, [pc, #0x7C]
  00f6c	e5933440	 ldr         r3, [r3, #0x440]
  00f70	e3130020	 tst         r3, #0x20
  00f74	1a000006	 bne         |$LN15@USBCDMA_De|
  00f78	e59f306c	 ldr         r3, [pc, #0x6C]
  00f7c	e5933440	 ldr         r3, [r3, #0x440]
  00f80	e3130008	 tst         r3, #8
  00f84	1a000002	 bne         |$LN15@USBCDMA_De|
  00f88	e3a03000	 mov         r3, #0
  00f8c	e58d3048	 str         r3, [sp, #0x48]
  00f90	ea00000c	 b           |$LN18@USBCDMA_De|
  00f94		 |$LN15@USBCDMA_De|
  00f94	e59d3010	 ldr         r3, [sp, #0x10]
  00f98	e3530000	 cmp         r3, #0
  00f9c	0a000002	 beq         |$LN16@USBCDMA_De|
  00fa0	e59f3040	 ldr         r3, [pc, #0x40]
  00fa4	e58d304c	 str         r3, [sp, #0x4C]
  00fa8	ea000001	 b           |$LN17@USBCDMA_De|
  00fac		 |$LN16@USBCDMA_De|
  00fac	e59f3030	 ldr         r3, [pc, #0x30]
  00fb0	e58d304c	 str         r3, [sp, #0x4C]
  00fb4		 |$LN17@USBCDMA_De|
  00fb4	e59d104c	 ldr         r1, [sp, #0x4C]
  00fb8	e59f0020	 ldr         r0, [pc, #0x20]
  00fbc	eb000000	 bl          NKDbgPrintfW
  00fc0	e3a03001	 mov         r3, #1
  00fc4	e58d3048	 str         r3, [sp, #0x48]
  00fc8		 |$LN18@USBCDMA_De|

; 612  : 
; 613  :     return fRC;

  00fc8	e59d3010	 ldr         r3, [sp, #0x10]
  00fcc	e58d3030	 str         r3, [sp, #0x30]

; 614  : }

  00fd0	e59d0030	 ldr         r0, [sp, #0x30]
  00fd4	e28dd050	 add         sp, sp, #0x50
  00fd8	e89d6000	 ldmia       sp, {sp, lr}
  00fdc	e12fff1e	 bx          lr
  00fe0		 |$LN22@USBCDMA_De|
  00fe0		 |$LN23@USBCDMA_De|
  00fe0	00000000	 DCD         |??_C@_1EG@EJCDEOOA@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA?$CF?$AAs@|
  00fe4		 |$LN24@USBCDMA_De|
  00fe4	00000000	 DCD         |??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@|
  00fe8		 |$LN25@USBCDMA_De|
  00fe8	00000000	 DCD         |??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@|
  00fec		 |$LN26@USBCDMA_De|
  00fec	00000000	 DCD         |dpCurSettings|
  00ff0		 |$LN27@USBCDMA_De|
  00ff0	00000000	 DCD         |g_Dc|
  00ff4		 |$LN28@USBCDMA_De|
  00ff4	00000000	 DCD         |??_C@_1JC@LHKEEGKI@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@|
  00ff8		 |$LN29@USBCDMA_De|
  00ff8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00ffc		 |$LN30@USBCDMA_De|
  00ffc	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01000		 |$LN31@USBCDMA_De|
  01000	00000000	 DCD         |??_C@_1HM@ECLLDLPE@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@|
  01004		 |$LN32@USBCDMA_De|
  01004	00000000	 DCD         |g_scheduleRx|
  01008		 |$LN33@USBCDMA_De|
  01008	00000000	 DCD         |g_scheduleTx|
  0100c		 |$LN34@USBCDMA_De|
  0100c	00000000	 DCD         |??_C@_1HO@JCCFFDOB@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AAE?$AAR@|
  01010		 |$LN35@USBCDMA_De|
  01010	00000000	 DCD         |g_hDc|
  01014		 |$LN36@USBCDMA_De|
  01014	00000000	 DCD         |??_C@_1EO@GEHFANGC@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAr?$AAe?$AAg?$AAi?$AAs?$AAt?$AAe?$AAr?$AAU?$AAs?$AAb?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?3?$AA?5?$AA0?$AAx@|
  01018		 |$M46276|

			 ENDP  ; |USBCDMA_DeregisterUsbModule|

	EXPORT	|??_C@_1EE@EKBCPMEG@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1JI@BDAMFJJD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@LPKNOOCH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IE@MOIJBOHA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@CLCDJCCJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| [ DATA ] ; `string'
	EXPORT	|USBCDMA_KickCompletionCallback|

  00048			 AREA	 |.pdata|, PDATA
|$T46302| DCD	|$LN12@USBCDMA_Ki|
	DCD	0x40005c04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@EKBCPMEG@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AN@| DCB "-"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "K", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "C", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@BDAMFJJD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "K", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "C", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "U", 0x0, "S"
	DCB	0x0, "B", 0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "u"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, "t"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@LPKNOOCH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "K", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "C", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IE@MOIJBOHA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "K", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "C", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@CLCDJCCJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "K", 0x0, "i", 0x0, "c", 0x0, "k"
	DCB	0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "C", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01018			 AREA	 |.text|, CODE, ARM

  01018		 |USBCDMA_KickCompletionCallback| PROC

; 619  : {

  01018		 |$LN12@USBCDMA_Ki|
  01018	e1a0c00d	 mov         r12, sp
  0101c	e92d0001	 stmdb       sp!, {r0}
  01020	e92d5000	 stmdb       sp!, {r12, lr}
  01024	e24dd00c	 sub         sp, sp, #0xC
  01028		 |$M46299|

; 620  :     UsbModule *pUsbModule = NULL;

  01028	e3a03000	 mov         r3, #0
  0102c	e58d3000	 str         r3, [sp]

; 621  : 
; 622  :     DEBUGMSG(ZONE_IST,
; 623  :         (L"+USBCDMA_KickCompletionCallback: 0x%08x\r\n",
; 624  :         hUsbModule));

  01030	e59f312c	 ldr         r3, [pc, #0x12C]
  01034	e5933440	 ldr         r3, [r3, #0x440]
  01038	e3130040	 tst         r3, #0x40
  0103c	0a000005	 beq         |$LN6@USBCDMA_Ki|
  01040	e59d1014	 ldr         r1, [sp, #0x14]
  01044	e59f0138	 ldr         r0, [pc, #0x138]
  01048	eb000000	 bl          NKDbgPrintfW
  0104c	e3a03001	 mov         r3, #1
  01050	e58d3004	 str         r3, [sp, #4]
  01054	ea000001	 b           |$LN7@USBCDMA_Ki|
  01058		 |$LN6@USBCDMA_Ki|
  01058	e3a03000	 mov         r3, #0
  0105c	e58d3004	 str         r3, [sp, #4]
  01060		 |$LN7@USBCDMA_Ki|

; 625  : 
; 626  :     // Check driver state
; 627  :     if (g_hDc == 0) 

  01060	e59f3118	 ldr         r3, [pc, #0x118]
  01064	e5933000	 ldr         r3, [r3]
  01068	e3530000	 cmp         r3, #0
  0106c	1a000007	 bne         |$LN3@USBCDMA_Ki|

; 628  : 	{
; 629  :         ERRORMSG(1,
; 630  :             (L" USBCDMA_KickCompletionCallback: ERROR - Driver not initialised\r\n"));

  01070	e3a02c02	 mov         r2, #2, 24
  01074	e3822076	 orr         r2, r2, #0x76
  01078	e59f10f4	 ldr         r1, [pc, #0xF4]
  0107c	e59f00ec	 ldr         r0, [pc, #0xEC]
  01080	eb000000	 bl          NKDbgPrintfW
  01084	e59f00f0	 ldr         r0, [pc, #0xF0]
  01088	eb000000	 bl          NKDbgPrintfW

; 631  :         goto done;

  0108c	ea000025	 b           |$done$45826|
  01090		 |$LN3@USBCDMA_Ki|

; 632  :     }
; 633  : 
; 634  :     // This function is thread-safe so we don't bother locking here
; 635  : 
; 636  :     // Check input parameters
; 637  :     if ((hUsbModule != (HANDLE)&g_Dc.usb[0]) && (hUsbModule != (HANDLE)&g_Dc.usb[1])) 

  01090	e59d2014	 ldr         r2, [sp, #0x14]
  01094	e59f30cc	 ldr         r3, [pc, #0xCC]
  01098	e2833050	 add         r3, r3, #0x50
  0109c	e1520003	 cmp         r2, r3
  010a0	0a00000e	 beq         |$LN2@USBCDMA_Ki|
  010a4	e59f30bc	 ldr         r3, [pc, #0xBC]
  010a8	e2833050	 add         r3, r3, #0x50
  010ac	e2832030	 add         r2, r3, #0x30
  010b0	e59d3014	 ldr         r3, [sp, #0x14]
  010b4	e1530002	 cmp         r3, r2
  010b8	0a000008	 beq         |$LN2@USBCDMA_Ki|

; 638  : 	{
; 639  :         ERRORMSG(1,
; 640  :             (L" USBCDMA_KickCompletionCallback: ERROR - Invalid handle 0x%08x\r\n",
; 641  :             hUsbModule));

  010bc	e3a02c02	 mov         r2, #2, 24
  010c0	e3822081	 orr         r2, r2, #0x81
  010c4	e59f10a8	 ldr         r1, [pc, #0xA8]
  010c8	e59f00a0	 ldr         r0, [pc, #0xA0]
  010cc	eb000000	 bl          NKDbgPrintfW
  010d0	e59d1014	 ldr         r1, [sp, #0x14]
  010d4	e59f009c	 ldr         r0, [pc, #0x9C]
  010d8	eb000000	 bl          NKDbgPrintfW

; 642  :         goto done;

  010dc	ea000011	 b           |$done$45826|
  010e0		 |$LN2@USBCDMA_Ki|

; 643  :     }
; 644  : 
; 645  :     pUsbModule = (UsbModule *)hUsbModule;

  010e0	e59d3014	 ldr         r3, [sp, #0x14]
  010e4	e58d3000	 str         r3, [sp]

; 646  : 
; 647  :     // Check module state
; 648  :     if (pUsbModule->callback == NULL) 

  010e8	e59d3000	 ldr         r3, [sp]
  010ec	e2833024	 add         r3, r3, #0x24
  010f0	e5933000	 ldr         r3, [r3]
  010f4	e3530000	 cmp         r3, #0
  010f8	1a000007	 bne         |$LN1@USBCDMA_Ki|

; 649  : 	{
; 650  :         ERRORMSG(1,
; 651  :             (L" USBCDMA_KickCompletionCallback: ERROR - USB module not registered 0x%08x\r\n",
; 652  :             pUsbModule));

  010fc	e3a02fa3	 mov         r2, #0xA3, 30
  01100	e59f106c	 ldr         r1, [pc, #0x6C]
  01104	e59f0064	 ldr         r0, [pc, #0x64]
  01108	eb000000	 bl          NKDbgPrintfW
  0110c	e59d1000	 ldr         r1, [sp]
  01110	e59f0054	 ldr         r0, [pc, #0x54]
  01114	eb000000	 bl          NKDbgPrintfW

; 653  :         goto done;

  01118	ea000002	 b           |$done$45826|
  0111c		 |$LN1@USBCDMA_Ki|

; 654  :     }
; 655  : 
; 656  :     SetEvent(g_Dc.hIntrEvent);

  0111c	e59f3044	 ldr         r3, [pc, #0x44]
  01120	e593001c	 ldr         r0, [r3, #0x1C]
  01124	eb000000	 bl          SetEvent
  01128		 |$done$45826|

; 657  : 
; 658  : done:
; 659  :     DEBUGMSG(ZONE_IST,
; 660  :         (L"-USBCDMA_KickCompletionCallback\r\n"));

  01128	e59f3034	 ldr         r3, [pc, #0x34]
  0112c	e5933440	 ldr         r3, [r3, #0x440]
  01130	e3130040	 tst         r3, #0x40
  01134	0a000004	 beq         |$LN8@USBCDMA_Ki|
  01138	e59f0020	 ldr         r0, [pc, #0x20]
  0113c	eb000000	 bl          NKDbgPrintfW
  01140	e3a03001	 mov         r3, #1
  01144	e58d3008	 str         r3, [sp, #8]
  01148	ea000001	 b           |$LN9@USBCDMA_Ki|
  0114c		 |$LN8@USBCDMA_Ki|
  0114c	e3a03000	 mov         r3, #0
  01150	e58d3008	 str         r3, [sp, #8]
  01154		 |$LN9@USBCDMA_Ki|

; 661  : }

  01154	e28dd00c	 add         sp, sp, #0xC
  01158	e89d6000	 ldmia       sp, {sp, lr}
  0115c	e12fff1e	 bx          lr
  01160		 |$LN13@USBCDMA_Ki|
  01160		 |$LN14@USBCDMA_Ki|
  01160	00000000	 DCD         |??_C@_1EE@EKBCPMEG@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AN@|
  01164		 |$LN15@USBCDMA_Ki|
  01164	00000000	 DCD         |dpCurSettings|
  01168		 |$LN16@USBCDMA_Ki|
  01168	00000000	 DCD         |g_Dc|
  0116c		 |$LN17@USBCDMA_Ki|
  0116c	00000000	 DCD         |??_C@_1JI@BDAMFJJD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@|
  01170		 |$LN18@USBCDMA_Ki|
  01170	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  01174		 |$LN19@USBCDMA_Ki|
  01174	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01178		 |$LN20@USBCDMA_Ki|
  01178	00000000	 DCD         |??_C@_1IC@LPKNOOCH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@|
  0117c		 |$LN21@USBCDMA_Ki|
  0117c	00000000	 DCD         |??_C@_1IE@MOIJBOHA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@|
  01180		 |$LN22@USBCDMA_Ki|
  01180	00000000	 DCD         |g_hDc|
  01184		 |$LN23@USBCDMA_Ki|
  01184	00000000	 DCD         |??_C@_1FE@CLCDJCCJ@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAK?$AAi?$AAc?$AAk?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAi?$AAo?$AAn?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?3@|
  01188		 |$M46300|

			 ENDP  ; |USBCDMA_KickCompletionCallback|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46319| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46316|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M46317|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1JC@IJPNBLNA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@DJAEHIDJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@DKEJBHH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| [ DATA ] ; `string'
	EXPORT	|USBCDMA_DescriptorVAtoPA|

  00050			 AREA	 |.pdata|, PDATA
|$T46327| DCD	|$LN11@USBCDMA_De@2|
	DCD	0x40005604
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbcdma\usbcdma.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@IJPNBLNA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "V", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "P", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "V", 0x0, "i", 0x0, "r", 0x0, "t"
	DCB	0x0, "u", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "a", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "o", 0x0, "u", 0x0, "t"
	DCB	0x0, "s", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "T"
	DCB	0x0, "D", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@DJAEHIDJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "V", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "P", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@DKEJBHH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "V", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "P", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01188			 AREA	 |.text|, CODE, ARM

  01188		 |USBCDMA_DescriptorVAtoPA| PROC

; 666  : {

  01188		 |$LN11@USBCDMA_De@2|
  01188	e1a0c00d	 mov         r12, sp
  0118c	e92d0003	 stmdb       sp!, {r0, r1}
  01190	e92d5000	 stmdb       sp!, {r12, lr}
  01194	e24dd010	 sub         sp, sp, #0x10
  01198		 |$M46324|

; 667  :     UINT32 pa = 0;

  01198	e3a03000	 mov         r3, #0
  0119c	e58d3000	 str         r3, [sp]

; 668  : 
; 669  :     // Check driver state
; 670  :     if (g_hDc == 0) 

  011a0	e59f3134	 ldr         r3, [pc, #0x134]
  011a4	e5933000	 ldr         r3, [r3]
  011a8	e3530000	 cmp         r3, #0
  011ac	1a000007	 bne         |$LN6@USBCDMA_De@2|

; 671  : 	{
; 672  :         ERRORMSG(1,
; 673  :             (L" USBCDMA_DescriptorVAtoPA: ERROR - Driver not initialised\r\n"));

  011b0	e3a02c02	 mov         r2, #2, 24
  011b4	e38220a1	 orr         r2, r2, #0xA1
  011b8	e59f1110	 ldr         r1, [pc, #0x110]
  011bc	e59f0108	 ldr         r0, [pc, #0x108]
  011c0	eb000000	 bl          NKDbgPrintfW
  011c4	e59f010c	 ldr         r0, [pc, #0x10C]
  011c8	eb000000	 bl          NKDbgPrintfW

; 674  :         goto done;

  011cc	ea000036	 b           |$done$45845|
  011d0		 |$LN6@USBCDMA_De@2|

; 675  :     }
; 676  : 
; 677  :     // This function is thread-safe so we don't bother locking here
; 678  : 
; 679  :     // Check input parameters
; 680  :     if ((hUsbModule != (HANDLE)&g_Dc.usb[0]) && (hUsbModule != (HANDLE)&g_Dc.usb[1])) 

  011d0	e59d2018	 ldr         r2, [sp, #0x18]
  011d4	e59f30e8	 ldr         r3, [pc, #0xE8]
  011d8	e2833050	 add         r3, r3, #0x50
  011dc	e1520003	 cmp         r2, r3
  011e0	0a00000d	 beq         |$LN5@USBCDMA_De@2|
  011e4	e59f30d8	 ldr         r3, [pc, #0xD8]
  011e8	e2833050	 add         r3, r3, #0x50
  011ec	e2832030	 add         r2, r3, #0x30
  011f0	e59d3018	 ldr         r3, [sp, #0x18]
  011f4	e1530002	 cmp         r3, r2
  011f8	0a000007	 beq         |$LN5@USBCDMA_De@2|

; 681  : 	{
; 682  :         ERRORMSG(1,
; 683  :             (L" USBCDMA_DescriptorVAtoPA: ERROR - Invalid handle 0x%08x\r\n",
; 684  :             hUsbModule));

  011fc	e3a02fab	 mov         r2, #0xAB, 30
  01200	e59f10c8	 ldr         r1, [pc, #0xC8]
  01204	e59f00c0	 ldr         r0, [pc, #0xC0]
  01208	eb000000	 bl          NKDbgPrintfW
  0120c	e59d1018	 ldr         r1, [sp, #0x18]
  01210	e59f00bc	 ldr         r0, [pc, #0xBC]
  01214	eb000000	 bl          NKDbgPrintfW

; 685  :         goto done;

  01218	ea000023	 b           |$done$45845|
  0121c		 |$LN5@USBCDMA_De@2|

; 686  :     }
; 687  : 
; 688  :     if (va != NULL) 

  0121c	e59d301c	 ldr         r3, [sp, #0x1C]
  01220	e3530000	 cmp         r3, #0
  01224	0a000020	 beq         |$LN4@USBCDMA_De@2|

; 689  : 	{
; 690  :         UINT32 vaPoolBase  = (UINT32)g_Dc.pvTdPool;

  01228	e59f3094	 ldr         r3, [pc, #0x94]
  0122c	e5933030	 ldr         r3, [r3, #0x30]
  01230	e58d3004	 str         r3, [sp, #4]

; 691  :         UINT32 vaPoolLimit = (UINT32)g_Dc.pvTdPool + g_Dc.cbTdPoolSize;

  01234	e59f3088	 ldr         r3, [pc, #0x88]
  01238	e5932030	 ldr         r2, [r3, #0x30]
  0123c	e59f3080	 ldr         r3, [pc, #0x80]
  01240	e5933040	 ldr         r3, [r3, #0x40]
  01244	e0823003	 add         r3, r2, r3
  01248	e58d3008	 str         r3, [sp, #8]

; 692  : 
; 693  :         if (((UINT32)va < vaPoolBase) || ((UINT32)va > vaPoolLimit))

  0124c	e59d201c	 ldr         r2, [sp, #0x1C]
  01250	e59d3004	 ldr         r3, [sp, #4]
  01254	e1520003	 cmp         r2, r3
  01258	3a000003	 bcc         |$LN2@USBCDMA_De@2|
  0125c	e59d201c	 ldr         r2, [sp, #0x1C]
  01260	e59d3008	 ldr         r3, [sp, #8]
  01264	e1520003	 cmp         r2, r3
  01268	9a000008	 bls         |$LN3@USBCDMA_De@2|
  0126c		 |$LN2@USBCDMA_De@2|

; 694  : 		{
; 695  :             ERRORMSG(1,
; 696  :                 (L" USBCDMA_DescriptorVAtoPA: Virtual address is outside TD pool - 0x%08x\r\n",
; 697  :                 va));

  0126c	e3a02c02	 mov         r2, #2, 24
  01270	e38220b9	 orr         r2, r2, #0xB9
  01274	e59f1054	 ldr         r1, [pc, #0x54]
  01278	e59f004c	 ldr         r0, [pc, #0x4C]
  0127c	eb000000	 bl          NKDbgPrintfW
  01280	e59d101c	 ldr         r1, [sp, #0x1C]
  01284	e59f003c	 ldr         r0, [pc, #0x3C]
  01288	eb000000	 bl          NKDbgPrintfW

; 698  : 		}
; 699  :         else

  0128c	ea000006	 b           |$LN1@USBCDMA_De@2|
  01290		 |$LN3@USBCDMA_De@2|

; 700  : 		{
; 701  :             pa = g_Dc.paTdPool.LowPart + ((UINT32)va - vaPoolBase);

  01290	e59d201c	 ldr         r2, [sp, #0x1C]
  01294	e59d3004	 ldr         r3, [sp, #4]
  01298	e0422003	 sub         r2, r2, r3
  0129c	e59f3020	 ldr         r3, [pc, #0x20]
  012a0	e5933038	 ldr         r3, [r3, #0x38]
  012a4	e0833002	 add         r3, r3, r2
  012a8	e58d3000	 str         r3, [sp]
  012ac		 |$LN1@USBCDMA_De@2|
  012ac		 |$LN4@USBCDMA_De@2|
  012ac		 |$done$45845|

; 702  : 		}
; 703  :     }
; 704  : 
; 705  : done:
; 706  :     return pa;

  012ac	e59d3000	 ldr         r3, [sp]
  012b0	e58d300c	 str         r3, [sp, #0xC]

; 707  : }

  012b4	e59d000c	 ldr         r0, [sp, #0xC]
  012b8	e28dd010	 add         sp, sp, #0x10
  012bc	e89d6000	 ldmia       sp, {sp, lr}
  012c0	e12fff1e	 bx          lr
  012c4		 |$LN12@USBCDMA_De@2|
  012c4		 |$LN13@USBCDMA_De@2|
  012c4	00000000	 DCD         |g_Dc|
  012c8		 |$LN14@USBCDMA_De@2|
  012c8	00000000	 DCD         |??_C@_1JC@IJPNBLNA@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAV?$AAi?$AAr?$AAt?$AAu@|
  012cc		 |$LN15@USBCDMA_De@2|
  012cc	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  012d0		 |$LN16@USBCDMA_De@2|
  012d0	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  012d4		 |$LN17@USBCDMA_De@2|
  012d4	00000000	 DCD         |??_C@_1HG@DJAEHIDJ@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@|
  012d8		 |$LN18@USBCDMA_De@2|
  012d8	00000000	 DCD         |??_C@_1HI@DKEJBHH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAV?$AAA?$AAt?$AAo?$AAP?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@|
  012dc		 |$LN19@USBCDMA_De@2|
  012dc	00000000	 DCD         |g_hDc|
  012e0		 |$M46325|

			 ENDP  ; |USBCDMA_DescriptorVAtoPA|

	EXPORT	|USBCDMA_ConfigureScheduleRx|

  00058			 AREA	 |.pdata|, PDATA
|$T46340| DCD	|$LN7@USBCDMA_Co|
	DCD	0x40001b03
; Function compile flags: /Odtp

  012e0			 AREA	 |.text|, CODE, ARM

  012e0		 |USBCDMA_ConfigureScheduleRx| PROC

; 714  : {

  012e0		 |$LN7@USBCDMA_Co|
  012e0	e1a0c00d	 mov         r12, sp
  012e4	e92d0003	 stmdb       sp!, {r0, r1}
  012e8	e92d5000	 stmdb       sp!, {r12, lr}
  012ec		 |$M46337|

; 715  :     // Check input parameter
; 716  :     if(chanNum >= USB_CPPI_MAX_RX_CHANNELS)

  012ec	e59d3008	 ldr         r3, [sp, #8]
  012f0	e353000f	 cmp         r3, #0xF
  012f4	3a000000	 bcc         |$LN2@USBCDMA_Co|

; 717  :     {
; 718  :         // invalid parameter
; 719  :         return;

  012f8	ea000010	 b           |$LN3@USBCDMA_Co|
  012fc		 |$LN2@USBCDMA_Co|

; 720  :     }
; 721  : 
; 722  :     // Check current state - only need to reconfigure if
; 723  :     // required state is different
; 724  :     if(g_scheduleRx[chanNum] != enable)

  012fc	e59d1008	 ldr         r1, [sp, #8]
  01300	e3a03004	 mov         r3, #4
  01304	e0020391	 mul         r2, r1, r3
  01308	e59f3038	 ldr         r3, [pc, #0x38]
  0130c	e0833002	 add         r3, r3, r2
  01310	e5932000	 ldr         r2, [r3]
  01314	e59d300c	 ldr         r3, [sp, #0xC]
  01318	e1520003	 cmp         r2, r3
  0131c	0a000007	 beq         |$LN1@USBCDMA_Co|

; 725  :     {
; 726  :         // update scheduler list
; 727  :         g_scheduleRx[chanNum] = enable;

  01320	e59d1008	 ldr         r1, [sp, #8]
  01324	e3a03004	 mov         r3, #4
  01328	e0020391	 mul         r2, r1, r3
  0132c	e59f3014	 ldr         r3, [pc, #0x14]
  01330	e0832002	 add         r2, r3, r2
  01334	e59d300c	 ldr         r3, [sp, #0xC]
  01338	e5823000	 str         r3, [r2]

; 728  :         // reconfigure scheduler
; 729  :         ConfigureScheduler();

  0133c	eb000000	 bl          ConfigureScheduler
  01340		 |$LN1@USBCDMA_Co|
  01340		 |$LN3@USBCDMA_Co|

; 730  :     }
; 731  : }

  01340	e89d6000	 ldmia       sp, {sp, lr}
  01344	e12fff1e	 bx          lr
  01348		 |$LN8@USBCDMA_Co|
  01348		 |$LN9@USBCDMA_Co|
  01348	00000000	 DCD         |g_scheduleRx|
  0134c		 |$M46338|

			 ENDP  ; |USBCDMA_ConfigureScheduleRx|

	EXPORT	|USBCDMA_ConfigureScheduleTx|

  00060			 AREA	 |.pdata|, PDATA
|$T46347| DCD	|$LN7@USBCDMA_Co@2|
	DCD	0x40001b03
; Function compile flags: /Odtp

  0134c			 AREA	 |.text|, CODE, ARM

  0134c		 |USBCDMA_ConfigureScheduleTx| PROC

; 737  : {

  0134c		 |$LN7@USBCDMA_Co@2|
  0134c	e1a0c00d	 mov         r12, sp
  01350	e92d0003	 stmdb       sp!, {r0, r1}
  01354	e92d5000	 stmdb       sp!, {r12, lr}
  01358		 |$M46344|

; 738  :     // Check input parameter
; 739  :     if(chanNum >= USB_CPPI_MAX_TX_CHANNELS)

  01358	e59d3008	 ldr         r3, [sp, #8]
  0135c	e353000f	 cmp         r3, #0xF
  01360	3a000000	 bcc         |$LN2@USBCDMA_Co@2|

; 740  :     {
; 741  :         // invalid parameter
; 742  :         return;

  01364	ea000010	 b           |$LN3@USBCDMA_Co@2|
  01368		 |$LN2@USBCDMA_Co@2|

; 743  :     }
; 744  : 
; 745  :     // Check current state - only need to reconfigure if
; 746  :     // required state is different
; 747  :     if(g_scheduleTx[chanNum] != enable)

  01368	e59d1008	 ldr         r1, [sp, #8]
  0136c	e3a03004	 mov         r3, #4
  01370	e0020391	 mul         r2, r1, r3
  01374	e59f3038	 ldr         r3, [pc, #0x38]
  01378	e0833002	 add         r3, r3, r2
  0137c	e5932000	 ldr         r2, [r3]
  01380	e59d300c	 ldr         r3, [sp, #0xC]
  01384	e1520003	 cmp         r2, r3
  01388	0a000007	 beq         |$LN1@USBCDMA_Co@2|

; 748  :     {
; 749  :         // update scheduler list
; 750  :         g_scheduleTx[chanNum] = enable;

  0138c	e59d1008	 ldr         r1, [sp, #8]
  01390	e3a03004	 mov         r3, #4
  01394	e0020391	 mul         r2, r1, r3
  01398	e59f3014	 ldr         r3, [pc, #0x14]
  0139c	e0832002	 add         r2, r3, r2
  013a0	e59d300c	 ldr         r3, [sp, #0xC]
  013a4	e5823000	 str         r3, [r2]

; 751  :         // reconfigure scheduler
; 752  :         ConfigureScheduler();

  013a8	eb000000	 bl          ConfigureScheduler
  013ac		 |$LN1@USBCDMA_Co@2|
  013ac		 |$LN3@USBCDMA_Co@2|

; 753  :     }
; 754  : }

  013ac	e89d6000	 ldmia       sp, {sp, lr}
  013b0	e12fff1e	 bx          lr
  013b4		 |$LN8@USBCDMA_Co@2|
  013b4		 |$LN9@USBCDMA_Co@2|
  013b4	00000000	 DCD         |g_scheduleTx|
  013b8		 |$M46345|

			 ENDP  ; |USBCDMA_ConfigureScheduleTx|

	EXPORT	|??_C@_1FI@NIHHMLD@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AA_?$AAC?$AAT@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@IIFMEOP@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAa?$AAb?$AAl@| [ DATA ] ; `string'
	IMPORT	|__rt_udiv|
	IMPORT	|memset|

  00068			 AREA	 |.pdata|, PDATA
|$T46360| DCD	|$LN17@ConfigureS|
	DCD	0x4000b602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@NIHHMLD@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AA_?$AAC?$AAT@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, "S", 0x0, "c", 0x0, "h", 0x0, "e"
	DCB	0x0, "d", 0x0, "u", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "_", 0x0, "S"
	DCB	0x0, "C", 0x0, "H", 0x0, "E", 0x0, "D", 0x0, "_", 0x0, "C"
	DCB	0x0, "T", 0x0, "R", 0x0, "L", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@IIFMEOP@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAa?$AAb?$AAl@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, "S", 0x0, "c", 0x0, "h", 0x0, "e"
	DCB	0x0, "d", 0x0, "u", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, ":"
	DCB	0x0, " ", 0x0, "s", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "d"
	DCB	0x0, "u", 0x0, "l", 0x0, "e", 0x0, "T", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "[", 0x0, "%", 0x0, "d", 0x0, "]"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  013b8			 AREA	 |.text|, CODE, ARM

  013b8		 |ConfigureScheduler| PROC

; 760  : {

  013b8		 |$LN17@ConfigureS|
  013b8	e92d4010	 stmdb       sp!, {r4, lr}
  013bc	e24dd038	 sub         sp, sp, #0x38
  013c0		 |$M46357|

; 761  :     UINT32 max_entry = max(USB_CPPI_MAX_TX_CHANNELS,
; 762  :                            USB_CPPI_MAX_RX_CHANNELS);

  013c0	e3a0300f	 mov         r3, #0xF
  013c4	e58d3000	 str         r3, [sp]

; 763  :     UINT32 entryCount = 0;

  013c8	e3a03000	 mov         r3, #0
  013cc	e58d3008	 str         r3, [sp, #8]

; 764  :     UINT32 scheduleTable[SCHEDULE_TABLE_ENTRIES] = {0};

  013d0	e3a03000	 mov         r3, #0
  013d4	e58d3010	 str         r3, [sp, #0x10]
  013d8	e3a0201c	 mov         r2, #0x1C
  013dc	e3a01000	 mov         r1, #0
  013e0	e28d0014	 add         r0, sp, #0x14
  013e4	eb000000	 bl          memset

; 765  :     UINT32 scheduleBits;
; 766  :     UINT32 i;
; 767  : 
; 768  :     // disable scheduler while we update
; 769  :     g_Dc.pCppiRegs->DMA_SCHED_CTRL = 0;

  013e8	e59f328c	 ldr         r3, [pc, #0x28C]
  013ec	e593302c	 ldr         r3, [r3, #0x2C]
  013f0	e2832a01	 add         r2, r3, #1, 20
  013f4	e3a03000	 mov         r3, #0
  013f8	e5823000	 str         r3, [r2]

; 770  : 
; 771  :     // update schedule register values based on 
; 772  :     // g_scheduleTx and g_scheduleRx
; 773  :     for(i=0; i<max_entry; i++)

  013fc	e3a03000	 mov         r3, #0
  01400	e58d3004	 str         r3, [sp, #4]
  01404	ea000002	 b           |$LN8@ConfigureS|
  01408		 |$LN7@ConfigureS|
  01408	e59d3004	 ldr         r3, [sp, #4]
  0140c	e2833001	 add         r3, r3, #1
  01410	e58d3004	 str         r3, [sp, #4]
  01414		 |$LN8@ConfigureS|
  01414	e59d2004	 ldr         r2, [sp, #4]
  01418	e59d3000	 ldr         r3, [sp]
  0141c	e1520003	 cmp         r2, r3
  01420	2a000051	 bcs         |$LN6@ConfigureS|

; 774  :     {
; 775  :         // add Tx to the schedule, if enabled
; 776  :         if((i < USB_CPPI_MAX_TX_CHANNELS)&&(g_scheduleTx[i] == TRUE))

  01424	e59d3004	 ldr         r3, [sp, #4]
  01428	e353000f	 cmp         r3, #0xF
  0142c	2a000024	 bcs         |$LN5@ConfigureS|
  01430	e59d1004	 ldr         r1, [sp, #4]
  01434	e3a03004	 mov         r3, #4
  01438	e0020391	 mul         r2, r1, r3
  0143c	e59f3248	 ldr         r3, [pc, #0x248]
  01440	e0833002	 add         r3, r3, r2
  01444	e5933000	 ldr         r3, [r3]
  01448	e3530001	 cmp         r3, #1
  0144c	1a00001c	 bne         |$LN5@ConfigureS|

; 777  :         {
; 778  :             scheduleBits = (i << ((entryCount * 8) % 32));

  01450	e59d2008	 ldr         r2, [sp, #8]
  01454	e3a03008	 mov         r3, #8
  01458	e0010392	 mul         r1, r2, r3
  0145c	e3a00020	 mov         r0, #0x20
  01460	eb000000	 bl          __rt_udiv
  01464	e59d3004	 ldr         r3, [sp, #4]
  01468	e1a03113	 mov         r3, r3, lsl r1
  0146c	e58d300c	 str         r3, [sp, #0xC]

; 779  :             scheduleTable[(entryCount/4)] |= scheduleBits;

  01470	e59d1008	 ldr         r1, [sp, #8]
  01474	e3a00004	 mov         r0, #4
  01478	eb000000	 bl          __rt_udiv
  0147c	e3a03004	 mov         r3, #4
  01480	e0020390	 mul         r2, r0, r3
  01484	e28d3010	 add         r3, sp, #0x10
  01488	e0833002	 add         r3, r3, r2
  0148c	e5932000	 ldr         r2, [r3]
  01490	e59d300c	 ldr         r3, [sp, #0xC]
  01494	e1824003	 orr         r4, r2, r3
  01498	e59d1008	 ldr         r1, [sp, #8]
  0149c	e3a00004	 mov         r0, #4
  014a0	eb000000	 bl          __rt_udiv
  014a4	e3a03004	 mov         r3, #4
  014a8	e0020390	 mul         r2, r0, r3
  014ac	e28d3010	 add         r3, sp, #0x10
  014b0	e0833002	 add         r3, r3, r2
  014b4	e5834000	 str         r4, [r3]

; 780  :             entryCount++;

  014b8	e59d3008	 ldr         r3, [sp, #8]
  014bc	e2833001	 add         r3, r3, #1
  014c0	e58d3008	 str         r3, [sp, #8]
  014c4		 |$LN5@ConfigureS|

; 781  :         }
; 782  :         // add Rx to the schedule, if enabled
; 783  :         if((i < USB_CPPI_MAX_RX_CHANNELS)&&(g_scheduleRx[i] == TRUE))

  014c4	e59d3004	 ldr         r3, [sp, #4]
  014c8	e353000f	 cmp         r3, #0xF
  014cc	2a000025	 bcs         |$LN4@ConfigureS|
  014d0	e59d1004	 ldr         r1, [sp, #4]
  014d4	e3a03004	 mov         r3, #4
  014d8	e0020391	 mul         r2, r1, r3
  014dc	e59f31a4	 ldr         r3, [pc, #0x1A4]
  014e0	e0833002	 add         r3, r3, r2
  014e4	e5933000	 ldr         r3, [r3]
  014e8	e3530001	 cmp         r3, #1
  014ec	1a00001d	 bne         |$LN4@ConfigureS|

; 784  :         {
; 785  :             scheduleBits = ((0x80 + i) << ((entryCount * 8) % 32));

  014f0	e59d3004	 ldr         r3, [sp, #4]
  014f4	e2834080	 add         r4, r3, #0x80
  014f8	e59d2008	 ldr         r2, [sp, #8]
  014fc	e3a03008	 mov         r3, #8
  01500	e0010392	 mul         r1, r2, r3
  01504	e3a00020	 mov         r0, #0x20
  01508	eb000000	 bl          __rt_udiv
  0150c	e1a03114	 mov         r3, r4, lsl r1
  01510	e58d300c	 str         r3, [sp, #0xC]

; 786  :             scheduleTable[(entryCount/4)] |= scheduleBits;

  01514	e59d1008	 ldr         r1, [sp, #8]
  01518	e3a00004	 mov         r0, #4
  0151c	eb000000	 bl          __rt_udiv
  01520	e3a03004	 mov         r3, #4
  01524	e0020390	 mul         r2, r0, r3
  01528	e28d3010	 add         r3, sp, #0x10
  0152c	e0833002	 add         r3, r3, r2
  01530	e5932000	 ldr         r2, [r3]
  01534	e59d300c	 ldr         r3, [sp, #0xC]
  01538	e1824003	 orr         r4, r2, r3
  0153c	e59d1008	 ldr         r1, [sp, #8]
  01540	e3a00004	 mov         r0, #4
  01544	eb000000	 bl          __rt_udiv
  01548	e3a03004	 mov         r3, #4
  0154c	e0020390	 mul         r2, r0, r3
  01550	e28d3010	 add         r3, sp, #0x10
  01554	e0833002	 add         r3, r3, r2
  01558	e5834000	 str         r4, [r3]

; 787  :             entryCount++;

  0155c	e59d3008	 ldr         r3, [sp, #8]
  01560	e2833001	 add         r3, r3, #1
  01564	e58d3008	 str         r3, [sp, #8]
  01568		 |$LN4@ConfigureS|

; 788  :         }
; 789  :     }

  01568	eaffffa6	 b           |$LN7@ConfigureS|
  0156c		 |$LN6@ConfigureS|

; 790  : 
; 791  :     // update schedule
; 792  :     for(i=0;i<SCHEDULE_TABLE_ENTRIES;i++)

  0156c	e3a03000	 mov         r3, #0
  01570	e58d3004	 str         r3, [sp, #4]
  01574	ea000002	 b           |$LN3@ConfigureS|
  01578		 |$LN2@ConfigureS|
  01578	e59d3004	 ldr         r3, [sp, #4]
  0157c	e2833001	 add         r3, r3, #1
  01580	e58d3004	 str         r3, [sp, #4]
  01584		 |$LN3@ConfigureS|
  01584	e59d3004	 ldr         r3, [sp, #4]
  01588	e3530008	 cmp         r3, #8
  0158c	2a000020	 bcs         |$LN1@ConfigureS|

; 793  :     {
; 794  :         DEBUGMSG(ZONE_VERBOSE,(L"ConfigureScheduler: scheduleTable[%d]=0x%x\r\n", i, scheduleTable[i]));

  01590	e59f30e8	 ldr         r3, [pc, #0xE8]
  01594	e5933440	 ldr         r3, [r3, #0x440]
  01598	e3130008	 tst         r3, #8
  0159c	0a00000b	 beq         |$LN11@ConfigureS|
  015a0	e59d1004	 ldr         r1, [sp, #4]
  015a4	e3a03004	 mov         r3, #4
  015a8	e0020391	 mul         r2, r1, r3
  015ac	e28d3010	 add         r3, sp, #0x10
  015b0	e0833002	 add         r3, r3, r2
  015b4	e5932000	 ldr         r2, [r3]
  015b8	e59d1004	 ldr         r1, [sp, #4]
  015bc	e59f00c0	 ldr         r0, [pc, #0xC0]
  015c0	eb000000	 bl          NKDbgPrintfW
  015c4	e3a03001	 mov         r3, #1
  015c8	e58d3030	 str         r3, [sp, #0x30]
  015cc	ea000001	 b           |$LN12@ConfigureS|
  015d0		 |$LN11@ConfigureS|
  015d0	e3a03000	 mov         r3, #0
  015d4	e58d3030	 str         r3, [sp, #0x30]
  015d8		 |$LN12@ConfigureS|

; 795  :         g_Dc.pCppiRegs->CDMASTWORD[i] = scheduleTable[i];

  015d8	e59d1004	 ldr         r1, [sp, #4]
  015dc	e3a03004	 mov         r3, #4
  015e0	e0020391	 mul         r2, r1, r3
  015e4	e28d3010	 add         r3, sp, #0x10
  015e8	e0830002	 add         r0, r3, r2
  015ec	e59f3088	 ldr         r3, [pc, #0x88]
  015f0	e593302c	 ldr         r3, [r3, #0x2C]
  015f4	e2831b06	 add         r1, r3, #6, 22
  015f8	e59d2004	 ldr         r2, [sp, #4]
  015fc	e3a03004	 mov         r3, #4
  01600	e0030392	 mul         r3, r2, r3
  01604	e0812003	 add         r2, r1, r3
  01608	e5903000	 ldr         r3, [r0]
  0160c	e5823000	 str         r3, [r2]

; 796  :     }

  01610	eaffffd8	 b           |$LN2@ConfigureS|
  01614		 |$LN1@ConfigureS|

; 797  : 
; 798  :     // update schedule control register
; 799  :     g_Dc.pCppiRegs->DMA_SCHED_CTRL = 0x80000000 | (entryCount - 1);

  01614	e59d3008	 ldr         r3, [sp, #8]
  01618	e2433001	 sub         r3, r3, #1
  0161c	e3832102	 orr         r2, r3, #2, 2
  01620	e59f3054	 ldr         r3, [pc, #0x54]
  01624	e593302c	 ldr         r3, [r3, #0x2C]
  01628	e2833a01	 add         r3, r3, #1, 20
  0162c	e5832000	 str         r2, [r3]

; 800  :     DEBUGMSG(ZONE_VERBOSE,(L"ConfigureScheduler: DMA_SCHED_CTRL = 0x%x\r\n", g_Dc.pCppiRegs->DMA_SCHED_CTRL));

  01630	e59f3048	 ldr         r3, [pc, #0x48]
  01634	e5933440	 ldr         r3, [r3, #0x440]
  01638	e3130008	 tst         r3, #8
  0163c	0a000008	 beq         |$LN13@ConfigureS|
  01640	e59f3034	 ldr         r3, [pc, #0x34]
  01644	e593302c	 ldr         r3, [r3, #0x2C]
  01648	e2833a01	 add         r3, r3, #1, 20
  0164c	e5931000	 ldr         r1, [r3]
  01650	e59f0020	 ldr         r0, [pc, #0x20]
  01654	eb000000	 bl          NKDbgPrintfW
  01658	e3a03001	 mov         r3, #1
  0165c	e58d3034	 str         r3, [sp, #0x34]
  01660	ea000001	 b           |$LN14@ConfigureS|
  01664		 |$LN13@ConfigureS|
  01664	e3a03000	 mov         r3, #0
  01668	e58d3034	 str         r3, [sp, #0x34]
  0166c		 |$LN14@ConfigureS|

; 801  : }

  0166c	e28dd038	 add         sp, sp, #0x38
  01670	e8bd4010	 ldmia       sp!, {r4, lr}
  01674	e12fff1e	 bx          lr
  01678		 |$LN18@ConfigureS|
  01678		 |$LN19@ConfigureS|
  01678	00000000	 DCD         |??_C@_1FI@NIHHMLD@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA_?$AAS?$AAC?$AAH?$AAE?$AAD?$AA_?$AAC?$AAT@|
  0167c		 |$LN20@ConfigureS|
  0167c	00000000	 DCD         |g_Dc|
  01680		 |$LN21@ConfigureS|
  01680	00000000	 DCD         |dpCurSettings|
  01684		 |$LN22@ConfigureS|
  01684	00000000	 DCD         |??_C@_1FK@IIFMEOP@?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AAS?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAs?$AAc?$AAh?$AAe?$AAd?$AAu?$AAl?$AAe?$AAT?$AAa?$AAb?$AAl@|
  01688		 |$LN23@ConfigureS|
  01688	00000000	 DCD         |g_scheduleRx|
  0168c		 |$LN24@ConfigureS|
  0168c	00000000	 DCD         |g_scheduleTx|
  01690		 |$M46358|

			 ENDP  ; |ConfigureScheduler|

	EXPORT	|??_C@_1JE@OELNOEDH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAP?$AAh?$AAy?$AAs?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HG@CDAMMNLN@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@OHEAJBDD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| [ DATA ] ; `string'
	EXPORT	|USBCDMA_DescriptorPAtoVA|

  00070			 AREA	 |.pdata|, PDATA
|$T46373| DCD	|$LN11@USBCDMA_De@3|
	DCD	0x40005604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@OELNOEDH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAP?$AAh?$AAy?$AAs?$AAi@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "V", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "h", 0x0, "y", 0x0, "s"
	DCB	0x0, "i", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, "s", 0x0, "i", 0x0, "d", 0x0, "e", 0x0, " "
	DCB	0x0, "T", 0x0, "D", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "o"
	DCB	0x0, "l", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@CDAMMNLN@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "V", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d", 0x0, " "
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@OHEAJBDD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@| DCB " "
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, "_", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "A", 0x0, "t", 0x0, "o", 0x0, "V", 0x0, "A"
	DCB	0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O"
	DCB	0x0, "R", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D", 0x0, "r"
	DCB	0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "n"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "s"
	DCB	0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01690			 AREA	 |.text|, CODE, ARM

  01690		 |USBCDMA_DescriptorPAtoVA| PROC

; 806  : {

  01690		 |$LN11@USBCDMA_De@3|
  01690	e1a0c00d	 mov         r12, sp
  01694	e92d0003	 stmdb       sp!, {r0, r1}
  01698	e92d5000	 stmdb       sp!, {r12, lr}
  0169c	e24dd010	 sub         sp, sp, #0x10
  016a0		 |$M46370|

; 807  :     void *va = NULL;

  016a0	e3a03000	 mov         r3, #0
  016a4	e58d3000	 str         r3, [sp]

; 808  : 
; 809  :     // Check driver state
; 810  :     if (g_hDc == 0) 

  016a8	e59f3134	 ldr         r3, [pc, #0x134]
  016ac	e5933000	 ldr         r3, [r3]
  016b0	e3530000	 cmp         r3, #0
  016b4	1a000007	 bne         |$LN6@USBCDMA_De@3|

; 811  : 	{
; 812  :         ERRORMSG(1,
; 813  :             (L" USBCDMA_DescriptorPAtoVA: ERROR - Driver not initialised\r\n"));

  016b8	e3a02c03	 mov         r2, #3, 24
  016bc	e382202d	 orr         r2, r2, #0x2D
  016c0	e59f1110	 ldr         r1, [pc, #0x110]
  016c4	e59f0108	 ldr         r0, [pc, #0x108]
  016c8	eb000000	 bl          NKDbgPrintfW
  016cc	e59f010c	 ldr         r0, [pc, #0x10C]
  016d0	eb000000	 bl          NKDbgPrintfW

; 814  :         goto done;

  016d4	ea000036	 b           |$done$45905|
  016d8		 |$LN6@USBCDMA_De@3|

; 815  :     }
; 816  : 
; 817  :     // This function is thread-safe so we don't bother locking here
; 818  : 
; 819  :     // Check input parameters
; 820  :     if ((hUsbModule != (HANDLE)&g_Dc.usb[0]) && (hUsbModule != (HANDLE)&g_Dc.usb[1])) 

  016d8	e59d2018	 ldr         r2, [sp, #0x18]
  016dc	e59f30e8	 ldr         r3, [pc, #0xE8]
  016e0	e2833050	 add         r3, r3, #0x50
  016e4	e1520003	 cmp         r2, r3
  016e8	0a00000d	 beq         |$LN5@USBCDMA_De@3|
  016ec	e59f30d8	 ldr         r3, [pc, #0xD8]
  016f0	e2833050	 add         r3, r3, #0x50
  016f4	e2832030	 add         r2, r3, #0x30
  016f8	e59d3018	 ldr         r3, [sp, #0x18]
  016fc	e1530002	 cmp         r3, r2
  01700	0a000007	 beq         |$LN5@USBCDMA_De@3|

; 821  : 	{
; 822  :         ERRORMSG(1,
; 823  :             (L" USBCDMA_DescriptorPAtoVA: ERROR - Invalid handle 0x%08x\r\n",
; 824  :             hUsbModule));

  01704	e3a02fce	 mov         r2, #0xCE, 30
  01708	e59f10c8	 ldr         r1, [pc, #0xC8]
  0170c	e59f00c0	 ldr         r0, [pc, #0xC0]
  01710	eb000000	 bl          NKDbgPrintfW
  01714	e59d1018	 ldr         r1, [sp, #0x18]
  01718	e59f00bc	 ldr         r0, [pc, #0xBC]
  0171c	eb000000	 bl          NKDbgPrintfW

; 825  :         goto done;

  01720	ea000023	 b           |$done$45905|
  01724		 |$LN5@USBCDMA_De@3|

; 826  :     }
; 827  : 
; 828  :     if (pa != 0) 

  01724	e59d301c	 ldr         r3, [sp, #0x1C]
  01728	e3530000	 cmp         r3, #0
  0172c	0a000020	 beq         |$LN4@USBCDMA_De@3|

; 829  : 	{
; 830  :         UINT32 paPoolBase  = g_Dc.paTdPool.LowPart;

  01730	e59f3094	 ldr         r3, [pc, #0x94]
  01734	e5933038	 ldr         r3, [r3, #0x38]
  01738	e58d3008	 str         r3, [sp, #8]

; 831  :         UINT32 paPoolLimit = g_Dc.paTdPool.LowPart + g_Dc.cbTdPoolSize;

  0173c	e59f3088	 ldr         r3, [pc, #0x88]
  01740	e5932038	 ldr         r2, [r3, #0x38]
  01744	e59f3080	 ldr         r3, [pc, #0x80]
  01748	e5933040	 ldr         r3, [r3, #0x40]
  0174c	e0823003	 add         r3, r2, r3
  01750	e58d3004	 str         r3, [sp, #4]

; 832  : 
; 833  :         if ((pa < paPoolBase) || (pa > paPoolLimit))

  01754	e59d201c	 ldr         r2, [sp, #0x1C]
  01758	e59d3008	 ldr         r3, [sp, #8]
  0175c	e1520003	 cmp         r2, r3
  01760	3a000003	 bcc         |$LN2@USBCDMA_De@3|
  01764	e59d201c	 ldr         r2, [sp, #0x1C]
  01768	e59d3004	 ldr         r3, [sp, #4]
  0176c	e1520003	 cmp         r2, r3
  01770	9a000008	 bls         |$LN3@USBCDMA_De@3|
  01774		 |$LN2@USBCDMA_De@3|

; 834  : 		{
; 835  :             ERRORMSG(1,
; 836  :                 (L" USBCDMA_DescriptorPAtoVA: Physical address is outside TD pool - 0x%08x\r\n",
; 837  :                 pa));

  01774	e3a02c03	 mov         r2, #3, 24
  01778	e3822045	 orr         r2, r2, #0x45
  0177c	e59f1054	 ldr         r1, [pc, #0x54]
  01780	e59f004c	 ldr         r0, [pc, #0x4C]
  01784	eb000000	 bl          NKDbgPrintfW
  01788	e59d101c	 ldr         r1, [sp, #0x1C]
  0178c	e59f003c	 ldr         r0, [pc, #0x3C]
  01790	eb000000	 bl          NKDbgPrintfW

; 838  : 		}
; 839  :         else

  01794	ea000006	 b           |$LN1@USBCDMA_De@3|
  01798		 |$LN3@USBCDMA_De@3|

; 840  : 		{
; 841  :             va = (void *)(((UINT32)g_Dc.pvTdPool) + (pa - paPoolBase));

  01798	e59d201c	 ldr         r2, [sp, #0x1C]
  0179c	e59d3008	 ldr         r3, [sp, #8]
  017a0	e0422003	 sub         r2, r2, r3
  017a4	e59f3020	 ldr         r3, [pc, #0x20]
  017a8	e5933030	 ldr         r3, [r3, #0x30]
  017ac	e0833002	 add         r3, r3, r2
  017b0	e58d3000	 str         r3, [sp]
  017b4		 |$LN1@USBCDMA_De@3|
  017b4		 |$LN4@USBCDMA_De@3|
  017b4		 |$done$45905|

; 842  : 		}
; 843  :     }
; 844  : 
; 845  : done:
; 846  :     return va;

  017b4	e59d3000	 ldr         r3, [sp]
  017b8	e58d300c	 str         r3, [sp, #0xC]

; 847  : }

  017bc	e59d000c	 ldr         r0, [sp, #0xC]
  017c0	e28dd010	 add         sp, sp, #0x10
  017c4	e89d6000	 ldmia       sp, {sp, lr}
  017c8	e12fff1e	 bx          lr
  017cc		 |$LN12@USBCDMA_De@3|
  017cc		 |$LN13@USBCDMA_De@3|
  017cc	00000000	 DCD         |g_Dc|
  017d0		 |$LN14@USBCDMA_De@3|
  017d0	00000000	 DCD         |??_C@_1JE@OELNOEDH@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAP?$AAh?$AAy?$AAs?$AAi@|
  017d4		 |$LN15@USBCDMA_De@3|
  017d4	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  017d8		 |$LN16@USBCDMA_De@3|
  017d8	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  017dc		 |$LN17@USBCDMA_De@3|
  017dc	00000000	 DCD         |??_C@_1HG@CDAMMNLN@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@|
  017e0		 |$LN18@USBCDMA_De@3|
  017e0	00000000	 DCD         |??_C@_1HI@OHEAJBDD@?$AA?5?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA_?$AAD?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AAP?$AAA?$AAt?$AAo?$AAV?$AAA?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR@|
  017e4		 |$LN19@USBCDMA_De@3|
  017e4	00000000	 DCD         |g_hDc|
  017e8		 |$M46371|

			 ENDP  ; |USBCDMA_DescriptorPAtoVA|

	EXPORT	|??_C@_1CA@FOJONLDI@?$AA?9?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|UCD_Deinit|
	EXPORT	|??_C@_1FC@OABEKNAN@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@IBKJPCAH@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@DDEAFGMF@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@JFELNBFM@?$AA?$CL?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|UCD_Init|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|CreateEventW|
	IMPORT	|MmMapIoSpace|
	IMPORT	|InitializeCriticalSection|

  00078			 AREA	 |.pdata|, PDATA
|$T46407| DCD	|$LN28@UCD_Init|
	DCD	0x4000d904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@FOJONLDI@?$AA?9?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "U", 0x0, "C", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@OABEKNAN@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5@| DCB " "
	DCB	0x0, "U", 0x0, "C", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@IBKJPCAH@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf@| DCB " "
	DCB	0x0, "U", 0x0, "C", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "C", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@DDEAFGMF@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp@| DCB " "
	DCB	0x0, "U", 0x0, "C", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "m", 0x0, "a"
	DCB	0x0, "p", 0x0, " ", 0x0, "C", 0x0, "P", 0x0, "P", 0x0, "I"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "p"
	DCB	0x0, "a", 0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@JFELNBFM@?$AA?$CL?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "C", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  017e8			 AREA	 |.text|, CODE, ARM

  017e8		 |UCD_Init| PROC

; 850  : {

  017e8		 |$LN28@UCD_Init|
  017e8	e1a0c00d	 mov         r12, sp
  017ec	e92d0003	 stmdb       sp!, {r0, r1}
  017f0	e92d5000	 stmdb       sp!, {r12, lr}
  017f4	e24dd04c	 sub         sp, sp, #0x4C
  017f8		 |$M46404|

; 851  :     PHYSICAL_ADDRESS pa;
; 852  : 
; 853  : 	UNREFERENCED_PARAMETER(pContext);
; 854  : 	UNREFERENCED_PARAMETER(dwBusContext);
; 855  : 
; 856  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 857  :         (L"+UCD_Init\r\n"));

  017f8	e59f3328	 ldr         r3, [pc, #0x328]
  017fc	e5933440	 ldr         r3, [r3, #0x440]
  01800	e3130020	 tst         r3, #0x20
  01804	1a000006	 bne         |$LN8@UCD_Init|
  01808	e59f3318	 ldr         r3, [pc, #0x318]
  0180c	e5933440	 ldr         r3, [r3, #0x440]
  01810	e3130008	 tst         r3, #8
  01814	1a000002	 bne         |$LN8@UCD_Init|
  01818	e3a03000	 mov         r3, #0
  0181c	e58d301c	 str         r3, [sp, #0x1C]
  01820	ea000003	 b           |$LN9@UCD_Init|
  01824		 |$LN8@UCD_Init|
  01824	e59f031c	 ldr         r0, [pc, #0x31C]
  01828	eb000000	 bl          NKDbgPrintfW
  0182c	e3a03001	 mov         r3, #1
  01830	e58d301c	 str         r3, [sp, #0x1C]
  01834		 |$LN9@UCD_Init|

; 858  : 
; 859  :     if (g_hDc != 0)

  01834	e59f32dc	 ldr         r3, [pc, #0x2DC]
  01838	e5933000	 ldr         r3, [r3]
  0183c	e3530000	 cmp         r3, #0
  01840	0a000000	 beq         |$LN5@UCD_Init|

; 860  : 	{
; 861  :         goto done_unlocked;

  01844	ea00008d	 b           |$done_unlocked$45928|
  01848		 |$LN5@UCD_Init|

; 862  : 	}
; 863  : 
; 864  :     InitializeCriticalSection(&g_Dc.csLock);

  01848	e59f02dc	 ldr         r0, [pc, #0x2DC]
  0184c	eb000000	 bl          InitializeCriticalSection

; 865  : 
; 866  :     Lock();

  01850	eb000000	 bl          Lock

; 867  : 
; 868  :     pa.LowPart = AM3517_CPPI_REGS_PA;

  01854	e3a03317	 mov         r3, #0x17, 6
  01858	e3833a41	 orr         r3, r3, #0x41, 20
  0185c	e58d3008	 str         r3, [sp, #8]

; 869  :     g_Dc.pCppiRegs = (CppiRegs *)MmMapIoSpace(pa, sizeof(CppiRegs), FALSE);

  01860	e3a03000	 mov         r3, #0
  01864	e3a02c5e	 mov         r2, #0x5E, 24
  01868	e59d0008	 ldr         r0, [sp, #8]
  0186c	e59d100c	 ldr         r1, [sp, #0xC]
  01870	eb000000	 bl          MmMapIoSpace
  01874	e58d0020	 str         r0, [sp, #0x20]
  01878	e59d2020	 ldr         r2, [sp, #0x20]
  0187c	e59f32a8	 ldr         r3, [pc, #0x2A8]
  01880	e583202c	 str         r2, [r3, #0x2C]

; 870  :     if (g_Dc.pCppiRegs == NULL)

  01884	e59f32a0	 ldr         r3, [pc, #0x2A0]
  01888	e593302c	 ldr         r3, [r3, #0x2C]
  0188c	e3530000	 cmp         r3, #0
  01890	1a00000b	 bne         |$LN4@UCD_Init|

; 871  :     {
; 872  :         DEBUGMSG(ZONE_ERROR,
; 873  :             (L" UCD_Init: ERROR - Failed to map CPPI register space\r\n"));

  01894	e59f328c	 ldr         r3, [pc, #0x28C]
  01898	e5933440	 ldr         r3, [r3, #0x440]
  0189c	e3130001	 tst         r3, #1
  018a0	0a000004	 beq         |$LN10@UCD_Init|
  018a4	e59f0298	 ldr         r0, [pc, #0x298]
  018a8	eb000000	 bl          NKDbgPrintfW
  018ac	e3a03001	 mov         r3, #1
  018b0	e58d3024	 str         r3, [sp, #0x24]
  018b4	ea000001	 b           |$LN11@UCD_Init|
  018b8		 |$LN10@UCD_Init|
  018b8	e3a03000	 mov         r3, #0
  018bc	e58d3024	 str         r3, [sp, #0x24]
  018c0		 |$LN11@UCD_Init|

; 874  :         goto done;

  018c0	ea00006d	 b           |$done$45935|
  018c4		 |$LN4@UCD_Init|

; 875  :     }
; 876  : 
; 877  :     DEBUGCHK(g_Dc.hIntrEvent == NULL);

  018c4	e59f3260	 ldr         r3, [pc, #0x260]
  018c8	e593301c	 ldr         r3, [r3, #0x1C]
  018cc	e3530000	 cmp         r3, #0
  018d0	1a000002	 bne         |$LN12@UCD_Init|
  018d4	e3a03001	 mov         r3, #1
  018d8	e58d3028	 str         r3, [sp, #0x28]
  018dc	ea000008	 b           |$LN13@UCD_Init|
  018e0		 |$LN12@UCD_Init|
  018e0	e3a03c03	 mov         r3, #3, 24
  018e4	e383306d	 orr         r3, r3, #0x6D
  018e8	e59f224c	 ldr         r2, [pc, #0x24C]
  018ec	e59f1234	 ldr         r1, [pc, #0x234]
  018f0	e59f0240	 ldr         r0, [pc, #0x240]
  018f4	eb000000	 bl          NKDbgPrintfW
  018f8	e6000010	 __debugbreak_ce
  018fc	e3a03000	 mov         r3, #0
  01900	e58d3028	 str         r3, [sp, #0x28]
  01904		 |$LN13@UCD_Init|

; 878  :     g_Dc.hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  01904	e3a03000	 mov         r3, #0
  01908	e3a02000	 mov         r2, #0
  0190c	e3a01000	 mov         r1, #0
  01910	e3a00000	 mov         r0, #0
  01914	eb000000	 bl          CreateEventW
  01918	e58d002c	 str         r0, [sp, #0x2C]
  0191c	e59d202c	 ldr         r2, [sp, #0x2C]
  01920	e59f3204	 ldr         r3, [pc, #0x204]
  01924	e583201c	 str         r2, [r3, #0x1C]

; 879  :     if (g_Dc.hIntrEvent == NULL) 

  01928	e59f31fc	 ldr         r3, [pc, #0x1FC]
  0192c	e593301c	 ldr         r3, [r3, #0x1C]
  01930	e3530000	 cmp         r3, #0
  01934	1a00000b	 bne         |$LN3@UCD_Init|

; 880  : 	{
; 881  :         DEBUGMSG(ZONE_ERROR,
; 882  :             (L" UCD_Init: ERROR - CreateEvent failed\r\n"));

  01938	e59f31e8	 ldr         r3, [pc, #0x1E8]
  0193c	e5933440	 ldr         r3, [r3, #0x440]
  01940	e3130001	 tst         r3, #1
  01944	0a000004	 beq         |$LN14@UCD_Init|
  01948	e59f01f0	 ldr         r0, [pc, #0x1F0]
  0194c	eb000000	 bl          NKDbgPrintfW
  01950	e3a03001	 mov         r3, #1
  01954	e58d3030	 str         r3, [sp, #0x30]
  01958	ea000001	 b           |$LN15@UCD_Init|
  0195c		 |$LN14@UCD_Init|
  0195c	e3a03000	 mov         r3, #0
  01960	e58d3030	 str         r3, [sp, #0x30]
  01964		 |$LN15@UCD_Init|

; 883  :         goto done;

  01964	ea000044	 b           |$done$45935|
  01968		 |$LN3@UCD_Init|

; 884  :     }
; 885  : 
; 886  :     // AM35x : The CDMA controller does not have a dedicated interrupt.
; 887  :     // Therefore, the host and function drivers check the pending
; 888  :     // queue register(s) on a USB controller interrupt and process
; 889  :     // the completion queues if they indicate a DMA transfer has completed.
; 890  :     // However, the event and thread in this driver is still required to 
; 891  :     // process teardown completion.
; 892  : #if 0
; 893  : 	{
; 894  :     DWORD BytesRet = 0;
; 895  : 
; 896  :     if (!KernelIoControl(IOCTL_HAL_REQUEST_SYSINTR, &g_Dc.dwIrqVal, sizeof(DWORD),
; 897  :             &g_Dc.dwSysIntr, sizeof(DWORD), &BytesRet))
; 898  :     {
; 899  :         DEBUGMSG(ZONE_ERROR,
; 900  :             (L" UCD_Init: ERROR - Failed to request SYSINTR for IRQ%u\r\n",
; 901  :             g_Dc.dwIrqVal));
; 902  :         goto done;
; 903  :     }
; 904  : 
; 905  :     InterruptDisable(g_Dc.dwSysIntr);
; 906  :     if (!InterruptInitialize(g_Dc.dwSysIntr, g_Dc.hIntrEvent, NULL, 0)) {
; 907  :         DEBUGMSG(ZONE_ERROR,
; 908  :             (L" UCD_Init - ERROR - InterruptInitialize failed\r\n"));
; 909  :         goto done;
; 910  :     }
; 911  : 	}
; 912  : #endif
; 913  : 
; 914  :     DEBUGCHK(g_Dc.hIntrThread == NULL);

  01968	e59f31bc	 ldr         r3, [pc, #0x1BC]
  0196c	e5933020	 ldr         r3, [r3, #0x20]
  01970	e3530000	 cmp         r3, #0
  01974	1a000002	 bne         |$LN16@UCD_Init|
  01978	e3a03001	 mov         r3, #1
  0197c	e58d3034	 str         r3, [sp, #0x34]
  01980	ea000008	 b           |$LN17@UCD_Init|
  01984		 |$LN16@UCD_Init|
  01984	e3a03c03	 mov         r3, #3, 24
  01988	e3833092	 orr         r3, r3, #0x92
  0198c	e59f21a8	 ldr         r2, [pc, #0x1A8]
  01990	e59f1190	 ldr         r1, [pc, #0x190]
  01994	e59f019c	 ldr         r0, [pc, #0x19C]
  01998	eb000000	 bl          NKDbgPrintfW
  0199c	e6000010	 __debugbreak_ce
  019a0	e3a03000	 mov         r3, #0
  019a4	e58d3034	 str         r3, [sp, #0x34]
  019a8		 |$LN17@UCD_Init|

; 915  :     DEBUGCHK(g_Dc.fIntrThreadClosing == FALSE);

  019a8	e59f317c	 ldr         r3, [pc, #0x17C]
  019ac	e5933028	 ldr         r3, [r3, #0x28]
  019b0	e3530000	 cmp         r3, #0
  019b4	1a000002	 bne         |$LN18@UCD_Init|
  019b8	e3a03001	 mov         r3, #1
  019bc	e58d3038	 str         r3, [sp, #0x38]
  019c0	ea000008	 b           |$LN19@UCD_Init|
  019c4		 |$LN18@UCD_Init|
  019c4	e3a03c03	 mov         r3, #3, 24
  019c8	e3833093	 orr         r3, r3, #0x93
  019cc	e59f2168	 ldr         r2, [pc, #0x168]
  019d0	e59f1150	 ldr         r1, [pc, #0x150]
  019d4	e59f015c	 ldr         r0, [pc, #0x15C]
  019d8	eb000000	 bl          NKDbgPrintfW
  019dc	e6000010	 __debugbreak_ce
  019e0	e3a03000	 mov         r3, #0
  019e4	e58d3038	 str         r3, [sp, #0x38]
  019e8		 |$LN19@UCD_Init|

; 916  :     g_Dc.hIntrThread = CreateThread(NULL, 0, IntrThread, NULL, 0, NULL);

  019e8	e3a03000	 mov         r3, #0
  019ec	e58d3004	 str         r3, [sp, #4]
  019f0	e3a03000	 mov         r3, #0
  019f4	e58d3000	 str         r3, [sp]
  019f8	e3a03000	 mov         r3, #0
  019fc	e59f2130	 ldr         r2, [pc, #0x130]
  01a00	e3a01000	 mov         r1, #0
  01a04	e3a00000	 mov         r0, #0
  01a08	eb000000	 bl          CreateThread
  01a0c	e58d003c	 str         r0, [sp, #0x3C]
  01a10	e59d203c	 ldr         r2, [sp, #0x3C]
  01a14	e59f3110	 ldr         r3, [pc, #0x110]
  01a18	e5832020	 str         r2, [r3, #0x20]

; 917  :     if (g_Dc.hIntrThread == NULL) 

  01a1c	e59f3108	 ldr         r3, [pc, #0x108]
  01a20	e5933020	 ldr         r3, [r3, #0x20]
  01a24	e3530000	 cmp         r3, #0
  01a28	1a00000b	 bne         |$LN2@UCD_Init|

; 918  : 	{
; 919  :         DEBUGMSG(ZONE_ERROR,
; 920  :             (L" UCD_Init: ERROR - CreateThread failed\r\n"));

  01a2c	e59f30f4	 ldr         r3, [pc, #0xF4]
  01a30	e5933440	 ldr         r3, [r3, #0x440]
  01a34	e3130001	 tst         r3, #1
  01a38	0a000004	 beq         |$LN20@UCD_Init|
  01a3c	e59f00ec	 ldr         r0, [pc, #0xEC]
  01a40	eb000000	 bl          NKDbgPrintfW
  01a44	e3a03001	 mov         r3, #1
  01a48	e58d3040	 str         r3, [sp, #0x40]
  01a4c	ea000001	 b           |$LN21@UCD_Init|
  01a50		 |$LN20@UCD_Init|
  01a50	e3a03000	 mov         r3, #0
  01a54	e58d3040	 str         r3, [sp, #0x40]
  01a58		 |$LN21@UCD_Init|

; 921  :         goto done;

  01a58	ea000007	 b           |$done$45935|
  01a5c		 |$LN2@UCD_Init|

; 922  :     }
; 923  :     CeSetThreadPriority(g_Dc.hIntrThread, g_Dc.nIntrThreadPriority);

  01a5c	e59f30c8	 ldr         r3, [pc, #0xC8]
  01a60	e5931024	 ldr         r1, [r3, #0x24]
  01a64	e59f30c0	 ldr         r3, [pc, #0xC0]
  01a68	e5930020	 ldr         r0, [r3, #0x20]
  01a6c	eb000000	 bl          CeSetThreadPriority

; 924  : 
; 925  :     g_hDc = (DWORD)&g_Dc;

  01a70	e59f20b4	 ldr         r2, [pc, #0xB4]
  01a74	e59f309c	 ldr         r3, [pc, #0x9C]
  01a78	e5832000	 str         r2, [r3]
  01a7c		 |$done$45935|

; 926  : 
; 927  : done:
; 928  :     Unlock();

  01a7c	eb000000	 bl          Unlock
  01a80		 |$done_unlocked$45928|

; 929  : 
; 930  : done_unlocked:
; 931  :     if (g_hDc == 0)

  01a80	e59f3090	 ldr         r3, [pc, #0x90]
  01a84	e5933000	 ldr         r3, [r3]
  01a88	e3530000	 cmp         r3, #0
  01a8c	1a000001	 bne         |$LN1@UCD_Init|

; 932  : 	{
; 933  :         UCD_Deinit((DWORD)&g_Dc);

  01a90	e59f0094	 ldr         r0, [pc, #0x94]
  01a94	eb000000	 bl          UCD_Deinit
  01a98		 |$LN1@UCD_Init|

; 934  : 	}
; 935  : 
; 936  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 937  :         (L"-UCD_Init: %s\r\n",
; 938  :         g_hDc ?
; 939  :             L"SUCCEEDED" :
; 940  :             L"FAILED"));

  01a98	e59f3088	 ldr         r3, [pc, #0x88]
  01a9c	e5933440	 ldr         r3, [r3, #0x440]
  01aa0	e3130020	 tst         r3, #0x20
  01aa4	1a000006	 bne         |$LN22@UCD_Init|
  01aa8	e59f3078	 ldr         r3, [pc, #0x78]
  01aac	e5933440	 ldr         r3, [r3, #0x440]
  01ab0	e3130008	 tst         r3, #8
  01ab4	1a000002	 bne         |$LN22@UCD_Init|
  01ab8	e3a03000	 mov         r3, #0
  01abc	e58d3044	 str         r3, [sp, #0x44]
  01ac0	ea00000d	 b           |$LN25@UCD_Init|
  01ac4		 |$LN22@UCD_Init|
  01ac4	e59f304c	 ldr         r3, [pc, #0x4C]
  01ac8	e5933000	 ldr         r3, [r3]
  01acc	e3530000	 cmp         r3, #0
  01ad0	0a000002	 beq         |$LN23@UCD_Init|
  01ad4	e59f3048	 ldr         r3, [pc, #0x48]
  01ad8	e58d3048	 str         r3, [sp, #0x48]
  01adc	ea000001	 b           |$LN24@UCD_Init|
  01ae0		 |$LN23@UCD_Init|
  01ae0	e59f3038	 ldr         r3, [pc, #0x38]
  01ae4	e58d3048	 str         r3, [sp, #0x48]
  01ae8		 |$LN24@UCD_Init|
  01ae8	e59d1048	 ldr         r1, [sp, #0x48]
  01aec	e59f0028	 ldr         r0, [pc, #0x28]
  01af0	eb000000	 bl          NKDbgPrintfW
  01af4	e3a03001	 mov         r3, #1
  01af8	e58d3044	 str         r3, [sp, #0x44]
  01afc		 |$LN25@UCD_Init|

; 941  : 
; 942  :     return g_hDc;

  01afc	e59f3014	 ldr         r3, [pc, #0x14]
  01b00	e5933000	 ldr         r3, [r3]
  01b04	e58d3018	 str         r3, [sp, #0x18]

; 943  : }

  01b08	e59d0018	 ldr         r0, [sp, #0x18]
  01b0c	e28dd04c	 add         sp, sp, #0x4C
  01b10	e89d6000	 ldmia       sp, {sp, lr}
  01b14	e12fff1e	 bx          lr
  01b18		 |$LN29@UCD_Init|
  01b18		 |$LN30@UCD_Init|
  01b18	00000000	 DCD         |g_hDc|
  01b1c		 |$LN31@UCD_Init|
  01b1c	00000000	 DCD         |??_C@_1CA@FOJONLDI@?$AA?9?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01b20		 |$LN32@UCD_Init|
  01b20	00000000	 DCD         |??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@|
  01b24		 |$LN33@UCD_Init|
  01b24	00000000	 DCD         |??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@|
  01b28		 |$LN34@UCD_Init|
  01b28	00000000	 DCD         |dpCurSettings|
  01b2c		 |$LN35@UCD_Init|
  01b2c	00000000	 DCD         |g_Dc|
  01b30		 |$LN36@UCD_Init|
  01b30	00000000	 DCD         |??_C@_1FC@OABEKNAN@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5@|
  01b34		 |$LN37@UCD_Init|
  01b34	00000000	 DCD         |IntrThread|
  01b38		 |$LN38@UCD_Init|
  01b38	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01b3c		 |$LN39@UCD_Init|
  01b3c	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01b40		 |$LN40@UCD_Init|
  01b40	00000000	 DCD         |??_C@_1FA@IBKJPCAH@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAE?$AAv?$AAe?$AAn?$AAt?$AA?5?$AAf@|
  01b44		 |$LN41@UCD_Init|
  01b44	00000000	 DCD         |??_C@_1GO@DDEAFGMF@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAm?$AAa?$AAp@|
  01b48		 |$LN42@UCD_Init|
  01b48	00000000	 DCD         |??_C@_1BI@JFELNBFM@?$AA?$CL?$AAU?$AAC?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  01b4c		 |$M46405|

			 ENDP  ; |UCD_Init|

	EXPORT	|??_C@_1CE@FHIHBNDK@?$AA?9?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@MELOCDOC@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@GDNCCLMB@?$AA?$CL?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DeleteCriticalSection|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|InterruptDisable|
	IMPORT	|CloseHandle|
	IMPORT	|TerminateThread|
	IMPORT	|WaitForSingleObject|

  00080			 AREA	 |.pdata|, PDATA
|$T46437| DCD	|$LN23@UCD_Deinit|
	DCD	0x4000af04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FHIHBNDK@?$AA?9?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "U", 0x0, "C", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@MELOCDOC@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAa?$AAn@| DCB " "
	DCB	0x0, "U", 0x0, "C", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "d", 0x0, " ", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@GDNCCLMB@?$AA?$CL?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "C", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  01b4c			 AREA	 |.text|, CODE, ARM

  01b4c		 |UCD_Deinit| PROC

; 946  : {

  01b4c		 |$LN23@UCD_Deinit|
  01b4c	e1a0c00d	 mov         r12, sp
  01b50	e92d0001	 stmdb       sp!, {r0}
  01b54	e92d5000	 stmdb       sp!, {r12, lr}
  01b58	e24dd01c	 sub         sp, sp, #0x1C
  01b5c		 |$M46434|

; 947  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 948  :         (L"+UCD_Deinit\r\n"));

  01b5c	e59f328c	 ldr         r3, [pc, #0x28C]
  01b60	e5933440	 ldr         r3, [r3, #0x440]
  01b64	e3130020	 tst         r3, #0x20
  01b68	1a000006	 bne         |$LN11@UCD_Deinit|
  01b6c	e59f327c	 ldr         r3, [pc, #0x27C]
  01b70	e5933440	 ldr         r3, [r3, #0x440]
  01b74	e3130008	 tst         r3, #8
  01b78	1a000002	 bne         |$LN11@UCD_Deinit|
  01b7c	e3a03000	 mov         r3, #0
  01b80	e58d3004	 str         r3, [sp, #4]
  01b84	ea000003	 b           |$LN12@UCD_Deinit|
  01b88		 |$LN11@UCD_Deinit|
  01b88	e59f0274	 ldr         r0, [pc, #0x274]
  01b8c	eb000000	 bl          NKDbgPrintfW
  01b90	e3a03001	 mov         r3, #1
  01b94	e58d3004	 str         r3, [sp, #4]
  01b98		 |$LN12@UCD_Deinit|

; 949  : 
; 950  :     if (hDeviceContext != (DWORD)&g_Dc) {

  01b98	e59d2024	 ldr         r2, [sp, #0x24]
  01b9c	e59f3250	 ldr         r3, [pc, #0x250]
  01ba0	e1520003	 cmp         r2, r3
  01ba4	0a00000c	 beq         |$LN8@UCD_Deinit|

; 951  :         DEBUGMSG(ZONE_ERROR,
; 952  :             (L" UCD_Deinit: ERROR - Invalid handle 0x%08x\r\n",
; 953  :             hDeviceContext));

  01ba8	e59f3240	 ldr         r3, [pc, #0x240]
  01bac	e5933440	 ldr         r3, [r3, #0x440]
  01bb0	e3130001	 tst         r3, #1
  01bb4	0a000005	 beq         |$LN13@UCD_Deinit|
  01bb8	e59d1024	 ldr         r1, [sp, #0x24]
  01bbc	e59f023c	 ldr         r0, [pc, #0x23C]
  01bc0	eb000000	 bl          NKDbgPrintfW
  01bc4	e3a03001	 mov         r3, #1
  01bc8	e58d3008	 str         r3, [sp, #8]
  01bcc	ea000001	 b           |$LN14@UCD_Deinit|
  01bd0		 |$LN13@UCD_Deinit|
  01bd0	e3a03000	 mov         r3, #0
  01bd4	e58d3008	 str         r3, [sp, #8]
  01bd8		 |$LN14@UCD_Deinit|

; 954  :         goto done;

  01bd8	ea000058	 b           |$done$45971|
  01bdc		 |$LN8@UCD_Deinit|

; 955  :     }
; 956  : 
; 957  :     Lock();

  01bdc	eb000000	 bl          Lock
  01be0		 |$LN7@UCD_Deinit|

; 958  : 
; 959  :     // Ensure that any registered modules are deregistered
; 960  :     while (g_Dc.nNextUsbModule)

  01be0	e59f320c	 ldr         r3, [pc, #0x20C]
  01be4	e5933048	 ldr         r3, [r3, #0x48]
  01be8	e3530000	 cmp         r3, #0
  01bec	0a00000d	 beq         |$LN6@UCD_Deinit|

; 961  :         USBCDMA_DeregisterUsbModule((HANDLE)&g_Dc.usb[--g_Dc.nNextUsbModule]);

  01bf0	e59f31fc	 ldr         r3, [pc, #0x1FC]
  01bf4	e5933048	 ldr         r3, [r3, #0x48]
  01bf8	e2432001	 sub         r2, r3, #1
  01bfc	e59f31f0	 ldr         r3, [pc, #0x1F0]
  01c00	e5832048	 str         r2, [r3, #0x48]
  01c04	e59f31e8	 ldr         r3, [pc, #0x1E8]
  01c08	e5931048	 ldr         r1, [r3, #0x48]
  01c0c	e3a03030	 mov         r3, #0x30
  01c10	e0020391	 mul         r2, r1, r3
  01c14	e59f31d8	 ldr         r3, [pc, #0x1D8]
  01c18	e2833050	 add         r3, r3, #0x50
  01c1c	e0830002	 add         r0, r3, r2
  01c20	eb000000	 bl          USBCDMA_DeregisterUsbModule
  01c24	eaffffed	 b           |$LN7@UCD_Deinit|
  01c28		 |$LN6@UCD_Deinit|

; 962  : 
; 963  :     g_Dc.fIntrThreadClosing = TRUE;

  01c28	e59f21c4	 ldr         r2, [pc, #0x1C4]
  01c2c	e3a03001	 mov         r3, #1
  01c30	e5823028	 str         r3, [r2, #0x28]

; 964  : 
; 965  :     if (g_Dc.hIntrEvent) {

  01c34	e59f31b8	 ldr         r3, [pc, #0x1B8]
  01c38	e593301c	 ldr         r3, [r3, #0x1C]
  01c3c	e3530000	 cmp         r3, #0
  01c40	0a00002a	 beq         |$LN5@UCD_Deinit|

; 966  :         SetEvent(g_Dc.hIntrEvent);

  01c44	e59f31a8	 ldr         r3, [pc, #0x1A8]
  01c48	e593001c	 ldr         r0, [r3, #0x1C]
  01c4c	eb000000	 bl          SetEvent

; 967  :         if (g_Dc.hIntrThread) {

  01c50	e59f319c	 ldr         r3, [pc, #0x19C]
  01c54	e5933020	 ldr         r3, [r3, #0x20]
  01c58	e3530000	 cmp         r3, #0
  01c5c	0a000019	 beq         |$LN4@UCD_Deinit|

; 968  :             if (WaitForSingleObject(g_Dc.hIntrThread, 5000) != WAIT_OBJECT_0 ) {

  01c60	e3a01c13	 mov         r1, #0x13, 24
  01c64	e3811088	 orr         r1, r1, #0x88
  01c68	e59f3184	 ldr         r3, [pc, #0x184]
  01c6c	e5930020	 ldr         r0, [r3, #0x20]
  01c70	eb000000	 bl          WaitForSingleObject
  01c74	e58d000c	 str         r0, [sp, #0xC]
  01c78	e59d300c	 ldr         r3, [sp, #0xC]
  01c7c	e3530000	 cmp         r3, #0
  01c80	0a00000a	 beq         |$LN3@UCD_Deinit|

; 969  :                 DEBUGCHK(0);

  01c84	e3a03c03	 mov         r3, #3, 24
  01c88	e38330c9	 orr         r3, r3, #0xC9
  01c8c	e59f2168	 ldr         r2, [pc, #0x168]
  01c90	e59f1158	 ldr         r1, [pc, #0x158]
  01c94	e59f015c	 ldr         r0, [pc, #0x15C]
  01c98	eb000000	 bl          NKDbgPrintfW
  01c9c	e6000010	 __debugbreak_ce

; 970  : #pragma warning(push)
; 971  : #pragma warning(disable:6258)
; 972  :                 TerminateThread(g_Dc.hIntrThread, (DWORD)-1);

  01ca0	e3e01000	 mvn         r1, #0
  01ca4	e59f3148	 ldr         r3, [pc, #0x148]
  01ca8	e5930020	 ldr         r0, [r3, #0x20]
  01cac	eb000000	 bl          TerminateThread
  01cb0		 |$LN3@UCD_Deinit|

; 973  : #pragma warning(pop)
; 974  :             }
; 975  :             CloseHandle(g_Dc.hIntrThread);

  01cb0	e59f313c	 ldr         r3, [pc, #0x13C]
  01cb4	e5930020	 ldr         r0, [r3, #0x20]
  01cb8	eb000000	 bl          CloseHandle

; 976  :             g_Dc.hIntrThread = NULL;

  01cbc	e59f2130	 ldr         r2, [pc, #0x130]
  01cc0	e3a03000	 mov         r3, #0
  01cc4	e5823020	 str         r3, [r2, #0x20]
  01cc8		 |$LN4@UCD_Deinit|

; 977  :         }
; 978  :         InterruptDisable(g_Dc.dwSysIntr);

  01cc8	e59f3124	 ldr         r3, [pc, #0x124]
  01ccc	e5930018	 ldr         r0, [r3, #0x18]
  01cd0	eb000000	 bl          InterruptDisable

; 979  :         CloseHandle(g_Dc.hIntrEvent);

  01cd4	e59f3118	 ldr         r3, [pc, #0x118]
  01cd8	e593001c	 ldr         r0, [r3, #0x1C]
  01cdc	eb000000	 bl          CloseHandle

; 980  :         g_Dc.hIntrEvent = NULL;

  01ce0	e59f210c	 ldr         r2, [pc, #0x10C]
  01ce4	e3a03000	 mov         r3, #0
  01ce8	e582301c	 str         r3, [r2, #0x1C]

; 981  :     }
; 982  :     else

  01cec	ea000002	 b           |$LN2@UCD_Deinit|
  01cf0		 |$LN5@UCD_Deinit|

; 983  :         InterruptDisable(g_Dc.dwSysIntr);

  01cf0	e59f30fc	 ldr         r3, [pc, #0xFC]
  01cf4	e5930018	 ldr         r0, [r3, #0x18]
  01cf8	eb000000	 bl          InterruptDisable
  01cfc		 |$LN2@UCD_Deinit|

; 984  : 
; 985  :     if (g_Dc.pCppiRegs) 

  01cfc	e59f30f0	 ldr         r3, [pc, #0xF0]
  01d00	e593302c	 ldr         r3, [r3, #0x2C]
  01d04	e3530000	 cmp         r3, #0
  01d08	0a000006	 beq         |$LN1@UCD_Deinit|

; 986  : 	{
; 987  :         MmUnmapIoSpace(g_Dc.pCppiRegs, sizeof(CppiRegs));

  01d0c	e3a01c5e	 mov         r1, #0x5E, 24
  01d10	e59f30dc	 ldr         r3, [pc, #0xDC]
  01d14	e593002c	 ldr         r0, [r3, #0x2C]
  01d18	eb000000	 bl          MmUnmapIoSpace

; 988  :         g_Dc.pCppiRegs = NULL;

  01d1c	e59f20d0	 ldr         r2, [pc, #0xD0]
  01d20	e3a03000	 mov         r3, #0
  01d24	e582302c	 str         r3, [r2, #0x2C]
  01d28		 |$LN1@UCD_Deinit|

; 989  :     }
; 990  : 
; 991  :     g_hDc = 0;

  01d28	e59f20b0	 ldr         r2, [pc, #0xB0]
  01d2c	e3a03000	 mov         r3, #0
  01d30	e5823000	 str         r3, [r2]

; 992  : 
; 993  :     Unlock();

  01d34	eb000000	 bl          Unlock

; 994  : 
; 995  :     DeleteCriticalSection(&g_Dc.csLock);

  01d38	e59f00b4	 ldr         r0, [pc, #0xB4]
  01d3c	eb000000	 bl          DeleteCriticalSection
  01d40		 |$done$45971|

; 996  : 
; 997  : done:
; 998  :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 999  :         (L"-UCD_Deinit: %s\r\n",
; 1000 :         (g_hDc == 0) ?
; 1001 :             L"SUCCEEDED" :
; 1002 :             L"FAILED"));

  01d40	e59f30a8	 ldr         r3, [pc, #0xA8]
  01d44	e5933440	 ldr         r3, [r3, #0x440]
  01d48	e3130020	 tst         r3, #0x20
  01d4c	1a000006	 bne         |$LN15@UCD_Deinit|
  01d50	e59f3098	 ldr         r3, [pc, #0x98]
  01d54	e5933440	 ldr         r3, [r3, #0x440]
  01d58	e3130008	 tst         r3, #8
  01d5c	1a000002	 bne         |$LN15@UCD_Deinit|
  01d60	e3a03000	 mov         r3, #0
  01d64	e58d3010	 str         r3, [sp, #0x10]
  01d68	ea00000d	 b           |$LN18@UCD_Deinit|
  01d6c		 |$LN15@UCD_Deinit|
  01d6c	e59f306c	 ldr         r3, [pc, #0x6C]
  01d70	e5933000	 ldr         r3, [r3]
  01d74	e3530000	 cmp         r3, #0
  01d78	1a000002	 bne         |$LN16@UCD_Deinit|
  01d7c	e59f3068	 ldr         r3, [pc, #0x68]
  01d80	e58d3014	 str         r3, [sp, #0x14]
  01d84	ea000001	 b           |$LN17@UCD_Deinit|
  01d88		 |$LN16@UCD_Deinit|
  01d88	e59f3058	 ldr         r3, [pc, #0x58]
  01d8c	e58d3014	 str         r3, [sp, #0x14]
  01d90		 |$LN17@UCD_Deinit|
  01d90	e59d1014	 ldr         r1, [sp, #0x14]
  01d94	e59f0048	 ldr         r0, [pc, #0x48]
  01d98	eb000000	 bl          NKDbgPrintfW
  01d9c	e3a03001	 mov         r3, #1
  01da0	e58d3010	 str         r3, [sp, #0x10]
  01da4		 |$LN18@UCD_Deinit|

; 1003 : 
; 1004 :     return (g_hDc == 0);

  01da4	e59f3034	 ldr         r3, [pc, #0x34]
  01da8	e5933000	 ldr         r3, [r3]
  01dac	e3530000	 cmp         r3, #0
  01db0	1a000002	 bne         |$LN19@UCD_Deinit|
  01db4	e3a03001	 mov         r3, #1
  01db8	e58d3018	 str         r3, [sp, #0x18]
  01dbc	ea000001	 b           |$LN20@UCD_Deinit|
  01dc0		 |$LN19@UCD_Deinit|
  01dc0	e3a03000	 mov         r3, #0
  01dc4	e58d3018	 str         r3, [sp, #0x18]
  01dc8		 |$LN20@UCD_Deinit|
  01dc8	e59d3018	 ldr         r3, [sp, #0x18]
  01dcc	e58d3000	 str         r3, [sp]

; 1005 : }

  01dd0	e59d0000	 ldr         r0, [sp]
  01dd4	e28dd01c	 add         sp, sp, #0x1C
  01dd8	e89d6000	 ldmia       sp, {sp, lr}
  01ddc	e12fff1e	 bx          lr
  01de0		 |$LN24@UCD_Deinit|
  01de0		 |$LN25@UCD_Deinit|
  01de0	00000000	 DCD         |g_hDc|
  01de4		 |$LN26@UCD_Deinit|
  01de4	00000000	 DCD         |??_C@_1CE@FHIHBNDK@?$AA?9?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01de8		 |$LN27@UCD_Deinit|
  01de8	00000000	 DCD         |??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$AA@|
  01dec		 |$LN28@UCD_Deinit|
  01dec	00000000	 DCD         |??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@|
  01df0		 |$LN29@UCD_Deinit|
  01df0	00000000	 DCD         |dpCurSettings|
  01df4		 |$LN30@UCD_Deinit|
  01df4	00000000	 DCD         |g_Dc|
  01df8		 |$LN31@UCD_Deinit|
  01df8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01dfc		 |$LN32@UCD_Deinit|
  01dfc	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01e00		 |$LN33@UCD_Deinit|
  01e00	00000000	 DCD         |??_C@_1FK@MELOCDOC@?$AA?5?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAh?$AAa?$AAn@|
  01e04		 |$LN34@UCD_Deinit|
  01e04	00000000	 DCD         |??_C@_1BM@GDNCCLMB@?$AA?$CL?$AAU?$AAC?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  01e08		 |$M46435|

			 ENDP  ; |UCD_Deinit|

	EXPORT	|??_C@_1CM@CGOECBLE@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@NNEAEAFG@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAI?$AAS?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@LIKDGHHN@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAI?$AAS?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@NKBELAPI@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00088			 AREA	 |.pdata|, PDATA
|$T46462| DCD	|$LN21@IntrThread|
	DCD	0x40008404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@CGOECBLE@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@NNEAEAFG@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAI?$AAS?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "S"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@LIKDGHHN@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAI?$AAS?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "I", 0x0, "S"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@NKBELAPI@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "U", 0x0, "S", 0x0, "B", 0x0, "C", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01e08			 AREA	 |.text|, CODE, ARM

  01e08		 |IntrThread| PROC

; 1008 : {

  01e08		 |$LN21@IntrThread|
  01e08	e1a0c00d	 mov         r12, sp
  01e0c	e92d0001	 stmdb       sp!, {r0}
  01e10	e92d5000	 stmdb       sp!, {r12, lr}
  01e14	e24dd014	 sub         sp, sp, #0x14
  01e18		 |$M46459|

; 1009 : 	UNREFERENCED_PARAMETER(lpParameter);
; 1010 : 
; 1011 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 1012 :         (L"+USBCDMA: IntrThread\n"));

  01e18	e59f31e4	 ldr         r3, [pc, #0x1E4]
  01e1c	e5933440	 ldr         r3, [r3, #0x440]
  01e20	e3130020	 tst         r3, #0x20
  01e24	1a000006	 bne         |$LN11@IntrThread|
  01e28	e59f31d4	 ldr         r3, [pc, #0x1D4]
  01e2c	e5933440	 ldr         r3, [r3, #0x440]
  01e30	e3130008	 tst         r3, #8
  01e34	1a000002	 bne         |$LN11@IntrThread|
  01e38	e3a03000	 mov         r3, #0
  01e3c	e58d3004	 str         r3, [sp, #4]
  01e40	ea000003	 b           |$LN12@IntrThread|
  01e44		 |$LN11@IntrThread|
  01e44	e59f01c8	 ldr         r0, [pc, #0x1C8]
  01e48	eb000000	 bl          NKDbgPrintfW
  01e4c	e3a03001	 mov         r3, #1
  01e50	e58d3004	 str         r3, [sp, #4]
  01e54		 |$LN12@IntrThread|
  01e54		 |$LN8@IntrThread|

; 1013 : 
; 1014 :     while (!g_Dc.fIntrThreadClosing)

  01e54	e59f31b0	 ldr         r3, [pc, #0x1B0]
  01e58	e5933028	 ldr         r3, [r3, #0x28]
  01e5c	e3530000	 cmp         r3, #0
  01e60	1a000051	 bne         |$LN7@IntrThread|

; 1015 :     {
; 1016 :         WaitForSingleObject(g_Dc.hIntrEvent, INFINITE);

  01e64	e3e01000	 mvn         r1, #0
  01e68	e59f319c	 ldr         r3, [pc, #0x19C]
  01e6c	e593001c	 ldr         r0, [r3, #0x1C]
  01e70	eb000000	 bl          WaitForSingleObject

; 1017 : 
; 1018 :         DEBUGMSG(ZONE_IST && ZONE_VERBOSE,
; 1019 :             (L"+USBCDMA: IntrThread - ISR\r\n"));

  01e74	e59f3188	 ldr         r3, [pc, #0x188]
  01e78	e5933440	 ldr         r3, [r3, #0x440]
  01e7c	e3130040	 tst         r3, #0x40
  01e80	0a000008	 beq         |$LN13@IntrThread|
  01e84	e59f3178	 ldr         r3, [pc, #0x178]
  01e88	e5933440	 ldr         r3, [r3, #0x440]
  01e8c	e3130008	 tst         r3, #8
  01e90	0a000004	 beq         |$LN13@IntrThread|
  01e94	e59f0174	 ldr         r0, [pc, #0x174]
  01e98	eb000000	 bl          NKDbgPrintfW
  01e9c	e3a03001	 mov         r3, #1
  01ea0	e58d3008	 str         r3, [sp, #8]
  01ea4	ea000001	 b           |$LN14@IntrThread|
  01ea8		 |$LN13@IntrThread|
  01ea8	e3a03000	 mov         r3, #0
  01eac	e58d3008	 str         r3, [sp, #8]
  01eb0		 |$LN14@IntrThread|

; 1020 : 
; 1021 :         if (g_Dc.fIntrThreadClosing)

  01eb0	e59f3154	 ldr         r3, [pc, #0x154]
  01eb4	e5933028	 ldr         r3, [r3, #0x28]
  01eb8	e3530000	 cmp         r3, #0
  01ebc	0a000000	 beq         |$LN6@IntrThread|

; 1022 : 		{
; 1023 :             break;

  01ec0	ea000039	 b           |$LN7@IntrThread|
  01ec4		 |$LN6@IntrThread|
  01ec4		 |$LN5@IntrThread|

; 1024 : 		}
; 1025 : 
; 1026 : 		while (((g_Dc.pCppiRegs->PEND1) & USB_CPPI_PEND1_QMSK_HOST) ||
; 1027 : 			   ((g_Dc.pCppiRegs->PEND2) & USB_CPPI_PEND2_QMSK_HOST) ||
; 1028 : 			   ((g_Dc.pCppiRegs->PEND2) & USB_CPPI_PEND2_QMSK_FN)	)

  01ec4	e59f3140	 ldr         r3, [pc, #0x140]
  01ec8	e593302c	 ldr         r3, [r3, #0x2C]
  01ecc	e2833a03	 add         r3, r3, #3, 20
  01ed0	e2833094	 add         r3, r3, #0x94
  01ed4	e5933000	 ldr         r3, [r3]
  01ed8	e3130102	 tst         r3, #2, 2
  01edc	1a00000d	 bne         |$LN3@IntrThread|
  01ee0	e59f3124	 ldr         r3, [pc, #0x124]
  01ee4	e593302c	 ldr         r3, [r3, #0x2C]
  01ee8	e2833a03	 add         r3, r3, #3, 20
  01eec	e2833098	 add         r3, r3, #0x98
  01ef0	e5933000	 ldr         r3, [r3]
  01ef4	e3130012	 tst         r3, #0x12
  01ef8	1a000006	 bne         |$LN3@IntrThread|
  01efc	e59f3108	 ldr         r3, [pc, #0x108]
  01f00	e593302c	 ldr         r3, [r3, #0x2C]
  01f04	e2833a03	 add         r3, r3, #3, 20
  01f08	e2833098	 add         r3, r3, #0x98
  01f0c	e5933000	 ldr         r3, [r3]
  01f10	e3130015	 tst         r3, #0x15
  01f14	0a000014	 beq         |$LN4@IntrThread|
  01f18		 |$LN3@IntrThread|

; 1029 :         {
; 1030 :             if (g_Dc.usb[0].callback)

  01f18	e59f30ec	 ldr         r3, [pc, #0xEC]
  01f1c	e5933074	 ldr         r3, [r3, #0x74]
  01f20	e3530000	 cmp         r3, #0
  01f24	0a000005	 beq         |$LN2@IntrThread|

; 1031 : 			{
; 1032 :                 g_Dc.usb[0].callback(g_Dc.usb[0].param);

  01f28	e59f30dc	 ldr         r3, [pc, #0xDC]
  01f2c	e5930078	 ldr         r0, [r3, #0x78]
  01f30	e59f30d4	 ldr         r3, [pc, #0xD4]
  01f34	e5933074	 ldr         r3, [r3, #0x74]
  01f38	e1a0e00f	 mov         lr, pc
  01f3c	e12fff13	 bx          r3
  01f40		 |$LN2@IntrThread|

; 1033 : 			}
; 1034 : 
; 1035 :             if (g_Dc.usb[1].callback)

  01f40	e59f30c4	 ldr         r3, [pc, #0xC4]
  01f44	e59330a4	 ldr         r3, [r3, #0xA4]
  01f48	e3530000	 cmp         r3, #0
  01f4c	0a000005	 beq         |$LN1@IntrThread|

; 1036 : 			{
; 1037 :                 g_Dc.usb[1].callback(g_Dc.usb[1].param);

  01f50	e59f30b4	 ldr         r3, [pc, #0xB4]
  01f54	e59300a8	 ldr         r0, [r3, #0xA8]
  01f58	e59f30ac	 ldr         r3, [pc, #0xAC]
  01f5c	e59330a4	 ldr         r3, [r3, #0xA4]
  01f60	e1a0e00f	 mov         lr, pc
  01f64	e12fff13	 bx          r3
  01f68		 |$LN1@IntrThread|

; 1038 : 			}
; 1039 :         }

  01f68	eaffffd5	 b           |$LN5@IntrThread|
  01f6c		 |$LN4@IntrThread|

; 1040 : 
; 1041 :         // In AM3517, this thread is not directly
; 1042 :         // handling interrupts.
; 1043 : #if 0
; 1044 :         InterruptDone(g_Dc.dwSysIntr);
; 1045 : #endif
; 1046 : 
; 1047 :         DEBUGMSG(ZONE_IST && ZONE_VERBOSE,
; 1048 :             (L"-USBCDMA: IntrThread - ISR\r\n"));

  01f6c	e59f3090	 ldr         r3, [pc, #0x90]
  01f70	e5933440	 ldr         r3, [r3, #0x440]
  01f74	e3130040	 tst         r3, #0x40
  01f78	0a000008	 beq         |$LN15@IntrThread|
  01f7c	e59f3080	 ldr         r3, [pc, #0x80]
  01f80	e5933440	 ldr         r3, [r3, #0x440]
  01f84	e3130008	 tst         r3, #8
  01f88	0a000004	 beq         |$LN15@IntrThread|
  01f8c	e59f0074	 ldr         r0, [pc, #0x74]
  01f90	eb000000	 bl          NKDbgPrintfW
  01f94	e3a03001	 mov         r3, #1
  01f98	e58d300c	 str         r3, [sp, #0xC]
  01f9c	ea000001	 b           |$LN16@IntrThread|
  01fa0		 |$LN15@IntrThread|
  01fa0	e3a03000	 mov         r3, #0
  01fa4	e58d300c	 str         r3, [sp, #0xC]
  01fa8		 |$LN16@IntrThread|

; 1049 :     }

  01fa8	eaffffa9	 b           |$LN8@IntrThread|
  01fac		 |$LN7@IntrThread|

; 1050 : 
; 1051 :     DEBUGMSG(ZONE_INIT || ZONE_VERBOSE,
; 1052 :         (L"-USBCDMA: IntrThread\n"));

  01fac	e59f3050	 ldr         r3, [pc, #0x50]
  01fb0	e5933440	 ldr         r3, [r3, #0x440]
  01fb4	e3130020	 tst         r3, #0x20
  01fb8	1a000006	 bne         |$LN17@IntrThread|
  01fbc	e59f3040	 ldr         r3, [pc, #0x40]
  01fc0	e5933440	 ldr         r3, [r3, #0x440]
  01fc4	e3130008	 tst         r3, #8
  01fc8	1a000002	 bne         |$LN17@IntrThread|
  01fcc	e3a03000	 mov         r3, #0
  01fd0	e58d3010	 str         r3, [sp, #0x10]
  01fd4	ea000003	 b           |$LN18@IntrThread|
  01fd8		 |$LN17@IntrThread|
  01fd8	e59f0020	 ldr         r0, [pc, #0x20]
  01fdc	eb000000	 bl          NKDbgPrintfW
  01fe0	e3a03001	 mov         r3, #1
  01fe4	e58d3010	 str         r3, [sp, #0x10]
  01fe8		 |$LN18@IntrThread|

; 1053 : 
; 1054 :     return 0;

  01fe8	e3a03000	 mov         r3, #0
  01fec	e58d3000	 str         r3, [sp]

; 1055 : }

  01ff0	e59d0000	 ldr         r0, [sp]
  01ff4	e28dd014	 add         sp, sp, #0x14
  01ff8	e89d6000	 ldmia       sp, {sp, lr}
  01ffc	e12fff1e	 bx          lr
  02000		 |$LN22@IntrThread|
  02000		 |$LN23@IntrThread|
  02000	00000000	 DCD         |??_C@_1CM@CGOECBLE@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@|
  02004		 |$LN24@IntrThread|
  02004	00000000	 DCD         |dpCurSettings|
  02008		 |$LN25@IntrThread|
  02008	00000000	 DCD         |??_C@_1DK@NNEAEAFG@?$AA?9?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAI?$AAS?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  0200c		 |$LN26@IntrThread|
  0200c	00000000	 DCD         |g_Dc|
  02010		 |$LN27@IntrThread|
  02010	00000000	 DCD         |??_C@_1DK@LIKDGHHN@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?9?$AA?5?$AAI?$AAS?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  02014		 |$LN28@IntrThread|
  02014	00000000	 DCD         |??_C@_1CM@NKBELAPI@?$AA?$CL?$AAU?$AAS?$AAB?$AAC?$AAD?$AAM?$AAA?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?6?$AA?$AA@|
  02018		 |$M46460|

			 ENDP  ; |IntrThread|

	IMPORT	|EnterCriticalSection|

  00090			 AREA	 |.pdata|, PDATA
|$T46474| DCD	|$LN5@Lock|
	DCD	0x40000601
; Function compile flags: /Odtp

  02018			 AREA	 |.text|, CODE, ARM

  02018		 |Lock|	 PROC

; 1058 : {

  02018		 |$LN5@Lock|
  02018	e52de004	 str         lr, [sp, #-4]!
  0201c		 |$M46471|

; 1059 :     EnterCriticalSection(&g_Dc.csLock);

  0201c	e59f0008	 ldr         r0, [pc, #8]
  02020	eb000000	 bl          EnterCriticalSection

; 1060 : }

  02024	e49de004	 ldr         lr, [sp], #4
  02028	e12fff1e	 bx          lr
  0202c		 |$LN6@Lock|
  0202c		 |$LN7@Lock|
  0202c	00000000	 DCD         |g_Dc|
  02030		 |$M46472|

			 ENDP  ; |Lock|

	IMPORT	|LeaveCriticalSection|

  00098			 AREA	 |.pdata|, PDATA
|$T46481| DCD	|$LN5@Unlock|
	DCD	0x40000601
; Function compile flags: /Odtp

  02030			 AREA	 |.text|, CODE, ARM

  02030		 |Unlock| PROC

; 1063 : {

  02030		 |$LN5@Unlock|
  02030	e52de004	 str         lr, [sp, #-4]!
  02034		 |$M46478|

; 1064 :     LeaveCriticalSection(&g_Dc.csLock);

  02034	e59f0008	 ldr         r0, [pc, #8]
  02038	eb000000	 bl          LeaveCriticalSection

; 1065 : }

  0203c	e49de004	 ldr         lr, [sp], #4
  02040	e12fff1e	 bx          lr
  02044		 |$LN6@Unlock|
  02044		 |$LN7@Unlock|
  02044	00000000	 DCD         |g_Dc|
  02048		 |$M46479|

			 ENDP  ; |Unlock|

	EXPORT	|??_C@_1CE@KOLBPKLG@?$AA?9?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@MFEOKLLN@?$AAF?$AAA?$AAL?$AAI?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@PKAFGKEL@?$AAT?$AAD?$AA?5?$AA?$CF?$AA0?$AA4?$AAu?$AA?3?$AA?5?$AAP?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAV?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@KIAOOALK@?$AA?$CL?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAD?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000a0			 AREA	 |.pdata|, PDATA
|$T46499| DCD	|$LN19@TdPoolInit|
	DCD	0x40007902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@KOLBPKLG@?$AA?9?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "d", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@MFEOKLLN@?$AAF?$AAA?$AAL?$AAI?$AAE?$AAD?$AA?$AA@| DCB "F", 0x0, "A"
	DCB	0x0, "L", 0x0, "I", 0x0, "E", 0x0, "D", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@PKAFGKEL@?$AAT?$AAD?$AA?5?$AA?$CF?$AA0?$AA4?$AAu?$AA?3?$AA?5?$AAP?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAV?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "T"
	DCB	0x0, "D", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "u"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, " ", 0x0, "V", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@KIAOOALK@?$AA?$CL?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAD?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "T", 0x0, "d", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "T", 0x0, "D", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  02048			 AREA	 |.text|, CODE, ARM

  02048		 |TdPoolInit| PROC

; 1068 : {

  02048		 |$LN19@TdPoolInit|
  02048	e52de004	 str         lr, [sp, #-4]!
  0204c	e24dd024	 sub         sp, sp, #0x24
  02050		 |$M46496|

; 1069 :     /* Only initialise once */
; 1070 :     if (g_Dc.fTdPoolInitialised)

  02050	e59f31b0	 ldr         r3, [pc, #0x1B0]
  02054	e5933044	 ldr         r3, [r3, #0x44]
  02058	e3530000	 cmp         r3, #0
  0205c	0a000002	 beq         |$LN4@TdPoolInit|

; 1071 :         return TRUE;

  02060	e3a03001	 mov         r3, #1
  02064	e58d3008	 str         r3, [sp, #8]
  02068	ea000062	 b           |$LN5@TdPoolInit|
  0206c		 |$LN4@TdPoolInit|

; 1072 : 
; 1073 :     DEBUGMSG(ZONE_INIT,
; 1074 :         (L"+TdPoolInit: %u TDs\r\n",
; 1075 :         USB_CPPI_TD_COUNT));

  0206c	e59f31a4	 ldr         r3, [pc, #0x1A4]
  02070	e5933440	 ldr         r3, [r3, #0x440]
  02074	e3130020	 tst         r3, #0x20
  02078	0a000005	 beq         |$LN7@TdPoolInit|
  0207c	e3a01020	 mov         r1, #0x20
  02080	e59f01a0	 ldr         r0, [pc, #0x1A0]
  02084	eb000000	 bl          NKDbgPrintfW
  02088	e3a03001	 mov         r3, #1
  0208c	e58d300c	 str         r3, [sp, #0xC]
  02090	ea000001	 b           |$LN8@TdPoolInit|
  02094		 |$LN7@TdPoolInit|
  02094	e3a03000	 mov         r3, #0
  02098	e58d300c	 str         r3, [sp, #0xC]
  0209c		 |$LN8@TdPoolInit|

; 1076 : 
; 1077 :     Lock();

  0209c	eb000000	 bl          Lock

; 1078 :     DEBUGCHK(g_Dc.pvTdPool != NULL);

  020a0	e59f3160	 ldr         r3, [pc, #0x160]
  020a4	e5933030	 ldr         r3, [r3, #0x30]
  020a8	e3530000	 cmp         r3, #0
  020ac	0a000002	 beq         |$LN9@TdPoolInit|
  020b0	e3a03001	 mov         r3, #1
  020b4	e58d3010	 str         r3, [sp, #0x10]
  020b8	ea000008	 b           |$LN10@TdPoolInit|
  020bc		 |$LN9@TdPoolInit|
  020bc	e3a03b01	 mov         r3, #1, 22
  020c0	e3833036	 orr         r3, r3, #0x36
  020c4	e59f2158	 ldr         r2, [pc, #0x158]
  020c8	e59f1148	 ldr         r1, [pc, #0x148]
  020cc	e59f014c	 ldr         r0, [pc, #0x14C]
  020d0	eb000000	 bl          NKDbgPrintfW
  020d4	e6000010	 __debugbreak_ce
  020d8	e3a03000	 mov         r3, #0
  020dc	e58d3010	 str         r3, [sp, #0x10]
  020e0		 |$LN10@TdPoolInit|

; 1079 :     {
; 1080 :     unsigned n;
; 1081 :     TEARDOWN_DESCRIPTOR* pTd = g_Dc.pvTdPool;

  020e0	e59f3120	 ldr         r3, [pc, #0x120]
  020e4	e5933030	 ldr         r3, [r3, #0x30]
  020e8	e58d3004	 str         r3, [sp, #4]

; 1082 :     for (n = 0; n < USB_CPPI_TD_COUNT; n++, pTd++) {

  020ec	e3a03000	 mov         r3, #0
  020f0	e58d3000	 str         r3, [sp]
  020f4	ea000005	 b           |$LN3@TdPoolInit|
  020f8		 |$LN2@TdPoolInit|
  020f8	e59d3000	 ldr         r3, [sp]
  020fc	e2833001	 add         r3, r3, #1
  02100	e58d3000	 str         r3, [sp]
  02104	e59d3004	 ldr         r3, [sp, #4]
  02108	e2833020	 add         r3, r3, #0x20
  0210c	e58d3004	 str         r3, [sp, #4]
  02110		 |$LN3@TdPoolInit|
  02110	e59d3000	 ldr         r3, [sp]
  02114	e3530020	 cmp         r3, #0x20
  02118	2a00001a	 bcs         |$LN1@TdPoolInit|

; 1083 :         pTd->DescInfo = (UINT32)(USB_CPPI41_DESC_TYPE_TEARDOWN << USB_CPPI41_DESC_TYPE_SHIFT);

  0211c	e59d2004	 ldr         r2, [sp, #4]
  02120	e3a03326	 mov         r3, #0x26, 6
  02124	e5823000	 str         r3, [r2]

; 1084 : 
; 1085 :         DEBUGMSG(ZONE_INIT && ZONE_VERBOSE,
; 1086 :             (L"TD %04u: PAddr 0x%08x VAddr 0x%08x\r\n",
; 1087 :             n,
; 1088 :             USBCDMA_DescriptorVAtoPA((HANDLE)&g_Dc.usb[0], pTd),
; 1089 :             pTd));

  02128	e59f30e8	 ldr         r3, [pc, #0xE8]
  0212c	e5933440	 ldr         r3, [r3, #0x440]
  02130	e3130020	 tst         r3, #0x20
  02134	0a000010	 beq         |$LN11@TdPoolInit|
  02138	e59f30d8	 ldr         r3, [pc, #0xD8]
  0213c	e5933440	 ldr         r3, [r3, #0x440]
  02140	e3130008	 tst         r3, #8
  02144	0a00000c	 beq         |$LN11@TdPoolInit|
  02148	e59d1004	 ldr         r1, [sp, #4]
  0214c	e59f30b4	 ldr         r3, [pc, #0xB4]
  02150	e2830050	 add         r0, r3, #0x50
  02154	eb000000	 bl          USBCDMA_DescriptorVAtoPA
  02158	e58d0014	 str         r0, [sp, #0x14]
  0215c	e59d3004	 ldr         r3, [sp, #4]
  02160	e59d2014	 ldr         r2, [sp, #0x14]
  02164	e59d1000	 ldr         r1, [sp]
  02168	e59f00ac	 ldr         r0, [pc, #0xAC]
  0216c	eb000000	 bl          NKDbgPrintfW
  02170	e3a03001	 mov         r3, #1
  02174	e58d3018	 str         r3, [sp, #0x18]
  02178	ea000001	 b           |$LN12@TdPoolInit|
  0217c		 |$LN11@TdPoolInit|
  0217c	e3a03000	 mov         r3, #0
  02180	e58d3018	 str         r3, [sp, #0x18]
  02184		 |$LN12@TdPoolInit|

; 1090 :     }

  02184	eaffffdb	 b           |$LN2@TdPoolInit|
  02188		 |$LN1@TdPoolInit|

; 1091 :     }
; 1092 :     g_Dc.fTdPoolInitialised = TRUE;

  02188	e59f2078	 ldr         r2, [pc, #0x78]
  0218c	e3a03001	 mov         r3, #1
  02190	e5823044	 str         r3, [r2, #0x44]

; 1093 :     Unlock();

  02194	eb000000	 bl          Unlock

; 1094 : 
; 1095 :     DEBUGMSG(ZONE_INIT,
; 1096 :         (L"-TdPoolInit: %s\r\n",
; 1097 :         g_Dc.fTdPoolInitialised ?
; 1098 :             L"SUCCEEDED" :
; 1099 :             L"FALIED"));

  02198	e59f3078	 ldr         r3, [pc, #0x78]
  0219c	e5933440	 ldr         r3, [r3, #0x440]
  021a0	e3130020	 tst         r3, #0x20
  021a4	0a00000e	 beq         |$LN15@TdPoolInit|
  021a8	e59f3058	 ldr         r3, [pc, #0x58]
  021ac	e5933044	 ldr         r3, [r3, #0x44]
  021b0	e3530000	 cmp         r3, #0
  021b4	0a000002	 beq         |$LN13@TdPoolInit|
  021b8	e59f3054	 ldr         r3, [pc, #0x54]
  021bc	e58d301c	 str         r3, [sp, #0x1C]
  021c0	ea000001	 b           |$LN14@TdPoolInit|
  021c4		 |$LN13@TdPoolInit|
  021c4	e59f3044	 ldr         r3, [pc, #0x44]
  021c8	e58d301c	 str         r3, [sp, #0x1C]
  021cc		 |$LN14@TdPoolInit|
  021cc	e59d101c	 ldr         r1, [sp, #0x1C]
  021d0	e59f0034	 ldr         r0, [pc, #0x34]
  021d4	eb000000	 bl          NKDbgPrintfW
  021d8	e3a03001	 mov         r3, #1
  021dc	e58d3020	 str         r3, [sp, #0x20]
  021e0	ea000001	 b           |$LN16@TdPoolInit|
  021e4		 |$LN15@TdPoolInit|
  021e4	e3a03000	 mov         r3, #0
  021e8	e58d3020	 str         r3, [sp, #0x20]
  021ec		 |$LN16@TdPoolInit|

; 1100 : 
; 1101 :     return g_Dc.fTdPoolInitialised;

  021ec	e59f3014	 ldr         r3, [pc, #0x14]
  021f0	e5933044	 ldr         r3, [r3, #0x44]
  021f4	e58d3008	 str         r3, [sp, #8]
  021f8		 |$LN5@TdPoolInit|

; 1102 : }

  021f8	e59d0008	 ldr         r0, [sp, #8]
  021fc	e28dd024	 add         sp, sp, #0x24
  02200	e49de004	 ldr         lr, [sp], #4
  02204	e12fff1e	 bx          lr
  02208		 |$LN20@TdPoolInit|
  02208		 |$LN21@TdPoolInit|
  02208	00000000	 DCD         |g_Dc|
  0220c		 |$LN22@TdPoolInit|
  0220c	00000000	 DCD         |??_C@_1CE@KOLBPKLG@?$AA?9?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  02210		 |$LN23@TdPoolInit|
  02210	00000000	 DCD         |??_C@_1O@MFEOKLLN@?$AAF?$AAA?$AAL?$AAI?$AAE?$AAD?$AA?$AA@|
  02214		 |$LN24@TdPoolInit|
  02214	00000000	 DCD         |??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@|
  02218		 |$LN25@TdPoolInit|
  02218	00000000	 DCD         |dpCurSettings|
  0221c		 |$LN26@TdPoolInit|
  0221c	00000000	 DCD         |??_C@_1EK@PKAFGKEL@?$AAT?$AAD?$AA?5?$AA?$CF?$AA0?$AA4?$AAu?$AA?3?$AA?5?$AAP?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAV?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  02220		 |$LN27@TdPoolInit|
  02220	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02224		 |$LN28@TdPoolInit|
  02224	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02228		 |$LN29@TdPoolInit|
  02228	00000000	 DCD         |??_C@_1CM@KIAOOALK@?$AA?$CL?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAD?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  0222c		 |$M46497|

			 ENDP  ; |TdPoolInit|

	EXPORT	|??_C@_1CA@ILEKCGKG@?$AA?9?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@MCAFDBJJ@?$AA?$CL?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000a8			 AREA	 |.pdata|, PDATA
|$T46518| DCD	|$LN10@TdPoolDein|
	DCD	0x40003202

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@ILEKCGKG@?$AA?9?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "d", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@MCAFDBJJ@?$AA?$CL?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "T", 0x0, "d", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0222c			 AREA	 |.text|, CODE, ARM

  0222c		 |TdPoolDeinit| PROC

; 1105 : {

  0222c		 |$LN10@TdPoolDein|
  0222c	e52de004	 str         lr, [sp, #-4]!
  02230	e24dd008	 sub         sp, sp, #8
  02234		 |$M46515|

; 1106 :     /* Only deinitialise once */
; 1107 :     if (g_Dc.fTdPoolInitialised == FALSE)

  02234	e59f30b0	 ldr         r3, [pc, #0xB0]
  02238	e5933044	 ldr         r3, [r3, #0x44]
  0223c	e3530000	 cmp         r3, #0
  02240	1a000000	 bne         |$LN1@TdPoolDein|

; 1108 :         return;

  02244	ea000023	 b           |$LN2@TdPoolDein|
  02248		 |$LN1@TdPoolDein|

; 1109 : 
; 1110 :     DEBUGMSG(ZONE_INIT,
; 1111 :         (L"+TdPoolDeinit\r\n"));

  02248	e59f3098	 ldr         r3, [pc, #0x98]
  0224c	e5933440	 ldr         r3, [r3, #0x440]
  02250	e3130020	 tst         r3, #0x20
  02254	0a000004	 beq         |$LN4@TdPoolDein|
  02258	e59f0090	 ldr         r0, [pc, #0x90]
  0225c	eb000000	 bl          NKDbgPrintfW
  02260	e3a03001	 mov         r3, #1
  02264	e58d3000	 str         r3, [sp]
  02268	ea000001	 b           |$LN5@TdPoolDein|
  0226c		 |$LN4@TdPoolDein|
  0226c	e3a03000	 mov         r3, #0
  02270	e58d3000	 str         r3, [sp]
  02274		 |$LN5@TdPoolDein|

; 1112 : 
; 1113 :     Lock();

  02274	eb000000	 bl          Lock

; 1114 :     g_Dc.fTdPoolInitialised = FALSE;

  02278	e59f206c	 ldr         r2, [pc, #0x6C]
  0227c	e3a03000	 mov         r3, #0
  02280	e5823044	 str         r3, [r2, #0x44]

; 1115 :     g_Dc.paTdPool.QuadPart = 0;

  02284	e59f2060	 ldr         r2, [pc, #0x60]
  02288	e3a03000	 mov         r3, #0
  0228c	e5823038	 str         r3, [r2, #0x38]
  02290	e59f2054	 ldr         r2, [pc, #0x54]
  02294	e3a03000	 mov         r3, #0
  02298	e582303c	 str         r3, [r2, #0x3C]

; 1116 :     g_Dc.pvTdPool = NULL;

  0229c	e59f2048	 ldr         r2, [pc, #0x48]
  022a0	e3a03000	 mov         r3, #0
  022a4	e5823030	 str         r3, [r2, #0x30]

; 1117 :     Unlock();

  022a8	eb000000	 bl          Unlock

; 1118 : 
; 1119 :     DEBUGMSG(ZONE_INIT,
; 1120 :         (L"-TdPoolDeinit\r\n"));

  022ac	e59f3034	 ldr         r3, [pc, #0x34]
  022b0	e5933440	 ldr         r3, [r3, #0x440]
  022b4	e3130020	 tst         r3, #0x20
  022b8	0a000004	 beq         |$LN6@TdPoolDein|
  022bc	e59f0020	 ldr         r0, [pc, #0x20]
  022c0	eb000000	 bl          NKDbgPrintfW
  022c4	e3a03001	 mov         r3, #1
  022c8	e58d3004	 str         r3, [sp, #4]
  022cc	ea000001	 b           |$LN7@TdPoolDein|
  022d0		 |$LN6@TdPoolDein|
  022d0	e3a03000	 mov         r3, #0
  022d4	e58d3004	 str         r3, [sp, #4]
  022d8		 |$LN7@TdPoolDein|
  022d8		 |$LN2@TdPoolDein|

; 1121 : }

  022d8	e28dd008	 add         sp, sp, #8
  022dc	e49de004	 ldr         lr, [sp], #4
  022e0	e12fff1e	 bx          lr
  022e4		 |$LN11@TdPoolDein|
  022e4		 |$LN12@TdPoolDein|
  022e4	00000000	 DCD         |??_C@_1CA@ILEKCGKG@?$AA?9?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  022e8		 |$LN13@TdPoolDein|
  022e8	00000000	 DCD         |dpCurSettings|
  022ec		 |$LN14@TdPoolDein|
  022ec	00000000	 DCD         |g_Dc|
  022f0		 |$LN15@TdPoolDein|
  022f0	00000000	 DCD         |??_C@_1CA@MCAFDBJJ@?$AA?$CL?$AAT?$AAd?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  022f4		 |$M46516|

			 ENDP  ; |TdPoolDeinit|

	EXPORT	|??_C@_1CO@DIIJNAEJ@?$AA?9?$AAT?$AAd?$AAF?$AAr?$AAe?$AAe?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@HFJEJPEA@?$AA?$CL?$AAT?$AAd?$AAF?$AAr?$AAe?$AAe?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000b0			 AREA	 |.pdata|, PDATA
|$T46535| DCD	|$LN14@TdFreeQueu|
	DCD	0x40004c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@DIIJNAEJ@?$AA?9?$AAT?$AAd?$AAF?$AAr?$AAe?$AAe?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "T", 0x0, "d", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@HFJEJPEA@?$AA?$CL?$AAT?$AAd?$AAF?$AAr?$AAe?$AAe?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "T", 0x0, "d", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "Q", 0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  022f4			 AREA	 |.text|, CODE, ARM

  022f4		 |TdFreeQueueInit| PROC

; 1124 : {

  022f4		 |$LN14@TdFreeQueu|
  022f4	e52de004	 str         lr, [sp, #-4]!
  022f8	e24dd01c	 sub         sp, sp, #0x1C
  022fc		 |$M46532|

; 1125 :     BOOL fInitialised = FALSE;

  022fc	e3a03000	 mov         r3, #0
  02300	e58d3000	 str         r3, [sp]

; 1126 : 
; 1127 :     DEBUGMSG(ZONE_INIT,
; 1128 :         (L"+TdFreeQueueInit\r\n"));

  02304	e59f310c	 ldr         r3, [pc, #0x10C]
  02308	e5933440	 ldr         r3, [r3, #0x440]
  0230c	e3130020	 tst         r3, #0x20
  02310	0a000004	 beq         |$LN6@TdFreeQueu|
  02314	e59f0104	 ldr         r0, [pc, #0x104]
  02318	eb000000	 bl          NKDbgPrintfW
  0231c	e3a03001	 mov         r3, #1
  02320	e58d3010	 str         r3, [sp, #0x10]
  02324	ea000001	 b           |$LN7@TdFreeQueu|
  02328		 |$LN6@TdFreeQueu|
  02328	e3a03000	 mov         r3, #0
  0232c	e58d3010	 str         r3, [sp, #0x10]
  02330		 |$LN7@TdFreeQueu|

; 1129 : 
; 1130 :     /* Teardown descriptor pool must be initialised before teardown free queue */
; 1131 :     TdPoolInit();

  02330	eb000000	 bl          TdPoolInit

; 1132 : 
; 1133 :     Lock();

  02334	eb000000	 bl          Lock

; 1134 : 
; 1135 :     g_Dc.pCppiRegs->TDFDQ =
; 1136 :         (USB_CPPI_XXCMPL_QMGR << 12) |
; 1137 :         (USB_CPPI_TDFREE_QNUM << 0);

  02338	e59f30dc	 ldr         r3, [pc, #0xDC]
  0233c	e593302c	 ldr         r3, [r3, #0x2C]
  02340	e2832004	 add         r2, r3, #4
  02344	e3a0300f	 mov         r3, #0xF
  02348	e5823000	 str         r3, [r2]

; 1138 : 
; 1139 :     {
; 1140 : 		unsigned n;
; 1141 : 		TEARDOWN_DESCRIPTOR *pTd = g_Dc.pvTdPool;

  0234c	e59f30c8	 ldr         r3, [pc, #0xC8]
  02350	e5933030	 ldr         r3, [r3, #0x30]
  02354	e58d3008	 str         r3, [sp, #8]

; 1142 : 		for (n = 0; n < USB_CPPI_TD_COUNT; n++, pTd++)

  02358	e3a03000	 mov         r3, #0
  0235c	e58d3004	 str         r3, [sp, #4]
  02360	ea000005	 b           |$LN3@TdFreeQueu|
  02364		 |$LN2@TdFreeQueu|
  02364	e59d3004	 ldr         r3, [sp, #4]
  02368	e2833001	 add         r3, r3, #1
  0236c	e58d3004	 str         r3, [sp, #4]
  02370	e59d3008	 ldr         r3, [sp, #8]
  02374	e2833020	 add         r3, r3, #0x20
  02378	e58d3008	 str         r3, [sp, #8]
  0237c		 |$LN3@TdFreeQueu|
  0237c	e59d3004	 ldr         r3, [sp, #4]
  02380	e3530020	 cmp         r3, #0x20
  02384	2a000003	 bcs         |$LN1@TdFreeQueu|

; 1143 : 		{
; 1144 : 			QueuePush(USB_CPPI_TDFREE_QNUM, pTd);

  02388	e59d1008	 ldr         r1, [sp, #8]
  0238c	e3a0000f	 mov         r0, #0xF
  02390	eb000000	 bl          QueuePush

; 1145 : 		}

  02394	eafffff2	 b           |$LN2@TdFreeQueu|
  02398		 |$LN1@TdFreeQueu|

; 1146 :     }
; 1147 : 
; 1148 :     fInitialised = TRUE;

  02398	e3a03001	 mov         r3, #1
  0239c	e58d3000	 str         r3, [sp]

; 1149 : 
; 1150 :     Unlock();

  023a0	eb000000	 bl          Unlock

; 1151 : 
; 1152 :     DEBUGMSG(ZONE_INIT,
; 1153 :         (L"-TdFreeQueueInit: %s\r\n",
; 1154 :         fInitialised ?
; 1155 :             L"SUCCEEDED" :
; 1156 :             L"FALIED"));

  023a4	e59f306c	 ldr         r3, [pc, #0x6C]
  023a8	e5933440	 ldr         r3, [r3, #0x440]
  023ac	e3130020	 tst         r3, #0x20
  023b0	0a00000d	 beq         |$LN10@TdFreeQueu|
  023b4	e59d3000	 ldr         r3, [sp]
  023b8	e3530000	 cmp         r3, #0
  023bc	0a000002	 beq         |$LN8@TdFreeQueu|
  023c0	e59f304c	 ldr         r3, [pc, #0x4C]
  023c4	e58d3014	 str         r3, [sp, #0x14]
  023c8	ea000001	 b           |$LN9@TdFreeQueu|
  023cc		 |$LN8@TdFreeQueu|
  023cc	e59f303c	 ldr         r3, [pc, #0x3C]
  023d0	e58d3014	 str         r3, [sp, #0x14]
  023d4		 |$LN9@TdFreeQueu|
  023d4	e59d1014	 ldr         r1, [sp, #0x14]
  023d8	e59f002c	 ldr         r0, [pc, #0x2C]
  023dc	eb000000	 bl          NKDbgPrintfW
  023e0	e3a03001	 mov         r3, #1
  023e4	e58d3018	 str         r3, [sp, #0x18]
  023e8	ea000001	 b           |$LN11@TdFreeQueu|
  023ec		 |$LN10@TdFreeQueu|
  023ec	e3a03000	 mov         r3, #0
  023f0	e58d3018	 str         r3, [sp, #0x18]
  023f4		 |$LN11@TdFreeQueu|

; 1157 : 
; 1158 :     return fInitialised;

  023f4	e59d3000	 ldr         r3, [sp]
  023f8	e58d300c	 str         r3, [sp, #0xC]

; 1159 : }

  023fc	e59d000c	 ldr         r0, [sp, #0xC]
  02400	e28dd01c	 add         sp, sp, #0x1C
  02404	e49de004	 ldr         lr, [sp], #4
  02408	e12fff1e	 bx          lr
  0240c		 |$LN15@TdFreeQueu|
  0240c		 |$LN16@TdFreeQueu|
  0240c	00000000	 DCD         |??_C@_1CO@DIIJNAEJ@?$AA?9?$AAT?$AAd?$AAF?$AAr?$AAe?$AAe?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  02410		 |$LN17@TdFreeQueu|
  02410	00000000	 DCD         |??_C@_1O@MFEOKLLN@?$AAF?$AAA?$AAL?$AAI?$AAE?$AAD?$AA?$AA@|
  02414		 |$LN18@TdFreeQueu|
  02414	00000000	 DCD         |??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@|
  02418		 |$LN19@TdFreeQueu|
  02418	00000000	 DCD         |dpCurSettings|
  0241c		 |$LN20@TdFreeQueu|
  0241c	00000000	 DCD         |g_Dc|
  02420		 |$LN21@TdFreeQueu|
  02420	00000000	 DCD         |??_C@_1CG@HFJEJPEA@?$AA?$CL?$AAT?$AAd?$AAF?$AAr?$AAe?$AAe?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  02424		 |$M46533|

			 ENDP  ; |TdFreeQueueInit|

	EXPORT	|??_C@_1EI@MFEKDLGN@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAP?$AAu?$AAs?$AAh?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  000b8			 AREA	 |.pdata|, PDATA
|$T46549| DCD	|$LN12@QueuePush|
	DCD	0x40004f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MFEKDLGN@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAP?$AAu?$AAs?$AAh?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "Q"
	DCB	0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, "P", 0x0, "u"
	DCB	0x0, "s", 0x0, "h", 0x0, ":", 0x0, " ", 0x0, "Q", 0x0, "u"
	DCB	0x0, "e", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ",", 0x0, " ", 0x0, "V", 0x0, "a", 0x0, "l", 0x0, "u"
	DCB	0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02424			 AREA	 |.text|, CODE, ARM

  02424		 |QueuePush| PROC

; 1162 : {

  02424		 |$LN12@QueuePush|
  02424	e1a0c00d	 mov         r12, sp
  02428	e92d0003	 stmdb       sp!, {r0, r1}
  0242c	e92d5000	 stmdb       sp!, {r12, lr}
  02430	e24dd018	 sub         sp, sp, #0x18
  02434		 |$M46546|

; 1163 :     UINT32 value = 0;

  02434	e3a03000	 mov         r3, #0
  02438	e58d3000	 str         r3, [sp]

; 1164 : 
; 1165 :     if (pDescriptor != NULL)

  0243c	e59d3024	 ldr         r3, [sp, #0x24]
  02440	e3530000	 cmp         r3, #0
  02444	0a000023	 beq         |$LN5@QueuePush|

; 1166 :     {
; 1167 :         UINT32 addr  = USBCDMA_DescriptorVAtoPA((HANDLE)&g_Dc.usb[0],pDescriptor);

  02448	e59d1024	 ldr         r1, [sp, #0x24]
  0244c	e59f30fc	 ldr         r3, [pc, #0xFC]
  02450	e2830050	 add         r0, r3, #0x50
  02454	eb000000	 bl          USBCDMA_DescriptorVAtoPA
  02458	e58d0010	 str         r0, [sp, #0x10]
  0245c	e59d3010	 ldr         r3, [sp, #0x10]
  02460	e58d300c	 str         r3, [sp, #0xC]

; 1168 :         UINT32 size  = 0;

  02464	e3a03000	 mov         r3, #0
  02468	e58d3008	 str         r3, [sp, #8]

; 1169 : 
; 1170 :         UINT32 type = (*(UINT32*)pDescriptor & USB_CPPI41_DESC_TYPE_MASK) >> USB_CPPI41_DESC_TYPE_SHIFT;

  0246c	e59d3024	 ldr         r3, [sp, #0x24]
  02470	e5933000	 ldr         r3, [r3]
  02474	e203333e	 and         r3, r3, #0x3E, 6
  02478	e1a03da3	 mov         r3, r3, lsr #27
  0247c	e58d3004	 str         r3, [sp, #4]

; 1171 :         switch (type)

  02480	e59d3004	 ldr         r3, [sp, #4]
  02484	e3530013	 cmp         r3, #0x13
  02488	0a000000	 beq         |$LN2@QueuePush|
  0248c	ea000002	 b           |$LN1@QueuePush|
  02490		 |$LN2@QueuePush|

; 1172 :         {
; 1173 :         case USB_CPPI41_DESC_TYPE_TEARDOWN: /* Teardown descriptor */
; 1174 :             size = (USB_CPPI_TD_SIZE - 24) / 4;

  02490	e3a03002	 mov         r3, #2
  02494	e58d3008	 str         r3, [sp, #8]

; 1175 :             break;

  02498	ea000007	 b           |$LN3@QueuePush|
  0249c		 |$LN1@QueuePush|

; 1176 : 
; 1177 :         default:
; 1178 :             ERRORMSG(TRUE,
; 1179 :                 (L"Invalid descriptor type %u\r\n",
; 1180 :                 type));

  0249c	e3a02b01	 mov         r2, #1, 22
  024a0	e382209c	 orr         r2, r2, #0x9C
  024a4	e59f10b0	 ldr         r1, [pc, #0xB0]
  024a8	e59f00a8	 ldr         r0, [pc, #0xA8]
  024ac	eb000000	 bl          NKDbgPrintfW
  024b0	e59d1004	 ldr         r1, [sp, #4]
  024b4	e59f0098	 ldr         r0, [pc, #0x98]
  024b8	eb000000	 bl          NKDbgPrintfW
  024bc		 |$LN3@QueuePush|

; 1181 :         }
; 1182 : 
; 1183 :         value = ((addr & QMGR_QUEUE_N_REG_D_DESC_ADDR_MASK) |
; 1184 :                  (size & QMGR_QUEUE_N_REG_D_DESCSZ_MASK));

  024bc	e59d1008	 ldr         r1, [sp, #8]
  024c0	e59d200c	 ldr         r2, [sp, #0xC]
  024c4	e3e0301f	 mvn         r3, #0x1F
  024c8	e0022003	 and         r2, r2, r3
  024cc	e201301f	 and         r3, r1, #0x1F
  024d0	e1823003	 orr         r3, r2, r3
  024d4	e58d3000	 str         r3, [sp]
  024d8		 |$LN5@QueuePush|

; 1185 :     }
; 1186 : 
; 1187 :     g_Dc.pCppiRegs->QMQUEUEMGMT[nQueue].QCTRLD = value;

  024d8	e59f3070	 ldr         r3, [pc, #0x70]
  024dc	e593302c	 ldr         r3, [r3, #0x2C]
  024e0	e2831a05	 add         r1, r3, #5, 20
  024e4	e5dd3020	 ldrb        r3, [sp, #0x20]
  024e8	e1a02003	 mov         r2, r3
  024ec	e3a03010	 mov         r3, #0x10
  024f0	e0030392	 mul         r3, r2, r3
  024f4	e0813003	 add         r3, r1, r3
  024f8	e283200c	 add         r2, r3, #0xC
  024fc	e59d3000	 ldr         r3, [sp]
  02500	e5823000	 str         r3, [r2]

; 1188 : 
; 1189 :     DEBUGMSG(ZONE_INFO && 0, (L"QueuePush: Queue %u, Value 0x%08x\r\n", nQueue, value));

  02504	e59f3040	 ldr         r3, [pc, #0x40]
  02508	e5933440	 ldr         r3, [r3, #0x440]
  0250c	e3130004	 tst         r3, #4
  02510	0a000007	 beq         |$LN8@QueuePush|
  02514	ea000006	 b           |$LN8@QueuePush|
  02518	e59d2000	 ldr         r2, [sp]
  0251c	e5dd1020	 ldrb        r1, [sp, #0x20]
  02520	e59f0020	 ldr         r0, [pc, #0x20]
  02524	eb000000	 bl          NKDbgPrintfW
  02528	e3a03001	 mov         r3, #1
  0252c	e58d3014	 str         r3, [sp, #0x14]
  02530	ea000001	 b           |$LN9@QueuePush|
  02534		 |$LN8@QueuePush|
  02534	e3a03000	 mov         r3, #0
  02538	e58d3014	 str         r3, [sp, #0x14]
  0253c		 |$LN9@QueuePush|

; 1190 : }

  0253c	e28dd018	 add         sp, sp, #0x18
  02540	e89d6000	 ldmia       sp, {sp, lr}
  02544	e12fff1e	 bx          lr
  02548		 |$LN13@QueuePush|
  02548		 |$LN14@QueuePush|
  02548	00000000	 DCD         |??_C@_1EI@MFEKDLGN@?$AAQ?$AAu?$AAe?$AAu?$AAe?$AAP?$AAu?$AAs?$AAh?$AA?3?$AA?5?$AAQ?$AAu?$AAe?$AAu?$AAe?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAV?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  0254c		 |$LN15@QueuePush|
  0254c	00000000	 DCD         |dpCurSettings|
  02550		 |$LN16@QueuePush|
  02550	00000000	 DCD         |g_Dc|
  02554		 |$LN17@QueuePush|
  02554	00000000	 DCD         |??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@|
  02558		 |$LN18@QueuePush|
  02558	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0255c		 |$LN19@QueuePush|
  0255c	00000000	 DCD         |??_C@_1KA@IDNKPOIK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02560		 |$M46547|

			 ENDP  ; |QueuePush|


  000c0			 AREA	 |.pdata|, PDATA
|$T46564| DCD	|$LN7@IsPow2|
	DCD	0x40001804
; Function compile flags: /Odtp

  02560			 AREA	 |.text|, CODE, ARM

  02560		 |IsPow2| PROC

; 1193 : {

  02560		 |$LN7@IsPow2|
  02560	e1a0c00d	 mov         r12, sp
  02564	e92d0001	 stmdb       sp!, {r0}
  02568	e92d5000	 stmdb       sp!, {r12, lr}
  0256c	e24dd00c	 sub         sp, sp, #0xC
  02570		 |$M46561|

; 1194 :     return ((unsigned int)(1 << Log2(n)) == n);

  02570	e59d0014	 ldr         r0, [sp, #0x14]
  02574	eb000000	 bl          Log2
  02578	e58d0004	 str         r0, [sp, #4]
  0257c	e59d2004	 ldr         r2, [sp, #4]
  02580	e3a03001	 mov         r3, #1
  02584	e1a02213	 mov         r2, r3, lsl r2
  02588	e59d3014	 ldr         r3, [sp, #0x14]
  0258c	e1520003	 cmp         r2, r3
  02590	1a000002	 bne         |$LN3@IsPow2|
  02594	e3a03001	 mov         r3, #1
  02598	e58d3008	 str         r3, [sp, #8]
  0259c	ea000001	 b           |$LN4@IsPow2|
  025a0		 |$LN3@IsPow2|
  025a0	e3a03000	 mov         r3, #0
  025a4	e58d3008	 str         r3, [sp, #8]
  025a8		 |$LN4@IsPow2|
  025a8	e59d3008	 ldr         r3, [sp, #8]
  025ac	e58d3000	 str         r3, [sp]

; 1195 : }

  025b0	e59d0000	 ldr         r0, [sp]
  025b4	e28dd00c	 add         sp, sp, #0xC
  025b8	e89d6000	 ldmia       sp, {sp, lr}
  025bc	e12fff1e	 bx          lr
  025c0		 |$M46562|

			 ENDP  ; |IsPow2|


  000c8			 AREA	 |.pdata|, PDATA
|$T46570| DCD	|$LN8@Log2|
	DCD	0x40001c04
; Function compile flags: /Odtp

  025c0			 AREA	 |.text|, CODE, ARM

  025c0		 |Log2|	 PROC

; 1198 : {

  025c0		 |$LN8@Log2|
  025c0	e1a0c00d	 mov         r12, sp
  025c4	e92d0001	 stmdb       sp!, {r0}
  025c8	e92d5000	 stmdb       sp!, {r12, lr}
  025cc	e24dd008	 sub         sp, sp, #8
  025d0		 |$M46567|

; 1199 :     unsigned log2 = 0;

  025d0	e3a03000	 mov         r3, #0
  025d4	e58d3000	 str         r3, [sp]
  025d8		 |$LN3@Log2|

; 1200 : 
; 1201 :     while (n != 0) 

  025d8	e59d3010	 ldr         r3, [sp, #0x10]
  025dc	e3530000	 cmp         r3, #0
  025e0	0a000006	 beq         |$LN2@Log2|

; 1202 : 	{
; 1203 :         n >>= 1;

  025e4	e59d3010	 ldr         r3, [sp, #0x10]
  025e8	e1a030a3	 mov         r3, r3, lsr #1
  025ec	e58d3010	 str         r3, [sp, #0x10]

; 1204 :         log2++;

  025f0	e59d3000	 ldr         r3, [sp]
  025f4	e2833001	 add         r3, r3, #1
  025f8	e58d3000	 str         r3, [sp]

; 1205 :     }

  025fc	eafffff5	 b           |$LN3@Log2|
  02600		 |$LN2@Log2|

; 1206 : 
; 1207 :     if (log2 > 0)

  02600	e59d3000	 ldr         r3, [sp]
  02604	e3530000	 cmp         r3, #0
  02608	9a000002	 bls         |$LN1@Log2|

; 1208 : 	{
; 1209 :         log2--;

  0260c	e59d3000	 ldr         r3, [sp]
  02610	e2433001	 sub         r3, r3, #1
  02614	e58d3000	 str         r3, [sp]
  02618		 |$LN1@Log2|

; 1210 : 	}
; 1211 : 
; 1212 :     return log2;

  02618	e59d3000	 ldr         r3, [sp]
  0261c	e58d3004	 str         r3, [sp, #4]

; 1213 : }

  02620	e59d0004	 ldr         r0, [sp, #4]
  02624	e28dd008	 add         sp, sp, #8
  02628	e89d6000	 ldmia       sp, {sp, lr}
  0262c	e12fff1e	 bx          lr
  02630		 |$M46568|

			 ENDP  ; |Log2|

	END
