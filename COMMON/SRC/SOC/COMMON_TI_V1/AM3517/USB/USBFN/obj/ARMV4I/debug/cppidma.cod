; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\USB\USBFN\cppidma.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|f_CppiObj| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|cppiCompletionCallback|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T47978| DCD	|$LN13@cppiComple|
	DCD	0x40005104
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbfn\cppidma.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "A", 0x0, "M", 0x0, "3", 0x0, "5", 0x0, "1", 0x0, "7"
	DCB	0x0, "\\", 0x0, "U", 0x0, "S", 0x0, "B", 0x0, "\\", 0x0, "U"
	DCB	0x0, "S", 0x0, "B", 0x0, "F", 0x0, "N", 0x0, "\\", 0x0, "."
	DCB	0x0, "\\", 0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "d"
	DCB	0x0, "m", 0x0, "a", 0x0, ".", 0x0, "c", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |cppiCompletionCallback| PROC

; 548  : {

  00000		 |$LN13@cppiComple|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M47975|

; 549  :     CSL_CppiRegs *pCppiRegs = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 550  :     UINT32 pending2			= 0;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3004	 str         r3, [sp, #4]

; 551  : 
; 552  :     DEBUGCHK(pPdd != NULL);

  00020	e59d302c	 ldr         r3, [sp, #0x2C]
  00024	e3530000	 cmp         r3, #0
  00028	0a000002	 beq         |$LN9@cppiComple|
  0002c	e3a03001	 mov         r3, #1
  00030	e58d3014	 str         r3, [sp, #0x14]
  00034	ea000007	 b           |$LN10@cppiComple|
  00038		 |$LN9@cppiComple|
  00038	e3a03f8a	 mov         r3, #0x8A, 30
  0003c	e59f20fc	 ldr         r2, [pc, #0xFC]
  00040	e59f10f4	 ldr         r1, [pc, #0xF4]
  00044	e59f00ec	 ldr         r0, [pc, #0xEC]
  00048	eb000000	 bl          NKDbgPrintfW
  0004c	e6000010	 __debugbreak_ce
  00050	e3a03000	 mov         r3, #0
  00054	e58d3014	 str         r3, [sp, #0x14]
  00058		 |$LN10@cppiComple|

; 553  :     if (pPdd == NULL)

  00058	e59d302c	 ldr         r3, [sp, #0x2C]
  0005c	e3530000	 cmp         r3, #0
  00060	1a000000	 bne         |$LN6@cppiComple|

; 554  : 	{
; 555  :         return;

  00064	ea000030	 b           |$LN7@cppiComple|
  00068		 |$LN6@cppiComple|

; 556  : 	}
; 557  : 
; 558  :     PRINTMSG(/*ZONE_PDD_DMA*/0, (L"+cppiCompletionCallback\r\n"));
; 559  : 
; 560  :     pCppiRegs = pPdd->pCppiRegs;

  00068	e59d302c	 ldr         r3, [sp, #0x2C]
  0006c	e2833020	 add         r3, r3, #0x20
  00070	e5933000	 ldr         r3, [r3]
  00074	e58d3000	 str         r3, [sp]
  00078		 |$LN5@cppiComple|

; 561  : 
; 562  :     while ((pending2 = pCppiRegs->PEND2) & USB_CPPI_PEND2_QMSK_FN)

  00078	e59d3000	 ldr         r3, [sp]
  0007c	e2833a03	 add         r3, r3, #3, 20
  00080	e2833098	 add         r3, r3, #0x98
  00084	e5933000	 ldr         r3, [r3]
  00088	e58d3004	 str         r3, [sp, #4]
  0008c	e59d3004	 ldr         r3, [sp, #4]
  00090	e3130015	 tst         r3, #0x15
  00094	0a000024	 beq         |$LN4@cppiComple|

; 563  :     {
; 564  :         if (pending2 & QUEUE_N_BITMASK(USB_CPPI_TXCMPL_QNUM_FN))

  00098	e59d3004	 ldr         r3, [sp, #4]
  0009c	e3130001	 tst         r3, #1
  000a0	0a000008	 beq         |$LN3@cppiComple|

; 565  : 		{
; 566  :             void *ptr = cppiQueuePop(pCppiRegs, USB_CPPI_TXCMPL_QNUM_FN);

  000a4	e3a01040	 mov         r1, #0x40
  000a8	e59d0000	 ldr         r0, [sp]
  000ac	eb000000	 bl          cppiQueuePop
  000b0	e58d0018	 str         r0, [sp, #0x18]
  000b4	e59d3018	 ldr         r3, [sp, #0x18]
  000b8	e58d3008	 str         r3, [sp, #8]

; 567  :             cppiProcessCompletionEvent(pPdd, ptr);

  000bc	e59d1008	 ldr         r1, [sp, #8]
  000c0	e59d002c	 ldr         r0, [sp, #0x2C]
  000c4	eb000000	 bl          cppiProcessCompletionEvent
  000c8		 |$LN3@cppiComple|

; 568  :         }
; 569  :         if (pending2 & QUEUE_N_BITMASK(USB_CPPI_RXCMPL_QNUM_FN)) 

  000c8	e59d3004	 ldr         r3, [sp, #4]
  000cc	e3130004	 tst         r3, #4
  000d0	0a000008	 beq         |$LN2@cppiComple|

; 570  : 		{
; 571  :             void *ptr = cppiQueuePop(pCppiRegs, USB_CPPI_RXCMPL_QNUM_FN);

  000d4	e3a01042	 mov         r1, #0x42
  000d8	e59d0000	 ldr         r0, [sp]
  000dc	eb000000	 bl          cppiQueuePop
  000e0	e58d001c	 str         r0, [sp, #0x1C]
  000e4	e59d301c	 ldr         r3, [sp, #0x1C]
  000e8	e58d300c	 str         r3, [sp, #0xC]

; 572  :             cppiProcessCompletionEvent(pPdd, ptr);

  000ec	e59d100c	 ldr         r1, [sp, #0xC]
  000f0	e59d002c	 ldr         r0, [sp, #0x2C]
  000f4	eb000000	 bl          cppiProcessCompletionEvent
  000f8		 |$LN2@cppiComple|

; 573  :         }
; 574  :         if (pending2 & QUEUE_N_BITMASK(USB_CPPI_TDCMPL_QNUM)) 

  000f8	e59d3004	 ldr         r3, [sp, #4]
  000fc	e3130010	 tst         r3, #0x10
  00100	0a000008	 beq         |$LN1@cppiComple|

; 575  : 		{
; 576  :             void *ptr = cppiQueuePop(pCppiRegs, USB_CPPI_TDCMPL_QNUM);

  00104	e3a01044	 mov         r1, #0x44
  00108	e59d0000	 ldr         r0, [sp]
  0010c	eb000000	 bl          cppiQueuePop
  00110	e58d0020	 str         r0, [sp, #0x20]
  00114	e59d3020	 ldr         r3, [sp, #0x20]
  00118	e58d3010	 str         r3, [sp, #0x10]

; 577  :             cppiProcessCompletionEvent(pPdd, ptr);

  0011c	e59d1010	 ldr         r1, [sp, #0x10]
  00120	e59d002c	 ldr         r0, [sp, #0x2C]
  00124	eb000000	 bl          cppiProcessCompletionEvent
  00128		 |$LN1@cppiComple|

; 578  :         }
; 579  :     }

  00128	eaffffd2	 b           |$LN5@cppiComple|
  0012c		 |$LN4@cppiComple|
  0012c		 |$LN7@cppiComple|

; 580  : 
; 581  :     PRINTMSG(/*ZONE_PDD_DMA*/0, (L"-cppiCompletionCallback\r\n"));
; 582  : }

  0012c	e28dd024	 add         sp, sp, #0x24
  00130	e89d6000	 ldmia       sp, {sp, lr}
  00134	e12fff1e	 bx          lr
  00138		 |$LN14@cppiComple|
  00138		 |$LN15@cppiComple|
  00138	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  0013c		 |$LN16@cppiComple|
  0013c	00000000	 DCD         |dpCurSettings|
  00140		 |$LN17@cppiComple|
  00140	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00144		 |$M47976|

			 ENDP  ; |cppiCompletionCallback|


  00008			 AREA	 |.pdata|, PDATA
|$T47990| DCD	|$LN8@cppiQueueP|
	DCD	0x40003004
; Function compile flags: /Odtp

  00144			 AREA	 |.text|, CODE, ARM

  00144		 |cppiQueuePop| PROC

; 521  : {

  00144		 |$LN8@cppiQueueP|
  00144	e1a0c00d	 mov         r12, sp
  00148	e92d0003	 stmdb       sp!, {r0, r1}
  0014c	e92d5000	 stmdb       sp!, {r12, lr}
  00150	e24dd010	 sub         sp, sp, #0x10
  00154		 |$M47987|

; 522  :     UINT32 value;
; 523  : 
; 524  :     DEBUGCHK(pCppiRegs != NULL);

  00154	e59d3018	 ldr         r3, [sp, #0x18]
  00158	e3530000	 cmp         r3, #0
  0015c	0a000002	 beq         |$LN4@cppiQueueP|
  00160	e3a03001	 mov         r3, #1
  00164	e58d3008	 str         r3, [sp, #8]
  00168	ea000007	 b           |$LN5@cppiQueueP|
  0016c		 |$LN4@cppiQueueP|
  0016c	e3a03f83	 mov         r3, #0x83, 30
  00170	e59f2088	 ldr         r2, [pc, #0x88]
  00174	e59f1080	 ldr         r1, [pc, #0x80]
  00178	e59f0078	 ldr         r0, [pc, #0x78]
  0017c	eb000000	 bl          NKDbgPrintfW
  00180	e6000010	 __debugbreak_ce
  00184	e3a03000	 mov         r3, #0
  00188	e58d3008	 str         r3, [sp, #8]
  0018c		 |$LN5@cppiQueueP|

; 525  :     if (pCppiRegs == NULL)

  0018c	e59d3018	 ldr         r3, [sp, #0x18]
  00190	e3530000	 cmp         r3, #0
  00194	1a000002	 bne         |$LN1@cppiQueueP|

; 526  : 	{
; 527  :         return NULL;

  00198	e3a03000	 mov         r3, #0
  0019c	e58d3004	 str         r3, [sp, #4]
  001a0	ea000010	 b           |$LN2@cppiQueueP|
  001a4		 |$LN1@cppiQueueP|

; 528  : 	}
; 529  : 
; 530  :     value = pCppiRegs->QMQUEUEMGMT[queueNo].QCTRLD & QMGR_QUEUE_N_REG_D_DESC_ADDR_MASK;

  001a4	e59d3018	 ldr         r3, [sp, #0x18]
  001a8	e2831a05	 add         r1, r3, #5, 20
  001ac	e5dd301c	 ldrb        r3, [sp, #0x1C]
  001b0	e1a02003	 mov         r2, r3
  001b4	e3a03010	 mov         r3, #0x10
  001b8	e0030392	 mul         r3, r2, r3
  001bc	e0813003	 add         r3, r1, r3
  001c0	e283300c	 add         r3, r3, #0xC
  001c4	e5932000	 ldr         r2, [r3]
  001c8	e3e0301f	 mvn         r3, #0x1F
  001cc	e0023003	 and         r3, r2, r3
  001d0	e58d3000	 str         r3, [sp]

; 531  : 
; 532  :     PRINTMSG(/*ZONE_PDD_DMA*/0, (L"cppiQueuePop: queue %u, value 0x%08x\r\n", queueNo, value));
; 533  : 
; 534  :     return cppiDescriptorPAtoVA(value);

  001d4	e59d0000	 ldr         r0, [sp]
  001d8	eb000000	 bl          cppiDescriptorPAtoVA
  001dc	e58d000c	 str         r0, [sp, #0xC]
  001e0	e59d300c	 ldr         r3, [sp, #0xC]
  001e4	e58d3004	 str         r3, [sp, #4]
  001e8		 |$LN2@cppiQueueP|

; 535  : }

  001e8	e59d0004	 ldr         r0, [sp, #4]
  001ec	e28dd010	 add         sp, sp, #0x10
  001f0	e89d6000	 ldmia       sp, {sp, lr}
  001f4	e12fff1e	 bx          lr
  001f8		 |$LN9@cppiQueueP|
  001f8		 |$LN10@cppiQueueP|
  001f8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  001fc		 |$LN11@cppiQueueP|
  001fc	00000000	 DCD         |dpCurSettings|
  00200		 |$LN12@cppiQueueP|
  00200	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00204		 |$M47988|

			 ENDP  ; |cppiQueuePop|

	IMPORT	|USBCDMA_DescriptorPAtoVA|

  00010			 AREA	 |.pdata|, PDATA
|$T48000| DCD	|$LN9@cppiDescri|
	DCD	0x40003c04
; Function compile flags: /Odtp

  00204			 AREA	 |.text|, CODE, ARM

  00204		 |cppiDescriptorPAtoVA| PROC

; 457  : {

  00204		 |$LN9@cppiDescri|
  00204	e1a0c00d	 mov         r12, sp
  00208	e92d0001	 stmdb       sp!, {r0}
  0020c	e92d5000	 stmdb       sp!, {r12, lr}
  00210	e24dd014	 sub         sp, sp, #0x14
  00214		 |$M47997|

; 458  :     void *va = NULL;

  00214	e3a03000	 mov         r3, #0
  00218	e58d3000	 str         r3, [sp]

; 459  : 
; 460  :     if (pa != 0) 

  0021c	e59d301c	 ldr         r3, [sp, #0x1C]
  00220	e3530000	 cmp         r3, #0
  00224	0a00002b	 beq         |$LN4@cppiDescri|

; 461  : 	{
; 462  :         UINT32 paPoolBase  = f_CppiObj->paPool.LowPart;

  00228	e59f30c0	 ldr         r3, [pc, #0xC0]
  0022c	e5933000	 ldr         r3, [r3]
  00230	e2833e8a	 add         r3, r3, #0x8A, 28
  00234	e5933000	 ldr         r3, [r3]
  00238	e58d3008	 str         r3, [sp, #8]

; 463  :         UINT32 paPoolLimit = f_CppiObj->paPool.LowPart + f_CppiObj->poolMaxSize;

  0023c	e59f30ac	 ldr         r3, [pc, #0xAC]
  00240	e5933000	 ldr         r3, [r3]
  00244	e2832e8a	 add         r2, r3, #0x8A, 28
  00248	e59f30a0	 ldr         r3, [pc, #0xA0]
  0024c	e5933000	 ldr         r3, [r3]
  00250	e2833b02	 add         r3, r3, #2, 22
  00254	e28330a8	 add         r3, r3, #0xA8
  00258	e5922000	 ldr         r2, [r2]
  0025c	e5933000	 ldr         r3, [r3]
  00260	e0823003	 add         r3, r2, r3
  00264	e58d3004	 str         r3, [sp, #4]

; 464  : 
; 465  :         if ((pa < paPoolBase) || (pa > paPoolLimit))

  00268	e59d201c	 ldr         r2, [sp, #0x1C]
  0026c	e59d3008	 ldr         r3, [sp, #8]
  00270	e1520003	 cmp         r2, r3
  00274	3a000003	 bcc         |$LN2@cppiDescri|
  00278	e59d201c	 ldr         r2, [sp, #0x1C]
  0027c	e59d3004	 ldr         r3, [sp, #4]
  00280	e1520003	 cmp         r2, r3
  00284	9a000009	 bls         |$LN3@cppiDescri|
  00288		 |$LN2@cppiDescri|

; 466  : 		{
; 467  :             va = USBCDMA_DescriptorPAtoVA(f_CppiObj->hUsbCdma, pa);

  00288	e59d101c	 ldr         r1, [sp, #0x1C]
  0028c	e59f305c	 ldr         r3, [pc, #0x5C]
  00290	e5933000	 ldr         r3, [r3]
  00294	e2833020	 add         r3, r3, #0x20
  00298	e5930000	 ldr         r0, [r3]
  0029c	eb000000	 bl          USBCDMA_DescriptorPAtoVA
  002a0	e58d0010	 str         r0, [sp, #0x10]
  002a4	e59d3010	 ldr         r3, [sp, #0x10]
  002a8	e58d3000	 str         r3, [sp]

; 468  : 		}
; 469  :         else

  002ac	ea000009	 b           |$LN1@cppiDescri|
  002b0		 |$LN3@cppiDescri|

; 470  : 		{
; 471  :             va = (void *)(((UINT32)f_CppiObj->pool) + (pa - paPoolBase));

  002b0	e59f3038	 ldr         r3, [pc, #0x38]
  002b4	e5933000	 ldr         r3, [r3]
  002b8	e2833b02	 add         r3, r3, #2, 22
  002bc	e2831098	 add         r1, r3, #0x98
  002c0	e59d201c	 ldr         r2, [sp, #0x1C]
  002c4	e59d3008	 ldr         r3, [sp, #8]
  002c8	e0422003	 sub         r2, r2, r3
  002cc	e5913000	 ldr         r3, [r1]
  002d0	e0833002	 add         r3, r3, r2
  002d4	e58d3000	 str         r3, [sp]
  002d8		 |$LN1@cppiDescri|
  002d8		 |$LN4@cppiDescri|

; 472  : 		}
; 473  :     }
; 474  : 
; 475  :     return va;

  002d8	e59d3000	 ldr         r3, [sp]
  002dc	e58d300c	 str         r3, [sp, #0xC]

; 476  : }

  002e0	e59d000c	 ldr         r0, [sp, #0xC]
  002e4	e28dd014	 add         sp, sp, #0x14
  002e8	e89d6000	 ldmia       sp, {sp, lr}
  002ec	e12fff1e	 bx          lr
  002f0		 |$LN10@cppiDescri|
  002f0		 |$LN11@cppiDescri|
  002f0	00000000	 DCD         |f_CppiObj|
  002f4		 |$M47998|

			 ENDP  ; |cppiDescriptorPAtoVA|

	EXPORT	|??_C@_1DK@BKCENHLF@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'

  00018			 AREA	 |.pdata|, PDATA
|$T48015| DCD	|$LN24@cppiProces|
	DCD	0x4000b304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BKCENHLF@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| DCB "U"
	DCB	0x0, "n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  002f4			 AREA	 |.text|, CODE, ARM

  002f4		 |cppiProcessCompletionEvent| PROC

; 591  : {

  002f4		 |$LN24@cppiProces|
  002f4	e1a0c00d	 mov         r12, sp
  002f8	e92d0003	 stmdb       sp!, {r0, r1}
  002fc	e92d5000	 stmdb       sp!, {r12, lr}
  00300	e24dd040	 sub         sp, sp, #0x40
  00304		 |$M48012|

; 592  :     UINT32 type;
; 593  : 
; 594  :     DEBUGCHK(pPdd != NULL);

  00304	e59d3048	 ldr         r3, [sp, #0x48]
  00308	e3530000	 cmp         r3, #0
  0030c	0a000002	 beq         |$LN14@cppiProces|
  00310	e3a03001	 mov         r3, #1
  00314	e58d302c	 str         r3, [sp, #0x2C]
  00318	ea000008	 b           |$LN15@cppiProces|
  0031c		 |$LN14@cppiProces|
  0031c	e3a03c02	 mov         r3, #2, 24
  00320	e3833052	 orr         r3, r3, #0x52
  00324	e59f2284	 ldr         r2, [pc, #0x284]
  00328	e59f128c	 ldr         r1, [pc, #0x28C]
  0032c	e59f0284	 ldr         r0, [pc, #0x284]
  00330	eb000000	 bl          NKDbgPrintfW
  00334	e6000010	 __debugbreak_ce
  00338	e3a03000	 mov         r3, #0
  0033c	e58d302c	 str         r3, [sp, #0x2C]
  00340		 |$LN15@cppiProces|

; 595  :     if (pPdd == NULL)

  00340	e59d3048	 ldr         r3, [sp, #0x48]
  00344	e3530000	 cmp         r3, #0
  00348	1a000000	 bne         |$LN11@cppiProces|

; 596  : 	{
; 597  :         return;

  0034c	ea000092	 b           |$LN12@cppiProces|
  00350		 |$LN11@cppiProces|

; 598  : 	}
; 599  : 
; 600  :     DEBUGCHK(ptr != NULL);

  00350	e59d304c	 ldr         r3, [sp, #0x4C]
  00354	e3530000	 cmp         r3, #0
  00358	0a000002	 beq         |$LN16@cppiProces|
  0035c	e3a03001	 mov         r3, #1
  00360	e58d3030	 str         r3, [sp, #0x30]
  00364	ea000007	 b           |$LN17@cppiProces|
  00368		 |$LN16@cppiProces|
  00368	e3a03f96	 mov         r3, #0x96, 30
  0036c	e59f223c	 ldr         r2, [pc, #0x23C]
  00370	e59f1244	 ldr         r1, [pc, #0x244]
  00374	e59f023c	 ldr         r0, [pc, #0x23C]
  00378	eb000000	 bl          NKDbgPrintfW
  0037c	e6000010	 __debugbreak_ce
  00380	e3a03000	 mov         r3, #0
  00384	e58d3030	 str         r3, [sp, #0x30]
  00388		 |$LN17@cppiProces|

; 601  :     if (ptr == NULL)

  00388	e59d304c	 ldr         r3, [sp, #0x4C]
  0038c	e3530000	 cmp         r3, #0
  00390	1a000000	 bne         |$LN10@cppiProces|

; 602  : 	{
; 603  :         return;

  00394	ea000080	 b           |$LN12@cppiProces|
  00398		 |$LN10@cppiProces|

; 604  : 	}
; 605  : 
; 606  :     type = (*(UINT32*)ptr & USB_CPPI41_DESC_TYPE_MASK) >> USB_CPPI41_DESC_TYPE_SHIFT;

  00398	e59d304c	 ldr         r3, [sp, #0x4C]
  0039c	e5933000	 ldr         r3, [r3]
  003a0	e203333e	 and         r3, r3, #0x3E, 6
  003a4	e1a03da3	 mov         r3, r3, lsr #27
  003a8	e58d3000	 str         r3, [sp]

; 607  :   
; 608  : 	switch (type)

  003ac	e59d3000	 ldr         r3, [sp]
  003b0	e58d3034	 str         r3, [sp, #0x34]
  003b4	e59d3034	 ldr         r3, [sp, #0x34]
  003b8	e3530010	 cmp         r3, #0x10
  003bc	0a000003	 beq         |$LN7@cppiProces|
  003c0	e59d3034	 ldr         r3, [sp, #0x34]
  003c4	e3530013	 cmp         r3, #0x13
  003c8	0a000033	 beq         |$LN4@cppiProces|
  003cc	ea00006a	 b           |$LN1@cppiProces|
  003d0		 |$LN7@cppiProces|

; 609  :     {
; 610  :     case USB_CPPI41_DESC_TYPE_HOST: /* Host Descriptor */
; 611  :         {
; 612  :             HOST_DESCRIPTOR *hdPtr = (HOST_DESCRIPTOR *)ptr;

  003d0	e59d304c	 ldr         r3, [sp, #0x4C]
  003d4	e58d3008	 str         r3, [sp, #8]

; 613  :             struct cppi *cppi = f_CppiObj;

  003d8	e59f31d4	 ldr         r3, [pc, #0x1D4]
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e58d3004	 str         r3, [sp, #4]

; 614  :             struct cppi_channel *chanPtr = NULL;

  003e4	e3a03000	 mov         r3, #0
  003e8	e58d3014	 str         r3, [sp, #0x14]

; 615  :             BYTE chanNum  = (BYTE)((hdPtr->TagInfo2 & 0x1f0) >> 4);

  003ec	e59d3008	 ldr         r3, [sp, #8]
  003f0	e2833030	 add         r3, r3, #0x30
  003f4	e5933000	 ldr         r3, [r3]
  003f8	e2033e1f	 and         r3, r3, #0x1F, 28
  003fc	e1a03223	 mov         r3, r3, lsr #4
  00400	e20330ff	 and         r3, r3, #0xFF
  00404	e5cd3010	 strb        r3, [sp, #0x10]

; 616  :             BOOL transmit = (hdPtr->TagInfo2 & 0x200) ? TRUE : FALSE;

  00408	e59d3008	 ldr         r3, [sp, #8]
  0040c	e2833030	 add         r3, r3, #0x30
  00410	e5933000	 ldr         r3, [r3]
  00414	e3130c02	 tst         r3, #2, 24
  00418	0a000002	 beq         |$LN18@cppiProces|
  0041c	e3a03001	 mov         r3, #1
  00420	e58d3038	 str         r3, [sp, #0x38]
  00424	ea000001	 b           |$LN19@cppiProces|
  00428		 |$LN18@cppiProces|
  00428	e3a03000	 mov         r3, #0
  0042c	e58d3038	 str         r3, [sp, #0x38]
  00430		 |$LN19@cppiProces|
  00430	e59d3038	 ldr         r3, [sp, #0x38]
  00434	e58d300c	 str         r3, [sp, #0xC]

; 617  :             if (transmit)

  00438	e59d300c	 ldr         r3, [sp, #0xC]
  0043c	e3530000	 cmp         r3, #0
  00440	0a000008	 beq         |$LN6@cppiProces|

; 618  : 			{
; 619  :                 chanPtr = cppi->txCppi + chanNum;

  00444	e59d3004	 ldr         r3, [sp, #4]
  00448	e2831028	 add         r1, r3, #0x28
  0044c	e5dd3010	 ldrb        r3, [sp, #0x10]
  00450	e1a02003	 mov         r2, r3
  00454	e3a03048	 mov         r3, #0x48
  00458	e0030392	 mul         r3, r2, r3
  0045c	e0813003	 add         r3, r1, r3
  00460	e58d3014	 str         r3, [sp, #0x14]

; 620  : 			}
; 621  :             else

  00464	ea000007	 b           |$LN5@cppiProces|
  00468		 |$LN6@cppiProces|

; 622  : 			{
; 623  :                 chanPtr = cppi->rxCppi + chanNum;

  00468	e59d3004	 ldr         r3, [sp, #4]
  0046c	e2831e46	 add         r1, r3, #0x46, 28
  00470	e5dd3010	 ldrb        r3, [sp, #0x10]
  00474	e1a02003	 mov         r2, r3
  00478	e3a03048	 mov         r3, #0x48
  0047c	e0030392	 mul         r3, r2, r3
  00480	e0813003	 add         r3, r1, r3
  00484	e58d3014	 str         r3, [sp, #0x14]
  00488		 |$LN5@cppiProces|

; 624  : 			}
; 625  : 
; 626  :             cppiProcessCompletedPacket(pPdd, hdPtr, chanPtr);

  00488	e59d2014	 ldr         r2, [sp, #0x14]
  0048c	e59d1008	 ldr         r1, [sp, #8]
  00490	e59d0048	 ldr         r0, [sp, #0x48]
  00494	eb000000	 bl          cppiProcessCompletedPacket

; 627  :             break;

  00498	ea00003f	 b           |$LN8@cppiProces|
  0049c		 |$LN4@cppiProces|

; 628  :         }
; 629  : 
; 630  :     case USB_CPPI41_DESC_TYPE_TEARDOWN: /* Teardown Descriptor */
; 631  :         {
; 632  :             TEARDOWN_DESCRIPTOR *tdPtr = (TEARDOWN_DESCRIPTOR *)ptr;

  0049c	e59d304c	 ldr         r3, [sp, #0x4C]
  004a0	e58d3018	 str         r3, [sp, #0x18]

; 633  :             struct cppi *cppi = f_CppiObj;

  004a4	e59f3108	 ldr         r3, [pc, #0x108]
  004a8	e5933000	 ldr         r3, [r3]
  004ac	e58d301c	 str         r3, [sp, #0x1C]

; 634  :             struct cppi_channel *chanPtr = NULL;

  004b0	e3a03000	 mov         r3, #0
  004b4	e58d3028	 str         r3, [sp, #0x28]

; 635  :             BYTE chanNum  = (BYTE)((tdPtr->DescInfo & 0x0001f) >> 0);

  004b8	e59d3018	 ldr         r3, [sp, #0x18]
  004bc	e5933000	 ldr         r3, [r3]
  004c0	e203301f	 and         r3, r3, #0x1F
  004c4	e20330ff	 and         r3, r3, #0xFF
  004c8	e5cd3024	 strb        r3, [sp, #0x24]

; 636  :             BOOL transmit = (tdPtr->DescInfo & 0x10000) ? FALSE : TRUE;

  004cc	e59d3018	 ldr         r3, [sp, #0x18]
  004d0	e5933000	 ldr         r3, [r3]
  004d4	e3130801	 tst         r3, #1, 16
  004d8	0a000002	 beq         |$LN20@cppiProces|
  004dc	e3a03000	 mov         r3, #0
  004e0	e58d303c	 str         r3, [sp, #0x3C]
  004e4	ea000001	 b           |$LN21@cppiProces|
  004e8		 |$LN20@cppiProces|
  004e8	e3a03001	 mov         r3, #1
  004ec	e58d303c	 str         r3, [sp, #0x3C]
  004f0		 |$LN21@cppiProces|
  004f0	e59d303c	 ldr         r3, [sp, #0x3C]
  004f4	e58d3020	 str         r3, [sp, #0x20]

; 637  :             if (transmit)

  004f8	e59d3020	 ldr         r3, [sp, #0x20]
  004fc	e3530000	 cmp         r3, #0
  00500	0a00000c	 beq         |$LN3@cppiProces|

; 638  : 			{
; 639  :                 chanPtr = cppi->txCppi + (chanNum - cppi->chanOffset);

  00504	e59d301c	 ldr         r3, [sp, #0x1C]
  00508	e2831028	 add         r1, r3, #0x28
  0050c	e5dd3024	 ldrb        r3, [sp, #0x24]
  00510	e1a02003	 mov         r2, r3
  00514	e59d301c	 ldr         r3, [sp, #0x1C]
  00518	e2833024	 add         r3, r3, #0x24
  0051c	e5d33000	 ldrb        r3, [r3]
  00520	e0422003	 sub         r2, r2, r3
  00524	e3a03048	 mov         r3, #0x48
  00528	e0030392	 mul         r3, r2, r3
  0052c	e0813003	 add         r3, r1, r3
  00530	e58d3028	 str         r3, [sp, #0x28]

; 640  : 			}
; 641  :             else

  00534	ea00000b	 b           |$LN2@cppiProces|
  00538		 |$LN3@cppiProces|

; 642  : 			{
; 643  :                 chanPtr = cppi->rxCppi + (chanNum - cppi->chanOffset);

  00538	e59d301c	 ldr         r3, [sp, #0x1C]
  0053c	e2831e46	 add         r1, r3, #0x46, 28
  00540	e5dd3024	 ldrb        r3, [sp, #0x24]
  00544	e1a02003	 mov         r2, r3
  00548	e59d301c	 ldr         r3, [sp, #0x1C]
  0054c	e2833024	 add         r3, r3, #0x24
  00550	e5d33000	 ldrb        r3, [r3]
  00554	e0422003	 sub         r2, r2, r3
  00558	e3a03048	 mov         r3, #0x48
  0055c	e0030392	 mul         r3, r2, r3
  00560	e0813003	 add         r3, r1, r3
  00564	e58d3028	 str         r3, [sp, #0x28]
  00568		 |$LN2@cppiProces|

; 644  : 			}
; 645  : 
; 646  :             cppiProcessCompletedTeardown(pPdd, tdPtr, chanPtr);

  00568	e59d2028	 ldr         r2, [sp, #0x28]
  0056c	e59d1018	 ldr         r1, [sp, #0x18]
  00570	e59d0048	 ldr         r0, [sp, #0x48]
  00574	eb000000	 bl          cppiProcessCompletedTeardown

; 647  :             break;

  00578	ea000007	 b           |$LN8@cppiProces|
  0057c		 |$LN1@cppiProces|

; 648  :         }
; 649  : 
; 650  :     default:
; 651  :         ERRORMSG(TRUE, (L"Unknown descriptor type %u\r\n", type));

  0057c	e3a02c02	 mov         r2, #2, 24
  00580	e382208b	 orr         r2, r2, #0x8B
  00584	e59f1024	 ldr         r1, [pc, #0x24]
  00588	e59f001c	 ldr         r0, [pc, #0x1C]
  0058c	eb000000	 bl          NKDbgPrintfW
  00590	e59d1000	 ldr         r1, [sp]
  00594	e59f000c	 ldr         r0, [pc, #0xC]
  00598	eb000000	 bl          NKDbgPrintfW
  0059c		 |$LN8@cppiProces|
  0059c		 |$LN12@cppiProces|

; 652  :     }
; 653  : }

  0059c	e28dd040	 add         sp, sp, #0x40
  005a0	e89d6000	 ldmia       sp, {sp, lr}
  005a4	e12fff1e	 bx          lr
  005a8		 |$LN25@cppiProces|
  005a8		 |$LN26@cppiProces|
  005a8	00000000	 DCD         |??_C@_1DK@BKCENHLF@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@|
  005ac		 |$LN27@cppiProces|
  005ac	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  005b0		 |$LN28@cppiProces|
  005b0	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  005b4		 |$LN29@cppiProces|
  005b4	00000000	 DCD         |f_CppiObj|
  005b8		 |$LN30@cppiProces|
  005b8	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  005bc		 |$LN31@cppiProces|
  005bc	00000000	 DCD         |dpCurSettings|
  005c0		 |$M48013|

			 ENDP  ; |cppiProcessCompletionEvent|

	EXPORT	|??_C@_1ME@HGFEFPFG@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JK@PNAHIGGE@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@POBJEFAI@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@IBPFHKOH@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@CEGIGIGI@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LeaveCriticalSection|
	IMPORT	|USBCDMA_ConfigureScheduleRx|
	IMPORT	|EnterCriticalSection|

  00020			 AREA	 |.pdata|, PDATA
|$T48055| DCD	|$LN40@cppiProces@2|
	DCD	0x40018304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1ME@HGFEFPFG@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, "(", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "I", 0x0, "S", 0x0, "O"
	DCB	0x0, " ", 0x0, "H", 0x0, "D", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "x", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, "t", 0x0, "a"
	DCB	0x0, "l", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "a", 0x0, "c", 0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l"
	DCB	0x0, "L", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@PNAHIGGE@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, "(", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "D", 0x0, "r"
	DCB	0x0, "o", 0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "(", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, ")"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@POBJEFAI@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, "(", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ")", 0x0, " ", 0x0, "[", 0x0, "Q", 0x0, "%", 0x0, "u"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, "]", 0x0, ","
	DCB	0x0, " ", 0x0, "N", 0x0, "U", 0x0, "L", 0x0, "L", 0x0, " "
	DCB	0x0, "p", 0x0, "E", 0x0, "n", 0x0, "d", 0x0, "P", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@IBPFHKOH@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, "(", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ")", 0x0, ",", 0x0, " ", 0x0, "L", 0x0, "i", 0x0, "n"
	DCB	0x0, "k", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "H", 0x0, "D"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@CEGIGIGI@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, "P", 0x0, "a", 0x0, "c", 0x0, "k"
	DCB	0x0, "e", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, " ", 0x0, "(", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, ")", 0x0, ",", 0x0, " ", 0x0, "N", 0x0, "U"
	DCB	0x0, "L", 0x0, "L", 0x0, " ", 0x0, "H", 0x0, "D", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@| DCB "R", 0x0, "X", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@| DCB "T", 0x0, "X", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  005c0			 AREA	 |.text|, CODE, ARM

  005c0		 |cppiProcessCompletedPacket| PROC

; 662  : {

  005c0		 |$LN40@cppiProces@2|
  005c0	e1a0c00d	 mov         r12, sp
  005c4	e92d0007	 stmdb       sp!, {r0 - r2}
  005c8	e92d5000	 stmdb       sp!, {r12, lr}
  005cc	e24dd06c	 sub         sp, sp, #0x6C
  005d0		 |$M48052|

; 663  :     BYTE   chanNum = chanPtr->channelNo;

  005d0	e59d307c	 ldr         r3, [sp, #0x7C]
  005d4	e2833018	 add         r3, r3, #0x18
  005d8	e5d33000	 ldrb        r3, [r3]
  005dc	e5cd3018	 strb        r3, [sp, #0x18]

; 664  :     BYTE   epNum   = chanNum + 1;

  005e0	e5dd3018	 ldrb        r3, [sp, #0x18]
  005e4	e2833001	 add         r3, r3, #1
  005e8	e20330ff	 and         r3, r3, #0xFF
  005ec	e5cd300c	 strb        r3, [sp, #0xC]

; 665  :     MGC_pfDmaCompletion pfnDmaCompleted = NULL;

  005f0	e3a03000	 mov         r3, #0
  005f4	e58d3020	 str         r3, [sp, #0x20]

; 666  :     BOOL transferComplete = TRUE;

  005f8	e3a03001	 mov         r3, #1
  005fc	e58d3010	 str         r3, [sp, #0x10]

; 667  :     UINT32 buffLen = 0;

  00600	e3a03000	 mov         r3, #0
  00604	e58d301c	 str         r3, [sp, #0x1C]

; 668  : 
; 669  : #ifndef SHIP_BUILD
; 670  :     WCHAR *chanDir = chanPtr->transmit ? L"TX" : L"RX";

  00608	e59d307c	 ldr         r3, [sp, #0x7C]
  0060c	e2833014	 add         r3, r3, #0x14
  00610	e5933000	 ldr         r3, [r3]
  00614	e3530000	 cmp         r3, #0
  00618	0a000002	 beq         |$LN18@cppiProces@2|
  0061c	e59f3594	 ldr         r3, [pc, #0x594]
  00620	e58d3044	 str         r3, [sp, #0x44]
  00624	ea000001	 b           |$LN19@cppiProces@2|
  00628		 |$LN18@cppiProces@2|
  00628	e59f3584	 ldr         r3, [pc, #0x584]
  0062c	e58d3044	 str         r3, [sp, #0x44]
  00630		 |$LN19@cppiProces@2|
  00630	e59d3044	 ldr         r3, [sp, #0x44]
  00634	e58d3014	 str         r3, [sp, #0x14]

; 671  : #endif
; 672  : 
; 673  :     PRINTMSG(/*ZONE_PDD_DMA*/0,
; 674  :         (L"+cppiProcessCompletedPacket: %s Ch %u (EP %u)\r\n",
; 675  :         chanDir,
; 676  :         chanNum,
; 677  :         epNum));
; 678  : 
; 679  :     if (hdPtr == NULL) 

  00638	e59d3078	 ldr         r3, [sp, #0x78]
  0063c	e3530000	 cmp         r3, #0
  00640	1a00001c	 bne         |$LN15@cppiProces@2|

; 680  : 	{
; 681  :         PRINTMSG(ZONE_WARNING,
; 682  :             (L"-cppiProcessCompletedPacket: %s Ch %u (EP %u), NULL HD\r\n",
; 683  :             chanDir,
; 684  :             chanNum,
; 685  :             epNum));

  00644	e59f355c	 ldr         r3, [pc, #0x55C]
  00648	e5933440	 ldr         r3, [r3, #0x440]
  0064c	e3130002	 tst         r3, #2
  00650	0a000015	 beq         |$LN22@cppiProces@2|
  00654	e59f354c	 ldr         r3, [pc, #0x54C]
  00658	e5933440	 ldr         r3, [r3, #0x440]
  0065c	e3130801	 tst         r3, #1, 16
  00660	0a000007	 beq         |$LN20@cppiProces@2|
  00664	e5dd300c	 ldrb        r3, [sp, #0xC]
  00668	e5dd2018	 ldrb        r2, [sp, #0x18]
  0066c	e59d1014	 ldr         r1, [sp, #0x14]
  00670	e59f0550	 ldr         r0, [pc, #0x550]
  00674	eb000000	 bl          CeLogMsg
  00678	e3a03001	 mov         r3, #1
  0067c	e58d3048	 str         r3, [sp, #0x48]
  00680	ea000006	 b           |$LN21@cppiProces@2|
  00684		 |$LN20@cppiProces@2|
  00684	e5dd300c	 ldrb        r3, [sp, #0xC]
  00688	e5dd2018	 ldrb        r2, [sp, #0x18]
  0068c	e59d1014	 ldr         r1, [sp, #0x14]
  00690	e59f0530	 ldr         r0, [pc, #0x530]
  00694	eb000000	 bl          NKDbgPrintfW
  00698	e3a03000	 mov         r3, #0
  0069c	e58d3048	 str         r3, [sp, #0x48]
  006a0		 |$LN21@cppiProces@2|
  006a0	e3a03001	 mov         r3, #1
  006a4	e58d304c	 str         r3, [sp, #0x4C]
  006a8	ea000001	 b           |$LN23@cppiProces@2|
  006ac		 |$LN22@cppiProces@2|
  006ac	e3a03000	 mov         r3, #0
  006b0	e58d304c	 str         r3, [sp, #0x4C]
  006b4		 |$LN23@cppiProces@2|

; 686  :         return;

  006b4	ea000136	 b           |$LN16@cppiProces@2|
  006b8		 |$LN15@cppiProces@2|

; 687  :     }
; 688  : 
; 689  :     ERRORMSG(hdPtr->NextPtr != 0,
; 690  :         (L"cppiProcessCompletedPacket: %s Ch %u (EP %u), Linked HD\r\n",
; 691  :         chanDir,
; 692  :         chanNum,
; 693  :         epNum));

  006b8	e59d3078	 ldr         r3, [sp, #0x78]
  006bc	e2833014	 add         r3, r3, #0x14
  006c0	e5933000	 ldr         r3, [r3]
  006c4	e3530000	 cmp         r3, #0
  006c8	0a00000c	 beq         |$LN24@cppiProces@2|
  006cc	e3a02c02	 mov         r2, #2, 24
  006d0	e38220b5	 orr         r2, r2, #0xB5
  006d4	e59f14e8	 ldr         r1, [pc, #0x4E8]
  006d8	e59f04e0	 ldr         r0, [pc, #0x4E0]
  006dc	eb000000	 bl          NKDbgPrintfW
  006e0	e5dd300c	 ldrb        r3, [sp, #0xC]
  006e4	e5dd2018	 ldrb        r2, [sp, #0x18]
  006e8	e59d1014	 ldr         r1, [sp, #0x14]
  006ec	e59f04c8	 ldr         r0, [pc, #0x4C8]
  006f0	eb000000	 bl          NKDbgPrintfW
  006f4	e3a03001	 mov         r3, #1
  006f8	e58d3050	 str         r3, [sp, #0x50]
  006fc	ea000001	 b           |$LN25@cppiProces@2|
  00700		 |$LN24@cppiProces@2|
  00700	e3a03000	 mov         r3, #0
  00704	e58d3050	 str         r3, [sp, #0x50]
  00708		 |$LN25@cppiProces@2|

; 694  : 
; 695  :     /* For overlapped IO need to protect channel vars */
; 696  :     LOCK_ENDPOINT(pPdd);

  00708	e59d3074	 ldr         r3, [sp, #0x74]
  0070c	e2830e27	 add         r0, r3, #0x27, 28
  00710	eb000000	 bl          EnterCriticalSection

; 697  : 
; 698  :     buffLen = (hdPtr->BuffLen & USB_CPPI41_HD_BUF_LENGTH_MASK);

  00714	e59d3078	 ldr         r3, [sp, #0x78]
  00718	e283300c	 add         r3, r3, #0xC
  0071c	e5932000	 ldr         r2, [r3]
  00720	e3e034ff	 mvn         r3, #0xFF, 8
  00724	e2233503	 eor         r3, r3, #3, 10
  00728	e0023003	 and         r3, r2, r3
  0072c	e58d301c	 str         r3, [sp, #0x1C]

; 699  : 
; 700  :     /* Check for zero length packet */
; 701  :     if (hdPtr->PacketInfo & USB_CPPI41_PKT_FLAGS_ZLP)

  00730	e59d3078	 ldr         r3, [sp, #0x78]
  00734	e2833008	 add         r3, r3, #8
  00738	e5933000	 ldr         r3, [r3]
  0073c	e3130702	 tst         r3, #2, 14
  00740	0a000001	 beq         |$LN14@cppiProces@2|

; 702  : 	{
; 703  : 		buffLen = 0;

  00744	e3a03000	 mov         r3, #0
  00748	e58d301c	 str         r3, [sp, #0x1C]
  0074c		 |$LN14@cppiProces@2|

; 704  : 	}
; 705  : 
; 706  :     chanPtr->actualLen += buffLen;

  0074c	e59d307c	 ldr         r3, [sp, #0x7C]
  00750	e2833030	 add         r3, r3, #0x30
  00754	e5932000	 ldr         r2, [r3]
  00758	e59d301c	 ldr         r3, [sp, #0x1C]
  0075c	e0822003	 add         r2, r2, r3
  00760	e59d307c	 ldr         r3, [sp, #0x7C]
  00764	e2833030	 add         r3, r3, #0x30
  00768	e5832000	 str         r2, [r3]

; 707  : 
; 708  :     if (chanPtr->pEndPt == NULL) 

  0076c	e59d307c	 ldr         r3, [sp, #0x7C]
  00770	e2833010	 add         r3, r3, #0x10
  00774	e5933000	 ldr         r3, [r3]
  00778	e3530000	 cmp         r3, #0
  0077c	1a00001e	 bne         |$LN13@cppiProces@2|

; 709  : 	{
; 710  :         RETAILMSG(ZONE_WARNING,
; 711  :             (L"cppiProcessCompletedPacket: %s Ch %u (EP %u) [Q%u, %s], NULL pEndPt\r\n",
; 712  :             chanDir,
; 713  :             chanNum,
; 714  :             epNum,
; 715  :             chanPtr->queueNo,
; 716  :             chanPtr->transmit ? L"TX" : L"RX"));

  00780	e59f3420	 ldr         r3, [pc, #0x420]
  00784	e5933440	 ldr         r3, [r3, #0x440]
  00788	e3130002	 tst         r3, #2
  0078c	0a000017	 beq         |$LN28@cppiProces@2|
  00790	e59d307c	 ldr         r3, [sp, #0x7C]
  00794	e2833014	 add         r3, r3, #0x14
  00798	e5933000	 ldr         r3, [r3]
  0079c	e3530000	 cmp         r3, #0
  007a0	0a000002	 beq         |$LN26@cppiProces@2|
  007a4	e59f340c	 ldr         r3, [pc, #0x40C]
  007a8	e58d3054	 str         r3, [sp, #0x54]
  007ac	ea000001	 b           |$LN27@cppiProces@2|
  007b0		 |$LN26@cppiProces@2|
  007b0	e59f33fc	 ldr         r3, [pc, #0x3FC]
  007b4	e58d3054	 str         r3, [sp, #0x54]
  007b8		 |$LN27@cppiProces@2|
  007b8	e59d3054	 ldr         r3, [sp, #0x54]
  007bc	e58d3004	 str         r3, [sp, #4]
  007c0	e59d307c	 ldr         r3, [sp, #0x7C]
  007c4	e2833019	 add         r3, r3, #0x19
  007c8	e5d33000	 ldrb        r3, [r3]
  007cc	e58d3000	 str         r3, [sp]
  007d0	e5dd300c	 ldrb        r3, [sp, #0xC]
  007d4	e5dd2018	 ldrb        r2, [sp, #0x18]
  007d8	e59d1014	 ldr         r1, [sp, #0x14]
  007dc	e59f03cc	 ldr         r0, [pc, #0x3CC]
  007e0	eb000000	 bl          NKDbgPrintfW
  007e4	e3a03001	 mov         r3, #1
  007e8	e58d3058	 str         r3, [sp, #0x58]
  007ec	ea000001	 b           |$LN29@cppiProces@2|
  007f0		 |$LN28@cppiProces@2|
  007f0	e3a03000	 mov         r3, #0
  007f4	e58d3058	 str         r3, [sp, #0x58]
  007f8		 |$LN29@cppiProces@2|

; 717  :         goto done;

  007f8	ea0000d3	 b           |$done$47559|
  007fc		 |$LN13@cppiProces@2|

; 718  :     }
; 719  : 
; 720  :     if (chanPtr->isTeardownPending) 

  007fc	e59d307c	 ldr         r3, [sp, #0x7C]
  00800	e283301c	 add         r3, r3, #0x1C
  00804	e5933000	 ldr         r3, [r3]
  00808	e3530000	 cmp         r3, #0
  0080c	0a00001c	 beq         |$LN12@cppiProces@2|

; 721  : 	{
; 722  :         DEBUGMSG(ZONE_WARNING,
; 723  :             (L"cppiProcessCompletedPacket: %s Ch %u (EP %u) - Dropped (pending teardown)!\r\n",
; 724  :             chanDir,
; 725  :             chanNum,
; 726  :             epNum));

  00810	e59f3390	 ldr         r3, [pc, #0x390]
  00814	e5933440	 ldr         r3, [r3, #0x440]
  00818	e3130002	 tst         r3, #2
  0081c	0a000015	 beq         |$LN32@cppiProces@2|
  00820	e59f3380	 ldr         r3, [pc, #0x380]
  00824	e5933440	 ldr         r3, [r3, #0x440]
  00828	e3130801	 tst         r3, #1, 16
  0082c	0a000007	 beq         |$LN30@cppiProces@2|
  00830	e5dd300c	 ldrb        r3, [sp, #0xC]
  00834	e5dd2018	 ldrb        r2, [sp, #0x18]
  00838	e59d1014	 ldr         r1, [sp, #0x14]
  0083c	e59f0368	 ldr         r0, [pc, #0x368]
  00840	eb000000	 bl          CeLogMsg
  00844	e3a03001	 mov         r3, #1
  00848	e58d305c	 str         r3, [sp, #0x5C]
  0084c	ea000006	 b           |$LN31@cppiProces@2|
  00850		 |$LN30@cppiProces@2|
  00850	e5dd300c	 ldrb        r3, [sp, #0xC]
  00854	e5dd2018	 ldrb        r2, [sp, #0x18]
  00858	e59d1014	 ldr         r1, [sp, #0x14]
  0085c	e59f0348	 ldr         r0, [pc, #0x348]
  00860	eb000000	 bl          NKDbgPrintfW
  00864	e3a03000	 mov         r3, #0
  00868	e58d305c	 str         r3, [sp, #0x5C]
  0086c		 |$LN31@cppiProces@2|
  0086c	e3a03001	 mov         r3, #1
  00870	e58d3060	 str         r3, [sp, #0x60]
  00874	ea000001	 b           |$LN33@cppiProces@2|
  00878		 |$LN32@cppiProces@2|
  00878	e3a03000	 mov         r3, #0
  0087c	e58d3060	 str         r3, [sp, #0x60]
  00880		 |$LN33@cppiProces@2|

; 727  :         goto done;

  00880	ea0000b1	 b           |$done$47559|
  00884		 |$LN12@cppiProces@2|

; 728  :     }
; 729  : 
; 730  :     if (chanPtr->pEndPt->endpointType != USB_ENDPOINT_TYPE_ISOCHRONOUS)

  00884	e59d307c	 ldr         r3, [sp, #0x7C]
  00888	e2833010	 add         r3, r3, #0x10
  0088c	e5933000	 ldr         r3, [r3]
  00890	e283300c	 add         r3, r3, #0xC
  00894	e5d33000	 ldrb        r3, [r3]
  00898	e3530001	 cmp         r3, #1
  0089c	0a000030	 beq         |$LN11@cppiProces@2|

; 731  :     {
; 732  :         if ((chanPtr->transmit) && (chanPtr->actualLen < chanPtr->transferSize))

  008a0	e59d307c	 ldr         r3, [sp, #0x7C]
  008a4	e2833014	 add         r3, r3, #0x14
  008a8	e5933000	 ldr         r3, [r3]
  008ac	e3530000	 cmp         r3, #0
  008b0	0a00000d	 beq         |$LN10@cppiProces@2|
  008b4	e59d307c	 ldr         r3, [sp, #0x7C]
  008b8	e2832030	 add         r2, r3, #0x30
  008bc	e59d307c	 ldr         r3, [sp, #0x7C]
  008c0	e2833024	 add         r3, r3, #0x24
  008c4	e5922000	 ldr         r2, [r2]
  008c8	e5933000	 ldr         r3, [r3]
  008cc	e1520003	 cmp         r2, r3
  008d0	2a000005	 bcs         |$LN10@cppiProces@2|

; 733  :         {
; 734  :             cppiNextSegment(pPdd, chanPtr);

  008d4	e59d107c	 ldr         r1, [sp, #0x7C]
  008d8	e59d0074	 ldr         r0, [sp, #0x74]
  008dc	eb000000	 bl          cppiNextSegment

; 735  :             transferComplete = FALSE;

  008e0	e3a03000	 mov         r3, #0
  008e4	e58d3010	 str         r3, [sp, #0x10]

; 736  :         }
; 737  :         else if ((!chanPtr->transmit) &&

  008e8	ea00001d	 b           |$LN9@cppiProces@2|
  008ec		 |$LN10@cppiProces@2|

; 738  :                  (chanPtr->actualLen < chanPtr->transferSize) &&
; 739  :                  (buffLen != 0) &&
; 740  :                  (buffLen == (hdPtr->OrigBuffLen & USB_CPPI41_HD_BUF_LENGTH_MASK)))

  008ec	e59d307c	 ldr         r3, [sp, #0x7C]
  008f0	e2833014	 add         r3, r3, #0x14
  008f4	e5933000	 ldr         r3, [r3]
  008f8	e3530000	 cmp         r3, #0
  008fc	1a000018	 bne         |$LN8@cppiProces@2|
  00900	e59d307c	 ldr         r3, [sp, #0x7C]
  00904	e2832030	 add         r2, r3, #0x30
  00908	e59d307c	 ldr         r3, [sp, #0x7C]
  0090c	e2833024	 add         r3, r3, #0x24
  00910	e5922000	 ldr         r2, [r2]
  00914	e5933000	 ldr         r3, [r3]
  00918	e1520003	 cmp         r2, r3
  0091c	2a000010	 bcs         |$LN8@cppiProces@2|
  00920	e59d301c	 ldr         r3, [sp, #0x1C]
  00924	e3530000	 cmp         r3, #0
  00928	0a00000d	 beq         |$LN8@cppiProces@2|
  0092c	e59d3078	 ldr         r3, [sp, #0x78]
  00930	e2833018	 add         r3, r3, #0x18
  00934	e5932000	 ldr         r2, [r3]
  00938	e3e034ff	 mvn         r3, #0xFF, 8
  0093c	e2233503	 eor         r3, r3, #3, 10
  00940	e0022003	 and         r2, r2, r3
  00944	e59d301c	 ldr         r3, [sp, #0x1C]
  00948	e1530002	 cmp         r3, r2
  0094c	1a000004	 bne         |$LN8@cppiProces@2|

; 741  :         {
; 742  :             cppiNextSegment(pPdd, chanPtr);

  00950	e59d107c	 ldr         r1, [sp, #0x7C]
  00954	e59d0074	 ldr         r0, [sp, #0x74]
  00958	eb000000	 bl          cppiNextSegment

; 743  :             transferComplete = FALSE;

  0095c	e3a03000	 mov         r3, #0
  00960	e58d3010	 str         r3, [sp, #0x10]
  00964		 |$LN8@cppiProces@2|
  00964		 |$LN9@cppiProces@2|
  00964		 |$LN11@cppiProces@2|

; 744  :         }
; 745  :     }
; 746  : 
; 747  :     if (transferComplete)

  00964	e59d3010	 ldr         r3, [sp, #0x10]
  00968	e3530000	 cmp         r3, #0
  0096c	0a000076	 beq         |$LN7@cppiProces@2|

; 748  :     {
; 749  :         // Disable Rx for this channel until a new BD has been supplied
; 750  :         if(!chanPtr->transmit)

  00970	e59d307c	 ldr         r3, [sp, #0x7C]
  00974	e2833014	 add         r3, r3, #0x14
  00978	e5933000	 ldr         r3, [r3]
  0097c	e3530000	 cmp         r3, #0
  00980	1a000004	 bne         |$LN6@cppiProces@2|

; 751  : 		{
; 752  :             USBCDMA_ConfigureScheduleRx(chanPtr->channelNo, FALSE);

  00984	e3a01000	 mov         r1, #0
  00988	e59d307c	 ldr         r3, [sp, #0x7C]
  0098c	e2833018	 add         r3, r3, #0x18
  00990	e5d30000	 ldrb        r0, [r3]
  00994	eb000000	 bl          USBCDMA_ConfigureScheduleRx
  00998		 |$LN6@cppiProces@2|

; 753  : 		}
; 754  : 
; 755  :         if (chanPtr->pEndPt->endpointType != USB_ENDPOINT_TYPE_ISOCHRONOUS)

  00998	e59d307c	 ldr         r3, [sp, #0x7C]
  0099c	e2833010	 add         r3, r3, #0x10
  009a0	e5933000	 ldr         r3, [r3]
  009a4	e283300c	 add         r3, r3, #0xC
  009a8	e5d33000	 ldrb        r3, [r3]
  009ac	e3530001	 cmp         r3, #1
  009b0	0a000008	 beq         |$LN5@cppiProces@2|

; 756  :         {
; 757  :             chanPtr->Channel.bStatus = MGC_DMA_STATUS_FREE;

  009b4	e59d307c	 ldr         r3, [sp, #0x7C]
  009b8	e2832004	 add         r2, r3, #4
  009bc	e3a03001	 mov         r3, #1
  009c0	e5823000	 str         r3, [r2]

; 758  :             pfnDmaCompleted = chanPtr->pfnDmaCompleted;

  009c4	e59d307c	 ldr         r3, [sp, #0x7C]
  009c8	e2833044	 add         r3, r3, #0x44
  009cc	e5933000	 ldr         r3, [r3]
  009d0	e58d3020	 str         r3, [sp, #0x20]

; 759  :         }
; 760  :         else

  009d4	ea00005c	 b           |$LN4@cppiProces@2|
  009d8		 |$LN5@cppiProces@2|

; 761  :         {
; 762  :             chanPtr->nISOHDQueued--;

  009d8	e59d307c	 ldr         r3, [sp, #0x7C]
  009dc	e283303c	 add         r3, r3, #0x3C
  009e0	e5933000	 ldr         r3, [r3]
  009e4	e2432001	 sub         r2, r3, #1
  009e8	e59d307c	 ldr         r3, [sp, #0x7C]
  009ec	e283303c	 add         r3, r3, #0x3C
  009f0	e5832000	 str         r2, [r3]

; 763  :             chanPtr->nISOHDLastIndex = hdPtr->Index;

  009f4	e59d3078	 ldr         r3, [sp, #0x78]
  009f8	e2831034	 add         r1, r3, #0x34
  009fc	e59d307c	 ldr         r3, [sp, #0x7C]
  00a00	e2832040	 add         r2, r3, #0x40
  00a04	e5913000	 ldr         r3, [r1]
  00a08	e5823000	 str         r3, [r2]

; 764  :             if (chanPtr->nISOHDLastIndex == chanPtr->nISOHDPerTransfer)

  00a0c	e59d307c	 ldr         r3, [sp, #0x7C]
  00a10	e2832040	 add         r2, r3, #0x40
  00a14	e59d307c	 ldr         r3, [sp, #0x7C]
  00a18	e2833034	 add         r3, r3, #0x34
  00a1c	e5922000	 ldr         r2, [r2]
  00a20	e5933000	 ldr         r3, [r3]
  00a24	e1520003	 cmp         r2, r3
  00a28	1a000003	 bne         |$LN3@cppiProces@2|

; 765  : 			{
; 766  :                 chanPtr->nISOHDLastIndex = 0;

  00a2c	e59d307c	 ldr         r3, [sp, #0x7C]
  00a30	e2832040	 add         r2, r3, #0x40
  00a34	e3a03000	 mov         r3, #0
  00a38	e5823000	 str         r3, [r2]
  00a3c		 |$LN3@cppiProces@2|

; 767  : 			}
; 768  : 
; 769  :             // Make callback when we see the required HD
; 770  :             if (hdPtr->Index == chanPtr->nISOHDForCallback)

  00a3c	e59d3078	 ldr         r3, [sp, #0x78]
  00a40	e2832034	 add         r2, r3, #0x34
  00a44	e59d307c	 ldr         r3, [sp, #0x7C]
  00a48	e2833038	 add         r3, r3, #0x38
  00a4c	e5922000	 ldr         r2, [r2]
  00a50	e5933000	 ldr         r3, [r3]
  00a54	e1520003	 cmp         r2, r3
  00a58	1a00003b	 bne         |$LN2@cppiProces@2|

; 771  :             {
; 772  :                 PRINTMSG(ZONE_PDD_ISO,
; 773  :                   (L"cppiProcessCompletedPacket: %s Ch %u (EP %u), ISO HD index %d, total %d, actualLen %d, callback\r\n",
; 774  :                    chanDir, chanNum, epNum, hdPtr->Index, chanPtr->nISOHDPerTransfer, chanPtr->actualLen));

  00a5c	e59f3144	 ldr         r3, [pc, #0x144]
  00a60	e5933440	 ldr         r3, [r3, #0x440]
  00a64	e3130901	 tst         r3, #1, 18
  00a68	0a00002d	 beq         |$LN36@cppiProces@2|
  00a6c	e59f3134	 ldr         r3, [pc, #0x134]
  00a70	e5933440	 ldr         r3, [r3, #0x440]
  00a74	e3130801	 tst         r3, #1, 16
  00a78	0a000013	 beq         |$LN34@cppiProces@2|
  00a7c	e59d307c	 ldr         r3, [sp, #0x7C]
  00a80	e2833030	 add         r3, r3, #0x30
  00a84	e5933000	 ldr         r3, [r3]
  00a88	e58d3008	 str         r3, [sp, #8]
  00a8c	e59d307c	 ldr         r3, [sp, #0x7C]
  00a90	e2833034	 add         r3, r3, #0x34
  00a94	e5933000	 ldr         r3, [r3]
  00a98	e58d3004	 str         r3, [sp, #4]
  00a9c	e59d3078	 ldr         r3, [sp, #0x78]
  00aa0	e2833034	 add         r3, r3, #0x34
  00aa4	e5933000	 ldr         r3, [r3]
  00aa8	e58d3000	 str         r3, [sp]
  00aac	e5dd300c	 ldrb        r3, [sp, #0xC]
  00ab0	e5dd2018	 ldrb        r2, [sp, #0x18]
  00ab4	e59d1014	 ldr         r1, [sp, #0x14]
  00ab8	e59f00e4	 ldr         r0, [pc, #0xE4]
  00abc	eb000000	 bl          CeLogMsg
  00ac0	e3a03001	 mov         r3, #1
  00ac4	e58d3064	 str         r3, [sp, #0x64]
  00ac8	ea000012	 b           |$LN35@cppiProces@2|
  00acc		 |$LN34@cppiProces@2|
  00acc	e59d307c	 ldr         r3, [sp, #0x7C]
  00ad0	e2833030	 add         r3, r3, #0x30
  00ad4	e5933000	 ldr         r3, [r3]
  00ad8	e58d3008	 str         r3, [sp, #8]
  00adc	e59d307c	 ldr         r3, [sp, #0x7C]
  00ae0	e2833034	 add         r3, r3, #0x34
  00ae4	e5933000	 ldr         r3, [r3]
  00ae8	e58d3004	 str         r3, [sp, #4]
  00aec	e59d3078	 ldr         r3, [sp, #0x78]
  00af0	e2833034	 add         r3, r3, #0x34
  00af4	e5933000	 ldr         r3, [r3]
  00af8	e58d3000	 str         r3, [sp]
  00afc	e5dd300c	 ldrb        r3, [sp, #0xC]
  00b00	e5dd2018	 ldrb        r2, [sp, #0x18]
  00b04	e59d1014	 ldr         r1, [sp, #0x14]
  00b08	e59f0094	 ldr         r0, [pc, #0x94]
  00b0c	eb000000	 bl          NKDbgPrintfW
  00b10	e3a03000	 mov         r3, #0
  00b14	e58d3064	 str         r3, [sp, #0x64]
  00b18		 |$LN35@cppiProces@2|
  00b18	e3a03001	 mov         r3, #1
  00b1c	e58d3068	 str         r3, [sp, #0x68]
  00b20	ea000001	 b           |$LN37@cppiProces@2|
  00b24		 |$LN36@cppiProces@2|
  00b24	e3a03000	 mov         r3, #0
  00b28	e58d3068	 str         r3, [sp, #0x68]
  00b2c		 |$LN37@cppiProces@2|

; 775  : 
; 776  :                 chanPtr->Channel.bStatus = MGC_DMA_STATUS_FREE;

  00b2c	e59d307c	 ldr         r3, [sp, #0x7C]
  00b30	e2832004	 add         r2, r3, #4
  00b34	e3a03001	 mov         r3, #1
  00b38	e5823000	 str         r3, [r2]

; 777  :                 pfnDmaCompleted = chanPtr->pfnDmaCompleted;

  00b3c	e59d307c	 ldr         r3, [sp, #0x7C]
  00b40	e2833044	 add         r3, r3, #0x44
  00b44	e5933000	 ldr         r3, [r3]
  00b48	e58d3020	 str         r3, [sp, #0x20]
  00b4c		 |$LN2@cppiProces@2|
  00b4c		 |$LN4@cppiProces@2|
  00b4c		 |$LN7@cppiProces@2|
  00b4c		 |$done$47559|

; 778  :             }
; 779  :         }
; 780  :     }
; 781  : 
; 782  : done:
; 783  :     cppiHdFree(f_CppiObj, hdPtr);

  00b4c	e59d1078	 ldr         r1, [sp, #0x78]
  00b50	e59f3048	 ldr         r3, [pc, #0x48]
  00b54	e5930000	 ldr         r0, [r3]
  00b58	eb000000	 bl          cppiHdFree

; 784  :     UNLOCK_ENDPOINT(pPdd);

  00b5c	e59d3074	 ldr         r3, [sp, #0x74]
  00b60	e2830e27	 add         r0, r3, #0x27, 28
  00b64	eb000000	 bl          LeaveCriticalSection

; 785  : 
; 786  :     // Invoke DMA Completion Handler
; 787  :     if (pfnDmaCompleted != NULL)

  00b68	e59d3020	 ldr         r3, [sp, #0x20]
  00b6c	e3530000	 cmp         r3, #0
  00b70	0a000007	 beq         |$LN1@cppiProces@2|

; 788  : 	{
; 789  :         pfnDmaCompleted(pPdd, chanNum, epNum);

  00b74	e5dd300c	 ldrb        r3, [sp, #0xC]
  00b78	e1a02003	 mov         r2, r3
  00b7c	e5dd3018	 ldrb        r3, [sp, #0x18]
  00b80	e1a01003	 mov         r1, r3
  00b84	e59d0074	 ldr         r0, [sp, #0x74]
  00b88	e59d3020	 ldr         r3, [sp, #0x20]
  00b8c	e1a0e00f	 mov         lr, pc
  00b90	e12fff13	 bx          r3
  00b94		 |$LN1@cppiProces@2|
  00b94		 |$LN16@cppiProces@2|

; 790  : 	}
; 791  : 
; 792  :     PRINTMSG(/*ZONE_PDD_DMA*/0, (L"-cppiProcessCompletedPacket\r\n"));
; 793  : }

  00b94	e28dd06c	 add         sp, sp, #0x6C
  00b98	e89d6000	 ldmia       sp, {sp, lr}
  00b9c	e12fff1e	 bx          lr
  00ba0		 |$LN41@cppiProces@2|
  00ba0		 |$LN42@cppiProces@2|
  00ba0	00000000	 DCD         |f_CppiObj|
  00ba4		 |$LN43@cppiProces@2|
  00ba4	00000000	 DCD         |??_C@_1ME@HGFEFPFG@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@|
  00ba8		 |$LN44@cppiProces@2|
  00ba8	00000000	 DCD         |dpCurSettings|
  00bac		 |$LN45@cppiProces@2|
  00bac	00000000	 DCD         |??_C@_1JK@PNAHIGGE@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@|
  00bb0		 |$LN46@cppiProces@2|
  00bb0	00000000	 DCD         |??_C@_1IM@POBJEFAI@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@|
  00bb4		 |$LN47@cppiProces@2|
  00bb4	00000000	 DCD         |??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@|
  00bb8		 |$LN48@cppiProces@2|
  00bb8	00000000	 DCD         |??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@|
  00bbc		 |$LN49@cppiProces@2|
  00bbc	00000000	 DCD         |??_C@_1HE@IBPFHKOH@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC@|
  00bc0		 |$LN50@cppiProces@2|
  00bc0	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00bc4		 |$LN51@cppiProces@2|
  00bc4	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00bc8		 |$LN52@cppiProces@2|
  00bc8	00000000	 DCD         |??_C@_1HC@CEGIGIGI@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5@|
  00bcc		 |$M48053|

			 ENDP  ; |cppiProcessCompletedPacket|

	EXPORT	|__$ArrayPad$| [ DATA ]
	IMPORT	|CeLogData|
	IMPORT	|StringCchLengthW|
	IMPORT	|StringCchVPrintfW|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00028			 AREA	 |.pdata|, PDATA
|$T48081| DCD	|$LN7@CeLogMsg|
	DCD	0xc0003704

  00000			 AREA	 |.xdata|, DATA
|$T48077| DCD	0xffffffcc
; Function compile flags: /Odtp
; File c:\wince600\public\common\sdk\inc\celog.h

  00bcc			 AREA	 |.text|, CODE, ARM

  00bcc	00000000	 DCD         |__GSHandlerCheck|
  00bd0	00000000	 DCD         |$T48077|

  00bd4		 |CeLogMsg| PROC

; 1020 : {

  00bd4		 |$LN7@CeLogMsg|
  00bd4	e1a0c00d	 mov         r12, sp
  00bd8	e92d000f	 stmdb       sp!, {r0 - r3}
  00bdc	e92d5000	 stmdb       sp!, {r12, lr}
  00be0	e24ddd09	 sub         sp, sp, #9, 26
  00be4		 |$M48078|
  00be4	e59f30c0	 ldr         r3, [pc, #0xC0]
  00be8	e5933000	 ldr         r3, [r3]
  00bec	e58d3224	 str         r3, [sp, #0x224]

; 1021 :     va_list arglist;
; 1022 :     WCHAR   szTemp[MAX_PATH];
; 1023 :     size_t  cchLen;
; 1024 :     HRESULT hr;
; 1025 : 
; 1026 :     // Compose a single string using the input args
; 1027 :     va_start(arglist, szFormat);

  00bf0	e28d3f92	 add         r3, sp, #0x92, 30
  00bf4	e2833004	 add         r3, r3, #4
  00bf8	e58d3010	 str         r3, [sp, #0x10]

; 1028 :     hr = StringCchVPrintfW(szTemp, MAX_PATH, szFormat, arglist);

  00bfc	e59d3010	 ldr         r3, [sp, #0x10]
  00c00	e59d2248	 ldr         r2, [sp, #0x248]
  00c04	e3a01f41	 mov         r1, #0x41, 30
  00c08	e28d0014	 add         r0, sp, #0x14
  00c0c	eb000000	 bl          StringCchVPrintfW
  00c10	e58d0238	 str         r0, [sp, #0x238]
  00c14	e59d3238	 ldr         r3, [sp, #0x238]
  00c18	e58d321c	 str         r3, [sp, #0x21C]

; 1029 :     if (SUCCEEDED(hr)) {

  00c1c	e59d321c	 ldr         r3, [sp, #0x21C]
  00c20	e3530000	 cmp         r3, #0
  00c24	ba00001b	 blt         |$LN2@CeLogMsg|

; 1030 :         hr = StringCchLengthW(szTemp, MAX_PATH, &cchLen);

  00c28	e28d2e22	 add         r2, sp, #0x22, 28
  00c2c	e3a01f41	 mov         r1, #0x41, 30
  00c30	e28d0014	 add         r0, sp, #0x14
  00c34	eb000000	 bl          StringCchLengthW
  00c38	e58d023c	 str         r0, [sp, #0x23C]
  00c3c	e59d323c	 ldr         r3, [sp, #0x23C]
  00c40	e58d321c	 str         r3, [sp, #0x21C]

; 1031 :         if (SUCCEEDED(hr)) {

  00c44	e59d321c	 ldr         r3, [sp, #0x21C]
  00c48	e3530000	 cmp         r3, #0
  00c4c	ba000011	 blt         |$LN1@CeLogMsg|

; 1032 :             CeLogData(TRUE, CELID_RAW_WCHAR, szTemp, (WORD)((cchLen + 1) * sizeof(WCHAR)),
; 1033 :                       0, CELZONE_ALWAYSON, 0, FALSE);

  00c50	e3a03000	 mov         r3, #0
  00c54	e58d300c	 str         r3, [sp, #0xC]
  00c58	e3a03000	 mov         r3, #0
  00c5c	e58d3008	 str         r3, [sp, #8]
  00c60	e3a03101	 mov         r3, #1, 2
  00c64	e58d3004	 str         r3, [sp, #4]
  00c68	e3a03000	 mov         r3, #0
  00c6c	e58d3000	 str         r3, [sp]
  00c70	e59d3220	 ldr         r3, [sp, #0x220]
  00c74	e2832001	 add         r2, r3, #1
  00c78	e3a03002	 mov         r3, #2
  00c7c	e0030392	 mul         r3, r2, r3
  00c80	e1a03803	 mov         r3, r3, lsl #16
  00c84	e1a03823	 mov         r3, r3, lsr #16
  00c88	e28d2014	 add         r2, sp, #0x14
  00c8c	e3a0104a	 mov         r1, #0x4A
  00c90	e3a00001	 mov         r0, #1
  00c94	eb000000	 bl          CeLogData
  00c98		 |$LN1@CeLogMsg|
  00c98		 |$LN2@CeLogMsg|

; 1020 : {

  00c98	e59d0224	 ldr         r0, [sp, #0x224]
  00c9c	eb000000	 bl          __security_check_cookie

; 1034 :         }
; 1035 :     }
; 1036 : }

  00ca0	e28ddd09	 add         sp, sp, #9, 26
  00ca4	e89d6000	 ldmia       sp, {sp, lr}
  00ca8	e12fff1e	 bx          lr
  00cac		 |$LN8@CeLogMsg|
  00cac		 |$LN9@CeLogMsg|
  00cac	00000000	 DCD         |__security_cookie|
  00cb0		 |$M48079|

			 ENDP  ; |CeLogMsg|

	EXPORT	|??_C@_1FI@GDHDOONE@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAa?$AA?5?$AAH?$AAo?$AAs?$AAt?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo@| [ DATA ] ; `string'

  00030			 AREA	 |.pdata|, PDATA
|$T48092| DCD	|$LN12@cppiHdFree|
	DCD	0x40005704
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\usb\usbfn\cppidma.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@GDHDOONE@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAa?$AA?5?$AAH?$AAo?$AAs?$AAt?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "H", 0x0, "d", 0x0, "F"
	DCB	0x0, "r", 0x0, "e", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "N"
	DCB	0x0, "o", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, " ", 0x0, "H"
	DCB	0x0, "o", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "y", 0x0, "p"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00cb0			 AREA	 |.text|, CODE, ARM

  00cb0		 |cppiHdFree| PROC

; 398  : {

  00cb0		 |$LN12@cppiHdFree|
  00cb0	e1a0c00d	 mov         r12, sp
  00cb4	e92d0003	 stmdb       sp!, {r0, r1}
  00cb8	e92d5000	 stmdb       sp!, {r12, lr}
  00cbc	e24dd00c	 sub         sp, sp, #0xC
  00cc0		 |$M48089|

; 399  :     UINT32 type;
; 400  : 
; 401  :     DEBUGCHK(cppi != NULL);

  00cc0	e59d3014	 ldr         r3, [sp, #0x14]
  00cc4	e3530000	 cmp         r3, #0
  00cc8	0a000002	 beq         |$LN6@cppiHdFree|
  00ccc	e3a03001	 mov         r3, #1
  00cd0	e58d3004	 str         r3, [sp, #4]
  00cd4	ea000008	 b           |$LN7@cppiHdFree|
  00cd8		 |$LN6@cppiHdFree|
  00cd8	e3a03c01	 mov         r3, #1, 24
  00cdc	e3833091	 orr         r3, r3, #0x91
  00ce0	e59f2118	 ldr         r2, [pc, #0x118]
  00ce4	e59f111c	 ldr         r1, [pc, #0x11C]
  00ce8	e59f0114	 ldr         r0, [pc, #0x114]
  00cec	eb000000	 bl          NKDbgPrintfW
  00cf0	e6000010	 __debugbreak_ce
  00cf4	e3a03000	 mov         r3, #0
  00cf8	e58d3004	 str         r3, [sp, #4]
  00cfc		 |$LN7@cppiHdFree|

; 402  :     if (cppi == NULL)

  00cfc	e59d3014	 ldr         r3, [sp, #0x14]
  00d00	e3530000	 cmp         r3, #0
  00d04	1a000000	 bne         |$LN3@cppiHdFree|

; 403  : 	{
; 404  :         return;

  00d08	ea000037	 b           |$LN4@cppiHdFree|
  00d0c		 |$LN3@cppiHdFree|

; 405  : 	}
; 406  : 
; 407  :     DEBUGCHK(hd != NULL);

  00d0c	e59d3018	 ldr         r3, [sp, #0x18]
  00d10	e3530000	 cmp         r3, #0
  00d14	0a000002	 beq         |$LN8@cppiHdFree|
  00d18	e3a03001	 mov         r3, #1
  00d1c	e58d3008	 str         r3, [sp, #8]
  00d20	ea000008	 b           |$LN9@cppiHdFree|
  00d24		 |$LN8@cppiHdFree|
  00d24	e3a03c01	 mov         r3, #1, 24
  00d28	e3833097	 orr         r3, r3, #0x97
  00d2c	e59f20cc	 ldr         r2, [pc, #0xCC]
  00d30	e59f10d0	 ldr         r1, [pc, #0xD0]
  00d34	e59f00c8	 ldr         r0, [pc, #0xC8]
  00d38	eb000000	 bl          NKDbgPrintfW
  00d3c	e6000010	 __debugbreak_ce
  00d40	e3a03000	 mov         r3, #0
  00d44	e58d3008	 str         r3, [sp, #8]
  00d48		 |$LN9@cppiHdFree|

; 408  :     if (hd == NULL)

  00d48	e59d3018	 ldr         r3, [sp, #0x18]
  00d4c	e3530000	 cmp         r3, #0
  00d50	1a000000	 bne         |$LN2@cppiHdFree|

; 409  : 	{
; 410  :         return;

  00d54	ea000024	 b           |$LN4@cppiHdFree|
  00d58		 |$LN2@cppiHdFree|

; 411  : 	}
; 412  : 
; 413  :     type = (hd->DescInfo & USB_CPPI41_DESC_TYPE_MASK) >> USB_CPPI41_DESC_TYPE_SHIFT;

  00d58	e59d3018	 ldr         r3, [sp, #0x18]
  00d5c	e5933000	 ldr         r3, [r3]
  00d60	e203333e	 and         r3, r3, #0x3E, 6
  00d64	e1a03da3	 mov         r3, r3, lsr #27
  00d68	e58d3000	 str         r3, [sp]

; 414  :     if (type != USB_CPPI41_DESC_TYPE_HOST) 

  00d6c	e59d3000	 ldr         r3, [sp]
  00d70	e3530010	 cmp         r3, #0x10
  00d74	0a000008	 beq         |$LN1@cppiHdFree|

; 415  : 	{
; 416  :         ERRORMSG(TRUE,
; 417  :             (L"cppiHdFree: Not a Host descriptor type %u\r\n",
; 418  :             type));

  00d78	e3a02c01	 mov         r2, #1, 24
  00d7c	e38220a2	 orr         r2, r2, #0xA2
  00d80	e59f1078	 ldr         r1, [pc, #0x78]
  00d84	e59f0070	 ldr         r0, [pc, #0x70]
  00d88	eb000000	 bl          NKDbgPrintfW
  00d8c	e59d1000	 ldr         r1, [sp]
  00d90	e59f0060	 ldr         r0, [pc, #0x60]
  00d94	eb000000	 bl          NKDbgPrintfW

; 419  :         return;

  00d98	ea000013	 b           |$LN4@cppiHdFree|
  00d9c		 |$LN1@cppiHdFree|

; 420  :     }
; 421  : 
; 422  :     LOCK_HD_POOL(cppi);

  00d9c	e59d3014	 ldr         r3, [sp, #0x14]
  00da0	e2833b02	 add         r3, r3, #2, 22
  00da4	e28300b8	 add         r0, r3, #0xB8
  00da8	eb000000	 bl          EnterCriticalSection

; 423  :     hd->next = cppi->poolHead;

  00dac	e59d3014	 ldr         r3, [sp, #0x14]
  00db0	e2833b02	 add         r3, r3, #2, 22
  00db4	e28310b4	 add         r1, r3, #0xB4
  00db8	e59d3018	 ldr         r3, [sp, #0x18]
  00dbc	e2832028	 add         r2, r3, #0x28
  00dc0	e5913000	 ldr         r3, [r1]
  00dc4	e5823000	 str         r3, [r2]

; 424  :     cppi->poolHead = hd;

  00dc8	e59d3014	 ldr         r3, [sp, #0x14]
  00dcc	e2833b02	 add         r3, r3, #2, 22
  00dd0	e28320b4	 add         r2, r3, #0xB4
  00dd4	e59d3018	 ldr         r3, [sp, #0x18]
  00dd8	e5823000	 str         r3, [r2]

; 425  :     UNLOCK_HD_POOL(cppi);

  00ddc	e59d3014	 ldr         r3, [sp, #0x14]
  00de0	e2833b02	 add         r3, r3, #2, 22
  00de4	e28300b8	 add         r0, r3, #0xB8
  00de8	eb000000	 bl          LeaveCriticalSection
  00dec		 |$LN4@cppiHdFree|

; 426  : }

  00dec	e28dd00c	 add         sp, sp, #0xC
  00df0	e89d6000	 ldmia       sp, {sp, lr}
  00df4	e12fff1e	 bx          lr
  00df8		 |$LN13@cppiHdFree|
  00df8		 |$LN14@cppiHdFree|
  00df8	00000000	 DCD         |??_C@_1FI@GDHDOONE@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAF?$AAr?$AAe?$AAe?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAa?$AA?5?$AAH?$AAo?$AAs?$AAt?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo@|
  00dfc		 |$LN15@cppiHdFree|
  00dfc	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00e00		 |$LN16@cppiHdFree|
  00e00	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00e04		 |$LN17@cppiHdFree|
  00e04	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00e08		 |$LN18@cppiHdFree|
  00e08	00000000	 DCD         |dpCurSettings|
  00e0c		 |$M48090|

			 ENDP  ; |cppiHdFree|

	EXPORT	|??_C@_1FE@GIEHHIOF@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JE@HCAMEFBJ@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@OEBHEFNP@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@GPDPLMAG@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF@| [ DATA ] ; `string'

  00038			 AREA	 |.pdata|, PDATA
|$T48115| DCD	|$LN19@cppiProces@3|
	DCD	0x40007e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@GIEHHIOF@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, "T", 0x0, "e", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JE@HCAMEFBJ@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "T", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "N", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@OEBHEFNP@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C", 0x0, "o"
	DCB	0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, "T", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, ",", 0x0, " ", 0x0, "N", 0x0, "U", 0x0, "L"
	DCB	0x0, "L", 0x0, " ", 0x0, "T", 0x0, "D", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@GPDPLMAG@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF@| DCB "+"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "r"
	DCB	0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, "C"
	DCB	0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, "T", 0x0, "e", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00e0c			 AREA	 |.text|, CODE, ARM

  00e0c		 |cppiProcessCompletedTeardown| PROC

; 803  : {

  00e0c		 |$LN19@cppiProces@3|
  00e0c	e1a0c00d	 mov         r12, sp
  00e10	e92d0007	 stmdb       sp!, {r0 - r2}
  00e14	e92d5000	 stmdb       sp!, {r12, lr}
  00e18	e24dd020	 sub         sp, sp, #0x20
  00e1c		 |$M48112|

; 804  : #ifndef SHIP_BUILD
; 805  :     BYTE   chanNum = chanPtr->channelNo;

  00e1c	e59d3030	 ldr         r3, [sp, #0x30]
  00e20	e2833018	 add         r3, r3, #0x18
  00e24	e5d33000	 ldrb        r3, [r3]
  00e28	e5cd3004	 strb        r3, [sp, #4]

; 806  :     WCHAR *chanDir = chanPtr->transmit ? L"TX" : L"RX";

  00e2c	e59d3030	 ldr         r3, [sp, #0x30]
  00e30	e2833014	 add         r3, r3, #0x14
  00e34	e5933000	 ldr         r3, [r3]
  00e38	e3530000	 cmp         r3, #0
  00e3c	0a000002	 beq         |$LN5@cppiProces@3|
  00e40	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00e44	e58d3008	 str         r3, [sp, #8]
  00e48	ea000001	 b           |$LN6@cppiProces@3|
  00e4c		 |$LN5@cppiProces@3|
  00e4c	e59f31a8	 ldr         r3, [pc, #0x1A8]
  00e50	e58d3008	 str         r3, [sp, #8]
  00e54		 |$LN6@cppiProces@3|
  00e54	e59d3008	 ldr         r3, [sp, #8]
  00e58	e58d3000	 str         r3, [sp]

; 807  : #endif
; 808  : 
; 809  :     DEBUGMSG(ZONE_PDD_DMA,
; 810  :         (L"+cppiProcessCompletedTeardown: %s Ch %u\r\n",
; 811  :         chanDir,
; 812  :         chanNum));

  00e5c	e59f3180	 ldr         r3, [pc, #0x180]
  00e60	e5933440	 ldr         r3, [r3, #0x440]
  00e64	e3130902	 tst         r3, #2, 18
  00e68	0a000013	 beq         |$LN9@cppiProces@3|
  00e6c	e59f3170	 ldr         r3, [pc, #0x170]
  00e70	e5933440	 ldr         r3, [r3, #0x440]
  00e74	e3130801	 tst         r3, #1, 16
  00e78	0a000006	 beq         |$LN7@cppiProces@3|
  00e7c	e5dd2004	 ldrb        r2, [sp, #4]
  00e80	e59d1000	 ldr         r1, [sp]
  00e84	e59f016c	 ldr         r0, [pc, #0x16C]
  00e88	eb000000	 bl          CeLogMsg
  00e8c	e3a03001	 mov         r3, #1
  00e90	e58d300c	 str         r3, [sp, #0xC]
  00e94	ea000005	 b           |$LN8@cppiProces@3|
  00e98		 |$LN7@cppiProces@3|
  00e98	e5dd2004	 ldrb        r2, [sp, #4]
  00e9c	e59d1000	 ldr         r1, [sp]
  00ea0	e59f0150	 ldr         r0, [pc, #0x150]
  00ea4	eb000000	 bl          NKDbgPrintfW
  00ea8	e3a03000	 mov         r3, #0
  00eac	e58d300c	 str         r3, [sp, #0xC]
  00eb0		 |$LN8@cppiProces@3|
  00eb0	e3a03001	 mov         r3, #1
  00eb4	e58d3010	 str         r3, [sp, #0x10]
  00eb8	ea000001	 b           |$LN10@cppiProces@3|
  00ebc		 |$LN9@cppiProces@3|
  00ebc	e3a03000	 mov         r3, #0
  00ec0	e58d3010	 str         r3, [sp, #0x10]
  00ec4		 |$LN10@cppiProces@3|

; 813  : 
; 814  :     if (tdPtr == NULL) 

  00ec4	e59d302c	 ldr         r3, [sp, #0x2C]
  00ec8	e3530000	 cmp         r3, #0
  00ecc	1a000009	 bne         |$LN2@cppiProces@3|

; 815  : 	{
; 816  :         ERRORMSG(TRUE,
; 817  :             (L"cppiProcessCompletedTeardown: %s Ch %u, NULL TD\r\n",
; 818  :             chanDir,
; 819  :             chanNum));

  00ed0	e3a02c03	 mov         r2, #3, 24
  00ed4	e3822033	 orr         r2, r2, #0x33
  00ed8	e59f1110	 ldr         r1, [pc, #0x110]
  00edc	e59f0108	 ldr         r0, [pc, #0x108]
  00ee0	eb000000	 bl          NKDbgPrintfW
  00ee4	e5dd2004	 ldrb        r2, [sp, #4]
  00ee8	e59d1000	 ldr         r1, [sp]
  00eec	e59f0100	 ldr         r0, [pc, #0x100]
  00ef0	eb000000	 bl          NKDbgPrintfW

; 820  :     }
; 821  :     else

  00ef4	ea00001c	 b           |$LN1@cppiProces@3|
  00ef8		 |$LN2@cppiProces@3|

; 822  :     {
; 823  :         ERRORMSG(chanPtr->isTeardownPending == FALSE,
; 824  :             (L"cppiProcessCompletedTeardown: %s Ch %u - Not requested for this channel\r\n",
; 825  :             chanDir,
; 826  :             chanNum));

  00ef8	e59d3030	 ldr         r3, [sp, #0x30]
  00efc	e283301c	 add         r3, r3, #0x1C
  00f00	e5933000	 ldr         r3, [r3]
  00f04	e3530000	 cmp         r3, #0
  00f08	1a00000b	 bne         |$LN11@cppiProces@3|
  00f0c	e3a02c03	 mov         r2, #3, 24
  00f10	e382203a	 orr         r2, r2, #0x3A
  00f14	e59f10d4	 ldr         r1, [pc, #0xD4]
  00f18	e59f00cc	 ldr         r0, [pc, #0xCC]
  00f1c	eb000000	 bl          NKDbgPrintfW
  00f20	e5dd2004	 ldrb        r2, [sp, #4]
  00f24	e59d1000	 ldr         r1, [sp]
  00f28	e59f00b8	 ldr         r0, [pc, #0xB8]
  00f2c	eb000000	 bl          NKDbgPrintfW
  00f30	e3a03001	 mov         r3, #1
  00f34	e58d3014	 str         r3, [sp, #0x14]
  00f38	ea000001	 b           |$LN12@cppiProces@3|
  00f3c		 |$LN11@cppiProces@3|
  00f3c	e3a03000	 mov         r3, #0
  00f40	e58d3014	 str         r3, [sp, #0x14]
  00f44		 |$LN12@cppiProces@3|

; 827  : 
; 828  :         cppiQueuePush(pPdd->pCppiRegs, USB_CPPI_TDFREE_QNUM, tdPtr);

  00f44	e59d202c	 ldr         r2, [sp, #0x2C]
  00f48	e3a0100f	 mov         r1, #0xF
  00f4c	e59d3028	 ldr         r3, [sp, #0x28]
  00f50	e2833020	 add         r3, r3, #0x20
  00f54	e5930000	 ldr         r0, [r3]
  00f58	eb000000	 bl          cppiQueuePush

; 829  :         chanPtr->isTeardownPending = FALSE;

  00f5c	e59d3030	 ldr         r3, [sp, #0x30]
  00f60	e283201c	 add         r2, r3, #0x1C
  00f64	e3a03000	 mov         r3, #0
  00f68	e5823000	 str         r3, [r2]
  00f6c		 |$LN1@cppiProces@3|

; 830  :     }
; 831  : 
; 832  :     DEBUGMSG(ZONE_PDD_DMA,
; 833  :         (L"-cppiProcessCompletedTeardown: %s Ch %u\r\n",
; 834  :         chanDir,
; 835  :         chanNum));

  00f6c	e59f3070	 ldr         r3, [pc, #0x70]
  00f70	e5933440	 ldr         r3, [r3, #0x440]
  00f74	e3130902	 tst         r3, #2, 18
  00f78	0a000013	 beq         |$LN15@cppiProces@3|
  00f7c	e59f3060	 ldr         r3, [pc, #0x60]
  00f80	e5933440	 ldr         r3, [r3, #0x440]
  00f84	e3130801	 tst         r3, #1, 16
  00f88	0a000006	 beq         |$LN13@cppiProces@3|
  00f8c	e5dd2004	 ldrb        r2, [sp, #4]
  00f90	e59d1000	 ldr         r1, [sp]
  00f94	e59f0044	 ldr         r0, [pc, #0x44]
  00f98	eb000000	 bl          CeLogMsg
  00f9c	e3a03001	 mov         r3, #1
  00fa0	e58d3018	 str         r3, [sp, #0x18]
  00fa4	ea000005	 b           |$LN14@cppiProces@3|
  00fa8		 |$LN13@cppiProces@3|
  00fa8	e5dd2004	 ldrb        r2, [sp, #4]
  00fac	e59d1000	 ldr         r1, [sp]
  00fb0	e59f0028	 ldr         r0, [pc, #0x28]
  00fb4	eb000000	 bl          NKDbgPrintfW
  00fb8	e3a03000	 mov         r3, #0
  00fbc	e58d3018	 str         r3, [sp, #0x18]
  00fc0		 |$LN14@cppiProces@3|
  00fc0	e3a03001	 mov         r3, #1
  00fc4	e58d301c	 str         r3, [sp, #0x1C]
  00fc8	ea000001	 b           |$LN16@cppiProces@3|
  00fcc		 |$LN15@cppiProces@3|
  00fcc	e3a03000	 mov         r3, #0
  00fd0	e58d301c	 str         r3, [sp, #0x1C]
  00fd4		 |$LN16@cppiProces@3|

; 836  : }

  00fd4	e28dd020	 add         sp, sp, #0x20
  00fd8	e89d6000	 ldmia       sp, {sp, lr}
  00fdc	e12fff1e	 bx          lr
  00fe0		 |$LN20@cppiProces@3|
  00fe0		 |$LN21@cppiProces@3|
  00fe0	00000000	 DCD         |??_C@_1FE@GIEHHIOF@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF@|
  00fe4		 |$LN22@cppiProces@3|
  00fe4	00000000	 DCD         |dpCurSettings|
  00fe8		 |$LN23@cppiProces@3|
  00fe8	00000000	 DCD         |??_C@_1JE@HCAMEFBJ@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs@|
  00fec		 |$LN24@cppiProces@3|
  00fec	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00ff0		 |$LN25@cppiProces@3|
  00ff0	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00ff4		 |$LN26@cppiProces@3|
  00ff4	00000000	 DCD         |??_C@_1GE@OEBHEFNP@?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs@|
  00ff8		 |$LN27@cppiProces@3|
  00ff8	00000000	 DCD         |??_C@_1FE@GPDPLMAG@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AAd?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF@|
  00ffc		 |$LN28@cppiProces@3|
  00ffc	00000000	 DCD         |??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@|
  01000		 |$LN29@cppiProces@3|
  01000	00000000	 DCD         |??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@|
  01004		 |$M48113|

			 ENDP  ; |cppiProcessCompletedTeardown|

	EXPORT	|??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00040			 AREA	 |.pdata|, PDATA
|$T48132| DCD	|$LN14@cppiQueueP@2|
	DCD	0x40005804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r"
	DCB	0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01004			 AREA	 |.text|, CODE, ARM

  01004		 |cppiQueuePush| PROC

; 480  : {

  01004		 |$LN14@cppiQueueP@2|
  01004	e1a0c00d	 mov         r12, sp
  01008	e92d0007	 stmdb       sp!, {r0 - r2}
  0100c	e92d5000	 stmdb       sp!, {r12, lr}
  01010	e24dd01c	 sub         sp, sp, #0x1C
  01014		 |$M48129|

; 481  :     UINT32 value = 0;

  01014	e3a03000	 mov         r3, #0
  01018	e58d3000	 str         r3, [sp]

; 482  : 
; 483  :     DEBUGCHK(pCppiRegs != NULL);

  0101c	e59d3024	 ldr         r3, [sp, #0x24]
  01020	e3530000	 cmp         r3, #0
  01024	0a000002	 beq         |$LN10@cppiQueueP@2|
  01028	e3a03001	 mov         r3, #1
  0102c	e58d3010	 str         r3, [sp, #0x10]
  01030	ea000008	 b           |$LN11@cppiQueueP@2|
  01034		 |$LN10@cppiQueueP@2|
  01034	e3a03c01	 mov         r3, #1, 24
  01038	e38330e3	 orr         r3, r3, #0xE3
  0103c	e59f2114	 ldr         r2, [pc, #0x114]
  01040	e59f1118	 ldr         r1, [pc, #0x118]
  01044	e59f0110	 ldr         r0, [pc, #0x110]
  01048	eb000000	 bl          NKDbgPrintfW
  0104c	e6000010	 __debugbreak_ce
  01050	e3a03000	 mov         r3, #0
  01054	e58d3010	 str         r3, [sp, #0x10]
  01058		 |$LN11@cppiQueueP@2|

; 484  :     if (pCppiRegs == NULL)

  01058	e59d3024	 ldr         r3, [sp, #0x24]
  0105c	e3530000	 cmp         r3, #0
  01060	1a000000	 bne         |$LN7@cppiQueueP@2|

; 485  : 	{
; 486  :         return;

  01064	ea000036	 b           |$LN8@cppiQueueP@2|
  01068		 |$LN7@cppiQueueP@2|

; 487  : 	}
; 488  : 
; 489  :     if (pDescriptor != NULL)

  01068	e59d302c	 ldr         r3, [sp, #0x2C]
  0106c	e3530000	 cmp         r3, #0
  01070	0a000029	 beq         |$LN6@cppiQueueP@2|

; 490  :     {
; 491  :         UINT32 addr  = cppiDescriptorVAtoPA(pDescriptor);

  01074	e59d002c	 ldr         r0, [sp, #0x2C]
  01078	eb000000	 bl          cppiDescriptorVAtoPA
  0107c	e58d0014	 str         r0, [sp, #0x14]
  01080	e59d3014	 ldr         r3, [sp, #0x14]
  01084	e58d300c	 str         r3, [sp, #0xC]

; 492  :         UINT32 size  = 0;

  01088	e3a03000	 mov         r3, #0
  0108c	e58d3008	 str         r3, [sp, #8]

; 493  : 
; 494  :         UINT32 type = (*(UINT32*)pDescriptor & USB_CPPI41_DESC_TYPE_MASK) >> USB_CPPI41_DESC_TYPE_SHIFT;

  01090	e59d302c	 ldr         r3, [sp, #0x2C]
  01094	e5933000	 ldr         r3, [r3]
  01098	e203333e	 and         r3, r3, #0x3E, 6
  0109c	e1a03da3	 mov         r3, r3, lsr #27
  010a0	e58d3004	 str         r3, [sp, #4]

; 495  :         switch (type)

  010a4	e59d3004	 ldr         r3, [sp, #4]
  010a8	e58d3018	 str         r3, [sp, #0x18]
  010ac	e59d3018	 ldr         r3, [sp, #0x18]
  010b0	e3530010	 cmp         r3, #0x10
  010b4	0a000003	 beq         |$LN3@cppiQueueP@2|
  010b8	e59d3018	 ldr         r3, [sp, #0x18]
  010bc	e3530013	 cmp         r3, #0x13
  010c0	0a000003	 beq         |$LN2@cppiQueueP@2|
  010c4	ea000005	 b           |$LN1@cppiQueueP@2|
  010c8		 |$LN3@cppiQueueP@2|

; 496  :         {
; 497  :         case USB_CPPI41_DESC_TYPE_HOST:     /* Host descriptor */
; 498  :             size = (CPPI_HD_SIZE - 24) / 4;

  010c8	e3a0300a	 mov         r3, #0xA
  010cc	e58d3008	 str         r3, [sp, #8]

; 499  :             break;

  010d0	ea00000a	 b           |$LN4@cppiQueueP@2|
  010d4		 |$LN2@cppiQueueP@2|

; 500  : 
; 501  :         case USB_CPPI41_DESC_TYPE_TEARDOWN: /* Teardown descriptor */
; 502  :             size = (USB_CPPI_TD_SIZE - 24) / 4;

  010d4	e3a03002	 mov         r3, #2
  010d8	e58d3008	 str         r3, [sp, #8]

; 503  :             break;

  010dc	ea000007	 b           |$LN4@cppiQueueP@2|
  010e0		 |$LN1@cppiQueueP@2|

; 504  : 
; 505  :         default:
; 506  :             ERRORMSG(TRUE, (L"Invalid descriptor type %u\r\n", type));

  010e0	e3a02c01	 mov         r2, #1, 24
  010e4	e38220fa	 orr         r2, r2, #0xFA
  010e8	e59f1068	 ldr         r1, [pc, #0x68]
  010ec	e59f0060	 ldr         r0, [pc, #0x60]
  010f0	eb000000	 bl          NKDbgPrintfW
  010f4	e59d1004	 ldr         r1, [sp, #4]
  010f8	e59f0050	 ldr         r0, [pc, #0x50]
  010fc	eb000000	 bl          NKDbgPrintfW
  01100		 |$LN4@cppiQueueP@2|

; 507  :         }
; 508  : 
; 509  :         value = ((addr & QMGR_QUEUE_N_REG_D_DESC_ADDR_MASK) |
; 510  :                  (size & QMGR_QUEUE_N_REG_D_DESCSZ_MASK   ));

  01100	e59d1008	 ldr         r1, [sp, #8]
  01104	e59d200c	 ldr         r2, [sp, #0xC]
  01108	e3e0301f	 mvn         r3, #0x1F
  0110c	e0022003	 and         r2, r2, r3
  01110	e201301f	 and         r3, r1, #0x1F
  01114	e1823003	 orr         r3, r2, r3
  01118	e58d3000	 str         r3, [sp]
  0111c		 |$LN6@cppiQueueP@2|

; 511  :     }
; 512  : 
; 513  :     pCppiRegs->QMQUEUEMGMT[queueNo].QCTRLD = value;

  0111c	e59d3024	 ldr         r3, [sp, #0x24]
  01120	e2831a05	 add         r1, r3, #5, 20
  01124	e5dd3028	 ldrb        r3, [sp, #0x28]
  01128	e1a02003	 mov         r2, r3
  0112c	e3a03010	 mov         r3, #0x10
  01130	e0030392	 mul         r3, r2, r3
  01134	e0813003	 add         r3, r1, r3
  01138	e283200c	 add         r2, r3, #0xC
  0113c	e59d3000	 ldr         r3, [sp]
  01140	e5823000	 str         r3, [r2]
  01144		 |$LN8@cppiQueueP@2|

; 514  : 
; 515  :     PRINTMSG(/*ZONE_PDD_DMA*/0, (L"cppiQueuePush: queue %u, value 0x%08x\r\n", queueNo, value));
; 516  : }

  01144	e28dd01c	 add         sp, sp, #0x1C
  01148	e89d6000	 ldmia       sp, {sp, lr}
  0114c	e12fff1e	 bx          lr
  01150		 |$LN15@cppiQueueP@2|
  01150		 |$LN16@cppiQueueP@2|
  01150	00000000	 DCD         |??_C@_1DK@LONLLCCG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AAo?$AAr?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@|
  01154		 |$LN17@cppiQueueP@2|
  01154	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  01158		 |$LN18@cppiQueueP@2|
  01158	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0115c		 |$LN19@cppiQueueP@2|
  0115c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01160		 |$LN20@cppiQueueP@2|
  01160	00000000	 DCD         |dpCurSettings|
  01164		 |$M48130|

			 ENDP  ; |cppiQueuePush|

	IMPORT	|USBCDMA_DescriptorVAtoPA|

  00048			 AREA	 |.pdata|, PDATA
|$T48144| DCD	|$LN9@cppiDescri@2|
	DCD	0x40003d04
; Function compile flags: /Odtp

  01164			 AREA	 |.text|, CODE, ARM

  01164		 |cppiDescriptorVAtoPA| PROC

; 432  : {

  01164		 |$LN9@cppiDescri@2|
  01164	e1a0c00d	 mov         r12, sp
  01168	e92d0001	 stmdb       sp!, {r0}
  0116c	e92d5000	 stmdb       sp!, {r12, lr}
  01170	e24dd014	 sub         sp, sp, #0x14
  01174		 |$M48141|

; 433  :     UINT32 pa = 0;

  01174	e3a03000	 mov         r3, #0
  01178	e58d3000	 str         r3, [sp]

; 434  : 
; 435  :     if (va != NULL) 

  0117c	e59d301c	 ldr         r3, [sp, #0x1C]
  01180	e3530000	 cmp         r3, #0
  01184	0a00002c	 beq         |$LN4@cppiDescri@2|

; 436  : 	{
; 437  :         UINT32 vaPoolBase  = (UINT32)f_CppiObj->pool;

  01188	e59f30c4	 ldr         r3, [pc, #0xC4]
  0118c	e5933000	 ldr         r3, [r3]
  01190	e2833b02	 add         r3, r3, #2, 22
  01194	e2833098	 add         r3, r3, #0x98
  01198	e5933000	 ldr         r3, [r3]
  0119c	e58d3004	 str         r3, [sp, #4]

; 438  :         UINT32 vaPoolLimit = (UINT32)f_CppiObj->pool + f_CppiObj->poolMaxSize;

  011a0	e59f30ac	 ldr         r3, [pc, #0xAC]
  011a4	e5933000	 ldr         r3, [r3]
  011a8	e2833b02	 add         r3, r3, #2, 22
  011ac	e2832098	 add         r2, r3, #0x98
  011b0	e59f309c	 ldr         r3, [pc, #0x9C]
  011b4	e5933000	 ldr         r3, [r3]
  011b8	e2833b02	 add         r3, r3, #2, 22
  011bc	e28330a8	 add         r3, r3, #0xA8
  011c0	e5922000	 ldr         r2, [r2]
  011c4	e5933000	 ldr         r3, [r3]
  011c8	e0823003	 add         r3, r2, r3
  011cc	e58d3008	 str         r3, [sp, #8]

; 439  : 
; 440  :         if (((UINT32)va < vaPoolBase) || ((UINT32)va > vaPoolLimit))

  011d0	e59d201c	 ldr         r2, [sp, #0x1C]
  011d4	e59d3004	 ldr         r3, [sp, #4]
  011d8	e1520003	 cmp         r2, r3
  011dc	3a000003	 bcc         |$LN2@cppiDescri@2|
  011e0	e59d201c	 ldr         r2, [sp, #0x1C]
  011e4	e59d3008	 ldr         r3, [sp, #8]
  011e8	e1520003	 cmp         r2, r3
  011ec	9a000009	 bls         |$LN3@cppiDescri@2|
  011f0		 |$LN2@cppiDescri@2|

; 441  : 		{
; 442  :             pa = USBCDMA_DescriptorVAtoPA(f_CppiObj->hUsbCdma, va);

  011f0	e59d101c	 ldr         r1, [sp, #0x1C]
  011f4	e59f3058	 ldr         r3, [pc, #0x58]
  011f8	e5933000	 ldr         r3, [r3]
  011fc	e2833020	 add         r3, r3, #0x20
  01200	e5930000	 ldr         r0, [r3]
  01204	eb000000	 bl          USBCDMA_DescriptorVAtoPA
  01208	e58d0010	 str         r0, [sp, #0x10]
  0120c	e59d3010	 ldr         r3, [sp, #0x10]
  01210	e58d3000	 str         r3, [sp]

; 443  : 		}
; 444  :         else

  01214	ea000008	 b           |$LN1@cppiDescri@2|
  01218		 |$LN3@cppiDescri@2|

; 445  : 		{
; 446  :             pa = f_CppiObj->paPool.LowPart + ((UINT32)va - vaPoolBase);

  01218	e59f3034	 ldr         r3, [pc, #0x34]
  0121c	e5933000	 ldr         r3, [r3]
  01220	e2831e8a	 add         r1, r3, #0x8A, 28
  01224	e59d201c	 ldr         r2, [sp, #0x1C]
  01228	e59d3004	 ldr         r3, [sp, #4]
  0122c	e0422003	 sub         r2, r2, r3
  01230	e5913000	 ldr         r3, [r1]
  01234	e0833002	 add         r3, r3, r2
  01238	e58d3000	 str         r3, [sp]
  0123c		 |$LN1@cppiDescri@2|
  0123c		 |$LN4@cppiDescri@2|

; 447  : 		}
; 448  :     }
; 449  : 
; 450  :     return pa;

  0123c	e59d3000	 ldr         r3, [sp]
  01240	e58d300c	 str         r3, [sp, #0xC]

; 451  : }

  01244	e59d000c	 ldr         r0, [sp, #0xC]
  01248	e28dd014	 add         sp, sp, #0x14
  0124c	e89d6000	 ldmia       sp, {sp, lr}
  01250	e12fff1e	 bx          lr
  01254		 |$LN10@cppiDescri@2|
  01254		 |$LN11@cppiDescri@2|
  01254	00000000	 DCD         |f_CppiObj|
  01258		 |$M48142|

			 ENDP  ; |cppiDescriptorVAtoPA|

	EXPORT	|??_C@_1GC@FIDCCAIH@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAD?$AAM?$AAA?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@LGKGOGGO@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AA?9?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@DHKDJAMA@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAR?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@GGILNKFO@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAT?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@LDHNAGII@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAx?$AA?$CF?$AAx@| [ DATA ] ; `string'
	EXPORT	|cppiChannelAllocate|

  00050			 AREA	 |.pdata|, PDATA
|$T48164| DCD	|$LN22@cppiChanne|
	DCD	0x40010e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@FIDCCAIH@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAD?$AAM?$AAA?$AA?5@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@LGKGOGGO@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AA?9?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "-", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "c"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@DHKDJAMA@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAR?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, " ", 0x0, "R"
	DCB	0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@GGILNKFO@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAT?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "n", 0x0, "o", 0x0, " ", 0x0, "T"
	DCB	0x0, "x", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r", 0x0, " "
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@LDHNAGII@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAx?$AA?$CF?$AAx@| DCB "+"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "T", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, " ", 0x0, "p", 0x0, "f", 0x0, "m", 0x0, "D"
	DCB	0x0, "m", 0x0, "a", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  01258			 AREA	 |.text|, CODE, ARM

  01258		 |cppiChannelAllocate| PROC

; 966  : {

  01258		 |$LN22@cppiChanne|
  01258	e1a0c00d	 mov         r12, sp
  0125c	e92d000f	 stmdb       sp!, {r0 - r3}
  01260	e92d5000	 stmdb       sp!, {r12, lr}
  01264	e24dd02c	 sub         sp, sp, #0x2C
  01268		 |$M48161|

; 967  :     struct cppi *pController;
; 968  :     struct cppi_channel *otgCh;
; 969  :     CSL_UsbRegs *pUsbRegs = (CSL_UsbRegs *)NULL;

  01268	e3a03000	 mov         r3, #0
  0126c	e58d3008	 str         r3, [sp, #8]

; 970  :     UINT8 chanNum;
; 971  : 
; 972  :     pController = (struct cppi *)dmac;

  01270	e59d3034	 ldr         r3, [sp, #0x34]
  01274	e58d300c	 str         r3, [sp, #0xC]

; 973  :     pUsbRegs = pController->pPdd->pUsbdRegs;

  01278	e59d300c	 ldr         r3, [sp, #0xC]
  0127c	e2833018	 add         r3, r3, #0x18
  01280	e5933000	 ldr         r3, [r3]
  01284	e283301c	 add         r3, r3, #0x1C
  01288	e5933000	 ldr         r3, [r3]
  0128c	e58d3008	 str         r3, [sp, #8]

; 974  : 
; 975  :     PRINTMSG(ZONE_PDD_INIT,
; 976  :         (L"+cppiChannelAllocate: EP %u Tx%x pfmDma 0x%08x\r\n",
; 977  :         ep->epNumber,
; 978  :         bTransmit,
; 979  :         pFnDma));

  01290	e59f33d8	 ldr         r3, [pc, #0x3D8]
  01294	e5933440	 ldr         r3, [r3, #0x440]
  01298	e3130c01	 tst         r3, #1, 24
  0129c	0a000017	 beq         |$LN10@cppiChanne|
  012a0	e59f33c8	 ldr         r3, [pc, #0x3C8]
  012a4	e5933440	 ldr         r3, [r3, #0x440]
  012a8	e3130801	 tst         r3, #1, 16
  012ac	0a000008	 beq         |$LN8@cppiChanne|
  012b0	e59d3040	 ldr         r3, [sp, #0x40]
  012b4	e5dd203c	 ldrb        r2, [sp, #0x3C]
  012b8	e59d1038	 ldr         r1, [sp, #0x38]
  012bc	e1d110b0	 ldrh        r1, [r1]
  012c0	e59f03c4	 ldr         r0, [pc, #0x3C4]
  012c4	eb000000	 bl          CeLogMsg
  012c8	e3a03001	 mov         r3, #1
  012cc	e58d3014	 str         r3, [sp, #0x14]
  012d0	ea000007	 b           |$LN9@cppiChanne|
  012d4		 |$LN8@cppiChanne|
  012d4	e59d3040	 ldr         r3, [sp, #0x40]
  012d8	e5dd203c	 ldrb        r2, [sp, #0x3C]
  012dc	e59d1038	 ldr         r1, [sp, #0x38]
  012e0	e1d110b0	 ldrh        r1, [r1]
  012e4	e59f03a0	 ldr         r0, [pc, #0x3A0]
  012e8	eb000000	 bl          NKDbgPrintfW
  012ec	e3a03000	 mov         r3, #0
  012f0	e58d3014	 str         r3, [sp, #0x14]
  012f4		 |$LN9@cppiChanne|
  012f4	e3a03001	 mov         r3, #1
  012f8	e58d3018	 str         r3, [sp, #0x18]
  012fc	ea000001	 b           |$LN11@cppiChanne|
  01300		 |$LN10@cppiChanne|
  01300	e3a03000	 mov         r3, #0
  01304	e58d3018	 str         r3, [sp, #0x18]
  01308		 |$LN11@cppiChanne|

; 980  : 
; 981  :     /* Note: The CPPI Channel numbering scheme starts from 0.
; 982  :      * whereas the Non-Control EndPoints starts with 1.
; 983  :      * Hence in order to derive Channel Number associated
; 984  :      * for a given EP, we will subtract 1
; 985  :      */
; 986  :     chanNum = (UINT8)(ep->epNumber - 1);

  01308	e59d3038	 ldr         r3, [sp, #0x38]
  0130c	e1d330b0	 ldrh        r3, [r3]
  01310	e2433001	 sub         r3, r3, #1
  01314	e20330ff	 and         r3, r3, #0xFF
  01318	e5cd3004	 strb        r3, [sp, #4]

; 987  : 
; 988  :     /* return the corresponding CPPI Channel Handle, and
; 989  :      * probably disable the non-CPPI irq until we need it.
; 990  :      */
; 991  :     if (bTransmit == TRUE)

  0131c	e5dd303c	 ldrb        r3, [sp, #0x3C]
  01320	e3530001	 cmp         r3, #1
  01324	1a00001e	 bne         |$LN5@cppiChanne|

; 992  :     {
; 993  :         if (ep->epNumber > dim(pController->txCppi))

  01328	e59d3038	 ldr         r3, [sp, #0x38]
  0132c	e1d330b0	 ldrh        r3, [r3]
  01330	e353000f	 cmp         r3, #0xF
  01334	9a00000b	 bls         |$LN4@cppiChanne|

; 994  :         {
; 995  :             ERRORMSG (TRUE,
; 996  :                       (L"cppiChannelAllocate: no Tx DMA channel for EP %u\r\n",
; 997  :                        ep->epNumber));

  01338	e3a02c03	 mov         r2, #3, 24
  0133c	e38220e5	 orr         r2, r2, #0xE5
  01340	e59f133c	 ldr         r1, [pc, #0x33C]
  01344	e59f0334	 ldr         r0, [pc, #0x334]
  01348	eb000000	 bl          NKDbgPrintfW
  0134c	e59d3038	 ldr         r3, [sp, #0x38]
  01350	e1d310b0	 ldrh        r1, [r3]
  01354	e59f032c	 ldr         r0, [pc, #0x32C]
  01358	eb000000	 bl          NKDbgPrintfW

; 998  :             return NULL;

  0135c	e3a03000	 mov         r3, #0
  01360	e58d3010	 str         r3, [sp, #0x10]
  01364	ea0000bc	 b           |$LN6@cppiChanne|
  01368		 |$LN4@cppiChanne|

; 999  :         }
; 1000 : 
; 1001 :         otgCh = pController->txCppi + chanNum;

  01368	e59d300c	 ldr         r3, [sp, #0xC]
  0136c	e2831028	 add         r1, r3, #0x28
  01370	e5dd3004	 ldrb        r3, [sp, #4]
  01374	e1a02003	 mov         r2, r3
  01378	e3a03048	 mov         r3, #0x48
  0137c	e0030392	 mul         r3, r2, r3
  01380	e0813003	 add         r3, r1, r3
  01384	e58d3000	 str         r3, [sp]

; 1002 : 
; 1003 :         otgCh->pRegs->TXGCR =
; 1004 :             BIT31 | /* Enable
; 1005 :             qmgr |
; 1006 :             qnum? */ USB_CPPI_TXCMPL_QNUM_FN;

  01388	e59d3000	 ldr         r3, [sp]
  0138c	e283300c	 add         r3, r3, #0xC
  01390	e5932000	 ldr         r2, [r3]
  01394	e3a03102	 mov         r3, #2, 2
  01398	e3833040	 orr         r3, r3, #0x40
  0139c	e5823000	 str         r3, [r2]

; 1007 :     }
; 1008 :     else

  013a0	ea000043	 b           |$LN3@cppiChanne|
  013a4		 |$LN5@cppiChanne|

; 1009 :     {
; 1010 :         if (ep->epNumber > dim(pController->rxCppi))

  013a4	e59d3038	 ldr         r3, [sp, #0x38]
  013a8	e1d330b0	 ldrh        r3, [r3]
  013ac	e353000f	 cmp         r3, #0xF
  013b0	9a00000b	 bls         |$LN2@cppiChanne|

; 1011 :         {
; 1012 :             ERRORMSG (TRUE,
; 1013 :                       (L"cppiChannelAllocate: no RX DMA channel for EP %u\r\n",
; 1014 :                        ep->epNumber));

  013b4	e3a02c03	 mov         r2, #3, 24
  013b8	e38220f6	 orr         r2, r2, #0xF6
  013bc	e59f12c0	 ldr         r1, [pc, #0x2C0]
  013c0	e59f02b8	 ldr         r0, [pc, #0x2B8]
  013c4	eb000000	 bl          NKDbgPrintfW
  013c8	e59d3038	 ldr         r3, [sp, #0x38]
  013cc	e1d310b0	 ldrh        r1, [r3]
  013d0	e59f02a4	 ldr         r0, [pc, #0x2A4]
  013d4	eb000000	 bl          NKDbgPrintfW

; 1015 :             return NULL;

  013d8	e3a03000	 mov         r3, #0
  013dc	e58d3010	 str         r3, [sp, #0x10]
  013e0	ea00009d	 b           |$LN6@cppiChanne|
  013e4		 |$LN2@cppiChanne|

; 1016 :         }
; 1017 : 
; 1018 :         otgCh = pController->rxCppi + chanNum;

  013e4	e59d300c	 ldr         r3, [sp, #0xC]
  013e8	e2831e46	 add         r1, r3, #0x46, 28
  013ec	e5dd3004	 ldrb        r3, [sp, #4]
  013f0	e1a02003	 mov         r2, r3
  013f4	e3a03048	 mov         r3, #0x48
  013f8	e0030392	 mul         r3, r2, r3
  013fc	e0813003	 add         r3, r1, r3
  01400	e58d3000	 str         r3, [sp]

; 1019 : 
; 1020 :         otgCh->pRegs->HPCRA =
; 1021 :             ((chanNum + pController->chanOffset) |
; 1022 :             ((chanNum + pController->chanOffset) << 16));

  01404	e5dd3004	 ldrb        r3, [sp, #4]
  01408	e1a02003	 mov         r2, r3
  0140c	e59d300c	 ldr         r3, [sp, #0xC]
  01410	e2833024	 add         r3, r3, #0x24
  01414	e5d33000	 ldrb        r3, [r3]
  01418	e0821003	 add         r1, r2, r3
  0141c	e5dd3004	 ldrb        r3, [sp, #4]
  01420	e1a02003	 mov         r2, r3
  01424	e59d300c	 ldr         r3, [sp, #0xC]
  01428	e2833024	 add         r3, r3, #0x24
  0142c	e5d33000	 ldrb        r3, [r3]
  01430	e0823003	 add         r3, r2, r3
  01434	e1a03803	 mov         r3, r3, lsl #16
  01438	e1812003	 orr         r2, r1, r3
  0143c	e59d3000	 ldr         r3, [sp]
  01440	e283300c	 add         r3, r3, #0xC
  01444	e5933000	 ldr         r3, [r3]
  01448	e283300c	 add         r3, r3, #0xC
  0144c	e5832000	 str         r2, [r3]

; 1023 : 
; 1024 :         otgCh->pRegs->HPCRB =
; 1025 :             ((chanNum + pController->chanOffset) |
; 1026 :             ((chanNum + pController->chanOffset) << 16));

  01450	e5dd3004	 ldrb        r3, [sp, #4]
  01454	e1a02003	 mov         r2, r3
  01458	e59d300c	 ldr         r3, [sp, #0xC]
  0145c	e2833024	 add         r3, r3, #0x24
  01460	e5d33000	 ldrb        r3, [r3]
  01464	e0821003	 add         r1, r2, r3
  01468	e5dd3004	 ldrb        r3, [sp, #4]
  0146c	e1a02003	 mov         r2, r3
  01470	e59d300c	 ldr         r3, [sp, #0xC]
  01474	e2833024	 add         r3, r3, #0x24
  01478	e5d33000	 ldrb        r3, [r3]
  0147c	e0823003	 add         r3, r2, r3
  01480	e1a03803	 mov         r3, r3, lsl #16
  01484	e1812003	 orr         r2, r1, r3
  01488	e59d3000	 ldr         r3, [sp]
  0148c	e283300c	 add         r3, r3, #0xC
  01490	e5933000	 ldr         r3, [r3]
  01494	e2833010	 add         r3, r3, #0x10
  01498	e5832000	 str         r2, [r3]

; 1027 : 
; 1028 :         otgCh->pRegs->RXGCR =
; 1029 :             BIT31 | /* Enable */
; 1030 :             BIT24 | /* Retry on starvation */
; 1031 :             BIT14 | /* Host descriptor type (default) */ /*
; 1032 :             qmgr |
; 1033 :             qnum? */ USB_CPPI_RXCMPL_QNUM_FN;

  0149c	e59d3000	 ldr         r3, [sp]
  014a0	e283300c	 add         r3, r3, #0xC
  014a4	e5933000	 ldr         r3, [r3]
  014a8	e2832008	 add         r2, r3, #8
  014ac	e59f31c4	 ldr         r3, [pc, #0x1C4]
  014b0	e5823000	 str         r3, [r2]
  014b4		 |$LN3@cppiChanne|

; 1034 :     }
; 1035 : 
; 1036 :     if (otgCh->pEndPt != NULL)

  014b4	e59d3000	 ldr         r3, [sp]
  014b8	e2833010	 add         r3, r3, #0x10
  014bc	e5933000	 ldr         r3, [r3]
  014c0	e3530000	 cmp         r3, #0
  014c4	0a000023	 beq         |$LN1@cppiChanne|

; 1037 :     {
; 1038 :         PRINTMSG (ZONE_PDD_INIT,
; 1039 :                   (L"cppiChannelAllocate: re-allocating DMA %u channel from EP %u\r\n",
; 1040 :                    otgCh->channelNo, otgCh->pEndPt->epNumber));

  014c8	e59f31a0	 ldr         r3, [pc, #0x1A0]
  014cc	e5933440	 ldr         r3, [r3, #0x440]
  014d0	e3130c01	 tst         r3, #1, 24
  014d4	0a00001d	 beq         |$LN14@cppiChanne|
  014d8	e59f3190	 ldr         r3, [pc, #0x190]
  014dc	e5933440	 ldr         r3, [r3, #0x440]
  014e0	e3130801	 tst         r3, #1, 16
  014e4	0a00000b	 beq         |$LN12@cppiChanne|
  014e8	e59d3000	 ldr         r3, [sp]
  014ec	e2833010	 add         r3, r3, #0x10
  014f0	e5933000	 ldr         r3, [r3]
  014f4	e1d320b0	 ldrh        r2, [r3]
  014f8	e59d3000	 ldr         r3, [sp]
  014fc	e2833018	 add         r3, r3, #0x18
  01500	e5d31000	 ldrb        r1, [r3]
  01504	e59f0168	 ldr         r0, [pc, #0x168]
  01508	eb000000	 bl          CeLogMsg
  0150c	e3a03001	 mov         r3, #1
  01510	e58d301c	 str         r3, [sp, #0x1C]
  01514	ea00000a	 b           |$LN13@cppiChanne|
  01518		 |$LN12@cppiChanne|
  01518	e59d3000	 ldr         r3, [sp]
  0151c	e2833010	 add         r3, r3, #0x10
  01520	e5933000	 ldr         r3, [r3]
  01524	e1d320b0	 ldrh        r2, [r3]
  01528	e59d3000	 ldr         r3, [sp]
  0152c	e2833018	 add         r3, r3, #0x18
  01530	e5d31000	 ldrb        r1, [r3]
  01534	e59f0138	 ldr         r0, [pc, #0x138]
  01538	eb000000	 bl          NKDbgPrintfW
  0153c	e3a03000	 mov         r3, #0
  01540	e58d301c	 str         r3, [sp, #0x1C]
  01544		 |$LN13@cppiChanne|
  01544	e3a03001	 mov         r3, #1
  01548	e58d3020	 str         r3, [sp, #0x20]
  0154c	ea000001	 b           |$LN15@cppiChanne|
  01550		 |$LN14@cppiChanne|
  01550	e3a03000	 mov         r3, #0
  01554	e58d3020	 str         r3, [sp, #0x20]
  01558		 |$LN15@cppiChanne|
  01558		 |$LN1@cppiChanne|

; 1041 :     }
; 1042 : 
; 1043 :     /* Update the Channel structure with the information given */
; 1044 :     otgCh->pEndPt = ep;

  01558	e59d3000	 ldr         r3, [sp]
  0155c	e2832010	 add         r2, r3, #0x10
  01560	e59d3038	 ldr         r3, [sp, #0x38]
  01564	e5823000	 str         r3, [r2]

; 1045 :     otgCh->Channel.bStatus = MGC_DMA_STATUS_FREE;

  01568	e59d3000	 ldr         r3, [sp]
  0156c	e2832004	 add         r2, r3, #4
  01570	e3a03001	 mov         r3, #1
  01574	e5823000	 str         r3, [r2]

; 1046 :     otgCh->Channel.pPrivateData = otgCh;

  01578	e59d2000	 ldr         r2, [sp]
  0157c	e59d3000	 ldr         r3, [sp]
  01580	e5832000	 str         r2, [r3]

; 1047 : 
; 1048 :     otgCh->pfnDmaCompleted = pFnDma;

  01584	e59d3000	 ldr         r3, [sp]
  01588	e2832044	 add         r2, r3, #0x44
  0158c	e59d3040	 ldr         r3, [sp, #0x40]
  01590	e5823000	 str         r3, [r2]

; 1049 :     otgCh->transmit        = bTransmit;

  01594	e59d3000	 ldr         r3, [sp]
  01598	e2832014	 add         r2, r3, #0x14
  0159c	e5dd303c	 ldrb        r3, [sp, #0x3C]
  015a0	e5823000	 str         r3, [r2]

; 1050 :     otgCh->nISOHDQueued      = 0;

  015a4	e59d3000	 ldr         r3, [sp]
  015a8	e283203c	 add         r2, r3, #0x3C
  015ac	e3a03000	 mov         r3, #0
  015b0	e5823000	 str         r3, [r2]

; 1051 :     otgCh->nISOHDPerTransfer = 0;

  015b4	e59d3000	 ldr         r3, [sp]
  015b8	e2832034	 add         r2, r3, #0x34
  015bc	e3a03000	 mov         r3, #0
  015c0	e5823000	 str         r3, [r2]

; 1052 :     otgCh->nISOHDForCallback = 0;

  015c4	e59d3000	 ldr         r3, [sp]
  015c8	e2832038	 add         r2, r3, #0x38
  015cc	e3a03000	 mov         r3, #0
  015d0	e5823000	 str         r3, [r2]

; 1053 :     otgCh->nISOHDLastIndex   = 0;

  015d4	e59d3000	 ldr         r3, [sp]
  015d8	e2832040	 add         r2, r3, #0x40
  015dc	e3a03000	 mov         r3, #0
  015e0	e5823000	 str         r3, [r2]

; 1054 : 
; 1055 :     DEBUGMSG(ZONE_PDD_INIT,
; 1056 :         (L"-cppiChannelAllocate: EP %u DMA Channel 0x%08x\r\n",
; 1057 :         ep->epNumber,
; 1058 :         &otgCh->Channel));

  015e4	e59f3084	 ldr         r3, [pc, #0x84]
  015e8	e5933440	 ldr         r3, [r3, #0x440]
  015ec	e3130c01	 tst         r3, #1, 24
  015f0	0a000015	 beq         |$LN18@cppiChanne|
  015f4	e59f3074	 ldr         r3, [pc, #0x74]
  015f8	e5933440	 ldr         r3, [r3, #0x440]
  015fc	e3130801	 tst         r3, #1, 16
  01600	0a000007	 beq         |$LN16@cppiChanne|
  01604	e59d2000	 ldr         r2, [sp]
  01608	e59d3038	 ldr         r3, [sp, #0x38]
  0160c	e1d310b0	 ldrh        r1, [r3]
  01610	e59f0054	 ldr         r0, [pc, #0x54]
  01614	eb000000	 bl          CeLogMsg
  01618	e3a03001	 mov         r3, #1
  0161c	e58d3024	 str         r3, [sp, #0x24]
  01620	ea000006	 b           |$LN17@cppiChanne|
  01624		 |$LN16@cppiChanne|
  01624	e59d2000	 ldr         r2, [sp]
  01628	e59d3038	 ldr         r3, [sp, #0x38]
  0162c	e1d310b0	 ldrh        r1, [r3]
  01630	e59f0034	 ldr         r0, [pc, #0x34]
  01634	eb000000	 bl          NKDbgPrintfW
  01638	e3a03000	 mov         r3, #0
  0163c	e58d3024	 str         r3, [sp, #0x24]
  01640		 |$LN17@cppiChanne|
  01640	e3a03001	 mov         r3, #1
  01644	e58d3028	 str         r3, [sp, #0x28]
  01648	ea000001	 b           |$LN19@cppiChanne|
  0164c		 |$LN18@cppiChanne|
  0164c	e3a03000	 mov         r3, #0
  01650	e58d3028	 str         r3, [sp, #0x28]
  01654		 |$LN19@cppiChanne|

; 1059 : 
; 1060 :     return &(otgCh->Channel);

  01654	e59d3000	 ldr         r3, [sp]
  01658	e58d3010	 str         r3, [sp, #0x10]
  0165c		 |$LN6@cppiChanne|

; 1061 : }

  0165c	e59d0010	 ldr         r0, [sp, #0x10]
  01660	e28dd02c	 add         sp, sp, #0x2C
  01664	e89d6000	 ldmia       sp, {sp, lr}
  01668	e12fff1e	 bx          lr
  0166c		 |$LN23@cppiChanne|
  0166c		 |$LN24@cppiChanne|
  0166c	00000000	 DCD         |??_C@_1GC@FIDCCAIH@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAD?$AAM?$AAA?$AA?5@|
  01670		 |$LN25@cppiChanne|
  01670	00000000	 DCD         |dpCurSettings|
  01674		 |$LN26@cppiChanne|
  01674	00000000	 DCD         |??_C@_1HO@LGKGOGGO@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAr?$AAe?$AA?9?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAi@|
  01678		 |$LN27@cppiChanne|
  01678	81004042	 DCD         0x81004042
  0167c		 |$LN28@cppiChanne|
  0167c	00000000	 DCD         |??_C@_1GG@DHKDJAMA@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAR?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc@|
  01680		 |$LN29@cppiChanne|
  01680	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  01684		 |$LN30@cppiChanne|
  01684	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01688		 |$LN31@cppiChanne|
  01688	00000000	 DCD         |??_C@_1GG@GGILNKFO@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAn?$AAo?$AA?5?$AAT?$AAx?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAc@|
  0168c		 |$LN32@cppiChanne|
  0168c	00000000	 DCD         |??_C@_1GC@LDHNAGII@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAE?$AAP?$AA?5?$AA?$CF?$AAu?$AA?5?$AAT?$AAx?$AA?$CF?$AAx@|
  01690		 |$M48162|

			 ENDP  ; |cppiChannelAllocate|

	EXPORT	|??_C@_1MC@PLNEICDI@?$AAc?$AAp?$AAp?$AAi?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAg?$AAm?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAI?$AAS?$AAO?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JK@IDOHNMNF@?$AAc?$AAp?$AAp?$AAi?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAg?$AAm?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAs?$AAe?$AAg?$AAL?$AAe@| [ DATA ] ; `string'
	IMPORT	|__rt_udiv|

  00058			 AREA	 |.pdata|, PDATA
|$T48226| DCD	|$LN54@cppiNextSe|
	DCD	0x40029e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1MC@PLNEICDI@?$AAc?$AAp?$AAp?$AAi?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAg?$AAm?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAI?$AAS?$AAO?$AA?0?$AA?5@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "N", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "g", 0x0, "m", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ",", 0x0, " ", 0x0, "I", 0x0, "S", 0x0, "O", 0x0, ","
	DCB	0x0, " ", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s"
	DCB	0x0, "f", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "p", 0x0, "k", 0x0, "t", 0x0, "S", 0x0, "i", 0x0, "z"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, " ", 0x0, "H", 0x0, "D", 0x0, "s"
	DCB	0x0, ",", 0x0, " ", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "o"
	DCB	0x0, "n", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "u", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@IDOHNMNF@?$AAc?$AAp?$AAp?$AAi?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAg?$AAm?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAs?$AAe?$AAg?$AAL?$AAe@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "N", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, "S", 0x0, "e", 0x0, "g", 0x0, "m", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "g", 0x0, "L"
	DCB	0x0, "e", 0x0, "n", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, ","
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "l", 0x0, "e", 0x0, "n", 0x0, "D"
	DCB	0x0, "o", 0x0, "n", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ",", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, "t", 0x0, "a"
	DCB	0x0, "l", 0x0, "L", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01690			 AREA	 |.text|, CODE, ARM

  01690		 |cppiNextSegment| PROC

; 1387 : {

  01690		 |$LN54@cppiNextSe|
  01690	e1a0c00d	 mov         r12, sp
  01694	e92d0003	 stmdb       sp!, {r0, r1}
  01698	e92d5000	 stmdb       sp!, {r12, lr}
  0169c	e24dd0b8	 sub         sp, sp, #0xB8
  016a0		 |$M48223|

; 1388 :     unsigned maxpacket =  chanPtr->pktSize;

  016a0	e59d30c4	 ldr         r3, [sp, #0xC4]
  016a4	e2833028	 add         r3, r3, #0x28
  016a8	e5933000	 ldr         r3, [r3]
  016ac	e58d3034	 str         r3, [sp, #0x34]

; 1389 :     UINT32 remaining = chanPtr->transferSize - chanPtr->currOffset;

  016b0	e59d30c4	 ldr         r3, [sp, #0xC4]
  016b4	e2832024	 add         r2, r3, #0x24
  016b8	e59d30c4	 ldr         r3, [sp, #0xC4]
  016bc	e283302c	 add         r3, r3, #0x2C
  016c0	e5922000	 ldr         r2, [r2]
  016c4	e5933000	 ldr         r3, [r3]
  016c8	e0423003	 sub         r3, r2, r3
  016cc	e58d3024	 str         r3, [sp, #0x24]

; 1390 :     struct cppi *cppi = chanPtr->pController;

  016d0	e59d30c4	 ldr         r3, [sp, #0xC4]
  016d4	e2833008	 add         r3, r3, #8
  016d8	e5933000	 ldr         r3, [r3]
  016dc	e58d3018	 str         r3, [sp, #0x18]

; 1391 :     HOST_DESCRIPTOR *hd = NULL;

  016e0	e3a03000	 mov         r3, #0
  016e4	e58d3030	 str         r3, [sp, #0x30]

; 1392 :     BOOL   isRndis = FALSE;

  016e8	e3a03000	 mov         r3, #0
  016ec	e58d3020	 str         r3, [sp, #0x20]

; 1393 :     UINT32 buffSz = 0;

  016f0	e3a03000	 mov         r3, #0
  016f4	e58d302c	 str         r3, [sp, #0x2C]

; 1394 :     UINT32 buffPtr = 0;

  016f8	e3a03000	 mov         r3, #0
  016fc	e58d301c	 str         r3, [sp, #0x1C]

; 1395 :     UINT32 nHD = 0;

  01700	e3a03000	 mov         r3, #0
  01704	e58d3028	 str         r3, [sp, #0x28]

; 1396 :     UINT32 i;
; 1397 :     UINT cppiCmplQNum;
; 1398 : 
; 1399 :     // For overlapped IO need to protect channel vars
; 1400 :     LOCK_ENDPOINT(pPdd);

  01708	e59d30c0	 ldr         r3, [sp, #0xC0]
  0170c	e2830e27	 add         r0, r3, #0x27, 28
  01710	eb000000	 bl          EnterCriticalSection

; 1401 : 
; 1402 :     if (chanPtr->pEndPt->endpointType != USB_ENDPOINT_TYPE_ISOCHRONOUS)

  01714	e59d30c4	 ldr         r3, [sp, #0xC4]
  01718	e2833010	 add         r3, r3, #0x10
  0171c	e5933000	 ldr         r3, [r3]
  01720	e283300c	 add         r3, r3, #0xC
  01724	e5d33000	 ldrb        r3, [r3]
  01728	e3530001	 cmp         r3, #1
  0172c	0a00000d	 beq         |$LN17@cppiNextSe|

; 1403 :     {
; 1404 :         isRndis = (
; 1405 :             ((maxpacket & 0x3f) == 0) &&
; 1406 :             (remaining <= 0x00010000));

  01730	e59d3034	 ldr         r3, [sp, #0x34]
  01734	e313003f	 tst         r3, #0x3F
  01738	1a000005	 bne         |$LN20@cppiNextSe|
  0173c	e59d3024	 ldr         r3, [sp, #0x24]
  01740	e3530801	 cmp         r3, #1, 16
  01744	8a000002	 bhi         |$LN20@cppiNextSe|
  01748	e3a03001	 mov         r3, #1
  0174c	e58d3070	 str         r3, [sp, #0x70]
  01750	ea000001	 b           |$LN21@cppiNextSe|
  01754		 |$LN20@cppiNextSe|
  01754	e3a03000	 mov         r3, #0
  01758	e58d3070	 str         r3, [sp, #0x70]
  0175c		 |$LN21@cppiNextSe|
  0175c	e59d3070	 ldr         r3, [sp, #0x70]
  01760	e58d3020	 str         r3, [sp, #0x20]

; 1407 :     }
; 1408 :     else

  01764	ea000001	 b           |$LN16@cppiNextSe|
  01768		 |$LN17@cppiNextSe|

; 1409 :     {
; 1410 :         // Transparent mode for ISO
; 1411 :         isRndis = FALSE;

  01768	e3a03000	 mov         r3, #0
  0176c	e58d3020	 str         r3, [sp, #0x20]
  01770		 |$LN16@cppiNextSe|

; 1412 :     }
; 1413 : 
; 1414 :     // The registry setting 'DisableRxGenRNDIS' should force transparent mode for RX transfers
; 1415 :     if ((!chanPtr->transmit) && (pPdd->disableRxGenRNDIS))

  01770	e59d30c4	 ldr         r3, [sp, #0xC4]
  01774	e2833014	 add         r3, r3, #0x14
  01778	e5933000	 ldr         r3, [r3]
  0177c	e3530000	 cmp         r3, #0
  01780	1a000007	 bne         |$LN15@cppiNextSe|
  01784	e59d30c0	 ldr         r3, [sp, #0xC0]
  01788	e2833c06	 add         r3, r3, #6, 24
  0178c	e2833064	 add         r3, r3, #0x64
  01790	e5933000	 ldr         r3, [r3]
  01794	e3530000	 cmp         r3, #0
  01798	0a000001	 beq         |$LN15@cppiNextSe|

; 1416 : 	{
; 1417 :         isRndis = FALSE;

  0179c	e3a03000	 mov         r3, #0
  017a0	e58d3020	 str         r3, [sp, #0x20]
  017a4		 |$LN15@cppiNextSe|

; 1418 : 	}
; 1419 : 
; 1420 :     if (isRndis)

  017a4	e59d3020	 ldr         r3, [sp, #0x20]
  017a8	e3530000	 cmp         r3, #0
  017ac	0a000002	 beq         |$LN14@cppiNextSe|

; 1421 : 	{
; 1422 :         buffSz = remaining;

  017b0	e59d3024	 ldr         r3, [sp, #0x24]
  017b4	e58d302c	 str         r3, [sp, #0x2C]

; 1423 : 	}
; 1424 :     else

  017b8	ea00000a	 b           |$LN13@cppiNextSe|
  017bc		 |$LN14@cppiNextSe|

; 1425 : 	{
; 1426 :         buffSz  = min(remaining, maxpacket);

  017bc	e59d2024	 ldr         r2, [sp, #0x24]
  017c0	e59d3034	 ldr         r3, [sp, #0x34]
  017c4	e1520003	 cmp         r2, r3
  017c8	2a000002	 bcs         |$LN22@cppiNextSe|
  017cc	e59d3024	 ldr         r3, [sp, #0x24]
  017d0	e58d3074	 str         r3, [sp, #0x74]
  017d4	ea000001	 b           |$LN23@cppiNextSe|
  017d8		 |$LN22@cppiNextSe|
  017d8	e59d3034	 ldr         r3, [sp, #0x34]
  017dc	e58d3074	 str         r3, [sp, #0x74]
  017e0		 |$LN23@cppiNextSe|
  017e0	e59d3074	 ldr         r3, [sp, #0x74]
  017e4	e58d302c	 str         r3, [sp, #0x2C]
  017e8		 |$LN13@cppiNextSe|

; 1427 : 	}
; 1428 : 
; 1429 :     buffPtr = chanPtr->startAddr + chanPtr->currOffset;

  017e8	e59d30c4	 ldr         r3, [sp, #0xC4]
  017ec	e2832020	 add         r2, r3, #0x20
  017f0	e59d30c4	 ldr         r3, [sp, #0xC4]
  017f4	e283302c	 add         r3, r3, #0x2C
  017f8	e5922000	 ldr         r2, [r2]
  017fc	e5933000	 ldr         r3, [r3]
  01800	e0823003	 add         r3, r2, r3
  01804	e58d301c	 str         r3, [sp, #0x1C]

; 1430 : 
; 1431 :     cppiRndisUpdate(chanPtr, pPdd->pUsbdRegs, isRndis);

  01808	e59d2020	 ldr         r2, [sp, #0x20]
  0180c	e59d30c0	 ldr         r3, [sp, #0xC0]
  01810	e283301c	 add         r3, r3, #0x1C
  01814	e5931000	 ldr         r1, [r3]
  01818	e59d00c4	 ldr         r0, [sp, #0xC4]
  0181c	eb000000	 bl          cppiRndisUpdate

; 1432 : 
; 1433 :     PRINTMSG(ZONE_PDD_DMA && (chanPtr->transmit ? ZONE_PDD_TX : ZONE_PDD_RX),
; 1434 :              (L"cppiNextSegment: %s Ch %u, segLen %u, addr 0x%08x, lenDone %u, totalLen %u\r\n",
; 1435 :               chanPtr->transmit ? L"TX" : L"RX", chanPtr->channelNo, buffSz, buffPtr, chanPtr->actualLen, chanPtr->transferSize));

  01820	e59f38c8	 ldr         r3, [pc, #0x8C8]
  01824	e5933440	 ldr         r3, [r3, #0x440]
  01828	e3130902	 tst         r3, #2, 18
  0182c	0a000052	 beq         |$LN26@cppiNextSe|
  01830	e59d30c4	 ldr         r3, [sp, #0xC4]
  01834	e2833014	 add         r3, r3, #0x14
  01838	e5933000	 ldr         r3, [r3]
  0183c	e3530000	 cmp         r3, #0
  01840	0a000004	 beq         |$LN24@cppiNextSe|
  01844	e59f38a4	 ldr         r3, [pc, #0x8A4]
  01848	e5933440	 ldr         r3, [r3, #0x440]
  0184c	e2033b02	 and         r3, r3, #2, 22
  01850	e58d3078	 str         r3, [sp, #0x78]
  01854	ea000003	 b           |$LN25@cppiNextSe|
  01858		 |$LN24@cppiNextSe|
  01858	e59f3890	 ldr         r3, [pc, #0x890]
  0185c	e5933440	 ldr         r3, [r3, #0x440]
  01860	e2033b01	 and         r3, r3, #1, 22
  01864	e58d3078	 str         r3, [sp, #0x78]
  01868		 |$LN25@cppiNextSe|
  01868	e59d3078	 ldr         r3, [sp, #0x78]
  0186c	e3530000	 cmp         r3, #0
  01870	0a000041	 beq         |$LN26@cppiNextSe|
  01874	e59f3874	 ldr         r3, [pc, #0x874]
  01878	e5933440	 ldr         r3, [r3, #0x440]
  0187c	e3130801	 tst         r3, #1, 16
  01880	0a00001d	 beq         |$LN31@cppiNextSe|
  01884	e59d30c4	 ldr         r3, [sp, #0xC4]
  01888	e2833014	 add         r3, r3, #0x14
  0188c	e5933000	 ldr         r3, [r3]
  01890	e3530000	 cmp         r3, #0
  01894	0a000002	 beq         |$LN27@cppiNextSe|
  01898	e59f3860	 ldr         r3, [pc, #0x860]
  0189c	e58d307c	 str         r3, [sp, #0x7C]
  018a0	ea000001	 b           |$LN28@cppiNextSe|
  018a4		 |$LN27@cppiNextSe|
  018a4	e59f3850	 ldr         r3, [pc, #0x850]
  018a8	e58d307c	 str         r3, [sp, #0x7C]
  018ac		 |$LN28@cppiNextSe|
  018ac	e59d30c4	 ldr         r3, [sp, #0xC4]
  018b0	e2833024	 add         r3, r3, #0x24
  018b4	e5933000	 ldr         r3, [r3]
  018b8	e58d3008	 str         r3, [sp, #8]
  018bc	e59d30c4	 ldr         r3, [sp, #0xC4]
  018c0	e2833030	 add         r3, r3, #0x30
  018c4	e5933000	 ldr         r3, [r3]
  018c8	e58d3004	 str         r3, [sp, #4]
  018cc	e59d301c	 ldr         r3, [sp, #0x1C]
  018d0	e58d3000	 str         r3, [sp]
  018d4	e59d302c	 ldr         r3, [sp, #0x2C]
  018d8	e59d20c4	 ldr         r2, [sp, #0xC4]
  018dc	e2822018	 add         r2, r2, #0x18
  018e0	e5d22000	 ldrb        r2, [r2]
  018e4	e59d107c	 ldr         r1, [sp, #0x7C]
  018e8	e59f0814	 ldr         r0, [pc, #0x814]
  018ec	eb000000	 bl          CeLogMsg
  018f0	e3a03001	 mov         r3, #1
  018f4	e58d3080	 str         r3, [sp, #0x80]
  018f8	ea00001c	 b           |$LN32@cppiNextSe|
  018fc		 |$LN31@cppiNextSe|
  018fc	e59d30c4	 ldr         r3, [sp, #0xC4]
  01900	e2833014	 add         r3, r3, #0x14
  01904	e5933000	 ldr         r3, [r3]
  01908	e3530000	 cmp         r3, #0
  0190c	0a000002	 beq         |$LN29@cppiNextSe|
  01910	e59f37e8	 ldr         r3, [pc, #0x7E8]
  01914	e58d3084	 str         r3, [sp, #0x84]
  01918	ea000001	 b           |$LN30@cppiNextSe|
  0191c		 |$LN29@cppiNextSe|
  0191c	e59f37d8	 ldr         r3, [pc, #0x7D8]
  01920	e58d3084	 str         r3, [sp, #0x84]
  01924		 |$LN30@cppiNextSe|
  01924	e59d30c4	 ldr         r3, [sp, #0xC4]
  01928	e2833024	 add         r3, r3, #0x24
  0192c	e5933000	 ldr         r3, [r3]
  01930	e58d3008	 str         r3, [sp, #8]
  01934	e59d30c4	 ldr         r3, [sp, #0xC4]
  01938	e2833030	 add         r3, r3, #0x30
  0193c	e5933000	 ldr         r3, [r3]
  01940	e58d3004	 str         r3, [sp, #4]
  01944	e59d301c	 ldr         r3, [sp, #0x1C]
  01948	e58d3000	 str         r3, [sp]
  0194c	e59d302c	 ldr         r3, [sp, #0x2C]
  01950	e59d20c4	 ldr         r2, [sp, #0xC4]
  01954	e2822018	 add         r2, r2, #0x18
  01958	e5d22000	 ldrb        r2, [r2]
  0195c	e59d1084	 ldr         r1, [sp, #0x84]
  01960	e59f079c	 ldr         r0, [pc, #0x79C]
  01964	eb000000	 bl          NKDbgPrintfW
  01968	e3a03000	 mov         r3, #0
  0196c	e58d3080	 str         r3, [sp, #0x80]
  01970		 |$LN32@cppiNextSe|
  01970	e3a03001	 mov         r3, #1
  01974	e58d3088	 str         r3, [sp, #0x88]
  01978	ea000001	 b           |$LN33@cppiNextSe|
  0197c		 |$LN26@cppiNextSe|
  0197c	e3a03000	 mov         r3, #0
  01980	e58d3088	 str         r3, [sp, #0x88]
  01984		 |$LN33@cppiNextSe|

; 1436 : 
; 1437 :     // Determine completion queue based on direction
; 1438 :     if (chanPtr->transmit)

  01984	e59d30c4	 ldr         r3, [sp, #0xC4]
  01988	e2833014	 add         r3, r3, #0x14
  0198c	e5933000	 ldr         r3, [r3]
  01990	e3530000	 cmp         r3, #0
  01994	0a000002	 beq         |$LN12@cppiNextSe|

; 1439 : 	{
; 1440 :         cppiCmplQNum = USB_CPPI_TXCMPL_QNUM_FN;

  01998	e3a03040	 mov         r3, #0x40
  0199c	e58d3010	 str         r3, [sp, #0x10]

; 1441 : 	}
; 1442 :     else

  019a0	ea000001	 b           |$LN11@cppiNextSe|
  019a4		 |$LN12@cppiNextSe|

; 1443 : 	{
; 1444 :         cppiCmplQNum = USB_CPPI_RXCMPL_QNUM_FN;

  019a4	e3a03042	 mov         r3, #0x42
  019a8	e58d3010	 str         r3, [sp, #0x10]
  019ac		 |$LN11@cppiNextSe|

; 1445 : 	}
; 1446 : 
; 1447 :     if (chanPtr->pEndPt->endpointType != USB_ENDPOINT_TYPE_ISOCHRONOUS)

  019ac	e59d30c4	 ldr         r3, [sp, #0xC4]
  019b0	e2833010	 add         r3, r3, #0x10
  019b4	e5933000	 ldr         r3, [r3]
  019b8	e283300c	 add         r3, r3, #0xC
  019bc	e5d33000	 ldrb        r3, [r3]
  019c0	e3530001	 cmp         r3, #1
  019c4	0a000090	 beq         |$LN10@cppiNextSe|

; 1448 :     {
; 1449 :         hd = cppiHdAlloc(cppi);

  019c8	e59d0018	 ldr         r0, [sp, #0x18]
  019cc	eb000000	 bl          cppiHdAlloc
  019d0	e58d008c	 str         r0, [sp, #0x8C]
  019d4	e59d308c	 ldr         r3, [sp, #0x8C]
  019d8	e58d3030	 str         r3, [sp, #0x30]

; 1450 :         DEBUGCHK(hd != NULL);

  019dc	e59d3030	 ldr         r3, [sp, #0x30]
  019e0	e3530000	 cmp         r3, #0
  019e4	0a000002	 beq         |$LN34@cppiNextSe|
  019e8	e3a03001	 mov         r3, #1
  019ec	e58d3090	 str         r3, [sp, #0x90]
  019f0	ea000008	 b           |$LN35@cppiNextSe|
  019f4		 |$LN34@cppiNextSe|
  019f4	e3a03c05	 mov         r3, #5, 24
  019f8	e38330aa	 orr         r3, r3, #0xAA
  019fc	e59f26f0	 ldr         r2, [pc, #0x6F0]
  01a00	e59f16e8	 ldr         r1, [pc, #0x6E8]
  01a04	e59f06e0	 ldr         r0, [pc, #0x6E0]
  01a08	eb000000	 bl          NKDbgPrintfW
  01a0c	e6000010	 __debugbreak_ce
  01a10	e3a03000	 mov         r3, #0
  01a14	e58d3090	 str         r3, [sp, #0x90]
  01a18		 |$LN35@cppiNextSe|

; 1451 :         if (hd == NULL)

  01a18	e59d3030	 ldr         r3, [sp, #0x30]
  01a1c	e3530000	 cmp         r3, #0
  01a20	1a000000	 bne         |$LN9@cppiNextSe|

; 1452 : 		{
; 1453 :             return;

  01a24	ea0001ad	 b           |$LN18@cppiNextSe|
  01a28		 |$LN9@cppiNextSe|

; 1454 : 		}
; 1455 : 
; 1456 :         // Initialise the descriptor
; 1457 :         hd->DescInfo    = (USB_CPPI41_DESC_TYPE_HOST   << USB_CPPI41_DESC_TYPE_SHIFT) |
; 1458 :                           (((sizeof(*hd) - 40) / 4)    << USB_CPPI41_DESC_WORDS_SHIFT) |
; 1459 :                           buffSz;

  01a28	e59d202c	 ldr         r2, [sp, #0x2C]
  01a2c	e3a03481	 mov         r3, #0x81, 8
  01a30	e3833502	 orr         r3, r3, #2, 10
  01a34	e1822003	 orr         r2, r2, r3
  01a38	e59d3030	 ldr         r3, [sp, #0x30]
  01a3c	e5832000	 str         r2, [r3]

; 1460 :         hd->TagInfo     = 0;

  01a40	e59d3030	 ldr         r3, [sp, #0x30]
  01a44	e2832004	 add         r2, r3, #4
  01a48	e3a03000	 mov         r3, #0
  01a4c	e5823000	 str         r3, [r2]

; 1461 :         hd->PacketInfo  = (USB_CPPI41_PKT_TYPE_USB     << USB_CPPI41_PKT_TYPE_SHIFT) |
; 1462 :                           (USB_CPPI41_PKT_RETPLCY_FULL << USB_CPPI41_PKT_RETPLCY_SHIFT) |
; 1463 :                           (USB_CPPI41_DESC_LOC_OFFCHIP << USB_CPPI41_DESC_LOC_SHIFT) |
; 1464 :                           (USB_CPPI_XXCMPL_QMGR        << USB_CPPI41_PKT_RETQMGR_SHIFT) |
; 1465 :                           (cppiCmplQNum                << USB_CPPI41_PKT_RETQ_SHIFT);

  01a50	e59d3010	 ldr         r3, [sp, #0x10]
  01a54	e3832305	 orr         r2, r3, #5, 6
  01a58	e59d3030	 ldr         r3, [sp, #0x30]
  01a5c	e2833008	 add         r3, r3, #8
  01a60	e5832000	 str         r2, [r3]

; 1466 :         hd->BuffLen     = buffSz;

  01a64	e59d3030	 ldr         r3, [sp, #0x30]
  01a68	e283200c	 add         r2, r3, #0xC
  01a6c	e59d302c	 ldr         r3, [sp, #0x2C]
  01a70	e5823000	 str         r3, [r2]

; 1467 :         hd->BuffPtr     = buffPtr;

  01a74	e59d3030	 ldr         r3, [sp, #0x30]
  01a78	e2832010	 add         r2, r3, #0x10
  01a7c	e59d301c	 ldr         r3, [sp, #0x1C]
  01a80	e5823000	 str         r3, [r2]

; 1468 :         hd->NextPtr     = 0;

  01a84	e59d3030	 ldr         r3, [sp, #0x30]
  01a88	e2832014	 add         r2, r3, #0x14
  01a8c	e3a03000	 mov         r3, #0
  01a90	e5823000	 str         r3, [r2]

; 1469 :         hd->OrigBuffLen = hd->BuffLen;

  01a94	e59d3030	 ldr         r3, [sp, #0x30]
  01a98	e283100c	 add         r1, r3, #0xC
  01a9c	e59d3030	 ldr         r3, [sp, #0x30]
  01aa0	e2832018	 add         r2, r3, #0x18
  01aa4	e5913000	 ldr         r3, [r1]
  01aa8	e5823000	 str         r3, [r2]

; 1470 :         hd->OrigBuffPtr = hd->BuffPtr;

  01aac	e59d3030	 ldr         r3, [sp, #0x30]
  01ab0	e2831010	 add         r1, r3, #0x10
  01ab4	e59d3030	 ldr         r3, [sp, #0x30]
  01ab8	e283201c	 add         r2, r3, #0x1C
  01abc	e5913000	 ldr         r3, [r1]
  01ac0	e5823000	 str         r3, [r2]

; 1471 :         hd->SWData[0]   = 0;

  01ac4	e59d3030	 ldr         r3, [sp, #0x30]
  01ac8	e2832020	 add         r2, r3, #0x20
  01acc	e3a03000	 mov         r3, #0
  01ad0	e5823000	 str         r3, [r2]

; 1472 :         hd->SWData[1]   = 0;

  01ad4	e59d3030	 ldr         r3, [sp, #0x30]
  01ad8	e2832024	 add         r2, r3, #0x24
  01adc	e3a03000	 mov         r3, #0
  01ae0	e5823000	 str         r3, [r2]

; 1473 :         hd->TagInfo2    = (/* isTx */ (chanPtr->transmit ? 1 : 0) << 9) |
; 1474 :                           (/* Ch */ chanPtr->channelNo << 4) |
; 1475 :                           (/* EP */ chanPtr->channelNo + 1);

  01ae4	e59d30c4	 ldr         r3, [sp, #0xC4]
  01ae8	e2833014	 add         r3, r3, #0x14
  01aec	e5933000	 ldr         r3, [r3]
  01af0	e3530000	 cmp         r3, #0
  01af4	0a000002	 beq         |$LN36@cppiNextSe|
  01af8	e3a03001	 mov         r3, #1
  01afc	e58d3094	 str         r3, [sp, #0x94]
  01b00	ea000001	 b           |$LN37@cppiNextSe|
  01b04		 |$LN36@cppiNextSe|
  01b04	e3a03000	 mov         r3, #0
  01b08	e58d3094	 str         r3, [sp, #0x94]
  01b0c		 |$LN37@cppiNextSe|
  01b0c	e59d3094	 ldr         r3, [sp, #0x94]
  01b10	e1a02483	 mov         r2, r3, lsl #9
  01b14	e59d30c4	 ldr         r3, [sp, #0xC4]
  01b18	e2833018	 add         r3, r3, #0x18
  01b1c	e5d33000	 ldrb        r3, [r3]
  01b20	e1a03203	 mov         r3, r3, lsl #4
  01b24	e1822003	 orr         r2, r2, r3
  01b28	e59d30c4	 ldr         r3, [sp, #0xC4]
  01b2c	e2833018	 add         r3, r3, #0x18
  01b30	e5d33000	 ldrb        r3, [r3]
  01b34	e2833001	 add         r3, r3, #1
  01b38	e1822003	 orr         r2, r2, r3
  01b3c	e59d3030	 ldr         r3, [sp, #0x30]
  01b40	e2833030	 add         r3, r3, #0x30
  01b44	e5832000	 str         r2, [r3]

; 1476 :         hd->Index       = 0;

  01b48	e59d3030	 ldr         r3, [sp, #0x30]
  01b4c	e2832034	 add         r2, r3, #0x34
  01b50	e3a03000	 mov         r3, #0
  01b54	e5823000	 str         r3, [r2]

; 1477 : 
; 1478 :          // Special handling for ZLP TX - set length to 1 and set ZLP bit
; 1479 :         if (chanPtr->transmit && buffSz == 0)

  01b58	e59d30c4	 ldr         r3, [sp, #0xC4]
  01b5c	e2833014	 add         r3, r3, #0x14
  01b60	e5933000	 ldr         r3, [r3]
  01b64	e3530000	 cmp         r3, #0
  01b68	0a000016	 beq         |$LN8@cppiNextSe|
  01b6c	e59d302c	 ldr         r3, [sp, #0x2C]
  01b70	e3530000	 cmp         r3, #0
  01b74	1a000013	 bne         |$LN8@cppiNextSe|

; 1480 :         {
; 1481 :             hd->PacketInfo |= USB_CPPI41_PKT_FLAGS_ZLP;

  01b78	e59d3030	 ldr         r3, [sp, #0x30]
  01b7c	e2833008	 add         r3, r3, #8
  01b80	e5933000	 ldr         r3, [r3]
  01b84	e3832702	 orr         r2, r3, #2, 14
  01b88	e59d3030	 ldr         r3, [sp, #0x30]
  01b8c	e2833008	 add         r3, r3, #8
  01b90	e5832000	 str         r2, [r3]

; 1482 :             hd->DescInfo |= 1;

  01b94	e59d3030	 ldr         r3, [sp, #0x30]
  01b98	e5933000	 ldr         r3, [r3]
  01b9c	e3832001	 orr         r2, r3, #1
  01ba0	e59d3030	 ldr         r3, [sp, #0x30]
  01ba4	e5832000	 str         r2, [r3]

; 1483 :             hd->BuffLen = 1;

  01ba8	e59d3030	 ldr         r3, [sp, #0x30]
  01bac	e283200c	 add         r2, r3, #0xC
  01bb0	e3a03001	 mov         r3, #1
  01bb4	e5823000	 str         r3, [r2]

; 1484 :             hd->OrigBuffLen = 1;

  01bb8	e59d3030	 ldr         r3, [sp, #0x30]
  01bbc	e2832018	 add         r2, r3, #0x18
  01bc0	e3a03001	 mov         r3, #1
  01bc4	e5823000	 str         r3, [r2]
  01bc8		 |$LN8@cppiNextSe|

; 1485 :         }
; 1486 : 
; 1487 :         /* Write the pointer to the packet descriptor to the appropriate Queue
; 1488 :            in the Queue Manager to initiate the transfer
; 1489 :         */
; 1490 :         cppiQueuePush(cppi->pRegs, chanPtr->queueNo, hd);

  01bc8	e59d2030	 ldr         r2, [sp, #0x30]
  01bcc	e59d30c4	 ldr         r3, [sp, #0xC4]
  01bd0	e2833019	 add         r3, r3, #0x19
  01bd4	e5d31000	 ldrb        r1, [r3]
  01bd8	e59d3018	 ldr         r3, [sp, #0x18]
  01bdc	e283301c	 add         r3, r3, #0x1C
  01be0	e5930000	 ldr         r0, [r3]
  01be4	eb000000	 bl          cppiQueuePush

; 1491 : 
; 1492 :         chanPtr->currOffset += buffSz;

  01be8	e59d30c4	 ldr         r3, [sp, #0xC4]
  01bec	e283302c	 add         r3, r3, #0x2C
  01bf0	e5932000	 ldr         r2, [r3]
  01bf4	e59d302c	 ldr         r3, [sp, #0x2C]
  01bf8	e0822003	 add         r2, r2, r3
  01bfc	e59d30c4	 ldr         r3, [sp, #0xC4]
  01c00	e283302c	 add         r3, r3, #0x2C
  01c04	e5832000	 str         r2, [r3]

; 1493 :     }
; 1494 :     else

  01c08	ea000127	 b           |$LN7@cppiNextSe|
  01c0c		 |$LN10@cppiNextSe|

; 1495 :     {
; 1496 :         nHD = (remaining + chanPtr->pktSize - 1) / chanPtr->pktSize;

  01c0c	e59d30c4	 ldr         r3, [sp, #0xC4]
  01c10	e2833028	 add         r3, r3, #0x28
  01c14	e59d2024	 ldr         r2, [sp, #0x24]
  01c18	e5933000	 ldr         r3, [r3]
  01c1c	e0823003	 add         r3, r2, r3
  01c20	e2431001	 sub         r1, r3, #1
  01c24	e59d30c4	 ldr         r3, [sp, #0xC4]
  01c28	e2833028	 add         r3, r3, #0x28
  01c2c	e5930000	 ldr         r0, [r3]
  01c30	eb000000	 bl          __rt_udiv
  01c34	e58d0028	 str         r0, [sp, #0x28]

; 1497 :         chanPtr->nISOHDPerTransfer = nHD;

  01c38	e59d30c4	 ldr         r3, [sp, #0xC4]
  01c3c	e2832034	 add         r2, r3, #0x34
  01c40	e59d3028	 ldr         r3, [sp, #0x28]
  01c44	e5823000	 str         r3, [r2]

; 1498 :         chanPtr->nISOHDForCallback = nHD;

  01c48	e59d30c4	 ldr         r3, [sp, #0xC4]
  01c4c	e2832038	 add         r2, r3, #0x38
  01c50	e59d3028	 ldr         r3, [sp, #0x28]
  01c54	e5823000	 str         r3, [r2]

; 1499 : 
; 1500 :         if (chanPtr->pEndPt->pOverlappedInfo)

  01c58	e59d30c4	 ldr         r3, [sp, #0xC4]
  01c5c	e2833010	 add         r3, r3, #0x10
  01c60	e5933000	 ldr         r3, [r3]
  01c64	e2833038	 add         r3, r3, #0x38
  01c68	e5933000	 ldr         r3, [r3]
  01c6c	e3530000	 cmp         r3, #0
  01c70	0a000013	 beq         |$LN6@cppiNextSe|

; 1501 :         {
; 1502 :             nHD = (chanPtr->pEndPt->pOverlappedInfo->dwBytesToIssueCallback + chanPtr->pktSize - 1) /
; 1503 :                    chanPtr->pktSize;

  01c74	e59d30c4	 ldr         r3, [sp, #0xC4]
  01c78	e2833010	 add         r3, r3, #0x10
  01c7c	e5933000	 ldr         r3, [r3]
  01c80	e2833038	 add         r3, r3, #0x38
  01c84	e5932000	 ldr         r2, [r3]
  01c88	e59d30c4	 ldr         r3, [sp, #0xC4]
  01c8c	e2833028	 add         r3, r3, #0x28
  01c90	e5922000	 ldr         r2, [r2]
  01c94	e5933000	 ldr         r3, [r3]
  01c98	e0823003	 add         r3, r2, r3
  01c9c	e2431001	 sub         r1, r3, #1
  01ca0	e59d30c4	 ldr         r3, [sp, #0xC4]
  01ca4	e2833028	 add         r3, r3, #0x28
  01ca8	e5930000	 ldr         r0, [r3]
  01cac	eb000000	 bl          __rt_udiv
  01cb0	e58d0028	 str         r0, [sp, #0x28]

; 1504 : 
; 1505 :             chanPtr->nISOHDForCallback = nHD;

  01cb4	e59d30c4	 ldr         r3, [sp, #0xC4]
  01cb8	e2832038	 add         r2, r3, #0x38
  01cbc	e59d3028	 ldr         r3, [sp, #0x28]
  01cc0	e5823000	 str         r3, [r2]
  01cc4		 |$LN6@cppiNextSe|

; 1506 :         }
; 1507 : 
; 1508 :         chanPtr->nISOHDQueued += chanPtr->nISOHDPerTransfer;

  01cc4	e59d30c4	 ldr         r3, [sp, #0xC4]
  01cc8	e283203c	 add         r2, r3, #0x3C
  01ccc	e59d30c4	 ldr         r3, [sp, #0xC4]
  01cd0	e2833034	 add         r3, r3, #0x34
  01cd4	e5922000	 ldr         r2, [r2]
  01cd8	e5933000	 ldr         r3, [r3]
  01cdc	e0822003	 add         r2, r2, r3
  01ce0	e59d30c4	 ldr         r3, [sp, #0xC4]
  01ce4	e283303c	 add         r3, r3, #0x3C
  01ce8	e5832000	 str         r2, [r3]

; 1509 : 
; 1510 :         PRINTMSG(ZONE_PDD_ISO,
; 1511 :                  (L"cppiNextSegment: %s Ch %u, ISO, transferSize %d, pktSize %d, %d HDs, "
; 1512 :                   L"callback on %d, queued %d\r\n",
; 1513 :                   chanPtr->transmit ? L"TX" : L"RX",
; 1514 : 				  chanPtr->channelNo, chanPtr->transferSize, chanPtr->pktSize,
; 1515 :                   chanPtr->nISOHDPerTransfer, chanPtr->nISOHDForCallback,
; 1516 :                   chanPtr->nISOHDQueued));

  01cec	e59f33fc	 ldr         r3, [pc, #0x3FC]
  01cf0	e5933440	 ldr         r3, [r3, #0x440]
  01cf4	e3130901	 tst         r3, #1, 18
  01cf8	0a000051	 beq         |$LN44@cppiNextSe|
  01cfc	e59f33ec	 ldr         r3, [pc, #0x3EC]
  01d00	e5933440	 ldr         r3, [r3, #0x440]
  01d04	e3130801	 tst         r3, #1, 16
  01d08	0a000025	 beq         |$LN42@cppiNextSe|
  01d0c	e59d30c4	 ldr         r3, [sp, #0xC4]
  01d10	e2833014	 add         r3, r3, #0x14
  01d14	e5933000	 ldr         r3, [r3]
  01d18	e3530000	 cmp         r3, #0
  01d1c	0a000002	 beq         |$LN38@cppiNextSe|
  01d20	e59f33d8	 ldr         r3, [pc, #0x3D8]
  01d24	e58d3098	 str         r3, [sp, #0x98]
  01d28	ea000001	 b           |$LN39@cppiNextSe|
  01d2c		 |$LN38@cppiNextSe|
  01d2c	e59f33c8	 ldr         r3, [pc, #0x3C8]
  01d30	e58d3098	 str         r3, [sp, #0x98]
  01d34		 |$LN39@cppiNextSe|
  01d34	e59d30c4	 ldr         r3, [sp, #0xC4]
  01d38	e283303c	 add         r3, r3, #0x3C
  01d3c	e5933000	 ldr         r3, [r3]
  01d40	e58d300c	 str         r3, [sp, #0xC]
  01d44	e59d30c4	 ldr         r3, [sp, #0xC4]
  01d48	e2833038	 add         r3, r3, #0x38
  01d4c	e5933000	 ldr         r3, [r3]
  01d50	e58d3008	 str         r3, [sp, #8]
  01d54	e59d30c4	 ldr         r3, [sp, #0xC4]
  01d58	e2833034	 add         r3, r3, #0x34
  01d5c	e5933000	 ldr         r3, [r3]
  01d60	e58d3004	 str         r3, [sp, #4]
  01d64	e59d30c4	 ldr         r3, [sp, #0xC4]
  01d68	e2833028	 add         r3, r3, #0x28
  01d6c	e5933000	 ldr         r3, [r3]
  01d70	e58d3000	 str         r3, [sp]
  01d74	e59d30c4	 ldr         r3, [sp, #0xC4]
  01d78	e2833024	 add         r3, r3, #0x24
  01d7c	e5933000	 ldr         r3, [r3]
  01d80	e59d20c4	 ldr         r2, [sp, #0xC4]
  01d84	e2822018	 add         r2, r2, #0x18
  01d88	e5d22000	 ldrb        r2, [r2]
  01d8c	e59d1098	 ldr         r1, [sp, #0x98]
  01d90	e59f0360	 ldr         r0, [pc, #0x360]
  01d94	eb000000	 bl          CeLogMsg
  01d98	e3a03001	 mov         r3, #1
  01d9c	e58d309c	 str         r3, [sp, #0x9C]
  01da0	ea000024	 b           |$LN43@cppiNextSe|
  01da4		 |$LN42@cppiNextSe|
  01da4	e59d30c4	 ldr         r3, [sp, #0xC4]
  01da8	e2833014	 add         r3, r3, #0x14
  01dac	e5933000	 ldr         r3, [r3]
  01db0	e3530000	 cmp         r3, #0
  01db4	0a000002	 beq         |$LN40@cppiNextSe|
  01db8	e59f3340	 ldr         r3, [pc, #0x340]
  01dbc	e58d30a0	 str         r3, [sp, #0xA0]
  01dc0	ea000001	 b           |$LN41@cppiNextSe|
  01dc4		 |$LN40@cppiNextSe|
  01dc4	e59f3330	 ldr         r3, [pc, #0x330]
  01dc8	e58d30a0	 str         r3, [sp, #0xA0]
  01dcc		 |$LN41@cppiNextSe|
  01dcc	e59d30c4	 ldr         r3, [sp, #0xC4]
  01dd0	e283303c	 add         r3, r3, #0x3C
  01dd4	e5933000	 ldr         r3, [r3]
  01dd8	e58d300c	 str         r3, [sp, #0xC]
  01ddc	e59d30c4	 ldr         r3, [sp, #0xC4]
  01de0	e2833038	 add         r3, r3, #0x38
  01de4	e5933000	 ldr         r3, [r3]
  01de8	e58d3008	 str         r3, [sp, #8]
  01dec	e59d30c4	 ldr         r3, [sp, #0xC4]
  01df0	e2833034	 add         r3, r3, #0x34
  01df4	e5933000	 ldr         r3, [r3]
  01df8	e58d3004	 str         r3, [sp, #4]
  01dfc	e59d30c4	 ldr         r3, [sp, #0xC4]
  01e00	e2833028	 add         r3, r3, #0x28
  01e04	e5933000	 ldr         r3, [r3]
  01e08	e58d3000	 str         r3, [sp]
  01e0c	e59d30c4	 ldr         r3, [sp, #0xC4]
  01e10	e2833024	 add         r3, r3, #0x24
  01e14	e5933000	 ldr         r3, [r3]
  01e18	e59d20c4	 ldr         r2, [sp, #0xC4]
  01e1c	e2822018	 add         r2, r2, #0x18
  01e20	e5d22000	 ldrb        r2, [r2]
  01e24	e59d10a0	 ldr         r1, [sp, #0xA0]
  01e28	e59f02c8	 ldr         r0, [pc, #0x2C8]
  01e2c	eb000000	 bl          NKDbgPrintfW
  01e30	e3a03000	 mov         r3, #0
  01e34	e58d309c	 str         r3, [sp, #0x9C]
  01e38		 |$LN43@cppiNextSe|
  01e38	e3a03001	 mov         r3, #1
  01e3c	e58d30a4	 str         r3, [sp, #0xA4]
  01e40	ea000001	 b           |$LN45@cppiNextSe|
  01e44		 |$LN44@cppiNextSe|
  01e44	e3a03000	 mov         r3, #0
  01e48	e58d30a4	 str         r3, [sp, #0xA4]
  01e4c		 |$LN45@cppiNextSe|

; 1517 : 
; 1518 :         for (i = 1; i <= chanPtr->nISOHDPerTransfer; ++i)

  01e4c	e3a03001	 mov         r3, #1
  01e50	e58d3014	 str         r3, [sp, #0x14]
  01e54	ea000002	 b           |$LN5@cppiNextSe|
  01e58		 |$LN4@cppiNextSe|
  01e58	e59d3014	 ldr         r3, [sp, #0x14]
  01e5c	e2833001	 add         r3, r3, #1
  01e60	e58d3014	 str         r3, [sp, #0x14]
  01e64		 |$LN5@cppiNextSe|
  01e64	e59d30c4	 ldr         r3, [sp, #0xC4]
  01e68	e2833034	 add         r3, r3, #0x34
  01e6c	e59d2014	 ldr         r2, [sp, #0x14]
  01e70	e5933000	 ldr         r3, [r3]
  01e74	e1520003	 cmp         r2, r3
  01e78	8a00008b	 bhi         |$LN3@cppiNextSe|

; 1519 :         {
; 1520 :             hd = cppiHdAlloc(cppi);

  01e7c	e59d0018	 ldr         r0, [sp, #0x18]
  01e80	eb000000	 bl          cppiHdAlloc
  01e84	e58d00a8	 str         r0, [sp, #0xA8]
  01e88	e59d30a8	 ldr         r3, [sp, #0xA8]
  01e8c	e58d3030	 str         r3, [sp, #0x30]

; 1521 :             DEBUGCHK(hd != NULL);

  01e90	e59d3030	 ldr         r3, [sp, #0x30]
  01e94	e3530000	 cmp         r3, #0
  01e98	0a000002	 beq         |$LN46@cppiNextSe|
  01e9c	e3a03001	 mov         r3, #1
  01ea0	e58d30ac	 str         r3, [sp, #0xAC]
  01ea4	ea000008	 b           |$LN47@cppiNextSe|
  01ea8		 |$LN46@cppiNextSe|
  01ea8	e3a03c05	 mov         r3, #5, 24
  01eac	e38330f1	 orr         r3, r3, #0xF1
  01eb0	e59f223c	 ldr         r2, [pc, #0x23C]
  01eb4	e59f1234	 ldr         r1, [pc, #0x234]
  01eb8	e59f022c	 ldr         r0, [pc, #0x22C]
  01ebc	eb000000	 bl          NKDbgPrintfW
  01ec0	e6000010	 __debugbreak_ce
  01ec4	e3a03000	 mov         r3, #0
  01ec8	e58d30ac	 str         r3, [sp, #0xAC]
  01ecc		 |$LN47@cppiNextSe|

; 1522 :             if (hd == NULL)

  01ecc	e59d3030	 ldr         r3, [sp, #0x30]
  01ed0	e3530000	 cmp         r3, #0
  01ed4	1a000000	 bne         |$LN2@cppiNextSe|

; 1523 : 			{
; 1524 :                 return;

  01ed8	ea000080	 b           |$LN18@cppiNextSe|
  01edc		 |$LN2@cppiNextSe|

; 1525 : 			}
; 1526 : 
; 1527 :             // Initialise the descriptor
; 1528 :             hd->DescInfo    = (USB_CPPI41_DESC_TYPE_HOST   << USB_CPPI41_DESC_TYPE_SHIFT) |
; 1529 :                               (((sizeof(*hd) - 40) / 4)    << USB_CPPI41_DESC_WORDS_SHIFT) |
; 1530 :                               buffSz;

  01edc	e59d202c	 ldr         r2, [sp, #0x2C]
  01ee0	e3a03481	 mov         r3, #0x81, 8
  01ee4	e3833502	 orr         r3, r3, #2, 10
  01ee8	e1822003	 orr         r2, r2, r3
  01eec	e59d3030	 ldr         r3, [sp, #0x30]
  01ef0	e5832000	 str         r2, [r3]

; 1531 :             hd->TagInfo     = 0;

  01ef4	e59d3030	 ldr         r3, [sp, #0x30]
  01ef8	e2832004	 add         r2, r3, #4
  01efc	e3a03000	 mov         r3, #0
  01f00	e5823000	 str         r3, [r2]

; 1532 :             hd->PacketInfo  = (USB_CPPI41_PKT_TYPE_USB     << USB_CPPI41_PKT_TYPE_SHIFT) |
; 1533 :                               (USB_CPPI41_PKT_RETPLCY_FULL << USB_CPPI41_PKT_RETPLCY_SHIFT) |
; 1534 :                               (USB_CPPI41_DESC_LOC_OFFCHIP << USB_CPPI41_DESC_LOC_SHIFT) |
; 1535 :                               (USB_CPPI_XXCMPL_QMGR        << USB_CPPI41_PKT_RETQMGR_SHIFT) |
; 1536 :                               (cppiCmplQNum                << USB_CPPI41_PKT_RETQ_SHIFT);

  01f04	e59d3010	 ldr         r3, [sp, #0x10]
  01f08	e3832305	 orr         r2, r3, #5, 6
  01f0c	e59d3030	 ldr         r3, [sp, #0x30]
  01f10	e2833008	 add         r3, r3, #8
  01f14	e5832000	 str         r2, [r3]

; 1537 :             hd->BuffLen     = buffSz;

  01f18	e59d3030	 ldr         r3, [sp, #0x30]
  01f1c	e283200c	 add         r2, r3, #0xC
  01f20	e59d302c	 ldr         r3, [sp, #0x2C]
  01f24	e5823000	 str         r3, [r2]

; 1538 :             hd->BuffPtr     = buffPtr;

  01f28	e59d3030	 ldr         r3, [sp, #0x30]
  01f2c	e2832010	 add         r2, r3, #0x10
  01f30	e59d301c	 ldr         r3, [sp, #0x1C]
  01f34	e5823000	 str         r3, [r2]

; 1539 :             hd->NextPtr     = 0;

  01f38	e59d3030	 ldr         r3, [sp, #0x30]
  01f3c	e2832014	 add         r2, r3, #0x14
  01f40	e3a03000	 mov         r3, #0
  01f44	e5823000	 str         r3, [r2]

; 1540 :             hd->OrigBuffLen = hd->BuffLen;

  01f48	e59d3030	 ldr         r3, [sp, #0x30]
  01f4c	e283100c	 add         r1, r3, #0xC
  01f50	e59d3030	 ldr         r3, [sp, #0x30]
  01f54	e2832018	 add         r2, r3, #0x18
  01f58	e5913000	 ldr         r3, [r1]
  01f5c	e5823000	 str         r3, [r2]

; 1541 :             hd->OrigBuffPtr = hd->BuffPtr;

  01f60	e59d3030	 ldr         r3, [sp, #0x30]
  01f64	e2831010	 add         r1, r3, #0x10
  01f68	e59d3030	 ldr         r3, [sp, #0x30]
  01f6c	e283201c	 add         r2, r3, #0x1C
  01f70	e5913000	 ldr         r3, [r1]
  01f74	e5823000	 str         r3, [r2]

; 1542 :             hd->SWData[0]   = 0;

  01f78	e59d3030	 ldr         r3, [sp, #0x30]
  01f7c	e2832020	 add         r2, r3, #0x20
  01f80	e3a03000	 mov         r3, #0
  01f84	e5823000	 str         r3, [r2]

; 1543 :             hd->SWData[1]   = 0;

  01f88	e59d3030	 ldr         r3, [sp, #0x30]
  01f8c	e2832024	 add         r2, r3, #0x24
  01f90	e3a03000	 mov         r3, #0
  01f94	e5823000	 str         r3, [r2]

; 1544 :             hd->TagInfo2    = (/* isTx */ (chanPtr->transmit ? 1 : 0) << 9) |
; 1545 :                               (/* Ch */ chanPtr->channelNo << 4) |
; 1546 :                               (/* EP */ chanPtr->channelNo + 1);

  01f98	e59d30c4	 ldr         r3, [sp, #0xC4]
  01f9c	e2833014	 add         r3, r3, #0x14
  01fa0	e5933000	 ldr         r3, [r3]
  01fa4	e3530000	 cmp         r3, #0
  01fa8	0a000002	 beq         |$LN48@cppiNextSe|
  01fac	e3a03001	 mov         r3, #1
  01fb0	e58d30b0	 str         r3, [sp, #0xB0]
  01fb4	ea000001	 b           |$LN49@cppiNextSe|
  01fb8		 |$LN48@cppiNextSe|
  01fb8	e3a03000	 mov         r3, #0
  01fbc	e58d30b0	 str         r3, [sp, #0xB0]
  01fc0		 |$LN49@cppiNextSe|
  01fc0	e59d30b0	 ldr         r3, [sp, #0xB0]
  01fc4	e1a02483	 mov         r2, r3, lsl #9
  01fc8	e59d30c4	 ldr         r3, [sp, #0xC4]
  01fcc	e2833018	 add         r3, r3, #0x18
  01fd0	e5d33000	 ldrb        r3, [r3]
  01fd4	e1a03203	 mov         r3, r3, lsl #4
  01fd8	e1822003	 orr         r2, r2, r3
  01fdc	e59d30c4	 ldr         r3, [sp, #0xC4]
  01fe0	e2833018	 add         r3, r3, #0x18
  01fe4	e5d33000	 ldrb        r3, [r3]
  01fe8	e2833001	 add         r3, r3, #1
  01fec	e1822003	 orr         r2, r2, r3
  01ff0	e59d3030	 ldr         r3, [sp, #0x30]
  01ff4	e2833030	 add         r3, r3, #0x30
  01ff8	e5832000	 str         r2, [r3]

; 1547 :             hd->Index       = i; // 1 based index

  01ffc	e59d3030	 ldr         r3, [sp, #0x30]
  02000	e2832034	 add         r2, r3, #0x34
  02004	e59d3014	 ldr         r3, [sp, #0x14]
  02008	e5823000	 str         r3, [r2]

; 1548 : 
; 1549 :             /* Write the pointer to the packet descriptor to the appropriate Queue
; 1550 :                in the Queue Manager to initiate the transfer
; 1551 :             */
; 1552 :             cppiQueuePush(cppi->pRegs, chanPtr->queueNo, hd);

  0200c	e59d2030	 ldr         r2, [sp, #0x30]
  02010	e59d30c4	 ldr         r3, [sp, #0xC4]
  02014	e2833019	 add         r3, r3, #0x19
  02018	e5d31000	 ldrb        r1, [r3]
  0201c	e59d3018	 ldr         r3, [sp, #0x18]
  02020	e283301c	 add         r3, r3, #0x1C
  02024	e5930000	 ldr         r0, [r3]
  02028	eb000000	 bl          cppiQueuePush

; 1553 : 
; 1554 :             chanPtr->currOffset += buffSz;

  0202c	e59d30c4	 ldr         r3, [sp, #0xC4]
  02030	e283302c	 add         r3, r3, #0x2C
  02034	e5932000	 ldr         r2, [r3]
  02038	e59d302c	 ldr         r3, [sp, #0x2C]
  0203c	e0822003	 add         r2, r2, r3
  02040	e59d30c4	 ldr         r3, [sp, #0xC4]
  02044	e283302c	 add         r3, r3, #0x2C
  02048	e5832000	 str         r2, [r3]

; 1555 :             buffPtr = chanPtr->startAddr + chanPtr->currOffset;

  0204c	e59d30c4	 ldr         r3, [sp, #0xC4]
  02050	e2832020	 add         r2, r3, #0x20
  02054	e59d30c4	 ldr         r3, [sp, #0xC4]
  02058	e283302c	 add         r3, r3, #0x2C
  0205c	e5922000	 ldr         r2, [r2]
  02060	e5933000	 ldr         r3, [r3]
  02064	e0823003	 add         r3, r2, r3
  02068	e58d301c	 str         r3, [sp, #0x1C]

; 1556 :             remaining -= buffSz;

  0206c	e59d2024	 ldr         r2, [sp, #0x24]
  02070	e59d302c	 ldr         r3, [sp, #0x2C]
  02074	e0423003	 sub         r3, r2, r3
  02078	e58d3024	 str         r3, [sp, #0x24]

; 1557 :             buffSz  = min(remaining, maxpacket);

  0207c	e59d2024	 ldr         r2, [sp, #0x24]
  02080	e59d3034	 ldr         r3, [sp, #0x34]
  02084	e1520003	 cmp         r2, r3
  02088	2a000002	 bcs         |$LN50@cppiNextSe|
  0208c	e59d3024	 ldr         r3, [sp, #0x24]
  02090	e58d30b4	 str         r3, [sp, #0xB4]
  02094	ea000001	 b           |$LN51@cppiNextSe|
  02098		 |$LN50@cppiNextSe|
  02098	e59d3034	 ldr         r3, [sp, #0x34]
  0209c	e58d30b4	 str         r3, [sp, #0xB4]
  020a0		 |$LN51@cppiNextSe|
  020a0	e59d30b4	 ldr         r3, [sp, #0xB4]
  020a4	e58d302c	 str         r3, [sp, #0x2C]

; 1558 :         }

  020a8	eaffff6a	 b           |$LN4@cppiNextSe|
  020ac		 |$LN3@cppiNextSe|
  020ac		 |$LN7@cppiNextSe|

; 1559 :     }
; 1560 : 
; 1561 :     /* If this is a receive, we need to enable Rx for this channel 
; 1562 :        in the DMA scheduler */
; 1563 :     if(!chanPtr->transmit)

  020ac	e59d30c4	 ldr         r3, [sp, #0xC4]
  020b0	e2833014	 add         r3, r3, #0x14
  020b4	e5933000	 ldr         r3, [r3]
  020b8	e3530000	 cmp         r3, #0
  020bc	1a000004	 bne         |$LN1@cppiNextSe|

; 1564 : 	{
; 1565 :         USBCDMA_ConfigureScheduleRx(chanPtr->channelNo, TRUE);

  020c0	e3a01001	 mov         r1, #1
  020c4	e59d30c4	 ldr         r3, [sp, #0xC4]
  020c8	e2833018	 add         r3, r3, #0x18
  020cc	e5d30000	 ldrb        r0, [r3]
  020d0	eb000000	 bl          USBCDMA_ConfigureScheduleRx
  020d4		 |$LN1@cppiNextSe|

; 1566 : 	}
; 1567 : 
; 1568 :     UNLOCK_ENDPOINT(pPdd);

  020d4	e59d30c0	 ldr         r3, [sp, #0xC0]
  020d8	e2830e27	 add         r0, r3, #0x27, 28
  020dc	eb000000	 bl          LeaveCriticalSection
  020e0		 |$LN18@cppiNextSe|

; 1569 : }

  020e0	e28dd0b8	 add         sp, sp, #0xB8
  020e4	e89d6000	 ldmia       sp, {sp, lr}
  020e8	e12fff1e	 bx          lr
  020ec		 |$LN55@cppiNextSe|
  020ec		 |$LN56@cppiNextSe|
  020ec	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  020f0		 |$LN57@cppiNextSe|
  020f0	00000000	 DCD         |dpCurSettings|
  020f4		 |$LN58@cppiNextSe|
  020f4	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  020f8		 |$LN59@cppiNextSe|
  020f8	00000000	 DCD         |??_C@_1MC@PLNEICDI@?$AAc?$AAp?$AAp?$AAi?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAg?$AAm?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAI?$AAS?$AAO?$AA?0?$AA?5@|
  020fc		 |$LN60@cppiNextSe|
  020fc	00000000	 DCD         |??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@|
  02100		 |$LN61@cppiNextSe|
  02100	00000000	 DCD         |??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@|
  02104		 |$LN62@cppiNextSe|
  02104	00000000	 DCD         |??_C@_1JK@IDOHNMNF@?$AAc?$AAp?$AAp?$AAi?$AAN?$AAe?$AAx?$AAt?$AAS?$AAe?$AAg?$AAm?$AAe?$AAn?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?0?$AA?5?$AAs?$AAe?$AAg?$AAL?$AAe@|
  02108		 |$M48224|

			 ENDP  ; |cppiNextSegment|

	EXPORT	|??_C@_1FO@JMNGHGHF@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAM?$AAi?$AAs?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@HMIKCFGL@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAd?$AAe?$AAs@| [ DATA ] ; `string'

  00060			 AREA	 |.pdata|, PDATA
|$T48244| DCD	|$LN13@cppiHdAllo|
	DCD	0x40005704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@JMNGHGHF@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAM?$AAi?$AAs?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "H", 0x0, "d", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, ":", 0x0, " "
	DCB	0x0, "M", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "g", 0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "d"
	DCB	0x0, "e", 0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p"
	DCB	0x0, "t", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "-", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@HMIKCFGL@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAd?$AAe?$AAs@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "H", 0x0, "d", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "A", 0x0, "I", 0x0, "L", 0x0, "E", 0x0, "D"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "O", 0x0, "u", 0x0, "t"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "(", 0x0, "i"
	DCB	0x0, "n", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "s"
	DCB	0x0, "e", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "C", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "t", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, ")", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  02108			 AREA	 |.text|, CODE, ARM

  02108		 |cppiHdAlloc| PROC

; 352  : {

  02108		 |$LN13@cppiHdAllo|
  02108	e1a0c00d	 mov         r12, sp
  0210c	e92d0001	 stmdb       sp!, {r0}
  02110	e92d5000	 stmdb       sp!, {r12, lr}
  02114	e24dd010	 sub         sp, sp, #0x10
  02118		 |$M48241|

; 353  :     HOST_DESCRIPTOR *hd;
; 354  : 
; 355  :     DEBUGCHK(cppi != NULL);

  02118	e59d3018	 ldr         r3, [sp, #0x18]
  0211c	e3530000	 cmp         r3, #0
  02120	0a000002	 beq         |$LN7@cppiHdAllo|
  02124	e3a03001	 mov         r3, #1
  02128	e58d3008	 str         r3, [sp, #8]
  0212c	ea000008	 b           |$LN8@cppiHdAllo|
  02130		 |$LN7@cppiHdAllo|
  02130	e3a03c01	 mov         r3, #1, 24
  02134	e3833063	 orr         r3, r3, #0x63
  02138	e59f2114	 ldr         r2, [pc, #0x114]
  0213c	e59f111c	 ldr         r1, [pc, #0x11C]
  02140	e59f0114	 ldr         r0, [pc, #0x114]
  02144	eb000000	 bl          NKDbgPrintfW
  02148	e6000010	 __debugbreak_ce
  0214c	e3a03000	 mov         r3, #0
  02150	e58d3008	 str         r3, [sp, #8]
  02154		 |$LN8@cppiHdAllo|

; 356  :     if (cppi == NULL)

  02154	e59d3018	 ldr         r3, [sp, #0x18]
  02158	e3530000	 cmp         r3, #0
  0215c	1a000002	 bne         |$LN4@cppiHdAllo|

; 357  : 	{
; 358  :         return NULL;

  02160	e3a03000	 mov         r3, #0
  02164	e58d3004	 str         r3, [sp, #4]
  02168	ea000033	 b           |$LN5@cppiHdAllo|
  0216c		 |$LN4@cppiHdAllo|

; 359  : 	}
; 360  : 
; 361  :     LOCK_HD_POOL(cppi);

  0216c	e59d3018	 ldr         r3, [sp, #0x18]
  02170	e2833b02	 add         r3, r3, #2, 22
  02174	e28300b8	 add         r0, r3, #0xB8
  02178	eb000000	 bl          EnterCriticalSection

; 362  :     hd = cppi->poolHead;

  0217c	e59d3018	 ldr         r3, [sp, #0x18]
  02180	e2833b02	 add         r3, r3, #2, 22
  02184	e28330b4	 add         r3, r3, #0xB4
  02188	e5933000	 ldr         r3, [r3]
  0218c	e58d3000	 str         r3, [sp]

; 363  :     if (hd != NULL)

  02190	e59d3000	 ldr         r3, [sp]
  02194	e3530000	 cmp         r3, #0
  02198	0a000006	 beq         |$LN3@cppiHdAllo|

; 364  : 	{
; 365  :         cppi->poolHead = hd->next;

  0219c	e59d3000	 ldr         r3, [sp]
  021a0	e2831028	 add         r1, r3, #0x28
  021a4	e59d3018	 ldr         r3, [sp, #0x18]
  021a8	e2833b02	 add         r3, r3, #2, 22
  021ac	e28320b4	 add         r2, r3, #0xB4
  021b0	e5913000	 ldr         r3, [r1]
  021b4	e5823000	 str         r3, [r2]
  021b8		 |$LN3@cppiHdAllo|

; 366  : 	}
; 367  : 
; 368  :     UNLOCK_HD_POOL(cppi);

  021b8	e59d3018	 ldr         r3, [sp, #0x18]
  021bc	e2833b02	 add         r3, r3, #2, 22
  021c0	e28300b8	 add         r0, r3, #0xB8
  021c4	eb000000	 bl          LeaveCriticalSection

; 369  : 
; 370  :     if (hd == NULL) 

  021c8	e59d3000	 ldr         r3, [sp]
  021cc	e3530000	 cmp         r3, #0
  021d0	1a000007	 bne         |$LN2@cppiHdAllo|

; 371  : 	{
; 372  :         ERRORMSG(1,
; 373  :             (L"cppiHdAlloc: FAILED - Out of descriptors (increase DescriptorCount registry setting)!\r\n"));

  021d4	e3a02c01	 mov         r2, #1, 24
  021d8	e3822075	 orr         r2, r2, #0x75
  021dc	e59f1070	 ldr         r1, [pc, #0x70]
  021e0	e59f0068	 ldr         r0, [pc, #0x68]
  021e4	eb000000	 bl          NKDbgPrintfW
  021e8	e59f0068	 ldr         r0, [pc, #0x68]
  021ec	eb000000	 bl          NKDbgPrintfW

; 374  :     }
; 375  :     else 

  021f0	ea00000f	 b           |$LN1@cppiHdAllo|
  021f4		 |$LN2@cppiHdAllo|

; 376  : 	{
; 377  :         ERRORMSG(((UINT32)hd & (CPPI_HD_ALIGN - 1)),
; 378  :             (L"cppiHdAlloc: Misaligned descriptor - 0x%08x!\r\n",
; 379  :             hd));

  021f4	e59d3000	 ldr         r3, [sp]
  021f8	e313003f	 tst         r3, #0x3F
  021fc	0a00000a	 beq         |$LN9@cppiHdAllo|
  02200	e3a02c01	 mov         r2, #1, 24
  02204	e382207b	 orr         r2, r2, #0x7B
  02208	e59f1044	 ldr         r1, [pc, #0x44]
  0220c	e59f003c	 ldr         r0, [pc, #0x3C]
  02210	eb000000	 bl          NKDbgPrintfW
  02214	e59d1000	 ldr         r1, [sp]
  02218	e59f002c	 ldr         r0, [pc, #0x2C]
  0221c	eb000000	 bl          NKDbgPrintfW
  02220	e3a03001	 mov         r3, #1
  02224	e58d300c	 str         r3, [sp, #0xC]
  02228	ea000001	 b           |$LN10@cppiHdAllo|
  0222c		 |$LN9@cppiHdAllo|
  0222c	e3a03000	 mov         r3, #0
  02230	e58d300c	 str         r3, [sp, #0xC]
  02234		 |$LN10@cppiHdAllo|
  02234		 |$LN1@cppiHdAllo|

; 380  :     }
; 381  : 
; 382  :     return hd;

  02234	e59d3000	 ldr         r3, [sp]
  02238	e58d3004	 str         r3, [sp, #4]
  0223c		 |$LN5@cppiHdAllo|

; 383  : }

  0223c	e59d0004	 ldr         r0, [sp, #4]
  02240	e28dd010	 add         sp, sp, #0x10
  02244	e89d6000	 ldmia       sp, {sp, lr}
  02248	e12fff1e	 bx          lr
  0224c		 |$LN14@cppiHdAllo|
  0224c		 |$LN15@cppiHdAllo|
  0224c	00000000	 DCD         |??_C@_1FO@JMNGHGHF@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAM?$AAi?$AAs?$AAa?$AAl?$AAi?$AAg?$AAn?$AAe?$AAd?$AA?5?$AAd?$AAe?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt@|
  02250		 |$LN16@cppiHdAllo|
  02250	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  02254		 |$LN17@cppiHdAllo|
  02254	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02258		 |$LN18@cppiHdAllo|
  02258	00000000	 DCD         |??_C@_1LA@HMIKCFGL@?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?5?$AA?9?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAd?$AAe?$AAs@|
  0225c		 |$LN19@cppiHdAllo|
  0225c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02260		 |$LN20@cppiHdAllo|
  02260	00000000	 DCD         |dpCurSettings|
  02264		 |$M48242|

			 ENDP  ; |cppiHdAlloc|

	EXPORT	|??_C@_1GC@IDPIMKKM@?$AAc?$AAp?$AAp?$AAi?$AAR?$AAn?$AAd?$AAi?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAh?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FI@MOHHNHNM@?$AAc?$AAp?$AAp?$AAi?$AAR?$AAn?$AAd?$AAi?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAr?$AAe@| [ DATA ] ; `string'

  00068			 AREA	 |.pdata|, PDATA
|$T48277| DCD	|$LN52@cppiRndisU|
	DCD	0x4000f304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@IDPIMKKM@?$AAc?$AAp?$AAp?$AAi?$AAR?$AAn?$AAd?$AAi?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAh?$AAa?$AAn@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "R", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "s", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "e", 0x0, "x", 0x0, "p", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, " ", 0x0, "n"
	DCB	0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@MOHHNHNM@?$AAc?$AAp?$AAp?$AAi?$AAR?$AAn?$AAd?$AAi?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAr?$AAe@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "R", 0x0, "n", 0x0, "d"
	DCB	0x0, "i", 0x0, "s", 0x0, "U", 0x0, "p", 0x0, "d", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "w", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  02264			 AREA	 |.text|, CODE, ARM

  02264		 |cppiRndisUpdate| PROC

; 1284 : {

  02264		 |$LN52@cppiRndisU|
  02264	e1a0c00d	 mov         r12, sp
  02268	e92d0007	 stmdb       sp!, {r0 - r2}
  0226c	e92d5000	 stmdb       sp!, {r12, lr}
  02270	e24dd01c	 sub         sp, sp, #0x1C
  02274		 |$M48274|

; 1285 :     volatile UINT32* pRndisReg	 = NULL;

  02274	e3a03000	 mov         r3, #0
  02278	e58d3004	 str         r3, [sp, #4]

; 1286 : 	UINT32  rndisRegVal			 = 0;

  0227c	e3a03000	 mov         r3, #0
  02280	e58d3008	 str         r3, [sp, #8]

; 1287 :     UINT32 mode					 = 0;

  02284	e3a03000	 mov         r3, #0
  02288	e58d3000	 str         r3, [sp]

; 1288 : 
; 1289 :     /* we may need to change the rndis flag for this cppi channel */
; 1290 :     if (channel->lastModeRndis != isRndis)

  0228c	e59d3024	 ldr         r3, [sp, #0x24]
  02290	e283301a	 add         r3, r3, #0x1A
  02294	e5d33000	 ldrb        r3, [r3]
  02298	e1a02003	 mov         r2, r3
  0229c	e59d302c	 ldr         r3, [sp, #0x2C]
  022a0	e1520003	 cmp         r2, r3
  022a4	0a000049	 beq         |$LN26@cppiRndisU|

; 1291 :     {
; 1292 :         /* Mode
; 1293 :         00: Transparent
; 1294 :         01: RNDIS
; 1295 :         10: CDC
; 1296 :         11: Generic RNDIS
; 1297 :         */
; 1298 :         if (channel->transmit)

  022a8	e59d3024	 ldr         r3, [sp, #0x24]
  022ac	e2833014	 add         r3, r3, #0x14
  022b0	e5933000	 ldr         r3, [r3]
  022b4	e3530000	 cmp         r3, #0
  022b8	0a000003	 beq         |$LN25@cppiRndisU|

; 1299 :         {
; 1300 : 			pRndisReg = &pRegBase->TXMODE;

  022bc	e59d3028	 ldr         r3, [sp, #0x28]
  022c0	e2833070	 add         r3, r3, #0x70
  022c4	e58d3004	 str         r3, [sp, #4]

; 1301 :         }
; 1302 :         else

  022c8	ea000002	 b           |$LN24@cppiRndisU|
  022cc		 |$LN25@cppiRndisU|

; 1303 :         {
; 1304 : 			pRndisReg = &pRegBase->RXMODE;

  022cc	e59d3028	 ldr         r3, [sp, #0x28]
  022d0	e2833074	 add         r3, r3, #0x74
  022d4	e58d3004	 str         r3, [sp, #4]
  022d8		 |$LN24@cppiRndisU|

; 1305 :         }
; 1306 : 
; 1307 : 		rndisRegVal = *pRndisReg;

  022d8	e59d3004	 ldr         r3, [sp, #4]
  022dc	e5933000	 ldr         r3, [r3]
  022e0	e58d3008	 str         r3, [sp, #8]

; 1308 :         mode = 0x3 << (channel->channelNo * 2);

  022e4	e59d3024	 ldr         r3, [sp, #0x24]
  022e8	e2833018	 add         r3, r3, #0x18
  022ec	e5d33000	 ldrb        r3, [r3]
  022f0	e1a01003	 mov         r1, r3
  022f4	e3a03002	 mov         r3, #2
  022f8	e0020391	 mul         r2, r1, r3
  022fc	e3a03003	 mov         r3, #3
  02300	e1a03213	 mov         r3, r3, lsl r2
  02304	e58d3000	 str         r3, [sp]

; 1309 : 
; 1310 :         if (isRndis > 0)

  02308	e59d302c	 ldr         r3, [sp, #0x2C]
  0230c	e3530000	 cmp         r3, #0
  02310	da000004	 ble         |$LN23@cppiRndisU|

; 1311 : 		{
; 1312 :             rndisRegVal |= mode;

  02314	e59d2008	 ldr         r2, [sp, #8]
  02318	e59d3000	 ldr         r3, [sp]
  0231c	e1823003	 orr         r3, r2, r3
  02320	e58d3008	 str         r3, [sp, #8]

; 1313 : 		}
; 1314 :         else

  02324	ea000004	 b           |$LN22@cppiRndisU|
  02328		 |$LN23@cppiRndisU|

; 1315 : 		{
; 1316 :             rndisRegVal &= ~mode;

  02328	e59d3000	 ldr         r3, [sp]
  0232c	e1e02003	 mvn         r2, r3
  02330	e59d3008	 ldr         r3, [sp, #8]
  02334	e0033002	 and         r3, r3, r2
  02338	e58d3008	 str         r3, [sp, #8]
  0233c		 |$LN22@cppiRndisU|

; 1317 : 		}
; 1318 : 
; 1319 :         if (*pRndisReg != rndisRegVal)

  0233c	e59d3004	 ldr         r3, [sp, #4]
  02340	e5932000	 ldr         r2, [r3]
  02344	e59d3008	 ldr         r3, [sp, #8]
  02348	e1520003	 cmp         r2, r3
  0234c	0a00001a	 beq         |$LN21@cppiRndisU|

; 1320 :         {
; 1321 :             PRINTMSG(ZONE_PDD_DMA,(L"cppiRndisUpdate: writing mode register %x\r\n", rndisRegVal));

  02350	e59f32d4	 ldr         r3, [pc, #0x2D4]
  02354	e5933440	 ldr         r3, [r3, #0x440]
  02358	e3130902	 tst         r3, #2, 18
  0235c	0a000011	 beq         |$LN31@cppiRndisU|
  02360	e59f32c4	 ldr         r3, [pc, #0x2C4]
  02364	e5933440	 ldr         r3, [r3, #0x440]
  02368	e3130801	 tst         r3, #1, 16
  0236c	0a000005	 beq         |$LN29@cppiRndisU|
  02370	e59d1008	 ldr         r1, [sp, #8]
  02374	e59f02ac	 ldr         r0, [pc, #0x2AC]
  02378	eb000000	 bl          CeLogMsg
  0237c	e3a03001	 mov         r3, #1
  02380	e58d3010	 str         r3, [sp, #0x10]
  02384	ea000004	 b           |$LN30@cppiRndisU|
  02388		 |$LN29@cppiRndisU|
  02388	e59d1008	 ldr         r1, [sp, #8]
  0238c	e59f0294	 ldr         r0, [pc, #0x294]
  02390	eb000000	 bl          NKDbgPrintfW
  02394	e3a03000	 mov         r3, #0
  02398	e58d3010	 str         r3, [sp, #0x10]
  0239c		 |$LN30@cppiRndisU|
  0239c	e3a03001	 mov         r3, #1
  023a0	e58d3014	 str         r3, [sp, #0x14]
  023a4	ea000001	 b           |$LN32@cppiRndisU|
  023a8		 |$LN31@cppiRndisU|
  023a8	e3a03000	 mov         r3, #0
  023ac	e58d3014	 str         r3, [sp, #0x14]
  023b0		 |$LN32@cppiRndisU|

; 1322 :             *pRndisReg = rndisRegVal;

  023b0	e59d2008	 ldr         r2, [sp, #8]
  023b4	e59d3004	 ldr         r3, [sp, #4]
  023b8	e5832000	 str         r2, [r3]
  023bc		 |$LN21@cppiRndisU|

; 1323 :         }
; 1324 : 
; 1325 :         channel->lastModeRndis = (UINT8)isRndis;

  023bc	e59d302c	 ldr         r3, [sp, #0x2C]
  023c0	e20320ff	 and         r2, r3, #0xFF
  023c4	e59d3024	 ldr         r3, [sp, #0x24]
  023c8	e283301a	 add         r3, r3, #0x1A
  023cc	e5c32000	 strb        r2, [r3]
  023d0		 |$LN26@cppiRndisU|

; 1326 :     }
; 1327 : 
; 1328 :     // The generic RNDIS size register is only used for receive channels
; 1329 :     if (isRndis && !channel->transmit)

  023d0	e59d302c	 ldr         r3, [sp, #0x2C]
  023d4	e3530000	 cmp         r3, #0
  023d8	0a00008c	 beq         |$LN20@cppiRndisU|
  023dc	e59d3024	 ldr         r3, [sp, #0x24]
  023e0	e2833014	 add         r3, r3, #0x14
  023e4	e5933000	 ldr         r3, [r3]
  023e8	e3530000	 cmp         r3, #0
  023ec	1a000087	 bne         |$LN20@cppiRndisU|

; 1330 :     {
; 1331 :         // Round transfer size up to multiple of EP size
; 1332 :         UINT32 rndisSize = ((channel->transferSize + channel->pktSize - 1) / channel->pktSize) * channel->pktSize;

  023f0	e59d3024	 ldr         r3, [sp, #0x24]
  023f4	e2832024	 add         r2, r3, #0x24
  023f8	e59d3024	 ldr         r3, [sp, #0x24]
  023fc	e2833028	 add         r3, r3, #0x28
  02400	e5922000	 ldr         r2, [r2]
  02404	e5933000	 ldr         r3, [r3]
  02408	e0823003	 add         r3, r2, r3
  0240c	e2431001	 sub         r1, r3, #1
  02410	e59d3024	 ldr         r3, [sp, #0x24]
  02414	e2833028	 add         r3, r3, #0x28
  02418	e5930000	 ldr         r0, [r3]
  0241c	eb000000	 bl          __rt_udiv
  02420	e59d3024	 ldr         r3, [sp, #0x24]
  02424	e2833028	 add         r3, r3, #0x28
  02428	e5933000	 ldr         r3, [r3]
  0242c	e0030390	 mul         r3, r0, r3
  02430	e58d300c	 str         r3, [sp, #0xC]

; 1333 :         if (rndisSize == 0)

  02434	e59d300c	 ldr         r3, [sp, #0xC]
  02438	e3530000	 cmp         r3, #0
  0243c	1a000003	 bne         |$LN19@cppiRndisU|

; 1334 : 		{
; 1335 :             rndisSize = channel->pktSize;

  02440	e59d3024	 ldr         r3, [sp, #0x24]
  02444	e2833028	 add         r3, r3, #0x28
  02448	e5933000	 ldr         r3, [r3]
  0244c	e58d300c	 str         r3, [sp, #0xC]
  02450		 |$LN19@cppiRndisU|

; 1336 : 		}
; 1337 : 
; 1338 :         /* Set the Generic RNDIS EP reg */
; 1339 :         switch (channel->channelNo)

  02450	e59d3024	 ldr         r3, [sp, #0x24]
  02454	e2833018	 add         r3, r3, #0x18
  02458	e5d33000	 ldrb        r3, [r3]
  0245c	e58d3018	 str         r3, [sp, #0x18]
  02460	e59d3018	 ldr         r3, [sp, #0x18]
  02464	e353000e	 cmp         r3, #0xE
  02468	8a00005e	 bhi         |$LN1@cppiRndisU|
  0246c	e59d2018	 ldr         r2, [sp, #0x18]
  02470	e1a03102	 mov         r3, r2, lsl #2
  02474	e083300f	 add         r3, r3, pc
  02478	e5933004	 ldr         r3, [r3, #4]
  0247c	e08ff003	 add         pc, pc, r3
  02480		 |$LN34@cppiRndisU|
  02480		 |$LN33@cppiRndisU|
  02480		 |$LN35@cppiRndisU|
  02480	00000038	 DCD         0x38
  02484		 |$LN36@cppiRndisU|
  02484	0000004c	 DCD         0x4c
  02488		 |$LN37@cppiRndisU|
  02488	00000060	 DCD         0x60
  0248c		 |$LN38@cppiRndisU|
  0248c	00000074	 DCD         0x74
  02490		 |$LN39@cppiRndisU|
  02490	00000088	 DCD         0x88
  02494		 |$LN40@cppiRndisU|
  02494	0000009c	 DCD         0x9c
  02498		 |$LN41@cppiRndisU|
  02498	000000b0	 DCD         0xb0
  0249c		 |$LN42@cppiRndisU|
  0249c	000000c4	 DCD         0xc4
  024a0		 |$LN43@cppiRndisU|
  024a0	000000d8	 DCD         0xd8
  024a4		 |$LN44@cppiRndisU|
  024a4	000000ec	 DCD         0xec
  024a8		 |$LN45@cppiRndisU|
  024a8	00000100	 DCD         0x100
  024ac		 |$LN46@cppiRndisU|
  024ac	00000114	 DCD         0x114
  024b0		 |$LN47@cppiRndisU|
  024b0	00000128	 DCD         0x128
  024b4		 |$LN48@cppiRndisU|
  024b4	0000013c	 DCD         0x13c
  024b8		 |$LN49@cppiRndisU|
  024b8	00000150	 DCD         0x150
  024bc		 |$LN16@cppiRndisU|

; 1340 :         {
; 1341 :         case 0  : pRegBase->GENRNDISSZ1  = rndisSize; break;

  024bc	e59d3028	 ldr         r3, [sp, #0x28]
  024c0	e2832080	 add         r2, r3, #0x80
  024c4	e59d300c	 ldr         r3, [sp, #0xC]
  024c8	e5823000	 str         r3, [r2]
  024cc	ea00004f	 b           |$LN17@cppiRndisU|
  024d0		 |$LN15@cppiRndisU|

; 1342 :         case 1  : pRegBase->GENRNDISSZ2  = rndisSize; break;

  024d0	e59d3028	 ldr         r3, [sp, #0x28]
  024d4	e2832084	 add         r2, r3, #0x84
  024d8	e59d300c	 ldr         r3, [sp, #0xC]
  024dc	e5823000	 str         r3, [r2]
  024e0	ea00004a	 b           |$LN17@cppiRndisU|
  024e4		 |$LN14@cppiRndisU|

; 1343 :         case 2  : pRegBase->GENRNDISSZ3  = rndisSize; break;

  024e4	e59d3028	 ldr         r3, [sp, #0x28]
  024e8	e2832088	 add         r2, r3, #0x88
  024ec	e59d300c	 ldr         r3, [sp, #0xC]
  024f0	e5823000	 str         r3, [r2]
  024f4	ea000045	 b           |$LN17@cppiRndisU|
  024f8		 |$LN13@cppiRndisU|

; 1344 :         case 3  : pRegBase->GENRNDISSZ4  = rndisSize; break;

  024f8	e59d3028	 ldr         r3, [sp, #0x28]
  024fc	e283208c	 add         r2, r3, #0x8C
  02500	e59d300c	 ldr         r3, [sp, #0xC]
  02504	e5823000	 str         r3, [r2]
  02508	ea000040	 b           |$LN17@cppiRndisU|
  0250c		 |$LN12@cppiRndisU|

; 1345 :         case 4  : pRegBase->GENRNDISSZ5  = rndisSize; break;

  0250c	e59d3028	 ldr         r3, [sp, #0x28]
  02510	e2832090	 add         r2, r3, #0x90
  02514	e59d300c	 ldr         r3, [sp, #0xC]
  02518	e5823000	 str         r3, [r2]
  0251c	ea00003b	 b           |$LN17@cppiRndisU|
  02520		 |$LN11@cppiRndisU|

; 1346 :         case 5  : pRegBase->GENRNDISSZ6  = rndisSize; break;

  02520	e59d3028	 ldr         r3, [sp, #0x28]
  02524	e2832094	 add         r2, r3, #0x94
  02528	e59d300c	 ldr         r3, [sp, #0xC]
  0252c	e5823000	 str         r3, [r2]
  02530	ea000036	 b           |$LN17@cppiRndisU|
  02534		 |$LN10@cppiRndisU|

; 1347 :         case 6  : pRegBase->GENRNDISSZ7  = rndisSize; break;

  02534	e59d3028	 ldr         r3, [sp, #0x28]
  02538	e2832098	 add         r2, r3, #0x98
  0253c	e59d300c	 ldr         r3, [sp, #0xC]
  02540	e5823000	 str         r3, [r2]
  02544	ea000031	 b           |$LN17@cppiRndisU|
  02548		 |$LN9@cppiRndisU|

; 1348 :         case 7  : pRegBase->GENRNDISSZ8  = rndisSize; break;

  02548	e59d3028	 ldr         r3, [sp, #0x28]
  0254c	e283209c	 add         r2, r3, #0x9C
  02550	e59d300c	 ldr         r3, [sp, #0xC]
  02554	e5823000	 str         r3, [r2]
  02558	ea00002c	 b           |$LN17@cppiRndisU|
  0255c		 |$LN8@cppiRndisU|

; 1349 :         case 8  : pRegBase->GENRNDISSZ9  = rndisSize; break;

  0255c	e59d3028	 ldr         r3, [sp, #0x28]
  02560	e28320a0	 add         r2, r3, #0xA0
  02564	e59d300c	 ldr         r3, [sp, #0xC]
  02568	e5823000	 str         r3, [r2]
  0256c	ea000027	 b           |$LN17@cppiRndisU|
  02570		 |$LN7@cppiRndisU|

; 1350 :         case 9  : pRegBase->GENRNDISSZ10 = rndisSize; break;

  02570	e59d3028	 ldr         r3, [sp, #0x28]
  02574	e28320a4	 add         r2, r3, #0xA4
  02578	e59d300c	 ldr         r3, [sp, #0xC]
  0257c	e5823000	 str         r3, [r2]
  02580	ea000022	 b           |$LN17@cppiRndisU|
  02584		 |$LN6@cppiRndisU|

; 1351 :         case 10 : pRegBase->GENRNDISSZ11 = rndisSize; break;

  02584	e59d3028	 ldr         r3, [sp, #0x28]
  02588	e28320a8	 add         r2, r3, #0xA8
  0258c	e59d300c	 ldr         r3, [sp, #0xC]
  02590	e5823000	 str         r3, [r2]
  02594	ea00001d	 b           |$LN17@cppiRndisU|
  02598		 |$LN5@cppiRndisU|

; 1352 :         case 11 : pRegBase->GENRNDISSZ12 = rndisSize; break;

  02598	e59d3028	 ldr         r3, [sp, #0x28]
  0259c	e28320ac	 add         r2, r3, #0xAC
  025a0	e59d300c	 ldr         r3, [sp, #0xC]
  025a4	e5823000	 str         r3, [r2]
  025a8	ea000018	 b           |$LN17@cppiRndisU|
  025ac		 |$LN4@cppiRndisU|

; 1353 :         case 12 : pRegBase->GENRNDISSZ13 = rndisSize; break;

  025ac	e59d3028	 ldr         r3, [sp, #0x28]
  025b0	e28320b0	 add         r2, r3, #0xB0
  025b4	e59d300c	 ldr         r3, [sp, #0xC]
  025b8	e5823000	 str         r3, [r2]
  025bc	ea000013	 b           |$LN17@cppiRndisU|
  025c0		 |$LN3@cppiRndisU|

; 1354 :         case 13 : pRegBase->GENRNDISSZ14 = rndisSize; break;

  025c0	e59d3028	 ldr         r3, [sp, #0x28]
  025c4	e28320b4	 add         r2, r3, #0xB4
  025c8	e59d300c	 ldr         r3, [sp, #0xC]
  025cc	e5823000	 str         r3, [r2]
  025d0	ea00000e	 b           |$LN17@cppiRndisU|
  025d4		 |$LN2@cppiRndisU|

; 1355 :         case 14 : pRegBase->GENRNDISSZ15 = rndisSize; break;

  025d4	e59d3028	 ldr         r3, [sp, #0x28]
  025d8	e28320b8	 add         r2, r3, #0xB8
  025dc	e59d300c	 ldr         r3, [sp, #0xC]
  025e0	e5823000	 str         r3, [r2]
  025e4	ea000009	 b           |$LN17@cppiRndisU|
  025e8		 |$LN1@cppiRndisU|

; 1356 :         default:
; 1357 :             ERRORMSG(TRUE,
; 1358 :                      (L"cppiRndisUpdate: Unexpected channel number %d!\r\n", channel->channelNo));

  025e8	e3a02c05	 mov         r2, #5, 24
  025ec	e382204e	 orr         r2, r2, #0x4E
  025f0	e59f102c	 ldr         r1, [pc, #0x2C]
  025f4	e59f0024	 ldr         r0, [pc, #0x24]
  025f8	eb000000	 bl          NKDbgPrintfW
  025fc	e59d3024	 ldr         r3, [sp, #0x24]
  02600	e2833018	 add         r3, r3, #0x18
  02604	e5d31000	 ldrb        r1, [r3]
  02608	e59f000c	 ldr         r0, [pc, #0xC]
  0260c	eb000000	 bl          NKDbgPrintfW
  02610		 |$LN17@cppiRndisU|
  02610		 |$LN20@cppiRndisU|

; 1359 :             break;
; 1360 :         }
; 1361 :     }
; 1362 : 
; 1363 :     PRINTMSG (FALSE,
; 1364 :               (L"cppiRndisUpdate: Ch %u MODE RegVal 0x%08x\n",
; 1365 :                channel->channelNo, *pRndisReg));
; 1366 :     return;
; 1367 : }

  02610	e28dd01c	 add         sp, sp, #0x1C
  02614	e89d6000	 ldmia       sp, {sp, lr}
  02618	e12fff1e	 bx          lr
  0261c		 |$LN53@cppiRndisU|
  0261c		 |$LN54@cppiRndisU|
  0261c	00000000	 DCD         |??_C@_1GC@IDPIMKKM@?$AAc?$AAp?$AAp?$AAi?$AAR?$AAn?$AAd?$AAi?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAU?$AAn?$AAe?$AAx?$AAp?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?5?$AAc?$AAh?$AAa?$AAn@|
  02620		 |$LN55@cppiRndisU|
  02620	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  02624		 |$LN56@cppiRndisU|
  02624	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02628		 |$LN57@cppiRndisU|
  02628	00000000	 DCD         |??_C@_1FI@MOHHNHNM@?$AAc?$AAp?$AAp?$AAi?$AAR?$AAn?$AAd?$AAi?$AAs?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?5?$AAr?$AAe@|
  0262c		 |$LN58@cppiRndisU|
  0262c	00000000	 DCD         |dpCurSettings|
  02630		 |$M48275|

			 ENDP  ; |cppiRndisUpdate|

	EXPORT	|??_C@_1FG@INIICNMB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAC?$AAP?$AAP?$AAI?$AA?5?$AAD?$AAM?$AAA?$AA?5@| [ DATA ] ; `string'
	EXPORT	|cppiControllerInit|
	IMPORT	|LocalAlloc|

  00070			 AREA	 |.pdata|, PDATA
|$T48289| DCD	|$LN7@cppiContro|
	DCD	0x40007904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@INIICNMB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAC?$AAP?$AAP?$AAI?$AA?5?$AAD?$AAM?$AAA?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "A", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, " ", 0x0, "C", 0x0, "P"
	DCB	0x0, "P", 0x0, "I", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "O", 0x0, "b", 0x0, "j", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  02630			 AREA	 |.text|, CODE, ARM

  02630		 |cppiControllerInit| PROC

; 1815 : {

  02630		 |$LN7@cppiContro|
  02630	e1a0c00d	 mov         r12, sp
  02634	e92d0001	 stmdb       sp!, {r0}
  02638	e92d5000	 stmdb       sp!, {r12, lr}
  0263c	e24dd00c	 sub         sp, sp, #0xC
  02640		 |$M48286|

; 1816 :     struct cppi *cppi;
; 1817 : 
; 1818 :     if (f_CppiObj != NULL)

  02640	e59f31bc	 ldr         r3, [pc, #0x1BC]
  02644	e5933000	 ldr         r3, [r3]
  02648	e3530000	 cmp         r3, #0
  0264c	0a000003	 beq         |$LN2@cppiContro|

; 1819 :     {
; 1820 :         return (&f_CppiObj->controller);

  02650	e59f31ac	 ldr         r3, [pc, #0x1AC]
  02654	e5933000	 ldr         r3, [r3]
  02658	e58d3004	 str         r3, [sp, #4]
  0265c	ea00005e	 b           |$LN3@cppiContro|
  02660		 |$LN2@cppiContro|

; 1821 :     }
; 1822 : 
; 1823 :     if (NULL == (f_CppiObj = (struct cppi *)
; 1824 :                  LocalAlloc(LPTR, sizeof(struct cppi))))

  02660	e3a01e8d	 mov         r1, #0x8D, 28
  02664	e3a00040	 mov         r0, #0x40
  02668	eb000000	 bl          LocalAlloc
  0266c	e58d0008	 str         r0, [sp, #8]
  02670	e59d2008	 ldr         r2, [sp, #8]
  02674	e59f3188	 ldr         r3, [pc, #0x188]
  02678	e5832000	 str         r2, [r3]
  0267c	e59f3180	 ldr         r3, [pc, #0x180]
  02680	e5933000	 ldr         r3, [r3]
  02684	e3530000	 cmp         r3, #0
  02688	1a000009	 bne         |$LN1@cppiContro|

; 1825 :     {
; 1826 :         ERRORMSG(TRUE, (TEXT("ERROR: Unable to Alloc CPPI DMA Object!!\r\n")));

  0268c	e3a02c07	 mov         r2, #7, 24
  02690	e3822022	 orr         r2, r2, #0x22
  02694	e59f1174	 ldr         r1, [pc, #0x174]
  02698	e59f016c	 ldr         r0, [pc, #0x16C]
  0269c	eb000000	 bl          NKDbgPrintfW
  026a0	e59f0160	 ldr         r0, [pc, #0x160]
  026a4	eb000000	 bl          NKDbgPrintfW

; 1827 :         return NULL;

  026a8	e3a03000	 mov         r3, #0
  026ac	e58d3004	 str         r3, [sp, #4]
  026b0	ea000049	 b           |$LN3@cppiContro|
  026b4		 |$LN1@cppiContro|

; 1828 :     }
; 1829 : 
; 1830 :     cppi = f_CppiObj;

  026b4	e59f3148	 ldr         r3, [pc, #0x148]
  026b8	e5933000	 ldr         r3, [r3]
  026bc	e58d3000	 str         r3, [sp]

; 1831 : 
; 1832 :     // Initialize the Cppi DmaController structure
; 1833 :     cppi->pPdd = pPdd;

  026c0	e59d3000	 ldr         r3, [sp]
  026c4	e2832018	 add         r2, r3, #0x18
  026c8	e59d3014	 ldr         r3, [sp, #0x14]
  026cc	e5823000	 str         r3, [r2]

; 1834 :     cppi->pRegs = pPdd->pCppiRegs;

  026d0	e59d3014	 ldr         r3, [sp, #0x14]
  026d4	e2831020	 add         r1, r3, #0x20
  026d8	e59d3000	 ldr         r3, [sp]
  026dc	e283201c	 add         r2, r3, #0x1C
  026e0	e5913000	 ldr         r3, [r1]
  026e4	e5823000	 str         r3, [r2]

; 1835 :     cppi->hUsbCdma = NULL;

  026e8	e59d3000	 ldr         r3, [sp]
  026ec	e2832020	 add         r2, r3, #0x20
  026f0	e3a03000	 mov         r3, #0
  026f4	e5823000	 str         r3, [r2]

; 1836 : 
; 1837 :     cppi->chanOffset = 0;

  026f8	e59d3000	 ldr         r3, [sp]
  026fc	e2832024	 add         r2, r3, #0x24
  02700	e3a03000	 mov         r3, #0
  02704	e5c23000	 strb        r3, [r2]

; 1838 :     cppi->rxqOffset = USB_CPPI_RX_QNUM;

  02708	e59d3000	 ldr         r3, [sp]
  0270c	e2832025	 add         r2, r3, #0x25
  02710	e3a03000	 mov         r3, #0
  02714	e5c23000	 strb        r3, [r2]

; 1839 :     cppi->txqOffset = USB_CPPI_TX_QNUM;

  02718	e59d3000	 ldr         r3, [sp]
  0271c	e2832026	 add         r2, r3, #0x26
  02720	e3a03020	 mov         r3, #0x20
  02724	e5c23000	 strb        r3, [r2]

; 1840 : 
; 1841 :     cppi->controller.pfnStart = cppiControllerStart;

  02728	e59f20d0	 ldr         r2, [pc, #0xD0]
  0272c	e59d3000	 ldr         r3, [sp]
  02730	e5832000	 str         r2, [r3]

; 1842 :     cppi->controller.pfnStop  = cppiControllerStop;

  02734	e59d3000	 ldr         r3, [sp]
  02738	e2832004	 add         r2, r3, #4
  0273c	e59f30b8	 ldr         r3, [pc, #0xB8]
  02740	e5823000	 str         r3, [r2]

; 1843 :     cppi->controller.pfnChannelAlloc = cppiChannelAllocate;

  02744	e59d3000	 ldr         r3, [sp]
  02748	e2832008	 add         r2, r3, #8
  0274c	e59f30a4	 ldr         r3, [pc, #0xA4]
  02750	e5823000	 str         r3, [r2]

; 1844 :     cppi->controller.pfnChannelRelease = cppiChannelRelease;

  02754	e59d3000	 ldr         r3, [sp]
  02758	e283200c	 add         r2, r3, #0xC
  0275c	e59f3090	 ldr         r3, [pc, #0x90]
  02760	e5823000	 str         r3, [r2]

; 1845 :     cppi->controller.channelProgram = cppiChannelProgram;

  02764	e59d3000	 ldr         r3, [sp]
  02768	e2832010	 add         r2, r3, #0x10
  0276c	e59f307c	 ldr         r3, [pc, #0x7C]
  02770	e5823000	 str         r3, [r2]

; 1846 :     cppi->controller.pfnChannelAbort = cppiChannelAbort;

  02774	e59d3000	 ldr         r3, [sp]
  02778	e2832014	 add         r2, r3, #0x14
  0277c	e59f3068	 ldr         r3, [pc, #0x68]
  02780	e5823000	 str         r3, [r2]

; 1847 : 
; 1848 :     cppiPoolInit(cppi);

  02784	e59d0000	 ldr         r0, [sp]
  02788	eb000000	 bl          cppiPoolInit

; 1849 : 
; 1850 :     pPdd->pUsbdRegs->AUTOREQR = 0;

  0278c	e59d3014	 ldr         r3, [sp, #0x14]
  02790	e283301c	 add         r3, r3, #0x1C
  02794	e5933000	 ldr         r3, [r3]
  02798	e2832014	 add         r2, r3, #0x14
  0279c	e3a03000	 mov         r3, #0
  027a0	e5823000	 str         r3, [r2]

; 1851 : 	pPdd->pUsbdRegs->TXMODE  = 0;

  027a4	e59d3014	 ldr         r3, [sp, #0x14]
  027a8	e283301c	 add         r3, r3, #0x1C
  027ac	e5933000	 ldr         r3, [r3]
  027b0	e2832070	 add         r2, r3, #0x70
  027b4	e3a03000	 mov         r3, #0
  027b8	e5823000	 str         r3, [r2]

; 1852 : 	pPdd->pUsbdRegs->RXMODE  = 0;

  027bc	e59d3014	 ldr         r3, [sp, #0x14]
  027c0	e283301c	 add         r3, r3, #0x1C
  027c4	e5933000	 ldr         r3, [r3]
  027c8	e2832074	 add         r2, r3, #0x74
  027cc	e3a03000	 mov         r3, #0
  027d0	e5823000	 str         r3, [r2]

; 1853 : 
; 1854 :     return &cppi->controller;

  027d4	e59d3000	 ldr         r3, [sp]
  027d8	e58d3004	 str         r3, [sp, #4]
  027dc		 |$LN3@cppiContro|

; 1855 : }

  027dc	e59d0004	 ldr         r0, [sp, #4]
  027e0	e28dd00c	 add         sp, sp, #0xC
  027e4	e89d6000	 ldmia       sp, {sp, lr}
  027e8	e12fff1e	 bx          lr
  027ec		 |$LN8@cppiContro|
  027ec		 |$LN9@cppiContro|
  027ec	00000000	 DCD         |cppiChannelAbort|
  027f0		 |$LN10@cppiContro|
  027f0	00000000	 DCD         |cppiChannelProgram|
  027f4		 |$LN11@cppiContro|
  027f4	00000000	 DCD         |cppiChannelRelease|
  027f8		 |$LN12@cppiContro|
  027f8	00000000	 DCD         |cppiChannelAllocate|
  027fc		 |$LN13@cppiContro|
  027fc	00000000	 DCD         |cppiControllerStop|
  02800		 |$LN14@cppiContro|
  02800	00000000	 DCD         |cppiControllerStart|
  02804		 |$LN15@cppiContro|
  02804	00000000	 DCD         |f_CppiObj|
  02808		 |$LN16@cppiContro|
  02808	00000000	 DCD         |??_C@_1FG@INIICNMB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AA?5?$AAC?$AAP?$AAP?$AAI?$AA?5?$AAD?$AAM?$AAA?$AA?5@|
  0280c		 |$LN17@cppiContro|
  0280c	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  02810		 |$LN18@cppiContro|
  02810	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02814		 |$M48287|

			 ENDP  ; |cppiControllerInit|

	EXPORT	|??_C@_1GC@PNBFAINI@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@MFEOKLLN@?$AAF?$AAA?$AAL?$AAI?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@LBAFAOJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAu?$AA?5?$AAb?$AAy?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@FBEHIHFK@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH?$AAD?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|USBCDMA_RegisterUsbModule|
	IMPORT	|InitializeCriticalSection|

  00078			 AREA	 |.pdata|, PDATA
|$T48326| DCD	|$LN25@cppiPoolIn|
	DCD	0x4000da04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@PNBFAINI@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "-"
	DCB	0x0, " ", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "s"
	DCB	0x0, "p", 0x0, "a", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, "H", 0x0, "D", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@MFEOKLLN@?$AAF?$AAA?$AAL?$AAI?$AAE?$AAD?$AA?$AA@| DCB "F", 0x0, "A"
	DCB	0x0, "L", 0x0, "I", 0x0, "E", 0x0, "D", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@| DCB "S"
	DCB	0x0, "U", 0x0, "C", 0x0, "C", 0x0, "E", 0x0, "E", 0x0, "D"
	DCB	0x0, "E", 0x0, "D", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@LBAFAOJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAu?$AA?5?$AAb?$AAy?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@FBEHIHFK@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH?$AAD?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "H"
	DCB	0x0, "D", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02814			 AREA	 |.text|, CODE, ARM

  02814		 |cppiPoolInit| PROC

; 166  : {

  02814		 |$LN25@cppiPoolIn|
  02814	e1a0c00d	 mov         r12, sp
  02818	e92d0001	 stmdb       sp!, {r0}
  0281c	e92d5000	 stmdb       sp!, {r12, lr}
  02820	e24dd040	 sub         sp, sp, #0x40
  02824		 |$M48323|

; 167  :     unsigned descriptorCount;
; 168  : 
; 169  :     DEBUGCHK(cppi != NULL);

  02824	e59d3048	 ldr         r3, [sp, #0x48]
  02828	e3530000	 cmp         r3, #0
  0282c	0a000002	 beq         |$LN5@cppiPoolIn|
  02830	e3a03001	 mov         r3, #1
  02834	e58d3018	 str         r3, [sp, #0x18]
  02838	ea000007	 b           |$LN6@cppiPoolIn|
  0283c		 |$LN5@cppiPoolIn|
  0283c	e3a030a9	 mov         r3, #0xA9
  02840	e59f2324	 ldr         r2, [pc, #0x324]
  02844	e59f1314	 ldr         r1, [pc, #0x314]
  02848	e59f0328	 ldr         r0, [pc, #0x328]
  0284c	eb000000	 bl          NKDbgPrintfW
  02850	e6000010	 __debugbreak_ce
  02854	e3a03000	 mov         r3, #0
  02858	e58d3018	 str         r3, [sp, #0x18]
  0285c		 |$LN6@cppiPoolIn|

; 170  :     if (cppi == NULL)

  0285c	e59d3048	 ldr         r3, [sp, #0x48]
  02860	e3530000	 cmp         r3, #0
  02864	1a000002	 bne         |$LN2@cppiPoolIn|

; 171  : 	{
; 172  :         return FALSE;

  02868	e3a03000	 mov         r3, #0
  0286c	e58d300c	 str         r3, [sp, #0xC]
  02870	ea0000b3	 b           |$LN3@cppiPoolIn|
  02874		 |$LN2@cppiPoolIn|

; 173  : 	}
; 174  : 
; 175  :     /* Only initialise once */
; 176  :     if (cppi->pool != NULL)

  02874	e59d3048	 ldr         r3, [sp, #0x48]
  02878	e2833b02	 add         r3, r3, #2, 22
  0287c	e2833098	 add         r3, r3, #0x98
  02880	e5933000	 ldr         r3, [r3]
  02884	e3530000	 cmp         r3, #0
  02888	0a000002	 beq         |$LN1@cppiPoolIn|

; 177  : 	{
; 178  :         return TRUE;

  0288c	e3a03001	 mov         r3, #1
  02890	e58d300c	 str         r3, [sp, #0xC]
  02894	ea0000aa	 b           |$LN3@cppiPoolIn|
  02898		 |$LN1@cppiPoolIn|

; 179  : 	}
; 180  : 
; 181  :     descriptorCount = cppi->pPdd->descriptorCount;

  02898	e59d3048	 ldr         r3, [sp, #0x48]
  0289c	e2833018	 add         r3, r3, #0x18
  028a0	e5933000	 ldr         r3, [r3]
  028a4	e2833e66	 add         r3, r3, #0x66, 28
  028a8	e5933000	 ldr         r3, [r3]
  028ac	e58d3008	 str         r3, [sp, #8]

; 182  : 
; 183  :     DEBUGMSG(ZONE_INIT,
; 184  :         (L"+cppiPoolInit: %u HDs\r\n",
; 185  :         descriptorCount));

  028b0	e59f32a8	 ldr         r3, [pc, #0x2A8]
  028b4	e5933440	 ldr         r3, [r3, #0x440]
  028b8	e3130004	 tst         r3, #4
  028bc	0a000011	 beq         |$LN9@cppiPoolIn|
  028c0	e59f3298	 ldr         r3, [pc, #0x298]
  028c4	e5933440	 ldr         r3, [r3, #0x440]
  028c8	e3130801	 tst         r3, #1, 16
  028cc	0a000005	 beq         |$LN7@cppiPoolIn|
  028d0	e59d1008	 ldr         r1, [sp, #8]
  028d4	e59f0298	 ldr         r0, [pc, #0x298]
  028d8	eb000000	 bl          CeLogMsg
  028dc	e3a03001	 mov         r3, #1
  028e0	e58d301c	 str         r3, [sp, #0x1C]
  028e4	ea000004	 b           |$LN8@cppiPoolIn|
  028e8		 |$LN7@cppiPoolIn|
  028e8	e59d1008	 ldr         r1, [sp, #8]
  028ec	e59f0280	 ldr         r0, [pc, #0x280]
  028f0	eb000000	 bl          NKDbgPrintfW
  028f4	e3a03000	 mov         r3, #0
  028f8	e58d301c	 str         r3, [sp, #0x1C]
  028fc		 |$LN8@cppiPoolIn|
  028fc	e3a03001	 mov         r3, #1
  02900	e58d3020	 str         r3, [sp, #0x20]
  02904	ea000001	 b           |$LN10@cppiPoolIn|
  02908		 |$LN9@cppiPoolIn|
  02908	e3a03000	 mov         r3, #0
  0290c	e58d3020	 str         r3, [sp, #0x20]
  02910		 |$LN10@cppiPoolIn|

; 186  : 
; 187  :     InitializeCriticalSection(&cppi->poolLock);

  02910	e59d3048	 ldr         r3, [sp, #0x48]
  02914	e2833b02	 add         r3, r3, #2, 22
  02918	e28300b8	 add         r0, r3, #0xB8
  0291c	eb000000	 bl          InitializeCriticalSection

; 188  : 
; 189  :     LOCK_HD_POOL(cppi);

  02920	e59d3048	 ldr         r3, [sp, #0x48]
  02924	e2833b02	 add         r3, r3, #2, 22
  02928	e28300b8	 add         r0, r3, #0xB8
  0292c	eb000000	 bl          EnterCriticalSection

; 190  : 
; 191  :     cppi->hUsbCdma = USBCDMA_RegisterUsbModule(
; 192  :         (UINT16)descriptorCount,
; 193  :         CPPI_HD_SIZE,
; 194  :         &cppi->paPool,
; 195  :         &cppi->pool,
; 196  :         cppiCompletionCallback,
; 197  :         cppi->pPdd);

  02930	e59d3048	 ldr         r3, [sp, #0x48]
  02934	e2833018	 add         r3, r3, #0x18
  02938	e5933000	 ldr         r3, [r3]
  0293c	e58d3004	 str         r3, [sp, #4]
  02940	e59f3228	 ldr         r3, [pc, #0x228]
  02944	e58d3000	 str         r3, [sp]
  02948	e59d3048	 ldr         r3, [sp, #0x48]
  0294c	e2833b02	 add         r3, r3, #2, 22
  02950	e2833098	 add         r3, r3, #0x98
  02954	e59d2048	 ldr         r2, [sp, #0x48]
  02958	e2822e8a	 add         r2, r2, #0x8A, 28
  0295c	e3a01040	 mov         r1, #0x40
  02960	e59d0008	 ldr         r0, [sp, #8]
  02964	e1a00800	 mov         r0, r0, lsl #16
  02968	e1a00820	 mov         r0, r0, lsr #16
  0296c	eb000000	 bl          USBCDMA_RegisterUsbModule
  02970	e58d0024	 str         r0, [sp, #0x24]
  02974	e59d3048	 ldr         r3, [sp, #0x48]
  02978	e2832020	 add         r2, r3, #0x20
  0297c	e59d3024	 ldr         r3, [sp, #0x24]
  02980	e5823000	 str         r3, [r2]

; 198  : 
; 199  :     cppi->poolMaxSize = descriptorCount * CPPI_HD_SIZE;

  02984	e59d1008	 ldr         r1, [sp, #8]
  02988	e3a03040	 mov         r3, #0x40
  0298c	e0020391	 mul         r2, r1, r3
  02990	e59d3048	 ldr         r3, [sp, #0x48]
  02994	e2833b02	 add         r3, r3, #2, 22
  02998	e28330a8	 add         r3, r3, #0xA8
  0299c	e5832000	 str         r2, [r3]

; 200  :     cppi->poolUsed = 0;

  029a0	e59d3048	 ldr         r3, [sp, #0x48]
  029a4	e2833b02	 add         r3, r3, #2, 22
  029a8	e28320ac	 add         r2, r3, #0xAC
  029ac	e3a03000	 mov         r3, #0
  029b0	e5823000	 str         r3, [r2]

; 201  :     cppi->poolFree = cppi->poolMaxSize;

  029b4	e59d3048	 ldr         r3, [sp, #0x48]
  029b8	e2833b02	 add         r3, r3, #2, 22
  029bc	e28310a8	 add         r1, r3, #0xA8
  029c0	e59d3048	 ldr         r3, [sp, #0x48]
  029c4	e2832e8b	 add         r2, r3, #0x8B, 28
  029c8	e5913000	 ldr         r3, [r1]
  029cc	e5823000	 str         r3, [r2]

; 202  :     cppi->poolHead = NULL;

  029d0	e59d3048	 ldr         r3, [sp, #0x48]
  029d4	e2833b02	 add         r3, r3, #2, 22
  029d8	e28320b4	 add         r2, r3, #0xB4
  029dc	e3a03000	 mov         r3, #0
  029e0	e5823000	 str         r3, [r2]

; 203  : 
; 204  :     UNLOCK_HD_POOL(cppi);

  029e4	e59d3048	 ldr         r3, [sp, #0x48]
  029e8	e2833b02	 add         r3, r3, #2, 22
  029ec	e28300b8	 add         r0, r3, #0xB8
  029f0	eb000000	 bl          LeaveCriticalSection

; 205  : 
; 206  :     ERRORMSG(cppi->pool == NULL,
; 207  :         (L"ERROR: Failed to allocate %u bytes\r\n",
; 208  :         cppi->poolMaxSize));

  029f4	e59d3048	 ldr         r3, [sp, #0x48]
  029f8	e2833b02	 add         r3, r3, #2, 22
  029fc	e2833098	 add         r3, r3, #0x98
  02a00	e5933000	 ldr         r3, [r3]
  02a04	e3530000	 cmp         r3, #0
  02a08	1a00000c	 bne         |$LN11@cppiPoolIn|
  02a0c	e3a020d0	 mov         r2, #0xD0
  02a10	e59f1154	 ldr         r1, [pc, #0x154]
  02a14	e59f014c	 ldr         r0, [pc, #0x14C]
  02a18	eb000000	 bl          NKDbgPrintfW
  02a1c	e59d3048	 ldr         r3, [sp, #0x48]
  02a20	e2833b02	 add         r3, r3, #2, 22
  02a24	e28330a8	 add         r3, r3, #0xA8
  02a28	e5931000	 ldr         r1, [r3]
  02a2c	e59f0130	 ldr         r0, [pc, #0x130]
  02a30	eb000000	 bl          NKDbgPrintfW
  02a34	e3a03001	 mov         r3, #1
  02a38	e58d3028	 str         r3, [sp, #0x28]
  02a3c	ea000001	 b           |$LN12@cppiPoolIn|
  02a40		 |$LN11@cppiPoolIn|
  02a40	e3a03000	 mov         r3, #0
  02a44	e58d3028	 str         r3, [sp, #0x28]
  02a48		 |$LN12@cppiPoolIn|

; 209  : 
; 210  :     DEBUGMSG(ZONE_INIT,
; 211  :         (L"-cppiPoolInit: %s - Allocated space for %u HDs\r\n",
; 212  :         (cppi->pool != NULL) ?
; 213  :             L"SUCCEEDED" :
; 214  :             L"FALIED",
; 215  :         descriptorCount));

  02a48	e59f3110	 ldr         r3, [pc, #0x110]
  02a4c	e5933440	 ldr         r3, [r3, #0x440]
  02a50	e3130004	 tst         r3, #4
  02a54	0a000029	 beq         |$LN19@cppiPoolIn|
  02a58	e59f3100	 ldr         r3, [pc, #0x100]
  02a5c	e5933440	 ldr         r3, [r3, #0x440]
  02a60	e3130801	 tst         r3, #1, 16
  02a64	0a000011	 beq         |$LN17@cppiPoolIn|
  02a68	e59d3048	 ldr         r3, [sp, #0x48]
  02a6c	e2833b02	 add         r3, r3, #2, 22
  02a70	e2833098	 add         r3, r3, #0x98
  02a74	e5933000	 ldr         r3, [r3]
  02a78	e3530000	 cmp         r3, #0
  02a7c	0a000002	 beq         |$LN13@cppiPoolIn|
  02a80	e59f30d4	 ldr         r3, [pc, #0xD4]
  02a84	e58d302c	 str         r3, [sp, #0x2C]
  02a88	ea000001	 b           |$LN14@cppiPoolIn|
  02a8c		 |$LN13@cppiPoolIn|
  02a8c	e59f30c4	 ldr         r3, [pc, #0xC4]
  02a90	e58d302c	 str         r3, [sp, #0x2C]
  02a94		 |$LN14@cppiPoolIn|
  02a94	e59d2008	 ldr         r2, [sp, #8]
  02a98	e59d102c	 ldr         r1, [sp, #0x2C]
  02a9c	e59f00b0	 ldr         r0, [pc, #0xB0]
  02aa0	eb000000	 bl          CeLogMsg
  02aa4	e3a03001	 mov         r3, #1
  02aa8	e58d3030	 str         r3, [sp, #0x30]
  02aac	ea000010	 b           |$LN18@cppiPoolIn|
  02ab0		 |$LN17@cppiPoolIn|
  02ab0	e59d3048	 ldr         r3, [sp, #0x48]
  02ab4	e2833b02	 add         r3, r3, #2, 22
  02ab8	e2833098	 add         r3, r3, #0x98
  02abc	e5933000	 ldr         r3, [r3]
  02ac0	e3530000	 cmp         r3, #0
  02ac4	0a000002	 beq         |$LN15@cppiPoolIn|
  02ac8	e59f308c	 ldr         r3, [pc, #0x8C]
  02acc	e58d3034	 str         r3, [sp, #0x34]
  02ad0	ea000001	 b           |$LN16@cppiPoolIn|
  02ad4		 |$LN15@cppiPoolIn|
  02ad4	e59f307c	 ldr         r3, [pc, #0x7C]
  02ad8	e58d3034	 str         r3, [sp, #0x34]
  02adc		 |$LN16@cppiPoolIn|
  02adc	e59d2008	 ldr         r2, [sp, #8]
  02ae0	e59d1034	 ldr         r1, [sp, #0x34]
  02ae4	e59f0068	 ldr         r0, [pc, #0x68]
  02ae8	eb000000	 bl          NKDbgPrintfW
  02aec	e3a03000	 mov         r3, #0
  02af0	e58d3030	 str         r3, [sp, #0x30]
  02af4		 |$LN18@cppiPoolIn|
  02af4	e3a03001	 mov         r3, #1
  02af8	e58d3038	 str         r3, [sp, #0x38]
  02afc	ea000001	 b           |$LN20@cppiPoolIn|
  02b00		 |$LN19@cppiPoolIn|
  02b00	e3a03000	 mov         r3, #0
  02b04	e58d3038	 str         r3, [sp, #0x38]
  02b08		 |$LN20@cppiPoolIn|

; 216  : 
; 217  :     cppiHdPoolInit(cppi);

  02b08	e59d0048	 ldr         r0, [sp, #0x48]
  02b0c	eb000000	 bl          cppiHdPoolInit

; 218  : 
; 219  :     return (cppi->pool != NULL);

  02b10	e59d3048	 ldr         r3, [sp, #0x48]
  02b14	e2833b02	 add         r3, r3, #2, 22
  02b18	e2833098	 add         r3, r3, #0x98
  02b1c	e5933000	 ldr         r3, [r3]
  02b20	e3530000	 cmp         r3, #0
  02b24	0a000002	 beq         |$LN21@cppiPoolIn|
  02b28	e3a03001	 mov         r3, #1
  02b2c	e58d303c	 str         r3, [sp, #0x3C]
  02b30	ea000001	 b           |$LN22@cppiPoolIn|
  02b34		 |$LN21@cppiPoolIn|
  02b34	e3a03000	 mov         r3, #0
  02b38	e58d303c	 str         r3, [sp, #0x3C]
  02b3c		 |$LN22@cppiPoolIn|
  02b3c	e59d303c	 ldr         r3, [sp, #0x3C]
  02b40	e58d300c	 str         r3, [sp, #0xC]
  02b44		 |$LN3@cppiPoolIn|

; 220  : }

  02b44	e59d000c	 ldr         r0, [sp, #0xC]
  02b48	e28dd040	 add         sp, sp, #0x40
  02b4c	e89d6000	 ldmia       sp, {sp, lr}
  02b50	e12fff1e	 bx          lr
  02b54		 |$LN26@cppiPoolIn|
  02b54		 |$LN27@cppiPoolIn|
  02b54	00000000	 DCD         |??_C@_1GC@PNBFAINI@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?9?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAs?$AAp@|
  02b58		 |$LN28@cppiPoolIn|
  02b58	00000000	 DCD         |??_C@_1O@MFEOKLLN@?$AAF?$AAA?$AAL?$AAI?$AAE?$AAD?$AA?$AA@|
  02b5c		 |$LN29@cppiPoolIn|
  02b5c	00000000	 DCD         |??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@|
  02b60		 |$LN30@cppiPoolIn|
  02b60	00000000	 DCD         |dpCurSettings|
  02b64		 |$LN31@cppiPoolIn|
  02b64	00000000	 DCD         |??_C@_1EK@LBAFAOJL@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AA?$CF?$AAu?$AA?5?$AAb?$AAy?$AAt@|
  02b68		 |$LN32@cppiPoolIn|
  02b68	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  02b6c		 |$LN33@cppiPoolIn|
  02b6c	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02b70		 |$LN34@cppiPoolIn|
  02b70	00000000	 DCD         |cppiCompletionCallback|
  02b74		 |$LN35@cppiPoolIn|
  02b74	00000000	 DCD         |??_C@_1DA@FBEHIHFK@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH?$AAD?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  02b78		 |$LN36@cppiPoolIn|
  02b78	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02b7c		 |$M48324|

			 ENDP  ; |cppiPoolInit|

	EXPORT	|??_C@_1HG@NOAAGAAA@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH?$AAD?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@CJBFNHMB@?$AAH?$AAD?$AA?5?$AA?$CF?$AA0?$AA4?$AAu?$AA?3?$AA?5?$AAP?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAV?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@PAECHJLN@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@MJCBCGCD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe?$AA?5?$AAc?$AAp?$AAp@| [ DATA ] ; `string'

  00080			 AREA	 |.pdata|, PDATA
|$T48356| DCD	|$LN27@cppiHdPool|
	DCD	0x4000e604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@NOAAGAAA@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH?$AAD?$AAs?$AA?5@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "A", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "H", 0x0, "D", 0x0, "s"
	DCB	0x0, " ", 0x0, "G", 0x0, "l", 0x0, "o", 0x0, "b", 0x0, "a"
	DCB	0x0, "l", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, " "
	DCB	0x0, "F", 0x0, "r", 0x0, "e", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@CJBFNHMB@?$AAH?$AAD?$AA?5?$AA?$CF?$AA0?$AA4?$AAu?$AA?3?$AA?5?$AAP?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAV?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "H"
	DCB	0x0, "D", 0x0, " ", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "u"
	DCB	0x0, ":", 0x0, " ", 0x0, "P", 0x0, "A", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, " ", 0x0, "V", 0x0, "A", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@PAECHJLN@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "+"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "U", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "A"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "s", 0x0, "c"
	DCB	0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "s", 0x0, " ", 0x0, "!", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@MJCBCGCD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe?$AA?5?$AAc?$AAp?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "H", 0x0, "d"
	DCB	0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "c", 0x0, "p"
	DCB	0x0, "p", 0x0, "i", 0x0, "P", 0x0, "o", 0x0, "o", 0x0, "l"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02b7c			 AREA	 |.text|, CODE, ARM

  02b7c		 |cppiHdPoolInit| PROC

; 271  : {

  02b7c		 |$LN27@cppiHdPool|
  02b7c	e1a0c00d	 mov         r12, sp
  02b80	e92d0001	 stmdb       sp!, {r0}
  02b84	e92d5000	 stmdb       sp!, {r12, lr}
  02b88	e24dd028	 sub         sp, sp, #0x28
  02b8c		 |$M48353|

; 272  :     unsigned descriptorCount = 0;

  02b8c	e3a03000	 mov         r3, #0
  02b90	e58d3004	 str         r3, [sp, #4]

; 273  :     unsigned n				 = 0;

  02b94	e3a03000	 mov         r3, #0
  02b98	e58d3000	 str         r3, [sp]

; 274  : 
; 275  :     DEBUGCHK(cppi != NULL);

  02b9c	e59d3030	 ldr         r3, [sp, #0x30]
  02ba0	e3530000	 cmp         r3, #0
  02ba4	0a000002	 beq         |$LN11@cppiHdPool|
  02ba8	e3a03001	 mov         r3, #1
  02bac	e58d300c	 str         r3, [sp, #0xC]
  02bb0	ea000008	 b           |$LN12@cppiHdPool|
  02bb4		 |$LN11@cppiHdPool|
  02bb4	e3a03c01	 mov         r3, #1, 24
  02bb8	e3833013	 orr         r3, r3, #0x13
  02bbc	e59f2340	 ldr         r2, [pc, #0x340]
  02bc0	e59f132c	 ldr         r1, [pc, #0x32C]
  02bc4	e59f0344	 ldr         r0, [pc, #0x344]
  02bc8	eb000000	 bl          NKDbgPrintfW
  02bcc	e6000010	 __debugbreak_ce
  02bd0	e3a03000	 mov         r3, #0
  02bd4	e58d300c	 str         r3, [sp, #0xC]
  02bd8		 |$LN12@cppiHdPool|

; 276  :     if (cppi == NULL)

  02bd8	e59d3030	 ldr         r3, [sp, #0x30]
  02bdc	e3530000	 cmp         r3, #0
  02be0	1a000000	 bne         |$LN8@cppiHdPool|

; 277  : 	{
; 278  :         return;

  02be4	ea0000be	 b           |$LN9@cppiHdPool|
  02be8		 |$LN8@cppiHdPool|

; 279  : 	}
; 280  : 
; 281  :     // Only initialise once
; 282  :     if (cppi->poolUsed)

  02be8	e59d3030	 ldr         r3, [sp, #0x30]
  02bec	e2833b02	 add         r3, r3, #2, 22
  02bf0	e28330ac	 add         r3, r3, #0xAC
  02bf4	e5933000	 ldr         r3, [r3]
  02bf8	e3530000	 cmp         r3, #0
  02bfc	0a000000	 beq         |$LN7@cppiHdPool|

; 283  : 	{
; 284  :         goto done;

  02c00	ea000099	 b           |$done$47333|
  02c04		 |$LN7@cppiHdPool|

; 285  : 	}
; 286  : 
; 287  :     descriptorCount = cppi->pPdd->descriptorCount;

  02c04	e59d3030	 ldr         r3, [sp, #0x30]
  02c08	e2833018	 add         r3, r3, #0x18
  02c0c	e5933000	 ldr         r3, [r3]
  02c10	e2833e66	 add         r3, r3, #0x66, 28
  02c14	e5933000	 ldr         r3, [r3]
  02c18	e58d3004	 str         r3, [sp, #4]

; 288  : 
; 289  :     DEBUGMSG(ZONE_INIT,
; 290  :         (L"+cppiPoolInit: %u HDs\r\n", descriptorCount));

  02c1c	e59f32d0	 ldr         r3, [pc, #0x2D0]
  02c20	e5933440	 ldr         r3, [r3, #0x440]
  02c24	e3130004	 tst         r3, #4
  02c28	0a000011	 beq         |$LN15@cppiHdPool|
  02c2c	e59f32c0	 ldr         r3, [pc, #0x2C0]
  02c30	e5933440	 ldr         r3, [r3, #0x440]
  02c34	e3130801	 tst         r3, #1, 16
  02c38	0a000005	 beq         |$LN13@cppiHdPool|
  02c3c	e59d1004	 ldr         r1, [sp, #4]
  02c40	e59f02c4	 ldr         r0, [pc, #0x2C4]
  02c44	eb000000	 bl          CeLogMsg
  02c48	e3a03001	 mov         r3, #1
  02c4c	e58d3010	 str         r3, [sp, #0x10]
  02c50	ea000004	 b           |$LN14@cppiHdPool|
  02c54		 |$LN13@cppiHdPool|
  02c54	e59d1004	 ldr         r1, [sp, #4]
  02c58	e59f02ac	 ldr         r0, [pc, #0x2AC]
  02c5c	eb000000	 bl          NKDbgPrintfW
  02c60	e3a03000	 mov         r3, #0
  02c64	e58d3010	 str         r3, [sp, #0x10]
  02c68		 |$LN14@cppiHdPool|
  02c68	e3a03001	 mov         r3, #1
  02c6c	e58d3014	 str         r3, [sp, #0x14]
  02c70	ea000001	 b           |$LN16@cppiHdPool|
  02c74		 |$LN15@cppiHdPool|
  02c74	e3a03000	 mov         r3, #0
  02c78	e58d3014	 str         r3, [sp, #0x14]
  02c7c		 |$LN16@cppiHdPool|

; 291  : 
; 292  :     if (cppi->pool == NULL) 

  02c7c	e59d3030	 ldr         r3, [sp, #0x30]
  02c80	e2833b02	 add         r3, r3, #2, 22
  02c84	e2833098	 add         r3, r3, #0x98
  02c88	e5933000	 ldr         r3, [r3]
  02c8c	e3530000	 cmp         r3, #0
  02c90	1a000007	 bne         |$LN6@cppiHdPool|

; 293  : 	{
; 294  :         ERRORMSG(1, (L"ERROR: cppiHdPoolInit before cppiPoolInit!\r\n"));

  02c94	e3a02c01	 mov         r2, #1, 24
  02c98	e3822026	 orr         r2, r2, #0x26
  02c9c	e59f1260	 ldr         r1, [pc, #0x260]
  02ca0	e59f0258	 ldr         r0, [pc, #0x258]
  02ca4	eb000000	 bl          NKDbgPrintfW
  02ca8	e59f0258	 ldr         r0, [pc, #0x258]
  02cac	eb000000	 bl          NKDbgPrintfW

; 295  :         goto done;

  02cb0	ea00006d	 b           |$done$47333|
  02cb4		 |$LN6@cppiHdPool|

; 296  :     }
; 297  : 
; 298  :     LOCK_HD_POOL(cppi);

  02cb4	e59d3030	 ldr         r3, [sp, #0x30]
  02cb8	e2833b02	 add         r3, r3, #2, 22
  02cbc	e28300b8	 add         r0, r3, #0xB8
  02cc0	eb000000	 bl          EnterCriticalSection

; 299  : 
; 300  :     /* Build the Host Descriptor Free list */
; 301  :     for (n = 0; n < descriptorCount; n++)

  02cc4	e3a03000	 mov         r3, #0
  02cc8	e58d3000	 str         r3, [sp]
  02ccc	ea000002	 b           |$LN5@cppiHdPool|
  02cd0		 |$LN4@cppiHdPool|
  02cd0	e59d3000	 ldr         r3, [sp]
  02cd4	e2833001	 add         r3, r3, #1
  02cd8	e58d3000	 str         r3, [sp]
  02cdc		 |$LN5@cppiHdPool|
  02cdc	e59d2000	 ldr         r2, [sp]
  02ce0	e59d3004	 ldr         r3, [sp, #4]
  02ce4	e1520003	 cmp         r2, r3
  02ce8	2a00005b	 bcs         |$LN3@cppiHdPool|

; 302  :     {
; 303  :         HOST_DESCRIPTOR* hd = NULL;

  02cec	e3a03000	 mov         r3, #0
  02cf0	e58d3008	 str         r3, [sp, #8]

; 304  : 
; 305  :         /* Allocate Memory for this Host Descriptor from our Pool. Have to return Physical Address
; 306  :            back so that it helps in easier setup of CPPI Transfers
; 307  :         */
; 308  :         if (cppi->poolFree < CPPI_HD_SIZE)

  02cf4	e59d3030	 ldr         r3, [sp, #0x30]
  02cf8	e2833e8b	 add         r3, r3, #0x8B, 28
  02cfc	e5933000	 ldr         r3, [r3]
  02d00	e3530040	 cmp         r3, #0x40
  02d04	2a000008	 bcs         |$LN2@cppiHdPool|

; 309  :         {
; 310  :             ERRORMSG(TRUE, (L"+cppiPoolInit Unable to Allocate Descriptors !!!\r\n"));

  02d08	e3a02c01	 mov         r2, #1, 24
  02d0c	e3822036	 orr         r2, r2, #0x36
  02d10	e59f11ec	 ldr         r1, [pc, #0x1EC]
  02d14	e59f01e4	 ldr         r0, [pc, #0x1E4]
  02d18	eb000000	 bl          NKDbgPrintfW
  02d1c	e59f01d8	 ldr         r0, [pc, #0x1D8]
  02d20	eb000000	 bl          NKDbgPrintfW

; 311  :             break;

  02d24	ea00004c	 b           |$LN3@cppiHdPool|

; 312  :         }
; 313  :         else

  02d28	ea00004a	 b           |$LN1@cppiHdPool|
  02d2c		 |$LN2@cppiHdPool|

; 314  :         {
; 315  :             hd = (HOST_DESCRIPTOR *)((UINT32)cppi->pool + cppi->poolUsed);

  02d2c	e59d3030	 ldr         r3, [sp, #0x30]
  02d30	e2833b02	 add         r3, r3, #2, 22
  02d34	e2832098	 add         r2, r3, #0x98
  02d38	e59d3030	 ldr         r3, [sp, #0x30]
  02d3c	e2833b02	 add         r3, r3, #2, 22
  02d40	e28330ac	 add         r3, r3, #0xAC
  02d44	e5922000	 ldr         r2, [r2]
  02d48	e5933000	 ldr         r3, [r3]
  02d4c	e0823003	 add         r3, r2, r3
  02d50	e58d3008	 str         r3, [sp, #8]

; 316  : 
; 317  :             /* Set descriptor type to Host */
; 318  :             hd->DescInfo = (UINT32)(USB_CPPI41_DESC_TYPE_HOST << USB_CPPI41_DESC_TYPE_SHIFT);

  02d54	e59d2008	 ldr         r2, [sp, #8]
  02d58	e3a03102	 mov         r3, #2, 2
  02d5c	e5823000	 str         r3, [r2]

; 319  : 
; 320  :             /* For every descriptor, we also maintain Physical Address */
; 321  :             hd->addr = (cppi->paPool.LowPart + cppi->poolUsed);

  02d60	e59d3030	 ldr         r3, [sp, #0x30]
  02d64	e2832e8a	 add         r2, r3, #0x8A, 28
  02d68	e59d3030	 ldr         r3, [sp, #0x30]
  02d6c	e2833b02	 add         r3, r3, #2, 22
  02d70	e28330ac	 add         r3, r3, #0xAC
  02d74	e5922000	 ldr         r2, [r2]
  02d78	e5933000	 ldr         r3, [r3]
  02d7c	e0822003	 add         r2, r2, r3
  02d80	e59d3008	 ldr         r3, [sp, #8]
  02d84	e283302c	 add         r3, r3, #0x2C
  02d88	e5832000	 str         r2, [r3]

; 322  : 
; 323  :             cppi->poolUsed += CPPI_HD_SIZE;

  02d8c	e59d3030	 ldr         r3, [sp, #0x30]
  02d90	e2833b02	 add         r3, r3, #2, 22
  02d94	e28330ac	 add         r3, r3, #0xAC
  02d98	e5933000	 ldr         r3, [r3]
  02d9c	e2832040	 add         r2, r3, #0x40
  02da0	e59d3030	 ldr         r3, [sp, #0x30]
  02da4	e2833b02	 add         r3, r3, #2, 22
  02da8	e28330ac	 add         r3, r3, #0xAC
  02dac	e5832000	 str         r2, [r3]

; 324  :             cppi->poolFree -= CPPI_HD_SIZE;

  02db0	e59d3030	 ldr         r3, [sp, #0x30]
  02db4	e2833e8b	 add         r3, r3, #0x8B, 28
  02db8	e5933000	 ldr         r3, [r3]
  02dbc	e2432040	 sub         r2, r3, #0x40
  02dc0	e59d3030	 ldr         r3, [sp, #0x30]
  02dc4	e2833e8b	 add         r3, r3, #0x8B, 28
  02dc8	e5832000	 str         r2, [r3]

; 325  : 
; 326  :             cppiHdFree(cppi, hd);

  02dcc	e59d1008	 ldr         r1, [sp, #8]
  02dd0	e59d0030	 ldr         r0, [sp, #0x30]
  02dd4	eb000000	 bl          cppiHdFree

; 327  : 
; 328  :             PRINTMSG(ZONE_INIT, (L"HD %04u: PAddr 0x%08x VAddr 0x%08x\r\n", n, hd->addr, hd));

  02dd8	e59f3114	 ldr         r3, [pc, #0x114]
  02ddc	e5933440	 ldr         r3, [r3, #0x440]
  02de0	e3130004	 tst         r3, #4
  02de4	0a000019	 beq         |$LN19@cppiHdPool|
  02de8	e59f3104	 ldr         r3, [pc, #0x104]
  02dec	e5933440	 ldr         r3, [r3, #0x440]
  02df0	e3130801	 tst         r3, #1, 16
  02df4	0a000009	 beq         |$LN17@cppiHdPool|
  02df8	e59d3008	 ldr         r3, [sp, #8]
  02dfc	e59d2008	 ldr         r2, [sp, #8]
  02e00	e282202c	 add         r2, r2, #0x2C
  02e04	e5922000	 ldr         r2, [r2]
  02e08	e59d1000	 ldr         r1, [sp]
  02e0c	e59f00e4	 ldr         r0, [pc, #0xE4]
  02e10	eb000000	 bl          CeLogMsg
  02e14	e3a03001	 mov         r3, #1
  02e18	e58d3018	 str         r3, [sp, #0x18]
  02e1c	ea000008	 b           |$LN18@cppiHdPool|
  02e20		 |$LN17@cppiHdPool|
  02e20	e59d3008	 ldr         r3, [sp, #8]
  02e24	e59d2008	 ldr         r2, [sp, #8]
  02e28	e282202c	 add         r2, r2, #0x2C
  02e2c	e5922000	 ldr         r2, [r2]
  02e30	e59d1000	 ldr         r1, [sp]
  02e34	e59f00bc	 ldr         r0, [pc, #0xBC]
  02e38	eb000000	 bl          NKDbgPrintfW
  02e3c	e3a03000	 mov         r3, #0
  02e40	e58d3018	 str         r3, [sp, #0x18]
  02e44		 |$LN18@cppiHdPool|
  02e44	e3a03001	 mov         r3, #1
  02e48	e58d301c	 str         r3, [sp, #0x1C]
  02e4c	ea000001	 b           |$LN20@cppiHdPool|
  02e50		 |$LN19@cppiHdPool|
  02e50	e3a03000	 mov         r3, #0
  02e54	e58d301c	 str         r3, [sp, #0x1C]
  02e58		 |$LN20@cppiHdPool|
  02e58		 |$LN1@cppiHdPool|

; 329  :         }
; 330  :     }

  02e58	eaffff9c	 b           |$LN4@cppiHdPool|
  02e5c		 |$LN3@cppiHdPool|

; 331  : 
; 332  :     UNLOCK_HD_POOL(cppi);

  02e5c	e59d3030	 ldr         r3, [sp, #0x30]
  02e60	e2833b02	 add         r3, r3, #2, 22
  02e64	e28300b8	 add         r0, r3, #0xB8
  02e68	eb000000	 bl          LeaveCriticalSection
  02e6c		 |$done$47333|

; 333  : 
; 334  : done:
; 335  :     PRINTMSG(ZONE_INIT,
; 336  :         (L"-cppiPoolInit: Allocated %u HDs GlobalPool Free %u bytes\r\n",
; 337  :         n, cppi->poolFree));

  02e6c	e59f3080	 ldr         r3, [pc, #0x80]
  02e70	e5933440	 ldr         r3, [r3, #0x440]
  02e74	e3130004	 tst         r3, #4
  02e78	0a000017	 beq         |$LN23@cppiHdPool|
  02e7c	e59f3070	 ldr         r3, [pc, #0x70]
  02e80	e5933440	 ldr         r3, [r3, #0x440]
  02e84	e3130801	 tst         r3, #1, 16
  02e88	0a000008	 beq         |$LN21@cppiHdPool|
  02e8c	e59d3030	 ldr         r3, [sp, #0x30]
  02e90	e2833e8b	 add         r3, r3, #0x8B, 28
  02e94	e5932000	 ldr         r2, [r3]
  02e98	e59d1000	 ldr         r1, [sp]
  02e9c	e59f004c	 ldr         r0, [pc, #0x4C]
  02ea0	eb000000	 bl          CeLogMsg
  02ea4	e3a03001	 mov         r3, #1
  02ea8	e58d3020	 str         r3, [sp, #0x20]
  02eac	ea000007	 b           |$LN22@cppiHdPool|
  02eb0		 |$LN21@cppiHdPool|
  02eb0	e59d3030	 ldr         r3, [sp, #0x30]
  02eb4	e2833e8b	 add         r3, r3, #0x8B, 28
  02eb8	e5932000	 ldr         r2, [r3]
  02ebc	e59d1000	 ldr         r1, [sp]
  02ec0	e59f0028	 ldr         r0, [pc, #0x28]
  02ec4	eb000000	 bl          NKDbgPrintfW
  02ec8	e3a03000	 mov         r3, #0
  02ecc	e58d3020	 str         r3, [sp, #0x20]
  02ed0		 |$LN22@cppiHdPool|
  02ed0	e3a03001	 mov         r3, #1
  02ed4	e58d3024	 str         r3, [sp, #0x24]
  02ed8	ea000001	 b           |$LN24@cppiHdPool|
  02edc		 |$LN23@cppiHdPool|
  02edc	e3a03000	 mov         r3, #0
  02ee0	e58d3024	 str         r3, [sp, #0x24]
  02ee4		 |$LN24@cppiHdPool|
  02ee4		 |$LN9@cppiHdPool|

; 338  : 
; 339  :     return;
; 340  : }

  02ee4	e28dd028	 add         sp, sp, #0x28
  02ee8	e89d6000	 ldmia       sp, {sp, lr}
  02eec	e12fff1e	 bx          lr
  02ef0		 |$LN28@cppiHdPool|
  02ef0		 |$LN29@cppiHdPool|
  02ef0	00000000	 DCD         |??_C@_1HG@NOAAGAAA@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH?$AAD?$AAs?$AA?5@|
  02ef4		 |$LN30@cppiHdPool|
  02ef4	00000000	 DCD         |dpCurSettings|
  02ef8		 |$LN31@cppiHdPool|
  02ef8	00000000	 DCD         |??_C@_1EK@CJBFNHMB@?$AAH?$AAD?$AA?5?$AA?$CF?$AA0?$AA4?$AAu?$AA?3?$AA?5?$AAP?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?5?$AAV?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  02efc		 |$LN32@cppiHdPool|
  02efc	00000000	 DCD         |??_C@_1GG@PAECHJLN@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  02f00		 |$LN33@cppiHdPool|
  02f00	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  02f04		 |$LN34@cppiHdPool|
  02f04	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02f08		 |$LN35@cppiHdPool|
  02f08	00000000	 DCD         |??_C@_1FK@MJCBCGCD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAc?$AAp?$AAp?$AAi?$AAH?$AAd?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?5?$AAb?$AAe?$AAf?$AAo?$AAr?$AAe?$AA?5?$AAc?$AAp?$AAp@|
  02f0c		 |$LN36@cppiHdPool|
  02f0c	00000000	 DCD         |??_C@_1DA@FBEHIHFK@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AA?$CF?$AAu?$AA?5?$AAH?$AAD?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  02f10		 |$LN37@cppiHdPool|
  02f10	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02f14		 |$M48354|

			 ENDP  ; |cppiHdPoolInit|

	EXPORT	|??_C@_1CO@HKGGEHMB@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@IAJJBONH@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'

  00088			 AREA	 |.pdata|, PDATA
|$T48380| DCD	|$LN19@cppiContro@2|
	DCD	0x4000cf04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@HKGGEHMB@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@IAJJBONH@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@| DCB "+"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n"
	DCB	0x0, "e", 0x0, "l", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "f"
	DCB	0x0, "o", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  02f14			 AREA	 |.text|, CODE, ARM

  02f14		 |cppiControllerStart| PROC

; 851  : {

  02f14		 |$LN19@cppiContro@2|
  02f14	e1a0c00d	 mov         r12, sp
  02f18	e92d0001	 stmdb       sp!, {r0}
  02f1c	e92d5000	 stmdb       sp!, {r12, lr}
  02f20	e24dd028	 sub         sp, sp, #0x28
  02f24		 |$M48377|

; 852  :     struct cppi *pController = (struct cppi *)dmac;

  02f24	e59d3030	 ldr         r3, [sp, #0x30]
  02f28	e58d3008	 str         r3, [sp, #8]

; 853  :     CSL_CppiRegs *pCppiRegs	 = pController->pRegs;

  02f2c	e59d3008	 ldr         r3, [sp, #8]
  02f30	e283301c	 add         r3, r3, #0x1C
  02f34	e5933000	 ldr         r3, [r3]
  02f38	e58d3004	 str         r3, [sp, #4]

; 854  :     int n					 = 0;

  02f3c	e3a03000	 mov         r3, #0
  02f40	e58d3000	 str         r3, [sp]

; 855  : 
; 856  :     PRINTMSG(ZONE_PDD_INIT,
; 857  :         (L"+cppiControllerStart: Resetting Channel Info\r\n"));

  02f44	e59f32fc	 ldr         r3, [pc, #0x2FC]
  02f48	e5933440	 ldr         r3, [r3, #0x440]
  02f4c	e3130c01	 tst         r3, #1, 24
  02f50	0a00000f	 beq         |$LN11@cppiContro@2|
  02f54	e59f32ec	 ldr         r3, [pc, #0x2EC]
  02f58	e5933440	 ldr         r3, [r3, #0x440]
  02f5c	e3130801	 tst         r3, #1, 16
  02f60	0a000004	 beq         |$LN9@cppiContro@2|
  02f64	e59f02e0	 ldr         r0, [pc, #0x2E0]
  02f68	eb000000	 bl          CeLogMsg
  02f6c	e3a03001	 mov         r3, #1
  02f70	e58d3018	 str         r3, [sp, #0x18]
  02f74	ea000003	 b           |$LN10@cppiContro@2|
  02f78		 |$LN9@cppiContro@2|
  02f78	e59f02cc	 ldr         r0, [pc, #0x2CC]
  02f7c	eb000000	 bl          NKDbgPrintfW
  02f80	e3a03000	 mov         r3, #0
  02f84	e58d3018	 str         r3, [sp, #0x18]
  02f88		 |$LN10@cppiContro@2|
  02f88	e3a03001	 mov         r3, #1
  02f8c	e58d301c	 str         r3, [sp, #0x1C]
  02f90	ea000001	 b           |$LN12@cppiContro@2|
  02f94		 |$LN11@cppiContro@2|
  02f94	e3a03000	 mov         r3, #0
  02f98	e58d301c	 str         r3, [sp, #0x1C]
  02f9c		 |$LN12@cppiContro@2|

; 858  : 
; 859  :     /* Initialise the CPPI tx channels
; 860  :      */
; 861  :     for (n = 0; n < dim(pController->txCppi); n++)

  02f9c	e3a03000	 mov         r3, #0
  02fa0	e58d3000	 str         r3, [sp]
  02fa4	ea000002	 b           |$LN6@cppiContro@2|
  02fa8		 |$LN5@cppiContro@2|
  02fa8	e59d3000	 ldr         r3, [sp]
  02fac	e2833001	 add         r3, r3, #1
  02fb0	e58d3000	 str         r3, [sp]
  02fb4		 |$LN6@cppiContro@2|
  02fb4	e59d3000	 ldr         r3, [sp]
  02fb8	e353000f	 cmp         r3, #0xF
  02fbc	2a00003e	 bcs         |$LN4@cppiContro@2|

; 862  :     {
; 863  :         struct cppi_channel *txChannel = pController->txCppi + n;

  02fc0	e59d3008	 ldr         r3, [sp, #8]
  02fc4	e2831028	 add         r1, r3, #0x28
  02fc8	e59d2000	 ldr         r2, [sp]
  02fcc	e3a03048	 mov         r3, #0x48
  02fd0	e0030392	 mul         r3, r2, r3
  02fd4	e0813003	 add         r3, r1, r3
  02fd8	e58d300c	 str         r3, [sp, #0xC]

; 864  : 
; 865  :         /* initialize channel fields */
; 866  :         txChannel->Channel.pPrivateData = txChannel;

  02fdc	e59d200c	 ldr         r2, [sp, #0xC]
  02fe0	e59d300c	 ldr         r3, [sp, #0xC]
  02fe4	e5832000	 str         r2, [r3]

; 867  :         txChannel->Channel.bStatus = MGC_DMA_STATUS_UNKNOWN;

  02fe8	e59d300c	 ldr         r3, [sp, #0xC]
  02fec	e2832004	 add         r2, r3, #4
  02ff0	e3a03000	 mov         r3, #0
  02ff4	e5823000	 str         r3, [r2]

; 868  :         txChannel->pController = pController;

  02ff8	e59d300c	 ldr         r3, [sp, #0xC]
  02ffc	e2832008	 add         r2, r3, #8
  03000	e59d3008	 ldr         r3, [sp, #8]
  03004	e5823000	 str         r3, [r2]

; 869  :         txChannel->transmit  = TRUE;

  03008	e59d300c	 ldr         r3, [sp, #0xC]
  0300c	e2832014	 add         r2, r3, #0x14
  03010	e3a03001	 mov         r3, #1
  03014	e5823000	 str         r3, [r2]

; 870  :         txChannel->channelNo = (UINT8)n;

  03018	e59d3000	 ldr         r3, [sp]
  0301c	e20320ff	 and         r2, r3, #0xFF
  03020	e59d300c	 ldr         r3, [sp, #0xC]
  03024	e2833018	 add         r3, r3, #0x18
  03028	e5c32000	 strb        r2, [r3]

; 871  :         txChannel->queueNo   = pController->txqOffset + (UINT8)(2 * n);

  0302c	e59d3008	 ldr         r3, [sp, #8]
  03030	e2833026	 add         r3, r3, #0x26
  03034	e5d33000	 ldrb        r3, [r3]
  03038	e1a01003	 mov         r1, r3
  0303c	e59d2000	 ldr         r2, [sp]
  03040	e3a03002	 mov         r3, #2
  03044	e0030392	 mul         r3, r2, r3
  03048	e20330ff	 and         r3, r3, #0xFF
  0304c	e0811003	 add         r1, r1, r3
  03050	e59d300c	 ldr         r3, [sp, #0xC]
  03054	e2832019	 add         r2, r3, #0x19
  03058	e20130ff	 and         r3, r1, #0xFF
  0305c	e5c23000	 strb        r3, [r2]

; 872  :         txChannel->lastModeRndis = 0;

  03060	e59d300c	 ldr         r3, [sp, #0xC]
  03064	e283201a	 add         r2, r3, #0x1A
  03068	e3a03000	 mov         r3, #0
  0306c	e5c23000	 strb        r3, [r2]

; 873  :         txChannel->isTeardownPending = FALSE;

  03070	e59d300c	 ldr         r3, [sp, #0xC]
  03074	e283201c	 add         r2, r3, #0x1C
  03078	e3a03000	 mov         r3, #0
  0307c	e5823000	 str         r3, [r2]

; 874  :         txChannel->pRegs = &(pCppiRegs->CDMACHANNEL[n + pController->chanOffset]);

  03080	e59d3004	 ldr         r3, [sp, #4]
  03084	e2831b02	 add         r1, r3, #2, 22
  03088	e59d3008	 ldr         r3, [sp, #8]
  0308c	e2833024	 add         r3, r3, #0x24
  03090	e5d33000	 ldrb        r3, [r3]
  03094	e1a02003	 mov         r2, r3
  03098	e59d3000	 ldr         r3, [sp]
  0309c	e0832002	 add         r2, r3, r2
  030a0	e3a03020	 mov         r3, #0x20
  030a4	e0030392	 mul         r3, r2, r3
  030a8	e0812003	 add         r2, r1, r3
  030ac	e59d300c	 ldr         r3, [sp, #0xC]
  030b0	e283300c	 add         r3, r3, #0xC
  030b4	e5832000	 str         r2, [r3]

; 875  : 
; 876  :         PRINTMSG(/*ZONE_PDD_INIT*/0,
; 877  :             (L"TX Ch %02u: Queue %u, CDMA regs 0x%08x\r\n",
; 878  :             txChannel->channelNo,
; 879  :             txChannel->queueNo,
; 880  :             txChannel->pRegs));
; 881  :     }

  030b8	eaffffba	 b           |$LN5@cppiContro@2|
  030bc		 |$LN4@cppiContro@2|

; 882  : 
; 883  :     /* Initialise the CPPI rx channels
; 884  :      */
; 885  :     for (n = 0; n < dim(pController->rxCppi); n++)

  030bc	e3a03000	 mov         r3, #0
  030c0	e58d3000	 str         r3, [sp]
  030c4	ea000002	 b           |$LN3@cppiContro@2|
  030c8		 |$LN2@cppiContro@2|
  030c8	e59d3000	 ldr         r3, [sp]
  030cc	e2833001	 add         r3, r3, #1
  030d0	e58d3000	 str         r3, [sp]
  030d4		 |$LN3@cppiContro@2|
  030d4	e59d3000	 ldr         r3, [sp]
  030d8	e353000f	 cmp         r3, #0xF
  030dc	2a00003c	 bcs         |$LN1@cppiContro@2|

; 886  :     {
; 887  :         struct cppi_channel *rxChannel = pController->rxCppi + n;

  030e0	e59d3008	 ldr         r3, [sp, #8]
  030e4	e2831e46	 add         r1, r3, #0x46, 28
  030e8	e59d2000	 ldr         r2, [sp]
  030ec	e3a03048	 mov         r3, #0x48
  030f0	e0030392	 mul         r3, r2, r3
  030f4	e0813003	 add         r3, r1, r3
  030f8	e58d3010	 str         r3, [sp, #0x10]

; 888  : 
; 889  :         /* initialize channel fields */
; 890  :         rxChannel->Channel.pPrivateData = rxChannel;

  030fc	e59d2010	 ldr         r2, [sp, #0x10]
  03100	e59d3010	 ldr         r3, [sp, #0x10]
  03104	e5832000	 str         r2, [r3]

; 891  :         rxChannel->Channel.bStatus = MGC_DMA_STATUS_UNKNOWN;

  03108	e59d3010	 ldr         r3, [sp, #0x10]
  0310c	e2832004	 add         r2, r3, #4
  03110	e3a03000	 mov         r3, #0
  03114	e5823000	 str         r3, [r2]

; 892  :         rxChannel->pController = pController;

  03118	e59d3010	 ldr         r3, [sp, #0x10]
  0311c	e2832008	 add         r2, r3, #8
  03120	e59d3008	 ldr         r3, [sp, #8]
  03124	e5823000	 str         r3, [r2]

; 893  :         rxChannel->transmit  = FALSE;

  03128	e59d3010	 ldr         r3, [sp, #0x10]
  0312c	e2832014	 add         r2, r3, #0x14
  03130	e3a03000	 mov         r3, #0
  03134	e5823000	 str         r3, [r2]

; 894  :         rxChannel->channelNo = (UINT8)n;

  03138	e59d3000	 ldr         r3, [sp]
  0313c	e20320ff	 and         r2, r3, #0xFF
  03140	e59d3010	 ldr         r3, [sp, #0x10]
  03144	e2833018	 add         r3, r3, #0x18
  03148	e5c32000	 strb        r2, [r3]

; 895  :         rxChannel->queueNo   = pController->rxqOffset + (UINT8)n;

  0314c	e59d3008	 ldr         r3, [sp, #8]
  03150	e2833025	 add         r3, r3, #0x25
  03154	e5d33000	 ldrb        r3, [r3]
  03158	e1a02003	 mov         r2, r3
  0315c	e59d3000	 ldr         r3, [sp]
  03160	e20330ff	 and         r3, r3, #0xFF
  03164	e0821003	 add         r1, r2, r3
  03168	e59d3010	 ldr         r3, [sp, #0x10]
  0316c	e2832019	 add         r2, r3, #0x19
  03170	e20130ff	 and         r3, r1, #0xFF
  03174	e5c23000	 strb        r3, [r2]

; 896  :         rxChannel->lastModeRndis = 0;

  03178	e59d3010	 ldr         r3, [sp, #0x10]
  0317c	e283201a	 add         r2, r3, #0x1A
  03180	e3a03000	 mov         r3, #0
  03184	e5c23000	 strb        r3, [r2]

; 897  :         rxChannel->isTeardownPending = FALSE;

  03188	e59d3010	 ldr         r3, [sp, #0x10]
  0318c	e283201c	 add         r2, r3, #0x1C
  03190	e3a03000	 mov         r3, #0
  03194	e5823000	 str         r3, [r2]

; 898  :         rxChannel->pRegs = &(pCppiRegs->CDMACHANNEL[n + pController->chanOffset]);

  03198	e59d3004	 ldr         r3, [sp, #4]
  0319c	e2831b02	 add         r1, r3, #2, 22
  031a0	e59d3008	 ldr         r3, [sp, #8]
  031a4	e2833024	 add         r3, r3, #0x24
  031a8	e5d33000	 ldrb        r3, [r3]
  031ac	e1a02003	 mov         r2, r3
  031b0	e59d3000	 ldr         r3, [sp]
  031b4	e0832002	 add         r2, r3, r2
  031b8	e3a03020	 mov         r3, #0x20
  031bc	e0030392	 mul         r3, r2, r3
  031c0	e0812003	 add         r2, r1, r3
  031c4	e59d3010	 ldr         r3, [sp, #0x10]
  031c8	e283300c	 add         r3, r3, #0xC
  031cc	e5832000	 str         r2, [r3]

; 899  : 
; 900  :         PRINTMSG(/*ZONE_PDD_INIT*/0,
; 901  :             (L"RX Ch %02u: Queue %u, CDMA regs 0x%08x\r\n",
; 902  :             rxChannel->channelNo,
; 903  :             rxChannel->queueNo,
; 904  :             rxChannel->pRegs));
; 905  :     }

  031d0	eaffffbc	 b           |$LN2@cppiContro@2|
  031d4		 |$LN1@cppiContro@2|

; 906  : 
; 907  :     PRINTMSG(ZONE_PDD_INIT,
; 908  :         (L"-cppiControllerStart\r\n"));

  031d4	e59f306c	 ldr         r3, [pc, #0x6C]
  031d8	e5933440	 ldr         r3, [r3, #0x440]
  031dc	e3130c01	 tst         r3, #1, 24
  031e0	0a00000f	 beq         |$LN15@cppiContro@2|
  031e4	e59f305c	 ldr         r3, [pc, #0x5C]
  031e8	e5933440	 ldr         r3, [r3, #0x440]
  031ec	e3130801	 tst         r3, #1, 16
  031f0	0a000004	 beq         |$LN13@cppiContro@2|
  031f4	e59f0048	 ldr         r0, [pc, #0x48]
  031f8	eb000000	 bl          CeLogMsg
  031fc	e3a03001	 mov         r3, #1
  03200	e58d3020	 str         r3, [sp, #0x20]
  03204	ea000003	 b           |$LN14@cppiContro@2|
  03208		 |$LN13@cppiContro@2|
  03208	e59f0034	 ldr         r0, [pc, #0x34]
  0320c	eb000000	 bl          NKDbgPrintfW
  03210	e3a03000	 mov         r3, #0
  03214	e58d3020	 str         r3, [sp, #0x20]
  03218		 |$LN14@cppiContro@2|
  03218	e3a03001	 mov         r3, #1
  0321c	e58d3024	 str         r3, [sp, #0x24]
  03220	ea000001	 b           |$LN16@cppiContro@2|
  03224		 |$LN15@cppiContro@2|
  03224	e3a03000	 mov         r3, #0
  03228	e58d3024	 str         r3, [sp, #0x24]
  0322c		 |$LN16@cppiContro@2|

; 909  : 
; 910  :     return 0;

  0322c	e3a03000	 mov         r3, #0
  03230	e58d3014	 str         r3, [sp, #0x14]

; 911  : }

  03234	e59d0014	 ldr         r0, [sp, #0x14]
  03238	e28dd028	 add         sp, sp, #0x28
  0323c	e89d6000	 ldmia       sp, {sp, lr}
  03240	e12fff1e	 bx          lr
  03244		 |$LN20@cppiContro@2|
  03244		 |$LN21@cppiContro@2|
  03244	00000000	 DCD         |??_C@_1CO@HKGGEHMB@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  03248		 |$LN22@cppiContro@2|
  03248	00000000	 DCD         |dpCurSettings|
  0324c		 |$LN23@cppiContro@2|
  0324c	00000000	 DCD         |??_C@_1FO@IAJJBONH@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?3?$AA?5?$AAR?$AAe?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AA?5@|
  03250		 |$M48378|

			 ENDP  ; |cppiControllerStart|

	EXPORT	|??_C@_1GM@PCLOIHDK@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAo?$AAp?$AA?3?$AA?5?$AAT?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAo?$AAw?$AAn@| [ DATA ] ; `string'

  00090			 AREA	 |.pdata|, PDATA
|$T48394| DCD	|$LN15@cppiContro@3|
	DCD	0x40004604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@PCLOIHDK@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAo?$AAp?$AA?3?$AA?5?$AAT?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAo?$AAw?$AAn@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "t", 0x0, "o", 0x0, "p", 0x0, ":"
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "n", 0x0, " ", 0x0, "R", 0x0, "X", 0x0, " ", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e"
	DCB	0x0, "l", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03250			 AREA	 |.text|, CODE, ARM

  03250		 |cppiControllerStop| PROC

; 926  : {

  03250		 |$LN15@cppiContro@3|
  03250	e1a0c00d	 mov         r12, sp
  03254	e92d0001	 stmdb       sp!, {r0}
  03258	e92d5000	 stmdb       sp!, {r12, lr}
  0325c	e24dd014	 sub         sp, sp, #0x14
  03260		 |$M48391|

; 927  :     struct cppi *cppi = (struct cppi *)dmac;

  03260	e59d301c	 ldr         r3, [sp, #0x1C]
  03264	e58d3004	 str         r3, [sp, #4]

; 928  :     unsigned n;
; 929  : 
; 930  :     PRINTMSG(ZONE_INIT,
; 931  :         (L"cppiControllerStop: Tearing down RX and TX Channels\r\n"));

  03268	e59f30f4	 ldr         r3, [pc, #0xF4]
  0326c	e5933440	 ldr         r3, [r3, #0x440]
  03270	e3130004	 tst         r3, #4
  03274	0a00000f	 beq         |$LN11@cppiContro@3|
  03278	e59f30e4	 ldr         r3, [pc, #0xE4]
  0327c	e5933440	 ldr         r3, [r3, #0x440]
  03280	e3130801	 tst         r3, #1, 16
  03284	0a000004	 beq         |$LN9@cppiContro@3|
  03288	e59f00d0	 ldr         r0, [pc, #0xD0]
  0328c	eb000000	 bl          CeLogMsg
  03290	e3a03001	 mov         r3, #1
  03294	e58d300c	 str         r3, [sp, #0xC]
  03298	ea000003	 b           |$LN10@cppiContro@3|
  0329c		 |$LN9@cppiContro@3|
  0329c	e59f00bc	 ldr         r0, [pc, #0xBC]
  032a0	eb000000	 bl          NKDbgPrintfW
  032a4	e3a03000	 mov         r3, #0
  032a8	e58d300c	 str         r3, [sp, #0xC]
  032ac		 |$LN10@cppiContro@3|
  032ac	e3a03001	 mov         r3, #1
  032b0	e58d3010	 str         r3, [sp, #0x10]
  032b4	ea000001	 b           |$LN12@cppiContro@3|
  032b8		 |$LN11@cppiContro@3|
  032b8	e3a03000	 mov         r3, #0
  032bc	e58d3010	 str         r3, [sp, #0x10]
  032c0		 |$LN12@cppiContro@3|

; 932  : 
; 933  :     /* Traverse through each Tx/RX channel and abort any transfers */
; 934  : 
; 935  :     for (n = 0; n < dim(cppi->txCppi); n++)

  032c0	e3a03000	 mov         r3, #0
  032c4	e58d3000	 str         r3, [sp]
  032c8	ea000002	 b           |$LN6@cppiContro@3|
  032cc		 |$LN5@cppiContro@3|
  032cc	e59d3000	 ldr         r3, [sp]
  032d0	e2833001	 add         r3, r3, #1
  032d4	e58d3000	 str         r3, [sp]
  032d8		 |$LN6@cppiContro@3|
  032d8	e59d3000	 ldr         r3, [sp]
  032dc	e353000f	 cmp         r3, #0xF
  032e0	2a000007	 bcs         |$LN4@cppiContro@3|

; 936  : 	{
; 937  :         cppiChannelAbort((struct dma_channel *)(cppi->txCppi + n));

  032e4	e59d3004	 ldr         r3, [sp, #4]
  032e8	e2831028	 add         r1, r3, #0x28
  032ec	e59d2000	 ldr         r2, [sp]
  032f0	e3a03048	 mov         r3, #0x48
  032f4	e0030392	 mul         r3, r2, r3
  032f8	e0810003	 add         r0, r1, r3
  032fc	eb000000	 bl          cppiChannelAbort

; 938  : 	}

  03300	eafffff1	 b           |$LN5@cppiContro@3|
  03304		 |$LN4@cppiContro@3|

; 939  : 
; 940  :     for (n = 0; n < dim(cppi->rxCppi); n++)

  03304	e3a03000	 mov         r3, #0
  03308	e58d3000	 str         r3, [sp]
  0330c	ea000002	 b           |$LN3@cppiContro@3|
  03310		 |$LN2@cppiContro@3|
  03310	e59d3000	 ldr         r3, [sp]
  03314	e2833001	 add         r3, r3, #1
  03318	e58d3000	 str         r3, [sp]
  0331c		 |$LN3@cppiContro@3|
  0331c	e59d3000	 ldr         r3, [sp]
  03320	e353000f	 cmp         r3, #0xF
  03324	2a000007	 bcs         |$LN1@cppiContro@3|

; 941  : 	{
; 942  :         cppiChannelAbort((struct dma_channel *)(cppi->rxCppi + n));

  03328	e59d3004	 ldr         r3, [sp, #4]
  0332c	e2831e46	 add         r1, r3, #0x46, 28
  03330	e59d2000	 ldr         r2, [sp]
  03334	e3a03048	 mov         r3, #0x48
  03338	e0030392	 mul         r3, r2, r3
  0333c	e0810003	 add         r0, r1, r3
  03340	eb000000	 bl          cppiChannelAbort

; 943  : 	}

  03344	eafffff1	 b           |$LN2@cppiContro@3|
  03348		 |$LN1@cppiContro@3|

; 944  : 
; 945  :     return 0;

  03348	e3a03000	 mov         r3, #0
  0334c	e58d3008	 str         r3, [sp, #8]

; 946  : }

  03350	e59d0008	 ldr         r0, [sp, #8]
  03354	e28dd014	 add         sp, sp, #0x14
  03358	e89d6000	 ldmia       sp, {sp, lr}
  0335c	e12fff1e	 bx          lr
  03360		 |$LN16@cppiContro@3|
  03360		 |$LN17@cppiContro@3|
  03360	00000000	 DCD         |??_C@_1GM@PCLOIHDK@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AAS?$AAt?$AAo?$AAp?$AA?3?$AA?5?$AAT?$AAe?$AAa?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAd?$AAo?$AAw?$AAn@|
  03364		 |$LN18@cppiContro@3|
  03364	00000000	 DCD         |dpCurSettings|
  03368		 |$M48392|

			 ENDP  ; |cppiControllerStop|

	EXPORT	|??_C@_1FO@NAGFODI@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAT?$AAe?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@OGPJBHMB@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@MBMJCKKK@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@EDMNLHMB@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00098			 AREA	 |.pdata|, PDATA
|$T48414| DCD	|$LN24@cppiChanne@2|
	DCD	0x40009304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@NAGFODI@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAT?$AAe?$AAa?$AAr@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "R", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "E", 0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "T", 0x0, "e", 0x0, "a"
	DCB	0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, " "
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@OGPJBHMB@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAd@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "R", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "R", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "i"
	DCB	0x0, "d", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@MBMJCKKK@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "R", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l"
	DCB	0x0, "i", 0x0, "d", 0x0, " ", 0x0, "A", 0x0, "r", 0x0, "g"
	DCB	0x0, "u", 0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s"
	DCB	0x0, ".", 0x0, ".", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@EDMNLHMB@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "R", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "e", 0x0, ":"
	DCB	0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03368			 AREA	 |.text|, CODE, ARM

  03368		 |cppiChannelRelease| PROC

; 1074 : {

  03368		 |$LN24@cppiChanne@2|
  03368	e1a0c00d	 mov         r12, sp
  0336c	e92d0001	 stmdb       sp!, {r0}
  03370	e92d5000	 stmdb       sp!, {r12, lr}
  03374	e24dd01c	 sub         sp, sp, #0x1C
  03378		 |$M48411|

; 1075 :     struct cppi_channel *c = (struct cppi_channel *)channel;

  03378	e59d3024	 ldr         r3, [sp, #0x24]
  0337c	e58d3000	 str         r3, [sp]

; 1076 : 
; 1077 :     DEBUGCHK(channel != NULL);

  03380	e59d3024	 ldr         r3, [sp, #0x24]
  03384	e3530000	 cmp         r3, #0
  03388	0a000002	 beq         |$LN10@cppiChanne@2|
  0338c	e3a03001	 mov         r3, #1
  03390	e58d3004	 str         r3, [sp, #4]
  03394	ea000008	 b           |$LN11@cppiChanne@2|
  03398		 |$LN10@cppiChanne@2|
  03398	e3a03b01	 mov         r3, #1, 22
  0339c	e3833035	 orr         r3, r3, #0x35
  033a0	e59f21f4	 ldr         r2, [pc, #0x1F4]
  033a4	e59f11f8	 ldr         r1, [pc, #0x1F8]
  033a8	e59f0200	 ldr         r0, [pc, #0x200]
  033ac	eb000000	 bl          NKDbgPrintfW
  033b0	e6000010	 __debugbreak_ce
  033b4	e3a03000	 mov         r3, #0
  033b8	e58d3004	 str         r3, [sp, #4]
  033bc		 |$LN11@cppiChanne@2|

; 1078 : 
; 1079 :     PRINTMSG(ZONE_PDD_INIT, (L"cppiChannelRelease: Ch %u\r\n", c->channelNo));

  033bc	e59f31e0	 ldr         r3, [pc, #0x1E0]
  033c0	e5933440	 ldr         r3, [r3, #0x440]
  033c4	e3130c01	 tst         r3, #1, 24
  033c8	0a000015	 beq         |$LN14@cppiChanne@2|
  033cc	e59f31d0	 ldr         r3, [pc, #0x1D0]
  033d0	e5933440	 ldr         r3, [r3, #0x440]
  033d4	e3130801	 tst         r3, #1, 16
  033d8	0a000007	 beq         |$LN12@cppiChanne@2|
  033dc	e59d3000	 ldr         r3, [sp]
  033e0	e2833018	 add         r3, r3, #0x18
  033e4	e5d31000	 ldrb        r1, [r3]
  033e8	e59f01bc	 ldr         r0, [pc, #0x1BC]
  033ec	eb000000	 bl          CeLogMsg
  033f0	e3a03001	 mov         r3, #1
  033f4	e58d3008	 str         r3, [sp, #8]
  033f8	ea000006	 b           |$LN13@cppiChanne@2|
  033fc		 |$LN12@cppiChanne@2|
  033fc	e59d3000	 ldr         r3, [sp]
  03400	e2833018	 add         r3, r3, #0x18
  03404	e5d31000	 ldrb        r1, [r3]
  03408	e59f019c	 ldr         r0, [pc, #0x19C]
  0340c	eb000000	 bl          NKDbgPrintfW
  03410	e3a03000	 mov         r3, #0
  03414	e58d3008	 str         r3, [sp, #8]
  03418		 |$LN13@cppiChanne@2|
  03418	e3a03001	 mov         r3, #1
  0341c	e58d300c	 str         r3, [sp, #0xC]
  03420	ea000001	 b           |$LN15@cppiChanne@2|
  03424		 |$LN14@cppiChanne@2|
  03424	e3a03000	 mov         r3, #0
  03428	e58d300c	 str         r3, [sp, #0xC]
  0342c		 |$LN15@cppiChanne@2|

; 1080 : 
; 1081 :     /* Sanity check on the Arguments. Verify if the State is not UNKNOWN
; 1082 :      * before trying to release the Channel.
; 1083 :      */
; 1084 :     if (channel == NULL)

  0342c	e59d3024	 ldr         r3, [sp, #0x24]
  03430	e3530000	 cmp         r3, #0
  03434	1a000007	 bne         |$LN7@cppiChanne@2|

; 1085 :     {
; 1086 :         ERRORMSG (TRUE, (L"cppiChannelRelease: Invalid Arguments..\r\n"));

  03438	e3a02b01	 mov         r2, #1, 22
  0343c	e382203e	 orr         r2, r2, #0x3E
  03440	e59f1154	 ldr         r1, [pc, #0x154]
  03444	e59f014c	 ldr         r0, [pc, #0x14C]
  03448	eb000000	 bl          NKDbgPrintfW
  0344c	e59f0154	 ldr         r0, [pc, #0x154]
  03450	eb000000	 bl          NKDbgPrintfW
  03454	ea00004a	 b           |$LN6@cppiChanne@2|
  03458		 |$LN7@cppiChanne@2|

; 1087 :     }
; 1088 :     else if (channel->bStatus != MGC_DMA_STATUS_UNKNOWN)

  03458	e59d3024	 ldr         r3, [sp, #0x24]
  0345c	e2833004	 add         r3, r3, #4
  03460	e5933000	 ldr         r3, [r3]
  03464	e3530000	 cmp         r3, #0
  03468	0a000045	 beq         |$LN5@cppiChanne@2|

; 1089 :     {
; 1090 :         channel->bStatus = MGC_DMA_STATUS_UNKNOWN;

  0346c	e59d3024	 ldr         r3, [sp, #0x24]
  03470	e2832004	 add         r2, r3, #4
  03474	e3a03000	 mov         r3, #0
  03478	e5823000	 str         r3, [r2]

; 1091 : 
; 1092 :         if (c->pEndPt == NULL)

  0347c	e59d3000	 ldr         r3, [sp]
  03480	e2833010	 add         r3, r3, #0x10
  03484	e5933000	 ldr         r3, [r3]
  03488	e3530000	 cmp         r3, #0
  0348c	1a000016	 bne         |$LN4@cppiChanne@2|

; 1093 :         {
; 1094 :             PRINTMSG(ZONE_PDD_INIT, (L"cppiChannelRelease: Releasing idle DMA channel\r\n"));

  03490	e59f310c	 ldr         r3, [pc, #0x10C]
  03494	e5933440	 ldr         r3, [r3, #0x440]
  03498	e3130c01	 tst         r3, #1, 24
  0349c	0a00000f	 beq         |$LN18@cppiChanne@2|
  034a0	e59f30fc	 ldr         r3, [pc, #0xFC]
  034a4	e5933440	 ldr         r3, [r3, #0x440]
  034a8	e3130801	 tst         r3, #1, 16
  034ac	0a000004	 beq         |$LN16@cppiChanne@2|
  034b0	e59f00e8	 ldr         r0, [pc, #0xE8]
  034b4	eb000000	 bl          CeLogMsg
  034b8	e3a03001	 mov         r3, #1
  034bc	e58d3010	 str         r3, [sp, #0x10]
  034c0	ea000003	 b           |$LN17@cppiChanne@2|
  034c4		 |$LN16@cppiChanne@2|
  034c4	e59f00d4	 ldr         r0, [pc, #0xD4]
  034c8	eb000000	 bl          NKDbgPrintfW
  034cc	e3a03000	 mov         r3, #0
  034d0	e58d3010	 str         r3, [sp, #0x10]
  034d4		 |$LN17@cppiChanne@2|
  034d4	e3a03001	 mov         r3, #1
  034d8	e58d3014	 str         r3, [sp, #0x14]
  034dc	ea000001	 b           |$LN19@cppiChanne@2|
  034e0		 |$LN18@cppiChanne@2|
  034e0	e3a03000	 mov         r3, #0
  034e4	e58d3014	 str         r3, [sp, #0x14]
  034e8		 |$LN19@cppiChanne@2|

; 1095 :         }
; 1096 :         else

  034e8	ea000003	 b           |$LN3@cppiChanne@2|
  034ec		 |$LN4@cppiChanne@2|

; 1097 : 		{
; 1098 :             c->pEndPt = NULL;

  034ec	e59d3000	 ldr         r3, [sp]
  034f0	e2832010	 add         r2, r3, #0x10
  034f4	e3a03000	 mov         r3, #0
  034f8	e5823000	 str         r3, [r2]
  034fc		 |$LN3@cppiChanne@2|

; 1099 : 		}
; 1100 : 
; 1101 :         ERRORMSG(c->isTeardownPending, (L"cppiChannelRelease: ERROR - Teardown pending\r\n"));

  034fc	e59d3000	 ldr         r3, [sp]
  03500	e283301c	 add         r3, r3, #0x1C
  03504	e5933000	 ldr         r3, [r3]
  03508	e3530000	 cmp         r3, #0
  0350c	0a000009	 beq         |$LN20@cppiChanne@2|
  03510	e3a02b01	 mov         r2, #1, 22
  03514	e382204d	 orr         r2, r2, #0x4D
  03518	e59f107c	 ldr         r1, [pc, #0x7C]
  0351c	e59f0074	 ldr         r0, [pc, #0x74]
  03520	eb000000	 bl          NKDbgPrintfW
  03524	e59f0068	 ldr         r0, [pc, #0x68]
  03528	eb000000	 bl          NKDbgPrintfW
  0352c	e3a03001	 mov         r3, #1
  03530	e58d3018	 str         r3, [sp, #0x18]
  03534	ea000001	 b           |$LN21@cppiChanne@2|
  03538		 |$LN20@cppiChanne@2|
  03538	e3a03000	 mov         r3, #0
  0353c	e58d3018	 str         r3, [sp, #0x18]
  03540		 |$LN21@cppiChanne@2|

; 1102 : 
; 1103 :         /* Disable the CDMA channel */
; 1104 :         if (c->transmit)

  03540	e59d3000	 ldr         r3, [sp]
  03544	e2833014	 add         r3, r3, #0x14
  03548	e5933000	 ldr         r3, [r3]
  0354c	e3530000	 cmp         r3, #0
  03550	0a000005	 beq         |$LN2@cppiChanne@2|

; 1105 :         {
; 1106 :             c->pRegs->TXGCR =
; 1107 :           /*BIT31 | */ /* Enable */
; 1108 :           /*BIT30 | */ /* Tear-down */ /*
; 1109 :             qmgr |
; 1110 :             qnum */ USB_CPPI_TDCMPL_QNUM;

  03554	e59d3000	 ldr         r3, [sp]
  03558	e283300c	 add         r3, r3, #0xC
  0355c	e5932000	 ldr         r2, [r3]
  03560	e3a03044	 mov         r3, #0x44
  03564	e5823000	 str         r3, [r2]

; 1111 :         }
; 1112 :         else

  03568	ea000005	 b           |$LN1@cppiChanne@2|
  0356c		 |$LN2@cppiChanne@2|

; 1113 :         {
; 1114 :             c->pRegs->RXGCR =
; 1115 :           /*BIT31 | */ /* Enable */
; 1116 :           /*BIT30 | */ /* Tear-down */
; 1117 :             BIT24 |    /* Retry on starvation */
; 1118 :             BIT14 |    /* Host descriptor type (default) */ /*
; 1119 :             qmgr |
; 1120 :             qnum */ USB_CPPI_TDCMPL_QNUM;

  0356c	e59d3000	 ldr         r3, [sp]
  03570	e283300c	 add         r3, r3, #0xC
  03574	e5933000	 ldr         r3, [r3]
  03578	e2832008	 add         r2, r3, #8
  0357c	e59f300c	 ldr         r3, [pc, #0xC]
  03580	e5823000	 str         r3, [r2]
  03584		 |$LN1@cppiChanne@2|
  03584		 |$LN5@cppiChanne@2|
  03584		 |$LN6@cppiChanne@2|

; 1121 :         }
; 1122 :     }
; 1123 : }

  03584	e28dd01c	 add         sp, sp, #0x1C
  03588	e89d6000	 ldmia       sp, {sp, lr}
  0358c	e12fff1e	 bx          lr
  03590		 |$LN25@cppiChanne@2|
  03590		 |$LN26@cppiChanne@2|
  03590	01004044	 DCD         0x1004044
  03594		 |$LN27@cppiChanne@2|
  03594	00000000	 DCD         |??_C@_1FO@NAGFODI@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AA?9?$AA?5?$AAT?$AAe?$AAa?$AAr@|
  03598		 |$LN28@cppiChanne@2|
  03598	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0359c		 |$LN29@cppiChanne@2|
  0359c	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  035a0		 |$LN30@cppiChanne@2|
  035a0	00000000	 DCD         |??_C@_1GC@OGPJBHMB@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAd@|
  035a4		 |$LN31@cppiChanne@2|
  035a4	00000000	 DCD         |dpCurSettings|
  035a8		 |$LN32@cppiChanne@2|
  035a8	00000000	 DCD         |??_C@_1FE@MBMJCKKK@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAA?$AAr?$AAg?$AAu@|
  035ac		 |$LN33@cppiChanne@2|
  035ac	00000000	 DCD         |??_C@_1DI@EDMNLHMB@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAR?$AAe?$AAl?$AAe?$AAa?$AAs?$AAe?$AA?3?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?$AN?$AA?6?$AA?$AA@|
  035b0		 |$LN34@cppiChanne@2|
  035b0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  035b4		 |$M48412|

			 ENDP  ; |cppiChannelRelease|

	EXPORT	|??_C@_1DI@EFPAMACA@?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AA?$CF?$AAu?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@IMELJFPP@?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$DP?$AA?5?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@CGPHAMLC@?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AA?$CF?$AAu?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAp?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_13LPLPOHMK@?$AAR?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_13JKNELIBG@?$AAT?$AA?$AA@| [ DATA ] ; `string'

  000a0			 AREA	 |.pdata|, PDATA
|$T48461| DCD	|$LN46@cppiChanne@3|
	DCD	0x4000fd04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@EFPAMACA@?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AA?$CF?$AAu?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "%"
	DCB	0x0, "s", 0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, "!"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@IMELJFPP@?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$DP?$AA?5?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5@| DCB "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "g", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, " ", 0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "a", 0x0, "n"
	DCB	0x0, "n", 0x0, "e", 0x0, "l", 0x0, "?", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@CGPHAMLC@?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AA?$CF?$AAu?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAp?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5@| DCB "%"
	DCB	0x0, "s", 0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "e", 0x0, "a"
	DCB	0x0, "n", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "u", 0x0, "p"
	DCB	0x0, " ", 0x0, "a", 0x0, "f", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "a", 0x0, "b", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13LPLPOHMK@?$AAR?$AA?$AA@| DCB "R", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_13JKNELIBG@?$AAT?$AA?$AA@| DCB "T", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  035b4			 AREA	 |.text|, CODE, ARM

  035b4		 |cppiChannelProgram| PROC

; 1148 : {

  035b4		 |$LN46@cppiChanne@3|
  035b4	e1a0c00d	 mov         r12, sp
  035b8	e92d000f	 stmdb       sp!, {r0 - r3}
  035bc	e92d5000	 stmdb       sp!, {r12, lr}
  035c0	e24dd048	 sub         sp, sp, #0x48
  035c4		 |$M48458|

; 1149 :     struct cppi_channel *otgChannel = pChannel->pPrivateData;

  035c4	e59d3050	 ldr         r3, [sp, #0x50]
  035c8	e5933000	 ldr         r3, [r3]
  035cc	e58d3004	 str         r3, [sp, #4]

; 1150 :     struct cppi *pController = otgChannel->pController;

  035d0	e59d3004	 ldr         r3, [sp, #4]
  035d4	e2833008	 add         r3, r3, #8
  035d8	e5933000	 ldr         r3, [r3]
  035dc	e58d3008	 str         r3, [sp, #8]

; 1151 :     USBFNPDDCONTEXT *pPdd = pController->pPdd;

  035e0	e59d3008	 ldr         r3, [sp, #8]
  035e4	e2833018	 add         r3, r3, #0x18
  035e8	e5933000	 ldr         r3, [r3]
  035ec	e58d300c	 str         r3, [sp, #0xC]

; 1152 : 
; 1153 : #ifndef SHIP_BUILD
; 1154 :     BYTE chanNum = otgChannel->channelNo;

  035f0	e59d3004	 ldr         r3, [sp, #4]
  035f4	e2833018	 add         r3, r3, #0x18
  035f8	e5d33000	 ldrb        r3, [r3]
  035fc	e5cd3000	 strb        r3, [sp]

; 1155 : #endif
; 1156 : 
; 1157 :     PRINTMSG(/*ZONE_PDD_DMA*/0,
; 1158 :              (L"cppiChannelProgram: Ch %u, %s, len %d, pktsize %d, addr 0x%08x\r\n",
; 1159 :               chanNum, otgChannel->transmit ? L"TX" : L"RX",
; 1160 :               dwLength, packetSize, dmaAddr));
; 1161 : 
; 1162 :     LOCK_ENDPOINT(pPdd);

  03600	e59d300c	 ldr         r3, [sp, #0xC]
  03604	e2830e27	 add         r0, r3, #0x27, 28
  03608	eb000000	 bl          EnterCriticalSection

; 1163 : 
; 1164 :     switch (pChannel->bStatus)

  0360c	e59d3050	 ldr         r3, [sp, #0x50]
  03610	e2833004	 add         r3, r3, #4
  03614	e5933000	 ldr         r3, [r3]
  03618	e58d3014	 str         r3, [sp, #0x14]
  0361c	e59d3014	 ldr         r3, [sp, #0x14]
  03620	e3530004	 cmp         r3, #4
  03624	8a000095	 bhi         |$LN9@cppiChanne@3|
  03628	e59d2014	 ldr         r2, [sp, #0x14]
  0362c	e1a03102	 mov         r3, r2, lsl #2
  03630	e083300f	 add         r3, r3, pc
  03634	e5933004	 ldr         r3, [r3, #4]
  03638	e08ff003	 add         pc, pc, r3
  0363c		 |$LN38@cppiChanne@3|
  0363c		 |$LN37@cppiChanne@3|
  0363c		 |$LN39@cppiChanne@3|
  0363c	00000188	 DCD         0x188
  03640		 |$LN40@cppiChanne@3|
  03640	00000240	 DCD         0x240
  03644		 |$LN41@cppiChanne@3|
  03644	000000cc	 DCD         0xcc
  03648		 |$LN42@cppiChanne@3|
  03648	00000010	 DCD         0x10
  0364c		 |$LN43@cppiChanne@3|
  0364c	00000010	 DCD         0x10
  03650		 |$LN8@cppiChanne@3|

; 1165 :     {
; 1166 :     case MGC_DMA_STATUS_BUS_ABORT:
; 1167 :     case MGC_DMA_STATUS_CORE_ABORT:
; 1168 :         /* fault irq handler should have handled cleanup */
; 1169 :         PRINTMSG (ZONE_WARNING,
; 1170 :                   (L"%sX DMA %u not cleaned up after abort!\r\n",
; 1171 :                    otgChannel->transmit ? L"T" : L"R",
; 1172 :                    chanNum));

  03650	e59f3344	 ldr         r3, [pc, #0x344]
  03654	e5933440	 ldr         r3, [r3, #0x440]
  03658	e3130002	 tst         r3, #2
  0365c	0a000027	 beq         |$LN19@cppiChanne@3|
  03660	e59f3334	 ldr         r3, [pc, #0x334]
  03664	e5933440	 ldr         r3, [r3, #0x440]
  03668	e3130801	 tst         r3, #1, 16
  0366c	0a000010	 beq         |$LN17@cppiChanne@3|
  03670	e59d3004	 ldr         r3, [sp, #4]
  03674	e2833014	 add         r3, r3, #0x14
  03678	e5933000	 ldr         r3, [r3]
  0367c	e3530000	 cmp         r3, #0
  03680	0a000002	 beq         |$LN13@cppiChanne@3|
  03684	e59f330c	 ldr         r3, [pc, #0x30C]
  03688	e58d3018	 str         r3, [sp, #0x18]
  0368c	ea000001	 b           |$LN14@cppiChanne@3|
  03690		 |$LN13@cppiChanne@3|
  03690	e59f32fc	 ldr         r3, [pc, #0x2FC]
  03694	e58d3018	 str         r3, [sp, #0x18]
  03698		 |$LN14@cppiChanne@3|
  03698	e5dd2000	 ldrb        r2, [sp]
  0369c	e59d1018	 ldr         r1, [sp, #0x18]
  036a0	e59f02fc	 ldr         r0, [pc, #0x2FC]
  036a4	eb000000	 bl          CeLogMsg
  036a8	e3a03001	 mov         r3, #1
  036ac	e58d301c	 str         r3, [sp, #0x1C]
  036b0	ea00000f	 b           |$LN18@cppiChanne@3|
  036b4		 |$LN17@cppiChanne@3|
  036b4	e59d3004	 ldr         r3, [sp, #4]
  036b8	e2833014	 add         r3, r3, #0x14
  036bc	e5933000	 ldr         r3, [r3]
  036c0	e3530000	 cmp         r3, #0
  036c4	0a000002	 beq         |$LN15@cppiChanne@3|
  036c8	e59f32c8	 ldr         r3, [pc, #0x2C8]
  036cc	e58d3020	 str         r3, [sp, #0x20]
  036d0	ea000001	 b           |$LN16@cppiChanne@3|
  036d4		 |$LN15@cppiChanne@3|
  036d4	e59f32b8	 ldr         r3, [pc, #0x2B8]
  036d8	e58d3020	 str         r3, [sp, #0x20]
  036dc		 |$LN16@cppiChanne@3|
  036dc	e5dd2000	 ldrb        r2, [sp]
  036e0	e59d1020	 ldr         r1, [sp, #0x20]
  036e4	e59f02b8	 ldr         r0, [pc, #0x2B8]
  036e8	eb000000	 bl          NKDbgPrintfW
  036ec	e3a03000	 mov         r3, #0
  036f0	e58d301c	 str         r3, [sp, #0x1C]
  036f4		 |$LN18@cppiChanne@3|
  036f4	e3a03001	 mov         r3, #1
  036f8	e58d3024	 str         r3, [sp, #0x24]
  036fc	ea000001	 b           |$LN20@cppiChanne@3|
  03700		 |$LN19@cppiChanne@3|
  03700	e3a03000	 mov         r3, #0
  03704	e58d3024	 str         r3, [sp, #0x24]
  03708		 |$LN20@cppiChanne@3|

; 1173 :         break;

  03708	ea00005c	 b           |$LN9@cppiChanne@3|
  0370c		 |$LN7@cppiChanne@3|

; 1174 :     case MGC_DMA_STATUS_BUSY:
; 1175 :         PRINTMSG (ZONE_WARNING,
; 1176 :                   (L"program active channel? %sX DMA %u\r\n",
; 1177 :                    otgChannel->transmit ? L"T" : L"R",
; 1178 :                    chanNum)) ;

  0370c	e59f3288	 ldr         r3, [pc, #0x288]
  03710	e5933440	 ldr         r3, [r3, #0x440]
  03714	e3130002	 tst         r3, #2
  03718	0a000027	 beq         |$LN27@cppiChanne@3|
  0371c	e59f3278	 ldr         r3, [pc, #0x278]
  03720	e5933440	 ldr         r3, [r3, #0x440]
  03724	e3130801	 tst         r3, #1, 16
  03728	0a000010	 beq         |$LN25@cppiChanne@3|
  0372c	e59d3004	 ldr         r3, [sp, #4]
  03730	e2833014	 add         r3, r3, #0x14
  03734	e5933000	 ldr         r3, [r3]
  03738	e3530000	 cmp         r3, #0
  0373c	0a000002	 beq         |$LN21@cppiChanne@3|
  03740	e59f3250	 ldr         r3, [pc, #0x250]
  03744	e58d3028	 str         r3, [sp, #0x28]
  03748	ea000001	 b           |$LN22@cppiChanne@3|
  0374c		 |$LN21@cppiChanne@3|
  0374c	e59f3240	 ldr         r3, [pc, #0x240]
  03750	e58d3028	 str         r3, [sp, #0x28]
  03754		 |$LN22@cppiChanne@3|
  03754	e5dd2000	 ldrb        r2, [sp]
  03758	e59d1028	 ldr         r1, [sp, #0x28]
  0375c	e59f023c	 ldr         r0, [pc, #0x23C]
  03760	eb000000	 bl          CeLogMsg
  03764	e3a03001	 mov         r3, #1
  03768	e58d302c	 str         r3, [sp, #0x2C]
  0376c	ea00000f	 b           |$LN26@cppiChanne@3|
  03770		 |$LN25@cppiChanne@3|
  03770	e59d3004	 ldr         r3, [sp, #4]
  03774	e2833014	 add         r3, r3, #0x14
  03778	e5933000	 ldr         r3, [r3]
  0377c	e3530000	 cmp         r3, #0
  03780	0a000002	 beq         |$LN23@cppiChanne@3|
  03784	e59f320c	 ldr         r3, [pc, #0x20C]
  03788	e58d3030	 str         r3, [sp, #0x30]
  0378c	ea000001	 b           |$LN24@cppiChanne@3|
  03790		 |$LN23@cppiChanne@3|
  03790	e59f31fc	 ldr         r3, [pc, #0x1FC]
  03794	e58d3030	 str         r3, [sp, #0x30]
  03798		 |$LN24@cppiChanne@3|
  03798	e5dd2000	 ldrb        r2, [sp]
  0379c	e59d1030	 ldr         r1, [sp, #0x30]
  037a0	e59f01f8	 ldr         r0, [pc, #0x1F8]
  037a4	eb000000	 bl          NKDbgPrintfW
  037a8	e3a03000	 mov         r3, #0
  037ac	e58d302c	 str         r3, [sp, #0x2C]
  037b0		 |$LN26@cppiChanne@3|
  037b0	e3a03001	 mov         r3, #1
  037b4	e58d3034	 str         r3, [sp, #0x34]
  037b8	ea000001	 b           |$LN28@cppiChanne@3|
  037bc		 |$LN27@cppiChanne@3|
  037bc	e3a03000	 mov         r3, #0
  037c0	e58d3034	 str         r3, [sp, #0x34]
  037c4		 |$LN28@cppiChanne@3|

; 1179 :         break;

  037c4	ea00002d	 b           |$LN9@cppiChanne@3|
  037c8		 |$LN6@cppiChanne@3|

; 1180 :     case MGC_DMA_STATUS_UNKNOWN:
; 1181 :         PRINTMSG (ZONE_ERROR,
; 1182 :                   (L"%sX DMA %u not allocated!\r\n",
; 1183 :                    otgChannel->transmit ? L"T" : L"R",
; 1184 :                    chanNum)) ;

  037c8	e59f31cc	 ldr         r3, [pc, #0x1CC]
  037cc	e5933440	 ldr         r3, [r3, #0x440]
  037d0	e3130001	 tst         r3, #1
  037d4	0a000027	 beq         |$LN35@cppiChanne@3|
  037d8	e59f31bc	 ldr         r3, [pc, #0x1BC]
  037dc	e5933440	 ldr         r3, [r3, #0x440]
  037e0	e3130801	 tst         r3, #1, 16
  037e4	0a000010	 beq         |$LN33@cppiChanne@3|
  037e8	e59d3004	 ldr         r3, [sp, #4]
  037ec	e2833014	 add         r3, r3, #0x14
  037f0	e5933000	 ldr         r3, [r3]
  037f4	e3530000	 cmp         r3, #0
  037f8	0a000002	 beq         |$LN29@cppiChanne@3|
  037fc	e59f3194	 ldr         r3, [pc, #0x194]
  03800	e58d3038	 str         r3, [sp, #0x38]
  03804	ea000001	 b           |$LN30@cppiChanne@3|
  03808		 |$LN29@cppiChanne@3|
  03808	e59f3184	 ldr         r3, [pc, #0x184]
  0380c	e58d3038	 str         r3, [sp, #0x38]
  03810		 |$LN30@cppiChanne@3|
  03810	e5dd2000	 ldrb        r2, [sp]
  03814	e59d1038	 ldr         r1, [sp, #0x38]
  03818	e59f0170	 ldr         r0, [pc, #0x170]
  0381c	eb000000	 bl          CeLogMsg
  03820	e3a03001	 mov         r3, #1
  03824	e58d303c	 str         r3, [sp, #0x3C]
  03828	ea00000f	 b           |$LN34@cppiChanne@3|
  0382c		 |$LN33@cppiChanne@3|
  0382c	e59d3004	 ldr         r3, [sp, #4]
  03830	e2833014	 add         r3, r3, #0x14
  03834	e5933000	 ldr         r3, [r3]
  03838	e3530000	 cmp         r3, #0
  0383c	0a000002	 beq         |$LN31@cppiChanne@3|
  03840	e59f3150	 ldr         r3, [pc, #0x150]
  03844	e58d3040	 str         r3, [sp, #0x40]
  03848	ea000001	 b           |$LN32@cppiChanne@3|
  0384c		 |$LN31@cppiChanne@3|
  0384c	e59f3140	 ldr         r3, [pc, #0x140]
  03850	e58d3040	 str         r3, [sp, #0x40]
  03854		 |$LN32@cppiChanne@3|
  03854	e5dd2000	 ldrb        r2, [sp]
  03858	e59d1040	 ldr         r1, [sp, #0x40]
  0385c	e59f012c	 ldr         r0, [pc, #0x12C]
  03860	eb000000	 bl          NKDbgPrintfW
  03864	e3a03000	 mov         r3, #0
  03868	e58d303c	 str         r3, [sp, #0x3C]
  0386c		 |$LN34@cppiChanne@3|
  0386c	e3a03001	 mov         r3, #1
  03870	e58d3044	 str         r3, [sp, #0x44]
  03874	ea000001	 b           |$LN36@cppiChanne@3|
  03878		 |$LN35@cppiChanne@3|
  03878	e3a03000	 mov         r3, #0
  0387c	e58d3044	 str         r3, [sp, #0x44]
  03880		 |$LN36@cppiChanne@3|
  03880		 |$LN9@cppiChanne@3|

; 1185 : 
; 1186 :     case MGC_DMA_STATUS_FREE:
; 1187 :         break;
; 1188 :     }
; 1189 : 
; 1190 :     /* A channel that has been torn down must be re-enabled before re-use
; 1191 :     */
; 1192 :     if (otgChannel->transmit)

  03880	e59d3004	 ldr         r3, [sp, #4]
  03884	e2833014	 add         r3, r3, #0x14
  03888	e5933000	 ldr         r3, [r3]
  0388c	e3530000	 cmp         r3, #0
  03890	0a00000c	 beq         |$LN4@cppiChanne@3|

; 1193 :     {
; 1194 :         if ((otgChannel->pRegs->TXGCR & BIT31) == 0) 

  03894	e59d3004	 ldr         r3, [sp, #4]
  03898	e283300c	 add         r3, r3, #0xC
  0389c	e5933000	 ldr         r3, [r3]
  038a0	e5933000	 ldr         r3, [r3]
  038a4	e3130102	 tst         r3, #2, 2
  038a8	1a000005	 bne         |$LN3@cppiChanne@3|

; 1195 :         {
; 1196 :             otgChannel->pRegs->TXGCR =
; 1197 :                 BIT31 | /* Enable */ /*
; 1198 :                 qmgr |
; 1199 :                 qnum? */ USB_CPPI_TXCMPL_QNUM_FN;

  038ac	e59d3004	 ldr         r3, [sp, #4]
  038b0	e283300c	 add         r3, r3, #0xC
  038b4	e5932000	 ldr         r2, [r3]
  038b8	e3a03102	 mov         r3, #2, 2
  038bc	e3833040	 orr         r3, r3, #0x40
  038c0	e5823000	 str         r3, [r2]
  038c4		 |$LN3@cppiChanne@3|

; 1200 :         }
; 1201 :     }
; 1202 :     else

  038c4	ea00000c	 b           |$LN2@cppiChanne@3|
  038c8		 |$LN4@cppiChanne@3|

; 1203 :     {
; 1204 :         if ((otgChannel->pRegs->RXGCR & BIT31) == 0) 

  038c8	e59d3004	 ldr         r3, [sp, #4]
  038cc	e283300c	 add         r3, r3, #0xC
  038d0	e5933000	 ldr         r3, [r3]
  038d4	e2833008	 add         r3, r3, #8
  038d8	e5933000	 ldr         r3, [r3]
  038dc	e3130102	 tst         r3, #2, 2
  038e0	1a000005	 bne         |$LN1@cppiChanne@3|

; 1205 :         {
; 1206 :             otgChannel->pRegs->RXGCR =
; 1207 :                 BIT31 | /* Enable */
; 1208 :                 BIT24 | /* Retry on starvation */
; 1209 :                 BIT14 | /* Host descriptor type (default) */ /*
; 1210 :                 qmgr |
; 1211 :                 qnum? */ USB_CPPI_RXCMPL_QNUM_FN;

  038e4	e59d3004	 ldr         r3, [sp, #4]
  038e8	e283300c	 add         r3, r3, #0xC
  038ec	e5933000	 ldr         r3, [r3]
  038f0	e2832008	 add         r2, r3, #8
  038f4	e59f3090	 ldr         r3, [pc, #0x90]
  038f8	e5823000	 str         r3, [r2]
  038fc		 |$LN1@cppiChanne@3|
  038fc		 |$LN2@cppiChanne@3|

; 1212 :         }
; 1213 :     }
; 1214 : 
; 1215 :     pChannel->bStatus = MGC_DMA_STATUS_BUSY;

  038fc	e59d3050	 ldr         r3, [sp, #0x50]
  03900	e2832004	 add         r2, r3, #4
  03904	e3a03002	 mov         r3, #2
  03908	e5823000	 str         r3, [r2]

; 1216 : 
; 1217 :     /* set transfer parameters, then queue up its first segment */
; 1218 :     otgChannel->startAddr = dmaAddr;

  0390c	e59d3004	 ldr         r3, [sp, #4]
  03910	e2832020	 add         r2, r3, #0x20
  03914	e59d3058	 ldr         r3, [sp, #0x58]
  03918	e5823000	 str         r3, [r2]

; 1219 :     otgChannel->currOffset = 0;

  0391c	e59d3004	 ldr         r3, [sp, #4]
  03920	e283202c	 add         r2, r3, #0x2C
  03924	e3a03000	 mov         r3, #0
  03928	e5823000	 str         r3, [r2]

; 1220 :     otgChannel->pktSize = packetSize;

  0392c	e59d3004	 ldr         r3, [sp, #4]
  03930	e2832028	 add         r2, r3, #0x28
  03934	e1dd35b4	 ldrh        r3, [sp, #0x54]
  03938	e5823000	 str         r3, [r2]

; 1221 :     otgChannel->actualLen = 0;

  0393c	e59d3004	 ldr         r3, [sp, #4]
  03940	e2832030	 add         r2, r3, #0x30
  03944	e3a03000	 mov         r3, #0
  03948	e5823000	 str         r3, [r2]

; 1222 :     otgChannel->transferSize = dwLength;

  0394c	e59d3004	 ldr         r3, [sp, #4]
  03950	e2832024	 add         r2, r3, #0x24
  03954	e59d305c	 ldr         r3, [sp, #0x5C]
  03958	e5823000	 str         r3, [r2]

; 1223 : 
; 1224 :     cppiNextSegment(pPdd, otgChannel);

  0395c	e59d1004	 ldr         r1, [sp, #4]
  03960	e59d000c	 ldr         r0, [sp, #0xC]
  03964	eb000000	 bl          cppiNextSegment

; 1225 : 
; 1226 :     UNLOCK_ENDPOINT(pPdd);

  03968	e59d300c	 ldr         r3, [sp, #0xC]
  0396c	e2830e27	 add         r0, r3, #0x27, 28
  03970	eb000000	 bl          LeaveCriticalSection

; 1227 : 
; 1228 :     return TRUE;

  03974	e3a03001	 mov         r3, #1
  03978	e58d3010	 str         r3, [sp, #0x10]

; 1229 : }

  0397c	e59d0010	 ldr         r0, [sp, #0x10]
  03980	e28dd048	 add         sp, sp, #0x48
  03984	e89d6000	 ldmia       sp, {sp, lr}
  03988	e12fff1e	 bx          lr
  0398c		 |$LN47@cppiChanne@3|
  0398c		 |$LN48@cppiChanne@3|
  0398c	81004042	 DCD         0x81004042
  03990		 |$LN49@cppiChanne@3|
  03990	00000000	 DCD         |??_C@_1DI@EFPAMACA@?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AA?$CF?$AAu?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  03994		 |$LN50@cppiChanne@3|
  03994	00000000	 DCD         |??_C@_13LPLPOHMK@?$AAR?$AA?$AA@|
  03998		 |$LN51@cppiChanne@3|
  03998	00000000	 DCD         |??_C@_13JKNELIBG@?$AAT?$AA?$AA@|
  0399c		 |$LN52@cppiChanne@3|
  0399c	00000000	 DCD         |dpCurSettings|
  039a0		 |$LN53@cppiChanne@3|
  039a0	00000000	 DCD         |??_C@_1EK@IMELJFPP@?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA?5?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$DP?$AA?5?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5@|
  039a4		 |$LN54@cppiChanne@3|
  039a4	00000000	 DCD         |??_C@_1FC@CGPHAMLC@?$AA?$CF?$AAs?$AAX?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AA?$CF?$AAu?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAl?$AAe?$AAa?$AAn?$AAe?$AAd?$AA?5?$AAu?$AAp?$AA?5?$AAa?$AAf?$AAt?$AAe?$AAr?$AA?5@|
  039a8		 |$M48459|

			 ENDP  ; |cppiChannelProgram|

	EXPORT	|??_C@_1EM@BFIDNLHG@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EO@MHLFMFGL@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAM?$AAA?$AAC?$AA?5?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@DGGBGAHJ@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@IGOOHBHA@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5@| [ DATA ] ; `string'

  000a8			 AREA	 |.pdata|, PDATA
|$T48506| DCD	|$LN42@cppiChanne@4|
	DCD	0x40011304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@BFIDNLHG@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "(", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@MHLFMFGL@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAM?$AAA?$AAC?$AA?5?$AAs@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A", 0x0, "b"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, "C", 0x0, " "
	DCB	0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@DGGBGAHJ@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5?$AA?$CF@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A", 0x0, "b"
	DCB	0x0, "o", 0x0, "r", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%"
	DCB	0x0, "u", 0x0, " ", 0x0, "(", 0x0, "E", 0x0, "P", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, ")", 0x0, " ", 0x0, "n", 0x0, "o"
	DCB	0x0, "t", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o"
	DCB	0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@IGOOHBHA@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5@| DCB "+"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "A"
	DCB	0x0, "b", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "C", 0x0, "h", 0x0, " "
	DCB	0x0, "%", 0x0, "u", 0x0, " ", 0x0, "(", 0x0, "E", 0x0, "P"
	DCB	0x0, " ", 0x0, "%", 0x0, "u", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  039a8			 AREA	 |.text|, CODE, ARM

  039a8		 |cppiChannelAbort| PROC

; 1747 : {

  039a8		 |$LN42@cppiChanne@4|
  039a8	e1a0c00d	 mov         r12, sp
  039ac	e92d0001	 stmdb       sp!, {r0}
  039b0	e92d5000	 stmdb       sp!, {r12, lr}
  039b4	e24dd040	 sub         sp, sp, #0x40
  039b8		 |$M48503|

; 1748 :     int rc = 0;

  039b8	e3a03000	 mov         r3, #0
  039bc	e58d3000	 str         r3, [sp]

; 1749 :     struct cppi_channel *otgCh = (struct cppi_channel *)channel;

  039c0	e59d3048	 ldr         r3, [sp, #0x48]
  039c4	e58d3004	 str         r3, [sp, #4]

; 1750 : 
; 1751 :     DEBUGMSG(ZONE_INIT || ZONE_PDD_DMA,
; 1752 :         (L"+cppiChannelAbort: %s Ch %u (EP %u)\r\n",
; 1753 :         otgCh->transmit ? L"TX" : L"RX",
; 1754 :         otgCh->channelNo,
; 1755 :         otgCh->channelNo + 1));

  039c8	e59f340c	 ldr         r3, [pc, #0x40C]
  039cc	e5933440	 ldr         r3, [r3, #0x440]
  039d0	e3130004	 tst         r3, #4
  039d4	1a000006	 bne         |$LN9@cppiChanne@4|
  039d8	e59f33fc	 ldr         r3, [pc, #0x3FC]
  039dc	e5933440	 ldr         r3, [r3, #0x440]
  039e0	e3130902	 tst         r3, #2, 18
  039e4	1a000002	 bne         |$LN9@cppiChanne@4|
  039e8	e3a03000	 mov         r3, #0
  039ec	e58d300c	 str         r3, [sp, #0xC]
  039f0	ea000032	 b           |$LN16@cppiChanne@4|
  039f4		 |$LN9@cppiChanne@4|
  039f4	e59f33e0	 ldr         r3, [pc, #0x3E0]
  039f8	e5933440	 ldr         r3, [r3, #0x440]
  039fc	e3130801	 tst         r3, #1, 16
  03a00	0a000016	 beq         |$LN14@cppiChanne@4|
  03a04	e59d3004	 ldr         r3, [sp, #4]
  03a08	e2833014	 add         r3, r3, #0x14
  03a0c	e5933000	 ldr         r3, [r3]
  03a10	e3530000	 cmp         r3, #0
  03a14	0a000002	 beq         |$LN10@cppiChanne@4|
  03a18	e59f33b8	 ldr         r3, [pc, #0x3B8]
  03a1c	e58d3010	 str         r3, [sp, #0x10]
  03a20	ea000001	 b           |$LN11@cppiChanne@4|
  03a24		 |$LN10@cppiChanne@4|
  03a24	e59f33a8	 ldr         r3, [pc, #0x3A8]
  03a28	e58d3010	 str         r3, [sp, #0x10]
  03a2c		 |$LN11@cppiChanne@4|
  03a2c	e59d3004	 ldr         r3, [sp, #4]
  03a30	e2833018	 add         r3, r3, #0x18
  03a34	e5d33000	 ldrb        r3, [r3]
  03a38	e2833001	 add         r3, r3, #1
  03a3c	e59d2004	 ldr         r2, [sp, #4]
  03a40	e2822018	 add         r2, r2, #0x18
  03a44	e5d22000	 ldrb        r2, [r2]
  03a48	e59d1010	 ldr         r1, [sp, #0x10]
  03a4c	e59f039c	 ldr         r0, [pc, #0x39C]
  03a50	eb000000	 bl          CeLogMsg
  03a54	e3a03001	 mov         r3, #1
  03a58	e58d3014	 str         r3, [sp, #0x14]
  03a5c	ea000015	 b           |$LN15@cppiChanne@4|
  03a60		 |$LN14@cppiChanne@4|
  03a60	e59d3004	 ldr         r3, [sp, #4]
  03a64	e2833014	 add         r3, r3, #0x14
  03a68	e5933000	 ldr         r3, [r3]
  03a6c	e3530000	 cmp         r3, #0
  03a70	0a000002	 beq         |$LN12@cppiChanne@4|
  03a74	e59f335c	 ldr         r3, [pc, #0x35C]
  03a78	e58d3018	 str         r3, [sp, #0x18]
  03a7c	ea000001	 b           |$LN13@cppiChanne@4|
  03a80		 |$LN12@cppiChanne@4|
  03a80	e59f334c	 ldr         r3, [pc, #0x34C]
  03a84	e58d3018	 str         r3, [sp, #0x18]
  03a88		 |$LN13@cppiChanne@4|
  03a88	e59d3004	 ldr         r3, [sp, #4]
  03a8c	e2833018	 add         r3, r3, #0x18
  03a90	e5d33000	 ldrb        r3, [r3]
  03a94	e2833001	 add         r3, r3, #1
  03a98	e59d2004	 ldr         r2, [sp, #4]
  03a9c	e2822018	 add         r2, r2, #0x18
  03aa0	e5d22000	 ldrb        r2, [r2]
  03aa4	e59d1018	 ldr         r1, [sp, #0x18]
  03aa8	e59f0340	 ldr         r0, [pc, #0x340]
  03aac	eb000000	 bl          NKDbgPrintfW
  03ab0	e3a03000	 mov         r3, #0
  03ab4	e58d3014	 str         r3, [sp, #0x14]
  03ab8		 |$LN15@cppiChanne@4|
  03ab8	e3a03001	 mov         r3, #1
  03abc	e58d300c	 str         r3, [sp, #0xC]
  03ac0		 |$LN16@cppiChanne@4|

; 1756 : 
; 1757 :     switch (channel->bStatus)

  03ac0	e59d3048	 ldr         r3, [sp, #0x48]
  03ac4	e2833004	 add         r3, r3, #4
  03ac8	e5933000	 ldr         r3, [r3]
  03acc	e58d301c	 str         r3, [sp, #0x1C]
  03ad0	e59d301c	 ldr         r3, [sp, #0x1C]
  03ad4	e3530004	 cmp         r3, #4
  03ad8	8a00004b	 bhi         |$LN1@cppiChanne@4|
  03adc	e59d201c	 ldr         r2, [sp, #0x1C]
  03ae0	e1a03102	 mov         r3, r2, lsl #2
  03ae4	e083300f	 add         r3, r3, pc
  03ae8	e5933004	 ldr         r3, [r3, #4]
  03aec	e08ff003	 add         pc, pc, r3
  03af0		 |$LN34@cppiChanne@4|
  03af0		 |$LN33@cppiChanne@4|
  03af0		 |$LN35@cppiChanne@4|
  03af0	0000001c	 DCD         0x1c
  03af4		 |$LN36@cppiChanne@4|
  03af4	00000114	 DCD         0x114
  03af8		 |$LN37@cppiChanne@4|
  03af8	00000010	 DCD         0x10
  03afc		 |$LN38@cppiChanne@4|
  03afc	00000010	 DCD         0x10
  03b00		 |$LN39@cppiChanne@4|
  03b00	00000010	 DCD         0x10
  03b04		 |$LN4@cppiChanne@4|

; 1758 :     {
; 1759 :     case MGC_DMA_STATUS_BUS_ABORT:
; 1760 :     case MGC_DMA_STATUS_CORE_ABORT:
; 1761 :         // from RX or TX fault irq handler
; 1762 :     case MGC_DMA_STATUS_BUSY:
; 1763 :         // The hardware needs shutting down
; 1764 :         cppiChannelTeardown(otgCh);

  03b04	e59d0004	 ldr         r0, [sp, #4]
  03b08	eb000000	 bl          cppiChannelTeardown

; 1765 :         break;

  03b0c	ea000047	 b           |$LN5@cppiChanne@4|
  03b10		 |$LN3@cppiChanne@4|

; 1766 : 
; 1767 :     case MGC_DMA_STATUS_UNKNOWN:
; 1768 :         DEBUGMSG(ZONE_INIT || ZONE_PDD_DMA,
; 1769 :             (L"cppiChannelAbort: %s Ch %u (EP %u) not allocated\r\n",
; 1770 :             otgCh->transmit ? L"TX" : L"RX",
; 1771 :             otgCh->channelNo,
; 1772 :             otgCh->channelNo + 1));

  03b10	e59f32c4	 ldr         r3, [pc, #0x2C4]
  03b14	e5933440	 ldr         r3, [r3, #0x440]
  03b18	e3130004	 tst         r3, #4
  03b1c	1a000006	 bne         |$LN17@cppiChanne@4|
  03b20	e59f32b4	 ldr         r3, [pc, #0x2B4]
  03b24	e5933440	 ldr         r3, [r3, #0x440]
  03b28	e3130902	 tst         r3, #2, 18
  03b2c	1a000002	 bne         |$LN17@cppiChanne@4|
  03b30	e3a03000	 mov         r3, #0
  03b34	e58d3020	 str         r3, [sp, #0x20]
  03b38	ea000032	 b           |$LN24@cppiChanne@4|
  03b3c		 |$LN17@cppiChanne@4|
  03b3c	e59f3298	 ldr         r3, [pc, #0x298]
  03b40	e5933440	 ldr         r3, [r3, #0x440]
  03b44	e3130801	 tst         r3, #1, 16
  03b48	0a000016	 beq         |$LN22@cppiChanne@4|
  03b4c	e59d3004	 ldr         r3, [sp, #4]
  03b50	e2833014	 add         r3, r3, #0x14
  03b54	e5933000	 ldr         r3, [r3]
  03b58	e3530000	 cmp         r3, #0
  03b5c	0a000002	 beq         |$LN18@cppiChanne@4|
  03b60	e59f3270	 ldr         r3, [pc, #0x270]
  03b64	e58d3024	 str         r3, [sp, #0x24]
  03b68	ea000001	 b           |$LN19@cppiChanne@4|
  03b6c		 |$LN18@cppiChanne@4|
  03b6c	e59f3260	 ldr         r3, [pc, #0x260]
  03b70	e58d3024	 str         r3, [sp, #0x24]
  03b74		 |$LN19@cppiChanne@4|
  03b74	e59d3004	 ldr         r3, [sp, #4]
  03b78	e2833018	 add         r3, r3, #0x18
  03b7c	e5d33000	 ldrb        r3, [r3]
  03b80	e2833001	 add         r3, r3, #1
  03b84	e59d2004	 ldr         r2, [sp, #4]
  03b88	e2822018	 add         r2, r2, #0x18
  03b8c	e5d22000	 ldrb        r2, [r2]
  03b90	e59d1024	 ldr         r1, [sp, #0x24]
  03b94	e59f0250	 ldr         r0, [pc, #0x250]
  03b98	eb000000	 bl          CeLogMsg
  03b9c	e3a03001	 mov         r3, #1
  03ba0	e58d3028	 str         r3, [sp, #0x28]
  03ba4	ea000015	 b           |$LN23@cppiChanne@4|
  03ba8		 |$LN22@cppiChanne@4|
  03ba8	e59d3004	 ldr         r3, [sp, #4]
  03bac	e2833014	 add         r3, r3, #0x14
  03bb0	e5933000	 ldr         r3, [r3]
  03bb4	e3530000	 cmp         r3, #0
  03bb8	0a000002	 beq         |$LN20@cppiChanne@4|
  03bbc	e59f3214	 ldr         r3, [pc, #0x214]
  03bc0	e58d302c	 str         r3, [sp, #0x2C]
  03bc4	ea000001	 b           |$LN21@cppiChanne@4|
  03bc8		 |$LN20@cppiChanne@4|
  03bc8	e59f3204	 ldr         r3, [pc, #0x204]
  03bcc	e58d302c	 str         r3, [sp, #0x2C]
  03bd0		 |$LN21@cppiChanne@4|
  03bd0	e59d3004	 ldr         r3, [sp, #4]
  03bd4	e2833018	 add         r3, r3, #0x18
  03bd8	e5d33000	 ldrb        r3, [r3]
  03bdc	e2833001	 add         r3, r3, #1
  03be0	e59d2004	 ldr         r2, [sp, #4]
  03be4	e2822018	 add         r2, r2, #0x18
  03be8	e5d22000	 ldrb        r2, [r2]
  03bec	e59d102c	 ldr         r1, [sp, #0x2C]
  03bf0	e59f01f4	 ldr         r0, [pc, #0x1F4]
  03bf4	eb000000	 bl          NKDbgPrintfW
  03bf8	e3a03000	 mov         r3, #0
  03bfc	e58d3028	 str         r3, [sp, #0x28]
  03c00		 |$LN23@cppiChanne@4|
  03c00	e3a03001	 mov         r3, #1
  03c04	e58d3020	 str         r3, [sp, #0x20]
  03c08		 |$LN24@cppiChanne@4|
  03c08		 |$LN2@cppiChanne@4|

; 1773 : 
; 1774 :     case MGC_DMA_STATUS_FREE:
; 1775 :         break;

  03c08	ea000008	 b           |$LN5@cppiChanne@4|
  03c0c		 |$LN1@cppiChanne@4|

; 1776 : 
; 1777 :     default:
; 1778 :         ERRORMSG(TRUE, (L"cppiChannelAbort: Invalid DMAC state\r\n"));

  03c0c	e3a02c06	 mov         r2, #6, 24
  03c10	e38220f2	 orr         r2, r2, #0xF2
  03c14	e59f11cc	 ldr         r1, [pc, #0x1CC]
  03c18	e59f01c4	 ldr         r0, [pc, #0x1C4]
  03c1c	eb000000	 bl          NKDbgPrintfW
  03c20	e59f01b8	 ldr         r0, [pc, #0x1B8]
  03c24	eb000000	 bl          NKDbgPrintfW

; 1779 :         rc = -1;

  03c28	e3e03000	 mvn         r3, #0
  03c2c	e58d3000	 str         r3, [sp]
  03c30		 |$LN5@cppiChanne@4|

; 1780 :         break;
; 1781 :     }
; 1782 : 
; 1783 :     channel->bStatus = MGC_DMA_STATUS_FREE;

  03c30	e59d3048	 ldr         r3, [sp, #0x48]
  03c34	e2832004	 add         r2, r3, #4
  03c38	e3a03001	 mov         r3, #1
  03c3c	e5823000	 str         r3, [r2]

; 1784 :     otgCh->startAddr = 0;

  03c40	e59d3004	 ldr         r3, [sp, #4]
  03c44	e2832020	 add         r2, r3, #0x20
  03c48	e3a03000	 mov         r3, #0
  03c4c	e5823000	 str         r3, [r2]

; 1785 :     otgCh->currOffset = 0;

  03c50	e59d3004	 ldr         r3, [sp, #4]
  03c54	e283202c	 add         r2, r3, #0x2C
  03c58	e3a03000	 mov         r3, #0
  03c5c	e5823000	 str         r3, [r2]

; 1786 :     otgCh->transferSize = 0;

  03c60	e59d3004	 ldr         r3, [sp, #4]
  03c64	e2832024	 add         r2, r3, #0x24
  03c68	e3a03000	 mov         r3, #0
  03c6c	e5823000	 str         r3, [r2]

; 1787 :     otgCh->pktSize = 0;

  03c70	e59d3004	 ldr         r3, [sp, #4]
  03c74	e2832028	 add         r2, r3, #0x28
  03c78	e3a03000	 mov         r3, #0
  03c7c	e5823000	 str         r3, [r2]

; 1788 :     otgCh->nISOHDQueued      = 0;

  03c80	e59d3004	 ldr         r3, [sp, #4]
  03c84	e283203c	 add         r2, r3, #0x3C
  03c88	e3a03000	 mov         r3, #0
  03c8c	e5823000	 str         r3, [r2]

; 1789 :     otgCh->nISOHDPerTransfer = 0;

  03c90	e59d3004	 ldr         r3, [sp, #4]
  03c94	e2832034	 add         r2, r3, #0x34
  03c98	e3a03000	 mov         r3, #0
  03c9c	e5823000	 str         r3, [r2]

; 1790 :     otgCh->nISOHDForCallback = 0;

  03ca0	e59d3004	 ldr         r3, [sp, #4]
  03ca4	e2832038	 add         r2, r3, #0x38
  03ca8	e3a03000	 mov         r3, #0
  03cac	e5823000	 str         r3, [r2]

; 1791 :     otgCh->nISOHDLastIndex   = 0;

  03cb0	e59d3004	 ldr         r3, [sp, #4]
  03cb4	e2832040	 add         r2, r3, #0x40
  03cb8	e3a03000	 mov         r3, #0
  03cbc	e5823000	 str         r3, [r2]

; 1792 : 
; 1793 :     DEBUGMSG(ZONE_INIT || ZONE_PDD_DMA,
; 1794 :         (L"-cppiChannelAbort: %s Ch %u (EP %u)\r\n",
; 1795 :         otgCh->transmit ? L"TX" : L"RX",
; 1796 :         otgCh->channelNo,
; 1797 :         otgCh->channelNo + 1));

  03cc0	e59f3114	 ldr         r3, [pc, #0x114]
  03cc4	e5933440	 ldr         r3, [r3, #0x440]
  03cc8	e3130004	 tst         r3, #4
  03ccc	1a000006	 bne         |$LN25@cppiChanne@4|
  03cd0	e59f3104	 ldr         r3, [pc, #0x104]
  03cd4	e5933440	 ldr         r3, [r3, #0x440]
  03cd8	e3130902	 tst         r3, #2, 18
  03cdc	1a000002	 bne         |$LN25@cppiChanne@4|
  03ce0	e3a03000	 mov         r3, #0
  03ce4	e58d3030	 str         r3, [sp, #0x30]
  03ce8	ea000032	 b           |$LN32@cppiChanne@4|
  03cec		 |$LN25@cppiChanne@4|
  03cec	e59f30e8	 ldr         r3, [pc, #0xE8]
  03cf0	e5933440	 ldr         r3, [r3, #0x440]
  03cf4	e3130801	 tst         r3, #1, 16
  03cf8	0a000016	 beq         |$LN30@cppiChanne@4|
  03cfc	e59d3004	 ldr         r3, [sp, #4]
  03d00	e2833014	 add         r3, r3, #0x14
  03d04	e5933000	 ldr         r3, [r3]
  03d08	e3530000	 cmp         r3, #0
  03d0c	0a000002	 beq         |$LN26@cppiChanne@4|
  03d10	e59f30c0	 ldr         r3, [pc, #0xC0]
  03d14	e58d3034	 str         r3, [sp, #0x34]
  03d18	ea000001	 b           |$LN27@cppiChanne@4|
  03d1c		 |$LN26@cppiChanne@4|
  03d1c	e59f30b0	 ldr         r3, [pc, #0xB0]
  03d20	e58d3034	 str         r3, [sp, #0x34]
  03d24		 |$LN27@cppiChanne@4|
  03d24	e59d3004	 ldr         r3, [sp, #4]
  03d28	e2833018	 add         r3, r3, #0x18
  03d2c	e5d33000	 ldrb        r3, [r3]
  03d30	e2833001	 add         r3, r3, #1
  03d34	e59d2004	 ldr         r2, [sp, #4]
  03d38	e2822018	 add         r2, r2, #0x18
  03d3c	e5d22000	 ldrb        r2, [r2]
  03d40	e59d1034	 ldr         r1, [sp, #0x34]
  03d44	e59f0084	 ldr         r0, [pc, #0x84]
  03d48	eb000000	 bl          CeLogMsg
  03d4c	e3a03001	 mov         r3, #1
  03d50	e58d3038	 str         r3, [sp, #0x38]
  03d54	ea000015	 b           |$LN31@cppiChanne@4|
  03d58		 |$LN30@cppiChanne@4|
  03d58	e59d3004	 ldr         r3, [sp, #4]
  03d5c	e2833014	 add         r3, r3, #0x14
  03d60	e5933000	 ldr         r3, [r3]
  03d64	e3530000	 cmp         r3, #0
  03d68	0a000002	 beq         |$LN28@cppiChanne@4|
  03d6c	e59f3064	 ldr         r3, [pc, #0x64]
  03d70	e58d303c	 str         r3, [sp, #0x3C]
  03d74	ea000001	 b           |$LN29@cppiChanne@4|
  03d78		 |$LN28@cppiChanne@4|
  03d78	e59f3054	 ldr         r3, [pc, #0x54]
  03d7c	e58d303c	 str         r3, [sp, #0x3C]
  03d80		 |$LN29@cppiChanne@4|
  03d80	e59d3004	 ldr         r3, [sp, #4]
  03d84	e2833018	 add         r3, r3, #0x18
  03d88	e5d33000	 ldrb        r3, [r3]
  03d8c	e2833001	 add         r3, r3, #1
  03d90	e59d2004	 ldr         r2, [sp, #4]
  03d94	e2822018	 add         r2, r2, #0x18
  03d98	e5d22000	 ldrb        r2, [r2]
  03d9c	e59d103c	 ldr         r1, [sp, #0x3C]
  03da0	e59f0028	 ldr         r0, [pc, #0x28]
  03da4	eb000000	 bl          NKDbgPrintfW
  03da8	e3a03000	 mov         r3, #0
  03dac	e58d3038	 str         r3, [sp, #0x38]
  03db0		 |$LN31@cppiChanne@4|
  03db0	e3a03001	 mov         r3, #1
  03db4	e58d3030	 str         r3, [sp, #0x30]
  03db8		 |$LN32@cppiChanne@4|

; 1798 : 
; 1799 :     return rc;

  03db8	e59d3000	 ldr         r3, [sp]
  03dbc	e58d3008	 str         r3, [sp, #8]

; 1800 : }

  03dc0	e59d0008	 ldr         r0, [sp, #8]
  03dc4	e28dd040	 add         sp, sp, #0x40
  03dc8	e89d6000	 ldmia       sp, {sp, lr}
  03dcc	e12fff1e	 bx          lr
  03dd0		 |$LN43@cppiChanne@4|
  03dd0		 |$LN44@cppiChanne@4|
  03dd0	00000000	 DCD         |??_C@_1EM@BFIDNLHG@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5@|
  03dd4		 |$LN45@cppiChanne@4|
  03dd4	00000000	 DCD         |??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@|
  03dd8		 |$LN46@cppiChanne@4|
  03dd8	00000000	 DCD         |??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@|
  03ddc		 |$LN47@cppiChanne@4|
  03ddc	00000000	 DCD         |dpCurSettings|
  03de0		 |$LN48@cppiChanne@4|
  03de0	00000000	 DCD         |??_C@_1EO@MHLFMFGL@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAD?$AAM?$AAA?$AAC?$AA?5?$AAs@|
  03de4		 |$LN49@cppiChanne@4|
  03de4	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  03de8		 |$LN50@cppiChanne@4|
  03de8	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  03dec		 |$LN51@cppiChanne@4|
  03dec	00000000	 DCD         |??_C@_1GG@DGGBGAHJ@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5?$AA?$CF@|
  03df0		 |$LN52@cppiChanne@4|
  03df0	00000000	 DCD         |??_C@_1EM@IGOOHBHA@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAA?$AAb?$AAo?$AAr?$AAt?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE?$AAP?$AA?5@|
  03df4		 |$M48504|

			 ENDP  ; |cppiChannelAbort|

	EXPORT	|??_C@_1FM@NOFFKNDG@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@HGGLBLNE@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$CB?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KA@OEINGMKN@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@GLGPIBNF@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI@| [ DATA ] ; `string'
	IMPORT	|USBCDMA_KickCompletionCallback|
	IMPORT	|GetTickCount|
	IMPORT	|Sleep|

  000b0			 AREA	 |.pdata|, PDATA
|$T48547| DCD	|$LN43@cppiChanne@5|
	DCD	0x4001d304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@NOFFKNDG@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "T"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, "(", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@HGGLBLNE@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$CB?$AA?$AA@| DCB "F"
	DCB	0x0, "A", 0x0, "I", 0x0, "L", 0x0, "E", 0x0, "D", 0x0, "!"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@OEINGMKN@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE@| DCB "c"
	DCB	0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h", 0x0, "a"
	DCB	0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "T", 0x0, "e"
	DCB	0x0, "a", 0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " ", 0x0, "C"
	DCB	0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " ", 0x0, "("
	DCB	0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, ")"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "d", 0x0, "-", 0x0, "o", 0x0, "u", 0x0, "t"
	DCB	0x0, " ", 0x0, "(", 0x0, "l", 0x0, "o", 0x0, "s", 0x0, "t"
	DCB	0x0, " ", 0x0, "t", 0x0, "e", 0x0, "a", 0x0, "r", 0x0, "d"
	DCB	0x0, "o", 0x0, "w", 0x0, "n", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "s", 0x0, "c", 0x0, "r", 0x0, "i", 0x0, "p", 0x0, "t"
	DCB	0x0, "o", 0x0, "r", 0x0, ")", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@GLGPIBNF@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI@| DCB "+"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, "T"
	DCB	0x0, "e", 0x0, "a", 0x0, "r", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, "n", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "C", 0x0, "h", 0x0, " ", 0x0, "%", 0x0, "u", 0x0, " "
	DCB	0x0, "(", 0x0, "E", 0x0, "P", 0x0, " ", 0x0, "%", 0x0, "u"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03df4			 AREA	 |.text|, CODE, ARM

  03df4		 |cppiChannelTeardown| PROC

; 1576 : {

  03df4		 |$LN43@cppiChanne@5|
  03df4	e1a0c00d	 mov         r12, sp
  03df8	e92d0001	 stmdb       sp!, {r0}
  03dfc	e92d5000	 stmdb       sp!, {r12, lr}
  03e00	e24dd064	 sub         sp, sp, #0x64
  03e04		 |$M48544|

; 1577 :     struct cppi *cppi = channel->pController;

  03e04	e59d306c	 ldr         r3, [sp, #0x6C]
  03e08	e2833008	 add         r3, r3, #8
  03e0c	e5933000	 ldr         r3, [r3]
  03e10	e58d3004	 str         r3, [sp, #4]

; 1578 :     CSL_UsbRegs *pUsbRegs = cppi->pPdd->pUsbdRegs;

  03e14	e59d3004	 ldr         r3, [sp, #4]
  03e18	e2833018	 add         r3, r3, #0x18
  03e1c	e5933000	 ldr         r3, [r3]
  03e20	e283301c	 add         r3, r3, #0x1C
  03e24	e5933000	 ldr         r3, [r3]
  03e28	e58d300c	 str         r3, [sp, #0xC]

; 1579 : 
; 1580 :     BYTE   chanNum = channel->channelNo;

  03e2c	e59d306c	 ldr         r3, [sp, #0x6C]
  03e30	e2833018	 add         r3, r3, #0x18
  03e34	e5d33000	 ldrb        r3, [r3]
  03e38	e5cd3009	 strb        r3, [sp, #9]

; 1581 :     BYTE   epNum   = chanNum + 1;

  03e3c	e5dd3009	 ldrb        r3, [sp, #9]
  03e40	e2833001	 add         r3, r3, #1
  03e44	e20330ff	 and         r3, r3, #0xFF
  03e48	e5cd3008	 strb        r3, [sp, #8]

; 1582 :     DWORD  tc0     = 0;

  03e4c	e3a03000	 mov         r3, #0
  03e50	e58d3010	 str         r3, [sp, #0x10]

; 1583 :     UINT16 csr     = 0;

  03e54	e3a03000	 mov         r3, #0
  03e58	e1cd30ba	 strh        r3, [sp, #0xA]

; 1584 : 
; 1585 :     DEBUGMSG(ZONE_INIT || ZONE_PDD_DMA,
; 1586 :         (L"+cppiChannelTeardown: %s Ch %u (EP %u)\r\n",
; 1587 :         channel->transmit ? L"TX" : L"RX",
; 1588 :         chanNum,
; 1589 :         epNum));

  03e5c	e59f36cc	 ldr         r3, [pc, #0x6CC]
  03e60	e5933440	 ldr         r3, [r3, #0x440]
  03e64	e3130004	 tst         r3, #4
  03e68	1a000006	 bne         |$LN17@cppiChanne@5|
  03e6c	e59f36bc	 ldr         r3, [pc, #0x6BC]
  03e70	e5933440	 ldr         r3, [r3, #0x440]
  03e74	e3130902	 tst         r3, #2, 18
  03e78	1a000002	 bne         |$LN17@cppiChanne@5|
  03e7c	e3a03000	 mov         r3, #0
  03e80	e58d3020	 str         r3, [sp, #0x20]
  03e84	ea000028	 b           |$LN24@cppiChanne@5|
  03e88		 |$LN17@cppiChanne@5|
  03e88	e59f36a0	 ldr         r3, [pc, #0x6A0]
  03e8c	e5933440	 ldr         r3, [r3, #0x440]
  03e90	e3130801	 tst         r3, #1, 16
  03e94	0a000011	 beq         |$LN22@cppiChanne@5|
  03e98	e59d306c	 ldr         r3, [sp, #0x6C]
  03e9c	e2833014	 add         r3, r3, #0x14
  03ea0	e5933000	 ldr         r3, [r3]
  03ea4	e3530000	 cmp         r3, #0
  03ea8	0a000002	 beq         |$LN18@cppiChanne@5|
  03eac	e59f3670	 ldr         r3, [pc, #0x670]
  03eb0	e58d3024	 str         r3, [sp, #0x24]
  03eb4	ea000001	 b           |$LN19@cppiChanne@5|
  03eb8		 |$LN18@cppiChanne@5|
  03eb8	e59f3660	 ldr         r3, [pc, #0x660]
  03ebc	e58d3024	 str         r3, [sp, #0x24]
  03ec0		 |$LN19@cppiChanne@5|
  03ec0	e5dd3008	 ldrb        r3, [sp, #8]
  03ec4	e5dd2009	 ldrb        r2, [sp, #9]
  03ec8	e59d1024	 ldr         r1, [sp, #0x24]
  03ecc	e59f0668	 ldr         r0, [pc, #0x668]
  03ed0	eb000000	 bl          CeLogMsg
  03ed4	e3a03001	 mov         r3, #1
  03ed8	e58d3028	 str         r3, [sp, #0x28]
  03edc	ea000010	 b           |$LN23@cppiChanne@5|
  03ee0		 |$LN22@cppiChanne@5|
  03ee0	e59d306c	 ldr         r3, [sp, #0x6C]
  03ee4	e2833014	 add         r3, r3, #0x14
  03ee8	e5933000	 ldr         r3, [r3]
  03eec	e3530000	 cmp         r3, #0
  03ef0	0a000002	 beq         |$LN20@cppiChanne@5|
  03ef4	e59f3628	 ldr         r3, [pc, #0x628]
  03ef8	e58d302c	 str         r3, [sp, #0x2C]
  03efc	ea000001	 b           |$LN21@cppiChanne@5|
  03f00		 |$LN20@cppiChanne@5|
  03f00	e59f3618	 ldr         r3, [pc, #0x618]
  03f04	e58d302c	 str         r3, [sp, #0x2C]
  03f08		 |$LN21@cppiChanne@5|
  03f08	e5dd3008	 ldrb        r3, [sp, #8]
  03f0c	e5dd2009	 ldrb        r2, [sp, #9]
  03f10	e59d102c	 ldr         r1, [sp, #0x2C]
  03f14	e59f0620	 ldr         r0, [pc, #0x620]
  03f18	eb000000	 bl          NKDbgPrintfW
  03f1c	e3a03000	 mov         r3, #0
  03f20	e58d3028	 str         r3, [sp, #0x28]
  03f24		 |$LN23@cppiChanne@5|
  03f24	e3a03001	 mov         r3, #1
  03f28	e58d3020	 str         r3, [sp, #0x20]
  03f2c		 |$LN24@cppiChanne@5|

; 1590 : 
; 1591 :     /* We need to cancel interrupt pacing to improve our chances of oustanding transfers being
; 1592 :        detected on their completion queue
; 1593 :     */
; 1594 :     channel->isTeardownPending = TRUE;

  03f2c	e59d306c	 ldr         r3, [sp, #0x6C]
  03f30	e283201c	 add         r2, r3, #0x1C
  03f34	e3a03001	 mov         r3, #1
  03f38	e5823000	 str         r3, [r2]

; 1595 : 
; 1596 :     if (channel->transmit)

  03f3c	e59d306c	 ldr         r3, [sp, #0x6C]
  03f40	e2833014	 add         r3, r3, #0x14
  03f44	e5933000	 ldr         r3, [r3]
  03f48	e3530000	 cmp         r3, #0
  03f4c	0a000068	 beq         |$LN14@cppiChanne@5|

; 1597 :     {
; 1598 :         /* 1. Initiate channel tear-down */
; 1599 :         channel->pRegs->TXGCR =
; 1600 :             BIT31 | /* Enable */
; 1601 :             BIT30 | /* Tear-down */ /*
; 1602 :             qmgr |
; 1603 :             qnum */ USB_CPPI_TDCMPL_QNUM;

  03f50	e59d306c	 ldr         r3, [sp, #0x6C]
  03f54	e283300c	 add         r3, r3, #0xC
  03f58	e5932000	 ldr         r2, [r3]
  03f5c	e3a03103	 mov         r3, #3, 2
  03f60	e3833044	 orr         r3, r3, #0x44
  03f64	e5823000	 str         r3, [r2]

; 1604 : 
; 1605 :         /* 2. Set USB controller TD bit */
; 1606 :         pUsbRegs->TEARDOWN |= ((1 << epNum) << USB_OTG_TXTD_SHIFT);

  03f68	e59d300c	 ldr         r3, [sp, #0xC]
  03f6c	e283101c	 add         r1, r3, #0x1C
  03f70	e5dd3008	 ldrb        r3, [sp, #8]
  03f74	e1a02003	 mov         r2, r3
  03f78	e3a03001	 mov         r3, #1
  03f7c	e1a03213	 mov         r3, r3, lsl r2
  03f80	e1a02803	 mov         r2, r3, lsl #16
  03f84	e5913000	 ldr         r3, [r1]
  03f88	e1832002	 orr         r2, r3, r2
  03f8c	e59d300c	 ldr         r3, [sp, #0xC]
  03f90	e283301c	 add         r3, r3, #0x1C
  03f94	e5832000	 str         r2, [r3]

; 1607 : 
; 1608 :         /* 3. Wait for CDMA completion and retry (due to TX disconnect issue) */
; 1609 :         if (channel->isTeardownPending)

  03f98	e59d306c	 ldr         r3, [sp, #0x6C]
  03f9c	e283301c	 add         r3, r3, #0x1C
  03fa0	e5933000	 ldr         r3, [r3]
  03fa4	e3530000	 cmp         r3, #0
  03fa8	0a000001	 beq         |$LN13@cppiChanne@5|

; 1610 : 		{
; 1611 :             Sleep(10);

  03fac	e3a0000a	 mov         r0, #0xA
  03fb0	eb000000	 bl          Sleep
  03fb4		 |$LN13@cppiChanne@5|

; 1612 : 		}
; 1613 : 
; 1614 :         tc0 = GetTickCount();

  03fb4	eb000000	 bl          GetTickCount
  03fb8	e58d0030	 str         r0, [sp, #0x30]
  03fbc	e59d3030	 ldr         r3, [sp, #0x30]
  03fc0	e58d3010	 str         r3, [sp, #0x10]
  03fc4		 |$LN12@cppiChanne@5|

; 1615 :         while ((channel->isTeardownPending) && ((GetTickCount() - tc0) < 2000)) {

  03fc4	e59d306c	 ldr         r3, [sp, #0x6C]
  03fc8	e283301c	 add         r3, r3, #0x1C
  03fcc	e5933000	 ldr         r3, [r3]
  03fd0	e3530000	 cmp         r3, #0
  03fd4	0a000019	 beq         |$LN11@cppiChanne@5|
  03fd8	eb000000	 bl          GetTickCount
  03fdc	e58d0034	 str         r0, [sp, #0x34]
  03fe0	e59d2034	 ldr         r2, [sp, #0x34]
  03fe4	e59d3010	 ldr         r3, [sp, #0x10]
  03fe8	e0423003	 sub         r3, r2, r3
  03fec	e3530e7d	 cmp         r3, #0x7D, 28
  03ff0	2a000012	 bcs         |$LN11@cppiChanne@5|

; 1616 :             pUsbRegs->TEARDOWN |= ((1 << epNum) << USB_OTG_TXTD_SHIFT);

  03ff4	e59d300c	 ldr         r3, [sp, #0xC]
  03ff8	e283101c	 add         r1, r3, #0x1C
  03ffc	e5dd3008	 ldrb        r3, [sp, #8]
  04000	e1a02003	 mov         r2, r3
  04004	e3a03001	 mov         r3, #1
  04008	e1a03213	 mov         r3, r3, lsl r2
  0400c	e1a02803	 mov         r2, r3, lsl #16
  04010	e5913000	 ldr         r3, [r1]
  04014	e1832002	 orr         r2, r3, r2
  04018	e59d300c	 ldr         r3, [sp, #0xC]
  0401c	e283301c	 add         r3, r3, #0x1C
  04020	e5832000	 str         r2, [r3]

; 1617 :             USBCDMA_KickCompletionCallback(cppi->hUsbCdma);

  04024	e59d3004	 ldr         r3, [sp, #4]
  04028	e2833020	 add         r3, r3, #0x20
  0402c	e5930000	 ldr         r0, [r3]
  04030	eb000000	 bl          USBCDMA_KickCompletionCallback

; 1618 :             Sleep(10);

  04034	e3a0000a	 mov         r0, #0xA
  04038	eb000000	 bl          Sleep

; 1619 :         }

  0403c	eaffffe0	 b           |$LN12@cppiChanne@5|
  04040		 |$LN11@cppiChanne@5|

; 1620 : 
; 1621 :         /* 4. Set USB controller TD bit */
; 1622 :         pUsbRegs->TEARDOWN |= ((1 << epNum) << USB_OTG_TXTD_SHIFT);

  04040	e59d300c	 ldr         r3, [sp, #0xC]
  04044	e283101c	 add         r1, r3, #0x1C
  04048	e5dd3008	 ldrb        r3, [sp, #8]
  0404c	e1a02003	 mov         r2, r3
  04050	e3a03001	 mov         r3, #1
  04054	e1a03213	 mov         r3, r3, lsl r2
  04058	e1a02803	 mov         r2, r3, lsl #16
  0405c	e5913000	 ldr         r3, [r1]
  04060	e1832002	 orr         r2, r3, r2
  04064	e59d300c	 ldr         r3, [sp, #0xC]
  04068	e283301c	 add         r3, r3, #0x1C
  0406c	e5832000	 str         r2, [r3]

; 1623 : 
; 1624 :         /* 5. Flush the EP's FIFO */
; 1625 :         csr = pUsbRegs->EPCSR[chanNum + 1].TXCSR;

  04070	e59d300c	 ldr         r3, [sp, #0xC]
  04074	e2831c05	 add         r1, r3, #5, 24
  04078	e5dd3009	 ldrb        r3, [sp, #9]
  0407c	e2832001	 add         r2, r3, #1
  04080	e3a03010	 mov         r3, #0x10
  04084	e0030392	 mul         r3, r2, r3
  04088	e0813003	 add         r3, r1, r3
  0408c	e2833002	 add         r3, r3, #2
  04090	e1d330b0	 ldrh        r3, [r3]
  04094	e1cd30ba	 strh        r3, [sp, #0xA]

; 1626 :         csr &= ~MGC_M_TXCSR_DMAENAB;

  04098	e1dd30ba	 ldrh        r3, [sp, #0xA]
  0409c	e1a02003	 mov         r2, r3
  040a0	e3e03a01	 mvn         r3, #1, 20
  040a4	e0023003	 and         r3, r2, r3
  040a8	e1a03803	 mov         r3, r3, lsl #16
  040ac	e1a03823	 mov         r3, r3, lsr #16
  040b0	e1cd30ba	 strh        r3, [sp, #0xA]

; 1627 :         csr |=  MGC_M_TXCSR_FLUSHFIFO;

  040b4	e1dd30ba	 ldrh        r3, [sp, #0xA]
  040b8	e3833008	 orr         r3, r3, #8
  040bc	e1a03803	 mov         r3, r3, lsl #16
  040c0	e1a03823	 mov         r3, r3, lsr #16
  040c4	e1cd30ba	 strh        r3, [sp, #0xA]

; 1628 :         pUsbRegs->EPCSR[chanNum + 1].TXCSR = csr;

  040c8	e59d300c	 ldr         r3, [sp, #0xC]
  040cc	e2831c05	 add         r1, r3, #5, 24
  040d0	e5dd3009	 ldrb        r3, [sp, #9]
  040d4	e2832001	 add         r2, r3, #1
  040d8	e3a03010	 mov         r3, #0x10
  040dc	e0030392	 mul         r3, r2, r3
  040e0	e0813003	 add         r3, r1, r3
  040e4	e2832002	 add         r2, r3, #2
  040e8	e1dd30ba	 ldrh        r3, [sp, #0xA]
  040ec	e1c230b0	 strh        r3, [r2]

; 1629 :     }
; 1630 :     else

  040f0	ea00008a	 b           |$LN10@cppiChanne@5|
  040f4		 |$LN14@cppiChanne@5|

; 1631 :     {
; 1632 :         /* 0. Enable Scheduler during teardown */
; 1633 :         USBCDMA_ConfigureScheduleRx(chanNum, TRUE);

  040f4	e3a01001	 mov         r1, #1
  040f8	e5dd0009	 ldrb        r0, [sp, #9]
  040fc	eb000000	 bl          USBCDMA_ConfigureScheduleRx

; 1634 : 
; 1635 :         /* 1. Flush the EP's FIFO */
; 1636 :         csr = pUsbRegs->EPCSR[chanNum + 1].RXCSR;

  04100	e59d300c	 ldr         r3, [sp, #0xC]
  04104	e2831c05	 add         r1, r3, #5, 24
  04108	e5dd3009	 ldrb        r3, [sp, #9]
  0410c	e2832001	 add         r2, r3, #1
  04110	e3a03010	 mov         r3, #0x10
  04114	e0030392	 mul         r3, r2, r3
  04118	e0813003	 add         r3, r1, r3
  0411c	e2833006	 add         r3, r3, #6
  04120	e1d330b0	 ldrh        r3, [r3]
  04124	e1cd30ba	 strh        r3, [sp, #0xA]

; 1637 :         csr |= (MGC_M_RXCSR_FLUSHFIFO | MGC_M_RXCSR_P_WZC_BITS);

  04128	e1dd30ba	 ldrh        r3, [sp, #0xA]
  0412c	e3833055	 orr         r3, r3, #0x55
  04130	e1a03803	 mov         r3, r3, lsl #16
  04134	e1a03823	 mov         r3, r3, lsr #16
  04138	e1cd30ba	 strh        r3, [sp, #0xA]

; 1638 :         pUsbRegs->EPCSR[chanNum + 1].PERI_RXCSR = csr;

  0413c	e59d300c	 ldr         r3, [sp, #0xC]
  04140	e2831c05	 add         r1, r3, #5, 24
  04144	e5dd3009	 ldrb        r3, [sp, #9]
  04148	e2832001	 add         r2, r3, #1
  0414c	e3a03010	 mov         r3, #0x10
  04150	e0030392	 mul         r3, r2, r3
  04154	e0813003	 add         r3, r1, r3
  04158	e2832006	 add         r2, r3, #6
  0415c	e1dd30ba	 ldrh        r3, [sp, #0xA]
  04160	e1c230b0	 strh        r3, [r2]

; 1639 : 
; 1640 :         /* 2. Set USB controller TD bit */
; 1641 :         pUsbRegs->TEARDOWN |= ((1 << epNum) << USB_OTG_RXTD_SHIFT);

  04164	e59d300c	 ldr         r3, [sp, #0xC]
  04168	e283101c	 add         r1, r3, #0x1C
  0416c	e5dd3008	 ldrb        r3, [sp, #8]
  04170	e1a02003	 mov         r2, r3
  04174	e3a03001	 mov         r3, #1
  04178	e1a02213	 mov         r2, r3, lsl r2
  0417c	e5913000	 ldr         r3, [r1]
  04180	e1832002	 orr         r2, r3, r2
  04184	e59d300c	 ldr         r3, [sp, #0xC]
  04188	e283301c	 add         r3, r3, #0x1C
  0418c	e5832000	 str         r2, [r3]

; 1642 : 
; 1643 :         /* 3. Initiate channel tear-down */
; 1644 :         channel->pRegs->RXGCR =
; 1645 :             BIT31 | /* Enable */
; 1646 :             BIT30 | /* Tear-down */
; 1647 :             BIT24 | /* Retry on starvation */
; 1648 :             BIT14 | /* Host descriptor type (default) */ /*
; 1649 :             qmgr |
; 1650 :             qnum */ USB_CPPI_TDCMPL_QNUM;

  04190	e59d306c	 ldr         r3, [sp, #0x6C]
  04194	e283300c	 add         r3, r3, #0xC
  04198	e5933000	 ldr         r3, [r3]
  0419c	e2832008	 add         r2, r3, #8
  041a0	e59f3390	 ldr         r3, [pc, #0x390]
  041a4	e5823000	 str         r3, [r2]

; 1651 : 
; 1652 :         /* 4. Wait for CDMA completion and retry (due to TX disconnect issue) */
; 1653 :         if (channel->isTeardownPending)

  041a8	e59d306c	 ldr         r3, [sp, #0x6C]
  041ac	e283301c	 add         r3, r3, #0x1C
  041b0	e5933000	 ldr         r3, [r3]
  041b4	e3530000	 cmp         r3, #0
  041b8	0a000001	 beq         |$LN9@cppiChanne@5|

; 1654 : 		{
; 1655 :             Sleep(10);

  041bc	e3a0000a	 mov         r0, #0xA
  041c0	eb000000	 bl          Sleep
  041c4		 |$LN9@cppiChanne@5|

; 1656 : 		}
; 1657 : 
; 1658 :         tc0 = GetTickCount();

  041c4	eb000000	 bl          GetTickCount
  041c8	e58d0038	 str         r0, [sp, #0x38]
  041cc	e59d3038	 ldr         r3, [sp, #0x38]
  041d0	e58d3010	 str         r3, [sp, #0x10]
  041d4		 |$LN8@cppiChanne@5|

; 1659 :         while ((channel->isTeardownPending) && ((GetTickCount() - tc0) < 2000)) {

  041d4	e59d306c	 ldr         r3, [sp, #0x6C]
  041d8	e283301c	 add         r3, r3, #0x1C
  041dc	e5933000	 ldr         r3, [r3]
  041e0	e3530000	 cmp         r3, #0
  041e4	0a000018	 beq         |$LN7@cppiChanne@5|
  041e8	eb000000	 bl          GetTickCount
  041ec	e58d003c	 str         r0, [sp, #0x3C]
  041f0	e59d203c	 ldr         r2, [sp, #0x3C]
  041f4	e59d3010	 ldr         r3, [sp, #0x10]
  041f8	e0423003	 sub         r3, r2, r3
  041fc	e3530e7d	 cmp         r3, #0x7D, 28
  04200	2a000011	 bcs         |$LN7@cppiChanne@5|

; 1660 :             pUsbRegs->TEARDOWN |= ((1 << epNum) << USB_OTG_RXTD_SHIFT);

  04204	e59d300c	 ldr         r3, [sp, #0xC]
  04208	e283101c	 add         r1, r3, #0x1C
  0420c	e5dd3008	 ldrb        r3, [sp, #8]
  04210	e1a02003	 mov         r2, r3
  04214	e3a03001	 mov         r3, #1
  04218	e1a02213	 mov         r2, r3, lsl r2
  0421c	e5913000	 ldr         r3, [r1]
  04220	e1832002	 orr         r2, r3, r2
  04224	e59d300c	 ldr         r3, [sp, #0xC]
  04228	e283301c	 add         r3, r3, #0x1C
  0422c	e5832000	 str         r2, [r3]

; 1661 :             USBCDMA_KickCompletionCallback(cppi->hUsbCdma);

  04230	e59d3004	 ldr         r3, [sp, #4]
  04234	e2833020	 add         r3, r3, #0x20
  04238	e5930000	 ldr         r0, [r3]
  0423c	eb000000	 bl          USBCDMA_KickCompletionCallback

; 1662 :             Sleep(10);

  04240	e3a0000a	 mov         r0, #0xA
  04244	eb000000	 bl          Sleep

; 1663 :         }

  04248	eaffffe1	 b           |$LN8@cppiChanne@5|
  0424c		 |$LN7@cppiChanne@5|

; 1664 : 
; 1665 :         /* 5. Set USB controller TD bit */
; 1666 :         pUsbRegs->TEARDOWN |= ((1 << epNum) << USB_OTG_RXTD_SHIFT);

  0424c	e59d300c	 ldr         r3, [sp, #0xC]
  04250	e283101c	 add         r1, r3, #0x1C
  04254	e5dd3008	 ldrb        r3, [sp, #8]
  04258	e1a02003	 mov         r2, r3
  0425c	e3a03001	 mov         r3, #1
  04260	e1a02213	 mov         r2, r3, lsl r2
  04264	e5913000	 ldr         r3, [r1]
  04268	e1832002	 orr         r2, r3, r2
  0426c	e59d300c	 ldr         r3, [sp, #0xC]
  04270	e283301c	 add         r3, r3, #0x1C
  04274	e5832000	 str         r2, [r3]

; 1667 : 
; 1668 :         /* 6. Flush the EP's FIFO */
; 1669 :         csr = pUsbRegs->EPCSR[chanNum + 1].RXCSR;

  04278	e59d300c	 ldr         r3, [sp, #0xC]
  0427c	e2831c05	 add         r1, r3, #5, 24
  04280	e5dd3009	 ldrb        r3, [sp, #9]
  04284	e2832001	 add         r2, r3, #1
  04288	e3a03010	 mov         r3, #0x10
  0428c	e0030392	 mul         r3, r2, r3
  04290	e0813003	 add         r3, r1, r3
  04294	e2833006	 add         r3, r3, #6
  04298	e1d330b0	 ldrh        r3, [r3]
  0429c	e1cd30ba	 strh        r3, [sp, #0xA]

; 1670 :         csr &= ~MGC_M_RXCSR_DMAENAB;

  042a0	e1dd30ba	 ldrh        r3, [sp, #0xA]
  042a4	e1a02003	 mov         r2, r3
  042a8	e3e03a02	 mvn         r3, #2, 20
  042ac	e0023003	 and         r3, r2, r3
  042b0	e1a03803	 mov         r3, r3, lsl #16
  042b4	e1a03823	 mov         r3, r3, lsr #16
  042b8	e1cd30ba	 strh        r3, [sp, #0xA]

; 1671 :         csr |= (MGC_M_RXCSR_FLUSHFIFO | MGC_M_RXCSR_P_WZC_BITS);

  042bc	e1dd30ba	 ldrh        r3, [sp, #0xA]
  042c0	e3833055	 orr         r3, r3, #0x55
  042c4	e1a03803	 mov         r3, r3, lsl #16
  042c8	e1a03823	 mov         r3, r3, lsr #16
  042cc	e1cd30ba	 strh        r3, [sp, #0xA]

; 1672 :         pUsbRegs->EPCSR[chanNum + 1].RXCSR = csr;

  042d0	e59d300c	 ldr         r3, [sp, #0xC]
  042d4	e2831c05	 add         r1, r3, #5, 24
  042d8	e5dd3009	 ldrb        r3, [sp, #9]
  042dc	e2832001	 add         r2, r3, #1
  042e0	e3a03010	 mov         r3, #0x10
  042e4	e0030392	 mul         r3, r2, r3
  042e8	e0813003	 add         r3, r1, r3
  042ec	e2832006	 add         r2, r3, #6
  042f0	e1dd30ba	 ldrh        r3, [sp, #0xA]
  042f4	e1c230b0	 strh        r3, [r2]

; 1673 : 
; 1674 :         /* quiesce: wait for current dma to finish (if not cleanup)
; 1675 :          * we can't use bit zero of stateram->sopDescPtr since that
; 1676 :          * refers to an entire "DMA packet" not just emptying the
; 1677 :          * current fifo; most segments need multiple usb packets.
; 1678 :          */
; 1679 :         if (channel->Channel.bStatus == MGC_DMA_STATUS_BUSY)

  042f8	e59d306c	 ldr         r3, [sp, #0x6C]
  042fc	e2833004	 add         r3, r3, #4
  04300	e5933000	 ldr         r3, [r3]
  04304	e3530002	 cmp         r3, #2
  04308	1a000001	 bne         |$LN6@cppiChanne@5|

; 1680 : 		{
; 1681 :             Sleep(50);

  0430c	e3a00032	 mov         r0, #0x32
  04310	eb000000	 bl          Sleep
  04314		 |$LN6@cppiChanne@5|

; 1682 : 		}
; 1683 : 
; 1684 :         /* 7. Disable Scheduler during teardown */
; 1685 :         USBCDMA_ConfigureScheduleRx(chanNum, FALSE);

  04314	e3a01000	 mov         r1, #0
  04318	e5dd0009	 ldrb        r0, [sp, #9]
  0431c	eb000000	 bl          USBCDMA_ConfigureScheduleRx
  04320		 |$LN10@cppiChanne@5|

; 1686 :     }
; 1687 : 
; 1688 :     if (channel->isTeardownPending) 

  04320	e59d306c	 ldr         r3, [sp, #0x6C]
  04324	e283301c	 add         r3, r3, #0x1C
  04328	e5933000	 ldr         r3, [r3]
  0432c	e3530000	 cmp         r3, #0
  04330	0a000017	 beq         |$LN5@cppiChanne@5|

; 1689 : 	{
; 1690 :         RETAILMSG(ZONE_WARNING,
; 1691 :             (L"cppiChannelTeardown: %s Ch %u (EP %u) - Timed-out (lost teardown descriptor)!\r\n",
; 1692 :             channel->transmit ? L"TX" : L"RX",
; 1693 :             chanNum,
; 1694 :             epNum));

  04334	e59f31f4	 ldr         r3, [pc, #0x1F4]
  04338	e5933440	 ldr         r3, [r3, #0x440]
  0433c	e3130002	 tst         r3, #2
  04340	0a000011	 beq         |$LN27@cppiChanne@5|
  04344	e59d306c	 ldr         r3, [sp, #0x6C]
  04348	e2833014	 add         r3, r3, #0x14
  0434c	e5933000	 ldr         r3, [r3]
  04350	e3530000	 cmp         r3, #0
  04354	0a000002	 beq         |$LN25@cppiChanne@5|
  04358	e59f31c4	 ldr         r3, [pc, #0x1C4]
  0435c	e58d3040	 str         r3, [sp, #0x40]
  04360	ea000001	 b           |$LN26@cppiChanne@5|
  04364		 |$LN25@cppiChanne@5|
  04364	e59f31b4	 ldr         r3, [pc, #0x1B4]
  04368	e58d3040	 str         r3, [sp, #0x40]
  0436c		 |$LN26@cppiChanne@5|
  0436c	e5dd3008	 ldrb        r3, [sp, #8]
  04370	e5dd2009	 ldrb        r2, [sp, #9]
  04374	e59d1040	 ldr         r1, [sp, #0x40]
  04378	e59f01b4	 ldr         r0, [pc, #0x1B4]
  0437c	eb000000	 bl          NKDbgPrintfW
  04380	e3a03001	 mov         r3, #1
  04384	e58d3044	 str         r3, [sp, #0x44]
  04388	ea000001	 b           |$LN28@cppiChanne@5|
  0438c		 |$LN27@cppiChanne@5|
  0438c	e3a03000	 mov         r3, #0
  04390	e58d3044	 str         r3, [sp, #0x44]
  04394		 |$LN28@cppiChanne@5|
  04394		 |$LN5@cppiChanne@5|
  04394		 |$LN4@cppiChanne@5|

; 1695 :     }
; 1696 : 
; 1697 :     /* Pop all aborted BDs from the channel's queue and free them */
; 1698 :     for(;;) 
; 1699 : 	{
; 1700 :         HOST_DESCRIPTOR *hd = cppiQueuePop(cppi->pRegs, channel->queueNo);

  04394	e59d306c	 ldr         r3, [sp, #0x6C]
  04398	e2833019	 add         r3, r3, #0x19
  0439c	e5d31000	 ldrb        r1, [r3]
  043a0	e59d3004	 ldr         r3, [sp, #4]
  043a4	e283301c	 add         r3, r3, #0x1C
  043a8	e5930000	 ldr         r0, [r3]
  043ac	eb000000	 bl          cppiQueuePop
  043b0	e58d0048	 str         r0, [sp, #0x48]
  043b4	e59d3048	 ldr         r3, [sp, #0x48]
  043b8	e58d3014	 str         r3, [sp, #0x14]

; 1701 :         if (hd != NULL) 

  043bc	e59d3014	 ldr         r3, [sp, #0x14]
  043c0	e3530000	 cmp         r3, #0
  043c4	0a000003	 beq         |$LN2@cppiChanne@5|

; 1702 : 		{
; 1703 :             cppiHdFree(cppi, hd);

  043c8	e59d1014	 ldr         r1, [sp, #0x14]
  043cc	e59d0004	 ldr         r0, [sp, #4]
  043d0	eb000000	 bl          cppiHdFree

; 1704 :             DEBUGMSG(/*ZONE_WARNING*/0,
; 1705 :                 (L"cppiChannelTeardown: Recovered %s BD on queue %u after tear-down\r\n",
; 1706 :                 channel->transmit ? L"TX" : L"RX",
; 1707 :                 channel->queueNo));
; 1708 :         }
; 1709 :         else

  043d4	ea000000	 b           |$LN1@cppiChanne@5|
  043d8		 |$LN2@cppiChanne@5|

; 1710 : 		{
; 1711 :             break;

  043d8	ea000000	 b           |$LN3@cppiChanne@5|
  043dc		 |$LN1@cppiChanne@5|

; 1712 : 		}
; 1713 :     }

  043dc	eaffffec	 b           |$LN4@cppiChanne@5|
  043e0		 |$LN3@cppiChanne@5|

; 1714 : 
; 1715 :     DEBUGMSG(ZONE_INIT || ZONE_PDD_DMA,
; 1716 :         (L"-cppiChannelTeardown: %s Ch %u (EP %u) - %s\r\n",
; 1717 :         channel->transmit ? L"TX" : L"RX",
; 1718 :         chanNum,
; 1719 :         epNum,
; 1720 :         channel->isTeardownPending ?
; 1721 :             L"FAILED!" :
; 1722 :             L"SUCCEEDED"));

  043e0	e59f3148	 ldr         r3, [pc, #0x148]
  043e4	e5933440	 ldr         r3, [r3, #0x440]
  043e8	e3130004	 tst         r3, #4
  043ec	1a000006	 bne         |$LN29@cppiChanne@5|
  043f0	e59f3138	 ldr         r3, [pc, #0x138]
  043f4	e5933440	 ldr         r3, [r3, #0x440]
  043f8	e3130902	 tst         r3, #2, 18
  043fc	1a000002	 bne         |$LN29@cppiChanne@5|
  04400	e3a03000	 mov         r3, #0
  04404	e58d304c	 str         r3, [sp, #0x4C]
  04408	ea000040	 b           |$LN40@cppiChanne@5|
  0440c		 |$LN29@cppiChanne@5|
  0440c	e59f311c	 ldr         r3, [pc, #0x11C]
  04410	e5933440	 ldr         r3, [r3, #0x440]
  04414	e3130801	 tst         r3, #1, 16
  04418	0a00001d	 beq         |$LN38@cppiChanne@5|
  0441c	e59d306c	 ldr         r3, [sp, #0x6C]
  04420	e283301c	 add         r3, r3, #0x1C
  04424	e5933000	 ldr         r3, [r3]
  04428	e3530000	 cmp         r3, #0
  0442c	0a000002	 beq         |$LN30@cppiChanne@5|
  04430	e59f30f4	 ldr         r3, [pc, #0xF4]
  04434	e58d3050	 str         r3, [sp, #0x50]
  04438	ea000001	 b           |$LN31@cppiChanne@5|
  0443c		 |$LN30@cppiChanne@5|
  0443c	e59f30e4	 ldr         r3, [pc, #0xE4]
  04440	e58d3050	 str         r3, [sp, #0x50]
  04444		 |$LN31@cppiChanne@5|
  04444	e59d306c	 ldr         r3, [sp, #0x6C]
  04448	e2833014	 add         r3, r3, #0x14
  0444c	e5933000	 ldr         r3, [r3]
  04450	e3530000	 cmp         r3, #0
  04454	0a000002	 beq         |$LN32@cppiChanne@5|
  04458	e59f30c4	 ldr         r3, [pc, #0xC4]
  0445c	e58d3054	 str         r3, [sp, #0x54]
  04460	ea000001	 b           |$LN33@cppiChanne@5|
  04464		 |$LN32@cppiChanne@5|
  04464	e59f30b4	 ldr         r3, [pc, #0xB4]
  04468	e58d3054	 str         r3, [sp, #0x54]
  0446c		 |$LN33@cppiChanne@5|
  0446c	e59d3050	 ldr         r3, [sp, #0x50]
  04470	e58d3000	 str         r3, [sp]
  04474	e5dd3008	 ldrb        r3, [sp, #8]
  04478	e5dd2009	 ldrb        r2, [sp, #9]
  0447c	e59d1054	 ldr         r1, [sp, #0x54]
  04480	e59f0094	 ldr         r0, [pc, #0x94]
  04484	eb000000	 bl          CeLogMsg
  04488	e3a03001	 mov         r3, #1
  0448c	e58d3058	 str         r3, [sp, #0x58]
  04490	ea00001c	 b           |$LN39@cppiChanne@5|
  04494		 |$LN38@cppiChanne@5|
  04494	e59d306c	 ldr         r3, [sp, #0x6C]
  04498	e283301c	 add         r3, r3, #0x1C
  0449c	e5933000	 ldr         r3, [r3]
  044a0	e3530000	 cmp         r3, #0
  044a4	0a000002	 beq         |$LN34@cppiChanne@5|
  044a8	e59f307c	 ldr         r3, [pc, #0x7C]
  044ac	e58d305c	 str         r3, [sp, #0x5C]
  044b0	ea000001	 b           |$LN35@cppiChanne@5|
  044b4		 |$LN34@cppiChanne@5|
  044b4	e59f306c	 ldr         r3, [pc, #0x6C]
  044b8	e58d305c	 str         r3, [sp, #0x5C]
  044bc		 |$LN35@cppiChanne@5|
  044bc	e59d306c	 ldr         r3, [sp, #0x6C]
  044c0	e2833014	 add         r3, r3, #0x14
  044c4	e5933000	 ldr         r3, [r3]
  044c8	e3530000	 cmp         r3, #0
  044cc	0a000002	 beq         |$LN36@cppiChanne@5|
  044d0	e59f304c	 ldr         r3, [pc, #0x4C]
  044d4	e58d3060	 str         r3, [sp, #0x60]
  044d8	ea000001	 b           |$LN37@cppiChanne@5|
  044dc		 |$LN36@cppiChanne@5|
  044dc	e59f303c	 ldr         r3, [pc, #0x3C]
  044e0	e58d3060	 str         r3, [sp, #0x60]
  044e4		 |$LN37@cppiChanne@5|
  044e4	e59d305c	 ldr         r3, [sp, #0x5C]
  044e8	e58d3000	 str         r3, [sp]
  044ec	e5dd3008	 ldrb        r3, [sp, #8]
  044f0	e5dd2009	 ldrb        r2, [sp, #9]
  044f4	e59d1060	 ldr         r1, [sp, #0x60]
  044f8	e59f001c	 ldr         r0, [pc, #0x1C]
  044fc	eb000000	 bl          NKDbgPrintfW
  04500	e3a03000	 mov         r3, #0
  04504	e58d3058	 str         r3, [sp, #0x58]
  04508		 |$LN39@cppiChanne@5|
  04508	e3a03001	 mov         r3, #1
  0450c	e58d304c	 str         r3, [sp, #0x4C]
  04510		 |$LN40@cppiChanne@5|

; 1723 : }

  04510	e28dd064	 add         sp, sp, #0x64
  04514	e89d6000	 ldmia       sp, {sp, lr}
  04518	e12fff1e	 bx          lr
  0451c		 |$LN44@cppiChanne@5|
  0451c		 |$LN45@cppiChanne@5|
  0451c	00000000	 DCD         |??_C@_1FM@NOFFKNDG@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI@|
  04520		 |$LN46@cppiChanne@5|
  04520	00000000	 DCD         |??_C@_15BMCNAON@?$AAR?$AAX?$AA?$AA@|
  04524		 |$LN47@cppiChanne@5|
  04524	00000000	 DCD         |??_C@_15NHJLDDPA@?$AAT?$AAX?$AA?$AA@|
  04528		 |$LN48@cppiChanne@5|
  04528	00000000	 DCD         |??_C@_1BE@PGGAGLJA@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAE?$AAD?$AAE?$AAD?$AA?$AA@|
  0452c		 |$LN49@cppiChanne@5|
  0452c	00000000	 DCD         |??_C@_1BA@HGGLBLNE@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD?$AA?$CB?$AA?$AA@|
  04530		 |$LN50@cppiChanne@5|
  04530	00000000	 DCD         |dpCurSettings|
  04534		 |$LN51@cppiChanne@5|
  04534	00000000	 DCD         |??_C@_1KA@OEINGMKN@?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI?$AAE@|
  04538		 |$LN52@cppiChanne@5|
  04538	c1004044	 DCD         0xc1004044
  0453c		 |$LN53@cppiChanne@5|
  0453c	00000000	 DCD         |??_C@_1FC@GLGPIBNF@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AAT?$AAe?$AAa?$AAr?$AAd?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAC?$AAh?$AA?5?$AA?$CF?$AAu?$AA?5?$AA?$CI@|
  04540		 |$M48545|

			 ENDP  ; |cppiChannelTeardown|

	EXPORT	|cppiControllerDeinit|

  000b8			 AREA	 |.pdata|, PDATA
|$T48562| DCD	|$LN5@cppiContro@4|
	DCD	0x40000d04
; Function compile flags: /Odtp

  04540			 AREA	 |.text|, CODE, ARM

  04540		 |cppiControllerDeinit| PROC

; 1861 : {

  04540		 |$LN5@cppiContro@4|
  04540	e1a0c00d	 mov         r12, sp
  04544	e92d0001	 stmdb       sp!, {r0}
  04548	e92d5000	 stmdb       sp!, {r12, lr}
  0454c	e24dd004	 sub         sp, sp, #4
  04550		 |$M48559|

; 1862 :     struct cppi *cppi = f_CppiObj;

  04550	e59f3018	 ldr         r3, [pc, #0x18]
  04554	e5933000	 ldr         r3, [r3]
  04558	e58d3000	 str         r3, [sp]

; 1863 : 
; 1864 : 	UNREFERENCED_PARAMETER(pPdd);
; 1865 : 
; 1866 :     cppiPoolDeinit(cppi);

  0455c	e59d0000	 ldr         r0, [sp]
  04560	eb000000	 bl          cppiPoolDeinit

; 1867 : }

  04564	e28dd004	 add         sp, sp, #4
  04568	e89d6000	 ldmia       sp, {sp, lr}
  0456c	e12fff1e	 bx          lr
  04570		 |$LN6@cppiContro@4|
  04570		 |$LN7@cppiContro@4|
  04570	00000000	 DCD         |f_CppiObj|
  04574		 |$M48560|

			 ENDP  ; |cppiControllerDeinit|

	EXPORT	|??_C@_1CE@JNFJHDKH@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@FEJJIEFL@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DeleteCriticalSection|
	IMPORT	|USBCDMA_DeregisterUsbModule|

  000c0			 AREA	 |.pdata|, PDATA
|$T48579| DCD	|$LN17@cppiPoolDe|
	DCD	0x40008204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JNFJHDKH@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FEJJIEFL@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "c", 0x0, "p", 0x0, "p", 0x0, "i", 0x0, "P", 0x0, "o"
	DCB	0x0, "o", 0x0, "l", 0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  04574			 AREA	 |.text|, CODE, ARM

  04574		 |cppiPoolDeinit| PROC

; 232  : {

  04574		 |$LN17@cppiPoolDe|
  04574	e1a0c00d	 mov         r12, sp
  04578	e92d0001	 stmdb       sp!, {r0}
  0457c	e92d5000	 stmdb       sp!, {r12, lr}
  04580	e24dd018	 sub         sp, sp, #0x18
  04584		 |$M48576|

; 233  :     DEBUGCHK(cppi != NULL);

  04584	e59d3020	 ldr         r3, [sp, #0x20]
  04588	e3530000	 cmp         r3, #0
  0458c	0a000002	 beq         |$LN5@cppiPoolDe|
  04590	e3a03001	 mov         r3, #1
  04594	e58d3000	 str         r3, [sp]
  04598	ea000007	 b           |$LN6@cppiPoolDe|
  0459c		 |$LN5@cppiPoolDe|
  0459c	e3a030e9	 mov         r3, #0xE9
  045a0	e59f21d0	 ldr         r2, [pc, #0x1D0]
  045a4	e59f11c0	 ldr         r1, [pc, #0x1C0]
  045a8	e59f01c4	 ldr         r0, [pc, #0x1C4]
  045ac	eb000000	 bl          NKDbgPrintfW
  045b0	e6000010	 __debugbreak_ce
  045b4	e3a03000	 mov         r3, #0
  045b8	e58d3000	 str         r3, [sp]
  045bc		 |$LN6@cppiPoolDe|

; 234  :     if (cppi == NULL)

  045bc	e59d3020	 ldr         r3, [sp, #0x20]
  045c0	e3530000	 cmp         r3, #0
  045c4	1a000000	 bne         |$LN2@cppiPoolDe|

; 235  : 	{
; 236  :         return;

  045c8	ea000063	 b           |$LN3@cppiPoolDe|
  045cc		 |$LN2@cppiPoolDe|

; 237  : 	}
; 238  : 
; 239  :     // Only free once
; 240  :     if (cppi->pool == NULL)

  045cc	e59d3020	 ldr         r3, [sp, #0x20]
  045d0	e2833b02	 add         r3, r3, #2, 22
  045d4	e2833098	 add         r3, r3, #0x98
  045d8	e5933000	 ldr         r3, [r3]
  045dc	e3530000	 cmp         r3, #0
  045e0	1a000000	 bne         |$LN1@cppiPoolDe|

; 241  : 	{
; 242  :         return;

  045e4	ea00005c	 b           |$LN3@cppiPoolDe|
  045e8		 |$LN1@cppiPoolDe|

; 243  : 	}
; 244  : 
; 245  :     DEBUGMSG(ZONE_INIT,
; 246  :         (L"+cppiPoolDeinit\r\n"));

  045e8	e59f317c	 ldr         r3, [pc, #0x17C]
  045ec	e5933440	 ldr         r3, [r3, #0x440]
  045f0	e3130004	 tst         r3, #4
  045f4	0a00000f	 beq         |$LN9@cppiPoolDe|
  045f8	e59f316c	 ldr         r3, [pc, #0x16C]
  045fc	e5933440	 ldr         r3, [r3, #0x440]
  04600	e3130801	 tst         r3, #1, 16
  04604	0a000004	 beq         |$LN7@cppiPoolDe|
  04608	e59f0160	 ldr         r0, [pc, #0x160]
  0460c	eb000000	 bl          CeLogMsg
  04610	e3a03001	 mov         r3, #1
  04614	e58d3004	 str         r3, [sp, #4]
  04618	ea000003	 b           |$LN8@cppiPoolDe|
  0461c		 |$LN7@cppiPoolDe|
  0461c	e59f014c	 ldr         r0, [pc, #0x14C]
  04620	eb000000	 bl          NKDbgPrintfW
  04624	e3a03000	 mov         r3, #0
  04628	e58d3004	 str         r3, [sp, #4]
  0462c		 |$LN8@cppiPoolDe|
  0462c	e3a03001	 mov         r3, #1
  04630	e58d3008	 str         r3, [sp, #8]
  04634	ea000001	 b           |$LN10@cppiPoolDe|
  04638		 |$LN9@cppiPoolDe|
  04638	e3a03000	 mov         r3, #0
  0463c	e58d3008	 str         r3, [sp, #8]
  04640		 |$LN10@cppiPoolDe|

; 247  : 
; 248  :     LOCK_HD_POOL(cppi);

  04640	e59d3020	 ldr         r3, [sp, #0x20]
  04644	e2833b02	 add         r3, r3, #2, 22
  04648	e28300b8	 add         r0, r3, #0xB8
  0464c	eb000000	 bl          EnterCriticalSection

; 249  : 
; 250  :     USBCDMA_DeregisterUsbModule(cppi->hUsbCdma);

  04650	e59d3020	 ldr         r3, [sp, #0x20]
  04654	e2833020	 add         r3, r3, #0x20
  04658	e5930000	 ldr         r0, [r3]
  0465c	eb000000	 bl          USBCDMA_DeregisterUsbModule

; 251  : 
; 252  :     cppi->poolHead = NULL;

  04660	e59d3020	 ldr         r3, [sp, #0x20]
  04664	e2833b02	 add         r3, r3, #2, 22
  04668	e28320b4	 add         r2, r3, #0xB4
  0466c	e3a03000	 mov         r3, #0
  04670	e5823000	 str         r3, [r2]

; 253  :     cppi->poolFree = 0;

  04674	e59d3020	 ldr         r3, [sp, #0x20]
  04678	e2832e8b	 add         r2, r3, #0x8B, 28
  0467c	e3a03000	 mov         r3, #0
  04680	e5823000	 str         r3, [r2]

; 254  :     cppi->poolUsed = 0;

  04684	e59d3020	 ldr         r3, [sp, #0x20]
  04688	e2833b02	 add         r3, r3, #2, 22
  0468c	e28320ac	 add         r2, r3, #0xAC
  04690	e3a03000	 mov         r3, #0
  04694	e5823000	 str         r3, [r2]

; 255  :     cppi->poolMaxSize = 0;

  04698	e59d3020	 ldr         r3, [sp, #0x20]
  0469c	e2833b02	 add         r3, r3, #2, 22
  046a0	e28320a8	 add         r2, r3, #0xA8
  046a4	e3a03000	 mov         r3, #0
  046a8	e5823000	 str         r3, [r2]

; 256  :     cppi->paPool.QuadPart = 0;

  046ac	e59d3020	 ldr         r3, [sp, #0x20]
  046b0	e2833e8a	 add         r3, r3, #0x8A, 28
  046b4	e58d300c	 str         r3, [sp, #0xC]
  046b8	e59d200c	 ldr         r2, [sp, #0xC]
  046bc	e3a03000	 mov         r3, #0
  046c0	e5823000	 str         r3, [r2]
  046c4	e59d200c	 ldr         r2, [sp, #0xC]
  046c8	e3a03000	 mov         r3, #0
  046cc	e5823004	 str         r3, [r2, #4]

; 257  :     cppi->pool = NULL;

  046d0	e59d3020	 ldr         r3, [sp, #0x20]
  046d4	e2833b02	 add         r3, r3, #2, 22
  046d8	e2832098	 add         r2, r3, #0x98
  046dc	e3a03000	 mov         r3, #0
  046e0	e5823000	 str         r3, [r2]

; 258  : 
; 259  :     UNLOCK_HD_POOL(cppi);

  046e4	e59d3020	 ldr         r3, [sp, #0x20]
  046e8	e2833b02	 add         r3, r3, #2, 22
  046ec	e28300b8	 add         r0, r3, #0xB8
  046f0	eb000000	 bl          LeaveCriticalSection

; 260  : 
; 261  :     DeleteCriticalSection(&cppi->poolLock);

  046f4	e59d3020	 ldr         r3, [sp, #0x20]
  046f8	e2833b02	 add         r3, r3, #2, 22
  046fc	e28300b8	 add         r0, r3, #0xB8
  04700	eb000000	 bl          DeleteCriticalSection

; 262  : 
; 263  :     DEBUGMSG(ZONE_INIT,
; 264  :         (L"-cppiPoolDeinit\r\n"));

  04704	e59f3060	 ldr         r3, [pc, #0x60]
  04708	e5933440	 ldr         r3, [r3, #0x440]
  0470c	e3130004	 tst         r3, #4
  04710	0a00000f	 beq         |$LN13@cppiPoolDe|
  04714	e59f3050	 ldr         r3, [pc, #0x50]
  04718	e5933440	 ldr         r3, [r3, #0x440]
  0471c	e3130801	 tst         r3, #1, 16
  04720	0a000004	 beq         |$LN11@cppiPoolDe|
  04724	e59f003c	 ldr         r0, [pc, #0x3C]
  04728	eb000000	 bl          CeLogMsg
  0472c	e3a03001	 mov         r3, #1
  04730	e58d3010	 str         r3, [sp, #0x10]
  04734	ea000003	 b           |$LN12@cppiPoolDe|
  04738		 |$LN11@cppiPoolDe|
  04738	e59f0028	 ldr         r0, [pc, #0x28]
  0473c	eb000000	 bl          NKDbgPrintfW
  04740	e3a03000	 mov         r3, #0
  04744	e58d3010	 str         r3, [sp, #0x10]
  04748		 |$LN12@cppiPoolDe|
  04748	e3a03001	 mov         r3, #1
  0474c	e58d3014	 str         r3, [sp, #0x14]
  04750	ea000001	 b           |$LN14@cppiPoolDe|
  04754		 |$LN13@cppiPoolDe|
  04754	e3a03000	 mov         r3, #0
  04758	e58d3014	 str         r3, [sp, #0x14]
  0475c		 |$LN14@cppiPoolDe|
  0475c		 |$LN3@cppiPoolDe|

; 265  : }

  0475c	e28dd018	 add         sp, sp, #0x18
  04760	e89d6000	 ldmia       sp, {sp, lr}
  04764	e12fff1e	 bx          lr
  04768		 |$LN18@cppiPoolDe|
  04768		 |$LN19@cppiPoolDe|
  04768	00000000	 DCD         |??_C@_1CE@JNFJHDKH@?$AA?9?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  0476c		 |$LN20@cppiPoolDe|
  0476c	00000000	 DCD         |dpCurSettings|
  04770		 |$LN21@cppiPoolDe|
  04770	00000000	 DCD         |??_C@_1CE@FEJJIEFL@?$AA?$CL?$AAc?$AAp?$AAp?$AAi?$AAP?$AAo?$AAo?$AAl?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  04774		 |$LN22@cppiPoolDe|
  04774	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  04778		 |$LN23@cppiPoolDe|
  04778	00000000	 DCD         |??_C@_1JM@MEFHOMOC@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0477c		 |$M48577|

			 ENDP  ; |cppiPoolDeinit|

	END
