; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\OAL\POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMInterruptPending|
	IMPORT	|OALIntrIsIrqPending|
	IMPORT	|OALIntrTranslateSysIntr|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T47172| DCD	|$LN13@OEMInterru|
	DCD	0x40004f04
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\power\power.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "P", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptPending| PROC

; 71   : {

  00000		 |$LN13@OEMInterru|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd024	 sub         sp, sp, #0x24
  00010		 |$M47169|

; 72   :     BOOL pending = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 73   :     const UINT32 *pIrqs;
; 74   :     UINT32 ix, count;
; 75   : 
; 76   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 77   :         L"+OEMInterruptPending(%d)\r\n", sysIntr
; 78   :         ));

  00018	e59f3114	 ldr         r3, [pc, #0x114]
  0001c	e5933440	 ldr         r3, [r3, #0x440]
  00020	e3130901	 tst         r3, #1, 18
  00024	0a000009	 beq         |$LN7@OEMInterru|
  00028	e59f3104	 ldr         r3, [pc, #0x104]
  0002c	e5933440	 ldr         r3, [r3, #0x440]
  00030	e3130902	 tst         r3, #2, 18
  00034	0a000005	 beq         |$LN7@OEMInterru|
  00038	e59d102c	 ldr         r1, [sp, #0x2C]
  0003c	e59f00f4	 ldr         r0, [pc, #0xF4]
  00040	eb000000	 bl          NKDbgPrintfW
  00044	e3a03001	 mov         r3, #1
  00048	e58d3014	 str         r3, [sp, #0x14]
  0004c	ea000001	 b           |$LN8@OEMInterru|
  00050		 |$LN7@OEMInterru|
  00050	e3a03000	 mov         r3, #0
  00054	e58d3014	 str         r3, [sp, #0x14]
  00058		 |$LN8@OEMInterru|

; 79   : 
; 80   :     if (OALIntrTranslateSysIntr(sysIntr, &count, &pIrqs))

  00058	e28d200c	 add         r2, sp, #0xC
  0005c	e28d1000	 add         r1, sp, #0
  00060	e59d002c	 ldr         r0, [sp, #0x2C]
  00064	eb000000	 bl          OALIntrTranslateSysIntr
  00068	e58d0018	 str         r0, [sp, #0x18]
  0006c	e59d3018	 ldr         r3, [sp, #0x18]
  00070	e3530000	 cmp         r3, #0
  00074	0a000017	 beq         |$LN4@OEMInterru|

; 81   :         {
; 82   :         for (ix = 0; ix < count && !pending; ix++)

  00078	e3a03000	 mov         r3, #0
  0007c	e58d3004	 str         r3, [sp, #4]
  00080	ea000002	 b           |$LN3@OEMInterru|
  00084		 |$LN2@OEMInterru|
  00084	e59d3004	 ldr         r3, [sp, #4]
  00088	e2833001	 add         r3, r3, #1
  0008c	e58d3004	 str         r3, [sp, #4]
  00090		 |$LN3@OEMInterru|
  00090	e59d2004	 ldr         r2, [sp, #4]
  00094	e59d3000	 ldr         r3, [sp]
  00098	e1520003	 cmp         r2, r3
  0009c	2a00000d	 bcs         |$LN1@OEMInterru|
  000a0	e59d3008	 ldr         r3, [sp, #8]
  000a4	e3530000	 cmp         r3, #0
  000a8	1a00000a	 bne         |$LN1@OEMInterru|

; 83   :             {
; 84   :             pending = OALIntrIsIrqPending(pIrqs[ix]);

  000ac	e59d1004	 ldr         r1, [sp, #4]
  000b0	e3a03004	 mov         r3, #4
  000b4	e0020391	 mul         r2, r1, r3
  000b8	e59d300c	 ldr         r3, [sp, #0xC]
  000bc	e0833002	 add         r3, r3, r2
  000c0	e5930000	 ldr         r0, [r3]
  000c4	eb000000	 bl          OALIntrIsIrqPending
  000c8	e58d001c	 str         r0, [sp, #0x1C]
  000cc	e59d301c	 ldr         r3, [sp, #0x1C]
  000d0	e58d3008	 str         r3, [sp, #8]

; 85   :             }            

  000d4	eaffffea	 b           |$LN2@OEMInterru|
  000d8		 |$LN1@OEMInterru|
  000d8		 |$LN4@OEMInterru|

; 86   :         }
; 87   :         
; 88   :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 89   :         L"-OEMInterruptPending(rc = %d)\r\n", pending
; 90   :         ));

  000d8	e59f3054	 ldr         r3, [pc, #0x54]
  000dc	e5933440	 ldr         r3, [r3, #0x440]
  000e0	e3130901	 tst         r3, #1, 18
  000e4	0a000009	 beq         |$LN9@OEMInterru|
  000e8	e59f3044	 ldr         r3, [pc, #0x44]
  000ec	e5933440	 ldr         r3, [r3, #0x440]
  000f0	e3130902	 tst         r3, #2, 18
  000f4	0a000005	 beq         |$LN9@OEMInterru|
  000f8	e59d1008	 ldr         r1, [sp, #8]
  000fc	e59f002c	 ldr         r0, [pc, #0x2C]
  00100	eb000000	 bl          NKDbgPrintfW
  00104	e3a03001	 mov         r3, #1
  00108	e58d3020	 str         r3, [sp, #0x20]
  0010c	ea000001	 b           |$LN10@OEMInterru|
  00110		 |$LN9@OEMInterru|
  00110	e3a03000	 mov         r3, #0
  00114	e58d3020	 str         r3, [sp, #0x20]
  00118		 |$LN10@OEMInterru|

; 91   :     return pending;

  00118	e59d3008	 ldr         r3, [sp, #8]
  0011c	e58d3010	 str         r3, [sp, #0x10]

; 92   : }

  00120	e59d0010	 ldr         r0, [sp, #0x10]
  00124	e28dd024	 add         sp, sp, #0x24
  00128	e89d6000	 ldmia       sp, {sp, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN14@OEMInterru|
  00130		 |$LN15@OEMInterru|
  00130	00000000	 DCD         |??_C@_1EA@LOAJIJJI@?$AA?9?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00134		 |$LN16@OEMInterru|
  00134	00000000	 DCD         |dpCurSettings|
  00138		 |$LN17@OEMInterru|
  00138	00000000	 DCD         |??_C@_1DG@KCFEDALK@?$AA?$CL?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAP?$AAe?$AAn?$AAd?$AAi?$AAn?$AAg?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0013c		 |$M47170|

			 ENDP  ; |OEMInterruptPending|

	EXPORT	|??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@GJLEBCKC@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMPowerOff|
	IMPORT	|DumpPrcmRegsSnapshot|
	IMPORT	|PrcmDumpSavedRefCounts|
	IMPORT	|OALWakeupLatency_DumpSnapshot|
	IMPORT	|g_PrcmDebugSuspendResume|
	IMPORT	|BSPPowerOn|
	IMPORT	|g_oalWakeSource|
	IMPORT	|PrcmSuspend|
	IMPORT	|OEMInterruptEnable|
	IMPORT	|OALPowerWakeSource|
	IMPORT	|OALIntrEnableIrqs|
	IMPORT	|g_pIntr|
	IMPORT	|BSPPowerOff|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetGPTPerfDevice|
	IMPORT	|KITLIoctl|
	IMPORT	|OALWatchdogEnable|

  00008			 AREA	 |.pdata|, PDATA
|$T47185| DCD	|$LN25@OEMPowerOf|
	DCD	0x40011a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, 0xa, 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "u", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, " ", 0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N"
	DCB	0x0, "T", 0x0, "R", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@GJLEBCKC@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, " ", 0x0, "s"
	DCB	0x0, "o", 0x0, "u", 0x0, "r", 0x0, "c", 0x0, "e", 0x0, "s"
	DCB	0x0, ":", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0013c			 AREA	 |.text|, CODE, ARM

  0013c		 |OEMPowerOff| PROC

; 103  : {

  0013c		 |$LN25@OEMPowerOf|
  0013c	e52de004	 str         lr, [sp, #-4]!
  00140	e24dd050	 sub         sp, sp, #0x50
  00144		 |$M47182|

; 104  :     DWORD i;
; 105  :     UINT32 sysIntr;
; 106  :     UINT intr[3];
; 107  :     BOOL bPowerOn;
; 108  : 
; 109  :     // UNDONE: verify if this is still necessary
; 110  :     // Disable hardware watchdog
; 111  :     OALWatchdogEnable(FALSE);

  00144	e3a00000	 mov         r0, #0
  00148	eb000000	 bl          OALWatchdogEnable

; 112  :     
; 113  :     // Make sure that KITL is powered off
; 114  :     bPowerOn = FALSE;

  0014c	e3a03000	 mov         r3, #0
  00150	e58d3008	 str         r3, [sp, #8]

; 115  :     KITLIoctl(IOCTL_KITL_POWER_CALL, &bPowerOn, sizeof(bPowerOn), NULL, 0, NULL);    

  00154	e3a03000	 mov         r3, #0
  00158	e58d3004	 str         r3, [sp, #4]
  0015c	e3a03000	 mov         r3, #0
  00160	e58d3000	 str         r3, [sp]
  00164	e3a03000	 mov         r3, #0
  00168	e3a02004	 mov         r2, #4
  0016c	e28d1008	 add         r1, sp, #8
  00170	e59f0424	 ldr         r0, [pc, #0x424]
  00174	eb000000	 bl          KITLIoctl

; 116  : 
; 117  :     // Disable GPTimer2 (used for high perf/monte carlo profiling)
; 118  :     EnableDeviceClocks(BSPGetGPTPerfDevice(), FALSE);

  00178	eb000000	 bl          BSPGetGPTPerfDevice
  0017c	e58d0038	 str         r0, [sp, #0x38]
  00180	e3a01000	 mov         r1, #0
  00184	e59d0038	 ldr         r0, [sp, #0x38]
  00188	eb000000	 bl          EnableDeviceClocks

; 119  : 
; 120  :     // Give chance to do board specific stuff
; 121  :     BSPPowerOff();

  0018c	eb000000	 bl          BSPPowerOff

; 122  : 
; 123  :     //----------------------------------------------
; 124  :     // capture all enabled interrupts and disable interrupts
; 125  :     intr[0] = INREG32(&g_pIntr->pICLRegs->INTC_MIR0);

  00190	e59f3408	 ldr         r3, [pc, #0x408]
  00194	e5933000	 ldr         r3, [r3]
  00198	e5933000	 ldr         r3, [r3]
  0019c	e2833084	 add         r3, r3, #0x84
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e58d3014	 str         r3, [sp, #0x14]

; 126  :     intr[1] = INREG32(&g_pIntr->pICLRegs->INTC_MIR1);

  001a8	e59f33f0	 ldr         r3, [pc, #0x3F0]
  001ac	e5933000	 ldr         r3, [r3]
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e28330a4	 add         r3, r3, #0xA4
  001b8	e5933000	 ldr         r3, [r3]
  001bc	e58d3018	 str         r3, [sp, #0x18]

; 127  :     intr[2] = INREG32(&g_pIntr->pICLRegs->INTC_MIR2);

  001c0	e59f33d8	 ldr         r3, [pc, #0x3D8]
  001c4	e5933000	 ldr         r3, [r3]
  001c8	e5933000	 ldr         r3, [r3]
  001cc	e28330c4	 add         r3, r3, #0xC4
  001d0	e5933000	 ldr         r3, [r3]
  001d4	e58d301c	 str         r3, [sp, #0x1C]

; 128  : 
; 129  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET0, OMAP_MPUIC_MASKALL);

  001d8	e59f33c0	 ldr         r3, [pc, #0x3C0]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e5933000	 ldr         r3, [r3]
  001e4	e283208c	 add         r2, r3, #0x8C
  001e8	e3e03000	 mvn         r3, #0
  001ec	e5823000	 str         r3, [r2]

; 130  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET1, OMAP_MPUIC_MASKALL);

  001f0	e59f33a8	 ldr         r3, [pc, #0x3A8]
  001f4	e5933000	 ldr         r3, [r3]
  001f8	e5933000	 ldr         r3, [r3]
  001fc	e28320ac	 add         r2, r3, #0xAC
  00200	e3e03000	 mvn         r3, #0
  00204	e5823000	 str         r3, [r2]

; 131  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_SET2, OMAP_MPUIC_MASKALL);

  00208	e59f3390	 ldr         r3, [pc, #0x390]
  0020c	e5933000	 ldr         r3, [r3]
  00210	e5933000	 ldr         r3, [r3]
  00214	e28320cc	 add         r2, r3, #0xCC
  00218	e3e03000	 mvn         r3, #0
  0021c	e5823000	 str         r3, [r2]

; 132  : 
; 133  :     //----------------------------------------------
; 134  :     // Context Save/Restore       
; 135  : 	// Save state then mask all GPIO interrupts
; 136  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)

  00220	e3a03000	 mov         r3, #0
  00224	e58d3010	 str         r3, [sp, #0x10]
  00228	ea000002	 b           |$LN20@OEMPowerOf|
  0022c		 |$LN19@OEMPowerOf|
  0022c	e59d3010	 ldr         r3, [sp, #0x10]
  00230	e2833001	 add         r3, r3, #1
  00234	e58d3010	 str         r3, [sp, #0x10]
  00238		 |$LN20@OEMPowerOf|
  00238	e59f3360	 ldr         r3, [pc, #0x360]
  0023c	e5933000	 ldr         r3, [r3]
  00240	e2833004	 add         r3, r3, #4
  00244	e59d2010	 ldr         r2, [sp, #0x10]
  00248	e5933000	 ldr         r3, [r3]
  0024c	e1520003	 cmp         r2, r3
  00250	2a000029	 bcs         |$LN18@OEMPowerOf|

; 137  :     {
; 138  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];

  00254	e59f3344	 ldr         r3, [pc, #0x344]
  00258	e5933000	 ldr         r3, [r3]
  0025c	e2830008	 add         r0, r3, #8
  00260	e59d1010	 ldr         r1, [sp, #0x10]
  00264	e3a03020	 mov         r3, #0x20
  00268	e0020391	 mul         r2, r1, r3
  0026c	e5903000	 ldr         r3, [r0]
  00270	e0833002	 add         r3, r3, r2
  00274	e58d3020	 str         r3, [sp, #0x20]

; 139  : 
; 140  : 		// Save current state
; 141  : 		pCurrGpioCtxt->restoreCtxt.IRQENABLE1 = INREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1);

  00278	e59d3020	 ldr         r3, [sp, #0x20]
  0027c	e283300c	 add         r3, r3, #0xC
  00280	e5933000	 ldr         r3, [r3]
  00284	e283101c	 add         r1, r3, #0x1C
  00288	e59d3020	 ldr         r3, [sp, #0x20]
  0028c	e2832014	 add         r2, r3, #0x14
  00290	e5913000	 ldr         r3, [r1]
  00294	e5823000	 str         r3, [r2]

; 142  : 		pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE = INREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE);

  00298	e59d3020	 ldr         r3, [sp, #0x20]
  0029c	e283300c	 add         r3, r3, #0xC
  002a0	e5933000	 ldr         r3, [r3]
  002a4	e2831020	 add         r1, r3, #0x20
  002a8	e59d3020	 ldr         r3, [sp, #0x20]
  002ac	e2832018	 add         r2, r3, #0x18
  002b0	e5913000	 ldr         r3, [r1]
  002b4	e5823000	 str         r3, [r2]

; 143  : 
; 144  : 		// Disable all GPIO interrupts in the bank
; 145  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, 0);

  002b8	e59d3020	 ldr         r3, [sp, #0x20]
  002bc	e283300c	 add         r3, r3, #0xC
  002c0	e5933000	 ldr         r3, [r3]
  002c4	e283201c	 add         r2, r3, #0x1C
  002c8	e3a03000	 mov         r3, #0
  002cc	e5823000	 str         r3, [r2]

; 146  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, 0);

  002d0	e59d3020	 ldr         r3, [sp, #0x20]
  002d4	e283300c	 add         r3, r3, #0xC
  002d8	e5933000	 ldr         r3, [r3]
  002dc	e2832020	 add         r2, r3, #0x20
  002e0	e3a03000	 mov         r3, #0
  002e4	e5823000	 str         r3, [r2]

; 147  : 
; 148  :         OALIntrEnableIrqs(1,&pCurrGpioCtxt->bank_irq);

  002e8	e59d3020	 ldr         r3, [sp, #0x20]
  002ec	e2831008	 add         r1, r3, #8
  002f0	e3a00001	 mov         r0, #1
  002f4	eb000000	 bl          OALIntrEnableIrqs

; 149  : 	}

  002f8	eaffffcb	 b           |$LN19@OEMPowerOf|
  002fc		 |$LN18@OEMPowerOf|

; 150  : 
; 151  : /*
; 152  :     //----------------------------------------------
; 153  :     // Clear all enabled IO PAD wakeups for GPIOs
; 154  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 
; 155  :         {
; 156  :         irq = g_pIntr->pGpioCtxt[i].irq_start;
; 157  :         mask = wkup[i];
; 158  :         while (mask != 0)
; 159  :             {
; 160  :             // If a GPIO was wakeup enabled, then clear the wakeup
; 161  :             if (mask & 0x1)
; 162  :                 {
; 163  :                 OEMEnableIOPadWakeup((irq - IRQ_GPIO_0), FALSE);
; 164  :                 }
; 165  :             
; 166  :             irq++;
; 167  :             mask >>= 1;    
; 168  :             }
; 169  :         }
; 170  : */
; 171  : 
; 172  :     //----------------------------------------------
; 173  :     // Enable wake sources interrupts
; 174  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  002fc	e3a03008	 mov         r3, #8
  00300	e58d300c	 str         r3, [sp, #0xC]
  00304	ea000002	 b           |$LN17@OEMPowerOf|
  00308		 |$LN16@OEMPowerOf|
  00308	e59d300c	 ldr         r3, [sp, #0xC]
  0030c	e2833001	 add         r3, r3, #1
  00310	e58d300c	 str         r3, [sp, #0xC]
  00314		 |$LN17@OEMPowerOf|
  00314	e59d300c	 ldr         r3, [sp, #0xC]
  00318	e3530048	 cmp         r3, #0x48
  0031c	2a00000b	 bcs         |$LN15@OEMPowerOf|

; 175  :         {
; 176  :         // Skip if sysIntr isn't allowed as wake source
; 177  :         if (!OALPowerWakeSource(sysIntr)) 

  00320	e59d000c	 ldr         r0, [sp, #0xC]
  00324	eb000000	 bl          OALPowerWakeSource
  00328	e58d003c	 str         r0, [sp, #0x3C]
  0032c	e59d303c	 ldr         r3, [sp, #0x3C]
  00330	e3530000	 cmp         r3, #0
  00334	1a000000	 bne         |$LN14@OEMPowerOf|

; 178  : 		    continue;

  00338	eafffff2	 b           |$LN16@OEMPowerOf|
  0033c		 |$LN14@OEMPowerOf|

; 179  : 
; 180  :         // Enable it as interrupt
; 181  :         OEMInterruptEnable(sysIntr, NULL, 0);

  0033c	e3a02000	 mov         r2, #0
  00340	e3a01000	 mov         r1, #0
  00344	e59d000c	 ldr         r0, [sp, #0xC]
  00348	eb000000	 bl          OEMInterruptEnable

; 182  :         }

  0034c	eaffffed	 b           |$LN16@OEMPowerOf|
  00350		 |$LN15@OEMPowerOf|

; 183  : 
; 184  :     // enter full retention
; 185  :     PrcmSuspend();

  00350	eb000000	 bl          PrcmSuspend

; 186  :     
; 187  :     //----------------------------------------------
; 188  :     // Find wakeup source
; 189  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  00354	e3a03008	 mov         r3, #8
  00358	e58d300c	 str         r3, [sp, #0xC]
  0035c	ea000002	 b           |$LN13@OEMPowerOf|
  00360		 |$LN12@OEMPowerOf|
  00360	e59d300c	 ldr         r3, [sp, #0xC]
  00364	e2833001	 add         r3, r3, #1
  00368	e58d300c	 str         r3, [sp, #0xC]
  0036c		 |$LN13@OEMPowerOf|
  0036c	e59d300c	 ldr         r3, [sp, #0xC]
  00370	e3530048	 cmp         r3, #0x48
  00374	2a000011	 bcs         |$LN11@OEMPowerOf|

; 190  :         {            
; 191  :         // Skip if sysIntr isn't allowed as wake source
; 192  :         if (!OALPowerWakeSource(sysIntr)) 

  00378	e59d000c	 ldr         r0, [sp, #0xC]
  0037c	eb000000	 bl          OALPowerWakeSource
  00380	e58d0040	 str         r0, [sp, #0x40]
  00384	e59d3040	 ldr         r3, [sp, #0x40]
  00388	e3530000	 cmp         r3, #0
  0038c	1a000000	 bne         |$LN10@OEMPowerOf|

; 193  : 		    continue;

  00390	eafffff2	 b           |$LN12@OEMPowerOf|
  00394		 |$LN10@OEMPowerOf|

; 194  : 
; 195  :         // When this sysIntr is pending we find wake source
; 196  :         if (OEMInterruptPending(sysIntr))

  00394	e59d000c	 ldr         r0, [sp, #0xC]
  00398	eb000000	 bl          OEMInterruptPending
  0039c	e58d0044	 str         r0, [sp, #0x44]
  003a0	e59d3044	 ldr         r3, [sp, #0x44]
  003a4	e3530000	 cmp         r3, #0
  003a8	0a000003	 beq         |$LN9@OEMPowerOf|

; 197  :             {
; 198  :             g_oalWakeSource = sysIntr;

  003ac	e59d200c	 ldr         r2, [sp, #0xC]
  003b0	e59f31d4	 ldr         r3, [pc, #0x1D4]
  003b4	e5832000	 str         r2, [r3]

; 199  :             break;

  003b8	ea000000	 b           |$LN11@OEMPowerOf|
  003bc		 |$LN9@OEMPowerOf|

; 200  :             }
; 201  :         }

  003bc	eaffffe7	 b           |$LN12@OEMPowerOf|
  003c0		 |$LN11@OEMPowerOf|

; 202  :   
; 203  :     //----------------------------------------------
; 204  :     // Context Save/Restore
; 205  :     // Put GPIO interrupt state back to the way it was before suspend
; 206  :     for (i=0; i<g_pIntr->nbGpioBank; i++)

  003c0	e3a03000	 mov         r3, #0
  003c4	e58d3010	 str         r3, [sp, #0x10]
  003c8	ea000002	 b           |$LN8@OEMPowerOf|
  003cc		 |$LN7@OEMPowerOf|
  003cc	e59d3010	 ldr         r3, [sp, #0x10]
  003d0	e2833001	 add         r3, r3, #1
  003d4	e58d3010	 str         r3, [sp, #0x10]
  003d8		 |$LN8@OEMPowerOf|
  003d8	e59f31c0	 ldr         r3, [pc, #0x1C0]
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e2833004	 add         r3, r3, #4
  003e4	e59d2010	 ldr         r2, [sp, #0x10]
  003e8	e5933000	 ldr         r3, [r3]
  003ec	e1520003	 cmp         r2, r3
  003f0	2a000019	 bcs         |$LN6@OEMPowerOf|

; 207  :     {
; 208  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];		

  003f4	e59f31a4	 ldr         r3, [pc, #0x1A4]
  003f8	e5933000	 ldr         r3, [r3]
  003fc	e2830008	 add         r0, r3, #8
  00400	e59d1010	 ldr         r1, [sp, #0x10]
  00404	e3a03020	 mov         r3, #0x20
  00408	e0020391	 mul         r2, r1, r3
  0040c	e5903000	 ldr         r3, [r0]
  00410	e0833002	 add         r3, r3, r2
  00414	e58d3024	 str         r3, [sp, #0x24]

; 209  : 
; 210  :         // Write registers with the previously saved values
; 211  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, pCurrGpioCtxt->restoreCtxt.IRQENABLE1);

  00418	e59d3024	 ldr         r3, [sp, #0x24]
  0041c	e2831014	 add         r1, r3, #0x14
  00420	e59d3024	 ldr         r3, [sp, #0x24]
  00424	e283300c	 add         r3, r3, #0xC
  00428	e5933000	 ldr         r3, [r3]
  0042c	e283201c	 add         r2, r3, #0x1C
  00430	e5913000	 ldr         r3, [r1]
  00434	e5823000	 str         r3, [r2]

; 212  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE);

  00438	e59d3024	 ldr         r3, [sp, #0x24]
  0043c	e2831018	 add         r1, r3, #0x18
  00440	e59d3024	 ldr         r3, [sp, #0x24]
  00444	e283300c	 add         r3, r3, #0xC
  00448	e5933000	 ldr         r3, [r3]
  0044c	e2832020	 add         r2, r3, #0x20
  00450	e5913000	 ldr         r3, [r1]
  00454	e5823000	 str         r3, [r2]

; 213  : 
; 214  :     }

  00458	eaffffdb	 b           |$LN7@OEMPowerOf|
  0045c		 |$LN6@OEMPowerOf|

; 215  : 
; 216  : /*
; 217  :     //-------------------------------------------------------
; 218  :     // Enable all previously enabled IO PAD wakeups for GPIOs
; 219  :     for (i = 0; i < g_pIntr->nbGpioBank; ++i) 
; 220  :         {
; 221  :         irq = g_pIntr->pGpioCtxt[i].irq_start;
; 222  :         mask = wkup[i];
; 223  :         while (mask != 0)
; 224  :             {
; 225  :             // If a GPIO was wakeup enabled, then clear the wakeup
; 226  :             if (mask & 0x1)
; 227  :                 {
; 228  :                 OEMEnableIOPadWakeup((irq - IRQ_GPIO_0), TRUE);
; 229  :                 }
; 230  :             
; 231  :             irq++;
; 232  :             mask >z>= 1;    
; 233  :             }
; 234  :         }
; 235  : */
; 236  : 
; 237  :     //----------------------------------------------
; 238  :     // Re-enable interrupts    
; 239  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR0, ~intr[0]);

  0045c	e59d3014	 ldr         r3, [sp, #0x14]
  00460	e1e02003	 mvn         r2, r3
  00464	e59f3134	 ldr         r3, [pc, #0x134]
  00468	e5933000	 ldr         r3, [r3]
  0046c	e5933000	 ldr         r3, [r3]
  00470	e2833088	 add         r3, r3, #0x88
  00474	e5832000	 str         r2, [r3]

; 240  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR1, ~intr[1]);

  00478	e59d3018	 ldr         r3, [sp, #0x18]
  0047c	e1e02003	 mvn         r2, r3
  00480	e59f3118	 ldr         r3, [pc, #0x118]
  00484	e5933000	 ldr         r3, [r3]
  00488	e5933000	 ldr         r3, [r3]
  0048c	e28330a8	 add         r3, r3, #0xA8
  00490	e5832000	 str         r2, [r3]

; 241  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR_CLEAR2, ~intr[2]);  

  00494	e59d301c	 ldr         r3, [sp, #0x1C]
  00498	e1e02003	 mvn         r2, r3
  0049c	e59f30fc	 ldr         r3, [pc, #0xFC]
  004a0	e5933000	 ldr         r3, [r3]
  004a4	e5933000	 ldr         r3, [r3]
  004a8	e28330c8	 add         r3, r3, #0xC8
  004ac	e5832000	 str         r2, [r3]

; 242  :     
; 243  :     //----------------------------------------------
; 244  :     // Do board specific stuff    
; 245  :     BSPPowerOn();    

  004b0	eb000000	 bl          BSPPowerOn

; 246  : 
; 247  :     // Enable GPTimer (used for high perf/monte carlo profiling)
; 248  :     EnableDeviceClocks(BSPGetGPTPerfDevice(), TRUE);

  004b4	eb000000	 bl          BSPGetGPTPerfDevice
  004b8	e58d0048	 str         r0, [sp, #0x48]
  004bc	e3a01001	 mov         r1, #1
  004c0	e59d0048	 ldr         r0, [sp, #0x48]
  004c4	eb000000	 bl          EnableDeviceClocks

; 249  : 
; 250  :     // Reinitialize KITL
; 251  :     bPowerOn = TRUE;

  004c8	e3a03001	 mov         r3, #1
  004cc	e58d3008	 str         r3, [sp, #8]

; 252  :     KITLIoctl(IOCTL_KITL_POWER_CALL, &bPowerOn, sizeof(bPowerOn), NULL, 0, NULL);    

  004d0	e3a03000	 mov         r3, #0
  004d4	e58d3004	 str         r3, [sp, #4]
  004d8	e3a03000	 mov         r3, #0
  004dc	e58d3000	 str         r3, [sp]
  004e0	e3a03000	 mov         r3, #0
  004e4	e3a02004	 mov         r2, #4
  004e8	e28d1008	 add         r1, sp, #8
  004ec	e59f00a8	 ldr         r0, [pc, #0xA8]
  004f0	eb000000	 bl          KITLIoctl

; 253  :     
; 254  :     // Enable hardware watchdog
; 255  :     OALWatchdogEnable(TRUE);

  004f4	e3a00001	 mov         r0, #1
  004f8	eb000000	 bl          OALWatchdogEnable

; 256  : 	
; 257  : #ifndef SHIP_BUILD
; 258  :     if (g_PrcmDebugSuspendResume)

  004fc	e59f3094	 ldr         r3, [pc, #0x94]
  00500	e5933000	 ldr         r3, [r3]
  00504	e3530000	 cmp         r3, #0
  00508	0a00001b	 beq         |$LN5@OEMPowerOf|

; 259  : 	{
; 260  :         OALMSG(1, (L"Enable wake sources:\r\n"));

  0050c	e59f0080	 ldr         r0, [pc, #0x80]
  00510	eb000000	 bl          NKDbgPrintfW

; 261  :         for (sysIntr = SYSINTR_FIRMWARE; sysIntr < SYSINTR_MAXIMUM; sysIntr++)

  00514	e3a03010	 mov         r3, #0x10
  00518	e58d300c	 str         r3, [sp, #0xC]
  0051c	ea000002	 b           |$LN4@OEMPowerOf|
  00520		 |$LN3@OEMPowerOf|
  00520	e59d300c	 ldr         r3, [sp, #0xC]
  00524	e2833001	 add         r3, r3, #1
  00528	e58d300c	 str         r3, [sp, #0xC]
  0052c		 |$LN4@OEMPowerOf|
  0052c	e59d300c	 ldr         r3, [sp, #0xC]
  00530	e3530048	 cmp         r3, #0x48
  00534	2a000009	 bcs         |$LN2@OEMPowerOf|

; 262  :         {
; 263  :             if (OALPowerWakeSource(sysIntr)) 

  00538	e59d000c	 ldr         r0, [sp, #0xC]
  0053c	eb000000	 bl          OALPowerWakeSource
  00540	e58d004c	 str         r0, [sp, #0x4C]
  00544	e59d304c	 ldr         r3, [sp, #0x4C]
  00548	e3530000	 cmp         r3, #0
  0054c	0a000002	 beq         |$LN1@OEMPowerOf|

; 264  :                 OALMSG(1, (L"  SYSINTR %d\r\n", sysIntr));

  00550	e59d100c	 ldr         r1, [sp, #0xC]
  00554	e59f0034	 ldr         r0, [pc, #0x34]
  00558	eb000000	 bl          NKDbgPrintfW
  0055c		 |$LN1@OEMPowerOf|

; 265  :         }

  0055c	eaffffef	 b           |$LN3@OEMPowerOf|
  00560		 |$LN2@OEMPowerOf|

; 266  : 
; 267  :     	OALMSG(1, (L"\r\nWake due to SYSINTR %d\r\n", g_oalWakeSource));

  00560	e59f3024	 ldr         r3, [pc, #0x24]
  00564	e5931000	 ldr         r1, [r3]
  00568	e59f0018	 ldr         r0, [pc, #0x18]
  0056c	eb000000	 bl          NKDbgPrintfW

; 268  :         OALWakeupLatency_DumpSnapshot();

  00570	eb000000	 bl          OALWakeupLatency_DumpSnapshot

; 269  :         PrcmDumpSavedRefCounts();

  00574	eb000000	 bl          PrcmDumpSavedRefCounts

; 270  :         DumpPrcmRegsSnapshot();

  00578	eb000000	 bl          DumpPrcmRegsSnapshot
  0057c		 |$LN5@OEMPowerOf|

; 271  :     }
; 272  : #endif
; 273  : }

  0057c	e28dd050	 add         sp, sp, #0x50
  00580	e49de004	 ldr         lr, [sp], #4
  00584	e12fff1e	 bx          lr
  00588		 |$LN26@OEMPowerOf|
  00588		 |$LN27@OEMPowerOf|
  00588	00000000	 DCD         |??_C@_1DG@KDDHMOEO@?$AA?$AN?$AA?6?$AAW?$AAa?$AAk?$AAe?$AA?5?$AAd?$AAu?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0058c		 |$LN28@OEMPowerOf|
  0058c	00000000	 DCD         |g_oalWakeSource|
  00590		 |$LN29@OEMPowerOf|
  00590	00000000	 DCD         |??_C@_1BO@GGDDDJNF@?$AA?5?$AA?5?$AAS?$AAY?$AAS?$AAI?$AAN?$AAT?$AAR?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00594		 |$LN30@OEMPowerOf|
  00594	00000000	 DCD         |??_C@_1CO@GJLEBCKC@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAw?$AAa?$AAk?$AAe?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?3?$AA?$AN?$AA?6?$AA?$AA@|
  00598		 |$LN31@OEMPowerOf|
  00598	00000000	 DCD         |g_PrcmDebugSuspendResume|
  0059c		 |$LN32@OEMPowerOf|
  0059c	01010144	 DCD         0x1010144
  005a0		 |$LN33@OEMPowerOf|
  005a0	00000000	 DCD         |g_pIntr|
  005a4		 |$M47183|

			 ENDP  ; |OEMPowerOff|

	END
