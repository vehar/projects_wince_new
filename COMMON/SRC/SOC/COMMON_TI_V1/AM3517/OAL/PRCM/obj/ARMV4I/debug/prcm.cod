; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\OAL\PRCM\prcm.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_pSysCtrlGenReg| [ DATA ]
	EXPORT	|g_PrcmPostInit| [ DATA ]
	EXPORT	|g_bSingleThreaded| [ DATA ]
	EXPORT	|g_pCPUInfo| [ DATA ]
	EXPORT	|fnCpuStart| [ DATA ]
	EXPORT	|fnOALCPUIdle| [ DATA ]
	EXPORT	|fnOALUpdateCoreFreq| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|prevGpioIClkState|, 0x4

	 COMMON	|prevGpioFClkState|, 0x4

	 COMMON	|g_pPrcmPrm|, 0x4

	 COMMON	|g_rgPrcmMutex|, 0x78

	 COMMON	|g_pPrcmCm|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_pSysCtrlGenReg| % 0x4
|g_PrcmPostInit| % 0x4
|g_bSingleThreaded| % 0x4
|g_pCPUInfo| %	0x4
|fnCpuStart| %	0x4
|fnOALCPUIdle| % 0x4
|fnOALUpdateCoreFreq| % 0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|IS_IOPAD_EVENT_PENDING|
	IMPORT	|g_pIntr|

  00000			 AREA	 |.pdata|, PDATA
|$T47208| DCD	|$LN8@IS_IOPAD_E|
	DCD	0x40002601
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |IS_IOPAD_EVENT_PENDING| PROC

; 54   : {

  00000		 |$LN8@IS_IOPAD_E|
  00000	e24dd00c	 sub         sp, sp, #0xC
  00004		 |$M47205|

; 55   :     BOOL dwVal = 0;

  00004	e3a03000	 mov         r3, #0
  00008	e58d3000	 str         r3, [sp]

; 56   :     DWORD i = 0;

  0000c	e3a03000	 mov         r3, #0
  00010	e58d3004	 str         r3, [sp, #4]

; 57   : 
; 58   :     for (i=0;i<g_pIntr->nbGpioBank;i++)

  00014	e3a03000	 mov         r3, #0
  00018	e58d3004	 str         r3, [sp, #4]
  0001c	ea000002	 b           |$LN3@IS_IOPAD_E|
  00020		 |$LN2@IS_IOPAD_E|
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e2833001	 add         r3, r3, #1
  00028	e58d3004	 str         r3, [sp, #4]
  0002c		 |$LN3@IS_IOPAD_E|
  0002c	e59f3060	 ldr         r3, [pc, #0x60]
  00030	e5933000	 ldr         r3, [r3]
  00034	e2833004	 add         r3, r3, #4
  00038	e59d2004	 ldr         r2, [sp, #4]
  0003c	e5933000	 ldr         r3, [r3]
  00040	e1520003	 cmp         r2, r3
  00044	2a00000d	 bcs         |$LN1@IS_IOPAD_E|

; 59   :     {    
; 60   :         dwVal |= g_pIntr->pGpioCtxt[i].padWakeupEvent;

  00048	e59f3044	 ldr         r3, [pc, #0x44]
  0004c	e5933000	 ldr         r3, [r3]
  00050	e2830008	 add         r0, r3, #8
  00054	e59d1004	 ldr         r1, [sp, #4]
  00058	e3a03020	 mov         r3, #0x20
  0005c	e0020391	 mul         r2, r1, r3
  00060	e5903000	 ldr         r3, [r0]
  00064	e0833002	 add         r3, r3, r2
  00068	e283301c	 add         r3, r3, #0x1C
  0006c	e59d2000	 ldr         r2, [sp]
  00070	e5933000	 ldr         r3, [r3]
  00074	e1823003	 orr         r3, r2, r3
  00078	e58d3000	 str         r3, [sp]

; 61   :     }

  0007c	eaffffe7	 b           |$LN2@IS_IOPAD_E|
  00080		 |$LN1@IS_IOPAD_E|

; 62   : 
; 63   :     return dwVal;

  00080	e59d3000	 ldr         r3, [sp]
  00084	e58d3008	 str         r3, [sp, #8]

; 64   : }

  00088	e59d0008	 ldr         r0, [sp, #8]
  0008c	e28dd00c	 add         sp, sp, #0xC
  00090	e12fff1e	 bx          lr
  00094		 |$LN9@IS_IOPAD_E|
  00094		 |$LN10@IS_IOPAD_E|
  00094	00000000	 DCD         |g_pIntr|
  00098		 |$M47206|

			 ENDP  ; |IS_IOPAD_EVENT_PENDING|

	EXPORT	|PrcmCapturePrevPowerState|

  00008			 AREA	 |.pdata|, PDATA
|$T47215| DCD	|$LN5@PrcmCaptur|
	DCD	0x40000100
; Function compile flags: /Odtp

  00098			 AREA	 |.text|, CODE, ARM

  00098		 |PrcmCapturePrevPowerState| PROC

; 192  : {

  00098		 |$LN5@PrcmCaptur|
  00098		 |$M47212|

; 193  :     // Stub, nothing to do on AM3517
; 194  : }

  00098	e12fff1e	 bx          lr
  0009c		 |$M47213|

			 ENDP  ; |PrcmCapturePrevPowerState|

	EXPORT	|PrcmProfilePrevPowerState|

  00010			 AREA	 |.pdata|, PDATA
|$T47220| DCD	|$LN5@PrcmProfil|
	DCD	0x40000503
; Function compile flags: /Odtp

  0009c			 AREA	 |.text|, CODE, ARM

  0009c		 |PrcmProfilePrevPowerState| PROC

; 202  : {

  0009c		 |$LN5@PrcmProfil|
  0009c	e1a0c00d	 mov         r12, sp
  000a0	e92d0003	 stmdb       sp!, {r0, r1}
  000a4	e92d5000	 stmdb       sp!, {r12, lr}
  000a8		 |$M47217|

; 203  :     UNREFERENCED_PARAMETER(timer_val);
; 204  :     UNREFERENCED_PARAMETER(wakeup_delay);
; 205  :     // Stub, nothing to do on AM3517
; 206  : }

  000a8	e89d6000	 ldmia       sp, {sp, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M47218|

			 ENDP  ; |PrcmProfilePrevPowerState|

	EXPORT	|PrcmInitializePrevPowerState|

  00018			 AREA	 |.pdata|, PDATA
|$T47225| DCD	|$LN5@PrcmInitia|
	DCD	0x40000100
; Function compile flags: /Odtp

  000b0			 AREA	 |.text|, CODE, ARM

  000b0		 |PrcmInitializePrevPowerState| PROC

; 211  : {

  000b0		 |$LN5@PrcmInitia|
  000b0		 |$M47222|

; 212  :     // Stub, nothing to do on AM3517
; 213  : }

  000b0	e12fff1e	 bx          lr
  000b4		 |$M47223|

			 ENDP  ; |PrcmInitializePrevPowerState|

	EXPORT	|GetCmRegisterSet|

  00020			 AREA	 |.pdata|, PDATA
|$T47242| DCD	|$LN27@GetCmRegis|
	DCD	0x40005304
; Function compile flags: /Odtp

  000b4			 AREA	 |.text|, CODE, ARM

  000b4		 |GetCmRegisterSet| PROC

; 220  : {

  000b4		 |$LN27@GetCmRegis|
  000b4	e1a0c00d	 mov         r12, sp
  000b8	e92d0001	 stmdb       sp!, {r0}
  000bc	e92d5000	 stmdb       sp!, {r12, lr}
  000c0	e24dd008	 sub         sp, sp, #8
  000c4		 |$M47239|

; 221  :     switch (powerDomain)

  000c4	e59d3010	 ldr         r3, [sp, #0x10]
  000c8	e58d3004	 str         r3, [sp, #4]
  000cc	e59d3004	 ldr         r3, [sp, #4]
  000d0	e3530008	 cmp         r3, #8
  000d4	8a000042	 bhi         |$LN10@GetCmRegis|
  000d8	e59d2004	 ldr         r2, [sp, #4]
  000dc	e1a03102	 mov         r3, r2, lsl #2
  000e0	e083300f	 add         r3, r3, pc
  000e4	e5933004	 ldr         r3, [r3, #4]
  000e8	e08ff003	 add         pc, pc, r3
  000ec		 |$LN15@GetCmRegis|
  000ec		 |$LN14@GetCmRegis|
  000ec		 |$LN16@GetCmRegis|
  000ec	00000020	 DCD         0x20
  000f0		 |$LN17@GetCmRegis|
  000f0	00000034	 DCD         0x34
  000f4		 |$LN18@GetCmRegis|
  000f4	0000004c	 DCD         0x4c
  000f8		 |$LN19@GetCmRegis|
  000f8	00000064	 DCD         0x64
  000fc		 |$LN20@GetCmRegis|
  000fc	0000007c	 DCD         0x7c
  00100		 |$LN21@GetCmRegis|
  00100	00000094	 DCD         0x94
  00104		 |$LN22@GetCmRegis|
  00104	000000ac	 DCD         0xac
  00108		 |$LN23@GetCmRegis|
  00108	000000c4	 DCD         0xc4
  0010c		 |$LN24@GetCmRegis|
  0010c	000000dc	 DCD         0xdc
  00110		 |$LN9@GetCmRegis|

; 222  :         {
; 223  :         case POWERDOMAIN_WAKEUP:
; 224  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_WKUP_CM;

  00110	e59f30e4	 ldr         r3, [pc, #0xE4]
  00114	e5933000	 ldr         r3, [r3]
  00118	e5933000	 ldr         r3, [r3]
  0011c	e58d3000	 str         r3, [sp]
  00120	ea000031	 b           |$LN12@GetCmRegis|
  00124		 |$LN8@GetCmRegis|

; 225  : 
; 226  :         case POWERDOMAIN_CORE:
; 227  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_CORE_CM;

  00124	e59f30d0	 ldr         r3, [pc, #0xD0]
  00128	e5933000	 ldr         r3, [r3]
  0012c	e2833004	 add         r3, r3, #4
  00130	e5933000	 ldr         r3, [r3]
  00134	e58d3000	 str         r3, [sp]
  00138	ea00002b	 b           |$LN12@GetCmRegis|
  0013c		 |$LN7@GetCmRegis|

; 228  : 
; 229  :         case POWERDOMAIN_PERIPHERAL:
; 230  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_PER_CM;

  0013c	e59f30b8	 ldr         r3, [pc, #0xB8]
  00140	e5933000	 ldr         r3, [r3]
  00144	e2833008	 add         r3, r3, #8
  00148	e5933000	 ldr         r3, [r3]
  0014c	e58d3000	 str         r3, [sp]
  00150	ea000025	 b           |$LN12@GetCmRegis|
  00154		 |$LN6@GetCmRegis|

; 231  : 
; 232  :         case POWERDOMAIN_USBHOST:
; 233  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_USBHOST_CM;

  00154	e59f30a0	 ldr         r3, [pc, #0xA0]
  00158	e5933000	 ldr         r3, [r3]
  0015c	e283300c	 add         r3, r3, #0xC
  00160	e5933000	 ldr         r3, [r3]
  00164	e58d3000	 str         r3, [sp]
  00168	ea00001f	 b           |$LN12@GetCmRegis|
  0016c		 |$LN5@GetCmRegis|

; 234  : 
; 235  :         case POWERDOMAIN_EMULATION:
; 236  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_EMU_CM;

  0016c	e59f3088	 ldr         r3, [pc, #0x88]
  00170	e5933000	 ldr         r3, [r3]
  00174	e2833010	 add         r3, r3, #0x10
  00178	e5933000	 ldr         r3, [r3]
  0017c	e58d3000	 str         r3, [sp]
  00180	ea000019	 b           |$LN12@GetCmRegis|
  00184		 |$LN4@GetCmRegis|

; 237  : 
; 238  :         case POWERDOMAIN_MPU:
; 239  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_MPU_CM;

  00184	e59f3070	 ldr         r3, [pc, #0x70]
  00188	e5933000	 ldr         r3, [r3]
  0018c	e2833014	 add         r3, r3, #0x14
  00190	e5933000	 ldr         r3, [r3]
  00194	e58d3000	 str         r3, [sp]
  00198	ea000013	 b           |$LN12@GetCmRegis|
  0019c		 |$LN3@GetCmRegis|

; 240  : 
; 241  :         case POWERDOMAIN_DSS:
; 242  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_DSS_CM;

  0019c	e59f3058	 ldr         r3, [pc, #0x58]
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e2833018	 add         r3, r3, #0x18
  001a8	e5933000	 ldr         r3, [r3]
  001ac	e58d3000	 str         r3, [sp]
  001b0	ea00000d	 b           |$LN12@GetCmRegis|
  001b4		 |$LN2@GetCmRegis|

; 243  : 
; 244  :         case POWERDOMAIN_NEON:
; 245  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_NEON_CM;

  001b4	e59f3040	 ldr         r3, [pc, #0x40]
  001b8	e5933000	 ldr         r3, [r3]
  001bc	e283301c	 add         r3, r3, #0x1C
  001c0	e5933000	 ldr         r3, [r3]
  001c4	e58d3000	 str         r3, [sp]
  001c8	ea000007	 b           |$LN12@GetCmRegis|
  001cc		 |$LN1@GetCmRegis|

; 246  : 
; 247  :         case POWERDOMAIN_SGX:
; 248  :             return (OMAP_CM_REGS*)g_pPrcmCm->pOMAP_SGX_CM;

  001cc	e59f3028	 ldr         r3, [pc, #0x28]
  001d0	e5933000	 ldr         r3, [r3]
  001d4	e2833020	 add         r3, r3, #0x20
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e58d3000	 str         r3, [sp]
  001e0	ea000001	 b           |$LN12@GetCmRegis|
  001e4		 |$LN10@GetCmRegis|

; 249  :         }
; 250  : 
; 251  :     return NULL;

  001e4	e3a03000	 mov         r3, #0
  001e8	e58d3000	 str         r3, [sp]
  001ec		 |$LN12@GetCmRegis|

; 252  : }

  001ec	e59d0000	 ldr         r0, [sp]
  001f0	e28dd008	 add         sp, sp, #8
  001f4	e89d6000	 ldmia       sp, {sp, lr}
  001f8	e12fff1e	 bx          lr
  001fc		 |$LN28@GetCmRegis|
  001fc		 |$LN29@GetCmRegis|
  001fc	00000000	 DCD         |g_pPrcmCm|
  00200		 |$M47240|

			 ENDP  ; |GetCmRegisterSet|

	EXPORT	|GetPrmRegisterSet|

  00028			 AREA	 |.pdata|, PDATA
|$T47261| DCD	|$LN27@GetPrmRegi|
	DCD	0x40005304
; Function compile flags: /Odtp

  00200			 AREA	 |.text|, CODE, ARM

  00200		 |GetPrmRegisterSet| PROC

; 259  : {

  00200		 |$LN27@GetPrmRegi|
  00200	e1a0c00d	 mov         r12, sp
  00204	e92d0001	 stmdb       sp!, {r0}
  00208	e92d5000	 stmdb       sp!, {r12, lr}
  0020c	e24dd008	 sub         sp, sp, #8
  00210		 |$M47258|

; 260  :     switch (powerDomain)

  00210	e59d3010	 ldr         r3, [sp, #0x10]
  00214	e58d3004	 str         r3, [sp, #4]
  00218	e59d3004	 ldr         r3, [sp, #4]
  0021c	e3530008	 cmp         r3, #8
  00220	8a000042	 bhi         |$LN10@GetPrmRegi|
  00224	e59d2004	 ldr         r2, [sp, #4]
  00228	e1a03102	 mov         r3, r2, lsl #2
  0022c	e083300f	 add         r3, r3, pc
  00230	e5933004	 ldr         r3, [r3, #4]
  00234	e08ff003	 add         pc, pc, r3
  00238		 |$LN15@GetPrmRegi|
  00238		 |$LN14@GetPrmRegi|
  00238		 |$LN16@GetPrmRegi|
  00238	00000020	 DCD         0x20
  0023c		 |$LN17@GetPrmRegi|
  0023c	00000034	 DCD         0x34
  00240		 |$LN18@GetPrmRegi|
  00240	0000004c	 DCD         0x4c
  00244		 |$LN19@GetPrmRegi|
  00244	00000064	 DCD         0x64
  00248		 |$LN20@GetPrmRegi|
  00248	0000007c	 DCD         0x7c
  0024c		 |$LN21@GetPrmRegi|
  0024c	00000094	 DCD         0x94
  00250		 |$LN22@GetPrmRegi|
  00250	000000ac	 DCD         0xac
  00254		 |$LN23@GetPrmRegi|
  00254	000000c4	 DCD         0xc4
  00258		 |$LN24@GetPrmRegi|
  00258	000000dc	 DCD         0xdc
  0025c		 |$LN9@GetPrmRegi|

; 261  :         {
; 262  :         case POWERDOMAIN_WAKEUP:
; 263  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_WKUP_PRM;

  0025c	e59f30e4	 ldr         r3, [pc, #0xE4]
  00260	e5933000	 ldr         r3, [r3]
  00264	e5933000	 ldr         r3, [r3]
  00268	e58d3000	 str         r3, [sp]
  0026c	ea000031	 b           |$LN12@GetPrmRegi|
  00270		 |$LN8@GetPrmRegi|

; 264  : 
; 265  :         case POWERDOMAIN_CORE:
; 266  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_CORE_PRM;

  00270	e59f30d0	 ldr         r3, [pc, #0xD0]
  00274	e5933000	 ldr         r3, [r3]
  00278	e2833004	 add         r3, r3, #4
  0027c	e5933000	 ldr         r3, [r3]
  00280	e58d3000	 str         r3, [sp]
  00284	ea00002b	 b           |$LN12@GetPrmRegi|
  00288		 |$LN7@GetPrmRegi|

; 267  : 
; 268  :         case POWERDOMAIN_PERIPHERAL:
; 269  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_PER_PRM;

  00288	e59f30b8	 ldr         r3, [pc, #0xB8]
  0028c	e5933000	 ldr         r3, [r3]
  00290	e2833008	 add         r3, r3, #8
  00294	e5933000	 ldr         r3, [r3]
  00298	e58d3000	 str         r3, [sp]
  0029c	ea000025	 b           |$LN12@GetPrmRegi|
  002a0		 |$LN6@GetPrmRegi|

; 270  : 
; 271  :         case POWERDOMAIN_USBHOST:
; 272  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_USBHOST_PRM;

  002a0	e59f30a0	 ldr         r3, [pc, #0xA0]
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e283300c	 add         r3, r3, #0xC
  002ac	e5933000	 ldr         r3, [r3]
  002b0	e58d3000	 str         r3, [sp]
  002b4	ea00001f	 b           |$LN12@GetPrmRegi|
  002b8		 |$LN5@GetPrmRegi|

; 273  : 
; 274  :         case POWERDOMAIN_EMULATION:
; 275  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_EMU_PRM;

  002b8	e59f3088	 ldr         r3, [pc, #0x88]
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e2833010	 add         r3, r3, #0x10
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e58d3000	 str         r3, [sp]
  002cc	ea000019	 b           |$LN12@GetPrmRegi|
  002d0		 |$LN4@GetPrmRegi|

; 276  : 
; 277  :         case POWERDOMAIN_MPU:
; 278  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_MPU_PRM;

  002d0	e59f3070	 ldr         r3, [pc, #0x70]
  002d4	e5933000	 ldr         r3, [r3]
  002d8	e2833014	 add         r3, r3, #0x14
  002dc	e5933000	 ldr         r3, [r3]
  002e0	e58d3000	 str         r3, [sp]
  002e4	ea000013	 b           |$LN12@GetPrmRegi|
  002e8		 |$LN3@GetPrmRegi|

; 279  : 
; 280  :         case POWERDOMAIN_DSS:
; 281  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_DSS_PRM;

  002e8	e59f3058	 ldr         r3, [pc, #0x58]
  002ec	e5933000	 ldr         r3, [r3]
  002f0	e2833018	 add         r3, r3, #0x18
  002f4	e5933000	 ldr         r3, [r3]
  002f8	e58d3000	 str         r3, [sp]
  002fc	ea00000d	 b           |$LN12@GetPrmRegi|
  00300		 |$LN2@GetPrmRegi|

; 282  : 
; 283  :         case POWERDOMAIN_NEON:
; 284  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_NEON_PRM;

  00300	e59f3040	 ldr         r3, [pc, #0x40]
  00304	e5933000	 ldr         r3, [r3]
  00308	e283301c	 add         r3, r3, #0x1C
  0030c	e5933000	 ldr         r3, [r3]
  00310	e58d3000	 str         r3, [sp]
  00314	ea000007	 b           |$LN12@GetPrmRegi|
  00318		 |$LN1@GetPrmRegi|

; 285  : 
; 286  :         case POWERDOMAIN_SGX:
; 287  :             return (OMAP_PRM_REGS*)g_pPrcmPrm->pOMAP_SGX_PRM;

  00318	e59f3028	 ldr         r3, [pc, #0x28]
  0031c	e5933000	 ldr         r3, [r3]
  00320	e2833020	 add         r3, r3, #0x20
  00324	e5933000	 ldr         r3, [r3]
  00328	e58d3000	 str         r3, [sp]
  0032c	ea000001	 b           |$LN12@GetPrmRegi|
  00330		 |$LN10@GetPrmRegi|

; 288  :         }
; 289  : 
; 290  :     return NULL;

  00330	e3a03000	 mov         r3, #0
  00334	e58d3000	 str         r3, [sp]
  00338		 |$LN12@GetPrmRegi|

; 291  : }

  00338	e59d0000	 ldr         r0, [sp]
  0033c	e28dd008	 add         sp, sp, #8
  00340	e89d6000	 ldmia       sp, {sp, lr}
  00344	e12fff1e	 bx          lr
  00348		 |$LN28@GetPrmRegi|
  00348		 |$LN29@GetPrmRegi|
  00348	00000000	 DCD         |g_pPrcmPrm|
  0034c		 |$M47259|

			 ENDP  ; |GetPrmRegisterSet|

	EXPORT	|Unlock|
	EXPORT	|Lock|
	EXPORT	|PrcmInterruptEnable|

  00030			 AREA	 |.pdata|, PDATA
|$T47271| DCD	|$LN7@PrcmInterr|
	DCD	0x40002c04
; Function compile flags: /Odtp

  0034c			 AREA	 |.text|, CODE, ARM

  0034c		 |PrcmInterruptEnable| PROC

; 299  : {

  0034c		 |$LN7@PrcmInterr|
  0034c	e1a0c00d	 mov         r12, sp
  00350	e92d0003	 stmdb       sp!, {r0, r1}
  00354	e92d5000	 stmdb       sp!, {r12, lr}
  00358	e24dd00c	 sub         sp, sp, #0xC
  0035c		 |$M47268|

; 300  :     UINT val;
; 301  :     Lock(Mutex_Intr);

  0035c	e3a00005	 mov         r0, #5
  00360	eb000000	 bl          Lock

; 302  : 
; 303  :     // enable/disable prcm interrupts
; 304  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQENABLE_MPU);

  00364	e59f308c	 ldr         r3, [pc, #0x8C]
  00368	e5933000	 ldr         r3, [r3]
  0036c	e2833028	 add         r3, r3, #0x28
  00370	e5933000	 ldr         r3, [r3]
  00374	e283301c	 add         r3, r3, #0x1C
  00378	e5933000	 ldr         r3, [r3]
  0037c	e58d3000	 str         r3, [sp]

; 305  :     val = (bEnable != FALSE) ? (val | mask) : (val & ~mask);

  00380	e59d3018	 ldr         r3, [sp, #0x18]
  00384	e3530000	 cmp         r3, #0
  00388	0a000004	 beq         |$LN3@PrcmInterr|
  0038c	e59d2000	 ldr         r2, [sp]
  00390	e59d3014	 ldr         r3, [sp, #0x14]
  00394	e1823003	 orr         r3, r2, r3
  00398	e58d3008	 str         r3, [sp, #8]
  0039c	ea000004	 b           |$LN4@PrcmInterr|
  003a0		 |$LN3@PrcmInterr|
  003a0	e59d3014	 ldr         r3, [sp, #0x14]
  003a4	e1e02003	 mvn         r2, r3
  003a8	e59d3000	 ldr         r3, [sp]
  003ac	e0033002	 and         r3, r3, r2
  003b0	e58d3008	 str         r3, [sp, #8]
  003b4		 |$LN4@PrcmInterr|
  003b4	e59d3008	 ldr         r3, [sp, #8]
  003b8	e58d3000	 str         r3, [sp]

; 306  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQENABLE_MPU, val);

  003bc	e59f3034	 ldr         r3, [pc, #0x34]
  003c0	e5933000	 ldr         r3, [r3]
  003c4	e2833028	 add         r3, r3, #0x28
  003c8	e5933000	 ldr         r3, [r3]
  003cc	e283201c	 add         r2, r3, #0x1C
  003d0	e59d3000	 ldr         r3, [sp]
  003d4	e5823000	 str         r3, [r2]

; 307  : 
; 308  :     Unlock(Mutex_Intr);

  003d8	e3a00005	 mov         r0, #5
  003dc	eb000000	 bl          Unlock

; 309  :     return val;

  003e0	e59d3000	 ldr         r3, [sp]
  003e4	e58d3004	 str         r3, [sp, #4]

; 310  : }

  003e8	e59d0004	 ldr         r0, [sp, #4]
  003ec	e28dd00c	 add         sp, sp, #0xC
  003f0	e89d6000	 ldmia       sp, {sp, lr}
  003f4	e12fff1e	 bx          lr
  003f8		 |$LN8@PrcmInterr|
  003f8		 |$LN9@PrcmInterr|
  003f8	00000000	 DCD         |g_pPrcmPrm|
  003fc		 |$M47269|

			 ENDP  ; |PrcmInterruptEnable|

	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T47278| DCD	|$LN6@Lock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 266  : {

  00000		 |$LN6@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47275|

; 267  :     if (g_PrcmPostInit && !g_bSingleThreaded) 

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Lock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Lock|

; 268  :         {
; 269  :         EnterCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          EnterCriticalSection
  00044		 |$LN1@Lock|

; 270  :         }
; 271  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Lock|
  0004c		 |$LN8@Lock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Lock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Lock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M47276|

			 ENDP  ; |Lock|

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T47289| DCD	|$LN6@Unlock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 277  : {

  00000		 |$LN6@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47286|

; 278  :     if (g_PrcmPostInit && !g_bSingleThreaded)

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Unlock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Unlock|

; 279  :         {
; 280  :         LeaveCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          LeaveCriticalSection
  00044		 |$LN1@Unlock|

; 281  :         }
; 282  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Unlock|
  0004c		 |$LN8@Unlock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Unlock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Unlock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M47287|

			 ENDP  ; |Unlock|

	EXPORT	|PrcmInterruptClearStatus|

  00038			 AREA	 |.pdata|, PDATA
|$T47301| DCD	|$LN5@PrcmInterr@2|
	DCD	0x40002604
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm.c

  003fc			 AREA	 |.text|, CODE, ARM

  003fc		 |PrcmInterruptClearStatus| PROC

; 317  : {

  003fc		 |$LN5@PrcmInterr@2|
  003fc	e1a0c00d	 mov         r12, sp
  00400	e92d0001	 stmdb       sp!, {r0}
  00404	e92d5000	 stmdb       sp!, {r12, lr}
  00408	e24dd008	 sub         sp, sp, #8
  0040c		 |$M47298|

; 318  :     UINT val;
; 319  : 
; 320  :     // This routine should only be called during system boot-up or
; 321  :     // from OEMIdle.  Hence, serialization within this routine
; 322  :     // should not be performed.
; 323  : 
; 324  :     // clear prcm interrupt status
; 325  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  0040c	e59f307c	 ldr         r3, [pc, #0x7C]
  00410	e5933000	 ldr         r3, [r3]
  00414	e2833028	 add         r3, r3, #0x28
  00418	e5933000	 ldr         r3, [r3]
  0041c	e2833018	 add         r3, r3, #0x18
  00420	e5933000	 ldr         r3, [r3]
  00424	e58d3000	 str         r3, [sp]

; 326  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, val & mask);

  00428	e59d2000	 ldr         r2, [sp]
  0042c	e59d3010	 ldr         r3, [sp, #0x10]
  00430	e0022003	 and         r2, r2, r3
  00434	e59f3054	 ldr         r3, [pc, #0x54]
  00438	e5933000	 ldr         r3, [r3]
  0043c	e2833028	 add         r3, r3, #0x28
  00440	e5933000	 ldr         r3, [r3]
  00444	e2833018	 add         r3, r3, #0x18
  00448	e5832000	 str         r2, [r3]

; 327  : 
; 328  :     // wakeup
; 329  :     OUTREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP,
; 330  :         INREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP) | CM_CLKEN_IO
; 331  :         );

  0044c	e59f303c	 ldr         r3, [pc, #0x3C]
  00450	e5933000	 ldr         r3, [r3]
  00454	e5933000	 ldr         r3, [r3]
  00458	e28330b0	 add         r3, r3, #0xB0
  0045c	e5933000	 ldr         r3, [r3]
  00460	e3832c01	 orr         r2, r3, #1, 24
  00464	e59f3024	 ldr         r3, [pc, #0x24]
  00468	e5933000	 ldr         r3, [r3]
  0046c	e5933000	 ldr         r3, [r3]
  00470	e28330b0	 add         r3, r3, #0xB0
  00474	e5832000	 str         r2, [r3]

; 332  : 
; 333  :     // return the status prior to clearing the status
; 334  :     return val;

  00478	e59d3000	 ldr         r3, [sp]
  0047c	e58d3004	 str         r3, [sp, #4]

; 335  : }

  00480	e59d0004	 ldr         r0, [sp, #4]
  00484	e28dd008	 add         sp, sp, #8
  00488	e89d6000	 ldmia       sp, {sp, lr}
  0048c	e12fff1e	 bx          lr
  00490		 |$LN6@PrcmInterr@2|
  00490		 |$LN7@PrcmInterr@2|
  00490	00000000	 DCD         |g_pPrcmPrm|
  00494		 |$M47299|

			 ENDP  ; |PrcmInterruptClearStatus|

	EXPORT	|PrcmInterruptProcess|

  00040			 AREA	 |.pdata|, PDATA
|$T47309| DCD	|$LN15@PrcmInterr@3|
	DCD	0x40007704
; Function compile flags: /Odtp

  00494			 AREA	 |.text|, CODE, ARM

  00494		 |PrcmInterruptProcess| PROC

; 342  : {

  00494		 |$LN15@PrcmInterr@3|
  00494	e1a0c00d	 mov         r12, sp
  00498	e92d0001	 stmdb       sp!, {r0}
  0049c	e92d5000	 stmdb       sp!, {r12, lr}
  004a0	e24dd024	 sub         sp, sp, #0x24
  004a4		 |$M47306|

; 343  :     UINT val;
; 344  :     UINT32 gpioMask;
; 345  :     UINT32 *pStatus;
; 346  :     UINT8 gpioGroup;
; 347  :     UINT irq;
; 348  :     UINT sysIntr = SYSINTR_NOP;

  004a4	e3a03000	 mov         r3, #0
  004a8	e58d3000	 str         r3, [sp]

; 349  : 
; 350  :     // This routine should only be called during system boot-up or
; 351  :     // from OEMIdle.  Hence, serialization within this routine
; 352  :     // should not be performed.
; 353  : 
; 354  :     // clear prcm interrupt status
; 355  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  004ac	e59f31b4	 ldr         r3, [pc, #0x1B4]
  004b0	e5933000	 ldr         r3, [r3]
  004b4	e2833028	 add         r3, r3, #0x28
  004b8	e5933000	 ldr         r3, [r3]
  004bc	e2833018	 add         r3, r3, #0x18
  004c0	e5933000	 ldr         r3, [r3]
  004c4	e58d3008	 str         r3, [sp, #8]

; 356  : 
; 357  :     if (val & PRM_IRQENABLE_IO_EN)

  004c8	e59d3008	 ldr         r3, [sp, #8]
  004cc	e3130c02	 tst         r3, #2, 24
  004d0	0a000045	 beq         |$LN10@PrcmInterr@3|

; 358  :         {
; 359  :         // Check if there is a GPIO IO pad event occured and return the
; 360  :         // corresponding IRQ number.
; 361  : 
; 362  :         if (IS_IOPAD_EVENT_PENDING())// || TODO ADD

  004d4	eb000000	 bl          IS_IOPAD_EVENT_PENDING
  004d8	e58d001c	 str         r0, [sp, #0x1C]
  004dc	e59d301c	 ldr         r3, [sp, #0x1C]
  004e0	e3530000	 cmp         r3, #0
  004e4	0a000040	 beq         |$LN9@PrcmInterr@3|

; 363  :                                      //OEMGetIOPadWakeupStatus(s_rgPadWakeupEvents))
; 364  :             {
; 365  :                 // Process the events
; 366  :                 for (gpioGroup = 1; gpioGroup < g_pIntr->nbGpioBank; gpioGroup++)

  004e8	e3a03001	 mov         r3, #1
  004ec	e5cd3014	 strb        r3, [sp, #0x14]
  004f0	ea000003	 b           |$LN8@PrcmInterr@3|
  004f4		 |$LN7@PrcmInterr@3|
  004f4	e5dd3014	 ldrb        r3, [sp, #0x14]
  004f8	e2833001	 add         r3, r3, #1
  004fc	e20330ff	 and         r3, r3, #0xFF
  00500	e5cd3014	 strb        r3, [sp, #0x14]
  00504		 |$LN8@PrcmInterr@3|
  00504	e5dd2014	 ldrb        r2, [sp, #0x14]
  00508	e59f315c	 ldr         r3, [pc, #0x15C]
  0050c	e5933000	 ldr         r3, [r3]
  00510	e2833004	 add         r3, r3, #4
  00514	e5933000	 ldr         r3, [r3]
  00518	e1520003	 cmp         r2, r3
  0051c	2a000032	 bcs         |$LN6@PrcmInterr@3|

; 367  :                 {
; 368  :                     irq = g_pIntr->pGpioCtxt[gpioGroup].irq_start;//IRQ_GPIO_0 + (gpioGroup * 32);

  00520	e59f3144	 ldr         r3, [pc, #0x144]
  00524	e5933000	 ldr         r3, [r3]
  00528	e2830008	 add         r0, r3, #8
  0052c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00530	e1a01003	 mov         r1, r3
  00534	e3a03020	 mov         r3, #0x20
  00538	e0020391	 mul         r2, r1, r3
  0053c	e5903000	 ldr         r3, [r0]
  00540	e0833002	 add         r3, r3, r2
  00544	e5933000	 ldr         r3, [r3]
  00548	e58d3004	 str         r3, [sp, #4]

; 369  :                     pStatus = &g_pIntr->pGpioCtxt[gpioGroup].padWakeupEvent;//&(s_rgPadWakeupEvents[gpioGroup]);

  0054c	e59f3118	 ldr         r3, [pc, #0x118]
  00550	e5933000	 ldr         r3, [r3]
  00554	e2830008	 add         r0, r3, #8
  00558	e5dd3014	 ldrb        r3, [sp, #0x14]
  0055c	e1a01003	 mov         r1, r3
  00560	e3a03020	 mov         r3, #0x20
  00564	e0020391	 mul         r2, r1, r3
  00568	e5903000	 ldr         r3, [r0]
  0056c	e0833002	 add         r3, r3, r2
  00570	e283301c	 add         r3, r3, #0x1C
  00574	e58d300c	 str         r3, [sp, #0xC]

; 370  : 
; 371  :                     for (gpioMask = 1; gpioMask != 0; gpioMask <<= 1, irq++)

  00578	e3a03001	 mov         r3, #1
  0057c	e58d3010	 str         r3, [sp, #0x10]
  00580	ea000005	 b           |$LN5@PrcmInterr@3|
  00584		 |$LN4@PrcmInterr@3|
  00584	e59d3010	 ldr         r3, [sp, #0x10]
  00588	e1a03083	 mov         r3, r3, lsl #1
  0058c	e58d3010	 str         r3, [sp, #0x10]
  00590	e59d3004	 ldr         r3, [sp, #4]
  00594	e2833001	 add         r3, r3, #1
  00598	e58d3004	 str         r3, [sp, #4]
  0059c		 |$LN5@PrcmInterr@3|
  0059c	e59d3010	 ldr         r3, [sp, #0x10]
  005a0	e3530000	 cmp         r3, #0
  005a4	0a00000f	 beq         |$LN3@PrcmInterr@3|

; 372  :                     {
; 373  :                         if ((gpioMask & *pStatus) != 0)

  005a8	e59d2010	 ldr         r2, [sp, #0x10]
  005ac	e59d300c	 ldr         r3, [sp, #0xC]
  005b0	e5933000	 ldr         r3, [r3]
  005b4	e1120003	 tst         r2, r3
  005b8	0a000009	 beq         |$LN2@PrcmInterr@3|

; 374  :                         {
; 375  :                             *pStatus &= ~gpioMask;

  005bc	e59d3010	 ldr         r3, [sp, #0x10]
  005c0	e1e02003	 mvn         r2, r3
  005c4	e59d300c	 ldr         r3, [sp, #0xC]
  005c8	e5933000	 ldr         r3, [r3]
  005cc	e0032002	 and         r2, r3, r2
  005d0	e59d300c	 ldr         r3, [sp, #0xC]
  005d4	e5832000	 str         r2, [r3]

; 376  :                             sysIntr = irq;

  005d8	e59d3004	 ldr         r3, [sp, #4]
  005dc	e58d3000	 str         r3, [sp]

; 377  :                             goto IOPadIntrProcessDone;

  005e0	ea000001	 b           |$IOPadIntrProcessDone$46905|
  005e4		 |$LN2@PrcmInterr@3|

; 378  :                         }
; 379  :                     }

  005e4	eaffffe6	 b           |$LN4@PrcmInterr@3|
  005e8		 |$LN3@PrcmInterr@3|

; 380  :                 }

  005e8	eaffffc1	 b           |$LN7@PrcmInterr@3|
  005ec		 |$LN6@PrcmInterr@3|
  005ec		 |$LN9@PrcmInterr@3|
  005ec		 |$LN10@PrcmInterr@3|
  005ec		 |$IOPadIntrProcessDone$46905|

; 381  :             }
; 382  :         }
; 383  : 
; 384  : IOPadIntrProcessDone:
; 385  : 
; 386  :     if (IS_IOPAD_EVENT_PENDING() == FALSE)

  005ec	eb000000	 bl          IS_IOPAD_EVENT_PENDING
  005f0	e58d0020	 str         r0, [sp, #0x20]
  005f4	e59d3020	 ldr         r3, [sp, #0x20]
  005f8	e3530000	 cmp         r3, #0
  005fc	1a000013	 bne         |$LN1@PrcmInterr@3|

; 387  :     {
; 388  :         OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, val & mask);

  00600	e59d2008	 ldr         r2, [sp, #8]
  00604	e59d302c	 ldr         r3, [sp, #0x2C]
  00608	e0022003	 and         r2, r2, r3
  0060c	e59f3054	 ldr         r3, [pc, #0x54]
  00610	e5933000	 ldr         r3, [r3]
  00614	e2833028	 add         r3, r3, #0x28
  00618	e5933000	 ldr         r3, [r3]
  0061c	e2833018	 add         r3, r3, #0x18
  00620	e5832000	 str         r2, [r3]

; 389  : 
; 390  :         OUTREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP,
; 391  :             INREG32(&g_pPrcmPrm->pOMAP_WKUP_PRM->PM_WKST_WKUP) | CM_CLKEN_IO
; 392  :             );

  00624	e59f303c	 ldr         r3, [pc, #0x3C]
  00628	e5933000	 ldr         r3, [r3]
  0062c	e5933000	 ldr         r3, [r3]
  00630	e28330b0	 add         r3, r3, #0xB0
  00634	e5933000	 ldr         r3, [r3]
  00638	e3832c01	 orr         r2, r3, #1, 24
  0063c	e59f3024	 ldr         r3, [pc, #0x24]
  00640	e5933000	 ldr         r3, [r3]
  00644	e5933000	 ldr         r3, [r3]
  00648	e28330b0	 add         r3, r3, #0xB0
  0064c	e5832000	 str         r2, [r3]
  00650		 |$LN1@PrcmInterr@3|

; 393  :     }
; 394  : 
; 395  :     // return the status prior to clearing the status
; 396  :     return sysIntr;

  00650	e59d3000	 ldr         r3, [sp]
  00654	e58d3018	 str         r3, [sp, #0x18]

; 397  : }

  00658	e59d0018	 ldr         r0, [sp, #0x18]
  0065c	e28dd024	 add         sp, sp, #0x24
  00660	e89d6000	 ldmia       sp, {sp, lr}
  00664	e12fff1e	 bx          lr
  00668		 |$LN16@PrcmInterr@3|
  00668		 |$LN17@PrcmInterr@3|
  00668	00000000	 DCD         |g_pPrcmPrm|
  0066c		 |$LN18@PrcmInterr@3|
  0066c	00000000	 DCD         |g_pIntr|
  00670		 |$M47307|

			 ENDP  ; |PrcmInterruptProcess|

	EXPORT	|??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALSRAMFnInit|
	IMPORT	|OEMCacheRangeFlush|
	IMPORT	|memcpy|
	IMPORT	|OALCPUEnd|
	IMPORT	|OALVAtoPA|
	IMPORT	|OALInvalidateTlb|
	IMPORT	|OALUpdateCoreFreq|
	IMPORT	|OALCPUStart|
	IMPORT	|OALCPUIdle|
	IMPORT	|dwOEMHighSecurity|
	IMPORT	|g_pTimerRegs|
	IMPORT	|g_pSDRCRegs|
	IMPORT	|dwOEMMPUContextRestore|
	IMPORT	|OALPAtoVA|
	IMPORT	|dwOEMSRAMStartOffset|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00048			 AREA	 |.pdata|, PDATA
|$T47322| DCD	|$LN9@OALSRAMFnI|
	DCD	0x4000c702

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, "F", 0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "S", 0x0, "R", 0x0, "A"
	DCB	0x0, "M", 0x0, "F", 0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00670			 AREA	 |.text|, CODE, ARM

  00670		 |OALSRAMFnInit| PROC

; 423  : {

  00670		 |$LN9@OALSRAMFnI|
  00670	e52de004	 str         lr, [sp, #-4]!
  00674	e24dd020	 sub         sp, sp, #0x20
  00678		 |$M47319|

; 424  :     pInvalidateTlb  fnInvalidateTlb;
; 425  : 
; 426  :     OALMSG(OAL_FUNC, (L"+OALSRAMFnInit()\r\n"));

  00678	e59f32c4	 ldr         r3, [pc, #0x2C4]
  0067c	e5933440	 ldr         r3, [r3, #0x440]
  00680	e3130004	 tst         r3, #4
  00684	0a000004	 beq         |$LN3@OALSRAMFnI|
  00688	e59f02f8	 ldr         r0, [pc, #0x2F8]
  0068c	eb000000	 bl          NKDbgPrintfW
  00690	e3a03001	 mov         r3, #1
  00694	e58d3008	 str         r3, [sp, #8]
  00698	ea000001	 b           |$LN4@OALSRAMFnI|
  0069c		 |$LN3@OALSRAMFnI|
  0069c	e3a03000	 mov         r3, #0
  006a0	e58d3008	 str         r3, [sp, #8]
  006a4		 |$LN4@OALSRAMFnI|

; 427  : 
; 428  : #pragma warning (push)
; 429  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 430  : 
; 431  :     // get reference to SRAM
; 432  :     fnCpuStart = OALPAtoVA(OMAP_SRAM_PA + dwOEMSRAMStartOffset, FALSE);

  006a4	e3a01000	 mov         r1, #0
  006a8	e59f32d4	 ldr         r3, [pc, #0x2D4]
  006ac	e5932000	 ldr         r2, [r3]
  006b0	e3a03101	 mov         r3, #1, 2
  006b4	e3833602	 orr         r3, r3, #2, 12
  006b8	e0820003	 add         r0, r2, r3
  006bc	eb000000	 bl          OALPAtoVA
  006c0	e58d000c	 str         r0, [sp, #0xC]
  006c4	e59d200c	 ldr         r2, [sp, #0xC]
  006c8	e59f3278	 ldr         r3, [pc, #0x278]
  006cc	e5832000	 str         r2, [r3]

; 433  : 
; 434  :     // initialize cpu idle data structure
; 435  :     g_pCPUInfo = (CPU_INFO*)OALPAtoVA(dwOEMMPUContextRestore, FALSE);

  006d0	e3a01000	 mov         r1, #0
  006d4	e59f3294	 ldr         r3, [pc, #0x294]
  006d8	e5930000	 ldr         r0, [r3]
  006dc	eb000000	 bl          OALPAtoVA
  006e0	e58d0010	 str         r0, [sp, #0x10]
  006e4	e59d2010	 ldr         r2, [sp, #0x10]
  006e8	e59f3268	 ldr         r3, [pc, #0x268]
  006ec	e5832000	 str         r2, [r3]

; 436  :     g_pCPUInfo->SDRC_REGS = (UINT)g_pSDRCRegs;

  006f0	e59f3288	 ldr         r3, [pc, #0x288]
  006f4	e5932000	 ldr         r2, [r3]
  006f8	e59f3258	 ldr         r3, [pc, #0x258]
  006fc	e5933000	 ldr         r3, [r3]
  00700	e5832000	 str         r2, [r3]

; 437  :     g_pCPUInfo->MPU_CM_REGS = (UINT)g_pPrcmCm->pOMAP_MPU_CM;

  00704	e59f3268	 ldr         r3, [pc, #0x268]
  00708	e5933000	 ldr         r3, [r3]
  0070c	e2831014	 add         r1, r3, #0x14
  00710	e59f3240	 ldr         r3, [pc, #0x240]
  00714	e5933000	 ldr         r3, [r3]
  00718	e2832004	 add         r2, r3, #4
  0071c	e5913000	 ldr         r3, [r1]
  00720	e5823000	 str         r3, [r2]

; 438  :     g_pCPUInfo->CORE_CM_REGS = (UINT)g_pPrcmCm->pOMAP_CORE_CM;

  00724	e59f3248	 ldr         r3, [pc, #0x248]
  00728	e5933000	 ldr         r3, [r3]
  0072c	e2831004	 add         r1, r3, #4
  00730	e59f3220	 ldr         r3, [pc, #0x220]
  00734	e5933000	 ldr         r3, [r3]
  00738	e2832008	 add         r2, r3, #8
  0073c	e5913000	 ldr         r3, [r1]
  00740	e5823000	 str         r3, [r2]

; 439  :     g_pCPUInfo->MPU_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_MPU_PRM;

  00744	e59f3230	 ldr         r3, [pc, #0x230]
  00748	e5933000	 ldr         r3, [r3]
  0074c	e2831014	 add         r1, r3, #0x14
  00750	e59f3200	 ldr         r3, [pc, #0x200]
  00754	e5933000	 ldr         r3, [r3]
  00758	e2832014	 add         r2, r3, #0x14
  0075c	e5913000	 ldr         r3, [r1]
  00760	e5823000	 str         r3, [r2]

; 440  :     g_pCPUInfo->CORE_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_CORE_PRM;

  00764	e59f3210	 ldr         r3, [pc, #0x210]
  00768	e5933000	 ldr         r3, [r3]
  0076c	e2831004	 add         r1, r3, #4
  00770	e59f31e0	 ldr         r3, [pc, #0x1E0]
  00774	e5933000	 ldr         r3, [r3]
  00778	e2832018	 add         r2, r3, #0x18
  0077c	e5913000	 ldr         r3, [r1]
  00780	e5823000	 str         r3, [r2]

; 441  : 	g_pCPUInfo->GLOBAL_PRM_REGS = (UINT)g_pPrcmPrm->pOMAP_GLOBAL_PRM;

  00784	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00788	e5933000	 ldr         r3, [r3]
  0078c	e2831024	 add         r1, r3, #0x24
  00790	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00794	e5933000	 ldr         r3, [r3]
  00798	e283201c	 add         r2, r3, #0x1C
  0079c	e5913000	 ldr         r3, [r1]
  007a0	e5823000	 str         r3, [r2]

; 442  :     g_pCPUInfo->GPTIMER_REGS = (UINT)g_pTimerRegs;

  007a4	e59f31ac	 ldr         r3, [pc, #0x1AC]
  007a8	e5933000	 ldr         r3, [r3]
  007ac	e2832010	 add         r2, r3, #0x10
  007b0	e59f31c0	 ldr         r3, [pc, #0x1C0]
  007b4	e5933000	 ldr         r3, [r3]
  007b8	e5823000	 str         r3, [r2]

; 443  :     g_pCPUInfo->CLOCK_CTRL_CM_REGS = (UINT)g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM;

  007bc	e59f31b0	 ldr         r3, [pc, #0x1B0]
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e283102c	 add         r1, r3, #0x2C
  007c8	e59f3188	 ldr         r3, [pc, #0x188]
  007cc	e5933000	 ldr         r3, [r3]
  007d0	e283200c	 add         r2, r3, #0xC
  007d4	e5913000	 ldr         r3, [r1]
  007d8	e5823000	 str         r3, [r2]

; 444  :     g_pCPUInfo->MPU_CONTEXT_VA = (UINT)g_pCPUInfo + sizeof(CPU_INFO);

  007dc	e59f3174	 ldr         r3, [pc, #0x174]
  007e0	e5933000	 ldr         r3, [r3]
  007e4	e283204c	 add         r2, r3, #0x4C
  007e8	e59f3168	 ldr         r3, [pc, #0x168]
  007ec	e5933000	 ldr         r3, [r3]
  007f0	e2833024	 add         r3, r3, #0x24
  007f4	e5832000	 str         r2, [r3]

; 445  :     g_pCPUInfo->MPU_CONTEXT_PA = (UINT)dwOEMMPUContextRestore + sizeof(CPU_INFO);

  007f8	e59f3170	 ldr         r3, [pc, #0x170]
  007fc	e5933000	 ldr         r3, [r3]
  00800	e283204c	 add         r2, r3, #0x4C
  00804	e59f314c	 ldr         r3, [pc, #0x14C]
  00808	e5933000	 ldr         r3, [r3]
  0080c	e2833020	 add         r3, r3, #0x20
  00810	e5832000	 str         r2, [r3]

; 446  :     g_pCPUInfo->OMAP_DEVICE_TYPE = dwOEMHighSecurity;

  00814	e59f313c	 ldr         r3, [pc, #0x13C]
  00818	e5933000	 ldr         r3, [r3]
  0081c	e2832034	 add         r2, r3, #0x34
  00820	e59f3144	 ldr         r3, [pc, #0x144]
  00824	e5933000	 ldr         r3, [r3]
  00828	e5823000	 str         r3, [r2]

; 447  : 
; 448  :     // Populate fnOALCPUIdle function pointer with SRAM address of
; 449  :     // OALCPUIdle function.
; 450  :     fnOALCPUIdle = (pCPUIdle)((UINT)fnCpuStart + 
; 451  :                                 ((UINT)OALCPUIdle - (UINT)OALCPUStart)); 

  0082c	e59f2134	 ldr         r2, [pc, #0x134]
  00830	e59f3114	 ldr         r3, [pc, #0x114]
  00834	e0422003	 sub         r2, r2, r3
  00838	e59f3108	 ldr         r3, [pc, #0x108]
  0083c	e5933000	 ldr         r3, [r3]
  00840	e0832002	 add         r2, r3, r2
  00844	e59f3108	 ldr         r3, [pc, #0x108]
  00848	e5832000	 str         r2, [r3]

; 452  :     
; 453  :     fnOALUpdateCoreFreq = (pOALUpdateCoreFreq)((UINT)fnCpuStart +
; 454  :                                 ((UINT)OALUpdateCoreFreq - (UINT)OALCPUStart));

  0084c	e59f2110	 ldr         r2, [pc, #0x110]
  00850	e59f30f4	 ldr         r3, [pc, #0xF4]
  00854	e0422003	 sub         r2, r2, r3
  00858	e59f30e8	 ldr         r3, [pc, #0xE8]
  0085c	e5933000	 ldr         r3, [r3]
  00860	e0832002	 add         r2, r3, r2
  00864	e59f30f4	 ldr         r3, [pc, #0xF4]
  00868	e5832000	 str         r2, [r3]

; 455  : 
; 456  :     // Populate fnTlbValidate function pointer with SDRAM address of
; 457  :     // OALInvalidateTlb function which will be called by restore.s 
; 458  :     // after mpu restore.
; 459  :     fnInvalidateTlb = OALPAtoVA(OALVAtoPA(OALInvalidateTlb), FALSE);

  0086c	e59f00e8	 ldr         r0, [pc, #0xE8]
  00870	eb000000	 bl          OALVAtoPA
  00874	e58d0014	 str         r0, [sp, #0x14]
  00878	e3a01000	 mov         r1, #0
  0087c	e59d0014	 ldr         r0, [sp, #0x14]
  00880	eb000000	 bl          OALPAtoVA
  00884	e58d0018	 str         r0, [sp, #0x18]
  00888	e59d3018	 ldr         r3, [sp, #0x18]
  0088c	e58d3000	 str         r3, [sp]

; 460  : 
; 461  :     // update the TLB Inv addr in cpuInfo
; 462  :     g_pCPUInfo->TLB_INV_FUNC_ADDR = (UINT)fnInvalidateTlb;

  00890	e59f30c0	 ldr         r3, [pc, #0xC0]
  00894	e5933000	 ldr         r3, [r3]
  00898	e2832030	 add         r2, r3, #0x30
  0089c	e59d3000	 ldr         r3, [sp]
  008a0	e5823000	 str         r3, [r2]

; 463  : 
; 464  :     // Kernel marks all uncached adress as "no execute", we need to clear
; 465  :     // it here since we're going to run some routines from non-cached memory
; 466  :     ClearXNBit(fnCpuStart);

  008a4	e59f309c	 ldr         r3, [pc, #0x9C]
  008a8	e5930000	 ldr         r0, [r3]
  008ac	eb000000	 bl          ClearXNBit

; 467  :     ClearXNBit(fnOALCPUIdle);

  008b0	e59f309c	 ldr         r3, [pc, #0x9C]
  008b4	e5930000	 ldr         r0, [r3]
  008b8	eb000000	 bl          ClearXNBit

; 468  :     ClearXNBit(fnInvalidateTlb);

  008bc	e59d0000	 ldr         r0, [sp]
  008c0	eb000000	 bl          ClearXNBit

; 469  : 
; 470  :     // We assume OALCPUStart code is *always* the first function in the
; 471  :     // group of routines which get copied to SRAM and OALCPULast is last
; 472  :     memcpy(fnCpuStart, OALCPUStart, (UINT)OALCPUEnd - (UINT)OALCPUStart);

  008c4	e59f2084	 ldr         r2, [pc, #0x84]
  008c8	e59f307c	 ldr         r3, [pc, #0x7C]
  008cc	e0422003	 sub         r2, r2, r3
  008d0	e59f1074	 ldr         r1, [pc, #0x74]
  008d4	e59f306c	 ldr         r3, [pc, #0x6C]
  008d8	e5930000	 ldr         r0, [r3]
  008dc	eb000000	 bl          memcpy

; 473  : 
; 474  :     //  Flush the cache to ensure idle code is in SRAM
; 475  :     OEMCacheRangeFlush( fnCpuStart, (UINT)OALCPUEnd - (UINT)OALCPUStart, CACHE_SYNC_ALL );

  008e0	e3a0207f	 mov         r2, #0x7F
  008e4	e59f1064	 ldr         r1, [pc, #0x64]
  008e8	e59f305c	 ldr         r3, [pc, #0x5C]
  008ec	e0411003	 sub         r1, r1, r3
  008f0	e59f3050	 ldr         r3, [pc, #0x50]
  008f4	e5930000	 ldr         r0, [r3]
  008f8	eb000000	 bl          OEMCacheRangeFlush

; 476  : 
; 477  : #pragma warning (pop)
; 478  : 
; 479  :     OALMSG(OAL_FUNC, (L"-OALSRAMFnInit()\r\n"));

  008fc	e59f3040	 ldr         r3, [pc, #0x40]
  00900	e5933440	 ldr         r3, [r3, #0x440]
  00904	e3130004	 tst         r3, #4
  00908	0a000004	 beq         |$LN5@OALSRAMFnI|
  0090c	e59f002c	 ldr         r0, [pc, #0x2C]
  00910	eb000000	 bl          NKDbgPrintfW
  00914	e3a03001	 mov         r3, #1
  00918	e58d301c	 str         r3, [sp, #0x1C]
  0091c	ea000001	 b           |$LN6@OALSRAMFnI|
  00920		 |$LN5@OALSRAMFnI|
  00920	e3a03000	 mov         r3, #0
  00924	e58d301c	 str         r3, [sp, #0x1C]
  00928		 |$LN6@OALSRAMFnI|

; 480  : 
; 481  :     return TRUE;

  00928	e3a03001	 mov         r3, #1
  0092c	e58d3004	 str         r3, [sp, #4]

; 482  : }

  00930	e59d0004	 ldr         r0, [sp, #4]
  00934	e28dd020	 add         sp, sp, #0x20
  00938	e49de004	 ldr         lr, [sp], #4
  0093c	e12fff1e	 bx          lr
  00940		 |$LN10@OALSRAMFnI|
  00940		 |$LN11@OALSRAMFnI|
  00940	00000000	 DCD         |??_C@_1CG@CDLGGGJO@?$AA?9?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00944		 |$LN12@OALSRAMFnI|
  00944	00000000	 DCD         |dpCurSettings|
  00948		 |$LN13@OALSRAMFnI|
  00948	00000000	 DCD         |fnCpuStart|
  0094c		 |$LN14@OALSRAMFnI|
  0094c	00000000	 DCD         |OALCPUStart|
  00950		 |$LN15@OALSRAMFnI|
  00950	00000000	 DCD         |OALCPUEnd|
  00954		 |$LN16@OALSRAMFnI|
  00954	00000000	 DCD         |fnOALCPUIdle|
  00958		 |$LN17@OALSRAMFnI|
  00958	00000000	 DCD         |g_pCPUInfo|
  0095c		 |$LN18@OALSRAMFnI|
  0095c	00000000	 DCD         |OALInvalidateTlb|
  00960		 |$LN19@OALSRAMFnI|
  00960	00000000	 DCD         |fnOALUpdateCoreFreq|
  00964		 |$LN20@OALSRAMFnI|
  00964	00000000	 DCD         |OALUpdateCoreFreq|
  00968		 |$LN21@OALSRAMFnI|
  00968	00000000	 DCD         |OALCPUIdle|
  0096c		 |$LN22@OALSRAMFnI|
  0096c	00000000	 DCD         |dwOEMHighSecurity|
  00970		 |$LN23@OALSRAMFnI|
  00970	00000000	 DCD         |dwOEMMPUContextRestore|
  00974		 |$LN24@OALSRAMFnI|
  00974	00000000	 DCD         |g_pPrcmCm|
  00978		 |$LN25@OALSRAMFnI|
  00978	00000000	 DCD         |g_pTimerRegs|
  0097c		 |$LN26@OALSRAMFnI|
  0097c	00000000	 DCD         |g_pPrcmPrm|
  00980		 |$LN27@OALSRAMFnI|
  00980	00000000	 DCD         |g_pSDRCRegs|
  00984		 |$LN28@OALSRAMFnI|
  00984	00000000	 DCD         |dwOEMSRAMStartOffset|
  00988		 |$LN29@OALSRAMFnI|
  00988	00000000	 DCD         |??_C@_1CG@LIGGGGFA@?$AA?$CL?$AAO?$AAA?$AAL?$AAS?$AAR?$AAA?$AAM?$AAF?$AAn?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0098c		 |$M47320|

			 ENDP  ; |OALSRAMFnInit|

	IMPORT	|OALGetTTBR|

  00050			 AREA	 |.pdata|, PDATA
|$T47347| DCD	|$LN5@ClearXNBit|
	DCD	0x40002304
; Function compile flags: /Odtp

  0098c			 AREA	 |.text|, CODE, ARM

  0098c		 |ClearXNBit| PROC

; 405  : {

  0098c		 |$LN5@ClearXNBit|
  0098c	e1a0c00d	 mov         r12, sp
  00990	e92d0001	 stmdb       sp!, {r0}
  00994	e92d5000	 stmdb       sp!, {r12, lr}
  00998	e24dd014	 sub         sp, sp, #0x14
  0099c		 |$M47344|

; 406  :     const UINT ARM_L1_NO_EXECUTE = 0x00000010;

  0099c	e3a03010	 mov         r3, #0x10
  009a0	e58d3004	 str         r3, [sp, #4]

; 407  : 
; 408  :     DWORD   idxL1MMU = ((DWORD)pvAddr) >> 20;

  009a4	e59d301c	 ldr         r3, [sp, #0x1C]
  009a8	e1a03a23	 mov         r3, r3, lsr #20
  009ac	e58d3000	 str         r3, [sp]

; 409  :     DWORD  *pL1MMUTbl = (DWORD*)OALPAtoVA(OALGetTTBR(), FALSE);

  009b0	eb000000	 bl          OALGetTTBR
  009b4	e58d000c	 str         r0, [sp, #0xC]
  009b8	e3a01000	 mov         r1, #0
  009bc	e59d000c	 ldr         r0, [sp, #0xC]
  009c0	eb000000	 bl          OALPAtoVA
  009c4	e58d0010	 str         r0, [sp, #0x10]
  009c8	e59d3010	 ldr         r3, [sp, #0x10]
  009cc	e58d3008	 str         r3, [sp, #8]

; 410  : 
; 411  :     pL1MMUTbl[idxL1MMU] &= ~ARM_L1_NO_EXECUTE;

  009d0	e59d1000	 ldr         r1, [sp]
  009d4	e3a03004	 mov         r3, #4
  009d8	e0020391	 mul         r2, r1, r3
  009dc	e59d3008	 ldr         r3, [sp, #8]
  009e0	e0831002	 add         r1, r3, r2
  009e4	e59d3004	 ldr         r3, [sp, #4]
  009e8	e1e02003	 mvn         r2, r3
  009ec	e5913000	 ldr         r3, [r1]
  009f0	e0030002	 and         r0, r3, r2
  009f4	e59d1000	 ldr         r1, [sp]
  009f8	e3a03004	 mov         r3, #4
  009fc	e0020391	 mul         r2, r1, r3
  00a00	e59d3008	 ldr         r3, [sp, #8]
  00a04	e0833002	 add         r3, r3, r2
  00a08	e5830000	 str         r0, [r3]

; 412  : }

  00a0c	e28dd014	 add         sp, sp, #0x14
  00a10	e89d6000	 ldmia       sp, {sp, lr}
  00a14	e12fff1e	 bx          lr
  00a18		 |$M47345|

			 ENDP  ; |ClearXNBit|

	EXPORT	|OALSDRCRefreshCounter|

  00058			 AREA	 |.pdata|, PDATA
|$T47352| DCD	|$LN5@OALSDRCRef|
	DCD	0x40001003
; Function compile flags: /Odtp

  00a18			 AREA	 |.text|, CODE, ARM

  00a18		 |OALSDRCRefreshCounter| PROC

; 495  : {

  00a18		 |$LN5@OALSDRCRef|
  00a18	e1a0c00d	 mov         r12, sp
  00a1c	e92d0003	 stmdb       sp!, {r0, r1}
  00a20	e92d5000	 stmdb       sp!, {r12, lr}
  00a24		 |$M47349|

; 496  :     g_pCPUInfo->SDRC_HIGH_RFR_FREQ = highFreq;

  00a24	e59f3028	 ldr         r3, [pc, #0x28]
  00a28	e5933000	 ldr         r3, [r3]
  00a2c	e2832028	 add         r2, r3, #0x28
  00a30	e59d3008	 ldr         r3, [sp, #8]
  00a34	e5823000	 str         r3, [r2]

; 497  :     g_pCPUInfo->SDRC_LOW_RFR_FREQ = lowFreq;

  00a38	e59f3014	 ldr         r3, [pc, #0x14]
  00a3c	e5933000	 ldr         r3, [r3]
  00a40	e283202c	 add         r2, r3, #0x2C
  00a44	e59d300c	 ldr         r3, [sp, #0xC]
  00a48	e5823000	 str         r3, [r2]

; 498  : }

  00a4c	e89d6000	 ldmia       sp, {sp, lr}
  00a50	e12fff1e	 bx          lr
  00a54		 |$LN6@OALSDRCRef|
  00a54		 |$LN7@OALSDRCRef|
  00a54	00000000	 DCD         |g_pCPUInfo|
  00a58		 |$M47350|

			 ENDP  ; |OALSDRCRefreshCounter|

	EXPORT	|OALSavePrcmContext|
	IMPORT	|g_pPrcmRestore|

  00060			 AREA	 |.pdata|, PDATA
|$T47359| DCD	|$LN6@OALSavePrc|
	DCD	0x40009700
; Function compile flags: /Odtp

  00a58			 AREA	 |.text|, CODE, ARM

  00a58		 |OALSavePrcmContext| PROC

; 508  : {

  00a58		 |$LN6@OALSavePrc|
  00a58		 |$M47356|

; 509  :     // check for valid pointers
; 510  :     if (g_pPrcmRestore == NULL) return;

  00a58	e59f3248	 ldr         r3, [pc, #0x248]
  00a5c	e5933000	 ldr         r3, [r3]
  00a60	e3530000	 cmp         r3, #0
  00a64	1a000000	 bne         |$LN1@OALSavePrc|
  00a68	ea00008d	 b           |$LN2@OALSavePrc|
  00a6c		 |$LN1@OALSavePrc|

; 511  : 
; 512  :     // save prcm restore registers
; 513  : 
; 514  :     OUTREG32(&g_pPrcmRestore->PRM_CLKSRC_CTRL,
; 515  :         INREG32(&g_pPrcmPrm->pOMAP_GLOBAL_PRM->PRM_CLKSRC_CTRL)
; 516  :         );

  00a6c	e59f323c	 ldr         r3, [pc, #0x23C]
  00a70	e5933000	 ldr         r3, [r3]
  00a74	e2833024	 add         r3, r3, #0x24
  00a78	e5933000	 ldr         r3, [r3]
  00a7c	e2833070	 add         r3, r3, #0x70
  00a80	e5932000	 ldr         r2, [r3]
  00a84	e59f321c	 ldr         r3, [pc, #0x21C]
  00a88	e5933000	 ldr         r3, [r3]
  00a8c	e5832000	 str         r2, [r3]

; 517  : 
; 518  :     OUTREG32(&g_pPrcmRestore->PRM_CLKSEL,
; 519  :         INREG32(&g_pPrcmPrm->pOMAP_CLOCK_CONTROL_PRM->PRM_CLKSEL)
; 520  :         );

  00a90	e59f3218	 ldr         r3, [pc, #0x218]
  00a94	e5933000	 ldr         r3, [r3]
  00a98	e283302c	 add         r3, r3, #0x2C
  00a9c	e5933000	 ldr         r3, [r3]
  00aa0	e2833040	 add         r3, r3, #0x40
  00aa4	e5932000	 ldr         r2, [r3]
  00aa8	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00aac	e5933000	 ldr         r3, [r3]
  00ab0	e2833004	 add         r3, r3, #4
  00ab4	e5832000	 str         r2, [r3]

; 521  : 
; 522  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL_CORE,
; 523  :         INREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSEL_CORE)
; 524  :         );

  00ab8	e59f31ec	 ldr         r3, [pc, #0x1EC]
  00abc	e5933000	 ldr         r3, [r3]
  00ac0	e2833004	 add         r3, r3, #4
  00ac4	e5933000	 ldr         r3, [r3]
  00ac8	e2833040	 add         r3, r3, #0x40
  00acc	e5932000	 ldr         r2, [r3]
  00ad0	e59f31d0	 ldr         r3, [pc, #0x1D0]
  00ad4	e5933000	 ldr         r3, [r3]
  00ad8	e2833008	 add         r3, r3, #8
  00adc	e5832000	 str         r2, [r3]

; 525  : 
; 526  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL_WKUP,
; 527  :         INREG32(&g_pPrcmCm->pOMAP_WKUP_CM->CM_CLKSEL_WKUP)
; 528  :         );

  00ae0	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00ae4	e5933000	 ldr         r3, [r3]
  00ae8	e5933000	 ldr         r3, [r3]
  00aec	e2833040	 add         r3, r3, #0x40
  00af0	e5932000	 ldr         r2, [r3]
  00af4	e59f31ac	 ldr         r3, [pc, #0x1AC]
  00af8	e5933000	 ldr         r3, [r3]
  00afc	e283300c	 add         r3, r3, #0xC
  00b00	e5832000	 str         r2, [r3]

; 529  : 
; 530  :     OUTREG32(&g_pPrcmRestore->CM_CLKEN_PLL,
; 531  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKEN_PLL)
; 532  :         );

  00b04	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00b08	e5933000	 ldr         r3, [r3]
  00b0c	e283302c	 add         r3, r3, #0x2C
  00b10	e5933000	 ldr         r3, [r3]
  00b14	e5932000	 ldr         r2, [r3]
  00b18	e59f3188	 ldr         r3, [pc, #0x188]
  00b1c	e5933000	 ldr         r3, [r3]
  00b20	e2833010	 add         r3, r3, #0x10
  00b24	e5832000	 str         r2, [r3]

; 533  : 
; 534  :     //  ROM code polls for 23ms waiting for DPLL4 to lock and if autoidle is stored
; 535  :     //  then DPLL4 goes into bypass and the poll times out. This poll should not be there
; 536  :     //  in ROM code for a wake up reset, it is only needed for power on or warm reset.
; 537  : 
; 538  :     //  To avoid romcode 23ms delay clear auto idle setting in scratchpad register.
; 539  :     //  It is restored in  OALContextRestore function in oem_pm.c
; 540  :     OUTREG32(&g_pPrcmRestore->CM_AUTOIDLE_PLL, 0x0);

  00b28	e59f3178	 ldr         r3, [pc, #0x178]
  00b2c	e5933000	 ldr         r3, [r3]
  00b30	e2832014	 add         r2, r3, #0x14
  00b34	e3a03000	 mov         r3, #0
  00b38	e5823000	 str         r3, [r2]

; 541  : 
; 542  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL1_PLL,
; 543  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL1_PLL)
; 544  :         );

  00b3c	e59f3168	 ldr         r3, [pc, #0x168]
  00b40	e5933000	 ldr         r3, [r3]
  00b44	e283302c	 add         r3, r3, #0x2C
  00b48	e5933000	 ldr         r3, [r3]
  00b4c	e2833040	 add         r3, r3, #0x40
  00b50	e5932000	 ldr         r2, [r3]
  00b54	e59f314c	 ldr         r3, [pc, #0x14C]
  00b58	e5933000	 ldr         r3, [r3]
  00b5c	e2833018	 add         r3, r3, #0x18
  00b60	e5832000	 str         r2, [r3]

; 545  : 
; 546  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL2_PLL,
; 547  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL2_PLL)
; 548  :         );

  00b64	e59f3140	 ldr         r3, [pc, #0x140]
  00b68	e5933000	 ldr         r3, [r3]
  00b6c	e283302c	 add         r3, r3, #0x2C
  00b70	e5933000	 ldr         r3, [r3]
  00b74	e2833044	 add         r3, r3, #0x44
  00b78	e5932000	 ldr         r2, [r3]
  00b7c	e59f3124	 ldr         r3, [pc, #0x124]
  00b80	e5933000	 ldr         r3, [r3]
  00b84	e283301c	 add         r3, r3, #0x1C
  00b88	e5832000	 str         r2, [r3]

; 549  : 
; 550  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL3_PLL,
; 551  :         INREG32(&g_pPrcmCm->pOMAP_CLOCK_CONTROL_CM->CM_CLKSEL3_PLL)
; 552  :         );

  00b8c	e59f3118	 ldr         r3, [pc, #0x118]
  00b90	e5933000	 ldr         r3, [r3]
  00b94	e283302c	 add         r3, r3, #0x2C
  00b98	e5933000	 ldr         r3, [r3]
  00b9c	e2833048	 add         r3, r3, #0x48
  00ba0	e5932000	 ldr         r2, [r3]
  00ba4	e59f30fc	 ldr         r3, [pc, #0xFC]
  00ba8	e5933000	 ldr         r3, [r3]
  00bac	e2833020	 add         r3, r3, #0x20
  00bb0	e5832000	 str         r2, [r3]

; 553  : 
; 554  :     OUTREG32(&g_pPrcmRestore->CM_CLKEN_PLL_MPU,
; 555  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKEN_PLL_MPU)
; 556  :         );

  00bb4	e59f30f0	 ldr         r3, [pc, #0xF0]
  00bb8	e5933000	 ldr         r3, [r3]
  00bbc	e2833014	 add         r3, r3, #0x14
  00bc0	e5933000	 ldr         r3, [r3]
  00bc4	e2833004	 add         r3, r3, #4
  00bc8	e5932000	 ldr         r2, [r3]
  00bcc	e59f30d4	 ldr         r3, [pc, #0xD4]
  00bd0	e5933000	 ldr         r3, [r3]
  00bd4	e2833024	 add         r3, r3, #0x24
  00bd8	e5832000	 str         r2, [r3]

; 557  : 
; 558  :     OUTREG32(&g_pPrcmRestore->CM_AUTOIDLE_PLL_MPU,
; 559  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_AUTOIDLE_PLL_MPU)
; 560  :         );

  00bdc	e59f30c8	 ldr         r3, [pc, #0xC8]
  00be0	e5933000	 ldr         r3, [r3]
  00be4	e2833014	 add         r3, r3, #0x14
  00be8	e5933000	 ldr         r3, [r3]
  00bec	e2833034	 add         r3, r3, #0x34
  00bf0	e5932000	 ldr         r2, [r3]
  00bf4	e59f30ac	 ldr         r3, [pc, #0xAC]
  00bf8	e5933000	 ldr         r3, [r3]
  00bfc	e2833028	 add         r3, r3, #0x28
  00c00	e5832000	 str         r2, [r3]

; 561  : 
; 562  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL1_PLL_MPU,
; 563  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSEL1_PLL_MPU)
; 564  :         );

  00c04	e59f30a0	 ldr         r3, [pc, #0xA0]
  00c08	e5933000	 ldr         r3, [r3]
  00c0c	e2833014	 add         r3, r3, #0x14
  00c10	e5933000	 ldr         r3, [r3]
  00c14	e2833040	 add         r3, r3, #0x40
  00c18	e5932000	 ldr         r2, [r3]
  00c1c	e59f3084	 ldr         r3, [pc, #0x84]
  00c20	e5933000	 ldr         r3, [r3]
  00c24	e283302c	 add         r3, r3, #0x2C
  00c28	e5832000	 str         r2, [r3]

; 565  : 
; 566  :     OUTREG32(&g_pPrcmRestore->CM_CLKSEL2_PLL_MPU,
; 567  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSEL2_PLL_MPU)
; 568  :         );

  00c2c	e59f3078	 ldr         r3, [pc, #0x78]
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e2833014	 add         r3, r3, #0x14
  00c38	e5933000	 ldr         r3, [r3]
  00c3c	e2833044	 add         r3, r3, #0x44
  00c40	e5932000	 ldr         r2, [r3]
  00c44	e59f305c	 ldr         r3, [pc, #0x5C]
  00c48	e5933000	 ldr         r3, [r3]
  00c4c	e2833030	 add         r3, r3, #0x30
  00c50	e5832000	 str         r2, [r3]

; 569  : 
; 570  :     OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU,
; 571  :         INREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSTCTRL_MPU)
; 572  :         );

  00c54	e59f3050	 ldr         r3, [pc, #0x50]
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e2833014	 add         r3, r3, #0x14
  00c60	e5933000	 ldr         r3, [r3]
  00c64	e2833048	 add         r3, r3, #0x48
  00c68	e5932000	 ldr         r2, [r3]
  00c6c	e59f3034	 ldr         r3, [pc, #0x34]
  00c70	e5933000	 ldr         r3, [r3]
  00c74	e2833038	 add         r3, r3, #0x38
  00c78	e5832000	 str         r2, [r3]

; 573  : 
; 574  :     OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE,
; 575  :         INREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSTCTRL_CORE)
; 576  :         );

  00c7c	e59f3028	 ldr         r3, [pc, #0x28]
  00c80	e5933000	 ldr         r3, [r3]
  00c84	e2833004	 add         r3, r3, #4
  00c88	e5933000	 ldr         r3, [r3]
  00c8c	e2833048	 add         r3, r3, #0x48
  00c90	e5932000	 ldr         r2, [r3]
  00c94	e59f300c	 ldr         r3, [pc, #0xC]
  00c98	e5933000	 ldr         r3, [r3]
  00c9c	e283303c	 add         r3, r3, #0x3C
  00ca0	e5832000	 str         r2, [r3]
  00ca4		 |$LN2@OALSavePrc|

; 577  : }

  00ca4	e12fff1e	 bx          lr
  00ca8		 |$LN7@OALSavePrc|
  00ca8		 |$LN8@OALSavePrc|
  00ca8	00000000	 DCD         |g_pPrcmRestore|
  00cac		 |$LN9@OALSavePrc|
  00cac	00000000	 DCD         |g_pPrcmCm|
  00cb0		 |$LN10@OALSavePrc|
  00cb0	00000000	 DCD         |g_pPrcmPrm|
  00cb4		 |$M47357|

			 ENDP  ; |OALSavePrcmContext|

	EXPORT	|OALSaveSdrcContext|
	IMPORT	|g_pSdrcRestore|

  00068			 AREA	 |.pdata|, PDATA
|$T47368| DCD	|$LN6@OALSaveSdr|
	DCD	0x4000c300
; Function compile flags: /Odtp

  00cb4			 AREA	 |.text|, CODE, ARM

  00cb4		 |OALSaveSdrcContext| PROC

; 587  : {

  00cb4		 |$LN6@OALSaveSdr|
  00cb4		 |$M47365|

; 588  :     // check for valid pointers
; 589  :     if (g_pSdrcRestore == NULL) return;

  00cb4	e59f32fc	 ldr         r3, [pc, #0x2FC]
  00cb8	e5933000	 ldr         r3, [r3]
  00cbc	e3530000	 cmp         r3, #0
  00cc0	1a000000	 bne         |$LN1@OALSaveSdr|
  00cc4	ea0000ba	 b           |$LN2@OALSaveSdr|
  00cc8		 |$LN1@OALSaveSdr|

; 590  : 
; 591  :     OUTREG16(&g_pSdrcRestore->SYSCONFIG,
; 592  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_SYSCONFIG)
; 593  :         );

  00cc8	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00ccc	e5933000	 ldr         r3, [r3]
  00cd0	e2833010	 add         r3, r3, #0x10
  00cd4	e5933000	 ldr         r3, [r3]
  00cd8	e1a02803	 mov         r2, r3, lsl #16
  00cdc	e1a02822	 mov         r2, r2, lsr #16
  00ce0	e59f32d0	 ldr         r3, [pc, #0x2D0]
  00ce4	e5933000	 ldr         r3, [r3]
  00ce8	e1c320b0	 strh        r2, [r3]

; 594  : 
; 595  :     OUTREG16(&g_pSdrcRestore->CS_CFG,
; 596  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_CS_CFG)
; 597  :         );

  00cec	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00cf0	e5933000	 ldr         r3, [r3]
  00cf4	e2833040	 add         r3, r3, #0x40
  00cf8	e5933000	 ldr         r3, [r3]
  00cfc	e1a02803	 mov         r2, r3, lsl #16
  00d00	e1a02822	 mov         r2, r2, lsr #16
  00d04	e59f32ac	 ldr         r3, [pc, #0x2AC]
  00d08	e5933000	 ldr         r3, [r3]
  00d0c	e2833002	 add         r3, r3, #2
  00d10	e1c320b0	 strh        r2, [r3]

; 598  : 
; 599  :     OUTREG16(&g_pSdrcRestore->SHARING,
; 600  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_SHARING)
; 601  :         );

  00d14	e59f32a0	 ldr         r3, [pc, #0x2A0]
  00d18	e5933000	 ldr         r3, [r3]
  00d1c	e2833044	 add         r3, r3, #0x44
  00d20	e5933000	 ldr         r3, [r3]
  00d24	e1a02803	 mov         r2, r3, lsl #16
  00d28	e1a02822	 mov         r2, r2, lsr #16
  00d2c	e59f3284	 ldr         r3, [pc, #0x284]
  00d30	e5933000	 ldr         r3, [r3]
  00d34	e2833004	 add         r3, r3, #4
  00d38	e1c320b0	 strh        r2, [r3]

; 602  : 
; 603  :     OUTREG16(&g_pSdrcRestore->ERR_TYPE,
; 604  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_ERR_TYPE)
; 605  :         );

  00d3c	e59f3278	 ldr         r3, [pc, #0x278]
  00d40	e5933000	 ldr         r3, [r3]
  00d44	e283304c	 add         r3, r3, #0x4C
  00d48	e5933000	 ldr         r3, [r3]
  00d4c	e1a02803	 mov         r2, r3, lsl #16
  00d50	e1a02822	 mov         r2, r2, lsr #16
  00d54	e59f325c	 ldr         r3, [pc, #0x25C]
  00d58	e5933000	 ldr         r3, [r3]
  00d5c	e2833006	 add         r3, r3, #6
  00d60	e1c320b0	 strh        r2, [r3]

; 606  : 
; 607  :     OUTREG32(&g_pSdrcRestore->DLLA_CTRL,
; 608  :         INREG32(&g_pSDRCRegs->SDRC_DLLA_CTRL)
; 609  :         );

  00d64	e59f3250	 ldr         r3, [pc, #0x250]
  00d68	e5933000	 ldr         r3, [r3]
  00d6c	e2833060	 add         r3, r3, #0x60
  00d70	e5932000	 ldr         r2, [r3]
  00d74	e59f323c	 ldr         r3, [pc, #0x23C]
  00d78	e5933000	 ldr         r3, [r3]
  00d7c	e2833008	 add         r3, r3, #8
  00d80	e5832000	 str         r2, [r3]

; 610  : 
; 611  :     OUTREG32(&g_pSdrcRestore->DLLB_CTRL,
; 612  :         INREG32(&g_pSDRCRegs->SDRC_DLLB_CTRL)
; 613  :         );

  00d84	e59f3230	 ldr         r3, [pc, #0x230]
  00d88	e5933000	 ldr         r3, [r3]
  00d8c	e2833068	 add         r3, r3, #0x68
  00d90	e5932000	 ldr         r2, [r3]
  00d94	e59f321c	 ldr         r3, [pc, #0x21C]
  00d98	e5933000	 ldr         r3, [r3]
  00d9c	e283300c	 add         r3, r3, #0xC
  00da0	e5832000	 str         r2, [r3]

; 614  : 
; 615  :     OUTREG32(&g_pSdrcRestore->POWER,
; 616  :         INREG32(&g_pSDRCRegs->SDRC_POWER)
; 617  :         );

  00da4	e59f3210	 ldr         r3, [pc, #0x210]
  00da8	e5933000	 ldr         r3, [r3]
  00dac	e2833070	 add         r3, r3, #0x70
  00db0	e5932000	 ldr         r2, [r3]
  00db4	e59f31fc	 ldr         r3, [pc, #0x1FC]
  00db8	e5933000	 ldr         r3, [r3]
  00dbc	e2833010	 add         r3, r3, #0x10
  00dc0	e5832000	 str         r2, [r3]

; 618  : 
; 619  :     OUTREG32(&g_pSdrcRestore->MCFG_0,
; 620  :         INREG32(&g_pSDRCRegs->SDRC_MCFG_0)
; 621  :         );

  00dc4	e59f31f0	 ldr         r3, [pc, #0x1F0]
  00dc8	e5933000	 ldr         r3, [r3]
  00dcc	e2833080	 add         r3, r3, #0x80
  00dd0	e5932000	 ldr         r2, [r3]
  00dd4	e59f31dc	 ldr         r3, [pc, #0x1DC]
  00dd8	e5933000	 ldr         r3, [r3]
  00ddc	e2833018	 add         r3, r3, #0x18
  00de0	e5832000	 str         r2, [r3]

; 622  : 
; 623  :     OUTREG16(&g_pSdrcRestore->MR_0,
; 624  :         (UINT16)INREG32(&g_pSDRCRegs->SDRC_MR_0)
; 625  :         );

  00de4	e59f31d0	 ldr         r3, [pc, #0x1D0]
  00de8	e5933000	 ldr         r3, [r3]
  00dec	e2833084	 add         r3, r3, #0x84
  00df0	e5933000	 ldr         r3, [r3]
  00df4	e1a02803	 mov         r2, r3, lsl #16
  00df8	e1a02822	 mov         r2, r2, lsr #16
  00dfc	e59f31b4	 ldr         r3, [pc, #0x1B4]
  00e00	e5933000	 ldr         r3, [r3]
  00e04	e283301c	 add         r3, r3, #0x1C
  00e08	e1c320b0	 strh        r2, [r3]

; 626  : 
; 627  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLA_0,
; 628  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLA_0)
; 629  :         );

  00e0c	e59f31a8	 ldr         r3, [pc, #0x1A8]
  00e10	e5933000	 ldr         r3, [r3]
  00e14	e283309c	 add         r3, r3, #0x9C
  00e18	e5932000	 ldr         r2, [r3]
  00e1c	e59f3194	 ldr         r3, [pc, #0x194]
  00e20	e5933000	 ldr         r3, [r3]
  00e24	e2833024	 add         r3, r3, #0x24
  00e28	e5832000	 str         r2, [r3]

; 630  : 
; 631  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLB_0,
; 632  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLB_0)
; 633  :         );

  00e2c	e59f3188	 ldr         r3, [pc, #0x188]
  00e30	e5933000	 ldr         r3, [r3]
  00e34	e28330a0	 add         r3, r3, #0xA0
  00e38	e5932000	 ldr         r2, [r3]
  00e3c	e59f3174	 ldr         r3, [pc, #0x174]
  00e40	e5933000	 ldr         r3, [r3]
  00e44	e2833028	 add         r3, r3, #0x28
  00e48	e5832000	 str         r2, [r3]

; 634  : 
; 635  :     OUTREG32(&g_pSdrcRestore->RFR_CTRL_0,
; 636  :         INREG32(&g_pSDRCRegs->SDRC_RFR_CTRL_0)
; 637  :         );

  00e4c	e59f3168	 ldr         r3, [pc, #0x168]
  00e50	e5933000	 ldr         r3, [r3]
  00e54	e28330a4	 add         r3, r3, #0xA4
  00e58	e5932000	 ldr         r2, [r3]
  00e5c	e59f3154	 ldr         r3, [pc, #0x154]
  00e60	e5933000	 ldr         r3, [r3]
  00e64	e283302c	 add         r3, r3, #0x2C
  00e68	e5832000	 str         r2, [r3]

; 638  : 
; 639  :     OUTREG32(&g_pSdrcRestore->MCFG_1,
; 640  :         INREG32(&g_pSDRCRegs->SDRC_MCFG_1)
; 641  :         );

  00e6c	e59f3148	 ldr         r3, [pc, #0x148]
  00e70	e5933000	 ldr         r3, [r3]
  00e74	e28330b0	 add         r3, r3, #0xB0
  00e78	e5932000	 ldr         r2, [r3]
  00e7c	e59f3134	 ldr         r3, [pc, #0x134]
  00e80	e5933000	 ldr         r3, [r3]
  00e84	e2833034	 add         r3, r3, #0x34
  00e88	e5832000	 str         r2, [r3]

; 642  : 
; 643  :     OUTREG16(&g_pSdrcRestore->MR_1,
; 644  :         INREG32(&g_pSDRCRegs->SDRC_MR_1)
; 645  :         );

  00e8c	e59f3128	 ldr         r3, [pc, #0x128]
  00e90	e5933000	 ldr         r3, [r3]
  00e94	e28330b4	 add         r3, r3, #0xB4
  00e98	e5933000	 ldr         r3, [r3]
  00e9c	e1a02803	 mov         r2, r3, lsl #16
  00ea0	e1a02822	 mov         r2, r2, lsr #16
  00ea4	e59f310c	 ldr         r3, [pc, #0x10C]
  00ea8	e5933000	 ldr         r3, [r3]
  00eac	e2833038	 add         r3, r3, #0x38
  00eb0	e1c320b0	 strh        r2, [r3]

; 646  : 
; 647  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLA_1,
; 648  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLA_1)
; 649  :         );

  00eb4	e59f3100	 ldr         r3, [pc, #0x100]
  00eb8	e5933000	 ldr         r3, [r3]
  00ebc	e28330c4	 add         r3, r3, #0xC4
  00ec0	e5932000	 ldr         r2, [r3]
  00ec4	e59f30ec	 ldr         r3, [pc, #0xEC]
  00ec8	e5933000	 ldr         r3, [r3]
  00ecc	e2833040	 add         r3, r3, #0x40
  00ed0	e5832000	 str         r2, [r3]

; 650  : 
; 651  :     OUTREG32(&g_pSdrcRestore->ACTIM_CTRLB_1,
; 652  :         INREG32(&g_pSDRCRegs->SDRC_ACTIM_CTRLB_1)
; 653  :         );

  00ed4	e59f30e0	 ldr         r3, [pc, #0xE0]
  00ed8	e5933000	 ldr         r3, [r3]
  00edc	e28330c8	 add         r3, r3, #0xC8
  00ee0	e5932000	 ldr         r2, [r3]
  00ee4	e59f30cc	 ldr         r3, [pc, #0xCC]
  00ee8	e5933000	 ldr         r3, [r3]
  00eec	e2833044	 add         r3, r3, #0x44
  00ef0	e5832000	 str         r2, [r3]

; 654  : 
; 655  :     OUTREG32(&g_pSdrcRestore->RFR_CTRL_1,
; 656  :         INREG32(&g_pSDRCRegs->SDRC_RFR_CTRL_1)
; 657  :         );

  00ef4	e59f30c0	 ldr         r3, [pc, #0xC0]
  00ef8	e5933000	 ldr         r3, [r3]
  00efc	e28330d4	 add         r3, r3, #0xD4
  00f00	e5932000	 ldr         r2, [r3]
  00f04	e59f30ac	 ldr         r3, [pc, #0xAC]
  00f08	e5933000	 ldr         r3, [r3]
  00f0c	e2833048	 add         r3, r3, #0x48
  00f10	e5832000	 str         r2, [r3]

; 658  : 
; 659  :     OUTREG16(&g_pSdrcRestore->EMR1_0, 0);

  00f14	e59f309c	 ldr         r3, [pc, #0x9C]
  00f18	e5933000	 ldr         r3, [r3]
  00f1c	e283201e	 add         r2, r3, #0x1E
  00f20	e3a03000	 mov         r3, #0
  00f24	e1c230b0	 strh        r3, [r2]

; 660  :     OUTREG16(&g_pSdrcRestore->EMR2_0, 0);

  00f28	e59f3088	 ldr         r3, [pc, #0x88]
  00f2c	e5933000	 ldr         r3, [r3]
  00f30	e2832020	 add         r2, r3, #0x20
  00f34	e3a03000	 mov         r3, #0
  00f38	e1c230b0	 strh        r3, [r2]

; 661  :     OUTREG16(&g_pSdrcRestore->EMR3_0, 0);

  00f3c	e59f3074	 ldr         r3, [pc, #0x74]
  00f40	e5933000	 ldr         r3, [r3]
  00f44	e2832022	 add         r2, r3, #0x22
  00f48	e3a03000	 mov         r3, #0
  00f4c	e1c230b0	 strh        r3, [r2]

; 662  :     OUTREG16(&g_pSdrcRestore->EMR1_1, 0);

  00f50	e59f3060	 ldr         r3, [pc, #0x60]
  00f54	e5933000	 ldr         r3, [r3]
  00f58	e283203a	 add         r2, r3, #0x3A
  00f5c	e3a03000	 mov         r3, #0
  00f60	e1c230b0	 strh        r3, [r2]

; 663  :     OUTREG16(&g_pSdrcRestore->EMR2_1, 0);

  00f64	e59f304c	 ldr         r3, [pc, #0x4C]
  00f68	e5933000	 ldr         r3, [r3]
  00f6c	e283203c	 add         r2, r3, #0x3C
  00f70	e3a03000	 mov         r3, #0
  00f74	e1c230b0	 strh        r3, [r2]

; 664  :     OUTREG16(&g_pSdrcRestore->EMR3_1, 0);

  00f78	e59f3038	 ldr         r3, [pc, #0x38]
  00f7c	e5933000	 ldr         r3, [r3]
  00f80	e283203e	 add         r2, r3, #0x3E
  00f84	e3a03000	 mov         r3, #0
  00f88	e1c230b0	 strh        r3, [r2]

; 665  :     OUTREG16(&g_pSdrcRestore->DCDL_1_CTRL, 0);

  00f8c	e59f3024	 ldr         r3, [pc, #0x24]
  00f90	e5933000	 ldr         r3, [r3]
  00f94	e283204c	 add         r2, r3, #0x4C
  00f98	e3a03000	 mov         r3, #0
  00f9c	e1c230b0	 strh        r3, [r2]

; 666  :     OUTREG16(&g_pSdrcRestore->DCDL_2_CTRL, 0);

  00fa0	e59f3010	 ldr         r3, [pc, #0x10]
  00fa4	e5933000	 ldr         r3, [r3]
  00fa8	e283204e	 add         r2, r3, #0x4E
  00fac	e3a03000	 mov         r3, #0
  00fb0	e1c230b0	 strh        r3, [r2]
  00fb4		 |$LN2@OALSaveSdr|

; 667  : }

  00fb4	e12fff1e	 bx          lr
  00fb8		 |$LN7@OALSaveSdr|
  00fb8		 |$LN8@OALSaveSdr|
  00fb8	00000000	 DCD         |g_pSdrcRestore|
  00fbc		 |$LN9@OALSaveSdr|
  00fbc	00000000	 DCD         |g_pSDRCRegs|
  00fc0		 |$M47366|

			 ENDP  ; |OALSaveSdrcContext|

	EXPORT	|??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|PrcmInit|
	IMPORT	|DeviceInitialize|
	IMPORT	|ClockInitialize|
	IMPORT	|DomainInitialize|
	IMPORT	|ResetInitialize|

  00070			 AREA	 |.pdata|, PDATA
|$T47380| DCD	|$LN9@PrcmInit|
	DCD	0x40002f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00fc0			 AREA	 |.text|, CODE, ARM

  00fc0		 |PrcmInit| PROC

; 679  : {

  00fc0		 |$LN9@PrcmInit|
  00fc0	e1a0c00d	 mov         r12, sp
  00fc4	e92d0001	 stmdb       sp!, {r0}
  00fc8	e92d5000	 stmdb       sp!, {r12, lr}
  00fcc	e24dd008	 sub         sp, sp, #8
  00fd0		 |$M47377|

; 680  :     OALMSG(OAL_FUNC, (L"+PrcmInit()\r\n"));

  00fd0	e59f3094	 ldr         r3, [pc, #0x94]
  00fd4	e5933440	 ldr         r3, [r3, #0x440]
  00fd8	e3130004	 tst         r3, #4
  00fdc	0a000004	 beq         |$LN3@PrcmInit|
  00fe0	e59f0090	 ldr         r0, [pc, #0x90]
  00fe4	eb000000	 bl          NKDbgPrintfW
  00fe8	e3a03001	 mov         r3, #1
  00fec	e58d3000	 str         r3, [sp]
  00ff0	ea000001	 b           |$LN4@PrcmInit|
  00ff4		 |$LN3@PrcmInit|
  00ff4	e3a03000	 mov         r3, #0
  00ff8	e58d3000	 str         r3, [sp]
  00ffc		 |$LN4@PrcmInit|

; 681  : 
; 682  :     // initialize global pointer to the PRCM registers
; 683  :     g_pPrcmPrm  = pInfo->pPrcmPrm;

  00ffc	e59d3010	 ldr         r3, [sp, #0x10]
  01000	e5932000	 ldr         r2, [r3]
  01004	e59f3068	 ldr         r3, [pc, #0x68]
  01008	e5832000	 str         r2, [r3]

; 684  :     g_pPrcmCm   = pInfo->pPrcmCm;

  0100c	e59d3010	 ldr         r3, [sp, #0x10]
  01010	e2833004	 add         r3, r3, #4
  01014	e5932000	 ldr         r2, [r3]
  01018	e59f3050	 ldr         r3, [pc, #0x50]
  0101c	e5832000	 str         r2, [r3]

; 685  : 
; 686  :     // initialize all internal data structures
; 687  :     ResetInitialize();

  01020	eb000000	 bl          ResetInitialize

; 688  :     DomainInitialize();

  01024	eb000000	 bl          DomainInitialize

; 689  :     ClockInitialize();

  01028	eb000000	 bl          ClockInitialize

; 690  :     DeviceInitialize();

  0102c	eb000000	 bl          DeviceInitialize

; 691  : 
; 692  :     OALMSG(OAL_FUNC, (L"-PrcmInit()\r\n"));

  01030	e59f3034	 ldr         r3, [pc, #0x34]
  01034	e5933440	 ldr         r3, [r3, #0x440]
  01038	e3130004	 tst         r3, #4
  0103c	0a000004	 beq         |$LN5@PrcmInit|
  01040	e59f0020	 ldr         r0, [pc, #0x20]
  01044	eb000000	 bl          NKDbgPrintfW
  01048	e3a03001	 mov         r3, #1
  0104c	e58d3004	 str         r3, [sp, #4]
  01050	ea000001	 b           |$LN6@PrcmInit|
  01054		 |$LN5@PrcmInit|
  01054	e3a03000	 mov         r3, #0
  01058	e58d3004	 str         r3, [sp, #4]
  0105c		 |$LN6@PrcmInit|

; 693  : }

  0105c	e28dd008	 add         sp, sp, #8
  01060	e89d6000	 ldmia       sp, {sp, lr}
  01064	e12fff1e	 bx          lr
  01068		 |$LN10@PrcmInit|
  01068		 |$LN11@PrcmInit|
  01068	00000000	 DCD         |??_C@_1BM@IGMJLLMF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0106c		 |$LN12@PrcmInit|
  0106c	00000000	 DCD         |dpCurSettings|
  01070		 |$LN13@PrcmInit|
  01070	00000000	 DCD         |g_pPrcmCm|
  01074		 |$LN14@PrcmInit|
  01074	00000000	 DCD         |g_pPrcmPrm|
  01078		 |$LN15@PrcmInit|
  01078	00000000	 DCD         |??_C@_1BM@IDHFLFIL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0107c		 |$M47378|

			 ENDP  ; |PrcmInit|

	EXPORT	|??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|PrcmPostInit|
	IMPORT	|InitializeCriticalSection|

  00078			 AREA	 |.pdata|, PDATA
|$T47395| DCD	|$LN12@PrcmPostIn|
	DCD	0x40003302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "P", 0x0, "o"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "P", 0x0, "o"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0107c			 AREA	 |.text|, CODE, ARM

  0107c		 |PrcmPostInit| PROC

; 703  : {

  0107c		 |$LN12@PrcmPostIn|
  0107c	e52de004	 str         lr, [sp, #-4]!
  01080	e24dd00c	 sub         sp, sp, #0xC
  01084		 |$M47392|

; 704  :     int i;
; 705  :     OALMSG(OAL_FUNC, (L"+PrcmPostInit()\r\n"));

  01084	e59f30ac	 ldr         r3, [pc, #0xAC]
  01088	e5933440	 ldr         r3, [r3, #0x440]
  0108c	e3130004	 tst         r3, #4
  01090	0a000004	 beq         |$LN6@PrcmPostIn|
  01094	e59f00a8	 ldr         r0, [pc, #0xA8]
  01098	eb000000	 bl          NKDbgPrintfW
  0109c	e3a03001	 mov         r3, #1
  010a0	e58d3004	 str         r3, [sp, #4]
  010a4	ea000001	 b           |$LN7@PrcmPostIn|
  010a8		 |$LN6@PrcmPostIn|
  010a8	e3a03000	 mov         r3, #0
  010ac	e58d3004	 str         r3, [sp, #4]
  010b0		 |$LN7@PrcmPostIn|

; 706  : 
; 707  :     // initialize synchronization objects
; 708  :     for (i = 0; i < Mutex_Count; ++i)

  010b0	e3a03000	 mov         r3, #0
  010b4	e58d3000	 str         r3, [sp]
  010b8	ea000002	 b           |$LN3@PrcmPostIn|
  010bc		 |$LN2@PrcmPostIn|
  010bc	e59d3000	 ldr         r3, [sp]
  010c0	e2833001	 add         r3, r3, #1
  010c4	e58d3000	 str         r3, [sp]
  010c8		 |$LN3@PrcmPostIn|
  010c8	e59d3000	 ldr         r3, [sp]
  010cc	e3530006	 cmp         r3, #6
  010d0	aa000006	 bge         |$LN1@PrcmPostIn|

; 709  :         {
; 710  :         InitializeCriticalSection(&g_rgPrcmMutex[i]);

  010d4	e59d1000	 ldr         r1, [sp]
  010d8	e3a03014	 mov         r3, #0x14
  010dc	e0020391	 mul         r2, r1, r3
  010e0	e59f3058	 ldr         r3, [pc, #0x58]
  010e4	e0830002	 add         r0, r3, r2
  010e8	eb000000	 bl          InitializeCriticalSection

; 711  :         }

  010ec	eafffff2	 b           |$LN2@PrcmPostIn|
  010f0		 |$LN1@PrcmPostIn|

; 712  : 
; 713  :     // update flag indicating PRCM library is fully initialized
; 714  :     g_PrcmPostInit = TRUE;

  010f0	e59f2044	 ldr         r2, [pc, #0x44]
  010f4	e3a03001	 mov         r3, #1
  010f8	e5823000	 str         r3, [r2]

; 715  : 
; 716  :     OALMSG(OAL_FUNC, (L"-PrcmPostInit()\r\n"));

  010fc	e59f3034	 ldr         r3, [pc, #0x34]
  01100	e5933440	 ldr         r3, [r3, #0x440]
  01104	e3130004	 tst         r3, #4
  01108	0a000004	 beq         |$LN8@PrcmPostIn|
  0110c	e59f0020	 ldr         r0, [pc, #0x20]
  01110	eb000000	 bl          NKDbgPrintfW
  01114	e3a03001	 mov         r3, #1
  01118	e58d3008	 str         r3, [sp, #8]
  0111c	ea000001	 b           |$LN9@PrcmPostIn|
  01120		 |$LN8@PrcmPostIn|
  01120	e3a03000	 mov         r3, #0
  01124	e58d3008	 str         r3, [sp, #8]
  01128		 |$LN9@PrcmPostIn|

; 717  : };

  01128	e28dd00c	 add         sp, sp, #0xC
  0112c	e49de004	 ldr         lr, [sp], #4
  01130	e12fff1e	 bx          lr
  01134		 |$LN13@PrcmPostIn|
  01134		 |$LN14@PrcmPostIn|
  01134	00000000	 DCD         |??_C@_1CE@FFFGKDPH@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01138		 |$LN15@PrcmPostIn|
  01138	00000000	 DCD         |dpCurSettings|
  0113c		 |$LN16@PrcmPostIn|
  0113c	00000000	 DCD         |g_PrcmPostInit|
  01140		 |$LN17@PrcmPostIn|
  01140	00000000	 DCD         |g_rgPrcmMutex|
  01144		 |$LN18@PrcmPostIn|
  01144	00000000	 DCD         |??_C@_1CE@JMJGFEAL@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAP?$AAo?$AAs?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01148		 |$M47393|

			 ENDP  ; |PrcmPostInit|

	EXPORT	|PrcmContextRestoreInit|
	IMPORT	|OALCPURestoreContext|
	IMPORT	|g_pContextRestore|

  00080			 AREA	 |.pdata|, PDATA
|$T47406| DCD	|$LN8@PrcmContex|
	DCD	0x40005802
; Function compile flags: /Odtp

  01148			 AREA	 |.text|, CODE, ARM

  01148		 |PrcmContextRestoreInit| PROC

; 727  : {

  01148		 |$LN8@PrcmContex|
  01148	e52de004	 str         lr, [sp, #-4]!
  0114c	e24dd004	 sub         sp, sp, #4
  01150		 |$M47403|

; 728  :     // store the oem context restore address
; 729  :     if (g_pContextRestore == NULL) return;

  01150	e59f3138	 ldr         r3, [pc, #0x138]
  01154	e5933000	 ldr         r3, [r3]
  01158	e3530000	 cmp         r3, #0
  0115c	1a000000	 bne         |$LN3@PrcmContex|
  01160	ea000047	 b           |$LN4@PrcmContex|
  01164		 |$LN3@PrcmContex|

; 730  : 
; 731  :     OUTREG32(&g_pContextRestore->BOOT_CONFIG_ADDR, 0);

  01164	e59f3124	 ldr         r3, [pc, #0x124]
  01168	e5932000	 ldr         r2, [r3]
  0116c	e3a03000	 mov         r3, #0
  01170	e5823000	 str         r3, [r2]

; 732  : #pragma warning (push)
; 733  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 734  :     OUTREG32(&g_pContextRestore->PUBLIC_RESTORE_ADDR, OALVAtoPA(OALCPURestoreContext));

  01174	e59f0128	 ldr         r0, [pc, #0x128]
  01178	eb000000	 bl          OALVAtoPA
  0117c	e58d0000	 str         r0, [sp]
  01180	e59f3108	 ldr         r3, [pc, #0x108]
  01184	e5933000	 ldr         r3, [r3]
  01188	e2832004	 add         r2, r3, #4
  0118c	e59d3000	 ldr         r3, [sp]
  01190	e5823000	 str         r3, [r2]

; 735  : #pragma warning (pop)
; 736  : 
; 737  :     OUTREG32(&g_pContextRestore->SECURE_SRAM_RESTORE_ADDR, 0);

  01194	e59f30f4	 ldr         r3, [pc, #0xF4]
  01198	e5933000	 ldr         r3, [r3]
  0119c	e2832008	 add         r2, r3, #8
  011a0	e3a03000	 mov         r3, #0
  011a4	e5823000	 str         r3, [r2]

; 738  :     OUTREG32(&g_pContextRestore->SDRC_MODULE_SEMAPHORE, 0);

  011a8	e59f30e0	 ldr         r3, [pc, #0xE0]
  011ac	e5933000	 ldr         r3, [r3]
  011b0	e283200c	 add         r2, r3, #0xC
  011b4	e3a03000	 mov         r3, #0
  011b8	e5823000	 str         r3, [r2]

; 739  :     OUTREG32(&g_pContextRestore->OEM_CPU_INFO_DATA_PA, dwOEMMPUContextRestore);

  011bc	e59f30dc	 ldr         r3, [pc, #0xDC]
  011c0	e5932000	 ldr         r2, [r3]
  011c4	e59f30c4	 ldr         r3, [pc, #0xC4]
  011c8	e5933000	 ldr         r3, [r3]
  011cc	e283301c	 add         r3, r3, #0x1C
  011d0	e5832000	 str         r2, [r3]

; 740  :     OUTREG32(&g_pContextRestore->OEM_CPU_INFO_DATA_VA, g_pCPUInfo);

  011d4	e59f30b4	 ldr         r3, [pc, #0xB4]
  011d8	e5933000	 ldr         r3, [r3]
  011dc	e2832020	 add         r2, r3, #0x20
  011e0	e59f30b4	 ldr         r3, [pc, #0xB4]
  011e4	e5933000	 ldr         r3, [r3]
  011e8	e5823000	 str         r3, [r2]

; 741  :     OUTREG32(&g_pContextRestore->PRCM_BLOCK_OFFSET, 0);

  011ec	e59f309c	 ldr         r3, [pc, #0x9C]
  011f0	e5933000	 ldr         r3, [r3]
  011f4	e2832010	 add         r2, r3, #0x10
  011f8	e3a03000	 mov         r3, #0
  011fc	e5823000	 str         r3, [r2]

; 742  :     OUTREG32(&g_pContextRestore->SDRC_BLOCK_OFFSET, 0);

  01200	e59f3088	 ldr         r3, [pc, #0x88]
  01204	e5933000	 ldr         r3, [r3]
  01208	e2832014	 add         r2, r3, #0x14
  0120c	e3a03000	 mov         r3, #0
  01210	e5823000	 str         r3, [r2]

; 743  : 
; 744  :     if (g_pPrcmRestore != NULL)

  01214	e59f307c	 ldr         r3, [pc, #0x7C]
  01218	e5933000	 ldr         r3, [r3]
  0121c	e3530000	 cmp         r3, #0
  01220	0a000009	 beq         |$LN2@PrcmContex|

; 745  :         {
; 746  :         OUTREG32(&g_pContextRestore->PRCM_BLOCK_OFFSET,
; 747  :             (UINT)g_pPrcmRestore - (UINT)g_pContextRestore
; 748  :             );

  01224	e59f306c	 ldr         r3, [pc, #0x6C]
  01228	e5932000	 ldr         r2, [r3]
  0122c	e59f305c	 ldr         r3, [pc, #0x5C]
  01230	e5933000	 ldr         r3, [r3]
  01234	e0422003	 sub         r2, r2, r3
  01238	e59f3050	 ldr         r3, [pc, #0x50]
  0123c	e5933000	 ldr         r3, [r3]
  01240	e2833010	 add         r3, r3, #0x10
  01244	e5832000	 str         r2, [r3]

; 749  :         OALSavePrcmContext();

  01248	eb000000	 bl          OALSavePrcmContext
  0124c		 |$LN2@PrcmContex|

; 750  :         }
; 751  : 
; 752  :     if (g_pSdrcRestore != NULL)

  0124c	e59f3040	 ldr         r3, [pc, #0x40]
  01250	e5933000	 ldr         r3, [r3]
  01254	e3530000	 cmp         r3, #0
  01258	0a000009	 beq         |$LN1@PrcmContex|

; 753  :         {
; 754  :         OUTREG32(&g_pContextRestore->SDRC_BLOCK_OFFSET,
; 755  :             (UINT)g_pSdrcRestore - (UINT)g_pContextRestore
; 756  :             );

  0125c	e59f3030	 ldr         r3, [pc, #0x30]
  01260	e5932000	 ldr         r2, [r3]
  01264	e59f3024	 ldr         r3, [pc, #0x24]
  01268	e5933000	 ldr         r3, [r3]
  0126c	e0422003	 sub         r2, r2, r3
  01270	e59f3018	 ldr         r3, [pc, #0x18]
  01274	e5933000	 ldr         r3, [r3]
  01278	e2833014	 add         r3, r3, #0x14
  0127c	e5832000	 str         r2, [r3]

; 757  :         OALSaveSdrcContext();

  01280	eb000000	 bl          OALSaveSdrcContext
  01284		 |$LN1@PrcmContex|
  01284		 |$LN4@PrcmContex|

; 758  :         }
; 759  : }

  01284	e28dd004	 add         sp, sp, #4
  01288	e49de004	 ldr         lr, [sp], #4
  0128c	e12fff1e	 bx          lr
  01290		 |$LN9@PrcmContex|
  01290		 |$LN10@PrcmContex|
  01290	00000000	 DCD         |g_pContextRestore|
  01294		 |$LN11@PrcmContex|
  01294	00000000	 DCD         |g_pSdrcRestore|
  01298		 |$LN12@PrcmContex|
  01298	00000000	 DCD         |g_pPrcmRestore|
  0129c		 |$LN13@PrcmContex|
  0129c	00000000	 DCD         |g_pCPUInfo|
  012a0		 |$LN14@PrcmContex|
  012a0	00000000	 DCD         |dwOEMMPUContextRestore|
  012a4		 |$LN15@PrcmContex|
  012a4	00000000	 DCD         |OALCPURestoreContext|
  012a8		 |$M47404|

			 ENDP  ; |PrcmContextRestoreInit|

	EXPORT	|PrcmContextRestore|

  00088			 AREA	 |.pdata|, PDATA
|$T47418| DCD	|$LN5@PrcmContex@2|
	DCD	0x40002c01
; Function compile flags: /Odtp

  012a8			 AREA	 |.text|, CODE, ARM

  012a8		 |PrcmContextRestore| PROC

; 769  : {

  012a8		 |$LN5@PrcmContex@2|
  012a8	e52de004	 str         lr, [sp, #-4]!
  012ac		 |$M47415|

; 770  : 
; 771  : #pragma warning (push)
; 772  : #pragma warning (disable:4152) //disable warning that prevents using function pointers as data pointers
; 773  :     memcpy(fnCpuStart, OALCPUStart, (UINT)OALCPUEnd - (UINT)OALCPUStart);

  012ac	e59f20a0	 ldr         r2, [pc, #0xA0]
  012b0	e59f3098	 ldr         r3, [pc, #0x98]
  012b4	e0422003	 sub         r2, r2, r3
  012b8	e59f1090	 ldr         r1, [pc, #0x90]
  012bc	e59f3088	 ldr         r3, [pc, #0x88]
  012c0	e5930000	 ldr         r0, [r3]
  012c4	eb000000	 bl          memcpy

; 774  : #pragma warning (pop)
; 775  : 
; 776  :     OUTREG32(&g_pPrcmCm->pOMAP_CORE_CM->CM_CLKSTCTRL_CORE,
; 777  :         INREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE)
; 778  :         );

  012c8	e59f3078	 ldr         r3, [pc, #0x78]
  012cc	e5933000	 ldr         r3, [r3]
  012d0	e283303c	 add         r3, r3, #0x3C
  012d4	e5932000	 ldr         r2, [r3]
  012d8	e59f3064	 ldr         r3, [pc, #0x64]
  012dc	e5933000	 ldr         r3, [r3]
  012e0	e2833004	 add         r3, r3, #4
  012e4	e5933000	 ldr         r3, [r3]
  012e8	e2833048	 add         r3, r3, #0x48
  012ec	e5832000	 str         r2, [r3]

; 779  : 
; 780  :     OUTREG32(&g_pPrcmCm->pOMAP_MPU_CM->CM_CLKSTCTRL_MPU,
; 781  :         INREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU)
; 782  :         );

  012f0	e59f3050	 ldr         r3, [pc, #0x50]
  012f4	e5933000	 ldr         r3, [r3]
  012f8	e2833038	 add         r3, r3, #0x38
  012fc	e5932000	 ldr         r2, [r3]
  01300	e59f303c	 ldr         r3, [pc, #0x3C]
  01304	e5933000	 ldr         r3, [r3]
  01308	e2833014	 add         r3, r3, #0x14
  0130c	e5933000	 ldr         r3, [r3]
  01310	e2833048	 add         r3, r3, #0x48
  01314	e5832000	 str         r2, [r3]

; 783  : 
; 784  :    OUTREG32(&g_pPrcmCm->pOMAP_WKUP_CM->CM_CLKSEL_WKUP,
; 785  :         INREG32(&g_pPrcmRestore->CM_CLKSEL_WKUP)
; 786  :         );

  01318	e59f3028	 ldr         r3, [pc, #0x28]
  0131c	e5933000	 ldr         r3, [r3]
  01320	e283300c	 add         r3, r3, #0xC
  01324	e5932000	 ldr         r2, [r3]
  01328	e59f3014	 ldr         r3, [pc, #0x14]
  0132c	e5933000	 ldr         r3, [r3]
  01330	e5933000	 ldr         r3, [r3]
  01334	e2833040	 add         r3, r3, #0x40
  01338	e5832000	 str         r2, [r3]

; 787  : }

  0133c	e49de004	 ldr         lr, [sp], #4
  01340	e12fff1e	 bx          lr
  01344		 |$LN6@PrcmContex@2|
  01344		 |$LN7@PrcmContex@2|
  01344	00000000	 DCD         |g_pPrcmCm|
  01348		 |$LN8@PrcmContex@2|
  01348	00000000	 DCD         |g_pPrcmRestore|
  0134c		 |$LN9@PrcmContex@2|
  0134c	00000000	 DCD         |fnCpuStart|
  01350		 |$LN10@PrcmContex@2|
  01350	00000000	 DCD         |OALCPUStart|
  01354		 |$LN11@PrcmContex@2|
  01354	00000000	 DCD         |OALCPUEnd|
  01358		 |$M47416|

			 ENDP  ; |PrcmContextRestore|

	EXPORT	|PrcmSuspend|
	IMPORT	|OALTimerStart|
	IMPORT	|PrcmProcessPostMpuWakeup|
	IMPORT	|OALContextRestore|
	IMPORT	|OALWakeupLatency_PopState|
	IMPORT	|PrcmRegsSnapshot|
	IMPORT	|PrcmSaveRefCounts|
	IMPORT	|OALWakeupLatency_SaveSnapshot|
	IMPORT	|g_PrcmDebugSuspendResume|
	IMPORT	|OALWakeupLatency_PushState|
	IMPORT	|OALContextSave|
	IMPORT	|OALWakeupLatency_IsChipOff|
	IMPORT	|OALWakeupLatency_GetSuspendState|
	IMPORT	|PrcmDeviceEnableClocksKernel|
	IMPORT	|OALTimerSetReg|

  00090			 AREA	 |.pdata|, PDATA
|$T47429| DCD	|$LN8@PrcmSuspen|
	DCD	0x40005602
; Function compile flags: /Odtp

  01358			 AREA	 |.text|, CODE, ARM

  01358		 |PrcmSuspend| PROC

; 800  : {

  01358		 |$LN8@PrcmSuspen|
  01358	e52de004	 str         lr, [sp, #-4]!
  0135c	e24dd01c	 sub         sp, sp, #0x1C
  01360		 |$M47426|

; 801  :     DWORD latencyState;
; 802  :     UINT32 prevCoreState;
; 803  :     UINT32 prevMpuState;
; 804  :     UINT32 prevPerState;
; 805  : 
; 806  :     
; 807  :     //--------------------------------------------------------------------------
; 808  :     // perform power down sequence
; 809  :     //--------------------------------------------------------------------------
; 810  : 
; 811  :     // Disable match interrupt
; 812  :     OALTimerSetReg(&g_pTimerRegs->TIER, 0);

  01360	e3a01000	 mov         r1, #0
  01364	e59f3140	 ldr         r3, [pc, #0x140]
  01368	e5933000	 ldr         r3, [r3]
  0136c	e283001c	 add         r0, r3, #0x1C
  01370	eb000000	 bl          OALTimerSetReg

; 813  : 
; 814  :     // Get the previous MPU, CORE and PER power state
; 815  :     prevMpuState = INREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->PM_PWSTST_MPU);

  01374	e59f312c	 ldr         r3, [pc, #0x12C]
  01378	e5933000	 ldr         r3, [r3]
  0137c	e2833014	 add         r3, r3, #0x14
  01380	e5933000	 ldr         r3, [r3]
  01384	e28330e4	 add         r3, r3, #0xE4
  01388	e5933000	 ldr         r3, [r3]
  0138c	e58d3008	 str         r3, [sp, #8]

; 816  :     prevCoreState = INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_PWSTST_CORE);

  01390	e59f3110	 ldr         r3, [pc, #0x110]
  01394	e5933000	 ldr         r3, [r3]
  01398	e2833004	 add         r3, r3, #4
  0139c	e5933000	 ldr         r3, [r3]
  013a0	e28330e4	 add         r3, r3, #0xE4
  013a4	e5933000	 ldr         r3, [r3]
  013a8	e58d3000	 str         r3, [sp]

; 817  :     prevPerState = INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_PWSTST_PER);

  013ac	e59f30f4	 ldr         r3, [pc, #0xF4]
  013b0	e5933000	 ldr         r3, [r3]
  013b4	e2833008	 add         r3, r3, #8
  013b8	e5933000	 ldr         r3, [r3]
  013bc	e28330e4	 add         r3, r3, #0xE4
  013c0	e5933000	 ldr         r3, [r3]
  013c4	e58d3004	 str         r3, [sp, #4]

; 818  : 
; 819  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_GPTIMER1, FALSE);

  013c8	e3a01000	 mov         r1, #0
  013cc	e3a0001f	 mov         r0, #0x1F
  013d0	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 820  : 
; 821  :     // use the latency module to transition to a valid sleep state
; 822  :     latencyState = OALWakeupLatency_GetSuspendState();

  013d4	eb000000	 bl          OALWakeupLatency_GetSuspendState
  013d8	e58d0010	 str         r0, [sp, #0x10]
  013dc	e59d3010	 ldr         r3, [sp, #0x10]
  013e0	e58d300c	 str         r3, [sp, #0xC]

; 823  :     if (OALWakeupLatency_IsChipOff(latencyState))

  013e4	e59d000c	 ldr         r0, [sp, #0xC]
  013e8	eb000000	 bl          OALWakeupLatency_IsChipOff
  013ec	e58d0014	 str         r0, [sp, #0x14]
  013f0	e59d3014	 ldr         r3, [sp, #0x14]
  013f4	e3530000	 cmp         r3, #0
  013f8	0a000005	 beq         |$LN3@PrcmSuspen|

; 824  :         {
; 825  :         if (!OALContextSave())

  013fc	eb000000	 bl          OALContextSave
  01400	e58d0018	 str         r0, [sp, #0x18]
  01404	e59d3018	 ldr         r3, [sp, #0x18]
  01408	e3530000	 cmp         r3, #0
  0140c	1a000000	 bne         |$LN2@PrcmSuspen|

; 826  :             {
; 827  :             // wake-up will fail so just return
; 828  :             goto cleanUp;

  01410	ea00001a	 b           |$cleanUp$47151|
  01414		 |$LN2@PrcmSuspen|
  01414		 |$LN3@PrcmSuspen|

; 829  :             }
; 830  :         }
; 831  :     OALWakeupLatency_PushState(latencyState);

  01414	e59d000c	 ldr         r0, [sp, #0xC]
  01418	eb000000	 bl          OALWakeupLatency_PushState

; 832  : 
; 833  : 
; 834  :     // Move SoC/CPU to idle mode
; 835  :     
; 836  : 
; 837  : #ifndef SHIP_BUILD
; 838  :     if (g_PrcmDebugSuspendResume)

  0141c	e59f3080	 ldr         r3, [pc, #0x80]
  01420	e5933000	 ldr         r3, [r3]
  01424	e3530000	 cmp         r3, #0
  01428	0a000002	 beq         |$LN1@PrcmSuspen|

; 839  :     {
; 840  :         OALWakeupLatency_SaveSnapshot();

  0142c	eb000000	 bl          OALWakeupLatency_SaveSnapshot

; 841  :         PrcmSaveRefCounts();

  01430	eb000000	 bl          PrcmSaveRefCounts

; 842  : 		PrcmRegsSnapshot();

  01434	eb000000	 bl          PrcmRegsSnapshot
  01438		 |$LN1@PrcmSuspen|

; 843  : 	}
; 844  : #endif
; 845  : 		
; 846  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_SCMCTRL, FALSE);

  01438	e3a01000	 mov         r1, #0
  0143c	e3a00002	 mov         r0, #2
  01440	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 847  : 
; 848  :     // Move SoC/CPU to idle mode (suspend)
; 849  :     fnOALCPUIdle(g_pCPUInfo);

  01444	e59f3054	 ldr         r3, [pc, #0x54]
  01448	e5930000	 ldr         r0, [r3]
  0144c	e59f3048	 ldr         r3, [pc, #0x48]
  01450	e5933000	 ldr         r3, [r3]
  01454	e1a0e00f	 mov         lr, pc
  01458	e12fff13	 bx          r3

; 850  : 
; 851  :     // resume starts here...
; 852  : 
; 853  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_SCMCTRL, TRUE);

  0145c	e3a01001	 mov         r1, #1
  01460	e3a00002	 mov         r0, #2
  01464	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 854  : 
; 855  :     OALWakeupLatency_PopState();

  01468	eb000000	 bl          OALWakeupLatency_PopState

; 856  : 
; 857  :     OALContextRestore(prevMpuState, prevCoreState, prevPerState);

  0146c	e59d2004	 ldr         r2, [sp, #4]
  01470	e59d1000	 ldr         r1, [sp]
  01474	e59d0008	 ldr         r0, [sp, #8]
  01478	eb000000	 bl          OALContextRestore

; 858  : 
; 859  :     PrcmProcessPostMpuWakeup();

  0147c	eb000000	 bl          PrcmProcessPostMpuWakeup
  01480		 |$cleanUp$47151|

; 860  : 
; 861  :     // UNDONE:
; 862  :     //   Need to update curridlehigh and curridlelow to track cpu loads
; 863  : 
; 864  : cleanUp:
; 865  :     // restart GPTIMER1
; 866  :     PrcmDeviceEnableClocksKernel(OMAP_DEVICE_GPTIMER1, TRUE);

  01480	e3a01001	 mov         r1, #1
  01484	e3a0001f	 mov         r0, #0x1F
  01488	eb000000	 bl          PrcmDeviceEnableClocksKernel

; 867  : 	
; 868  :     OALTimerStart();

  0148c	eb000000	 bl          OALTimerStart

; 869  : 
; 870  : }

  01490	e28dd01c	 add         sp, sp, #0x1C
  01494	e49de004	 ldr         lr, [sp], #4
  01498	e12fff1e	 bx          lr
  0149c		 |$LN9@PrcmSuspen|
  0149c		 |$LN10@PrcmSuspen|
  0149c	00000000	 DCD         |fnOALCPUIdle|
  014a0		 |$LN11@PrcmSuspen|
  014a0	00000000	 DCD         |g_pCPUInfo|
  014a4		 |$LN12@PrcmSuspen|
  014a4	00000000	 DCD         |g_PrcmDebugSuspendResume|
  014a8		 |$LN13@PrcmSuspen|
  014a8	00000000	 DCD         |g_pPrcmPrm|
  014ac		 |$LN14@PrcmSuspen|
  014ac	00000000	 DCD         |g_pTimerRegs|
  014b0		 |$M47427|

			 ENDP  ; |PrcmSuspend|

	EXPORT	|??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| [ DATA ] ; `string'
	EXPORT	|OALIoCtlPrcmDeviceGetDeviceManagementTable|
	IMPORT	|PrcmClockGetSystemClockFrequency|
	IMPORT	|OALMux_UpdateOnDeviceStateChange|
	IMPORT	|PrcmDeviceGetContextState|
	IMPORT	|PrcmDeviceEnableAutoIdle|
	IMPORT	|PrcmDeviceSetSourceClocks|
	IMPORT	|PrcmDeviceEnableFClock|
	IMPORT	|PrcmDeviceEnableIClock|
	IMPORT	|PrcmDeviceEnableClocks|

  00098			 AREA	 |.pdata|, PDATA
|$T47445| DCD	|$LN12@OALIoCtlPr|
	DCD	0x40006604

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "M", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "T", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "o", 0x0, "C"
	DCB	0x0, "t", 0x0, "l", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "G", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, "M", 0x0, "a", 0x0, "n"
	DCB	0x0, "a", 0x0, "g", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "T", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  014b0			 AREA	 |.text|, CODE, ARM

  014b0		 |OALIoCtlPrcmDeviceGetDeviceManagementTable| PROC

; 885  : {

  014b0		 |$LN12@OALIoCtlPr|
  014b0	e1a0c00d	 mov         r12, sp
  014b4	e92d000f	 stmdb       sp!, {r0 - r3}
  014b8	e92d5000	 stmdb       sp!, {r12, lr}
  014bc	e24dd014	 sub         sp, sp, #0x14
  014c0		 |$M47442|

; 886  :     BOOL rc = FALSE;

  014c0	e3a03000	 mov         r3, #0
  014c4	e58d3004	 str         r3, [sp, #4]

; 887  :     OMAP_DEVCLKMGMT_FNTABLE *pfnTbl;
; 888  : 
; 889  :     UNREFERENCED_PARAMETER(inSize);
; 890  :     UNREFERENCED_PARAMETER(pInBuffer);
; 891  :     UNREFERENCED_PARAMETER(code);
; 892  : 
; 893  :     OALMSG(OAL_IOCTL&&OAL_FUNC, (L"+OALIoCtlPrcmDeviceGetDeviceManagementTable\r\n"));

  014c8	e59f3150	 ldr         r3, [pc, #0x150]
  014cc	e5933440	 ldr         r3, [r3, #0x440]
  014d0	e3130a01	 tst         r3, #1, 20
  014d4	0a000008	 beq         |$LN6@OALIoCtlPr|
  014d8	e59f3140	 ldr         r3, [pc, #0x140]
  014dc	e5933440	 ldr         r3, [r3, #0x440]
  014e0	e3130004	 tst         r3, #4
  014e4	0a000004	 beq         |$LN6@OALIoCtlPr|
  014e8	e59f0154	 ldr         r0, [pc, #0x154]
  014ec	eb000000	 bl          NKDbgPrintfW
  014f0	e3a03001	 mov         r3, #1
  014f4	e58d300c	 str         r3, [sp, #0xC]
  014f8	ea000001	 b           |$LN7@OALIoCtlPr|
  014fc		 |$LN6@OALIoCtlPr|
  014fc	e3a03000	 mov         r3, #0
  01500	e58d300c	 str         r3, [sp, #0xC]
  01504		 |$LN7@OALIoCtlPr|

; 894  :     if (pOutBuffer == NULL || outSize < sizeof(OMAP_DEVCLKMGMT_FNTABLE))

  01504	e59d3028	 ldr         r3, [sp, #0x28]
  01508	e3530000	 cmp         r3, #0
  0150c	0a000002	 beq         |$LN2@OALIoCtlPr|
  01510	e59d302c	 ldr         r3, [sp, #0x2C]
  01514	e3530020	 cmp         r3, #0x20
  01518	2a000000	 bcs         |$LN3@OALIoCtlPr|
  0151c		 |$LN2@OALIoCtlPr|

; 895  :         {
; 896  :         goto cleanUp;

  0151c	ea000028	 b           |$cleanUp$47174|
  01520		 |$LN3@OALIoCtlPr|

; 897  :         }
; 898  : 
; 899  :     // update return information
; 900  :     //
; 901  :     if (pOutSize != NULL) *pOutSize = sizeof(OMAP_DEVCLKMGMT_FNTABLE);

  01520	e59d3030	 ldr         r3, [sp, #0x30]
  01524	e3530000	 cmp         r3, #0
  01528	0a000002	 beq         |$LN1@OALIoCtlPr|
  0152c	e59d2030	 ldr         r2, [sp, #0x30]
  01530	e3a03020	 mov         r3, #0x20
  01534	e5823000	 str         r3, [r2]
  01538		 |$LN1@OALIoCtlPr|

; 902  : 
; 903  :     // update function pointers
; 904  :     //
; 905  :     pfnTbl = (OMAP_DEVCLKMGMT_FNTABLE*)pOutBuffer;    

  01538	e59d3028	 ldr         r3, [sp, #0x28]
  0153c	e58d3000	 str         r3, [sp]

; 906  :     pfnTbl->pfnEnableDeviceClocks= PrcmDeviceEnableClocks;

  01540	e59f20f8	 ldr         r2, [pc, #0xF8]
  01544	e59d3000	 ldr         r3, [sp]
  01548	e5832000	 str         r2, [r3]

; 907  :     pfnTbl->pfnEnableDeviceIClock= PrcmDeviceEnableIClock;

  0154c	e59d3000	 ldr         r3, [sp]
  01550	e2832004	 add         r2, r3, #4
  01554	e59f30e0	 ldr         r3, [pc, #0xE0]
  01558	e5823000	 str         r3, [r2]

; 908  :     pfnTbl->pfnEnableDeviceFClock= PrcmDeviceEnableFClock;

  0155c	e59d3000	 ldr         r3, [sp]
  01560	e2832008	 add         r2, r3, #8
  01564	e59f30cc	 ldr         r3, [pc, #0xCC]
  01568	e5823000	 str         r3, [r2]

; 909  :     pfnTbl->pfnSetSourceDeviceClocks = PrcmDeviceSetSourceClocks;

  0156c	e59d3000	 ldr         r3, [sp]
  01570	e2832010	 add         r2, r3, #0x10
  01574	e59f30b8	 ldr         r3, [pc, #0xB8]
  01578	e5823000	 str         r3, [r2]

; 910  :     pfnTbl->pfnEnableDeviceClockAutoIdle = PrcmDeviceEnableAutoIdle;

  0157c	e59d3000	 ldr         r3, [sp]
  01580	e283200c	 add         r2, r3, #0xC
  01584	e59f30a4	 ldr         r3, [pc, #0xA4]
  01588	e5823000	 str         r3, [r2]

; 911  :     pfnTbl->pfnGetDeviceContextState = PrcmDeviceGetContextState;

  0158c	e59d3000	 ldr         r3, [sp]
  01590	e2832014	 add         r2, r3, #0x14
  01594	e59f3090	 ldr         r3, [pc, #0x90]
  01598	e5823000	 str         r3, [r2]

; 912  :     pfnTbl->pfnUpdateOnDeviceStateChange = OALMux_UpdateOnDeviceStateChange;

  0159c	e59d3000	 ldr         r3, [sp]
  015a0	e2832018	 add         r2, r3, #0x18
  015a4	e59f307c	 ldr         r3, [pc, #0x7C]
  015a8	e5823000	 str         r3, [r2]

; 913  :     pfnTbl->pfnGetSystemClockFrequency = PrcmClockGetSystemClockFrequency;

  015ac	e59d3000	 ldr         r3, [sp]
  015b0	e283201c	 add         r2, r3, #0x1C
  015b4	e59f3068	 ldr         r3, [pc, #0x68]
  015b8	e5823000	 str         r3, [r2]

; 914  :     rc = TRUE;

  015bc	e3a03001	 mov         r3, #1
  015c0	e58d3004	 str         r3, [sp, #4]
  015c4		 |$cleanUp$47174|

; 915  : 
; 916  : cleanUp:
; 917  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIoCtlPrcmDeviceGetDeviceManagementTable(rc = %d)\r\n", rc));

  015c4	e59f3054	 ldr         r3, [pc, #0x54]
  015c8	e5933440	 ldr         r3, [r3, #0x440]
  015cc	e3130901	 tst         r3, #1, 18
  015d0	0a000009	 beq         |$LN8@OALIoCtlPr|
  015d4	e59f3044	 ldr         r3, [pc, #0x44]
  015d8	e5933440	 ldr         r3, [r3, #0x440]
  015dc	e3130004	 tst         r3, #4
  015e0	0a000005	 beq         |$LN8@OALIoCtlPr|
  015e4	e59d1004	 ldr         r1, [sp, #4]
  015e8	e59f002c	 ldr         r0, [pc, #0x2C]
  015ec	eb000000	 bl          NKDbgPrintfW
  015f0	e3a03001	 mov         r3, #1
  015f4	e58d3010	 str         r3, [sp, #0x10]
  015f8	ea000001	 b           |$LN9@OALIoCtlPr|
  015fc		 |$LN8@OALIoCtlPr|
  015fc	e3a03000	 mov         r3, #0
  01600	e58d3010	 str         r3, [sp, #0x10]
  01604		 |$LN9@OALIoCtlPr|

; 918  :     return rc;

  01604	e59d3004	 ldr         r3, [sp, #4]
  01608	e58d3008	 str         r3, [sp, #8]

; 919  : }

  0160c	e59d0008	 ldr         r0, [sp, #8]
  01610	e28dd014	 add         sp, sp, #0x14
  01614	e89d6000	 ldmia       sp, {sp, lr}
  01618	e12fff1e	 bx          lr
  0161c		 |$LN13@OALIoCtlPr|
  0161c		 |$LN14@OALIoCtlPr|
  0161c	00000000	 DCD         |??_C@_1GO@KIJCCOCF@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@|
  01620		 |$LN15@OALIoCtlPr|
  01620	00000000	 DCD         |dpCurSettings|
  01624		 |$LN16@OALIoCtlPr|
  01624	00000000	 DCD         |PrcmClockGetSystemClockFrequency|
  01628		 |$LN17@OALIoCtlPr|
  01628	00000000	 DCD         |OALMux_UpdateOnDeviceStateChange|
  0162c		 |$LN18@OALIoCtlPr|
  0162c	00000000	 DCD         |PrcmDeviceGetContextState|
  01630		 |$LN19@OALIoCtlPr|
  01630	00000000	 DCD         |PrcmDeviceEnableAutoIdle|
  01634		 |$LN20@OALIoCtlPr|
  01634	00000000	 DCD         |PrcmDeviceSetSourceClocks|
  01638		 |$LN21@OALIoCtlPr|
  01638	00000000	 DCD         |PrcmDeviceEnableFClock|
  0163c		 |$LN22@OALIoCtlPr|
  0163c	00000000	 DCD         |PrcmDeviceEnableIClock|
  01640		 |$LN23@OALIoCtlPr|
  01640	00000000	 DCD         |PrcmDeviceEnableClocks|
  01644		 |$LN24@OALIoCtlPr|
  01644	00000000	 DCD         |??_C@_1FM@ELGNEBJK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAo?$AAC?$AAt?$AAl?$AAP?$AAr?$AAc?$AAm?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAG?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAM?$AAa?$AAn?$AAa@|
  01648		 |$M47443|

			 ENDP  ; |OALIoCtlPrcmDeviceGetDeviceManagementTable|

	END
