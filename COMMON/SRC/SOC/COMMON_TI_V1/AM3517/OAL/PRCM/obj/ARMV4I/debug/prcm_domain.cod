; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\AM3517\OAL\PRCM\prcm_domain.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|_CoreClockDomain| [ DATA ]
	EXPORT	|_PeripheralClockDomain| [ DATA ]
	EXPORT	|_UsbHostClockDomain| [ DATA ]
	EXPORT	|_EmulationClockDomain| [ DATA ]
	EXPORT	|_MpuClockDomain| [ DATA ]
	EXPORT	|_DssClockDomain| [ DATA ]
	EXPORT	|_NeonClockDomain| [ DATA ]
	EXPORT	|_SgxClockDomain| [ DATA ]
	EXPORT	|_WakeupPowerDomain| [ DATA ]
	EXPORT	|_CorePowerDomain| [ DATA ]
	EXPORT	|_PeripheralPowerDomain| [ DATA ]
	EXPORT	|_UsbHostPowerDomain| [ DATA ]
	EXPORT	|_MpuPowerDomain| [ DATA ]
	EXPORT	|_DssPowerDomain| [ DATA ]
	EXPORT	|_NeonPowerDomain| [ DATA ]
	EXPORT	|_Iva2PowerDomain| [ DATA ]
	EXPORT	|_CameraPowerDomain| [ DATA ]
	EXPORT	|_SgxPowerDomain| [ DATA ]
	EXPORT	|s_DomainTable| [ DATA ]

  00000			 AREA	 |.data|, DATA
|_CoreClockDomain| DCD 0x3
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x1
	DCD	0x0
	DCD	0x2
	DCD	0x9
	DCD	0x0
	DCD	0x4
|_PeripheralClockDomain| DCD 0x1
	DCD	0x2
	DCD	0x0
	DCD	0x0
|_UsbHostClockDomain| DCD 0x1
	DCD	0x3
	DCD	0x0
	DCD	0x0
|_EmulationClockDomain| DCD 0x1
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_MpuClockDomain| DCD 0x1
	DCD	0x5
	DCD	0x0
	DCD	0x0
|_DssClockDomain| DCD 0x1
	DCD	0x6
	DCD	0x0
	DCD	0x0
|_NeonClockDomain| DCD 0x1
	DCD	0x7
	DCD	0x0
	DCD	0x0
|_SgxClockDomain| DCD 0x1
	DCD	0x8
	DCD	0x0
	DCD	0x0
|_WakeupPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_CorePowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x0
|_PeripheralPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x13
|_UsbHostPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x13
|_MpuPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0xa1
|_DssPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x12
|_NeonPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x2
|_Iva2PowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0xb3
|_CameraPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x12
|_SgxPowerDomain| DCD 0x3
	DCD	0x4
	DCD	0x0
	DCD	0x12
|s_DomainTable| DCD 0x0
	DCD	0x0
	DCD	|_WakeupPowerDomain|
	DCD	0x0
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xc
	DCD	|_CorePowerDomain|
	DCD	|_CoreClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_PeripheralPowerDomain|
	DCD	|_PeripheralClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_UsbHostPowerDomain|
	DCD	|_UsbHostClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x8
	DCD	0x0
	DCD	|_EmulationClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xd
	DCD	|_MpuPowerDomain|
	DCD	|_MpuClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_DssPowerDomain|
	DCD	|_DssClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xd
	DCD	|_NeonPowerDomain|
	DCD	|_NeonClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0xf
	DCD	|_SgxPowerDomain|
	DCD	|_SgxClockDomain|
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0xffffffff
	DCD	0xffffffff
	DCD	0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|Unlock|
	EXPORT	|Lock|
	EXPORT	|PrcmDomainSetPowerStateInternal|
	IMPORT	|OALWakeupLatency_UpdateDomainState|

  00000			 AREA	 |.pdata|, PDATA
|$T47214| DCD	|$LN9@PrcmDomain|
	DCD	0x40004804
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm_domain.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PrcmDomainSetPowerStateInternal| PROC

; 441  : {

  00000		 |$LN9@PrcmDomain|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M47211|

; 442  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 443  :     PowerDomainState_t *pDomainState;
; 444  :     
; 445  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00018	e59d3018	 ldr         r3, [sp, #0x18]
  0001c	e353000a	 cmp         r3, #0xA
  00020	3a000000	 bcc         |$LN4@PrcmDomain|
  00024	ea000036	 b           |$cleanUp$46915|
  00028		 |$LN4@PrcmDomain|

; 446  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_POWERSTATE) == 0) goto cleanUp;

  00028	e59d1018	 ldr         r1, [sp, #0x18]
  0002c	e3a0301c	 mov         r3, #0x1C
  00030	e0020391	 mul         r2, r1, r3
  00034	e59f30e0	 ldr         r3, [pc, #0xE0]
  00038	e0833002	 add         r3, r3, r2
  0003c	e2833004	 add         r3, r3, #4
  00040	e5933000	 ldr         r3, [r3]
  00044	e3130004	 tst         r3, #4
  00048	1a000000	 bne         |$LN3@PrcmDomain|
  0004c	ea00002c	 b           |$cleanUp$46915|
  00050		 |$LN3@PrcmDomain|

; 447  : 
; 448  :     // update internal state information 
; 449  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00050	e59d1018	 ldr         r1, [sp, #0x18]
  00054	e3a0301c	 mov         r3, #0x1C
  00058	e0020391	 mul         r2, r1, r3
  0005c	e59f30b8	 ldr         r3, [pc, #0xB8]
  00060	e0833002	 add         r3, r3, r2
  00064	e2833008	 add         r3, r3, #8
  00068	e5933000	 ldr         r3, [r3]
  0006c	e58d3004	 str         r3, [sp, #4]

; 450  :     if (pDomainState == NULL) goto cleanUp;

  00070	e59d3004	 ldr         r3, [sp, #4]
  00074	e3530000	 cmp         r3, #0
  00078	1a000000	 bne         |$LN2@PrcmDomain|
  0007c	ea000020	 b           |$cleanUp$46915|
  00080		 |$LN2@PrcmDomain|

; 451  :     
; 452  :     // POWERSTATE_OFF                      0
; 453  :     // POWERSTATE_RETENTION                1
; 454  :     // POWERSTATE_INACTIVE                 2
; 455  :     // POWERSTATE_ON                       3
; 456  : 
; 457  :     // LOGICRETSTATE_LOGICOFF_DOMAINRET    1
; 458  :     // LOGICRETSTATE_LOGICRET_DOMAINRET    4
; 459  : 
; 460  :     //OALMSG(1, (L"Domain %d -> P%d L%d\r\n", powerDomain, powerState, logicState));
; 461  : 
; 462  :     Lock(Mutex_Domain);

  00080	e3a00002	 mov         r0, #2
  00084	eb000000	 bl          Lock

; 463  :     powerState &= POWERSTATE_MASK;

  00088	e59d301c	 ldr         r3, [sp, #0x1C]
  0008c	e2033003	 and         r3, r3, #3
  00090	e58d301c	 str         r3, [sp, #0x1C]

; 464  :     powerState >>= POWERSTATE_SHIFT;

  00094	e59d301c	 ldr         r3, [sp, #0x1C]
  00098	e58d301c	 str         r3, [sp, #0x1C]

; 465  :     pDomainState->powerState = powerState;

  0009c	e59d201c	 ldr         r2, [sp, #0x1C]
  000a0	e59d3004	 ldr         r3, [sp, #4]
  000a4	e5832000	 str         r2, [r3]

; 466  :     pDomainState->logicState = logicState & LOGICRETSTATE;

  000a8	e59d3020	 ldr         r3, [sp, #0x20]
  000ac	e2032004	 and         r2, r3, #4
  000b0	e59d3004	 ldr         r3, [sp, #4]
  000b4	e2833004	 add         r3, r3, #4
  000b8	e5832000	 str         r2, [r3]

; 467  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_POWERSTATE);

  000bc	e3a01004	 mov         r1, #4
  000c0	e59d0018	 ldr         r0, [sp, #0x18]
  000c4	eb000000	 bl          _PrcmDomainHwUpdate
  000c8	e58d000c	 str         r0, [sp, #0xC]
  000cc	e59d300c	 ldr         r3, [sp, #0xC]
  000d0	e58d3000	 str         r3, [sp]

; 468  : 
; 469  :     // check if we need to notify of a power state change
; 470  :     if (bNotify == TRUE)

  000d4	e59d3024	 ldr         r3, [sp, #0x24]
  000d8	e3530001	 cmp         r3, #1
  000dc	1a000006	 bne         |$LN1@PrcmDomain|

; 471  :         {
; 472  :         // update latency information
; 473  :         OALWakeupLatency_UpdateDomainState(powerDomain, 
; 474  :             pDomainState->powerState, 
; 475  :             pDomainState->logicState
; 476  :             );

  000e0	e59d3004	 ldr         r3, [sp, #4]
  000e4	e2833004	 add         r3, r3, #4
  000e8	e5932000	 ldr         r2, [r3]
  000ec	e59d3004	 ldr         r3, [sp, #4]
  000f0	e5931000	 ldr         r1, [r3]
  000f4	e59d0018	 ldr         r0, [sp, #0x18]
  000f8	eb000000	 bl          OALWakeupLatency_UpdateDomainState
  000fc		 |$LN1@PrcmDomain|

; 477  :         }
; 478  :     Unlock(Mutex_Domain);

  000fc	e3a00002	 mov         r0, #2
  00100	eb000000	 bl          Unlock
  00104		 |$cleanUp$46915|

; 479  :     
; 480  : cleanUp:    
; 481  :     
; 482  :     return rc;

  00104	e59d3000	 ldr         r3, [sp]
  00108	e58d3008	 str         r3, [sp, #8]

; 483  : }

  0010c	e59d0008	 ldr         r0, [sp, #8]
  00110	e28dd010	 add         sp, sp, #0x10
  00114	e89d6000	 ldmia       sp, {sp, lr}
  00118	e12fff1e	 bx          lr
  0011c		 |$LN10@PrcmDomain|
  0011c		 |$LN11@PrcmDomain|
  0011c	00000000	 DCD         |s_DomainTable|
  00120		 |$M47212|

			 ENDP  ; |PrcmDomainSetPowerStateInternal|

	IMPORT	|EnterCriticalSection|
	IMPORT	|g_rgPrcmMutex|
	IMPORT	|g_bSingleThreaded|
	IMPORT	|g_PrcmPostInit|
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T47221| DCD	|$LN6@Lock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Lock|	 PROC

; 266  : {

  00000		 |$LN6@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47218|

; 267  :     if (g_PrcmPostInit && !g_bSingleThreaded) 

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Lock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Lock|

; 268  :         {
; 269  :         EnterCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          EnterCriticalSection
  00044		 |$LN1@Lock|

; 270  :         }
; 271  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Lock|
  0004c		 |$LN8@Lock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Lock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Lock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M47219|

			 ENDP  ; |Lock|

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T47232| DCD	|$LN6@Unlock|
	DCD	0x40001603
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Unlock| PROC

; 277  : {

  00000		 |$LN6@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M47229|

; 278  :     if (g_PrcmPostInit && !g_bSingleThreaded)

  0000c	e59f3040	 ldr         r3, [pc, #0x40]
  00010	e5933000	 ldr         r3, [r3]
  00014	e3530000	 cmp         r3, #0
  00018	0a000009	 beq         |$LN1@Unlock|
  0001c	e59f302c	 ldr         r3, [pc, #0x2C]
  00020	e5933000	 ldr         r3, [r3]
  00024	e3530000	 cmp         r3, #0
  00028	1a000005	 bne         |$LN1@Unlock|

; 279  :         {
; 280  :         LeaveCriticalSection(&g_rgPrcmMutex[mutexId]);

  0002c	e59d1008	 ldr         r1, [sp, #8]
  00030	e3a03014	 mov         r3, #0x14
  00034	e0020391	 mul         r2, r1, r3
  00038	e59f300c	 ldr         r3, [pc, #0xC]
  0003c	e0830002	 add         r0, r3, r2
  00040	eb000000	 bl          LeaveCriticalSection
  00044		 |$LN1@Unlock|

; 281  :         }
; 282  : }

  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$LN7@Unlock|
  0004c		 |$LN8@Unlock|
  0004c	00000000	 DCD         |g_rgPrcmMutex|
  00050		 |$LN9@Unlock|
  00050	00000000	 DCD         |g_bSingleThreaded|
  00054		 |$LN10@Unlock|
  00054	00000000	 DCD         |g_PrcmPostInit|
  00058		 |$M47230|

			 ENDP  ; |Unlock|

	IMPORT	|g_pPrcmRestore|
	IMPORT	|GetPrmRegisterSet|
	IMPORT	|GetCmRegisterSet|

  00008			 AREA	 |.pdata|, PDATA
|$T47244| DCD	|$LN16@PrcmDomain@2|
	DCD	0x40009e04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\am3517\oal\prcm\prcm_domain.c

  00120			 AREA	 |.text|, CODE, ARM

  00120		 |_PrcmDomainHwUpdate| PROC

; 366  : {

  00120		 |$LN16@PrcmDomain@2|
  00120	e1a0c00d	 mov         r12, sp
  00124	e92d0003	 stmdb       sp!, {r0, r1}
  00128	e92d5000	 stmdb       sp!, {r12, lr}
  0012c	e24dd030	 sub         sp, sp, #0x30
  00130		 |$M47241|

; 367  :     BOOL rc = TRUE;

  00130	e3a03001	 mov         r3, #1
  00134	e58d3004	 str         r3, [sp, #4]

; 368  :     UINT pm_wkdep;
; 369  : //    UINT pm_pwstctrl;
; 370  :     UINT cm_sleepdep;
; 371  :     UINT cm_clkstctrl;   
; 372  :     OMAP_CM_REGS   *pCmRegs;
; 373  :     OMAP_PRM_REGS  *pPrmRegs;
; 374  :     ClockDomainInfo_t  *pClockStates;    
; 375  :     PowerDomainState_t *pDomainState;
; 376  :     
; 377  :     // update the following hw registers
; 378  :     // PM_WKDEP_xxx
; 379  :     // CM_SLEEPDEP_xxx
; 380  :     // PM_PWSTCTRL_xxx.POWERSTATE
; 381  :     // CM_CLKSTCTRL_xxx
; 382  : 
; 383  :     pCmRegs = GetCmRegisterSet(powerDomain);

  00138	e59d0038	 ldr         r0, [sp, #0x38]
  0013c	eb000000	 bl          GetCmRegisterSet
  00140	e58d0028	 str         r0, [sp, #0x28]
  00144	e59d3028	 ldr         r3, [sp, #0x28]
  00148	e58d3018	 str         r3, [sp, #0x18]

; 384  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  0014c	e59d0038	 ldr         r0, [sp, #0x38]
  00150	eb000000	 bl          GetPrmRegisterSet
  00154	e58d002c	 str         r0, [sp, #0x2C]
  00158	e59d302c	 ldr         r3, [sp, #0x2C]
  0015c	e58d3014	 str         r3, [sp, #0x14]

; 385  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  00160	e59d1038	 ldr         r1, [sp, #0x38]
  00164	e3a0301c	 mov         r3, #0x1C
  00168	e0020391	 mul         r2, r1, r3
  0016c	e59f3220	 ldr         r3, [pc, #0x220]
  00170	e0833002	 add         r3, r3, r2
  00174	e283300c	 add         r3, r3, #0xC
  00178	e5933000	 ldr         r3, [r3]
  0017c	e58d3000	 str         r3, [sp]

; 386  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00180	e59d1038	 ldr         r1, [sp, #0x38]
  00184	e3a0301c	 mov         r3, #0x1C
  00188	e0020391	 mul         r2, r1, r3
  0018c	e59f3200	 ldr         r3, [pc, #0x200]
  00190	e0833002	 add         r3, r3, r2
  00194	e2833008	 add         r3, r3, #8
  00198	e5933000	 ldr         r3, [r3]
  0019c	e58d3010	 str         r3, [sp, #0x10]

; 387  :         
; 388  :     if (pDomainState != NULL)

  001a0	e59d3010	 ldr         r3, [sp, #0x10]
  001a4	e3530000	 cmp         r3, #0
  001a8	0a000025	 beq         |$LN11@PrcmDomain@2|

; 389  :         {
; 390  :         if (ffMask & DOMAIN_UPDATE_WKUPDEP)

  001ac	e59d303c	 ldr         r3, [sp, #0x3C]
  001b0	e3130001	 tst         r3, #1
  001b4	0a00000f	 beq         |$LN10@PrcmDomain@2|

; 391  :             {
; 392  :             pm_wkdep = INREG32(&pPrmRegs->PM_WKDEP_xxx) & ~WKDEP_MASK;

  001b8	e59d3014	 ldr         r3, [sp, #0x14]
  001bc	e28330c8	 add         r3, r3, #0xC8
  001c0	e5932000	 ldr         r2, [r3]
  001c4	e3e030ff	 mvn         r3, #0xFF
  001c8	e0023003	 and         r3, r2, r3
  001cc	e58d300c	 str         r3, [sp, #0xC]

; 393  :             pm_wkdep |= pDomainState->wakeDependency << WKDEP_SHIFT;

  001d0	e59d3010	 ldr         r3, [sp, #0x10]
  001d4	e283300c	 add         r3, r3, #0xC
  001d8	e59d200c	 ldr         r2, [sp, #0xC]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e1823003	 orr         r3, r2, r3
  001e4	e58d300c	 str         r3, [sp, #0xC]

; 394  :             OUTREG32(&pPrmRegs->PM_WKDEP_xxx, pm_wkdep);

  001e8	e59d3014	 ldr         r3, [sp, #0x14]
  001ec	e28320c8	 add         r2, r3, #0xC8
  001f0	e59d300c	 ldr         r3, [sp, #0xC]
  001f4	e5823000	 str         r3, [r2]
  001f8		 |$LN10@PrcmDomain@2|

; 395  :             }
; 396  : 
; 397  :         if (ffMask & DOMAIN_UPDATE_SLEEPDEP)

  001f8	e59d303c	 ldr         r3, [sp, #0x3C]
  001fc	e3130002	 tst         r3, #2
  00200	0a00000f	 beq         |$LN9@PrcmDomain@2|

; 398  :             {
; 399  :             cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx) & ~SLEEPDEP_MASK;

  00204	e59d3018	 ldr         r3, [sp, #0x18]
  00208	e2833044	 add         r3, r3, #0x44
  0020c	e5932000	 ldr         r2, [r3]
  00210	e3e030ff	 mvn         r3, #0xFF
  00214	e0023003	 and         r3, r2, r3
  00218	e58d3008	 str         r3, [sp, #8]

; 400  :             cm_sleepdep |= pDomainState->sleepDependency << SLEEPDEP_SHIFT;

  0021c	e59d3010	 ldr         r3, [sp, #0x10]
  00220	e2833008	 add         r3, r3, #8
  00224	e59d2008	 ldr         r2, [sp, #8]
  00228	e5933000	 ldr         r3, [r3]
  0022c	e1823003	 orr         r3, r2, r3
  00230	e58d3008	 str         r3, [sp, #8]

; 401  :             OUTREG32(&pCmRegs->CM_SLEEPDEP_xxx, cm_sleepdep);

  00234	e59d3018	 ldr         r3, [sp, #0x18]
  00238	e2832044	 add         r2, r3, #0x44
  0023c	e59d3008	 ldr         r3, [sp, #8]
  00240	e5823000	 str         r3, [r2]
  00244		 |$LN9@PrcmDomain@2|
  00244		 |$LN11@PrcmDomain@2|

; 402  :             }
; 403  :         }
; 404  : 
; 405  :     if (pClockStates != NULL)

  00244	e59d3000	 ldr         r3, [sp]
  00248	e3530000	 cmp         r3, #0
  0024c	0a000049	 beq         |$LN8@PrcmDomain@2|

; 406  :         {
; 407  :         if (ffMask & DOMAIN_UPDATE_CLOCKSTATE)

  00250	e59d303c	 ldr         r3, [sp, #0x3C]
  00254	e3130008	 tst         r3, #8
  00258	0a000046	 beq         |$LN7@PrcmDomain@2|

; 408  :             {
; 409  :             UINT i;
; 410  :             cm_clkstctrl = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  0025c	e59d3018	 ldr         r3, [sp, #0x18]
  00260	e2833048	 add         r3, r3, #0x48
  00264	e5933000	 ldr         r3, [r3]
  00268	e58d301c	 str         r3, [sp, #0x1C]

; 411  :             for (i = 0; i < pClockStates->count; ++i)

  0026c	e3a03000	 mov         r3, #0
  00270	e58d3020	 str         r3, [sp, #0x20]
  00274	ea000002	 b           |$LN6@PrcmDomain@2|
  00278		 |$LN5@PrcmDomain@2|
  00278	e59d3020	 ldr         r3, [sp, #0x20]
  0027c	e2833001	 add         r3, r3, #1
  00280	e58d3020	 str         r3, [sp, #0x20]
  00284		 |$LN6@PrcmDomain@2|
  00284	e59d2020	 ldr         r2, [sp, #0x20]
  00288	e59d3000	 ldr         r3, [sp]
  0028c	e5933000	 ldr         r3, [r3]
  00290	e1520003	 cmp         r2, r3
  00294	2a000022	 bcs         |$LN4@PrcmDomain@2|

; 412  :                 {
; 413  :                 cm_clkstctrl &= ~(CLKSTCTRL_MASK << pClockStates->rgClockDomains[i].clockShift);

  00298	e59d3000	 ldr         r3, [sp]
  0029c	e2831004	 add         r1, r3, #4
  002a0	e59d2020	 ldr         r2, [sp, #0x20]
  002a4	e3a0300c	 mov         r3, #0xC
  002a8	e0030392	 mul         r3, r2, r3
  002ac	e0813003	 add         r3, r1, r3
  002b0	e2833008	 add         r3, r3, #8
  002b4	e5932000	 ldr         r2, [r3]
  002b8	e3a03003	 mov         r3, #3
  002bc	e1a03213	 mov         r3, r3, lsl r2
  002c0	e1e02003	 mvn         r2, r3
  002c4	e59d301c	 ldr         r3, [sp, #0x1C]
  002c8	e0033002	 and         r3, r3, r2
  002cc	e58d301c	 str         r3, [sp, #0x1C]

; 414  :                 cm_clkstctrl |= (pClockStates->rgClockDomains[i].clockState << pClockStates->rgClockDomains[i].clockShift) << CLKSTCTRL_SHIFT;

  002d0	e59d3000	 ldr         r3, [sp]
  002d4	e2831004	 add         r1, r3, #4
  002d8	e59d2020	 ldr         r2, [sp, #0x20]
  002dc	e3a0300c	 mov         r3, #0xC
  002e0	e0030392	 mul         r3, r2, r3
  002e4	e0813003	 add         r3, r1, r3
  002e8	e2830004	 add         r0, r3, #4
  002ec	e59d3000	 ldr         r3, [sp]
  002f0	e2831004	 add         r1, r3, #4
  002f4	e59d2020	 ldr         r2, [sp, #0x20]
  002f8	e3a0300c	 mov         r3, #0xC
  002fc	e0030392	 mul         r3, r2, r3
  00300	e0813003	 add         r3, r1, r3
  00304	e2833008	 add         r3, r3, #8
  00308	e5902000	 ldr         r2, [r0]
  0030c	e5933000	 ldr         r3, [r3]
  00310	e1a02312	 mov         r2, r2, lsl r3
  00314	e59d301c	 ldr         r3, [sp, #0x1C]
  00318	e1833002	 orr         r3, r3, r2
  0031c	e58d301c	 str         r3, [sp, #0x1C]

; 415  :                 }

  00320	eaffffd4	 b           |$LN5@PrcmDomain@2|
  00324		 |$LN4@PrcmDomain@2|

; 416  :             OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, cm_clkstctrl);

  00324	e59d3018	 ldr         r3, [sp, #0x18]
  00328	e2832048	 add         r2, r3, #0x48
  0032c	e59d301c	 ldr         r3, [sp, #0x1C]
  00330	e5823000	 str         r3, [r2]

; 417  : 
; 418  :             // save context
; 419  :             if (powerDomain == POWERDOMAIN_MPU)

  00334	e59d3038	 ldr         r3, [sp, #0x38]
  00338	e3530005	 cmp         r3, #5
  0033c	1a000005	 bne         |$LN3@PrcmDomain@2|

; 420  :                 {
; 421  :                 OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_MPU, cm_clkstctrl);

  00340	e59f3048	 ldr         r3, [pc, #0x48]
  00344	e5933000	 ldr         r3, [r3]
  00348	e2832038	 add         r2, r3, #0x38
  0034c	e59d301c	 ldr         r3, [sp, #0x1C]
  00350	e5823000	 str         r3, [r2]
  00354	ea000007	 b           |$LN2@PrcmDomain@2|
  00358		 |$LN3@PrcmDomain@2|

; 422  :                 }
; 423  :             else if (powerDomain == POWERDOMAIN_CORE)

  00358	e59d3038	 ldr         r3, [sp, #0x38]
  0035c	e3530001	 cmp         r3, #1
  00360	1a000004	 bne         |$LN1@PrcmDomain@2|

; 424  :                 {
; 425  :                 OUTREG32(&g_pPrcmRestore->CM_CLKSTCTRL_CORE, cm_clkstctrl);

  00364	e59f3024	 ldr         r3, [pc, #0x24]
  00368	e5933000	 ldr         r3, [r3]
  0036c	e283203c	 add         r2, r3, #0x3C
  00370	e59d301c	 ldr         r3, [sp, #0x1C]
  00374	e5823000	 str         r3, [r2]
  00378		 |$LN1@PrcmDomain@2|
  00378		 |$LN2@PrcmDomain@2|
  00378		 |$LN7@PrcmDomain@2|
  00378		 |$LN8@PrcmDomain@2|

; 426  :                 }
; 427  :             }
; 428  :         }
; 429  :     
; 430  :     return rc;

  00378	e59d3004	 ldr         r3, [sp, #4]
  0037c	e58d3024	 str         r3, [sp, #0x24]

; 431  : }

  00380	e59d0024	 ldr         r0, [sp, #0x24]
  00384	e28dd030	 add         sp, sp, #0x30
  00388	e89d6000	 ldmia       sp, {sp, lr}
  0038c	e12fff1e	 bx          lr
  00390		 |$LN17@PrcmDomain@2|
  00390		 |$LN18@PrcmDomain@2|
  00390	00000000	 DCD         |g_pPrcmRestore|
  00394		 |$LN19@PrcmDomain@2|
  00394	00000000	 DCD         |s_DomainTable|
  00398		 |$M47242|

			 ENDP  ; |_PrcmDomainHwUpdate|

	EXPORT	|DomainGetDeviceContextState|

  00010			 AREA	 |.pdata|, PDATA
|$T47255| DCD	|$LN8@DomainGetD|
	DCD	0x40004e04
; Function compile flags: /Odtp

  00398			 AREA	 |.text|, CODE, ARM

  00398		 |DomainGetDeviceContextState| PROC

; 492  : {

  00398		 |$LN8@DomainGetD|
  00398	e1a0c00d	 mov         r12, sp
  0039c	e92d0007	 stmdb       sp!, {r0 - r2}
  003a0	e92d5000	 stmdb       sp!, {r12, lr}
  003a4	e24dd018	 sub         sp, sp, #0x18
  003a8		 |$M47252|

; 493  :     int idx;
; 494  :     BOOL rc;
; 495  :     OMAP_PRM_REGS *pPrmRegs;
; 496  :     
; 497  :     // Get array index 
; 498  :     idx = pInfo->offset - cm_offset(CM_ICLKEN1_xxx);

  003a8	e59d3024	 ldr         r3, [sp, #0x24]
  003ac	e2833008	 add         r3, r3, #8
  003b0	e5933000	 ldr         r3, [r3]
  003b4	e2433010	 sub         r3, r3, #0x10
  003b8	e58d3004	 str         r3, [sp, #4]

; 499  :     Lock(Mutex_Domain);

  003bc	e3a00002	 mov         r0, #2
  003c0	eb000000	 bl          Lock

; 500  : 
; 501  :     // get current power state of domain
; 502  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  003c4	e59d0020	 ldr         r0, [sp, #0x20]
  003c8	eb000000	 bl          GetPrmRegisterSet
  003cc	e58d0010	 str         r0, [sp, #0x10]
  003d0	e59d3010	 ldr         r3, [sp, #0x10]
  003d4	e58d3008	 str         r3, [sp, #8]

; 503  :    
; 504  :     // get device context state
; 505  :     rc = s_DomainTable[powerDomain].rgDeviceContextState[idx] & pInfo->mask;

  003d8	e59d1020	 ldr         r1, [sp, #0x20]
  003dc	e3a0301c	 mov         r3, #0x1C
  003e0	e0020391	 mul         r2, r1, r3
  003e4	e59f30e0	 ldr         r3, [pc, #0xE0]
  003e8	e0833002	 add         r3, r3, r2
  003ec	e2831010	 add         r1, r3, #0x10
  003f0	e59d2004	 ldr         r2, [sp, #4]
  003f4	e3a03004	 mov         r3, #4
  003f8	e0030392	 mul         r3, r2, r3
  003fc	e0812003	 add         r2, r1, r3
  00400	e59d3024	 ldr         r3, [sp, #0x24]
  00404	e2833004	 add         r3, r3, #4
  00408	e5922000	 ldr         r2, [r2]
  0040c	e5933000	 ldr         r3, [r3]
  00410	e0023003	 and         r3, r2, r3
  00414	e58d3000	 str         r3, [sp]

; 506  : 
; 507  :     // update device context state
; 508  :     if (bSet == TRUE)

  00418	e59d3028	 ldr         r3, [sp, #0x28]
  0041c	e3530001	 cmp         r3, #1
  00420	1a000019	 bne         |$LN1@DomainGetD|

; 509  :         {
; 510  :         s_DomainTable[powerDomain].rgDeviceContextState[idx] |= pInfo->mask;        

  00424	e59d1020	 ldr         r1, [sp, #0x20]
  00428	e3a0301c	 mov         r3, #0x1C
  0042c	e0020391	 mul         r2, r1, r3
  00430	e59f3094	 ldr         r3, [pc, #0x94]
  00434	e0833002	 add         r3, r3, r2
  00438	e2831010	 add         r1, r3, #0x10
  0043c	e59d2004	 ldr         r2, [sp, #4]
  00440	e3a03004	 mov         r3, #4
  00444	e0030392	 mul         r3, r2, r3
  00448	e0812003	 add         r2, r1, r3
  0044c	e59d3024	 ldr         r3, [sp, #0x24]
  00450	e2833004	 add         r3, r3, #4
  00454	e5922000	 ldr         r2, [r2]
  00458	e5933000	 ldr         r3, [r3]
  0045c	e182e003	 orr         lr, r2, r3
  00460	e59d2004	 ldr         r2, [sp, #4]
  00464	e3a03004	 mov         r3, #4
  00468	e0000392	 mul         r0, r2, r3
  0046c	e59d1020	 ldr         r1, [sp, #0x20]
  00470	e3a0301c	 mov         r3, #0x1C
  00474	e0020391	 mul         r2, r1, r3
  00478	e59f304c	 ldr         r3, [pc, #0x4C]
  0047c	e0833002	 add         r3, r3, r2
  00480	e2833010	 add         r3, r3, #0x10
  00484	e0833000	 add         r3, r3, r0
  00488	e583e000	 str         lr, [r3]
  0048c		 |$LN1@DomainGetD|

; 511  :         }
; 512  :     Unlock(Mutex_Domain);

  0048c	e3a00002	 mov         r0, #2
  00490	eb000000	 bl          Unlock

; 513  :     
; 514  :     return rc != 0;

  00494	e59d3000	 ldr         r3, [sp]
  00498	e3530000	 cmp         r3, #0
  0049c	0a000002	 beq         |$LN4@DomainGetD|
  004a0	e3a03001	 mov         r3, #1
  004a4	e58d3014	 str         r3, [sp, #0x14]
  004a8	ea000001	 b           |$LN5@DomainGetD|
  004ac		 |$LN4@DomainGetD|
  004ac	e3a03000	 mov         r3, #0
  004b0	e58d3014	 str         r3, [sp, #0x14]
  004b4		 |$LN5@DomainGetD|
  004b4	e59d3014	 ldr         r3, [sp, #0x14]
  004b8	e58d300c	 str         r3, [sp, #0xC]

; 515  : }

  004bc	e59d000c	 ldr         r0, [sp, #0xC]
  004c0	e28dd018	 add         sp, sp, #0x18
  004c4	e89d6000	 ldmia       sp, {sp, lr}
  004c8	e12fff1e	 bx          lr
  004cc		 |$LN9@DomainGetD|
  004cc		 |$LN10@DomainGetD|
  004cc	00000000	 DCD         |s_DomainTable|
  004d0		 |$M47253|

			 ENDP  ; |DomainGetDeviceContextState|

	EXPORT	|??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DomainInitialize|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00018			 AREA	 |.pdata|, PDATA
|$T47267| DCD	|$LN15@DomainInit|
	DCD	0x40007c02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  004d0			 AREA	 |.text|, CODE, ARM

  004d0		 |DomainInitialize| PROC

; 520  : {

  004d0		 |$LN15@DomainInit|
  004d0	e92d4010	 stmdb       sp!, {r4, lr}
  004d4	e24dd034	 sub         sp, sp, #0x34
  004d8		 |$M47264|

; 521  :     UINT            i;
; 522  :     BOOL            rc = TRUE;

  004d8	e3a03001	 mov         r3, #1
  004dc	e58d3004	 str         r3, [sp, #4]

; 523  :     UINT            cm_clkstctrl;
; 524  :     UINT            pm_pwstctrl;
; 525  :     UINT            pm_wkdep;
; 526  :     UINT            cm_sleepdep;
; 527  :     OMAP_CM_REGS   *pCmRegs;
; 528  :     OMAP_PRM_REGS  *pPrmRegs;
; 529  :     
; 530  :     
; 531  :     OALMSG(OAL_FUNC, (L"+DomainInitialize()\r\n"));

  004e0	e59f31cc	 ldr         r3, [pc, #0x1CC]
  004e4	e5933440	 ldr         r3, [r3, #0x440]
  004e8	e3130004	 tst         r3, #4
  004ec	0a000004	 beq         |$LN9@DomainInit|
  004f0	e59f01c4	 ldr         r0, [pc, #0x1C4]
  004f4	eb000000	 bl          NKDbgPrintfW
  004f8	e3a03001	 mov         r3, #1
  004fc	e58d3024	 str         r3, [sp, #0x24]
  00500	ea000001	 b           |$LN10@DomainInit|
  00504		 |$LN9@DomainInit|
  00504	e3a03000	 mov         r3, #0
  00508	e58d3024	 str         r3, [sp, #0x24]
  0050c		 |$LN10@DomainInit|

; 532  : 
; 533  :     for (i = 0; i < POWERDOMAIN_COUNT; ++i)

  0050c	e3a03000	 mov         r3, #0
  00510	e58d3008	 str         r3, [sp, #8]
  00514	ea000002	 b           |$LN6@DomainInit|
  00518		 |$LN5@DomainInit|
  00518	e59d3008	 ldr         r3, [sp, #8]
  0051c	e2833001	 add         r3, r3, #1
  00520	e58d3008	 str         r3, [sp, #8]
  00524		 |$LN6@DomainInit|
  00524	e59d3008	 ldr         r3, [sp, #8]
  00528	e353000a	 cmp         r3, #0xA
  0052c	2a00004d	 bcs         |$LN4@DomainInit|

; 534  :         {        
; 535  :         pCmRegs = GetCmRegisterSet(i);

  00530	e59d0008	 ldr         r0, [sp, #8]
  00534	eb000000	 bl          GetCmRegisterSet
  00538	e58d0028	 str         r0, [sp, #0x28]
  0053c	e59d3028	 ldr         r3, [sp, #0x28]
  00540	e58d3018	 str         r3, [sp, #0x18]

; 536  :         pPrmRegs = GetPrmRegisterSet(i);

  00544	e59d0008	 ldr         r0, [sp, #8]
  00548	eb000000	 bl          GetPrmRegisterSet
  0054c	e58d002c	 str         r0, [sp, #0x2C]
  00550	e59d302c	 ldr         r3, [sp, #0x2C]
  00554	e58d3014	 str         r3, [sp, #0x14]

; 537  : 
; 538  :         pm_wkdep = 0;

  00558	e3a03000	 mov         r3, #0
  0055c	e58d3010	 str         r3, [sp, #0x10]

; 539  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_WKUPDEP)

  00560	e59d1008	 ldr         r1, [sp, #8]
  00564	e3a0301c	 mov         r3, #0x1C
  00568	e0020391	 mul         r2, r1, r3
  0056c	e59f3144	 ldr         r3, [pc, #0x144]
  00570	e0833002	 add         r3, r3, r2
  00574	e2833004	 add         r3, r3, #4
  00578	e5933000	 ldr         r3, [r3]
  0057c	e3130001	 tst         r3, #1
  00580	0a000003	 beq         |$LN3@DomainInit|

; 540  :             {
; 541  :             pm_wkdep = INREG32(&pPrmRegs->PM_WKDEP_xxx);

  00584	e59d3014	 ldr         r3, [sp, #0x14]
  00588	e28330c8	 add         r3, r3, #0xC8
  0058c	e5933000	 ldr         r3, [r3]
  00590	e58d3010	 str         r3, [sp, #0x10]
  00594		 |$LN3@DomainInit|

; 542  :             }
; 543  : 
; 544  :         cm_sleepdep = 0;

  00594	e3a03000	 mov         r3, #0
  00598	e58d300c	 str         r3, [sp, #0xC]

; 545  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP)

  0059c	e59d1008	 ldr         r1, [sp, #8]
  005a0	e3a0301c	 mov         r3, #0x1C
  005a4	e0020391	 mul         r2, r1, r3
  005a8	e59f3108	 ldr         r3, [pc, #0x108]
  005ac	e0833002	 add         r3, r3, r2
  005b0	e2833004	 add         r3, r3, #4
  005b4	e5933000	 ldr         r3, [r3]
  005b8	e3130002	 tst         r3, #2
  005bc	0a000003	 beq         |$LN2@DomainInit|

; 546  :             {
; 547  :             cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx);

  005c0	e59d3018	 ldr         r3, [sp, #0x18]
  005c4	e2833044	 add         r3, r3, #0x44
  005c8	e5933000	 ldr         r3, [r3]
  005cc	e58d300c	 str         r3, [sp, #0xC]
  005d0		 |$LN2@DomainInit|

; 548  :             }
; 549  : 
; 550  :         pm_pwstctrl = 0;

  005d0	e3a03000	 mov         r3, #0
  005d4	e58d3000	 str         r3, [sp]

; 551  :         cm_clkstctrl = 0;

  005d8	e3a03000	 mov         r3, #0
  005dc	e58d301c	 str         r3, [sp, #0x1C]

; 552  : 
; 553  :         if (s_DomainTable[i].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE)

  005e0	e59d1008	 ldr         r1, [sp, #8]
  005e4	e3a0301c	 mov         r3, #0x1C
  005e8	e0020391	 mul         r2, r1, r3
  005ec	e59f30c4	 ldr         r3, [pc, #0xC4]
  005f0	e0833002	 add         r3, r3, r2
  005f4	e2833004	 add         r3, r3, #4
  005f8	e5933000	 ldr         r3, [r3]
  005fc	e3130008	 tst         r3, #8
  00600	0a000003	 beq         |$LN1@DomainInit|

; 554  :             {
; 555  :             cm_clkstctrl = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  00604	e59d3018	 ldr         r3, [sp, #0x18]
  00608	e2833048	 add         r3, r3, #0x48
  0060c	e5933000	 ldr         r3, [r3]
  00610	e58d301c	 str         r3, [sp, #0x1C]
  00614		 |$LN1@DomainInit|

; 556  :             }
; 557  : 
; 558  :         _DomainInitialize(s_DomainTable[i].pDomainState, 
; 559  :             pm_pwstctrl, pm_wkdep, cm_sleepdep
; 560  :             );

  00614	e59d300c	 ldr         r3, [sp, #0xC]
  00618	e59d2010	 ldr         r2, [sp, #0x10]
  0061c	e59d1000	 ldr         r1, [sp]
  00620	e59d4008	 ldr         r4, [sp, #8]
  00624	e3a0001c	 mov         r0, #0x1C
  00628	e00e0094	 mul         lr, r4, r0
  0062c	e59f0084	 ldr         r0, [pc, #0x84]
  00630	e080000e	 add         r0, r0, lr
  00634	e2800008	 add         r0, r0, #8
  00638	e5900000	 ldr         r0, [r0]
  0063c	eb000000	 bl          _DomainInitialize

; 561  : 
; 562  :         _PrcmDomainClockInitialize(s_DomainTable[i].pClockStates, 
; 563  :             cm_clkstctrl
; 564  :             );

  00640	e59d101c	 ldr         r1, [sp, #0x1C]
  00644	e59d0008	 ldr         r0, [sp, #8]
  00648	e3a0301c	 mov         r3, #0x1C
  0064c	e0020390	 mul         r2, r0, r3
  00650	e59f3060	 ldr         r3, [pc, #0x60]
  00654	e0833002	 add         r3, r3, r2
  00658	e283300c	 add         r3, r3, #0xC
  0065c	e5930000	 ldr         r0, [r3]
  00660	eb000000	 bl          _PrcmDomainClockInitialize

; 565  :         }

  00664	eaffffab	 b           |$LN5@DomainInit|
  00668		 |$LN4@DomainInit|

; 566  : 
; 567  : 
; 568  :     OALMSG(OAL_FUNC, (L"-DomainInitialize()=%d\r\n", rc));

  00668	e59f3044	 ldr         r3, [pc, #0x44]
  0066c	e5933440	 ldr         r3, [r3, #0x440]
  00670	e3130004	 tst         r3, #4
  00674	0a000005	 beq         |$LN11@DomainInit|
  00678	e59d1004	 ldr         r1, [sp, #4]
  0067c	e59f002c	 ldr         r0, [pc, #0x2C]
  00680	eb000000	 bl          NKDbgPrintfW
  00684	e3a03001	 mov         r3, #1
  00688	e58d3030	 str         r3, [sp, #0x30]
  0068c	ea000001	 b           |$LN12@DomainInit|
  00690		 |$LN11@DomainInit|
  00690	e3a03000	 mov         r3, #0
  00694	e58d3030	 str         r3, [sp, #0x30]
  00698		 |$LN12@DomainInit|

; 569  :     return rc;    

  00698	e59d3004	 ldr         r3, [sp, #4]
  0069c	e58d3020	 str         r3, [sp, #0x20]

; 570  : }

  006a0	e59d0020	 ldr         r0, [sp, #0x20]
  006a4	e28dd034	 add         sp, sp, #0x34
  006a8	e8bd4010	 ldmia       sp!, {r4, lr}
  006ac	e12fff1e	 bx          lr
  006b0		 |$LN16@DomainInit|
  006b0		 |$LN17@DomainInit|
  006b0	00000000	 DCD         |??_C@_1DC@PHJGNBDE@?$AA?9?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  006b4		 |$LN18@DomainInit|
  006b4	00000000	 DCD         |dpCurSettings|
  006b8		 |$LN19@DomainInit|
  006b8	00000000	 DCD         |s_DomainTable|
  006bc		 |$LN20@DomainInit|
  006bc	00000000	 DCD         |??_C@_1CM@KJPIEGMJ@?$AA?$CL?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  006c0		 |$M47265|

			 ENDP  ; |DomainInitialize|

	EXPORT	|??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'

  00020			 AREA	 |.pdata|, PDATA
|$T47282| DCD	|$LN10@DomainInit@2|
	DCD	0x40003b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "_", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "_", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "m"
	DCB	0x0, "_", 0x0, "p", 0x0, "w", 0x0, "s", 0x0, "t", 0x0, "c"
	DCB	0x0, "t", 0x0, "r", 0x0, "l", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, "p", 0x0, "m"
	DCB	0x0, "_", 0x0, "w", 0x0, "k", 0x0, "d", 0x0, "e", 0x0, "p"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "m", 0x0, "_"
	DCB	0x0, "s", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p", 0x0, "d"
	DCB	0x0, "e", 0x0, "p", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  006c0			 AREA	 |.text|, CODE, ARM

  006c0		 |_DomainInitialize| PROC

; 250  : {

  006c0		 |$LN10@DomainInit@2|
  006c0	e1a0c00d	 mov         r12, sp
  006c4	e92d000f	 stmdb       sp!, {r0 - r3}
  006c8	e92d5000	 stmdb       sp!, {r12, lr}
  006cc	e24dd010	 sub         sp, sp, #0x10
  006d0		 |$M47279|

; 251  :     BOOL rc = TRUE;

  006d0	e3a03001	 mov         r3, #1
  006d4	e58d3000	 str         r3, [sp]

; 252  :     OALMSG(OAL_FUNC, (L"+_DomainInitialize("
; 253  :         L"pDomain=0x%08X, pm_pwstctrl=0x%08X"
; 254  :         L"pm_wkdep=0x%08X, cm_sleepdep=0x%08X)\r\n", 
; 255  :         pDomain, pm_pwstctrl, cm_sleepdep)
; 256  :         );

  006d8	e59f30c4	 ldr         r3, [pc, #0xC4]
  006dc	e5933440	 ldr         r3, [r3, #0x440]
  006e0	e3130004	 tst         r3, #4
  006e4	0a000007	 beq         |$LN4@DomainInit@2|
  006e8	e59d3024	 ldr         r3, [sp, #0x24]
  006ec	e59d201c	 ldr         r2, [sp, #0x1C]
  006f0	e59d1018	 ldr         r1, [sp, #0x18]
  006f4	e59f00ac	 ldr         r0, [pc, #0xAC]
  006f8	eb000000	 bl          NKDbgPrintfW
  006fc	e3a03001	 mov         r3, #1
  00700	e58d3008	 str         r3, [sp, #8]
  00704	ea000001	 b           |$LN5@DomainInit@2|
  00708		 |$LN4@DomainInit@2|
  00708	e3a03000	 mov         r3, #0
  0070c	e58d3008	 str         r3, [sp, #8]
  00710		 |$LN5@DomainInit@2|

; 257  : 
; 258  :     // all values are normalized and then cached in SDRAM
; 259  :     if (pDomain == NULL) goto cleanUp;

  00710	e59d3018	 ldr         r3, [sp, #0x18]
  00714	e3530000	 cmp         r3, #0
  00718	1a000000	 bne         |$LN1@DomainInit@2|
  0071c	ea00000d	 b           |$cleanUp$46814|
  00720		 |$LN1@DomainInit@2|

; 260  :     
; 261  :     // domain power state
; 262  :     pDomain->powerState = (pm_pwstctrl & POWERSTATE_MASK) >> POWERSTATE_SHIFT;

  00720	e59d301c	 ldr         r3, [sp, #0x1C]
  00724	e2032003	 and         r2, r3, #3
  00728	e59d3018	 ldr         r3, [sp, #0x18]
  0072c	e5832000	 str         r2, [r3]

; 263  : 
; 264  :     // wake and sleep dependencies
; 265  :     pDomain->wakeDependency = (pm_wkdep & WKDEP_MASK) >> WKDEP_SHIFT;

  00730	e59d3020	 ldr         r3, [sp, #0x20]
  00734	e20320ff	 and         r2, r3, #0xFF
  00738	e59d3018	 ldr         r3, [sp, #0x18]
  0073c	e283300c	 add         r3, r3, #0xC
  00740	e5832000	 str         r2, [r3]

; 266  :     pDomain->sleepDependency = (cm_sleepdep & SLEEPDEP_MASK) >> SLEEPDEP_SHIFT;

  00744	e59d3024	 ldr         r3, [sp, #0x24]
  00748	e20320ff	 and         r2, r3, #0xFF
  0074c	e59d3018	 ldr         r3, [sp, #0x18]
  00750	e2833008	 add         r3, r3, #8
  00754	e5832000	 str         r2, [r3]
  00758		 |$cleanUp$46814|

; 267  : 
; 268  : cleanUp:
; 269  :     OALMSG(OAL_FUNC, (L"-_DomainInitialize()=%d\r\n", rc));

  00758	e59f3044	 ldr         r3, [pc, #0x44]
  0075c	e5933440	 ldr         r3, [r3, #0x440]
  00760	e3130004	 tst         r3, #4
  00764	0a000005	 beq         |$LN6@DomainInit@2|
  00768	e59d1000	 ldr         r1, [sp]
  0076c	e59f002c	 ldr         r0, [pc, #0x2C]
  00770	eb000000	 bl          NKDbgPrintfW
  00774	e3a03001	 mov         r3, #1
  00778	e58d300c	 str         r3, [sp, #0xC]
  0077c	ea000001	 b           |$LN7@DomainInit@2|
  00780		 |$LN6@DomainInit@2|
  00780	e3a03000	 mov         r3, #0
  00784	e58d300c	 str         r3, [sp, #0xC]
  00788		 |$LN7@DomainInit@2|

; 270  :     return rc;    

  00788	e59d3000	 ldr         r3, [sp]
  0078c	e58d3004	 str         r3, [sp, #4]

; 271  : }

  00790	e59d0004	 ldr         r0, [sp, #4]
  00794	e28dd010	 add         sp, sp, #0x10
  00798	e89d6000	 ldmia       sp, {sp, lr}
  0079c	e12fff1e	 bx          lr
  007a0		 |$LN11@DomainInit@2|
  007a0		 |$LN12@DomainInit@2|
  007a0	00000000	 DCD         |??_C@_1DE@IEBANBBC@?$AA?9?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  007a4		 |$LN13@DomainInit@2|
  007a4	00000000	 DCD         |dpCurSettings|
  007a8		 |$LN14@DomainInit@2|
  007a8	00000000	 DCD         |??_C@_1LI@HACPIACF@?$AA?$CL?$AA_?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  007ac		 |$M47280|

			 ENDP  ; |_DomainInitialize|

	EXPORT	|??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T47296| DCD	|$LN13@PrcmDomain@3|
	DCD	0x40004d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@| DCB "-"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@| DCB "+"
	DCB	0x0, "_", 0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i"
	DCB	0x0, "z", 0x0, "e", 0x0, "(", 0x0, "p", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "s", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "c", 0x0, "m", 0x0, "_", 0x0, "c", 0x0, "l", 0x0, "k"
	DCB	0x0, "s", 0x0, "t", 0x0, "c", 0x0, "t", 0x0, "r", 0x0, "l"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  007ac			 AREA	 |.text|, CODE, ARM

  007ac		 |_PrcmDomainClockInitialize| PROC

; 336  : {

  007ac		 |$LN13@PrcmDomain@3|
  007ac	e1a0c00d	 mov         r12, sp
  007b0	e92d0003	 stmdb       sp!, {r0, r1}
  007b4	e92d5000	 stmdb       sp!, {r12, lr}
  007b8	e24dd018	 sub         sp, sp, #0x18
  007bc		 |$M47293|

; 337  :     UINT i;
; 338  :     UINT temp;
; 339  :     BOOL rc = TRUE;

  007bc	e3a03001	 mov         r3, #1
  007c0	e58d3000	 str         r3, [sp]

; 340  :     OALMSG(OAL_FUNC, (L"+_PrcmDomainClockInitialize("
; 341  :         L"pClockStates=0x%08X, cm_clkstctrl=0x%08X\r\n", 
; 342  :         pClockStates,  cm_clkstctrl)
; 343  :         );

  007c4	e59f310c	 ldr         r3, [pc, #0x10C]
  007c8	e5933440	 ldr         r3, [r3, #0x440]
  007cc	e3130004	 tst         r3, #4
  007d0	0a000006	 beq         |$LN7@PrcmDomain@3|
  007d4	e59d2024	 ldr         r2, [sp, #0x24]
  007d8	e59d1020	 ldr         r1, [sp, #0x20]
  007dc	e59f00f8	 ldr         r0, [pc, #0xF8]
  007e0	eb000000	 bl          NKDbgPrintfW
  007e4	e3a03001	 mov         r3, #1
  007e8	e58d3010	 str         r3, [sp, #0x10]
  007ec	ea000001	 b           |$LN8@PrcmDomain@3|
  007f0		 |$LN7@PrcmDomain@3|
  007f0	e3a03000	 mov         r3, #0
  007f4	e58d3010	 str         r3, [sp, #0x10]
  007f8		 |$LN8@PrcmDomain@3|

; 344  : 
; 345  :     // all values are normalized and then cached in SDRAM
; 346  :     if (pClockStates == NULL) goto cleanUp;

  007f8	e59d3020	 ldr         r3, [sp, #0x20]
  007fc	e3530000	 cmp         r3, #0
  00800	1a000000	 bne         |$LN4@PrcmDomain@3|
  00804	ea000020	 b           |$cleanUp$46856|
  00808		 |$LN4@PrcmDomain@3|

; 347  : 
; 348  :     for (i = 0; i < pClockStates->count; ++i)

  00808	e3a03000	 mov         r3, #0
  0080c	e58d3004	 str         r3, [sp, #4]
  00810	ea000002	 b           |$LN3@PrcmDomain@3|
  00814		 |$LN2@PrcmDomain@3|
  00814	e59d3004	 ldr         r3, [sp, #4]
  00818	e2833001	 add         r3, r3, #1
  0081c	e58d3004	 str         r3, [sp, #4]
  00820		 |$LN3@PrcmDomain@3|
  00820	e59d2004	 ldr         r2, [sp, #4]
  00824	e59d3020	 ldr         r3, [sp, #0x20]
  00828	e5933000	 ldr         r3, [r3]
  0082c	e1520003	 cmp         r2, r3
  00830	2a000015	 bcs         |$LN1@PrcmDomain@3|

; 349  :         {  
; 350  :         temp = cm_clkstctrl >> pClockStates->rgClockDomains[i].clockShift;        

  00834	e59d3020	 ldr         r3, [sp, #0x20]
  00838	e2831004	 add         r1, r3, #4
  0083c	e59d2004	 ldr         r2, [sp, #4]
  00840	e3a0300c	 mov         r3, #0xC
  00844	e0030392	 mul         r3, r2, r3
  00848	e0813003	 add         r3, r1, r3
  0084c	e2833008	 add         r3, r3, #8
  00850	e59d2024	 ldr         r2, [sp, #0x24]
  00854	e5933000	 ldr         r3, [r3]
  00858	e1a03332	 mov         r3, r2, lsr r3
  0085c	e58d3008	 str         r3, [sp, #8]

; 351  :         pClockStates->rgClockDomains[i].clockState = (temp & CLKSTCTRL_MASK) >> CLKSTCTRL_SHIFT; 

  00860	e59d3008	 ldr         r3, [sp, #8]
  00864	e2030003	 and         r0, r3, #3
  00868	e59d3020	 ldr         r3, [sp, #0x20]
  0086c	e2831004	 add         r1, r3, #4
  00870	e59d2004	 ldr         r2, [sp, #4]
  00874	e3a0300c	 mov         r3, #0xC
  00878	e0030392	 mul         r3, r2, r3
  0087c	e0813003	 add         r3, r1, r3
  00880	e2833004	 add         r3, r3, #4
  00884	e5830000	 str         r0, [r3]

; 352  :         }

  00888	eaffffe1	 b           |$LN2@PrcmDomain@3|
  0088c		 |$LN1@PrcmDomain@3|
  0088c		 |$cleanUp$46856|

; 353  :     
; 354  : cleanUp:
; 355  :     OALMSG(OAL_FUNC, (L"-_PrcmDomainClockInitialize()=%d\r\n", rc));

  0088c	e59f3044	 ldr         r3, [pc, #0x44]
  00890	e5933440	 ldr         r3, [r3, #0x440]
  00894	e3130004	 tst         r3, #4
  00898	0a000005	 beq         |$LN9@PrcmDomain@3|
  0089c	e59d1000	 ldr         r1, [sp]
  008a0	e59f002c	 ldr         r0, [pc, #0x2C]
  008a4	eb000000	 bl          NKDbgPrintfW
  008a8	e3a03001	 mov         r3, #1
  008ac	e58d3014	 str         r3, [sp, #0x14]
  008b0	ea000001	 b           |$LN10@PrcmDomain@3|
  008b4		 |$LN9@PrcmDomain@3|
  008b4	e3a03000	 mov         r3, #0
  008b8	e58d3014	 str         r3, [sp, #0x14]
  008bc		 |$LN10@PrcmDomain@3|

; 356  :     return rc;    

  008bc	e59d3000	 ldr         r3, [sp]
  008c0	e58d300c	 str         r3, [sp, #0xC]

; 357  : }

  008c4	e59d000c	 ldr         r0, [sp, #0xC]
  008c8	e28dd018	 add         sp, sp, #0x18
  008cc	e89d6000	 ldmia       sp, {sp, lr}
  008d0	e12fff1e	 bx          lr
  008d4		 |$LN14@PrcmDomain@3|
  008d4		 |$LN15@PrcmDomain@3|
  008d4	00000000	 DCD         |??_C@_1EG@MJBAHCAP@?$AA?9?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd@|
  008d8		 |$LN16@PrcmDomain@3|
  008d8	00000000	 DCD         |dpCurSettings|
  008dc		 |$LN17@PrcmDomain@3|
  008dc	00000000	 DCD         |??_C@_1IO@GHDCOMKL@?$AA?$CL?$AA_?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAC?$AAl?$AAo?$AAc?$AAk?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?$CI?$AAp?$AAC?$AAl?$AAo@|
  008e0		 |$M47294|

			 ENDP  ; |_PrcmDomainClockInitialize|

	EXPORT	|PrcmRestoreDomain|

  00030			 AREA	 |.pdata|, PDATA
|$T47306| DCD	|$LN9@PrcmRestor|
	DCD	0x40006804
; Function compile flags: /Odtp

  008e0			 AREA	 |.text|, CODE, ARM

  008e0		 |PrcmRestoreDomain| PROC

; 580  : {

  008e0		 |$LN9@PrcmRestor|
  008e0	e1a0c00d	 mov         r12, sp
  008e4	e92d0001	 stmdb       sp!, {r0}
  008e8	e92d5000	 stmdb       sp!, {r12, lr}
  008ec	e24dd02c	 sub         sp, sp, #0x2C
  008f0		 |$M47303|

; 581  :     UINT i;
; 582  :     BOOL rc = TRUE;

  008f0	e3a03001	 mov         r3, #1
  008f4	e58d3004	 str         r3, [sp, #4]

; 583  :     UINT cm_sleepdep;
; 584  :     UINT cm_clkstctrl;   
; 585  :     OMAP_CM_REGS   *pCmRegs;
; 586  :     OMAP_PRM_REGS  *pPrmRegs;
; 587  :     ClockDomainInfo_t  *pClockStates;    
; 588  :     PowerDomainState_t *pDomainState;
; 589  :     
; 590  :     // initialize variables
; 591  :     pCmRegs = GetCmRegisterSet(powerDomain);

  008f8	e59d0034	 ldr         r0, [sp, #0x34]
  008fc	eb000000	 bl          GetCmRegisterSet
  00900	e58d0024	 str         r0, [sp, #0x24]
  00904	e59d3024	 ldr         r3, [sp, #0x24]
  00908	e58d3018	 str         r3, [sp, #0x18]

; 592  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  0090c	e59d0034	 ldr         r0, [sp, #0x34]
  00910	eb000000	 bl          GetPrmRegisterSet
  00914	e58d0028	 str         r0, [sp, #0x28]
  00918	e59d3028	 ldr         r3, [sp, #0x28]
  0091c	e58d3014	 str         r3, [sp, #0x14]

; 593  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  00920	e59d1034	 ldr         r1, [sp, #0x34]
  00924	e3a0301c	 mov         r3, #0x1C
  00928	e0020391	 mul         r2, r1, r3
  0092c	e59f3148	 ldr         r3, [pc, #0x148]
  00930	e0833002	 add         r3, r3, r2
  00934	e283300c	 add         r3, r3, #0xC
  00938	e5933000	 ldr         r3, [r3]
  0093c	e58d3000	 str         r3, [sp]

; 594  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00940	e59d1034	 ldr         r1, [sp, #0x34]
  00944	e3a0301c	 mov         r3, #0x1C
  00948	e0020391	 mul         r2, r1, r3
  0094c	e59f3128	 ldr         r3, [pc, #0x128]
  00950	e0833002	 add         r3, r3, r2
  00954	e2833008	 add         r3, r3, #8
  00958	e5933000	 ldr         r3, [r3]
  0095c	e58d3010	 str         r3, [sp, #0x10]

; 595  :         
; 596  :     // restore clk src dividers
; 597  :     _DomainClockRestore(powerDomain);

  00960	e59d0034	 ldr         r0, [sp, #0x34]
  00964	eb000000	 bl          _DomainClockRestore

; 598  : 
; 599  :     if (s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP)

  00968	e59d1034	 ldr         r1, [sp, #0x34]
  0096c	e3a0301c	 mov         r3, #0x1C
  00970	e0020391	 mul         r2, r1, r3
  00974	e59f3100	 ldr         r3, [pc, #0x100]
  00978	e0833002	 add         r3, r3, r2
  0097c	e2833004	 add         r3, r3, #4
  00980	e5933000	 ldr         r3, [r3]
  00984	e3130002	 tst         r3, #2
  00988	0a00000f	 beq         |$LN4@PrcmRestor|

; 600  :         {
; 601  :         // restore sleep dependencies
; 602  :         cm_sleepdep = INREG32(&pCmRegs->CM_SLEEPDEP_xxx) & ~SLEEPDEP_MASK;

  0098c	e59d3018	 ldr         r3, [sp, #0x18]
  00990	e2833044	 add         r3, r3, #0x44
  00994	e5932000	 ldr         r2, [r3]
  00998	e3e030ff	 mvn         r3, #0xFF
  0099c	e0023003	 and         r3, r2, r3
  009a0	e58d300c	 str         r3, [sp, #0xC]

; 603  :         cm_sleepdep |= pDomainState->sleepDependency << SLEEPDEP_SHIFT;

  009a4	e59d3010	 ldr         r3, [sp, #0x10]
  009a8	e2833008	 add         r3, r3, #8
  009ac	e59d200c	 ldr         r2, [sp, #0xC]
  009b0	e5933000	 ldr         r3, [r3]
  009b4	e1823003	 orr         r3, r2, r3
  009b8	e58d300c	 str         r3, [sp, #0xC]

; 604  :         OUTREG32(&pCmRegs->CM_SLEEPDEP_xxx, cm_sleepdep);

  009bc	e59d3018	 ldr         r3, [sp, #0x18]
  009c0	e2832044	 add         r2, r3, #0x44
  009c4	e59d300c	 ldr         r3, [sp, #0xC]
  009c8	e5823000	 str         r3, [r2]
  009cc		 |$LN4@PrcmRestor|

; 605  :         }
; 606  : 
; 607  :     // restore clock state
; 608  :     cm_clkstctrl = 0;

  009cc	e3a03000	 mov         r3, #0
  009d0	e58d301c	 str         r3, [sp, #0x1C]

; 609  :     for (i = 0; i < pClockStates->count; ++i)

  009d4	e3a03000	 mov         r3, #0
  009d8	e58d3008	 str         r3, [sp, #8]
  009dc	ea000002	 b           |$LN3@PrcmRestor|
  009e0		 |$LN2@PrcmRestor|
  009e0	e59d3008	 ldr         r3, [sp, #8]
  009e4	e2833001	 add         r3, r3, #1
  009e8	e58d3008	 str         r3, [sp, #8]
  009ec		 |$LN3@PrcmRestor|
  009ec	e59d2008	 ldr         r2, [sp, #8]
  009f0	e59d3000	 ldr         r3, [sp]
  009f4	e5933000	 ldr         r3, [r3]
  009f8	e1520003	 cmp         r2, r3
  009fc	2a000014	 bcs         |$LN1@PrcmRestor|

; 610  :         {
; 611  :         cm_clkstctrl |= (pClockStates->rgClockDomains[i].clockState << pClockStates->rgClockDomains[i].clockShift) << CLKSTCTRL_SHIFT;

  00a00	e59d3000	 ldr         r3, [sp]
  00a04	e2831004	 add         r1, r3, #4
  00a08	e59d2008	 ldr         r2, [sp, #8]
  00a0c	e3a0300c	 mov         r3, #0xC
  00a10	e0030392	 mul         r3, r2, r3
  00a14	e0813003	 add         r3, r1, r3
  00a18	e2830004	 add         r0, r3, #4
  00a1c	e59d3000	 ldr         r3, [sp]
  00a20	e2831004	 add         r1, r3, #4
  00a24	e59d2008	 ldr         r2, [sp, #8]
  00a28	e3a0300c	 mov         r3, #0xC
  00a2c	e0030392	 mul         r3, r2, r3
  00a30	e0813003	 add         r3, r1, r3
  00a34	e2833008	 add         r3, r3, #8
  00a38	e5902000	 ldr         r2, [r0]
  00a3c	e5933000	 ldr         r3, [r3]
  00a40	e1a02312	 mov         r2, r2, lsl r3
  00a44	e59d301c	 ldr         r3, [sp, #0x1C]
  00a48	e1833002	 orr         r3, r3, r2
  00a4c	e58d301c	 str         r3, [sp, #0x1C]

; 612  :         }

  00a50	eaffffe2	 b           |$LN2@PrcmRestor|
  00a54		 |$LN1@PrcmRestor|

; 613  :     OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, cm_clkstctrl);

  00a54	e59d3018	 ldr         r3, [sp, #0x18]
  00a58	e2832048	 add         r2, r3, #0x48
  00a5c	e59d301c	 ldr         r3, [sp, #0x1C]
  00a60	e5823000	 str         r3, [r2]

; 614  : 
; 615  :     return rc;

  00a64	e59d3004	 ldr         r3, [sp, #4]
  00a68	e58d3020	 str         r3, [sp, #0x20]

; 616  : }

  00a6c	e59d0020	 ldr         r0, [sp, #0x20]
  00a70	e28dd02c	 add         sp, sp, #0x2C
  00a74	e89d6000	 ldmia       sp, {sp, lr}
  00a78	e12fff1e	 bx          lr
  00a7c		 |$LN10@PrcmRestor|
  00a7c		 |$LN11@PrcmRestor|
  00a7c	00000000	 DCD         |s_DomainTable|
  00a80		 |$M47304|

			 ENDP  ; |PrcmRestoreDomain|

	IMPORT	|g_pPrcmCm|
	IMPORT	|s_SrcClockTable|

  00038			 AREA	 |.pdata|, PDATA
|$T47330| DCD	|$LN30@DomainCloc|
	DCD	0x4000c504
; Function compile flags: /Odtp

  00a80			 AREA	 |.text|, CODE, ARM

  00a80		 |_DomainClockRestore| PROC

; 279  : {

  00a80		 |$LN30@DomainCloc|
  00a80	e1a0c00d	 mov         r12, sp
  00a84	e92d0001	 stmdb       sp!, {r0}
  00a88	e92d5000	 stmdb       sp!, {r12, lr}
  00a8c	e24dd038	 sub         sp, sp, #0x38
  00a90		 |$M47327|

; 280  :     UINT i;
; 281  :     UINT val;
; 282  :     UINT parentClock;
; 283  :     SrcClockDivisorTable_t *pDivisors;
; 284  : 
; 285  :     extern SrcClockMap s_SrcClockTable;
; 286  : 
; 287  :     switch (powerDomain)

  00a90	e59d3040	 ldr         r3, [sp, #0x40]
  00a94	e58d3014	 str         r3, [sp, #0x14]
  00a98	e59d3014	 ldr         r3, [sp, #0x14]
  00a9c	e3530002	 cmp         r3, #2
  00aa0	0a000006	 beq         |$LN7@DomainCloc|
  00aa4	e59d3014	 ldr         r3, [sp, #0x14]
  00aa8	e3530006	 cmp         r3, #6
  00aac	0a000071	 beq         |$LN6@DomainCloc|
  00ab0	e59d3014	 ldr         r3, [sp, #0x14]
  00ab4	e3530008	 cmp         r3, #8
  00ab8	0a000081	 beq         |$LN5@DomainCloc|
  00abc	ea0000ac	 b           |$LN8@DomainCloc|
  00ac0		 |$LN7@DomainCloc|

; 288  :         {
; 289  :         case POWERDOMAIN_PERIPHERAL:
; 290  :             // build mask
; 291  :             val = s_SrcClockTable[kGPT2_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT2 : 0;

  00ac0	e59f32c8	 ldr         r3, [pc, #0x2C8]
  00ac4	e59335c8	 ldr         r3, [r3, #0x5C8]
  00ac8	e353000b	 cmp         r3, #0xB
  00acc	1a000002	 bne         |$LN12@DomainCloc|
  00ad0	e3a03001	 mov         r3, #1
  00ad4	e58d3018	 str         r3, [sp, #0x18]
  00ad8	ea000001	 b           |$LN13@DomainCloc|
  00adc		 |$LN12@DomainCloc|
  00adc	e3a03000	 mov         r3, #0
  00ae0	e58d3018	 str         r3, [sp, #0x18]
  00ae4		 |$LN13@DomainCloc|
  00ae4	e59d3018	 ldr         r3, [sp, #0x18]
  00ae8	e58d3008	 str         r3, [sp, #8]

; 292  :             val |= s_SrcClockTable[kGPT3_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT3 : 0;

  00aec	e59f329c	 ldr         r3, [pc, #0x29C]
  00af0	e59335dc	 ldr         r3, [r3, #0x5DC]
  00af4	e353000b	 cmp         r3, #0xB
  00af8	1a000002	 bne         |$LN14@DomainCloc|
  00afc	e3a03002	 mov         r3, #2
  00b00	e58d301c	 str         r3, [sp, #0x1C]
  00b04	ea000001	 b           |$LN15@DomainCloc|
  00b08		 |$LN14@DomainCloc|
  00b08	e3a03000	 mov         r3, #0
  00b0c	e58d301c	 str         r3, [sp, #0x1C]
  00b10		 |$LN15@DomainCloc|
  00b10	e59d2008	 ldr         r2, [sp, #8]
  00b14	e59d301c	 ldr         r3, [sp, #0x1C]
  00b18	e1823003	 orr         r3, r2, r3
  00b1c	e58d3008	 str         r3, [sp, #8]

; 293  :             val |= s_SrcClockTable[kGPT4_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT4 : 0;

  00b20	e59f3268	 ldr         r3, [pc, #0x268]
  00b24	e59335f0	 ldr         r3, [r3, #0x5F0]
  00b28	e353000b	 cmp         r3, #0xB
  00b2c	1a000002	 bne         |$LN16@DomainCloc|
  00b30	e3a03004	 mov         r3, #4
  00b34	e58d3020	 str         r3, [sp, #0x20]
  00b38	ea000001	 b           |$LN17@DomainCloc|
  00b3c		 |$LN16@DomainCloc|
  00b3c	e3a03000	 mov         r3, #0
  00b40	e58d3020	 str         r3, [sp, #0x20]
  00b44		 |$LN17@DomainCloc|
  00b44	e59d2008	 ldr         r2, [sp, #8]
  00b48	e59d3020	 ldr         r3, [sp, #0x20]
  00b4c	e1823003	 orr         r3, r2, r3
  00b50	e58d3008	 str         r3, [sp, #8]

; 294  :             val |= s_SrcClockTable[kGPT5_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT5 : 0;

  00b54	e59f3234	 ldr         r3, [pc, #0x234]
  00b58	e5933604	 ldr         r3, [r3, #0x604]
  00b5c	e353000b	 cmp         r3, #0xB
  00b60	1a000002	 bne         |$LN18@DomainCloc|
  00b64	e3a03008	 mov         r3, #8
  00b68	e58d3024	 str         r3, [sp, #0x24]
  00b6c	ea000001	 b           |$LN19@DomainCloc|
  00b70		 |$LN18@DomainCloc|
  00b70	e3a03000	 mov         r3, #0
  00b74	e58d3024	 str         r3, [sp, #0x24]
  00b78		 |$LN19@DomainCloc|
  00b78	e59d2008	 ldr         r2, [sp, #8]
  00b7c	e59d3024	 ldr         r3, [sp, #0x24]
  00b80	e1823003	 orr         r3, r2, r3
  00b84	e58d3008	 str         r3, [sp, #8]

; 295  :             val |= s_SrcClockTable[kGPT6_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT6 : 0;

  00b88	e59f3200	 ldr         r3, [pc, #0x200]
  00b8c	e5933618	 ldr         r3, [r3, #0x618]
  00b90	e353000b	 cmp         r3, #0xB
  00b94	1a000002	 bne         |$LN20@DomainCloc|
  00b98	e3a03010	 mov         r3, #0x10
  00b9c	e58d3028	 str         r3, [sp, #0x28]
  00ba0	ea000001	 b           |$LN21@DomainCloc|
  00ba4		 |$LN20@DomainCloc|
  00ba4	e3a03000	 mov         r3, #0
  00ba8	e58d3028	 str         r3, [sp, #0x28]
  00bac		 |$LN21@DomainCloc|
  00bac	e59d2008	 ldr         r2, [sp, #8]
  00bb0	e59d3028	 ldr         r3, [sp, #0x28]
  00bb4	e1823003	 orr         r3, r2, r3
  00bb8	e58d3008	 str         r3, [sp, #8]

; 296  :             val |= s_SrcClockTable[kGPT7_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT7 : 0;

  00bbc	e59f31cc	 ldr         r3, [pc, #0x1CC]
  00bc0	e593362c	 ldr         r3, [r3, #0x62C]
  00bc4	e353000b	 cmp         r3, #0xB
  00bc8	1a000002	 bne         |$LN22@DomainCloc|
  00bcc	e3a03020	 mov         r3, #0x20
  00bd0	e58d302c	 str         r3, [sp, #0x2C]
  00bd4	ea000001	 b           |$LN23@DomainCloc|
  00bd8		 |$LN22@DomainCloc|
  00bd8	e3a03000	 mov         r3, #0
  00bdc	e58d302c	 str         r3, [sp, #0x2C]
  00be0		 |$LN23@DomainCloc|
  00be0	e59d2008	 ldr         r2, [sp, #8]
  00be4	e59d302c	 ldr         r3, [sp, #0x2C]
  00be8	e1823003	 orr         r3, r2, r3
  00bec	e58d3008	 str         r3, [sp, #8]

; 297  :             val |= s_SrcClockTable[kGPT8_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT8 : 0;

  00bf0	e59f3198	 ldr         r3, [pc, #0x198]
  00bf4	e5933640	 ldr         r3, [r3, #0x640]
  00bf8	e353000b	 cmp         r3, #0xB
  00bfc	1a000002	 bne         |$LN24@DomainCloc|
  00c00	e3a03040	 mov         r3, #0x40
  00c04	e58d3030	 str         r3, [sp, #0x30]
  00c08	ea000001	 b           |$LN25@DomainCloc|
  00c0c		 |$LN24@DomainCloc|
  00c0c	e3a03000	 mov         r3, #0
  00c10	e58d3030	 str         r3, [sp, #0x30]
  00c14		 |$LN25@DomainCloc|
  00c14	e59d2008	 ldr         r2, [sp, #8]
  00c18	e59d3030	 ldr         r3, [sp, #0x30]
  00c1c	e1823003	 orr         r3, r2, r3
  00c20	e58d3008	 str         r3, [sp, #8]

; 298  :             val |= s_SrcClockTable[kGPT9_ALWON_FCLK].parentClk == kSYS_CLK ? CLKSEL_GPT9 : 0;

  00c24	e59f3164	 ldr         r3, [pc, #0x164]
  00c28	e5933654	 ldr         r3, [r3, #0x654]
  00c2c	e353000b	 cmp         r3, #0xB
  00c30	1a000002	 bne         |$LN26@DomainCloc|
  00c34	e3a03080	 mov         r3, #0x80
  00c38	e58d3034	 str         r3, [sp, #0x34]
  00c3c	ea000001	 b           |$LN27@DomainCloc|
  00c40		 |$LN26@DomainCloc|
  00c40	e3a03000	 mov         r3, #0
  00c44	e58d3034	 str         r3, [sp, #0x34]
  00c48		 |$LN27@DomainCloc|
  00c48	e59d2008	 ldr         r2, [sp, #8]
  00c4c	e59d3034	 ldr         r3, [sp, #0x34]
  00c50	e1823003	 orr         r3, r2, r3
  00c54	e58d3008	 str         r3, [sp, #8]

; 299  :             OUTREG32(&g_pPrcmCm->pOMAP_PER_CM->CM_CLKSEL_PER, val);

  00c58	e59f312c	 ldr         r3, [pc, #0x12C]
  00c5c	e5933000	 ldr         r3, [r3]
  00c60	e2833008	 add         r3, r3, #8
  00c64	e5933000	 ldr         r3, [r3]
  00c68	e2832040	 add         r2, r3, #0x40
  00c6c	e59d3008	 ldr         r3, [sp, #8]
  00c70	e5823000	 str         r3, [r2]

; 300  :             break;

  00c74	ea00003e	 b           |$LN8@DomainCloc|
  00c78		 |$LN6@DomainCloc|

; 301  : 
; 302  :         case POWERDOMAIN_DSS:
; 303  :             // write to hw
; 304  :             OUTREG32(&g_pPrcmCm->pOMAP_DSS_CM->CM_CLKSEL_DSS,
; 305  :                 CLKSEL_DSS1(s_SrcClockTable[kDSS1_ALWON_FCLK].pDivisors->SourceClock[0].divisor) |
; 306  :                 CLKSEL_TV(s_SrcClockTable[k54M_FCLK].pDivisors->SourceClock[0].divisor));

  00c78	e59f3110	 ldr         r3, [pc, #0x110]
  00c7c	e5933098	 ldr         r3, [r3, #0x98]
  00c80	e2833008	 add         r3, r3, #8
  00c84	e5933000	 ldr         r3, [r3]
  00c88	e203201f	 and         r2, r3, #0x1F
  00c8c	e59f30fc	 ldr         r3, [pc, #0xFC]
  00c90	e5933598	 ldr         r3, [r3, #0x598]
  00c94	e2833008	 add         r3, r3, #8
  00c98	e5933000	 ldr         r3, [r3]
  00c9c	e203301f	 and         r3, r3, #0x1F
  00ca0	e1a03403	 mov         r3, r3, lsl #8
  00ca4	e1822003	 orr         r2, r2, r3
  00ca8	e59f30dc	 ldr         r3, [pc, #0xDC]
  00cac	e5933000	 ldr         r3, [r3]
  00cb0	e2833018	 add         r3, r3, #0x18
  00cb4	e5933000	 ldr         r3, [r3]
  00cb8	e2833040	 add         r3, r3, #0x40
  00cbc	e5832000	 str         r2, [r3]

; 307  :             break;

  00cc0	ea00002b	 b           |$LN8@DomainCloc|
  00cc4		 |$LN5@DomainCloc|

; 308  :         case POWERDOMAIN_SGX:
; 309  :             // verify parent clock is valid       
; 310  :             pDivisors = s_SrcClockTable[kSGX_FCLK].pDivisors;

  00cc4	e59f30c4	 ldr         r3, [pc, #0xC4]
  00cc8	e59335ac	 ldr         r3, [r3, #0x5AC]
  00ccc	e58d3004	 str         r3, [sp, #4]

; 311  :             parentClock = s_SrcClockTable[kSGX_FCLK].parentClk;

  00cd0	e59f30b8	 ldr         r3, [pc, #0xB8]
  00cd4	e59335a0	 ldr         r3, [r3, #0x5A0]
  00cd8	e58d300c	 str         r3, [sp, #0xC]

; 312  :             for (i = 0; i < pDivisors->count; ++i)

  00cdc	e3a03000	 mov         r3, #0
  00ce0	e58d3000	 str         r3, [sp]
  00ce4	ea000002	 b           |$LN4@DomainCloc|
  00ce8		 |$LN3@DomainCloc|
  00ce8	e59d3000	 ldr         r3, [sp]
  00cec	e2833001	 add         r3, r3, #1
  00cf0	e58d3000	 str         r3, [sp]
  00cf4		 |$LN4@DomainCloc|
  00cf4	e59d2000	 ldr         r2, [sp]
  00cf8	e59d3004	 ldr         r3, [sp, #4]
  00cfc	e5933000	 ldr         r3, [r3]
  00d00	e1520003	 cmp         r2, r3
  00d04	2a00001a	 bcs         |$LN2@DomainCloc|

; 313  :                 {
; 314  :                 if (parentClock == pDivisors->SourceClock[i].id)

  00d08	e59d3004	 ldr         r3, [sp, #4]
  00d0c	e2831004	 add         r1, r3, #4
  00d10	e59d2000	 ldr         r2, [sp]
  00d14	e3a03008	 mov         r3, #8
  00d18	e0030392	 mul         r3, r2, r3
  00d1c	e0813003	 add         r3, r1, r3
  00d20	e59d200c	 ldr         r2, [sp, #0xC]
  00d24	e5933000	 ldr         r3, [r3]
  00d28	e1520003	 cmp         r2, r3
  00d2c	1a00000f	 bne         |$LN1@DomainCloc|

; 315  :                     {
; 316  :                     // write to hw
; 317  :                     OUTREG32(&g_pPrcmCm->pOMAP_SGX_CM->CM_CLKSEL_SGX, 
; 318  :                         CLKSEL_SGX(pDivisors->SourceClock[i].divisor)
; 319  :                         );

  00d30	e59d3004	 ldr         r3, [sp, #4]
  00d34	e2831004	 add         r1, r3, #4
  00d38	e59d2000	 ldr         r2, [sp]
  00d3c	e3a03008	 mov         r3, #8
  00d40	e0030392	 mul         r3, r2, r3
  00d44	e0813003	 add         r3, r1, r3
  00d48	e2833004	 add         r3, r3, #4
  00d4c	e5933000	 ldr         r3, [r3]
  00d50	e2032007	 and         r2, r3, #7
  00d54	e59f3030	 ldr         r3, [pc, #0x30]
  00d58	e5933000	 ldr         r3, [r3]
  00d5c	e2833020	 add         r3, r3, #0x20
  00d60	e5933000	 ldr         r3, [r3]
  00d64	e2833040	 add         r3, r3, #0x40
  00d68	e5832000	 str         r2, [r3]

; 320  :                     break;

  00d6c	ea000000	 b           |$LN2@DomainCloc|
  00d70		 |$LN1@DomainCloc|

; 321  :                     }
; 322  :                 }

  00d70	eaffffdc	 b           |$LN3@DomainCloc|
  00d74		 |$LN2@DomainCloc|
  00d74		 |$LN8@DomainCloc|

; 323  :             break;
; 324  :         }
; 325  : 
; 326  :     return TRUE;

  00d74	e3a03001	 mov         r3, #1
  00d78	e58d3010	 str         r3, [sp, #0x10]

; 327  : }

  00d7c	e59d0010	 ldr         r0, [sp, #0x10]
  00d80	e28dd038	 add         sp, sp, #0x38
  00d84	e89d6000	 ldmia       sp, {sp, lr}
  00d88	e12fff1e	 bx          lr
  00d8c		 |$LN31@DomainCloc|
  00d8c		 |$LN32@DomainCloc|
  00d8c	00000000	 DCD         |g_pPrcmCm|
  00d90		 |$LN33@DomainCloc|
  00d90	00000000	 DCD         |s_SrcClockTable|
  00d94		 |$M47328|

			 ENDP  ; |_DomainClockRestore|

	EXPORT	|??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetWakeupDependency|

  00040			 AREA	 |.pdata|, PDATA
|$T47343| DCD	|$LN16@PrcmDomain@4|
	DCD	0x40007104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u"
	DCB	0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "W", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u"
	DCB	0x0, "p", 0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, "d", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "f", 0x0, "f"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "b", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00d94			 AREA	 |.text|, CODE, ARM

  00d94		 |PrcmDomainSetWakeupDependency| PROC

; 625  : {

  00d94		 |$LN16@PrcmDomain@4|
  00d94	e1a0c00d	 mov         r12, sp
  00d98	e92d0007	 stmdb       sp!, {r0 - r2}
  00d9c	e92d5000	 stmdb       sp!, {r12, lr}
  00da0	e24dd018	 sub         sp, sp, #0x18
  00da4		 |$M47340|

; 626  :     BOOL rc = FALSE;

  00da4	e3a03000	 mov         r3, #0
  00da8	e58d3000	 str         r3, [sp]

; 627  :     PowerDomainState_t *pDomainState;
; 628  :     if (!g_bSingleThreaded)

  00dac	e59f3198	 ldr         r3, [pc, #0x198]
  00db0	e5933000	 ldr         r3, [r3]
  00db4	e3530000	 cmp         r3, #0
  00db8	1a00000d	 bne         |$LN7@PrcmDomain@4|

; 629  :         OALMSG(OAL_FUNC, (L"+PrcmDomainSetWakeupDependency"
; 630  :             L"(powerDomain=%d, ffDependency=0x%08X, bEnable=%d)\r\n", 
; 631  :             powerDomain, ffDependency, bEnable));

  00dbc	e59f3184	 ldr         r3, [pc, #0x184]
  00dc0	e5933440	 ldr         r3, [r3, #0x440]
  00dc4	e3130004	 tst         r3, #4
  00dc8	0a000007	 beq         |$LN10@PrcmDomain@4|
  00dcc	e59d3028	 ldr         r3, [sp, #0x28]
  00dd0	e59d2024	 ldr         r2, [sp, #0x24]
  00dd4	e59d1020	 ldr         r1, [sp, #0x20]
  00dd8	e59f0174	 ldr         r0, [pc, #0x174]
  00ddc	eb000000	 bl          NKDbgPrintfW
  00de0	e3a03001	 mov         r3, #1
  00de4	e58d300c	 str         r3, [sp, #0xC]
  00de8	ea000001	 b           |$LN11@PrcmDomain@4|
  00dec		 |$LN10@PrcmDomain@4|
  00dec	e3a03000	 mov         r3, #0
  00df0	e58d300c	 str         r3, [sp, #0xC]
  00df4		 |$LN11@PrcmDomain@4|
  00df4		 |$LN7@PrcmDomain@4|

; 632  :     
; 633  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00df4	e59d3020	 ldr         r3, [sp, #0x20]
  00df8	e353000a	 cmp         r3, #0xA
  00dfc	3a000000	 bcc         |$LN6@PrcmDomain@4|
  00e00	ea000039	 b           |$cleanUp$46988|
  00e04		 |$LN6@PrcmDomain@4|

; 634  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_WKUPDEP) == 0) goto cleanUp;

  00e04	e59d1020	 ldr         r1, [sp, #0x20]
  00e08	e3a0301c	 mov         r3, #0x1C
  00e0c	e0020391	 mul         r2, r1, r3
  00e10	e59f3138	 ldr         r3, [pc, #0x138]
  00e14	e0833002	 add         r3, r3, r2
  00e18	e2833004	 add         r3, r3, #4
  00e1c	e5933000	 ldr         r3, [r3]
  00e20	e3130001	 tst         r3, #1
  00e24	1a000000	 bne         |$LN5@PrcmDomain@4|
  00e28	ea00002f	 b           |$cleanUp$46988|
  00e2c		 |$LN5@PrcmDomain@4|

; 635  : 
; 636  :     // update internal state information 
; 637  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00e2c	e59d1020	 ldr         r1, [sp, #0x20]
  00e30	e3a0301c	 mov         r3, #0x1C
  00e34	e0020391	 mul         r2, r1, r3
  00e38	e59f3110	 ldr         r3, [pc, #0x110]
  00e3c	e0833002	 add         r3, r3, r2
  00e40	e2833008	 add         r3, r3, #8
  00e44	e5933000	 ldr         r3, [r3]
  00e48	e58d3004	 str         r3, [sp, #4]

; 638  :     if (pDomainState == NULL) goto cleanUp;

  00e4c	e59d3004	 ldr         r3, [sp, #4]
  00e50	e3530000	 cmp         r3, #0
  00e54	1a000000	 bne         |$LN4@PrcmDomain@4|
  00e58	ea000023	 b           |$cleanUp$46988|
  00e5c		 |$LN4@PrcmDomain@4|

; 639  : 
; 640  :     Lock(Mutex_Domain);

  00e5c	e3a00002	 mov         r0, #2
  00e60	eb000000	 bl          Lock

; 641  :     ffDependency &= WKDEP_MASK;

  00e64	e59d3024	 ldr         r3, [sp, #0x24]
  00e68	e20330ff	 and         r3, r3, #0xFF
  00e6c	e58d3024	 str         r3, [sp, #0x24]

; 642  :     ffDependency >>= WKDEP_SHIFT;

  00e70	e59d3024	 ldr         r3, [sp, #0x24]
  00e74	e58d3024	 str         r3, [sp, #0x24]

; 643  :     if (bEnable != FALSE)

  00e78	e59d3028	 ldr         r3, [sp, #0x28]
  00e7c	e3530000	 cmp         r3, #0
  00e80	0a000008	 beq         |$LN3@PrcmDomain@4|

; 644  :         {
; 645  :         pDomainState->wakeDependency |= ffDependency; 

  00e84	e59d3004	 ldr         r3, [sp, #4]
  00e88	e283300c	 add         r3, r3, #0xC
  00e8c	e5932000	 ldr         r2, [r3]
  00e90	e59d3024	 ldr         r3, [sp, #0x24]
  00e94	e1822003	 orr         r2, r2, r3
  00e98	e59d3004	 ldr         r3, [sp, #4]
  00e9c	e283300c	 add         r3, r3, #0xC
  00ea0	e5832000	 str         r2, [r3]

; 646  :         }
; 647  :     else

  00ea4	ea000008	 b           |$LN2@PrcmDomain@4|
  00ea8		 |$LN3@PrcmDomain@4|

; 648  :         {
; 649  :         pDomainState->wakeDependency &= ~ffDependency; 

  00ea8	e59d3004	 ldr         r3, [sp, #4]
  00eac	e283100c	 add         r1, r3, #0xC
  00eb0	e59d3024	 ldr         r3, [sp, #0x24]
  00eb4	e1e02003	 mvn         r2, r3
  00eb8	e5913000	 ldr         r3, [r1]
  00ebc	e0032002	 and         r2, r3, r2
  00ec0	e59d3004	 ldr         r3, [sp, #4]
  00ec4	e283300c	 add         r3, r3, #0xC
  00ec8	e5832000	 str         r2, [r3]
  00ecc		 |$LN2@PrcmDomain@4|

; 650  :         }
; 651  : 
; 652  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_WKUPDEP);

  00ecc	e3a01001	 mov         r1, #1
  00ed0	e59d0020	 ldr         r0, [sp, #0x20]
  00ed4	eb000000	 bl          _PrcmDomainHwUpdate
  00ed8	e58d0010	 str         r0, [sp, #0x10]
  00edc	e59d3010	 ldr         r3, [sp, #0x10]
  00ee0	e58d3000	 str         r3, [sp]

; 653  :     Unlock(Mutex_Domain);

  00ee4	e3a00002	 mov         r0, #2
  00ee8	eb000000	 bl          Unlock
  00eec		 |$cleanUp$46988|

; 654  :     
; 655  : cleanUp:        
; 656  :     if (!g_bSingleThreaded)

  00eec	e59f3058	 ldr         r3, [pc, #0x58]
  00ef0	e5933000	 ldr         r3, [r3]
  00ef4	e3530000	 cmp         r3, #0
  00ef8	1a00000b	 bne         |$LN1@PrcmDomain@4|

; 657  :         OALMSG(OAL_FUNC, (L"-PrcmDomainSetWakeupDependency()=%d\r\n", rc));

  00efc	e59f3044	 ldr         r3, [pc, #0x44]
  00f00	e5933440	 ldr         r3, [r3, #0x440]
  00f04	e3130004	 tst         r3, #4
  00f08	0a000005	 beq         |$LN12@PrcmDomain@4|
  00f0c	e59d1000	 ldr         r1, [sp]
  00f10	e59f002c	 ldr         r0, [pc, #0x2C]
  00f14	eb000000	 bl          NKDbgPrintfW
  00f18	e3a03001	 mov         r3, #1
  00f1c	e58d3014	 str         r3, [sp, #0x14]
  00f20	ea000001	 b           |$LN13@PrcmDomain@4|
  00f24		 |$LN12@PrcmDomain@4|
  00f24	e3a03000	 mov         r3, #0
  00f28	e58d3014	 str         r3, [sp, #0x14]
  00f2c		 |$LN13@PrcmDomain@4|
  00f2c		 |$LN1@PrcmDomain@4|

; 658  :     return rc;

  00f2c	e59d3000	 ldr         r3, [sp]
  00f30	e58d3008	 str         r3, [sp, #8]

; 659  : }

  00f34	e59d0008	 ldr         r0, [sp, #8]
  00f38	e28dd018	 add         sp, sp, #0x18
  00f3c	e89d6000	 ldmia       sp, {sp, lr}
  00f40	e12fff1e	 bx          lr
  00f44		 |$LN17@PrcmDomain@4|
  00f44		 |$LN18@PrcmDomain@4|
  00f44	00000000	 DCD         |??_C@_1EM@KMAAEICN@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ@|
  00f48		 |$LN19@PrcmDomain@4|
  00f48	00000000	 DCD         |dpCurSettings|
  00f4c		 |$LN20@PrcmDomain@4|
  00f4c	00000000	 DCD         |g_bSingleThreaded|
  00f50		 |$LN21@PrcmDomain@4|
  00f50	00000000	 DCD         |s_DomainTable|
  00f54		 |$LN22@PrcmDomain@4|
  00f54	00000000	 DCD         |??_C@_1KE@GFMBGEDA@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAW?$AAa?$AAk?$AAe?$AAu?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp@|
  00f58		 |$M47341|

			 ENDP  ; |PrcmDomainSetWakeupDependency|

	EXPORT	|??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetSleepDependency|

  00048			 AREA	 |.pdata|, PDATA
|$T47359| DCD	|$LN14@PrcmDomain@5|
	DCD	0x40006804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "(", 0x0, ")"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "l", 0x0, "e", 0x0, "e", 0x0, "p"
	DCB	0x0, "D", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, "(", 0x0, "p"
	DCB	0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "f", 0x0, "f", 0x0, "D"
	DCB	0x0, "e", 0x0, "p", 0x0, "e", 0x0, "n", 0x0, "d", 0x0, "e"
	DCB	0x0, "n", 0x0, "c", 0x0, "y", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "b", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00f58			 AREA	 |.text|, CODE, ARM

  00f58		 |PrcmDomainSetSleepDependency| PROC

; 668  : {

  00f58		 |$LN14@PrcmDomain@5|
  00f58	e1a0c00d	 mov         r12, sp
  00f5c	e92d0007	 stmdb       sp!, {r0 - r2}
  00f60	e92d5000	 stmdb       sp!, {r12, lr}
  00f64	e24dd018	 sub         sp, sp, #0x18
  00f68		 |$M47356|

; 669  :     BOOL rc = FALSE;

  00f68	e3a03000	 mov         r3, #0
  00f6c	e58d3000	 str         r3, [sp]

; 670  :     PowerDomainState_t *pDomainState;
; 671  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetSleepDependency"
; 672  :         L"(powerDomain=%d, ffDependency=0x%08X, bEnable=%d)\r\n", 
; 673  :         powerDomain, ffDependency, bEnable));

  00f70	e59f3174	 ldr         r3, [pc, #0x174]
  00f74	e5933440	 ldr         r3, [r3, #0x440]
  00f78	e3130004	 tst         r3, #4
  00f7c	0a000007	 beq         |$LN8@PrcmDomain@5|
  00f80	e59d3028	 ldr         r3, [sp, #0x28]
  00f84	e59d2024	 ldr         r2, [sp, #0x24]
  00f88	e59d1020	 ldr         r1, [sp, #0x20]
  00f8c	e59f0160	 ldr         r0, [pc, #0x160]
  00f90	eb000000	 bl          NKDbgPrintfW
  00f94	e3a03001	 mov         r3, #1
  00f98	e58d300c	 str         r3, [sp, #0xC]
  00f9c	ea000001	 b           |$LN9@PrcmDomain@5|
  00fa0		 |$LN8@PrcmDomain@5|
  00fa0	e3a03000	 mov         r3, #0
  00fa4	e58d300c	 str         r3, [sp, #0xC]
  00fa8		 |$LN9@PrcmDomain@5|

; 674  :     
; 675  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  00fa8	e59d3020	 ldr         r3, [sp, #0x20]
  00fac	e353000a	 cmp         r3, #0xA
  00fb0	3a000000	 bcc         |$LN5@PrcmDomain@5|
  00fb4	ea000039	 b           |$cleanUp$47009|
  00fb8		 |$LN5@PrcmDomain@5|

; 676  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_SLEEPDEP) == 0) goto cleanUp;

  00fb8	e59d1020	 ldr         r1, [sp, #0x20]
  00fbc	e3a0301c	 mov         r3, #0x1C
  00fc0	e0020391	 mul         r2, r1, r3
  00fc4	e59f3124	 ldr         r3, [pc, #0x124]
  00fc8	e0833002	 add         r3, r3, r2
  00fcc	e2833004	 add         r3, r3, #4
  00fd0	e5933000	 ldr         r3, [r3]
  00fd4	e3130002	 tst         r3, #2
  00fd8	1a000000	 bne         |$LN4@PrcmDomain@5|
  00fdc	ea00002f	 b           |$cleanUp$47009|
  00fe0		 |$LN4@PrcmDomain@5|

; 677  : 
; 678  :     // update internal state information 
; 679  :     pDomainState = s_DomainTable[powerDomain].pDomainState;

  00fe0	e59d1020	 ldr         r1, [sp, #0x20]
  00fe4	e3a0301c	 mov         r3, #0x1C
  00fe8	e0020391	 mul         r2, r1, r3
  00fec	e59f30fc	 ldr         r3, [pc, #0xFC]
  00ff0	e0833002	 add         r3, r3, r2
  00ff4	e2833008	 add         r3, r3, #8
  00ff8	e5933000	 ldr         r3, [r3]
  00ffc	e58d3004	 str         r3, [sp, #4]

; 680  :     if (pDomainState == NULL) goto cleanUp;

  01000	e59d3004	 ldr         r3, [sp, #4]
  01004	e3530000	 cmp         r3, #0
  01008	1a000000	 bne         |$LN3@PrcmDomain@5|
  0100c	ea000023	 b           |$cleanUp$47009|
  01010		 |$LN3@PrcmDomain@5|

; 681  :     
; 682  :     Lock(Mutex_Domain);

  01010	e3a00002	 mov         r0, #2
  01014	eb000000	 bl          Lock

; 683  :     ffDependency &= SLEEPDEP_MASK;

  01018	e59d3024	 ldr         r3, [sp, #0x24]
  0101c	e20330ff	 and         r3, r3, #0xFF
  01020	e58d3024	 str         r3, [sp, #0x24]

; 684  :     ffDependency >>= SLEEPDEP_SHIFT;

  01024	e59d3024	 ldr         r3, [sp, #0x24]
  01028	e58d3024	 str         r3, [sp, #0x24]

; 685  :     if (bEnable != FALSE)

  0102c	e59d3028	 ldr         r3, [sp, #0x28]
  01030	e3530000	 cmp         r3, #0
  01034	0a000008	 beq         |$LN2@PrcmDomain@5|

; 686  :         {
; 687  :         pDomainState->sleepDependency |= ffDependency; 

  01038	e59d3004	 ldr         r3, [sp, #4]
  0103c	e2833008	 add         r3, r3, #8
  01040	e5932000	 ldr         r2, [r3]
  01044	e59d3024	 ldr         r3, [sp, #0x24]
  01048	e1822003	 orr         r2, r2, r3
  0104c	e59d3004	 ldr         r3, [sp, #4]
  01050	e2833008	 add         r3, r3, #8
  01054	e5832000	 str         r2, [r3]

; 688  :         }
; 689  :     else

  01058	ea000008	 b           |$LN1@PrcmDomain@5|
  0105c		 |$LN2@PrcmDomain@5|

; 690  :         {
; 691  :         pDomainState->sleepDependency &= ~ffDependency; 

  0105c	e59d3004	 ldr         r3, [sp, #4]
  01060	e2831008	 add         r1, r3, #8
  01064	e59d3024	 ldr         r3, [sp, #0x24]
  01068	e1e02003	 mvn         r2, r3
  0106c	e5913000	 ldr         r3, [r1]
  01070	e0032002	 and         r2, r3, r2
  01074	e59d3004	 ldr         r3, [sp, #4]
  01078	e2833008	 add         r3, r3, #8
  0107c	e5832000	 str         r2, [r3]
  01080		 |$LN1@PrcmDomain@5|

; 692  :         }
; 693  : 
; 694  :     rc = _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_SLEEPDEP);

  01080	e3a01002	 mov         r1, #2
  01084	e59d0020	 ldr         r0, [sp, #0x20]
  01088	eb000000	 bl          _PrcmDomainHwUpdate
  0108c	e58d0010	 str         r0, [sp, #0x10]
  01090	e59d3010	 ldr         r3, [sp, #0x10]
  01094	e58d3000	 str         r3, [sp]

; 695  :     Unlock(Mutex_Domain);

  01098	e3a00002	 mov         r0, #2
  0109c	eb000000	 bl          Unlock
  010a0		 |$cleanUp$47009|

; 696  :     
; 697  : cleanUp:        
; 698  :     OALMSG(OAL_FUNC, (L"-PrcmDomainSetSleepDependency()=%d\r\n", rc));

  010a0	e59f3044	 ldr         r3, [pc, #0x44]
  010a4	e5933440	 ldr         r3, [r3, #0x440]
  010a8	e3130004	 tst         r3, #4
  010ac	0a000005	 beq         |$LN10@PrcmDomain@5|
  010b0	e59d1000	 ldr         r1, [sp]
  010b4	e59f002c	 ldr         r0, [pc, #0x2C]
  010b8	eb000000	 bl          NKDbgPrintfW
  010bc	e3a03001	 mov         r3, #1
  010c0	e58d3014	 str         r3, [sp, #0x14]
  010c4	ea000001	 b           |$LN11@PrcmDomain@5|
  010c8		 |$LN10@PrcmDomain@5|
  010c8	e3a03000	 mov         r3, #0
  010cc	e58d3014	 str         r3, [sp, #0x14]
  010d0		 |$LN11@PrcmDomain@5|

; 699  :     return rc;

  010d0	e59d3000	 ldr         r3, [sp]
  010d4	e58d3008	 str         r3, [sp, #8]

; 700  : }

  010d8	e59d0008	 ldr         r0, [sp, #8]
  010dc	e28dd018	 add         sp, sp, #0x18
  010e0	e89d6000	 ldmia       sp, {sp, lr}
  010e4	e12fff1e	 bx          lr
  010e8		 |$LN15@PrcmDomain@5|
  010e8		 |$LN16@PrcmDomain@5|
  010e8	00000000	 DCD         |??_C@_1EK@HCAJMEHB@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AA?$CJ?$AA?$DN@|
  010ec		 |$LN17@PrcmDomain@5|
  010ec	00000000	 DCD         |dpCurSettings|
  010f0		 |$LN18@PrcmDomain@5|
  010f0	00000000	 DCD         |s_DomainTable|
  010f4		 |$LN19@PrcmDomain@5|
  010f4	00000000	 DCD         |??_C@_1KC@MCEKLACC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAS?$AAl?$AAe?$AAe?$AAp?$AAD?$AAe?$AAp?$AAe?$AAn?$AAd?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAp?$AAo@|
  010f8		 |$M47357|

			 ENDP  ; |PrcmDomainSetSleepDependency|

	EXPORT	|??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetPowerState|
	IMPORT	|OALGetTickCount|

  00050			 AREA	 |.pdata|, PDATA
|$T47374| DCD	|$LN14@PrcmDomain@6|
	DCD	0x40009e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "P", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "p", 0x0, "o"
	DCB	0x0, "w", 0x0, "e", 0x0, "r", 0x0, "S", 0x0, "t", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  010f8			 AREA	 |.text|, CODE, ARM

  010f8		 |PrcmDomainSetPowerState| PROC

; 709  : {

  010f8		 |$LN14@PrcmDomain@6|
  010f8	e1a0c00d	 mov         r12, sp
  010fc	e92d0007	 stmdb       sp!, {r0 - r2}
  01100	e92d5000	 stmdb       sp!, {r12, lr}
  01104	e24dd030	 sub         sp, sp, #0x30
  01108		 |$M47371|

; 710  :     BOOL rc;
; 711  :     UINT temp;
; 712  :     UINT clockState = CLKSTCTRL_DISABLED;

  01108	e3a03000	 mov         r3, #0
  0110c	e58d3004	 str         r3, [sp, #4]

; 713  :     UINT oldPowerState = (UINT)-1;

  01110	e3e03000	 mvn         r3, #0
  01114	e58d300c	 str         r3, [sp, #0xC]

; 714  :     OMAP_CM_REGS *pCmRegs;
; 715  :     
; 716  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetPowerState"
; 717  :         L"(powerDomain=%d, powerState=0x%08X)\r\n", 
; 718  :         powerDomain, powerState));

  01118	e59f3244	 ldr         r3, [pc, #0x244]
  0111c	e5933440	 ldr         r3, [r3, #0x440]
  01120	e3130004	 tst         r3, #4
  01124	0a000006	 beq         |$LN8@PrcmDomain@6|
  01128	e59d203c	 ldr         r2, [sp, #0x3C]
  0112c	e59d1038	 ldr         r1, [sp, #0x38]
  01130	e59f0234	 ldr         r0, [pc, #0x234]
  01134	eb000000	 bl          NKDbgPrintfW
  01138	e3a03001	 mov         r3, #1
  0113c	e58d3018	 str         r3, [sp, #0x18]
  01140	ea000001	 b           |$LN9@PrcmDomain@6|
  01144		 |$LN8@PrcmDomain@6|
  01144	e3a03000	 mov         r3, #0
  01148	e58d3018	 str         r3, [sp, #0x18]
  0114c		 |$LN9@PrcmDomain@6|

; 719  :     
; 720  :     // get old power states to check if power domain needs a sw wakeup
; 721  :     if (s_DomainTable[powerDomain].pClockStates != NULL)

  0114c	e59d1038	 ldr         r1, [sp, #0x38]
  01150	e3a0301c	 mov         r3, #0x1C
  01154	e0020391	 mul         r2, r1, r3
  01158	e59f3208	 ldr         r3, [pc, #0x208]
  0115c	e0833002	 add         r3, r3, r2
  01160	e283300c	 add         r3, r3, #0xC
  01164	e5933000	 ldr         r3, [r3]
  01168	e3530000	 cmp         r3, #0
  0116c	0a000009	 beq         |$LN5@PrcmDomain@6|

; 722  :         {
; 723  :         clockState = s_DomainTable[powerDomain].pClockStates->rgClockDomains[0].clockState;

  01170	e59d1038	 ldr         r1, [sp, #0x38]
  01174	e3a0301c	 mov         r3, #0x1C
  01178	e0020391	 mul         r2, r1, r3
  0117c	e59f31e4	 ldr         r3, [pc, #0x1E4]
  01180	e0833002	 add         r3, r3, r2
  01184	e283300c	 add         r3, r3, #0xC
  01188	e5933000	 ldr         r3, [r3]
  0118c	e2833008	 add         r3, r3, #8
  01190	e5933000	 ldr         r3, [r3]
  01194	e58d3004	 str         r3, [sp, #4]
  01198		 |$LN5@PrcmDomain@6|

; 724  :         }
; 725  : 
; 726  :     if (s_DomainTable[powerDomain].pDomainState != NULL)

  01198	e59d1038	 ldr         r1, [sp, #0x38]
  0119c	e3a0301c	 mov         r3, #0x1C
  011a0	e0020391	 mul         r2, r1, r3
  011a4	e59f31bc	 ldr         r3, [pc, #0x1BC]
  011a8	e0833002	 add         r3, r3, r2
  011ac	e2833008	 add         r3, r3, #8
  011b0	e5933000	 ldr         r3, [r3]
  011b4	e3530000	 cmp         r3, #0
  011b8	0a000008	 beq         |$LN4@PrcmDomain@6|

; 727  :         {
; 728  :         oldPowerState = s_DomainTable[powerDomain].pDomainState->powerState;

  011bc	e59d1038	 ldr         r1, [sp, #0x38]
  011c0	e3a0301c	 mov         r3, #0x1C
  011c4	e0020391	 mul         r2, r1, r3
  011c8	e59f3198	 ldr         r3, [pc, #0x198]
  011cc	e0833002	 add         r3, r3, r2
  011d0	e2833008	 add         r3, r3, #8
  011d4	e5933000	 ldr         r3, [r3]
  011d8	e5933000	 ldr         r3, [r3]
  011dc	e58d300c	 str         r3, [sp, #0xC]
  011e0		 |$LN4@PrcmDomain@6|

; 729  :         }
; 730  :     
; 731  :     rc = PrcmDomainSetPowerStateInternal(powerDomain, powerState, logicState, TRUE);

  011e0	e3a03001	 mov         r3, #1
  011e4	e59d2040	 ldr         r2, [sp, #0x40]
  011e8	e59d103c	 ldr         r1, [sp, #0x3C]
  011ec	e59d0038	 ldr         r0, [sp, #0x38]
  011f0	eb000000	 bl          PrcmDomainSetPowerStateInternal
  011f4	e58d001c	 str         r0, [sp, #0x1C]
  011f8	e59d301c	 ldr         r3, [sp, #0x1C]
  011fc	e58d3000	 str         r3, [sp]

; 732  :     
; 733  :     // force a sleep to sleep transition through software since it
; 734  :     // isn't supported in hardware
; 735  :     if (oldPowerState != -1 && clockState == CLKSTCTRL_AUTOMATIC &&        
; 736  :         s_DomainTable[powerDomain].refCount == 0 && oldPowerState != powerState)

  01200	e59d300c	 ldr         r3, [sp, #0xC]
  01204	e3730001	 cmn         r3, #1
  01208	0a000042	 beq         |$LN3@PrcmDomain@6|
  0120c	e59d3004	 ldr         r3, [sp, #4]
  01210	e3530003	 cmp         r3, #3
  01214	1a00003f	 bne         |$LN3@PrcmDomain@6|
  01218	e59d1038	 ldr         r1, [sp, #0x38]
  0121c	e3a0301c	 mov         r3, #0x1C
  01220	e0020391	 mul         r2, r1, r3
  01224	e59f313c	 ldr         r3, [pc, #0x13C]
  01228	e0833002	 add         r3, r3, r2
  0122c	e5933000	 ldr         r3, [r3]
  01230	e3530000	 cmp         r3, #0
  01234	1a000037	 bne         |$LN3@PrcmDomain@6|
  01238	e59d200c	 ldr         r2, [sp, #0xC]
  0123c	e59d303c	 ldr         r3, [sp, #0x3C]
  01240	e1520003	 cmp         r2, r3
  01244	0a000033	 beq         |$LN3@PrcmDomain@6|

; 737  :         {        
; 738  :         pCmRegs = GetCmRegisterSet(powerDomain);

  01248	e59d0038	 ldr         r0, [sp, #0x38]
  0124c	eb000000	 bl          GetCmRegisterSet
  01250	e58d0020	 str         r0, [sp, #0x20]
  01254	e59d3020	 ldr         r3, [sp, #0x20]
  01258	e58d3010	 str         r3, [sp, #0x10]

; 739  :     
; 740  :         // force sw wake-up of power domain
; 741  :         temp = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  0125c	e59d3010	 ldr         r3, [sp, #0x10]
  01260	e2833048	 add         r3, r3, #0x48
  01264	e5933000	 ldr         r3, [r3]
  01268	e58d3008	 str         r3, [sp, #8]

; 742  :         temp &= ~CLKSTCTRL_MASK;

  0126c	e59d2008	 ldr         r2, [sp, #8]
  01270	e3e03003	 mvn         r3, #3
  01274	e0023003	 and         r3, r2, r3
  01278	e58d3008	 str         r3, [sp, #8]

; 743  :         temp |= CLKSTCTRL_WAKEUP;

  0127c	e59d3008	 ldr         r3, [sp, #8]
  01280	e3833002	 orr         r3, r3, #2
  01284	e58d3008	 str         r3, [sp, #8]

; 744  :         OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, temp);

  01288	e59d3010	 ldr         r3, [sp, #0x10]
  0128c	e2832048	 add         r2, r3, #0x48
  01290	e59d3008	 ldr         r3, [sp, #8]
  01294	e5823000	 str         r3, [r2]

; 745  : 
; 746  :         // wait for clock to be activated
; 747  :         temp = OALGetTickCount() + 1;

  01298	eb000000	 bl          OALGetTickCount
  0129c	e58d0024	 str         r0, [sp, #0x24]
  012a0	e59d3024	 ldr         r3, [sp, #0x24]
  012a4	e2833001	 add         r3, r3, #1
  012a8	e58d3008	 str         r3, [sp, #8]
  012ac		 |$LN2@PrcmDomain@6|

; 748  :         while (INREG32(&pCmRegs->CM_CLKSTST_xxx) == 0 && temp > OALGetTickCount());

  012ac	e59d3010	 ldr         r3, [sp, #0x10]
  012b0	e283304c	 add         r3, r3, #0x4C
  012b4	e5933000	 ldr         r3, [r3]
  012b8	e3530000	 cmp         r3, #0
  012bc	1a000006	 bne         |$LN1@PrcmDomain@6|
  012c0	eb000000	 bl          OALGetTickCount
  012c4	e58d0028	 str         r0, [sp, #0x28]
  012c8	e59d2008	 ldr         r2, [sp, #8]
  012cc	e59d3028	 ldr         r3, [sp, #0x28]
  012d0	e1520003	 cmp         r2, r3
  012d4	9a000000	 bls         |$LN1@PrcmDomain@6|
  012d8	eafffff3	 b           |$LN2@PrcmDomain@6|
  012dc		 |$LN1@PrcmDomain@6|

; 749  : 
; 750  :         // put clock back to automatic mode
; 751  :         temp = INREG32(&pCmRegs->CM_CLKSTCTRL_xxx);

  012dc	e59d3010	 ldr         r3, [sp, #0x10]
  012e0	e2833048	 add         r3, r3, #0x48
  012e4	e5933000	 ldr         r3, [r3]
  012e8	e58d3008	 str         r3, [sp, #8]

; 752  :         temp &= ~CLKSTCTRL_MASK;

  012ec	e59d2008	 ldr         r2, [sp, #8]
  012f0	e3e03003	 mvn         r3, #3
  012f4	e0023003	 and         r3, r2, r3
  012f8	e58d3008	 str         r3, [sp, #8]

; 753  :         temp |= CLKSTCTRL_AUTOMATIC;

  012fc	e59d3008	 ldr         r3, [sp, #8]
  01300	e3833003	 orr         r3, r3, #3
  01304	e58d3008	 str         r3, [sp, #8]

; 754  :         OUTREG32(&pCmRegs->CM_CLKSTCTRL_xxx, temp);

  01308	e59d3010	 ldr         r3, [sp, #0x10]
  0130c	e2832048	 add         r2, r3, #0x48
  01310	e59d3008	 ldr         r3, [sp, #8]
  01314	e5823000	 str         r3, [r2]
  01318		 |$LN3@PrcmDomain@6|

; 755  :         }
; 756  :     
; 757  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetPowerState()=%d\r\n", rc));

  01318	e59f3044	 ldr         r3, [pc, #0x44]
  0131c	e5933440	 ldr         r3, [r3, #0x440]
  01320	e3130004	 tst         r3, #4
  01324	0a000005	 beq         |$LN10@PrcmDomain@6|
  01328	e59d1000	 ldr         r1, [sp]
  0132c	e59f002c	 ldr         r0, [pc, #0x2C]
  01330	eb000000	 bl          NKDbgPrintfW
  01334	e3a03001	 mov         r3, #1
  01338	e58d302c	 str         r3, [sp, #0x2C]
  0133c	ea000001	 b           |$LN11@PrcmDomain@6|
  01340		 |$LN10@PrcmDomain@6|
  01340	e3a03000	 mov         r3, #0
  01344	e58d302c	 str         r3, [sp, #0x2C]
  01348		 |$LN11@PrcmDomain@6|

; 758  :     return rc;

  01348	e59d3000	 ldr         r3, [sp]
  0134c	e58d3014	 str         r3, [sp, #0x14]

; 759  : }

  01350	e59d0014	 ldr         r0, [sp, #0x14]
  01354	e28dd030	 add         sp, sp, #0x30
  01358	e89d6000	 ldmia       sp, {sp, lr}
  0135c	e12fff1e	 bx          lr
  01360		 |$LN15@PrcmDomain@6|
  01360		 |$LN16@PrcmDomain@6|
  01360	00000000	 DCD         |??_C@_1EA@IIPEHBKG@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01364		 |$LN17@PrcmDomain@6|
  01364	00000000	 DCD         |dpCurSettings|
  01368		 |$LN18@PrcmDomain@6|
  01368	00000000	 DCD         |s_DomainTable|
  0136c		 |$LN19@PrcmDomain@6|
  0136c	00000000	 DCD         |??_C@_1HM@KLIMMIKC@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAP?$AAo?$AAw?$AAe?$AAr?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@|
  01370		 |$M47372|

			 ENDP  ; |PrcmDomainSetPowerState|

	EXPORT	|??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetClockState|

  00058			 AREA	 |.pdata|, PDATA
|$T47389| DCD	|$LN18@PrcmDomain@7|
	DCD	0x40007b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "C", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r", 0x0, "D"
	DCB	0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "D", 0x0, "o", 0x0, "m"
	DCB	0x0, "a", 0x0, "i", 0x0, "n", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "c", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01370			 AREA	 |.text|, CODE, ARM

  01370		 |PrcmDomainSetClockState| PROC

; 768  : {

  01370		 |$LN18@PrcmDomain@7|
  01370	e1a0c00d	 mov         r12, sp
  01374	e92d0007	 stmdb       sp!, {r0 - r2}
  01378	e92d5000	 stmdb       sp!, {r12, lr}
  0137c	e24dd018	 sub         sp, sp, #0x18
  01380		 |$M47386|

; 769  :     UINT i;
; 770  :     BOOL rc = FALSE;

  01380	e3a03000	 mov         r3, #0
  01384	e58d3004	 str         r3, [sp, #4]

; 771  :     ClockDomainInfo_t *pClockStates;
; 772  :     if (!g_bSingleThreaded)

  01388	e59f31c0	 ldr         r3, [pc, #0x1C0]
  0138c	e5933000	 ldr         r3, [r3]
  01390	e3530000	 cmp         r3, #0
  01394	1a00000d	 bne         |$LN9@PrcmDomain@7|

; 773  :         OALMSG(OAL_FUNC, (L"+PrcmDomainSetClockState"
; 774  :             L"(powerDomain=%d, clockDomain=%d, clockState=0x%08X)\r\n", 
; 775  :             powerDomain, clockDomain, clockState));

  01398	e59f31ac	 ldr         r3, [pc, #0x1AC]
  0139c	e5933440	 ldr         r3, [r3, #0x440]
  013a0	e3130004	 tst         r3, #4
  013a4	0a000007	 beq         |$LN12@PrcmDomain@7|
  013a8	e59d3028	 ldr         r3, [sp, #0x28]
  013ac	e59d2024	 ldr         r2, [sp, #0x24]
  013b0	e59d1020	 ldr         r1, [sp, #0x20]
  013b4	e59f019c	 ldr         r0, [pc, #0x19C]
  013b8	eb000000	 bl          NKDbgPrintfW
  013bc	e3a03001	 mov         r3, #1
  013c0	e58d3010	 str         r3, [sp, #0x10]
  013c4	ea000001	 b           |$LN13@PrcmDomain@7|
  013c8		 |$LN12@PrcmDomain@7|
  013c8	e3a03000	 mov         r3, #0
  013cc	e58d3010	 str         r3, [sp, #0x10]
  013d0		 |$LN13@PrcmDomain@7|
  013d0		 |$LN9@PrcmDomain@7|

; 776  : 
; 777  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  013d0	e59d3020	 ldr         r3, [sp, #0x20]
  013d4	e353000a	 cmp         r3, #0xA
  013d8	3a000000	 bcc         |$LN8@PrcmDomain@7|
  013dc	ea000043	 b           |$cleanUp$47063|
  013e0		 |$LN8@PrcmDomain@7|

; 778  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE) == 0) goto cleanUp;

  013e0	e59d1020	 ldr         r1, [sp, #0x20]
  013e4	e3a0301c	 mov         r3, #0x1C
  013e8	e0020391	 mul         r2, r1, r3
  013ec	e59f3160	 ldr         r3, [pc, #0x160]
  013f0	e0833002	 add         r3, r3, r2
  013f4	e2833004	 add         r3, r3, #4
  013f8	e5933000	 ldr         r3, [r3]
  013fc	e3130008	 tst         r3, #8
  01400	1a000000	 bne         |$LN7@PrcmDomain@7|
  01404	ea000039	 b           |$cleanUp$47063|
  01408		 |$LN7@PrcmDomain@7|

; 779  : 
; 780  :     // update internal state information 
; 781  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  01408	e59d1020	 ldr         r1, [sp, #0x20]
  0140c	e3a0301c	 mov         r3, #0x1C
  01410	e0020391	 mul         r2, r1, r3
  01414	e59f3138	 ldr         r3, [pc, #0x138]
  01418	e0833002	 add         r3, r3, r2
  0141c	e283300c	 add         r3, r3, #0xC
  01420	e5933000	 ldr         r3, [r3]
  01424	e58d3000	 str         r3, [sp]

; 782  :     if (pClockStates == NULL) goto cleanUp;

  01428	e59d3000	 ldr         r3, [sp]
  0142c	e3530000	 cmp         r3, #0
  01430	1a000000	 bne         |$LN6@PrcmDomain@7|
  01434	ea00002d	 b           |$cleanUp$47063|
  01438		 |$LN6@PrcmDomain@7|

; 783  : 
; 784  :     Lock(Mutex_Domain);

  01438	e3a00002	 mov         r0, #2
  0143c	eb000000	 bl          Lock

; 785  :     for (i = 0; i < pClockStates->count; ++i)

  01440	e3a03000	 mov         r3, #0
  01444	e58d3008	 str         r3, [sp, #8]
  01448	ea000002	 b           |$LN5@PrcmDomain@7|
  0144c		 |$LN4@PrcmDomain@7|
  0144c	e59d3008	 ldr         r3, [sp, #8]
  01450	e2833001	 add         r3, r3, #1
  01454	e58d3008	 str         r3, [sp, #8]
  01458		 |$LN5@PrcmDomain@7|
  01458	e59d2008	 ldr         r2, [sp, #8]
  0145c	e59d3000	 ldr         r3, [sp]
  01460	e5933000	 ldr         r3, [r3]
  01464	e1520003	 cmp         r2, r3
  01468	2a00001c	 bcs         |$LN3@PrcmDomain@7|

; 786  :         {
; 787  :         if (pClockStates->rgClockDomains[i].clockDomain == (ClockDomain_e) clockDomain)

  0146c	e59d3000	 ldr         r3, [sp]
  01470	e2831004	 add         r1, r3, #4
  01474	e59d2008	 ldr         r2, [sp, #8]
  01478	e3a0300c	 mov         r3, #0xC
  0147c	e0030392	 mul         r3, r2, r3
  01480	e0813003	 add         r3, r1, r3
  01484	e5932000	 ldr         r2, [r3]
  01488	e59d3024	 ldr         r3, [sp, #0x24]
  0148c	e1520003	 cmp         r2, r3
  01490	1a000011	 bne         |$LN2@PrcmDomain@7|

; 788  :             {
; 789  :             clockState &= CLKSTCTRL_MASK;

  01494	e59d3028	 ldr         r3, [sp, #0x28]
  01498	e2033003	 and         r3, r3, #3
  0149c	e58d3028	 str         r3, [sp, #0x28]

; 790  :             clockState >>= CLKSTCTRL_SHIFT;

  014a0	e59d3028	 ldr         r3, [sp, #0x28]
  014a4	e58d3028	 str         r3, [sp, #0x28]

; 791  :             pClockStates->rgClockDomains[i].clockState = clockState;

  014a8	e59d3000	 ldr         r3, [sp]
  014ac	e2831004	 add         r1, r3, #4
  014b0	e59d2008	 ldr         r2, [sp, #8]
  014b4	e3a0300c	 mov         r3, #0xC
  014b8	e0030392	 mul         r3, r2, r3
  014bc	e0813003	 add         r3, r1, r3
  014c0	e2832004	 add         r2, r3, #4
  014c4	e59d3028	 ldr         r3, [sp, #0x28]
  014c8	e5823000	 str         r3, [r2]

; 792  :             _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_CLOCKSTATE);

  014cc	e3a01008	 mov         r1, #8
  014d0	e59d0020	 ldr         r0, [sp, #0x20]
  014d4	eb000000	 bl          _PrcmDomainHwUpdate

; 793  :             break;

  014d8	ea000000	 b           |$LN3@PrcmDomain@7|
  014dc		 |$LN2@PrcmDomain@7|

; 794  :             }
; 795  :         }    

  014dc	eaffffda	 b           |$LN4@PrcmDomain@7|
  014e0		 |$LN3@PrcmDomain@7|

; 796  :     Unlock(Mutex_Domain);

  014e0	e3a00002	 mov         r0, #2
  014e4	eb000000	 bl          Unlock

; 797  :     rc = TRUE;

  014e8	e3a03001	 mov         r3, #1
  014ec	e58d3004	 str         r3, [sp, #4]
  014f0		 |$cleanUp$47063|

; 798  :     
; 799  : cleanUp:        
; 800  :     if (!g_bSingleThreaded)

  014f0	e59f3058	 ldr         r3, [pc, #0x58]
  014f4	e5933000	 ldr         r3, [r3]
  014f8	e3530000	 cmp         r3, #0
  014fc	1a00000b	 bne         |$LN1@PrcmDomain@7|

; 801  :         OALMSG(OAL_FUNC, (L"-PrcmDomainSetClockState()=%d\r\n", rc));

  01500	e59f3044	 ldr         r3, [pc, #0x44]
  01504	e5933440	 ldr         r3, [r3, #0x440]
  01508	e3130004	 tst         r3, #4
  0150c	0a000005	 beq         |$LN14@PrcmDomain@7|
  01510	e59d1004	 ldr         r1, [sp, #4]
  01514	e59f002c	 ldr         r0, [pc, #0x2C]
  01518	eb000000	 bl          NKDbgPrintfW
  0151c	e3a03001	 mov         r3, #1
  01520	e58d3014	 str         r3, [sp, #0x14]
  01524	ea000001	 b           |$LN15@PrcmDomain@7|
  01528		 |$LN14@PrcmDomain@7|
  01528	e3a03000	 mov         r3, #0
  0152c	e58d3014	 str         r3, [sp, #0x14]
  01530		 |$LN15@PrcmDomain@7|
  01530		 |$LN1@PrcmDomain@7|

; 802  :     return rc;

  01530	e59d3004	 ldr         r3, [sp, #4]
  01534	e58d300c	 str         r3, [sp, #0xC]

; 803  : }

  01538	e59d000c	 ldr         r0, [sp, #0xC]
  0153c	e28dd018	 add         sp, sp, #0x18
  01540	e89d6000	 ldmia       sp, {sp, lr}
  01544	e12fff1e	 bx          lr
  01548		 |$LN19@PrcmDomain@7|
  01548		 |$LN20@PrcmDomain@7|
  01548	00000000	 DCD         |??_C@_1EA@JEMFKOAK@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0154c		 |$LN21@PrcmDomain@7|
  0154c	00000000	 DCD         |dpCurSettings|
  01550		 |$LN22@PrcmDomain@7|
  01550	00000000	 DCD         |g_bSingleThreaded|
  01554		 |$LN23@PrcmDomain@7|
  01554	00000000	 DCD         |s_DomainTable|
  01558		 |$LN24@PrcmDomain@7|
  01558	00000000	 DCD         |??_C@_1JM@MEHAOEAE@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAC?$AAl?$AAo?$AAc?$AAk?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD?$AAo@|
  0155c		 |$M47387|

			 ENDP  ; |PrcmDomainSetClockState|

	EXPORT	|PrcmDomainSetClockStateKernel|

  00060			 AREA	 |.pdata|, PDATA
|$T47401| DCD	|$LN12@PrcmDomain@8|
	DCD	0x40005104
; Function compile flags: /Odtp

  0155c			 AREA	 |.text|, CODE, ARM

  0155c		 |PrcmDomainSetClockStateKernel| PROC

; 815  : {

  0155c		 |$LN12@PrcmDomain@8|
  0155c	e1a0c00d	 mov         r12, sp
  01560	e92d0007	 stmdb       sp!, {r0 - r2}
  01564	e92d5000	 stmdb       sp!, {r12, lr}
  01568	e24dd010	 sub         sp, sp, #0x10
  0156c		 |$M47398|

; 816  :     UINT i;
; 817  :     BOOL rc = FALSE;

  0156c	e3a03000	 mov         r3, #0
  01570	e58d3004	 str         r3, [sp, #4]

; 818  :     ClockDomainInfo_t *pClockStates;
; 819  : 
; 820  :     if (powerDomain >= POWERDOMAIN_COUNT) goto cleanUp;

  01574	e59d3018	 ldr         r3, [sp, #0x18]
  01578	e353000a	 cmp         r3, #0xA
  0157c	3a000000	 bcc         |$LN7@PrcmDomain@8|
  01580	ea00003f	 b           |$cleanUp$47086|
  01584		 |$LN7@PrcmDomain@8|

; 821  :     if ((s_DomainTable[powerDomain].ffValidationMask & DOMAIN_UPDATE_CLOCKSTATE) == 0) goto cleanUp;

  01584	e59d1018	 ldr         r1, [sp, #0x18]
  01588	e3a0301c	 mov         r3, #0x1C
  0158c	e0020391	 mul         r2, r1, r3
  01590	e59f3104	 ldr         r3, [pc, #0x104]
  01594	e0833002	 add         r3, r3, r2
  01598	e2833004	 add         r3, r3, #4
  0159c	e5933000	 ldr         r3, [r3]
  015a0	e3130008	 tst         r3, #8
  015a4	1a000000	 bne         |$LN6@PrcmDomain@8|
  015a8	ea000035	 b           |$cleanUp$47086|
  015ac		 |$LN6@PrcmDomain@8|

; 822  : 
; 823  :     // update internal state information 
; 824  :     pClockStates = s_DomainTable[powerDomain].pClockStates;

  015ac	e59d1018	 ldr         r1, [sp, #0x18]
  015b0	e3a0301c	 mov         r3, #0x1C
  015b4	e0020391	 mul         r2, r1, r3
  015b8	e59f30dc	 ldr         r3, [pc, #0xDC]
  015bc	e0833002	 add         r3, r3, r2
  015c0	e283300c	 add         r3, r3, #0xC
  015c4	e5933000	 ldr         r3, [r3]
  015c8	e58d3000	 str         r3, [sp]

; 825  :     if (pClockStates == NULL) goto cleanUp;

  015cc	e59d3000	 ldr         r3, [sp]
  015d0	e3530000	 cmp         r3, #0
  015d4	1a000000	 bne         |$LN5@PrcmDomain@8|
  015d8	ea000029	 b           |$cleanUp$47086|
  015dc		 |$LN5@PrcmDomain@8|

; 826  : 
; 827  :     for (i = 0; i < pClockStates->count; ++i)

  015dc	e3a03000	 mov         r3, #0
  015e0	e58d3008	 str         r3, [sp, #8]
  015e4	ea000002	 b           |$LN4@PrcmDomain@8|
  015e8		 |$LN3@PrcmDomain@8|
  015e8	e59d3008	 ldr         r3, [sp, #8]
  015ec	e2833001	 add         r3, r3, #1
  015f0	e58d3008	 str         r3, [sp, #8]
  015f4		 |$LN4@PrcmDomain@8|
  015f4	e59d2008	 ldr         r2, [sp, #8]
  015f8	e59d3000	 ldr         r3, [sp]
  015fc	e5933000	 ldr         r3, [r3]
  01600	e1520003	 cmp         r2, r3
  01604	2a00001c	 bcs         |$LN2@PrcmDomain@8|

; 828  :         {
; 829  :         if (pClockStates->rgClockDomains[i].clockDomain == (ClockDomain_e) clockDomain)

  01608	e59d3000	 ldr         r3, [sp]
  0160c	e2831004	 add         r1, r3, #4
  01610	e59d2008	 ldr         r2, [sp, #8]
  01614	e3a0300c	 mov         r3, #0xC
  01618	e0030392	 mul         r3, r2, r3
  0161c	e0813003	 add         r3, r1, r3
  01620	e5932000	 ldr         r2, [r3]
  01624	e59d301c	 ldr         r3, [sp, #0x1C]
  01628	e1520003	 cmp         r2, r3
  0162c	1a000011	 bne         |$LN1@PrcmDomain@8|

; 830  :             {
; 831  :             clockState &= CLKSTCTRL_MASK;

  01630	e59d3020	 ldr         r3, [sp, #0x20]
  01634	e2033003	 and         r3, r3, #3
  01638	e58d3020	 str         r3, [sp, #0x20]

; 832  :             clockState >>= CLKSTCTRL_SHIFT;

  0163c	e59d3020	 ldr         r3, [sp, #0x20]
  01640	e58d3020	 str         r3, [sp, #0x20]

; 833  :             pClockStates->rgClockDomains[i].clockState = clockState;

  01644	e59d3000	 ldr         r3, [sp]
  01648	e2831004	 add         r1, r3, #4
  0164c	e59d2008	 ldr         r2, [sp, #8]
  01650	e3a0300c	 mov         r3, #0xC
  01654	e0030392	 mul         r3, r2, r3
  01658	e0813003	 add         r3, r1, r3
  0165c	e2832004	 add         r2, r3, #4
  01660	e59d3020	 ldr         r3, [sp, #0x20]
  01664	e5823000	 str         r3, [r2]

; 834  :             _PrcmDomainHwUpdate(powerDomain, DOMAIN_UPDATE_CLOCKSTATE);

  01668	e3a01008	 mov         r1, #8
  0166c	e59d0018	 ldr         r0, [sp, #0x18]
  01670	eb000000	 bl          _PrcmDomainHwUpdate

; 835  :             break;

  01674	ea000000	 b           |$LN2@PrcmDomain@8|
  01678		 |$LN1@PrcmDomain@8|

; 836  :             }
; 837  :         }    

  01678	eaffffda	 b           |$LN3@PrcmDomain@8|
  0167c		 |$LN2@PrcmDomain@8|

; 838  :     rc = TRUE;

  0167c	e3a03001	 mov         r3, #1
  01680	e58d3004	 str         r3, [sp, #4]
  01684		 |$cleanUp$47086|

; 839  :     
; 840  : cleanUp:        
; 841  :     return rc;

  01684	e59d3004	 ldr         r3, [sp, #4]
  01688	e58d300c	 str         r3, [sp, #0xC]

; 842  : }

  0168c	e59d000c	 ldr         r0, [sp, #0xC]
  01690	e28dd010	 add         sp, sp, #0x10
  01694	e89d6000	 ldmia       sp, {sp, lr}
  01698	e12fff1e	 bx          lr
  0169c		 |$LN13@PrcmDomain@8|
  0169c		 |$LN14@PrcmDomain@8|
  0169c	00000000	 DCD         |s_DomainTable|
  016a0		 |$M47399|

			 ENDP  ; |PrcmDomainSetClockStateKernel|

	EXPORT	|??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@| [ DATA ] ; `string'
	EXPORT	|PrcmDomainSetMemoryState|

  00068			 AREA	 |.pdata|, PDATA
|$T47413| DCD	|$LN11@PrcmDomain@9|
	DCD	0x40004704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, ")", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "c", 0x0, "m", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "M", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "p", 0x0, "o", 0x0, "w", 0x0, "e", 0x0, "r"
	DCB	0x0, "D", 0x0, "o", 0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "m"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r", 0x0, "y", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ","
	DCB	0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o", 0x0, "r"
	DCB	0x0, "y", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e"
	DCB	0x0, "M", 0x0, "a", 0x0, "s", 0x0, "k", 0x0, "=", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  016a0			 AREA	 |.text|, CODE, ARM

  016a0		 |PrcmDomainSetMemoryState| PROC

; 851  : {

  016a0		 |$LN11@PrcmDomain@9|
  016a0	e1a0c00d	 mov         r12, sp
  016a4	e92d0007	 stmdb       sp!, {r0 - r2}
  016a8	e92d5000	 stmdb       sp!, {r12, lr}
  016ac	e24dd018	 sub         sp, sp, #0x18
  016b0		 |$M47410|

; 852  : //    UINT val;    
; 853  :     BOOL rc = FALSE;

  016b0	e3a03000	 mov         r3, #0
  016b4	e58d3000	 str         r3, [sp]

; 854  :     OMAP_PRM_REGS *pPrmRegs;
; 855  :     OALMSG(OAL_FUNC, (L"+PrcmDomainSetMemoryState"
; 856  :         L"(powerDomain=%d, memoryState=0x%08X, memoryStateMask=0x%08X)\r\n", 
; 857  :         powerDomain, memoryState, memoryStateMask));

  016b8	e59f30f0	 ldr         r3, [pc, #0xF0]
  016bc	e5933440	 ldr         r3, [r3, #0x440]
  016c0	e3130004	 tst         r3, #4
  016c4	0a000007	 beq         |$LN5@PrcmDomain@9|
  016c8	e59d3028	 ldr         r3, [sp, #0x28]
  016cc	e59d2024	 ldr         r2, [sp, #0x24]
  016d0	e59d1020	 ldr         r1, [sp, #0x20]
  016d4	e59f00dc	 ldr         r0, [pc, #0xDC]
  016d8	eb000000	 bl          NKDbgPrintfW
  016dc	e3a03001	 mov         r3, #1
  016e0	e58d300c	 str         r3, [sp, #0xC]
  016e4	ea000001	 b           |$LN6@PrcmDomain@9|
  016e8		 |$LN5@PrcmDomain@9|
  016e8	e3a03000	 mov         r3, #0
  016ec	e58d300c	 str         r3, [sp, #0xC]
  016f0		 |$LN6@PrcmDomain@9|

; 858  : 
; 859  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  016f0	e59d0020	 ldr         r0, [sp, #0x20]
  016f4	eb000000	 bl          GetPrmRegisterSet
  016f8	e58d0010	 str         r0, [sp, #0x10]
  016fc	e59d3010	 ldr         r3, [sp, #0x10]
  01700	e58d3004	 str         r3, [sp, #4]

; 860  :     if (pPrmRegs == NULL) goto cleanUp;

  01704	e59d3004	 ldr         r3, [sp, #4]
  01708	e3530000	 cmp         r3, #0
  0170c	1a000000	 bne         |$LN2@PrcmDomain@9|
  01710	ea000013	 b           |$cleanUp$47108|
  01714		 |$LN2@PrcmDomain@9|

; 861  : 
; 862  :     Lock(Mutex_Domain);

  01714	e3a00002	 mov         r0, #2
  01718	eb000000	 bl          Lock

; 863  :     // update cached logic state
; 864  :     if (memoryStateMask & LOGICRETSTATE)

  0171c	e59d3028	 ldr         r3, [sp, #0x28]
  01720	e3130004	 tst         r3, #4
  01724	0a00000a	 beq         |$LN1@PrcmDomain@9|

; 865  :         {
; 866  :         s_DomainTable[powerDomain].pDomainState->logicState = memoryState & LOGICRETSTATE_MASK;

  01728	e59d3024	 ldr         r3, [sp, #0x24]
  0172c	e2030004	 and         r0, r3, #4
  01730	e59d1020	 ldr         r1, [sp, #0x20]
  01734	e3a0301c	 mov         r3, #0x1C
  01738	e0020391	 mul         r2, r1, r3
  0173c	e59f3070	 ldr         r3, [pc, #0x70]
  01740	e0833002	 add         r3, r3, r2
  01744	e2833008	 add         r3, r3, #8
  01748	e5933000	 ldr         r3, [r3]
  0174c	e2833004	 add         r3, r3, #4
  01750	e5830000	 str         r0, [r3]
  01754		 |$LN1@PrcmDomain@9|

; 867  :         }
; 868  : 
; 869  :     Unlock(Mutex_Domain);

  01754	e3a00002	 mov         r0, #2
  01758	eb000000	 bl          Unlock

; 870  :     
; 871  :     rc = TRUE;

  0175c	e3a03001	 mov         r3, #1
  01760	e58d3000	 str         r3, [sp]
  01764		 |$cleanUp$47108|

; 872  :     
; 873  : cleanUp:        
; 874  :     OALMSG(OAL_FUNC, (L"-PrcmDomainSetMemoryState()=%d\r\n", rc));

  01764	e59f3044	 ldr         r3, [pc, #0x44]
  01768	e5933440	 ldr         r3, [r3, #0x440]
  0176c	e3130004	 tst         r3, #4
  01770	0a000005	 beq         |$LN7@PrcmDomain@9|
  01774	e59d1000	 ldr         r1, [sp]
  01778	e59f002c	 ldr         r0, [pc, #0x2C]
  0177c	eb000000	 bl          NKDbgPrintfW
  01780	e3a03001	 mov         r3, #1
  01784	e58d3014	 str         r3, [sp, #0x14]
  01788	ea000001	 b           |$LN8@PrcmDomain@9|
  0178c		 |$LN7@PrcmDomain@9|
  0178c	e3a03000	 mov         r3, #0
  01790	e58d3014	 str         r3, [sp, #0x14]
  01794		 |$LN8@PrcmDomain@9|

; 875  :     return rc;

  01794	e59d3000	 ldr         r3, [sp]
  01798	e58d3008	 str         r3, [sp, #8]

; 876  : }

  0179c	e59d0008	 ldr         r0, [sp, #8]
  017a0	e28dd018	 add         sp, sp, #0x18
  017a4	e89d6000	 ldmia       sp, {sp, lr}
  017a8	e12fff1e	 bx          lr
  017ac		 |$LN12@PrcmDomain@9|
  017ac		 |$LN13@PrcmDomain@9|
  017ac	00000000	 DCD         |??_C@_1EC@GMFKPCKF@?$AA?9?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?$DN?$AA?$CF?$AAd?$AA?$AN?$AA?6@|
  017b0		 |$LN14@PrcmDomain@9|
  017b0	00000000	 DCD         |dpCurSettings|
  017b4		 |$LN15@PrcmDomain@9|
  017b4	00000000	 DCD         |s_DomainTable|
  017b8		 |$LN16@PrcmDomain@9|
  017b8	00000000	 DCD         |??_C@_1LA@DDOCINBK@?$AA?$CL?$AAP?$AAr?$AAc?$AAm?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AAS?$AAe?$AAt?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$CI?$AAp?$AAo?$AAw?$AAe?$AAr?$AAD@|
  017bc		 |$M47411|

			 ENDP  ; |PrcmDomainSetMemoryState|

	EXPORT	|PrcmDomainClearWakeupStatus|

  00070			 AREA	 |.pdata|, PDATA
|$T47424| DCD	|$LN7@PrcmDomain@10|
	DCD	0x40002a04
; Function compile flags: /Odtp

  017bc			 AREA	 |.text|, CODE, ARM

  017bc		 |PrcmDomainClearWakeupStatus| PROC

; 888  : {

  017bc		 |$LN7@PrcmDomain@10|
  017bc	e1a0c00d	 mov         r12, sp
  017c0	e92d0001	 stmdb       sp!, {r0}
  017c4	e92d5000	 stmdb       sp!, {r12, lr}
  017c8	e24dd014	 sub         sp, sp, #0x14
  017cc		 |$M47421|

; 889  :     UINT val;    
; 890  :     BOOL rc = FALSE;

  017cc	e3a03000	 mov         r3, #0
  017d0	e58d3000	 str         r3, [sp]

; 891  :     OMAP_PRM_REGS *pPrmRegs;
; 892  :     //OALMSG(OAL_FUNC, (L"+PrcmDomainClearWakeupStatus"
; 893  :     //    L"(powerDomain=%d)\r\n", 
; 894  :     //    powerDomain)
; 895  :     //    );
; 896  : 
; 897  :     pPrmRegs = GetPrmRegisterSet(powerDomain);

  017d4	e59d001c	 ldr         r0, [sp, #0x1C]
  017d8	eb000000	 bl          GetPrmRegisterSet
  017dc	e58d0010	 str         r0, [sp, #0x10]
  017e0	e59d3010	 ldr         r3, [sp, #0x10]
  017e4	e58d3008	 str         r3, [sp, #8]

; 898  :     if (pPrmRegs == NULL) goto cleanUp;

  017e8	e59d3008	 ldr         r3, [sp, #8]
  017ec	e3530000	 cmp         r3, #0
  017f0	1a000000	 bne         |$LN2@PrcmDomain@10|
  017f4	ea000014	 b           |$cleanUp$47120|
  017f8		 |$LN2@PrcmDomain@10|

; 899  : 
; 900  :     // This routine should only be called during system boot-up or
; 901  :     // from OEMIdle, OEMPowerOff.  Hence, serialization within this routine
; 902  :     // should not be performed.
; 903  : 
; 904  :     val = INREG32(&pPrmRegs->PM_WKST_xxx);

  017f8	e59d3008	 ldr         r3, [sp, #8]
  017fc	e28330b0	 add         r3, r3, #0xB0
  01800	e5933000	 ldr         r3, [r3]
  01804	e58d3004	 str         r3, [sp, #4]

; 905  :     OUTREG32(&pPrmRegs->PM_WKST_xxx, val);

  01808	e59d3008	 ldr         r3, [sp, #8]
  0180c	e28320b0	 add         r2, r3, #0xB0
  01810	e59d3004	 ldr         r3, [sp, #4]
  01814	e5823000	 str         r3, [r2]

; 906  :     if (powerDomain == POWERDOMAIN_CORE) 

  01818	e59d301c	 ldr         r3, [sp, #0x1C]
  0181c	e3530001	 cmp         r3, #1
  01820	1a000007	 bne         |$LN1@PrcmDomain@10|

; 907  :         {
; 908  :         val = INREG32(&pPrmRegs->PM_WKST3_xxx);

  01824	e59d3008	 ldr         r3, [sp, #8]
  01828	e28330b8	 add         r3, r3, #0xB8
  0182c	e5933000	 ldr         r3, [r3]
  01830	e58d3004	 str         r3, [sp, #4]

; 909  :         OUTREG32(&pPrmRegs->PM_WKST3_xxx, val);

  01834	e59d3008	 ldr         r3, [sp, #8]
  01838	e28320b8	 add         r2, r3, #0xB8
  0183c	e59d3004	 ldr         r3, [sp, #4]
  01840	e5823000	 str         r3, [r2]
  01844		 |$LN1@PrcmDomain@10|

; 910  :         }
; 911  :     
; 912  :     rc = TRUE;

  01844	e3a03001	 mov         r3, #1
  01848	e58d3000	 str         r3, [sp]
  0184c		 |$cleanUp$47120|

; 913  :     
; 914  : cleanUp:        
; 915  :     //OALMSG(OAL_FUNC, (L"-PrcmDomainClearWakeupStatus()=%d\r\n", rc));
; 916  :     return rc;

  0184c	e59d3000	 ldr         r3, [sp]
  01850	e58d300c	 str         r3, [sp, #0xC]

; 917  : }

  01854	e59d000c	 ldr         r0, [sp, #0xC]
  01858	e28dd014	 add         sp, sp, #0x14
  0185c	e89d6000	 ldmia       sp, {sp, lr}
  01860	e12fff1e	 bx          lr
  01864		 |$M47422|

			 ENDP  ; |PrcmDomainClearWakeupStatus|

	EXPORT	|PrcmDomainUpdateRefCount|
	IMPORT	|InterlockedDecrement|
	IMPORT	|InterlockedIncrement|

  00078			 AREA	 |.pdata|, PDATA
|$T47429| DCD	|$LN7@PrcmDomain@11|
	DCD	0x40001603
; Function compile flags: /Odtp

  01864			 AREA	 |.text|, CODE, ARM

  01864		 |PrcmDomainUpdateRefCount| PROC

; 925  : {    

  01864		 |$LN7@PrcmDomain@11|
  01864	e1a0c00d	 mov         r12, sp
  01868	e92d0003	 stmdb       sp!, {r0, r1}
  0186c	e92d5000	 stmdb       sp!, {r12, lr}
  01870		 |$M47426|

; 926  :     // update refcount
; 927  :     if (bEnable)

  01870	e59d300c	 ldr         r3, [sp, #0xC]
  01874	e3530000	 cmp         r3, #0
  01878	0a000006	 beq         |$LN2@PrcmDomain@11|

; 928  :         {
; 929  :         InterlockedIncrement((LONG*)&s_DomainTable[powerDomain].refCount);

  0187c	e59d1008	 ldr         r1, [sp, #8]
  01880	e3a0301c	 mov         r3, #0x1C
  01884	e0020391	 mul         r2, r1, r3
  01888	e59f3028	 ldr         r3, [pc, #0x28]
  0188c	e0830002	 add         r0, r3, r2
  01890	eb000000	 bl          InterlockedIncrement

; 930  :         }
; 931  :     else

  01894	ea000005	 b           |$LN1@PrcmDomain@11|
  01898		 |$LN2@PrcmDomain@11|

; 932  :         {
; 933  :         InterlockedDecrement((LONG*)&s_DomainTable[powerDomain].refCount);

  01898	e59d1008	 ldr         r1, [sp, #8]
  0189c	e3a0301c	 mov         r3, #0x1C
  018a0	e0020391	 mul         r2, r1, r3
  018a4	e59f300c	 ldr         r3, [pc, #0xC]
  018a8	e0830002	 add         r0, r3, r2
  018ac	eb000000	 bl          InterlockedDecrement
  018b0		 |$LN1@PrcmDomain@11|

; 934  :         }
; 935  : }

  018b0	e89d6000	 ldmia       sp, {sp, lr}
  018b4	e12fff1e	 bx          lr
  018b8		 |$LN8@PrcmDomain@11|
  018b8		 |$LN9@PrcmDomain@11|
  018b8	00000000	 DCD         |s_DomainTable|
  018bc		 |$M47427|

			 ENDP  ; |PrcmDomainUpdateRefCount|

	EXPORT	|PrcmProcessPostMpuWakeup|
	IMPORT	|g_pPrcmPrm|

  00080			 AREA	 |.pdata|, PDATA
|$T47436| DCD	|$LN5@PrcmProces|
	DCD	0x40004301
; Function compile flags: /Odtp

  018bc			 AREA	 |.text|, CODE, ARM

  018bc		 |PrcmProcessPostMpuWakeup| PROC

; 940  : {

  018bc		 |$LN5@PrcmProces|
  018bc	e24dd004	 sub         sp, sp, #4
  018c0		 |$M47433|

; 941  :     // NOTE:
; 942  :     //  This routine should only be called in OEMIdle where IRQ's are disabled
; 943  :     //
; 944  :     DWORD val;
; 945  : 
; 946  :     // core
; 947  :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST1_CORE,
; 948  :         INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST1_CORE)
; 949  :         );

  018c0	e59f30fc	 ldr         r3, [pc, #0xFC]
  018c4	e5933000	 ldr         r3, [r3]
  018c8	e2833004	 add         r3, r3, #4
  018cc	e5933000	 ldr         r3, [r3]
  018d0	e28330b0	 add         r3, r3, #0xB0
  018d4	e5932000	 ldr         r2, [r3]
  018d8	e59f30e4	 ldr         r3, [pc, #0xE4]
  018dc	e5933000	 ldr         r3, [r3]
  018e0	e2833004	 add         r3, r3, #4
  018e4	e5933000	 ldr         r3, [r3]
  018e8	e28330b0	 add         r3, r3, #0xB0
  018ec	e5832000	 str         r2, [r3]

; 950  : 
; 951  :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST3_CORE,
; 952  :         INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->PM_WKST3_CORE)
; 953  :         );

  018f0	e59f30cc	 ldr         r3, [pc, #0xCC]
  018f4	e5933000	 ldr         r3, [r3]
  018f8	e2833004	 add         r3, r3, #4
  018fc	e5933000	 ldr         r3, [r3]
  01900	e28330b8	 add         r3, r3, #0xB8
  01904	e5932000	 ldr         r2, [r3]
  01908	e59f30b4	 ldr         r3, [pc, #0xB4]
  0190c	e5933000	 ldr         r3, [r3]
  01910	e2833004	 add         r3, r3, #4
  01914	e5933000	 ldr         r3, [r3]
  01918	e28330b8	 add         r3, r3, #0xB8
  0191c	e5832000	 str         r2, [r3]

; 954  : 
; 955  :     // peripheral
; 956  :     OUTREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_WKST_PER,
; 957  :         INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->PM_WKST_PER)
; 958  :         );

  01920	e59f309c	 ldr         r3, [pc, #0x9C]
  01924	e5933000	 ldr         r3, [r3]
  01928	e2833008	 add         r3, r3, #8
  0192c	e5933000	 ldr         r3, [r3]
  01930	e28330b0	 add         r3, r3, #0xB0
  01934	e5932000	 ldr         r2, [r3]
  01938	e59f3084	 ldr         r3, [pc, #0x84]
  0193c	e5933000	 ldr         r3, [r3]
  01940	e2833008	 add         r3, r3, #8
  01944	e5933000	 ldr         r3, [r3]
  01948	e28330b0	 add         r3, r3, #0xB0
  0194c	e5832000	 str         r2, [r3]

; 959  : 
; 960  :     // usbhost
; 961  :     OUTREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_WKST_USBHOST,
; 962  :         INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->PM_WKST_USBHOST)
; 963  :         );

  01950	e59f306c	 ldr         r3, [pc, #0x6C]
  01954	e5933000	 ldr         r3, [r3]
  01958	e283300c	 add         r3, r3, #0xC
  0195c	e5933000	 ldr         r3, [r3]
  01960	e28330b0	 add         r3, r3, #0xB0
  01964	e5932000	 ldr         r2, [r3]
  01968	e59f3054	 ldr         r3, [pc, #0x54]
  0196c	e5933000	 ldr         r3, [r3]
  01970	e283300c	 add         r3, r3, #0xC
  01974	e5933000	 ldr         r3, [r3]
  01978	e28330b0	 add         r3, r3, #0xB0
  0197c	e5832000	 str         r2, [r3]

; 964  : 
; 965  :     // clear irq status for mpu
; 966  :     val = INREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU);

  01980	e59f303c	 ldr         r3, [pc, #0x3C]
  01984	e5933000	 ldr         r3, [r3]
  01988	e2833028	 add         r3, r3, #0x28
  0198c	e5933000	 ldr         r3, [r3]
  01990	e2833018	 add         r3, r3, #0x18
  01994	e5933000	 ldr         r3, [r3]
  01998	e58d3000	 str         r3, [sp]

; 967  :     OUTREG32(&g_pPrcmPrm->pOMAP_OCP_SYSTEM_PRM->PRM_IRQSTATUS_MPU, 
; 968  :         val & PRM_IRQENABLE_WKUP_EN
; 969  :         );

  0199c	e59d3000	 ldr         r3, [sp]
  019a0	e2032001	 and         r2, r3, #1
  019a4	e59f3018	 ldr         r3, [pc, #0x18]
  019a8	e5933000	 ldr         r3, [r3]
  019ac	e2833028	 add         r3, r3, #0x28
  019b0	e5933000	 ldr         r3, [r3]
  019b4	e2833018	 add         r3, r3, #0x18
  019b8	e5832000	 str         r2, [r3]

; 970  : 
; 971  : }

  019bc	e28dd004	 add         sp, sp, #4
  019c0	e12fff1e	 bx          lr
  019c4		 |$LN6@PrcmProces|
  019c4		 |$LN7@PrcmProces|
  019c4	00000000	 DCD         |g_pPrcmPrm|
  019c8		 |$M47434|

			 ENDP  ; |PrcmProcessPostMpuWakeup|

	EXPORT	|PrcmDomainClearReset|

  00088			 AREA	 |.pdata|, PDATA
|$T47443| DCD	|$LN5@PrcmDomain@12|
	DCD	0x40006200
; Function compile flags: /Odtp

  019c8			 AREA	 |.text|, CODE, ARM

  019c8		 |PrcmDomainClearReset| PROC

; 976  : {

  019c8		 |$LN5@PrcmDomain@12|
  019c8		 |$M47440|

; 977  :     // Clear the Resest states
; 978  :     OUTREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->RM_RSTST_CORE, 
; 979  :             INREG32(&g_pPrcmPrm->pOMAP_CORE_PRM->RM_RSTST_CORE)); 

  019c8	e59f317c	 ldr         r3, [pc, #0x17C]
  019cc	e5933000	 ldr         r3, [r3]
  019d0	e2833004	 add         r3, r3, #4
  019d4	e5933000	 ldr         r3, [r3]
  019d8	e2833058	 add         r3, r3, #0x58
  019dc	e5932000	 ldr         r2, [r3]
  019e0	e59f3164	 ldr         r3, [pc, #0x164]
  019e4	e5933000	 ldr         r3, [r3]
  019e8	e2833004	 add         r3, r3, #4
  019ec	e5933000	 ldr         r3, [r3]
  019f0	e2833058	 add         r3, r3, #0x58
  019f4	e5832000	 str         r2, [r3]

; 980  : 
; 981  :     OUTREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->RM_RSTST_MPU, 
; 982  :             INREG32(&g_pPrcmPrm->pOMAP_MPU_PRM->RM_RSTST_MPU)); 

  019f8	e59f314c	 ldr         r3, [pc, #0x14C]
  019fc	e5933000	 ldr         r3, [r3]
  01a00	e2833014	 add         r3, r3, #0x14
  01a04	e5933000	 ldr         r3, [r3]
  01a08	e2833058	 add         r3, r3, #0x58
  01a0c	e5932000	 ldr         r2, [r3]
  01a10	e59f3134	 ldr         r3, [pc, #0x134]
  01a14	e5933000	 ldr         r3, [r3]
  01a18	e2833014	 add         r3, r3, #0x14
  01a1c	e5933000	 ldr         r3, [r3]
  01a20	e2833058	 add         r3, r3, #0x58
  01a24	e5832000	 str         r2, [r3]

; 983  : 
; 984  :     OUTREG32(&g_pPrcmPrm->pOMAP_EMU_PRM->RM_RSTST_EMU, 
; 985  :             INREG32(&g_pPrcmPrm->pOMAP_EMU_PRM->RM_RSTST_EMU)); 

  01a28	e59f311c	 ldr         r3, [pc, #0x11C]
  01a2c	e5933000	 ldr         r3, [r3]
  01a30	e2833010	 add         r3, r3, #0x10
  01a34	e5933000	 ldr         r3, [r3]
  01a38	e2833058	 add         r3, r3, #0x58
  01a3c	e5932000	 ldr         r2, [r3]
  01a40	e59f3104	 ldr         r3, [pc, #0x104]
  01a44	e5933000	 ldr         r3, [r3]
  01a48	e2833010	 add         r3, r3, #0x10
  01a4c	e5933000	 ldr         r3, [r3]
  01a50	e2833058	 add         r3, r3, #0x58
  01a54	e5832000	 str         r2, [r3]

; 986  : 
; 987  :     OUTREG32(&g_pPrcmPrm->pOMAP_PER_PRM->RM_RSTST_PER,
; 988  :             INREG32(&g_pPrcmPrm->pOMAP_PER_PRM->RM_RSTST_PER)); 

  01a58	e59f30ec	 ldr         r3, [pc, #0xEC]
  01a5c	e5933000	 ldr         r3, [r3]
  01a60	e2833008	 add         r3, r3, #8
  01a64	e5933000	 ldr         r3, [r3]
  01a68	e2833058	 add         r3, r3, #0x58
  01a6c	e5932000	 ldr         r2, [r3]
  01a70	e59f30d4	 ldr         r3, [pc, #0xD4]
  01a74	e5933000	 ldr         r3, [r3]
  01a78	e2833008	 add         r3, r3, #8
  01a7c	e5933000	 ldr         r3, [r3]
  01a80	e2833058	 add         r3, r3, #0x58
  01a84	e5832000	 str         r2, [r3]

; 989  : 
; 990  :     OUTREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->RM_RSTST_SGX,
; 991  :             INREG32(&g_pPrcmPrm->pOMAP_SGX_PRM->RM_RSTST_SGX)); 

  01a88	e59f30bc	 ldr         r3, [pc, #0xBC]
  01a8c	e5933000	 ldr         r3, [r3]
  01a90	e2833020	 add         r3, r3, #0x20
  01a94	e5933000	 ldr         r3, [r3]
  01a98	e2833058	 add         r3, r3, #0x58
  01a9c	e5932000	 ldr         r2, [r3]
  01aa0	e59f30a4	 ldr         r3, [pc, #0xA4]
  01aa4	e5933000	 ldr         r3, [r3]
  01aa8	e2833020	 add         r3, r3, #0x20
  01aac	e5933000	 ldr         r3, [r3]
  01ab0	e2833058	 add         r3, r3, #0x58
  01ab4	e5832000	 str         r2, [r3]

; 992  : 
; 993  :     OUTREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->RM_RSTST_DSS,
; 994  :             INREG32(&g_pPrcmPrm->pOMAP_DSS_PRM->RM_RSTST_DSS)); 

  01ab8	e59f308c	 ldr         r3, [pc, #0x8C]
  01abc	e5933000	 ldr         r3, [r3]
  01ac0	e2833018	 add         r3, r3, #0x18
  01ac4	e5933000	 ldr         r3, [r3]
  01ac8	e2833058	 add         r3, r3, #0x58
  01acc	e5932000	 ldr         r2, [r3]
  01ad0	e59f3074	 ldr         r3, [pc, #0x74]
  01ad4	e5933000	 ldr         r3, [r3]
  01ad8	e2833018	 add         r3, r3, #0x18
  01adc	e5933000	 ldr         r3, [r3]
  01ae0	e2833058	 add         r3, r3, #0x58
  01ae4	e5832000	 str         r2, [r3]

; 995  : 
; 996  :     OUTREG32(&g_pPrcmPrm->pOMAP_NEON_PRM->RM_RSTST_NEON,
; 997  :             INREG32(&g_pPrcmPrm->pOMAP_NEON_PRM->RM_RSTST_NEON)); 

  01ae8	e59f305c	 ldr         r3, [pc, #0x5C]
  01aec	e5933000	 ldr         r3, [r3]
  01af0	e283301c	 add         r3, r3, #0x1C
  01af4	e5933000	 ldr         r3, [r3]
  01af8	e2833058	 add         r3, r3, #0x58
  01afc	e5932000	 ldr         r2, [r3]
  01b00	e59f3044	 ldr         r3, [pc, #0x44]
  01b04	e5933000	 ldr         r3, [r3]
  01b08	e283301c	 add         r3, r3, #0x1C
  01b0c	e5933000	 ldr         r3, [r3]
  01b10	e2833058	 add         r3, r3, #0x58
  01b14	e5832000	 str         r2, [r3]

; 998  : 
; 999  :     OUTREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->RM_RSTST_USBHOST,
; 1000 :             INREG32(&g_pPrcmPrm->pOMAP_USBHOST_PRM->RM_RSTST_USBHOST)); 

  01b18	e59f302c	 ldr         r3, [pc, #0x2C]
  01b1c	e5933000	 ldr         r3, [r3]
  01b20	e283300c	 add         r3, r3, #0xC
  01b24	e5933000	 ldr         r3, [r3]
  01b28	e2833058	 add         r3, r3, #0x58
  01b2c	e5932000	 ldr         r2, [r3]
  01b30	e59f3014	 ldr         r3, [pc, #0x14]
  01b34	e5933000	 ldr         r3, [r3]
  01b38	e283300c	 add         r3, r3, #0xC
  01b3c	e5933000	 ldr         r3, [r3]
  01b40	e2833058	 add         r3, r3, #0x58
  01b44	e5832000	 str         r2, [r3]

; 1001 : }

  01b48	e12fff1e	 bx          lr
  01b4c		 |$LN6@PrcmDomain@12|
  01b4c		 |$LN7@PrcmDomain@12|
  01b4c	00000000	 DCD         |g_pPrcmPrm|
  01b50		 |$M47441|

			 ENDP  ; |PrcmDomainClearReset|

	END
