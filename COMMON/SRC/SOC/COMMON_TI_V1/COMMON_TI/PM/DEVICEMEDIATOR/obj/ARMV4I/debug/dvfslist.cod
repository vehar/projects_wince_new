; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\DEVICEMEDIATOR\dvfslist.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?Initialize@DVFSList@@UAAHXZ|		; DVFSList::Initialize
	IMPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T33073| DCD	|$LN5@Initialize|
	DCD	0x40000d04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Initialize@DVFSList@@UAAHXZ| PROC	; DVFSList::Initialize

; 43   : {

  00000		 |$LN5@Initialize|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M33070|

; 44   :     ::InitializeCriticalSection(&m_cs);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2830010	 add         r0, r3, #0x10
  00018	eb000000	 bl          InitializeCriticalSection

; 45   :     return TRUE;

  0001c	e3a03001	 mov         r3, #1
  00020	e58d3000	 str         r3, [sp]

; 46   : }

  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M33071|

			 ENDP  ; |?Initialize@DVFSList@@UAAHXZ|, DVFSList::Initialize

	EXPORT	|?Uninitialize@DVFSList@@UAAHXZ|	; DVFSList::Uninitialize
	IMPORT	|DeleteCriticalSection|
	IMPORT	|??3@YAXPAX@Z|				; operator delete
	IMPORT	|CloseHandle|

  00008			 AREA	 |.pdata|, PDATA
|$T33080| DCD	|$LN10@Uninitiali|
	DCD	0x40003704
; Function compile flags: /Odtp

  00034			 AREA	 |.text|, CODE, ARM

  00034		 |?Uninitialize@DVFSList@@UAAHXZ| PROC	; DVFSList::Uninitialize

; 51   : {

  00034		 |$LN10@Uninitiali|
  00034	e1a0c00d	 mov         r12, sp
  00038	e92d0001	 stmdb       sp!, {r0}
  0003c	e92d5000	 stmdb       sp!, {r12, lr}
  00040	e24dd00c	 sub         sp, sp, #0xC
  00044		 |$M33077|

; 52   :     // iterate through and release all elements
; 53   :     DVFSElement *pCurrent = m_pDVFSElementHead;

  00044	e59d3014	 ldr         r3, [sp, #0x14]
  00048	e2833024	 add         r3, r3, #0x24
  0004c	e5933000	 ldr         r3, [r3]
  00050	e58d3000	 str         r3, [sp]
  00054		 |$LN5@Uninitiali|

; 54   :     while (pCurrent != NULL)

  00054	e59d3000	 ldr         r3, [sp]
  00058	e3530000	 cmp         r3, #0
  0005c	0a000022	 beq         |$LN4@Uninitiali|

; 55   :         {
; 56   :         // move head pointer to next element
; 57   :         if (m_pDVFSElementHead == pCurrent->Flink) 

  00060	e59d3014	 ldr         r3, [sp, #0x14]
  00064	e2833024	 add         r3, r3, #0x24
  00068	e5932000	 ldr         r2, [r3]
  0006c	e59d3000	 ldr         r3, [sp]
  00070	e5933000	 ldr         r3, [r3]
  00074	e1520003	 cmp         r2, r3
  00078	1a000004	 bne         |$LN3@Uninitiali|

; 58   :             {
; 59   :             m_pDVFSElementHead = NULL;

  0007c	e59d3014	 ldr         r3, [sp, #0x14]
  00080	e2832024	 add         r2, r3, #0x24
  00084	e3a03000	 mov         r3, #0
  00088	e5823000	 str         r3, [r2]

; 60   :             }
; 61   :         else

  0008c	ea000004	 b           |$LN2@Uninitiali|
  00090		 |$LN3@Uninitiali|

; 62   :             {
; 63   :             m_pDVFSElementHead = (DVFSElement*)pCurrent->Flink;

  00090	e59d3014	 ldr         r3, [sp, #0x14]
  00094	e2832024	 add         r2, r3, #0x24
  00098	e59d3000	 ldr         r3, [sp]
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e5823000	 str         r3, [r2]
  000a4		 |$LN2@Uninitiali|

; 64   :             }
; 65   : 
; 66   :         if (pCurrent->m_AsyncEvent != NULL) ::CloseHandle(pCurrent->m_AsyncEvent);

  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e283300c	 add         r3, r3, #0xC
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e3530000	 cmp         r3, #0
  000b4	0a000003	 beq         |$LN1@Uninitiali|
  000b8	e59d3000	 ldr         r3, [sp]
  000bc	e283300c	 add         r3, r3, #0xC
  000c0	e5930000	 ldr         r0, [r3]
  000c4	eb000000	 bl          CloseHandle
  000c8		 |$LN1@Uninitiali|

; 67   :         delete pCurrent;

  000c8	e59d3000	 ldr         r3, [sp]
  000cc	e58d3004	 str         r3, [sp, #4]
  000d0	e59d0004	 ldr         r0, [sp, #4]
  000d4	eb000000	 bl          |??3@YAXPAX@Z|

; 68   :         pCurrent = m_pDVFSElementHead;

  000d8	e59d3014	 ldr         r3, [sp, #0x14]
  000dc	e2833024	 add         r3, r3, #0x24
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e58d3000	 str         r3, [sp]

; 69   :         }

  000e8	eaffffd9	 b           |$LN5@Uninitiali|
  000ec		 |$LN4@Uninitiali|

; 70   : 
; 71   :     ::DeleteCriticalSection(&m_cs);

  000ec	e59d3014	 ldr         r3, [sp, #0x14]
  000f0	e2830010	 add         r0, r3, #0x10
  000f4	eb000000	 bl          DeleteCriticalSection

; 72   :     return TRUE;

  000f8	e3a03001	 mov         r3, #1
  000fc	e58d3008	 str         r3, [sp, #8]

; 73   : }

  00100	e59d0008	 ldr         r0, [sp, #8]
  00104	e28dd00c	 add         sp, sp, #0xC
  00108	e89d6000	 ldmia       sp, {sp, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$M33078|

			 ENDP  ; |?Uninitialize@DVFSList@@UAAHXZ|, DVFSList::Uninitialize

	EXPORT	|?Unlock@DVFSList@@IAAXXZ|		; DVFSList::Unlock
	EXPORT	|?Lock@DVFSList@@IAAXXZ|		; DVFSList::Lock
	EXPORT	|?InsertElementByOrder@DVFSList@@IAAXPAVDVFSElement@@@Z| ; DVFSList::InsertElementByOrder

  00010			 AREA	 |.pdata|, PDATA
|$T33085| DCD	|$LN16@InsertElem|
	DCD	0x40006b04
; Function compile flags: /Odtp

  00110			 AREA	 |.text|, CODE, ARM

  00110		 |?InsertElementByOrder@DVFSList@@IAAXPAVDVFSElement@@@Z| PROC ; DVFSList::InsertElementByOrder

; 78   : {

  00110		 |$LN16@InsertElem|
  00110	e1a0c00d	 mov         r12, sp
  00114	e92d0003	 stmdb       sp!, {r0, r1}
  00118	e92d5000	 stmdb       sp!, {r12, lr}
  0011c	e24dd00c	 sub         sp, sp, #0xC
  00120		 |$M33082|

; 79   :     Lock();

  00120	e59d0014	 ldr         r0, [sp, #0x14]
  00124	eb000000	 bl          |?Lock@DVFSList@@IAAXXZ|

; 80   :     if (m_pDVFSElementHead != NULL)

  00128	e59d3014	 ldr         r3, [sp, #0x14]
  0012c	e2833024	 add         r3, r3, #0x24
  00130	e5933000	 ldr         r3, [r3]
  00134	e3530000	 cmp         r3, #0
  00138	0a00004f	 beq         |$LN11@InsertElem|

; 81   :         {        
; 82   :         // code is optimized on the assumption that higher priority
; 83   :         // elements will get loaded before lower priority elements
; 84   :         //
; 85   :         DVFSElement *pCurrent = m_pDVFSElementHead;

  0013c	e59d3014	 ldr         r3, [sp, #0x14]
  00140	e2833024	 add         r3, r3, #0x24
  00144	e5933000	 ldr         r3, [r3]
  00148	e58d3000	 str         r3, [sp]
  0014c		 |$LN10@InsertElem|

; 86   :         do
; 87   :             {
; 88   :             pCurrent = (DVFSElement*)pCurrent->Blink;

  0014c	e59d3000	 ldr         r3, [sp]
  00150	e2833004	 add         r3, r3, #4
  00154	e5933000	 ldr         r3, [r3]
  00158	e58d3000	 str         r3, [sp]

; 89   :             if (pCurrent->m_dwOrder < pElement->m_dwOrder) break;            

  0015c	e59d3000	 ldr         r3, [sp]
  00160	e2832008	 add         r2, r3, #8
  00164	e59d3018	 ldr         r3, [sp, #0x18]
  00168	e2833008	 add         r3, r3, #8
  0016c	e5922000	 ldr         r2, [r2]
  00170	e5933000	 ldr         r3, [r3]
  00174	e1520003	 cmp         r2, r3
  00178	2a000000	 bcs         |$LN7@InsertElem|
  0017c	ea000005	 b           |$LN8@InsertElem|
  00180		 |$LN7@InsertElem|

; 90   :             }
; 91   :             while (pCurrent != m_pDVFSElementHead);

  00180	e59d3014	 ldr         r3, [sp, #0x14]
  00184	e2833024	 add         r3, r3, #0x24
  00188	e59d2000	 ldr         r2, [sp]
  0018c	e5933000	 ldr         r3, [r3]
  00190	e1520003	 cmp         r2, r3
  00194	1affffec	 bne         |$LN10@InsertElem|
  00198		 |$LN8@InsertElem|

; 92   : 
; 93   :         // update head if necessary
; 94   :         if (pElement->m_dwOrder < m_pDVFSElementHead->m_dwOrder) 

  00198	e59d3018	 ldr         r3, [sp, #0x18]
  0019c	e2832008	 add         r2, r3, #8
  001a0	e59d3014	 ldr         r3, [sp, #0x14]
  001a4	e2833024	 add         r3, r3, #0x24
  001a8	e5933000	 ldr         r3, [r3]
  001ac	e2833008	 add         r3, r3, #8
  001b0	e5922000	 ldr         r2, [r2]
  001b4	e5933000	 ldr         r3, [r3]
  001b8	e1520003	 cmp         r2, r3
  001bc	2a00001a	 bcs         |$LN6@InsertElem|

; 95   :             {
; 96   : #pragma warning(push)
; 97   : #pragma warning(disable:4127)
; 98   :             InsertTailList(m_pDVFSElementHead, pElement);

  001c0	e59d3014	 ldr         r3, [sp, #0x14]
  001c4	e2833024	 add         r3, r3, #0x24
  001c8	e5933000	 ldr         r3, [r3]
  001cc	e58d3008	 str         r3, [sp, #8]
  001d0	e59d3008	 ldr         r3, [sp, #8]
  001d4	e2833004	 add         r3, r3, #4
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e58d3004	 str         r3, [sp, #4]
  001e0	e59d2008	 ldr         r2, [sp, #8]
  001e4	e59d3018	 ldr         r3, [sp, #0x18]
  001e8	e5832000	 str         r2, [r3]
  001ec	e59d3018	 ldr         r3, [sp, #0x18]
  001f0	e2832004	 add         r2, r3, #4
  001f4	e59d3004	 ldr         r3, [sp, #4]
  001f8	e5823000	 str         r3, [r2]
  001fc	e59d2018	 ldr         r2, [sp, #0x18]
  00200	e59d3004	 ldr         r3, [sp, #4]
  00204	e5832000	 str         r2, [r3]
  00208	e59d3008	 ldr         r3, [sp, #8]
  0020c	e2832004	 add         r2, r3, #4
  00210	e59d3018	 ldr         r3, [sp, #0x18]
  00214	e5823000	 str         r3, [r2]

; 99   : #pragma warning(pop)
; 100  : 
; 101  :             m_pDVFSElementHead = pElement;

  00218	e59d3014	 ldr         r3, [sp, #0x14]
  0021c	e2832024	 add         r2, r3, #0x24
  00220	e59d3018	 ldr         r3, [sp, #0x18]
  00224	e5823000	 str         r3, [r2]

; 102  :             }
; 103  :         else

  00228	ea000012	 b           |$LN2@InsertElem|
  0022c		 |$LN6@InsertElem|

; 104  :             {
; 105  :             // insert into list
; 106  :             InsertEntryList(pCurrent, pElement, pCurrent->Flink);

  0022c	e59d3000	 ldr         r3, [sp]
  00230	e5932000	 ldr         r2, [r3]
  00234	e59d3018	 ldr         r3, [sp, #0x18]
  00238	e5832000	 str         r2, [r3]
  0023c	e59d2018	 ldr         r2, [sp, #0x18]
  00240	e59d3000	 ldr         r3, [sp]
  00244	e5832000	 str         r2, [r3]
  00248	e59d3018	 ldr         r3, [sp, #0x18]
  0024c	e5933000	 ldr         r3, [r3]
  00250	e2831004	 add         r1, r3, #4
  00254	e59d3018	 ldr         r3, [sp, #0x18]
  00258	e2832004	 add         r2, r3, #4
  0025c	e5913000	 ldr         r3, [r1]
  00260	e5823000	 str         r3, [r2]
  00264	e59d3018	 ldr         r3, [sp, #0x18]
  00268	e5933000	 ldr         r3, [r3]
  0026c	e2832004	 add         r2, r3, #4
  00270	e59d3018	 ldr         r3, [sp, #0x18]
  00274	e5823000	 str         r3, [r2]
  00278		 |$LN2@InsertElem|

; 107  :             }
; 108  :         }
; 109  :     else

  00278	ea00000a	 b           |$LN1@InsertElem|
  0027c		 |$LN11@InsertElem|

; 110  :         {
; 111  :         InitializeListHead(pElement);

  0027c	e59d3018	 ldr         r3, [sp, #0x18]
  00280	e2832004	 add         r2, r3, #4
  00284	e59d3018	 ldr         r3, [sp, #0x18]
  00288	e5823000	 str         r3, [r2]
  0028c	e59d2018	 ldr         r2, [sp, #0x18]
  00290	e59d3018	 ldr         r3, [sp, #0x18]
  00294	e5832000	 str         r2, [r3]

; 112  :         m_pDVFSElementHead = pElement;

  00298	e59d3014	 ldr         r3, [sp, #0x14]
  0029c	e2832024	 add         r2, r3, #0x24
  002a0	e59d3018	 ldr         r3, [sp, #0x18]
  002a4	e5823000	 str         r3, [r2]
  002a8		 |$LN1@InsertElem|

; 113  :         }
; 114  : 
; 115  :     Unlock();

  002a8	e59d0014	 ldr         r0, [sp, #0x14]
  002ac	eb000000	 bl          |?Unlock@DVFSList@@IAAXXZ|

; 116  : }

  002b0	e28dd00c	 add         sp, sp, #0xC
  002b4	e89d6000	 ldmia       sp, {sp, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$M33083|

			 ENDP  ; |?InsertElementByOrder@DVFSList@@IAAXPAVDVFSElement@@@Z|, DVFSList::InsertElementByOrder

	IMPORT	|EnterCriticalSection|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.h

  00000			 AREA	 |.pdata|, PDATA
|$T33090| DCD	|$LN5@Lock|
	DCD	0x40000803
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Lock@DVFSList@@IAAXXZ| PROC		; DVFSList::Lock

; 93   :         {

  00000		 |$LN5@Lock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M33087|

; 94   :         ::EnterCriticalSection(&m_cs);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2830010	 add         r0, r3, #0x10
  00014	eb000000	 bl          EnterCriticalSection

; 95   :         }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M33088|

			 ENDP  ; |?Lock@DVFSList@@IAAXXZ|, DVFSList::Lock

	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T33097| DCD	|$LN5@Unlock|
	DCD	0x40000803
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?Unlock@DVFSList@@IAAXXZ| PROC	; DVFSList::Unlock

; 98   :         {

  00000		 |$LN5@Unlock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M33094|

; 99   :         ::LeaveCriticalSection(&m_cs);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2830010	 add         r0, r3, #0x10
  00014	eb000000	 bl          LeaveCriticalSection

; 100  :         }

  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M33095|

			 ENDP  ; |?Unlock@DVFSList@@IAAXXZ|, DVFSList::Unlock

	EXPORT	|??0DVFSElement@@QAA@PAVDeviceBase@@PAXKK@Z| ; DVFSElement::DVFSElement
	EXPORT	|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@FDFHKIMD@?$AAD?$AAV?$AAF?$AAS?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?InsertDevice@DVFSList@@UAAHPBGPAVDeviceBase@@PAUHKEY__@@@Z| ; DVFSList::InsertDevice
	IMPORT	|??2@YAPAXI@Z|				; operator new
	IMPORT	|CreateEventW|
	IMPORT	|wcslen|
	IMPORT	|RegQueryValueExW|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00018			 AREA	 |.pdata|, PDATA
|$T33120| DCD	|$LN17@InsertDevi|
	DCD	0xc0008404
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "A", 0x0, "s", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "O", 0x0, "r", 0x0, "d"
	DCB	0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@FDFHKIMD@?$AAD?$AAV?$AAF?$AAS?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "F", 0x0, "l", 0x0, "a"
	DCB	0x0, "g", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T33116| DCD	0xffffffa4
; Function compile flags: /Odtp

  002bc			 AREA	 |.text|, CODE, ARM

  002bc	00000000	 DCD         |__GSHandlerCheck|
  002c0	00000000	 DCD         |$T33116|

  002c4		 |?InsertDevice@DVFSList@@UAAHPBGPAVDeviceBase@@PAUHKEY__@@@Z| PROC ; DVFSList::InsertDevice

; 125  : {

  002c4		 |$LN17@InsertDevi|
  002c4	e1a0c00d	 mov         r12, sp
  002c8	e92d000f	 stmdb       sp!, {r0 - r3}
  002cc	e92d5000	 stmdb       sp!, {r12, lr}
  002d0	e24ddf9d	 sub         sp, sp, #0x9D, 30
  002d4		 |$M33117|
  002d4	e59f31f4	 ldr         r3, [pc, #0x1F4]
  002d8	e5933000	 ldr         r3, [r3]
  002dc	e58d3230	 str         r3, [sp, #0x230]

; 126  :     BOOL rc = FALSE;

  002e0	e3a03000	 mov         r3, #0
  002e4	e58d300c	 str         r3, [sp, #0xC]

; 127  :     
; 128  :     UNREFERENCED_PARAMETER(szDeviceName);
; 129  : 
; 130  :     // Get Notification flags
; 131  :     DWORD dwType = REG_DWORD;

  002e8	e3a03004	 mov         r3, #4
  002ec	e58d3008	 str         r3, [sp, #8]

; 132  :     DWORD ffDVFSNotificationType;
; 133  :     DWORD dwSize = sizeof(ffDVFSNotificationType);

  002f0	e3a03004	 mov         r3, #4
  002f4	e58d3010	 str         r3, [sp, #0x10]

; 134  :     if (::RegQueryValueEx(hKey, REGEDIT_DVFS_FLAGS, NULL, &dwType, 
; 135  :             (BYTE*)&ffDVFSNotificationType, &dwSize) != ERROR_SUCCESS)

  002f8	e28d3010	 add         r3, sp, #0x10
  002fc	e58d3004	 str         r3, [sp, #4]
  00300	e28d3f8a	 add         r3, sp, #0x8A, 30
  00304	e58d3000	 str         r3, [sp]
  00308	e28d3008	 add         r3, sp, #8
  0030c	e3a02000	 mov         r2, #0
  00310	e59f11b4	 ldr         r1, [pc, #0x1B4]
  00314	e59d0288	 ldr         r0, [sp, #0x288]
  00318	eb000000	 bl          RegQueryValueExW
  0031c	e58d0254	 str         r0, [sp, #0x254]
  00320	e59d3254	 ldr         r3, [sp, #0x254]
  00324	e3530000	 cmp         r3, #0
  00328	0a000001	 beq         |$LN10@InsertDevi|
  0032c	ea00005c	 b           |$LN9@InsertDevi|

; 136  :         {
; 137  :         goto cleanUp;

  00330	ea00005b	 b           |$cleanUp$32924|
  00334		 |$LN10@InsertDevi|

; 138  :         }
; 139  : 
; 140  :     // Get Notification Order
; 141  :     DWORD dwOrder;
; 142  :     dwType = REG_DWORD;

  00334	e3a03004	 mov         r3, #4
  00338	e58d3008	 str         r3, [sp, #8]

; 143  :     dwSize = sizeof(dwOrder);

  0033c	e3a03004	 mov         r3, #4
  00340	e58d3010	 str         r3, [sp, #0x10]

; 144  :     if (::RegQueryValueEx(hKey, REGEDIT_DVFS_ORDER, NULL, &dwType, 
; 145  :             (BYTE*)&dwOrder, &dwSize) != ERROR_SUCCESS)

  00344	e28d3010	 add         r3, sp, #0x10
  00348	e58d3004	 str         r3, [sp, #4]
  0034c	e28d3014	 add         r3, sp, #0x14
  00350	e58d3000	 str         r3, [sp]
  00354	e28d3008	 add         r3, sp, #8
  00358	e3a02000	 mov         r2, #0
  0035c	e59f1164	 ldr         r1, [pc, #0x164]
  00360	e59d0288	 ldr         r0, [sp, #0x288]
  00364	eb000000	 bl          RegQueryValueExW
  00368	e58d0258	 str         r0, [sp, #0x258]
  0036c	e59d3258	 ldr         r3, [sp, #0x258]
  00370	e3530000	 cmp         r3, #0
  00374	0a000001	 beq         |$LN8@InsertDevi|
  00378	ea000049	 b           |$LN7@InsertDevi|

; 146  :         {
; 147  :         goto cleanUp;

  0037c	ea000048	 b           |$cleanUp$32924|
  00380		 |$LN8@InsertDevi|

; 148  :         }
; 149  : 
; 150  :     // Get ansync event name
; 151  :     HANDLE hEvent = NULL;

  00380	e3a03000	 mov         r3, #0
  00384	e58d3018	 str         r3, [sp, #0x18]

; 152  :     _TCHAR szEventName[MAX_PATH];
; 153  :     dwType = REG_SZ;

  00388	e3a03001	 mov         r3, #1
  0038c	e58d3008	 str         r3, [sp, #8]

; 154  :     dwSize = sizeof(szEventName);

  00390	e3a03f82	 mov         r3, #0x82, 30
  00394	e58d3010	 str         r3, [sp, #0x10]

; 155  :     if (::RegQueryValueEx(hKey, REGEDIT_DVFS_ASYNCEVENT, NULL, &dwType,
; 156  :             (BYTE*)szEventName, &dwSize) == ERROR_SUCCESS)

  00398	e28d3010	 add         r3, sp, #0x10
  0039c	e58d3004	 str         r3, [sp, #4]
  003a0	e28d3020	 add         r3, sp, #0x20
  003a4	e58d3000	 str         r3, [sp]
  003a8	e28d3008	 add         r3, sp, #8
  003ac	e3a02000	 mov         r2, #0
  003b0	e59f110c	 ldr         r1, [pc, #0x10C]
  003b4	e59d0288	 ldr         r0, [sp, #0x288]
  003b8	eb000000	 bl          RegQueryValueExW
  003bc	e58d025c	 str         r0, [sp, #0x25C]
  003c0	e59d325c	 ldr         r3, [sp, #0x25C]
  003c4	e3530000	 cmp         r3, #0
  003c8	1a000012	 bne         |$LN6@InsertDevi|

; 157  :         {
; 158  :         if (_tcslen(szEventName) > 0)

  003cc	e28d0020	 add         r0, sp, #0x20
  003d0	eb000000	 bl          wcslen
  003d4	e58d0260	 str         r0, [sp, #0x260]
  003d8	e59d3260	 ldr         r3, [sp, #0x260]
  003dc	e3530000	 cmp         r3, #0
  003e0	9a00000c	 bls         |$LN5@InsertDevi|

; 159  :             {
; 160  :             hEvent = CreateEvent(NULL, TRUE, FALSE, szEventName);

  003e4	e28d3020	 add         r3, sp, #0x20
  003e8	e3a02000	 mov         r2, #0
  003ec	e3a01001	 mov         r1, #1
  003f0	e3a00000	 mov         r0, #0
  003f4	eb000000	 bl          CreateEventW
  003f8	e58d0264	 str         r0, [sp, #0x264]
  003fc	e59d3264	 ldr         r3, [sp, #0x264]
  00400	e58d3018	 str         r3, [sp, #0x18]

; 161  :             if (hEvent == NULL)

  00404	e59d3018	 ldr         r3, [sp, #0x18]
  00408	e3530000	 cmp         r3, #0
  0040c	1a000001	 bne         |$LN4@InsertDevi|
  00410	ea000023	 b           |$LN3@InsertDevi|

; 162  :                 {
; 163  :                 goto cleanUp;

  00414	ea000022	 b           |$cleanUp$32924|
  00418		 |$LN4@InsertDevi|
  00418		 |$LN5@InsertDevi|
  00418		 |$LN6@InsertDevi|

; 164  :                 }
; 165  :             }
; 166  :         }
; 167  : 
; 168  :     // create DVFS Element
; 169  :     DVFSElement *pElement = new DVFSElement(pDevice, hEvent, dwOrder, ffDVFSNotificationType);

  00418	e3a00018	 mov         r0, #0x18
  0041c	eb000000	 bl          |??2@YAPAXI@Z|
  00420	e58d0268	 str         r0, [sp, #0x268]
  00424	e59d3268	 ldr         r3, [sp, #0x268]
  00428	e58d322c	 str         r3, [sp, #0x22C]
  0042c	e59d322c	 ldr         r3, [sp, #0x22C]
  00430	e3530000	 cmp         r3, #0
  00434	0a00000a	 beq         |$LN13@InsertDevi|
  00438	e59d3228	 ldr         r3, [sp, #0x228]
  0043c	e58d3000	 str         r3, [sp]
  00440	e59d3014	 ldr         r3, [sp, #0x14]
  00444	e59d2018	 ldr         r2, [sp, #0x18]
  00448	e59d1284	 ldr         r1, [sp, #0x284]
  0044c	e59d022c	 ldr         r0, [sp, #0x22C]
  00450	eb000000	 bl          |??0DVFSElement@@QAA@PAVDeviceBase@@PAXKK@Z|
  00454	e58d026c	 str         r0, [sp, #0x26C]
  00458	e59d326c	 ldr         r3, [sp, #0x26C]
  0045c	e58d3270	 str         r3, [sp, #0x270]
  00460	ea000001	 b           |$LN14@InsertDevi|
  00464		 |$LN13@InsertDevi|
  00464	e3a03000	 mov         r3, #0
  00468	e58d3270	 str         r3, [sp, #0x270]
  0046c		 |$LN14@InsertDevi|
  0046c	e59d3270	 ldr         r3, [sp, #0x270]
  00470	e58d301c	 str         r3, [sp, #0x1C]

; 170  :     if (pElement == NULL)

  00474	e59d301c	 ldr         r3, [sp, #0x1C]
  00478	e3530000	 cmp         r3, #0
  0047c	1a000003	 bne         |$LN2@InsertDevi|

; 171  :         {
; 172  :         CloseHandle(hEvent);

  00480	e59d0018	 ldr         r0, [sp, #0x18]
  00484	eb000000	 bl          CloseHandle
  00488	ea000005	 b           |$LN1@InsertDevi|

; 173  :         goto cleanUp;

  0048c	ea000004	 b           |$cleanUp$32924|
  00490		 |$LN2@InsertDevi|

; 174  :         }
; 175  :         
; 176  :     // add it to list
; 177  :     InsertElementByOrder(pElement);

  00490	e59d101c	 ldr         r1, [sp, #0x1C]
  00494	e59d027c	 ldr         r0, [sp, #0x27C]
  00498	eb000000	 bl          |?InsertElementByOrder@DVFSList@@IAAXPAVDVFSElement@@@Z|

; 178  : 
; 179  :     rc = TRUE;

  0049c	e3a03001	 mov         r3, #1
  004a0	e58d300c	 str         r3, [sp, #0xC]
  004a4		 |$LN1@InsertDevi|
  004a4		 |$LN3@InsertDevi|
  004a4		 |$LN7@InsertDevi|
  004a4		 |$LN9@InsertDevi|
  004a4		 |$cleanUp$32924|

; 180  : 
; 181  : cleanUp:
; 182  :     return rc;    

  004a4	e59d0230	 ldr         r0, [sp, #0x230]
  004a8	eb000000	 bl          __security_check_cookie
  004ac	e59d300c	 ldr         r3, [sp, #0xC]
  004b0	e58d3250	 str         r3, [sp, #0x250]

; 183  : }

  004b4	e59d0250	 ldr         r0, [sp, #0x250]
  004b8	e28ddf9d	 add         sp, sp, #0x9D, 30
  004bc	e89d6000	 ldmia       sp, {sp, lr}
  004c0	e12fff1e	 bx          lr
  004c4		 |$LN18@InsertDevi|
  004c4		 |$LN19@InsertDevi|
  004c4	00000000	 DCD         |??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
  004c8		 |$LN20@InsertDevi|
  004c8	00000000	 DCD         |??_C@_1BE@EKANOLAD@?$AAD?$AAV?$AAF?$AAS?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@|
  004cc		 |$LN21@InsertDevi|
  004cc	00000000	 DCD         |??_C@_1BE@FDFHKIMD@?$AAD?$AAV?$AAF?$AAS?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?$AA@|
  004d0		 |$LN22@InsertDevi|
  004d0	00000000	 DCD         |__security_cookie|
  004d4		 |$M33118|

			 ENDP  ; |?InsertDevice@DVFSList@@UAAHPBGPAVDeviceBase@@PAUHKEY__@@@Z|, DVFSList::InsertDevice

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.h

  00000			 AREA	 |.pdata|, PDATA
|$T33131| DCD	|$LN5@DVFSElemen|
	DCD	0x40001a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0DVFSElement@@QAA@PAVDeviceBase@@PAXKK@Z| PROC ; DVFSElement::DVFSElement

; 50   :         {        

  00000		 |$LN5@DVFSElemen|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M33128|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2832008	 add         r2, r3, #8
  00018	e59d3018	 ldr         r3, [sp, #0x18]
  0001c	e5823000	 str         r3, [r2]
  00020	e59d300c	 ldr         r3, [sp, #0xC]
  00024	e283200c	 add         r2, r3, #0xC
  00028	e59d3014	 ldr         r3, [sp, #0x14]
  0002c	e5823000	 str         r3, [r2]
  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e2832010	 add         r2, r3, #0x10
  00038	e59d301c	 ldr         r3, [sp, #0x1C]
  0003c	e5823000	 str         r3, [r2]
  00040	e59d300c	 ldr         r3, [sp, #0xC]
  00044	e2832014	 add         r2, r3, #0x14
  00048	e59d3010	 ldr         r3, [sp, #0x10]
  0004c	e5823000	 str         r3, [r2]

; 51   :         }

  00050	e59d300c	 ldr         r3, [sp, #0xC]
  00054	e58d3000	 str         r3, [sp]
  00058	e59d0000	 ldr         r0, [sp]
  0005c	e28dd004	 add         sp, sp, #4
  00060	e89d6000	 ldmia       sp, {sp, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$M33129|

			 ENDP  ; |??0DVFSElement@@QAA@PAVDeviceBase@@PAXKK@Z|, DVFSElement::DVFSElement

	EXPORT	|?RemoveDevice@DVFSList@@UAAHPBGPAVDeviceBase@@@Z| ; DVFSList::RemoveDevice

  00020			 AREA	 |.pdata|, PDATA
|$T33140| DCD	|$LN17@RemoveDevi|
	DCD	0x40005f04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\devicemediator\dvfslist.cpp

  004d4			 AREA	 |.text|, CODE, ARM

  004d4		 |?RemoveDevice@DVFSList@@UAAHPBGPAVDeviceBase@@@Z| PROC ; DVFSList::RemoveDevice

; 191  : {   

  004d4		 |$LN17@RemoveDevi|
  004d4	e1a0c00d	 mov         r12, sp
  004d8	e92d0007	 stmdb       sp!, {r0 - r2}
  004dc	e92d5000	 stmdb       sp!, {r12, lr}
  004e0	e24dd018	 sub         sp, sp, #0x18
  004e4		 |$M33137|

; 192  :     BOOL rc = TRUE;

  004e4	e3a03001	 mov         r3, #1
  004e8	e58d3000	 str         r3, [sp]

; 193  :     DVFSElement *pRemove = NULL;

  004ec	e3a03000	 mov         r3, #0
  004f0	e58d3004	 str         r3, [sp, #4]

; 194  :     DVFSElement *pCurrent = m_pDVFSElementHead;

  004f4	e59d3020	 ldr         r3, [sp, #0x20]
  004f8	e2833024	 add         r3, r3, #0x24
  004fc	e5933000	 ldr         r3, [r3]
  00500	e58d3008	 str         r3, [sp, #8]

; 195  : 
; 196  :     UNREFERENCED_PARAMETER(szDeviceName);
; 197  :     
; 198  :     Lock();

  00504	e59d0020	 ldr         r0, [sp, #0x20]
  00508	eb000000	 bl          |?Lock@DVFSList@@IAAXXZ|
  0050c		 |$LN12@RemoveDevi|

; 199  :     
; 200  :     // iterate through list and find element to remove
; 201  :     //
; 202  :     do
; 203  :         {
; 204  :         pCurrent = (DVFSElement*)pCurrent->Blink;

  0050c	e59d3008	 ldr         r3, [sp, #8]
  00510	e2833004	 add         r3, r3, #4
  00514	e5933000	 ldr         r3, [r3]
  00518	e58d3008	 str         r3, [sp, #8]

; 205  :         if (pCurrent->m_pDevice == pDevice)

  0051c	e59d3008	 ldr         r3, [sp, #8]
  00520	e2833014	 add         r3, r3, #0x14
  00524	e5932000	 ldr         r2, [r3]
  00528	e59d3028	 ldr         r3, [sp, #0x28]
  0052c	e1520003	 cmp         r2, r3
  00530	1a000002	 bne         |$LN9@RemoveDevi|

; 206  :             {
; 207  :             pRemove = pCurrent;

  00534	e59d3008	 ldr         r3, [sp, #8]
  00538	e58d3004	 str         r3, [sp, #4]

; 208  :             break;

  0053c	ea000005	 b           |$LN10@RemoveDevi|
  00540		 |$LN9@RemoveDevi|

; 209  :             }
; 210  :         }
; 211  :         while (pCurrent != m_pDVFSElementHead);

  00540	e59d3020	 ldr         r3, [sp, #0x20]
  00544	e2833024	 add         r3, r3, #0x24
  00548	e59d2008	 ldr         r2, [sp, #8]
  0054c	e5933000	 ldr         r3, [r3]
  00550	e1520003	 cmp         r2, r3
  00554	1affffec	 bne         |$LN12@RemoveDevi|
  00558		 |$LN10@RemoveDevi|

; 212  : 
; 213  :     // check for head ptr
; 214  :     //
; 215  :     if (pRemove == m_pDVFSElementHead)

  00558	e59d3020	 ldr         r3, [sp, #0x20]
  0055c	e2833024	 add         r3, r3, #0x24
  00560	e59d2004	 ldr         r2, [sp, #4]
  00564	e5933000	 ldr         r3, [r3]
  00568	e1520003	 cmp         r2, r3
  0056c	1a00000e	 bne         |$LN8@RemoveDevi|

; 216  :         {
; 217  :         if (pRemove->Flink == pRemove)

  00570	e59d3004	 ldr         r3, [sp, #4]
  00574	e5932000	 ldr         r2, [r3]
  00578	e59d3004	 ldr         r3, [sp, #4]
  0057c	e1520003	 cmp         r2, r3
  00580	1a000004	 bne         |$LN7@RemoveDevi|

; 218  :             {
; 219  :             // previously only 1 element in the list.
; 220  :             m_pDVFSElementHead = NULL;

  00584	e59d3020	 ldr         r3, [sp, #0x20]
  00588	e2832024	 add         r2, r3, #0x24
  0058c	e3a03000	 mov         r3, #0
  00590	e5823000	 str         r3, [r2]

; 221  :             }
; 222  :         else

  00594	ea000004	 b           |$LN6@RemoveDevi|
  00598		 |$LN7@RemoveDevi|

; 223  :             {
; 224  :             m_pDVFSElementHead = (DVFSElement*)pRemove->Flink;

  00598	e59d3020	 ldr         r3, [sp, #0x20]
  0059c	e2832024	 add         r2, r3, #0x24
  005a0	e59d3004	 ldr         r3, [sp, #4]
  005a4	e5933000	 ldr         r3, [r3]
  005a8	e5823000	 str         r3, [r2]
  005ac		 |$LN6@RemoveDevi|
  005ac		 |$LN8@RemoveDevi|

; 225  :             }
; 226  :         }
; 227  : 
; 228  :     // free all allocated resources
; 229  :     if (pRemove != NULL)

  005ac	e59d3004	 ldr         r3, [sp, #4]
  005b0	e3530000	 cmp         r3, #0
  005b4	0a00001d	 beq         |$LN5@RemoveDevi|

; 230  :         {
; 231  : #pragma warning(push)
; 232  : #pragma warning(disable:4127)
; 233  :         RemoveEntryList(pRemove);

  005b8	e59d3004	 ldr         r3, [sp, #4]
  005bc	e58d300c	 str         r3, [sp, #0xC]
  005c0	e59d300c	 ldr         r3, [sp, #0xC]
  005c4	e2833004	 add         r3, r3, #4
  005c8	e5932000	 ldr         r2, [r3]
  005cc	e59d300c	 ldr         r3, [sp, #0xC]
  005d0	e5933000	 ldr         r3, [r3]
  005d4	e5823000	 str         r3, [r2]
  005d8	e59d300c	 ldr         r3, [sp, #0xC]
  005dc	e2831004	 add         r1, r3, #4
  005e0	e59d300c	 ldr         r3, [sp, #0xC]
  005e4	e5933000	 ldr         r3, [r3]
  005e8	e2832004	 add         r2, r3, #4
  005ec	e5913000	 ldr         r3, [r1]
  005f0	e5823000	 str         r3, [r2]

; 234  : #pragma warning(pop)
; 235  :         if (pRemove->m_AsyncEvent != NULL) ::CloseHandle(pRemove->m_AsyncEvent);

  005f4	e59d3004	 ldr         r3, [sp, #4]
  005f8	e283300c	 add         r3, r3, #0xC
  005fc	e5933000	 ldr         r3, [r3]
  00600	e3530000	 cmp         r3, #0
  00604	0a000003	 beq         |$LN1@RemoveDevi|
  00608	e59d3004	 ldr         r3, [sp, #4]
  0060c	e283300c	 add         r3, r3, #0xC
  00610	e5930000	 ldr         r0, [r3]
  00614	eb000000	 bl          CloseHandle
  00618		 |$LN1@RemoveDevi|

; 236  :         delete pRemove;

  00618	e59d3004	 ldr         r3, [sp, #4]
  0061c	e58d3010	 str         r3, [sp, #0x10]
  00620	e59d0010	 ldr         r0, [sp, #0x10]
  00624	eb000000	 bl          |??3@YAXPAX@Z|

; 237  :         rc = TRUE;

  00628	e3a03001	 mov         r3, #1
  0062c	e58d3000	 str         r3, [sp]
  00630		 |$LN5@RemoveDevi|

; 238  :         }
; 239  : 
; 240  :     Unlock();

  00630	e59d0020	 ldr         r0, [sp, #0x20]
  00634	eb000000	 bl          |?Unlock@DVFSList@@IAAXXZ|

; 241  :     return rc;

  00638	e59d3000	 ldr         r3, [sp]
  0063c	e58d3014	 str         r3, [sp, #0x14]

; 242  : }

  00640	e59d0014	 ldr         r0, [sp, #0x14]
  00644	e28dd018	 add         sp, sp, #0x18
  00648	e89d6000	 ldmia       sp, {sp, lr}
  0064c	e12fff1e	 bx          lr
  00650		 |$M33138|

			 ENDP  ; |?RemoveDevice@DVFSList@@UAAHPBGPAVDeviceBase@@@Z|, DVFSList::RemoveDevice

	EXPORT	|?WaitForAcknowledgements@DVFSList@@IAAHPAPAXI@Z| ; DVFSList::WaitForAcknowledgements
	IMPORT	|GetEventData|
	IMPORT	|WaitForMultipleObjects|

  00028			 AREA	 |.pdata|, PDATA
|$T33146| DCD	|$LN15@WaitForAck|
	DCD	0x40004d04
; Function compile flags: /Odtp

  00650			 AREA	 |.text|, CODE, ARM

  00650		 |?WaitForAcknowledgements@DVFSList@@IAAHPAPAXI@Z| PROC ; DVFSList::WaitForAcknowledgements

; 247  : {

  00650		 |$LN15@WaitForAck|
  00650	e1a0c00d	 mov         r12, sp
  00654	e92d0007	 stmdb       sp!, {r0 - r2}
  00658	e92d5000	 stmdb       sp!, {r12, lr}
  0065c	e24dd018	 sub         sp, sp, #0x18
  00660		 |$M33143|

; 248  :     UINT idx;
; 249  :     DWORD code;
; 250  :     BOOL rc = TRUE;

  00660	e3a03001	 mov         r3, #1
  00664	e58d3000	 str         r3, [sp]

; 251  : 
; 252  :     Lock();

  00668	e59d0020	 ldr         r0, [sp, #0x20]
  0066c	eb000000	 bl          |?Lock@DVFSList@@IAAXXZ|
  00670		 |$LN10@WaitForAck|

; 253  :     
; 254  :     // wait for all events to get signaled
; 255  :     while (rc != DVFS_FAIL_TRANSITION && (count > 0))

  00670	e59d3000	 ldr         r3, [sp]
  00674	e3730001	 cmn         r3, #1
  00678	0a000039	 beq         |$LN9@WaitForAck|
  0067c	e59d3028	 ldr         r3, [sp, #0x28]
  00680	e3530000	 cmp         r3, #0
  00684	9a000036	 bls         |$LN9@WaitForAck|

; 256  :         {
; 257  :         code = ::WaitForMultipleObjects(count, rgEvents, 0, MAX_ASYNC_TIMEOUT);

  00688	e3a03064	 mov         r3, #0x64
  0068c	e3a02000	 mov         r2, #0
  00690	e59d1024	 ldr         r1, [sp, #0x24]
  00694	e59d0028	 ldr         r0, [sp, #0x28]
  00698	eb000000	 bl          WaitForMultipleObjects
  0069c	e58d0010	 str         r0, [sp, #0x10]
  006a0	e59d3010	 ldr         r3, [sp, #0x10]
  006a4	e58d3004	 str         r3, [sp, #4]

; 258  :         switch (code)

  006a8	e59d2004	 ldr         r2, [sp, #4]
  006ac	e3a03c01	 mov         r3, #1, 24
  006b0	e3833002	 orr         r3, r3, #2
  006b4	e1520003	 cmp         r2, r3
  006b8	0a000000	 beq         |$LN6@WaitForAck|
  006bc	ea000003	 b           |$LN4@WaitForAck|
  006c0		 |$LN6@WaitForAck|

; 259  :             {
; 260  :             case WAIT_TIMEOUT:
; 261  :                 rc = FALSE;

  006c0	e3a03000	 mov         r3, #0
  006c4	e58d3000	 str         r3, [sp]
  006c8	ea000025	 b           |$LN5@WaitForAck|

; 262  :                 goto cleanUp;

  006cc	ea000024	 b           |$cleanUp$32985|
  006d0		 |$LN4@WaitForAck|

; 263  : 
; 264  :             default:
; 265  :                 // find which event got signaled
; 266  :                 //
; 267  :                 idx = code - WAIT_OBJECT_0;

  006d0	e59d3004	 ldr         r3, [sp, #4]
  006d4	e58d3008	 str         r3, [sp, #8]

; 268  : 
; 269  :                 // check if successful 
; 270  :                 if (GetEventData(rgEvents[idx]) == DVFS_FAIL_TRANSITION)

  006d8	e59d1008	 ldr         r1, [sp, #8]
  006dc	e3a03004	 mov         r3, #4
  006e0	e0020391	 mul         r2, r1, r3
  006e4	e59d3024	 ldr         r3, [sp, #0x24]
  006e8	e0833002	 add         r3, r3, r2
  006ec	e5930000	 ldr         r0, [r3]
  006f0	eb000000	 bl          GetEventData
  006f4	e58d0014	 str         r0, [sp, #0x14]
  006f8	e59d3014	 ldr         r3, [sp, #0x14]
  006fc	e3730001	 cmn         r3, #1
  00700	1a000003	 bne         |$LN3@WaitForAck|

; 271  :                     {
; 272  :                     rc = FALSE;

  00704	e3a03000	 mov         r3, #0
  00708	e58d3000	 str         r3, [sp]
  0070c	ea000014	 b           |$LN2@WaitForAck|

; 273  :                     goto cleanUp;

  00710	ea000013	 b           |$cleanUp$32985|
  00714		 |$LN3@WaitForAck|

; 274  :                     }
; 275  : 
; 276  :                 --count;

  00714	e59d3028	 ldr         r3, [sp, #0x28]
  00718	e2433001	 sub         r3, r3, #1
  0071c	e58d3028	 str         r3, [sp, #0x28]

; 277  :                 if (idx < count)

  00720	e59d2008	 ldr         r2, [sp, #8]
  00724	e59d3028	 ldr         r3, [sp, #0x28]
  00728	e1520003	 cmp         r2, r3
  0072c	2a00000b	 bcs         |$LN1@WaitForAck|

; 278  :                     {
; 279  :                     // replace signaled event with the one in the back
; 280  :                     rgEvents[idx] = rgEvents[count];

  00730	e59d1028	 ldr         r1, [sp, #0x28]
  00734	e3a03004	 mov         r3, #4
  00738	e0020391	 mul         r2, r1, r3
  0073c	e59d3024	 ldr         r3, [sp, #0x24]
  00740	e0830002	 add         r0, r3, r2
  00744	e59d1008	 ldr         r1, [sp, #8]
  00748	e3a03004	 mov         r3, #4
  0074c	e0020391	 mul         r2, r1, r3
  00750	e59d3024	 ldr         r3, [sp, #0x24]
  00754	e0832002	 add         r2, r3, r2
  00758	e5903000	 ldr         r3, [r0]
  0075c	e5823000	 str         r3, [r2]
  00760		 |$LN1@WaitForAck|

; 281  :                     }
; 282  :                 break;
; 283  :             }
; 284  :         }    

  00760	eaffffc2	 b           |$LN10@WaitForAck|
  00764		 |$LN9@WaitForAck|
  00764		 |$LN2@WaitForAck|
  00764		 |$LN5@WaitForAck|
  00764		 |$cleanUp$32985|

; 285  : 
; 286  : cleanUp:
; 287  :     Unlock();

  00764	e59d0020	 ldr         r0, [sp, #0x20]
  00768	eb000000	 bl          |?Unlock@DVFSList@@IAAXXZ|

; 288  :     return rc;

  0076c	e59d3000	 ldr         r3, [sp]
  00770	e58d300c	 str         r3, [sp, #0xC]

; 289  : }

  00774	e59d000c	 ldr         r0, [sp, #0xC]
  00778	e28dd018	 add         sp, sp, #0x18
  0077c	e89d6000	 ldmia       sp, {sp, lr}
  00780	e12fff1e	 bx          lr
  00784		 |$M33144|

			 ENDP  ; |?WaitForAcknowledgements@DVFSList@@IAAHPAPAXI@Z|, DVFSList::WaitForAcknowledgements

	EXPORT	|ResetEvent|
	EXPORT	|?SendIoControl@DVFSList@@UAAHKKPAXK0KPAK@Z| ; DVFSList::SendIoControl
	IMPORT	|SetEventData|
	IMPORT	|__C_specific_handler|

  00030			 AREA	 |.pdata|, PDATA
|$T33177| DCD	|$LN39@SendIoCont|
	DCD	0xc000af06
|$T33179| DCD	|$LN28@SendIoCont|
	DCD	0x40000502
|$T33181| DCD	|$LN21@SendIoCont|
	DCD	0x40000602

  00004			 AREA	 |.xdata|, DATA
|$T33175| DCD	0x2
	DCD	|$LN32@SendIoCont|
	DCD	|$LN33@SendIoCont|
	DCD	|$LN28@SendIoCont|
	DCD	|$LN29@SendIoCont|
	DCD	|$LN25@SendIoCont|
	DCD	|$LN26@SendIoCont|
	DCD	|$LN21@SendIoCont|
	DCD	|$LN22@SendIoCont|
; Function compile flags: /Odtp

  00784			 AREA	 |.text|, CODE, ARM

  00784	00000000	 DCD         |__C_specific_handler|
  00788	00000000	 DCD         |$T33175|

  0078c		 |?SendIoControl@DVFSList@@UAAHKKPAXK0KPAK@Z| PROC ; DVFSList::SendIoControl

; 302  : { 

  0078c		 |$LN39@SendIoCont|
  0078c	e1a0c00d	 mov         r12, sp
  00790	e92d000f	 stmdb       sp!, {r0 - r3}
  00794	e92d5810	 stmdb       sp!, {r4, r11, r12, lr}
  00798	e28db010	 add         r11, sp, #0x10
  0079c	e59fc2cc	 ldr         r12, [pc, #0x2CC]
  007a0	e08dd00c	 add         sp, sp, r12
  007a4		 |$LN37@SendIoCont|

; 303  :     BOOL rc = TRUE;

  007a4	e3a03001	 mov         r3, #1
  007a8	e50b343c	 str         r3, [r11, #-0x43C]

; 304  :     DWORD nEvents = 0;

  007ac	e3a03000	 mov         r3, #0
  007b0	e50b3440	 str         r3, [r11, #-0x440]

; 305  :     DVFSElement *pElement;
; 306  :     HANDLE rgEvents[DVFS_MAX_ASYNC_EVENTS];
; 307  :     
; 308  :     if (m_pDVFSElementHead == NULL) return rc;

  007b4	e59b3000	 ldr         r3, [r11]
  007b8	e2833024	 add         r3, r3, #0x24
  007bc	e5933000	 ldr         r3, [r3]
  007c0	e3530000	 cmp         r3, #0
  007c4	1a000002	 bne         |$LN17@SendIoCont|
  007c8	e51b343c	 ldr         r3, [r11, #-0x43C]
  007cc	e50b3034	 str         r3, [r11, #-0x34]
  007d0	ea000098	 b           |$LN18@SendIoCont|
  007d4		 |$LN17@SendIoCont|

; 309  : 
; 310  :     Lock();

  007d4	e59b0000	 ldr         r0, [r11]
  007d8	eb000000	 bl          |?Lock@DVFSList@@IAAXXZ|

; 311  :          
; 312  :     // iterate through all the objects and send notifications
; 313  :     // to all DVFS listeners
; 314  :     pElement = m_pDVFSElementHead;

  007dc	e59b3000	 ldr         r3, [r11]
  007e0	e2833024	 add         r3, r3, #0x24
  007e4	e5933000	 ldr         r3, [r3]
  007e8	e50b3038	 str         r3, [r11, #-0x38]

; 315  :     if (dwParam & (DVFS_CORE1_PRE_NOTICE | DVFS_MPU1_PRE_NOTICE))

  007ec	e59b3004	 ldr         r3, [r11, #4]
  007f0	e3130011	 tst         r3, #0x11
  007f4	0a00005f	 beq         |$LN16@SendIoCont|

; 316  :         {
; 317  :         // mask out post notifications
; 318  :         dwParam &= (DVFS_CORE1_PRE_NOTICE | DVFS_MPU1_PRE_NOTICE);

  007f8	e59b3004	 ldr         r3, [r11, #4]
  007fc	e2033011	 and         r3, r3, #0x11
  00800	e58b3004	 str         r3, [r11, #4]
  00804		 |$LN25@SendIoCont|
  00804		 |$LN14@SendIoCont|

; 319  : 
; 320  :         // loop within exception handler so we handle failures gracefully
; 321  :         _try 
; 322  :             {   
; 323  :             do
; 324  :                 {
; 325  :                 // check if a notification should be sent for this element
; 326  :                 if (pElement->m_ffDVFSNotificationType & dwParam)

  00804	e51b3038	 ldr         r3, [r11, #-0x38]
  00808	e2833010	 add         r3, r3, #0x10
  0080c	e5932000	 ldr         r2, [r3]
  00810	e59b3004	 ldr         r3, [r11, #4]
  00814	e1120003	 tst         r2, r3
  00818	0a00003a	 beq         |$LN11@SendIoCont|

; 327  :                     {
; 328  :                     // save off async events
; 329  :                     if (pElement->m_AsyncEvent != NULL)

  0081c	e51b3038	 ldr         r3, [r11, #-0x38]
  00820	e283300c	 add         r3, r3, #0xC
  00824	e5933000	 ldr         r3, [r3]
  00828	e3530000	 cmp         r3, #0
  0082c	0a000016	 beq         |$LN10@SendIoCont|

; 330  :                         {
; 331  :                         ::SetEventData(pElement->m_AsyncEvent, DVFS_RESET_TRANSITION);

  00830	e3a01000	 mov         r1, #0
  00834	e51b3038	 ldr         r3, [r11, #-0x38]
  00838	e283300c	 add         r3, r3, #0xC
  0083c	e5930000	 ldr         r0, [r3]
  00840	eb000000	 bl          SetEventData

; 332  :                         ::ResetEvent(pElement->m_AsyncEvent);

  00844	e51b3038	 ldr         r3, [r11, #-0x38]
  00848	e283300c	 add         r3, r3, #0xC
  0084c	e5930000	 ldr         r0, [r3]
  00850	eb000000	 bl          ResetEvent

; 333  :                         rgEvents[nEvents] = pElement->m_AsyncEvent;

  00854	e51b3038	 ldr         r3, [r11, #-0x38]
  00858	e283000c	 add         r0, r3, #0xC
  0085c	e51b1440	 ldr         r1, [r11, #-0x440]
  00860	e3a03004	 mov         r3, #4
  00864	e0020391	 mul         r2, r1, r3
  00868	e3e03086	 mvn         r3, #0x86
  0086c	e1a03183	 mov         r3, r3, lsl #3
  00870	e08b3003	 add         r3, r11, r3
  00874	e0832002	 add         r2, r3, r2
  00878	e5903000	 ldr         r3, [r0]
  0087c	e5823000	 str         r3, [r2]

; 334  :                         ++nEvents;

  00880	e51b3440	 ldr         r3, [r11, #-0x440]
  00884	e2833001	 add         r3, r3, #1
  00888	e50b3440	 str         r3, [r11, #-0x440]
  0088c		 |$LN10@SendIoCont|

; 335  :                         }
; 336  : 
; 337  :                     // Send IOCTL to device
; 338  :                     rc = pElement->m_pDevice->SendIoControl(dwIoControlCode, lpInBuf, 
; 339  :                                 nInBufSize, lpOutBuf, nOutBufSize, lpBytesReturned
; 340  :                                 );

  0088c	e59b301c	 ldr         r3, [r11, #0x1C]
  00890	e58d3008	 str         r3, [sp, #8]
  00894	e59b3018	 ldr         r3, [r11, #0x18]
  00898	e58d3004	 str         r3, [sp, #4]
  0089c	e59b3014	 ldr         r3, [r11, #0x14]
  008a0	e58d3000	 str         r3, [sp]
  008a4	e59b3010	 ldr         r3, [r11, #0x10]
  008a8	e59b200c	 ldr         r2, [r11, #0xC]
  008ac	e59b1008	 ldr         r1, [r11, #8]
  008b0	e51b0038	 ldr         r0, [r11, #-0x38]
  008b4	e2800014	 add         r0, r0, #0x14
  008b8	e590e000	 ldr         lr, [r0]
  008bc	e51b0038	 ldr         r0, [r11, #-0x38]
  008c0	e2800014	 add         r0, r0, #0x14
  008c4	e5904000	 ldr         r4, [r0]
  008c8	e59e0000	 ldr         r0, [lr]
  008cc	e280e00c	 add         lr, r0, #0xC
  008d0	e1a00004	 mov         r0, r4
  008d4	e59e4000	 ldr         r4, [lr]
  008d8	e1a0e00f	 mov         lr, pc
  008dc	e12fff14	 bx          r4
  008e0	e50b0018	 str         r0, [r11, #-0x18]
  008e4	e51b3018	 ldr         r3, [r11, #-0x18]
  008e8	e50b343c	 str         r3, [r11, #-0x43C]

; 341  : 
; 342  :                     if (rc == FALSE || rc == DVFS_FAIL_TRANSITION) break;                

  008ec	e51b343c	 ldr         r3, [r11, #-0x43C]
  008f0	e3530000	 cmp         r3, #0
  008f4	0a000002	 beq         |$LN8@SendIoCont|
  008f8	e51b343c	 ldr         r3, [r11, #-0x43C]
  008fc	e3730001	 cmn         r3, #1
  00900	1a000000	 bne         |$LN9@SendIoCont|
  00904		 |$LN8@SendIoCont|
  00904	ea000008	 b           |$LN12@SendIoCont|
  00908		 |$LN9@SendIoCont|
  00908		 |$LN11@SendIoCont|

; 343  :                     }
; 344  : 
; 345  :                 // next element
; 346  :                 pElement = (DVFSElement*)pElement->Flink;

  00908	e51b3038	 ldr         r3, [r11, #-0x38]
  0090c	e5933000	 ldr         r3, [r3]
  00910	e50b3038	 str         r3, [r11, #-0x38]

; 347  :                 }
; 348  :                 while (pElement != m_pDVFSElementHead);

  00914	e59b3000	 ldr         r3, [r11]
  00918	e2833024	 add         r3, r3, #0x24
  0091c	e51b2038	 ldr         r2, [r11, #-0x38]
  00920	e5933000	 ldr         r3, [r3]
  00924	e1520003	 cmp         r2, r3
  00928	1affffb5	 bne         |$LN14@SendIoCont|
  0092c		 |$LN12@SendIoCont|
  0092c		 |$LN26@SendIoCont|

; 349  :             }

  0092c	ea000002	 b           |$LN27@SendIoCont|
  00930		 |$LN22@SendIoCont|

; 351  :             {
; 352  :             rc = FALSE;

  00930	e3a03000	 mov         r3, #0
  00934	e50b343c	 str         r3, [r11, #-0x43C]
  00938	eaffffff	 b           |$LN27@SendIoCont|
  0093c		 |$LN27@SendIoCont|

; 353  :             }
; 354  : 
; 355  :         // if successful so far wait for all async events
; 356  :         if (rc != FALSE && nEvents > 0)

  0093c	e51b343c	 ldr         r3, [r11, #-0x43C]
  00940	e3530000	 cmp         r3, #0
  00944	0a00000b	 beq         |$LN7@SendIoCont|
  00948	e51b3440	 ldr         r3, [r11, #-0x440]
  0094c	e3530000	 cmp         r3, #0
  00950	9a000008	 bls         |$LN7@SendIoCont|

; 357  :             {
; 358  :             // wait for all async objects to signal
; 359  :             rc = WaitForAcknowledgements(rgEvents, nEvents);

  00954	e51b2440	 ldr         r2, [r11, #-0x440]
  00958	e3e01086	 mvn         r1, #0x86
  0095c	e1a01181	 mov         r1, r1, lsl #3
  00960	e08b1001	 add         r1, r11, r1
  00964	e59b0000	 ldr         r0, [r11]
  00968	eb000000	 bl          |?WaitForAcknowledgements@DVFSList@@IAAHPAPAXI@Z|
  0096c	e50b0014	 str         r0, [r11, #-0x14]
  00970	e51b3014	 ldr         r3, [r11, #-0x14]
  00974	e50b343c	 str         r3, [r11, #-0x43C]
  00978		 |$LN7@SendIoCont|
  00978		 |$LN16@SendIoCont|

; 360  :             }
; 361  :         }
; 362  : 
; 363  :     // post notifications are sent in reverse order
; 364  :     //
; 365  :     if (dwParam & (DVFS_CORE1_POST_NOTICE | DVFS_MPU1_POST_NOTICE))

  00978	e59b3004	 ldr         r3, [r11, #4]
  0097c	e3130022	 tst         r3, #0x22
  00980	0a000028	 beq         |$LN6@SendIoCont|
  00984		 |$LN32@SendIoCont|
  00984		 |$LN4@SendIoCont|

; 366  :         {
; 367  :         _try 
; 368  :             { 
; 369  :             do
; 370  :                 {
; 371  :                 // next element
; 372  :                 pElement = (DVFSElement*)pElement->Blink;

  00984	e51b3038	 ldr         r3, [r11, #-0x38]
  00988	e2833004	 add         r3, r3, #4
  0098c	e5933000	 ldr         r3, [r3]
  00990	e50b3038	 str         r3, [r11, #-0x38]

; 373  :                 
; 374  :                 // check if a notification should be sent for this element
; 375  :                 if (pElement->m_ffDVFSNotificationType & dwParam)

  00994	e51b3038	 ldr         r3, [r11, #-0x38]
  00998	e2833010	 add         r3, r3, #0x10
  0099c	e5932000	 ldr         r2, [r3]
  009a0	e59b3004	 ldr         r3, [r11, #4]
  009a4	e1120003	 tst         r2, r3
  009a8	0a000014	 beq         |$LN1@SendIoCont|

; 376  :                     {
; 377  :                     pElement->m_pDevice->SendIoControl(dwIoControlCode, lpInBuf, 
; 378  :                                 nInBufSize, lpOutBuf, nOutBufSize, lpBytesReturned
; 379  :                                 );            

  009ac	e59b301c	 ldr         r3, [r11, #0x1C]
  009b0	e58d3008	 str         r3, [sp, #8]
  009b4	e59b3018	 ldr         r3, [r11, #0x18]
  009b8	e58d3004	 str         r3, [sp, #4]
  009bc	e59b3014	 ldr         r3, [r11, #0x14]
  009c0	e58d3000	 str         r3, [sp]
  009c4	e59b3010	 ldr         r3, [r11, #0x10]
  009c8	e59b200c	 ldr         r2, [r11, #0xC]
  009cc	e59b1008	 ldr         r1, [r11, #8]
  009d0	e51b0038	 ldr         r0, [r11, #-0x38]
  009d4	e2800014	 add         r0, r0, #0x14
  009d8	e590e000	 ldr         lr, [r0]
  009dc	e51b0038	 ldr         r0, [r11, #-0x38]
  009e0	e2800014	 add         r0, r0, #0x14
  009e4	e5904000	 ldr         r4, [r0]
  009e8	e59e0000	 ldr         r0, [lr]
  009ec	e280e00c	 add         lr, r0, #0xC
  009f0	e1a00004	 mov         r0, r4
  009f4	e59e4000	 ldr         r4, [lr]
  009f8	e1a0e00f	 mov         lr, pc
  009fc	e12fff14	 bx          r4
  00a00		 |$LN1@SendIoCont|

; 380  :                     }
; 381  :                 }
; 382  :                 while (pElement != m_pDVFSElementHead);

  00a00	e59b3000	 ldr         r3, [r11]
  00a04	e2833024	 add         r3, r3, #0x24
  00a08	e51b2038	 ldr         r2, [r11, #-0x38]
  00a0c	e5933000	 ldr         r3, [r3]
  00a10	e1520003	 cmp         r2, r3
  00a14	1affffda	 bne         |$LN4@SendIoCont|
  00a18		 |$LN33@SendIoCont|

; 383  :             }

  00a18	ea000002	 b           |$LN34@SendIoCont|
  00a1c		 |$LN29@SendIoCont|

; 385  :             {
; 386  :             rc = FALSE;

  00a1c	e3a03000	 mov         r3, #0
  00a20	e50b343c	 str         r3, [r11, #-0x43C]
  00a24	eaffffff	 b           |$LN34@SendIoCont|
  00a28		 |$LN34@SendIoCont|
  00a28		 |$LN6@SendIoCont|

; 387  :             }
; 388  :         }
; 389  :     
; 390  :     Unlock();

  00a28	e59b0000	 ldr         r0, [r11]
  00a2c	eb000000	 bl          |?Unlock@DVFSList@@IAAXXZ|

; 391  :     return rc;

  00a30	e51b343c	 ldr         r3, [r11, #-0x43C]
  00a34	e50b3034	 str         r3, [r11, #-0x34]
  00a38		 |$LN18@SendIoCont|
  00a38		 |$LN20@SendIoCont|

; 392  : }

  00a38	e51b0034	 ldr         r0, [r11, #-0x34]
  00a3c	e24bd010	 sub         sp, r11, #0x10
  00a40	e89d6810	 ldmia       sp, {r4, r11, sp, lr}
  00a44	e12fff1e	 bx          lr

			 ENDP  ; |?SendIoControl@DVFSList@@UAAHKKPAXK0KPAK@Z|, DVFSList::SendIoControl

  00a48		 |$LN28@SendIoCont|
  00a48		 |$LN38@SendIoCont|

; 384  :         __except(EXCEPTION_EXECUTE_HANDLER) 

  00a48	e52de004	 str         lr, [sp, #-4]!
  00a4c	e24dd00c	 sub         sp, sp, #0xC
  00a50		 |$LN31@SendIoCont|
  00a50		 |$LN42@SendIoCont|
  00a50	e3a00001	 mov         r0, #1
  00a54		 |$LN30@SendIoCont|
  00a54	e28dd00c	 add         sp, sp, #0xC
  00a58	e49df004	 ldr         pc, [sp], #4
  00a5c		 |$LN43@SendIoCont|
  00a5c		 |$LN21@SendIoCont|
  00a5c		 |$LN40@SendIoCont|

; 350  :         __except(EXCEPTION_EXECUTE_HANDLER) 

  00a5c	e52de004	 str         lr, [sp, #-4]!
  00a60	e24dd00c	 sub         sp, sp, #0xC
  00a64		 |$LN24@SendIoCont|
  00a64		 |$LN44@SendIoCont|
  00a64	e3a00001	 mov         r0, #1
  00a68		 |$LN23@SendIoCont|
  00a68	e28dd00c	 add         sp, sp, #0xC
  00a6c	e49df004	 ldr         pc, [sp], #4
  00a70		 |$LN46@SendIoCont|
  00a70		 |$LN47@SendIoCont|
  00a70	fffffbc4	 DCD         0xfffffbc4
  00a74		 |$LN45@SendIoCont|
  00a74		 |$LN41@SendIoCont|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T33193| DCD	|$LN5@ResetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M33190|

; 224  : 	return EventModify(h,EVENT_RESET);

  00010	e3a01002	 mov         r1, #2
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 225  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M33191|

			 ENDP  ; |ResetEvent|

	END
