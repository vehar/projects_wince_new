; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\CONSTRAINTROOT\constraintadapter.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?IsHex@@YAHG@Z|			; IsHex

  00000			 AREA	 |.pdata|, PDATA
|$T33667| DCD	|$LN8@IsHex|
	DCD	0x40002504
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintroot\constraintadapter.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsHex@@YAHG@Z| PROC			; IsHex

; 39   : {

  00000		 |$LN8@IsHex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M33664|

; 40   :     if (c >= _T('0') && c <= _T('9')) return TRUE;

  00010	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00014	e3530030	 cmp         r3, #0x30
  00018	ba000005	 blt         |$LN3@IsHex|
  0001c	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00020	e3530039	 cmp         r3, #0x39
  00024	ca000002	 bgt         |$LN3@IsHex|
  00028	e3a03001	 mov         r3, #1
  0002c	e58d3000	 str         r3, [sp]
  00030	ea000013	 b           |$LN4@IsHex|
  00034		 |$LN3@IsHex|

; 41   :     if (c >= _T('a') && c <= _T('f')) return TRUE;

  00034	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00038	e3530061	 cmp         r3, #0x61
  0003c	ba000005	 blt         |$LN2@IsHex|
  00040	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00044	e3530066	 cmp         r3, #0x66
  00048	ca000002	 bgt         |$LN2@IsHex|
  0004c	e3a03001	 mov         r3, #1
  00050	e58d3000	 str         r3, [sp]
  00054	ea00000a	 b           |$LN4@IsHex|
  00058		 |$LN2@IsHex|

; 42   :     if (c >= _T('A') && c <= _T('F')) return TRUE;

  00058	e1dd30bc	 ldrh        r3, [sp, #0xC]
  0005c	e3530041	 cmp         r3, #0x41
  00060	ba000005	 blt         |$LN1@IsHex|
  00064	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00068	e3530046	 cmp         r3, #0x46
  0006c	ca000002	 bgt         |$LN1@IsHex|
  00070	e3a03001	 mov         r3, #1
  00074	e58d3000	 str         r3, [sp]
  00078	ea000001	 b           |$LN4@IsHex|
  0007c		 |$LN1@IsHex|

; 43   :     return FALSE;

  0007c	e3a03000	 mov         r3, #0
  00080	e58d3000	 str         r3, [sp]
  00084		 |$LN4@IsHex|

; 44   : }

  00084	e59d0000	 ldr         r0, [sp]
  00088	e28dd004	 add         sp, sp, #4
  0008c	e89d6000	 ldmia       sp, {sp, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M33665|

			 ENDP  ; |?IsHex@@YAHG@Z|, IsHex

	EXPORT	|?ParseConstraintClassification@ConstraintAdapter@@IAAHPBGK@Z| ; ConstraintAdapter::ParseConstraintClassification
	IMPORT	|wcstoul|

  00008			 AREA	 |.pdata|, PDATA
|$T33673| DCD	|$LN20@ParseConst|
	DCD	0x40007704
; Function compile flags: /Odtp

  00094			 AREA	 |.text|, CODE, ARM

  00094		 |?ParseConstraintClassification@ConstraintAdapter@@IAAHPBGK@Z| PROC ; ConstraintAdapter::ParseConstraintClassification

; 56   : {

  00094		 |$LN20@ParseConst|
  00094	e1a0c00d	 mov         r12, sp
  00098	e92d0007	 stmdb       sp!, {r0 - r2}
  0009c	e92d5000	 stmdb       sp!, {r12, lr}
  000a0	e24dd020	 sub         sp, sp, #0x20
  000a4		 |$M33670|

; 57   :     BOOL rc = FALSE;

  000a4	e3a03000	 mov         r3, #0
  000a8	e58d3004	 str         r3, [sp, #4]

; 58   :     DWORD count;
; 59   :     DWORD nStartPos = 0;

  000ac	e3a03000	 mov         r3, #0
  000b0	e58d3010	 str         r3, [sp, #0x10]

; 60   :     DWORD nEndPos = 0;

  000b4	e3a03000	 mov         r3, #0
  000b8	e58d300c	 str         r3, [sp, #0xC]

; 61   :     DWORD nClassIndex = 0;

  000bc	e3a03000	 mov         r3, #0
  000c0	e58d3008	 str         r3, [sp, #8]
  000c4		 |$LN15@ParseConst|

; 62   :     
; 63   :     // get end of string
; 64   :     while (nEndPos < nLen)

  000c4	e59d200c	 ldr         r2, [sp, #0xC]
  000c8	e59d3030	 ldr         r3, [sp, #0x30]
  000cc	e1520003	 cmp         r2, r3
  000d0	2a00005a	 bcs         |$LN14@ParseConst|

; 65   :         {
; 66   :         count = 0;

  000d4	e3a03000	 mov         r3, #0
  000d8	e58d3000	 str         r3, [sp]
  000dc		 |$LN13@ParseConst|

; 67   :         do
; 68   :             {
; 69   :             if (IsHex(szClasses[nEndPos]))

  000dc	e59d100c	 ldr         r1, [sp, #0xC]
  000e0	e3a03002	 mov         r3, #2
  000e4	e0020391	 mul         r2, r1, r3
  000e8	e59d302c	 ldr         r3, [sp, #0x2C]
  000ec	e0833002	 add         r3, r3, r2
  000f0	e1d300b0	 ldrh        r0, [r3]
  000f4	eb000000	 bl          |?IsHex@@YAHG@Z|
  000f8	e58d0018	 str         r0, [sp, #0x18]
  000fc	e59d3018	 ldr         r3, [sp, #0x18]
  00100	e3530000	 cmp         r3, #0
  00104	0a000006	 beq         |$LN10@ParseConst|

; 70   :                 {
; 71   :                 count++;

  00108	e59d3000	 ldr         r3, [sp]
  0010c	e2833001	 add         r3, r3, #1
  00110	e58d3000	 str         r3, [sp]

; 72   :                 nEndPos++;

  00114	e59d300c	 ldr         r3, [sp, #0xC]
  00118	e2833001	 add         r3, r3, #1
  0011c	e58d300c	 str         r3, [sp, #0xC]

; 73   :                 }
; 74   :             else if (szClasses[nEndPos] == _T(',') ||

  00120	ea00001b	 b           |$LN9@ParseConst|
  00124		 |$LN10@ParseConst|

; 75   :                      szClasses[nEndPos] == _T(' ') ||
; 76   :                      szClasses[nEndPos] == _T('\0'))

  00124	e59d100c	 ldr         r1, [sp, #0xC]
  00128	e3a03002	 mov         r3, #2
  0012c	e0020391	 mul         r2, r1, r3
  00130	e59d302c	 ldr         r3, [sp, #0x2C]
  00134	e0833002	 add         r3, r3, r2
  00138	e1d330b0	 ldrh        r3, [r3]
  0013c	e353002c	 cmp         r3, #0x2C
  00140	0a00000f	 beq         |$LN7@ParseConst|
  00144	e59d100c	 ldr         r1, [sp, #0xC]
  00148	e3a03002	 mov         r3, #2
  0014c	e0020391	 mul         r2, r1, r3
  00150	e59d302c	 ldr         r3, [sp, #0x2C]
  00154	e0833002	 add         r3, r3, r2
  00158	e1d330b0	 ldrh        r3, [r3]
  0015c	e3530020	 cmp         r3, #0x20
  00160	0a000007	 beq         |$LN7@ParseConst|
  00164	e59d100c	 ldr         r1, [sp, #0xC]
  00168	e3a03002	 mov         r3, #2
  0016c	e0020391	 mul         r2, r1, r3
  00170	e59d302c	 ldr         r3, [sp, #0x2C]
  00174	e0833002	 add         r3, r3, r2
  00178	e1d330b0	 ldrh        r3, [r3]
  0017c	e3530000	 cmp         r3, #0
  00180	1a000001	 bne         |$LN8@ParseConst|
  00184		 |$LN7@ParseConst|

; 77   :                 {
; 78   :                 // got end marker
; 79   :                 break;

  00184	ea00000e	 b           |$LN11@ParseConst|

; 80   :                 }
; 81   :             else

  00188	ea000001	 b           |$LN6@ParseConst|
  0018c		 |$LN8@ParseConst|

; 82   :                 {
; 83   :                 // unexpected character
; 84   :                 goto cleanUp;

  0018c	ea000031	 b           |$LN5@ParseConst|
  00190	ea000030	 b           |$cleanUp$33562|
  00194		 |$LN6@ParseConst|
  00194		 |$LN9@ParseConst|

; 85   :                 }
; 86   : 
; 87   :             // check for too long hex values
; 88   :             if (count > 8 || count == 0) goto cleanUp;

  00194	e59d3000	 ldr         r3, [sp]
  00198	e3530008	 cmp         r3, #8
  0019c	8a000002	 bhi         |$LN3@ParseConst|
  001a0	e59d3000	 ldr         r3, [sp]
  001a4	e3530000	 cmp         r3, #0
  001a8	1a000001	 bne         |$LN4@ParseConst|
  001ac		 |$LN3@ParseConst|
  001ac	ea000029	 b           |$LN2@ParseConst|
  001b0	ea000028	 b           |$cleanUp$33562|
  001b4		 |$LN4@ParseConst|

; 89   :             }
; 90   :             while (nEndPos < nLen);

  001b4	e59d200c	 ldr         r2, [sp, #0xC]
  001b8	e59d3030	 ldr         r3, [sp, #0x30]
  001bc	e1520003	 cmp         r2, r3
  001c0	3affffc5	 bcc         |$LN13@ParseConst|
  001c4		 |$LN11@ParseConst|

; 91   : 
; 92   :         // check for double NULL
; 93   :         if (count == 0) break;

  001c4	e59d3000	 ldr         r3, [sp]
  001c8	e3530000	 cmp         r3, #0
  001cc	1a000000	 bne         |$LN1@ParseConst|
  001d0	ea00001a	 b           |$LN14@ParseConst|
  001d4		 |$LN1@ParseConst|

; 94   : 
; 95   :         m_rgClasses[nClassIndex] = _tcstoul(szClasses + nStartPos, NULL, 16);

  001d4	e3a02010	 mov         r2, #0x10
  001d8	e3a01000	 mov         r1, #0
  001dc	e59de010	 ldr         lr, [sp, #0x10]
  001e0	e3a03002	 mov         r3, #2
  001e4	e000039e	 mul         r0, lr, r3
  001e8	e59d302c	 ldr         r3, [sp, #0x2C]
  001ec	e0830000	 add         r0, r3, r0
  001f0	eb000000	 bl          wcstoul
  001f4	e58d001c	 str         r0, [sp, #0x1C]
  001f8	e59d3028	 ldr         r3, [sp, #0x28]
  001fc	e2833c06	 add         r3, r3, #6, 24
  00200	e2831028	 add         r1, r3, #0x28
  00204	e59d2008	 ldr         r2, [sp, #8]
  00208	e3a03004	 mov         r3, #4
  0020c	e0030392	 mul         r3, r2, r3
  00210	e0812003	 add         r2, r1, r3
  00214	e59d301c	 ldr         r3, [sp, #0x1C]
  00218	e5823000	 str         r3, [r2]

; 96   : 
; 97   :         // update for next class identifier
; 98   :         nEndPos++;

  0021c	e59d300c	 ldr         r3, [sp, #0xC]
  00220	e2833001	 add         r3, r3, #1
  00224	e58d300c	 str         r3, [sp, #0xC]

; 99   :         nStartPos = nEndPos;

  00228	e59d300c	 ldr         r3, [sp, #0xC]
  0022c	e58d3010	 str         r3, [sp, #0x10]

; 100  :         nClassIndex++;

  00230	e59d3008	 ldr         r3, [sp, #8]
  00234	e2833001	 add         r3, r3, #1
  00238	e58d3008	 str         r3, [sp, #8]

; 101  :         }

  0023c	eaffffa0	 b           |$LN15@ParseConst|
  00240		 |$LN14@ParseConst|

; 102  : 
; 103  :     m_nClassIds = nClassIndex;

  00240	e59d3028	 ldr         r3, [sp, #0x28]
  00244	e2832008	 add         r2, r3, #8
  00248	e59d3008	 ldr         r3, [sp, #8]
  0024c	e5823000	 str         r3, [r2]

; 104  :     rc = TRUE;

  00250	e3a03001	 mov         r3, #1
  00254	e58d3004	 str         r3, [sp, #4]
  00258		 |$LN2@ParseConst|
  00258		 |$LN5@ParseConst|
  00258		 |$cleanUp$33562|

; 105  :     
; 106  : cleanUp:
; 107  :     return rc;

  00258	e59d3004	 ldr         r3, [sp, #4]
  0025c	e58d3014	 str         r3, [sp, #0x14]

; 108  : }

  00260	e59d0014	 ldr         r0, [sp, #0x14]
  00264	e28dd020	 add         sp, sp, #0x20
  00268	e89d6000	 ldmia       sp, {sp, lr}
  0026c	e12fff1e	 bx          lr
  00270		 |$M33671|

			 ENDP  ; |?ParseConstraintClassification@ConstraintAdapter@@IAAHPBGK@Z|, ConstraintAdapter::ParseConstraintClassification

	EXPORT	|??_C@_1CA@LOPKJJFD@?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?Initialize@ConstraintAdapter@@QAAHPBG@Z| ; ConstraintAdapter::Initialize
	IMPORT	|RegCloseKey|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|wcscpy|
	IMPORT	|wcslen|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00010			 AREA	 |.pdata|, PDATA
|$T33693| DCD	|$LN19@Initialize|
	DCD	0xc0009204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@LOPKJJFD@?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@| DCB "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "l", 0x0, "a"
	DCB	0x0, "s", 0x0, "s", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@| DCB "D", 0x0, "l", 0x0, "l", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "N", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@| DCB "O", 0x0, "r", 0x0
	DCB	"d", 0x0, "e", 0x0, "r", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.xdata|, DATA
|$T33689| DCD	0xffffffa8
; Function compile flags: /Odtp

  00270			 AREA	 |.text|, CODE, ARM

  00270	00000000	 DCD         |__GSHandlerCheck|
  00274	00000000	 DCD         |$T33689|

  00278		 |?Initialize@ConstraintAdapter@@QAAHPBG@Z| PROC ; ConstraintAdapter::Initialize

; 119  : {

  00278		 |$LN19@Initialize|
  00278	e1a0c00d	 mov         r12, sp
  0027c	e92d0003	 stmdb       sp!, {r0, r1}
  00280	e92d5000	 stmdb       sp!, {r12, lr}
  00284	e24ddf9a	 sub         sp, sp, #0x9A, 30
  00288		 |$M33690|
  00288	e59f322c	 ldr         r3, [pc, #0x22C]
  0028c	e5933000	 ldr         r3, [r3]
  00290	e58d3220	 str         r3, [sp, #0x220]

; 120  :     LONG code;
; 121  :     DWORD size;
; 122  :     DWORD rc = FALSE;    

  00294	e3a03000	 mov         r3, #0
  00298	e58d3008	 str         r3, [sp, #8]

; 123  :     HKEY hKey = NULL;

  0029c	e3a03000	 mov         r3, #0
  002a0	e58d300c	 str         r3, [sp, #0xC]

; 124  :     _TCHAR szBuffer[MAX_PATH];
; 125  : 
; 126  :     // Save device registry key for later use
; 127  :     if (_tcslen(szContext) >= sizeof(m_szRegKey) / sizeof(m_szRegKey[0])) goto cleanUp;

  002a4	e59d0274	 ldr         r0, [sp, #0x274]
  002a8	eb000000	 bl          wcslen
  002ac	e58d024c	 str         r0, [sp, #0x24C]
  002b0	e59d324c	 ldr         r3, [sp, #0x24C]
  002b4	e3530f41	 cmp         r3, #0x41, 30
  002b8	3a000001	 bcc         |$LN14@Initialize|
  002bc	ea00006d	 b           |$LN13@Initialize|
  002c0	ea00006c	 b           |$cleanUp$33578|
  002c4		 |$LN14@Initialize|

; 128  :     _tcscpy(m_szRegKey, szContext);

  002c4	e59d1274	 ldr         r1, [sp, #0x274]
  002c8	e59d3270	 ldr         r3, [sp, #0x270]
  002cc	e2830f86	 add         r0, r3, #0x86, 30
  002d0	eb000000	 bl          wcscpy

; 129  : 
; 130  :     // Open device registry key
; 131  :     code = ::RegOpenKeyEx(HKEY_LOCAL_MACHINE, szContext, 0, 0, &hKey);

  002d4	e28d300c	 add         r3, sp, #0xC
  002d8	e58d3000	 str         r3, [sp]
  002dc	e3a03000	 mov         r3, #0
  002e0	e3a02000	 mov         r2, #0
  002e4	e59d1274	 ldr         r1, [sp, #0x274]
  002e8	e3a0010a	 mov         r0, #0xA, 2
  002ec	eb000000	 bl          RegOpenKeyExW
  002f0	e58d0250	 str         r0, [sp, #0x250]
  002f4	e59d3250	 ldr         r3, [sp, #0x250]
  002f8	e58d3010	 str         r3, [sp, #0x10]

; 132  :     if (code != ERROR_SUCCESS) goto cleanUp;

  002fc	e59d3010	 ldr         r3, [sp, #0x10]
  00300	e3530000	 cmp         r3, #0
  00304	0a000001	 beq         |$LN12@Initialize|
  00308	ea00005a	 b           |$LN11@Initialize|
  0030c	ea000059	 b           |$cleanUp$33578|
  00310		 |$LN12@Initialize|

; 133  : 
; 134  :     // read load order
; 135  :     size = sizeof(m_dwOrder);

  00310	e3a03004	 mov         r3, #4
  00314	e58d3014	 str         r3, [sp, #0x14]

; 136  :     code = RegQueryValueEx(hKey, REGEDIT_CONSTRAINT_ORDER, 0, 0, (BYTE*)&m_dwOrder, &size);

  00318	e28d3014	 add         r3, sp, #0x14
  0031c	e58d3004	 str         r3, [sp, #4]
  00320	e59d3270	 ldr         r3, [sp, #0x270]
  00324	e2833004	 add         r3, r3, #4
  00328	e58d3000	 str         r3, [sp]
  0032c	e3a03000	 mov         r3, #0
  00330	e3a02000	 mov         r2, #0
  00334	e59f117c	 ldr         r1, [pc, #0x17C]
  00338	e59d000c	 ldr         r0, [sp, #0xC]
  0033c	eb000000	 bl          RegQueryValueExW
  00340	e58d0254	 str         r0, [sp, #0x254]
  00344	e59d3254	 ldr         r3, [sp, #0x254]
  00348	e58d3010	 str         r3, [sp, #0x10]

; 137  :     if (code != ERROR_SUCCESS) goto cleanUp;

  0034c	e59d3010	 ldr         r3, [sp, #0x10]
  00350	e3530000	 cmp         r3, #0
  00354	0a000001	 beq         |$LN10@Initialize|
  00358	ea000046	 b           |$LN9@Initialize|
  0035c	ea000045	 b           |$cleanUp$33578|
  00360		 |$LN10@Initialize|

; 138  : 
; 139  :     // read constraint name
; 140  :     size = sizeof(m_szConstraintName);

  00360	e3a03f82	 mov         r3, #0x82, 30
  00364	e58d3014	 str         r3, [sp, #0x14]

; 141  :     code = RegQueryValueEx(hKey, REGEDIT_CONSTRAINT_NAME, 0, 0, (BYTE*)&m_szConstraintName, &size);

  00368	e28d3014	 add         r3, sp, #0x14
  0036c	e58d3004	 str         r3, [sp, #4]
  00370	e59d3270	 ldr         r3, [sp, #0x270]
  00374	e2833e42	 add         r3, r3, #0x42, 28
  00378	e58d3000	 str         r3, [sp]
  0037c	e3a03000	 mov         r3, #0
  00380	e3a02000	 mov         r2, #0
  00384	e59f1128	 ldr         r1, [pc, #0x128]
  00388	e59d000c	 ldr         r0, [sp, #0xC]
  0038c	eb000000	 bl          RegQueryValueExW
  00390	e58d0258	 str         r0, [sp, #0x258]
  00394	e59d3258	 ldr         r3, [sp, #0x258]
  00398	e58d3010	 str         r3, [sp, #0x10]

; 142  :     if (code != ERROR_SUCCESS) goto cleanUp;

  0039c	e59d3010	 ldr         r3, [sp, #0x10]
  003a0	e3530000	 cmp         r3, #0
  003a4	0a000001	 beq         |$LN8@Initialize|
  003a8	ea000032	 b           |$LN7@Initialize|
  003ac	ea000031	 b           |$cleanUp$33578|
  003b0		 |$LN8@Initialize|

; 143  : 
; 144  :     // read dll name
; 145  :     size = sizeof(m_szDll);

  003b0	e3a03f82	 mov         r3, #0x82, 30
  003b4	e58d3014	 str         r3, [sp, #0x14]

; 146  :     code = RegQueryValueEx(hKey, REGEDIT_CONSTRAINT_DLL, 0, 0, (BYTE*)&m_szDll, &size);

  003b8	e28d3014	 add         r3, sp, #0x14
  003bc	e58d3004	 str         r3, [sp, #4]
  003c0	e59d3270	 ldr         r3, [sp, #0x270]
  003c4	e283300c	 add         r3, r3, #0xC
  003c8	e58d3000	 str         r3, [sp]
  003cc	e3a03000	 mov         r3, #0
  003d0	e3a02000	 mov         r2, #0
  003d4	e59f10d4	 ldr         r1, [pc, #0xD4]
  003d8	e59d000c	 ldr         r0, [sp, #0xC]
  003dc	eb000000	 bl          RegQueryValueExW
  003e0	e58d025c	 str         r0, [sp, #0x25C]
  003e4	e59d325c	 ldr         r3, [sp, #0x25C]
  003e8	e58d3010	 str         r3, [sp, #0x10]

; 147  :     if (code != ERROR_SUCCESS) goto cleanUp;

  003ec	e59d3010	 ldr         r3, [sp, #0x10]
  003f0	e3530000	 cmp         r3, #0
  003f4	0a000001	 beq         |$LN6@Initialize|
  003f8	ea00001e	 b           |$LN5@Initialize|
  003fc	ea00001d	 b           |$cleanUp$33578|
  00400		 |$LN6@Initialize|

; 148  : 
; 149  :     // read constraint classifications
; 150  :     size = sizeof(szBuffer);

  00400	e3a03f82	 mov         r3, #0x82, 30
  00404	e58d3014	 str         r3, [sp, #0x14]

; 151  :     code = RegQueryValueEx(hKey, REGEDIT_CONSTRAINT_CLASSES, 0, 0, (BYTE*)szBuffer, &size);

  00408	e28d3014	 add         r3, sp, #0x14
  0040c	e58d3004	 str         r3, [sp, #4]
  00410	e28d3018	 add         r3, sp, #0x18
  00414	e58d3000	 str         r3, [sp]
  00418	e3a03000	 mov         r3, #0
  0041c	e3a02000	 mov         r2, #0
  00420	e59f1084	 ldr         r1, [pc, #0x84]
  00424	e59d000c	 ldr         r0, [sp, #0xC]
  00428	eb000000	 bl          RegQueryValueExW
  0042c	e58d0260	 str         r0, [sp, #0x260]
  00430	e59d3260	 ldr         r3, [sp, #0x260]
  00434	e58d3010	 str         r3, [sp, #0x10]

; 152  :     if (code == ERROR_SUCCESS)

  00438	e59d3010	 ldr         r3, [sp, #0x10]
  0043c	e3530000	 cmp         r3, #0
  00440	1a00000a	 bne         |$LN4@Initialize|

; 153  :         {
; 154  :         if (ParseConstraintClassification(szBuffer, size >> 1) == FALSE)

  00444	e59d3014	 ldr         r3, [sp, #0x14]
  00448	e1a020a3	 mov         r2, r3, lsr #1
  0044c	e28d1018	 add         r1, sp, #0x18
  00450	e59d0270	 ldr         r0, [sp, #0x270]
  00454	eb000000	 bl          |?ParseConstraintClassification@ConstraintAdapter@@IAAHPBGK@Z|
  00458	e58d0264	 str         r0, [sp, #0x264]
  0045c	e59d3264	 ldr         r3, [sp, #0x264]
  00460	e3530000	 cmp         r3, #0
  00464	1a000001	 bne         |$LN3@Initialize|
  00468	ea000002	 b           |$LN2@Initialize|

; 155  :             {
; 156  :             goto cleanUp;

  0046c	ea000001	 b           |$cleanUp$33578|
  00470		 |$LN3@Initialize|
  00470		 |$LN4@Initialize|

; 157  :             }
; 158  :         }
; 159  :     
; 160  :     // Done
; 161  :     rc = TRUE;

  00470	e3a03001	 mov         r3, #1
  00474	e58d3008	 str         r3, [sp, #8]
  00478		 |$LN2@Initialize|
  00478		 |$LN5@Initialize|
  00478		 |$LN7@Initialize|
  00478		 |$LN9@Initialize|
  00478		 |$LN11@Initialize|
  00478		 |$LN13@Initialize|
  00478		 |$cleanUp$33578|

; 162  :     
; 163  : cleanUp:    
; 164  :     if (hKey != NULL) RegCloseKey(hKey);

  00478	e59d300c	 ldr         r3, [sp, #0xC]
  0047c	e3530000	 cmp         r3, #0
  00480	0a000001	 beq         |$LN1@Initialize|
  00484	e59d000c	 ldr         r0, [sp, #0xC]
  00488	eb000000	 bl          RegCloseKey
  0048c		 |$LN1@Initialize|

; 165  :     return rc;

  0048c	e59d0220	 ldr         r0, [sp, #0x220]
  00490	eb000000	 bl          __security_check_cookie
  00494	e59d3008	 ldr         r3, [sp, #8]
  00498	e58d3248	 str         r3, [sp, #0x248]

; 166  : }

  0049c	e59d0248	 ldr         r0, [sp, #0x248]
  004a0	e28ddf9a	 add         sp, sp, #0x9A, 30
  004a4	e89d6000	 ldmia       sp, {sp, lr}
  004a8	e12fff1e	 bx          lr
  004ac		 |$LN20@Initialize|
  004ac		 |$LN21@Initialize|
  004ac	00000000	 DCD         |??_C@_1CA@LOPKJJFD@?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@|
  004b0		 |$LN22@Initialize|
  004b0	00000000	 DCD         |??_C@_17DJMMGLBL@?$AAD?$AAl?$AAl?$AA?$AA@|
  004b4		 |$LN23@Initialize|
  004b4	00000000	 DCD         |??_C@_19DINFBLAK@?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
  004b8		 |$LN24@Initialize|
  004b8	00000000	 DCD         |??_C@_1M@PJMPBMAL@?$AAO?$AAr?$AAd?$AAe?$AAr?$AA?$AA@|
  004bc		 |$LN25@Initialize|
  004bc	00000000	 DCD         |__security_cookie|
  004c0		 |$M33691|

			 ENDP  ; |?Initialize@ConstraintAdapter@@QAAHPBG@Z|, ConstraintAdapter::Initialize

	EXPORT	|??_C@_1DC@MIEIBCNG@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FFEFBBEA@?$AAI?$AAn?$AAs?$AAe?$AAr?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CA@KPFDBJFI@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@PEJPHCBL@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@OIBGDBB@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@FICNHNOC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BO@DDNGAMNL@?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?PostInitialize@ConstraintAdapter@@QAAHXZ| ; ConstraintAdapter::PostInitialize
	IMPORT	|GetProcAddressW|
	IMPORT	|swprintf|
	IMPORT	|LoadLibraryW|

  00018			 AREA	 |.pdata|, PDATA
|$T33709| DCD	|$LN19@PostInitia|
	DCD	0xc000d504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@MIEIBCNG@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "m", 0x0, "o", 0x0, "v", 0x0, "e", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FFEFBBEA@?$AAI?$AAn?$AAs?$AAe?$AAr?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "s", 0x0, "e", 0x0, "r", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "C", 0x0, "a", 0x0, "l"
	DCB	0x0, "l", 0x0, "b", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@KPFDBJFI@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "C"
	DCB	0x0, "l", 0x0, "o", 0x0, "s", 0x0, "e", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@PEJPHCBL@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "U"
	DCB	0x0, "p", 0x0, "d", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@OIBGDBB@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "C"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@FICNHNOC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@| DCB "%", 0x0
	DCB	"s", 0x0, "_", 0x0, "%", 0x0, "s", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BO@DDNGAMNL@?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "a", 0x0, "i", 0x0, "n"
	DCB	0x0, "t", 0x0, 0x0, 0x0			; `string'

  00004			 AREA	 |.xdata|, DATA
|$T33705| DCD	0xffffffc4
; Function compile flags: /Odtp

  004c0			 AREA	 |.text|, CODE, ARM

  004c0	00000000	 DCD         |__GSHandlerCheck|
  004c4	00000000	 DCD         |$T33705|

  004c8		 |?PostInitialize@ConstraintAdapter@@QAAHXZ| PROC ; ConstraintAdapter::PostInitialize

; 175  : {

  004c8		 |$LN19@PostInitia|
  004c8	e1a0c00d	 mov         r12, sp
  004cc	e92d0001	 stmdb       sp!, {r0}
  004d0	e92d5000	 stmdb       sp!, {r12, lr}
  004d4	e24ddf8f	 sub         sp, sp, #0x8F, 30
  004d8		 |$M33706|
  004d8	e59f3338	 ldr         r3, [pc, #0x338]
  004dc	e5933000	 ldr         r3, [r3]
  004e0	e58d320c	 str         r3, [sp, #0x20C]

; 176  :     BOOL rc = FALSE;

  004e4	e3a03000	 mov         r3, #0
  004e8	e58d3000	 str         r3, [sp]

; 177  :     _TCHAR szBuffer[MAX_PATH];
; 178  :     
; 179  :     // Load library
; 180  :     m_hModule = ::LoadLibrary(m_szDll);

  004ec	e59d3244	 ldr         r3, [sp, #0x244]
  004f0	e283000c	 add         r0, r3, #0xC
  004f4	eb000000	 bl          LoadLibraryW
  004f8	e58d0214	 str         r0, [sp, #0x214]
  004fc	e59d2214	 ldr         r2, [sp, #0x214]
  00500	e59d3244	 ldr         r3, [sp, #0x244]
  00504	e5832000	 str         r2, [r3]

; 181  :     if (m_hModule == NULL) goto cleanUp;

  00508	e59d3244	 ldr         r3, [sp, #0x244]
  0050c	e5933000	 ldr         r3, [r3]
  00510	e3530000	 cmp         r3, #0
  00514	1a000001	 bne         |$LN12@PostInitia|
  00518	ea0000ae	 b           |$LN11@PostInitia|
  0051c	ea0000ad	 b           |$cleanUp$33608|
  00520		 |$LN12@PostInitia|

; 182  : 
; 183  :     //
; 184  :     // load functions
; 185  :     
; 186  :     // xxx_InitConstraint
; 187  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, INIT_NAME);

  00520	e59f32ec	 ldr         r3, [pc, #0x2EC]
  00524	e59d2244	 ldr         r2, [sp, #0x244]
  00528	e2822e42	 add         r2, r2, #0x42, 28
  0052c	e59f12c4	 ldr         r1, [pc, #0x2C4]
  00530	e28d0004	 add         r0, sp, #4
  00534	eb000000	 bl          swprintf

; 188  :     m_fns.InitConstraint = reinterpret_cast<fnInitConstraint>(
; 189  :                             ::GetProcAddress(m_hModule, szBuffer)
; 190  :                             );

  00538	e28d1004	 add         r1, sp, #4
  0053c	e59d3244	 ldr         r3, [sp, #0x244]
  00540	e5930000	 ldr         r0, [r3]
  00544	eb000000	 bl          GetProcAddressW
  00548	e58d0218	 str         r0, [sp, #0x218]
  0054c	e59d3244	 ldr         r3, [sp, #0x244]
  00550	e2833c0a	 add         r3, r3, #0xA, 24
  00554	e2832028	 add         r2, r3, #0x28
  00558	e59d3218	 ldr         r3, [sp, #0x218]
  0055c	e5823000	 str         r3, [r2]

; 191  :     if (m_fns.InitConstraint == NULL) goto cleanUp;

  00560	e59d3244	 ldr         r3, [sp, #0x244]
  00564	e2833c0a	 add         r3, r3, #0xA, 24
  00568	e2833028	 add         r3, r3, #0x28
  0056c	e5933000	 ldr         r3, [r3]
  00570	e3530000	 cmp         r3, #0
  00574	1a000001	 bne         |$LN10@PostInitia|
  00578	ea000096	 b           |$LN9@PostInitia|
  0057c	ea000095	 b           |$cleanUp$33608|
  00580		 |$LN10@PostInitia|

; 192  : 
; 193  :     // xxx_DeinitConstraint
; 194  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, DEINIT_NAME);

  00580	e59f3288	 ldr         r3, [pc, #0x288]
  00584	e59d2244	 ldr         r2, [sp, #0x244]
  00588	e2822e42	 add         r2, r2, #0x42, 28
  0058c	e59f1264	 ldr         r1, [pc, #0x264]
  00590	e28d0004	 add         r0, sp, #4
  00594	eb000000	 bl          swprintf

; 195  :     m_fns.DeinitConstraint = reinterpret_cast<fnDeinitConstraint>(
; 196  :                             ::GetProcAddress(m_hModule, szBuffer)
; 197  :                             );

  00598	e28d1004	 add         r1, sp, #4
  0059c	e59d3244	 ldr         r3, [sp, #0x244]
  005a0	e5930000	 ldr         r0, [r3]
  005a4	eb000000	 bl          GetProcAddressW
  005a8	e58d021c	 str         r0, [sp, #0x21C]
  005ac	e59d3244	 ldr         r3, [sp, #0x244]
  005b0	e2833c0a	 add         r3, r3, #0xA, 24
  005b4	e283202c	 add         r2, r3, #0x2C
  005b8	e59d321c	 ldr         r3, [sp, #0x21C]
  005bc	e5823000	 str         r3, [r2]

; 198  :     if (m_fns.DeinitConstraint == NULL) goto cleanUp;

  005c0	e59d3244	 ldr         r3, [sp, #0x244]
  005c4	e2833c0a	 add         r3, r3, #0xA, 24
  005c8	e283302c	 add         r3, r3, #0x2C
  005cc	e5933000	 ldr         r3, [r3]
  005d0	e3530000	 cmp         r3, #0
  005d4	1a000001	 bne         |$LN8@PostInitia|
  005d8	ea00007e	 b           |$LN7@PostInitia|
  005dc	ea00007d	 b           |$cleanUp$33608|
  005e0		 |$LN8@PostInitia|

; 199  : 
; 200  :     // xxx_CreateConstraint
; 201  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, CREATE_NAME);

  005e0	e59f3224	 ldr         r3, [pc, #0x224]
  005e4	e59d2244	 ldr         r2, [sp, #0x244]
  005e8	e2822e42	 add         r2, r2, #0x42, 28
  005ec	e59f1204	 ldr         r1, [pc, #0x204]
  005f0	e28d0004	 add         r0, sp, #4
  005f4	eb000000	 bl          swprintf

; 202  :     m_fns.CreateConstraint = reinterpret_cast<fnCreateConstraint>(
; 203  :                             ::GetProcAddress(m_hModule, szBuffer)
; 204  :                             );

  005f8	e28d1004	 add         r1, sp, #4
  005fc	e59d3244	 ldr         r3, [sp, #0x244]
  00600	e5930000	 ldr         r0, [r3]
  00604	eb000000	 bl          GetProcAddressW
  00608	e58d0220	 str         r0, [sp, #0x220]
  0060c	e59d3244	 ldr         r3, [sp, #0x244]
  00610	e2832ea3	 add         r2, r3, #0xA3, 28
  00614	e59d3220	 ldr         r3, [sp, #0x220]
  00618	e5823000	 str         r3, [r2]

; 205  :     if (m_fns.CreateConstraint == NULL) goto cleanUp;

  0061c	e59d3244	 ldr         r3, [sp, #0x244]
  00620	e2833ea3	 add         r3, r3, #0xA3, 28
  00624	e5933000	 ldr         r3, [r3]
  00628	e3530000	 cmp         r3, #0
  0062c	1a000001	 bne         |$LN6@PostInitia|
  00630	ea000068	 b           |$LN5@PostInitia|
  00634	ea000067	 b           |$cleanUp$33608|
  00638		 |$LN6@PostInitia|

; 206  : 
; 207  :     // xxx_UpdateConstraint
; 208  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, UPDATE_NAME);

  00638	e59f31c8	 ldr         r3, [pc, #0x1C8]
  0063c	e59d2244	 ldr         r2, [sp, #0x244]
  00640	e2822e42	 add         r2, r2, #0x42, 28
  00644	e59f11ac	 ldr         r1, [pc, #0x1AC]
  00648	e28d0004	 add         r0, sp, #4
  0064c	eb000000	 bl          swprintf

; 209  :     m_fns.UpdateConstraint = reinterpret_cast<fnUpdateConstraint>(
; 210  :                             ::GetProcAddress(m_hModule, szBuffer)
; 211  :                             );

  00650	e28d1004	 add         r1, sp, #4
  00654	e59d3244	 ldr         r3, [sp, #0x244]
  00658	e5930000	 ldr         r0, [r3]
  0065c	eb000000	 bl          GetProcAddressW
  00660	e58d0224	 str         r0, [sp, #0x224]
  00664	e59d3244	 ldr         r3, [sp, #0x244]
  00668	e2833c0a	 add         r3, r3, #0xA, 24
  0066c	e2832034	 add         r2, r3, #0x34
  00670	e59d3224	 ldr         r3, [sp, #0x224]
  00674	e5823000	 str         r3, [r2]

; 212  :     if (m_fns.UpdateConstraint == NULL) goto cleanUp;

  00678	e59d3244	 ldr         r3, [sp, #0x244]
  0067c	e2833c0a	 add         r3, r3, #0xA, 24
  00680	e2833034	 add         r3, r3, #0x34
  00684	e5933000	 ldr         r3, [r3]
  00688	e3530000	 cmp         r3, #0
  0068c	1a000001	 bne         |$LN4@PostInitia|
  00690	ea000050	 b           |$LN3@PostInitia|
  00694	ea00004f	 b           |$cleanUp$33608|
  00698		 |$LN4@PostInitia|

; 213  : 
; 214  :     // xxx_CloseConstraint
; 215  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, CLOSE_NAME);

  00698	e59f3164	 ldr         r3, [pc, #0x164]
  0069c	e59d2244	 ldr         r2, [sp, #0x244]
  006a0	e2822e42	 add         r2, r2, #0x42, 28
  006a4	e59f114c	 ldr         r1, [pc, #0x14C]
  006a8	e28d0004	 add         r0, sp, #4
  006ac	eb000000	 bl          swprintf

; 216  :     m_fns.CloseConstraint = reinterpret_cast<fnCloseConstraint>(
; 217  :                             ::GetProcAddress(m_hModule, szBuffer)
; 218  :                             );

  006b0	e28d1004	 add         r1, sp, #4
  006b4	e59d3244	 ldr         r3, [sp, #0x244]
  006b8	e5930000	 ldr         r0, [r3]
  006bc	eb000000	 bl          GetProcAddressW
  006c0	e58d0228	 str         r0, [sp, #0x228]
  006c4	e59d3244	 ldr         r3, [sp, #0x244]
  006c8	e2833c0a	 add         r3, r3, #0xA, 24
  006cc	e2832038	 add         r2, r3, #0x38
  006d0	e59d3228	 ldr         r3, [sp, #0x228]
  006d4	e5823000	 str         r3, [r2]

; 219  :     if (m_fns.CloseConstraint == NULL) goto cleanUp;

  006d8	e59d3244	 ldr         r3, [sp, #0x244]
  006dc	e2833c0a	 add         r3, r3, #0xA, 24
  006e0	e2833038	 add         r3, r3, #0x38
  006e4	e5933000	 ldr         r3, [r3]
  006e8	e3530000	 cmp         r3, #0
  006ec	1a000001	 bne         |$LN2@PostInitia|
  006f0	ea000038	 b           |$LN1@PostInitia|
  006f4	ea000037	 b           |$cleanUp$33608|
  006f8		 |$LN2@PostInitia|

; 220  : 
; 221  :     // xxx_CreateConstraintCallback
; 222  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, CREATECB_NAME);

  006f8	e59f3100	 ldr         r3, [pc, #0x100]
  006fc	e59d2244	 ldr         r2, [sp, #0x244]
  00700	e2822e42	 add         r2, r2, #0x42, 28
  00704	e59f10ec	 ldr         r1, [pc, #0xEC]
  00708	e28d0004	 add         r0, sp, #4
  0070c	eb000000	 bl          swprintf

; 223  :     m_fns.InsertConstraintCallback = reinterpret_cast<fnInsertConstraintCallback>(
; 224  :                             ::GetProcAddress(m_hModule, szBuffer)
; 225  :                             );

  00710	e28d1004	 add         r1, sp, #4
  00714	e59d3244	 ldr         r3, [sp, #0x244]
  00718	e5930000	 ldr         r0, [r3]
  0071c	eb000000	 bl          GetProcAddressW
  00720	e58d022c	 str         r0, [sp, #0x22C]
  00724	e59d3244	 ldr         r3, [sp, #0x244]
  00728	e2833c0a	 add         r3, r3, #0xA, 24
  0072c	e283203c	 add         r2, r3, #0x3C
  00730	e59d322c	 ldr         r3, [sp, #0x22C]
  00734	e5823000	 str         r3, [r2]

; 226  : 
; 227  :     // xxx_RemoveConstraintCallback
; 228  :     _stprintf(szBuffer, FUNCTION_FMT, m_szConstraintName, REMOVECB_NAME);

  00738	e59f30bc	 ldr         r3, [pc, #0xBC]
  0073c	e59d2244	 ldr         r2, [sp, #0x244]
  00740	e2822e42	 add         r2, r2, #0x42, 28
  00744	e59f10ac	 ldr         r1, [pc, #0xAC]
  00748	e28d0004	 add         r0, sp, #4
  0074c	eb000000	 bl          swprintf

; 229  :     m_fns.RemoveConstraintCallback = reinterpret_cast<fnRemoveConstraintCallback>(
; 230  :                             ::GetProcAddress(m_hModule, szBuffer)
; 231  :                             );

  00750	e28d1004	 add         r1, sp, #4
  00754	e59d3244	 ldr         r3, [sp, #0x244]
  00758	e5930000	 ldr         r0, [r3]
  0075c	eb000000	 bl          GetProcAddressW
  00760	e58d0230	 str         r0, [sp, #0x230]
  00764	e59d3244	 ldr         r3, [sp, #0x244]
  00768	e2832d29	 add         r2, r3, #0x29, 26
  0076c	e59d3230	 ldr         r3, [sp, #0x230]
  00770	e5823000	 str         r3, [r2]

; 232  : 
; 233  :     // try to initialize constraint adapter
; 234  :     m_hConstraintAdapter = m_fns.InitConstraint(m_szRegKey);

  00774	e59d3244	 ldr         r3, [sp, #0x244]
  00778	e2830f86	 add         r0, r3, #0x86, 30
  0077c	e59d3244	 ldr         r3, [sp, #0x244]
  00780	e2833c0a	 add         r3, r3, #0xA, 24
  00784	e2833028	 add         r3, r3, #0x28
  00788	e5933000	 ldr         r3, [r3]
  0078c	e1a0e00f	 mov         lr, pc
  00790	e12fff13	 bx          r3
  00794	e58d0234	 str         r0, [sp, #0x234]
  00798	e59d3244	 ldr         r3, [sp, #0x244]
  0079c	e2832f85	 add         r2, r3, #0x85, 30
  007a0	e59d3234	 ldr         r3, [sp, #0x234]
  007a4	e5823000	 str         r3, [r2]

; 235  :     rc = m_hConstraintAdapter != NULL;

  007a8	e59d3244	 ldr         r3, [sp, #0x244]
  007ac	e2833f85	 add         r3, r3, #0x85, 30
  007b0	e5933000	 ldr         r3, [r3]
  007b4	e3530000	 cmp         r3, #0
  007b8	0a000002	 beq         |$LN15@PostInitia|
  007bc	e3a03001	 mov         r3, #1
  007c0	e58d3238	 str         r3, [sp, #0x238]
  007c4	ea000001	 b           |$LN16@PostInitia|
  007c8		 |$LN15@PostInitia|
  007c8	e3a03000	 mov         r3, #0
  007cc	e58d3238	 str         r3, [sp, #0x238]
  007d0		 |$LN16@PostInitia|
  007d0	e59d3238	 ldr         r3, [sp, #0x238]
  007d4	e58d3000	 str         r3, [sp]
  007d8		 |$LN1@PostInitia|
  007d8		 |$LN3@PostInitia|
  007d8		 |$LN5@PostInitia|
  007d8		 |$LN7@PostInitia|
  007d8		 |$LN9@PostInitia|
  007d8		 |$LN11@PostInitia|
  007d8		 |$cleanUp$33608|

; 236  :     
; 237  : cleanUp:
; 238  :     return rc;

  007d8	e59d020c	 ldr         r0, [sp, #0x20C]
  007dc	eb000000	 bl          __security_check_cookie
  007e0	e59d3000	 ldr         r3, [sp]
  007e4	e58d3210	 str         r3, [sp, #0x210]

; 239  : }

  007e8	e59d0210	 ldr         r0, [sp, #0x210]
  007ec	e28ddf8f	 add         sp, sp, #0x8F, 30
  007f0	e89d6000	 ldmia       sp, {sp, lr}
  007f4	e12fff1e	 bx          lr
  007f8		 |$LN20@PostInitia|
  007f8		 |$LN21@PostInitia|
  007f8	00000000	 DCD         |??_C@_1M@LLCLNBHO@?$AA?$CF?$AAs?$AA_?$AA?$CF?$AAs?$AA?$AA@|
  007fc		 |$LN22@PostInitia|
  007fc	00000000	 DCD         |??_C@_1DC@MIEIBCNG@?$AAR?$AAe?$AAm?$AAo?$AAv?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@|
  00800		 |$LN23@PostInitia|
  00800	00000000	 DCD         |??_C@_1DC@FFEFBBEA@?$AAI?$AAn?$AAs?$AAe?$AAr?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AAC?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?$AA@|
  00804		 |$LN24@PostInitia|
  00804	00000000	 DCD         |??_C@_1CA@KPFDBJFI@?$AAC?$AAl?$AAo?$AAs?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  00808		 |$LN25@PostInitia|
  00808	00000000	 DCD         |??_C@_1CC@PEJPHCBL@?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  0080c		 |$LN26@PostInitia|
  0080c	00000000	 DCD         |??_C@_1CC@OIBGDBB@?$AAC?$AAr?$AAe?$AAa?$AAt?$AAe?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  00810		 |$LN27@PostInitia|
  00810	00000000	 DCD         |??_C@_1CC@FICNHNOC@?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  00814		 |$LN28@PostInitia|
  00814	00000000	 DCD         |??_C@_1BO@DDNGAMNL@?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?$AA@|
  00818		 |$LN29@PostInitia|
  00818	00000000	 DCD         |__security_cookie|
  0081c		 |$M33707|

			 ENDP  ; |?PostInitialize@ConstraintAdapter@@QAAHXZ|, ConstraintAdapter::PostInitialize

	EXPORT	|?Uninitialize@ConstraintAdapter@@QAAXXZ| ; ConstraintAdapter::Uninitialize
	IMPORT	|memset|
	IMPORT	|FreeLibrary|

  00020			 AREA	 |.pdata|, PDATA
|$T33724| DCD	|$LN7@Uninitiali|
	DCD	0x40004703
; Function compile flags: /Odtp

  0081c			 AREA	 |.text|, CODE, ARM

  0081c		 |?Uninitialize@ConstraintAdapter@@QAAXXZ| PROC ; ConstraintAdapter::Uninitialize

; 248  : {

  0081c		 |$LN7@Uninitiali|
  0081c	e1a0c00d	 mov         r12, sp
  00820	e92d0001	 stmdb       sp!, {r0}
  00824	e92d5000	 stmdb       sp!, {r12, lr}
  00828		 |$M33721|

; 249  :     if (m_fns.CloseConstraint != NULL && m_hConstraintAdapter != NULL)

  00828	e59d3008	 ldr         r3, [sp, #8]
  0082c	e2833c0a	 add         r3, r3, #0xA, 24
  00830	e2833038	 add         r3, r3, #0x38
  00834	e5933000	 ldr         r3, [r3]
  00838	e3530000	 cmp         r3, #0
  0083c	0a00000d	 beq         |$LN2@Uninitiali|
  00840	e59d3008	 ldr         r3, [sp, #8]
  00844	e2833f85	 add         r3, r3, #0x85, 30
  00848	e5933000	 ldr         r3, [r3]
  0084c	e3530000	 cmp         r3, #0
  00850	0a000008	 beq         |$LN2@Uninitiali|

; 250  :         {
; 251  :         m_fns.CloseConstraint(m_hConstraintAdapter);

  00854	e59d3008	 ldr         r3, [sp, #8]
  00858	e2833f85	 add         r3, r3, #0x85, 30
  0085c	e5930000	 ldr         r0, [r3]
  00860	e59d3008	 ldr         r3, [sp, #8]
  00864	e2833c0a	 add         r3, r3, #0xA, 24
  00868	e2833038	 add         r3, r3, #0x38
  0086c	e5933000	 ldr         r3, [r3]
  00870	e1a0e00f	 mov         lr, pc
  00874	e12fff13	 bx          r3
  00878		 |$LN2@Uninitiali|

; 252  :         }
; 253  : 
; 254  :     if (m_hModule != NULL)

  00878	e59d3008	 ldr         r3, [sp, #8]
  0087c	e5933000	 ldr         r3, [r3]
  00880	e3530000	 cmp         r3, #0
  00884	0a000002	 beq         |$LN1@Uninitiali|

; 255  :         {
; 256  :         FreeLibrary(m_hModule);

  00888	e59d3008	 ldr         r3, [sp, #8]
  0088c	e5930000	 ldr         r0, [r3]
  00890	eb000000	 bl          FreeLibrary
  00894		 |$LN1@Uninitiali|

; 257  :         }
; 258  : 
; 259  :     // reset member variables
; 260  :     *m_szDll = NULL;

  00894	e59d3008	 ldr         r3, [sp, #8]
  00898	e283200c	 add         r2, r3, #0xC
  0089c	e3a03000	 mov         r3, #0
  008a0	e1c230b0	 strh        r3, [r2]

; 261  :     m_hModule = NULL;

  008a4	e59d2008	 ldr         r2, [sp, #8]
  008a8	e3a03000	 mov         r3, #0
  008ac	e5823000	 str         r3, [r2]

; 262  :     m_dwOrder = 0;

  008b0	e59d3008	 ldr         r3, [sp, #8]
  008b4	e2832004	 add         r2, r3, #4
  008b8	e3a03000	 mov         r3, #0
  008bc	e5823000	 str         r3, [r2]

; 263  :     m_nClassIds = 0;

  008c0	e59d3008	 ldr         r3, [sp, #8]
  008c4	e2832008	 add         r2, r3, #8
  008c8	e3a03000	 mov         r3, #0
  008cc	e5823000	 str         r3, [r2]

; 264  :     *m_szRegKey = NULL;

  008d0	e59d3008	 ldr         r3, [sp, #8]
  008d4	e2832f86	 add         r2, r3, #0x86, 30
  008d8	e3a03000	 mov         r3, #0
  008dc	e1c230b0	 strh        r3, [r2]

; 265  :     *m_szConstraintName = NULL;

  008e0	e59d3008	 ldr         r3, [sp, #8]
  008e4	e2832e42	 add         r2, r3, #0x42, 28
  008e8	e3a03000	 mov         r3, #0
  008ec	e1c230b0	 strh        r3, [r2]

; 266  :     m_hConstraintAdapter = NULL;

  008f0	e59d3008	 ldr         r3, [sp, #8]
  008f4	e2832f85	 add         r2, r3, #0x85, 30
  008f8	e3a03000	 mov         r3, #0
  008fc	e5823000	 str         r3, [r2]

; 267  :     memset(&m_fns, 0, sizeof(ConstraintAdapterFns));

  00900	e3a0201c	 mov         r2, #0x1C
  00904	e3a01000	 mov         r1, #0
  00908	e59d3008	 ldr         r3, [sp, #8]
  0090c	e2833c0a	 add         r3, r3, #0xA, 24
  00910	e2830028	 add         r0, r3, #0x28
  00914	eb000000	 bl          memset

; 268  :     memset(m_rgClasses, 0, sizeof(DWORD)*MAX_CONSTRAINT_CLASSES);

  00918	e3a02b01	 mov         r2, #1, 22
  0091c	e3a01000	 mov         r1, #0
  00920	e59d3008	 ldr         r3, [sp, #8]
  00924	e2833c06	 add         r3, r3, #6, 24
  00928	e2830028	 add         r0, r3, #0x28
  0092c	eb000000	 bl          memset

; 269  : }

  00930	e89d6000	 ldmia       sp, {sp, lr}
  00934	e12fff1e	 bx          lr
  00938		 |$M33722|

			 ENDP  ; |?Uninitialize@ConstraintAdapter@@QAAXXZ|, ConstraintAdapter::Uninitialize

	END
