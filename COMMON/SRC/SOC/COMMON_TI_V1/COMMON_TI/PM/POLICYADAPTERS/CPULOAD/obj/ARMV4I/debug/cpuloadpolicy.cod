; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\POLICYADAPTERS\CPULOAD\cpuloadpolicy.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BK@GGPFJAKI@?$AAO?$AAp?$AAm?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@JBFHLCFD@?$AAO?$AAp?$AAm?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@PHGEHICJ@?$AAB?$AAo?$AAo?$AAt?$AAO?$AAp?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@PIFCPJOI@?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AAO?$AAp?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@PCJGMNEF@?$AAF?$AAl?$AAo?$AAo?$AAr?$AAO?$AAp?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@MDMFEMEA@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AAO?$AAp?$AAm?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17MABAPADF@?$AAi?$AAr?$AAq?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@KFGACGKF@?$AAB?$AAo?$AAo?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@IFDCDHND@?$AAB?$AAo?$AAo?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@DGBBDLHK@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@CDPNPEPF@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@KHABJPHC@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|s_bSleeping| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@GGPFJAKI@?$AAO?$AAp?$AAm?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "h", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@JBFHLCFD@?$AAO?$AAp?$AAm?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "q"
	DCB	0x0, "u", 0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@PHGEHICJ@?$AAB?$AAo?$AAo?$AAt?$AAO?$AAp?$AAm?$AA?$AA@| DCB "B", 0x0
	DCB	"o", 0x0, "o", 0x0, "t", 0x0, "O", 0x0, "p", 0x0, "m", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@PIFCPJOI@?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AAO?$AAp?$AAm?$AA?$AA@| DCB "N"
	DCB	0x0, "o", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "a", 0x0, "l"
	DCB	0x0, "O", 0x0, "p", 0x0, "m", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@PCJGMNEF@?$AAF?$AAl?$AAo?$AAo?$AAr?$AAO?$AAp?$AAm?$AA?$AA@| DCB "F"
	DCB	0x0, "l", 0x0, "o", 0x0, "o", 0x0, "r", 0x0, "O", 0x0, "p"
	DCB	0x0, "m", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@MDMFEMEA@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AAO?$AAp?$AAm?$AA?$AA@| DCB "C"
	DCB	0x0, "e", 0x0, "i", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "O", 0x0, "p", 0x0, "m", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|g_policyRegParams| DCD |??_C@_1BM@KHABJPHC@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x20
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BM@CDPNPEPF@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x24
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1CG@DGBBDLHK@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x34
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x38
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BM@IFDCDHND@?$AAB?$AAo?$AAo?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
	DCD	0x2
	DCD	0x1
	DCD	0x44
	DCD	0x208
	DCD	0x0
	DCD	|??_C@_1BI@KFGACGKF@?$AAB?$AAo?$AAo?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x40
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_17MABAPADF@?$AAi?$AAr?$AAq?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x24c
	DCD	0x4
	DCD	0x0
|g_CpuFamilypolicyRegParams| DCD |??_C@_1BG@MDMFEMEA@?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AAO?$AAp?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x28
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BC@PCJGMNEF@?$AAF?$AAl?$AAo?$AAo?$AAr?$AAO?$AAp?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x2c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BG@PIFCPJOI@?$AAN?$AAo?$AAm?$AAi?$AAn?$AAa?$AAl?$AAO?$AAp?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x30
	DCD	0x4
	DCD	0x3
	DCD	|??_C@_1BA@PHGEHICJ@?$AAB?$AAo?$AAo?$AAt?$AAO?$AAp?$AAm?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x3c
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BK@JBFHLCFD@?$AAO?$AAp?$AAm?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$AA@|
	DCD	0x3
	DCD	0x0
	DCD	0x2a0
	DCD	0x28
	DCD	0x0
	DCD	|??_C@_1BK@GGPFJAKI@?$AAO?$AAp?$AAm?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@|
	DCD	0x3
	DCD	0x0
	DCD	0x2c8
	DCD	0x28
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17MABAPADF@?$AAi?$AAr?$AAq?$AA?$AA@| DCB "i", 0x0, "r", 0x0, "q", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@KFGACGKF@?$AAB?$AAo?$AAo?$AAt?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "T", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IFDCDHND@?$AAB?$AAo?$AAo?$AAt?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "B"
	DCB	0x0, "o", 0x0, "o", 0x0, "t", 0x0, "E", 0x0, "v", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@OJGHJKJA@?$AAp?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "p"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@DGBBDLHK@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAT?$AAh?$AAr?$AAe?$AAs?$AAh?$AAo?$AAl?$AAd?$AA?$AA@| DCB "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "h", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@CDPNPEPF@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@| DCB "M"
	DCB	0x0, "o", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "W", 0x0, "i", 0x0, "n", 0x0, "d", 0x0, "o", 0x0, "w"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@KHABJPHC@?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| DCB "M"
	DCB	0x0, "o", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "o", 0x0, "r"
	DCB	0x0, "P", 0x0, "e", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "d"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "T", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "P", 0x0, "U", 0x0
	DCB	"L", 0x0, "O", 0x0, "A", 0x0, "D", 0x0, "P", 0x0, "O", 0x0
	DCB	"L", 0x0, "I", 0x0, "C", 0x0, "Y", 0x0, 0x0, 0x0
	%	30
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"O", 0x0, "P", 0x0, "M", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3
	EXPORT	|SetEvent|
	EXPORT	|?DvfsConstraintCallback@@YAHPAXK0I@Z|	; DvfsConstraintCallback

  00004			 AREA	 |.bss|, NOINIT
|s_CpuPolicyInfo| % 0x2f4
|s_currentOpm| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T36785| DCD	|$LN7@DvfsConstr|
	DCD	0x40002004
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\policyadapters\cpuload\cpuloadpolicy.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DvfsConstraintCallback@@YAHPAXK0I@Z| PROC ; DvfsConstraintCallback

; 184  : {

  00000		 |$LN7@DvfsConstr|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M36782|

; 185  :     UNREFERENCED_PARAMETER(size);
; 186  :     UNREFERENCED_PARAMETER(hRefContext);
; 187  :     if (msg == CONSTRAINT_MSG_DVFS_NEWOPM)

  00010	e59d2010	 ldr         r2, [sp, #0x10]
  00014	e3a03801	 mov         r3, #1, 16
  00018	e3833001	 orr         r3, r3, #1
  0001c	e1520003	 cmp         r2, r3
  00020	1a00000d	 bne         |$LN2@DvfsConstr|

; 188  :         {
; 189  :         s_currentOpm = (DWORD)pParam;

  00024	e59d2014	 ldr         r2, [sp, #0x14]
  00028	e59f3048	 ldr         r3, [pc, #0x48]
  0002c	e5832000	 str         r2, [r3]

; 190  :         if (s_bSleeping == TRUE && s_currentOpm > kOpm0)

  00030	e59f3044	 ldr         r3, [pc, #0x44]
  00034	e5933000	 ldr         r3, [r3]
  00038	e3530001	 cmp         r3, #1
  0003c	1a000006	 bne         |$LN1@DvfsConstr|
  00040	e59f3030	 ldr         r3, [pc, #0x30]
  00044	e5933000	 ldr         r3, [r3]
  00048	e3530000	 cmp         r3, #0
  0004c	9a000002	 bls         |$LN1@DvfsConstr|

; 191  :             {
; 192  :             // wake load monitor if sleeping
; 193  :             SetEvent(s_CpuPolicyInfo.hCpuLoadEvent);

  00050	e59f301c	 ldr         r3, [pc, #0x1C]
  00054	e593000c	 ldr         r0, [r3, #0xC]
  00058	eb000000	 bl          SetEvent
  0005c		 |$LN1@DvfsConstr|
  0005c		 |$LN2@DvfsConstr|

; 194  :             }
; 195  :         }
; 196  :     return TRUE;

  0005c	e3a03001	 mov         r3, #1
  00060	e58d3000	 str         r3, [sp]

; 197  : }

  00064	e59d0000	 ldr         r0, [sp]
  00068	e28dd004	 add         sp, sp, #4
  0006c	e89d6000	 ldmia       sp, {sp, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN8@DvfsConstr|
  00074		 |$LN9@DvfsConstr|
  00074	00000000	 DCD         |s_CpuPolicyInfo|
  00078		 |$LN10@DvfsConstr|
  00078	00000000	 DCD         |s_currentOpm|
  0007c		 |$LN11@DvfsConstr|
  0007c	00000000	 DCD         |s_bSleeping|
  00080		 |$M36783|

			 ENDP  ; |?DvfsConstraintCallback@@YAHPAXK0I@Z|, DvfsConstraintCallback

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36795| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M36792|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M36793|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1FC@EELKMJGP@?$AAm?$AAh?$AAz?$AAS?$AAu?$AAm?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAv?$AAg?$AAm?$AAh?$AAz?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAB?$AAu?$AAc@| [ DATA ] ; `string'
	EXPORT	|?UpdateTimeBuckets@@YAXPAUBucketInfo_t@@K@Z| ; UpdateTimeBuckets
	IMPORT	|NKDbgPrintfW|
	IMPORT	|__rt_udiv|

  00008			 AREA	 |.pdata|, PDATA
|$T36807| DCD	|$LN9@UpdateTime|
	DCD	0x40006204
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\policyadapters\cpuload\cpuloadpolicy.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@EELKMJGP@?$AAm?$AAh?$AAz?$AAS?$AAu?$AAm?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAv?$AAg?$AAm?$AAh?$AAz?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAB?$AAu?$AAc@| DCB "m"
	DCB	0x0, "h", 0x0, "z", 0x0, "S", 0x0, "u", 0x0, "m", 0x0, "="
	DCB	0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "a", 0x0, "v"
	DCB	0x0, "g", 0x0, "m", 0x0, "h", 0x0, "z", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "u", 0x0, "r"
	DCB	0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "B", 0x0, "u"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00080			 AREA	 |.text|, CODE, ARM

  00080		 |?UpdateTimeBuckets@@YAXPAUBucketInfo_t@@K@Z| PROC ; UpdateTimeBuckets

; 210  : {

  00080		 |$LN9@UpdateTime|
  00080	e1a0c00d	 mov         r12, sp
  00084	e92d0003	 stmdb       sp!, {r0, r1}
  00088	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0008c	e24dd010	 sub         sp, sp, #0x10
  00090		 |$M36804|

; 211  :     int idx = pBucketInfo->currentBucket;

  00090	e59d301c	 ldr         r3, [sp, #0x1C]
  00094	e2833008	 add         r3, r3, #8
  00098	e5933000	 ldr         r3, [r3]
  0009c	e58d3004	 str         r3, [sp, #4]

; 212  :     DWORD mhzSum = pBucketInfo->mhzSum;

  000a0	e59d301c	 ldr         r3, [sp, #0x1C]
  000a4	e2833004	 add         r3, r3, #4
  000a8	e5933000	 ldr         r3, [r3]
  000ac	e58d3000	 str         r3, [sp]

; 213  : 
; 214  :     // subtract data point from running total
; 215  :     mhzSum -= pBucketInfo->rgBuckets[idx];

  000b0	e59d301c	 ldr         r3, [sp, #0x1C]
  000b4	e283100c	 add         r1, r3, #0xC
  000b8	e59d2004	 ldr         r2, [sp, #4]
  000bc	e3a03004	 mov         r3, #4
  000c0	e0030392	 mul         r3, r2, r3
  000c4	e0813003	 add         r3, r1, r3
  000c8	e59d2000	 ldr         r2, [sp]
  000cc	e5933000	 ldr         r3, [r3]
  000d0	e0423003	 sub         r3, r2, r3
  000d4	e58d3000	 str         r3, [sp]

; 216  : 
; 217  :     // update with new data point
; 218  :     pBucketInfo->rgBuckets[idx] = mhz;

  000d8	e59d301c	 ldr         r3, [sp, #0x1C]
  000dc	e283100c	 add         r1, r3, #0xC
  000e0	e59d2004	 ldr         r2, [sp, #4]
  000e4	e3a03004	 mov         r3, #4
  000e8	e0030392	 mul         r3, r2, r3
  000ec	e0812003	 add         r2, r1, r3
  000f0	e59d3020	 ldr         r3, [sp, #0x20]
  000f4	e5823000	 str         r3, [r2]

; 219  : 
; 220  :     // update running total
; 221  :     mhzSum += mhz;

  000f8	e59d2000	 ldr         r2, [sp]
  000fc	e59d3020	 ldr         r3, [sp, #0x20]
  00100	e0823003	 add         r3, r2, r3
  00104	e58d3000	 str         r3, [sp]

; 222  :     pBucketInfo->mhzSum = mhzSum;

  00108	e59d301c	 ldr         r3, [sp, #0x1C]
  0010c	e2832004	 add         r2, r3, #4
  00110	e59d3000	 ldr         r3, [sp]
  00114	e5823000	 str         r3, [r2]

; 223  : 
; 224  :     // move to next bucket
; 225  :     pBucketInfo->units = min(pBucketInfo->units + 1, s_CpuPolicyInfo.bucketCount);

  00118	e59d301c	 ldr         r3, [sp, #0x1C]
  0011c	e5933000	 ldr         r3, [r3]
  00120	e2832001	 add         r2, r3, #1
  00124	e59f30d8	 ldr         r3, [pc, #0xD8]
  00128	e5933014	 ldr         r3, [r3, #0x14]
  0012c	e1520003	 cmp         r2, r3
  00130	2a000004	 bcs         |$LN3@UpdateTime|
  00134	e59d301c	 ldr         r3, [sp, #0x1C]
  00138	e5933000	 ldr         r3, [r3]
  0013c	e2833001	 add         r3, r3, #1
  00140	e58d3008	 str         r3, [sp, #8]
  00144	ea000002	 b           |$LN4@UpdateTime|
  00148		 |$LN3@UpdateTime|
  00148	e59f30b4	 ldr         r3, [pc, #0xB4]
  0014c	e5933014	 ldr         r3, [r3, #0x14]
  00150	e58d3008	 str         r3, [sp, #8]
  00154		 |$LN4@UpdateTime|
  00154	e59d2008	 ldr         r2, [sp, #8]
  00158	e59d301c	 ldr         r3, [sp, #0x1C]
  0015c	e5832000	 str         r2, [r3]

; 226  :     pBucketInfo->currentBucket = (pBucketInfo->currentBucket + 1) % s_CpuPolicyInfo.bucketCount;

  00160	e59d301c	 ldr         r3, [sp, #0x1C]
  00164	e2833008	 add         r3, r3, #8
  00168	e5933000	 ldr         r3, [r3]
  0016c	e2831001	 add         r1, r3, #1
  00170	e59f308c	 ldr         r3, [pc, #0x8C]
  00174	e5930014	 ldr         r0, [r3, #0x14]
  00178	eb000000	 bl          __rt_udiv
  0017c	e59d301c	 ldr         r3, [sp, #0x1C]
  00180	e2833008	 add         r3, r3, #8
  00184	e5831000	 str         r1, [r3]

; 227  : 
; 228  :     DEBUGMSG(ZONE_INFO, (L"mhzSum=%d, avgmhz=%d, currentBucket=%d\r\n",
; 229  :         pBucketInfo->mhzSum >> FRACTION_PART,
; 230  :         (pBucketInfo->mhzSum / pBucketInfo->units) >> FRACTION_PART,
; 231  :         pBucketInfo->currentBucket)
; 232  :         );

  00188	e59f3070	 ldr         r3, [pc, #0x70]
  0018c	e5933440	 ldr         r3, [r3, #0x440]
  00190	e3130008	 tst         r3, #8
  00194	0a000013	 beq         |$LN5@UpdateTime|
  00198	e59d301c	 ldr         r3, [sp, #0x1C]
  0019c	e2833008	 add         r3, r3, #8
  001a0	e5934000	 ldr         r4, [r3]
  001a4	e59d301c	 ldr         r3, [sp, #0x1C]
  001a8	e2833004	 add         r3, r3, #4
  001ac	e5931000	 ldr         r1, [r3]
  001b0	e59d301c	 ldr         r3, [sp, #0x1C]
  001b4	e5930000	 ldr         r0, [r3]
  001b8	eb000000	 bl          __rt_udiv
  001bc	e1a02a20	 mov         r2, r0, lsr #20
  001c0	e59d301c	 ldr         r3, [sp, #0x1C]
  001c4	e2833004	 add         r3, r3, #4
  001c8	e5933000	 ldr         r3, [r3]
  001cc	e1a01a23	 mov         r1, r3, lsr #20
  001d0	e59f0024	 ldr         r0, [pc, #0x24]
  001d4	e1a03004	 mov         r3, r4
  001d8	eb000000	 bl          NKDbgPrintfW
  001dc	e3a03001	 mov         r3, #1
  001e0	e58d300c	 str         r3, [sp, #0xC]
  001e4	ea000001	 b           |$LN6@UpdateTime|
  001e8		 |$LN5@UpdateTime|
  001e8	e3a03000	 mov         r3, #0
  001ec	e58d300c	 str         r3, [sp, #0xC]
  001f0		 |$LN6@UpdateTime|

; 233  : }

  001f0	e28dd010	 add         sp, sp, #0x10
  001f4	e89d6010	 ldmia       sp, {r4, sp, lr}
  001f8	e12fff1e	 bx          lr
  001fc		 |$LN10@UpdateTime|
  001fc		 |$LN11@UpdateTime|
  001fc	00000000	 DCD         |??_C@_1FC@EELKMJGP@?$AAm?$AAh?$AAz?$AAS?$AAu?$AAm?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAa?$AAv?$AAg?$AAm?$AAh?$AAz?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAB?$AAu?$AAc@|
  00200		 |$LN12@UpdateTime|
  00200	00000000	 DCD         |dpCurSettings|
  00204		 |$LN13@UpdateTime|
  00204	00000000	 DCD         |s_CpuPolicyInfo|
  00208		 |$M36805|

			 ENDP  ; |?UpdateTimeBuckets@@YAXPAUBucketInfo_t@@K@Z|, UpdateTimeBuckets

	EXPORT	|ResetEvent|
	EXPORT	|??_C@_1GC@IJBIJFID@?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAm?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AAO?$AAP?$AAM@| [ DATA ] ; `string'
	EXPORT	|?CpuLoadThreadFn@@YAKPAX@Z|		; CpuLoadThreadFn
	IMPORT	|InterruptMask|
	IMPORT	|memset|
	IMPORT	|PmxUpdateConstraint|
	IMPORT	|GetIdleTime|
	IMPORT	|GetTickCount|
	IMPORT	|WaitForSingleObject|

  002fc			 AREA	 |.bss|, NOINIT
|s_requestedOpm| % 0x4

  00010			 AREA	 |.pdata|, PDATA
|$T36821| DCD	|$LN21@CpuLoadThr|
	DCD	0x4000f504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@IJBIJFID@?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAm?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AAO?$AAP?$AAM@| DCB "o"
	DCB	0x0, "p", 0x0, "m", 0x0, "C", 0x0, "u", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "=", 0x0, "O", 0x0, "P"
	DCB	0x0, "M", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "m", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u"
	DCB	0x0, "e", 0x0, "s", 0x0, "t", 0x0, "=", 0x0, "O", 0x0, "P"
	DCB	0x0, "M", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "a"
	DCB	0x0, "v", 0x0, "g", 0x0, " ", 0x0, "m", 0x0, "h", 0x0, "z"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00208			 AREA	 |.text|, CODE, ARM

  00208		 |?CpuLoadThreadFn@@YAKPAX@Z| PROC	; CpuLoadThreadFn

; 242  : {

  00208		 |$LN21@CpuLoadThr|
  00208	e1a0c00d	 mov         r12, sp
  0020c	e92d0001	 stmdb       sp!, {r0}
  00210	e92d5000	 stmdb       sp!, {r12, lr}
  00214	e24dd050	 sub         sp, sp, #0x50
  00218		 |$M36818|

; 243  :     DWORD opm=0;

  00218	e3a03000	 mov         r3, #0
  0021c	e58d3034	 str         r3, [sp, #0x34]

; 244  :     DWORD mhz;
; 245  :     DWORD cpuLoad;
; 246  :     DWORD tickTime;
; 247  :     DWORD idleTime;
; 248  :     DWORD lastTick = 0;

  00220	e3a03000	 mov         r3, #0
  00224	e58d3024	 str         r3, [sp, #0x24]

; 249  :     DWORD lastIdle = 0;

  00228	e3a03000	 mov         r3, #0
  0022c	e58d3020	 str         r3, [sp, #0x20]

; 250  :     DWORD currentTick;
; 251  :     DWORD currentIdle;
; 252  :     DWORD code = WAIT_TIMEOUT;

  00230	e3a03c01	 mov         r3, #1, 24
  00234	e3833002	 orr         r3, r3, #2
  00238	e58d3018	 str         r3, [sp, #0x18]

; 253  :     DWORD ceilingOpm = s_CpuPolicyInfo.dwCeilingOpm;

  0023c	e59f3380	 ldr         r3, [pc, #0x380]
  00240	e5933028	 ldr         r3, [r3, #0x28]
  00244	e58d300c	 str         r3, [sp, #0xC]

; 254  :     DWORD floorOpm = s_CpuPolicyInfo.dwFloorOpm;

  00248	e59f3374	 ldr         r3, [pc, #0x374]
  0024c	e593302c	 ldr         r3, [r3, #0x2C]
  00250	e58d3014	 str         r3, [sp, #0x14]

; 255  :     DWORD timeOut = s_CpuPolicyInfo.dwBootTimeout;

  00254	e59f3368	 ldr         r3, [pc, #0x368]
  00258	e5933040	 ldr         r3, [r3, #0x40]
  0025c	e58d3008	 str         r3, [sp, #8]

; 256  :     BucketInfo_t *pBucketInfo = s_CpuPolicyInfo.pBucketInfo;

  00260	e59f335c	 ldr         r3, [pc, #0x35C]
  00264	e59332f0	 ldr         r3, [r3, #0x2F0]
  00268	e58d3010	 str         r3, [sp, #0x10]

; 257  : 
; 258  :     UNREFERENCED_PARAMETER(pvParam);
; 259  : 
; 260  :     // wait for boot event or timeout
; 261  :     WaitForSingleObject(s_CpuPolicyInfo.hBootEvent, timeOut);

  0026c	e59d1008	 ldr         r1, [sp, #8]
  00270	e59f334c	 ldr         r3, [pc, #0x34C]
  00274	e5930010	 ldr         r0, [r3, #0x10]
  00278	eb000000	 bl          WaitForSingleObject

; 262  : 
; 263  :     // start cpu monitor loop
; 264  :     s_bSleeping = FALSE;

  0027c	e59f2344	 ldr         r2, [pc, #0x344]
  00280	e3a03000	 mov         r3, #0
  00284	e5823000	 str         r3, [r2]
  00288		 |$LN12@CpuLoadThr|

; 265  :     while (s_CpuPolicyInfo.bExit == FALSE)

  00288	e59f3334	 ldr         r3, [pc, #0x334]
  0028c	e593301c	 ldr         r3, [r3, #0x1C]
  00290	e3530000	 cmp         r3, #0
  00294	1a0000c4	 bne         |$LN11@CpuLoadThr|

; 266  :         {
; 267  :         // get tick and idle times
; 268  :         currentTick = GetTickCount();

  00298	eb000000	 bl          GetTickCount
  0029c	e58d003c	 str         r0, [sp, #0x3C]
  002a0	e59d303c	 ldr         r3, [sp, #0x3C]
  002a4	e58d301c	 str         r3, [sp, #0x1C]

; 269  :         currentIdle = GetIdleTime();

  002a8	eb000000	 bl          GetIdleTime
  002ac	e58d0040	 str         r0, [sp, #0x40]
  002b0	e59d3040	 ldr         r3, [sp, #0x40]
  002b4	e58d3000	 str         r3, [sp]

; 270  : 
; 271  :         // calculate tick and idle time from previous
; 272  :         tickTime = currentTick - lastTick;

  002b8	e59d201c	 ldr         r2, [sp, #0x1C]
  002bc	e59d3024	 ldr         r3, [sp, #0x24]
  002c0	e0423003	 sub         r3, r2, r3
  002c4	e58d3028	 str         r3, [sp, #0x28]

; 273  :         idleTime = currentIdle - lastIdle;

  002c8	e59d2000	 ldr         r2, [sp]
  002cc	e59d3020	 ldr         r3, [sp, #0x20]
  002d0	e0423003	 sub         r3, r2, r3
  002d4	e58d3030	 str         r3, [sp, #0x30]

; 274  : 
; 275  :         // check if there's tracked data
; 276  :         if (lastTick != 0)

  002d8	e59d3024	 ldr         r3, [sp, #0x24]
  002dc	e3530000	 cmp         r3, #0
  002e0	0a00006a	 beq         |$LN10@CpuLoadThr|

; 277  :             {
; 278  :             // initially set to 100% cpu load
; 279  :             cpuLoad = 1 << FRACTION_PART;

  002e4	e3a03601	 mov         r3, #1, 12
  002e8	e58d302c	 str         r3, [sp, #0x2C]

; 280  :             if (tickTime != 0)

  002ec	e59d3028	 ldr         r3, [sp, #0x28]
  002f0	e3530000	 cmp         r3, #0
  002f4	0a000006	 beq         |$LN9@CpuLoadThr|

; 281  :                 {
; 282  :                 cpuLoad = cpuLoad - ((idleTime << FRACTION_PART) / tickTime);

  002f8	e59d3030	 ldr         r3, [sp, #0x30]
  002fc	e1a01a03	 mov         r1, r3, lsl #20
  00300	e59d0028	 ldr         r0, [sp, #0x28]
  00304	eb000000	 bl          __rt_udiv
  00308	e59d302c	 ldr         r3, [sp, #0x2C]
  0030c	e0433000	 sub         r3, r3, r0
  00310	e58d302c	 str         r3, [sp, #0x2C]
  00314		 |$LN9@CpuLoadThr|

; 283  :                 }
; 284  : 
; 285  :             mhz = cpuLoad * s_CpuPolicyInfo.rgOpmFrequency[s_currentOpm];

  00314	e59f32b0	 ldr         r3, [pc, #0x2B0]
  00318	e5931000	 ldr         r1, [r3]
  0031c	e3a03004	 mov         r3, #4
  00320	e0020391	 mul         r2, r1, r3
  00324	e59f3298	 ldr         r3, [pc, #0x298]
  00328	e2833e2a	 add         r3, r3, #0x2A, 28
  0032c	e0833002	 add         r3, r3, r2
  00330	e59d202c	 ldr         r2, [sp, #0x2C]
  00334	e5933000	 ldr         r3, [r3]
  00338	e0030392	 mul         r3, r2, r3
  0033c	e58d3004	 str         r3, [sp, #4]

; 286  :             UpdateTimeBuckets(s_CpuPolicyInfo.pBucketInfo, mhz);

  00340	e59d1004	 ldr         r1, [sp, #4]
  00344	e59f3278	 ldr         r3, [pc, #0x278]
  00348	e59302f0	 ldr         r0, [r3, #0x2F0]
  0034c	eb000000	 bl          |?UpdateTimeBuckets@@YAXPAUBucketInfo_t@@K@Z|

; 287  : 
; 288  :             mhz = (s_CpuPolicyInfo.pBucketInfo->mhzSum / s_CpuPolicyInfo.pBucketInfo->units);

  00350	e59f326c	 ldr         r3, [pc, #0x26C]
  00354	e59332f0	 ldr         r3, [r3, #0x2F0]
  00358	e2833004	 add         r3, r3, #4
  0035c	e5931000	 ldr         r1, [r3]
  00360	e59f325c	 ldr         r3, [pc, #0x25C]
  00364	e59332f0	 ldr         r3, [r3, #0x2F0]
  00368	e5930000	 ldr         r0, [r3]
  0036c	eb000000	 bl          __rt_udiv
  00370	e58d0004	 str         r0, [sp, #4]

; 289  : 
; 290  :             // update opm if necessary
; 291  :             if (mhz > s_CpuPolicyInfo.rgOpmRange[s_requestedOpm].ceiling) opm = ceilingOpm;

  00374	e59f3254	 ldr         r3, [pc, #0x254]
  00378	e5931000	 ldr         r1, [r3]
  0037c	e3a03008	 mov         r3, #8
  00380	e0020391	 mul         r2, r1, r3
  00384	e59f3238	 ldr         r3, [pc, #0x238]
  00388	e2833e25	 add         r3, r3, #0x25, 28
  0038c	e0833002	 add         r3, r3, r2
  00390	e2833004	 add         r3, r3, #4
  00394	e59d2004	 ldr         r2, [sp, #4]
  00398	e5933000	 ldr         r3, [r3]
  0039c	e1520003	 cmp         r2, r3
  003a0	9a000001	 bls         |$LN8@CpuLoadThr|
  003a4	e59d300c	 ldr         r3, [sp, #0xC]
  003a8	e58d3034	 str         r3, [sp, #0x34]
  003ac		 |$LN8@CpuLoadThr|

; 292  :             if (mhz <= s_CpuPolicyInfo.rgOpmRange[s_requestedOpm].floor) opm = max(s_requestedOpm - 1, floorOpm);

  003ac	e59f321c	 ldr         r3, [pc, #0x21C]
  003b0	e5931000	 ldr         r1, [r3]
  003b4	e3a03008	 mov         r3, #8
  003b8	e0020391	 mul         r2, r1, r3
  003bc	e59f3200	 ldr         r3, [pc, #0x200]
  003c0	e2833e25	 add         r3, r3, #0x25, 28
  003c4	e0833002	 add         r3, r3, r2
  003c8	e59d2004	 ldr         r2, [sp, #4]
  003cc	e5933000	 ldr         r3, [r3]
  003d0	e1520003	 cmp         r2, r3
  003d4	8a00000e	 bhi         |$LN7@CpuLoadThr|
  003d8	e59f31f0	 ldr         r3, [pc, #0x1F0]
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e2432001	 sub         r2, r3, #1
  003e4	e59d3014	 ldr         r3, [sp, #0x14]
  003e8	e1520003	 cmp         r2, r3
  003ec	9a000004	 bls         |$LN15@CpuLoadThr|
  003f0	e59f31d8	 ldr         r3, [pc, #0x1D8]
  003f4	e5933000	 ldr         r3, [r3]
  003f8	e2433001	 sub         r3, r3, #1
  003fc	e58d3044	 str         r3, [sp, #0x44]
  00400	ea000001	 b           |$LN16@CpuLoadThr|
  00404		 |$LN15@CpuLoadThr|
  00404	e59d3014	 ldr         r3, [sp, #0x14]
  00408	e58d3044	 str         r3, [sp, #0x44]
  0040c		 |$LN16@CpuLoadThr|
  0040c	e59d3044	 ldr         r3, [sp, #0x44]
  00410	e58d3034	 str         r3, [sp, #0x34]
  00414		 |$LN7@CpuLoadThr|

; 293  :             if ((opm > s_CpuPolicyInfo.dwNominalOpm) && (s_requestedOpm < s_CpuPolicyInfo.dwNominalOpm)) opm = s_CpuPolicyInfo.dwNominalOpm;

  00414	e59d2034	 ldr         r2, [sp, #0x34]
  00418	e59f31a4	 ldr         r3, [pc, #0x1A4]
  0041c	e5933030	 ldr         r3, [r3, #0x30]
  00420	e1520003	 cmp         r2, r3
  00424	9a000008	 bls         |$LN6@CpuLoadThr|
  00428	e59f31a0	 ldr         r3, [pc, #0x1A0]
  0042c	e5932000	 ldr         r2, [r3]
  00430	e59f318c	 ldr         r3, [pc, #0x18C]
  00434	e5933030	 ldr         r3, [r3, #0x30]
  00438	e1520003	 cmp         r2, r3
  0043c	2a000002	 bcs         |$LN6@CpuLoadThr|
  00440	e59f317c	 ldr         r3, [pc, #0x17C]
  00444	e5933030	 ldr         r3, [r3, #0x30]
  00448	e58d3034	 str         r3, [sp, #0x34]
  0044c		 |$LN6@CpuLoadThr|

; 294  : 
; 295  :             RETAILMSG(ZONE_OPM,
; 296  :                 (L"opmCurrent=OPM%d, opmRequest=OPM%d, avg mhz=%d\r\n",
; 297  :                 s_currentOpm, opm, mhz >> FRACTION_PART)
; 298  :                 );

  0044c	e59f3184	 ldr         r3, [pc, #0x184]
  00450	e5933440	 ldr         r3, [r3, #0x440]
  00454	e3130010	 tst         r3, #0x10
  00458	0a000009	 beq         |$LN17@CpuLoadThr|
  0045c	e59d3004	 ldr         r3, [sp, #4]
  00460	e1a03a23	 mov         r3, r3, lsr #20
  00464	e59d2034	 ldr         r2, [sp, #0x34]
  00468	e59f115c	 ldr         r1, [pc, #0x15C]
  0046c	e5911000	 ldr         r1, [r1]
  00470	e59f015c	 ldr         r0, [pc, #0x15C]
  00474	eb000000	 bl          NKDbgPrintfW
  00478	e3a03001	 mov         r3, #1
  0047c	e58d3048	 str         r3, [sp, #0x48]
  00480	ea000001	 b           |$LN18@CpuLoadThr|
  00484		 |$LN17@CpuLoadThr|
  00484	e3a03000	 mov         r3, #0
  00488	e58d3048	 str         r3, [sp, #0x48]
  0048c		 |$LN18@CpuLoadThr|

; 299  :             }
; 300  :         else

  0048c	ea000002	 b           |$LN5@CpuLoadThr|
  00490		 |$LN10@CpuLoadThr|

; 301  :             {
; 302  :             opm = s_CpuPolicyInfo.dwNominalOpm;

  00490	e59f312c	 ldr         r3, [pc, #0x12C]
  00494	e5933030	 ldr         r3, [r3, #0x30]
  00498	e58d3034	 str         r3, [sp, #0x34]
  0049c		 |$LN5@CpuLoadThr|

; 303  :             }
; 304  : 
; 305  :         // update operating point
; 306  :         if (s_requestedOpm != opm)

  0049c	e59f312c	 ldr         r3, [pc, #0x12C]
  004a0	e5932000	 ldr         r2, [r3]
  004a4	e59d3034	 ldr         r3, [sp, #0x34]
  004a8	e1520003	 cmp         r2, r3
  004ac	0a000008	 beq         |$LN4@CpuLoadThr|

; 307  :             {
; 308  :             // update operating mode
; 309  :             PmxUpdateConstraint(s_CpuPolicyInfo.hDvfsConstraint,
; 310  :                         CONSTRAINT_MSG_DVFS_REQUEST,
; 311  :                         (void*)&opm,
; 312  :                         sizeof(DWORD)
; 313  :                         );

  004b0	e3a03004	 mov         r3, #4
  004b4	e28d2034	 add         r2, sp, #0x34
  004b8	e3a01001	 mov         r1, #1
  004bc	e59f0100	 ldr         r0, [pc, #0x100]
  004c0	e5900000	 ldr         r0, [r0]
  004c4	eb000000	 bl          PmxUpdateConstraint

; 314  : 
; 315  :             s_requestedOpm = opm;

  004c8	e59d2034	 ldr         r2, [sp, #0x34]
  004cc	e59f30fc	 ldr         r3, [pc, #0xFC]
  004d0	e5832000	 str         r2, [r3]
  004d4		 |$LN4@CpuLoadThr|

; 316  :             }
; 317  : 
; 318  :         if (s_currentOpm == kOpm0)

  004d4	e59f30f0	 ldr         r3, [pc, #0xF0]
  004d8	e5933000	 ldr         r3, [r3]
  004dc	e3530000	 cmp         r3, #0
  004e0	1a000018	 bne         |$LN3@CpuLoadThr|

; 319  :             {
; 320  :             // clear bucket info
; 321  :             //
; 322  :             lastTick = lastIdle = 0;

  004e4	e3a03000	 mov         r3, #0
  004e8	e58d3020	 str         r3, [sp, #0x20]
  004ec	e59d3020	 ldr         r3, [sp, #0x20]
  004f0	e58d3024	 str         r3, [sp, #0x24]

; 323  :             memset(pBucketInfo, 0,
; 324  :                 sizeof(BucketInfo_t) +
; 325  :                 (sizeof(DWORD) * s_CpuPolicyInfo.bucketCount)
; 326  :                 );

  004f4	e59f30c8	 ldr         r3, [pc, #0xC8]
  004f8	e5932014	 ldr         r2, [r3, #0x14]
  004fc	e3a03004	 mov         r3, #4
  00500	e0030392	 mul         r3, r2, r3
  00504	e283200c	 add         r2, r3, #0xC
  00508	e3a01000	 mov         r1, #0
  0050c	e59d0010	 ldr         r0, [sp, #0x10]
  00510	eb000000	 bl          memset

; 327  : 
; 328  :             // rely on cpu load monitor to check for
; 329  :             // cpu load threshold checks
; 330  :             timeOut = INFINITE;

  00514	e3e03000	 mvn         r3, #0
  00518	e58d3008	 str         r3, [sp, #8]

; 331  :             s_bSleeping = TRUE;

  0051c	e59f20a4	 ldr         r2, [pc, #0xA4]
  00520	e3a03001	 mov         r3, #1
  00524	e5823000	 str         r3, [r2]

; 332  :             ResetEvent(s_CpuPolicyInfo.hCpuLoadEvent);

  00528	e59f3094	 ldr         r3, [pc, #0x94]
  0052c	e593000c	 ldr         r0, [r3, #0xC]
  00530	eb000000	 bl          ResetEvent

; 333  :             InterruptMask(s_CpuPolicyInfo.sysIntr, FALSE);

  00534	e3a01000	 mov         r1, #0
  00538	e59f3084	 ldr         r3, [pc, #0x84]
  0053c	e5930018	 ldr         r0, [r3, #0x18]
  00540	eb000000	 bl          InterruptMask

; 334  :             }
; 335  :         else

  00544	ea000006	 b           |$LN2@CpuLoadThr|
  00548		 |$LN3@CpuLoadThr|

; 336  :             {
; 337  :             // Disable cpu monitor interrupt as we want
; 338  :             // to wake periodically to check cpu load
; 339  :             //
; 340  :             timeOut = s_CpuPolicyInfo.dwMonitorPeriod;

  00548	e59f3074	 ldr         r3, [pc, #0x74]
  0054c	e5933020	 ldr         r3, [r3, #0x20]
  00550	e58d3008	 str         r3, [sp, #8]

; 341  : 
; 342  :             // update tick info
; 343  :             lastTick = currentTick;

  00554	e59d301c	 ldr         r3, [sp, #0x1C]
  00558	e58d3024	 str         r3, [sp, #0x24]

; 344  :             lastIdle = currentIdle;

  0055c	e59d3000	 ldr         r3, [sp]
  00560	e58d3020	 str         r3, [sp, #0x20]
  00564		 |$LN2@CpuLoadThr|

; 345  :             }
; 346  :         code = WaitForSingleObject(s_CpuPolicyInfo.hCpuLoadEvent, timeOut);

  00564	e59d1008	 ldr         r1, [sp, #8]
  00568	e59f3054	 ldr         r3, [pc, #0x54]
  0056c	e593000c	 ldr         r0, [r3, #0xC]
  00570	eb000000	 bl          WaitForSingleObject
  00574	e58d004c	 str         r0, [sp, #0x4C]
  00578	e59d304c	 ldr         r3, [sp, #0x4C]
  0057c	e58d3018	 str         r3, [sp, #0x18]

; 347  : 
; 348  :         // If interrupt was generated disable cpu idle interrupt
; 349  :         if (code == WAIT_OBJECT_0)

  00580	e59d3018	 ldr         r3, [sp, #0x18]
  00584	e3530000	 cmp         r3, #0
  00588	1a000006	 bne         |$LN1@CpuLoadThr|

; 350  :             {
; 351  :             s_bSleeping = FALSE;

  0058c	e59f2034	 ldr         r2, [pc, #0x34]
  00590	e3a03000	 mov         r3, #0
  00594	e5823000	 str         r3, [r2]

; 352  :             InterruptMask(s_CpuPolicyInfo.sysIntr, TRUE);

  00598	e3a01001	 mov         r1, #1
  0059c	e59f3020	 ldr         r3, [pc, #0x20]
  005a0	e5930018	 ldr         r0, [r3, #0x18]
  005a4	eb000000	 bl          InterruptMask
  005a8		 |$LN1@CpuLoadThr|

; 353  :             }
; 354  :         }

  005a8	eaffff36	 b           |$LN12@CpuLoadThr|
  005ac		 |$LN11@CpuLoadThr|

; 355  : 
; 356  :     return 0;

  005ac	e3a03000	 mov         r3, #0
  005b0	e58d3038	 str         r3, [sp, #0x38]

; 357  : }

  005b4	e59d0038	 ldr         r0, [sp, #0x38]
  005b8	e28dd050	 add         sp, sp, #0x50
  005bc	e89d6000	 ldmia       sp, {sp, lr}
  005c0	e12fff1e	 bx          lr
  005c4		 |$LN22@CpuLoadThr|
  005c4		 |$LN23@CpuLoadThr|
  005c4	00000000	 DCD         |s_CpuPolicyInfo|
  005c8		 |$LN24@CpuLoadThr|
  005c8	00000000	 DCD         |s_bSleeping|
  005cc		 |$LN25@CpuLoadThr|
  005cc	00000000	 DCD         |s_currentOpm|
  005d0		 |$LN26@CpuLoadThr|
  005d0	00000000	 DCD         |s_requestedOpm|
  005d4		 |$LN27@CpuLoadThr|
  005d4	00000000	 DCD         |??_C@_1GC@IJBIJFID@?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAm?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AA?$DN?$AAO?$AAP?$AAM@|
  005d8		 |$LN28@CpuLoadThr|
  005d8	00000000	 DCD         |dpCurSettings|
  005dc		 |$M36819|

			 ENDP  ; |?CpuLoadThreadFn@@YAKPAX@Z|, CpuLoadThreadFn

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T36834| DCD	|$LN5@ResetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M36831|

; 224  : 	return EventModify(h,EVENT_RESET);

  00010	e3a01002	 mov         r1, #2
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 225  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M36832|

			 ENDP  ; |ResetEvent|

	EXPORT	|??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JC@FFHPOPCB@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@LKAEFDF@?$AAf?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JG@OBJIFLGH@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@HPFHHCFK@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAC?$AAP@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?CPULD_InitPolicy@@YAPAXPBG@Z|		; CPULD_InitPolicy
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|LocalAlloc|
	IMPORT	|PmxRegisterConstraintCallback|
	IMPORT	|PmxSetConstraintById|
	IMPORT	|InterruptInitialize|
	IMPORT	|CreateEventW|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|wcscat|
	IMPORT	|wcscpy|
	IMPORT	|KernelIoControl|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00018			 AREA	 |.pdata|, PDATA
|$T36864| DCD	|$LN38@CPULD_Init|
	DCD	0xc0019c04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\policyadapters\cpuload\cpuloadpolicy.cpp

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@| DCB "D", 0x0, "V", 0x0, "F"
	DCB	0x0, "S", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@FFHPOPCB@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@| DCB "C"
	DCB	0x0, "P", 0x0, "U", 0x0, "L", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, "/", 0x0, "M", 0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "B", 0x0, "o", 0x0, "o"
	DCB	0x0, "t", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "(", 0x0, "%"
	DCB	0x0, "s", 0x0, ")", 0x0, ".", 0x0, " ", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a", 0x0, "d", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@LKAEFDF@?$AAf?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$DN@| DCB "f"
	DCB	0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e", 0x0, "n"
	DCB	0x0, "c", 0x0, "y", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "f", 0x0, "l", 0x0, "o", 0x0, "o", 0x0, "r"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "c"
	DCB	0x0, "e", 0x0, "i", 0x0, "l", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JG@OBJIFLGH@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@| DCB "C"
	DCB	0x0, "P", 0x0, "U", 0x0, "L", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "v", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "d"
	DCB	0x0, "/", 0x0, "M", 0x0, "i", 0x0, "s", 0x0, "s", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, ".", 0x0, " "
	DCB	0x0, " ", 0x0, "U", 0x0, "n", 0x0, "l", 0x0, "o", 0x0, "a"
	DCB	0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p"
	DCB	0x0, "o", 0x0, "l", 0x0, "i", 0x0, "c", 0x0, "y", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@HPFHHCFK@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAC?$AAP@| DCB "C"
	DCB	0x0, "P", 0x0, "U", 0x0, "L", 0x0, "D", 0x0, "_", 0x0, "I"
	DCB	0x0, "n", 0x0, "i", 0x0, "t", 0x0, "P", 0x0, "o", 0x0, "l"
	DCB	0x0, "i", 0x0, "c", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "U"
	DCB	0x0, "n", 0x0, "s", 0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o"
	DCB	0x0, "r", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "C"
	DCB	0x0, "P", 0x0, "U", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "m"
	DCB	0x0, "i", 0x0, "l", 0x0, "y", 0x0, "=", 0x0, "(", 0x0, "%"
	DCB	0x0, "x", 0x0, ")", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "5", 0x0, "1", 0x0, "7", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "5", 0x0, "x", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "7", 0x0, "x", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T36860| DCD	0xffffff98
; Function compile flags: /Odtp

  005dc			 AREA	 |.text|, CODE, ARM

  005dc	00000000	 DCD         |__GSHandlerCheck|
  005e0	00000000	 DCD         |$T36860|

  005e4		 |?CPULD_InitPolicy@@YAPAXPBG@Z| PROC	; CPULD_InitPolicy

; 369  : {

  005e4		 |$LN38@CPULD_Init|
  005e4	e1a0c00d	 mov         r12, sp
  005e8	e92d0001	 stmdb       sp!, {r0}
  005ec	e92d5000	 stmdb       sp!, {r12, lr}
  005f0	e24ddfa1	 sub         sp, sp, #0xA1, 30
  005f4		 |$M36861|
  005f4	e59f3654	 ldr         r3, [pc, #0x654]
  005f8	e5933000	 ldr         r3, [r3]
  005fc	e58d3228	 str         r3, [sp, #0x228]

; 370  :     int i, j;
; 371  :     int opmCount;
; 372  :     DWORD opmFreq;
; 373  :     HANDLE ret = NULL;

  00600	e3a03000	 mov         r3, #0
  00604	e58d3010	 str         r3, [sp, #0x10]

; 374  :     _TCHAR szRegKey[MAX_PATH];
; 375  :     DWORD cpuFamily = CPU_FAMILY_OMAP35XX;

  00608	e3a03000	 mov         r3, #0
  0060c	e58d3008	 str         r3, [sp, #8]

; 376  : 
; 377  :     // initializt global structure
; 378  :     memset(&s_CpuPolicyInfo, 0, sizeof(CpuPolicyInfo_t));

  00610	e3a02fbd	 mov         r2, #0xBD, 30
  00614	e3a01000	 mov         r1, #0
  00618	e59f05e8	 ldr         r0, [pc, #0x5E8]
  0061c	eb000000	 bl          memset

; 379  : 	
; 380  :     KernelIoControl(
; 381  :         IOCTL_HAL_GET_CPUFAMILY,
; 382  :         &cpuFamily,
; 383  :         sizeof(DWORD),
; 384  :         &cpuFamily,
; 385  :         sizeof(DWORD),
; 386  :         NULL
; 387  :         );

  00620	e3a03000	 mov         r3, #0
  00624	e58d3004	 str         r3, [sp, #4]
  00628	e3a03004	 mov         r3, #4
  0062c	e58d3000	 str         r3, [sp]
  00630	e28d3008	 add         r3, sp, #8
  00634	e3a02004	 mov         r2, #4
  00638	e28d1008	 add         r1, sp, #8
  0063c	e59f0608	 ldr         r0, [pc, #0x608]
  00640	eb000000	 bl          KernelIoControl

; 388  : 
; 389  :     _tcscpy(szRegKey, szContext);

  00644	e59d128c	 ldr         r1, [sp, #0x28C]
  00648	e28d0014	 add         r0, sp, #0x14
  0064c	eb000000	 bl          wcscpy

; 390  : 
; 391  :     if( cpuFamily == CPU_FAMILY_DM37XX)

  00650	e59d3008	 ldr         r3, [sp, #8]
  00654	e3530001	 cmp         r3, #1
  00658	1a000003	 bne         |$LN23@CPULD_Init|

; 392  :     {
; 393  :         _tcscat(szRegKey, _T("\\37xx"));

  0065c	e59f15e4	 ldr         r1, [pc, #0x5E4]
  00660	e28d0014	 add         r0, sp, #0x14
  00664	eb000000	 bl          wcscat
  00668	ea00001b	 b           |$LN22@CPULD_Init|
  0066c		 |$LN23@CPULD_Init|

; 394  :     }
; 395  :     else if( cpuFamily == CPU_FAMILY_OMAP35XX)

  0066c	e59d3008	 ldr         r3, [sp, #8]
  00670	e3530000	 cmp         r3, #0
  00674	1a000003	 bne         |$LN21@CPULD_Init|

; 396  :     {
; 397  :         _tcscat(szRegKey, _T("\\35xx"));

  00678	e59f15c4	 ldr         r1, [pc, #0x5C4]
  0067c	e28d0014	 add         r0, sp, #0x14
  00680	eb000000	 bl          wcscat
  00684	ea000014	 b           |$LN20@CPULD_Init|
  00688		 |$LN21@CPULD_Init|

; 398  :     }
; 399  :     else if( cpuFamily == CPU_FAMILY_AM35XX)

  00688	e59d3008	 ldr         r3, [sp, #8]
  0068c	e3530002	 cmp         r3, #2
  00690	1a000003	 bne         |$LN19@CPULD_Init|

; 400  :     {
; 401  :         _tcscat(szRegKey, _T("\\3517"));

  00694	e59f15a4	 ldr         r1, [pc, #0x5A4]
  00698	e28d0014	 add         r0, sp, #0x14
  0069c	eb000000	 bl          wcscat

; 402  :     }
; 403  :     else

  006a0	ea00000d	 b           |$LN18@CPULD_Init|
  006a4		 |$LN19@CPULD_Init|

; 404  :     {
; 405  :         RETAILMSG(ZONE_ERROR,(L"CPULD_InitPolicy: Unsupported CPU family=(%x)", cpuFamily));

  006a4	e59f357c	 ldr         r3, [pc, #0x57C]
  006a8	e5933440	 ldr         r3, [r3, #0x440]
  006ac	e3130001	 tst         r3, #1
  006b0	0a000005	 beq         |$LN26@CPULD_Init|
  006b4	e59d1008	 ldr         r1, [sp, #8]
  006b8	e59f057c	 ldr         r0, [pc, #0x57C]
  006bc	eb000000	 bl          NKDbgPrintfW
  006c0	e3a03001	 mov         r3, #1
  006c4	e58d324c	 str         r3, [sp, #0x24C]
  006c8	ea000001	 b           |$LN27@CPULD_Init|
  006cc		 |$LN26@CPULD_Init|
  006cc	e3a03000	 mov         r3, #0
  006d0	e58d324c	 str         r3, [sp, #0x24C]
  006d4		 |$LN27@CPULD_Init|

; 406  :         goto cleanUp;

  006d4	ea000143	 b           |$LN17@CPULD_Init|
  006d8	ea000142	 b           |$cleanUp$36679|
  006dc		 |$LN18@CPULD_Init|
  006dc		 |$LN20@CPULD_Init|
  006dc		 |$LN22@CPULD_Init|

; 407  :     }
; 408  : 
; 409  :     // Read policy registry params
; 410  :     if (GetDeviceRegistryParams(
; 411  :         szContext, &s_CpuPolicyInfo, dimof(g_policyRegParams),
; 412  :         g_policyRegParams) != ERROR_SUCCESS)

  006dc	e59f3554	 ldr         r3, [pc, #0x554]
  006e0	e3a02007	 mov         r2, #7
  006e4	e59f151c	 ldr         r1, [pc, #0x51C]
  006e8	e59d028c	 ldr         r0, [sp, #0x28C]
  006ec	eb000000	 bl          GetDeviceRegistryParams
  006f0	e58d0250	 str         r0, [sp, #0x250]
  006f4	e59d3250	 ldr         r3, [sp, #0x250]
  006f8	e3530000	 cmp         r3, #0
  006fc	0a00000c	 beq         |$LN16@CPULD_Init|

; 413  :         {
; 414  :         RETAILMSG(ZONE_ERROR, (L"CPULD_InitPolicy: Invalid/Missing "
; 415  :             L"registry parameters.  Unloading policy\r\n")
; 416  :             );

  00700	e59f3520	 ldr         r3, [pc, #0x520]
  00704	e5933440	 ldr         r3, [r3, #0x440]
  00708	e3130001	 tst         r3, #1
  0070c	0a000004	 beq         |$LN28@CPULD_Init|
  00710	e59f0518	 ldr         r0, [pc, #0x518]
  00714	eb000000	 bl          NKDbgPrintfW
  00718	e3a03001	 mov         r3, #1
  0071c	e58d3254	 str         r3, [sp, #0x254]
  00720	ea000001	 b           |$LN29@CPULD_Init|
  00724		 |$LN28@CPULD_Init|
  00724	e3a03000	 mov         r3, #0
  00728	e58d3254	 str         r3, [sp, #0x254]
  0072c		 |$LN29@CPULD_Init|

; 417  :         goto cleanUp;

  0072c	ea00012d	 b           |$LN15@CPULD_Init|
  00730	ea00012c	 b           |$cleanUp$36679|
  00734		 |$LN16@CPULD_Init|

; 418  :         }
; 419  :     // Read policy registry params
; 420  :     if (GetDeviceRegistryParams(
; 421  :         szRegKey, &s_CpuPolicyInfo, dimof(g_CpuFamilypolicyRegParams),
; 422  :         g_CpuFamilypolicyRegParams) != ERROR_SUCCESS)

  00734	e59f34f8	 ldr         r3, [pc, #0x4F8]
  00738	e3a02006	 mov         r2, #6
  0073c	e59f14c4	 ldr         r1, [pc, #0x4C4]
  00740	e28d0014	 add         r0, sp, #0x14
  00744	eb000000	 bl          GetDeviceRegistryParams
  00748	e58d0258	 str         r0, [sp, #0x258]
  0074c	e59d3258	 ldr         r3, [sp, #0x258]
  00750	e3530000	 cmp         r3, #0
  00754	0a00000c	 beq         |$LN14@CPULD_Init|

; 423  :         {
; 424  :         RETAILMSG(ZONE_ERROR, (L"CPULD_InitPolicy: Invalid/Missing "
; 425  :             L"registry parameters.  Unloading policy\r\n")
; 426  :             );

  00758	e59f34c8	 ldr         r3, [pc, #0x4C8]
  0075c	e5933440	 ldr         r3, [r3, #0x440]
  00760	e3130001	 tst         r3, #1
  00764	0a000004	 beq         |$LN30@CPULD_Init|
  00768	e59f04c0	 ldr         r0, [pc, #0x4C0]
  0076c	eb000000	 bl          NKDbgPrintfW
  00770	e3a03001	 mov         r3, #1
  00774	e58d325c	 str         r3, [sp, #0x25C]
  00778	ea000001	 b           |$LN31@CPULD_Init|
  0077c		 |$LN30@CPULD_Init|
  0077c	e3a03000	 mov         r3, #0
  00780	e58d325c	 str         r3, [sp, #0x25C]
  00784		 |$LN31@CPULD_Init|

; 427  :         goto cleanUp;

  00784	ea000117	 b           |$LN13@CPULD_Init|
  00788	ea000116	 b           |$cleanUp$36679|
  0078c		 |$LN14@CPULD_Init|

; 428  :         }
; 429  : 
; 430  :     // floor frequency
; 431  :     s_CpuPolicyInfo.rgOpmRange[0].floor = 0;

  0078c	e59f2474	 ldr         r2, [pc, #0x474]
  00790	e3a03000	 mov         r3, #0
  00794	e5823250	 str         r3, [r2, #0x250]

; 432  :     s_CpuPolicyInfo.rgOpmRange[0].ceiling = s_CpuPolicyInfo.rgOpmThreshold[0] << FRACTION_PART;

  00798	e59f3468	 ldr         r3, [pc, #0x468]
  0079c	e59332c8	 ldr         r3, [r3, #0x2C8]
  007a0	e1a02a03	 mov         r2, r3, lsl #20
  007a4	e59f345c	 ldr         r3, [pc, #0x45C]
  007a8	e5832254	 str         r2, [r3, #0x254]

; 433  : 
; 434  :     // set upper bound to max frequency
; 435  :     opmFreq = s_CpuPolicyInfo.rgOpmFrequency[s_CpuPolicyInfo.dwCeilingOpm];

  007ac	e59f3454	 ldr         r3, [pc, #0x454]
  007b0	e5931028	 ldr         r1, [r3, #0x28]
  007b4	e3a03004	 mov         r3, #4
  007b8	e0020391	 mul         r2, r1, r3
  007bc	e59f3444	 ldr         r3, [pc, #0x444]
  007c0	e2833e2a	 add         r3, r3, #0x2A, 28
  007c4	e0833002	 add         r3, r3, r2
  007c8	e5933000	 ldr         r3, [r3]
  007cc	e58d321c	 str         r3, [sp, #0x21C]

; 436  :     s_CpuPolicyInfo.rgOpmThreshold[s_CpuPolicyInfo.dwCeilingOpm] = opmFreq;

  007d0	e59f3430	 ldr         r3, [pc, #0x430]
  007d4	e5931028	 ldr         r1, [r3, #0x28]
  007d8	e3a03004	 mov         r3, #4
  007dc	e0020391	 mul         r2, r1, r3
  007e0	e59f3420	 ldr         r3, [pc, #0x420]
  007e4	e2833fb2	 add         r3, r3, #0xB2, 30
  007e8	e0832002	 add         r2, r3, r2
  007ec	e59d321c	 ldr         r3, [sp, #0x21C]
  007f0	e5823000	 str         r3, [r2]

; 437  : 
; 438  :     // everything else in the middle
; 439  :     i = 0;

  007f4	e3a03000	 mov         r3, #0
  007f8	e58d300c	 str         r3, [sp, #0xC]

; 440  :     j = 1;

  007fc	e3a03001	 mov         r3, #1
  00800	e58d3224	 str         r3, [sp, #0x224]

; 441  :     opmCount = s_CpuPolicyInfo.dwCeilingOpm;

  00804	e59f33fc	 ldr         r3, [pc, #0x3FC]
  00808	e5933028	 ldr         r3, [r3, #0x28]
  0080c	e58d3220	 str         r3, [sp, #0x220]
  00810		 |$LN12@CPULD_Init|

; 442  :     while (opmCount--)

  00810	e59d3220	 ldr         r3, [sp, #0x220]
  00814	e3530000	 cmp         r3, #0
  00818	e59d3220	 ldr         r3, [sp, #0x220]
  0081c	e2433001	 sub         r3, r3, #1
  00820	e58d3220	 str         r3, [sp, #0x220]
  00824	0a000025	 beq         |$LN11@CPULD_Init|

; 443  :         {
; 444  :         // set floor and ceiling
; 445  :         s_CpuPolicyInfo.rgOpmRange[j].floor = s_CpuPolicyInfo.rgOpmThreshold[i] << FRACTION_PART;

  00828	e59d100c	 ldr         r1, [sp, #0xC]
  0082c	e3a03004	 mov         r3, #4
  00830	e0020391	 mul         r2, r1, r3
  00834	e59f33cc	 ldr         r3, [pc, #0x3CC]
  00838	e2833fb2	 add         r3, r3, #0xB2, 30
  0083c	e0833002	 add         r3, r3, r2
  00840	e5933000	 ldr         r3, [r3]
  00844	e1a00a03	 mov         r0, r3, lsl #20
  00848	e59d1224	 ldr         r1, [sp, #0x224]
  0084c	e3a03008	 mov         r3, #8
  00850	e0020391	 mul         r2, r1, r3
  00854	e59f33ac	 ldr         r3, [pc, #0x3AC]
  00858	e2833e25	 add         r3, r3, #0x25, 28
  0085c	e0833002	 add         r3, r3, r2
  00860	e5830000	 str         r0, [r3]

; 446  :         s_CpuPolicyInfo.rgOpmRange[j].ceiling = s_CpuPolicyInfo.rgOpmThreshold[j] << FRACTION_PART;

  00864	e59d1224	 ldr         r1, [sp, #0x224]
  00868	e3a03004	 mov         r3, #4
  0086c	e0020391	 mul         r2, r1, r3
  00870	e59f3390	 ldr         r3, [pc, #0x390]
  00874	e2833fb2	 add         r3, r3, #0xB2, 30
  00878	e0833002	 add         r3, r3, r2
  0087c	e5933000	 ldr         r3, [r3]
  00880	e1a00a03	 mov         r0, r3, lsl #20
  00884	e59d1224	 ldr         r1, [sp, #0x224]
  00888	e3a03008	 mov         r3, #8
  0088c	e0020391	 mul         r2, r1, r3
  00890	e59f3370	 ldr         r3, [pc, #0x370]
  00894	e2833e25	 add         r3, r3, #0x25, 28
  00898	e0833002	 add         r3, r3, r2
  0089c	e2833004	 add         r3, r3, #4
  008a0	e5830000	 str         r0, [r3]

; 447  : 
; 448  :         // next count
; 449  :         j++;

  008a4	e59d3224	 ldr         r3, [sp, #0x224]
  008a8	e2833001	 add         r3, r3, #1
  008ac	e58d3224	 str         r3, [sp, #0x224]

; 450  :         i++;

  008b0	e59d300c	 ldr         r3, [sp, #0xC]
  008b4	e2833001	 add         r3, r3, #1
  008b8	e58d300c	 str         r3, [sp, #0xC]

; 451  :         }

  008bc	eaffffd3	 b           |$LN12@CPULD_Init|
  008c0		 |$LN11@CPULD_Init|

; 452  : 
; 453  :     for (i = 0; i <= (signed)s_CpuPolicyInfo.dwCeilingOpm; ++i)

  008c0	e3a03000	 mov         r3, #0
  008c4	e58d300c	 str         r3, [sp, #0xC]
  008c8	ea000002	 b           |$LN10@CPULD_Init|
  008cc		 |$LN9@CPULD_Init|
  008cc	e59d300c	 ldr         r3, [sp, #0xC]
  008d0	e2833001	 add         r3, r3, #1
  008d4	e58d300c	 str         r3, [sp, #0xC]
  008d8		 |$LN10@CPULD_Init|
  008d8	e59d200c	 ldr         r2, [sp, #0xC]
  008dc	e59f3324	 ldr         r3, [pc, #0x324]
  008e0	e5933028	 ldr         r3, [r3, #0x28]
  008e4	e1520003	 cmp         r2, r3
  008e8	ca00001f	 bgt         |$LN8@CPULD_Init|

; 454  :         {
; 455  :         RETAILMSG(1, (L"frequency=%d, floor=%d, ceiling=%d\r\n",
; 456  :             s_CpuPolicyInfo.rgOpmFrequency[i],
; 457  :             s_CpuPolicyInfo.rgOpmRange[i].floor >> FRACTION_PART,
; 458  :             s_CpuPolicyInfo.rgOpmRange[i].ceiling >> FRACTION_PART
; 459  :             ));

  008ec	e59d100c	 ldr         r1, [sp, #0xC]
  008f0	e3a03008	 mov         r3, #8
  008f4	e0020391	 mul         r2, r1, r3
  008f8	e59f3308	 ldr         r3, [pc, #0x308]
  008fc	e2833e25	 add         r3, r3, #0x25, 28
  00900	e0833002	 add         r3, r3, r2
  00904	e2833004	 add         r3, r3, #4
  00908	e5933000	 ldr         r3, [r3]
  0090c	e1a03a23	 mov         r3, r3, lsr #20
  00910	e59d000c	 ldr         r0, [sp, #0xC]
  00914	e3a02008	 mov         r2, #8
  00918	e0010290	 mul         r1, r0, r2
  0091c	e59f22e4	 ldr         r2, [pc, #0x2E4]
  00920	e2822e25	 add         r2, r2, #0x25, 28
  00924	e0822001	 add         r2, r2, r1
  00928	e5922000	 ldr         r2, [r2]
  0092c	e1a02a22	 mov         r2, r2, lsr #20
  00930	e59de00c	 ldr         lr, [sp, #0xC]
  00934	e3a01004	 mov         r1, #4
  00938	e000019e	 mul         r0, lr, r1
  0093c	e59f12c4	 ldr         r1, [pc, #0x2C4]
  00940	e2811e2a	 add         r1, r1, #0x2A, 28
  00944	e0811000	 add         r1, r1, r0
  00948	e5911000	 ldr         r1, [r1]
  0094c	e59f02d8	 ldr         r0, [pc, #0x2D8]
  00950	eb000000	 bl          NKDbgPrintfW
  00954	e3a03001	 mov         r3, #1
  00958	e58d3260	 str         r3, [sp, #0x260]
  0095c	ea000001	 b           |$LN33@CPULD_Init|
  00960	e3a03000	 mov         r3, #0
  00964	e58d3260	 str         r3, [sp, #0x260]
  00968		 |$LN33@CPULD_Init|

; 460  :         }

  00968	eaffffd7	 b           |$LN9@CPULD_Init|
  0096c		 |$LN8@CPULD_Init|

; 461  : 
; 462  :     // Open boot named event
; 463  :     s_CpuPolicyInfo.hBootEvent = CreateEvent(NULL,
; 464  :                                         TRUE,
; 465  :                                         FALSE,
; 466  :                                         s_CpuPolicyInfo.szBootEventName
; 467  :                                         );

  0096c	e59f3294	 ldr         r3, [pc, #0x294]
  00970	e2833044	 add         r3, r3, #0x44
  00974	e3a02000	 mov         r2, #0
  00978	e3a01001	 mov         r1, #1
  0097c	e3a00000	 mov         r0, #0
  00980	eb000000	 bl          CreateEventW
  00984	e58d0264	 str         r0, [sp, #0x264]
  00988	e59d2264	 ldr         r2, [sp, #0x264]
  0098c	e59f3274	 ldr         r3, [pc, #0x274]
  00990	e5832010	 str         r2, [r3, #0x10]

; 468  :     if (s_CpuPolicyInfo.hBootEvent == NULL)

  00994	e59f326c	 ldr         r3, [pc, #0x26C]
  00998	e5933010	 ldr         r3, [r3, #0x10]
  0099c	e3530000	 cmp         r3, #0
  009a0	1a00000e	 bne         |$LN7@CPULD_Init|

; 469  :         {
; 470  :         RETAILMSG(ZONE_ERROR, (L"CPULD_InitPolicy: Invalid/Missing "
; 471  :             L"BootEventName(%s).  Unloading policy\r\n",
; 472  :             s_CpuPolicyInfo.szBootEventName)
; 473  :             );

  009a4	e59f327c	 ldr         r3, [pc, #0x27C]
  009a8	e5933440	 ldr         r3, [r3, #0x440]
  009ac	e3130001	 tst         r3, #1
  009b0	0a000006	 beq         |$LN34@CPULD_Init|
  009b4	e59f324c	 ldr         r3, [pc, #0x24C]
  009b8	e2831044	 add         r1, r3, #0x44
  009bc	e59f0260	 ldr         r0, [pc, #0x260]
  009c0	eb000000	 bl          NKDbgPrintfW
  009c4	e3a03001	 mov         r3, #1
  009c8	e58d3268	 str         r3, [sp, #0x268]
  009cc	ea000001	 b           |$LN35@CPULD_Init|
  009d0		 |$LN34@CPULD_Init|
  009d0	e3a03000	 mov         r3, #0
  009d4	e58d3268	 str         r3, [sp, #0x268]
  009d8		 |$LN35@CPULD_Init|

; 474  :         goto cleanUp;

  009d8	ea000082	 b           |$LN6@CPULD_Init|
  009dc	ea000081	 b           |$cleanUp$36679|
  009e0		 |$LN7@CPULD_Init|

; 475  :         }
; 476  : 
; 477  :     // Map SW CPUMONITOR interrupt
; 478  :     if (!KernelIoControl(
; 479  :             IOCTL_HAL_REQUEST_SYSINTR, &s_CpuPolicyInfo.irq,
; 480  :             sizeof(s_CpuPolicyInfo.irq),
; 481  :             &s_CpuPolicyInfo.sysIntr, sizeof(s_CpuPolicyInfo.sysIntr),
; 482  :             NULL
; 483  :             ))

  009e0	e3a03000	 mov         r3, #0
  009e4	e58d3004	 str         r3, [sp, #4]
  009e8	e3a03004	 mov         r3, #4
  009ec	e58d3000	 str         r3, [sp]
  009f0	e59f3210	 ldr         r3, [pc, #0x210]
  009f4	e2833018	 add         r3, r3, #0x18
  009f8	e3a02004	 mov         r2, #4
  009fc	e59f1204	 ldr         r1, [pc, #0x204]
  00a00	e2811f93	 add         r1, r1, #0x93, 30
  00a04	e59f0214	 ldr         r0, [pc, #0x214]
  00a08	eb000000	 bl          KernelIoControl
  00a0c	e58d026c	 str         r0, [sp, #0x26C]
  00a10	e59d326c	 ldr         r3, [sp, #0x26C]
  00a14	e3530000	 cmp         r3, #0
  00a18	1a000001	 bne         |$LN5@CPULD_Init|
  00a1c	ea000071	 b           |$LN4@CPULD_Init|

; 484  :         {
; 485  :         goto cleanUp;

  00a20	ea000070	 b           |$cleanUp$36679|
  00a24		 |$LN5@CPULD_Init|

; 486  :         }
; 487  : 
; 488  :     // Create interrupt event
; 489  :     s_CpuPolicyInfo.hCpuLoadEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00a24	e3a03000	 mov         r3, #0
  00a28	e3a02000	 mov         r2, #0
  00a2c	e3a01000	 mov         r1, #0
  00a30	e3a00000	 mov         r0, #0
  00a34	eb000000	 bl          CreateEventW
  00a38	e58d0270	 str         r0, [sp, #0x270]
  00a3c	e59d2270	 ldr         r2, [sp, #0x270]
  00a40	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00a44	e583200c	 str         r2, [r3, #0xC]

; 490  :     if (s_CpuPolicyInfo.hCpuLoadEvent == NULL)

  00a48	e59f31b8	 ldr         r3, [pc, #0x1B8]
  00a4c	e593300c	 ldr         r3, [r3, #0xC]
  00a50	e3530000	 cmp         r3, #0
  00a54	1a000001	 bne         |$LN3@CPULD_Init|
  00a58	ea000062	 b           |$LN2@CPULD_Init|

; 491  :         {
; 492  :         goto cleanUp;

  00a5c	ea000061	 b           |$cleanUp$36679|
  00a60		 |$LN3@CPULD_Init|

; 493  :         }
; 494  : 
; 495  :     // bind system interrupt with event
; 496  :     InterruptInitialize(s_CpuPolicyInfo.sysIntr,
; 497  :                 s_CpuPolicyInfo.hCpuLoadEvent,
; 498  :                 &s_CpuPolicyInfo.dwInterruptThreshold,
; 499  :                 sizeof(s_CpuPolicyInfo.dwInterruptThreshold)
; 500  :                 );

  00a60	e3a03004	 mov         r3, #4
  00a64	e59f219c	 ldr         r2, [pc, #0x19C]
  00a68	e2822034	 add         r2, r2, #0x34
  00a6c	e59f1194	 ldr         r1, [pc, #0x194]
  00a70	e591100c	 ldr         r1, [r1, #0xC]
  00a74	e59f018c	 ldr         r0, [pc, #0x18C]
  00a78	e5900018	 ldr         r0, [r0, #0x18]
  00a7c	eb000000	 bl          InterruptInitialize

; 501  : 
; 502  :     // don't enable interrupt until monitor thread is active
; 503  :     InterruptMask(s_CpuPolicyInfo.sysIntr, TRUE);

  00a80	e3a01001	 mov         r1, #1
  00a84	e59f317c	 ldr         r3, [pc, #0x17C]
  00a88	e5930018	 ldr         r0, [r3, #0x18]
  00a8c	eb000000	 bl          InterruptMask

; 504  : 
; 505  :     // Set boot opm value
; 506  :     s_currentOpm = s_CpuPolicyInfo.dwBootOpm;

  00a90	e59f3170	 ldr         r3, [pc, #0x170]
  00a94	e593203c	 ldr         r2, [r3, #0x3C]
  00a98	e59f3178	 ldr         r3, [pc, #0x178]
  00a9c	e5832000	 str         r2, [r3]

; 507  :     s_requestedOpm = s_CpuPolicyInfo.dwBootOpm;

  00aa0	e59f3160	 ldr         r3, [pc, #0x160]
  00aa4	e593203c	 ldr         r2, [r3, #0x3C]
  00aa8	e59f316c	 ldr         r3, [pc, #0x16C]
  00aac	e5832000	 str         r2, [r3]

; 508  : 
; 509  :     // Obtain DVFS constraint handler
; 510  :     s_CpuPolicyInfo.hDvfsConstraint = PmxSetConstraintById(
; 511  :                                     CONSTRAINT_ID_DVFS,
; 512  :                                     CONSTRAINT_MSG_DVFS_REQUEST,
; 513  :                                     (void*)&s_currentOpm,
; 514  :                                     sizeof(DWORD)
; 515  :                                     );

  00ab0	e3a03004	 mov         r3, #4
  00ab4	e59f215c	 ldr         r2, [pc, #0x15C]
  00ab8	e3a01001	 mov         r1, #1
  00abc	e59f0150	 ldr         r0, [pc, #0x150]
  00ac0	eb000000	 bl          PmxSetConstraintById
  00ac4	e58d0274	 str         r0, [sp, #0x274]
  00ac8	e59d2274	 ldr         r2, [sp, #0x274]
  00acc	e59f3134	 ldr         r3, [pc, #0x134]
  00ad0	e5832000	 str         r2, [r3]

; 516  : 
; 517  :     // register for DVFS change notifications
; 518  :     s_CpuPolicyInfo.hDvfsCallback = PmxRegisterConstraintCallback(
; 519  :                                         s_CpuPolicyInfo.hDvfsConstraint,
; 520  :                                         DvfsConstraintCallback,
; 521  :                                         NULL,
; 522  :                                         0,
; 523  :                                         (HANDLE)&s_CpuPolicyInfo
; 524  :                                         );

  00ad4	e59f312c	 ldr         r3, [pc, #0x12C]
  00ad8	e58d3000	 str         r3, [sp]
  00adc	e3a03000	 mov         r3, #0
  00ae0	e3a02000	 mov         r2, #0
  00ae4	e59f1124	 ldr         r1, [pc, #0x124]
  00ae8	e59f0118	 ldr         r0, [pc, #0x118]
  00aec	e5900000	 ldr         r0, [r0]
  00af0	eb000000	 bl          PmxRegisterConstraintCallback
  00af4	e58d0278	 str         r0, [sp, #0x278]
  00af8	e59d2278	 ldr         r2, [sp, #0x278]
  00afc	e59f3104	 ldr         r3, [pc, #0x104]
  00b00	e5832004	 str         r2, [r3, #4]

; 525  : 
; 526  :     // allocate buffer to hold history info
; 527  :     if (s_CpuPolicyInfo.dwMonitorWindow < s_CpuPolicyInfo.dwMonitorPeriod)

  00b04	e59f30fc	 ldr         r3, [pc, #0xFC]
  00b08	e5932024	 ldr         r2, [r3, #0x24]
  00b0c	e59f30f4	 ldr         r3, [pc, #0xF4]
  00b10	e5933020	 ldr         r3, [r3, #0x20]
  00b14	e1520003	 cmp         r2, r3
  00b18	2a000003	 bcs         |$LN1@CPULD_Init|

; 528  :         {
; 529  :         s_CpuPolicyInfo.dwMonitorWindow = s_CpuPolicyInfo.dwMonitorPeriod;

  00b1c	e59f30e4	 ldr         r3, [pc, #0xE4]
  00b20	e5932020	 ldr         r2, [r3, #0x20]
  00b24	e59f30dc	 ldr         r3, [pc, #0xDC]
  00b28	e5832024	 str         r2, [r3, #0x24]
  00b2c		 |$LN1@CPULD_Init|

; 530  :         }
; 531  : 
; 532  :     s_CpuPolicyInfo.bucketCount = s_CpuPolicyInfo.dwMonitorWindow / s_CpuPolicyInfo.dwMonitorPeriod;

  00b2c	e59f30d4	 ldr         r3, [pc, #0xD4]
  00b30	e5931024	 ldr         r1, [r3, #0x24]
  00b34	e59f30cc	 ldr         r3, [pc, #0xCC]
  00b38	e5930020	 ldr         r0, [r3, #0x20]
  00b3c	eb000000	 bl          __rt_udiv
  00b40	e59f30c0	 ldr         r3, [pc, #0xC0]
  00b44	e5830014	 str         r0, [r3, #0x14]

; 533  :     s_CpuPolicyInfo.pBucketInfo = (BucketInfo_t*)LocalAlloc(LPTR,
; 534  :                                     sizeof(BucketInfo_t) +
; 535  :                                     (sizeof(DWORD) * s_CpuPolicyInfo.bucketCount)
; 536  :                                     );

  00b48	e59f30b8	 ldr         r3, [pc, #0xB8]
  00b4c	e5932014	 ldr         r2, [r3, #0x14]
  00b50	e3a03004	 mov         r3, #4
  00b54	e0030392	 mul         r3, r2, r3
  00b58	e283100c	 add         r1, r3, #0xC
  00b5c	e3a00040	 mov         r0, #0x40
  00b60	eb000000	 bl          LocalAlloc
  00b64	e58d027c	 str         r0, [sp, #0x27C]
  00b68	e59d227c	 ldr         r2, [sp, #0x27C]
  00b6c	e59f3094	 ldr         r3, [pc, #0x94]
  00b70	e58322f0	 str         r2, [r3, #0x2F0]

; 537  : 
; 538  :     memset(s_CpuPolicyInfo.pBucketInfo, 0,
; 539  :                 sizeof(BucketInfo_t) +
; 540  :                 (sizeof(DWORD) * s_CpuPolicyInfo.bucketCount)
; 541  :                 );

  00b74	e59f308c	 ldr         r3, [pc, #0x8C]
  00b78	e5932014	 ldr         r2, [r3, #0x14]
  00b7c	e3a03004	 mov         r3, #4
  00b80	e0030392	 mul         r3, r2, r3
  00b84	e283200c	 add         r2, r3, #0xC
  00b88	e3a01000	 mov         r1, #0
  00b8c	e59f3074	 ldr         r3, [pc, #0x74]
  00b90	e59302f0	 ldr         r0, [r3, #0x2F0]
  00b94	eb000000	 bl          memset

; 542  : 
; 543  :     // Start running the thread that will check for the cpu load
; 544  :     s_CpuPolicyInfo.hCpuLoadThread = CreateThread(NULL, 0,
; 545  :                                             CpuLoadThreadFn, NULL, 0, NULL
; 546  :                                             );

  00b98	e3a03000	 mov         r3, #0
  00b9c	e58d3004	 str         r3, [sp, #4]
  00ba0	e3a03000	 mov         r3, #0
  00ba4	e58d3000	 str         r3, [sp]
  00ba8	e3a03000	 mov         r3, #0
  00bac	e59f2058	 ldr         r2, [pc, #0x58]
  00bb0	e3a01000	 mov         r1, #0
  00bb4	e3a00000	 mov         r0, #0
  00bb8	eb000000	 bl          CreateThread
  00bbc	e58d0280	 str         r0, [sp, #0x280]
  00bc0	e59d2280	 ldr         r2, [sp, #0x280]
  00bc4	e59f303c	 ldr         r3, [pc, #0x3C]
  00bc8	e5832008	 str         r2, [r3, #8]

; 547  : 
; 548  :     CeSetThreadPriority(s_CpuPolicyInfo.hCpuLoadThread,
; 549  :                       s_CpuPolicyInfo.priority256
; 550  :                       );

  00bcc	e59f3034	 ldr         r3, [pc, #0x34]
  00bd0	e5931038	 ldr         r1, [r3, #0x38]
  00bd4	e59f302c	 ldr         r3, [pc, #0x2C]
  00bd8	e5930008	 ldr         r0, [r3, #8]
  00bdc	eb000000	 bl          CeSetThreadPriority

; 551  : 
; 552  :     ret = (HANDLE)&s_CpuPolicyInfo;

  00be0	e59f3020	 ldr         r3, [pc, #0x20]
  00be4	e58d3010	 str         r3, [sp, #0x10]
  00be8		 |$LN2@CPULD_Init|
  00be8		 |$LN4@CPULD_Init|
  00be8		 |$LN6@CPULD_Init|
  00be8		 |$LN13@CPULD_Init|
  00be8		 |$LN15@CPULD_Init|
  00be8		 |$LN17@CPULD_Init|
  00be8		 |$cleanUp$36679|

; 553  : 
; 554  : cleanUp:
; 555  :     return ret;

  00be8	e59d0228	 ldr         r0, [sp, #0x228]
  00bec	eb000000	 bl          __security_check_cookie
  00bf0	e59d3010	 ldr         r3, [sp, #0x10]
  00bf4	e58d3248	 str         r3, [sp, #0x248]

; 556  : }

  00bf8	e59d0248	 ldr         r0, [sp, #0x248]
  00bfc	e28ddfa1	 add         sp, sp, #0xA1, 30
  00c00	e89d6000	 ldmia       sp, {sp, lr}
  00c04	e12fff1e	 bx          lr
  00c08		 |$LN39@CPULD_Init|
  00c08		 |$LN40@CPULD_Init|
  00c08	00000000	 DCD         |s_CpuPolicyInfo|
  00c0c		 |$LN41@CPULD_Init|
  00c0c	00000000	 DCD         |?CpuLoadThreadFn@@YAKPAX@Z|
  00c10		 |$LN42@CPULD_Init|
  00c10	00000000	 DCD         |?DvfsConstraintCallback@@YAHPAXK0I@Z|
  00c14		 |$LN43@CPULD_Init|
  00c14	00000000	 DCD         |??_C@_19BINEIDCP@?$AAD?$AAV?$AAF?$AAS?$AA?$AA@|
  00c18		 |$LN44@CPULD_Init|
  00c18	00000000	 DCD         |s_currentOpm|
  00c1c		 |$LN45@CPULD_Init|
  00c1c	00000000	 DCD         |s_requestedOpm|
  00c20		 |$LN46@CPULD_Init|
  00c20	01010098	 DCD         0x1010098
  00c24		 |$LN47@CPULD_Init|
  00c24	00000000	 DCD         |??_C@_1JC@FFHPOPCB@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@|
  00c28		 |$LN48@CPULD_Init|
  00c28	00000000	 DCD         |dpCurSettings|
  00c2c		 |$LN49@CPULD_Init|
  00c2c	00000000	 DCD         |??_C@_1EK@LKAEFDF@?$AAf?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAf?$AAl?$AAo?$AAo?$AAr?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAc?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$DN@|
  00c30		 |$LN50@CPULD_Init|
  00c30	00000000	 DCD         |??_C@_1JG@OBJIFLGH@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?1?$AAM?$AAi?$AAs?$AAs?$AAi?$AAn@|
  00c34		 |$LN51@CPULD_Init|
  00c34	00000000	 DCD         |g_CpuFamilypolicyRegParams|
  00c38		 |$LN52@CPULD_Init|
  00c38	00000000	 DCD         |g_policyRegParams|
  00c3c		 |$LN53@CPULD_Init|
  00c3c	00000000	 DCD         |??_C@_1FM@HPFHHCFK@?$AAC?$AAP?$AAU?$AAL?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AAP?$AAo?$AAl?$AAi?$AAc?$AAy?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAC?$AAP@|
  00c40		 |$LN54@CPULD_Init|
  00c40	00000000	 DCD         |??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@|
  00c44		 |$LN55@CPULD_Init|
  00c44	00000000	 DCD         |??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@|
  00c48		 |$LN56@CPULD_Init|
  00c48	00000000	 DCD         |??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@|
  00c4c		 |$LN57@CPULD_Init|
  00c4c	0101200c	 DCD         0x101200c
  00c50		 |$LN58@CPULD_Init|
  00c50	00000000	 DCD         |__security_cookie|
  00c54		 |$M36862|

			 ENDP  ; |?CPULD_InitPolicy@@YAPAXPBG@Z|, CPULD_InitPolicy

	EXPORT	|?CPULD_DeinitPolicy@@YAHPAX@Z|		; CPULD_DeinitPolicy
	IMPORT	|LocalFree|
	IMPORT	|PmxReleaseConstraint|
	IMPORT	|PmxUnregisterConstraintCallback|
	IMPORT	|InterruptDisable|
	IMPORT	|CloseHandle|

  00020			 AREA	 |.pdata|, PDATA
|$T36890| DCD	|$LN14@CPULD_Dein|
	DCD	0x40005604
; Function compile flags: /Odtp

  00c54			 AREA	 |.text|, CODE, ARM

  00c54		 |?CPULD_DeinitPolicy@@YAHPAX@Z| PROC	; CPULD_DeinitPolicy

; 568  : {

  00c54		 |$LN14@CPULD_Dein|
  00c54	e1a0c00d	 mov         r12, sp
  00c58	e92d0001	 stmdb       sp!, {r0}
  00c5c	e92d5000	 stmdb       sp!, {r12, lr}
  00c60	e24dd008	 sub         sp, sp, #8
  00c64		 |$M36887|

; 569  :     BOOL rc = FALSE;

  00c64	e3a03000	 mov         r3, #0
  00c68	e58d3000	 str         r3, [sp]

; 570  : 
; 571  :     // validate parameters
; 572  :     if (hPolicyAdapter != (HANDLE)&s_CpuPolicyInfo) goto cleanUp;

  00c6c	e59d2010	 ldr         r2, [sp, #0x10]
  00c70	e59f3130	 ldr         r3, [pc, #0x130]
  00c74	e1520003	 cmp         r2, r3
  00c78	0a000001	 beq         |$LN9@CPULD_Dein|
  00c7c	ea000043	 b           |$LN8@CPULD_Dein|
  00c80	ea000042	 b           |$cleanUp$36718|
  00c84		 |$LN9@CPULD_Dein|

; 573  : 
; 574  :     if (s_CpuPolicyInfo.hCpuLoadThread != NULL)

  00c84	e59f311c	 ldr         r3, [pc, #0x11C]
  00c88	e5933008	 ldr         r3, [r3, #8]
  00c8c	e3530000	 cmp         r3, #0
  00c90	0a00000c	 beq         |$LN7@CPULD_Dein|

; 575  :         {
; 576  :         s_CpuPolicyInfo.bExit = TRUE;

  00c94	e59f210c	 ldr         r2, [pc, #0x10C]
  00c98	e3a03001	 mov         r3, #1
  00c9c	e582301c	 str         r3, [r2, #0x1C]

; 577  :         SetEvent(s_CpuPolicyInfo.hCpuLoadEvent);

  00ca0	e59f3100	 ldr         r3, [pc, #0x100]
  00ca4	e593000c	 ldr         r0, [r3, #0xC]
  00ca8	eb000000	 bl          SetEvent

; 578  :         WaitForSingleObject(s_CpuPolicyInfo.hCpuLoadThread, INFINITE);

  00cac	e3e01000	 mvn         r1, #0
  00cb0	e59f30f0	 ldr         r3, [pc, #0xF0]
  00cb4	e5930008	 ldr         r0, [r3, #8]
  00cb8	eb000000	 bl          WaitForSingleObject

; 579  :         CloseHandle(s_CpuPolicyInfo.hCpuLoadThread);

  00cbc	e59f30e4	 ldr         r3, [pc, #0xE4]
  00cc0	e5930008	 ldr         r0, [r3, #8]
  00cc4	eb000000	 bl          CloseHandle
  00cc8		 |$LN7@CPULD_Dein|

; 580  :         }
; 581  : 
; 582  :     // release interrupt resources
; 583  :     if (s_CpuPolicyInfo.sysIntr != 0)

  00cc8	e59f30d8	 ldr         r3, [pc, #0xD8]
  00ccc	e5933018	 ldr         r3, [r3, #0x18]
  00cd0	e3530000	 cmp         r3, #0
  00cd4	0a000002	 beq         |$LN6@CPULD_Dein|

; 584  :         {
; 585  :         InterruptDisable(s_CpuPolicyInfo.sysIntr);

  00cd8	e59f30c8	 ldr         r3, [pc, #0xC8]
  00cdc	e5930018	 ldr         r0, [r3, #0x18]
  00ce0	eb000000	 bl          InterruptDisable
  00ce4		 |$LN6@CPULD_Dein|

; 586  :         }
; 587  : 
; 588  :     // release OS resources
; 589  :     if (s_CpuPolicyInfo.hBootEvent != NULL)

  00ce4	e59f30bc	 ldr         r3, [pc, #0xBC]
  00ce8	e5933010	 ldr         r3, [r3, #0x10]
  00cec	e3530000	 cmp         r3, #0
  00cf0	0a000002	 beq         |$LN5@CPULD_Dein|

; 590  :         {
; 591  :         CloseHandle(s_CpuPolicyInfo.hBootEvent);

  00cf4	e59f30ac	 ldr         r3, [pc, #0xAC]
  00cf8	e5930010	 ldr         r0, [r3, #0x10]
  00cfc	eb000000	 bl          CloseHandle
  00d00		 |$LN5@CPULD_Dein|

; 592  :         }
; 593  : 
; 594  :     if (s_CpuPolicyInfo.hCpuLoadEvent != NULL)

  00d00	e59f30a0	 ldr         r3, [pc, #0xA0]
  00d04	e593300c	 ldr         r3, [r3, #0xC]
  00d08	e3530000	 cmp         r3, #0
  00d0c	0a000002	 beq         |$LN4@CPULD_Dein|

; 595  :         {
; 596  :         CloseHandle(s_CpuPolicyInfo.hCpuLoadEvent);

  00d10	e59f3090	 ldr         r3, [pc, #0x90]
  00d14	e593000c	 ldr         r0, [r3, #0xC]
  00d18	eb000000	 bl          CloseHandle
  00d1c		 |$LN4@CPULD_Dein|

; 597  :         }
; 598  : 
; 599  :     // release all PM resoureces
; 600  :     if (s_CpuPolicyInfo.hDvfsConstraint != NULL)

  00d1c	e59f3084	 ldr         r3, [pc, #0x84]
  00d20	e5933000	 ldr         r3, [r3]
  00d24	e3530000	 cmp         r3, #0
  00d28	0a00000b	 beq         |$LN3@CPULD_Dein|

; 601  :         {
; 602  :         if (s_CpuPolicyInfo.hDvfsCallback != NULL)

  00d2c	e59f3074	 ldr         r3, [pc, #0x74]
  00d30	e5933004	 ldr         r3, [r3, #4]
  00d34	e3530000	 cmp         r3, #0
  00d38	0a000004	 beq         |$LN2@CPULD_Dein|

; 603  :             {
; 604  :             PmxUnregisterConstraintCallback(s_CpuPolicyInfo.hDvfsConstraint,
; 605  :                 s_CpuPolicyInfo.hDvfsCallback
; 606  :                 );

  00d3c	e59f3064	 ldr         r3, [pc, #0x64]
  00d40	e5931004	 ldr         r1, [r3, #4]
  00d44	e59f305c	 ldr         r3, [pc, #0x5C]
  00d48	e5930000	 ldr         r0, [r3]
  00d4c	eb000000	 bl          PmxUnregisterConstraintCallback
  00d50		 |$LN2@CPULD_Dein|

; 607  :             }
; 608  :         PmxReleaseConstraint(s_CpuPolicyInfo.hDvfsConstraint);

  00d50	e59f3050	 ldr         r3, [pc, #0x50]
  00d54	e5930000	 ldr         r0, [r3]
  00d58	eb000000	 bl          PmxReleaseConstraint
  00d5c		 |$LN3@CPULD_Dein|

; 609  :         }
; 610  : 
; 611  :     if (s_CpuPolicyInfo.pBucketInfo != NULL)

  00d5c	e59f3044	 ldr         r3, [pc, #0x44]
  00d60	e59332f0	 ldr         r3, [r3, #0x2F0]
  00d64	e3530000	 cmp         r3, #0
  00d68	0a000002	 beq         |$LN1@CPULD_Dein|

; 612  :         {
; 613  :         LocalFree(s_CpuPolicyInfo.pBucketInfo);

  00d6c	e59f3034	 ldr         r3, [pc, #0x34]
  00d70	e59302f0	 ldr         r0, [r3, #0x2F0]
  00d74	eb000000	 bl          LocalFree
  00d78		 |$LN1@CPULD_Dein|

; 614  :         }
; 615  : 
; 616  :     // clear structures
; 617  :     memset(&s_CpuPolicyInfo, 0, sizeof(CpuPolicyInfo_t));

  00d78	e3a02fbd	 mov         r2, #0xBD, 30
  00d7c	e3a01000	 mov         r1, #0
  00d80	e59f0020	 ldr         r0, [pc, #0x20]
  00d84	eb000000	 bl          memset

; 618  : 
; 619  :     rc = TRUE;

  00d88	e3a03001	 mov         r3, #1
  00d8c	e58d3000	 str         r3, [sp]
  00d90		 |$LN8@CPULD_Dein|
  00d90		 |$cleanUp$36718|

; 620  : 
; 621  : cleanUp:
; 622  :     return rc;

  00d90	e59d3000	 ldr         r3, [sp]
  00d94	e58d3004	 str         r3, [sp, #4]

; 623  : }

  00d98	e59d0004	 ldr         r0, [sp, #4]
  00d9c	e28dd008	 add         sp, sp, #8
  00da0	e89d6000	 ldmia       sp, {sp, lr}
  00da4	e12fff1e	 bx          lr
  00da8		 |$LN15@CPULD_Dein|
  00da8		 |$LN16@CPULD_Dein|
  00da8	00000000	 DCD         |s_CpuPolicyInfo|
  00dac		 |$M36888|

			 ENDP  ; |?CPULD_DeinitPolicy@@YAHPAX@Z|, CPULD_DeinitPolicy

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00028			 AREA	 |.pdata|, PDATA
|$T36898| DCD	|$LN8@DllMain|
	DCD	0x40001404
; Function compile flags: /Odtp

  00dac			 AREA	 |.text|, CODE, ARM

  00dac		 |DllMain| PROC

; 639  : {

  00dac		 |$LN8@DllMain|
  00dac	e1a0c00d	 mov         r12, sp
  00db0	e92d0007	 stmdb       sp!, {r0 - r2}
  00db4	e92d5000	 stmdb       sp!, {r12, lr}
  00db8	e24dd004	 sub         sp, sp, #4
  00dbc		 |$M36895|

; 640  :     UNREFERENCED_PARAMETER(pReserved);
; 641  : 
; 642  :     switch (reason)

  00dbc	e59d3010	 ldr         r3, [sp, #0x10]
  00dc0	e3530001	 cmp         r3, #1
  00dc4	0a000000	 beq         |$LN1@DllMain|
  00dc8	ea000004	 b           |$LN2@DllMain|
  00dcc		 |$LN1@DllMain|

; 643  :         {
; 644  :         case DLL_PROCESS_ATTACH:
; 645  :             RETAILREGISTERZONES((HMODULE)hDLL);

  00dcc	e59f1024	 ldr         r1, [pc, #0x24]
  00dd0	e59d000c	 ldr         r0, [sp, #0xC]
  00dd4	eb000000	 bl          RegisterDbgZones

; 646  :             DisableThreadLibraryCalls((HMODULE)hDLL);

  00dd8	e59d000c	 ldr         r0, [sp, #0xC]
  00ddc	eb000000	 bl          DisableThreadLibraryCalls
  00de0		 |$LN2@DllMain|

; 647  :             break;
; 648  :         }
; 649  :     return TRUE;

  00de0	e3a03001	 mov         r3, #1
  00de4	e58d3000	 str         r3, [sp]

; 650  : }

  00de8	e59d0000	 ldr         r0, [sp]
  00dec	e28dd004	 add         sp, sp, #4
  00df0	e89d6000	 ldmia       sp, {sp, lr}
  00df4	e12fff1e	 bx          lr
  00df8		 |$LN9@DllMain|
  00df8		 |$LN10@DllMain|
  00df8	00000000	 DCD         |dpCurSettings|
  00dfc		 |$M36896|

			 ENDP  ; |DllMain|

	END
