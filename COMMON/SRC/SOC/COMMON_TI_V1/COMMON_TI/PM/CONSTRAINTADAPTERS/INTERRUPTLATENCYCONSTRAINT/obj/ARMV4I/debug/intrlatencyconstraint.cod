; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\CONSTRAINTADAPTERS\INTERRUPTLATENCYCONSTRAINT\intrlatencyconstraint.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?GetIndex@?$IndexList@M@@QAAPAMK@Z|	; IndexList<float>::GetIndex
	EXPORT	|?MaxIndex@?$IndexList@M@@QAAKXZ|	; IndexList<float>::MaxIndex
	EXPORT	|?UpdateConstraint@@YAHXZ|		; UpdateConstraint
	IMPORT	|KernelIoControl|
	IMPORT	|__ges|
	IMPORT	|__lts|
	IMPORT	|__nes|

  00000			 AREA	 |.bss|, NOINIT
|s_ilInfo| %	0x18

  00000			 AREA	 |.pdata|, PDATA
|$T40242| DCD	|$LN15@UpdateCons|
	DCD	0x40005e02
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\interruptlatencyconstraint\intrlatencyconstraint.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?UpdateConstraint@@YAHXZ| PROC	; UpdateConstraint

; 85   : {

  00000		 |$LN15@UpdateCons|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd034	 sub         sp, sp, #0x34
  00008		 |$M40239|

; 86   :     int i;
; 87   :     BOOL rc = FALSE;    

  00008	e3a03000	 mov         r3, #0
  0000c	e58d3008	 str         r3, [sp, #8]

; 88   :     float *pDataNode;
; 89   :     float *pMinLatency = NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 90   :     float nullConstraint = IL_CONSTRAINT_NULL;    

  00018	e3e03080	 mvn         r3, #0x80
  0001c	e1a03b83	 mov         r3, r3, lsl #23
  00020	e58d3010	 str         r3, [sp, #0x10]

; 91   :         
; 92   :     // get highest operatin mode if not forced
; 93   :     for (i = 0; i < s_IndexList.MaxIndex(); ++i)

  00024	e3a03000	 mov         r3, #0
  00028	e58d3014	 str         r3, [sp, #0x14]
  0002c	ea000002	 b           |$LN10@UpdateCons|
  00030		 |$LN9@UpdateCons|
  00030	e59d3014	 ldr         r3, [sp, #0x14]
  00034	e2833001	 add         r3, r3, #1
  00038	e58d3014	 str         r3, [sp, #0x14]
  0003c		 |$LN10@UpdateCons|
  0003c	e59f0130	 ldr         r0, [pc, #0x130]
  00040	eb000000	 bl          |?MaxIndex@?$IndexList@M@@QAAKXZ|
  00044	e58d0028	 str         r0, [sp, #0x28]
  00048	e59d2014	 ldr         r2, [sp, #0x14]
  0004c	e59d3028	 ldr         r3, [sp, #0x28]
  00050	e1520003	 cmp         r2, r3
  00054	2a00001b	 bcs         |$LN8@UpdateCons|

; 94   :         {
; 95   :         pDataNode = s_IndexList.GetIndex(i);

  00058	e59d1014	 ldr         r1, [sp, #0x14]
  0005c	e59f0110	 ldr         r0, [pc, #0x110]
  00060	eb000000	 bl          |?GetIndex@?$IndexList@M@@QAAPAMK@Z|
  00064	e58d002c	 str         r0, [sp, #0x2C]
  00068	e59d302c	 ldr         r3, [sp, #0x2C]
  0006c	e58d3018	 str         r3, [sp, #0x18]

; 96   :         if (pDataNode != NULL && *pDataNode >= 0.0f)

  00070	e59d3018	 ldr         r3, [sp, #0x18]
  00074	e3530000	 cmp         r3, #0
  00078	0a000011	 beq         |$LN7@UpdateCons|
  0007c	e59d3018	 ldr         r3, [sp, #0x18]
  00080	e5930000	 ldr         r0, [r3]
  00084	e3a01000	 mov         r1, #0
  00088	eb000000	 bl          __ges
  0008c	e3500000	 cmp         r0, #0
  00090	0a00000b	 beq         |$LN7@UpdateCons|

; 97   :             {
; 98   :             if (pMinLatency == NULL || *pDataNode < *pMinLatency)

  00094	e59d300c	 ldr         r3, [sp, #0xC]
  00098	e3530000	 cmp         r3, #0
  0009c	0a000006	 beq         |$LN5@UpdateCons|
  000a0	e59d3018	 ldr         r3, [sp, #0x18]
  000a4	e5930000	 ldr         r0, [r3]
  000a8	e59d300c	 ldr         r3, [sp, #0xC]
  000ac	e5931000	 ldr         r1, [r3]
  000b0	eb000000	 bl          __lts
  000b4	e3500000	 cmp         r0, #0
  000b8	0a000001	 beq         |$LN6@UpdateCons|
  000bc		 |$LN5@UpdateCons|

; 99   :                 {
; 100  :                 pMinLatency = pDataNode;

  000bc	e59d3018	 ldr         r3, [sp, #0x18]
  000c0	e58d300c	 str         r3, [sp, #0xC]
  000c4		 |$LN6@UpdateCons|
  000c4		 |$LN7@UpdateCons|

; 101  :                 }
; 102  :             }
; 103  :         }

  000c4	eaffffd9	 b           |$LN9@UpdateCons|
  000c8		 |$LN8@UpdateCons|

; 104  : 
; 105  :     // if no minimum latency then use a null constraint to release
; 106  :     // all constraints
; 107  :     if (pMinLatency == NULL)

  000c8	e59d300c	 ldr         r3, [sp, #0xC]
  000cc	e3530000	 cmp         r3, #0
  000d0	1a000001	 bne         |$LN4@UpdateCons|

; 108  :         {
; 109  :         pMinLatency = &nullConstraint;

  000d4	e28d3010	 add         r3, sp, #0x10
  000d8	e58d300c	 str         r3, [sp, #0xC]
  000dc		 |$LN4@UpdateCons|

; 110  :         }
; 111  : 
; 112  :     // Prepare to send notifications
; 113  :     if (s_ilInfo.current != *pMinLatency)

  000dc	e59f3088	 ldr         r3, [pc, #0x88]
  000e0	e5930014	 ldr         r0, [r3, #0x14]
  000e4	e59d300c	 ldr         r3, [sp, #0xC]
  000e8	e5931000	 ldr         r1, [r3]
  000ec	eb000000	 bl          __nes
  000f0	e3500000	 cmp         r0, #0
  000f4	0a000014	 beq         |$LN3@UpdateCons|

; 114  :         {                         
; 115  :         // change operating points
; 116  :         rc = KernelIoControl(IOCTL_INTERRUPT_LATENCY_CONSTRAINT, pMinLatency, 
; 117  :                 sizeof(float), 0, 0, 0
; 118  :                 );

  000f8	e3a03000	 mov         r3, #0
  000fc	e58d3004	 str         r3, [sp, #4]
  00100	e3a03000	 mov         r3, #0
  00104	e58d3000	 str         r3, [sp]
  00108	e3a03000	 mov         r3, #0
  0010c	e3a02004	 mov         r2, #4
  00110	e59d100c	 ldr         r1, [sp, #0xC]
  00114	e59f0054	 ldr         r0, [pc, #0x54]
  00118	eb000000	 bl          KernelIoControl
  0011c	e58d0030	 str         r0, [sp, #0x30]
  00120	e59d3030	 ldr         r3, [sp, #0x30]
  00124	e58d3008	 str         r3, [sp, #8]

; 119  :         if (rc == FALSE) goto cleanUp;

  00128	e59d3008	 ldr         r3, [sp, #8]
  0012c	e3530000	 cmp         r3, #0
  00130	1a000001	 bne         |$LN2@UpdateCons|
  00134	ea000006	 b           |$LN1@UpdateCons|
  00138	ea000005	 b           |$cleanUp$39655|
  0013c		 |$LN2@UpdateCons|

; 120  :         s_ilInfo.current = *pMinLatency;

  0013c	e59d300c	 ldr         r3, [sp, #0xC]
  00140	e5932000	 ldr         r2, [r3]
  00144	e59f3020	 ldr         r3, [pc, #0x20]
  00148	e5832014	 str         r2, [r3, #0x14]
  0014c		 |$LN3@UpdateCons|

; 121  :         }
; 122  :     rc = TRUE;

  0014c	e3a03001	 mov         r3, #1
  00150	e58d3008	 str         r3, [sp, #8]
  00154		 |$LN1@UpdateCons|
  00154		 |$cleanUp$39655|

; 123  : 
; 124  : cleanUp:
; 125  :     return rc;

  00154	e59d3008	 ldr         r3, [sp, #8]
  00158	e58d3024	 str         r3, [sp, #0x24]

; 126  : }

  0015c	e59d0024	 ldr         r0, [sp, #0x24]
  00160	e28dd034	 add         sp, sp, #0x34
  00164	e49de004	 ldr         lr, [sp], #4
  00168	e12fff1e	 bx          lr
  0016c		 |$LN16@UpdateCons|
  0016c		 |$LN17@UpdateCons|
  0016c	00000000	 DCD         |s_ilInfo|
  00170		 |$LN18@UpdateCons|
  00170	02590fa4	 DCD         0x2590fa4
  00174		 |$LN19@UpdateCons|
  00174	00000000	 DCD         |s_IndexList|
  00178		 |$M40240|

			 ENDP  ; |?UpdateConstraint@@YAHXZ|, UpdateConstraint

	EXPORT	|?INTRLAT_InitConstraint@@YAPAXPBG@Z|	; INTRLAT_InitConstraint
	IMPORT	|InitializeCriticalSection|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|memset|

  00008			 AREA	 |.pdata|, PDATA
|$T40253| DCD	|$LN7@INTRLAT_In|
	DCD	0x40002a04
; Function compile flags: /Odtp

  00178			 AREA	 |.text|, CODE, ARM

  00178		 |?INTRLAT_InitConstraint@@YAPAXPBG@Z| PROC ; INTRLAT_InitConstraint

; 138  : {

  00178		 |$LN7@INTRLAT_In|
  00178	e1a0c00d	 mov         r12, sp
  0017c	e92d0001	 stmdb       sp!, {r0}
  00180	e92d5000	 stmdb       sp!, {r12, lr}
  00184	e24dd01c	 sub         sp, sp, #0x1C
  00188		 |$M40250|

; 139  :     LONG code;
; 140  :     HANDLE rc = NULL;

  00188	e3a03000	 mov         r3, #0
  0018c	e58d3004	 str         r3, [sp, #4]

; 141  :     HKEY hKey = NULL;

  00190	e3a03000	 mov         r3, #0
  00194	e58d3008	 str         r3, [sp, #8]

; 142  :     
; 143  :     // Initialize data structure
; 144  :     memset(&s_ilInfo, 0, sizeof(InterruptLatencyConstraintInfo_t));

  00198	e3a02018	 mov         r2, #0x18
  0019c	e3a01000	 mov         r1, #0
  001a0	e59f0074	 ldr         r0, [pc, #0x74]
  001a4	eb000000	 bl          memset

; 145  :     s_ilInfo.current = -1.0f;

  001a8	e59f206c	 ldr         r2, [pc, #0x6C]
  001ac	e3e03080	 mvn         r3, #0x80
  001b0	e1a03b83	 mov         r3, r3, lsl #23
  001b4	e5823014	 str         r3, [r2, #0x14]

; 146  : 
; 147  :     // read registry to get ceiling value    
; 148  :     code = ::RegOpenKeyEx(HKEY_LOCAL_MACHINE, szContext, 0, 0, &hKey);

  001b8	e28d3008	 add         r3, sp, #8
  001bc	e58d3000	 str         r3, [sp]
  001c0	e3a03000	 mov         r3, #0
  001c4	e3a02000	 mov         r2, #0
  001c8	e59d1024	 ldr         r1, [sp, #0x24]
  001cc	e3a0010a	 mov         r0, #0xA, 2
  001d0	eb000000	 bl          RegOpenKeyExW
  001d4	e58d0018	 str         r0, [sp, #0x18]
  001d8	e59d3018	 ldr         r3, [sp, #0x18]
  001dc	e58d300c	 str         r3, [sp, #0xC]

; 149  :     if (code != ERROR_SUCCESS) goto cleanUp;

  001e0	e59d300c	 ldr         r3, [sp, #0xC]
  001e4	e3530000	 cmp         r3, #0
  001e8	0a000001	 beq         |$LN2@INTRLAT_In|
  001ec	ea000004	 b           |$LN1@INTRLAT_In|
  001f0	ea000003	 b           |$cleanUp$39667|
  001f4		 |$LN2@INTRLAT_In|

; 150  : 
; 151  :     // intialize synchronization object
; 152  :     InitializeCriticalSection(&s_ilInfo.cs);

  001f4	e59f0020	 ldr         r0, [pc, #0x20]
  001f8	eb000000	 bl          InitializeCriticalSection

; 153  :     
; 154  :     rc = (HANDLE)&s_ilInfo;

  001fc	e59f3018	 ldr         r3, [pc, #0x18]
  00200	e58d3004	 str         r3, [sp, #4]
  00204		 |$LN1@INTRLAT_In|
  00204		 |$cleanUp$39667|

; 155  : 
; 156  : cleanUp:
; 157  :     return rc;

  00204	e59d3004	 ldr         r3, [sp, #4]
  00208	e58d3014	 str         r3, [sp, #0x14]

; 158  : } 

  0020c	e59d0014	 ldr         r0, [sp, #0x14]
  00210	e28dd01c	 add         sp, sp, #0x1C
  00214	e89d6000	 ldmia       sp, {sp, lr}
  00218	e12fff1e	 bx          lr
  0021c		 |$LN8@INTRLAT_In|
  0021c		 |$LN9@INTRLAT_In|
  0021c	00000000	 DCD         |s_ilInfo|
  00220		 |$M40251|

			 ENDP  ; |?INTRLAT_InitConstraint@@YAPAXPBG@Z|, INTRLAT_InitConstraint

	EXPORT	|?INTRLAT_DeinitConstraint@@YAHPAX@Z|	; INTRLAT_DeinitConstraint
	IMPORT	|DeleteCriticalSection|

  00010			 AREA	 |.pdata|, PDATA
|$T40261| DCD	|$LN7@INTRLAT_De|
	DCD	0x40001704
; Function compile flags: /Odtp

  00220			 AREA	 |.text|, CODE, ARM

  00220		 |?INTRLAT_DeinitConstraint@@YAHPAX@Z| PROC ; INTRLAT_DeinitConstraint

; 170  : {

  00220		 |$LN7@INTRLAT_De|
  00220	e1a0c00d	 mov         r12, sp
  00224	e92d0001	 stmdb       sp!, {r0}
  00228	e92d5000	 stmdb       sp!, {r12, lr}
  0022c	e24dd008	 sub         sp, sp, #8
  00230		 |$M40258|

; 171  :     BOOL rc = FALSE;

  00230	e3a03000	 mov         r3, #0
  00234	e58d3000	 str         r3, [sp]

; 172  : 
; 173  :     // validate parameters
; 174  :     if (hConstraintAdapter != (HANDLE)&s_ilInfo) goto cleanUp;

  00238	e59d2010	 ldr         r2, [sp, #0x10]
  0023c	e59f3034	 ldr         r3, [pc, #0x34]
  00240	e1520003	 cmp         r2, r3
  00244	0a000001	 beq         |$LN2@INTRLAT_De|
  00248	ea000004	 b           |$LN1@INTRLAT_De|
  0024c	ea000003	 b           |$cleanUp$39676|
  00250		 |$LN2@INTRLAT_De|

; 175  :     DeleteCriticalSection(&s_ilInfo.cs);

  00250	e59f0020	 ldr         r0, [pc, #0x20]
  00254	eb000000	 bl          DeleteCriticalSection

; 176  : 
; 177  :     rc = TRUE;

  00258	e3a03001	 mov         r3, #1
  0025c	e58d3000	 str         r3, [sp]
  00260		 |$LN1@INTRLAT_De|
  00260		 |$cleanUp$39676|

; 178  : 
; 179  : cleanUp:
; 180  :     return rc;

  00260	e59d3000	 ldr         r3, [sp]
  00264	e58d3004	 str         r3, [sp, #4]

; 181  : } 

  00268	e59d0004	 ldr         r0, [sp, #4]
  0026c	e28dd008	 add         sp, sp, #8
  00270	e89d6000	 ldmia       sp, {sp, lr}
  00274	e12fff1e	 bx          lr
  00278		 |$LN8@INTRLAT_De|
  00278		 |$LN9@INTRLAT_De|
  00278	00000000	 DCD         |s_ilInfo|
  0027c		 |$M40259|

			 ENDP  ; |?INTRLAT_DeinitConstraint@@YAHPAX@Z|, INTRLAT_DeinitConstraint

	EXPORT	|?NewIndex@?$IndexList@M@@QAAHPAPAMPAK@Z| ; IndexList<float>::NewIndex
	EXPORT	|?INTRLAT_CreateConstraint@@YAPAXPAX@Z|	; INTRLAT_CreateConstraint

  00018			 AREA	 |.pdata|, PDATA
|$T40269| DCD	|$LN9@INTRLAT_Cr|
	DCD	0x40002504
; Function compile flags: /Odtp

  0027c			 AREA	 |.text|, CODE, ARM

  0027c		 |?INTRLAT_CreateConstraint@@YAPAXPAX@Z| PROC ; INTRLAT_CreateConstraint

; 193  : {

  0027c		 |$LN9@INTRLAT_Cr|
  0027c	e1a0c00d	 mov         r12, sp
  00280	e92d0001	 stmdb       sp!, {r0}
  00284	e92d5000	 stmdb       sp!, {r12, lr}
  00288	e24dd014	 sub         sp, sp, #0x14
  0028c		 |$M40266|

; 194  :     DWORD id;
; 195  :     float *pDataNode;
; 196  :     HANDLE rc = NULL;

  0028c	e3a03000	 mov         r3, #0
  00290	e58d3004	 str         r3, [sp, #4]

; 197  :     
; 198  :     // validate parameters
; 199  :     if (hConstraintAdapter != (HANDLE)&s_ilInfo) goto cleanUp;

  00294	e59d201c	 ldr         r2, [sp, #0x1C]
  00298	e59f306c	 ldr         r3, [pc, #0x6C]
  0029c	e1520003	 cmp         r2, r3
  002a0	0a000001	 beq         |$LN4@INTRLAT_Cr|
  002a4	ea000011	 b           |$LN3@INTRLAT_Cr|
  002a8	ea000010	 b           |$cleanUp$39686|
  002ac		 |$LN4@INTRLAT_Cr|

; 200  : 
; 201  :     // get new index
; 202  :     if (s_IndexList.NewIndex(&pDataNode, &id) == FALSE)

  002ac	e28d2000	 add         r2, sp, #0
  002b0	e28d1008	 add         r1, sp, #8
  002b4	e59f004c	 ldr         r0, [pc, #0x4C]
  002b8	eb000000	 bl          |?NewIndex@?$IndexList@M@@QAAHPAPAMPAK@Z|
  002bc	e58d0010	 str         r0, [sp, #0x10]
  002c0	e59d3010	 ldr         r3, [sp, #0x10]
  002c4	e3530000	 cmp         r3, #0
  002c8	1a000001	 bne         |$LN2@INTRLAT_Cr|
  002cc	ea000007	 b           |$LN1@INTRLAT_Cr|

; 203  :         {
; 204  :         goto cleanUp;

  002d0	ea000006	 b           |$cleanUp$39686|
  002d4		 |$LN2@INTRLAT_Cr|

; 205  :         }
; 206  : 
; 207  :     // initialize values
; 208  :     rc = (HANDLE)(id + 1);

  002d4	e59d3000	 ldr         r3, [sp]
  002d8	e2833001	 add         r3, r3, #1
  002dc	e58d3004	 str         r3, [sp, #4]

; 209  :     *pDataNode = IL_CONSTRAINT_NULL;

  002e0	e59d2008	 ldr         r2, [sp, #8]
  002e4	e3e03080	 mvn         r3, #0x80
  002e8	e1a03b83	 mov         r3, r3, lsl #23
  002ec	e5823000	 str         r3, [r2]
  002f0		 |$LN1@INTRLAT_Cr|
  002f0		 |$LN3@INTRLAT_Cr|
  002f0		 |$cleanUp$39686|

; 210  : 
; 211  : cleanUp:    
; 212  :     return rc;

  002f0	e59d3004	 ldr         r3, [sp, #4]
  002f4	e58d300c	 str         r3, [sp, #0xC]

; 213  : } 

  002f8	e59d000c	 ldr         r0, [sp, #0xC]
  002fc	e28dd014	 add         sp, sp, #0x14
  00300	e89d6000	 ldmia       sp, {sp, lr}
  00304	e12fff1e	 bx          lr
  00308		 |$LN10@INTRLAT_Cr|
  00308		 |$LN11@INTRLAT_Cr|
  00308	00000000	 DCD         |s_IndexList|
  0030c		 |$LN12@INTRLAT_Cr|
  0030c	00000000	 DCD         |s_ilInfo|
  00310		 |$M40267|

			 ENDP  ; |?INTRLAT_CreateConstraint@@YAPAXPAX@Z|, INTRLAT_CreateConstraint

	EXPORT	|?INTRLAT_UpdateConstraint@@YAHPAXK0I@Z| ; INTRLAT_UpdateConstraint

  00020			 AREA	 |.pdata|, PDATA
|$T40278| DCD	|$LN17@INTRLAT_Up|
	DCD	0x40004a04
; Function compile flags: /Odtp

  00310			 AREA	 |.text|, CODE, ARM

  00310		 |?INTRLAT_UpdateConstraint@@YAHPAXK0I@Z| PROC ; INTRLAT_UpdateConstraint

; 228  : {

  00310		 |$LN17@INTRLAT_Up|
  00310	e1a0c00d	 mov         r12, sp
  00314	e92d000f	 stmdb       sp!, {r0 - r3}
  00318	e92d5000	 stmdb       sp!, {r12, lr}
  0031c	e24dd020	 sub         sp, sp, #0x20
  00320		 |$M40275|

; 229  :     float constraintNew;
; 230  :     BOOL rc = FALSE;

  00320	e3a03000	 mov         r3, #0
  00324	e58d3004	 str         r3, [sp, #4]

; 231  :     float *pDataNode;
; 232  :     DWORD id = (DWORD)hConstraintContext - 1;

  00328	e59d3028	 ldr         r3, [sp, #0x28]
  0032c	e2433001	 sub         r3, r3, #1
  00330	e58d3000	 str         r3, [sp]

; 233  :     
; 234  :     // validate parameters
; 235  :     if (size != sizeof(float)) goto cleanUp;

  00334	e59d3034	 ldr         r3, [sp, #0x34]
  00338	e3530004	 cmp         r3, #4
  0033c	0a000001	 beq         |$LN12@INTRLAT_Up|
  00340	ea000035	 b           |$LN11@INTRLAT_Up|
  00344	ea000034	 b           |$cleanUp$39704|
  00348		 |$LN12@INTRLAT_Up|

; 236  :     if (id > s_IndexList.MaxIndex()) goto cleanUp;

  00348	e59f00e4	 ldr         r0, [pc, #0xE4]
  0034c	eb000000	 bl          |?MaxIndex@?$IndexList@M@@QAAKXZ|
  00350	e58d0014	 str         r0, [sp, #0x14]
  00354	e59d2000	 ldr         r2, [sp]
  00358	e59d3014	 ldr         r3, [sp, #0x14]
  0035c	e1520003	 cmp         r2, r3
  00360	9a000001	 bls         |$LN10@INTRLAT_Up|
  00364	ea00002c	 b           |$LN9@INTRLAT_Up|
  00368	ea00002b	 b           |$cleanUp$39704|
  0036c		 |$LN10@INTRLAT_Up|

; 237  : 
; 238  :     // get data node
; 239  :     pDataNode = s_IndexList.GetIndex(id);

  0036c	e59d1000	 ldr         r1, [sp]
  00370	e59f00bc	 ldr         r0, [pc, #0xBC]
  00374	eb000000	 bl          |?GetIndex@?$IndexList@M@@QAAPAMK@Z|
  00378	e58d0018	 str         r0, [sp, #0x18]
  0037c	e59d3018	 ldr         r3, [sp, #0x18]
  00380	e58d300c	 str         r3, [sp, #0xC]

; 240  :     if (pDataNode == NULL) goto cleanUp;

  00384	e59d300c	 ldr         r3, [sp, #0xC]
  00388	e3530000	 cmp         r3, #0
  0038c	1a000001	 bne         |$LN8@INTRLAT_Up|
  00390	ea000021	 b           |$LN7@INTRLAT_Up|
  00394	ea000020	 b           |$cleanUp$39704|
  00398		 |$LN8@INTRLAT_Up|

; 241  : 
; 242  :     // determine new opm
; 243  :     constraintNew = *(float*)pParam;

  00398	e59d3030	 ldr         r3, [sp, #0x30]
  0039c	e5933000	 ldr         r3, [r3]
  003a0	e58d3008	 str         r3, [sp, #8]

; 244  :     if (CONSTRAINT_STATE_NULL == *(DWORD*)pParam)

  003a4	e59d3030	 ldr         r3, [sp, #0x30]
  003a8	e5933000	 ldr         r3, [r3]
  003ac	e3730801	 cmn         r3, #1, 16
  003b0	1a000003	 bne         |$LN6@INTRLAT_Up|

; 245  :         {
; 246  :         constraintNew = IL_CONSTRAINT_NULL;

  003b4	e3e03080	 mvn         r3, #0x80
  003b8	e1a03b83	 mov         r3, r3, lsl #23
  003bc	e58d3008	 str         r3, [sp, #8]
  003c0	ea000008	 b           |$LN5@INTRLAT_Up|
  003c4		 |$LN6@INTRLAT_Up|

; 247  :         }
; 248  :     else if (CONSTRAINT_STATE_FLOOR == *(DWORD*)pParam)

  003c4	e59d3030	 ldr         r3, [sp, #0x30]
  003c8	e5932000	 ldr         r2, [r3]
  003cc	e3e03cff	 mvn         r3, #0xFF, 24
  003d0	e22330fe	 eor         r3, r3, #0xFE
  003d4	e1520003	 cmp         r2, r3
  003d8	1a000002	 bne         |$LN4@INTRLAT_Up|

; 249  :         {
; 250  :         constraintNew = IL_CONSTRAINT_NULL;

  003dc	e3e03080	 mvn         r3, #0x80
  003e0	e1a03b83	 mov         r3, r3, lsl #23
  003e4	e58d3008	 str         r3, [sp, #8]
  003e8		 |$LN4@INTRLAT_Up|
  003e8		 |$LN5@INTRLAT_Up|

; 251  :         }
; 252  : 
; 253  :     // serialize access
; 254  :     Lock();

  003e8	eb000000	 bl          |?Lock@@YAXXZ|

; 255  :            
; 256  :     // process constraint message
; 257  :     switch (msg)

  003ec	e59d302c	 ldr         r3, [sp, #0x2C]
  003f0	e3530001	 cmp         r3, #1
  003f4	0a000000	 beq         |$LN1@INTRLAT_Up|
  003f8	ea000002	 b           |$LN2@INTRLAT_Up|
  003fc		 |$LN1@INTRLAT_Up|

; 258  :         {
; 259  :         case CONSTRAINT_MSG_INTRLAT_REQUEST:
; 260  :             *pDataNode = constraintNew;

  003fc	e59d2008	 ldr         r2, [sp, #8]
  00400	e59d300c	 ldr         r3, [sp, #0xC]
  00404	e5832000	 str         r2, [r3]
  00408		 |$LN2@INTRLAT_Up|

; 261  :             break;
; 262  :         }
; 263  :     
; 264  :     // update operating mode
; 265  :     rc = UpdateConstraint();

  00408	eb000000	 bl          |?UpdateConstraint@@YAHXZ|
  0040c	e58d001c	 str         r0, [sp, #0x1C]
  00410	e59d301c	 ldr         r3, [sp, #0x1C]
  00414	e58d3004	 str         r3, [sp, #4]

; 266  :     
; 267  :     Unlock();

  00418	eb000000	 bl          |?Unlock@@YAXXZ|
  0041c		 |$LN7@INTRLAT_Up|
  0041c		 |$LN9@INTRLAT_Up|
  0041c		 |$LN11@INTRLAT_Up|
  0041c		 |$cleanUp$39704|

; 268  : 
; 269  : cleanUp:
; 270  :     return rc;

  0041c	e59d3004	 ldr         r3, [sp, #4]
  00420	e58d3010	 str         r3, [sp, #0x10]

; 271  : } 

  00424	e59d0010	 ldr         r0, [sp, #0x10]
  00428	e28dd020	 add         sp, sp, #0x20
  0042c	e89d6000	 ldmia       sp, {sp, lr}
  00430	e12fff1e	 bx          lr
  00434		 |$LN18@INTRLAT_Up|
  00434		 |$LN19@INTRLAT_Up|
  00434	00000000	 DCD         |s_IndexList|
  00438		 |$M40276|

			 ENDP  ; |?INTRLAT_UpdateConstraint@@YAHPAXK0I@Z|, INTRLAT_UpdateConstraint

	IMPORT	|EnterCriticalSection|

  00028			 AREA	 |.pdata|, PDATA
|$T40285| DCD	|$LN5@Lock|
	DCD	0x40000601
; Function compile flags: /Odtp

  00438			 AREA	 |.text|, CODE, ARM

  00438		 |?Lock@@YAXXZ| PROC			; Lock

; 60   : {

  00438		 |$LN5@Lock|
  00438	e52de004	 str         lr, [sp, #-4]!
  0043c		 |$M40282|

; 61   :     EnterCriticalSection(&s_ilInfo.cs);

  0043c	e59f0008	 ldr         r0, [pc, #8]
  00440	eb000000	 bl          EnterCriticalSection

; 62   : }

  00444	e49de004	 ldr         lr, [sp], #4
  00448	e12fff1e	 bx          lr
  0044c		 |$LN6@Lock|
  0044c		 |$LN7@Lock|
  0044c	00000000	 DCD         |s_ilInfo|
  00450		 |$M40283|

			 ENDP  ; |?Lock@@YAXXZ|, Lock

	IMPORT	|LeaveCriticalSection|

  00030			 AREA	 |.pdata|, PDATA
|$T40292| DCD	|$LN5@Unlock|
	DCD	0x40000601
; Function compile flags: /Odtp

  00450			 AREA	 |.text|, CODE, ARM

  00450		 |?Unlock@@YAXXZ| PROC			; Unlock

; 73   : {

  00450		 |$LN5@Unlock|
  00450	e52de004	 str         lr, [sp, #-4]!
  00454		 |$M40289|

; 74   :     LeaveCriticalSection(&s_ilInfo.cs);

  00454	e59f0008	 ldr         r0, [pc, #8]
  00458	eb000000	 bl          LeaveCriticalSection

; 75   : }

  0045c	e49de004	 ldr         lr, [sp], #4
  00460	e12fff1e	 bx          lr
  00464		 |$LN6@Unlock|
  00464		 |$LN7@Unlock|
  00464	00000000	 DCD         |s_ilInfo|
  00468		 |$M40290|

			 ENDP  ; |?Unlock@@YAXXZ|, Unlock

	EXPORT	|?DeleteIndex@?$IndexList@M@@QAAXK@Z|	; IndexList<float>::DeleteIndex
	EXPORT	|?INTRLAT_CloseConstraint@@YAHPAX@Z|	; INTRLAT_CloseConstraint

  00038			 AREA	 |.pdata|, PDATA
|$T40300| DCD	|$LN9@INTRLAT_Cl|
	DCD	0x40002d04
; Function compile flags: /Odtp

  00468			 AREA	 |.text|, CODE, ARM

  00468		 |?INTRLAT_CloseConstraint@@YAHPAX@Z| PROC ; INTRLAT_CloseConstraint

; 283  : {

  00468		 |$LN9@INTRLAT_Cl|
  00468	e1a0c00d	 mov         r12, sp
  0046c	e92d0001	 stmdb       sp!, {r0}
  00470	e92d5000	 stmdb       sp!, {r12, lr}
  00474	e24dd01c	 sub         sp, sp, #0x1C
  00478		 |$M40297|

; 284  :     BOOL rc = FALSE;

  00478	e3a03000	 mov         r3, #0
  0047c	e58d3004	 str         r3, [sp, #4]

; 285  :     float *pDataNode;    
; 286  :     DWORD id = (DWORD)hConstraintContext - 1;

  00480	e59d3024	 ldr         r3, [sp, #0x24]
  00484	e2433001	 sub         r3, r3, #1
  00488	e58d3000	 str         r3, [sp]

; 287  : 
; 288  :     // validate
; 289  :     if (id > s_IndexList.MaxIndex()) goto cleanUp;

  0048c	e59f0084	 ldr         r0, [pc, #0x84]
  00490	eb000000	 bl          |?MaxIndex@?$IndexList@M@@QAAKXZ|
  00494	e58d0010	 str         r0, [sp, #0x10]
  00498	e59d2000	 ldr         r2, [sp]
  0049c	e59d3010	 ldr         r3, [sp, #0x10]
  004a0	e1520003	 cmp         r2, r3
  004a4	9a000001	 bls         |$LN4@INTRLAT_Cl|
  004a8	ea000014	 b           |$LN3@INTRLAT_Cl|
  004ac	ea000013	 b           |$cleanUp$39729|
  004b0		 |$LN4@INTRLAT_Cl|

; 290  : 
; 291  :     // get data node
; 292  :     pDataNode = s_IndexList.GetIndex(id);

  004b0	e59d1000	 ldr         r1, [sp]
  004b4	e59f005c	 ldr         r0, [pc, #0x5C]
  004b8	eb000000	 bl          |?GetIndex@?$IndexList@M@@QAAPAMK@Z|
  004bc	e58d0014	 str         r0, [sp, #0x14]
  004c0	e59d3014	 ldr         r3, [sp, #0x14]
  004c4	e58d3008	 str         r3, [sp, #8]

; 293  :     if (pDataNode == NULL) goto cleanUp;

  004c8	e59d3008	 ldr         r3, [sp, #8]
  004cc	e3530000	 cmp         r3, #0
  004d0	1a000001	 bne         |$LN2@INTRLAT_Cl|
  004d4	ea000009	 b           |$LN1@INTRLAT_Cl|
  004d8	ea000008	 b           |$cleanUp$39729|
  004dc		 |$LN2@INTRLAT_Cl|

; 294  : 
; 295  :     Lock();       

  004dc	eb000000	 bl          |?Lock@@YAXXZ|

; 296  :     s_IndexList.DeleteIndex(id);

  004e0	e59d1000	 ldr         r1, [sp]
  004e4	e59f002c	 ldr         r0, [pc, #0x2C]
  004e8	eb000000	 bl          |?DeleteIndex@?$IndexList@M@@QAAXK@Z|

; 297  :     rc = UpdateConstraint();

  004ec	eb000000	 bl          |?UpdateConstraint@@YAHXZ|
  004f0	e58d0018	 str         r0, [sp, #0x18]
  004f4	e59d3018	 ldr         r3, [sp, #0x18]
  004f8	e58d3004	 str         r3, [sp, #4]

; 298  :     Unlock();

  004fc	eb000000	 bl          |?Unlock@@YAXXZ|
  00500		 |$LN1@INTRLAT_Cl|
  00500		 |$LN3@INTRLAT_Cl|
  00500		 |$cleanUp$39729|

; 299  :     
; 300  : cleanUp:    
; 301  :     return rc;

  00500	e59d3004	 ldr         r3, [sp, #4]
  00504	e58d300c	 str         r3, [sp, #0xC]

; 302  : } 

  00508	e59d000c	 ldr         r0, [sp, #0xC]
  0050c	e28dd01c	 add         sp, sp, #0x1C
  00510	e89d6000	 ldmia       sp, {sp, lr}
  00514	e12fff1e	 bx          lr
  00518		 |$LN10@INTRLAT_Cl|
  00518		 |$LN11@INTRLAT_Cl|
  00518	00000000	 DCD         |s_IndexList|
  0051c		 |$M40298|

			 ENDP  ; |?INTRLAT_CloseConstraint@@YAHPAX@Z|, INTRLAT_CloseConstraint

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T40308| DCD	|$LN5@MaxIndex|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MaxIndex@?$IndexList@M@@QAAKXZ| PROC	; IndexList<float>::MaxIndex

; 76   :     {

  00000		 |$LN5@MaxIndex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40305|

; 77   :         return m_maxIndex;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833088	 add         r3, r3, #0x88
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 78   :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M40306|

			 ENDP  ; |?MaxIndex@?$IndexList@M@@QAAKXZ|, IndexList<float>::MaxIndex

	IMPORT	|??2@YAPAXI@Z|				; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T40317| DCD	|$LN12@NewIndex|
	DCD	0x40006204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NewIndex@?$IndexList@M@@QAAHPAPAMPAK@Z| PROC ; IndexList<float>::NewIndex

; 81   :     {

  00000		 |$LN12@NewIndex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M40314|

; 82   :         DWORD ffMask;
; 83   :         INT index = 0;        

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 84   :         BOOL rc = FALSE;        

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3000	 str         r3, [sp]

; 85   :         IndexData *pCurrent;
; 86   : 
; 87   :         // find emtpy chunk
; 88   :         pCurrent = &m_Head;

  00020	e59d3028	 ldr         r3, [sp, #0x28]
  00024	e58d300c	 str         r3, [sp, #0xC]
  00028		 |$LN7@NewIndex|

; 89   :         while (pCurrent->ffMask == (-1))

  00028	e59d300c	 ldr         r3, [sp, #0xC]
  0002c	e2833004	 add         r3, r3, #4
  00030	e5933000	 ldr         r3, [r3]
  00034	e3730001	 cmn         r3, #1
  00038	1a000024	 bne         |$LN6@NewIndex|

; 90   :             {
; 91   :             if (pCurrent->pNext == NULL)

  0003c	e59d300c	 ldr         r3, [sp, #0xC]
  00040	e5933000	 ldr         r3, [r3]
  00044	e3530000	 cmp         r3, #0
  00048	1a000019	 bne         |$LN5@NewIndex|

; 92   :                 {
; 93   :                 IndexData *pNew = new IndexData;

  0004c	e3a00088	 mov         r0, #0x88
  00050	eb000000	 bl          |??2@YAPAXI@Z|
  00054	e58d001c	 str         r0, [sp, #0x1C]
  00058	e59d301c	 ldr         r3, [sp, #0x1C]
  0005c	e58d3014	 str         r3, [sp, #0x14]
  00060	e59d3014	 ldr         r3, [sp, #0x14]
  00064	e58d3010	 str         r3, [sp, #0x10]

; 94   :                 if (pNew == NULL) goto cleanUp;

  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e3530000	 cmp         r3, #0
  00070	1a000001	 bne         |$LN4@NewIndex|
  00074	ea00003d	 b           |$LN3@NewIndex|
  00078	ea00003c	 b           |$cleanUp$39766|
  0007c		 |$LN4@NewIndex|

; 95   : 
; 96   :                 memset(pNew, 0, sizeof(IndexData));

  0007c	e3a02088	 mov         r2, #0x88
  00080	e3a01000	 mov         r1, #0
  00084	e59d0010	 ldr         r0, [sp, #0x10]
  00088	eb000000	 bl          memset

; 97   :                 pCurrent->pNext = pNew;

  0008c	e59d2010	 ldr         r2, [sp, #0x10]
  00090	e59d300c	 ldr         r3, [sp, #0xC]
  00094	e5832000	 str         r2, [r3]

; 98   :                 m_maxIndex += INDEXED_CHUNK_SIZE;

  00098	e59d3028	 ldr         r3, [sp, #0x28]
  0009c	e2833088	 add         r3, r3, #0x88
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e2832020	 add         r2, r3, #0x20
  000a8	e59d3028	 ldr         r3, [sp, #0x28]
  000ac	e2833088	 add         r3, r3, #0x88
  000b0	e5832000	 str         r2, [r3]
  000b4		 |$LN5@NewIndex|

; 99   :                 }
; 100  : 
; 101  :             index += INDEXED_CHUNK_SIZE;

  000b4	e59d3004	 ldr         r3, [sp, #4]
  000b8	e2833020	 add         r3, r3, #0x20
  000bc	e58d3004	 str         r3, [sp, #4]

; 102  :             pCurrent = pCurrent->pNext;

  000c0	e59d300c	 ldr         r3, [sp, #0xC]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e58d300c	 str         r3, [sp, #0xC]

; 103  :             }

  000cc	eaffffd5	 b           |$LN7@NewIndex|
  000d0		 |$LN6@NewIndex|

; 104  : 
; 105  :         // get index within chunk
; 106  :         ffMask = pCurrent->ffMask;

  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e2833004	 add         r3, r3, #4
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e58d3008	 str         r3, [sp, #8]
  000e0		 |$LN2@NewIndex|

; 107  :         while ((ffMask & 1) == 1)

  000e0	e59d3008	 ldr         r3, [sp, #8]
  000e4	e2033001	 and         r3, r3, #1
  000e8	e3530001	 cmp         r3, #1
  000ec	1a000006	 bne         |$LN1@NewIndex|

; 108  :             {
; 109  :             index++;

  000f0	e59d3004	 ldr         r3, [sp, #4]
  000f4	e2833001	 add         r3, r3, #1
  000f8	e58d3004	 str         r3, [sp, #4]

; 110  :             ffMask >>= 1;

  000fc	e59d3008	 ldr         r3, [sp, #8]
  00100	e1a030a3	 mov         r3, r3, lsr #1
  00104	e58d3008	 str         r3, [sp, #8]

; 111  :             }

  00108	eafffff4	 b           |$LN2@NewIndex|
  0010c		 |$LN1@NewIndex|

; 112  : 
; 113  :         // copy empty slot info and mark as reserved
; 114  :         *pId = index;

  0010c	e59d2004	 ldr         r2, [sp, #4]
  00110	e59d3030	 ldr         r3, [sp, #0x30]
  00114	e5832000	 str         r2, [r3]

; 115  :         *ppType = &(pCurrent->rgData[index & 0x1F]);

  00118	e59d300c	 ldr         r3, [sp, #0xC]
  0011c	e2831008	 add         r1, r3, #8
  00120	e59d3004	 ldr         r3, [sp, #4]
  00124	e203201f	 and         r2, r3, #0x1F
  00128	e3a03004	 mov         r3, #4
  0012c	e0030392	 mul         r3, r2, r3
  00130	e0812003	 add         r2, r1, r3
  00134	e59d302c	 ldr         r3, [sp, #0x2C]
  00138	e5832000	 str         r2, [r3]

; 116  :         pCurrent->ffMask |= (1 << (index & 0x1F));

  0013c	e59d300c	 ldr         r3, [sp, #0xC]
  00140	e2831004	 add         r1, r3, #4
  00144	e59d3004	 ldr         r3, [sp, #4]
  00148	e203201f	 and         r2, r3, #0x1F
  0014c	e3a03001	 mov         r3, #1
  00150	e1a02213	 mov         r2, r3, lsl r2
  00154	e5913000	 ldr         r3, [r1]
  00158	e1832002	 orr         r2, r3, r2
  0015c	e59d300c	 ldr         r3, [sp, #0xC]
  00160	e2833004	 add         r3, r3, #4
  00164	e5832000	 str         r2, [r3]

; 117  : 
; 118  :         rc = TRUE;

  00168	e3a03001	 mov         r3, #1
  0016c	e58d3000	 str         r3, [sp]
  00170		 |$LN3@NewIndex|
  00170		 |$cleanUp$39766|

; 119  :     cleanUp:
; 120  :         return rc;

  00170	e59d3000	 ldr         r3, [sp]
  00174	e58d3018	 str         r3, [sp, #0x18]

; 121  :     }

  00178	e59d0018	 ldr         r0, [sp, #0x18]
  0017c	e28dd020	 add         sp, sp, #0x20
  00180	e89d6000	 ldmia       sp, {sp, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$M40315|

			 ENDP  ; |?NewIndex@?$IndexList@M@@QAAHPAPAMPAK@Z|, IndexList<float>::NewIndex


  00000			 AREA	 |.pdata|, PDATA
|$T40324| DCD	|$LN8@DeleteInde|
	DCD	0x40002604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeleteIndex@?$IndexList@M@@QAAXK@Z| PROC ; IndexList<float>::DeleteIndex

; 124  :     {

  00000		 |$LN8@DeleteInde|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M40321|

; 125  :         IndexData *pCurrent;
; 126  :         DWORD chunkId = id >> 5;

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e1a032a3	 mov         r3, r3, lsr #5
  00018	e58d3000	 str         r3, [sp]

; 127  : 
; 128  :         // find chunk
; 129  :         pCurrent = &m_Head;

  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e58d3004	 str         r3, [sp, #4]
  00024		 |$LN3@DeleteInde|

; 130  :         while (chunkId)

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000a	 beq         |$LN2@DeleteInde|

; 131  :             {
; 132  :             --chunkId;

  00030	e59d3000	 ldr         r3, [sp]
  00034	e2433001	 sub         r3, r3, #1
  00038	e58d3000	 str         r3, [sp]

; 133  :             pCurrent = pCurrent->pNext;

  0003c	e59d3004	 ldr         r3, [sp, #4]
  00040	e5933000	 ldr         r3, [r3]
  00044	e58d3004	 str         r3, [sp, #4]

; 134  :             if (pCurrent == NULL) return;            

  00048	e59d3004	 ldr         r3, [sp, #4]
  0004c	e3530000	 cmp         r3, #0
  00050	1a000000	 bne         |$LN1@DeleteInde|
  00054	ea00000c	 b           |$LN4@DeleteInde|
  00058		 |$LN1@DeleteInde|

; 135  :             }

  00058	eafffff1	 b           |$LN3@DeleteInde|
  0005c		 |$LN2@DeleteInde|

; 136  : 
; 137  :         // clear mask
; 138  :         pCurrent->ffMask &= ~(1 << (id & 0x1F));

  0005c	e59d3004	 ldr         r3, [sp, #4]
  00060	e2831004	 add         r1, r3, #4
  00064	e59d3014	 ldr         r3, [sp, #0x14]
  00068	e203201f	 and         r2, r3, #0x1F
  0006c	e3a03001	 mov         r3, #1
  00070	e1a03213	 mov         r3, r3, lsl r2
  00074	e1e02003	 mvn         r2, r3
  00078	e5913000	 ldr         r3, [r1]
  0007c	e0032002	 and         r2, r3, r2
  00080	e59d3004	 ldr         r3, [sp, #4]
  00084	e2833004	 add         r3, r3, #4
  00088	e5832000	 str         r2, [r3]
  0008c		 |$LN4@DeleteInde|

; 139  :     }

  0008c	e28dd008	 add         sp, sp, #8
  00090	e89d6000	 ldmia       sp, {sp, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M40322|

			 ENDP  ; |?DeleteIndex@?$IndexList@M@@QAAXK@Z|, IndexList<float>::DeleteIndex


  00000			 AREA	 |.pdata|, PDATA
|$T40334| DCD	|$LN10@GetIndex|
	DCD	0x40003304
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetIndex@?$IndexList@M@@QAAPAMK@Z| PROC ; IndexList<float>::GetIndex

; 142  :     {

  00000		 |$LN10@GetIndex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M40331|

; 143  :         IndexData *pCurrent;
; 144  :         DWORD chunkId = id >> 5;

  00010	e59d301c	 ldr         r3, [sp, #0x1C]
  00014	e1a032a3	 mov         r3, r3, lsr #5
  00018	e58d3000	 str         r3, [sp]

; 145  : 
; 146  :         // find chunk
; 147  :         pCurrent = &m_Head;

  0001c	e59d3018	 ldr         r3, [sp, #0x18]
  00020	e58d3004	 str         r3, [sp, #4]
  00024		 |$LN3@GetIndex|

; 148  :         while (chunkId)

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000c	 beq         |$LN2@GetIndex|

; 149  :             {
; 150  :             --chunkId;

  00030	e59d3000	 ldr         r3, [sp]
  00034	e2433001	 sub         r3, r3, #1
  00038	e58d3000	 str         r3, [sp]

; 151  :             pCurrent = pCurrent->pNext;

  0003c	e59d3004	 ldr         r3, [sp, #4]
  00040	e5933000	 ldr         r3, [r3]
  00044	e58d3004	 str         r3, [sp, #4]

; 152  :             if (pCurrent == NULL) return NULL;   

  00048	e59d3004	 ldr         r3, [sp, #4]
  0004c	e3530000	 cmp         r3, #0
  00050	1a000002	 bne         |$LN1@GetIndex|
  00054	e3a03000	 mov         r3, #0
  00058	e58d3008	 str         r3, [sp, #8]
  0005c	ea000016	 b           |$LN4@GetIndex|
  00060		 |$LN1@GetIndex|

; 153  :             }

  00060	eaffffef	 b           |$LN3@GetIndex|
  00064		 |$LN2@GetIndex|

; 154  : 
; 155  :         // clear mask
; 156  :         return (pCurrent->ffMask & (1 << (id & 0x1F))) ? 
; 157  :                     &(pCurrent->rgData[id & 0x1F]) : NULL;

  00064	e59d3004	 ldr         r3, [sp, #4]
  00068	e2831004	 add         r1, r3, #4
  0006c	e59d301c	 ldr         r3, [sp, #0x1C]
  00070	e203201f	 and         r2, r3, #0x1F
  00074	e3a03001	 mov         r3, #1
  00078	e1a02213	 mov         r2, r3, lsl r2
  0007c	e5913000	 ldr         r3, [r1]
  00080	e1130002	 tst         r3, r2
  00084	0a000008	 beq         |$LN6@GetIndex|
  00088	e59d3004	 ldr         r3, [sp, #4]
  0008c	e2831008	 add         r1, r3, #8
  00090	e59d301c	 ldr         r3, [sp, #0x1C]
  00094	e203201f	 and         r2, r3, #0x1F
  00098	e3a03004	 mov         r3, #4
  0009c	e0030392	 mul         r3, r2, r3
  000a0	e0813003	 add         r3, r1, r3
  000a4	e58d300c	 str         r3, [sp, #0xC]
  000a8	ea000001	 b           |$LN7@GetIndex|
  000ac		 |$LN6@GetIndex|
  000ac	e3a03000	 mov         r3, #0
  000b0	e58d300c	 str         r3, [sp, #0xC]
  000b4		 |$LN7@GetIndex|
  000b4	e59d300c	 ldr         r3, [sp, #0xC]
  000b8	e58d3008	 str         r3, [sp, #8]
  000bc		 |$LN4@GetIndex|

; 158  :     }

  000bc	e59d0008	 ldr         r0, [sp, #8]
  000c0	e28dd010	 add         sp, sp, #0x10
  000c4	e89d6000	 ldmia       sp, {sp, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M40332|

			 ENDP  ; |?GetIndex@?$IndexList@M@@QAAPAMK@Z|, IndexList<float>::GetIndex

	EXPORT	|??0?$IndexList@M@@QAA@XZ|		; IndexList<float>::IndexList<float>
	IMPORT	|atexit|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\interruptlatencyconstraint\intrlatencyconstraint.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T40341| DCD	|$LN5@dynamic|
	DCD	0x40000901
; Function compile flags: /Odtp

  00000			 AREA	 |.text$yc|, CODE, ARM

  00000		 |??__Es_IndexList@@YAXXZ| PROC		; `dynamic initializer for 's_IndexList''

; 48   : static IndexList<float>                 s_IndexList;

  00000		 |$LN5@dynamic|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40338|
  00004	e59f0014	 ldr         r0, [pc, #0x14]
  00008	eb000000	 bl          |??0?$IndexList@M@@QAA@XZ|
  0000c	e59f0008	 ldr         r0, [pc, #8]
  00010	eb000000	 bl          atexit
  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN6@dynamic|
  0001c		 |$LN7@dynamic|
  0001c	00000000	 DCD         |??__Fs_IndexList@@YAXXZ|
  00020		 |$LN8@dynamic|
  00020	00000000	 DCD         |s_IndexList|
  00024		 |$M40339|

			 ENDP  ; |??__Es_IndexList@@YAXXZ|, `dynamic initializer for 's_IndexList''

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T40352| DCD	|$LN5@IndexList|
	DCD	0x40001204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0?$IndexList@M@@QAA@XZ| PROC	; IndexList<float>::IndexList<float>

; 51   :     IndexList()

  00000		 |$LN5@IndexList|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40349|

; 52   :     {        
; 53   :         memset(&m_Head, 0, sizeof(IndexData));

  00010	e3a02088	 mov         r2, #0x88
  00014	e3a01000	 mov         r1, #0
  00018	e59d000c	 ldr         r0, [sp, #0xC]
  0001c	eb000000	 bl          memset

; 54   :         m_maxIndex = INDEXED_CHUNK_SIZE - 1;

  00020	e59d300c	 ldr         r3, [sp, #0xC]
  00024	e2832088	 add         r2, r3, #0x88
  00028	e3a0301f	 mov         r3, #0x1F
  0002c	e5823000	 str         r3, [r2]

; 55   :     }

  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d0000	 ldr         r0, [sp]
  0003c	e28dd004	 add         sp, sp, #4
  00040	e89d6000	 ldmia       sp, {sp, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M40350|

			 ENDP  ; |??0?$IndexList@M@@QAA@XZ|, IndexList<float>::IndexList<float>

	EXPORT	|??1?$IndexList@M@@QAA@XZ|		; IndexList<float>::~IndexList<float>

  00000			 AREA	 |.pdata|, PDATA
|$T40359| DCD	|$LN5@dynamic@2|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text$yd|, CODE, ARM

  00000		 |??__Fs_IndexList@@YAXXZ| PROC		; `dynamic atexit destructor for 's_IndexList''
  00000		 |$LN5@dynamic@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M40356|
  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          |??1?$IndexList@M@@QAA@XZ|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@dynamic@2|
  00014		 |$LN7@dynamic@2|
  00014	00000000	 DCD         |s_IndexList|
  00018		 |$M40357|

			 ENDP  ; |??__Fs_IndexList@@YAXXZ|, `dynamic atexit destructor for 's_IndexList''

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T40369| DCD	|$LN7@IndexList@2|
	DCD	0x40001704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1?$IndexList@M@@QAA@XZ| PROC	; IndexList<float>::~IndexList<float>

; 58   :     {

  00000		 |$LN7@IndexList@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M40366|

; 59   :         IndexData *pCurrent;
; 60   :         IndexData *pDelete;
; 61   : 
; 62   :         pCurrent = m_Head.pNext;

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3004	 str         r3, [sp, #4]
  0001c		 |$LN2@IndexList@2|

; 63   :         while (pCurrent != NULL)

  0001c	e59d3004	 ldr         r3, [sp, #4]
  00020	e3530000	 cmp         r3, #0
  00024	0a000009	 beq         |$LN1@IndexList@2|

; 64   :             {
; 65   :             pDelete = pCurrent;

  00028	e59d3004	 ldr         r3, [sp, #4]
  0002c	e58d3000	 str         r3, [sp]

; 66   :             pCurrent = pCurrent->pNext;

  00030	e59d3004	 ldr         r3, [sp, #4]
  00034	e5933000	 ldr         r3, [r3]
  00038	e58d3004	 str         r3, [sp, #4]

; 67   :             delete pDelete;

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e58d3008	 str         r3, [sp, #8]
  00044	e59d0008	 ldr         r0, [sp, #8]
  00048	eb000000	 bl          |??3@YAXPAX@Z|

; 68   :             }

  0004c	eafffff2	 b           |$LN2@IndexList@2|
  00050		 |$LN1@IndexList@2|

; 69   :     }

  00050	e28dd00c	 add         sp, sp, #0xC
  00054	e89d6000	 ldmia       sp, {sp, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M40367|

			 ENDP  ; |??1?$IndexList@M@@QAA@XZ|, IndexList<float>::~IndexList<float>


  00018			 AREA	 |.bss|, NOINIT
|s_IndexList| %	0x8c

  00000			 AREA	 |.CRT$XCU|, DATA
|s_IndexList$initializer$| DCD |??__Es_IndexList@@YAXXZ|
	END
