; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\PM\CONSTRAINTADAPTERS\DVFSCONSTRAINT\dvfsconstraint.cpp
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|?IsHex@@YAHG@Z|			; IsHex

  00000			 AREA	 |.pdata|, PDATA
|$T40955| DCD	|$LN8@IsHex|
	DCD	0x40002504
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?IsHex@@YAHG@Z| PROC			; IsHex

; 116  : {

  00000		 |$LN8@IsHex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M40952|

; 117  :     if (c >= _T('0') && c <= _T('9')) return TRUE;

  00010	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00014	e3530030	 cmp         r3, #0x30
  00018	ba000005	 blt         |$LN3@IsHex|
  0001c	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00020	e3530039	 cmp         r3, #0x39
  00024	ca000002	 bgt         |$LN3@IsHex|
  00028	e3a03001	 mov         r3, #1
  0002c	e58d3000	 str         r3, [sp]
  00030	ea000013	 b           |$LN4@IsHex|
  00034		 |$LN3@IsHex|

; 118  :     if (c >= _T('a') && c <= _T('f')) return TRUE;

  00034	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00038	e3530061	 cmp         r3, #0x61
  0003c	ba000005	 blt         |$LN2@IsHex|
  00040	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00044	e3530066	 cmp         r3, #0x66
  00048	ca000002	 bgt         |$LN2@IsHex|
  0004c	e3a03001	 mov         r3, #1
  00050	e58d3000	 str         r3, [sp]
  00054	ea00000a	 b           |$LN4@IsHex|
  00058		 |$LN2@IsHex|

; 119  :     if (c >= _T('A') && c <= _T('F')) return TRUE;

  00058	e1dd30bc	 ldrh        r3, [sp, #0xC]
  0005c	e3530041	 cmp         r3, #0x41
  00060	ba000005	 blt         |$LN1@IsHex|
  00064	e1dd30bc	 ldrh        r3, [sp, #0xC]
  00068	e3530046	 cmp         r3, #0x46
  0006c	ca000002	 bgt         |$LN1@IsHex|
  00070	e3a03001	 mov         r3, #1
  00074	e58d3000	 str         r3, [sp]
  00078	ea000001	 b           |$LN4@IsHex|
  0007c		 |$LN1@IsHex|

; 120  :     return FALSE;

  0007c	e3a03000	 mov         r3, #0
  00080	e58d3000	 str         r3, [sp]
  00084		 |$LN4@IsHex|

; 121  : }

  00084	e59d0000	 ldr         r0, [sp]
  00088	e28dd004	 add         sp, sp, #4
  0008c	e89d6000	 ldmia       sp, {sp, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M40953|

			 ENDP  ; |?IsHex@@YAHG@Z|, IsHex

	EXPORT	|?ParseOppToOpmMap@@YAHPBGKPAKK@Z|	; ParseOppToOpmMap
	IMPORT	|wcstoul|

  00008			 AREA	 |.pdata|, PDATA
|$T40961| DCD	|$LN20@ParseOppTo|
	DCD	0x40007504
; Function compile flags: /Odtp

  00094			 AREA	 |.text|, CODE, ARM

  00094		 |?ParseOppToOpmMap@@YAHPBGKPAKK@Z| PROC ; ParseOppToOpmMap

; 134  : {

  00094		 |$LN20@ParseOppTo|
  00094	e1a0c00d	 mov         r12, sp
  00098	e92d000f	 stmdb       sp!, {r0 - r3}
  0009c	e92d5000	 stmdb       sp!, {r12, lr}
  000a0	e24dd020	 sub         sp, sp, #0x20
  000a4		 |$M40958|

; 135  :     BOOL rc = FALSE;

  000a4	e3a03000	 mov         r3, #0
  000a8	e58d3004	 str         r3, [sp, #4]

; 136  :     DWORD count;
; 137  :     DWORD nStartPos = 0;

  000ac	e3a03000	 mov         r3, #0
  000b0	e58d3010	 str         r3, [sp, #0x10]

; 138  :     DWORD nEndPos = 0;

  000b4	e3a03000	 mov         r3, #0
  000b8	e58d300c	 str         r3, [sp, #0xC]

; 139  :     DWORD nOppIndex = 0;

  000bc	e3a03000	 mov         r3, #0
  000c0	e58d3008	 str         r3, [sp, #8]
  000c4		 |$LN15@ParseOppTo|

; 140  :     
; 141  :     // get end of string
; 142  :     while (nEndPos < nLen && nOppIndex < nMaxIndex)

  000c4	e59d200c	 ldr         r2, [sp, #0xC]
  000c8	e59d302c	 ldr         r3, [sp, #0x2C]
  000cc	e1520003	 cmp         r2, r3
  000d0	2a00005c	 bcs         |$LN14@ParseOppTo|
  000d4	e59d2008	 ldr         r2, [sp, #8]
  000d8	e59d3034	 ldr         r3, [sp, #0x34]
  000dc	e1520003	 cmp         r2, r3
  000e0	2a000058	 bcs         |$LN14@ParseOppTo|

; 143  :         {
; 144  :         count = 0;

  000e4	e3a03000	 mov         r3, #0
  000e8	e58d3000	 str         r3, [sp]
  000ec		 |$LN13@ParseOppTo|

; 145  :         do
; 146  :             {
; 147  :             if (IsHex(szOpp[nEndPos]))

  000ec	e59d100c	 ldr         r1, [sp, #0xC]
  000f0	e3a03002	 mov         r3, #2
  000f4	e0020391	 mul         r2, r1, r3
  000f8	e59d3028	 ldr         r3, [sp, #0x28]
  000fc	e0833002	 add         r3, r3, r2
  00100	e1d300b0	 ldrh        r0, [r3]
  00104	eb000000	 bl          |?IsHex@@YAHG@Z|
  00108	e58d0018	 str         r0, [sp, #0x18]
  0010c	e59d3018	 ldr         r3, [sp, #0x18]
  00110	e3530000	 cmp         r3, #0
  00114	0a000006	 beq         |$LN10@ParseOppTo|

; 148  :                 {
; 149  :                 count++;

  00118	e59d3000	 ldr         r3, [sp]
  0011c	e2833001	 add         r3, r3, #1
  00120	e58d3000	 str         r3, [sp]

; 150  :                 nEndPos++;

  00124	e59d300c	 ldr         r3, [sp, #0xC]
  00128	e2833001	 add         r3, r3, #1
  0012c	e58d300c	 str         r3, [sp, #0xC]

; 151  :                 }
; 152  :             else if (szOpp[nEndPos] == _T(',') ||

  00130	ea00001b	 b           |$LN9@ParseOppTo|
  00134		 |$LN10@ParseOppTo|

; 153  :                      szOpp[nEndPos] == _T(' ') ||
; 154  :                      szOpp[nEndPos] == _T('\0'))

  00134	e59d100c	 ldr         r1, [sp, #0xC]
  00138	e3a03002	 mov         r3, #2
  0013c	e0020391	 mul         r2, r1, r3
  00140	e59d3028	 ldr         r3, [sp, #0x28]
  00144	e0833002	 add         r3, r3, r2
  00148	e1d330b0	 ldrh        r3, [r3]
  0014c	e353002c	 cmp         r3, #0x2C
  00150	0a00000f	 beq         |$LN7@ParseOppTo|
  00154	e59d100c	 ldr         r1, [sp, #0xC]
  00158	e3a03002	 mov         r3, #2
  0015c	e0020391	 mul         r2, r1, r3
  00160	e59d3028	 ldr         r3, [sp, #0x28]
  00164	e0833002	 add         r3, r3, r2
  00168	e1d330b0	 ldrh        r3, [r3]
  0016c	e3530020	 cmp         r3, #0x20
  00170	0a000007	 beq         |$LN7@ParseOppTo|
  00174	e59d100c	 ldr         r1, [sp, #0xC]
  00178	e3a03002	 mov         r3, #2
  0017c	e0020391	 mul         r2, r1, r3
  00180	e59d3028	 ldr         r3, [sp, #0x28]
  00184	e0833002	 add         r3, r3, r2
  00188	e1d330b0	 ldrh        r3, [r3]
  0018c	e3530000	 cmp         r3, #0
  00190	1a000001	 bne         |$LN8@ParseOppTo|
  00194		 |$LN7@ParseOppTo|

; 155  :                 {
; 156  :                 // got end marker
; 157  :                 break;

  00194	ea00000e	 b           |$LN11@ParseOppTo|

; 158  :                 }
; 159  :             else

  00198	ea000001	 b           |$LN6@ParseOppTo|
  0019c		 |$LN8@ParseOppTo|

; 160  :                 {
; 161  :                 // unexpected character
; 162  :                 goto cleanUp;

  0019c	ea00002b	 b           |$LN5@ParseOppTo|
  001a0	ea00002a	 b           |$cleanUp$39898|
  001a4		 |$LN6@ParseOppTo|
  001a4		 |$LN9@ParseOppTo|

; 163  :                 }
; 164  : 
; 165  :             // check for too long hex values
; 166  :             if (count > 8 || count == 0) goto cleanUp;

  001a4	e59d3000	 ldr         r3, [sp]
  001a8	e3530008	 cmp         r3, #8
  001ac	8a000002	 bhi         |$LN3@ParseOppTo|
  001b0	e59d3000	 ldr         r3, [sp]
  001b4	e3530000	 cmp         r3, #0
  001b8	1a000001	 bne         |$LN4@ParseOppTo|
  001bc		 |$LN3@ParseOppTo|
  001bc	ea000023	 b           |$LN2@ParseOppTo|
  001c0	ea000022	 b           |$cleanUp$39898|
  001c4		 |$LN4@ParseOppTo|

; 167  :             }
; 168  :             while (nEndPos < nLen);

  001c4	e59d200c	 ldr         r2, [sp, #0xC]
  001c8	e59d302c	 ldr         r3, [sp, #0x2C]
  001cc	e1520003	 cmp         r2, r3
  001d0	3affffc5	 bcc         |$LN13@ParseOppTo|
  001d4		 |$LN11@ParseOppTo|

; 169  : 
; 170  :         // check for double NULL
; 171  :         if (count == 0) break;

  001d4	e59d3000	 ldr         r3, [sp]
  001d8	e3530000	 cmp         r3, #0
  001dc	1a000000	 bne         |$LN1@ParseOppTo|
  001e0	ea000018	 b           |$LN14@ParseOppTo|
  001e4		 |$LN1@ParseOppTo|

; 172  : 
; 173  :         rgOppMap[nOppIndex] = _tcstoul(szOpp + nStartPos, NULL, 16);

  001e4	e3a02010	 mov         r2, #0x10
  001e8	e3a01000	 mov         r1, #0
  001ec	e59de010	 ldr         lr, [sp, #0x10]
  001f0	e3a03002	 mov         r3, #2
  001f4	e000039e	 mul         r0, lr, r3
  001f8	e59d3028	 ldr         r3, [sp, #0x28]
  001fc	e0830000	 add         r0, r3, r0
  00200	eb000000	 bl          wcstoul
  00204	e58d001c	 str         r0, [sp, #0x1C]
  00208	e59d1008	 ldr         r1, [sp, #8]
  0020c	e3a03004	 mov         r3, #4
  00210	e0020391	 mul         r2, r1, r3
  00214	e59d3030	 ldr         r3, [sp, #0x30]
  00218	e0832002	 add         r2, r3, r2
  0021c	e59d301c	 ldr         r3, [sp, #0x1C]
  00220	e5823000	 str         r3, [r2]

; 174  : 
; 175  :         // update for next class identifier
; 176  :         nEndPos++;

  00224	e59d300c	 ldr         r3, [sp, #0xC]
  00228	e2833001	 add         r3, r3, #1
  0022c	e58d300c	 str         r3, [sp, #0xC]

; 177  :         nStartPos = nEndPos;

  00230	e59d300c	 ldr         r3, [sp, #0xC]
  00234	e58d3010	 str         r3, [sp, #0x10]

; 178  :         nOppIndex++;

  00238	e59d3008	 ldr         r3, [sp, #8]
  0023c	e2833001	 add         r3, r3, #1
  00240	e58d3008	 str         r3, [sp, #8]

; 179  :         }

  00244	eaffff9e	 b           |$LN15@ParseOppTo|
  00248		 |$LN14@ParseOppTo|

; 180  : 
; 181  :     rc = TRUE;

  00248	e3a03001	 mov         r3, #1
  0024c	e58d3004	 str         r3, [sp, #4]
  00250		 |$LN2@ParseOppTo|
  00250		 |$LN5@ParseOppTo|
  00250		 |$cleanUp$39898|

; 182  :     
; 183  : cleanUp:
; 184  :     return rc;

  00250	e59d3004	 ldr         r3, [sp, #4]
  00254	e58d3014	 str         r3, [sp, #0x14]

; 185  : }

  00258	e59d0014	 ldr         r0, [sp, #0x14]
  0025c	e28dd020	 add         sp, sp, #0x20
  00260	e89d6000	 ldmia       sp, {sp, lr}
  00264	e12fff1e	 bx          lr
  00268		 |$M40959|

			 ENDP  ; |?ParseOppToOpmMap@@YAHPBGKPAKK@Z|, ParseOppToOpmMap

	EXPORT	|??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator*
	EXPORT	|??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator!=
	EXPORT	|?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::end
	EXPORT	|??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++
	EXPORT	|?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::begin
	EXPORT	|??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator
	EXPORT	|?NotifyCallbacks@@YAXKK@Z|		; NotifyCallbacks
	IMPORT	|memcpy|

  00010			 AREA	 |.pdata|, PDATA
|$T40969| DCD	|$LN9@NotifyCall|
	DCD	0x40003f04
; Function compile flags: /Odtp

  00268			 AREA	 |.text|, CODE, ARM

  00268		 |?NotifyCallbacks@@YAXKK@Z| PROC	; NotifyCallbacks

; 196  : {

  00268		 |$LN9@NotifyCall|
  00268	e1a0c00d	 mov         r12, sp
  0026c	e92d0003	 stmdb       sp!, {r0, r1}
  00270	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00274	e24dd024	 sub         sp, sp, #0x24
  00278		 |$M40966|

; 197  :     list<DVFSCallbackInfo_t*>::iterator iter;

  00278	e28d0000	 add         r0, sp, #0
  0027c	eb000000	 bl          |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|

; 198  :     
; 199  :     for (iter = s_CallbackList.begin(); iter != s_CallbackList.end(); ++iter)

  00280	e28d1004	 add         r1, sp, #4
  00284	e59f00d4	 ldr         r0, [pc, #0xD4]
  00288	eb000000	 bl          |?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  0028c	e58d000c	 str         r0, [sp, #0xC]
  00290	e59d100c	 ldr         r1, [sp, #0xC]
  00294	e28d0000	 add         r0, sp, #0
  00298	e3a02004	 mov         r2, #4
  0029c	eb000000	 bl          memcpy
  002a0	ea000001	 b           |$LN4@NotifyCall|
  002a4		 |$LN3@NotifyCall|
  002a4	e28d0000	 add         r0, sp, #0
  002a8	eb000000	 bl          |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ|
  002ac		 |$LN4@NotifyCall|
  002ac	e28d1008	 add         r1, sp, #8
  002b0	e59f00a8	 ldr         r0, [pc, #0xA8]
  002b4	eb000000	 bl          |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  002b8	e58d0010	 str         r0, [sp, #0x10]
  002bc	e59d1010	 ldr         r1, [sp, #0x10]
  002c0	e28d0000	 add         r0, sp, #0
  002c4	eb000000	 bl          |??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|
  002c8	e5cd0014	 strb        r0, [sp, #0x14]
  002cc	e5dd3014	 ldrb        r3, [sp, #0x14]
  002d0	e3530000	 cmp         r3, #0
  002d4	0a00001e	 beq         |$LN2@NotifyCall|

; 200  :         {
; 201  :         // don't notify the caller who triggered the change
; 202  :         if ((*iter)->idContext == idContext) continue;

  002d8	e28d0000	 add         r0, sp, #0
  002dc	eb000000	 bl          |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|
  002e0	e58d0018	 str         r0, [sp, #0x18]
  002e4	e59d3018	 ldr         r3, [sp, #0x18]
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e5932000	 ldr         r2, [r3]
  002f0	e59d3034	 ldr         r3, [sp, #0x34]
  002f4	e1520003	 cmp         r2, r3
  002f8	1a000000	 bne         |$LN1@NotifyCall|
  002fc	eaffffe8	 b           |$LN3@NotifyCall|
  00300		 |$LN1@NotifyCall|

; 203  : 
; 204  :         // notify callbacks
; 205  :         (*iter)->fnCallback((*iter)->hRefContext, 
; 206  :             CONSTRAINT_MSG_DVFS_NEWOPM,
; 207  :             (void*)newOpm,
; 208  :             sizeof(DWORD)
; 209  :             );

  00300	e28d0000	 add         r0, sp, #0
  00304	eb000000	 bl          |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|
  00308	e58d001c	 str         r0, [sp, #0x1C]
  0030c	e28d0000	 add         r0, sp, #0
  00310	eb000000	 bl          |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|
  00314	e58d0020	 str         r0, [sp, #0x20]
  00318	e3a03004	 mov         r3, #4
  0031c	e59d2030	 ldr         r2, [sp, #0x30]
  00320	e3a01801	 mov         r1, #1, 16
  00324	e3811001	 orr         r1, r1, #1
  00328	e59d001c	 ldr         r0, [sp, #0x1C]
  0032c	e5900000	 ldr         r0, [r0]
  00330	e2800008	 add         r0, r0, #8
  00334	e5900000	 ldr         r0, [r0]
  00338	e59de020	 ldr         lr, [sp, #0x20]
  0033c	e59ee000	 ldr         lr, [lr]
  00340	e28ee004	 add         lr, lr, #4
  00344	e59e4000	 ldr         r4, [lr]
  00348	e1a0e00f	 mov         lr, pc
  0034c	e12fff14	 bx          r4
  00350	eaffffd3	 b           |$LN3@NotifyCall|
  00354		 |$LN2@NotifyCall|

; 210  :         }
; 211  : }

  00354	e28dd024	 add         sp, sp, #0x24
  00358	e89d6010	 ldmia       sp, {r4, sp, lr}
  0035c	e12fff1e	 bx          lr
  00360		 |$LN10@NotifyCall|
  00360		 |$LN11@NotifyCall|
  00360	00000000	 DCD         |s_CallbackList|
  00364		 |$M40967|

			 ENDP  ; |?NotifyCallbacks@@YAXKK@Z|, NotifyCallbacks

	EXPORT	|??_C@_1BE@DAEMMAAB@?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_17MGNEPMPH@?$AA?5?$AA?9?$AAf?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_11LOCGONAA@?$AA?$AA@| [ DATA ]	; `string'
	EXPORT	|?GetIndex@?$IndexList@K@@QAAPAKK@Z|	; IndexList<unsigned long>::GetIndex
	EXPORT	|?UpdateOpm@@YAHK@Z|			; UpdateOpm
	IMPORT	|KernelIoControl|
	IMPORT	|PmxSendDeviceNotification|
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.bss|, NOINIT
|s_OpmInfo| %	0x9c

  00018			 AREA	 |.pdata|, PDATA
|$T40995| DCD	|$LN25@UpdateOpm|
	DCD	0x40016004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@DAEMMAAB@?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "P", 0x0, "M", 0x0, "%", 0x0, "d", 0x0, "%", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_17MGNEPMPH@?$AA?5?$AA?9?$AAf?$AA?$AA@| DCB " ", 0x0, "-", 0x0, "f", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_11LOCGONAA@?$AA?$AA@| DCB 0x0, 0x0		; `string'
; Function compile flags: /Odtp

  00364			 AREA	 |.text|, CODE, ARM

  00364		 |?UpdateOpm@@YAHK@Z| PROC		; UpdateOpm

; 223  : {

  00364		 |$LN25@UpdateOpm|
  00364	e1a0c00d	 mov         r12, sp
  00368	e92d0001	 stmdb       sp!, {r0}
  0036c	e92d5000	 stmdb       sp!, {r12, lr}
  00370	e24ddf4b	 sub         sp, sp, #0x4B, 30
  00374		 |$M40992|

; 224  :     int i;
; 225  :     DWORD opmOld;
; 226  :     DWORD opmNew = (DWORD) kOpmUndefined;

  00374	e3e03000	 mvn         r3, #0
  00378	e58d3010	 str         r3, [sp, #0x10]

; 227  :     BOOL rc = FALSE;

  0037c	e3a03000	 mov         r3, #0
  00380	e58d3014	 str         r3, [sp, #0x14]

; 228  :     DWORD dwNotificationMask = 0;

  00384	e3a03000	 mov         r3, #0
  00388	e58d3020	 str         r3, [sp, #0x20]

; 229  :     
; 230  :     IOCTL_DVFS_OPPNOTIFY_IN info;
; 231  :     IOCTL_OPP_REQUEST_IN oppRequest;
; 232  :     
; 233  :     // first check if there is a constraint being forced
; 234  :     if (s_OpmInfo.idxForce != -1)

  0038c	e59f3538	 ldr         r3, [pc, #0x538]
  00390	e5933094	 ldr         r3, [r3, #0x94]
  00394	e3730001	 cmn         r3, #1
  00398	0a00000c	 beq         |$LN16@UpdateOpm|

; 235  :         {
; 236  :         DWORD *pDataNode;
; 237  :         pDataNode = s_IndexList.GetIndex(s_OpmInfo.idxForce);

  0039c	e59f3528	 ldr         r3, [pc, #0x528]
  003a0	e5931094	 ldr         r1, [r3, #0x94]
  003a4	e59f0534	 ldr         r0, [pc, #0x534]
  003a8	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  003ac	e58d0118	 str         r0, [sp, #0x118]
  003b0	e59d3118	 ldr         r3, [sp, #0x118]
  003b4	e58d30d8	 str         r3, [sp, #0xD8]

; 238  :         if (pDataNode != NULL)

  003b8	e59d30d8	 ldr         r3, [sp, #0xD8]
  003bc	e3530000	 cmp         r3, #0
  003c0	0a000002	 beq         |$LN15@UpdateOpm|

; 239  :             {
; 240  :             opmNew = *pDataNode;

  003c4	e59d30d8	 ldr         r3, [sp, #0xD8]
  003c8	e5933000	 ldr         r3, [r3]
  003cc	e58d3010	 str         r3, [sp, #0x10]
  003d0		 |$LN15@UpdateOpm|
  003d0		 |$LN16@UpdateOpm|

; 241  :             }
; 242  :         }
; 243  : 
; 244  :     // get highest operating mode if not forced
; 245  :     if (opmNew == kOpmUndefined)

  003d0	e59d3010	 ldr         r3, [sp, #0x10]
  003d4	e3730001	 cmn         r3, #1
  003d8	1a000018	 bne         |$LN14@UpdateOpm|

; 246  :         {
; 247  :         for (i = (signed)s_OpmInfo.opmCeiling; i >= (signed)s_OpmInfo.opmFloor; --i)

  003dc	e59f34e8	 ldr         r3, [pc, #0x4E8]
  003e0	e593308c	 ldr         r3, [r3, #0x8C]
  003e4	e58d301c	 str         r3, [sp, #0x1C]
  003e8	ea000002	 b           |$LN13@UpdateOpm|
  003ec		 |$LN12@UpdateOpm|
  003ec	e59d301c	 ldr         r3, [sp, #0x1C]
  003f0	e2433001	 sub         r3, r3, #1
  003f4	e58d301c	 str         r3, [sp, #0x1C]
  003f8		 |$LN13@UpdateOpm|
  003f8	e59d201c	 ldr         r2, [sp, #0x1C]
  003fc	e59f34c8	 ldr         r3, [pc, #0x4C8]
  00400	e5933090	 ldr         r3, [r3, #0x90]
  00404	e1520003	 cmp         r2, r3
  00408	ba00000c	 blt         |$LN11@UpdateOpm|

; 248  :             {
; 249  :             if (s_OpmInfo.opmTable[i] > 0)

  0040c	e59d101c	 ldr         r1, [sp, #0x1C]
  00410	e3a03004	 mov         r3, #4
  00414	e0020391	 mul         r2, r1, r3
  00418	e59f34ac	 ldr         r3, [pc, #0x4AC]
  0041c	e2833064	 add         r3, r3, #0x64
  00420	e0833002	 add         r3, r3, r2
  00424	e5933000	 ldr         r3, [r3]
  00428	e3530000	 cmp         r3, #0
  0042c	9a000002	 bls         |$LN10@UpdateOpm|

; 250  :                 {
; 251  :                 opmNew = (Dvfs_OperatingMode_e)i;

  00430	e59d301c	 ldr         r3, [sp, #0x1C]
  00434	e58d3010	 str         r3, [sp, #0x10]

; 252  :                 break;

  00438	ea000000	 b           |$LN11@UpdateOpm|
  0043c		 |$LN10@UpdateOpm|

; 253  :                 }
; 254  :             }

  0043c	eaffffea	 b           |$LN12@UpdateOpm|
  00440		 |$LN11@UpdateOpm|
  00440		 |$LN14@UpdateOpm|

; 255  :         }
; 256  : 
; 257  :     // Prepare to send notifications
; 258  :     if (opmNew != kOpmUndefined && s_OpmInfo.opmCurrent != opmNew)

  00440	e59d3010	 ldr         r3, [sp, #0x10]
  00444	e3730001	 cmn         r3, #1
  00448	0a000103	 beq         |$LN9@UpdateOpm|
  0044c	e59f3478	 ldr         r3, [pc, #0x478]
  00450	e5932098	 ldr         r2, [r3, #0x98]
  00454	e59d3010	 ldr         r3, [sp, #0x10]
  00458	e1520003	 cmp         r2, r3
  0045c	0a0000fe	 beq         |$LN9@UpdateOpm|

; 259  :         {        
; 260  :         OALMSG(1, (L"OPM%d%s\r\n", opmNew, s_OpmInfo.idxForce == -1 ? L"" : L" -f"));

  00460	e59f3464	 ldr         r3, [pc, #0x464]
  00464	e5933094	 ldr         r3, [r3, #0x94]
  00468	e3730001	 cmn         r3, #1
  0046c	1a000002	 bne         |$LN19@UpdateOpm|
  00470	e59f3464	 ldr         r3, [pc, #0x464]
  00474	e58d311c	 str         r3, [sp, #0x11C]
  00478	ea000001	 b           |$LN20@UpdateOpm|
  0047c		 |$LN19@UpdateOpm|
  0047c	e59f3454	 ldr         r3, [pc, #0x454]
  00480	e58d311c	 str         r3, [sp, #0x11C]
  00484		 |$LN20@UpdateOpm|
  00484	e59d211c	 ldr         r2, [sp, #0x11C]
  00488	e59d1010	 ldr         r1, [sp, #0x10]
  0048c	e59f0440	 ldr         r0, [pc, #0x440]
  00490	eb000000	 bl          NKDbgPrintfW
  00494	e3a03001	 mov         r3, #1
  00498	e58d3120	 str         r3, [sp, #0x120]
  0049c	ea000001	 b           |$LN22@UpdateOpm|
  004a0	e3a03000	 mov         r3, #0
  004a4	e58d3120	 str         r3, [sp, #0x120]
  004a8		 |$LN22@UpdateOpm|

; 261  : 
; 262  :         opmOld = s_OpmInfo.opmCurrent;

  004a8	e59f341c	 ldr         r3, [pc, #0x41C]
  004ac	e5933098	 ldr         r3, [r3, #0x98]
  004b0	e58d3018	 str         r3, [sp, #0x18]

; 263  : 
; 264  :         // initialize notification structure
; 265  :         info.dwCount = 0;

  004b4	e3a03000	 mov         r3, #0
  004b8	e58d302c	 str         r3, [sp, #0x2C]

; 266  :         oppRequest.dwCount = 0;

  004bc	e3a03000	 mov         r3, #0
  004c0	e58d3094	 str         r3, [sp, #0x94]

; 267  :         info.size = sizeof(IOCTL_DVFS_OPPNOTIFY_IN);

  004c4	e3a0306c	 mov         r3, #0x6C
  004c8	e58d3024	 str         r3, [sp, #0x24]

; 268  :         oppRequest.size = sizeof(IOCTL_OPP_REQUEST_IN);

  004cc	e3a03048	 mov         r3, #0x48
  004d0	e58d3090	 str         r3, [sp, #0x90]

; 269  :         
; 270  :         // initialize structures      
; 271  :         if (s_OpmInfo.rgVddMPU1[opmOld] != s_OpmInfo.rgVddMPU1[opmNew])

  004d4	e59d1018	 ldr         r1, [sp, #0x18]
  004d8	e3a03004	 mov         r3, #4
  004dc	e0020391	 mul         r2, r1, r3
  004e0	e59f33e4	 ldr         r3, [pc, #0x3E4]
  004e4	e2833014	 add         r3, r3, #0x14
  004e8	e0830002	 add         r0, r3, r2
  004ec	e59d1010	 ldr         r1, [sp, #0x10]
  004f0	e3a03004	 mov         r3, #4
  004f4	e0020391	 mul         r2, r1, r3
  004f8	e59f33cc	 ldr         r3, [pc, #0x3CC]
  004fc	e2833014	 add         r3, r3, #0x14
  00500	e0833002	 add         r3, r3, r2
  00504	e5902000	 ldr         r2, [r0]
  00508	e5933000	 ldr         r3, [r3]
  0050c	e1520003	 cmp         r2, r3
  00510	0a00003f	 beq         |$LN8@UpdateOpm|

; 272  :             {
; 273  :             //OALMSG(1, (L"MPU OPP%d -> OPP%d\r\n", s_OpmInfo.rgVddMPU1[opmOld], s_OpmInfo.rgVddMPU1[opmNew]));
; 274  :             dwNotificationMask |= DVFS_MPU1_PRE_NOTICE | 
; 275  :                                   DVFS_MPU1_POST_NOTICE | 
; 276  :                                   DVFS_MPU1_CANCEL_NOTICE;

  00514	e59d3020	 ldr         r3, [sp, #0x20]
  00518	e3833070	 orr         r3, r3, #0x70
  0051c	e58d3020	 str         r3, [sp, #0x20]

; 277  : 
; 278  :             // update notification structure
; 279  :             info.rgOppInfo[info.dwCount].newOpp = s_OpmInfo.rgVddMPU1[opmNew];

  00520	e59d1010	 ldr         r1, [sp, #0x10]
  00524	e3a03004	 mov         r3, #4
  00528	e0020391	 mul         r2, r1, r3
  0052c	e59f3398	 ldr         r3, [pc, #0x398]
  00530	e2833014	 add         r3, r3, #0x14
  00534	e0830002	 add         r0, r3, r2
  00538	e59d102c	 ldr         r1, [sp, #0x2C]
  0053c	e3a0300c	 mov         r3, #0xC
  00540	e0020391	 mul         r2, r1, r3
  00544	e28d3030	 add         r3, sp, #0x30
  00548	e0833002	 add         r3, r3, r2
  0054c	e2832004	 add         r2, r3, #4
  00550	e5903000	 ldr         r3, [r0]
  00554	e5823000	 str         r3, [r2]

; 280  :             info.rgOppInfo[info.dwCount].oldOpp = s_OpmInfo.rgVddMPU1[opmOld];

  00558	e59d1018	 ldr         r1, [sp, #0x18]
  0055c	e3a03004	 mov         r3, #4
  00560	e0020391	 mul         r2, r1, r3
  00564	e59f3360	 ldr         r3, [pc, #0x360]
  00568	e2833014	 add         r3, r3, #0x14
  0056c	e0830002	 add         r0, r3, r2
  00570	e59d102c	 ldr         r1, [sp, #0x2C]
  00574	e3a0300c	 mov         r3, #0xC
  00578	e0020391	 mul         r2, r1, r3
  0057c	e28d3030	 add         r3, sp, #0x30
  00580	e0833002	 add         r3, r3, r2
  00584	e2832008	 add         r2, r3, #8
  00588	e5903000	 ldr         r3, [r0]
  0058c	e5823000	 str         r3, [r2]

; 281  :             info.rgOppInfo[info.dwCount].domain = DVFS_MPU1_OPP;

  00590	e59d102c	 ldr         r1, [sp, #0x2C]
  00594	e3a0300c	 mov         r3, #0xC
  00598	e0020391	 mul         r2, r1, r3
  0059c	e28d3030	 add         r3, sp, #0x30
  005a0	e0832002	 add         r2, r3, r2
  005a4	e3a03010	 mov         r3, #0x10
  005a8	e5823000	 str         r3, [r2]

; 282  :             info.dwCount++;

  005ac	e59d302c	 ldr         r3, [sp, #0x2C]
  005b0	e2833001	 add         r3, r3, #1
  005b4	e58d302c	 str         r3, [sp, #0x2C]

; 283  : 
; 284  :             // update kernel structure
; 285  :             oppRequest.rgOpps[oppRequest.dwCount] = s_OpmInfo.rgVddMPU1[opmNew];

  005b8	e59d1010	 ldr         r1, [sp, #0x10]
  005bc	e3a03004	 mov         r3, #4
  005c0	e0020391	 mul         r2, r1, r3
  005c4	e59f3300	 ldr         r3, [pc, #0x300]
  005c8	e2833014	 add         r3, r3, #0x14
  005cc	e0830002	 add         r0, r3, r2
  005d0	e59d1094	 ldr         r1, [sp, #0x94]
  005d4	e3a03004	 mov         r3, #4
  005d8	e0020391	 mul         r2, r1, r3
  005dc	e28d30b8	 add         r3, sp, #0xB8
  005e0	e0832002	 add         r2, r3, r2
  005e4	e5903000	 ldr         r3, [r0]
  005e8	e5823000	 str         r3, [r2]

; 286  :             oppRequest.rgDomains[oppRequest.dwCount] = DVFS_MPU1_OPP;

  005ec	e59d1094	 ldr         r1, [sp, #0x94]
  005f0	e3a03004	 mov         r3, #4
  005f4	e0020391	 mul         r2, r1, r3
  005f8	e28d3098	 add         r3, sp, #0x98
  005fc	e0832002	 add         r2, r3, r2
  00600	e3a03010	 mov         r3, #0x10
  00604	e5823000	 str         r3, [r2]

; 287  :             oppRequest.dwCount++;

  00608	e59d3094	 ldr         r3, [sp, #0x94]
  0060c	e2833001	 add         r3, r3, #1
  00610	e58d3094	 str         r3, [sp, #0x94]
  00614		 |$LN8@UpdateOpm|

; 288  :             }
; 289  : 
; 290  :         if (s_OpmInfo.rgVddCORE1[opmOld] != s_OpmInfo.rgVddCORE1[opmNew])

  00614	e59d1018	 ldr         r1, [sp, #0x18]
  00618	e3a03004	 mov         r3, #4
  0061c	e0020391	 mul         r2, r1, r3
  00620	e59f32a4	 ldr         r3, [pc, #0x2A4]
  00624	e283303c	 add         r3, r3, #0x3C
  00628	e0830002	 add         r0, r3, r2
  0062c	e59d1010	 ldr         r1, [sp, #0x10]
  00630	e3a03004	 mov         r3, #4
  00634	e0020391	 mul         r2, r1, r3
  00638	e59f328c	 ldr         r3, [pc, #0x28C]
  0063c	e283303c	 add         r3, r3, #0x3C
  00640	e0833002	 add         r3, r3, r2
  00644	e5902000	 ldr         r2, [r0]
  00648	e5933000	 ldr         r3, [r3]
  0064c	e1520003	 cmp         r2, r3
  00650	0a00003f	 beq         |$LN7@UpdateOpm|

; 291  :             {
; 292  :             //OALMSG(1, (L"CORE OPP%d -> OPP%d\r\n", s_OpmInfo.rgVddCORE1[opmOld], s_OpmInfo.rgVddCORE1[opmNew]));
; 293  :             dwNotificationMask |= DVFS_CORE1_PRE_NOTICE | 
; 294  :                                   DVFS_CORE1_POST_NOTICE |
; 295  :                                   DVFS_CORE1_CANCEL_NOTICE;

  00654	e59d3020	 ldr         r3, [sp, #0x20]
  00658	e3833007	 orr         r3, r3, #7
  0065c	e58d3020	 str         r3, [sp, #0x20]

; 296  : 
; 297  :             // update notification structure
; 298  :             info.rgOppInfo[info.dwCount].newOpp = s_OpmInfo.rgVddCORE1[opmNew];

  00660	e59d1010	 ldr         r1, [sp, #0x10]
  00664	e3a03004	 mov         r3, #4
  00668	e0020391	 mul         r2, r1, r3
  0066c	e59f3258	 ldr         r3, [pc, #0x258]
  00670	e283303c	 add         r3, r3, #0x3C
  00674	e0830002	 add         r0, r3, r2
  00678	e59d102c	 ldr         r1, [sp, #0x2C]
  0067c	e3a0300c	 mov         r3, #0xC
  00680	e0020391	 mul         r2, r1, r3
  00684	e28d3030	 add         r3, sp, #0x30
  00688	e0833002	 add         r3, r3, r2
  0068c	e2832004	 add         r2, r3, #4
  00690	e5903000	 ldr         r3, [r0]
  00694	e5823000	 str         r3, [r2]

; 299  :             info.rgOppInfo[info.dwCount].oldOpp = s_OpmInfo.rgVddCORE1[opmOld];

  00698	e59d1018	 ldr         r1, [sp, #0x18]
  0069c	e3a03004	 mov         r3, #4
  006a0	e0020391	 mul         r2, r1, r3
  006a4	e59f3220	 ldr         r3, [pc, #0x220]
  006a8	e283303c	 add         r3, r3, #0x3C
  006ac	e0830002	 add         r0, r3, r2
  006b0	e59d102c	 ldr         r1, [sp, #0x2C]
  006b4	e3a0300c	 mov         r3, #0xC
  006b8	e0020391	 mul         r2, r1, r3
  006bc	e28d3030	 add         r3, sp, #0x30
  006c0	e0833002	 add         r3, r3, r2
  006c4	e2832008	 add         r2, r3, #8
  006c8	e5903000	 ldr         r3, [r0]
  006cc	e5823000	 str         r3, [r2]

; 300  :             info.rgOppInfo[info.dwCount].domain = DVFS_CORE1_OPP;

  006d0	e59d102c	 ldr         r1, [sp, #0x2C]
  006d4	e3a0300c	 mov         r3, #0xC
  006d8	e0020391	 mul         r2, r1, r3
  006dc	e28d3030	 add         r3, sp, #0x30
  006e0	e0832002	 add         r2, r3, r2
  006e4	e3a03000	 mov         r3, #0
  006e8	e5823000	 str         r3, [r2]

; 301  :             info.dwCount++;

  006ec	e59d302c	 ldr         r3, [sp, #0x2C]
  006f0	e2833001	 add         r3, r3, #1
  006f4	e58d302c	 str         r3, [sp, #0x2C]

; 302  : 
; 303  :             // update kernel structure
; 304  :             oppRequest.rgOpps[oppRequest.dwCount] = s_OpmInfo.rgVddCORE1[opmNew];

  006f8	e59d1010	 ldr         r1, [sp, #0x10]
  006fc	e3a03004	 mov         r3, #4
  00700	e0020391	 mul         r2, r1, r3
  00704	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00708	e283303c	 add         r3, r3, #0x3C
  0070c	e0830002	 add         r0, r3, r2
  00710	e59d1094	 ldr         r1, [sp, #0x94]
  00714	e3a03004	 mov         r3, #4
  00718	e0020391	 mul         r2, r1, r3
  0071c	e28d30b8	 add         r3, sp, #0xB8
  00720	e0832002	 add         r2, r3, r2
  00724	e5903000	 ldr         r3, [r0]
  00728	e5823000	 str         r3, [r2]

; 305  :             oppRequest.rgDomains[oppRequest.dwCount] = DVFS_CORE1_OPP;

  0072c	e59d1094	 ldr         r1, [sp, #0x94]
  00730	e3a03004	 mov         r3, #4
  00734	e0020391	 mul         r2, r1, r3
  00738	e28d3098	 add         r3, sp, #0x98
  0073c	e0832002	 add         r2, r3, r2
  00740	e3a03000	 mov         r3, #0
  00744	e5823000	 str         r3, [r2]

; 306  :             oppRequest.dwCount++;

  00748	e59d3094	 ldr         r3, [sp, #0x94]
  0074c	e2833001	 add         r3, r3, #1
  00750	e58d3094	 str         r3, [sp, #0x94]
  00754		 |$LN7@UpdateOpm|

; 307  :             }
; 308  : 
; 309  :         // send pre-dvfs notification
; 310  :         info.ffInfo = dwNotificationMask & DVFS_PRENOTIFY_MASK;

  00754	e59d3020	 ldr         r3, [sp, #0x20]
  00758	e2033011	 and         r3, r3, #0x11
  0075c	e58d3028	 str         r3, [sp, #0x28]

; 311  :         rc = PmxSendDeviceNotification(DEVICEMEDIATOR_DVFS_LIST,
; 312  :                 info.ffInfo, IOCTL_DVFS_OPPNOTIFY, &info, sizeof(info),
; 313  :                 NULL, 0, NULL);

  00760	e3a03000	 mov         r3, #0
  00764	e58d300c	 str         r3, [sp, #0xC]
  00768	e3a03000	 mov         r3, #0
  0076c	e58d3008	 str         r3, [sp, #8]
  00770	e3a03000	 mov         r3, #0
  00774	e58d3004	 str         r3, [sp, #4]
  00778	e3a0306c	 mov         r3, #0x6C
  0077c	e58d3000	 str         r3, [sp]
  00780	e28d3024	 add         r3, sp, #0x24
  00784	e3a02112	 mov         r2, #0x12, 2
  00788	e3822b82	 orr         r2, r2, #0x82, 22
  0078c	e59d1028	 ldr         r1, [sp, #0x28]
  00790	e3a00002	 mov         r0, #2
  00794	eb000000	 bl          PmxSendDeviceNotification
  00798	e58d0124	 str         r0, [sp, #0x124]
  0079c	e59d3124	 ldr         r3, [sp, #0x124]
  007a0	e58d3014	 str         r3, [sp, #0x14]

; 314  :         if (rc == FALSE) goto cleanUp;

  007a4	e59d3014	 ldr         r3, [sp, #0x14]
  007a8	e3530000	 cmp         r3, #0
  007ac	1a000001	 bne         |$LN6@UpdateOpm|
  007b0	ea00002b	 b           |$LN5@UpdateOpm|
  007b4	ea00002a	 b           |$cleanUp$40025|
  007b8		 |$LN6@UpdateOpm|

; 315  :                   
; 316  :         // change operating points
; 317  :         rc = KernelIoControl(IOCTL_OPP_REQUEST, &oppRequest, 
; 318  :                 sizeof(IOCTL_OPP_REQUEST_IN), 0, 0, 0
; 319  :                 );

  007b8	e3a03000	 mov         r3, #0
  007bc	e58d3004	 str         r3, [sp, #4]
  007c0	e3a03000	 mov         r3, #0
  007c4	e58d3000	 str         r3, [sp]
  007c8	e3a03000	 mov         r3, #0
  007cc	e3a02048	 mov         r2, #0x48
  007d0	e28d1090	 add         r1, sp, #0x90
  007d4	e59f00f4	 ldr         r0, [pc, #0xF4]
  007d8	eb000000	 bl          KernelIoControl
  007dc	e58d0128	 str         r0, [sp, #0x128]
  007e0	e59d3128	 ldr         r3, [sp, #0x128]
  007e4	e58d3014	 str         r3, [sp, #0x14]

; 320  :         if (rc == FALSE) goto cleanUp;

  007e8	e59d3014	 ldr         r3, [sp, #0x14]
  007ec	e3530000	 cmp         r3, #0
  007f0	1a000001	 bne         |$LN4@UpdateOpm|
  007f4	ea00001a	 b           |$LN3@UpdateOpm|
  007f8	ea000019	 b           |$cleanUp$40025|
  007fc		 |$LN4@UpdateOpm|

; 321  : 
; 322  :         // send post-dvfs notification
; 323  :         info.ffInfo = dwNotificationMask & DVFS_POSTNOTIFY_MASK;

  007fc	e59d3020	 ldr         r3, [sp, #0x20]
  00800	e2033022	 and         r3, r3, #0x22
  00804	e58d3028	 str         r3, [sp, #0x28]

; 324  :         PmxSendDeviceNotification(DEVICEMEDIATOR_DVFS_LIST,
; 325  :                 info.ffInfo, IOCTL_DVFS_OPPNOTIFY, &info, sizeof(info),
; 326  :                 NULL, 0, NULL);

  00808	e3a03000	 mov         r3, #0
  0080c	e58d300c	 str         r3, [sp, #0xC]
  00810	e3a03000	 mov         r3, #0
  00814	e58d3008	 str         r3, [sp, #8]
  00818	e3a03000	 mov         r3, #0
  0081c	e58d3004	 str         r3, [sp, #4]
  00820	e3a0306c	 mov         r3, #0x6C
  00824	e58d3000	 str         r3, [sp]
  00828	e28d3024	 add         r3, sp, #0x24
  0082c	e3a02112	 mov         r2, #0x12, 2
  00830	e3822b82	 orr         r2, r2, #0x82, 22
  00834	e59d1028	 ldr         r1, [sp, #0x28]
  00838	e3a00002	 mov         r0, #2
  0083c	eb000000	 bl          PmxSendDeviceNotification

; 327  : 
; 328  :         s_OpmInfo.opmCurrent = opmNew;

  00840	e59d2010	 ldr         r2, [sp, #0x10]
  00844	e59f3080	 ldr         r3, [pc, #0x80]
  00848	e5832098	 str         r2, [r3, #0x98]

; 329  : 
; 330  :         NotifyCallbacks(opmNew, idContext);

  0084c	e59d1134	 ldr         r1, [sp, #0x134]
  00850	e59d0010	 ldr         r0, [sp, #0x10]
  00854	eb000000	 bl          |?NotifyCallbacks@@YAXKK@Z|

; 331  :         }
; 332  :     else

  00858	ea000001	 b           |$LN2@UpdateOpm|
  0085c		 |$LN9@UpdateOpm|

; 333  :         {
; 334  :         rc = TRUE;

  0085c	e3a03001	 mov         r3, #1
  00860	e58d3014	 str         r3, [sp, #0x14]
  00864		 |$LN2@UpdateOpm|
  00864		 |$LN3@UpdateOpm|
  00864		 |$LN5@UpdateOpm|
  00864		 |$cleanUp$40025|

; 335  :         }
; 336  : 
; 337  : cleanUp:
; 338  :     if (rc == FALSE)

  00864	e59d3014	 ldr         r3, [sp, #0x14]
  00868	e3530000	 cmp         r3, #0
  0086c	1a000010	 bne         |$LN1@UpdateOpm|

; 339  :         {
; 340  :         info.ffInfo = dwNotificationMask & DVFS_CANCELNOTIFY_MASK;

  00870	e59d3020	 ldr         r3, [sp, #0x20]
  00874	e2033044	 and         r3, r3, #0x44
  00878	e58d3028	 str         r3, [sp, #0x28]

; 341  :         PmxSendDeviceNotification(DEVICEMEDIATOR_DVFS_LIST,
; 342  :                 info.ffInfo, IOCTL_DVFS_OPPNOTIFY, &info, sizeof(info),
; 343  :                 NULL, 0, NULL);

  0087c	e3a03000	 mov         r3, #0
  00880	e58d300c	 str         r3, [sp, #0xC]
  00884	e3a03000	 mov         r3, #0
  00888	e58d3008	 str         r3, [sp, #8]
  0088c	e3a03000	 mov         r3, #0
  00890	e58d3004	 str         r3, [sp, #4]
  00894	e3a0306c	 mov         r3, #0x6C
  00898	e58d3000	 str         r3, [sp]
  0089c	e28d3024	 add         r3, sp, #0x24
  008a0	e3a02112	 mov         r2, #0x12, 2
  008a4	e3822b82	 orr         r2, r2, #0x82, 22
  008a8	e59d1028	 ldr         r1, [sp, #0x28]
  008ac	e3a00002	 mov         r0, #2
  008b0	eb000000	 bl          PmxSendDeviceNotification
  008b4		 |$LN1@UpdateOpm|

; 344  :         }
; 345  : 
; 346  :     return rc;

  008b4	e59d3014	 ldr         r3, [sp, #0x14]
  008b8	e58d3114	 str         r3, [sp, #0x114]

; 347  : }

  008bc	e59d0114	 ldr         r0, [sp, #0x114]
  008c0	e28ddf4b	 add         sp, sp, #0x4B, 30
  008c4	e89d6000	 ldmia       sp, {sp, lr}
  008c8	e12fff1e	 bx          lr
  008cc		 |$LN26@UpdateOpm|
  008cc		 |$LN27@UpdateOpm|
  008cc	00000000	 DCD         |s_OpmInfo|
  008d0		 |$LN28@UpdateOpm|
  008d0	01f50fd4	 DCD         0x1f50fd4
  008d4		 |$LN29@UpdateOpm|
  008d4	00000000	 DCD         |??_C@_1BE@DAEMMAAB@?$AAO?$AAP?$AAM?$AA?$CF?$AAd?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  008d8		 |$LN30@UpdateOpm|
  008d8	00000000	 DCD         |??_C@_17MGNEPMPH@?$AA?5?$AA?9?$AAf?$AA?$AA@|
  008dc		 |$LN31@UpdateOpm|
  008dc	00000000	 DCD         |??_C@_11LOCGONAA@?$AA?$AA@|
  008e0		 |$LN32@UpdateOpm|
  008e0	00000000	 DCD         |s_IndexList|
  008e4		 |$M40993|

			 ENDP  ; |?UpdateOpm@@YAHK@Z|, UpdateOpm

	EXPORT	|??_C@_1HO@MCEJPKI@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@BFINDJLA@?$AAO?$AAp?$AAm?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BC@JLOAIBPJ@?$AAC?$AAO?$AAR?$AAE?$AA1?$AAM?$AAa?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@CKJNKENB@?$AAM?$AAP?$AAU?$AA1?$AAM?$AAa?$AAp?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@LAODCCDA@?$AAO?$AAp?$AAm?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@IDCKAMHD@?$AAO?$AAp?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@MFOCLLAG@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|?DVFS_InitConstraint@@YAPAXPBG@Z|	; DVFS_InitConstraint
	IMPORT	|RegCloseKey|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|RegQueryValueExW|
	IMPORT	|RegOpenKeyExW|
	IMPORT	|wcscat|
	IMPORT	|wcscpy|
	IMPORT	|memset|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__rt_udiv|
	IMPORT	|__security_check_cookie|

  00020			 AREA	 |.pdata|, PDATA
|$T41035| DCD	|$LN36@DVFS_InitC|
	DCD	0xc0012405

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@MCEJPKI@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "m", 0x0, "C"
	DCB	0x0, "u", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "m", 0x0, "C", 0x0, "e", 0x0, "i", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "m", 0x0, "F"
	DCB	0x0, "l", 0x0, "o", 0x0, "o", 0x0, "r", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@BFINDJLA@?$AAO?$AAp?$AAm?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "F", 0x0, "l", 0x0, "o", 0x0, "o"
	DCB	0x0, "r", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BC@JLOAIBPJ@?$AAC?$AAO?$AAR?$AAE?$AA1?$AAM?$AAa?$AAp?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "R", 0x0, "E", 0x0, "1", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@CKJNKENB@?$AAM?$AAP?$AAU?$AA1?$AAM?$AAa?$AAp?$AA?$AA@| DCB "M", 0x0
	DCB	"P", 0x0, "U", 0x0, "1", 0x0, "M", 0x0, "a", 0x0, "p", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@LAODCCDA@?$AAO?$AAp?$AAm?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@| DCB "O"
	DCB	0x0, "p", 0x0, "m", 0x0, "C", 0x0, "e", 0x0, "i", 0x0, "l"
	DCB	0x0, "i", 0x0, "n", 0x0, "g", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@IDCKAMHD@?$AAO?$AAp?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$AA@| DCB "O", 0x0
	DCB	"p", 0x0, "m", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@MFOCLLAG@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n", 0x0, "s", 0x0, "u"
	DCB	0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "e"
	DCB	0x0, "d", 0x0, " ", 0x0, "C", 0x0, "P", 0x0, "U", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "m", 0x0, "i", 0x0, "l", 0x0, "y"
	DCB	0x0, "=", 0x0, "(", 0x0, "%", 0x0, "x", 0x0, ")", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "5", 0x0, "1", 0x0, "7", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "5", 0x0, "x", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@| DCB "\\", 0x0, "3"
	DCB	0x0, "7", 0x0, "x", 0x0, "x", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T41031| DCD	0xffffff80
; Function compile flags: /Odtp

  008e4			 AREA	 |.text|, CODE, ARM

  008e4	00000000	 DCD         |__GSHandlerCheck|
  008e8	00000000	 DCD         |$T41031|

  008ec		 |?DVFS_InitConstraint@@YAPAXPBG@Z| PROC ; DVFS_InitConstraint

; 359  : {

  008ec		 |$LN36@DVFS_InitC|
  008ec	e1a0c00d	 mov         r12, sp
  008f0	e92d0001	 stmdb       sp!, {r0}
  008f4	e92d5030	 stmdb       sp!, {r4, r5, r12, lr}
  008f8	e59fc478	 ldr         r12, [pc, #0x478]
  008fc	e08dd00c	 add         sp, sp, r12
  00900		 |$M41032|
  00900	e59f346c	 ldr         r3, [pc, #0x46C]
  00904	e5933000	 ldr         r3, [r3]
  00908	e58d3430	 str         r3, [sp, #0x430]

; 360  :     LONG code;
; 361  :     DWORD opm;
; 362  :     DWORD size;
; 363  :     HANDLE rc = NULL;

  0090c	e3a03000	 mov         r3, #0
  00910	e58d3008	 str         r3, [sp, #8]

; 364  :     HKEY hKey = NULL;

  00914	e3a03000	 mov         r3, #0
  00918	e58d3010	 str         r3, [sp, #0x10]

; 365  :     _TCHAR szBuffer[MAX_PATH];
; 366  :     _TCHAR szRegKey[MAX_PATH];
; 367  :     DWORD cpuFamily = CPU_FAMILY_OMAP35XX;

  0091c	e3a03000	 mov         r3, #0
  00920	e58d300c	 str         r3, [sp, #0xC]

; 368  :     
; 369  :     // Initialize data structure
; 370  :     memset(&s_OpmInfo, 0, sizeof(DVFSConstraintInfo_t));

  00924	e3a0209c	 mov         r2, #0x9C
  00928	e3a01000	 mov         r1, #0
  0092c	e59f0410	 ldr         r0, [pc, #0x410]
  00930	eb000000	 bl          memset

; 371  :     s_OpmInfo.opmCeiling = kOpm9;

  00934	e59f2408	 ldr         r2, [pc, #0x408]
  00938	e3a03009	 mov         r3, #9
  0093c	e582308c	 str         r3, [r2, #0x8C]

; 372  :     s_OpmInfo.opmFloor = kOpm0;    

  00940	e59f23fc	 ldr         r2, [pc, #0x3FC]
  00944	e3a03000	 mov         r3, #0
  00948	e5823090	 str         r3, [r2, #0x90]

; 373  :     s_OpmInfo.idxForce = (DWORD) -1;

  0094c	e59f23f0	 ldr         r2, [pc, #0x3F0]
  00950	e3e03000	 mvn         r3, #0
  00954	e5823094	 str         r3, [r2, #0x94]

; 374  :     s_OpmInfo.opmCurrent = (DWORD) kOpmUndefined;

  00958	e59f23e4	 ldr         r2, [pc, #0x3E4]
  0095c	e3e03000	 mvn         r3, #0
  00960	e5823098	 str         r3, [r2, #0x98]

; 375  : 
; 376  :     KernelIoControl(
; 377  :         IOCTL_HAL_GET_CPUFAMILY,
; 378  :         &cpuFamily,
; 379  :         sizeof(DWORD),
; 380  :         &cpuFamily,
; 381  :         sizeof(DWORD),
; 382  :         NULL
; 383  :         );

  00964	e3a03000	 mov         r3, #0
  00968	e58d3004	 str         r3, [sp, #4]
  0096c	e3a03004	 mov         r3, #4
  00970	e58d3000	 str         r3, [sp]
  00974	e28d300c	 add         r3, sp, #0xC
  00978	e3a02004	 mov         r2, #4
  0097c	e28d100c	 add         r1, sp, #0xC
  00980	e59f03e8	 ldr         r0, [pc, #0x3E8]
  00984	eb000000	 bl          KernelIoControl

; 384  : 
; 385  :     _tcscpy(szRegKey, szContext);

  00988	e59d14ac	 ldr         r1, [sp, #0x4AC]
  0098c	e28d0f8a	 add         r0, sp, #0x8A, 30
  00990	eb000000	 bl          wcscpy

; 386  : 
; 387  :     if( cpuFamily == CPU_FAMILY_DM37XX)

  00994	e59d300c	 ldr         r3, [sp, #0xC]
  00998	e3530001	 cmp         r3, #1
  0099c	1a000003	 bne         |$LN23@DVFS_InitC|

; 388  :     {
; 389  :         _tcscat(szRegKey, _T("\\37xx"));

  009a0	e59f13c4	 ldr         r1, [pc, #0x3C4]
  009a4	e28d0f8a	 add         r0, sp, #0x8A, 30
  009a8	eb000000	 bl          wcscat
  009ac	ea000017	 b           |$LN22@DVFS_InitC|
  009b0		 |$LN23@DVFS_InitC|

; 390  :     }
; 391  :     else if( cpuFamily == CPU_FAMILY_OMAP35XX)

  009b0	e59d300c	 ldr         r3, [sp, #0xC]
  009b4	e3530000	 cmp         r3, #0
  009b8	1a000003	 bne         |$LN21@DVFS_InitC|

; 392  :     {
; 393  :         _tcscat(szRegKey, _T("\\35xx"));

  009bc	e59f13a4	 ldr         r1, [pc, #0x3A4]
  009c0	e28d0f8a	 add         r0, sp, #0x8A, 30
  009c4	eb000000	 bl          wcscat
  009c8	ea000010	 b           |$LN20@DVFS_InitC|
  009cc		 |$LN21@DVFS_InitC|

; 394  :     }
; 395  :     else if( cpuFamily == CPU_FAMILY_AM35XX)

  009cc	e59d300c	 ldr         r3, [sp, #0xC]
  009d0	e3530002	 cmp         r3, #2
  009d4	1a000003	 bne         |$LN19@DVFS_InitC|

; 396  :     {
; 397  :         _tcscat(szRegKey, _T("\\3517"));

  009d8	e59f1384	 ldr         r1, [pc, #0x384]
  009dc	e28d0f8a	 add         r0, sp, #0x8A, 30
  009e0	eb000000	 bl          wcscat

; 398  :     }
; 399  :     else

  009e4	ea000009	 b           |$LN18@DVFS_InitC|
  009e8		 |$LN19@DVFS_InitC|

; 400  :     {
; 401  :         RETAILMSG(ZONE_ERROR,(L"DVFS_InitConstraint: Unsupported CPU family=(%x)", cpuFamily));

  009e8	e59d100c	 ldr         r1, [sp, #0xC]
  009ec	e59f036c	 ldr         r0, [pc, #0x36C]
  009f0	eb000000	 bl          NKDbgPrintfW
  009f4	e3a03001	 mov         r3, #1
  009f8	e58d346c	 str         r3, [sp, #0x46C]
  009fc	ea000001	 b           |$LN27@DVFS_InitC|
  00a00	e3a03000	 mov         r3, #0
  00a04	e58d346c	 str         r3, [sp, #0x46C]
  00a08		 |$LN27@DVFS_InitC|

; 402  :         goto cleanUp;

  00a08	ea0000be	 b           |$LN17@DVFS_InitC|
  00a0c	ea0000bd	 b           |$cleanUp$40060|
  00a10		 |$LN18@DVFS_InitC|
  00a10		 |$LN20@DVFS_InitC|
  00a10		 |$LN22@DVFS_InitC|

; 403  :     }
; 404  : 	 
; 405  :     // read registry to get ceiling value    
; 406  :     code = ::RegOpenKeyEx(HKEY_LOCAL_MACHINE, szRegKey, 0, 0, &hKey);

  00a10	e28d3010	 add         r3, sp, #0x10
  00a14	e58d3000	 str         r3, [sp]
  00a18	e3a03000	 mov         r3, #0
  00a1c	e3a02000	 mov         r2, #0
  00a20	e28d1f8a	 add         r1, sp, #0x8A, 30
  00a24	e3a0010a	 mov         r0, #0xA, 2
  00a28	eb000000	 bl          RegOpenKeyExW
  00a2c	e58d0470	 str         r0, [sp, #0x470]
  00a30	e59d3470	 ldr         r3, [sp, #0x470]
  00a34	e58d3014	 str         r3, [sp, #0x14]

; 407  :     if (code != ERROR_SUCCESS) goto cleanUp;

  00a38	e59d3014	 ldr         r3, [sp, #0x14]
  00a3c	e3530000	 cmp         r3, #0
  00a40	0a000001	 beq         |$LN16@DVFS_InitC|
  00a44	ea0000af	 b           |$LN15@DVFS_InitC|
  00a48	ea0000ae	 b           |$cleanUp$40060|
  00a4c		 |$LN16@DVFS_InitC|

; 408  : 
; 409  :     // get default opm
; 410  :     size = sizeof(Dvfs_OperatingMode_e);

  00a4c	e3a03004	 mov         r3, #4
  00a50	e58d3018	 str         r3, [sp, #0x18]

; 411  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_DEFAULTOPM, 0, 0, 
; 412  :             (BYTE*)&opm, &size
; 413  :             );

  00a54	e28d3018	 add         r3, sp, #0x18
  00a58	e58d3004	 str         r3, [sp, #4]
  00a5c	e28d3f89	 add         r3, sp, #0x89, 30
  00a60	e58d3000	 str         r3, [sp]
  00a64	e3a03000	 mov         r3, #0
  00a68	e3a02000	 mov         r2, #0
  00a6c	e59f12e8	 ldr         r1, [pc, #0x2E8]
  00a70	e59d0010	 ldr         r0, [sp, #0x10]
  00a74	eb000000	 bl          RegQueryValueExW
  00a78	e58d0474	 str         r0, [sp, #0x474]
  00a7c	e59d3474	 ldr         r3, [sp, #0x474]
  00a80	e58d3014	 str         r3, [sp, #0x14]

; 414  :     if (code != ERROR_SUCCESS) goto cleanUp;

  00a84	e59d3014	 ldr         r3, [sp, #0x14]
  00a88	e3530000	 cmp         r3, #0
  00a8c	0a000001	 beq         |$LN14@DVFS_InitC|
  00a90	ea00009c	 b           |$LN13@DVFS_InitC|
  00a94	ea00009b	 b           |$cleanUp$40060|
  00a98		 |$LN14@DVFS_InitC|

; 415  :     s_OpmInfo.opmCurrent= opm;

  00a98	e59d2224	 ldr         r2, [sp, #0x224]
  00a9c	e59f32a0	 ldr         r3, [pc, #0x2A0]
  00aa0	e5832098	 str         r2, [r3, #0x98]

; 416  :     
; 417  :     // get ceiling value
; 418  :     size = sizeof(Dvfs_OperatingMode_e);

  00aa4	e3a03004	 mov         r3, #4
  00aa8	e58d3018	 str         r3, [sp, #0x18]

; 419  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_CEILING, 0, 0, 
; 420  :             (BYTE*)&opm, &size
; 421  :             );

  00aac	e28d3018	 add         r3, sp, #0x18
  00ab0	e58d3004	 str         r3, [sp, #4]
  00ab4	e28d3f89	 add         r3, sp, #0x89, 30
  00ab8	e58d3000	 str         r3, [sp]
  00abc	e3a03000	 mov         r3, #0
  00ac0	e3a02000	 mov         r2, #0
  00ac4	e59f128c	 ldr         r1, [pc, #0x28C]
  00ac8	e59d0010	 ldr         r0, [sp, #0x10]
  00acc	eb000000	 bl          RegQueryValueExW
  00ad0	e58d0478	 str         r0, [sp, #0x478]
  00ad4	e59d3478	 ldr         r3, [sp, #0x478]
  00ad8	e58d3014	 str         r3, [sp, #0x14]

; 422  :     if (code != ERROR_SUCCESS) goto cleanUp;

  00adc	e59d3014	 ldr         r3, [sp, #0x14]
  00ae0	e3530000	 cmp         r3, #0
  00ae4	0a000001	 beq         |$LN12@DVFS_InitC|
  00ae8	ea000086	 b           |$LN11@DVFS_InitC|
  00aec	ea000085	 b           |$cleanUp$40060|
  00af0		 |$LN12@DVFS_InitC|

; 423  :     s_OpmInfo.opmCeiling = min(opm, s_OpmInfo.opmCeiling);

  00af0	e59d2224	 ldr         r2, [sp, #0x224]
  00af4	e59f3248	 ldr         r3, [pc, #0x248]
  00af8	e593308c	 ldr         r3, [r3, #0x8C]
  00afc	e1520003	 cmp         r2, r3
  00b00	2a000002	 bcs         |$LN28@DVFS_InitC|
  00b04	e59d3224	 ldr         r3, [sp, #0x224]
  00b08	e58d347c	 str         r3, [sp, #0x47C]
  00b0c	ea000002	 b           |$LN29@DVFS_InitC|
  00b10		 |$LN28@DVFS_InitC|
  00b10	e59f322c	 ldr         r3, [pc, #0x22C]
  00b14	e593308c	 ldr         r3, [r3, #0x8C]
  00b18	e58d347c	 str         r3, [sp, #0x47C]
  00b1c		 |$LN29@DVFS_InitC|
  00b1c	e59d247c	 ldr         r2, [sp, #0x47C]
  00b20	e59f321c	 ldr         r3, [pc, #0x21C]
  00b24	e583208c	 str         r2, [r3, #0x8C]

; 424  : 
; 425  :     // get Opp --> Opm map for mpu1
; 426  :     size = sizeof(szBuffer);

  00b28	e3a03f82	 mov         r3, #0x82, 30
  00b2c	e58d3018	 str         r3, [sp, #0x18]

; 427  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_MPU1, 0, 0, 
; 428  :             (BYTE*)szBuffer, &size
; 429  :             );

  00b30	e28d3018	 add         r3, sp, #0x18
  00b34	e58d3004	 str         r3, [sp, #4]
  00b38	e28d301c	 add         r3, sp, #0x1C
  00b3c	e58d3000	 str         r3, [sp]
  00b40	e3a03000	 mov         r3, #0
  00b44	e3a02000	 mov         r2, #0
  00b48	e59f1204	 ldr         r1, [pc, #0x204]
  00b4c	e59d0010	 ldr         r0, [sp, #0x10]
  00b50	eb000000	 bl          RegQueryValueExW
  00b54	e58d0480	 str         r0, [sp, #0x480]
  00b58	e59d3480	 ldr         r3, [sp, #0x480]
  00b5c	e58d3014	 str         r3, [sp, #0x14]

; 430  :     if (code != ERROR_SUCCESS) goto cleanUp;

  00b60	e59d3014	 ldr         r3, [sp, #0x14]
  00b64	e3530000	 cmp         r3, #0
  00b68	0a000001	 beq         |$LN10@DVFS_InitC|
  00b6c	ea000065	 b           |$LN9@DVFS_InitC|
  00b70	ea000064	 b           |$cleanUp$40060|
  00b74		 |$LN10@DVFS_InitC|

; 431  :     if (ParseOppToOpmMap(szBuffer, size/sizeof(_TCHAR), 
; 432  :             s_OpmInfo.rgVddMPU1, kOpmCount) == FALSE
; 433  :             )

  00b74	e3a0500a	 mov         r5, #0xA
  00b78	e59f31c4	 ldr         r3, [pc, #0x1C4]
  00b7c	e2834014	 add         r4, r3, #0x14
  00b80	e59d1018	 ldr         r1, [sp, #0x18]
  00b84	e3a00002	 mov         r0, #2
  00b88	eb000000	 bl          __rt_udiv
  00b8c	e1a01000	 mov         r1, r0
  00b90	e28d001c	 add         r0, sp, #0x1C
  00b94	e1a02004	 mov         r2, r4
  00b98	e1a03005	 mov         r3, r5
  00b9c	eb000000	 bl          |?ParseOppToOpmMap@@YAHPBGKPAKK@Z|
  00ba0	e58d0484	 str         r0, [sp, #0x484]
  00ba4	e59d3484	 ldr         r3, [sp, #0x484]
  00ba8	e3530000	 cmp         r3, #0
  00bac	1a000001	 bne         |$LN8@DVFS_InitC|
  00bb0	ea000054	 b           |$LN7@DVFS_InitC|

; 434  :         {
; 435  :         goto cleanUp;

  00bb4	ea000053	 b           |$cleanUp$40060|
  00bb8		 |$LN8@DVFS_InitC|

; 436  :         }
; 437  : 
; 438  :     // get Opp --> Opm map for core1
; 439  :     size = sizeof(szBuffer);

  00bb8	e3a03f82	 mov         r3, #0x82, 30
  00bbc	e58d3018	 str         r3, [sp, #0x18]

; 440  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_CORE1, 0, 0, 
; 441  :             (BYTE*)szBuffer, &size
; 442  :             );

  00bc0	e28d3018	 add         r3, sp, #0x18
  00bc4	e58d3004	 str         r3, [sp, #4]
  00bc8	e28d301c	 add         r3, sp, #0x1C
  00bcc	e58d3000	 str         r3, [sp]
  00bd0	e3a03000	 mov         r3, #0
  00bd4	e3a02000	 mov         r2, #0
  00bd8	e59f1170	 ldr         r1, [pc, #0x170]
  00bdc	e59d0010	 ldr         r0, [sp, #0x10]
  00be0	eb000000	 bl          RegQueryValueExW
  00be4	e58d0488	 str         r0, [sp, #0x488]
  00be8	e59d3488	 ldr         r3, [sp, #0x488]
  00bec	e58d3014	 str         r3, [sp, #0x14]

; 443  :     if (code != ERROR_SUCCESS) goto cleanUp;

  00bf0	e59d3014	 ldr         r3, [sp, #0x14]
  00bf4	e3530000	 cmp         r3, #0
  00bf8	0a000001	 beq         |$LN6@DVFS_InitC|
  00bfc	ea000041	 b           |$LN5@DVFS_InitC|
  00c00	ea000040	 b           |$cleanUp$40060|
  00c04		 |$LN6@DVFS_InitC|

; 444  :     if (ParseOppToOpmMap(szBuffer, size/sizeof(_TCHAR), 
; 445  :             s_OpmInfo.rgVddCORE1, kOpmCount) == FALSE
; 446  :             )

  00c04	e3a0500a	 mov         r5, #0xA
  00c08	e59f3134	 ldr         r3, [pc, #0x134]
  00c0c	e283403c	 add         r4, r3, #0x3C
  00c10	e59d1018	 ldr         r1, [sp, #0x18]
  00c14	e3a00002	 mov         r0, #2
  00c18	eb000000	 bl          __rt_udiv
  00c1c	e1a01000	 mov         r1, r0
  00c20	e28d001c	 add         r0, sp, #0x1C
  00c24	e1a02004	 mov         r2, r4
  00c28	e1a03005	 mov         r3, r5
  00c2c	eb000000	 bl          |?ParseOppToOpmMap@@YAHPBGKPAKK@Z|
  00c30	e58d048c	 str         r0, [sp, #0x48C]
  00c34	e59d348c	 ldr         r3, [sp, #0x48C]
  00c38	e3530000	 cmp         r3, #0
  00c3c	1a000001	 bne         |$LN4@DVFS_InitC|
  00c40	ea000030	 b           |$LN3@DVFS_InitC|

; 447  :         {
; 448  :         goto cleanUp;

  00c44	ea00002f	 b           |$cleanUp$40060|
  00c48		 |$LN4@DVFS_InitC|

; 449  :         }
; 450  : 
; 451  :     // get floor value
; 452  :     size = sizeof(Dvfs_OperatingMode_e);

  00c48	e3a03004	 mov         r3, #4
  00c4c	e58d3018	 str         r3, [sp, #0x18]

; 453  :     code = RegQueryValueEx(hKey, REGEDIT_DVFS_FLOOR, 0, 0, 
; 454  :             (BYTE*)&opm, &size
; 455  :             );

  00c50	e28d3018	 add         r3, sp, #0x18
  00c54	e58d3004	 str         r3, [sp, #4]
  00c58	e28d3f89	 add         r3, sp, #0x89, 30
  00c5c	e58d3000	 str         r3, [sp]
  00c60	e3a03000	 mov         r3, #0
  00c64	e3a02000	 mov         r2, #0
  00c68	e59f10dc	 ldr         r1, [pc, #0xDC]
  00c6c	e59d0010	 ldr         r0, [sp, #0x10]
  00c70	eb000000	 bl          RegQueryValueExW
  00c74	e58d0490	 str         r0, [sp, #0x490]
  00c78	e59d3490	 ldr         r3, [sp, #0x490]
  00c7c	e58d3014	 str         r3, [sp, #0x14]

; 456  :     if (code == ERROR_SUCCESS)

  00c80	e59d3014	 ldr         r3, [sp, #0x14]
  00c84	e3530000	 cmp         r3, #0
  00c88	1a00000d	 bne         |$LN2@DVFS_InitC|

; 457  :         {
; 458  :         s_OpmInfo.opmFloor = min(s_OpmInfo.opmCeiling, opm);

  00c8c	e59f30b0	 ldr         r3, [pc, #0xB0]
  00c90	e593208c	 ldr         r2, [r3, #0x8C]
  00c94	e59d3224	 ldr         r3, [sp, #0x224]
  00c98	e1520003	 cmp         r2, r3
  00c9c	2a000003	 bcs         |$LN30@DVFS_InitC|
  00ca0	e59f309c	 ldr         r3, [pc, #0x9C]
  00ca4	e593308c	 ldr         r3, [r3, #0x8C]
  00ca8	e58d3494	 str         r3, [sp, #0x494]
  00cac	ea000001	 b           |$LN31@DVFS_InitC|
  00cb0		 |$LN30@DVFS_InitC|
  00cb0	e59d3224	 ldr         r3, [sp, #0x224]
  00cb4	e58d3494	 str         r3, [sp, #0x494]
  00cb8		 |$LN31@DVFS_InitC|
  00cb8	e59d2494	 ldr         r2, [sp, #0x494]
  00cbc	e59f3080	 ldr         r3, [pc, #0x80]
  00cc0	e5832090	 str         r2, [r3, #0x90]
  00cc4		 |$LN2@DVFS_InitC|

; 459  :         }
; 460  : 
; 461  :     RETAILMSG(1,(L"DVFS_InitConstraint: opmCurrent=%d, opmCeiling=%d, opmFloor=%d", 
; 462  : 		s_OpmInfo.opmCurrent,
; 463  : 		s_OpmInfo.opmCeiling,
; 464  : 		s_OpmInfo.opmFloor
; 465  : 		));

  00cc4	e59f3078	 ldr         r3, [pc, #0x78]
  00cc8	e5933090	 ldr         r3, [r3, #0x90]
  00ccc	e59f2070	 ldr         r2, [pc, #0x70]
  00cd0	e592208c	 ldr         r2, [r2, #0x8C]
  00cd4	e59f1068	 ldr         r1, [pc, #0x68]
  00cd8	e5911098	 ldr         r1, [r1, #0x98]
  00cdc	e59f0064	 ldr         r0, [pc, #0x64]
  00ce0	eb000000	 bl          NKDbgPrintfW
  00ce4	e3a03001	 mov         r3, #1
  00ce8	e58d3498	 str         r3, [sp, #0x498]
  00cec	ea000001	 b           |$LN33@DVFS_InitC|
  00cf0	e3a03000	 mov         r3, #0
  00cf4	e58d3498	 str         r3, [sp, #0x498]
  00cf8		 |$LN33@DVFS_InitC|

; 466  : 
; 467  :     InitializeCriticalSection(&s_OpmInfo.cs);

  00cf8	e59f0044	 ldr         r0, [pc, #0x44]
  00cfc	eb000000	 bl          InitializeCriticalSection

; 468  :     
; 469  :     rc = (HANDLE)&s_OpmInfo;

  00d00	e59f303c	 ldr         r3, [pc, #0x3C]
  00d04	e58d3008	 str         r3, [sp, #8]
  00d08		 |$LN3@DVFS_InitC|
  00d08		 |$LN5@DVFS_InitC|
  00d08		 |$LN7@DVFS_InitC|
  00d08		 |$LN9@DVFS_InitC|
  00d08		 |$LN11@DVFS_InitC|
  00d08		 |$LN13@DVFS_InitC|
  00d08		 |$LN15@DVFS_InitC|
  00d08		 |$LN17@DVFS_InitC|
  00d08		 |$cleanUp$40060|

; 470  : 
; 471  : cleanUp:
; 472  :     if (hKey != NULL) 

  00d08	e59d3010	 ldr         r3, [sp, #0x10]
  00d0c	e3530000	 cmp         r3, #0
  00d10	0a000001	 beq         |$LN1@DVFS_InitC|

; 473  :         RegCloseKey(hKey);

  00d14	e59d0010	 ldr         r0, [sp, #0x10]
  00d18	eb000000	 bl          RegCloseKey
  00d1c		 |$LN1@DVFS_InitC|

; 474  :     return rc;

  00d1c	e59d0430	 ldr         r0, [sp, #0x430]
  00d20	eb000000	 bl          __security_check_cookie
  00d24	e59d3008	 ldr         r3, [sp, #8]
  00d28	e58d3468	 str         r3, [sp, #0x468]

; 475  : } 

  00d2c	e59d0468	 ldr         r0, [sp, #0x468]
  00d30	e3a0cb01	 mov         r12, #1, 22
  00d34	e38cc09c	 orr         r12, r12, #0x9C
  00d38	e08dd00c	 add         sp, sp, r12
  00d3c	e89d6030	 ldmia       sp, {r4, r5, sp, lr}
  00d40	e12fff1e	 bx          lr
  00d44		 |$LN37@DVFS_InitC|
  00d44		 |$LN38@DVFS_InitC|
  00d44	00000000	 DCD         |s_OpmInfo|
  00d48		 |$LN39@DVFS_InitC|
  00d48	00000000	 DCD         |??_C@_1HO@MCEJPKI@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAo?$AAp?$AAm?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?$DN@|
  00d4c		 |$LN40@DVFS_InitC|
  00d4c	00000000	 DCD         |??_C@_1BC@BFINDJLA@?$AAO?$AAp?$AAm?$AAF?$AAl?$AAo?$AAo?$AAr?$AA?$AA@|
  00d50		 |$LN41@DVFS_InitC|
  00d50	00000000	 DCD         |??_C@_1BC@JLOAIBPJ@?$AAC?$AAO?$AAR?$AAE?$AA1?$AAM?$AAa?$AAp?$AA?$AA@|
  00d54		 |$LN42@DVFS_InitC|
  00d54	00000000	 DCD         |??_C@_1BA@CKJNKENB@?$AAM?$AAP?$AAU?$AA1?$AAM?$AAa?$AAp?$AA?$AA@|
  00d58		 |$LN43@DVFS_InitC|
  00d58	00000000	 DCD         |??_C@_1BG@LAODCCDA@?$AAO?$AAp?$AAm?$AAC?$AAe?$AAi?$AAl?$AAi?$AAn?$AAg?$AA?$AA@|
  00d5c		 |$LN44@DVFS_InitC|
  00d5c	00000000	 DCD         |??_C@_1BA@IDCKAMHD@?$AAO?$AAp?$AAm?$AAI?$AAn?$AAi?$AAt?$AA?$AA@|
  00d60		 |$LN45@DVFS_InitC|
  00d60	00000000	 DCD         |??_C@_1GC@MFOCLLAG@?$AAD?$AAV?$AAF?$AAS?$AA_?$AAI?$AAn?$AAi?$AAt?$AAC?$AAo?$AAn?$AAs?$AAt?$AAr?$AAa?$AAi?$AAn?$AAt?$AA?3?$AA?5?$AAU?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd@|
  00d64		 |$LN46@DVFS_InitC|
  00d64	00000000	 DCD         |??_C@_1M@FBGIFOCP@?$AA?2?$AA3?$AA5?$AA1?$AA7?$AA?$AA@|
  00d68		 |$LN47@DVFS_InitC|
  00d68	00000000	 DCD         |??_C@_1M@LKEIENOA@?$AA?2?$AA3?$AA5?$AAx?$AAx?$AA?$AA@|
  00d6c		 |$LN48@DVFS_InitC|
  00d6c	00000000	 DCD         |??_C@_1M@PIGNEKJN@?$AA?2?$AA3?$AA7?$AAx?$AAx?$AA?$AA@|
  00d70		 |$LN49@DVFS_InitC|
  00d70	0101200c	 DCD         0x101200c
  00d74		 |$LN50@DVFS_InitC|
  00d74	00000000	 DCD         |__security_cookie|
  00d78		 |$LN51@DVFS_InitC|
  00d78	fffffb64	 DCD         0xfffffb64
  00d7c		 |$M41033|

			 ENDP  ; |?DVFS_InitConstraint@@YAPAXPBG@Z|, DVFS_InitConstraint

	EXPORT	|?DVFS_DeinitConstraint@@YAHPAX@Z|	; DVFS_DeinitConstraint
	IMPORT	|DeleteCriticalSection|

  00028			 AREA	 |.pdata|, PDATA
|$T41056| DCD	|$LN7@DVFS_Deini|
	DCD	0x40002404
; Function compile flags: /Odtp

  00d7c			 AREA	 |.text|, CODE, ARM

  00d7c		 |?DVFS_DeinitConstraint@@YAHPAX@Z| PROC ; DVFS_DeinitConstraint

; 487  : {

  00d7c		 |$LN7@DVFS_Deini|
  00d7c	e1a0c00d	 mov         r12, sp
  00d80	e92d0001	 stmdb       sp!, {r0}
  00d84	e92d5000	 stmdb       sp!, {r12, lr}
  00d88	e24dd008	 sub         sp, sp, #8
  00d8c		 |$M41053|

; 488  :     BOOL rc = FALSE;

  00d8c	e3a03000	 mov         r3, #0
  00d90	e58d3000	 str         r3, [sp]

; 489  : 
; 490  :     // validate parameters
; 491  :     if (hConstraintAdapter != (HANDLE)&s_OpmInfo) goto cleanUp;

  00d94	e59d2010	 ldr         r2, [sp, #0x10]
  00d98	e59f3068	 ldr         r3, [pc, #0x68]
  00d9c	e1520003	 cmp         r2, r3
  00da0	0a000001	 beq         |$LN2@DVFS_Deini|
  00da4	ea000011	 b           |$LN1@DVFS_Deini|
  00da8	ea000010	 b           |$cleanUp$40103|
  00dac		 |$LN2@DVFS_Deini|

; 492  : 
; 493  :     // reset structure
; 494  :     memset(&s_OpmInfo, 0, sizeof(DVFSConstraintInfo_t));

  00dac	e3a0209c	 mov         r2, #0x9C
  00db0	e3a01000	 mov         r1, #0
  00db4	e59f004c	 ldr         r0, [pc, #0x4C]
  00db8	eb000000	 bl          memset

; 495  :     s_OpmInfo.opmFloor = kOpm0;

  00dbc	e59f2044	 ldr         r2, [pc, #0x44]
  00dc0	e3a03000	 mov         r3, #0
  00dc4	e5823090	 str         r3, [r2, #0x90]

; 496  :     s_OpmInfo.opmCeiling = kOpm9;

  00dc8	e59f2038	 ldr         r2, [pc, #0x38]
  00dcc	e3a03009	 mov         r3, #9
  00dd0	e582308c	 str         r3, [r2, #0x8C]

; 497  :     s_OpmInfo.idxForce = (DWORD) -1;

  00dd4	e59f202c	 ldr         r2, [pc, #0x2C]
  00dd8	e3e03000	 mvn         r3, #0
  00ddc	e5823094	 str         r3, [r2, #0x94]

; 498  : 
; 499  :     DeleteCriticalSection(&s_OpmInfo.cs);

  00de0	e59f0020	 ldr         r0, [pc, #0x20]
  00de4	eb000000	 bl          DeleteCriticalSection

; 500  : 
; 501  :     rc = TRUE;

  00de8	e3a03001	 mov         r3, #1
  00dec	e58d3000	 str         r3, [sp]
  00df0		 |$LN1@DVFS_Deini|
  00df0		 |$cleanUp$40103|

; 502  : 
; 503  : cleanUp:
; 504  :     return rc;

  00df0	e59d3000	 ldr         r3, [sp]
  00df4	e58d3004	 str         r3, [sp, #4]

; 505  : } 

  00df8	e59d0004	 ldr         r0, [sp, #4]
  00dfc	e28dd008	 add         sp, sp, #8
  00e00	e89d6000	 ldmia       sp, {sp, lr}
  00e04	e12fff1e	 bx          lr
  00e08		 |$LN8@DVFS_Deini|
  00e08		 |$LN9@DVFS_Deini|
  00e08	00000000	 DCD         |s_OpmInfo|
  00e0c		 |$M41054|

			 ENDP  ; |?DVFS_DeinitConstraint@@YAHPAX@Z|, DVFS_DeinitConstraint

	EXPORT	|?NewIndex@?$IndexList@K@@QAAHPAPAKPAK@Z| ; IndexList<unsigned long>::NewIndex
	EXPORT	|?DVFS_CreateConstraint@@YAPAXPAX@Z|	; DVFS_CreateConstraint

  00030			 AREA	 |.pdata|, PDATA
|$T41064| DCD	|$LN9@DVFS_Creat|
	DCD	0x40002404
; Function compile flags: /Odtp

  00e0c			 AREA	 |.text|, CODE, ARM

  00e0c		 |?DVFS_CreateConstraint@@YAPAXPAX@Z| PROC ; DVFS_CreateConstraint

; 517  : {

  00e0c		 |$LN9@DVFS_Creat|
  00e0c	e1a0c00d	 mov         r12, sp
  00e10	e92d0001	 stmdb       sp!, {r0}
  00e14	e92d5000	 stmdb       sp!, {r12, lr}
  00e18	e24dd014	 sub         sp, sp, #0x14
  00e1c		 |$M41061|

; 518  :     DWORD id;
; 519  :     DWORD *pDataNode;
; 520  :     HANDLE rc = NULL;

  00e1c	e3a03000	 mov         r3, #0
  00e20	e58d3004	 str         r3, [sp, #4]

; 521  :     
; 522  :     // validate parameters
; 523  :     if (hConstraintAdapter != (HANDLE)&s_OpmInfo) goto cleanUp;

  00e24	e59d201c	 ldr         r2, [sp, #0x1C]
  00e28	e59f3068	 ldr         r3, [pc, #0x68]
  00e2c	e1520003	 cmp         r2, r3
  00e30	0a000001	 beq         |$LN4@DVFS_Creat|
  00e34	ea000010	 b           |$LN3@DVFS_Creat|
  00e38	ea00000f	 b           |$cleanUp$40115|
  00e3c		 |$LN4@DVFS_Creat|

; 524  : 
; 525  :     // get new index
; 526  :     if (s_IndexList.NewIndex(&pDataNode, &id) == FALSE)

  00e3c	e28d2000	 add         r2, sp, #0
  00e40	e28d1008	 add         r1, sp, #8
  00e44	e59f0048	 ldr         r0, [pc, #0x48]
  00e48	eb000000	 bl          |?NewIndex@?$IndexList@K@@QAAHPAPAKPAK@Z|
  00e4c	e58d0010	 str         r0, [sp, #0x10]
  00e50	e59d3010	 ldr         r3, [sp, #0x10]
  00e54	e3530000	 cmp         r3, #0
  00e58	1a000001	 bne         |$LN2@DVFS_Creat|
  00e5c	ea000006	 b           |$LN1@DVFS_Creat|

; 527  :         {
; 528  :         goto cleanUp;

  00e60	ea000005	 b           |$cleanUp$40115|
  00e64		 |$LN2@DVFS_Creat|

; 529  :         }
; 530  : 
; 531  :     // initialize values
; 532  :     rc = (HANDLE)(id + 1);

  00e64	e59d3000	 ldr         r3, [sp]
  00e68	e2833001	 add         r3, r3, #1
  00e6c	e58d3004	 str         r3, [sp, #4]

; 533  :     *pDataNode = (DWORD) kOpmUndefined;

  00e70	e59d2008	 ldr         r2, [sp, #8]
  00e74	e3e03000	 mvn         r3, #0
  00e78	e5823000	 str         r3, [r2]
  00e7c		 |$LN1@DVFS_Creat|
  00e7c		 |$LN3@DVFS_Creat|
  00e7c		 |$cleanUp$40115|

; 534  : 
; 535  : cleanUp:    
; 536  :     return rc;

  00e7c	e59d3004	 ldr         r3, [sp, #4]
  00e80	e58d300c	 str         r3, [sp, #0xC]

; 537  : } 

  00e84	e59d000c	 ldr         r0, [sp, #0xC]
  00e88	e28dd014	 add         sp, sp, #0x14
  00e8c	e89d6000	 ldmia       sp, {sp, lr}
  00e90	e12fff1e	 bx          lr
  00e94		 |$LN10@DVFS_Creat|
  00e94		 |$LN11@DVFS_Creat|
  00e94	00000000	 DCD         |s_IndexList|
  00e98		 |$LN12@DVFS_Creat|
  00e98	00000000	 DCD         |s_OpmInfo|
  00e9c		 |$M41062|

			 ENDP  ; |?DVFS_CreateConstraint@@YAPAXPAX@Z|, DVFS_CreateConstraint

	EXPORT	|?MaxIndex@?$IndexList@K@@QAAKXZ|	; IndexList<unsigned long>::MaxIndex
	EXPORT	|?DVFS_UpdateConstraint@@YAHPAXK0I@Z|	; DVFS_UpdateConstraint

  00038			 AREA	 |.pdata|, PDATA
|$T41075| DCD	|$LN24@DVFS_Updat|
	DCD	0x40008e04
; Function compile flags: /Odtp

  00e9c			 AREA	 |.text|, CODE, ARM

  00e9c		 |?DVFS_UpdateConstraint@@YAHPAXK0I@Z| PROC ; DVFS_UpdateConstraint

; 552  : {

  00e9c		 |$LN24@DVFS_Updat|
  00e9c	e1a0c00d	 mov         r12, sp
  00ea0	e92d000f	 stmdb       sp!, {r0 - r3}
  00ea4	e92d5000	 stmdb       sp!, {r12, lr}
  00ea8	e24dd02c	 sub         sp, sp, #0x2C
  00eac		 |$M41072|

; 553  :     DWORD opmNew;
; 554  :     DWORD dwParam;    
; 555  :     BOOL rc = FALSE;

  00eac	e3a03000	 mov         r3, #0
  00eb0	e58d3008	 str         r3, [sp, #8]

; 556  :     DWORD *pDataNode;
; 557  :     DWORD id = (DWORD)hConstraintContext - 1;

  00eb4	e59d3034	 ldr         r3, [sp, #0x34]
  00eb8	e2433001	 sub         r3, r3, #1
  00ebc	e58d3000	 str         r3, [sp]

; 558  :     
; 559  :     // validate parameters
; 560  :     if (size != sizeof(DWORD)) goto cleanUp;

  00ec0	e59d3040	 ldr         r3, [sp, #0x40]
  00ec4	e3530004	 cmp         r3, #4
  00ec8	0a000001	 beq         |$LN17@DVFS_Updat|
  00ecc	ea000078	 b           |$LN16@DVFS_Updat|
  00ed0	ea000077	 b           |$cleanUp$40135|
  00ed4		 |$LN17@DVFS_Updat|

; 561  :     if (id > s_IndexList.MaxIndex()) goto cleanUp;

  00ed4	e59f01f4	 ldr         r0, [pc, #0x1F4]
  00ed8	eb000000	 bl          |?MaxIndex@?$IndexList@K@@QAAKXZ|
  00edc	e58d0018	 str         r0, [sp, #0x18]
  00ee0	e59d2000	 ldr         r2, [sp]
  00ee4	e59d3018	 ldr         r3, [sp, #0x18]
  00ee8	e1520003	 cmp         r2, r3
  00eec	9a000001	 bls         |$LN15@DVFS_Updat|
  00ef0	ea00006f	 b           |$LN14@DVFS_Updat|
  00ef4	ea00006e	 b           |$cleanUp$40135|
  00ef8		 |$LN15@DVFS_Updat|

; 562  : 
; 563  :     // get data node
; 564  :     pDataNode = s_IndexList.GetIndex(id);

  00ef8	e59d1000	 ldr         r1, [sp]
  00efc	e59f01cc	 ldr         r0, [pc, #0x1CC]
  00f00	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  00f04	e58d001c	 str         r0, [sp, #0x1C]
  00f08	e59d301c	 ldr         r3, [sp, #0x1C]
  00f0c	e58d3010	 str         r3, [sp, #0x10]

; 565  :     if (pDataNode == NULL) goto cleanUp;

  00f10	e59d3010	 ldr         r3, [sp, #0x10]
  00f14	e3530000	 cmp         r3, #0
  00f18	1a000001	 bne         |$LN13@DVFS_Updat|
  00f1c	ea000064	 b           |$LN12@DVFS_Updat|
  00f20	ea000063	 b           |$cleanUp$40135|
  00f24		 |$LN13@DVFS_Updat|

; 566  : 
; 567  :     // determine new opm
; 568  :     dwParam = *(DWORD*)pParam;

  00f24	e59d303c	 ldr         r3, [sp, #0x3C]
  00f28	e5933000	 ldr         r3, [r3]
  00f2c	e58d300c	 str         r3, [sp, #0xC]

; 569  :     if (CONSTRAINT_STATE_NULL == dwParam)

  00f30	e59d300c	 ldr         r3, [sp, #0xC]
  00f34	e3730801	 cmn         r3, #1, 16
  00f38	1a000002	 bne         |$LN11@DVFS_Updat|

; 570  :         {
; 571  :         //OALMSG(1, (L"DVFS_UpdateConstraint - undefined\r\n"));
; 572  :         opmNew = (DWORD) kOpmUndefined;

  00f3c	e3e03000	 mvn         r3, #0
  00f40	e58d3004	 str         r3, [sp, #4]
  00f44	ea000015	 b           |$LN10@DVFS_Updat|
  00f48		 |$LN11@DVFS_Updat|

; 573  :         }
; 574  :     else if (CONSTRAINT_STATE_FLOOR == dwParam)

  00f48	e59d200c	 ldr         r2, [sp, #0xC]
  00f4c	e3e03cff	 mvn         r3, #0xFF, 24
  00f50	e22330fe	 eor         r3, r3, #0xFE
  00f54	e1520003	 cmp         r2, r3
  00f58	1a000003	 bne         |$LN9@DVFS_Updat|

; 575  :         {
; 576  :         //OALMSG(1, (L"DVFS_UpdateConstraint - FLOOR\r\n"));
; 577  :         opmNew = s_OpmInfo.opmFloor;

  00f5c	e59f3168	 ldr         r3, [pc, #0x168]
  00f60	e5933090	 ldr         r3, [r3, #0x90]
  00f64	e58d3004	 str         r3, [sp, #4]

; 578  :         }
; 579  :     else 

  00f68	ea00000c	 b           |$LN8@DVFS_Updat|
  00f6c		 |$LN9@DVFS_Updat|

; 580  :         {
; 581  :         //OALMSG(1, (L"DVFS_UpdateConstraint - OPM%d\r\n", dwParam));
; 582  :         opmNew = min(dwParam, s_OpmInfo.opmCeiling);

  00f6c	e59d200c	 ldr         r2, [sp, #0xC]
  00f70	e59f3154	 ldr         r3, [pc, #0x154]
  00f74	e593308c	 ldr         r3, [r3, #0x8C]
  00f78	e1520003	 cmp         r2, r3
  00f7c	2a000002	 bcs         |$LN20@DVFS_Updat|
  00f80	e59d300c	 ldr         r3, [sp, #0xC]
  00f84	e58d3020	 str         r3, [sp, #0x20]
  00f88	ea000002	 b           |$LN21@DVFS_Updat|
  00f8c		 |$LN20@DVFS_Updat|
  00f8c	e59f3138	 ldr         r3, [pc, #0x138]
  00f90	e593308c	 ldr         r3, [r3, #0x8C]
  00f94	e58d3020	 str         r3, [sp, #0x20]
  00f98		 |$LN21@DVFS_Updat|
  00f98	e59d3020	 ldr         r3, [sp, #0x20]
  00f9c	e58d3004	 str         r3, [sp, #4]
  00fa0		 |$LN8@DVFS_Updat|
  00fa0		 |$LN10@DVFS_Updat|

; 583  :         }
; 584  : 
; 585  :     if (s_OpmInfo.idxForce == id)

  00fa0	e59f3124	 ldr         r3, [pc, #0x124]
  00fa4	e5932094	 ldr         r2, [r3, #0x94]
  00fa8	e59d3000	 ldr         r3, [sp]
  00fac	e1520003	 cmp         r2, r3
  00fb0	1a000002	 bne         |$LN7@DVFS_Updat|

; 586  :         {
; 587  :         s_OpmInfo.idxForce = (DWORD) -1;

  00fb4	e59f2110	 ldr         r2, [pc, #0x110]
  00fb8	e3e03000	 mvn         r3, #0
  00fbc	e5823094	 str         r3, [r2, #0x94]
  00fc0		 |$LN7@DVFS_Updat|

; 588  :         }
; 589  : 
; 590  :     // serialize access
; 591  :     Lock();

  00fc0	eb000000	 bl          |?Lock@@YAXXZ|

; 592  :            
; 593  :     // process constraint message
; 594  :     switch (msg)

  00fc4	e59d3038	 ldr         r3, [sp, #0x38]
  00fc8	e58d3024	 str         r3, [sp, #0x24]
  00fcc	e59d3024	 ldr         r3, [sp, #0x24]
  00fd0	e3530001	 cmp         r3, #1
  00fd4	0a000006	 beq         |$LN3@DVFS_Updat|
  00fd8	e59d3024	 ldr         r3, [sp, #0x24]
  00fdc	e3530102	 cmp         r3, #2, 2
  00fe0	0a000000	 beq         |$LN4@DVFS_Updat|
  00fe4	ea00002c	 b           |$LN5@DVFS_Updat|
  00fe8		 |$LN4@DVFS_Updat|

; 595  :         {
; 596  :         case DVFS_FORCE:
; 597  :             s_OpmInfo.idxForce = id;

  00fe8	e59d2000	 ldr         r2, [sp]
  00fec	e59f30d8	 ldr         r3, [pc, #0xD8]
  00ff0	e5832094	 str         r2, [r3, #0x94]
  00ff4		 |$LN3@DVFS_Updat|

; 598  : 
; 599  :             //fall-through
; 600  :             
; 601  :         case CONSTRAINT_MSG_DVFS_REQUEST:
; 602  :             // update new constraint
; 603  :             if (*pDataNode != kOpmUndefined)

  00ff4	e59d3010	 ldr         r3, [sp, #0x10]
  00ff8	e5933000	 ldr         r3, [r3]
  00ffc	e3730001	 cmn         r3, #1
  01000	0a000010	 beq         |$LN2@DVFS_Updat|

; 604  :                 {
; 605  :                 s_OpmInfo.opmTable[*pDataNode] -= 1;

  01004	e59d3010	 ldr         r3, [sp, #0x10]
  01008	e5931000	 ldr         r1, [r3]
  0100c	e3a03004	 mov         r3, #4
  01010	e0020391	 mul         r2, r1, r3
  01014	e59f30b0	 ldr         r3, [pc, #0xB0]
  01018	e2833064	 add         r3, r3, #0x64
  0101c	e0833002	 add         r3, r3, r2
  01020	e5933000	 ldr         r3, [r3]
  01024	e2430001	 sub         r0, r3, #1
  01028	e59d3010	 ldr         r3, [sp, #0x10]
  0102c	e5931000	 ldr         r1, [r3]
  01030	e3a03004	 mov         r3, #4
  01034	e0020391	 mul         r2, r1, r3
  01038	e59f308c	 ldr         r3, [pc, #0x8C]
  0103c	e2833064	 add         r3, r3, #0x64
  01040	e0833002	 add         r3, r3, r2
  01044	e5830000	 str         r0, [r3]
  01048		 |$LN2@DVFS_Updat|

; 606  :                 }
; 607  : 
; 608  :             if (opmNew != kOpmUndefined)

  01048	e59d3004	 ldr         r3, [sp, #4]
  0104c	e3730001	 cmn         r3, #1
  01050	0a00000e	 beq         |$LN1@DVFS_Updat|

; 609  :                 {
; 610  :                 s_OpmInfo.opmTable[opmNew] += 1;

  01054	e59d1004	 ldr         r1, [sp, #4]
  01058	e3a03004	 mov         r3, #4
  0105c	e0020391	 mul         r2, r1, r3
  01060	e59f3064	 ldr         r3, [pc, #0x64]
  01064	e2833064	 add         r3, r3, #0x64
  01068	e0833002	 add         r3, r3, r2
  0106c	e5933000	 ldr         r3, [r3]
  01070	e2830001	 add         r0, r3, #1
  01074	e59d1004	 ldr         r1, [sp, #4]
  01078	e3a03004	 mov         r3, #4
  0107c	e0020391	 mul         r2, r1, r3
  01080	e59f3044	 ldr         r3, [pc, #0x44]
  01084	e2833064	 add         r3, r3, #0x64
  01088	e0833002	 add         r3, r3, r2
  0108c	e5830000	 str         r0, [r3]
  01090		 |$LN1@DVFS_Updat|

; 611  :                 }
; 612  :             *pDataNode = opmNew;

  01090	e59d2004	 ldr         r2, [sp, #4]
  01094	e59d3010	 ldr         r3, [sp, #0x10]
  01098	e5832000	 str         r2, [r3]
  0109c		 |$LN5@DVFS_Updat|

; 613  :             break;
; 614  :         }
; 615  :     
; 616  :     // update operating mode
; 617  :     rc = UpdateOpm(id);

  0109c	e59d0000	 ldr         r0, [sp]
  010a0	eb000000	 bl          |?UpdateOpm@@YAHK@Z|
  010a4	e58d0028	 str         r0, [sp, #0x28]
  010a8	e59d3028	 ldr         r3, [sp, #0x28]
  010ac	e58d3008	 str         r3, [sp, #8]

; 618  :     
; 619  :     Unlock();

  010b0	eb000000	 bl          |?Unlock@@YAXXZ|
  010b4		 |$LN12@DVFS_Updat|
  010b4		 |$LN14@DVFS_Updat|
  010b4		 |$LN16@DVFS_Updat|
  010b4		 |$cleanUp$40135|

; 620  : 
; 621  : cleanUp:
; 622  :     return rc;

  010b4	e59d3008	 ldr         r3, [sp, #8]
  010b8	e58d3014	 str         r3, [sp, #0x14]

; 623  : } 

  010bc	e59d0014	 ldr         r0, [sp, #0x14]
  010c0	e28dd02c	 add         sp, sp, #0x2C
  010c4	e89d6000	 ldmia       sp, {sp, lr}
  010c8	e12fff1e	 bx          lr
  010cc		 |$LN25@DVFS_Updat|
  010cc		 |$LN26@DVFS_Updat|
  010cc	00000000	 DCD         |s_OpmInfo|
  010d0		 |$LN27@DVFS_Updat|
  010d0	00000000	 DCD         |s_IndexList|
  010d4		 |$M41073|

			 ENDP  ; |?DVFS_UpdateConstraint@@YAHPAXK0I@Z|, DVFS_UpdateConstraint

	IMPORT	|EnterCriticalSection|

  00040			 AREA	 |.pdata|, PDATA
|$T41083| DCD	|$LN5@Lock|
	DCD	0x40000601
; Function compile flags: /Odtp

  010d4			 AREA	 |.text|, CODE, ARM

  010d4		 |?Lock@@YAXXZ| PROC			; Lock

; 91   : {

  010d4		 |$LN5@Lock|
  010d4	e52de004	 str         lr, [sp, #-4]!
  010d8		 |$M41080|

; 92   :     EnterCriticalSection(&s_OpmInfo.cs);

  010d8	e59f0008	 ldr         r0, [pc, #8]
  010dc	eb000000	 bl          EnterCriticalSection

; 93   : }

  010e0	e49de004	 ldr         lr, [sp], #4
  010e4	e12fff1e	 bx          lr
  010e8		 |$LN6@Lock|
  010e8		 |$LN7@Lock|
  010e8	00000000	 DCD         |s_OpmInfo|
  010ec		 |$M41081|

			 ENDP  ; |?Lock@@YAXXZ|, Lock

	IMPORT	|LeaveCriticalSection|

  00048			 AREA	 |.pdata|, PDATA
|$T41090| DCD	|$LN5@Unlock|
	DCD	0x40000601
; Function compile flags: /Odtp

  010ec			 AREA	 |.text|, CODE, ARM

  010ec		 |?Unlock@@YAXXZ| PROC			; Unlock

; 104  : {

  010ec		 |$LN5@Unlock|
  010ec	e52de004	 str         lr, [sp, #-4]!
  010f0		 |$M41087|

; 105  :     LeaveCriticalSection(&s_OpmInfo.cs);

  010f0	e59f0008	 ldr         r0, [pc, #8]
  010f4	eb000000	 bl          LeaveCriticalSection

; 106  : }

  010f8	e49de004	 ldr         lr, [sp], #4
  010fc	e12fff1e	 bx          lr
  01100		 |$LN6@Unlock|
  01100		 |$LN7@Unlock|
  01100	00000000	 DCD         |s_OpmInfo|
  01104		 |$M41088|

			 ENDP  ; |?Unlock@@YAXXZ|, Unlock

	EXPORT	|?DeleteIndex@?$IndexList@K@@QAAXK@Z|	; IndexList<unsigned long>::DeleteIndex
	EXPORT	|?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase
	EXPORT	|?DVFS_CloseConstraint@@YAHPAX@Z|	; DVFS_CloseConstraint
	IMPORT	|LocalFree|

  00050			 AREA	 |.pdata|, PDATA
|$T41101| DCD	|$LN15@DVFS_Close|
	DCD	0x40007c04
; Function compile flags: /Odtp

  01104			 AREA	 |.text|, CODE, ARM

  01104		 |?DVFS_CloseConstraint@@YAHPAX@Z| PROC	; DVFS_CloseConstraint

; 635  : {

  01104		 |$LN15@DVFS_Close|
  01104	e1a0c00d	 mov         r12, sp
  01108	e92d0001	 stmdb       sp!, {r0}
  0110c	e92d5000	 stmdb       sp!, {r12, lr}
  01110	e24dd03c	 sub         sp, sp, #0x3C
  01114		 |$M41098|

; 636  :     DWORD *pDataNode;
; 637  :     BOOL rc = FALSE;

  01114	e3a03000	 mov         r3, #0
  01118	e58d3004	 str         r3, [sp, #4]

; 638  :     DWORD id = (DWORD)hConstraintContext - 1;

  0111c	e59d3044	 ldr         r3, [sp, #0x44]
  01120	e2433001	 sub         r3, r3, #1
  01124	e58d3000	 str         r3, [sp]

; 639  :     list<DVFSCallbackInfo_t*>::iterator iter;

  01128	e28d0008	 add         r0, sp, #8
  0112c	eb000000	 bl          |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|

; 640  : 
; 641  :     // validate
; 642  :     if (id > s_IndexList.MaxIndex()) goto cleanUp;

  01130	e59f01b0	 ldr         r0, [pc, #0x1B0]
  01134	eb000000	 bl          |?MaxIndex@?$IndexList@K@@QAAKXZ|
  01138	e58d0020	 str         r0, [sp, #0x20]
  0113c	e59d2000	 ldr         r2, [sp]
  01140	e59d3020	 ldr         r3, [sp, #0x20]
  01144	e1520003	 cmp         r2, r3
  01148	9a000001	 bls         |$LN10@DVFS_Close|
  0114c	ea00005f	 b           |$LN9@DVFS_Close|
  01150	ea00005e	 b           |$cleanUp$40170|
  01154		 |$LN10@DVFS_Close|

; 643  : 
; 644  :     // get data node
; 645  :     pDataNode = s_IndexList.GetIndex(id);

  01154	e59d1000	 ldr         r1, [sp]
  01158	e59f0188	 ldr         r0, [pc, #0x188]
  0115c	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  01160	e58d0024	 str         r0, [sp, #0x24]
  01164	e59d3024	 ldr         r3, [sp, #0x24]
  01168	e58d300c	 str         r3, [sp, #0xC]

; 646  :     if (pDataNode == NULL) goto cleanUp;

  0116c	e59d300c	 ldr         r3, [sp, #0xC]
  01170	e3530000	 cmp         r3, #0
  01174	1a000001	 bne         |$LN8@DVFS_Close|
  01178	ea000054	 b           |$LN7@DVFS_Close|
  0117c	ea000053	 b           |$cleanUp$40170|
  01180		 |$LN8@DVFS_Close|

; 647  : 
; 648  :     Lock();

  01180	eb000000	 bl          |?Lock@@YAXXZ|

; 649  : 
; 650  :     // free any forced constraint
; 651  :     if (s_OpmInfo.idxForce == id)

  01184	e59f3164	 ldr         r3, [pc, #0x164]
  01188	e5932094	 ldr         r2, [r3, #0x94]
  0118c	e59d3000	 ldr         r3, [sp]
  01190	e1520003	 cmp         r2, r3
  01194	1a000002	 bne         |$LN6@DVFS_Close|

; 652  :         {
; 653  :         s_OpmInfo.idxForce = (DWORD) -1;

  01198	e59f2150	 ldr         r2, [pc, #0x150]
  0119c	e3e03000	 mvn         r3, #0
  011a0	e5823094	 str         r3, [r2, #0x94]
  011a4		 |$LN6@DVFS_Close|

; 654  :         }
; 655  : 
; 656  :     // update operating mode
; 657  :     if (*pDataNode != kOpmUndefined)

  011a4	e59d300c	 ldr         r3, [sp, #0xC]
  011a8	e5933000	 ldr         r3, [r3]
  011ac	e3730001	 cmn         r3, #1
  011b0	0a000012	 beq         |$LN5@DVFS_Close|

; 658  :         {
; 659  :         s_OpmInfo.opmTable[*pDataNode] -= 1;

  011b4	e59d300c	 ldr         r3, [sp, #0xC]
  011b8	e5931000	 ldr         r1, [r3]
  011bc	e3a03004	 mov         r3, #4
  011c0	e0020391	 mul         r2, r1, r3
  011c4	e59f3124	 ldr         r3, [pc, #0x124]
  011c8	e2833064	 add         r3, r3, #0x64
  011cc	e0833002	 add         r3, r3, r2
  011d0	e5933000	 ldr         r3, [r3]
  011d4	e2430001	 sub         r0, r3, #1
  011d8	e59d300c	 ldr         r3, [sp, #0xC]
  011dc	e5931000	 ldr         r1, [r3]
  011e0	e3a03004	 mov         r3, #4
  011e4	e0020391	 mul         r2, r1, r3
  011e8	e59f3100	 ldr         r3, [pc, #0x100]
  011ec	e2833064	 add         r3, r3, #0x64
  011f0	e0833002	 add         r3, r3, r2
  011f4	e5830000	 str         r0, [r3]

; 660  :         UpdateOpm(id);

  011f8	e59d0000	 ldr         r0, [sp]
  011fc	eb000000	 bl          |?UpdateOpm@@YAHK@Z|
  01200		 |$LN5@DVFS_Close|

; 661  :         }
; 662  :        
; 663  :     // remove any associated callbacks
; 664  :     for (iter = s_CallbackList.begin(); iter != s_CallbackList.end(); ++iter)

  01200	e28d1010	 add         r1, sp, #0x10
  01204	e59f00e0	 ldr         r0, [pc, #0xE0]
  01208	eb000000	 bl          |?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  0120c	e58d0028	 str         r0, [sp, #0x28]
  01210	e59d1028	 ldr         r1, [sp, #0x28]
  01214	e28d0008	 add         r0, sp, #8
  01218	e3a02004	 mov         r2, #4
  0121c	eb000000	 bl          memcpy
  01220	ea000001	 b           |$LN4@DVFS_Close|
  01224		 |$LN3@DVFS_Close|
  01224	e28d0008	 add         r0, sp, #8
  01228	eb000000	 bl          |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ|
  0122c		 |$LN4@DVFS_Close|
  0122c	e28d1014	 add         r1, sp, #0x14
  01230	e59f00b4	 ldr         r0, [pc, #0xB4]
  01234	eb000000	 bl          |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  01238	e58d002c	 str         r0, [sp, #0x2C]
  0123c	e59d102c	 ldr         r1, [sp, #0x2C]
  01240	e28d0008	 add         r0, sp, #8
  01244	eb000000	 bl          |??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|
  01248	e5cd0030	 strb        r0, [sp, #0x30]
  0124c	e5dd3030	 ldrb        r3, [sp, #0x30]
  01250	e3530000	 cmp         r3, #0
  01254	0a000017	 beq         |$LN2@DVFS_Close|

; 665  :         {
; 666  :         if ((*iter)->hConstraintContext == hConstraintContext)

  01258	e28d0008	 add         r0, sp, #8
  0125c	eb000000	 bl          |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|
  01260	e58d0034	 str         r0, [sp, #0x34]
  01264	e59d3034	 ldr         r3, [sp, #0x34]
  01268	e5933000	 ldr         r3, [r3]
  0126c	e283300c	 add         r3, r3, #0xC
  01270	e5932000	 ldr         r2, [r3]
  01274	e59d3044	 ldr         r3, [sp, #0x44]
  01278	e1520003	 cmp         r2, r3
  0127c	1a00000c	 bne         |$LN1@DVFS_Close|

; 667  :             {
; 668  :             // free resources
; 669  :             LocalFree(*iter);

  01280	e28d0008	 add         r0, sp, #8
  01284	eb000000	 bl          |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|
  01288	e58d0038	 str         r0, [sp, #0x38]
  0128c	e59d3038	 ldr         r3, [sp, #0x38]
  01290	e5930000	 ldr         r0, [r3]
  01294	eb000000	 bl          LocalFree

; 670  :             s_CallbackList.erase(iter);

  01298	e59d2008	 ldr         r2, [sp, #8]
  0129c	e28d1018	 add         r1, sp, #0x18
  012a0	e59f0044	 ldr         r0, [pc, #0x44]
  012a4	eb000000	 bl          |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z|

; 671  :             rc = TRUE;

  012a8	e3a03001	 mov         r3, #1
  012ac	e58d3004	 str         r3, [sp, #4]

; 672  :             break;

  012b0	ea000000	 b           |$LN2@DVFS_Close|
  012b4		 |$LN1@DVFS_Close|

; 673  :             }
; 674  :         }

  012b4	eaffffda	 b           |$LN3@DVFS_Close|
  012b8		 |$LN2@DVFS_Close|

; 675  : 
; 676  :     s_IndexList.DeleteIndex(id);    

  012b8	e59d1000	 ldr         r1, [sp]
  012bc	e59f0024	 ldr         r0, [pc, #0x24]
  012c0	eb000000	 bl          |?DeleteIndex@?$IndexList@K@@QAAXK@Z|

; 677  :     Unlock();

  012c4	eb000000	 bl          |?Unlock@@YAXXZ|

; 678  :     
; 679  :     
; 680  :     rc = TRUE;

  012c8	e3a03001	 mov         r3, #1
  012cc	e58d3004	 str         r3, [sp, #4]
  012d0		 |$LN7@DVFS_Close|
  012d0		 |$LN9@DVFS_Close|
  012d0		 |$cleanUp$40170|

; 681  : cleanUp:    
; 682  :     return rc;

  012d0	e59d3004	 ldr         r3, [sp, #4]
  012d4	e58d301c	 str         r3, [sp, #0x1C]

; 683  : } 

  012d8	e59d001c	 ldr         r0, [sp, #0x1C]
  012dc	e28dd03c	 add         sp, sp, #0x3C
  012e0	e89d6000	 ldmia       sp, {sp, lr}
  012e4	e12fff1e	 bx          lr
  012e8		 |$LN16@DVFS_Close|
  012e8		 |$LN17@DVFS_Close|
  012e8	00000000	 DCD         |s_IndexList|
  012ec		 |$LN18@DVFS_Close|
  012ec	00000000	 DCD         |s_CallbackList|
  012f0		 |$LN19@DVFS_Close|
  012f0	00000000	 DCD         |s_OpmInfo|
  012f4		 |$M41099|

			 ENDP  ; |?DVFS_CloseConstraint@@YAHPAX@Z|, DVFS_CloseConstraint

	EXPORT	|?push_back@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAXABQAUDVFSCallbackInfo_t@@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::push_back
	EXPORT	|?DVFS_InsertConstraintCallback@@YAPAXPAX00I0@Z| ; DVFS_InsertConstraintCallback
	IMPORT	|LocalAlloc|

  00058			 AREA	 |.pdata|, PDATA
|$T41111| DCD	|$LN11@DVFS_Inser|
	DCD	0x40004504
; Function compile flags: /Odtp

  012f4			 AREA	 |.text|, CODE, ARM

  012f4		 |?DVFS_InsertConstraintCallback@@YAPAXPAX00I0@Z| PROC ; DVFS_InsertConstraintCallback

; 699  : {

  012f4		 |$LN11@DVFS_Inser|
  012f4	e1a0c00d	 mov         r12, sp
  012f8	e92d000f	 stmdb       sp!, {r0 - r3}
  012fc	e92d5000	 stmdb       sp!, {r12, lr}
  01300	e24dd020	 sub         sp, sp, #0x20
  01304		 |$M41108|

; 700  :     HANDLE rc = NULL;

  01304	e3a03000	 mov         r3, #0
  01308	e58d3004	 str         r3, [sp, #4]

; 701  :     DWORD *pDataNode;
; 702  :     DWORD id = (DWORD)hConstraintContext - 1;

  0130c	e59d3028	 ldr         r3, [sp, #0x28]
  01310	e2433001	 sub         r3, r3, #1
  01314	e58d3000	 str         r3, [sp]

; 703  :     DVFSCallbackInfo_t *pCallbackInfo;
; 704  : 
; 705  :     UNREFERENCED_PARAMETER(size);
; 706  :     UNREFERENCED_PARAMETER(pParam);
; 707  :     // validate
; 708  :     if (id > s_IndexList.MaxIndex()) goto cleanUp;

  01318	e59f00e4	 ldr         r0, [pc, #0xE4]
  0131c	eb000000	 bl          |?MaxIndex@?$IndexList@K@@QAAKXZ|
  01320	e58d0014	 str         r0, [sp, #0x14]
  01324	e59d2000	 ldr         r2, [sp]
  01328	e59d3014	 ldr         r3, [sp, #0x14]
  0132c	e1520003	 cmp         r2, r3
  01330	9a000001	 bls         |$LN6@DVFS_Inser|
  01334	ea00002b	 b           |$LN5@DVFS_Inser|
  01338	ea00002a	 b           |$cleanUp$40197|
  0133c		 |$LN6@DVFS_Inser|

; 709  : 
; 710  :     // get data node
; 711  :     pDataNode = s_IndexList.GetIndex(id);

  0133c	e59d1000	 ldr         r1, [sp]
  01340	e59f00bc	 ldr         r0, [pc, #0xBC]
  01344	eb000000	 bl          |?GetIndex@?$IndexList@K@@QAAPAKK@Z|
  01348	e58d0018	 str         r0, [sp, #0x18]
  0134c	e59d3018	 ldr         r3, [sp, #0x18]
  01350	e58d300c	 str         r3, [sp, #0xC]

; 712  :     if (pDataNode == NULL) goto cleanUp;

  01354	e59d300c	 ldr         r3, [sp, #0xC]
  01358	e3530000	 cmp         r3, #0
  0135c	1a000001	 bne         |$LN4@DVFS_Inser|
  01360	ea000020	 b           |$LN3@DVFS_Inser|
  01364	ea00001f	 b           |$cleanUp$40197|
  01368		 |$LN4@DVFS_Inser|

; 713  : 
; 714  :     // allocate callback structure
; 715  :     pCallbackInfo = (DVFSCallbackInfo_t*)LocalAlloc(LPTR, sizeof(DVFSCallbackInfo_t));

  01368	e3a01014	 mov         r1, #0x14
  0136c	e3a00040	 mov         r0, #0x40
  01370	eb000000	 bl          LocalAlloc
  01374	e58d001c	 str         r0, [sp, #0x1C]
  01378	e59d301c	 ldr         r3, [sp, #0x1C]
  0137c	e58d3008	 str         r3, [sp, #8]

; 716  :     if (pCallbackInfo == NULL) goto cleanUp;

  01380	e59d3008	 ldr         r3, [sp, #8]
  01384	e3530000	 cmp         r3, #0
  01388	1a000001	 bne         |$LN2@DVFS_Inser|
  0138c	ea000015	 b           |$LN1@DVFS_Inser|
  01390	ea000014	 b           |$cleanUp$40197|
  01394		 |$LN2@DVFS_Inser|

; 717  : 
; 718  :     // initialize structure
; 719  :     pCallbackInfo->fnCallback = (ConstraintCallback)pCallback;

  01394	e59d3008	 ldr         r3, [sp, #8]
  01398	e2832004	 add         r2, r3, #4
  0139c	e59d302c	 ldr         r3, [sp, #0x2C]
  013a0	e5823000	 str         r3, [r2]

; 720  :     pCallbackInfo->hConstraintContext = hConstraintContext;

  013a4	e59d3008	 ldr         r3, [sp, #8]
  013a8	e283200c	 add         r2, r3, #0xC
  013ac	e59d3028	 ldr         r3, [sp, #0x28]
  013b0	e5823000	 str         r3, [r2]

; 721  :     pCallbackInfo->hCallbackContext = pCallbackInfo;

  013b4	e59d3008	 ldr         r3, [sp, #8]
  013b8	e2832010	 add         r2, r3, #0x10
  013bc	e59d3008	 ldr         r3, [sp, #8]
  013c0	e5823000	 str         r3, [r2]

; 722  :     pCallbackInfo->hRefContext = hRefContext;

  013c4	e59d3008	 ldr         r3, [sp, #8]
  013c8	e2832008	 add         r2, r3, #8
  013cc	e59d3038	 ldr         r3, [sp, #0x38]
  013d0	e5823000	 str         r3, [r2]

; 723  :     
; 724  :     // insert into callback list
; 725  :     Lock();

  013d4	eb000000	 bl          |?Lock@@YAXXZ|

; 726  :     s_CallbackList.push_back(pCallbackInfo);

  013d8	e28d1008	 add         r1, sp, #8
  013dc	e59f001c	 ldr         r0, [pc, #0x1C]
  013e0	eb000000	 bl          |?push_back@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAXABQAUDVFSCallbackInfo_t@@@Z|

; 727  :     Unlock();

  013e4	eb000000	 bl          |?Unlock@@YAXXZ|
  013e8		 |$LN1@DVFS_Inser|
  013e8		 |$LN3@DVFS_Inser|
  013e8		 |$LN5@DVFS_Inser|
  013e8		 |$cleanUp$40197|

; 728  :     
; 729  : cleanUp:
; 730  :     return rc;

  013e8	e59d3004	 ldr         r3, [sp, #4]
  013ec	e58d3010	 str         r3, [sp, #0x10]

; 731  : } 

  013f0	e59d0010	 ldr         r0, [sp, #0x10]
  013f4	e28dd020	 add         sp, sp, #0x20
  013f8	e89d6000	 ldmia       sp, {sp, lr}
  013fc	e12fff1e	 bx          lr
  01400		 |$LN12@DVFS_Inser|
  01400		 |$LN13@DVFS_Inser|
  01400	00000000	 DCD         |s_CallbackList|
  01404		 |$LN14@DVFS_Inser|
  01404	00000000	 DCD         |s_IndexList|
  01408		 |$M41109|

			 ENDP  ; |?DVFS_InsertConstraintCallback@@YAPAXPAX00I0@Z|, DVFS_InsertConstraintCallback

	EXPORT	|?DVFS_RemoveConstraintCallback@@YAHPAX@Z| ; DVFS_RemoveConstraintCallback

  00060			 AREA	 |.pdata|, PDATA
|$T41123| DCD	|$LN9@DVFS_Remov|
	DCD	0x40003f04
; Function compile flags: /Odtp

  01408			 AREA	 |.text|, CODE, ARM

  01408		 |?DVFS_RemoveConstraintCallback@@YAHPAX@Z| PROC ; DVFS_RemoveConstraintCallback

; 743  : {

  01408		 |$LN9@DVFS_Remov|
  01408	e1a0c00d	 mov         r12, sp
  0140c	e92d0001	 stmdb       sp!, {r0}
  01410	e92d5000	 stmdb       sp!, {r12, lr}
  01414	e24dd02c	 sub         sp, sp, #0x2C
  01418		 |$M41120|

; 744  :     BOOL rc = FALSE;

  01418	e3a03000	 mov         r3, #0
  0141c	e58d3000	 str         r3, [sp]

; 745  :     list<DVFSCallbackInfo_t*>::iterator iter;

  01420	e28d0004	 add         r0, sp, #4
  01424	eb000000	 bl          |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|

; 746  :     
; 747  :     // find entry with matching callback info
; 748  :     Lock();

  01428	eb000000	 bl          |?Lock@@YAXXZ|

; 749  :     for (iter = s_CallbackList.begin(); iter != s_CallbackList.end(); ++iter)

  0142c	e28d1008	 add         r1, sp, #8
  01430	e59f00c8	 ldr         r0, [pc, #0xC8]
  01434	eb000000	 bl          |?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  01438	e58d0018	 str         r0, [sp, #0x18]
  0143c	e59d1018	 ldr         r1, [sp, #0x18]
  01440	e28d0004	 add         r0, sp, #4
  01444	e3a02004	 mov         r2, #4
  01448	eb000000	 bl          memcpy
  0144c	ea000001	 b           |$LN4@DVFS_Remov|
  01450		 |$LN3@DVFS_Remov|
  01450	e28d0004	 add         r0, sp, #4
  01454	eb000000	 bl          |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ|
  01458		 |$LN4@DVFS_Remov|
  01458	e28d100c	 add         r1, sp, #0xC
  0145c	e59f009c	 ldr         r0, [pc, #0x9C]
  01460	eb000000	 bl          |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  01464	e58d001c	 str         r0, [sp, #0x1C]
  01468	e59d101c	 ldr         r1, [sp, #0x1C]
  0146c	e28d0004	 add         r0, sp, #4
  01470	eb000000	 bl          |??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|
  01474	e5cd0020	 strb        r0, [sp, #0x20]
  01478	e5dd3020	 ldrb        r3, [sp, #0x20]
  0147c	e3530000	 cmp         r3, #0
  01480	0a000017	 beq         |$LN2@DVFS_Remov|

; 750  :         {
; 751  :         if ((*iter)->hCallbackContext == hConstraintCallback)

  01484	e28d0004	 add         r0, sp, #4
  01488	eb000000	 bl          |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|
  0148c	e58d0024	 str         r0, [sp, #0x24]
  01490	e59d3024	 ldr         r3, [sp, #0x24]
  01494	e5933000	 ldr         r3, [r3]
  01498	e2833010	 add         r3, r3, #0x10
  0149c	e5932000	 ldr         r2, [r3]
  014a0	e59d3034	 ldr         r3, [sp, #0x34]
  014a4	e1520003	 cmp         r2, r3
  014a8	1a00000c	 bne         |$LN1@DVFS_Remov|

; 752  :             {
; 753  :             // free resources
; 754  :             LocalFree(*iter);

  014ac	e28d0004	 add         r0, sp, #4
  014b0	eb000000	 bl          |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|
  014b4	e58d0028	 str         r0, [sp, #0x28]
  014b8	e59d3028	 ldr         r3, [sp, #0x28]
  014bc	e5930000	 ldr         r0, [r3]
  014c0	eb000000	 bl          LocalFree

; 755  :             s_CallbackList.erase(iter);

  014c4	e59d2004	 ldr         r2, [sp, #4]
  014c8	e28d1010	 add         r1, sp, #0x10
  014cc	e59f002c	 ldr         r0, [pc, #0x2C]
  014d0	eb000000	 bl          |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z|

; 756  :             rc = TRUE;

  014d4	e3a03001	 mov         r3, #1
  014d8	e58d3000	 str         r3, [sp]

; 757  :             break;

  014dc	ea000000	 b           |$LN2@DVFS_Remov|
  014e0		 |$LN1@DVFS_Remov|

; 758  :             }
; 759  :         }

  014e0	eaffffda	 b           |$LN3@DVFS_Remov|
  014e4		 |$LN2@DVFS_Remov|

; 760  :     Unlock();

  014e4	eb000000	 bl          |?Unlock@@YAXXZ|

; 761  : 
; 762  :     return rc;

  014e8	e59d3000	 ldr         r3, [sp]
  014ec	e58d3014	 str         r3, [sp, #0x14]

; 763  : } 

  014f0	e59d0014	 ldr         r0, [sp, #0x14]
  014f4	e28dd02c	 add         sp, sp, #0x2C
  014f8	e89d6000	 ldmia       sp, {sp, lr}
  014fc	e12fff1e	 bx          lr
  01500		 |$LN10@DVFS_Remov|
  01500		 |$LN11@DVFS_Remov|
  01500	00000000	 DCD         |s_CallbackList|
  01504		 |$M41121|

			 ENDP  ; |?DVFS_RemoveConstraintCallback@@YAHPAX@Z|, DVFS_RemoveConstraintCallback

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T41131| DCD	|$LN5@MaxIndex|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?MaxIndex@?$IndexList@K@@QAAKXZ| PROC	; IndexList<unsigned long>::MaxIndex

; 76   :     {

  00000		 |$LN5@MaxIndex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41128|

; 77   :         return m_maxIndex;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833088	 add         r3, r3, #0x88
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 78   :     }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M41129|

			 ENDP  ; |?MaxIndex@?$IndexList@K@@QAAKXZ|, IndexList<unsigned long>::MaxIndex

	IMPORT	|??2@YAPAXI@Z|				; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T41140| DCD	|$LN12@NewIndex|
	DCD	0x40006204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?NewIndex@?$IndexList@K@@QAAHPAPAKPAK@Z| PROC ; IndexList<unsigned long>::NewIndex

; 81   :     {

  00000		 |$LN12@NewIndex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd020	 sub         sp, sp, #0x20
  00010		 |$M41137|

; 82   :         DWORD ffMask;
; 83   :         INT index = 0;        

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 84   :         BOOL rc = FALSE;        

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3000	 str         r3, [sp]

; 85   :         IndexData *pCurrent;
; 86   : 
; 87   :         // find emtpy chunk
; 88   :         pCurrent = &m_Head;

  00020	e59d3028	 ldr         r3, [sp, #0x28]
  00024	e58d300c	 str         r3, [sp, #0xC]
  00028		 |$LN7@NewIndex|

; 89   :         while (pCurrent->ffMask == (-1))

  00028	e59d300c	 ldr         r3, [sp, #0xC]
  0002c	e2833004	 add         r3, r3, #4
  00030	e5933000	 ldr         r3, [r3]
  00034	e3730001	 cmn         r3, #1
  00038	1a000024	 bne         |$LN6@NewIndex|

; 90   :             {
; 91   :             if (pCurrent->pNext == NULL)

  0003c	e59d300c	 ldr         r3, [sp, #0xC]
  00040	e5933000	 ldr         r3, [r3]
  00044	e3530000	 cmp         r3, #0
  00048	1a000019	 bne         |$LN5@NewIndex|

; 92   :                 {
; 93   :                 IndexData *pNew = new IndexData;

  0004c	e3a00088	 mov         r0, #0x88
  00050	eb000000	 bl          |??2@YAPAXI@Z|
  00054	e58d001c	 str         r0, [sp, #0x1C]
  00058	e59d301c	 ldr         r3, [sp, #0x1C]
  0005c	e58d3014	 str         r3, [sp, #0x14]
  00060	e59d3014	 ldr         r3, [sp, #0x14]
  00064	e58d3010	 str         r3, [sp, #0x10]

; 94   :                 if (pNew == NULL) goto cleanUp;

  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e3530000	 cmp         r3, #0
  00070	1a000001	 bne         |$LN4@NewIndex|
  00074	ea00003d	 b           |$LN3@NewIndex|
  00078	ea00003c	 b           |$cleanUp$40255|
  0007c		 |$LN4@NewIndex|

; 95   : 
; 96   :                 memset(pNew, 0, sizeof(IndexData));

  0007c	e3a02088	 mov         r2, #0x88
  00080	e3a01000	 mov         r1, #0
  00084	e59d0010	 ldr         r0, [sp, #0x10]
  00088	eb000000	 bl          memset

; 97   :                 pCurrent->pNext = pNew;

  0008c	e59d2010	 ldr         r2, [sp, #0x10]
  00090	e59d300c	 ldr         r3, [sp, #0xC]
  00094	e5832000	 str         r2, [r3]

; 98   :                 m_maxIndex += INDEXED_CHUNK_SIZE;

  00098	e59d3028	 ldr         r3, [sp, #0x28]
  0009c	e2833088	 add         r3, r3, #0x88
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e2832020	 add         r2, r3, #0x20
  000a8	e59d3028	 ldr         r3, [sp, #0x28]
  000ac	e2833088	 add         r3, r3, #0x88
  000b0	e5832000	 str         r2, [r3]
  000b4		 |$LN5@NewIndex|

; 99   :                 }
; 100  : 
; 101  :             index += INDEXED_CHUNK_SIZE;

  000b4	e59d3004	 ldr         r3, [sp, #4]
  000b8	e2833020	 add         r3, r3, #0x20
  000bc	e58d3004	 str         r3, [sp, #4]

; 102  :             pCurrent = pCurrent->pNext;

  000c0	e59d300c	 ldr         r3, [sp, #0xC]
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e58d300c	 str         r3, [sp, #0xC]

; 103  :             }

  000cc	eaffffd5	 b           |$LN7@NewIndex|
  000d0		 |$LN6@NewIndex|

; 104  : 
; 105  :         // get index within chunk
; 106  :         ffMask = pCurrent->ffMask;

  000d0	e59d300c	 ldr         r3, [sp, #0xC]
  000d4	e2833004	 add         r3, r3, #4
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e58d3008	 str         r3, [sp, #8]
  000e0		 |$LN2@NewIndex|

; 107  :         while ((ffMask & 1) == 1)

  000e0	e59d3008	 ldr         r3, [sp, #8]
  000e4	e2033001	 and         r3, r3, #1
  000e8	e3530001	 cmp         r3, #1
  000ec	1a000006	 bne         |$LN1@NewIndex|

; 108  :             {
; 109  :             index++;

  000f0	e59d3004	 ldr         r3, [sp, #4]
  000f4	e2833001	 add         r3, r3, #1
  000f8	e58d3004	 str         r3, [sp, #4]

; 110  :             ffMask >>= 1;

  000fc	e59d3008	 ldr         r3, [sp, #8]
  00100	e1a030a3	 mov         r3, r3, lsr #1
  00104	e58d3008	 str         r3, [sp, #8]

; 111  :             }

  00108	eafffff4	 b           |$LN2@NewIndex|
  0010c		 |$LN1@NewIndex|

; 112  : 
; 113  :         // copy empty slot info and mark as reserved
; 114  :         *pId = index;

  0010c	e59d2004	 ldr         r2, [sp, #4]
  00110	e59d3030	 ldr         r3, [sp, #0x30]
  00114	e5832000	 str         r2, [r3]

; 115  :         *ppType = &(pCurrent->rgData[index & 0x1F]);

  00118	e59d300c	 ldr         r3, [sp, #0xC]
  0011c	e2831008	 add         r1, r3, #8
  00120	e59d3004	 ldr         r3, [sp, #4]
  00124	e203201f	 and         r2, r3, #0x1F
  00128	e3a03004	 mov         r3, #4
  0012c	e0030392	 mul         r3, r2, r3
  00130	e0812003	 add         r2, r1, r3
  00134	e59d302c	 ldr         r3, [sp, #0x2C]
  00138	e5832000	 str         r2, [r3]

; 116  :         pCurrent->ffMask |= (1 << (index & 0x1F));

  0013c	e59d300c	 ldr         r3, [sp, #0xC]
  00140	e2831004	 add         r1, r3, #4
  00144	e59d3004	 ldr         r3, [sp, #4]
  00148	e203201f	 and         r2, r3, #0x1F
  0014c	e3a03001	 mov         r3, #1
  00150	e1a02213	 mov         r2, r3, lsl r2
  00154	e5913000	 ldr         r3, [r1]
  00158	e1832002	 orr         r2, r3, r2
  0015c	e59d300c	 ldr         r3, [sp, #0xC]
  00160	e2833004	 add         r3, r3, #4
  00164	e5832000	 str         r2, [r3]

; 117  : 
; 118  :         rc = TRUE;

  00168	e3a03001	 mov         r3, #1
  0016c	e58d3000	 str         r3, [sp]
  00170		 |$LN3@NewIndex|
  00170		 |$cleanUp$40255|

; 119  :     cleanUp:
; 120  :         return rc;

  00170	e59d3000	 ldr         r3, [sp]
  00174	e58d3018	 str         r3, [sp, #0x18]

; 121  :     }

  00178	e59d0018	 ldr         r0, [sp, #0x18]
  0017c	e28dd020	 add         sp, sp, #0x20
  00180	e89d6000	 ldmia       sp, {sp, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$M41138|

			 ENDP  ; |?NewIndex@?$IndexList@K@@QAAHPAPAKPAK@Z|, IndexList<unsigned long>::NewIndex


  00000			 AREA	 |.pdata|, PDATA
|$T41147| DCD	|$LN8@DeleteInde|
	DCD	0x40002604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?DeleteIndex@?$IndexList@K@@QAAXK@Z| PROC ; IndexList<unsigned long>::DeleteIndex

; 124  :     {

  00000		 |$LN8@DeleteInde|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41144|

; 125  :         IndexData *pCurrent;
; 126  :         DWORD chunkId = id >> 5;

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e1a032a3	 mov         r3, r3, lsr #5
  00018	e58d3000	 str         r3, [sp]

; 127  : 
; 128  :         // find chunk
; 129  :         pCurrent = &m_Head;

  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e58d3004	 str         r3, [sp, #4]
  00024		 |$LN3@DeleteInde|

; 130  :         while (chunkId)

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000a	 beq         |$LN2@DeleteInde|

; 131  :             {
; 132  :             --chunkId;

  00030	e59d3000	 ldr         r3, [sp]
  00034	e2433001	 sub         r3, r3, #1
  00038	e58d3000	 str         r3, [sp]

; 133  :             pCurrent = pCurrent->pNext;

  0003c	e59d3004	 ldr         r3, [sp, #4]
  00040	e5933000	 ldr         r3, [r3]
  00044	e58d3004	 str         r3, [sp, #4]

; 134  :             if (pCurrent == NULL) return;            

  00048	e59d3004	 ldr         r3, [sp, #4]
  0004c	e3530000	 cmp         r3, #0
  00050	1a000000	 bne         |$LN1@DeleteInde|
  00054	ea00000c	 b           |$LN4@DeleteInde|
  00058		 |$LN1@DeleteInde|

; 135  :             }

  00058	eafffff1	 b           |$LN3@DeleteInde|
  0005c		 |$LN2@DeleteInde|

; 136  : 
; 137  :         // clear mask
; 138  :         pCurrent->ffMask &= ~(1 << (id & 0x1F));

  0005c	e59d3004	 ldr         r3, [sp, #4]
  00060	e2831004	 add         r1, r3, #4
  00064	e59d3014	 ldr         r3, [sp, #0x14]
  00068	e203201f	 and         r2, r3, #0x1F
  0006c	e3a03001	 mov         r3, #1
  00070	e1a03213	 mov         r3, r3, lsl r2
  00074	e1e02003	 mvn         r2, r3
  00078	e5913000	 ldr         r3, [r1]
  0007c	e0032002	 and         r2, r3, r2
  00080	e59d3004	 ldr         r3, [sp, #4]
  00084	e2833004	 add         r3, r3, #4
  00088	e5832000	 str         r2, [r3]
  0008c		 |$LN4@DeleteInde|

; 139  :     }

  0008c	e28dd008	 add         sp, sp, #8
  00090	e89d6000	 ldmia       sp, {sp, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M41145|

			 ENDP  ; |?DeleteIndex@?$IndexList@K@@QAAXK@Z|, IndexList<unsigned long>::DeleteIndex


  00000			 AREA	 |.pdata|, PDATA
|$T41157| DCD	|$LN10@GetIndex|
	DCD	0x40003304
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?GetIndex@?$IndexList@K@@QAAPAKK@Z| PROC ; IndexList<unsigned long>::GetIndex

; 142  :     {

  00000		 |$LN10@GetIndex|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M41154|

; 143  :         IndexData *pCurrent;
; 144  :         DWORD chunkId = id >> 5;

  00010	e59d301c	 ldr         r3, [sp, #0x1C]
  00014	e1a032a3	 mov         r3, r3, lsr #5
  00018	e58d3000	 str         r3, [sp]

; 145  : 
; 146  :         // find chunk
; 147  :         pCurrent = &m_Head;

  0001c	e59d3018	 ldr         r3, [sp, #0x18]
  00020	e58d3004	 str         r3, [sp, #4]
  00024		 |$LN3@GetIndex|

; 148  :         while (chunkId)

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3530000	 cmp         r3, #0
  0002c	0a00000c	 beq         |$LN2@GetIndex|

; 149  :             {
; 150  :             --chunkId;

  00030	e59d3000	 ldr         r3, [sp]
  00034	e2433001	 sub         r3, r3, #1
  00038	e58d3000	 str         r3, [sp]

; 151  :             pCurrent = pCurrent->pNext;

  0003c	e59d3004	 ldr         r3, [sp, #4]
  00040	e5933000	 ldr         r3, [r3]
  00044	e58d3004	 str         r3, [sp, #4]

; 152  :             if (pCurrent == NULL) return NULL;   

  00048	e59d3004	 ldr         r3, [sp, #4]
  0004c	e3530000	 cmp         r3, #0
  00050	1a000002	 bne         |$LN1@GetIndex|
  00054	e3a03000	 mov         r3, #0
  00058	e58d3008	 str         r3, [sp, #8]
  0005c	ea000016	 b           |$LN4@GetIndex|
  00060		 |$LN1@GetIndex|

; 153  :             }

  00060	eaffffef	 b           |$LN3@GetIndex|
  00064		 |$LN2@GetIndex|

; 154  : 
; 155  :         // clear mask
; 156  :         return (pCurrent->ffMask & (1 << (id & 0x1F))) ? 
; 157  :                     &(pCurrent->rgData[id & 0x1F]) : NULL;

  00064	e59d3004	 ldr         r3, [sp, #4]
  00068	e2831004	 add         r1, r3, #4
  0006c	e59d301c	 ldr         r3, [sp, #0x1C]
  00070	e203201f	 and         r2, r3, #0x1F
  00074	e3a03001	 mov         r3, #1
  00078	e1a02213	 mov         r2, r3, lsl r2
  0007c	e5913000	 ldr         r3, [r1]
  00080	e1130002	 tst         r3, r2
  00084	0a000008	 beq         |$LN6@GetIndex|
  00088	e59d3004	 ldr         r3, [sp, #4]
  0008c	e2831008	 add         r1, r3, #8
  00090	e59d301c	 ldr         r3, [sp, #0x1C]
  00094	e203201f	 and         r2, r3, #0x1F
  00098	e3a03004	 mov         r3, #4
  0009c	e0030392	 mul         r3, r2, r3
  000a0	e0813003	 add         r3, r1, r3
  000a4	e58d300c	 str         r3, [sp, #0xC]
  000a8	ea000001	 b           |$LN7@GetIndex|
  000ac		 |$LN6@GetIndex|
  000ac	e3a03000	 mov         r3, #0
  000b0	e58d300c	 str         r3, [sp, #0xC]
  000b4		 |$LN7@GetIndex|
  000b4	e59d300c	 ldr         r3, [sp, #0xC]
  000b8	e58d3008	 str         r3, [sp, #8]
  000bc		 |$LN4@GetIndex|

; 158  :     }

  000bc	e59d0008	 ldr         r0, [sp, #8]
  000c0	e28dd010	 add         sp, sp, #0x10
  000c4	e89d6000	 ldmia       sp, {sp, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$M41155|

			 ENDP  ; |?GetIndex@?$IndexList@K@@QAAPAKK@Z|, IndexList<unsigned long>::GetIndex

	EXPORT	|??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator
	EXPORT	|?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Next
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41165| DCD	|$LN5@begin|
	DCD	0x40001304
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::begin

; 180  : 		{return (iterator(_Acc::_Next(_Head))); }

  00000		 |$LN5@begin|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41162|
  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833004	 add         r3, r3, #4
  00018	e5930000	 ldr         r0, [r3]
  0001c	eb000000	 bl          |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00020	e58d0004	 str         r0, [sp, #4]
  00024	e59d3004	 ldr         r3, [sp, #4]
  00028	e5931000	 ldr         r1, [r3]
  0002c	e59d0014	 ldr         r0, [sp, #0x14]
  00030	eb000000	 bl          |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z|
  00034	e59d3014	 ldr         r3, [sp, #0x14]
  00038	e58d3000	 str         r3, [sp]
  0003c	e59d0000	 ldr         r0, [sp]
  00040	e28dd008	 add         sp, sp, #8
  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M41163|

			 ENDP  ; |?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::begin


  00000			 AREA	 |.pdata|, PDATA
|$T41173| DCD	|$LN5@end|
	DCD	0x40000f04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::end

; 184  : 		{return (iterator(_Head)); }

  00000		 |$LN5@end|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41170|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e5931000	 ldr         r1, [r3]
  0001c	e59d0010	 ldr         r0, [sp, #0x10]
  00020	eb000000	 bl          |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z|
  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e58d3000	 str         r3, [sp]
  0002c	e59d0000	 ldr         r0, [sp]
  00030	e28dd004	 add         sp, sp, #4
  00034	e89d6000	 ldmia       sp, {sp, lr}
  00038	e12fff1e	 bx          lr
  0003c		 |$M41171|

			 ENDP  ; |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::end

	EXPORT	|?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::insert

  00000			 AREA	 |.pdata|, PDATA
|$T41182| DCD	|$LN5@push_back|
	DCD	0x40001304
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?push_back@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAXABQAUDVFSCallbackInfo_t@@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::push_back

; 222  : 		{insert(end(), _X); }

  00000		 |$LN5@push_back|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M41179|
  00010	e28d1000	 add         r1, sp, #0
  00014	e59d0018	 ldr         r0, [sp, #0x18]
  00018	eb000000	 bl          |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  0001c	e58d0008	 str         r0, [sp, #8]
  00020	e59d301c	 ldr         r3, [sp, #0x1C]
  00024	e59d2008	 ldr         r2, [sp, #8]
  00028	e58d200c	 str         r2, [sp, #0xC]
  0002c	e59d200c	 ldr         r2, [sp, #0xC]
  00030	e5922000	 ldr         r2, [r2]
  00034	e28d1004	 add         r1, sp, #4
  00038	e59d0018	 ldr         r0, [sp, #0x18]
  0003c	eb000000	 bl          |?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z|
  00040	e28dd010	 add         sp, sp, #0x10
  00044	e89d6000	 ldmia       sp, {sp, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M41180|

			 ENDP  ; |?push_back@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAXABQAUDVFSCallbackInfo_t@@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::push_back

	EXPORT	|?_Freenode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAXPAU_Node@12@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Freenode
	EXPORT	|?destroy@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@@Z| ; std::allocator<DVFSCallbackInfo_t *>::destroy
	EXPORT	|?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Value
	EXPORT	|?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Prev
	EXPORT	|?_Mynode@const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAPAU_Node@23@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::_Mynode
	EXPORT	|??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AV012@H@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

  00000			 AREA	 |.pdata|, PDATA
|$T41191| DCD	|$LN5@erase|
	DCD	0x40004404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase

; 249  : 		{_Nodeptr _S = (_P++)._Mynode();

  00000		 |$LN5@erase|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd030	 sub         sp, sp, #0x30
  00010		 |$M41188|
  00010	e3a02000	 mov         r2, #0
  00014	e28d1004	 add         r1, sp, #4
  00018	e28d0040	 add         r0, sp, #0x40
  0001c	eb000000	 bl          |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AV012@H@Z|
  00020	e58d000c	 str         r0, [sp, #0xC]
  00024	e59d000c	 ldr         r0, [sp, #0xC]
  00028	eb000000	 bl          |?_Mynode@const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAPAU_Node@23@XZ|
  0002c	e58d0010	 str         r0, [sp, #0x10]
  00030	e59d3010	 ldr         r3, [sp, #0x10]
  00034	e58d3000	 str         r3, [sp]

; 250  : 		_Acc::_Next(_Acc::_Prev(_S)) = _Acc::_Next(_S);

  00038	e59d0000	 ldr         r0, [sp]
  0003c	eb000000	 bl          |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00040	e58d0014	 str         r0, [sp, #0x14]
  00044	e59d0000	 ldr         r0, [sp]
  00048	eb000000	 bl          |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  0004c	e58d0018	 str         r0, [sp, #0x18]
  00050	e59d3018	 ldr         r3, [sp, #0x18]
  00054	e5930000	 ldr         r0, [r3]
  00058	eb000000	 bl          |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  0005c	e58d001c	 str         r0, [sp, #0x1C]
  00060	e59d3014	 ldr         r3, [sp, #0x14]
  00064	e5932000	 ldr         r2, [r3]
  00068	e59d301c	 ldr         r3, [sp, #0x1C]
  0006c	e5832000	 str         r2, [r3]

; 251  : 		_Acc::_Prev(_Acc::_Next(_S)) = _Acc::_Prev(_S);

  00070	e59d0000	 ldr         r0, [sp]
  00074	eb000000	 bl          |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00078	e58d0020	 str         r0, [sp, #0x20]
  0007c	e59d0000	 ldr         r0, [sp]
  00080	eb000000	 bl          |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00084	e58d0024	 str         r0, [sp, #0x24]
  00088	e59d3024	 ldr         r3, [sp, #0x24]
  0008c	e5930000	 ldr         r0, [r3]
  00090	eb000000	 bl          |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00094	e58d0028	 str         r0, [sp, #0x28]
  00098	e59d3020	 ldr         r3, [sp, #0x20]
  0009c	e5932000	 ldr         r2, [r3]
  000a0	e59d3028	 ldr         r3, [sp, #0x28]
  000a4	e5832000	 str         r2, [r3]

; 252  : 		allocator.destroy(&_Acc::_Value(_S));

  000a8	e59d0000	 ldr         r0, [sp]
  000ac	eb000000	 bl          |?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z|
  000b0	e58d002c	 str         r0, [sp, #0x2C]
  000b4	e59d102c	 ldr         r1, [sp, #0x2C]
  000b8	e59d0038	 ldr         r0, [sp, #0x38]
  000bc	eb000000	 bl          |?destroy@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@@Z|

; 253  : 		_Freenode(_S);

  000c0	e59d1000	 ldr         r1, [sp]
  000c4	e59d0038	 ldr         r0, [sp, #0x38]
  000c8	eb000000	 bl          |?_Freenode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAXPAU_Node@12@@Z|

; 254  : 		--_Size;

  000cc	e59d3038	 ldr         r3, [sp, #0x38]
  000d0	e2833008	 add         r3, r3, #8
  000d4	e5933000	 ldr         r3, [r3]
  000d8	e2432001	 sub         r2, r3, #1
  000dc	e59d3038	 ldr         r3, [sp, #0x38]
  000e0	e2833008	 add         r3, r3, #8
  000e4	e5832000	 str         r2, [r3]

; 255  : 		return (_P); }

  000e8	e59d003c	 ldr         r0, [sp, #0x3C]
  000ec	e28d1040	 add         r1, sp, #0x40
  000f0	e3a02004	 mov         r2, #4
  000f4	eb000000	 bl          memcpy
  000f8	e59d303c	 ldr         r3, [sp, #0x3C]
  000fc	e58d3008	 str         r3, [sp, #8]
  00100	e59d0008	 ldr         r0, [sp, #8]
  00104	e28dd030	 add         sp, sp, #0x30
  00108	e89d6000	 ldmia       sp, {sp, lr}
  0010c	e12fff1e	 bx          lr
  00110		 |$M41189|

			 ENDP  ; |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase

	EXPORT	|??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

  00000			 AREA	 |.pdata|, PDATA
|$T41199| DCD	|$LN5@iterator|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator

; 110  : 		iterator()

  00000		 |$LN5@iterator|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41196|
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|
  00018	e59d300c	 ldr         r3, [sp, #0xC]
  0001c	e58d3000	 str         r3, [sp]
  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M41197|

			 ENDP  ; |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator


  00000			 AREA	 |.pdata|, PDATA
|$T41207| DCD	|$LN5@operator|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator*

; 115  : 			{return (_Acc::_Value(_Ptr)); }

  00000		 |$LN5@operator|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41204|
  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e5930000	 ldr         r0, [r3]
  00018	eb000000	 bl          |?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z|
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]
  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M41205|

			 ENDP  ; |??Diterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAAAPAUDVFSCallbackInfo_t@@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator*


  00000			 AREA	 |.pdata|, PDATA
|$T41215| DCD	|$LN5@operator@2|
	DCD	0x40001204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

; 119  : 			{_Ptr = _Acc::_Next(_Ptr);

  00000		 |$LN5@operator@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41212|
  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e5930000	 ldr         r0, [r3]
  00018	eb000000	 bl          |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e5932000	 ldr         r2, [r3]
  00028	e59d3010	 ldr         r3, [sp, #0x10]
  0002c	e5832000	 str         r2, [r3]

; 120  : 			return (*this); }

  00030	e59d3010	 ldr         r3, [sp, #0x10]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d0000	 ldr         r0, [sp]
  0003c	e28dd008	 add         sp, sp, #8
  00040	e89d6000	 ldmia       sp, {sp, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M41213|

			 ENDP  ; |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

	EXPORT	|??8iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator==

  00000			 AREA	 |.pdata|, PDATA
|$T41225| DCD	|$LN7@operator@3|
	DCD	0x40001704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator!=

; 135  : 			{return (!(*this == _X)); }

  00000		 |$LN7@operator@3|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M41222|
  00010	e59d1018	 ldr         r1, [sp, #0x18]
  00014	e59d0014	 ldr         r0, [sp, #0x14]
  00018	eb000000	 bl          |??8iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|
  0001c	e5cd0004	 strb        r0, [sp, #4]
  00020	e5dd3004	 ldrb        r3, [sp, #4]
  00024	e3530000	 cmp         r3, #0
  00028	1a000002	 bne         |$LN3@operator@3|
  0002c	e3a03001	 mov         r3, #1
  00030	e58d3008	 str         r3, [sp, #8]
  00034	ea000001	 b           |$LN4@operator@3|
  00038		 |$LN3@operator@3|
  00038	e3a03000	 mov         r3, #0
  0003c	e58d3008	 str         r3, [sp, #8]
  00040		 |$LN4@operator@3|
  00040	e59d3008	 ldr         r3, [sp, #8]
  00044	e20330ff	 and         r3, r3, #0xFF
  00048	e5cd3000	 strb        r3, [sp]
  0004c	e5dd0000	 ldrb        r0, [sp]
  00050	e28dd00c	 add         sp, sp, #0xC
  00054	e89d6000	 ldmia       sp, {sp, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M41223|

			 ENDP  ; |??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator!=

	EXPORT	|?construct@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@ABQAU3@@Z| ; std::allocator<DVFSCallbackInfo_t *>::construct
	EXPORT	|?_Buynode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAPAU_Node@12@PAU312@0@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Buynode

  00000			 AREA	 |.pdata|, PDATA
|$T41233| DCD	|$LN5@insert|
	DCD	0x40003f04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::insert

; 232  : 		{_Nodeptr _S = _P._Mynode();

  00000		 |$LN5@insert|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd028	 sub         sp, sp, #0x28
  00010		 |$M41230|
  00010	e28d0038	 add         r0, sp, #0x38
  00014	eb000000	 bl          |?_Mynode@const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAPAU_Node@23@XZ|
  00018	e58d0008	 str         r0, [sp, #8]
  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e58d3000	 str         r3, [sp]

; 233  : 		_Acc::_Prev(_S) = _Buynode(_S, _Acc::_Prev(_S));

  00024	e59d0000	 ldr         r0, [sp]
  00028	eb000000	 bl          |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  0002c	e58d000c	 str         r0, [sp, #0xC]
  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e5932000	 ldr         r2, [r3]
  00038	e59d1000	 ldr         r1, [sp]
  0003c	e59d0030	 ldr         r0, [sp, #0x30]
  00040	eb000000	 bl          |?_Buynode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAPAU_Node@12@PAU312@0@Z|
  00044	e58d0010	 str         r0, [sp, #0x10]
  00048	e59d0000	 ldr         r0, [sp]
  0004c	eb000000	 bl          |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00050	e58d0014	 str         r0, [sp, #0x14]
  00054	e59d2010	 ldr         r2, [sp, #0x10]
  00058	e59d3014	 ldr         r3, [sp, #0x14]
  0005c	e5832000	 str         r2, [r3]

; 234  : 		_S = _Acc::_Prev(_S);

  00060	e59d0000	 ldr         r0, [sp]
  00064	eb000000	 bl          |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00068	e58d0018	 str         r0, [sp, #0x18]
  0006c	e59d3018	 ldr         r3, [sp, #0x18]
  00070	e5933000	 ldr         r3, [r3]
  00074	e58d3000	 str         r3, [sp]

; 235  : 		_Acc::_Next(_Acc::_Prev(_S)) = _S;

  00078	e59d0000	 ldr         r0, [sp]
  0007c	eb000000	 bl          |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00080	e58d001c	 str         r0, [sp, #0x1C]
  00084	e59d301c	 ldr         r3, [sp, #0x1C]
  00088	e5930000	 ldr         r0, [r3]
  0008c	eb000000	 bl          |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00090	e58d0020	 str         r0, [sp, #0x20]
  00094	e59d2000	 ldr         r2, [sp]
  00098	e59d3020	 ldr         r3, [sp, #0x20]
  0009c	e5832000	 str         r2, [r3]

; 236  : 		allocator.construct(&_Acc::_Value(_S), _X);

  000a0	e59d0000	 ldr         r0, [sp]
  000a4	eb000000	 bl          |?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z|
  000a8	e58d0024	 str         r0, [sp, #0x24]
  000ac	e59d203c	 ldr         r2, [sp, #0x3C]
  000b0	e59d1024	 ldr         r1, [sp, #0x24]
  000b4	e59d0030	 ldr         r0, [sp, #0x30]
  000b8	eb000000	 bl          |?construct@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@ABQAU3@@Z|

; 237  : 		++_Size;

  000bc	e59d3030	 ldr         r3, [sp, #0x30]
  000c0	e2833008	 add         r3, r3, #8
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e2832001	 add         r2, r3, #1
  000cc	e59d3030	 ldr         r3, [sp, #0x30]
  000d0	e2833008	 add         r3, r3, #8
  000d4	e5832000	 str         r2, [r3]

; 238  : 		return (iterator(_S)); }

  000d8	e59d1000	 ldr         r1, [sp]
  000dc	e59d0034	 ldr         r0, [sp, #0x34]
  000e0	eb000000	 bl          |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z|
  000e4	e59d3034	 ldr         r3, [sp, #0x34]
  000e8	e58d3004	 str         r3, [sp, #4]
  000ec	e59d0004	 ldr         r0, [sp, #4]
  000f0	e28dd028	 add         sp, sp, #0x28
  000f4	e89d6000	 ldmia       sp, {sp, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$M41231|

			 ENDP  ; |?insert@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@ABQAUDVFSCallbackInfo_t@@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::insert

	EXPORT	|?_Charalloc@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAPADI@Z| ; std::allocator<DVFSCallbackInfo_t *>::_Charalloc

  00000			 AREA	 |.pdata|, PDATA
|$T41245| DCD	|$LN9@Buynode|
	DCD	0x40002c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Buynode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAPAU_Node@12@PAU312@0@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Buynode

; 400  : 		{_Nodeptr _S = (_Nodeptr)allocator._Charalloc(

  00000		 |$LN9@Buynode|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M41242|

; 401  : 			1 * sizeof (_Node));

  00010	e3a0100c	 mov         r1, #0xC
  00014	e59d0024	 ldr         r0, [sp, #0x24]
  00018	eb000000	 bl          |?_Charalloc@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAPADI@Z|
  0001c	e58d0008	 str         r0, [sp, #8]
  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e58d3000	 str         r3, [sp]

; 402  : 		_Acc::_Next(_S) = _Narg != 0 ? _Narg : _S;

  00028	e59d3028	 ldr         r3, [sp, #0x28]
  0002c	e3530000	 cmp         r3, #0
  00030	0a000002	 beq         |$LN3@Buynode|
  00034	e59d3028	 ldr         r3, [sp, #0x28]
  00038	e58d300c	 str         r3, [sp, #0xC]
  0003c	ea000001	 b           |$LN4@Buynode|
  00040		 |$LN3@Buynode|
  00040	e59d3000	 ldr         r3, [sp]
  00044	e58d300c	 str         r3, [sp, #0xC]
  00048		 |$LN4@Buynode|
  00048	e59d0000	 ldr         r0, [sp]
  0004c	eb000000	 bl          |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00050	e58d0010	 str         r0, [sp, #0x10]
  00054	e59d200c	 ldr         r2, [sp, #0xC]
  00058	e59d3010	 ldr         r3, [sp, #0x10]
  0005c	e5832000	 str         r2, [r3]

; 403  : 		_Acc::_Prev(_S) = _Parg != 0 ? _Parg : _S;

  00060	e59d302c	 ldr         r3, [sp, #0x2C]
  00064	e3530000	 cmp         r3, #0
  00068	0a000002	 beq         |$LN5@Buynode|
  0006c	e59d302c	 ldr         r3, [sp, #0x2C]
  00070	e58d3014	 str         r3, [sp, #0x14]
  00074	ea000001	 b           |$LN6@Buynode|
  00078		 |$LN5@Buynode|
  00078	e59d3000	 ldr         r3, [sp]
  0007c	e58d3014	 str         r3, [sp, #0x14]
  00080		 |$LN6@Buynode|
  00080	e59d0000	 ldr         r0, [sp]
  00084	eb000000	 bl          |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|
  00088	e58d0018	 str         r0, [sp, #0x18]
  0008c	e59d2014	 ldr         r2, [sp, #0x14]
  00090	e59d3018	 ldr         r3, [sp, #0x18]
  00094	e5832000	 str         r2, [r3]

; 404  : 		return (_S); }

  00098	e59d3000	 ldr         r3, [sp]
  0009c	e58d3004	 str         r3, [sp, #4]
  000a0	e59d0004	 ldr         r0, [sp, #4]
  000a4	e28dd01c	 add         sp, sp, #0x1C
  000a8	e89d6000	 ldmia       sp, {sp, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M41243|

			 ENDP  ; |?_Buynode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAPAU_Node@12@PAU312@0@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Buynode

	EXPORT	|?deallocate@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAXI@Z| ; std::allocator<DVFSCallbackInfo_t *>::deallocate

  00000			 AREA	 |.pdata|, PDATA
|$T41252| DCD	|$LN5@Freenode|
	DCD	0x40000903
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Freenode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAXPAU_Node@12@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Freenode

; 406  : 		{allocator.deallocate(_S, 1); }

  00000		 |$LN5@Freenode|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M41249|
  0000c	e3a02001	 mov         r2, #1
  00010	e59d100c	 ldr         r1, [sp, #0xC]
  00014	e59d0008	 ldr         r0, [sp, #8]
  00018	eb000000	 bl          |?deallocate@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAXI@Z|
  0001c	e89d6000	 ldmia       sp, {sp, lr}
  00020	e12fff1e	 bx          lr
  00024		 |$M41250|

			 ENDP  ; |?_Freenode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAXPAU_Node@12@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Freenode

	EXPORT	|??$_Destroy@PAUDVFSCallbackInfo_t@@@std@@YAXPAPAUDVFSCallbackInfo_t@@@Z| ; std::_Destroy<DVFSCallbackInfo_t *>
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41259| DCD	|$LN5@destroy|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?destroy@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@@Z| PROC ; std::allocator<DVFSCallbackInfo_t *>::destroy

; 87   :         {_Destroy(_P); }

  00000		 |$LN5@destroy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M41256|
  0000c	e59d000c	 ldr         r0, [sp, #0xC]
  00010	eb000000	 bl          |??$_Destroy@PAUDVFSCallbackInfo_t@@@std@@YAXPAPAUDVFSCallbackInfo_t@@@Z|
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M41257|

			 ENDP  ; |?destroy@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@@Z|, std::allocator<DVFSCallbackInfo_t *>::destroy

	EXPORT	|??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41267| DCD	|$LN5@iterator@2|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator

; 112  : 		iterator(_Nodeptr _P)

  00000		 |$LN5@iterator@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41264|
  00010	e59d1010	 ldr         r1, [sp, #0x10]
  00014	e59d000c	 ldr         r0, [sp, #0xC]
  00018	eb000000	 bl          |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z|
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M41265|

			 ENDP  ; |??0iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::iterator


  00000			 AREA	 |.pdata|, PDATA
|$T41275| DCD	|$LN5@operator@4|
	DCD	0x40001404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AV012@H@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++

; 122  : 			{iterator _Tmp = *this;

  00000		 |$LN5@operator@4|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41272|
  00010	e59d1010	 ldr         r1, [sp, #0x10]
  00014	e28d0000	 add         r0, sp, #0
  00018	e3a02004	 mov         r2, #4
  0001c	eb000000	 bl          memcpy

; 123  : 			++*this;

  00020	e59d0010	 ldr         r0, [sp, #0x10]
  00024	eb000000	 bl          |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAAAAV012@XZ|

; 124  : 			return (_Tmp); }

  00028	e59d0014	 ldr         r0, [sp, #0x14]
  0002c	e28d1000	 add         r1, sp, #0
  00030	e3a02004	 mov         r2, #4
  00034	eb000000	 bl          memcpy
  00038	e59d3014	 ldr         r3, [sp, #0x14]
  0003c	e58d3004	 str         r3, [sp, #4]
  00040	e59d0004	 ldr         r0, [sp, #4]
  00044	e28dd008	 add         sp, sp, #8
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M41273|

			 ENDP  ; |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AV012@H@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator++


  00000			 AREA	 |.pdata|, PDATA
|$T41285| DCD	|$LN7@operator@5|
	DCD	0x40001604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??8iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator==

; 133  : 			{return (_Ptr == _X._Ptr); }

  00000		 |$LN7@operator@5|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41282|
  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e5932000	 ldr         r2, [r3]
  00018	e59d3014	 ldr         r3, [sp, #0x14]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e1520003	 cmp         r2, r3
  00024	1a000002	 bne         |$LN3@operator@5|
  00028	e3a03001	 mov         r3, #1
  0002c	e58d3004	 str         r3, [sp, #4]
  00030	ea000001	 b           |$LN4@operator@5|
  00034		 |$LN3@operator@5|
  00034	e3a03000	 mov         r3, #0
  00038	e58d3004	 str         r3, [sp, #4]
  0003c		 |$LN4@operator@5|
  0003c	e59d3004	 ldr         r3, [sp, #4]
  00040	e20330ff	 and         r3, r3, #0xFF
  00044	e5cd3000	 strb        r3, [sp]
  00048	e5dd0000	 ldrb        r0, [sp]
  0004c	e28dd008	 add         sp, sp, #8
  00050	e89d6000	 ldmia       sp, {sp, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$M41283|

			 ENDP  ; |??8iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::iterator::operator==


  00000			 AREA	 |.pdata|, PDATA
|$T41293| DCD	|$LN5@const_iter|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

; 73   : 		const_iterator()

  00000		 |$LN5@const_iter|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41290|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M41291|

			 ENDP  ; |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator


  00000			 AREA	 |.pdata|, PDATA
|$T41301| DCD	|$LN5@Mynode|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Mynode@const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAPAU_Node@23@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::_Mynode

; 102  : 			{return (_Ptr); }

  00000		 |$LN5@Mynode|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41298|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3000	 str         r3, [sp]
  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M41299|

			 ENDP  ; |?_Mynode@const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBAPAU_Node@23@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::_Mynode


  00000			 AREA	 |.pdata|, PDATA
|$T41309| DCD	|$LN5@Next|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Next

; 51   : 			{return ((_Nodepref)(*_P)._Next); }

  00000		 |$LN5@Next|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41306|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M41307|

			 ENDP  ; |?_Next@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Next


  00000			 AREA	 |.pdata|, PDATA
|$T41317| DCD	|$LN5@Prev|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Prev

; 53   : 			{return ((_Nodepref)(*_P)._Prev); }

  00000		 |$LN5@Prev|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41314|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833004	 add         r3, r3, #4
  00018	e58d3000	 str         r3, [sp]
  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M41315|

			 ENDP  ; |?_Prev@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAU_Node@23@PAU423@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Prev


  00000			 AREA	 |.pdata|, PDATA
|$T41325| DCD	|$LN5@Value|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Value

; 55   : 			{return ((_Vref)(*_P)._Value); }

  00000		 |$LN5@Value|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41322|
  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833008	 add         r3, r3, #8
  00018	e58d3000	 str         r3, [sp]
  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M41323|

			 ENDP  ; |?_Value@_Acc@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@SAAAPAUDVFSCallbackInfo_t@@PAU_Node@23@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::_Acc::_Value

	EXPORT	|??$_Allocate@D@std@@YAPADIPAD@Z|	; std::_Allocate<char>
; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41333| DCD	|$LN5@Charalloc|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?_Charalloc@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAPADI@Z| PROC ; std::allocator<DVFSCallbackInfo_t *>::_Charalloc

; 80   :         {return (_Allocate((difference_type)_N,

  00000		 |$LN5@Charalloc|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41330|

; 81   :             (char _FARQ *)0)); }

  00010	e3a01000	 mov         r1, #0
  00014	e59d0014	 ldr         r0, [sp, #0x14]
  00018	eb000000	 bl          |??$_Allocate@D@std@@YAPADIPAD@Z|
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]
  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M41331|

			 ENDP  ; |?_Charalloc@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAPADI@Z|, std::allocator<DVFSCallbackInfo_t *>::_Charalloc

	IMPORT	|??3@YAXPAX@Z|				; operator delete

  00000			 AREA	 |.pdata|, PDATA
|$T41340| DCD	|$LN5@deallocate|
	DCD	0x40000703
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?deallocate@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAXI@Z| PROC ; std::allocator<DVFSCallbackInfo_t *>::deallocate

; 83   :         {operator delete(_P); }

  00000		 |$LN5@deallocate|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M41337|
  0000c	e59d000c	 ldr         r0, [sp, #0xC]
  00010	eb000000	 bl          |??3@YAXPAX@Z|
  00014	e89d6000	 ldmia       sp, {sp, lr}
  00018	e12fff1e	 bx          lr
  0001c		 |$M41338|

			 ENDP  ; |?deallocate@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAXI@Z|, std::allocator<DVFSCallbackInfo_t *>::deallocate

	EXPORT	|??$_Construct@PAUDVFSCallbackInfo_t@@PAU1@@std@@YAXPAPAUDVFSCallbackInfo_t@@ABQAU1@@Z| ; std::_Construct<DVFSCallbackInfo_t *,DVFSCallbackInfo_t *>

  00000			 AREA	 |.pdata|, PDATA
|$T41347| DCD	|$LN5@construct|
	DCD	0x40000803
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?construct@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@ABQAU3@@Z| PROC ; std::allocator<DVFSCallbackInfo_t *>::construct

; 85   :         {_Construct(_P, _V); }

  00000		 |$LN5@construct|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M41344|
  0000c	e59d1010	 ldr         r1, [sp, #0x10]
  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          |??$_Construct@PAUDVFSCallbackInfo_t@@PAU1@@std@@YAXPAPAUDVFSCallbackInfo_t@@ABQAU1@@Z|
  00018	e89d6000	 ldmia       sp, {sp, lr}
  0001c	e12fff1e	 bx          lr
  00020		 |$M41345|

			 ENDP  ; |?construct@?$allocator@PAUDVFSCallbackInfo_t@@@std@@QAAXPAPAUDVFSCallbackInfo_t@@ABQAU3@@Z|, std::allocator<DVFSCallbackInfo_t *>::construct

; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41355| DCD	|$LN5@const_iter@2|
	DCD	0x40000d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

; 75   : 		const_iterator(_Nodeptr _P)

  00000		 |$LN5@const_iter@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41352|
  00010	e59d2010	 ldr         r2, [sp, #0x10]
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5832000	 str         r2, [r3]
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e58d3000	 str         r3, [sp]
  00024	e59d0000	 ldr         r0, [sp]
  00028	e28dd004	 add         sp, sp, #4
  0002c	e89d6000	 ldmia       sp, {sp, lr}
  00030	e12fff1e	 bx          lr
  00034		 |$M41353|

			 ENDP  ; |??0const_iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@PAU_Node@12@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::const_iterator::const_iterator

; File c:\wince600\public\common\sdk\inc\xmemory

  00000			 AREA	 |.pdata|, PDATA
|$T41362| DCD	|$LN5@Destroy|
	DCD	0x40000503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??$_Destroy@PAUDVFSCallbackInfo_t@@@std@@YAXPAPAUDVFSCallbackInfo_t@@@Z| PROC ; std::_Destroy<DVFSCallbackInfo_t *>

; 57   :     {_DESTRUCTOR(_Ty, _P); }

  00000		 |$LN5@Destroy|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M41359|
  0000c	e89d6000	 ldmia       sp, {sp, lr}
  00010	e12fff1e	 bx          lr
  00014		 |$M41360|

			 ENDP  ; |??$_Destroy@PAUDVFSCallbackInfo_t@@@std@@YAXPAPAUDVFSCallbackInfo_t@@@Z|, std::_Destroy<DVFSCallbackInfo_t *>


  00000			 AREA	 |.pdata|, PDATA
|$T41370| DCD	|$LN8@Allocate|
	DCD	0x40001e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??$_Allocate@D@std@@YAPADIPAD@Z| PROC	; std::_Allocate<char>

; 43   :     {if (_N <= 0)

  00000		 |$LN8@Allocate|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M41367|
  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e3530000	 cmp         r3, #0
  00018	8a000002	 bhi         |$LN3@Allocate|

; 44   :         _N = 0;

  0001c	e3a03000	 mov         r3, #0
  00020	e58d3014	 str         r3, [sp, #0x14]
  00024	ea00000a	 b           |$LN2@Allocate|
  00028		 |$LN3@Allocate|

; 45   :     /* check for overflow */
; 46   :     else if (((_SIZT)(-1) / _N) < sizeof(_Ty))

  00028	e59d0014	 ldr         r0, [sp, #0x14]
  0002c	e3e01000	 mvn         r1, #0
  00030	eb000000	 bl          __rt_udiv
  00034	e3500001	 cmp         r0, #1
  00038	2a000005	 bcs         |$LN1@Allocate|

; 47   :         return (_Ty _FARQ *)operator new((_SIZT)(-1));

  0003c	e3e00000	 mvn         r0, #0
  00040	eb000000	 bl          |??2@YAPAXI@Z|
  00044	e58d0004	 str         r0, [sp, #4]
  00048	e59d3004	 ldr         r3, [sp, #4]
  0004c	e58d3000	 str         r3, [sp]
  00050	ea000004	 b           |$LN4@Allocate|
  00054		 |$LN1@Allocate|
  00054		 |$LN2@Allocate|

; 48   :     return ((_Ty _FARQ *)operator new(
; 49   :         (_SIZT)_N * sizeof (_Ty))); }

  00054	e59d0014	 ldr         r0, [sp, #0x14]
  00058	eb000000	 bl          |??2@YAPAXI@Z|
  0005c	e58d0008	 str         r0, [sp, #8]
  00060	e59d3008	 ldr         r3, [sp, #8]
  00064	e58d3000	 str         r3, [sp]
  00068		 |$LN4@Allocate|
  00068	e59d0000	 ldr         r0, [sp]
  0006c	e28dd00c	 add         sp, sp, #0xC
  00070	e89d6000	 ldmia       sp, {sp, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M41368|

			 ENDP  ; |??$_Allocate@D@std@@YAPADIPAD@Z|, std::_Allocate<char>

	EXPORT	|??2@YAPAXIPAX@Z|			; operator new

  00000			 AREA	 |.pdata|, PDATA
|$T41380| DCD	|$LN7@Construct|
	DCD	0x40001904
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??$_Construct@PAUDVFSCallbackInfo_t@@PAU1@@std@@YAXPAPAUDVFSCallbackInfo_t@@ABQAU1@@Z| PROC ; std::_Construct<DVFSCallbackInfo_t *,DVFSCallbackInfo_t *>

; 53   :     {new ((void _FARQ *)_P) _T1(_V); }

  00000		 |$LN7@Construct|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M41377|
  00010	e59d1014	 ldr         r1, [sp, #0x14]
  00014	e3a00004	 mov         r0, #4
  00018	eb000000	 bl          |??2@YAPAXIPAX@Z|
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]
  00028	e59d3000	 ldr         r3, [sp]
  0002c	e3530000	 cmp         r3, #0
  00030	0a000006	 beq         |$LN3@Construct|
  00034	e59d3018	 ldr         r3, [sp, #0x18]
  00038	e5932000	 ldr         r2, [r3]
  0003c	e59d3000	 ldr         r3, [sp]
  00040	e5832000	 str         r2, [r3]
  00044	e59d3000	 ldr         r3, [sp]
  00048	e58d3008	 str         r3, [sp, #8]
  0004c	ea000001	 b           |$LN4@Construct|
  00050		 |$LN3@Construct|
  00050	e3a03000	 mov         r3, #0
  00054	e58d3008	 str         r3, [sp, #8]
  00058		 |$LN4@Construct|
  00058	e28dd00c	 add         sp, sp, #0xC
  0005c	e89d6000	 ldmia       sp, {sp, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$M41378|

			 ENDP  ; |??$_Construct@PAUDVFSCallbackInfo_t@@PAU1@@std@@YAXPAPAUDVFSCallbackInfo_t@@ABQAU1@@Z|, std::_Construct<DVFSCallbackInfo_t *,DVFSCallbackInfo_t *>

; File c:\wince600\public\common\sdk\inc\new

  00000			 AREA	 |.pdata|, PDATA
|$T41388| DCD	|$LN5@operator@6|
	DCD	0x40000a04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??2@YAPAXIPAX@Z| PROC			; operator new

; 73   :     {return (_P); }

  00000		 |$LN5@operator@6|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41385|
  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e58d3000	 str         r3, [sp]
  00018	e59d0000	 ldr         r0, [sp]
  0001c	e28dd004	 add         sp, sp, #4
  00020	e89d6000	 ldmia       sp, {sp, lr}
  00024	e12fff1e	 bx          lr
  00028		 |$M41386|

			 ENDP  ; |??2@YAPAXIPAX@Z|, operator new

	EXPORT	|??0?$IndexList@K@@QAA@XZ|		; IndexList<unsigned long>::IndexList<unsigned long>
	IMPORT	|atexit|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T41395| DCD	|$LN5@dynamic|
	DCD	0x40000901
; Function compile flags: /Odtp

  00000			 AREA	 |.text$yc|, CODE, ARM

  00000		 |??__Es_IndexList@@YAXXZ| PROC		; `dynamic initializer for 's_IndexList''

; 78   : static IndexList<DWORD>        s_IndexList;

  00000		 |$LN5@dynamic|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41392|
  00004	e59f0014	 ldr         r0, [pc, #0x14]
  00008	eb000000	 bl          |??0?$IndexList@K@@QAA@XZ|
  0000c	e59f0008	 ldr         r0, [pc, #8]
  00010	eb000000	 bl          atexit
  00014	e49de004	 ldr         lr, [sp], #4
  00018	e12fff1e	 bx          lr
  0001c		 |$LN6@dynamic|
  0001c		 |$LN7@dynamic|
  0001c	00000000	 DCD         |??__Fs_IndexList@@YAXXZ|
  00020		 |$LN8@dynamic|
  00020	00000000	 DCD         |s_IndexList|
  00024		 |$M41393|

			 ENDP  ; |??__Es_IndexList@@YAXXZ|, `dynamic initializer for 's_IndexList''

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T41406| DCD	|$LN5@IndexList|
	DCD	0x40001204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0?$IndexList@K@@QAA@XZ| PROC	; IndexList<unsigned long>::IndexList<unsigned long>

; 51   :     IndexList()

  00000		 |$LN5@IndexList|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M41403|

; 52   :     {        
; 53   :         memset(&m_Head, 0, sizeof(IndexData));

  00010	e3a02088	 mov         r2, #0x88
  00014	e3a01000	 mov         r1, #0
  00018	e59d000c	 ldr         r0, [sp, #0xC]
  0001c	eb000000	 bl          memset

; 54   :         m_maxIndex = INDEXED_CHUNK_SIZE - 1;

  00020	e59d300c	 ldr         r3, [sp, #0xC]
  00024	e2832088	 add         r2, r3, #0x88
  00028	e3a0301f	 mov         r3, #0x1F
  0002c	e5823000	 str         r3, [r2]

; 55   :     }

  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e58d3000	 str         r3, [sp]
  00038	e59d0000	 ldr         r0, [sp]
  0003c	e28dd004	 add         sp, sp, #4
  00040	e89d6000	 ldmia       sp, {sp, lr}
  00044	e12fff1e	 bx          lr
  00048		 |$M41404|

			 ENDP  ; |??0?$IndexList@K@@QAA@XZ|, IndexList<unsigned long>::IndexList<unsigned long>

	EXPORT	|??0?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@ABV?$allocator@PAUDVFSCallbackInfo_t@@@1@@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >
	IMPORT	|memset|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\constraintadapters\dvfsconstraint\dvfsconstraint.cpp

  00000			 AREA	 |.pdata|, PDATA
|$T41415| DCD	|$LN5@dynamic@2|
	DCD	0x40001002
; Function compile flags: /Odtp

  00000			 AREA	 |.text$yc|, CODE, ARM

  00000		 |??__Es_CallbackList@@YAXXZ| PROC	; `dynamic initializer for 's_CallbackList''

; 79   : static list<DVFSCallbackInfo_t*> s_CallbackList;

  00000		 |$LN5@dynamic@2|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M41412|
  00008	e3a02001	 mov         r2, #1
  0000c	e3a01000	 mov         r1, #0
  00010	e28d0000	 add         r0, sp, #0
  00014	eb000000	 bl          memset
  00018	e28d1000	 add         r1, sp, #0
  0001c	e59f0018	 ldr         r0, [pc, #0x18]
  00020	eb000000	 bl          |??0?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@ABV?$allocator@PAUDVFSCallbackInfo_t@@@1@@Z|
  00024	e59f000c	 ldr         r0, [pc, #0xC]
  00028	eb000000	 bl          atexit
  0002c	e28dd004	 add         sp, sp, #4
  00030	e49de004	 ldr         lr, [sp], #4
  00034	e12fff1e	 bx          lr
  00038		 |$LN6@dynamic@2|
  00038		 |$LN7@dynamic@2|
  00038	00000000	 DCD         |??__Fs_CallbackList@@YAXXZ|
  0003c		 |$LN8@dynamic@2|
  0003c	00000000	 DCD         |s_CallbackList|
  00040		 |$M41413|

			 ENDP  ; |??__Es_CallbackList@@YAXXZ|, `dynamic initializer for 's_CallbackList''

; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41426| DCD	|$LN5@list|
	DCD	0x40001704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??0?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@ABV?$allocator@PAUDVFSCallbackInfo_t@@@1@@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >

; 145  : 		_Head(_Buynode()), _Size(0) {}

  00000		 |$LN5@list|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M41423|
  00010	e3a02000	 mov         r2, #0
  00014	e3a01000	 mov         r1, #0
  00018	e59d0010	 ldr         r0, [sp, #0x10]
  0001c	eb000000	 bl          |?_Buynode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAPAU_Node@12@PAU312@0@Z|
  00020	e58d0004	 str         r0, [sp, #4]
  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e2832004	 add         r2, r3, #4
  0002c	e59d3004	 ldr         r3, [sp, #4]
  00030	e5823000	 str         r3, [r2]
  00034	e59d3010	 ldr         r3, [sp, #0x10]
  00038	e2832008	 add         r2, r3, #8
  0003c	e3a03000	 mov         r3, #0
  00040	e5823000	 str         r3, [r2]
  00044	e59d3010	 ldr         r3, [sp, #0x10]
  00048	e58d3000	 str         r3, [sp]
  0004c	e59d0000	 ldr         r0, [sp]
  00050	e28dd008	 add         sp, sp, #8
  00054	e89d6000	 ldmia       sp, {sp, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M41424|

			 ENDP  ; |??0?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@ABV?$allocator@PAUDVFSCallbackInfo_t@@@1@@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >

	EXPORT	|??1?$IndexList@K@@QAA@XZ|		; IndexList<unsigned long>::~IndexList<unsigned long>

  00000			 AREA	 |.pdata|, PDATA
|$T41433| DCD	|$LN5@dynamic@3|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text$yd|, CODE, ARM

  00000		 |??__Fs_IndexList@@YAXXZ| PROC		; `dynamic atexit destructor for 's_IndexList''
  00000		 |$LN5@dynamic@3|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41430|
  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          |??1?$IndexList@K@@QAA@XZ|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@dynamic@3|
  00014		 |$LN7@dynamic@3|
  00014	00000000	 DCD         |s_IndexList|
  00018		 |$M41431|

			 ENDP  ; |??__Fs_IndexList@@YAXXZ|, `dynamic atexit destructor for 's_IndexList''

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\pm\inc\indexlist.h

  00000			 AREA	 |.pdata|, PDATA
|$T41443| DCD	|$LN7@IndexList@2|
	DCD	0x40001704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1?$IndexList@K@@QAA@XZ| PROC	; IndexList<unsigned long>::~IndexList<unsigned long>

; 58   :     {

  00000		 |$LN7@IndexList@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M41440|

; 59   :         IndexData *pCurrent;
; 60   :         IndexData *pDelete;
; 61   : 
; 62   :         pCurrent = m_Head.pNext;

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e5933000	 ldr         r3, [r3]
  00018	e58d3004	 str         r3, [sp, #4]
  0001c		 |$LN2@IndexList@2|

; 63   :         while (pCurrent != NULL)

  0001c	e59d3004	 ldr         r3, [sp, #4]
  00020	e3530000	 cmp         r3, #0
  00024	0a000009	 beq         |$LN1@IndexList@2|

; 64   :             {
; 65   :             pDelete = pCurrent;

  00028	e59d3004	 ldr         r3, [sp, #4]
  0002c	e58d3000	 str         r3, [sp]

; 66   :             pCurrent = pCurrent->pNext;

  00030	e59d3004	 ldr         r3, [sp, #4]
  00034	e5933000	 ldr         r3, [r3]
  00038	e58d3004	 str         r3, [sp, #4]

; 67   :             delete pDelete;

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e58d3008	 str         r3, [sp, #8]
  00044	e59d0008	 ldr         r0, [sp, #8]
  00048	eb000000	 bl          |??3@YAXPAX@Z|

; 68   :             }

  0004c	eafffff2	 b           |$LN2@IndexList@2|
  00050		 |$LN1@IndexList@2|

; 69   :     }

  00050	e28dd00c	 add         sp, sp, #0xC
  00054	e89d6000	 ldmia       sp, {sp, lr}
  00058	e12fff1e	 bx          lr
  0005c		 |$M41441|

			 ENDP  ; |??1?$IndexList@K@@QAA@XZ|, IndexList<unsigned long>::~IndexList<unsigned long>

	EXPORT	|??1?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::~list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >

  00000			 AREA	 |.pdata|, PDATA
|$T41450| DCD	|$LN5@dynamic@4|
	DCD	0x40000601
; Function compile flags: /Odtp

  00000			 AREA	 |.text$yd|, CODE, ARM

  00000		 |??__Fs_CallbackList@@YAXXZ| PROC	; `dynamic atexit destructor for 's_CallbackList''
  00000		 |$LN5@dynamic@4|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M41447|
  00004	e59f0008	 ldr         r0, [pc, #8]
  00008	eb000000	 bl          |??1?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|
  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$LN6@dynamic@4|
  00014		 |$LN7@dynamic@4|
  00014	00000000	 DCD         |s_CallbackList|
  00018		 |$M41448|

			 ENDP  ; |??__Fs_CallbackList@@YAXXZ|, `dynamic atexit destructor for 's_CallbackList''

	EXPORT	|?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@0@Z| ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase
; File c:\wince600\public\common\sdk\inc\list

  00000			 AREA	 |.pdata|, PDATA
|$T41462| DCD	|$LN5@list@2|
	DCD	0x40002704
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |??1?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::~list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >

; 165  : 		{erase(begin(), end());

  00000		 |$LN5@list@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M41459|
  00010	e28d1000	 add         r1, sp, #0
  00014	e59d0024	 ldr         r0, [sp, #0x24]
  00018	eb000000	 bl          |?end@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  0001c	e58d000c	 str         r0, [sp, #0xC]
  00020	e28d1004	 add         r1, sp, #4
  00024	e59d0024	 ldr         r0, [sp, #0x24]
  00028	eb000000	 bl          |?begin@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@XZ|
  0002c	e58d0010	 str         r0, [sp, #0x10]
  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e58d3014	 str         r3, [sp, #0x14]
  00038	e59d3014	 ldr         r3, [sp, #0x14]
  0003c	e5933000	 ldr         r3, [r3]
  00040	e59d2010	 ldr         r2, [sp, #0x10]
  00044	e58d2018	 str         r2, [sp, #0x18]
  00048	e59d2018	 ldr         r2, [sp, #0x18]
  0004c	e5922000	 ldr         r2, [r2]
  00050	e28d1008	 add         r1, sp, #8
  00054	e59d0024	 ldr         r0, [sp, #0x24]
  00058	eb000000	 bl          |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@0@Z|

; 166  : 		_Freenode(_Head);

  0005c	e59d3024	 ldr         r3, [sp, #0x24]
  00060	e2833004	 add         r3, r3, #4
  00064	e5931000	 ldr         r1, [r3]
  00068	e59d0024	 ldr         r0, [sp, #0x24]
  0006c	eb000000	 bl          |?_Freenode@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@IAAXPAU_Node@12@@Z|

; 167  : 		_Head = 0, _Size = 0; }

  00070	e59d3024	 ldr         r3, [sp, #0x24]
  00074	e2832004	 add         r2, r3, #4
  00078	e3a03000	 mov         r3, #0
  0007c	e5823000	 str         r3, [r2]
  00080	e59d3024	 ldr         r3, [sp, #0x24]
  00084	e2832008	 add         r2, r3, #8
  00088	e3a03000	 mov         r3, #0
  0008c	e5823000	 str         r3, [r2]
  00090	e28dd01c	 add         sp, sp, #0x1C
  00094	e89d6000	 ldmia       sp, {sp, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$M41460|

			 ENDP  ; |??1?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA@XZ|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::~list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >


  00000			 AREA	 |.pdata|, PDATA
|$T41472| DCD	|$LN7@erase@2|
	DCD	0x40002204
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@0@Z| PROC ; std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase

; 257  : 		{while (_F != _L)

  00000		 |$LN7@erase@2|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd018	 sub         sp, sp, #0x18
  00010		 |$M41469|
  00010		 |$LN2@erase@2|
  00010	e28d102c	 add         r1, sp, #0x2C
  00014	e28d0028	 add         r0, sp, #0x28
  00018	eb000000	 bl          |??9iterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QBA_NABV012@@Z|
  0001c	e5cd000c	 strb        r0, [sp, #0xC]
  00020	e5dd300c	 ldrb        r3, [sp, #0xC]
  00024	e3530000	 cmp         r3, #0
  00028	0a00000c	 beq         |$LN1@erase@2|

; 258  : 			erase(_F++);

  0002c	e3a02000	 mov         r2, #0
  00030	e28d1000	 add         r1, sp, #0
  00034	e28d0028	 add         r0, sp, #0x28
  00038	eb000000	 bl          |??Eiterator@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AV012@H@Z|
  0003c	e58d0010	 str         r0, [sp, #0x10]
  00040	e59d3010	 ldr         r3, [sp, #0x10]
  00044	e58d3014	 str         r3, [sp, #0x14]
  00048	e59d3014	 ldr         r3, [sp, #0x14]
  0004c	e5932000	 ldr         r2, [r3]
  00050	e28d1004	 add         r1, sp, #4
  00054	e59d0020	 ldr         r0, [sp, #0x20]
  00058	eb000000	 bl          |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@@Z|
  0005c	eaffffeb	 b           |$LN2@erase@2|
  00060		 |$LN1@erase@2|

; 259  : 		return (_F); }

  00060	e59d0024	 ldr         r0, [sp, #0x24]
  00064	e28d1028	 add         r1, sp, #0x28
  00068	e3a02004	 mov         r2, #4
  0006c	eb000000	 bl          memcpy
  00070	e59d3024	 ldr         r3, [sp, #0x24]
  00074	e58d3008	 str         r3, [sp, #8]
  00078	e59d0008	 ldr         r0, [sp, #8]
  0007c	e28dd018	 add         sp, sp, #0x18
  00080	e89d6000	 ldmia       sp, {sp, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$M41470|

			 ENDP  ; |?erase@?$list@PAUDVFSCallbackInfo_t@@V?$allocator@PAUDVFSCallbackInfo_t@@@std@@@std@@QAA?AViterator@12@V312@0@Z|, std::list<DVFSCallbackInfo_t *,std::allocator<DVFSCallbackInfo_t *> >::erase


  0009c			 AREA	 |.bss|, NOINIT
|s_IndexList| %	0x8c
|s_CallbackList| % 0xc

  00000			 AREA	 |.CRT$XCU|, DATA
|s_IndexList$initializer$| DCD |??__Es_IndexList@@YAXXZ|
|s_CallbackList$initializer$| DCD |??__Es_CallbackList@@YAXXZ|
	END
