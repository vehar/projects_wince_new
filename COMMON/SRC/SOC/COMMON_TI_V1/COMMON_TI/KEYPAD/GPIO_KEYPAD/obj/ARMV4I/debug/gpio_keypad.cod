; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\KEYPAD\GPIO_KEYPAD\gpio_keypad.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@CLLAOEB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| DCB "N"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, "R", 0x0, "e", 0x0, "p"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@| DCB "F"
	DCB	0x0, "i", 0x0, "r", 0x0, "s", 0x0, "t", 0x0, "R", 0x0, "e"
	DCB	0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@CLLAOEB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "b", 0x0, "o", 0x0, "u", 0x0, "n", 0x0, "c"
	DCB	0x0, "e", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@| DCB "S"
	DCB	0x0, "a", 0x0, "m", 0x0, "p", 0x0, "l", 0x0, "e", 0x0, "P"
	DCB	0x0, "e", 0x0, "r", 0x0, "i", 0x0, "o", 0x0, "d", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@| DCB "E"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "W"
	DCB	0x0, "a", 0x0, "k", 0x0, "e", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@| DCB "P"
	DCB	0x0, "r", 0x0, "i", 0x0, "o", 0x0, "r", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "2", 0x0, "5", 0x0, "6", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "k", 0x0, "e", 0x0, "y", 0x0, "p", 0x0, "a", 0x0, "d", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|g_deviceRegParams| DCD |??_C@_1BI@BHLBGEOK@?$AAP?$AAr?$AAi?$AAo?$AAr?$AAi?$AAt?$AAy?$AA2?$AA5?$AA6?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x0
	DCD	0x4
	DCD	0x64
	DCD	|??_C@_1BG@GJAODHJH@?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAW?$AAa?$AAk?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x4
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BK@LFBEMINK@?$AAS?$AAa?$AAm?$AAp?$AAl?$AAe?$AAP?$AAe?$AAr?$AAi?$AAo?$AAd?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x8
	DCD	0x4
	DCD	0x28
	DCD	|??_C@_1BK@CLLAOEB@?$AAD?$AAe?$AAb?$AAo?$AAu?$AAn?$AAc?$AAe?$AAT?$AAi?$AAm?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0xc
	DCD	0x4
	DCD	0x50
	DCD	|??_C@_1BI@DEPDCBKF@?$AAF?$AAi?$AAr?$AAs?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x10
	DCD	0x4
	DCD	0x1f4
	DCD	|??_C@_1BG@LIOJCANL@?$AAN?$AAe?$AAx?$AAt?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x14
	DCD	0x4
	DCD	0x7d
	EXPORT	|??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KPD_Deinit|
	EXPORT	|??_C@_1GE@DGHBDAGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@GMGMNBCB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@GEGIKHEP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@HGADHAMF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@EOJHNAOH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@KEGHAGPC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KPD_Init|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|GPIOInterruptWakeUp|
	IMPORT	|g_wakeupVKeys|
	IMPORT	|GPIOInterruptInitialize|
	IMPORT	|GPIOSetMode|
	IMPORT	|g_keypadVK|
	IMPORT	|CreateEventW|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|GPIOOpen|
	IMPORT	|g_nbWakeupVKeys|
	IMPORT	|g_nbKeys|
	IMPORT	|LocalAlloc|
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T44082| DCD	|$LN36@KPD_Init|
	DCD	0x40018c04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\keypad\gpio_keypad\gpio_keypad.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@DGHBDAGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@GMGMNBCB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "i", 0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r"
	DCB	0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "G", 0x0, "P", 0x0, "I"
	DCB	0x0, "O", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@GEGIKHEP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "K", 0x0, "P"
	DCB	0x0, "D", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@HGADHAMF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "e", 0x0, "n"
	DCB	0x0, " ", 0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@EOJHNAOH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "u"
	DCB	0x0, "c", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "h", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " "
	DCB	0x0, "w", 0x0, "a", 0x0, "k", 0x0, "e", 0x0, "u", 0x0, "p"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@KEGHAGPC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "u"
	DCB	0x0, "c", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "h", 0x0, "o", 0x0, "l", 0x0, "d", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "e", 0x0, " "
	DCB	0x0, "S", 0x0, "Y", 0x0, "S", 0x0, "I", 0x0, "N", 0x0, "T"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "K", 0x0, "D", 0x0, "P", 0x0, " "
	DCB	0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v", 0x0, "e", 0x0, "r"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |KPD_Init| PROC

; 148  : {

  00000		 |$LN36@KPD_Init|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0000c	e24dd04c	 sub         sp, sp, #0x4C
  00010		 |$M44079|

; 149  :     int i;
; 150  :     DWORD rc = (DWORD)NULL;

  00010	e3a03000	 mov         r3, #0
  00014	e58d300c	 str         r3, [sp, #0xC]

; 151  :     KPD_DEVICE *pDevice = NULL;

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3008	 str         r3, [sp, #8]

; 152  : 
; 153  : 	UNREFERENCED_PARAMETER(pBusContext);
; 154  : 
; 155  :     DEBUGMSG(ZONE_FUNCTION, (
; 156  :         L"+KPD_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 157  :     ));

  00020	e59f35c8	 ldr         r3, [pc, #0x5C8]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	0a000006	 beq         |$LN30@KPD_Init|
  00030	e59d205c	 ldr         r2, [sp, #0x5C]
  00034	e59d1058	 ldr         r1, [sp, #0x58]
  00038	e59f05ec	 ldr         r0, [pc, #0x5EC]
  0003c	eb000000	 bl          NKDbgPrintfW
  00040	e3a03001	 mov         r3, #1
  00044	e58d3024	 str         r3, [sp, #0x24]
  00048	ea000001	 b           |$LN31@KPD_Init|
  0004c		 |$LN30@KPD_Init|
  0004c	e3a03000	 mov         r3, #0
  00050	e58d3024	 str         r3, [sp, #0x24]
  00054		 |$LN31@KPD_Init|

; 158  : 
; 159  :     // Create device structure
; 160  :     pDevice = (KPD_DEVICE *)LocalAlloc(LPTR, sizeof(KPD_DEVICE));

  00054	e3a01048	 mov         r1, #0x48
  00058	e3a00040	 mov         r0, #0x40
  0005c	eb000000	 bl          LocalAlloc
  00060	e58d0028	 str         r0, [sp, #0x28]
  00064	e59d3028	 ldr         r3, [sp, #0x28]
  00068	e58d3008	 str         r3, [sp, #8]

; 161  :     if (pDevice == NULL) {

  0006c	e59d3008	 ldr         r3, [sp, #8]
  00070	e3530000	 cmp         r3, #0
  00074	1a000002	 bne         |$LN27@KPD_Init|

; 162  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 163  :             L"Failed allocate KDP driver structure\r\n"
; 164  :         ));

  00078	e59f05a8	 ldr         r0, [pc, #0x5A8]
  0007c	eb000000	 bl          NKDbgPrintfW

; 165  :         goto cleanUp;

  00080	ea000142	 b           |$cleanUp$43745|
  00084		 |$LN27@KPD_Init|

; 166  :     }
; 167  : 
; 168  :     // Create sysintr holding structure
; 169  :     pDevice->keypadSysintr = (DWORD *)LocalAlloc(LPTR, g_nbKeys * sizeof(DWORD));

  00084	e59f357c	 ldr         r3, [pc, #0x57C]
  00088	e5932000	 ldr         r2, [r3]
  0008c	e3a03004	 mov         r3, #4
  00090	e0010392	 mul         r1, r2, r3
  00094	e3a00040	 mov         r0, #0x40
  00098	eb000000	 bl          LocalAlloc
  0009c	e58d002c	 str         r0, [sp, #0x2C]
  000a0	e59d3008	 ldr         r3, [sp, #8]
  000a4	e2832040	 add         r2, r3, #0x40
  000a8	e59d302c	 ldr         r3, [sp, #0x2C]
  000ac	e5823000	 str         r3, [r2]

; 170  :     if (pDevice->keypadSysintr == NULL) {

  000b0	e59d3008	 ldr         r3, [sp, #8]
  000b4	e2833040	 add         r3, r3, #0x40
  000b8	e5933000	 ldr         r3, [r3]
  000bc	e3530000	 cmp         r3, #0
  000c0	1a000002	 bne         |$LN26@KPD_Init|

; 171  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 172  :             L"Failed allocate structure holding the SYSINTR\r\n"
; 173  :         ));

  000c4	e59f0558	 ldr         r0, [pc, #0x558]
  000c8	eb000000	 bl          NKDbgPrintfW

; 174  :         goto cleanUp;

  000cc	ea00012f	 b           |$cleanUp$43745|
  000d0		 |$LN26@KPD_Init|

; 175  :     }
; 176  : 
; 177  :     for (i=0;i<g_nbKeys;i++)

  000d0	e3a03000	 mov         r3, #0
  000d4	e58d3010	 str         r3, [sp, #0x10]
  000d8	ea000002	 b           |$LN25@KPD_Init|
  000dc		 |$LN24@KPD_Init|
  000dc	e59d3010	 ldr         r3, [sp, #0x10]
  000e0	e2833001	 add         r3, r3, #1
  000e4	e58d3010	 str         r3, [sp, #0x10]
  000e8		 |$LN25@KPD_Init|
  000e8	e59d2010	 ldr         r2, [sp, #0x10]
  000ec	e59f3514	 ldr         r3, [pc, #0x514]
  000f0	e5933000	 ldr         r3, [r3]
  000f4	e1520003	 cmp         r2, r3
  000f8	aa000009	 bge         |$LN23@KPD_Init|

; 178  :     {
; 179  :         pDevice->keypadSysintr[i] = (DWORD) SYSINTR_UNDEFINED;

  000fc	e59d3008	 ldr         r3, [sp, #8]
  00100	e2830040	 add         r0, r3, #0x40
  00104	e59d1010	 ldr         r1, [sp, #0x10]
  00108	e3a03004	 mov         r3, #4
  0010c	e0020391	 mul         r2, r1, r3
  00110	e5903000	 ldr         r3, [r0]
  00114	e0832002	 add         r2, r3, r2
  00118	e3e03000	 mvn         r3, #0
  0011c	e5823000	 str         r3, [r2]

; 180  :     }

  00120	eaffffed	 b           |$LN24@KPD_Init|
  00124		 |$LN23@KPD_Init|

; 181  : 
; 182  : 
; 183  :    // Create wakeup keys holding structure
; 184  :     if (g_nbWakeupVKeys)

  00124	e59f34d0	 ldr         r3, [pc, #0x4D0]
  00128	e5933000	 ldr         r3, [r3]
  0012c	e3530000	 cmp         r3, #0
  00130	0a000012	 beq         |$LN22@KPD_Init|

; 185  :     {
; 186  :         pDevice->wakeupKeys = (WAKEUP_KEY_INFO *)LocalAlloc(LPTR, sizeof(WAKEUP_KEY_INFO) * g_nbWakeupVKeys);

  00134	e59f34c0	 ldr         r3, [pc, #0x4C0]
  00138	e5932000	 ldr         r2, [r3]
  0013c	e3a03008	 mov         r3, #8
  00140	e0010392	 mul         r1, r2, r3
  00144	e3a00040	 mov         r0, #0x40
  00148	eb000000	 bl          LocalAlloc
  0014c	e58d0030	 str         r0, [sp, #0x30]
  00150	e59d3008	 ldr         r3, [sp, #8]
  00154	e2832044	 add         r2, r3, #0x44
  00158	e59d3030	 ldr         r3, [sp, #0x30]
  0015c	e5823000	 str         r3, [r2]

; 187  :         if (pDevice->wakeupKeys == NULL) {

  00160	e59d3008	 ldr         r3, [sp, #8]
  00164	e2833044	 add         r3, r3, #0x44
  00168	e5933000	 ldr         r3, [r3]
  0016c	e3530000	 cmp         r3, #0
  00170	1a000002	 bne         |$LN21@KPD_Init|

; 188  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 189  :                 L"Failed allocate structure holding the wakeup info\r\n"
; 190  :             ));

  00174	e59f04a4	 ldr         r0, [pc, #0x4A4]
  00178	eb000000	 bl          NKDbgPrintfW

; 191  :             goto cleanUp;

  0017c	ea000103	 b           |$cleanUp$43745|
  00180		 |$LN21@KPD_Init|
  00180		 |$LN22@KPD_Init|

; 192  :         }
; 193  :     }
; 194  : 
; 195  :     pDevice->hGpio = GPIOOpen();

  00180	eb000000	 bl          GPIOOpen
  00184	e58d0034	 str         r0, [sp, #0x34]
  00188	e59d3008	 ldr         r3, [sp, #8]
  0018c	e283203c	 add         r2, r3, #0x3C
  00190	e59d3034	 ldr         r3, [sp, #0x34]
  00194	e5823000	 str         r3, [r2]

; 196  :     if (pDevice->hGpio == NULL)

  00198	e59d3008	 ldr         r3, [sp, #8]
  0019c	e283303c	 add         r3, r3, #0x3C
  001a0	e5933000	 ldr         r3, [r3]
  001a4	e3530000	 cmp         r3, #0
  001a8	1a000002	 bne         |$LN20@KPD_Init|

; 197  :     {
; 198  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 199  :             L"Failed to open GPIO driver\r\n"
; 200  :         ));

  001ac	e59f0468	 ldr         r0, [pc, #0x468]
  001b0	eb000000	 bl          NKDbgPrintfW

; 201  :         goto cleanUp;

  001b4	ea0000f5	 b           |$cleanUp$43745|
  001b8		 |$LN20@KPD_Init|

; 202  :     }
; 203  : 
; 204  :     // Set cookie & initialize critical section
; 205  :     InitializeCriticalSection(&pDevice->cs);

  001b8	e59d3008	 ldr         r3, [sp, #8]
  001bc	e2830018	 add         r0, r3, #0x18
  001c0	eb000000	 bl          InitializeCriticalSection

; 206  : 
; 207  :     // Read device parameters
; 208  :     if (GetDeviceRegistryParams(
; 209  :         szContext, pDevice, dimof(g_deviceRegParams), g_deviceRegParams
; 210  :     ) != ERROR_SUCCESS) {

  001c4	e59f344c	 ldr         r3, [pc, #0x44C]
  001c8	e3a02006	 mov         r2, #6
  001cc	e59d1008	 ldr         r1, [sp, #8]
  001d0	e59d0058	 ldr         r0, [sp, #0x58]
  001d4	eb000000	 bl          GetDeviceRegistryParams
  001d8	e58d0038	 str         r0, [sp, #0x38]
  001dc	e59d3038	 ldr         r3, [sp, #0x38]
  001e0	e3530000	 cmp         r3, #0
  001e4	0a000014	 beq         |$LN19@KPD_Init|

; 211  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 212  :             L"Failed read KPD driver registry parameters\r\n"
; 213  :         ));

  001e8	e59f0424	 ldr         r0, [pc, #0x424]
  001ec	eb000000	 bl          NKDbgPrintfW

; 214  :        
; 215  :         pDevice->priority256=100;

  001f0	e59d2008	 ldr         r2, [sp, #8]
  001f4	e3a03064	 mov         r3, #0x64
  001f8	e5823000	 str         r3, [r2]

; 216  :         pDevice->samplePeriod=40;

  001fc	e59d3008	 ldr         r3, [sp, #8]
  00200	e2832008	 add         r2, r3, #8
  00204	e3a03028	 mov         r3, #0x28
  00208	e5823000	 str         r3, [r2]

; 217  :         pDevice->debounceTime=0x50;

  0020c	e59d3008	 ldr         r3, [sp, #8]
  00210	e283200c	 add         r2, r3, #0xC
  00214	e3a03050	 mov         r3, #0x50
  00218	e5823000	 str         r3, [r2]

; 218  :         pDevice->firstRepeat=500;

  0021c	e59d3008	 ldr         r3, [sp, #8]
  00220	e2832010	 add         r2, r3, #0x10
  00224	e3a03f7d	 mov         r3, #0x7D, 30
  00228	e5823000	 str         r3, [r2]

; 219  :         pDevice->nextRepeat=125;

  0022c	e59d3008	 ldr         r3, [sp, #8]
  00230	e2832014	 add         r2, r3, #0x14
  00234	e3a0307d	 mov         r3, #0x7D
  00238	e5823000	 str         r3, [r2]
  0023c		 |$LN19@KPD_Init|

; 220  : //        goto cleanUp;
; 221  :     }
; 222  : 
; 223  :     // Create interrupt event
; 224  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  0023c	e3a03000	 mov         r3, #0
  00240	e3a02000	 mov         r2, #0
  00244	e3a01000	 mov         r1, #0
  00248	e3a00000	 mov         r0, #0
  0024c	eb000000	 bl          CreateEventW
  00250	e58d003c	 str         r0, [sp, #0x3C]
  00254	e59d3008	 ldr         r3, [sp, #8]
  00258	e2832030	 add         r2, r3, #0x30
  0025c	e59d303c	 ldr         r3, [sp, #0x3C]
  00260	e5823000	 str         r3, [r2]

; 225  :     if (pDevice->hIntrEvent == NULL) {

  00264	e59d3008	 ldr         r3, [sp, #8]
  00268	e2833030	 add         r3, r3, #0x30
  0026c	e5933000	 ldr         r3, [r3]
  00270	e3530000	 cmp         r3, #0
  00274	1a000002	 bne         |$LN18@KPD_Init|

; 226  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 227  :             L"Failed create interrupt event\r\n"
; 228  :         ));

  00278	e59f0390	 ldr         r0, [pc, #0x390]
  0027c	eb000000	 bl          NKDbgPrintfW

; 229  :         goto cleanUp;

  00280	ea0000c2	 b           |$cleanUp$43745|
  00284		 |$LN18@KPD_Init|

; 230  :     }
; 231  : 
; 232  :     for (i=0;i<g_nbKeys;i++)

  00284	e3a03000	 mov         r3, #0
  00288	e58d3010	 str         r3, [sp, #0x10]
  0028c	ea000002	 b           |$LN17@KPD_Init|
  00290		 |$LN16@KPD_Init|
  00290	e59d3010	 ldr         r3, [sp, #0x10]
  00294	e2833001	 add         r3, r3, #1
  00298	e58d3010	 str         r3, [sp, #0x10]
  0029c		 |$LN17@KPD_Init|
  0029c	e59d2010	 ldr         r2, [sp, #0x10]
  002a0	e59f3360	 ldr         r3, [pc, #0x360]
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e1520003	 cmp         r2, r3
  002ac	aa00002c	 bge         |$LN15@KPD_Init|

; 233  :     {
; 234  :         GPIOSetMode(pDevice->hGpio,g_keypadVK[i].gpio,
; 235  :             GPIO_DIR_INPUT|GPIO_INT_HIGH_LOW|GPIO_INT_LOW_HIGH|GPIO_DEBOUNCE_ENABLE
; 236  :             );

  002b0	e3a02027	 mov         r2, #0x27
  002b4	e59d0010	 ldr         r0, [sp, #0x10]
  002b8	e3a03008	 mov         r3, #8
  002bc	e0010390	 mul         r1, r0, r3
  002c0	e59f3338	 ldr         r3, [pc, #0x338]
  002c4	e0833001	 add         r3, r3, r1
  002c8	e5931000	 ldr         r1, [r3]
  002cc	e59d3008	 ldr         r3, [sp, #8]
  002d0	e283303c	 add         r3, r3, #0x3C
  002d4	e5930000	 ldr         r0, [r3]
  002d8	eb000000	 bl          GPIOSetMode

; 237  : 
; 238  :         if (GPIOInterruptInitialize(pDevice->hGpio,g_keypadVK[i].gpio,
; 239  :             &pDevice->keypadSysintr[i],pDevice->hIntrEvent) == FALSE)

  002dc	e59d3008	 ldr         r3, [sp, #8]
  002e0	e2833030	 add         r3, r3, #0x30
  002e4	e5933000	 ldr         r3, [r3]
  002e8	e59d2008	 ldr         r2, [sp, #8]
  002ec	e282e040	 add         lr, r2, #0x40
  002f0	e59d0010	 ldr         r0, [sp, #0x10]
  002f4	e3a02004	 mov         r2, #4
  002f8	e0010290	 mul         r1, r0, r2
  002fc	e59e2000	 ldr         r2, [lr]
  00300	e0822001	 add         r2, r2, r1
  00304	e59de010	 ldr         lr, [sp, #0x10]
  00308	e3a01008	 mov         r1, #8
  0030c	e000019e	 mul         r0, lr, r1
  00310	e59f12e8	 ldr         r1, [pc, #0x2E8]
  00314	e0811000	 add         r1, r1, r0
  00318	e5911000	 ldr         r1, [r1]
  0031c	e59d0008	 ldr         r0, [sp, #8]
  00320	e280003c	 add         r0, r0, #0x3C
  00324	e5900000	 ldr         r0, [r0]
  00328	eb000000	 bl          GPIOInterruptInitialize
  0032c	e58d0040	 str         r0, [sp, #0x40]
  00330	e59d3040	 ldr         r3, [sp, #0x40]
  00334	e3530000	 cmp         r3, #0
  00338	1a000008	 bne         |$LN14@KPD_Init|

; 240  :         {    
; 241  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: KPD_Init: "
; 242  :                 L"Failed to initialize interrupt for GPIO %d\r\n",g_keypadVK[i].gpio
; 243  :                 ));

  0033c	e59d1010	 ldr         r1, [sp, #0x10]
  00340	e3a03008	 mov         r3, #8
  00344	e0020391	 mul         r2, r1, r3
  00348	e59f32b0	 ldr         r3, [pc, #0x2B0]
  0034c	e0833002	 add         r3, r3, r2
  00350	e5931000	 ldr         r1, [r3]
  00354	e59f02b0	 ldr         r0, [pc, #0x2B0]
  00358	eb000000	 bl          NKDbgPrintfW

; 244  :             goto cleanUp;

  0035c	ea00008b	 b           |$cleanUp$43745|
  00360		 |$LN14@KPD_Init|

; 245  :         }
; 246  :     }

  00360	eaffffca	 b           |$LN16@KPD_Init|
  00364		 |$LN15@KPD_Init|

; 247  : 
; 248  :     for (i=0;i<g_nbWakeupVKeys;i++)

  00364	e3a03000	 mov         r3, #0
  00368	e58d3010	 str         r3, [sp, #0x10]
  0036c	ea000002	 b           |$LN13@KPD_Init|
  00370		 |$LN12@KPD_Init|
  00370	e59d3010	 ldr         r3, [sp, #0x10]
  00374	e2833001	 add         r3, r3, #1
  00378	e58d3010	 str         r3, [sp, #0x10]
  0037c		 |$LN13@KPD_Init|
  0037c	e59d2010	 ldr         r2, [sp, #0x10]
  00380	e59f3274	 ldr         r3, [pc, #0x274]
  00384	e5933000	 ldr         r3, [r3]
  00388	e1520003	 cmp         r2, r3
  0038c	aa00003a	 bge         |$LN11@KPD_Init|

; 249  :     {
; 250  :         int j;
; 251  :         for (j=0;j<g_nbKeys;j++)

  00390	e3a03000	 mov         r3, #0
  00394	e58d3014	 str         r3, [sp, #0x14]
  00398	ea000002	 b           |$LN10@KPD_Init|
  0039c		 |$LN9@KPD_Init|
  0039c	e59d3014	 ldr         r3, [sp, #0x14]
  003a0	e2833001	 add         r3, r3, #1
  003a4	e58d3014	 str         r3, [sp, #0x14]
  003a8		 |$LN10@KPD_Init|
  003a8	e59d2014	 ldr         r2, [sp, #0x14]
  003ac	e59f3254	 ldr         r3, [pc, #0x254]
  003b0	e5933000	 ldr         r3, [r3]
  003b4	e1520003	 cmp         r2, r3
  003b8	aa00002e	 bge         |$LN8@KPD_Init|

; 252  :         {
; 253  :             if (g_wakeupVKeys[i] == g_keypadVK[j].vkey)

  003bc	e59f2240	 ldr         r2, [pc, #0x240]
  003c0	e59d3010	 ldr         r3, [sp, #0x10]
  003c4	e0823003	 add         r3, r2, r3
  003c8	e5d33000	 ldrb        r3, [r3]
  003cc	e1a00003	 mov         r0, r3
  003d0	e59d1014	 ldr         r1, [sp, #0x14]
  003d4	e3a03008	 mov         r3, #8
  003d8	e0020391	 mul         r2, r1, r3
  003dc	e59f321c	 ldr         r3, [pc, #0x21C]
  003e0	e0833002	 add         r3, r3, r2
  003e4	e2833004	 add         r3, r3, #4
  003e8	e5d33000	 ldrb        r3, [r3]
  003ec	e1500003	 cmp         r0, r3
  003f0	1a00001f	 bne         |$LN7@KPD_Init|

; 254  :             {
; 255  :                 pDevice->wakeupKeys[i].gpio = g_keypadVK[i].gpio;

  003f4	e59d1010	 ldr         r1, [sp, #0x10]
  003f8	e3a03008	 mov         r3, #8
  003fc	e0020391	 mul         r2, r1, r3
  00400	e59f31f8	 ldr         r3, [pc, #0x1F8]
  00404	e083e002	 add         lr, r3, r2
  00408	e59d3008	 ldr         r3, [sp, #8]
  0040c	e2830044	 add         r0, r3, #0x44
  00410	e59d1010	 ldr         r1, [sp, #0x10]
  00414	e3a03008	 mov         r3, #8
  00418	e0020391	 mul         r2, r1, r3
  0041c	e5903000	 ldr         r3, [r0]
  00420	e0832002	 add         r2, r3, r2
  00424	e59e3000	 ldr         r3, [lr]
  00428	e5823000	 str         r3, [r2]

; 256  :                 pDevice->wakeupKeys[i].dwSysintr = pDevice->keypadSysintr[i];

  0042c	e59d3008	 ldr         r3, [sp, #8]
  00430	e2830040	 add         r0, r3, #0x40
  00434	e59d1010	 ldr         r1, [sp, #0x10]
  00438	e3a03004	 mov         r3, #4
  0043c	e0020391	 mul         r2, r1, r3
  00440	e5903000	 ldr         r3, [r0]
  00444	e083e002	 add         lr, r3, r2
  00448	e59d3008	 ldr         r3, [sp, #8]
  0044c	e2830044	 add         r0, r3, #0x44
  00450	e59d1010	 ldr         r1, [sp, #0x10]
  00454	e3a03008	 mov         r3, #8
  00458	e0020391	 mul         r2, r1, r3
  0045c	e5903000	 ldr         r3, [r0]
  00460	e0833002	 add         r3, r3, r2
  00464	e2832004	 add         r2, r3, #4
  00468	e59e3000	 ldr         r3, [lr]
  0046c	e5823000	 str         r3, [r2]

; 257  :                 break;

  00470	ea000000	 b           |$LN8@KPD_Init|
  00474		 |$LN7@KPD_Init|

; 258  :             }
; 259  :         }        

  00474	eaffffc8	 b           |$LN9@KPD_Init|
  00478		 |$LN8@KPD_Init|

; 260  :     }

  00478	eaffffbc	 b           |$LN12@KPD_Init|
  0047c		 |$LN11@KPD_Init|

; 261  : 
; 262  :     // Enable wakeup from keyboard if required
; 263  :     if (pDevice->enableWake != 0)

  0047c	e59d3008	 ldr         r3, [sp, #8]
  00480	e2833004	 add         r3, r3, #4
  00484	e5933000	 ldr         r3, [r3]
  00488	e3530000	 cmp         r3, #0
  0048c	0a000021	 beq         |$LN6@KPD_Init|

; 264  :     {
; 265  :        for (i=0;i<g_nbWakeupVKeys;i++)

  00490	e3a03000	 mov         r3, #0
  00494	e58d3010	 str         r3, [sp, #0x10]
  00498	ea000002	 b           |$LN5@KPD_Init|
  0049c		 |$LN4@KPD_Init|
  0049c	e59d3010	 ldr         r3, [sp, #0x10]
  004a0	e2833001	 add         r3, r3, #1
  004a4	e58d3010	 str         r3, [sp, #0x10]
  004a8		 |$LN5@KPD_Init|
  004a8	e59d2010	 ldr         r2, [sp, #0x10]
  004ac	e59f3148	 ldr         r3, [pc, #0x148]
  004b0	e5933000	 ldr         r3, [r3]
  004b4	e1520003	 cmp         r2, r3
  004b8	aa000016	 bge         |$LN3@KPD_Init|

; 266  :        {
; 267  :            GPIOInterruptWakeUp(pDevice->hGpio,pDevice->wakeupKeys[i].gpio,
; 268  :             pDevice->wakeupKeys[i].dwSysintr,TRUE);

  004bc	e3a03001	 mov         r3, #1
  004c0	e59d2008	 ldr         r2, [sp, #8]
  004c4	e282e044	 add         lr, r2, #0x44
  004c8	e59d0010	 ldr         r0, [sp, #0x10]
  004cc	e3a02008	 mov         r2, #8
  004d0	e0010290	 mul         r1, r0, r2
  004d4	e59e2000	 ldr         r2, [lr]
  004d8	e0822001	 add         r2, r2, r1
  004dc	e2822004	 add         r2, r2, #4
  004e0	e5922000	 ldr         r2, [r2]
  004e4	e59d1008	 ldr         r1, [sp, #8]
  004e8	e2814044	 add         r4, r1, #0x44
  004ec	e59de010	 ldr         lr, [sp, #0x10]
  004f0	e3a01008	 mov         r1, #8
  004f4	e000019e	 mul         r0, lr, r1
  004f8	e5941000	 ldr         r1, [r4]
  004fc	e0811000	 add         r1, r1, r0
  00500	e5911000	 ldr         r1, [r1]
  00504	e59d0008	 ldr         r0, [sp, #8]
  00508	e280003c	 add         r0, r0, #0x3C
  0050c	e5900000	 ldr         r0, [r0]
  00510	eb000000	 bl          GPIOInterruptWakeUp

; 269  :        }

  00514	eaffffe0	 b           |$LN4@KPD_Init|
  00518		 |$LN3@KPD_Init|
  00518		 |$LN6@KPD_Init|

; 270  :     }
; 271  : 
; 272  :     // Start interrupt service thread
; 273  :     if ((pDevice->hIntrThread = CreateThread(
; 274  :         NULL, 0, KPD_IntrThread, pDevice, 0,NULL
; 275  :     )) == NULL) {

  00518	e3a03000	 mov         r3, #0
  0051c	e58d3004	 str         r3, [sp, #4]
  00520	e3a03000	 mov         r3, #0
  00524	e58d3000	 str         r3, [sp]
  00528	e59d3008	 ldr         r3, [sp, #8]
  0052c	e59f20c4	 ldr         r2, [pc, #0xC4]
  00530	e3a01000	 mov         r1, #0
  00534	e3a00000	 mov         r0, #0
  00538	eb000000	 bl          CreateThread
  0053c	e58d0044	 str         r0, [sp, #0x44]
  00540	e59d3008	 ldr         r3, [sp, #8]
  00544	e2832034	 add         r2, r3, #0x34
  00548	e59d3044	 ldr         r3, [sp, #0x44]
  0054c	e5823000	 str         r3, [r2]
  00550	e59d3008	 ldr         r3, [sp, #8]
  00554	e2833034	 add         r3, r3, #0x34
  00558	e5933000	 ldr         r3, [r3]
  0055c	e3530000	 cmp         r3, #0
  00560	1a000002	 bne         |$LN2@KPD_Init|

; 276  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Init: "
; 277  :             L"Failed create interrupt thread\r\n"
; 278  :         ));

  00564	e59f0088	 ldr         r0, [pc, #0x88]
  00568	eb000000	 bl          NKDbgPrintfW

; 279  :         goto cleanUp;

  0056c	ea000007	 b           |$cleanUp$43745|
  00570		 |$LN2@KPD_Init|

; 280  :     }
; 281  :     // Set thread priority
; 282  :     CeSetThreadPriority(pDevice->hIntrThread, pDevice->priority256);

  00570	e59d3008	 ldr         r3, [sp, #8]
  00574	e5931000	 ldr         r1, [r3]
  00578	e59d3008	 ldr         r3, [sp, #8]
  0057c	e2833034	 add         r3, r3, #0x34
  00580	e5930000	 ldr         r0, [r3]
  00584	eb000000	 bl          CeSetThreadPriority

; 283  : 
; 284  :     // Return non-null value
; 285  :     rc = (DWORD)pDevice;

  00588	e59d3008	 ldr         r3, [sp, #8]
  0058c	e58d300c	 str         r3, [sp, #0xC]
  00590		 |$cleanUp$43745|

; 286  : 
; 287  : cleanUp:
; 288  :     if (rc == 0) KPD_Deinit((DWORD)pDevice);

  00590	e59d300c	 ldr         r3, [sp, #0xC]
  00594	e3530000	 cmp         r3, #0
  00598	1a000001	 bne         |$LN1@KPD_Init|
  0059c	e59d0008	 ldr         r0, [sp, #8]
  005a0	eb000000	 bl          KPD_Deinit
  005a4		 |$LN1@KPD_Init|

; 289  :     DEBUGMSG(ZONE_FUNCTION, (L"-KPD_Init(rc = %d\r\n", rc));

  005a4	e59f3044	 ldr         r3, [pc, #0x44]
  005a8	e5933440	 ldr         r3, [r3, #0x440]
  005ac	e3130004	 tst         r3, #4
  005b0	0a000005	 beq         |$LN32@KPD_Init|
  005b4	e59d100c	 ldr         r1, [sp, #0xC]
  005b8	e59f002c	 ldr         r0, [pc, #0x2C]
  005bc	eb000000	 bl          NKDbgPrintfW
  005c0	e3a03001	 mov         r3, #1
  005c4	e58d3048	 str         r3, [sp, #0x48]
  005c8	ea000001	 b           |$LN33@KPD_Init|
  005cc		 |$LN32@KPD_Init|
  005cc	e3a03000	 mov         r3, #0
  005d0	e58d3048	 str         r3, [sp, #0x48]
  005d4		 |$LN33@KPD_Init|

; 290  : 
; 291  :     return rc;

  005d4	e59d300c	 ldr         r3, [sp, #0xC]
  005d8	e58d3020	 str         r3, [sp, #0x20]

; 292  : }

  005dc	e59d0020	 ldr         r0, [sp, #0x20]
  005e0	e28dd04c	 add         sp, sp, #0x4C
  005e4	e89d6010	 ldmia       sp, {r4, sp, lr}
  005e8	e12fff1e	 bx          lr
  005ec		 |$LN37@KPD_Init|
  005ec		 |$LN38@KPD_Init|
  005ec	00000000	 DCD         |??_C@_1CI@PJBAKFDG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  005f0		 |$LN39@KPD_Init|
  005f0	00000000	 DCD         |dpCurSettings|
  005f4		 |$LN40@KPD_Init|
  005f4	00000000	 DCD         |??_C@_1GE@DGHBDAGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  005f8		 |$LN41@KPD_Init|
  005f8	00000000	 DCD         |KPD_IntrThread|
  005fc		 |$LN42@KPD_Init|
  005fc	00000000	 DCD         |g_nbWakeupVKeys|
  00600		 |$LN43@KPD_Init|
  00600	00000000	 DCD         |g_keypadVK|
  00604		 |$LN44@KPD_Init|
  00604	00000000	 DCD         |g_wakeupVKeys|
  00608		 |$LN45@KPD_Init|
  00608	00000000	 DCD         |g_nbKeys|
  0060c		 |$LN46@KPD_Init|
  0060c	00000000	 DCD         |??_C@_1HM@GMGMNBCB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi@|
  00610		 |$LN47@KPD_Init|
  00610	00000000	 DCD         |??_C@_1GC@GEGIKHEP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  00614		 |$LN48@KPD_Init|
  00614	00000000	 DCD         |??_C@_1HM@HJLGMMDG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAK?$AAP?$AAD@|
  00618		 |$LN49@KPD_Init|
  00618	00000000	 DCD         |g_deviceRegParams|
  0061c		 |$LN50@KPD_Init|
  0061c	00000000	 DCD         |??_C@_1FM@HGADHAMF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5@|
  00620		 |$LN51@KPD_Init|
  00620	00000000	 DCD         |??_C@_1IK@EOJHNAOH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00624		 |$LN52@KPD_Init|
  00624	00000000	 DCD         |??_C@_1IC@KEGHAGPC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00628		 |$LN53@KPD_Init|
  00628	00000000	 DCD         |??_C@_1HA@BBDEHIIK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  0062c		 |$LN54@KPD_Init|
  0062c	00000000	 DCD         |??_C@_1DA@JGMFAHJF@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00630		 |$M44080|

			 ENDP  ; |KPD_Init|

	EXPORT	|??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|GPIOClose|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|CloseHandle|
	IMPORT	|GPIOInterruptDisable|
	IMPORT	|WaitForSingleObject|

  00008			 AREA	 |.pdata|, PDATA
|$T44110| DCD	|$LN21@KPD_Deinit|
	DCD	0x4000ad04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00630			 AREA	 |.text|, CODE, ARM

  00630		 |KPD_Deinit| PROC

; 301  : {

  00630		 |$LN21@KPD_Deinit|
  00630	e1a0c00d	 mov         r12, sp
  00634	e92d0001	 stmdb       sp!, {r0}
  00638	e92d5010	 stmdb       sp!, {r4, r12, lr}
  0063c	e24dd018	 sub         sp, sp, #0x18
  00640		 |$M44107|

; 302  :     int i;
; 303  :     BOOL rc = FALSE;

  00640	e3a03000	 mov         r3, #0
  00644	e58d3004	 str         r3, [sp, #4]

; 304  :     KPD_DEVICE *pDevice = (KPD_DEVICE*)context;

  00648	e59d3024	 ldr         r3, [sp, #0x24]
  0064c	e58d3000	 str         r3, [sp]

; 305  : 
; 306  : 
; 307  :     DEBUGMSG(ZONE_FUNCTION, (L"+KPD_Deinit(0x%08x)\r\n", context));

  00650	e59f3274	 ldr         r3, [pc, #0x274]
  00654	e5933440	 ldr         r3, [r3, #0x440]
  00658	e3130004	 tst         r3, #4
  0065c	0a000005	 beq         |$LN15@KPD_Deinit|
  00660	e59d1024	 ldr         r1, [sp, #0x24]
  00664	e59f0274	 ldr         r0, [pc, #0x274]
  00668	eb000000	 bl          NKDbgPrintfW
  0066c	e3a03001	 mov         r3, #1
  00670	e58d3010	 str         r3, [sp, #0x10]
  00674	ea000001	 b           |$LN16@KPD_Deinit|
  00678		 |$LN15@KPD_Deinit|
  00678	e3a03000	 mov         r3, #0
  0067c	e58d3010	 str         r3, [sp, #0x10]
  00680		 |$LN16@KPD_Deinit|

; 308  : 
; 309  :     // Check if we get correct context
; 310  :     if (pDevice == NULL) {

  00680	e59d3000	 ldr         r3, [sp]
  00684	e3530000	 cmp         r3, #0
  00688	1a000002	 bne         |$LN12@KPD_Deinit|

; 311  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: KPD_Deinit: "
; 312  :             L"Incorrect context parameter\r\n"
; 313  :         ));

  0068c	e59f0248	 ldr         r0, [pc, #0x248]
  00690	eb000000	 bl          NKDbgPrintfW

; 314  :         goto cleanUp;

  00694	ea000079	 b           |$cleanUp$43818|
  00698		 |$LN12@KPD_Deinit|

; 315  :     }
; 316  : 
; 317  :     // Close interrupt thread
; 318  :     if (pDevice->hIntrThread != NULL) {

  00698	e59d3000	 ldr         r3, [sp]
  0069c	e2833034	 add         r3, r3, #0x34
  006a0	e5933000	 ldr         r3, [r3]
  006a4	e3530000	 cmp         r3, #0
  006a8	0a00000c	 beq         |$LN11@KPD_Deinit|

; 319  :         // Signal stop to thread
; 320  :         pDevice->intrThreadExit = TRUE;

  006ac	e59d3000	 ldr         r3, [sp]
  006b0	e2832038	 add         r2, r3, #0x38
  006b4	e3a03001	 mov         r3, #1
  006b8	e5823000	 str         r3, [r2]

; 321  :         // Set event to wake it
; 322  :         SetEvent(pDevice->hIntrEvent);

  006bc	e59d3000	 ldr         r3, [sp]
  006c0	e2833030	 add         r3, r3, #0x30
  006c4	e5930000	 ldr         r0, [r3]
  006c8	eb000000	 bl          SetEvent

; 323  :         // Wait until thread exits
; 324  :         WaitForSingleObject(pDevice->hIntrThread, INFINITE);

  006cc	e3e01000	 mvn         r1, #0
  006d0	e59d3000	 ldr         r3, [sp]
  006d4	e2833034	 add         r3, r3, #0x34
  006d8	e5930000	 ldr         r0, [r3]
  006dc	eb000000	 bl          WaitForSingleObject
  006e0		 |$LN11@KPD_Deinit|

; 325  :     }
; 326  : 
; 327  :     // Disable wakeup
; 328  :     if (pDevice->enableWake != 0)

  006e0	e59d3000	 ldr         r3, [sp]
  006e4	e2833004	 add         r3, r3, #4
  006e8	e5933000	 ldr         r3, [r3]
  006ec	e3530000	 cmp         r3, #0
  006f0	0a000021	 beq         |$LN10@KPD_Deinit|

; 329  :     {
; 330  :        for (i=0;i<g_nbWakeupVKeys;i++)

  006f4	e3a03000	 mov         r3, #0
  006f8	e58d3008	 str         r3, [sp, #8]
  006fc	ea000002	 b           |$LN9@KPD_Deinit|
  00700		 |$LN8@KPD_Deinit|
  00700	e59d3008	 ldr         r3, [sp, #8]
  00704	e2833001	 add         r3, r3, #1
  00708	e58d3008	 str         r3, [sp, #8]
  0070c		 |$LN9@KPD_Deinit|
  0070c	e59d2008	 ldr         r2, [sp, #8]
  00710	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00714	e5933000	 ldr         r3, [r3]
  00718	e1520003	 cmp         r2, r3
  0071c	aa000016	 bge         |$LN7@KPD_Deinit|

; 331  :        {
; 332  :             GPIOInterruptWakeUp(pDevice->hGpio,pDevice->wakeupKeys[i].gpio,
; 333  :             pDevice->wakeupKeys[i].dwSysintr,FALSE);

  00720	e3a03000	 mov         r3, #0
  00724	e59d2000	 ldr         r2, [sp]
  00728	e282e044	 add         lr, r2, #0x44
  0072c	e59d0008	 ldr         r0, [sp, #8]
  00730	e3a02008	 mov         r2, #8
  00734	e0010290	 mul         r1, r0, r2
  00738	e59e2000	 ldr         r2, [lr]
  0073c	e0822001	 add         r2, r2, r1
  00740	e2822004	 add         r2, r2, #4
  00744	e5922000	 ldr         r2, [r2]
  00748	e59d1000	 ldr         r1, [sp]
  0074c	e2814044	 add         r4, r1, #0x44
  00750	e59de008	 ldr         lr, [sp, #8]
  00754	e3a01008	 mov         r1, #8
  00758	e000019e	 mul         r0, lr, r1
  0075c	e5941000	 ldr         r1, [r4]
  00760	e0811000	 add         r1, r1, r0
  00764	e5911000	 ldr         r1, [r1]
  00768	e59d0000	 ldr         r0, [sp]
  0076c	e280003c	 add         r0, r0, #0x3C
  00770	e5900000	 ldr         r0, [r0]
  00774	eb000000	 bl          GPIOInterruptWakeUp

; 334  :        }

  00778	eaffffe0	 b           |$LN8@KPD_Deinit|
  0077c		 |$LN7@KPD_Deinit|
  0077c		 |$LN10@KPD_Deinit|

; 335  :     }
; 336  :     // Disable interrupts
; 337  :     for (i=0;i<g_nbKeys;i++)

  0077c	e3a03000	 mov         r3, #0
  00780	e58d3008	 str         r3, [sp, #8]
  00784	ea000002	 b           |$LN6@KPD_Deinit|
  00788		 |$LN5@KPD_Deinit|
  00788	e59d3008	 ldr         r3, [sp, #8]
  0078c	e2833001	 add         r3, r3, #1
  00790	e58d3008	 str         r3, [sp, #8]
  00794		 |$LN6@KPD_Deinit|
  00794	e59d2008	 ldr         r2, [sp, #8]
  00798	e59f3134	 ldr         r3, [pc, #0x134]
  0079c	e5933000	 ldr         r3, [r3]
  007a0	e1520003	 cmp         r2, r3
  007a4	aa00001c	 bge         |$LN4@KPD_Deinit|

; 338  :     {
; 339  :         if (pDevice->keypadSysintr[i] != (DWORD) SYSINTR_UNDEFINED)

  007a8	e59d3000	 ldr         r3, [sp]
  007ac	e2830040	 add         r0, r3, #0x40
  007b0	e59d1008	 ldr         r1, [sp, #8]
  007b4	e3a03004	 mov         r3, #4
  007b8	e0020391	 mul         r2, r1, r3
  007bc	e5903000	 ldr         r3, [r0]
  007c0	e0833002	 add         r3, r3, r2
  007c4	e5933000	 ldr         r3, [r3]
  007c8	e3730001	 cmn         r3, #1
  007cc	0a000011	 beq         |$LN3@KPD_Deinit|

; 340  :         {
; 341  :             GPIOInterruptDisable(pDevice->hGpio,g_keypadVK[i].gpio,pDevice->keypadSysintr[i]);

  007d0	e59d3000	 ldr         r3, [sp]
  007d4	e2830040	 add         r0, r3, #0x40
  007d8	e59d1008	 ldr         r1, [sp, #8]
  007dc	e3a03004	 mov         r3, #4
  007e0	e0020391	 mul         r2, r1, r3
  007e4	e5903000	 ldr         r3, [r0]
  007e8	e0833002	 add         r3, r3, r2
  007ec	e5932000	 ldr         r2, [r3]
  007f0	e59d0008	 ldr         r0, [sp, #8]
  007f4	e3a03008	 mov         r3, #8
  007f8	e0010390	 mul         r1, r0, r3
  007fc	e59f30cc	 ldr         r3, [pc, #0xCC]
  00800	e0833001	 add         r3, r3, r1
  00804	e5931000	 ldr         r1, [r3]
  00808	e59d3000	 ldr         r3, [sp]
  0080c	e283303c	 add         r3, r3, #0x3C
  00810	e5930000	 ldr         r0, [r3]
  00814	eb000000	 bl          GPIOInterruptDisable
  00818		 |$LN3@KPD_Deinit|

; 342  :         }
; 343  :     }

  00818	eaffffda	 b           |$LN5@KPD_Deinit|
  0081c		 |$LN4@KPD_Deinit|

; 344  : 
; 345  :     // Close interrupt handler
; 346  :     if (pDevice->hIntrEvent != NULL) CloseHandle(pDevice->hIntrEvent);

  0081c	e59d3000	 ldr         r3, [sp]
  00820	e2833030	 add         r3, r3, #0x30
  00824	e5933000	 ldr         r3, [r3]
  00828	e3530000	 cmp         r3, #0
  0082c	0a000003	 beq         |$LN2@KPD_Deinit|
  00830	e59d3000	 ldr         r3, [sp]
  00834	e2833030	 add         r3, r3, #0x30
  00838	e5930000	 ldr         r0, [r3]
  0083c	eb000000	 bl          CloseHandle
  00840		 |$LN2@KPD_Deinit|

; 347  : 
; 348  :     // Delete critical section
; 349  :     DeleteCriticalSection(&pDevice->cs);

  00840	e59d3000	 ldr         r3, [sp]
  00844	e2830018	 add         r0, r3, #0x18
  00848	eb000000	 bl          DeleteCriticalSection

; 350  : 
; 351  :     if (pDevice->hGpio == NULL)

  0084c	e59d3000	 ldr         r3, [sp]
  00850	e283303c	 add         r3, r3, #0x3C
  00854	e5933000	 ldr         r3, [r3]
  00858	e3530000	 cmp         r3, #0
  0085c	1a000003	 bne         |$LN1@KPD_Deinit|

; 352  :     {
; 353  :         GPIOClose(pDevice->hGpio);

  00860	e59d3000	 ldr         r3, [sp]
  00864	e283303c	 add         r3, r3, #0x3C
  00868	e5930000	 ldr         r0, [r3]
  0086c	eb000000	 bl          GPIOClose
  00870		 |$LN1@KPD_Deinit|

; 354  :     }
; 355  :     // Free device structure
; 356  :     LocalFree(pDevice);

  00870	e59d0000	 ldr         r0, [sp]
  00874	eb000000	 bl          LocalFree

; 357  : 
; 358  :     // Done
; 359  :     rc = TRUE;

  00878	e3a03001	 mov         r3, #1
  0087c	e58d3004	 str         r3, [sp, #4]
  00880		 |$cleanUp$43818|

; 360  : 
; 361  : cleanUp:
; 362  :     DEBUGMSG(ZONE_FUNCTION, (L"-KPD_Deinit(rc = %d)\r\n", rc));

  00880	e59f3044	 ldr         r3, [pc, #0x44]
  00884	e5933440	 ldr         r3, [r3, #0x440]
  00888	e3130004	 tst         r3, #4
  0088c	0a000005	 beq         |$LN17@KPD_Deinit|
  00890	e59d1004	 ldr         r1, [sp, #4]
  00894	e59f002c	 ldr         r0, [pc, #0x2C]
  00898	eb000000	 bl          NKDbgPrintfW
  0089c	e3a03001	 mov         r3, #1
  008a0	e58d3014	 str         r3, [sp, #0x14]
  008a4	ea000001	 b           |$LN18@KPD_Deinit|
  008a8		 |$LN17@KPD_Deinit|
  008a8	e3a03000	 mov         r3, #0
  008ac	e58d3014	 str         r3, [sp, #0x14]
  008b0		 |$LN18@KPD_Deinit|

; 363  :     return rc;

  008b0	e59d3004	 ldr         r3, [sp, #4]
  008b4	e58d300c	 str         r3, [sp, #0xC]

; 364  : }

  008b8	e59d000c	 ldr         r0, [sp, #0xC]
  008bc	e28dd018	 add         sp, sp, #0x18
  008c0	e89d6010	 ldmia       sp, {r4, sp, lr}
  008c4	e12fff1e	 bx          lr
  008c8		 |$LN22@KPD_Deinit|
  008c8		 |$LN23@KPD_Deinit|
  008c8	00000000	 DCD         |??_C@_1CO@KIAKGMKG@?$AA?9?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  008cc		 |$LN24@KPD_Deinit|
  008cc	00000000	 DCD         |dpCurSettings|
  008d0		 |$LN25@KPD_Deinit|
  008d0	00000000	 DCD         |g_keypadVK|
  008d4		 |$LN26@KPD_Deinit|
  008d4	00000000	 DCD         |g_nbKeys|
  008d8		 |$LN27@KPD_Deinit|
  008d8	00000000	 DCD         |g_nbWakeupVKeys|
  008dc		 |$LN28@KPD_Deinit|
  008dc	00000000	 DCD         |??_C@_1GC@LHDLLPBO@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  008e0		 |$LN29@KPD_Deinit|
  008e0	00000000	 DCD         |??_C@_1CM@HMGFFFCN@?$AA?$CL?$AAK?$AAP?$AAD?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  008e4		 |$M44108|

			 ENDP  ; |KPD_Deinit|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T44124| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M44121|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M44122|

			 ENDP  ; |SetEvent|

	EXPORT	|KPD_Open|

  00010			 AREA	 |.pdata|, PDATA
|$T44132| DCD	|$LN5@KPD_Open|
	DCD	0x40000a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\keypad\gpio_keypad\gpio_keypad.c

  008e4			 AREA	 |.text|, CODE, ARM

  008e4		 |KPD_Open| PROC

; 373  : {

  008e4		 |$LN5@KPD_Open|
  008e4	e1a0c00d	 mov         r12, sp
  008e8	e92d0007	 stmdb       sp!, {r0 - r2}
  008ec	e92d5000	 stmdb       sp!, {r12, lr}
  008f0	e24dd004	 sub         sp, sp, #4
  008f4		 |$M44129|

; 374  :     UNREFERENCED_PARAMETER(context);
; 375  :     UNREFERENCED_PARAMETER(accessCode);
; 376  :     UNREFERENCED_PARAMETER(shareMode);
; 377  :     return context;

  008f4	e59d300c	 ldr         r3, [sp, #0xC]
  008f8	e58d3000	 str         r3, [sp]

; 378  : }

  008fc	e59d0000	 ldr         r0, [sp]
  00900	e28dd004	 add         sp, sp, #4
  00904	e89d6000	 ldmia       sp, {sp, lr}
  00908	e12fff1e	 bx          lr
  0090c		 |$M44130|

			 ENDP  ; |KPD_Open|

	EXPORT	|KPD_Close|

  00018			 AREA	 |.pdata|, PDATA
|$T44138| DCD	|$LN5@KPD_Close|
	DCD	0x40000a04
; Function compile flags: /Odtp

  0090c			 AREA	 |.text|, CODE, ARM

  0090c		 |KPD_Close| PROC

; 387  : {

  0090c		 |$LN5@KPD_Close|
  0090c	e1a0c00d	 mov         r12, sp
  00910	e92d0001	 stmdb       sp!, {r0}
  00914	e92d5000	 stmdb       sp!, {r12, lr}
  00918	e24dd004	 sub         sp, sp, #4
  0091c		 |$M44135|

; 388  :     UNREFERENCED_PARAMETER(context);
; 389  :     return TRUE;

  0091c	e3a03001	 mov         r3, #1
  00920	e58d3000	 str         r3, [sp]

; 390  : }

  00924	e59d0000	 ldr         r0, [sp]
  00928	e28dd004	 add         sp, sp, #4
  0092c	e89d6000	 ldmia       sp, {sp, lr}
  00930	e12fff1e	 bx          lr
  00934		 |$M44136|

			 ENDP  ; |KPD_Close|

	EXPORT	|??_C@_1BM@IHFPBAPO@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|KPD_IOControl|

  00020			 AREA	 |.pdata|, PDATA
|$T44144| DCD	|$LN5@KPD_IOCont|
	DCD	0x40000d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@IHFPBAPO@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00934			 AREA	 |.text|, CODE, ARM

  00934		 |KPD_IOControl| PROC

; 401  : ) {

  00934		 |$LN5@KPD_IOCont|
  00934	e1a0c00d	 mov         r12, sp
  00938	e92d000f	 stmdb       sp!, {r0 - r3}
  0093c	e92d5000	 stmdb       sp!, {r12, lr}
  00940	e24dd004	 sub         sp, sp, #4
  00944		 |$M44141|

; 402  :     UNREFERENCED_PARAMETER(context);
; 403  :     UNREFERENCED_PARAMETER(code);
; 404  :     UNREFERENCED_PARAMETER(pInBuffer);
; 405  :     UNREFERENCED_PARAMETER(inSize);
; 406  :     UNREFERENCED_PARAMETER(pOutBuffer);
; 407  :     UNREFERENCED_PARAMETER(outSize);
; 408  :     UNREFERENCED_PARAMETER(pOutSize);
; 409  :     DEBUGMSG(ZONE_INIT, (L"KPD_IOControl"));

  00944	e59f0018	 ldr         r0, [pc, #0x18]
  00948	eb000000	 bl          NKDbgPrintfW

; 410  :     return FALSE;

  0094c	e3a03000	 mov         r3, #0
  00950	e58d3000	 str         r3, [sp]

; 411  : }

  00954	e59d0000	 ldr         r0, [sp]
  00958	e28dd004	 add         sp, sp, #4
  0095c	e89d6000	 ldmia       sp, {sp, lr}
  00960	e12fff1e	 bx          lr
  00964		 |$LN6@KPD_IOCont|
  00964		 |$LN7@KPD_IOCont|
  00964	00000000	 DCD         |??_C@_1BM@IHFPBAPO@?$AAK?$AAP?$AAD?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$AA@|
  00968		 |$M44142|

			 ENDP  ; |KPD_IOControl|

	EXPORT	|??_C@_1GI@CJMEHCNE@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@OEJPKNOP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn?$AAe?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@NOFDFHJD@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@FIDBIEFP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BG@OOGCKOCO@?$AAV?$AAK?$AA_?$AAT?$AAS?$AAT?$AAA?$AAR?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@DJAIAEGH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@JANBOJMA@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA2?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CE@NEDINNM@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@CMLBFIDH@?$AAK?$AAP?$AAD?$AA?5?$AA?9?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|GPIOInterruptDone|
	IMPORT	|memcpy|
	IMPORT	|PowerPolicyNotify|
	IMPORT	|keybd_event|
	IMPORT	|GetTickCount|
	IMPORT	|GPIOGetBit|
	IMPORT	|Sleep|
	IMPORT	|g_keypadRepeat|
	IMPORT	|g_keypadRemap|
	IMPORT	|memset|

  00028			 AREA	 |.pdata|, PDATA
|$T44182| DCD	|$LN111@KPD_IntrTh|
	DCD	0x4003e204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@CJMEHCNE@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?0?$AA?5@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, ","
	DCB	0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, " ", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@OEJPKNOP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn?$AAe?$AAx@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "P", 0x0, "r"
	DCB	0x0, "e", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "n", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "r", 0x0, "u", 0x0, "n"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, " ", 0x0, "R", 0x0, "e", 0x0, "p", 0x0, "e"
	DCB	0x0, "a", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@NOFDFHJD@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "B", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, " ", 0x0, "b"
	DCB	0x0, "e", 0x0, "c", 0x0, "a", 0x0, "u", 0x0, "s", 0x0, "e"
	DCB	0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@FIDBIEFP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, " ", 0x0, "U", 0x0, "p", 0x0, ":", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BG@OOGCKOCO@?$AAV?$AAK?$AA_?$AAT?$AAS?$AAT?$AAA?$AAR?$AA?$AN?$AA?6?$AA?$AA@| DCB "V"
	DCB	0x0, "K", 0x0, "_", 0x0, "T", 0x0, "S", 0x0, "T", 0x0, "A"
	DCB	0x0, "R", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@DJAIAEGH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "K", 0x0, "e"
	DCB	0x0, "y", 0x0, " ", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@JANBOJMA@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA2?$AA?$AN?$AA?6?$AA?$AA@| DCB "k"
	DCB	0x0, "e", 0x0, "y", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "T", 0x0, "R", 0x0, "U"
	DCB	0x0, "E", 0x0, " ", 0x0, "2", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "a"
	DCB	0x0, "n", 0x0, "d", 0x0, " ", 0x0, "h", 0x0, "o", 0x0, "l"
	DCB	0x0, "d", 0x0, " ", 0x0, "v", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "M", 0x0, "a"
	DCB	0x0, "p", 0x0, "p", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "v"
	DCB	0x0, "k", 0x0, "e", 0x0, "y", 0x0, ":", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CE@NEDINNM@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "k"
	DCB	0x0, "e", 0x0, "y", 0x0, "D", 0x0, "o", 0x0, "w", 0x0, "n"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "T", 0x0, "R", 0x0, "U"
	DCB	0x0, "E", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, " ", 0x0, "a", 0x0, "u", 0x0, "t", 0x0, "o", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "p", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB " "
	DCB	0x0, "K", 0x0, "P", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "m", 0x0, "e", 0x0, "m", 0x0, "o"
	DCB	0x0, "r", 0x0, "y", 0x0, " ", 0x0, "f", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "v", 0x0, "i", 0x0, "r", 0x0, "t", 0x0, "u"
	DCB	0x0, "a", 0x0, "l", 0x0, " ", 0x0, "k", 0x0, "e", 0x0, "y"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "m", 0x0, "a", 0x0, "p"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@CMLBFIDH@?$AAK?$AAP?$AAD?$AA?5?$AA?9?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "K"
	DCB	0x0, "P", 0x0, "D", 0x0, " ", 0x0, "-", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "T", 0x0, "h", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00968			 AREA	 |.text|, CODE, ARM

  00968		 |KPD_IntrThread| PROC

; 420  : {

  00968		 |$LN111@KPD_IntrTh|
  00968	e1a0c00d	 mov         r12, sp
  0096c	e92d0001	 stmdb       sp!, {r0}
  00970	e92d5000	 stmdb       sp!, {r12, lr}
  00974	e24dd0f0	 sub         sp, sp, #0xF0
  00978		 |$M44179|

; 421  : //#define KEY_MASK    ((1<<g_nbKeys)-1)
; 422  :     int index;
; 423  :     KPD_DEVICE *pDevice = (KPD_DEVICE*)pContext;

  00978	e59d30f8	 ldr         r3, [sp, #0xF8]
  0097c	e58d3000	 str         r3, [sp]

; 424  :     DWORD timeout, time, ix;
; 425  :     DWORD change, mask;
; 426  :     UINT16 i;
; 427  :     USHORT data;
; 428  :     UINT16 ic=0;

  00980	e3a03000	 mov         r3, #0
  00984	e1cd34b4	 strh        r3, [sp, #0x44]

; 429  :     DWORD vkState[VK_KEYS/DWORD_BITS], vkNewState[VK_KEYS/DWORD_BITS];
; 430  :     KEYPAD_REMAP_STATE *pRemapState = NULL;

  00988	e3a03000	 mov         r3, #0
  0098c	e58d300c	 str         r3, [sp, #0xC]

; 431  :     KEYPAD_REPEAT_STATE *pRepeatState = NULL;

  00990	e3a03000	 mov         r3, #0
  00994	e58d301c	 str         r3, [sp, #0x1C]

; 432  :     BOOL keyDown;
; 433  :     UCHAR vk=0;

  00998	e3a03000	 mov         r3, #0
  0099c	e5cd3004	 strb        r3, [sp, #4]

; 434  : 
; 435  :     DEBUGMSG(ZONE_IST, (L"KPD - Start IntrThread\r\n"));

  009a0	e59f3f08	 ldr         r3, [pc, #0xF08]
  009a4	e5933440	 ldr         r3, [r3, #0x440]
  009a8	e3130020	 tst         r3, #0x20
  009ac	0a000004	 beq         |$LN79@KPD_IntrTh|
  009b0	e59f0f34	 ldr         r0, [pc, #0xF34]
  009b4	eb000000	 bl          NKDbgPrintfW
  009b8	e3a03001	 mov         r3, #1
  009bc	e58d309c	 str         r3, [sp, #0x9C]
  009c0	ea000001	 b           |$LN80@KPD_IntrTh|
  009c4		 |$LN79@KPD_IntrTh|
  009c4	e3a03000	 mov         r3, #0
  009c8	e58d309c	 str         r3, [sp, #0x9C]
  009cc		 |$LN80@KPD_IntrTh|

; 436  : 
; 437  :     // Init data
; 438  :     memset(vkState, 0, sizeof(vkState));

  009cc	e3a02020	 mov         r2, #0x20
  009d0	e3a01000	 mov         r1, #0
  009d4	e28d004c	 add         r0, sp, #0x4C
  009d8	eb000000	 bl          memset

; 439  : 
; 440  :     // Initialize remap informations
; 441  :     if (g_keypadRemap.count > 0) {

  009dc	e59f3ef8	 ldr         r3, [pc, #0xEF8]
  009e0	e1d330b0	 ldrh        r3, [r3]
  009e4	e3530000	 cmp         r3, #0
  009e8	da00000e	 ble         |$LN76@KPD_IntrTh|

; 442  :         // Allocate state structure for remap
; 443  :         if ((pRemapState = LocalAlloc(
; 444  :             LPTR, g_keypadRemap.count * sizeof(KEYPAD_REMAP_STATE)
; 445  :         ))  == NULL) {

  009ec	e59f3ee8	 ldr         r3, [pc, #0xEE8]
  009f0	e1d320b0	 ldrh        r2, [r3]
  009f4	e3a03010	 mov         r3, #0x10
  009f8	e0010392	 mul         r1, r2, r3
  009fc	e3a00040	 mov         r0, #0x40
  00a00	eb000000	 bl          LocalAlloc
  00a04	e58d00a0	 str         r0, [sp, #0xA0]
  00a08	e59d30a0	 ldr         r3, [sp, #0xA0]
  00a0c	e58d300c	 str         r3, [sp, #0xC]
  00a10	e59d300c	 ldr         r3, [sp, #0xC]
  00a14	e3530000	 cmp         r3, #0
  00a18	1a000002	 bne         |$LN75@KPD_IntrTh|

; 446  :             DEBUGMSG(ZONE_ERROR, (L" KPD_IntrThread: "
; 447  :                 L"Failed allocate memory for virtual key remap\r\n"
; 448  :             ));

  00a1c	e59f0ec4	 ldr         r0, [pc, #0xEC4]
  00a20	eb000000	 bl          NKDbgPrintfW

; 449  :             goto cleanUp;

  00a24	ea00038e	 b           |$cleanUp$43896|
  00a28		 |$LN75@KPD_IntrTh|
  00a28		 |$LN76@KPD_IntrTh|

; 450  :         }
; 451  :     }
; 452  : 
; 453  :     // Initialize repeat informations
; 454  :     if (g_keypadRepeat.count > 0) {

  00a28	e59f3e90	 ldr         r3, [pc, #0xE90]
  00a2c	e1d330b0	 ldrh        r3, [r3]
  00a30	e3530000	 cmp         r3, #0
  00a34	da00000e	 ble         |$LN74@KPD_IntrTh|

; 455  :         // Allocate state structure for remap
; 456  :         if ((pRepeatState = LocalAlloc(
; 457  :             LPTR, g_keypadRepeat.count * sizeof(KEYPAD_REPEAT_STATE)
; 458  :         ))  == NULL) {

  00a38	e59f3e80	 ldr         r3, [pc, #0xE80]
  00a3c	e1d320b0	 ldrh        r2, [r3]
  00a40	e3a0300c	 mov         r3, #0xC
  00a44	e0010392	 mul         r1, r2, r3
  00a48	e3a00040	 mov         r0, #0x40
  00a4c	eb000000	 bl          LocalAlloc
  00a50	e58d00a4	 str         r0, [sp, #0xA4]
  00a54	e59d30a4	 ldr         r3, [sp, #0xA4]
  00a58	e58d301c	 str         r3, [sp, #0x1C]
  00a5c	e59d301c	 ldr         r3, [sp, #0x1C]
  00a60	e3530000	 cmp         r3, #0
  00a64	1a000002	 bne         |$LN73@KPD_IntrTh|

; 459  :             DEBUGMSG(ZONE_ERROR, (L" KPD_IntrThread: "
; 460  :                 L"Failed allocate memory for virtual key auto repeat\r\n"
; 461  :             ));

  00a68	e59f0e74	 ldr         r0, [pc, #0xE74]
  00a6c	eb000000	 bl          NKDbgPrintfW

; 462  :             goto cleanUp;

  00a70	ea00037b	 b           |$cleanUp$43896|
  00a74		 |$LN73@KPD_IntrTh|
  00a74		 |$LN74@KPD_IntrTh|

; 463  :         }
; 464  :     }
; 465  : 
; 466  :     // Set delay to sample period
; 467  :     timeout = INFINITE;

  00a74	e3e03000	 mvn         r3, #0
  00a78	e58d3070	 str         r3, [sp, #0x70]
  00a7c		 |$LN72@KPD_IntrTh|

; 468  : 
; 469  :     // Loop until we are not stopped...
; 470  :     while (!pDevice->intrThreadExit) {

  00a7c	e59d3000	 ldr         r3, [sp]
  00a80	e2833038	 add         r3, r3, #0x38
  00a84	e5933000	 ldr         r3, [r3]
  00a88	e3530000	 cmp         r3, #0
  00a8c	1a000374	 bne         |$LN71@KPD_IntrTh|

; 471  : 
; 472  :         if (pDevice->intrThreadExit) break;

  00a90	e59d3000	 ldr         r3, [sp]
  00a94	e2833038	 add         r3, r3, #0x38
  00a98	e5933000	 ldr         r3, [r3]
  00a9c	e3530000	 cmp         r3, #0
  00aa0	0a000000	 beq         |$LN70@KPD_IntrTh|
  00aa4	ea00036e	 b           |$LN71@KPD_IntrTh|
  00aa8		 |$LN70@KPD_IntrTh|

; 473  : 
; 474  :         keyDown = FALSE;

  00aa8	e3a03000	 mov         r3, #0
  00aac	e58d3048	 str         r3, [sp, #0x48]

; 475  :         // Wait for event
; 476  :         if (WaitForSingleObject(pDevice->hIntrEvent, timeout) == WAIT_OBJECT_0)

  00ab0	e59d1070	 ldr         r1, [sp, #0x70]
  00ab4	e59d3000	 ldr         r3, [sp]
  00ab8	e2833030	 add         r3, r3, #0x30
  00abc	e5930000	 ldr         r0, [r3]
  00ac0	eb000000	 bl          WaitForSingleObject
  00ac4	e58d00a8	 str         r0, [sp, #0xA8]
  00ac8	e59d30a8	 ldr         r3, [sp, #0xA8]
  00acc	e3530000	 cmp         r3, #0
  00ad0	1a00000d	 bne         |$LN69@KPD_IntrTh|
  00ad4		 |$LN68@KPD_IntrTh|

; 477  :         {
; 478  :             //interrupt occured.
; 479  :             //debounce
; 480  :             while (WaitForSingleObject(pDevice->hIntrEvent, pDevice->debounceTime) == WAIT_OBJECT_0)

  00ad4	e59d3000	 ldr         r3, [sp]
  00ad8	e283300c	 add         r3, r3, #0xC
  00adc	e5931000	 ldr         r1, [r3]
  00ae0	e59d3000	 ldr         r3, [sp]
  00ae4	e2833030	 add         r3, r3, #0x30
  00ae8	e5930000	 ldr         r0, [r3]
  00aec	eb000000	 bl          WaitForSingleObject
  00af0	e58d00ac	 str         r0, [sp, #0xAC]
  00af4	e59d30ac	 ldr         r3, [sp, #0xAC]
  00af8	e3530000	 cmp         r3, #0
  00afc	1a000002	 bne         |$LN67@KPD_IntrTh|

; 481  :             {
; 482  :                 Sleep(1);

  00b00	e3a00001	 mov         r0, #1
  00b04	eb000000	 bl          Sleep

; 483  :             }

  00b08	eafffff1	 b           |$LN68@KPD_IntrTh|
  00b0c		 |$LN67@KPD_IntrTh|
  00b0c		 |$LN69@KPD_IntrTh|

; 484  :         }        
; 485  : 
; 486  :         data = 0;

  00b0c	e3a03000	 mov         r3, #0
  00b10	e1cd36bc	 strh        r3, [sp, #0x6C]

; 487  :         for (index= g_nbKeys-1;index>=0;index--)

  00b14	e59f3d8c	 ldr         r3, [pc, #0xD8C]
  00b18	e5933000	 ldr         r3, [r3]
  00b1c	e2433001	 sub         r3, r3, #1
  00b20	e58d3018	 str         r3, [sp, #0x18]
  00b24	ea000002	 b           |$LN66@KPD_IntrTh|
  00b28		 |$LN65@KPD_IntrTh|
  00b28	e59d3018	 ldr         r3, [sp, #0x18]
  00b2c	e2433001	 sub         r3, r3, #1
  00b30	e58d3018	 str         r3, [sp, #0x18]
  00b34		 |$LN66@KPD_IntrTh|
  00b34	e59d3018	 ldr         r3, [sp, #0x18]
  00b38	e3530000	 cmp         r3, #0
  00b3c	ba00001f	 blt         |$LN64@KPD_IntrTh|

; 488  :         {
; 489  :             data = data << 1;          

  00b40	e1dd36bc	 ldrh        r3, [sp, #0x6C]
  00b44	e1a03083	 mov         r3, r3, lsl #1
  00b48	e1a03803	 mov         r3, r3, lsl #16
  00b4c	e1a03823	 mov         r3, r3, lsr #16
  00b50	e1cd36bc	 strh        r3, [sp, #0x6C]

; 490  :             data |= (GPIOGetBit(pDevice->hGpio,g_keypadVK[index].gpio)) ? 1 : 0;              

  00b54	e59d1018	 ldr         r1, [sp, #0x18]
  00b58	e3a03008	 mov         r3, #8
  00b5c	e0020391	 mul         r2, r1, r3
  00b60	e59f3d3c	 ldr         r3, [pc, #0xD3C]
  00b64	e0833002	 add         r3, r3, r2
  00b68	e5931000	 ldr         r1, [r3]
  00b6c	e59d3000	 ldr         r3, [sp]
  00b70	e283303c	 add         r3, r3, #0x3C
  00b74	e5930000	 ldr         r0, [r3]
  00b78	eb000000	 bl          GPIOGetBit
  00b7c	e58d00b0	 str         r0, [sp, #0xB0]
  00b80	e59d30b0	 ldr         r3, [sp, #0xB0]
  00b84	e3530000	 cmp         r3, #0
  00b88	0a000002	 beq         |$LN81@KPD_IntrTh|
  00b8c	e3a03001	 mov         r3, #1
  00b90	e58d30b4	 str         r3, [sp, #0xB4]
  00b94	ea000001	 b           |$LN82@KPD_IntrTh|
  00b98		 |$LN81@KPD_IntrTh|
  00b98	e3a03000	 mov         r3, #0
  00b9c	e58d30b4	 str         r3, [sp, #0xB4]
  00ba0		 |$LN82@KPD_IntrTh|
  00ba0	e1dd36bc	 ldrh        r3, [sp, #0x6C]
  00ba4	e1a02003	 mov         r2, r3
  00ba8	e59d30b4	 ldr         r3, [sp, #0xB4]
  00bac	e1823003	 orr         r3, r2, r3
  00bb0	e1a03803	 mov         r3, r3, lsl #16
  00bb4	e1a03823	 mov         r3, r3, lsr #16
  00bb8	e1cd36bc	 strh        r3, [sp, #0x6C]

; 491  :         }        

  00bbc	eaffffd9	 b           |$LN65@KPD_IntrTh|
  00bc0		 |$LN64@KPD_IntrTh|

; 492  :         //--------------------------------------------------------------
; 493  :         // Convert physical state to virtual keys state
; 494  :         //--------------------------------------------------------------
; 495  :         // Get new state for virtual key table
; 496  :         memset(vkNewState, 0, sizeof(vkNewState));

  00bc0	e3a02020	 mov         r2, #0x20
  00bc4	e3a01000	 mov         r1, #0
  00bc8	e28d0024	 add         r0, sp, #0x24
  00bcc	eb000000	 bl          memset

; 497  :         keyDown = FALSE;

  00bd0	e3a03000	 mov         r3, #0
  00bd4	e58d3048	 str         r3, [sp, #0x48]

; 498  : 
; 499  :         for (i = 0; i < g_nbKeys; i++) 

  00bd8	e3a03000	 mov         r3, #0
  00bdc	e1cd30b6	 strh        r3, [sp, #6]
  00be0	ea000004	 b           |$LN63@KPD_IntrTh|
  00be4		 |$LN62@KPD_IntrTh|
  00be4	e1dd30b6	 ldrh        r3, [sp, #6]
  00be8	e2833001	 add         r3, r3, #1
  00bec	e1a03803	 mov         r3, r3, lsl #16
  00bf0	e1a03823	 mov         r3, r3, lsr #16
  00bf4	e1cd30b6	 strh        r3, [sp, #6]
  00bf8		 |$LN63@KPD_IntrTh|
  00bf8	e1dd30b6	 ldrh        r3, [sp, #6]
  00bfc	e1a02003	 mov         r2, r3
  00c00	e59f3ca0	 ldr         r3, [pc, #0xCA0]
  00c04	e5933000	 ldr         r3, [r3]
  00c08	e1520003	 cmp         r2, r3
  00c0c	aa000031	 bge         |$LN61@KPD_IntrTh|

; 500  :         {
; 501  :             if ((data & (1 << i)) == 0) 

  00c10	e1dd36bc	 ldrh        r3, [sp, #0x6C]
  00c14	e1a01003	 mov         r1, r3
  00c18	e1dd30b6	 ldrh        r3, [sp, #6]
  00c1c	e1a02003	 mov         r2, r3
  00c20	e3a03001	 mov         r3, #1
  00c24	e1a03213	 mov         r3, r3, lsl r2
  00c28	e1110003	 tst         r1, r3
  00c2c	1a000028	 bne         |$LN60@KPD_IntrTh|

; 502  :             {
; 503  :                 vk = g_keypadVK[i].vkey;

  00c30	e1dd30b6	 ldrh        r3, [sp, #6]
  00c34	e1a01003	 mov         r1, r3
  00c38	e3a03008	 mov         r3, #8
  00c3c	e0020391	 mul         r2, r1, r3
  00c40	e59f3c5c	 ldr         r3, [pc, #0xC5C]
  00c44	e0833002	 add         r3, r3, r2
  00c48	e2833004	 add         r3, r3, #4
  00c4c	e5d33000	 ldrb        r3, [r3]
  00c50	e5cd3004	 strb        r3, [sp, #4]

; 504  :                 vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  00c54	e5dd3004	 ldrb        r3, [sp, #4]
  00c58	e1a012c3	 mov         r1, r3, asr #5
  00c5c	e3a03004	 mov         r3, #4
  00c60	e0020391	 mul         r2, r1, r3
  00c64	e28d3024	 add         r3, sp, #0x24
  00c68	e0831002	 add         r1, r3, r2
  00c6c	e5dd3004	 ldrb        r3, [sp, #4]
  00c70	e203201f	 and         r2, r3, #0x1F
  00c74	e3a03001	 mov         r3, #1
  00c78	e1a02213	 mov         r2, r3, lsl r2
  00c7c	e5913000	 ldr         r3, [r1]
  00c80	e1830002	 orr         r0, r3, r2
  00c84	e5dd3004	 ldrb        r3, [sp, #4]
  00c88	e1a012c3	 mov         r1, r3, asr #5
  00c8c	e3a03004	 mov         r3, #4
  00c90	e0020391	 mul         r2, r1, r3
  00c94	e28d3024	 add         r3, sp, #0x24
  00c98	e0833002	 add         r3, r3, r2
  00c9c	e5830000	 str         r0, [r3]

; 505  :                 keyDown = TRUE;

  00ca0	e3a03001	 mov         r3, #1
  00ca4	e58d3048	 str         r3, [sp, #0x48]

; 506  :                 DEBUGMSG(ZONE_INFO, (L"keyDown = TRUE \r\n"));

  00ca8	e59f3c00	 ldr         r3, [pc, #0xC00]
  00cac	e5933440	 ldr         r3, [r3, #0x440]
  00cb0	e3130010	 tst         r3, #0x10
  00cb4	0a000004	 beq         |$LN83@KPD_IntrTh|
  00cb8	e59f0c20	 ldr         r0, [pc, #0xC20]
  00cbc	eb000000	 bl          NKDbgPrintfW
  00cc0	e3a03001	 mov         r3, #1
  00cc4	e58d30b8	 str         r3, [sp, #0xB8]
  00cc8	ea000001	 b           |$LN84@KPD_IntrTh|
  00ccc		 |$LN83@KPD_IntrTh|
  00ccc	e3a03000	 mov         r3, #0
  00cd0	e58d30b8	 str         r3, [sp, #0xB8]
  00cd4		 |$LN84@KPD_IntrTh|
  00cd4		 |$LN60@KPD_IntrTh|

; 507  :             }            
; 508  :         }

  00cd4	eaffffc2	 b           |$LN62@KPD_IntrTh|
  00cd8		 |$LN61@KPD_IntrTh|

; 509  : 
; 510  :         //--------------------------------------------------------------
; 511  :         // Remap multi virtual keys to final virtual key
; 512  :         //--------------------------------------------------------------
; 513  :         time = GetTickCount();

  00cd8	eb000000	 bl          GetTickCount
  00cdc	e58d00bc	 str         r0, [sp, #0xBC]
  00ce0	e59d30bc	 ldr         r3, [sp, #0xBC]
  00ce4	e58d3020	 str         r3, [sp, #0x20]

; 514  :         for (ix = 0; ix < g_keypadRemap.count; ix++) {

  00ce8	e3a03000	 mov         r3, #0
  00cec	e58d3008	 str         r3, [sp, #8]
  00cf0	ea000002	 b           |$LN59@KPD_IntrTh|
  00cf4		 |$LN58@KPD_IntrTh|
  00cf4	e59d3008	 ldr         r3, [sp, #8]
  00cf8	e2833001	 add         r3, r3, #1
  00cfc	e58d3008	 str         r3, [sp, #8]
  00d00		 |$LN59@KPD_IntrTh|
  00d00	e59f3bd4	 ldr         r3, [pc, #0xBD4]
  00d04	e1d320b0	 ldrh        r2, [r3]
  00d08	e59d3008	 ldr         r3, [sp, #8]
  00d0c	e1530002	 cmp         r3, r2
  00d10	2a00014e	 bcs         |$LN57@KPD_IntrTh|

; 515  :             const KEYPAD_REMAP_ITEM *pItem = &g_keypadRemap.pItem[ix];

  00d14	e59d1008	 ldr         r1, [sp, #8]
  00d18	e3a03008	 mov         r3, #8
  00d1c	e0020391	 mul         r2, r1, r3
  00d20	e59f3bb4	 ldr         r3, [pc, #0xBB4]
  00d24	e5933004	 ldr         r3, [r3, #4]
  00d28	e0833002	 add         r3, r3, r2
  00d2c	e58d3078	 str         r3, [sp, #0x78]

; 516  :             KEYPAD_REMAP_STATE *pState = &pRemapState[ix];

  00d30	e59d1008	 ldr         r1, [sp, #8]
  00d34	e3a03010	 mov         r3, #0x10
  00d38	e0020391	 mul         r2, r1, r3
  00d3c	e59d300c	 ldr         r3, [sp, #0xC]
  00d40	e0833002	 add         r3, r3, r2
  00d44	e58d307c	 str         r3, [sp, #0x7C]

; 517  :             DWORD state = 0;

  00d48	e3a03000	 mov         r3, #0
  00d4c	e58d3080	 str         r3, [sp, #0x80]

; 518  :             USHORT down = 0;

  00d50	e3a03000	 mov         r3, #0
  00d54	e1cd37b4	 strh        r3, [sp, #0x74]

; 519  : 
; 520  :             // Count number of keys down & save down/up state
; 521  :             for (i = 0; i < pItem->keys; i ++) {

  00d58	e3a03000	 mov         r3, #0
  00d5c	e1cd30b6	 strh        r3, [sp, #6]
  00d60	ea000004	 b           |$LN56@KPD_IntrTh|
  00d64		 |$LN55@KPD_IntrTh|
  00d64	e1dd30b6	 ldrh        r3, [sp, #6]
  00d68	e2833001	 add         r3, r3, #1
  00d6c	e1a03803	 mov         r3, r3, lsl #16
  00d70	e1a03823	 mov         r3, r3, lsr #16
  00d74	e1cd30b6	 strh        r3, [sp, #6]
  00d78		 |$LN56@KPD_IntrTh|
  00d78	e1dd30b6	 ldrh        r3, [sp, #6]
  00d7c	e1a02003	 mov         r2, r3
  00d80	e59d3078	 ldr         r3, [sp, #0x78]
  00d84	e2833001	 add         r3, r3, #1
  00d88	e5d33000	 ldrb        r3, [r3]
  00d8c	e1520003	 cmp         r2, r3
  00d90	aa000021	 bge         |$LN54@KPD_IntrTh|

; 522  :                 vk = pItem->pVKeys[i];

  00d94	e59d3078	 ldr         r3, [sp, #0x78]
  00d98	e2831004	 add         r1, r3, #4
  00d9c	e1dd30b6	 ldrh        r3, [sp, #6]
  00da0	e1a02003	 mov         r2, r3
  00da4	e5913000	 ldr         r3, [r1]
  00da8	e0833002	 add         r3, r3, r2
  00dac	e5d33000	 ldrb        r3, [r3]
  00db0	e5cd3004	 strb        r3, [sp, #4]

; 523  :                 if ((vkNewState[vk >> 5] & (1 << (vk & 0x1F))) != 0) {

  00db4	e5dd3004	 ldrb        r3, [sp, #4]
  00db8	e1a012c3	 mov         r1, r3, asr #5
  00dbc	e3a03004	 mov         r3, #4
  00dc0	e0020391	 mul         r2, r1, r3
  00dc4	e28d3024	 add         r3, sp, #0x24
  00dc8	e0831002	 add         r1, r3, r2
  00dcc	e5dd3004	 ldrb        r3, [sp, #4]
  00dd0	e203201f	 and         r2, r3, #0x1F
  00dd4	e3a03001	 mov         r3, #1
  00dd8	e1a02213	 mov         r2, r3, lsl r2
  00ddc	e5913000	 ldr         r3, [r1]
  00de0	e1130002	 tst         r3, r2
  00de4	0a00000b	 beq         |$LN53@KPD_IntrTh|

; 524  :                     state |= 1 << i;

  00de8	e1dd30b6	 ldrh        r3, [sp, #6]
  00dec	e1a02003	 mov         r2, r3
  00df0	e3a03001	 mov         r3, #1
  00df4	e1a02213	 mov         r2, r3, lsl r2
  00df8	e59d3080	 ldr         r3, [sp, #0x80]
  00dfc	e1833002	 orr         r3, r3, r2
  00e00	e58d3080	 str         r3, [sp, #0x80]

; 525  :                     down++;

  00e04	e1dd37b4	 ldrh        r3, [sp, #0x74]
  00e08	e2833001	 add         r3, r3, #1
  00e0c	e1a03803	 mov         r3, r3, lsl #16
  00e10	e1a03823	 mov         r3, r3, lsr #16
  00e14	e1cd37b4	 strh        r3, [sp, #0x74]
  00e18		 |$LN53@KPD_IntrTh|

; 526  :                 }
; 527  :             }

  00e18	eaffffd1	 b           |$LN55@KPD_IntrTh|
  00e1c		 |$LN54@KPD_IntrTh|

; 528  :             // Depending on number of keys down
; 529  :             if (down >= pItem->keys && pItem->keys > 1) {

  00e1c	e1dd37b4	 ldrh        r3, [sp, #0x74]
  00e20	e1a02003	 mov         r2, r3
  00e24	e59d3078	 ldr         r3, [sp, #0x78]
  00e28	e2833001	 add         r3, r3, #1
  00e2c	e5d33000	 ldrb        r3, [r3]
  00e30	e1520003	 cmp         r2, r3
  00e34	ba00005a	 blt         |$LN52@KPD_IntrTh|
  00e38	e59d3078	 ldr         r3, [sp, #0x78]
  00e3c	e2833001	 add         r3, r3, #1
  00e40	e5d33000	 ldrb        r3, [r3]
  00e44	e3530001	 cmp         r3, #1
  00e48	da000055	 ble         |$LN52@KPD_IntrTh|

; 530  :                 // Clear all mapping keys
; 531  :                 for (i = 0; i < pItem->keys; i++) {

  00e4c	e3a03000	 mov         r3, #0
  00e50	e1cd30b6	 strh        r3, [sp, #6]
  00e54	ea000004	 b           |$LN51@KPD_IntrTh|
  00e58		 |$LN50@KPD_IntrTh|
  00e58	e1dd30b6	 ldrh        r3, [sp, #6]
  00e5c	e2833001	 add         r3, r3, #1
  00e60	e1a03803	 mov         r3, r3, lsl #16
  00e64	e1a03823	 mov         r3, r3, lsr #16
  00e68	e1cd30b6	 strh        r3, [sp, #6]
  00e6c		 |$LN51@KPD_IntrTh|
  00e6c	e1dd30b6	 ldrh        r3, [sp, #6]
  00e70	e1a02003	 mov         r2, r3
  00e74	e59d3078	 ldr         r3, [sp, #0x78]
  00e78	e2833001	 add         r3, r3, #1
  00e7c	e5d33000	 ldrb        r3, [r3]
  00e80	e1520003	 cmp         r2, r3
  00e84	aa00001c	 bge         |$LN49@KPD_IntrTh|

; 532  :                     vk = pItem->pVKeys[i];

  00e88	e59d3078	 ldr         r3, [sp, #0x78]
  00e8c	e2831004	 add         r1, r3, #4
  00e90	e1dd30b6	 ldrh        r3, [sp, #6]
  00e94	e1a02003	 mov         r2, r3
  00e98	e5913000	 ldr         r3, [r1]
  00e9c	e0833002	 add         r3, r3, r2
  00ea0	e5d33000	 ldrb        r3, [r3]
  00ea4	e5cd3004	 strb        r3, [sp, #4]

; 533  :                     vkNewState[vk >> 5] &= ~(1 << (vk & 0x1F));

  00ea8	e5dd3004	 ldrb        r3, [sp, #4]
  00eac	e1a012c3	 mov         r1, r3, asr #5
  00eb0	e3a03004	 mov         r3, #4
  00eb4	e0020391	 mul         r2, r1, r3
  00eb8	e28d3024	 add         r3, sp, #0x24
  00ebc	e0831002	 add         r1, r3, r2
  00ec0	e5dd3004	 ldrb        r3, [sp, #4]
  00ec4	e203201f	 and         r2, r3, #0x1F
  00ec8	e3a03001	 mov         r3, #1
  00ecc	e1a03213	 mov         r3, r3, lsl r2
  00ed0	e1e02003	 mvn         r2, r3
  00ed4	e5913000	 ldr         r3, [r1]
  00ed8	e0030002	 and         r0, r3, r2
  00edc	e5dd3004	 ldrb        r3, [sp, #4]
  00ee0	e1a012c3	 mov         r1, r3, asr #5
  00ee4	e3a03004	 mov         r3, #4
  00ee8	e0020391	 mul         r2, r1, r3
  00eec	e28d3024	 add         r3, sp, #0x24
  00ef0	e0833002	 add         r3, r3, r2
  00ef4	e5830000	 str         r0, [r3]

; 534  :                 }

  00ef8	eaffffd6	 b           |$LN50@KPD_IntrTh|
  00efc		 |$LN49@KPD_IntrTh|

; 535  :                 // All keys are down set final key
; 536  :                 vk = pItem->vkey;

  00efc	e59d3078	 ldr         r3, [sp, #0x78]
  00f00	e5d33000	 ldrb        r3, [r3]
  00f04	e5cd3004	 strb        r3, [sp, #4]

; 537  :                 vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  00f08	e5dd3004	 ldrb        r3, [sp, #4]
  00f0c	e1a012c3	 mov         r1, r3, asr #5
  00f10	e3a03004	 mov         r3, #4
  00f14	e0020391	 mul         r2, r1, r3
  00f18	e28d3024	 add         r3, sp, #0x24
  00f1c	e0831002	 add         r1, r3, r2
  00f20	e5dd3004	 ldrb        r3, [sp, #4]
  00f24	e203201f	 and         r2, r3, #0x1F
  00f28	e3a03001	 mov         r3, #1
  00f2c	e1a02213	 mov         r2, r3, lsl r2
  00f30	e5913000	 ldr         r3, [r1]
  00f34	e1830002	 orr         r0, r3, r2
  00f38	e5dd3004	 ldrb        r3, [sp, #4]
  00f3c	e1a012c3	 mov         r1, r3, asr #5
  00f40	e3a03004	 mov         r3, #4
  00f44	e0020391	 mul         r2, r1, r3
  00f48	e28d3024	 add         r3, sp, #0x24
  00f4c	e0833002	 add         r3, r3, r2
  00f50	e5830000	 str         r0, [r3]

; 538  :                 DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 539  :                     L"Mapped vkey: 0x%x\r\n", vk
; 540  :                 ));

  00f54	e59f3954	 ldr         r3, [pc, #0x954]
  00f58	e5933440	 ldr         r3, [r3, #0x440]
  00f5c	e3130020	 tst         r3, #0x20
  00f60	0a000005	 beq         |$LN85@KPD_IntrTh|
  00f64	e5dd1004	 ldrb        r1, [sp, #4]
  00f68	e59f0968	 ldr         r0, [pc, #0x968]
  00f6c	eb000000	 bl          NKDbgPrintfW
  00f70	e3a03001	 mov         r3, #1
  00f74	e58d30c0	 str         r3, [sp, #0xC0]
  00f78	ea000001	 b           |$LN86@KPD_IntrTh|
  00f7c		 |$LN85@KPD_IntrTh|
  00f7c	e3a03000	 mov         r3, #0
  00f80	e58d30c0	 str         r3, [sp, #0xC0]
  00f84		 |$LN86@KPD_IntrTh|

; 541  : 
; 542  :                 // Clear remap pending flag
; 543  :                 pState->pending = FALSE;

  00f84	e59d207c	 ldr         r2, [sp, #0x7C]
  00f88	e3a03000	 mov         r3, #0
  00f8c	e5823000	 str         r3, [r2]

; 544  :                 // Set remap processing flag
; 545  :                 pState->remapped = TRUE;

  00f90	e59d307c	 ldr         r3, [sp, #0x7C]
  00f94	e2832004	 add         r2, r3, #4
  00f98	e3a03001	 mov         r3, #1
  00f9c	e5823000	 str         r3, [r2]
  00fa0	ea0000a5	 b           |$LN48@KPD_IntrTh|
  00fa4		 |$LN52@KPD_IntrTh|

; 546  :             } else if (down > 0) {

  00fa4	e1dd37b4	 ldrh        r3, [sp, #0x74]
  00fa8	e3530000	 cmp         r3, #0
  00fac	da000056	 ble         |$LN47@KPD_IntrTh|

; 547  :                 // If already remapping or remapping is not pending
; 548  :                 // or pending time expired
; 549  :                 if (pState->remapped || !pState->pending ||
; 550  :                     (INT32)(time - pState->time) < 0 ) {

  00fb0	e59d307c	 ldr         r3, [sp, #0x7C]
  00fb4	e2833004	 add         r3, r3, #4
  00fb8	e5933000	 ldr         r3, [r3]
  00fbc	e3530000	 cmp         r3, #0
  00fc0	1a000009	 bne         |$LN45@KPD_IntrTh|
  00fc4	e59d307c	 ldr         r3, [sp, #0x7C]
  00fc8	e5933000	 ldr         r3, [r3]
  00fcc	e3530000	 cmp         r3, #0
  00fd0	0a000005	 beq         |$LN45@KPD_IntrTh|
  00fd4	e59d307c	 ldr         r3, [sp, #0x7C]
  00fd8	e2833008	 add         r3, r3, #8
  00fdc	e59d2020	 ldr         r2, [sp, #0x20]
  00fe0	e5933000	 ldr         r3, [r3]
  00fe4	e0523003	 subs        r3, r2, r3
  00fe8	5a000014	 bpl         |$LN46@KPD_IntrTh|
  00fec		 |$LN45@KPD_IntrTh|

; 551  :                     // If we are not pending and not already remapping, start
; 552  :                     if (!pState->pending && !pState->remapped) {

  00fec	e59d307c	 ldr         r3, [sp, #0x7C]
  00ff0	e5933000	 ldr         r3, [r3]
  00ff4	e3530000	 cmp         r3, #0
  00ff8	1a00000f	 bne         |$LN44@KPD_IntrTh|
  00ffc	e59d307c	 ldr         r3, [sp, #0x7C]
  01000	e2833004	 add         r3, r3, #4
  01004	e5933000	 ldr         r3, [r3]
  01008	e3530000	 cmp         r3, #0
  0100c	1a00000a	 bne         |$LN44@KPD_IntrTh|

; 553  :                         pState->pending = TRUE;

  01010	e59d207c	 ldr         r2, [sp, #0x7C]
  01014	e3a03001	 mov         r3, #1
  01018	e5823000	 str         r3, [r2]

; 554  :                         pState->time = time + pItem->delay;

  0101c	e59d3078	 ldr         r3, [sp, #0x78]
  01020	e2833002	 add         r3, r3, #2
  01024	e1d320b0	 ldrh        r2, [r3]
  01028	e59d3020	 ldr         r3, [sp, #0x20]
  0102c	e0832002	 add         r2, r3, r2
  01030	e59d307c	 ldr         r3, [sp, #0x7C]
  01034	e2833008	 add         r3, r3, #8
  01038	e5832000	 str         r2, [r3]
  0103c		 |$LN44@KPD_IntrTh|

; 555  :                     }
; 556  :                     /*
; 557  :                     // Clear all mapping keys
; 558  :                     for (i = 0; i < pItem->keys; i++) {
; 559  :                         vk = pItem->pVKeys[i];
; 560  :                         vkNewState[vk >> 5] &= ~(1 << (vk & 0x1F));
; 561  :                     }
; 562  :                     */
; 563  :                 } else if (

  0103c	ea000031	 b           |$LN43@KPD_IntrTh|
  01040		 |$LN46@KPD_IntrTh|

; 564  :                     pItem->keys == 1 && (INT32)(time - pState->time) >= 0
; 565  :                 ) {

  01040	e59d3078	 ldr         r3, [sp, #0x78]
  01044	e2833001	 add         r3, r3, #1
  01048	e5d33000	 ldrb        r3, [r3]
  0104c	e3530001	 cmp         r3, #1
  01050	1a00002c	 bne         |$LN42@KPD_IntrTh|
  01054	e59d307c	 ldr         r3, [sp, #0x7C]
  01058	e2833008	 add         r3, r3, #8
  0105c	e59d2020	 ldr         r2, [sp, #0x20]
  01060	e5933000	 ldr         r3, [r3]
  01064	e0523003	 subs        r3, r2, r3
  01068	4a000026	 bmi         |$LN42@KPD_IntrTh|

; 566  :                     // This is press and hold key
; 567  :                    DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 568  :                         L"Mapped press and hold vkey: 0x%x\r\n", vk
; 569  :                     ));

  0106c	e59f383c	 ldr         r3, [pc, #0x83C]
  01070	e5933440	 ldr         r3, [r3, #0x440]
  01074	e3130020	 tst         r3, #0x20
  01078	0a000005	 beq         |$LN87@KPD_IntrTh|
  0107c	e5dd1004	 ldrb        r1, [sp, #4]
  01080	e59f084c	 ldr         r0, [pc, #0x84C]
  01084	eb000000	 bl          NKDbgPrintfW
  01088	e3a03001	 mov         r3, #1
  0108c	e58d30c4	 str         r3, [sp, #0xC4]
  01090	ea000001	 b           |$LN88@KPD_IntrTh|
  01094		 |$LN87@KPD_IntrTh|
  01094	e3a03000	 mov         r3, #0
  01098	e58d30c4	 str         r3, [sp, #0xC4]
  0109c		 |$LN88@KPD_IntrTh|

; 570  :                     vk = pItem->vkey;

  0109c	e59d3078	 ldr         r3, [sp, #0x78]
  010a0	e5d33000	 ldrb        r3, [r3]
  010a4	e5cd3004	 strb        r3, [sp, #4]

; 571  :                     vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  010a8	e5dd3004	 ldrb        r3, [sp, #4]
  010ac	e1a012c3	 mov         r1, r3, asr #5
  010b0	e3a03004	 mov         r3, #4
  010b4	e0020391	 mul         r2, r1, r3
  010b8	e28d3024	 add         r3, sp, #0x24
  010bc	e0831002	 add         r1, r3, r2
  010c0	e5dd3004	 ldrb        r3, [sp, #4]
  010c4	e203201f	 and         r2, r3, #0x1F
  010c8	e3a03001	 mov         r3, #1
  010cc	e1a02213	 mov         r2, r3, lsl r2
  010d0	e5913000	 ldr         r3, [r1]
  010d4	e1830002	 orr         r0, r3, r2
  010d8	e5dd3004	 ldrb        r3, [sp, #4]
  010dc	e1a012c3	 mov         r1, r3, asr #5
  010e0	e3a03004	 mov         r3, #4
  010e4	e0020391	 mul         r2, r1, r3
  010e8	e28d3024	 add         r3, sp, #0x24
  010ec	e0833002	 add         r3, r3, r2
  010f0	e5830000	 str         r0, [r3]

; 572  :                     keyDown = TRUE;

  010f4	e3a03001	 mov         r3, #1
  010f8	e58d3048	 str         r3, [sp, #0x48]

; 573  :                     pState->pending = FALSE;

  010fc	e59d207c	 ldr         r2, [sp, #0x7C]
  01100	e3a03000	 mov         r3, #0
  01104	e5823000	 str         r3, [r2]
  01108		 |$LN42@KPD_IntrTh|
  01108		 |$LN43@KPD_IntrTh|

; 574  :                 }
; 575  :             } else {

  01108	ea00004b	 b           |$LN41@KPD_IntrTh|
  0110c		 |$LN47@KPD_IntrTh|

; 576  :                 // All keys are up, if remapping was pending set keys
; 577  :                 if (pState->pending) {

  0110c	e59d307c	 ldr         r3, [sp, #0x7C]
  01110	e5933000	 ldr         r3, [r3]
  01114	e3530000	 cmp         r3, #0
  01118	0a000043	 beq         |$LN40@KPD_IntrTh|

; 578  :                     for (i = 0; i < pItem->keys; i++) {

  0111c	e3a03000	 mov         r3, #0
  01120	e1cd30b6	 strh        r3, [sp, #6]
  01124	ea000004	 b           |$LN39@KPD_IntrTh|
  01128		 |$LN38@KPD_IntrTh|
  01128	e1dd30b6	 ldrh        r3, [sp, #6]
  0112c	e2833001	 add         r3, r3, #1
  01130	e1a03803	 mov         r3, r3, lsl #16
  01134	e1a03823	 mov         r3, r3, lsr #16
  01138	e1cd30b6	 strh        r3, [sp, #6]
  0113c		 |$LN39@KPD_IntrTh|
  0113c	e1dd30b6	 ldrh        r3, [sp, #6]
  01140	e1a02003	 mov         r2, r3
  01144	e59d3078	 ldr         r3, [sp, #0x78]
  01148	e2833001	 add         r3, r3, #1
  0114c	e5d33000	 ldrb        r3, [r3]
  01150	e1520003	 cmp         r2, r3
  01154	aa000031	 bge         |$LN37@KPD_IntrTh|

; 579  :                         if ((pState->state & (1 << i)) != 0) {

  01158	e59d307c	 ldr         r3, [sp, #0x7C]
  0115c	e283100c	 add         r1, r3, #0xC
  01160	e1dd30b6	 ldrh        r3, [sp, #6]
  01164	e1a02003	 mov         r2, r3
  01168	e3a03001	 mov         r3, #1
  0116c	e1a02213	 mov         r2, r3, lsl r2
  01170	e5913000	 ldr         r3, [r1]
  01174	e1130002	 tst         r3, r2
  01178	0a000027	 beq         |$LN36@KPD_IntrTh|

; 580  :                             vk = pItem->pVKeys[i];

  0117c	e59d3078	 ldr         r3, [sp, #0x78]
  01180	e2831004	 add         r1, r3, #4
  01184	e1dd30b6	 ldrh        r3, [sp, #6]
  01188	e1a02003	 mov         r2, r3
  0118c	e5913000	 ldr         r3, [r1]
  01190	e0833002	 add         r3, r3, r2
  01194	e5d33000	 ldrb        r3, [r3]
  01198	e5cd3004	 strb        r3, [sp, #4]

; 581  :                             vkNewState[vk >> 5] |= 1 << (vk & 0x1F);

  0119c	e5dd3004	 ldrb        r3, [sp, #4]
  011a0	e1a012c3	 mov         r1, r3, asr #5
  011a4	e3a03004	 mov         r3, #4
  011a8	e0020391	 mul         r2, r1, r3
  011ac	e28d3024	 add         r3, sp, #0x24
  011b0	e0831002	 add         r1, r3, r2
  011b4	e5dd3004	 ldrb        r3, [sp, #4]
  011b8	e203201f	 and         r2, r3, #0x1F
  011bc	e3a03001	 mov         r3, #1
  011c0	e1a02213	 mov         r2, r3, lsl r2
  011c4	e5913000	 ldr         r3, [r1]
  011c8	e1830002	 orr         r0, r3, r2
  011cc	e5dd3004	 ldrb        r3, [sp, #4]
  011d0	e1a012c3	 mov         r1, r3, asr #5
  011d4	e3a03004	 mov         r3, #4
  011d8	e0020391	 mul         r2, r1, r3
  011dc	e28d3024	 add         r3, sp, #0x24
  011e0	e0833002	 add         r3, r3, r2
  011e4	e5830000	 str         r0, [r3]

; 582  :                             DEBUGMSG(ZONE_INFO, (L"keyDown = TRUE 2\r\n"));

  011e8	e59f36c0	 ldr         r3, [pc, #0x6C0]
  011ec	e5933440	 ldr         r3, [r3, #0x440]
  011f0	e3130010	 tst         r3, #0x10
  011f4	0a000004	 beq         |$LN89@KPD_IntrTh|
  011f8	e59f06d0	 ldr         r0, [pc, #0x6D0]
  011fc	eb000000	 bl          NKDbgPrintfW
  01200	e3a03001	 mov         r3, #1
  01204	e58d30c8	 str         r3, [sp, #0xC8]
  01208	ea000001	 b           |$LN90@KPD_IntrTh|
  0120c		 |$LN89@KPD_IntrTh|
  0120c	e3a03000	 mov         r3, #0
  01210	e58d30c8	 str         r3, [sp, #0xC8]
  01214		 |$LN90@KPD_IntrTh|

; 583  :                             keyDown = TRUE;

  01214	e3a03001	 mov         r3, #1
  01218	e58d3048	 str         r3, [sp, #0x48]
  0121c		 |$LN36@KPD_IntrTh|

; 584  :                         }
; 585  :                     }

  0121c	eaffffc1	 b           |$LN38@KPD_IntrTh|
  01220		 |$LN37@KPD_IntrTh|

; 586  :                     pState->pending = FALSE;

  01220	e59d207c	 ldr         r2, [sp, #0x7C]
  01224	e3a03000	 mov         r3, #0
  01228	e5823000	 str         r3, [r2]
  0122c		 |$LN40@KPD_IntrTh|

; 587  :                 }
; 588  :                 pState->remapped = FALSE;

  0122c	e59d307c	 ldr         r3, [sp, #0x7C]
  01230	e2832004	 add         r2, r3, #4
  01234	e3a03000	 mov         r3, #0
  01238	e5823000	 str         r3, [r2]
  0123c		 |$LN41@KPD_IntrTh|
  0123c		 |$LN48@KPD_IntrTh|

; 589  :             }
; 590  :             // Save key state
; 591  :             pState->state = state;

  0123c	e59d307c	 ldr         r3, [sp, #0x7C]
  01240	e283200c	 add         r2, r3, #0xC
  01244	e59d3080	 ldr         r3, [sp, #0x80]
  01248	e5823000	 str         r3, [r2]

; 592  :         }

  0124c	eafffea8	 b           |$LN58@KPD_IntrTh|
  01250		 |$LN57@KPD_IntrTh|

; 593  : 
; 594  :         //--------------------------------------------------------------
; 595  :         // Find pressed/released keys
; 596  :         //--------------------------------------------------------------
; 597  :         for (ic = 0, vk = 0; ic < VK_KEYS/DWORD_BITS; ic++) {

  01250	e3a03000	 mov         r3, #0
  01254	e1cd34b4	 strh        r3, [sp, #0x44]
  01258	e3a03000	 mov         r3, #0
  0125c	e5cd3004	 strb        r3, [sp, #4]
  01260	ea000004	 b           |$LN35@KPD_IntrTh|
  01264		 |$LN34@KPD_IntrTh|
  01264	e1dd34b4	 ldrh        r3, [sp, #0x44]
  01268	e2833001	 add         r3, r3, #1
  0126c	e1a03803	 mov         r3, r3, lsl #16
  01270	e1a03823	 mov         r3, r3, lsr #16
  01274	e1cd34b4	 strh        r3, [sp, #0x44]
  01278		 |$LN35@KPD_IntrTh|
  01278	e1dd34b4	 ldrh        r3, [sp, #0x44]
  0127c	e3530008	 cmp         r3, #8
  01280	aa00006f	 bge         |$LN33@KPD_IntrTh|

; 598  :             change = vkState[ic] ^ vkNewState[ic];

  01284	e1dd34b4	 ldrh        r3, [sp, #0x44]
  01288	e1a01003	 mov         r1, r3
  0128c	e3a03004	 mov         r3, #4
  01290	e0020391	 mul         r2, r1, r3
  01294	e28d304c	 add         r3, sp, #0x4C
  01298	e0830002	 add         r0, r3, r2
  0129c	e1dd34b4	 ldrh        r3, [sp, #0x44]
  012a0	e1a01003	 mov         r1, r3
  012a4	e3a03004	 mov         r3, #4
  012a8	e0020391	 mul         r2, r1, r3
  012ac	e28d3024	 add         r3, sp, #0x24
  012b0	e0833002	 add         r3, r3, r2
  012b4	e5902000	 ldr         r2, [r0]
  012b8	e5933000	 ldr         r3, [r3]
  012bc	e0223003	 eor         r3, r2, r3
  012c0	e58d3010	 str         r3, [sp, #0x10]

; 599  :             if (change == 0) {

  012c4	e59d3010	 ldr         r3, [sp, #0x10]
  012c8	e3530000	 cmp         r3, #0
  012cc	1a000004	 bne         |$LN32@KPD_IntrTh|

; 600  :                 vk += DWORD_BITS;

  012d0	e5dd3004	 ldrb        r3, [sp, #4]
  012d4	e2833020	 add         r3, r3, #0x20
  012d8	e20330ff	 and         r3, r3, #0xFF
  012dc	e5cd3004	 strb        r3, [sp, #4]
  012e0	ea000056	 b           |$LN31@KPD_IntrTh|
  012e4		 |$LN32@KPD_IntrTh|

; 601  :             } else for (mask = 1; mask != 0; mask <<= 1, vk++) {

  012e4	e3a03001	 mov         r3, #1
  012e8	e58d3014	 str         r3, [sp, #0x14]
  012ec	ea000006	 b           |$LN30@KPD_IntrTh|
  012f0		 |$LN29@KPD_IntrTh|
  012f0	e59d3014	 ldr         r3, [sp, #0x14]
  012f4	e1a03083	 mov         r3, r3, lsl #1
  012f8	e58d3014	 str         r3, [sp, #0x14]
  012fc	e5dd3004	 ldrb        r3, [sp, #4]
  01300	e2833001	 add         r3, r3, #1
  01304	e20330ff	 and         r3, r3, #0xFF
  01308	e5cd3004	 strb        r3, [sp, #4]
  0130c		 |$LN30@KPD_IntrTh|
  0130c	e59d3014	 ldr         r3, [sp, #0x14]
  01310	e3530000	 cmp         r3, #0
  01314	0a000049	 beq         |$LN28@KPD_IntrTh|

; 602  :                 // Check for change
; 603  :                 if ((change & mask) != 0) {

  01318	e59d2010	 ldr         r2, [sp, #0x10]
  0131c	e59d3014	 ldr         r3, [sp, #0x14]
  01320	e1120003	 tst         r2, r3
  01324	0a000044	 beq         |$LN27@KPD_IntrTh|

; 604  :                     if ((vkNewState[ic] & mask) != 0)

  01328	e1dd34b4	 ldrh        r3, [sp, #0x44]
  0132c	e1a01003	 mov         r1, r3
  01330	e3a03004	 mov         r3, #4
  01334	e0020391	 mul         r2, r1, r3
  01338	e28d3024	 add         r3, sp, #0x24
  0133c	e0833002	 add         r3, r3, r2
  01340	e5932000	 ldr         r2, [r3]
  01344	e59d3014	 ldr         r3, [sp, #0x14]
  01348	e1120003	 tst         r2, r3
  0134c	0a000029	 beq         |$LN26@KPD_IntrTh|

; 605  :                     {
; 606  :                         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: Key Down: 0x%x\r\n", vk ));

  01350	e59f3558	 ldr         r3, [pc, #0x558]
  01354	e5933440	 ldr         r3, [r3, #0x440]
  01358	e3130020	 tst         r3, #0x20
  0135c	0a000005	 beq         |$LN91@KPD_IntrTh|
  01360	e5dd1004	 ldrb        r1, [sp, #4]
  01364	e59f0560	 ldr         r0, [pc, #0x560]
  01368	eb000000	 bl          NKDbgPrintfW
  0136c	e3a03001	 mov         r3, #1
  01370	e58d30cc	 str         r3, [sp, #0xCC]
  01374	ea000001	 b           |$LN92@KPD_IntrTh|
  01378		 |$LN91@KPD_IntrTh|
  01378	e3a03000	 mov         r3, #0
  0137c	e58d30cc	 str         r3, [sp, #0xCC]
  01380		 |$LN92@KPD_IntrTh|

; 607  :                         keybd_event(vk, 0, 0, 0);

  01380	e3a03000	 mov         r3, #0
  01384	e3a02000	 mov         r2, #0
  01388	e3a01000	 mov         r1, #0
  0138c	e5dd0004	 ldrb        r0, [sp, #4]
  01390	eb000000	 bl          keybd_event

; 608  : 
; 609  :                         //Notify for power manager events
; 610  :                         if(vk == VK_TPOWER)

  01394	e5dd3004	 ldrb        r3, [sp, #4]
  01398	e3530081	 cmp         r3, #0x81
  0139c	1a000003	 bne         |$LN25@KPD_IntrTh|

; 611  :                         {
; 612  :                             PowerPolicyNotify(PPN_POWERBUTTONPRESSED, 0);

  013a0	e3a01000	 mov         r1, #0
  013a4	e3a00004	 mov         r0, #4
  013a8	eb000000	 bl          PowerPolicyNotify

; 613  :                         }
; 614  :                         else

  013ac	ea000002	 b           |$LN24@KPD_IntrTh|
  013b0		 |$LN25@KPD_IntrTh|

; 615  :                         {
; 616  :                             //Application button pressed
; 617  :                             //PM uses this to indicate user activity and reset timers
; 618  :                             PowerPolicyNotify(PPN_APPBUTTONPRESSED, 0);

  013b0	e3a01000	 mov         r1, #0
  013b4	e3a00006	 mov         r0, #6
  013b8	eb000000	 bl          PowerPolicyNotify
  013bc		 |$LN24@KPD_IntrTh|

; 619  :                         }
; 620  : 
; 621  :                         if(vk == VK_TSTAR)

  013bc	e5dd3004	 ldrb        r3, [sp, #4]
  013c0	e3530077	 cmp         r3, #0x77
  013c4	1a00000a	 bne         |$LN23@KPD_IntrTh|

; 622  :                         {
; 623  :                             DEBUGMSG(ZONE_IST, (L"VK_TSTAR\r\n"));

  013c8	e59f34e0	 ldr         r3, [pc, #0x4E0]
  013cc	e5933440	 ldr         r3, [r3, #0x440]
  013d0	e3130020	 tst         r3, #0x20
  013d4	0a000004	 beq         |$LN93@KPD_IntrTh|
  013d8	e59f04e8	 ldr         r0, [pc, #0x4E8]
  013dc	eb000000	 bl          NKDbgPrintfW
  013e0	e3a03001	 mov         r3, #1
  013e4	e58d30d0	 str         r3, [sp, #0xD0]
  013e8	ea000001	 b           |$LN94@KPD_IntrTh|
  013ec		 |$LN93@KPD_IntrTh|
  013ec	e3a03000	 mov         r3, #0
  013f0	e58d30d0	 str         r3, [sp, #0xD0]
  013f4		 |$LN94@KPD_IntrTh|
  013f4		 |$LN23@KPD_IntrTh|

; 624  :                         }
; 625  :                     }
; 626  :                     else

  013f4	ea000010	 b           |$LN22@KPD_IntrTh|
  013f8		 |$LN26@KPD_IntrTh|

; 627  :                     {
; 628  :                         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: Key Up: 0x%x\r\n", vk ));

  013f8	e59f34b0	 ldr         r3, [pc, #0x4B0]
  013fc	e5933440	 ldr         r3, [r3, #0x440]
  01400	e3130020	 tst         r3, #0x20
  01404	0a000005	 beq         |$LN95@KPD_IntrTh|
  01408	e5dd1004	 ldrb        r1, [sp, #4]
  0140c	e59f04b0	 ldr         r0, [pc, #0x4B0]
  01410	eb000000	 bl          NKDbgPrintfW
  01414	e3a03001	 mov         r3, #1
  01418	e58d30d4	 str         r3, [sp, #0xD4]
  0141c	ea000001	 b           |$LN96@KPD_IntrTh|
  01420		 |$LN95@KPD_IntrTh|
  01420	e3a03000	 mov         r3, #0
  01424	e58d30d4	 str         r3, [sp, #0xD4]
  01428		 |$LN96@KPD_IntrTh|

; 629  :                         keybd_event(vk, 0, KEYEVENTF_KEYUP, 0);

  01428	e3a03000	 mov         r3, #0
  0142c	e3a02002	 mov         r2, #2
  01430	e3a01000	 mov         r1, #0
  01434	e5dd0004	 ldrb        r0, [sp, #4]
  01438	eb000000	 bl          keybd_event
  0143c		 |$LN22@KPD_IntrTh|
  0143c		 |$LN27@KPD_IntrTh|

; 630  :                     }
; 631  :                 }
; 632  :             }

  0143c	eaffffab	 b           |$LN29@KPD_IntrTh|
  01440		 |$LN28@KPD_IntrTh|
  01440		 |$LN31@KPD_IntrTh|

; 633  :         }

  01440	eaffff87	 b           |$LN34@KPD_IntrTh|
  01444		 |$LN33@KPD_IntrTh|

; 634  : 
; 635  :         //--------------------------------------------------------------
; 636  :         //  Check for auto-repeat keys
; 637  :         //--------------------------------------------------------------
; 638  :         for (ix = 0; ix < g_keypadRepeat.count; ix++) {

  01444	e3a03000	 mov         r3, #0
  01448	e58d3008	 str         r3, [sp, #8]
  0144c	ea000002	 b           |$LN21@KPD_IntrTh|
  01450		 |$LN20@KPD_IntrTh|
  01450	e59d3008	 ldr         r3, [sp, #8]
  01454	e2833001	 add         r3, r3, #1
  01458	e58d3008	 str         r3, [sp, #8]
  0145c		 |$LN21@KPD_IntrTh|
  0145c	e59f345c	 ldr         r3, [pc, #0x45C]
  01460	e1d320b0	 ldrh        r2, [r3]
  01464	e59d3008	 ldr         r3, [sp, #8]
  01468	e1530002	 cmp         r3, r2
  0146c	2a0000b6	 bcs         |$LN19@KPD_IntrTh|

; 639  :             const KEYPAD_REPEAT_ITEM *pItem = &g_keypadRepeat.pItem[ix];

  01470	e59d1008	 ldr         r1, [sp, #8]
  01474	e3a03010	 mov         r3, #0x10
  01478	e0020391	 mul         r2, r1, r3
  0147c	e59f343c	 ldr         r3, [pc, #0x43C]
  01480	e5933004	 ldr         r3, [r3, #4]
  01484	e0833002	 add         r3, r3, r2
  01488	e58d3088	 str         r3, [sp, #0x88]

; 640  :             const KEYPAD_REPEAT_BLOCK *pBlock = pItem->pBlock;

  0148c	e59d3088	 ldr         r3, [sp, #0x88]
  01490	e283300c	 add         r3, r3, #0xC
  01494	e5933000	 ldr         r3, [r3]
  01498	e58d3090	 str         r3, [sp, #0x90]

; 641  :             KEYPAD_REPEAT_STATE *pState = &pRepeatState[ix];

  0149c	e59d1008	 ldr         r1, [sp, #8]
  014a0	e3a0300c	 mov         r3, #0xC
  014a4	e0020391	 mul         r2, r1, r3
  014a8	e59d301c	 ldr         r3, [sp, #0x1C]
  014ac	e0833002	 add         r3, r3, r2
  014b0	e58d308c	 str         r3, [sp, #0x8C]

; 642  :             DWORD delay;
; 643  :             UCHAR vkBlock;
; 644  : 
; 645  :             vk = pItem->vkey;

  014b4	e59d3088	 ldr         r3, [sp, #0x88]
  014b8	e5d33000	 ldrb        r3, [r3]
  014bc	e5cd3004	 strb        r3, [sp, #4]

; 646  :             if ((vkNewState[vk >> 5] & (1 << (vk & 0x1F))) != 0) {

  014c0	e5dd3004	 ldrb        r3, [sp, #4]
  014c4	e1a012c3	 mov         r1, r3, asr #5
  014c8	e3a03004	 mov         r3, #4
  014cc	e0020391	 mul         r2, r1, r3
  014d0	e28d3024	 add         r3, sp, #0x24
  014d4	e0831002	 add         r1, r3, r2
  014d8	e5dd3004	 ldrb        r3, [sp, #4]
  014dc	e203201f	 and         r2, r3, #0x1F
  014e0	e3a03001	 mov         r3, #1
  014e4	e1a02213	 mov         r2, r3, lsl r2
  014e8	e5913000	 ldr         r3, [r1]
  014ec	e1130002	 tst         r3, r2
  014f0	0a00008d	 beq         |$LN18@KPD_IntrTh|

; 647  :                 if (!pState->pending) {

  014f4	e59d308c	 ldr         r3, [sp, #0x8C]
  014f8	e5933000	 ldr         r3, [r3]
  014fc	e3530000	 cmp         r3, #0
  01500	1a000018	 bne         |$LN17@KPD_IntrTh|

; 648  :                     // Key was just pressed
; 649  :                     delay = pItem->firstDelay;

  01504	e59d3088	 ldr         r3, [sp, #0x88]
  01508	e2833002	 add         r3, r3, #2
  0150c	e1d330b0	 ldrh        r3, [r3]
  01510	e58d3094	 str         r3, [sp, #0x94]

; 650  :                     if (delay == 0) delay = pDevice->firstRepeat;

  01514	e59d3094	 ldr         r3, [sp, #0x94]
  01518	e3530000	 cmp         r3, #0
  0151c	1a000003	 bne         |$LN16@KPD_IntrTh|
  01520	e59d3000	 ldr         r3, [sp]
  01524	e2833010	 add         r3, r3, #0x10
  01528	e5933000	 ldr         r3, [r3]
  0152c	e58d3094	 str         r3, [sp, #0x94]
  01530		 |$LN16@KPD_IntrTh|

; 651  :                     pState->time = time + delay;

  01530	e59d2020	 ldr         r2, [sp, #0x20]
  01534	e59d3094	 ldr         r3, [sp, #0x94]
  01538	e0822003	 add         r2, r2, r3
  0153c	e59d308c	 ldr         r3, [sp, #0x8C]
  01540	e2833004	 add         r3, r3, #4
  01544	e5832000	 str         r2, [r3]

; 652  :                     pState->pending = TRUE;

  01548	e59d208c	 ldr         r2, [sp, #0x8C]
  0154c	e3a03001	 mov         r3, #1
  01550	e5823000	 str         r3, [r2]

; 653  :                     pState->blocked = FALSE;

  01554	e59d308c	 ldr         r3, [sp, #0x8C]
  01558	e2832008	 add         r2, r3, #8
  0155c	e3a03000	 mov         r3, #0
  01560	e5823000	 str         r3, [r2]
  01564	ea00006f	 b           |$LN15@KPD_IntrTh|
  01568		 |$LN17@KPD_IntrTh|

; 654  :                 } else if ((INT32)(time - pState->time) >= 0) {

  01568	e59d308c	 ldr         r3, [sp, #0x8C]
  0156c	e2833004	 add         r3, r3, #4
  01570	e59d2020	 ldr         r2, [sp, #0x20]
  01574	e5933000	 ldr         r3, [r3]
  01578	e0523003	 subs        r3, r2, r3
  0157c	4a000069	 bmi         |$LN14@KPD_IntrTh|

; 655  :                     // Check if any blocking keys are pressed
; 656  :                     if (pBlock != 0) {

  01580	e59d3090	 ldr         r3, [sp, #0x90]
  01584	e3530000	 cmp         r3, #0
  01588	0a000035	 beq         |$LN13@KPD_IntrTh|

; 657  :                         for (i = 0; i < pBlock->count; i++) {

  0158c	e3a03000	 mov         r3, #0
  01590	e1cd30b6	 strh        r3, [sp, #6]
  01594	ea000004	 b           |$LN12@KPD_IntrTh|
  01598		 |$LN11@KPD_IntrTh|
  01598	e1dd30b6	 ldrh        r3, [sp, #6]
  0159c	e2833001	 add         r3, r3, #1
  015a0	e1a03803	 mov         r3, r3, lsl #16
  015a4	e1a03823	 mov         r3, r3, lsr #16
  015a8	e1cd30b6	 strh        r3, [sp, #6]
  015ac		 |$LN12@KPD_IntrTh|
  015ac	e1dd30b6	 ldrh        r3, [sp, #6]
  015b0	e1a02003	 mov         r2, r3
  015b4	e59d3090	 ldr         r3, [sp, #0x90]
  015b8	e5d33000	 ldrb        r3, [r3]
  015bc	e1520003	 cmp         r2, r3
  015c0	aa000027	 bge         |$LN10@KPD_IntrTh|

; 658  :                             vkBlock = pBlock->pVKey[i];

  015c4	e59d3090	 ldr         r3, [sp, #0x90]
  015c8	e2831004	 add         r1, r3, #4
  015cc	e1dd30b6	 ldrh        r3, [sp, #6]
  015d0	e1a02003	 mov         r2, r3
  015d4	e5913000	 ldr         r3, [r1]
  015d8	e0833002	 add         r3, r3, r2
  015dc	e5d33000	 ldrb        r3, [r3]
  015e0	e5cd3084	 strb        r3, [sp, #0x84]

; 659  :                             if ((
; 660  :                                 vkNewState[vkBlock >> 5] &
; 661  :                                 (1 << (vkBlock & 0x1F))
; 662  :                             ) != 0) {

  015e4	e5dd3084	 ldrb        r3, [sp, #0x84]
  015e8	e1a012c3	 mov         r1, r3, asr #5
  015ec	e3a03004	 mov         r3, #4
  015f0	e0020391	 mul         r2, r1, r3
  015f4	e28d3024	 add         r3, sp, #0x24
  015f8	e0831002	 add         r1, r3, r2
  015fc	e5dd3084	 ldrb        r3, [sp, #0x84]
  01600	e203201f	 and         r2, r3, #0x1F
  01604	e3a03001	 mov         r3, #1
  01608	e1a02213	 mov         r2, r3, lsl r2
  0160c	e5913000	 ldr         r3, [r1]
  01610	e1130002	 tst         r3, r2
  01614	0a000011	 beq         |$LN9@KPD_IntrTh|

; 663  :                                 pState->blocked = TRUE;

  01618	e59d308c	 ldr         r3, [sp, #0x8C]
  0161c	e2832008	 add         r2, r3, #8
  01620	e3a03001	 mov         r3, #1
  01624	e5823000	 str         r3, [r2]

; 664  :                                 DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 665  :                                     L"Block repeat: 0x%x because of 0x%x\r\n",
; 666  :                                     vk, vkBlock
; 667  :                                 ));

  01628	e59f3280	 ldr         r3, [pc, #0x280]
  0162c	e5933440	 ldr         r3, [r3, #0x440]
  01630	e3130020	 tst         r3, #0x20
  01634	0a000006	 beq         |$LN97@KPD_IntrTh|
  01638	e5dd2084	 ldrb        r2, [sp, #0x84]
  0163c	e5dd1004	 ldrb        r1, [sp, #4]
  01640	e59f0274	 ldr         r0, [pc, #0x274]
  01644	eb000000	 bl          NKDbgPrintfW
  01648	e3a03001	 mov         r3, #1
  0164c	e58d30d8	 str         r3, [sp, #0xD8]
  01650	ea000001	 b           |$LN98@KPD_IntrTh|
  01654		 |$LN97@KPD_IntrTh|
  01654	e3a03000	 mov         r3, #0
  01658	e58d30d8	 str         r3, [sp, #0xD8]
  0165c		 |$LN98@KPD_IntrTh|

; 668  :                                 break;

  0165c	ea000000	 b           |$LN10@KPD_IntrTh|
  01660		 |$LN9@KPD_IntrTh|

; 669  :                             }
; 670  :                         }

  01660	eaffffcc	 b           |$LN11@KPD_IntrTh|
  01664		 |$LN10@KPD_IntrTh|
  01664		 |$LN13@KPD_IntrTh|

; 671  :                     }
; 672  :                     // Repeat if not blocked
; 673  :                     if (!pState->blocked) {

  01664	e59d308c	 ldr         r3, [sp, #0x8C]
  01668	e2833008	 add         r3, r3, #8
  0166c	e5933000	 ldr         r3, [r3]
  01670	e3530000	 cmp         r3, #0
  01674	1a00001a	 bne         |$LN8@KPD_IntrTh|

; 674  :                         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: "
; 675  :                             L"Key Repeat: 0x%x\r\n", vk
; 676  :                         ));

  01678	e59f3230	 ldr         r3, [pc, #0x230]
  0167c	e5933440	 ldr         r3, [r3, #0x440]
  01680	e3130020	 tst         r3, #0x20
  01684	0a000005	 beq         |$LN99@KPD_IntrTh|
  01688	e5dd1004	 ldrb        r1, [sp, #4]
  0168c	e59f0224	 ldr         r0, [pc, #0x224]
  01690	eb000000	 bl          NKDbgPrintfW
  01694	e3a03001	 mov         r3, #1
  01698	e58d30dc	 str         r3, [sp, #0xDC]
  0169c	ea000001	 b           |$LN100@KPD_IntrTh|
  016a0		 |$LN99@KPD_IntrTh|
  016a0	e3a03000	 mov         r3, #0
  016a4	e58d30dc	 str         r3, [sp, #0xDC]
  016a8		 |$LN100@KPD_IntrTh|

; 677  :                         keybd_event(vk, 0, pItem->silent?KEYEVENTF_SILENT:0, 0);

  016a8	e59d3088	 ldr         r3, [sp, #0x88]
  016ac	e2833008	 add         r3, r3, #8
  016b0	e5933000	 ldr         r3, [r3]
  016b4	e3530000	 cmp         r3, #0
  016b8	0a000002	 beq         |$LN101@KPD_IntrTh|
  016bc	e3a03004	 mov         r3, #4
  016c0	e58d30e0	 str         r3, [sp, #0xE0]
  016c4	ea000001	 b           |$LN102@KPD_IntrTh|
  016c8		 |$LN101@KPD_IntrTh|
  016c8	e3a03000	 mov         r3, #0
  016cc	e58d30e0	 str         r3, [sp, #0xE0]
  016d0		 |$LN102@KPD_IntrTh|
  016d0	e3a03000	 mov         r3, #0
  016d4	e59d20e0	 ldr         r2, [sp, #0xE0]
  016d8	e3a01000	 mov         r1, #0
  016dc	e5dd0004	 ldrb        r0, [sp, #4]
  016e0	eb000000	 bl          keybd_event
  016e4		 |$LN8@KPD_IntrTh|

; 678  :                     }
; 679  :                     // Set time for next repeat
; 680  :                     delay = pItem->nextDelay;

  016e4	e59d3088	 ldr         r3, [sp, #0x88]
  016e8	e2833004	 add         r3, r3, #4
  016ec	e1d330b0	 ldrh        r3, [r3]
  016f0	e58d3094	 str         r3, [sp, #0x94]

; 681  :                     if (delay == 0) delay = pDevice->nextRepeat;

  016f4	e59d3094	 ldr         r3, [sp, #0x94]
  016f8	e3530000	 cmp         r3, #0
  016fc	1a000003	 bne         |$LN7@KPD_IntrTh|
  01700	e59d3000	 ldr         r3, [sp]
  01704	e2833014	 add         r3, r3, #0x14
  01708	e5933000	 ldr         r3, [r3]
  0170c	e58d3094	 str         r3, [sp, #0x94]
  01710		 |$LN7@KPD_IntrTh|

; 682  :                     pState->time = time + delay;

  01710	e59d2020	 ldr         r2, [sp, #0x20]
  01714	e59d3094	 ldr         r3, [sp, #0x94]
  01718	e0822003	 add         r2, r2, r3
  0171c	e59d308c	 ldr         r3, [sp, #0x8C]
  01720	e2833004	 add         r3, r3, #4
  01724	e5832000	 str         r2, [r3]
  01728		 |$LN14@KPD_IntrTh|
  01728		 |$LN15@KPD_IntrTh|

; 683  :                 }
; 684  :             } else {

  01728	ea000006	 b           |$LN6@KPD_IntrTh|
  0172c		 |$LN18@KPD_IntrTh|

; 685  :                 pState->pending = FALSE;

  0172c	e59d208c	 ldr         r2, [sp, #0x8C]
  01730	e3a03000	 mov         r3, #0
  01734	e5823000	 str         r3, [r2]

; 686  :                 pState->blocked = FALSE;

  01738	e59d308c	 ldr         r3, [sp, #0x8C]
  0173c	e2832008	 add         r2, r3, #8
  01740	e3a03000	 mov         r3, #0
  01744	e5823000	 str         r3, [r2]
  01748		 |$LN6@KPD_IntrTh|

; 687  :             }
; 688  :         }

  01748	eaffff40	 b           |$LN20@KPD_IntrTh|
  0174c		 |$LN19@KPD_IntrTh|

; 689  : 
; 690  :         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: Prepare for next run\r\n"));

  0174c	e59f315c	 ldr         r3, [pc, #0x15C]
  01750	e5933440	 ldr         r3, [r3, #0x440]
  01754	e3130020	 tst         r3, #0x20
  01758	0a000004	 beq         |$LN103@KPD_IntrTh|
  0175c	e59f0150	 ldr         r0, [pc, #0x150]
  01760	eb000000	 bl          NKDbgPrintfW
  01764	e3a03001	 mov         r3, #1
  01768	e58d30e4	 str         r3, [sp, #0xE4]
  0176c	ea000001	 b           |$LN104@KPD_IntrTh|
  01770		 |$LN103@KPD_IntrTh|
  01770	e3a03000	 mov         r3, #0
  01774	e58d30e4	 str         r3, [sp, #0xE4]
  01778		 |$LN104@KPD_IntrTh|

; 691  :         //--------------------------------------------------------------
; 692  :         // Prepare for next run
; 693  :         //--------------------------------------------------------------
; 694  :         // New state become old
; 695  :         memcpy(vkState, vkNewState, sizeof(vkState));

  01778	e3a02020	 mov         r2, #0x20
  0177c	e28d1024	 add         r1, sp, #0x24
  01780	e28d004c	 add         r0, sp, #0x4C
  01784	eb000000	 bl          memcpy

; 696  :    
; 697  :         // Set timeout period depending on data state
; 698  :         timeout = keyDown ? pDevice->samplePeriod : INFINITE;

  01788	e59d3048	 ldr         r3, [sp, #0x48]
  0178c	e3530000	 cmp         r3, #0
  01790	0a000004	 beq         |$LN105@KPD_IntrTh|
  01794	e59d3000	 ldr         r3, [sp]
  01798	e2833008	 add         r3, r3, #8
  0179c	e5933000	 ldr         r3, [r3]
  017a0	e58d30e8	 str         r3, [sp, #0xE8]
  017a4	ea000001	 b           |$LN106@KPD_IntrTh|
  017a8		 |$LN105@KPD_IntrTh|
  017a8	e3e03000	 mvn         r3, #0
  017ac	e58d30e8	 str         r3, [sp, #0xE8]
  017b0		 |$LN106@KPD_IntrTh|
  017b0	e59d30e8	 ldr         r3, [sp, #0xE8]
  017b4	e58d3070	 str         r3, [sp, #0x70]

; 699  :         DEBUGMSG(ZONE_IST, (L" KPD_IntrThread: InterruptDone, timeout set to %d\r\n", timeout));

  017b8	e59f30f0	 ldr         r3, [pc, #0xF0]
  017bc	e5933440	 ldr         r3, [r3, #0x440]
  017c0	e3130020	 tst         r3, #0x20
  017c4	0a000005	 beq         |$LN107@KPD_IntrTh|
  017c8	e59d1070	 ldr         r1, [sp, #0x70]
  017cc	e59f00d8	 ldr         r0, [pc, #0xD8]
  017d0	eb000000	 bl          NKDbgPrintfW
  017d4	e3a03001	 mov         r3, #1
  017d8	e58d30ec	 str         r3, [sp, #0xEC]
  017dc	ea000001	 b           |$LN108@KPD_IntrTh|
  017e0		 |$LN107@KPD_IntrTh|
  017e0	e3a03000	 mov         r3, #0
  017e4	e58d30ec	 str         r3, [sp, #0xEC]
  017e8		 |$LN108@KPD_IntrTh|

; 700  :         // Interrupt is done
; 701  :         for (index=g_nbKeys-1;index>=0;index--)

  017e8	e59f30b8	 ldr         r3, [pc, #0xB8]
  017ec	e5933000	 ldr         r3, [r3]
  017f0	e2433001	 sub         r3, r3, #1
  017f4	e58d3018	 str         r3, [sp, #0x18]
  017f8	ea000002	 b           |$LN5@KPD_IntrTh|
  017fc		 |$LN4@KPD_IntrTh|
  017fc	e59d3018	 ldr         r3, [sp, #0x18]
  01800	e2433001	 sub         r3, r3, #1
  01804	e58d3018	 str         r3, [sp, #0x18]
  01808		 |$LN5@KPD_IntrTh|
  01808	e59d3018	 ldr         r3, [sp, #0x18]
  0180c	e3530000	 cmp         r3, #0
  01810	ba000012	 blt         |$LN3@KPD_IntrTh|

; 702  :         {
; 703  :             GPIOInterruptDone(pDevice->hGpio,g_keypadVK[index].gpio,pDevice->keypadSysintr[index]);

  01814	e59d3000	 ldr         r3, [sp]
  01818	e2830040	 add         r0, r3, #0x40
  0181c	e59d1018	 ldr         r1, [sp, #0x18]
  01820	e3a03004	 mov         r3, #4
  01824	e0020391	 mul         r2, r1, r3
  01828	e5903000	 ldr         r3, [r0]
  0182c	e0833002	 add         r3, r3, r2
  01830	e5932000	 ldr         r2, [r3]
  01834	e59d0018	 ldr         r0, [sp, #0x18]
  01838	e3a03008	 mov         r3, #8
  0183c	e0010390	 mul         r1, r0, r3
  01840	e59f305c	 ldr         r3, [pc, #0x5C]
  01844	e0833001	 add         r3, r3, r1
  01848	e5931000	 ldr         r1, [r3]
  0184c	e59d3000	 ldr         r3, [sp]
  01850	e283303c	 add         r3, r3, #0x3C
  01854	e5930000	 ldr         r0, [r3]
  01858	eb000000	 bl          GPIOInterruptDone

; 704  :         }

  0185c	eaffffe6	 b           |$LN4@KPD_IntrTh|
  01860		 |$LN3@KPD_IntrTh|

; 705  :     }

  01860	eafffc85	 b           |$LN72@KPD_IntrTh|
  01864		 |$LN71@KPD_IntrTh|
  01864		 |$cleanUp$43896|

; 706  : 
; 707  : cleanUp:
; 708  : 
; 709  :     if (pRemapState != NULL) LocalFree(pRemapState);

  01864	e59d300c	 ldr         r3, [sp, #0xC]
  01868	e3530000	 cmp         r3, #0
  0186c	0a000001	 beq         |$LN2@KPD_IntrTh|
  01870	e59d000c	 ldr         r0, [sp, #0xC]
  01874	eb000000	 bl          LocalFree
  01878		 |$LN2@KPD_IntrTh|

; 710  :     if (pRepeatState != NULL) LocalFree(pRepeatState);

  01878	e59d301c	 ldr         r3, [sp, #0x1C]
  0187c	e3530000	 cmp         r3, #0
  01880	0a000001	 beq         |$LN1@KPD_IntrTh|
  01884	e59d001c	 ldr         r0, [sp, #0x1C]
  01888	eb000000	 bl          LocalFree
  0188c		 |$LN1@KPD_IntrTh|

; 711  :     return ERROR_SUCCESS;

  0188c	e3a03000	 mov         r3, #0
  01890	e58d3098	 str         r3, [sp, #0x98]

; 712  : }

  01894	e59d0098	 ldr         r0, [sp, #0x98]
  01898	e28dd0f0	 add         sp, sp, #0xF0
  0189c	e89d6000	 ldmia       sp, {sp, lr}
  018a0	e12fff1e	 bx          lr
  018a4		 |$LN112@KPD_IntrTh|
  018a4		 |$LN113@KPD_IntrTh|
  018a4	00000000	 DCD         |g_keypadVK|
  018a8		 |$LN114@KPD_IntrTh|
  018a8	00000000	 DCD         |g_nbKeys|
  018ac		 |$LN115@KPD_IntrTh|
  018ac	00000000	 DCD         |??_C@_1GI@CJMEHCNE@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAD?$AAo?$AAn?$AAe?$AA?0?$AA?5@|
  018b0		 |$LN116@KPD_IntrTh|
  018b0	00000000	 DCD         |dpCurSettings|
  018b4		 |$LN117@KPD_IntrTh|
  018b4	00000000	 DCD         |??_C@_1FA@OEJPKNOP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAP?$AAr?$AAe?$AAp?$AAa?$AAr?$AAe?$AA?5?$AAf?$AAo?$AAr?$AA?5?$AAn?$AAe?$AAx@|
  018b8		 |$LN118@KPD_IntrTh|
  018b8	00000000	 DCD         |??_C@_1EI@MBMNALEM@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAR?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF@|
  018bc		 |$LN119@KPD_IntrTh|
  018bc	00000000	 DCD         |??_C@_1GM@NOFDFHJD@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAB?$AAl?$AAo?$AAc?$AAk?$AA?5?$AAr?$AAe?$AAp?$AAe?$AAa?$AAt?$AA?3?$AA?5?$AA0@|
  018c0		 |$LN120@KPD_IntrTh|
  018c0	00000000	 DCD         |g_keypadRepeat|
  018c4		 |$LN121@KPD_IntrTh|
  018c4	00000000	 DCD         |??_C@_1EA@FIDBIEFP@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAU?$AAp?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  018c8		 |$LN122@KPD_IntrTh|
  018c8	00000000	 DCD         |??_C@_1BG@OOGCKOCO@?$AAV?$AAK?$AA_?$AAT?$AAS?$AAT?$AAA?$AAR?$AA?$AN?$AA?6?$AA?$AA@|
  018cc		 |$LN123@KPD_IntrTh|
  018cc	00000000	 DCD         |??_C@_1EE@DJAIAEGH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAK?$AAe?$AAy?$AA?5?$AAD?$AAo?$AAw?$AAn?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?$AN@|
  018d0		 |$LN124@KPD_IntrTh|
  018d0	00000000	 DCD         |??_C@_1CG@JANBOJMA@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA2?$AA?$AN?$AA?6?$AA?$AA@|
  018d4		 |$LN125@KPD_IntrTh|
  018d4	00000000	 DCD         |??_C@_1GI@NNCNBHH@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAp?$AAr?$AAe?$AAs?$AAs?$AA?5?$AAa?$AAn@|
  018d8		 |$LN126@KPD_IntrTh|
  018d8	00000000	 DCD         |??_C@_1EK@OBDNJICF@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAM?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AAv?$AAk?$AAe?$AAy?$AA?3?$AA?5?$AA0?$AAx@|
  018dc		 |$LN127@KPD_IntrTh|
  018dc	00000000	 DCD         |g_keypadRemap|
  018e0		 |$LN128@KPD_IntrTh|
  018e0	00000000	 DCD         |??_C@_1CE@NEDINNM@?$AAk?$AAe?$AAy?$AAD?$AAo?$AAw?$AAn?$AA?5?$AA?$DN?$AA?5?$AAT?$AAR?$AAU?$AAE?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  018e4		 |$LN129@KPD_IntrTh|
  018e4	00000000	 DCD         |??_C@_1IM@OKLCMLDJ@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  018e8		 |$LN130@KPD_IntrTh|
  018e8	00000000	 DCD         |??_C@_1IA@DJKJBFLA@?$AA?5?$AAK?$AAP?$AAD?$AA_?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  018ec		 |$LN131@KPD_IntrTh|
  018ec	00000000	 DCD         |??_C@_1DC@CMLBFIDH@?$AAK?$AAP?$AAD?$AA?5?$AA?9?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAI?$AAn?$AAt?$AAr?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  018f0		 |$M44180|

			 ENDP  ; |KPD_IntrThread|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00030			 AREA	 |.pdata|, PDATA
|$T44208| DCD	|$LN8@DllMain|
	DCD	0x40001404
; Function compile flags: /Odtp

  018f0			 AREA	 |.text|, CODE, ARM

  018f0		 |DllMain| PROC

; 721  : {

  018f0		 |$LN8@DllMain|
  018f0	e1a0c00d	 mov         r12, sp
  018f4	e92d0007	 stmdb       sp!, {r0 - r2}
  018f8	e92d5000	 stmdb       sp!, {r12, lr}
  018fc	e24dd004	 sub         sp, sp, #4
  01900		 |$M44205|

; 722  :     UNREFERENCED_PARAMETER(pReserved);
; 723  :     switch (reason) {

  01900	e59d3010	 ldr         r3, [sp, #0x10]
  01904	e3530001	 cmp         r3, #1
  01908	0a000000	 beq         |$LN1@DllMain|
  0190c	ea000004	 b           |$LN2@DllMain|
  01910		 |$LN1@DllMain|

; 724  :     case DLL_PROCESS_ATTACH:
; 725  :         DEBUGREGISTER(hDLL);

  01910	e59f1024	 ldr         r1, [pc, #0x24]
  01914	e59d000c	 ldr         r0, [sp, #0xC]
  01918	eb000000	 bl          RegisterDbgZones

; 726  :         DisableThreadLibraryCalls((HMODULE)hDLL);

  0191c	e59d000c	 ldr         r0, [sp, #0xC]
  01920	eb000000	 bl          DisableThreadLibraryCalls
  01924		 |$LN2@DllMain|

; 727  :         break;
; 728  :     }
; 729  :     return TRUE;

  01924	e3a03001	 mov         r3, #1
  01928	e58d3000	 str         r3, [sp]

; 730  : }

  0192c	e59d0000	 ldr         r0, [sp]
  01930	e28dd004	 add         sp, sp, #4
  01934	e89d6000	 ldmia       sp, {sp, lr}
  01938	e12fff1e	 bx          lr
  0193c		 |$LN9@DllMain|
  0193c		 |$LN10@DllMain|
  0193c	00000000	 DCD         |dpCurSettings|
  01940		 |$M44206|

			 ENDP  ; |DllMain|

	END
