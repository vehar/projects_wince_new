; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_POWER\power.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMInterruptPending|
	IMPORT	|OALIntrIsIrqPending|
	IMPORT	|OALIntrTranslateSysIntr|

  00000			 AREA	 |.pdata|, PDATA
|$T44319| DCD	|$LN9@OEMInterru|
	DCD	0x40002c04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_power\power.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptPending| PROC

; 53   : {

  00000		 |$LN9@OEMInterru|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd01c	 sub         sp, sp, #0x1C
  00010		 |$M44316|

; 54   :     BOOL pending = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3008	 str         r3, [sp, #8]

; 55   :     const UINT32 *pIrqs;
; 56   :     UINT32 ix, count;
; 57   : 
; 58   :     if (OALIntrTranslateSysIntr(sysIntr, &count, &pIrqs))

  00018	e28d200c	 add         r2, sp, #0xC
  0001c	e28d1000	 add         r1, sp, #0
  00020	e59d0024	 ldr         r0, [sp, #0x24]
  00024	eb000000	 bl          OALIntrTranslateSysIntr
  00028	e58d0014	 str         r0, [sp, #0x14]
  0002c	e59d3014	 ldr         r3, [sp, #0x14]
  00030	e3530000	 cmp         r3, #0
  00034	0a000017	 beq         |$LN4@OEMInterru|

; 59   :     {
; 60   :         for (ix = 0; ix < count && !pending; ix++)

  00038	e3a03000	 mov         r3, #0
  0003c	e58d3004	 str         r3, [sp, #4]
  00040	ea000002	 b           |$LN3@OEMInterru|
  00044		 |$LN2@OEMInterru|
  00044	e59d3004	 ldr         r3, [sp, #4]
  00048	e2833001	 add         r3, r3, #1
  0004c	e58d3004	 str         r3, [sp, #4]
  00050		 |$LN3@OEMInterru|
  00050	e59d2004	 ldr         r2, [sp, #4]
  00054	e59d3000	 ldr         r3, [sp]
  00058	e1520003	 cmp         r2, r3
  0005c	2a00000d	 bcs         |$LN1@OEMInterru|
  00060	e59d3008	 ldr         r3, [sp, #8]
  00064	e3530000	 cmp         r3, #0
  00068	1a00000a	 bne         |$LN1@OEMInterru|

; 61   :         {
; 62   :             pending = OALIntrIsIrqPending(pIrqs[ix]);

  0006c	e59d1004	 ldr         r1, [sp, #4]
  00070	e3a03004	 mov         r3, #4
  00074	e0020391	 mul         r2, r1, r3
  00078	e59d300c	 ldr         r3, [sp, #0xC]
  0007c	e0833002	 add         r3, r3, r2
  00080	e5930000	 ldr         r0, [r3]
  00084	eb000000	 bl          OALIntrIsIrqPending
  00088	e58d0018	 str         r0, [sp, #0x18]
  0008c	e59d3018	 ldr         r3, [sp, #0x18]
  00090	e58d3008	 str         r3, [sp, #8]

; 63   :         }            

  00094	eaffffea	 b           |$LN2@OEMInterru|
  00098		 |$LN1@OEMInterru|
  00098		 |$LN4@OEMInterru|

; 64   :     }
; 65   :         
; 66   :     return pending;

  00098	e59d3008	 ldr         r3, [sp, #8]
  0009c	e58d3010	 str         r3, [sp, #0x10]

; 67   : }

  000a0	e59d0010	 ldr         r0, [sp, #0x10]
  000a4	e28dd01c	 add         sp, sp, #0x1C
  000a8	e89d6000	 ldmia       sp, {sp, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$M44317|

			 ENDP  ; |OEMInterruptPending|

	EXPORT	|OEMPowerOff|

  00008			 AREA	 |.pdata|, PDATA
|$T44324| DCD	|$LN5@OEMPowerOf|
	DCD	0x40000100
; Function compile flags: /Odtp

  000b0			 AREA	 |.text|, CODE, ARM

  000b0		 |OEMPowerOff| PROC

; 76   : {

  000b0		 |$LN5@OEMPowerOf|
  000b0		 |$M44321|

; 77   : #if 0
; 78   : 
; 79   : 	DWORD  i		  = 0;
; 80   : 	UINT32 sysIntr;
; 81   :     UINT32 intr[3];
; 82   : 	UINT32 Count;
; 83   : 	UINT32* pIrqs;
; 84   : 	DWORD  deviceID;
; 85   : 	INTR_GPIO_CTXT* ctxt;
; 86   : 
; 87   :     // Give chance to do board specific stuff
; 88   :     BSPPowerOff();
; 89   : 
; 90   : 	// Save all interrupts masks
; 91   :     intr[0] = INREG32(&g_pIntr->pICLRegs->INTC_MIR0);
; 92   :     intr[1] = INREG32(&g_pIntr->pICLRegs->INTC_MIR1);
; 93   :     intr[2] = INREG32(&g_pIntr->pICLRegs->INTC_MIR2);
; 94   : 
; 95   : 	// Disable all interrupts
; 96   :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR0, OMAP_MPUIC_MASKALL);
; 97   :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR1, OMAP_MPUIC_MASKALL);
; 98   :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR2, OMAP_MPUIC_MASKALL);
; 99   : 
; 100  : 	// Save state then mask all GPIO interrupts
; 101  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)
; 102  :     {
; 103  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];		
; 104  : 
; 105  : 		// Enable Bank clocks first
; 106  : 		EnableDeviceClocks(pCurrGpioCtxt->device, TRUE);
; 107  : 
; 108  : 		// Save current state
; 109  : 		pCurrGpioCtxt->restoreCtxt.IRQENABLE1 = INREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1);
; 110  : 		pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE = INREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE);
; 111  : 
; 112  : 		// Disable all GPIO interrupts in the bank
; 113  :         OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, 0);
; 114  :         OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, 0);
; 115  : 
; 116  : 		// Disable Bank clocks
; 117  : 		EnableDeviceClocksNoRefCount(pCurrGpioCtxt->device, FALSE);
; 118  : 	}
; 119  : 
; 120  :     // Enable wakeup sources interrupts
; 121  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)
; 122  :     {
; 123  :         // Skip if sysIntr isn't allowed as wake source
; 124  :         if (!OALPowerWakeSource(sysIntr)) continue;
; 125  : 
; 126  : 		// Retrieve IRQs
; 127  : 		OALIntrTranslateSysIntr(sysIntr, &Count, &pIrqs);
; 128  : 
; 129  : 		// Loop into the IRQs
; 130  : 		for (i=0; i<Count; i++)
; 131  : 		{
; 132  : 			// We must handle the special case of the abstracted GPIO interrupts
; 133  : 			ctxt = GetGPIOCtxtByIrq(pIrqs[i]);
; 134  : 			if (ctxt)
; 135  : 			{
; 136  : 				// This is a GPIO interrupt, we need to enable its bank interrupt
; 137  : 				OALIntrEnableIrqs(1, &ctxt->bank_irq);
; 138  : 
; 139  : 				// Store its bank device ID for enabling its clocks
; 140  : 				deviceID = ctxt->device;
; 141  : 			}
; 142  : 			else
; 143  : 			{
; 144  : 				// This is NOT a GPIO interrupt, so we deduce the deviceid directly from its irq
; 145  : 				deviceID = GetDeviceByIrq(pIrqs[i]);
; 146  : 			}
; 147  : 
; 148  : 			// Enable Clocks for this device
; 149  : 			EnableDeviceClocksNoRefCount(deviceID, TRUE);
; 150  : 		}
; 151  : 
; 152  :         // Enable it as interrupt
; 153  :         OEMInterruptEnable(sysIntr, NULL, 0);
; 154  :   }
; 155  : 
; 156  : 	// Go to suspend mode
; 157  : 	//OALGoToSuspendMode();
; 158  : 
; 159  : 	/*
; 160  : 		Sleeping .... until waking up
; 161  : 	*/
; 162  : 
; 163  : 	// Find out about the wake up source
; 164  :     for (sysIntr = SYSINTR_DEVICES; sysIntr < SYSINTR_MAXIMUM; sysIntr++)
; 165  :     {            
; 166  : 		// Skip if sysIntr isn't allowed as wake source
; 167  : 		if (!OALPowerWakeSource(sysIntr)) continue;
; 168  : 
; 169  : 		// When this sysIntr is pending we find wake source
; 170  : 		if (OEMInterruptPending(sysIntr))
; 171  :         {
; 172  : 			g_oalWakeSource = sysIntr;
; 173  : 			break;
; 174  :         }
; 175  :     }
; 176  : 
; 177  : 	// Put GPIO interrupt state back to the way it was before suspend
; 178  : 	for (i=0; i<g_pIntr->nbGpioBank; i++)
; 179  :     {		
; 180  : 		INTR_GPIO_CTXT* pCurrGpioCtxt = &g_pIntr->pGpioCtxt[i];
; 181  : 
; 182  : 		// Enable Bank clocks first
; 183  : 		EnableDeviceClocksNoRefCount(pCurrGpioCtxt->device, TRUE);
; 184  : 
; 185  : 		// Write registers with the previously saved values
; 186  : 		OUTREG32(&pCurrGpioCtxt->pRegs->IRQENABLE1, pCurrGpioCtxt->restoreCtxt.IRQENABLE1);
; 187  : 		OUTREG32(&pCurrGpioCtxt->pRegs->WAKEUPENABLE, pCurrGpioCtxt->restoreCtxt.WAKEUPENABLE);
; 188  : 
; 189  : 		// Disable Bank clocks
; 190  : 		EnableDeviceClocks(pCurrGpioCtxt->device, FALSE);
; 191  : 	}
; 192  : 
; 193  : 	// restore inetrrupt masks
; 194  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR0, intr[0]);
; 195  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR1, intr[1]);
; 196  :     OUTREG32(&g_pIntr->pICLRegs->INTC_MIR2, intr[2]);  
; 197  : 
; 198  :     // Allow the BSP to perform board specific processing
; 199  :     BSPPowerOn();  
; 200  : #endif
; 201  : }

  000b0	e12fff1e	 bx          lr
  000b4		 |$M44322|

			 ENDP  ; |OEMPowerOff|

	END
