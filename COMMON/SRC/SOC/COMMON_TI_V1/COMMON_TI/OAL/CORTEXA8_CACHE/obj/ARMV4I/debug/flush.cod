; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\CORTEXA8_CACHE\flush.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|OEMCacheRangeFlush|
	IMPORT	|OALClearDTLBAsid|
	IMPORT	|OALClearDTLBEntry|
	IMPORT	|OALClearDTLB|
	IMPORT	|OALClearITLBAsid|
	IMPORT	|OALClearITLBEntry|
	IMPORT	|OALGetContextID|
	IMPORT	|OALClearITLB|
	IMPORT	|OALFlushICacheLines|
	IMPORT	|OALFlushICache|
	IMPORT	|OALInvalidateDCacheLines|
	IMPORT	|OALCleanDCacheLines|
	IMPORT	|OALFlushDCacheLines|
	IMPORT	|g_dwRangeLimit|
	IMPORT	|g_oalCacheInfo|
	IMPORT	|OALFlushDCache|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T44149| DCD	|$LN53@OEMCacheRa|
	DCD	0x40011b04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\cortexa8_cache\flush.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "C", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "R", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@| DCB "+"
	DCB	0x0, "O", 0x0, "E", 0x0, "M", 0x0, "C", 0x0, "a", 0x0, "c"
	DCB	0x0, "h", 0x0, "e", 0x0, "R", 0x0, "a", 0x0, "n", 0x0, "g"
	DCB	0x0, "e", 0x0, "F", 0x0, "l", 0x0, "u", 0x0, "s", 0x0, "h"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMCacheRangeFlush| PROC

; 78   : {

  00000		 |$LN53@OEMCacheRa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd038	 sub         sp, sp, #0x38
  00010		 |$M44146|

; 79   : //    BOOL    bEnabled;
; 80   : 
; 81   :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (
; 82   :         L"+OEMCacheRangeFlush(0x%08x, %d, 0x%08x)\r\n", pAddress, length, flags
; 83   :     ));

  00010	e59f3444	 ldr         r3, [pc, #0x444]
  00014	e5933440	 ldr         r3, [r3, #0x440]
  00018	e3130020	 tst         r3, #0x20
  0001c	0a00000b	 beq         |$LN47@OEMCacheRa|
  00020	e59f3434	 ldr         r3, [pc, #0x434]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130902	 tst         r3, #2, 18
  0002c	0a000007	 beq         |$LN47@OEMCacheRa|
  00030	e59d3048	 ldr         r3, [sp, #0x48]
  00034	e59d2044	 ldr         r2, [sp, #0x44]
  00038	e59d1040	 ldr         r1, [sp, #0x40]
  0003c	e59f0424	 ldr         r0, [pc, #0x424]
  00040	eb000000	 bl          NKDbgPrintfW
  00044	e3a03001	 mov         r3, #1
  00048	e58d3020	 str         r3, [sp, #0x20]
  0004c	ea000001	 b           |$LN48@OEMCacheRa|
  00050		 |$LN47@OEMCacheRa|
  00050	e3a03000	 mov         r3, #0
  00054	e58d3020	 str         r3, [sp, #0x20]
  00058		 |$LN48@OEMCacheRa|

; 84   : 
; 85   : 
; 86   :     //bEnabled = INTERRUPTS_ENABLE(FALSE);
; 87   : 
; 88   :     if ((flags & CACHE_SYNC_DISCARD) != 0) {

  00058	e59d3048	 ldr         r3, [sp, #0x48]
  0005c	e3130001	 tst         r3, #1
  00060	0a000021	 beq         |$LN44@OEMCacheRa|

; 89   :         // Write back and invalidate the selected portions of the data cache
; 90   :         if (length == 0 || pAddress == NULL) {

  00064	e59d3044	 ldr         r3, [sp, #0x44]
  00068	e3530000	 cmp         r3, #0
  0006c	0a000002	 beq         |$LN42@OEMCacheRa|
  00070	e59d3040	 ldr         r3, [sp, #0x40]
  00074	e3530000	 cmp         r3, #0
  00078	1a000001	 bne         |$LN43@OEMCacheRa|
  0007c		 |$LN42@OEMCacheRa|

; 91   :             OALFlushDCache();

  0007c	eb000000	 bl          OALFlushDCache

; 92   :         } else {

  00080	ea000018	 b           |$LN41@OEMCacheRa|
  00084		 |$LN43@OEMCacheRa|

; 93   :             // Normalize address to cache line alignment
; 94   :             UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  00084	e59f33d8	 ldr         r3, [pc, #0x3D8]
  00088	e593301c	 ldr         r3, [r3, #0x1C]
  0008c	e2433001	 sub         r3, r3, #1
  00090	e58d3000	 str         r3, [sp]

; 95   :             UINT32 address = (UINT32)pAddress & ~mask;

  00094	e59d3000	 ldr         r3, [sp]
  00098	e1e02003	 mvn         r2, r3
  0009c	e59d3040	 ldr         r3, [sp, #0x40]
  000a0	e0033002	 and         r3, r3, r2
  000a4	e58d3004	 str         r3, [sp, #4]

; 96   :             // Adjust size to reflect cache line alignment
; 97   :             length += (UINT32)pAddress - address;

  000a8	e59d2040	 ldr         r2, [sp, #0x40]
  000ac	e59d3004	 ldr         r3, [sp, #4]
  000b0	e0422003	 sub         r2, r2, r3
  000b4	e59d3044	 ldr         r3, [sp, #0x44]
  000b8	e0833002	 add         r3, r3, r2
  000bc	e58d3044	 str         r3, [sp, #0x44]

; 98   :            // If range is bigger than cache range limit, flush all
; 99   :             if (length >= g_dwRangeLimit) {

  000c0	e59d2044	 ldr         r2, [sp, #0x44]
  000c4	e59f3394	 ldr         r3, [pc, #0x394]
  000c8	e5933000	 ldr         r3, [r3]
  000cc	e1520003	 cmp         r2, r3
  000d0	3a000001	 bcc         |$LN40@OEMCacheRa|

; 100  :                 OALFlushDCache();

  000d4	eb000000	 bl          OALFlushDCache

; 101  :             } else {                

  000d8	ea000002	 b           |$LN39@OEMCacheRa|
  000dc		 |$LN40@OEMCacheRa|

; 102  :                 // Flush all the indicated cache entries
; 103  :                 OALFlushDCacheLines((VOID*)address, length);

  000dc	e59d1044	 ldr         r1, [sp, #0x44]
  000e0	e59d0004	 ldr         r0, [sp, #4]
  000e4	eb000000	 bl          OALFlushDCacheLines
  000e8		 |$LN39@OEMCacheRa|
  000e8		 |$LN41@OEMCacheRa|

; 104  :             }                
; 105  :         }

  000e8	ea000050	 b           |$LN38@OEMCacheRa|
  000ec		 |$LN44@OEMCacheRa|

; 106  :     } else if ((flags & CACHE_SYNC_WRITEBACK) != 0) {

  000ec	e59d3048	 ldr         r3, [sp, #0x48]
  000f0	e3130004	 tst         r3, #4
  000f4	0a000021	 beq         |$LN37@OEMCacheRa|

; 107  :         // Write back the selected portion of the data cache
; 108  :         if (length == 0 || pAddress == NULL) {

  000f8	e59d3044	 ldr         r3, [sp, #0x44]
  000fc	e3530000	 cmp         r3, #0
  00100	0a000002	 beq         |$LN35@OEMCacheRa|
  00104	e59d3040	 ldr         r3, [sp, #0x40]
  00108	e3530000	 cmp         r3, #0
  0010c	1a000001	 bne         |$LN36@OEMCacheRa|
  00110		 |$LN35@OEMCacheRa|

; 109  :             // OALCleanDCache();
; 110  :             OALFlushDCache();

  00110	eb000000	 bl          OALFlushDCache

; 111  :         } else {

  00114	ea000018	 b           |$LN34@OEMCacheRa|
  00118		 |$LN36@OEMCacheRa|

; 112  :             // Normalize address to cache line alignment
; 113  :             UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  00118	e59f3344	 ldr         r3, [pc, #0x344]
  0011c	e593301c	 ldr         r3, [r3, #0x1C]
  00120	e2433001	 sub         r3, r3, #1
  00124	e58d3008	 str         r3, [sp, #8]

; 114  :             UINT32 address = (UINT32)pAddress & ~mask;

  00128	e59d3008	 ldr         r3, [sp, #8]
  0012c	e1e02003	 mvn         r2, r3
  00130	e59d3040	 ldr         r3, [sp, #0x40]
  00134	e0033002	 and         r3, r3, r2
  00138	e58d300c	 str         r3, [sp, #0xC]

; 115  :             // Adjust size to reflect cache line alignment
; 116  :             length += (UINT32)pAddress - address;

  0013c	e59d2040	 ldr         r2, [sp, #0x40]
  00140	e59d300c	 ldr         r3, [sp, #0xC]
  00144	e0422003	 sub         r2, r2, r3
  00148	e59d3044	 ldr         r3, [sp, #0x44]
  0014c	e0833002	 add         r3, r3, r2
  00150	e58d3044	 str         r3, [sp, #0x44]

; 117  :             // If range is bigger than cache range limit, clean all
; 118  :             if (length >= g_dwRangeLimit) {

  00154	e59d2044	 ldr         r2, [sp, #0x44]
  00158	e59f3300	 ldr         r3, [pc, #0x300]
  0015c	e5933000	 ldr         r3, [r3]
  00160	e1520003	 cmp         r2, r3
  00164	3a000001	 bcc         |$LN33@OEMCacheRa|

; 119  :                 // OALCleanDCache();
; 120  :                 OALFlushDCache();

  00168	eb000000	 bl          OALFlushDCache

; 121  :             } else {                

  0016c	ea000002	 b           |$LN32@OEMCacheRa|
  00170		 |$LN33@OEMCacheRa|

; 122  :                 // Flush all the indicated cache entries
; 123  :                 OALCleanDCacheLines((VOID*)address, length);

  00170	e59d1044	 ldr         r1, [sp, #0x44]
  00174	e59d000c	 ldr         r0, [sp, #0xC]
  00178	eb000000	 bl          OALCleanDCacheLines
  0017c		 |$LN32@OEMCacheRa|
  0017c		 |$LN34@OEMCacheRa|

; 124  :             }                
; 125  :         }

  0017c	ea00002b	 b           |$LN31@OEMCacheRa|
  00180		 |$LN37@OEMCacheRa|

; 126  :     } else if ((flags & TI_CACHE_SYNC_INVALIDATE) != 0) {

  00180	e59d3048	 ldr         r3, [sp, #0x48]
  00184	e3130102	 tst         r3, #2, 2
  00188	0a000028	 beq         |$LN30@OEMCacheRa|

; 127  :         // Invalidate the selected portion of the data cache
; 128  :         // Invalidate all data cache corrupts the execution 
; 129  :         // of the operating system.  Only process with given 
; 130  :         // buffers that are cache line aligned will be invalidated
; 131  :         // all others will be clean & invalidated
; 132  :         if ((length != 0) && (pAddress != NULL)) 

  0018c	e59d3044	 ldr         r3, [sp, #0x44]
  00190	e3530000	 cmp         r3, #0
  00194	0a000025	 beq         |$LN29@OEMCacheRa|
  00198	e59d3040	 ldr         r3, [sp, #0x40]
  0019c	e3530000	 cmp         r3, #0
  001a0	0a000022	 beq         |$LN29@OEMCacheRa|

; 133  :         {
; 134  :             // Check for page alignment
; 135  :             if( ((DWORD)(pAddress) % g_oalCacheInfo.L1DLineSize) == 0 )

  001a4	e59d1040	 ldr         r1, [sp, #0x40]
  001a8	e59f32b4	 ldr         r3, [pc, #0x2B4]
  001ac	e593001c	 ldr         r0, [r3, #0x1C]
  001b0	eb000000	 bl          __rt_udiv
  001b4	e3510000	 cmp         r1, #0
  001b8	1a000003	 bne         |$LN28@OEMCacheRa|

; 136  :             {
; 137  :                 // Invalidate the indicated cache entries
; 138  :                 OALInvalidateDCacheLines(pAddress, length);

  001bc	e59d1044	 ldr         r1, [sp, #0x44]
  001c0	e59d0040	 ldr         r0, [sp, #0x40]
  001c4	eb000000	 bl          OALInvalidateDCacheLines

; 139  :             }
; 140  :             else

  001c8	ea000018	 b           |$LN27@OEMCacheRa|
  001cc		 |$LN28@OEMCacheRa|

; 141  :             {
; 142  :                 // Normalize address to cache line alignment
; 143  :                 UINT32 mask = g_oalCacheInfo.L1DLineSize - 1;

  001cc	e59f3290	 ldr         r3, [pc, #0x290]
  001d0	e593301c	 ldr         r3, [r3, #0x1C]
  001d4	e2433001	 sub         r3, r3, #1
  001d8	e58d3010	 str         r3, [sp, #0x10]

; 144  :                 UINT32 address = (UINT32)pAddress & ~mask;

  001dc	e59d3010	 ldr         r3, [sp, #0x10]
  001e0	e1e02003	 mvn         r2, r3
  001e4	e59d3040	 ldr         r3, [sp, #0x40]
  001e8	e0033002	 and         r3, r3, r2
  001ec	e58d3014	 str         r3, [sp, #0x14]

; 145  :                 // Adjust size to reflect cache line alignment
; 146  :                 length += (UINT32)pAddress - address;

  001f0	e59d2040	 ldr         r2, [sp, #0x40]
  001f4	e59d3014	 ldr         r3, [sp, #0x14]
  001f8	e0422003	 sub         r2, r2, r3
  001fc	e59d3044	 ldr         r3, [sp, #0x44]
  00200	e0833002	 add         r3, r3, r2
  00204	e58d3044	 str         r3, [sp, #0x44]

; 147  :                 // If range is bigger than cache range limit, flush all
; 148  :                 if (length >= g_dwRangeLimit) {

  00208	e59d2044	 ldr         r2, [sp, #0x44]
  0020c	e59f324c	 ldr         r3, [pc, #0x24C]
  00210	e5933000	 ldr         r3, [r3]
  00214	e1520003	 cmp         r2, r3
  00218	3a000001	 bcc         |$LN26@OEMCacheRa|

; 149  :                     OALFlushDCache();

  0021c	eb000000	 bl          OALFlushDCache

; 150  :                 } else {                

  00220	ea000002	 b           |$LN25@OEMCacheRa|
  00224		 |$LN26@OEMCacheRa|

; 151  :                     // Flush all the indicated cache entries
; 152  :                     OALFlushDCacheLines((VOID*)address, length);

  00224	e59d1044	 ldr         r1, [sp, #0x44]
  00228	e59d0014	 ldr         r0, [sp, #0x14]
  0022c	eb000000	 bl          OALFlushDCacheLines
  00230		 |$LN25@OEMCacheRa|
  00230		 |$LN27@OEMCacheRa|
  00230		 |$LN29@OEMCacheRa|
  00230		 |$LN30@OEMCacheRa|
  00230		 |$LN31@OEMCacheRa|
  00230		 |$LN38@OEMCacheRa|

; 153  :                 }                
; 154  :             }
; 155  :         }                   
; 156  :     }
; 157  : 
; 158  : 
; 159  :     if ((flags & CACHE_SYNC_INSTRUCTIONS) != 0) {

  00230	e59d3048	 ldr         r3, [sp, #0x48]
  00234	e3130002	 tst         r3, #2
  00238	0a000020	 beq         |$LN24@OEMCacheRa|

; 160  :         // WInvalidate the selected portions of the instruction cache
; 161  :         if (length == 0 || pAddress == NULL) {

  0023c	e59d3044	 ldr         r3, [sp, #0x44]
  00240	e3530000	 cmp         r3, #0
  00244	0a000002	 beq         |$LN22@OEMCacheRa|
  00248	e59d3040	 ldr         r3, [sp, #0x40]
  0024c	e3530000	 cmp         r3, #0
  00250	1a000001	 bne         |$LN23@OEMCacheRa|
  00254		 |$LN22@OEMCacheRa|

; 162  :             OALFlushICache();

  00254	eb000000	 bl          OALFlushICache

; 163  :         } else {

  00258	ea000018	 b           |$LN21@OEMCacheRa|
  0025c		 |$LN23@OEMCacheRa|

; 164  :             // Normalize address to cache line alignment
; 165  :             UINT32 mask = g_oalCacheInfo.L1ILineSize - 1;

  0025c	e59f3200	 ldr         r3, [pc, #0x200]
  00260	e593300c	 ldr         r3, [r3, #0xC]
  00264	e2433001	 sub         r3, r3, #1
  00268	e58d3018	 str         r3, [sp, #0x18]

; 166  :             UINT32 address = (UINT32)pAddress & ~mask;

  0026c	e59d3018	 ldr         r3, [sp, #0x18]
  00270	e1e02003	 mvn         r2, r3
  00274	e59d3040	 ldr         r3, [sp, #0x40]
  00278	e0033002	 and         r3, r3, r2
  0027c	e58d301c	 str         r3, [sp, #0x1C]

; 167  :             // Adjust size to reflect cache line alignment
; 168  :             length += (UINT32)pAddress - address;

  00280	e59d2040	 ldr         r2, [sp, #0x40]
  00284	e59d301c	 ldr         r3, [sp, #0x1C]
  00288	e0422003	 sub         r2, r2, r3
  0028c	e59d3044	 ldr         r3, [sp, #0x44]
  00290	e0833002	 add         r3, r3, r2
  00294	e58d3044	 str         r3, [sp, #0x44]

; 169  :            // If range is bigger than cache range limit, flush all
; 170  :             if (length >= g_dwRangeLimit) {

  00298	e59d2044	 ldr         r2, [sp, #0x44]
  0029c	e59f31bc	 ldr         r3, [pc, #0x1BC]
  002a0	e5933000	 ldr         r3, [r3]
  002a4	e1520003	 cmp         r2, r3
  002a8	3a000001	 bcc         |$LN20@OEMCacheRa|

; 171  :                 OALFlushICache();

  002ac	eb000000	 bl          OALFlushICache

; 172  :             } else {                

  002b0	ea000002	 b           |$LN19@OEMCacheRa|
  002b4		 |$LN20@OEMCacheRa|

; 173  :                 // Flush all the indicated cache entries
; 174  :                 OALFlushICacheLines((VOID*)address, length);

  002b4	e59d1044	 ldr         r1, [sp, #0x44]
  002b8	e59d001c	 ldr         r0, [sp, #0x1C]
  002bc	eb000000	 bl          OALFlushICacheLines
  002c0		 |$LN19@OEMCacheRa|
  002c0		 |$LN21@OEMCacheRa|
  002c0		 |$LN24@OEMCacheRa|

; 175  :             }                
; 176  :         }
; 177  :     }
; 178  : 
; 179  : 
; 180  : #if (_WINCEOSVER>=600)
; 181  : 
; 182  :     //
; 183  :     //  TLB flushing for WinCE 6 and WinMobile 7
; 184  :     //
; 185  : 
; 186  :     //
; 187  :     //  Flush instruction TLB
; 188  :     //
; 189  :     if ((flags & CACHE_SYNC_FLUSH_I_TLB) != 0) {

  002c0	e59d3048	 ldr         r3, [sp, #0x48]
  002c4	e3130008	 tst         r3, #8
  002c8	0a000026	 beq         |$LN18@OEMCacheRa|

; 190  :         //  If the address is less than the kernel global space, OR with the ASID prior to clearing the TLB
; 191  :         //  otherwise clear the global TLB entry (no ASID)
; 192  :         if( length == 0 && pAddress == NULL)

  002cc	e59d3044	 ldr         r3, [sp, #0x44]
  002d0	e3530000	 cmp         r3, #0
  002d4	1a000004	 bne         |$LN17@OEMCacheRa|
  002d8	e59d3040	 ldr         r3, [sp, #0x40]
  002dc	e3530000	 cmp         r3, #0
  002e0	1a000001	 bne         |$LN17@OEMCacheRa|

; 193  :         {
; 194  :             // flush the whole TLB
; 195  :             OALClearITLB();

  002e4	eb000000	 bl          OALClearITLB
  002e8	ea00001e	 b           |$LN16@OEMCacheRa|
  002ec		 |$LN17@OEMCacheRa|

; 196  :         }
; 197  :         else if( (DWORD) pAddress < KERNEL_GLOBAL_ADDRESS )

  002ec	e59d3040	 ldr         r3, [sp, #0x40]
  002f0	e3530207	 cmp         r3, #7, 4
  002f4	2a000011	 bcs         |$LN15@OEMCacheRa|

; 198  :         {
; 199  :             if( length == (DWORD) PAGE_SIZE )

  002f8	e3e03b0d	 mvn         r3, #0xD, 22
  002fc	e22330fb	 eor         r3, r3, #0xFB
  00300	e59d2044	 ldr         r2, [sp, #0x44]
  00304	e5933000	 ldr         r3, [r3]
  00308	e1520003	 cmp         r2, r3
  0030c	1a000006	 bne         |$LN14@OEMCacheRa|

; 200  :             {
; 201  :                 // flush process TLB entry (with ASID)
; 202  :                 OALClearITLBEntry((VOID*)((DWORD)pAddress | OALGetContextID()));

  00310	eb000000	 bl          OALGetContextID
  00314	e58d0024	 str         r0, [sp, #0x24]
  00318	e59d2040	 ldr         r2, [sp, #0x40]
  0031c	e59d3024	 ldr         r3, [sp, #0x24]
  00320	e1820003	 orr         r0, r2, r3
  00324	eb000000	 bl          OALClearITLBEntry

; 203  :             }
; 204  :             else

  00328	ea000003	 b           |$LN13@OEMCacheRa|
  0032c		 |$LN14@OEMCacheRa|

; 205  :             {
; 206  :                 // flush the whole TLB for that ASID
; 207  :                 OALClearITLBAsid(OALGetContextID());

  0032c	eb000000	 bl          OALGetContextID
  00330	e58d0028	 str         r0, [sp, #0x28]
  00334	e59d0028	 ldr         r0, [sp, #0x28]
  00338	eb000000	 bl          OALClearITLBAsid
  0033c		 |$LN13@OEMCacheRa|

; 208  :             }
; 209  :         }
; 210  :         else

  0033c	ea000009	 b           |$LN12@OEMCacheRa|
  00340		 |$LN15@OEMCacheRa|

; 211  :         {
; 212  :             if( length == (DWORD) PAGE_SIZE )

  00340	e3e03b0d	 mvn         r3, #0xD, 22
  00344	e22330fb	 eor         r3, r3, #0xFB
  00348	e59d2044	 ldr         r2, [sp, #0x44]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e1520003	 cmp         r2, r3
  00354	1a000002	 bne         |$LN11@OEMCacheRa|

; 213  :             {
; 214  :                 // flush global TLB entry (no ASID)
; 215  :                 OALClearITLBEntry(pAddress);

  00358	e59d0040	 ldr         r0, [sp, #0x40]
  0035c	eb000000	 bl          OALClearITLBEntry

; 216  :             }
; 217  :             else

  00360	ea000000	 b           |$LN10@OEMCacheRa|
  00364		 |$LN11@OEMCacheRa|

; 218  :             {
; 219  :                 // flush the whole TLB
; 220  :                 OALClearITLB();

  00364	eb000000	 bl          OALClearITLB
  00368		 |$LN10@OEMCacheRa|
  00368		 |$LN12@OEMCacheRa|
  00368		 |$LN16@OEMCacheRa|
  00368		 |$LN18@OEMCacheRa|

; 221  :             }
; 222  :         }
; 223  :     }
; 224  : 
; 225  :     //
; 226  :     //  Flush data TLB
; 227  :     //
; 228  :     if ((flags & CACHE_SYNC_FLUSH_D_TLB) != 0) {

  00368	e59d3048	 ldr         r3, [sp, #0x48]
  0036c	e3130010	 tst         r3, #0x10
  00370	0a000026	 beq         |$LN9@OEMCacheRa|

; 229  :         //  If the address is less than the kernel global space, OR with the ASID prior to clearing the TLB
; 230  :         //  otherwise clear the global TLB entry (no ASID)
; 231  :         if( length == 0 && pAddress == NULL)

  00374	e59d3044	 ldr         r3, [sp, #0x44]
  00378	e3530000	 cmp         r3, #0
  0037c	1a000004	 bne         |$LN8@OEMCacheRa|
  00380	e59d3040	 ldr         r3, [sp, #0x40]
  00384	e3530000	 cmp         r3, #0
  00388	1a000001	 bne         |$LN8@OEMCacheRa|

; 232  :         {
; 233  :             // flush the whole TLB
; 234  :             OALClearDTLB();

  0038c	eb000000	 bl          OALClearDTLB
  00390	ea00001e	 b           |$LN7@OEMCacheRa|
  00394		 |$LN8@OEMCacheRa|

; 235  :         }
; 236  :         else if( (DWORD) pAddress < KERNEL_GLOBAL_ADDRESS )

  00394	e59d3040	 ldr         r3, [sp, #0x40]
  00398	e3530207	 cmp         r3, #7, 4
  0039c	2a000011	 bcs         |$LN6@OEMCacheRa|

; 237  :         {
; 238  :             if( length == (DWORD) PAGE_SIZE )

  003a0	e3e03b0d	 mvn         r3, #0xD, 22
  003a4	e22330fb	 eor         r3, r3, #0xFB
  003a8	e59d2044	 ldr         r2, [sp, #0x44]
  003ac	e5933000	 ldr         r3, [r3]
  003b0	e1520003	 cmp         r2, r3
  003b4	1a000006	 bne         |$LN5@OEMCacheRa|

; 239  :             {
; 240  :                 // flush process TLB entry (with ASID)
; 241  :                 OALClearDTLBEntry((VOID*)((DWORD)pAddress | OALGetContextID()));

  003b8	eb000000	 bl          OALGetContextID
  003bc	e58d002c	 str         r0, [sp, #0x2C]
  003c0	e59d2040	 ldr         r2, [sp, #0x40]
  003c4	e59d302c	 ldr         r3, [sp, #0x2C]
  003c8	e1820003	 orr         r0, r2, r3
  003cc	eb000000	 bl          OALClearDTLBEntry

; 242  :             }
; 243  :             else

  003d0	ea000003	 b           |$LN4@OEMCacheRa|
  003d4		 |$LN5@OEMCacheRa|

; 244  :             {
; 245  :                 // flush the whole TLB for that ASID
; 246  :                 OALClearDTLBAsid(OALGetContextID());

  003d4	eb000000	 bl          OALGetContextID
  003d8	e58d0030	 str         r0, [sp, #0x30]
  003dc	e59d0030	 ldr         r0, [sp, #0x30]
  003e0	eb000000	 bl          OALClearDTLBAsid
  003e4		 |$LN4@OEMCacheRa|

; 247  :             }
; 248  :         }
; 249  :         else

  003e4	ea000009	 b           |$LN3@OEMCacheRa|
  003e8		 |$LN6@OEMCacheRa|

; 250  :         {
; 251  :             if( length == (DWORD) PAGE_SIZE )

  003e8	e3e03b0d	 mvn         r3, #0xD, 22
  003ec	e22330fb	 eor         r3, r3, #0xFB
  003f0	e59d2044	 ldr         r2, [sp, #0x44]
  003f4	e5933000	 ldr         r3, [r3]
  003f8	e1520003	 cmp         r2, r3
  003fc	1a000002	 bne         |$LN2@OEMCacheRa|

; 252  :             {
; 253  :                 // flush global TLB entry (no ASID)
; 254  :                 OALClearDTLBEntry(pAddress);

  00400	e59d0040	 ldr         r0, [sp, #0x40]
  00404	eb000000	 bl          OALClearDTLBEntry

; 255  :             }
; 256  :             else

  00408	ea000000	 b           |$LN1@OEMCacheRa|
  0040c		 |$LN2@OEMCacheRa|

; 257  :             {
; 258  :                 // flush the whole TLB
; 259  :                 OALClearDTLB();

  0040c	eb000000	 bl          OALClearDTLB
  00410		 |$LN1@OEMCacheRa|
  00410		 |$LN3@OEMCacheRa|
  00410		 |$LN7@OEMCacheRa|
  00410		 |$LN9@OEMCacheRa|

; 260  :             }
; 261  :         }
; 262  :     }
; 263  :     
; 264  : #else
; 265  : 
; 266  :     //
; 267  :     //  TLB flushing for WinMobile 6.x
; 268  :     //
; 269  : 
; 270  :     //  Flush for a demand page
; 271  : //    if ((length == PAGE_SIZE) && (flags & CACHE_SYNC_WRITEBACK)) {
; 272  : //        //    OALMSG(1, (L"PAGE flush pAddr = %8.8lx  zAddr = %8.8lx\r\n", pAddress, ZeroPtr(pAddress)));
; 273  : //        OALClearTLB();
; 274  : //    }
; 275  : 
; 276  :     //
; 277  :     //  Flush TLB
; 278  :     //
; 279  :     if ((flags & CACHE_SYNC_FLUSH_TLB) != 0) {
; 280  :         if (length == PAGE_SIZE) {
; 281  :             // flush one TLB entry
; 282  :             OALClearTLBEntry(pAddress);
; 283  :         } else {
; 284  :             // flush the whole TLB
; 285  :             OALClearTLB();
; 286  :         }
; 287  :     }
; 288  : 
; 289  : #endif 
; 290  : 
; 291  :     //INTERRUPTS_ENABLE(bEnabled);
; 292  : 
; 293  :     OALMSG(OAL_CACHE&&OAL_VERBOSE, (L"-OEMCacheRangeFlush\r\n"));

  00410	e59f3044	 ldr         r3, [pc, #0x44]
  00414	e5933440	 ldr         r3, [r3, #0x440]
  00418	e3130020	 tst         r3, #0x20
  0041c	0a000008	 beq         |$LN49@OEMCacheRa|
  00420	e59f3034	 ldr         r3, [pc, #0x34]
  00424	e5933440	 ldr         r3, [r3, #0x440]
  00428	e3130902	 tst         r3, #2, 18
  0042c	0a000004	 beq         |$LN49@OEMCacheRa|
  00430	e59f0020	 ldr         r0, [pc, #0x20]
  00434	eb000000	 bl          NKDbgPrintfW
  00438	e3a03001	 mov         r3, #1
  0043c	e58d3034	 str         r3, [sp, #0x34]
  00440	ea000001	 b           |$LN50@OEMCacheRa|
  00444		 |$LN49@OEMCacheRa|
  00444	e3a03000	 mov         r3, #0
  00448	e58d3034	 str         r3, [sp, #0x34]
  0044c		 |$LN50@OEMCacheRa|

; 294  : }

  0044c	e28dd038	 add         sp, sp, #0x38
  00450	e89d6000	 ldmia       sp, {sp, lr}
  00454	e12fff1e	 bx          lr
  00458		 |$LN54@OEMCacheRa|
  00458		 |$LN55@OEMCacheRa|
  00458	00000000	 DCD         |??_C@_1CM@BMDDLKDO@?$AA?9?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$AN?$AA?6?$AA?$AA@|
  0045c		 |$LN56@OEMCacheRa|
  0045c	00000000	 DCD         |dpCurSettings|
  00460		 |$LN57@OEMCacheRa|
  00460	00000000	 DCD         |g_dwRangeLimit|
  00464		 |$LN58@OEMCacheRa|
  00464	00000000	 DCD         |g_oalCacheInfo|
  00468		 |$LN59@OEMCacheRa|
  00468	00000000	 DCD         |??_C@_1FE@FFFKHHBK@?$AA?$CL?$AAO?$AAE?$AAM?$AAC?$AAa?$AAc?$AAh?$AAe?$AAR?$AAa?$AAn?$AAg?$AAe?$AAF?$AAl?$AAu?$AAs?$AAh?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?0?$AA?5@|
  0046c		 |$M44147|

			 ENDP  ; |OEMCacheRangeFlush|

	END
