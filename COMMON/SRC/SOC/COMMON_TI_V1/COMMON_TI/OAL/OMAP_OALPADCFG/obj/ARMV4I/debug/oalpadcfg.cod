; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_OALPADCFG\oalpadcfg.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|_PostInit| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALPadCfgInit|
	IMPORT	|BSPGetAllPadsInfo|

  00004			 AREA	 |.bss|, NOINIT
|g_NbPads| %	0x4
|g_bspPadInfo| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T44619| DCD	|$LN7@OALPadCfgI|
	DCD	0x40001e02
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_oalpadcfg\oalpadcfg.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPadCfgInit| PROC

; 31   : {

  00000		 |$LN7@OALPadCfgI|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd00c	 sub         sp, sp, #0xC
  00008		 |$M44616|

; 32   :     g_bspPadInfo = BSPGetAllPadsInfo();

  00008	eb000000	 bl          BSPGetAllPadsInfo
  0000c	e58d0004	 str         r0, [sp, #4]
  00010	e59d2004	 ldr         r2, [sp, #4]
  00014	e59f3054	 ldr         r3, [pc, #0x54]
  00018	e5832000	 str         r2, [r3]

; 33   :     g_NbPads = SortPadInfoArray(g_bspPadInfo); //sort the array to have better lookup performances

  0001c	e59f304c	 ldr         r3, [pc, #0x4C]
  00020	e5930000	 ldr         r0, [r3]
  00024	eb000000	 bl          SortPadInfoArray
  00028	e58d0008	 str         r0, [sp, #8]
  0002c	e59d2008	 ldr         r2, [sp, #8]
  00030	e59f303c	 ldr         r3, [pc, #0x3C]
  00034	e5832000	 str         r2, [r3]

; 34   :     if (g_bspPadInfo)

  00038	e59f3030	 ldr         r3, [pc, #0x30]
  0003c	e5933000	 ldr         r3, [r3]
  00040	e3530000	 cmp         r3, #0
  00044	0a000003	 beq         |$LN2@OALPadCfgI|

; 35   :     {
; 36   : 
; 37   :         return TRUE;

  00048	e3a03001	 mov         r3, #1
  0004c	e58d3000	 str         r3, [sp]
  00050	ea000002	 b           |$LN3@OALPadCfgI|

; 38   :     }
; 39   :     else

  00054	ea000001	 b           |$LN1@OALPadCfgI|
  00058		 |$LN2@OALPadCfgI|

; 40   :     {
; 41   :         return FALSE;

  00058	e3a03000	 mov         r3, #0
  0005c	e58d3000	 str         r3, [sp]
  00060		 |$LN1@OALPadCfgI|
  00060		 |$LN3@OALPadCfgI|

; 42   :     }
; 43   : }

  00060	e59d0000	 ldr         r0, [sp]
  00064	e28dd00c	 add         sp, sp, #0xC
  00068	e49de004	 ldr         lr, [sp], #4
  0006c	e12fff1e	 bx          lr
  00070		 |$LN8@OALPadCfgI|
  00070		 |$LN9@OALPadCfgI|
  00070	00000000	 DCD         |g_bspPadInfo|
  00074		 |$LN10@OALPadCfgI|
  00074	00000000	 DCD         |g_NbPads|
  00078		 |$M44617|

			 ENDP  ; |OALPadCfgInit|

	EXPORT	|OALPadCfgPostInit|
	IMPORT	|InitializeCriticalSection|

  0000c			 AREA	 |.bss|, NOINIT
|_cs|	%	0x14

  00008			 AREA	 |.pdata|, PDATA
|$T44628| DCD	|$LN5@OALPadCfgP|
	DCD	0x40000f02
; Function compile flags: /Odtp

  00078			 AREA	 |.text|, CODE, ARM

  00078		 |OALPadCfgPostInit| PROC

; 46   : {

  00078		 |$LN5@OALPadCfgP|
  00078	e52de004	 str         lr, [sp, #-4]!
  0007c	e24dd004	 sub         sp, sp, #4
  00080		 |$M44625|

; 47   :     InitializeCriticalSection(&_cs);

  00080	e59f0028	 ldr         r0, [pc, #0x28]
  00084	eb000000	 bl          InitializeCriticalSection

; 48   : 
; 49   : 	_PostInit = TRUE;

  00088	e59f201c	 ldr         r2, [pc, #0x1C]
  0008c	e3a03001	 mov         r3, #1
  00090	e5823000	 str         r3, [r2]

; 50   : 
; 51   :     return TRUE;

  00094	e3a03001	 mov         r3, #1
  00098	e58d3000	 str         r3, [sp]

; 52   : }

  0009c	e59d0000	 ldr         r0, [sp]
  000a0	e28dd004	 add         sp, sp, #4
  000a4	e49de004	 ldr         lr, [sp], #4
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN6@OALPadCfgP|
  000ac		 |$LN7@OALPadCfgP|
  000ac	00000000	 DCD         |_PostInit|
  000b0		 |$LN8@OALPadCfgP|
  000b0	00000000	 DCD         |_cs|
  000b4		 |$M44626|

			 ENDP  ; |OALPadCfgPostInit|

	EXPORT	|RequestPad|

  00010			 AREA	 |.pdata|, PDATA
|$T44637| DCD	|$LN8@RequestPad|
	DCD	0x40003d04
; Function compile flags: /Odtp

  000b4			 AREA	 |.text|, CODE, ARM

  000b4		 |RequestPad| PROC

; 69   : {    

  000b4		 |$LN8@RequestPad|
  000b4	e1a0c00d	 mov         r12, sp
  000b8	e92d0001	 stmdb       sp!, {r0}
  000bc	e92d5000	 stmdb       sp!, {r12, lr}
  000c0	e24dd010	 sub         sp, sp, #0x10
  000c4		 |$M44634|

; 70   :     BOOL rc = FALSE;

  000c4	e3a03000	 mov         r3, #0
  000c8	e58d3000	 str         r3, [sp]

; 71   :     int padIndex;
; 72   :     padIndex = FindPad(padid);

  000cc	e1dd01b8	 ldrh        r0, [sp, #0x18]
  000d0	eb000000	 bl          FindPad
  000d4	e58d000c	 str         r0, [sp, #0xC]
  000d8	e59d300c	 ldr         r3, [sp, #0xC]
  000dc	e58d3004	 str         r3, [sp, #4]

; 73   :     if (padIndex == -1) 

  000e0	e59d3004	 ldr         r3, [sp, #4]
  000e4	e3730001	 cmn         r3, #1
  000e8	1a000002	 bne         |$LN3@RequestPad|

; 74   :     {
; 75   :         return FALSE;

  000ec	e3a03000	 mov         r3, #0
  000f0	e58d3008	 str         r3, [sp, #8]
  000f4	ea000025	 b           |$LN4@RequestPad|
  000f8		 |$LN3@RequestPad|

; 76   :     }
; 77   :     
; 78   :     if (padIndex < g_NbPads)

  000f8	e59d2004	 ldr         r2, [sp, #4]
  000fc	e59f30a0	 ldr         r3, [pc, #0xA0]
  00100	e5933000	 ldr         r3, [r3]
  00104	e1520003	 cmp         r2, r3
  00108	aa00001e	 bge         |$LN2@RequestPad|

; 79   :     {
; 80   :         PadCfgLock();

  0010c	eb000000	 bl          PadCfgLock

; 81   :         if (!g_bspPadInfo[padIndex].inUse)

  00110	e59d1004	 ldr         r1, [sp, #4]
  00114	e3a03008	 mov         r3, #8
  00118	e0020391	 mul         r2, r1, r3
  0011c	e59f307c	 ldr         r3, [pc, #0x7C]
  00120	e5933000	 ldr         r3, [r3]
  00124	e0833002	 add         r3, r3, r2
  00128	e2833004	 add         r3, r3, #4
  0012c	e5933000	 ldr         r3, [r3]
  00130	e3130902	 tst         r3, #2, 18
  00134	1a000012	 bne         |$LN1@RequestPad|

; 82   :         {
; 83   :             g_bspPadInfo[padIndex].inUse = 1;

  00138	e59d1004	 ldr         r1, [sp, #4]
  0013c	e3a03008	 mov         r3, #8
  00140	e0020391	 mul         r2, r1, r3
  00144	e59f3054	 ldr         r3, [pc, #0x54]
  00148	e5933000	 ldr         r3, [r3]
  0014c	e0833002	 add         r3, r3, r2
  00150	e2833004	 add         r3, r3, #4
  00154	e5933000	 ldr         r3, [r3]
  00158	e3830902	 orr         r0, r3, #2, 18
  0015c	e59d1004	 ldr         r1, [sp, #4]
  00160	e3a03008	 mov         r3, #8
  00164	e0020391	 mul         r2, r1, r3
  00168	e59f3030	 ldr         r3, [pc, #0x30]
  0016c	e5933000	 ldr         r3, [r3]
  00170	e0833002	 add         r3, r3, r2
  00174	e2833004	 add         r3, r3, #4
  00178	e5830000	 str         r0, [r3]

; 84   :             rc = TRUE;

  0017c	e3a03001	 mov         r3, #1
  00180	e58d3000	 str         r3, [sp]
  00184		 |$LN1@RequestPad|

; 85   :         }
; 86   :         PadCfgUnlock();

  00184	eb000000	 bl          PadCfgUnlock
  00188		 |$LN2@RequestPad|

; 87   :     }
; 88   :     return rc;

  00188	e59d3000	 ldr         r3, [sp]
  0018c	e58d3008	 str         r3, [sp, #8]
  00190		 |$LN4@RequestPad|

; 89   : }

  00190	e59d0008	 ldr         r0, [sp, #8]
  00194	e28dd010	 add         sp, sp, #0x10
  00198	e89d6000	 ldmia       sp, {sp, lr}
  0019c	e12fff1e	 bx          lr
  001a0		 |$LN9@RequestPad|
  001a0		 |$LN10@RequestPad|
  001a0	00000000	 DCD         |g_bspPadInfo|
  001a4		 |$LN11@RequestPad|
  001a4	00000000	 DCD         |g_NbPads|
  001a8		 |$M44635|

			 ENDP  ; |RequestPad|

	IMPORT	|EnterCriticalSection|

  00018			 AREA	 |.pdata|, PDATA
|$T44645| DCD	|$LN6@PadCfgLock|
	DCD	0x40000b01
; Function compile flags: /Odtp

  001a8			 AREA	 |.text|, CODE, ARM

  001a8		 |PadCfgLock| PROC

; 54   : {

  001a8		 |$LN6@PadCfgLock|
  001a8	e52de004	 str         lr, [sp, #-4]!
  001ac		 |$M44642|

; 55   :     if (_PostInit)

  001ac	e59f301c	 ldr         r3, [pc, #0x1C]
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e3530000	 cmp         r3, #0
  001b8	0a000001	 beq         |$LN1@PadCfgLock|

; 56   :     {
; 57   :         EnterCriticalSection(&_cs);

  001bc	e59f0008	 ldr         r0, [pc, #8]
  001c0	eb000000	 bl          EnterCriticalSection
  001c4		 |$LN1@PadCfgLock|

; 58   :     }
; 59   : }

  001c4	e49de004	 ldr         lr, [sp], #4
  001c8	e12fff1e	 bx          lr
  001cc		 |$LN7@PadCfgLock|
  001cc		 |$LN8@PadCfgLock|
  001cc	00000000	 DCD         |_cs|
  001d0		 |$LN9@PadCfgLock|
  001d0	00000000	 DCD         |_PostInit|
  001d4		 |$M44643|

			 ENDP  ; |PadCfgLock|

	IMPORT	|LeaveCriticalSection|

  00020			 AREA	 |.pdata|, PDATA
|$T44653| DCD	|$LN6@PadCfgUnlo|
	DCD	0x40000b01
; Function compile flags: /Odtp

  001d4			 AREA	 |.text|, CODE, ARM

  001d4		 |PadCfgUnlock| PROC

; 61   : {

  001d4		 |$LN6@PadCfgUnlo|
  001d4	e52de004	 str         lr, [sp, #-4]!
  001d8		 |$M44650|

; 62   :     if (_PostInit)

  001d8	e59f301c	 ldr         r3, [pc, #0x1C]
  001dc	e5933000	 ldr         r3, [r3]
  001e0	e3530000	 cmp         r3, #0
  001e4	0a000001	 beq         |$LN1@PadCfgUnlo|

; 63   :     {
; 64   :         LeaveCriticalSection(&_cs);

  001e8	e59f0008	 ldr         r0, [pc, #8]
  001ec	eb000000	 bl          LeaveCriticalSection
  001f0		 |$LN1@PadCfgUnlo|

; 65   :     }
; 66   : }

  001f0	e49de004	 ldr         lr, [sp], #4
  001f4	e12fff1e	 bx          lr
  001f8		 |$LN7@PadCfgUnlo|
  001f8		 |$LN8@PadCfgUnlo|
  001f8	00000000	 DCD         |_cs|
  001fc		 |$LN9@PadCfgUnlo|
  001fc	00000000	 DCD         |_PostInit|
  00200		 |$M44651|

			 ENDP  ; |PadCfgUnlock|

	EXPORT	|ReleasePad|
	IMPORT	|SOCSetPadConfig|

  00028			 AREA	 |.pdata|, PDATA
|$T44662| DCD	|$LN8@ReleasePad|
	DCD	0x40004d04
; Function compile flags: /Odtp

  00200			 AREA	 |.text|, CODE, ARM

  00200		 |ReleasePad| PROC

; 92   : {

  00200		 |$LN8@ReleasePad|
  00200	e1a0c00d	 mov         r12, sp
  00204	e92d0001	 stmdb       sp!, {r0}
  00208	e92d5000	 stmdb       sp!, {r12, lr}
  0020c	e24dd010	 sub         sp, sp, #0x10
  00210		 |$M44659|

; 93   :     BOOL rc = FALSE;

  00210	e3a03000	 mov         r3, #0
  00214	e58d3000	 str         r3, [sp]

; 94   :     int padIndex;
; 95   :     padIndex = FindPad(padid);

  00218	e1dd01b8	 ldrh        r0, [sp, #0x18]
  0021c	eb000000	 bl          FindPad
  00220	e58d000c	 str         r0, [sp, #0xC]
  00224	e59d300c	 ldr         r3, [sp, #0xC]
  00228	e58d3004	 str         r3, [sp, #4]

; 96   :     if (padIndex == -1) 

  0022c	e59d3004	 ldr         r3, [sp, #4]
  00230	e3730001	 cmn         r3, #1
  00234	1a000002	 bne         |$LN3@ReleasePad|

; 97   :     {
; 98   :         return FALSE;

  00238	e3a03000	 mov         r3, #0
  0023c	e58d3008	 str         r3, [sp, #8]
  00240	ea000035	 b           |$LN4@ReleasePad|
  00244		 |$LN3@ReleasePad|

; 99   :     }
; 100  :     
; 101  :     if (padIndex < g_NbPads)

  00244	e59d2004	 ldr         r2, [sp, #4]
  00248	e59f30e0	 ldr         r3, [pc, #0xE0]
  0024c	e5933000	 ldr         r3, [r3]
  00250	e1520003	 cmp         r2, r3
  00254	aa00002e	 bge         |$LN2@ReleasePad|

; 102  :     {
; 103  :         PadCfgLock();

  00258	eb000000	 bl          PadCfgLock

; 104  :         if (g_bspPadInfo[padIndex].inUse)

  0025c	e59d1004	 ldr         r1, [sp, #4]
  00260	e3a03008	 mov         r3, #8
  00264	e0020391	 mul         r2, r1, r3
  00268	e59f30bc	 ldr         r3, [pc, #0xBC]
  0026c	e5933000	 ldr         r3, [r3]
  00270	e0833002	 add         r3, r3, r2
  00274	e2833004	 add         r3, r3, #4
  00278	e5933000	 ldr         r3, [r3]
  0027c	e3130902	 tst         r3, #2, 18
  00280	0a000022	 beq         |$LN1@ReleasePad|

; 105  :         {
; 106  :             g_bspPadInfo[padIndex].inUse = 0;

  00284	e59d1004	 ldr         r1, [sp, #4]
  00288	e3a03008	 mov         r3, #8
  0028c	e0020391	 mul         r2, r1, r3
  00290	e59f3094	 ldr         r3, [pc, #0x94]
  00294	e5933000	 ldr         r3, [r3]
  00298	e0833002	 add         r3, r3, r2
  0029c	e2833004	 add         r3, r3, #4
  002a0	e5932000	 ldr         r2, [r3]
  002a4	e3e03902	 mvn         r3, #2, 18
  002a8	e0020003	 and         r0, r2, r3
  002ac	e59d1004	 ldr         r1, [sp, #4]
  002b0	e3a03008	 mov         r3, #8
  002b4	e0020391	 mul         r2, r1, r3
  002b8	e59f306c	 ldr         r3, [pc, #0x6C]
  002bc	e5933000	 ldr         r3, [r3]
  002c0	e0833002	 add         r3, r3, r2
  002c4	e2833004	 add         r3, r3, #4
  002c8	e5830000	 str         r0, [r3]

; 107  :             SOCSetPadConfig(padid,(UINT16) g_bspPadInfo[padIndex].Cfg); // configure the PIn with its default unused configuration

  002cc	e59d1004	 ldr         r1, [sp, #4]
  002d0	e3a03008	 mov         r3, #8
  002d4	e0020391	 mul         r2, r1, r3
  002d8	e59f304c	 ldr         r3, [pc, #0x4C]
  002dc	e5933000	 ldr         r3, [r3]
  002e0	e0833002	 add         r3, r3, r2
  002e4	e2833004	 add         r3, r3, #4
  002e8	e5932000	 ldr         r2, [r3]
  002ec	e3a03c7f	 mov         r3, #0x7F, 24
  002f0	e38330ff	 orr         r3, r3, #0xFF
  002f4	e0023003	 and         r3, r2, r3
  002f8	e1a01803	 mov         r1, r3, lsl #16
  002fc	e1a01821	 mov         r1, r1, lsr #16
  00300	e1dd01b8	 ldrh        r0, [sp, #0x18]
  00304	eb000000	 bl          SOCSetPadConfig

; 108  :             rc = TRUE;

  00308	e3a03001	 mov         r3, #1
  0030c	e58d3000	 str         r3, [sp]
  00310		 |$LN1@ReleasePad|

; 109  :         }
; 110  :         PadCfgUnlock();

  00310	eb000000	 bl          PadCfgUnlock
  00314		 |$LN2@ReleasePad|

; 111  :     }
; 112  :     return rc;

  00314	e59d3000	 ldr         r3, [sp]
  00318	e58d3008	 str         r3, [sp, #8]
  0031c		 |$LN4@ReleasePad|

; 113  : }

  0031c	e59d0008	 ldr         r0, [sp, #8]
  00320	e28dd010	 add         sp, sp, #0x10
  00324	e89d6000	 ldmia       sp, {sp, lr}
  00328	e12fff1e	 bx          lr
  0032c		 |$LN9@ReleasePad|
  0032c		 |$LN10@ReleasePad|
  0032c	00000000	 DCD         |g_bspPadInfo|
  00330		 |$LN11@ReleasePad|
  00330	00000000	 DCD         |g_NbPads|
  00334		 |$M44660|

			 ENDP  ; |ReleasePad|

	EXPORT	|ConfigurePad|

  00030			 AREA	 |.pdata|, PDATA
|$T44671| DCD	|$LN8@ConfigureP|
	DCD	0x40003004
; Function compile flags: /Odtp

  00334			 AREA	 |.text|, CODE, ARM

  00334		 |ConfigurePad| PROC

; 116  : {

  00334		 |$LN8@ConfigureP|
  00334	e1a0c00d	 mov         r12, sp
  00338	e92d0003	 stmdb       sp!, {r0, r1}
  0033c	e92d5000	 stmdb       sp!, {r12, lr}
  00340	e24dd014	 sub         sp, sp, #0x14
  00344		 |$M44668|

; 117  :     BOOL rc = FALSE;    

  00344	e3a03000	 mov         r3, #0
  00348	e58d3000	 str         r3, [sp]

; 118  :     int padIndex;
; 119  :     padIndex = FindPad(padId);

  0034c	e1dd01bc	 ldrh        r0, [sp, #0x1C]
  00350	eb000000	 bl          FindPad
  00354	e58d000c	 str         r0, [sp, #0xC]
  00358	e59d300c	 ldr         r3, [sp, #0xC]
  0035c	e58d3004	 str         r3, [sp, #4]

; 120  :     if (padIndex == -1) 

  00360	e59d3004	 ldr         r3, [sp, #4]
  00364	e3730001	 cmn         r3, #1
  00368	1a000002	 bne         |$LN3@ConfigureP|

; 121  :     {
; 122  :         return FALSE;

  0036c	e3a03000	 mov         r3, #0
  00370	e58d3008	 str         r3, [sp, #8]
  00374	ea000018	 b           |$LN4@ConfigureP|
  00378		 |$LN3@ConfigureP|

; 123  :     }
; 124  :     
; 125  :     if (padIndex < g_NbPads)

  00378	e59d2004	 ldr         r2, [sp, #4]
  0037c	e59f306c	 ldr         r3, [pc, #0x6C]
  00380	e5933000	 ldr         r3, [r3]
  00384	e1520003	 cmp         r2, r3
  00388	aa000011	 bge         |$LN2@ConfigureP|

; 126  :     {
; 127  :         PadCfgLock();

  0038c	eb000000	 bl          PadCfgLock

; 128  :         if (g_bspPadInfo[padIndex].inUse)

  00390	e59d1004	 ldr         r1, [sp, #4]
  00394	e3a03008	 mov         r3, #8
  00398	e0020391	 mul         r2, r1, r3
  0039c	e59f3048	 ldr         r3, [pc, #0x48]
  003a0	e5933000	 ldr         r3, [r3]
  003a4	e0833002	 add         r3, r3, r2
  003a8	e2833004	 add         r3, r3, #4
  003ac	e5933000	 ldr         r3, [r3]
  003b0	e3130902	 tst         r3, #2, 18
  003b4	0a000005	 beq         |$LN1@ConfigureP|

; 129  :         {            
; 130  :             rc = SOCSetPadConfig(padId,cfg);            

  003b8	e1dd12b0	 ldrh        r1, [sp, #0x20]
  003bc	e1dd01bc	 ldrh        r0, [sp, #0x1C]
  003c0	eb000000	 bl          SOCSetPadConfig
  003c4	e58d0010	 str         r0, [sp, #0x10]
  003c8	e59d3010	 ldr         r3, [sp, #0x10]
  003cc	e58d3000	 str         r3, [sp]
  003d0		 |$LN1@ConfigureP|

; 131  :         }
; 132  :         PadCfgUnlock();

  003d0	eb000000	 bl          PadCfgUnlock
  003d4		 |$LN2@ConfigureP|

; 133  :     }
; 134  :     return rc;

  003d4	e59d3000	 ldr         r3, [sp]
  003d8	e58d3008	 str         r3, [sp, #8]
  003dc		 |$LN4@ConfigureP|

; 135  : }

  003dc	e59d0008	 ldr         r0, [sp, #8]
  003e0	e28dd014	 add         sp, sp, #0x14
  003e4	e89d6000	 ldmia       sp, {sp, lr}
  003e8	e12fff1e	 bx          lr
  003ec		 |$LN9@ConfigureP|
  003ec		 |$LN10@ConfigureP|
  003ec	00000000	 DCD         |g_bspPadInfo|
  003f0		 |$LN11@ConfigureP|
  003f0	00000000	 DCD         |g_NbPads|
  003f4		 |$M44669|

			 ENDP  ; |ConfigurePad|

	EXPORT	|GetPadConfiguration|
	IMPORT	|SOCGetPadConfig|

  00038			 AREA	 |.pdata|, PDATA
|$T44680| DCD	|$LN9@GetPadConf|
	DCD	0x40003604
; Function compile flags: /Odtp

  003f4			 AREA	 |.text|, CODE, ARM

  003f4		 |GetPadConfiguration| PROC

; 138  : {

  003f4		 |$LN9@GetPadConf|
  003f4	e1a0c00d	 mov         r12, sp
  003f8	e92d0003	 stmdb       sp!, {r0, r1}
  003fc	e92d5000	 stmdb       sp!, {r12, lr}
  00400	e24dd014	 sub         sp, sp, #0x14
  00404		 |$M44677|

; 139  :     BOOL rc = FALSE;    

  00404	e3a03000	 mov         r3, #0
  00408	e58d3000	 str         r3, [sp]

; 140  :     int padIndex;
; 141  :     
; 142  :     if (pCfg == NULL)

  0040c	e59d3020	 ldr         r3, [sp, #0x20]
  00410	e3530000	 cmp         r3, #0
  00414	1a000002	 bne         |$LN4@GetPadConf|

; 143  :     {
; 144  :         return FALSE;

  00418	e3a03000	 mov         r3, #0
  0041c	e58d3008	 str         r3, [sp, #8]
  00420	ea000023	 b           |$LN5@GetPadConf|
  00424		 |$LN4@GetPadConf|

; 145  :     }
; 146  : 
; 147  :     padIndex = FindPad(padId);

  00424	e1dd01bc	 ldrh        r0, [sp, #0x1C]
  00428	eb000000	 bl          FindPad
  0042c	e58d000c	 str         r0, [sp, #0xC]
  00430	e59d300c	 ldr         r3, [sp, #0xC]
  00434	e58d3004	 str         r3, [sp, #4]

; 148  :     if (padIndex == -1) 

  00438	e59d3004	 ldr         r3, [sp, #4]
  0043c	e3730001	 cmn         r3, #1
  00440	1a000002	 bne         |$LN3@GetPadConf|

; 149  :     {
; 150  :         return FALSE;

  00444	e3a03000	 mov         r3, #0
  00448	e58d3008	 str         r3, [sp, #8]
  0044c	ea000018	 b           |$LN5@GetPadConf|
  00450		 |$LN3@GetPadConf|

; 151  :     }
; 152  :     
; 153  :     if (padIndex < g_NbPads)

  00450	e59d2004	 ldr         r2, [sp, #4]
  00454	e59f306c	 ldr         r3, [pc, #0x6C]
  00458	e5933000	 ldr         r3, [r3]
  0045c	e1520003	 cmp         r2, r3
  00460	aa000011	 bge         |$LN2@GetPadConf|

; 154  :     {
; 155  :         PadCfgLock();

  00464	eb000000	 bl          PadCfgLock

; 156  :         if (g_bspPadInfo[padIndex].inUse)

  00468	e59d1004	 ldr         r1, [sp, #4]
  0046c	e3a03008	 mov         r3, #8
  00470	e0020391	 mul         r2, r1, r3
  00474	e59f3048	 ldr         r3, [pc, #0x48]
  00478	e5933000	 ldr         r3, [r3]
  0047c	e0833002	 add         r3, r3, r2
  00480	e2833004	 add         r3, r3, #4
  00484	e5933000	 ldr         r3, [r3]
  00488	e3130902	 tst         r3, #2, 18
  0048c	0a000005	 beq         |$LN1@GetPadConf|

; 157  :         {            
; 158  :             rc = SOCGetPadConfig(padId,pCfg);            

  00490	e59d1020	 ldr         r1, [sp, #0x20]
  00494	e1dd01bc	 ldrh        r0, [sp, #0x1C]
  00498	eb000000	 bl          SOCGetPadConfig
  0049c	e58d0010	 str         r0, [sp, #0x10]
  004a0	e59d3010	 ldr         r3, [sp, #0x10]
  004a4	e58d3000	 str         r3, [sp]
  004a8		 |$LN1@GetPadConf|

; 159  :         }
; 160  :         PadCfgUnlock();

  004a8	eb000000	 bl          PadCfgUnlock
  004ac		 |$LN2@GetPadConf|

; 161  :     }
; 162  :     return rc;

  004ac	e59d3000	 ldr         r3, [sp]
  004b0	e58d3008	 str         r3, [sp, #8]
  004b4		 |$LN5@GetPadConf|

; 163  : }

  004b4	e59d0008	 ldr         r0, [sp, #8]
  004b8	e28dd014	 add         sp, sp, #0x14
  004bc	e89d6000	 ldmia       sp, {sp, lr}
  004c0	e12fff1e	 bx          lr
  004c4		 |$LN10@GetPadConf|
  004c4		 |$LN11@GetPadConf|
  004c4	00000000	 DCD         |g_bspPadInfo|
  004c8		 |$LN12@GetPadConf|
  004c8	00000000	 DCD         |g_NbPads|
  004cc		 |$M44678|

			 ENDP  ; |GetPadConfiguration|

	EXPORT	|RequestAndConfigurePad|

  00040			 AREA	 |.pdata|, PDATA
|$T44689| DCD	|$LN9@RequestAnd|
	DCD	0x40004404
; Function compile flags: /Odtp

  004cc			 AREA	 |.text|, CODE, ARM

  004cc		 |RequestAndConfigurePad| PROC

; 165  : {

  004cc		 |$LN9@RequestAnd|
  004cc	e1a0c00d	 mov         r12, sp
  004d0	e92d0003	 stmdb       sp!, {r0, r1}
  004d4	e92d5000	 stmdb       sp!, {r12, lr}
  004d8	e24dd014	 sub         sp, sp, #0x14
  004dc		 |$M44686|

; 166  :     BOOL rc = FALSE;    

  004dc	e3a03000	 mov         r3, #0
  004e0	e58d3000	 str         r3, [sp]

; 167  :     int padIndex;
; 168  :     padIndex = FindPad(padId);

  004e4	e1dd01bc	 ldrh        r0, [sp, #0x1C]
  004e8	eb000000	 bl          FindPad
  004ec	e58d000c	 str         r0, [sp, #0xC]
  004f0	e59d300c	 ldr         r3, [sp, #0xC]
  004f4	e58d3004	 str         r3, [sp, #4]

; 169  :     if (padIndex == -1) 

  004f8	e59d3004	 ldr         r3, [sp, #4]
  004fc	e3730001	 cmn         r3, #1
  00500	1a000002	 bne         |$LN4@RequestAnd|

; 170  :     {
; 171  :         return FALSE;

  00504	e3a03000	 mov         r3, #0
  00508	e58d3008	 str         r3, [sp, #8]
  0050c	ea00002c	 b           |$LN5@RequestAnd|
  00510		 |$LN4@RequestAnd|

; 172  :     }
; 173  :     
; 174  :     if (padIndex < g_NbPads)

  00510	e59d2004	 ldr         r2, [sp, #4]
  00514	e59f30bc	 ldr         r3, [pc, #0xBC]
  00518	e5933000	 ldr         r3, [r3]
  0051c	e1520003	 cmp         r2, r3
  00520	aa000025	 bge         |$LN3@RequestAnd|

; 175  :     {
; 176  :         PadCfgLock();

  00524	eb000000	 bl          PadCfgLock

; 177  :         if (!g_bspPadInfo[padIndex].inUse)

  00528	e59d1004	 ldr         r1, [sp, #4]
  0052c	e3a03008	 mov         r3, #8
  00530	e0020391	 mul         r2, r1, r3
  00534	e59f3098	 ldr         r3, [pc, #0x98]
  00538	e5933000	 ldr         r3, [r3]
  0053c	e0833002	 add         r3, r3, r2
  00540	e2833004	 add         r3, r3, #4
  00544	e5933000	 ldr         r3, [r3]
  00548	e3130902	 tst         r3, #2, 18
  0054c	1a000019	 bne         |$LN2@RequestAnd|

; 178  :         {                
; 179  :             rc = SOCSetPadConfig(padId,cfg);            

  00550	e1dd12b0	 ldrh        r1, [sp, #0x20]
  00554	e1dd01bc	 ldrh        r0, [sp, #0x1C]
  00558	eb000000	 bl          SOCSetPadConfig
  0055c	e58d0010	 str         r0, [sp, #0x10]
  00560	e59d3010	 ldr         r3, [sp, #0x10]
  00564	e58d3000	 str         r3, [sp]

; 180  :             if (rc) 

  00568	e59d3000	 ldr         r3, [sp]
  0056c	e3530000	 cmp         r3, #0
  00570	0a000010	 beq         |$LN1@RequestAnd|

; 181  :             {
; 182  :                 g_bspPadInfo[padIndex].inUse = 1;

  00574	e59d1004	 ldr         r1, [sp, #4]
  00578	e3a03008	 mov         r3, #8
  0057c	e0020391	 mul         r2, r1, r3
  00580	e59f304c	 ldr         r3, [pc, #0x4C]
  00584	e5933000	 ldr         r3, [r3]
  00588	e0833002	 add         r3, r3, r2
  0058c	e2833004	 add         r3, r3, #4
  00590	e5933000	 ldr         r3, [r3]
  00594	e3830902	 orr         r0, r3, #2, 18
  00598	e59d1004	 ldr         r1, [sp, #4]
  0059c	e3a03008	 mov         r3, #8
  005a0	e0020391	 mul         r2, r1, r3
  005a4	e59f3028	 ldr         r3, [pc, #0x28]
  005a8	e5933000	 ldr         r3, [r3]
  005ac	e0833002	 add         r3, r3, r2
  005b0	e2833004	 add         r3, r3, #4
  005b4	e5830000	 str         r0, [r3]
  005b8		 |$LN1@RequestAnd|
  005b8		 |$LN2@RequestAnd|

; 183  :             }
; 184  :         }
; 185  :         PadCfgUnlock();

  005b8	eb000000	 bl          PadCfgUnlock
  005bc		 |$LN3@RequestAnd|

; 186  :     }
; 187  :     return rc;

  005bc	e59d3000	 ldr         r3, [sp]
  005c0	e58d3008	 str         r3, [sp, #8]
  005c4		 |$LN5@RequestAnd|

; 188  : }

  005c4	e59d0008	 ldr         r0, [sp, #8]
  005c8	e28dd014	 add         sp, sp, #0x14
  005cc	e89d6000	 ldmia       sp, {sp, lr}
  005d0	e12fff1e	 bx          lr
  005d4		 |$LN10@RequestAnd|
  005d4		 |$LN11@RequestAnd|
  005d4	00000000	 DCD         |g_bspPadInfo|
  005d8		 |$LN12@RequestAnd|
  005d8	00000000	 DCD         |g_NbPads|
  005dc		 |$M44687|

			 ENDP  ; |RequestAndConfigurePad|

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1LI@PMKLMLGK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|RequestAndConfigurePadArray|
	IMPORT	|NKDbgPrintfW|

  00048			 AREA	 |.pdata|, PDATA
|$T44698| DCD	|$LN12@RequestAnd@2|
	DCD	0x40009404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1LI@PMKLMLGK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "O", 0x0, "A"
	DCB	0x0, "L", 0x0, "\\", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P"
	DCB	0x0, "_", 0x0, "O", 0x0, "A", 0x0, "L", 0x0, "P", 0x0, "A"
	DCB	0x0, "D", 0x0, "C", 0x0, "F", 0x0, "G", 0x0, "\\", 0x0, "."
	DCB	0x0, "\\", 0x0, "o", 0x0, "a", 0x0, "l", 0x0, "p", 0x0, "a"
	DCB	0x0, "d", 0x0, "c", 0x0, "f", 0x0, "g", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  005dc			 AREA	 |.text|, CODE, ARM

  005dc		 |RequestAndConfigurePadArray| PROC

; 193  : {

  005dc		 |$LN12@RequestAnd@2|
  005dc	e1a0c00d	 mov         r12, sp
  005e0	e92d0001	 stmdb       sp!, {r0}
  005e4	e92d5000	 stmdb       sp!, {r12, lr}
  005e8	e24dd01c	 sub         sp, sp, #0x1C
  005ec		 |$M44695|

; 194  :     BOOL rc = TRUE;

  005ec	e3a03001	 mov         r3, #1
  005f0	e58d3000	 str         r3, [sp]

; 195  :     int i = 0;

  005f4	e3a03000	 mov         r3, #0
  005f8	e58d3004	 str         r3, [sp, #4]

; 196  :     
; 197  :     PadCfgLock();

  005fc	eb000000	 bl          PadCfgLock

; 198  :     // Check that all pads are valid and released
; 199  :     i=0;

  00600	e3a03000	 mov         r3, #0
  00604	e58d3004	 str         r3, [sp, #4]
  00608		 |$LN7@RequestAnd@2|

; 200  :     while (rc && (padArray[i].padID != (UINT16) -1))

  00608	e59d3000	 ldr         r3, [sp]
  0060c	e3530000	 cmp         r3, #0
  00610	0a000033	 beq         |$LN6@RequestAnd@2|
  00614	e59d1004	 ldr         r1, [sp, #4]
  00618	e3a03008	 mov         r3, #8
  0061c	e0020391	 mul         r2, r1, r3
  00620	e59d3024	 ldr         r3, [sp, #0x24]
  00624	e0833002	 add         r3, r3, r2
  00628	e1d330b0	 ldrh        r3, [r3]
  0062c	e1a02003	 mov         r2, r3
  00630	e3a03cff	 mov         r3, #0xFF, 24
  00634	e38330ff	 orr         r3, r3, #0xFF
  00638	e1520003	 cmp         r2, r3
  0063c	0a000028	 beq         |$LN6@RequestAnd@2|

; 201  :     {
; 202  :         int padIndex;
; 203  :         padIndex = FindPad(padArray[i].padID);

  00640	e59d1004	 ldr         r1, [sp, #4]
  00644	e3a03008	 mov         r3, #8
  00648	e0020391	 mul         r2, r1, r3
  0064c	e59d3024	 ldr         r3, [sp, #0x24]
  00650	e0833002	 add         r3, r3, r2
  00654	e1d300b0	 ldrh        r0, [r3]
  00658	eb000000	 bl          FindPad
  0065c	e58d0014	 str         r0, [sp, #0x14]
  00660	e59d3014	 ldr         r3, [sp, #0x14]
  00664	e58d3008	 str         r3, [sp, #8]

; 204  :         if (padIndex == -1) 

  00668	e59d3008	 ldr         r3, [sp, #8]
  0066c	e3730001	 cmn         r3, #1
  00670	1a000000	 bne         |$LN5@RequestAnd@2|

; 205  :         {
; 206  :             goto error;

  00674	ea000060	 b           |$error$44531|
  00678		 |$LN5@RequestAnd@2|

; 207  :         }
; 208  :         if (padIndex >= g_NbPads)

  00678	e59d2008	 ldr         r2, [sp, #8]
  0067c	e59f31a4	 ldr         r3, [pc, #0x1A4]
  00680	e5933000	 ldr         r3, [r3]
  00684	e1520003	 cmp         r2, r3
  00688	ba000006	 blt         |$LN4@RequestAnd@2|

; 209  :         {
; 210  :             ASSERT(0);

  0068c	e3a030d2	 mov         r3, #0xD2
  00690	e59f218c	 ldr         r2, [pc, #0x18C]
  00694	e59f1184	 ldr         r1, [pc, #0x184]
  00698	e59f017c	 ldr         r0, [pc, #0x17C]
  0069c	eb000000	 bl          NKDbgPrintfW
  006a0	e6000010	 __debugbreak_ce

; 211  :             goto error;

  006a4	ea000054	 b           |$error$44531|
  006a8		 |$LN4@RequestAnd@2|

; 212  :         }
; 213  :         if (g_bspPadInfo[padIndex].inUse)

  006a8	e59d1008	 ldr         r1, [sp, #8]
  006ac	e3a03008	 mov         r3, #8
  006b0	e0020391	 mul         r2, r1, r3
  006b4	e59f315c	 ldr         r3, [pc, #0x15C]
  006b8	e5933000	 ldr         r3, [r3]
  006bc	e0833002	 add         r3, r3, r2
  006c0	e2833004	 add         r3, r3, #4
  006c4	e5933000	 ldr         r3, [r3]
  006c8	e3130902	 tst         r3, #2, 18
  006cc	0a000000	 beq         |$LN3@RequestAnd@2|

; 214  :         {                
; 215  :             goto error;

  006d0	ea000049	 b           |$error$44531|
  006d4		 |$LN3@RequestAnd@2|

; 216  :         }
; 217  :         i++;

  006d4	e59d3004	 ldr         r3, [sp, #4]
  006d8	e2833001	 add         r3, r3, #1
  006dc	e58d3004	 str         r3, [sp, #4]

; 218  :     }

  006e0	eaffffc8	 b           |$LN7@RequestAnd@2|
  006e4		 |$LN6@RequestAnd@2|

; 219  : 
; 220  :     // Request and Configure all pads
; 221  :     i = 0;

  006e4	e3a03000	 mov         r3, #0
  006e8	e58d3004	 str         r3, [sp, #4]
  006ec		 |$LN2@RequestAnd@2|

; 222  :     while (rc && (padArray[i].padID != (UINT16) -1))

  006ec	e59d3000	 ldr         r3, [sp]
  006f0	e3530000	 cmp         r3, #0
  006f4	0a00003c	 beq         |$LN1@RequestAnd@2|
  006f8	e59d1004	 ldr         r1, [sp, #4]
  006fc	e3a03008	 mov         r3, #8
  00700	e0020391	 mul         r2, r1, r3
  00704	e59d3024	 ldr         r3, [sp, #0x24]
  00708	e0833002	 add         r3, r3, r2
  0070c	e1d330b0	 ldrh        r3, [r3]
  00710	e1a02003	 mov         r2, r3
  00714	e3a03cff	 mov         r3, #0xFF, 24
  00718	e38330ff	 orr         r3, r3, #0xFF
  0071c	e1520003	 cmp         r2, r3
  00720	0a000031	 beq         |$LN1@RequestAnd@2|

; 223  :     {
; 224  :         int padIndex;
; 225  :         padIndex = FindPad(padArray[i].padID);

  00724	e59d1004	 ldr         r1, [sp, #4]
  00728	e3a03008	 mov         r3, #8
  0072c	e0020391	 mul         r2, r1, r3
  00730	e59d3024	 ldr         r3, [sp, #0x24]
  00734	e0833002	 add         r3, r3, r2
  00738	e1d300b0	 ldrh        r0, [r3]
  0073c	eb000000	 bl          FindPad
  00740	e58d0018	 str         r0, [sp, #0x18]
  00744	e59d3018	 ldr         r3, [sp, #0x18]
  00748	e58d300c	 str         r3, [sp, #0xC]

; 226  :         g_bspPadInfo[padIndex].inUse = 1;

  0074c	e59d100c	 ldr         r1, [sp, #0xC]
  00750	e3a03008	 mov         r3, #8
  00754	e0020391	 mul         r2, r1, r3
  00758	e59f30b8	 ldr         r3, [pc, #0xB8]
  0075c	e5933000	 ldr         r3, [r3]
  00760	e0833002	 add         r3, r3, r2
  00764	e2833004	 add         r3, r3, #4
  00768	e5933000	 ldr         r3, [r3]
  0076c	e3830902	 orr         r0, r3, #2, 18
  00770	e59d100c	 ldr         r1, [sp, #0xC]
  00774	e3a03008	 mov         r3, #8
  00778	e0020391	 mul         r2, r1, r3
  0077c	e59f3094	 ldr         r3, [pc, #0x94]
  00780	e5933000	 ldr         r3, [r3]
  00784	e0833002	 add         r3, r3, r2
  00788	e2833004	 add         r3, r3, #4
  0078c	e5830000	 str         r0, [r3]

; 227  :         SOCSetPadConfig(padArray[i].padID,(UINT16)padArray[i].Cfg);     

  00790	e59d1004	 ldr         r1, [sp, #4]
  00794	e3a03008	 mov         r3, #8
  00798	e0020391	 mul         r2, r1, r3
  0079c	e59d3024	 ldr         r3, [sp, #0x24]
  007a0	e0833002	 add         r3, r3, r2
  007a4	e2833004	 add         r3, r3, #4
  007a8	e5932000	 ldr         r2, [r3]
  007ac	e3a03c7f	 mov         r3, #0x7F, 24
  007b0	e38330ff	 orr         r3, r3, #0xFF
  007b4	e0023003	 and         r3, r2, r3
  007b8	e1a01803	 mov         r1, r3, lsl #16
  007bc	e1a01821	 mov         r1, r1, lsr #16
  007c0	e59d0004	 ldr         r0, [sp, #4]
  007c4	e3a03008	 mov         r3, #8
  007c8	e0020390	 mul         r2, r0, r3
  007cc	e59d3024	 ldr         r3, [sp, #0x24]
  007d0	e0833002	 add         r3, r3, r2
  007d4	e1d300b0	 ldrh        r0, [r3]
  007d8	eb000000	 bl          SOCSetPadConfig

; 228  :         i++;

  007dc	e59d3004	 ldr         r3, [sp, #4]
  007e0	e2833001	 add         r3, r3, #1
  007e4	e58d3004	 str         r3, [sp, #4]

; 229  :     }

  007e8	eaffffbf	 b           |$LN2@RequestAnd@2|
  007ec		 |$LN1@RequestAnd@2|

; 230  : 
; 231  :     PadCfgUnlock();

  007ec	eb000000	 bl          PadCfgUnlock

; 232  :     return TRUE;

  007f0	e3a03001	 mov         r3, #1
  007f4	e58d3010	 str         r3, [sp, #0x10]
  007f8	ea000002	 b           |$LN8@RequestAnd@2|
  007fc		 |$error$44531|

; 233  : 
; 234  : error:
; 235  :     PadCfgUnlock();

  007fc	eb000000	 bl          PadCfgUnlock

; 236  :     return FALSE;

  00800	e3a03000	 mov         r3, #0
  00804	e58d3010	 str         r3, [sp, #0x10]
  00808		 |$LN8@RequestAnd@2|

; 237  : }

  00808	e59d0010	 ldr         r0, [sp, #0x10]
  0080c	e28dd01c	 add         sp, sp, #0x1C
  00810	e89d6000	 ldmia       sp, {sp, lr}
  00814	e12fff1e	 bx          lr
  00818		 |$LN13@RequestAnd@2|
  00818		 |$LN14@RequestAnd@2|
  00818	00000000	 DCD         |g_bspPadInfo|
  0081c		 |$LN15@RequestAnd@2|
  0081c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00820		 |$LN16@RequestAnd@2|
  00820	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00824		 |$LN17@RequestAnd@2|
  00824	00000000	 DCD         |??_C@_1LI@PMKLMLGK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00828		 |$LN18@RequestAnd@2|
  00828	00000000	 DCD         |g_NbPads|
  0082c		 |$M44696|

			 ENDP  ; |RequestAndConfigurePadArray|

	EXPORT	|ReleasePadArray|

  00050			 AREA	 |.pdata|, PDATA
|$T44710| DCD	|$LN7@ReleasePad@2|
	DCD	0x40002c04
; Function compile flags: /Odtp

  0082c			 AREA	 |.text|, CODE, ARM

  0082c		 |ReleasePadArray| PROC

; 240  : {   

  0082c		 |$LN7@ReleasePad@2|
  0082c	e1a0c00d	 mov         r12, sp
  00830	e92d0001	 stmdb       sp!, {r0}
  00834	e92d5000	 stmdb       sp!, {r12, lr}
  00838	e24dd010	 sub         sp, sp, #0x10
  0083c		 |$M44707|

; 241  :     BOOL rc = TRUE;

  0083c	e3a03001	 mov         r3, #1
  00840	e58d3000	 str         r3, [sp]

; 242  :     int i = 0;

  00844	e3a03000	 mov         r3, #0
  00848	e58d3004	 str         r3, [sp, #4]

; 243  :         
; 244  :     // Check that all pads are valid and released
; 245  :     i=0;

  0084c	e3a03000	 mov         r3, #0
  00850	e58d3004	 str         r3, [sp, #4]
  00854		 |$LN2@ReleasePad@2|

; 246  :     while (rc && (padArray[i].padID != (UINT16) -1))

  00854	e59d3000	 ldr         r3, [sp]
  00858	e3530000	 cmp         r3, #0
  0085c	0a000018	 beq         |$LN1@ReleasePad@2|
  00860	e59d1004	 ldr         r1, [sp, #4]
  00864	e3a03008	 mov         r3, #8
  00868	e0020391	 mul         r2, r1, r3
  0086c	e59d3018	 ldr         r3, [sp, #0x18]
  00870	e0833002	 add         r3, r3, r2
  00874	e1d330b0	 ldrh        r3, [r3]
  00878	e1a02003	 mov         r2, r3
  0087c	e3a03cff	 mov         r3, #0xFF, 24
  00880	e38330ff	 orr         r3, r3, #0xFF
  00884	e1520003	 cmp         r2, r3
  00888	0a00000d	 beq         |$LN1@ReleasePad@2|

; 247  :     {
; 248  :        rc = ReleasePad(padArray[i].padID);

  0088c	e59d1004	 ldr         r1, [sp, #4]
  00890	e3a03008	 mov         r3, #8
  00894	e0020391	 mul         r2, r1, r3
  00898	e59d3018	 ldr         r3, [sp, #0x18]
  0089c	e0833002	 add         r3, r3, r2
  008a0	e1d300b0	 ldrh        r0, [r3]
  008a4	eb000000	 bl          ReleasePad
  008a8	e58d000c	 str         r0, [sp, #0xC]
  008ac	e59d300c	 ldr         r3, [sp, #0xC]
  008b0	e58d3000	 str         r3, [sp]

; 249  : 	   i++;

  008b4	e59d3004	 ldr         r3, [sp, #4]
  008b8	e2833001	 add         r3, r3, #1
  008bc	e58d3004	 str         r3, [sp, #4]

; 250  :     }    

  008c0	eaffffe3	 b           |$LN2@ReleasePad@2|
  008c4		 |$LN1@ReleasePad@2|

; 251  :     return rc;

  008c4	e59d3000	 ldr         r3, [sp]
  008c8	e58d3008	 str         r3, [sp, #8]

; 252  : }

  008cc	e59d0008	 ldr         r0, [sp, #8]
  008d0	e28dd010	 add         sp, sp, #0x10
  008d4	e89d6000	 ldmia       sp, {sp, lr}
  008d8	e12fff1e	 bx          lr
  008dc		 |$M44708|

			 ENDP  ; |ReleasePadArray|

	IMPORT	|memcpy|

  00058			 AREA	 |.pdata|, PDATA
|$T44717| DCD	|$LN14@SortPadInf|
	DCD	0x40006304
; Function compile flags: /Odtp

  008dc			 AREA	 |.text|, CODE, ARM

  008dc		 |SortPadInfoArray| PROC

; 255  : {

  008dc		 |$LN14@SortPadInf|
  008dc	e1a0c00d	 mov         r12, sp
  008e0	e92d0001	 stmdb       sp!, {r0}
  008e4	e92d5000	 stmdb       sp!, {r12, lr}
  008e8	e24dd018	 sub         sp, sp, #0x18
  008ec		 |$M44714|

; 256  :     int i,j;
; 257  :     int nbPad = 0;

  008ec	e3a03000	 mov         r3, #0
  008f0	e58d3000	 str         r3, [sp]
  008f4		 |$LN9@SortPadInf|

; 258  :     while (padArray[nbPad].padID != (UINT16) -1)

  008f4	e59d1000	 ldr         r1, [sp]
  008f8	e3a03008	 mov         r3, #8
  008fc	e0020391	 mul         r2, r1, r3
  00900	e59d3020	 ldr         r3, [sp, #0x20]
  00904	e0833002	 add         r3, r3, r2
  00908	e1d330b0	 ldrh        r3, [r3]
  0090c	e1a02003	 mov         r2, r3
  00910	e3a03cff	 mov         r3, #0xFF, 24
  00914	e38330ff	 orr         r3, r3, #0xFF
  00918	e1520003	 cmp         r2, r3
  0091c	0a000003	 beq         |$LN8@SortPadInf|

; 259  :     {
; 260  :         nbPad++;

  00920	e59d3000	 ldr         r3, [sp]
  00924	e2833001	 add         r3, r3, #1
  00928	e58d3000	 str         r3, [sp]

; 261  :     }

  0092c	eafffff0	 b           |$LN9@SortPadInf|
  00930		 |$LN8@SortPadInf|

; 262  :     //simple bubble sorting
; 263  :     for(i=0;i<(nbPad);i++)

  00930	e3a03000	 mov         r3, #0
  00934	e58d3004	 str         r3, [sp, #4]
  00938	ea000002	 b           |$LN7@SortPadInf|
  0093c		 |$LN6@SortPadInf|
  0093c	e59d3004	 ldr         r3, [sp, #4]
  00940	e2833001	 add         r3, r3, #1
  00944	e58d3004	 str         r3, [sp, #4]
  00948		 |$LN7@SortPadInf|
  00948	e59d2004	 ldr         r2, [sp, #4]
  0094c	e59d3000	 ldr         r3, [sp]
  00950	e1520003	 cmp         r2, r3
  00954	aa00003d	 bge         |$LN5@SortPadInf|

; 264  :     {
; 265  :         for(j=0;j<(nbPad-1)-i;j++)

  00958	e3a03000	 mov         r3, #0
  0095c	e58d3008	 str         r3, [sp, #8]
  00960	ea000002	 b           |$LN4@SortPadInf|
  00964		 |$LN3@SortPadInf|
  00964	e59d3008	 ldr         r3, [sp, #8]
  00968	e2833001	 add         r3, r3, #1
  0096c	e58d3008	 str         r3, [sp, #8]
  00970		 |$LN4@SortPadInf|
  00970	e59d3000	 ldr         r3, [sp]
  00974	e2432001	 sub         r2, r3, #1
  00978	e59d3004	 ldr         r3, [sp, #4]
  0097c	e0422003	 sub         r2, r2, r3
  00980	e59d3008	 ldr         r3, [sp, #8]
  00984	e1530002	 cmp         r3, r2
  00988	aa00002f	 bge         |$LN2@SortPadInf|

; 266  :         {
; 267  :             if(padArray[j].padID > padArray[j+1].padID)

  0098c	e59d1008	 ldr         r1, [sp, #8]
  00990	e3a03008	 mov         r3, #8
  00994	e0020391	 mul         r2, r1, r3
  00998	e59d3020	 ldr         r3, [sp, #0x20]
  0099c	e0833002	 add         r3, r3, r2
  009a0	e1d330b0	 ldrh        r3, [r3]
  009a4	e1a00003	 mov         r0, r3
  009a8	e59d3008	 ldr         r3, [sp, #8]
  009ac	e2831001	 add         r1, r3, #1
  009b0	e3a03008	 mov         r3, #8
  009b4	e0020391	 mul         r2, r1, r3
  009b8	e59d3020	 ldr         r3, [sp, #0x20]
  009bc	e0833002	 add         r3, r3, r2
  009c0	e1d330b0	 ldrh        r3, [r3]
  009c4	e1500003	 cmp         r0, r3
  009c8	da00001e	 ble         |$LN1@SortPadInf|

; 268  :             {
; 269  :                 PAD_INFO temp;
; 270  :                 temp = padArray[j];

  009cc	e59d1008	 ldr         r1, [sp, #8]
  009d0	e3a03008	 mov         r3, #8
  009d4	e0020391	 mul         r2, r1, r3
  009d8	e59d3020	 ldr         r3, [sp, #0x20]
  009dc	e0831002	 add         r1, r3, r2
  009e0	e28d000c	 add         r0, sp, #0xC
  009e4	e3a02008	 mov         r2, #8
  009e8	eb000000	 bl          memcpy

; 271  :                 padArray[j] = padArray[j+1];

  009ec	e59d3008	 ldr         r3, [sp, #8]
  009f0	e2831001	 add         r1, r3, #1
  009f4	e3a03008	 mov         r3, #8
  009f8	e0020391	 mul         r2, r1, r3
  009fc	e59d3020	 ldr         r3, [sp, #0x20]
  00a00	e083e002	 add         lr, r3, r2
  00a04	e59d1008	 ldr         r1, [sp, #8]
  00a08	e3a03008	 mov         r3, #8
  00a0c	e0020391	 mul         r2, r1, r3
  00a10	e59d3020	 ldr         r3, [sp, #0x20]
  00a14	e0830002	 add         r0, r3, r2
  00a18	e1a0100e	 mov         r1, lr
  00a1c	e3a02008	 mov         r2, #8
  00a20	eb000000	 bl          memcpy

; 272  :                 padArray[j+1] = temp;

  00a24	e59d3008	 ldr         r3, [sp, #8]
  00a28	e2831001	 add         r1, r3, #1
  00a2c	e3a03008	 mov         r3, #8
  00a30	e0020391	 mul         r2, r1, r3
  00a34	e59d3020	 ldr         r3, [sp, #0x20]
  00a38	e0830002	 add         r0, r3, r2
  00a3c	e28d100c	 add         r1, sp, #0xC
  00a40	e3a02008	 mov         r2, #8
  00a44	eb000000	 bl          memcpy
  00a48		 |$LN1@SortPadInf|

; 273  :             }
; 274  :         }

  00a48	eaffffc5	 b           |$LN3@SortPadInf|
  00a4c		 |$LN2@SortPadInf|

; 275  :     }

  00a4c	eaffffba	 b           |$LN6@SortPadInf|
  00a50		 |$LN5@SortPadInf|

; 276  :     return nbPad;

  00a50	e59d3000	 ldr         r3, [sp]
  00a54	e58d3014	 str         r3, [sp, #0x14]

; 277  : }

  00a58	e59d0014	 ldr         r0, [sp, #0x14]
  00a5c	e28dd018	 add         sp, sp, #0x18
  00a60	e89d6000	 ldmia       sp, {sp, lr}
  00a64	e12fff1e	 bx          lr
  00a68		 |$M44715|

			 ENDP  ; |SortPadInfoArray|

	EXPORT	|??_C@_1FM@HMOJBEID@?$AAP?$AAA?$AAD?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|__rt_sdiv|

  00060			 AREA	 |.pdata|, PDATA
|$T44724| DCD	|$LN13@FindPad|
	DCD	0x40005a04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@HMOJBEID@?$AAP?$AAA?$AAD?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr@| DCB "P"
	DCB	0x0, "A", 0x0, "D", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u"
	DCB	0x0, "r", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n"
	DCB	0x0, " ", 0x0, "a", 0x0, "r", 0x0, "r", 0x0, "a", 0x0, "y"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00a68			 AREA	 |.text|, CODE, ARM

  00a68		 |FindPad| PROC

; 281  : {    

  00a68		 |$LN13@FindPad|
  00a68	e1a0c00d	 mov         r12, sp
  00a6c	e92d0001	 stmdb       sp!, {r0}
  00a70	e92d5000	 stmdb       sp!, {r12, lr}
  00a74	e24dd010	 sub         sp, sp, #0x10
  00a78		 |$M44721|

; 282  :     int index = 0;

  00a78	e3a03000	 mov         r3, #0
  00a7c	e58d3000	 str         r3, [sp]

; 283  :     int inf = 0;

  00a80	e3a03000	 mov         r3, #0
  00a84	e58d3008	 str         r3, [sp, #8]

; 284  :     int sup = g_NbPads-1;

  00a88	e59f313c	 ldr         r3, [pc, #0x13C]
  00a8c	e5933000	 ldr         r3, [r3]
  00a90	e2433001	 sub         r3, r3, #1
  00a94	e58d3004	 str         r3, [sp, #4]
  00a98		 |$LN8@FindPad|

; 285  :     for(;;)
; 286  :     {
; 287  :         index = (inf+sup) / 2;

  00a98	e59d2008	 ldr         r2, [sp, #8]
  00a9c	e59d3004	 ldr         r3, [sp, #4]
  00aa0	e0821003	 add         r1, r2, r3
  00aa4	e3a00002	 mov         r0, #2
  00aa8	eb000000	 bl          __rt_sdiv
  00aac	e58d0000	 str         r0, [sp]

; 288  :         if (inf == sup)

  00ab0	e59d2008	 ldr         r2, [sp, #8]
  00ab4	e59d3004	 ldr         r3, [sp, #4]
  00ab8	e1520003	 cmp         r2, r3
  00abc	1a000000	 bne         |$LN6@FindPad|

; 289  :         {
; 290  :             //whatever the result this is the end of the search
; 291  :             break;

  00ac0	ea000021	 b           |$LN7@FindPad|
  00ac4		 |$LN6@FindPad|

; 292  :         }
; 293  :         if (g_bspPadInfo[index].padID < padId)

  00ac4	e59d1000	 ldr         r1, [sp]
  00ac8	e3a03008	 mov         r3, #8
  00acc	e0020391	 mul         r2, r1, r3
  00ad0	e59f30f0	 ldr         r3, [pc, #0xF0]
  00ad4	e5933000	 ldr         r3, [r3]
  00ad8	e0833002	 add         r3, r3, r2
  00adc	e1d330b0	 ldrh        r3, [r3]
  00ae0	e1a02003	 mov         r2, r3
  00ae4	e1dd31b8	 ldrh        r3, [sp, #0x18]
  00ae8	e1520003	 cmp         r2, r3
  00aec	aa000003	 bge         |$LN5@FindPad|

; 294  :         {
; 295  :             inf = index+1;

  00af0	e59d3000	 ldr         r3, [sp]
  00af4	e2833001	 add         r3, r3, #1
  00af8	e58d3008	 str         r3, [sp, #8]
  00afc	ea000011	 b           |$LN4@FindPad|
  00b00		 |$LN5@FindPad|

; 296  :         }
; 297  :         else if (g_bspPadInfo[index].padID > padId)

  00b00	e59d1000	 ldr         r1, [sp]
  00b04	e3a03008	 mov         r3, #8
  00b08	e0020391	 mul         r2, r1, r3
  00b0c	e59f30b4	 ldr         r3, [pc, #0xB4]
  00b10	e5933000	 ldr         r3, [r3]
  00b14	e0833002	 add         r3, r3, r2
  00b18	e1d330b0	 ldrh        r3, [r3]
  00b1c	e1a02003	 mov         r2, r3
  00b20	e1dd31b8	 ldrh        r3, [sp, #0x18]
  00b24	e1520003	 cmp         r2, r3
  00b28	da000003	 ble         |$LN3@FindPad|

; 298  :         {
; 299  :             sup = index-1;

  00b2c	e59d3000	 ldr         r3, [sp]
  00b30	e2433001	 sub         r3, r3, #1
  00b34	e58d3004	 str         r3, [sp, #4]

; 300  :         }
; 301  :         else // (g_bspPadInfo[index].padID == padId)

  00b38	ea000002	 b           |$LN2@FindPad|
  00b3c		 |$LN3@FindPad|

; 302  :         {
; 303  :             return index;

  00b3c	e59d3000	 ldr         r3, [sp]
  00b40	e58d300c	 str         r3, [sp, #0xC]
  00b44	ea000018	 b           |$LN9@FindPad|
  00b48		 |$LN2@FindPad|
  00b48		 |$LN4@FindPad|

; 304  :         } 
; 305  :     }

  00b48	eaffffd2	 b           |$LN8@FindPad|
  00b4c		 |$LN7@FindPad|

; 306  :     if (g_bspPadInfo[index].padID == padId)

  00b4c	e59d1000	 ldr         r1, [sp]
  00b50	e3a03008	 mov         r3, #8
  00b54	e0020391	 mul         r2, r1, r3
  00b58	e59f3068	 ldr         r3, [pc, #0x68]
  00b5c	e5933000	 ldr         r3, [r3]
  00b60	e0833002	 add         r3, r3, r2
  00b64	e1d330b0	 ldrh        r3, [r3]
  00b68	e1a02003	 mov         r2, r3
  00b6c	e1dd31b8	 ldrh        r3, [sp, #0x18]
  00b70	e1520003	 cmp         r2, r3
  00b74	1a000002	 bne         |$LN1@FindPad|

; 307  :     {        
; 308  :             return index;

  00b78	e59d3000	 ldr         r3, [sp]
  00b7c	e58d300c	 str         r3, [sp, #0xC]
  00b80	ea000009	 b           |$LN9@FindPad|
  00b84		 |$LN1@FindPad|

; 309  :     }
; 310  :     ERRORMSG(1,(TEXT("PAD %d not found in pad configuration array\r\n"),padId));

  00b84	e3a02c01	 mov         r2, #1, 24
  00b88	e3822036	 orr         r2, r2, #0x36
  00b8c	e59f1030	 ldr         r1, [pc, #0x30]
  00b90	e59f0028	 ldr         r0, [pc, #0x28]
  00b94	eb000000	 bl          NKDbgPrintfW
  00b98	e1dd11b8	 ldrh        r1, [sp, #0x18]
  00b9c	e59f0018	 ldr         r0, [pc, #0x18]
  00ba0	eb000000	 bl          NKDbgPrintfW

; 311  :     return -1;

  00ba4	e3e03000	 mvn         r3, #0
  00ba8	e58d300c	 str         r3, [sp, #0xC]
  00bac		 |$LN9@FindPad|

; 312  : }

  00bac	e59d000c	 ldr         r0, [sp, #0xC]
  00bb0	e28dd010	 add         sp, sp, #0x10
  00bb4	e89d6000	 ldmia       sp, {sp, lr}
  00bb8	e12fff1e	 bx          lr
  00bbc		 |$LN14@FindPad|
  00bbc		 |$LN15@FindPad|
  00bbc	00000000	 DCD         |??_C@_1FM@HMOJBEID@?$AAP?$AAA?$AAD?$AA?5?$AA?$CF?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAp?$AAa?$AAd?$AA?5?$AAc?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr@|
  00bc0		 |$LN16@FindPad|
  00bc0	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00bc4		 |$LN17@FindPad|
  00bc4	00000000	 DCD         |??_C@_1LI@PMKLMLGK@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00bc8		 |$LN18@FindPad|
  00bc8	00000000	 DCD         |g_bspPadInfo|
  00bcc		 |$LN19@FindPad|
  00bcc	00000000	 DCD         |g_NbPads|
  00bd0		 |$M44722|

			 ENDP  ; |FindPad|

	EXPORT	|RequestDevicePads|
	IMPORT	|BSPGetDevicePadInfo|

  00068			 AREA	 |.pdata|, PDATA
|$T44736| DCD	|$LN6@RequestDev|
	DCD	0x40001904
; Function compile flags: /Odtp

  00bd0			 AREA	 |.text|, CODE, ARM

  00bd0		 |RequestDevicePads| PROC

; 315  : {

  00bd0		 |$LN6@RequestDev|
  00bd0	e1a0c00d	 mov         r12, sp
  00bd4	e92d0001	 stmdb       sp!, {r0}
  00bd8	e92d5000	 stmdb       sp!, {r12, lr}
  00bdc	e24dd014	 sub         sp, sp, #0x14
  00be0		 |$M44733|

; 316  :     BOOL rc = FALSE;

  00be0	e3a03000	 mov         r3, #0
  00be4	e58d3004	 str         r3, [sp, #4]

; 317  :     const PAD_INFO* p = BSPGetDevicePadInfo(device);

  00be8	e59d001c	 ldr         r0, [sp, #0x1C]
  00bec	eb000000	 bl          BSPGetDevicePadInfo
  00bf0	e58d000c	 str         r0, [sp, #0xC]
  00bf4	e59d300c	 ldr         r3, [sp, #0xC]
  00bf8	e58d3000	 str         r3, [sp]

; 318  : 
; 319  :     if (p)

  00bfc	e59d3000	 ldr         r3, [sp]
  00c00	e3530000	 cmp         r3, #0
  00c04	0a000004	 beq         |$LN1@RequestDev|

; 320  :     {
; 321  :         rc = RequestAndConfigurePadArray(p);

  00c08	e59d0000	 ldr         r0, [sp]
  00c0c	eb000000	 bl          RequestAndConfigurePadArray
  00c10	e58d0010	 str         r0, [sp, #0x10]
  00c14	e59d3010	 ldr         r3, [sp, #0x10]
  00c18	e58d3004	 str         r3, [sp, #4]
  00c1c		 |$LN1@RequestDev|

; 322  :     }
; 323  : 
; 324  :     return rc;

  00c1c	e59d3004	 ldr         r3, [sp, #4]
  00c20	e58d3008	 str         r3, [sp, #8]

; 325  : }

  00c24	e59d0008	 ldr         r0, [sp, #8]
  00c28	e28dd014	 add         sp, sp, #0x14
  00c2c	e89d6000	 ldmia       sp, {sp, lr}
  00c30	e12fff1e	 bx          lr
  00c34		 |$M44734|

			 ENDP  ; |RequestDevicePads|

	EXPORT	|ReleaseDevicePads|

  00070			 AREA	 |.pdata|, PDATA
|$T44742| DCD	|$LN6@ReleaseDev|
	DCD	0x40001904
; Function compile flags: /Odtp

  00c34			 AREA	 |.text|, CODE, ARM

  00c34		 |ReleaseDevicePads| PROC

; 327  : {

  00c34		 |$LN6@ReleaseDev|
  00c34	e1a0c00d	 mov         r12, sp
  00c38	e92d0001	 stmdb       sp!, {r0}
  00c3c	e92d5000	 stmdb       sp!, {r12, lr}
  00c40	e24dd014	 sub         sp, sp, #0x14
  00c44		 |$M44739|

; 328  :     BOOL rc = FALSE;

  00c44	e3a03000	 mov         r3, #0
  00c48	e58d3004	 str         r3, [sp, #4]

; 329  :     const PAD_INFO* p = BSPGetDevicePadInfo(device);

  00c4c	e59d001c	 ldr         r0, [sp, #0x1C]
  00c50	eb000000	 bl          BSPGetDevicePadInfo
  00c54	e58d000c	 str         r0, [sp, #0xC]
  00c58	e59d300c	 ldr         r3, [sp, #0xC]
  00c5c	e58d3000	 str         r3, [sp]

; 330  :     
; 331  :     if (p)

  00c60	e59d3000	 ldr         r3, [sp]
  00c64	e3530000	 cmp         r3, #0
  00c68	0a000004	 beq         |$LN1@ReleaseDev|

; 332  :     {
; 333  :         rc = ReleasePadArray(p);

  00c6c	e59d0000	 ldr         r0, [sp]
  00c70	eb000000	 bl          ReleasePadArray
  00c74	e58d0010	 str         r0, [sp, #0x10]
  00c78	e59d3010	 ldr         r3, [sp, #0x10]
  00c7c	e58d3004	 str         r3, [sp, #4]
  00c80		 |$LN1@ReleaseDev|

; 334  :     }
; 335  : 
; 336  :     return rc;

  00c80	e59d3004	 ldr         r3, [sp, #4]
  00c84	e58d3008	 str         r3, [sp, #8]

; 337  : }

  00c88	e59d0008	 ldr         r0, [sp, #8]
  00c8c	e28dd014	 add         sp, sp, #0x14
  00c90	e89d6000	 ldmia       sp, {sp, lr}
  00c94	e12fff1e	 bx          lr
  00c98		 |$M44740|

			 ENDP  ; |ReleaseDevicePads|

	END
