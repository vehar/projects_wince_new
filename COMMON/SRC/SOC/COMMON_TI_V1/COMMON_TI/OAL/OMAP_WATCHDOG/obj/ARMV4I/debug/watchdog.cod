; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_WATCHDOG\watchdog.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|?fWatchdogInit@?1??WatchdogRefresh@@9@9| % 0x4		; `WatchdogRefresh'::`2'::fWatchdogInit

  00000			 AREA	 |.data|, DATA
|g_WatchdogDevice| DCD 0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OALWatchdogInit|
	IMPORT	|g_pOemGlobal|
	IMPORT	|__rt_udiv|

  00004			 AREA	 |.bss|, NOINIT
|g_dwWatchdogPeriod| % 0x4

  00000			 AREA	 |.pdata|, PDATA
|$T43548| DCD	|$LN5@OALWatchdo|
	DCD	0x40001d03
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_watchdog\watchdog.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALWatchdogInit| PROC

; 73   : {

  00000		 |$LN5@OALWatchdo|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M43545|

; 74   :     g_dwWatchdogPeriod = dwPeriod;

  0000c	e59d2008	 ldr         r2, [sp, #8]
  00010	e59f3054	 ldr         r3, [pc, #0x54]
  00014	e5832000	 str         r2, [r3]

; 75   :     g_pOemGlobal->pfnRefreshWatchDog = WatchdogRefresh;

  00018	e59f3048	 ldr         r3, [pc, #0x48]
  0001c	e5933000	 ldr         r3, [r3]
  00020	e2832094	 add         r2, r3, #0x94
  00024	e59f3044	 ldr         r3, [pc, #0x44]
  00028	e5823000	 str         r3, [r2]

; 76   :     g_pOemGlobal->dwWatchDogPeriod = g_dwWatchdogPeriod / 2; //set the refresh period to half the watchdog period

  0002c	e59f3038	 ldr         r3, [pc, #0x38]
  00030	e5931000	 ldr         r1, [r3]
  00034	e3a00002	 mov         r0, #2
  00038	eb000000	 bl          __rt_udiv
  0003c	e59f3024	 ldr         r3, [pc, #0x24]
  00040	e5933000	 ldr         r3, [r3]
  00044	e2833098	 add         r3, r3, #0x98
  00048	e5830000	 str         r0, [r3]

; 77   :     g_pOemGlobal->dwWatchDogThreadPriority = dwThreadPriority;

  0004c	e59f3014	 ldr         r3, [pc, #0x14]
  00050	e5933000	 ldr         r3, [r3]
  00054	e283209c	 add         r2, r3, #0x9C
  00058	e59d300c	 ldr         r3, [sp, #0xC]
  0005c	e5823000	 str         r3, [r2]

; 78   : }

  00060	e89d6000	 ldmia       sp, {sp, lr}
  00064	e12fff1e	 bx          lr
  00068		 |$LN6@OALWatchdo|
  00068		 |$LN7@OALWatchdo|
  00068	00000000	 DCD         |g_pOemGlobal|
  0006c		 |$LN8@OALWatchdo|
  0006c	00000000	 DCD         |g_dwWatchdogPeriod|
  00070		 |$LN9@OALWatchdo|
  00070	00000000	 DCD         |WatchdogRefresh|
  00074		 |$M43546|

			 ENDP  ; |OALWatchdogInit|

	IMPORT	|EnableDeviceClocks|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|BPSGetWatchdogDevice|

  00008			 AREA	 |.bss|, NOINIT
|g_pWatchogTimerRegs| % 0x4

  00008			 AREA	 |.pdata|, PDATA
|$T43557| DCD	|$LN18@WatchdogRe|
	DCD	0x40008b02
; Function compile flags: /Odtp

  00074			 AREA	 |.text|, CODE, ARM

  00074		 |WatchdogRefresh| PROC

; 23   : {

  00074		 |$LN18@WatchdogRe|
  00074	e52de004	 str         lr, [sp, #-4]!
  00078	e24dd00c	 sub         sp, sp, #0xC
  0007c		 |$M43554|

; 24   :     static BOOL fWatchdogInit = FALSE;
; 25   :     if (fWatchdogInit == FALSE)

  0007c	e59f3210	 ldr         r3, [pc, #0x210]
  00080	e5933000	 ldr         r3, [r3]
  00084	e3530000	 cmp         r3, #0
  00088	1a00006d	 bne         |$LN13@WatchdogRe|

; 26   :     {
; 27   :         // Initialize watchdog hardware
; 28   :         g_WatchdogDevice = BPSGetWatchdogDevice();

  0008c	eb000000	 bl          BPSGetWatchdogDevice
  00090	e58d0000	 str         r0, [sp]
  00094	e59d2000	 ldr         r2, [sp]
  00098	e59f31fc	 ldr         r3, [pc, #0x1FC]
  0009c	e5832000	 str         r2, [r3]

; 29   :         g_pWatchogTimerRegs = OALPAtoUA(GetAddressByDevice(g_WatchdogDevice));

  000a0	e59f31f4	 ldr         r3, [pc, #0x1F4]
  000a4	e5930000	 ldr         r0, [r3]
  000a8	eb000000	 bl          GetAddressByDevice
  000ac	e58d0004	 str         r0, [sp, #4]
  000b0	e3a01000	 mov         r1, #0
  000b4	e59d0004	 ldr         r0, [sp, #4]
  000b8	eb000000	 bl          OALPAtoVA
  000bc	e58d0008	 str         r0, [sp, #8]
  000c0	e59d2008	 ldr         r2, [sp, #8]
  000c4	e59f31c4	 ldr         r3, [pc, #0x1C4]
  000c8	e5832000	 str         r2, [r3]

; 30   :         
; 31   :         // Make sure interface/functional clocks are running
; 32   :         EnableDeviceClocks(g_WatchdogDevice, TRUE);

  000cc	e3a01001	 mov         r1, #1
  000d0	e59f31c4	 ldr         r3, [pc, #0x1C4]
  000d4	e5930000	 ldr         r0, [r3]
  000d8	eb000000	 bl          EnableDeviceClocks

; 33   : 
; 34   : #if 0
; 35   :         SetDeviceIdleMode(g_WatchdogDevice,OMAP_SMART_IDLE_FLAG);
; 36   : #endif
; 37   : 
; 38   :         // Ensure the timer is stopped
; 39   :         // Note - writes are posted; must ensure they have completed before 
; 40   :         // writing to the same register again.
; 41   :         OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_DISABLE_SEQ1);

  000dc	e59f31ac	 ldr         r3, [pc, #0x1AC]
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e2832048	 add         r2, r3, #0x48
  000e8	e3a03caa	 mov         r3, #0xAA, 24
  000ec	e38330aa	 orr         r3, r3, #0xAA
  000f0	e5823000	 str         r3, [r2]
  000f4		 |$LN12@WatchdogRe|

; 42   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  000f4	e59f3194	 ldr         r3, [pc, #0x194]
  000f8	e5933000	 ldr         r3, [r3]
  000fc	e2833034	 add         r3, r3, #0x34
  00100	e5933000	 ldr         r3, [r3]
  00104	e3530000	 cmp         r3, #0
  00108	0a000000	 beq         |$LN11@WatchdogRe|
  0010c	eafffff8	 b           |$LN12@WatchdogRe|
  00110		 |$LN11@WatchdogRe|

; 43   :         OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_DISABLE_SEQ2);

  00110	e59f3178	 ldr         r3, [pc, #0x178]
  00114	e5933000	 ldr         r3, [r3]
  00118	e2832048	 add         r2, r3, #0x48
  0011c	e3a03c55	 mov         r3, #0x55, 24
  00120	e3833055	 orr         r3, r3, #0x55
  00124	e5823000	 str         r3, [r2]
  00128		 |$LN10@WatchdogRe|

; 44   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00128	e59f3160	 ldr         r3, [pc, #0x160]
  0012c	e5933000	 ldr         r3, [r3]
  00130	e2833034	 add         r3, r3, #0x34
  00134	e5933000	 ldr         r3, [r3]
  00138	e3530000	 cmp         r3, #0
  0013c	0a000000	 beq         |$LN9@WatchdogRe|
  00140	eafffff8	 b           |$LN10@WatchdogRe|
  00144		 |$LN9@WatchdogRe|

; 45   :         
; 46   : 
; 47   :         // Set prescaler, so that the watcdog counter is incremented around every 1 ms (32768 Hz / 32 => 1024 Hz)
; 48   :         OUTREG32(&g_pWatchogTimerRegs->WCLR, WDOG_WCLR_PRESCALE(5) | WDOG_WCLR_PRES_ENABLE);    

  00144	e59f3144	 ldr         r3, [pc, #0x144]
  00148	e5933000	 ldr         r3, [r3]
  0014c	e2832024	 add         r2, r3, #0x24
  00150	e3a03034	 mov         r3, #0x34
  00154	e5823000	 str         r3, [r2]

; 49   :         
; 50   :         // Set reload value in both the reload register and base counter register
; 51   :         OUTREG32(&g_pWatchogTimerRegs->WLDR, (DWORD) (0-g_dwWatchdogPeriod));

  00158	e59f3138	 ldr         r3, [pc, #0x138]
  0015c	e5933000	 ldr         r3, [r3]
  00160	e2632000	 rsb         r2, r3, #0
  00164	e59f3124	 ldr         r3, [pc, #0x124]
  00168	e5933000	 ldr         r3, [r3]
  0016c	e283302c	 add         r3, r3, #0x2C
  00170	e5832000	 str         r2, [r3]

; 52   :         OUTREG32(&g_pWatchogTimerRegs->WCRR, (DWORD) (0-g_dwWatchdogPeriod));

  00174	e59f311c	 ldr         r3, [pc, #0x11C]
  00178	e5933000	 ldr         r3, [r3]
  0017c	e2632000	 rsb         r2, r3, #0
  00180	e59f3108	 ldr         r3, [pc, #0x108]
  00184	e5933000	 ldr         r3, [r3]
  00188	e2833028	 add         r3, r3, #0x28
  0018c	e5832000	 str         r2, [r3]
  00190		 |$LN8@WatchdogRe|

; 53   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00190	e59f30f8	 ldr         r3, [pc, #0xF8]
  00194	e5933000	 ldr         r3, [r3]
  00198	e2833034	 add         r3, r3, #0x34
  0019c	e5933000	 ldr         r3, [r3]
  001a0	e3530000	 cmp         r3, #0
  001a4	0a000000	 beq         |$LN7@WatchdogRe|
  001a8	eafffff8	 b           |$LN8@WatchdogRe|
  001ac		 |$LN7@WatchdogRe|
  001ac		 |$LN6@WatchdogRe|

; 54   :         
; 55   :         // Refresh the watchdog timer before starting it
; 56   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  001ac	e59f30dc	 ldr         r3, [pc, #0xDC]
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e2833034	 add         r3, r3, #0x34
  001b8	e5933000	 ldr         r3, [r3]
  001bc	e3530000	 cmp         r3, #0
  001c0	0a000000	 beq         |$LN5@WatchdogRe|
  001c4	eafffff8	 b           |$LN6@WatchdogRe|
  001c8		 |$LN5@WatchdogRe|

; 57   :         OUTREG32(&g_pWatchogTimerRegs->WTGR, INREG32(&g_pWatchogTimerRegs->WTGR) + 1);

  001c8	e59f30c0	 ldr         r3, [pc, #0xC0]
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e2833030	 add         r3, r3, #0x30
  001d4	e5933000	 ldr         r3, [r3]
  001d8	e2832001	 add         r2, r3, #1
  001dc	e59f30ac	 ldr         r3, [pc, #0xAC]
  001e0	e5933000	 ldr         r3, [r3]
  001e4	e2833030	 add         r3, r3, #0x30
  001e8	e5832000	 str         r2, [r3]

; 58   : 
; 59   :         // Start the watchdog timer
; 60   :         OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_ENABLE_SEQ1);

  001ec	e59f309c	 ldr         r3, [pc, #0x9C]
  001f0	e5933000	 ldr         r3, [r3]
  001f4	e2832048	 add         r2, r3, #0x48
  001f8	e3a03cbb	 mov         r3, #0xBB, 24
  001fc	e38330bb	 orr         r3, r3, #0xBB
  00200	e5823000	 str         r3, [r2]
  00204		 |$LN4@WatchdogRe|

; 61   :         while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00204	e59f3084	 ldr         r3, [pc, #0x84]
  00208	e5933000	 ldr         r3, [r3]
  0020c	e2833034	 add         r3, r3, #0x34
  00210	e5933000	 ldr         r3, [r3]
  00214	e3530000	 cmp         r3, #0
  00218	0a000000	 beq         |$LN3@WatchdogRe|
  0021c	eafffff8	 b           |$LN4@WatchdogRe|
  00220		 |$LN3@WatchdogRe|

; 62   :         OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_ENABLE_SEQ2);

  00220	e59f3068	 ldr         r3, [pc, #0x68]
  00224	e5933000	 ldr         r3, [r3]
  00228	e2832048	 add         r2, r3, #0x48
  0022c	e3a03b11	 mov         r3, #0x11, 22
  00230	e3833044	 orr         r3, r3, #0x44
  00234	e5823000	 str         r3, [r2]

; 63   :         
; 64   :         fWatchdogInit = TRUE;

  00238	e59f2054	 ldr         r2, [pc, #0x54]
  0023c	e3a03001	 mov         r3, #1
  00240	e5823000	 str         r3, [r2]
  00244		 |$LN13@WatchdogRe|
  00244		 |$LN2@WatchdogRe|

; 65   :     }
; 66   :     
; 67   :     // Refresh the watchdog timer
; 68   :     while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00244	e59f3044	 ldr         r3, [pc, #0x44]
  00248	e5933000	 ldr         r3, [r3]
  0024c	e2833034	 add         r3, r3, #0x34
  00250	e5933000	 ldr         r3, [r3]
  00254	e3530000	 cmp         r3, #0
  00258	0a000000	 beq         |$LN1@WatchdogRe|
  0025c	eafffff8	 b           |$LN2@WatchdogRe|
  00260		 |$LN1@WatchdogRe|

; 69   :     OUTREG32(&g_pWatchogTimerRegs->WTGR, INREG32(&g_pWatchogTimerRegs->WTGR) + 1);    

  00260	e59f3028	 ldr         r3, [pc, #0x28]
  00264	e5933000	 ldr         r3, [r3]
  00268	e2833030	 add         r3, r3, #0x30
  0026c	e5933000	 ldr         r3, [r3]
  00270	e2832001	 add         r2, r3, #1
  00274	e59f3014	 ldr         r3, [pc, #0x14]
  00278	e5933000	 ldr         r3, [r3]
  0027c	e2833030	 add         r3, r3, #0x30
  00280	e5832000	 str         r2, [r3]

; 70   : }

  00284	e28dd00c	 add         sp, sp, #0xC
  00288	e49de004	 ldr         lr, [sp], #4
  0028c	e12fff1e	 bx          lr
  00290		 |$LN19@WatchdogRe|
  00290		 |$LN20@WatchdogRe|
  00290	00000000	 DCD         |g_pWatchogTimerRegs|
  00294		 |$LN21@WatchdogRe|
  00294	00000000	 DCD         |?fWatchdogInit@?1??WatchdogRefresh@@9@9|
  00298		 |$LN22@WatchdogRe|
  00298	00000000	 DCD         |g_dwWatchdogPeriod|
  0029c		 |$LN23@WatchdogRe|
  0029c	00000000	 DCD         |g_WatchdogDevice|
  002a0		 |$M43555|

			 ENDP  ; |WatchdogRefresh|

	EXPORT	|OALWatchdogEnable|

  00010			 AREA	 |.pdata|, PDATA
|$T43567| DCD	|$LN16@OALWatchdo@2|
	DCD	0x40005403
; Function compile flags: /Odtp

  002a0			 AREA	 |.text|, CODE, ARM

  002a0		 |OALWatchdogEnable| PROC

; 86   : {

  002a0		 |$LN16@OALWatchdo@2|
  002a0	e1a0c00d	 mov         r12, sp
  002a4	e92d0001	 stmdb       sp!, {r0}
  002a8	e92d5000	 stmdb       sp!, {r12, lr}
  002ac		 |$M43564|

; 87   :     if (g_WatchdogDevice != OMAP_DEVICE_NONE)

  002ac	e59f3134	 ldr         r3, [pc, #0x134]
  002b0	e5933000	 ldr         r3, [r3]
  002b4	e3730001	 cmn         r3, #1
  002b8	0a000048	 beq         |$LN11@OALWatchdo@2|

; 88   :     {
; 89   :         if (bEnable == TRUE)

  002bc	e59d3008	 ldr         r3, [sp, #8]
  002c0	e3530001	 cmp         r3, #1
  002c4	1a000027	 bne         |$LN10@OALWatchdo@2|

; 90   :         {
; 91   :             // Enable clock
; 92   :             EnableDeviceClocks(g_WatchdogDevice, TRUE);

  002c8	e3a01001	 mov         r1, #1
  002cc	e59f3114	 ldr         r3, [pc, #0x114]
  002d0	e5930000	 ldr         r0, [r3]
  002d4	eb000000	 bl          EnableDeviceClocks
  002d8		 |$LN9@OALWatchdo@2|

; 93   : 
; 94   :             // Refresh the watchdog timer
; 95   :             while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  002d8	e59f310c	 ldr         r3, [pc, #0x10C]
  002dc	e5933000	 ldr         r3, [r3]
  002e0	e2833034	 add         r3, r3, #0x34
  002e4	e5933000	 ldr         r3, [r3]
  002e8	e3530000	 cmp         r3, #0
  002ec	0a000000	 beq         |$LN8@OALWatchdo@2|
  002f0	eafffff8	 b           |$LN9@OALWatchdo@2|
  002f4		 |$LN8@OALWatchdo@2|

; 96   :             OUTREG32(&g_pWatchogTimerRegs->WTGR, INREG32(&g_pWatchogTimerRegs->WTGR) + 1);

  002f4	e59f30f0	 ldr         r3, [pc, #0xF0]
  002f8	e5933000	 ldr         r3, [r3]
  002fc	e2833030	 add         r3, r3, #0x30
  00300	e5933000	 ldr         r3, [r3]
  00304	e2832001	 add         r2, r3, #1
  00308	e59f30dc	 ldr         r3, [pc, #0xDC]
  0030c	e5933000	 ldr         r3, [r3]
  00310	e2833030	 add         r3, r3, #0x30
  00314	e5832000	 str         r2, [r3]

; 97   : 
; 98   :             // Start Watchdog
; 99   :             OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_ENABLE_SEQ1);

  00318	e59f30cc	 ldr         r3, [pc, #0xCC]
  0031c	e5933000	 ldr         r3, [r3]
  00320	e2832048	 add         r2, r3, #0x48
  00324	e3a03cbb	 mov         r3, #0xBB, 24
  00328	e38330bb	 orr         r3, r3, #0xBB
  0032c	e5823000	 str         r3, [r2]
  00330		 |$LN7@OALWatchdo@2|

; 100  :             while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00330	e59f30b4	 ldr         r3, [pc, #0xB4]
  00334	e5933000	 ldr         r3, [r3]
  00338	e2833034	 add         r3, r3, #0x34
  0033c	e5933000	 ldr         r3, [r3]
  00340	e3530000	 cmp         r3, #0
  00344	0a000000	 beq         |$LN6@OALWatchdo@2|
  00348	eafffff8	 b           |$LN7@OALWatchdo@2|
  0034c		 |$LN6@OALWatchdo@2|

; 101  :             OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_ENABLE_SEQ2);

  0034c	e59f3098	 ldr         r3, [pc, #0x98]
  00350	e5933000	 ldr         r3, [r3]
  00354	e2832048	 add         r2, r3, #0x48
  00358	e3a03b11	 mov         r3, #0x11, 22
  0035c	e3833044	 orr         r3, r3, #0x44
  00360	e5823000	 str         r3, [r2]

; 102  :         }
; 103  :         else

  00364	ea00001d	 b           |$LN5@OALWatchdo@2|
  00368		 |$LN10@OALWatchdo@2|

; 104  :         {
; 105  :             // Ensure the timer is stopped
; 106  :             OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_DISABLE_SEQ1);

  00368	e59f307c	 ldr         r3, [pc, #0x7C]
  0036c	e5933000	 ldr         r3, [r3]
  00370	e2832048	 add         r2, r3, #0x48
  00374	e3a03caa	 mov         r3, #0xAA, 24
  00378	e38330aa	 orr         r3, r3, #0xAA
  0037c	e5823000	 str         r3, [r2]
  00380		 |$LN4@OALWatchdo@2|

; 107  :             while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  00380	e59f3064	 ldr         r3, [pc, #0x64]
  00384	e5933000	 ldr         r3, [r3]
  00388	e2833034	 add         r3, r3, #0x34
  0038c	e5933000	 ldr         r3, [r3]
  00390	e3530000	 cmp         r3, #0
  00394	0a000000	 beq         |$LN3@OALWatchdo@2|
  00398	eafffff8	 b           |$LN4@OALWatchdo@2|
  0039c		 |$LN3@OALWatchdo@2|

; 108  :             OUTREG32(&g_pWatchogTimerRegs->WSPR, WDOG_DISABLE_SEQ2);

  0039c	e59f3048	 ldr         r3, [pc, #0x48]
  003a0	e5933000	 ldr         r3, [r3]
  003a4	e2832048	 add         r2, r3, #0x48
  003a8	e3a03c55	 mov         r3, #0x55, 24
  003ac	e3833055	 orr         r3, r3, #0x55
  003b0	e5823000	 str         r3, [r2]
  003b4		 |$LN2@OALWatchdo@2|

; 109  :             while( INREG32(&g_pWatchogTimerRegs->WWPS) );

  003b4	e59f3030	 ldr         r3, [pc, #0x30]
  003b8	e5933000	 ldr         r3, [r3]
  003bc	e2833034	 add         r3, r3, #0x34
  003c0	e5933000	 ldr         r3, [r3]
  003c4	e3530000	 cmp         r3, #0
  003c8	0a000000	 beq         |$LN1@OALWatchdo@2|
  003cc	eafffff8	 b           |$LN2@OALWatchdo@2|
  003d0		 |$LN1@OALWatchdo@2|

; 110  : 
; 111  :             // Disable clock
; 112  :             EnableDeviceClocks(g_WatchdogDevice, FALSE);

  003d0	e3a01000	 mov         r1, #0
  003d4	e59f300c	 ldr         r3, [pc, #0xC]
  003d8	e5930000	 ldr         r0, [r3]
  003dc	eb000000	 bl          EnableDeviceClocks
  003e0		 |$LN5@OALWatchdo@2|
  003e0		 |$LN11@OALWatchdo@2|

; 113  :         }
; 114  :     }
; 115  : }

  003e0	e89d6000	 ldmia       sp, {sp, lr}
  003e4	e12fff1e	 bx          lr
  003e8		 |$LN17@OALWatchdo@2|
  003e8		 |$LN18@OALWatchdo@2|
  003e8	00000000	 DCD         |g_WatchdogDevice|
  003ec		 |$LN19@OALWatchdo@2|
  003ec	00000000	 DCD         |g_pWatchogTimerRegs|
  003f0		 |$M43565|

			 ENDP  ; |OALWatchdogEnable|

	END
