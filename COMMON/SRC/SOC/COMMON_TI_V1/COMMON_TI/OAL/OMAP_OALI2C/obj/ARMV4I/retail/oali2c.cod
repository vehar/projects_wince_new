; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_OALI2C\oali2c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|_bPostInit| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|s_fifoLookup| DCW 0x8
	DCW	0x10
	DCW	0x20
	DCW	0x40
	EXPORT	|??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@EHKJMBJI@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|_rgI2CDevice|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_oali2c\oali2c.c

  00000			 AREA	 |.pdata|, PDATA
|$T45281| DCD	|$LN14@GetIndexBy|
	DCD	0x40001d01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "O", 0x0, "A"
	DCB	0x0, "L", 0x0, "\\", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P"
	DCB	0x0, "_", 0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "o", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "2", 0x0, "c", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@EHKJMBJI@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "d", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetIndexByDevice| PROC

; 53   : {    

  00000		 |$LN14@GetIndexBy|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45278|

; 54   :     DWORD i=0;
; 55   :     while (_rgI2CDevice[i].device != OMAP_DEVICE_NONE)

  00004	e59f2064	 ldr         r2, [pc, #0x64]
  00008	e3a04000	 mov         r4, #0
  0000c	e5923000	 ldr         r3, [r2]
  00010	ea000004	 b           |$LN11@GetIndexBy|
  00014		 |$LL4@GetIndexBy|

; 56   :     {   
; 57   :         if (_rgI2CDevice[i].device == dev)

  00014	e1530000	 cmp         r3, r0
  00018	0a000004	 beq         |$LN10@GetIndexBy|

; 58   :         {           
; 59   :             break;
; 60   :         }
; 61   :         i++;

  0001c	e2844001	 add         r4, r4, #1
  00020	e0643184	 rsb         r3, r4, r4, lsl #3
  00024	e7923183	 ldr         r3, [r2, +r3, lsl #3]
  00028		 |$LN11@GetIndexBy|
  00028	e3730001	 cmn         r3, #1
  0002c	1afffff8	 bne         |$LL4@GetIndexBy|
  00030		 |$LN10@GetIndexBy|

; 62   :     }
; 63   : #ifndef SHIP_BUILD
; 64   :     if ((_rgI2CDevice[i].device == OMAP_DEVICE_NONE))

  00030	e0643184	 rsb         r3, r4, r4, lsl #3
  00034	e7923183	 ldr         r3, [r2, +r3, lsl #3]
  00038	e3730001	 cmn         r3, #1
  0003c	1a000005	 bne         |$LN1@GetIndexBy|

; 65   :     {
; 66   :         ERRORMSG(1,(TEXT("Device not found")));

  00040	e59f1024	 ldr         r1, [pc, #0x24]
  00044	e59f001c	 ldr         r0, [pc, #0x1C]
  00048	e3a02042	 mov         r2, #0x42
  0004c	eb000000	 bl          NKDbgPrintfW
  00050	e59f000c	 ldr         r0, [pc, #0xC]
  00054	eb000000	 bl          NKDbgPrintfW
  00058		 |$LN1@GetIndexBy|

; 67   :     }
; 68   : #endif
; 69   :     return i;
; 70   : }

  00058	e1a00004	 mov         r0, r4
  0005c	e8bd4010	 ldmia       sp!, {r4, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN15@GetIndexBy|
  00064		 |$LN16@GetIndexBy|
  00064	00000000	 DCD         |??_C@_1CC@EHKJMBJI@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@|
  00068		 |$LN17@GetIndexBy|
  00068	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0006c		 |$LN18@GetIndexBy|
  0006c	00000000	 DCD         |??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00070		 |$LN19@GetIndexBy|
  00070	00000000	 DCD         |_rgI2CDevice|
  00074		 |$M45279|

			 ENDP  ; |GetIndexByDevice|

	EXPORT	|I2CLock|
	IMPORT	|EnterCriticalSection|
	IMPORT	|INTERRUPTS_STATUS|

  00000			 AREA	 |.pdata|, PDATA
|$T45294| DCD	|$LN6@I2CLock|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CLock| PROC

; 73   : {

  00000		 |$LN6@I2CLock|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45291|
  00004	e1a04000	 mov         r4, r0

; 74   : 
; 75   :     if (_bPostInit == TRUE && INTERRUPTS_STATUS())

  00008	e59f3034	 ldr         r3, [pc, #0x34]
  0000c	e5933000	 ldr         r3, [r3]
  00010	e3530001	 cmp         r3, #1
  00014	1a000007	 bne         |$LN1@I2CLock|
  00018	eb000000	 bl          INTERRUPTS_STATUS
  0001c	e3500000	 cmp         r0, #0

; 76   :     {
; 77   :         EnterCriticalSection(&_rgI2CDevice[((I2CContext_t*)hCtx)->idI2C].cs);

  00020	15943000	 ldrne       r3, [r4]
  00024	159f2014	 ldrne       r2, [pc, #0x14]
  00028	10631183	 rsbne       r1, r3, r3, lsl #3
  0002c	12823024	 addne       r3, r2, #0x24
  00030	10830181	 addne       r0, r3, r1, lsl #3
  00034	1b000000	 blne        EnterCriticalSection
  00038		 |$LN1@I2CLock|

; 78   :     }
; 79   : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN7@I2CLock|
  00040		 |$LN8@I2CLock|
  00040	00000000	 DCD         |_rgI2CDevice|
  00044		 |$LN9@I2CLock|
  00044	00000000	 DCD         |_bPostInit|
  00048		 |$M45292|

			 ENDP  ; |I2CLock|

	EXPORT	|I2CUnlock|
	IMPORT	|LeaveCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T45305| DCD	|$LN6@I2CUnlock|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CUnlock| PROC

; 86   : {

  00000		 |$LN6@I2CUnlock|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45302|
  00004	e1a04000	 mov         r4, r0

; 87   :     if (_bPostInit == TRUE && INTERRUPTS_STATUS()) 

  00008	e59f3034	 ldr         r3, [pc, #0x34]
  0000c	e5933000	 ldr         r3, [r3]
  00010	e3530001	 cmp         r3, #1
  00014	1a000007	 bne         |$LN1@I2CUnlock|
  00018	eb000000	 bl          INTERRUPTS_STATUS
  0001c	e3500000	 cmp         r0, #0

; 88   :     {
; 89   :         LeaveCriticalSection(&_rgI2CDevice[((I2CContext_t*)hCtx)->idI2C].cs);

  00020	15943000	 ldrne       r3, [r4]
  00024	159f2014	 ldrne       r2, [pc, #0x14]
  00028	10631183	 rsbne       r1, r3, r3, lsl #3
  0002c	12823024	 addne       r3, r2, #0x24
  00030	10830181	 addne       r0, r3, r1, lsl #3
  00034	1b000000	 blne        LeaveCriticalSection
  00038		 |$LN1@I2CUnlock|

; 90   :     }
; 91   : }

  00038	e8bd4010	 ldmia       sp!, {r4, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$LN7@I2CUnlock|
  00040		 |$LN8@I2CUnlock|
  00040	00000000	 DCD         |_rgI2CDevice|
  00044		 |$LN9@I2CUnlock|
  00044	00000000	 DCD         |_bPostInit|
  00048		 |$M45303|

			 ENDP  ; |I2CUnlock|

	IMPORT	|OALGetTickCount|

  00000			 AREA	 |.pdata|, PDATA
|$T45319| DCD	|$LN7@I2CGetTick|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CGetTickCount| PROC

; 97   : {

  00000		 |$LN7@I2CGetTick|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45316|

; 98   :     return (_bPostInit == TRUE) ? OALGetTickCount() : 0;

  00004	e59f3020	 ldr         r3, [pc, #0x20]
  00008	e5933000	 ldr         r3, [r3]
  0000c	e3530001	 cmp         r3, #1
  00010	1a000002	 bne         |$LN3@I2CGetTick|
  00014	eb000000	 bl          OALGetTickCount

; 99   : }

  00018	e49de004	 ldr         lr, [sp], #4
  0001c	e12fff1e	 bx          lr
  00020		 |$LN3@I2CGetTick|

; 98   :     return (_bPostInit == TRUE) ? OALGetTickCount() : 0;

  00020	e3a00000	 mov         r0, #0

; 99   : }

  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$LN8@I2CGetTick|
  0002c		 |$LN9@I2CGetTick|
  0002c	00000000	 DCD         |_bPostInit|
  00030		 |$M45317|

			 ENDP  ; |I2CGetTickCount|

	IMPORT	|_rgScaleTable|

  00000			 AREA	 |.pdata|, PDATA
|$T45332| DCD	|$LN5@I2CSetDevi|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CSetDeviceBaudrate| PROC

; 108  : {

  00000		 |$LN5@I2CSetDevi|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45329|
  00004	e1a0e000	 mov         lr, r0

; 109  :     pDevice->currentBaudIndex = baudIndex;
; 110  :     OUTREG16(&pDevice->pI2CRegs->PSC,  _rgScaleTable[pDevice->currentBaudIndex].psc);

  00008	e59f4050	 ldr         r4, [pc, #0x50]
  0000c	e0813081	 add         r3, r1, r1, lsl #1
  00010	e59e2018	 ldr         r2, [lr, #0x18]
  00014	e0843083	 add         r3, r4, r3, lsl #1
  00018	e58e101c	 str         r1, [lr, #0x1C]
  0001c	e1d330b0	 ldrh        r3, [r3]

; 111  :     OUTREG16(&pDevice->pI2CRegs->SCLL, _rgScaleTable[pDevice->currentBaudIndex].scll);
; 112  :     OUTREG16(&pDevice->pI2CRegs->SCLH, _rgScaleTable[pDevice->currentBaudIndex].sclh);
; 113  : 
; 114  :     return TRUE;

  00020	e3a00001	 mov         r0, #1
  00024	e1c233b0	 strh        r3, [r2, #0x30]
  00028	e59e301c	 ldr         r3, [lr, #0x1C]
  0002c	e59e2018	 ldr         r2, [lr, #0x18]
  00030	e0833083	 add         r3, r3, r3, lsl #1
  00034	e0843083	 add         r3, r4, r3, lsl #1
  00038	e1d330b2	 ldrh        r3, [r3, #2]
  0003c	e1c233b4	 strh        r3, [r2, #0x34]
  00040	e59e301c	 ldr         r3, [lr, #0x1C]
  00044	e59e2018	 ldr         r2, [lr, #0x18]
  00048	e0833083	 add         r3, r3, r3, lsl #1
  0004c	e0843083	 add         r3, r4, r3, lsl #1
  00050	e1d330b4	 ldrh        r3, [r3, #4]
  00054	e1c233b8	 strh        r3, [r2, #0x38]

; 115  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN6@I2CSetDevi|
  00060		 |$LN7@I2CSetDevi|
  00060	00000000	 DCD         |_rgScaleTable|
  00064		 |$M45330|

			 ENDP  ; |I2CSetDeviceBaudrate|

	EXPORT	|I2CPollStatus|
	EXPORT	|??_C@_1KA@GOKKFLEJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAP?$AAo?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?9?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45365| DCD	|$LN18@I2CPollSta|
	DCD	0x40002c01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@GOKKFLEJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAP?$AAo?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?9?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "s", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "e", 0x0, "x", 0x0, "p", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CPollStatus| PROC

; 126  : {

  00000		 |$LN18@I2CPollSta|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M45362|
  00004	e1a06003	 mov         r6, r3
  00008	e1a07002	 mov         r7, r2
  0000c	e1a05001	 mov         r5, r1
  00010	e1a08000	 mov         r8, r0

; 127  :     BOOL rc = FALSE;
; 128  :     UINT matchTime = I2CGetTickCount() + timeout;

  00014	e59fa090	 ldr         r10, [pc, #0x90]
  00018	e3a04000	 mov         r4, #0
  0001c	e59ae000	 ldr         lr, [r10]
  00020	e35e0001	 cmp         lr, #1
  00024	1a000001	 bne         |$LN8@I2CPollSta|
  00028	eb000000	 bl          OALGetTickCount
  0002c	ea000000	 b           |$LN9@I2CPollSta|
  00030		 |$LN8@I2CPollSta|
  00030	e3a00000	 mov         r0, #0
  00034		 |$LN9@I2CPollSta|

; 129  : 
; 130  :     while ((INREG16(pReg) & mask) != val)

  00034	e1d820b0	 ldrh        r2, [r8]
  00038	e1a03805	 mov         r3, r5, lsl #16
  0003c	e0809006	 add         r9, r0, r6
  00040	e0023823	 and         r3, r2, r3, lsr #16
  00044	e1530007	 cmp         r3, r7
  00048	0a00000d	 beq         |$LN2@I2CPollSta|
  0004c	e1a06805	 mov         r6, r5, lsl #16
  00050	e1a06826	 mov         r6, r6, lsr #16
  00054		 |$LL3@I2CPollSta|
  00054	e59a3000	 ldr         r3, [r10]

; 131  :     {
; 132  :         if (I2CGetTickCount() > matchTime)

  00058	e3530001	 cmp         r3, #1
  0005c	1a000001	 bne         |$LN12@I2CPollSta|
  00060	eb000000	 bl          OALGetTickCount
  00064	ea000000	 b           |$LN13@I2CPollSta|
  00068		 |$LN12@I2CPollSta|
  00068	e3a00000	 mov         r0, #0
  0006c		 |$LN13@I2CPollSta|
  0006c	e1d830b0	 ldrh        r3, [r8]
  00070	e1500009	 cmp         r0, r9
  00074	8a000006	 bhi         |$LN15@I2CPollSta|
  00078	e0033006	 and         r3, r3, r6
  0007c	e1530007	 cmp         r3, r7
  00080	1afffff3	 bne         |$LL3@I2CPollSta|
  00084		 |$LN2@I2CPollSta|

; 140  :         }
; 141  :     }    
; 142  :     rc = TRUE;

  00084	e3a04001	 mov         r4, #1
  00088		 |$cleanUp$44740|

; 143  : 
; 144  : cleanUp:
; 145  :     return rc;
; 146  : }

  00088	e1a00004	 mov         r0, r4
  0008c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$LN15@I2CPollSta|

; 133  :         {
; 134  :             OALMSG(OAL_LOG_WARN, (
; 135  :                 L"WARN: I2C::I2CPollStatus - check has timed out actual"
; 136  :                 L"(0x%04X), expect(0x%04X)\r\n", 
; 137  :                 (INREG16(pReg) & mask), val
; 138  :                 ));

  00094	e59f000c	 ldr         r0, [pc, #0xC]
  00098	e1a02007	 mov         r2, r7
  0009c	e0031005	 and         r1, r3, r5
  000a0	eb000000	 bl          NKDbgPrintfW

; 139  :             goto cleanUp;

  000a4	eafffff7	 b           |$cleanUp$44740|
  000a8		 |$LN19@I2CPollSta|
  000a8		 |$LN20@I2CPollSta|
  000a8	00000000	 DCD         |??_C@_1KA@GOKKFLEJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAP?$AAo?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?9?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@|
  000ac		 |$LN21@I2CPollSta|
  000ac	00000000	 DCD         |_bPostInit|
  000b0		 |$M45363|

			 ENDP  ; |I2CPollStatus|

	EXPORT	|??_C@_1GK@FLELOHLG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAR?$AAe?$AAs?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45385| DCD	|$LN8@I2CResetDe|
	DCD	0x40003901

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@FLELOHLG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAR?$AAe?$AAs?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CResetDevice| PROC

; 154  : {

  00000		 |$LN8@I2CResetDe|
  00000	e92d40f0	 stmdb       sp!, {r4 - r7, lr}
  00004		 |$M45382|
  00004	e1a06000	 mov         r6, r0

; 155  :     UINT16 stat;
; 156  :     BOOL bRet = TRUE;
; 157  :     OMAP_I2C_REGS *pI2CRegs = pDevice->pI2CRegs;

  00008	e5964018	 ldr         r4, [r6, #0x18]

; 158  : 
; 159  :     // disable i2c
; 160  :     OUTREG16(&pI2CRegs->CON, 0);

  0000c	e3a07000	 mov         r7, #0

; 161  : 
; 162  :     // put i2c in reset
; 163  :     OUTREG16(&pI2CRegs->SYSC, I2C_SYSC_SRST);

  00010	e3a03002	 mov         r3, #2
  00014	e1c472b4	 strh        r7, [r4, #0x24]
  00018	e1c432b0	 strh        r3, [r4, #0x20]

; 164  : 
; 165  :     // pull i2c out of reset by setting I2C_CON_EN
; 166  :     SETREG16(&pI2CRegs->CON, I2C_CON_EN);

  0001c	e1d412b4	 ldrh        r1, [r4, #0x24]

; 167  : 
; 168  :     if (I2CPollStatus(&pI2CRegs->SYSS, I2C_SYSS_RDONE, I2C_SYSS_RDONE, 10) == FALSE)

  00020	e3a0300a	 mov         r3, #0xA
  00024	e3a02001	 mov         r2, #1
  00028	e3811902	 orr         r1, r1, #2, 18
  0002c	e1c412b4	 strh        r1, [r4, #0x24]
  00030	e3a01001	 mov         r1, #1
  00034	e2840010	 add         r0, r4, #0x10
  00038	e3a05001	 mov         r5, #1
  0003c	eb000000	 bl          I2CPollStatus
  00040	e3500000	 cmp         r0, #0
  00044	1a000002	 bne         |$LN1@I2CResetDe|

; 169  :     {
; 170  :         OALMSG(OAL_LOG_WARN, (
; 171  :             L"WARN: I2C::I2CResetDevice - failed to reset device\r\n"
; 172  :             ));

  00048	e59f0090	 ldr         r0, [pc, #0x90]
  0004c	eb000000	 bl          NKDbgPrintfW

; 173  :         bRet = FALSE;

  00050	e3a05000	 mov         r5, #0
  00054		 |$LN1@I2CResetDe|

; 174  :     }
; 175  : 
; 176  :     // disable i2c
; 177  :     OUTREG16(&pI2CRegs->CON, 0);
; 178  : 
; 179  :     // clear status
; 180  :     stat = INREG16(&pI2CRegs->STAT);

  00054	e1c472b4	 strh        r7, [r4, #0x24]
  00058	e1d430b8	 ldrh        r3, [r4, #8]

; 181  :     OUTREG16(&pI2CRegs->STAT, stat);
; 182  : 
; 183  :     // Set prescaler and low/high periods
; 184  :     I2CSetDeviceBaudrate(pDevice, pDevice->currentBaudIndex);

  0005c	e59f1078	 ldr         r1, [pc, #0x78]

; 185  : 
; 186  :     // UNDONE:
; 187  :     //   NEED remove hardcoding of thresholds
; 188  :     OUTREG16(&pI2CRegs->BUF, 
; 189  :         I2C_BUF_XTRSH(pDevice->txFifoThreshold) | 
; 190  :         I2C_BUF_RTRSH(pDevice->rxFifoThreshold)
; 191  :         );
; 192  : 
; 193  :     // configure own address
; 194  :     OUTREG16(&pI2CRegs->OA0, I2C_MASTER_CODE | pDevice->ownAddress);
; 195  : 
; 196  :     return bRet;
; 197  : }

  00060	e1a00005	 mov         r0, r5
  00064	e1c430b8	 strh        r3, [r4, #8]
  00068	e596301c	 ldr         r3, [r6, #0x1C]
  0006c	e5962018	 ldr         r2, [r6, #0x18]
  00070	e0833083	 add         r3, r3, r3, lsl #1
  00074	e0813083	 add         r3, r1, r3, lsl #1
  00078	e1d330b0	 ldrh        r3, [r3]
  0007c	e1c233b0	 strh        r3, [r2, #0x30]
  00080	e596301c	 ldr         r3, [r6, #0x1C]
  00084	e5962018	 ldr         r2, [r6, #0x18]
  00088	e0833083	 add         r3, r3, r3, lsl #1
  0008c	e0813083	 add         r3, r1, r3, lsl #1
  00090	e1d330b2	 ldrh        r3, [r3, #2]
  00094	e1c233b4	 strh        r3, [r2, #0x34]
  00098	e596301c	 ldr         r3, [r6, #0x1C]
  0009c	e5962018	 ldr         r2, [r6, #0x18]
  000a0	e0833083	 add         r3, r3, r3, lsl #1
  000a4	e0813083	 add         r3, r1, r3, lsl #1
  000a8	e1d330b4	 ldrh        r3, [r3, #4]
  000ac	e1c233b8	 strh        r3, [r2, #0x38]
  000b0	e5963010	 ldr         r3, [r6, #0x10]
  000b4	e5962014	 ldr         r2, [r6, #0x14]
  000b8	e203103f	 and         r1, r3, #0x3F
  000bc	e202303f	 and         r3, r2, #0x3F
  000c0	e1833401	 orr         r3, r3, r1, lsl #8
  000c4	e1c431b4	 strh        r3, [r4, #0x14]
  000c8	e5963004	 ldr         r3, [r6, #4]
  000cc	e3833901	 orr         r3, r3, #1, 18
  000d0	e1c432b8	 strh        r3, [r4, #0x28]
  000d4	e8bd40f0	 ldmia       sp!, {r4 - r7, lr}
  000d8	e12fff1e	 bx          lr
  000dc		 |$LN9@I2CResetDe|
  000dc		 |$LN10@I2CResetDe|
  000dc	00000000	 DCD         |_rgScaleTable|
  000e0		 |$LN11@I2CResetDe|
  000e0	00000000	 DCD         |??_C@_1GK@FLELOHLG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAR?$AAe?$AAs?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl@|
  000e4		 |$M45383|

			 ENDP  ; |I2CResetDevice|

	EXPORT	|I2CGetBufferSize|

  00000			 AREA	 |.pdata|, PDATA
|$T45399| DCD	|$LN5@I2CGetBuff|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CGetBufferSize| PROC

; 206  : {

  00000		 |$LN5@I2CGetBuff|
  00000		 |$M45396|

; 207  :     return pPacket->rgBuffers[idxBuffer].size;

  00000	e590300c	 ldr         r3, [r0, #0xC]
  00004	e7930181	 ldr         r0, [r3, +r1, lsl #3]

; 208  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M45397|

			 ENDP  ; |I2CGetBufferSize|

	EXPORT	|I2CGetPacketSize|

  00000			 AREA	 |.pdata|, PDATA
|$T45412| DCD	|$LN10@I2CGetPack|
	DCD	0x40000b00
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CGetPacketSize| PROC

; 216  : {

  00000		 |$LN10@I2CGetPack|
  00000		 |$M45409|
  00000	e1a02000	 mov         r2, r0

; 217  :     UINT i;
; 218  :     UINT totalSize = 0;
; 219  :     for (i = 0; i < pPacket->count; ++i)

  00004	e5923000	 ldr         r3, [r2]
  00008	e3a00000	 mov         r0, #0
  0000c	e1b01003	 movs        r1, r3
  00010	0a000004	 beq         |$LN1@I2CGetPack|
  00014	e592200c	 ldr         r2, [r2, #0xC]
  00018		 |$LL3@I2CGetPack|

; 220  :     {
; 221  :         totalSize += pPacket->rgBuffers[i].size;

  00018	e4923008	 ldr         r3, [r2], #8
  0001c	e2511001	 subs        r1, r1, #1
  00020	e0800003	 add         r0, r0, r3
  00024	1afffffb	 bne         |$LL3@I2CGetPack|
  00028		 |$LN1@I2CGetPack|

; 222  :     }
; 223  :     return totalSize;
; 224  : }

  00028	e12fff1e	 bx          lr
  0002c		 |$M45410|

			 ENDP  ; |I2CGetPacketSize|

	EXPORT	|OALI2CInit|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|

  00000			 AREA	 |.pdata|, PDATA
|$T45437| DCD	|$LN15@OALI2CInit|
	DCD	0x40003b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALI2CInit| PROC

; 228  : {

  00000		 |$LN15@OALI2CInit|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45434|
  00004	e1a06000	 mov         r6, r0

; 229  :     
; 230  :     OMAP_I2C_REGS  *pI2CRegs = OALPAtoUA(GetAddressByDevice(devId));

  00008	eb000000	 bl          GetAddressByDevice
  0000c	e3a01000	 mov         r1, #0
  00010	eb000000	 bl          OALPAtoVA

; 231  :     // capture i2c id
; 232  :     UINT idI2C = GetIndexByDevice(devId);

  00014	e59f40cc	 ldr         r4, [pc, #0xCC]
  00018	e1a08000	 mov         r8, r0
  0001c	e3a02000	 mov         r2, #0
  00020	e5943000	 ldr         r3, [r4]
  00024	e3730001	 cmn         r3, #1
  00028	0a000009	 beq         |$LN12@OALI2CInit|
  0002c	e1a01004	 mov         r1, r4
  00030		 |$LL6@OALI2CInit|
  00030	e5913000	 ldr         r3, [r1]
  00034	e1530006	 cmp         r3, r6
  00038	0a000005	 beq         |$LN12@OALI2CInit|
  0003c	e2822001	 add         r2, r2, #1
  00040	e0623182	 rsb         r3, r2, r2, lsl #3
  00044	e1a01004	 mov         r1, r4
  00048	e7b13183	 ldr         r3, [r1, +r3, lsl #3]!
  0004c	e3730001	 cmn         r3, #1
  00050	1afffff6	 bne         |$LL6@OALI2CInit|
  00054		 |$LN12@OALI2CInit|
  00054	e0627182	 rsb         r7, r2, r2, lsl #3
  00058	e1a05187	 mov         r5, r7, lsl #3
  0005c	e7b53004	 ldr         r3, [r5, +r4]!
  00060	e3730001	 cmn         r3, #1
  00064	1a000005	 bne         |$LN3@OALI2CInit|
  00068	e59f1074	 ldr         r1, [pc, #0x74]
  0006c	e59f006c	 ldr         r0, [pc, #0x6C]
  00070	e3a02042	 mov         r2, #0x42
  00074	eb000000	 bl          NKDbgPrintfW
  00078	e59f005c	 ldr         r0, [pc, #0x5C]
  0007c	eb000000	 bl          NKDbgPrintfW
  00080		 |$LN3@OALI2CInit|

; 233  : 
; 234  :     // store reference to i2c registers
; 235  :     I2CDevice_t *pDevice = (I2CDevice_t*)&_rgI2CDevice[idI2C];
; 236  : 
; 237  :     // Enable interface and functional clock of I2C's 
; 238  :     EnableDeviceClocks(devId, TRUE);

  00080	e3a01001	 mov         r1, #1
  00084	e1a00006	 mov         r0, r6
  00088	eb000000	 bl          EnableDeviceClocks

; 239  : 
; 240  :     // current baud rate is always initially the default baud rate
; 241  :     _rgI2CDevice[idI2C].currentBaudIndex = _rgI2CDevice[idI2C].defaultBaudIndex;

  0008c	e0844187	 add         r4, r4, r7, lsl #3
  00090	e5943008	 ldr         r3, [r4, #8]

; 242  : 
; 243  :     // initialize i2c
; 244  :     pDevice->pI2CRegs = pI2CRegs;
; 245  :     I2CResetDevice(pDevice);

  00094	e1a00005	 mov         r0, r5
  00098	e584301c	 str         r3, [r4, #0x1C]
  0009c	e5858018	 str         r8, [r5, #0x18]
  000a0	eb000000	 bl          I2CResetDevice

; 246  : 
; 247  :     // update fifo threshold size
; 248  :     _rgI2CDevice[idI2C].fifoSize = INREG32(&pI2CRegs->BUFSTAT);

  000a4	e5983040	 ldr         r3, [r8, #0x40]

; 249  :     _rgI2CDevice[idI2C].fifoSize &= I2C_BUFSTAT_FIFODEPTH_MASK;
; 250  :     _rgI2CDevice[idI2C].fifoSize >>= I2C_BUFSTAT_FIFODEPTH_SHIFT;
; 251  :     _rgI2CDevice[idI2C].fifoSize = s_fifoLookup[_rgI2CDevice[idI2C].fifoSize];

  000a8	e59f2028	 ldr         r2, [pc, #0x28]

; 252  : 
; 253  :     // release clocks
; 254  :     EnableDeviceClocks(devId, FALSE);

  000ac	e3a01000	 mov         r1, #0
  000b0	e1a03803	 mov         r3, r3, lsl #16
  000b4	e1a03f23	 mov         r3, r3, lsr #30
  000b8	e0823083	 add         r3, r2, r3, lsl #1
  000bc	e1d330b0	 ldrh        r3, [r3]
  000c0	e1a00006	 mov         r0, r6
  000c4	e5843020	 str         r3, [r4, #0x20]
  000c8	eb000000	 bl          EnableDeviceClocks

; 255  : 
; 256  :     return TRUE;

  000cc	e3a00001	 mov         r0, #1

; 257  : }

  000d0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000d4	e12fff1e	 bx          lr
  000d8		 |$LN16@OALI2CInit|
  000d8		 |$LN17@OALI2CInit|
  000d8	00000000	 DCD         |s_fifoLookup|
  000dc		 |$LN18@OALI2CInit|
  000dc	00000000	 DCD         |??_C@_1CC@EHKJMBJI@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@|
  000e0		 |$LN19@OALI2CInit|
  000e0	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000e4		 |$LN20@OALI2CInit|
  000e4	00000000	 DCD         |??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000e8		 |$LN21@OALI2CInit|
  000e8	00000000	 DCD         |_rgI2CDevice|
  000ec		 |$M45435|

			 ENDP  ; |OALI2CInit|

	EXPORT	|OALI2CPostInit|
	IMPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T45455| DCD	|$LN9@OALI2CPost|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALI2CPostInit| PROC

; 262  : {

  00000		 |$LN9@OALI2CPost|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M45452|

; 263  :     // create mutex objects
; 264  :     int i=0;
; 265  : 
; 266  :     while (_rgI2CDevice[i].device != OMAP_DEVICE_NONE)    

  00004	e59f4050	 ldr         r4, [pc, #0x50]
  00008	e3a05000	 mov         r5, #0
  0000c	e5943000	 ldr         r3, [r4]
  00010	e3730001	 cmn         r3, #1
  00014	0a000009	 beq         |$LN1@OALI2CPost|
  00018	e3a02000	 mov         r2, #0
  0001c	e2846024	 add         r6, r4, #0x24
  00020		 |$LL2@OALI2CPost|

; 267  :     {
; 268  :         InitializeCriticalSection(&_rgI2CDevice[i].cs);

  00020	e0820006	 add         r0, r2, r6
  00024	eb000000	 bl          InitializeCriticalSection

; 269  :         i++;

  00028	e2855001	 add         r5, r5, #1
  0002c	e0653185	 rsb         r3, r5, r5, lsl #3
  00030	e1a02183	 mov         r2, r3, lsl #3
  00034	e7923004	 ldr         r3, [r2, +r4]
  00038	e3730001	 cmn         r3, #1
  0003c	1afffff7	 bne         |$LL2@OALI2CPost|
  00040		 |$LN1@OALI2CPost|

; 270  :     }
; 271  : 
; 272  :     _bPostInit = TRUE;

  00040	e59f3010	 ldr         r3, [pc, #0x10]
  00044	e3a02001	 mov         r2, #1

; 273  :     return TRUE;

  00048	e3a00001	 mov         r0, #1
  0004c	e5832000	 str         r2, [r3]

; 274  : }

  00050	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00054	e12fff1e	 bx          lr
  00058		 |$LN10@OALI2CPost|
  00058		 |$LN11@OALI2CPost|
  00058	00000000	 DCD         |_bPostInit|
  0005c		 |$LN12@OALI2CPost|
  0005c	00000000	 DCD         |_rgI2CDevice|
  00060		 |$M45453|

			 ENDP  ; |OALI2CPostInit|

	EXPORT	|I2CSetSlaveAddress|

  00000			 AREA	 |.pdata|, PDATA
|$T45469| DCD	|$LN5@I2CSetSlav|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CSetSlaveAddress| PROC

; 278  : {

  00000		 |$LN5@I2CSetSlav|
  00000		 |$M45466|

; 279  :     ((I2CContext_t*)hCtx)->slaveAddress = slaveAddress;

  00000	e5801010	 str         r1, [r0, #0x10]

; 280  :    
; 281  :     return TRUE;

  00004	e3a00001	 mov         r0, #1

; 282  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M45467|

			 ENDP  ; |I2CSetSlaveAddress|

	EXPORT	|I2COpen|
	IMPORT	|I2CDefaultI2CTimeout|
	IMPORT	|OALLocalAlloc|

  00000			 AREA	 |.pdata|, PDATA
|$T45494| DCD	|$LN17@I2COpen|
	DCD	0x40003301
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2COpen| PROC

; 286  : {    

  00000		 |$LN17@I2COpen|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45491|
  00004	e1a07000	 mov         r7, r0

; 287  :     UINT idI2C;
; 288  :     
; 289  :     void* pData = LocalAlloc(LPTR, sizeof(I2CContext_t));

  00008	e3a01018	 mov         r1, #0x18
  0000c	e3a00040	 mov         r0, #0x40
  00010	eb000000	 bl          OALLocalAlloc
  00014	e1b05000	 movs        r5, r0

; 290  :     I2CContext_t *pCtx = (I2CContext_t*)pData;
; 291  : 
; 292  :         
; 293  :     if (pData == NULL) return NULL;

  00018	03a05000	 moveq       r5, #0
  0001c	0a000022	 beq         |$LN2@I2COpen|

; 294  : 
; 295  :     idI2C = GetIndexByDevice(devId);

  00020	e59f60a0	 ldr         r6, [pc, #0xA0]
  00024	e3a04000	 mov         r4, #0
  00028	e5963000	 ldr         r3, [r6]
  0002c	ea000004	 b           |$LN14@I2COpen|
  00030		 |$LL7@I2COpen|
  00030	e1530007	 cmp         r3, r7
  00034	0a000004	 beq         |$LN13@I2COpen|
  00038	e2844001	 add         r4, r4, #1
  0003c	e0643184	 rsb         r3, r4, r4, lsl #3
  00040	e7963183	 ldr         r3, [r6, +r3, lsl #3]
  00044		 |$LN14@I2COpen|
  00044	e3730001	 cmn         r3, #1
  00048	1afffff8	 bne         |$LL7@I2COpen|
  0004c		 |$LN13@I2COpen|
  0004c	e0648184	 rsb         r8, r4, r4, lsl #3
  00050	e1a07188	 mov         r7, r8, lsl #3
  00054	e7b73006	 ldr         r3, [r7, +r6]!
  00058	e3730001	 cmn         r3, #1
  0005c	1a000005	 bne         |$LN4@I2COpen|
  00060	e59f105c	 ldr         r1, [pc, #0x5C]
  00064	e59f0054	 ldr         r0, [pc, #0x54]
  00068	e3a02042	 mov         r2, #0x42
  0006c	eb000000	 bl          NKDbgPrintfW
  00070	e59f0044	 ldr         r0, [pc, #0x44]
  00074	eb000000	 bl          NKDbgPrintfW
  00078		 |$LN4@I2COpen|

; 296  :     //OALMSG(OAL_LOG_WARN, (L"I2C: I2COpen bus %d\n", idI2C));
; 297  : 
; 298  :     // initialize structure
; 299  :     pCtx->idI2C     = idI2C;

  00078	e5854000	 str         r4, [r5]

; 300  :     pCtx->device    = _rgI2CDevice[idI2C].device;

  0007c	e5973000	 ldr         r3, [r7]

; 301  :     pCtx->baudIndex = _rgI2CDevice[idI2C].defaultBaudIndex;

  00080	e0862188	 add         r2, r6, r8, lsl #3

; 302  :     pCtx->timeOut   = I2CDefaultI2CTimeout;

  00084	e59f102c	 ldr         r1, [pc, #0x2C]
  00088	e5853004	 str         r3, [r5, #4]
  0008c	e5923008	 ldr         r3, [r2, #8]

; 303  :     pCtx->slaveAddress = 0;

  00090	e3a02000	 mov         r2, #0

; 304  :     pCtx->subAddressMode = I2C_SUBADDRESS_MODE_8;

  00094	e3a00001	 mov         r0, #1
  00098	e5853008	 str         r3, [r5, #8]
  0009c	e5913000	 ldr         r3, [r1]
  000a0	e5852010	 str         r2, [r5, #0x10]
  000a4	e5850014	 str         r0, [r5, #0x14]
  000a8	e585300c	 str         r3, [r5, #0xC]

; 305  :     return pCtx;

  000ac		 |$LN2@I2COpen|

; 306  : }

  000ac	e1a00005	 mov         r0, r5
  000b0	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000b4	e12fff1e	 bx          lr
  000b8		 |$LN18@I2COpen|
  000b8		 |$LN19@I2COpen|
  000b8	00000000	 DCD         |I2CDefaultI2CTimeout|
  000bc		 |$LN20@I2COpen|
  000bc	00000000	 DCD         |??_C@_1CC@EHKJMBJI@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@|
  000c0		 |$LN21@I2COpen|
  000c0	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  000c4		 |$LN22@I2COpen|
  000c4	00000000	 DCD         |??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  000c8		 |$LN23@I2COpen|
  000c8	00000000	 DCD         |_rgI2CDevice|
  000cc		 |$M45492|

			 ENDP  ; |I2COpen|

	EXPORT	|I2CClose|
	IMPORT	|OALLocalFree|

  00000			 AREA	 |.pdata|, PDATA
|$T45508| DCD	|$LN5@I2CClose|
	DCD	0x40000401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CClose| PROC

; 313  : {

  00000		 |$LN5@I2CClose|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45505|

; 314  :     LocalFree(hI2C);

  00004	eb000000	 bl          OALLocalFree

; 315  : 
; 316  : }

  00008	e49de004	 ldr         lr, [sp], #4
  0000c	e12fff1e	 bx          lr
  00010		 |$M45506|

			 ENDP  ; |I2CClose|


  00000			 AREA	 |.pdata|, PDATA
|$T45539| DCD	|$LN20@I2CReprogr|
	DCD	0x40002801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CReprogramDevice| PROC

; 700  : {

  00000		 |$LN20@I2CReprogr|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45536|
  00004	e1a07000	 mov         r7, r0

; 701  :     UINT startTime;
; 702  :     BOOL result = FALSE;
; 703  :     I2CDevice_t *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  00008	e5973000	 ldr         r3, [r7]
  0000c	e59f2088	 ldr         r2, [pc, #0x88]

; 704  :     OMAP_I2C_REGS *pI2CRegs = pDevice->pI2CRegs;
; 705  : 
; 706  :     // Set slave address
; 707  :     OUTREG16(&pI2CRegs->SA, pCtx->slaveAddress);
; 708  : 
; 709  :     startTime = I2CGetTickCount();

  00010	e59f6080	 ldr         r6, [pc, #0x80]
  00014	e0633183	 rsb         r3, r3, r3, lsl #3
  00018	e0828183	 add         r8, r2, r3, lsl #3
  0001c	e5985018	 ldr         r5, [r8, #0x18]
  00020	e5973010	 ldr         r3, [r7, #0x10]
  00024	e5962000	 ldr         r2, [r6]
  00028	e1c532bc	 strh        r3, [r5, #0x2C]
  0002c	e3520001	 cmp         r2, #1
  00030	1a000002	 bne         |$LN9@I2CReprogr|
  00034	eb000000	 bl          OALGetTickCount
  00038	e1a04000	 mov         r4, r0
  0003c	ea00000f	 b           |$LN1@I2CReprogr|
  00040		 |$LN9@I2CReprogr|
  00040	e3a04000	 mov         r4, #0

; 710  :     while (((INREG16(&pI2CRegs->STAT) & I2C_STAT_BB) != 0))

  00044	ea00000d	 b           |$LN1@I2CReprogr|
  00048		 |$LL4@I2CReprogr|

; 704  :     OMAP_I2C_REGS *pI2CRegs = pDevice->pI2CRegs;
; 705  : 
; 706  :     // Set slave address
; 707  :     OUTREG16(&pI2CRegs->SA, pCtx->slaveAddress);
; 708  : 
; 709  :     startTime = I2CGetTickCount();

  00048	e5963000	 ldr         r3, [r6]

; 711  :     {        
; 712  :         if ((I2CGetTickCount() - startTime) > pCtx->timeOut)

  0004c	e3530001	 cmp         r3, #1
  00050	1a000001	 bne         |$LN13@I2CReprogr|
  00054	eb000000	 bl          OALGetTickCount
  00058	ea000000	 b           |$LN14@I2CReprogr|
  0005c		 |$LN13@I2CReprogr|
  0005c	e3a00000	 mov         r0, #0
  00060		 |$LN14@I2CReprogr|
  00060	e597200c	 ldr         r2, [r7, #0xC]
  00064	e0403004	 sub         r3, r0, r4
  00068	e1530002	 cmp         r3, r2
  0006c	9a000003	 bls         |$LN1@I2CReprogr|

; 713  :         {
; 714  :             // reset the I2C controller
; 715  :             result = I2CResetDevice(pDevice);            

  00070	e1a00008	 mov         r0, r8
  00074	eb000000	 bl          I2CResetDevice
  00078	e3500000	 cmp         r0, #0

; 716  :             OALMSG(OAL_LOG_ERROR, (L"ERROR: I2CReprogramDevice: "
; 717  :                 L"Bus remains locked -- resetting I2C controller 0x%02x\r\n",
; 718  :                 pCtx->slaveAddress
; 719  :                 ));
; 720  :             if (result == FALSE)

  0007c	0a000003	 beq         |$cleanUp$44971|
  00080		 |$LN1@I2CReprogr|

; 710  :     while (((INREG16(&pI2CRegs->STAT) & I2C_STAT_BB) != 0))

  00080	e1d530b8	 ldrh        r3, [r5, #8]
  00084	e3130a01	 tst         r3, #1, 20
  00088	1affffee	 bne         |$LL4@I2CReprogr|

; 721  :             {
; 722  :                 goto cleanUp;
; 723  :             }
; 724  :         }
; 725  :     }
; 726  : 
; 727  :     result = TRUE;

  0008c	e3a00001	 mov         r0, #1
  00090		 |$cleanUp$44971|

; 728  : 
; 729  : cleanUp:
; 730  :     return result;
; 731  : }

  00090	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN21@I2CReprogr|
  00098		 |$LN22@I2CReprogr|
  00098	00000000	 DCD         |_bPostInit|
  0009c		 |$LN23@I2CReprogr|
  0009c	00000000	 DCD         |_rgI2CDevice|
  000a0		 |$M45537|

			 ENDP  ; |I2CReprogramDevice|

	EXPORT	|??_C@_1FK@IKKDNAB@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAk?$AAI?$AA2?$AAC?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CJ?$AA?0?$AA?5?$AAS@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@MFOBAEKO@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?1?$AA?1?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AAr?$AAc?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@LOLPOGCG@?$AA?$AN?$AA?5?$AAs?$AAt?$AAa?$AAt?$AA?5?$AA?$CG?$AA?5?$AAI?$AA2?$AAC?$AA_?$AAS?$AAT?$AAA?$AAT?$AA_?$AAA?$AAR?$AAD?$AAY?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@HBEPGNLG@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAp?$AAI?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AAn?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?5?$AA?$CG?$AA?5?$AAI?$AA2?$AAC@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BI@BOAJFLLJ@?$AA?$AN?$AA?5?$AAs?$AAt?$AAa?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@IJMKBHAJ@?$AA?$AN?$AA?5?$AA?$CK?$AAp?$AAI?$AA2?$AAC?$AAR?$AAe?$AAg?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@NCNOFIBL@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| [ DATA ] ; `string'
	IMPORT	|memcpy|

  00000			 AREA	 |.pdata|, PDATA
|$T45680| DCD	|$LN105@I2CTransac|
	DCD	0x40016302

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@IKKDNAB@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAk?$AAI?$AA2?$AAC?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CJ?$AA?0?$AA?5?$AAS@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "!", 0x0, "=", 0x0, " ", 0x0, "k", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, "S", 0x0, "u", 0x0, "c", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ")", 0x0, ",", 0x0, " "
	DCB	0x0, "S", 0x0, "o", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@MFOBAEKO@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?1?$AA?1?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AAr?$AAc?$AA?3@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "/", 0x0, "/", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, ",", 0x0, "r", 0x0, "c"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@LOLPOGCG@?$AA?$AN?$AA?5?$AAs?$AAt?$AAa?$AAt?$AA?5?$AA?$CG?$AA?5?$AAI?$AA2?$AAC?$AA_?$AAS?$AAT?$AAA?$AAT?$AA_?$AAA?$AAR?$AAD?$AAY?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, " "
	DCB	0x0, "&", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "_"
	DCB	0x0, "S", 0x0, "T", 0x0, "A", 0x0, "T", 0x0, "_", 0x0, "A"
	DCB	0x0, "R", 0x0, "D", 0x0, "Y", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@HBEPGNLG@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAp?$AAI?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AAn?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?5?$AA?$CG?$AA?5?$AAI?$AA2?$AAC@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "(", 0x0, "p", 0x0, "I"
	DCB	0x0, "n", 0x0, "f", 0x0, "o", 0x0, "-", 0x0, ">", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "_", 0x0, "m", 0x0, "a", 0x0, "s"
	DCB	0x0, "k", 0x0, " ", 0x0, "&", 0x0, " ", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, "_", 0x0, "C", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "O", 0x0, "P", 0x0, "M", 0x0, "O", 0x0, "D", 0x0, "E"
	DCB	0x0, "_", 0x0, "H", 0x0, "S", 0x0, ")", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BI@BOAJFLLJ@?$AA?$AN?$AA?5?$AAs?$AAt?$AAa?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@IJMKBHAJ@?$AA?$AN?$AA?5?$AA?$CK?$AAp?$AAI?$AA2?$AAC?$AAR?$AAe?$AAg?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "*", 0x0, "p", 0x0, "I", 0x0, "2", 0x0, "C"
	DCB	0x0, "R", 0x0, "e", 0x0, "g", 0x0, "s", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@NCNOFIBL@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, "-"
	DCB	0x0, ">", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CTransaction| PROC

; 736  : {

  00000		 |$LN105@I2CTransac|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd080	 sub         sp, sp, #0x80
  00008		 |$M45677|
  00008	e1a0b001	 mov         r11, r1
  0000c	e58d0058	 str         r0, [sp, #0x58]

; 737  :     UINT16                  stat;
; 738  :     UINT                    con_mask;
; 739  : 
; 740  :     BOOL                    bHSMode;
; 741  : 
; 742  :     UINT                    maxTime;
; 743  :     UINT                    startTime;
; 744  : 
; 745  :     UCHAR                  *pData = NULL;
; 746  :     I2C_PACKET_INFO_t      *pPacket = NULL;    
; 747  :     UINT                    idxBuffer, idxPacket;
; 748  :     UINT                    copyBufferCount, copyPacketCount;
; 749  :     UINT                    remainingInBuffer, remainingInPacket;
; 750  : 
; 751  :     UINT                    maxFifoSize;
; 752  :     UINT                    TxFifoThreshold, RxFifoThreshold;
; 753  : 
; 754  :     I2CResult_e             rc = kI2CRetry;
; 755  :     I2CDevice_t            *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  00010	e59b3000	 ldr         r3, [r11]
  00014	e59fa56c	 ldr         r10, [pc, #0x56C]

; 756  :     OMAP_I2C_REGS          *pI2CRegs = _rgI2CDevice[pCtx->idI2C].pI2CRegs;
; 757  : 
; 758  :     OALLog(L"\r *pI2CRegs %d\r\n", *pI2CRegs);

  00018	e3a01000	 mov         r1, #0
  0001c	e063e183	 rsb         lr, r3, r3, lsl #3
  00020	e08a318e	 add         r3, r10, lr, lsl #3
  00024	e5939018	 ldr         r9, [r3, #0x18]
  00028	e3a03000	 mov         r3, #0
  0002c	e58d3050	 str         r3, [sp, #0x50]
  00030	e3a03002	 mov         r3, #2
  00034	e58d306c	 str         r3, [sp, #0x6C]
  00038	e08a318e	 add         r3, r10, lr, lsl #3
  0003c	e58d104c	 str         r1, [sp, #0x4C]
  00040	e28d0000	 add         r0, sp, #0
  00044	e3a0204a	 mov         r2, #0x4A
  00048	e289100c	 add         r1, r9, #0xC
  0004c	e58d3068	 str         r3, [sp, #0x68]
  00050	e58d9054	 str         r9, [sp, #0x54]
  00054	eb000000	 bl          memcpy
  00058	e5d94008	 ldrb        r4, [r9, #8]
  0005c	e5d93009	 ldrb        r3, [r9, #9]
  00060	e5d96000	 ldrb        r6, [r9]
  00064	e5d92001	 ldrb        r2, [r9, #1]
  00068	e5d95004	 ldrb        r5, [r9, #4]
  0006c	e5d9e005	 ldrb        lr, [r9, #5]
  00070	e1840403	 orr         r0, r4, r3, lsl #8
  00074	e59d3054	 ldr         r3, [sp, #0x54]
  00078	e5d97002	 ldrb        r7, [r9, #2]
  0007c	e5d98006	 ldrb        r8, [r9, #6]
  00080	e5d9900a	 ldrb        r9, [r9, #0xA]
  00084	e5d34003	 ldrb        r4, [r3, #3]
  00088	e1862402	 orr         r2, r6, r2, lsl #8
  0008c	e5d3600b	 ldrb        r6, [r3, #0xB]
  00090	e185140e	 orr         r1, r5, lr, lsl #8
  00094	e5d35007	 ldrb        r5, [r3, #7]
  00098	e1823807	 orr         r3, r2, r7, lsl #16
  0009c	e180e809	 orr         lr, r0, r9, lsl #16
  000a0	e59f04dc	 ldr         r0, [pc, #0x4DC]
  000a4	e1812808	 orr         r2, r1, r8, lsl #16
  000a8	e1831c04	 orr         r1, r3, r4, lsl #24
  000ac	e18e3c06	 orr         r3, lr, r6, lsl #24
  000b0	e1822c05	 orr         r2, r2, r5, lsl #24
  000b4	eb000000	 bl          NKDbgPrintfW

; 759  : 
; 760  :     OALLog(L"\r Testing I2CTransaction() ---------->\r\n");

  000b8	e59f04c0	 ldr         r0, [pc, #0x4C0]
  000bc	eb000000	 bl          NKDbgPrintfW

; 761  :     // try to reprogram device
; 762  :     if (I2CReprogramDevice(pCtx) == FALSE)

  000c0	e59b3000	 ldr         r3, [r11]
  000c4	e59f74a0	 ldr         r7, [pc, #0x4A0]
  000c8	e59b2010	 ldr         r2, [r11, #0x10]
  000cc	e0633183	 rsb         r3, r3, r3, lsl #3
  000d0	e08a6183	 add         r6, r10, r3, lsl #3
  000d4	e5965018	 ldr         r5, [r6, #0x18]
  000d8	e5973000	 ldr         r3, [r7]
  000dc	e1c522bc	 strh        r2, [r5, #0x2C]
  000e0	e3530001	 cmp         r3, #1
  000e4	1a000002	 bne         |$LN60@I2CTransac|
  000e8	eb000000	 bl          OALGetTickCount
  000ec	e1a04000	 mov         r4, r0
  000f0	ea00000f	 b           |$LN52@I2CTransac|
  000f4		 |$LN60@I2CTransac|
  000f4	e3a04000	 mov         r4, #0
  000f8	ea00000d	 b           |$LN52@I2CTransac|
  000fc		 |$LL55@I2CTransac|
  000fc	e5973000	 ldr         r3, [r7]
  00100	e3530001	 cmp         r3, #1
  00104	1a000001	 bne         |$LN64@I2CTransac|
  00108	eb000000	 bl          OALGetTickCount
  0010c	ea000000	 b           |$LN65@I2CTransac|
  00110		 |$LN64@I2CTransac|
  00110	e3a00000	 mov         r0, #0
  00114		 |$LN65@I2CTransac|
  00114	e59b200c	 ldr         r2, [r11, #0xC]
  00118	e0403004	 sub         r3, r0, r4
  0011c	e1530002	 cmp         r3, r2
  00120	9a000003	 bls         |$LN52@I2CTransac|
  00124	e1a00006	 mov         r0, r6
  00128	eb000000	 bl          I2CResetDevice
  0012c	e3500000	 cmp         r0, #0
  00130	0a000101	 beq         |$LN99@I2CTransac|
  00134		 |$LN52@I2CTransac|
  00134	e1d530b8	 ldrh        r3, [r5, #8]
  00138	e3130a01	 tst         r3, #1, 20
  0013c	1affffee	 bne         |$LL55@I2CTransac|

; 763  :     {
; 764  :         OALMSG(OAL_LOG_ERROR, (L"ERROR: OALI2CTransaction: "
; 765  :             L"Unable to program i2c device\r\n"
; 766  :             ));
; 767  :         goto cleanUp;
; 768  :     }
; 769  : 
; 770  :     // check for high speed mode
; 771  :     bHSMode = (pInfo->con_mask & I2C_CON_OPMODE_HS) != 0;

  00140	e59d3058	 ldr         r3, [sp, #0x58]

; 772  : 
; 773  :     OALLog(L"\r Testing (pInfo->con_mask & I2C_CON_OPMODE_HS): %d\r\n", bHSMode);

  00144	e59f0430	 ldr         r0, [pc, #0x430]
  00148		 |$cleanUp$45589|
  00148	e5933004	 ldr         r3, [r3, #4]
  0014c	e3130a01	 tst         r3, #1, 20
  00150	13a0a001	 movne       r10, #1
  00154	03a0a000	 moveq       r10, #0
  00158	e1a0100a	 mov         r1, r10
  0015c	eb000000	 bl          NKDbgPrintfW

; 774  : 
; 775  :     // clear status
; 776  :     stat = INREG16(&pI2CRegs->STAT);

  00160	e59d5054	 ldr         r5, [sp, #0x54]

; 777  :     OALLog(L"\r stat %d\r\n", stat);

  00164	e59f040c	 ldr         r0, [pc, #0x40C]
  00168	e1d540b8	 ldrh        r4, [r5, #8]
  0016c	e1a01004	 mov         r1, r4
  00170	eb000000	 bl          NKDbgPrintfW

; 778  :     
; 779  :     OUTREG16(&pI2CRegs->STAT, stat);
; 780  :     
; 781  : 
; 782  :     // get timeout
; 783  :     maxTime = pCtx->timeOut;
; 784  : 
; 785  :     // get fifo size
; 786  :     maxFifoSize = pDevice->fifoSize;
; 787  : 
; 788  :     // get fifo thresholds
; 789  :     RxFifoThreshold = pDevice->rxFifoThreshold;
; 790  :     TxFifoThreshold = pDevice->txFifoThreshold;
; 791  : 
; 792  :     // clear all FIFO's
; 793  :     SETREG16(&pI2CRegs->BUF, I2C_BUF_TXFIFO_CLR | I2C_BUF_RXFIFO_CLR);

  00174	e1c540b8	 strh        r4, [r5, #8]
  00178	e1d521b4	 ldrh        r2, [r5, #0x14]
  0017c	e3a03901	 mov         r3, #1, 18

; 794  : 
; 795  :     // initialize for first operation
; 796  :     //
; 797  :     idxPacket = 0;
; 798  :     idxBuffer = 0;
; 799  :     remainingInPacket = 0;
; 800  :     remainingInBuffer = 0;
; 801  :     startTime = I2CGetTickCount();

  00180	e3833040	 orr         r3, r3, #0x40
  00184	e1823003	 orr         r3, r2, r3
  00188	e59b200c	 ldr         r2, [r11, #0xC]
  0018c	e5971000	 ldr         r1, [r7]
  00190	e3a09000	 mov         r9, #0
  00194	e58d2078	 str         r2, [sp, #0x78]
  00198	e59d2068	 ldr         r2, [sp, #0x68]
  0019c	e3a07000	 mov         r7, #0
  001a0	e3a08000	 mov         r8, #0
  001a4	e5924020	 ldr         r4, [r2, #0x20]
  001a8	e5920010	 ldr         r0, [r2, #0x10]
  001ac	e5922014	 ldr         r2, [r2, #0x14]
  001b0	e1c531b4	 strh        r3, [r5, #0x14]
  001b4	e3a03000	 mov         r3, #0
  001b8	e58d2070	 str         r2, [sp, #0x70]
  001bc	e58d3060	 str         r3, [sp, #0x60]
  001c0	e58d4068	 str         r4, [sp, #0x68]
  001c4	e58d0074	 str         r0, [sp, #0x74]
  001c8	e3510001	 cmp         r1, #1
  001cc	1a000002	 bne         |$LN68@I2CTransac|
  001d0	eb000000	 bl          OALGetTickCount
  001d4	e1a0b000	 mov         r11, r0
  001d8	ea000000	 b           |$LN69@I2CTransac|
  001dc		 |$LN68@I2CTransac|
  001dc	e3a0b000	 mov         r11, #0
  001e0		 |$LN69@I2CTransac|

; 802  : 
; 803  :     // operation starts with an ARDY event
; 804  :     stat = I2C_STAT_ARDY;
; 805  : 	
; 806  :     /* Enable I2C first, there is an issue to set CON En bit together with other
; 807  :         bits because of timing issue */
; 808  :     OUTREG16(&pI2CRegs->CON, I2C_CON_EN); 

  001e0	e3a03902	 mov         r3, #2, 18
  001e4	e1c532b4	 strh        r3, [r5, #0x24]
  001e8	e3a03000	 mov         r3, #0
  001ec	e58d3064	 str         r3, [sp, #0x64]
  001f0	e3a03b11	 mov         r3, #0x11, 22
  001f4	e3a02b0a	 mov         r2, #0xA, 22
  001f8	e3833010	 orr         r3, r3, #0x10
  001fc	e3822008	 orr         r2, r2, #8
  00200	e58d307c	 str         r3, [sp, #0x7C]
  00204	e3a06004	 mov         r6, #4
  00208	e58d205c	 str         r2, [sp, #0x5C]
  0020c		 |$LL38@I2CTransac|

; 809  : 	
; 810  :     do
; 811  :     {
; 812  :         // check for errors
; 813  :         if (stat & (I2C_STAT_NACK | I2C_STAT_AL | I2C_STAT_AERR))

  0020c	e3160083	 tst         r6, #0x83
  00210	1a0000c5	 bne         |$LN93@I2CTransac|

; 833  :             break;
; 834  :         }
; 835  : 
; 836  :         // sent data
; 837  :         if (stat & (I2C_STAT_XDR | I2C_STAT_XRDY | I2C_STAT_XUDF))

  00214	e016e003	 ands        lr, r6, r3
  00218	0a000031	 beq         |$LN34@I2CTransac|

; 838  :         {            
; 839  :             if (remainingInPacket && pPacket->opType == kI2C_Write)

  0021c	e3570000	 cmp         r7, #0
  00220	0a00002e	 beq         |$LN27@I2CTransac|
  00224	e59d0050	 ldr         r0, [sp, #0x50]
  00228	e5903004	 ldr         r3, [r0, #4]
  0022c	e3530001	 cmp         r3, #1
  00230	1a00002a	 bne         |$LN27@I2CTransac|

; 840  :             {
; 841  :                 // determine number of bytes to copy
; 842  :                 if (stat & I2C_STAT_XUDF)

  00234	e3160b01	 tst         r6, #1, 22

; 843  :                 {
; 844  :                     copyPacketCount = maxFifoSize;

  00238	11a02004	 movne       r2, r4
  0023c	1a000004	 bne         |$LN29@I2CTransac|

; 845  :                 }
; 846  :                 else if (stat & I2C_STAT_XDR)

  00240	e3160901	 tst         r6, #1, 18

; 847  :                 {
; 848  :                     copyPacketCount = INREG16(&pI2CRegs->BUFSTAT);

  00244	11d534b0	 ldrneh      r3, [r5, #0x40]

; 849  :                     copyPacketCount &= I2C_BUFSTAT_TXSTAT_MASK;

  00248	1203203f	 andne       r2, r3, #0x3F

; 850  :                     copyPacketCount >>= I2C_BUFSTAT_TXSTAT_SHIFT;
; 851  :                 }                
; 852  :                 else 
; 853  :                 {
; 854  :                     copyPacketCount = TxFifoThreshold;

  0024c	059d3070	 ldreq       r3, [sp, #0x70]
  00250	01a02003	 moveq       r2, r3
  00254		 |$LN29@I2CTransac|

; 855  :                 }
; 856  : 
; 857  :                 // only write expected amount
; 858  :                 copyPacketCount = min(copyPacketCount, remainingInPacket); 
; 859  : 
; 860  :                 // update counters
; 861  :                 remainingInPacket -= copyPacketCount;
; 862  :                 pPacket->result += copyPacketCount;

  00254	e5903008	 ldr         r3, [r0, #8]
  00258	e1520007	 cmp         r2, r7
  0025c	21a02007	 movcs       r2, r7

; 863  :                 while (copyPacketCount)

  00260	e0833002	 add         r3, r3, r2
  00264	e5803008	 str         r3, [r0, #8]
  00268	e0477002	 sub         r7, r7, r2
  0026c	e3520000	 cmp         r2, #0
  00270	0a000019	 beq         |$LN101@I2CTransac|

; 883  :                     {
; 884  :                         pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  00274	e59d404c	 ldr         r4, [sp, #0x4C]
  00278		 |$LL28@I2CTransac|

; 864  :                 {
; 865  :                     // only write up to what is remaining in current buffer
; 866  :                     copyBufferCount = min(copyPacketCount , remainingInBuffer);

  00278	e1520008	 cmp         r2, r8
  0027c	31a01002	 movcc       r1, r2
  00280	21a01008	 movcs       r1, r8

; 867  : 
; 868  :                     // update buffer counter
; 869  :                     copyPacketCount -= copyBufferCount;

  00284	e0422001	 sub         r2, r2, r1

; 870  :                     remainingInBuffer -= copyBufferCount;

  00288	e0488001	 sub         r8, r8, r1

; 871  : 
; 872  :                     
; 873  :                     // copy all data to fifo
; 874  :                     while (copyBufferCount)

  0028c	e3510000	 cmp         r1, #0
  00290	0a000004	 beq         |$LN25@I2CTransac|
  00294		 |$LL26@I2CTransac|

; 875  :                     {                        
; 876  :                         OUTREG8(&pI2CRegs->DATA, *pData);

  00294	e4d43001	 ldrb        r3, [r4], #1

; 877  :                         ++pData;
; 878  :                         --copyBufferCount;

  00298	e2511001	 subs        r1, r1, #1
  0029c	e5c5301c	 strb        r3, [r5, #0x1C]
  002a0	1afffffb	 bne         |$LL26@I2CTransac|

; 875  :                     {                        
; 876  :                         OUTREG8(&pI2CRegs->DATA, *pData);

  002a4	e58d404c	 str         r4, [sp, #0x4C]
  002a8		 |$LN25@I2CTransac|

; 879  :                     }
; 880  : 
; 881  :                     // update to next buffer if necessary
; 882  :                     if (remainingInBuffer == 0 && ++idxBuffer < pPacket->count)

  002a8	e3580000	 cmp         r8, #0
  002ac	1a000006	 bne         |$LN24@I2CTransac|
  002b0	e5903000	 ldr         r3, [r0]
  002b4	e2899001	 add         r9, r9, #1
  002b8	e1590003	 cmp         r9, r3
  002bc	3590300c	 ldrcc       r3, [r0, #0xC]
  002c0	30833189	 addcc       r3, r3, r9, lsl #3

; 883  :                     {
; 884  :                         pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  002c4	35934004	 ldrcc       r4, [r3, #4]

; 885  :                         remainingInBuffer = I2CGetBufferSize(pPacket, idxBuffer);

  002c8	35938000	 ldrcc       r8, [r3]
  002cc		 |$LN24@I2CTransac|

; 863  :                 while (copyPacketCount)

  002cc	e3520000	 cmp         r2, #0
  002d0	1affffe8	 bne         |$LL28@I2CTransac|

; 883  :                     {
; 884  :                         pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  002d4	e58d404c	 str         r4, [sp, #0x4C]
  002d8	e59d4068	 ldr         r4, [sp, #0x68]
  002dc		 |$LN101@I2CTransac|

; 802  : 
; 803  :     // operation starts with an ARDY event
; 804  :     stat = I2C_STAT_ARDY;
; 805  : 	
; 806  :     /* Enable I2C first, there is an issue to set CON En bit together with other
; 807  :         bits because of timing issue */
; 808  :     OUTREG16(&pI2CRegs->CON, I2C_CON_EN); 

  002dc	e59d205c	 ldr         r2, [sp, #0x5C]
  002e0		 |$LN27@I2CTransac|

; 886  :                     }
; 887  :                 }
; 888  :             }            
; 889  :             OUTREG16(&pI2CRegs->STAT, stat & (I2C_STAT_XDR | I2C_STAT_XRDY | I2C_STAT_XUDF));

  002e0	e1c5e0b8	 strh        lr, [r5, #8]
  002e4		 |$LN34@I2CTransac|

; 890  :         }
; 891  : 
; 892  :         // received data
; 893  :         if ((stat & (I2C_STAT_RDR | I2C_STAT_RRDY | I2C_STAT_ROVR)))

  002e4	e016e002	 ands        lr, r6, r2
  002e8	0a000030	 beq         |$LN23@I2CTransac|

; 894  :         {
; 895  :             if (remainingInPacket && pPacket->opType == kI2C_Read)

  002ec	e3570000	 cmp         r7, #0
  002f0	0a00002d	 beq         |$LN16@I2CTransac|
  002f4	e59d0050	 ldr         r0, [sp, #0x50]
  002f8	e5903004	 ldr         r3, [r0, #4]
  002fc	e3530000	 cmp         r3, #0
  00300	1a000029	 bne         |$LN16@I2CTransac|

; 896  :             {
; 897  :                 // determine number of bytes to copy
; 898  :                 if (stat & I2C_STAT_ROVR)

  00304	e3160b02	 tst         r6, #2, 22

; 899  :                 {
; 900  :                     copyPacketCount = maxFifoSize;

  00308	11a02004	 movne       r2, r4
  0030c	1a000005	 bne         |$LN18@I2CTransac|

; 901  :                 }
; 902  :                 else if (stat & I2C_STAT_RDR)

  00310	e3160a02	 tst         r6, #2, 20

; 903  :                 {
; 904  :                     copyPacketCount = INREG16(&pI2CRegs->BUFSTAT);

  00314	11d534b0	 ldrneh      r3, [r5, #0x40]

; 905  :                     copyPacketCount &= I2C_BUFSTAT_RXSTAT_MASK;
; 906  :                     copyPacketCount >>= I2C_BUFSTAT_RXSTAT_SHIFT;

  00318	11a03903	 movne       r3, r3, lsl #18
  0031c	11a02d23	 movne       r2, r3, lsr #26

; 907  :                 }                
; 908  :                 else
; 909  :                 {
; 910  :                     copyPacketCount = RxFifoThreshold;

  00320	059d3074	 ldreq       r3, [sp, #0x74]
  00324	01a02003	 moveq       r2, r3
  00328		 |$LN18@I2CTransac|

; 911  :                 }
; 912  : 
; 913  :                 // only read expected amount
; 914  :                 copyPacketCount = min(copyPacketCount, remainingInPacket); 
; 915  : 
; 916  :                 // update counters
; 917  :                 remainingInPacket -= copyPacketCount;
; 918  :                 pPacket->result += copyPacketCount;

  00328	e5903008	 ldr         r3, [r0, #8]
  0032c	e1520007	 cmp         r2, r7
  00330	21a02007	 movcs       r2, r7

; 919  :                 while (copyPacketCount)

  00334	e0833002	 add         r3, r3, r2
  00338	e5803008	 str         r3, [r0, #8]
  0033c	e0477002	 sub         r7, r7, r2
  00340	e3520000	 cmp         r2, #0
  00344	0a000018	 beq         |$LN16@I2CTransac|

; 938  :                     {
; 939  :                         pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  00348	e59d404c	 ldr         r4, [sp, #0x4C]
  0034c		 |$LL17@I2CTransac|

; 920  :                 {
; 921  :                     // only write up to what is remaining in current buffer
; 922  :                     copyBufferCount = min(copyPacketCount , remainingInBuffer);

  0034c	e1520008	 cmp         r2, r8
  00350	31a01002	 movcc       r1, r2
  00354	21a01008	 movcs       r1, r8

; 923  : 
; 924  :                     // update buffer counter
; 925  :                     copyPacketCount -= copyBufferCount;

  00358	e0422001	 sub         r2, r2, r1

; 926  :                     remainingInBuffer -= copyBufferCount;

  0035c	e0488001	 sub         r8, r8, r1

; 927  : 
; 928  :                     // copy all data to fifo
; 929  :                     while (copyBufferCount)

  00360	e3510000	 cmp         r1, #0
  00364	0a000004	 beq         |$LN14@I2CTransac|
  00368		 |$LL15@I2CTransac|

; 930  :                     {
; 931  :                         *pData = INREG8(&pI2CRegs->DATA);

  00368	e5d5301c	 ldrb        r3, [r5, #0x1C]

; 932  :                         ++pData;
; 933  :                         --copyBufferCount;

  0036c	e2511001	 subs        r1, r1, #1
  00370	e4c43001	 strb        r3, [r4], #1
  00374	1afffffb	 bne         |$LL15@I2CTransac|
  00378	e58d404c	 str         r4, [sp, #0x4C]
  0037c		 |$LN14@I2CTransac|

; 934  :                     }                   
; 935  : 
; 936  :                     // update to next buffer if necessary
; 937  :                     if (remainingInBuffer == 0 && ++idxBuffer < pPacket->count)

  0037c	e3580000	 cmp         r8, #0
  00380	1a000006	 bne         |$LN13@I2CTransac|
  00384	e5903000	 ldr         r3, [r0]
  00388	e2899001	 add         r9, r9, #1
  0038c	e1590003	 cmp         r9, r3
  00390	3590300c	 ldrcc       r3, [r0, #0xC]
  00394	30833189	 addcc       r3, r3, r9, lsl #3

; 938  :                     {
; 939  :                         pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  00398	35934004	 ldrcc       r4, [r3, #4]

; 940  :                         remainingInBuffer = I2CGetBufferSize(pPacket, idxBuffer);

  0039c	35938000	 ldrcc       r8, [r3]
  003a0		 |$LN13@I2CTransac|

; 919  :                 while (copyPacketCount)

  003a0	e3520000	 cmp         r2, #0
  003a4	1affffe8	 bne         |$LL17@I2CTransac|

; 938  :                     {
; 939  :                         pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  003a8	e58d404c	 str         r4, [sp, #0x4C]
  003ac		 |$LN16@I2CTransac|

; 941  :                     }
; 942  :                 }
; 943  :             }
; 944  :             OUTREG16(&pI2CRegs->STAT, stat & (I2C_STAT_RDR | I2C_STAT_RRDY | I2C_STAT_ROVR));

  003ac	e1c5e0b8	 strh        lr, [r5, #8]
  003b0		 |$LN23@I2CTransac|

; 945  :         }
; 946  : 
; 947  :         // packet complete
; 948  :         if (stat & I2C_STAT_ARDY)

  003b0	e2163004	 ands        r3, r6, #4

; 1070 :     OUTREG16(&pI2CRegs->STAT, stat);
; 1071 : 
; 1072 :     OUTREG16(&pI2CRegs->CON, 0);
; 1073 : 
; 1074 :     return rc;
; 1075 : }

  003b4	0a000034	 beq         |$LN100@I2CTransac|
  003b8	e59f01b4	 ldr         r0, [pc, #0x1B4]
  003bc	e2061004	 and         r1, r6, #4
  003c0	eb000000	 bl          NKDbgPrintfW
  003c4	e3a03004	 mov         r3, #4
  003c8	e1c530b8	 strh        r3, [r5, #8]
  003cc	e59d3058	 ldr         r3, [sp, #0x58]
  003d0	e59de060	 ldr         lr, [sp, #0x60]
  003d4	e5930000	 ldr         r0, [r3]
  003d8	e15e0000	 cmp         lr, r0
  003dc	2a00004f	 bcs         |$LN11@I2CTransac|
  003e0	e5933008	 ldr         r3, [r3, #8]
  003e4	e59d1064	 ldr         r1, [sp, #0x64]
  003e8	e28ee001	 add         lr, lr, #1
  003ec	e58de060	 str         lr, [sp, #0x60]
  003f0	e0834001	 add         r4, r3, r1
  003f4	e594200c	 ldr         r2, [r4, #0xC]
  003f8	e2811010	 add         r1, r1, #0x10
  003fc	e5943000	 ldr         r3, [r4]
  00400	e58d1064	 str         r1, [sp, #0x64]
  00404	e5921004	 ldr         r1, [r2, #4]
  00408	e5928000	 ldr         r8, [r2]
  0040c	e3a09000	 mov         r9, #0
  00410	e58d104c	 str         r1, [sp, #0x4C]
  00414	e58d4050	 str         r4, [sp, #0x50]
  00418	e3530000	 cmp         r3, #0
  0041c	e3a07000	 mov         r7, #0
  00420	9a000004	 bls         |$LN76@I2CTransac|
  00424	e1a01003	 mov         r1, r3
  00428		 |$LL78@I2CTransac|
  00428	e4923008	 ldr         r3, [r2], #8
  0042c	e2511001	 subs        r1, r1, #1
  00430	e0877003	 add         r7, r7, r3
  00434	1afffffb	 bne         |$LL78@I2CTransac|

; 949  :         {
; 950  :             OALLog(L"\r stat & I2C_STAT_ARDY %d\r\n", stat & I2C_STAT_ARDY);
; 951  : 
; 952  :             // this notificaiton is needed to progress to next packet
; 953  :             OUTREG16(&pI2CRegs->STAT, I2C_STAT_ARDY);
; 954  : 
; 955  :             // move to next transaction            
; 956  :             if (idxPacket < pInfo->count)
; 957  :             {            
; 958  :                 // get next packet
; 959  :                 //                
; 960  :                 pPacket = &pInfo->rgPackets[idxPacket];
; 961  :                 ++idxPacket;
; 962  : 
; 963  :                 // initialize packet info
; 964  :                 idxBuffer = 0;
; 965  :                 pData = pPacket->rgBuffers[idxBuffer].pBuffer;
; 966  :                 remainingInBuffer = I2CGetBufferSize(pPacket, idxBuffer);
; 967  :                 remainingInPacket = I2CGetPacketSize(pPacket);

  00438		 |$LN76@I2CTransac|

; 968  : 
; 969  :                 // Start transaction                
; 970  :                 con_mask = I2C_CON_EN | I2C_CON_STT | pInfo->con_mask;

  00438	e59d3058	 ldr         r3, [sp, #0x58]

; 971  :                 if (pPacket->opType == kI2C_Write) con_mask |= I2C_CON_TRX;                

  0043c	e5942004	 ldr         r2, [r4, #4]
  00440	e3a05902	 mov         r5, #2, 18
  00444	e5933004	 ldr         r3, [r3, #4]
  00448	e3851001	 orr         r1, r5, #1
  0044c	e3520001	 cmp         r2, #1
  00450	e1833001	 orr         r3, r3, r1
  00454	e59d5054	 ldr         r5, [sp, #0x54]
  00458	03833c02	 orreq       r3, r3, #2, 24

; 972  :                 if (idxPacket == pInfo->count) con_mask |= I2C_CON_STP;

  0045c	e15e0000	 cmp         lr, r0
  00460	03833002	 orreq       r3, r3, #2

; 973  :                 OUTREG16(&pI2CRegs->CON, con_mask); 

  00464	e1c532b4	 strh        r3, [r5, #0x24]

; 974  :                 OUTREG16(&pI2CRegs->CNT, remainingInPacket);

  00468	e1c571b8	 strh        r7, [r5, #0x18]

; 975  : 
; 976  :                 ASSERT(remainingInPacket != 0);
; 977  : 
; 978  :                 // if writing to bus fill-up tx fifo to avoid underflows
; 979  :                 pPacket->result = 0;
; 980  :                 if (pPacket->opType == kI2C_Write)

  0046c	e5943004	 ldr         r3, [r4, #4]
  00470	e3a02000	 mov         r2, #0
  00474	e5842008	 str         r2, [r4, #8]
  00478	e3530001	 cmp         r3, #1
  0047c	1a000003	 bne         |$LN8@I2CTransac|

; 981  :                 {
; 982  :                     stat = I2C_STAT_XDR | I2C_STAT_XRDY | I2C_STAT_XUDF;

  00480	e3a03b11	 mov         r3, #0x11, 22
  00484	e3836010	 orr         r6, r3, #0x10

; 983  :                     continue;

  00488	ea000015	 b           |$LN37@I2CTransac|
  0048c		 |$LN100@I2CTransac|

; 1070 :     OUTREG16(&pI2CRegs->STAT, stat);
; 1071 : 
; 1072 :     OUTREG16(&pI2CRegs->CON, 0);
; 1073 : 
; 1074 :     return rc;
; 1075 : }

  0048c	e59d4050	 ldr         r4, [sp, #0x50]
  00490		 |$LN8@I2CTransac|

; 990  :                 break;
; 991  :             }
; 992  :         }
; 993  :         OALLog(L"\r Testing // packet complete,rc: %d\r\n",rc); //Ray 13-10-16

  00490	e59f00d8	 ldr         r0, [pc, #0xD8]
  00494	e3a01002	 mov         r1, #2
  00498	eb000000	 bl          NKDbgPrintfW

; 994  :         
; 995  :         // handle possible glitches on the i2c bus or ill behaved i2c device
; 996  :         if (((stat == I2C_STAT_BF) || (stat == (I2C_STAT_BF | I2C_STAT_BB))) && 
; 997  :             (remainingInPacket > 0))

  0049c	e3560c01	 cmp         r6, #1, 24
  004a0	0a000001	 beq         |$LN5@I2CTransac|
  004a4	e3560c11	 cmp         r6, #0x11, 24
  004a8	1a000001	 bne         |$LN6@I2CTransac|
  004ac		 |$LN5@I2CTransac|
  004ac	e3570000	 cmp         r7, #0
  004b0	1a000022	 bne         |$LN98@I2CTransac|
  004b4		 |$LN6@I2CTransac|

; 998  :         {
; 999  :             // reprogram and try again
; 1000 :             DEBUGMSG(OAL_LOG_WARN && stat == (I2C_STAT_BF | I2C_STAT_BB), 
; 1001 :                 (L"WARN: TransactI2CPacket: Lost transaction state "
; 1002 :                 L"bus is both busy and free!! address 0x%02x, stat = 0x%x\r\n",
; 1003 :                 pCtx->slaveAddress, stat
; 1004 :                 ));
; 1005 : 
; 1006 :             // reprogram and try again
; 1007 :             DEBUGMSG(OAL_LOG_WARN && stat == I2C_STAT_BF, 
; 1008 :                 (L"WARN: TransactI2CPacket: Lost transaction state "
; 1009 :                 L"with address 0x%02x, stat = 0x%x\r\n",
; 1010 :                 pCtx->slaveAddress, stat
; 1011 :                 ));
; 1012 : 
; 1013 :             break;
; 1014 :         }
; 1015 : 
; 1016 :         // get current status
; 1017 :         stat = INREG16(&pI2CRegs->STAT);

  004b4	e1d560b8	 ldrh        r6, [r5, #8]

; 1018 : 
; 1019 :         // workaround to support HS I2C
; 1020 :         // for high speed mode ARDY is not triggered all the time. 
; 1021 :         // we need to spoof this for the high speed case
; 1022 :         if (bHSMode && remainingInPacket == 0) 

  004b8	e35a0000	 cmp         r10, #0
  004bc	0a000008	 beq         |$LN37@I2CTransac|
  004c0	e3570000	 cmp         r7, #0
  004c4	1a000006	 bne         |$LN37@I2CTransac|

; 1023 :         {
; 1024 :             // check buffer status to determine if all data is completely drained
; 1025 :             // before continuing to next packet            
; 1026 :             if (pPacket->opType == kI2C_Write)

  004c8	e5943004	 ldr         r3, [r4, #4]
  004cc	e3530001	 cmp         r3, #1

; 1027 :             {
; 1028 :                 copyPacketCount = INREG16(&pI2CRegs->BUFSTAT);

  004d0	01d534b0	 ldreqh      r3, [r5, #0x40]

; 1029 :                 copyPacketCount &= I2C_BUFSTAT_TXSTAT_MASK;
; 1030 :                 copyPacketCount >>= I2C_BUFSTAT_TXSTAT_SHIFT;
; 1031 :                 if (copyPacketCount == pPacket->result) stat |= I2C_STAT_ARDY; 

  004d4	05942008	 ldreq       r2, [r4, #8]
  004d8	0203303f	 andeq       r3, r3, #0x3F
  004dc	01530002	 cmpeq       r3, r2
  004e0	03866004	 orreq       r6, r6, #4
  004e4		 |$LN37@I2CTransac|

; 1032 :             }                       
; 1033 :         }
; 1034 :     } while ((I2CGetTickCount() - startTime) < maxTime);

  004e4	e59f3080	 ldr         r3, [pc, #0x80]
  004e8	e5933000	 ldr         r3, [r3]
  004ec	e3530001	 cmp         r3, #1
  004f0	1a000001	 bne         |$LN83@I2CTransac|
  004f4	eb000000	 bl          OALGetTickCount
  004f8	ea000000	 b           |$LN84@I2CTransac|
  004fc		 |$LN83@I2CTransac|
  004fc	e3a00000	 mov         r0, #0
  00500		 |$LN84@I2CTransac|
  00500	e59d2078	 ldr         r2, [sp, #0x78]
  00504	e040300b	 sub         r3, r0, r11
  00508	e1530002	 cmp         r3, r2
  0050c	2a00000b	 bcs         |$LN98@I2CTransac|
  00510	e59d307c	 ldr         r3, [sp, #0x7C]
  00514	e59d4068	 ldr         r4, [sp, #0x68]
  00518	e59d205c	 ldr         r2, [sp, #0x5C]
  0051c	eaffff3a	 b           |$LL38@I2CTransac|
  00520		 |$LN11@I2CTransac|

; 984  :                 }
; 985  :             }
; 986  :             else
; 987  :             {
; 988  :                 // if we get here then all packets went through successfully
; 989  :                 rc = kI2CSuccess;

  00520	e3a03000	 mov         r3, #0
  00524	e58d306c	 str         r3, [sp, #0x6C]
  00528		 |$cleanUp$45003|

; 1035 : 
; 1036 : cleanUp:
; 1037 :     if (rc != kI2CSuccess)

  00528	ea000006	 b           |$LN1@I2CTransac|
  0052c		 |$LN93@I2CTransac|

; 814  :         {
; 815  :             // Reset i2c controller
; 816  :             DEBUGMSG(OAL_LOG_WARN && (stat & I2C_STAT_NACK), (L"WARN: TransactI2CPacket: "
; 817  :                 L"No ACK from slave device with address 0x%02x, stat = 0x%x\r\n",
; 818  :                 pCtx->slaveAddress, stat
; 819  :                 ));
; 820  : 
; 821  :             DEBUGMSG(OAL_LOG_WARN && (stat & I2C_STAT_AL), (L"WARN: TransactI2CPacket: "
; 822  :                 L"Lost arbitration with address 0x%02x, stat = 0x%x\r\n",
; 823  :                 pCtx->slaveAddress, stat
; 824  :                 ));
; 825  : 
; 826  :             DEBUGMSG(OAL_LOG_WARN && (stat & I2C_STAT_AERR), (L"WARN: TransactI2CPacket: "
; 827  :                 L"Access error with address 0x%02x, stat = 0x%x\r\n",
; 828  :                 pCtx->slaveAddress, stat
; 829  :                 ));
; 830  : 
; 831  :             
; 832  :             pPacket->result = 0;

  0052c	e59d3050	 ldr         r3, [sp, #0x50]
  00530	e3a02000	 mov         r2, #0
  00534	e5832008	 str         r2, [r3, #8]
  00538	ea000000	 b           |$LN98@I2CTransac|
  0053c		 |$LN99@I2CTransac|

; 971  :                 if (pPacket->opType == kI2C_Write) con_mask |= I2C_CON_TRX;                

  0053c	e59d5054	 ldr         r5, [sp, #0x54]
  00540		 |$LN98@I2CTransac|

; 1038 :     {
; 1039 :         OALLog(L"\r Testing (rc != kI2CSuccess), So Error...\r\n");

  00540	e59f0020	 ldr         r0, [pc, #0x20]
  00544	eb000000	 bl          NKDbgPrintfW
  00548		 |$LN1@I2CTransac|

; 1040 :         
; 1041 :         
; 1042 :         /*
; 1043 :         #define SHOW_I2C_REG(reg)   OALMSG(OAL_LOG_WARN, (L"I2C: %s = 0x%04x\n", TEXT(# reg), pI2CRegs->reg));
; 1044 :         SHOW_I2C_REG(REV)
; 1045 :         SHOW_I2C_REG(IE)
; 1046 :         SHOW_I2C_REG(STAT)
; 1047 :         SHOW_I2C_REG(WE)
; 1048 :         SHOW_I2C_REG(SYSS)
; 1049 :         SHOW_I2C_REG(BUF)
; 1050 :         SHOW_I2C_REG(CNT)
; 1051 :         //SHOW_I2C_REG(DATA)
; 1052 :         SHOW_I2C_REG(SYSC)
; 1053 :         SHOW_I2C_REG(CON)
; 1054 :         SHOW_I2C_REG(OA0)
; 1055 :         SHOW_I2C_REG(SA)
; 1056 :         SHOW_I2C_REG(PSC)
; 1057 :         SHOW_I2C_REG(SCLL)
; 1058 :         SHOW_I2C_REG(SCLH)
; 1059 :         SHOW_I2C_REG(SYSTEST)
; 1060 :         SHOW_I2C_REG(BUFSTAT)
; 1061 :         SHOW_I2C_REG(OA1)
; 1062 :         SHOW_I2C_REG(OA2)
; 1063 :         SHOW_I2C_REG(OA3)
; 1064 :         SHOW_I2C_REG(ACTOA)
; 1065 :         SHOW_I2C_REG(SBLOCK)
; 1066 :         */
; 1067 :     }       
; 1068 : 
; 1069 :     stat = INREG16(&pI2CRegs->STAT);

  00548	e1d530b8	 ldrh        r3, [r5, #8]

; 1070 :     OUTREG16(&pI2CRegs->STAT, stat);
; 1071 : 
; 1072 :     OUTREG16(&pI2CRegs->CON, 0);
; 1073 : 
; 1074 :     return rc;
; 1075 : }

  0054c	e59d006c	 ldr         r0, [sp, #0x6C]
  00550	e1c530b8	 strh        r3, [r5, #8]
  00554	e3a03000	 mov         r3, #0
  00558	e1c532b4	 strh        r3, [r5, #0x24]
  0055c	e28dd080	 add         sp, sp, #0x80
  00560	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00564	e12fff1e	 bx          lr
  00568		 |$LN106@I2CTransac|
  00568		 |$LN107@I2CTransac|
  00568	00000000	 DCD         |??_C@_1FK@IKKDNAB@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAk?$AAI?$AA2?$AAC?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CJ?$AA?0?$AA?5?$AAS@|
  0056c		 |$LN108@I2CTransac|
  0056c	00000000	 DCD         |_bPostInit|
  00570		 |$LN109@I2CTransac|
  00570	00000000	 DCD         |??_C@_1EM@MFOBAEKO@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?1?$AA?1?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AAr?$AAc?$AA?3@|
  00574		 |$LN110@I2CTransac|
  00574	00000000	 DCD         |??_C@_1DI@LOLPOGCG@?$AA?$AN?$AA?5?$AAs?$AAt?$AAa?$AAt?$AA?5?$AA?$CG?$AA?5?$AAI?$AA2?$AAC?$AA_?$AAS?$AAT?$AAA?$AAT?$AA_?$AAA?$AAR?$AAD?$AAY?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00578		 |$LN111@I2CTransac|
  00578	00000000	 DCD         |??_C@_1BI@BOAJFLLJ@?$AA?$AN?$AA?5?$AAs?$AAt?$AAa?$AAt?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  0057c		 |$LN112@I2CTransac|
  0057c	00000000	 DCD         |??_C@_1GM@HBEPGNLG@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAp?$AAI?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AAn?$AA_?$AAm?$AAa?$AAs?$AAk?$AA?5?$AA?$CG?$AA?5?$AAI?$AA2?$AAC@|
  00580		 |$LN113@I2CTransac|
  00580	00000000	 DCD         |??_C@_1FC@NCNOFIBL@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@|
  00584		 |$LN114@I2CTransac|
  00584	00000000	 DCD         |??_C@_1CC@IJMKBHAJ@?$AA?$AN?$AA?5?$AA?$CK?$AAp?$AAI?$AA2?$AAC?$AAR?$AAe?$AAg?$AAs?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00588		 |$LN115@I2CTransac|
  00588	00000000	 DCD         |_rgI2CDevice|
  0058c		 |$M45678|

			 ENDP  ; |I2CTransaction|

	EXPORT	|I2CSetSubAddressMode|

  00000			 AREA	 |.pdata|, PDATA
|$T45699| DCD	|$LN5@I2CSetSubA|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CSetSubAddressMode| PROC

; 1083 : {

  00000		 |$LN5@I2CSetSubA|
  00000		 |$M45696|

; 1084 :     I2CContext_t* pCtx =  (I2CContext_t*) hContext;
; 1085 :     pCtx->subAddressMode = subAddressMode;

  00000	e5801014	 str         r1, [r0, #0x14]

; 1086 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M45697|

			 ENDP  ; |I2CSetSubAddressMode|

	EXPORT	|I2CSetBaudIndex|

  00000			 AREA	 |.pdata|, PDATA
|$T45708| DCD	|$LN5@I2CSetBaud|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CSetBaudIndex| PROC

; 1094 : {

  00000		 |$LN5@I2CSetBaud|
  00000		 |$M45705|

; 1095 :     I2CContext_t* pCtx =  (I2CContext_t*) hContext;
; 1096 :     pCtx->baudIndex = baudIndex;

  00000	e5801008	 str         r1, [r0, #8]

; 1097 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M45706|

			 ENDP  ; |I2CSetBaudIndex|

	EXPORT	|I2CSetTimeout|

  00000			 AREA	 |.pdata|, PDATA
|$T45717| DCD	|$LN5@I2CSetTime|
	DCD	0x40000200
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CSetTimeout| PROC

; 1105 : {

  00000		 |$LN5@I2CSetTime|
  00000		 |$M45714|

; 1106 :     I2CContext_t* pCtx =  (I2CContext_t*) hContext;
; 1107 :     pCtx->timeOut = timeOut;

  00000	e580100c	 str         r1, [r0, #0xC]

; 1108 : }

  00004	e12fff1e	 bx          lr
  00008		 |$M45715|

			 ENDP  ; |I2CSetTimeout|

	EXPORT	|I2CSetManualDriveMode|

  00000			 AREA	 |.pdata|, PDATA
|$T45727| DCD	|$LN7@I2CSetManu|
	DCD	0x40002401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CSetManualDriveMode| PROC

; 1113 : {

  00000		 |$LN7@I2CSetManu|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45724|
  00004	e3510000	 cmp         r1, #0
  00008	e1a04000	 mov         r4, r0

; 1114 :     I2CContext_t* pCtx =  (I2CContext_t*) hCtx;    
; 1115 :     I2CDevice_t  *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  0000c	e5943000	 ldr         r3, [r4]
  00010	e59f2074	 ldr         r2, [pc, #0x74]
  00014	e0633183	 rsb         r3, r3, r3, lsl #3
  00018	e0825183	 add         r5, r2, r3, lsl #3

; 1116 : 
; 1117 : 
; 1118 :     if (fOn)

  0001c	0a00000c	 beq         |$LN2@I2CSetManu|

; 1119 :     {
; 1120 :         // Get hardware
; 1121 :         I2CLock(pCtx);

  00020	eb000000	 bl          I2CLock

; 1122 : 
; 1123 :         EnableDeviceClocks(pCtx->device, TRUE);

  00024	e5940004	 ldr         r0, [r4, #4]
  00028	e3a01001	 mov         r1, #1
  0002c	eb000000	 bl          EnableDeviceClocks

; 1124 :         OUTREG16(&pDevice->pI2CRegs->CON, I2C_CON_EN);        

  00030	e5953018	 ldr         r3, [r5, #0x18]
  00034	e3a02902	 mov         r2, #2, 18
  00038	e3a01a0b	 mov         r1, #0xB, 20
  0003c	e1c322b4	 strh        r2, [r3, #0x24]

; 1125 :         OUTREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_ST_EN | I2C_SYSTEMTEST_TMODE3 | I2C_SYSTEST_SCL_O | I2C_SYSTEST_SDA_O);

  00040	e5952018	 ldr         r2, [r5, #0x18]
  00044	e3813005	 orr         r3, r1, #5
  00048	e1c233bc	 strh        r3, [r2, #0x3C]

; 1135 : 
; 1136 :     }
; 1137 : }

  0004c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN2@I2CSetManu|

; 1126 :     }
; 1127 :     else
; 1128 :     {
; 1129 :         OUTREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEMTEST_TMODE3 | I2C_SYSTEST_SCL_O | I2C_SYSTEST_SDA_O);

  00054	e5952018	 ldr         r2, [r5, #0x18]
  00058	e3a03a03	 mov         r3, #3, 20
  0005c	e3833005	 orr         r3, r3, #5
  00060	e1c233bc	 strh        r3, [r2, #0x3C]

; 1130 :         OUTREG16(&pDevice->pI2CRegs->CON,0);

  00064	e5953018	 ldr         r3, [r5, #0x18]
  00068	e3a02000	 mov         r2, #0

; 1131 :         EnableDeviceClocks(pCtx->device, FALSE);

  0006c	e3a01000	 mov         r1, #0
  00070	e1c322b4	 strh        r2, [r3, #0x24]
  00074	e5940004	 ldr         r0, [r4, #4]
  00078	eb000000	 bl          EnableDeviceClocks

; 1132 : 
; 1133 :         // Release hardware
; 1134 :         I2CUnlock(pCtx);

  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          I2CUnlock

; 1135 : 
; 1136 :     }
; 1137 : }

  00084	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN8@I2CSetManu|
  0008c		 |$LN9@I2CSetManu|
  0008c	00000000	 DCD         |_rgI2CDevice|
  00090		 |$M45725|

			 ENDP  ; |I2CSetManualDriveMode|

	EXPORT	|I2CDriveSCL|

  00000			 AREA	 |.pdata|, PDATA
|$T45739| DCD	|$LN7@I2CDriveSC|
	DCD	0x40001100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CDriveSCL| PROC

; 1139 : {

  00000		 |$LN7@I2CDriveSC|
  00000		 |$M45736|
  00000	e3510000	 cmp         r1, #0

; 1140 :     I2CContext_t* pCtx =  (I2CContext_t*) hCtx;    
; 1141 :     I2CDevice_t  *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  00004	e5903000	 ldr         r3, [r0]
  00008	e59f2030	 ldr         r2, [pc, #0x30]
  0000c	e0633183	 rsb         r3, r3, r3, lsl #3
  00010	e0823183	 add         r3, r2, r3, lsl #3

; 1142 : 
; 1143 :     if (fHigh)
; 1144 :     {
; 1145 :         SETREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_SCL_O);

  00014	15932018	 ldrne       r2, [r3, #0x18]
  00018	11d233bc	 ldrneh      r3, [r2, #0x3C]
  0001c	13833004	 orrne       r3, r3, #4
  00020	11c233bc	 strneh      r3, [r2, #0x3C]

; 1146 :     }
; 1147 :     else
; 1148 :     {
; 1149 :         CLRREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_SCL_O);

  00024	05931018	 ldreq       r1, [r3, #0x18]
  00028	03a03cff	 moveq       r3, #0xFF, 24
  0002c	038320fb	 orreq       r2, r3, #0xFB
  00030	01d133bc	 ldreqh      r3, [r1, #0x3C]
  00034	00033002	 andeq       r3, r3, r2
  00038	01c133bc	 streqh      r3, [r1, #0x3C]

; 1150 :     }    
; 1151 : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN8@I2CDriveSC|
  00040		 |$LN9@I2CDriveSC|
  00040	00000000	 DCD         |_rgI2CDevice|
  00044		 |$M45737|

			 ENDP  ; |I2CDriveSCL|

	EXPORT	|I2CDriveSDA|

  00000			 AREA	 |.pdata|, PDATA
|$T45751| DCD	|$LN7@I2CDriveSD|
	DCD	0x40001100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CDriveSDA| PROC

; 1153 : {

  00000		 |$LN7@I2CDriveSD|
  00000		 |$M45748|
  00000	e3510000	 cmp         r1, #0

; 1154 :     I2CContext_t* pCtx =  (I2CContext_t*) hCtx;    
; 1155 :     I2CDevice_t  *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  00004	e5903000	 ldr         r3, [r0]
  00008	e59f2030	 ldr         r2, [pc, #0x30]
  0000c	e0633183	 rsb         r3, r3, r3, lsl #3
  00010	e0823183	 add         r3, r2, r3, lsl #3

; 1156 : 
; 1157 :     if (fHigh)
; 1158 :     {
; 1159 :         SETREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_SDA_O);

  00014	15932018	 ldrne       r2, [r3, #0x18]
  00018	11d233bc	 ldrneh      r3, [r2, #0x3C]
  0001c	13833001	 orrne       r3, r3, #1
  00020	11c233bc	 strneh      r3, [r2, #0x3C]

; 1160 :     }
; 1161 :     else
; 1162 :     {
; 1163 :         CLRREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_SDA_O);

  00024	05931018	 ldreq       r1, [r3, #0x18]
  00028	03a03cff	 moveq       r3, #0xFF, 24
  0002c	038320fe	 orreq       r2, r3, #0xFE
  00030	01d133bc	 ldreqh      r3, [r1, #0x3C]
  00034	00033002	 andeq       r3, r3, r2
  00038	01c133bc	 streqh      r3, [r1, #0x3C]

; 1164 :     }    
; 1165 : }

  0003c	e12fff1e	 bx          lr
  00040		 |$LN8@I2CDriveSD|
  00040		 |$LN9@I2CDriveSD|
  00040	00000000	 DCD         |_rgI2CDevice|
  00044		 |$M45749|

			 ENDP  ; |I2CDriveSDA|

	EXPORT	|I2CWrite|
	EXPORT	|??_C@_1GO@NCGHHJFM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAS?$AAA?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@ENFGBMIC@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@MAODODEJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?3?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@EBLPIMOB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@PBDHJPJA@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAn?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@GELEADBD@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAo?$AAf?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX@| [ DATA ] ; `string'
	IMPORT	|PrcmDeviceGetContextState|

  00000			 AREA	 |.pdata|, PDATA
|$T45779| DCD	|$LN24@I2CWrite|
	DCD	0x40008104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@NCGHHJFM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAS?$AAA?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "("
	DCB	0x0, "S", 0x0, "A", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@ENFGBMIC@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "C", 0x0, "t"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MAODODEJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?3?$AA?5?$AA?$CF@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "r", 0x0, "c", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@EBLPIMOB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@PBDHJPJA@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAn?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "n", 0x0, "A", 0x0, "t"
	DCB	0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p", 0x0, "t", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GELEADBD@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAo?$AAf?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C"
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "p"
	DCB	0x0, "C", 0x0, "t", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CWrite| PROC

; 320  : {

  00000		 |$LN24@I2CWrite|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d57f0	 stmdb       sp!, {r4 - r10, r12, lr}
  0000c	e24dd02c	 sub         sp, sp, #0x2C
  00010		 |$M45776|
  00010	e1a07003	 mov         r7, r3
  00014	e1a09002	 mov         r9, r2
  00018	e1a04000	 mov         r4, r0

; 321  :     I2CResult_e             rc; 
; 322  :     UINT                    nAttempts;
; 323  :     UINT16                  con_mask;
; 324  :     UINT                    writeCount = (UINT)-1;
; 325  : 
; 326  :     int                     payloadCount;
; 327  :     I2C_PACKET_INFO_t       packetInfo;
; 328  :     I2C_TRANSACTION_INFO_t  transactInfo;
; 329  :     I2C_BUFFER_INFO_t       rgBufferInfo[2];
; 330  : 
; 331  :     I2CContext_t           *pCtx =    (I2CContext_t*)hCtx;    
; 332  :     I2CDevice_t            *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  0001c	e5941000	 ldr         r1, [r4]
  00020	e59fe1d8	 ldr         lr, [pc, #0x1D8]

; 333  :                          //The Array _rgI2CDevice[pCtx->idI2C], is i2c address
; 334  :     
; 335  :     // Get hardware
; 336  :     I2CLock(pCtx);

  00024	e0611181	 rsb         r1, r1, r1, lsl #3
  00028	e08e6181	 add         r6, lr, r1, lsl #3
  0002c	eb000000	 bl          I2CLock

; 337  : 
; 338  :     OALLog(L"\r Testing I2CWrite() of pCtx: %X\r\n", pCtx);   //Ray 13-10-14

  00030	e59f01c4	 ldr         r0, [pc, #0x1C4]
  00034	e1a01004	 mov         r1, r4
  00038	eb000000	 bl          NKDbgPrintfW

; 339  : 
; 340  :     //OALMSG(OAL_LOG_WARN, (L"I2C: I2CWrite bus %d\n", idI2C));
; 341  : 
; 342  :     // Set this driver to Active Mode
; 343  :     EnableDeviceClocks(pCtx->device, TRUE);

  0003c	e5940004	 ldr         r0, [r4, #4]
  00040	e3a01001	 mov         r1, #1
  00044	eb000000	 bl          EnableDeviceClocks

; 344  : 
; 345  : #if 1
; 346  :     if (PrcmDeviceGetContextState(pCtx->device, TRUE) == FALSE)

  00048	e5940004	 ldr         r0, [r4, #4]
  0004c	e3a01001	 mov         r1, #1
  00050	eb000000	 bl          PrcmDeviceGetContextState
  00054	e3500000	 cmp         r0, #0

; 347  :     {
; 348  :         I2CResetDevice(pDevice);

  00058	01a00006	 moveq       r0, r6
  0005c	0b000000	 bleq        I2CResetDevice

; 349  :     }
; 350  : #endif
; 351  : 
; 352  :     // setup connection mask
; 353  :     con_mask = I2C_CON_MST;
; 354  :     if ((pDevice->ownAddress & 0x80) != 0)

  00060	e5963004	 ldr         r3, [r6, #4]
  00064	e3a0eb01	 mov         lr, #1, 22

; 355  :     {
; 356  :         con_mask |= I2C_CON_XSA;
; 357  :     }
; 358  : 
; 359  :     // set transfer mode bits
; 360  :     if (pCtx->baudIndex == SLOWSPEED_MODE)
; 361  :     if (pCtx->baudIndex == SLOWSPEED_MODE)
; 362  :     {
; 363  :         con_mask |= I2C_CON_OPMODE_FS; 
; 364  :     }
; 365  :     else if (pCtx->baudIndex == FULLSPEED_MODE)
; 366  :     {
; 367  :         con_mask |= I2C_CON_OPMODE_FS;
; 368  :     }
; 369  :     else
; 370  :     {
; 371  :         con_mask |= I2C_CON_OPMODE_HS;
; 372  :     }
; 373  : 
; 374  :     // fill in operation info
; 375  :     payloadCount = 0;
; 376  :     if (pCtx->subAddressMode != I2C_SUBADDRESS_MODE_0)

  00068	e5945008	 ldr         r5, [r4, #8]
  0006c	e3130080	 tst         r3, #0x80
  00070	e5943014	 ldr         r3, [r4, #0x14]
  00074	13a0ec05	 movne       lr, #5, 24
  00078	e3a01000	 mov         r1, #0
  0007c	e1b02003	 movs        r2, r3

; 377  :     {
; 378  :         rgBufferInfo[payloadCount].size    = pCtx->subAddressMode;
; 379  :         rgBufferInfo[payloadCount].pBuffer = (UCHAR*)&subaddr;

  00080	128d3054	 addne       r3, sp, #0x54
  00084	158d3010	 strne       r3, [sp, #0x10]
  00088	158d200c	 strne       r2, [sp, #0xC]

; 380  :         ++payloadCount;
; 381  :     }
; 382  : 
; 383  :     rgBufferInfo[payloadCount].size    = size;
; 384  :     rgBufferInfo[payloadCount].pBuffer = (UCHAR*)pBuffer;
; 385  :     ++payloadCount;
; 386  : 
; 387  :     packetInfo.count  = payloadCount;
; 388  :     packetInfo.opType = kI2C_Write;
; 389  :     packetInfo.rgBuffers = rgBufferInfo;
; 390  : 
; 391  :     transactInfo.count = 1;
; 392  :     transactInfo.con_mask = con_mask;
; 393  :     transactInfo.rgPackets = &packetInfo;
; 394  : 
; 395  :     // check if baud rate is different from current settings
; 396  :     if (pDevice->currentBaudIndex != pCtx->baudIndex)

  0008c	e596001c	 ldr         r0, [r6, #0x1C]
  00090	e28d300c	 add         r3, sp, #0xC
  00094	13a01001	 movne       r1, #1
  00098	e28d200c	 add         r2, sp, #0xC
  0009c	e7837181	 str         r7, [r3, +r1, lsl #3]
  000a0	e0822181	 add         r2, r2, r1, lsl #3
  000a4	e2818001	 add         r8, r1, #1
  000a8	e3a07001	 mov         r7, #1
  000ac	e28d300c	 add         r3, sp, #0xC
  000b0	e28d101c	 add         r1, sp, #0x1C
  000b4	e3a0a001	 mov         r10, #1
  000b8	e58d7020	 str         r7, [sp, #0x20]
  000bc	e58d3028	 str         r3, [sp, #0x28]
  000c0	e58d1008	 str         r1, [sp, #8]
  000c4	e58d801c	 str         r8, [sp, #0x1C]
  000c8	e5829004	 str         r9, [r2, #4]
  000cc	e58da000	 str         r10, [sp]
  000d0	e58de004	 str         lr, [sp, #4]
  000d4	e1500005	 cmp         r0, r5
  000d8	0a000012	 beq         |$LN19@I2CWrite|

; 397  :     {
; 398  :         I2CSetDeviceBaudrate(pDevice, pCtx->baudIndex);

  000dc	e59f1114	 ldr         r1, [pc, #0x114]
  000e0	e0853085	 add         r3, r5, r5, lsl #1
  000e4	e5962018	 ldr         r2, [r6, #0x18]
  000e8	e0813083	 add         r3, r1, r3, lsl #1
  000ec	e1d330b0	 ldrh        r3, [r3]
  000f0	e586501c	 str         r5, [r6, #0x1C]
  000f4	e1c233b0	 strh        r3, [r2, #0x30]
  000f8	e596301c	 ldr         r3, [r6, #0x1C]
  000fc	e5962018	 ldr         r2, [r6, #0x18]
  00100	e0833083	 add         r3, r3, r3, lsl #1
  00104	e0813083	 add         r3, r1, r3, lsl #1
  00108	e1d330b2	 ldrh        r3, [r3, #2]
  0010c	e1c233b4	 strh        r3, [r2, #0x34]
  00110	e596301c	 ldr         r3, [r6, #0x1C]
  00114	e5962018	 ldr         r2, [r6, #0x18]
  00118	e0833083	 add         r3, r3, r3, lsl #1
  0011c	e0813083	 add         r3, r1, r3, lsl #1
  00120	e1d330b4	 ldrh        r3, [r3, #4]
  00124	e1c233b8	 strh        r3, [r2, #0x38]
  00128		 |$LN19@I2CWrite|

; 399  :     }
; 400  : 
; 401  :     
; 402  :     //tourble start, Ray 
; 403  :     // write data
; 404  :     nAttempts = 0;

  00128	e3a05000	 mov         r5, #0
  0012c		 |$LL5@I2CWrite|

; 405  :     do
; 406  :     {
; 407  :         OALLog(L"\r Testing nAttempts: %d\r\n", nAttempts);

  0012c	e59f00c0	 ldr         r0, [pc, #0xC0]
  00130	e1a01005	 mov         r1, r5
  00134	eb000000	 bl          NKDbgPrintfW

; 408  : 
; 409  :         OALMSG(OAL_LOG_WARN && nAttempts,       //nAttempts == 0 doesn't execute               
; 410  :             (L"Write: Attempts = %d\r\n", (nAttempts + 1) ));

  00138	e3550000	 cmp         r5, #0
  0013c	159f00ac	 ldrne       r0, [pc, #0xAC]
  00140	12851001	 addne       r1, r5, #1
  00144	1b000000	 blne        NKDbgPrintfW

; 411  :         nAttempts++;
; 412  : 
; 413  :         OALLog(L"\r Testing pCtx: %X\r\n", pCtx);   //Check pCtx values yet exist!?, Ray 13-10-14

  00148	e59f009c	 ldr         r0, [pc, #0x9C]
  0014c	e1a01004	 mov         r1, r4
  00150	e2855001	 add         r5, r5, #1
  00154	eb000000	 bl          NKDbgPrintfW

; 414  : 
; 415  :         rc = I2CTransaction(&transactInfo, pCtx);  //trouble ,Ray 13-10-15   

  00158	e1a01004	 mov         r1, r4
  0015c	e28d0000	 add         r0, sp, #0
  00160	eb000000	 bl          I2CTransaction
  00164	e1a07000	 mov         r7, r0

; 416  :         OALLog(L"\r Testing I2CTransaction() rc: %d\r\n", rc); //rc == 2

  00168	e59f0078	 ldr         r0, [pc, #0x78]
  0016c	e1a01007	 mov         r1, r7
  00170	eb000000	 bl          NKDbgPrintfW

; 417  :     }while (rc == kI2CRetry && (nAttempts < pDevice->maxRetries));

  00174	e3570002	 cmp         r7, #2
  00178	1a000002	 bne         |$LN2@I2CWrite|
  0017c	e596300c	 ldr         r3, [r6, #0xC]
  00180	e1550003	 cmp         r5, r3
  00184	3affffe8	 bcc         |$LL5@I2CWrite|
  00188		 |$LN2@I2CWrite|

; 418  :     //3 && nAttempts < 5
; 419  :     // kI2CSuccess == 1
; 420  :     // kI2CFail    == 2
; 421  :     // kI2CRetry   == 3
; 422  :     
; 423  :             
; 424  :     if (rc != kI2CSuccess)      // rc != 1

  00188	e3570000	 cmp         r7, #0
  0018c	0a000005	 beq         |$LN1@I2CWrite|

; 425  :     {
; 426  :         OALMSG(OAL_LOG_WARN, (L"WARN: I2C: Write failed "
; 427  :                               L"(SA=0x%02X, register=0x%08X)\r\n",
; 428  :                               pCtx->slaveAddress, subaddr
; 429  :                               ));

  00190	e59d2054	 ldr         r2, [sp, #0x54]
  00194	e5941010	 ldr         r1, [r4, #0x10]
  00198	e59f0044	 ldr         r0, [pc, #0x44]
  0019c	eb000000	 bl          NKDbgPrintfW

; 430  : 
; 431  :         writeCount = (UINT)-1;

  001a0	e3e05000	 mvn         r5, #0

; 432  :         goto cleanUp;

  001a4	ea000002	 b           |$cleanUp$44863|
  001a8		 |$LN1@I2CWrite|

; 433  :     }
; 434  : 
; 435  :     // report number of bytes written
; 436  :     writeCount = rgBufferInfo[payloadCount - 1].size;

  001a8	e28d300c	 add         r3, sp, #0xC
  001ac	e0833188	 add         r3, r3, r8, lsl #3
  001b0	e5135008	 ldr         r5, [r3, #-8]
  001b4		 |$cleanUp$44863|

; 437  : 
; 438  : cleanUp:
; 439  : 
; 440  :     // disable device
; 441  :     OUTREG16(&pDevice->pI2CRegs->CON, 0);

  001b4	e5963018	 ldr         r3, [r6, #0x18]
  001b8	e3a02000	 mov         r2, #0

; 442  : 
; 443  :     // Set this driver to suspend
; 444  :     EnableDeviceClocks(pCtx->device, FALSE);

  001bc	e3a01000	 mov         r1, #0
  001c0	e1c322b4	 strh        r2, [r3, #0x24]
  001c4	e5940004	 ldr         r0, [r4, #4]
  001c8	eb000000	 bl          EnableDeviceClocks

; 445  : 
; 446  :     // Release hardware    
; 447  :     I2CUnlock(pCtx);

  001cc	e1a00004	 mov         r0, r4
  001d0	eb000000	 bl          I2CUnlock

; 448  : 
; 449  :     return writeCount;
; 450  : }

  001d4	e1a00005	 mov         r0, r5
  001d8	e28dd02c	 add         sp, sp, #0x2C
  001dc	e89d67f0	 ldmia       sp, {r4 - r10, sp, lr}
  001e0	e12fff1e	 bx          lr
  001e4		 |$LN25@I2CWrite|
  001e4		 |$LN26@I2CWrite|
  001e4	00000000	 DCD         |??_C@_1GO@NCGHHJFM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAS?$AAA?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@|
  001e8		 |$LN27@I2CWrite|
  001e8	00000000	 DCD         |??_C@_1EI@MAODODEJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?3?$AA?5?$AA?$CF@|
  001ec		 |$LN28@I2CWrite|
  001ec	00000000	 DCD         |??_C@_1CK@ENFGBMIC@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001f0		 |$LN29@I2CWrite|
  001f0	00000000	 DCD         |??_C@_1CO@EBLPIMOB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  001f4		 |$LN30@I2CWrite|
  001f4	00000000	 DCD         |??_C@_1DE@PBDHJPJA@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAn?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  001f8		 |$LN31@I2CWrite|
  001f8	00000000	 DCD         |_rgScaleTable|
  001fc		 |$LN32@I2CWrite|
  001fc	00000000	 DCD         |??_C@_1EG@GELEADBD@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAo?$AAf?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX@|
  00200		 |$LN33@I2CWrite|
  00200	00000000	 DCD         |_rgI2CDevice|
  00204		 |$M45777|

			 ENDP  ; |I2CWrite|

	EXPORT	|I2CRead|
	EXPORT	|??_C@_1HM@LEOLDKCA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HPEFBBEG@?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IKDMELMO@?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45814| DCD	|$LN23@I2CRead|
	DCD	0x40008004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LEOLDKCA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "s"
	DCB	0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HPEFBBEG@?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "A"
	DCB	0x0, "t", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IKDMELMO@?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "E"
	DCB	0x0, "S", 0x0, "E", 0x0, "T", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CRead| PROC

; 460  : {

  00000		 |$LN23@I2CRead|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d57f0	 stmdb       sp!, {r4 - r10, r12, lr}
  0000c	e24dd03c	 sub         sp, sp, #0x3C
  00010		 |$M45811|
  00010	e1a09003	 mov         r9, r3
  00014	e1a0a002	 mov         r10, r2
  00018	e1a04000	 mov         r4, r0

; 461  :     I2CResult_e             rc;
; 462  :     UINT                    nAttempts;
; 463  :     UINT16                  con_mask;
; 464  :     UINT                    readCount = (UINT) -1;
; 465  : 
; 466  :     int                     payloadCount;
; 467  :     I2C_TRANSACTION_INFO_t  transactInfo;    
; 468  :     I2C_PACKET_INFO_t       rgPacketInfo[2];
; 469  :     I2C_BUFFER_INFO_t       rgBufferInfo[2];
; 470  : 
; 471  :     I2CContext_t           *pCtx = (I2CContext_t*)hCtx;
; 472  :     I2CDevice_t            *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  0001c	e5941000	 ldr         r1, [r4]
  00020	e59fe1d4	 ldr         lr, [pc, #0x1D4]

; 473  : 
; 474  :     // Get hardware
; 475  :     I2CLock(pCtx);

  00024	e0611181	 rsb         r1, r1, r1, lsl #3
  00028	e08e6181	 add         r6, lr, r1, lsl #3
  0002c	eb000000	 bl          I2CLock

; 476  : 
; 477  :     //OALMSG(OAL_LOG_WARN, (L"I2C: I2CRead bus %d\n", idI2C));
; 478  : 
; 479  :     // Set this driver to Active Mode
; 480  :     EnableDeviceClocks(pCtx->device, TRUE);

  00030	e5940004	 ldr         r0, [r4, #4]
  00034	e3a01001	 mov         r1, #1
  00038	eb000000	 bl          EnableDeviceClocks

; 481  : 
; 482  :     if (PrcmDeviceGetContextState(pCtx->device, TRUE) == FALSE)

  0003c	e5940004	 ldr         r0, [r4, #4]
  00040	e3a01001	 mov         r1, #1
  00044	eb000000	 bl          PrcmDeviceGetContextState
  00048	e3500000	 cmp         r0, #0
  0004c	1a000004	 bne         |$LN13@I2CRead|

; 483  :     {
; 484  :         I2CResetDevice(pDevice);

  00050	e1a00006	 mov         r0, r6
  00054	eb000000	 bl          I2CResetDevice

; 485  :         OALMSG(OAL_LOG_VERBOSE, (
; 486  :             L"I2C: RESET device %d\r\n", pCtx->device
; 487  :             ));

  00058	e5941004	 ldr         r1, [r4, #4]
  0005c	e59f0194	 ldr         r0, [pc, #0x194]
  00060	eb000000	 bl          NKDbgPrintfW
  00064		 |$LN13@I2CRead|

; 488  : 	
; 489  :     }
; 490  : 
; 491  :     // setup CONnection mask
; 492  :     con_mask = I2C_CON_MST;
; 493  :     if ((pDevice->ownAddress& 0x80) != 0)

  00064	e5963004	 ldr         r3, [r6, #4]
  00068	e3a05b01	 mov         r5, #1, 22

; 494  :     {
; 495  :         con_mask |= I2C_CON_XSA;
; 496  :     }
; 497  : 
; 498  :     // set transfer mode bits
; 499  :     if (pCtx->baudIndex == SLOWSPEED_MODE)
; 500  :     {
; 501  :         con_mask |= I2C_CON_OPMODE_FS; 
; 502  :     }
; 503  :     else if (pCtx->baudIndex == FULLSPEED_MODE)
; 504  :     {
; 505  :         con_mask |= I2C_CON_OPMODE_FS;
; 506  :     }
; 507  :     else
; 508  :     {
; 509  :         con_mask |= I2C_CON_OPMODE_HS;
; 510  :     }
; 511  : 
; 512  :     // fill in operation info
; 513  :     payloadCount = 0;
; 514  :     if (pCtx->subAddressMode != I2C_SUBADDRESS_MODE_0)

  0006c	e3a07000	 mov         r7, #0
  00070	e3130080	 tst         r3, #0x80
  00074	e5943008	 ldr         r3, [r4, #8]
  00078	13a05c05	 movne       r5, #5, 24
  0007c	e1b08003	 movs        r8, r3
  00080	e5943014	 ldr         r3, [r4, #0x14]
  00084	13580001	 cmpne       r8, #1
  00088	13855a01	 orrne       r5, r5, #1, 20
  0008c	e1b01003	 movs        r1, r3
  00090	0a000009	 beq         |$LN7@I2CRead|

; 515  :     {
; 516  :         rgBufferInfo[payloadCount].size = pCtx->subAddressMode;
; 517  :         rgBufferInfo[payloadCount].pBuffer = (UCHAR*)&subaddr;

  00094	e28d3064	 add         r3, sp, #0x64

; 518  : 
; 519  :         rgPacketInfo[payloadCount].count = 1;

  00098	e3a00001	 mov         r0, #1

; 520  :         rgPacketInfo[payloadCount].opType = kI2C_Write;

  0009c	e3a0e001	 mov         lr, #1

; 521  :         rgPacketInfo[payloadCount].rgBuffers = &rgBufferInfo[payloadCount];

  000a0	e28d200c	 add         r2, sp, #0xC
  000a4	e58d3010	 str         r3, [sp, #0x10]
  000a8	e58d001c	 str         r0, [sp, #0x1C]
  000ac	e58de020	 str         lr, [sp, #0x20]
  000b0	e58d2028	 str         r2, [sp, #0x28]
  000b4	e58d100c	 str         r1, [sp, #0xC]

; 522  :         ++payloadCount;

  000b8	e3a07001	 mov         r7, #1
  000bc		 |$LN7@I2CRead|

; 523  :     }
; 524  : 
; 525  :     rgBufferInfo[payloadCount].size = size;

  000bc	e28d000c	 add         r0, sp, #0xC
  000c0	e7a09187	 str         r9, [r0, +r7, lsl #3]!

; 526  :     rgBufferInfo[payloadCount].pBuffer = (UCHAR*)pBuffer;
; 527  : 
; 528  :     rgPacketInfo[payloadCount].count = 1;
; 529  :     rgPacketInfo[payloadCount].opType = kI2C_Read;
; 530  :     rgPacketInfo[payloadCount].rgBuffers = &rgBufferInfo[payloadCount];
; 531  :     ++payloadCount;
; 532  : 
; 533  :     // link packets
; 534  :     transactInfo.count    = payloadCount;
; 535  :     transactInfo.con_mask = con_mask;
; 536  :     transactInfo.rgPackets = rgPacketInfo;
; 537  : 
; 538  :     // check if baud rate is different from current settings
; 539  :     if (pDevice->currentBaudIndex != pCtx->baudIndex)

  000c4	e596e01c	 ldr         lr, [r6, #0x1C]
  000c8	e3a09001	 mov         r9, #1
  000cc	e28d200c	 add         r2, sp, #0xC
  000d0	e28d101c	 add         r1, sp, #0x1C
  000d4	e28d301c	 add         r3, sp, #0x1C
  000d8	e7819207	 str         r9, [r1, +r7, lsl #4]
  000dc	e0822187	 add         r2, r2, r7, lsl #3
  000e0	e0833207	 add         r3, r3, r7, lsl #4
  000e4	e2877001	 add         r7, r7, #1
  000e8	e28d101c	 add         r1, sp, #0x1C
  000ec	e3a09000	 mov         r9, #0
  000f0	e5839004	 str         r9, [r3, #4]
  000f4	e58d7000	 str         r7, [sp]
  000f8	e58d1008	 str         r1, [sp, #8]
  000fc	e583000c	 str         r0, [r3, #0xC]
  00100	e582a004	 str         r10, [r2, #4]
  00104	e58d5004	 str         r5, [sp, #4]
  00108	e15e0008	 cmp         lr, r8
  0010c	0a000012	 beq         |$LN18@I2CRead|

; 540  :     {
; 541  :         I2CSetDeviceBaudrate(pDevice, pCtx->baudIndex);

  00110	e59f10dc	 ldr         r1, [pc, #0xDC]
  00114	e0883088	 add         r3, r8, r8, lsl #1
  00118	e5962018	 ldr         r2, [r6, #0x18]
  0011c	e0813083	 add         r3, r1, r3, lsl #1
  00120	e1d330b0	 ldrh        r3, [r3]
  00124	e586801c	 str         r8, [r6, #0x1C]
  00128	e1c233b0	 strh        r3, [r2, #0x30]
  0012c	e596301c	 ldr         r3, [r6, #0x1C]
  00130	e5962018	 ldr         r2, [r6, #0x18]
  00134	e0833083	 add         r3, r3, r3, lsl #1
  00138	e0813083	 add         r3, r1, r3, lsl #1
  0013c	e1d330b2	 ldrh        r3, [r3, #2]
  00140	e1c233b4	 strh        r3, [r2, #0x34]
  00144	e596301c	 ldr         r3, [r6, #0x1C]
  00148	e5962018	 ldr         r2, [r6, #0x18]
  0014c	e0833083	 add         r3, r3, r3, lsl #1
  00150	e0813083	 add         r3, r1, r3, lsl #1
  00154	e1d330b4	 ldrh        r3, [r3, #4]
  00158	e1c233b8	 strh        r3, [r2, #0x38]
  0015c		 |$LN18@I2CRead|

; 542  :     }
; 543  : 
; 544  :     // write data
; 545  :     nAttempts = 0;

  0015c	e3a05000	 mov         r5, #0
  00160		 |$LL5@I2CRead|

; 546  :     do
; 547  :     {
; 548  :         OALMSG(OAL_LOG_WARN && nAttempts, 
; 549  :             (L"Read: Attempts = %d\r\n", (nAttempts + 1)));

  00160	e3550000	 cmp         r5, #0
  00164	159f0084	 ldrne       r0, [pc, #0x84]
  00168	12851001	 addne       r1, r5, #1
  0016c	1b000000	 blne        NKDbgPrintfW

; 550  : 
; 551  :         nAttempts++;
; 552  :         rc = I2CTransaction(&transactInfo, pCtx);

  00170	e1a01004	 mov         r1, r4
  00174	e28d0000	 add         r0, sp, #0
  00178	e2855001	 add         r5, r5, #1
  0017c	eb000000	 bl          I2CTransaction

; 553  :     }while (rc == kI2CRetry && (nAttempts < pDevice->maxRetries));

  00180	e3500002	 cmp         r0, #2
  00184	1a000002	 bne         |$LN2@I2CRead|
  00188	e596300c	 ldr         r3, [r6, #0xC]
  0018c	e1550003	 cmp         r5, r3
  00190	3afffff2	 bcc         |$LL5@I2CRead|
  00194		 |$LN2@I2CRead|

; 554  : 
; 555  :     if (rc != kI2CSuccess)

  00194	e3500000	 cmp         r0, #0
  00198	0a000005	 beq         |$LN1@I2CRead|

; 556  :     {
; 557  :         OALMSG(OAL_LOG_WARN, (L"WARN: I2C: Read failed "
; 558  :             L"(slave addr=0x%02X, register=0x%08X)\r\n",
; 559  :             pCtx->slaveAddress, subaddr
; 560  :             ));

  0019c	e59d2064	 ldr         r2, [sp, #0x64]
  001a0	e5941010	 ldr         r1, [r4, #0x10]
  001a4	e59f0040	 ldr         r0, [pc, #0x40]
  001a8	eb000000	 bl          NKDbgPrintfW

; 561  : 
; 562  :         readCount = (UINT)-1;

  001ac	e3e05000	 mvn         r5, #0

; 563  :         goto cleanUp;

  001b0	ea000002	 b           |$cleanUp$44910|
  001b4		 |$LN1@I2CRead|

; 564  :     }
; 565  : 
; 566  :     // report number of bytes written
; 567  :     readCount = rgBufferInfo[payloadCount - 1].size;

  001b4	e28d300c	 add         r3, sp, #0xC
  001b8	e0833187	 add         r3, r3, r7, lsl #3
  001bc	e5135008	 ldr         r5, [r3, #-8]
  001c0		 |$cleanUp$44910|

; 568  : 
; 569  : cleanUp:
; 570  : 
; 571  :     // disable device
; 572  :     OUTREG16(&pDevice->pI2CRegs->CON, 0);

  001c0	e5963018	 ldr         r3, [r6, #0x18]

; 573  : 
; 574  :     // Set this driver to suspend
; 575  :     EnableDeviceClocks(pCtx->device, FALSE);

  001c4	e3a01000	 mov         r1, #0
  001c8	e1c392b4	 strh        r9, [r3, #0x24]
  001cc	e5940004	 ldr         r0, [r4, #4]
  001d0	eb000000	 bl          EnableDeviceClocks

; 576  : 
; 577  :     // Release hardware    
; 578  :     I2CUnlock(pCtx);

  001d4	e1a00004	 mov         r0, r4
  001d8	eb000000	 bl          I2CUnlock

; 579  : 
; 580  :     return readCount;
; 581  : }

  001dc	e1a00005	 mov         r0, r5
  001e0	e28dd03c	 add         sp, sp, #0x3C
  001e4	e89d67f0	 ldmia       sp, {r4 - r10, sp, lr}
  001e8	e12fff1e	 bx          lr
  001ec		 |$LN24@I2CRead|
  001ec		 |$LN25@I2CRead|
  001ec	00000000	 DCD         |??_C@_1HM@LEOLDKCA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@|
  001f0		 |$LN26@I2CRead|
  001f0	00000000	 DCD         |??_C@_1CM@HPEFBBEG@?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  001f4		 |$LN27@I2CRead|
  001f4	00000000	 DCD         |_rgScaleTable|
  001f8		 |$LN28@I2CRead|
  001f8	00000000	 DCD         |??_C@_1CO@IKDMELMO@?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  001fc		 |$LN29@I2CRead|
  001fc	00000000	 DCD         |_rgI2CDevice|
  00200		 |$M45812|

			 ENDP  ; |I2CRead|

	EXPORT	|I2CRawRead|
	EXPORT	|??_C@_1FM@DHKEFDNK@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45839| DCD	|$LN19@I2CRawRead|
	DCD	0x40004902

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@DHKEFDNK@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "s"
	DCB	0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, " ", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CRawRead| PROC

; 590  : {

  00000		 |$LN19@I2CRawRead|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd03c	 sub         sp, sp, #0x3C
  00008		 |$M45836|
  00008	e1a04002	 mov         r4, r2
  0000c	e1a07001	 mov         r7, r1
  00010	e1a05000	 mov         r5, r0

; 591  :     I2CResult_e             rc;
; 592  :     UINT                    nAttempts;
; 593  :     UINT16                  con_mask;
; 594  :     UINT                    readCount = (UINT) -1;
; 595  : 
; 596  :     int                     payloadCount;
; 597  :     I2C_TRANSACTION_INFO_t  transactInfo;    
; 598  :     I2C_PACKET_INFO_t       rgPacketInfo[2];
; 599  :     I2C_BUFFER_INFO_t       rgBufferInfo[2];
; 600  : 
; 601  :     I2CContext_t           *pCtx = (I2CContext_t*)hCtx;
; 602  :     I2CDevice_t            *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  00014	e5953000	 ldr         r3, [r5]
  00018	e59fe100	 ldr         lr, [pc, #0x100]

; 603  : 
; 604  :     // Get hardware
; 605  :     I2CLock(pCtx);

  0001c	e0633183	 rsb         r3, r3, r3, lsl #3
  00020	e08e6183	 add         r6, lr, r3, lsl #3
  00024	eb000000	 bl          I2CLock

; 606  : 
; 607  :     //OALMSG(OAL_LOG_WARN, (L"I2C: I2CRead bus %d\n", idI2C));
; 608  : 
; 609  :     // Set this driver to Active Mode
; 610  :     EnableDeviceClocks(pCtx->device, TRUE);

  00028	e5950004	 ldr         r0, [r5, #4]
  0002c	e3a01001	 mov         r1, #1
  00030	eb000000	 bl          EnableDeviceClocks

; 611  : 
; 612  : #if 1
; 613  :     if (PrcmDeviceGetContextState(pCtx->device, TRUE) == FALSE)

  00034	e5950004	 ldr         r0, [r5, #4]
  00038	e3a01001	 mov         r1, #1
  0003c	eb000000	 bl          PrcmDeviceGetContextState
  00040	e3500000	 cmp         r0, #0

; 614  :     {
; 615  :         I2CResetDevice(pDevice);

  00044	01a00006	 moveq       r0, r6
  00048	0b000000	 bleq        I2CResetDevice

; 616  :     }
; 617  : #endif
; 618  : 
; 619  : 
; 620  :     // setup CONnection mask
; 621  :     con_mask = I2C_CON_MST;
; 622  :     if ((pDevice->ownAddress& 0x80) != 0)

  0004c	e5963004	 ldr         r3, [r6, #4]
  00050	e3a0eb01	 mov         lr, #1, 22

; 623  :     {
; 624  :         con_mask |= I2C_CON_XSA;
; 625  :     }
; 626  : 
; 627  :     // set transfer mode bits
; 628  :     if (pCtx->baudIndex == SLOWSPEED_MODE)
; 629  :     {
; 630  :         con_mask |= I2C_CON_OPMODE_FS; 
; 631  :     }
; 632  :     else if (pCtx->baudIndex == FULLSPEED_MODE)
; 633  :     {
; 634  :         con_mask |= I2C_CON_OPMODE_FS;
; 635  :     }
; 636  :     else
; 637  :     {
; 638  :         con_mask |= I2C_CON_OPMODE_HS;
; 639  :     }
; 640  : 
; 641  :  
; 642  : 	payloadCount = 0;
; 643  :     rgPacketInfo[payloadCount].count = 1;

  00054	e3a01001	 mov         r1, #1
  00058	e3130080	 tst         r3, #0x80
  0005c	e5953008	 ldr         r3, [r5, #8]
  00060	13a0ec05	 movne       lr, #5, 24

; 644  :     rgPacketInfo[payloadCount].opType = kI2C_Read;

  00064	e3a00000	 mov         r0, #0
  00068	e3530000	 cmp         r3, #0
  0006c	13530001	 cmpne       r3, #1
  00070	138eea01	 orrne       lr, lr, #1, 20

; 645  :     rgPacketInfo[payloadCount].rgBuffers = &rgBufferInfo[payloadCount];

  00074	e28d300c	 add         r3, sp, #0xC

; 646  : 
; 647  :     rgBufferInfo[payloadCount].size = size;
; 648  :     rgBufferInfo[payloadCount].pBuffer = (UCHAR*)pBuffer;
; 649  : 
; 650  :     // link packets
; 651  :     transactInfo.count = payloadCount;

  00078	e3a08000	 mov         r8, #0

; 652  :     transactInfo.con_mask = con_mask;
; 653  :     transactInfo.rgPackets = rgPacketInfo;

  0007c	e28d201c	 add         r2, sp, #0x1C

; 654  : 
; 655  :     // write data
; 656  :     nAttempts = 0;

  00080	e58d400c	 str         r4, [sp, #0xC]
  00084	e58de004	 str         lr, [sp, #4]
  00088	e58d101c	 str         r1, [sp, #0x1C]
  0008c	e58d0020	 str         r0, [sp, #0x20]
  00090	e58d3028	 str         r3, [sp, #0x28]
  00094	e58d8000	 str         r8, [sp]
  00098	e58d2008	 str         r2, [sp, #8]
  0009c	e58d7010	 str         r7, [sp, #0x10]
  000a0	e3a04000	 mov         r4, #0
  000a4		 |$LL5@I2CRawRead|

; 657  :     do
; 658  :     {
; 659  :         OALMSG(OAL_LOG_WARN && nAttempts, 
; 660  :             (L"Read: Attempts = %d\r\n", (nAttempts + 1)));

  000a4	e3540000	 cmp         r4, #0
  000a8	159f006c	 ldrne       r0, [pc, #0x6C]
  000ac	12841001	 addne       r1, r4, #1
  000b0	1b000000	 blne        NKDbgPrintfW

; 661  : 
; 662  :         nAttempts++;
; 663  :         rc = I2CTransaction(&transactInfo, pCtx);

  000b4	e1a01005	 mov         r1, r5
  000b8	e28d0000	 add         r0, sp, #0
  000bc	e2844001	 add         r4, r4, #1
  000c0	eb000000	 bl          I2CTransaction

; 664  :     }
; 665  :     while (rc == kI2CRetry && (nAttempts < pDevice->maxRetries));

  000c4	e3500002	 cmp         r0, #2
  000c8	1a000002	 bne         |$LN2@I2CRawRead|
  000cc	e596300c	 ldr         r3, [r6, #0xC]
  000d0	e1540003	 cmp         r4, r3
  000d4	3afffff2	 bcc         |$LL5@I2CRawRead|
  000d8		 |$LN2@I2CRawRead|

; 666  : 
; 667  :     if (rc != kI2CSuccess)

  000d8	e3500000	 cmp         r0, #0

; 668  :     {
; 669  :         OALMSG(OAL_LOG_WARN, (L"WARN: I2C: Read failed "
; 670  :             L"(slave addr=0x%02X )\r\n",
; 671  :             pCtx->slaveAddress
; 672  :             ));

  000dc	15951010	 ldrne       r1, [r5, #0x10]
  000e0	159f0030	 ldrne       r0, [pc, #0x30]
  000e4	1b000000	 blne        NKDbgPrintfW
  000e8		 |$cleanUp$44950|

; 673  : 
; 674  :         readCount = (UINT)-1;
; 675  :         goto cleanUp;
; 676  :     }
; 677  : 
; 678  : 
; 679  : cleanUp:
; 680  : 
; 681  :     // disable device
; 682  :     OUTREG16(&pDevice->pI2CRegs->CON, 0);

  000e8	e5963018	 ldr         r3, [r6, #0x18]
  000ec	e3a02000	 mov         r2, #0

; 683  : 
; 684  :     // Set this driver to suspend
; 685  :     EnableDeviceClocks(pCtx->device, FALSE);

  000f0	e3a01000	 mov         r1, #0
  000f4	e1c322b4	 strh        r2, [r3, #0x24]
  000f8	e5950004	 ldr         r0, [r5, #4]
  000fc	eb000000	 bl          EnableDeviceClocks

; 686  : 
; 687  :     // Release hardware    
; 688  :     I2CUnlock(pCtx);

  00100	e1a00005	 mov         r0, r5
  00104	eb000000	 bl          I2CUnlock

; 689  : 
; 690  :     return readCount;

  00108	e3e00000	 mvn         r0, #0

; 691  : }

  0010c	e28dd03c	 add         sp, sp, #0x3C
  00110	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$LN20@I2CRawRead|
  00118		 |$LN21@I2CRawRead|
  00118	00000000	 DCD         |??_C@_1FM@DHKEFDNK@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@|
  0011c		 |$LN22@I2CRawRead|
  0011c	00000000	 DCD         |??_C@_1CM@HPEFBBEG@?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00120		 |$LN23@I2CRawRead|
  00120	00000000	 DCD         |_rgI2CDevice|
  00124		 |$M45837|

			 ENDP  ; |I2CRawRead|

	END
