; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_OALI2C\oali2c.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "


  00000			 AREA	 |.bss|, NOINIT
|_bPostInit| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|s_fifoLookup| DCW 0x8
	DCW	0x10
	DCW	0x20
	DCW	0x40
	EXPORT	|I2CLock|
	IMPORT	|EnterCriticalSection|
	IMPORT	|_rgI2CDevice|
	IMPORT	|INTERRUPTS_STATUS|

  00000			 AREA	 |.pdata|, PDATA
|$T45185| DCD	|$LN6@I2CLock|
	DCD	0x40001a04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_oali2c\oali2c.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CLock| PROC

; 73   : {

  00000		 |$LN6@I2CLock|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45182|

; 74   : 
; 75   :     if (_bPostInit == TRUE && INTERRUPTS_STATUS())

  00010	e59f304c	 ldr         r3, [pc, #0x4C]
  00014	e5933000	 ldr         r3, [r3]
  00018	e3530001	 cmp         r3, #1
  0001c	1a00000c	 bne         |$LN1@I2CLock|
  00020	eb000000	 bl          INTERRUPTS_STATUS
  00024	e58d0000	 str         r0, [sp]
  00028	e59d3000	 ldr         r3, [sp]
  0002c	e3530000	 cmp         r3, #0
  00030	0a000007	 beq         |$LN1@I2CLock|

; 76   :     {
; 77   :         EnterCriticalSection(&_rgI2CDevice[((I2CContext_t*)hCtx)->idI2C].cs);

  00034	e59d300c	 ldr         r3, [sp, #0xC]
  00038	e5931000	 ldr         r1, [r3]
  0003c	e3a03038	 mov         r3, #0x38
  00040	e0020391	 mul         r2, r1, r3
  00044	e59f3014	 ldr         r3, [pc, #0x14]
  00048	e0833002	 add         r3, r3, r2
  0004c	e2830024	 add         r0, r3, #0x24
  00050	eb000000	 bl          EnterCriticalSection
  00054		 |$LN1@I2CLock|

; 78   :     }
; 79   : }

  00054	e28dd004	 add         sp, sp, #4
  00058	e89d6000	 ldmia       sp, {sp, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN7@I2CLock|
  00060		 |$LN8@I2CLock|
  00060	00000000	 DCD         |_rgI2CDevice|
  00064		 |$LN9@I2CLock|
  00064	00000000	 DCD         |_bPostInit|
  00068		 |$M45183|

			 ENDP  ; |I2CLock|

	EXPORT	|I2CUnlock|
	IMPORT	|LeaveCriticalSection|

  00008			 AREA	 |.pdata|, PDATA
|$T45193| DCD	|$LN6@I2CUnlock|
	DCD	0x40001a04
; Function compile flags: /Odtp

  00068			 AREA	 |.text|, CODE, ARM

  00068		 |I2CUnlock| PROC

; 86   : {

  00068		 |$LN6@I2CUnlock|
  00068	e1a0c00d	 mov         r12, sp
  0006c	e92d0001	 stmdb       sp!, {r0}
  00070	e92d5000	 stmdb       sp!, {r12, lr}
  00074	e24dd004	 sub         sp, sp, #4
  00078		 |$M45190|

; 87   :     if (_bPostInit == TRUE && INTERRUPTS_STATUS()) 

  00078	e59f304c	 ldr         r3, [pc, #0x4C]
  0007c	e5933000	 ldr         r3, [r3]
  00080	e3530001	 cmp         r3, #1
  00084	1a00000c	 bne         |$LN1@I2CUnlock|
  00088	eb000000	 bl          INTERRUPTS_STATUS
  0008c	e58d0000	 str         r0, [sp]
  00090	e59d3000	 ldr         r3, [sp]
  00094	e3530000	 cmp         r3, #0
  00098	0a000007	 beq         |$LN1@I2CUnlock|

; 88   :     {
; 89   :         LeaveCriticalSection(&_rgI2CDevice[((I2CContext_t*)hCtx)->idI2C].cs);

  0009c	e59d300c	 ldr         r3, [sp, #0xC]
  000a0	e5931000	 ldr         r1, [r3]
  000a4	e3a03038	 mov         r3, #0x38
  000a8	e0020391	 mul         r2, r1, r3
  000ac	e59f3014	 ldr         r3, [pc, #0x14]
  000b0	e0833002	 add         r3, r3, r2
  000b4	e2830024	 add         r0, r3, #0x24
  000b8	eb000000	 bl          LeaveCriticalSection
  000bc		 |$LN1@I2CUnlock|

; 90   :     }
; 91   : }

  000bc	e28dd004	 add         sp, sp, #4
  000c0	e89d6000	 ldmia       sp, {sp, lr}
  000c4	e12fff1e	 bx          lr
  000c8		 |$LN7@I2CUnlock|
  000c8		 |$LN8@I2CUnlock|
  000c8	00000000	 DCD         |_rgI2CDevice|
  000cc		 |$LN9@I2CUnlock|
  000cc	00000000	 DCD         |_bPostInit|
  000d0		 |$M45191|

			 ENDP  ; |I2CUnlock|

	EXPORT	|OALI2CInit|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|

  00010			 AREA	 |.pdata|, PDATA
|$T45202| DCD	|$LN5@OALI2CInit|
	DCD	0x40007504
; Function compile flags: /Odtp

  000d0			 AREA	 |.text|, CODE, ARM

  000d0		 |OALI2CInit| PROC

; 228  : {

  000d0		 |$LN5@OALI2CInit|
  000d0	e1a0c00d	 mov         r12, sp
  000d4	e92d0001	 stmdb       sp!, {r0}
  000d8	e92d5000	 stmdb       sp!, {r12, lr}
  000dc	e24dd01c	 sub         sp, sp, #0x1C
  000e0		 |$M45199|

; 229  :     
; 230  :     OMAP_I2C_REGS  *pI2CRegs = OALPAtoUA(GetAddressByDevice(devId));

  000e0	e59d0024	 ldr         r0, [sp, #0x24]
  000e4	eb000000	 bl          GetAddressByDevice
  000e8	e58d0010	 str         r0, [sp, #0x10]
  000ec	e3a01000	 mov         r1, #0
  000f0	e59d0010	 ldr         r0, [sp, #0x10]
  000f4	eb000000	 bl          OALPAtoVA
  000f8	e58d0014	 str         r0, [sp, #0x14]
  000fc	e59d3014	 ldr         r3, [sp, #0x14]
  00100	e58d3008	 str         r3, [sp, #8]

; 231  :     // capture i2c id
; 232  :     UINT idI2C = GetIndexByDevice(devId);

  00104	e59d0024	 ldr         r0, [sp, #0x24]
  00108	eb000000	 bl          GetIndexByDevice
  0010c	e58d0018	 str         r0, [sp, #0x18]
  00110	e59d3018	 ldr         r3, [sp, #0x18]
  00114	e58d3004	 str         r3, [sp, #4]

; 233  : 
; 234  :     // store reference to i2c registers
; 235  :     I2CDevice_t *pDevice = (I2CDevice_t*)&_rgI2CDevice[idI2C];

  00118	e59d1004	 ldr         r1, [sp, #4]
  0011c	e3a03038	 mov         r3, #0x38
  00120	e0020391	 mul         r2, r1, r3
  00124	e59f3170	 ldr         r3, [pc, #0x170]
  00128	e0833002	 add         r3, r3, r2
  0012c	e58d3000	 str         r3, [sp]

; 236  : 
; 237  :     // Enable interface and functional clock of I2C's 
; 238  :     EnableDeviceClocks(devId, TRUE);

  00130	e3a01001	 mov         r1, #1
  00134	e59d0024	 ldr         r0, [sp, #0x24]
  00138	eb000000	 bl          EnableDeviceClocks

; 239  : 
; 240  :     // current baud rate is always initially the default baud rate
; 241  :     _rgI2CDevice[idI2C].currentBaudIndex = _rgI2CDevice[idI2C].defaultBaudIndex;

  0013c	e59d1004	 ldr         r1, [sp, #4]
  00140	e3a03038	 mov         r3, #0x38
  00144	e0020391	 mul         r2, r1, r3
  00148	e59f314c	 ldr         r3, [pc, #0x14C]
  0014c	e0833002	 add         r3, r3, r2
  00150	e2830008	 add         r0, r3, #8
  00154	e59d1004	 ldr         r1, [sp, #4]
  00158	e3a03038	 mov         r3, #0x38
  0015c	e0020391	 mul         r2, r1, r3
  00160	e59f3134	 ldr         r3, [pc, #0x134]
  00164	e0833002	 add         r3, r3, r2
  00168	e283201c	 add         r2, r3, #0x1C
  0016c	e5903000	 ldr         r3, [r0]
  00170	e5823000	 str         r3, [r2]

; 242  : 
; 243  :     // initialize i2c
; 244  :     pDevice->pI2CRegs = pI2CRegs;

  00174	e59d3000	 ldr         r3, [sp]
  00178	e2832018	 add         r2, r3, #0x18
  0017c	e59d3008	 ldr         r3, [sp, #8]
  00180	e5823000	 str         r3, [r2]

; 245  :     I2CResetDevice(pDevice);

  00184	e59d0000	 ldr         r0, [sp]
  00188	eb000000	 bl          I2CResetDevice

; 246  : 
; 247  :     // update fifo threshold size
; 248  :     _rgI2CDevice[idI2C].fifoSize = INREG32(&pI2CRegs->BUFSTAT);

  0018c	e59d3008	 ldr         r3, [sp, #8]
  00190	e2830040	 add         r0, r3, #0x40
  00194	e59d1004	 ldr         r1, [sp, #4]
  00198	e3a03038	 mov         r3, #0x38
  0019c	e0020391	 mul         r2, r1, r3
  001a0	e59f30f4	 ldr         r3, [pc, #0xF4]
  001a4	e0833002	 add         r3, r3, r2
  001a8	e2832020	 add         r2, r3, #0x20
  001ac	e5903000	 ldr         r3, [r0]
  001b0	e5823000	 str         r3, [r2]

; 249  :     _rgI2CDevice[idI2C].fifoSize &= I2C_BUFSTAT_FIFODEPTH_MASK;

  001b4	e59d1004	 ldr         r1, [sp, #4]
  001b8	e3a03038	 mov         r3, #0x38
  001bc	e0020391	 mul         r2, r1, r3
  001c0	e59f30d4	 ldr         r3, [pc, #0xD4]
  001c4	e0833002	 add         r3, r3, r2
  001c8	e2833020	 add         r3, r3, #0x20
  001cc	e5933000	 ldr         r3, [r3]
  001d0	e2030903	 and         r0, r3, #3, 18
  001d4	e59d1004	 ldr         r1, [sp, #4]
  001d8	e3a03038	 mov         r3, #0x38
  001dc	e0020391	 mul         r2, r1, r3
  001e0	e59f30b4	 ldr         r3, [pc, #0xB4]
  001e4	e0833002	 add         r3, r3, r2
  001e8	e2833020	 add         r3, r3, #0x20
  001ec	e5830000	 str         r0, [r3]

; 250  :     _rgI2CDevice[idI2C].fifoSize >>= I2C_BUFSTAT_FIFODEPTH_SHIFT;

  001f0	e59d1004	 ldr         r1, [sp, #4]
  001f4	e3a03038	 mov         r3, #0x38
  001f8	e0020391	 mul         r2, r1, r3
  001fc	e59f3098	 ldr         r3, [pc, #0x98]
  00200	e0833002	 add         r3, r3, r2
  00204	e2833020	 add         r3, r3, #0x20
  00208	e5933000	 ldr         r3, [r3]
  0020c	e1a00723	 mov         r0, r3, lsr #14
  00210	e59d1004	 ldr         r1, [sp, #4]
  00214	e3a03038	 mov         r3, #0x38
  00218	e0020391	 mul         r2, r1, r3
  0021c	e59f3078	 ldr         r3, [pc, #0x78]
  00220	e0833002	 add         r3, r3, r2
  00224	e2833020	 add         r3, r3, #0x20
  00228	e5830000	 str         r0, [r3]

; 251  :     _rgI2CDevice[idI2C].fifoSize = s_fifoLookup[_rgI2CDevice[idI2C].fifoSize];

  0022c	e59d1004	 ldr         r1, [sp, #4]
  00230	e3a03038	 mov         r3, #0x38
  00234	e0020391	 mul         r2, r1, r3
  00238	e59f305c	 ldr         r3, [pc, #0x5C]
  0023c	e0833002	 add         r3, r3, r2
  00240	e2833020	 add         r3, r3, #0x20
  00244	e5931000	 ldr         r1, [r3]
  00248	e3a03002	 mov         r3, #2
  0024c	e0020391	 mul         r2, r1, r3
  00250	e59f3048	 ldr         r3, [pc, #0x48]
  00254	e0830002	 add         r0, r3, r2
  00258	e59d1004	 ldr         r1, [sp, #4]
  0025c	e3a03038	 mov         r3, #0x38
  00260	e0020391	 mul         r2, r1, r3
  00264	e59f3030	 ldr         r3, [pc, #0x30]
  00268	e0833002	 add         r3, r3, r2
  0026c	e2832020	 add         r2, r3, #0x20
  00270	e1d030b0	 ldrh        r3, [r0]
  00274	e5823000	 str         r3, [r2]

; 252  : 
; 253  :     // release clocks
; 254  :     EnableDeviceClocks(devId, FALSE);

  00278	e3a01000	 mov         r1, #0
  0027c	e59d0024	 ldr         r0, [sp, #0x24]
  00280	eb000000	 bl          EnableDeviceClocks

; 255  : 
; 256  :     return TRUE;

  00284	e3a03001	 mov         r3, #1
  00288	e58d300c	 str         r3, [sp, #0xC]

; 257  : }

  0028c	e59d000c	 ldr         r0, [sp, #0xC]
  00290	e28dd01c	 add         sp, sp, #0x1C
  00294	e89d6000	 ldmia       sp, {sp, lr}
  00298	e12fff1e	 bx          lr
  0029c		 |$LN6@OALI2CInit|
  0029c		 |$LN7@OALI2CInit|
  0029c	00000000	 DCD         |_rgI2CDevice|
  002a0		 |$LN8@OALI2CInit|
  002a0	00000000	 DCD         |s_fifoLookup|
  002a4		 |$M45200|

			 ENDP  ; |OALI2CInit|

	EXPORT	|??_C@_1CC@EHKJMBJI@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|

  00018			 AREA	 |.pdata|, PDATA
|$T45211| DCD	|$LN9@GetIndexBy|
	DCD	0x40003404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@EHKJMBJI@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@| DCB "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " "
	DCB	0x0, "n", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "d", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "O", 0x0, "A"
	DCB	0x0, "L", 0x0, "\\", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P"
	DCB	0x0, "_", 0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "o", 0x0, "a"
	DCB	0x0, "l", 0x0, "i", 0x0, "2", 0x0, "c", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  002a4			 AREA	 |.text|, CODE, ARM

  002a4		 |GetIndexByDevice| PROC

; 53   : {    

  002a4		 |$LN9@GetIndexBy|
  002a4	e1a0c00d	 mov         r12, sp
  002a8	e92d0001	 stmdb       sp!, {r0}
  002ac	e92d5000	 stmdb       sp!, {r12, lr}
  002b0	e24dd008	 sub         sp, sp, #8
  002b4		 |$M45208|

; 54   :     DWORD i=0;

  002b4	e3a03000	 mov         r3, #0
  002b8	e58d3000	 str         r3, [sp]
  002bc		 |$LN4@GetIndexBy|

; 55   :     while (_rgI2CDevice[i].device != OMAP_DEVICE_NONE)

  002bc	e59d1000	 ldr         r1, [sp]
  002c0	e3a03038	 mov         r3, #0x38
  002c4	e0020391	 mul         r2, r1, r3
  002c8	e59f30a0	 ldr         r3, [pc, #0xA0]
  002cc	e0833002	 add         r3, r3, r2
  002d0	e5933000	 ldr         r3, [r3]
  002d4	e3730001	 cmn         r3, #1
  002d8	0a00000d	 beq         |$LN3@GetIndexBy|

; 56   :     {   
; 57   :         if (_rgI2CDevice[i].device == dev)

  002dc	e59d1000	 ldr         r1, [sp]
  002e0	e3a03038	 mov         r3, #0x38
  002e4	e0020391	 mul         r2, r1, r3
  002e8	e59f3080	 ldr         r3, [pc, #0x80]
  002ec	e0833002	 add         r3, r3, r2
  002f0	e5932000	 ldr         r2, [r3]
  002f4	e59d3010	 ldr         r3, [sp, #0x10]
  002f8	e1520003	 cmp         r2, r3
  002fc	1a000000	 bne         |$LN2@GetIndexBy|

; 58   :         {           
; 59   :             break;

  00300	ea000003	 b           |$LN3@GetIndexBy|
  00304		 |$LN2@GetIndexBy|

; 60   :         }
; 61   :         i++;

  00304	e59d3000	 ldr         r3, [sp]
  00308	e2833001	 add         r3, r3, #1
  0030c	e58d3000	 str         r3, [sp]

; 62   :     }

  00310	eaffffe9	 b           |$LN4@GetIndexBy|
  00314		 |$LN3@GetIndexBy|

; 63   : #ifndef SHIP_BUILD
; 64   :     if ((_rgI2CDevice[i].device == OMAP_DEVICE_NONE))

  00314	e59d1000	 ldr         r1, [sp]
  00318	e3a03038	 mov         r3, #0x38
  0031c	e0020391	 mul         r2, r1, r3
  00320	e59f3048	 ldr         r3, [pc, #0x48]
  00324	e0833002	 add         r3, r3, r2
  00328	e5933000	 ldr         r3, [r3]
  0032c	e3730001	 cmn         r3, #1
  00330	1a000005	 bne         |$LN1@GetIndexBy|

; 65   :     {
; 66   :         ERRORMSG(1,(TEXT("Device not found")));

  00334	e3a02042	 mov         r2, #0x42
  00338	e59f102c	 ldr         r1, [pc, #0x2C]
  0033c	e59f0024	 ldr         r0, [pc, #0x24]
  00340	eb000000	 bl          NKDbgPrintfW
  00344	e59f0018	 ldr         r0, [pc, #0x18]
  00348	eb000000	 bl          NKDbgPrintfW
  0034c		 |$LN1@GetIndexBy|

; 67   :     }
; 68   : #endif
; 69   :     return i;

  0034c	e59d3000	 ldr         r3, [sp]
  00350	e58d3004	 str         r3, [sp, #4]

; 70   : }

  00354	e59d0004	 ldr         r0, [sp, #4]
  00358	e28dd008	 add         sp, sp, #8
  0035c	e89d6000	 ldmia       sp, {sp, lr}
  00360	e12fff1e	 bx          lr
  00364		 |$LN10@GetIndexBy|
  00364		 |$LN11@GetIndexBy|
  00364	00000000	 DCD         |??_C@_1CC@EHKJMBJI@?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAf?$AAo?$AAu?$AAn?$AAd?$AA?$AA@|
  00368		 |$LN12@GetIndexBy|
  00368	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  0036c		 |$LN13@GetIndexBy|
  0036c	00000000	 DCD         |??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00370		 |$LN14@GetIndexBy|
  00370	00000000	 DCD         |_rgI2CDevice|
  00374		 |$M45209|

			 ENDP  ; |GetIndexByDevice|

	EXPORT	|??_C@_1GK@FLELOHLG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAR?$AAe?$AAs?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl@| [ DATA ] ; `string'
	EXPORT	|I2CPollStatus|

  00020			 AREA	 |.pdata|, PDATA
|$T45222| DCD	|$LN6@I2CResetDe|
	DCD	0x40005904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@FLELOHLG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAR?$AAe?$AAs?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, "R", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, "D", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "-", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t", 0x0, "o"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00374			 AREA	 |.text|, CODE, ARM

  00374		 |I2CResetDevice| PROC

; 154  : {

  00374		 |$LN6@I2CResetDe|
  00374	e1a0c00d	 mov         r12, sp
  00378	e92d0001	 stmdb       sp!, {r0}
  0037c	e92d5000	 stmdb       sp!, {r12, lr}
  00380	e24dd014	 sub         sp, sp, #0x14
  00384		 |$M45219|

; 155  :     UINT16 stat;
; 156  :     BOOL bRet = TRUE;

  00384	e3a03001	 mov         r3, #1
  00388	e58d3008	 str         r3, [sp, #8]

; 157  :     OMAP_I2C_REGS *pI2CRegs = pDevice->pI2CRegs;

  0038c	e59d301c	 ldr         r3, [sp, #0x1C]
  00390	e2833018	 add         r3, r3, #0x18
  00394	e5933000	 ldr         r3, [r3]
  00398	e58d3004	 str         r3, [sp, #4]

; 158  : 
; 159  :     // disable i2c
; 160  :     OUTREG16(&pI2CRegs->CON, 0);

  0039c	e59d3004	 ldr         r3, [sp, #4]
  003a0	e2832024	 add         r2, r3, #0x24
  003a4	e3a03000	 mov         r3, #0
  003a8	e1c230b0	 strh        r3, [r2]

; 161  : 
; 162  :     // put i2c in reset
; 163  :     OUTREG16(&pI2CRegs->SYSC, I2C_SYSC_SRST);

  003ac	e59d3004	 ldr         r3, [sp, #4]
  003b0	e2832020	 add         r2, r3, #0x20
  003b4	e3a03002	 mov         r3, #2
  003b8	e1c230b0	 strh        r3, [r2]

; 164  : 
; 165  :     // pull i2c out of reset by setting I2C_CON_EN
; 166  :     SETREG16(&pI2CRegs->CON, I2C_CON_EN);

  003bc	e59d3004	 ldr         r3, [sp, #4]
  003c0	e2833024	 add         r3, r3, #0x24
  003c4	e1d330b0	 ldrh        r3, [r3]
  003c8	e3833902	 orr         r3, r3, #2, 18
  003cc	e1a02803	 mov         r2, r3, lsl #16
  003d0	e1a02822	 mov         r2, r2, lsr #16
  003d4	e59d3004	 ldr         r3, [sp, #4]
  003d8	e2833024	 add         r3, r3, #0x24
  003dc	e1c320b0	 strh        r2, [r3]

; 167  : 
; 168  :     if (I2CPollStatus(&pI2CRegs->SYSS, I2C_SYSS_RDONE, I2C_SYSS_RDONE, 10) == FALSE)

  003e0	e3a0300a	 mov         r3, #0xA
  003e4	e3a02001	 mov         r2, #1
  003e8	e3a01001	 mov         r1, #1
  003ec	e59d0004	 ldr         r0, [sp, #4]
  003f0	e2800010	 add         r0, r0, #0x10
  003f4	eb000000	 bl          I2CPollStatus
  003f8	e58d0010	 str         r0, [sp, #0x10]
  003fc	e59d3010	 ldr         r3, [sp, #0x10]
  00400	e3530000	 cmp         r3, #0
  00404	1a000003	 bne         |$LN1@I2CResetDe|

; 169  :     {
; 170  :         OALMSG(OAL_LOG_WARN, (
; 171  :             L"WARN: I2C::I2CResetDevice - failed to reset device\r\n"
; 172  :             ));

  00408	e59f00c4	 ldr         r0, [pc, #0xC4]
  0040c	eb000000	 bl          NKDbgPrintfW

; 173  :         bRet = FALSE;

  00410	e3a03000	 mov         r3, #0
  00414	e58d3008	 str         r3, [sp, #8]
  00418		 |$LN1@I2CResetDe|

; 174  :     }
; 175  : 
; 176  :     // disable i2c
; 177  :     OUTREG16(&pI2CRegs->CON, 0);

  00418	e59d3004	 ldr         r3, [sp, #4]
  0041c	e2832024	 add         r2, r3, #0x24
  00420	e3a03000	 mov         r3, #0
  00424	e1c230b0	 strh        r3, [r2]

; 178  : 
; 179  :     // clear status
; 180  :     stat = INREG16(&pI2CRegs->STAT);

  00428	e59d3004	 ldr         r3, [sp, #4]
  0042c	e2833008	 add         r3, r3, #8
  00430	e1d330b0	 ldrh        r3, [r3]
  00434	e1cd30b0	 strh        r3, [sp]

; 181  :     OUTREG16(&pI2CRegs->STAT, stat);

  00438	e59d3004	 ldr         r3, [sp, #4]
  0043c	e2832008	 add         r2, r3, #8
  00440	e1dd30b0	 ldrh        r3, [sp]
  00444	e1c230b0	 strh        r3, [r2]

; 182  : 
; 183  :     // Set prescaler and low/high periods
; 184  :     I2CSetDeviceBaudrate(pDevice, pDevice->currentBaudIndex);

  00448	e59d301c	 ldr         r3, [sp, #0x1C]
  0044c	e283301c	 add         r3, r3, #0x1C
  00450	e5931000	 ldr         r1, [r3]
  00454	e59d001c	 ldr         r0, [sp, #0x1C]
  00458	eb000000	 bl          I2CSetDeviceBaudrate

; 185  : 
; 186  :     // UNDONE:
; 187  :     //   NEED remove hardcoding of thresholds
; 188  :     OUTREG16(&pI2CRegs->BUF, 
; 189  :         I2C_BUF_XTRSH(pDevice->txFifoThreshold) | 
; 190  :         I2C_BUF_RTRSH(pDevice->rxFifoThreshold)
; 191  :         );

  0045c	e59d301c	 ldr         r3, [sp, #0x1C]
  00460	e2833014	 add         r3, r3, #0x14
  00464	e5933000	 ldr         r3, [r3]
  00468	e203203f	 and         r2, r3, #0x3F
  0046c	e59d301c	 ldr         r3, [sp, #0x1C]
  00470	e2833010	 add         r3, r3, #0x10
  00474	e5933000	 ldr         r3, [r3]
  00478	e1a03403	 mov         r3, r3, lsl #8
  0047c	e2033c3f	 and         r3, r3, #0x3F, 24
  00480	e1823003	 orr         r3, r2, r3
  00484	e1a02803	 mov         r2, r3, lsl #16
  00488	e1a02822	 mov         r2, r2, lsr #16
  0048c	e59d3004	 ldr         r3, [sp, #4]
  00490	e2833014	 add         r3, r3, #0x14
  00494	e1c320b0	 strh        r2, [r3]

; 192  : 
; 193  :     // configure own address
; 194  :     OUTREG16(&pI2CRegs->OA0, I2C_MASTER_CODE | pDevice->ownAddress);

  00498	e59d301c	 ldr         r3, [sp, #0x1C]
  0049c	e2833004	 add         r3, r3, #4
  004a0	e5933000	 ldr         r3, [r3]
  004a4	e3833901	 orr         r3, r3, #1, 18
  004a8	e1a02803	 mov         r2, r3, lsl #16
  004ac	e1a02822	 mov         r2, r2, lsr #16
  004b0	e59d3004	 ldr         r3, [sp, #4]
  004b4	e2833028	 add         r3, r3, #0x28
  004b8	e1c320b0	 strh        r2, [r3]

; 195  : 
; 196  :     return bRet;

  004bc	e59d3008	 ldr         r3, [sp, #8]
  004c0	e58d300c	 str         r3, [sp, #0xC]

; 197  : }

  004c4	e59d000c	 ldr         r0, [sp, #0xC]
  004c8	e28dd014	 add         sp, sp, #0x14
  004cc	e89d6000	 ldmia       sp, {sp, lr}
  004d0	e12fff1e	 bx          lr
  004d4		 |$LN7@I2CResetDe|
  004d4		 |$LN8@I2CResetDe|
  004d4	00000000	 DCD         |??_C@_1GK@FLELOHLG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAR?$AAe?$AAs?$AAe?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl@|
  004d8		 |$M45220|

			 ENDP  ; |I2CResetDevice|

	IMPORT	|_rgScaleTable|

  00028			 AREA	 |.pdata|, PDATA
|$T45230| DCD	|$LN5@I2CSetDevi|
	DCD	0x40003804
; Function compile flags: /Odtp

  004d8			 AREA	 |.text|, CODE, ARM

  004d8		 |I2CSetDeviceBaudrate| PROC

; 108  : {

  004d8		 |$LN5@I2CSetDevi|
  004d8	e1a0c00d	 mov         r12, sp
  004dc	e92d0003	 stmdb       sp!, {r0, r1}
  004e0	e92d5000	 stmdb       sp!, {r12, lr}
  004e4	e24dd004	 sub         sp, sp, #4
  004e8		 |$M45227|

; 109  :     pDevice->currentBaudIndex = baudIndex;

  004e8	e59d300c	 ldr         r3, [sp, #0xC]
  004ec	e283201c	 add         r2, r3, #0x1C
  004f0	e59d3010	 ldr         r3, [sp, #0x10]
  004f4	e5823000	 str         r3, [r2]

; 110  :     OUTREG16(&pDevice->pI2CRegs->PSC,  _rgScaleTable[pDevice->currentBaudIndex].psc);

  004f8	e59d300c	 ldr         r3, [sp, #0xC]
  004fc	e283301c	 add         r3, r3, #0x1C
  00500	e5931000	 ldr         r1, [r3]
  00504	e3a03006	 mov         r3, #6
  00508	e0020391	 mul         r2, r1, r3
  0050c	e59f30a0	 ldr         r3, [pc, #0xA0]
  00510	e0831002	 add         r1, r3, r2
  00514	e59d300c	 ldr         r3, [sp, #0xC]
  00518	e2833018	 add         r3, r3, #0x18
  0051c	e5933000	 ldr         r3, [r3]
  00520	e2832030	 add         r2, r3, #0x30
  00524	e1d130b0	 ldrh        r3, [r1]
  00528	e1c230b0	 strh        r3, [r2]

; 111  :     OUTREG16(&pDevice->pI2CRegs->SCLL, _rgScaleTable[pDevice->currentBaudIndex].scll);

  0052c	e59d300c	 ldr         r3, [sp, #0xC]
  00530	e283301c	 add         r3, r3, #0x1C
  00534	e5931000	 ldr         r1, [r3]
  00538	e3a03006	 mov         r3, #6
  0053c	e0020391	 mul         r2, r1, r3
  00540	e59f306c	 ldr         r3, [pc, #0x6C]
  00544	e0833002	 add         r3, r3, r2
  00548	e2831002	 add         r1, r3, #2
  0054c	e59d300c	 ldr         r3, [sp, #0xC]
  00550	e2833018	 add         r3, r3, #0x18
  00554	e5933000	 ldr         r3, [r3]
  00558	e2832034	 add         r2, r3, #0x34
  0055c	e1d130b0	 ldrh        r3, [r1]
  00560	e1c230b0	 strh        r3, [r2]

; 112  :     OUTREG16(&pDevice->pI2CRegs->SCLH, _rgScaleTable[pDevice->currentBaudIndex].sclh);

  00564	e59d300c	 ldr         r3, [sp, #0xC]
  00568	e283301c	 add         r3, r3, #0x1C
  0056c	e5931000	 ldr         r1, [r3]
  00570	e3a03006	 mov         r3, #6
  00574	e0020391	 mul         r2, r1, r3
  00578	e59f3034	 ldr         r3, [pc, #0x34]
  0057c	e0833002	 add         r3, r3, r2
  00580	e2831004	 add         r1, r3, #4
  00584	e59d300c	 ldr         r3, [sp, #0xC]
  00588	e2833018	 add         r3, r3, #0x18
  0058c	e5933000	 ldr         r3, [r3]
  00590	e2832038	 add         r2, r3, #0x38
  00594	e1d130b0	 ldrh        r3, [r1]
  00598	e1c230b0	 strh        r3, [r2]

; 113  : 
; 114  :     return TRUE;

  0059c	e3a03001	 mov         r3, #1
  005a0	e58d3000	 str         r3, [sp]

; 115  : }

  005a4	e59d0000	 ldr         r0, [sp]
  005a8	e28dd004	 add         sp, sp, #4
  005ac	e89d6000	 ldmia       sp, {sp, lr}
  005b0	e12fff1e	 bx          lr
  005b4		 |$LN6@I2CSetDevi|
  005b4		 |$LN7@I2CSetDevi|
  005b4	00000000	 DCD         |_rgScaleTable|
  005b8		 |$M45228|

			 ENDP  ; |I2CSetDeviceBaudrate|

	EXPORT	|??_C@_1KA@GOKKFLEJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAP?$AAo?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?9?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@| [ DATA ] ; `string'

  00000			 AREA	 |.pdata|, PDATA
|$T45238| DCD	|$LN8@I2CPollSta|
	DCD	0x40002d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KA@GOKKFLEJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAP?$AAo?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?9?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, ":", 0x0, "I", 0x0, "2"
	DCB	0x0, "C", 0x0, "P", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "-", 0x0, " ", 0x0, "c", 0x0, "h", 0x0, "e", 0x0, "c"
	DCB	0x0, "k", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "s", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, " ", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "u", 0x0, "a", 0x0, "l", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "4", 0x0, "X", 0x0, ")"
	DCB	0x0, ",", 0x0, " ", 0x0, "e", 0x0, "x", 0x0, "p", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "4", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CPollStatus| PROC

; 126  : {

  00000		 |$LN8@I2CPollSta|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd014	 sub         sp, sp, #0x14
  00010		 |$M45235|

; 127  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 128  :     UINT matchTime = I2CGetTickCount() + timeout;

  00018	eb000000	 bl          I2CGetTickCount
  0001c	e58d000c	 str         r0, [sp, #0xC]
  00020	e59d200c	 ldr         r2, [sp, #0xC]
  00024	e59d3028	 ldr         r3, [sp, #0x28]
  00028	e0823003	 add         r3, r2, r3
  0002c	e58d3004	 str         r3, [sp, #4]
  00030		 |$LN3@I2CPollSta|

; 129  : 
; 130  :     while ((INREG16(pReg) & mask) != val)

  00030	e59d301c	 ldr         r3, [sp, #0x1C]
  00034	e1d330b0	 ldrh        r3, [r3]
  00038	e1a02003	 mov         r2, r3
  0003c	e1dd32b0	 ldrh        r3, [sp, #0x20]
  00040	e0022003	 and         r2, r2, r3
  00044	e1dd32b4	 ldrh        r3, [sp, #0x24]
  00048	e1520003	 cmp         r2, r3
  0004c	0a00000f	 beq         |$LN2@I2CPollSta|

; 131  :     {
; 132  :         if (I2CGetTickCount() > matchTime)

  00050	eb000000	 bl          I2CGetTickCount
  00054	e58d0010	 str         r0, [sp, #0x10]
  00058	e59d2010	 ldr         r2, [sp, #0x10]
  0005c	e59d3004	 ldr         r3, [sp, #4]
  00060	e1520003	 cmp         r2, r3
  00064	9a000008	 bls         |$LN1@I2CPollSta|

; 133  :         {
; 134  :             OALMSG(OAL_LOG_WARN, (
; 135  :                 L"WARN: I2C::I2CPollStatus - check has timed out actual"
; 136  :                 L"(0x%04X), expect(0x%04X)\r\n", 
; 137  :                 (INREG16(pReg) & mask), val
; 138  :                 ));

  00068	e1dd22b4	 ldrh        r2, [sp, #0x24]
  0006c	e59d301c	 ldr         r3, [sp, #0x1C]
  00070	e1d330b0	 ldrh        r3, [r3]
  00074	e1a01003	 mov         r1, r3
  00078	e1dd32b0	 ldrh        r3, [sp, #0x20]
  0007c	e0011003	 and         r1, r1, r3
  00080	e59f0028	 ldr         r0, [pc, #0x28]
  00084	eb000000	 bl          NKDbgPrintfW

; 139  :             goto cleanUp;

  00088	ea000002	 b           |$cleanUp$44716|
  0008c		 |$LN1@I2CPollSta|

; 140  :         }
; 141  :     }    

  0008c	eaffffe7	 b           |$LN3@I2CPollSta|
  00090		 |$LN2@I2CPollSta|

; 142  :     rc = TRUE;

  00090	e3a03001	 mov         r3, #1
  00094	e58d3000	 str         r3, [sp]
  00098		 |$cleanUp$44716|

; 143  : 
; 144  : cleanUp:
; 145  :     return rc;

  00098	e59d3000	 ldr         r3, [sp]
  0009c	e58d3008	 str         r3, [sp, #8]

; 146  : }

  000a0	e59d0008	 ldr         r0, [sp, #8]
  000a4	e28dd014	 add         sp, sp, #0x14
  000a8	e89d6000	 ldmia       sp, {sp, lr}
  000ac	e12fff1e	 bx          lr
  000b0		 |$LN9@I2CPollSta|
  000b0		 |$LN10@I2CPollSta|
  000b0	00000000	 DCD         |??_C@_1KA@GOKKFLEJ@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?3?$AAI?$AA2?$AAC?$AAP?$AAo?$AAl?$AAl?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?9?$AA?5?$AAc?$AAh?$AAe?$AAc?$AAk@|
  000b4		 |$M45236|

			 ENDP  ; |I2CPollStatus|

	IMPORT	|OALGetTickCount|

  00030			 AREA	 |.pdata|, PDATA
|$T45250| DCD	|$LN7@I2CGetTick|
	DCD	0x40001402
; Function compile flags: /Odtp

  005b8			 AREA	 |.text|, CODE, ARM

  005b8		 |I2CGetTickCount| PROC

; 97   : {

  005b8		 |$LN7@I2CGetTick|
  005b8	e52de004	 str         lr, [sp, #-4]!
  005bc	e24dd00c	 sub         sp, sp, #0xC
  005c0		 |$M45247|

; 98   :     return (_bPostInit == TRUE) ? OALGetTickCount() : 0;

  005c0	e59f303c	 ldr         r3, [pc, #0x3C]
  005c4	e5933000	 ldr         r3, [r3]
  005c8	e3530001	 cmp         r3, #1
  005cc	1a000004	 bne         |$LN3@I2CGetTick|
  005d0	eb000000	 bl          OALGetTickCount
  005d4	e58d0004	 str         r0, [sp, #4]
  005d8	e59d3004	 ldr         r3, [sp, #4]
  005dc	e58d3008	 str         r3, [sp, #8]
  005e0	ea000001	 b           |$LN4@I2CGetTick|
  005e4		 |$LN3@I2CGetTick|
  005e4	e3a03000	 mov         r3, #0
  005e8	e58d3008	 str         r3, [sp, #8]
  005ec		 |$LN4@I2CGetTick|
  005ec	e59d3008	 ldr         r3, [sp, #8]
  005f0	e58d3000	 str         r3, [sp]

; 99   : }

  005f4	e59d0000	 ldr         r0, [sp]
  005f8	e28dd00c	 add         sp, sp, #0xC
  005fc	e49de004	 ldr         lr, [sp], #4
  00600	e12fff1e	 bx          lr
  00604		 |$LN8@I2CGetTick|
  00604		 |$LN9@I2CGetTick|
  00604	00000000	 DCD         |_bPostInit|
  00608		 |$M45248|

			 ENDP  ; |I2CGetTickCount|

	EXPORT	|OALI2CPostInit|
	IMPORT	|InitializeCriticalSection|

  00038			 AREA	 |.pdata|, PDATA
|$T45258| DCD	|$LN7@OALI2CPost|
	DCD	0x40002202
; Function compile flags: /Odtp

  00608			 AREA	 |.text|, CODE, ARM

  00608		 |OALI2CPostInit| PROC

; 262  : {

  00608		 |$LN7@OALI2CPost|
  00608	e52de004	 str         lr, [sp, #-4]!
  0060c	e24dd008	 sub         sp, sp, #8
  00610		 |$M45255|

; 263  :     // create mutex objects
; 264  :     int i=0;

  00610	e3a03000	 mov         r3, #0
  00614	e58d3000	 str         r3, [sp]
  00618		 |$LN2@OALI2CPost|

; 265  : 
; 266  :     while (_rgI2CDevice[i].device != OMAP_DEVICE_NONE)    

  00618	e59d1000	 ldr         r1, [sp]
  0061c	e3a03038	 mov         r3, #0x38
  00620	e0020391	 mul         r2, r1, r3
  00624	e59f3060	 ldr         r3, [pc, #0x60]
  00628	e0833002	 add         r3, r3, r2
  0062c	e5933000	 ldr         r3, [r3]
  00630	e3730001	 cmn         r3, #1
  00634	0a00000a	 beq         |$LN1@OALI2CPost|

; 267  :     {
; 268  :         InitializeCriticalSection(&_rgI2CDevice[i].cs);

  00638	e59d1000	 ldr         r1, [sp]
  0063c	e3a03038	 mov         r3, #0x38
  00640	e0020391	 mul         r2, r1, r3
  00644	e59f3040	 ldr         r3, [pc, #0x40]
  00648	e0833002	 add         r3, r3, r2
  0064c	e2830024	 add         r0, r3, #0x24
  00650	eb000000	 bl          InitializeCriticalSection

; 269  :         i++;

  00654	e59d3000	 ldr         r3, [sp]
  00658	e2833001	 add         r3, r3, #1
  0065c	e58d3000	 str         r3, [sp]

; 270  :     }

  00660	eaffffec	 b           |$LN2@OALI2CPost|
  00664		 |$LN1@OALI2CPost|

; 271  : 
; 272  :     _bPostInit = TRUE;

  00664	e59f201c	 ldr         r2, [pc, #0x1C]
  00668	e3a03001	 mov         r3, #1
  0066c	e5823000	 str         r3, [r2]

; 273  :     return TRUE;

  00670	e3a03001	 mov         r3, #1
  00674	e58d3004	 str         r3, [sp, #4]

; 274  : }

  00678	e59d0004	 ldr         r0, [sp, #4]
  0067c	e28dd008	 add         sp, sp, #8
  00680	e49de004	 ldr         lr, [sp], #4
  00684	e12fff1e	 bx          lr
  00688		 |$LN8@OALI2CPost|
  00688		 |$LN9@OALI2CPost|
  00688	00000000	 DCD         |_bPostInit|
  0068c		 |$LN10@OALI2CPost|
  0068c	00000000	 DCD         |_rgI2CDevice|
  00690		 |$M45256|

			 ENDP  ; |OALI2CPostInit|

	EXPORT	|I2CSetSlaveAddress|

  00040			 AREA	 |.pdata|, PDATA
|$T45267| DCD	|$LN5@I2CSetSlav|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00690			 AREA	 |.text|, CODE, ARM

  00690		 |I2CSetSlaveAddress| PROC

; 278  : {

  00690		 |$LN5@I2CSetSlav|
  00690	e1a0c00d	 mov         r12, sp
  00694	e92d0003	 stmdb       sp!, {r0, r1}
  00698	e92d5000	 stmdb       sp!, {r12, lr}
  0069c	e24dd004	 sub         sp, sp, #4
  006a0		 |$M45264|

; 279  :     ((I2CContext_t*)hCtx)->slaveAddress = slaveAddress;

  006a0	e59d300c	 ldr         r3, [sp, #0xC]
  006a4	e2832010	 add         r2, r3, #0x10
  006a8	e1dd31b0	 ldrh        r3, [sp, #0x10]
  006ac	e5823000	 str         r3, [r2]

; 280  :    
; 281  :     return TRUE;

  006b0	e3a03001	 mov         r3, #1
  006b4	e58d3000	 str         r3, [sp]

; 282  : }

  006b8	e59d0000	 ldr         r0, [sp]
  006bc	e28dd004	 add         sp, sp, #4
  006c0	e89d6000	 ldmia       sp, {sp, lr}
  006c4	e12fff1e	 bx          lr
  006c8		 |$M45265|

			 ENDP  ; |I2CSetSlaveAddress|

	EXPORT	|I2COpen|
	IMPORT	|I2CDefaultI2CTimeout|
	IMPORT	|OALLocalAlloc|

  00048			 AREA	 |.pdata|, PDATA
|$T45273| DCD	|$LN6@I2COpen|
	DCD	0x40004204
; Function compile flags: /Odtp

  006c8			 AREA	 |.text|, CODE, ARM

  006c8		 |I2COpen| PROC

; 286  : {    

  006c8		 |$LN6@I2COpen|
  006c8	e1a0c00d	 mov         r12, sp
  006cc	e92d0001	 stmdb       sp!, {r0}
  006d0	e92d5000	 stmdb       sp!, {r12, lr}
  006d4	e24dd018	 sub         sp, sp, #0x18
  006d8		 |$M45270|

; 287  :     UINT idI2C;
; 288  :     
; 289  :     void* pData = LocalAlloc(LPTR, sizeof(I2CContext_t));

  006d8	e3a01018	 mov         r1, #0x18
  006dc	e3a00040	 mov         r0, #0x40
  006e0	eb000000	 bl          OALLocalAlloc
  006e4	e58d0010	 str         r0, [sp, #0x10]
  006e8	e59d3010	 ldr         r3, [sp, #0x10]
  006ec	e58d3004	 str         r3, [sp, #4]

; 290  :     I2CContext_t *pCtx = (I2CContext_t*)pData;

  006f0	e59d3004	 ldr         r3, [sp, #4]
  006f4	e58d3000	 str         r3, [sp]

; 291  : 
; 292  :         
; 293  :     if (pData == NULL) return NULL;

  006f8	e59d3004	 ldr         r3, [sp, #4]
  006fc	e3530000	 cmp         r3, #0
  00700	1a000002	 bne         |$LN1@I2COpen|
  00704	e3a03000	 mov         r3, #0
  00708	e58d300c	 str         r3, [sp, #0xC]
  0070c	ea000029	 b           |$LN2@I2COpen|
  00710		 |$LN1@I2COpen|

; 294  : 
; 295  :     idI2C = GetIndexByDevice(devId);

  00710	e59d0020	 ldr         r0, [sp, #0x20]
  00714	eb000000	 bl          GetIndexByDevice
  00718	e58d0014	 str         r0, [sp, #0x14]
  0071c	e59d3014	 ldr         r3, [sp, #0x14]
  00720	e58d3008	 str         r3, [sp, #8]

; 296  :     //OALMSG(OAL_LOG_WARN, (L"I2C: I2COpen bus %d\n", idI2C));
; 297  : 
; 298  :     // initialize structure
; 299  :     pCtx->idI2C     = idI2C;

  00724	e59d2008	 ldr         r2, [sp, #8]
  00728	e59d3000	 ldr         r3, [sp]
  0072c	e5832000	 str         r2, [r3]

; 300  :     pCtx->device    = _rgI2CDevice[idI2C].device;

  00730	e59d1008	 ldr         r1, [sp, #8]
  00734	e3a03038	 mov         r3, #0x38
  00738	e0020391	 mul         r2, r1, r3
  0073c	e59f3088	 ldr         r3, [pc, #0x88]
  00740	e0831002	 add         r1, r3, r2
  00744	e59d3000	 ldr         r3, [sp]
  00748	e2832004	 add         r2, r3, #4
  0074c	e5913000	 ldr         r3, [r1]
  00750	e5823000	 str         r3, [r2]

; 301  :     pCtx->baudIndex = _rgI2CDevice[idI2C].defaultBaudIndex;

  00754	e59d1008	 ldr         r1, [sp, #8]
  00758	e3a03038	 mov         r3, #0x38
  0075c	e0020391	 mul         r2, r1, r3
  00760	e59f3064	 ldr         r3, [pc, #0x64]
  00764	e0833002	 add         r3, r3, r2
  00768	e2831008	 add         r1, r3, #8
  0076c	e59d3000	 ldr         r3, [sp]
  00770	e2832008	 add         r2, r3, #8
  00774	e5913000	 ldr         r3, [r1]
  00778	e5823000	 str         r3, [r2]

; 302  :     pCtx->timeOut   = I2CDefaultI2CTimeout;

  0077c	e59d3000	 ldr         r3, [sp]
  00780	e283200c	 add         r2, r3, #0xC
  00784	e59f303c	 ldr         r3, [pc, #0x3C]
  00788	e5933000	 ldr         r3, [r3]
  0078c	e5823000	 str         r3, [r2]

; 303  :     pCtx->slaveAddress = 0;

  00790	e59d3000	 ldr         r3, [sp]
  00794	e2832010	 add         r2, r3, #0x10
  00798	e3a03000	 mov         r3, #0
  0079c	e5823000	 str         r3, [r2]

; 304  :     pCtx->subAddressMode = I2C_SUBADDRESS_MODE_8;

  007a0	e59d3000	 ldr         r3, [sp]
  007a4	e2832014	 add         r2, r3, #0x14
  007a8	e3a03001	 mov         r3, #1
  007ac	e5823000	 str         r3, [r2]

; 305  :     return pCtx;

  007b0	e59d3000	 ldr         r3, [sp]
  007b4	e58d300c	 str         r3, [sp, #0xC]
  007b8		 |$LN2@I2COpen|

; 306  : }

  007b8	e59d000c	 ldr         r0, [sp, #0xC]
  007bc	e28dd018	 add         sp, sp, #0x18
  007c0	e89d6000	 ldmia       sp, {sp, lr}
  007c4	e12fff1e	 bx          lr
  007c8		 |$LN7@I2COpen|
  007c8		 |$LN8@I2COpen|
  007c8	00000000	 DCD         |I2CDefaultI2CTimeout|
  007cc		 |$LN9@I2COpen|
  007cc	00000000	 DCD         |_rgI2CDevice|
  007d0		 |$M45271|

			 ENDP  ; |I2COpen|

	EXPORT	|I2CClose|
	IMPORT	|OALLocalFree|

  00050			 AREA	 |.pdata|, PDATA
|$T45281| DCD	|$LN5@I2CClose|
	DCD	0x40000703
; Function compile flags: /Odtp

  007d0			 AREA	 |.text|, CODE, ARM

  007d0		 |I2CClose| PROC

; 313  : {

  007d0		 |$LN5@I2CClose|
  007d0	e1a0c00d	 mov         r12, sp
  007d4	e92d0001	 stmdb       sp!, {r0}
  007d8	e92d5000	 stmdb       sp!, {r12, lr}
  007dc		 |$M45278|

; 314  :     LocalFree(hI2C);

  007dc	e59d0008	 ldr         r0, [sp, #8]
  007e0	eb000000	 bl          OALLocalFree

; 315  : 
; 316  : }

  007e4	e89d6000	 ldmia       sp, {sp, lr}
  007e8	e12fff1e	 bx          lr
  007ec		 |$M45279|

			 ENDP  ; |I2CClose|

	EXPORT	|??_C@_1GO@NCGHHJFM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAS?$AAA?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@MAODODEJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?3?$AA?5?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@ENFGBMIC@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@EBLPIMOB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@PBDHJPJA@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAn?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@GELEADBD@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAo?$AAf?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX@| [ DATA ] ; `string'
	EXPORT	|I2CWrite|
	IMPORT	|PrcmDeviceGetContextState|

  00058			 AREA	 |.pdata|, PDATA
|$T45289| DCD	|$LN21@I2CWrite|
	DCD	0x4000e704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@NCGHHJFM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAS?$AAA?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "("
	DCB	0x0, "S", 0x0, "A", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@MAODODEJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?3?$AA?5?$AA?$CF@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C"
	DCB	0x0, "T", 0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "r", 0x0, "c", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@ENFGBMIC@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "p", 0x0, "C", 0x0, "t"
	DCB	0x0, "x", 0x0, ":", 0x0, " ", 0x0, "%", 0x0, "X", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@EBLPIMOB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "W"
	DCB	0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "t", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p"
	DCB	0x0, "t", 0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@PBDHJPJA@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAn?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "n", 0x0, "A", 0x0, "t"
	DCB	0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p", 0x0, "t", 0x0, "s"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@GELEADBD@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAo?$AAf?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "I", 0x0, "2", 0x0, "C"
	DCB	0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e", 0x0, "("
	DCB	0x0, ")", 0x0, " ", 0x0, "o", 0x0, "f", 0x0, " ", 0x0, "p"
	DCB	0x0, "C", 0x0, "t", 0x0, "x", 0x0, ":", 0x0, " ", 0x0, "%"
	DCB	0x0, "X", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  007ec			 AREA	 |.text|, CODE, ARM

  007ec		 |I2CWrite| PROC

; 320  : {

  007ec		 |$LN21@I2CWrite|
  007ec	e1a0c00d	 mov         r12, sp
  007f0	e92d000f	 stmdb       sp!, {r0 - r3}
  007f4	e92d5000	 stmdb       sp!, {r12, lr}
  007f8	e24dd058	 sub         sp, sp, #0x58
  007fc		 |$M45286|

; 321  :     I2CResult_e             rc; 
; 322  :     UINT                    nAttempts;
; 323  :     UINT16                  con_mask;
; 324  :     UINT                    writeCount = (UINT)-1;

  007fc	e3e03000	 mvn         r3, #0
  00800	e58d3044	 str         r3, [sp, #0x44]

; 325  : 
; 326  :     int                     payloadCount;
; 327  :     I2C_PACKET_INFO_t       packetInfo;
; 328  :     I2C_TRANSACTION_INFO_t  transactInfo;
; 329  :     I2C_BUFFER_INFO_t       rgBufferInfo[2];
; 330  : 
; 331  :     I2CContext_t           *pCtx =    (I2CContext_t*)hCtx;    

  00804	e59d3060	 ldr         r3, [sp, #0x60]
  00808	e58d3004	 str         r3, [sp, #4]

; 332  :     I2CDevice_t            *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  0080c	e59d3004	 ldr         r3, [sp, #4]
  00810	e5931000	 ldr         r1, [r3]
  00814	e3a03038	 mov         r3, #0x38
  00818	e0020391	 mul         r2, r1, r3
  0081c	e59f3360	 ldr         r3, [pc, #0x360]
  00820	e0833002	 add         r3, r3, r2
  00824	e58d3000	 str         r3, [sp]

; 333  :                          //The Array _rgI2CDevice[pCtx->idI2C], is i2c address
; 334  :     
; 335  :     // Get hardware
; 336  :     I2CLock(pCtx);

  00828	e59d0004	 ldr         r0, [sp, #4]
  0082c	eb000000	 bl          I2CLock

; 337  : 
; 338  :     OALLog(L"\r Testing I2CWrite() of pCtx: %X\r\n", pCtx);   //Ray 13-10-14

  00830	e59d1004	 ldr         r1, [sp, #4]
  00834	e59f0344	 ldr         r0, [pc, #0x344]
  00838	eb000000	 bl          NKDbgPrintfW

; 339  : 
; 340  :     //OALMSG(OAL_LOG_WARN, (L"I2C: I2CWrite bus %d\n", idI2C));
; 341  : 
; 342  :     // Set this driver to Active Mode
; 343  :     EnableDeviceClocks(pCtx->device, TRUE);

  0083c	e3a01001	 mov         r1, #1
  00840	e59d3004	 ldr         r3, [sp, #4]
  00844	e2833004	 add         r3, r3, #4
  00848	e5930000	 ldr         r0, [r3]
  0084c	eb000000	 bl          EnableDeviceClocks

; 344  : 
; 345  : #if 1
; 346  :     if (PrcmDeviceGetContextState(pCtx->device, TRUE) == FALSE)

  00850	e3a01001	 mov         r1, #1
  00854	e59d3004	 ldr         r3, [sp, #4]
  00858	e2833004	 add         r3, r3, #4
  0085c	e5930000	 ldr         r0, [r3]
  00860	eb000000	 bl          PrcmDeviceGetContextState
  00864	e58d004c	 str         r0, [sp, #0x4C]
  00868	e59d304c	 ldr         r3, [sp, #0x4C]
  0086c	e3530000	 cmp         r3, #0
  00870	1a000001	 bne         |$LN14@I2CWrite|

; 347  :     {
; 348  :         I2CResetDevice(pDevice);

  00874	e59d0000	 ldr         r0, [sp]
  00878	eb000000	 bl          I2CResetDevice
  0087c		 |$LN14@I2CWrite|

; 349  :     }
; 350  : #endif
; 351  : 
; 352  :     // setup connection mask
; 353  :     con_mask = I2C_CON_MST;

  0087c	e3a03b01	 mov         r3, #1, 22
  00880	e1cd33b4	 strh        r3, [sp, #0x34]

; 354  :     if ((pDevice->ownAddress & 0x80) != 0)

  00884	e59d3000	 ldr         r3, [sp]
  00888	e2833004	 add         r3, r3, #4
  0088c	e5933000	 ldr         r3, [r3]
  00890	e3130080	 tst         r3, #0x80
  00894	0a000004	 beq         |$LN13@I2CWrite|

; 355  :     {
; 356  :         con_mask |= I2C_CON_XSA;

  00898	e1dd33b4	 ldrh        r3, [sp, #0x34]
  0089c	e3833c01	 orr         r3, r3, #1, 24
  008a0	e1a03803	 mov         r3, r3, lsl #16
  008a4	e1a03823	 mov         r3, r3, lsr #16
  008a8	e1cd33b4	 strh        r3, [sp, #0x34]
  008ac		 |$LN13@I2CWrite|

; 357  :     }
; 358  : 
; 359  :     // set transfer mode bits
; 360  :     if (pCtx->baudIndex == SLOWSPEED_MODE)

  008ac	e59d3004	 ldr         r3, [sp, #4]
  008b0	e2833008	 add         r3, r3, #8
  008b4	e5933000	 ldr         r3, [r3]
  008b8	e3530000	 cmp         r3, #0
  008bc	1a000014	 bne         |$LN12@I2CWrite|

; 361  :     if (pCtx->baudIndex == SLOWSPEED_MODE)

  008c0	e59d3004	 ldr         r3, [sp, #4]
  008c4	e2833008	 add         r3, r3, #8
  008c8	e5933000	 ldr         r3, [r3]
  008cc	e3530000	 cmp         r3, #0
  008d0	1a000002	 bne         |$LN11@I2CWrite|

; 362  :     {
; 363  :         con_mask |= I2C_CON_OPMODE_FS; 

  008d4	e1dd33b4	 ldrh        r3, [sp, #0x34]
  008d8	e1cd33b4	 strh        r3, [sp, #0x34]
  008dc	ea00000c	 b           |$LN10@I2CWrite|
  008e0		 |$LN11@I2CWrite|

; 364  :     }
; 365  :     else if (pCtx->baudIndex == FULLSPEED_MODE)

  008e0	e59d3004	 ldr         r3, [sp, #4]
  008e4	e2833008	 add         r3, r3, #8
  008e8	e5933000	 ldr         r3, [r3]
  008ec	e3530001	 cmp         r3, #1
  008f0	1a000002	 bne         |$LN9@I2CWrite|

; 366  :     {
; 367  :         con_mask |= I2C_CON_OPMODE_FS;

  008f4	e1dd33b4	 ldrh        r3, [sp, #0x34]
  008f8	e1cd33b4	 strh        r3, [sp, #0x34]

; 368  :     }
; 369  :     else

  008fc	ea000004	 b           |$LN8@I2CWrite|
  00900		 |$LN9@I2CWrite|

; 370  :     {
; 371  :         con_mask |= I2C_CON_OPMODE_HS;

  00900	e1dd33b4	 ldrh        r3, [sp, #0x34]
  00904	e3833a01	 orr         r3, r3, #1, 20
  00908	e1a03803	 mov         r3, r3, lsl #16
  0090c	e1a03823	 mov         r3, r3, lsr #16
  00910	e1cd33b4	 strh        r3, [sp, #0x34]
  00914		 |$LN8@I2CWrite|
  00914		 |$LN10@I2CWrite|
  00914		 |$LN12@I2CWrite|

; 372  :     }
; 373  : 
; 374  :     // fill in operation info
; 375  :     payloadCount = 0;

  00914	e3a03000	 mov         r3, #0
  00918	e58d3020	 str         r3, [sp, #0x20]

; 376  :     if (pCtx->subAddressMode != I2C_SUBADDRESS_MODE_0)

  0091c	e59d3004	 ldr         r3, [sp, #4]
  00920	e2833014	 add         r3, r3, #0x14
  00924	e5933000	 ldr         r3, [r3]
  00928	e3530000	 cmp         r3, #0
  0092c	0a000013	 beq         |$LN7@I2CWrite|

; 377  :     {
; 378  :         rgBufferInfo[payloadCount].size    = pCtx->subAddressMode;

  00930	e59d3004	 ldr         r3, [sp, #4]
  00934	e2830014	 add         r0, r3, #0x14
  00938	e59d1020	 ldr         r1, [sp, #0x20]
  0093c	e3a03008	 mov         r3, #8
  00940	e0020391	 mul         r2, r1, r3
  00944	e28d3024	 add         r3, sp, #0x24
  00948	e0832002	 add         r2, r3, r2
  0094c	e5903000	 ldr         r3, [r0]
  00950	e5823000	 str         r3, [r2]

; 379  :         rgBufferInfo[payloadCount].pBuffer = (UCHAR*)&subaddr;

  00954	e59d1020	 ldr         r1, [sp, #0x20]
  00958	e3a03008	 mov         r3, #8
  0095c	e0020391	 mul         r2, r1, r3
  00960	e28d3024	 add         r3, sp, #0x24
  00964	e0833002	 add         r3, r3, r2
  00968	e2832004	 add         r2, r3, #4
  0096c	e28d3064	 add         r3, sp, #0x64
  00970	e5823000	 str         r3, [r2]

; 380  :         ++payloadCount;

  00974	e59d3020	 ldr         r3, [sp, #0x20]
  00978	e2833001	 add         r3, r3, #1
  0097c	e58d3020	 str         r3, [sp, #0x20]
  00980		 |$LN7@I2CWrite|

; 381  :     }
; 382  : 
; 383  :     rgBufferInfo[payloadCount].size    = size;

  00980	e59d1020	 ldr         r1, [sp, #0x20]
  00984	e3a03008	 mov         r3, #8
  00988	e0020391	 mul         r2, r1, r3
  0098c	e28d3024	 add         r3, sp, #0x24
  00990	e0832002	 add         r2, r3, r2
  00994	e59d306c	 ldr         r3, [sp, #0x6C]
  00998	e5823000	 str         r3, [r2]

; 384  :     rgBufferInfo[payloadCount].pBuffer = (UCHAR*)pBuffer;

  0099c	e59d1020	 ldr         r1, [sp, #0x20]
  009a0	e3a03008	 mov         r3, #8
  009a4	e0020391	 mul         r2, r1, r3
  009a8	e28d3024	 add         r3, sp, #0x24
  009ac	e0833002	 add         r3, r3, r2
  009b0	e2832004	 add         r2, r3, #4
  009b4	e59d3068	 ldr         r3, [sp, #0x68]
  009b8	e5823000	 str         r3, [r2]

; 385  :     ++payloadCount;

  009bc	e59d3020	 ldr         r3, [sp, #0x20]
  009c0	e2833001	 add         r3, r3, #1
  009c4	e58d3020	 str         r3, [sp, #0x20]

; 386  : 
; 387  :     packetInfo.count  = payloadCount;

  009c8	e59d3020	 ldr         r3, [sp, #0x20]
  009cc	e58d3010	 str         r3, [sp, #0x10]

; 388  :     packetInfo.opType = kI2C_Write;

  009d0	e3a03001	 mov         r3, #1
  009d4	e58d3014	 str         r3, [sp, #0x14]

; 389  :     packetInfo.rgBuffers = rgBufferInfo;

  009d8	e28d3024	 add         r3, sp, #0x24
  009dc	e58d301c	 str         r3, [sp, #0x1C]

; 390  : 
; 391  :     transactInfo.count = 1;

  009e0	e3a03001	 mov         r3, #1
  009e4	e58d3038	 str         r3, [sp, #0x38]

; 392  :     transactInfo.con_mask = con_mask;

  009e8	e1dd33b4	 ldrh        r3, [sp, #0x34]
  009ec	e58d303c	 str         r3, [sp, #0x3C]

; 393  :     transactInfo.rgPackets = &packetInfo;

  009f0	e28d3010	 add         r3, sp, #0x10
  009f4	e58d3040	 str         r3, [sp, #0x40]

; 394  : 
; 395  :     // check if baud rate is different from current settings
; 396  :     if (pDevice->currentBaudIndex != pCtx->baudIndex)

  009f8	e59d3000	 ldr         r3, [sp]
  009fc	e283201c	 add         r2, r3, #0x1C
  00a00	e59d3004	 ldr         r3, [sp, #4]
  00a04	e2833008	 add         r3, r3, #8
  00a08	e5922000	 ldr         r2, [r2]
  00a0c	e5933000	 ldr         r3, [r3]
  00a10	e1520003	 cmp         r2, r3
  00a14	0a000004	 beq         |$LN6@I2CWrite|

; 397  :     {
; 398  :         I2CSetDeviceBaudrate(pDevice, pCtx->baudIndex);

  00a18	e59d3004	 ldr         r3, [sp, #4]
  00a1c	e2833008	 add         r3, r3, #8
  00a20	e5931000	 ldr         r1, [r3]
  00a24	e59d0000	 ldr         r0, [sp]
  00a28	eb000000	 bl          I2CSetDeviceBaudrate
  00a2c		 |$LN6@I2CWrite|

; 399  :     }
; 400  : 
; 401  :     
; 402  :     //tourble start, Ray 
; 403  :     // write data
; 404  :     nAttempts = 0;

  00a2c	e3a03000	 mov         r3, #0
  00a30	e58d300c	 str         r3, [sp, #0xC]
  00a34		 |$LN5@I2CWrite|

; 405  :     do
; 406  :     {
; 407  :         OALLog(L"\r Testing nAttempts: %d\r\n", nAttempts);

  00a34	e59d100c	 ldr         r1, [sp, #0xC]
  00a38	e59f013c	 ldr         r0, [pc, #0x13C]
  00a3c	eb000000	 bl          NKDbgPrintfW

; 408  : 
; 409  :         OALMSG(OAL_LOG_WARN && nAttempts,       //nAttempts == 0 doesn't execute               
; 410  :             (L"Write: Attempts = %d\r\n", (nAttempts + 1) ));

  00a40	e59d300c	 ldr         r3, [sp, #0xC]
  00a44	e3530000	 cmp         r3, #0
  00a48	0a000006	 beq         |$LN17@I2CWrite|
  00a4c	e59d300c	 ldr         r3, [sp, #0xC]
  00a50	e2831001	 add         r1, r3, #1
  00a54	e59f011c	 ldr         r0, [pc, #0x11C]
  00a58	eb000000	 bl          NKDbgPrintfW
  00a5c	e3a03001	 mov         r3, #1
  00a60	e58d3050	 str         r3, [sp, #0x50]
  00a64	ea000001	 b           |$LN18@I2CWrite|
  00a68		 |$LN17@I2CWrite|
  00a68	e3a03000	 mov         r3, #0
  00a6c	e58d3050	 str         r3, [sp, #0x50]
  00a70		 |$LN18@I2CWrite|

; 411  :         nAttempts++;

  00a70	e59d300c	 ldr         r3, [sp, #0xC]
  00a74	e2833001	 add         r3, r3, #1
  00a78	e58d300c	 str         r3, [sp, #0xC]

; 412  : 
; 413  :         OALLog(L"\r Testing pCtx: %X\r\n", pCtx);   //Check pCtx values yet exist!?, Ray 13-10-14

  00a7c	e59d1004	 ldr         r1, [sp, #4]
  00a80	e59f00ec	 ldr         r0, [pc, #0xEC]
  00a84	eb000000	 bl          NKDbgPrintfW

; 414  : 
; 415  :         rc = I2CTransaction(&transactInfo, pCtx);  //trouble ,Ray 13-10-15   

  00a88	e59d1004	 ldr         r1, [sp, #4]
  00a8c	e28d0038	 add         r0, sp, #0x38
  00a90	eb000000	 bl          I2CTransaction
  00a94	e58d0054	 str         r0, [sp, #0x54]
  00a98	e59d3054	 ldr         r3, [sp, #0x54]
  00a9c	e58d3008	 str         r3, [sp, #8]

; 416  :         OALLog(L"\r Testing I2CTransaction() rc: %d\r\n", rc); //rc == 2

  00aa0	e59d1008	 ldr         r1, [sp, #8]
  00aa4	e59f00c4	 ldr         r0, [pc, #0xC4]
  00aa8	eb000000	 bl          NKDbgPrintfW

; 417  :     }while (rc == kI2CRetry && (nAttempts < pDevice->maxRetries));

  00aac	e59d3008	 ldr         r3, [sp, #8]
  00ab0	e3530002	 cmp         r3, #2
  00ab4	1a000005	 bne         |$LN2@I2CWrite|
  00ab8	e59d3000	 ldr         r3, [sp]
  00abc	e283300c	 add         r3, r3, #0xC
  00ac0	e59d200c	 ldr         r2, [sp, #0xC]
  00ac4	e5933000	 ldr         r3, [r3]
  00ac8	e1520003	 cmp         r2, r3
  00acc	3affffd8	 bcc         |$LN5@I2CWrite|
  00ad0		 |$LN2@I2CWrite|

; 418  :     //3 && nAttempts < 5
; 419  :     // kI2CSuccess == 1
; 420  :     // kI2CFail    == 2
; 421  :     // kI2CRetry   == 3
; 422  :     
; 423  :             
; 424  :     if (rc != kI2CSuccess)      // rc != 1

  00ad0	e59d3008	 ldr         r3, [sp, #8]
  00ad4	e3530000	 cmp         r3, #0
  00ad8	0a000008	 beq         |$LN1@I2CWrite|

; 425  :     {
; 426  :         OALMSG(OAL_LOG_WARN, (L"WARN: I2C: Write failed "
; 427  :                               L"(SA=0x%02X, register=0x%08X)\r\n",
; 428  :                               pCtx->slaveAddress, subaddr
; 429  :                               ));

  00adc	e59d2064	 ldr         r2, [sp, #0x64]
  00ae0	e59d3004	 ldr         r3, [sp, #4]
  00ae4	e2833010	 add         r3, r3, #0x10
  00ae8	e5931000	 ldr         r1, [r3]
  00aec	e59f0078	 ldr         r0, [pc, #0x78]
  00af0	eb000000	 bl          NKDbgPrintfW

; 430  : 
; 431  :         writeCount = (UINT)-1;

  00af4	e3e03000	 mvn         r3, #0
  00af8	e58d3044	 str         r3, [sp, #0x44]

; 432  :         goto cleanUp;

  00afc	ea000007	 b           |$cleanUp$44839|
  00b00		 |$LN1@I2CWrite|

; 433  :     }
; 434  : 
; 435  :     // report number of bytes written
; 436  :     writeCount = rgBufferInfo[payloadCount - 1].size;

  00b00	e59d3020	 ldr         r3, [sp, #0x20]
  00b04	e2431001	 sub         r1, r3, #1
  00b08	e3a03008	 mov         r3, #8
  00b0c	e0020391	 mul         r2, r1, r3
  00b10	e28d3024	 add         r3, sp, #0x24
  00b14	e0833002	 add         r3, r3, r2
  00b18	e5933000	 ldr         r3, [r3]
  00b1c	e58d3044	 str         r3, [sp, #0x44]
  00b20		 |$cleanUp$44839|

; 437  : 
; 438  : cleanUp:
; 439  : 
; 440  :     // disable device
; 441  :     OUTREG16(&pDevice->pI2CRegs->CON, 0);

  00b20	e59d3000	 ldr         r3, [sp]
  00b24	e2833018	 add         r3, r3, #0x18
  00b28	e5933000	 ldr         r3, [r3]
  00b2c	e2832024	 add         r2, r3, #0x24
  00b30	e3a03000	 mov         r3, #0
  00b34	e1c230b0	 strh        r3, [r2]

; 442  : 
; 443  :     // Set this driver to suspend
; 444  :     EnableDeviceClocks(pCtx->device, FALSE);

  00b38	e3a01000	 mov         r1, #0
  00b3c	e59d3004	 ldr         r3, [sp, #4]
  00b40	e2833004	 add         r3, r3, #4
  00b44	e5930000	 ldr         r0, [r3]
  00b48	eb000000	 bl          EnableDeviceClocks

; 445  : 
; 446  :     // Release hardware    
; 447  :     I2CUnlock(pCtx);

  00b4c	e59d0004	 ldr         r0, [sp, #4]
  00b50	eb000000	 bl          I2CUnlock

; 448  : 
; 449  :     return writeCount;

  00b54	e59d3044	 ldr         r3, [sp, #0x44]
  00b58	e58d3048	 str         r3, [sp, #0x48]

; 450  : }

  00b5c	e59d0048	 ldr         r0, [sp, #0x48]
  00b60	e28dd058	 add         sp, sp, #0x58
  00b64	e89d6000	 ldmia       sp, {sp, lr}
  00b68	e12fff1e	 bx          lr
  00b6c		 |$LN22@I2CWrite|
  00b6c		 |$LN23@I2CWrite|
  00b6c	00000000	 DCD         |??_C@_1GO@NCGHHJFM@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAS?$AAA?$AA?$DN?$AA0?$AAx?$AA?$CF?$AA0@|
  00b70		 |$LN24@I2CWrite|
  00b70	00000000	 DCD         |??_C@_1EI@MAODODEJ@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?3?$AA?5?$AA?$CF@|
  00b74		 |$LN25@I2CWrite|
  00b74	00000000	 DCD         |??_C@_1CK@ENFGBMIC@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00b78		 |$LN26@I2CWrite|
  00b78	00000000	 DCD         |??_C@_1CO@EBLPIMOB@?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00b7c		 |$LN27@I2CWrite|
  00b7c	00000000	 DCD         |??_C@_1DE@PBDHJPJA@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAn?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?3?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00b80		 |$LN28@I2CWrite|
  00b80	00000000	 DCD         |??_C@_1EG@GELEADBD@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AAI?$AA2?$AAC?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA?$CJ?$AA?5?$AAo?$AAf?$AA?5?$AAp?$AAC?$AAt?$AAx?$AA?3?$AA?5?$AA?$CF?$AAX@|
  00b84		 |$LN29@I2CWrite|
  00b84	00000000	 DCD         |_rgI2CDevice|
  00b88		 |$M45287|

			 ENDP  ; |I2CWrite|

	EXPORT	|??_C@_1HM@LEOLDKCA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HPEFBBEG@?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IKDMELMO@?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|I2CRead|

  00060			 AREA	 |.pdata|, PDATA
|$T45305| DCD	|$LN20@I2CRead|
	DCD	0x40010804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LEOLDKCA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "s"
	DCB	0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, ",", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "X", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HPEFBBEG@?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "R"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "A"
	DCB	0x0, "t", 0x0, "t", 0x0, "e", 0x0, "m", 0x0, "p", 0x0, "t"
	DCB	0x0, "s", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IKDMELMO@?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "E"
	DCB	0x0, "S", 0x0, "E", 0x0, "T", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00b88			 AREA	 |.text|, CODE, ARM

  00b88		 |I2CRead| PROC

; 460  : {

  00b88		 |$LN20@I2CRead|
  00b88	e1a0c00d	 mov         r12, sp
  00b8c	e92d000f	 stmdb       sp!, {r0 - r3}
  00b90	e92d5000	 stmdb       sp!, {r12, lr}
  00b94	e24dd068	 sub         sp, sp, #0x68
  00b98		 |$M45302|

; 461  :     I2CResult_e             rc;
; 462  :     UINT                    nAttempts;
; 463  :     UINT16                  con_mask;
; 464  :     UINT                    readCount = (UINT) -1;

  00b98	e3e03000	 mvn         r3, #0
  00b9c	e58d3008	 str         r3, [sp, #8]

; 465  : 
; 466  :     int                     payloadCount;
; 467  :     I2C_TRANSACTION_INFO_t  transactInfo;    
; 468  :     I2C_PACKET_INFO_t       rgPacketInfo[2];
; 469  :     I2C_BUFFER_INFO_t       rgBufferInfo[2];
; 470  : 
; 471  :     I2CContext_t           *pCtx = (I2CContext_t*)hCtx;

  00ba0	e59d3070	 ldr         r3, [sp, #0x70]
  00ba4	e58d3004	 str         r3, [sp, #4]

; 472  :     I2CDevice_t            *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  00ba8	e59d3004	 ldr         r3, [sp, #4]
  00bac	e5931000	 ldr         r1, [r3]
  00bb0	e3a03038	 mov         r3, #0x38
  00bb4	e0020391	 mul         r2, r1, r3
  00bb8	e59f33e4	 ldr         r3, [pc, #0x3E4]
  00bbc	e0833002	 add         r3, r3, r2
  00bc0	e58d3000	 str         r3, [sp]

; 473  : 
; 474  :     // Get hardware
; 475  :     I2CLock(pCtx);

  00bc4	e59d0004	 ldr         r0, [sp, #4]
  00bc8	eb000000	 bl          I2CLock

; 476  : 
; 477  :     //OALMSG(OAL_LOG_WARN, (L"I2C: I2CRead bus %d\n", idI2C));
; 478  : 
; 479  :     // Set this driver to Active Mode
; 480  :     EnableDeviceClocks(pCtx->device, TRUE);

  00bcc	e3a01001	 mov         r1, #1
  00bd0	e59d3004	 ldr         r3, [sp, #4]
  00bd4	e2833004	 add         r3, r3, #4
  00bd8	e5930000	 ldr         r0, [r3]
  00bdc	eb000000	 bl          EnableDeviceClocks

; 481  : 
; 482  :     if (PrcmDeviceGetContextState(pCtx->device, TRUE) == FALSE)

  00be0	e3a01001	 mov         r1, #1
  00be4	e59d3004	 ldr         r3, [sp, #4]
  00be8	e2833004	 add         r3, r3, #4
  00bec	e5930000	 ldr         r0, [r3]
  00bf0	eb000000	 bl          PrcmDeviceGetContextState
  00bf4	e58d005c	 str         r0, [sp, #0x5C]
  00bf8	e59d305c	 ldr         r3, [sp, #0x5C]
  00bfc	e3530000	 cmp         r3, #0
  00c00	1a000006	 bne         |$LN13@I2CRead|

; 483  :     {
; 484  :         I2CResetDevice(pDevice);

  00c04	e59d0000	 ldr         r0, [sp]
  00c08	eb000000	 bl          I2CResetDevice

; 485  :         OALMSG(OAL_LOG_VERBOSE, (
; 486  :             L"I2C: RESET device %d\r\n", pCtx->device
; 487  :             ));

  00c0c	e59d3004	 ldr         r3, [sp, #4]
  00c10	e2833004	 add         r3, r3, #4
  00c14	e5931000	 ldr         r1, [r3]
  00c18	e59f0380	 ldr         r0, [pc, #0x380]
  00c1c	eb000000	 bl          NKDbgPrintfW
  00c20		 |$LN13@I2CRead|

; 488  : 	
; 489  :     }
; 490  : 
; 491  :     // setup CONnection mask
; 492  :     con_mask = I2C_CON_MST;

  00c20	e3a03b01	 mov         r3, #1, 22
  00c24	e1cd32b8	 strh        r3, [sp, #0x28]

; 493  :     if ((pDevice->ownAddress& 0x80) != 0)

  00c28	e59d3000	 ldr         r3, [sp]
  00c2c	e2833004	 add         r3, r3, #4
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e3130080	 tst         r3, #0x80
  00c38	0a000004	 beq         |$LN12@I2CRead|

; 494  :     {
; 495  :         con_mask |= I2C_CON_XSA;

  00c3c	e1dd32b8	 ldrh        r3, [sp, #0x28]
  00c40	e3833c01	 orr         r3, r3, #1, 24
  00c44	e1a03803	 mov         r3, r3, lsl #16
  00c48	e1a03823	 mov         r3, r3, lsr #16
  00c4c	e1cd32b8	 strh        r3, [sp, #0x28]
  00c50		 |$LN12@I2CRead|

; 496  :     }
; 497  : 
; 498  :     // set transfer mode bits
; 499  :     if (pCtx->baudIndex == SLOWSPEED_MODE)

  00c50	e59d3004	 ldr         r3, [sp, #4]
  00c54	e2833008	 add         r3, r3, #8
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e3530000	 cmp         r3, #0
  00c60	1a000002	 bne         |$LN11@I2CRead|

; 500  :     {
; 501  :         con_mask |= I2C_CON_OPMODE_FS; 

  00c64	e1dd32b8	 ldrh        r3, [sp, #0x28]
  00c68	e1cd32b8	 strh        r3, [sp, #0x28]
  00c6c	ea00000c	 b           |$LN10@I2CRead|
  00c70		 |$LN11@I2CRead|

; 502  :     }
; 503  :     else if (pCtx->baudIndex == FULLSPEED_MODE)

  00c70	e59d3004	 ldr         r3, [sp, #4]
  00c74	e2833008	 add         r3, r3, #8
  00c78	e5933000	 ldr         r3, [r3]
  00c7c	e3530001	 cmp         r3, #1
  00c80	1a000002	 bne         |$LN9@I2CRead|

; 504  :     {
; 505  :         con_mask |= I2C_CON_OPMODE_FS;

  00c84	e1dd32b8	 ldrh        r3, [sp, #0x28]
  00c88	e1cd32b8	 strh        r3, [sp, #0x28]

; 506  :     }
; 507  :     else

  00c8c	ea000004	 b           |$LN8@I2CRead|
  00c90		 |$LN9@I2CRead|

; 508  :     {
; 509  :         con_mask |= I2C_CON_OPMODE_HS;

  00c90	e1dd32b8	 ldrh        r3, [sp, #0x28]
  00c94	e3833a01	 orr         r3, r3, #1, 20
  00c98	e1a03803	 mov         r3, r3, lsl #16
  00c9c	e1a03823	 mov         r3, r3, lsr #16
  00ca0	e1cd32b8	 strh        r3, [sp, #0x28]
  00ca4		 |$LN8@I2CRead|
  00ca4		 |$LN10@I2CRead|

; 510  :     }
; 511  : 
; 512  :     // fill in operation info
; 513  :     payloadCount = 0;

  00ca4	e3a03000	 mov         r3, #0
  00ca8	e58d3014	 str         r3, [sp, #0x14]

; 514  :     if (pCtx->subAddressMode != I2C_SUBADDRESS_MODE_0)

  00cac	e59d3004	 ldr         r3, [sp, #4]
  00cb0	e2833014	 add         r3, r3, #0x14
  00cb4	e5933000	 ldr         r3, [r3]
  00cb8	e3530000	 cmp         r3, #0
  00cbc	0a00002e	 beq         |$LN7@I2CRead|

; 515  :     {
; 516  :         rgBufferInfo[payloadCount].size = pCtx->subAddressMode;

  00cc0	e59d3004	 ldr         r3, [sp, #4]
  00cc4	e2830014	 add         r0, r3, #0x14
  00cc8	e59d1014	 ldr         r1, [sp, #0x14]
  00ccc	e3a03008	 mov         r3, #8
  00cd0	e0020391	 mul         r2, r1, r3
  00cd4	e28d3018	 add         r3, sp, #0x18
  00cd8	e0832002	 add         r2, r3, r2
  00cdc	e5903000	 ldr         r3, [r0]
  00ce0	e5823000	 str         r3, [r2]

; 517  :         rgBufferInfo[payloadCount].pBuffer = (UCHAR*)&subaddr;

  00ce4	e59d1014	 ldr         r1, [sp, #0x14]
  00ce8	e3a03008	 mov         r3, #8
  00cec	e0020391	 mul         r2, r1, r3
  00cf0	e28d3018	 add         r3, sp, #0x18
  00cf4	e0833002	 add         r3, r3, r2
  00cf8	e2832004	 add         r2, r3, #4
  00cfc	e28d3074	 add         r3, sp, #0x74
  00d00	e5823000	 str         r3, [r2]

; 518  : 
; 519  :         rgPacketInfo[payloadCount].count = 1;

  00d04	e59d1014	 ldr         r1, [sp, #0x14]
  00d08	e3a03010	 mov         r3, #0x10
  00d0c	e0020391	 mul         r2, r1, r3
  00d10	e28d302c	 add         r3, sp, #0x2C
  00d14	e0832002	 add         r2, r3, r2
  00d18	e3a03001	 mov         r3, #1
  00d1c	e5823000	 str         r3, [r2]

; 520  :         rgPacketInfo[payloadCount].opType = kI2C_Write;

  00d20	e59d1014	 ldr         r1, [sp, #0x14]
  00d24	e3a03010	 mov         r3, #0x10
  00d28	e0020391	 mul         r2, r1, r3
  00d2c	e28d302c	 add         r3, sp, #0x2C
  00d30	e0833002	 add         r3, r3, r2
  00d34	e2832004	 add         r2, r3, #4
  00d38	e3a03001	 mov         r3, #1
  00d3c	e5823000	 str         r3, [r2]

; 521  :         rgPacketInfo[payloadCount].rgBuffers = &rgBufferInfo[payloadCount];

  00d40	e59d1014	 ldr         r1, [sp, #0x14]
  00d44	e3a03008	 mov         r3, #8
  00d48	e0020391	 mul         r2, r1, r3
  00d4c	e28d3018	 add         r3, sp, #0x18
  00d50	e0830002	 add         r0, r3, r2
  00d54	e59d1014	 ldr         r1, [sp, #0x14]
  00d58	e3a03010	 mov         r3, #0x10
  00d5c	e0020391	 mul         r2, r1, r3
  00d60	e28d302c	 add         r3, sp, #0x2C
  00d64	e0833002	 add         r3, r3, r2
  00d68	e283300c	 add         r3, r3, #0xC
  00d6c	e5830000	 str         r0, [r3]

; 522  :         ++payloadCount;

  00d70	e59d3014	 ldr         r3, [sp, #0x14]
  00d74	e2833001	 add         r3, r3, #1
  00d78	e58d3014	 str         r3, [sp, #0x14]
  00d7c		 |$LN7@I2CRead|

; 523  :     }
; 524  : 
; 525  :     rgBufferInfo[payloadCount].size = size;

  00d7c	e59d1014	 ldr         r1, [sp, #0x14]
  00d80	e3a03008	 mov         r3, #8
  00d84	e0020391	 mul         r2, r1, r3
  00d88	e28d3018	 add         r3, sp, #0x18
  00d8c	e0832002	 add         r2, r3, r2
  00d90	e59d307c	 ldr         r3, [sp, #0x7C]
  00d94	e5823000	 str         r3, [r2]

; 526  :     rgBufferInfo[payloadCount].pBuffer = (UCHAR*)pBuffer;

  00d98	e59d1014	 ldr         r1, [sp, #0x14]
  00d9c	e3a03008	 mov         r3, #8
  00da0	e0020391	 mul         r2, r1, r3
  00da4	e28d3018	 add         r3, sp, #0x18
  00da8	e0833002	 add         r3, r3, r2
  00dac	e2832004	 add         r2, r3, #4
  00db0	e59d3078	 ldr         r3, [sp, #0x78]
  00db4	e5823000	 str         r3, [r2]

; 527  : 
; 528  :     rgPacketInfo[payloadCount].count = 1;

  00db8	e59d1014	 ldr         r1, [sp, #0x14]
  00dbc	e3a03010	 mov         r3, #0x10
  00dc0	e0020391	 mul         r2, r1, r3
  00dc4	e28d302c	 add         r3, sp, #0x2C
  00dc8	e0832002	 add         r2, r3, r2
  00dcc	e3a03001	 mov         r3, #1
  00dd0	e5823000	 str         r3, [r2]

; 529  :     rgPacketInfo[payloadCount].opType = kI2C_Read;

  00dd4	e59d1014	 ldr         r1, [sp, #0x14]
  00dd8	e3a03010	 mov         r3, #0x10
  00ddc	e0020391	 mul         r2, r1, r3
  00de0	e28d302c	 add         r3, sp, #0x2C
  00de4	e0833002	 add         r3, r3, r2
  00de8	e2832004	 add         r2, r3, #4
  00dec	e3a03000	 mov         r3, #0
  00df0	e5823000	 str         r3, [r2]

; 530  :     rgPacketInfo[payloadCount].rgBuffers = &rgBufferInfo[payloadCount];

  00df4	e59d1014	 ldr         r1, [sp, #0x14]
  00df8	e3a03008	 mov         r3, #8
  00dfc	e0020391	 mul         r2, r1, r3
  00e00	e28d3018	 add         r3, sp, #0x18
  00e04	e0830002	 add         r0, r3, r2
  00e08	e59d1014	 ldr         r1, [sp, #0x14]
  00e0c	e3a03010	 mov         r3, #0x10
  00e10	e0020391	 mul         r2, r1, r3
  00e14	e28d302c	 add         r3, sp, #0x2C
  00e18	e0833002	 add         r3, r3, r2
  00e1c	e283300c	 add         r3, r3, #0xC
  00e20	e5830000	 str         r0, [r3]

; 531  :     ++payloadCount;

  00e24	e59d3014	 ldr         r3, [sp, #0x14]
  00e28	e2833001	 add         r3, r3, #1
  00e2c	e58d3014	 str         r3, [sp, #0x14]

; 532  : 
; 533  :     // link packets
; 534  :     transactInfo.count    = payloadCount;

  00e30	e59d3014	 ldr         r3, [sp, #0x14]
  00e34	e58d304c	 str         r3, [sp, #0x4C]

; 535  :     transactInfo.con_mask = con_mask;

  00e38	e1dd32b8	 ldrh        r3, [sp, #0x28]
  00e3c	e58d3050	 str         r3, [sp, #0x50]

; 536  :     transactInfo.rgPackets = rgPacketInfo;

  00e40	e28d302c	 add         r3, sp, #0x2C
  00e44	e58d3054	 str         r3, [sp, #0x54]

; 537  : 
; 538  :     // check if baud rate is different from current settings
; 539  :     if (pDevice->currentBaudIndex != pCtx->baudIndex)

  00e48	e59d3000	 ldr         r3, [sp]
  00e4c	e283201c	 add         r2, r3, #0x1C
  00e50	e59d3004	 ldr         r3, [sp, #4]
  00e54	e2833008	 add         r3, r3, #8
  00e58	e5922000	 ldr         r2, [r2]
  00e5c	e5933000	 ldr         r3, [r3]
  00e60	e1520003	 cmp         r2, r3
  00e64	0a000004	 beq         |$LN6@I2CRead|

; 540  :     {
; 541  :         I2CSetDeviceBaudrate(pDevice, pCtx->baudIndex);

  00e68	e59d3004	 ldr         r3, [sp, #4]
  00e6c	e2833008	 add         r3, r3, #8
  00e70	e5931000	 ldr         r1, [r3]
  00e74	e59d0000	 ldr         r0, [sp]
  00e78	eb000000	 bl          I2CSetDeviceBaudrate
  00e7c		 |$LN6@I2CRead|

; 542  :     }
; 543  : 
; 544  :     // write data
; 545  :     nAttempts = 0;

  00e7c	e3a03000	 mov         r3, #0
  00e80	e58d3010	 str         r3, [sp, #0x10]
  00e84		 |$LN5@I2CRead|

; 546  :     do
; 547  :     {
; 548  :         OALMSG(OAL_LOG_WARN && nAttempts, 
; 549  :             (L"Read: Attempts = %d\r\n", (nAttempts + 1)));

  00e84	e59d3010	 ldr         r3, [sp, #0x10]
  00e88	e3530000	 cmp         r3, #0
  00e8c	0a000006	 beq         |$LN16@I2CRead|
  00e90	e59d3010	 ldr         r3, [sp, #0x10]
  00e94	e2831001	 add         r1, r3, #1
  00e98	e59f00fc	 ldr         r0, [pc, #0xFC]
  00e9c	eb000000	 bl          NKDbgPrintfW
  00ea0	e3a03001	 mov         r3, #1
  00ea4	e58d3060	 str         r3, [sp, #0x60]
  00ea8	ea000001	 b           |$LN17@I2CRead|
  00eac		 |$LN16@I2CRead|
  00eac	e3a03000	 mov         r3, #0
  00eb0	e58d3060	 str         r3, [sp, #0x60]
  00eb4		 |$LN17@I2CRead|

; 550  : 
; 551  :         nAttempts++;

  00eb4	e59d3010	 ldr         r3, [sp, #0x10]
  00eb8	e2833001	 add         r3, r3, #1
  00ebc	e58d3010	 str         r3, [sp, #0x10]

; 552  :         rc = I2CTransaction(&transactInfo, pCtx);

  00ec0	e59d1004	 ldr         r1, [sp, #4]
  00ec4	e28d004c	 add         r0, sp, #0x4C
  00ec8	eb000000	 bl          I2CTransaction
  00ecc	e58d0064	 str         r0, [sp, #0x64]
  00ed0	e59d3064	 ldr         r3, [sp, #0x64]
  00ed4	e58d300c	 str         r3, [sp, #0xC]

; 553  :     }while (rc == kI2CRetry && (nAttempts < pDevice->maxRetries));

  00ed8	e59d300c	 ldr         r3, [sp, #0xC]
  00edc	e3530002	 cmp         r3, #2
  00ee0	1a000005	 bne         |$LN2@I2CRead|
  00ee4	e59d3000	 ldr         r3, [sp]
  00ee8	e283300c	 add         r3, r3, #0xC
  00eec	e59d2010	 ldr         r2, [sp, #0x10]
  00ef0	e5933000	 ldr         r3, [r3]
  00ef4	e1520003	 cmp         r2, r3
  00ef8	3affffe1	 bcc         |$LN5@I2CRead|
  00efc		 |$LN2@I2CRead|

; 554  : 
; 555  :     if (rc != kI2CSuccess)

  00efc	e59d300c	 ldr         r3, [sp, #0xC]
  00f00	e3530000	 cmp         r3, #0
  00f04	0a000008	 beq         |$LN1@I2CRead|

; 556  :     {
; 557  :         OALMSG(OAL_LOG_WARN, (L"WARN: I2C: Read failed "
; 558  :             L"(slave addr=0x%02X, register=0x%08X)\r\n",
; 559  :             pCtx->slaveAddress, subaddr
; 560  :             ));

  00f08	e59d2074	 ldr         r2, [sp, #0x74]
  00f0c	e59d3004	 ldr         r3, [sp, #4]
  00f10	e2833010	 add         r3, r3, #0x10
  00f14	e5931000	 ldr         r1, [r3]
  00f18	e59f0078	 ldr         r0, [pc, #0x78]
  00f1c	eb000000	 bl          NKDbgPrintfW

; 561  : 
; 562  :         readCount = (UINT)-1;

  00f20	e3e03000	 mvn         r3, #0
  00f24	e58d3008	 str         r3, [sp, #8]

; 563  :         goto cleanUp;

  00f28	ea000007	 b           |$cleanUp$44886|
  00f2c		 |$LN1@I2CRead|

; 564  :     }
; 565  : 
; 566  :     // report number of bytes written
; 567  :     readCount = rgBufferInfo[payloadCount - 1].size;

  00f2c	e59d3014	 ldr         r3, [sp, #0x14]
  00f30	e2431001	 sub         r1, r3, #1
  00f34	e3a03008	 mov         r3, #8
  00f38	e0020391	 mul         r2, r1, r3
  00f3c	e28d3018	 add         r3, sp, #0x18
  00f40	e0833002	 add         r3, r3, r2
  00f44	e5933000	 ldr         r3, [r3]
  00f48	e58d3008	 str         r3, [sp, #8]
  00f4c		 |$cleanUp$44886|

; 568  : 
; 569  : cleanUp:
; 570  : 
; 571  :     // disable device
; 572  :     OUTREG16(&pDevice->pI2CRegs->CON, 0);

  00f4c	e59d3000	 ldr         r3, [sp]
  00f50	e2833018	 add         r3, r3, #0x18
  00f54	e5933000	 ldr         r3, [r3]
  00f58	e2832024	 add         r2, r3, #0x24
  00f5c	e3a03000	 mov         r3, #0
  00f60	e1c230b0	 strh        r3, [r2]

; 573  : 
; 574  :     // Set this driver to suspend
; 575  :     EnableDeviceClocks(pCtx->device, FALSE);

  00f64	e3a01000	 mov         r1, #0
  00f68	e59d3004	 ldr         r3, [sp, #4]
  00f6c	e2833004	 add         r3, r3, #4
  00f70	e5930000	 ldr         r0, [r3]
  00f74	eb000000	 bl          EnableDeviceClocks

; 576  : 
; 577  :     // Release hardware    
; 578  :     I2CUnlock(pCtx);

  00f78	e59d0004	 ldr         r0, [sp, #4]
  00f7c	eb000000	 bl          I2CUnlock

; 579  : 
; 580  :     return readCount;

  00f80	e59d3008	 ldr         r3, [sp, #8]
  00f84	e58d3058	 str         r3, [sp, #0x58]

; 581  : }

  00f88	e59d0058	 ldr         r0, [sp, #0x58]
  00f8c	e28dd068	 add         sp, sp, #0x68
  00f90	e89d6000	 ldmia       sp, {sp, lr}
  00f94	e12fff1e	 bx          lr
  00f98		 |$LN21@I2CRead|
  00f98		 |$LN22@I2CRead|
  00f98	00000000	 DCD         |??_C@_1HM@LEOLDKCA@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@|
  00f9c		 |$LN23@I2CRead|
  00f9c	00000000	 DCD         |??_C@_1CM@HPEFBBEG@?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00fa0		 |$LN24@I2CRead|
  00fa0	00000000	 DCD         |??_C@_1CO@IKDMELMO@?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAE?$AAS?$AAE?$AAT?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00fa4		 |$LN25@I2CRead|
  00fa4	00000000	 DCD         |_rgI2CDevice|
  00fa8		 |$M45303|

			 ENDP  ; |I2CRead|

	EXPORT	|??_C@_1FM@DHKEFDNK@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@| [ DATA ] ; `string'
	EXPORT	|I2CRawRead|

  00068			 AREA	 |.pdata|, PDATA
|$T45318| DCD	|$LN18@I2CRawRead|
	DCD	0x4000b404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@DHKEFDNK@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, " ", 0x0, "f", 0x0, "a", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "(", 0x0, "s"
	DCB	0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " ", 0x0, "a"
	DCB	0x0, "d", 0x0, "d", 0x0, "r", 0x0, "=", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "2", 0x0, "X", 0x0, " ", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00fa8			 AREA	 |.text|, CODE, ARM

  00fa8		 |I2CRawRead| PROC

; 590  : {

  00fa8		 |$LN18@I2CRawRead|
  00fa8	e1a0c00d	 mov         r12, sp
  00fac	e92d0007	 stmdb       sp!, {r0 - r2}
  00fb0	e92d5000	 stmdb       sp!, {r12, lr}
  00fb4	e24dd068	 sub         sp, sp, #0x68
  00fb8		 |$M45315|

; 591  :     I2CResult_e             rc;
; 592  :     UINT                    nAttempts;
; 593  :     UINT16                  con_mask;
; 594  :     UINT                    readCount = (UINT) -1;

  00fb8	e3e03000	 mvn         r3, #0
  00fbc	e58d3008	 str         r3, [sp, #8]

; 595  : 
; 596  :     int                     payloadCount;
; 597  :     I2C_TRANSACTION_INFO_t  transactInfo;    
; 598  :     I2C_PACKET_INFO_t       rgPacketInfo[2];
; 599  :     I2C_BUFFER_INFO_t       rgBufferInfo[2];
; 600  : 
; 601  :     I2CContext_t           *pCtx = (I2CContext_t*)hCtx;

  00fc0	e59d3070	 ldr         r3, [sp, #0x70]
  00fc4	e58d3004	 str         r3, [sp, #4]

; 602  :     I2CDevice_t            *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  00fc8	e59d3004	 ldr         r3, [sp, #4]
  00fcc	e5931000	 ldr         r1, [r3]
  00fd0	e3a03038	 mov         r3, #0x38
  00fd4	e0020391	 mul         r2, r1, r3
  00fd8	e59f3294	 ldr         r3, [pc, #0x294]
  00fdc	e0833002	 add         r3, r3, r2
  00fe0	e58d3000	 str         r3, [sp]

; 603  : 
; 604  :     // Get hardware
; 605  :     I2CLock(pCtx);

  00fe4	e59d0004	 ldr         r0, [sp, #4]
  00fe8	eb000000	 bl          I2CLock

; 606  : 
; 607  :     //OALMSG(OAL_LOG_WARN, (L"I2C: I2CRead bus %d\n", idI2C));
; 608  : 
; 609  :     // Set this driver to Active Mode
; 610  :     EnableDeviceClocks(pCtx->device, TRUE);

  00fec	e3a01001	 mov         r1, #1
  00ff0	e59d3004	 ldr         r3, [sp, #4]
  00ff4	e2833004	 add         r3, r3, #4
  00ff8	e5930000	 ldr         r0, [r3]
  00ffc	eb000000	 bl          EnableDeviceClocks

; 611  : 
; 612  : #if 1
; 613  :     if (PrcmDeviceGetContextState(pCtx->device, TRUE) == FALSE)

  01000	e3a01001	 mov         r1, #1
  01004	e59d3004	 ldr         r3, [sp, #4]
  01008	e2833004	 add         r3, r3, #4
  0100c	e5930000	 ldr         r0, [r3]
  01010	eb000000	 bl          PrcmDeviceGetContextState
  01014	e58d005c	 str         r0, [sp, #0x5C]
  01018	e59d305c	 ldr         r3, [sp, #0x5C]
  0101c	e3530000	 cmp         r3, #0
  01020	1a000001	 bne         |$LN11@I2CRawRead|

; 614  :     {
; 615  :         I2CResetDevice(pDevice);

  01024	e59d0000	 ldr         r0, [sp]
  01028	eb000000	 bl          I2CResetDevice
  0102c		 |$LN11@I2CRawRead|

; 616  :     }
; 617  : #endif
; 618  : 
; 619  : 
; 620  :     // setup CONnection mask
; 621  :     con_mask = I2C_CON_MST;

  0102c	e3a03b01	 mov         r3, #1, 22
  01030	e1cd32b8	 strh        r3, [sp, #0x28]

; 622  :     if ((pDevice->ownAddress& 0x80) != 0)

  01034	e59d3000	 ldr         r3, [sp]
  01038	e2833004	 add         r3, r3, #4
  0103c	e5933000	 ldr         r3, [r3]
  01040	e3130080	 tst         r3, #0x80
  01044	0a000004	 beq         |$LN10@I2CRawRead|

; 623  :     {
; 624  :         con_mask |= I2C_CON_XSA;

  01048	e1dd32b8	 ldrh        r3, [sp, #0x28]
  0104c	e3833c01	 orr         r3, r3, #1, 24
  01050	e1a03803	 mov         r3, r3, lsl #16
  01054	e1a03823	 mov         r3, r3, lsr #16
  01058	e1cd32b8	 strh        r3, [sp, #0x28]
  0105c		 |$LN10@I2CRawRead|

; 625  :     }
; 626  : 
; 627  :     // set transfer mode bits
; 628  :     if (pCtx->baudIndex == SLOWSPEED_MODE)

  0105c	e59d3004	 ldr         r3, [sp, #4]
  01060	e2833008	 add         r3, r3, #8
  01064	e5933000	 ldr         r3, [r3]
  01068	e3530000	 cmp         r3, #0
  0106c	1a000002	 bne         |$LN9@I2CRawRead|

; 629  :     {
; 630  :         con_mask |= I2C_CON_OPMODE_FS; 

  01070	e1dd32b8	 ldrh        r3, [sp, #0x28]
  01074	e1cd32b8	 strh        r3, [sp, #0x28]
  01078	ea00000c	 b           |$LN8@I2CRawRead|
  0107c		 |$LN9@I2CRawRead|

; 631  :     }
; 632  :     else if (pCtx->baudIndex == FULLSPEED_MODE)

  0107c	e59d3004	 ldr         r3, [sp, #4]
  01080	e2833008	 add         r3, r3, #8
  01084	e5933000	 ldr         r3, [r3]
  01088	e3530001	 cmp         r3, #1
  0108c	1a000002	 bne         |$LN7@I2CRawRead|

; 633  :     {
; 634  :         con_mask |= I2C_CON_OPMODE_FS;

  01090	e1dd32b8	 ldrh        r3, [sp, #0x28]
  01094	e1cd32b8	 strh        r3, [sp, #0x28]

; 635  :     }
; 636  :     else

  01098	ea000004	 b           |$LN6@I2CRawRead|
  0109c		 |$LN7@I2CRawRead|

; 637  :     {
; 638  :         con_mask |= I2C_CON_OPMODE_HS;

  0109c	e1dd32b8	 ldrh        r3, [sp, #0x28]
  010a0	e3833a01	 orr         r3, r3, #1, 20
  010a4	e1a03803	 mov         r3, r3, lsl #16
  010a8	e1a03823	 mov         r3, r3, lsr #16
  010ac	e1cd32b8	 strh        r3, [sp, #0x28]
  010b0		 |$LN6@I2CRawRead|
  010b0		 |$LN8@I2CRawRead|

; 639  :     }
; 640  : 
; 641  :  
; 642  : 	payloadCount = 0;

  010b0	e3a03000	 mov         r3, #0
  010b4	e58d3014	 str         r3, [sp, #0x14]

; 643  :     rgPacketInfo[payloadCount].count = 1;

  010b8	e59d1014	 ldr         r1, [sp, #0x14]
  010bc	e3a03010	 mov         r3, #0x10
  010c0	e0020391	 mul         r2, r1, r3
  010c4	e28d302c	 add         r3, sp, #0x2C
  010c8	e0832002	 add         r2, r3, r2
  010cc	e3a03001	 mov         r3, #1
  010d0	e5823000	 str         r3, [r2]

; 644  :     rgPacketInfo[payloadCount].opType = kI2C_Read;

  010d4	e59d1014	 ldr         r1, [sp, #0x14]
  010d8	e3a03010	 mov         r3, #0x10
  010dc	e0020391	 mul         r2, r1, r3
  010e0	e28d302c	 add         r3, sp, #0x2C
  010e4	e0833002	 add         r3, r3, r2
  010e8	e2832004	 add         r2, r3, #4
  010ec	e3a03000	 mov         r3, #0
  010f0	e5823000	 str         r3, [r2]

; 645  :     rgPacketInfo[payloadCount].rgBuffers = &rgBufferInfo[payloadCount];

  010f4	e59d1014	 ldr         r1, [sp, #0x14]
  010f8	e3a03008	 mov         r3, #8
  010fc	e0020391	 mul         r2, r1, r3
  01100	e28d3018	 add         r3, sp, #0x18
  01104	e0830002	 add         r0, r3, r2
  01108	e59d1014	 ldr         r1, [sp, #0x14]
  0110c	e3a03010	 mov         r3, #0x10
  01110	e0020391	 mul         r2, r1, r3
  01114	e28d302c	 add         r3, sp, #0x2C
  01118	e0833002	 add         r3, r3, r2
  0111c	e283300c	 add         r3, r3, #0xC
  01120	e5830000	 str         r0, [r3]

; 646  : 
; 647  :     rgBufferInfo[payloadCount].size = size;

  01124	e59d1014	 ldr         r1, [sp, #0x14]
  01128	e3a03008	 mov         r3, #8
  0112c	e0020391	 mul         r2, r1, r3
  01130	e28d3018	 add         r3, sp, #0x18
  01134	e0832002	 add         r2, r3, r2
  01138	e59d3078	 ldr         r3, [sp, #0x78]
  0113c	e5823000	 str         r3, [r2]

; 648  :     rgBufferInfo[payloadCount].pBuffer = (UCHAR*)pBuffer;

  01140	e59d1014	 ldr         r1, [sp, #0x14]
  01144	e3a03008	 mov         r3, #8
  01148	e0020391	 mul         r2, r1, r3
  0114c	e28d3018	 add         r3, sp, #0x18
  01150	e0833002	 add         r3, r3, r2
  01154	e2832004	 add         r2, r3, #4
  01158	e59d3074	 ldr         r3, [sp, #0x74]
  0115c	e5823000	 str         r3, [r2]

; 649  : 
; 650  :     // link packets
; 651  :     transactInfo.count = payloadCount;

  01160	e59d3014	 ldr         r3, [sp, #0x14]
  01164	e58d304c	 str         r3, [sp, #0x4C]

; 652  :     transactInfo.con_mask = con_mask;

  01168	e1dd32b8	 ldrh        r3, [sp, #0x28]
  0116c	e58d3050	 str         r3, [sp, #0x50]

; 653  :     transactInfo.rgPackets = rgPacketInfo;

  01170	e28d302c	 add         r3, sp, #0x2C
  01174	e58d3054	 str         r3, [sp, #0x54]

; 654  : 
; 655  :     // write data
; 656  :     nAttempts = 0;

  01178	e3a03000	 mov         r3, #0
  0117c	e58d3010	 str         r3, [sp, #0x10]
  01180		 |$LN5@I2CRawRead|

; 657  :     do
; 658  :     {
; 659  :         OALMSG(OAL_LOG_WARN && nAttempts, 
; 660  :             (L"Read: Attempts = %d\r\n", (nAttempts + 1)));

  01180	e59d3010	 ldr         r3, [sp, #0x10]
  01184	e3530000	 cmp         r3, #0
  01188	0a000006	 beq         |$LN14@I2CRawRead|
  0118c	e59d3010	 ldr         r3, [sp, #0x10]
  01190	e2831001	 add         r1, r3, #1
  01194	e59f00d4	 ldr         r0, [pc, #0xD4]
  01198	eb000000	 bl          NKDbgPrintfW
  0119c	e3a03001	 mov         r3, #1
  011a0	e58d3060	 str         r3, [sp, #0x60]
  011a4	ea000001	 b           |$LN15@I2CRawRead|
  011a8		 |$LN14@I2CRawRead|
  011a8	e3a03000	 mov         r3, #0
  011ac	e58d3060	 str         r3, [sp, #0x60]
  011b0		 |$LN15@I2CRawRead|

; 661  : 
; 662  :         nAttempts++;

  011b0	e59d3010	 ldr         r3, [sp, #0x10]
  011b4	e2833001	 add         r3, r3, #1
  011b8	e58d3010	 str         r3, [sp, #0x10]

; 663  :         rc = I2CTransaction(&transactInfo, pCtx);

  011bc	e59d1004	 ldr         r1, [sp, #4]
  011c0	e28d004c	 add         r0, sp, #0x4C
  011c4	eb000000	 bl          I2CTransaction
  011c8	e58d0064	 str         r0, [sp, #0x64]
  011cc	e59d3064	 ldr         r3, [sp, #0x64]
  011d0	e58d300c	 str         r3, [sp, #0xC]

; 664  :     }
; 665  :     while (rc == kI2CRetry && (nAttempts < pDevice->maxRetries));

  011d4	e59d300c	 ldr         r3, [sp, #0xC]
  011d8	e3530002	 cmp         r3, #2
  011dc	1a000005	 bne         |$LN2@I2CRawRead|
  011e0	e59d3000	 ldr         r3, [sp]
  011e4	e283300c	 add         r3, r3, #0xC
  011e8	e59d2010	 ldr         r2, [sp, #0x10]
  011ec	e5933000	 ldr         r3, [r3]
  011f0	e1520003	 cmp         r2, r3
  011f4	3affffe1	 bcc         |$LN5@I2CRawRead|
  011f8		 |$LN2@I2CRawRead|

; 666  : 
; 667  :     if (rc != kI2CSuccess)

  011f8	e59d300c	 ldr         r3, [sp, #0xC]
  011fc	e3530000	 cmp         r3, #0
  01200	0a000006	 beq         |$LN1@I2CRawRead|

; 668  :     {
; 669  :         OALMSG(OAL_LOG_WARN, (L"WARN: I2C: Read failed "
; 670  :             L"(slave addr=0x%02X )\r\n",
; 671  :             pCtx->slaveAddress
; 672  :             ));

  01204	e59d3004	 ldr         r3, [sp, #4]
  01208	e2833010	 add         r3, r3, #0x10
  0120c	e5931000	 ldr         r1, [r3]
  01210	e59f0054	 ldr         r0, [pc, #0x54]
  01214	eb000000	 bl          NKDbgPrintfW

; 673  : 
; 674  :         readCount = (UINT)-1;

  01218	e3e03000	 mvn         r3, #0
  0121c	e58d3008	 str         r3, [sp, #8]
  01220		 |$LN1@I2CRawRead|
  01220		 |$cleanUp$44926|

; 675  :         goto cleanUp;
; 676  :     }
; 677  : 
; 678  : 
; 679  : cleanUp:
; 680  : 
; 681  :     // disable device
; 682  :     OUTREG16(&pDevice->pI2CRegs->CON, 0);

  01220	e59d3000	 ldr         r3, [sp]
  01224	e2833018	 add         r3, r3, #0x18
  01228	e5933000	 ldr         r3, [r3]
  0122c	e2832024	 add         r2, r3, #0x24
  01230	e3a03000	 mov         r3, #0
  01234	e1c230b0	 strh        r3, [r2]

; 683  : 
; 684  :     // Set this driver to suspend
; 685  :     EnableDeviceClocks(pCtx->device, FALSE);

  01238	e3a01000	 mov         r1, #0
  0123c	e59d3004	 ldr         r3, [sp, #4]
  01240	e2833004	 add         r3, r3, #4
  01244	e5930000	 ldr         r0, [r3]
  01248	eb000000	 bl          EnableDeviceClocks

; 686  : 
; 687  :     // Release hardware    
; 688  :     I2CUnlock(pCtx);

  0124c	e59d0004	 ldr         r0, [sp, #4]
  01250	eb000000	 bl          I2CUnlock

; 689  : 
; 690  :     return readCount;

  01254	e59d3008	 ldr         r3, [sp, #8]
  01258	e58d3058	 str         r3, [sp, #0x58]

; 691  : }

  0125c	e59d0058	 ldr         r0, [sp, #0x58]
  01260	e28dd068	 add         sp, sp, #0x68
  01264	e89d6000	 ldmia       sp, {sp, lr}
  01268	e12fff1e	 bx          lr
  0126c		 |$LN19@I2CRawRead|
  0126c		 |$LN20@I2CRawRead|
  0126c	00000000	 DCD         |??_C@_1FM@DHKEFDNK@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAI?$AA2?$AAC?$AA?3?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AAs?$AAl?$AAa?$AAv?$AAe?$AA?5?$AAa?$AAd@|
  01270		 |$LN21@I2CRawRead|
  01270	00000000	 DCD         |??_C@_1CM@HPEFBBEG@?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAA?$AAt?$AAt?$AAe?$AAm?$AAp?$AAt?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  01274		 |$LN22@I2CRawRead|
  01274	00000000	 DCD         |_rgI2CDevice|
  01278		 |$M45316|

			 ENDP  ; |I2CRawRead|

	EXPORT	|??_C@_1FK@IKKDNAB@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAk?$AAI?$AA2?$AAC?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CJ?$AA?0?$AA?5?$AAS@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KG@PMHDBGEH@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAt?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1NE@PIPMDEPG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAt?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EM@MFOBAEKO@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?1?$AA?1?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AAr?$AAc?$AA?3@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|I2CGetPacketSize|
	EXPORT	|I2CGetBufferSize|
	EXPORT	|??_C@_1JC@IEAALDDC@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JK@EGEOBGPO@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KK@MMJPNAFB@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAA?$AAC?$AAK?$AA?5@| [ DATA ] ; `string'

  00070			 AREA	 |.pdata|, PDATA
|$T45350| DCD	|$LN66@I2CTransac|
	DCD	0x40028704

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@IKKDNAB@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAk?$AAI?$AA2?$AAC?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CJ?$AA?0?$AA?5?$AAS@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "!", 0x0, "=", 0x0, " ", 0x0, "k", 0x0, "I"
	DCB	0x0, "2", 0x0, "C", 0x0, "S", 0x0, "u", 0x0, "c", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, ")", 0x0, ",", 0x0, " "
	DCB	0x0, "S", 0x0, "o", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, ".", 0x0, ".", 0x0, ".", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KG@PMHDBGEH@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAt?$AAr@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "P", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "a", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1NE@PIPMDEPG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAt?$AAr@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "P", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "t"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " "
	DCB	0x0, "b", 0x0, "o", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, "y", 0x0, " ", 0x0, "a", 0x0, "n"
	DCB	0x0, "d", 0x0, " ", 0x0, "f", 0x0, "r", 0x0, "e", 0x0, "e"
	DCB	0x0, "!", 0x0, "!", 0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d"
	DCB	0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@MFOBAEKO@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?1?$AA?1?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AAr?$AAc?$AA?3@| DCB 0xd
	DCB	0x0, " ", 0x0, "T", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "i"
	DCB	0x0, "n", 0x0, "g", 0x0, " ", 0x0, "/", 0x0, "/", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, ",", 0x0, "r", 0x0, "c"
	DCB	0x0, ":", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JC@IEAALDDC@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "P", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "A", 0x0, "c", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JK@EGEOBGPO@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAa?$AAr@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "P", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "L", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, " ", 0x0, "a"
	DCB	0x0, "r", 0x0, "b", 0x0, "i", 0x0, "t", 0x0, "r", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "w"
	DCB	0x0, "i", 0x0, "t", 0x0, "h", 0x0, " ", 0x0, "a", 0x0, "d"
	DCB	0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "2", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "t"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KK@MMJPNAFB@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAA?$AAC?$AAK?$AA?5@| DCB "W"
	DCB	0x0, "A", 0x0, "R", 0x0, "N", 0x0, ":", 0x0, " ", 0x0, "T"
	DCB	0x0, "r", 0x0, "a", 0x0, "n", 0x0, "s", 0x0, "a", 0x0, "c"
	DCB	0x0, "t", 0x0, "I", 0x0, "2", 0x0, "C", 0x0, "P", 0x0, "a"
	DCB	0x0, "c", 0x0, "k", 0x0, "e", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "N", 0x0, "o", 0x0, " ", 0x0, "A", 0x0, "C", 0x0, "K"
	DCB	0x0, " ", 0x0, "f", 0x0, "r", 0x0, "o", 0x0, "m", 0x0, " "
	DCB	0x0, "s", 0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "s", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "2", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  01278			 AREA	 |.text|, CODE, ARM

  01278		 |I2CTransaction| PROC

; 736  : {

  01278		 |$LN66@I2CTransac|
  01278	e1a0c00d	 mov         r12, sp
  0127c	e92d0003	 stmdb       sp!, {r0, r1}
  01280	e92d5000	 stmdb       sp!, {r12, lr}
  01284	e24dd098	 sub         sp, sp, #0x98
  01288		 |$M45347|

; 737  :     UINT16                  stat;
; 738  :     UINT                    con_mask;
; 739  : 
; 740  :     BOOL                    bHSMode;
; 741  : 
; 742  :     UINT                    maxTime;
; 743  :     UINT                    startTime;
; 744  : 
; 745  :     UCHAR                  *pData = NULL;

  01288	e3a03000	 mov         r3, #0
  0128c	e58d300c	 str         r3, [sp, #0xC]

; 746  :     I2C_PACKET_INFO_t      *pPacket = NULL;    

  01290	e3a03000	 mov         r3, #0
  01294	e58d3048	 str         r3, [sp, #0x48]

; 747  :     UINT                    idxBuffer, idxPacket;
; 748  :     UINT                    copyBufferCount, copyPacketCount;
; 749  :     UINT                    remainingInBuffer, remainingInPacket;
; 750  : 
; 751  :     UINT                    maxFifoSize;
; 752  :     UINT                    TxFifoThreshold, RxFifoThreshold;
; 753  : 
; 754  :     I2CResult_e             rc = kI2CRetry;

  01298	e3a03002	 mov         r3, #2
  0129c	e58d3008	 str         r3, [sp, #8]

; 755  :     I2CDevice_t            *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  012a0	e59d30a4	 ldr         r3, [sp, #0xA4]
  012a4	e5931000	 ldr         r1, [r3]
  012a8	e3a03038	 mov         r3, #0x38
  012ac	e0020391	 mul         r2, r1, r3
  012b0	e59f39d8	 ldr         r3, [pc, #0x9D8]
  012b4	e0833002	 add         r3, r3, r2
  012b8	e58d3000	 str         r3, [sp]

; 756  :     OMAP_I2C_REGS          *pI2CRegs = _rgI2CDevice[pCtx->idI2C].pI2CRegs;

  012bc	e59d30a4	 ldr         r3, [sp, #0xA4]
  012c0	e5931000	 ldr         r1, [r3]
  012c4	e3a03038	 mov         r3, #0x38
  012c8	e0020391	 mul         r2, r1, r3
  012cc	e59f39bc	 ldr         r3, [pc, #0x9BC]
  012d0	e0833002	 add         r3, r3, r2
  012d4	e2833018	 add         r3, r3, #0x18
  012d8	e5933000	 ldr         r3, [r3]
  012dc	e58d303c	 str         r3, [sp, #0x3C]

; 757  : 
; 758  :     // try to reprogram device
; 759  :     if (I2CReprogramDevice(pCtx) == FALSE)

  012e0	e59d00a4	 ldr         r0, [sp, #0xA4]
  012e4	eb000000	 bl          I2CReprogramDevice
  012e8	e58d0050	 str         r0, [sp, #0x50]
  012ec	e59d3050	 ldr         r3, [sp, #0x50]
  012f0	e3530000	 cmp         r3, #0
  012f4	1a000000	 bne         |$LN39@I2CTransac|

; 760  :     {
; 761  :         OALMSG(OAL_LOG_ERROR, (L"ERROR: OALI2CTransaction: "
; 762  :             L"Unable to program i2c device\r\n"
; 763  :             ));
; 764  :         goto cleanUp;

  012f8	ea000243	 b           |$cleanUp$44977|
  012fc		 |$LN39@I2CTransac|

; 765  :     }
; 766  : 
; 767  :     // check for high speed mode
; 768  :     bHSMode = (pInfo->con_mask & I2C_CON_OPMODE_HS) != 0;

  012fc	e59d30a0	 ldr         r3, [sp, #0xA0]
  01300	e2833004	 add         r3, r3, #4
  01304	e5933000	 ldr         r3, [r3]
  01308	e3130a01	 tst         r3, #1, 20
  0130c	0a000002	 beq         |$LN42@I2CTransac|
  01310	e3a03001	 mov         r3, #1
  01314	e58d3054	 str         r3, [sp, #0x54]
  01318	ea000001	 b           |$LN43@I2CTransac|
  0131c		 |$LN42@I2CTransac|
  0131c	e3a03000	 mov         r3, #0
  01320	e58d3054	 str         r3, [sp, #0x54]
  01324		 |$LN43@I2CTransac|
  01324	e59d3054	 ldr         r3, [sp, #0x54]
  01328	e58d3044	 str         r3, [sp, #0x44]

; 769  : 
; 770  :     // clear status
; 771  :     stat = INREG16(&pI2CRegs->STAT);

  0132c	e59d303c	 ldr         r3, [sp, #0x3C]
  01330	e2833008	 add         r3, r3, #8
  01334	e1d330b0	 ldrh        r3, [r3]
  01338	e1cd32b4	 strh        r3, [sp, #0x24]

; 772  :     OUTREG16(&pI2CRegs->STAT, stat);

  0133c	e59d303c	 ldr         r3, [sp, #0x3C]
  01340	e2832008	 add         r2, r3, #8
  01344	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01348	e1c230b0	 strh        r3, [r2]

; 773  : 
; 774  :     // get timeout
; 775  :     maxTime = pCtx->timeOut;

  0134c	e59d30a4	 ldr         r3, [sp, #0xA4]
  01350	e283300c	 add         r3, r3, #0xC
  01354	e5933000	 ldr         r3, [r3]
  01358	e58d302c	 str         r3, [sp, #0x2C]

; 776  : 
; 777  :     // get fifo size
; 778  :     maxFifoSize = pDevice->fifoSize;

  0135c	e59d3000	 ldr         r3, [sp]
  01360	e2833020	 add         r3, r3, #0x20
  01364	e5933000	 ldr         r3, [r3]
  01368	e58d3010	 str         r3, [sp, #0x10]

; 779  : 
; 780  :     // get fifo thresholds
; 781  :     RxFifoThreshold = pDevice->rxFifoThreshold;

  0136c	e59d3000	 ldr         r3, [sp]
  01370	e2833010	 add         r3, r3, #0x10
  01374	e5933000	 ldr         r3, [r3]
  01378	e58d3030	 str         r3, [sp, #0x30]

; 782  :     TxFifoThreshold = pDevice->txFifoThreshold;

  0137c	e59d3000	 ldr         r3, [sp]
  01380	e2833014	 add         r3, r3, #0x14
  01384	e5933000	 ldr         r3, [r3]
  01388	e58d3034	 str         r3, [sp, #0x34]

; 783  : 
; 784  :     // clear all FIFO's
; 785  :     SETREG16(&pI2CRegs->BUF, I2C_BUF_TXFIFO_CLR | I2C_BUF_RXFIFO_CLR);

  0138c	e59d303c	 ldr         r3, [sp, #0x3C]
  01390	e2833014	 add         r3, r3, #0x14
  01394	e1d330b0	 ldrh        r3, [r3]
  01398	e1a02003	 mov         r2, r3
  0139c	e3a03901	 mov         r3, #1, 18
  013a0	e3833040	 orr         r3, r3, #0x40
  013a4	e1823003	 orr         r3, r2, r3
  013a8	e1a02803	 mov         r2, r3, lsl #16
  013ac	e1a02822	 mov         r2, r2, lsr #16
  013b0	e59d303c	 ldr         r3, [sp, #0x3C]
  013b4	e2833014	 add         r3, r3, #0x14
  013b8	e1c320b0	 strh        r2, [r3]

; 786  : 
; 787  :     // initialize for first operation
; 788  :     //
; 789  :     idxPacket = 0;

  013bc	e3a03000	 mov         r3, #0
  013c0	e58d3004	 str         r3, [sp, #4]

; 790  :     idxBuffer = 0;

  013c4	e3a03000	 mov         r3, #0
  013c8	e58d3020	 str         r3, [sp, #0x20]

; 791  :     remainingInPacket = 0;

  013cc	e3a03000	 mov         r3, #0
  013d0	e58d301c	 str         r3, [sp, #0x1C]

; 792  :     remainingInBuffer = 0;

  013d4	e3a03000	 mov         r3, #0
  013d8	e58d3014	 str         r3, [sp, #0x14]

; 793  :     startTime = I2CGetTickCount();

  013dc	eb000000	 bl          I2CGetTickCount
  013e0	e58d0058	 str         r0, [sp, #0x58]
  013e4	e59d3058	 ldr         r3, [sp, #0x58]
  013e8	e58d3038	 str         r3, [sp, #0x38]

; 794  : 
; 795  :     // operation starts with an ARDY event
; 796  :     stat = I2C_STAT_ARDY;

  013ec	e3a03004	 mov         r3, #4
  013f0	e1cd32b4	 strh        r3, [sp, #0x24]

; 797  : 	
; 798  :     /* Enable I2C first, there is an issue to set CON En bit together with other
; 799  :         bits because of timing issue */
; 800  :     OUTREG16(&pI2CRegs->CON, I2C_CON_EN); 

  013f4	e59d303c	 ldr         r3, [sp, #0x3C]
  013f8	e2832024	 add         r2, r3, #0x24
  013fc	e3a03902	 mov         r3, #2, 18
  01400	e1c230b0	 strh        r3, [r2]
  01404		 |$LN38@I2CTransac|

; 801  : 	
; 802  :     do
; 803  :     {
; 804  :         // check for errors
; 805  :         if (stat & (I2C_STAT_NACK | I2C_STAT_AL | I2C_STAT_AERR))

  01404	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01408	e3130083	 tst         r3, #0x83
  0140c	0a00002e	 beq         |$LN35@I2CTransac|

; 806  :         {
; 807  :             // Reset i2c controller
; 808  :             DEBUGMSG(OAL_LOG_WARN && (stat & I2C_STAT_NACK), (L"WARN: TransactI2CPacket: "
; 809  :                 L"No ACK from slave device with address 0x%02x, stat = 0x%x\r\n",
; 810  :                 pCtx->slaveAddress, stat
; 811  :                 ));

  01410	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01414	e3130002	 tst         r3, #2
  01418	0a000008	 beq         |$LN44@I2CTransac|
  0141c	e1dd22b4	 ldrh        r2, [sp, #0x24]
  01420	e59d30a4	 ldr         r3, [sp, #0xA4]
  01424	e2833010	 add         r3, r3, #0x10
  01428	e5931000	 ldr         r1, [r3]
  0142c	e59f0858	 ldr         r0, [pc, #0x858]
  01430	eb000000	 bl          NKDbgPrintfW
  01434	e3a03001	 mov         r3, #1
  01438	e58d305c	 str         r3, [sp, #0x5C]
  0143c	ea000001	 b           |$LN45@I2CTransac|
  01440		 |$LN44@I2CTransac|
  01440	e3a03000	 mov         r3, #0
  01444	e58d305c	 str         r3, [sp, #0x5C]
  01448		 |$LN45@I2CTransac|

; 812  : 
; 813  :             DEBUGMSG(OAL_LOG_WARN && (stat & I2C_STAT_AL), (L"WARN: TransactI2CPacket: "
; 814  :                 L"Lost arbitration with address 0x%02x, stat = 0x%x\r\n",
; 815  :                 pCtx->slaveAddress, stat
; 816  :                 ));

  01448	e1dd32b4	 ldrh        r3, [sp, #0x24]
  0144c	e3130001	 tst         r3, #1
  01450	0a000008	 beq         |$LN46@I2CTransac|
  01454	e1dd22b4	 ldrh        r2, [sp, #0x24]
  01458	e59d30a4	 ldr         r3, [sp, #0xA4]
  0145c	e2833010	 add         r3, r3, #0x10
  01460	e5931000	 ldr         r1, [r3]
  01464	e59f081c	 ldr         r0, [pc, #0x81C]
  01468	eb000000	 bl          NKDbgPrintfW
  0146c	e3a03001	 mov         r3, #1
  01470	e58d3060	 str         r3, [sp, #0x60]
  01474	ea000001	 b           |$LN47@I2CTransac|
  01478		 |$LN46@I2CTransac|
  01478	e3a03000	 mov         r3, #0
  0147c	e58d3060	 str         r3, [sp, #0x60]
  01480		 |$LN47@I2CTransac|

; 817  : 
; 818  :             DEBUGMSG(OAL_LOG_WARN && (stat & I2C_STAT_AERR), (L"WARN: TransactI2CPacket: "
; 819  :                 L"Access error with address 0x%02x, stat = 0x%x\r\n",
; 820  :                 pCtx->slaveAddress, stat
; 821  :                 ));

  01480	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01484	e3130080	 tst         r3, #0x80
  01488	0a000008	 beq         |$LN48@I2CTransac|
  0148c	e1dd22b4	 ldrh        r2, [sp, #0x24]
  01490	e59d30a4	 ldr         r3, [sp, #0xA4]
  01494	e2833010	 add         r3, r3, #0x10
  01498	e5931000	 ldr         r1, [r3]
  0149c	e59f07e0	 ldr         r0, [pc, #0x7E0]
  014a0	eb000000	 bl          NKDbgPrintfW
  014a4	e3a03001	 mov         r3, #1
  014a8	e58d3064	 str         r3, [sp, #0x64]
  014ac	ea000001	 b           |$LN49@I2CTransac|
  014b0		 |$LN48@I2CTransac|
  014b0	e3a03000	 mov         r3, #0
  014b4	e58d3064	 str         r3, [sp, #0x64]
  014b8		 |$LN49@I2CTransac|

; 822  : 
; 823  :             
; 824  :             pPacket->result = 0;

  014b8	e59d3048	 ldr         r3, [sp, #0x48]
  014bc	e2832008	 add         r2, r3, #8
  014c0	e3a03000	 mov         r3, #0
  014c4	e5823000	 str         r3, [r2]

; 825  :             break;

  014c8	ea0001cf	 b           |$LN36@I2CTransac|
  014cc		 |$LN35@I2CTransac|

; 826  :         }
; 827  : 
; 828  :         // sent data
; 829  :         if (stat & (I2C_STAT_XDR | I2C_STAT_XRDY | I2C_STAT_XUDF))

  014cc	e1dd32b4	 ldrh        r3, [sp, #0x24]
  014d0	e1a02003	 mov         r2, r3
  014d4	e3a03b11	 mov         r3, #0x11, 22
  014d8	e3833010	 orr         r3, r3, #0x10
  014dc	e1120003	 tst         r2, r3
  014e0	0a00007e	 beq         |$LN34@I2CTransac|

; 830  :         {            
; 831  :             if (remainingInPacket && pPacket->opType == kI2C_Write)

  014e4	e59d301c	 ldr         r3, [sp, #0x1C]
  014e8	e3530000	 cmp         r3, #0
  014ec	0a000071	 beq         |$LN33@I2CTransac|
  014f0	e59d3048	 ldr         r3, [sp, #0x48]
  014f4	e2833004	 add         r3, r3, #4
  014f8	e5933000	 ldr         r3, [r3]
  014fc	e3530001	 cmp         r3, #1
  01500	1a00006c	 bne         |$LN33@I2CTransac|

; 832  :             {
; 833  :                 // determine number of bytes to copy
; 834  :                 if (stat & I2C_STAT_XUDF)

  01504	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01508	e3130b01	 tst         r3, #1, 22
  0150c	0a000002	 beq         |$LN32@I2CTransac|

; 835  :                 {
; 836  :                     copyPacketCount = maxFifoSize;

  01510	e59d3010	 ldr         r3, [sp, #0x10]
  01514	e58d3018	 str         r3, [sp, #0x18]
  01518	ea00000e	 b           |$LN31@I2CTransac|
  0151c		 |$LN32@I2CTransac|

; 837  :                 }
; 838  :                 else if (stat & I2C_STAT_XDR)

  0151c	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01520	e3130901	 tst         r3, #1, 18
  01524	0a000009	 beq         |$LN30@I2CTransac|

; 839  :                 {
; 840  :                     copyPacketCount = INREG16(&pI2CRegs->BUFSTAT);

  01528	e59d303c	 ldr         r3, [sp, #0x3C]
  0152c	e2833040	 add         r3, r3, #0x40
  01530	e1d330b0	 ldrh        r3, [r3]
  01534	e58d3018	 str         r3, [sp, #0x18]

; 841  :                     copyPacketCount &= I2C_BUFSTAT_TXSTAT_MASK;

  01538	e59d3018	 ldr         r3, [sp, #0x18]
  0153c	e203303f	 and         r3, r3, #0x3F
  01540	e58d3018	 str         r3, [sp, #0x18]

; 842  :                     copyPacketCount >>= I2C_BUFSTAT_TXSTAT_SHIFT;

  01544	e59d3018	 ldr         r3, [sp, #0x18]
  01548	e58d3018	 str         r3, [sp, #0x18]

; 843  :                 }                
; 844  :                 else 

  0154c	ea000001	 b           |$LN29@I2CTransac|
  01550		 |$LN30@I2CTransac|

; 845  :                 {
; 846  :                     copyPacketCount = TxFifoThreshold;

  01550	e59d3034	 ldr         r3, [sp, #0x34]
  01554	e58d3018	 str         r3, [sp, #0x18]
  01558		 |$LN29@I2CTransac|
  01558		 |$LN31@I2CTransac|

; 847  :                 }
; 848  : 
; 849  :                 // only write expected amount
; 850  :                 copyPacketCount = min(copyPacketCount, remainingInPacket); 

  01558	e59d2018	 ldr         r2, [sp, #0x18]
  0155c	e59d301c	 ldr         r3, [sp, #0x1C]
  01560	e1520003	 cmp         r2, r3
  01564	2a000002	 bcs         |$LN50@I2CTransac|
  01568	e59d3018	 ldr         r3, [sp, #0x18]
  0156c	e58d3068	 str         r3, [sp, #0x68]
  01570	ea000001	 b           |$LN51@I2CTransac|
  01574		 |$LN50@I2CTransac|
  01574	e59d301c	 ldr         r3, [sp, #0x1C]
  01578	e58d3068	 str         r3, [sp, #0x68]
  0157c		 |$LN51@I2CTransac|
  0157c	e59d3068	 ldr         r3, [sp, #0x68]
  01580	e58d3018	 str         r3, [sp, #0x18]

; 851  : 
; 852  :                 // update counters
; 853  :                 remainingInPacket -= copyPacketCount;

  01584	e59d201c	 ldr         r2, [sp, #0x1C]
  01588	e59d3018	 ldr         r3, [sp, #0x18]
  0158c	e0423003	 sub         r3, r2, r3
  01590	e58d301c	 str         r3, [sp, #0x1C]

; 854  :                 pPacket->result += copyPacketCount;

  01594	e59d3048	 ldr         r3, [sp, #0x48]
  01598	e2833008	 add         r3, r3, #8
  0159c	e5932000	 ldr         r2, [r3]
  015a0	e59d3018	 ldr         r3, [sp, #0x18]
  015a4	e0822003	 add         r2, r2, r3
  015a8	e59d3048	 ldr         r3, [sp, #0x48]
  015ac	e2833008	 add         r3, r3, #8
  015b0	e5832000	 str         r2, [r3]
  015b4		 |$LN28@I2CTransac|

; 855  :                 while (copyPacketCount)

  015b4	e59d3018	 ldr         r3, [sp, #0x18]
  015b8	e3530000	 cmp         r3, #0
  015bc	0a00003d	 beq         |$LN27@I2CTransac|

; 856  :                 {
; 857  :                     // only write up to what is remaining in current buffer
; 858  :                     copyBufferCount = min(copyPacketCount , remainingInBuffer);

  015c0	e59d2018	 ldr         r2, [sp, #0x18]
  015c4	e59d3014	 ldr         r3, [sp, #0x14]
  015c8	e1520003	 cmp         r2, r3
  015cc	2a000002	 bcs         |$LN52@I2CTransac|
  015d0	e59d3018	 ldr         r3, [sp, #0x18]
  015d4	e58d306c	 str         r3, [sp, #0x6C]
  015d8	ea000001	 b           |$LN53@I2CTransac|
  015dc		 |$LN52@I2CTransac|
  015dc	e59d3014	 ldr         r3, [sp, #0x14]
  015e0	e58d306c	 str         r3, [sp, #0x6C]
  015e4		 |$LN53@I2CTransac|
  015e4	e59d306c	 ldr         r3, [sp, #0x6C]
  015e8	e58d3028	 str         r3, [sp, #0x28]

; 859  : 
; 860  :                     // update buffer counter
; 861  :                     copyPacketCount -= copyBufferCount;

  015ec	e59d2018	 ldr         r2, [sp, #0x18]
  015f0	e59d3028	 ldr         r3, [sp, #0x28]
  015f4	e0423003	 sub         r3, r2, r3
  015f8	e58d3018	 str         r3, [sp, #0x18]

; 862  :                     remainingInBuffer -= copyBufferCount;

  015fc	e59d2014	 ldr         r2, [sp, #0x14]
  01600	e59d3028	 ldr         r3, [sp, #0x28]
  01604	e0423003	 sub         r3, r2, r3
  01608	e58d3014	 str         r3, [sp, #0x14]
  0160c		 |$LN26@I2CTransac|

; 863  : 
; 864  :                     
; 865  :                     // copy all data to fifo
; 866  :                     while (copyBufferCount)

  0160c	e59d3028	 ldr         r3, [sp, #0x28]
  01610	e3530000	 cmp         r3, #0
  01614	0a00000b	 beq         |$LN25@I2CTransac|

; 867  :                     {                        
; 868  :                         OUTREG8(&pI2CRegs->DATA, *pData);

  01618	e59d303c	 ldr         r3, [sp, #0x3C]
  0161c	e283201c	 add         r2, r3, #0x1C
  01620	e59d300c	 ldr         r3, [sp, #0xC]
  01624	e5d33000	 ldrb        r3, [r3]
  01628	e5c23000	 strb        r3, [r2]

; 869  :                         ++pData;

  0162c	e59d300c	 ldr         r3, [sp, #0xC]
  01630	e2833001	 add         r3, r3, #1
  01634	e58d300c	 str         r3, [sp, #0xC]

; 870  :                         --copyBufferCount;

  01638	e59d3028	 ldr         r3, [sp, #0x28]
  0163c	e2433001	 sub         r3, r3, #1
  01640	e58d3028	 str         r3, [sp, #0x28]

; 871  :                     }

  01644	eafffff0	 b           |$LN26@I2CTransac|
  01648		 |$LN25@I2CTransac|

; 872  : 
; 873  :                     // update to next buffer if necessary
; 874  :                     if (remainingInBuffer == 0 && ++idxBuffer < pPacket->count)

  01648	e59d3014	 ldr         r3, [sp, #0x14]
  0164c	e3530000	 cmp         r3, #0
  01650	1a000017	 bne         |$LN24@I2CTransac|
  01654	e59d3020	 ldr         r3, [sp, #0x20]
  01658	e2833001	 add         r3, r3, #1
  0165c	e58d3020	 str         r3, [sp, #0x20]
  01660	e59d2020	 ldr         r2, [sp, #0x20]
  01664	e59d3048	 ldr         r3, [sp, #0x48]
  01668	e5933000	 ldr         r3, [r3]
  0166c	e1520003	 cmp         r2, r3
  01670	2a00000f	 bcs         |$LN24@I2CTransac|

; 875  :                     {
; 876  :                         pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  01674	e59d3048	 ldr         r3, [sp, #0x48]
  01678	e283000c	 add         r0, r3, #0xC
  0167c	e59d1020	 ldr         r1, [sp, #0x20]
  01680	e3a03008	 mov         r3, #8
  01684	e0020391	 mul         r2, r1, r3
  01688	e5903000	 ldr         r3, [r0]
  0168c	e0833002	 add         r3, r3, r2
  01690	e2833004	 add         r3, r3, #4
  01694	e5933000	 ldr         r3, [r3]
  01698	e58d300c	 str         r3, [sp, #0xC]

; 877  :                         remainingInBuffer = I2CGetBufferSize(pPacket, idxBuffer);

  0169c	e59d1020	 ldr         r1, [sp, #0x20]
  016a0	e59d0048	 ldr         r0, [sp, #0x48]
  016a4	eb000000	 bl          I2CGetBufferSize
  016a8	e58d0070	 str         r0, [sp, #0x70]
  016ac	e59d3070	 ldr         r3, [sp, #0x70]
  016b0	e58d3014	 str         r3, [sp, #0x14]
  016b4		 |$LN24@I2CTransac|

; 878  :                     }
; 879  :                 }

  016b4	eaffffbe	 b           |$LN28@I2CTransac|
  016b8		 |$LN27@I2CTransac|
  016b8		 |$LN33@I2CTransac|

; 880  :             }            
; 881  :             OUTREG16(&pI2CRegs->STAT, stat & (I2C_STAT_XDR | I2C_STAT_XRDY | I2C_STAT_XUDF));

  016b8	e1dd32b4	 ldrh        r3, [sp, #0x24]
  016bc	e1a02003	 mov         r2, r3
  016c0	e3a03b11	 mov         r3, #0x11, 22
  016c4	e3833010	 orr         r3, r3, #0x10
  016c8	e0023003	 and         r3, r2, r3
  016cc	e1a02803	 mov         r2, r3, lsl #16
  016d0	e1a02822	 mov         r2, r2, lsr #16
  016d4	e59d303c	 ldr         r3, [sp, #0x3C]
  016d8	e2833008	 add         r3, r3, #8
  016dc	e1c320b0	 strh        r2, [r3]
  016e0		 |$LN34@I2CTransac|

; 882  :         }
; 883  : 
; 884  :         // received data
; 885  :         if ((stat & (I2C_STAT_RDR | I2C_STAT_RRDY | I2C_STAT_ROVR)))

  016e0	e1dd32b4	 ldrh        r3, [sp, #0x24]
  016e4	e1a02003	 mov         r2, r3
  016e8	e3a03b0a	 mov         r3, #0xA, 22
  016ec	e3833008	 orr         r3, r3, #8
  016f0	e1120003	 tst         r2, r3
  016f4	0a00007f	 beq         |$LN23@I2CTransac|

; 886  :         {
; 887  :             if (remainingInPacket && pPacket->opType == kI2C_Read)

  016f8	e59d301c	 ldr         r3, [sp, #0x1C]
  016fc	e3530000	 cmp         r3, #0
  01700	0a000072	 beq         |$LN22@I2CTransac|
  01704	e59d3048	 ldr         r3, [sp, #0x48]
  01708	e2833004	 add         r3, r3, #4
  0170c	e5933000	 ldr         r3, [r3]
  01710	e3530000	 cmp         r3, #0
  01714	1a00006d	 bne         |$LN22@I2CTransac|

; 888  :             {
; 889  :                 // determine number of bytes to copy
; 890  :                 if (stat & I2C_STAT_ROVR)

  01718	e1dd32b4	 ldrh        r3, [sp, #0x24]
  0171c	e3130b02	 tst         r3, #2, 22
  01720	0a000002	 beq         |$LN21@I2CTransac|

; 891  :                 {
; 892  :                     copyPacketCount = maxFifoSize;

  01724	e59d3010	 ldr         r3, [sp, #0x10]
  01728	e58d3018	 str         r3, [sp, #0x18]
  0172c	ea00000f	 b           |$LN20@I2CTransac|
  01730		 |$LN21@I2CTransac|

; 893  :                 }
; 894  :                 else if (stat & I2C_STAT_RDR)

  01730	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01734	e3130a02	 tst         r3, #2, 20
  01738	0a00000a	 beq         |$LN19@I2CTransac|

; 895  :                 {
; 896  :                     copyPacketCount = INREG16(&pI2CRegs->BUFSTAT);

  0173c	e59d303c	 ldr         r3, [sp, #0x3C]
  01740	e2833040	 add         r3, r3, #0x40
  01744	e1d330b0	 ldrh        r3, [r3]
  01748	e58d3018	 str         r3, [sp, #0x18]

; 897  :                     copyPacketCount &= I2C_BUFSTAT_RXSTAT_MASK;

  0174c	e59d3018	 ldr         r3, [sp, #0x18]
  01750	e2033c3f	 and         r3, r3, #0x3F, 24
  01754	e58d3018	 str         r3, [sp, #0x18]

; 898  :                     copyPacketCount >>= I2C_BUFSTAT_RXSTAT_SHIFT;

  01758	e59d3018	 ldr         r3, [sp, #0x18]
  0175c	e1a03423	 mov         r3, r3, lsr #8
  01760	e58d3018	 str         r3, [sp, #0x18]

; 899  :                 }                
; 900  :                 else

  01764	ea000001	 b           |$LN18@I2CTransac|
  01768		 |$LN19@I2CTransac|

; 901  :                 {
; 902  :                     copyPacketCount = RxFifoThreshold;

  01768	e59d3030	 ldr         r3, [sp, #0x30]
  0176c	e58d3018	 str         r3, [sp, #0x18]
  01770		 |$LN18@I2CTransac|
  01770		 |$LN20@I2CTransac|

; 903  :                 }
; 904  : 
; 905  :                 // only read expected amount
; 906  :                 copyPacketCount = min(copyPacketCount, remainingInPacket); 

  01770	e59d2018	 ldr         r2, [sp, #0x18]
  01774	e59d301c	 ldr         r3, [sp, #0x1C]
  01778	e1520003	 cmp         r2, r3
  0177c	2a000002	 bcs         |$LN54@I2CTransac|
  01780	e59d3018	 ldr         r3, [sp, #0x18]
  01784	e58d3074	 str         r3, [sp, #0x74]
  01788	ea000001	 b           |$LN55@I2CTransac|
  0178c		 |$LN54@I2CTransac|
  0178c	e59d301c	 ldr         r3, [sp, #0x1C]
  01790	e58d3074	 str         r3, [sp, #0x74]
  01794		 |$LN55@I2CTransac|
  01794	e59d3074	 ldr         r3, [sp, #0x74]
  01798	e58d3018	 str         r3, [sp, #0x18]

; 907  : 
; 908  :                 // update counters
; 909  :                 remainingInPacket -= copyPacketCount;

  0179c	e59d201c	 ldr         r2, [sp, #0x1C]
  017a0	e59d3018	 ldr         r3, [sp, #0x18]
  017a4	e0423003	 sub         r3, r2, r3
  017a8	e58d301c	 str         r3, [sp, #0x1C]

; 910  :                 pPacket->result += copyPacketCount;

  017ac	e59d3048	 ldr         r3, [sp, #0x48]
  017b0	e2833008	 add         r3, r3, #8
  017b4	e5932000	 ldr         r2, [r3]
  017b8	e59d3018	 ldr         r3, [sp, #0x18]
  017bc	e0822003	 add         r2, r2, r3
  017c0	e59d3048	 ldr         r3, [sp, #0x48]
  017c4	e2833008	 add         r3, r3, #8
  017c8	e5832000	 str         r2, [r3]
  017cc		 |$LN17@I2CTransac|

; 911  :                 while (copyPacketCount)

  017cc	e59d3018	 ldr         r3, [sp, #0x18]
  017d0	e3530000	 cmp         r3, #0
  017d4	0a00003d	 beq         |$LN16@I2CTransac|

; 912  :                 {
; 913  :                     // only write up to what is remaining in current buffer
; 914  :                     copyBufferCount = min(copyPacketCount , remainingInBuffer);

  017d8	e59d2018	 ldr         r2, [sp, #0x18]
  017dc	e59d3014	 ldr         r3, [sp, #0x14]
  017e0	e1520003	 cmp         r2, r3
  017e4	2a000002	 bcs         |$LN56@I2CTransac|
  017e8	e59d3018	 ldr         r3, [sp, #0x18]
  017ec	e58d3078	 str         r3, [sp, #0x78]
  017f0	ea000001	 b           |$LN57@I2CTransac|
  017f4		 |$LN56@I2CTransac|
  017f4	e59d3014	 ldr         r3, [sp, #0x14]
  017f8	e58d3078	 str         r3, [sp, #0x78]
  017fc		 |$LN57@I2CTransac|
  017fc	e59d3078	 ldr         r3, [sp, #0x78]
  01800	e58d3028	 str         r3, [sp, #0x28]

; 915  : 
; 916  :                     // update buffer counter
; 917  :                     copyPacketCount -= copyBufferCount;

  01804	e59d2018	 ldr         r2, [sp, #0x18]
  01808	e59d3028	 ldr         r3, [sp, #0x28]
  0180c	e0423003	 sub         r3, r2, r3
  01810	e58d3018	 str         r3, [sp, #0x18]

; 918  :                     remainingInBuffer -= copyBufferCount;

  01814	e59d2014	 ldr         r2, [sp, #0x14]
  01818	e59d3028	 ldr         r3, [sp, #0x28]
  0181c	e0423003	 sub         r3, r2, r3
  01820	e58d3014	 str         r3, [sp, #0x14]
  01824		 |$LN15@I2CTransac|

; 919  : 
; 920  :                     // copy all data to fifo
; 921  :                     while (copyBufferCount)

  01824	e59d3028	 ldr         r3, [sp, #0x28]
  01828	e3530000	 cmp         r3, #0
  0182c	0a00000b	 beq         |$LN14@I2CTransac|

; 922  :                     {
; 923  :                         *pData = INREG8(&pI2CRegs->DATA);

  01830	e59d303c	 ldr         r3, [sp, #0x3C]
  01834	e283301c	 add         r3, r3, #0x1C
  01838	e5d32000	 ldrb        r2, [r3]
  0183c	e59d300c	 ldr         r3, [sp, #0xC]
  01840	e5c32000	 strb        r2, [r3]

; 924  :                         ++pData;

  01844	e59d300c	 ldr         r3, [sp, #0xC]
  01848	e2833001	 add         r3, r3, #1
  0184c	e58d300c	 str         r3, [sp, #0xC]

; 925  :                         --copyBufferCount;

  01850	e59d3028	 ldr         r3, [sp, #0x28]
  01854	e2433001	 sub         r3, r3, #1
  01858	e58d3028	 str         r3, [sp, #0x28]

; 926  :                     }                   

  0185c	eafffff0	 b           |$LN15@I2CTransac|
  01860		 |$LN14@I2CTransac|

; 927  : 
; 928  :                     // update to next buffer if necessary
; 929  :                     if (remainingInBuffer == 0 && ++idxBuffer < pPacket->count)

  01860	e59d3014	 ldr         r3, [sp, #0x14]
  01864	e3530000	 cmp         r3, #0
  01868	1a000017	 bne         |$LN13@I2CTransac|
  0186c	e59d3020	 ldr         r3, [sp, #0x20]
  01870	e2833001	 add         r3, r3, #1
  01874	e58d3020	 str         r3, [sp, #0x20]
  01878	e59d2020	 ldr         r2, [sp, #0x20]
  0187c	e59d3048	 ldr         r3, [sp, #0x48]
  01880	e5933000	 ldr         r3, [r3]
  01884	e1520003	 cmp         r2, r3
  01888	2a00000f	 bcs         |$LN13@I2CTransac|

; 930  :                     {
; 931  :                         pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  0188c	e59d3048	 ldr         r3, [sp, #0x48]
  01890	e283000c	 add         r0, r3, #0xC
  01894	e59d1020	 ldr         r1, [sp, #0x20]
  01898	e3a03008	 mov         r3, #8
  0189c	e0020391	 mul         r2, r1, r3
  018a0	e5903000	 ldr         r3, [r0]
  018a4	e0833002	 add         r3, r3, r2
  018a8	e2833004	 add         r3, r3, #4
  018ac	e5933000	 ldr         r3, [r3]
  018b0	e58d300c	 str         r3, [sp, #0xC]

; 932  :                         remainingInBuffer = I2CGetBufferSize(pPacket, idxBuffer);

  018b4	e59d1020	 ldr         r1, [sp, #0x20]
  018b8	e59d0048	 ldr         r0, [sp, #0x48]
  018bc	eb000000	 bl          I2CGetBufferSize
  018c0	e58d007c	 str         r0, [sp, #0x7C]
  018c4	e59d307c	 ldr         r3, [sp, #0x7C]
  018c8	e58d3014	 str         r3, [sp, #0x14]
  018cc		 |$LN13@I2CTransac|

; 933  :                     }
; 934  :                 }

  018cc	eaffffbe	 b           |$LN17@I2CTransac|
  018d0		 |$LN16@I2CTransac|
  018d0		 |$LN22@I2CTransac|

; 935  :             }
; 936  :             OUTREG16(&pI2CRegs->STAT, stat & (I2C_STAT_RDR | I2C_STAT_RRDY | I2C_STAT_ROVR));

  018d0	e1dd32b4	 ldrh        r3, [sp, #0x24]
  018d4	e1a02003	 mov         r2, r3
  018d8	e3a03b0a	 mov         r3, #0xA, 22
  018dc	e3833008	 orr         r3, r3, #8
  018e0	e0023003	 and         r3, r2, r3
  018e4	e1a02803	 mov         r2, r3, lsl #16
  018e8	e1a02822	 mov         r2, r2, lsr #16
  018ec	e59d303c	 ldr         r3, [sp, #0x3C]
  018f0	e2833008	 add         r3, r3, #8
  018f4	e1c320b0	 strh        r2, [r3]
  018f8		 |$LN23@I2CTransac|

; 937  :         }
; 938  : 
; 939  :         // packet complete
; 940  :         if (stat & I2C_STAT_ARDY)

  018f8	e1dd32b4	 ldrh        r3, [sp, #0x24]
  018fc	e3130004	 tst         r3, #4
  01900	0a00006d	 beq         |$LN12@I2CTransac|

; 941  :         {
; 942  :             // this notificaiton is needed to progress to next packet
; 943  :             OUTREG16(&pI2CRegs->STAT, I2C_STAT_ARDY);

  01904	e59d303c	 ldr         r3, [sp, #0x3C]
  01908	e2832008	 add         r2, r3, #8
  0190c	e3a03004	 mov         r3, #4
  01910	e1c230b0	 strh        r3, [r2]

; 944  : 
; 945  :             // move to next transaction            
; 946  :             if (idxPacket < pInfo->count)

  01914	e59d2004	 ldr         r2, [sp, #4]
  01918	e59d30a0	 ldr         r3, [sp, #0xA0]
  0191c	e5933000	 ldr         r3, [r3]
  01920	e1520003	 cmp         r2, r3
  01924	2a000061	 bcs         |$LN11@I2CTransac|

; 947  :             {            
; 948  :                 // get next packet
; 949  :                 //                
; 950  :                 pPacket = &pInfo->rgPackets[idxPacket];

  01928	e59d30a0	 ldr         r3, [sp, #0xA0]
  0192c	e2830008	 add         r0, r3, #8
  01930	e59d1004	 ldr         r1, [sp, #4]
  01934	e3a03010	 mov         r3, #0x10
  01938	e0020391	 mul         r2, r1, r3
  0193c	e5903000	 ldr         r3, [r0]
  01940	e0833002	 add         r3, r3, r2
  01944	e58d3048	 str         r3, [sp, #0x48]

; 951  :                 ++idxPacket;

  01948	e59d3004	 ldr         r3, [sp, #4]
  0194c	e2833001	 add         r3, r3, #1
  01950	e58d3004	 str         r3, [sp, #4]

; 952  : 
; 953  :                 // initialize packet info
; 954  :                 idxBuffer = 0;

  01954	e3a03000	 mov         r3, #0
  01958	e58d3020	 str         r3, [sp, #0x20]

; 955  :                 pData = pPacket->rgBuffers[idxBuffer].pBuffer;

  0195c	e59d3048	 ldr         r3, [sp, #0x48]
  01960	e283000c	 add         r0, r3, #0xC
  01964	e59d1020	 ldr         r1, [sp, #0x20]
  01968	e3a03008	 mov         r3, #8
  0196c	e0020391	 mul         r2, r1, r3
  01970	e5903000	 ldr         r3, [r0]
  01974	e0833002	 add         r3, r3, r2
  01978	e2833004	 add         r3, r3, #4
  0197c	e5933000	 ldr         r3, [r3]
  01980	e58d300c	 str         r3, [sp, #0xC]

; 956  :                 remainingInBuffer = I2CGetBufferSize(pPacket, idxBuffer);

  01984	e59d1020	 ldr         r1, [sp, #0x20]
  01988	e59d0048	 ldr         r0, [sp, #0x48]
  0198c	eb000000	 bl          I2CGetBufferSize
  01990	e58d0080	 str         r0, [sp, #0x80]
  01994	e59d3080	 ldr         r3, [sp, #0x80]
  01998	e58d3014	 str         r3, [sp, #0x14]

; 957  :                 remainingInPacket = I2CGetPacketSize(pPacket);

  0199c	e59d0048	 ldr         r0, [sp, #0x48]
  019a0	eb000000	 bl          I2CGetPacketSize
  019a4	e58d0084	 str         r0, [sp, #0x84]
  019a8	e59d3084	 ldr         r3, [sp, #0x84]
  019ac	e58d301c	 str         r3, [sp, #0x1C]

; 958  : 
; 959  :                 // Start transaction                
; 960  :                 con_mask = I2C_CON_EN | I2C_CON_STT | pInfo->con_mask;

  019b0	e59d30a0	 ldr         r3, [sp, #0xA0]
  019b4	e2833004	 add         r3, r3, #4
  019b8	e5932000	 ldr         r2, [r3]
  019bc	e3a03902	 mov         r3, #2, 18
  019c0	e3833001	 orr         r3, r3, #1
  019c4	e1823003	 orr         r3, r2, r3
  019c8	e58d3040	 str         r3, [sp, #0x40]

; 961  :                 if (pPacket->opType == kI2C_Write) con_mask |= I2C_CON_TRX;                

  019cc	e59d3048	 ldr         r3, [sp, #0x48]
  019d0	e2833004	 add         r3, r3, #4
  019d4	e5933000	 ldr         r3, [r3]
  019d8	e3530001	 cmp         r3, #1
  019dc	1a000002	 bne         |$LN10@I2CTransac|
  019e0	e59d3040	 ldr         r3, [sp, #0x40]
  019e4	e3833c02	 orr         r3, r3, #2, 24
  019e8	e58d3040	 str         r3, [sp, #0x40]
  019ec		 |$LN10@I2CTransac|

; 962  :                 if (idxPacket == pInfo->count) con_mask |= I2C_CON_STP;

  019ec	e59d2004	 ldr         r2, [sp, #4]
  019f0	e59d30a0	 ldr         r3, [sp, #0xA0]
  019f4	e5933000	 ldr         r3, [r3]
  019f8	e1520003	 cmp         r2, r3
  019fc	1a000002	 bne         |$LN9@I2CTransac|
  01a00	e59d3040	 ldr         r3, [sp, #0x40]
  01a04	e3833002	 orr         r3, r3, #2
  01a08	e58d3040	 str         r3, [sp, #0x40]
  01a0c		 |$LN9@I2CTransac|

; 963  :                 OUTREG16(&pI2CRegs->CON, con_mask); 

  01a0c	e59d3040	 ldr         r3, [sp, #0x40]
  01a10	e1a02803	 mov         r2, r3, lsl #16
  01a14	e1a02822	 mov         r2, r2, lsr #16
  01a18	e59d303c	 ldr         r3, [sp, #0x3C]
  01a1c	e2833024	 add         r3, r3, #0x24
  01a20	e1c320b0	 strh        r2, [r3]

; 964  :                 OUTREG16(&pI2CRegs->CNT, remainingInPacket);

  01a24	e59d301c	 ldr         r3, [sp, #0x1C]
  01a28	e1a02803	 mov         r2, r3, lsl #16
  01a2c	e1a02822	 mov         r2, r2, lsr #16
  01a30	e59d303c	 ldr         r3, [sp, #0x3C]
  01a34	e2833018	 add         r3, r3, #0x18
  01a38	e1c320b0	 strh        r2, [r3]

; 965  : 
; 966  :                 ASSERT(remainingInPacket != 0);

  01a3c	e59d301c	 ldr         r3, [sp, #0x1C]
  01a40	e3530000	 cmp         r3, #0
  01a44	0a000002	 beq         |$LN58@I2CTransac|
  01a48	e3a03001	 mov         r3, #1
  01a4c	e58d3088	 str         r3, [sp, #0x88]
  01a50	ea000008	 b           |$LN59@I2CTransac|
  01a54		 |$LN58@I2CTransac|
  01a54	e3a03c03	 mov         r3, #3, 24
  01a58	e38330c6	 orr         r3, r3, #0xC6
  01a5c	e59f221c	 ldr         r2, [pc, #0x21C]
  01a60	e59f1214	 ldr         r1, [pc, #0x214]
  01a64	e59f020c	 ldr         r0, [pc, #0x20C]
  01a68	eb000000	 bl          NKDbgPrintfW
  01a6c	e6000010	 __debugbreak_ce
  01a70	e3a03000	 mov         r3, #0
  01a74	e58d3088	 str         r3, [sp, #0x88]
  01a78		 |$LN59@I2CTransac|

; 967  : 
; 968  :                 // if writing to bus fill-up tx fifo to avoid underflows
; 969  :                 pPacket->result = 0;

  01a78	e59d3048	 ldr         r3, [sp, #0x48]
  01a7c	e2832008	 add         r2, r3, #8
  01a80	e3a03000	 mov         r3, #0
  01a84	e5823000	 str         r3, [r2]

; 970  :                 if (pPacket->opType == kI2C_Write)

  01a88	e59d3048	 ldr         r3, [sp, #0x48]
  01a8c	e2833004	 add         r3, r3, #4
  01a90	e5933000	 ldr         r3, [r3]
  01a94	e3530001	 cmp         r3, #1
  01a98	1a000003	 bne         |$LN8@I2CTransac|

; 971  :                 {
; 972  :                     stat = I2C_STAT_XDR | I2C_STAT_XRDY | I2C_STAT_XUDF;

  01a9c	e3a03b11	 mov         r3, #0x11, 22
  01aa0	e3833010	 orr         r3, r3, #0x10
  01aa4	e1cd32b4	 strh        r3, [sp, #0x24]

; 973  :                     continue;

  01aa8	ea00004f	 b           |$LN37@I2CTransac|
  01aac		 |$LN8@I2CTransac|

; 974  :                 }
; 975  :             }
; 976  :             else

  01aac	ea000002	 b           |$LN7@I2CTransac|
  01ab0		 |$LN11@I2CTransac|

; 977  :             {
; 978  :                 // if we get here then all packets went through successfully
; 979  :                 rc = kI2CSuccess;

  01ab0	e3a03000	 mov         r3, #0
  01ab4	e58d3008	 str         r3, [sp, #8]

; 980  :                 break;

  01ab8	ea000053	 b           |$LN36@I2CTransac|
  01abc		 |$LN7@I2CTransac|
  01abc		 |$LN12@I2CTransac|

; 981  :             }
; 982  :         }
; 983  :         OALLog(L"\r Testing // packet complete,rc: %d\r\n",rc); //Ray 13-10-16

  01abc	e59d1008	 ldr         r1, [sp, #8]
  01ac0	e59f01ac	 ldr         r0, [pc, #0x1AC]
  01ac4	eb000000	 bl          NKDbgPrintfW

; 984  :         
; 985  :         // handle possible glitches on the i2c bus or ill behaved i2c device
; 986  :         if (((stat == I2C_STAT_BF) || (stat == (I2C_STAT_BF | I2C_STAT_BB))) && 
; 987  :             (remainingInPacket > 0))

  01ac8	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01acc	e3530c01	 cmp         r3, #1, 24
  01ad0	0a000002	 beq         |$LN5@I2CTransac|
  01ad4	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01ad8	e3530c11	 cmp         r3, #0x11, 24
  01adc	1a00001f	 bne         |$LN6@I2CTransac|
  01ae0		 |$LN5@I2CTransac|
  01ae0	e59d301c	 ldr         r3, [sp, #0x1C]
  01ae4	e3530000	 cmp         r3, #0
  01ae8	9a00001c	 bls         |$LN6@I2CTransac|

; 988  :         {
; 989  :             // reprogram and try again
; 990  :             DEBUGMSG(OAL_LOG_WARN && stat == (I2C_STAT_BF | I2C_STAT_BB), 
; 991  :                 (L"WARN: TransactI2CPacket: Lost transaction state "
; 992  :                 L"bus is both busy and free!! address 0x%02x, stat = 0x%x\r\n",
; 993  :                 pCtx->slaveAddress, stat
; 994  :                 ));

  01aec	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01af0	e3530c11	 cmp         r3, #0x11, 24
  01af4	1a000008	 bne         |$LN60@I2CTransac|
  01af8	e1dd22b4	 ldrh        r2, [sp, #0x24]
  01afc	e59d30a4	 ldr         r3, [sp, #0xA4]
  01b00	e2833010	 add         r3, r3, #0x10
  01b04	e5931000	 ldr         r1, [r3]
  01b08	e59f0160	 ldr         r0, [pc, #0x160]
  01b0c	eb000000	 bl          NKDbgPrintfW
  01b10	e3a03001	 mov         r3, #1
  01b14	e58d308c	 str         r3, [sp, #0x8C]
  01b18	ea000001	 b           |$LN61@I2CTransac|
  01b1c		 |$LN60@I2CTransac|
  01b1c	e3a03000	 mov         r3, #0
  01b20	e58d308c	 str         r3, [sp, #0x8C]
  01b24		 |$LN61@I2CTransac|

; 995  : 
; 996  :             // reprogram and try again
; 997  :             DEBUGMSG(OAL_LOG_WARN && stat == I2C_STAT_BF, 
; 998  :                 (L"WARN: TransactI2CPacket: Lost transaction state "
; 999  :                 L"with address 0x%02x, stat = 0x%x\r\n",
; 1000 :                 pCtx->slaveAddress, stat
; 1001 :                 ));

  01b24	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01b28	e3530c01	 cmp         r3, #1, 24
  01b2c	1a000008	 bne         |$LN62@I2CTransac|
  01b30	e1dd22b4	 ldrh        r2, [sp, #0x24]
  01b34	e59d30a4	 ldr         r3, [sp, #0xA4]
  01b38	e2833010	 add         r3, r3, #0x10
  01b3c	e5931000	 ldr         r1, [r3]
  01b40	e59f0124	 ldr         r0, [pc, #0x124]
  01b44	eb000000	 bl          NKDbgPrintfW
  01b48	e3a03001	 mov         r3, #1
  01b4c	e58d3090	 str         r3, [sp, #0x90]
  01b50	ea000001	 b           |$LN63@I2CTransac|
  01b54		 |$LN62@I2CTransac|
  01b54	e3a03000	 mov         r3, #0
  01b58	e58d3090	 str         r3, [sp, #0x90]
  01b5c		 |$LN63@I2CTransac|

; 1002 : 
; 1003 :             break;

  01b5c	ea00002a	 b           |$LN36@I2CTransac|
  01b60		 |$LN6@I2CTransac|

; 1004 :         }
; 1005 : 
; 1006 :         // get current status
; 1007 :         stat = INREG16(&pI2CRegs->STAT);

  01b60	e59d303c	 ldr         r3, [sp, #0x3C]
  01b64	e2833008	 add         r3, r3, #8
  01b68	e1d330b0	 ldrh        r3, [r3]
  01b6c	e1cd32b4	 strh        r3, [sp, #0x24]

; 1008 : 
; 1009 :         // workaround to support HS I2C
; 1010 :         // for high speed mode ARDY is not triggered all the time. 
; 1011 :         // we need to spoof this for the high speed case
; 1012 :         if (bHSMode && remainingInPacket == 0) 

  01b70	e59d3044	 ldr         r3, [sp, #0x44]
  01b74	e3530000	 cmp         r3, #0
  01b78	0a00001b	 beq         |$LN4@I2CTransac|
  01b7c	e59d301c	 ldr         r3, [sp, #0x1C]
  01b80	e3530000	 cmp         r3, #0
  01b84	1a000018	 bne         |$LN4@I2CTransac|

; 1013 :         {
; 1014 :             // check buffer status to determine if all data is completely drained
; 1015 :             // before continuing to next packet            
; 1016 :             if (pPacket->opType == kI2C_Write)

  01b88	e59d3048	 ldr         r3, [sp, #0x48]
  01b8c	e2833004	 add         r3, r3, #4
  01b90	e5933000	 ldr         r3, [r3]
  01b94	e3530001	 cmp         r3, #1
  01b98	1a000013	 bne         |$LN3@I2CTransac|

; 1017 :             {
; 1018 :                 copyPacketCount = INREG16(&pI2CRegs->BUFSTAT);

  01b9c	e59d303c	 ldr         r3, [sp, #0x3C]
  01ba0	e2833040	 add         r3, r3, #0x40
  01ba4	e1d330b0	 ldrh        r3, [r3]
  01ba8	e58d3018	 str         r3, [sp, #0x18]

; 1019 :                 copyPacketCount &= I2C_BUFSTAT_TXSTAT_MASK;

  01bac	e59d3018	 ldr         r3, [sp, #0x18]
  01bb0	e203303f	 and         r3, r3, #0x3F
  01bb4	e58d3018	 str         r3, [sp, #0x18]

; 1020 :                 copyPacketCount >>= I2C_BUFSTAT_TXSTAT_SHIFT;

  01bb8	e59d3018	 ldr         r3, [sp, #0x18]
  01bbc	e58d3018	 str         r3, [sp, #0x18]

; 1021 :                 if (copyPacketCount == pPacket->result) stat |= I2C_STAT_ARDY; 

  01bc0	e59d3048	 ldr         r3, [sp, #0x48]
  01bc4	e2833008	 add         r3, r3, #8
  01bc8	e59d2018	 ldr         r2, [sp, #0x18]
  01bcc	e5933000	 ldr         r3, [r3]
  01bd0	e1520003	 cmp         r2, r3
  01bd4	1a000004	 bne         |$LN2@I2CTransac|
  01bd8	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01bdc	e3833004	 orr         r3, r3, #4
  01be0	e1a03803	 mov         r3, r3, lsl #16
  01be4	e1a03823	 mov         r3, r3, lsr #16
  01be8	e1cd32b4	 strh        r3, [sp, #0x24]
  01bec		 |$LN2@I2CTransac|
  01bec		 |$LN3@I2CTransac|
  01bec		 |$LN4@I2CTransac|
  01bec		 |$LN37@I2CTransac|

; 1022 :             }                       
; 1023 :         }
; 1024 :     } while ((I2CGetTickCount() - startTime) < maxTime);

  01bec	eb000000	 bl          I2CGetTickCount
  01bf0	e58d0094	 str         r0, [sp, #0x94]
  01bf4	e59d2094	 ldr         r2, [sp, #0x94]
  01bf8	e59d3038	 ldr         r3, [sp, #0x38]
  01bfc	e0422003	 sub         r2, r2, r3
  01c00	e59d302c	 ldr         r3, [sp, #0x2C]
  01c04	e1520003	 cmp         r2, r3
  01c08	3afffdfd	 bcc         |$LN38@I2CTransac|
  01c0c		 |$LN36@I2CTransac|
  01c0c		 |$cleanUp$44977|

; 1025 : 
; 1026 : cleanUp:
; 1027 :     if (rc != kI2CSuccess)

  01c0c	e59d3008	 ldr         r3, [sp, #8]
  01c10	e3530000	 cmp         r3, #0
  01c14	0a000001	 beq         |$LN1@I2CTransac|

; 1028 :     {
; 1029 :         OALLog(L"\r Testing (rc != kI2CSuccess), So Error...\r\n");

  01c18	e59f0048	 ldr         r0, [pc, #0x48]
  01c1c	eb000000	 bl          NKDbgPrintfW
  01c20		 |$LN1@I2CTransac|

; 1030 :         
; 1031 :         
; 1032 :         /*
; 1033 :         #define SHOW_I2C_REG(reg)   OALMSG(OAL_LOG_WARN, (L"I2C: %s = 0x%04x\n", TEXT(# reg), pI2CRegs->reg));
; 1034 :         SHOW_I2C_REG(REV)
; 1035 :         SHOW_I2C_REG(IE)
; 1036 :         SHOW_I2C_REG(STAT)
; 1037 :         SHOW_I2C_REG(WE)
; 1038 :         SHOW_I2C_REG(SYSS)
; 1039 :         SHOW_I2C_REG(BUF)
; 1040 :         SHOW_I2C_REG(CNT)
; 1041 :         //SHOW_I2C_REG(DATA)
; 1042 :         SHOW_I2C_REG(SYSC)
; 1043 :         SHOW_I2C_REG(CON)
; 1044 :         SHOW_I2C_REG(OA0)
; 1045 :         SHOW_I2C_REG(SA)
; 1046 :         SHOW_I2C_REG(PSC)
; 1047 :         SHOW_I2C_REG(SCLL)
; 1048 :         SHOW_I2C_REG(SCLH)
; 1049 :         SHOW_I2C_REG(SYSTEST)
; 1050 :         SHOW_I2C_REG(BUFSTAT)
; 1051 :         SHOW_I2C_REG(OA1)
; 1052 :         SHOW_I2C_REG(OA2)
; 1053 :         SHOW_I2C_REG(OA3)
; 1054 :         SHOW_I2C_REG(ACTOA)
; 1055 :         SHOW_I2C_REG(SBLOCK)
; 1056 :         */
; 1057 :     }       
; 1058 : 
; 1059 :     stat = INREG16(&pI2CRegs->STAT);

  01c20	e59d303c	 ldr         r3, [sp, #0x3C]
  01c24	e2833008	 add         r3, r3, #8
  01c28	e1d330b0	 ldrh        r3, [r3]
  01c2c	e1cd32b4	 strh        r3, [sp, #0x24]

; 1060 :     OUTREG16(&pI2CRegs->STAT, stat);

  01c30	e59d303c	 ldr         r3, [sp, #0x3C]
  01c34	e2832008	 add         r2, r3, #8
  01c38	e1dd32b4	 ldrh        r3, [sp, #0x24]
  01c3c	e1c230b0	 strh        r3, [r2]

; 1061 : 
; 1062 :     OUTREG16(&pI2CRegs->CON, 0);

  01c40	e59d303c	 ldr         r3, [sp, #0x3C]
  01c44	e2832024	 add         r2, r3, #0x24
  01c48	e3a03000	 mov         r3, #0
  01c4c	e1c230b0	 strh        r3, [r2]

; 1063 : 
; 1064 :     return rc;

  01c50	e59d3008	 ldr         r3, [sp, #8]
  01c54	e58d304c	 str         r3, [sp, #0x4C]

; 1065 : }

  01c58	e59d004c	 ldr         r0, [sp, #0x4C]
  01c5c	e28dd098	 add         sp, sp, #0x98
  01c60	e89d6000	 ldmia       sp, {sp, lr}
  01c64	e12fff1e	 bx          lr
  01c68		 |$LN67@I2CTransac|
  01c68		 |$LN68@I2CTransac|
  01c68	00000000	 DCD         |??_C@_1FK@IKKDNAB@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAk?$AAI?$AA2?$AAC?$AAS?$AAu?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?$CJ?$AA?0?$AA?5?$AAS@|
  01c6c		 |$LN69@I2CTransac|
  01c6c	00000000	 DCD         |??_C@_1KG@PMHDBGEH@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAt?$AAr@|
  01c70		 |$LN70@I2CTransac|
  01c70	00000000	 DCD         |??_C@_1NE@PIPMDEPG@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAt?$AAr@|
  01c74		 |$LN71@I2CTransac|
  01c74	00000000	 DCD         |??_C@_1EM@MFOBAEKO@?$AA?$AN?$AA?5?$AAT?$AAe?$AAs?$AAt?$AAi?$AAn?$AAg?$AA?5?$AA?1?$AA?1?$AA?5?$AAp?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAl?$AAe?$AAt?$AAe?$AA?0?$AAr?$AAc?$AA?3@|
  01c78		 |$LN72@I2CTransac|
  01c78	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01c7c		 |$LN73@I2CTransac|
  01c7c	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01c80		 |$LN74@I2CTransac|
  01c80	00000000	 DCD         |??_C@_1KM@EEHAFCCJ@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01c84		 |$LN75@I2CTransac|
  01c84	00000000	 DCD         |??_C@_1JC@IEAALDDC@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAA?$AAc?$AAc?$AAe?$AAs?$AAs?$AA?5@|
  01c88		 |$LN76@I2CTransac|
  01c88	00000000	 DCD         |??_C@_1JK@EGEOBGPO@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAL?$AAo?$AAs?$AAt?$AA?5?$AAa?$AAr@|
  01c8c		 |$LN77@I2CTransac|
  01c8c	00000000	 DCD         |??_C@_1KK@MMJPNAFB@?$AAW?$AAA?$AAR?$AAN?$AA?3?$AA?5?$AAT?$AAr?$AAa?$AAn?$AAs?$AAa?$AAc?$AAt?$AAI?$AA2?$AAC?$AAP?$AAa?$AAc?$AAk?$AAe?$AAt?$AA?3?$AA?5?$AAN?$AAo?$AA?5?$AAA?$AAC?$AAK?$AA?5@|
  01c90		 |$LN78@I2CTransac|
  01c90	00000000	 DCD         |_rgI2CDevice|
  01c94		 |$M45348|

			 ENDP  ; |I2CTransaction|


  00000			 AREA	 |.pdata|, PDATA
|$T45368| DCD	|$LN5@I2CGetBuff|
	DCD	0x40001104
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CGetBufferSize| PROC

; 206  : {

  00000		 |$LN5@I2CGetBuff|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M45365|

; 207  :     return pPacket->rgBuffers[idxBuffer].size;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283000c	 add         r0, r3, #0xC
  00018	e59d1010	 ldr         r1, [sp, #0x10]
  0001c	e3a03008	 mov         r3, #8
  00020	e0020391	 mul         r2, r1, r3
  00024	e5903000	 ldr         r3, [r0]
  00028	e0833002	 add         r3, r3, r2
  0002c	e5933000	 ldr         r3, [r3]
  00030	e58d3000	 str         r3, [sp]

; 208  : }

  00034	e59d0000	 ldr         r0, [sp]
  00038	e28dd004	 add         sp, sp, #4
  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M45366|

			 ENDP  ; |I2CGetBufferSize|


  00000			 AREA	 |.pdata|, PDATA
|$T45376| DCD	|$LN8@I2CGetPack|
	DCD	0x40002304
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |I2CGetPacketSize| PROC

; 216  : {

  00000		 |$LN8@I2CGetPack|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M45373|

; 217  :     UINT i;
; 218  :     UINT totalSize = 0;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 219  :     for (i = 0; i < pPacket->count; ++i)

  00018	e3a03000	 mov         r3, #0
  0001c	e58d3004	 str         r3, [sp, #4]
  00020	ea000002	 b           |$LN3@I2CGetPack|
  00024		 |$LN2@I2CGetPack|
  00024	e59d3004	 ldr         r3, [sp, #4]
  00028	e2833001	 add         r3, r3, #1
  0002c	e58d3004	 str         r3, [sp, #4]
  00030		 |$LN3@I2CGetPack|
  00030	e59d2004	 ldr         r2, [sp, #4]
  00034	e59d3014	 ldr         r3, [sp, #0x14]
  00038	e5933000	 ldr         r3, [r3]
  0003c	e1520003	 cmp         r2, r3
  00040	2a00000b	 bcs         |$LN1@I2CGetPack|

; 220  :     {
; 221  :         totalSize += pPacket->rgBuffers[i].size;

  00044	e59d3014	 ldr         r3, [sp, #0x14]
  00048	e283000c	 add         r0, r3, #0xC
  0004c	e59d1004	 ldr         r1, [sp, #4]
  00050	e3a03008	 mov         r3, #8
  00054	e0020391	 mul         r2, r1, r3
  00058	e5903000	 ldr         r3, [r0]
  0005c	e0833002	 add         r3, r3, r2
  00060	e59d2000	 ldr         r2, [sp]
  00064	e5933000	 ldr         r3, [r3]
  00068	e0823003	 add         r3, r2, r3
  0006c	e58d3000	 str         r3, [sp]

; 222  :     }

  00070	eaffffeb	 b           |$LN2@I2CGetPack|
  00074		 |$LN1@I2CGetPack|

; 223  :     return totalSize;

  00074	e59d3000	 ldr         r3, [sp]
  00078	e58d3008	 str         r3, [sp, #8]

; 224  : }

  0007c	e59d0008	 ldr         r0, [sp, #8]
  00080	e28dd00c	 add         sp, sp, #0xC
  00084	e89d6000	 ldmia       sp, {sp, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$M45374|

			 ENDP  ; |I2CGetPacketSize|


  00078			 AREA	 |.pdata|, PDATA
|$T45384| DCD	|$LN9@I2CReprogr|
	DCD	0x40003f04
; Function compile flags: /Odtp

  01c94			 AREA	 |.text|, CODE, ARM

  01c94		 |I2CReprogramDevice| PROC

; 700  : {

  01c94		 |$LN9@I2CReprogr|
  01c94	e1a0c00d	 mov         r12, sp
  01c98	e92d0001	 stmdb       sp!, {r0}
  01c9c	e92d5000	 stmdb       sp!, {r12, lr}
  01ca0	e24dd020	 sub         sp, sp, #0x20
  01ca4		 |$M45381|

; 701  :     UINT startTime;
; 702  :     BOOL result = FALSE;

  01ca4	e3a03000	 mov         r3, #0
  01ca8	e58d300c	 str         r3, [sp, #0xC]

; 703  :     I2CDevice_t *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  01cac	e59d3028	 ldr         r3, [sp, #0x28]
  01cb0	e5931000	 ldr         r1, [r3]
  01cb4	e3a03038	 mov         r3, #0x38
  01cb8	e0020391	 mul         r2, r1, r3
  01cbc	e59f30c8	 ldr         r3, [pc, #0xC8]
  01cc0	e0833002	 add         r3, r3, r2
  01cc4	e58d3000	 str         r3, [sp]

; 704  :     OMAP_I2C_REGS *pI2CRegs = pDevice->pI2CRegs;

  01cc8	e59d3000	 ldr         r3, [sp]
  01ccc	e2833018	 add         r3, r3, #0x18
  01cd0	e5933000	 ldr         r3, [r3]
  01cd4	e58d3008	 str         r3, [sp, #8]

; 705  : 
; 706  :     // Set slave address
; 707  :     OUTREG16(&pI2CRegs->SA, pCtx->slaveAddress);

  01cd8	e59d3028	 ldr         r3, [sp, #0x28]
  01cdc	e2833010	 add         r3, r3, #0x10
  01ce0	e5933000	 ldr         r3, [r3]
  01ce4	e1a02803	 mov         r2, r3, lsl #16
  01ce8	e1a02822	 mov         r2, r2, lsr #16
  01cec	e59d3008	 ldr         r3, [sp, #8]
  01cf0	e283302c	 add         r3, r3, #0x2C
  01cf4	e1c320b0	 strh        r2, [r3]

; 708  : 
; 709  :     startTime = I2CGetTickCount();

  01cf8	eb000000	 bl          I2CGetTickCount
  01cfc	e58d0014	 str         r0, [sp, #0x14]
  01d00	e59d3014	 ldr         r3, [sp, #0x14]
  01d04	e58d3004	 str         r3, [sp, #4]
  01d08		 |$LN4@I2CReprogr|

; 710  :     while (((INREG16(&pI2CRegs->STAT) & I2C_STAT_BB) != 0))

  01d08	e59d3008	 ldr         r3, [sp, #8]
  01d0c	e2833008	 add         r3, r3, #8
  01d10	e1d330b0	 ldrh        r3, [r3]
  01d14	e3130a01	 tst         r3, #1, 20
  01d18	0a000013	 beq         |$LN3@I2CReprogr|

; 711  :     {        
; 712  :         if ((I2CGetTickCount() - startTime) > pCtx->timeOut)

  01d1c	eb000000	 bl          I2CGetTickCount
  01d20	e58d0018	 str         r0, [sp, #0x18]
  01d24	e59d2018	 ldr         r2, [sp, #0x18]
  01d28	e59d3004	 ldr         r3, [sp, #4]
  01d2c	e0422003	 sub         r2, r2, r3
  01d30	e59d3028	 ldr         r3, [sp, #0x28]
  01d34	e283300c	 add         r3, r3, #0xC
  01d38	e5933000	 ldr         r3, [r3]
  01d3c	e1520003	 cmp         r2, r3
  01d40	9a000008	 bls         |$LN2@I2CReprogr|

; 713  :         {
; 714  :             // reset the I2C controller
; 715  :             result = I2CResetDevice(pDevice);            

  01d44	e59d0000	 ldr         r0, [sp]
  01d48	eb000000	 bl          I2CResetDevice
  01d4c	e58d001c	 str         r0, [sp, #0x1C]
  01d50	e59d301c	 ldr         r3, [sp, #0x1C]
  01d54	e58d300c	 str         r3, [sp, #0xC]

; 716  :             OALMSG(OAL_LOG_ERROR, (L"ERROR: I2CReprogramDevice: "
; 717  :                 L"Bus remains locked -- resetting I2C controller 0x%02x\r\n",
; 718  :                 pCtx->slaveAddress
; 719  :                 ));
; 720  :             if (result == FALSE)

  01d58	e59d300c	 ldr         r3, [sp, #0xC]
  01d5c	e3530000	 cmp         r3, #0
  01d60	1a000000	 bne         |$LN1@I2CReprogr|

; 721  :             {
; 722  :                 goto cleanUp;

  01d64	ea000002	 b           |$cleanUp$44947|
  01d68		 |$LN1@I2CReprogr|
  01d68		 |$LN2@I2CReprogr|

; 723  :             }
; 724  :         }
; 725  :     }

  01d68	eaffffe6	 b           |$LN4@I2CReprogr|
  01d6c		 |$LN3@I2CReprogr|

; 726  : 
; 727  :     result = TRUE;

  01d6c	e3a03001	 mov         r3, #1
  01d70	e58d300c	 str         r3, [sp, #0xC]
  01d74		 |$cleanUp$44947|

; 728  : 
; 729  : cleanUp:
; 730  :     return result;

  01d74	e59d300c	 ldr         r3, [sp, #0xC]
  01d78	e58d3010	 str         r3, [sp, #0x10]

; 731  : }

  01d7c	e59d0010	 ldr         r0, [sp, #0x10]
  01d80	e28dd020	 add         sp, sp, #0x20
  01d84	e89d6000	 ldmia       sp, {sp, lr}
  01d88	e12fff1e	 bx          lr
  01d8c		 |$LN10@I2CReprogr|
  01d8c		 |$LN11@I2CReprogr|
  01d8c	00000000	 DCD         |_rgI2CDevice|
  01d90		 |$M45382|

			 ENDP  ; |I2CReprogramDevice|

	EXPORT	|I2CSetSubAddressMode|

  00080			 AREA	 |.pdata|, PDATA
|$T45391| DCD	|$LN5@I2CSetSubA|
	DCD	0x40000d04
; Function compile flags: /Odtp

  01d90			 AREA	 |.text|, CODE, ARM

  01d90		 |I2CSetSubAddressMode| PROC

; 1073 : {

  01d90		 |$LN5@I2CSetSubA|
  01d90	e1a0c00d	 mov         r12, sp
  01d94	e92d0003	 stmdb       sp!, {r0, r1}
  01d98	e92d5000	 stmdb       sp!, {r12, lr}
  01d9c	e24dd004	 sub         sp, sp, #4
  01da0		 |$M45388|

; 1074 :     I2CContext_t* pCtx =  (I2CContext_t*) hContext;

  01da0	e59d300c	 ldr         r3, [sp, #0xC]
  01da4	e58d3000	 str         r3, [sp]

; 1075 :     pCtx->subAddressMode = subAddressMode;

  01da8	e59d3000	 ldr         r3, [sp]
  01dac	e2832014	 add         r2, r3, #0x14
  01db0	e59d3010	 ldr         r3, [sp, #0x10]
  01db4	e5823000	 str         r3, [r2]

; 1076 : }

  01db8	e28dd004	 add         sp, sp, #4
  01dbc	e89d6000	 ldmia       sp, {sp, lr}
  01dc0	e12fff1e	 bx          lr
  01dc4		 |$M45389|

			 ENDP  ; |I2CSetSubAddressMode|

	EXPORT	|I2CSetBaudIndex|

  00088			 AREA	 |.pdata|, PDATA
|$T45396| DCD	|$LN5@I2CSetBaud|
	DCD	0x40000d04
; Function compile flags: /Odtp

  01dc4			 AREA	 |.text|, CODE, ARM

  01dc4		 |I2CSetBaudIndex| PROC

; 1084 : {

  01dc4		 |$LN5@I2CSetBaud|
  01dc4	e1a0c00d	 mov         r12, sp
  01dc8	e92d0003	 stmdb       sp!, {r0, r1}
  01dcc	e92d5000	 stmdb       sp!, {r12, lr}
  01dd0	e24dd004	 sub         sp, sp, #4
  01dd4		 |$M45393|

; 1085 :     I2CContext_t* pCtx =  (I2CContext_t*) hContext;

  01dd4	e59d300c	 ldr         r3, [sp, #0xC]
  01dd8	e58d3000	 str         r3, [sp]

; 1086 :     pCtx->baudIndex = baudIndex;

  01ddc	e59d3000	 ldr         r3, [sp]
  01de0	e2832008	 add         r2, r3, #8
  01de4	e59d3010	 ldr         r3, [sp, #0x10]
  01de8	e5823000	 str         r3, [r2]

; 1087 : }

  01dec	e28dd004	 add         sp, sp, #4
  01df0	e89d6000	 ldmia       sp, {sp, lr}
  01df4	e12fff1e	 bx          lr
  01df8		 |$M45394|

			 ENDP  ; |I2CSetBaudIndex|

	EXPORT	|I2CSetTimeout|

  00090			 AREA	 |.pdata|, PDATA
|$T45401| DCD	|$LN5@I2CSetTime|
	DCD	0x40000d04
; Function compile flags: /Odtp

  01df8			 AREA	 |.text|, CODE, ARM

  01df8		 |I2CSetTimeout| PROC

; 1095 : {

  01df8		 |$LN5@I2CSetTime|
  01df8	e1a0c00d	 mov         r12, sp
  01dfc	e92d0003	 stmdb       sp!, {r0, r1}
  01e00	e92d5000	 stmdb       sp!, {r12, lr}
  01e04	e24dd004	 sub         sp, sp, #4
  01e08		 |$M45398|

; 1096 :     I2CContext_t* pCtx =  (I2CContext_t*) hContext;

  01e08	e59d300c	 ldr         r3, [sp, #0xC]
  01e0c	e58d3000	 str         r3, [sp]

; 1097 :     pCtx->timeOut = timeOut;

  01e10	e59d3000	 ldr         r3, [sp]
  01e14	e283200c	 add         r2, r3, #0xC
  01e18	e59d3010	 ldr         r3, [sp, #0x10]
  01e1c	e5823000	 str         r3, [r2]

; 1098 : }

  01e20	e28dd004	 add         sp, sp, #4
  01e24	e89d6000	 ldmia       sp, {sp, lr}
  01e28	e12fff1e	 bx          lr
  01e2c		 |$M45399|

			 ENDP  ; |I2CSetTimeout|

	EXPORT	|I2CSetManualDriveMode|

  00098			 AREA	 |.pdata|, PDATA
|$T45406| DCD	|$LN7@I2CSetManu|
	DCD	0x40003d04
; Function compile flags: /Odtp

  01e2c			 AREA	 |.text|, CODE, ARM

  01e2c		 |I2CSetManualDriveMode| PROC

; 1103 : {

  01e2c		 |$LN7@I2CSetManu|
  01e2c	e1a0c00d	 mov         r12, sp
  01e30	e92d0003	 stmdb       sp!, {r0, r1}
  01e34	e92d5000	 stmdb       sp!, {r12, lr}
  01e38	e24dd008	 sub         sp, sp, #8
  01e3c		 |$M45403|

; 1104 :     I2CContext_t* pCtx =  (I2CContext_t*) hCtx;    

  01e3c	e59d3010	 ldr         r3, [sp, #0x10]
  01e40	e58d3004	 str         r3, [sp, #4]

; 1105 :     I2CDevice_t  *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  01e44	e59d3004	 ldr         r3, [sp, #4]
  01e48	e5931000	 ldr         r1, [r3]
  01e4c	e3a03038	 mov         r3, #0x38
  01e50	e0020391	 mul         r2, r1, r3
  01e54	e59f30c0	 ldr         r3, [pc, #0xC0]
  01e58	e0833002	 add         r3, r3, r2
  01e5c	e58d3000	 str         r3, [sp]

; 1106 : 
; 1107 : 
; 1108 :     if (fOn)

  01e60	e59d3014	 ldr         r3, [sp, #0x14]
  01e64	e3530000	 cmp         r3, #0
  01e68	0a000014	 beq         |$LN2@I2CSetManu|

; 1109 :     {
; 1110 :         // Get hardware
; 1111 :         I2CLock(pCtx);

  01e6c	e59d0004	 ldr         r0, [sp, #4]
  01e70	eb000000	 bl          I2CLock

; 1112 : 
; 1113 :         EnableDeviceClocks(pCtx->device, TRUE);

  01e74	e3a01001	 mov         r1, #1
  01e78	e59d3004	 ldr         r3, [sp, #4]
  01e7c	e2833004	 add         r3, r3, #4
  01e80	e5930000	 ldr         r0, [r3]
  01e84	eb000000	 bl          EnableDeviceClocks

; 1114 :         OUTREG16(&pDevice->pI2CRegs->CON, I2C_CON_EN);        

  01e88	e59d3000	 ldr         r3, [sp]
  01e8c	e2833018	 add         r3, r3, #0x18
  01e90	e5933000	 ldr         r3, [r3]
  01e94	e2832024	 add         r2, r3, #0x24
  01e98	e3a03902	 mov         r3, #2, 18
  01e9c	e1c230b0	 strh        r3, [r2]

; 1115 :         OUTREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_ST_EN | I2C_SYSTEMTEST_TMODE3 | I2C_SYSTEST_SCL_O | I2C_SYSTEST_SDA_O);

  01ea0	e59d3000	 ldr         r3, [sp]
  01ea4	e2833018	 add         r3, r3, #0x18
  01ea8	e5933000	 ldr         r3, [r3]
  01eac	e283203c	 add         r2, r3, #0x3C
  01eb0	e3a03a0b	 mov         r3, #0xB, 20
  01eb4	e3833005	 orr         r3, r3, #5
  01eb8	e1c230b0	 strh        r3, [r2]

; 1116 :     }
; 1117 :     else

  01ebc	ea000013	 b           |$LN1@I2CSetManu|
  01ec0		 |$LN2@I2CSetManu|

; 1118 :     {
; 1119 :         OUTREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEMTEST_TMODE3 | I2C_SYSTEST_SCL_O | I2C_SYSTEST_SDA_O);

  01ec0	e59d3000	 ldr         r3, [sp]
  01ec4	e2833018	 add         r3, r3, #0x18
  01ec8	e5933000	 ldr         r3, [r3]
  01ecc	e283203c	 add         r2, r3, #0x3C
  01ed0	e3a03a03	 mov         r3, #3, 20
  01ed4	e3833005	 orr         r3, r3, #5
  01ed8	e1c230b0	 strh        r3, [r2]

; 1120 :         OUTREG16(&pDevice->pI2CRegs->CON,0);

  01edc	e59d3000	 ldr         r3, [sp]
  01ee0	e2833018	 add         r3, r3, #0x18
  01ee4	e5933000	 ldr         r3, [r3]
  01ee8	e2832024	 add         r2, r3, #0x24
  01eec	e3a03000	 mov         r3, #0
  01ef0	e1c230b0	 strh        r3, [r2]

; 1121 :         EnableDeviceClocks(pCtx->device, FALSE);

  01ef4	e3a01000	 mov         r1, #0
  01ef8	e59d3004	 ldr         r3, [sp, #4]
  01efc	e2833004	 add         r3, r3, #4
  01f00	e5930000	 ldr         r0, [r3]
  01f04	eb000000	 bl          EnableDeviceClocks

; 1122 : 
; 1123 :         // Release hardware
; 1124 :         I2CUnlock(pCtx);

  01f08	e59d0004	 ldr         r0, [sp, #4]
  01f0c	eb000000	 bl          I2CUnlock
  01f10		 |$LN1@I2CSetManu|

; 1125 : 
; 1126 :     }
; 1127 : }

  01f10	e28dd008	 add         sp, sp, #8
  01f14	e89d6000	 ldmia       sp, {sp, lr}
  01f18	e12fff1e	 bx          lr
  01f1c		 |$LN8@I2CSetManu|
  01f1c		 |$LN9@I2CSetManu|
  01f1c	00000000	 DCD         |_rgI2CDevice|
  01f20		 |$M45404|

			 ENDP  ; |I2CSetManualDriveMode|

	EXPORT	|I2CDriveSCL|

  000a0			 AREA	 |.pdata|, PDATA
|$T45413| DCD	|$LN7@I2CDriveSC|
	DCD	0x40003104
; Function compile flags: /Odtp

  01f20			 AREA	 |.text|, CODE, ARM

  01f20		 |I2CDriveSCL| PROC

; 1129 : {

  01f20		 |$LN7@I2CDriveSC|
  01f20	e1a0c00d	 mov         r12, sp
  01f24	e92d0003	 stmdb       sp!, {r0, r1}
  01f28	e92d5000	 stmdb       sp!, {r12, lr}
  01f2c	e24dd008	 sub         sp, sp, #8
  01f30		 |$M45410|

; 1130 :     I2CContext_t* pCtx =  (I2CContext_t*) hCtx;    

  01f30	e59d3010	 ldr         r3, [sp, #0x10]
  01f34	e58d3004	 str         r3, [sp, #4]

; 1131 :     I2CDevice_t  *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  01f38	e59d3004	 ldr         r3, [sp, #4]
  01f3c	e5931000	 ldr         r1, [r3]
  01f40	e3a03038	 mov         r3, #0x38
  01f44	e0020391	 mul         r2, r1, r3
  01f48	e59f3090	 ldr         r3, [pc, #0x90]
  01f4c	e0833002	 add         r3, r3, r2
  01f50	e58d3000	 str         r3, [sp]

; 1132 : 
; 1133 :     if (fHigh)

  01f54	e59d3014	 ldr         r3, [sp, #0x14]
  01f58	e3530000	 cmp         r3, #0
  01f5c	0a00000d	 beq         |$LN2@I2CDriveSC|

; 1134 :     {
; 1135 :         SETREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_SCL_O);

  01f60	e59d3000	 ldr         r3, [sp]
  01f64	e2833018	 add         r3, r3, #0x18
  01f68	e5933000	 ldr         r3, [r3]
  01f6c	e283303c	 add         r3, r3, #0x3C
  01f70	e1d330b0	 ldrh        r3, [r3]
  01f74	e3833004	 orr         r3, r3, #4
  01f78	e1a02803	 mov         r2, r3, lsl #16
  01f7c	e1a02822	 mov         r2, r2, lsr #16
  01f80	e59d3000	 ldr         r3, [sp]
  01f84	e2833018	 add         r3, r3, #0x18
  01f88	e5933000	 ldr         r3, [r3]
  01f8c	e283303c	 add         r3, r3, #0x3C
  01f90	e1c320b0	 strh        r2, [r3]

; 1136 :     }
; 1137 :     else

  01f94	ea00000e	 b           |$LN1@I2CDriveSC|
  01f98		 |$LN2@I2CDriveSC|

; 1138 :     {
; 1139 :         CLRREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_SCL_O);

  01f98	e59d3000	 ldr         r3, [sp]
  01f9c	e2833018	 add         r3, r3, #0x18
  01fa0	e5933000	 ldr         r3, [r3]
  01fa4	e283303c	 add         r3, r3, #0x3C
  01fa8	e1d330b0	 ldrh        r3, [r3]
  01fac	e1a02003	 mov         r2, r3
  01fb0	e3e03004	 mvn         r3, #4
  01fb4	e0023003	 and         r3, r2, r3
  01fb8	e1a02803	 mov         r2, r3, lsl #16
  01fbc	e1a02822	 mov         r2, r2, lsr #16
  01fc0	e59d3000	 ldr         r3, [sp]
  01fc4	e2833018	 add         r3, r3, #0x18
  01fc8	e5933000	 ldr         r3, [r3]
  01fcc	e283303c	 add         r3, r3, #0x3C
  01fd0	e1c320b0	 strh        r2, [r3]
  01fd4		 |$LN1@I2CDriveSC|

; 1140 :     }    
; 1141 : }

  01fd4	e28dd008	 add         sp, sp, #8
  01fd8	e89d6000	 ldmia       sp, {sp, lr}
  01fdc	e12fff1e	 bx          lr
  01fe0		 |$LN8@I2CDriveSC|
  01fe0		 |$LN9@I2CDriveSC|
  01fe0	00000000	 DCD         |_rgI2CDevice|
  01fe4		 |$M45411|

			 ENDP  ; |I2CDriveSCL|

	EXPORT	|I2CDriveSDA|

  000a8			 AREA	 |.pdata|, PDATA
|$T45420| DCD	|$LN7@I2CDriveSD|
	DCD	0x40003104
; Function compile flags: /Odtp

  01fe4			 AREA	 |.text|, CODE, ARM

  01fe4		 |I2CDriveSDA| PROC

; 1143 : {

  01fe4		 |$LN7@I2CDriveSD|
  01fe4	e1a0c00d	 mov         r12, sp
  01fe8	e92d0003	 stmdb       sp!, {r0, r1}
  01fec	e92d5000	 stmdb       sp!, {r12, lr}
  01ff0	e24dd008	 sub         sp, sp, #8
  01ff4		 |$M45417|

; 1144 :     I2CContext_t* pCtx =  (I2CContext_t*) hCtx;    

  01ff4	e59d3010	 ldr         r3, [sp, #0x10]
  01ff8	e58d3004	 str         r3, [sp, #4]

; 1145 :     I2CDevice_t  *pDevice = (I2CDevice_t*)&_rgI2CDevice[pCtx->idI2C];

  01ffc	e59d3004	 ldr         r3, [sp, #4]
  02000	e5931000	 ldr         r1, [r3]
  02004	e3a03038	 mov         r3, #0x38
  02008	e0020391	 mul         r2, r1, r3
  0200c	e59f3090	 ldr         r3, [pc, #0x90]
  02010	e0833002	 add         r3, r3, r2
  02014	e58d3000	 str         r3, [sp]

; 1146 : 
; 1147 :     if (fHigh)

  02018	e59d3014	 ldr         r3, [sp, #0x14]
  0201c	e3530000	 cmp         r3, #0
  02020	0a00000d	 beq         |$LN2@I2CDriveSD|

; 1148 :     {
; 1149 :         SETREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_SDA_O);

  02024	e59d3000	 ldr         r3, [sp]
  02028	e2833018	 add         r3, r3, #0x18
  0202c	e5933000	 ldr         r3, [r3]
  02030	e283303c	 add         r3, r3, #0x3C
  02034	e1d330b0	 ldrh        r3, [r3]
  02038	e3833001	 orr         r3, r3, #1
  0203c	e1a02803	 mov         r2, r3, lsl #16
  02040	e1a02822	 mov         r2, r2, lsr #16
  02044	e59d3000	 ldr         r3, [sp]
  02048	e2833018	 add         r3, r3, #0x18
  0204c	e5933000	 ldr         r3, [r3]
  02050	e283303c	 add         r3, r3, #0x3C
  02054	e1c320b0	 strh        r2, [r3]

; 1150 :     }
; 1151 :     else

  02058	ea00000e	 b           |$LN1@I2CDriveSD|
  0205c		 |$LN2@I2CDriveSD|

; 1152 :     {
; 1153 :         CLRREG16(&pDevice->pI2CRegs->SYSTEST,I2C_SYSTEST_SDA_O);

  0205c	e59d3000	 ldr         r3, [sp]
  02060	e2833018	 add         r3, r3, #0x18
  02064	e5933000	 ldr         r3, [r3]
  02068	e283303c	 add         r3, r3, #0x3C
  0206c	e1d330b0	 ldrh        r3, [r3]
  02070	e1a02003	 mov         r2, r3
  02074	e3e03001	 mvn         r3, #1
  02078	e0023003	 and         r3, r2, r3
  0207c	e1a02803	 mov         r2, r3, lsl #16
  02080	e1a02822	 mov         r2, r2, lsr #16
  02084	e59d3000	 ldr         r3, [sp]
  02088	e2833018	 add         r3, r3, #0x18
  0208c	e5933000	 ldr         r3, [r3]
  02090	e283303c	 add         r3, r3, #0x3C
  02094	e1c320b0	 strh        r2, [r3]
  02098		 |$LN1@I2CDriveSD|

; 1154 :     }    
; 1155 : }

  02098	e28dd008	 add         sp, sp, #8
  0209c	e89d6000	 ldmia       sp, {sp, lr}
  020a0	e12fff1e	 bx          lr
  020a4		 |$LN8@I2CDriveSD|
  020a4		 |$LN9@I2CDriveSD|
  020a4	00000000	 DCD         |_rgI2CDevice|
  020a8		 |$M45418|

			 ENDP  ; |I2CDriveSDA|

	END
