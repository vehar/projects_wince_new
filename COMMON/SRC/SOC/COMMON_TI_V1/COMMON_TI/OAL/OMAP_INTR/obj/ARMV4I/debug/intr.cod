; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_INTR\intr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_oalTimerIrq| [ DATA ]
	EXPORT	|g_oalPrcmIrq| [ DATA ]
	EXPORT	|g_oalSmartReflex1| [ DATA ]
	EXPORT	|g_oalSmartReflex2| [ DATA ]
	EXPORT	|g_pIntr| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|s_intr| %	0xc

  00000			 AREA	 |.data|, DATA
|g_oalTimerIrq| DCD 0xffffffff
|g_oalPrcmIrq| DCD 0xffffffff
|g_oalSmartReflex1| DCD 0xffffffff
|g_oalSmartReflex2| DCD 0xffffffff
|g_pIntr| DCD	|s_intr|

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|GetGPIOCtxtByIrq|

  00000			 AREA	 |.pdata|, PDATA
|$T45793| DCD	|$LN9@GetGPIOCtx|
	DCD	0x40003404
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_intr\intr.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetGPIOCtxtByIrq| PROC

; 84   : {

  00000		 |$LN9@GetGPIOCtx|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M45790|

; 85   :     DWORD i;
; 86   :     for (i=0;i<s_intr.nbGpioBank;i++)

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]
  00018	ea000002	 b           |$LN4@GetGPIOCtx|
  0001c		 |$LN3@GetGPIOCtx|
  0001c	e59d3000	 ldr         r3, [sp]
  00020	e2833001	 add         r3, r3, #1
  00024	e58d3000	 str         r3, [sp]
  00028		 |$LN4@GetGPIOCtx|
  00028	e59d2000	 ldr         r2, [sp]
  0002c	e59f3098	 ldr         r3, [pc, #0x98]
  00030	e5933004	 ldr         r3, [r3, #4]
  00034	e1520003	 cmp         r2, r3
  00038	2a00001d	 bcs         |$LN2@GetGPIOCtx|

; 87   :     {        
; 88   :         if ((s_intr.pGpioCtxt[i].irq_start <= irq) && (irq < (s_intr.pGpioCtxt[i].irq_start+32)))

  0003c	e59d1000	 ldr         r1, [sp]
  00040	e3a03020	 mov         r3, #0x20
  00044	e0020391	 mul         r2, r1, r3
  00048	e59f307c	 ldr         r3, [pc, #0x7C]
  0004c	e5933008	 ldr         r3, [r3, #8]
  00050	e0833002	 add         r3, r3, r2
  00054	e5932000	 ldr         r2, [r3]
  00058	e59d3010	 ldr         r3, [sp, #0x10]
  0005c	e1520003	 cmp         r2, r3
  00060	8a000012	 bhi         |$LN1@GetGPIOCtx|
  00064	e59d1000	 ldr         r1, [sp]
  00068	e3a03020	 mov         r3, #0x20
  0006c	e0020391	 mul         r2, r1, r3
  00070	e59f3054	 ldr         r3, [pc, #0x54]
  00074	e5933008	 ldr         r3, [r3, #8]
  00078	e0833002	 add         r3, r3, r2
  0007c	e5933000	 ldr         r3, [r3]
  00080	e2832020	 add         r2, r3, #0x20
  00084	e59d3010	 ldr         r3, [sp, #0x10]
  00088	e1530002	 cmp         r3, r2
  0008c	2a000007	 bcs         |$LN1@GetGPIOCtx|

; 89   :         {
; 90   :             return &s_intr.pGpioCtxt[i];

  00090	e59d1000	 ldr         r1, [sp]
  00094	e3a03020	 mov         r3, #0x20
  00098	e0020391	 mul         r2, r1, r3
  0009c	e59f3028	 ldr         r3, [pc, #0x28]
  000a0	e5933008	 ldr         r3, [r3, #8]
  000a4	e0833002	 add         r3, r3, r2
  000a8	e58d3004	 str         r3, [sp, #4]
  000ac	ea000002	 b           |$LN5@GetGPIOCtx|
  000b0		 |$LN1@GetGPIOCtx|

; 91   :         }
; 92   :     }

  000b0	eaffffd9	 b           |$LN3@GetGPIOCtx|
  000b4		 |$LN2@GetGPIOCtx|

; 93   :     return NULL;

  000b4	e3a03000	 mov         r3, #0
  000b8	e58d3004	 str         r3, [sp, #4]
  000bc		 |$LN5@GetGPIOCtx|

; 94   : }

  000bc	e59d0004	 ldr         r0, [sp, #4]
  000c0	e28dd008	 add         sp, sp, #8
  000c4	e89d6000	 ldmia       sp, {sp, lr}
  000c8	e12fff1e	 bx          lr
  000cc		 |$LN10@GetGPIOCtx|
  000cc		 |$LN11@GetGPIOCtx|
  000cc	00000000	 DCD         |s_intr|
  000d0		 |$M45791|

			 ENDP  ; |GetGPIOCtxtByIrq|

	EXPORT	|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIntrEnableIrqs|
	EXPORT	|??_C@_1GE@GDDCDNKG@?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAf?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@IBNEHINB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIntrInit|
	IMPORT	|BSPIntrInit|
	IMPORT	|g_BSP_icL1Level|
	IMPORT	|GetIrqByDevice|
	IMPORT	|BSPGetGpioIrq|
	IMPORT	|GetAddressByDevice|
	IMPORT	|OALLocalAlloc|
	IMPORT	|SOCGetGPIODeviceByBank|
	IMPORT	|OALPAtoVA|
	IMPORT	|SOCGetIntCtrlAddr|
	IMPORT	|OALIntrMapInit|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|memset|

  00008			 AREA	 |.pdata|, PDATA
|$T45806| DCD	|$LN26@OALIntrIni|
	DCD	0x40017f02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@GDDCDNKG@?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAf?$AAo?$AAr@| DCB "u"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@IBNEHINB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "O", 0x0, "A"
	DCB	0x0, "L", 0x0, "\\", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P"
	DCB	0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "R", 0x0, "\\"
	DCB	0x0, ".", 0x0, "\\", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, ".", 0x0, "c", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  000d0			 AREA	 |.text|, CODE, ARM

  000d0		 |OALIntrInit| PROC

; 190  : {

  000d0		 |$LN26@OALIntrIni|
  000d0	e52de004	 str         lr, [sp, #-4]!
  000d4	e24dd050	 sub         sp, sp, #0x50
  000d8		 |$M45803|

; 191  :     BOOL rc = FALSE;

  000d8	e3a03000	 mov         r3, #0
  000dc	e58d3000	 str         r3, [sp]

; 192  :     UINT32 i, mask;    
; 193  : 
; 194  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"+OALInterruptInit\r\n"));

  000e0	e59f35c8	 ldr         r3, [pc, #0x5C8]
  000e4	e5933440	 ldr         r3, [r3, #0x440]
  000e8	e3130901	 tst         r3, #1, 18
  000ec	0a000008	 beq         |$LN20@OALIntrIni|
  000f0	e59f35b8	 ldr         r3, [pc, #0x5B8]
  000f4	e5933440	 ldr         r3, [r3, #0x440]
  000f8	e3130004	 tst         r3, #4
  000fc	0a000004	 beq         |$LN20@OALIntrIni|
  00100	e59f05c0	 ldr         r0, [pc, #0x5C0]
  00104	eb000000	 bl          NKDbgPrintfW
  00108	e3a03001	 mov         r3, #1
  0010c	e58d3014	 str         r3, [sp, #0x14]
  00110	ea000001	 b           |$LN21@OALIntrIni|
  00114		 |$LN20@OALIntrIni|
  00114	e3a03000	 mov         r3, #0
  00118	e58d3014	 str         r3, [sp, #0x14]
  0011c		 |$LN21@OALIntrIni|

; 195  : 
; 196  :     // Initialize interrupt mapping
; 197  :     OALIntrMapInit();

  0011c	eb000000	 bl          OALIntrMapInit

; 198  : 
; 199  :     // Get interrupt controller and GPIO registers' virtual uncached addresses
; 200  :     memset(&s_intr,0,sizeof(s_intr));

  00120	e3a0200c	 mov         r2, #0xC
  00124	e3a01000	 mov         r1, #0
  00128	e59f0584	 ldr         r0, [pc, #0x584]
  0012c	eb000000	 bl          memset

; 201  :     s_intr.pICLRegs = OALPAtoUA(SOCGetIntCtrlAddr());

  00130	eb000000	 bl          SOCGetIntCtrlAddr
  00134	e58d0018	 str         r0, [sp, #0x18]
  00138	e3a01000	 mov         r1, #0
  0013c	e59d0018	 ldr         r0, [sp, #0x18]
  00140	eb000000	 bl          OALPAtoVA
  00144	e58d001c	 str         r0, [sp, #0x1C]
  00148	e59d201c	 ldr         r2, [sp, #0x1C]
  0014c	e59f3560	 ldr         r3, [pc, #0x560]
  00150	e5832000	 str         r2, [r3]

; 202  :     i=1;

  00154	e3a03001	 mov         r3, #1
  00158	e58d3004	 str         r3, [sp, #4]
  0015c		 |$LN17@OALIntrIni|

; 203  :     while (SOCGetGPIODeviceByBank(i++) != OMAP_DEVICE_NONE)

  0015c	e59d3004	 ldr         r3, [sp, #4]
  00160	e58d3020	 str         r3, [sp, #0x20]
  00164	e59d0020	 ldr         r0, [sp, #0x20]
  00168	eb000000	 bl          SOCGetGPIODeviceByBank
  0016c	e58d0024	 str         r0, [sp, #0x24]
  00170	e59d3024	 ldr         r3, [sp, #0x24]
  00174	e3730001	 cmn         r3, #1
  00178	e59d3004	 ldr         r3, [sp, #4]
  0017c	e2833001	 add         r3, r3, #1
  00180	e58d3004	 str         r3, [sp, #4]
  00184	0a000005	 beq         |$LN16@OALIntrIni|

; 204  :     {        
; 205  :         s_intr.nbGpioBank++; 

  00188	e59f3524	 ldr         r3, [pc, #0x524]
  0018c	e5933004	 ldr         r3, [r3, #4]
  00190	e2832001	 add         r2, r3, #1
  00194	e59f3518	 ldr         r3, [pc, #0x518]
  00198	e5832004	 str         r2, [r3, #4]

; 206  :     }

  0019c	eaffffee	 b           |$LN17@OALIntrIni|
  001a0		 |$LN16@OALIntrIni|

; 207  :     s_intr.pGpioCtxt = OALLocalAlloc(LPTR,sizeof(INTR_GPIO_CTXT)*s_intr.nbGpioBank);

  001a0	e59f350c	 ldr         r3, [pc, #0x50C]
  001a4	e5932004	 ldr         r2, [r3, #4]
  001a8	e3a03020	 mov         r3, #0x20
  001ac	e0010392	 mul         r1, r2, r3
  001b0	e3a00040	 mov         r0, #0x40
  001b4	eb000000	 bl          OALLocalAlloc
  001b8	e58d0028	 str         r0, [sp, #0x28]
  001bc	e59d2028	 ldr         r2, [sp, #0x28]
  001c0	e59f34ec	 ldr         r3, [pc, #0x4EC]
  001c4	e5832008	 str         r2, [r3, #8]

; 208  :     if (s_intr.pGpioCtxt == NULL)

  001c8	e59f34e4	 ldr         r3, [pc, #0x4E4]
  001cc	e5933008	 ldr         r3, [r3, #8]
  001d0	e3530000	 cmp         r3, #0
  001d4	1a000008	 bne         |$LN15@OALIntrIni|

; 209  :     {
; 210  :         ERRORMSG(1,(TEXT("unable to allocate interrupt for GPIO structure\r\n")));

  001d8	e3a020d2	 mov         r2, #0xD2
  001dc	e59f14e0	 ldr         r1, [pc, #0x4E0]
  001e0	e59f04d8	 ldr         r0, [pc, #0x4D8]
  001e4	eb000000	 bl          NKDbgPrintfW
  001e8	e59f04cc	 ldr         r0, [pc, #0x4CC]
  001ec	eb000000	 bl          NKDbgPrintfW

; 211  :         return FALSE;

  001f0	e3a03000	 mov         r3, #0
  001f4	e58d3010	 str         r3, [sp, #0x10]
  001f8	ea000127	 b           |$LN18@OALIntrIni|
  001fc		 |$LN15@OALIntrIni|

; 212  :     }
; 213  :     for (i=0;i<s_intr.nbGpioBank;i++)

  001fc	e3a03000	 mov         r3, #0
  00200	e58d3004	 str         r3, [sp, #4]
  00204	ea000002	 b           |$LN14@OALIntrIni|
  00208		 |$LN13@OALIntrIni|
  00208	e59d3004	 ldr         r3, [sp, #4]
  0020c	e2833001	 add         r3, r3, #1
  00210	e58d3004	 str         r3, [sp, #4]
  00214		 |$LN14@OALIntrIni|
  00214	e59d2004	 ldr         r2, [sp, #4]
  00218	e59f3494	 ldr         r3, [pc, #0x494]
  0021c	e5933004	 ldr         r3, [r3, #4]
  00220	e1520003	 cmp         r2, r3
  00224	2a000042	 bcs         |$LN12@OALIntrIni|

; 214  :     {        
; 215  :         OMAP_DEVICE device = SOCGetGPIODeviceByBank(i+1);

  00228	e59d3004	 ldr         r3, [sp, #4]
  0022c	e2830001	 add         r0, r3, #1
  00230	eb000000	 bl          SOCGetGPIODeviceByBank
  00234	e58d002c	 str         r0, [sp, #0x2C]
  00238	e59d302c	 ldr         r3, [sp, #0x2C]
  0023c	e58d300c	 str         r3, [sp, #0xC]

; 216  :         s_intr.pGpioCtxt[i].pRegs = OALPAtoUA(GetAddressByDevice(device));

  00240	e59d000c	 ldr         r0, [sp, #0xC]
  00244	eb000000	 bl          GetAddressByDevice
  00248	e58d0030	 str         r0, [sp, #0x30]
  0024c	e3a01000	 mov         r1, #0
  00250	e59d0030	 ldr         r0, [sp, #0x30]
  00254	eb000000	 bl          OALPAtoVA
  00258	e58d0034	 str         r0, [sp, #0x34]
  0025c	e59d1004	 ldr         r1, [sp, #4]
  00260	e3a03020	 mov         r3, #0x20
  00264	e0020391	 mul         r2, r1, r3
  00268	e59f3444	 ldr         r3, [pc, #0x444]
  0026c	e5933008	 ldr         r3, [r3, #8]
  00270	e0833002	 add         r3, r3, r2
  00274	e283200c	 add         r2, r3, #0xC
  00278	e59d3034	 ldr         r3, [sp, #0x34]
  0027c	e5823000	 str         r3, [r2]

; 217  :         s_intr.pGpioCtxt[i].device = device;

  00280	e59d1004	 ldr         r1, [sp, #4]
  00284	e3a03020	 mov         r3, #0x20
  00288	e0020391	 mul         r2, r1, r3
  0028c	e59f3420	 ldr         r3, [pc, #0x420]
  00290	e5933008	 ldr         r3, [r3, #8]
  00294	e0833002	 add         r3, r3, r2
  00298	e2832010	 add         r2, r3, #0x10
  0029c	e59d300c	 ldr         r3, [sp, #0xC]
  002a0	e5823000	 str         r3, [r2]

; 218  :         s_intr.pGpioCtxt[i].irq_start = BSPGetGpioIrq(i*32);

  002a4	e59d2004	 ldr         r2, [sp, #4]
  002a8	e3a03020	 mov         r3, #0x20
  002ac	e0000392	 mul         r0, r2, r3
  002b0	eb000000	 bl          BSPGetGpioIrq
  002b4	e58d0038	 str         r0, [sp, #0x38]
  002b8	e59d1004	 ldr         r1, [sp, #4]
  002bc	e3a03020	 mov         r3, #0x20
  002c0	e0020391	 mul         r2, r1, r3
  002c4	e59f33e8	 ldr         r3, [pc, #0x3E8]
  002c8	e5933008	 ldr         r3, [r3, #8]
  002cc	e0832002	 add         r2, r3, r2
  002d0	e59d3038	 ldr         r3, [sp, #0x38]
  002d4	e5823000	 str         r3, [r2]

; 219  :         s_intr.pGpioCtxt[i].bank_irq = GetIrqByDevice(device,NULL);

  002d8	e3a01000	 mov         r1, #0
  002dc	e59d000c	 ldr         r0, [sp, #0xC]
  002e0	eb000000	 bl          GetIrqByDevice
  002e4	e58d003c	 str         r0, [sp, #0x3C]
  002e8	e59d1004	 ldr         r1, [sp, #4]
  002ec	e3a03020	 mov         r3, #0x20
  002f0	e0020391	 mul         r2, r1, r3
  002f4	e59f33b8	 ldr         r3, [pc, #0x3B8]
  002f8	e5933008	 ldr         r3, [r3, #8]
  002fc	e0833002	 add         r3, r3, r2
  00300	e2832008	 add         r2, r3, #8
  00304	e59d303c	 ldr         r3, [sp, #0x3C]
  00308	e5823000	 str         r3, [r2]

; 220  :         s_intr.pGpioCtxt[i].padWakeupEvent = 0;

  0030c	e59d1004	 ldr         r1, [sp, #4]
  00310	e3a03020	 mov         r3, #0x20
  00314	e0020391	 mul         r2, r1, r3
  00318	e59f3394	 ldr         r3, [pc, #0x394]
  0031c	e5933008	 ldr         r3, [r3, #8]
  00320	e0833002	 add         r3, r3, r2
  00324	e283201c	 add         r2, r3, #0x1C
  00328	e3a03000	 mov         r3, #0
  0032c	e5823000	 str         r3, [r2]

; 221  :     }

  00330	eaffffb4	 b           |$LN13@OALIntrIni|
  00334		 |$LN12@OALIntrIni|

; 222  : 
; 223  :     //Reset the MPU INTC and wait until reset is complete
; 224  :     SETREG32(&s_intr.pICLRegs->INTC_SYSCONFIG, SYSCONFIG_SOFTRESET);

  00334	e59f3378	 ldr         r3, [pc, #0x378]
  00338	e5933000	 ldr         r3, [r3]
  0033c	e2833010	 add         r3, r3, #0x10
  00340	e5933000	 ldr         r3, [r3]
  00344	e3832002	 orr         r2, r3, #2
  00348	e59f3364	 ldr         r3, [pc, #0x364]
  0034c	e5933000	 ldr         r3, [r3]
  00350	e2833010	 add         r3, r3, #0x10
  00354	e5832000	 str         r2, [r3]
  00358		 |$LN11@OALIntrIni|

; 225  :     while ((INREG32(&s_intr.pICLRegs->INTC_SYSSTATUS) & SYSSTATUS_RESETDONE) == 0);

  00358	e59f3354	 ldr         r3, [pc, #0x354]
  0035c	e5933000	 ldr         r3, [r3]
  00360	e2833014	 add         r3, r3, #0x14
  00364	e5933000	 ldr         r3, [r3]
  00368	e3130001	 tst         r3, #1
  0036c	1a000000	 bne         |$LN10@OALIntrIni|
  00370	eafffff8	 b           |$LN11@OALIntrIni|
  00374		 |$LN10@OALIntrIni|

; 226  : 
; 227  :     // Disable auto-idle for the interrupt controller
; 228  :     CLRREG32(&s_intr.pICLRegs->INTC_SYSCONFIG, SYSCONFIG_AUTOIDLE);

  00374	e59f3338	 ldr         r3, [pc, #0x338]
  00378	e5933000	 ldr         r3, [r3]
  0037c	e2833010	 add         r3, r3, #0x10
  00380	e5932000	 ldr         r2, [r3]
  00384	e3e03001	 mvn         r3, #1
  00388	e0022003	 and         r2, r2, r3
  0038c	e59f3320	 ldr         r3, [pc, #0x320]
  00390	e5933000	 ldr         r3, [r3]
  00394	e2833010	 add         r3, r3, #0x10
  00398	e5832000	 str         r2, [r3]

; 229  : 
; 230  :     //Disable all interrupts and clear the ISR - for all for GPIO banks, too
; 231  :     OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET0, OMAP_MPUIC_MASKALL);

  0039c	e59f3310	 ldr         r3, [pc, #0x310]
  003a0	e5933000	 ldr         r3, [r3]
  003a4	e283208c	 add         r2, r3, #0x8C
  003a8	e3e03000	 mvn         r3, #0
  003ac	e5823000	 str         r3, [r2]

; 232  :     OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET1, OMAP_MPUIC_MASKALL);

  003b0	e59f32fc	 ldr         r3, [pc, #0x2FC]
  003b4	e5933000	 ldr         r3, [r3]
  003b8	e28320ac	 add         r2, r3, #0xAC
  003bc	e3e03000	 mvn         r3, #0
  003c0	e5823000	 str         r3, [r2]

; 233  :     OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET2, OMAP_MPUIC_MASKALL);

  003c4	e59f32e8	 ldr         r3, [pc, #0x2E8]
  003c8	e5933000	 ldr         r3, [r3]
  003cc	e28320cc	 add         r2, r3, #0xCC
  003d0	e3e03000	 mvn         r3, #0
  003d4	e5823000	 str         r3, [r2]

; 234  : 
; 235  :     // we supose that the GPIO locks are are always running
; 236  :     //// enable gpio clocks
; 237  :     //for (i=0;i<s_intr.nbGpioBank;i++)
; 238  :     //{        
; 239  :     //    EnableDeviceClocks(s_intr.pGpioCtxt[i].device,TRUE);
; 240  :     //}
; 241  : 
; 242  :     //Reset and Disable interrupt/wakeup for all GPIOs
; 243  :     for (i=0;i<s_intr.nbGpioBank;i++)

  003d8	e3a03000	 mov         r3, #0
  003dc	e58d3004	 str         r3, [sp, #4]
  003e0	ea000002	 b           |$LN9@OALIntrIni|
  003e4		 |$LN8@OALIntrIni|
  003e4	e59d3004	 ldr         r3, [sp, #4]
  003e8	e2833001	 add         r3, r3, #1
  003ec	e58d3004	 str         r3, [sp, #4]
  003f0		 |$LN9@OALIntrIni|
  003f0	e59d2004	 ldr         r2, [sp, #4]
  003f4	e59f32b8	 ldr         r3, [pc, #0x2B8]
  003f8	e5933004	 ldr         r3, [r3, #4]
  003fc	e1520003	 cmp         r2, r3
  00400	2a000058	 bcs         |$LN7@OALIntrIni|

; 244  :     {
; 245  :         //Disable interrupt/wakeup
; 246  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->IRQENABLE1, 0x00000000);

  00404	e59d1004	 ldr         r1, [sp, #4]
  00408	e3a03020	 mov         r3, #0x20
  0040c	e0020391	 mul         r2, r1, r3
  00410	e59f329c	 ldr         r3, [pc, #0x29C]
  00414	e5933008	 ldr         r3, [r3, #8]
  00418	e0833002	 add         r3, r3, r2
  0041c	e283300c	 add         r3, r3, #0xC
  00420	e5933000	 ldr         r3, [r3]
  00424	e283201c	 add         r2, r3, #0x1C
  00428	e3a03000	 mov         r3, #0
  0042c	e5823000	 str         r3, [r2]

; 247  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->IRQENABLE2, 0x00000000);

  00430	e59d1004	 ldr         r1, [sp, #4]
  00434	e3a03020	 mov         r3, #0x20
  00438	e0020391	 mul         r2, r1, r3
  0043c	e59f3270	 ldr         r3, [pc, #0x270]
  00440	e5933008	 ldr         r3, [r3, #8]
  00444	e0833002	 add         r3, r3, r2
  00448	e283300c	 add         r3, r3, #0xC
  0044c	e5933000	 ldr         r3, [r3]
  00450	e283202c	 add         r2, r3, #0x2C
  00454	e3a03000	 mov         r3, #0
  00458	e5823000	 str         r3, [r2]

; 248  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->WAKEUPENABLE, 0x00000000);

  0045c	e59d1004	 ldr         r1, [sp, #4]
  00460	e3a03020	 mov         r3, #0x20
  00464	e0020391	 mul         r2, r1, r3
  00468	e59f3244	 ldr         r3, [pc, #0x244]
  0046c	e5933008	 ldr         r3, [r3, #8]
  00470	e0833002	 add         r3, r3, r2
  00474	e283300c	 add         r3, r3, #0xC
  00478	e5933000	 ldr         r3, [r3]
  0047c	e2832020	 add         r2, r3, #0x20
  00480	e3a03000	 mov         r3, #0
  00484	e5823000	 str         r3, [r2]

; 249  : 
; 250  :         // clear irq status bits
; 251  :         mask = INREG32(&s_intr.pGpioCtxt[i].pRegs->IRQSTATUS1);

  00488	e59d1004	 ldr         r1, [sp, #4]
  0048c	e3a03020	 mov         r3, #0x20
  00490	e0020391	 mul         r2, r1, r3
  00494	e59f3218	 ldr         r3, [pc, #0x218]
  00498	e5933008	 ldr         r3, [r3, #8]
  0049c	e0833002	 add         r3, r3, r2
  004a0	e283300c	 add         r3, r3, #0xC
  004a4	e5933000	 ldr         r3, [r3]
  004a8	e2833018	 add         r3, r3, #0x18
  004ac	e5933000	 ldr         r3, [r3]
  004b0	e58d3008	 str         r3, [sp, #8]

; 252  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->IRQSTATUS1, mask);

  004b4	e59d1004	 ldr         r1, [sp, #4]
  004b8	e3a03020	 mov         r3, #0x20
  004bc	e0020391	 mul         r2, r1, r3
  004c0	e59f31ec	 ldr         r3, [pc, #0x1EC]
  004c4	e5933008	 ldr         r3, [r3, #8]
  004c8	e0833002	 add         r3, r3, r2
  004cc	e283300c	 add         r3, r3, #0xC
  004d0	e5933000	 ldr         r3, [r3]
  004d4	e2832018	 add         r2, r3, #0x18
  004d8	e59d3008	 ldr         r3, [sp, #8]
  004dc	e5823000	 str         r3, [r2]

; 253  : 
; 254  :         mask = INREG32(&s_intr.pGpioCtxt[i].pRegs->IRQSTATUS2);

  004e0	e59d1004	 ldr         r1, [sp, #4]
  004e4	e3a03020	 mov         r3, #0x20
  004e8	e0020391	 mul         r2, r1, r3
  004ec	e59f31c0	 ldr         r3, [pc, #0x1C0]
  004f0	e5933008	 ldr         r3, [r3, #8]
  004f4	e0833002	 add         r3, r3, r2
  004f8	e283300c	 add         r3, r3, #0xC
  004fc	e5933000	 ldr         r3, [r3]
  00500	e2833028	 add         r3, r3, #0x28
  00504	e5933000	 ldr         r3, [r3]
  00508	e58d3008	 str         r3, [sp, #8]

; 255  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->IRQSTATUS2, mask);

  0050c	e59d1004	 ldr         r1, [sp, #4]
  00510	e3a03020	 mov         r3, #0x20
  00514	e0020391	 mul         r2, r1, r3
  00518	e59f3194	 ldr         r3, [pc, #0x194]
  0051c	e5933008	 ldr         r3, [r3, #8]
  00520	e0833002	 add         r3, r3, r2
  00524	e283300c	 add         r3, r3, #0xC
  00528	e5933000	 ldr         r3, [r3]
  0052c	e2832028	 add         r2, r3, #0x28
  00530	e59d3008	 ldr         r3, [sp, #8]
  00534	e5823000	 str         r3, [r2]

; 256  : 
; 257  :         //Enable smart and auto idle for GPIO 
; 258  :         //(We don't need to set INTC since INTC is always in smart mode)
; 259  :         // Why is the interrupt subsystem controlling the GPIO subsystem clocks?
; 260  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->SYSCONFIG, 
; 261  :             SYSCONFIG_AUTOIDLE| SYSCONFIG_ENAWAKEUP | SYSCONFIG_SMARTIDLE
; 262  :             );       

  00538	e59d1004	 ldr         r1, [sp, #4]
  0053c	e3a03020	 mov         r3, #0x20
  00540	e0020391	 mul         r2, r1, r3
  00544	e59f3168	 ldr         r3, [pc, #0x168]
  00548	e5933008	 ldr         r3, [r3, #8]
  0054c	e0833002	 add         r3, r3, r2
  00550	e283300c	 add         r3, r3, #0xC
  00554	e5933000	 ldr         r3, [r3]
  00558	e2832010	 add         r2, r3, #0x10
  0055c	e3a03015	 mov         r3, #0x15
  00560	e5823000	 str         r3, [r2]

; 263  :     }

  00564	eaffff9e	 b           |$LN8@OALIntrIni|
  00568		 |$LN7@OALIntrIni|

; 264  :     // clear any possible pending interrupts
; 265  :     INREG32(&s_intr.pICLRegs->INTC_SIR_IRQ);

  00568	e59f3144	 ldr         r3, [pc, #0x144]
  0056c	e5933000	 ldr         r3, [r3]
  00570	e2833040	 add         r3, r3, #0x40
  00574	e5933000	 ldr         r3, [r3]
  00578	e58d3040	 str         r3, [sp, #0x40]

; 266  :     INREG32(&s_intr.pICLRegs->INTC_SIR_FIQ);

  0057c	e59f3130	 ldr         r3, [pc, #0x130]
  00580	e5933000	 ldr         r3, [r3]
  00584	e2833044	 add         r3, r3, #0x44
  00588	e5933000	 ldr         r3, [r3]
  0058c	e58d3044	 str         r3, [sp, #0x44]

; 267  :     //Initialize interrupt routing, level and priority
; 268  :     for (i = 0; i < 96; i++)

  00590	e3a03000	 mov         r3, #0
  00594	e58d3004	 str         r3, [sp, #4]
  00598	ea000002	 b           |$LN6@OALIntrIni|
  0059c		 |$LN5@OALIntrIni|
  0059c	e59d3004	 ldr         r3, [sp, #4]
  005a0	e2833001	 add         r3, r3, #1
  005a4	e58d3004	 str         r3, [sp, #4]
  005a8		 |$LN6@OALIntrIni|
  005a8	e59d3004	 ldr         r3, [sp, #4]
  005ac	e3530060	 cmp         r3, #0x60
  005b0	2a00000e	 bcs         |$LN4@OALIntrIni|

; 269  :     {
; 270  :         OUTREG32(&s_intr.pICLRegs->INTC_ILR[i], g_BSP_icL1Level[i]);

  005b4	e59d1004	 ldr         r1, [sp, #4]
  005b8	e3a03004	 mov         r3, #4
  005bc	e0020391	 mul         r2, r1, r3
  005c0	e59f30f0	 ldr         r3, [pc, #0xF0]
  005c4	e0830002	 add         r0, r3, r2
  005c8	e59f30e4	 ldr         r3, [pc, #0xE4]
  005cc	e5933000	 ldr         r3, [r3]
  005d0	e2831c01	 add         r1, r3, #1, 24
  005d4	e59d2004	 ldr         r2, [sp, #4]
  005d8	e3a03004	 mov         r3, #4
  005dc	e0030392	 mul         r3, r2, r3
  005e0	e0812003	 add         r2, r1, r3
  005e4	e5903000	 ldr         r3, [r0]
  005e8	e5823000	 str         r3, [r2]

; 271  :     }

  005ec	eaffffea	 b           |$LN5@OALIntrIni|
  005f0		 |$LN4@OALIntrIni|

; 272  :     //Call board specific initializatrion
; 273  :     rc = BSPIntrInit();

  005f0	eb000000	 bl          BSPIntrInit
  005f4	e58d0048	 str         r0, [sp, #0x48]
  005f8	e59d3048	 ldr         r3, [sp, #0x48]
  005fc	e58d3000	 str         r3, [sp]

; 274  : 
; 275  :     //// disable gpio clocks
; 276  :     //for (i=0;i<s_intr.nbGpioBank;i++)
; 277  :     //{        
; 278  :     //    EnableDeviceClocks(s_intr.pGpioCtxt[i].device,FALSE);
; 279  :     //}
; 280  : 
; 281  :     // Finally enable the interrupts for the GPIO controllers
; 282  :     for (i=0;i<s_intr.nbGpioBank;i++)

  00600	e3a03000	 mov         r3, #0
  00604	e58d3004	 str         r3, [sp, #4]
  00608	ea000002	 b           |$LN3@OALIntrIni|
  0060c		 |$LN2@OALIntrIni|
  0060c	e59d3004	 ldr         r3, [sp, #4]
  00610	e2833001	 add         r3, r3, #1
  00614	e58d3004	 str         r3, [sp, #4]
  00618		 |$LN3@OALIntrIni|
  00618	e59d2004	 ldr         r2, [sp, #4]
  0061c	e59f3090	 ldr         r3, [pc, #0x90]
  00620	e5933004	 ldr         r3, [r3, #4]
  00624	e1520003	 cmp         r2, r3
  00628	2a000009	 bcs         |$LN1@OALIntrIni|

; 283  :     {        
; 284  :         OALIntrEnableIrqs(1,&s_intr.pGpioCtxt[i].bank_irq);

  0062c	e59d1004	 ldr         r1, [sp, #4]
  00630	e3a03020	 mov         r3, #0x20
  00634	e0020391	 mul         r2, r1, r3
  00638	e59f3074	 ldr         r3, [pc, #0x74]
  0063c	e5933008	 ldr         r3, [r3, #8]
  00640	e0833002	 add         r3, r3, r2
  00644	e2831008	 add         r1, r3, #8
  00648	e3a00001	 mov         r0, #1
  0064c	eb000000	 bl          OALIntrEnableIrqs

; 285  :     }

  00650	eaffffed	 b           |$LN2@OALIntrIni|
  00654		 |$LN1@OALIntrIni|

; 286  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALInterruptInit(rc = %d)\r\n", rc));

  00654	e59f3054	 ldr         r3, [pc, #0x54]
  00658	e5933440	 ldr         r3, [r3, #0x440]
  0065c	e3130901	 tst         r3, #1, 18
  00660	0a000009	 beq         |$LN22@OALIntrIni|
  00664	e59f3044	 ldr         r3, [pc, #0x44]
  00668	e5933440	 ldr         r3, [r3, #0x440]
  0066c	e3130004	 tst         r3, #4
  00670	0a000005	 beq         |$LN22@OALIntrIni|
  00674	e59d1000	 ldr         r1, [sp]
  00678	e59f002c	 ldr         r0, [pc, #0x2C]
  0067c	eb000000	 bl          NKDbgPrintfW
  00680	e3a03001	 mov         r3, #1
  00684	e58d304c	 str         r3, [sp, #0x4C]
  00688	ea000001	 b           |$LN23@OALIntrIni|
  0068c		 |$LN22@OALIntrIni|
  0068c	e3a03000	 mov         r3, #0
  00690	e58d304c	 str         r3, [sp, #0x4C]
  00694		 |$LN23@OALIntrIni|

; 287  :     return rc;

  00694	e59d3000	 ldr         r3, [sp]
  00698	e58d3010	 str         r3, [sp, #0x10]
  0069c		 |$LN18@OALIntrIni|

; 288  : 
; 289  : }

  0069c	e59d0010	 ldr         r0, [sp, #0x10]
  006a0	e28dd050	 add         sp, sp, #0x50
  006a4	e49de004	 ldr         lr, [sp], #4
  006a8	e12fff1e	 bx          lr
  006ac		 |$LN27@OALIntrIni|
  006ac		 |$LN28@OALIntrIni|
  006ac	00000000	 DCD         |??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  006b0		 |$LN29@OALIntrIni|
  006b0	00000000	 DCD         |dpCurSettings|
  006b4		 |$LN30@OALIntrIni|
  006b4	00000000	 DCD         |s_intr|
  006b8		 |$LN31@OALIntrIni|
  006b8	00000000	 DCD         |g_BSP_icL1Level|
  006bc		 |$LN32@OALIntrIni|
  006bc	00000000	 DCD         |??_C@_1GE@GDDCDNKG@?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAf?$AAo?$AAr@|
  006c0		 |$LN33@OALIntrIni|
  006c0	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  006c4		 |$LN34@OALIntrIni|
  006c4	00000000	 DCD         |??_C@_1KE@IBNEHINB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  006c8		 |$LN35@OALIntrIni|
  006c8	00000000	 DCD         |??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  006cc		 |$M45804|

			 ENDP  ; |OALIntrInit|

	EXPORT	|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|OALIntrRequestIrqs|
	IMPORT	|BSPIntrRequestIrqs|

  00010			 AREA	 |.pdata|, PDATA
|$T45829| DCD	|$LN14@OALIntrReq|
	DCD	0x40004f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, "-", 0x0, ">", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  006cc			 AREA	 |.text|, CODE, ARM

  006cc		 |OALIntrRequestIrqs| PROC

; 305  : {

  006cc		 |$LN14@OALIntrReq|
  006cc	e1a0c00d	 mov         r12, sp
  006d0	e92d0007	 stmdb       sp!, {r0 - r2}
  006d4	e92d5000	 stmdb       sp!, {r12, lr}
  006d8	e24dd034	 sub         sp, sp, #0x34
  006dc		 |$M45826|

; 306  :     BOOL rc = FALSE;

  006dc	e3a03000	 mov         r3, #0
  006e0	e58d3010	 str         r3, [sp, #0x10]

; 307  : 
; 308  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 309  :         L"+OALIntrRequestIrqs(0x%08x->%d/%d/0x%08x/%d, 0x%08x, 0x%08x)\r\n",
; 310  :         pDevLoc, pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc,
; 311  :         pDevLoc->Pin, pCount, pIrqs
; 312  :         ));

  006e4	e59f3114	 ldr         r3, [pc, #0x114]
  006e8	e5933440	 ldr         r3, [r3, #0x440]
  006ec	e3130901	 tst         r3, #1, 18
  006f0	0a00001a	 beq         |$LN8@OALIntrReq|
  006f4	e59f3104	 ldr         r3, [pc, #0x104]
  006f8	e5933440	 ldr         r3, [r3, #0x440]
  006fc	e3130004	 tst         r3, #4
  00700	0a000016	 beq         |$LN8@OALIntrReq|
  00704	e59d3044	 ldr         r3, [sp, #0x44]
  00708	e58d300c	 str         r3, [sp, #0xC]
  0070c	e59d3040	 ldr         r3, [sp, #0x40]
  00710	e58d3008	 str         r3, [sp, #8]
  00714	e59d303c	 ldr         r3, [sp, #0x3C]
  00718	e2833010	 add         r3, r3, #0x10
  0071c	e5933000	 ldr         r3, [r3]
  00720	e58d3004	 str         r3, [sp, #4]
  00724	e59d303c	 ldr         r3, [sp, #0x3C]
  00728	e2833008	 add         r3, r3, #8
  0072c	e5933000	 ldr         r3, [r3]
  00730	e58d3000	 str         r3, [sp]
  00734	e59d303c	 ldr         r3, [sp, #0x3C]
  00738	e2833004	 add         r3, r3, #4
  0073c	e5933000	 ldr         r3, [r3]
  00740	e59d203c	 ldr         r2, [sp, #0x3C]
  00744	e5922000	 ldr         r2, [r2]
  00748	e59d103c	 ldr         r1, [sp, #0x3C]
  0074c	e59f00b0	 ldr         r0, [pc, #0xB0]
  00750	eb000000	 bl          NKDbgPrintfW
  00754	e3a03001	 mov         r3, #1
  00758	e58d3028	 str         r3, [sp, #0x28]
  0075c	ea000001	 b           |$LN9@OALIntrReq|
  00760		 |$LN8@OALIntrReq|
  00760	e3a03000	 mov         r3, #0
  00764	e58d3028	 str         r3, [sp, #0x28]
  00768		 |$LN9@OALIntrReq|

; 313  : 
; 314  :     // This shouldn't happen
; 315  :     if (*pCount < 1) goto cleanUp;

  00768	e59d3040	 ldr         r3, [sp, #0x40]
  0076c	e5933000	 ldr         r3, [r3]
  00770	e3530001	 cmp         r3, #1
  00774	2a000000	 bcs         |$LN5@OALIntrReq|
  00778	ea000009	 b           |$cleanUp$45591|
  0077c		 |$LN5@OALIntrReq|

; 316  : 
; 317  :     switch (pDevLoc->IfcType)
; 318  :     {
; 319  :     case Internal:
; 320  :         /*
; 321  :         switch ((ULONG)pDevLoc->LogicalLoc)
; 322  :         {
; 323  :         case OMAP35XX_MCSPI1_REGS_PA:
; 324  :         *pCount = 1;
; 325  :         pIrqs[0] = IRQ_SPI1;
; 326  :         rc = TRUE;
; 327  :         break;
; 328  :         case OMAP35XX_MCSPI2_REGS_PA:
; 329  :         *pCount = 1;
; 330  :         pIrqs[0] = IRQ_SPI2;
; 331  :         rc = TRUE;
; 332  :         break;
; 333  :         case OMAP35XX_UART1_REGS_PA:
; 334  :         *pCount = 1;
; 335  :         pIrqs[0] = IRQ_UART1;
; 336  :         rc = TRUE;
; 337  :         break;
; 338  :         case OMAP35XX_UART2_REGS_PA:
; 339  :         *pCount = 1;
; 340  :         pIrqs[0] = IRQ_UART2;
; 341  :         rc = TRUE;
; 342  :         break;
; 343  :         case OMAP35XX_UART3_REGS_PA:
; 344  :         *pCount = 1;
; 345  :         pIrqs[0] = IRQ_UART3;
; 346  :         rc = TRUE;
; 347  :         break;
; 348  :         }
; 349  :         */
; 350  :         break;
; 351  :     }
; 352  : 
; 353  :     if (!rc) rc = BSPIntrRequestIrqs(pDevLoc, pCount, pIrqs);

  0077c	e59d3010	 ldr         r3, [sp, #0x10]
  00780	e3530000	 cmp         r3, #0
  00784	1a000006	 bne         |$LN1@OALIntrReq|
  00788	e59d2044	 ldr         r2, [sp, #0x44]
  0078c	e59d1040	 ldr         r1, [sp, #0x40]
  00790	e59d003c	 ldr         r0, [sp, #0x3C]
  00794	eb000000	 bl          BSPIntrRequestIrqs
  00798	e58d002c	 str         r0, [sp, #0x2C]
  0079c	e59d302c	 ldr         r3, [sp, #0x2C]
  007a0	e58d3010	 str         r3, [sp, #0x10]
  007a4		 |$LN1@OALIntrReq|
  007a4		 |$cleanUp$45591|

; 354  : 
; 355  : cleanUp:
; 356  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrRequestIrqs(rc = %d)\r\n", rc));

  007a4	e59f3054	 ldr         r3, [pc, #0x54]
  007a8	e5933440	 ldr         r3, [r3, #0x440]
  007ac	e3130901	 tst         r3, #1, 18
  007b0	0a000009	 beq         |$LN10@OALIntrReq|
  007b4	e59f3044	 ldr         r3, [pc, #0x44]
  007b8	e5933440	 ldr         r3, [r3, #0x440]
  007bc	e3130004	 tst         r3, #4
  007c0	0a000005	 beq         |$LN10@OALIntrReq|
  007c4	e59d1010	 ldr         r1, [sp, #0x10]
  007c8	e59f002c	 ldr         r0, [pc, #0x2C]
  007cc	eb000000	 bl          NKDbgPrintfW
  007d0	e3a03001	 mov         r3, #1
  007d4	e58d3030	 str         r3, [sp, #0x30]
  007d8	ea000001	 b           |$LN11@OALIntrReq|
  007dc		 |$LN10@OALIntrReq|
  007dc	e3a03000	 mov         r3, #0
  007e0	e58d3030	 str         r3, [sp, #0x30]
  007e4		 |$LN11@OALIntrReq|

; 357  :     return rc;

  007e4	e59d3010	 ldr         r3, [sp, #0x10]
  007e8	e58d3024	 str         r3, [sp, #0x24]

; 358  : }

  007ec	e59d0024	 ldr         r0, [sp, #0x24]
  007f0	e28dd034	 add         sp, sp, #0x34
  007f4	e89d6000	 ldmia       sp, {sp, lr}
  007f8	e12fff1e	 bx          lr
  007fc		 |$LN15@OALIntrReq|
  007fc		 |$LN16@OALIntrReq|
  007fc	00000000	 DCD         |??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00800		 |$LN17@OALIntrReq|
  00800	00000000	 DCD         |dpCurSettings|
  00804		 |$LN18@OALIntrReq|
  00804	00000000	 DCD         |??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@|
  00808		 |$M45827|

			 ENDP  ; |OALIntrRequestIrqs|

	EXPORT	|??_C@_1DA@PIDAEGAC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@NKDACBOK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@| [ DATA ] ; `string'
	EXPORT	|OALIntrSetDataIrqs|
	IMPORT	|OALSWIntrSetDataIrq|

  00018			 AREA	 |.pdata|, PDATA
|$T45843| DCD	|$LN13@OALIntrSet|
	DCD	0x40005104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PIDAEGAC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@NKDACBOK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00808			 AREA	 |.text|, CODE, ARM

  00808		 |OALIntrSetDataIrqs| PROC

; 371  : {

  00808		 |$LN13@OALIntrSet|
  00808	e1a0c00d	 mov         r12, sp
  0080c	e92d000f	 stmdb       sp!, {r0 - r3}
  00810	e92d5000	 stmdb       sp!, {r12, lr}
  00814	e24dd014	 sub         sp, sp, #0x14
  00818		 |$M45840|

; 372  :     UINT32 i;
; 373  : 
; 374  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 375  :         L"+OALIntrSetDataIrqs(%d, 0x%08x, 0x%08X, %d)\r\n", 
; 376  :         count, pIrqs, pvData, cbData
; 377  :         ));

  00818	e59f3124	 ldr         r3, [pc, #0x124]
  0081c	e5933440	 ldr         r3, [r3, #0x440]
  00820	e3130901	 tst         r3, #1, 18
  00824	0a00000d	 beq         |$LN7@OALIntrSet|
  00828	e59f3114	 ldr         r3, [pc, #0x114]
  0082c	e5933440	 ldr         r3, [r3, #0x440]
  00830	e3130902	 tst         r3, #2, 18
  00834	0a000009	 beq         |$LN7@OALIntrSet|
  00838	e59d3028	 ldr         r3, [sp, #0x28]
  0083c	e58d3000	 str         r3, [sp]
  00840	e59d3024	 ldr         r3, [sp, #0x24]
  00844	e59d2020	 ldr         r2, [sp, #0x20]
  00848	e59d101c	 ldr         r1, [sp, #0x1C]
  0084c	e59f00f4	 ldr         r0, [pc, #0xF4]
  00850	eb000000	 bl          NKDbgPrintfW
  00854	e3a03001	 mov         r3, #1
  00858	e58d300c	 str         r3, [sp, #0xC]
  0085c	ea000001	 b           |$LN8@OALIntrSet|
  00860		 |$LN7@OALIntrSet|
  00860	e3a03000	 mov         r3, #0
  00864	e58d300c	 str         r3, [sp, #0xC]
  00868		 |$LN8@OALIntrSet|

; 378  : 
; 379  :     for (i = 0; i < count; i++)

  00868	e3a03000	 mov         r3, #0
  0086c	e58d3004	 str         r3, [sp, #4]
  00870	ea000002	 b           |$LN4@OALIntrSet|
  00874		 |$LN3@OALIntrSet|
  00874	e59d3004	 ldr         r3, [sp, #4]
  00878	e2833001	 add         r3, r3, #1
  0087c	e58d3004	 str         r3, [sp, #4]
  00880		 |$LN4@OALIntrSet|
  00880	e59d2004	 ldr         r2, [sp, #4]
  00884	e59d301c	 ldr         r3, [sp, #0x1C]
  00888	e1520003	 cmp         r2, r3
  0088c	2a000019	 bcs         |$LN2@OALIntrSet|

; 380  :         {
; 381  :         if (96 < pIrqs[i] && pIrqs[i] < IRQ_SW_RESERVED_MAX)

  00890	e59d1004	 ldr         r1, [sp, #4]
  00894	e3a03004	 mov         r3, #4
  00898	e0020391	 mul         r2, r1, r3
  0089c	e59d3020	 ldr         r3, [sp, #0x20]
  008a0	e0833002	 add         r3, r3, r2
  008a4	e5933000	 ldr         r3, [r3]
  008a8	e3530060	 cmp         r3, #0x60
  008ac	9a000010	 bls         |$LN1@OALIntrSet|
  008b0	e59d1004	 ldr         r1, [sp, #4]
  008b4	e3a03004	 mov         r3, #4
  008b8	e0020391	 mul         r2, r1, r3
  008bc	e59d3020	 ldr         r3, [sp, #0x20]
  008c0	e0833002	 add         r3, r3, r2
  008c4	e5933000	 ldr         r3, [r3]
  008c8	e353006e	 cmp         r3, #0x6E
  008cc	2a000008	 bcs         |$LN1@OALIntrSet|

; 382  :             {
; 383  :             // call software irq handler
; 384  :             OALSWIntrSetDataIrq(pIrqs[i], pvData, cbData);

  008d0	e59d2028	 ldr         r2, [sp, #0x28]
  008d4	e59d1024	 ldr         r1, [sp, #0x24]
  008d8	e59de004	 ldr         lr, [sp, #4]
  008dc	e3a03004	 mov         r3, #4
  008e0	e000039e	 mul         r0, lr, r3
  008e4	e59d3020	 ldr         r3, [sp, #0x20]
  008e8	e0833000	 add         r3, r3, r0
  008ec	e5930000	 ldr         r0, [r3]
  008f0	eb000000	 bl          OALSWIntrSetDataIrq
  008f4		 |$LN1@OALIntrSet|

; 385  :             }
; 386  :         }

  008f4	eaffffde	 b           |$LN3@OALIntrSet|
  008f8		 |$LN2@OALIntrSet|

; 387  : 
; 388  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrSetDataIrqs()\r\n"));

  008f8	e59f3044	 ldr         r3, [pc, #0x44]
  008fc	e5933440	 ldr         r3, [r3, #0x440]
  00900	e3130901	 tst         r3, #1, 18
  00904	0a000008	 beq         |$LN9@OALIntrSet|
  00908	e59f3034	 ldr         r3, [pc, #0x34]
  0090c	e5933440	 ldr         r3, [r3, #0x440]
  00910	e3130902	 tst         r3, #2, 18
  00914	0a000004	 beq         |$LN9@OALIntrSet|
  00918	e59f0020	 ldr         r0, [pc, #0x20]
  0091c	eb000000	 bl          NKDbgPrintfW
  00920	e3a03001	 mov         r3, #1
  00924	e58d3010	 str         r3, [sp, #0x10]
  00928	ea000001	 b           |$LN10@OALIntrSet|
  0092c		 |$LN9@OALIntrSet|
  0092c	e3a03000	 mov         r3, #0
  00930	e58d3010	 str         r3, [sp, #0x10]
  00934		 |$LN10@OALIntrSet|

; 389  : }

  00934	e28dd014	 add         sp, sp, #0x14
  00938	e89d6000	 ldmia       sp, {sp, lr}
  0093c	e12fff1e	 bx          lr
  00940		 |$LN14@OALIntrSet|
  00940		 |$LN15@OALIntrSet|
  00940	00000000	 DCD         |??_C@_1DA@PIDAEGAC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00944		 |$LN16@OALIntrSet|
  00944	00000000	 DCD         |dpCurSettings|
  00948		 |$LN17@OALIntrSet|
  00948	00000000	 DCD         |??_C@_1FM@NKDACBOK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@|
  0094c		 |$M45841|

			 ENDP  ; |OALIntrSetDataIrqs|

	EXPORT	|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALSWIntrEnableIrq|

  00020			 AREA	 |.pdata|, PDATA
|$T45857| DCD	|$LN21@OALIntrEna|
	DCD	0x40007304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  0094c			 AREA	 |.text|, CODE, ARM

  0094c		 |OALIntrEnableIrqs| PROC

; 400  : {

  0094c		 |$LN21@OALIntrEna|
  0094c	e1a0c00d	 mov         r12, sp
  00950	e92d0003	 stmdb       sp!, {r0, r1}
  00954	e92d5000	 stmdb       sp!, {r12, lr}
  00958	e24dd018	 sub         sp, sp, #0x18
  0095c		 |$M45854|

; 401  :     BOOL rc = FALSE;

  0095c	e3a03000	 mov         r3, #0
  00960	e58d3000	 str         r3, [sp]

; 402  :     UINT32 irq, i;
; 403  : 
; 404  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 405  :         L"+OALntrEnableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 406  :         ));

  00964	e59f31a0	 ldr         r3, [pc, #0x1A0]
  00968	e5933440	 ldr         r3, [r3, #0x440]
  0096c	e3130901	 tst         r3, #1, 18
  00970	0a00000a	 beq         |$LN15@OALIntrEna|
  00974	e59f3190	 ldr         r3, [pc, #0x190]
  00978	e5933440	 ldr         r3, [r3, #0x440]
  0097c	e3130902	 tst         r3, #2, 18
  00980	0a000006	 beq         |$LN15@OALIntrEna|
  00984	e59d2024	 ldr         r2, [sp, #0x24]
  00988	e59d1020	 ldr         r1, [sp, #0x20]
  0098c	e59f0180	 ldr         r0, [pc, #0x180]
  00990	eb000000	 bl          NKDbgPrintfW
  00994	e3a03001	 mov         r3, #1
  00998	e58d3010	 str         r3, [sp, #0x10]
  0099c	ea000001	 b           |$LN16@OALIntrEna|
  009a0		 |$LN15@OALIntrEna|
  009a0	e3a03000	 mov         r3, #0
  009a4	e58d3010	 str         r3, [sp, #0x10]
  009a8		 |$LN16@OALIntrEna|

; 407  : 
; 408  :     for (i = 0; i < count; i++)

  009a8	e3a03000	 mov         r3, #0
  009ac	e58d3004	 str         r3, [sp, #4]
  009b0	ea000002	 b           |$LN12@OALIntrEna|
  009b4		 |$LN11@OALIntrEna|
  009b4	e59d3004	 ldr         r3, [sp, #4]
  009b8	e2833001	 add         r3, r3, #1
  009bc	e58d3004	 str         r3, [sp, #4]
  009c0		 |$LN12@OALIntrEna|
  009c0	e59d2004	 ldr         r2, [sp, #4]
  009c4	e59d3020	 ldr         r3, [sp, #0x20]
  009c8	e1520003	 cmp         r2, r3
  009cc	2a000037	 bcs         |$LN10@OALIntrEna|

; 409  :     {
; 410  :         irq = pIrqs[i];

  009d0	e59d1004	 ldr         r1, [sp, #4]
  009d4	e3a03004	 mov         r3, #4
  009d8	e0020391	 mul         r2, r1, r3
  009dc	e59d3024	 ldr         r3, [sp, #0x24]
  009e0	e0833002	 add         r3, r3, r2
  009e4	e5933000	 ldr         r3, [r3]
  009e8	e58d3008	 str         r3, [sp, #8]

; 411  : 
; 412  :         if (irq != OAL_INTR_IRQ_UNDEFINED)

  009ec	e59d3008	 ldr         r3, [sp, #8]
  009f0	e3730001	 cmn         r3, #1
  009f4	0a00002c	 beq         |$LN9@OALIntrEna|

; 413  :         {
; 414  :             if (irq < 32)

  009f8	e59d3008	 ldr         r3, [sp, #8]
  009fc	e3530020	 cmp         r3, #0x20
  00a00	2a000007	 bcs         |$LN8@OALIntrEna|

; 415  :             {
; 416  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR0, 1 << irq);

  00a04	e59d2008	 ldr         r2, [sp, #8]
  00a08	e3a03001	 mov         r3, #1
  00a0c	e1a02213	 mov         r2, r3, lsl r2
  00a10	e59f30f8	 ldr         r3, [pc, #0xF8]
  00a14	e5933000	 ldr         r3, [r3]
  00a18	e2833088	 add         r3, r3, #0x88
  00a1c	e5832000	 str         r2, [r3]
  00a20	ea00001f	 b           |$LN7@OALIntrEna|
  00a24		 |$LN8@OALIntrEna|

; 417  :             }
; 418  :             else if (irq < 64)

  00a24	e59d3008	 ldr         r3, [sp, #8]
  00a28	e3530040	 cmp         r3, #0x40
  00a2c	2a000008	 bcs         |$LN6@OALIntrEna|

; 419  :             {
; 420  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR1, 1 << (irq - 32));

  00a30	e59d3008	 ldr         r3, [sp, #8]
  00a34	e2432020	 sub         r2, r3, #0x20
  00a38	e3a03001	 mov         r3, #1
  00a3c	e1a02213	 mov         r2, r3, lsl r2
  00a40	e59f30c8	 ldr         r3, [pc, #0xC8]
  00a44	e5933000	 ldr         r3, [r3]
  00a48	e28330a8	 add         r3, r3, #0xA8
  00a4c	e5832000	 str         r2, [r3]
  00a50	ea000013	 b           |$LN5@OALIntrEna|
  00a54		 |$LN6@OALIntrEna|

; 421  :             }
; 422  :             else if (irq < 96)

  00a54	e59d3008	 ldr         r3, [sp, #8]
  00a58	e3530060	 cmp         r3, #0x60
  00a5c	2a000008	 bcs         |$LN4@OALIntrEna|

; 423  :             {
; 424  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR2, 1 << (irq - 64));

  00a60	e59d3008	 ldr         r3, [sp, #8]
  00a64	e2432040	 sub         r2, r3, #0x40
  00a68	e3a03001	 mov         r3, #1
  00a6c	e1a02213	 mov         r2, r3, lsl r2
  00a70	e59f3098	 ldr         r3, [pc, #0x98]
  00a74	e5933000	 ldr         r3, [r3]
  00a78	e28330c8	 add         r3, r3, #0xC8
  00a7c	e5832000	 str         r2, [r3]
  00a80	ea000007	 b           |$LN3@OALIntrEna|
  00a84		 |$LN4@OALIntrEna|

; 425  :             }
; 426  :             else if (irq < IRQ_SW_RESERVED_MAX )

  00a84	e59d3008	 ldr         r3, [sp, #8]
  00a88	e353006e	 cmp         r3, #0x6E
  00a8c	2a000002	 bcs         |$LN2@OALIntrEna|

; 427  :             {
; 428  :                 // call software irq handler
; 429  :                 OALSWIntrEnableIrq(irq);

  00a90	e59d0008	 ldr         r0, [sp, #8]
  00a94	eb000000	 bl          OALSWIntrEnableIrq

; 430  :             }
; 431  :             else 

  00a98	ea000001	 b           |$LN1@OALIntrEna|
  00a9c		 |$LN2@OALIntrEna|

; 432  :             {
; 433  :                 OALGPIOEnableIRQ(irq);

  00a9c	e59d0008	 ldr         r0, [sp, #8]
  00aa0	eb000000	 bl          OALGPIOEnableIRQ
  00aa4		 |$LN1@OALIntrEna|
  00aa4		 |$LN3@OALIntrEna|
  00aa4		 |$LN5@OALIntrEna|
  00aa4		 |$LN7@OALIntrEna|

; 434  :             }
; 435  :             rc = TRUE;

  00aa4	e3a03001	 mov         r3, #1
  00aa8	e58d3000	 str         r3, [sp]
  00aac		 |$LN9@OALIntrEna|

; 436  :         }
; 437  : 
; 438  :     }

  00aac	eaffffc0	 b           |$LN11@OALIntrEna|
  00ab0		 |$LN10@OALIntrEna|

; 439  : 
; 440  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrEnableIrqs(rc = %d)\r\n", rc));

  00ab0	e59f3054	 ldr         r3, [pc, #0x54]
  00ab4	e5933440	 ldr         r3, [r3, #0x440]
  00ab8	e3130901	 tst         r3, #1, 18
  00abc	0a000009	 beq         |$LN17@OALIntrEna|
  00ac0	e59f3044	 ldr         r3, [pc, #0x44]
  00ac4	e5933440	 ldr         r3, [r3, #0x440]
  00ac8	e3130902	 tst         r3, #2, 18
  00acc	0a000005	 beq         |$LN17@OALIntrEna|
  00ad0	e59d1000	 ldr         r1, [sp]
  00ad4	e59f002c	 ldr         r0, [pc, #0x2C]
  00ad8	eb000000	 bl          NKDbgPrintfW
  00adc	e3a03001	 mov         r3, #1
  00ae0	e58d3014	 str         r3, [sp, #0x14]
  00ae4	ea000001	 b           |$LN18@OALIntrEna|
  00ae8		 |$LN17@OALIntrEna|
  00ae8	e3a03000	 mov         r3, #0
  00aec	e58d3014	 str         r3, [sp, #0x14]
  00af0		 |$LN18@OALIntrEna|

; 441  :     return rc;

  00af0	e59d3000	 ldr         r3, [sp]
  00af4	e58d300c	 str         r3, [sp, #0xC]

; 442  : }

  00af8	e59d000c	 ldr         r0, [sp, #0xC]
  00afc	e28dd018	 add         sp, sp, #0x18
  00b00	e89d6000	 ldmia       sp, {sp, lr}
  00b04	e12fff1e	 bx          lr
  00b08		 |$LN22@OALIntrEna|
  00b08		 |$LN23@OALIntrEna|
  00b08	00000000	 DCD         |??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00b0c		 |$LN24@OALIntrEna|
  00b0c	00000000	 DCD         |dpCurSettings|
  00b10		 |$LN25@OALIntrEna|
  00b10	00000000	 DCD         |s_intr|
  00b14		 |$LN26@OALIntrEna|
  00b14	00000000	 DCD         |??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00b18		 |$M45855|

			 ENDP  ; |OALIntrEnableIrqs|

	IMPORT	|OEMEnableIOPadWakeup|
	IMPORT	|__rt_udiv|

  00028			 AREA	 |.pdata|, PDATA
|$T45868| DCD	|$LN10@OALGPIOEna|
	DCD	0x40005b04
; Function compile flags: /Odtp

  00b18			 AREA	 |.text|, CODE, ARM

  00b18		 |OALGPIOEnableIRQ| PROC

; 123  : {

  00b18		 |$LN10@OALGPIOEna|
  00b18	e1a0c00d	 mov         r12, sp
  00b1c	e92d0001	 stmdb       sp!, {r0}
  00b20	e92d5000	 stmdb       sp!, {r12, lr}
  00b24	e24dd00c	 sub         sp, sp, #0xC
  00b28		 |$M45865|

; 124  :     register INTR_GPIO_CTXT* ctxt = GetGPIOCtxtByIrq(irq);

  00b28	e59d0014	 ldr         r0, [sp, #0x14]
  00b2c	eb000000	 bl          GetGPIOCtxtByIrq
  00b30	e58d0004	 str         r0, [sp, #4]
  00b34	e59d3004	 ldr         r3, [sp, #4]
  00b38	e58d3000	 str         r3, [sp]

; 125  :     if (ctxt)

  00b3c	e59d3000	 ldr         r3, [sp]
  00b40	e3530000	 cmp         r3, #0
  00b44	0a00004a	 beq         |$LN5@OALGPIOEna|

; 126  :     {
; 127  : //        EnableDeviceClocks(ctxt->device, TRUE);  // This function uses a reference counter.
; 128  : 		if (ctxt->bank_irq < 32)

  00b48	e59d3000	 ldr         r3, [sp]
  00b4c	e2833008	 add         r3, r3, #8
  00b50	e5933000	 ldr         r3, [r3]
  00b54	e3530020	 cmp         r3, #0x20
  00b58	2a00000b	 bcs         |$LN4@OALGPIOEna|

; 129  : 		{
; 130  : 	        OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR0, 1 << (ctxt->bank_irq % 32));

  00b5c	e59d3000	 ldr         r3, [sp]
  00b60	e2833008	 add         r3, r3, #8
  00b64	e5931000	 ldr         r1, [r3]
  00b68	e3a00020	 mov         r0, #0x20
  00b6c	eb000000	 bl          __rt_udiv
  00b70	e3a03001	 mov         r3, #1
  00b74	e1a02113	 mov         r2, r3, lsl r1
  00b78	e59f3100	 ldr         r3, [pc, #0x100]
  00b7c	e5933000	 ldr         r3, [r3]
  00b80	e2833088	 add         r3, r3, #0x88
  00b84	e5832000	 str         r2, [r3]
  00b88	ea00001b	 b           |$LN3@OALGPIOEna|
  00b8c		 |$LN4@OALGPIOEna|

; 131  : 		}
; 132  : 		else if (ctxt->bank_irq < 64)

  00b8c	e59d3000	 ldr         r3, [sp]
  00b90	e2833008	 add         r3, r3, #8
  00b94	e5933000	 ldr         r3, [r3]
  00b98	e3530040	 cmp         r3, #0x40
  00b9c	2a00000b	 bcs         |$LN2@OALGPIOEna|

; 133  : 		{
; 134  : 	        OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR1, 1 << (ctxt->bank_irq % 32));

  00ba0	e59d3000	 ldr         r3, [sp]
  00ba4	e2833008	 add         r3, r3, #8
  00ba8	e5931000	 ldr         r1, [r3]
  00bac	e3a00020	 mov         r0, #0x20
  00bb0	eb000000	 bl          __rt_udiv
  00bb4	e3a03001	 mov         r3, #1
  00bb8	e1a02113	 mov         r2, r3, lsl r1
  00bbc	e59f30bc	 ldr         r3, [pc, #0xBC]
  00bc0	e5933000	 ldr         r3, [r3]
  00bc4	e28330a8	 add         r3, r3, #0xA8
  00bc8	e5832000	 str         r2, [r3]

; 135  : 		}
; 136  : 		else

  00bcc	ea00000a	 b           |$LN1@OALGPIOEna|
  00bd0		 |$LN2@OALGPIOEna|

; 137  : 		{
; 138  : 	        OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR2, 1 << (ctxt->bank_irq % 32));

  00bd0	e59d3000	 ldr         r3, [sp]
  00bd4	e2833008	 add         r3, r3, #8
  00bd8	e5931000	 ldr         r1, [r3]
  00bdc	e3a00020	 mov         r0, #0x20
  00be0	eb000000	 bl          __rt_udiv
  00be4	e3a03001	 mov         r3, #1
  00be8	e1a02113	 mov         r2, r3, lsl r1
  00bec	e59f308c	 ldr         r3, [pc, #0x8C]
  00bf0	e5933000	 ldr         r3, [r3]
  00bf4	e28330c8	 add         r3, r3, #0xC8
  00bf8	e5832000	 str         r2, [r3]
  00bfc		 |$LN1@OALGPIOEna|
  00bfc		 |$LN3@OALGPIOEna|

; 139  : 		}
; 140  : 
; 141  :         OUTREG32(&ctxt->pRegs->SETIRQENABLE1, 1<<(irq - ctxt->irq_start));   // unmask IRQ

  00bfc	e59d2014	 ldr         r2, [sp, #0x14]
  00c00	e59d3000	 ldr         r3, [sp]
  00c04	e5933000	 ldr         r3, [r3]
  00c08	e0422003	 sub         r2, r2, r3
  00c0c	e3a03001	 mov         r3, #1
  00c10	e1a02213	 mov         r2, r3, lsl r2
  00c14	e59d3000	 ldr         r3, [sp]
  00c18	e283300c	 add         r3, r3, #0xC
  00c1c	e5933000	 ldr         r3, [r3]
  00c20	e2833064	 add         r3, r3, #0x64
  00c24	e5832000	 str         r2, [r3]

; 142  :         OUTREG32(&ctxt->pRegs->SETWAKEUPENA,  1<<(irq - ctxt->irq_start));        

  00c28	e59d2014	 ldr         r2, [sp, #0x14]
  00c2c	e59d3000	 ldr         r3, [sp]
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e0422003	 sub         r2, r2, r3
  00c38	e3a03001	 mov         r3, #1
  00c3c	e1a02213	 mov         r2, r3, lsl r2
  00c40	e59d3000	 ldr         r3, [sp]
  00c44	e283300c	 add         r3, r3, #0xC
  00c48	e5933000	 ldr         r3, [r3]
  00c4c	e2833084	 add         r3, r3, #0x84
  00c50	e5832000	 str         r2, [r3]

; 143  :         OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), TRUE);

  00c54	e3a00000	 mov         r0, #0
  00c58	eb000000	 bl          BSPGetGpioIrq
  00c5c	e58d0008	 str         r0, [sp, #8]
  00c60	e3a01001	 mov         r1, #1
  00c64	e59d2014	 ldr         r2, [sp, #0x14]
  00c68	e59d3008	 ldr         r3, [sp, #8]
  00c6c	e0420003	 sub         r0, r2, r3
  00c70	eb000000	 bl          OEMEnableIOPadWakeup
  00c74		 |$LN5@OALGPIOEna|

; 144  :     }
; 145  : }

  00c74	e28dd00c	 add         sp, sp, #0xC
  00c78	e89d6000	 ldmia       sp, {sp, lr}
  00c7c	e12fff1e	 bx          lr
  00c80		 |$LN11@OALGPIOEna|
  00c80		 |$LN12@OALGPIOEna|
  00c80	00000000	 DCD         |s_intr|
  00c84		 |$M45866|

			 ENDP  ; |OALGPIOEnableIRQ|

	EXPORT	|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|OALIntrDisableIrqs|
	IMPORT	|OALSWIntrDisableIrq|

  00030			 AREA	 |.pdata|, PDATA
|$T45879| DCD	|$LN21@OALIntrDis|
	DCD	0x40006b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00c84			 AREA	 |.text|, CODE, ARM

  00c84		 |OALIntrDisableIrqs| PROC

; 453  : {

  00c84		 |$LN21@OALIntrDis|
  00c84	e1a0c00d	 mov         r12, sp
  00c88	e92d0003	 stmdb       sp!, {r0, r1}
  00c8c	e92d5000	 stmdb       sp!, {r12, lr}
  00c90	e24dd010	 sub         sp, sp, #0x10
  00c94		 |$M45876|

; 454  :     UINT32 irq, i;
; 455  : 
; 456  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 457  :         L"+OALIntrDisableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 458  :         ));

  00c94	e59f3188	 ldr         r3, [pc, #0x188]
  00c98	e5933440	 ldr         r3, [r3, #0x440]
  00c9c	e3130901	 tst         r3, #1, 18
  00ca0	0a00000a	 beq         |$LN15@OALIntrDis|
  00ca4	e59f3178	 ldr         r3, [pc, #0x178]
  00ca8	e5933440	 ldr         r3, [r3, #0x440]
  00cac	e3130902	 tst         r3, #2, 18
  00cb0	0a000006	 beq         |$LN15@OALIntrDis|
  00cb4	e59d201c	 ldr         r2, [sp, #0x1C]
  00cb8	e59d1018	 ldr         r1, [sp, #0x18]
  00cbc	e59f0168	 ldr         r0, [pc, #0x168]
  00cc0	eb000000	 bl          NKDbgPrintfW
  00cc4	e3a03001	 mov         r3, #1
  00cc8	e58d3008	 str         r3, [sp, #8]
  00ccc	ea000001	 b           |$LN16@OALIntrDis|
  00cd0		 |$LN15@OALIntrDis|
  00cd0	e3a03000	 mov         r3, #0
  00cd4	e58d3008	 str         r3, [sp, #8]
  00cd8		 |$LN16@OALIntrDis|

; 459  : 
; 460  :     for (i = 0; i < count; i++)

  00cd8	e3a03000	 mov         r3, #0
  00cdc	e58d3000	 str         r3, [sp]
  00ce0	ea000002	 b           |$LN12@OALIntrDis|
  00ce4		 |$LN11@OALIntrDis|
  00ce4	e59d3000	 ldr         r3, [sp]
  00ce8	e2833001	 add         r3, r3, #1
  00cec	e58d3000	 str         r3, [sp]
  00cf0		 |$LN12@OALIntrDis|
  00cf0	e59d2000	 ldr         r2, [sp]
  00cf4	e59d3018	 ldr         r3, [sp, #0x18]
  00cf8	e1520003	 cmp         r2, r3
  00cfc	2a000035	 bcs         |$LN10@OALIntrDis|

; 461  :     {
; 462  :         irq = pIrqs[i];

  00d00	e59d1000	 ldr         r1, [sp]
  00d04	e3a03004	 mov         r3, #4
  00d08	e0020391	 mul         r2, r1, r3
  00d0c	e59d301c	 ldr         r3, [sp, #0x1C]
  00d10	e0833002	 add         r3, r3, r2
  00d14	e5933000	 ldr         r3, [r3]
  00d18	e58d3004	 str         r3, [sp, #4]

; 463  : 
; 464  :         if (irq != OAL_INTR_IRQ_UNDEFINED)

  00d1c	e59d3004	 ldr         r3, [sp, #4]
  00d20	e3730001	 cmn         r3, #1
  00d24	0a00002a	 beq         |$LN9@OALIntrDis|

; 465  :         {            
; 466  :             if (irq < 32)

  00d28	e59d3004	 ldr         r3, [sp, #4]
  00d2c	e3530020	 cmp         r3, #0x20
  00d30	2a000007	 bcs         |$LN8@OALIntrDis|

; 467  :             {
; 468  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET0, 1 << irq);

  00d34	e59d2004	 ldr         r2, [sp, #4]
  00d38	e3a03001	 mov         r3, #1
  00d3c	e1a02213	 mov         r2, r3, lsl r2
  00d40	e59f30e0	 ldr         r3, [pc, #0xE0]
  00d44	e5933000	 ldr         r3, [r3]
  00d48	e283308c	 add         r3, r3, #0x8C
  00d4c	e5832000	 str         r2, [r3]
  00d50	ea00001f	 b           |$LN7@OALIntrDis|
  00d54		 |$LN8@OALIntrDis|

; 469  :             }
; 470  :             else if (irq < 64)

  00d54	e59d3004	 ldr         r3, [sp, #4]
  00d58	e3530040	 cmp         r3, #0x40
  00d5c	2a000008	 bcs         |$LN6@OALIntrDis|

; 471  :             {
; 472  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET1, 1 << (irq - 32));

  00d60	e59d3004	 ldr         r3, [sp, #4]
  00d64	e2432020	 sub         r2, r3, #0x20
  00d68	e3a03001	 mov         r3, #1
  00d6c	e1a02213	 mov         r2, r3, lsl r2
  00d70	e59f30b0	 ldr         r3, [pc, #0xB0]
  00d74	e5933000	 ldr         r3, [r3]
  00d78	e28330ac	 add         r3, r3, #0xAC
  00d7c	e5832000	 str         r2, [r3]
  00d80	ea000013	 b           |$LN5@OALIntrDis|
  00d84		 |$LN6@OALIntrDis|

; 473  :             }
; 474  :             else if (irq < 96)

  00d84	e59d3004	 ldr         r3, [sp, #4]
  00d88	e3530060	 cmp         r3, #0x60
  00d8c	2a000008	 bcs         |$LN4@OALIntrDis|

; 475  :             {
; 476  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET2, 1 << (irq - 64));

  00d90	e59d3004	 ldr         r3, [sp, #4]
  00d94	e2432040	 sub         r2, r3, #0x40
  00d98	e3a03001	 mov         r3, #1
  00d9c	e1a02213	 mov         r2, r3, lsl r2
  00da0	e59f3080	 ldr         r3, [pc, #0x80]
  00da4	e5933000	 ldr         r3, [r3]
  00da8	e28330cc	 add         r3, r3, #0xCC
  00dac	e5832000	 str         r2, [r3]
  00db0	ea000007	 b           |$LN3@OALIntrDis|
  00db4		 |$LN4@OALIntrDis|

; 477  :             }
; 478  :             else if (irq < IRQ_SW_RESERVED_MAX )

  00db4	e59d3004	 ldr         r3, [sp, #4]
  00db8	e353006e	 cmp         r3, #0x6E
  00dbc	2a000002	 bcs         |$LN2@OALIntrDis|

; 479  :             {
; 480  :                 // call software irq handler
; 481  :                 OALSWIntrDisableIrq(irq);

  00dc0	e59d0004	 ldr         r0, [sp, #4]
  00dc4	eb000000	 bl          OALSWIntrDisableIrq

; 482  :             }
; 483  :             else 

  00dc8	ea000001	 b           |$LN1@OALIntrDis|
  00dcc		 |$LN2@OALIntrDis|

; 484  :             {
; 485  :                 OALGPIODisableIRQ(irq);

  00dcc	e59d0004	 ldr         r0, [sp, #4]
  00dd0	eb000000	 bl          OALGPIODisableIRQ
  00dd4		 |$LN1@OALIntrDis|
  00dd4		 |$LN3@OALIntrDis|
  00dd4		 |$LN5@OALIntrDis|
  00dd4		 |$LN7@OALIntrDis|
  00dd4		 |$LN9@OALIntrDis|

; 486  :             }
; 487  :         }
; 488  :     }

  00dd4	eaffffc2	 b           |$LN11@OALIntrDis|
  00dd8		 |$LN10@OALIntrDis|

; 489  : 
; 490  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrDisableIrqs\r\n"));

  00dd8	e59f3044	 ldr         r3, [pc, #0x44]
  00ddc	e5933440	 ldr         r3, [r3, #0x440]
  00de0	e3130901	 tst         r3, #1, 18
  00de4	0a000008	 beq         |$LN17@OALIntrDis|
  00de8	e59f3034	 ldr         r3, [pc, #0x34]
  00dec	e5933440	 ldr         r3, [r3, #0x440]
  00df0	e3130902	 tst         r3, #2, 18
  00df4	0a000004	 beq         |$LN17@OALIntrDis|
  00df8	e59f0020	 ldr         r0, [pc, #0x20]
  00dfc	eb000000	 bl          NKDbgPrintfW
  00e00	e3a03001	 mov         r3, #1
  00e04	e58d300c	 str         r3, [sp, #0xC]
  00e08	ea000001	 b           |$LN18@OALIntrDis|
  00e0c		 |$LN17@OALIntrDis|
  00e0c	e3a03000	 mov         r3, #0
  00e10	e58d300c	 str         r3, [sp, #0xC]
  00e14		 |$LN18@OALIntrDis|

; 491  : }

  00e14	e28dd010	 add         sp, sp, #0x10
  00e18	e89d6000	 ldmia       sp, {sp, lr}
  00e1c	e12fff1e	 bx          lr
  00e20		 |$LN22@OALIntrDis|
  00e20		 |$LN23@OALIntrDis|
  00e20	00000000	 DCD         |??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00e24		 |$LN24@OALIntrDis|
  00e24	00000000	 DCD         |dpCurSettings|
  00e28		 |$LN25@OALIntrDis|
  00e28	00000000	 DCD         |s_intr|
  00e2c		 |$LN26@OALIntrDis|
  00e2c	00000000	 DCD         |??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@|
  00e30		 |$M45877|

			 ENDP  ; |OALIntrDisableIrqs|


  00038			 AREA	 |.pdata|, PDATA
|$T45889| DCD	|$LN6@OALGPIODis|
	DCD	0x40002d04
; Function compile flags: /Odtp

  00e30			 AREA	 |.text|, CODE, ARM

  00e30		 |OALGPIODisableIRQ| PROC

; 147  : {

  00e30		 |$LN6@OALGPIODis|
  00e30	e1a0c00d	 mov         r12, sp
  00e34	e92d0001	 stmdb       sp!, {r0}
  00e38	e92d5000	 stmdb       sp!, {r12, lr}
  00e3c	e24dd00c	 sub         sp, sp, #0xC
  00e40		 |$M45886|

; 148  :     register INTR_GPIO_CTXT* ctxt = GetGPIOCtxtByIrq(irq);

  00e40	e59d0014	 ldr         r0, [sp, #0x14]
  00e44	eb000000	 bl          GetGPIOCtxtByIrq
  00e48	e58d0004	 str         r0, [sp, #4]
  00e4c	e59d3004	 ldr         r3, [sp, #4]
  00e50	e58d3000	 str         r3, [sp]

; 149  :     if (ctxt)

  00e54	e59d3000	 ldr         r3, [sp]
  00e58	e3530000	 cmp         r3, #0
  00e5c	0a00001d	 beq         |$LN1@OALGPIODis|

; 150  :     {
; 151  :         OUTREG32(&ctxt->pRegs->CLEARIRQENABLE1, 1<<(irq - ctxt->irq_start));   // mask IRQ

  00e60	e59d2014	 ldr         r2, [sp, #0x14]
  00e64	e59d3000	 ldr         r3, [sp]
  00e68	e5933000	 ldr         r3, [r3]
  00e6c	e0422003	 sub         r2, r2, r3
  00e70	e3a03001	 mov         r3, #1
  00e74	e1a02213	 mov         r2, r3, lsl r2
  00e78	e59d3000	 ldr         r3, [sp]
  00e7c	e283300c	 add         r3, r3, #0xC
  00e80	e5933000	 ldr         r3, [r3]
  00e84	e2833060	 add         r3, r3, #0x60
  00e88	e5832000	 str         r2, [r3]

; 152  :         OUTREG32(&ctxt->pRegs->CLEARWAKEUPENA,  1<<(irq - ctxt->irq_start));        

  00e8c	e59d2014	 ldr         r2, [sp, #0x14]
  00e90	e59d3000	 ldr         r3, [sp]
  00e94	e5933000	 ldr         r3, [r3]
  00e98	e0422003	 sub         r2, r2, r3
  00e9c	e3a03001	 mov         r3, #1
  00ea0	e1a02213	 mov         r2, r3, lsl r2
  00ea4	e59d3000	 ldr         r3, [sp]
  00ea8	e283300c	 add         r3, r3, #0xC
  00eac	e5933000	 ldr         r3, [r3]
  00eb0	e2833080	 add         r3, r3, #0x80
  00eb4	e5832000	 str         r2, [r3]

; 153  :         OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), FALSE);

  00eb8	e3a00000	 mov         r0, #0
  00ebc	eb000000	 bl          BSPGetGpioIrq
  00ec0	e58d0008	 str         r0, [sp, #8]
  00ec4	e3a01000	 mov         r1, #0
  00ec8	e59d2014	 ldr         r2, [sp, #0x14]
  00ecc	e59d3008	 ldr         r3, [sp, #8]
  00ed0	e0420003	 sub         r0, r2, r3
  00ed4	eb000000	 bl          OEMEnableIOPadWakeup
  00ed8		 |$LN1@OALGPIODis|

; 154  : 
; 155  : //        EnableDeviceClocks(ctxt->device, FALSE); // This function uses a reference counter.
; 156  :     }
; 157  : }

  00ed8	e28dd00c	 add         sp, sp, #0xC
  00edc	e89d6000	 ldmia       sp, {sp, lr}
  00ee0	e12fff1e	 bx          lr
  00ee4		 |$M45887|

			 ENDP  ; |OALGPIODisableIRQ|

	EXPORT	|??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALIntrDoneIrqs|
	IMPORT	|OALSWIntrDoneIrq|

  00040			 AREA	 |.pdata|, PDATA
|$T45898| DCD	|$LN21@OALIntrDon|
	DCD	0x40006f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "r", 0x0, "q", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00ee4			 AREA	 |.text|, CODE, ARM

  00ee4		 |OALIntrDoneIrqs| PROC

; 503  : {

  00ee4		 |$LN21@OALIntrDon|
  00ee4	e1a0c00d	 mov         r12, sp
  00ee8	e92d0003	 stmdb       sp!, {r0, r1}
  00eec	e92d5000	 stmdb       sp!, {r12, lr}
  00ef0	e24dd014	 sub         sp, sp, #0x14
  00ef4		 |$M45895|

; 504  :     BOOL rc = FALSE;

  00ef4	e3a03000	 mov         r3, #0
  00ef8	e58d3000	 str         r3, [sp]

; 505  :     UINT32 irq, i;
; 506  : 
; 507  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 508  :         L"+OALIntrDoneIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 509  :         ));

  00efc	e59f3190	 ldr         r3, [pc, #0x190]
  00f00	e5933440	 ldr         r3, [r3, #0x440]
  00f04	e3130901	 tst         r3, #1, 18
  00f08	0a00000a	 beq         |$LN15@OALIntrDon|
  00f0c	e59f3180	 ldr         r3, [pc, #0x180]
  00f10	e5933440	 ldr         r3, [r3, #0x440]
  00f14	e3130902	 tst         r3, #2, 18
  00f18	0a000006	 beq         |$LN15@OALIntrDon|
  00f1c	e59d2020	 ldr         r2, [sp, #0x20]
  00f20	e59d101c	 ldr         r1, [sp, #0x1C]
  00f24	e59f0170	 ldr         r0, [pc, #0x170]
  00f28	eb000000	 bl          NKDbgPrintfW
  00f2c	e3a03001	 mov         r3, #1
  00f30	e58d300c	 str         r3, [sp, #0xC]
  00f34	ea000001	 b           |$LN16@OALIntrDon|
  00f38		 |$LN15@OALIntrDon|
  00f38	e3a03000	 mov         r3, #0
  00f3c	e58d300c	 str         r3, [sp, #0xC]
  00f40		 |$LN16@OALIntrDon|

; 510  : 
; 511  :     for (i = 0; i < count; i++)

  00f40	e3a03000	 mov         r3, #0
  00f44	e58d3004	 str         r3, [sp, #4]
  00f48	ea000002	 b           |$LN12@OALIntrDon|
  00f4c		 |$LN11@OALIntrDon|
  00f4c	e59d3004	 ldr         r3, [sp, #4]
  00f50	e2833001	 add         r3, r3, #1
  00f54	e58d3004	 str         r3, [sp, #4]
  00f58		 |$LN12@OALIntrDon|
  00f58	e59d2004	 ldr         r2, [sp, #4]
  00f5c	e59d301c	 ldr         r3, [sp, #0x1C]
  00f60	e1520003	 cmp         r2, r3
  00f64	2a000037	 bcs         |$LN10@OALIntrDon|

; 512  :     {
; 513  :         irq = pIrqs[i];

  00f68	e59d1004	 ldr         r1, [sp, #4]
  00f6c	e3a03004	 mov         r3, #4
  00f70	e0020391	 mul         r2, r1, r3
  00f74	e59d3020	 ldr         r3, [sp, #0x20]
  00f78	e0833002	 add         r3, r3, r2
  00f7c	e5933000	 ldr         r3, [r3]
  00f80	e58d3008	 str         r3, [sp, #8]

; 514  : 
; 515  :         if (irq != OAL_INTR_IRQ_UNDEFINED)

  00f84	e59d3008	 ldr         r3, [sp, #8]
  00f88	e3730001	 cmn         r3, #1
  00f8c	0a00002c	 beq         |$LN9@OALIntrDon|

; 516  :         {  
; 517  :             if (irq < 32)

  00f90	e59d3008	 ldr         r3, [sp, #8]
  00f94	e3530020	 cmp         r3, #0x20
  00f98	2a000007	 bcs         |$LN8@OALIntrDon|

; 518  :             {
; 519  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR0, 1 << irq);

  00f9c	e59d2008	 ldr         r2, [sp, #8]
  00fa0	e3a03001	 mov         r3, #1
  00fa4	e1a02213	 mov         r2, r3, lsl r2
  00fa8	e59f30e8	 ldr         r3, [pc, #0xE8]
  00fac	e5933000	 ldr         r3, [r3]
  00fb0	e2833088	 add         r3, r3, #0x88
  00fb4	e5832000	 str         r2, [r3]
  00fb8	ea00001f	 b           |$LN7@OALIntrDon|
  00fbc		 |$LN8@OALIntrDon|

; 520  :             }
; 521  :             else if (irq < 64)

  00fbc	e59d3008	 ldr         r3, [sp, #8]
  00fc0	e3530040	 cmp         r3, #0x40
  00fc4	2a000008	 bcs         |$LN6@OALIntrDon|

; 522  :             {
; 523  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR1, 1 << (irq - 32));

  00fc8	e59d3008	 ldr         r3, [sp, #8]
  00fcc	e2432020	 sub         r2, r3, #0x20
  00fd0	e3a03001	 mov         r3, #1
  00fd4	e1a02213	 mov         r2, r3, lsl r2
  00fd8	e59f30b8	 ldr         r3, [pc, #0xB8]
  00fdc	e5933000	 ldr         r3, [r3]
  00fe0	e28330a8	 add         r3, r3, #0xA8
  00fe4	e5832000	 str         r2, [r3]
  00fe8	ea000013	 b           |$LN5@OALIntrDon|
  00fec		 |$LN6@OALIntrDon|

; 524  :             }
; 525  :             else if (irq < 96)

  00fec	e59d3008	 ldr         r3, [sp, #8]
  00ff0	e3530060	 cmp         r3, #0x60
  00ff4	2a000008	 bcs         |$LN4@OALIntrDon|

; 526  :             {
; 527  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR2, 1 << (irq - 64));

  00ff8	e59d3008	 ldr         r3, [sp, #8]
  00ffc	e2432040	 sub         r2, r3, #0x40
  01000	e3a03001	 mov         r3, #1
  01004	e1a02213	 mov         r2, r3, lsl r2
  01008	e59f3088	 ldr         r3, [pc, #0x88]
  0100c	e5933000	 ldr         r3, [r3]
  01010	e28330c8	 add         r3, r3, #0xC8
  01014	e5832000	 str         r2, [r3]
  01018	ea000007	 b           |$LN3@OALIntrDon|
  0101c		 |$LN4@OALIntrDon|

; 528  :             }
; 529  :             else if (irq < IRQ_SW_RESERVED_MAX )

  0101c	e59d3008	 ldr         r3, [sp, #8]
  01020	e353006e	 cmp         r3, #0x6E
  01024	2a000002	 bcs         |$LN2@OALIntrDon|

; 530  :             {
; 531  :                 // call software irq handler
; 532  :                 OALSWIntrDoneIrq(irq);

  01028	e59d0008	 ldr         r0, [sp, #8]
  0102c	eb000000	 bl          OALSWIntrDoneIrq

; 533  :             }
; 534  :             else 

  01030	ea000001	 b           |$LN1@OALIntrDon|
  01034		 |$LN2@OALIntrDon|

; 535  :             {
; 536  :                 OALGPIODoneIRQ(irq);

  01034	e59d0008	 ldr         r0, [sp, #8]
  01038	eb000000	 bl          OALGPIODoneIRQ
  0103c		 |$LN1@OALIntrDon|
  0103c		 |$LN3@OALIntrDon|
  0103c		 |$LN5@OALIntrDon|
  0103c		 |$LN7@OALIntrDon|

; 537  :             }
; 538  :             rc = TRUE;

  0103c	e3a03001	 mov         r3, #1
  01040	e58d3000	 str         r3, [sp]
  01044		 |$LN9@OALIntrDon|

; 539  :         }
; 540  :     }

  01044	eaffffc0	 b           |$LN11@OALIntrDon|
  01048		 |$LN10@OALIntrDon|

; 541  : 
; 542  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrDoneIrqs\r\n"));

  01048	e59f3044	 ldr         r3, [pc, #0x44]
  0104c	e5933440	 ldr         r3, [r3, #0x440]
  01050	e3130901	 tst         r3, #1, 18
  01054	0a000008	 beq         |$LN17@OALIntrDon|
  01058	e59f3034	 ldr         r3, [pc, #0x34]
  0105c	e5933440	 ldr         r3, [r3, #0x440]
  01060	e3130902	 tst         r3, #2, 18
  01064	0a000004	 beq         |$LN17@OALIntrDon|
  01068	e59f0020	 ldr         r0, [pc, #0x20]
  0106c	eb000000	 bl          NKDbgPrintfW
  01070	e3a03001	 mov         r3, #1
  01074	e58d3010	 str         r3, [sp, #0x10]
  01078	ea000001	 b           |$LN18@OALIntrDon|
  0107c		 |$LN17@OALIntrDon|
  0107c	e3a03000	 mov         r3, #0
  01080	e58d3010	 str         r3, [sp, #0x10]
  01084		 |$LN18@OALIntrDon|

; 543  : }

  01084	e28dd014	 add         sp, sp, #0x14
  01088	e89d6000	 ldmia       sp, {sp, lr}
  0108c	e12fff1e	 bx          lr
  01090		 |$LN22@OALIntrDon|
  01090		 |$LN23@OALIntrDon|
  01090	00000000	 DCD         |??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  01094		 |$LN24@OALIntrDon|
  01094	00000000	 DCD         |dpCurSettings|
  01098		 |$LN25@OALIntrDon|
  01098	00000000	 DCD         |s_intr|
  0109c		 |$LN26@OALIntrDon|
  0109c	00000000	 DCD         |??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  010a0		 |$M45896|

			 ENDP  ; |OALIntrDoneIrqs|


  00048			 AREA	 |.pdata|, PDATA
|$T45908| DCD	|$LN6@OALGPIODon|
	DCD	0x40002d04
; Function compile flags: /Odtp

  010a0			 AREA	 |.text|, CODE, ARM

  010a0		 |OALGPIODoneIRQ| PROC

; 160  : {

  010a0		 |$LN6@OALGPIODon|
  010a0	e1a0c00d	 mov         r12, sp
  010a4	e92d0001	 stmdb       sp!, {r0}
  010a8	e92d5000	 stmdb       sp!, {r12, lr}
  010ac	e24dd00c	 sub         sp, sp, #0xC
  010b0		 |$M45905|

; 161  :     register INTR_GPIO_CTXT* ctxt = GetGPIOCtxtByIrq(irq);

  010b0	e59d0014	 ldr         r0, [sp, #0x14]
  010b4	eb000000	 bl          GetGPIOCtxtByIrq
  010b8	e58d0004	 str         r0, [sp, #4]
  010bc	e59d3004	 ldr         r3, [sp, #4]
  010c0	e58d3000	 str         r3, [sp]

; 162  :     if (ctxt)

  010c4	e59d3000	 ldr         r3, [sp]
  010c8	e3530000	 cmp         r3, #0
  010cc	0a00001d	 beq         |$LN1@OALGPIODon|

; 163  :     {
; 164  :         OUTREG32(&ctxt->pRegs->SETIRQENABLE1, 1<<(irq - ctxt->irq_start));   // unmask IRQ

  010d0	e59d2014	 ldr         r2, [sp, #0x14]
  010d4	e59d3000	 ldr         r3, [sp]
  010d8	e5933000	 ldr         r3, [r3]
  010dc	e0422003	 sub         r2, r2, r3
  010e0	e3a03001	 mov         r3, #1
  010e4	e1a02213	 mov         r2, r3, lsl r2
  010e8	e59d3000	 ldr         r3, [sp]
  010ec	e283300c	 add         r3, r3, #0xC
  010f0	e5933000	 ldr         r3, [r3]
  010f4	e2833064	 add         r3, r3, #0x64
  010f8	e5832000	 str         r2, [r3]

; 165  :         OUTREG32(&ctxt->pRegs->SETWAKEUPENA,  1<<(irq - ctxt->irq_start));

  010fc	e59d2014	 ldr         r2, [sp, #0x14]
  01100	e59d3000	 ldr         r3, [sp]
  01104	e5933000	 ldr         r3, [r3]
  01108	e0422003	 sub         r2, r2, r3
  0110c	e3a03001	 mov         r3, #1
  01110	e1a02213	 mov         r2, r3, lsl r2
  01114	e59d3000	 ldr         r3, [sp]
  01118	e283300c	 add         r3, r3, #0xC
  0111c	e5933000	 ldr         r3, [r3]
  01120	e2833084	 add         r3, r3, #0x84
  01124	e5832000	 str         r2, [r3]

; 166  :         OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), TRUE);

  01128	e3a00000	 mov         r0, #0
  0112c	eb000000	 bl          BSPGetGpioIrq
  01130	e58d0008	 str         r0, [sp, #8]
  01134	e3a01001	 mov         r1, #1
  01138	e59d2014	 ldr         r2, [sp, #0x14]
  0113c	e59d3008	 ldr         r3, [sp, #8]
  01140	e0420003	 sub         r0, r2, r3
  01144	eb000000	 bl          OEMEnableIOPadWakeup
  01148		 |$LN1@OALGPIODon|

; 167  :     }
; 168  : }

  01148	e28dd00c	 add         sp, sp, #0xC
  0114c	e89d6000	 ldmia       sp, {sp, lr}
  01150	e12fff1e	 bx          lr
  01154		 |$M45906|

			 ENDP  ; |OALGPIODoneIRQ|

	EXPORT	|OALIntrIsIrqPending|

  00050			 AREA	 |.pdata|, PDATA
|$T45916| DCD	|$LN15@OALIntrIsI|
	DCD	0x40004904
; Function compile flags: /Odtp

  01154			 AREA	 |.text|, CODE, ARM

  01154		 |OALIntrIsIrqPending| PROC

; 556  : {

  01154		 |$LN15@OALIntrIsI|
  01154	e1a0c00d	 mov         r12, sp
  01158	e92d0001	 stmdb       sp!, {r0}
  0115c	e92d5000	 stmdb       sp!, {r12, lr}
  01160	e24dd010	 sub         sp, sp, #0x10
  01164		 |$M45913|

; 557  :     BOOL rc = FALSE;

  01164	e3a03000	 mov         r3, #0
  01168	e58d3000	 str         r3, [sp]

; 558  : 
; 559  :     if (irq < 32)

  0116c	e59d3018	 ldr         r3, [sp, #0x18]
  01170	e3530020	 cmp         r3, #0x20
  01174	2a000009	 bcs         |$LN8@OALIntrIsI|

; 560  :     {
; 561  :         rc = INREG32(&s_intr.pICLRegs->INTC_ITR0) & (1 << irq);

  01178	e59f30f4	 ldr         r3, [pc, #0xF4]
  0117c	e5933000	 ldr         r3, [r3]
  01180	e2831080	 add         r1, r3, #0x80
  01184	e59d2018	 ldr         r2, [sp, #0x18]
  01188	e3a03001	 mov         r3, #1
  0118c	e1a02213	 mov         r2, r3, lsl r2
  01190	e5913000	 ldr         r3, [r1]
  01194	e0033002	 and         r3, r3, r2
  01198	e58d3000	 str         r3, [sp]
  0119c	ea000026	 b           |$LN7@OALIntrIsI|
  011a0		 |$LN8@OALIntrIsI|

; 562  :     }
; 563  :     else if (irq < 64)

  011a0	e59d3018	 ldr         r3, [sp, #0x18]
  011a4	e3530040	 cmp         r3, #0x40
  011a8	2a00000a	 bcs         |$LN6@OALIntrIsI|

; 564  :     {
; 565  :         rc = INREG32(&s_intr.pICLRegs->INTC_ITR1) & (1 << (irq - 32));

  011ac	e59f30c0	 ldr         r3, [pc, #0xC0]
  011b0	e5933000	 ldr         r3, [r3]
  011b4	e28310a0	 add         r1, r3, #0xA0
  011b8	e59d3018	 ldr         r3, [sp, #0x18]
  011bc	e2432020	 sub         r2, r3, #0x20
  011c0	e3a03001	 mov         r3, #1
  011c4	e1a02213	 mov         r2, r3, lsl r2
  011c8	e5913000	 ldr         r3, [r1]
  011cc	e0033002	 and         r3, r3, r2
  011d0	e58d3000	 str         r3, [sp]
  011d4	ea000018	 b           |$LN5@OALIntrIsI|
  011d8		 |$LN6@OALIntrIsI|

; 566  :     }
; 567  :     else if (irq < 96)

  011d8	e59d3018	 ldr         r3, [sp, #0x18]
  011dc	e3530060	 cmp         r3, #0x60
  011e0	2a00000a	 bcs         |$LN4@OALIntrIsI|

; 568  :     {
; 569  :         rc = INREG32(&s_intr.pICLRegs->INTC_ITR2) & (1 << (irq - 64));

  011e4	e59f3088	 ldr         r3, [pc, #0x88]
  011e8	e5933000	 ldr         r3, [r3]
  011ec	e28310c0	 add         r1, r3, #0xC0
  011f0	e59d3018	 ldr         r3, [sp, #0x18]
  011f4	e2432040	 sub         r2, r3, #0x40
  011f8	e3a03001	 mov         r3, #1
  011fc	e1a02213	 mov         r2, r3, lsl r2
  01200	e5913000	 ldr         r3, [r1]
  01204	e0033002	 and         r3, r3, r2
  01208	e58d3000	 str         r3, [sp]
  0120c	ea00000a	 b           |$LN3@OALIntrIsI|
  01210		 |$LN4@OALIntrIsI|

; 570  :     }
; 571  :     else if (irq < IRQ_SW_RESERVED_MAX )

  01210	e59d3018	 ldr         r3, [sp, #0x18]
  01214	e353006e	 cmp         r3, #0x6E
  01218	2a000002	 bcs         |$LN2@OALIntrIsI|

; 572  :     {
; 573  :         //  SW triggered interrupts only - none will be pending
; 574  :         rc = FALSE;

  0121c	e3a03000	 mov         r3, #0
  01220	e58d3000	 str         r3, [sp]

; 575  :     }
; 576  :     else 

  01224	ea000004	 b           |$LN1@OALIntrIsI|
  01228		 |$LN2@OALIntrIsI|

; 577  :     {
; 578  :         rc = OALGPIOIsIrqPending(irq);

  01228	e59d0018	 ldr         r0, [sp, #0x18]
  0122c	eb000000	 bl          OALGPIOIsIrqPending
  01230	e58d0008	 str         r0, [sp, #8]
  01234	e59d3008	 ldr         r3, [sp, #8]
  01238	e58d3000	 str         r3, [sp]
  0123c		 |$LN1@OALIntrIsI|
  0123c		 |$LN3@OALIntrIsI|
  0123c		 |$LN5@OALIntrIsI|
  0123c		 |$LN7@OALIntrIsI|

; 579  :     }
; 580  : 
; 581  :     return (rc != 0);

  0123c	e59d3000	 ldr         r3, [sp]
  01240	e3530000	 cmp         r3, #0
  01244	0a000002	 beq         |$LN11@OALIntrIsI|
  01248	e3a03001	 mov         r3, #1
  0124c	e58d300c	 str         r3, [sp, #0xC]
  01250	ea000001	 b           |$LN12@OALIntrIsI|
  01254		 |$LN11@OALIntrIsI|
  01254	e3a03000	 mov         r3, #0
  01258	e58d300c	 str         r3, [sp, #0xC]
  0125c		 |$LN12@OALIntrIsI|
  0125c	e59d300c	 ldr         r3, [sp, #0xC]
  01260	e58d3004	 str         r3, [sp, #4]

; 582  : }

  01264	e59d0004	 ldr         r0, [sp, #4]
  01268	e28dd010	 add         sp, sp, #0x10
  0126c	e89d6000	 ldmia       sp, {sp, lr}
  01270	e12fff1e	 bx          lr
  01274		 |$LN16@OALIntrIsI|
  01274		 |$LN17@OALIntrIsI|
  01274	00000000	 DCD         |s_intr|
  01278		 |$M45914|

			 ENDP  ; |OALIntrIsIrqPending|


  00058			 AREA	 |.pdata|, PDATA
|$T45924| DCD	|$LN6@OALGPIOIsI|
	DCD	0x40002104
; Function compile flags: /Odtp

  01278			 AREA	 |.text|, CODE, ARM

  01278		 |OALGPIOIsIrqPending| PROC

; 171  : {

  01278		 |$LN6@OALGPIOIsI|
  01278	e1a0c00d	 mov         r12, sp
  0127c	e92d0001	 stmdb       sp!, {r0}
  01280	e92d5000	 stmdb       sp!, {r12, lr}
  01284	e24dd010	 sub         sp, sp, #0x10
  01288		 |$M45921|

; 172  :     BOOL rc = FALSE;

  01288	e3a03000	 mov         r3, #0
  0128c	e58d3000	 str         r3, [sp]

; 173  :     register INTR_GPIO_CTXT* ctxt = GetGPIOCtxtByIrq(irq);

  01290	e59d0018	 ldr         r0, [sp, #0x18]
  01294	eb000000	 bl          GetGPIOCtxtByIrq
  01298	e58d000c	 str         r0, [sp, #0xC]
  0129c	e59d300c	 ldr         r3, [sp, #0xC]
  012a0	e58d3004	 str         r3, [sp, #4]

; 174  :     if (ctxt)

  012a4	e59d3004	 ldr         r3, [sp, #4]
  012a8	e3530000	 cmp         r3, #0
  012ac	0a00000c	 beq         |$LN1@OALGPIOIsI|

; 175  :     {
; 176  :         rc = INREG32(&ctxt->pRegs->IRQSTATUS1) & (1 << (irq - ctxt->irq_start));           

  012b0	e59d3004	 ldr         r3, [sp, #4]
  012b4	e283300c	 add         r3, r3, #0xC
  012b8	e5933000	 ldr         r3, [r3]
  012bc	e2831018	 add         r1, r3, #0x18
  012c0	e59d2018	 ldr         r2, [sp, #0x18]
  012c4	e59d3004	 ldr         r3, [sp, #4]
  012c8	e5933000	 ldr         r3, [r3]
  012cc	e0422003	 sub         r2, r2, r3
  012d0	e3a03001	 mov         r3, #1
  012d4	e1a02213	 mov         r2, r3, lsl r2
  012d8	e5913000	 ldr         r3, [r1]
  012dc	e0033002	 and         r3, r3, r2
  012e0	e58d3000	 str         r3, [sp]
  012e4		 |$LN1@OALGPIOIsI|

; 177  :     }
; 178  :     return rc;

  012e4	e59d3000	 ldr         r3, [sp]
  012e8	e58d3008	 str         r3, [sp, #8]

; 179  : }

  012ec	e59d0008	 ldr         r0, [sp, #8]
  012f0	e28dd010	 add         sp, sp, #0x10
  012f4	e89d6000	 ldmia       sp, {sp, lr}
  012f8	e12fff1e	 bx          lr
  012fc		 |$M45922|

			 ENDP  ; |OALGPIOIsIrqPending|

	EXPORT	|??_C@_1DM@NLILHIEP@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AAI?$AAr?$AAq?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OEMInterruptHandler|
	IMPORT	|OALSmartReflex2Intr|
	IMPORT	|OALSmartReflex1Intr|
	IMPORT	|OALIntrTranslateIrq|
	IMPORT	|OALPrcmIntrHandler|
	IMPORT	|OALTimerIntrHandler|
	IMPORT	|OALProfileTimerHit|
	IMPORT	|g_oalProfilerEnabled|
	IMPORT	|g_oalPerfTimerIrq|
	IMPORT	|g_oalILT|

  00060			 AREA	 |.pdata|, PDATA
|$T45932| DCD	|$LN27@OEMInterru|
	DCD	0x4000c904

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@NLILHIEP@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AAI?$AAr?$AAq?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, "(", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  012fc			 AREA	 |.text|, CODE, ARM

  012fc		 |OEMInterruptHandler| PROC

; 594  : {

  012fc		 |$LN27@OEMInterru|
  012fc	e1a0c00d	 mov         r12, sp
  01300	e92d0001	 stmdb       sp!, {r0}
  01304	e92d5000	 stmdb       sp!, {r12, lr}
  01308	e24dd02c	 sub         sp, sp, #0x2C
  0130c		 |$M45929|

; 595  :     UINT32 irq = (UINT32) OAL_INTR_IRQ_UNDEFINED;

  0130c	e3e03000	 mvn         r3, #0
  01310	e58d3004	 str         r3, [sp, #4]

; 596  :     UINT32 sysIntr = SYSINTR_NOP;

  01314	e3a03000	 mov         r3, #0
  01318	e58d3000	 str         r3, [sp]

; 597  : 
; 598  :     // Get pending interrupt
; 599  :     irq = INREG32(&s_intr.pICLRegs->INTC_SIR_IRQ);

  0131c	e59f32f0	 ldr         r3, [pc, #0x2F0]
  01320	e5933000	 ldr         r3, [r3]
  01324	e2833040	 add         r3, r3, #0x40
  01328	e5933000	 ldr         r3, [r3]
  0132c	e58d3004	 str         r3, [sp, #4]

; 600  : 
; 601  : #ifdef OAL_ILTIMING
; 602  :         if (g_oalILT.active) 

  01330	e59f32cc	 ldr         r3, [pc, #0x2CC]
  01334	e5933000	 ldr         r3, [r3]
  01338	e3530000	 cmp         r3, #0
  0133c	0a000006	 beq         |$LN20@OEMInterru|

; 603  :             g_oalILT.interrupts ++;        

  01340	e59f32bc	 ldr         r3, [pc, #0x2BC]
  01344	e1d330b4	 ldrh        r3, [r3, #4]
  01348	e2833001	 add         r3, r3, #1
  0134c	e1a02803	 mov         r2, r3, lsl #16
  01350	e1a02822	 mov         r2, r2, lsr #16
  01354	e59f32a8	 ldr         r3, [pc, #0x2A8]
  01358	e1c320b4	 strh        r2, [r3, #4]
  0135c		 |$LN20@OEMInterru|

; 604  : #endif
; 605  : 
; 606  :     OALMSG(OAL_INTR, (L"OEMInterruptHandler(Irq %d)\r\n", irq));

  0135c	e59f32b8	 ldr         r3, [pc, #0x2B8]
  01360	e5933440	 ldr         r3, [r3, #0x440]
  01364	e3130901	 tst         r3, #1, 18
  01368	0a000005	 beq         |$LN23@OEMInterru|
  0136c	e59d1004	 ldr         r1, [sp, #4]
  01370	e59f02a0	 ldr         r0, [pc, #0x2A0]
  01374	eb000000	 bl          NKDbgPrintfW
  01378	e3a03001	 mov         r3, #1
  0137c	e58d300c	 str         r3, [sp, #0xC]
  01380	ea000001	 b           |$LN24@OEMInterru|
  01384		 |$LN23@OEMInterru|
  01384	e3a03000	 mov         r3, #0
  01388	e58d300c	 str         r3, [sp, #0xC]
  0138c		 |$LN24@OEMInterru|

; 607  : 
; 608  :     irq = OALGPIOIntrHandler(irq); //Check if this is a GPIO irq. In so, then translate the irq number

  0138c	e59d0004	 ldr         r0, [sp, #4]
  01390	eb000000	 bl          OALGPIOIntrHandler
  01394	e58d0010	 str         r0, [sp, #0x10]
  01398	e59d3010	 ldr         r3, [sp, #0x10]
  0139c	e58d3004	 str         r3, [sp, #4]

; 609  :     if (irq < 32) 

  013a0	e59d3004	 ldr         r3, [sp, #4]
  013a4	e3530020	 cmp         r3, #0x20
  013a8	2a00000c	 bcs         |$LN19@OEMInterru|

; 610  :     {
; 611  :         SETPORT32(&s_intr.pICLRegs->INTC_MIR0, 1 << irq);

  013ac	e59f3260	 ldr         r3, [pc, #0x260]
  013b0	e5933000	 ldr         r3, [r3]
  013b4	e2831084	 add         r1, r3, #0x84
  013b8	e59d2004	 ldr         r2, [sp, #4]
  013bc	e3a03001	 mov         r3, #1
  013c0	e1a02213	 mov         r2, r3, lsl r2
  013c4	e5913000	 ldr         r3, [r1]
  013c8	e1832002	 orr         r2, r3, r2
  013cc	e59f3240	 ldr         r3, [pc, #0x240]
  013d0	e5933000	 ldr         r3, [r3]
  013d4	e2833084	 add         r3, r3, #0x84
  013d8	e5832000	 str         r2, [r3]
  013dc	ea000020	 b           |$LN18@OEMInterru|
  013e0		 |$LN19@OEMInterru|

; 612  :     } 
; 613  :     else if (irq < 64) 

  013e0	e59d3004	 ldr         r3, [sp, #4]
  013e4	e3530040	 cmp         r3, #0x40
  013e8	2a00000d	 bcs         |$LN17@OEMInterru|

; 614  :     {
; 615  :         SETPORT32(&s_intr.pICLRegs->INTC_MIR1, 1 << (irq - 32));

  013ec	e59f3220	 ldr         r3, [pc, #0x220]
  013f0	e5933000	 ldr         r3, [r3]
  013f4	e28310a4	 add         r1, r3, #0xA4
  013f8	e59d3004	 ldr         r3, [sp, #4]
  013fc	e2432020	 sub         r2, r3, #0x20
  01400	e3a03001	 mov         r3, #1
  01404	e1a02213	 mov         r2, r3, lsl r2
  01408	e5913000	 ldr         r3, [r1]
  0140c	e1832002	 orr         r2, r3, r2
  01410	e59f31fc	 ldr         r3, [pc, #0x1FC]
  01414	e5933000	 ldr         r3, [r3]
  01418	e28330a4	 add         r3, r3, #0xA4
  0141c	e5832000	 str         r2, [r3]
  01420	ea00000f	 b           |$LN16@OEMInterru|
  01424		 |$LN17@OEMInterru|

; 616  :     }
; 617  :     else if (irq < 96) 

  01424	e59d3004	 ldr         r3, [sp, #4]
  01428	e3530060	 cmp         r3, #0x60
  0142c	2a00000c	 bcs         |$LN15@OEMInterru|

; 618  :     {
; 619  :         SETPORT32(&s_intr.pICLRegs->INTC_MIR2, 1 << (irq - 64));

  01430	e59f31dc	 ldr         r3, [pc, #0x1DC]
  01434	e5933000	 ldr         r3, [r3]
  01438	e28310c4	 add         r1, r3, #0xC4
  0143c	e59d3004	 ldr         r3, [sp, #4]
  01440	e2432040	 sub         r2, r3, #0x40
  01444	e3a03001	 mov         r3, #1
  01448	e1a02213	 mov         r2, r3, lsl r2
  0144c	e5913000	 ldr         r3, [r1]
  01450	e1832002	 orr         r2, r3, r2
  01454	e59f31b8	 ldr         r3, [pc, #0x1B8]
  01458	e5933000	 ldr         r3, [r3]
  0145c	e28330c4	 add         r3, r3, #0xC4
  01460	e5832000	 str         r2, [r3]
  01464		 |$LN15@OEMInterru|
  01464		 |$LN16@OEMInterru|
  01464		 |$LN18@OEMInterru|

; 620  :     }
; 621  :     else
; 622  :     {
; 623  :         //...
; 624  :     }
; 625  : 
; 626  :     // Acknowledge interrupt 
; 627  :     OUTREG32(&s_intr.pICLRegs->INTC_CONTROL, IC_CNTL_NEW_IRQ);

  01464	e59f31a8	 ldr         r3, [pc, #0x1A8]
  01468	e5933000	 ldr         r3, [r3]
  0146c	e2832048	 add         r2, r3, #0x48
  01470	e3a03001	 mov         r3, #1
  01474	e5823000	 str         r3, [r2]

; 628  : 
; 629  :     // Check if this is profiler IRQ
; 630  :     if (irq == g_oalPerfTimerIrq && g_oalProfilerEnabled == TRUE)

  01478	e59d2004	 ldr         r2, [sp, #4]
  0147c	e59f318c	 ldr         r3, [pc, #0x18C]
  01480	e5933000	 ldr         r3, [r3]
  01484	e1520003	 cmp         r2, r3
  01488	1a000005	 bne         |$LN13@OEMInterru|
  0148c	e59f3178	 ldr         r3, [pc, #0x178]
  01490	e5933000	 ldr         r3, [r3]
  01494	e3530001	 cmp         r3, #1
  01498	1a000001	 bne         |$LN13@OEMInterru|

; 631  :     {
; 632  :         OALProfileTimerHit(ra);

  0149c	e59d0034	 ldr         r0, [sp, #0x34]
  014a0	eb000000	 bl          OALProfileTimerHit
  014a4		 |$LN13@OEMInterru|

; 633  :     }
; 634  : 
; 635  :     // Check if this is timer IRQ
; 636  :     if (irq == g_oalTimerIrq)

  014a4	e59d2004	 ldr         r2, [sp, #4]
  014a8	e59f3158	 ldr         r3, [pc, #0x158]
  014ac	e5933000	 ldr         r3, [r3]
  014b0	e1520003	 cmp         r2, r3
  014b4	1a000012	 bne         |$LN12@OEMInterru|

; 637  :     {        
; 638  : 
; 639  :         if (g_oalILT.active)

  014b8	e59f3144	 ldr         r3, [pc, #0x144]
  014bc	e5933000	 ldr         r3, [r3]
  014c0	e3530000	 cmp         r3, #0
  014c4	0a000006	 beq         |$LN11@OEMInterru|

; 640  :         {
; 641  :             g_oalILT.interrupts--;

  014c8	e59f3134	 ldr         r3, [pc, #0x134]
  014cc	e1d330b4	 ldrh        r3, [r3, #4]
  014d0	e2433001	 sub         r3, r3, #1
  014d4	e1a02803	 mov         r2, r3, lsl #16
  014d8	e1a02822	 mov         r2, r2, lsr #16
  014dc	e59f3120	 ldr         r3, [pc, #0x120]
  014e0	e1c320b4	 strh        r2, [r3, #4]
  014e4		 |$LN11@OEMInterru|

; 642  :         }
; 643  :         // Call timer interrupt handler
; 644  :         sysIntr = OALTimerIntrHandler();

  014e4	eb000000	 bl          OALTimerIntrHandler
  014e8	e58d0014	 str         r0, [sp, #0x14]
  014ec	e59d3014	 ldr         r3, [sp, #0x14]
  014f0	e58d3000	 str         r3, [sp]

; 645  : 
; 646  :         // re-enable interrupts
; 647  :         OALIntrDoneIrqs(1, &irq);

  014f4	e28d1004	 add         r1, sp, #4
  014f8	e3a00001	 mov         r0, #1
  014fc	eb000000	 bl          OALIntrDoneIrqs
  01500	ea000030	 b           |$LN10@OEMInterru|
  01504		 |$LN12@OEMInterru|

; 648  :     }
; 649  :     else if (irq == g_oalPrcmIrq)

  01504	e59d2004	 ldr         r2, [sp, #4]
  01508	e59f30f0	 ldr         r3, [pc, #0xF0]
  0150c	e5933000	 ldr         r3, [r3]
  01510	e1520003	 cmp         r2, r3
  01514	1a00000f	 bne         |$LN9@OEMInterru|

; 650  :         {
; 651  :         // call prcm interrupt handler
; 652  :         sysIntr = OALPrcmIntrHandler();

  01518	eb000000	 bl          OALPrcmIntrHandler
  0151c	e58d0018	 str         r0, [sp, #0x18]
  01520	e59d3018	 ldr         r3, [sp, #0x18]
  01524	e58d3000	 str         r3, [sp]

; 653  : 
; 654  :         if (sysIntr != SYSINTR_NOP)

  01528	e59d3000	 ldr         r3, [sp]
  0152c	e3530000	 cmp         r3, #0
  01530	0a000004	 beq         |$LN8@OEMInterru|

; 655  :             {
; 656  :             // sysIntr is a the GPIO irq number for which IO PAD
; 657  :             // event occured, get the sysIntr for the irq
; 658  :             sysIntr = OALIntrTranslateIrq(sysIntr);

  01534	e59d0000	 ldr         r0, [sp]
  01538	eb000000	 bl          OALIntrTranslateIrq
  0153c	e58d001c	 str         r0, [sp, #0x1C]
  01540	e59d301c	 ldr         r3, [sp, #0x1C]
  01544	e58d3000	 str         r3, [sp]
  01548		 |$LN8@OEMInterru|

; 659  :             }
; 660  : 
; 661  :         OALIntrDoneIrqs(1, &irq);

  01548	e28d1004	 add         r1, sp, #4
  0154c	e3a00001	 mov         r0, #1
  01550	eb000000	 bl          OALIntrDoneIrqs
  01554	ea00001b	 b           |$LN7@OEMInterru|
  01558		 |$LN9@OEMInterru|

; 662  :      }
; 663  :     else if (irq == g_oalSmartReflex1)

  01558	e59d2004	 ldr         r2, [sp, #4]
  0155c	e59f3098	 ldr         r3, [pc, #0x98]
  01560	e5933000	 ldr         r3, [r3]
  01564	e1520003	 cmp         r2, r3
  01568	1a000004	 bne         |$LN6@OEMInterru|

; 664  :     {
; 665  :         // call prcm interrupt handler
; 666  :         sysIntr = OALSmartReflex1Intr();

  0156c	eb000000	 bl          OALSmartReflex1Intr
  01570	e58d0020	 str         r0, [sp, #0x20]
  01574	e59d3020	 ldr         r3, [sp, #0x20]
  01578	e58d3000	 str         r3, [sp]
  0157c	ea000011	 b           |$LN5@OEMInterru|
  01580		 |$LN6@OEMInterru|

; 667  :     }
; 668  :     else if (irq == g_oalSmartReflex2)

  01580	e59d2004	 ldr         r2, [sp, #4]
  01584	e59f306c	 ldr         r3, [pc, #0x6C]
  01588	e5933000	 ldr         r3, [r3]
  0158c	e1520003	 cmp         r2, r3
  01590	1a000004	 bne         |$LN4@OEMInterru|

; 669  :     {
; 670  :         // call prcm interrupt handler
; 671  :         sysIntr = OALSmartReflex2Intr();

  01594	eb000000	 bl          OALSmartReflex2Intr
  01598	e58d0024	 str         r0, [sp, #0x24]
  0159c	e59d3024	 ldr         r3, [sp, #0x24]
  015a0	e58d3000	 str         r3, [sp]
  015a4	ea000007	 b           |$LN3@OEMInterru|
  015a8		 |$LN4@OEMInterru|

; 672  :     }
; 673  :     else if (irq != OAL_INTR_IRQ_UNDEFINED)

  015a8	e59d3004	 ldr         r3, [sp, #4]
  015ac	e3730001	 cmn         r3, #1
  015b0	0a000004	 beq         |$LN2@OEMInterru|

; 674  :     {
; 675  :         // We don't assume IRQ sharing, use static mapping
; 676  : 		// If needed, implement BSP level interrupt management here
; 677  : 		sysIntr = OALIntrTranslateIrq(irq);

  015b4	e59d0004	 ldr         r0, [sp, #4]
  015b8	eb000000	 bl          OALIntrTranslateIrq
  015bc	e58d0028	 str         r0, [sp, #0x28]
  015c0	e59d3028	 ldr         r3, [sp, #0x28]
  015c4	e58d3000	 str         r3, [sp]
  015c8		 |$LN2@OEMInterru|
  015c8		 |$LN3@OEMInterru|
  015c8		 |$LN5@OEMInterru|
  015c8		 |$LN7@OEMInterru|
  015c8		 |$LN10@OEMInterru|

; 678  :     }
; 679  :     // re-enable interrupts
; 680  :     if (sysIntr == SYSINTR_NOP)

  015c8	e59d3000	 ldr         r3, [sp]
  015cc	e3530000	 cmp         r3, #0
  015d0	1a000002	 bne         |$LN1@OEMInterru|

; 681  :     {
; 682  :         OALIntrDoneIrqs(1, &irq);

  015d4	e28d1004	 add         r1, sp, #4
  015d8	e3a00001	 mov         r0, #1
  015dc	eb000000	 bl          OALIntrDoneIrqs
  015e0		 |$LN1@OEMInterru|

; 683  :     }
; 684  : 
; 685  :     return sysIntr;

  015e0	e59d3000	 ldr         r3, [sp]
  015e4	e58d3008	 str         r3, [sp, #8]

; 686  : }

  015e8	e59d0008	 ldr         r0, [sp, #8]
  015ec	e28dd02c	 add         sp, sp, #0x2C
  015f0	e89d6000	 ldmia       sp, {sp, lr}
  015f4	e12fff1e	 bx          lr
  015f8		 |$LN28@OEMInterru|
  015f8		 |$LN29@OEMInterru|
  015f8	00000000	 DCD         |g_oalSmartReflex2|
  015fc		 |$LN30@OEMInterru|
  015fc	00000000	 DCD         |g_oalSmartReflex1|
  01600		 |$LN31@OEMInterru|
  01600	00000000	 DCD         |g_oalPrcmIrq|
  01604		 |$LN32@OEMInterru|
  01604	00000000	 DCD         |g_oalILT|
  01608		 |$LN33@OEMInterru|
  01608	00000000	 DCD         |g_oalTimerIrq|
  0160c		 |$LN34@OEMInterru|
  0160c	00000000	 DCD         |g_oalProfilerEnabled|
  01610		 |$LN35@OEMInterru|
  01610	00000000	 DCD         |g_oalPerfTimerIrq|
  01614		 |$LN36@OEMInterru|
  01614	00000000	 DCD         |s_intr|
  01618		 |$LN37@OEMInterru|
  01618	00000000	 DCD         |??_C@_1DM@NLILHIEP@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AAI?$AAr?$AAq?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0161c		 |$LN38@OEMInterru|
  0161c	00000000	 DCD         |dpCurSettings|
  01620		 |$M45930|

			 ENDP  ; |OEMInterruptHandler|

	IMPORT	|_CountLeadingZeros|

  00068			 AREA	 |.pdata|, PDATA
|$T45950| DCD	|$LN9@OALGPIOInt|
	DCD	0x40006104
; Function compile flags: /Odtp

  01620			 AREA	 |.text|, CODE, ARM

  01620		 |OALGPIOIntrHandler| PROC

; 96   : {    

  01620		 |$LN9@OALGPIOInt|
  01620	e1a0c00d	 mov         r12, sp
  01624	e92d0001	 stmdb       sp!, {r0}
  01628	e92d5000	 stmdb       sp!, {r12, lr}
  0162c	e24dd020	 sub         sp, sp, #0x20
  01630		 |$M45947|

; 97   :     DWORD i;
; 98   :     for (i=0;i<s_intr.nbGpioBank;i++)

  01630	e3a03000	 mov         r3, #0
  01634	e58d3000	 str         r3, [sp]
  01638	ea000002	 b           |$LN4@OALGPIOInt|
  0163c		 |$LN3@OALGPIOInt|
  0163c	e59d3000	 ldr         r3, [sp]
  01640	e2833001	 add         r3, r3, #1
  01644	e58d3000	 str         r3, [sp]
  01648		 |$LN4@OALGPIOInt|
  01648	e59d2000	 ldr         r2, [sp]
  0164c	e59f314c	 ldr         r3, [pc, #0x14C]
  01650	e5933004	 ldr         r3, [r3, #4]
  01654	e1520003	 cmp         r2, r3
  01658	2a00004a	 bcs         |$LN2@OALGPIOInt|

; 99   :     {
; 100  :         if (irq == s_intr.pGpioCtxt[i].bank_irq)

  0165c	e59d1000	 ldr         r1, [sp]
  01660	e3a03020	 mov         r3, #0x20
  01664	e0020391	 mul         r2, r1, r3
  01668	e59f3130	 ldr         r3, [pc, #0x130]
  0166c	e5933008	 ldr         r3, [r3, #8]
  01670	e0833002	 add         r3, r3, r2
  01674	e2833008	 add         r3, r3, #8
  01678	e59d2028	 ldr         r2, [sp, #0x28]
  0167c	e5933000	 ldr         r3, [r3]
  01680	e1520003	 cmp         r2, r3
  01684	1a00003e	 bne         |$LN1@OALGPIOInt|

; 101  :         {
; 102  :             register OMAP_GPIO_REGS* pRegs = s_intr.pGpioCtxt[i].pRegs;

  01688	e59d1000	 ldr         r1, [sp]
  0168c	e3a03020	 mov         r3, #0x20
  01690	e0020391	 mul         r2, r1, r3
  01694	e59f3104	 ldr         r3, [pc, #0x104]
  01698	e5933008	 ldr         r3, [r3, #8]
  0169c	e0833002	 add         r3, r3, r2
  016a0	e283300c	 add         r3, r3, #0xC
  016a4	e5933000	 ldr         r3, [r3]
  016a8	e58d300c	 str         r3, [sp, #0xC]

; 103  :             register DWORD status;
; 104  :             register DWORD index;
; 105  :             register DWORD mask;
; 106  :             status = INREG32(&pRegs->IRQSTATUS1);

  016ac	e59d300c	 ldr         r3, [sp, #0xC]
  016b0	e2833018	 add         r3, r3, #0x18
  016b4	e5933000	 ldr         r3, [r3]
  016b8	e58d3010	 str         r3, [sp, #0x10]

; 107  :             status &= INREG32(&pRegs->IRQENABLE1);

  016bc	e59d300c	 ldr         r3, [sp, #0xC]
  016c0	e283301c	 add         r3, r3, #0x1C
  016c4	e5932000	 ldr         r2, [r3]
  016c8	e59d3010	 ldr         r3, [sp, #0x10]
  016cc	e0033002	 and         r3, r3, r2
  016d0	e58d3010	 str         r3, [sp, #0x10]

; 108  :             index = 31 - _CountLeadingZeros(status);

  016d4	e59d0010	 ldr         r0, [sp, #0x10]
  016d8	eb000000	 bl          _CountLeadingZeros
  016dc	e58d0018	 str         r0, [sp, #0x18]
  016e0	e59d3018	 ldr         r3, [sp, #0x18]
  016e4	e263301f	 rsb         r3, r3, #0x1F
  016e8	e58d3008	 str         r3, [sp, #8]

; 109  :             mask = 1 << (index);

  016ec	e59d2008	 ldr         r2, [sp, #8]
  016f0	e3a03001	 mov         r3, #1
  016f4	e1a03213	 mov         r3, r3, lsl r2
  016f8	e58d3004	 str         r3, [sp, #4]

; 110  :             OUTPORT32(&pRegs->IRQSTATUS1, mask);

  016fc	e59d300c	 ldr         r3, [sp, #0xC]
  01700	e2832018	 add         r2, r3, #0x18
  01704	e59d3004	 ldr         r3, [sp, #4]
  01708	e5823000	 str         r3, [r2]

; 111  :             OUTPORT32(&pRegs->IRQSTATUS2, mask);

  0170c	e59d300c	 ldr         r3, [sp, #0xC]
  01710	e2832028	 add         r2, r3, #0x28
  01714	e59d3004	 ldr         r3, [sp, #4]
  01718	e5823000	 str         r3, [r2]

; 112  :             OUTPORT32(&pRegs->CLEARIRQENABLE1, mask);

  0171c	e59d300c	 ldr         r3, [sp, #0xC]
  01720	e2832060	 add         r2, r3, #0x60
  01724	e59d3004	 ldr         r3, [sp, #4]
  01728	e5823000	 str         r3, [r2]

; 113  :             OUTPORT32(&pRegs->CLEARWAKEUPENA, mask);

  0172c	e59d300c	 ldr         r3, [sp, #0xC]
  01730	e2832080	 add         r2, r3, #0x80
  01734	e59d3004	 ldr         r3, [sp, #4]
  01738	e5823000	 str         r3, [r2]

; 114  : 
; 115  :             irq = s_intr.pGpioCtxt[i].irq_start + index;

  0173c	e59d1000	 ldr         r1, [sp]
  01740	e3a03020	 mov         r3, #0x20
  01744	e0020391	 mul         r2, r1, r3
  01748	e59f3050	 ldr         r3, [pc, #0x50]
  0174c	e5933008	 ldr         r3, [r3, #8]
  01750	e0833002	 add         r3, r3, r2
  01754	e5932000	 ldr         r2, [r3]
  01758	e59d3008	 ldr         r3, [sp, #8]
  0175c	e0823003	 add         r3, r2, r3
  01760	e58d3028	 str         r3, [sp, #0x28]

; 116  :             OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), FALSE);

  01764	e3a00000	 mov         r0, #0
  01768	eb000000	 bl          BSPGetGpioIrq
  0176c	e58d001c	 str         r0, [sp, #0x1C]
  01770	e3a01000	 mov         r1, #0
  01774	e59d2028	 ldr         r2, [sp, #0x28]
  01778	e59d301c	 ldr         r3, [sp, #0x1C]
  0177c	e0420003	 sub         r0, r2, r3
  01780	eb000000	 bl          OEMEnableIOPadWakeup
  01784		 |$LN1@OALGPIOInt|

; 117  : 
; 118  :         }
; 119  :     }

  01784	eaffffac	 b           |$LN3@OALGPIOInt|
  01788		 |$LN2@OALGPIOInt|

; 120  :     return irq;

  01788	e59d3028	 ldr         r3, [sp, #0x28]
  0178c	e58d3014	 str         r3, [sp, #0x14]

; 121  : }

  01790	e59d0014	 ldr         r0, [sp, #0x14]
  01794	e28dd020	 add         sp, sp, #0x20
  01798	e89d6000	 ldmia       sp, {sp, lr}
  0179c	e12fff1e	 bx          lr
  017a0		 |$LN10@OALGPIOInt|
  017a0		 |$LN11@OALGPIOInt|
  017a0	00000000	 DCD         |s_intr|
  017a4		 |$M45948|

			 ENDP  ; |OALGPIOIntrHandler|

	END
