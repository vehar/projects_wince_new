; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_INTR\intr.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_oalTimerIrq| [ DATA ]
	EXPORT	|g_oalPrcmIrq| [ DATA ]
	EXPORT	|g_oalSmartReflex1| [ DATA ]
	EXPORT	|g_oalSmartReflex2| [ DATA ]
	EXPORT	|g_pIntr| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|s_intr| %	0xc

  00000			 AREA	 |.data|, DATA
|g_oalTimerIrq| DCD 0xffffffff
|g_oalPrcmIrq| DCD 0xffffffff
|g_oalSmartReflex1| DCD 0xffffffff
|g_oalSmartReflex2| DCD 0xffffffff
|g_pIntr| DCD	|s_intr|

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|GetGPIOCtxtByIrq|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_intr\intr.c

  00000			 AREA	 |.pdata|, PDATA
|$T45823| DCD	|$LN13@GetGPIOCtx|
	DCD	0x40001901
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetGPIOCtxtByIrq| PROC

; 84   : {

  00000		 |$LN13@GetGPIOCtx|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45820|

; 85   :     DWORD i;
; 86   :     for (i=0;i<s_intr.nbGpioBank;i++)

  00004	e59f3054	 ldr         r3, [pc, #0x54]
  00008	e3a02000	 mov         r2, #0
  0000c	e5934004	 ldr         r4, [r3, #4]
  00010	e3540000	 cmp         r4, #0
  00014	0a00000b	 beq         |$LN10@GetGPIOCtx|
  00018	e593e008	 ldr         lr, [r3, #8]
  0001c	e1a0100e	 mov         r1, lr
  00020		 |$LL4@GetGPIOCtx|

; 87   :     {        
; 88   :         if ((s_intr.pGpioCtxt[i].irq_start <= irq) && (irq < (s_intr.pGpioCtxt[i].irq_start+32)))

  00020	e5913000	 ldr         r3, [r1]
  00024	e1530000	 cmp         r3, r0
  00028	8a000002	 bhi         |$LN3@GetGPIOCtx|
  0002c	e2833020	 add         r3, r3, #0x20
  00030	e1500003	 cmp         r0, r3
  00034	3a000006	 bcc         |$LN8@GetGPIOCtx|
  00038		 |$LN3@GetGPIOCtx|

; 85   :     DWORD i;
; 86   :     for (i=0;i<s_intr.nbGpioBank;i++)

  00038	e2822001	 add         r2, r2, #1
  0003c	e1520004	 cmp         r2, r4
  00040	e2811020	 add         r1, r1, #0x20
  00044	3afffff5	 bcc         |$LL4@GetGPIOCtx|
  00048		 |$LN10@GetGPIOCtx|

; 91   :         }
; 92   :     }
; 93   :     return NULL;

  00048	e3a00000	 mov         r0, #0

; 94   : }

  0004c	e8bd4010	 ldmia       sp!, {r4, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$LN8@GetGPIOCtx|

; 89   :         {
; 90   :             return &s_intr.pGpioCtxt[i];

  00054	e08e0282	 add         r0, lr, r2, lsl #5

; 94   : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$LN14@GetGPIOCtx|
  00060		 |$LN15@GetGPIOCtx|
  00060	00000000	 DCD         |s_intr|
  00064		 |$M45821|

			 ENDP  ; |GetGPIOCtxtByIrq|

	IMPORT	|OEMEnableIOPadWakeup|
	IMPORT	|BSPGetGpioIrq|
	IMPORT	|_CountLeadingZeros|

  00000			 AREA	 |.pdata|, PDATA
|$T45844| DCD	|$LN11@OALGPIOInt|
	DCD	0x40002a01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGPIOIntrHandler| PROC

; 96   : {    

  00000		 |$LN11@OALGPIOInt|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45841|
  00004	e1a04000	 mov         r4, r0

; 97   :     DWORD i;
; 98   :     for (i=0;i<s_intr.nbGpioBank;i++)

  00008	e59f7094	 ldr         r7, [pc, #0x94]
  0000c	e3a06000	 mov         r6, #0
  00010	e5972004	 ldr         r2, [r7, #4]
  00014	e3520000	 cmp         r2, #0
  00018	0a00001e	 beq         |$LN2@OALGPIOInt|
  0001c	e3a05000	 mov         r5, #0
  00020	e3a08001	 mov         r8, #1
  00024		 |$LL4@OALGPIOInt|
  00024	e5973008	 ldr         r3, [r7, #8]

; 99   :     {
; 100  :         if (irq == s_intr.pGpioCtxt[i].bank_irq)

  00028	e0851003	 add         r1, r5, r3
  0002c	e5913008	 ldr         r3, [r1, #8]
  00030	e1540003	 cmp         r4, r3
  00034	1a000013	 bne         |$LN3@OALGPIOInt|

; 101  :         {
; 102  :             register OMAP_GPIO_REGS* pRegs = s_intr.pGpioCtxt[i].pRegs;

  00038	e591400c	 ldr         r4, [r1, #0xC]

; 103  :             register DWORD status;
; 104  :             register DWORD index;
; 105  :             register DWORD mask;
; 106  :             status = INREG32(&pRegs->IRQSTATUS1);

  0003c	e5942018	 ldr         r2, [r4, #0x18]

; 107  :             status &= INREG32(&pRegs->IRQENABLE1);

  00040	e594301c	 ldr         r3, [r4, #0x1C]
  00044	e0030002	 and         r0, r3, r2

; 108  :             index = 31 - _CountLeadingZeros(status);

  00048	eb000000	 bl          _CountLeadingZeros
  0004c	e260201f	 rsb         r2, r0, #0x1F

; 109  :             mask = 1 << (index);

  00050	e1a03218	 mov         r3, r8, lsl r2

; 110  :             OUTPORT32(&pRegs->IRQSTATUS1, mask);
; 111  :             OUTPORT32(&pRegs->IRQSTATUS2, mask);
; 112  :             OUTPORT32(&pRegs->CLEARIRQENABLE1, mask);
; 113  :             OUTPORT32(&pRegs->CLEARWAKEUPENA, mask);
; 114  : 
; 115  :             irq = s_intr.pGpioCtxt[i].irq_start + index;
; 116  :             OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), FALSE);

  00054	e3a00000	 mov         r0, #0
  00058	e5843018	 str         r3, [r4, #0x18]
  0005c	e5843028	 str         r3, [r4, #0x28]
  00060	e5843060	 str         r3, [r4, #0x60]
  00064	e5843080	 str         r3, [r4, #0x80]
  00068	e5973008	 ldr         r3, [r7, #8]
  0006c	e7953003	 ldr         r3, [r5, +r3]
  00070	e0834002	 add         r4, r3, r2
  00074	eb000000	 bl          BSPGetGpioIrq
  00078	e0440000	 sub         r0, r4, r0
  0007c	e3a01000	 mov         r1, #0
  00080	eb000000	 bl          OEMEnableIOPadWakeup
  00084	e5972004	 ldr         r2, [r7, #4]
  00088		 |$LN3@OALGPIOInt|
  00088	e2866001	 add         r6, r6, #1
  0008c	e1560002	 cmp         r6, r2
  00090	e2855020	 add         r5, r5, #0x20
  00094	3affffe2	 bcc         |$LL4@OALGPIOInt|
  00098		 |$LN2@OALGPIOInt|

; 117  : 
; 118  :         }
; 119  :     }
; 120  :     return irq;
; 121  : }

  00098	e1a00004	 mov         r0, r4
  0009c	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$LN12@OALGPIOInt|
  000a4		 |$LN13@OALGPIOInt|
  000a4	00000000	 DCD         |s_intr|
  000a8		 |$M45842|

			 ENDP  ; |OALGPIOIntrHandler|


  00000			 AREA	 |.pdata|, PDATA
|$T45855| DCD	|$LN10@OALGPIOEna|
	DCD	0x40002701
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGPIOEnableIRQ| PROC

; 123  : {

  00000		 |$LN10@OALGPIOEna|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45852|
  00004	e1a04000	 mov         r4, r0

; 124  :     register INTR_GPIO_CTXT* ctxt = GetGPIOCtxtByIrq(irq);

  00008	eb000000	 bl          GetGPIOCtxtByIrq
  0000c	e3500000	 cmp         r0, #0

; 125  :     if (ctxt)

  00010	0a00001e	 beq         |$LN5@OALGPIOEna|

; 126  :     {
; 127  : //        EnableDeviceClocks(ctxt->device, TRUE);  // This function uses a reference counter.
; 128  : 		if (ctxt->bank_irq < 32)

  00014	e5902008	 ldr         r2, [r0, #8]

; 129  : 		{
; 130  : 	        OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR0, 1 << (ctxt->bank_irq % 32));

  00018	e59f3078	 ldr         r3, [pc, #0x78]
  0001c	e3a0e001	 mov         lr, #1
  00020	e3520020	 cmp         r2, #0x20
  00024	e5931000	 ldr         r1, [r3]
  00028	3202201f	 andcc       r2, r2, #0x1F
  0002c	31a0321e	 movcc       r3, lr, lsl r2
  00030	35813088	 strcc       r3, [r1, #0x88]
  00034	3a000004	 bcc         |$LN1@OALGPIOEna|

; 131  : 		}
; 132  : 		else if (ctxt->bank_irq < 64)

  00038	e3520040	 cmp         r2, #0x40

; 133  : 		{
; 134  : 	        OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR1, 1 << (ctxt->bank_irq % 32));

  0003c	e202201f	 and         r2, r2, #0x1F
  00040	e1a0321e	 mov         r3, lr, lsl r2
  00044	358130a8	 strcc       r3, [r1, #0xA8]

; 135  : 		}
; 136  : 		else
; 137  : 		{
; 138  : 	        OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR2, 1 << (ctxt->bank_irq % 32));

  00048	258130c8	 strcs       r3, [r1, #0xC8]
  0004c		 |$LN1@OALGPIOEna|

; 139  : 		}
; 140  : 
; 141  :         OUTREG32(&ctxt->pRegs->SETIRQENABLE1, 1<<(irq - ctxt->irq_start));   // unmask IRQ

  0004c	e5903000	 ldr         r3, [r0]
  00050	e590200c	 ldr         r2, [r0, #0xC]
  00054	e3a01001	 mov         r1, #1
  00058	e0443003	 sub         r3, r4, r3
  0005c	e1a03311	 mov         r3, r1, lsl r3

; 142  :         OUTREG32(&ctxt->pRegs->SETWAKEUPENA,  1<<(irq - ctxt->irq_start));        

  00060	e3a01001	 mov         r1, #1
  00064	e5823064	 str         r3, [r2, #0x64]
  00068	e5903000	 ldr         r3, [r0]
  0006c	e590200c	 ldr         r2, [r0, #0xC]

; 143  :         OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), TRUE);

  00070	e3a00000	 mov         r0, #0
  00074	e0443003	 sub         r3, r4, r3
  00078	e1a03311	 mov         r3, r1, lsl r3
  0007c	e5823084	 str         r3, [r2, #0x84]
  00080	eb000000	 bl          BSPGetGpioIrq
  00084	e0440000	 sub         r0, r4, r0
  00088	e3a01001	 mov         r1, #1
  0008c	eb000000	 bl          OEMEnableIOPadWakeup
  00090		 |$LN5@OALGPIOEna|

; 144  :     }
; 145  : }

  00090	e8bd4010	 ldmia       sp!, {r4, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$LN11@OALGPIOEna|
  00098		 |$LN12@OALGPIOEna|
  00098	00000000	 DCD         |s_intr|
  0009c		 |$M45853|

			 ENDP  ; |OALGPIOEnableIRQ|


  00000			 AREA	 |.pdata|, PDATA
|$T45866| DCD	|$LN6@OALGPIODis|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGPIODisableIRQ| PROC

; 147  : {

  00000		 |$LN6@OALGPIODis|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45863|
  00004	e1a04000	 mov         r4, r0

; 148  :     register INTR_GPIO_CTXT* ctxt = GetGPIOCtxtByIrq(irq);

  00008	eb000000	 bl          GetGPIOCtxtByIrq
  0000c	e3500000	 cmp         r0, #0

; 149  :     if (ctxt)

  00010	0a000010	 beq         |$LN1@OALGPIODis|

; 150  :     {
; 151  :         OUTREG32(&ctxt->pRegs->CLEARIRQENABLE1, 1<<(irq - ctxt->irq_start));   // mask IRQ

  00014	e5903000	 ldr         r3, [r0]
  00018	e590200c	 ldr         r2, [r0, #0xC]
  0001c	e3a01001	 mov         r1, #1
  00020	e0443003	 sub         r3, r4, r3
  00024	e1a03311	 mov         r3, r1, lsl r3

; 152  :         OUTREG32(&ctxt->pRegs->CLEARWAKEUPENA,  1<<(irq - ctxt->irq_start));        

  00028	e3a01001	 mov         r1, #1
  0002c	e5823060	 str         r3, [r2, #0x60]
  00030	e5903000	 ldr         r3, [r0]
  00034	e590200c	 ldr         r2, [r0, #0xC]

; 153  :         OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), FALSE);

  00038	e3a00000	 mov         r0, #0
  0003c	e0443003	 sub         r3, r4, r3
  00040	e1a03311	 mov         r3, r1, lsl r3
  00044	e5823080	 str         r3, [r2, #0x80]
  00048	eb000000	 bl          BSPGetGpioIrq
  0004c	e0440000	 sub         r0, r4, r0
  00050	e3a01000	 mov         r1, #0
  00054	eb000000	 bl          OEMEnableIOPadWakeup
  00058		 |$LN1@OALGPIODis|

; 154  : 
; 155  : //        EnableDeviceClocks(ctxt->device, FALSE); // This function uses a reference counter.
; 156  :     }
; 157  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M45864|

			 ENDP  ; |OALGPIODisableIRQ|


  00000			 AREA	 |.pdata|, PDATA
|$T45875| DCD	|$LN6@OALGPIODon|
	DCD	0x40001801
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGPIODoneIRQ| PROC

; 160  : {

  00000		 |$LN6@OALGPIODon|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45872|
  00004	e1a04000	 mov         r4, r0

; 161  :     register INTR_GPIO_CTXT* ctxt = GetGPIOCtxtByIrq(irq);

  00008	eb000000	 bl          GetGPIOCtxtByIrq
  0000c	e3500000	 cmp         r0, #0

; 162  :     if (ctxt)

  00010	0a000010	 beq         |$LN1@OALGPIODon|

; 163  :     {
; 164  :         OUTREG32(&ctxt->pRegs->SETIRQENABLE1, 1<<(irq - ctxt->irq_start));   // unmask IRQ

  00014	e5903000	 ldr         r3, [r0]
  00018	e590200c	 ldr         r2, [r0, #0xC]
  0001c	e3a01001	 mov         r1, #1
  00020	e0443003	 sub         r3, r4, r3
  00024	e1a03311	 mov         r3, r1, lsl r3

; 165  :         OUTREG32(&ctxt->pRegs->SETWAKEUPENA,  1<<(irq - ctxt->irq_start));

  00028	e3a01001	 mov         r1, #1
  0002c	e5823064	 str         r3, [r2, #0x64]
  00030	e5903000	 ldr         r3, [r0]
  00034	e590200c	 ldr         r2, [r0, #0xC]

; 166  :         OEMEnableIOPadWakeup((irq - BSPGetGpioIrq(0)), TRUE);

  00038	e3a00000	 mov         r0, #0
  0003c	e0443003	 sub         r3, r4, r3
  00040	e1a03311	 mov         r3, r1, lsl r3
  00044	e5823084	 str         r3, [r2, #0x84]
  00048	eb000000	 bl          BSPGetGpioIrq
  0004c	e0440000	 sub         r0, r4, r0
  00050	e3a01001	 mov         r1, #1
  00054	eb000000	 bl          OEMEnableIOPadWakeup
  00058		 |$LN1@OALGPIODon|

; 167  :     }
; 168  : }

  00058	e8bd4010	 ldmia       sp!, {r4, lr}
  0005c	e12fff1e	 bx          lr
  00060		 |$M45873|

			 ENDP  ; |OALGPIODoneIRQ|


  00000			 AREA	 |.pdata|, PDATA
|$T45887| DCD	|$LN6@OALGPIOIsI|
	DCD	0x40000e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALGPIOIsIrqPending| PROC

; 171  : {

  00000		 |$LN6@OALGPIOIsI|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45884|
  00004	e1a05000	 mov         r5, r0

; 172  :     BOOL rc = FALSE;
; 173  :     register INTR_GPIO_CTXT* ctxt = GetGPIOCtxtByIrq(irq);

  00008	e3a04000	 mov         r4, #0
  0000c	eb000000	 bl          GetGPIOCtxtByIrq
  00010	e3500000	 cmp         r0, #0

; 174  :     if (ctxt)
; 175  :     {
; 176  :         rc = INREG32(&ctxt->pRegs->IRQSTATUS1) & (1 << (irq - ctxt->irq_start));           

  00014	1590300c	 ldrne       r3, [r0, #0xC]
  00018	15901000	 ldrne       r1, [r0]
  0001c	13a00001	 movne       r0, #1
  00020	15932018	 ldrne       r2, [r3, #0x18]
  00024	10453001	 subne       r3, r5, r1
  00028	10024310	 andne       r4, r2, r0, lsl r3

; 177  :     }
; 178  :     return rc;
; 179  : }

  0002c	e1a00004	 mov         r0, r4
  00030	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M45885|

			 ENDP  ; |OALGPIOIsIrqPending|

	EXPORT	|OALIntrRequestIrqs|
	EXPORT	|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|BSPIntrRequestIrqs|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|

  00000			 AREA	 |.pdata|, PDATA
|$T45904| DCD	|$LN14@OALIntrReq|
	DCD	0x40002d02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "R", 0x0, "e", 0x0, "q", 0x0, "u", 0x0, "e"
	DCB	0x0, "s", 0x0, "t", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, "-", 0x0, ">", 0x0, "%", 0x0, "d", 0x0, "/"
	DCB	0x0, "%", 0x0, "d", 0x0, "/", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, "/", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrRequestIrqs| PROC

; 305  : {

  00000		 |$LN14@OALIntrReq|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd010	 sub         sp, sp, #0x10
  00008		 |$M45901|
  00008	e1a09002	 mov         r9, r2
  0000c	e1a06001	 mov         r6, r1
  00010	e1a07000	 mov         r7, r0

; 306  :     BOOL rc = FALSE;
; 307  : 
; 308  :     OALMSG(OAL_INTR&&OAL_FUNC, (
; 309  :         L"+OALIntrRequestIrqs(0x%08x->%d/%d/0x%08x/%d, 0x%08x, 0x%08x)\r\n",
; 310  :         pDevLoc, pDevLoc->IfcType, pDevLoc->BusNumber, pDevLoc->LogicalLoc,
; 311  :         pDevLoc->Pin, pCount, pIrqs
; 312  :         ));

  00014	e59f8094	 ldr         r8, [pc, #0x94]
  00018	e3a05000	 mov         r5, #0
  0001c	e598e440	 ldr         lr, [r8, #0x440]
  00020	e31e0901	 tst         lr, #1, 18
  00024	0a00000d	 beq         |$LN8@OALIntrReq|
  00028	e31e0004	 tst         lr, #4
  0002c	0a00000b	 beq         |$LN8@OALIntrReq|
  00030	e597e010	 ldr         lr, [r7, #0x10]
  00034	e5974008	 ldr         r4, [r7, #8]
  00038	e5973004	 ldr         r3, [r7, #4]
  0003c	e5972000	 ldr         r2, [r7]
  00040	e59f0064	 ldr         r0, [pc, #0x64]
  00044	e1a01007	 mov         r1, r7
  00048	e58de004	 str         lr, [sp, #4]
  0004c	e58d4000	 str         r4, [sp]
  00050	e58d900c	 str         r9, [sp, #0xC]
  00054	e58d6008	 str         r6, [sp, #8]
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	e598e440	 ldr         lr, [r8, #0x440]
  00060		 |$LN8@OALIntrReq|

; 313  : 
; 314  :     // This shouldn't happen
; 315  :     if (*pCount < 1) goto cleanUp;

  00060	e5963000	 ldr         r3, [r6]
  00064	e3530001	 cmp         r3, #1
  00068	3a000005	 bcc         |$cleanUp$45570|

; 316  : 
; 317  :     switch (pDevLoc->IfcType)
; 318  :     {
; 319  :     case Internal:
; 320  :         /*
; 321  :         switch ((ULONG)pDevLoc->LogicalLoc)
; 322  :         {
; 323  :         case OMAP35XX_MCSPI1_REGS_PA:
; 324  :         *pCount = 1;
; 325  :         pIrqs[0] = IRQ_SPI1;
; 326  :         rc = TRUE;
; 327  :         break;
; 328  :         case OMAP35XX_MCSPI2_REGS_PA:
; 329  :         *pCount = 1;
; 330  :         pIrqs[0] = IRQ_SPI2;
; 331  :         rc = TRUE;
; 332  :         break;
; 333  :         case OMAP35XX_UART1_REGS_PA:
; 334  :         *pCount = 1;
; 335  :         pIrqs[0] = IRQ_UART1;
; 336  :         rc = TRUE;
; 337  :         break;
; 338  :         case OMAP35XX_UART2_REGS_PA:
; 339  :         *pCount = 1;
; 340  :         pIrqs[0] = IRQ_UART2;
; 341  :         rc = TRUE;
; 342  :         break;
; 343  :         case OMAP35XX_UART3_REGS_PA:
; 344  :         *pCount = 1;
; 345  :         pIrqs[0] = IRQ_UART3;
; 346  :         rc = TRUE;
; 347  :         break;
; 348  :         }
; 349  :         */
; 350  :         break;
; 351  :     }
; 352  : 
; 353  :     if (!rc) rc = BSPIntrRequestIrqs(pDevLoc, pCount, pIrqs);

  0006c	e1a02009	 mov         r2, r9
  00070	e1a01006	 mov         r1, r6
  00074	e1a00007	 mov         r0, r7
  00078	eb000000	 bl          BSPIntrRequestIrqs
  0007c	e598e440	 ldr         lr, [r8, #0x440]
  00080	e1a05000	 mov         r5, r0
  00084		 |$cleanUp$45570|

; 354  : 
; 355  : cleanUp:
; 356  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALIntrRequestIrqs(rc = %d)\r\n", rc));

  00084	e31e0901	 tst         lr, #1, 18
  00088	131e0004	 tstne       lr, #4
  0008c	159f0014	 ldrne       r0, [pc, #0x14]
  00090	11a01005	 movne       r1, r5
  00094	1b000000	 blne        NKDbgPrintfW

; 357  :     return rc;
; 358  : }

  00098	e1a00005	 mov         r0, r5
  0009c	e28dd010	 add         sp, sp, #0x10
  000a0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  000a4	e12fff1e	 bx          lr
  000a8		 |$LN15@OALIntrReq|
  000a8		 |$LN16@OALIntrReq|
  000a8	00000000	 DCD         |??_C@_1DO@NDIEKHNP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000ac		 |$LN17@OALIntrReq|
  000ac	00000000	 DCD         |??_C@_1HO@EBPJKEJJ@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?9?$AA?$DO?$AA?$CF?$AAd?$AA?1?$AA?$CF@|
  000b0		 |$LN18@OALIntrReq|
  000b0	00000000	 DCD         |dpCurSettings|
  000b4		 |$M45902|

			 ENDP  ; |OALIntrRequestIrqs|

	EXPORT	|OALIntrSetDataIrqs|
	EXPORT	|??_C@_1DA@PIDAEGAC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@NKDACBOK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@| [ DATA ] ; `string'
	IMPORT	|OALSWIntrSetDataIrq|

  00000			 AREA	 |.pdata|, PDATA
|$T45925| DCD	|$LN15@OALIntrSet|
	DCD	0x40002a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@PIDAEGAC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@NKDACBOK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "S", 0x0, "e", 0x0, "t", 0x0, "D", 0x0, "a"
	DCB	0x0, "t", 0x0, "a", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "X", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrSetDataIrqs| PROC

; 371  : {

  00000		 |$LN15@OALIntrSet|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M45922|
  00008	e1a07003	 mov         r7, r3
  0000c	e1a08002	 mov         r8, r2
  00010	e1a04001	 mov         r4, r1
  00014	e1a05000	 mov         r5, r0

; 372  :     UINT32 i;
; 373  : 
; 374  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 375  :         L"+OALIntrSetDataIrqs(%d, 0x%08x, 0x%08X, %d)\r\n", 
; 376  :         count, pIrqs, pvData, cbData
; 377  :         ));

  00018	e59f6084	 ldr         r6, [pc, #0x84]
  0001c	e596e440	 ldr         lr, [r6, #0x440]
  00020	e31e0901	 tst         lr, #1, 18
  00024	0a000008	 beq         |$LN7@OALIntrSet|
  00028	e31e0902	 tst         lr, #2, 18
  0002c	0a000006	 beq         |$LN7@OALIntrSet|
  00030	e59f0068	 ldr         r0, [pc, #0x68]
  00034	e1a03008	 mov         r3, r8
  00038	e1a02004	 mov         r2, r4
  0003c	e1a01005	 mov         r1, r5
  00040	e58d7000	 str         r7, [sp]
  00044	eb000000	 bl          NKDbgPrintfW
  00048	e596e440	 ldr         lr, [r6, #0x440]
  0004c		 |$LN7@OALIntrSet|

; 378  : 
; 379  :     for (i = 0; i < count; i++)

  0004c	e3550000	 cmp         r5, #0
  00050	0a00000a	 beq         |$LN2@OALIntrSet|
  00054		 |$LL4@OALIntrSet|

; 380  :         {
; 381  :         if (96 < pIrqs[i] && pIrqs[i] < IRQ_SW_RESERVED_MAX)

  00054	e5940000	 ldr         r0, [r4]
  00058	e3500060	 cmp         r0, #0x60
  0005c	9a000003	 bls         |$LN3@OALIntrSet|
  00060	e350006e	 cmp         r0, #0x6E

; 382  :             {
; 383  :             // call software irq handler
; 384  :             OALSWIntrSetDataIrq(pIrqs[i], pvData, cbData);

  00064	31a02007	 movcc       r2, r7
  00068	31a01008	 movcc       r1, r8
  0006c	3b000000	 blcc        OALSWIntrSetDataIrq
  00070		 |$LN3@OALIntrSet|
  00070	e2844004	 add         r4, r4, #4
  00074	e2555001	 subs        r5, r5, #1
  00078	1afffff5	 bne         |$LL4@OALIntrSet|

; 378  : 
; 379  :     for (i = 0; i < count; i++)

  0007c	e596e440	 ldr         lr, [r6, #0x440]
  00080		 |$LN2@OALIntrSet|

; 385  :             }
; 386  :         }
; 387  : 
; 388  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrSetDataIrqs()\r\n"));

  00080	e31e0901	 tst         lr, #1, 18
  00084	131e0902	 tstne       lr, #2, 18
  00088	159f000c	 ldrne       r0, [pc, #0xC]
  0008c	1b000000	 blne        NKDbgPrintfW

; 389  : }

  00090	e28dd004	 add         sp, sp, #4
  00094	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  00098	e12fff1e	 bx          lr
  0009c		 |$LN16@OALIntrSet|
  0009c		 |$LN17@OALIntrSet|
  0009c	00000000	 DCD         |??_C@_1DA@PIDAEGAC@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000a0		 |$LN18@OALIntrSet|
  000a0	00000000	 DCD         |??_C@_1FM@NKDACBOK@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAS?$AAe?$AAt?$AAD?$AAa?$AAt?$AAa?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5@|
  000a4		 |$LN19@OALIntrSet|
  000a4	00000000	 DCD         |dpCurSettings|
  000a8		 |$M45923|

			 ENDP  ; |OALIntrSetDataIrqs|

	EXPORT	|OALIntrEnableIrqs|
	EXPORT	|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALSWIntrEnableIrq|

  00000			 AREA	 |.pdata|, PDATA
|$T45959| DCD	|$LN31@OALIntrEna|
	DCD	0x40006301

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l"
	DCB	0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "E", 0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e"
	DCB	0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrEnableIrqs| PROC

; 400  : {

  00000		 |$LN31@OALIntrEna|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M45956|
  00004	e1a08001	 mov         r8, r1
  00008	e1a06000	 mov         r6, r0

; 401  :     BOOL rc = FALSE;
; 402  :     UINT32 irq, i;
; 403  : 
; 404  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 405  :         L"+OALntrEnableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 406  :         ));

  0000c	e59f916c	 ldr         r9, [pc, #0x16C]
  00010	e3a05000	 mov         r5, #0
  00014	e5993440	 ldr         r3, [r9, #0x440]
  00018	e3130901	 tst         r3, #1, 18
  0001c	0a000006	 beq         |$LN15@OALIntrEna|
  00020	e3130902	 tst         r3, #2, 18
  00024	0a000004	 beq         |$LN15@OALIntrEna|
  00028	e59f0158	 ldr         r0, [pc, #0x158]
  0002c	e1a02008	 mov         r2, r8
  00030	e1a01006	 mov         r1, r6
  00034	eb000000	 bl          NKDbgPrintfW
  00038	e5993440	 ldr         r3, [r9, #0x440]
  0003c		 |$LN15@OALIntrEna|

; 407  : 
; 408  :     for (i = 0; i < count; i++)

  0003c	e3560000	 cmp         r6, #0
  00040	0a000045	 beq         |$LN10@OALIntrEna|
  00044	e59f7138	 ldr         r7, [pc, #0x138]
  00048	e3a0a001	 mov         r10, #1
  0004c	e3a0b001	 mov         r11, #1
  00050	e3a01001	 mov         r1, #1
  00054	e3a09001	 mov         r9, #1
  00058		 |$LL12@OALIntrEna|

; 409  :     {
; 410  :         irq = pIrqs[i];

  00058	e5984000	 ldr         r4, [r8]

; 411  : 
; 412  :         if (irq != OAL_INTR_IRQ_UNDEFINED)

  0005c	e3740001	 cmn         r4, #1
  00060	0a000038	 beq         |$LN11@OALIntrEna|

; 413  :         {
; 414  :             if (irq < 32)

  00064	e3540020	 cmp         r4, #0x20

; 415  :             {
; 416  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR0, 1 << irq);

  00068	35972000	 ldrcc       r2, [r7]
  0006c	31a0341a	 movcc       r3, r10, lsl r4
  00070	35823088	 strcc       r3, [r2, #0x88]
  00074	3a000032	 bcc         |$LN23@OALIntrEna|

; 417  :             }
; 418  :             else if (irq < 64)

  00078	e3540040	 cmp         r4, #0x40

; 419  :             {
; 420  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR1, 1 << (irq - 32));

  0007c	35972000	 ldrcc       r2, [r7]
  00080	32443020	 subcc       r3, r4, #0x20
  00084	31a0331b	 movcc       r3, r11, lsl r3
  00088	358230a8	 strcc       r3, [r2, #0xA8]
  0008c	3a00002c	 bcc         |$LN23@OALIntrEna|

; 421  :             }
; 422  :             else if (irq < 96)

  00090	e3540060	 cmp         r4, #0x60

; 423  :             {
; 424  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR2, 1 << (irq - 64));

  00094	35972000	 ldrcc       r2, [r7]
  00098	32443040	 subcc       r3, r4, #0x40
  0009c	31a03311	 movcc       r3, r1, lsl r3
  000a0	358230c8	 strcc       r3, [r2, #0xC8]
  000a4	3a000026	 bcc         |$LN23@OALIntrEna|

; 425  :             }
; 426  :             else if (irq < IRQ_SW_RESERVED_MAX )

  000a8	e354006e	 cmp         r4, #0x6E

; 427  :             {
; 428  :                 // call software irq handler
; 429  :                 OALSWIntrEnableIrq(irq);

  000ac	e1a00004	 mov         r0, r4
  000b0	2a000001	 bcs         |$LN2@OALIntrEna|
  000b4	eb000000	 bl          OALSWIntrEnableIrq

; 430  :             }
; 431  :             else 

  000b8	ea000020	 b           |$LN28@OALIntrEna|
  000bc		 |$LN2@OALIntrEna|

; 432  :             {
; 433  :                 OALGPIOEnableIRQ(irq);

  000bc	eb000000	 bl          GetGPIOCtxtByIrq
  000c0	e1b01000	 movs        r1, r0
  000c4	0a00001d	 beq         |$LN28@OALIntrEna|
  000c8	e5913008	 ldr         r3, [r1, #8]
  000cc	e5972000	 ldr         r2, [r7]
  000d0	e3530020	 cmp         r3, #0x20
  000d4	3203301f	 andcc       r3, r3, #0x1F
  000d8	31a03319	 movcc       r3, r9, lsl r3
  000dc	35823088	 strcc       r3, [r2, #0x88]
  000e0	3a000005	 bcc         |$LN19@OALIntrEna|
  000e4	e3530040	 cmp         r3, #0x40
  000e8	e203301f	 and         r3, r3, #0x1F
  000ec	e3a00001	 mov         r0, #1
  000f0	e1a03310	 mov         r3, r0, lsl r3
  000f4	358230a8	 strcc       r3, [r2, #0xA8]
  000f8	258230c8	 strcs       r3, [r2, #0xC8]
  000fc		 |$LN19@OALIntrEna|
  000fc	e5913000	 ldr         r3, [r1]
  00100	e591200c	 ldr         r2, [r1, #0xC]
  00104	e3a0e001	 mov         lr, #1
  00108	e0443003	 sub         r3, r4, r3
  0010c	e1a0331e	 mov         r3, lr, lsl r3
  00110	e3a00000	 mov         r0, #0
  00114	e5823064	 str         r3, [r2, #0x64]
  00118	e5913000	 ldr         r3, [r1]
  0011c	e591200c	 ldr         r2, [r1, #0xC]
  00120	e3a01001	 mov         r1, #1
  00124	e0443003	 sub         r3, r4, r3
  00128	e1a03311	 mov         r3, r1, lsl r3
  0012c	e5823084	 str         r3, [r2, #0x84]
  00130	eb000000	 bl          BSPGetGpioIrq
  00134	e0440000	 sub         r0, r4, r0
  00138	e3a01001	 mov         r1, #1
  0013c	eb000000	 bl          OEMEnableIOPadWakeup
  00140		 |$LN28@OALIntrEna|
  00140	e3a01001	 mov         r1, #1
  00144		 |$LN23@OALIntrEna|

; 434  :             }
; 435  :             rc = TRUE;

  00144	e3a05001	 mov         r5, #1
  00148		 |$LN11@OALIntrEna|

; 407  : 
; 408  :     for (i = 0; i < count; i++)

  00148	e2888004	 add         r8, r8, #4
  0014c	e2566001	 subs        r6, r6, #1
  00150	1affffc0	 bne         |$LL12@OALIntrEna|
  00154	e59f9024	 ldr         r9, [pc, #0x24]
  00158	e5993440	 ldr         r3, [r9, #0x440]
  0015c		 |$LN10@OALIntrEna|

; 436  :         }
; 437  : 
; 438  :     }
; 439  : 
; 440  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrEnableIrqs(rc = %d)\r\n", rc));

  0015c	e3130901	 tst         r3, #1, 18
  00160	13130902	 tstne       r3, #2, 18
  00164	159f0010	 ldrne       r0, [pc, #0x10]
  00168	11a01005	 movne       r1, r5
  0016c	1b000000	 blne        NKDbgPrintfW

; 441  :     return rc;
; 442  : }

  00170	e1a00005	 mov         r0, r5
  00174	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00178	e12fff1e	 bx          lr
  0017c		 |$LN32@OALIntrEna|
  0017c		 |$LN33@OALIntrEna|
  0017c	00000000	 DCD         |??_C@_1DM@INNHDHDJ@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00180		 |$LN34@OALIntrEna|
  00180	00000000	 DCD         |dpCurSettings|
  00184		 |$LN35@OALIntrEna|
  00184	00000000	 DCD         |s_intr|
  00188		 |$LN36@OALIntrEna|
  00188	00000000	 DCD         |??_C@_1EA@MEDKAPAI@?$AA?$CL?$AAO?$AAA?$AAL?$AAn?$AAt?$AAr?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0018c		 |$M45957|

			 ENDP  ; |OALIntrEnableIrqs|

	EXPORT	|OALIntrDisableIrqs|
	EXPORT	|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	IMPORT	|OALSWIntrDisableIrq|

  00000			 AREA	 |.pdata|, PDATA
|$T45986| DCD	|$LN26@OALIntrDis|
	DCD	0x40005001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "i", 0x0, "s", 0x0, "a", 0x0, "b"
	DCB	0x0, "l", 0x0, "e", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, "s"
	DCB	0x0, "(", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrDisableIrqs| PROC

; 453  : {

  00000		 |$LN26@OALIntrDis|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M45983|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 454  :     UINT32 irq, i;
; 455  : 
; 456  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 457  :         L"+OALIntrDisableIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 458  :         ));

  0000c	e59f7120	 ldr         r7, [pc, #0x120]
  00010	e5973440	 ldr         r3, [r7, #0x440]
  00014	e3130901	 tst         r3, #1, 18
  00018	0a000006	 beq         |$LN15@OALIntrDis|
  0001c	e3130902	 tst         r3, #2, 18
  00020	0a000004	 beq         |$LN15@OALIntrDis|
  00024	e59f0110	 ldr         r0, [pc, #0x110]
  00028	e1a02006	 mov         r2, r6
  0002c	e1a01005	 mov         r1, r5
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e5973440	 ldr         r3, [r7, #0x440]
  00038		 |$LN15@OALIntrDis|

; 459  : 
; 460  :     for (i = 0; i < count; i++)

  00038	e3550000	 cmp         r5, #0
  0003c	0a000035	 beq         |$LN10@OALIntrDis|
  00040	e59f80f0	 ldr         r8, [pc, #0xF0]
  00044	e3a09001	 mov         r9, #1
  00048	e3a0a001	 mov         r10, #1
  0004c	e3a0b001	 mov         r11, #1
  00050	e3a07001	 mov         r7, #1
  00054		 |$LL12@OALIntrDis|

; 461  :     {
; 462  :         irq = pIrqs[i];

  00054	e5964000	 ldr         r4, [r6]

; 463  : 
; 464  :         if (irq != OAL_INTR_IRQ_UNDEFINED)

  00058	e3740001	 cmn         r4, #1
  0005c	0a000028	 beq         |$LN11@OALIntrDis|

; 465  :         {            
; 466  :             if (irq < 32)

  00060	e3540020	 cmp         r4, #0x20

; 467  :             {
; 468  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET0, 1 << irq);

  00064	35982000	 ldrcc       r2, [r8]
  00068	31a03419	 movcc       r3, r9, lsl r4
  0006c	3582308c	 strcc       r3, [r2, #0x8C]
  00070	3a000023	 bcc         |$LN11@OALIntrDis|

; 469  :             }
; 470  :             else if (irq < 64)

  00074	e3540040	 cmp         r4, #0x40

; 471  :             {
; 472  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET1, 1 << (irq - 32));

  00078	35982000	 ldrcc       r2, [r8]
  0007c	32443020	 subcc       r3, r4, #0x20
  00080	31a0331a	 movcc       r3, r10, lsl r3
  00084	358230ac	 strcc       r3, [r2, #0xAC]
  00088	3a00001d	 bcc         |$LN11@OALIntrDis|

; 473  :             }
; 474  :             else if (irq < 96)

  0008c	e3540060	 cmp         r4, #0x60

; 475  :             {
; 476  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET2, 1 << (irq - 64));

  00090	35982000	 ldrcc       r2, [r8]
  00094	32443040	 subcc       r3, r4, #0x40
  00098	31a0331b	 movcc       r3, r11, lsl r3
  0009c	358230cc	 strcc       r3, [r2, #0xCC]
  000a0	3a000017	 bcc         |$LN11@OALIntrDis|

; 477  :             }
; 478  :             else if (irq < IRQ_SW_RESERVED_MAX )

  000a4	e354006e	 cmp         r4, #0x6E

; 479  :             {
; 480  :                 // call software irq handler
; 481  :                 OALSWIntrDisableIrq(irq);

  000a8	e1a00004	 mov         r0, r4
  000ac	2a000001	 bcs         |$LN2@OALIntrDis|
  000b0	eb000000	 bl          OALSWIntrDisableIrq

; 482  :             }
; 483  :             else 

  000b4	ea000012	 b           |$LN11@OALIntrDis|
  000b8		 |$LN2@OALIntrDis|

; 484  :             {
; 485  :                 OALGPIODisableIRQ(irq);

  000b8	eb000000	 bl          GetGPIOCtxtByIrq
  000bc	e1b01000	 movs        r1, r0
  000c0	0a00000f	 beq         |$LN11@OALIntrDis|
  000c4	e5913000	 ldr         r3, [r1]
  000c8	e591200c	 ldr         r2, [r1, #0xC]
  000cc	e3a00000	 mov         r0, #0
  000d0	e0443003	 sub         r3, r4, r3
  000d4	e1a03317	 mov         r3, r7, lsl r3
  000d8	e5823060	 str         r3, [r2, #0x60]
  000dc	e5913000	 ldr         r3, [r1]
  000e0	e591200c	 ldr         r2, [r1, #0xC]
  000e4	e3a01001	 mov         r1, #1
  000e8	e0443003	 sub         r3, r4, r3
  000ec	e1a03311	 mov         r3, r1, lsl r3
  000f0	e5823080	 str         r3, [r2, #0x80]
  000f4	eb000000	 bl          BSPGetGpioIrq
  000f8	e0440000	 sub         r0, r4, r0
  000fc	e3a01000	 mov         r1, #0
  00100	eb000000	 bl          OEMEnableIOPadWakeup
  00104		 |$LN11@OALIntrDis|
  00104	e2866004	 add         r6, r6, #4
  00108	e2555001	 subs        r5, r5, #1
  0010c	1affffd0	 bne         |$LL12@OALIntrDis|
  00110	e59f701c	 ldr         r7, [pc, #0x1C]
  00114	e5973440	 ldr         r3, [r7, #0x440]
  00118		 |$LN10@OALIntrDis|

; 486  :             }
; 487  :         }
; 488  :     }
; 489  : 
; 490  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrDisableIrqs\r\n"));

  00118	e3130901	 tst         r3, #1, 18
  0011c	13130902	 tstne       r3, #2, 18
  00120	159f0008	 ldrne       r0, [pc, #8]
  00124	1b000000	 blne        NKDbgPrintfW

; 491  : }

  00128	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN27@OALIntrDis|
  00130		 |$LN28@OALIntrDis|
  00130	00000000	 DCD         |??_C@_1CM@GPENGBBP@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00134		 |$LN29@OALIntrDis|
  00134	00000000	 DCD         |dpCurSettings|
  00138		 |$LN30@OALIntrDis|
  00138	00000000	 DCD         |s_intr|
  0013c		 |$LN31@OALIntrDis|
  0013c	00000000	 DCD         |??_C@_1EE@NIPMEMC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN@|
  00140		 |$M45984|

			 ENDP  ; |OALIntrDisableIrqs|

	EXPORT	|OALIntrDoneIrqs|
	EXPORT	|??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALSWIntrDoneIrq|

  00000			 AREA	 |.pdata|, PDATA
|$T46013| DCD	|$LN26@OALIntrDon|
	DCD	0x40005001

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "r", 0x0, "q", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "D", 0x0, "o", 0x0, "n", 0x0, "e", 0x0, "I"
	DCB	0x0, "r", 0x0, "q", 0x0, "s", 0x0, "(", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrDoneIrqs| PROC

; 503  : {

  00000		 |$LN26@OALIntrDon|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M46010|
  00004	e1a06001	 mov         r6, r1
  00008	e1a05000	 mov         r5, r0

; 504  :     BOOL rc = FALSE;
; 505  :     UINT32 irq, i;
; 506  : 
; 507  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (
; 508  :         L"+OALIntrDoneIrqs(%d, 0x%08x)\r\n", count, pIrqs
; 509  :         ));

  0000c	e59f7120	 ldr         r7, [pc, #0x120]
  00010	e5973440	 ldr         r3, [r7, #0x440]
  00014	e3130901	 tst         r3, #1, 18
  00018	0a000006	 beq         |$LN15@OALIntrDon|
  0001c	e3130902	 tst         r3, #2, 18
  00020	0a000004	 beq         |$LN15@OALIntrDon|
  00024	e59f0110	 ldr         r0, [pc, #0x110]
  00028	e1a02006	 mov         r2, r6
  0002c	e1a01005	 mov         r1, r5
  00030	eb000000	 bl          NKDbgPrintfW
  00034	e5973440	 ldr         r3, [r7, #0x440]
  00038		 |$LN15@OALIntrDon|

; 510  : 
; 511  :     for (i = 0; i < count; i++)

  00038	e3550000	 cmp         r5, #0
  0003c	0a000035	 beq         |$LN10@OALIntrDon|
  00040	e59f80f0	 ldr         r8, [pc, #0xF0]
  00044	e3a09001	 mov         r9, #1
  00048	e3a0a001	 mov         r10, #1
  0004c	e3a0b001	 mov         r11, #1
  00050	e3a07001	 mov         r7, #1
  00054		 |$LL12@OALIntrDon|

; 512  :     {
; 513  :         irq = pIrqs[i];

  00054	e5964000	 ldr         r4, [r6]

; 514  : 
; 515  :         if (irq != OAL_INTR_IRQ_UNDEFINED)

  00058	e3740001	 cmn         r4, #1
  0005c	0a000028	 beq         |$LN11@OALIntrDon|

; 516  :         {  
; 517  :             if (irq < 32)

  00060	e3540020	 cmp         r4, #0x20

; 518  :             {
; 519  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR0, 1 << irq);

  00064	35982000	 ldrcc       r2, [r8]
  00068	31a03419	 movcc       r3, r9, lsl r4
  0006c	35823088	 strcc       r3, [r2, #0x88]
  00070	3a000023	 bcc         |$LN11@OALIntrDon|

; 520  :             }
; 521  :             else if (irq < 64)

  00074	e3540040	 cmp         r4, #0x40

; 522  :             {
; 523  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR1, 1 << (irq - 32));

  00078	35982000	 ldrcc       r2, [r8]
  0007c	32443020	 subcc       r3, r4, #0x20
  00080	31a0331a	 movcc       r3, r10, lsl r3
  00084	358230a8	 strcc       r3, [r2, #0xA8]
  00088	3a00001d	 bcc         |$LN11@OALIntrDon|

; 524  :             }
; 525  :             else if (irq < 96)

  0008c	e3540060	 cmp         r4, #0x60

; 526  :             {
; 527  :                 OUTREG32(&s_intr.pICLRegs->INTC_MIR_CLEAR2, 1 << (irq - 64));

  00090	35982000	 ldrcc       r2, [r8]
  00094	32443040	 subcc       r3, r4, #0x40
  00098	31a0331b	 movcc       r3, r11, lsl r3
  0009c	358230c8	 strcc       r3, [r2, #0xC8]
  000a0	3a000017	 bcc         |$LN11@OALIntrDon|

; 528  :             }
; 529  :             else if (irq < IRQ_SW_RESERVED_MAX )

  000a4	e354006e	 cmp         r4, #0x6E

; 530  :             {
; 531  :                 // call software irq handler
; 532  :                 OALSWIntrDoneIrq(irq);

  000a8	e1a00004	 mov         r0, r4
  000ac	2a000001	 bcs         |$LN2@OALIntrDon|
  000b0	eb000000	 bl          OALSWIntrDoneIrq

; 533  :             }
; 534  :             else 

  000b4	ea000012	 b           |$LN11@OALIntrDon|
  000b8		 |$LN2@OALIntrDon|

; 535  :             {
; 536  :                 OALGPIODoneIRQ(irq);

  000b8	eb000000	 bl          GetGPIOCtxtByIrq
  000bc	e1b01000	 movs        r1, r0
  000c0	0a00000f	 beq         |$LN11@OALIntrDon|
  000c4	e5913000	 ldr         r3, [r1]
  000c8	e591200c	 ldr         r2, [r1, #0xC]
  000cc	e3a00000	 mov         r0, #0
  000d0	e0443003	 sub         r3, r4, r3
  000d4	e1a03317	 mov         r3, r7, lsl r3
  000d8	e5823064	 str         r3, [r2, #0x64]
  000dc	e5913000	 ldr         r3, [r1]
  000e0	e591200c	 ldr         r2, [r1, #0xC]
  000e4	e3a01001	 mov         r1, #1
  000e8	e0443003	 sub         r3, r4, r3
  000ec	e1a03311	 mov         r3, r1, lsl r3
  000f0	e5823084	 str         r3, [r2, #0x84]
  000f4	eb000000	 bl          BSPGetGpioIrq
  000f8	e0440000	 sub         r0, r4, r0
  000fc	e3a01001	 mov         r1, #1
  00100	eb000000	 bl          OEMEnableIOPadWakeup
  00104		 |$LN11@OALIntrDon|
  00104	e2866004	 add         r6, r6, #4
  00108	e2555001	 subs        r5, r5, #1
  0010c	1affffd0	 bne         |$LL12@OALIntrDon|
  00110	e59f701c	 ldr         r7, [pc, #0x1C]
  00114	e5973440	 ldr         r3, [r7, #0x440]
  00118		 |$LN10@OALIntrDon|

; 537  :             }
; 538  :             rc = TRUE;
; 539  :         }
; 540  :     }
; 541  : 
; 542  :     OALMSG(OAL_INTR&&OAL_VERBOSE, (L"-OALIntrDoneIrqs\r\n"));

  00118	e3130901	 tst         r3, #1, 18
  0011c	13130902	 tstne       r3, #2, 18
  00120	159f0008	 ldrne       r0, [pc, #8]
  00124	1b000000	 blne        NKDbgPrintfW

; 543  : }

  00128	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN27@OALIntrDon|
  00130		 |$LN28@OALIntrDon|
  00130	00000000	 DCD         |??_C@_1CG@LBOJEJPE@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00134		 |$LN29@OALIntrDon|
  00134	00000000	 DCD         |dpCurSettings|
  00138		 |$LN30@OALIntrDon|
  00138	00000000	 DCD         |s_intr|
  0013c		 |$LN31@OALIntrDon|
  0013c	00000000	 DCD         |??_C@_1DO@FCJPHKGC@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAr?$AAD?$AAo?$AAn?$AAe?$AAI?$AAr?$AAq?$AAs?$AA?$CI?$AA?$CF?$AAd?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00140		 |$M46011|

			 ENDP  ; |OALIntrDoneIrqs|

	EXPORT	|OALIntrIsIrqPending|

  00000			 AREA	 |.pdata|, PDATA
|$T46041| DCD	|$LN20@OALIntrIsI|
	DCD	0x40002c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrIsIrqPending| PROC

; 556  : {

  00000		 |$LN20@OALIntrIsI|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46038|
  00004	e1a04000	 mov         r4, r0

; 557  :     BOOL rc = FALSE;
; 558  : 
; 559  :     if (irq < 32)

  00008	e3540020	 cmp         r4, #0x20

; 560  :     {
; 561  :         rc = INREG32(&s_intr.pICLRegs->INTC_ITR0) & (1 << irq);

  0000c	359f3098	 ldrcc       r3, [pc, #0x98]
  00010	33a02001	 movcc       r2, #1
  00014	35933000	 ldrcc       r3, [r3]
  00018	35933080	 ldrcc       r3, [r3, #0x80]
  0001c	30035412	 andcc       r5, r3, r2, lsl r4
  00020	3a00001a	 bcc         |$LN13@OALIntrIsI|

; 562  :     }
; 563  :     else if (irq < 64)

  00024	e3540040	 cmp         r4, #0x40

; 564  :     {
; 565  :         rc = INREG32(&s_intr.pICLRegs->INTC_ITR1) & (1 << (irq - 32));

  00028	359f307c	 ldrcc       r3, [pc, #0x7C]
  0002c	32442020	 subcc       r2, r4, #0x20
  00030	35933000	 ldrcc       r3, [r3]
  00034	359330a0	 ldrcc       r3, [r3, #0xA0]
  00038	3a000005	 bcc         |$LN17@OALIntrIsI|

; 566  :     }
; 567  :     else if (irq < 96)

  0003c	e3540060	 cmp         r4, #0x60
  00040	2a000006	 bcs         |$LN4@OALIntrIsI|

; 568  :     {
; 569  :         rc = INREG32(&s_intr.pICLRegs->INTC_ITR2) & (1 << (irq - 64));

  00044	e59f3060	 ldr         r3, [pc, #0x60]
  00048	e2442040	 sub         r2, r4, #0x40
  0004c	e5933000	 ldr         r3, [r3]
  00050	e59330c0	 ldr         r3, [r3, #0xC0]
  00054		 |$LN17@OALIntrIsI|
  00054	e3a01001	 mov         r1, #1
  00058	e0035211	 and         r5, r3, r1, lsl r2
  0005c	ea00000b	 b           |$LN13@OALIntrIsI|
  00060		 |$LN4@OALIntrIsI|

; 570  :     }
; 571  :     else if (irq < IRQ_SW_RESERVED_MAX )

  00060	e354006e	 cmp         r4, #0x6E

; 572  :     {
; 573  :         //  SW triggered interrupts only - none will be pending
; 574  :         rc = FALSE;
; 575  :     }
; 576  :     else 

  00064	3a00000d	 bcc         |$LN11@OALIntrIsI|

; 577  :     {
; 578  :         rc = OALGPIOIsIrqPending(irq);

  00068	e1a00004	 mov         r0, r4
  0006c	e3a05000	 mov         r5, #0
  00070	eb000000	 bl          GetGPIOCtxtByIrq
  00074	e3500000	 cmp         r0, #0
  00078	1590300c	 ldrne       r3, [r0, #0xC]
  0007c	15901000	 ldrne       r1, [r0]
  00080	13a00001	 movne       r0, #1
  00084	15932018	 ldrne       r2, [r3, #0x18]
  00088	10443001	 subne       r3, r4, r1
  0008c	10025310	 andne       r5, r2, r0, lsl r3
  00090		 |$LN13@OALIntrIsI|

; 579  :     }
; 580  : 
; 581  :     return (rc != 0);

  00090	e3550000	 cmp         r5, #0
  00094	13a00001	 movne       r0, #1

; 582  : }

  00098	18bd4030	 ldmneia     sp!, {r4, r5, lr}
  0009c	112fff1e	 bxne        lr
  000a0		 |$LN11@OALIntrIsI|

; 579  :     }
; 580  : 
; 581  :     return (rc != 0);

  000a0	e3a00000	 mov         r0, #0

; 582  : }

  000a4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000a8	e12fff1e	 bx          lr
  000ac		 |$LN21@OALIntrIsI|
  000ac		 |$LN22@OALIntrIsI|
  000ac	00000000	 DCD         |s_intr|
  000b0		 |$M46039|

			 ENDP  ; |OALIntrIsIrqPending|

	EXPORT	|OEMInterruptHandler|
	EXPORT	|??_C@_1DM@NLILHIEP@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AAI?$AAr?$AAq?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|OALSmartReflex2Intr|
	IMPORT	|OALSmartReflex1Intr|
	IMPORT	|OALIntrTranslateIrq|
	IMPORT	|OALPrcmIntrHandler|
	IMPORT	|OALTimerIntrHandler|
	IMPORT	|OALProfileTimerHit|
	IMPORT	|g_oalProfilerEnabled|
	IMPORT	|g_oalPerfTimerIrq|
	IMPORT	|g_oalILT|

  00000			 AREA	 |.pdata|, PDATA
|$T46084| DCD	|$LN39@OEMInterru|
	DCD	0x40009802

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@NLILHIEP@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AAI?$AAr?$AAq?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "O"
	DCB	0x0, "E", 0x0, "M", 0x0, "I", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t", 0x0, "H"
	DCB	0x0, "a", 0x0, "n", 0x0, "d", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, "(", 0x0, "I", 0x0, "r", 0x0, "q", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OEMInterruptHandler| PROC

; 594  : {

  00000		 |$LN39@OEMInterru|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M46081|
  00008	e1a0a000	 mov         r10, r0

; 595  :     UINT32 irq = (UINT32) OAL_INTR_IRQ_UNDEFINED;
; 596  :     UINT32 sysIntr = SYSINTR_NOP;
; 597  : 
; 598  :     // Get pending interrupt
; 599  :     irq = INREG32(&s_intr.pICLRegs->INTC_SIR_IRQ);
; 600  : 
; 601  : #ifdef OAL_ILTIMING
; 602  :         if (g_oalILT.active) 

  0000c	e59f7248	 ldr         r7, [pc, #0x248]
  00010	e59f6240	 ldr         r6, [pc, #0x240]
  00014	e3e01000	 mvn         r1, #0
  00018	e5972000	 ldr         r2, [r7]
  0001c	e5963000	 ldr         r3, [r6]
  00020	e58d1000	 str         r1, [sp]
  00024	e3520000	 cmp         r2, #0
  00028	e5934040	 ldr         r4, [r3, #0x40]

; 603  :             g_oalILT.interrupts ++;        

  0002c	11d730b4	 ldrneh      r3, [r7, #4]
  00030	e3a05000	 mov         r5, #0
  00034	e58d4000	 str         r4, [sp]
  00038	12833001	 addne       r3, r3, #1
  0003c	11c730b4	 strneh      r3, [r7, #4]

; 604  : #endif
; 605  : 
; 606  :     OALMSG(OAL_INTR, (L"OEMInterruptHandler(Irq %d)\r\n", irq));

  00040	e59f320c	 ldr         r3, [pc, #0x20C]
  00044	e5933440	 ldr         r3, [r3, #0x440]
  00048	e3130901	 tst         r3, #1, 18
  0004c	0a000003	 beq         |$LN23@OEMInterru|
  00050	e59f01f8	 ldr         r0, [pc, #0x1F8]
  00054	e1a01004	 mov         r1, r4
  00058	eb000000	 bl          NKDbgPrintfW
  0005c	e59d4000	 ldr         r4, [sp]
  00060		 |$LN23@OEMInterru|

; 607  : 
; 608  :     irq = OALGPIOIntrHandler(irq); //Check if this is a GPIO irq. In so, then translate the irq number

  00060	e5962004	 ldr         r2, [r6, #4]
  00064	e3a09000	 mov         r9, #0
  00068	e3520000	 cmp         r2, #0
  0006c	0a00001e	 beq         |$LN26@OEMInterru|
  00070	e3a08000	 mov         r8, #0
  00074	e3a0b001	 mov         r11, #1
  00078		 |$LL28@OEMInterru|
  00078	e5963008	 ldr         r3, [r6, #8]
  0007c	e0881003	 add         r1, r8, r3
  00080	e5913008	 ldr         r3, [r1, #8]
  00084	e1540003	 cmp         r4, r3
  00088	1a000013	 bne         |$LN27@OEMInterru|
  0008c	e591400c	 ldr         r4, [r1, #0xC]
  00090	e5942018	 ldr         r2, [r4, #0x18]
  00094	e594301c	 ldr         r3, [r4, #0x1C]
  00098	e0030002	 and         r0, r3, r2
  0009c	eb000000	 bl          _CountLeadingZeros
  000a0	e260201f	 rsb         r2, r0, #0x1F
  000a4	e1a0321b	 mov         r3, r11, lsl r2
  000a8	e3a00000	 mov         r0, #0
  000ac	e5843018	 str         r3, [r4, #0x18]
  000b0	e5843028	 str         r3, [r4, #0x28]
  000b4	e5843060	 str         r3, [r4, #0x60]
  000b8	e5843080	 str         r3, [r4, #0x80]
  000bc	e5963008	 ldr         r3, [r6, #8]
  000c0	e7983003	 ldr         r3, [r8, +r3]
  000c4	e0834002	 add         r4, r3, r2
  000c8	eb000000	 bl          BSPGetGpioIrq
  000cc	e0440000	 sub         r0, r4, r0
  000d0	e3a01000	 mov         r1, #0
  000d4	eb000000	 bl          OEMEnableIOPadWakeup
  000d8	e5962004	 ldr         r2, [r6, #4]
  000dc		 |$LN27@OEMInterru|
  000dc	e2899001	 add         r9, r9, #1
  000e0	e1590002	 cmp         r9, r2
  000e4	e2888020	 add         r8, r8, #0x20
  000e8	3affffe2	 bcc         |$LL28@OEMInterru|
  000ec		 |$LN26@OEMInterru|

; 609  :     if (irq < 32) 

  000ec	e3540020	 cmp         r4, #0x20
  000f0	35962000	 ldrcc       r2, [r6]
  000f4	e58d4000	 str         r4, [sp]

; 610  :     {
; 611  :         SETPORT32(&s_intr.pICLRegs->INTC_MIR0, 1 << irq);

  000f8	33a01001	 movcc       r1, #1
  000fc	35923084	 ldrcc       r3, [r2, #0x84]
  00100	31833411	 orrcc       r3, r3, r1, lsl r4
  00104	35823084	 strcc       r3, [r2, #0x84]
  00108	3a00000e	 bcc         |$LN15@OEMInterru|

; 612  :     } 
; 613  :     else if (irq < 64) 

  0010c	e3540040	 cmp         r4, #0x40
  00110	35961000	 ldrcc       r1, [r6]

; 614  :     {
; 615  :         SETPORT32(&s_intr.pICLRegs->INTC_MIR1, 1 << (irq - 32));

  00114	32442020	 subcc       r2, r4, #0x20
  00118	33a00001	 movcc       r0, #1
  0011c	359130a4	 ldrcc       r3, [r1, #0xA4]
  00120	31833210	 orrcc       r3, r3, r0, lsl r2
  00124	358130a4	 strcc       r3, [r1, #0xA4]
  00128	3a000006	 bcc         |$LN15@OEMInterru|

; 616  :     }
; 617  :     else if (irq < 96) 

  0012c	e3540060	 cmp         r4, #0x60
  00130	35961000	 ldrcc       r1, [r6]

; 618  :     {
; 619  :         SETPORT32(&s_intr.pICLRegs->INTC_MIR2, 1 << (irq - 64));

  00134	32442040	 subcc       r2, r4, #0x40
  00138	33a00001	 movcc       r0, #1
  0013c	359130c4	 ldrcc       r3, [r1, #0xC4]
  00140	31833210	 orrcc       r3, r3, r0, lsl r2
  00144	358130c4	 strcc       r3, [r1, #0xC4]
  00148		 |$LN15@OEMInterru|
  00148	e5963000	 ldr         r3, [r6]

; 620  :     }
; 621  :     else
; 622  :     {
; 623  :         //...
; 624  :     }
; 625  : 
; 626  :     // Acknowledge interrupt 
; 627  :     OUTREG32(&s_intr.pICLRegs->INTC_CONTROL, IC_CNTL_NEW_IRQ);
; 628  : 
; 629  :     // Check if this is profiler IRQ
; 630  :     if (irq == g_oalPerfTimerIrq && g_oalProfilerEnabled == TRUE)

  0014c	e59f20f8	 ldr         r2, [pc, #0xF8]
  00150	e3a01001	 mov         r1, #1
  00154	e5831048	 str         r1, [r3, #0x48]
  00158	e5923000	 ldr         r3, [r2]
  0015c	e59d0000	 ldr         r0, [sp]
  00160	e1500003	 cmp         r0, r3
  00164	1a000006	 bne         |$LN13@OEMInterru|
  00168	e59f30d8	 ldr         r3, [pc, #0xD8]
  0016c	e5933000	 ldr         r3, [r3]
  00170	e3530001	 cmp         r3, #1
  00174	1a000002	 bne         |$LN13@OEMInterru|

; 631  :     {
; 632  :         OALProfileTimerHit(ra);

  00178	e1a0000a	 mov         r0, r10
  0017c	eb000000	 bl          OALProfileTimerHit
  00180	e59d0000	 ldr         r0, [sp]
  00184		 |$LN13@OEMInterru|

; 633  :     }
; 634  : 
; 635  :     // Check if this is timer IRQ
; 636  :     if (irq == g_oalTimerIrq)

  00184	e59f20b8	 ldr         r2, [pc, #0xB8]
  00188	e5923000	 ldr         r3, [r2]
  0018c	e1500003	 cmp         r0, r3
  00190	1a000007	 bne         |$LN12@OEMInterru|

; 637  :     {        
; 638  : 
; 639  :         if (g_oalILT.active)

  00194	e5973000	 ldr         r3, [r7]
  00198	e3530000	 cmp         r3, #0

; 640  :         {
; 641  :             g_oalILT.interrupts--;

  0019c	11d730b4	 ldrneh      r3, [r7, #4]
  001a0	12833cff	 addne       r3, r3, #0xFF, 24
  001a4	128330ff	 addne       r3, r3, #0xFF
  001a8	11c730b4	 strneh      r3, [r7, #4]

; 642  :         }
; 643  :         // Call timer interrupt handler
; 644  :         sysIntr = OALTimerIntrHandler();

  001ac	eb000000	 bl          OALTimerIntrHandler

; 645  : 
; 646  :         // re-enable interrupts
; 647  :         OALIntrDoneIrqs(1, &irq);

  001b0	ea000007	 b           |$LN36@OEMInterru|
  001b4		 |$LN12@OEMInterru|

; 648  :     }
; 649  :     else if (irq == g_oalPrcmIrq)

  001b4	e5923004	 ldr         r3, [r2, #4]
  001b8	e1500003	 cmp         r0, r3
  001bc	1a000009	 bne         |$LN9@OEMInterru|

; 650  :         {
; 651  :         // call prcm interrupt handler
; 652  :         sysIntr = OALPrcmIntrHandler();

  001c0	eb000000	 bl          OALPrcmIntrHandler
  001c4	e1b05000	 movs        r5, r0

; 653  : 
; 654  :         if (sysIntr != SYSINTR_NOP)

  001c8	0a000002	 beq         |$LN8@OEMInterru|

; 655  :             {
; 656  :             // sysIntr is a the GPIO irq number for which IO PAD
; 657  :             // event occured, get the sysIntr for the irq
; 658  :             sysIntr = OALIntrTranslateIrq(sysIntr);

  001cc	e1a00005	 mov         r0, r5
  001d0	eb000000	 bl          OALIntrTranslateIrq
  001d4		 |$LN36@OEMInterru|
  001d4	e1a05000	 mov         r5, r0
  001d8		 |$LN8@OEMInterru|

; 659  :             }
; 660  : 
; 661  :         OALIntrDoneIrqs(1, &irq);

  001d8	e3a00001	 mov         r0, #1
  001dc	e28d1000	 add         r1, sp, #0
  001e0	eb000000	 bl          OALIntrDoneIrqs
  001e4	ea00000d	 b           |$LN2@OEMInterru|
  001e8		 |$LN9@OEMInterru|

; 662  :      }
; 663  :     else if (irq == g_oalSmartReflex1)

  001e8	e5923008	 ldr         r3, [r2, #8]
  001ec	e1500003	 cmp         r0, r3
  001f0	1a000001	 bne         |$LN6@OEMInterru|

; 664  :     {
; 665  :         // call prcm interrupt handler
; 666  :         sysIntr = OALSmartReflex1Intr();

  001f4	eb000000	 bl          OALSmartReflex1Intr
  001f8	ea000007	 b           |$LN34@OEMInterru|
  001fc		 |$LN6@OEMInterru|

; 667  :     }
; 668  :     else if (irq == g_oalSmartReflex2)

  001fc	e592300c	 ldr         r3, [r2, #0xC]
  00200	e1500003	 cmp         r0, r3
  00204	1a000001	 bne         |$LN4@OEMInterru|

; 669  :     {
; 670  :         // call prcm interrupt handler
; 671  :         sysIntr = OALSmartReflex2Intr();

  00208	eb000000	 bl          OALSmartReflex2Intr
  0020c	ea000002	 b           |$LN34@OEMInterru|
  00210		 |$LN4@OEMInterru|

; 672  :     }
; 673  :     else if (irq != OAL_INTR_IRQ_UNDEFINED)

  00210	e3700001	 cmn         r0, #1
  00214	0a000003	 beq         |$LN33@OEMInterru|

; 674  :     {
; 675  :         // We don't assume IRQ sharing, use static mapping
; 676  : 		// If needed, implement BSP level interrupt management here
; 677  : 		sysIntr = OALIntrTranslateIrq(irq);

  00218	eb000000	 bl          OALIntrTranslateIrq
  0021c		 |$LN34@OEMInterru|
  0021c	e1a05000	 mov         r5, r0
  00220		 |$LN2@OEMInterru|

; 678  :     }
; 679  :     // re-enable interrupts
; 680  :     if (sysIntr == SYSINTR_NOP)

  00220	e3550000	 cmp         r5, #0
  00224	1a000002	 bne         |$LN1@OEMInterru|
  00228		 |$LN33@OEMInterru|

; 681  :     {
; 682  :         OALIntrDoneIrqs(1, &irq);

  00228	e28d1000	 add         r1, sp, #0
  0022c	e3a00001	 mov         r0, #1
  00230	eb000000	 bl          OALIntrDoneIrqs
  00234		 |$LN1@OEMInterru|

; 683  :     }
; 684  : 
; 685  :     return sysIntr;
; 686  : }

  00234	e1a00005	 mov         r0, r5
  00238	e28dd004	 add         sp, sp, #4
  0023c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00240	e12fff1e	 bx          lr
  00244		 |$LN40@OEMInterru|
  00244		 |$LN41@OEMInterru|
  00244	00000000	 DCD         |g_oalTimerIrq|
  00248		 |$LN42@OEMInterru|
  00248	00000000	 DCD         |g_oalProfilerEnabled|
  0024c		 |$LN43@OEMInterru|
  0024c	00000000	 DCD         |g_oalPerfTimerIrq|
  00250		 |$LN44@OEMInterru|
  00250	00000000	 DCD         |??_C@_1DM@NLILHIEP@?$AAO?$AAE?$AAM?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?$CI?$AAI?$AAr?$AAq?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00254		 |$LN45@OEMInterru|
  00254	00000000	 DCD         |dpCurSettings|
  00258		 |$LN46@OEMInterru|
  00258	00000000	 DCD         |s_intr|
  0025c		 |$LN47@OEMInterru|
  0025c	00000000	 DCD         |g_oalILT|
  00260		 |$M46082|

			 ENDP  ; |OEMInterruptHandler|

	EXPORT	|OALIntrInit|
	EXPORT	|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KE@IBNEHINB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@GDDCDNKG@?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAf?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|BSPIntrInit|
	IMPORT	|GetIrqByDevice|
	IMPORT	|GetAddressByDevice|
	IMPORT	|OALLocalAlloc|
	IMPORT	|SOCGetGPIODeviceByBank|
	IMPORT	|OALPAtoVA|
	IMPORT	|SOCGetIntCtrlAddr|
	IMPORT	|OALIntrMapInit|
	IMPORT	|g_BSP_icL1Level|

  00000			 AREA	 |.pdata|, PDATA
|$T46132| DCD	|$LN45@OALIntrIni|
	DCD	0x4000b701

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KE@IBNEHINB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "O", 0x0, "A"
	DCB	0x0, "L", 0x0, "\\", 0x0, "O", 0x0, "M", 0x0, "A", 0x0, "P"
	DCB	0x0, "_", 0x0, "I", 0x0, "N", 0x0, "T", 0x0, "R", 0x0, "\\"
	DCB	0x0, ".", 0x0, "\\", 0x0, "i", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, ".", 0x0, "c", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@GDDCDNKG@?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAf?$AAo?$AAr@| DCB "u"
	DCB	0x0, "n", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, " ", 0x0, "G", 0x0, "P", 0x0, "I", 0x0, "O"
	DCB	0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c"
	DCB	0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "O", 0x0, "A", 0x0, "L", 0x0, "I", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALIntrInit| PROC

; 190  : {

  00000		 |$LN45@OALIntrIni|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004		 |$M46129|

; 191  :     BOOL rc = FALSE;
; 192  :     UINT32 i, mask;    
; 193  : 
; 194  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"+OALInterruptInit\r\n"));

  00004	e59f82cc	 ldr         r8, [pc, #0x2CC]
  00008	e5983440	 ldr         r3, [r8, #0x440]
  0000c	e3130901	 tst         r3, #1, 18
  00010	13130004	 tstne       r3, #4
  00014	159f02b8	 ldrne       r0, [pc, #0x2B8]
  00018	1b000000	 blne        NKDbgPrintfW

; 195  : 
; 196  :     // Initialize interrupt mapping
; 197  :     OALIntrMapInit();

  0001c	eb000000	 bl          OALIntrMapInit

; 198  : 
; 199  :     // Get interrupt controller and GPIO registers' virtual uncached addresses
; 200  :     memset(&s_intr,0,sizeof(s_intr));

  00020	e59f52a8	 ldr         r5, [pc, #0x2A8]
  00024	e3a03000	 mov         r3, #0
  00028	e5853000	 str         r3, [r5]
  0002c	e5853004	 str         r3, [r5, #4]
  00030	e5853008	 str         r3, [r5, #8]

; 201  :     s_intr.pICLRegs = OALPAtoUA(SOCGetIntCtrlAddr());

  00034	eb000000	 bl          SOCGetIntCtrlAddr
  00038	e3a01000	 mov         r1, #0
  0003c	eb000000	 bl          OALPAtoVA
  00040	e1a03000	 mov         r3, r0

; 202  :     i=1;
; 203  :     while (SOCGetGPIODeviceByBank(i++) != OMAP_DEVICE_NONE)

  00044	e5853000	 str         r3, [r5]
  00048	e3a00001	 mov         r0, #1
  0004c	e3a04001	 mov         r4, #1
  00050	ea000003	 b           |$LN42@OALIntrIni|
  00054		 |$LL17@OALIntrIni|

; 204  :     {        
; 205  :         s_intr.nbGpioBank++; 

  00054	e2844001	 add         r4, r4, #1
  00058	e2833001	 add         r3, r3, #1
  0005c	e1a00004	 mov         r0, r4
  00060	e5853004	 str         r3, [r5, #4]
  00064		 |$LN42@OALIntrIni|
  00064	eb000000	 bl          SOCGetGPIODeviceByBank

; 206  :     }
; 207  :     s_intr.pGpioCtxt = OALLocalAlloc(LPTR,sizeof(INTR_GPIO_CTXT)*s_intr.nbGpioBank);

  00068	e5953004	 ldr         r3, [r5, #4]
  0006c	e3700001	 cmn         r0, #1
  00070	1afffff7	 bne         |$LL17@OALIntrIni|
  00074	e3a00040	 mov         r0, #0x40
  00078	e1a01283	 mov         r1, r3, lsl #5
  0007c	eb000000	 bl          OALLocalAlloc
  00080	e3500000	 cmp         r0, #0
  00084	e5850008	 str         r0, [r5, #8]

; 208  :     if (s_intr.pGpioCtxt == NULL)

  00088	1a000007	 bne         |$LN15@OALIntrIni|

; 209  :     {
; 210  :         ERRORMSG(1,(TEXT("unable to allocate interrupt for GPIO structure\r\n")));

  0008c	e59f1238	 ldr         r1, [pc, #0x238]
  00090	e59f0230	 ldr         r0, [pc, #0x230]
  00094	e3a020d2	 mov         r2, #0xD2
  00098	eb000000	 bl          NKDbgPrintfW
  0009c	e59f0220	 ldr         r0, [pc, #0x220]
  000a0	eb000000	 bl          NKDbgPrintfW

; 211  :         return FALSE;

  000a4	e3a04000	 mov         r4, #0
  000a8	ea000080	 b           |$LN22@OALIntrIni|
  000ac		 |$LN15@OALIntrIni|

; 212  :     }
; 213  :     for (i=0;i<s_intr.nbGpioBank;i++)

  000ac	e5953004	 ldr         r3, [r5, #4]
  000b0	e3a07000	 mov         r7, #0
  000b4	e3a09000	 mov         r9, #0
  000b8	e3530000	 cmp         r3, #0
  000bc	0a00001f	 beq         |$LN12@OALIntrIni|
  000c0	e3a06000	 mov         r6, #0
  000c4		 |$LL14@OALIntrIni|

; 214  :     {        
; 215  :         OMAP_DEVICE device = SOCGetGPIODeviceByBank(i+1);

  000c4	e2877001	 add         r7, r7, #1
  000c8	e1a00007	 mov         r0, r7
  000cc	eb000000	 bl          SOCGetGPIODeviceByBank
  000d0	e1a04000	 mov         r4, r0

; 216  :         s_intr.pGpioCtxt[i].pRegs = OALPAtoUA(GetAddressByDevice(device));

  000d4	eb000000	 bl          GetAddressByDevice
  000d8	e3a01000	 mov         r1, #0
  000dc	eb000000	 bl          OALPAtoVA
  000e0	e5953008	 ldr         r3, [r5, #8]
  000e4	e1a02000	 mov         r2, r0

; 217  :         s_intr.pGpioCtxt[i].device = device;
; 218  :         s_intr.pGpioCtxt[i].irq_start = BSPGetGpioIrq(i*32);

  000e8	e1a00006	 mov         r0, r6
  000ec	e0863003	 add         r3, r6, r3
  000f0	e583200c	 str         r2, [r3, #0xC]
  000f4	e5953008	 ldr         r3, [r5, #8]
  000f8	e0863003	 add         r3, r6, r3
  000fc	e5834010	 str         r4, [r3, #0x10]
  00100	eb000000	 bl          BSPGetGpioIrq
  00104	e5953008	 ldr         r3, [r5, #8]

; 219  :         s_intr.pGpioCtxt[i].bank_irq = GetIrqByDevice(device,NULL);

  00108	e3a01000	 mov         r1, #0
  0010c	e7860003	 str         r0, [r6, +r3]
  00110	e1a00004	 mov         r0, r4
  00114	eb000000	 bl          GetIrqByDevice
  00118	e5953008	 ldr         r3, [r5, #8]
  0011c	e0863003	 add         r3, r6, r3
  00120	e5830008	 str         r0, [r3, #8]

; 220  :         s_intr.pGpioCtxt[i].padWakeupEvent = 0;

  00124	e5953008	 ldr         r3, [r5, #8]
  00128	e0863003	 add         r3, r6, r3
  0012c	e583901c	 str         r9, [r3, #0x1C]
  00130	e5953004	 ldr         r3, [r5, #4]
  00134	e2866020	 add         r6, r6, #0x20
  00138	e1570003	 cmp         r7, r3
  0013c	3affffe0	 bcc         |$LL14@OALIntrIni|
  00140		 |$LN12@OALIntrIni|

; 221  :     }
; 222  : 
; 223  :     //Reset the MPU INTC and wait until reset is complete
; 224  :     SETREG32(&s_intr.pICLRegs->INTC_SYSCONFIG, SYSCONFIG_SOFTRESET);

  00140	e5952000	 ldr         r2, [r5]
  00144	e5923010	 ldr         r3, [r2, #0x10]
  00148	e3833002	 orr         r3, r3, #2
  0014c	e5823010	 str         r3, [r2, #0x10]
  00150	e5952000	 ldr         r2, [r5]
  00154		 |$LL11@OALIntrIni|

; 225  :     while ((INREG32(&s_intr.pICLRegs->INTC_SYSSTATUS) & SYSSTATUS_RESETDONE) == 0);

  00154	e5923014	 ldr         r3, [r2, #0x14]
  00158	e3130001	 tst         r3, #1
  0015c	0afffffc	 beq         |$LL11@OALIntrIni|

; 226  : 
; 227  :     // Disable auto-idle for the interrupt controller
; 228  :     CLRREG32(&s_intr.pICLRegs->INTC_SYSCONFIG, SYSCONFIG_AUTOIDLE);

  00160	e5923010	 ldr         r3, [r2, #0x10]

; 229  : 
; 230  :     //Disable all interrupts and clear the ISR - for all for GPIO banks, too
; 231  :     OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET0, OMAP_MPUIC_MASKALL);

  00164	e3e01000	 mvn         r1, #0

; 232  :     OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET1, OMAP_MPUIC_MASKALL);
; 233  :     OUTREG32(&s_intr.pICLRegs->INTC_MIR_SET2, OMAP_MPUIC_MASKALL);
; 234  : 
; 235  :     // we supose that the GPIO locks are are always running
; 236  :     //// enable gpio clocks
; 237  :     //for (i=0;i<s_intr.nbGpioBank;i++)
; 238  :     //{        
; 239  :     //    EnableDeviceClocks(s_intr.pGpioCtxt[i].device,TRUE);
; 240  :     //}
; 241  : 
; 242  :     //Reset and Disable interrupt/wakeup for all GPIOs
; 243  :     for (i=0;i<s_intr.nbGpioBank;i++)

  00168	e3a00000	 mov         r0, #0
  0016c	e3c33001	 bic         r3, r3, #1
  00170	e5823010	 str         r3, [r2, #0x10]
  00174	e5953000	 ldr         r3, [r5]
  00178	e583108c	 str         r1, [r3, #0x8C]
  0017c	e5953000	 ldr         r3, [r5]
  00180	e58310ac	 str         r1, [r3, #0xAC]
  00184	e5953000	 ldr         r3, [r5]
  00188	e58310cc	 str         r1, [r3, #0xCC]
  0018c	e5953004	 ldr         r3, [r5, #4]
  00190	e3530000	 cmp         r3, #0
  00194	0a000020	 beq         |$LN7@OALIntrIni|
  00198	e3a01000	 mov         r1, #0
  0019c	e3a0e015	 mov         lr, #0x15
  001a0		 |$LL9@OALIntrIni|

; 244  :     {
; 245  :         //Disable interrupt/wakeup
; 246  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->IRQENABLE1, 0x00000000);

  001a0	e5953008	 ldr         r3, [r5, #8]
  001a4	e2800001	 add         r0, r0, #1
  001a8	e0813003	 add         r3, r1, r3
  001ac	e593300c	 ldr         r3, [r3, #0xC]
  001b0	e583901c	 str         r9, [r3, #0x1C]

; 247  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->IRQENABLE2, 0x00000000);

  001b4	e5953008	 ldr         r3, [r5, #8]
  001b8	e0813003	 add         r3, r1, r3
  001bc	e593300c	 ldr         r3, [r3, #0xC]
  001c0	e583902c	 str         r9, [r3, #0x2C]

; 248  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->WAKEUPENABLE, 0x00000000);

  001c4	e5953008	 ldr         r3, [r5, #8]
  001c8	e0813003	 add         r3, r1, r3
  001cc	e593300c	 ldr         r3, [r3, #0xC]
  001d0	e5839020	 str         r9, [r3, #0x20]

; 249  : 
; 250  :         // clear irq status bits
; 251  :         mask = INREG32(&s_intr.pGpioCtxt[i].pRegs->IRQSTATUS1);

  001d4	e5953008	 ldr         r3, [r5, #8]
  001d8	e0813003	 add         r3, r1, r3
  001dc	e593200c	 ldr         r2, [r3, #0xC]
  001e0	e5923018	 ldr         r3, [r2, #0x18]

; 252  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->IRQSTATUS1, mask);

  001e4	e5823018	 str         r3, [r2, #0x18]

; 253  : 
; 254  :         mask = INREG32(&s_intr.pGpioCtxt[i].pRegs->IRQSTATUS2);

  001e8	e5953008	 ldr         r3, [r5, #8]
  001ec	e0813003	 add         r3, r1, r3
  001f0	e593200c	 ldr         r2, [r3, #0xC]
  001f4	e5923028	 ldr         r3, [r2, #0x28]

; 255  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->IRQSTATUS2, mask);

  001f8	e5823028	 str         r3, [r2, #0x28]

; 256  : 
; 257  :         //Enable smart and auto idle for GPIO 
; 258  :         //(We don't need to set INTC since INTC is always in smart mode)
; 259  :         // Why is the interrupt subsystem controlling the GPIO subsystem clocks?
; 260  :         OUTREG32(&s_intr.pGpioCtxt[i].pRegs->SYSCONFIG, 
; 261  :             SYSCONFIG_AUTOIDLE| SYSCONFIG_ENAWAKEUP | SYSCONFIG_SMARTIDLE
; 262  :             );       

  001fc	e5953008	 ldr         r3, [r5, #8]
  00200	e0813003	 add         r3, r1, r3
  00204	e593300c	 ldr         r3, [r3, #0xC]
  00208	e2811020	 add         r1, r1, #0x20
  0020c	e583e010	 str         lr, [r3, #0x10]
  00210	e5953004	 ldr         r3, [r5, #4]
  00214	e1500003	 cmp         r0, r3
  00218	3affffe0	 bcc         |$LL9@OALIntrIni|
  0021c		 |$LN7@OALIntrIni|

; 263  :     }
; 264  :     // clear any possible pending interrupts
; 265  :     INREG32(&s_intr.pICLRegs->INTC_SIR_IRQ);

  0021c	e595e000	 ldr         lr, [r5]

; 266  :     INREG32(&s_intr.pICLRegs->INTC_SIR_FIQ);
; 267  :     //Initialize interrupt routing, level and priority
; 268  :     for (i = 0; i < 96; i++)

  00220	e59f1098	 ldr         r1, [pc, #0x98]
  00224	e3a00c01	 mov         r0, #1, 24
  00228	e59e3040	 ldr         r3, [lr, #0x40]
  0022c	e59e2044	 ldr         r2, [lr, #0x44]
  00230	e2414c01	 sub         r4, r1, #1, 24
  00234	e3a01060	 mov         r1, #0x60
  00238		 |$LL6@OALIntrIni|

; 269  :     {
; 270  :         OUTREG32(&s_intr.pICLRegs->INTC_ILR[i], g_BSP_icL1Level[i]);

  00238	e7942000	 ldr         r2, [r4, +r0]
  0023c	e080300e	 add         r3, r0, lr
  00240	e2511001	 subs        r1, r1, #1
  00244	e5832000	 str         r2, [r3]
  00248	1595e000	 ldrne       lr, [r5]
  0024c	e2800004	 add         r0, r0, #4
  00250	1afffff8	 bne         |$LL6@OALIntrIni|

; 271  :     }
; 272  :     //Call board specific initializatrion
; 273  :     rc = BSPIntrInit();

  00254	eb000000	 bl          BSPIntrInit

; 274  : 
; 275  :     //// disable gpio clocks
; 276  :     //for (i=0;i<s_intr.nbGpioBank;i++)
; 277  :     //{        
; 278  :     //    EnableDeviceClocks(s_intr.pGpioCtxt[i].device,FALSE);
; 279  :     //}
; 280  : 
; 281  :     // Finally enable the interrupts for the GPIO controllers
; 282  :     for (i=0;i<s_intr.nbGpioBank;i++)

  00258	e5953004	 ldr         r3, [r5, #4]
  0025c	e1a04000	 mov         r4, r0
  00260	e3a07000	 mov         r7, #0
  00264	e3530000	 cmp         r3, #0
  00268	0a00000a	 beq         |$LN1@OALIntrIni|

; 271  :     }
; 272  :     //Call board specific initializatrion
; 273  :     rc = BSPIntrInit();

  0026c	e3a06000	 mov         r6, #0
  00270		 |$LL3@OALIntrIni|

; 283  :     {        
; 284  :         OALIntrEnableIrqs(1,&s_intr.pGpioCtxt[i].bank_irq);

  00270	e5953008	 ldr         r3, [r5, #8]
  00274	e3a00001	 mov         r0, #1
  00278	e0863003	 add         r3, r6, r3
  0027c	e2831008	 add         r1, r3, #8
  00280	eb000000	 bl          OALIntrEnableIrqs
  00284	e5953004	 ldr         r3, [r5, #4]
  00288	e2877001	 add         r7, r7, #1
  0028c	e2866020	 add         r6, r6, #0x20
  00290	e1570003	 cmp         r7, r3
  00294	3afffff5	 bcc         |$LL3@OALIntrIni|
  00298		 |$LN1@OALIntrIni|

; 285  :     }
; 286  :     OALMSG(OAL_INTR&&OAL_FUNC, (L"-OALInterruptInit(rc = %d)\r\n", rc));

  00298	e5983440	 ldr         r3, [r8, #0x440]
  0029c	e3130901	 tst         r3, #1, 18
  002a0	13130004	 tstne       r3, #4
  002a4	159f0010	 ldrne       r0, [pc, #0x10]
  002a8	11a01004	 movne       r1, r4
  002ac	1b000000	 blne        NKDbgPrintfW
  002b0		 |$LN22@OALIntrIni|

; 287  :     return rc;
; 288  : 
; 289  : }

  002b0	e1a00004	 mov         r0, r4
  002b4	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  002b8	e12fff1e	 bx          lr
  002bc		 |$LN46@OALIntrIni|
  002bc		 |$LN47@OALIntrIni|
  002bc	00000000	 DCD         |??_C@_1DK@JEFKKIKI@?$AA?9?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  002c0		 |$LN48@OALIntrIni|
  002c0	00000000	 DCD         |g_BSP_icL1Level|
  002c4		 |$LN49@OALIntrIni|
  002c4	00000000	 DCD         |??_C@_1GE@GDDCDNKG@?$AAu?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AA?5?$AAf?$AAo?$AAr@|
  002c8		 |$LN50@OALIntrIni|
  002c8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  002cc		 |$LN51@OALIntrIni|
  002cc	00000000	 DCD         |??_C@_1KE@IBNEHINB@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  002d0		 |$LN52@OALIntrIni|
  002d0	00000000	 DCD         |s_intr|
  002d4		 |$LN53@OALIntrIni|
  002d4	00000000	 DCD         |??_C@_1CI@LJHDCJDG@?$AA?$CL?$AAO?$AAA?$AAL?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  002d8		 |$LN54@OALIntrIni|
  002d8	00000000	 DCD         |dpCurSettings|
  002dc		 |$M46130|

			 ENDP  ; |OALIntrInit|

	END
