; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\OAL\OMAP_GTP_TIMER\PROFILER\profiler.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|g_oalProfilerEnabled| [ DATA ]
	EXPORT	|g_oalPerfTimerIrq| [ DATA ]
	EXPORT	|g_pPerfTimer| [ DATA ]

  00000			 AREA	 |.data|, DATA
	 COMMON	|g_oalProfilerIncrement|, 0x4


  00000			 AREA	 |.bss|, NOINIT
|g_oalProfilerEnabled| % 0x4
|g_pPerfTimer| % 0x4
|?PreviousValue@?1??OALTimerQueryPerformanceCounter@@9@9| % 0x8 ; `OALTimerQueryPerformanceCounter'::`2'::PreviousValue

  00000			 AREA	 |.data|, DATA
|g_oalPerfTimerIrq| DCD 0xffffffff

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|OEMProfileTimerDisable|
	EXPORT	|OEMProfileTimerEnable|
	EXPORT	|OALTimerQueryPerformanceCounter|
	EXPORT	|OALTimerQueryPerformanceFrequency|
	EXPORT	|??_C@_1FI@JOODGIBI@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@FFGFMCFN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AAr?$AA?5?$AAB?$AAu?$AAi?$AAl?$AAd?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|OALPerformanceTimerInit|
	IMPORT	|g_pOemGlobal|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|EnableDeviceClocks|
	IMPORT	|BSPGetGPTPerfHighFreqClock|
	IMPORT	|GetIrqByDevice|
	IMPORT	|OALPAtoVA|
	IMPORT	|GetAddressByDevice|
	IMPORT	|BSPGetGPTPerfDevice|

  00010			 AREA	 |.bss|, NOINIT
|s_Frequency| %	0x4

  00000			 AREA	 |.pdata|, PDATA
|$T45738| DCD	|$LN10@OALPerform|
	DCD	0x4000a102
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\oal\omap_gtp_timer\profiler\profiler.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@JOODGIBI@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@| DCB "-"
	DCB	0x0, "-", 0x0, "-", 0x0, "H", 0x0, "i", 0x0, "g", 0x0, "h"
	DCB	0x0, " ", 0x0, "P", 0x0, "e", 0x0, "r", 0x0, "f", 0x0, "o"
	DCB	0x0, "r", 0x0, "m", 0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e"
	DCB	0x0, " ", 0x0, "F", 0x0, "r", 0x0, "e", 0x0, "q", 0x0, "u"
	DCB	0x0, "e", 0x0, "n", 0x0, "c", 0x0, "y", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "h"
	DCB	0x0, "z", 0x0, "-", 0x0, "-", 0x0, "-", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@FFGFMCFN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AAr?$AA?5?$AAB?$AAu?$AAi?$AAl?$AAd?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$AN?$AA?6?$AA?$AA@| DCB "*"
	DCB	0x0, "*", 0x0, "*", 0x0, "*", 0x0, "P", 0x0, "r", 0x0, "o"
	DCB	0x0, "f", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "B", 0x0, "u", 0x0, "i", 0x0, "l", 0x0, "d", 0x0, "*"
	DCB	0x0, "*", 0x0, "*", 0x0, "*", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |OALPerformanceTimerInit| PROC

; 49   : {

  00000		 |$LN10@OALPerform|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd020	 sub         sp, sp, #0x20
  00008		 |$M45735|

; 50   :     UINT srcClock;
; 51   :     DWORD tclr = 0;	

  00008	e3a03000	 mov         r3, #0
  0000c	e58d3004	 str         r3, [sp, #4]

; 52   : 
; 53   :     OMAP_DEVICE gptPerfDevice = BSPGetGPTPerfDevice();

  00010	eb000000	 bl          BSPGetGPTPerfDevice
  00014	e58d000c	 str         r0, [sp, #0xC]
  00018	e59d300c	 ldr         r3, [sp, #0xC]
  0001c	e58d3008	 str         r3, [sp, #8]

; 54   :     if (gptPerfDevice == OMAP_DEVICE_NONE)

  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e3730001	 cmn         r3, #1
  00028	1a000000	 bne         |$LN5@OALPerform|

; 55   :     {
; 56   :         return;

  0002c	ea000087	 b           |$LN6@OALPerform|
  00030		 |$LN5@OALPerform|

; 57   :     }
; 58   : 
; 59   :     // map HighResTimer
; 60   :     g_pPerfTimer = OALPAtoUA(GetAddressByDevice(gptPerfDevice));

  00030	e59d0008	 ldr         r0, [sp, #8]
  00034	eb000000	 bl          GetAddressByDevice
  00038	e58d0010	 str         r0, [sp, #0x10]
  0003c	e3a01000	 mov         r1, #0
  00040	e59d0010	 ldr         r0, [sp, #0x10]
  00044	eb000000	 bl          OALPAtoVA
  00048	e58d0014	 str         r0, [sp, #0x14]
  0004c	e59d2014	 ldr         r2, [sp, #0x14]
  00050	e59f3204	 ldr         r3, [pc, #0x204]
  00054	e5832000	 str         r2, [r3]

; 61   :     g_oalPerfTimerIrq = GetIrqByDevice(gptPerfDevice,NULL);

  00058	e3a01000	 mov         r1, #0
  0005c	e59d0008	 ldr         r0, [sp, #8]
  00060	eb000000	 bl          GetIrqByDevice
  00064	e58d0018	 str         r0, [sp, #0x18]
  00068	e59d2018	 ldr         r2, [sp, #0x18]
  0006c	e59f320c	 ldr         r3, [pc, #0x20C]
  00070	e5832000	 str         r2, [r3]

; 62   : 
; 63   : 	// Select high frequency source clock and frequency
; 64   :     srcClock = BSPGetGPTPerfHighFreqClock(&s_Frequency);

  00074	e59f01fc	 ldr         r0, [pc, #0x1FC]
  00078	eb000000	 bl          BSPGetGPTPerfHighFreqClock
  0007c	e58d001c	 str         r0, [sp, #0x1C]
  00080	e59d301c	 ldr         r3, [sp, #0x1C]
  00084	e58d3000	 str         r3, [sp]

; 65   : 	//PrcmDeviceSetSourceClocks(gptPerfDevice,1,&srcClock);
; 66   :     // Enable GPTimer for high perf/monte carlo profiling
; 67   :     EnableDeviceClocks(gptPerfDevice, TRUE);

  00088	e3a01001	 mov         r1, #1
  0008c	e59d0008	 ldr         r0, [sp, #8]
  00090	eb000000	 bl          EnableDeviceClocks

; 68   : 
; 69   : 
; 70   :     // configure performance timer
; 71   :     //---------------------------------------------------
; 72   :     // Soft reset GPTIMER and wait until finished
; 73   :     SETREG32(&g_pPerfTimer->TIOCP, SYSCONFIG_SOFTRESET);

  00094	e59f31c0	 ldr         r3, [pc, #0x1C0]
  00098	e5933000	 ldr         r3, [r3]
  0009c	e2833010	 add         r3, r3, #0x10
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e3832002	 orr         r2, r3, #2
  000a8	e59f31ac	 ldr         r3, [pc, #0x1AC]
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e2833010	 add         r3, r3, #0x10
  000b4	e5832000	 str         r2, [r3]
  000b8		 |$LN4@OALPerform|

; 74   :     while ((INREG32(&g_pPerfTimer->TISTAT) & GPTIMER_TISTAT_RESETDONE) == 0);

  000b8	e59f319c	 ldr         r3, [pc, #0x19C]
  000bc	e5933000	 ldr         r3, [r3]
  000c0	e2833014	 add         r3, r3, #0x14
  000c4	e5933000	 ldr         r3, [r3]
  000c8	e3130001	 tst         r3, #1
  000cc	1a000000	 bne         |$LN3@OALPerform|
  000d0	eafffff8	 b           |$LN4@OALPerform|
  000d4		 |$LN3@OALPerform|

; 75   :  
; 76   :     // Enable smart idle and autoidle
; 77   :     // Set clock activity - FCLK can be  switched off, 
; 78   :     // L4 interface clock is maintained during wkup.
; 79   :     OUTREG32(&g_pPerfTimer->TIOCP, 
; 80   :         0x200 | SYSCONFIG_SMARTIDLE|SYSCONFIG_ENAWAKEUP|
; 81   :             SYSCONFIG_AUTOIDLE); 

  000d4	e59f3180	 ldr         r3, [pc, #0x180]
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e2832010	 add         r2, r3, #0x10
  000e0	e3a03c02	 mov         r3, #2, 24
  000e4	e3833015	 orr         r3, r3, #0x15
  000e8	e5823000	 str         r3, [r2]

; 82   : 
; 83   :     // Select posted mode
; 84   :     SETREG32(&g_pPerfTimer->TSICR, GPTIMER_TSICR_POSTED);

  000ec	e59f3168	 ldr         r3, [pc, #0x168]
  000f0	e5933000	 ldr         r3, [r3]
  000f4	e2833040	 add         r3, r3, #0x40
  000f8	e5933000	 ldr         r3, [r3]
  000fc	e3832004	 orr         r2, r3, #4
  00100	e59f3154	 ldr         r3, [pc, #0x154]
  00104	e5933000	 ldr         r3, [r3]
  00108	e2833040	 add         r3, r3, #0x40
  0010c	e5832000	 str         r2, [r3]

; 85   : 
; 86   :     // clear match register
; 87   :     OUTREG32(&g_pPerfTimer->TMAR, 0xFFFFFFFF);

  00110	e59f3144	 ldr         r3, [pc, #0x144]
  00114	e5933000	 ldr         r3, [r3]
  00118	e2832038	 add         r2, r3, #0x38
  0011c	e3e03000	 mvn         r3, #0
  00120	e5823000	 str         r3, [r2]

; 88   :     
; 89   :     // clear interrupts
; 90   :     OUTREG32(&g_pPerfTimer->TISR, 0x00000000);

  00124	e59f3130	 ldr         r3, [pc, #0x130]
  00128	e5933000	 ldr         r3, [r3]
  0012c	e2832018	 add         r2, r3, #0x18
  00130	e3a03000	 mov         r3, #0
  00134	e5823000	 str         r3, [r2]

; 91   :     
; 92   :     // enable match interrupt
; 93   :     OUTREG32(&g_pPerfTimer->TIER, GPTIMER_TIER_MATCH);

  00138	e59f311c	 ldr         r3, [pc, #0x11C]
  0013c	e5933000	 ldr         r3, [r3]
  00140	e283201c	 add         r2, r3, #0x1C
  00144	e3a03001	 mov         r3, #1
  00148	e5823000	 str         r3, [r2]

; 94   :     
; 95   :     // enable wakeups
; 96   :     OUTREG32(&g_pPerfTimer->TWER, GPTIMER_TWER_MATCH);

  0014c	e59f3108	 ldr         r3, [pc, #0x108]
  00150	e5933000	 ldr         r3, [r3]
  00154	e2832020	 add         r2, r3, #0x20
  00158	e3a03001	 mov         r3, #1
  0015c	e5823000	 str         r3, [r2]

; 97   : 
; 98   :     // Set the load register value.
; 99   :     OUTREG32(&g_pPerfTimer->TLDR, 0x00000000);

  00160	e59f30f4	 ldr         r3, [pc, #0xF4]
  00164	e5933000	 ldr         r3, [r3]
  00168	e283202c	 add         r2, r3, #0x2C
  0016c	e3a03000	 mov         r3, #0
  00170	e5823000	 str         r3, [r2]

; 100  :  
; 101  :     // Trigger a counter reload by writing    
; 102  :     OUTREG32(&g_pPerfTimer->TTGR, 0xFFFFFFFF);

  00174	e59f30e0	 ldr         r3, [pc, #0xE0]
  00178	e5933000	 ldr         r3, [r3]
  0017c	e2832030	 add         r2, r3, #0x30
  00180	e3e03000	 mvn         r3, #0
  00184	e5823000	 str         r3, [r2]

; 103  : 
; 104  : 
; 105  : 
; 106  :     OALMSG(1, (L"****Profiler Build****\r\n"));

  00188	e59f00ec	 ldr         r0, [pc, #0xEC]
  0018c	eb000000	 bl          NKDbgPrintfW

; 107  :     OALMSG(1, (L"---High Performance Frequency is %d hz---\r\n", s_Frequency));

  00190	e59f30e0	 ldr         r3, [pc, #0xE0]
  00194	e5931000	 ldr         r1, [r3]
  00198	e59f00d4	 ldr         r0, [pc, #0xD4]
  0019c	eb000000	 bl          NKDbgPrintfW

; 108  :     
; 109  :     // build tclr mask
; 110  :     tclr |= GPTIMER_TCLR_AR;

  001a0	e59d3004	 ldr         r3, [sp, #4]
  001a4	e3833002	 orr         r3, r3, #2
  001a8	e58d3004	 str         r3, [sp, #4]

; 111  :     OUTREG32(&g_pPerfTimer->TCLR,  tclr);

  001ac	e59f30a8	 ldr         r3, [pc, #0xA8]
  001b0	e5933000	 ldr         r3, [r3]
  001b4	e2832024	 add         r2, r3, #0x24
  001b8	e59d3004	 ldr         r3, [sp, #4]
  001bc	e5823000	 str         r3, [r2]

; 112  :    
; 113  :     // Initialize high resolution timer function pointers
; 114  :     pQueryPerformanceFrequency = OALTimerQueryPerformanceFrequency;

  001c0	e59f309c	 ldr         r3, [pc, #0x9C]
  001c4	e5933000	 ldr         r3, [r3]
  001c8	e2832034	 add         r2, r3, #0x34
  001cc	e59f309c	 ldr         r3, [pc, #0x9C]
  001d0	e5823000	 str         r3, [r2]

; 115  :     pQueryPerformanceCounter = OALTimerQueryPerformanceCounter;    

  001d4	e59f3088	 ldr         r3, [pc, #0x88]
  001d8	e5933000	 ldr         r3, [r3]
  001dc	e2832030	 add         r2, r3, #0x30
  001e0	e59f3084	 ldr         r3, [pc, #0x84]
  001e4	e5823000	 str         r3, [r2]

; 116  :     g_pOemGlobal->pfnProfileTimerEnable = OEMProfileTimerEnable;

  001e8	e59f3074	 ldr         r3, [pc, #0x74]
  001ec	e5933000	 ldr         r3, [r3]
  001f0	e28320a0	 add         r2, r3, #0xA0
  001f4	e59f306c	 ldr         r3, [pc, #0x6C]
  001f8	e5823000	 str         r3, [r2]

; 117  :     g_pOemGlobal->pfnProfileTimerDisable = OEMProfileTimerDisable;

  001fc	e59f3060	 ldr         r3, [pc, #0x60]
  00200	e5933000	 ldr         r3, [r3]
  00204	e28320a4	 add         r2, r3, #0xA4
  00208	e59f3050	 ldr         r3, [pc, #0x50]
  0020c	e5823000	 str         r3, [r2]

; 118  :     
; 119  : 
; 120  :     //  Start the timer.  Also set for auto reload
; 121  :     SETREG32(&g_pPerfTimer->TCLR, GPTIMER_TCLR_ST);

  00210	e59f3044	 ldr         r3, [pc, #0x44]
  00214	e5933000	 ldr         r3, [r3]
  00218	e2833024	 add         r3, r3, #0x24
  0021c	e5933000	 ldr         r3, [r3]
  00220	e3832001	 orr         r2, r3, #1
  00224	e59f3030	 ldr         r3, [pc, #0x30]
  00228	e5933000	 ldr         r3, [r3]
  0022c	e2833024	 add         r3, r3, #0x24
  00230	e5832000	 str         r2, [r3]
  00234		 |$LN2@OALPerform|

; 122  :     while ((INREG32(&g_pPerfTimer->TWPS) & GPTIMER_TWPS_TCLR) != 0);

  00234	e59f3020	 ldr         r3, [pc, #0x20]
  00238	e5933000	 ldr         r3, [r3]
  0023c	e2833034	 add         r3, r3, #0x34
  00240	e5933000	 ldr         r3, [r3]
  00244	e3130001	 tst         r3, #1
  00248	0a000000	 beq         |$LN1@OALPerform|
  0024c	eafffff8	 b           |$LN2@OALPerform|
  00250		 |$LN1@OALPerform|
  00250		 |$LN6@OALPerform|

; 123  :     
; 124  : }

  00250	e28dd020	 add         sp, sp, #0x20
  00254	e49de004	 ldr         lr, [sp], #4
  00258	e12fff1e	 bx          lr
  0025c		 |$LN11@OALPerform|
  0025c		 |$LN12@OALPerform|
  0025c	00000000	 DCD         |g_pPerfTimer|
  00260		 |$LN13@OALPerform|
  00260	00000000	 DCD         |OEMProfileTimerDisable|
  00264		 |$LN14@OALPerform|
  00264	00000000	 DCD         |g_pOemGlobal|
  00268		 |$LN15@OALPerform|
  00268	00000000	 DCD         |OEMProfileTimerEnable|
  0026c		 |$LN16@OALPerform|
  0026c	00000000	 DCD         |OALTimerQueryPerformanceCounter|
  00270		 |$LN17@OALPerform|
  00270	00000000	 DCD         |OALTimerQueryPerformanceFrequency|
  00274		 |$LN18@OALPerform|
  00274	00000000	 DCD         |??_C@_1FI@JOODGIBI@?$AA?9?$AA?9?$AA?9?$AAH?$AAi?$AAg?$AAh?$AA?5?$AAP?$AAe?$AAr?$AAf?$AAo?$AAr?$AAm?$AAa?$AAn?$AAc?$AAe?$AA?5?$AAF?$AAr?$AAe?$AAq?$AAu?$AAe?$AAn?$AAc?$AAy?$AA?5?$AAi?$AAs@|
  00278		 |$LN19@OALPerform|
  00278	00000000	 DCD         |s_Frequency|
  0027c		 |$LN20@OALPerform|
  0027c	00000000	 DCD         |??_C@_1DC@FFGFMCFN@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AAP?$AAr?$AAo?$AAf?$AAi?$AAl?$AAe?$AAr?$AA?5?$AAB?$AAu?$AAi?$AAl?$AAd?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$AN?$AA?6?$AA?$AA@|
  00280		 |$LN21@OALPerform|
  00280	00000000	 DCD         |g_oalPerfTimerIrq|
  00284		 |$M45736|

			 ENDP  ; |OALPerformanceTimerInit|


  00008			 AREA	 |.pdata|, PDATA
|$T45755| DCD	|$LN5@OALTimerQu|
	DCD	0x40001204
; Function compile flags: /Odtp

  00284			 AREA	 |.text|, CODE, ARM

  00284		 |OALTimerQueryPerformanceFrequency| PROC

; 135  : {    

  00284		 |$LN5@OALTimerQu|
  00284	e1a0c00d	 mov         r12, sp
  00288	e92d0001	 stmdb       sp!, {r0}
  0028c	e92d5000	 stmdb       sp!, {r12, lr}
  00290	e24dd004	 sub         sp, sp, #4
  00294		 |$M45752|

; 136  :     pFrequency->QuadPart = s_Frequency;    

  00294	e59f302c	 ldr         r3, [pc, #0x2C]
  00298	e5932000	 ldr         r2, [r3]
  0029c	e59d300c	 ldr         r3, [sp, #0xC]
  002a0	e5832000	 str         r2, [r3]
  002a4	e59d200c	 ldr         r2, [sp, #0xC]
  002a8	e3a03000	 mov         r3, #0
  002ac	e5823004	 str         r3, [r2, #4]

; 137  :     return TRUE;

  002b0	e3a03001	 mov         r3, #1
  002b4	e58d3000	 str         r3, [sp]

; 138  : }

  002b8	e59d0000	 ldr         r0, [sp]
  002bc	e28dd004	 add         sp, sp, #4
  002c0	e89d6000	 ldmia       sp, {sp, lr}
  002c4	e12fff1e	 bx          lr
  002c8		 |$LN6@OALTimerQu|
  002c8		 |$LN7@OALTimerQu|
  002c8	00000000	 DCD         |s_Frequency|
  002cc		 |$M45753|

			 ENDP  ; |OALTimerQueryPerformanceFrequency|

	IMPORT	|INTERRUPTS_ENABLE|

  00010			 AREA	 |.pdata|, PDATA
|$T45763| DCD	|$LN6@OALTimerQu@2|
	DCD	0x40002d04
; Function compile flags: /Odtp

  002cc			 AREA	 |.text|, CODE, ARM

  002cc		 |OALTimerQueryPerformanceCounter| PROC

; 149  : {

  002cc		 |$LN6@OALTimerQu@2|
  002cc	e1a0c00d	 mov         r12, sp
  002d0	e92d0001	 stmdb       sp!, {r0}
  002d4	e92d5000	 stmdb       sp!, {r12, lr}
  002d8	e24dd010	 sub         sp, sp, #0x10
  002dc		 |$M45760|

; 150  :     static LARGE_INTEGER PreviousValue = {0, 0};
; 151  :     DWORD CurrentValue;
; 152  :     BOOL bInterruptsEnabled;
; 153  :     
; 154  :     bInterruptsEnabled = INTERRUPTS_ENABLE(FALSE);

  002dc	e3a00000	 mov         r0, #0
  002e0	eb000000	 bl          INTERRUPTS_ENABLE
  002e4	e58d000c	 str         r0, [sp, #0xC]
  002e8	e59d300c	 ldr         r3, [sp, #0xC]
  002ec	e58d3004	 str         r3, [sp, #4]

; 155  : 
; 156  :     CurrentValue = INREG32(&g_pPerfTimer->TCRR);

  002f0	e59f3084	 ldr         r3, [pc, #0x84]
  002f4	e5933000	 ldr         r3, [r3]
  002f8	e2833028	 add         r3, r3, #0x28
  002fc	e5933000	 ldr         r3, [r3]
  00300	e58d3000	 str         r3, [sp]

; 157  :     if (CurrentValue < PreviousValue.LowPart)

  00304	e59d2000	 ldr         r2, [sp]
  00308	e59f3068	 ldr         r3, [pc, #0x68]
  0030c	e5933000	 ldr         r3, [r3]
  00310	e1520003	 cmp         r2, r3
  00314	2a000004	 bcs         |$LN1@OALTimerQu@2|

; 158  :     {
; 159  :         // rollover, increment upper 32 bits
; 160  :         PreviousValue.HighPart++;

  00318	e59f3058	 ldr         r3, [pc, #0x58]
  0031c	e5933004	 ldr         r3, [r3, #4]
  00320	e2832001	 add         r2, r3, #1
  00324	e59f304c	 ldr         r3, [pc, #0x4C]
  00328	e5832004	 str         r2, [r3, #4]
  0032c		 |$LN1@OALTimerQu@2|

; 161  :     }
; 162  :     PreviousValue.LowPart = CurrentValue;

  0032c	e59d2000	 ldr         r2, [sp]
  00330	e59f3040	 ldr         r3, [pc, #0x40]
  00334	e5832000	 str         r2, [r3]

; 163  :     pCounter->QuadPart = PreviousValue.QuadPart;            

  00338	e59f3038	 ldr         r3, [pc, #0x38]
  0033c	e5932000	 ldr         r2, [r3]
  00340	e59d3018	 ldr         r3, [sp, #0x18]
  00344	e5832000	 str         r2, [r3]
  00348	e59f3028	 ldr         r3, [pc, #0x28]
  0034c	e5932004	 ldr         r2, [r3, #4]
  00350	e59d3018	 ldr         r3, [sp, #0x18]
  00354	e5832004	 str         r2, [r3, #4]

; 164  : 
; 165  :     INTERRUPTS_ENABLE(bInterruptsEnabled);

  00358	e59d0004	 ldr         r0, [sp, #4]
  0035c	eb000000	 bl          INTERRUPTS_ENABLE

; 166  : 
; 167  :     return TRUE;

  00360	e3a03001	 mov         r3, #1
  00364	e58d3008	 str         r3, [sp, #8]

; 168  : }

  00368	e59d0008	 ldr         r0, [sp, #8]
  0036c	e28dd010	 add         sp, sp, #0x10
  00370	e89d6000	 ldmia       sp, {sp, lr}
  00374	e12fff1e	 bx          lr
  00378		 |$LN7@OALTimerQu@2|
  00378		 |$LN8@OALTimerQu@2|
  00378	00000000	 DCD         |?PreviousValue@?1??OALTimerQueryPerformanceCounter@@9@9|
  0037c		 |$LN9@OALTimerQu@2|
  0037c	00000000	 DCD         |g_pPerfTimer|
  00380		 |$M45761|

			 ENDP  ; |OALTimerQueryPerformanceCounter|

	IMPORT	|OALIntrEnableIrqs|
	IMPORT	|__rt_udiv64by64|

  00018			 AREA	 |.pdata|, PDATA
|$T45772| DCD	|$LN7@OEMProfile|
	DCD	0x40004b04
; Function compile flags: /Odtp

  00380			 AREA	 |.text|, CODE, ARM

  00380		 |OEMProfileTimerEnable| PROC

; 174  : {

  00380		 |$LN7@OEMProfile|
  00380	e1a0c00d	 mov         r12, sp
  00384	e92d0001	 stmdb       sp!, {r0}
  00388	e92d5000	 stmdb       sp!, {r12, lr}
  0038c	e24dd01c	 sub         sp, sp, #0x1C
  00390		 |$M45769|

; 175  :     DWORD tcrr;
; 176  :     UINT64 val;
; 177  :     BOOL enabled;
; 178  :     
; 179  :     
; 180  :     // calculate interrupt intervals   
; 181  :     val = (UINT64) dwUSecInterval * (UINT64)s_Frequency;

  00390	e59d2024	 ldr         r2, [sp, #0x24]
  00394	e59f310c	 ldr         r3, [pc, #0x10C]
  00398	e5933000	 ldr         r3, [r3]
  0039c	e58d2010	 str         r2, [sp, #0x10]
  003a0	e58d3014	 str         r3, [sp, #0x14]
  003a4	e59d1010	 ldr         r1, [sp, #0x10]
  003a8	e59d3014	 ldr         r3, [sp, #0x14]
  003ac	e0832391	 umull       r2, r3, r1, r3
  003b0	e58d2004	 str         r2, [sp, #4]
  003b4	e58d3008	 str         r3, [sp, #8]

; 182  :     val = val / 1000000;

  003b8	e59d0004	 ldr         r0, [sp, #4]
  003bc	e59d1008	 ldr         r1, [sp, #8]
  003c0	e3a0293d	 mov         r2, #0x3D, 18
  003c4	e3822d09	 orr         r2, r2, #9, 26
  003c8	e3a03000	 mov         r3, #0
  003cc	eb000000	 bl          __rt_udiv64by64
  003d0	e58d0004	 str         r0, [sp, #4]
  003d4	e58d1008	 str         r1, [sp, #8]

; 183  :     g_oalProfilerIncrement = (UINT32) val;

  003d8	e59d2004	 ldr         r2, [sp, #4]
  003dc	e59f30c0	 ldr         r3, [pc, #0xC0]
  003e0	e5832000	 str         r2, [r3]

; 184  : 
; 185  :     // Following code should not be interrupted
; 186  :     enabled = INTERRUPTS_ENABLE(FALSE);

  003e4	e3a00000	 mov         r0, #0
  003e8	eb000000	 bl          INTERRUPTS_ENABLE
  003ec	e58d0018	 str         r0, [sp, #0x18]
  003f0	e59d3018	 ldr         r3, [sp, #0x18]
  003f4	e58d300c	 str         r3, [sp, #0xC]

; 187  :     
; 188  :     // set interrupts at requested intervals
; 189  :     tcrr = INREG32(&g_pPerfTimer->TCRR) + g_oalProfilerIncrement;

  003f8	e59f309c	 ldr         r3, [pc, #0x9C]
  003fc	e5933000	 ldr         r3, [r3]
  00400	e2833028	 add         r3, r3, #0x28
  00404	e5932000	 ldr         r2, [r3]
  00408	e59f3094	 ldr         r3, [pc, #0x94]
  0040c	e5933000	 ldr         r3, [r3]
  00410	e0823003	 add         r3, r2, r3
  00414	e58d3000	 str         r3, [sp]

; 190  :     OUTREG32(&g_pPerfTimer->TMAR, tcrr);

  00418	e59f307c	 ldr         r3, [pc, #0x7C]
  0041c	e5933000	 ldr         r3, [r3]
  00420	e2832038	 add         r2, r3, #0x38
  00424	e59d3000	 ldr         r3, [sp]
  00428	e5823000	 str         r3, [r2]
  0042c		 |$LN2@OEMProfile|

; 191  :     while ((INREG32(&g_pPerfTimer->TWPS) & GPTIMER_TWPS_TMAR) != 0);

  0042c	e59f3068	 ldr         r3, [pc, #0x68]
  00430	e5933000	 ldr         r3, [r3]
  00434	e2833034	 add         r3, r3, #0x34
  00438	e5933000	 ldr         r3, [r3]
  0043c	e3130010	 tst         r3, #0x10
  00440	0a000000	 beq         |$LN1@OEMProfile|
  00444	eafffff8	 b           |$LN2@OEMProfile|
  00448		 |$LN1@OEMProfile|

; 192  :     
; 193  :     // enable high perf interrupt
; 194  :     g_oalProfilerEnabled = TRUE;

  00448	e59f2050	 ldr         r2, [pc, #0x50]
  0044c	e3a03001	 mov         r3, #1
  00450	e5823000	 str         r3, [r2]

; 195  :     SETREG32(&g_pPerfTimer->TCLR, GPTIMER_TCLR_CE);

  00454	e59f3040	 ldr         r3, [pc, #0x40]
  00458	e5933000	 ldr         r3, [r3]
  0045c	e2833024	 add         r3, r3, #0x24
  00460	e5933000	 ldr         r3, [r3]
  00464	e3832040	 orr         r2, r3, #0x40
  00468	e59f302c	 ldr         r3, [pc, #0x2C]
  0046c	e5933000	 ldr         r3, [r3]
  00470	e2833024	 add         r3, r3, #0x24
  00474	e5832000	 str         r2, [r3]

; 196  : 
; 197  :     // Enable profiling interrupt
; 198  :     OALIntrEnableIrqs(1, &g_oalPerfTimerIrq);

  00478	e59f1018	 ldr         r1, [pc, #0x18]
  0047c	e3a00001	 mov         r0, #1
  00480	eb000000	 bl          OALIntrEnableIrqs

; 199  : 
; 200  :     // Enable interrupts
; 201  :     INTERRUPTS_ENABLE(enabled);

  00484	e59d000c	 ldr         r0, [sp, #0xC]
  00488	eb000000	 bl          INTERRUPTS_ENABLE

; 202  :     
; 203  : }

  0048c	e28dd01c	 add         sp, sp, #0x1C
  00490	e89d6000	 ldmia       sp, {sp, lr}
  00494	e12fff1e	 bx          lr
  00498		 |$LN8@OEMProfile|
  00498		 |$LN9@OEMProfile|
  00498	00000000	 DCD         |g_oalPerfTimerIrq|
  0049c		 |$LN10@OEMProfile|
  0049c	00000000	 DCD         |g_pPerfTimer|
  004a0		 |$LN11@OEMProfile|
  004a0	00000000	 DCD         |g_oalProfilerEnabled|
  004a4		 |$LN12@OEMProfile|
  004a4	00000000	 DCD         |g_oalProfilerIncrement|
  004a8		 |$LN13@OEMProfile|
  004a8	00000000	 DCD         |s_Frequency|
  004ac		 |$M45770|

			 ENDP  ; |OEMProfileTimerEnable|

	IMPORT	|OALIntrDisableIrqs|

  00020			 AREA	 |.pdata|, PDATA
|$T45783| DCD	|$LN6@OEMProfile@2|
	DCD	0x40002402
; Function compile flags: /Odtp

  004ac			 AREA	 |.text|, CODE, ARM

  004ac		 |OEMProfileTimerDisable| PROC

; 208  : {

  004ac		 |$LN6@OEMProfile@2|
  004ac	e52de004	 str         lr, [sp, #-4]!
  004b0	e24dd008	 sub         sp, sp, #8
  004b4		 |$M45780|

; 209  :     BOOL enabled;
; 210  :     
; 211  :     if (g_oalProfilerEnabled == FALSE) return;

  004b4	e59f3078	 ldr         r3, [pc, #0x78]
  004b8	e5933000	 ldr         r3, [r3]
  004bc	e3530000	 cmp         r3, #0
  004c0	1a000000	 bne         |$LN1@OEMProfile@2|
  004c4	ea000016	 b           |$LN2@OEMProfile@2|
  004c8		 |$LN1@OEMProfile@2|

; 212  : 
; 213  :     // Following code should not be interrupted
; 214  :     enabled = INTERRUPTS_ENABLE(FALSE);

  004c8	e3a00000	 mov         r0, #0
  004cc	eb000000	 bl          INTERRUPTS_ENABLE
  004d0	e58d0004	 str         r0, [sp, #4]
  004d4	e59d3004	 ldr         r3, [sp, #4]
  004d8	e58d3000	 str         r3, [sp]

; 215  : 
; 216  :     // Disable the profile timer interrupt
; 217  :     OALIntrDisableIrqs(1, &g_oalPerfTimerIrq);    

  004dc	e59f1054	 ldr         r1, [pc, #0x54]
  004e0	e3a00001	 mov         r0, #1
  004e4	eb000000	 bl          OALIntrDisableIrqs

; 218  : 
; 219  :     // Reset flag
; 220  :     g_oalProfilerEnabled = FALSE;

  004e8	e59f2044	 ldr         r2, [pc, #0x44]
  004ec	e3a03000	 mov         r3, #0
  004f0	e5823000	 str         r3, [r2]

; 221  :     CLRREG32(&g_pPerfTimer->TCLR, GPTIMER_TCLR_CE);

  004f4	e59f3034	 ldr         r3, [pc, #0x34]
  004f8	e5933000	 ldr         r3, [r3]
  004fc	e2833024	 add         r3, r3, #0x24
  00500	e5932000	 ldr         r2, [r3]
  00504	e3e03040	 mvn         r3, #0x40
  00508	e0022003	 and         r2, r2, r3
  0050c	e59f301c	 ldr         r3, [pc, #0x1C]
  00510	e5933000	 ldr         r3, [r3]
  00514	e2833024	 add         r3, r3, #0x24
  00518	e5832000	 str         r2, [r3]

; 222  : 
; 223  :     // Enable interrupts
; 224  :     INTERRUPTS_ENABLE(enabled);

  0051c	e59d0000	 ldr         r0, [sp]
  00520	eb000000	 bl          INTERRUPTS_ENABLE
  00524		 |$LN2@OEMProfile@2|

; 225  : }

  00524	e28dd008	 add         sp, sp, #8
  00528	e49de004	 ldr         lr, [sp], #4
  0052c	e12fff1e	 bx          lr
  00530		 |$LN7@OEMProfile@2|
  00530		 |$LN8@OEMProfile@2|
  00530	00000000	 DCD         |g_pPerfTimer|
  00534		 |$LN9@OEMProfile@2|
  00534	00000000	 DCD         |g_oalProfilerEnabled|
  00538		 |$LN10@OEMProfile@2|
  00538	00000000	 DCD         |g_oalPerfTimerIrq|
  0053c		 |$M45781|

			 ENDP  ; |OEMProfileTimerDisable|

	EXPORT	|OALProfileTimerHit|
	IMPORT	|OALIntrDoneIrqs|
	IMPORT	|ProfilerHit|

  00028			 AREA	 |.pdata|, PDATA
|$T45792| DCD	|$LN5@OALProfile|
	DCD	0x40002104
; Function compile flags: /Odtp

  0053c			 AREA	 |.text|, CODE, ARM

  0053c		 |OALProfileTimerHit| PROC

; 233  : {

  0053c		 |$LN5@OALProfile|
  0053c	e1a0c00d	 mov         r12, sp
  00540	e92d0001	 stmdb       sp!, {r0}
  00544	e92d5000	 stmdb       sp!, {r12, lr}
  00548	e24dd004	 sub         sp, sp, #4
  0054c		 |$M45789|

; 234  :     UINT32  tcrr;
; 235  : 
; 236  :     //  Call ProfileHit
; 237  :     ProfilerHit(ra);

  0054c	e59d000c	 ldr         r0, [sp, #0xC]
  00550	eb000000	 bl          ProfilerHit

; 238  : 
; 239  :     // get current time
; 240  :     tcrr = INREG32(&g_pPerfTimer->TCRR);

  00554	e59f305c	 ldr         r3, [pc, #0x5C]
  00558	e5933000	 ldr         r3, [r3]
  0055c	e2833028	 add         r3, r3, #0x28
  00560	e5933000	 ldr         r3, [r3]
  00564	e58d3000	 str         r3, [sp]

; 241  :     
; 242  :     // clear interrupt
; 243  :     OUTREG32(&g_pPerfTimer->TISR, 
; 244  :         GPTIMER_TISR_MAT | GPTIMER_TISR_OVF | GPTIMER_TISR_TCAR
; 245  :         );

  00568	e59f3048	 ldr         r3, [pc, #0x48]
  0056c	e5933000	 ldr         r3, [r3]
  00570	e2832018	 add         r2, r3, #0x18
  00574	e3a03007	 mov         r3, #7
  00578	e5823000	 str         r3, [r2]

; 246  : 
; 247  :     // setup for next interrupt        
; 248  :     OUTREG32(&g_pPerfTimer->TMAR, tcrr + g_oalProfilerIncrement);

  0057c	e59d2000	 ldr         r2, [sp]
  00580	e59f3034	 ldr         r3, [pc, #0x34]
  00584	e5933000	 ldr         r3, [r3]
  00588	e0822003	 add         r2, r2, r3
  0058c	e59f3024	 ldr         r3, [pc, #0x24]
  00590	e5933000	 ldr         r3, [r3]
  00594	e2833038	 add         r3, r3, #0x38
  00598	e5832000	 str         r2, [r3]

; 249  : 
; 250  :     // clear interrupt status
; 251  :     OALIntrDoneIrqs(1, &g_oalPerfTimerIrq);

  0059c	e59f1010	 ldr         r1, [pc, #0x10]
  005a0	e3a00001	 mov         r0, #1
  005a4	eb000000	 bl          OALIntrDoneIrqs

; 252  : }

  005a8	e28dd004	 add         sp, sp, #4
  005ac	e89d6000	 ldmia       sp, {sp, lr}
  005b0	e12fff1e	 bx          lr
  005b4		 |$LN6@OALProfile|
  005b4		 |$LN7@OALProfile|
  005b4	00000000	 DCD         |g_oalPerfTimerIrq|
  005b8		 |$LN8@OALProfile|
  005b8	00000000	 DCD         |g_pPerfTimer|
  005bc		 |$LN9@OALProfile|
  005bc	00000000	 DCD         |g_oalProfilerIncrement|
  005c0		 |$M45790|

			 ENDP  ; |OALProfileTimerHit|

	END
