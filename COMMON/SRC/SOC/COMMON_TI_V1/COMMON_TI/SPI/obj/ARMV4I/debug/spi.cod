; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SPI\spi.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1CA@CCIKILKA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19OBNDINH@?$AAP?$AAo?$AAr?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DEVICE_IFC_SPI_GUID| [ DATA ]
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@CCIKILKA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "A"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "A", 0x0, "s", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "T", 0x0
	DCB	"i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19OBNDINH@?$AAP?$AAo?$AAr?$AAt?$AA?$AA@| DCB "P", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "S", 0x0, "P", 0x0, "I", 0x0, 0x0, 0x0
	%	56
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"D", 0x0, "M", 0x0, "A", 0x0, 0x0, 0x0
	%	56
	DCB	"D", 0x0, "V", 0x0, "F", 0x0, "S", 0x0, 0x0, 0x0
	%	54
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|DEVICE_IFC_SPI_GUID| DCD 0x2e559225
	DCW	0xc95e
	DCW	0x4300
	DCB	0x86
	DCB	0xe9
	DCB	0x6a
	DCB	0x5c
	DCB	0xbc
	DCB	0x7
	DCB	0x32
	DCB	0x8f
|g_deviceRegParams| DCD |??_C@_19OBNDINH@?$AAP?$AAo?$AAr?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x38
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x28
	DCD	0x4
	DCD	0x1f4
	DCD	|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x2c
	DCD	0x4
	DCD	0x4000
	DCD	|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x30
	DCD	0x4
	DCD	0x4000
	DCD	|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x54
	DCD	0x208
	DCD	0x0
	DCD	|??_C@_1CA@CCIKILKA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x270
	DCD	0x4
	DCD	0x5
	EXPORT	|??_C@_1DA@EIFGEJEC@?$AA?9?$AAC?$AAh?$AAe?$AAc?$AAk?$AAA?$AAn?$AAd?$AAH?$AAa?$AAl?$AAt?$AAA?$AAl?$AAl?$AAD?$AAm?$AAa?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SetEvent|
	EXPORT	|??_C@_1EE@GGJKFLFC@?$AA?$CL?$AAC?$AAh?$AAe?$AAc?$AAk?$AAA?$AAn?$AAd?$AAH?$AAa?$AAl?$AAt?$AAA?$AAl?$AAl?$AAD?$AAm?$AAa?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@| [ DATA ] ; `string'
	EXPORT	|CheckAndHaltAllDma|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|
	IMPORT	|NKDbgPrintfW|

  00000			 AREA	 |.pdata|, PDATA
|$T45772| DCD	|$LN11@CheckAndHa|
	DCD	0x40003d04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@EIFGEJEC@?$AA?9?$AAC?$AAh?$AAe?$AAc?$AAk?$AAA?$AAn?$AAd?$AAH?$AAa?$AAl?$AAt?$AAA?$AAl?$AAl?$AAD?$AAm?$AAa?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "C", 0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k", 0x0, "A"
	DCB	0x0, "n", 0x0, "d", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EE@GGJKFLFC@?$AA?$CL?$AAC?$AAh?$AAe?$AAc?$AAk?$AAA?$AAn?$AAd?$AAH?$AAa?$AAl?$AAt?$AAA?$AAl?$AAl?$AAD?$AAm?$AAa?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@| DCB "+"
	DCB	0x0, "C", 0x0, "h", 0x0, "e", 0x0, "c", 0x0, "k", 0x0, "A"
	DCB	0x0, "n", 0x0, "d", 0x0, "H", 0x0, "a", 0x0, "l", 0x0, "t"
	DCB	0x0, "A", 0x0, "l", 0x0, "l", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CheckAndHaltAllDma| PROC

; 93   : {

  00000		 |$LN11@CheckAndHa|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M45769|

; 94   :     SPI_DEVICE *pDevice = pInstance->pDevice;

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 95   :     
; 96   :     DEBUGMSG(ZONE_FUNCTION, (
; 97   :         L"+CheckAndHaltAllDma(0x%08x, %d)\r\n", 
; 98   :         pInstance, bHalt
; 99   :         ));

  00020	e59f30c4	 ldr         r3, [pc, #0xC4]
  00024	e5933440	 ldr         r3, [r3, #0x440]
  00028	e3130004	 tst         r3, #4
  0002c	0a000006	 beq         |$LN5@CheckAndHa|
  00030	e59d2018	 ldr         r2, [sp, #0x18]
  00034	e59d1014	 ldr         r1, [sp, #0x14]
  00038	e59f00b0	 ldr         r0, [pc, #0xB0]
  0003c	eb000000	 bl          NKDbgPrintfW
  00040	e3a03001	 mov         r3, #1
  00044	e58d3004	 str         r3, [sp, #4]
  00048	ea000001	 b           |$LN6@CheckAndHa|
  0004c		 |$LN5@CheckAndHa|
  0004c	e3a03000	 mov         r3, #0
  00050	e58d3004	 str         r3, [sp, #4]
  00054		 |$LN6@CheckAndHa|

; 100  : 
; 101  :     EnterCriticalSection(&pDevice->csDVFS);

  00054	e59d3000	 ldr         r3, [sp]
  00058	e2830f97	 add         r0, r3, #0x97, 30
  0005c	eb000000	 bl          EnterCriticalSection

; 102  : 
; 103  :     if (pDevice->nActiveDmaCount == 0 && bHalt == TRUE)

  00060	e59d3000	 ldr         r3, [sp]
  00064	e2833048	 add         r3, r3, #0x48
  00068	e5933000	 ldr         r3, [r3]
  0006c	e3530000	 cmp         r3, #0
  00070	1a00000b	 bne         |$LN2@CheckAndHa|
  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e3530001	 cmp         r3, #1
  0007c	1a000008	 bne         |$LN2@CheckAndHa|

; 104  :         {
; 105  :         if (pDevice->hDVFSAsyncEvent != NULL)

  00080	e59d3000	 ldr         r3, [sp]
  00084	e2833050	 add         r3, r3, #0x50
  00088	e5933000	 ldr         r3, [r3]
  0008c	e3530000	 cmp         r3, #0
  00090	0a000003	 beq         |$LN1@CheckAndHa|

; 106  :             {
; 107  :             SetEvent(pDevice->hDVFSAsyncEvent);

  00094	e59d3000	 ldr         r3, [sp]
  00098	e2833050	 add         r3, r3, #0x50
  0009c	e5930000	 ldr         r0, [r3]
  000a0	eb000000	 bl          SetEvent
  000a4		 |$LN1@CheckAndHa|
  000a4		 |$LN2@CheckAndHa|

; 108  :             }
; 109  :         }
; 110  :     
; 111  :     LeaveCriticalSection(&pDevice->csDVFS);

  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e2830f97	 add         r0, r3, #0x97, 30
  000ac	eb000000	 bl          LeaveCriticalSection

; 112  : 
; 113  :     DEBUGMSG(ZONE_FUNCTION, (L"-CheckAndHaltAllDma()\r\n"));

  000b0	e59f3034	 ldr         r3, [pc, #0x34]
  000b4	e5933440	 ldr         r3, [r3, #0x440]
  000b8	e3130004	 tst         r3, #4
  000bc	0a000004	 beq         |$LN7@CheckAndHa|
  000c0	e59f0020	 ldr         r0, [pc, #0x20]
  000c4	eb000000	 bl          NKDbgPrintfW
  000c8	e3a03001	 mov         r3, #1
  000cc	e58d3008	 str         r3, [sp, #8]
  000d0	ea000001	 b           |$LN8@CheckAndHa|
  000d4		 |$LN7@CheckAndHa|
  000d4	e3a03000	 mov         r3, #0
  000d8	e58d3008	 str         r3, [sp, #8]
  000dc		 |$LN8@CheckAndHa|

; 114  : }

  000dc	e28dd00c	 add         sp, sp, #0xC
  000e0	e89d6000	 ldmia       sp, {sp, lr}
  000e4	e12fff1e	 bx          lr
  000e8		 |$LN12@CheckAndHa|
  000e8		 |$LN13@CheckAndHa|
  000e8	00000000	 DCD         |??_C@_1DA@EIFGEJEC@?$AA?9?$AAC?$AAh?$AAe?$AAc?$AAk?$AAA?$AAn?$AAd?$AAH?$AAa?$AAl?$AAt?$AAA?$AAl?$AAl?$AAD?$AAm?$AAa?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  000ec		 |$LN14@CheckAndHa|
  000ec	00000000	 DCD         |dpCurSettings|
  000f0		 |$LN15@CheckAndHa|
  000f0	00000000	 DCD         |??_C@_1EE@GGJKFLFC@?$AA?$CL?$AAC?$AAh?$AAe?$AAc?$AAk?$AAA?$AAn?$AAd?$AAH?$AAa?$AAl?$AAt?$AAA?$AAl?$AAl?$AAD?$AAm?$AAa?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN@|
  000f4		 |$M45770|

			 ENDP  ; |CheckAndHaltAllDma|

	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45782| DCD	|$LN5@SetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M45779|

; 236  : 	return EventModify(h,EVENT_SET);

  00010	e3a01003	 mov         r1, #3
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 237  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M45780|

			 ENDP  ; |SetEvent|

	EXPORT	|??_C@_1CM@ODAHFJB@?$AA?9?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DI@FAAKOFEG@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|PreDmaActivation|
	IMPORT	|InterlockedIncrement|
	IMPORT	|WaitForSingleObject|

  00008			 AREA	 |.pdata|, PDATA
|$T45793| DCD	|$LN10@PreDmaActi|
	DCD	0x40003e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@ODAHFJB@?$AA?9?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "(", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DI@FAAKOFEG@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "r", 0x0, "e", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "A", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "a"
	DCB	0x0, "t", 0x0, "i", 0x0, "o", 0x0, "n", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  000f4			 AREA	 |.text|, CODE, ARM

  000f4		 |PreDmaActivation| PROC

; 125  : {

  000f4		 |$LN10@PreDmaActi|
  000f4	e1a0c00d	 mov         r12, sp
  000f8	e92d0001	 stmdb       sp!, {r0}
  000fc	e92d5000	 stmdb       sp!, {r12, lr}
  00100	e24dd00c	 sub         sp, sp, #0xC
  00104		 |$M45790|

; 126  :     SPI_DEVICE *pDevice = pInstance->pDevice;

  00104	e59d3014	 ldr         r3, [sp, #0x14]
  00108	e2833004	 add         r3, r3, #4
  0010c	e5933000	 ldr         r3, [r3]
  00110	e58d3000	 str         r3, [sp]

; 127  :     
; 128  :     DEBUGMSG(ZONE_FUNCTION, (
; 129  :         L"+PreDmaActivation(0x%08x)\r\n", pInstance
; 130  :     ));

  00114	e59f30c8	 ldr         r3, [pc, #0xC8]
  00118	e5933440	 ldr         r3, [r3, #0x440]
  0011c	e3130004	 tst         r3, #4
  00120	0a000005	 beq         |$LN4@PreDmaActi|
  00124	e59d1014	 ldr         r1, [sp, #0x14]
  00128	e59f00b8	 ldr         r0, [pc, #0xB8]
  0012c	eb000000	 bl          NKDbgPrintfW
  00130	e3a03001	 mov         r3, #1
  00134	e58d3004	 str         r3, [sp, #4]
  00138	ea000001	 b           |$LN5@PreDmaActi|
  0013c		 |$LN4@PreDmaActi|
  0013c	e3a03000	 mov         r3, #0
  00140	e58d3004	 str         r3, [sp, #4]
  00144		 |$LN5@PreDmaActi|

; 131  :     
; 132  :     // this operation needs to be atomic to handle a corner case
; 133  :     EnterCriticalSection(&pDevice->csDVFS);

  00144	e59d3000	 ldr         r3, [sp]
  00148	e2830f97	 add         r0, r3, #0x97, 30
  0014c	eb000000	 bl          EnterCriticalSection

; 134  :     
; 135  :     // check and wait for DVFS activity to complete
; 136  :     if (pDevice->bDVFSActive == TRUE)

  00150	e59d3000	 ldr         r3, [sp]
  00154	e2833044	 add         r3, r3, #0x44
  00158	e5933000	 ldr         r3, [r3]
  0015c	e3530001	 cmp         r3, #1
  00160	1a00000a	 bne         |$LN1@PreDmaActi|

; 137  :         {
; 138  :         // avoid deadlock's while waiting for dvfs transitions
; 139  :         //
; 140  :         LeaveCriticalSection(&pDevice->csDVFS);

  00164	e59d3000	 ldr         r3, [sp]
  00168	e2830f97	 add         r0, r3, #0x97, 30
  0016c	eb000000	 bl          LeaveCriticalSection

; 141  :         WaitForSingleObject(pDevice->hDVFSInactiveEvent, INFINITE);

  00170	e3e01000	 mvn         r1, #0
  00174	e59d3000	 ldr         r3, [sp]
  00178	e283304c	 add         r3, r3, #0x4C
  0017c	e5930000	 ldr         r0, [r3]
  00180	eb000000	 bl          WaitForSingleObject

; 142  :         EnterCriticalSection(&pDevice->csDVFS);

  00184	e59d3000	 ldr         r3, [sp]
  00188	e2830f97	 add         r0, r3, #0x97, 30
  0018c	eb000000	 bl          EnterCriticalSection
  00190		 |$LN1@PreDmaActi|

; 143  :         }
; 144  :     InterlockedIncrement(&pDevice->nActiveDmaCount);

  00190	e59d3000	 ldr         r3, [sp]
  00194	e2830048	 add         r0, r3, #0x48
  00198	eb000000	 bl          InterlockedIncrement

; 145  : 
; 146  :     LeaveCriticalSection(&pDevice->csDVFS);

  0019c	e59d3000	 ldr         r3, [sp]
  001a0	e2830f97	 add         r0, r3, #0x97, 30
  001a4	eb000000	 bl          LeaveCriticalSection

; 147  : 
; 148  :     DEBUGMSG(ZONE_FUNCTION, (
; 149  :         L"-PreDmaActivation()\r\n"
; 150  :         ));

  001a8	e59f3034	 ldr         r3, [pc, #0x34]
  001ac	e5933440	 ldr         r3, [r3, #0x440]
  001b0	e3130004	 tst         r3, #4
  001b4	0a000004	 beq         |$LN6@PreDmaActi|
  001b8	e59f0020	 ldr         r0, [pc, #0x20]
  001bc	eb000000	 bl          NKDbgPrintfW
  001c0	e3a03001	 mov         r3, #1
  001c4	e58d3008	 str         r3, [sp, #8]
  001c8	ea000001	 b           |$LN7@PreDmaActi|
  001cc		 |$LN6@PreDmaActi|
  001cc	e3a03000	 mov         r3, #0
  001d0	e58d3008	 str         r3, [sp, #8]
  001d4		 |$LN7@PreDmaActi|

; 151  : }

  001d4	e28dd00c	 add         sp, sp, #0xC
  001d8	e89d6000	 ldmia       sp, {sp, lr}
  001dc	e12fff1e	 bx          lr
  001e0		 |$LN11@PreDmaActi|
  001e0		 |$LN12@PreDmaActi|
  001e0	00000000	 DCD         |??_C@_1CM@ODAHFJB@?$AA?9?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001e4		 |$LN13@PreDmaActi|
  001e4	00000000	 DCD         |dpCurSettings|
  001e8		 |$LN14@PreDmaActi|
  001e8	00000000	 DCD         |??_C@_1DI@FAAKOFEG@?$AA?$CL?$AAP?$AAr?$AAe?$AAD?$AAm?$AAa?$AAA?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  001ec		 |$M45791|

			 ENDP  ; |PreDmaActivation|

	EXPORT	|??_C@_1DC@JNNFMLIE@?$AA?9?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DO@KEFLLHLB@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|PostDmaDeactivation|
	IMPORT	|InterlockedDecrement|

  00010			 AREA	 |.pdata|, PDATA
|$T45808| DCD	|$LN13@PostDmaDea|
	DCD	0x40005404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@JNNFMLIE@?$AA?9?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "P", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "D", 0x0, "e", 0x0, "a", 0x0, "c", 0x0, "t"
	DCB	0x0, "i", 0x0, "v", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "(", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "S", 0x0, "P"
	DCB	0x0, "I", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, ".", 0x0, "c", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DO@KEFLLHLB@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "P", 0x0, "o", 0x0, "s", 0x0, "t", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "D", 0x0, "e", 0x0, "a", 0x0, "c", 0x0, "t"
	DCB	0x0, "i", 0x0, "v", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "o"
	DCB	0x0, "n", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  001ec			 AREA	 |.text|, CODE, ARM

  001ec		 |PostDmaDeactivation| PROC

; 161  : {

  001ec		 |$LN13@PostDmaDea|
  001ec	e1a0c00d	 mov         r12, sp
  001f0	e92d0001	 stmdb       sp!, {r0}
  001f4	e92d5000	 stmdb       sp!, {r12, lr}
  001f8	e24dd010	 sub         sp, sp, #0x10
  001fc		 |$M45805|

; 162  :     SPI_DEVICE *pDevice = pInstance->pDevice;

  001fc	e59d3018	 ldr         r3, [sp, #0x18]
  00200	e2833004	 add         r3, r3, #4
  00204	e5933000	 ldr         r3, [r3]
  00208	e58d3000	 str         r3, [sp]

; 163  :     
; 164  :     DEBUGMSG(ZONE_FUNCTION, (
; 165  :         L"+PostDmaDeactivation(0x%08x)\r\n", pInstance
; 166  :     ));

  0020c	e59f3114	 ldr         r3, [pc, #0x114]
  00210	e5933440	 ldr         r3, [r3, #0x440]
  00214	e3130004	 tst         r3, #4
  00218	0a000005	 beq         |$LN5@PostDmaDea|
  0021c	e59d1018	 ldr         r1, [sp, #0x18]
  00220	e59f0110	 ldr         r0, [pc, #0x110]
  00224	eb000000	 bl          NKDbgPrintfW
  00228	e3a03001	 mov         r3, #1
  0022c	e58d3004	 str         r3, [sp, #4]
  00230	ea000001	 b           |$LN6@PostDmaDea|
  00234		 |$LN5@PostDmaDea|
  00234	e3a03000	 mov         r3, #0
  00238	e58d3004	 str         r3, [sp, #4]
  0023c		 |$LN6@PostDmaDea|

; 167  :     
; 168  :     ASSERT(pDevice->nActiveDmaCount > 0);

  0023c	e59d3000	 ldr         r3, [sp]
  00240	e2833048	 add         r3, r3, #0x48
  00244	e5933000	 ldr         r3, [r3]
  00248	e3530000	 cmp         r3, #0
  0024c	da000002	 ble         |$LN7@PostDmaDea|
  00250	e3a03001	 mov         r3, #1
  00254	e58d3008	 str         r3, [sp, #8]
  00258	ea000007	 b           |$LN8@PostDmaDea|
  0025c		 |$LN7@PostDmaDea|
  0025c	e3a030a8	 mov         r3, #0xA8
  00260	e59f20cc	 ldr         r2, [pc, #0xCC]
  00264	e59f10c4	 ldr         r1, [pc, #0xC4]
  00268	e59f00bc	 ldr         r0, [pc, #0xBC]
  0026c	eb000000	 bl          NKDbgPrintfW
  00270	e6000010	 __debugbreak_ce
  00274	e3a03000	 mov         r3, #0
  00278	e58d3008	 str         r3, [sp, #8]
  0027c		 |$LN8@PostDmaDea|

; 169  : 
; 170  :     // this operation needs to be atomic to handle a corner case
; 171  :     EnterCriticalSection(&pDevice->csDVFS);

  0027c	e59d3000	 ldr         r3, [sp]
  00280	e2830f97	 add         r0, r3, #0x97, 30
  00284	eb000000	 bl          EnterCriticalSection

; 172  :     
; 173  :     // check if all dma's are inactive and signal ack event if so
; 174  :     InterlockedDecrement(&pDevice->nActiveDmaCount);

  00288	e59d3000	 ldr         r3, [sp]
  0028c	e2830048	 add         r0, r3, #0x48
  00290	eb000000	 bl          InterlockedDecrement

; 175  :     if (pDevice->bDVFSActive == TRUE && pDevice->nActiveDmaCount <= 0)

  00294	e59d3000	 ldr         r3, [sp]
  00298	e2833044	 add         r3, r3, #0x44
  0029c	e5933000	 ldr         r3, [r3]
  002a0	e3530001	 cmp         r3, #1
  002a4	1a00000d	 bne         |$LN2@PostDmaDea|
  002a8	e59d3000	 ldr         r3, [sp]
  002ac	e2833048	 add         r3, r3, #0x48
  002b0	e5933000	 ldr         r3, [r3]
  002b4	e3530000	 cmp         r3, #0
  002b8	ca000008	 bgt         |$LN2@PostDmaDea|

; 176  :         {
; 177  :         if (pDevice->hDVFSAsyncEvent != NULL) 

  002bc	e59d3000	 ldr         r3, [sp]
  002c0	e2833050	 add         r3, r3, #0x50
  002c4	e5933000	 ldr         r3, [r3]
  002c8	e3530000	 cmp         r3, #0
  002cc	0a000003	 beq         |$LN1@PostDmaDea|

; 178  :         {
; 179  :             SetEvent(pDevice->hDVFSAsyncEvent);

  002d0	e59d3000	 ldr         r3, [sp]
  002d4	e2833050	 add         r3, r3, #0x50
  002d8	e5930000	 ldr         r0, [r3]
  002dc	eb000000	 bl          SetEvent
  002e0		 |$LN1@PostDmaDea|
  002e0		 |$LN2@PostDmaDea|

; 180  :         }
; 181  :         }
; 182  : 
; 183  :     LeaveCriticalSection(&pDevice->csDVFS);

  002e0	e59d3000	 ldr         r3, [sp]
  002e4	e2830f97	 add         r0, r3, #0x97, 30
  002e8	eb000000	 bl          LeaveCriticalSection

; 184  : 
; 185  :     DEBUGMSG(ZONE_FUNCTION, (
; 186  :         L"-PostDmaDeactivation()\r\n"
; 187  :         ));

  002ec	e59f3034	 ldr         r3, [pc, #0x34]
  002f0	e5933440	 ldr         r3, [r3, #0x440]
  002f4	e3130004	 tst         r3, #4
  002f8	0a000004	 beq         |$LN9@PostDmaDea|
  002fc	e59f0020	 ldr         r0, [pc, #0x20]
  00300	eb000000	 bl          NKDbgPrintfW
  00304	e3a03001	 mov         r3, #1
  00308	e58d300c	 str         r3, [sp, #0xC]
  0030c	ea000001	 b           |$LN10@PostDmaDea|
  00310		 |$LN9@PostDmaDea|
  00310	e3a03000	 mov         r3, #0
  00314	e58d300c	 str         r3, [sp, #0xC]
  00318		 |$LN10@PostDmaDea|

; 188  : }

  00318	e28dd010	 add         sp, sp, #0x10
  0031c	e89d6000	 ldmia       sp, {sp, lr}
  00320	e12fff1e	 bx          lr
  00324		 |$LN14@PostDmaDea|
  00324		 |$LN15@PostDmaDea|
  00324	00000000	 DCD         |??_C@_1DC@JNNFMLIE@?$AA?9?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00328		 |$LN16@PostDmaDea|
  00328	00000000	 DCD         |dpCurSettings|
  0032c		 |$LN17@PostDmaDea|
  0032c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00330		 |$LN18@PostDmaDea|
  00330	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00334		 |$LN19@PostDmaDea|
  00334	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00338		 |$LN20@PostDmaDea|
  00338	00000000	 DCD         |??_C@_1DO@KEFLLHLB@?$AA?$CL?$AAP?$AAo?$AAs?$AAt?$AAD?$AAm?$AAa?$AAD?$AAe?$AAa?$AAc?$AAt?$AAi?$AAv?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0033c		 |$M45806|

			 ENDP  ; |PostDmaDeactivation|

	EXPORT	|ResetEvent|
	EXPORT	|SPIPowerTimerThread|
	IMPORT	|ReleaseMutex|
	IMPORT	|SetDevicePowerState|

  00018			 AREA	 |.pdata|, PDATA
|$T45821| DCD	|$LN12@SPIPowerTi|
	DCD	0x40005f04
; Function compile flags: /Odtp

  0033c			 AREA	 |.text|, CODE, ARM

  0033c		 |SPIPowerTimerThread| PROC

; 201  : {

  0033c		 |$LN12@SPIPowerTi|
  0033c	e1a0c00d	 mov         r12, sp
  00340	e92d0001	 stmdb       sp!, {r0}
  00344	e92d5000	 stmdb       sp!, {r12, lr}
  00348	e24dd010	 sub         sp, sp, #0x10
  0034c		 |$M45818|

; 202  :     DWORD nTimeout = INFINITE;

  0034c	e3e03000	 mvn         r3, #0
  00350	e58d3008	 str         r3, [sp, #8]

; 203  :     SPI_DEVICE *pDevice = (SPI_DEVICE*)(pv);

  00354	e59d3018	 ldr         r3, [sp, #0x18]
  00358	e58d3000	 str         r3, [sp]

; 204  : 	BOOL exp = TRUE;

  0035c	e3a03001	 mov         r3, #1
  00360	e58d3004	 str         r3, [sp, #4]
  00364		 |$LN7@SPIPowerTi|

; 205  : 
; 206  :     while (exp)

  00364	e59d3004	 ldr         r3, [sp, #4]
  00368	e3530000	 cmp         r3, #0
  0036c	0a00004b	 beq         |$LN6@SPIPowerTi|

; 207  :         {
; 208  :         WaitForSingleObject(pDevice->hTimerEvent, nTimeout);

  00370	e59d1008	 ldr         r1, [sp, #8]
  00374	e59d3000	 ldr         r3, [sp]
  00378	e2833f9e	 add         r3, r3, #0x9E, 30
  0037c	e5930000	 ldr         r0, [r3]
  00380	eb000000	 bl          WaitForSingleObject

; 209  : 
; 210  :         if (pDevice->bExitThread == TRUE) break;

  00384	e59d3000	 ldr         r3, [sp]
  00388	e2833d0a	 add         r3, r3, #0xA, 26
  0038c	e5933000	 ldr         r3, [r3]
  00390	e3530001	 cmp         r3, #1
  00394	1a000000	 bne         |$LN5@SPIPowerTi|
  00398	ea000040	 b           |$LN6@SPIPowerTi|
  0039c		 |$LN5@SPIPowerTi|

; 211  : 
; 212  :         // serialize access to power state changes
; 213  : 		WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  0039c	e3e01000	 mvn         r1, #0
  003a0	e59d3000	 ldr         r3, [sp]
  003a4	e283301c	 add         r3, r3, #0x1C
  003a8	e5930000	 ldr         r0, [r3]
  003ac	eb000000	 bl          WaitForSingleObject

; 214  : 
; 215  :         // by the time this thread got the lock hTimerEvent may 
; 216  :         // have gotten resignaled.  Clear the event to  make
; 217  :         // sure the activity timer thread isn't awaken prematurely
; 218  :         //
; 219  :         ResetEvent(pDevice->hTimerEvent);

  003b0	e59d3000	 ldr         r3, [sp]
  003b4	e2833f9e	 add         r3, r3, #0x9E, 30
  003b8	e5930000	 ldr         r0, [r3]
  003bc	eb000000	 bl          ResetEvent

; 220  : 
; 221  :         // check if we need to reset the timer
; 222  :         if (pDevice->nPowerCounter == 0)

  003c0	e59d3000	 ldr         r3, [sp]
  003c4	e2833fa1	 add         r3, r3, #0xA1, 30
  003c8	e5933000	 ldr         r3, [r3]
  003cc	e3530000	 cmp         r3, #0
  003d0	1a00002b	 bne         |$LN4@SPIPowerTi|

; 223  :             {
; 224  :             // We disable the power only when this thread
; 225  :             // wakes-up twice in a row with no power state
; 226  :             // change to D0.  This is achieved by using the
; 227  :             // bDisablePower flag to determine if power state
; 228  :             // changed since the last time this thread woke-up
; 229  :             //
; 230  :             if (pDevice->bDisablePower == TRUE)

  003d4	e59d3000	 ldr         r3, [sp]
  003d8	e2833f9f	 add         r3, r3, #0x9F, 30
  003dc	e5933000	 ldr         r3, [r3]
  003e0	e3530001	 cmp         r3, #1
  003e4	1a00001d	 bne         |$LN3@SPIPowerTi|

; 231  :                 {
; 232  :                 // force idle
; 233  :                 OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG,
; 234  :                        MCSPI_SYSCONFIG_ENAWAKEUP);

  003e8	e59d3000	 ldr         r3, [sp]
  003ec	e2833018	 add         r3, r3, #0x18
  003f0	e5933000	 ldr         r3, [r3]
  003f4	e2832010	 add         r2, r3, #0x10
  003f8	e3a03004	 mov         r3, #4
  003fc	e5823000	 str         r3, [r2]

; 235  : 
; 236  :                 // Clear interrupts.
; 237  :                 OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQSTATUS, 0xFFFF);

  00400	e59d3000	 ldr         r3, [sp]
  00404	e2833018	 add         r3, r3, #0x18
  00408	e5933000	 ldr         r3, [r3]
  0040c	e2832018	 add         r2, r3, #0x18
  00410	e3a03cff	 mov         r3, #0xFF, 24
  00414	e38330ff	 orr         r3, r3, #0xFF
  00418	e5823000	 str         r3, [r2]

; 238  :                 
; 239  :                 //EnableDeviceClocks(pDevice->deviceID, FALSE);
; 240  : 
; 241  :                 SetDevicePowerState(pDevice->hParentBus, D4, 0);                

  0041c	e3a02000	 mov         r2, #0
  00420	e3a01004	 mov         r1, #4
  00424	e59d3000	 ldr         r3, [sp]
  00428	e2833014	 add         r3, r3, #0x14
  0042c	e5930000	 ldr         r0, [r3]
  00430	eb000000	 bl          SetDevicePowerState

; 242  :                 pDevice->powerState = D4;

  00434	e59d3000	 ldr         r3, [sp]
  00438	e2832034	 add         r2, r3, #0x34
  0043c	e3a03004	 mov         r3, #4
  00440	e5823000	 str         r3, [r2]

; 243  :                 nTimeout = INFINITE;

  00444	e3e03000	 mvn         r3, #0
  00448	e58d3008	 str         r3, [sp, #8]

; 244  :                 SetEvent(pDevice->hDeviceOffEvent);

  0044c	e59d3000	 ldr         r3, [sp]
  00450	e2833fa3	 add         r3, r3, #0xA3, 30
  00454	e5930000	 ldr         r0, [r3]
  00458	eb000000	 bl          SetEvent

; 245  :                 }
; 246  :             else

  0045c	ea000007	 b           |$LN2@SPIPowerTi|
  00460		 |$LN3@SPIPowerTi|

; 247  :                 {
; 248  :                 // wait for activity time-out before shutting off power.
; 249  :                 pDevice->bDisablePower = TRUE;

  00460	e59d3000	 ldr         r3, [sp]
  00464	e2832f9f	 add         r2, r3, #0x9F, 30
  00468	e3a03001	 mov         r3, #1
  0046c	e5823000	 str         r3, [r2]

; 250  :                 nTimeout = pDevice->nActivityTimeout;

  00470	e59d3000	 ldr         r3, [sp]
  00474	e2833e27	 add         r3, r3, #0x27, 28
  00478	e5933000	 ldr         r3, [r3]
  0047c	e58d3008	 str         r3, [sp, #8]
  00480		 |$LN2@SPIPowerTi|

; 251  :                 }
; 252  :             }
; 253  :         else

  00480	ea000001	 b           |$LN1@SPIPowerTi|
  00484		 |$LN4@SPIPowerTi|

; 254  :             {
; 255  :             // disable power and wait for timer to get restarted
; 256  :             nTimeout = INFINITE;

  00484	e3e03000	 mvn         r3, #0
  00488	e58d3008	 str         r3, [sp, #8]
  0048c		 |$LN1@SPIPowerTi|

; 257  :             }
; 258  : 		ReleaseMutex(pDevice->hControllerMutex);

  0048c	e59d3000	 ldr         r3, [sp]
  00490	e283301c	 add         r3, r3, #0x1C
  00494	e5930000	 ldr         r0, [r3]
  00498	eb000000	 bl          ReleaseMutex

; 259  :         }

  0049c	eaffffb0	 b           |$LN7@SPIPowerTi|
  004a0		 |$LN6@SPIPowerTi|

; 260  : 
; 261  :     return 1;

  004a0	e3a03001	 mov         r3, #1
  004a4	e58d300c	 str         r3, [sp, #0xC]

; 262  : }

  004a8	e59d000c	 ldr         r0, [sp, #0xC]
  004ac	e28dd010	 add         sp, sp, #0x10
  004b0	e89d6000	 ldmia       sp, {sp, lr}
  004b4	e12fff1e	 bx          lr
  004b8		 |$M45819|

			 ENDP  ; |SPIPowerTimerThread|

; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45827| DCD	|$LN5@ResetEvent|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M45824|

; 224  : 	return EventModify(h,EVENT_RESET);

  00010	e3a01002	 mov         r1, #2
  00014	e59d0010	 ldr         r0, [sp, #0x10]
  00018	eb000000	 bl          EventModify
  0001c	e58d0004	 str         r0, [sp, #4]
  00020	e59d3004	 ldr         r3, [sp, #4]
  00024	e58d3000	 str         r3, [sp]

; 225  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd008	 add         sp, sp, #8
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M45825|

			 ENDP  ; |ResetEvent|

	EXPORT	|SetSPIPower|

  00020			 AREA	 |.pdata|, PDATA
|$T45835| DCD	|$LN11@SetSPIPowe|
	DCD	0x40006d04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  004b8			 AREA	 |.text|, CODE, ARM

  004b8		 |SetSPIPower| PROC

; 276  : {

  004b8		 |$LN11@SetSPIPowe|
  004b8	e1a0c00d	 mov         r12, sp
  004bc	e92d0003	 stmdb       sp!, {r0, r1}
  004c0	e92d5000	 stmdb       sp!, {r12, lr}
  004c4	e24dd004	 sub         sp, sp, #4
  004c8		 |$M45832|

; 277  :     // enable power when the power state request is D0-D2
; 278  : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  004c8	e3e01000	 mvn         r1, #0
  004cc	e59d300c	 ldr         r3, [sp, #0xC]
  004d0	e283301c	 add         r3, r3, #0x1C
  004d4	e5930000	 ldr         r0, [r3]
  004d8	eb000000	 bl          WaitForSingleObject

; 279  : 
; 280  :     if (state < D3)

  004dc	e59d3010	 ldr         r3, [sp, #0x10]
  004e0	e3530003	 cmp         r3, #3
  004e4	aa000020	 bge         |$LN6@SetSPIPowe|

; 281  :         {
; 282  :         if (pDevice->powerState >= D3)

  004e8	e59d300c	 ldr         r3, [sp, #0xC]
  004ec	e2833034	 add         r3, r3, #0x34
  004f0	e5933000	 ldr         r3, [r3]
  004f4	e3530003	 cmp         r3, #3
  004f8	ba00000f	 blt         |$LN5@SetSPIPowe|

; 283  :             {
; 284  : 			//EnableDeviceClocks(pDevice->deviceID, TRUE);
; 285  :             SetDevicePowerState(pDevice->hParentBus, D0, NULL);

  004fc	e3a02000	 mov         r2, #0
  00500	e3a01000	 mov         r1, #0
  00504	e59d300c	 ldr         r3, [sp, #0xC]
  00508	e2833014	 add         r3, r3, #0x14
  0050c	e5930000	 ldr         r0, [r3]
  00510	eb000000	 bl          SetDevicePowerState

; 286  :             pDevice->powerState = D0;            

  00514	e59d300c	 ldr         r3, [sp, #0xC]
  00518	e2832034	 add         r2, r3, #0x34
  0051c	e3a03000	 mov         r3, #0
  00520	e5823000	 str         r3, [r2]

; 287  : 
; 288  :             // smart idle
; 289  :             OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG,
; 290  :                 MCSPI_SYSCONFIG_AUTOIDLE |
; 291  :                 MCSPI_SYSCONFIG_SMARTIDLE |
; 292  :                 MCSPI_SYSCONFIG_ENAWAKEUP);

  00524	e59d300c	 ldr         r3, [sp, #0xC]
  00528	e2833018	 add         r3, r3, #0x18
  0052c	e5933000	 ldr         r3, [r3]
  00530	e2832010	 add         r2, r3, #0x10
  00534	e3a03015	 mov         r3, #0x15
  00538	e5823000	 str         r3, [r2]
  0053c		 |$LN5@SetSPIPowe|

; 293  :             }
; 294  :         pDevice->bDisablePower = FALSE;

  0053c	e59d300c	 ldr         r3, [sp, #0xC]
  00540	e2832f9f	 add         r2, r3, #0x9F, 30
  00544	e3a03000	 mov         r3, #0
  00548	e5823000	 str         r3, [r2]

; 295  :         pDevice->nPowerCounter++;

  0054c	e59d300c	 ldr         r3, [sp, #0xC]
  00550	e2833fa1	 add         r3, r3, #0xA1, 30
  00554	e5933000	 ldr         r3, [r3]
  00558	e2832001	 add         r2, r3, #1
  0055c	e59d300c	 ldr         r3, [sp, #0xC]
  00560	e2833fa1	 add         r3, r3, #0xA1, 30
  00564	e5832000	 str         r2, [r3]

; 296  :         }
; 297  :     else

  00568	ea000035	 b           |$LN4@SetSPIPowe|
  0056c		 |$LN6@SetSPIPowe|

; 298  :         {
; 299  :         pDevice->nPowerCounter--;

  0056c	e59d300c	 ldr         r3, [sp, #0xC]
  00570	e2833fa1	 add         r3, r3, #0xA1, 30
  00574	e5933000	 ldr         r3, [r3]
  00578	e2432001	 sub         r2, r3, #1
  0057c	e59d300c	 ldr         r3, [sp, #0xC]
  00580	e2833fa1	 add         r3, r3, #0xA1, 30
  00584	e5832000	 str         r2, [r3]

; 300  :         if (pDevice->nPowerCounter == 0)

  00588	e59d300c	 ldr         r3, [sp, #0xC]
  0058c	e2833fa1	 add         r3, r3, #0xA1, 30
  00590	e5933000	 ldr         r3, [r3]
  00594	e3530000	 cmp         r3, #0
  00598	1a000029	 bne         |$LN3@SetSPIPowe|

; 301  :             {
; 302  :             if ((pDevice->hTimerEvent != NULL) && (pDevice->systemState != D4))

  0059c	e59d300c	 ldr         r3, [sp, #0xC]
  005a0	e2833f9e	 add         r3, r3, #0x9E, 30
  005a4	e5933000	 ldr         r3, [r3]
  005a8	e3530000	 cmp         r3, #0
  005ac	0a00000d	 beq         |$LN2@SetSPIPowe|
  005b0	e59d300c	 ldr         r3, [sp, #0xC]
  005b4	e2833e29	 add         r3, r3, #0x29, 28
  005b8	e5933000	 ldr         r3, [r3]
  005bc	e3530004	 cmp         r3, #4
  005c0	0a000008	 beq         |$LN2@SetSPIPowe|

; 303  :                 {
; 304  :                 // Reset the device OFF event, set
; 305  :                 // after the device is put to D4 state
; 306  :                 ResetEvent(pDevice->hDeviceOffEvent);

  005c4	e59d300c	 ldr         r3, [sp, #0xC]
  005c8	e2833fa3	 add         r3, r3, #0xA3, 30
  005cc	e5930000	 ldr         r0, [r3]
  005d0	eb000000	 bl          ResetEvent

; 307  : 
; 308  :                 SetEvent(pDevice->hTimerEvent);

  005d4	e59d300c	 ldr         r3, [sp, #0xC]
  005d8	e2833f9e	 add         r3, r3, #0x9E, 30
  005dc	e5930000	 ldr         r0, [r3]
  005e0	eb000000	 bl          SetEvent

; 309  :                 }
; 310  :             else

  005e4	ea000016	 b           |$LN1@SetSPIPowe|
  005e8		 |$LN2@SetSPIPowe|

; 311  :                 {
; 312  :                 // force idle
; 313  :                 OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG,
; 314  :                        MCSPI_SYSCONFIG_ENAWAKEUP);

  005e8	e59d300c	 ldr         r3, [sp, #0xC]
  005ec	e2833018	 add         r3, r3, #0x18
  005f0	e5933000	 ldr         r3, [r3]
  005f4	e2832010	 add         r2, r3, #0x10
  005f8	e3a03004	 mov         r3, #4
  005fc	e5823000	 str         r3, [r2]

; 315  : 
; 316  :                 // Clear interrupts.
; 317  :                 OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQSTATUS, 0xFFFF);

  00600	e59d300c	 ldr         r3, [sp, #0xC]
  00604	e2833018	 add         r3, r3, #0x18
  00608	e5933000	 ldr         r3, [r3]
  0060c	e2832018	 add         r2, r3, #0x18
  00610	e3a03cff	 mov         r3, #0xFF, 24
  00614	e38330ff	 orr         r3, r3, #0xFF
  00618	e5823000	 str         r3, [r2]

; 318  : 
; 319  :                 //EnableDeviceClocks(pDevice->deviceID, FALSE);
; 320  :                 SetDevicePowerState(pDevice->hParentBus, D4, NULL);

  0061c	e3a02000	 mov         r2, #0
  00620	e3a01004	 mov         r1, #4
  00624	e59d300c	 ldr         r3, [sp, #0xC]
  00628	e2833014	 add         r3, r3, #0x14
  0062c	e5930000	 ldr         r0, [r3]
  00630	eb000000	 bl          SetDevicePowerState

; 321  : 
; 322  :                 pDevice->powerState = D4;

  00634	e59d300c	 ldr         r3, [sp, #0xC]
  00638	e2832034	 add         r2, r3, #0x34
  0063c	e3a03004	 mov         r3, #4
  00640	e5823000	 str         r3, [r2]
  00644		 |$LN1@SetSPIPowe|
  00644		 |$LN3@SetSPIPowe|
  00644		 |$LN4@SetSPIPowe|

; 323  :                 }
; 324  :             }
; 325  :         }
; 326  :     
; 327  : 	ReleaseMutex(pDevice->hControllerMutex);

  00644	e59d300c	 ldr         r3, [sp, #0xC]
  00648	e283301c	 add         r3, r3, #0x1C
  0064c	e5930000	 ldr         r0, [r3]
  00650	eb000000	 bl          ReleaseMutex

; 328  :     return TRUE;

  00654	e3a03001	 mov         r3, #1
  00658	e58d3000	 str         r3, [sp]

; 329  : }

  0065c	e59d0000	 ldr         r0, [sp]
  00660	e28dd004	 add         sp, sp, #4
  00664	e89d6000	 ldmia       sp, {sp, lr}
  00668	e12fff1e	 bx          lr
  0066c		 |$M45833|

			 ENDP  ; |SetSPIPower|

	EXPORT	|??_C@_1CK@HDDADMFP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_Deinit|
	EXPORT	|??_C@_1EA@JPGNEHHB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FM@HKJDDAOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@PEAOIMCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@FFKJDJBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@CHPOCJON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IK@PJKABPOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1II@BCEMLFJD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GK@PJNBBKCD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@BAJCLBKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@OACEHPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAP?$AAI@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FC@ICKMAPGJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HI@FBNPHHLD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@OOBNOJJ@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_Init|
	IMPORT	|RequestDevicePads|
	IMPORT	|Sleep|
	IMPORT	|InterruptInitialize|
	IMPORT	|KernelIoControl|
	IMPORT	|MmMapIoSpace|
	IMPORT	|GetAddressByDevice|
	IMPORT	|GetIrqByDevice|
	IMPORT	|SOCGetMCSPIDeviceByBus|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|CreateBusAccessHandle|
	IMPORT	|wcslen|
	IMPORT	|CreateEventW|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|CreateMutexW|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|memset|
	IMPORT	|LocalAlloc|

  00028			 AREA	 |.pdata|, PDATA
|$T45871| DCD	|$LN50@SPI_Init|
	DCD	0x40021e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@HDDADMFP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JPGNEHHB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "P"
	DCB	0x0, "a", 0x0, "d", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "h", 0x0, "o"
	DCB	0x0, "l", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@HKJDDAOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p"
	DCB	0x0, "t", 0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@PEAOIMCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "c"
	DCB	0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "e", 0x0, "v"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@FFKJDJBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@CHPOCJON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IK@PJKABPOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "I", 0x0, "R", 0x0, "Q", 0x0, " ", 0x0, "n"
	DCB	0x0, "u", 0x0, "m", 0x0, "b", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "f", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "i", 0x0, "s", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1II@BCEMLFJD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "f", 0x0, "i", 0x0, "n", 0x0, "d"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c"
	DCB	0x0, "e", 0x0, " ", 0x0, "I", 0x0, "D", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "t", 0x0, "h", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@PJNBBKCD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "t"
	DCB	0x0, "o", 0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "O", 0x0, "f"
	DCB	0x0, "f", 0x0, " ", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@BAJCLBKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "o"
	DCB	0x0, "p", 0x0, "e", 0x0, "n", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "s", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@OACEHPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAP?$AAI@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "S", 0x0, "P"
	DCB	0x0, "I", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i", 0x0, "v"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g"
	DCB	0x0, "i", 0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FC@ICKMAPGJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "m", 0x0, "u", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "!", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@FBNPHHLD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s"
	DCB	0x0, "t", 0x0, "r", 0x0, "u", 0x0, "c", 0x0, "t", 0x0, "u"
	DCB	0x0, "r", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@OOBNOJJ@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, "(", 0x0, "%", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  0066c			 AREA	 |.text|, CODE, ARM

  0066c		 |SPI_Init| PROC

; 340  : {

  0066c		 |$LN50@SPI_Init|
  0066c	e1a0c00d	 mov         r12, sp
  00670	e92d0003	 stmdb       sp!, {r0, r1}
  00674	e92d5000	 stmdb       sp!, {r12, lr}
  00678	e24dd0ac	 sub         sp, sp, #0xAC
  0067c		 |$M45868|

; 341  :     DWORD rc = (DWORD)NULL;

  0067c	e3a03000	 mov         r3, #0
  00680	e58d300c	 str         r3, [sp, #0xC]

; 342  :     SPI_DEVICE *pDevice = NULL;

  00684	e3a03000	 mov         r3, #0
  00688	e58d3008	 str         r3, [sp, #8]

; 343  :     PHYSICAL_ADDRESS pa;
; 344  :     DWORD dwCount=0;

  0068c	e3a03000	 mov         r3, #0
  00690	e58d3010	 str         r3, [sp, #0x10]

; 345  : 
; 346  : 	UNREFERENCED_PARAMETER(pBusContext);
; 347  : 
; 348  :     DEBUGMSG(ZONE_FUNCTION, (
; 349  :         L"+SPI_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 350  :     ));

  00694	e59f37f4	 ldr         r3, [pc, #0x7F4]
  00698	e5933440	 ldr         r3, [r3, #0x440]
  0069c	e3130004	 tst         r3, #4
  006a0	0a000006	 beq         |$LN22@SPI_Init|
  006a4	e59d20b8	 ldr         r2, [sp, #0xB8]
  006a8	e59d10b4	 ldr         r1, [sp, #0xB4]
  006ac	e59f082c	 ldr         r0, [pc, #0x82C]
  006b0	eb000000	 bl          NKDbgPrintfW
  006b4	e3a03001	 mov         r3, #1
  006b8	e58d3030	 str         r3, [sp, #0x30]
  006bc	ea000001	 b           |$LN23@SPI_Init|
  006c0		 |$LN22@SPI_Init|
  006c0	e3a03000	 mov         r3, #0
  006c4	e58d3030	 str         r3, [sp, #0x30]
  006c8		 |$LN23@SPI_Init|

; 351  : 
; 352  :     // Create device structure
; 353  :     pDevice = (SPI_DEVICE *)LocalAlloc(LPTR, sizeof(SPI_DEVICE));

  006c8	e3a01fa5	 mov         r1, #0xA5, 30
  006cc	e3a00040	 mov         r0, #0x40
  006d0	eb000000	 bl          LocalAlloc
  006d4	e58d0034	 str         r0, [sp, #0x34]
  006d8	e59d3034	 ldr         r3, [sp, #0x34]
  006dc	e58d3008	 str         r3, [sp, #8]

; 354  :     if (pDevice == NULL) {

  006e0	e59d3008	 ldr         r3, [sp, #8]
  006e4	e3530000	 cmp         r3, #0
  006e8	1a00000b	 bne         |$LN19@SPI_Init|

; 355  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 356  :             L"Failed allocate SPI controller structure\r\n"
; 357  :         ));

  006ec	e59f379c	 ldr         r3, [pc, #0x79C]
  006f0	e5933440	 ldr         r3, [r3, #0x440]
  006f4	e3130001	 tst         r3, #1
  006f8	0a000004	 beq         |$LN24@SPI_Init|
  006fc	e59f07d8	 ldr         r0, [pc, #0x7D8]
  00700	eb000000	 bl          NKDbgPrintfW
  00704	e3a03001	 mov         r3, #1
  00708	e58d3038	 str         r3, [sp, #0x38]
  0070c	ea000001	 b           |$LN25@SPI_Init|
  00710		 |$LN24@SPI_Init|
  00710	e3a03000	 mov         r3, #0
  00714	e58d3038	 str         r3, [sp, #0x38]
  00718		 |$LN25@SPI_Init|

; 358  :         goto cleanUp;

  00718	ea0001c4	 b           |$cleanUp$44608|
  0071c		 |$LN19@SPI_Init|

; 359  :     }
; 360  :     memset(pDevice, 0, sizeof(SPI_DEVICE));

  0071c	e3a02fa5	 mov         r2, #0xA5, 30
  00720	e3a01000	 mov         r1, #0
  00724	e59d0008	 ldr         r0, [sp, #8]
  00728	eb000000	 bl          memset

; 361  : 
; 362  :     // Set cookie
; 363  :     pDevice->cookie = SPI_DEVICE_COOKIE;

  0072c	e59d2008	 ldr         r2, [sp, #8]
  00730	e59f37a0	 ldr         r3, [pc, #0x7A0]
  00734	e5823000	 str         r3, [r2]

; 364  :     pDevice->powerState = D4;

  00738	e59d3008	 ldr         r3, [sp, #8]
  0073c	e2832034	 add         r2, r3, #0x34
  00740	e3a03004	 mov         r3, #4
  00744	e5823000	 str         r3, [r2]

; 365  : 
; 366  :     // initialize dvfs variables
; 367  :     pDevice->bDVFSActive = FALSE;

  00748	e59d3008	 ldr         r3, [sp, #8]
  0074c	e2832044	 add         r2, r3, #0x44
  00750	e3a03000	 mov         r3, #0
  00754	e5823000	 str         r3, [r2]

; 368  :     pDevice->nActiveDmaCount = 0;

  00758	e59d3008	 ldr         r3, [sp, #8]
  0075c	e2832048	 add         r2, r3, #0x48
  00760	e3a03000	 mov         r3, #0
  00764	e5823000	 str         r3, [r2]

; 369  :     pDevice->hDVFSAsyncEvent = NULL;

  00768	e59d3008	 ldr         r3, [sp, #8]
  0076c	e2832050	 add         r2, r3, #0x50
  00770	e3a03000	 mov         r3, #0
  00774	e5823000	 str         r3, [r2]

; 370  :     pDevice->szDVFSAsyncEventName[0] = _T('\0');

  00778	e59d3008	 ldr         r3, [sp, #8]
  0077c	e2832054	 add         r2, r3, #0x54
  00780	e3a03000	 mov         r3, #0
  00784	e1c230b0	 strh        r3, [r2]

; 371  : 
; 372  :     // Initalize DVFS critical section
; 373  :     InitializeCriticalSection(&pDevice->csDVFS);

  00788	e59d3008	 ldr         r3, [sp, #8]
  0078c	e2830f97	 add         r0, r3, #0x97, 30
  00790	eb000000	 bl          InitializeCriticalSection

; 374  : 	// Initialize controller mutex (needs to be mutex to lock access for multiple transactions)
; 375  : 	pDevice->hControllerMutex = CreateMutex(NULL, FALSE, NULL);

  00794	e3a02000	 mov         r2, #0
  00798	e3a01000	 mov         r1, #0
  0079c	e3a00000	 mov         r0, #0
  007a0	eb000000	 bl          CreateMutexW
  007a4	e58d003c	 str         r0, [sp, #0x3C]
  007a8	e59d3008	 ldr         r3, [sp, #8]
  007ac	e283201c	 add         r2, r3, #0x1C
  007b0	e59d303c	 ldr         r3, [sp, #0x3C]
  007b4	e5823000	 str         r3, [r2]

; 376  : 	if (pDevice->hControllerMutex == NULL)

  007b8	e59d3008	 ldr         r3, [sp, #8]
  007bc	e283301c	 add         r3, r3, #0x1C
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e3530000	 cmp         r3, #0
  007c8	1a00000b	 bne         |$LN18@SPI_Init|

; 377  : 	{
; 378  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: Error creating mutex!\r\n"));

  007cc	e59f36bc	 ldr         r3, [pc, #0x6BC]
  007d0	e5933440	 ldr         r3, [r3, #0x440]
  007d4	e3130001	 tst         r3, #1
  007d8	0a000004	 beq         |$LN26@SPI_Init|
  007dc	e59f06f0	 ldr         r0, [pc, #0x6F0]
  007e0	eb000000	 bl          NKDbgPrintfW
  007e4	e3a03001	 mov         r3, #1
  007e8	e58d3040	 str         r3, [sp, #0x40]
  007ec	ea000001	 b           |$LN27@SPI_Init|
  007f0		 |$LN26@SPI_Init|
  007f0	e3a03000	 mov         r3, #0
  007f4	e58d3040	 str         r3, [sp, #0x40]
  007f8		 |$LN27@SPI_Init|

; 379  : 		goto cleanUp;

  007f8	ea00018c	 b           |$cleanUp$44608|
  007fc		 |$LN18@SPI_Init|

; 380  : 	}
; 381  : 
; 382  :     // Read device parameters
; 383  :     if (GetDeviceRegistryParams(
; 384  :         szContext, pDevice, dimof(g_deviceRegParams), g_deviceRegParams
; 385  :     ) != ERROR_SUCCESS) {

  007fc	e59f36cc	 ldr         r3, [pc, #0x6CC]
  00800	e3a02006	 mov         r2, #6
  00804	e59d1008	 ldr         r1, [sp, #8]
  00808	e59d00b4	 ldr         r0, [sp, #0xB4]
  0080c	eb000000	 bl          GetDeviceRegistryParams
  00810	e58d0044	 str         r0, [sp, #0x44]
  00814	e59d3044	 ldr         r3, [sp, #0x44]
  00818	e3530000	 cmp         r3, #0
  0081c	0a00000b	 beq         |$LN17@SPI_Init|

; 386  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 387  :             L"Failed read SPI driver registry parameters\r\n"
; 388  :         ));

  00820	e59f3668	 ldr         r3, [pc, #0x668]
  00824	e5933440	 ldr         r3, [r3, #0x440]
  00828	e3130001	 tst         r3, #1
  0082c	0a000004	 beq         |$LN28@SPI_Init|
  00830	e59f0694	 ldr         r0, [pc, #0x694]
  00834	eb000000	 bl          NKDbgPrintfW
  00838	e3a03001	 mov         r3, #1
  0083c	e58d3048	 str         r3, [sp, #0x48]
  00840	ea000001	 b           |$LN29@SPI_Init|
  00844		 |$LN28@SPI_Init|
  00844	e3a03000	 mov         r3, #0
  00848	e58d3048	 str         r3, [sp, #0x48]
  0084c		 |$LN29@SPI_Init|

; 389  :         goto cleanUp;

  0084c	ea000177	 b           |$cleanUp$44608|
  00850		 |$LN17@SPI_Init|

; 390  :     }
; 391  : 
; 392  :     // Create DVFS async dvfs handles if necessary
; 393  :     pDevice->hDVFSInactiveEvent = CreateEvent(NULL, TRUE, TRUE, NULL);

  00850	e3a03000	 mov         r3, #0
  00854	e3a02001	 mov         r2, #1
  00858	e3a01001	 mov         r1, #1
  0085c	e3a00000	 mov         r0, #0
  00860	eb000000	 bl          CreateEventW
  00864	e58d004c	 str         r0, [sp, #0x4C]
  00868	e59d3008	 ldr         r3, [sp, #8]
  0086c	e283204c	 add         r2, r3, #0x4C
  00870	e59d304c	 ldr         r3, [sp, #0x4C]
  00874	e5823000	 str         r3, [r2]

; 394  :     if (_tcslen(pDevice->szDVFSAsyncEventName) > 0)

  00878	e59d3008	 ldr         r3, [sp, #8]
  0087c	e2830054	 add         r0, r3, #0x54
  00880	eb000000	 bl          wcslen
  00884	e58d0050	 str         r0, [sp, #0x50]
  00888	e59d3050	 ldr         r3, [sp, #0x50]
  0088c	e3530000	 cmp         r3, #0
  00890	9a00000a	 bls         |$LN16@SPI_Init|

; 395  :         {
; 396  :         pDevice->hDVFSAsyncEvent = CreateEvent(NULL, TRUE, FALSE, 
; 397  :                                         pDevice->szDVFSAsyncEventName
; 398  :                                         );        

  00894	e59d3008	 ldr         r3, [sp, #8]
  00898	e2833054	 add         r3, r3, #0x54
  0089c	e3a02000	 mov         r2, #0
  008a0	e3a01001	 mov         r1, #1
  008a4	e3a00000	 mov         r0, #0
  008a8	eb000000	 bl          CreateEventW
  008ac	e58d0054	 str         r0, [sp, #0x54]
  008b0	e59d3008	 ldr         r3, [sp, #8]
  008b4	e2832050	 add         r2, r3, #0x50
  008b8	e59d3054	 ldr         r3, [sp, #0x54]
  008bc	e5823000	 str         r3, [r2]
  008c0		 |$LN16@SPI_Init|

; 399  :         }
; 400  : 
; 401  :     // Open parent bus
; 402  :     pDevice->hParentBus = CreateBusAccessHandle(szContext);

  008c0	e59d00b4	 ldr         r0, [sp, #0xB4]
  008c4	eb000000	 bl          CreateBusAccessHandle
  008c8	e58d0058	 str         r0, [sp, #0x58]
  008cc	e59d3008	 ldr         r3, [sp, #8]
  008d0	e2832014	 add         r2, r3, #0x14
  008d4	e59d3058	 ldr         r3, [sp, #0x58]
  008d8	e5823000	 str         r3, [r2]

; 403  :     if (pDevice->hParentBus == NULL) {

  008dc	e59d3008	 ldr         r3, [sp, #8]
  008e0	e2833014	 add         r3, r3, #0x14
  008e4	e5933000	 ldr         r3, [r3]
  008e8	e3530000	 cmp         r3, #0
  008ec	1a00000b	 bne         |$LN15@SPI_Init|

; 404  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 405  :             L"Failed open parent bus driver\r\n"
; 406  :         ));

  008f0	e59f3598	 ldr         r3, [pc, #0x598]
  008f4	e5933440	 ldr         r3, [r3, #0x440]
  008f8	e3130001	 tst         r3, #1
  008fc	0a000004	 beq         |$LN30@SPI_Init|
  00900	e59f05c0	 ldr         r0, [pc, #0x5C0]
  00904	eb000000	 bl          NKDbgPrintfW
  00908	e3a03001	 mov         r3, #1
  0090c	e58d305c	 str         r3, [sp, #0x5C]
  00910	ea000001	 b           |$LN31@SPI_Init|
  00914		 |$LN30@SPI_Init|
  00914	e3a03000	 mov         r3, #0
  00918	e58d305c	 str         r3, [sp, #0x5C]
  0091c		 |$LN31@SPI_Init|

; 407  :         goto cleanUp;

  0091c	ea000143	 b           |$cleanUp$44608|
  00920		 |$LN15@SPI_Init|

; 408  :     }
; 409  : 
; 410  :     // start timer thread
; 411  :     pDevice->hTimerEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00920	e3a03000	 mov         r3, #0
  00924	e3a02000	 mov         r2, #0
  00928	e3a01000	 mov         r1, #0
  0092c	e3a00000	 mov         r0, #0
  00930	eb000000	 bl          CreateEventW
  00934	e58d0060	 str         r0, [sp, #0x60]
  00938	e59d3008	 ldr         r3, [sp, #8]
  0093c	e2832f9e	 add         r2, r3, #0x9E, 30
  00940	e59d3060	 ldr         r3, [sp, #0x60]
  00944	e5823000	 str         r3, [r2]

; 412  :     if (pDevice->hTimerEvent != NULL)

  00948	e59d3008	 ldr         r3, [sp, #8]
  0094c	e2833f9e	 add         r3, r3, #0x9E, 30
  00950	e5933000	 ldr         r3, [r3]
  00954	e3530000	 cmp         r3, #0
  00958	0a000017	 beq         |$LN14@SPI_Init|

; 413  :         {
; 414  :         pDevice->hTimerThread = CreateThread(NULL, 0, SPIPowerTimerThread, 
; 415  :             pDevice, 0, NULL
; 416  :             );

  0095c	e3a03000	 mov         r3, #0
  00960	e58d3004	 str         r3, [sp, #4]
  00964	e3a03000	 mov         r3, #0
  00968	e58d3000	 str         r3, [sp]
  0096c	e59d3008	 ldr         r3, [sp, #8]
  00970	e59f254c	 ldr         r2, [pc, #0x54C]
  00974	e3a01000	 mov         r1, #0
  00978	e3a00000	 mov         r0, #0
  0097c	eb000000	 bl          CreateThread
  00980	e58d0064	 str         r0, [sp, #0x64]
  00984	e59d3008	 ldr         r3, [sp, #8]
  00988	e2832f9d	 add         r2, r3, #0x9D, 30
  0098c	e59d3064	 ldr         r3, [sp, #0x64]
  00990	e5823000	 str         r3, [r2]

; 417  :         
; 418  :         if (pDevice->hTimerThread != NULL)

  00994	e59d3008	 ldr         r3, [sp, #8]
  00998	e2833f9d	 add         r3, r3, #0x9D, 30
  0099c	e5933000	 ldr         r3, [r3]
  009a0	e3530000	 cmp         r3, #0
  009a4	0a000004	 beq         |$LN13@SPI_Init|

; 419  :             {
; 420  :             CeSetThreadPriority(pDevice->hTimerThread, TIMERTHREAD_PRIORITY);

  009a8	e3a01098	 mov         r1, #0x98
  009ac	e59d3008	 ldr         r3, [sp, #8]
  009b0	e2833f9d	 add         r3, r3, #0x9D, 30
  009b4	e5930000	 ldr         r0, [r3]
  009b8	eb000000	 bl          CeSetThreadPriority
  009bc		 |$LN13@SPI_Init|
  009bc		 |$LN14@SPI_Init|

; 421  :             }
; 422  :         }
; 423  : 
; 424  :     // Create an Event to wait for Device OFF on Suspend
; 425  :     pDevice->hDeviceOffEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  009bc	e3a03000	 mov         r3, #0
  009c0	e3a02000	 mov         r2, #0
  009c4	e3a01000	 mov         r1, #0
  009c8	e3a00000	 mov         r0, #0
  009cc	eb000000	 bl          CreateEventW
  009d0	e58d0068	 str         r0, [sp, #0x68]
  009d4	e59d3008	 ldr         r3, [sp, #8]
  009d8	e2832fa3	 add         r2, r3, #0xA3, 30
  009dc	e59d3068	 ldr         r3, [sp, #0x68]
  009e0	e5823000	 str         r3, [r2]

; 426  :     if (pDevice->hDeviceOffEvent == NULL)

  009e4	e59d3008	 ldr         r3, [sp, #8]
  009e8	e2833fa3	 add         r3, r3, #0xA3, 30
  009ec	e5933000	 ldr         r3, [r3]
  009f0	e3530000	 cmp         r3, #0
  009f4	1a00000a	 bne         |$LN12@SPI_Init|

; 427  :     {
; 428  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 429  :             L"Failed to create Device Off Event\r\n"
; 430  :         ));        

  009f8	e59f3490	 ldr         r3, [pc, #0x490]
  009fc	e5933440	 ldr         r3, [r3, #0x440]
  00a00	e3130001	 tst         r3, #1
  00a04	0a000004	 beq         |$LN32@SPI_Init|
  00a08	e59f04b0	 ldr         r0, [pc, #0x4B0]
  00a0c	eb000000	 bl          NKDbgPrintfW
  00a10	e3a03001	 mov         r3, #1
  00a14	e58d306c	 str         r3, [sp, #0x6C]
  00a18	ea000001	 b           |$LN33@SPI_Init|
  00a1c		 |$LN32@SPI_Init|
  00a1c	e3a03000	 mov         r3, #0
  00a20	e58d306c	 str         r3, [sp, #0x6C]
  00a24		 |$LN33@SPI_Init|
  00a24		 |$LN12@SPI_Init|

; 431  : 	}
; 432  : 	
; 433  : 	// Retrieve device ID
; 434  : 	pDevice->deviceID = SOCGetMCSPIDeviceByBus(pDevice->dwPort);

  00a24	e59d3008	 ldr         r3, [sp, #8]
  00a28	e2833038	 add         r3, r3, #0x38
  00a2c	e5930000	 ldr         r0, [r3]
  00a30	eb000000	 bl          SOCGetMCSPIDeviceByBus
  00a34	e58d0070	 str         r0, [sp, #0x70]
  00a38	e59d3008	 ldr         r3, [sp, #8]
  00a3c	e283203c	 add         r2, r3, #0x3C
  00a40	e59d3070	 ldr         r3, [sp, #0x70]
  00a44	e5823000	 str         r3, [r2]

; 435  : 	if (pDevice->deviceID == OMAP_DEVICE_NONE)

  00a48	e59d3008	 ldr         r3, [sp, #8]
  00a4c	e283303c	 add         r3, r3, #0x3C
  00a50	e5933000	 ldr         r3, [r3]
  00a54	e3730001	 cmn         r3, #1
  00a58	1a00000b	 bne         |$LN11@SPI_Init|

; 436  : 	{
; 437  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 438  :             L"Failed to find device ID for this SPI controller\r\n"
; 439  :         ));

  00a5c	e59f342c	 ldr         r3, [pc, #0x42C]
  00a60	e5933440	 ldr         r3, [r3, #0x440]
  00a64	e3130001	 tst         r3, #1
  00a68	0a000004	 beq         |$LN34@SPI_Init|
  00a6c	e59f0448	 ldr         r0, [pc, #0x448]
  00a70	eb000000	 bl          NKDbgPrintfW
  00a74	e3a03001	 mov         r3, #1
  00a78	e58d3074	 str         r3, [sp, #0x74]
  00a7c	ea000001	 b           |$LN35@SPI_Init|
  00a80		 |$LN34@SPI_Init|
  00a80	e3a03000	 mov         r3, #0
  00a84	e58d3074	 str         r3, [sp, #0x74]
  00a88		 |$LN35@SPI_Init|

; 440  :         goto cleanUp;

  00a88	ea0000e8	 b           |$cleanUp$44608|
  00a8c		 |$LN11@SPI_Init|

; 441  : 	}
; 442  : 	
; 443  : 
; 444  :     
; 445  : 	// Retrieve IRQ from device
; 446  : 	pDevice->irq = GetIrqByDevice(pDevice->deviceID, NULL);

  00a8c	e3a01000	 mov         r1, #0
  00a90	e59d3008	 ldr         r3, [sp, #8]
  00a94	e283303c	 add         r3, r3, #0x3C
  00a98	e5930000	 ldr         r0, [r3]
  00a9c	eb000000	 bl          GetIrqByDevice
  00aa0	e58d0078	 str         r0, [sp, #0x78]
  00aa4	e59d3008	 ldr         r3, [sp, #8]
  00aa8	e283200c	 add         r2, r3, #0xC
  00aac	e59d3078	 ldr         r3, [sp, #0x78]
  00ab0	e5823000	 str         r3, [r2]

; 447  : 	if (pDevice->irq == (DWORD)-1)

  00ab4	e59d3008	 ldr         r3, [sp, #8]
  00ab8	e283300c	 add         r3, r3, #0xC
  00abc	e5933000	 ldr         r3, [r3]
  00ac0	e3730001	 cmn         r3, #1
  00ac4	1a00000b	 bne         |$LN10@SPI_Init|

; 448  : 	{
; 449  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 450  :             L"Failed to find IRQ number for this SPI controller\r\n"
; 451  :         ));

  00ac8	e59f33c0	 ldr         r3, [pc, #0x3C0]
  00acc	e5933440	 ldr         r3, [r3, #0x440]
  00ad0	e3130001	 tst         r3, #1
  00ad4	0a000004	 beq         |$LN36@SPI_Init|
  00ad8	e59f03d8	 ldr         r0, [pc, #0x3D8]
  00adc	eb000000	 bl          NKDbgPrintfW
  00ae0	e3a03001	 mov         r3, #1
  00ae4	e58d307c	 str         r3, [sp, #0x7C]
  00ae8	ea000001	 b           |$LN37@SPI_Init|
  00aec		 |$LN36@SPI_Init|
  00aec	e3a03000	 mov         r3, #0
  00af0	e58d307c	 str         r3, [sp, #0x7C]
  00af4		 |$LN37@SPI_Init|

; 452  :         goto cleanUp;

  00af4	ea0000cd	 b           |$cleanUp$44608|
  00af8		 |$LN10@SPI_Init|

; 453  : 	}
; 454  : 
; 455  :     // Map SPI controller
; 456  : 	pa.QuadPart = GetAddressByDevice(pDevice->deviceID);

  00af8	e59d3008	 ldr         r3, [sp, #8]
  00afc	e283303c	 add         r3, r3, #0x3C
  00b00	e5930000	 ldr         r0, [r3]
  00b04	eb000000	 bl          GetAddressByDevice
  00b08	e58d0080	 str         r0, [sp, #0x80]
  00b0c	e59d3080	 ldr         r3, [sp, #0x80]
  00b10	e58d3014	 str         r3, [sp, #0x14]
  00b14	e3a03000	 mov         r3, #0
  00b18	e58d3018	 str         r3, [sp, #0x18]

; 457  :     pDevice->pSPIRegs = MmMapIoSpace(pa, sizeof(OMAP_MCSPI_REGS), FALSE);

  00b1c	e3a03000	 mov         r3, #0
  00b20	e3a0207c	 mov         r2, #0x7C
  00b24	e59d0014	 ldr         r0, [sp, #0x14]
  00b28	e59d1018	 ldr         r1, [sp, #0x18]
  00b2c	eb000000	 bl          MmMapIoSpace
  00b30	e58d0084	 str         r0, [sp, #0x84]
  00b34	e59d3008	 ldr         r3, [sp, #8]
  00b38	e2832018	 add         r2, r3, #0x18
  00b3c	e59d3084	 ldr         r3, [sp, #0x84]
  00b40	e5823000	 str         r3, [r2]

; 458  :     if (pDevice->pSPIRegs == NULL) {

  00b44	e59d3008	 ldr         r3, [sp, #8]
  00b48	e2833018	 add         r3, r3, #0x18
  00b4c	e5933000	 ldr         r3, [r3]
  00b50	e3530000	 cmp         r3, #0
  00b54	1a00000b	 bne         |$LN9@SPI_Init|

; 459  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 460  :             L"Failed map SPI controller registers\r\n"
; 461  :         ));

  00b58	e59f3330	 ldr         r3, [pc, #0x330]
  00b5c	e5933440	 ldr         r3, [r3, #0x440]
  00b60	e3130001	 tst         r3, #1
  00b64	0a000004	 beq         |$LN38@SPI_Init|
  00b68	e59f0344	 ldr         r0, [pc, #0x344]
  00b6c	eb000000	 bl          NKDbgPrintfW
  00b70	e3a03001	 mov         r3, #1
  00b74	e58d3088	 str         r3, [sp, #0x88]
  00b78	ea000001	 b           |$LN39@SPI_Init|
  00b7c		 |$LN38@SPI_Init|
  00b7c	e3a03000	 mov         r3, #0
  00b80	e58d3088	 str         r3, [sp, #0x88]
  00b84		 |$LN39@SPI_Init|

; 462  :         goto cleanUp;

  00b84	ea0000a9	 b           |$cleanUp$44608|
  00b88		 |$LN9@SPI_Init|

; 463  :     }
; 464  : 
; 465  :     // Map SPI interrupt
; 466  :     if (!KernelIoControl(
; 467  :         IOCTL_HAL_REQUEST_SYSINTR, &pDevice->irq, sizeof(pDevice->irq), 
; 468  :         &pDevice->sysIntr, sizeof(pDevice->sysIntr), NULL
; 469  :     )) {

  00b88	e3a03000	 mov         r3, #0
  00b8c	e58d3004	 str         r3, [sp, #4]
  00b90	e3a03004	 mov         r3, #4
  00b94	e58d3000	 str         r3, [sp]
  00b98	e59d3008	 ldr         r3, [sp, #8]
  00b9c	e2833020	 add         r3, r3, #0x20
  00ba0	e3a02004	 mov         r2, #4
  00ba4	e59d1008	 ldr         r1, [sp, #8]
  00ba8	e281100c	 add         r1, r1, #0xC
  00bac	e59f02fc	 ldr         r0, [pc, #0x2FC]
  00bb0	eb000000	 bl          KernelIoControl
  00bb4	e58d008c	 str         r0, [sp, #0x8C]
  00bb8	e59d308c	 ldr         r3, [sp, #0x8C]
  00bbc	e3530000	 cmp         r3, #0
  00bc0	1a00000b	 bne         |$LN8@SPI_Init|

; 470  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 471  :             L"Failed map SPI controller interrupt\r\n"
; 472  :         ));

  00bc4	e59f32c4	 ldr         r3, [pc, #0x2C4]
  00bc8	e5933440	 ldr         r3, [r3, #0x440]
  00bcc	e3130001	 tst         r3, #1
  00bd0	0a000004	 beq         |$LN40@SPI_Init|
  00bd4	e59f02d0	 ldr         r0, [pc, #0x2D0]
  00bd8	eb000000	 bl          NKDbgPrintfW
  00bdc	e3a03001	 mov         r3, #1
  00be0	e58d3090	 str         r3, [sp, #0x90]
  00be4	ea000001	 b           |$LN41@SPI_Init|
  00be8		 |$LN40@SPI_Init|
  00be8	e3a03000	 mov         r3, #0
  00bec	e58d3090	 str         r3, [sp, #0x90]
  00bf0		 |$LN41@SPI_Init|

; 473  :         goto cleanUp;

  00bf0	ea00008e	 b           |$cleanUp$44608|
  00bf4		 |$LN8@SPI_Init|

; 474  :     }
; 475  :     
; 476  :     // Set hardware to full power    
; 477  :     SetSPIPower(pDevice, D0);

  00bf4	e3a01000	 mov         r1, #0
  00bf8	e59d0008	 ldr         r0, [sp, #8]
  00bfc	eb000000	 bl          SetSPIPower

; 478  : 
; 479  :     // Create interrupt event
; 480  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00c00	e3a03000	 mov         r3, #0
  00c04	e3a02000	 mov         r2, #0
  00c08	e3a01000	 mov         r1, #0
  00c0c	e3a00000	 mov         r0, #0
  00c10	eb000000	 bl          CreateEventW
  00c14	e58d0094	 str         r0, [sp, #0x94]
  00c18	e59d3008	 ldr         r3, [sp, #8]
  00c1c	e2832024	 add         r2, r3, #0x24
  00c20	e59d3094	 ldr         r3, [sp, #0x94]
  00c24	e5823000	 str         r3, [r2]

; 481  :     if (pDevice->hIntrEvent == NULL) {

  00c28	e59d3008	 ldr         r3, [sp, #8]
  00c2c	e2833024	 add         r3, r3, #0x24
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e3530000	 cmp         r3, #0
  00c38	1a00000b	 bne         |$LN7@SPI_Init|

; 482  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 483  :             L"Failed create interrupt event\r\n"
; 484  :         ));

  00c3c	e59f324c	 ldr         r3, [pc, #0x24C]
  00c40	e5933440	 ldr         r3, [r3, #0x440]
  00c44	e3130001	 tst         r3, #1
  00c48	0a000004	 beq         |$LN42@SPI_Init|
  00c4c	e59f0254	 ldr         r0, [pc, #0x254]
  00c50	eb000000	 bl          NKDbgPrintfW
  00c54	e3a03001	 mov         r3, #1
  00c58	e58d3098	 str         r3, [sp, #0x98]
  00c5c	ea000001	 b           |$LN43@SPI_Init|
  00c60		 |$LN42@SPI_Init|
  00c60	e3a03000	 mov         r3, #0
  00c64	e58d3098	 str         r3, [sp, #0x98]
  00c68		 |$LN43@SPI_Init|

; 485  :         goto cleanUp;

  00c68	ea000070	 b           |$cleanUp$44608|
  00c6c		 |$LN7@SPI_Init|

; 486  :     }
; 487  : 
; 488  :     // Initialize interrupt
; 489  :     if (!InterruptInitialize(pDevice->sysIntr, pDevice->hIntrEvent, NULL, 0)) {

  00c6c	e3a03000	 mov         r3, #0
  00c70	e3a02000	 mov         r2, #0
  00c74	e59d1008	 ldr         r1, [sp, #8]
  00c78	e2811024	 add         r1, r1, #0x24
  00c7c	e5911000	 ldr         r1, [r1]
  00c80	e59d0008	 ldr         r0, [sp, #8]
  00c84	e2800020	 add         r0, r0, #0x20
  00c88	e5900000	 ldr         r0, [r0]
  00c8c	eb000000	 bl          InterruptInitialize
  00c90	e58d009c	 str         r0, [sp, #0x9C]
  00c94	e59d309c	 ldr         r3, [sp, #0x9C]
  00c98	e3530000	 cmp         r3, #0
  00c9c	1a00000b	 bne         |$LN6@SPI_Init|

; 490  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Init: "
; 491  :             L"InterruptInitialize failed\r\n"
; 492  :         ));

  00ca0	e59f31e8	 ldr         r3, [pc, #0x1E8]
  00ca4	e5933440	 ldr         r3, [r3, #0x440]
  00ca8	e3130001	 tst         r3, #1
  00cac	0a000004	 beq         |$LN44@SPI_Init|
  00cb0	e59f01ec	 ldr         r0, [pc, #0x1EC]
  00cb4	eb000000	 bl          NKDbgPrintfW
  00cb8	e3a03001	 mov         r3, #1
  00cbc	e58d30a0	 str         r3, [sp, #0xA0]
  00cc0	ea000001	 b           |$LN45@SPI_Init|
  00cc4		 |$LN44@SPI_Init|
  00cc4	e3a03000	 mov         r3, #0
  00cc8	e58d30a0	 str         r3, [sp, #0xA0]
  00ccc		 |$LN45@SPI_Init|

; 493  :         goto cleanUp;

  00ccc	ea000057	 b           |$cleanUp$44608|
  00cd0		 |$LN6@SPI_Init|

; 494  :     }
; 495  : 	
; 496  :     // Reset the SPI controller
; 497  :     SETREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG, MCSPI_SYSCONFIG_SOFTRESET);

  00cd0	e59d3008	 ldr         r3, [sp, #8]
  00cd4	e2833018	 add         r3, r3, #0x18
  00cd8	e5933000	 ldr         r3, [r3]
  00cdc	e2833010	 add         r3, r3, #0x10
  00ce0	e5933000	 ldr         r3, [r3]
  00ce4	e3832002	 orr         r2, r3, #2
  00ce8	e59d3008	 ldr         r3, [sp, #8]
  00cec	e2833018	 add         r3, r3, #0x18
  00cf0	e5933000	 ldr         r3, [r3]
  00cf4	e2833010	 add         r3, r3, #0x10
  00cf8	e5832000	 str         r2, [r3]
  00cfc		 |$LN5@SPI_Init|

; 498  : 
; 499  :     // Wait until resetting is done
; 500  :     while ( !(INREG32(&pDevice->pSPIRegs->MCSPI_SYSSTATUS) & MCSPI_SYSSTATUS_RESETDONE)) {

  00cfc	e59d3008	 ldr         r3, [sp, #8]
  00d00	e2833018	 add         r3, r3, #0x18
  00d04	e5933000	 ldr         r3, [r3]
  00d08	e2833014	 add         r3, r3, #0x14
  00d0c	e5933000	 ldr         r3, [r3]
  00d10	e3130001	 tst         r3, #1
  00d14	1a000012	 bne         |$LN4@SPI_Init|

; 501  :         Sleep (1);

  00d18	e3a00001	 mov         r0, #1
  00d1c	eb000000	 bl          Sleep

; 502  : 
; 503  :         if (dwCount++>0x100)

  00d20	e59d3010	 ldr         r3, [sp, #0x10]
  00d24	e3530c01	 cmp         r3, #1, 24
  00d28	e59d3010	 ldr         r3, [sp, #0x10]
  00d2c	e2833001	 add         r3, r3, #1
  00d30	e58d3010	 str         r3, [sp, #0x10]
  00d34	9a000009	 bls         |$LN3@SPI_Init|

; 504  :         {
; 505  :             // Break out dead lock, something is wrong.
; 506  :             ERRORMSG (TRUE, (TEXT("SPI: ERROR holding in reset.\n")));

  00d38	e3a02c01	 mov         r2, #1, 24
  00d3c	e38220fa	 orr         r2, r2, #0xFA
  00d40	e59f1154	 ldr         r1, [pc, #0x154]
  00d44	e59f014c	 ldr         r0, [pc, #0x14C]
  00d48	eb000000	 bl          NKDbgPrintfW
  00d4c	e59f014c	 ldr         r0, [pc, #0x14C]
  00d50	eb000000	 bl          NKDbgPrintfW

; 507  :             return FALSE;

  00d54	e3a03000	 mov         r3, #0
  00d58	e58d302c	 str         r3, [sp, #0x2C]
  00d5c	ea000046	 b           |$LN20@SPI_Init|
  00d60		 |$LN3@SPI_Init|

; 508  :         }
; 509  :     }

  00d60	eaffffe5	 b           |$LN5@SPI_Init|
  00d64		 |$LN4@SPI_Init|

; 510  : 
; 511  :     // Disable all interrupts.
; 512  :     OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQENABLE, 0);

  00d64	e59d3008	 ldr         r3, [sp, #8]
  00d68	e2833018	 add         r3, r3, #0x18
  00d6c	e5933000	 ldr         r3, [r3]
  00d70	e283201c	 add         r2, r3, #0x1C
  00d74	e3a03000	 mov         r3, #0
  00d78	e5823000	 str         r3, [r2]

; 513  : 
; 514  :     // Clear interrupts.
; 515  :     OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQSTATUS, 0xFFFF);

  00d7c	e59d3008	 ldr         r3, [sp, #8]
  00d80	e2833018	 add         r3, r3, #0x18
  00d84	e5933000	 ldr         r3, [r3]
  00d88	e2832018	 add         r2, r3, #0x18
  00d8c	e3a03cff	 mov         r3, #0xFF, 24
  00d90	e38330ff	 orr         r3, r3, #0xFF
  00d94	e5823000	 str         r3, [r2]

; 516  : 
; 517  : 
; 518  :     // Setup Module Control as master and eSpiMode to unknown so we can change it later.
; 519  :     pDevice->eSpiMode = UNKNOWN;

  00d98	e59d3008	 ldr         r3, [sp, #8]
  00d9c	e2832040	 add         r2, r3, #0x40
  00da0	e3a03000	 mov         r3, #0
  00da4	e5823000	 str         r3, [r2]

; 520  :     OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, 0);

  00da8	e59d3008	 ldr         r3, [sp, #8]
  00dac	e2833018	 add         r3, r3, #0x18
  00db0	e5933000	 ldr         r3, [r3]
  00db4	e2832028	 add         r2, r3, #0x28
  00db8	e3a03000	 mov         r3, #0
  00dbc	e5823000	 str         r3, [r2]

; 521  : 
; 522  :     // Return non-null value
; 523  :     rc = (DWORD)pDevice;

  00dc0	e59d3008	 ldr         r3, [sp, #8]
  00dc4	e58d300c	 str         r3, [sp, #0xC]

; 524  : 
; 525  :     // Set this driver to internal suspend mode
; 526  :     OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG, MCSPI_SYSCONFIG_AUTOIDLE |
; 527  :         MCSPI_SYSCONFIG_SMARTIDLE | MCSPI_SYSCONFIG_ENAWAKEUP); 

  00dc8	e59d3008	 ldr         r3, [sp, #8]
  00dcc	e2833018	 add         r3, r3, #0x18
  00dd0	e5933000	 ldr         r3, [r3]
  00dd4	e2832010	 add         r2, r3, #0x10
  00dd8	e3a03015	 mov         r3, #0x15
  00ddc	e5823000	 str         r3, [r2]

; 528  :     SetSPIPower(pDevice, D4);

  00de0	e3a01004	 mov         r1, #4
  00de4	e59d0008	 ldr         r0, [sp, #8]
  00de8	eb000000	 bl          SetSPIPower

; 529  : 
; 530  :     if (!RequestDevicePads(pDevice->deviceID))

  00dec	e59d3008	 ldr         r3, [sp, #8]
  00df0	e283303c	 add         r3, r3, #0x3C
  00df4	e5930000	 ldr         r0, [r3]
  00df8	eb000000	 bl          RequestDevicePads
  00dfc	e58d00a4	 str         r0, [sp, #0xA4]
  00e00	e59d30a4	 ldr         r3, [sp, #0xA4]
  00e04	e3530000	 cmp         r3, #0
  00e08	1a000006	 bne         |$LN2@SPI_Init|

; 531  :     {
; 532  :         ERRORMSG (TRUE, (TEXT("SPI: RequestDevicePads failed.\n")));

  00e0c	e3a02f85	 mov         r2, #0x85, 30
  00e10	e59f1084	 ldr         r1, [pc, #0x84]
  00e14	e59f007c	 ldr         r0, [pc, #0x7C]
  00e18	eb000000	 bl          NKDbgPrintfW
  00e1c	e59f0070	 ldr         r0, [pc, #0x70]
  00e20	eb000000	 bl          NKDbgPrintfW

; 533  :         goto cleanUp;

  00e24	ea000001	 b           |$cleanUp$44608|
  00e28		 |$LN2@SPI_Init|

; 534  :     }
; 535  : 
; 536  :     // Return non-null value
; 537  :     rc = (DWORD)pDevice;

  00e28	e59d3008	 ldr         r3, [sp, #8]
  00e2c	e58d300c	 str         r3, [sp, #0xC]
  00e30		 |$cleanUp$44608|

; 538  : 
; 539  : cleanUp:
; 540  :     if (rc == 0) SPI_Deinit((DWORD)pDevice);

  00e30	e59d300c	 ldr         r3, [sp, #0xC]
  00e34	e3530000	 cmp         r3, #0
  00e38	1a000001	 bne         |$LN1@SPI_Init|
  00e3c	e59d0008	 ldr         r0, [sp, #8]
  00e40	eb000000	 bl          SPI_Deinit
  00e44		 |$LN1@SPI_Init|

; 541  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Init(rc = %d)\r\n", rc));

  00e44	e59f3044	 ldr         r3, [pc, #0x44]
  00e48	e5933440	 ldr         r3, [r3, #0x440]
  00e4c	e3130004	 tst         r3, #4
  00e50	0a000005	 beq         |$LN46@SPI_Init|
  00e54	e59d100c	 ldr         r1, [sp, #0xC]
  00e58	e59f002c	 ldr         r0, [pc, #0x2C]
  00e5c	eb000000	 bl          NKDbgPrintfW
  00e60	e3a03001	 mov         r3, #1
  00e64	e58d30a8	 str         r3, [sp, #0xA8]
  00e68	ea000001	 b           |$LN47@SPI_Init|
  00e6c		 |$LN46@SPI_Init|
  00e6c	e3a03000	 mov         r3, #0
  00e70	e58d30a8	 str         r3, [sp, #0xA8]
  00e74		 |$LN47@SPI_Init|

; 542  :     return rc;

  00e74	e59d300c	 ldr         r3, [sp, #0xC]
  00e78	e58d302c	 str         r3, [sp, #0x2C]
  00e7c		 |$LN20@SPI_Init|

; 543  : }

  00e7c	e59d002c	 ldr         r0, [sp, #0x2C]
  00e80	e28dd0ac	 add         sp, sp, #0xAC
  00e84	e89d6000	 ldmia       sp, {sp, lr}
  00e88	e12fff1e	 bx          lr
  00e8c		 |$LN51@SPI_Init|
  00e8c		 |$LN52@SPI_Init|
  00e8c	00000000	 DCD         |??_C@_1CK@HDDADMFP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00e90		 |$LN53@SPI_Init|
  00e90	00000000	 DCD         |dpCurSettings|
  00e94		 |$LN54@SPI_Init|
  00e94	00000000	 DCD         |??_C@_1EA@JPGNEHHB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?6?$AA?$AA@|
  00e98		 |$LN55@SPI_Init|
  00e98	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00e9c		 |$LN56@SPI_Init|
  00e9c	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00ea0		 |$LN57@SPI_Init|
  00ea0	00000000	 DCD         |??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@|
  00ea4		 |$LN58@SPI_Init|
  00ea4	00000000	 DCD         |??_C@_1FM@HKJDDAOD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp?$AAt?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa@|
  00ea8		 |$LN59@SPI_Init|
  00ea8	00000000	 DCD         |??_C@_1GC@PEAOIMCK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAi@|
  00eac		 |$LN60@SPI_Init|
  00eac	00000000	 DCD         |??_C@_1GO@FFKJDJBM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@|
  00eb0		 |$LN61@SPI_Init|
  00eb0	01010098	 DCD         0x1010098
  00eb4		 |$LN62@SPI_Init|
  00eb4	00000000	 DCD         |??_C@_1GO@CHPOCJON@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAS?$AAP?$AAI?$AA?5@|
  00eb8		 |$LN63@SPI_Init|
  00eb8	00000000	 DCD         |??_C@_1IK@PJKABPOF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5@|
  00ebc		 |$LN64@SPI_Init|
  00ebc	00000000	 DCD         |??_C@_1II@BCEMLFJD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAf?$AAi?$AAn?$AAd?$AA?5@|
  00ec0		 |$LN65@SPI_Init|
  00ec0	00000000	 DCD         |??_C@_1GK@PJNBBKCD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt@|
  00ec4		 |$LN66@SPI_Init|
  00ec4	00000000	 DCD         |SPIPowerTimerThread|
  00ec8		 |$LN67@SPI_Init|
  00ec8	00000000	 DCD         |??_C@_1GC@BAJCLBKM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAp?$AAa?$AAr@|
  00ecc		 |$LN68@SPI_Init|
  00ecc	00000000	 DCD         |??_C@_1HM@OACEHPBP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAS?$AAP?$AAI@|
  00ed0		 |$LN69@SPI_Init|
  00ed0	00000000	 DCD         |g_deviceRegParams|
  00ed4		 |$LN70@SPI_Init|
  00ed4	00000000	 DCD         |??_C@_1FC@ICKMAPGJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAi?$AAn?$AAg?$AA?5@|
  00ed8		 |$LN71@SPI_Init|
  00ed8	73706944	 DCD         0x73706944
  00edc		 |$LN72@SPI_Init|
  00edc	00000000	 DCD         |??_C@_1HI@FBNPHHLD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  00ee0		 |$LN73@SPI_Init|
  00ee0	00000000	 DCD         |??_C@_1DA@OOBNOJJ@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CF?$AAs?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00ee4		 |$M45869|

			 ENDP  ; |SPI_Init|

	EXPORT	|??_C@_1CO@OIJMHFHD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IO@GNCDGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@FFJAFFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HJBPCML@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|LocalFree|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|InterruptDisable|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|CloseBusAccessHandle|
	IMPORT	|CloseHandle|

  00030			 AREA	 |.pdata|, PDATA
|$T45910| DCD	|$LN22@SPI_Deinit|
	DCD	0x4000b504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@OIJMHFHD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@GNCDGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, " ", 0x0, "w", 0x0, "i", 0x0, "t", 0x0, "h", 0x0, " "
	DCB	0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "a"
	DCB	0x0, "n", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "(", 0x0, "%"
	DCB	0x0, "d", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "s", 0x0, "t"
	DCB	0x0, "a", 0x0, "n", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "e"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@FFJAFFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HJBPCML@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "e"
	DCB	0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  00ee4			 AREA	 |.text|, CODE, ARM

  00ee4		 |SPI_Deinit| PROC

; 552  : {

  00ee4		 |$LN22@SPI_Deinit|
  00ee4	e1a0c00d	 mov         r12, sp
  00ee8	e92d0001	 stmdb       sp!, {r0}
  00eec	e92d5000	 stmdb       sp!, {r12, lr}
  00ef0	e24dd02c	 sub         sp, sp, #0x2C
  00ef4		 |$M45907|

; 553  :     BOOL rc = FALSE;

  00ef4	e3a03000	 mov         r3, #0
  00ef8	e58d300c	 str         r3, [sp, #0xC]

; 554  :     SPI_DEVICE *pDevice = (SPI_DEVICE*)context;

  00efc	e59d3034	 ldr         r3, [sp, #0x34]
  00f00	e58d3008	 str         r3, [sp, #8]

; 555  : 
; 556  :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Deinit(0x%08x)\r\n", context));

  00f04	e59f3294	 ldr         r3, [pc, #0x294]
  00f08	e5933440	 ldr         r3, [r3, #0x440]
  00f0c	e3130004	 tst         r3, #4
  00f10	0a000005	 beq         |$LN12@SPI_Deinit|
  00f14	e59d1034	 ldr         r1, [sp, #0x34]
  00f18	e59f0294	 ldr         r0, [pc, #0x294]
  00f1c	eb000000	 bl          NKDbgPrintfW
  00f20	e3a03001	 mov         r3, #1
  00f24	e58d301c	 str         r3, [sp, #0x1C]
  00f28	ea000001	 b           |$LN13@SPI_Deinit|
  00f2c		 |$LN12@SPI_Deinit|
  00f2c	e3a03000	 mov         r3, #0
  00f30	e58d301c	 str         r3, [sp, #0x1C]
  00f34		 |$LN13@SPI_Deinit|

; 557  : 
; 558  :     // Check if we get correct context
; 559  :     if (pDevice == NULL || pDevice->cookie != SPI_DEVICE_COOKIE) {

  00f34	e59d3008	 ldr         r3, [sp, #8]
  00f38	e3530000	 cmp         r3, #0
  00f3c	0a000004	 beq         |$LN8@SPI_Deinit|
  00f40	e59d3008	 ldr         r3, [sp, #8]
  00f44	e5932000	 ldr         r2, [r3]
  00f48	e59f3260	 ldr         r3, [pc, #0x260]
  00f4c	e1520003	 cmp         r2, r3
  00f50	0a00000b	 beq         |$LN9@SPI_Deinit|
  00f54		 |$LN8@SPI_Deinit|

; 560  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Deinit: "
; 561  :             L"Incorrect context paramer\r\n"
; 562  :         ));

  00f54	e59f3244	 ldr         r3, [pc, #0x244]
  00f58	e5933440	 ldr         r3, [r3, #0x440]
  00f5c	e3130001	 tst         r3, #1
  00f60	0a000004	 beq         |$LN14@SPI_Deinit|
  00f64	e59f0240	 ldr         r0, [pc, #0x240]
  00f68	eb000000	 bl          NKDbgPrintfW
  00f6c	e3a03001	 mov         r3, #1
  00f70	e58d3020	 str         r3, [sp, #0x20]
  00f74	ea000001	 b           |$LN15@SPI_Deinit|
  00f78		 |$LN14@SPI_Deinit|
  00f78	e3a03000	 mov         r3, #0
  00f7c	e58d3020	 str         r3, [sp, #0x20]
  00f80		 |$LN15@SPI_Deinit|

; 563  :         goto cleanUp;

  00f80	ea000073	 b           |$cleanUp$44709|
  00f84		 |$LN9@SPI_Deinit|

; 564  :     }
; 565  : 
; 566  :     // Check for open instances
; 567  :     if (pDevice->instances > 0) {

  00f84	e59d3008	 ldr         r3, [sp, #8]
  00f88	e2833010	 add         r3, r3, #0x10
  00f8c	e5933000	 ldr         r3, [r3]
  00f90	e3530000	 cmp         r3, #0
  00f94	da00000e	 ble         |$LN7@SPI_Deinit|

; 568  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Deinit: "
; 569  :             L"Deinit with active instance (%d instances active)\r\n",
; 570  :             pDevice->instances
; 571  :         ));

  00f98	e59f3200	 ldr         r3, [pc, #0x200]
  00f9c	e5933440	 ldr         r3, [r3, #0x440]
  00fa0	e3130001	 tst         r3, #1
  00fa4	0a000007	 beq         |$LN16@SPI_Deinit|
  00fa8	e59d3008	 ldr         r3, [sp, #8]
  00fac	e2833010	 add         r3, r3, #0x10
  00fb0	e5931000	 ldr         r1, [r3]
  00fb4	e59f01ec	 ldr         r0, [pc, #0x1EC]
  00fb8	eb000000	 bl          NKDbgPrintfW
  00fbc	e3a03001	 mov         r3, #1
  00fc0	e58d3024	 str         r3, [sp, #0x24]
  00fc4	ea000001	 b           |$LN17@SPI_Deinit|
  00fc8		 |$LN16@SPI_Deinit|
  00fc8	e3a03000	 mov         r3, #0
  00fcc	e58d3024	 str         r3, [sp, #0x24]
  00fd0		 |$LN17@SPI_Deinit|

; 572  :         goto cleanUp;

  00fd0	ea00005f	 b           |$cleanUp$44709|
  00fd4		 |$LN7@SPI_Deinit|

; 573  :     }
; 574  : 
; 575  :     // stop interrupt thread
; 576  :     if (pDevice->hTimerThread != NULL)

  00fd4	e59d3008	 ldr         r3, [sp, #8]
  00fd8	e2833f9d	 add         r3, r3, #0x9D, 30
  00fdc	e5933000	 ldr         r3, [r3]
  00fe0	e3530000	 cmp         r3, #0
  00fe4	0a000014	 beq         |$LN6@SPI_Deinit|

; 577  :         {
; 578  :         pDevice->bExitThread = TRUE;

  00fe8	e59d3008	 ldr         r3, [sp, #8]
  00fec	e2832d0a	 add         r2, r3, #0xA, 26
  00ff0	e3a03001	 mov         r3, #1
  00ff4	e5823000	 str         r3, [r2]

; 579  :         SetEvent(pDevice->hTimerEvent);

  00ff8	e59d3008	 ldr         r3, [sp, #8]
  00ffc	e2833f9e	 add         r3, r3, #0x9E, 30
  01000	e5930000	 ldr         r0, [r3]
  01004	eb000000	 bl          SetEvent

; 580  :         WaitForSingleObject(pDevice->hTimerThread, INFINITE);

  01008	e3e01000	 mvn         r1, #0
  0100c	e59d3008	 ldr         r3, [sp, #8]
  01010	e2833f9d	 add         r3, r3, #0x9D, 30
  01014	e5930000	 ldr         r0, [r3]
  01018	eb000000	 bl          WaitForSingleObject

; 581  :         CloseHandle(pDevice->hTimerThread);

  0101c	e59d3008	 ldr         r3, [sp, #8]
  01020	e2833f9d	 add         r3, r3, #0x9D, 30
  01024	e5930000	 ldr         r0, [r3]
  01028	eb000000	 bl          CloseHandle

; 582  :         pDevice->hTimerThread = NULL;

  0102c	e59d3008	 ldr         r3, [sp, #8]
  01030	e2832f9d	 add         r2, r3, #0x9D, 30
  01034	e3a03000	 mov         r3, #0
  01038	e5823000	 str         r3, [r2]
  0103c		 |$LN6@SPI_Deinit|

; 583  :         }
; 584  : 
; 585  :     // Set hardware to D4 and close parent bus driver
; 586  :     if (pDevice->hParentBus!= NULL) 

  0103c	e59d3008	 ldr         r3, [sp, #8]
  01040	e2833014	 add         r3, r3, #0x14
  01044	e5933000	 ldr         r3, [r3]
  01048	e3530000	 cmp         r3, #0
  0104c	0a000006	 beq         |$LN5@SPI_Deinit|

; 587  :     {
; 588  :         SetSPIPower(pDevice,  D4);

  01050	e3a01004	 mov         r1, #4
  01054	e59d0008	 ldr         r0, [sp, #8]
  01058	eb000000	 bl          SetSPIPower

; 589  :         CloseBusAccessHandle(pDevice->hParentBus);

  0105c	e59d3008	 ldr         r3, [sp, #8]
  01060	e2833014	 add         r3, r3, #0x14
  01064	e5930000	 ldr         r0, [r3]
  01068	eb000000	 bl          CloseBusAccessHandle
  0106c		 |$LN5@SPI_Deinit|

; 590  :     }
; 591  : 
; 592  :     // Unmap SPI controller registers
; 593  :     if (pDevice->pSPIRegs != NULL)

  0106c	e59d3008	 ldr         r3, [sp, #8]
  01070	e2833018	 add         r3, r3, #0x18
  01074	e5933000	 ldr         r3, [r3]
  01078	e3530000	 cmp         r3, #0
  0107c	0a000004	 beq         |$LN4@SPI_Deinit|

; 594  :     {
; 595  :         MmUnmapIoSpace((VOID*)pDevice->pSPIRegs, sizeof(OMAP_MCSPI_REGS));

  01080	e3a0107c	 mov         r1, #0x7C
  01084	e59d3008	 ldr         r3, [sp, #8]
  01088	e2833018	 add         r3, r3, #0x18
  0108c	e5930000	 ldr         r0, [r3]
  01090	eb000000	 bl          MmUnmapIoSpace
  01094		 |$LN4@SPI_Deinit|

; 596  :     }
; 597  : 
; 598  :     // Release SPI controller interrupt
; 599  :     if (pDevice->sysIntr != 0) 

  01094	e59d3008	 ldr         r3, [sp, #8]
  01098	e2833020	 add         r3, r3, #0x20
  0109c	e5933000	 ldr         r3, [r3]
  010a0	e3530000	 cmp         r3, #0
  010a4	0a00000d	 beq         |$LN3@SPI_Deinit|

; 600  : 	{
; 601  :         InterruptDisable(pDevice->sysIntr);

  010a8	e59d3008	 ldr         r3, [sp, #8]
  010ac	e2833020	 add         r3, r3, #0x20
  010b0	e5930000	 ldr         r0, [r3]
  010b4	eb000000	 bl          InterruptDisable

; 602  :         KernelIoControl(
; 603  :             IOCTL_HAL_RELEASE_SYSINTR, &pDevice->sysIntr,
; 604  :             sizeof(pDevice->sysIntr), NULL, 0, NULL
; 605  :         );

  010b8	e3a03000	 mov         r3, #0
  010bc	e58d3004	 str         r3, [sp, #4]
  010c0	e3a03000	 mov         r3, #0
  010c4	e58d3000	 str         r3, [sp]
  010c8	e3a03000	 mov         r3, #0
  010cc	e3a02004	 mov         r2, #4
  010d0	e59d1008	 ldr         r1, [sp, #8]
  010d4	e2811020	 add         r1, r1, #0x20
  010d8	e59f00c4	 ldr         r0, [pc, #0xC4]
  010dc	eb000000	 bl          KernelIoControl
  010e0		 |$LN3@SPI_Deinit|

; 606  :     }
; 607  : 
; 608  :     // Close interrupt handler
; 609  :     if (pDevice->hIntrEvent != NULL) CloseHandle(pDevice->hIntrEvent);

  010e0	e59d3008	 ldr         r3, [sp, #8]
  010e4	e2833024	 add         r3, r3, #0x24
  010e8	e5933000	 ldr         r3, [r3]
  010ec	e3530000	 cmp         r3, #0
  010f0	0a000003	 beq         |$LN2@SPI_Deinit|
  010f4	e59d3008	 ldr         r3, [sp, #8]
  010f8	e2833024	 add         r3, r3, #0x24
  010fc	e5930000	 ldr         r0, [r3]
  01100	eb000000	 bl          CloseHandle
  01104		 |$LN2@SPI_Deinit|

; 610  : 
; 611  :     // release dvfs resources
; 612  :     if (pDevice->hDVFSAsyncEvent != NULL) CloseHandle(pDevice->hDVFSAsyncEvent);

  01104	e59d3008	 ldr         r3, [sp, #8]
  01108	e2833050	 add         r3, r3, #0x50
  0110c	e5933000	 ldr         r3, [r3]
  01110	e3530000	 cmp         r3, #0
  01114	0a000003	 beq         |$LN1@SPI_Deinit|
  01118	e59d3008	 ldr         r3, [sp, #8]
  0111c	e2833050	 add         r3, r3, #0x50
  01120	e5930000	 ldr         r0, [r3]
  01124	eb000000	 bl          CloseHandle
  01128		 |$LN1@SPI_Deinit|

; 613  : 
; 614  :     // Delete critical section
; 615  :     DeleteCriticalSection(&pDevice->csDVFS);

  01128	e59d3008	 ldr         r3, [sp, #8]
  0112c	e2830f97	 add         r0, r3, #0x97, 30
  01130	eb000000	 bl          DeleteCriticalSection

; 616  : 	
; 617  : 	// Delete mutex
; 618  : 	CloseHandle(pDevice->hControllerMutex);

  01134	e59d3008	 ldr         r3, [sp, #8]
  01138	e283301c	 add         r3, r3, #0x1C
  0113c	e5930000	 ldr         r0, [r3]
  01140	eb000000	 bl          CloseHandle

; 619  : 
; 620  :     // Free device structure
; 621  :     LocalFree(pDevice);

  01144	e59d0008	 ldr         r0, [sp, #8]
  01148	eb000000	 bl          LocalFree

; 622  : 
; 623  :     // Done
; 624  :     rc = TRUE;

  0114c	e3a03001	 mov         r3, #1
  01150	e58d300c	 str         r3, [sp, #0xC]
  01154		 |$cleanUp$44709|

; 625  : 
; 626  : cleanUp:
; 627  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Deinit(rc = %d)\r\n", rc));

  01154	e59f3044	 ldr         r3, [pc, #0x44]
  01158	e5933440	 ldr         r3, [r3, #0x440]
  0115c	e3130004	 tst         r3, #4
  01160	0a000005	 beq         |$LN18@SPI_Deinit|
  01164	e59d100c	 ldr         r1, [sp, #0xC]
  01168	e59f002c	 ldr         r0, [pc, #0x2C]
  0116c	eb000000	 bl          NKDbgPrintfW
  01170	e3a03001	 mov         r3, #1
  01174	e58d3028	 str         r3, [sp, #0x28]
  01178	ea000001	 b           |$LN19@SPI_Deinit|
  0117c		 |$LN18@SPI_Deinit|
  0117c	e3a03000	 mov         r3, #0
  01180	e58d3028	 str         r3, [sp, #0x28]
  01184		 |$LN19@SPI_Deinit|

; 628  :     return rc;

  01184	e59d300c	 ldr         r3, [sp, #0xC]
  01188	e58d3018	 str         r3, [sp, #0x18]

; 629  : }

  0118c	e59d0018	 ldr         r0, [sp, #0x18]
  01190	e28dd02c	 add         sp, sp, #0x2C
  01194	e89d6000	 ldmia       sp, {sp, lr}
  01198	e12fff1e	 bx          lr
  0119c		 |$LN23@SPI_Deinit|
  0119c		 |$LN24@SPI_Deinit|
  0119c	00000000	 DCD         |??_C@_1CO@OIJMHFHD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  011a0		 |$LN25@SPI_Deinit|
  011a0	00000000	 DCD         |dpCurSettings|
  011a4		 |$LN26@SPI_Deinit|
  011a4	010100d8	 DCD         0x10100d8
  011a8		 |$LN27@SPI_Deinit|
  011a8	00000000	 DCD         |??_C@_1IO@GNCDGGDB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAw?$AAi?$AAt?$AAh?$AA?5?$AAa@|
  011ac		 |$LN28@SPI_Deinit|
  011ac	00000000	 DCD         |??_C@_1FO@FFJAFFGH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn@|
  011b0		 |$LN29@SPI_Deinit|
  011b0	73706944	 DCD         0x73706944
  011b4		 |$LN30@SPI_Deinit|
  011b4	00000000	 DCD         |??_C@_1CM@HJBPCML@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  011b8		 |$M45908|

			 ENDP  ; |SPI_Deinit|

	EXPORT	|??_C@_1DC@CEBIFIGD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@LJDLBMKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FO@EHJJABEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@CMDGJGNK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'
	EXPORT	|SPI_Open|

  00038			 AREA	 |.pdata|, PDATA
|$T45934| DCD	|$LN18@SPI_Open|
	DCD	0x40007e04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@CEBIFIGD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@LJDLBMKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "a"
	DCB	0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "s", 0x0, "t", 0x0, "a", 0x0, "n"
	DCB	0x0, "c", 0x0, "e", 0x0, " ", 0x0, "s", 0x0, "t", 0x0, "r"
	DCB	0x0, "u", 0x0, "c", 0x0, "t", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@EHJJABEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@CMDGJGNK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "O", 0x0, "p"
	DCB	0x0, "e", 0x0, "n", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  011b8			 AREA	 |.text|, CODE, ARM

  011b8		 |SPI_Open| PROC

; 638  : {

  011b8		 |$LN18@SPI_Open|
  011b8	e1a0c00d	 mov         r12, sp
  011bc	e92d0007	 stmdb       sp!, {r0 - r2}
  011c0	e92d5000	 stmdb       sp!, {r12, lr}
  011c4	e24dd028	 sub         sp, sp, #0x28
  011c8		 |$M45931|

; 639  :     DWORD rc = (DWORD)NULL;

  011c8	e3a03000	 mov         r3, #0
  011cc	e58d3004	 str         r3, [sp, #4]

; 640  :     SPI_DEVICE *pDevice = (SPI_DEVICE*)context;

  011d0	e59d3030	 ldr         r3, [sp, #0x30]
  011d4	e58d3000	 str         r3, [sp]

; 641  :     SPI_INSTANCE *pInstance = NULL;

  011d8	e3a03000	 mov         r3, #0
  011dc	e58d3008	 str         r3, [sp, #8]

; 642  : 
; 643  : 	UNREFERENCED_PARAMETER(accessCode);
; 644  : 	UNREFERENCED_PARAMETER(shareMode);
; 645  : 
; 646  :     DEBUGMSG(ZONE_FUNCTION, (
; 647  :         L"+SPI_Open(0x%08x, 0x%08x, 0x%08x\r\n", context, accessCode, shareMode
; 648  :     ));

  011e0	e59f31a4	 ldr         r3, [pc, #0x1A4]
  011e4	e5933440	 ldr         r3, [r3, #0x440]
  011e8	e3130004	 tst         r3, #4
  011ec	0a000007	 beq         |$LN6@SPI_Open|
  011f0	e59d3038	 ldr         r3, [sp, #0x38]
  011f4	e59d2034	 ldr         r2, [sp, #0x34]
  011f8	e59d1030	 ldr         r1, [sp, #0x30]
  011fc	e59f01a8	 ldr         r0, [pc, #0x1A8]
  01200	eb000000	 bl          NKDbgPrintfW
  01204	e3a03001	 mov         r3, #1
  01208	e58d3010	 str         r3, [sp, #0x10]
  0120c	ea000001	 b           |$LN7@SPI_Open|
  01210		 |$LN6@SPI_Open|
  01210	e3a03000	 mov         r3, #0
  01214	e58d3010	 str         r3, [sp, #0x10]
  01218		 |$LN7@SPI_Open|

; 649  : 
; 650  :     // Check if we get correct context
; 651  :     if (pDevice == NULL || pDevice->cookie != SPI_DEVICE_COOKIE) {

  01218	e59d3000	 ldr         r3, [sp]
  0121c	e3530000	 cmp         r3, #0
  01220	0a000004	 beq         |$LN2@SPI_Open|
  01224	e59d3000	 ldr         r3, [sp]
  01228	e5932000	 ldr         r2, [r3]
  0122c	e59f3174	 ldr         r3, [pc, #0x174]
  01230	e1520003	 cmp         r2, r3
  01234	0a00000b	 beq         |$LN3@SPI_Open|
  01238		 |$LN2@SPI_Open|

; 652  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Open: "
; 653  :             L"Incorrect context parameter\r\n"
; 654  :         ));

  01238	e59f314c	 ldr         r3, [pc, #0x14C]
  0123c	e5933440	 ldr         r3, [r3, #0x440]
  01240	e3130001	 tst         r3, #1
  01244	0a000004	 beq         |$LN8@SPI_Open|
  01248	e59f0154	 ldr         r0, [pc, #0x154]
  0124c	eb000000	 bl          NKDbgPrintfW
  01250	e3a03001	 mov         r3, #1
  01254	e58d3014	 str         r3, [sp, #0x14]
  01258	ea000001	 b           |$LN9@SPI_Open|
  0125c		 |$LN8@SPI_Open|
  0125c	e3a03000	 mov         r3, #0
  01260	e58d3014	 str         r3, [sp, #0x14]
  01264		 |$LN9@SPI_Open|

; 655  :         goto cleanUp;

  01264	ea000035	 b           |$cleanUp$44752|
  01268		 |$LN3@SPI_Open|

; 656  :     }
; 657  : 
; 658  :     // Create device structure
; 659  :     pInstance = (SPI_INSTANCE*)LocalAlloc(LPTR, sizeof(SPI_INSTANCE));

  01268	e3a010c8	 mov         r1, #0xC8
  0126c	e3a00040	 mov         r0, #0x40
  01270	eb000000	 bl          LocalAlloc
  01274	e58d0018	 str         r0, [sp, #0x18]
  01278	e59d3018	 ldr         r3, [sp, #0x18]
  0127c	e58d3008	 str         r3, [sp, #8]

; 660  :     if (pInstance == NULL) {

  01280	e59d3008	 ldr         r3, [sp, #8]
  01284	e3530000	 cmp         r3, #0
  01288	1a00000b	 bne         |$LN1@SPI_Open|

; 661  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Open: "
; 662  :             L"Failed allocate SPI instance structure\r\n"
; 663  :         ));

  0128c	e59f30f8	 ldr         r3, [pc, #0xF8]
  01290	e5933440	 ldr         r3, [r3, #0x440]
  01294	e3130001	 tst         r3, #1
  01298	0a000004	 beq         |$LN10@SPI_Open|
  0129c	e59f00fc	 ldr         r0, [pc, #0xFC]
  012a0	eb000000	 bl          NKDbgPrintfW
  012a4	e3a03001	 mov         r3, #1
  012a8	e58d301c	 str         r3, [sp, #0x1C]
  012ac	ea000001	 b           |$LN11@SPI_Open|
  012b0		 |$LN10@SPI_Open|
  012b0	e3a03000	 mov         r3, #0
  012b4	e58d301c	 str         r3, [sp, #0x1C]
  012b8		 |$LN11@SPI_Open|

; 664  :         goto cleanUp;

  012b8	ea000020	 b           |$cleanUp$44752|
  012bc		 |$LN1@SPI_Open|

; 665  :     }
; 666  : 	
; 667  :     memset(pInstance, 0, sizeof(SPI_INSTANCE));

  012bc	e3a020c8	 mov         r2, #0xC8
  012c0	e3a01000	 mov         r1, #0
  012c4	e59d0008	 ldr         r0, [sp, #8]
  012c8	eb000000	 bl          memset

; 668  : 
; 669  :     // Set cookie
; 670  :     pInstance->cookie = SPI_INSTANCE_COOKIE;

  012cc	e59d2008	 ldr         r2, [sp, #8]
  012d0	e59f30c4	 ldr         r3, [pc, #0xC4]
  012d4	e5823000	 str         r3, [r2]

; 671  : 
; 672  :     // Save device reference
; 673  :     pInstance->pDevice = pDevice;

  012d8	e59d3008	 ldr         r3, [sp, #8]
  012dc	e2832004	 add         r2, r3, #4
  012e0	e59d3000	 ldr         r3, [sp]
  012e4	e5823000	 str         r3, [r2]

; 674  : 
; 675  :     // Increment number of open instances
; 676  :     InterlockedIncrement(&pDevice->instances);

  012e8	e59d3000	 ldr         r3, [sp]
  012ec	e2830010	 add         r0, r3, #0x10
  012f0	eb000000	 bl          InterlockedIncrement

; 677  : 
; 678  :     // sanity check number of instances
; 679  :     ASSERT(pDevice->instances > 0);

  012f4	e59d3000	 ldr         r3, [sp]
  012f8	e2833010	 add         r3, r3, #0x10
  012fc	e5933000	 ldr         r3, [r3]
  01300	e3530000	 cmp         r3, #0
  01304	da000002	 ble         |$LN12@SPI_Open|
  01308	e3a03001	 mov         r3, #1
  0130c	e58d3020	 str         r3, [sp, #0x20]
  01310	ea000008	 b           |$LN13@SPI_Open|
  01314		 |$LN12@SPI_Open|
  01314	e3a03c02	 mov         r3, #2, 24
  01318	e38330a7	 orr         r3, r3, #0xA7
  0131c	e59f2074	 ldr         r2, [pc, #0x74]
  01320	e59f106c	 ldr         r1, [pc, #0x6C]
  01324	e59f0064	 ldr         r0, [pc, #0x64]
  01328	eb000000	 bl          NKDbgPrintfW
  0132c	e6000010	 __debugbreak_ce
  01330	e3a03000	 mov         r3, #0
  01334	e58d3020	 str         r3, [sp, #0x20]
  01338		 |$LN13@SPI_Open|

; 680  : 
; 681  :     // Done...
; 682  :     rc = (DWORD)pInstance;

  01338	e59d3008	 ldr         r3, [sp, #8]
  0133c	e58d3004	 str         r3, [sp, #4]
  01340		 |$cleanUp$44752|

; 683  : 
; 684  : cleanUp:
; 685  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Open(rc = 0x%08x)\r\n", rc));

  01340	e59f3044	 ldr         r3, [pc, #0x44]
  01344	e5933440	 ldr         r3, [r3, #0x440]
  01348	e3130004	 tst         r3, #4
  0134c	0a000005	 beq         |$LN14@SPI_Open|
  01350	e59d1004	 ldr         r1, [sp, #4]
  01354	e59f002c	 ldr         r0, [pc, #0x2C]
  01358	eb000000	 bl          NKDbgPrintfW
  0135c	e3a03001	 mov         r3, #1
  01360	e58d3024	 str         r3, [sp, #0x24]
  01364	ea000001	 b           |$LN15@SPI_Open|
  01368		 |$LN14@SPI_Open|
  01368	e3a03000	 mov         r3, #0
  0136c	e58d3024	 str         r3, [sp, #0x24]
  01370		 |$LN15@SPI_Open|

; 686  :     return rc;

  01370	e59d3004	 ldr         r3, [sp, #4]
  01374	e58d300c	 str         r3, [sp, #0xC]

; 687  : }

  01378	e59d000c	 ldr         r0, [sp, #0xC]
  0137c	e28dd028	 add         sp, sp, #0x28
  01380	e89d6000	 ldmia       sp, {sp, lr}
  01384	e12fff1e	 bx          lr
  01388		 |$LN19@SPI_Open|
  01388		 |$LN20@SPI_Open|
  01388	00000000	 DCD         |??_C@_1DC@CEBIFIGD@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0138c		 |$LN21@SPI_Open|
  0138c	00000000	 DCD         |dpCurSettings|
  01390		 |$LN22@SPI_Open|
  01390	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01394		 |$LN23@SPI_Open|
  01394	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01398		 |$LN24@SPI_Open|
  01398	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0139c		 |$LN25@SPI_Open|
  0139c	73706949	 DCD         0x73706949
  013a0		 |$LN26@SPI_Open|
  013a0	00000000	 DCD         |??_C@_1HE@LJDLBMKB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe@|
  013a4		 |$LN27@SPI_Open|
  013a4	00000000	 DCD         |??_C@_1FO@EHJJABEK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@|
  013a8		 |$LN28@SPI_Open|
  013a8	73706944	 DCD         0x73706944
  013ac		 |$LN29@SPI_Open|
  013ac	00000000	 DCD         |??_C@_1EG@CMDGJGNK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAO?$AAp?$AAe?$AAn?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  013b0		 |$M45932|

			 ENDP  ; |SPI_Open|

	EXPORT	|??_C@_1CM@ECBAFBND@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GC@NFBCBALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@DADLMPLB@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_Close|
	IMPORT	|SpiDmaDeinit|

  00040			 AREA	 |.pdata|, PDATA
|$T45959| DCD	|$LN16@SPI_Close|
	DCD	0x40007d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@ECBAFBND@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GC@NFBCBALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "T", 0x0, "r"
	DCB	0x0, "a", 0x0, "n", 0x0, "s", 0x0, "f", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@DADLMPLB@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "l"
	DCB	0x0, "o", 0x0, "s", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  013b0			 AREA	 |.text|, CODE, ARM

  013b0		 |SPI_Close| PROC

; 696  : {

  013b0		 |$LN16@SPI_Close|
  013b0	e1a0c00d	 mov         r12, sp
  013b4	e92d0001	 stmdb       sp!, {r0}
  013b8	e92d5000	 stmdb       sp!, {r12, lr}
  013bc	e24dd024	 sub         sp, sp, #0x24
  013c0		 |$M45956|

; 697  :     BOOL rc = FALSE;

  013c0	e3a03000	 mov         r3, #0
  013c4	e58d3004	 str         r3, [sp, #4]

; 698  :     SPI_DEVICE *pDevice;
; 699  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  013c8	e59d302c	 ldr         r3, [sp, #0x2C]
  013cc	e58d3008	 str         r3, [sp, #8]

; 700  : 
; 701  :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Close(0x%08x)\r\n", context));

  013d0	e59f31b0	 ldr         r3, [pc, #0x1B0]
  013d4	e5933440	 ldr         r3, [r3, #0x440]
  013d8	e3130004	 tst         r3, #4
  013dc	0a000005	 beq         |$LN6@SPI_Close|
  013e0	e59d102c	 ldr         r1, [sp, #0x2C]
  013e4	e59f01b4	 ldr         r0, [pc, #0x1B4]
  013e8	eb000000	 bl          NKDbgPrintfW
  013ec	e3a03001	 mov         r3, #1
  013f0	e58d3010	 str         r3, [sp, #0x10]
  013f4	ea000001	 b           |$LN7@SPI_Close|
  013f8		 |$LN6@SPI_Close|
  013f8	e3a03000	 mov         r3, #0
  013fc	e58d3010	 str         r3, [sp, #0x10]
  01400		 |$LN7@SPI_Close|

; 702  : 
; 703  :     // Check if we get correct context
; 704  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  01400	e59d3008	 ldr         r3, [sp, #8]
  01404	e3530000	 cmp         r3, #0
  01408	0a000004	 beq         |$LN2@SPI_Close|
  0140c	e59d3008	 ldr         r3, [sp, #8]
  01410	e5932000	 ldr         r2, [r3]
  01414	e59f3180	 ldr         r3, [pc, #0x180]
  01418	e1520003	 cmp         r2, r3
  0141c	0a00000b	 beq         |$LN3@SPI_Close|
  01420		 |$LN2@SPI_Close|

; 705  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Transfer: "
; 706  :             L"Incorrect context paramer\r\n"
; 707  :         ));

  01420	e59f3160	 ldr         r3, [pc, #0x160]
  01424	e5933440	 ldr         r3, [r3, #0x440]
  01428	e3130001	 tst         r3, #1
  0142c	0a000004	 beq         |$LN8@SPI_Close|
  01430	e59f0160	 ldr         r0, [pc, #0x160]
  01434	eb000000	 bl          NKDbgPrintfW
  01438	e3a03001	 mov         r3, #1
  0143c	e58d3014	 str         r3, [sp, #0x14]
  01440	ea000001	 b           |$LN9@SPI_Close|
  01444		 |$LN8@SPI_Close|
  01444	e3a03000	 mov         r3, #0
  01448	e58d3014	 str         r3, [sp, #0x14]
  0144c		 |$LN9@SPI_Close|

; 708  :         goto cleanUp;

  0144c	ea00003a	 b           |$cleanUp$44779|
  01450		 |$LN3@SPI_Close|

; 709  :     }
; 710  : 
; 711  :     // Shutdown DMA channels
; 712  :     SpiDmaDeinit(pInstance);

  01450	e59d0008	 ldr         r0, [sp, #8]
  01454	eb000000	 bl          SpiDmaDeinit

; 713  : 
; 714  :     // Get device context
; 715  :     pDevice = pInstance->pDevice;

  01458	e59d3008	 ldr         r3, [sp, #8]
  0145c	e2833004	 add         r3, r3, #4
  01460	e5933000	 ldr         r3, [r3]
  01464	e58d3000	 str         r3, [sp]

; 716  : 
; 717  :     // sanity check number of instances
; 718  :     ASSERT(pDevice->instances > 0);

  01468	e59d3000	 ldr         r3, [sp]
  0146c	e2833010	 add         r3, r3, #0x10
  01470	e5933000	 ldr         r3, [r3]
  01474	e3530000	 cmp         r3, #0
  01478	da000002	 ble         |$LN10@SPI_Close|
  0147c	e3a03001	 mov         r3, #1
  01480	e58d3018	 str         r3, [sp, #0x18]
  01484	ea000008	 b           |$LN11@SPI_Close|
  01488		 |$LN10@SPI_Close|
  01488	e3a03c02	 mov         r3, #2, 24
  0148c	e38330ce	 orr         r3, r3, #0xCE
  01490	e59f20fc	 ldr         r2, [pc, #0xFC]
  01494	e59f10f4	 ldr         r1, [pc, #0xF4]
  01498	e59f00ec	 ldr         r0, [pc, #0xEC]
  0149c	eb000000	 bl          NKDbgPrintfW
  014a0	e6000010	 __debugbreak_ce
  014a4	e3a03000	 mov         r3, #0
  014a8	e58d3018	 str         r3, [sp, #0x18]
  014ac		 |$LN11@SPI_Close|

; 719  : 
; 720  :     // Decrement number of open instances
; 721  :     if (InterlockedDecrement(&pDevice->instances) == 0)

  014ac	e59d3000	 ldr         r3, [sp]
  014b0	e2830010	 add         r0, r3, #0x10
  014b4	eb000000	 bl          InterlockedDecrement
  014b8	e58d001c	 str         r0, [sp, #0x1C]
  014bc	e59d301c	 ldr         r3, [sp, #0x1C]
  014c0	e3530000	 cmp         r3, #0
  014c4	1a000018	 bne         |$LN1@SPI_Close|

; 722  :     {
; 723  :         // Get hardware
; 724  : 		WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  014c8	e3e01000	 mvn         r1, #0
  014cc	e59d3000	 ldr         r3, [sp]
  014d0	e283301c	 add         r3, r3, #0x1C
  014d4	e5930000	 ldr         r0, [r3]
  014d8	eb000000	 bl          WaitForSingleObject

; 725  : 
; 726  :         // Set this driver to Active Mode
; 727  :         SetSPIPower(pDevice, D0);

  014dc	e3a01000	 mov         r1, #0
  014e0	e59d0000	 ldr         r0, [sp]
  014e4	eb000000	 bl          SetSPIPower

; 728  : 
; 729  :         // If number of open instances is 0, reset the eSpiMode to unknown and 
; 730  :         // MCSPI_MODULCTRL to 0 so we can change it later.
; 731  :         pDevice->eSpiMode = UNKNOWN;

  014e8	e59d3000	 ldr         r3, [sp]
  014ec	e2832040	 add         r2, r3, #0x40
  014f0	e3a03000	 mov         r3, #0
  014f4	e5823000	 str         r3, [r2]

; 732  :         OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, 0);

  014f8	e59d3000	 ldr         r3, [sp]
  014fc	e2833018	 add         r3, r3, #0x18
  01500	e5933000	 ldr         r3, [r3]
  01504	e2832028	 add         r2, r3, #0x28
  01508	e3a03000	 mov         r3, #0
  0150c	e5823000	 str         r3, [r2]

; 733  : 
; 734  :         // Set this driver to Suspend Mode
; 735  :         SetSPIPower(pDevice, D4);

  01510	e3a01004	 mov         r1, #4
  01514	e59d0000	 ldr         r0, [sp]
  01518	eb000000	 bl          SetSPIPower

; 736  : 
; 737  :         // Release hardware
; 738  : 		ReleaseMutex(pDevice->hControllerMutex);

  0151c	e59d3000	 ldr         r3, [sp]
  01520	e283301c	 add         r3, r3, #0x1C
  01524	e5930000	 ldr         r0, [r3]
  01528	eb000000	 bl          ReleaseMutex
  0152c		 |$LN1@SPI_Close|

; 739  :     }
; 740  : 
; 741  :     // Free instance structure
; 742  :     LocalFree(pInstance);

  0152c	e59d0008	 ldr         r0, [sp, #8]
  01530	eb000000	 bl          LocalFree

; 743  : 
; 744  :     // Done...
; 745  :     rc = TRUE;

  01534	e3a03001	 mov         r3, #1
  01538	e58d3004	 str         r3, [sp, #4]
  0153c		 |$cleanUp$44779|

; 746  : 
; 747  : cleanUp:
; 748  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Close(rc = %d)\r\n", rc));

  0153c	e59f3044	 ldr         r3, [pc, #0x44]
  01540	e5933440	 ldr         r3, [r3, #0x440]
  01544	e3130004	 tst         r3, #4
  01548	0a000005	 beq         |$LN12@SPI_Close|
  0154c	e59d1004	 ldr         r1, [sp, #4]
  01550	e59f002c	 ldr         r0, [pc, #0x2C]
  01554	eb000000	 bl          NKDbgPrintfW
  01558	e3a03001	 mov         r3, #1
  0155c	e58d3020	 str         r3, [sp, #0x20]
  01560	ea000001	 b           |$LN13@SPI_Close|
  01564		 |$LN12@SPI_Close|
  01564	e3a03000	 mov         r3, #0
  01568	e58d3020	 str         r3, [sp, #0x20]
  0156c		 |$LN13@SPI_Close|

; 749  :     return rc;

  0156c	e59d3004	 ldr         r3, [sp, #4]
  01570	e58d300c	 str         r3, [sp, #0xC]

; 750  : }

  01574	e59d000c	 ldr         r0, [sp, #0xC]
  01578	e28dd024	 add         sp, sp, #0x24
  0157c	e89d6000	 ldmia       sp, {sp, lr}
  01580	e12fff1e	 bx          lr
  01584		 |$LN17@SPI_Close|
  01584		 |$LN18@SPI_Close|
  01584	00000000	 DCD         |??_C@_1CM@ECBAFBND@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01588		 |$LN19@SPI_Close|
  01588	00000000	 DCD         |dpCurSettings|
  0158c		 |$LN20@SPI_Close|
  0158c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01590		 |$LN21@SPI_Close|
  01590	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01594		 |$LN22@SPI_Close|
  01594	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01598		 |$LN23@SPI_Close|
  01598	00000000	 DCD         |??_C@_1GC@NFBCBALG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAT?$AAr?$AAa?$AAn?$AAs?$AAf?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc@|
  0159c		 |$LN24@SPI_Close|
  0159c	73706949	 DCD         0x73706949
  015a0		 |$LN25@SPI_Close|
  015a0	00000000	 DCD         |??_C@_1CK@DADLMPLB@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAC?$AAl?$AAo?$AAs?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  015a4		 |$M45957|

			 ENDP  ; |SPI_Close|

	EXPORT	|??_C@_1GE@FNBPJJAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IG@FJNKPEIF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@PICDJLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@KIACGODH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@BLMKNLCC@?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?5?$AAC?$AAo?$AAn?$AAf?$AAi@| [ DATA ] ; `string'
	EXPORT	|SPI_Configure|
	IMPORT	|SpiDmaInit|

  00048			 AREA	 |.pdata|, PDATA
|$T45990| DCD	|$LN39@SPI_Config|
	DCD	0x4000e404

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@FNBPJJAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "i"
	DCB	0x0, "a", 0x0, "l", 0x0, "i", 0x0, "z", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IG@FJNKPEIF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "f"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "l", 0x0, "a"
	DCB	0x0, "v", 0x0, "e", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "v"
	DCB	0x0, "i", 0x0, "c", 0x0, "e", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@PICDJLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "a", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, "e"
	DCB	0x0, "s", 0x0, "s", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@KIACGODH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r"
	DCB	0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@BLMKNLCC@?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?5?$AAC?$AAo?$AAn?$AAf?$AAi@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "f", 0x0, "i", 0x0, "g", 0x0, "u", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "A", 0x0, "d", 0x0, "d", 0x0, "r", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, " ", 0x0, " ", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "f"
	DCB	0x0, "i", 0x0, "g", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  015a4			 AREA	 |.text|, CODE, ARM

  015a4		 |SPI_Configure| PROC

; 759  : {

  015a4		 |$LN39@SPI_Config|
  015a4	e1a0c00d	 mov         r12, sp
  015a8	e92d0007	 stmdb       sp!, {r0 - r2}
  015ac	e92d5000	 stmdb       sp!, {r12, lr}
  015b0	e24dd030	 sub         sp, sp, #0x30
  015b4		 |$M45987|

; 760  :     BOOL rc = FALSE;

  015b4	e3a03000	 mov         r3, #0
  015b8	e58d3004	 str         r3, [sp, #4]

; 761  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  015bc	e59d3038	 ldr         r3, [sp, #0x38]
  015c0	e58d3008	 str         r3, [sp, #8]

; 762  :     SPI_DEVICE *pDevice;
; 763  : 
; 764  :     DEBUGMSG(ZONE_FUNCTION, (L"SPI_Configure Addr = 0x%x  Config = 0x%x\r\n", address, config));

  015c4	e59f3350	 ldr         r3, [pc, #0x350]
  015c8	e5933440	 ldr         r3, [r3, #0x440]
  015cc	e3130004	 tst         r3, #4
  015d0	0a000006	 beq         |$LN21@SPI_Config|
  015d4	e59d2040	 ldr         r2, [sp, #0x40]
  015d8	e59d103c	 ldr         r1, [sp, #0x3C]
  015dc	e59f034c	 ldr         r0, [pc, #0x34C]
  015e0	eb000000	 bl          NKDbgPrintfW
  015e4	e3a03001	 mov         r3, #1
  015e8	e58d3010	 str         r3, [sp, #0x10]
  015ec	ea000001	 b           |$LN22@SPI_Config|
  015f0		 |$LN21@SPI_Config|
  015f0	e3a03000	 mov         r3, #0
  015f4	e58d3010	 str         r3, [sp, #0x10]
  015f8		 |$LN22@SPI_Config|

; 765  : 
; 766  :     // Check if we get correct context
; 767  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  015f8	e59d3008	 ldr         r3, [sp, #8]
  015fc	e3530000	 cmp         r3, #0
  01600	0a000004	 beq         |$LN17@SPI_Config|
  01604	e59d3008	 ldr         r3, [sp, #8]
  01608	e5932000	 ldr         r2, [r3]
  0160c	e59f3318	 ldr         r3, [pc, #0x318]
  01610	e1520003	 cmp         r2, r3
  01614	0a00000b	 beq         |$LN18@SPI_Config|
  01618		 |$LN17@SPI_Config|

; 768  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Configure: "
; 769  :             L"Incorrect context paramer\r\n"
; 770  :         ));

  01618	e59f32fc	 ldr         r3, [pc, #0x2FC]
  0161c	e5933440	 ldr         r3, [r3, #0x440]
  01620	e3130001	 tst         r3, #1
  01624	0a000004	 beq         |$LN23@SPI_Config|
  01628	e59f02f8	 ldr         r0, [pc, #0x2F8]
  0162c	eb000000	 bl          NKDbgPrintfW
  01630	e3a03001	 mov         r3, #1
  01634	e58d3014	 str         r3, [sp, #0x14]
  01638	ea000001	 b           |$LN24@SPI_Config|
  0163c		 |$LN23@SPI_Config|
  0163c	e3a03000	 mov         r3, #0
  01640	e58d3014	 str         r3, [sp, #0x14]
  01644		 |$LN24@SPI_Config|

; 771  :         goto cleanUp;

  01644	ea0000ad	 b           |$cleanUp$44805|
  01648		 |$LN18@SPI_Config|

; 772  :     }
; 773  : 
; 774  :     //  Check channel
; 775  :     if (address >= MCSPI_MAX_CHANNELS) {

  01648	e59d303c	 ldr         r3, [sp, #0x3C]
  0164c	e3530004	 cmp         r3, #4
  01650	3a00000b	 bcc         |$LN16@SPI_Config|

; 776  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Configure: "
; 777  :             L"Incorrect address paramer\r\n"
; 778  :         ));

  01654	e59f32c0	 ldr         r3, [pc, #0x2C0]
  01658	e5933440	 ldr         r3, [r3, #0x440]
  0165c	e3130001	 tst         r3, #1
  01660	0a000004	 beq         |$LN25@SPI_Config|
  01664	e59f02b8	 ldr         r0, [pc, #0x2B8]
  01668	eb000000	 bl          NKDbgPrintfW
  0166c	e3a03001	 mov         r3, #1
  01670	e58d3018	 str         r3, [sp, #0x18]
  01674	ea000001	 b           |$LN26@SPI_Config|
  01678		 |$LN25@SPI_Config|
  01678	e3a03000	 mov         r3, #0
  0167c	e58d3018	 str         r3, [sp, #0x18]
  01680		 |$LN26@SPI_Config|

; 779  :         goto cleanUp;

  01680	ea00009e	 b           |$cleanUp$44805|
  01684		 |$LN16@SPI_Config|

; 780  :     }
; 781  : 
; 782  :     // Get Device
; 783  :     pDevice = pInstance->pDevice;

  01684	e59d3008	 ldr         r3, [sp, #8]
  01688	e2833004	 add         r3, r3, #4
  0168c	e5933000	 ldr         r3, [r3]
  01690	e58d3000	 str         r3, [sp]

; 784  : 
; 785  :     if (address > 0)

  01694	e59d303c	 ldr         r3, [sp, #0x3C]
  01698	e3530000	 cmp         r3, #0
  0169c	9a00001b	 bls         |$LN15@SPI_Config|

; 786  :     {
; 787  :         switch (pDevice->eSpiMode)

  016a0	e59d3000	 ldr         r3, [sp]
  016a4	e2833040	 add         r3, r3, #0x40
  016a8	e5933000	 ldr         r3, [r3]
  016ac	e58d301c	 str         r3, [sp, #0x1C]
  016b0	e59d301c	 ldr         r3, [sp, #0x1C]
  016b4	e3530000	 cmp         r3, #0
  016b8	0a000010	 beq         |$LN11@SPI_Config|
  016bc	e59d301c	 ldr         r3, [sp, #0x1C]
  016c0	e3530002	 cmp         r3, #2
  016c4	0a000000	 beq         |$LN12@SPI_Config|
  016c8	ea000010	 b           |$LN10@SPI_Config|
  016cc		 |$LN12@SPI_Config|

; 788  :         {
; 789  :             case SLAVE:
; 790  :                 DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Configure: "
; 791  :                     L"Incorrect address paramer for slave device\r\n"
; 792  :                 ));

  016cc	e59f3248	 ldr         r3, [pc, #0x248]
  016d0	e5933440	 ldr         r3, [r3, #0x440]
  016d4	e3130001	 tst         r3, #1
  016d8	0a000004	 beq         |$LN27@SPI_Config|
  016dc	e59f023c	 ldr         r0, [pc, #0x23C]
  016e0	eb000000	 bl          NKDbgPrintfW
  016e4	e3a03001	 mov         r3, #1
  016e8	e58d3020	 str         r3, [sp, #0x20]
  016ec	ea000001	 b           |$LN28@SPI_Config|
  016f0		 |$LN27@SPI_Config|
  016f0	e3a03000	 mov         r3, #0
  016f4	e58d3020	 str         r3, [sp, #0x20]
  016f8		 |$LN28@SPI_Config|

; 793  :                 goto cleanUp;

  016f8	ea000080	 b           |$cleanUp$44805|

; 794  :                 break;

  016fc	ea000003	 b           |$LN13@SPI_Config|
  01700		 |$LN11@SPI_Config|

; 795  : 
; 796  :             case UNKNOWN:
; 797  :                 pDevice->eSpiMode = MASTER;

  01700	e59d3000	 ldr         r3, [sp]
  01704	e2832040	 add         r2, r3, #0x40
  01708	e3a03001	 mov         r3, #1
  0170c	e5823000	 str         r3, [r2]
  01710		 |$LN10@SPI_Config|
  01710		 |$LN13@SPI_Config|
  01710		 |$LN15@SPI_Config|

; 798  :                 break;
; 799  : 
; 800  :             default:
; 801  :                 break;
; 802  :         }
; 803  : 
; 804  :     }
; 805  : 
; 806  :     // Set Address and config
; 807  :     pInstance->address = address;

  01710	e59d3008	 ldr         r3, [sp, #8]
  01714	e2832008	 add         r2, r3, #8
  01718	e59d303c	 ldr         r3, [sp, #0x3C]
  0171c	e5823000	 str         r3, [r2]

; 808  :     pInstance->config  = config;

  01720	e59d3008	 ldr         r3, [sp, #8]
  01724	e283200c	 add         r2, r3, #0xC
  01728	e59d3040	 ldr         r3, [sp, #0x40]
  0172c	e5823000	 str         r3, [r2]

; 809  : 
; 810  :     // Get hardware
; 811  : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  01730	e3e01000	 mvn         r1, #0
  01734	e59d3000	 ldr         r3, [sp]
  01738	e283301c	 add         r3, r3, #0x1C
  0173c	e5930000	 ldr         r0, [r3]
  01740	eb000000	 bl          WaitForSingleObject

; 812  : 
; 813  :     // Setting active instance which is needed for context restore
; 814  :     pDevice->pActiveInstance = (void*)pInstance;

  01744	e59d3000	 ldr         r3, [sp]
  01748	e2832fa2	 add         r2, r3, #0xA2, 30
  0174c	e59d3008	 ldr         r3, [sp, #8]
  01750	e5823000	 str         r3, [r2]

; 815  : 
; 816  :     // Set this driver to Active Mode
; 817  :     SetSPIPower(pDevice, D0);

  01754	e3a01000	 mov         r1, #0
  01758	e59d0000	 ldr         r0, [sp]
  0175c	eb000000	 bl          SetSPIPower

; 818  :     
; 819  :     // Configure the channel
; 820  :     switch( address )

  01760	e59d303c	 ldr         r3, [sp, #0x3C]
  01764	e58d3024	 str         r3, [sp, #0x24]
  01768	e59d3024	 ldr         r3, [sp, #0x24]
  0176c	e3530003	 cmp         r3, #3
  01770	8a00003b	 bhi         |$LN3@SPI_Config|
  01774	e59d2024	 ldr         r2, [sp, #0x24]
  01778	e1a03102	 mov         r3, r2, lsl #2
  0177c	e083300f	 add         r3, r3, pc
  01780	e5933004	 ldr         r3, [r3, #4]
  01784	e08ff003	 add         pc, pc, r3
  01788		 |$LN32@SPI_Config|
  01788		 |$LN31@SPI_Config|
  01788		 |$LN33@SPI_Config|
  01788	0000000c	 DCD         0xc
  0178c		 |$LN34@SPI_Config|
  0178c	00000040	 DCD         0x40
  01790		 |$LN35@SPI_Config|
  01790	00000074	 DCD         0x74
  01794		 |$LN36@SPI_Config|
  01794	000000a8	 DCD         0xa8
  01798		 |$LN7@SPI_Config|

; 821  :     {
; 822  :         case 0:
; 823  :             //  Channel 0 configuration
; 824  :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF0);

  01798	e59d3000	 ldr         r3, [sp]
  0179c	e2833018	 add         r3, r3, #0x18
  017a0	e5933000	 ldr         r3, [r3]
  017a4	e283202c	 add         r2, r3, #0x2C
  017a8	e59d3008	 ldr         r3, [sp, #8]
  017ac	e2833010	 add         r3, r3, #0x10
  017b0	e5832000	 str         r2, [r3]

; 825  :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, config);

  017b4	e59d3008	 ldr         r3, [sp, #8]
  017b8	e2833010	 add         r3, r3, #0x10
  017bc	e5932000	 ldr         r2, [r3]
  017c0	e59d3040	 ldr         r3, [sp, #0x40]
  017c4	e5823000	 str         r3, [r2]

; 826  :             break;

  017c8	ea000025	 b           |$LN8@SPI_Config|
  017cc		 |$LN6@SPI_Config|

; 827  : 
; 828  :         case 1:
; 829  :             //  Channel 1 configuration
; 830  :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF1);

  017cc	e59d3000	 ldr         r3, [sp]
  017d0	e2833018	 add         r3, r3, #0x18
  017d4	e5933000	 ldr         r3, [r3]
  017d8	e2832040	 add         r2, r3, #0x40
  017dc	e59d3008	 ldr         r3, [sp, #8]
  017e0	e2833010	 add         r3, r3, #0x10
  017e4	e5832000	 str         r2, [r3]

; 831  :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, config);

  017e8	e59d3008	 ldr         r3, [sp, #8]
  017ec	e2833010	 add         r3, r3, #0x10
  017f0	e5932000	 ldr         r2, [r3]
  017f4	e59d3040	 ldr         r3, [sp, #0x40]
  017f8	e5823000	 str         r3, [r2]

; 832  :             break;

  017fc	ea000018	 b           |$LN8@SPI_Config|
  01800		 |$LN5@SPI_Config|

; 833  : 
; 834  :         case 2:
; 835  :             //  Channel 2 configuration
; 836  :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF2);

  01800	e59d3000	 ldr         r3, [sp]
  01804	e2833018	 add         r3, r3, #0x18
  01808	e5933000	 ldr         r3, [r3]
  0180c	e2832054	 add         r2, r3, #0x54
  01810	e59d3008	 ldr         r3, [sp, #8]
  01814	e2833010	 add         r3, r3, #0x10
  01818	e5832000	 str         r2, [r3]

; 837  :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, config);

  0181c	e59d3008	 ldr         r3, [sp, #8]
  01820	e2833010	 add         r3, r3, #0x10
  01824	e5932000	 ldr         r2, [r3]
  01828	e59d3040	 ldr         r3, [sp, #0x40]
  0182c	e5823000	 str         r3, [r2]

; 838  :             break;

  01830	ea00000b	 b           |$LN8@SPI_Config|
  01834		 |$LN4@SPI_Config|

; 839  : 
; 840  :         case 3:
; 841  :             //  Channel 3 configuration
; 842  :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF3);

  01834	e59d3000	 ldr         r3, [sp]
  01838	e2833018	 add         r3, r3, #0x18
  0183c	e5933000	 ldr         r3, [r3]
  01840	e2832068	 add         r2, r3, #0x68
  01844	e59d3008	 ldr         r3, [sp, #8]
  01848	e2833010	 add         r3, r3, #0x10
  0184c	e5832000	 str         r2, [r3]

; 843  :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, config);

  01850	e59d3008	 ldr         r3, [sp, #8]
  01854	e2833010	 add         r3, r3, #0x10
  01858	e5932000	 ldr         r2, [r3]
  0185c	e59d3040	 ldr         r3, [sp, #0x40]
  01860	e5823000	 str         r3, [r2]
  01864		 |$LN3@SPI_Config|
  01864		 |$LN8@SPI_Config|

; 844  :             break;
; 845  : 
; 846  :         default:
; 847  :             break;
; 848  :     }
; 849  : 
; 850  :     //  Clear out current DMA configuration
; 851  :     SpiDmaDeinit(pInstance);

  01864	e59d0008	 ldr         r0, [sp, #8]
  01868	eb000000	 bl          SpiDmaDeinit

; 852  : 
; 853  :     //  Configure DMA if needed
; 854  :     if( config & (MCSPI_CHCONF_DMAR_ENABLE|MCSPI_CHCONF_DMAW_ENABLE) )

  0186c	e59d3040	 ldr         r3, [sp, #0x40]
  01870	e3130903	 tst         r3, #3, 18
  01874	0a000018	 beq         |$LN2@SPI_Config|

; 855  :     {
; 856  :         if( SpiDmaInit(pInstance) == FALSE ) 

  01878	e59d0008	 ldr         r0, [sp, #8]
  0187c	eb000000	 bl          SpiDmaInit
  01880	e58d0028	 str         r0, [sp, #0x28]
  01884	e59d3028	 ldr         r3, [sp, #0x28]
  01888	e3530000	 cmp         r3, #0
  0188c	1a000012	 bne         |$LN1@SPI_Config|

; 857  :         {
; 858  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Configure: "
; 859  :                 L"DMA initialization failed\r\n"
; 860  :             ));

  01890	e59f3084	 ldr         r3, [pc, #0x84]
  01894	e5933440	 ldr         r3, [r3, #0x440]
  01898	e3130001	 tst         r3, #1
  0189c	0a000004	 beq         |$LN29@SPI_Config|
  018a0	e59f0070	 ldr         r0, [pc, #0x70]
  018a4	eb000000	 bl          NKDbgPrintfW
  018a8	e3a03001	 mov         r3, #1
  018ac	e58d302c	 str         r3, [sp, #0x2C]
  018b0	ea000001	 b           |$LN30@SPI_Config|
  018b4		 |$LN29@SPI_Config|
  018b4	e3a03000	 mov         r3, #0
  018b8	e58d302c	 str         r3, [sp, #0x2C]
  018bc		 |$LN30@SPI_Config|

; 861  : 
; 862  :             // Set this driver to Suspend Mode
; 863  :             SetSPIPower(pDevice, D4);

  018bc	e3a01004	 mov         r1, #4
  018c0	e59d0000	 ldr         r0, [sp]
  018c4	eb000000	 bl          SetSPIPower

; 864  : 
; 865  :             // Release hardware
; 866  : 			ReleaseMutex(pDevice->hControllerMutex);

  018c8	e59d3000	 ldr         r3, [sp]
  018cc	e283301c	 add         r3, r3, #0x1C
  018d0	e5930000	 ldr         r0, [r3]
  018d4	eb000000	 bl          ReleaseMutex

; 867  :             goto cleanUp;

  018d8	ea000008	 b           |$cleanUp$44805|
  018dc		 |$LN1@SPI_Config|
  018dc		 |$LN2@SPI_Config|

; 868  :         }
; 869  :     }
; 870  : 
; 871  :     // Set this driver to Suspend Mode
; 872  :     SetSPIPower(pDevice, D4);

  018dc	e3a01004	 mov         r1, #4
  018e0	e59d0000	 ldr         r0, [sp]
  018e4	eb000000	 bl          SetSPIPower

; 873  :     
; 874  :     // Release hardware
; 875  : 	ReleaseMutex(pDevice->hControllerMutex);

  018e8	e59d3000	 ldr         r3, [sp]
  018ec	e283301c	 add         r3, r3, #0x1C
  018f0	e5930000	 ldr         r0, [r3]
  018f4	eb000000	 bl          ReleaseMutex

; 876  : 
; 877  :     // Success
; 878  :     rc = TRUE;

  018f8	e3a03001	 mov         r3, #1
  018fc	e58d3004	 str         r3, [sp, #4]
  01900		 |$cleanUp$44805|

; 879  : 
; 880  : cleanUp:    
; 881  :     return rc;

  01900	e59d3004	 ldr         r3, [sp, #4]
  01904	e58d300c	 str         r3, [sp, #0xC]

; 882  : }

  01908	e59d000c	 ldr         r0, [sp, #0xC]
  0190c	e28dd030	 add         sp, sp, #0x30
  01910	e89d6000	 ldmia       sp, {sp, lr}
  01914	e12fff1e	 bx          lr
  01918		 |$LN40@SPI_Config|
  01918		 |$LN41@SPI_Config|
  01918	00000000	 DCD         |??_C@_1GE@FNBPJJAM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa@|
  0191c		 |$LN42@SPI_Config|
  0191c	00000000	 DCD         |dpCurSettings|
  01920		 |$LN43@SPI_Config|
  01920	00000000	 DCD         |??_C@_1IG@FJNKPEIF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  01924		 |$LN44@SPI_Config|
  01924	00000000	 DCD         |??_C@_1GE@PICDJLF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  01928		 |$LN45@SPI_Config|
  01928	00000000	 DCD         |??_C@_1GE@KIACGODH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  0192c		 |$LN46@SPI_Config|
  0192c	73706949	 DCD         0x73706949
  01930		 |$LN47@SPI_Config|
  01930	00000000	 DCD         |??_C@_1FG@BLMKNLCC@?$AAS?$AAP?$AAI?$AA_?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAu?$AAr?$AAe?$AA?5?$AAA?$AAd?$AAd?$AAr?$AA?5?$AA?$DN?$AA?5?$AA0?$AAx?$AA?$CF?$AAx?$AA?5?$AA?5?$AAC?$AAo?$AAn?$AAf?$AAi@|
  01934		 |$M45988|

			 ENDP  ; |SPI_Configure|

	EXPORT	|??_C@_1GK@GLGDEFLI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAM?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@JFDDMLBE@?$AA?$CL?$AAS?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAM?$AAo?$AAd?$AAe?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_SetSlaveMode|

  00050			 AREA	 |.pdata|, PDATA
|$T46008| DCD	|$LN13@SPI_SetSla|
	DCD	0x40005b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GK@GLGDEFLI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAM?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "S", 0x0, "e"
	DCB	0x0, "t", 0x0, "S", 0x0, "l", 0x0, "a", 0x0, "v", 0x0, "e"
	DCB	0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, ":", 0x0, " "
	DCB	0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r"
	DCB	0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " "
	DCB	0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@JFDDMLBE@?$AA?$CL?$AAS?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAM?$AAo?$AAd?$AAe?$AA?4?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "S"
	DCB	0x0, "e", 0x0, "t", 0x0, "S", 0x0, "l", 0x0, "a", 0x0, "v"
	DCB	0x0, "e", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "."
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  01934			 AREA	 |.text|, CODE, ARM

  01934		 |SPI_SetSlaveMode| PROC

; 892  : {

  01934		 |$LN13@SPI_SetSla|
  01934	e1a0c00d	 mov         r12, sp
  01938	e92d0001	 stmdb       sp!, {r0}
  0193c	e92d5000	 stmdb       sp!, {r12, lr}
  01940	e24dd018	 sub         sp, sp, #0x18
  01944		 |$M46005|

; 893  :     BOOL rc = FALSE;

  01944	e3a03000	 mov         r3, #0
  01948	e58d3004	 str         r3, [sp, #4]

; 894  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  0194c	e59d3020	 ldr         r3, [sp, #0x20]
  01950	e58d3008	 str         r3, [sp, #8]

; 895  :     SPI_DEVICE *pDevice;
; 896  : 
; 897  :     DEBUGMSG(ZONE_FUNCTION, (L"+SSPI_SetSlaveMode.\r\n"));

  01954	e59f3138	 ldr         r3, [pc, #0x138]
  01958	e5933440	 ldr         r3, [r3, #0x440]
  0195c	e3130004	 tst         r3, #4
  01960	0a000004	 beq         |$LN7@SPI_SetSla|
  01964	e59f0130	 ldr         r0, [pc, #0x130]
  01968	eb000000	 bl          NKDbgPrintfW
  0196c	e3a03001	 mov         r3, #1
  01970	e58d3010	 str         r3, [sp, #0x10]
  01974	ea000001	 b           |$LN8@SPI_SetSla|
  01978		 |$LN7@SPI_SetSla|
  01978	e3a03000	 mov         r3, #0
  0197c	e58d3010	 str         r3, [sp, #0x10]
  01980		 |$LN8@SPI_SetSla|

; 898  : 
; 899  :     // Check if we get correct context
; 900  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  01980	e59d3008	 ldr         r3, [sp, #8]
  01984	e3530000	 cmp         r3, #0
  01988	0a000004	 beq         |$LN3@SPI_SetSla|
  0198c	e59d3008	 ldr         r3, [sp, #8]
  01990	e5932000	 ldr         r2, [r3]
  01994	e59f30fc	 ldr         r3, [pc, #0xFC]
  01998	e1520003	 cmp         r2, r3
  0199c	0a00000b	 beq         |$LN4@SPI_SetSla|
  019a0		 |$LN3@SPI_SetSla|

; 901  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_SetSlaveMode: "
; 902  :             L"Incorrect context paramer\r\n"
; 903  :         ));

  019a0	e59f30ec	 ldr         r3, [pc, #0xEC]
  019a4	e5933440	 ldr         r3, [r3, #0x440]
  019a8	e3130001	 tst         r3, #1
  019ac	0a000004	 beq         |$LN9@SPI_SetSla|
  019b0	e59f00d8	 ldr         r0, [pc, #0xD8]
  019b4	eb000000	 bl          NKDbgPrintfW
  019b8	e3a03001	 mov         r3, #1
  019bc	e58d3014	 str         r3, [sp, #0x14]
  019c0	ea000001	 b           |$LN10@SPI_SetSla|
  019c4		 |$LN9@SPI_SetSla|
  019c4	e3a03000	 mov         r3, #0
  019c8	e58d3014	 str         r3, [sp, #0x14]
  019cc		 |$LN10@SPI_SetSla|

; 904  :         goto cleanUp;

  019cc	ea000029	 b           |$cleanUp$44859|
  019d0		 |$LN4@SPI_SetSla|

; 905  :     }
; 906  : 
; 907  :     // Get Device
; 908  :     pDevice = pInstance->pDevice;

  019d0	e59d3008	 ldr         r3, [sp, #8]
  019d4	e2833004	 add         r3, r3, #4
  019d8	e5933000	 ldr         r3, [r3]
  019dc	e58d3000	 str         r3, [sp]

; 909  : 
; 910  :     // once we set eSpiMode to MASTER(someone configured channel 1 to N), we can't 
; 911  :     // change it back
; 912  :     if (pDevice->eSpiMode == MASTER)

  019e0	e59d3000	 ldr         r3, [sp]
  019e4	e2833040	 add         r3, r3, #0x40
  019e8	e5933000	 ldr         r3, [r3]
  019ec	e3530001	 cmp         r3, #1
  019f0	1a000000	 bne         |$LN2@SPI_SetSla|

; 913  :     {
; 914  :         goto cleanUp;

  019f4	ea00001f	 b           |$cleanUp$44859|
  019f8		 |$LN2@SPI_SetSla|

; 915  :     }
; 916  :    
; 917  :     if (pDevice->eSpiMode == UNKNOWN)

  019f8	e59d3000	 ldr         r3, [sp]
  019fc	e2833040	 add         r3, r3, #0x40
  01a00	e5933000	 ldr         r3, [r3]
  01a04	e3530000	 cmp         r3, #0
  01a08	1a000018	 bne         |$LN1@SPI_SetSla|

; 918  :     {
; 919  :         // Get hardware
; 920  : 		WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  01a0c	e3e01000	 mvn         r1, #0
  01a10	e59d3000	 ldr         r3, [sp]
  01a14	e283301c	 add         r3, r3, #0x1C
  01a18	e5930000	 ldr         r0, [r3]
  01a1c	eb000000	 bl          WaitForSingleObject

; 921  : 
; 922  :         // Setting active instance which is needed for context restore
; 923  :         pDevice->pActiveInstance = (void*)pInstance;

  01a20	e59d3000	 ldr         r3, [sp]
  01a24	e2832fa2	 add         r2, r3, #0xA2, 30
  01a28	e59d3008	 ldr         r3, [sp, #8]
  01a2c	e5823000	 str         r3, [r2]

; 924  : 
; 925  : 
; 926  :         // Set this driver to Active Mode
; 927  :         SetSPIPower(pDevice, D0);

  01a30	e3a01000	 mov         r1, #0
  01a34	e59d0000	 ldr         r0, [sp]
  01a38	eb000000	 bl          SetSPIPower

; 928  : 
; 929  :         OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, MCSPI_MS_BIT);

  01a3c	e59d3000	 ldr         r3, [sp]
  01a40	e2833018	 add         r3, r3, #0x18
  01a44	e5933000	 ldr         r3, [r3]
  01a48	e2832028	 add         r2, r3, #0x28
  01a4c	e3a03004	 mov         r3, #4
  01a50	e5823000	 str         r3, [r2]

; 930  : 
; 931  :         // Set this driver to Suspend Mode
; 932  :         SetSPIPower(pDevice, D4);

  01a54	e3a01004	 mov         r1, #4
  01a58	e59d0000	 ldr         r0, [sp]
  01a5c	eb000000	 bl          SetSPIPower

; 933  : 
; 934  :         // Release hardware
; 935  : 		ReleaseMutex(pDevice->hControllerMutex);

  01a60	e59d3000	 ldr         r3, [sp]
  01a64	e283301c	 add         r3, r3, #0x1C
  01a68	e5930000	 ldr         r0, [r3]
  01a6c	eb000000	 bl          ReleaseMutex
  01a70		 |$LN1@SPI_SetSla|

; 936  :     }
; 937  : 
; 938  :     // Success
; 939  :     rc = TRUE;

  01a70	e3a03001	 mov         r3, #1
  01a74	e58d3004	 str         r3, [sp, #4]
  01a78		 |$cleanUp$44859|

; 940  : 
; 941  : cleanUp:
; 942  :     return rc;

  01a78	e59d3004	 ldr         r3, [sp, #4]
  01a7c	e58d300c	 str         r3, [sp, #0xC]

; 943  : }

  01a80	e59d000c	 ldr         r0, [sp, #0xC]
  01a84	e28dd018	 add         sp, sp, #0x18
  01a88	e89d6000	 ldmia       sp, {sp, lr}
  01a8c	e12fff1e	 bx          lr
  01a90		 |$LN14@SPI_SetSla|
  01a90		 |$LN15@SPI_SetSla|
  01a90	00000000	 DCD         |??_C@_1GK@GLGDEFLI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAM?$AAo?$AAd?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe@|
  01a94		 |$LN16@SPI_SetSla|
  01a94	00000000	 DCD         |dpCurSettings|
  01a98		 |$LN17@SPI_SetSla|
  01a98	73706949	 DCD         0x73706949
  01a9c		 |$LN18@SPI_SetSla|
  01a9c	00000000	 DCD         |??_C@_1CM@JFDDMLBE@?$AA?$CL?$AAS?$AAS?$AAP?$AAI?$AA_?$AAS?$AAe?$AAt?$AAS?$AAl?$AAa?$AAv?$AAe?$AAM?$AAo?$AAd?$AAe?$AA?4?$AA?$AN?$AA?6?$AA?$AA@|
  01aa0		 |$M46006|

			 ENDP  ; |SPI_SetSlaveMode|

	EXPORT	|??_C@_1CK@JPEIOGNE@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@EGOEPLOP@?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_DmaRead|
	EXPORT	|SpiDmaRxEnabled|
	EXPORT	|??_C@_1FK@OJHLPFHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EI@PICDPEI@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'
	EXPORT	|SPI_Read|
	IMPORT	|StallExecution|

  00058			 AREA	 |.pdata|, PDATA
|$T46027| DCD	|$LN28@SPI_Read|
	DCD	0x4000f004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@JPEIOGNE@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@EGOEPLOP@?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e"
	DCB	0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@OJHLPFHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@PICDPEI@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "R", 0x0, "e"
	DCB	0x0, "a", 0x0, "d", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  01aa0			 AREA	 |.text|, CODE, ARM

  01aa0		 |SPI_Read| PROC

; 959  : {

  01aa0		 |$LN28@SPI_Read|
  01aa0	e1a0c00d	 mov         r12, sp
  01aa4	e92d0007	 stmdb       sp!, {r0 - r2}
  01aa8	e92d5000	 stmdb       sp!, {r12, lr}
  01aac	e24dd038	 sub         sp, sp, #0x38
  01ab0		 |$M46024|

; 960  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  01ab0	e59d3040	 ldr         r3, [sp, #0x40]
  01ab4	e58d3010	 str         r3, [sp, #0x10]

; 961  :     SPI_DEVICE *pDevice;
; 962  :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 963  :     UCHAR* pData = (UCHAR*)pBuffer;

  01ab8	e59d3044	 ldr         r3, [sp, #0x44]
  01abc	e58d3008	 str         r3, [sp, #8]

; 964  :     DWORD dwWordLen;
; 965  :     DWORD dwCount = 0;

  01ac0	e3a03000	 mov         r3, #0
  01ac4	e58d300c	 str         r3, [sp, #0xC]

; 966  :     DWORD dwWait;
; 967  : 
; 968  :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Read(0x%08x, 0x%08x, 0x%08x)\r\n", context, pBuffer, size));

  01ac8	e59f337c	 ldr         r3, [pc, #0x37C]
  01acc	e5933440	 ldr         r3, [r3, #0x440]
  01ad0	e3130004	 tst         r3, #4
  01ad4	0a000007	 beq         |$LN18@SPI_Read|
  01ad8	e59d3048	 ldr         r3, [sp, #0x48]
  01adc	e59d2044	 ldr         r2, [sp, #0x44]
  01ae0	e59d1040	 ldr         r1, [sp, #0x40]
  01ae4	e59f0370	 ldr         r0, [pc, #0x370]
  01ae8	eb000000	 bl          NKDbgPrintfW
  01aec	e3a03001	 mov         r3, #1
  01af0	e58d3020	 str         r3, [sp, #0x20]
  01af4	ea000001	 b           |$LN19@SPI_Read|
  01af8		 |$LN18@SPI_Read|
  01af8	e3a03000	 mov         r3, #0
  01afc	e58d3020	 str         r3, [sp, #0x20]
  01b00		 |$LN19@SPI_Read|

; 969  : 
; 970  :     // Check if we get correct context
; 971  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  01b00	e59d3010	 ldr         r3, [sp, #0x10]
  01b04	e3530000	 cmp         r3, #0
  01b08	0a000004	 beq         |$LN14@SPI_Read|
  01b0c	e59d3010	 ldr         r3, [sp, #0x10]
  01b10	e5932000	 ldr         r2, [r3]
  01b14	e59f333c	 ldr         r3, [pc, #0x33C]
  01b18	e1520003	 cmp         r2, r3
  01b1c	0a00000d	 beq         |$LN15@SPI_Read|
  01b20		 |$LN14@SPI_Read|

; 972  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Read: "
; 973  :             L"Incorrect context paramer\r\n"
; 974  :         ));

  01b20	e59f3324	 ldr         r3, [pc, #0x324]
  01b24	e5933440	 ldr         r3, [r3, #0x440]
  01b28	e3130001	 tst         r3, #1
  01b2c	0a000004	 beq         |$LN20@SPI_Read|
  01b30	e59f031c	 ldr         r0, [pc, #0x31C]
  01b34	eb000000	 bl          NKDbgPrintfW
  01b38	e3a03001	 mov         r3, #1
  01b3c	e58d3024	 str         r3, [sp, #0x24]
  01b40	ea000001	 b           |$LN21@SPI_Read|
  01b44		 |$LN20@SPI_Read|
  01b44	e3a03000	 mov         r3, #0
  01b48	e58d3024	 str         r3, [sp, #0x24]
  01b4c		 |$LN21@SPI_Read|

; 975  :         return 0;

  01b4c	e3a03000	 mov         r3, #0
  01b50	e58d301c	 str         r3, [sp, #0x1C]
  01b54	ea0000b7	 b           |$LN16@SPI_Read|
  01b58		 |$LN15@SPI_Read|

; 976  :     }
; 977  : 
; 978  :     //  Call DMA function if DMA enabled
; 979  :     if( SpiDmaRxEnabled(pInstance) )

  01b58	e59d0010	 ldr         r0, [sp, #0x10]
  01b5c	eb000000	 bl          SpiDmaRxEnabled
  01b60	e58d0028	 str         r0, [sp, #0x28]
  01b64	e59d3028	 ldr         r3, [sp, #0x28]
  01b68	e3530000	 cmp         r3, #0
  01b6c	0a000007	 beq         |$LN13@SPI_Read|

; 980  :     {
; 981  :         return SPI_DmaRead(context, pBuffer, size);

  01b70	e59d2048	 ldr         r2, [sp, #0x48]
  01b74	e59d1044	 ldr         r1, [sp, #0x44]
  01b78	e59d0040	 ldr         r0, [sp, #0x40]
  01b7c	eb000000	 bl          SPI_DmaRead
  01b80	e58d002c	 str         r0, [sp, #0x2C]
  01b84	e59d302c	 ldr         r3, [sp, #0x2C]
  01b88	e58d301c	 str         r3, [sp, #0x1C]
  01b8c	ea0000a9	 b           |$LN16@SPI_Read|
  01b90		 |$LN13@SPI_Read|

; 982  :     }
; 983  : 
; 984  :     // Get pointers to registers
; 985  :     pDevice = pInstance->pDevice;

  01b90	e59d3010	 ldr         r3, [sp, #0x10]
  01b94	e2833004	 add         r3, r3, #4
  01b98	e5933000	 ldr         r3, [r3]
  01b9c	e58d3004	 str         r3, [sp, #4]

; 986  :     pSPIChannelRegs = pInstance->pSPIChannelRegs;

  01ba0	e59d3010	 ldr         r3, [sp, #0x10]
  01ba4	e2833010	 add         r3, r3, #0x10
  01ba8	e5933000	 ldr         r3, [r3]
  01bac	e58d3014	 str         r3, [sp, #0x14]

; 987  : 
; 988  :     // Get the word length of the data
; 989  :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  01bb0	e59d3010	 ldr         r3, [sp, #0x10]
  01bb4	e283300c	 add         r3, r3, #0xC
  01bb8	e5933000	 ldr         r3, [r3]
  01bbc	e1a03a03	 mov         r3, r3, lsl #20
  01bc0	e1a03da3	 mov         r3, r3, lsr #27
  01bc4	e2833001	 add         r3, r3, #1
  01bc8	e58d3018	 str         r3, [sp, #0x18]

; 990  : 
; 991  :     // Get hardware
; 992  : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  01bcc	e3e01000	 mvn         r1, #0
  01bd0	e59d3004	 ldr         r3, [sp, #4]
  01bd4	e283301c	 add         r3, r3, #0x1C
  01bd8	e5930000	 ldr         r0, [r3]
  01bdc	eb000000	 bl          WaitForSingleObject

; 993  :     
; 994  :     // Set this driver to Active Mode
; 995  :     SetSPIPower(pDevice, D0);

  01be0	e3a01000	 mov         r1, #0
  01be4	e59d0004	 ldr         r0, [sp, #4]
  01be8	eb000000	 bl          SetSPIPower

; 996  :     
; 997  :     // Enable the channel
; 998  : 	if (!pInstance->exclusiveAccess)

  01bec	e59d3010	 ldr         r3, [sp, #0x10]
  01bf0	e2833014	 add         r3, r3, #0x14
  01bf4	e5933000	 ldr         r3, [r3]
  01bf8	e3530000	 cmp         r3, #0
  01bfc	1a000006	 bne         |$LN12@SPI_Read|

; 999  :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  01c00	e59d3014	 ldr         r3, [sp, #0x14]
  01c04	e2833008	 add         r3, r3, #8
  01c08	e5933000	 ldr         r3, [r3]
  01c0c	e3832001	 orr         r2, r3, #1
  01c10	e59d3014	 ldr         r3, [sp, #0x14]
  01c14	e2833008	 add         r3, r3, #8
  01c18	e5832000	 str         r2, [r3]
  01c1c		 |$LN12@SPI_Read|

; 1000 : 
; 1001 :     // Write out the data
; 1002 :     for( dwCount = 0; dwCount < size; )

  01c1c	e3a03000	 mov         r3, #0
  01c20	e58d300c	 str         r3, [sp, #0xC]
  01c24		 |$LN11@SPI_Read|
  01c24	e59d200c	 ldr         r2, [sp, #0xC]
  01c28	e59d3048	 ldr         r3, [sp, #0x48]
  01c2c	e1520003	 cmp         r2, r3
  01c30	2a00005e	 bcs         |$LN10@SPI_Read|

; 1003 :     {
; 1004 :         //  Wait for RX register to fill
; 1005 :         dwWait = pDevice->timeout;

  01c34	e59d3004	 ldr         r3, [sp, #4]
  01c38	e2833028	 add         r3, r3, #0x28
  01c3c	e5933000	 ldr         r3, [r3]
  01c40	e58d3000	 str         r3, [sp]
  01c44		 |$LN9@SPI_Read|

; 1006 :         while(dwWait && !(INREG32(&pSPIChannelRegs->MCSPI_CHSTATUS) & MCSPI_CHSTAT_RX_FULL))

  01c44	e59d3000	 ldr         r3, [sp]
  01c48	e3530000	 cmp         r3, #0
  01c4c	0a00000a	 beq         |$LN8@SPI_Read|
  01c50	e59d3014	 ldr         r3, [sp, #0x14]
  01c54	e2833004	 add         r3, r3, #4
  01c58	e5933000	 ldr         r3, [r3]
  01c5c	e3130001	 tst         r3, #1
  01c60	1a000005	 bne         |$LN8@SPI_Read|

; 1007 :         {
; 1008 :             StallExecution(1);

  01c64	e3a00001	 mov         r0, #1
  01c68	eb000000	 bl          StallExecution

; 1009 :             dwWait--;

  01c6c	e59d3000	 ldr         r3, [sp]
  01c70	e2433001	 sub         r3, r3, #1
  01c74	e58d3000	 str         r3, [sp]

; 1010 :         }

  01c78	eafffff1	 b           |$LN9@SPI_Read|
  01c7c		 |$LN8@SPI_Read|

; 1011 : 
; 1012 :         //  Check if timeout occured
; 1013 :         if( dwWait == 0 )

  01c7c	e59d3000	 ldr         r3, [sp]
  01c80	e3530000	 cmp         r3, #0
  01c84	1a00001f	 bne         |$LN7@SPI_Read|

; 1014 :         {
; 1015 :             DEBUGMSG(ZONE_ERROR, (L"SPI_Read timeout\r\n"));

  01c88	e59f31bc	 ldr         r3, [pc, #0x1BC]
  01c8c	e5933440	 ldr         r3, [r3, #0x440]
  01c90	e3130001	 tst         r3, #1
  01c94	0a000004	 beq         |$LN22@SPI_Read|
  01c98	e59f01b0	 ldr         r0, [pc, #0x1B0]
  01c9c	eb000000	 bl          NKDbgPrintfW
  01ca0	e3a03001	 mov         r3, #1
  01ca4	e58d3030	 str         r3, [sp, #0x30]
  01ca8	ea000001	 b           |$LN23@SPI_Read|
  01cac		 |$LN22@SPI_Read|
  01cac	e3a03000	 mov         r3, #0
  01cb0	e58d3030	 str         r3, [sp, #0x30]
  01cb4		 |$LN23@SPI_Read|

; 1016 : 
; 1017 : 	        // Disable the channel.
; 1018 : 			if (!pInstance->exclusiveAccess)

  01cb4	e59d3010	 ldr         r3, [sp, #0x10]
  01cb8	e2833014	 add         r3, r3, #0x14
  01cbc	e5933000	 ldr         r3, [r3]
  01cc0	e3530000	 cmp         r3, #0
  01cc4	1a000007	 bne         |$LN6@SPI_Read|

; 1019 : 	        	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  01cc8	e59d3014	 ldr         r3, [sp, #0x14]
  01ccc	e2833008	 add         r3, r3, #8
  01cd0	e5932000	 ldr         r2, [r3]
  01cd4	e3e03001	 mvn         r3, #1
  01cd8	e0022003	 and         r2, r2, r3
  01cdc	e59d3014	 ldr         r3, [sp, #0x14]
  01ce0	e2833008	 add         r3, r3, #8
  01ce4	e5832000	 str         r2, [r3]
  01ce8		 |$LN6@SPI_Read|

; 1020 : 
; 1021 :             // Set this driver to Suspend Mode
; 1022 :             SetSPIPower(pDevice, D4);

  01ce8	e3a01004	 mov         r1, #4
  01cec	e59d0004	 ldr         r0, [sp, #4]
  01cf0	eb000000	 bl          SetSPIPower

; 1023 : 
; 1024 :             // Release hardware
; 1025 : 			ReleaseMutex(pDevice->hControllerMutex);

  01cf4	e59d3004	 ldr         r3, [sp, #4]
  01cf8	e283301c	 add         r3, r3, #0x1C
  01cfc	e5930000	 ldr         r0, [r3]
  01d00	eb000000	 bl          ReleaseMutex

; 1026 : 
; 1027 :             goto clean;

  01d04	ea00003d	 b           |$clean$44907|
  01d08		 |$LN7@SPI_Read|

; 1028 :         }
; 1029 : 
; 1030 : 
; 1031 :         //  Read in data on byte/word/dword boundaries
; 1032 :         if( dwWordLen > 16 )

  01d08	e59d3018	 ldr         r3, [sp, #0x18]
  01d0c	e3530010	 cmp         r3, #0x10
  01d10	9a00000a	 bls         |$LN5@SPI_Read|

; 1033 :         {
; 1034 :             *(UINT32*)(&pData[dwCount]) = INREG32(&pSPIChannelRegs->MCSPI_RX);   

  01d14	e59d3014	 ldr         r3, [sp, #0x14]
  01d18	e2831010	 add         r1, r3, #0x10
  01d1c	e59d2008	 ldr         r2, [sp, #8]
  01d20	e59d300c	 ldr         r3, [sp, #0xC]
  01d24	e0822003	 add         r2, r2, r3
  01d28	e5913000	 ldr         r3, [r1]
  01d2c	e5823000	 str         r3, [r2]

; 1035 :             dwCount += sizeof(UINT32);

  01d30	e59d300c	 ldr         r3, [sp, #0xC]
  01d34	e2833004	 add         r3, r3, #4
  01d38	e58d300c	 str         r3, [sp, #0xC]
  01d3c	ea00001a	 b           |$LN4@SPI_Read|
  01d40		 |$LN5@SPI_Read|

; 1036 :         }
; 1037 :         else if( dwWordLen > 8 )

  01d40	e59d3018	 ldr         r3, [sp, #0x18]
  01d44	e3530008	 cmp         r3, #8
  01d48	9a00000c	 bls         |$LN3@SPI_Read|

; 1038 :         {
; 1039 :             *(UINT16*)(&pData[dwCount]) = (UINT16) INREG32(&pSPIChannelRegs->MCSPI_RX);   

  01d4c	e59d3014	 ldr         r3, [sp, #0x14]
  01d50	e2833010	 add         r3, r3, #0x10
  01d54	e5933000	 ldr         r3, [r3]
  01d58	e1a01803	 mov         r1, r3, lsl #16
  01d5c	e1a01821	 mov         r1, r1, lsr #16
  01d60	e59d2008	 ldr         r2, [sp, #8]
  01d64	e59d300c	 ldr         r3, [sp, #0xC]
  01d68	e0823003	 add         r3, r2, r3
  01d6c	e1c310b0	 strh        r1, [r3]

; 1040 :             dwCount += sizeof(UINT16);

  01d70	e59d300c	 ldr         r3, [sp, #0xC]
  01d74	e2833002	 add         r3, r3, #2
  01d78	e58d300c	 str         r3, [sp, #0xC]

; 1041 :         }
; 1042 :         else

  01d7c	ea00000a	 b           |$LN2@SPI_Read|
  01d80		 |$LN3@SPI_Read|

; 1043 :         {
; 1044 :             *(UINT8*)(&pData[dwCount]) = (UINT8) INREG32(&pSPIChannelRegs->MCSPI_RX);   

  01d80	e59d3014	 ldr         r3, [sp, #0x14]
  01d84	e2833010	 add         r3, r3, #0x10
  01d88	e5933000	 ldr         r3, [r3]
  01d8c	e20310ff	 and         r1, r3, #0xFF
  01d90	e59d2008	 ldr         r2, [sp, #8]
  01d94	e59d300c	 ldr         r3, [sp, #0xC]
  01d98	e0823003	 add         r3, r2, r3
  01d9c	e5c31000	 strb        r1, [r3]

; 1045 :             dwCount += sizeof(UINT8);

  01da0	e59d300c	 ldr         r3, [sp, #0xC]
  01da4	e2833001	 add         r3, r3, #1
  01da8	e58d300c	 str         r3, [sp, #0xC]
  01dac		 |$LN2@SPI_Read|
  01dac		 |$LN4@SPI_Read|

; 1046 :         }   
; 1047 :     }

  01dac	eaffff9c	 b           |$LN11@SPI_Read|
  01db0		 |$LN10@SPI_Read|

; 1048 :     
; 1049 :     // Disable the channel.
; 1050 : 	if (!pInstance->exclusiveAccess)

  01db0	e59d3010	 ldr         r3, [sp, #0x10]
  01db4	e2833014	 add         r3, r3, #0x14
  01db8	e5933000	 ldr         r3, [r3]
  01dbc	e3530000	 cmp         r3, #0
  01dc0	1a000007	 bne         |$LN1@SPI_Read|

; 1051 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  01dc4	e59d3014	 ldr         r3, [sp, #0x14]
  01dc8	e2833008	 add         r3, r3, #8
  01dcc	e5932000	 ldr         r2, [r3]
  01dd0	e3e03001	 mvn         r3, #1
  01dd4	e0022003	 and         r2, r2, r3
  01dd8	e59d3014	 ldr         r3, [sp, #0x14]
  01ddc	e2833008	 add         r3, r3, #8
  01de0	e5832000	 str         r2, [r3]
  01de4		 |$LN1@SPI_Read|

; 1052 : 
; 1053 :     // Set this driver to Suspend Mode
; 1054 :     SetSPIPower(pDevice, D4);

  01de4	e3a01004	 mov         r1, #4
  01de8	e59d0004	 ldr         r0, [sp, #4]
  01dec	eb000000	 bl          SetSPIPower

; 1055 : 
; 1056 :     // Release hardware
; 1057 : 	ReleaseMutex(pDevice->hControllerMutex);

  01df0	e59d3004	 ldr         r3, [sp, #4]
  01df4	e283301c	 add         r3, r3, #0x1C
  01df8	e5930000	 ldr         r0, [r3]
  01dfc	eb000000	 bl          ReleaseMutex
  01e00		 |$clean$44907|

; 1058 : 
; 1059 : clean:
; 1060 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Read(rc = %d)\r\n", dwCount));

  01e00	e59f3044	 ldr         r3, [pc, #0x44]
  01e04	e5933440	 ldr         r3, [r3, #0x440]
  01e08	e3130004	 tst         r3, #4
  01e0c	0a000005	 beq         |$LN24@SPI_Read|
  01e10	e59d100c	 ldr         r1, [sp, #0xC]
  01e14	e59f002c	 ldr         r0, [pc, #0x2C]
  01e18	eb000000	 bl          NKDbgPrintfW
  01e1c	e3a03001	 mov         r3, #1
  01e20	e58d3034	 str         r3, [sp, #0x34]
  01e24	ea000001	 b           |$LN25@SPI_Read|
  01e28		 |$LN24@SPI_Read|
  01e28	e3a03000	 mov         r3, #0
  01e2c	e58d3034	 str         r3, [sp, #0x34]
  01e30		 |$LN25@SPI_Read|

; 1061 : 	return dwCount;

  01e30	e59d300c	 ldr         r3, [sp, #0xC]
  01e34	e58d301c	 str         r3, [sp, #0x1C]
  01e38		 |$LN16@SPI_Read|

; 1062 : }

  01e38	e59d001c	 ldr         r0, [sp, #0x1C]
  01e3c	e28dd038	 add         sp, sp, #0x38
  01e40	e89d6000	 ldmia       sp, {sp, lr}
  01e44	e12fff1e	 bx          lr
  01e48		 |$LN29@SPI_Read|
  01e48		 |$LN30@SPI_Read|
  01e48	00000000	 DCD         |??_C@_1CK@JPEIOGNE@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  01e4c		 |$LN31@SPI_Read|
  01e4c	00000000	 DCD         |dpCurSettings|
  01e50		 |$LN32@SPI_Read|
  01e50	00000000	 DCD         |??_C@_1CG@EGOEPLOP@?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  01e54		 |$LN33@SPI_Read|
  01e54	00000000	 DCD         |??_C@_1FK@OJHLPFHK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe@|
  01e58		 |$LN34@SPI_Read|
  01e58	73706949	 DCD         0x73706949
  01e5c		 |$LN35@SPI_Read|
  01e5c	00000000	 DCD         |??_C@_1EI@PICDPEI@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  01e60		 |$M46025|

			 ENDP  ; |SPI_Read|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T46042| DCD	|$LN7@SpiDmaRxEn|
	DCD	0x40001404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SpiDmaRxEnabled| PROC

; 164  : {

  00000		 |$LN7@SpiDmaRxEn|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46039|

; 165  :     //  Return enabled BOOL
; 166  :     return( pInstance->hRxDmaChannel != NULL );

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e283301c	 add         r3, r3, #0x1C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000002	 beq         |$LN3@SpiDmaRxEn|
  00024	e3a03001	 mov         r3, #1
  00028	e58d3004	 str         r3, [sp, #4]
  0002c	ea000001	 b           |$LN4@SpiDmaRxEn|
  00030		 |$LN3@SpiDmaRxEn|
  00030	e3a03000	 mov         r3, #0
  00034	e58d3004	 str         r3, [sp, #4]
  00038		 |$LN4@SpiDmaRxEn|
  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e58d3000	 str         r3, [sp]

; 167  : }

  00040	e59d0000	 ldr         r0, [sp]
  00044	e28dd008	 add         sp, sp, #8
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M46040|

			 ENDP  ; |SpiDmaRxEnabled|

	EXPORT	|??_C@_1DA@HPKLIOJL@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EA@NFKHEFID@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DmaClearStatus|
	EXPORT	|DmaGetStatus|
	EXPORT	|DmaStop|
	EXPORT	|??_C@_1FI@CAOCAGJP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp@| [ DATA ] ; `string'
	EXPORT	|DmaStart|
	EXPORT	|??_C@_1HK@EPFNDGNI@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$CI?$AA?$CD?$AA?5?$AAe?$AAl?$AAe?$AAm?$AAe@| [ DATA ] ; `string'
	EXPORT	|DmaSetElementAndFrameCount|
	EXPORT	|??_C@_1EO@KFIGMCHC@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@| [ DATA ] ; `string'
	IMPORT	|memcpy|
	IMPORT	|DmaInterruptDone|
	IMPORT	|__rt_udiv|

  00060			 AREA	 |.pdata|, PDATA
|$T46065| DCD	|$LN28@SPI_DmaRea|
	DCD	0x40011e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@HPKLIOJL@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "("
	DCB	0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%"
	DCB	0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@NFKHEFID@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FI@CAOCAGJP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u"
	DCB	0x0, "p", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@EPFNDGNI@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$CI?$AA?$CD?$AA?5?$AAe?$AAl?$AAe?$AAm?$AAe@| DCB " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, ":"
	DCB	0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " ", 0x0, "S"
	DCB	0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " ", 0x0, "("
	DCB	0x0, "#", 0x0, " ", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "m"
	DCB	0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, ",", 0x0, " "
	DCB	0x0, "e", 0x0, "l", 0x0, "e", 0x0, "m", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, ")"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ","
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EO@KFIGMCHC@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  01e60			 AREA	 |.text|, CODE, ARM

  01e60		 |SPI_DmaRead| PROC

; 1077 : {

  01e60		 |$LN28@SPI_DmaRea|
  01e60	e1a0c00d	 mov         r12, sp
  01e64	e92d0007	 stmdb       sp!, {r0 - r2}
  01e68	e92d5000	 stmdb       sp!, {r12, lr}
  01e6c	e24dd04c	 sub         sp, sp, #0x4C
  01e70		 |$M46062|

; 1078 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  01e70	e59d3054	 ldr         r3, [sp, #0x54]
  01e74	e58d3018	 str         r3, [sp, #0x18]

; 1079 :     SPI_DEVICE *pDevice;
; 1080 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1081 :     UCHAR* pData = (UCHAR*)pBuffer;

  01e78	e59d3058	 ldr         r3, [sp, #0x58]
  01e7c	e58d300c	 str         r3, [sp, #0xC]

; 1082 :     DWORD dwWordLen;
; 1083 :     DWORD dwWordSize;
; 1084 :     DWORD dwCount = 0;

  01e80	e3a03000	 mov         r3, #0
  01e84	e58d3010	 str         r3, [sp, #0x10]

; 1085 :     DWORD dwDmaSize;
; 1086 :     DWORD dwDmaStatus;
; 1087 : 
; 1088 :     DEBUGMSG(ZONE_DMA, (L"+SPI_DmaRead(0x%08x, 0x%08x, 0x%08x)\r\n", context, pBuffer, size));

  01e88	e59f3424	 ldr         r3, [pc, #0x424]
  01e8c	e5933440	 ldr         r3, [r3, #0x440]
  01e90	e3130020	 tst         r3, #0x20
  01e94	0a000007	 beq         |$LN12@SPI_DmaRea|
  01e98	e59d305c	 ldr         r3, [sp, #0x5C]
  01e9c	e59d2058	 ldr         r2, [sp, #0x58]
  01ea0	e59d1054	 ldr         r1, [sp, #0x54]
  01ea4	e59f0428	 ldr         r0, [pc, #0x428]
  01ea8	eb000000	 bl          NKDbgPrintfW
  01eac	e3a03001	 mov         r3, #1
  01eb0	e58d3028	 str         r3, [sp, #0x28]
  01eb4	ea000001	 b           |$LN13@SPI_DmaRea|
  01eb8		 |$LN12@SPI_DmaRea|
  01eb8	e3a03000	 mov         r3, #0
  01ebc	e58d3028	 str         r3, [sp, #0x28]
  01ec0		 |$LN13@SPI_DmaRea|

; 1089 : 
; 1090 :     // We don't need to check instance since it's already checked by caller    
; 1091 :     ASSERT(pInstance->cookie == SPI_INSTANCE_COOKIE);

  01ec0	e59d3018	 ldr         r3, [sp, #0x18]
  01ec4	e5932000	 ldr         r2, [r3]
  01ec8	e59f3400	 ldr         r3, [pc, #0x400]
  01ecc	e1520003	 cmp         r2, r3
  01ed0	1a000002	 bne         |$LN14@SPI_DmaRea|
  01ed4	e3a03001	 mov         r3, #1
  01ed8	e58d302c	 str         r3, [sp, #0x2C]
  01edc	ea000008	 b           |$LN15@SPI_DmaRea|
  01ee0		 |$LN14@SPI_DmaRea|
  01ee0	e3a03b01	 mov         r3, #1, 22
  01ee4	e3833043	 orr         r3, r3, #0x43
  01ee8	e59f23dc	 ldr         r2, [pc, #0x3DC]
  01eec	e59f13d4	 ldr         r1, [pc, #0x3D4]
  01ef0	e59f03cc	 ldr         r0, [pc, #0x3CC]
  01ef4	eb000000	 bl          NKDbgPrintfW
  01ef8	e6000010	 __debugbreak_ce
  01efc	e3a03000	 mov         r3, #0
  01f00	e58d302c	 str         r3, [sp, #0x2C]
  01f04		 |$LN15@SPI_DmaRea|

; 1092 : 
; 1093 :     // Get pointers to registers
; 1094 :     pDevice = pInstance->pDevice;

  01f04	e59d3018	 ldr         r3, [sp, #0x18]
  01f08	e2833004	 add         r3, r3, #4
  01f0c	e5933000	 ldr         r3, [r3]
  01f10	e58d3004	 str         r3, [sp, #4]

; 1095 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;

  01f14	e59d3018	 ldr         r3, [sp, #0x18]
  01f18	e2833010	 add         r3, r3, #0x10
  01f1c	e5933000	 ldr         r3, [r3]
  01f20	e58d301c	 str         r3, [sp, #0x1C]

; 1096 : 
; 1097 : 
; 1098 :     // Get the word length of the data
; 1099 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  01f24	e59d3018	 ldr         r3, [sp, #0x18]
  01f28	e283300c	 add         r3, r3, #0xC
  01f2c	e5933000	 ldr         r3, [r3]
  01f30	e1a03a03	 mov         r3, r3, lsl #20
  01f34	e1a03da3	 mov         r3, r3, lsr #27
  01f38	e2833001	 add         r3, r3, #1
  01f3c	e58d3020	 str         r3, [sp, #0x20]

; 1100 : 
; 1101 :     //  Ensure that only SPI words elements are DMA'd
; 1102 :     //  Adjust the DMAsize
; 1103 :     if( dwWordLen > 16 )

  01f40	e59d3020	 ldr         r3, [sp, #0x20]
  01f44	e3530010	 cmp         r3, #0x10
  01f48	9a000008	 bls         |$LN9@SPI_DmaRea|

; 1104 :     {
; 1105 :         size = (size/sizeof(UINT32)) * sizeof(UINT32);

  01f4c	e59d105c	 ldr         r1, [sp, #0x5C]
  01f50	e3a00004	 mov         r0, #4
  01f54	eb000000	 bl          __rt_udiv
  01f58	e3a03004	 mov         r3, #4
  01f5c	e0030390	 mul         r3, r0, r3
  01f60	e58d305c	 str         r3, [sp, #0x5C]

; 1106 :         dwWordSize = sizeof(UINT32);

  01f64	e3a03004	 mov         r3, #4
  01f68	e58d3000	 str         r3, [sp]
  01f6c	ea00000d	 b           |$LN8@SPI_DmaRea|
  01f70		 |$LN9@SPI_DmaRea|

; 1107 :     }
; 1108 :     else if( dwWordLen > 8 )

  01f70	e59d3020	 ldr         r3, [sp, #0x20]
  01f74	e3530008	 cmp         r3, #8
  01f78	9a000008	 bls         |$LN7@SPI_DmaRea|

; 1109 :     {
; 1110 :         size = (size/sizeof(UINT16)) * sizeof(UINT16);

  01f7c	e59d105c	 ldr         r1, [sp, #0x5C]
  01f80	e3a00002	 mov         r0, #2
  01f84	eb000000	 bl          __rt_udiv
  01f88	e3a03002	 mov         r3, #2
  01f8c	e0030390	 mul         r3, r0, r3
  01f90	e58d305c	 str         r3, [sp, #0x5C]

; 1111 :         dwWordSize = sizeof(UINT16);

  01f94	e3a03002	 mov         r3, #2
  01f98	e58d3000	 str         r3, [sp]

; 1112 :     }
; 1113 :     else

  01f9c	ea000001	 b           |$LN6@SPI_DmaRea|
  01fa0		 |$LN7@SPI_DmaRea|

; 1114 :     {
; 1115 :         dwWordSize = sizeof(UINT8);

  01fa0	e3a03001	 mov         r3, #1
  01fa4	e58d3000	 str         r3, [sp]
  01fa8		 |$LN6@SPI_DmaRea|
  01fa8		 |$LN8@SPI_DmaRea|

; 1116 :     }
; 1117 : 
; 1118 :     //  Get the length of how much can be DMA'd
; 1119 :     dwDmaSize = (size < pInstance->pDevice->dwRxBufferSize) ? size : pInstance->pDevice->dwRxBufferSize;

  01fa8	e59d3018	 ldr         r3, [sp, #0x18]
  01fac	e2833004	 add         r3, r3, #4
  01fb0	e5933000	 ldr         r3, [r3]
  01fb4	e2833030	 add         r3, r3, #0x30
  01fb8	e59d205c	 ldr         r2, [sp, #0x5C]
  01fbc	e5933000	 ldr         r3, [r3]
  01fc0	e1520003	 cmp         r2, r3
  01fc4	2a000002	 bcs         |$LN16@SPI_DmaRea|
  01fc8	e59d305c	 ldr         r3, [sp, #0x5C]
  01fcc	e58d3030	 str         r3, [sp, #0x30]
  01fd0	ea000005	 b           |$LN17@SPI_DmaRea|
  01fd4		 |$LN16@SPI_DmaRea|
  01fd4	e59d3018	 ldr         r3, [sp, #0x18]
  01fd8	e2833004	 add         r3, r3, #4
  01fdc	e5933000	 ldr         r3, [r3]
  01fe0	e2833030	 add         r3, r3, #0x30
  01fe4	e5933000	 ldr         r3, [r3]
  01fe8	e58d3030	 str         r3, [sp, #0x30]
  01fec		 |$LN17@SPI_DmaRea|
  01fec	e59d3030	 ldr         r3, [sp, #0x30]
  01ff0	e58d3014	 str         r3, [sp, #0x14]

; 1120 :     dwDmaSize /= dwWordSize;

  01ff4	e59d1014	 ldr         r1, [sp, #0x14]
  01ff8	e59d0000	 ldr         r0, [sp]
  01ffc	eb000000	 bl          __rt_udiv
  02000	e58d0014	 str         r0, [sp, #0x14]

; 1121 : 
; 1122 :     // Get hardware
; 1123 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  02004	e3e01000	 mvn         r1, #0
  02008	e59d3004	 ldr         r3, [sp, #4]
  0200c	e283301c	 add         r3, r3, #0x1C
  02010	e5930000	 ldr         r0, [r3]
  02014	eb000000	 bl          WaitForSingleObject

; 1124 : 
; 1125 :     // Set this driver to Active Mode
; 1126 :     SetSPIPower(pDevice, D0);

  02018	e3a01000	 mov         r1, #0
  0201c	e59d0004	 ldr         r0, [sp, #4]
  02020	eb000000	 bl          SetSPIPower

; 1127 :     
; 1128 :     // Enable the channel
; 1129 : 	if (!pInstance->exclusiveAccess)

  02024	e59d3018	 ldr         r3, [sp, #0x18]
  02028	e2833014	 add         r3, r3, #0x14
  0202c	e5933000	 ldr         r3, [r3]
  02030	e3530000	 cmp         r3, #0
  02034	1a000006	 bne         |$LN5@SPI_DmaRea|

; 1130 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  02038	e59d301c	 ldr         r3, [sp, #0x1C]
  0203c	e2833008	 add         r3, r3, #8
  02040	e5933000	 ldr         r3, [r3]
  02044	e3832001	 orr         r2, r3, #1
  02048	e59d301c	 ldr         r3, [sp, #0x1C]
  0204c	e2833008	 add         r3, r3, #8
  02050	e5832000	 str         r2, [r3]
  02054		 |$LN5@SPI_DmaRea|

; 1131 : 
; 1132 : 
; 1133 :     //  Write out all the data; loop if necessary
; 1134 :     for( dwCount = 0; dwCount < size; )

  02054	e3a03000	 mov         r3, #0
  02058	e58d3010	 str         r3, [sp, #0x10]
  0205c		 |$LN4@SPI_DmaRea|
  0205c	e59d2010	 ldr         r2, [sp, #0x10]
  02060	e59d305c	 ldr         r3, [sp, #0x5C]
  02064	e1520003	 cmp         r2, r3
  02068	2a00006a	 bcs         |$LN3@SPI_DmaRea|

; 1135 :     {
; 1136 :         // Set the DMA transfer size
; 1137 :         DmaSetElementAndFrameCount(&pInstance->rxDmaInfo, (UINT16) dwDmaSize, 1);

  0206c	e3a02001	 mov         r2, #1
  02070	e59d3014	 ldr         r3, [sp, #0x14]
  02074	e1a01803	 mov         r1, r3, lsl #16
  02078	e1a01821	 mov         r1, r1, lsr #16
  0207c	e59d3018	 ldr         r3, [sp, #0x18]
  02080	e28300a0	 add         r0, r3, #0xA0
  02084	eb000000	 bl          DmaSetElementAndFrameCount

; 1138 :     
; 1139 :         DEBUGMSG(ZONE_DMA, (L" SPI_DmaRead: DMA Start (# elements, elementSize) = %d, %d\r\n", dwDmaSize, dwWordSize));

  02088	e59f3224	 ldr         r3, [pc, #0x224]
  0208c	e5933440	 ldr         r3, [r3, #0x440]
  02090	e3130020	 tst         r3, #0x20
  02094	0a000006	 beq         |$LN18@SPI_DmaRea|
  02098	e59d2000	 ldr         r2, [sp]
  0209c	e59d1014	 ldr         r1, [sp, #0x14]
  020a0	e59f0218	 ldr         r0, [pc, #0x218]
  020a4	eb000000	 bl          NKDbgPrintfW
  020a8	e3a03001	 mov         r3, #1
  020ac	e58d3034	 str         r3, [sp, #0x34]
  020b0	ea000001	 b           |$LN19@SPI_DmaRea|
  020b4		 |$LN18@SPI_DmaRea|
  020b4	e3a03000	 mov         r3, #0
  020b8	e58d3034	 str         r3, [sp, #0x34]
  020bc		 |$LN19@SPI_DmaRea|

; 1140 : 
; 1141 : 
; 1142 :         // Start the DMA
; 1143 :         PreDmaActivation(pInstance);

  020bc	e59d0018	 ldr         r0, [sp, #0x18]
  020c0	eb000000	 bl          PreDmaActivation

; 1144 :         DmaStart(&pInstance->rxDmaInfo);

  020c4	e59d3018	 ldr         r3, [sp, #0x18]
  020c8	e28300a0	 add         r0, r3, #0xA0
  020cc	eb000000	 bl          DmaStart

; 1145 : 
; 1146 :         //  Wait for DMA done interrupt or timeout
; 1147 :         if( WaitForSingleObject(pInstance->hRxDmaIntEvent, pInstance->pDevice->timeout) != WAIT_OBJECT_0)

  020d0	e59d3018	 ldr         r3, [sp, #0x18]
  020d4	e2833004	 add         r3, r3, #4
  020d8	e5933000	 ldr         r3, [r3]
  020dc	e2833028	 add         r3, r3, #0x28
  020e0	e5931000	 ldr         r1, [r3]
  020e4	e59d3018	 ldr         r3, [sp, #0x18]
  020e8	e2833024	 add         r3, r3, #0x24
  020ec	e5930000	 ldr         r0, [r3]
  020f0	eb000000	 bl          WaitForSingleObject
  020f4	e58d0038	 str         r0, [sp, #0x38]
  020f8	e59d3038	 ldr         r3, [sp, #0x38]
  020fc	e3530000	 cmp         r3, #0
  02100	0a000014	 beq         |$LN2@SPI_DmaRea|

; 1148 :         {
; 1149 :             DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DmaRead: "
; 1150 :                 L"DMA interrupt timeout\r\n"
; 1151 :             ));

  02104	e59f31a8	 ldr         r3, [pc, #0x1A8]
  02108	e5933440	 ldr         r3, [r3, #0x440]
  0210c	e3130001	 tst         r3, #1
  02110	0a000004	 beq         |$LN20@SPI_DmaRea|
  02114	e59f01a0	 ldr         r0, [pc, #0x1A0]
  02118	eb000000	 bl          NKDbgPrintfW
  0211c	e3a03001	 mov         r3, #1
  02120	e58d303c	 str         r3, [sp, #0x3C]
  02124	ea000001	 b           |$LN21@SPI_DmaRea|
  02128		 |$LN20@SPI_DmaRea|
  02128	e3a03000	 mov         r3, #0
  0212c	e58d303c	 str         r3, [sp, #0x3C]
  02130		 |$LN21@SPI_DmaRea|

; 1152 : 
; 1153 :             //  Cleanup
; 1154 :             DmaStop(&pInstance->rxDmaInfo);

  02130	e59d3018	 ldr         r3, [sp, #0x18]
  02134	e28300a0	 add         r0, r3, #0xA0
  02138	eb000000	 bl          DmaStop

; 1155 :             DmaInterruptDone(pInstance->hRxDmaChannel);

  0213c	e59d3018	 ldr         r3, [sp, #0x18]
  02140	e283301c	 add         r3, r3, #0x1C
  02144	e5930000	 ldr         r0, [r3]
  02148	eb000000	 bl          DmaInterruptDone

; 1156 :             PostDmaDeactivation(pInstance);

  0214c	e59d0018	 ldr         r0, [sp, #0x18]
  02150	eb000000	 bl          PostDmaDeactivation

; 1157 :             goto cleanUp;

  02154	ea00002f	 b           |$cleanUp$44975|
  02158		 |$LN2@SPI_DmaRea|

; 1158 :         }
; 1159 : 
; 1160 :         // Get and clear the status
; 1161 :         dwDmaStatus = DmaGetStatus(&pInstance->rxDmaInfo);

  02158	e59d3018	 ldr         r3, [sp, #0x18]
  0215c	e28300a0	 add         r0, r3, #0xA0
  02160	eb000000	 bl          DmaGetStatus
  02164	e58d0040	 str         r0, [sp, #0x40]
  02168	e59d3040	 ldr         r3, [sp, #0x40]
  0216c	e58d3008	 str         r3, [sp, #8]

; 1162 :         DmaClearStatus(&pInstance->rxDmaInfo, dwDmaStatus);

  02170	e59d1008	 ldr         r1, [sp, #8]
  02174	e59d3018	 ldr         r3, [sp, #0x18]
  02178	e28300a0	 add         r0, r3, #0xA0
  0217c	eb000000	 bl          DmaClearStatus

; 1163 : 
; 1164 :         DEBUGMSG(ZONE_DMA, (L" SPI_DmaRead: DMA Status = %x\r\n", dwDmaStatus));

  02180	e59f312c	 ldr         r3, [pc, #0x12C]
  02184	e5933440	 ldr         r3, [r3, #0x440]
  02188	e3130020	 tst         r3, #0x20
  0218c	0a000005	 beq         |$LN22@SPI_DmaRea|
  02190	e59d1008	 ldr         r1, [sp, #8]
  02194	e59f011c	 ldr         r0, [pc, #0x11C]
  02198	eb000000	 bl          NKDbgPrintfW
  0219c	e3a03001	 mov         r3, #1
  021a0	e58d3044	 str         r3, [sp, #0x44]
  021a4	ea000001	 b           |$LN23@SPI_DmaRea|
  021a8		 |$LN22@SPI_DmaRea|
  021a8	e3a03000	 mov         r3, #0
  021ac	e58d3044	 str         r3, [sp, #0x44]
  021b0		 |$LN23@SPI_DmaRea|

; 1165 : 
; 1166 :         // Stop the DMA
; 1167 :         DmaInterruptDone(pInstance->hRxDmaChannel);

  021b0	e59d3018	 ldr         r3, [sp, #0x18]
  021b4	e283301c	 add         r3, r3, #0x1C
  021b8	e5930000	 ldr         r0, [r3]
  021bc	eb000000	 bl          DmaInterruptDone

; 1168 :         DmaStop(&pInstance->rxDmaInfo);

  021c0	e59d3018	 ldr         r3, [sp, #0x18]
  021c4	e28300a0	 add         r0, r3, #0xA0
  021c8	eb000000	 bl          DmaStop

; 1169 :         PostDmaDeactivation(pInstance);

  021cc	e59d0018	 ldr         r0, [sp, #0x18]
  021d0	eb000000	 bl          PostDmaDeactivation

; 1170 : 
; 1171 : 
; 1172 :         // Copy the data from the DMA buffer
; 1173 :         memcpy(&pData[dwCount], pInstance->pRxDmaBuffer, dwDmaSize*dwWordSize);

  021d4	e59d1014	 ldr         r1, [sp, #0x14]
  021d8	e59d3000	 ldr         r3, [sp]
  021dc	e0020391	 mul         r2, r1, r3
  021e0	e59d3018	 ldr         r3, [sp, #0x18]
  021e4	e28330c0	 add         r3, r3, #0xC0
  021e8	e5931000	 ldr         r1, [r3]
  021ec	e59d000c	 ldr         r0, [sp, #0xC]
  021f0	e59d3010	 ldr         r3, [sp, #0x10]
  021f4	e0800003	 add         r0, r0, r3
  021f8	eb000000	 bl          memcpy

; 1174 : 
; 1175 :         //  Update amount transferred
; 1176 :         dwCount += dwDmaSize*dwWordSize;

  021fc	e59d1014	 ldr         r1, [sp, #0x14]
  02200	e59d3000	 ldr         r3, [sp]
  02204	e0020391	 mul         r2, r1, r3
  02208	e59d3010	 ldr         r3, [sp, #0x10]
  0220c	e0833002	 add         r3, r3, r2
  02210	e58d3010	 str         r3, [sp, #0x10]

; 1177 :     }

  02214	eaffff90	 b           |$LN4@SPI_DmaRea|
  02218		 |$LN3@SPI_DmaRea|
  02218		 |$cleanUp$44975|

; 1178 : 
; 1179 : cleanUp:
; 1180 :     // Disable the channel.
; 1181 : 	if (!pInstance->exclusiveAccess)

  02218	e59d3018	 ldr         r3, [sp, #0x18]
  0221c	e2833014	 add         r3, r3, #0x14
  02220	e5933000	 ldr         r3, [r3]
  02224	e3530000	 cmp         r3, #0
  02228	1a000007	 bne         |$LN1@SPI_DmaRea|

; 1182 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  0222c	e59d301c	 ldr         r3, [sp, #0x1C]
  02230	e2833008	 add         r3, r3, #8
  02234	e5932000	 ldr         r2, [r3]
  02238	e3e03001	 mvn         r3, #1
  0223c	e0022003	 and         r2, r2, r3
  02240	e59d301c	 ldr         r3, [sp, #0x1C]
  02244	e2833008	 add         r3, r3, #8
  02248	e5832000	 str         r2, [r3]
  0224c		 |$LN1@SPI_DmaRea|

; 1183 :     
; 1184 :     // Set this driver to Suspend Mode
; 1185 :     SetSPIPower(pDevice, D4);

  0224c	e3a01004	 mov         r1, #4
  02250	e59d0004	 ldr         r0, [sp, #4]
  02254	eb000000	 bl          SetSPIPower

; 1186 :     
; 1187 :     // Release hardware
; 1188 : 	ReleaseMutex(pDevice->hControllerMutex);

  02258	e59d3004	 ldr         r3, [sp, #4]
  0225c	e283301c	 add         r3, r3, #0x1C
  02260	e5930000	 ldr         r0, [r3]
  02264	eb000000	 bl          ReleaseMutex

; 1189 : 
; 1190 : 
; 1191 :     DEBUGMSG(ZONE_DMA, (L"-SPI_DmaRead(rc = %d)\r\n", dwCount));

  02268	e59f3044	 ldr         r3, [pc, #0x44]
  0226c	e5933440	 ldr         r3, [r3, #0x440]
  02270	e3130020	 tst         r3, #0x20
  02274	0a000005	 beq         |$LN24@SPI_DmaRea|
  02278	e59d1010	 ldr         r1, [sp, #0x10]
  0227c	e59f002c	 ldr         r0, [pc, #0x2C]
  02280	eb000000	 bl          NKDbgPrintfW
  02284	e3a03001	 mov         r3, #1
  02288	e58d3048	 str         r3, [sp, #0x48]
  0228c	ea000001	 b           |$LN25@SPI_DmaRea|
  02290		 |$LN24@SPI_DmaRea|
  02290	e3a03000	 mov         r3, #0
  02294	e58d3048	 str         r3, [sp, #0x48]
  02298		 |$LN25@SPI_DmaRea|

; 1192 : 	return dwCount;

  02298	e59d3010	 ldr         r3, [sp, #0x10]
  0229c	e58d3024	 str         r3, [sp, #0x24]

; 1193 : }

  022a0	e59d0024	 ldr         r0, [sp, #0x24]
  022a4	e28dd04c	 add         sp, sp, #0x4C
  022a8	e89d6000	 ldmia       sp, {sp, lr}
  022ac	e12fff1e	 bx          lr
  022b0		 |$LN29@SPI_DmaRea|
  022b0		 |$LN30@SPI_DmaRea|
  022b0	00000000	 DCD         |??_C@_1DA@HPKLIOJL@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  022b4		 |$LN31@SPI_DmaRea|
  022b4	00000000	 DCD         |dpCurSettings|
  022b8		 |$LN32@SPI_DmaRea|
  022b8	00000000	 DCD         |??_C@_1EA@NFKHEFID@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  022bc		 |$LN33@SPI_DmaRea|
  022bc	00000000	 DCD         |??_C@_1FI@CAOCAGJP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp@|
  022c0		 |$LN34@SPI_DmaRea|
  022c0	00000000	 DCD         |??_C@_1HK@EPFNDGNI@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$CI?$AA?$CD?$AA?5?$AAe?$AAl?$AAe?$AAm?$AAe@|
  022c4		 |$LN35@SPI_DmaRea|
  022c4	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  022c8		 |$LN36@SPI_DmaRea|
  022c8	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  022cc		 |$LN37@SPI_DmaRea|
  022cc	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  022d0		 |$LN38@SPI_DmaRea|
  022d0	73706949	 DCD         0x73706949
  022d4		 |$LN39@SPI_DmaRea|
  022d4	00000000	 DCD         |??_C@_1EO@KFIGMCHC@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF@|
  022d8		 |$M46063|

			 ENDP  ; |SPI_DmaRead|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46081| DCD	|$LN5@DmaSetElem|
	DCD	0x40001103
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetElementAndFrameCount| PROC

; 386  : {

  00000		 |$LN5@DmaSetElem|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46078|

; 387  :     // setup frame and element count for destination side
; 388  :     //
; 389  :     OUTREG32(&pDataInfo->pDmaLcReg->CEN , countElements);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e2832014	 add         r2, r3, #0x14
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e5823000	 str         r3, [r2]

; 390  :     OUTREG32(&pDataInfo->pDmaLcReg->CFN , countFrames);

  00024	e1dd21b0	 ldrh        r2, [sp, #0x10]
  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e2833018	 add         r3, r3, #0x18
  00038	e5832000	 str         r2, [r3]

; 391  : }

  0003c	e89d6000	 ldmia       sp, {sp, lr}
  00040	e12fff1e	 bx          lr
  00044		 |$M46079|

			 ENDP  ; |DmaSetElementAndFrameCount|


  00000			 AREA	 |.pdata|, PDATA
|$T46089| DCD	|$LN11@DmaStop|
	DCD	0x40002604
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStop| PROC

; 449  : {

  00000		 |$LN11@DmaStop|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46086|

; 450  :     volatile ULONG ulCCR;
; 451  :     BOOL breakLoop = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3000	 str         r3, [sp]

; 452  : 
; 453  :     // disable standby in dma controller
; 454  :     //
; 455  :     CLRREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  00018	e59d3010	 ldr         r3, [sp, #0x10]
  0001c	e2833014	 add         r3, r3, #0x14
  00020	e5933000	 ldr         r3, [r3]
  00024	e5932000	 ldr         r2, [r3]
  00028	e3e03080	 mvn         r3, #0x80
  0002c	e0022003	 and         r2, r2, r3
  00030	e59d3010	 ldr         r3, [sp, #0x10]
  00034	e2833014	 add         r3, r3, #0x14
  00038	e5933000	 ldr         r3, [r3]
  0003c	e5832000	 str         r2, [r3]
  00040		 |$LN8@DmaStop|
  00040		 |$LN5@DmaStop|

; 456  : 
; 457  :     // ensure DMA transfer is completed by polling the active bits
; 458  :     //
; 459  :     while (breakLoop == FALSE)

  00040	e59d3000	 ldr         r3, [sp]
  00044	e3530000	 cmp         r3, #0
  00048	1a00000f	 bne         |$LN4@DmaStop|

; 460  :         {
; 461  :         ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e2833014	 add         r3, r3, #0x14
  00054	e5933000	 ldr         r3, [r3]
  00058	e5933000	 ldr         r3, [r3]
  0005c	e58d3004	 str         r3, [sp, #4]

; 462  :         if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  00060	e59d3004	 ldr         r3, [sp, #4]
  00064	e3130b01	 tst         r3, #1, 22
  00068	1a000002	 bne         |$LN2@DmaStop|
  0006c	e59d3004	 ldr         r3, [sp, #4]
  00070	e3130c02	 tst         r3, #2, 24
  00074	0a000001	 beq         |$LN3@DmaStop|
  00078		 |$LN2@DmaStop|

; 463  :             {
; 464  :             // fix this infinite loop
; 465  :             //
; 466  :             continue;

  00078	eafffff0	 b           |$LN5@DmaStop|

; 467  :             }
; 468  :         else

  0007c	ea000001	 b           |$LN1@DmaStop|
  00080		 |$LN3@DmaStop|

; 469  :             {
; 470  :             breakLoop = TRUE;

  00080	e3a03001	 mov         r3, #1
  00084	e58d3000	 str         r3, [sp]
  00088		 |$LN1@DmaStop|

; 471  :             }
; 472  :         }

  00088	eaffffec	 b           |$LN8@DmaStop|
  0008c		 |$LN4@DmaStop|

; 473  : 
; 474  : }

  0008c	e28dd008	 add         sp, sp, #8
  00090	e89d6000	 ldmia       sp, {sp, lr}
  00094	e12fff1e	 bx          lr
  00098		 |$M46087|

			 ENDP  ; |DmaStop|


  00000			 AREA	 |.pdata|, PDATA
|$T46096| DCD	|$LN5@DmaStart|
	DCD	0x40000e03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStart| PROC

; 487  : {

  00000		 |$LN5@DmaStart|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46093|

; 488  :     // enable the dma channel
; 489  :     //
; 490  :     SETREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3832080	 orr         r2, r3, #0x80
  00020	e59d3008	 ldr         r3, [sp, #8]
  00024	e2833014	 add         r3, r3, #0x14
  00028	e5933000	 ldr         r3, [r3]
  0002c	e5832000	 str         r2, [r3]

; 491  : }

  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M46094|

			 ENDP  ; |DmaStart|


  00000			 AREA	 |.pdata|, PDATA
|$T46104| DCD	|$LN5@DmaGetStat|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaGetStatus| PROC

; 559  : {

  00000		 |$LN5@DmaGetStat|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M46101|

; 560  :     return INREG32(&pDataInfo->pDmaLcReg->CSR);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833014	 add         r3, r3, #0x14
  00018	e5933000	 ldr         r3, [r3]
  0001c	e283300c	 add         r3, r3, #0xC
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3000	 str         r3, [sp]

; 561  : }

  00028	e59d0000	 ldr         r0, [sp]
  0002c	e28dd004	 add         sp, sp, #4
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M46102|

			 ENDP  ; |DmaGetStatus|


  00000			 AREA	 |.pdata|, PDATA
|$T46111| DCD	|$LN5@DmaClearSt|
	DCD	0x40000b03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaClearStatus| PROC

; 575  : {

  00000		 |$LN5@DmaClearSt|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46108|

; 576  :     OUTREG32(&pDataInfo->pDmaLcReg->CSR, dwStatus);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2833014	 add         r3, r3, #0x14
  00014	e5933000	 ldr         r3, [r3]
  00018	e283200c	 add         r2, r3, #0xC
  0001c	e59d300c	 ldr         r3, [sp, #0xC]
  00020	e5823000	 str         r3, [r2]

; 577  : }

  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M46109|

			 ENDP  ; |DmaClearStatus|

	EXPORT	|??_C@_1CM@MPOGPIEJ@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@NEFMELKM@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_DmaWrite|
	EXPORT	|SpiDmaTxEnabled|
	EXPORT	|??_C@_1FM@KAGDGFOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@HGGCGFOK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| [ DATA ] ; `string'
	EXPORT	|SPI_Write|

  00068			 AREA	 |.pdata|, PDATA
|$T46127| DCD	|$LN28@SPI_Write|
	DCD	0x4000ed04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@MPOGPIEJ@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, "(", 0x0, "r", 0x0, "c"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@NEFMELKM@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m"
	DCB	0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FM@KAGDGFOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, ":", 0x0, " ", 0x0, "I"
	DCB	0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@HGGCGFOK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  022d8			 AREA	 |.text|, CODE, ARM

  022d8		 |SPI_Write| PROC

; 1209 : {

  022d8		 |$LN28@SPI_Write|
  022d8	e1a0c00d	 mov         r12, sp
  022dc	e92d0007	 stmdb       sp!, {r0 - r2}
  022e0	e92d5000	 stmdb       sp!, {r12, lr}
  022e4	e24dd038	 sub         sp, sp, #0x38
  022e8		 |$M46124|

; 1210 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  022e8	e59d3040	 ldr         r3, [sp, #0x40]
  022ec	e58d3010	 str         r3, [sp, #0x10]

; 1211 :     SPI_DEVICE *pDevice;
; 1212 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1213 :     UCHAR* pData = (UCHAR*)pBuffer;

  022f0	e59d3044	 ldr         r3, [sp, #0x44]
  022f4	e58d3008	 str         r3, [sp, #8]

; 1214 :     DWORD dwWordLen;
; 1215 :     DWORD dwCount = 0;

  022f8	e3a03000	 mov         r3, #0
  022fc	e58d300c	 str         r3, [sp, #0xC]

; 1216 :     DWORD dwWait;
; 1217 : 
; 1218 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Write(0x%08x, 0x%08x, 0x%08x)\r\n", context, pBuffer, size));

  02300	e59f3370	 ldr         r3, [pc, #0x370]
  02304	e5933440	 ldr         r3, [r3, #0x440]
  02308	e3130004	 tst         r3, #4
  0230c	0a000007	 beq         |$LN18@SPI_Write|
  02310	e59d3048	 ldr         r3, [sp, #0x48]
  02314	e59d2044	 ldr         r2, [sp, #0x44]
  02318	e59d1040	 ldr         r1, [sp, #0x40]
  0231c	e59f0364	 ldr         r0, [pc, #0x364]
  02320	eb000000	 bl          NKDbgPrintfW
  02324	e3a03001	 mov         r3, #1
  02328	e58d3020	 str         r3, [sp, #0x20]
  0232c	ea000001	 b           |$LN19@SPI_Write|
  02330		 |$LN18@SPI_Write|
  02330	e3a03000	 mov         r3, #0
  02334	e58d3020	 str         r3, [sp, #0x20]
  02338		 |$LN19@SPI_Write|

; 1219 : 
; 1220 :     // Check if we get correct context
; 1221 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  02338	e59d3010	 ldr         r3, [sp, #0x10]
  0233c	e3530000	 cmp         r3, #0
  02340	0a000004	 beq         |$LN14@SPI_Write|
  02344	e59d3010	 ldr         r3, [sp, #0x10]
  02348	e5932000	 ldr         r2, [r3]
  0234c	e59f3330	 ldr         r3, [pc, #0x330]
  02350	e1520003	 cmp         r2, r3
  02354	0a00000d	 beq         |$LN15@SPI_Write|
  02358		 |$LN14@SPI_Write|

; 1222 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Write: "
; 1223 :             L"Incorrect context paramer\r\n"
; 1224 :         ));

  02358	e59f3318	 ldr         r3, [pc, #0x318]
  0235c	e5933440	 ldr         r3, [r3, #0x440]
  02360	e3130001	 tst         r3, #1
  02364	0a000004	 beq         |$LN20@SPI_Write|
  02368	e59f0310	 ldr         r0, [pc, #0x310]
  0236c	eb000000	 bl          NKDbgPrintfW
  02370	e3a03001	 mov         r3, #1
  02374	e58d3024	 str         r3, [sp, #0x24]
  02378	ea000001	 b           |$LN21@SPI_Write|
  0237c		 |$LN20@SPI_Write|
  0237c	e3a03000	 mov         r3, #0
  02380	e58d3024	 str         r3, [sp, #0x24]
  02384		 |$LN21@SPI_Write|

; 1225 :         return 0;

  02384	e3a03000	 mov         r3, #0
  02388	e58d301c	 str         r3, [sp, #0x1C]
  0238c	ea0000b4	 b           |$LN16@SPI_Write|
  02390		 |$LN15@SPI_Write|

; 1226 :     }
; 1227 : 
; 1228 :     //  Call DMA function if DMA enabled
; 1229 :     if( SpiDmaTxEnabled(pInstance) )

  02390	e59d0010	 ldr         r0, [sp, #0x10]
  02394	eb000000	 bl          SpiDmaTxEnabled
  02398	e58d0028	 str         r0, [sp, #0x28]
  0239c	e59d3028	 ldr         r3, [sp, #0x28]
  023a0	e3530000	 cmp         r3, #0
  023a4	0a000007	 beq         |$LN13@SPI_Write|

; 1230 :     {
; 1231 :         return SPI_DmaWrite(context, pBuffer, size);

  023a8	e59d2048	 ldr         r2, [sp, #0x48]
  023ac	e59d1044	 ldr         r1, [sp, #0x44]
  023b0	e59d0040	 ldr         r0, [sp, #0x40]
  023b4	eb000000	 bl          SPI_DmaWrite
  023b8	e58d002c	 str         r0, [sp, #0x2C]
  023bc	e59d302c	 ldr         r3, [sp, #0x2C]
  023c0	e58d301c	 str         r3, [sp, #0x1C]
  023c4	ea0000a6	 b           |$LN16@SPI_Write|
  023c8		 |$LN13@SPI_Write|

; 1232 :     }
; 1233 : 
; 1234 :     // Get pointers to registers
; 1235 :     pDevice = pInstance->pDevice;

  023c8	e59d3010	 ldr         r3, [sp, #0x10]
  023cc	e2833004	 add         r3, r3, #4
  023d0	e5933000	 ldr         r3, [r3]
  023d4	e58d3004	 str         r3, [sp, #4]

; 1236 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;

  023d8	e59d3010	 ldr         r3, [sp, #0x10]
  023dc	e2833010	 add         r3, r3, #0x10
  023e0	e5933000	 ldr         r3, [r3]
  023e4	e58d3014	 str         r3, [sp, #0x14]

; 1237 : 
; 1238 : 
; 1239 :     // Get the word length of the data
; 1240 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  023e8	e59d3010	 ldr         r3, [sp, #0x10]
  023ec	e283300c	 add         r3, r3, #0xC
  023f0	e5933000	 ldr         r3, [r3]
  023f4	e1a03a03	 mov         r3, r3, lsl #20
  023f8	e1a03da3	 mov         r3, r3, lsr #27
  023fc	e2833001	 add         r3, r3, #1
  02400	e58d3018	 str         r3, [sp, #0x18]

; 1241 : 
; 1242 :     // Get hardware
; 1243 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  02404	e3e01000	 mvn         r1, #0
  02408	e59d3004	 ldr         r3, [sp, #4]
  0240c	e283301c	 add         r3, r3, #0x1C
  02410	e5930000	 ldr         r0, [r3]
  02414	eb000000	 bl          WaitForSingleObject

; 1244 :     
; 1245 :     // Set this driver to Active Mode
; 1246 :     SetSPIPower(pDevice, D0);

  02418	e3a01000	 mov         r1, #0
  0241c	e59d0004	 ldr         r0, [sp, #4]
  02420	eb000000	 bl          SetSPIPower

; 1247 :     
; 1248 :     // Enable the channel
; 1249 : 	if (!pInstance->exclusiveAccess)

  02424	e59d3010	 ldr         r3, [sp, #0x10]
  02428	e2833014	 add         r3, r3, #0x14
  0242c	e5933000	 ldr         r3, [r3]
  02430	e3530000	 cmp         r3, #0
  02434	1a000006	 bne         |$LN12@SPI_Write|

; 1250 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  02438	e59d3014	 ldr         r3, [sp, #0x14]
  0243c	e2833008	 add         r3, r3, #8
  02440	e5933000	 ldr         r3, [r3]
  02444	e3832001	 orr         r2, r3, #1
  02448	e59d3014	 ldr         r3, [sp, #0x14]
  0244c	e2833008	 add         r3, r3, #8
  02450	e5832000	 str         r2, [r3]
  02454		 |$LN12@SPI_Write|

; 1251 : 
; 1252 :     // Write out the data
; 1253 :     for( dwCount = 0; dwCount < size; )

  02454	e3a03000	 mov         r3, #0
  02458	e58d300c	 str         r3, [sp, #0xC]
  0245c		 |$LN11@SPI_Write|
  0245c	e59d200c	 ldr         r2, [sp, #0xC]
  02460	e59d3048	 ldr         r3, [sp, #0x48]
  02464	e1520003	 cmp         r2, r3
  02468	2a00005b	 bcs         |$LN10@SPI_Write|

; 1254 :     {
; 1255 :         //  Write out data on byte/word/dword boundaries
; 1256 :         if( dwWordLen > 16 )

  0246c	e59d3018	 ldr         r3, [sp, #0x18]
  02470	e3530010	 cmp         r3, #0x10
  02474	9a00000a	 bls         |$LN9@SPI_Write|

; 1257 :         {
; 1258 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT32*)(&pData[dwCount]));   

  02478	e59d2008	 ldr         r2, [sp, #8]
  0247c	e59d300c	 ldr         r3, [sp, #0xC]
  02480	e0821003	 add         r1, r2, r3
  02484	e59d3014	 ldr         r3, [sp, #0x14]
  02488	e283200c	 add         r2, r3, #0xC
  0248c	e5913000	 ldr         r3, [r1]
  02490	e5823000	 str         r3, [r2]

; 1259 :             dwCount += sizeof(UINT32);

  02494	e59d300c	 ldr         r3, [sp, #0xC]
  02498	e2833004	 add         r3, r3, #4
  0249c	e58d300c	 str         r3, [sp, #0xC]
  024a0	ea000017	 b           |$LN8@SPI_Write|
  024a4		 |$LN9@SPI_Write|

; 1260 :         }
; 1261 :         else if( dwWordLen > 8 )

  024a4	e59d3018	 ldr         r3, [sp, #0x18]
  024a8	e3530008	 cmp         r3, #8
  024ac	9a00000a	 bls         |$LN7@SPI_Write|

; 1262 :         {
; 1263 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT16*)(&pData[dwCount]));   

  024b0	e59d2008	 ldr         r2, [sp, #8]
  024b4	e59d300c	 ldr         r3, [sp, #0xC]
  024b8	e0823003	 add         r3, r2, r3
  024bc	e1d320b0	 ldrh        r2, [r3]
  024c0	e59d3014	 ldr         r3, [sp, #0x14]
  024c4	e283300c	 add         r3, r3, #0xC
  024c8	e5832000	 str         r2, [r3]

; 1264 :             dwCount += sizeof(UINT16);

  024cc	e59d300c	 ldr         r3, [sp, #0xC]
  024d0	e2833002	 add         r3, r3, #2
  024d4	e58d300c	 str         r3, [sp, #0xC]

; 1265 :         }
; 1266 :         else

  024d8	ea000009	 b           |$LN6@SPI_Write|
  024dc		 |$LN7@SPI_Write|

; 1267 :         {
; 1268 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT8*)(&pData[dwCount]));   

  024dc	e59d2008	 ldr         r2, [sp, #8]
  024e0	e59d300c	 ldr         r3, [sp, #0xC]
  024e4	e0823003	 add         r3, r2, r3
  024e8	e5d32000	 ldrb        r2, [r3]
  024ec	e59d3014	 ldr         r3, [sp, #0x14]
  024f0	e283300c	 add         r3, r3, #0xC
  024f4	e5832000	 str         r2, [r3]

; 1269 :             dwCount += sizeof(UINT8);

  024f8	e59d300c	 ldr         r3, [sp, #0xC]
  024fc	e2833001	 add         r3, r3, #1
  02500	e58d300c	 str         r3, [sp, #0xC]
  02504		 |$LN6@SPI_Write|
  02504		 |$LN8@SPI_Write|

; 1270 :         }   
; 1271 : 
; 1272 :         //  Wait for TX register to empty out
; 1273 :         dwWait = pDevice->timeout;

  02504	e59d3004	 ldr         r3, [sp, #4]
  02508	e2833028	 add         r3, r3, #0x28
  0250c	e5933000	 ldr         r3, [r3]
  02510	e58d3000	 str         r3, [sp]
  02514		 |$LN5@SPI_Write|

; 1274 :         while(dwWait && !(INREG32(&pSPIChannelRegs->MCSPI_CHSTATUS) & MCSPI_CHSTAT_TX_EMPTY))

  02514	e59d3000	 ldr         r3, [sp]
  02518	e3530000	 cmp         r3, #0
  0251c	0a00000a	 beq         |$LN4@SPI_Write|
  02520	e59d3014	 ldr         r3, [sp, #0x14]
  02524	e2833004	 add         r3, r3, #4
  02528	e5933000	 ldr         r3, [r3]
  0252c	e3130002	 tst         r3, #2
  02530	1a000005	 bne         |$LN4@SPI_Write|

; 1275 :         {
; 1276 :             StallExecution(1);

  02534	e3a00001	 mov         r0, #1
  02538	eb000000	 bl          StallExecution

; 1277 :             dwWait--;

  0253c	e59d3000	 ldr         r3, [sp]
  02540	e2433001	 sub         r3, r3, #1
  02544	e58d3000	 str         r3, [sp]

; 1278 :         }

  02548	eafffff1	 b           |$LN5@SPI_Write|
  0254c		 |$LN4@SPI_Write|

; 1279 : 
; 1280 :         //  Check if timeout occured
; 1281 :         if( dwWait == 0 )

  0254c	e59d3000	 ldr         r3, [sp]
  02550	e3530000	 cmp         r3, #0
  02554	1a00001f	 bne         |$LN3@SPI_Write|

; 1282 :         {
; 1283 :             DEBUGMSG(ZONE_ERROR, (L"SPI_Write timeout\r\n"));

  02558	e59f3118	 ldr         r3, [pc, #0x118]
  0255c	e5933440	 ldr         r3, [r3, #0x440]
  02560	e3130001	 tst         r3, #1
  02564	0a000004	 beq         |$LN22@SPI_Write|
  02568	e59f010c	 ldr         r0, [pc, #0x10C]
  0256c	eb000000	 bl          NKDbgPrintfW
  02570	e3a03001	 mov         r3, #1
  02574	e58d3030	 str         r3, [sp, #0x30]
  02578	ea000001	 b           |$LN23@SPI_Write|
  0257c		 |$LN22@SPI_Write|
  0257c	e3a03000	 mov         r3, #0
  02580	e58d3030	 str         r3, [sp, #0x30]
  02584		 |$LN23@SPI_Write|

; 1284 : 
; 1285 : 	        // Disable the channel.
; 1286 : 			if (!pInstance->exclusiveAccess)

  02584	e59d3010	 ldr         r3, [sp, #0x10]
  02588	e2833014	 add         r3, r3, #0x14
  0258c	e5933000	 ldr         r3, [r3]
  02590	e3530000	 cmp         r3, #0
  02594	1a000007	 bne         |$LN2@SPI_Write|

; 1287 : 	        	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  02598	e59d3014	 ldr         r3, [sp, #0x14]
  0259c	e2833008	 add         r3, r3, #8
  025a0	e5932000	 ldr         r2, [r3]
  025a4	e3e03001	 mvn         r3, #1
  025a8	e0022003	 and         r2, r2, r3
  025ac	e59d3014	 ldr         r3, [sp, #0x14]
  025b0	e2833008	 add         r3, r3, #8
  025b4	e5832000	 str         r2, [r3]
  025b8		 |$LN2@SPI_Write|

; 1288 : 
; 1289 :             // Set this driver to Suspend Mode
; 1290 :             SetSPIPower(pDevice, D4);

  025b8	e3a01004	 mov         r1, #4
  025bc	e59d0004	 ldr         r0, [sp, #4]
  025c0	eb000000	 bl          SetSPIPower

; 1291 : 
; 1292 :             // Release hardware
; 1293 : 			ReleaseMutex(pDevice->hControllerMutex);

  025c4	e59d3004	 ldr         r3, [sp, #4]
  025c8	e283301c	 add         r3, r3, #0x1C
  025cc	e5930000	 ldr         r0, [r3]
  025d0	eb000000	 bl          ReleaseMutex

; 1294 : 
; 1295 :             goto clean;

  025d4	ea000014	 b           |$clean$45042|
  025d8		 |$LN3@SPI_Write|

; 1296 :         }
; 1297 :     }

  025d8	eaffff9f	 b           |$LN11@SPI_Write|
  025dc		 |$LN10@SPI_Write|

; 1298 :     
; 1299 :     // Disable the channel.
; 1300 : 	if (!pInstance->exclusiveAccess)

  025dc	e59d3010	 ldr         r3, [sp, #0x10]
  025e0	e2833014	 add         r3, r3, #0x14
  025e4	e5933000	 ldr         r3, [r3]
  025e8	e3530000	 cmp         r3, #0
  025ec	1a000007	 bne         |$LN1@SPI_Write|

; 1301 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  025f0	e59d3014	 ldr         r3, [sp, #0x14]
  025f4	e2833008	 add         r3, r3, #8
  025f8	e5932000	 ldr         r2, [r3]
  025fc	e3e03001	 mvn         r3, #1
  02600	e0022003	 and         r2, r2, r3
  02604	e59d3014	 ldr         r3, [sp, #0x14]
  02608	e2833008	 add         r3, r3, #8
  0260c	e5832000	 str         r2, [r3]
  02610		 |$LN1@SPI_Write|

; 1302 : 
; 1303 :     // Set this driver to Suspend Mode
; 1304 :     SetSPIPower(pDevice, D4);

  02610	e3a01004	 mov         r1, #4
  02614	e59d0004	 ldr         r0, [sp, #4]
  02618	eb000000	 bl          SetSPIPower

; 1305 : 
; 1306 :     // Release hardware
; 1307 : 	ReleaseMutex(pDevice->hControllerMutex);

  0261c	e59d3004	 ldr         r3, [sp, #4]
  02620	e283301c	 add         r3, r3, #0x1C
  02624	e5930000	 ldr         r0, [r3]
  02628	eb000000	 bl          ReleaseMutex
  0262c		 |$clean$45042|

; 1308 : 
; 1309 : 
; 1310 : clean:
; 1311 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Write(rc = %d)\r\n", dwCount));

  0262c	e59f3044	 ldr         r3, [pc, #0x44]
  02630	e5933440	 ldr         r3, [r3, #0x440]
  02634	e3130004	 tst         r3, #4
  02638	0a000005	 beq         |$LN24@SPI_Write|
  0263c	e59d100c	 ldr         r1, [sp, #0xC]
  02640	e59f002c	 ldr         r0, [pc, #0x2C]
  02644	eb000000	 bl          NKDbgPrintfW
  02648	e3a03001	 mov         r3, #1
  0264c	e58d3034	 str         r3, [sp, #0x34]
  02650	ea000001	 b           |$LN25@SPI_Write|
  02654		 |$LN24@SPI_Write|
  02654	e3a03000	 mov         r3, #0
  02658	e58d3034	 str         r3, [sp, #0x34]
  0265c		 |$LN25@SPI_Write|

; 1312 : 	return dwCount;

  0265c	e59d300c	 ldr         r3, [sp, #0xC]
  02660	e58d301c	 str         r3, [sp, #0x1C]
  02664		 |$LN16@SPI_Write|

; 1313 : }

  02664	e59d001c	 ldr         r0, [sp, #0x1C]
  02668	e28dd038	 add         sp, sp, #0x38
  0266c	e89d6000	 ldmia       sp, {sp, lr}
  02670	e12fff1e	 bx          lr
  02674		 |$LN29@SPI_Write|
  02674		 |$LN30@SPI_Write|
  02674	00000000	 DCD         |??_C@_1CM@MPOGPIEJ@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02678		 |$LN31@SPI_Write|
  02678	00000000	 DCD         |dpCurSettings|
  0267c		 |$LN32@SPI_Write|
  0267c	00000000	 DCD         |??_C@_1CI@NEFMELKM@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  02680		 |$LN33@SPI_Write|
  02680	00000000	 DCD         |??_C@_1FM@KAGDGFOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt@|
  02684		 |$LN34@SPI_Write|
  02684	73706949	 DCD         0x73706949
  02688		 |$LN35@SPI_Write|
  02688	00000000	 DCD         |??_C@_1EK@HGGCGFOK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8@|
  0268c		 |$M46125|

			 ENDP  ; |SPI_Write|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T46142| DCD	|$LN7@SpiDmaTxEn|
	DCD	0x40001404
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SpiDmaTxEnabled| PROC

; 155  : {

  00000		 |$LN7@SpiDmaTxEn|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46139|

; 156  :     //  Return enabled BOOL
; 157  :     return( pInstance->hTxDmaChannel != NULL );

  00010	e59d3010	 ldr         r3, [sp, #0x10]
  00014	e2833018	 add         r3, r3, #0x18
  00018	e5933000	 ldr         r3, [r3]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000002	 beq         |$LN3@SpiDmaTxEn|
  00024	e3a03001	 mov         r3, #1
  00028	e58d3004	 str         r3, [sp, #4]
  0002c	ea000001	 b           |$LN4@SpiDmaTxEn|
  00030		 |$LN3@SpiDmaTxEn|
  00030	e3a03000	 mov         r3, #0
  00034	e58d3004	 str         r3, [sp, #4]
  00038		 |$LN4@SpiDmaTxEn|
  00038	e59d3004	 ldr         r3, [sp, #4]
  0003c	e58d3000	 str         r3, [sp]

; 158  : }

  00040	e59d0000	 ldr         r0, [sp]
  00044	e28dd008	 add         sp, sp, #8
  00048	e89d6000	 ldmia       sp, {sp, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M46140|

			 ENDP  ; |SpiDmaTxEnabled|

	EXPORT	|??_C@_1DC@PLGOKCAK@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@MBICDMMI@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@EJKJFLJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HM@LECLJOMH@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$CI?$AA?$CD?$AA?5?$AAe?$AAl?$AAe?$AAm@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FA@JAMHJPDG@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@| [ DATA ] ; `string'

  00070			 AREA	 |.pdata|, PDATA
|$T46164| DCD	|$LN28@SPI_DmaWri|
	DCD	0x40011e04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@PLGOKCAK@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@MBICDMMI@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6@| DCB " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u", 0x0, "s"
	DCB	0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "x", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@EJKJFLJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, " ", 0x0, "t", 0x0, "i"
	DCB	0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0, ","
	DCB	0x0, " ", 0x0, "A", 0x0, "B", 0x0, "C", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HM@LECLJOMH@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$CI?$AA?$CD?$AA?5?$AAe?$AAl?$AAe?$AAm@| DCB " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, ":", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "S", 0x0, "t", 0x0, "a", 0x0, "r", 0x0, "t", 0x0, " "
	DCB	0x0, "(", 0x0, "#", 0x0, " ", 0x0, "e", 0x0, "l", 0x0, "e"
	DCB	0x0, "m", 0x0, "e", 0x0, "n", 0x0, "t", 0x0, "s", 0x0, ","
	DCB	0x0, " ", 0x0, "e", 0x0, "l", 0x0, "e", 0x0, "m", 0x0, "e"
	DCB	0x0, "n", 0x0, "t", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e"
	DCB	0x0, ")", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FA@JAMHJPDG@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0268c			 AREA	 |.text|, CODE, ARM

  0268c		 |SPI_DmaWrite| PROC

; 1329 : {

  0268c		 |$LN28@SPI_DmaWri|
  0268c	e1a0c00d	 mov         r12, sp
  02690	e92d0007	 stmdb       sp!, {r0 - r2}
  02694	e92d5000	 stmdb       sp!, {r12, lr}
  02698	e24dd04c	 sub         sp, sp, #0x4C
  0269c		 |$M46161|

; 1330 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  0269c	e59d3054	 ldr         r3, [sp, #0x54]
  026a0	e58d3018	 str         r3, [sp, #0x18]

; 1331 :     SPI_DEVICE *pDevice;
; 1332 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1333 :     UCHAR* pData = (UCHAR*)pBuffer;

  026a4	e59d3058	 ldr         r3, [sp, #0x58]
  026a8	e58d300c	 str         r3, [sp, #0xC]

; 1334 :     DWORD dwWordLen;
; 1335 :     DWORD dwWordSize;
; 1336 :     DWORD dwCount = 0;

  026ac	e3a03000	 mov         r3, #0
  026b0	e58d3010	 str         r3, [sp, #0x10]

; 1337 :     DWORD dwDmaSize;
; 1338 :     DWORD dwDmaStatus;
; 1339 : 
; 1340 :     DEBUGMSG(ZONE_DMA, (L"+SPI_DmaWrite(0x%08x, 0x%08x, 0x%08x)\r\n", context, pBuffer, size));

  026b4	e59f3424	 ldr         r3, [pc, #0x424]
  026b8	e5933440	 ldr         r3, [r3, #0x440]
  026bc	e3130020	 tst         r3, #0x20
  026c0	0a000007	 beq         |$LN12@SPI_DmaWri|
  026c4	e59d305c	 ldr         r3, [sp, #0x5C]
  026c8	e59d2058	 ldr         r2, [sp, #0x58]
  026cc	e59d1054	 ldr         r1, [sp, #0x54]
  026d0	e59f0428	 ldr         r0, [pc, #0x428]
  026d4	eb000000	 bl          NKDbgPrintfW
  026d8	e3a03001	 mov         r3, #1
  026dc	e58d3028	 str         r3, [sp, #0x28]
  026e0	ea000001	 b           |$LN13@SPI_DmaWri|
  026e4		 |$LN12@SPI_DmaWri|
  026e4	e3a03000	 mov         r3, #0
  026e8	e58d3028	 str         r3, [sp, #0x28]
  026ec		 |$LN13@SPI_DmaWri|

; 1341 : 
; 1342 :     // We don't need to check instance since it's already checked by caller    
; 1343 :     ASSERT(pInstance->cookie == SPI_INSTANCE_COOKIE);

  026ec	e59d3018	 ldr         r3, [sp, #0x18]
  026f0	e5932000	 ldr         r2, [r3]
  026f4	e59f3400	 ldr         r3, [pc, #0x400]
  026f8	e1520003	 cmp         r2, r3
  026fc	1a000002	 bne         |$LN14@SPI_DmaWri|
  02700	e3a03001	 mov         r3, #1
  02704	e58d302c	 str         r3, [sp, #0x2C]
  02708	ea000008	 b           |$LN15@SPI_DmaWri|
  0270c		 |$LN14@SPI_DmaWri|
  0270c	e3a03c05	 mov         r3, #5, 24
  02710	e383303f	 orr         r3, r3, #0x3F
  02714	e59f23dc	 ldr         r2, [pc, #0x3DC]
  02718	e59f13d4	 ldr         r1, [pc, #0x3D4]
  0271c	e59f03cc	 ldr         r0, [pc, #0x3CC]
  02720	eb000000	 bl          NKDbgPrintfW
  02724	e6000010	 __debugbreak_ce
  02728	e3a03000	 mov         r3, #0
  0272c	e58d302c	 str         r3, [sp, #0x2C]
  02730		 |$LN15@SPI_DmaWri|

; 1344 : 
; 1345 :     // Get pointers to registers
; 1346 :     pDevice = pInstance->pDevice;

  02730	e59d3018	 ldr         r3, [sp, #0x18]
  02734	e2833004	 add         r3, r3, #4
  02738	e5933000	 ldr         r3, [r3]
  0273c	e58d3004	 str         r3, [sp, #4]

; 1347 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;

  02740	e59d3018	 ldr         r3, [sp, #0x18]
  02744	e2833010	 add         r3, r3, #0x10
  02748	e5933000	 ldr         r3, [r3]
  0274c	e58d301c	 str         r3, [sp, #0x1C]

; 1348 : 
; 1349 : 
; 1350 :     // Get the word length of the data
; 1351 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  02750	e59d3018	 ldr         r3, [sp, #0x18]
  02754	e283300c	 add         r3, r3, #0xC
  02758	e5933000	 ldr         r3, [r3]
  0275c	e1a03a03	 mov         r3, r3, lsl #20
  02760	e1a03da3	 mov         r3, r3, lsr #27
  02764	e2833001	 add         r3, r3, #1
  02768	e58d3020	 str         r3, [sp, #0x20]

; 1352 : 
; 1353 :     //  Ensure that only SPI words elements are DMA'd
; 1354 :     //  Adjust the DMAsize
; 1355 :     if( dwWordLen > 16 )

  0276c	e59d3020	 ldr         r3, [sp, #0x20]
  02770	e3530010	 cmp         r3, #0x10
  02774	9a000008	 bls         |$LN9@SPI_DmaWri|

; 1356 :     {
; 1357 :         size = (size/sizeof(UINT32)) * sizeof(UINT32);

  02778	e59d105c	 ldr         r1, [sp, #0x5C]
  0277c	e3a00004	 mov         r0, #4
  02780	eb000000	 bl          __rt_udiv
  02784	e3a03004	 mov         r3, #4
  02788	e0030390	 mul         r3, r0, r3
  0278c	e58d305c	 str         r3, [sp, #0x5C]

; 1358 :         dwWordSize = sizeof(UINT32);

  02790	e3a03004	 mov         r3, #4
  02794	e58d3000	 str         r3, [sp]
  02798	ea00000d	 b           |$LN8@SPI_DmaWri|
  0279c		 |$LN9@SPI_DmaWri|

; 1359 :     }
; 1360 :     else if( dwWordLen > 8 )

  0279c	e59d3020	 ldr         r3, [sp, #0x20]
  027a0	e3530008	 cmp         r3, #8
  027a4	9a000008	 bls         |$LN7@SPI_DmaWri|

; 1361 :     {
; 1362 :         size = (size/sizeof(UINT16)) * sizeof(UINT16);

  027a8	e59d105c	 ldr         r1, [sp, #0x5C]
  027ac	e3a00002	 mov         r0, #2
  027b0	eb000000	 bl          __rt_udiv
  027b4	e3a03002	 mov         r3, #2
  027b8	e0030390	 mul         r3, r0, r3
  027bc	e58d305c	 str         r3, [sp, #0x5C]

; 1363 :         dwWordSize = sizeof(UINT16);

  027c0	e3a03002	 mov         r3, #2
  027c4	e58d3000	 str         r3, [sp]

; 1364 :     }
; 1365 :     else

  027c8	ea000001	 b           |$LN6@SPI_DmaWri|
  027cc		 |$LN7@SPI_DmaWri|

; 1366 :     {
; 1367 :         dwWordSize = sizeof(UINT8);

  027cc	e3a03001	 mov         r3, #1
  027d0	e58d3000	 str         r3, [sp]
  027d4		 |$LN6@SPI_DmaWri|
  027d4		 |$LN8@SPI_DmaWri|

; 1368 :     }
; 1369 : 
; 1370 :     //  Get the length of how much can be DMA'd
; 1371 :     dwDmaSize = (size < pInstance->pDevice->dwTxBufferSize) ? size : pInstance->pDevice->dwTxBufferSize;

  027d4	e59d3018	 ldr         r3, [sp, #0x18]
  027d8	e2833004	 add         r3, r3, #4
  027dc	e5933000	 ldr         r3, [r3]
  027e0	e283302c	 add         r3, r3, #0x2C
  027e4	e59d205c	 ldr         r2, [sp, #0x5C]
  027e8	e5933000	 ldr         r3, [r3]
  027ec	e1520003	 cmp         r2, r3
  027f0	2a000002	 bcs         |$LN16@SPI_DmaWri|
  027f4	e59d305c	 ldr         r3, [sp, #0x5C]
  027f8	e58d3030	 str         r3, [sp, #0x30]
  027fc	ea000005	 b           |$LN17@SPI_DmaWri|
  02800		 |$LN16@SPI_DmaWri|
  02800	e59d3018	 ldr         r3, [sp, #0x18]
  02804	e2833004	 add         r3, r3, #4
  02808	e5933000	 ldr         r3, [r3]
  0280c	e283302c	 add         r3, r3, #0x2C
  02810	e5933000	 ldr         r3, [r3]
  02814	e58d3030	 str         r3, [sp, #0x30]
  02818		 |$LN17@SPI_DmaWri|
  02818	e59d3030	 ldr         r3, [sp, #0x30]
  0281c	e58d3014	 str         r3, [sp, #0x14]

; 1372 :     dwDmaSize /= dwWordSize;

  02820	e59d1014	 ldr         r1, [sp, #0x14]
  02824	e59d0000	 ldr         r0, [sp]
  02828	eb000000	 bl          __rt_udiv
  0282c	e58d0014	 str         r0, [sp, #0x14]

; 1373 : 
; 1374 :     // Get hardware
; 1375 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  02830	e3e01000	 mvn         r1, #0
  02834	e59d3004	 ldr         r3, [sp, #4]
  02838	e283301c	 add         r3, r3, #0x1C
  0283c	e5930000	 ldr         r0, [r3]
  02840	eb000000	 bl          WaitForSingleObject

; 1376 : 
; 1377 :     // Set this driver to Active Mode
; 1378 :     SetSPIPower(pDevice, D0);

  02844	e3a01000	 mov         r1, #0
  02848	e59d0004	 ldr         r0, [sp, #4]
  0284c	eb000000	 bl          SetSPIPower

; 1379 :     
; 1380 :     // Enable the channel
; 1381 : 	if (!pInstance->exclusiveAccess)

  02850	e59d3018	 ldr         r3, [sp, #0x18]
  02854	e2833014	 add         r3, r3, #0x14
  02858	e5933000	 ldr         r3, [r3]
  0285c	e3530000	 cmp         r3, #0
  02860	1a000006	 bne         |$LN5@SPI_DmaWri|

; 1382 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  02864	e59d301c	 ldr         r3, [sp, #0x1C]
  02868	e2833008	 add         r3, r3, #8
  0286c	e5933000	 ldr         r3, [r3]
  02870	e3832001	 orr         r2, r3, #1
  02874	e59d301c	 ldr         r3, [sp, #0x1C]
  02878	e2833008	 add         r3, r3, #8
  0287c	e5832000	 str         r2, [r3]
  02880		 |$LN5@SPI_DmaWri|

; 1383 : 
; 1384 :     //  Write out all the data; loop if necessary
; 1385 :     for( dwCount = 0; dwCount < size; )

  02880	e3a03000	 mov         r3, #0
  02884	e58d3010	 str         r3, [sp, #0x10]
  02888		 |$LN4@SPI_DmaWri|
  02888	e59d2010	 ldr         r2, [sp, #0x10]
  0288c	e59d305c	 ldr         r3, [sp, #0x5C]
  02890	e1520003	 cmp         r2, r3
  02894	2a00006a	 bcs         |$LN3@SPI_DmaWri|

; 1386 :     {
; 1387 :         // Copy the data to the DMA buffer
; 1388 :         memcpy(pInstance->pTxDmaBuffer, &pData[dwCount], dwDmaSize*dwWordSize);

  02898	e59d1014	 ldr         r1, [sp, #0x14]
  0289c	e59d3000	 ldr         r3, [sp]
  028a0	e0020391	 mul         r2, r1, r3
  028a4	e59d100c	 ldr         r1, [sp, #0xC]
  028a8	e59d3010	 ldr         r3, [sp, #0x10]
  028ac	e0811003	 add         r1, r1, r3
  028b0	e59d3018	 ldr         r3, [sp, #0x18]
  028b4	e28330b8	 add         r3, r3, #0xB8
  028b8	e5930000	 ldr         r0, [r3]
  028bc	eb000000	 bl          memcpy

; 1389 : 
; 1390 :         // Set the DMA transfer size
; 1391 :         DmaSetElementAndFrameCount(&pInstance->txDmaInfo, (UINT16) dwDmaSize, 1);

  028c0	e3a02001	 mov         r2, #1
  028c4	e59d3014	 ldr         r3, [sp, #0x14]
  028c8	e1a01803	 mov         r1, r3, lsl #16
  028cc	e1a01821	 mov         r1, r1, lsr #16
  028d0	e59d3018	 ldr         r3, [sp, #0x18]
  028d4	e2830088	 add         r0, r3, #0x88
  028d8	eb000000	 bl          DmaSetElementAndFrameCount

; 1392 :     
; 1393 :         DEBUGMSG(ZONE_DMA, (L" SPI_DmaWrite: DMA Start (# elements, elementSize) = %d, %d\r\n", dwDmaSize, dwWordSize));

  028dc	e59f31fc	 ldr         r3, [pc, #0x1FC]
  028e0	e5933440	 ldr         r3, [r3, #0x440]
  028e4	e3130020	 tst         r3, #0x20
  028e8	0a000006	 beq         |$LN18@SPI_DmaWri|
  028ec	e59d2000	 ldr         r2, [sp]
  028f0	e59d1014	 ldr         r1, [sp, #0x14]
  028f4	e59f01f0	 ldr         r0, [pc, #0x1F0]
  028f8	eb000000	 bl          NKDbgPrintfW
  028fc	e3a03001	 mov         r3, #1
  02900	e58d3034	 str         r3, [sp, #0x34]
  02904	ea000001	 b           |$LN19@SPI_DmaWri|
  02908		 |$LN18@SPI_DmaWri|
  02908	e3a03000	 mov         r3, #0
  0290c	e58d3034	 str         r3, [sp, #0x34]
  02910		 |$LN19@SPI_DmaWri|

; 1394 : 
; 1395 :         // Start the DMA
; 1396 :         PreDmaActivation(pInstance);

  02910	e59d0018	 ldr         r0, [sp, #0x18]
  02914	eb000000	 bl          PreDmaActivation

; 1397 :         DmaStart(&pInstance->txDmaInfo);

  02918	e59d3018	 ldr         r3, [sp, #0x18]
  0291c	e2830088	 add         r0, r3, #0x88
  02920	eb000000	 bl          DmaStart

; 1398 : 
; 1399 :         //  Wait for DMA done interrupt or timeout
; 1400 :         if( WaitForSingleObject(pInstance->hTxDmaIntEvent, pInstance->pDevice->timeout) != WAIT_OBJECT_0)

  02924	e59d3018	 ldr         r3, [sp, #0x18]
  02928	e2833004	 add         r3, r3, #4
  0292c	e5933000	 ldr         r3, [r3]
  02930	e2833028	 add         r3, r3, #0x28
  02934	e5931000	 ldr         r1, [r3]
  02938	e59d3018	 ldr         r3, [sp, #0x18]
  0293c	e2833020	 add         r3, r3, #0x20
  02940	e5930000	 ldr         r0, [r3]
  02944	eb000000	 bl          WaitForSingleObject
  02948	e58d0038	 str         r0, [sp, #0x38]
  0294c	e59d3038	 ldr         r3, [sp, #0x38]
  02950	e3530000	 cmp         r3, #0
  02954	0a000014	 beq         |$LN2@SPI_DmaWri|

; 1401 :         {
; 1402 :             DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DmaWrite: "
; 1403 :                 L"DMA interrupt timeout, ABC\r\n"
; 1404 :             ));

  02958	e59f3180	 ldr         r3, [pc, #0x180]
  0295c	e5933440	 ldr         r3, [r3, #0x440]
  02960	e3130001	 tst         r3, #1
  02964	0a000004	 beq         |$LN20@SPI_DmaWri|
  02968	e59f0178	 ldr         r0, [pc, #0x178]
  0296c	eb000000	 bl          NKDbgPrintfW
  02970	e3a03001	 mov         r3, #1
  02974	e58d303c	 str         r3, [sp, #0x3C]
  02978	ea000001	 b           |$LN21@SPI_DmaWri|
  0297c		 |$LN20@SPI_DmaWri|
  0297c	e3a03000	 mov         r3, #0
  02980	e58d303c	 str         r3, [sp, #0x3C]
  02984		 |$LN21@SPI_DmaWri|

; 1405 : 
; 1406 :             //  Cleanup
; 1407 :             DmaStop(&pInstance->txDmaInfo);

  02984	e59d3018	 ldr         r3, [sp, #0x18]
  02988	e2830088	 add         r0, r3, #0x88
  0298c	eb000000	 bl          DmaStop

; 1408 :             DmaInterruptDone(pInstance->hTxDmaChannel);

  02990	e59d3018	 ldr         r3, [sp, #0x18]
  02994	e2833018	 add         r3, r3, #0x18
  02998	e5930000	 ldr         r0, [r3]
  0299c	eb000000	 bl          DmaInterruptDone

; 1409 :             PostDmaDeactivation(pInstance);

  029a0	e59d0018	 ldr         r0, [sp, #0x18]
  029a4	eb000000	 bl          PostDmaDeactivation

; 1410 :             goto cleanUp;

  029a8	ea000025	 b           |$cleanUp$45095|
  029ac		 |$LN2@SPI_DmaWri|

; 1411 :         }
; 1412 : 
; 1413 :         // Get and clear the status
; 1414 :         dwDmaStatus = DmaGetStatus(&pInstance->txDmaInfo);

  029ac	e59d3018	 ldr         r3, [sp, #0x18]
  029b0	e2830088	 add         r0, r3, #0x88
  029b4	eb000000	 bl          DmaGetStatus
  029b8	e58d0040	 str         r0, [sp, #0x40]
  029bc	e59d3040	 ldr         r3, [sp, #0x40]
  029c0	e58d3008	 str         r3, [sp, #8]

; 1415 :         DmaClearStatus(&pInstance->txDmaInfo, dwDmaStatus);

  029c4	e59d1008	 ldr         r1, [sp, #8]
  029c8	e59d3018	 ldr         r3, [sp, #0x18]
  029cc	e2830088	 add         r0, r3, #0x88
  029d0	eb000000	 bl          DmaClearStatus

; 1416 : 
; 1417 :         DEBUGMSG(ZONE_DMA, (L" SPI_DmaWrite: DMA Status = %x\r\n", dwDmaStatus));

  029d4	e59f3104	 ldr         r3, [pc, #0x104]
  029d8	e5933440	 ldr         r3, [r3, #0x440]
  029dc	e3130020	 tst         r3, #0x20
  029e0	0a000005	 beq         |$LN22@SPI_DmaWri|
  029e4	e59d1008	 ldr         r1, [sp, #8]
  029e8	e59f00f4	 ldr         r0, [pc, #0xF4]
  029ec	eb000000	 bl          NKDbgPrintfW
  029f0	e3a03001	 mov         r3, #1
  029f4	e58d3044	 str         r3, [sp, #0x44]
  029f8	ea000001	 b           |$LN23@SPI_DmaWri|
  029fc		 |$LN22@SPI_DmaWri|
  029fc	e3a03000	 mov         r3, #0
  02a00	e58d3044	 str         r3, [sp, #0x44]
  02a04		 |$LN23@SPI_DmaWri|

; 1418 : 
; 1419 :         // Stop the DMA
; 1420 :         DmaInterruptDone(pInstance->hTxDmaChannel);

  02a04	e59d3018	 ldr         r3, [sp, #0x18]
  02a08	e2833018	 add         r3, r3, #0x18
  02a0c	e5930000	 ldr         r0, [r3]
  02a10	eb000000	 bl          DmaInterruptDone

; 1421 :         DmaStop(&pInstance->txDmaInfo);

  02a14	e59d3018	 ldr         r3, [sp, #0x18]
  02a18	e2830088	 add         r0, r3, #0x88
  02a1c	eb000000	 bl          DmaStop

; 1422 :         PostDmaDeactivation(pInstance);

  02a20	e59d0018	 ldr         r0, [sp, #0x18]
  02a24	eb000000	 bl          PostDmaDeactivation

; 1423 : 
; 1424 :         //  Update amount transferred
; 1425 :         dwCount += dwDmaSize*dwWordSize;

  02a28	e59d1014	 ldr         r1, [sp, #0x14]
  02a2c	e59d3000	 ldr         r3, [sp]
  02a30	e0020391	 mul         r2, r1, r3
  02a34	e59d3010	 ldr         r3, [sp, #0x10]
  02a38	e0833002	 add         r3, r3, r2
  02a3c	e58d3010	 str         r3, [sp, #0x10]

; 1426 :     }

  02a40	eaffff90	 b           |$LN4@SPI_DmaWri|
  02a44		 |$LN3@SPI_DmaWri|
  02a44		 |$cleanUp$45095|

; 1427 :     
; 1428 : cleanUp:
; 1429 :     // Disable the channel.
; 1430 : 	if (!pInstance->exclusiveAccess)

  02a44	e59d3018	 ldr         r3, [sp, #0x18]
  02a48	e2833014	 add         r3, r3, #0x14
  02a4c	e5933000	 ldr         r3, [r3]
  02a50	e3530000	 cmp         r3, #0
  02a54	1a000007	 bne         |$LN1@SPI_DmaWri|

; 1431 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  02a58	e59d301c	 ldr         r3, [sp, #0x1C]
  02a5c	e2833008	 add         r3, r3, #8
  02a60	e5932000	 ldr         r2, [r3]
  02a64	e3e03001	 mvn         r3, #1
  02a68	e0022003	 and         r2, r2, r3
  02a6c	e59d301c	 ldr         r3, [sp, #0x1C]
  02a70	e2833008	 add         r3, r3, #8
  02a74	e5832000	 str         r2, [r3]
  02a78		 |$LN1@SPI_DmaWri|

; 1432 : 
; 1433 :     // Set this driver to Suspend Mode
; 1434 :     SetSPIPower(pDevice, D4);

  02a78	e3a01004	 mov         r1, #4
  02a7c	e59d0004	 ldr         r0, [sp, #4]
  02a80	eb000000	 bl          SetSPIPower

; 1435 : 
; 1436 :     // Release hardware
; 1437 : 	ReleaseMutex(pDevice->hControllerMutex);

  02a84	e59d3004	 ldr         r3, [sp, #4]
  02a88	e283301c	 add         r3, r3, #0x1C
  02a8c	e5930000	 ldr         r0, [r3]
  02a90	eb000000	 bl          ReleaseMutex

; 1438 : 
; 1439 :     DEBUGMSG(ZONE_DMA, (L"-SPI_DmaWrite(rc = %d)\r\n", dwCount));

  02a94	e59f3044	 ldr         r3, [pc, #0x44]
  02a98	e5933440	 ldr         r3, [r3, #0x440]
  02a9c	e3130020	 tst         r3, #0x20
  02aa0	0a000005	 beq         |$LN24@SPI_DmaWri|
  02aa4	e59d1010	 ldr         r1, [sp, #0x10]
  02aa8	e59f002c	 ldr         r0, [pc, #0x2C]
  02aac	eb000000	 bl          NKDbgPrintfW
  02ab0	e3a03001	 mov         r3, #1
  02ab4	e58d3048	 str         r3, [sp, #0x48]
  02ab8	ea000001	 b           |$LN25@SPI_DmaWri|
  02abc		 |$LN24@SPI_DmaWri|
  02abc	e3a03000	 mov         r3, #0
  02ac0	e58d3048	 str         r3, [sp, #0x48]
  02ac4		 |$LN25@SPI_DmaWri|

; 1440 :     return dwCount;

  02ac4	e59d3010	 ldr         r3, [sp, #0x10]
  02ac8	e58d3024	 str         r3, [sp, #0x24]

; 1441 : }

  02acc	e59d0024	 ldr         r0, [sp, #0x24]
  02ad0	e28dd04c	 add         sp, sp, #0x4C
  02ad4	e89d6000	 ldmia       sp, {sp, lr}
  02ad8	e12fff1e	 bx          lr
  02adc		 |$LN29@SPI_DmaWri|
  02adc		 |$LN30@SPI_DmaWri|
  02adc	00000000	 DCD         |??_C@_1DC@PLGOKCAK@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  02ae0		 |$LN31@SPI_DmaWri|
  02ae0	00000000	 DCD         |dpCurSettings|
  02ae4		 |$LN32@SPI_DmaWri|
  02ae4	00000000	 DCD         |??_C@_1EC@MBICDMMI@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6@|
  02ae8		 |$LN33@SPI_DmaWri|
  02ae8	00000000	 DCD         |??_C@_1GE@EJKJFLJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@|
  02aec		 |$LN34@SPI_DmaWri|
  02aec	00000000	 DCD         |??_C@_1HM@LECLJOMH@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$CI?$AA?$CD?$AA?5?$AAe?$AAl?$AAe?$AAm@|
  02af0		 |$LN35@SPI_DmaWri|
  02af0	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02af4		 |$LN36@SPI_DmaWri|
  02af4	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  02af8		 |$LN37@SPI_DmaWri|
  02af8	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02afc		 |$LN38@SPI_DmaWri|
  02afc	73706949	 DCD         0x73706949
  02b00		 |$LN39@SPI_DmaWri|
  02b00	00000000	 DCD         |??_C@_1FA@JAMHJPDG@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx@|
  02b04		 |$M46162|

			 ENDP  ; |SPI_DmaWrite|

	EXPORT	|??_C@_1EM@CAAADFIL@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAA?$AAs?$AAy?$AAn?$AAc?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| [ DATA ] ; `string'
	EXPORT	|SPI_AsyncWriteRead|

  00078			 AREA	 |.pdata|, PDATA
|$T46189| DCD	|$LN19@SPI_AsyncW|
	DCD	0x4000c804

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EM@CAAADFIL@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAA?$AAs?$AAy?$AAn?$AAc?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "A", 0x0, "s"
	DCB	0x0, "y", 0x0, "n", 0x0, "c", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%"
	DCB	0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  02b04			 AREA	 |.text|, CODE, ARM

  02b04		 |SPI_AsyncWriteRead| PROC

; 1459 : {

  02b04		 |$LN19@SPI_AsyncW|
  02b04	e1a0c00d	 mov         r12, sp
  02b08	e92d000f	 stmdb       sp!, {r0 - r3}
  02b0c	e92d5000	 stmdb       sp!, {r12, lr}
  02b10	e24dd038	 sub         sp, sp, #0x38
  02b14		 |$M46186|

; 1460 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  02b14	e59d3040	 ldr         r3, [sp, #0x40]
  02b18	e58d3010	 str         r3, [sp, #0x10]

; 1461 :     SPI_DEVICE *pDevice;
; 1462 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1463 :     UCHAR* pOutData = (UCHAR*)pOutBuffer;

  02b1c	e59d3048	 ldr         r3, [sp, #0x48]
  02b20	e58d3008	 str         r3, [sp, #8]

; 1464 :     DWORD dwWordLen;
; 1465 :     DWORD dwWordSize;
; 1466 :     DWORD dwDmaSize;
; 1467 : 
; 1468 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_AsyncWriteRead(0x%08x, 0x%08x)\r\n", context, size));

  02b24	e59f32e0	 ldr         r3, [pc, #0x2E0]
  02b28	e5933440	 ldr         r3, [r3, #0x440]
  02b2c	e3130004	 tst         r3, #4
  02b30	0a000006	 beq         |$LN9@SPI_AsyncW|
  02b34	e59d2044	 ldr         r2, [sp, #0x44]
  02b38	e59d1040	 ldr         r1, [sp, #0x40]
  02b3c	e59f02dc	 ldr         r0, [pc, #0x2DC]
  02b40	eb000000	 bl          NKDbgPrintfW
  02b44	e3a03001	 mov         r3, #1
  02b48	e58d3020	 str         r3, [sp, #0x20]
  02b4c	ea000001	 b           |$LN10@SPI_AsyncW|
  02b50		 |$LN9@SPI_AsyncW|
  02b50	e3a03000	 mov         r3, #0
  02b54	e58d3020	 str         r3, [sp, #0x20]
  02b58		 |$LN10@SPI_AsyncW|

; 1469 :   
; 1470 :     // We don't need to check instance since it's already checked by caller
; 1471 :     ASSERT(pInstance->cookie == SPI_INSTANCE_COOKIE);

  02b58	e59d3010	 ldr         r3, [sp, #0x10]
  02b5c	e5932000	 ldr         r2, [r3]
  02b60	e59f32b4	 ldr         r3, [pc, #0x2B4]
  02b64	e1520003	 cmp         r2, r3
  02b68	1a000002	 bne         |$LN11@SPI_AsyncW|
  02b6c	e3a03001	 mov         r3, #1
  02b70	e58d3024	 str         r3, [sp, #0x24]
  02b74	ea000008	 b           |$LN12@SPI_AsyncW|
  02b78		 |$LN11@SPI_AsyncW|
  02b78	e3a03c05	 mov         r3, #5, 24
  02b7c	e38330bf	 orr         r3, r3, #0xBF
  02b80	e59f2290	 ldr         r2, [pc, #0x290]
  02b84	e59f1288	 ldr         r1, [pc, #0x288]
  02b88	e59f0280	 ldr         r0, [pc, #0x280]
  02b8c	eb000000	 bl          NKDbgPrintfW
  02b90	e6000010	 __debugbreak_ce
  02b94	e3a03000	 mov         r3, #0
  02b98	e58d3024	 str         r3, [sp, #0x24]
  02b9c		 |$LN12@SPI_AsyncW|

; 1472 : 
; 1473 :     if ((SpiDmaTxEnabled(pInstance) == FALSE) || (SpiDmaRxEnabled(pInstance) == FALSE) ||
; 1474 :         (pInstance->pDevice->dwTxBufferSize < size) || (pInstance->pDevice->dwRxBufferSize < size))

  02b9c	e59d0010	 ldr         r0, [sp, #0x10]
  02ba0	eb000000	 bl          SpiDmaTxEnabled
  02ba4	e58d0028	 str         r0, [sp, #0x28]
  02ba8	e59d3028	 ldr         r3, [sp, #0x28]
  02bac	e3530000	 cmp         r3, #0
  02bb0	0a000015	 beq         |$LN5@SPI_AsyncW|
  02bb4	e59d0010	 ldr         r0, [sp, #0x10]
  02bb8	eb000000	 bl          SpiDmaRxEnabled
  02bbc	e58d002c	 str         r0, [sp, #0x2C]
  02bc0	e59d302c	 ldr         r3, [sp, #0x2C]
  02bc4	e3530000	 cmp         r3, #0
  02bc8	0a00000f	 beq         |$LN5@SPI_AsyncW|
  02bcc	e59d3010	 ldr         r3, [sp, #0x10]
  02bd0	e2833004	 add         r3, r3, #4
  02bd4	e5933000	 ldr         r3, [r3]
  02bd8	e283302c	 add         r3, r3, #0x2C
  02bdc	e5932000	 ldr         r2, [r3]
  02be0	e59d3044	 ldr         r3, [sp, #0x44]
  02be4	e1520003	 cmp         r2, r3
  02be8	3a000007	 bcc         |$LN5@SPI_AsyncW|
  02bec	e59d3010	 ldr         r3, [sp, #0x10]
  02bf0	e2833004	 add         r3, r3, #4
  02bf4	e5933000	 ldr         r3, [r3]
  02bf8	e2833030	 add         r3, r3, #0x30
  02bfc	e5932000	 ldr         r2, [r3]
  02c00	e59d3044	 ldr         r3, [sp, #0x44]
  02c04	e1520003	 cmp         r2, r3
  02c08	2a000002	 bcs         |$LN6@SPI_AsyncW|
  02c0c		 |$LN5@SPI_AsyncW|

; 1475 :     {
; 1476 :         return 0;

  02c0c	e3a03000	 mov         r3, #0
  02c10	e58d301c	 str         r3, [sp, #0x1C]
  02c14	ea000077	 b           |$LN7@SPI_AsyncW|
  02c18		 |$LN6@SPI_AsyncW|

; 1477 :     }
; 1478 : 
; 1479 :     // Get pointers to registers
; 1480 :     pDevice = pInstance->pDevice;

  02c18	e59d3010	 ldr         r3, [sp, #0x10]
  02c1c	e2833004	 add         r3, r3, #4
  02c20	e5933000	 ldr         r3, [r3]
  02c24	e58d3004	 str         r3, [sp, #4]

; 1481 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;

  02c28	e59d3010	 ldr         r3, [sp, #0x10]
  02c2c	e2833010	 add         r3, r3, #0x10
  02c30	e5933000	 ldr         r3, [r3]
  02c34	e58d3014	 str         r3, [sp, #0x14]

; 1482 : 
; 1483 : 
; 1484 :     // Get the word length of the data
; 1485 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  02c38	e59d3010	 ldr         r3, [sp, #0x10]
  02c3c	e283300c	 add         r3, r3, #0xC
  02c40	e5933000	 ldr         r3, [r3]
  02c44	e1a03a03	 mov         r3, r3, lsl #20
  02c48	e1a03da3	 mov         r3, r3, lsr #27
  02c4c	e2833001	 add         r3, r3, #1
  02c50	e58d3018	 str         r3, [sp, #0x18]

; 1486 : 
; 1487 :     //  Ensure that only SPI words elements are DMA'd
; 1488 :     //  Adjust the DMAsize
; 1489 :     if( dwWordLen > 16 )

  02c54	e59d3018	 ldr         r3, [sp, #0x18]
  02c58	e3530010	 cmp         r3, #0x10
  02c5c	9a000008	 bls         |$LN4@SPI_AsyncW|

; 1490 :     {
; 1491 :         size = (size/sizeof(UINT32)) * sizeof(UINT32);

  02c60	e59d1044	 ldr         r1, [sp, #0x44]
  02c64	e3a00004	 mov         r0, #4
  02c68	eb000000	 bl          __rt_udiv
  02c6c	e3a03004	 mov         r3, #4
  02c70	e0030390	 mul         r3, r0, r3
  02c74	e58d3044	 str         r3, [sp, #0x44]

; 1492 :         dwWordSize = sizeof(UINT32);

  02c78	e3a03004	 mov         r3, #4
  02c7c	e58d3000	 str         r3, [sp]
  02c80	ea00000d	 b           |$LN3@SPI_AsyncW|
  02c84		 |$LN4@SPI_AsyncW|

; 1493 :     }
; 1494 :     else if( dwWordLen > 8 )

  02c84	e59d3018	 ldr         r3, [sp, #0x18]
  02c88	e3530008	 cmp         r3, #8
  02c8c	9a000008	 bls         |$LN2@SPI_AsyncW|

; 1495 :     {
; 1496 :         size = (size/sizeof(UINT16)) * sizeof(UINT16);

  02c90	e59d1044	 ldr         r1, [sp, #0x44]
  02c94	e3a00002	 mov         r0, #2
  02c98	eb000000	 bl          __rt_udiv
  02c9c	e3a03002	 mov         r3, #2
  02ca0	e0030390	 mul         r3, r0, r3
  02ca4	e58d3044	 str         r3, [sp, #0x44]

; 1497 :         dwWordSize = sizeof(UINT16);

  02ca8	e3a03002	 mov         r3, #2
  02cac	e58d3000	 str         r3, [sp]

; 1498 :     }
; 1499 :     else

  02cb0	ea000001	 b           |$LN1@SPI_AsyncW|
  02cb4		 |$LN2@SPI_AsyncW|

; 1500 :     {
; 1501 :         dwWordSize = sizeof(UINT8);

  02cb4	e3a03001	 mov         r3, #1
  02cb8	e58d3000	 str         r3, [sp]
  02cbc		 |$LN1@SPI_AsyncW|
  02cbc		 |$LN3@SPI_AsyncW|

; 1502 :     }
; 1503 : 
; 1504 :     //  Get the length of how much can be DMA'd
; 1505 :     dwDmaSize = (size < pDevice->dwTxBufferSize) ? size : pDevice->dwTxBufferSize;

  02cbc	e59d3004	 ldr         r3, [sp, #4]
  02cc0	e283302c	 add         r3, r3, #0x2C
  02cc4	e59d2044	 ldr         r2, [sp, #0x44]
  02cc8	e5933000	 ldr         r3, [r3]
  02ccc	e1520003	 cmp         r2, r3
  02cd0	2a000002	 bcs         |$LN13@SPI_AsyncW|
  02cd4	e59d3044	 ldr         r3, [sp, #0x44]
  02cd8	e58d3030	 str         r3, [sp, #0x30]
  02cdc	ea000003	 b           |$LN14@SPI_AsyncW|
  02ce0		 |$LN13@SPI_AsyncW|
  02ce0	e59d3004	 ldr         r3, [sp, #4]
  02ce4	e283302c	 add         r3, r3, #0x2C
  02ce8	e5933000	 ldr         r3, [r3]
  02cec	e58d3030	 str         r3, [sp, #0x30]
  02cf0		 |$LN14@SPI_AsyncW|
  02cf0	e59d3030	 ldr         r3, [sp, #0x30]
  02cf4	e58d300c	 str         r3, [sp, #0xC]

; 1506 :     dwDmaSize /= dwWordSize;

  02cf8	e59d100c	 ldr         r1, [sp, #0xC]
  02cfc	e59d0000	 ldr         r0, [sp]
  02d00	eb000000	 bl          __rt_udiv
  02d04	e58d000c	 str         r0, [sp, #0xC]

; 1507 : 
; 1508 :     // Get hardware
; 1509 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  02d08	e3e01000	 mvn         r1, #0
  02d0c	e59d3004	 ldr         r3, [sp, #4]
  02d10	e283301c	 add         r3, r3, #0x1C
  02d14	e5930000	 ldr         r0, [r3]
  02d18	eb000000	 bl          WaitForSingleObject

; 1510 : 
; 1511 :     // Set this driver to Active Mode
; 1512 :     SetSPIPower(pDevice, D0);

  02d1c	e3a01000	 mov         r1, #0
  02d20	e59d0004	 ldr         r0, [sp, #4]
  02d24	eb000000	 bl          SetSPIPower

; 1513 : 
; 1514 :     // Enable the channel
; 1515 :     SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  02d28	e59d3014	 ldr         r3, [sp, #0x14]
  02d2c	e2833008	 add         r3, r3, #8
  02d30	e5933000	 ldr         r3, [r3]
  02d34	e3832001	 orr         r2, r3, #1
  02d38	e59d3014	 ldr         r3, [sp, #0x14]
  02d3c	e2833008	 add         r3, r3, #8
  02d40	e5832000	 str         r2, [r3]

; 1516 : 
; 1517 :    	// Setup transmit
; 1518 :     // Copy the data to the DMA buffer
; 1519 :     memcpy(pInstance->pTxDmaBuffer, pOutData, dwDmaSize*dwWordSize);

  02d44	e59d100c	 ldr         r1, [sp, #0xC]
  02d48	e59d3000	 ldr         r3, [sp]
  02d4c	e0020391	 mul         r2, r1, r3
  02d50	e59d1008	 ldr         r1, [sp, #8]
  02d54	e59d3010	 ldr         r3, [sp, #0x10]
  02d58	e28330b8	 add         r3, r3, #0xB8
  02d5c	e5930000	 ldr         r0, [r3]
  02d60	eb000000	 bl          memcpy

; 1520 : 
; 1521 :     // Set the DMA transfer size
; 1522 :     DmaSetElementAndFrameCount(&pInstance->txDmaInfo, (UINT16) dwDmaSize, 1);

  02d64	e3a02001	 mov         r2, #1
  02d68	e59d300c	 ldr         r3, [sp, #0xC]
  02d6c	e1a01803	 mov         r1, r3, lsl #16
  02d70	e1a01821	 mov         r1, r1, lsr #16
  02d74	e59d3010	 ldr         r3, [sp, #0x10]
  02d78	e2830088	 add         r0, r3, #0x88
  02d7c	eb000000	 bl          DmaSetElementAndFrameCount

; 1523 : 
; 1524 :     DEBUGMSG(ZONE_DMA, (L" SPI_DmaWrite: DMA Start (# elements, elementSize) = %d, %d\r\n", dwDmaSize, dwWordSize));

  02d80	e59f3084	 ldr         r3, [pc, #0x84]
  02d84	e5933440	 ldr         r3, [r3, #0x440]
  02d88	e3130020	 tst         r3, #0x20
  02d8c	0a000006	 beq         |$LN15@SPI_AsyncW|
  02d90	e59d2000	 ldr         r2, [sp]
  02d94	e59d100c	 ldr         r1, [sp, #0xC]
  02d98	e59f0068	 ldr         r0, [pc, #0x68]
  02d9c	eb000000	 bl          NKDbgPrintfW
  02da0	e3a03001	 mov         r3, #1
  02da4	e58d3034	 str         r3, [sp, #0x34]
  02da8	ea000001	 b           |$LN16@SPI_AsyncW|
  02dac		 |$LN15@SPI_AsyncW|
  02dac	e3a03000	 mov         r3, #0
  02db0	e58d3034	 str         r3, [sp, #0x34]
  02db4		 |$LN16@SPI_AsyncW|

; 1525 : 
; 1526 : 	// Setup receive DMA
; 1527 :     DmaSetElementAndFrameCount(&pInstance->rxDmaInfo, (UINT16) dwDmaSize, 1);

  02db4	e3a02001	 mov         r2, #1
  02db8	e59d300c	 ldr         r3, [sp, #0xC]
  02dbc	e1a01803	 mov         r1, r3, lsl #16
  02dc0	e1a01821	 mov         r1, r1, lsr #16
  02dc4	e59d3010	 ldr         r3, [sp, #0x10]
  02dc8	e28300a0	 add         r0, r3, #0xA0
  02dcc	eb000000	 bl          DmaSetElementAndFrameCount

; 1528 : 	
; 1529 :     // Start the DMA
; 1530 :     PreDmaActivation(pInstance);

  02dd0	e59d0010	 ldr         r0, [sp, #0x10]
  02dd4	eb000000	 bl          PreDmaActivation

; 1531 : 
; 1532 :     DmaStart(&pInstance->rxDmaInfo);

  02dd8	e59d3010	 ldr         r3, [sp, #0x10]
  02ddc	e28300a0	 add         r0, r3, #0xA0
  02de0	eb000000	 bl          DmaStart

; 1533 :     DmaStart(&pInstance->txDmaInfo);

  02de4	e59d3010	 ldr         r3, [sp, #0x10]
  02de8	e2830088	 add         r0, r3, #0x88
  02dec	eb000000	 bl          DmaStart

; 1534 : 
; 1535 : UNREFERENCED_PARAMETER(pInBuffer);
; 1536 : 
; 1537 :     return size;

  02df0	e59d3044	 ldr         r3, [sp, #0x44]
  02df4	e58d301c	 str         r3, [sp, #0x1C]
  02df8		 |$LN7@SPI_AsyncW|

; 1538 : }

  02df8	e59d001c	 ldr         r0, [sp, #0x1C]
  02dfc	e28dd038	 add         sp, sp, #0x38
  02e00	e89d6000	 ldmia       sp, {sp, lr}
  02e04	e12fff1e	 bx          lr
  02e08		 |$LN20@SPI_AsyncW|
  02e08		 |$LN21@SPI_AsyncW|
  02e08	00000000	 DCD         |??_C@_1HM@LECLJOMH@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAr?$AAt?$AA?5?$AA?$CI?$AA?$CD?$AA?5?$AAe?$AAl?$AAe?$AAm@|
  02e0c		 |$LN22@SPI_AsyncW|
  02e0c	00000000	 DCD         |dpCurSettings|
  02e10		 |$LN23@SPI_AsyncW|
  02e10	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  02e14		 |$LN24@SPI_AsyncW|
  02e14	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  02e18		 |$LN25@SPI_AsyncW|
  02e18	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  02e1c		 |$LN26@SPI_AsyncW|
  02e1c	73706949	 DCD         0x73706949
  02e20		 |$LN27@SPI_AsyncW|
  02e20	00000000	 DCD         |??_C@_1EM@CAAADFIL@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAA?$AAs?$AAy?$AAn?$AAc?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0@|
  02e24		 |$M46187|

			 ENDP  ; |SPI_AsyncWriteRead|

	EXPORT	|??_C@_1DK@PIDONAPC@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@LGMIGBMA@?$AA?9?$AA?9?$AAT?$AAx?$AA?9?$AA?$DO?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DUMP_DMA_REGS|
	EXPORT	|??_C@_1O@LLNGBBIH@?$AA?9?$AA?9?$AAR?$AAx?$AA?9?$AA?$DO?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@OHEONMJM@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAA?$AAs?$AAy?$AAn?$AAc?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|SPI_WaitForAsyncWriteReadComplete|

  00080			 AREA	 |.pdata|, PDATA
|$T46215| DCD	|$LN19@SPI_WaitFo|
	DCD	0x4000d004

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@PIDONAPC@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "(", 0x0, "r"
	DCB	0x0, "c", 0x0, " ", 0x0, "=", 0x0, " ", 0x0, "%", 0x0, "d"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@LGMIGBMA@?$AA?9?$AA?9?$AAT?$AAx?$AA?9?$AA?$DO?$AA?$AA@| DCB "-", 0x0
	DCB	"-", 0x0, "T", 0x0, "x", 0x0, "-", 0x0, ">", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@LLNGBBIH@?$AA?9?$AA?9?$AAR?$AAx?$AA?9?$AA?$DO?$AA?$AA@| DCB "-", 0x0
	DCB	"-", 0x0, "R", 0x0, "x", 0x0, "-", 0x0, ">", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@OHEONMJM@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAA?$AAs?$AAy?$AAn?$AAc?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "a"
	DCB	0x0, "i", 0x0, "t", 0x0, "F", 0x0, "o", 0x0, "r", 0x0, "A"
	DCB	0x0, "s", 0x0, "y", 0x0, "n", 0x0, "c", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "C", 0x0, "o", 0x0, "m", 0x0, "p", 0x0, "l"
	DCB	0x0, "e", 0x0, "t", 0x0, "e", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  02e24			 AREA	 |.text|, CODE, ARM

  02e24		 |SPI_WaitForAsyncWriteReadComplete| PROC

; 1553 : {

  02e24		 |$LN19@SPI_WaitFo|
  02e24	e1a0c00d	 mov         r12, sp
  02e28	e92d0007	 stmdb       sp!, {r0 - r2}
  02e2c	e92d5000	 stmdb       sp!, {r12, lr}
  02e30	e24dd03c	 sub         sp, sp, #0x3C
  02e34		 |$M46212|

; 1554 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  02e34	e59d3044	 ldr         r3, [sp, #0x44]
  02e38	e58d3008	 str         r3, [sp, #8]

; 1555 :     SPI_DEVICE *pDevice;
; 1556 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1557 :     DWORD dwDmaStatus;
; 1558 : 
; 1559 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_WaitForAsyncWriteReadComplete(0x%08x)\r\n", context));

  02e3c	e59f3300	 ldr         r3, [pc, #0x300]
  02e40	e5933440	 ldr         r3, [r3, #0x440]
  02e44	e3130004	 tst         r3, #4
  02e48	0a000005	 beq         |$LN5@SPI_WaitFo|
  02e4c	e59d1044	 ldr         r1, [sp, #0x44]
  02e50	e59f0308	 ldr         r0, [pc, #0x308]
  02e54	eb000000	 bl          NKDbgPrintfW
  02e58	e3a03001	 mov         r3, #1
  02e5c	e58d3014	 str         r3, [sp, #0x14]
  02e60	ea000001	 b           |$LN6@SPI_WaitFo|
  02e64		 |$LN5@SPI_WaitFo|
  02e64	e3a03000	 mov         r3, #0
  02e68	e58d3014	 str         r3, [sp, #0x14]
  02e6c		 |$LN6@SPI_WaitFo|

; 1560 : 
; 1561 :     pDevice = pInstance->pDevice;

  02e6c	e59d3008	 ldr         r3, [sp, #8]
  02e70	e2833004	 add         r3, r3, #4
  02e74	e5933000	 ldr         r3, [r3]
  02e78	e58d3000	 str         r3, [sp]

; 1562 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;

  02e7c	e59d3008	 ldr         r3, [sp, #8]
  02e80	e2833010	 add         r3, r3, #0x10
  02e84	e5933000	 ldr         r3, [r3]
  02e88	e58d300c	 str         r3, [sp, #0xC]

; 1563 : 
; 1564 :     //  Wait for DMA done interrupt or timeout
; 1565 :     if( WaitForSingleObject(pInstance->hRxDmaIntEvent, pDevice->timeout) != WAIT_OBJECT_0)

  02e8c	e59d3000	 ldr         r3, [sp]
  02e90	e2833028	 add         r3, r3, #0x28
  02e94	e5931000	 ldr         r1, [r3]
  02e98	e59d3008	 ldr         r3, [sp, #8]
  02e9c	e2833024	 add         r3, r3, #0x24
  02ea0	e5930000	 ldr         r0, [r3]
  02ea4	eb000000	 bl          WaitForSingleObject
  02ea8	e58d0018	 str         r0, [sp, #0x18]
  02eac	e59d3018	 ldr         r3, [sp, #0x18]
  02eb0	e3530000	 cmp         r3, #0
  02eb4	0a000019	 beq         |$LN2@SPI_WaitFo|

; 1566 :     {
; 1567 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DmaRead: DMA interrupt timeout\r\n"));

  02eb8	e59f3284	 ldr         r3, [pc, #0x284]
  02ebc	e5933440	 ldr         r3, [r3, #0x440]
  02ec0	e3130001	 tst         r3, #1
  02ec4	0a000004	 beq         |$LN7@SPI_WaitFo|
  02ec8	e59f028c	 ldr         r0, [pc, #0x28C]
  02ecc	eb000000	 bl          NKDbgPrintfW
  02ed0	e3a03001	 mov         r3, #1
  02ed4	e58d301c	 str         r3, [sp, #0x1C]
  02ed8	ea000001	 b           |$LN8@SPI_WaitFo|
  02edc		 |$LN7@SPI_WaitFo|
  02edc	e3a03000	 mov         r3, #0
  02ee0	e58d301c	 str         r3, [sp, #0x1C]
  02ee4		 |$LN8@SPI_WaitFo|

; 1568 : 
; 1569 :         DUMP_DMA_REGS(pInstance->hRxDmaChannel, L"--Rx->");

  02ee4	e59f126c	 ldr         r1, [pc, #0x26C]
  02ee8	e59d3008	 ldr         r3, [sp, #8]
  02eec	e283301c	 add         r3, r3, #0x1C
  02ef0	e5930000	 ldr         r0, [r3]
  02ef4	eb000000	 bl          DUMP_DMA_REGS

; 1570 : 
; 1571 :         //  Cleanup
; 1572 :         DmaStop(&pInstance->rxDmaInfo);

  02ef8	e59d3008	 ldr         r3, [sp, #8]
  02efc	e28300a0	 add         r0, r3, #0xA0
  02f00	eb000000	 bl          DmaStop

; 1573 :         DmaInterruptDone(pInstance->hRxDmaChannel);

  02f04	e59d3008	 ldr         r3, [sp, #8]
  02f08	e283301c	 add         r3, r3, #0x1C
  02f0c	e5930000	 ldr         r0, [r3]
  02f10	eb000000	 bl          DmaInterruptDone

; 1574 :         PostDmaDeactivation(pInstance);

  02f14	e59d0008	 ldr         r0, [sp, #8]
  02f18	eb000000	 bl          PostDmaDeactivation

; 1575 :         goto cleanUp;

  02f1c	ea000066	 b           |$cleanUp$45162|
  02f20		 |$LN2@SPI_WaitFo|

; 1576 :     }
; 1577 : 
; 1578 :     // Get and clear the status
; 1579 :     dwDmaStatus = DmaGetStatus(&pInstance->rxDmaInfo);

  02f20	e59d3008	 ldr         r3, [sp, #8]
  02f24	e28300a0	 add         r0, r3, #0xA0
  02f28	eb000000	 bl          DmaGetStatus
  02f2c	e58d0020	 str         r0, [sp, #0x20]
  02f30	e59d3020	 ldr         r3, [sp, #0x20]
  02f34	e58d3004	 str         r3, [sp, #4]

; 1580 :     DmaClearStatus(&pInstance->rxDmaInfo, dwDmaStatus);

  02f38	e59d1004	 ldr         r1, [sp, #4]
  02f3c	e59d3008	 ldr         r3, [sp, #8]
  02f40	e28300a0	 add         r0, r3, #0xA0
  02f44	eb000000	 bl          DmaClearStatus

; 1581 : 
; 1582 :     DEBUGMSG(ZONE_DMA, (L" SPI_DmaRead: DMA Status = %x\r\n", dwDmaStatus));

  02f48	e59f31f4	 ldr         r3, [pc, #0x1F4]
  02f4c	e5933440	 ldr         r3, [r3, #0x440]
  02f50	e3130020	 tst         r3, #0x20
  02f54	0a000005	 beq         |$LN9@SPI_WaitFo|
  02f58	e59d1004	 ldr         r1, [sp, #4]
  02f5c	e59f01f0	 ldr         r0, [pc, #0x1F0]
  02f60	eb000000	 bl          NKDbgPrintfW
  02f64	e3a03001	 mov         r3, #1
  02f68	e58d3024	 str         r3, [sp, #0x24]
  02f6c	ea000001	 b           |$LN10@SPI_WaitFo|
  02f70		 |$LN9@SPI_WaitFo|
  02f70	e3a03000	 mov         r3, #0
  02f74	e58d3024	 str         r3, [sp, #0x24]
  02f78		 |$LN10@SPI_WaitFo|

; 1583 : 
; 1584 :     // Stop the DMA
; 1585 :     DmaInterruptDone(pInstance->hRxDmaChannel);

  02f78	e59d3008	 ldr         r3, [sp, #8]
  02f7c	e283301c	 add         r3, r3, #0x1C
  02f80	e5930000	 ldr         r0, [r3]
  02f84	eb000000	 bl          DmaInterruptDone

; 1586 :     DmaStop(&pInstance->rxDmaInfo);

  02f88	e59d3008	 ldr         r3, [sp, #8]
  02f8c	e28300a0	 add         r0, r3, #0xA0
  02f90	eb000000	 bl          DmaStop

; 1587 : 
; 1588 :     //  Wait for DMA done interrupt or timeout
; 1589 :     if( WaitForSingleObject(pInstance->hTxDmaIntEvent, pDevice->timeout) != WAIT_OBJECT_0)

  02f94	e59d3000	 ldr         r3, [sp]
  02f98	e2833028	 add         r3, r3, #0x28
  02f9c	e5931000	 ldr         r1, [r3]
  02fa0	e59d3008	 ldr         r3, [sp, #8]
  02fa4	e2833020	 add         r3, r3, #0x20
  02fa8	e5930000	 ldr         r0, [r3]
  02fac	eb000000	 bl          WaitForSingleObject
  02fb0	e58d0028	 str         r0, [sp, #0x28]
  02fb4	e59d3028	 ldr         r3, [sp, #0x28]
  02fb8	e3530000	 cmp         r3, #0
  02fbc	0a000019	 beq         |$LN1@SPI_WaitFo|

; 1590 :     {
; 1591 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DmaWrite: DMA interrupt timeout, ABC\r\n"));

  02fc0	e59f317c	 ldr         r3, [pc, #0x17C]
  02fc4	e5933440	 ldr         r3, [r3, #0x440]
  02fc8	e3130001	 tst         r3, #1
  02fcc	0a000004	 beq         |$LN11@SPI_WaitFo|
  02fd0	e59f0178	 ldr         r0, [pc, #0x178]
  02fd4	eb000000	 bl          NKDbgPrintfW
  02fd8	e3a03001	 mov         r3, #1
  02fdc	e58d302c	 str         r3, [sp, #0x2C]
  02fe0	ea000001	 b           |$LN12@SPI_WaitFo|
  02fe4		 |$LN11@SPI_WaitFo|
  02fe4	e3a03000	 mov         r3, #0
  02fe8	e58d302c	 str         r3, [sp, #0x2C]
  02fec		 |$LN12@SPI_WaitFo|

; 1592 : 
; 1593 :         DUMP_DMA_REGS(pInstance->hTxDmaChannel, L"--Tx->");

  02fec	e59f1158	 ldr         r1, [pc, #0x158]
  02ff0	e59d3008	 ldr         r3, [sp, #8]
  02ff4	e2833018	 add         r3, r3, #0x18
  02ff8	e5930000	 ldr         r0, [r3]
  02ffc	eb000000	 bl          DUMP_DMA_REGS

; 1594 : 
; 1595 :         DmaStop(&pInstance->txDmaInfo);

  03000	e59d3008	 ldr         r3, [sp, #8]
  03004	e2830088	 add         r0, r3, #0x88
  03008	eb000000	 bl          DmaStop

; 1596 :         DmaInterruptDone(pInstance->hTxDmaChannel);

  0300c	e59d3008	 ldr         r3, [sp, #8]
  03010	e2833018	 add         r3, r3, #0x18
  03014	e5930000	 ldr         r0, [r3]
  03018	eb000000	 bl          DmaInterruptDone

; 1597 :         PostDmaDeactivation(pInstance);

  0301c	e59d0008	 ldr         r0, [sp, #8]
  03020	eb000000	 bl          PostDmaDeactivation

; 1598 :         goto cleanUp;

  03024	ea000024	 b           |$cleanUp$45162|
  03028		 |$LN1@SPI_WaitFo|

; 1599 :     }
; 1600 : 
; 1601 :     // Get and clear the status
; 1602 :     dwDmaStatus = DmaGetStatus(&pInstance->txDmaInfo);

  03028	e59d3008	 ldr         r3, [sp, #8]
  0302c	e2830088	 add         r0, r3, #0x88
  03030	eb000000	 bl          DmaGetStatus
  03034	e58d0030	 str         r0, [sp, #0x30]
  03038	e59d3030	 ldr         r3, [sp, #0x30]
  0303c	e58d3004	 str         r3, [sp, #4]

; 1603 :     DmaClearStatus(&pInstance->txDmaInfo, dwDmaStatus);

  03040	e59d1004	 ldr         r1, [sp, #4]
  03044	e59d3008	 ldr         r3, [sp, #8]
  03048	e2830088	 add         r0, r3, #0x88
  0304c	eb000000	 bl          DmaClearStatus

; 1604 : 
; 1605 :     DEBUGMSG(ZONE_DMA, (L" SPI_DmaWrite: DMA Status = %x\r\n", dwDmaStatus));

  03050	e59f30ec	 ldr         r3, [pc, #0xEC]
  03054	e5933440	 ldr         r3, [r3, #0x440]
  03058	e3130020	 tst         r3, #0x20
  0305c	0a000005	 beq         |$LN13@SPI_WaitFo|
  03060	e59d1004	 ldr         r1, [sp, #4]
  03064	e59f00dc	 ldr         r0, [pc, #0xDC]
  03068	eb000000	 bl          NKDbgPrintfW
  0306c	e3a03001	 mov         r3, #1
  03070	e58d3034	 str         r3, [sp, #0x34]
  03074	ea000001	 b           |$LN14@SPI_WaitFo|
  03078		 |$LN13@SPI_WaitFo|
  03078	e3a03000	 mov         r3, #0
  0307c	e58d3034	 str         r3, [sp, #0x34]
  03080		 |$LN14@SPI_WaitFo|

; 1606 : 
; 1607 :     // Stop the DMA
; 1608 :     DmaInterruptDone(pInstance->hTxDmaChannel);

  03080	e59d3008	 ldr         r3, [sp, #8]
  03084	e2833018	 add         r3, r3, #0x18
  03088	e5930000	 ldr         r0, [r3]
  0308c	eb000000	 bl          DmaInterruptDone

; 1609 :     DmaStop(&pInstance->txDmaInfo);

  03090	e59d3008	 ldr         r3, [sp, #8]
  03094	e2830088	 add         r0, r3, #0x88
  03098	eb000000	 bl          DmaStop

; 1610 : 
; 1611 :     // Copy the data from the DMA buffer
; 1612 :     memcpy(pInBuffer, pInstance->pRxDmaBuffer, size);

  0309c	e59d2048	 ldr         r2, [sp, #0x48]
  030a0	e59d3008	 ldr         r3, [sp, #8]
  030a4	e28330c0	 add         r3, r3, #0xC0
  030a8	e5931000	 ldr         r1, [r3]
  030ac	e59d004c	 ldr         r0, [sp, #0x4C]
  030b0	eb000000	 bl          memcpy

; 1613 : 	
; 1614 :     PostDmaDeactivation(pInstance);

  030b4	e59d0008	 ldr         r0, [sp, #8]
  030b8	eb000000	 bl          PostDmaDeactivation
  030bc		 |$cleanUp$45162|

; 1615 : 
; 1616 : cleanUp:
; 1617 :     // Disable the channel.
; 1618 :     CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  030bc	e59d300c	 ldr         r3, [sp, #0xC]
  030c0	e2833008	 add         r3, r3, #8
  030c4	e5932000	 ldr         r2, [r3]
  030c8	e3e03001	 mvn         r3, #1
  030cc	e0022003	 and         r2, r2, r3
  030d0	e59d300c	 ldr         r3, [sp, #0xC]
  030d4	e2833008	 add         r3, r3, #8
  030d8	e5832000	 str         r2, [r3]

; 1619 : 
; 1620 :     // Set this driver to Suspend Mode
; 1621 :     SetSPIPower(pDevice, D4);

  030dc	e3a01004	 mov         r1, #4
  030e0	e59d0000	 ldr         r0, [sp]
  030e4	eb000000	 bl          SetSPIPower

; 1622 : 
; 1623 :     // Release hardware
; 1624 : 	ReleaseMutex(pDevice->hControllerMutex);

  030e8	e59d3000	 ldr         r3, [sp]
  030ec	e283301c	 add         r3, r3, #0x1C
  030f0	e5930000	 ldr         r0, [r3]
  030f4	eb000000	 bl          ReleaseMutex

; 1625 : 	
; 1626 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_DmaWriteRead(rc = %d)\r\n", size));

  030f8	e59f3044	 ldr         r3, [pc, #0x44]
  030fc	e5933440	 ldr         r3, [r3, #0x440]
  03100	e3130004	 tst         r3, #4
  03104	0a000005	 beq         |$LN15@SPI_WaitFo|
  03108	e59d1048	 ldr         r1, [sp, #0x48]
  0310c	e59f002c	 ldr         r0, [pc, #0x2C]
  03110	eb000000	 bl          NKDbgPrintfW
  03114	e3a03001	 mov         r3, #1
  03118	e58d3038	 str         r3, [sp, #0x38]
  0311c	ea000001	 b           |$LN16@SPI_WaitFo|
  03120		 |$LN15@SPI_WaitFo|
  03120	e3a03000	 mov         r3, #0
  03124	e58d3038	 str         r3, [sp, #0x38]
  03128		 |$LN16@SPI_WaitFo|

; 1627 : 
; 1628 :     return size;

  03128	e59d3048	 ldr         r3, [sp, #0x48]
  0312c	e58d3010	 str         r3, [sp, #0x10]

; 1629 : 	
; 1630 : }

  03130	e59d0010	 ldr         r0, [sp, #0x10]
  03134	e28dd03c	 add         sp, sp, #0x3C
  03138	e89d6000	 ldmia       sp, {sp, lr}
  0313c	e12fff1e	 bx          lr
  03140		 |$LN20@SPI_WaitFo|
  03140		 |$LN21@SPI_WaitFo|
  03140	00000000	 DCD         |??_C@_1DK@PIDONAPC@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  03144		 |$LN22@SPI_WaitFo|
  03144	00000000	 DCD         |dpCurSettings|
  03148		 |$LN23@SPI_WaitFo|
  03148	00000000	 DCD         |??_C@_1EC@MBICDMMI@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6@|
  0314c		 |$LN24@SPI_WaitFo|
  0314c	00000000	 DCD         |??_C@_1O@LGMIGBMA@?$AA?9?$AA?9?$AAT?$AAx?$AA?9?$AA?$DO?$AA?$AA@|
  03150		 |$LN25@SPI_WaitFo|
  03150	00000000	 DCD         |??_C@_1GE@EJKJFLJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu@|
  03154		 |$LN26@SPI_WaitFo|
  03154	00000000	 DCD         |??_C@_1EA@NFKHEFID@?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAS?$AAt?$AAa?$AAt?$AAu?$AAs?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  03158		 |$LN27@SPI_WaitFo|
  03158	00000000	 DCD         |??_C@_1O@LLNGBBIH@?$AA?9?$AA?9?$AAR?$AAx?$AA?9?$AA?$DO?$AA?$AA@|
  0315c		 |$LN28@SPI_WaitFo|
  0315c	00000000	 DCD         |??_C@_1FI@CAOCAGJP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAR?$AAe?$AAa?$AAd?$AA?3?$AA?5?$AAD?$AAM?$AAA?$AA?5?$AAi?$AAn?$AAt?$AAe?$AAr?$AAr?$AAu?$AAp@|
  03160		 |$LN29@SPI_WaitFo|
  03160	00000000	 DCD         |??_C@_1FK@OHEONMJM@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAa?$AAi?$AAt?$AAF?$AAo?$AAr?$AAA?$AAs?$AAy?$AAn?$AAc?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AAC?$AAo?$AAm?$AAp?$AAl?$AAe@|
  03164		 |$M46213|

			 ENDP  ; |SPI_WaitForAsyncWriteReadComplete|

	EXPORT	|??_C@_1CI@FIDDJIDB@?$AAC?$AAO?$AAL?$AAO?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HLBLNFBF@?$AAC?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@BPPLKOOL@?$AAC?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HIBLJBEP@?$AAC?$AAD?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@NLPBJPAO@?$AAC?$AAS?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@JCMMJPLL@?$AAC?$AAD?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@PGCMOEEF@?$AAC?$AAD?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DBCGJBPK@?$AAC?$AAS?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@FFMGOKAE@?$AAC?$AAS?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@CBMOPOBE@?$AAC?$AAD?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@ICCEPAFF@?$AAC?$AAS?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@CEFJFIBN@?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@GJLBFIHK@?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DOOBPJPF@?$AAC?$AAS?$AAD?$AAP?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OOGCCADM@?$AAC?$AAS?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OJOGIMIO@?$AAC?$AAI?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HJOAFDIL@?$AAC?$AAL?$AAN?$AAK?$AA_?$AAC?$AAT?$AAR?$AAL?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@FLNANDFB@?$AAC?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|DmaGetLogicalChannel|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46230| DCD	|$LN6@DUMP_DMA_R|
	DCD	0x40007d04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FIDDJIDB@?$AAC?$AAO?$AAL?$AAO?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "L", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HLBLNFBF@?$AAC?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "C", 0x0, "F", 0x0, "N", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@BPPLKOOL@?$AAC?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "C", 0x0, "E", 0x0, "N", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HIBLJBEP@?$AAC?$AAD?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "D", 0x0, "A", 0x0, "C", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@NLPBJPAO@?$AAC?$AAS?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "A", 0x0, "C", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@JCMMJPLL@?$AAC?$AAD?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "D", 0x0, "F", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PGCMOEEF@?$AAC?$AAD?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "D", 0x0, "E", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DBCGJBPK@?$AAC?$AAS?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "F", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FFMGOKAE@?$AAC?$AAS?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "E", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CBMOPOBE@?$AAC?$AAD?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "D", 0x0, "S", 0x0, "A", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@ICCEPAFF@?$AAC?$AAS?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "S", 0x0, "A", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CEFJFIBN@?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "F", 0x0, "N", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@GJLBFIHK@?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "E", 0x0, "N", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DOOBPJPF@?$AAC?$AAS?$AAD?$AAP?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "D", 0x0, "P", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OOGCCADM@?$AAC?$AAS?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "R", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OJOGIMIO@?$AAC?$AAI?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "I", 0x0, "C", 0x0, "R", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HJOAFDIL@?$AAC?$AAL?$AAN?$AAK?$AA_?$AAC?$AAT?$AAR?$AAL?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "L", 0x0, "N", 0x0, "K", 0x0, "_", 0x0, "C", 0x0, "T"
	DCB	0x0, "R", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FLNANDFB@?$AAC?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "C", 0x0, "R", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DUMP_DMA_REGS| PROC

; 678  : {

  00000		 |$LN6@DUMP_DMA_R|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd008	 sub         sp, sp, #8
  00010		 |$M46227|

; 679  :     OMAP_DMA_LC_REGS *pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(hDmaChannel);

  00010	e59d0010	 ldr         r0, [sp, #0x10]
  00014	eb000000	 bl          DmaGetLogicalChannel
  00018	e58d0004	 str         r0, [sp, #4]
  0001c	e59d3004	 ldr         r3, [sp, #4]
  00020	e58d3000	 str         r3, [sp]

; 680  :     if (pDmaLcReg == NULL)

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3530000	 cmp         r3, #0
  0002c	1a000000	 bne         |$LN1@DUMP_DMA_R|

; 681  :         {
; 682  :         return;

  00030	ea00005a	 b           |$LN2@DUMP_DMA_R|
  00034		 |$LN1@DUMP_DMA_R|

; 683  :         }
; 684  : 
; 685  :     RETAILMSG(1,(szMsg));

  00034	e59d0014	 ldr         r0, [sp, #0x14]
  00038	eb000000	 bl          NKDbgPrintfW

; 686  : 
; 687  :     RETAILMSG(1,(TEXT("CCR      : 0x%08X\r\n"), INREG32(&pDmaLcReg->CCR   )));

  0003c	e59d3000	 ldr         r3, [sp]
  00040	e5931000	 ldr         r1, [r3]
  00044	e59f01a4	 ldr         r0, [pc, #0x1A4]
  00048	eb000000	 bl          NKDbgPrintfW

; 688  :     RETAILMSG(1,(TEXT("CLNK_CTRL: 0x%08X\r\n"), INREG32(&pDmaLcReg->CLNK_CTRL)));

  0004c	e59d3000	 ldr         r3, [sp]
  00050	e2833004	 add         r3, r3, #4
  00054	e5931000	 ldr         r1, [r3]
  00058	e59f018c	 ldr         r0, [pc, #0x18C]
  0005c	eb000000	 bl          NKDbgPrintfW

; 689  :     RETAILMSG(1,(TEXT("CICR     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CICR  )));

  00060	e59d3000	 ldr         r3, [sp]
  00064	e2833008	 add         r3, r3, #8
  00068	e5931000	 ldr         r1, [r3]
  0006c	e59f0174	 ldr         r0, [pc, #0x174]
  00070	eb000000	 bl          NKDbgPrintfW

; 690  :     RETAILMSG(1,(TEXT("CSR      : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSR   )));

  00074	e59d3000	 ldr         r3, [sp]
  00078	e283300c	 add         r3, r3, #0xC
  0007c	e5931000	 ldr         r1, [r3]
  00080	e59f015c	 ldr         r0, [pc, #0x15C]
  00084	eb000000	 bl          NKDbgPrintfW

; 691  :     RETAILMSG(1,(TEXT("CSDP     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSDP  )));

  00088	e59d3000	 ldr         r3, [sp]
  0008c	e2833010	 add         r3, r3, #0x10
  00090	e5931000	 ldr         r1, [r3]
  00094	e59f0144	 ldr         r0, [pc, #0x144]
  00098	eb000000	 bl          NKDbgPrintfW

; 692  :     RETAILMSG(1,(TEXT("CEN      : 0x%08X\r\n"), INREG32(&pDmaLcReg->CEN   )));

  0009c	e59d3000	 ldr         r3, [sp]
  000a0	e2833014	 add         r3, r3, #0x14
  000a4	e5931000	 ldr         r1, [r3]
  000a8	e59f012c	 ldr         r0, [pc, #0x12C]
  000ac	eb000000	 bl          NKDbgPrintfW

; 693  :     RETAILMSG(1,(TEXT("CFN      : 0x%08X\r\n"), INREG32(&pDmaLcReg->CFN   )));

  000b0	e59d3000	 ldr         r3, [sp]
  000b4	e2833018	 add         r3, r3, #0x18
  000b8	e5931000	 ldr         r1, [r3]
  000bc	e59f0114	 ldr         r0, [pc, #0x114]
  000c0	eb000000	 bl          NKDbgPrintfW

; 694  :     RETAILMSG(1,(TEXT("CSSA     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSSA  )));

  000c4	e59d3000	 ldr         r3, [sp]
  000c8	e283301c	 add         r3, r3, #0x1C
  000cc	e5931000	 ldr         r1, [r3]
  000d0	e59f00fc	 ldr         r0, [pc, #0xFC]
  000d4	eb000000	 bl          NKDbgPrintfW

; 695  :     RETAILMSG(1,(TEXT("CDSA     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CDSA  )));

  000d8	e59d3000	 ldr         r3, [sp]
  000dc	e2833020	 add         r3, r3, #0x20
  000e0	e5931000	 ldr         r1, [r3]
  000e4	e59f00e4	 ldr         r0, [pc, #0xE4]
  000e8	eb000000	 bl          NKDbgPrintfW

; 696  :     RETAILMSG(1,(TEXT("CSEI     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSEI  )));

  000ec	e59d3000	 ldr         r3, [sp]
  000f0	e2833024	 add         r3, r3, #0x24
  000f4	e5931000	 ldr         r1, [r3]
  000f8	e59f00cc	 ldr         r0, [pc, #0xCC]
  000fc	eb000000	 bl          NKDbgPrintfW

; 697  :     RETAILMSG(1,(TEXT("CSFI     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSFI  )));

  00100	e59d3000	 ldr         r3, [sp]
  00104	e2833028	 add         r3, r3, #0x28
  00108	e5931000	 ldr         r1, [r3]
  0010c	e59f00b4	 ldr         r0, [pc, #0xB4]
  00110	eb000000	 bl          NKDbgPrintfW

; 698  :     RETAILMSG(1,(TEXT("CDEI     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CDEI  )));

  00114	e59d3000	 ldr         r3, [sp]
  00118	e283302c	 add         r3, r3, #0x2C
  0011c	e5931000	 ldr         r1, [r3]
  00120	e59f009c	 ldr         r0, [pc, #0x9C]
  00124	eb000000	 bl          NKDbgPrintfW

; 699  :     RETAILMSG(1,(TEXT("CDFI     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CDFI  )));

  00128	e59d3000	 ldr         r3, [sp]
  0012c	e2833030	 add         r3, r3, #0x30
  00130	e5931000	 ldr         r1, [r3]
  00134	e59f0084	 ldr         r0, [pc, #0x84]
  00138	eb000000	 bl          NKDbgPrintfW

; 700  :     RETAILMSG(1,(TEXT("CSAC     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSAC  )));

  0013c	e59d3000	 ldr         r3, [sp]
  00140	e2833034	 add         r3, r3, #0x34
  00144	e5931000	 ldr         r1, [r3]
  00148	e59f006c	 ldr         r0, [pc, #0x6C]
  0014c	eb000000	 bl          NKDbgPrintfW

; 701  :     RETAILMSG(1,(TEXT("CDAC     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CDAC  )));

  00150	e59d3000	 ldr         r3, [sp]
  00154	e2833038	 add         r3, r3, #0x38
  00158	e5931000	 ldr         r1, [r3]
  0015c	e59f0054	 ldr         r0, [pc, #0x54]
  00160	eb000000	 bl          NKDbgPrintfW

; 702  :     RETAILMSG(1,(TEXT("CCEN     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CCEN  )));

  00164	e59d3000	 ldr         r3, [sp]
  00168	e283303c	 add         r3, r3, #0x3C
  0016c	e5931000	 ldr         r1, [r3]
  00170	e59f003c	 ldr         r0, [pc, #0x3C]
  00174	eb000000	 bl          NKDbgPrintfW

; 703  :     RETAILMSG(1,(TEXT("CCFN     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CCFN  )));

  00178	e59d3000	 ldr         r3, [sp]
  0017c	e2833040	 add         r3, r3, #0x40
  00180	e5931000	 ldr         r1, [r3]
  00184	e59f0024	 ldr         r0, [pc, #0x24]
  00188	eb000000	 bl          NKDbgPrintfW

; 704  :     RETAILMSG(1,(TEXT("COLOR    : 0x%08X\r\n"), INREG32(&pDmaLcReg->COLOR )));

  0018c	e59d3000	 ldr         r3, [sp]
  00190	e2833044	 add         r3, r3, #0x44
  00194	e5931000	 ldr         r1, [r3]
  00198	e59f000c	 ldr         r0, [pc, #0xC]
  0019c	eb000000	 bl          NKDbgPrintfW
  001a0		 |$LN2@DUMP_DMA_R|

; 705  : }

  001a0	e28dd008	 add         sp, sp, #8
  001a4	e89d6000	 ldmia       sp, {sp, lr}
  001a8	e12fff1e	 bx          lr
  001ac		 |$LN7@DUMP_DMA_R|
  001ac		 |$LN8@DUMP_DMA_R|
  001ac	00000000	 DCD         |??_C@_1CI@FIDDJIDB@?$AAC?$AAO?$AAL?$AAO?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001b0		 |$LN9@DUMP_DMA_R|
  001b0	00000000	 DCD         |??_C@_1CI@HLBLNFBF@?$AAC?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001b4		 |$LN10@DUMP_DMA_R|
  001b4	00000000	 DCD         |??_C@_1CI@BPPLKOOL@?$AAC?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001b8		 |$LN11@DUMP_DMA_R|
  001b8	00000000	 DCD         |??_C@_1CI@HIBLJBEP@?$AAC?$AAD?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001bc		 |$LN12@DUMP_DMA_R|
  001bc	00000000	 DCD         |??_C@_1CI@NLPBJPAO@?$AAC?$AAS?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001c0		 |$LN13@DUMP_DMA_R|
  001c0	00000000	 DCD         |??_C@_1CI@JCMMJPLL@?$AAC?$AAD?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001c4		 |$LN14@DUMP_DMA_R|
  001c4	00000000	 DCD         |??_C@_1CI@PGCMOEEF@?$AAC?$AAD?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001c8		 |$LN15@DUMP_DMA_R|
  001c8	00000000	 DCD         |??_C@_1CI@DBCGJBPK@?$AAC?$AAS?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001cc		 |$LN16@DUMP_DMA_R|
  001cc	00000000	 DCD         |??_C@_1CI@FFMGOKAE@?$AAC?$AAS?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001d0		 |$LN17@DUMP_DMA_R|
  001d0	00000000	 DCD         |??_C@_1CI@CBMOPOBE@?$AAC?$AAD?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001d4		 |$LN18@DUMP_DMA_R|
  001d4	00000000	 DCD         |??_C@_1CI@ICCEPAFF@?$AAC?$AAS?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001d8		 |$LN19@DUMP_DMA_R|
  001d8	00000000	 DCD         |??_C@_1CI@CEFJFIBN@?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001dc		 |$LN20@DUMP_DMA_R|
  001dc	00000000	 DCD         |??_C@_1CI@GJLBFIHK@?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001e0		 |$LN21@DUMP_DMA_R|
  001e0	00000000	 DCD         |??_C@_1CI@DOOBPJPF@?$AAC?$AAS?$AAD?$AAP?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001e4		 |$LN22@DUMP_DMA_R|
  001e4	00000000	 DCD         |??_C@_1CI@OOGCCADM@?$AAC?$AAS?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001e8		 |$LN23@DUMP_DMA_R|
  001e8	00000000	 DCD         |??_C@_1CI@OJOGIMIO@?$AAC?$AAI?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001ec		 |$LN24@DUMP_DMA_R|
  001ec	00000000	 DCD         |??_C@_1CI@HJOAFDIL@?$AAC?$AAL?$AAN?$AAK?$AA_?$AAC?$AAT?$AAR?$AAL?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001f0		 |$LN25@DUMP_DMA_R|
  001f0	00000000	 DCD         |??_C@_1CI@FLNANDFB@?$AAC?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  001f4		 |$M46228|

			 ENDP  ; |DUMP_DMA_REGS|

	EXPORT	|??_C@_1EI@IDBGFOAG@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| [ DATA ] ; `string'
	EXPORT	|SPI_DmaWriteRead|

  00088			 AREA	 |.pdata|, PDATA
|$T46259| DCD	|$LN8@SPI_DmaWri@2|
	DCD	0x40002d04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@IDBGFOAG@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "m"
	DCB	0x0, "a", 0x0, "W", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ","
	DCB	0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03164			 AREA	 |.text|, CODE, ARM

  03164		 |SPI_DmaWriteRead| PROC

; 1648 : {

  03164		 |$LN8@SPI_DmaWri@2|
  03164	e1a0c00d	 mov         r12, sp
  03168	e92d000f	 stmdb       sp!, {r0 - r3}
  0316c	e92d5000	 stmdb       sp!, {r12, lr}
  03170	e24dd014	 sub         sp, sp, #0x14
  03174		 |$M46256|

; 1649 :     DWORD   dwCount = 0;

  03174	e3a03000	 mov         r3, #0
  03178	e58d3000	 str         r3, [sp]

; 1650 : 
; 1651 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_DmaWriteRead(0x%08x, 0x%08x)\r\n", context, size));

  0317c	e59f3090	 ldr         r3, [pc, #0x90]
  03180	e5933440	 ldr         r3, [r3, #0x440]
  03184	e3130004	 tst         r3, #4
  03188	0a000006	 beq         |$LN4@SPI_DmaWri@2|
  0318c	e59d2020	 ldr         r2, [sp, #0x20]
  03190	e59d101c	 ldr         r1, [sp, #0x1C]
  03194	e59f0074	 ldr         r0, [pc, #0x74]
  03198	eb000000	 bl          NKDbgPrintfW
  0319c	e3a03001	 mov         r3, #1
  031a0	e58d3008	 str         r3, [sp, #8]
  031a4	ea000001	 b           |$LN5@SPI_DmaWri@2|
  031a8		 |$LN4@SPI_DmaWri@2|
  031a8	e3a03000	 mov         r3, #0
  031ac	e58d3008	 str         r3, [sp, #8]
  031b0		 |$LN5@SPI_DmaWri@2|

; 1652 : 
; 1653 :     dwCount = SPI_AsyncWriteRead(context, size, pOutBuffer, pInBuffer);

  031b0	e59d3028	 ldr         r3, [sp, #0x28]
  031b4	e59d2024	 ldr         r2, [sp, #0x24]
  031b8	e59d1020	 ldr         r1, [sp, #0x20]
  031bc	e59d001c	 ldr         r0, [sp, #0x1C]
  031c0	eb000000	 bl          SPI_AsyncWriteRead
  031c4	e58d000c	 str         r0, [sp, #0xC]
  031c8	e59d300c	 ldr         r3, [sp, #0xC]
  031cc	e58d3000	 str         r3, [sp]

; 1654 :     if (dwCount != 0)

  031d0	e59d3000	 ldr         r3, [sp]
  031d4	e3530000	 cmp         r3, #0
  031d8	0a000006	 beq         |$LN1@SPI_DmaWri@2|

; 1655 :     {
; 1656 :         dwCount = SPI_WaitForAsyncWriteReadComplete(context, size, pInBuffer);

  031dc	e59d2028	 ldr         r2, [sp, #0x28]
  031e0	e59d1020	 ldr         r1, [sp, #0x20]
  031e4	e59d001c	 ldr         r0, [sp, #0x1C]
  031e8	eb000000	 bl          SPI_WaitForAsyncWriteReadComplete
  031ec	e58d0010	 str         r0, [sp, #0x10]
  031f0	e59d3010	 ldr         r3, [sp, #0x10]
  031f4	e58d3000	 str         r3, [sp]
  031f8		 |$LN1@SPI_DmaWri@2|

; 1657 :     }
; 1658 : 
; 1659 :     return dwCount;	

  031f8	e59d3000	 ldr         r3, [sp]
  031fc	e58d3004	 str         r3, [sp, #4]

; 1660 : }

  03200	e59d0004	 ldr         r0, [sp, #4]
  03204	e28dd014	 add         sp, sp, #0x14
  03208	e89d6000	 ldmia       sp, {sp, lr}
  0320c	e12fff1e	 bx          lr
  03210		 |$LN9@SPI_DmaWri@2|
  03210		 |$LN10@SPI_DmaWri@2|
  03210	00000000	 DCD         |??_C@_1EI@IDBGFOAG@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAm?$AAa?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx@|
  03214		 |$LN11@SPI_DmaWri@2|
  03214	00000000	 DCD         |dpCurSettings|
  03218		 |$M46257|

			 ENDP  ; |SPI_DmaWriteRead|

	EXPORT	|??_C@_1DE@HOMLCLPG@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DK@BIMPJCEL@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@CKFJLFJG@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EC@BJEKFMAM@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| [ DATA ] ; `string'
	EXPORT	|SPI_WriteRead|

  00090			 AREA	 |.pdata|, PDATA
|$T46278| DCD	|$LN38@SPI_WriteR|
	DCD	0x40014b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@HOMLCLPG@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DK@BIMPJCEL@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u"
	DCB	0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@CKFJLFJG@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "r", 0x0, "i"
	DCB	0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a", 0x0, "d"
	DCB	0x0, " ", 0x0, "w", 0x0, "r", 0x0, "i", 0x0, "t", 0x0, "e"
	DCB	0x0, " ", 0x0, "t", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EC@BJEKFMAM@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "W", 0x0, "r"
	DCB	0x0, "i", 0x0, "t", 0x0, "e", 0x0, "R", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  03218			 AREA	 |.text|, CODE, ARM

  03218		 |SPI_WriteRead| PROC

; 1678 : {

  03218		 |$LN38@SPI_WriteR|
  03218	e1a0c00d	 mov         r12, sp
  0321c	e92d000f	 stmdb       sp!, {r0 - r3}
  03220	e92d5000	 stmdb       sp!, {r12, lr}
  03224	e24dd044	 sub         sp, sp, #0x44
  03228		 |$M46275|

; 1679 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  03228	e59d304c	 ldr         r3, [sp, #0x4C]
  0322c	e58d3010	 str         r3, [sp, #0x10]

; 1680 :     SPI_DEVICE *pDevice;
; 1681 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1682 :     UCHAR* pInData = (UCHAR*)pInBuffer;

  03230	e59d3058	 ldr         r3, [sp, #0x58]
  03234	e58d3014	 str         r3, [sp, #0x14]

; 1683 :     UCHAR* pOutData = (UCHAR*)pOutBuffer;

  03238	e59d3054	 ldr         r3, [sp, #0x54]
  0323c	e58d300c	 str         r3, [sp, #0xC]

; 1684 :     DWORD dwWordLen;
; 1685 :     DWORD dwCount = 0;

  03240	e3a03000	 mov         r3, #0
  03244	e58d3008	 str         r3, [sp, #8]

; 1686 :     DWORD dwWait;
; 1687 : 
; 1688 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_WriteRead(0x%08x, 0x%08x)\r\n", context, size));

  03248	e59f34dc	 ldr         r3, [pc, #0x4DC]
  0324c	e5933440	 ldr         r3, [r3, #0x440]
  03250	e3130004	 tst         r3, #4
  03254	0a000006	 beq         |$LN26@SPI_WriteR|
  03258	e59d2050	 ldr         r2, [sp, #0x50]
  0325c	e59d104c	 ldr         r1, [sp, #0x4C]
  03260	e59f04d8	 ldr         r0, [pc, #0x4D8]
  03264	eb000000	 bl          NKDbgPrintfW
  03268	e3a03001	 mov         r3, #1
  0326c	e58d3024	 str         r3, [sp, #0x24]
  03270	ea000001	 b           |$LN27@SPI_WriteR|
  03274		 |$LN26@SPI_WriteR|
  03274	e3a03000	 mov         r3, #0
  03278	e58d3024	 str         r3, [sp, #0x24]
  0327c		 |$LN27@SPI_WriteR|

; 1689 : 
; 1690 :     // Check if we get correct context
; 1691 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  0327c	e59d3010	 ldr         r3, [sp, #0x10]
  03280	e3530000	 cmp         r3, #0
  03284	0a000004	 beq         |$LN22@SPI_WriteR|
  03288	e59d3010	 ldr         r3, [sp, #0x10]
  0328c	e5932000	 ldr         r2, [r3]
  03290	e59f34a4	 ldr         r3, [pc, #0x4A4]
  03294	e1520003	 cmp         r2, r3
  03298	0a00000d	 beq         |$LN23@SPI_WriteR|
  0329c		 |$LN22@SPI_WriteR|

; 1692 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Write: "
; 1693 :             L"Incorrect context paramer\r\n"
; 1694 :         ));

  0329c	e59f3488	 ldr         r3, [pc, #0x488]
  032a0	e5933440	 ldr         r3, [r3, #0x440]
  032a4	e3130001	 tst         r3, #1
  032a8	0a000004	 beq         |$LN28@SPI_WriteR|
  032ac	e59f0484	 ldr         r0, [pc, #0x484]
  032b0	eb000000	 bl          NKDbgPrintfW
  032b4	e3a03001	 mov         r3, #1
  032b8	e58d3028	 str         r3, [sp, #0x28]
  032bc	ea000001	 b           |$LN29@SPI_WriteR|
  032c0		 |$LN28@SPI_WriteR|
  032c0	e3a03000	 mov         r3, #0
  032c4	e58d3028	 str         r3, [sp, #0x28]
  032c8		 |$LN29@SPI_WriteR|

; 1695 :         return 0;

  032c8	e3a03000	 mov         r3, #0
  032cc	e58d3020	 str         r3, [sp, #0x20]
  032d0	ea000110	 b           |$LN24@SPI_WriteR|
  032d4		 |$LN23@SPI_WriteR|

; 1696 :     }
; 1697 : 
; 1698 :     //  Call DMA function if DMA enabled
; 1699 :     if( SpiDmaTxEnabled(pInstance) && SpiDmaRxEnabled(pInstance))

  032d4	e59d0010	 ldr         r0, [sp, #0x10]
  032d8	eb000000	 bl          SpiDmaTxEnabled
  032dc	e58d002c	 str         r0, [sp, #0x2C]
  032e0	e59d302c	 ldr         r3, [sp, #0x2C]
  032e4	e3530000	 cmp         r3, #0
  032e8	0a00000e	 beq         |$LN21@SPI_WriteR|
  032ec	e59d0010	 ldr         r0, [sp, #0x10]
  032f0	eb000000	 bl          SpiDmaRxEnabled
  032f4	e58d0030	 str         r0, [sp, #0x30]
  032f8	e59d3030	 ldr         r3, [sp, #0x30]
  032fc	e3530000	 cmp         r3, #0
  03300	0a000008	 beq         |$LN21@SPI_WriteR|

; 1700 :     {
; 1701 :         return SPI_DmaWriteRead(context, size, pOutBuffer, pInBuffer);

  03304	e59d3058	 ldr         r3, [sp, #0x58]
  03308	e59d2054	 ldr         r2, [sp, #0x54]
  0330c	e59d1050	 ldr         r1, [sp, #0x50]
  03310	e59d004c	 ldr         r0, [sp, #0x4C]
  03314	eb000000	 bl          SPI_DmaWriteRead
  03318	e58d0034	 str         r0, [sp, #0x34]
  0331c	e59d3034	 ldr         r3, [sp, #0x34]
  03320	e58d3020	 str         r3, [sp, #0x20]
  03324	ea0000fb	 b           |$LN24@SPI_WriteR|
  03328		 |$LN21@SPI_WriteR|

; 1702 :     }
; 1703 : 
; 1704 :     // Get pointers to registers
; 1705 :     pDevice = pInstance->pDevice;

  03328	e59d3010	 ldr         r3, [sp, #0x10]
  0332c	e2833004	 add         r3, r3, #4
  03330	e5933000	 ldr         r3, [r3]
  03334	e58d3004	 str         r3, [sp, #4]

; 1706 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;

  03338	e59d3010	 ldr         r3, [sp, #0x10]
  0333c	e2833010	 add         r3, r3, #0x10
  03340	e5933000	 ldr         r3, [r3]
  03344	e58d3018	 str         r3, [sp, #0x18]

; 1707 : 
; 1708 : 
; 1709 :     // Get the word length of the data
; 1710 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  03348	e59d3010	 ldr         r3, [sp, #0x10]
  0334c	e283300c	 add         r3, r3, #0xC
  03350	e5933000	 ldr         r3, [r3]
  03354	e1a03a03	 mov         r3, r3, lsl #20
  03358	e1a03da3	 mov         r3, r3, lsr #27
  0335c	e2833001	 add         r3, r3, #1
  03360	e58d301c	 str         r3, [sp, #0x1C]

; 1711 :     
; 1712 :     // Get hardware
; 1713 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  03364	e3e01000	 mvn         r1, #0
  03368	e59d3004	 ldr         r3, [sp, #4]
  0336c	e283301c	 add         r3, r3, #0x1C
  03370	e5930000	 ldr         r0, [r3]
  03374	eb000000	 bl          WaitForSingleObject

; 1714 :     
; 1715 :     // Set this driver to Active Mode
; 1716 :     SetSPIPower(pDevice, D0);

  03378	e3a01000	 mov         r1, #0
  0337c	e59d0004	 ldr         r0, [sp, #4]
  03380	eb000000	 bl          SetSPIPower

; 1717 :     
; 1718 :     // Enable the channel
; 1719 : 	if (!pInstance->exclusiveAccess)

  03384	e59d3010	 ldr         r3, [sp, #0x10]
  03388	e2833014	 add         r3, r3, #0x14
  0338c	e5933000	 ldr         r3, [r3]
  03390	e3530000	 cmp         r3, #0
  03394	1a000006	 bne         |$LN20@SPI_WriteR|

; 1720 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  03398	e59d3018	 ldr         r3, [sp, #0x18]
  0339c	e2833008	 add         r3, r3, #8
  033a0	e5933000	 ldr         r3, [r3]
  033a4	e3832001	 orr         r2, r3, #1
  033a8	e59d3018	 ldr         r3, [sp, #0x18]
  033ac	e2833008	 add         r3, r3, #8
  033b0	e5832000	 str         r2, [r3]
  033b4		 |$LN20@SPI_WriteR|

; 1721 : 
; 1722 :     // Write out the data
; 1723 :     for( dwCount = 0; dwCount < size; )

  033b4	e3a03000	 mov         r3, #0
  033b8	e58d3008	 str         r3, [sp, #8]
  033bc		 |$LN19@SPI_WriteR|
  033bc	e59d2008	 ldr         r2, [sp, #8]
  033c0	e59d3050	 ldr         r3, [sp, #0x50]
  033c4	e1520003	 cmp         r2, r3
  033c8	2a0000b0	 bcs         |$LN18@SPI_WriteR|

; 1724 :     {
; 1725 :         //  Write out data on byte/word/dword boundaries
; 1726 :         if( dwWordLen > 16 )

  033cc	e59d301c	 ldr         r3, [sp, #0x1C]
  033d0	e3530010	 cmp         r3, #0x10
  033d4	9a000007	 bls         |$LN17@SPI_WriteR|

; 1727 :         {
; 1728 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT32*)(&pOutData[dwCount]));   

  033d8	e59d200c	 ldr         r2, [sp, #0xC]
  033dc	e59d3008	 ldr         r3, [sp, #8]
  033e0	e0821003	 add         r1, r2, r3
  033e4	e59d3018	 ldr         r3, [sp, #0x18]
  033e8	e283200c	 add         r2, r3, #0xC
  033ec	e5913000	 ldr         r3, [r1]
  033f0	e5823000	 str         r3, [r2]
  033f4	ea000011	 b           |$LN16@SPI_WriteR|
  033f8		 |$LN17@SPI_WriteR|

; 1729 :         }
; 1730 :         else if( dwWordLen > 8 )

  033f8	e59d301c	 ldr         r3, [sp, #0x1C]
  033fc	e3530008	 cmp         r3, #8
  03400	9a000007	 bls         |$LN15@SPI_WriteR|

; 1731 :         {
; 1732 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT16*)(&pOutData[dwCount]));   

  03404	e59d200c	 ldr         r2, [sp, #0xC]
  03408	e59d3008	 ldr         r3, [sp, #8]
  0340c	e0823003	 add         r3, r2, r3
  03410	e1d320b0	 ldrh        r2, [r3]
  03414	e59d3018	 ldr         r3, [sp, #0x18]
  03418	e283300c	 add         r3, r3, #0xC
  0341c	e5832000	 str         r2, [r3]

; 1733 :         }
; 1734 :         else

  03420	ea000006	 b           |$LN14@SPI_WriteR|
  03424		 |$LN15@SPI_WriteR|

; 1735 :         {
; 1736 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT8*)(&pOutData[dwCount]));   

  03424	e59d200c	 ldr         r2, [sp, #0xC]
  03428	e59d3008	 ldr         r3, [sp, #8]
  0342c	e0823003	 add         r3, r2, r3
  03430	e5d32000	 ldrb        r2, [r3]
  03434	e59d3018	 ldr         r3, [sp, #0x18]
  03438	e283300c	 add         r3, r3, #0xC
  0343c	e5832000	 str         r2, [r3]
  03440		 |$LN14@SPI_WriteR|
  03440		 |$LN16@SPI_WriteR|

; 1737 :         }   
; 1738 : 
; 1739 :         //  Wait for TX register to empty out
; 1740 :         dwWait = pDevice->timeout;

  03440	e59d3004	 ldr         r3, [sp, #4]
  03444	e2833028	 add         r3, r3, #0x28
  03448	e5933000	 ldr         r3, [r3]
  0344c	e58d3000	 str         r3, [sp]
  03450		 |$LN13@SPI_WriteR|

; 1741 :         while(dwWait && !(INREG32(&pSPIChannelRegs->MCSPI_CHSTATUS) & MCSPI_CHSTAT_TX_EMPTY))

  03450	e59d3000	 ldr         r3, [sp]
  03454	e3530000	 cmp         r3, #0
  03458	0a00000a	 beq         |$LN12@SPI_WriteR|
  0345c	e59d3018	 ldr         r3, [sp, #0x18]
  03460	e2833004	 add         r3, r3, #4
  03464	e5933000	 ldr         r3, [r3]
  03468	e3130002	 tst         r3, #2
  0346c	1a000005	 bne         |$LN12@SPI_WriteR|

; 1742 :         {
; 1743 :             StallExecution(1);

  03470	e3a00001	 mov         r0, #1
  03474	eb000000	 bl          StallExecution

; 1744 :             dwWait--;

  03478	e59d3000	 ldr         r3, [sp]
  0347c	e2433001	 sub         r3, r3, #1
  03480	e58d3000	 str         r3, [sp]

; 1745 :         }

  03484	eafffff1	 b           |$LN13@SPI_WriteR|
  03488		 |$LN12@SPI_WriteR|

; 1746 : 
; 1747 :         //  Check if timeout occured
; 1748 :         if( dwWait == 0 )

  03488	e59d3000	 ldr         r3, [sp]
  0348c	e3530000	 cmp         r3, #0
  03490	1a00001f	 bne         |$LN11@SPI_WriteR|

; 1749 :         {
; 1750 :             DEBUGMSG(ZONE_ERROR, (L"SPI_WriteRead write timeout\r\n"));

  03494	e59f3290	 ldr         r3, [pc, #0x290]
  03498	e5933440	 ldr         r3, [r3, #0x440]
  0349c	e3130001	 tst         r3, #1
  034a0	0a000004	 beq         |$LN30@SPI_WriteR|
  034a4	e59f0288	 ldr         r0, [pc, #0x288]
  034a8	eb000000	 bl          NKDbgPrintfW
  034ac	e3a03001	 mov         r3, #1
  034b0	e58d3038	 str         r3, [sp, #0x38]
  034b4	ea000001	 b           |$LN31@SPI_WriteR|
  034b8		 |$LN30@SPI_WriteR|
  034b8	e3a03000	 mov         r3, #0
  034bc	e58d3038	 str         r3, [sp, #0x38]
  034c0		 |$LN31@SPI_WriteR|

; 1751 :             
; 1752 :             // Disable the channel.
; 1753 : 			if (!pInstance->exclusiveAccess)

  034c0	e59d3010	 ldr         r3, [sp, #0x10]
  034c4	e2833014	 add         r3, r3, #0x14
  034c8	e5933000	 ldr         r3, [r3]
  034cc	e3530000	 cmp         r3, #0
  034d0	1a000007	 bne         |$LN10@SPI_WriteR|

; 1754 :         	    CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  034d4	e59d3018	 ldr         r3, [sp, #0x18]
  034d8	e2833008	 add         r3, r3, #8
  034dc	e5932000	 ldr         r2, [r3]
  034e0	e3e03001	 mvn         r3, #1
  034e4	e0022003	 and         r2, r2, r3
  034e8	e59d3018	 ldr         r3, [sp, #0x18]
  034ec	e2833008	 add         r3, r3, #8
  034f0	e5832000	 str         r2, [r3]
  034f4		 |$LN10@SPI_WriteR|

; 1755 : 
; 1756 :             // Set this driver to Suspend Mode
; 1757 :             SetSPIPower(pDevice, D4);

  034f4	e3a01004	 mov         r1, #4
  034f8	e59d0004	 ldr         r0, [sp, #4]
  034fc	eb000000	 bl          SetSPIPower

; 1758 : 
; 1759 :             // Release hardware
; 1760 : 			ReleaseMutex(pDevice->hControllerMutex);

  03500	e59d3004	 ldr         r3, [sp, #4]
  03504	e283301c	 add         r3, r3, #0x1C
  03508	e5930000	 ldr         r0, [r3]
  0350c	eb000000	 bl          ReleaseMutex

; 1761 :             goto clean;

  03510	ea000072	 b           |$clean$45244|
  03514		 |$LN11@SPI_WriteR|

; 1762 :         }
; 1763 : 
; 1764 : 
; 1765 :         //  Wait for RX register to fill
; 1766 :         dwWait = pDevice->timeout;

  03514	e59d3004	 ldr         r3, [sp, #4]
  03518	e2833028	 add         r3, r3, #0x28
  0351c	e5933000	 ldr         r3, [r3]
  03520	e58d3000	 str         r3, [sp]
  03524		 |$LN9@SPI_WriteR|

; 1767 :         while(dwWait && !(INREG32(&pSPIChannelRegs->MCSPI_CHSTATUS) & MCSPI_CHSTAT_RX_FULL))

  03524	e59d3000	 ldr         r3, [sp]
  03528	e3530000	 cmp         r3, #0
  0352c	0a00000a	 beq         |$LN8@SPI_WriteR|
  03530	e59d3018	 ldr         r3, [sp, #0x18]
  03534	e2833004	 add         r3, r3, #4
  03538	e5933000	 ldr         r3, [r3]
  0353c	e3130001	 tst         r3, #1
  03540	1a000005	 bne         |$LN8@SPI_WriteR|

; 1768 :         {
; 1769 :             StallExecution(1);

  03544	e3a00001	 mov         r0, #1
  03548	eb000000	 bl          StallExecution

; 1770 :             dwWait--;

  0354c	e59d3000	 ldr         r3, [sp]
  03550	e2433001	 sub         r3, r3, #1
  03554	e58d3000	 str         r3, [sp]

; 1771 :         }

  03558	eafffff1	 b           |$LN9@SPI_WriteR|
  0355c		 |$LN8@SPI_WriteR|

; 1772 : 
; 1773 :         //  Check if timeout occured
; 1774 :         if( dwWait == 0 )

  0355c	e59d3000	 ldr         r3, [sp]
  03560	e3530000	 cmp         r3, #0
  03564	1a00001f	 bne         |$LN7@SPI_WriteR|

; 1775 :         {
; 1776 :             DEBUGMSG(ZONE_ERROR, (L"SPI_WriteRead read timeout\r\n"));

  03568	e59f31bc	 ldr         r3, [pc, #0x1BC]
  0356c	e5933440	 ldr         r3, [r3, #0x440]
  03570	e3130001	 tst         r3, #1
  03574	0a000004	 beq         |$LN32@SPI_WriteR|
  03578	e59f01b0	 ldr         r0, [pc, #0x1B0]
  0357c	eb000000	 bl          NKDbgPrintfW
  03580	e3a03001	 mov         r3, #1
  03584	e58d303c	 str         r3, [sp, #0x3C]
  03588	ea000001	 b           |$LN33@SPI_WriteR|
  0358c		 |$LN32@SPI_WriteR|
  0358c	e3a03000	 mov         r3, #0
  03590	e58d303c	 str         r3, [sp, #0x3C]
  03594		 |$LN33@SPI_WriteR|

; 1777 :             
; 1778 :             // Disable the channel.
; 1779 : 			if (!pInstance->exclusiveAccess)

  03594	e59d3010	 ldr         r3, [sp, #0x10]
  03598	e2833014	 add         r3, r3, #0x14
  0359c	e5933000	 ldr         r3, [r3]
  035a0	e3530000	 cmp         r3, #0
  035a4	1a000007	 bne         |$LN6@SPI_WriteR|

; 1780 :             	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  035a8	e59d3018	 ldr         r3, [sp, #0x18]
  035ac	e2833008	 add         r3, r3, #8
  035b0	e5932000	 ldr         r2, [r3]
  035b4	e3e03001	 mvn         r3, #1
  035b8	e0022003	 and         r2, r2, r3
  035bc	e59d3018	 ldr         r3, [sp, #0x18]
  035c0	e2833008	 add         r3, r3, #8
  035c4	e5832000	 str         r2, [r3]
  035c8		 |$LN6@SPI_WriteR|

; 1781 : 
; 1782 :             // Set this driver to Suspend Mode
; 1783 :             SetSPIPower(pDevice, D4);

  035c8	e3a01004	 mov         r1, #4
  035cc	e59d0004	 ldr         r0, [sp, #4]
  035d0	eb000000	 bl          SetSPIPower

; 1784 : 
; 1785 :             // Release hardware
; 1786 : 			ReleaseMutex(pDevice->hControllerMutex);

  035d4	e59d3004	 ldr         r3, [sp, #4]
  035d8	e283301c	 add         r3, r3, #0x1C
  035dc	e5930000	 ldr         r0, [r3]
  035e0	eb000000	 bl          ReleaseMutex

; 1787 : 
; 1788 :             goto clean;

  035e4	ea00003d	 b           |$clean$45244|
  035e8		 |$LN7@SPI_WriteR|

; 1789 :         }
; 1790 : 
; 1791 : 
; 1792 :         //  Read in data on byte/word/dword boundaries
; 1793 :         if( dwWordLen > 16 )

  035e8	e59d301c	 ldr         r3, [sp, #0x1C]
  035ec	e3530010	 cmp         r3, #0x10
  035f0	9a00000a	 bls         |$LN5@SPI_WriteR|

; 1794 :         {
; 1795 :             *(UINT32*)(&pInData[dwCount]) = INREG32(&pSPIChannelRegs->MCSPI_RX);   

  035f4	e59d3018	 ldr         r3, [sp, #0x18]
  035f8	e2831010	 add         r1, r3, #0x10
  035fc	e59d2014	 ldr         r2, [sp, #0x14]
  03600	e59d3008	 ldr         r3, [sp, #8]
  03604	e0822003	 add         r2, r2, r3
  03608	e5913000	 ldr         r3, [r1]
  0360c	e5823000	 str         r3, [r2]

; 1796 :             dwCount += sizeof(UINT32);

  03610	e59d3008	 ldr         r3, [sp, #8]
  03614	e2833004	 add         r3, r3, #4
  03618	e58d3008	 str         r3, [sp, #8]
  0361c	ea00001a	 b           |$LN4@SPI_WriteR|
  03620		 |$LN5@SPI_WriteR|

; 1797 :         }
; 1798 :         else if( dwWordLen > 8 )

  03620	e59d301c	 ldr         r3, [sp, #0x1C]
  03624	e3530008	 cmp         r3, #8
  03628	9a00000c	 bls         |$LN3@SPI_WriteR|

; 1799 :         {
; 1800 :             *(UINT16*)(&pInData[dwCount]) = (UINT16) INREG32(&pSPIChannelRegs->MCSPI_RX);   

  0362c	e59d3018	 ldr         r3, [sp, #0x18]
  03630	e2833010	 add         r3, r3, #0x10
  03634	e5933000	 ldr         r3, [r3]
  03638	e1a01803	 mov         r1, r3, lsl #16
  0363c	e1a01821	 mov         r1, r1, lsr #16
  03640	e59d2014	 ldr         r2, [sp, #0x14]
  03644	e59d3008	 ldr         r3, [sp, #8]
  03648	e0823003	 add         r3, r2, r3
  0364c	e1c310b0	 strh        r1, [r3]

; 1801 :             dwCount += sizeof(UINT16);

  03650	e59d3008	 ldr         r3, [sp, #8]
  03654	e2833002	 add         r3, r3, #2
  03658	e58d3008	 str         r3, [sp, #8]

; 1802 :         }
; 1803 :         else

  0365c	ea00000a	 b           |$LN2@SPI_WriteR|
  03660		 |$LN3@SPI_WriteR|

; 1804 :         {
; 1805 :             *(UINT8*)(&pInData[dwCount]) = (UINT8) INREG32(&pSPIChannelRegs->MCSPI_RX);   

  03660	e59d3018	 ldr         r3, [sp, #0x18]
  03664	e2833010	 add         r3, r3, #0x10
  03668	e5933000	 ldr         r3, [r3]
  0366c	e20310ff	 and         r1, r3, #0xFF
  03670	e59d2014	 ldr         r2, [sp, #0x14]
  03674	e59d3008	 ldr         r3, [sp, #8]
  03678	e0823003	 add         r3, r2, r3
  0367c	e5c31000	 strb        r1, [r3]

; 1806 :             dwCount += sizeof(UINT8);

  03680	e59d3008	 ldr         r3, [sp, #8]
  03684	e2833001	 add         r3, r3, #1
  03688	e58d3008	 str         r3, [sp, #8]
  0368c		 |$LN2@SPI_WriteR|
  0368c		 |$LN4@SPI_WriteR|

; 1807 :         }   
; 1808 :     }

  0368c	eaffff4a	 b           |$LN19@SPI_WriteR|
  03690		 |$LN18@SPI_WriteR|

; 1809 :     
; 1810 :     // Disable the channel.
; 1811 : 	if (!pInstance->exclusiveAccess)

  03690	e59d3010	 ldr         r3, [sp, #0x10]
  03694	e2833014	 add         r3, r3, #0x14
  03698	e5933000	 ldr         r3, [r3]
  0369c	e3530000	 cmp         r3, #0
  036a0	1a000007	 bne         |$LN1@SPI_WriteR|

; 1812 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  036a4	e59d3018	 ldr         r3, [sp, #0x18]
  036a8	e2833008	 add         r3, r3, #8
  036ac	e5932000	 ldr         r2, [r3]
  036b0	e3e03001	 mvn         r3, #1
  036b4	e0022003	 and         r2, r2, r3
  036b8	e59d3018	 ldr         r3, [sp, #0x18]
  036bc	e2833008	 add         r3, r3, #8
  036c0	e5832000	 str         r2, [r3]
  036c4		 |$LN1@SPI_WriteR|

; 1813 : 
; 1814 : 
; 1815 :     // Set this driver to Suspend Mode
; 1816 :     SetSPIPower(pDevice, D4);

  036c4	e3a01004	 mov         r1, #4
  036c8	e59d0004	 ldr         r0, [sp, #4]
  036cc	eb000000	 bl          SetSPIPower

; 1817 : 
; 1818 :     // Release hardware
; 1819 : 	ReleaseMutex(pDevice->hControllerMutex);

  036d0	e59d3004	 ldr         r3, [sp, #4]
  036d4	e283301c	 add         r3, r3, #0x1C
  036d8	e5930000	 ldr         r0, [r3]
  036dc	eb000000	 bl          ReleaseMutex
  036e0		 |$clean$45244|

; 1820 :     
; 1821 : clean:
; 1822 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_WriteRead(rc = %d)\r\n", dwCount));

  036e0	e59f3044	 ldr         r3, [pc, #0x44]
  036e4	e5933440	 ldr         r3, [r3, #0x440]
  036e8	e3130004	 tst         r3, #4
  036ec	0a000005	 beq         |$LN34@SPI_WriteR|
  036f0	e59d1008	 ldr         r1, [sp, #8]
  036f4	e59f002c	 ldr         r0, [pc, #0x2C]
  036f8	eb000000	 bl          NKDbgPrintfW
  036fc	e3a03001	 mov         r3, #1
  03700	e58d3040	 str         r3, [sp, #0x40]
  03704	ea000001	 b           |$LN35@SPI_WriteR|
  03708		 |$LN34@SPI_WriteR|
  03708	e3a03000	 mov         r3, #0
  0370c	e58d3040	 str         r3, [sp, #0x40]
  03710		 |$LN35@SPI_WriteR|

; 1823 :     return dwCount;

  03710	e59d3008	 ldr         r3, [sp, #8]
  03714	e58d3020	 str         r3, [sp, #0x20]
  03718		 |$LN24@SPI_WriteR|

; 1824 : }

  03718	e59d0020	 ldr         r0, [sp, #0x20]
  0371c	e28dd044	 add         sp, sp, #0x44
  03720	e89d6000	 ldmia       sp, {sp, lr}
  03724	e12fff1e	 bx          lr
  03728		 |$LN39@SPI_WriteR|
  03728		 |$LN40@SPI_WriteR|
  03728	00000000	 DCD         |??_C@_1DE@HOMLCLPG@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  0372c		 |$LN41@SPI_WriteR|
  0372c	00000000	 DCD         |dpCurSettings|
  03730		 |$LN42@SPI_WriteR|
  03730	00000000	 DCD         |??_C@_1DK@BIMPJCEL@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  03734		 |$LN43@SPI_WriteR|
  03734	00000000	 DCD         |??_C@_1DM@CKFJLFJG@?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?5?$AAw?$AAr?$AAi?$AAt?$AAe?$AA?5?$AAt?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AN?$AA?6?$AA?$AA@|
  03738		 |$LN44@SPI_WriteR|
  03738	00000000	 DCD         |??_C@_1FM@KAGDGFOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAo?$AAn?$AAt@|
  0373c		 |$LN45@SPI_WriteR|
  0373c	73706949	 DCD         0x73706949
  03740		 |$LN46@SPI_WriteR|
  03740	00000000	 DCD         |??_C@_1EC@BJEKFMAM@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAW?$AAr?$AAi?$AAt?$AAe?$AAR?$AAe?$AAa?$AAd?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6@|
  03744		 |$M46276|

			 ENDP  ; |SPI_WriteRead|

	EXPORT	|ContextRestore|
	IMPORT	|SpiDmaRestore|

  00098			 AREA	 |.pdata|, PDATA
|$T46300| DCD	|$LN24@ContextRes|
	DCD	0x4000b104
; Function compile flags: /Odtp

  03744			 AREA	 |.text|, CODE, ARM

  03744		 |ContextRestore| PROC

; 1832 : {

  03744		 |$LN24@ContextRes|
  03744	e1a0c00d	 mov         r12, sp
  03748	e92d0001	 stmdb       sp!, {r0}
  0374c	e92d5000	 stmdb       sp!, {r12, lr}
  03750	e24dd014	 sub         sp, sp, #0x14
  03754		 |$M46297|

; 1833 :     SPI_DEVICE *pDevice = pInstance->pDevice;

  03754	e59d301c	 ldr         r3, [sp, #0x1C]
  03758	e2833004	 add         r3, r3, #4
  0375c	e5933000	 ldr         r3, [r3]
  03760	e58d3000	 str         r3, [sp]

; 1834 :     DWORD	dwCount=0;

  03764	e3a03000	 mov         r3, #0
  03768	e58d3004	 str         r3, [sp, #4]

; 1835 : 
; 1836 :     // Get Device
; 1837 :     pDevice = pInstance->pDevice;

  0376c	e59d301c	 ldr         r3, [sp, #0x1C]
  03770	e2833004	 add         r3, r3, #4
  03774	e5933000	 ldr         r3, [r3]
  03778	e58d3000	 str         r3, [sp]

; 1838 : 
; 1839 :     SETREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG, MCSPI_SYSCONFIG_SOFTRESET);

  0377c	e59d3000	 ldr         r3, [sp]
  03780	e2833018	 add         r3, r3, #0x18
  03784	e5933000	 ldr         r3, [r3]
  03788	e2833010	 add         r3, r3, #0x10
  0378c	e5933000	 ldr         r3, [r3]
  03790	e3832002	 orr         r2, r3, #2
  03794	e59d3000	 ldr         r3, [sp]
  03798	e2833018	 add         r3, r3, #0x18
  0379c	e5933000	 ldr         r3, [r3]
  037a0	e2833010	 add         r3, r3, #0x10
  037a4	e5832000	 str         r2, [r3]
  037a8		 |$LN11@ContextRes|

; 1840 :     // Wait until resetting is done
; 1841 :     while ( !(INREG32(&pDevice->pSPIRegs->MCSPI_SYSSTATUS) & MCSPI_SYSSTATUS_RESETDONE))

  037a8	e59d3000	 ldr         r3, [sp]
  037ac	e2833018	 add         r3, r3, #0x18
  037b0	e5933000	 ldr         r3, [r3]
  037b4	e2833014	 add         r3, r3, #0x14
  037b8	e5933000	 ldr         r3, [r3]
  037bc	e3130001	 tst         r3, #1
  037c0	1a000012	 bne         |$LN10@ContextRes|

; 1842 :         {
; 1843 :         Sleep (1);

  037c4	e3a00001	 mov         r0, #1
  037c8	eb000000	 bl          Sleep

; 1844 :         if (dwCount++>0x100)

  037cc	e59d3004	 ldr         r3, [sp, #4]
  037d0	e3530c01	 cmp         r3, #1, 24
  037d4	e59d3004	 ldr         r3, [sp, #4]
  037d8	e2833001	 add         r3, r3, #1
  037dc	e58d3004	 str         r3, [sp, #4]
  037e0	9a000009	 bls         |$LN9@ContextRes|

; 1845 :             {
; 1846 :             // Break out dead lock, something is wrong.
; 1847 :             ERRORMSG (TRUE, (TEXT("SPI: ERROR holding in reset.\n")));

  037e4	e3a02c07	 mov         r2, #7, 24
  037e8	e3822037	 orr         r2, r2, #0x37
  037ec	e59f1210	 ldr         r1, [pc, #0x210]
  037f0	e59f0208	 ldr         r0, [pc, #0x208]
  037f4	eb000000	 bl          NKDbgPrintfW
  037f8	e59f01fc	 ldr         r0, [pc, #0x1FC]
  037fc	eb000000	 bl          NKDbgPrintfW

; 1848 :             return FALSE;

  03800	e3a03000	 mov         r3, #0
  03804	e58d3008	 str         r3, [sp, #8]
  03808	ea000077	 b           |$LN12@ContextRes|
  0380c		 |$LN9@ContextRes|

; 1849 :             }
; 1850 :         }

  0380c	eaffffe5	 b           |$LN11@ContextRes|
  03810		 |$LN10@ContextRes|

; 1851 : 
; 1852 :     // Disable all interrupts.
; 1853 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQENABLE, 0);

  03810	e59d3000	 ldr         r3, [sp]
  03814	e2833018	 add         r3, r3, #0x18
  03818	e5933000	 ldr         r3, [r3]
  0381c	e283201c	 add         r2, r3, #0x1C
  03820	e3a03000	 mov         r3, #0
  03824	e5823000	 str         r3, [r2]

; 1854 :     // Clear interrupts.
; 1855 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQSTATUS, 0xFFFF);

  03828	e59d3000	 ldr         r3, [sp]
  0382c	e2833018	 add         r3, r3, #0x18
  03830	e5933000	 ldr         r3, [r3]
  03834	e2832018	 add         r2, r3, #0x18
  03838	e3a03cff	 mov         r3, #0xFF, 24
  0383c	e38330ff	 orr         r3, r3, #0xFF
  03840	e5823000	 str         r3, [r2]

; 1856 :     // Setup Module Control as master or slave
; 1857 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, (pDevice->eSpiMode==SLAVE) ? MCSPI_MS_BIT : 0);

  03844	e59d3000	 ldr         r3, [sp]
  03848	e2833040	 add         r3, r3, #0x40
  0384c	e5933000	 ldr         r3, [r3]
  03850	e3530002	 cmp         r3, #2
  03854	1a000002	 bne         |$LN14@ContextRes|
  03858	e3a03004	 mov         r3, #4
  0385c	e58d300c	 str         r3, [sp, #0xC]
  03860	ea000001	 b           |$LN15@ContextRes|
  03864		 |$LN14@ContextRes|
  03864	e3a03000	 mov         r3, #0
  03868	e58d300c	 str         r3, [sp, #0xC]
  0386c		 |$LN15@ContextRes|
  0386c	e59d3000	 ldr         r3, [sp]
  03870	e2833018	 add         r3, r3, #0x18
  03874	e5933000	 ldr         r3, [r3]
  03878	e2832028	 add         r2, r3, #0x28
  0387c	e59d300c	 ldr         r3, [sp, #0xC]
  03880	e5823000	 str         r3, [r2]

; 1858 : 
; 1859 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG, MCSPI_SYSCONFIG_AUTOIDLE |
; 1860 :         MCSPI_SYSCONFIG_SMARTIDLE | MCSPI_SYSCONFIG_ENAWAKEUP);

  03884	e59d3000	 ldr         r3, [sp]
  03888	e2833018	 add         r3, r3, #0x18
  0388c	e5933000	 ldr         r3, [r3]
  03890	e2832010	 add         r2, r3, #0x10
  03894	e3a03015	 mov         r3, #0x15
  03898	e5823000	 str         r3, [r2]

; 1861 : 
; 1862 :     // Configure the channel
; 1863 :     switch( pInstance->address)

  0389c	e59d301c	 ldr         r3, [sp, #0x1C]
  038a0	e2833008	 add         r3, r3, #8
  038a4	e5933000	 ldr         r3, [r3]
  038a8	e58d3010	 str         r3, [sp, #0x10]
  038ac	e59d3010	 ldr         r3, [sp, #0x10]
  038b0	e3530003	 cmp         r3, #3
  038b4	8a000043	 bhi         |$LN2@ContextRes|
  038b8	e59d2010	 ldr         r2, [sp, #0x10]
  038bc	e1a03102	 mov         r3, r2, lsl #2
  038c0	e083300f	 add         r3, r3, pc
  038c4	e5933004	 ldr         r3, [r3, #4]
  038c8	e08ff003	 add         pc, pc, r3
  038cc		 |$LN17@ContextRes|
  038cc		 |$LN16@ContextRes|
  038cc		 |$LN18@ContextRes|
  038cc	0000000c	 DCD         0xc
  038d0		 |$LN19@ContextRes|
  038d0	00000048	 DCD         0x48
  038d4		 |$LN20@ContextRes|
  038d4	00000084	 DCD         0x84
  038d8		 |$LN21@ContextRes|
  038d8	000000c0	 DCD         0xc0
  038dc		 |$LN6@ContextRes|

; 1864 :     {
; 1865 :         case 0:
; 1866 :             //  Channel 0 configuration
; 1867 :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF0);

  038dc	e59d3000	 ldr         r3, [sp]
  038e0	e2833018	 add         r3, r3, #0x18
  038e4	e5933000	 ldr         r3, [r3]
  038e8	e283202c	 add         r2, r3, #0x2C
  038ec	e59d301c	 ldr         r3, [sp, #0x1C]
  038f0	e2833010	 add         r3, r3, #0x10
  038f4	e5832000	 str         r2, [r3]

; 1868 :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, pInstance->config);

  038f8	e59d301c	 ldr         r3, [sp, #0x1C]
  038fc	e283100c	 add         r1, r3, #0xC
  03900	e59d301c	 ldr         r3, [sp, #0x1C]
  03904	e2833010	 add         r3, r3, #0x10
  03908	e5932000	 ldr         r2, [r3]
  0390c	e5913000	 ldr         r3, [r1]
  03910	e5823000	 str         r3, [r2]

; 1869 :             break;

  03914	ea00002b	 b           |$LN7@ContextRes|
  03918		 |$LN5@ContextRes|

; 1870 : 
; 1871 :         case 1:
; 1872 :             //  Channel 1 configuration
; 1873 :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF1);

  03918	e59d3000	 ldr         r3, [sp]
  0391c	e2833018	 add         r3, r3, #0x18
  03920	e5933000	 ldr         r3, [r3]
  03924	e2832040	 add         r2, r3, #0x40
  03928	e59d301c	 ldr         r3, [sp, #0x1C]
  0392c	e2833010	 add         r3, r3, #0x10
  03930	e5832000	 str         r2, [r3]

; 1874 :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, pInstance->config);

  03934	e59d301c	 ldr         r3, [sp, #0x1C]
  03938	e283100c	 add         r1, r3, #0xC
  0393c	e59d301c	 ldr         r3, [sp, #0x1C]
  03940	e2833010	 add         r3, r3, #0x10
  03944	e5932000	 ldr         r2, [r3]
  03948	e5913000	 ldr         r3, [r1]
  0394c	e5823000	 str         r3, [r2]

; 1875 :             break;

  03950	ea00001c	 b           |$LN7@ContextRes|
  03954		 |$LN4@ContextRes|

; 1876 : 
; 1877 :         case 2:
; 1878 :             //  Channel 2 configuration
; 1879 :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF2);

  03954	e59d3000	 ldr         r3, [sp]
  03958	e2833018	 add         r3, r3, #0x18
  0395c	e5933000	 ldr         r3, [r3]
  03960	e2832054	 add         r2, r3, #0x54
  03964	e59d301c	 ldr         r3, [sp, #0x1C]
  03968	e2833010	 add         r3, r3, #0x10
  0396c	e5832000	 str         r2, [r3]

; 1880 :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, pInstance->config);

  03970	e59d301c	 ldr         r3, [sp, #0x1C]
  03974	e283100c	 add         r1, r3, #0xC
  03978	e59d301c	 ldr         r3, [sp, #0x1C]
  0397c	e2833010	 add         r3, r3, #0x10
  03980	e5932000	 ldr         r2, [r3]
  03984	e5913000	 ldr         r3, [r1]
  03988	e5823000	 str         r3, [r2]

; 1881 :             break;

  0398c	ea00000d	 b           |$LN7@ContextRes|
  03990		 |$LN3@ContextRes|

; 1882 : 
; 1883 :         case 3:
; 1884 :             //  Channel 3 configuration
; 1885 :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF3);

  03990	e59d3000	 ldr         r3, [sp]
  03994	e2833018	 add         r3, r3, #0x18
  03998	e5933000	 ldr         r3, [r3]
  0399c	e2832068	 add         r2, r3, #0x68
  039a0	e59d301c	 ldr         r3, [sp, #0x1C]
  039a4	e2833010	 add         r3, r3, #0x10
  039a8	e5832000	 str         r2, [r3]

; 1886 :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, pInstance->config);

  039ac	e59d301c	 ldr         r3, [sp, #0x1C]
  039b0	e283100c	 add         r1, r3, #0xC
  039b4	e59d301c	 ldr         r3, [sp, #0x1C]
  039b8	e2833010	 add         r3, r3, #0x10
  039bc	e5932000	 ldr         r2, [r3]
  039c0	e5913000	 ldr         r3, [r1]
  039c4	e5823000	 str         r3, [r2]
  039c8		 |$LN2@ContextRes|
  039c8		 |$LN7@ContextRes|

; 1887 :             break;
; 1888 : 
; 1889 :         default:
; 1890 :             break;
; 1891 :     }
; 1892 : 
; 1893 :     //  Restore DMA if needed
; 1894 :     if (pInstance->config & (MCSPI_CHCONF_DMAR_ENABLE | MCSPI_CHCONF_DMAW_ENABLE))

  039c8	e59d301c	 ldr         r3, [sp, #0x1C]
  039cc	e283300c	 add         r3, r3, #0xC
  039d0	e5933000	 ldr         r3, [r3]
  039d4	e3130903	 tst         r3, #3, 18
  039d8	0a000001	 beq         |$LN1@ContextRes|

; 1895 :         {
; 1896 :         SpiDmaRestore(pInstance);

  039dc	e59d001c	 ldr         r0, [sp, #0x1C]
  039e0	eb000000	 bl          SpiDmaRestore
  039e4		 |$LN1@ContextRes|

; 1897 :         }
; 1898 : 
; 1899 :     return TRUE;

  039e4	e3a03001	 mov         r3, #1
  039e8	e58d3008	 str         r3, [sp, #8]
  039ec		 |$LN12@ContextRes|

; 1900 : }

  039ec	e59d0008	 ldr         r0, [sp, #8]
  039f0	e28dd014	 add         sp, sp, #0x14
  039f4	e89d6000	 ldmia       sp, {sp, lr}
  039f8	e12fff1e	 bx          lr
  039fc		 |$LN25@ContextRes|
  039fc		 |$LN26@ContextRes|
  039fc	00000000	 DCD         |??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@|
  03a00		 |$LN27@ContextRes|
  03a00	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  03a04		 |$LN28@ContextRes|
  03a04	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  03a08		 |$M46298|

			 ENDP  ; |ContextRestore|

	EXPORT	|??_C@_1CM@EBLFFNNM@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1JI@GNBNOIDI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@HPMAACJJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@GLBGBAAH@?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_LockController|

  000a0			 AREA	 |.pdata|, PDATA
|$T46318| DCD	|$LN16@SPI_LockCo|
	DCD	0x40007104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@EBLFFNNM@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "L", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1JI@GNBNOIDI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "L", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "g", 0x0, "e", 0x0, "t"
	DCB	0x0, "t", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " ", 0x0, "t"
	DCB	0x0, "h", 0x0, "e", 0x0, " ", 0x0, "h", 0x0, "a", 0x0, "r"
	DCB	0x0, "d", 0x0, "w", 0x0, "a", 0x0, "r", 0x0, "e", 0x0, " "
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "!", 0x0, " "
	DCB	0x0, " ", 0x0, "S", 0x0, "t", 0x0, "a", 0x0, "t", 0x0, "u"
	DCB	0x0, "s", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@HPMAACJJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "L", 0x0, "o"
	DCB	0x0, "c", 0x0, "k", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@GLBGBAAH@?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "L", 0x0, "o", 0x0, "c"
	DCB	0x0, "k", 0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r"
	DCB	0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  03a08			 AREA	 |.text|, CODE, ARM

  03a08		 |SPI_LockController| PROC

; 1910 : {

  03a08		 |$LN16@SPI_LockCo|
  03a08	e1a0c00d	 mov         r12, sp
  03a0c	e92d0003	 stmdb       sp!, {r0, r1}
  03a10	e92d5000	 stmdb       sp!, {r12, lr}
  03a14	e24dd028	 sub         sp, sp, #0x28
  03a18		 |$M46315|

; 1911 :     BOOL rc = FALSE;

  03a18	e3a03000	 mov         r3, #0
  03a1c	e58d3004	 str         r3, [sp, #4]

; 1912 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  03a20	e59d3030	 ldr         r3, [sp, #0x30]
  03a24	e58d3008	 str         r3, [sp, #8]

; 1913 :     SPI_DEVICE *pDevice;
; 1914 : 	UINT32 dwStatus;
; 1915 : 
; 1916 :     DEBUGMSG(ZONE_FUNCTION, (L"SPI_LockController\r\n"));

  03a28	e59f3188	 ldr         r3, [pc, #0x188]
  03a2c	e5933440	 ldr         r3, [r3, #0x440]
  03a30	e3130004	 tst         r3, #4
  03a34	0a000004	 beq         |$LN6@SPI_LockCo|
  03a38	e59f0188	 ldr         r0, [pc, #0x188]
  03a3c	eb000000	 bl          NKDbgPrintfW
  03a40	e3a03001	 mov         r3, #1
  03a44	e58d3014	 str         r3, [sp, #0x14]
  03a48	ea000001	 b           |$LN7@SPI_LockCo|
  03a4c		 |$LN6@SPI_LockCo|
  03a4c	e3a03000	 mov         r3, #0
  03a50	e58d3014	 str         r3, [sp, #0x14]
  03a54		 |$LN7@SPI_LockCo|

; 1917 : 	
; 1918 :     // Check if we get correct context
; 1919 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  03a54	e59d3008	 ldr         r3, [sp, #8]
  03a58	e3530000	 cmp         r3, #0
  03a5c	0a000004	 beq         |$LN2@SPI_LockCo|
  03a60	e59d3008	 ldr         r3, [sp, #8]
  03a64	e5932000	 ldr         r2, [r3]
  03a68	e59f3154	 ldr         r3, [pc, #0x154]
  03a6c	e1520003	 cmp         r2, r3
  03a70	0a00000b	 beq         |$LN3@SPI_LockCo|
  03a74		 |$LN2@SPI_LockCo|

; 1920 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_LockController: "
; 1921 :             L"Incorrect context paramer\r\n"
; 1922 :         ));

  03a74	e59f313c	 ldr         r3, [pc, #0x13C]
  03a78	e5933440	 ldr         r3, [r3, #0x440]
  03a7c	e3130001	 tst         r3, #1
  03a80	0a000004	 beq         |$LN8@SPI_LockCo|
  03a84	e59f0134	 ldr         r0, [pc, #0x134]
  03a88	eb000000	 bl          NKDbgPrintfW
  03a8c	e3a03001	 mov         r3, #1
  03a90	e58d3018	 str         r3, [sp, #0x18]
  03a94	ea000001	 b           |$LN9@SPI_LockCo|
  03a98		 |$LN8@SPI_LockCo|
  03a98	e3a03000	 mov         r3, #0
  03a9c	e58d3018	 str         r3, [sp, #0x18]
  03aa0		 |$LN9@SPI_LockCo|

; 1923 :         goto cleanUp;

  03aa0	ea000032	 b           |$cleanUp$45338|
  03aa4		 |$LN3@SPI_LockCo|

; 1924 :     }
; 1925 : 
; 1926 :     // Get Device
; 1927 :     pDevice = pInstance->pDevice;

  03aa4	e59d3008	 ldr         r3, [sp, #8]
  03aa8	e2833004	 add         r3, r3, #4
  03aac	e5933000	 ldr         r3, [r3]
  03ab0	e58d3000	 str         r3, [sp]

; 1928 : 	
; 1929 : 	// Get lock
; 1930 : 	dwStatus = WaitForSingleObject(pDevice->hControllerMutex, dwTimeout);

  03ab4	e59d1034	 ldr         r1, [sp, #0x34]
  03ab8	e59d3000	 ldr         r3, [sp]
  03abc	e283301c	 add         r3, r3, #0x1C
  03ac0	e5930000	 ldr         r0, [r3]
  03ac4	eb000000	 bl          WaitForSingleObject
  03ac8	e58d001c	 str         r0, [sp, #0x1C]
  03acc	e59d301c	 ldr         r3, [sp, #0x1C]
  03ad0	e58d300c	 str         r3, [sp, #0xC]

; 1931 : 	if (dwStatus != WAIT_OBJECT_0)

  03ad4	e59d300c	 ldr         r3, [sp, #0xC]
  03ad8	e3530000	 cmp         r3, #0
  03adc	0a00000c	 beq         |$LN1@SPI_LockCo|

; 1932 : 	{
; 1933 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_LockController: Failed getting the hardware lock!  Status 0x%x\r\n", dwStatus));

  03ae0	e59f30d0	 ldr         r3, [pc, #0xD0]
  03ae4	e5933440	 ldr         r3, [r3, #0x440]
  03ae8	e3130001	 tst         r3, #1
  03aec	0a000005	 beq         |$LN10@SPI_LockCo|
  03af0	e59d100c	 ldr         r1, [sp, #0xC]
  03af4	e59f00c0	 ldr         r0, [pc, #0xC0]
  03af8	eb000000	 bl          NKDbgPrintfW
  03afc	e3a03001	 mov         r3, #1
  03b00	e58d3020	 str         r3, [sp, #0x20]
  03b04	ea000001	 b           |$LN11@SPI_LockCo|
  03b08		 |$LN10@SPI_LockCo|
  03b08	e3a03000	 mov         r3, #0
  03b0c	e58d3020	 str         r3, [sp, #0x20]
  03b10		 |$LN11@SPI_LockCo|

; 1934 : 		goto cleanUp;

  03b10	ea000016	 b           |$cleanUp$45338|
  03b14		 |$LN1@SPI_LockCo|

; 1935 : 	}
; 1936 : 	
; 1937 :     // Set this driver to Active Mode
; 1938 :     SetSPIPower(pDevice, D0);

  03b14	e3a01000	 mov         r1, #0
  03b18	e59d0000	 ldr         r0, [sp]
  03b1c	eb000000	 bl          SetSPIPower

; 1939 : 	
; 1940 : 	// Set controller in single access mode
; 1941 :     SETREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, MCSPI_SINGLE_BIT);

  03b20	e59d3000	 ldr         r3, [sp]
  03b24	e2833018	 add         r3, r3, #0x18
  03b28	e5933000	 ldr         r3, [r3]
  03b2c	e2833028	 add         r3, r3, #0x28
  03b30	e5933000	 ldr         r3, [r3]
  03b34	e3832001	 orr         r2, r3, #1
  03b38	e59d3000	 ldr         r3, [sp]
  03b3c	e2833018	 add         r3, r3, #0x18
  03b40	e5933000	 ldr         r3, [r3]
  03b44	e2833028	 add         r3, r3, #0x28
  03b48	e5832000	 str         r2, [r3]

; 1942 : 	
; 1943 :     // Set this driver to Suspend Mode
; 1944 :     SetSPIPower(pDevice, D4);

  03b4c	e3a01004	 mov         r1, #4
  03b50	e59d0000	 ldr         r0, [sp]
  03b54	eb000000	 bl          SetSPIPower

; 1945 : 	
; 1946 : 	// Set flag indicating we own the controller lock
; 1947 : 	pInstance->exclusiveAccess = TRUE;

  03b58	e59d3008	 ldr         r3, [sp, #8]
  03b5c	e2832014	 add         r2, r3, #0x14
  03b60	e3a03001	 mov         r3, #1
  03b64	e5823000	 str         r3, [r2]

; 1948 : 	
; 1949 :     // Done
; 1950 :     rc = TRUE;

  03b68	e3a03001	 mov         r3, #1
  03b6c	e58d3004	 str         r3, [sp, #4]
  03b70		 |$cleanUp$45338|

; 1951 : 	
; 1952 : cleanUp:
; 1953 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_LockController\r\n"));

  03b70	e59f3040	 ldr         r3, [pc, #0x40]
  03b74	e5933440	 ldr         r3, [r3, #0x440]
  03b78	e3130004	 tst         r3, #4
  03b7c	0a000004	 beq         |$LN12@SPI_LockCo|
  03b80	e59f002c	 ldr         r0, [pc, #0x2C]
  03b84	eb000000	 bl          NKDbgPrintfW
  03b88	e3a03001	 mov         r3, #1
  03b8c	e58d3024	 str         r3, [sp, #0x24]
  03b90	ea000001	 b           |$LN13@SPI_LockCo|
  03b94		 |$LN12@SPI_LockCo|
  03b94	e3a03000	 mov         r3, #0
  03b98	e58d3024	 str         r3, [sp, #0x24]
  03b9c		 |$LN13@SPI_LockCo|

; 1954 : 	return rc;

  03b9c	e59d3004	 ldr         r3, [sp, #4]
  03ba0	e58d3010	 str         r3, [sp, #0x10]

; 1955 : }

  03ba4	e59d0010	 ldr         r0, [sp, #0x10]
  03ba8	e28dd028	 add         sp, sp, #0x28
  03bac	e89d6000	 ldmia       sp, {sp, lr}
  03bb0	e12fff1e	 bx          lr
  03bb4		 |$LN17@SPI_LockCo|
  03bb4		 |$LN18@SPI_LockCo|
  03bb4	00000000	 DCD         |??_C@_1CM@EBLFFNNM@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  03bb8		 |$LN19@SPI_LockCo|
  03bb8	00000000	 DCD         |dpCurSettings|
  03bbc		 |$LN20@SPI_LockCo|
  03bbc	00000000	 DCD         |??_C@_1JI@GNBNOIDI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe@|
  03bc0		 |$LN21@SPI_LockCo|
  03bc0	00000000	 DCD         |??_C@_1GO@HPMAACJJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr@|
  03bc4		 |$LN22@SPI_LockCo|
  03bc4	73706949	 DCD         0x73706949
  03bc8		 |$LN23@SPI_LockCo|
  03bc8	00000000	 DCD         |??_C@_1CK@GLBGBAAH@?$AAS?$AAP?$AAI?$AA_?$AAL?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  03bcc		 |$M46316|

			 ENDP  ; |SPI_LockController|

	EXPORT	|??_C@_1DA@FLPOJALF@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IM@BNOFONFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GG@KJKNLJCN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AAo?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@MGMLEJPG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CO@IMHIJGEC@?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_UnlockController|
	IMPORT	|GetLastError|

  000a8			 AREA	 |.pdata|, PDATA
|$T46341| DCD	|$LN19@SPI_Unlock|
	DCD	0x40008304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@FLPOJALF@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "U", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IM@BNOFONFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "U", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "r"
	DCB	0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "r", 0x0, "e"
	DCB	0x0, "l", 0x0, "e", 0x0, "a", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, " ", 0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k"
	DCB	0x0, "!", 0x0, " ", 0x0, " ", 0x0, "E", 0x0, "r", 0x0, "r"
	DCB	0x0, "o", 0x0, "r", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "d"
	DCB	0x0, "e", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "x"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GG@KJKNLJCN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AAo?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "U", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "o"
	DCB	0x0, "n", 0x0, "'", 0x0, "t", 0x0, " ", 0x0, "o", 0x0, "w"
	DCB	0x0, "n", 0x0, " ", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, " "
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@MGMLEJPG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "U", 0x0, "n"
	DCB	0x0, "l", 0x0, "o", 0x0, "c", 0x0, "k", 0x0, "C", 0x0, "o"
	DCB	0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n"
	DCB	0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a"
	DCB	0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CO@IMHIJGEC@?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, "_", 0x0, "U", 0x0, "n", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "k", 0x0, "C", 0x0, "o", 0x0, "n"
	DCB	0x0, "t", 0x0, "r", 0x0, "o", 0x0, "l", 0x0, "l", 0x0, "e"
	DCB	0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  03bcc			 AREA	 |.text|, CODE, ARM

  03bcc		 |SPI_UnlockController| PROC

; 1964 : {

  03bcc		 |$LN19@SPI_Unlock|
  03bcc	e1a0c00d	 mov         r12, sp
  03bd0	e92d0001	 stmdb       sp!, {r0}
  03bd4	e92d5000	 stmdb       sp!, {r12, lr}
  03bd8	e24dd02c	 sub         sp, sp, #0x2C
  03bdc		 |$M46338|

; 1965 :     BOOL rc = FALSE;

  03bdc	e3a03000	 mov         r3, #0
  03be0	e58d3004	 str         r3, [sp, #4]

; 1966 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  03be4	e59d3034	 ldr         r3, [sp, #0x34]
  03be8	e58d3008	 str         r3, [sp, #8]

; 1967 :     SPI_DEVICE *pDevice;
; 1968 : 
; 1969 :     DEBUGMSG(ZONE_FUNCTION, (L"SPI_UnlockController\r\n"));

  03bec	e59f31cc	 ldr         r3, [pc, #0x1CC]
  03bf0	e5933440	 ldr         r3, [r3, #0x440]
  03bf4	e3130004	 tst         r3, #4
  03bf8	0a000004	 beq         |$LN7@SPI_Unlock|
  03bfc	e59f01d0	 ldr         r0, [pc, #0x1D0]
  03c00	eb000000	 bl          NKDbgPrintfW
  03c04	e3a03001	 mov         r3, #1
  03c08	e58d3010	 str         r3, [sp, #0x10]
  03c0c	ea000001	 b           |$LN8@SPI_Unlock|
  03c10		 |$LN7@SPI_Unlock|
  03c10	e3a03000	 mov         r3, #0
  03c14	e58d3010	 str         r3, [sp, #0x10]
  03c18		 |$LN8@SPI_Unlock|

; 1970 : 	
; 1971 :     // Check if we get correct context
; 1972 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  03c18	e59d3008	 ldr         r3, [sp, #8]
  03c1c	e3530000	 cmp         r3, #0
  03c20	0a000004	 beq         |$LN3@SPI_Unlock|
  03c24	e59d3008	 ldr         r3, [sp, #8]
  03c28	e5932000	 ldr         r2, [r3]
  03c2c	e59f319c	 ldr         r3, [pc, #0x19C]
  03c30	e1520003	 cmp         r2, r3
  03c34	0a00000b	 beq         |$LN4@SPI_Unlock|
  03c38		 |$LN3@SPI_Unlock|

; 1973 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_UnlockController: "
; 1974 :             L"Incorrect context paramer\r\n"
; 1975 :         ));

  03c38	e59f3180	 ldr         r3, [pc, #0x180]
  03c3c	e5933440	 ldr         r3, [r3, #0x440]
  03c40	e3130001	 tst         r3, #1
  03c44	0a000004	 beq         |$LN9@SPI_Unlock|
  03c48	e59f017c	 ldr         r0, [pc, #0x17C]
  03c4c	eb000000	 bl          NKDbgPrintfW
  03c50	e3a03001	 mov         r3, #1
  03c54	e58d3014	 str         r3, [sp, #0x14]
  03c58	ea000001	 b           |$LN10@SPI_Unlock|
  03c5c		 |$LN9@SPI_Unlock|
  03c5c	e3a03000	 mov         r3, #0
  03c60	e58d3014	 str         r3, [sp, #0x14]
  03c64		 |$LN10@SPI_Unlock|

; 1976 :         goto cleanUp;

  03c64	ea000043	 b           |$cleanUp$45362|
  03c68		 |$LN4@SPI_Unlock|

; 1977 :     }
; 1978 : 	
; 1979 : 	// Check to see if we have exclusive access
; 1980 : 	if (!pInstance->exclusiveAccess)

  03c68	e59d3008	 ldr         r3, [sp, #8]
  03c6c	e2833014	 add         r3, r3, #0x14
  03c70	e5933000	 ldr         r3, [r3]
  03c74	e3530000	 cmp         r3, #0
  03c78	1a00000b	 bne         |$LN2@SPI_Unlock|

; 1981 : 	{
; 1982 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_UnlockController: Don't own SPI lock!\r\n"));

  03c7c	e59f313c	 ldr         r3, [pc, #0x13C]
  03c80	e5933440	 ldr         r3, [r3, #0x440]
  03c84	e3130001	 tst         r3, #1
  03c88	0a000004	 beq         |$LN11@SPI_Unlock|
  03c8c	e59f0134	 ldr         r0, [pc, #0x134]
  03c90	eb000000	 bl          NKDbgPrintfW
  03c94	e3a03001	 mov         r3, #1
  03c98	e58d3018	 str         r3, [sp, #0x18]
  03c9c	ea000001	 b           |$LN12@SPI_Unlock|
  03ca0		 |$LN11@SPI_Unlock|
  03ca0	e3a03000	 mov         r3, #0
  03ca4	e58d3018	 str         r3, [sp, #0x18]
  03ca8		 |$LN12@SPI_Unlock|

; 1983 : 		goto cleanUp;

  03ca8	ea000032	 b           |$cleanUp$45362|
  03cac		 |$LN2@SPI_Unlock|

; 1984 : 	}
; 1985 : 
; 1986 :     // Get Device
; 1987 :     pDevice = pInstance->pDevice;

  03cac	e59d3008	 ldr         r3, [sp, #8]
  03cb0	e2833004	 add         r3, r3, #4
  03cb4	e5933000	 ldr         r3, [r3]
  03cb8	e58d3000	 str         r3, [sp]

; 1988 : 	
; 1989 :     // Set this driver to Active Mode
; 1990 :     SetSPIPower(pDevice, D0);

  03cbc	e3a01000	 mov         r1, #0
  03cc0	e59d0000	 ldr         r0, [sp]
  03cc4	eb000000	 bl          SetSPIPower

; 1991 : 	
; 1992 : 	// Release single access mode
; 1993 :     CLRREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, MCSPI_SINGLE_BIT);

  03cc8	e59d3000	 ldr         r3, [sp]
  03ccc	e2833018	 add         r3, r3, #0x18
  03cd0	e5933000	 ldr         r3, [r3]
  03cd4	e2833028	 add         r3, r3, #0x28
  03cd8	e5932000	 ldr         r2, [r3]
  03cdc	e3e03001	 mvn         r3, #1
  03ce0	e0022003	 and         r2, r2, r3
  03ce4	e59d3000	 ldr         r3, [sp]
  03ce8	e2833018	 add         r3, r3, #0x18
  03cec	e5933000	 ldr         r3, [r3]
  03cf0	e2833028	 add         r3, r3, #0x28
  03cf4	e5832000	 str         r2, [r3]

; 1994 :     
; 1995 : 	// Set this driver to Suspend Mode
; 1996 :     SetSPIPower(pDevice, D4);

  03cf8	e3a01004	 mov         r1, #4
  03cfc	e59d0000	 ldr         r0, [sp]
  03d00	eb000000	 bl          SetSPIPower

; 1997 : 	
; 1998 : 	// Clear lock flag
; 1999 : 	pInstance->exclusiveAccess = FALSE;

  03d04	e59d3008	 ldr         r3, [sp, #8]
  03d08	e2832014	 add         r2, r3, #0x14
  03d0c	e3a03000	 mov         r3, #0
  03d10	e5823000	 str         r3, [r2]

; 2000 : 	
; 2001 : 	// Release lock
; 2002 : 	if (!ReleaseMutex(pDevice->hControllerMutex))

  03d14	e59d3000	 ldr         r3, [sp]
  03d18	e283301c	 add         r3, r3, #0x1C
  03d1c	e5930000	 ldr         r0, [r3]
  03d20	eb000000	 bl          ReleaseMutex
  03d24	e58d001c	 str         r0, [sp, #0x1C]
  03d28	e59d301c	 ldr         r3, [sp, #0x1C]
  03d2c	e3530000	 cmp         r3, #0
  03d30	1a00000e	 bne         |$LN1@SPI_Unlock|

; 2003 : 	{
; 2004 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_UnlockController: Error releasing lock!  Error code 0x%x\r\n", GetLastError()));

  03d34	e59f3084	 ldr         r3, [pc, #0x84]
  03d38	e5933440	 ldr         r3, [r3, #0x440]
  03d3c	e3130001	 tst         r3, #1
  03d40	0a000007	 beq         |$LN13@SPI_Unlock|
  03d44	eb000000	 bl          GetLastError
  03d48	e58d0020	 str         r0, [sp, #0x20]
  03d4c	e59d1020	 ldr         r1, [sp, #0x20]
  03d50	e59f006c	 ldr         r0, [pc, #0x6C]
  03d54	eb000000	 bl          NKDbgPrintfW
  03d58	e3a03001	 mov         r3, #1
  03d5c	e58d3024	 str         r3, [sp, #0x24]
  03d60	ea000001	 b           |$LN14@SPI_Unlock|
  03d64		 |$LN13@SPI_Unlock|
  03d64	e3a03000	 mov         r3, #0
  03d68	e58d3024	 str         r3, [sp, #0x24]
  03d6c		 |$LN14@SPI_Unlock|

; 2005 : 		goto cleanUp;

  03d6c	ea000001	 b           |$cleanUp$45362|
  03d70		 |$LN1@SPI_Unlock|

; 2006 : 	}
; 2007 : 	
; 2008 :     // Done
; 2009 :     rc = TRUE;

  03d70	e3a03001	 mov         r3, #1
  03d74	e58d3004	 str         r3, [sp, #4]
  03d78		 |$cleanUp$45362|

; 2010 : 	
; 2011 : cleanUp:
; 2012 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_UnlockController\r\n"));

  03d78	e59f3040	 ldr         r3, [pc, #0x40]
  03d7c	e5933440	 ldr         r3, [r3, #0x440]
  03d80	e3130004	 tst         r3, #4
  03d84	0a000004	 beq         |$LN15@SPI_Unlock|
  03d88	e59f002c	 ldr         r0, [pc, #0x2C]
  03d8c	eb000000	 bl          NKDbgPrintfW
  03d90	e3a03001	 mov         r3, #1
  03d94	e58d3028	 str         r3, [sp, #0x28]
  03d98	ea000001	 b           |$LN16@SPI_Unlock|
  03d9c		 |$LN15@SPI_Unlock|
  03d9c	e3a03000	 mov         r3, #0
  03da0	e58d3028	 str         r3, [sp, #0x28]
  03da4		 |$LN16@SPI_Unlock|

; 2013 : 	return rc;

  03da4	e59d3004	 ldr         r3, [sp, #4]
  03da8	e58d300c	 str         r3, [sp, #0xC]

; 2014 : }

  03dac	e59d000c	 ldr         r0, [sp, #0xC]
  03db0	e28dd02c	 add         sp, sp, #0x2C
  03db4	e89d6000	 ldmia       sp, {sp, lr}
  03db8	e12fff1e	 bx          lr
  03dbc		 |$LN20@SPI_Unlock|
  03dbc		 |$LN21@SPI_Unlock|
  03dbc	00000000	 DCD         |??_C@_1DA@FLPOJALF@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  03dc0		 |$LN22@SPI_Unlock|
  03dc0	00000000	 DCD         |dpCurSettings|
  03dc4		 |$LN23@SPI_Unlock|
  03dc4	00000000	 DCD         |??_C@_1IM@BNOFONFB@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAE?$AAr?$AAr@|
  03dc8		 |$LN24@SPI_Unlock|
  03dc8	00000000	 DCD         |??_C@_1GG@KJKNLJCN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAD?$AAo?$AAn@|
  03dcc		 |$LN25@SPI_Unlock|
  03dcc	00000000	 DCD         |??_C@_1HC@MGMLEJPG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?3?$AA?5?$AAI?$AAn?$AAc@|
  03dd0		 |$LN26@SPI_Unlock|
  03dd0	73706949	 DCD         0x73706949
  03dd4		 |$LN27@SPI_Unlock|
  03dd4	00000000	 DCD         |??_C@_1CO@IMHIJGEC@?$AAS?$AAP?$AAI?$AA_?$AAU?$AAn?$AAl?$AAo?$AAc?$AAk?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AAl?$AAe?$AAr?$AA?$AN?$AA?6?$AA?$AA@|
  03dd8		 |$M46339|

			 ENDP  ; |SPI_UnlockController|

	EXPORT	|??_C@_1CK@GHEOOPBI@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HA@MKGDMCNG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAi?$AAn@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GM@KCBFONKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CK@BHDJPJPO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_EnableChannel|

  000b0			 AREA	 |.pdata|, PDATA
|$T46363| DCD	|$LN16@SPI_Enable|
	DCD	0x40006f04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@GHEOOPBI@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HA@MKGDMCNG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAi?$AAn@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, " ", 0x0, "N", 0x0, "o", 0x0, "t", 0x0, " ", 0x0, "i"
	DCB	0x0, "n", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "a", 0x0, "c", 0x0, "c"
	DCB	0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "m", 0x0, "o"
	DCB	0x0, "d", 0x0, "e", 0x0, "!", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GM@KCBFONKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, ":"
	DCB	0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o", 0x0, "r"
	DCB	0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " ", 0x0, "c"
	DCB	0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x", 0x0, "t"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m"
	DCB	0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CK@BHDJPJPO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "E", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "C", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  03dd8			 AREA	 |.text|, CODE, ARM

  03dd8		 |SPI_EnableChannel| PROC

; 2025 : {

  03dd8		 |$LN16@SPI_Enable|
  03dd8	e1a0c00d	 mov         r12, sp
  03ddc	e92d0001	 stmdb       sp!, {r0}
  03de0	e92d5000	 stmdb       sp!, {r12, lr}
  03de4	e24dd020	 sub         sp, sp, #0x20
  03de8		 |$M46360|

; 2026 :     BOOL rc = FALSE;

  03de8	e3a03000	 mov         r3, #0
  03dec	e58d3004	 str         r3, [sp, #4]

; 2027 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  03df0	e59d3028	 ldr         r3, [sp, #0x28]
  03df4	e58d3008	 str         r3, [sp, #8]

; 2028 :     SPI_DEVICE *pDevice;
; 2029 : 
; 2030 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_EnableChannel\r\n"));

  03df8	e59f3180	 ldr         r3, [pc, #0x180]
  03dfc	e5933440	 ldr         r3, [r3, #0x440]
  03e00	e3130004	 tst         r3, #4
  03e04	0a000004	 beq         |$LN6@SPI_Enable|
  03e08	e59f0180	 ldr         r0, [pc, #0x180]
  03e0c	eb000000	 bl          NKDbgPrintfW
  03e10	e3a03001	 mov         r3, #1
  03e14	e58d3010	 str         r3, [sp, #0x10]
  03e18	ea000001	 b           |$LN7@SPI_Enable|
  03e1c		 |$LN6@SPI_Enable|
  03e1c	e3a03000	 mov         r3, #0
  03e20	e58d3010	 str         r3, [sp, #0x10]
  03e24		 |$LN7@SPI_Enable|

; 2031 : 	
; 2032 :     // Check if we get correct context
; 2033 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  03e24	e59d3008	 ldr         r3, [sp, #8]
  03e28	e3530000	 cmp         r3, #0
  03e2c	0a000004	 beq         |$LN2@SPI_Enable|
  03e30	e59d3008	 ldr         r3, [sp, #8]
  03e34	e5932000	 ldr         r2, [r3]
  03e38	e59f314c	 ldr         r3, [pc, #0x14C]
  03e3c	e1520003	 cmp         r2, r3
  03e40	0a00000b	 beq         |$LN3@SPI_Enable|
  03e44		 |$LN2@SPI_Enable|

; 2034 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_EnableChannel: "
; 2035 :             L"Incorrect context paramer\r\n"
; 2036 :         ));

  03e44	e59f3134	 ldr         r3, [pc, #0x134]
  03e48	e5933440	 ldr         r3, [r3, #0x440]
  03e4c	e3130001	 tst         r3, #1
  03e50	0a000004	 beq         |$LN8@SPI_Enable|
  03e54	e59f012c	 ldr         r0, [pc, #0x12C]
  03e58	eb000000	 bl          NKDbgPrintfW
  03e5c	e3a03001	 mov         r3, #1
  03e60	e58d3014	 str         r3, [sp, #0x14]
  03e64	ea000001	 b           |$LN9@SPI_Enable|
  03e68		 |$LN8@SPI_Enable|
  03e68	e3a03000	 mov         r3, #0
  03e6c	e58d3014	 str         r3, [sp, #0x14]
  03e70		 |$LN9@SPI_Enable|

; 2037 :         goto cleanUp;

  03e70	ea000030	 b           |$cleanUp$45389|
  03e74		 |$LN3@SPI_Enable|

; 2038 :     }
; 2039 : 	
; 2040 : 	// Check to see if we have exclusive access
; 2041 : 	if (!pInstance->exclusiveAccess)

  03e74	e59d3008	 ldr         r3, [sp, #8]
  03e78	e2833014	 add         r3, r3, #0x14
  03e7c	e5933000	 ldr         r3, [r3]
  03e80	e3530000	 cmp         r3, #0
  03e84	1a00000b	 bne         |$LN1@SPI_Enable|

; 2042 : 	{
; 2043 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_EnableChannel: Not in single access mode!!\r\n"));

  03e88	e59f30f0	 ldr         r3, [pc, #0xF0]
  03e8c	e5933440	 ldr         r3, [r3, #0x440]
  03e90	e3130001	 tst         r3, #1
  03e94	0a000004	 beq         |$LN10@SPI_Enable|
  03e98	e59f00e4	 ldr         r0, [pc, #0xE4]
  03e9c	eb000000	 bl          NKDbgPrintfW
  03ea0	e3a03001	 mov         r3, #1
  03ea4	e58d3018	 str         r3, [sp, #0x18]
  03ea8	ea000001	 b           |$LN11@SPI_Enable|
  03eac		 |$LN10@SPI_Enable|
  03eac	e3a03000	 mov         r3, #0
  03eb0	e58d3018	 str         r3, [sp, #0x18]
  03eb4		 |$LN11@SPI_Enable|

; 2044 : 		goto cleanUp;

  03eb4	ea00001f	 b           |$cleanUp$45389|
  03eb8		 |$LN1@SPI_Enable|

; 2045 : 	}
; 2046 : 
; 2047 :     // Get Device
; 2048 :     pDevice = pInstance->pDevice;

  03eb8	e59d3008	 ldr         r3, [sp, #8]
  03ebc	e2833004	 add         r3, r3, #4
  03ec0	e5933000	 ldr         r3, [r3]
  03ec4	e58d3000	 str         r3, [sp]

; 2049 :     
; 2050 : 	// Set this driver to Active Mode
; 2051 :     SetSPIPower(pDevice, D0);

  03ec8	e3a01000	 mov         r1, #0
  03ecc	e59d0000	 ldr         r0, [sp]
  03ed0	eb000000	 bl          SetSPIPower

; 2052 : 	
; 2053 :     // Enable the channel
; 2054 :     SETREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  03ed4	e59d3008	 ldr         r3, [sp, #8]
  03ed8	e2833010	 add         r3, r3, #0x10
  03edc	e5933000	 ldr         r3, [r3]
  03ee0	e2833008	 add         r3, r3, #8
  03ee4	e5933000	 ldr         r3, [r3]
  03ee8	e3832001	 orr         r2, r3, #1
  03eec	e59d3008	 ldr         r3, [sp, #8]
  03ef0	e2833010	 add         r3, r3, #0x10
  03ef4	e5933000	 ldr         r3, [r3]
  03ef8	e2833008	 add         r3, r3, #8
  03efc	e5832000	 str         r2, [r3]

; 2055 : 	// Assert the chip select
; 2056 :     SETREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, MCSPI_CHCONF_FORCE);

  03f00	e59d3008	 ldr         r3, [sp, #8]
  03f04	e2833010	 add         r3, r3, #0x10
  03f08	e5933000	 ldr         r3, [r3]
  03f0c	e5933000	 ldr         r3, [r3]
  03f10	e3832601	 orr         r2, r3, #1, 12
  03f14	e59d3008	 ldr         r3, [sp, #8]
  03f18	e2833010	 add         r3, r3, #0x10
  03f1c	e5933000	 ldr         r3, [r3]
  03f20	e5832000	 str         r2, [r3]

; 2057 :     
; 2058 : 	// Set this driver to Suspend Mode
; 2059 :     SetSPIPower(pDevice, D4);

  03f24	e3a01004	 mov         r1, #4
  03f28	e59d0000	 ldr         r0, [sp]
  03f2c	eb000000	 bl          SetSPIPower

; 2060 : 	
; 2061 :     // Done
; 2062 :     rc = TRUE;

  03f30	e3a03001	 mov         r3, #1
  03f34	e58d3004	 str         r3, [sp, #4]
  03f38		 |$cleanUp$45389|

; 2063 : 	
; 2064 : cleanUp:
; 2065 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_EnableChannel\r\n"));

  03f38	e59f3040	 ldr         r3, [pc, #0x40]
  03f3c	e5933440	 ldr         r3, [r3, #0x440]
  03f40	e3130004	 tst         r3, #4
  03f44	0a000004	 beq         |$LN12@SPI_Enable|
  03f48	e59f002c	 ldr         r0, [pc, #0x2C]
  03f4c	eb000000	 bl          NKDbgPrintfW
  03f50	e3a03001	 mov         r3, #1
  03f54	e58d301c	 str         r3, [sp, #0x1C]
  03f58	ea000001	 b           |$LN13@SPI_Enable|
  03f5c		 |$LN12@SPI_Enable|
  03f5c	e3a03000	 mov         r3, #0
  03f60	e58d301c	 str         r3, [sp, #0x1C]
  03f64		 |$LN13@SPI_Enable|

; 2066 : 	return rc;	

  03f64	e59d3004	 ldr         r3, [sp, #4]
  03f68	e58d300c	 str         r3, [sp, #0xC]

; 2067 : }

  03f6c	e59d000c	 ldr         r0, [sp, #0xC]
  03f70	e28dd020	 add         sp, sp, #0x20
  03f74	e89d6000	 ldmia       sp, {sp, lr}
  03f78	e12fff1e	 bx          lr
  03f7c		 |$LN17@SPI_Enable|
  03f7c		 |$LN18@SPI_Enable|
  03f7c	00000000	 DCD         |??_C@_1CK@GHEOOPBI@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  03f80		 |$LN19@SPI_Enable|
  03f80	00000000	 DCD         |dpCurSettings|
  03f84		 |$LN20@SPI_Enable|
  03f84	00000000	 DCD         |??_C@_1HA@MKGDMCNG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAi?$AAn@|
  03f88		 |$LN21@SPI_Enable|
  03f88	00000000	 DCD         |??_C@_1GM@KCBFONKD@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr@|
  03f8c		 |$LN22@SPI_Enable|
  03f8c	73706949	 DCD         0x73706949
  03f90		 |$LN23@SPI_Enable|
  03f90	00000000	 DCD         |??_C@_1CK@BHDJPJPO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAE?$AAn?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  03f94		 |$M46361|

			 ENDP  ; |SPI_EnableChannel|

	EXPORT	|??_C@_1CM@FKOCJECG@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HC@NGMDECJJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAi@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@FNPLHJGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@KGBCAFGK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SPI_DisableChannel|

  000b8			 AREA	 |.pdata|, PDATA
|$T46384| DCD	|$LN16@SPI_Disabl|
	DCD	0x40007104

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@FKOCJECG@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HC@NGMDECJJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAi@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, ":", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, "t", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "s", 0x0, "i", 0x0, "n"
	DCB	0x0, "g", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "a", 0x0, "c"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "m"
	DCB	0x0, "o", 0x0, "d", 0x0, "e", 0x0, "!", 0x0, "!", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@FNPLHJGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "x"
	DCB	0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r", 0x0, "a"
	DCB	0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@KGBCAFGK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "D", 0x0, "i"
	DCB	0x0, "s", 0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  03f94			 AREA	 |.text|, CODE, ARM

  03f94		 |SPI_DisableChannel| PROC

; 2078 : {

  03f94		 |$LN16@SPI_Disabl|
  03f94	e1a0c00d	 mov         r12, sp
  03f98	e92d0001	 stmdb       sp!, {r0}
  03f9c	e92d5000	 stmdb       sp!, {r12, lr}
  03fa0	e24dd020	 sub         sp, sp, #0x20
  03fa4		 |$M46381|

; 2079 :     BOOL rc = FALSE;

  03fa4	e3a03000	 mov         r3, #0
  03fa8	e58d3004	 str         r3, [sp, #4]

; 2080 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  03fac	e59d3028	 ldr         r3, [sp, #0x28]
  03fb0	e58d3008	 str         r3, [sp, #8]

; 2081 :     SPI_DEVICE *pDevice;
; 2082 : 
; 2083 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_DisableChannel\r\n"));

  03fb4	e59f3188	 ldr         r3, [pc, #0x188]
  03fb8	e5933440	 ldr         r3, [r3, #0x440]
  03fbc	e3130004	 tst         r3, #4
  03fc0	0a000004	 beq         |$LN6@SPI_Disabl|
  03fc4	e59f0188	 ldr         r0, [pc, #0x188]
  03fc8	eb000000	 bl          NKDbgPrintfW
  03fcc	e3a03001	 mov         r3, #1
  03fd0	e58d3010	 str         r3, [sp, #0x10]
  03fd4	ea000001	 b           |$LN7@SPI_Disabl|
  03fd8		 |$LN6@SPI_Disabl|
  03fd8	e3a03000	 mov         r3, #0
  03fdc	e58d3010	 str         r3, [sp, #0x10]
  03fe0		 |$LN7@SPI_Disabl|

; 2084 : 	
; 2085 :     // Check if we get correct context
; 2086 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  03fe0	e59d3008	 ldr         r3, [sp, #8]
  03fe4	e3530000	 cmp         r3, #0
  03fe8	0a000004	 beq         |$LN2@SPI_Disabl|
  03fec	e59d3008	 ldr         r3, [sp, #8]
  03ff0	e5932000	 ldr         r2, [r3]
  03ff4	e59f3154	 ldr         r3, [pc, #0x154]
  03ff8	e1520003	 cmp         r2, r3
  03ffc	0a00000b	 beq         |$LN3@SPI_Disabl|
  04000		 |$LN2@SPI_Disabl|

; 2087 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DisableChannel: "
; 2088 :             L"Incorrect context paramer\r\n"
; 2089 :         ));

  04000	e59f313c	 ldr         r3, [pc, #0x13C]
  04004	e5933440	 ldr         r3, [r3, #0x440]
  04008	e3130001	 tst         r3, #1
  0400c	0a000004	 beq         |$LN8@SPI_Disabl|
  04010	e59f0134	 ldr         r0, [pc, #0x134]
  04014	eb000000	 bl          NKDbgPrintfW
  04018	e3a03001	 mov         r3, #1
  0401c	e58d3014	 str         r3, [sp, #0x14]
  04020	ea000001	 b           |$LN9@SPI_Disabl|
  04024		 |$LN8@SPI_Disabl|
  04024	e3a03000	 mov         r3, #0
  04028	e58d3014	 str         r3, [sp, #0x14]
  0402c		 |$LN9@SPI_Disabl|

; 2090 :         goto cleanUp;

  0402c	ea000032	 b           |$cleanUp$45416|
  04030		 |$LN3@SPI_Disabl|

; 2091 :     }
; 2092 : 	
; 2093 : 	// Check to see if we have exclusive access
; 2094 : 	if (!pInstance->exclusiveAccess)

  04030	e59d3008	 ldr         r3, [sp, #8]
  04034	e2833014	 add         r3, r3, #0x14
  04038	e5933000	 ldr         r3, [r3]
  0403c	e3530000	 cmp         r3, #0
  04040	1a00000b	 bne         |$LN1@SPI_Disabl|

; 2095 : 	{
; 2096 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DisableChannel: Not in single access mode!!\r\n"));

  04044	e59f30f8	 ldr         r3, [pc, #0xF8]
  04048	e5933440	 ldr         r3, [r3, #0x440]
  0404c	e3130001	 tst         r3, #1
  04050	0a000004	 beq         |$LN10@SPI_Disabl|
  04054	e59f00ec	 ldr         r0, [pc, #0xEC]
  04058	eb000000	 bl          NKDbgPrintfW
  0405c	e3a03001	 mov         r3, #1
  04060	e58d3018	 str         r3, [sp, #0x18]
  04064	ea000001	 b           |$LN11@SPI_Disabl|
  04068		 |$LN10@SPI_Disabl|
  04068	e3a03000	 mov         r3, #0
  0406c	e58d3018	 str         r3, [sp, #0x18]
  04070		 |$LN11@SPI_Disabl|

; 2097 : 		goto cleanUp;

  04070	ea000021	 b           |$cleanUp$45416|
  04074		 |$LN1@SPI_Disabl|

; 2098 : 	}
; 2099 : 
; 2100 :     // Get Device
; 2101 :     pDevice = pInstance->pDevice;

  04074	e59d3008	 ldr         r3, [sp, #8]
  04078	e2833004	 add         r3, r3, #4
  0407c	e5933000	 ldr         r3, [r3]
  04080	e58d3000	 str         r3, [sp]

; 2102 : 	
; 2103 : 	// Set this driver to Active Mode
; 2104 :     SetSPIPower(pDevice, D0);

  04084	e3a01000	 mov         r1, #0
  04088	e59d0000	 ldr         r0, [sp]
  0408c	eb000000	 bl          SetSPIPower

; 2105 : 	
; 2106 : 	// De-assert the chip select
; 2107 :     CLRREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, MCSPI_CHCONF_FORCE);

  04090	e59d3008	 ldr         r3, [sp, #8]
  04094	e2833010	 add         r3, r3, #0x10
  04098	e5933000	 ldr         r3, [r3]
  0409c	e5932000	 ldr         r2, [r3]
  040a0	e3e03601	 mvn         r3, #1, 12
  040a4	e0022003	 and         r2, r2, r3
  040a8	e59d3008	 ldr         r3, [sp, #8]
  040ac	e2833010	 add         r3, r3, #0x10
  040b0	e5933000	 ldr         r3, [r3]
  040b4	e5832000	 str         r2, [r3]

; 2108 :     // Disable the channel
; 2109 :     CLRREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  040b8	e59d3008	 ldr         r3, [sp, #8]
  040bc	e2833010	 add         r3, r3, #0x10
  040c0	e5933000	 ldr         r3, [r3]
  040c4	e2833008	 add         r3, r3, #8
  040c8	e5932000	 ldr         r2, [r3]
  040cc	e3e03001	 mvn         r3, #1
  040d0	e0022003	 and         r2, r2, r3
  040d4	e59d3008	 ldr         r3, [sp, #8]
  040d8	e2833010	 add         r3, r3, #0x10
  040dc	e5933000	 ldr         r3, [r3]
  040e0	e2833008	 add         r3, r3, #8
  040e4	e5832000	 str         r2, [r3]

; 2110 : 
; 2111 : 	// Set this driver to Suspend Mode
; 2112 :     SetSPIPower(pDevice, D4);

  040e8	e3a01004	 mov         r1, #4
  040ec	e59d0000	 ldr         r0, [sp]
  040f0	eb000000	 bl          SetSPIPower

; 2113 : 	
; 2114 :     // Done
; 2115 :     rc = TRUE;

  040f4	e3a03001	 mov         r3, #1
  040f8	e58d3004	 str         r3, [sp, #4]
  040fc		 |$cleanUp$45416|

; 2116 : 	
; 2117 : cleanUp:
; 2118 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_DisableChannel\r\n"));

  040fc	e59f3040	 ldr         r3, [pc, #0x40]
  04100	e5933440	 ldr         r3, [r3, #0x440]
  04104	e3130004	 tst         r3, #4
  04108	0a000004	 beq         |$LN12@SPI_Disabl|
  0410c	e59f002c	 ldr         r0, [pc, #0x2C]
  04110	eb000000	 bl          NKDbgPrintfW
  04114	e3a03001	 mov         r3, #1
  04118	e58d301c	 str         r3, [sp, #0x1C]
  0411c	ea000001	 b           |$LN13@SPI_Disabl|
  04120		 |$LN12@SPI_Disabl|
  04120	e3a03000	 mov         r3, #0
  04124	e58d301c	 str         r3, [sp, #0x1C]
  04128		 |$LN13@SPI_Disabl|

; 2119 : 	return rc;	

  04128	e59d3004	 ldr         r3, [sp, #4]
  0412c	e58d300c	 str         r3, [sp, #0xC]

; 2120 : }

  04130	e59d000c	 ldr         r0, [sp, #0xC]
  04134	e28dd020	 add         sp, sp, #0x20
  04138	e89d6000	 ldmia       sp, {sp, lr}
  0413c	e12fff1e	 bx          lr
  04140		 |$LN17@SPI_Disabl|
  04140		 |$LN18@SPI_Disabl|
  04140	00000000	 DCD         |??_C@_1CM@FKOCJECG@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  04144		 |$LN19@SPI_Disabl|
  04144	00000000	 DCD         |dpCurSettings|
  04148		 |$LN20@SPI_Disabl|
  04148	00000000	 DCD         |??_C@_1HC@NGMDECJJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAN?$AAo?$AAt?$AA?5?$AAi@|
  0414c		 |$LN21@SPI_Disabl|
  0414c	00000000	 DCD         |??_C@_1GO@FNPLHJGK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr@|
  04150		 |$LN22@SPI_Disabl|
  04150	73706949	 DCD         0x73706949
  04154		 |$LN23@SPI_Disabl|
  04154	00000000	 DCD         |??_C@_1CM@KGBCAFGK@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAD?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAC?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  04158		 |$M46382|

			 ENDP  ; |SPI_DisableChannel|

	EXPORT	|??_C@_1DE@JMAHJFIP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@NKOBOHOD@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@IGLIIDFJ@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FG@HABLGLHP@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAC?$AAO?$AAN?$AAT?$AAE?$AAX?$AAT?$AA_?$AAR?$AAE?$AAS?$AAT?$AAO?$AAR?$AAE?$AA_?$AAN?$AAO?$AAT?$AAI?$AAF@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@NOJGIHPE@?$AA?4?$AA?4?$AA?4?$AAS?$AAP?$AAI?$AA?$CI?$AAo?$AAl?$AAd?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAo?$AAl?$AAt?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAp?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EK@EBLGHPPL@?$AA?4?$AA?4?$AA?4?$AAS?$AAP?$AAI?$AA?$CI?$AAn?$AAe?$AAw?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAo?$AAl?$AAt?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAp?$AA?$DN@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GI@HOCAOFMI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAD?$AAV?$AAF?$AAS?$AA?5?$AAN?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAf?$AAf?$AAI?$AAn?$AAf?$AAo?$AA?$DN?$AA0@| [ DATA ] ; `string'
	EXPORT	|??_C@_1OG@BBMBGGPP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@| [ DATA ] ; `string'
	EXPORT	|GetCurrentProcessId|
	EXPORT	|??_C@_1GE@NMIDEKOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1IC@KKFHJLNO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| [ DATA ] ; `string'
	EXPORT	|SPI_IOControl|
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|memcmp|
	IMPORT	|SetLastError|
	IMPORT	|GetCallerProcess|
	IMPORT	|__C_specific_handler|

  000c0			 AREA	 |.pdata|, PDATA
|$T46464| DCD	|$LN126@SPI_IOCont|
	DCD	0xc002bf05
|$T46466| DCD	|$LN113@SPI_IOCont|
	DCD	0x40000502
|$T46468| DCD	|$LN106@SPI_IOCont|
	DCD	0x40000502
|$T46470| DCD	|$LN99@SPI_IOCont|
	DCD	0x40000502
|$T46472| DCD	|$LN92@SPI_IOCont|
	DCD	0x40002a02

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@JMAHJFIP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "="
	DCB	0x0, " ", 0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "x", 0x0, "x", 0x0, "x", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, ".", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@NKOBOHOD@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "s", 0x0, "p", 0x0, "i", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@IGLIIDFJ@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "s", 0x0, "p", 0x0, "i", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FG@HABLGLHP@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAC?$AAO?$AAN?$AAT?$AAE?$AAX?$AAT?$AA_?$AAR?$AAE?$AAS?$AAT?$AAO?$AAR?$AAE?$AA_?$AAN?$AAO?$AAT?$AAI?$AAF@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_", 0x0, "C", 0x0, "O"
	DCB	0x0, "N", 0x0, "T", 0x0, "E", 0x0, "X", 0x0, "T", 0x0, "_"
	DCB	0x0, "R", 0x0, "E", 0x0, "S", 0x0, "T", 0x0, "O", 0x0, "R"
	DCB	0x0, "E", 0x0, "_", 0x0, "N", 0x0, "O", 0x0, "T", 0x0, "I"
	DCB	0x0, "F", 0x0, "Y", 0x0, " ", 0x0, "F", 0x0, "A", 0x0, "I"
	DCB	0x0, "L", 0x0, "E", 0x0, "D", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@NOJGIHPE@?$AA?4?$AA?4?$AA?4?$AAS?$AAP?$AAI?$AA?$CI?$AAo?$AAl?$AAd?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAo?$AAl?$AAt?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAp?$AA?$DN@| DCB "."
	DCB	0x0, ".", 0x0, ".", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, "("
	DCB	0x0, "o", 0x0, "l", 0x0, "d", 0x0, ")", 0x0, ":", 0x0, " "
	DCB	0x0, "v", 0x0, "o", 0x0, "l", 0x0, "t", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "p"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@EBLGHPPL@?$AA?4?$AA?4?$AA?4?$AAS?$AAP?$AAI?$AA?$CI?$AAn?$AAe?$AAw?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAo?$AAl?$AAt?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAp?$AA?$DN@| DCB "."
	DCB	0x0, ".", 0x0, ".", 0x0, "S", 0x0, "P", 0x0, "I", 0x0, "("
	DCB	0x0, "n", 0x0, "e", 0x0, "w", 0x0, ")", 0x0, ":", 0x0, " "
	DCB	0x0, "v", 0x0, "o", 0x0, "l", 0x0, "t", 0x0, "D", 0x0, "o"
	DCB	0x0, "m", 0x0, "a", 0x0, "i", 0x0, "n", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, ",", 0x0, " ", 0x0, "o", 0x0, "p", 0x0, "p"
	DCB	0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GI@HOCAOFMI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAD?$AAV?$AAF?$AAS?$AA?5?$AAN?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAf?$AAf?$AAI?$AAn?$AAf?$AAo?$AA?$DN?$AA0@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "V"
	DCB	0x0, "F", 0x0, "S", 0x0, " ", 0x0, "N", 0x0, "o", 0x0, "t"
	DCB	0x0, "i", 0x0, "f", 0x0, "i", 0x0, "c", 0x0, "a", 0x0, "t"
	DCB	0x0, "i", 0x0, "o", 0x0, "n", 0x0, ":", 0x0, " ", 0x0, "f"
	DCB	0x0, "f", 0x0, "I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, "="
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X"
	DCB	0x0, ",", 0x0, " ", 0x0, "d", 0x0, "w", 0x0, "C", 0x0, "o"
	DCB	0x0, "u", 0x0, "n", 0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1OG@BBMBGGPP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "O", 0x0, "C"
	DCB	0x0, "T", 0x0, "L", 0x0, "_", 0x0, "D", 0x0, "D", 0x0, "K"
	DCB	0x0, "_", 0x0, "G", 0x0, "E", 0x0, "T", 0x0, "_", 0x0, "D"
	DCB	0x0, "R", 0x0, "I", 0x0, "V", 0x0, "E", 0x0, "R", 0x0, "_"
	DCB	0x0, "I", 0x0, "F", 0x0, "C", 0x0, " ", 0x0, "c", 0x0, "a"
	DCB	0x0, "n", 0x0, " ", 0x0, "b", 0x0, "e", 0x0, " ", 0x0, "c"
	DCB	0x0, "a", 0x0, "l", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "o", 0x0, "n", 0x0, "l", 0x0, "y", 0x0, " ", 0x0, "f"
	DCB	0x0, "r", 0x0, "o", 0x0, "m", 0x0, " ", 0x0, "d", 0x0, "e"
	DCB	0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, " ", 0x0, "p"
	DCB	0x0, "r", 0x0, "o", 0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s"
	DCB	0x0, " ", 0x0, "(", 0x0, "c", 0x0, "a", 0x0, "l", 0x0, "l"
	DCB	0x0, "e", 0x0, "r", 0x0, " ", 0x0, "p", 0x0, "r", 0x0, "o"
	DCB	0x0, "c", 0x0, "e", 0x0, "s", 0x0, "s", 0x0, " ", 0x0, "i"
	DCB	0x0, "d", 0x0, " ", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@NMIDEKOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, ":", 0x0, " ", 0x0, "I", 0x0, "n", 0x0, "c"
	DCB	0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t"
	DCB	0x0, " ", 0x0, "c", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "e"
	DCB	0x0, "x", 0x0, "t", 0x0, " ", 0x0, "p", 0x0, "a", 0x0, "r"
	DCB	0x0, "a", 0x0, "m", 0x0, "e", 0x0, "r", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IC@KKFHJLNO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@| DCB "+"
	DCB	0x0, "S", 0x0, "P", 0x0, "I", 0x0, "_", 0x0, "I", 0x0, "O"
	DCB	0x0, "C", 0x0, "o", 0x0, "n", 0x0, "t", 0x0, "r", 0x0, "o"
	DCB	0x0, "l", 0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0"
	DCB	0x0, "8", 0x0, "x", 0x0, ",", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ",", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ",", 0x0, " "
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T46462| DCD	0x4
	DCD	|$LN117@SPI_IOCont|
	DCD	|$LN118@SPI_IOCont|
	DCD	|$LN113@SPI_IOCont|
	DCD	|$LN114@SPI_IOCont|
	DCD	|$LN110@SPI_IOCont|
	DCD	|$LN111@SPI_IOCont|
	DCD	|$LN106@SPI_IOCont|
	DCD	|$LN107@SPI_IOCont|
	DCD	|$LN103@SPI_IOCont|
	DCD	|$LN104@SPI_IOCont|
	DCD	|$LN99@SPI_IOCont|
	DCD	|$LN100@SPI_IOCont|
	DCD	|$LN96@SPI_IOCont|
	DCD	|$LN97@SPI_IOCont|
	DCD	|$LN92@SPI_IOCont|
	DCD	|$LN93@SPI_IOCont|
; Function compile flags: /Odtp

  04158			 AREA	 |.text|, CODE, ARM

  04158	00000000	 DCD         |__C_specific_handler|
  0415c	00000000	 DCD         |$T46462|

  04160		 |SPI_IOControl| PROC

; 2131 : ) {

  04160		 |$LN126@SPI_IOCont|
  04160	e1a0c00d	 mov         r12, sp
  04164	e92d000f	 stmdb       sp!, {r0 - r3}
  04168	e92d5800	 stmdb       sp!, {r11, r12, lr}
  0416c	e28db00c	 add         r11, sp, #0xC
  04170	e24dd0e4	 sub         sp, sp, #0xE4
  04174		 |$LN124@SPI_IOCont|

; 2132 :     BOOL bRetVal = FALSE;

  04174	e3a03000	 mov         r3, #0
  04178	e50b30d4	 str         r3, [r11, #-0xD4]

; 2133 :     SPI_DEVICE *pDevice = NULL;

  0417c	e3a03000	 mov         r3, #0
  04180	e50b30e0	 str         r3, [r11, #-0xE0]

; 2134 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;

  04184	e59b3000	 ldr         r3, [r11]
  04188	e50b30dc	 str         r3, [r11, #-0xDC]

; 2135 :     DEVICE_IFC_SPI ifc;
; 2136 :     IOCTL_SPI_CONFIGURE_IN *pConfig;
; 2137 : 
; 2138 :     DEBUGMSG(ZONE_FUNCTION, (
; 2139 :         L"+SPI_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 2140 :         context, dwCode, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 2141 :     ));

  0418c	e59f3b1c	 ldr         r3, [pc, #0xB1C]
  04190	e5933440	 ldr         r3, [r3, #0x440]
  04194	e3130004	 tst         r3, #4
  04198	0a00000f	 beq         |$LN63@SPI_IOCont|
  0419c	e59b3018	 ldr         r3, [r11, #0x18]
  041a0	e58d300c	 str         r3, [sp, #0xC]
  041a4	e59b3014	 ldr         r3, [r11, #0x14]
  041a8	e58d3008	 str         r3, [sp, #8]
  041ac	e59b3010	 ldr         r3, [r11, #0x10]
  041b0	e58d3004	 str         r3, [sp, #4]
  041b4	e59b300c	 ldr         r3, [r11, #0xC]
  041b8	e58d3000	 str         r3, [sp]
  041bc	e59b3008	 ldr         r3, [r11, #8]
  041c0	e59b2004	 ldr         r2, [r11, #4]
  041c4	e59b1000	 ldr         r1, [r11]
  041c8	e59f0b6c	 ldr         r0, [pc, #0xB6C]
  041cc	eb000000	 bl          NKDbgPrintfW
  041d0	e3a03001	 mov         r3, #1
  041d4	e50b3078	 str         r3, [r11, #-0x78]
  041d8	ea000001	 b           |$LN64@SPI_IOCont|
  041dc		 |$LN63@SPI_IOCont|
  041dc	e3a03000	 mov         r3, #0
  041e0	e50b3078	 str         r3, [r11, #-0x78]
  041e4		 |$LN64@SPI_IOCont|

; 2142 : 
; 2143 :     // Check if we get correct context
; 2144 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  041e4	e51b30dc	 ldr         r3, [r11, #-0xDC]
  041e8	e3530000	 cmp         r3, #0
  041ec	0a000004	 beq         |$LN59@SPI_IOCont|
  041f0	e51b30dc	 ldr         r3, [r11, #-0xDC]
  041f4	e5932000	 ldr         r2, [r3]
  041f8	e59f3b38	 ldr         r3, [pc, #0xB38]
  041fc	e1520003	 cmp         r2, r3
  04200	0a00000b	 beq         |$LN60@SPI_IOCont|
  04204		 |$LN59@SPI_IOCont|

; 2145 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_IOControl: "
; 2146 :             L"Incorrect context paramer\r\n"
; 2147 :         ));

  04204	e59f3aa4	 ldr         r3, [pc, #0xAA4]
  04208	e5933440	 ldr         r3, [r3, #0x440]
  0420c	e3130001	 tst         r3, #1
  04210	0a000004	 beq         |$LN65@SPI_IOCont|
  04214	e59f0b18	 ldr         r0, [pc, #0xB18]
  04218	eb000000	 bl          NKDbgPrintfW
  0421c	e3a03001	 mov         r3, #1
  04220	e50b3074	 str         r3, [r11, #-0x74]
  04224	ea000001	 b           |$LN66@SPI_IOCont|
  04228		 |$LN65@SPI_IOCont|
  04228	e3a03000	 mov         r3, #0
  0422c	e50b3074	 str         r3, [r11, #-0x74]
  04230		 |$LN66@SPI_IOCont|

; 2148 :         goto clean;

  04230	ea000277	 b           |$clean$45457|
  04234		 |$LN60@SPI_IOCont|

; 2149 :     }
; 2150 :     
; 2151 :     //Get Device
; 2152 :     pDevice = pInstance->pDevice;

  04234	e51b30dc	 ldr         r3, [r11, #-0xDC]
  04238	e2833004	 add         r3, r3, #4
  0423c	e5933000	 ldr         r3, [r3]
  04240	e50b30e0	 str         r3, [r11, #-0xE0]

; 2153 : 
; 2154 :     switch (dwCode) {

  04244	e59b3004	 ldr         r3, [r11, #4]
  04248	e50b3070	 str         r3, [r11, #-0x70]
  0424c	e51b2070	 ldr         r2, [r11, #-0x70]
  04250	e59f3ad8	 ldr         r3, [pc, #0xAD8]
  04254	e1520003	 cmp         r2, r3
  04258	8a000031	 bhi         |$LN85@SPI_IOCont|
  0425c	e51b2070	 ldr         r2, [r11, #-0x70]
  04260	e59f3ac8	 ldr         r3, [pc, #0xAC8]
  04264	e1520003	 cmp         r2, r3
  04268	0a00013c	 beq         |$LN26@SPI_IOCont|
  0426c	e51b2070	 ldr         r2, [r11, #-0x70]
  04270	e59f3ab4	 ldr         r3, [pc, #0xAB4]
  04274	e1520003	 cmp         r2, r3
  04278	8a00001b	 bhi         |$LN86@SPI_IOCont|
  0427c	e51b2070	 ldr         r2, [r11, #-0x70]
  04280	e59f3aa4	 ldr         r3, [pc, #0xAA4]
  04284	e1520003	 cmp         r2, r3
  04288	0a000100	 beq         |$LN35@SPI_IOCont|
  0428c	e51b2070	 ldr         r2, [r11, #-0x70]
  04290	e59f3a90	 ldr         r3, [pc, #0xA90]
  04294	e1520003	 cmp         r2, r3
  04298	8a00000e	 bhi         |$LN87@SPI_IOCont|
  0429c	e51b2070	 ldr         r2, [r11, #-0x70]
  042a0	e59f3a80	 ldr         r3, [pc, #0xA80]
  042a4	e1520003	 cmp         r2, r3
  042a8	0a0000c0	 beq         |$LN43@SPI_IOCont|
  042ac	e51b2070	 ldr         r2, [r11, #-0x70]
  042b0	e3a03822	 mov         r3, #0x22, 16
  042b4	e3833b01	 orr         r3, r3, #1, 22
  042b8	e1520003	 cmp         r2, r3
  042bc	0a00003d	 beq         |$LN56@SPI_IOCont|
  042c0	e51b2070	 ldr         r2, [r11, #-0x70]
  042c4	e3a03822	 mov         r3, #0x22, 16
  042c8	e3833b02	 orr         r3, r3, #2, 22
  042cc	e1520003	 cmp         r2, r3
  042d0	0a00009a	 beq         |$LN47@SPI_IOCont|
  042d4	ea000246	 b           |$LN1@SPI_IOCont|
  042d8		 |$LN87@SPI_IOCont|
  042d8	e51b2070	 ldr         r2, [r11, #-0x70]
  042dc	e59f3a40	 ldr         r3, [pc, #0xA40]
  042e0	e1520003	 cmp         r2, r3
  042e4	0a0000cd	 beq         |$LN39@SPI_IOCont|
  042e8	ea000241	 b           |$LN1@SPI_IOCont|
  042ec		 |$LN86@SPI_IOCont|
  042ec	e51b2070	 ldr         r2, [r11, #-0x70]
  042f0	e3a03822	 mov         r3, #0x22, 16
  042f4	e3833e81	 orr         r3, r3, #0x81, 28
  042f8	e1520003	 cmp         r2, r3
  042fc	0a0000fa	 beq         |$LN31@SPI_IOCont|
  04300	e51b2070	 ldr         r2, [r11, #-0x70]
  04304	e59f3a14	 ldr         r3, [pc, #0xA14]
  04308	e1520003	 cmp         r2, r3
  0430c	0a0000fc	 beq         |$LN30@SPI_IOCont|
  04310	e51b2070	 ldr         r2, [r11, #-0x70]
  04314	e59f3a00	 ldr         r3, [pc, #0xA00]
  04318	e1520003	 cmp         r2, r3
  0431c	0a000109	 beq         |$LN27@SPI_IOCont|
  04320	ea000233	 b           |$LN1@SPI_IOCont|
  04324		 |$LN85@SPI_IOCont|
  04324	e51b2070	 ldr         r2, [r11, #-0x70]
  04328	e59f39e8	 ldr         r3, [pc, #0x9E8]
  0432c	e1520003	 cmp         r2, r3
  04330	8a000012	 bhi         |$LN88@SPI_IOCont|
  04334	e51b2070	 ldr         r2, [r11, #-0x70]
  04338	e59f39d8	 ldr         r3, [pc, #0x9D8]
  0433c	e1520003	 cmp         r2, r3
  04340	0a0001e6	 beq         |$LN9@SPI_IOCont|
  04344	e51b2070	 ldr         r2, [r11, #-0x70]
  04348	e3a03822	 mov         r3, #0x22, 16
  0434c	e3833e82	 orr         r3, r3, #0x82, 28
  04350	e1520003	 cmp         r2, r3
  04354	0a000107	 beq         |$LN25@SPI_IOCont|
  04358	e51b2070	 ldr         r2, [r11, #-0x70]
  0435c	e3a03832	 mov         r3, #0x32, 16
  04360	e3833a01	 orr         r3, r3, #1, 20
  04364	e1520003	 cmp         r2, r3
  04368	0a000198	 beq         |$LN16@SPI_IOCont|
  0436c	e51b2070	 ldr         r2, [r11, #-0x70]
  04370	e59f399c	 ldr         r3, [pc, #0x99C]
  04374	e1520003	 cmp         r2, r3
  04378	0a000202	 beq         |$LN4@SPI_IOCont|
  0437c	ea00021c	 b           |$LN1@SPI_IOCont|
  04380		 |$LN88@SPI_IOCont|
  04380	e51b2070	 ldr         r2, [r11, #-0x70]
  04384	e59f3984	 ldr         r3, [pc, #0x984]
  04388	e1520003	 cmp         r2, r3
  0438c	0a0001b4	 beq         |$LN13@SPI_IOCont|
  04390	e51b2070	 ldr         r2, [r11, #-0x70]
  04394	e3a03112	 mov         r3, #0x12, 2
  04398	e3833b82	 orr         r3, r3, #0x82, 22
  0439c	e1520003	 cmp         r2, r3
  043a0	0a0000fa	 beq         |$LN24@SPI_IOCont|
  043a4	e51b2070	 ldr         r2, [r11, #-0x70]
  043a8	e59f395c	 ldr         r3, [pc, #0x95C]
  043ac	e1520003	 cmp         r2, r3
  043b0	0a000170	 beq         |$LN19@SPI_IOCont|
  043b4	ea00020e	 b           |$LN1@SPI_IOCont|
  043b8		 |$LN56@SPI_IOCont|

; 2155 :     case IOCTL_DDK_GET_DRIVER_IFC:
; 2156 :         // We can give interface only to our peer in device process
; 2157 :         if (GetCurrentProcessId() != (DWORD)GetCallerProcess()) {

  043b8	eb000000	 bl          GetCurrentProcessId
  043bc	e50b006c	 str         r0, [r11, #-0x6C]
  043c0	eb000000	 bl          GetCallerProcess
  043c4	e50b0068	 str         r0, [r11, #-0x68]
  043c8	e51b206c	 ldr         r2, [r11, #-0x6C]
  043cc	e51b3068	 ldr         r3, [r11, #-0x68]
  043d0	e1520003	 cmp         r2, r3
  043d4	0a000010	 beq         |$LN55@SPI_IOCont|

; 2158 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_IOControl: "
; 2159 :                 L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 2160 :                 L"device process (caller process id 0x%08x)\r\n",
; 2161 :                 GetCallerProcess()
; 2162 :             ));

  043d8	e59f38d0	 ldr         r3, [pc, #0x8D0]
  043dc	e5933440	 ldr         r3, [r3, #0x440]
  043e0	e3130001	 tst         r3, #1
  043e4	0a000007	 beq         |$LN67@SPI_IOCont|
  043e8	eb000000	 bl          GetCallerProcess
  043ec	e50b0064	 str         r0, [r11, #-0x64]
  043f0	e51b1064	 ldr         r1, [r11, #-0x64]
  043f4	e59f090c	 ldr         r0, [pc, #0x90C]
  043f8	eb000000	 bl          NKDbgPrintfW
  043fc	e3a03001	 mov         r3, #1
  04400	e50b3060	 str         r3, [r11, #-0x60]
  04404	ea000001	 b           |$LN68@SPI_IOCont|
  04408		 |$LN67@SPI_IOCont|
  04408	e3a03000	 mov         r3, #0
  0440c	e50b3060	 str         r3, [r11, #-0x60]
  04410		 |$LN68@SPI_IOCont|

; 2163 :             SetLastError(ERROR_ACCESS_DENIED);

  04410	e3a00005	 mov         r0, #5
  04414	eb000000	 bl          SetLastError

; 2164 :             goto clean;

  04418	ea0001fd	 b           |$clean$45457|
  0441c		 |$LN55@SPI_IOCont|

; 2165 :         }
; 2166 :         // Check input parameters
; 2167 :         if (pInBuffer == NULL || inSize < sizeof(GUID)) {

  0441c	e59b3008	 ldr         r3, [r11, #8]
  04420	e3530000	 cmp         r3, #0
  04424	0a000002	 beq         |$LN53@SPI_IOCont|
  04428	e59b300c	 ldr         r3, [r11, #0xC]
  0442c	e3530010	 cmp         r3, #0x10
  04430	2a000002	 bcs         |$LN54@SPI_IOCont|
  04434		 |$LN53@SPI_IOCont|

; 2168 :             SetLastError(ERROR_INVALID_PARAMETER);

  04434	e3a00057	 mov         r0, #0x57
  04438	eb000000	 bl          SetLastError

; 2169 :             break;

  0443c	ea0001f4	 b           |$LN57@SPI_IOCont|
  04440		 |$LN54@SPI_IOCont|

; 2170 :         }
; 2171 :         if (IsEqualGUID(pInBuffer, &DEVICE_IFC_SPI_GUID)) {

  04440	e3a02010	 mov         r2, #0x10
  04444	e59f18b8	 ldr         r1, [pc, #0x8B8]
  04448	e59b0008	 ldr         r0, [r11, #8]
  0444c	eb000000	 bl          memcmp
  04450	e50b005c	 str         r0, [r11, #-0x5C]
  04454	e51b305c	 ldr         r3, [r11, #-0x5C]
  04458	e3530000	 cmp         r3, #0
  0445c	1a000034	 bne         |$LN52@SPI_IOCont|

; 2172 :             if (pOutSize != NULL) *pOutSize = sizeof(DEVICE_IFC_SPI);

  04460	e59b3018	 ldr         r3, [r11, #0x18]
  04464	e3530000	 cmp         r3, #0
  04468	0a000002	 beq         |$LN51@SPI_IOCont|
  0446c	e59b2018	 ldr         r2, [r11, #0x18]
  04470	e3a03030	 mov         r3, #0x30
  04474	e5823000	 str         r3, [r2]
  04478		 |$LN51@SPI_IOCont|

; 2173 :             if (pOutBuffer == NULL || outSize < sizeof(DEVICE_IFC_SPI)) {

  04478	e59b3010	 ldr         r3, [r11, #0x10]
  0447c	e3530000	 cmp         r3, #0
  04480	0a000002	 beq         |$LN49@SPI_IOCont|
  04484	e59b3014	 ldr         r3, [r11, #0x14]
  04488	e3530030	 cmp         r3, #0x30
  0448c	2a000002	 bcs         |$LN50@SPI_IOCont|
  04490		 |$LN49@SPI_IOCont|

; 2174 :                 SetLastError(ERROR_INVALID_PARAMETER);

  04490	e3a00057	 mov         r0, #0x57
  04494	eb000000	 bl          SetLastError

; 2175 :                 break;

  04498	ea0001dd	 b           |$LN57@SPI_IOCont|
  0449c		 |$LN50@SPI_IOCont|

; 2176 :             }
; 2177 :             ifc.context = context;

  0449c	e59b3000	 ldr         r3, [r11]
  044a0	e50b30d0	 str         r3, [r11, #-0xD0]

; 2178 :             ifc.pfnConfigure = SPI_Configure;

  044a4	e59f3854	 ldr         r3, [pc, #0x854]
  044a8	e50b30cc	 str         r3, [r11, #-0xCC]

; 2179 :             ifc.pfnRead = SPI_Read;

  044ac	e59f3848	 ldr         r3, [pc, #0x848]
  044b0	e50b30c8	 str         r3, [r11, #-0xC8]

; 2180 :             ifc.pfnWrite = SPI_Write;

  044b4	e59f383c	 ldr         r3, [pc, #0x83C]
  044b8	e50b30c4	 str         r3, [r11, #-0xC4]

; 2181 :             ifc.pfnWriteRead = SPI_WriteRead;

  044bc	e59f3830	 ldr         r3, [pc, #0x830]
  044c0	e50b30c0	 str         r3, [r11, #-0xC0]

; 2182 :             ifc.pfnAsyncWriteRead = SPI_AsyncWriteRead;

  044c4	e59f3824	 ldr         r3, [pc, #0x824]
  044c8	e50b30ac	 str         r3, [r11, #-0xAC]

; 2183 :             ifc.pfnWaitForAsyncWriteReadComplete = SPI_WaitForAsyncWriteReadComplete;

  044cc	e59f3818	 ldr         r3, [pc, #0x818]
  044d0	e50b30a8	 str         r3, [r11, #-0xA8]

; 2184 :             ifc.pfnSetSlaveMode = SPI_SetSlaveMode;

  044d4	e59f380c	 ldr         r3, [pc, #0x80C]
  044d8	e50b30a4	 str         r3, [r11, #-0xA4]

; 2185 :             ifc.pfnLockController = SPI_LockController;

  044dc	e59f3800	 ldr         r3, [pc, #0x800]
  044e0	e50b30bc	 str         r3, [r11, #-0xBC]

; 2186 :             ifc.pfnUnlockController = SPI_UnlockController;

  044e4	e59f37f4	 ldr         r3, [pc, #0x7F4]
  044e8	e50b30b8	 str         r3, [r11, #-0xB8]

; 2187 :             ifc.pfnEnableChannel = SPI_EnableChannel;

  044ec	e59f37e8	 ldr         r3, [pc, #0x7E8]
  044f0	e50b30b4	 str         r3, [r11, #-0xB4]

; 2188 :             ifc.pfnDisableChannel = SPI_DisableChannel;

  044f4	e59f37dc	 ldr         r3, [pc, #0x7DC]
  044f8	e50b30b0	 str         r3, [r11, #-0xB0]

; 2189 :             if (!CeSafeCopyMemory(pOutBuffer, &ifc, sizeof(DEVICE_IFC_SPI))) {

  044fc	e3a02030	 mov         r2, #0x30
  04500	e24b10d0	 sub         r1, r11, #0xD0
  04504	e59b0010	 ldr         r0, [r11, #0x10]
  04508	eb000000	 bl          CeSafeCopyMemory
  0450c	e50b0058	 str         r0, [r11, #-0x58]
  04510	e51b3058	 ldr         r3, [r11, #-0x58]
  04514	e3530000	 cmp         r3, #0
  04518	1a000002	 bne         |$LN48@SPI_IOCont|

; 2190 :                 SetLastError(ERROR_INVALID_PARAMETER);

  0451c	e3a00057	 mov         r0, #0x57
  04520	eb000000	 bl          SetLastError

; 2191 :                 break;

  04524	ea0001ba	 b           |$LN57@SPI_IOCont|
  04528		 |$LN48@SPI_IOCont|

; 2192 :             }
; 2193 :             bRetVal = TRUE;

  04528	e3a03001	 mov         r3, #1
  0452c	e50b30d4	 str         r3, [r11, #-0xD4]

; 2194 :             break;

  04530	ea0001b7	 b           |$LN57@SPI_IOCont|
  04534		 |$LN52@SPI_IOCont|

; 2195 :         }
; 2196 :         SetLastError(ERROR_INVALID_PARAMETER);

  04534	e3a00057	 mov         r0, #0x57
  04538	eb000000	 bl          SetLastError

; 2197 :         break;

  0453c	ea0001b4	 b           |$LN57@SPI_IOCont|
  04540		 |$LN47@SPI_IOCont|

; 2198 :         
; 2199 :     case IOCTL_SPI_CONFIGURE:
; 2200 :         if (pOutSize != NULL) *pOutSize = sizeof(DWORD);

  04540	e59b3018	 ldr         r3, [r11, #0x18]
  04544	e3530000	 cmp         r3, #0
  04548	0a000002	 beq         |$LN46@SPI_IOCont|
  0454c	e59b2018	 ldr         r2, [r11, #0x18]
  04550	e3a03004	 mov         r3, #4
  04554	e5823000	 str         r3, [r2]
  04558		 |$LN46@SPI_IOCont|

; 2201 :         if (pInBuffer == NULL || inSize < sizeof(IOCTL_SPI_CONFIGURE_IN)) {

  04558	e59b3008	 ldr         r3, [r11, #8]
  0455c	e3530000	 cmp         r3, #0
  04560	0a000002	 beq         |$LN44@SPI_IOCont|
  04564	e59b300c	 ldr         r3, [r11, #0xC]
  04568	e3530008	 cmp         r3, #8
  0456c	2a000002	 bcs         |$LN45@SPI_IOCont|
  04570		 |$LN44@SPI_IOCont|

; 2202 :             SetLastError(ERROR_INVALID_PARAMETER);

  04570	e3a00057	 mov         r0, #0x57
  04574	eb000000	 bl          SetLastError

; 2203 :             break;

  04578	ea0001a5	 b           |$LN57@SPI_IOCont|
  0457c		 |$LN45@SPI_IOCont|

; 2204 :         }
; 2205 : 
; 2206 :         pConfig = (IOCTL_SPI_CONFIGURE_IN*) pInBuffer;

  0457c	e59b3008	 ldr         r3, [r11, #8]
  04580	e50b30d8	 str         r3, [r11, #-0xD8]

; 2207 : 
; 2208 :         bRetVal = SPI_Configure(context, pConfig->address, pConfig->config);

  04584	e51b30d8	 ldr         r3, [r11, #-0xD8]
  04588	e2833004	 add         r3, r3, #4
  0458c	e5932000	 ldr         r2, [r3]
  04590	e51b30d8	 ldr         r3, [r11, #-0xD8]
  04594	e5931000	 ldr         r1, [r3]
  04598	e59b0000	 ldr         r0, [r11]
  0459c	eb000000	 bl          SPI_Configure
  045a0	e50b0054	 str         r0, [r11, #-0x54]
  045a4	e51b3054	 ldr         r3, [r11, #-0x54]
  045a8	e50b30d4	 str         r3, [r11, #-0xD4]

; 2209 :         break;

  045ac	ea000198	 b           |$LN57@SPI_IOCont|
  045b0		 |$LN43@SPI_IOCont|

; 2210 :     
; 2211 :     case IOCTL_SPI_WRITEREAD:
; 2212 :         if (pOutSize != NULL) *pOutSize = inSize;

  045b0	e59b3018	 ldr         r3, [r11, #0x18]
  045b4	e3530000	 cmp         r3, #0
  045b8	0a000002	 beq         |$LN42@SPI_IOCont|
  045bc	e59b200c	 ldr         r2, [r11, #0xC]
  045c0	e59b3018	 ldr         r3, [r11, #0x18]
  045c4	e5832000	 str         r2, [r3]
  045c8		 |$LN42@SPI_IOCont|

; 2213 :         if (pInBuffer == NULL || pOutBuffer == NULL || inSize != outSize ) {

  045c8	e59b3008	 ldr         r3, [r11, #8]
  045cc	e3530000	 cmp         r3, #0
  045d0	0a000006	 beq         |$LN40@SPI_IOCont|
  045d4	e59b3010	 ldr         r3, [r11, #0x10]
  045d8	e3530000	 cmp         r3, #0
  045dc	0a000003	 beq         |$LN40@SPI_IOCont|
  045e0	e59b200c	 ldr         r2, [r11, #0xC]
  045e4	e59b3014	 ldr         r3, [r11, #0x14]
  045e8	e1520003	 cmp         r2, r3
  045ec	0a000002	 beq         |$LN41@SPI_IOCont|
  045f0		 |$LN40@SPI_IOCont|

; 2214 :             SetLastError(ERROR_INVALID_PARAMETER);

  045f0	e3a00057	 mov         r0, #0x57
  045f4	eb000000	 bl          SetLastError

; 2215 :             break;

  045f8	ea000185	 b           |$LN57@SPI_IOCont|
  045fc		 |$LN41@SPI_IOCont|

; 2216 :         }
; 2217 : 
; 2218 :         bRetVal = SPI_WriteRead(context, inSize, pOutBuffer, pInBuffer);

  045fc	e59b3008	 ldr         r3, [r11, #8]
  04600	e59b2010	 ldr         r2, [r11, #0x10]
  04604	e59b100c	 ldr         r1, [r11, #0xC]
  04608	e59b0000	 ldr         r0, [r11]
  0460c	eb000000	 bl          SPI_WriteRead
  04610	e50b0050	 str         r0, [r11, #-0x50]
  04614	e51b3050	 ldr         r3, [r11, #-0x50]
  04618	e50b30d4	 str         r3, [r11, #-0xD4]

; 2219 :         break;

  0461c	ea00017c	 b           |$LN57@SPI_IOCont|
  04620		 |$LN39@SPI_IOCont|

; 2220 : 
; 2221 :     case IOCTL_SPI_ASYNC_WRITEREAD:
; 2222 :         if (pOutSize != NULL) *pOutSize = inSize;

  04620	e59b3018	 ldr         r3, [r11, #0x18]
  04624	e3530000	 cmp         r3, #0
  04628	0a000002	 beq         |$LN38@SPI_IOCont|
  0462c	e59b200c	 ldr         r2, [r11, #0xC]
  04630	e59b3018	 ldr         r3, [r11, #0x18]
  04634	e5832000	 str         r2, [r3]
  04638		 |$LN38@SPI_IOCont|

; 2223 :         if (pInBuffer == NULL || pOutBuffer == NULL || inSize != outSize ) {

  04638	e59b3008	 ldr         r3, [r11, #8]
  0463c	e3530000	 cmp         r3, #0
  04640	0a000006	 beq         |$LN36@SPI_IOCont|
  04644	e59b3010	 ldr         r3, [r11, #0x10]
  04648	e3530000	 cmp         r3, #0
  0464c	0a000003	 beq         |$LN36@SPI_IOCont|
  04650	e59b200c	 ldr         r2, [r11, #0xC]
  04654	e59b3014	 ldr         r3, [r11, #0x14]
  04658	e1520003	 cmp         r2, r3
  0465c	0a000002	 beq         |$LN37@SPI_IOCont|
  04660		 |$LN36@SPI_IOCont|

; 2224 :             SetLastError(ERROR_INVALID_PARAMETER);

  04660	e3a00057	 mov         r0, #0x57
  04664	eb000000	 bl          SetLastError

; 2225 :             break;

  04668	ea000169	 b           |$LN57@SPI_IOCont|
  0466c		 |$LN37@SPI_IOCont|

; 2226 :         }
; 2227 : 
; 2228 :         bRetVal = SPI_AsyncWriteRead(context, inSize, pInBuffer, pOutBuffer);

  0466c	e59b3010	 ldr         r3, [r11, #0x10]
  04670	e59b2008	 ldr         r2, [r11, #8]
  04674	e59b100c	 ldr         r1, [r11, #0xC]
  04678	e59b0000	 ldr         r0, [r11]
  0467c	eb000000	 bl          SPI_AsyncWriteRead
  04680	e50b004c	 str         r0, [r11, #-0x4C]
  04684	e51b304c	 ldr         r3, [r11, #-0x4C]
  04688	e50b30d4	 str         r3, [r11, #-0xD4]

; 2229 :         break;

  0468c	ea000160	 b           |$LN57@SPI_IOCont|
  04690		 |$LN35@SPI_IOCont|

; 2230 : 
; 2231 :     case IOCTL_SPI_ASYNC_WRITEREAD_COMPLETE:
; 2232 :         if (pOutSize != NULL) *pOutSize = inSize;

  04690	e59b3018	 ldr         r3, [r11, #0x18]
  04694	e3530000	 cmp         r3, #0
  04698	0a000002	 beq         |$LN34@SPI_IOCont|
  0469c	e59b200c	 ldr         r2, [r11, #0xC]
  046a0	e59b3018	 ldr         r3, [r11, #0x18]
  046a4	e5832000	 str         r2, [r3]
  046a8		 |$LN34@SPI_IOCont|

; 2233 :         if (pOutBuffer == NULL || outSize == 0) {

  046a8	e59b3010	 ldr         r3, [r11, #0x10]
  046ac	e3530000	 cmp         r3, #0
  046b0	0a000002	 beq         |$LN32@SPI_IOCont|
  046b4	e59b3014	 ldr         r3, [r11, #0x14]
  046b8	e3530000	 cmp         r3, #0
  046bc	1a000002	 bne         |$LN33@SPI_IOCont|
  046c0		 |$LN32@SPI_IOCont|

; 2234 :             SetLastError(ERROR_INVALID_PARAMETER);

  046c0	e3a00057	 mov         r0, #0x57
  046c4	eb000000	 bl          SetLastError

; 2235 :             break;

  046c8	ea000151	 b           |$LN57@SPI_IOCont|
  046cc		 |$LN33@SPI_IOCont|

; 2236 :         }
; 2237 : 
; 2238 :         bRetVal = SPI_WaitForAsyncWriteReadComplete(context, outSize, pOutBuffer);

  046cc	e59b2010	 ldr         r2, [r11, #0x10]
  046d0	e59b1014	 ldr         r1, [r11, #0x14]
  046d4	e59b0000	 ldr         r0, [r11]
  046d8	eb000000	 bl          SPI_WaitForAsyncWriteReadComplete
  046dc	e50b0048	 str         r0, [r11, #-0x48]
  046e0	e51b3048	 ldr         r3, [r11, #-0x48]
  046e4	e50b30d4	 str         r3, [r11, #-0xD4]

; 2239 :         break;

  046e8	ea000149	 b           |$LN57@SPI_IOCont|
  046ec		 |$LN31@SPI_IOCont|

; 2240 : 
; 2241 :     case IOCTL_SPI_SET_SLAVEMODE:
; 2242 :         bRetVal = SPI_SetSlaveMode(context);

  046ec	e59b0000	 ldr         r0, [r11]
  046f0	eb000000	 bl          SPI_SetSlaveMode
  046f4	e50b0044	 str         r0, [r11, #-0x44]
  046f8	e51b3044	 ldr         r3, [r11, #-0x44]
  046fc	e50b30d4	 str         r3, [r11, #-0xD4]

; 2243 :         break;

  04700	ea000143	 b           |$LN57@SPI_IOCont|
  04704		 |$LN30@SPI_IOCont|

; 2244 : 
; 2245 :     case IOCTL_SPI_LOCK_CTRL: 
; 2246 :         if (pInBuffer == NULL || inSize != sizeof(DWORD)) {

  04704	e59b3008	 ldr         r3, [r11, #8]
  04708	e3530000	 cmp         r3, #0
  0470c	0a000002	 beq         |$LN28@SPI_IOCont|
  04710	e59b300c	 ldr         r3, [r11, #0xC]
  04714	e3530004	 cmp         r3, #4
  04718	0a000002	 beq         |$LN29@SPI_IOCont|
  0471c		 |$LN28@SPI_IOCont|

; 2247 :             SetLastError(ERROR_INVALID_PARAMETER);

  0471c	e3a00057	 mov         r0, #0x57
  04720	eb000000	 bl          SetLastError

; 2248 :             break;

  04724	ea00013a	 b           |$LN57@SPI_IOCont|
  04728		 |$LN29@SPI_IOCont|

; 2249 :         }
; 2250 :         bRetVal = SPI_LockController(context,*(DWORD*)pInBuffer);

  04728	e59b3008	 ldr         r3, [r11, #8]
  0472c	e5931000	 ldr         r1, [r3]
  04730	e59b0000	 ldr         r0, [r11]
  04734	eb000000	 bl          SPI_LockController
  04738	e50b0040	 str         r0, [r11, #-0x40]
  0473c	e51b3040	 ldr         r3, [r11, #-0x40]
  04740	e50b30d4	 str         r3, [r11, #-0xD4]

; 2251 :         break;

  04744	ea000132	 b           |$LN57@SPI_IOCont|
  04748		 |$LN27@SPI_IOCont|

; 2252 : 
; 2253 :     case IOCTL_SPI_UNLOCK_CTRL: 
; 2254 :         bRetVal = SPI_UnlockController(context);

  04748	e59b0000	 ldr         r0, [r11]
  0474c	eb000000	 bl          SPI_UnlockController
  04750	e50b003c	 str         r0, [r11, #-0x3C]
  04754	e51b303c	 ldr         r3, [r11, #-0x3C]
  04758	e50b30d4	 str         r3, [r11, #-0xD4]

; 2255 :         break;

  0475c	ea00012c	 b           |$LN57@SPI_IOCont|
  04760		 |$LN26@SPI_IOCont|

; 2256 :     case IOCTL_SPI_ENABLE_CHANNEL: 
; 2257 :         bRetVal = SPI_EnableChannel(context);

  04760	e59b0000	 ldr         r0, [r11]
  04764	eb000000	 bl          SPI_EnableChannel
  04768	e50b0038	 str         r0, [r11, #-0x38]
  0476c	e51b3038	 ldr         r3, [r11, #-0x38]
  04770	e50b30d4	 str         r3, [r11, #-0xD4]

; 2258 :         break;

  04774	ea000126	 b           |$LN57@SPI_IOCont|
  04778		 |$LN25@SPI_IOCont|

; 2259 :     case IOCTL_SPI_DISABLE_CHANNEL: 
; 2260 :         bRetVal = SPI_DisableChannel(context);

  04778	e59b0000	 ldr         r0, [r11]
  0477c	eb000000	 bl          SPI_DisableChannel
  04780	e50b0034	 str         r0, [r11, #-0x34]
  04784	e51b3034	 ldr         r3, [r11, #-0x34]
  04788	e50b30d4	 str         r3, [r11, #-0xD4]

; 2261 :         break;

  0478c	ea000120	 b           |$LN57@SPI_IOCont|
  04790		 |$LN24@SPI_IOCont|

; 2262 :   
; 2263 : 
; 2264 :     case IOCTL_DVFS_OPPNOTIFY:
; 2265 :         {
; 2266 :             DWORD i = 0;

  04790	e3a03000	 mov         r3, #0
  04794	e50b30a0	 str         r3, [r11, #-0xA0]

; 2267 :             IOCTL_DVFS_OPPNOTIFY_IN *pIn = (IOCTL_DVFS_OPPNOTIFY_IN*)pInBuffer;

  04798	e59b3008	 ldr         r3, [r11, #8]
  0479c	e50b309c	 str         r3, [r11, #-0x9C]

; 2268 : 
; 2269 :             if (pIn->ffInfo & DVFS_CORE1_PRE_NOTICE)

  047a0	e51b309c	 ldr         r3, [r11, #-0x9C]
  047a4	e2833004	 add         r3, r3, #4
  047a8	e5933000	 ldr         r3, [r3]
  047ac	e3130001	 tst         r3, #1
  047b0	0a00000b	 beq         |$LN23@SPI_IOCont|

; 2270 :             {
; 2271 :             pDevice->bDVFSActive = TRUE;

  047b4	e51b30e0	 ldr         r3, [r11, #-0xE0]
  047b8	e2832044	 add         r2, r3, #0x44
  047bc	e3a03001	 mov         r3, #1
  047c0	e5823000	 str         r3, [r2]

; 2272 :                 ResetEvent(pDevice->hDVFSInactiveEvent);                

  047c4	e51b30e0	 ldr         r3, [r11, #-0xE0]
  047c8	e283304c	 add         r3, r3, #0x4C
  047cc	e5930000	 ldr         r0, [r3]
  047d0	eb000000	 bl          ResetEvent

; 2273 :             CheckAndHaltAllDma(pInstance, TRUE);

  047d4	e3a01001	 mov         r1, #1
  047d8	e51b00dc	 ldr         r0, [r11, #-0xDC]
  047dc	eb000000	 bl          CheckAndHaltAllDma

; 2274 :             }
; 2275 :             else

  047e0	ea00000a	 b           |$LN22@SPI_IOCont|
  047e4		 |$LN23@SPI_IOCont|

; 2276 :             {
; 2277 :             pDevice->bDVFSActive = FALSE;

  047e4	e51b30e0	 ldr         r3, [r11, #-0xE0]
  047e8	e2832044	 add         r2, r3, #0x44
  047ec	e3a03000	 mov         r3, #0
  047f0	e5823000	 str         r3, [r2]

; 2278 :                 SetEvent(pDevice->hDVFSInactiveEvent);

  047f4	e51b30e0	 ldr         r3, [r11, #-0xE0]
  047f8	e283304c	 add         r3, r3, #0x4C
  047fc	e5930000	 ldr         r0, [r3]
  04800	eb000000	 bl          SetEvent

; 2279 :             CheckAndHaltAllDma(pInstance, FALSE);

  04804	e3a01000	 mov         r1, #0
  04808	e51b00dc	 ldr         r0, [r11, #-0xDC]
  0480c	eb000000	 bl          CheckAndHaltAllDma
  04810		 |$LN22@SPI_IOCont|

; 2280 :             }
; 2281 :         bRetVal = TRUE;

  04810	e3a03001	 mov         r3, #1
  04814	e50b30d4	 str         r3, [r11, #-0xD4]

; 2282 : 
; 2283 :             
; 2284 :             DEBUGMSG( ZONE_ERROR, (L"SPI: DVFS Notification: ffInfo=0x%08X, dwCount=%d\r\n",
; 2285 :                 pIn->ffInfo, pIn->dwCount));

  04818	e59f3490	 ldr         r3, [pc, #0x490]
  0481c	e5933440	 ldr         r3, [r3, #0x440]
  04820	e3130001	 tst         r3, #1
  04824	0a00000a	 beq         |$LN69@SPI_IOCont|
  04828	e51b309c	 ldr         r3, [r11, #-0x9C]
  0482c	e2833008	 add         r3, r3, #8
  04830	e5932000	 ldr         r2, [r3]
  04834	e51b309c	 ldr         r3, [r11, #-0x9C]
  04838	e2833004	 add         r3, r3, #4
  0483c	e5931000	 ldr         r1, [r3]
  04840	e59f048c	 ldr         r0, [pc, #0x48C]
  04844	eb000000	 bl          NKDbgPrintfW
  04848	e3a03001	 mov         r3, #1
  0484c	e50b3030	 str         r3, [r11, #-0x30]
  04850	ea000001	 b           |$LN70@SPI_IOCont|
  04854		 |$LN69@SPI_IOCont|
  04854	e3a03000	 mov         r3, #0
  04858	e50b3030	 str         r3, [r11, #-0x30]
  0485c		 |$LN70@SPI_IOCont|
  0485c		 |$LN21@SPI_IOCont|

; 2286 : 
; 2287 :             while (i < pIn->dwCount)

  0485c	e51b309c	 ldr         r3, [r11, #-0x9C]
  04860	e2833008	 add         r3, r3, #8
  04864	e51b20a0	 ldr         r2, [r11, #-0xA0]
  04868	e5933000	 ldr         r3, [r3]
  0486c	e1520003	 cmp         r2, r3
  04870	2a00003e	 bcs         |$LN20@SPI_IOCont|

; 2288 :         {
; 2289 :                 pIn->dwCount--;

  04874	e51b309c	 ldr         r3, [r11, #-0x9C]
  04878	e2833008	 add         r3, r3, #8
  0487c	e5933000	 ldr         r3, [r3]
  04880	e2432001	 sub         r2, r3, #1
  04884	e51b309c	 ldr         r3, [r11, #-0x9C]
  04888	e2833008	 add         r3, r3, #8
  0488c	e5832000	 str         r2, [r3]

; 2290 :                 DEBUGMSG( ZONE_ERROR, (L"...SPI(new): voltDomain=%d, opp=%d\r\n",
; 2291 :                     pIn->rgOppInfo[i].domain, pIn->rgOppInfo[i].newOpp));

  04890	e59f3418	 ldr         r3, [pc, #0x418]
  04894	e5933440	 ldr         r3, [r3, #0x440]
  04898	e3130001	 tst         r3, #1
  0489c	0a000013	 beq         |$LN71@SPI_IOCont|
  048a0	e51b309c	 ldr         r3, [r11, #-0x9C]
  048a4	e283100c	 add         r1, r3, #0xC
  048a8	e51b20a0	 ldr         r2, [r11, #-0xA0]
  048ac	e3a0300c	 mov         r3, #0xC
  048b0	e0030392	 mul         r3, r2, r3
  048b4	e0813003	 add         r3, r1, r3
  048b8	e2833004	 add         r3, r3, #4
  048bc	e5932000	 ldr         r2, [r3]
  048c0	e51b309c	 ldr         r3, [r11, #-0x9C]
  048c4	e283000c	 add         r0, r3, #0xC
  048c8	e51b10a0	 ldr         r1, [r11, #-0xA0]
  048cc	e3a0300c	 mov         r3, #0xC
  048d0	e0030391	 mul         r3, r1, r3
  048d4	e0803003	 add         r3, r0, r3
  048d8	e5931000	 ldr         r1, [r3]
  048dc	e59f03ec	 ldr         r0, [pc, #0x3EC]
  048e0	eb000000	 bl          NKDbgPrintfW
  048e4	e3a03001	 mov         r3, #1
  048e8	e50b302c	 str         r3, [r11, #-0x2C]
  048ec	ea000001	 b           |$LN72@SPI_IOCont|
  048f0		 |$LN71@SPI_IOCont|
  048f0	e3a03000	 mov         r3, #0
  048f4	e50b302c	 str         r3, [r11, #-0x2C]
  048f8		 |$LN72@SPI_IOCont|

; 2292 : 
; 2293 :                 DEBUGMSG( ZONE_ERROR, (L"...SPI(old): voltDomain=%d, opp=%d\r\n",
; 2294 :                     pIn->rgOppInfo[i].domain, pIn->rgOppInfo[i].oldOpp));

  048f8	e59f33b0	 ldr         r3, [pc, #0x3B0]
  048fc	e5933440	 ldr         r3, [r3, #0x440]
  04900	e3130001	 tst         r3, #1
  04904	0a000013	 beq         |$LN73@SPI_IOCont|
  04908	e51b309c	 ldr         r3, [r11, #-0x9C]
  0490c	e283100c	 add         r1, r3, #0xC
  04910	e51b20a0	 ldr         r2, [r11, #-0xA0]
  04914	e3a0300c	 mov         r3, #0xC
  04918	e0030392	 mul         r3, r2, r3
  0491c	e0813003	 add         r3, r1, r3
  04920	e2833008	 add         r3, r3, #8
  04924	e5932000	 ldr         r2, [r3]
  04928	e51b309c	 ldr         r3, [r11, #-0x9C]
  0492c	e283000c	 add         r0, r3, #0xC
  04930	e51b10a0	 ldr         r1, [r11, #-0xA0]
  04934	e3a0300c	 mov         r3, #0xC
  04938	e0030391	 mul         r3, r1, r3
  0493c	e0803003	 add         r3, r0, r3
  04940	e5931000	 ldr         r1, [r3]
  04944	e59f0380	 ldr         r0, [pc, #0x380]
  04948	eb000000	 bl          NKDbgPrintfW
  0494c	e3a03001	 mov         r3, #1
  04950	e50b3028	 str         r3, [r11, #-0x28]
  04954	ea000001	 b           |$LN74@SPI_IOCont|
  04958		 |$LN73@SPI_IOCont|
  04958	e3a03000	 mov         r3, #0
  0495c	e50b3028	 str         r3, [r11, #-0x28]
  04960		 |$LN74@SPI_IOCont|

; 2295 :                 ++i;

  04960	e51b30a0	 ldr         r3, [r11, #-0xA0]
  04964	e2833001	 add         r3, r3, #1
  04968	e50b30a0	 str         r3, [r11, #-0xA0]

; 2296 :             }

  0496c	eaffffba	 b           |$LN21@SPI_IOCont|
  04970		 |$LN20@SPI_IOCont|

; 2297 :             break;

  04970	ea0000a7	 b           |$LN57@SPI_IOCont|

; 2298 :         }
; 2299 :         break;

  04974	ea0000a6	 b           |$LN57@SPI_IOCont|
  04978		 |$LN19@SPI_IOCont|

; 2300 : 
; 2301 :     case IOCTL_CONTEXT_RESTORE:
; 2302 :         if (pDevice->pActiveInstance != NULL)

  04978	e51b30e0	 ldr         r3, [r11, #-0xE0]
  0497c	e2833fa2	 add         r3, r3, #0xA2, 30
  04980	e5933000	 ldr         r3, [r3]
  04984	e3530000	 cmp         r3, #0
  04988	0a000004	 beq         |$LN18@SPI_IOCont|

; 2303 :             {
; 2304 :             ContextRestore((SPI_INSTANCE*)pDevice->pActiveInstance);

  0498c	e51b30e0	 ldr         r3, [r11, #-0xE0]
  04990	e2833fa2	 add         r3, r3, #0xA2, 30
  04994	e5930000	 ldr         r0, [r3]
  04998	eb000000	 bl          ContextRestore

; 2305 :             }
; 2306 :         else

  0499c	ea00000a	 b           |$LN17@SPI_IOCont|
  049a0		 |$LN18@SPI_IOCont|

; 2307 :             {
; 2308 :             DEBUGMSG( ZONE_ERROR, (L"SPI: IOCTL_CONTEXT_RESTORE_NOTIFY FAILED\r\n"));

  049a0	e59f3308	 ldr         r3, [pc, #0x308]
  049a4	e5933440	 ldr         r3, [r3, #0x440]
  049a8	e3130001	 tst         r3, #1
  049ac	0a000004	 beq         |$LN75@SPI_IOCont|
  049b0	e59f0310	 ldr         r0, [pc, #0x310]
  049b4	eb000000	 bl          NKDbgPrintfW
  049b8	e3a03001	 mov         r3, #1
  049bc	e50b3024	 str         r3, [r11, #-0x24]
  049c0	ea000001	 b           |$LN76@SPI_IOCont|
  049c4		 |$LN75@SPI_IOCont|
  049c4	e3a03000	 mov         r3, #0
  049c8	e50b3024	 str         r3, [r11, #-0x24]
  049cc		 |$LN76@SPI_IOCont|
  049cc		 |$LN17@SPI_IOCont|

; 2309 :             }
; 2310 :         break;

  049cc	ea000090	 b           |$LN57@SPI_IOCont|
  049d0		 |$LN16@SPI_IOCont|

; 2311 : 
; 2312 :     case IOCTL_POWER_CAPABILITIES: 
; 2313 :         if (pOutBuffer && outSize >= sizeof (POWER_CAPABILITIES) && 
; 2314 :             pOutSize) 

  049d0	e59b3010	 ldr         r3, [r11, #0x10]
  049d4	e3530000	 cmp         r3, #0
  049d8	0a000020	 beq         |$LN15@SPI_IOCont|
  049dc	e59b3014	 ldr         r3, [r11, #0x14]
  049e0	e3530030	 cmp         r3, #0x30
  049e4	3a00001d	 bcc         |$LN15@SPI_IOCont|
  049e8	e59b3018	 ldr         r3, [r11, #0x18]
  049ec	e3530000	 cmp         r3, #0
  049f0	0a00001a	 beq         |$LN15@SPI_IOCont|
  049f4		 |$LN96@SPI_IOCont|

; 2315 :             {
; 2316 :                 __try 
; 2317 :                     {
; 2318 :                     PPOWER_CAPABILITIES pPowerCaps;
; 2319 :                     pPowerCaps = (PPOWER_CAPABILITIES)pOutBuffer;

  049f4	e59b3010	 ldr         r3, [r11, #0x10]
  049f8	e50b3098	 str         r3, [r11, #-0x98]

; 2320 :      
; 2321 :                     // Only supports D0 and D4 states
; 2322 :                     memset(pPowerCaps, 0, sizeof(*pPowerCaps));

  049fc	e3a02030	 mov         r2, #0x30
  04a00	e3a01000	 mov         r1, #0
  04a04	e51b0098	 ldr         r0, [r11, #-0x98]
  04a08	eb000000	 bl          memset

; 2323 :                     pPowerCaps->DeviceDx = DX_MASK(D0)|DX_MASK(D4);;

  04a0c	e51b2098	 ldr         r2, [r11, #-0x98]
  04a10	e3a03011	 mov         r3, #0x11
  04a14	e5c23000	 strb        r3, [r2]

; 2324 :                     *pOutSize = sizeof(*pPowerCaps);

  04a18	e59b2018	 ldr         r2, [r11, #0x18]
  04a1c	e3a03030	 mov         r3, #0x30
  04a20	e5823000	 str         r3, [r2]

; 2325 :                     
; 2326 :                     bRetVal = TRUE;

  04a24	e3a03001	 mov         r3, #1
  04a28	e50b30d4	 str         r3, [r11, #-0xD4]
  04a2c		 |$LN97@SPI_IOCont|

; 2327 :                     }

  04a2c	ea00000b	 b           |$LN98@SPI_IOCont|
  04a30		 |$LN93@SPI_IOCont|

; 2329 :                     {
; 2330 :                     RETAILMSG(ZONE_ERROR, (L"exception in spi ioctl\r\n"));

  04a30	e59f3278	 ldr         r3, [pc, #0x278]
  04a34	e5933440	 ldr         r3, [r3, #0x440]
  04a38	e3130001	 tst         r3, #1
  04a3c	0a000004	 beq         |$LN77@SPI_IOCont|
  04a40	e59f027c	 ldr         r0, [pc, #0x27C]
  04a44	eb000000	 bl          NKDbgPrintfW
  04a48	e3a03001	 mov         r3, #1
  04a4c	e50b3020	 str         r3, [r11, #-0x20]
  04a50	ea000001	 b           |$LN78@SPI_IOCont|
  04a54		 |$LN77@SPI_IOCont|
  04a54	e3a03000	 mov         r3, #0
  04a58	e50b3020	 str         r3, [r11, #-0x20]
  04a5c		 |$LN78@SPI_IOCont|
  04a5c	eaffffff	 b           |$LN98@SPI_IOCont|
  04a60		 |$LN98@SPI_IOCont|
  04a60		 |$LN15@SPI_IOCont|

; 2331 :                     }
; 2332 :             }
; 2333 :         break;

  04a60	ea00006b	 b           |$LN57@SPI_IOCont|
  04a64		 |$LN13@SPI_IOCont|

; 2334 : 
; 2335 :     case IOCTL_POWER_QUERY: 
; 2336 :         if (pOutBuffer && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  04a64	e59b3010	 ldr         r3, [r11, #0x10]
  04a68	e3530000	 cmp         r3, #0
  04a6c	0a00001a	 beq         |$LN12@SPI_IOCont|
  04a70	e59b3014	 ldr         r3, [r11, #0x14]
  04a74	e3530004	 cmp         r3, #4
  04a78	3a000017	 bcc         |$LN12@SPI_IOCont|
  04a7c		 |$LN103@SPI_IOCont|

; 2337 :             {
; 2338 :             __try 
; 2339 :                 {
; 2340 :                 CEDEVICE_POWER_STATE ReqDx = *(PCEDEVICE_POWER_STATE)pOutBuffer;

  04a7c	e59b3010	 ldr         r3, [r11, #0x10]
  04a80	e5933000	 ldr         r3, [r3]
  04a84	e50b3094	 str         r3, [r11, #-0x94]

; 2341 : 
; 2342 :                 if (VALID_DX(ReqDx)) 

  04a88	e51b3094	 ldr         r3, [r11, #-0x94]
  04a8c	e3730001	 cmn         r3, #1
  04a90	da000004	 ble         |$LN10@SPI_IOCont|
  04a94	e51b3094	 ldr         r3, [r11, #-0x94]
  04a98	e3530005	 cmp         r3, #5
  04a9c	aa000001	 bge         |$LN10@SPI_IOCont|

; 2343 :                     {
; 2344 :                     bRetVal = TRUE;

  04aa0	e3a03001	 mov         r3, #1
  04aa4	e50b30d4	 str         r3, [r11, #-0xD4]
  04aa8		 |$LN10@SPI_IOCont|
  04aa8		 |$LN104@SPI_IOCont|

; 2345 :                     }
; 2346 : 
; 2347 :                 }

  04aa8	ea00000b	 b           |$LN105@SPI_IOCont|
  04aac		 |$LN100@SPI_IOCont|

; 2349 :                 {
; 2350 :                 RETAILMSG(ZONE_ERROR, (L"Exception in spi ioctl\r\n"));

  04aac	e59f31fc	 ldr         r3, [pc, #0x1FC]
  04ab0	e5933440	 ldr         r3, [r3, #0x440]
  04ab4	e3130001	 tst         r3, #1
  04ab8	0a000004	 beq         |$LN79@SPI_IOCont|
  04abc	e59f01fc	 ldr         r0, [pc, #0x1FC]
  04ac0	eb000000	 bl          NKDbgPrintfW
  04ac4	e3a03001	 mov         r3, #1
  04ac8	e50b301c	 str         r3, [r11, #-0x1C]
  04acc	ea000001	 b           |$LN80@SPI_IOCont|
  04ad0		 |$LN79@SPI_IOCont|
  04ad0	e3a03000	 mov         r3, #0
  04ad4	e50b301c	 str         r3, [r11, #-0x1C]
  04ad8		 |$LN80@SPI_IOCont|
  04ad8	eaffffff	 b           |$LN105@SPI_IOCont|
  04adc		 |$LN105@SPI_IOCont|
  04adc		 |$LN12@SPI_IOCont|

; 2351 :                 }
; 2352 :             }
; 2353 :         break;

  04adc	ea00004c	 b           |$LN57@SPI_IOCont|
  04ae0		 |$LN9@SPI_IOCont|

; 2354 : 
; 2355 :     case IOCTL_POWER_SET: 
; 2356 :         if (pOutBuffer && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  04ae0	e59b3010	 ldr         r3, [r11, #0x10]
  04ae4	e3530000	 cmp         r3, #0
  04ae8	0a000025	 beq         |$LN8@SPI_IOCont|
  04aec	e59b3014	 ldr         r3, [r11, #0x14]
  04af0	e3530004	 cmp         r3, #4
  04af4	3a000022	 bcc         |$LN8@SPI_IOCont|
  04af8		 |$LN110@SPI_IOCont|

; 2357 :             {
; 2358 :             __try 
; 2359 :                 {
; 2360 :                 CEDEVICE_POWER_STATE newPowerState = *(PCEDEVICE_POWER_STATE)pOutBuffer;

  04af8	e59b3010	 ldr         r3, [r11, #0x10]
  04afc	e5933000	 ldr         r3, [r3]
  04b00	e50b3090	 str         r3, [r11, #-0x90]

; 2361 : 
; 2362 :                 // SPI clocks are enabled during read/write and disabled after
; 2363 :                 // nActivityTimeout duration. 
; 2364 :                 // In D4 request wait untill the SPIPowerTimerThread puts the device 
; 2365 :                 // in D4 state
; 2366 :                 if (newPowerState == D4)

  04b04	e51b3090	 ldr         r3, [r11, #-0x90]
  04b08	e3530004	 cmp         r3, #4
  04b0c	1a000009	 bne         |$LN6@SPI_IOCont|

; 2367 :                     {
; 2368 :                     if (pDevice->powerState != D4)

  04b10	e51b30e0	 ldr         r3, [r11, #-0xE0]
  04b14	e2833034	 add         r3, r3, #0x34
  04b18	e5933000	 ldr         r3, [r3]
  04b1c	e3530004	 cmp         r3, #4
  04b20	0a000004	 beq         |$LN5@SPI_IOCont|

; 2369 :                         {
; 2370 :                         // Wait till the SPI device is put to OFF state
; 2371 :                         WaitForSingleObject(pDevice->hDeviceOffEvent, INFINITE);

  04b24	e3e01000	 mvn         r1, #0
  04b28	e51b30e0	 ldr         r3, [r11, #-0xE0]
  04b2c	e2833fa3	 add         r3, r3, #0xA3, 30
  04b30	e5930000	 ldr         r0, [r3]
  04b34	eb000000	 bl          WaitForSingleObject
  04b38		 |$LN5@SPI_IOCont|
  04b38		 |$LN6@SPI_IOCont|

; 2372 :                         }
; 2373 :                     }
; 2374 :                 
; 2375 :                 pDevice->systemState = newPowerState;

  04b38	e51b30e0	 ldr         r3, [r11, #-0xE0]
  04b3c	e2832e29	 add         r2, r3, #0x29, 28
  04b40	e51b3090	 ldr         r3, [r11, #-0x90]
  04b44	e5823000	 str         r3, [r2]

; 2376 :                 bRetVal = TRUE;

  04b48	e3a03001	 mov         r3, #1
  04b4c	e50b30d4	 str         r3, [r11, #-0xD4]
  04b50		 |$LN111@SPI_IOCont|

; 2377 :                 }

  04b50	ea00000b	 b           |$LN112@SPI_IOCont|
  04b54		 |$LN107@SPI_IOCont|

; 2379 :                 {
; 2380 :                 RETAILMSG(ZONE_ERROR, (L"Exception in spi ioctl\r\n"));

  04b54	e59f3154	 ldr         r3, [pc, #0x154]
  04b58	e5933440	 ldr         r3, [r3, #0x440]
  04b5c	e3130001	 tst         r3, #1
  04b60	0a000004	 beq         |$LN81@SPI_IOCont|
  04b64	e59f0154	 ldr         r0, [pc, #0x154]
  04b68	eb000000	 bl          NKDbgPrintfW
  04b6c	e3a03001	 mov         r3, #1
  04b70	e50b3018	 str         r3, [r11, #-0x18]
  04b74	ea000001	 b           |$LN82@SPI_IOCont|
  04b78		 |$LN81@SPI_IOCont|
  04b78	e3a03000	 mov         r3, #0
  04b7c	e50b3018	 str         r3, [r11, #-0x18]
  04b80		 |$LN82@SPI_IOCont|
  04b80	eaffffff	 b           |$LN112@SPI_IOCont|
  04b84		 |$LN112@SPI_IOCont|
  04b84		 |$LN8@SPI_IOCont|

; 2381 :                 }
; 2382 :         }
; 2383 :         break;

  04b84	ea000022	 b           |$LN57@SPI_IOCont|
  04b88		 |$LN4@SPI_IOCont|

; 2384 : 
; 2385 :     // gets the current device power state
; 2386 :     case IOCTL_POWER_GET: 
; 2387 :         if (pOutBuffer != NULL && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  04b88	e59b3010	 ldr         r3, [r11, #0x10]
  04b8c	e3530000	 cmp         r3, #0
  04b90	0a000016	 beq         |$LN3@SPI_IOCont|
  04b94	e59b3014	 ldr         r3, [r11, #0x14]
  04b98	e3530004	 cmp         r3, #4
  04b9c	3a000013	 bcc         |$LN3@SPI_IOCont|
  04ba0		 |$LN117@SPI_IOCont|

; 2388 :             {
; 2389 :             __try 
; 2390 :                 {
; 2391 :                 *(PCEDEVICE_POWER_STATE)pOutBuffer = pDevice->powerState;

  04ba0	e51b30e0	 ldr         r3, [r11, #-0xE0]
  04ba4	e2833034	 add         r3, r3, #0x34
  04ba8	e5932000	 ldr         r2, [r3]
  04bac	e59b3010	 ldr         r3, [r11, #0x10]
  04bb0	e5832000	 str         r2, [r3]

; 2392 : 
; 2393 :                 bRetVal = TRUE;

  04bb4	e3a03001	 mov         r3, #1
  04bb8	e50b30d4	 str         r3, [r11, #-0xD4]
  04bbc		 |$LN118@SPI_IOCont|

; 2394 :                 }

  04bbc	ea00000b	 b           |$LN119@SPI_IOCont|
  04bc0		 |$LN114@SPI_IOCont|

; 2396 :                 {
; 2397 :                 RETAILMSG(ZONE_ERROR, (L"Exception in spi ioctl\r\n"));

  04bc0	e59f30e8	 ldr         r3, [pc, #0xE8]
  04bc4	e5933440	 ldr         r3, [r3, #0x440]
  04bc8	e3130001	 tst         r3, #1
  04bcc	0a000004	 beq         |$LN83@SPI_IOCont|
  04bd0	e59f00e8	 ldr         r0, [pc, #0xE8]
  04bd4	eb000000	 bl          NKDbgPrintfW
  04bd8	e3a03001	 mov         r3, #1
  04bdc	e50b3014	 str         r3, [r11, #-0x14]
  04be0	ea000001	 b           |$LN84@SPI_IOCont|
  04be4		 |$LN83@SPI_IOCont|
  04be4	e3a03000	 mov         r3, #0
  04be8	e50b3014	 str         r3, [r11, #-0x14]
  04bec		 |$LN84@SPI_IOCont|
  04bec	eaffffff	 b           |$LN119@SPI_IOCont|
  04bf0		 |$LN119@SPI_IOCont|
  04bf0		 |$LN3@SPI_IOCont|

; 2398 :                 }
; 2399 :             }     
; 2400 :         break;

  04bf0	ea000007	 b           |$LN57@SPI_IOCont|
  04bf4		 |$LN1@SPI_IOCont|

; 2401 :   
; 2402 :     default:
; 2403 :         ERRORMSG(1, (TEXT("SPI: Unknown IOCTL_xxx(0x%0.8X) \r\n"), dwCode));

  04bf4	e3a02c09	 mov         r2, #9, 24
  04bf8	e3822063	 orr         r2, r2, #0x63
  04bfc	e59f10b8	 ldr         r1, [pc, #0xB8]
  04c00	e59f00b0	 ldr         r0, [pc, #0xB0]
  04c04	eb000000	 bl          NKDbgPrintfW
  04c08	e59b1004	 ldr         r1, [r11, #4]
  04c0c	e59f00a0	 ldr         r0, [pc, #0xA0]
  04c10	eb000000	 bl          NKDbgPrintfW
  04c14		 |$LN57@SPI_IOCont|
  04c14		 |$clean$45457|

; 2404 :         break;
; 2405 :     }
; 2406 : 
; 2407 : clean:
; 2408 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_IOControl(rc = %d)\r\n", bRetVal));

  04c14	e59f3094	 ldr         r3, [pc, #0x94]
  04c18	e5933440	 ldr         r3, [r3, #0x440]
  04c1c	e3130004	 tst         r3, #4
  04c20	0a000005	 beq         |$LN89@SPI_IOCont|
  04c24	e51b10d4	 ldr         r1, [r11, #-0xD4]
  04c28	e59f007c	 ldr         r0, [pc, #0x7C]
  04c2c	eb000000	 bl          NKDbgPrintfW
  04c30	e3a03001	 mov         r3, #1
  04c34	e50b3010	 str         r3, [r11, #-0x10]
  04c38	ea000001	 b           |$LN90@SPI_IOCont|
  04c3c		 |$LN89@SPI_IOCont|
  04c3c	e3a03000	 mov         r3, #0
  04c40	e50b3010	 str         r3, [r11, #-0x10]
  04c44		 |$LN90@SPI_IOCont|

; 2409 :     return bRetVal;

  04c44	e51b30d4	 ldr         r3, [r11, #-0xD4]
  04c48	e50b307c	 str         r3, [r11, #-0x7C]
  04c4c		 |$LN91@SPI_IOCont|

; 2410 : }

  04c4c	e51b007c	 ldr         r0, [r11, #-0x7C]
  04c50	e24bd00c	 sub         sp, r11, #0xC
  04c54	e89d6800	 ldmia       sp, {r11, sp, lr}
  04c58	e12fff1e	 bx          lr

			 ENDP  ; |SPI_IOControl|

  04c5c		 |$LN113@SPI_IOCont|
  04c5c		 |$LN125@SPI_IOCont|

; 2395 :             __except(EXCEPTION_EXECUTE_HANDLER) 

  04c5c	e52de004	 str         lr, [sp, #-4]!
  04c60	e24dd010	 sub         sp, sp, #0x10
  04c64		 |$LN116@SPI_IOCont|
  04c64		 |$LN131@SPI_IOCont|
  04c64	e3a00001	 mov         r0, #1
  04c68		 |$LN115@SPI_IOCont|
  04c68	e28dd010	 add         sp, sp, #0x10
  04c6c	e49df004	 ldr         pc, [sp], #4
  04c70		 |$LN132@SPI_IOCont|
  04c70		 |$LN106@SPI_IOCont|
  04c70		 |$LN127@SPI_IOCont|

; 2378 :             __except(EXCEPTION_EXECUTE_HANDLER) 

  04c70	e52de004	 str         lr, [sp, #-4]!
  04c74	e24dd010	 sub         sp, sp, #0x10
  04c78		 |$LN109@SPI_IOCont|
  04c78		 |$LN133@SPI_IOCont|
  04c78	e3a00001	 mov         r0, #1
  04c7c		 |$LN108@SPI_IOCont|
  04c7c	e28dd010	 add         sp, sp, #0x10
  04c80	e49df004	 ldr         pc, [sp], #4
  04c84		 |$LN134@SPI_IOCont|
  04c84		 |$LN99@SPI_IOCont|
  04c84		 |$LN128@SPI_IOCont|

; 2348 :             __except(EXCEPTION_EXECUTE_HANDLER) 

  04c84	e52de004	 str         lr, [sp, #-4]!
  04c88	e24dd010	 sub         sp, sp, #0x10
  04c8c		 |$LN102@SPI_IOCont|
  04c8c		 |$LN135@SPI_IOCont|
  04c8c	e3a00001	 mov         r0, #1
  04c90		 |$LN101@SPI_IOCont|
  04c90	e28dd010	 add         sp, sp, #0x10
  04c94	e49df004	 ldr         pc, [sp], #4
  04c98		 |$LN136@SPI_IOCont|
  04c98		 |$LN92@SPI_IOCont|
  04c98		 |$LN129@SPI_IOCont|

; 2328 :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  04c98	e52de004	 str         lr, [sp, #-4]!
  04c9c	e24dd010	 sub         sp, sp, #0x10
  04ca0		 |$LN95@SPI_IOCont|
  04ca0		 |$LN137@SPI_IOCont|
  04ca0	e3a00001	 mov         r0, #1
  04ca4		 |$LN94@SPI_IOCont|
  04ca4	e28dd010	 add         sp, sp, #0x10
  04ca8	e49df004	 ldr         pc, [sp], #4
  04cac		 |$LN139@SPI_IOCont|
  04cac		 |$LN140@SPI_IOCont|
  04cac	00000000	 DCD         |??_C@_1DE@JMAHJFIP@?$AA?9?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$CF?$AAd?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  04cb0		 |$LN141@SPI_IOCont|
  04cb0	00000000	 DCD         |dpCurSettings|
  04cb4		 |$LN142@SPI_IOCont|
  04cb4	00000000	 DCD         |??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@|
  04cb8		 |$LN143@SPI_IOCont|
  04cb8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  04cbc		 |$LN144@SPI_IOCont|
  04cbc	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  04cc0		 |$LN145@SPI_IOCont|
  04cc0	00000000	 DCD         |??_C@_1DC@NKOBOHOD@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  04cc4		 |$LN146@SPI_IOCont|
  04cc4	00000000	 DCD         |??_C@_1DC@IGLIIDFJ@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  04cc8		 |$LN147@SPI_IOCont|
  04cc8	00000000	 DCD         |??_C@_1FG@HABLGLHP@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAC?$AAO?$AAN?$AAT?$AAE?$AAX?$AAT?$AA_?$AAR?$AAE?$AAS?$AAT?$AAO?$AAR?$AAE?$AA_?$AAN?$AAO?$AAT?$AAI?$AAF@|
  04ccc		 |$LN148@SPI_IOCont|
  04ccc	00000000	 DCD         |??_C@_1EK@NOJGIHPE@?$AA?4?$AA?4?$AA?4?$AAS?$AAP?$AAI?$AA?$CI?$AAo?$AAl?$AAd?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAo?$AAl?$AAt?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAp?$AA?$DN@|
  04cd0		 |$LN149@SPI_IOCont|
  04cd0	00000000	 DCD         |??_C@_1EK@EBLGHPPL@?$AA?4?$AA?4?$AA?4?$AAS?$AAP?$AAI?$AA?$CI?$AAn?$AAe?$AAw?$AA?$CJ?$AA?3?$AA?5?$AAv?$AAo?$AAl?$AAt?$AAD?$AAo?$AAm?$AAa?$AAi?$AAn?$AA?$DN?$AA?$CF?$AAd?$AA?0?$AA?5?$AAo?$AAp?$AAp?$AA?$DN@|
  04cd4		 |$LN150@SPI_IOCont|
  04cd4	00000000	 DCD         |??_C@_1GI@HOCAOFMI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAD?$AAV?$AAF?$AAS?$AA?5?$AAN?$AAo?$AAt?$AAi?$AAf?$AAi?$AAc?$AAa?$AAt?$AAi?$AAo?$AAn?$AA?3?$AA?5?$AAf?$AAf?$AAI?$AAn?$AAf?$AAo?$AA?$DN?$AA0@|
  04cd8		 |$LN151@SPI_IOCont|
  04cd8	00000000	 DCD         |SPI_DisableChannel|
  04cdc		 |$LN152@SPI_IOCont|
  04cdc	00000000	 DCD         |SPI_EnableChannel|
  04ce0		 |$LN153@SPI_IOCont|
  04ce0	00000000	 DCD         |SPI_UnlockController|
  04ce4		 |$LN154@SPI_IOCont|
  04ce4	00000000	 DCD         |SPI_LockController|
  04ce8		 |$LN155@SPI_IOCont|
  04ce8	00000000	 DCD         |SPI_SetSlaveMode|
  04cec		 |$LN156@SPI_IOCont|
  04cec	00000000	 DCD         |SPI_WaitForAsyncWriteReadComplete|
  04cf0		 |$LN157@SPI_IOCont|
  04cf0	00000000	 DCD         |SPI_AsyncWriteRead|
  04cf4		 |$LN158@SPI_IOCont|
  04cf4	00000000	 DCD         |SPI_WriteRead|
  04cf8		 |$LN159@SPI_IOCont|
  04cf8	00000000	 DCD         |SPI_Write|
  04cfc		 |$LN160@SPI_IOCont|
  04cfc	00000000	 DCD         |SPI_Read|
  04d00		 |$LN161@SPI_IOCont|
  04d00	00000000	 DCD         |SPI_Configure|
  04d04		 |$LN162@SPI_IOCont|
  04d04	00000000	 DCD         |DEVICE_IFC_SPI_GUID|
  04d08		 |$LN163@SPI_IOCont|
  04d08	00000000	 DCD         |??_C@_1OG@BBMBGGPP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAD?$AAD?$AAK?$AA_@|
  04d0c		 |$LN164@SPI_IOCont|
  04d0c	80038140	 DCD         0x80038140
  04d10		 |$LN165@SPI_IOCont|
  04d10	0032100c	 DCD         0x32100c
  04d14		 |$LN166@SPI_IOCont|
  04d14	00321004	 DCD         0x321004
  04d18		 |$LN167@SPI_IOCont|
  04d18	00321008	 DCD         0x321008
  04d1c		 |$LN168@SPI_IOCont|
  04d1c	00220818	 DCD         0x220818
  04d20		 |$LN169@SPI_IOCont|
  04d20	00220814	 DCD         0x220814
  04d24		 |$LN170@SPI_IOCont|
  04d24	00220808	 DCD         0x220808
  04d28		 |$LN171@SPI_IOCont|
  04d28	00220804	 DCD         0x220804
  04d2c		 |$LN172@SPI_IOCont|
  04d2c	0022080c	 DCD         0x22080c
  04d30		 |$LN173@SPI_IOCont|
  04d30	0022081c	 DCD         0x22081c
  04d34		 |$LN174@SPI_IOCont|
  04d34	00000000	 DCD         |??_C@_1GE@NMIDEKOJ@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?3?$AA?5?$AAI?$AAn?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?5@|
  04d38		 |$LN175@SPI_IOCont|
  04d38	73706949	 DCD         0x73706949
  04d3c		 |$LN176@SPI_IOCont|
  04d3c	00000000	 DCD         |??_C@_1IC@KKFHJLNO@?$AA?$CL?$AAS?$AAP?$AAI?$AA_?$AAI?$AAO?$AAC?$AAo?$AAn?$AAt?$AAr?$AAo?$AAl?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?0?$AA?5?$AA0@|
  04d40		 |$LN138@SPI_IOCont|
  04d40		 |$LN130@SPI_IOCont|
	IMPORT	|__GetUserKData|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46524| DCD	|$LN5@GetCurrent|
	DCD	0x40000b02
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M46521|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00008	e3a0000c	 mov         r0, #0xC
  0000c	eb000000	 bl          __GetUserKData
  00010	e58d0004	 str         r0, [sp, #4]
  00014	e59d3004	 ldr         r3, [sp, #4]
  00018	e58d3000	 str         r3, [sp]

; 375  : }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd008	 add         sp, sp, #8
  00024	e49de004	 ldr         lr, [sp], #4
  00028	e12fff1e	 bx          lr
  0002c		 |$M46522|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|SPI_PowerUp|

  000e8			 AREA	 |.pdata|, PDATA
|$T46531| DCD	|$LN5@SPI_PowerU|
	DCD	0x40000503
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  04d40			 AREA	 |.text|, CODE, ARM

  04d40		 |SPI_PowerUp| PROC

; 2419 : {

  04d40		 |$LN5@SPI_PowerU|
  04d40	e1a0c00d	 mov         r12, sp
  04d44	e92d0001	 stmdb       sp!, {r0}
  04d48	e92d5000	 stmdb       sp!, {r12, lr}
  04d4c		 |$M46528|

; 2420 : 	UNREFERENCED_PARAMETER(context);
; 2421 : }

  04d4c	e89d6000	 ldmia       sp, {sp, lr}
  04d50	e12fff1e	 bx          lr
  04d54		 |$M46529|

			 ENDP  ; |SPI_PowerUp|

	EXPORT	|SPI_PowerDown|

  000f0			 AREA	 |.pdata|, PDATA
|$T46536| DCD	|$LN5@SPI_PowerD|
	DCD	0x40000503
; Function compile flags: /Odtp

  04d54			 AREA	 |.text|, CODE, ARM

  04d54		 |SPI_PowerDown| PROC

; 2430 : {

  04d54		 |$LN5@SPI_PowerD|
  04d54	e1a0c00d	 mov         r12, sp
  04d58	e92d0001	 stmdb       sp!, {r0}
  04d5c	e92d5000	 stmdb       sp!, {r12, lr}
  04d60		 |$M46533|

; 2431 : 	UNREFERENCED_PARAMETER(context);
; 2432 : }

  04d60	e89d6000	 ldmia       sp, {sp, lr}
  04d64	e12fff1e	 bx          lr
  04d68		 |$M46534|

			 ENDP  ; |SPI_PowerDown|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  000f8			 AREA	 |.pdata|, PDATA
|$T46542| DCD	|$LN8@DllMain|
	DCD	0x40001404
; Function compile flags: /Odtp

  04d68			 AREA	 |.text|, CODE, ARM

  04d68		 |DllMain| PROC

; 2448 : {

  04d68		 |$LN8@DllMain|
  04d68	e1a0c00d	 mov         r12, sp
  04d6c	e92d0007	 stmdb       sp!, {r0 - r2}
  04d70	e92d5000	 stmdb       sp!, {r12, lr}
  04d74	e24dd004	 sub         sp, sp, #4
  04d78		 |$M46539|

; 2449 :     switch (reason)

  04d78	e59d3010	 ldr         r3, [sp, #0x10]
  04d7c	e3530001	 cmp         r3, #1
  04d80	0a000000	 beq         |$LN1@DllMain|
  04d84	ea000004	 b           |$LN2@DllMain|
  04d88		 |$LN1@DllMain|

; 2450 :         {
; 2451 :         case DLL_PROCESS_ATTACH:
; 2452 :             RETAILREGISTERZONES((HMODULE)hDLL);

  04d88	e59f1024	 ldr         r1, [pc, #0x24]
  04d8c	e59d000c	 ldr         r0, [sp, #0xC]
  04d90	eb000000	 bl          RegisterDbgZones

; 2453 :             DisableThreadLibraryCalls((HMODULE)hDLL);

  04d94	e59d000c	 ldr         r0, [sp, #0xC]
  04d98	eb000000	 bl          DisableThreadLibraryCalls
  04d9c		 |$LN2@DllMain|

; 2454 :             break;
; 2455 :         }
; 2456 : 
; 2457 : UNREFERENCED_PARAMETER(pReserved);
; 2458 :     return TRUE;

  04d9c	e3a03001	 mov         r3, #1
  04da0	e58d3000	 str         r3, [sp]

; 2459 : }

  04da4	e59d0000	 ldr         r0, [sp]
  04da8	e28dd004	 add         sp, sp, #4
  04dac	e89d6000	 ldmia       sp, {sp, lr}
  04db0	e12fff1e	 bx          lr
  04db4		 |$LN9@DllMain|
  04db4		 |$LN10@DllMain|
  04db4	00000000	 DCD         |dpCurSettings|
  04db8		 |$M46540|

			 ENDP  ; |DllMain|

	END
