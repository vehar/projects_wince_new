; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SPI\dma_init.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|TxDmaSettings| [ DATA ]
	EXPORT	|RxDmaSettings| [ DATA ]
	EXPORT	|dwSyncMasksTX| [ DATA ]
	EXPORT	|dwSyncMasksRX| [ DATA ]

  00000			 AREA	 |.data|, DATA
|TxDmaSettings| DCD 0x0
	DCD	0x0
	DCD	0x0
	DCD	0x1000
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x4000040
	DCD	0x0
	DCD	0x0
	DCD	0x20
	%	4
|RxDmaSettings| DCD 0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x4000
	DCD	0x4000040
	DCD	0x1000000
	DCD	0x0
	DCD	0x20
	%	4
|dwSyncMasksTX| DCD 0x23
	DCD	0x25
	DCD	0x27
	DCD	0x29
	DCD	0x2b
	DCD	0x2d
	DCD	0x0
	DCD	0x0
	DCD	0xf
	DCD	0x17
	DCD	0x0
	DCD	0x0
	DCD	0x46
	DCD	0x0
	DCD	0x0
	DCD	0x0
|dwSyncMasksRX| DCD 0x24
	DCD	0x26
	DCD	0x28
	DCD	0x2a
	DCD	0x2c
	DCD	0x2e
	DCD	0x0
	DCD	0x0
	DCD	0x10
	DCD	0x18
	DCD	0x0
	DCD	0x0
	DCD	0x47
	DCD	0x0
	DCD	0x0
	DCD	0x0

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
	EXPORT	|DmaUpdate|
	EXPORT	|SpiDmaRestore|

  00000			 AREA	 |.pdata|, PDATA
|$T44107| DCD	|$LN5@SpiDmaRest|
	DCD	0x40002304
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\dma_init.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SpiDmaRestore| PROC

; 236  : {

  00000		 |$LN5@SpiDmaRest|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M44104|

; 237  :     DWORD   dwSyncMask;
; 238  : 
; 239  :     dwSyncMask = dwSyncMasksTX[pInstance->pDevice->dwPort][pInstance->address];

  00010	e59d3014	 ldr         r3, [sp, #0x14]
  00014	e2833004	 add         r3, r3, #4
  00018	e5933000	 ldr         r3, [r3]
  0001c	e2833038	 add         r3, r3, #0x38
  00020	e5931000	 ldr         r1, [r3]
  00024	e3a03010	 mov         r3, #0x10
  00028	e0020391	 mul         r2, r1, r3
  0002c	e59f3054	 ldr         r3, [pc, #0x54]
  00030	e0831002	 add         r1, r3, r2
  00034	e59d3014	 ldr         r3, [sp, #0x14]
  00038	e2833008	 add         r3, r3, #8
  0003c	e5932000	 ldr         r2, [r3]
  00040	e3a03004	 mov         r3, #4
  00044	e0030392	 mul         r3, r2, r3
  00048	e0813003	 add         r3, r1, r3
  0004c	e5933000	 ldr         r3, [r3]
  00050	e58d3000	 str         r3, [sp]

; 240  : 
; 241  :     // Reconfigure the DMA channel
; 242  :     return DmaUpdate(&pInstance->txDmaConfig, dwSyncMask, &pInstance->txDmaInfo);

  00054	e59d3014	 ldr         r3, [sp, #0x14]
  00058	e2832088	 add         r2, r3, #0x88
  0005c	e59d1000	 ldr         r1, [sp]
  00060	e59d3014	 ldr         r3, [sp, #0x14]
  00064	e2830028	 add         r0, r3, #0x28
  00068	eb000000	 bl          DmaUpdate
  0006c	e58d0008	 str         r0, [sp, #8]
  00070	e59d3008	 ldr         r3, [sp, #8]
  00074	e58d3004	 str         r3, [sp, #4]

; 243  : }

  00078	e59d0004	 ldr         r0, [sp, #4]
  0007c	e28dd00c	 add         sp, sp, #0xC
  00080	e89d6000	 ldmia       sp, {sp, lr}
  00084	e12fff1e	 bx          lr
  00088		 |$LN6@SpiDmaRest|
  00088		 |$LN7@SpiDmaRest|
  00088	00000000	 DCD         |dwSyncMasksTX|
  0008c		 |$M44105|

			 ENDP  ; |SpiDmaRestore|

; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T44115| DCD	|$LN7@DmaUpdate|
	DCD	0x40006f04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaUpdate| PROC

; 251  : {

  00000		 |$LN7@DmaUpdate|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd00c	 sub         sp, sp, #0xC
  00010		 |$M44112|

; 252  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 253  :     OMAP_DMA_LC_REGS *pDmaLcReg;
; 254  : 
; 255  :     if (pDataInfo == NULL || pDataInfo->pDmaLcReg == NULL)

  00018	e59d301c	 ldr         r3, [sp, #0x1C]
  0001c	e3530000	 cmp         r3, #0
  00020	0a000004	 beq         |$LN1@DmaUpdate|
  00024	e59d301c	 ldr         r3, [sp, #0x1C]
  00028	e2833014	 add         r3, r3, #0x14
  0002c	e5933000	 ldr         r3, [r3]
  00030	e3530000	 cmp         r3, #0
  00034	1a000000	 bne         |$LN2@DmaUpdate|
  00038		 |$LN1@DmaUpdate|

; 256  :         {
; 257  :         goto cleanUp;

  00038	ea000059	 b           |$cleanUp$43473|
  0003c		 |$LN2@DmaUpdate|

; 258  :         }
; 259  :     pDmaLcReg = pDataInfo->pDmaLcReg;

  0003c	e59d301c	 ldr         r3, [sp, #0x1C]
  00040	e2833014	 add         r3, r3, #0x14
  00044	e5933000	 ldr         r3, [r3]
  00048	e58d3000	 str         r3, [sp]

; 260  : 
; 261  :     // Disable the DMA in case it is running
; 262  :     CLRREG32(&pDmaLcReg->CCR, DMA_CCR_ENABLE);

  0004c	e59d3000	 ldr         r3, [sp]
  00050	e5932000	 ldr         r2, [r3]
  00054	e3e03080	 mvn         r3, #0x80
  00058	e0022003	 and         r2, r2, r3
  0005c	e59d3000	 ldr         r3, [sp]
  00060	e5832000	 str         r2, [r3]

; 263  : 
; 264  :     // update syncmap
; 265  :     pConfigInfo->syncMap = syncMap;

  00064	e59d3014	 ldr         r3, [sp, #0x14]
  00068	e283202c	 add         r2, r3, #0x2C
  0006c	e59d3018	 ldr         r3, [sp, #0x18]
  00070	e5823000	 str         r3, [r2]

; 266  : 
; 267  :     // Initialize logical channel registers
; 268  :     //
; 269  :     OUTREG32(&pDmaLcReg->CCR, 0);

  00074	e59d2000	 ldr         r2, [sp]
  00078	e3a03000	 mov         r3, #0
  0007c	e5823000	 str         r3, [r2]

; 270  :     OUTREG32(&pDmaLcReg->CLNK_CTRL, 0);

  00080	e59d3000	 ldr         r3, [sp]
  00084	e2832004	 add         r2, r3, #4
  00088	e3a03000	 mov         r3, #0
  0008c	e5823000	 str         r3, [r2]

; 271  :     OUTREG32(&pDmaLcReg->COLOR, 0);

  00090	e59d3000	 ldr         r3, [sp]
  00094	e2832044	 add         r2, r3, #0x44
  00098	e3a03000	 mov         r3, #0
  0009c	e5823000	 str         r3, [r2]

; 272  : 
; 273  :     // update CSDP
; 274  :     //  DATA_TYPE
; 275  :     //  DST
; 276  :     //  SRC
; 277  :     OUTREG32(&pDmaLcReg->CSDP, pConfigInfo->elemSize);

  000a0	e59d3000	 ldr         r3, [sp]
  000a4	e2832010	 add         r2, r3, #0x10
  000a8	e59d3014	 ldr         r3, [sp, #0x14]
  000ac	e5933000	 ldr         r3, [r3]
  000b0	e5823000	 str         r3, [r2]

; 278  : 
; 279  :     // update CCR
; 280  :     //  DST_MODE
; 281  :     //  SRC_MODE
; 282  :     //  PRIO
; 283  :     //  SYNC
; 284  :     //
; 285  :     OUTREG32(&pDmaLcReg->CCR, pConfigInfo->srcAddrMode |
; 286  :         pConfigInfo->dstAddrMode | pConfigInfo->dmaPrio |
; 287  :         DMA_CCR_SYNC(syncMap) | pConfigInfo->synchTrigger |
; 288  :         pConfigInfo->synchMode
; 289  :         );

  000b4	e59d3014	 ldr         r3, [sp, #0x14]
  000b8	e283200c	 add         r2, r3, #0xC
  000bc	e59d3014	 ldr         r3, [sp, #0x14]
  000c0	e2833018	 add         r3, r3, #0x18
  000c4	e5922000	 ldr         r2, [r2]
  000c8	e5933000	 ldr         r3, [r3]
  000cc	e1822003	 orr         r2, r2, r3
  000d0	e59d3014	 ldr         r3, [sp, #0x14]
  000d4	e283301c	 add         r3, r3, #0x1C
  000d8	e5933000	 ldr         r3, [r3]
  000dc	e1821003	 orr         r1, r2, r3
  000e0	e59d3018	 ldr         r3, [sp, #0x18]
  000e4	e203201f	 and         r2, r3, #0x1F
  000e8	e59d3018	 ldr         r3, [sp, #0x18]
  000ec	e2033060	 and         r3, r3, #0x60
  000f0	e1a03703	 mov         r3, r3, lsl #14
  000f4	e1823003	 orr         r3, r2, r3
  000f8	e1812003	 orr         r2, r1, r3
  000fc	e59d3014	 ldr         r3, [sp, #0x14]
  00100	e2833020	 add         r3, r3, #0x20
  00104	e5933000	 ldr         r3, [r3]
  00108	e1822003	 orr         r2, r2, r3
  0010c	e59d3014	 ldr         r3, [sp, #0x14]
  00110	e2833024	 add         r3, r3, #0x24
  00114	e5933000	 ldr         r3, [r3]
  00118	e1822003	 orr         r2, r2, r3
  0011c	e59d3000	 ldr         r3, [sp]
  00120	e5832000	 str         r2, [r3]

; 290  : 
; 291  :     // update CSEI
; 292  :     //
; 293  :     OUTREG32(&pDmaLcReg->CSEI, pConfigInfo->srcElemIndex);

  00124	e59d3014	 ldr         r3, [sp, #0x14]
  00128	e2831004	 add         r1, r3, #4
  0012c	e59d3000	 ldr         r3, [sp]
  00130	e2832024	 add         r2, r3, #0x24
  00134	e5913000	 ldr         r3, [r1]
  00138	e5823000	 str         r3, [r2]

; 294  : 
; 295  :     // update CDEI
; 296  :     //
; 297  :     OUTREG32(&pDmaLcReg->CDEI, pConfigInfo->dstElemIndex);

  0013c	e59d3014	 ldr         r3, [sp, #0x14]
  00140	e2831010	 add         r1, r3, #0x10
  00144	e59d3000	 ldr         r3, [sp]
  00148	e283202c	 add         r2, r3, #0x2C
  0014c	e5913000	 ldr         r3, [r1]
  00150	e5823000	 str         r3, [r2]

; 298  : 
; 299  :     // update CSFI
; 300  :     //
; 301  :     OUTREG32(&pDmaLcReg->CSFI, pConfigInfo->srcFrameIndex);

  00154	e59d3014	 ldr         r3, [sp, #0x14]
  00158	e2831008	 add         r1, r3, #8
  0015c	e59d3000	 ldr         r3, [sp]
  00160	e2832028	 add         r2, r3, #0x28
  00164	e5913000	 ldr         r3, [r1]
  00168	e5823000	 str         r3, [r2]

; 302  : 
; 303  :     // update CDFI
; 304  :     //
; 305  :     OUTREG32(&pDmaLcReg->CDFI, pConfigInfo->dstFrameIndex);

  0016c	e59d3014	 ldr         r3, [sp, #0x14]
  00170	e2831014	 add         r1, r3, #0x14
  00174	e59d3000	 ldr         r3, [sp]
  00178	e2832030	 add         r2, r3, #0x30
  0017c	e5913000	 ldr         r3, [r1]
  00180	e5823000	 str         r3, [r2]

; 306  : 
; 307  :     // update CICR
; 308  :     //
; 309  :     OUTREG32(&pDmaLcReg->CICR , pConfigInfo->interrupts);

  00184	e59d3014	 ldr         r3, [sp, #0x14]
  00188	e2831028	 add         r1, r3, #0x28
  0018c	e59d3000	 ldr         r3, [sp]
  00190	e2832008	 add         r2, r3, #8
  00194	e5913000	 ldr         r3, [r1]
  00198	e5823000	 str         r3, [r2]

; 310  : 
; 311  :     rc = TRUE;

  0019c	e3a03001	 mov         r3, #1
  001a0	e58d3004	 str         r3, [sp, #4]
  001a4		 |$cleanUp$43473|

; 312  : 
; 313  : cleanUp:
; 314  :     return rc;

  001a4	e59d3004	 ldr         r3, [sp, #4]
  001a8	e58d3008	 str         r3, [sp, #8]

; 315  : }

  001ac	e59d0008	 ldr         r0, [sp, #8]
  001b0	e28dd00c	 add         sp, sp, #0xC
  001b4	e89d6000	 ldmia       sp, {sp, lr}
  001b8	e12fff1e	 bx          lr
  001bc		 |$M44113|

			 ENDP  ; |DmaUpdate|

	EXPORT	|SpiDmaDeinit|
	EXPORT	|??_C@_1CM@BEBDPDLN@?$AA?9?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@LMBDDML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@FMAGIJKG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HK@POGOOKNK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@CGGBCOBI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAh@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@JABBDDAF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1HE@PCECNBAC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe@| [ DATA ] ; `string'
	EXPORT	|DmaSetRepeatMode|
	EXPORT	|DmaSetDstBuffer|
	EXPORT	|DmaSetSrcBuffer|
	EXPORT	|DmaConfigure|
	EXPORT	|??_C@_1HK@CJOHLJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GE@JGFMHMEI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAh@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CM@HAOEDEMO@?$AA?$CL?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|SpiDmaInit|
	IMPORT	|DmaEnableInterrupts|
	IMPORT	|CreateEventW|
	IMPORT	|AllocPhysMem|
	IMPORT	|DmaAllocateChannel|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|dpCurSettings|
	IMPORT	|memcpy|

  00008			 AREA	 |.pdata|, PDATA
|$T44158| DCD	|$LN70@SpiDmaInit|
	DCD	0x4002ae04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\dma_init.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@BEBDPDLN@?$AA?9?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, ")"
	DCB	0x0, " ", 0x0, "r", 0x0, "c", 0x0, " ", 0x0, "=", 0x0, " "
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@LMBDDML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "R"
	DCB	0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@FMAGIJKG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "R", 0x0, "X", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@POGOOKNK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "R", 0x0, "x", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "(", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@CGGBCOBI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAh@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "A", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "R", 0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@JABBDDAF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "t", 0x0, "o", 0x0, " ", 0x0, "e", 0x0, "n"
	DCB	0x0, "a", 0x0, "b", 0x0, "l", 0x0, "e", 0x0, " ", 0x0, "T"
	DCB	0x0, "X", 0x0, " ", 0x0, "D", 0x0, "M", 0x0, "A", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, "t", 0x0, "e", 0x0, "r", 0x0, "r"
	DCB	0x0, "u", 0x0, "p", 0x0, "t", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HE@PCECNBAC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "c", 0x0, "r", 0x0, "e", 0x0, "a", 0x0, "t"
	DCB	0x0, "e", 0x0, " ", 0x0, "T", 0x0, "X", 0x0, " ", 0x0, "D"
	DCB	0x0, "M", 0x0, "A", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "r", 0x0, "u", 0x0, "p", 0x0, "t"
	DCB	0x0, " ", 0x0, "e", 0x0, "v", 0x0, "e", 0x0, "n", 0x0, "t"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HK@CJOHLJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "a", 0x0, "l", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "a", 0x0, "t", 0x0, "e", 0x0, " ", 0x0, "D", 0x0, "M"
	DCB	0x0, "A", 0x0, " ", 0x0, "T", 0x0, "x", 0x0, " ", 0x0, "b"
	DCB	0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e", 0x0, "r", 0x0, " "
	DCB	0x0, "(", 0x0, "s", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, " "
	DCB	0x0, "%", 0x0, "d", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GE@JGFMHMEI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAh@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, ":", 0x0, " "
	DCB	0x0, "D", 0x0, "m", 0x0, "a", 0x0, "A", 0x0, "l", 0x0, "l"
	DCB	0x0, "o", 0x0, "c", 0x0, "a", 0x0, "t", 0x0, "e", 0x0, "C"
	DCB	0x0, "h", 0x0, "a", 0x0, "n", 0x0, "n", 0x0, "e", 0x0, "l"
	DCB	0x0, " ", 0x0, "T", 0x0, "x", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CM@HAOEDEMO@?$AA?$CL?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "I", 0x0, "n", 0x0, "i", 0x0, "t", 0x0, "(", 0x0, "0"
	DCB	0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x", 0x0, ")"
	DCB	0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0	; `string'
; Function compile flags: /Odtp

  0008c			 AREA	 |.text|, CODE, ARM

  0008c		 |SpiDmaInit| PROC

; 252  : {

  0008c		 |$LN70@SpiDmaInit|
  0008c	e1a0c00d	 mov         r12, sp
  00090	e92d0001	 stmdb       sp!, {r0}
  00094	e92d5000	 stmdb       sp!, {r12, lr}
  00098	e24dd074	 sub         sp, sp, #0x74
  0009c		 |$M44155|

; 253  :     BOOL    bResult = FALSE;

  0009c	e3a03000	 mov         r3, #0
  000a0	e58d3010	 str         r3, [sp, #0x10]

; 254  :     DWORD   dwSyncMask;
; 255  :     DWORD   dwWordLen;
; 256  :     UINT8*  pRegAddr;
; 257  :     DWORD   paRegAddr;
; 258  : 
; 259  : 
; 260  :     DEBUGMSG(ZONE_DMA, (
; 261  :         L"+SpiDmaInit(0x%08x)\r\n", pInstance
; 262  :     ));

  000a4	e59f3a60	 ldr         r3, [pc, #0xA60]
  000a8	e5933440	 ldr         r3, [r3, #0x440]
  000ac	e3130020	 tst         r3, #0x20
  000b0	0a000005	 beq         |$LN36@SpiDmaInit|
  000b4	e59d107c	 ldr         r1, [sp, #0x7C]
  000b8	e59f0a80	 ldr         r0, [pc, #0xA80]
  000bc	eb000000	 bl          NKDbgPrintfW
  000c0	e3a03001	 mov         r3, #1
  000c4	e58d3024	 str         r3, [sp, #0x24]
  000c8	ea000001	 b           |$LN37@SpiDmaInit|
  000cc		 |$LN36@SpiDmaInit|
  000cc	e3a03000	 mov         r3, #0
  000d0	e58d3024	 str         r3, [sp, #0x24]
  000d4		 |$LN37@SpiDmaInit|

; 263  : 
; 264  :     //  Setup TX DMA channel if needed
; 265  :     if( pInstance->config & MCSPI_CHCONF_DMAW_ENABLE )

  000d4	e59d307c	 ldr         r3, [sp, #0x7C]
  000d8	e283300c	 add         r3, r3, #0xC
  000dc	e5933000	 ldr         r3, [r3]
  000e0	e3130901	 tst         r3, #1, 18
  000e4	0a000134	 beq         |$LN33@SpiDmaInit|

; 266  :     {
; 267  :         //  Allocate DMA channel
; 268  :         pInstance->hTxDmaChannel = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  000e8	e3a00000	 mov         r0, #0
  000ec	eb000000	 bl          DmaAllocateChannel
  000f0	e58d0028	 str         r0, [sp, #0x28]
  000f4	e59d307c	 ldr         r3, [sp, #0x7C]
  000f8	e2832018	 add         r2, r3, #0x18
  000fc	e59d3028	 ldr         r3, [sp, #0x28]
  00100	e5823000	 str         r3, [r2]

; 269  :         if (pInstance->hTxDmaChannel == NULL )

  00104	e59d307c	 ldr         r3, [sp, #0x7C]
  00108	e2833018	 add         r3, r3, #0x18
  0010c	e5933000	 ldr         r3, [r3]
  00110	e3530000	 cmp         r3, #0
  00114	1a00000b	 bne         |$LN32@SpiDmaInit|

; 270  :             {
; 271  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SpiDmaInit: "
; 272  :                 L"DmaAllocateChannel Tx failed\r\n"
; 273  :             ));

  00118	e59f39ec	 ldr         r3, [pc, #0x9EC]
  0011c	e5933440	 ldr         r3, [r3, #0x440]
  00120	e3130001	 tst         r3, #1
  00124	0a000004	 beq         |$LN38@SpiDmaInit|
  00128	e59f0a0c	 ldr         r0, [pc, #0xA0C]
  0012c	eb000000	 bl          NKDbgPrintfW
  00130	e3a03001	 mov         r3, #1
  00134	e58d302c	 str         r3, [sp, #0x2C]
  00138	ea000001	 b           |$LN39@SpiDmaInit|
  0013c		 |$LN38@SpiDmaInit|
  0013c	e3a03000	 mov         r3, #0
  00140	e58d302c	 str         r3, [sp, #0x2C]
  00144		 |$LN39@SpiDmaInit|

; 274  :             goto cleanUp;

  00144	ea000258	 b           |$cleanUp$43934|
  00148		 |$LN32@SpiDmaInit|

; 275  :             }
; 276  : 
; 277  :         // Allocate DMA buffer
; 278  :         pInstance->pTxDmaBuffer = AllocPhysMem(
; 279  :             pInstance->pDevice->dwTxBufferSize, PAGE_READWRITE | PAGE_NOCACHE, 0, 0,
; 280  :             &pInstance->paTxDmaBuffer
; 281  :             );

  00148	e59d307c	 ldr         r3, [sp, #0x7C]
  0014c	e28330bc	 add         r3, r3, #0xBC
  00150	e58d3000	 str         r3, [sp]
  00154	e3a03000	 mov         r3, #0
  00158	e3a02000	 mov         r2, #0
  0015c	e3a01f81	 mov         r1, #0x81, 30
  00160	e59d007c	 ldr         r0, [sp, #0x7C]
  00164	e2800004	 add         r0, r0, #4
  00168	e5900000	 ldr         r0, [r0]
  0016c	e280002c	 add         r0, r0, #0x2C
  00170	e5900000	 ldr         r0, [r0]
  00174	eb000000	 bl          AllocPhysMem
  00178	e58d0030	 str         r0, [sp, #0x30]
  0017c	e59d307c	 ldr         r3, [sp, #0x7C]
  00180	e28320b8	 add         r2, r3, #0xB8
  00184	e59d3030	 ldr         r3, [sp, #0x30]
  00188	e5823000	 str         r3, [r2]

; 282  :         if (pInstance->pTxDmaBuffer == NULL)

  0018c	e59d307c	 ldr         r3, [sp, #0x7C]
  00190	e28330b8	 add         r3, r3, #0xB8
  00194	e5933000	 ldr         r3, [r3]
  00198	e3530000	 cmp         r3, #0
  0019c	1a000010	 bne         |$LN31@SpiDmaInit|

; 283  :             {
; 284  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SpiDmaInit: "
; 285  :                 L"Failed allocate DMA Tx buffer (size %d)\r\n",
; 286  :                 pInstance->pDevice->dwTxBufferSize
; 287  :             ));

  001a0	e59f3964	 ldr         r3, [pc, #0x964]
  001a4	e5933440	 ldr         r3, [r3, #0x440]
  001a8	e3130001	 tst         r3, #1
  001ac	0a000009	 beq         |$LN40@SpiDmaInit|
  001b0	e59d307c	 ldr         r3, [sp, #0x7C]
  001b4	e2833004	 add         r3, r3, #4
  001b8	e5933000	 ldr         r3, [r3]
  001bc	e283302c	 add         r3, r3, #0x2C
  001c0	e5931000	 ldr         r1, [r3]
  001c4	e59f096c	 ldr         r0, [pc, #0x96C]
  001c8	eb000000	 bl          NKDbgPrintfW
  001cc	e3a03001	 mov         r3, #1
  001d0	e58d3034	 str         r3, [sp, #0x34]
  001d4	ea000001	 b           |$LN41@SpiDmaInit|
  001d8		 |$LN40@SpiDmaInit|
  001d8	e3a03000	 mov         r3, #0
  001dc	e58d3034	 str         r3, [sp, #0x34]
  001e0		 |$LN41@SpiDmaInit|

; 288  :             goto cleanUp;

  001e0	ea000231	 b           |$cleanUp$43934|
  001e4		 |$LN31@SpiDmaInit|

; 289  :             }
; 290  : 
; 291  : 
; 292  :         // Determine the DMA settings for the SPI channel
; 293  :         switch( pInstance->address )

  001e4	e59d307c	 ldr         r3, [sp, #0x7C]
  001e8	e2833008	 add         r3, r3, #8
  001ec	e5933000	 ldr         r3, [r3]
  001f0	e58d3038	 str         r3, [sp, #0x38]
  001f4	e59d3038	 ldr         r3, [sp, #0x38]
  001f8	e3530003	 cmp         r3, #3
  001fc	8a000080	 bhi         |$LN24@SpiDmaInit|
  00200	e59d2038	 ldr         r2, [sp, #0x38]
  00204	e1a03102	 mov         r3, r2, lsl #2
  00208	e083300f	 add         r3, r3, pc
  0020c	e5933004	 ldr         r3, [r3, #4]
  00210	e08ff003	 add         pc, pc, r3
  00214		 |$LN57@SpiDmaInit|
  00214		 |$LN56@SpiDmaInit|
  00214		 |$LN58@SpiDmaInit|
  00214	0000000c	 DCD         0xc
  00218		 |$LN59@SpiDmaInit|
  00218	00000084	 DCD         0x84
  0021c		 |$LN60@SpiDmaInit|
  0021c	000000fc	 DCD         0xfc
  00220		 |$LN61@SpiDmaInit|
  00220	00000174	 DCD         0x174
  00224		 |$LN28@SpiDmaInit|

; 294  :         {
; 295  :             case 0:
; 296  :                 //  Channel 0 configuration
; 297  :                 dwSyncMask = dwSyncMasksTX[pInstance->pDevice->dwPort][pInstance->address];

  00224	e59d307c	 ldr         r3, [sp, #0x7C]
  00228	e2833004	 add         r3, r3, #4
  0022c	e5933000	 ldr         r3, [r3]
  00230	e2833038	 add         r3, r3, #0x38
  00234	e5931000	 ldr         r1, [r3]
  00238	e3a03010	 mov         r3, #0x10
  0023c	e0020391	 mul         r2, r1, r3
  00240	e59f38ec	 ldr         r3, [pc, #0x8EC]
  00244	e0831002	 add         r1, r3, r2
  00248	e59d307c	 ldr         r3, [sp, #0x7C]
  0024c	e2833008	 add         r3, r3, #8
  00250	e5932000	 ldr         r2, [r3]
  00254	e3a03004	 mov         r3, #4
  00258	e0030392	 mul         r3, r2, r3
  0025c	e0813003	 add         r3, r1, r3
  00260	e5933000	 ldr         r3, [r3]
  00264	e58d300c	 str         r3, [sp, #0xC]

; 298  :                 pRegAddr = (UINT8*) &pInstance->pSPIChannelRegs->MCSPI_TX;

  00268	e59d307c	 ldr         r3, [sp, #0x7C]
  0026c	e2833010	 add         r3, r3, #0x10
  00270	e5933000	 ldr         r3, [r3]
  00274	e283300c	 add         r3, r3, #0xC
  00278	e58d3008	 str         r3, [sp, #8]

; 299  :                 paRegAddr = pInstance->pDevice->memBase[0] + offset(OMAP_MCSPI_REGS, MCSPI_TX0);

  0027c	e59d307c	 ldr         r3, [sp, #0x7C]
  00280	e2833004	 add         r3, r3, #4
  00284	e5933000	 ldr         r3, [r3]
  00288	e2833004	 add         r3, r3, #4
  0028c	e5933000	 ldr         r3, [r3]
  00290	e2833038	 add         r3, r3, #0x38
  00294	e58d3004	 str         r3, [sp, #4]

; 300  :                 break;

  00298	ea00005a	 b           |$LN29@SpiDmaInit|
  0029c		 |$LN27@SpiDmaInit|

; 301  : 
; 302  :             case 1:
; 303  :                 //  Channel 1 configuration
; 304  :                 dwSyncMask = dwSyncMasksTX[pInstance->pDevice->dwPort][pInstance->address];

  0029c	e59d307c	 ldr         r3, [sp, #0x7C]
  002a0	e2833004	 add         r3, r3, #4
  002a4	e5933000	 ldr         r3, [r3]
  002a8	e2833038	 add         r3, r3, #0x38
  002ac	e5931000	 ldr         r1, [r3]
  002b0	e3a03010	 mov         r3, #0x10
  002b4	e0020391	 mul         r2, r1, r3
  002b8	e59f3874	 ldr         r3, [pc, #0x874]
  002bc	e0831002	 add         r1, r3, r2
  002c0	e59d307c	 ldr         r3, [sp, #0x7C]
  002c4	e2833008	 add         r3, r3, #8
  002c8	e5932000	 ldr         r2, [r3]
  002cc	e3a03004	 mov         r3, #4
  002d0	e0030392	 mul         r3, r2, r3
  002d4	e0813003	 add         r3, r1, r3
  002d8	e5933000	 ldr         r3, [r3]
  002dc	e58d300c	 str         r3, [sp, #0xC]

; 305  :                 pRegAddr = (UINT8*) &pInstance->pSPIChannelRegs->MCSPI_TX;

  002e0	e59d307c	 ldr         r3, [sp, #0x7C]
  002e4	e2833010	 add         r3, r3, #0x10
  002e8	e5933000	 ldr         r3, [r3]
  002ec	e283300c	 add         r3, r3, #0xC
  002f0	e58d3008	 str         r3, [sp, #8]

; 306  :                 paRegAddr = pInstance->pDevice->memBase[0] + offset(OMAP_MCSPI_REGS, MCSPI_TX1);

  002f4	e59d307c	 ldr         r3, [sp, #0x7C]
  002f8	e2833004	 add         r3, r3, #4
  002fc	e5933000	 ldr         r3, [r3]
  00300	e2833004	 add         r3, r3, #4
  00304	e5933000	 ldr         r3, [r3]
  00308	e283304c	 add         r3, r3, #0x4C
  0030c	e58d3004	 str         r3, [sp, #4]

; 307  :                 break;

  00310	ea00003c	 b           |$LN29@SpiDmaInit|
  00314		 |$LN26@SpiDmaInit|

; 308  : 
; 309  :             case 2:
; 310  :                 //  Channel 2 configuration
; 311  :                 dwSyncMask = dwSyncMasksTX[pInstance->pDevice->dwPort][pInstance->address];

  00314	e59d307c	 ldr         r3, [sp, #0x7C]
  00318	e2833004	 add         r3, r3, #4
  0031c	e5933000	 ldr         r3, [r3]
  00320	e2833038	 add         r3, r3, #0x38
  00324	e5931000	 ldr         r1, [r3]
  00328	e3a03010	 mov         r3, #0x10
  0032c	e0020391	 mul         r2, r1, r3
  00330	e59f37fc	 ldr         r3, [pc, #0x7FC]
  00334	e0831002	 add         r1, r3, r2
  00338	e59d307c	 ldr         r3, [sp, #0x7C]
  0033c	e2833008	 add         r3, r3, #8
  00340	e5932000	 ldr         r2, [r3]
  00344	e3a03004	 mov         r3, #4
  00348	e0030392	 mul         r3, r2, r3
  0034c	e0813003	 add         r3, r1, r3
  00350	e5933000	 ldr         r3, [r3]
  00354	e58d300c	 str         r3, [sp, #0xC]

; 312  :                 pRegAddr = (UINT8*) &pInstance->pSPIChannelRegs->MCSPI_TX;

  00358	e59d307c	 ldr         r3, [sp, #0x7C]
  0035c	e2833010	 add         r3, r3, #0x10
  00360	e5933000	 ldr         r3, [r3]
  00364	e283300c	 add         r3, r3, #0xC
  00368	e58d3008	 str         r3, [sp, #8]

; 313  :                 paRegAddr = pInstance->pDevice->memBase[0] + offset(OMAP_MCSPI_REGS, MCSPI_TX2);

  0036c	e59d307c	 ldr         r3, [sp, #0x7C]
  00370	e2833004	 add         r3, r3, #4
  00374	e5933000	 ldr         r3, [r3]
  00378	e2833004	 add         r3, r3, #4
  0037c	e5933000	 ldr         r3, [r3]
  00380	e2833060	 add         r3, r3, #0x60
  00384	e58d3004	 str         r3, [sp, #4]

; 314  :                 break;

  00388	ea00001e	 b           |$LN29@SpiDmaInit|
  0038c		 |$LN25@SpiDmaInit|

; 315  : 
; 316  :             case 3:
; 317  :                 //  Channel 3 configuration
; 318  :                 dwSyncMask = dwSyncMasksTX[pInstance->pDevice->dwPort][pInstance->address];

  0038c	e59d307c	 ldr         r3, [sp, #0x7C]
  00390	e2833004	 add         r3, r3, #4
  00394	e5933000	 ldr         r3, [r3]
  00398	e2833038	 add         r3, r3, #0x38
  0039c	e5931000	 ldr         r1, [r3]
  003a0	e3a03010	 mov         r3, #0x10
  003a4	e0020391	 mul         r2, r1, r3
  003a8	e59f3784	 ldr         r3, [pc, #0x784]
  003ac	e0831002	 add         r1, r3, r2
  003b0	e59d307c	 ldr         r3, [sp, #0x7C]
  003b4	e2833008	 add         r3, r3, #8
  003b8	e5932000	 ldr         r2, [r3]
  003bc	e3a03004	 mov         r3, #4
  003c0	e0030392	 mul         r3, r2, r3
  003c4	e0813003	 add         r3, r1, r3
  003c8	e5933000	 ldr         r3, [r3]
  003cc	e58d300c	 str         r3, [sp, #0xC]

; 319  :                 pRegAddr = (UINT8*) &pInstance->pSPIChannelRegs->MCSPI_TX;

  003d0	e59d307c	 ldr         r3, [sp, #0x7C]
  003d4	e2833010	 add         r3, r3, #0x10
  003d8	e5933000	 ldr         r3, [r3]
  003dc	e283300c	 add         r3, r3, #0xC
  003e0	e58d3008	 str         r3, [sp, #8]

; 320  :                 paRegAddr = pInstance->pDevice->memBase[0] + offset(OMAP_MCSPI_REGS, MCSPI_TX3);

  003e4	e59d307c	 ldr         r3, [sp, #0x7C]
  003e8	e2833004	 add         r3, r3, #4
  003ec	e5933000	 ldr         r3, [r3]
  003f0	e2833004	 add         r3, r3, #4
  003f4	e5933000	 ldr         r3, [r3]
  003f8	e2833074	 add         r3, r3, #0x74
  003fc	e58d3004	 str         r3, [sp, #4]

; 321  :                 break;

  00400	ea000000	 b           |$LN29@SpiDmaInit|
  00404		 |$LN24@SpiDmaInit|

; 322  : 
; 323  :             default:
; 324  : 				goto cleanUp;

  00404	ea0001a8	 b           |$cleanUp$43934|
  00408		 |$LN29@SpiDmaInit|

; 325  :                 break;
; 326  :         }
; 327  : 
; 328  :         // Copy the default DMA config settings
; 329  :         pInstance->txDmaConfig = TxDmaSettings;

  00408	e59d307c	 ldr         r3, [sp, #0x7C]
  0040c	e2830028	 add         r0, r3, #0x28
  00410	e59f1718	 ldr         r1, [pc, #0x718]
  00414	e3a02030	 mov         r2, #0x30
  00418	eb000000	 bl          memcpy

; 330  : 
; 331  : 
; 332  :         // Determine DMA datatype
; 333  :         dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  0041c	e59d307c	 ldr         r3, [sp, #0x7C]
  00420	e283300c	 add         r3, r3, #0xC
  00424	e5933000	 ldr         r3, [r3]
  00428	e1a03a03	 mov         r3, r3, lsl #20
  0042c	e1a03da3	 mov         r3, r3, lsr #27
  00430	e2833001	 add         r3, r3, #1
  00434	e58d3014	 str         r3, [sp, #0x14]

; 334  :         if( dwWordLen > 16 )

  00438	e59d3014	 ldr         r3, [sp, #0x14]
  0043c	e3530010	 cmp         r3, #0x10
  00440	9a000004	 bls         |$LN23@SpiDmaInit|

; 335  :         {
; 336  :             //  32 bit data type
; 337  :             pInstance->txDmaConfig.elemSize = DMA_CSDP_DATATYPE_S32;

  00444	e59d307c	 ldr         r3, [sp, #0x7C]
  00448	e2832028	 add         r2, r3, #0x28
  0044c	e3a03002	 mov         r3, #2
  00450	e5823000	 str         r3, [r2]
  00454	ea00000b	 b           |$LN22@SpiDmaInit|
  00458		 |$LN23@SpiDmaInit|

; 338  :         }
; 339  :         else if( dwWordLen > 8 )

  00458	e59d3014	 ldr         r3, [sp, #0x14]
  0045c	e3530008	 cmp         r3, #8
  00460	9a000004	 bls         |$LN21@SpiDmaInit|

; 340  :         {
; 341  :             //  16 bit data type
; 342  :             pInstance->txDmaConfig.elemSize = DMA_CSDP_DATATYPE_S16;

  00464	e59d307c	 ldr         r3, [sp, #0x7C]
  00468	e2832028	 add         r2, r3, #0x28
  0046c	e3a03001	 mov         r3, #1
  00470	e5823000	 str         r3, [r2]

; 343  :         }
; 344  :         else

  00474	ea000003	 b           |$LN20@SpiDmaInit|
  00478		 |$LN21@SpiDmaInit|

; 345  :         {
; 346  :             //  8 bit data type
; 347  :             pInstance->txDmaConfig.elemSize = DMA_CSDP_DATATYPE_S8;

  00478	e59d307c	 ldr         r3, [sp, #0x7C]
  0047c	e2832028	 add         r2, r3, #0x28
  00480	e3a03000	 mov         r3, #0
  00484	e5823000	 str         r3, [r2]
  00488		 |$LN20@SpiDmaInit|
  00488		 |$LN22@SpiDmaInit|

; 348  :         }
; 349  : 
; 350  :         // Configure the DMA channel
; 351  :         DmaConfigure(pInstance->hTxDmaChannel, &pInstance->txDmaConfig, dwSyncMask, &pInstance->txDmaInfo);

  00488	e59d307c	 ldr         r3, [sp, #0x7C]
  0048c	e2833088	 add         r3, r3, #0x88
  00490	e59d200c	 ldr         r2, [sp, #0xC]
  00494	e59d107c	 ldr         r1, [sp, #0x7C]
  00498	e2811028	 add         r1, r1, #0x28
  0049c	e59d007c	 ldr         r0, [sp, #0x7C]
  004a0	e2800018	 add         r0, r0, #0x18
  004a4	e5900000	 ldr         r0, [r0]
  004a8	eb000000	 bl          DmaConfigure

; 352  :         DmaSetSrcBuffer(&pInstance->txDmaInfo, pInstance->pTxDmaBuffer, pInstance->paTxDmaBuffer);

  004ac	e59d307c	 ldr         r3, [sp, #0x7C]
  004b0	e28330bc	 add         r3, r3, #0xBC
  004b4	e5932000	 ldr         r2, [r3]
  004b8	e59d307c	 ldr         r3, [sp, #0x7C]
  004bc	e28330b8	 add         r3, r3, #0xB8
  004c0	e5931000	 ldr         r1, [r3]
  004c4	e59d307c	 ldr         r3, [sp, #0x7C]
  004c8	e2830088	 add         r0, r3, #0x88
  004cc	eb000000	 bl          DmaSetSrcBuffer

; 353  :         DmaSetDstBuffer(&pInstance->txDmaInfo, pRegAddr, paRegAddr);

  004d0	e59d2004	 ldr         r2, [sp, #4]
  004d4	e59d1008	 ldr         r1, [sp, #8]
  004d8	e59d307c	 ldr         r3, [sp, #0x7C]
  004dc	e2830088	 add         r0, r3, #0x88
  004e0	eb000000	 bl          DmaSetDstBuffer

; 354  :         DmaSetRepeatMode(&pInstance->txDmaInfo, FALSE);

  004e4	e3a01000	 mov         r1, #0
  004e8	e59d307c	 ldr         r3, [sp, #0x7C]
  004ec	e2830088	 add         r0, r3, #0x88
  004f0	eb000000	 bl          DmaSetRepeatMode

; 355  : 
; 356  : 
; 357  :         // Create DMA interrupt event
; 358  :         pInstance->hTxDmaIntEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  004f4	e3a03000	 mov         r3, #0
  004f8	e3a02000	 mov         r2, #0
  004fc	e3a01000	 mov         r1, #0
  00500	e3a00000	 mov         r0, #0
  00504	eb000000	 bl          CreateEventW
  00508	e58d003c	 str         r0, [sp, #0x3C]
  0050c	e59d307c	 ldr         r3, [sp, #0x7C]
  00510	e2832020	 add         r2, r3, #0x20
  00514	e59d303c	 ldr         r3, [sp, #0x3C]
  00518	e5823000	 str         r3, [r2]

; 359  :         if (pInstance->hTxDmaIntEvent == NULL) {

  0051c	e59d307c	 ldr         r3, [sp, #0x7C]
  00520	e2833020	 add         r3, r3, #0x20
  00524	e5933000	 ldr         r3, [r3]
  00528	e3530000	 cmp         r3, #0
  0052c	1a00000b	 bne         |$LN19@SpiDmaInit|

; 360  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SpiDmaInit: "
; 361  :                 L"Failed create TX DMA interrupt event\r\n"
; 362  :             ));

  00530	e59f35d4	 ldr         r3, [pc, #0x5D4]
  00534	e5933440	 ldr         r3, [r3, #0x440]
  00538	e3130001	 tst         r3, #1
  0053c	0a000004	 beq         |$LN42@SpiDmaInit|
  00540	e59f05e4	 ldr         r0, [pc, #0x5E4]
  00544	eb000000	 bl          NKDbgPrintfW
  00548	e3a03001	 mov         r3, #1
  0054c	e58d3040	 str         r3, [sp, #0x40]
  00550	ea000001	 b           |$LN43@SpiDmaInit|
  00554		 |$LN42@SpiDmaInit|
  00554	e3a03000	 mov         r3, #0
  00558	e58d3040	 str         r3, [sp, #0x40]
  0055c		 |$LN43@SpiDmaInit|

; 363  :             goto cleanUp;

  0055c	ea000152	 b           |$cleanUp$43934|
  00560		 |$LN19@SpiDmaInit|

; 364  :         }
; 365  : 
; 366  :         // Initialize interrupt
; 367  :         if (!DmaEnableInterrupts(pInstance->hTxDmaChannel, pInstance->hTxDmaIntEvent)) {

  00560	e59d307c	 ldr         r3, [sp, #0x7C]
  00564	e2833020	 add         r3, r3, #0x20
  00568	e5931000	 ldr         r1, [r3]
  0056c	e59d307c	 ldr         r3, [sp, #0x7C]
  00570	e2833018	 add         r3, r3, #0x18
  00574	e5930000	 ldr         r0, [r3]
  00578	eb000000	 bl          DmaEnableInterrupts
  0057c	e58d0044	 str         r0, [sp, #0x44]
  00580	e59d3044	 ldr         r3, [sp, #0x44]
  00584	e3530000	 cmp         r3, #0
  00588	1a00000b	 bne         |$LN18@SpiDmaInit|

; 368  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: SpiDmaInit: "
; 369  :                 L"Failed to enable TX DMA interrupt\r\n"
; 370  :             ));

  0058c	e59f3578	 ldr         r3, [pc, #0x578]
  00590	e5933440	 ldr         r3, [r3, #0x440]
  00594	e3130001	 tst         r3, #1
  00598	0a000004	 beq         |$LN44@SpiDmaInit|
  0059c	e59f0584	 ldr         r0, [pc, #0x584]
  005a0	eb000000	 bl          NKDbgPrintfW
  005a4	e3a03001	 mov         r3, #1
  005a8	e58d3048	 str         r3, [sp, #0x48]
  005ac	ea000001	 b           |$LN45@SpiDmaInit|
  005b0		 |$LN44@SpiDmaInit|
  005b0	e3a03000	 mov         r3, #0
  005b4	e58d3048	 str         r3, [sp, #0x48]
  005b8		 |$LN45@SpiDmaInit|

; 371  :             goto cleanUp;

  005b8	ea00013b	 b           |$cleanUp$43934|
  005bc		 |$LN18@SpiDmaInit|
  005bc		 |$LN33@SpiDmaInit|

; 372  :         }
; 373  :     }
; 374  : 
; 375  : 
; 376  : 
; 377  :     //  Setup RX DMA channel if needed
; 378  :     if( pInstance->config & MCSPI_CHCONF_DMAR_ENABLE )

  005bc	e59d307c	 ldr         r3, [sp, #0x7C]
  005c0	e283300c	 add         r3, r3, #0xC
  005c4	e5933000	 ldr         r3, [r3]
  005c8	e3130902	 tst         r3, #2, 18
  005cc	0a000134	 beq         |$LN17@SpiDmaInit|

; 379  :     {
; 380  :         //  Allocate DMA channel
; 381  :         pInstance->hRxDmaChannel = DmaAllocateChannel(DMA_TYPE_SYSTEM);

  005d0	e3a00000	 mov         r0, #0
  005d4	eb000000	 bl          DmaAllocateChannel
  005d8	e58d004c	 str         r0, [sp, #0x4C]
  005dc	e59d307c	 ldr         r3, [sp, #0x7C]
  005e0	e283201c	 add         r2, r3, #0x1C
  005e4	e59d304c	 ldr         r3, [sp, #0x4C]
  005e8	e5823000	 str         r3, [r2]

; 382  :         if (pInstance->hRxDmaChannel == NULL )

  005ec	e59d307c	 ldr         r3, [sp, #0x7C]
  005f0	e283301c	 add         r3, r3, #0x1C
  005f4	e5933000	 ldr         r3, [r3]
  005f8	e3530000	 cmp         r3, #0
  005fc	1a00000b	 bne         |$LN16@SpiDmaInit|

; 383  :             {
; 384  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SpiDmaInit: "
; 385  :                 L"DmaAllocateChannel Rx failed\r\n"
; 386  :             ));

  00600	e59f3504	 ldr         r3, [pc, #0x504]
  00604	e5933440	 ldr         r3, [r3, #0x440]
  00608	e3130001	 tst         r3, #1
  0060c	0a000004	 beq         |$LN46@SpiDmaInit|
  00610	e59f050c	 ldr         r0, [pc, #0x50C]
  00614	eb000000	 bl          NKDbgPrintfW
  00618	e3a03001	 mov         r3, #1
  0061c	e58d3050	 str         r3, [sp, #0x50]
  00620	ea000001	 b           |$LN47@SpiDmaInit|
  00624		 |$LN46@SpiDmaInit|
  00624	e3a03000	 mov         r3, #0
  00628	e58d3050	 str         r3, [sp, #0x50]
  0062c		 |$LN47@SpiDmaInit|

; 387  :             goto cleanUp;

  0062c	ea00011e	 b           |$cleanUp$43934|
  00630		 |$LN16@SpiDmaInit|

; 388  :             }
; 389  : 
; 390  :         // Allocate DMA buffer
; 391  :         pInstance->pRxDmaBuffer = AllocPhysMem(
; 392  :             pInstance->pDevice->dwRxBufferSize, PAGE_READWRITE | PAGE_NOCACHE, 0, 0,
; 393  :             &pInstance->paRxDmaBuffer
; 394  :             );

  00630	e59d307c	 ldr         r3, [sp, #0x7C]
  00634	e28330c4	 add         r3, r3, #0xC4
  00638	e58d3000	 str         r3, [sp]
  0063c	e3a03000	 mov         r3, #0
  00640	e3a02000	 mov         r2, #0
  00644	e3a01f81	 mov         r1, #0x81, 30
  00648	e59d007c	 ldr         r0, [sp, #0x7C]
  0064c	e2800004	 add         r0, r0, #4
  00650	e5900000	 ldr         r0, [r0]
  00654	e2800030	 add         r0, r0, #0x30
  00658	e5900000	 ldr         r0, [r0]
  0065c	eb000000	 bl          AllocPhysMem
  00660	e58d0054	 str         r0, [sp, #0x54]
  00664	e59d307c	 ldr         r3, [sp, #0x7C]
  00668	e28320c0	 add         r2, r3, #0xC0
  0066c	e59d3054	 ldr         r3, [sp, #0x54]
  00670	e5823000	 str         r3, [r2]

; 395  :         if (pInstance->pRxDmaBuffer == NULL)

  00674	e59d307c	 ldr         r3, [sp, #0x7C]
  00678	e28330c0	 add         r3, r3, #0xC0
  0067c	e5933000	 ldr         r3, [r3]
  00680	e3530000	 cmp         r3, #0
  00684	1a000010	 bne         |$LN15@SpiDmaInit|

; 396  :             {
; 397  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SpiDmaInit: "
; 398  :                 L"Failed allocate DMA Rx buffer (size %d)\r\n",
; 399  :                 pInstance->pDevice->dwRxBufferSize
; 400  :             ));

  00688	e59f347c	 ldr         r3, [pc, #0x47C]
  0068c	e5933440	 ldr         r3, [r3, #0x440]
  00690	e3130001	 tst         r3, #1
  00694	0a000009	 beq         |$LN48@SpiDmaInit|
  00698	e59d307c	 ldr         r3, [sp, #0x7C]
  0069c	e2833004	 add         r3, r3, #4
  006a0	e5933000	 ldr         r3, [r3]
  006a4	e2833030	 add         r3, r3, #0x30
  006a8	e5931000	 ldr         r1, [r3]
  006ac	e59f046c	 ldr         r0, [pc, #0x46C]
  006b0	eb000000	 bl          NKDbgPrintfW
  006b4	e3a03001	 mov         r3, #1
  006b8	e58d3058	 str         r3, [sp, #0x58]
  006bc	ea000001	 b           |$LN49@SpiDmaInit|
  006c0		 |$LN48@SpiDmaInit|
  006c0	e3a03000	 mov         r3, #0
  006c4	e58d3058	 str         r3, [sp, #0x58]
  006c8		 |$LN49@SpiDmaInit|

; 401  :             goto cleanUp;

  006c8	ea0000f7	 b           |$cleanUp$43934|
  006cc		 |$LN15@SpiDmaInit|

; 402  :             }
; 403  : 
; 404  : 
; 405  :         // Determine the DMA settings for the SPI channel
; 406  :         switch( pInstance->address )

  006cc	e59d307c	 ldr         r3, [sp, #0x7C]
  006d0	e2833008	 add         r3, r3, #8
  006d4	e5933000	 ldr         r3, [r3]
  006d8	e58d305c	 str         r3, [sp, #0x5C]
  006dc	e59d305c	 ldr         r3, [sp, #0x5C]
  006e0	e3530003	 cmp         r3, #3
  006e4	8a000080	 bhi         |$LN8@SpiDmaInit|
  006e8	e59d205c	 ldr         r2, [sp, #0x5C]
  006ec	e1a03102	 mov         r3, r2, lsl #2
  006f0	e083300f	 add         r3, r3, pc
  006f4	e5933004	 ldr         r3, [r3, #4]
  006f8	e08ff003	 add         pc, pc, r3
  006fc		 |$LN63@SpiDmaInit|
  006fc		 |$LN62@SpiDmaInit|
  006fc		 |$LN64@SpiDmaInit|
  006fc	0000000c	 DCD         0xc
  00700		 |$LN65@SpiDmaInit|
  00700	00000084	 DCD         0x84
  00704		 |$LN66@SpiDmaInit|
  00704	000000fc	 DCD         0xfc
  00708		 |$LN67@SpiDmaInit|
  00708	00000174	 DCD         0x174
  0070c		 |$LN12@SpiDmaInit|

; 407  :         {
; 408  :             case 0:
; 409  :                 //  Channel 0 configuration
; 410  :                 dwSyncMask = dwSyncMasksRX[pInstance->pDevice->dwPort][pInstance->address];

  0070c	e59d307c	 ldr         r3, [sp, #0x7C]
  00710	e2833004	 add         r3, r3, #4
  00714	e5933000	 ldr         r3, [r3]
  00718	e2833038	 add         r3, r3, #0x38
  0071c	e5931000	 ldr         r1, [r3]
  00720	e3a03010	 mov         r3, #0x10
  00724	e0020391	 mul         r2, r1, r3
  00728	e59f33ec	 ldr         r3, [pc, #0x3EC]
  0072c	e0831002	 add         r1, r3, r2
  00730	e59d307c	 ldr         r3, [sp, #0x7C]
  00734	e2833008	 add         r3, r3, #8
  00738	e5932000	 ldr         r2, [r3]
  0073c	e3a03004	 mov         r3, #4
  00740	e0030392	 mul         r3, r2, r3
  00744	e0813003	 add         r3, r1, r3
  00748	e5933000	 ldr         r3, [r3]
  0074c	e58d300c	 str         r3, [sp, #0xC]

; 411  :                 pRegAddr = (UINT8*) &pInstance->pSPIChannelRegs->MCSPI_RX;

  00750	e59d307c	 ldr         r3, [sp, #0x7C]
  00754	e2833010	 add         r3, r3, #0x10
  00758	e5933000	 ldr         r3, [r3]
  0075c	e2833010	 add         r3, r3, #0x10
  00760	e58d3008	 str         r3, [sp, #8]

; 412  :                 paRegAddr = pInstance->pDevice->memBase[0] + offset(OMAP_MCSPI_REGS, MCSPI_RX0);

  00764	e59d307c	 ldr         r3, [sp, #0x7C]
  00768	e2833004	 add         r3, r3, #4
  0076c	e5933000	 ldr         r3, [r3]
  00770	e2833004	 add         r3, r3, #4
  00774	e5933000	 ldr         r3, [r3]
  00778	e283303c	 add         r3, r3, #0x3C
  0077c	e58d3004	 str         r3, [sp, #4]

; 413  :                 break;

  00780	ea00005a	 b           |$LN13@SpiDmaInit|
  00784		 |$LN11@SpiDmaInit|

; 414  : 
; 415  :             case 1:
; 416  :                 //  Channel 1 configuration
; 417  :                 dwSyncMask = dwSyncMasksRX[pInstance->pDevice->dwPort][pInstance->address];

  00784	e59d307c	 ldr         r3, [sp, #0x7C]
  00788	e2833004	 add         r3, r3, #4
  0078c	e5933000	 ldr         r3, [r3]
  00790	e2833038	 add         r3, r3, #0x38
  00794	e5931000	 ldr         r1, [r3]
  00798	e3a03010	 mov         r3, #0x10
  0079c	e0020391	 mul         r2, r1, r3
  007a0	e59f3374	 ldr         r3, [pc, #0x374]
  007a4	e0831002	 add         r1, r3, r2
  007a8	e59d307c	 ldr         r3, [sp, #0x7C]
  007ac	e2833008	 add         r3, r3, #8
  007b0	e5932000	 ldr         r2, [r3]
  007b4	e3a03004	 mov         r3, #4
  007b8	e0030392	 mul         r3, r2, r3
  007bc	e0813003	 add         r3, r1, r3
  007c0	e5933000	 ldr         r3, [r3]
  007c4	e58d300c	 str         r3, [sp, #0xC]

; 418  :                 pRegAddr = (UINT8*) &pInstance->pSPIChannelRegs->MCSPI_RX;

  007c8	e59d307c	 ldr         r3, [sp, #0x7C]
  007cc	e2833010	 add         r3, r3, #0x10
  007d0	e5933000	 ldr         r3, [r3]
  007d4	e2833010	 add         r3, r3, #0x10
  007d8	e58d3008	 str         r3, [sp, #8]

; 419  :                 paRegAddr = pInstance->pDevice->memBase[0] + offset(OMAP_MCSPI_REGS, MCSPI_RX1);

  007dc	e59d307c	 ldr         r3, [sp, #0x7C]
  007e0	e2833004	 add         r3, r3, #4
  007e4	e5933000	 ldr         r3, [r3]
  007e8	e2833004	 add         r3, r3, #4
  007ec	e5933000	 ldr         r3, [r3]
  007f0	e2833050	 add         r3, r3, #0x50
  007f4	e58d3004	 str         r3, [sp, #4]

; 420  :                 break;

  007f8	ea00003c	 b           |$LN13@SpiDmaInit|
  007fc		 |$LN10@SpiDmaInit|

; 421  : 
; 422  :             case 2:
; 423  :                 //  Channel 2 configuration
; 424  :                 dwSyncMask = dwSyncMasksRX[pInstance->pDevice->dwPort][pInstance->address];

  007fc	e59d307c	 ldr         r3, [sp, #0x7C]
  00800	e2833004	 add         r3, r3, #4
  00804	e5933000	 ldr         r3, [r3]
  00808	e2833038	 add         r3, r3, #0x38
  0080c	e5931000	 ldr         r1, [r3]
  00810	e3a03010	 mov         r3, #0x10
  00814	e0020391	 mul         r2, r1, r3
  00818	e59f32fc	 ldr         r3, [pc, #0x2FC]
  0081c	e0831002	 add         r1, r3, r2
  00820	e59d307c	 ldr         r3, [sp, #0x7C]
  00824	e2833008	 add         r3, r3, #8
  00828	e5932000	 ldr         r2, [r3]
  0082c	e3a03004	 mov         r3, #4
  00830	e0030392	 mul         r3, r2, r3
  00834	e0813003	 add         r3, r1, r3
  00838	e5933000	 ldr         r3, [r3]
  0083c	e58d300c	 str         r3, [sp, #0xC]

; 425  :                 pRegAddr = (UINT8*) &pInstance->pSPIChannelRegs->MCSPI_RX;

  00840	e59d307c	 ldr         r3, [sp, #0x7C]
  00844	e2833010	 add         r3, r3, #0x10
  00848	e5933000	 ldr         r3, [r3]
  0084c	e2833010	 add         r3, r3, #0x10
  00850	e58d3008	 str         r3, [sp, #8]

; 426  :                 paRegAddr = pInstance->pDevice->memBase[0] + offset(OMAP_MCSPI_REGS, MCSPI_RX2);

  00854	e59d307c	 ldr         r3, [sp, #0x7C]
  00858	e2833004	 add         r3, r3, #4
  0085c	e5933000	 ldr         r3, [r3]
  00860	e2833004	 add         r3, r3, #4
  00864	e5933000	 ldr         r3, [r3]
  00868	e2833064	 add         r3, r3, #0x64
  0086c	e58d3004	 str         r3, [sp, #4]

; 427  :                 break;

  00870	ea00001e	 b           |$LN13@SpiDmaInit|
  00874		 |$LN9@SpiDmaInit|

; 428  : 
; 429  :             case 3:
; 430  :                 //  Channel 3 configuration
; 431  :                 dwSyncMask = dwSyncMasksRX[pInstance->pDevice->dwPort][pInstance->address];

  00874	e59d307c	 ldr         r3, [sp, #0x7C]
  00878	e2833004	 add         r3, r3, #4
  0087c	e5933000	 ldr         r3, [r3]
  00880	e2833038	 add         r3, r3, #0x38
  00884	e5931000	 ldr         r1, [r3]
  00888	e3a03010	 mov         r3, #0x10
  0088c	e0020391	 mul         r2, r1, r3
  00890	e59f3284	 ldr         r3, [pc, #0x284]
  00894	e0831002	 add         r1, r3, r2
  00898	e59d307c	 ldr         r3, [sp, #0x7C]
  0089c	e2833008	 add         r3, r3, #8
  008a0	e5932000	 ldr         r2, [r3]
  008a4	e3a03004	 mov         r3, #4
  008a8	e0030392	 mul         r3, r2, r3
  008ac	e0813003	 add         r3, r1, r3
  008b0	e5933000	 ldr         r3, [r3]
  008b4	e58d300c	 str         r3, [sp, #0xC]

; 432  :                 pRegAddr = (UINT8*) &pInstance->pSPIChannelRegs->MCSPI_RX;

  008b8	e59d307c	 ldr         r3, [sp, #0x7C]
  008bc	e2833010	 add         r3, r3, #0x10
  008c0	e5933000	 ldr         r3, [r3]
  008c4	e2833010	 add         r3, r3, #0x10
  008c8	e58d3008	 str         r3, [sp, #8]

; 433  :                 paRegAddr = pInstance->pDevice->memBase[0] + offset(OMAP_MCSPI_REGS, MCSPI_RX3);

  008cc	e59d307c	 ldr         r3, [sp, #0x7C]
  008d0	e2833004	 add         r3, r3, #4
  008d4	e5933000	 ldr         r3, [r3]
  008d8	e2833004	 add         r3, r3, #4
  008dc	e5933000	 ldr         r3, [r3]
  008e0	e2833078	 add         r3, r3, #0x78
  008e4	e58d3004	 str         r3, [sp, #4]

; 434  :                 break;

  008e8	ea000000	 b           |$LN13@SpiDmaInit|
  008ec		 |$LN8@SpiDmaInit|

; 435  : 
; 436  :             default:
; 437  : 				goto cleanUp;

  008ec	ea00006e	 b           |$cleanUp$43934|
  008f0		 |$LN13@SpiDmaInit|

; 438  :                 break;
; 439  :         }
; 440  : 
; 441  :         // Copy the default DMA config settings
; 442  :         pInstance->rxDmaConfig = RxDmaSettings;

  008f0	e59d307c	 ldr         r3, [sp, #0x7C]
  008f4	e2830058	 add         r0, r3, #0x58
  008f8	e59f1218	 ldr         r1, [pc, #0x218]
  008fc	e3a02030	 mov         r2, #0x30
  00900	eb000000	 bl          memcpy

; 443  : 
; 444  : 
; 445  :         // Determine DMA datatype
; 446  :         dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  00904	e59d307c	 ldr         r3, [sp, #0x7C]
  00908	e283300c	 add         r3, r3, #0xC
  0090c	e5933000	 ldr         r3, [r3]
  00910	e1a03a03	 mov         r3, r3, lsl #20
  00914	e1a03da3	 mov         r3, r3, lsr #27
  00918	e2833001	 add         r3, r3, #1
  0091c	e58d3014	 str         r3, [sp, #0x14]

; 447  :         if( dwWordLen > 16 )

  00920	e59d3014	 ldr         r3, [sp, #0x14]
  00924	e3530010	 cmp         r3, #0x10
  00928	9a000004	 bls         |$LN7@SpiDmaInit|

; 448  :         {
; 449  :             //  32 bit data type
; 450  :             pInstance->rxDmaConfig.elemSize = DMA_CSDP_DATATYPE_S32;

  0092c	e59d307c	 ldr         r3, [sp, #0x7C]
  00930	e2832058	 add         r2, r3, #0x58
  00934	e3a03002	 mov         r3, #2
  00938	e5823000	 str         r3, [r2]
  0093c	ea00000b	 b           |$LN6@SpiDmaInit|
  00940		 |$LN7@SpiDmaInit|

; 451  :         }
; 452  :         else if( dwWordLen > 8 )

  00940	e59d3014	 ldr         r3, [sp, #0x14]
  00944	e3530008	 cmp         r3, #8
  00948	9a000004	 bls         |$LN5@SpiDmaInit|

; 453  :         {
; 454  :             //  16 bit data type
; 455  :             pInstance->rxDmaConfig.elemSize = DMA_CSDP_DATATYPE_S16;

  0094c	e59d307c	 ldr         r3, [sp, #0x7C]
  00950	e2832058	 add         r2, r3, #0x58
  00954	e3a03001	 mov         r3, #1
  00958	e5823000	 str         r3, [r2]

; 456  :         }
; 457  :         else

  0095c	ea000003	 b           |$LN4@SpiDmaInit|
  00960		 |$LN5@SpiDmaInit|

; 458  :         {
; 459  :             //  8 bit data type
; 460  :             pInstance->rxDmaConfig.elemSize = DMA_CSDP_DATATYPE_S8;

  00960	e59d307c	 ldr         r3, [sp, #0x7C]
  00964	e2832058	 add         r2, r3, #0x58
  00968	e3a03000	 mov         r3, #0
  0096c	e5823000	 str         r3, [r2]
  00970		 |$LN4@SpiDmaInit|
  00970		 |$LN6@SpiDmaInit|

; 461  :         }
; 462  : 
; 463  :         // Configure the DMA channel
; 464  :         DmaConfigure(pInstance->hRxDmaChannel, &pInstance->rxDmaConfig, dwSyncMask, &pInstance->rxDmaInfo);

  00970	e59d307c	 ldr         r3, [sp, #0x7C]
  00974	e28330a0	 add         r3, r3, #0xA0
  00978	e59d200c	 ldr         r2, [sp, #0xC]
  0097c	e59d107c	 ldr         r1, [sp, #0x7C]
  00980	e2811058	 add         r1, r1, #0x58
  00984	e59d007c	 ldr         r0, [sp, #0x7C]
  00988	e280001c	 add         r0, r0, #0x1C
  0098c	e5900000	 ldr         r0, [r0]
  00990	eb000000	 bl          DmaConfigure

; 465  :         DmaSetSrcBuffer(&pInstance->rxDmaInfo, pRegAddr, paRegAddr);

  00994	e59d2004	 ldr         r2, [sp, #4]
  00998	e59d1008	 ldr         r1, [sp, #8]
  0099c	e59d307c	 ldr         r3, [sp, #0x7C]
  009a0	e28300a0	 add         r0, r3, #0xA0
  009a4	eb000000	 bl          DmaSetSrcBuffer

; 466  :         DmaSetDstBuffer(&pInstance->rxDmaInfo, pInstance->pRxDmaBuffer, pInstance->paRxDmaBuffer);

  009a8	e59d307c	 ldr         r3, [sp, #0x7C]
  009ac	e28330c4	 add         r3, r3, #0xC4
  009b0	e5932000	 ldr         r2, [r3]
  009b4	e59d307c	 ldr         r3, [sp, #0x7C]
  009b8	e28330c0	 add         r3, r3, #0xC0
  009bc	e5931000	 ldr         r1, [r3]
  009c0	e59d307c	 ldr         r3, [sp, #0x7C]
  009c4	e28300a0	 add         r0, r3, #0xA0
  009c8	eb000000	 bl          DmaSetDstBuffer

; 467  :         DmaSetRepeatMode(&pInstance->rxDmaInfo, FALSE);

  009cc	e3a01000	 mov         r1, #0
  009d0	e59d307c	 ldr         r3, [sp, #0x7C]
  009d4	e28300a0	 add         r0, r3, #0xA0
  009d8	eb000000	 bl          DmaSetRepeatMode

; 468  : 
; 469  : 
; 470  :         // Create DMA interrupt event
; 471  :         pInstance->hRxDmaIntEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  009dc	e3a03000	 mov         r3, #0
  009e0	e3a02000	 mov         r2, #0
  009e4	e3a01000	 mov         r1, #0
  009e8	e3a00000	 mov         r0, #0
  009ec	eb000000	 bl          CreateEventW
  009f0	e58d0060	 str         r0, [sp, #0x60]
  009f4	e59d307c	 ldr         r3, [sp, #0x7C]
  009f8	e2832024	 add         r2, r3, #0x24
  009fc	e59d3060	 ldr         r3, [sp, #0x60]
  00a00	e5823000	 str         r3, [r2]

; 472  :         if (pInstance->hRxDmaIntEvent == NULL) {

  00a04	e59d307c	 ldr         r3, [sp, #0x7C]
  00a08	e2833024	 add         r3, r3, #0x24
  00a0c	e5933000	 ldr         r3, [r3]
  00a10	e3530000	 cmp         r3, #0
  00a14	1a00000b	 bne         |$LN3@SpiDmaInit|

; 473  :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SpiDmaInit: "
; 474  :                 L"Failed create RX DMA interrupt event\r\n"
; 475  :             ));

  00a18	e59f30ec	 ldr         r3, [pc, #0xEC]
  00a1c	e5933440	 ldr         r3, [r3, #0x440]
  00a20	e3130001	 tst         r3, #1
  00a24	0a000004	 beq         |$LN50@SpiDmaInit|
  00a28	e59f00e4	 ldr         r0, [pc, #0xE4]
  00a2c	eb000000	 bl          NKDbgPrintfW
  00a30	e3a03001	 mov         r3, #1
  00a34	e58d3064	 str         r3, [sp, #0x64]
  00a38	ea000001	 b           |$LN51@SpiDmaInit|
  00a3c		 |$LN50@SpiDmaInit|
  00a3c	e3a03000	 mov         r3, #0
  00a40	e58d3064	 str         r3, [sp, #0x64]
  00a44		 |$LN51@SpiDmaInit|

; 476  :             goto cleanUp;

  00a44	ea000018	 b           |$cleanUp$43934|
  00a48		 |$LN3@SpiDmaInit|

; 477  :         }
; 478  : 
; 479  :         // Initialize interrupt
; 480  :         if (!DmaEnableInterrupts(pInstance->hRxDmaChannel, pInstance->hRxDmaIntEvent)) {

  00a48	e59d307c	 ldr         r3, [sp, #0x7C]
  00a4c	e2833024	 add         r3, r3, #0x24
  00a50	e5931000	 ldr         r1, [r3]
  00a54	e59d307c	 ldr         r3, [sp, #0x7C]
  00a58	e283301c	 add         r3, r3, #0x1C
  00a5c	e5930000	 ldr         r0, [r3]
  00a60	eb000000	 bl          DmaEnableInterrupts
  00a64	e58d0068	 str         r0, [sp, #0x68]
  00a68	e59d3068	 ldr         r3, [sp, #0x68]
  00a6c	e3530000	 cmp         r3, #0
  00a70	1a00000b	 bne         |$LN2@SpiDmaInit|

; 481  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: SpiDmaInit: "
; 482  :                 L"Failed to enable RX DMA interrupt\r\n"
; 483  :             ));

  00a74	e59f3090	 ldr         r3, [pc, #0x90]
  00a78	e5933440	 ldr         r3, [r3, #0x440]
  00a7c	e3130001	 tst         r3, #1
  00a80	0a000004	 beq         |$LN52@SpiDmaInit|
  00a84	e59f0084	 ldr         r0, [pc, #0x84]
  00a88	eb000000	 bl          NKDbgPrintfW
  00a8c	e3a03001	 mov         r3, #1
  00a90	e58d306c	 str         r3, [sp, #0x6C]
  00a94	ea000001	 b           |$LN53@SpiDmaInit|
  00a98		 |$LN52@SpiDmaInit|
  00a98	e3a03000	 mov         r3, #0
  00a9c	e58d306c	 str         r3, [sp, #0x6C]
  00aa0		 |$LN53@SpiDmaInit|

; 484  :             goto cleanUp;

  00aa0	ea000001	 b           |$cleanUp$43934|
  00aa4		 |$LN2@SpiDmaInit|
  00aa4		 |$LN17@SpiDmaInit|

; 485  :         }
; 486  :     }
; 487  : 
; 488  :     //  Success
; 489  :     bResult = TRUE;

  00aa4	e3a03001	 mov         r3, #1
  00aa8	e58d3010	 str         r3, [sp, #0x10]
  00aac		 |$cleanUp$43934|

; 490  : 
; 491  : cleanUp:
; 492  :     DEBUGMSG(ZONE_DMA, (
; 493  :         L"-SpiDmaInit() rc = \r\n", bResult
; 494  :     ));

  00aac	e59f3058	 ldr         r3, [pc, #0x58]
  00ab0	e5933440	 ldr         r3, [r3, #0x440]
  00ab4	e3130020	 tst         r3, #0x20
  00ab8	0a000005	 beq         |$LN54@SpiDmaInit|
  00abc	e59d1010	 ldr         r1, [sp, #0x10]
  00ac0	e59f0040	 ldr         r0, [pc, #0x40]
  00ac4	eb000000	 bl          NKDbgPrintfW
  00ac8	e3a03001	 mov         r3, #1
  00acc	e58d3070	 str         r3, [sp, #0x70]
  00ad0	ea000001	 b           |$LN55@SpiDmaInit|
  00ad4		 |$LN54@SpiDmaInit|
  00ad4	e3a03000	 mov         r3, #0
  00ad8	e58d3070	 str         r3, [sp, #0x70]
  00adc		 |$LN55@SpiDmaInit|

; 495  : 
; 496  :     //  Cleanup DMA on failures
; 497  :     if( bResult == FALSE )

  00adc	e59d3010	 ldr         r3, [sp, #0x10]
  00ae0	e3530000	 cmp         r3, #0
  00ae4	1a000001	 bne         |$LN1@SpiDmaInit|

; 498  :     {
; 499  :         SpiDmaDeinit(pInstance);

  00ae8	e59d007c	 ldr         r0, [sp, #0x7C]
  00aec	eb000000	 bl          SpiDmaDeinit
  00af0		 |$LN1@SpiDmaInit|

; 500  :     }
; 501  : 
; 502  :     //  Return result
; 503  :     return bResult;

  00af0	e59d3010	 ldr         r3, [sp, #0x10]
  00af4	e58d3020	 str         r3, [sp, #0x20]

; 504  : }

  00af8	e59d0020	 ldr         r0, [sp, #0x20]
  00afc	e28dd074	 add         sp, sp, #0x74
  00b00	e89d6000	 ldmia       sp, {sp, lr}
  00b04	e12fff1e	 bx          lr
  00b08		 |$LN71@SpiDmaInit|
  00b08		 |$LN72@SpiDmaInit|
  00b08	00000000	 DCD         |??_C@_1CM@BEBDPDLN@?$AA?9?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00b0c		 |$LN73@SpiDmaInit|
  00b0c	00000000	 DCD         |dpCurSettings|
  00b10		 |$LN74@SpiDmaInit|
  00b10	00000000	 DCD         |??_C@_1GO@LMBDDML@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa@|
  00b14		 |$LN75@SpiDmaInit|
  00b14	00000000	 DCD         |??_C@_1HE@FMAGIJKG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe@|
  00b18		 |$LN76@SpiDmaInit|
  00b18	00000000	 DCD         |RxDmaSettings|
  00b1c		 |$LN77@SpiDmaInit|
  00b1c	00000000	 DCD         |dwSyncMasksRX|
  00b20		 |$LN78@SpiDmaInit|
  00b20	00000000	 DCD         |??_C@_1HK@POGOOKNK@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@|
  00b24		 |$LN79@SpiDmaInit|
  00b24	00000000	 DCD         |??_C@_1GE@CGGBCOBI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAh@|
  00b28		 |$LN80@SpiDmaInit|
  00b28	00000000	 DCD         |??_C@_1GO@JABBDDAF@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAe?$AAn?$AAa@|
  00b2c		 |$LN81@SpiDmaInit|
  00b2c	00000000	 DCD         |??_C@_1HE@PCECNBAC@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe@|
  00b30		 |$LN82@SpiDmaInit|
  00b30	00000000	 DCD         |TxDmaSettings|
  00b34		 |$LN83@SpiDmaInit|
  00b34	00000000	 DCD         |dwSyncMasksTX|
  00b38		 |$LN84@SpiDmaInit|
  00b38	00000000	 DCD         |??_C@_1HK@CJOHLJG@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa@|
  00b3c		 |$LN85@SpiDmaInit|
  00b3c	00000000	 DCD         |??_C@_1GE@JGFMHMEI@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAD?$AAm?$AAa?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAC?$AAh@|
  00b40		 |$LN86@SpiDmaInit|
  00b40	00000000	 DCD         |??_C@_1CM@HAOEDEMO@?$AA?$CL?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAI?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00b44		 |$M44156|

			 ENDP  ; |SpiDmaInit|

	IMPORT	|memset|
	IMPORT	|DmaGetLogicalChannel|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T44180| DCD	|$LN8@DmaConfigu|
	DCD	0x40007d04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaConfigure| PROC

; 166  : {

  00000		 |$LN8@DmaConfigu|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d000f	 stmdb       sp!, {r0 - r3}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M44177|

; 167  :     BOOL rc = FALSE;

  00010	e3a03000	 mov         r3, #0
  00014	e58d3004	 str         r3, [sp, #4]

; 168  :     OMAP_DMA_LC_REGS *pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(hDmaChannel);

  00018	e59d0018	 ldr         r0, [sp, #0x18]
  0001c	eb000000	 bl          DmaGetLogicalChannel
  00020	e58d000c	 str         r0, [sp, #0xC]
  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e58d3000	 str         r3, [sp]

; 169  :     if (pDmaLcReg == NULL || pConfigInfo == NULL)

  0002c	e59d3000	 ldr         r3, [sp]
  00030	e3530000	 cmp         r3, #0
  00034	0a000002	 beq         |$LN2@DmaConfigu|
  00038	e59d301c	 ldr         r3, [sp, #0x1C]
  0003c	e3530000	 cmp         r3, #0
  00040	1a000000	 bne         |$LN3@DmaConfigu|
  00044		 |$LN2@DmaConfigu|

; 170  :         {
; 171  :         goto cleanUp;

  00044	ea000064	 b           |$cleanUp$43431|
  00048		 |$LN3@DmaConfigu|

; 172  :         }
; 173  : 
; 174  :     // initialize dma DataInfo if necessary
; 175  :     if (pDataInfo != NULL)

  00048	e59d3024	 ldr         r3, [sp, #0x24]
  0004c	e3530000	 cmp         r3, #0
  00050	0a00000b	 beq         |$LN1@DmaConfigu|

; 176  :         {
; 177  :         memset(pDataInfo, 0, sizeof(DmaDataInfo_t));

  00054	e3a02018	 mov         r2, #0x18
  00058	e3a01000	 mov         r1, #0
  0005c	e59d0024	 ldr         r0, [sp, #0x24]
  00060	eb000000	 bl          memset

; 178  :         pDataInfo->hDmaChannel = hDmaChannel;

  00064	e59d3024	 ldr         r3, [sp, #0x24]
  00068	e2832010	 add         r2, r3, #0x10
  0006c	e59d3018	 ldr         r3, [sp, #0x18]
  00070	e5823000	 str         r3, [r2]

; 179  :         pDataInfo->pDmaLcReg = pDmaLcReg;

  00074	e59d3024	 ldr         r3, [sp, #0x24]
  00078	e2832014	 add         r2, r3, #0x14
  0007c	e59d3000	 ldr         r3, [sp]
  00080	e5823000	 str         r3, [r2]
  00084		 |$LN1@DmaConfigu|

; 180  :         }
; 181  : 
; 182  :     // Disable the DMA in case it is running
; 183  :     CLRREG32(&pDmaLcReg->CCR, DMA_CCR_ENABLE);

  00084	e59d3000	 ldr         r3, [sp]
  00088	e5932000	 ldr         r2, [r3]
  0008c	e3e03080	 mvn         r3, #0x80
  00090	e0022003	 and         r2, r2, r3
  00094	e59d3000	 ldr         r3, [sp]
  00098	e5832000	 str         r2, [r3]

; 184  : 
; 185  :     // update syncmap
; 186  :     pConfigInfo->syncMap = syncMap;

  0009c	e59d301c	 ldr         r3, [sp, #0x1C]
  000a0	e283202c	 add         r2, r3, #0x2C
  000a4	e59d3020	 ldr         r3, [sp, #0x20]
  000a8	e5823000	 str         r3, [r2]

; 187  : 
; 188  :     // Initialize logical channel registers
; 189  :     //
; 190  :     OUTREG32(&pDmaLcReg->CCR, 0);

  000ac	e59d2000	 ldr         r2, [sp]
  000b0	e3a03000	 mov         r3, #0
  000b4	e5823000	 str         r3, [r2]

; 191  :     OUTREG32(&pDmaLcReg->CLNK_CTRL, 0);

  000b8	e59d3000	 ldr         r3, [sp]
  000bc	e2832004	 add         r2, r3, #4
  000c0	e3a03000	 mov         r3, #0
  000c4	e5823000	 str         r3, [r2]

; 192  :     OUTREG32(&pDmaLcReg->COLOR, 0);

  000c8	e59d3000	 ldr         r3, [sp]
  000cc	e2832044	 add         r2, r3, #0x44
  000d0	e3a03000	 mov         r3, #0
  000d4	e5823000	 str         r3, [r2]

; 193  : 
; 194  :     // update CSDP
; 195  :     //  DATA_TYPE
; 196  :     //  DST
; 197  :     //  SRC
; 198  :     OUTREG32(&pDmaLcReg->CSDP, pConfigInfo->elemSize);

  000d8	e59d3000	 ldr         r3, [sp]
  000dc	e2832010	 add         r2, r3, #0x10
  000e0	e59d301c	 ldr         r3, [sp, #0x1C]
  000e4	e5933000	 ldr         r3, [r3]
  000e8	e5823000	 str         r3, [r2]

; 199  : 
; 200  :     // update CCR
; 201  :     //  DST_MODE
; 202  :     //  SRC_MODE
; 203  :     //  PRIO
; 204  :     //  SYNC
; 205  :     //
; 206  :     OUTREG32(&pDmaLcReg->CCR, pConfigInfo->srcAddrMode |
; 207  :         pConfigInfo->dstAddrMode | pConfigInfo->dmaPrio |
; 208  :         DMA_CCR_SYNC(syncMap) | pConfigInfo->synchTrigger |
; 209  :         pConfigInfo->synchMode
; 210  :         );

  000ec	e59d301c	 ldr         r3, [sp, #0x1C]
  000f0	e283200c	 add         r2, r3, #0xC
  000f4	e59d301c	 ldr         r3, [sp, #0x1C]
  000f8	e2833018	 add         r3, r3, #0x18
  000fc	e5922000	 ldr         r2, [r2]
  00100	e5933000	 ldr         r3, [r3]
  00104	e1822003	 orr         r2, r2, r3
  00108	e59d301c	 ldr         r3, [sp, #0x1C]
  0010c	e283301c	 add         r3, r3, #0x1C
  00110	e5933000	 ldr         r3, [r3]
  00114	e1821003	 orr         r1, r2, r3
  00118	e59d3020	 ldr         r3, [sp, #0x20]
  0011c	e203201f	 and         r2, r3, #0x1F
  00120	e59d3020	 ldr         r3, [sp, #0x20]
  00124	e2033060	 and         r3, r3, #0x60
  00128	e1a03703	 mov         r3, r3, lsl #14
  0012c	e1823003	 orr         r3, r2, r3
  00130	e1812003	 orr         r2, r1, r3
  00134	e59d301c	 ldr         r3, [sp, #0x1C]
  00138	e2833020	 add         r3, r3, #0x20
  0013c	e5933000	 ldr         r3, [r3]
  00140	e1822003	 orr         r2, r2, r3
  00144	e59d301c	 ldr         r3, [sp, #0x1C]
  00148	e2833024	 add         r3, r3, #0x24
  0014c	e5933000	 ldr         r3, [r3]
  00150	e1822003	 orr         r2, r2, r3
  00154	e59d3000	 ldr         r3, [sp]
  00158	e5832000	 str         r2, [r3]

; 211  : 
; 212  :     // update CSEI
; 213  :     //
; 214  :     OUTREG32(&pDmaLcReg->CSEI, pConfigInfo->srcElemIndex);

  0015c	e59d301c	 ldr         r3, [sp, #0x1C]
  00160	e2831004	 add         r1, r3, #4
  00164	e59d3000	 ldr         r3, [sp]
  00168	e2832024	 add         r2, r3, #0x24
  0016c	e5913000	 ldr         r3, [r1]
  00170	e5823000	 str         r3, [r2]

; 215  : 
; 216  :     // update CDEI
; 217  :     //
; 218  :     OUTREG32(&pDmaLcReg->CDEI, pConfigInfo->dstElemIndex);

  00174	e59d301c	 ldr         r3, [sp, #0x1C]
  00178	e2831010	 add         r1, r3, #0x10
  0017c	e59d3000	 ldr         r3, [sp]
  00180	e283202c	 add         r2, r3, #0x2C
  00184	e5913000	 ldr         r3, [r1]
  00188	e5823000	 str         r3, [r2]

; 219  : 
; 220  :     // update CSFI
; 221  :     //
; 222  :     OUTREG32(&pDmaLcReg->CSFI, pConfigInfo->srcFrameIndex);

  0018c	e59d301c	 ldr         r3, [sp, #0x1C]
  00190	e2831008	 add         r1, r3, #8
  00194	e59d3000	 ldr         r3, [sp]
  00198	e2832028	 add         r2, r3, #0x28
  0019c	e5913000	 ldr         r3, [r1]
  001a0	e5823000	 str         r3, [r2]

; 223  : 
; 224  :     // update CDFI
; 225  :     //
; 226  :     OUTREG32(&pDmaLcReg->CDFI, pConfigInfo->dstFrameIndex);

  001a4	e59d301c	 ldr         r3, [sp, #0x1C]
  001a8	e2831014	 add         r1, r3, #0x14
  001ac	e59d3000	 ldr         r3, [sp]
  001b0	e2832030	 add         r2, r3, #0x30
  001b4	e5913000	 ldr         r3, [r1]
  001b8	e5823000	 str         r3, [r2]

; 227  : 
; 228  :     // update CICR
; 229  :     //
; 230  :     OUTREG32(&pDmaLcReg->CICR , pConfigInfo->interrupts);

  001bc	e59d301c	 ldr         r3, [sp, #0x1C]
  001c0	e2831028	 add         r1, r3, #0x28
  001c4	e59d3000	 ldr         r3, [sp]
  001c8	e2832008	 add         r2, r3, #8
  001cc	e5913000	 ldr         r3, [r1]
  001d0	e5823000	 str         r3, [r2]

; 231  :     
; 232  :     rc = TRUE;

  001d4	e3a03001	 mov         r3, #1
  001d8	e58d3004	 str         r3, [sp, #4]
  001dc		 |$cleanUp$43431|

; 233  : 
; 234  : cleanUp:
; 235  :     return rc;

  001dc	e59d3004	 ldr         r3, [sp, #4]
  001e0	e58d3008	 str         r3, [sp, #8]

; 236  : }

  001e4	e59d0008	 ldr         r0, [sp, #8]
  001e8	e28dd010	 add         sp, sp, #0x10
  001ec	e89d6000	 ldmia       sp, {sp, lr}
  001f0	e12fff1e	 bx          lr
  001f4		 |$M44178|

			 ENDP  ; |DmaConfigure|


  00000			 AREA	 |.pdata|, PDATA
|$T44187| DCD	|$LN6@DmaSetDstB|
	DCD	0x40001e03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetDstBuffer| PROC

; 330  : {

  00000		 |$LN6@DmaSetDstB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44184|

; 331  :     // save values
; 332  :     //
; 333  :     pDataInfo->pDstBuffer = pBuffer;

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832004	 add         r2, r3, #4
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]

; 334  :     pDataInfo->PhysAddrDstBuffer = PhysAddr;

  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e283200c	 add         r2, r3, #0xC
  00024	e59d3010	 ldr         r3, [sp, #0x10]
  00028	e5823000	 str         r3, [r2]

; 335  : 
; 336  :     // set destination address
; 337  :     //
; 338  :     if (pDataInfo->pDmaLcReg != NULL)

  0002c	e59d3008	 ldr         r3, [sp, #8]
  00030	e2833014	 add         r3, r3, #0x14
  00034	e5933000	 ldr         r3, [r3]
  00038	e3530000	 cmp         r3, #0
  0003c	0a00000b	 beq         |$LN1@DmaSetDstB|

; 339  :         {
; 340  :         OUTREG32(&pDataInfo->pDmaLcReg->CDSA, PhysAddr);

  00040	e59d3008	 ldr         r3, [sp, #8]
  00044	e2833014	 add         r3, r3, #0x14
  00048	e5933000	 ldr         r3, [r3]
  0004c	e2832020	 add         r2, r3, #0x20
  00050	e59d3010	 ldr         r3, [sp, #0x10]
  00054	e5823000	 str         r3, [r2]

; 341  :         OUTREG32(&pDataInfo->pDmaLcReg->CDAC, PhysAddr);

  00058	e59d3008	 ldr         r3, [sp, #8]
  0005c	e2833014	 add         r3, r3, #0x14
  00060	e5933000	 ldr         r3, [r3]
  00064	e2832038	 add         r2, r3, #0x38
  00068	e59d3010	 ldr         r3, [sp, #0x10]
  0006c	e5823000	 str         r3, [r2]
  00070		 |$LN1@DmaSetDstB|

; 342  :         }
; 343  : }

  00070	e89d6000	 ldmia       sp, {sp, lr}
  00074	e12fff1e	 bx          lr
  00078		 |$M44185|

			 ENDP  ; |DmaSetDstBuffer|


  00000			 AREA	 |.pdata|, PDATA
|$T44194| DCD	|$LN6@DmaSetSrcB|
	DCD	0x40001d03
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetSrcBuffer| PROC

; 358  : {

  00000		 |$LN6@DmaSetSrcB|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44191|

; 359  :     // save values
; 360  :     //
; 361  :     pDataInfo->pSrcBuffer = pBuffer;

  0000c	e59d200c	 ldr         r2, [sp, #0xC]
  00010	e59d3008	 ldr         r3, [sp, #8]
  00014	e5832000	 str         r2, [r3]

; 362  :     pDataInfo->PhysAddrSrcBuffer = PhysAddr;

  00018	e59d3008	 ldr         r3, [sp, #8]
  0001c	e2832008	 add         r2, r3, #8
  00020	e59d3010	 ldr         r3, [sp, #0x10]
  00024	e5823000	 str         r3, [r2]

; 363  : 
; 364  :     // set source address
; 365  :     //
; 366  :     if (pDataInfo->pDmaLcReg != NULL)

  00028	e59d3008	 ldr         r3, [sp, #8]
  0002c	e2833014	 add         r3, r3, #0x14
  00030	e5933000	 ldr         r3, [r3]
  00034	e3530000	 cmp         r3, #0
  00038	0a00000b	 beq         |$LN1@DmaSetSrcB|

; 367  :         {
; 368  :         OUTREG32(&pDataInfo->pDmaLcReg->CSSA, PhysAddr);

  0003c	e59d3008	 ldr         r3, [sp, #8]
  00040	e2833014	 add         r3, r3, #0x14
  00044	e5933000	 ldr         r3, [r3]
  00048	e283201c	 add         r2, r3, #0x1C
  0004c	e59d3010	 ldr         r3, [sp, #0x10]
  00050	e5823000	 str         r3, [r2]

; 369  :         OUTREG32(&pDataInfo->pDmaLcReg->CSAC, PhysAddr);

  00054	e59d3008	 ldr         r3, [sp, #8]
  00058	e2833014	 add         r3, r3, #0x14
  0005c	e5933000	 ldr         r3, [r3]
  00060	e2832034	 add         r2, r3, #0x34
  00064	e59d3010	 ldr         r3, [sp, #0x10]
  00068	e5823000	 str         r3, [r2]
  0006c		 |$LN1@DmaSetSrcB|

; 370  :         }
; 371  : }

  0006c	e89d6000	 ldmia       sp, {sp, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M44192|

			 ENDP  ; |DmaSetSrcBuffer|

	IMPORT	|DmaGetLogicalChannelId|

  00000			 AREA	 |.pdata|, PDATA
|$T44204| DCD	|$LN8@DmaSetRepe|
	DCD	0x40002904
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetRepeatMode| PROC

; 538  : {

  00000		 |$LN8@DmaSetRepe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd010	 sub         sp, sp, #0x10
  00010		 |$M44201|

; 539  :     DWORD dwMode = DmaGetLogicalChannelId(pDataInfo->hDmaChannel);

  00010	e59d3018	 ldr         r3, [sp, #0x18]
  00014	e2833010	 add         r3, r3, #0x10
  00018	e5930000	 ldr         r0, [r3]
  0001c	eb000000	 bl          DmaGetLogicalChannelId
  00020	e58d0008	 str         r0, [sp, #8]
  00024	e59d3008	 ldr         r3, [sp, #8]
  00028	e58d3000	 str         r3, [sp]

; 540  :     if (dwMode == -1) return FALSE;

  0002c	e59d3000	 ldr         r3, [sp]
  00030	e3730001	 cmn         r3, #1
  00034	1a000002	 bne         |$LN1@DmaSetRepe|
  00038	e3a03000	 mov         r3, #0
  0003c	e58d3004	 str         r3, [sp, #4]
  00040	ea000013	 b           |$LN2@DmaSetRepe|
  00044		 |$LN1@DmaSetRepe|

; 541  : 
; 542  :     dwMode |= (bEnable == TRUE) ? DMA_CLNK_CTRL_ENABLE_LINK : 0;

  00044	e59d301c	 ldr         r3, [sp, #0x1C]
  00048	e3530001	 cmp         r3, #1
  0004c	1a000002	 bne         |$LN4@DmaSetRepe|
  00050	e3a03902	 mov         r3, #2, 18
  00054	e58d300c	 str         r3, [sp, #0xC]
  00058	ea000001	 b           |$LN5@DmaSetRepe|
  0005c		 |$LN4@DmaSetRepe|
  0005c	e3a03000	 mov         r3, #0
  00060	e58d300c	 str         r3, [sp, #0xC]
  00064		 |$LN5@DmaSetRepe|
  00064	e59d2000	 ldr         r2, [sp]
  00068	e59d300c	 ldr         r3, [sp, #0xC]
  0006c	e1823003	 orr         r3, r2, r3
  00070	e58d3000	 str         r3, [sp]

; 543  :     OUTREG32(&pDataInfo->pDmaLcReg->CLNK_CTRL, dwMode);

  00074	e59d3018	 ldr         r3, [sp, #0x18]
  00078	e2833014	 add         r3, r3, #0x14
  0007c	e5933000	 ldr         r3, [r3]
  00080	e2832004	 add         r2, r3, #4
  00084	e59d3000	 ldr         r3, [sp]
  00088	e5823000	 str         r3, [r2]

; 544  :     return TRUE;

  0008c	e3a03001	 mov         r3, #1
  00090	e58d3004	 str         r3, [sp, #4]
  00094		 |$LN2@DmaSetRepe|

; 545  : }

  00094	e59d0004	 ldr         r0, [sp, #4]
  00098	e28dd010	 add         sp, sp, #0x10
  0009c	e89d6000	 ldmia       sp, {sp, lr}
  000a0	e12fff1e	 bx          lr
  000a4		 |$M44202|

			 ENDP  ; |DmaSetRepeatMode|

	EXPORT	|??_C@_1DA@GLICEPGC@?$AA?9?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DA@HOCBHDJF@?$AA?$CL?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|FreePhysMem|
	IMPORT	|DmaFreeChannel|
	IMPORT	|CloseHandle|

  00010			 AREA	 |.pdata|, PDATA
|$T44216| DCD	|$LN15@SpiDmaDein|
	DCD	0x40007f04
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\dma_init.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@GLICEPGC@?$AA?9?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@| DCB "-"
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, ")", 0x0, " ", 0x0, "r", 0x0, "c", 0x0, " "
	DCB	0x0, "=", 0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DA@HOCBHDJF@?$AA?$CL?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@| DCB "+"
	DCB	0x0, "S", 0x0, "p", 0x0, "i", 0x0, "D", 0x0, "m", 0x0, "a"
	DCB	0x0, "D", 0x0, "e", 0x0, "i", 0x0, "n", 0x0, "i", 0x0, "t"
	DCB	0x0, "(", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  00b44			 AREA	 |.text|, CODE, ARM

  00b44		 |SpiDmaDeinit| PROC

; 514  : {

  00b44		 |$LN15@SpiDmaDein|
  00b44	e1a0c00d	 mov         r12, sp
  00b48	e92d0001	 stmdb       sp!, {r0}
  00b4c	e92d5000	 stmdb       sp!, {r12, lr}
  00b50	e24dd010	 sub         sp, sp, #0x10
  00b54		 |$M44213|

; 515  :     BOOL    bResult = FALSE;

  00b54	e3a03000	 mov         r3, #0
  00b58	e58d3000	 str         r3, [sp]

; 516  : 
; 517  :     DEBUGMSG(ZONE_DMA, (
; 518  :         L"+SpiDmaDeinit(0x%08x)\r\n", pInstance
; 519  :     ));

  00b5c	e59f31d4	 ldr         r3, [pc, #0x1D4]
  00b60	e5933440	 ldr         r3, [r3, #0x440]
  00b64	e3130020	 tst         r3, #0x20
  00b68	0a000005	 beq         |$LN9@SpiDmaDein|
  00b6c	e59d1018	 ldr         r1, [sp, #0x18]
  00b70	e59f01c4	 ldr         r0, [pc, #0x1C4]
  00b74	eb000000	 bl          NKDbgPrintfW
  00b78	e3a03001	 mov         r3, #1
  00b7c	e58d3008	 str         r3, [sp, #8]
  00b80	ea000001	 b           |$LN10@SpiDmaDein|
  00b84		 |$LN9@SpiDmaDein|
  00b84	e3a03000	 mov         r3, #0
  00b88	e58d3008	 str         r3, [sp, #8]
  00b8c		 |$LN10@SpiDmaDein|

; 520  : 
; 521  : 
; 522  :     //  Disable DMA interrupts
; 523  :     if( pInstance->hTxDmaIntEvent )

  00b8c	e59d3018	 ldr         r3, [sp, #0x18]
  00b90	e2833020	 add         r3, r3, #0x20
  00b94	e5933000	 ldr         r3, [r3]
  00b98	e3530000	 cmp         r3, #0
  00b9c	0a00000c	 beq         |$LN6@SpiDmaDein|

; 524  :     {
; 525  :         DmaEnableInterrupts(pInstance->hTxDmaChannel, NULL);

  00ba0	e3a01000	 mov         r1, #0
  00ba4	e59d3018	 ldr         r3, [sp, #0x18]
  00ba8	e2833018	 add         r3, r3, #0x18
  00bac	e5930000	 ldr         r0, [r3]
  00bb0	eb000000	 bl          DmaEnableInterrupts

; 526  :         CloseHandle(pInstance->hTxDmaIntEvent);

  00bb4	e59d3018	 ldr         r3, [sp, #0x18]
  00bb8	e2833020	 add         r3, r3, #0x20
  00bbc	e5930000	 ldr         r0, [r3]
  00bc0	eb000000	 bl          CloseHandle

; 527  :         pInstance->hTxDmaIntEvent = NULL;

  00bc4	e59d3018	 ldr         r3, [sp, #0x18]
  00bc8	e2832020	 add         r2, r3, #0x20
  00bcc	e3a03000	 mov         r3, #0
  00bd0	e5823000	 str         r3, [r2]
  00bd4		 |$LN6@SpiDmaDein|

; 528  :     }
; 529  : 
; 530  :     if( pInstance->hRxDmaIntEvent )

  00bd4	e59d3018	 ldr         r3, [sp, #0x18]
  00bd8	e2833024	 add         r3, r3, #0x24
  00bdc	e5933000	 ldr         r3, [r3]
  00be0	e3530000	 cmp         r3, #0
  00be4	0a00000c	 beq         |$LN5@SpiDmaDein|

; 531  :     {
; 532  :         DmaEnableInterrupts(pInstance->hRxDmaChannel, NULL);

  00be8	e3a01000	 mov         r1, #0
  00bec	e59d3018	 ldr         r3, [sp, #0x18]
  00bf0	e283301c	 add         r3, r3, #0x1C
  00bf4	e5930000	 ldr         r0, [r3]
  00bf8	eb000000	 bl          DmaEnableInterrupts

; 533  :         CloseHandle(pInstance->hRxDmaIntEvent);

  00bfc	e59d3018	 ldr         r3, [sp, #0x18]
  00c00	e2833024	 add         r3, r3, #0x24
  00c04	e5930000	 ldr         r0, [r3]
  00c08	eb000000	 bl          CloseHandle

; 534  :         pInstance->hRxDmaIntEvent = NULL;

  00c0c	e59d3018	 ldr         r3, [sp, #0x18]
  00c10	e2832024	 add         r2, r3, #0x24
  00c14	e3a03000	 mov         r3, #0
  00c18	e5823000	 str         r3, [r2]
  00c1c		 |$LN5@SpiDmaDein|

; 535  :     }
; 536  : 
; 537  : 
; 538  :     //  Close DMA channel
; 539  :     if( pInstance->hTxDmaChannel )

  00c1c	e59d3018	 ldr         r3, [sp, #0x18]
  00c20	e2833018	 add         r3, r3, #0x18
  00c24	e5933000	 ldr         r3, [r3]
  00c28	e3530000	 cmp         r3, #0
  00c2c	0a000007	 beq         |$LN4@SpiDmaDein|

; 540  :     {
; 541  :         DmaFreeChannel(pInstance->hTxDmaChannel);

  00c30	e59d3018	 ldr         r3, [sp, #0x18]
  00c34	e2833018	 add         r3, r3, #0x18
  00c38	e5930000	 ldr         r0, [r3]
  00c3c	eb000000	 bl          DmaFreeChannel

; 542  :         pInstance->hTxDmaChannel = NULL;

  00c40	e59d3018	 ldr         r3, [sp, #0x18]
  00c44	e2832018	 add         r2, r3, #0x18
  00c48	e3a03000	 mov         r3, #0
  00c4c	e5823000	 str         r3, [r2]
  00c50		 |$LN4@SpiDmaDein|

; 543  :     }
; 544  : 
; 545  :     if( pInstance->hRxDmaChannel )

  00c50	e59d3018	 ldr         r3, [sp, #0x18]
  00c54	e283301c	 add         r3, r3, #0x1C
  00c58	e5933000	 ldr         r3, [r3]
  00c5c	e3530000	 cmp         r3, #0
  00c60	0a000007	 beq         |$LN3@SpiDmaDein|

; 546  :     {
; 547  :         DmaFreeChannel(pInstance->hRxDmaChannel);

  00c64	e59d3018	 ldr         r3, [sp, #0x18]
  00c68	e283301c	 add         r3, r3, #0x1C
  00c6c	e5930000	 ldr         r0, [r3]
  00c70	eb000000	 bl          DmaFreeChannel

; 548  :         pInstance->hRxDmaChannel = NULL;

  00c74	e59d3018	 ldr         r3, [sp, #0x18]
  00c78	e283201c	 add         r2, r3, #0x1C
  00c7c	e3a03000	 mov         r3, #0
  00c80	e5823000	 str         r3, [r2]
  00c84		 |$LN3@SpiDmaDein|

; 549  :     }
; 550  : 
; 551  :     //  Free DMA memory
; 552  :     if( pInstance->pTxDmaBuffer )

  00c84	e59d3018	 ldr         r3, [sp, #0x18]
  00c88	e28330b8	 add         r3, r3, #0xB8
  00c8c	e5933000	 ldr         r3, [r3]
  00c90	e3530000	 cmp         r3, #0
  00c94	0a000007	 beq         |$LN2@SpiDmaDein|

; 553  :     {
; 554  :         FreePhysMem( pInstance->pTxDmaBuffer );

  00c98	e59d3018	 ldr         r3, [sp, #0x18]
  00c9c	e28330b8	 add         r3, r3, #0xB8
  00ca0	e5930000	 ldr         r0, [r3]
  00ca4	eb000000	 bl          FreePhysMem

; 555  :         pInstance->pTxDmaBuffer = NULL;

  00ca8	e59d3018	 ldr         r3, [sp, #0x18]
  00cac	e28320b8	 add         r2, r3, #0xB8
  00cb0	e3a03000	 mov         r3, #0
  00cb4	e5823000	 str         r3, [r2]
  00cb8		 |$LN2@SpiDmaDein|

; 556  :     }
; 557  : 
; 558  :     if( pInstance->pRxDmaBuffer )

  00cb8	e59d3018	 ldr         r3, [sp, #0x18]
  00cbc	e28330c0	 add         r3, r3, #0xC0
  00cc0	e5933000	 ldr         r3, [r3]
  00cc4	e3530000	 cmp         r3, #0
  00cc8	0a000007	 beq         |$LN1@SpiDmaDein|

; 559  :     {
; 560  :         FreePhysMem( pInstance->pRxDmaBuffer );

  00ccc	e59d3018	 ldr         r3, [sp, #0x18]
  00cd0	e28330c0	 add         r3, r3, #0xC0
  00cd4	e5930000	 ldr         r0, [r3]
  00cd8	eb000000	 bl          FreePhysMem

; 561  :         pInstance->pRxDmaBuffer = NULL;

  00cdc	e59d3018	 ldr         r3, [sp, #0x18]
  00ce0	e28320c0	 add         r2, r3, #0xC0
  00ce4	e3a03000	 mov         r3, #0
  00ce8	e5823000	 str         r3, [r2]
  00cec		 |$LN1@SpiDmaDein|

; 562  :     }
; 563  : 
; 564  : 
; 565  :     DEBUGMSG(ZONE_DMA, (
; 566  :         L"-SpiDmaDeinit() rc = \r\n", bResult
; 567  :     ));

  00cec	e59f3044	 ldr         r3, [pc, #0x44]
  00cf0	e5933440	 ldr         r3, [r3, #0x440]
  00cf4	e3130020	 tst         r3, #0x20
  00cf8	0a000005	 beq         |$LN11@SpiDmaDein|
  00cfc	e59d1000	 ldr         r1, [sp]
  00d00	e59f002c	 ldr         r0, [pc, #0x2C]
  00d04	eb000000	 bl          NKDbgPrintfW
  00d08	e3a03001	 mov         r3, #1
  00d0c	e58d300c	 str         r3, [sp, #0xC]
  00d10	ea000001	 b           |$LN12@SpiDmaDein|
  00d14		 |$LN11@SpiDmaDein|
  00d14	e3a03000	 mov         r3, #0
  00d18	e58d300c	 str         r3, [sp, #0xC]
  00d1c		 |$LN12@SpiDmaDein|

; 568  : 
; 569  :     //  Return result
; 570  :     return bResult;

  00d1c	e59d3000	 ldr         r3, [sp]
  00d20	e58d3004	 str         r3, [sp, #4]

; 571  : }

  00d24	e59d0004	 ldr         r0, [sp, #4]
  00d28	e28dd010	 add         sp, sp, #0x10
  00d2c	e89d6000	 ldmia       sp, {sp, lr}
  00d30	e12fff1e	 bx          lr
  00d34		 |$LN16@SpiDmaDein|
  00d34		 |$LN17@SpiDmaDein|
  00d34	00000000	 DCD         |??_C@_1DA@GLICEPGC@?$AA?9?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA?$CJ?$AA?5?$AAr?$AAc?$AA?5?$AA?$DN?$AA?5?$AA?$AN?$AA?6?$AA?$AA@|
  00d38		 |$LN18@SpiDmaDein|
  00d38	00000000	 DCD         |dpCurSettings|
  00d3c		 |$LN19@SpiDmaDein|
  00d3c	00000000	 DCD         |??_C@_1DA@HOCBHDJF@?$AA?$CL?$AAS?$AAp?$AAi?$AAD?$AAm?$AAa?$AAD?$AAe?$AAi?$AAn?$AAi?$AAt?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAx?$AA?$CJ?$AA?$AN?$AA?6?$AA?$AA@|
  00d40		 |$M44214|

			 ENDP  ; |SpiDmaDeinit|

	END
