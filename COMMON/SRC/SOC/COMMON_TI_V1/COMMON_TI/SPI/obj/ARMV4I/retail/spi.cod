; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\SPI\spi.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1CA@CCIKILKA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_19OBNDINH@?$AAP?$AAo?$AAr?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|DEVICE_IFC_SPI_GUID| [ DATA ]
	EXPORT	|dpCurSettings| [ DATA ]

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CA@CCIKILKA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "A"
	DCB	0x0, "c", 0x0, "t", 0x0, "i", 0x0, "v", 0x0, "i", 0x0, "t"
	DCB	0x0, "y", 0x0, "T", 0x0, "i", 0x0, "m", 0x0, "e", 0x0, "o"
	DCB	0x0, "u", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@| DCB "D"
	DCB	0x0, "V", 0x0, "F", 0x0, "S", 0x0, "A", 0x0, "s", 0x0, "y"
	DCB	0x0, "n", 0x0, "c", 0x0, "E", 0x0, "v", 0x0, "e", 0x0, "n"
	DCB	0x0, "t", 0x0, "N", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "R"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@| DCB "T"
	DCB	0x0, "x", 0x0, "B", 0x0, "u", 0x0, "f", 0x0, "f", 0x0, "e"
	DCB	0x0, "r", 0x0, "S", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "T", 0x0
	DCB	"i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_19OBNDINH@?$AAP?$AAo?$AAr?$AAt?$AA?$AA@| DCB "P", 0x0, "o", 0x0, "r"
	DCB	0x0, "t", 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.data|, DATA
|dpCurSettings| DCB "S", 0x0, "P", 0x0, "I", 0x0, 0x0, 0x0
	%	56
	DCB	"E", 0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, "s", 0x0
	DCB	0x0, 0x0
	%	50
	DCB	"W", 0x0, "a", 0x0, "r", 0x0, "n", 0x0, "i", 0x0, "n", 0x0
	DCB	"g", 0x0, "s", 0x0, 0x0, 0x0
	%	46
	DCB	"F", 0x0, "u", 0x0, "n", 0x0, "c", 0x0, "t", 0x0, "i", 0x0
	DCB	"o", 0x0, "n", 0x0, 0x0, 0x0
	%	46
	DCB	"I", 0x0, "n", 0x0, "f", 0x0, "o", 0x0, 0x0, 0x0
	%	54
	DCB	"I", 0x0, "S", 0x0, "T", 0x0, 0x0, 0x0
	%	56
	DCB	"D", 0x0, "M", 0x0, "A", 0x0, 0x0, 0x0
	%	56
	DCB	"D", 0x0, "V", 0x0, "F", 0x0, "S", 0x0, 0x0, 0x0
	%	54
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCB	"U", 0x0, "n", 0x0, "d", 0x0, "e", 0x0, "f", 0x0, "i", 0x0
	DCB	"n", 0x0, "e", 0x0, "d", 0x0, 0x0, 0x0
	%	44
	DCD	0x3

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|DEVICE_IFC_SPI_GUID| DCD 0x2e559225
	DCW	0xc95e
	DCW	0x4300
	DCB	0x86
	DCB	0xe9
	DCB	0x6a
	DCB	0x5c
	DCB	0xbc
	DCB	0x7
	DCB	0x32
	DCB	0x8f
|g_deviceRegParams| DCD |??_C@_19OBNDINH@?$AAP?$AAo?$AAr?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x1
	DCD	0x38
	DCD	0x4
	DCD	0x0
	DCD	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x28
	DCD	0x4
	DCD	0x1f4
	DCD	|??_C@_1BK@BJJLAMLA@?$AAT?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x2c
	DCD	0x4
	DCD	0x4000
	DCD	|??_C@_1BK@CGEFNBAB@?$AAR?$AAx?$AAB?$AAu?$AAf?$AAf?$AAe?$AAr?$AAS?$AAi?$AAz?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x30
	DCD	0x4
	DCD	0x4000
	DCD	|??_C@_1CG@FKLAKBOO@?$AAD?$AAV?$AAF?$AAS?$AAA?$AAs?$AAy?$AAn?$AAc?$AAE?$AAv?$AAe?$AAn?$AAt?$AAN?$AAa?$AAm?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x54
	DCD	0x208
	DCD	0x0
	DCD	|??_C@_1CA@CCIKILKA@?$AAA?$AAc?$AAt?$AAi?$AAv?$AAi?$AAt?$AAy?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x270
	DCD	0x4
	DCD	0x5
	EXPORT	|ResetEvent|
	IMPORT	|EventModify|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45695| DCD	|$LN5@ResetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ResetEvent| PROC

; 223  : _inline BOOL ResetEvent(HANDLE h) {

  00000		 |$LN5@ResetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45692|

; 224  : 	return EventModify(h,EVENT_RESET);

  00004	e3a01002	 mov         r1, #2
  00008	eb000000	 bl          EventModify

; 225  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M45693|

			 ENDP  ; |ResetEvent|

	EXPORT	|SetEvent|

  00000			 AREA	 |.pdata|, PDATA
|$T45705| DCD	|$LN5@SetEvent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetEvent| PROC

; 235  : _inline BOOL SetEvent(HANDLE h) {

  00000		 |$LN5@SetEvent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45702|

; 236  : 	return EventModify(h,EVENT_SET);

  00004	e3a01003	 mov         r1, #3
  00008	eb000000	 bl          EventModify

; 237  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M45703|

			 ENDP  ; |SetEvent|

	EXPORT	|GetCurrentProcessId|
	IMPORT	|__GetUserKData|

  00000			 AREA	 |.pdata|, PDATA
|$T45714| DCD	|$LN5@GetCurrent|
	DCD	0x40000501
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |GetCurrentProcessId| PROC

; 373  : _inline DWORD GetCurrentProcessId(void) {

  00000		 |$LN5@GetCurrent|
  00000	e52de004	 str         lr, [sp, #-4]!
  00004		 |$M45711|

; 374  :     return __GetUserKData (SYSHANDLE_OFFSET + (SH_CURPROC * sizeof(HANDLE)));

  00004	e3a0000c	 mov         r0, #0xC
  00008	eb000000	 bl          __GetUserKData

; 375  : }

  0000c	e49de004	 ldr         lr, [sp], #4
  00010	e12fff1e	 bx          lr
  00014		 |$M45712|

			 ENDP  ; |GetCurrentProcessId|

	EXPORT	|DmaSetElementAndFrameCount|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T45724| DCD	|$LN5@DmaSetElem|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaSetElementAndFrameCount| PROC

; 386  : {

  00000		 |$LN5@DmaSetElem|
  00000		 |$M45721|

; 387  :     // setup frame and element count for destination side
; 388  :     //
; 389  :     OUTREG32(&pDataInfo->pDmaLcReg->CEN , countElements);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e5831014	 str         r1, [r3, #0x14]

; 390  :     OUTREG32(&pDataInfo->pDmaLcReg->CFN , countFrames);

  00008	e5903014	 ldr         r3, [r0, #0x14]
  0000c	e5832018	 str         r2, [r3, #0x18]

; 391  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M45722|

			 ENDP  ; |DmaSetElementAndFrameCount|

	EXPORT	|DmaStop|

  00000			 AREA	 |.pdata|, PDATA
|$T45735| DCD	|$LN12@DmaStop|
	DCD	0x40001201
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStop| PROC

; 449  : {

  00000		 |$LN12@DmaStop|
  00000	e24dd004	 sub         sp, sp, #4
  00004		 |$M45732|

; 450  :     volatile ULONG ulCCR;
; 451  :     BOOL breakLoop = FALSE;
; 452  : 
; 453  :     // disable standby in dma controller
; 454  :     //
; 455  :     CLRREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  00004	e5902014	 ldr         r2, [r0, #0x14]
  00008	e3a01000	 mov         r1, #0
  0000c	e5923000	 ldr         r3, [r2]
  00010	e3c33080	 bic         r3, r3, #0x80
  00014	e5823000	 str         r3, [r2]
  00018	e5902014	 ldr         r2, [r0, #0x14]
  0001c		 |$LL5@DmaStop|

; 456  : 
; 457  :     // ensure DMA transfer is completed by polling the active bits
; 458  :     //
; 459  :     while (breakLoop == FALSE)
; 460  :         {
; 461  :         ulCCR = INREG32(&pDataInfo->pDmaLcReg->CCR);

  0001c	e5923000	 ldr         r3, [r2]
  00020	e58d3000	 str         r3, [sp]

; 462  :         if ((ulCCR & DMA_CCR_WR_ACTIVE) || (ulCCR & DMA_CCR_RD_ACTIVE))

  00024	e59d3000	 ldr         r3, [sp]
  00028	e3130b01	 tst         r3, #1, 22
  0002c	059d3000	 ldreq       r3, [sp]
  00030	03130c02	 tsteq       r3, #2, 24

; 463  :             {
; 464  :             // fix this infinite loop
; 465  :             //
; 466  :             continue;
; 467  :             }
; 468  :         else
; 469  :             {
; 470  :             breakLoop = TRUE;

  00034	03a01001	 moveq       r1, #1
  00038	e3510000	 cmp         r1, #0
  0003c	0afffff6	 beq         |$LL5@DmaStop|

; 471  :             }
; 472  :         }
; 473  : 
; 474  : }

  00040	e28dd004	 add         sp, sp, #4
  00044	e12fff1e	 bx          lr
  00048		 |$M45733|

			 ENDP  ; |DmaStop|

	EXPORT	|DmaStart|

  00000			 AREA	 |.pdata|, PDATA
|$T45743| DCD	|$LN5@DmaStart|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaStart| PROC

; 487  : {

  00000		 |$LN5@DmaStart|
  00000		 |$M45740|

; 488  :     // enable the dma channel
; 489  :     //
; 490  :     SETREG32(&pDataInfo->pDmaLcReg->CCR , DMA_CCR_ENABLE);

  00000	e5902014	 ldr         r2, [r0, #0x14]
  00004	e5923000	 ldr         r3, [r2]
  00008	e3833080	 orr         r3, r3, #0x80
  0000c	e5823000	 str         r3, [r2]

; 491  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M45741|

			 ENDP  ; |DmaStart|

	EXPORT	|DmaGetStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T45753| DCD	|$LN5@DmaGetStat|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaGetStatus| PROC

; 559  : {

  00000		 |$LN5@DmaGetStat|
  00000		 |$M45750|

; 560  :     return INREG32(&pDataInfo->pDmaLcReg->CSR);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e593000c	 ldr         r0, [r3, #0xC]

; 561  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M45751|

			 ENDP  ; |DmaGetStatus|

	EXPORT	|DmaClearStatus|

  00000			 AREA	 |.pdata|, PDATA
|$T45762| DCD	|$LN5@DmaClearSt|
	DCD	0x40000300
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DmaClearStatus| PROC

; 575  : {

  00000		 |$LN5@DmaClearSt|
  00000		 |$M45759|

; 576  :     OUTREG32(&pDataInfo->pDmaLcReg->CSR, dwStatus);

  00000	e5903014	 ldr         r3, [r0, #0x14]
  00004	e583100c	 str         r1, [r3, #0xC]

; 577  : }

  00008	e12fff1e	 bx          lr
  0000c		 |$M45760|

			 ENDP  ; |DmaClearStatus|

	EXPORT	|DUMP_DMA_REGS|
	EXPORT	|??_C@_1CI@FLNANDFB@?$AAC?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HJOAFDIL@?$AAC?$AAL?$AAN?$AAK?$AA_?$AAC?$AAT?$AAR?$AAL?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OJOGIMIO@?$AAC?$AAI?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OOGCCADM@?$AAC?$AAS?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DOOBPJPF@?$AAC?$AAS?$AAD?$AAP?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@GJLBFIHK@?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@CEFJFIBN@?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@ICCEPAFF@?$AAC?$AAS?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@CBMOPOBE@?$AAC?$AAD?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@FFMGOKAE@?$AAC?$AAS?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@DBCGJBPK@?$AAC?$AAS?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@PGCMOEEF@?$AAC?$AAD?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@JCMMJPLL@?$AAC?$AAD?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@NLPBJPAO@?$AAC?$AAS?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HIBLJBEP@?$AAC?$AAD?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@BPPLKOOL@?$AAC?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@HLBLNFBF@?$AAC?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@FIDDJIDB@?$AAC?$AAO?$AAL?$AAO?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|DmaGetLogicalChannel|

  00000			 AREA	 |.pdata|, PDATA
|$T45772| DCD	|$LN6@DUMP_DMA_R|
	DCD	0x40005101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FLNANDFB@?$AAC?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "C", 0x0, "R", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HJOAFDIL@?$AAC?$AAL?$AAN?$AAK?$AA_?$AAC?$AAT?$AAR?$AAL?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "L", 0x0, "N", 0x0, "K", 0x0, "_", 0x0, "C", 0x0, "T"
	DCB	0x0, "R", 0x0, "L", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OJOGIMIO@?$AAC?$AAI?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "I", 0x0, "C", 0x0, "R", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OOGCCADM@?$AAC?$AAS?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "R", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DOOBPJPF@?$AAC?$AAS?$AAD?$AAP?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "D", 0x0, "P", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@GJLBFIHK@?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "E", 0x0, "N", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CEFJFIBN@?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "F", 0x0, "N", 0x0, " ", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@ICCEPAFF@?$AAC?$AAS?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "S", 0x0, "A", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@CBMOPOBE@?$AAC?$AAD?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "D", 0x0, "S", 0x0, "A", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FFMGOKAE@?$AAC?$AAS?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "E", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@DBCGJBPK@?$AAC?$AAS?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "F", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@PGCMOEEF@?$AAC?$AAD?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "D", 0x0, "E", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@JCMMJPLL@?$AAC?$AAD?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "D", 0x0, "F", 0x0, "I", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@NLPBJPAO@?$AAC?$AAS?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "S", 0x0, "A", 0x0, "C", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HIBLJBEP@?$AAC?$AAD?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "D", 0x0, "A", 0x0, "C", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@BPPLKOOL@?$AAC?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "C", 0x0, "E", 0x0, "N", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@HLBLNFBF@?$AAC?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "C", 0x0, "F", 0x0, "N", 0x0, " ", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@FIDDJIDB@?$AAC?$AAO?$AAL?$AAO?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@| DCB "C"
	DCB	0x0, "O", 0x0, "L", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, " "
	DCB	0x0, " ", 0x0, " ", 0x0, ":", 0x0, " ", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, "8", 0x0, "X", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DUMP_DMA_REGS| PROC

; 678  : {

  00000		 |$LN6@DUMP_DMA_R|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45769|
  00004	e1a05001	 mov         r5, r1

; 679  :     OMAP_DMA_LC_REGS *pDmaLcReg = (OMAP_DMA_LC_REGS*)DmaGetLogicalChannel(hDmaChannel);

  00008	eb000000	 bl          DmaGetLogicalChannel
  0000c	e1b04000	 movs        r4, r0

; 680  :     if (pDmaLcReg == NULL)

  00010	0a000037	 beq         |$LN2@DUMP_DMA_R|

; 681  :         {
; 682  :         return;
; 683  :         }
; 684  : 
; 685  :     RETAILMSG(1,(szMsg));

  00014	e1a00005	 mov         r0, r5
  00018	eb000000	 bl          NKDbgPrintfW

; 686  : 
; 687  :     RETAILMSG(1,(TEXT("CCR      : 0x%08X\r\n"), INREG32(&pDmaLcReg->CCR   )));

  0001c	e5941000	 ldr         r1, [r4]
  00020	e59f0118	 ldr         r0, [pc, #0x118]
  00024	eb000000	 bl          NKDbgPrintfW

; 688  :     RETAILMSG(1,(TEXT("CLNK_CTRL: 0x%08X\r\n"), INREG32(&pDmaLcReg->CLNK_CTRL)));

  00028	e5941004	 ldr         r1, [r4, #4]
  0002c	e59f0108	 ldr         r0, [pc, #0x108]
  00030	eb000000	 bl          NKDbgPrintfW

; 689  :     RETAILMSG(1,(TEXT("CICR     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CICR  )));

  00034	e5941008	 ldr         r1, [r4, #8]
  00038	e59f00f8	 ldr         r0, [pc, #0xF8]
  0003c	eb000000	 bl          NKDbgPrintfW

; 690  :     RETAILMSG(1,(TEXT("CSR      : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSR   )));

  00040	e594100c	 ldr         r1, [r4, #0xC]
  00044	e59f00e8	 ldr         r0, [pc, #0xE8]
  00048	eb000000	 bl          NKDbgPrintfW

; 691  :     RETAILMSG(1,(TEXT("CSDP     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSDP  )));

  0004c	e5941010	 ldr         r1, [r4, #0x10]
  00050	e59f00d8	 ldr         r0, [pc, #0xD8]
  00054	eb000000	 bl          NKDbgPrintfW

; 692  :     RETAILMSG(1,(TEXT("CEN      : 0x%08X\r\n"), INREG32(&pDmaLcReg->CEN   )));

  00058	e5941014	 ldr         r1, [r4, #0x14]
  0005c	e59f00c8	 ldr         r0, [pc, #0xC8]
  00060	eb000000	 bl          NKDbgPrintfW

; 693  :     RETAILMSG(1,(TEXT("CFN      : 0x%08X\r\n"), INREG32(&pDmaLcReg->CFN   )));

  00064	e5941018	 ldr         r1, [r4, #0x18]
  00068	e59f00b8	 ldr         r0, [pc, #0xB8]
  0006c	eb000000	 bl          NKDbgPrintfW

; 694  :     RETAILMSG(1,(TEXT("CSSA     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSSA  )));

  00070	e594101c	 ldr         r1, [r4, #0x1C]
  00074	e59f00a8	 ldr         r0, [pc, #0xA8]
  00078	eb000000	 bl          NKDbgPrintfW

; 695  :     RETAILMSG(1,(TEXT("CDSA     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CDSA  )));

  0007c	e5941020	 ldr         r1, [r4, #0x20]
  00080	e59f0098	 ldr         r0, [pc, #0x98]
  00084	eb000000	 bl          NKDbgPrintfW

; 696  :     RETAILMSG(1,(TEXT("CSEI     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSEI  )));

  00088	e5941024	 ldr         r1, [r4, #0x24]
  0008c	e59f0088	 ldr         r0, [pc, #0x88]
  00090	eb000000	 bl          NKDbgPrintfW

; 697  :     RETAILMSG(1,(TEXT("CSFI     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSFI  )));

  00094	e5941028	 ldr         r1, [r4, #0x28]
  00098	e59f0078	 ldr         r0, [pc, #0x78]
  0009c	eb000000	 bl          NKDbgPrintfW

; 698  :     RETAILMSG(1,(TEXT("CDEI     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CDEI  )));

  000a0	e594102c	 ldr         r1, [r4, #0x2C]
  000a4	e59f0068	 ldr         r0, [pc, #0x68]
  000a8	eb000000	 bl          NKDbgPrintfW

; 699  :     RETAILMSG(1,(TEXT("CDFI     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CDFI  )));

  000ac	e5941030	 ldr         r1, [r4, #0x30]
  000b0	e59f0058	 ldr         r0, [pc, #0x58]
  000b4	eb000000	 bl          NKDbgPrintfW

; 700  :     RETAILMSG(1,(TEXT("CSAC     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CSAC  )));

  000b8	e5941034	 ldr         r1, [r4, #0x34]
  000bc	e59f0048	 ldr         r0, [pc, #0x48]
  000c0	eb000000	 bl          NKDbgPrintfW

; 701  :     RETAILMSG(1,(TEXT("CDAC     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CDAC  )));

  000c4	e5941038	 ldr         r1, [r4, #0x38]
  000c8	e59f0038	 ldr         r0, [pc, #0x38]
  000cc	eb000000	 bl          NKDbgPrintfW

; 702  :     RETAILMSG(1,(TEXT("CCEN     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CCEN  )));

  000d0	e594103c	 ldr         r1, [r4, #0x3C]
  000d4	e59f0028	 ldr         r0, [pc, #0x28]
  000d8	eb000000	 bl          NKDbgPrintfW

; 703  :     RETAILMSG(1,(TEXT("CCFN     : 0x%08X\r\n"), INREG32(&pDmaLcReg->CCFN  )));

  000dc	e5941040	 ldr         r1, [r4, #0x40]
  000e0	e59f0018	 ldr         r0, [pc, #0x18]
  000e4	eb000000	 bl          NKDbgPrintfW

; 704  :     RETAILMSG(1,(TEXT("COLOR    : 0x%08X\r\n"), INREG32(&pDmaLcReg->COLOR )));

  000e8	e5941044	 ldr         r1, [r4, #0x44]
  000ec	e59f0008	 ldr         r0, [pc, #8]
  000f0	eb000000	 bl          NKDbgPrintfW
  000f4		 |$LN2@DUMP_DMA_R|

; 705  : }

  000f4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$LN7@DUMP_DMA_R|
  000fc		 |$LN8@DUMP_DMA_R|
  000fc	00000000	 DCD         |??_C@_1CI@FIDDJIDB@?$AAC?$AAO?$AAL?$AAO?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00100		 |$LN9@DUMP_DMA_R|
  00100	00000000	 DCD         |??_C@_1CI@HLBLNFBF@?$AAC?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00104		 |$LN10@DUMP_DMA_R|
  00104	00000000	 DCD         |??_C@_1CI@BPPLKOOL@?$AAC?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00108		 |$LN11@DUMP_DMA_R|
  00108	00000000	 DCD         |??_C@_1CI@HIBLJBEP@?$AAC?$AAD?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  0010c		 |$LN12@DUMP_DMA_R|
  0010c	00000000	 DCD         |??_C@_1CI@NLPBJPAO@?$AAC?$AAS?$AAA?$AAC?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00110		 |$LN13@DUMP_DMA_R|
  00110	00000000	 DCD         |??_C@_1CI@JCMMJPLL@?$AAC?$AAD?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00114		 |$LN14@DUMP_DMA_R|
  00114	00000000	 DCD         |??_C@_1CI@PGCMOEEF@?$AAC?$AAD?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00118		 |$LN15@DUMP_DMA_R|
  00118	00000000	 DCD         |??_C@_1CI@DBCGJBPK@?$AAC?$AAS?$AAF?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  0011c		 |$LN16@DUMP_DMA_R|
  0011c	00000000	 DCD         |??_C@_1CI@FFMGOKAE@?$AAC?$AAS?$AAE?$AAI?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00120		 |$LN17@DUMP_DMA_R|
  00120	00000000	 DCD         |??_C@_1CI@CBMOPOBE@?$AAC?$AAD?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00124		 |$LN18@DUMP_DMA_R|
  00124	00000000	 DCD         |??_C@_1CI@ICCEPAFF@?$AAC?$AAS?$AAS?$AAA?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00128		 |$LN19@DUMP_DMA_R|
  00128	00000000	 DCD         |??_C@_1CI@CEFJFIBN@?$AAC?$AAF?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  0012c		 |$LN20@DUMP_DMA_R|
  0012c	00000000	 DCD         |??_C@_1CI@GJLBFIHK@?$AAC?$AAE?$AAN?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00130		 |$LN21@DUMP_DMA_R|
  00130	00000000	 DCD         |??_C@_1CI@DOOBPJPF@?$AAC?$AAS?$AAD?$AAP?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00134		 |$LN22@DUMP_DMA_R|
  00134	00000000	 DCD         |??_C@_1CI@OOGCCADM@?$AAC?$AAS?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00138		 |$LN23@DUMP_DMA_R|
  00138	00000000	 DCD         |??_C@_1CI@OJOGIMIO@?$AAC?$AAI?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  0013c		 |$LN24@DUMP_DMA_R|
  0013c	00000000	 DCD         |??_C@_1CI@HJOAFDIL@?$AAC?$AAL?$AAN?$AAK?$AA_?$AAC?$AAT?$AAR?$AAL?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00140		 |$LN25@DUMP_DMA_R|
  00140	00000000	 DCD         |??_C@_1CI@FLNANDFB@?$AAC?$AAC?$AAR?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5?$AA?3?$AA?5?$AA0?$AAx?$AA?$CF?$AA0?$AA8?$AAX?$AA?$AN?$AA?6?$AA?$AA@|
  00144		 |$M45770|

			 ENDP  ; |DUMP_DMA_REGS|

	EXPORT	|SpiDmaTxEnabled|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T45803| DCD	|$LN7@SpiDmaTxEn|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SpiDmaTxEnabled| PROC

; 155  : {

  00000		 |$LN7@SpiDmaTxEn|
  00000		 |$M45800|

; 156  :     //  Return enabled BOOL
; 157  :     return( pInstance->hTxDmaChannel != NULL );

  00000	e5903018	 ldr         r3, [r0, #0x18]
  00004	e3530000	 cmp         r3, #0
  00008	13a00001	 movne       r0, #1
  0000c	03a00000	 moveq       r0, #0

; 158  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M45801|

			 ENDP  ; |SpiDmaTxEnabled|

	EXPORT	|SpiDmaRxEnabled|

  00000			 AREA	 |.pdata|, PDATA
|$T45815| DCD	|$LN7@SpiDmaRxEn|
	DCD	0x40000500
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SpiDmaRxEnabled| PROC

; 164  : {

  00000		 |$LN7@SpiDmaRxEn|
  00000		 |$M45812|

; 165  :     //  Return enabled BOOL
; 166  :     return( pInstance->hRxDmaChannel != NULL );

  00000	e590301c	 ldr         r3, [r0, #0x1C]
  00004	e3530000	 cmp         r3, #0
  00008	13a00001	 movne       r0, #1
  0000c	03a00000	 moveq       r0, #0

; 167  : }

  00010	e12fff1e	 bx          lr
  00014		 |$M45813|

			 ENDP  ; |SpiDmaRxEnabled|

	EXPORT	|CheckAndHaltAllDma|
	IMPORT	|LeaveCriticalSection|
	IMPORT	|EnterCriticalSection|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45829| DCD	|$LN9@CheckAndHa|
	DCD	0x40001301
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |CheckAndHaltAllDma| PROC

; 93   : {

  00000		 |$LN9@CheckAndHa|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45826|
  00004	e1a05001	 mov         r5, r1

; 94   :     SPI_DEVICE *pDevice = pInstance->pDevice;

  00008	e5904004	 ldr         r4, [r0, #4]

; 95   :     
; 96   :     DEBUGMSG(ZONE_FUNCTION, (
; 97   :         L"+CheckAndHaltAllDma(0x%08x, %d)\r\n", 
; 98   :         pInstance, bHalt
; 99   :         ));
; 100  : 
; 101  :     EnterCriticalSection(&pDevice->csDVFS);

  0000c	e2840f97	 add         r0, r4, #0x97, 30
  00010	eb000000	 bl          EnterCriticalSection

; 102  : 
; 103  :     if (pDevice->nActiveDmaCount == 0 && bHalt == TRUE)

  00014	e5943048	 ldr         r3, [r4, #0x48]
  00018	e3530000	 cmp         r3, #0
  0001c	1a000006	 bne         |$LN5@CheckAndHa|
  00020	e3550001	 cmp         r5, #1
  00024	1a000004	 bne         |$LN5@CheckAndHa|

; 104  :         {
; 105  :         if (pDevice->hDVFSAsyncEvent != NULL)

  00028	e5943050	 ldr         r3, [r4, #0x50]
  0002c	e3530000	 cmp         r3, #0

; 106  :             {
; 107  :             SetEvent(pDevice->hDVFSAsyncEvent);

  00030	13a01003	 movne       r1, #3
  00034	11a00003	 movne       r0, r3
  00038	1b000000	 blne        EventModify
  0003c		 |$LN5@CheckAndHa|

; 108  :             }
; 109  :         }
; 110  :     
; 111  :     LeaveCriticalSection(&pDevice->csDVFS);

  0003c	e2840f97	 add         r0, r4, #0x97, 30
  00040	eb000000	 bl          LeaveCriticalSection

; 112  : 
; 113  :     DEBUGMSG(ZONE_FUNCTION, (L"-CheckAndHaltAllDma()\r\n"));
; 114  : }

  00044	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00048	e12fff1e	 bx          lr
  0004c		 |$M45827|

			 ENDP  ; |CheckAndHaltAllDma|

	EXPORT	|PreDmaActivation|
	IMPORT	|InterlockedIncrement|
	IMPORT	|WaitForSingleObject|

  00000			 AREA	 |.pdata|, PDATA
|$T45838| DCD	|$LN6@PreDmaActi|
	DCD	0x40001401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PreDmaActivation| PROC

; 125  : {

  00000		 |$LN6@PreDmaActi|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45835|

; 126  :     SPI_DEVICE *pDevice = pInstance->pDevice;

  00004	e5904004	 ldr         r4, [r0, #4]

; 127  :     
; 128  :     DEBUGMSG(ZONE_FUNCTION, (
; 129  :         L"+PreDmaActivation(0x%08x)\r\n", pInstance
; 130  :     ));
; 131  :     
; 132  :     // this operation needs to be atomic to handle a corner case
; 133  :     EnterCriticalSection(&pDevice->csDVFS);

  00008	e2840f97	 add         r0, r4, #0x97, 30
  0000c	eb000000	 bl          EnterCriticalSection

; 134  :     
; 135  :     // check and wait for DVFS activity to complete
; 136  :     if (pDevice->bDVFSActive == TRUE)

  00010	e5943044	 ldr         r3, [r4, #0x44]
  00014	e3530001	 cmp         r3, #1
  00018	1a000006	 bne         |$LN1@PreDmaActi|

; 137  :         {
; 138  :         // avoid deadlock's while waiting for dvfs transitions
; 139  :         //
; 140  :         LeaveCriticalSection(&pDevice->csDVFS);

  0001c	e2840f97	 add         r0, r4, #0x97, 30
  00020	eb000000	 bl          LeaveCriticalSection

; 141  :         WaitForSingleObject(pDevice->hDVFSInactiveEvent, INFINITE);

  00024	e594004c	 ldr         r0, [r4, #0x4C]
  00028	e3e01000	 mvn         r1, #0
  0002c	eb000000	 bl          WaitForSingleObject

; 142  :         EnterCriticalSection(&pDevice->csDVFS);

  00030	e2840f97	 add         r0, r4, #0x97, 30
  00034	eb000000	 bl          EnterCriticalSection
  00038		 |$LN1@PreDmaActi|

; 143  :         }
; 144  :     InterlockedIncrement(&pDevice->nActiveDmaCount);

  00038	e2840048	 add         r0, r4, #0x48
  0003c	eb000000	 bl          InterlockedIncrement

; 145  : 
; 146  :     LeaveCriticalSection(&pDevice->csDVFS);

  00040	e2840f97	 add         r0, r4, #0x97, 30
  00044	eb000000	 bl          LeaveCriticalSection

; 147  : 
; 148  :     DEBUGMSG(ZONE_FUNCTION, (
; 149  :         L"-PreDmaActivation()\r\n"
; 150  :         ));
; 151  : }

  00048	e8bd4010	 ldmia       sp!, {r4, lr}
  0004c	e12fff1e	 bx          lr
  00050		 |$M45836|

			 ENDP  ; |PreDmaActivation|

	EXPORT	|PostDmaDeactivation|
	IMPORT	|InterlockedDecrement|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45851| DCD	|$LN9@PostDmaDea|
	DCD	0x40001501
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |PostDmaDeactivation| PROC

; 161  : {

  00000		 |$LN9@PostDmaDea|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M45848|

; 162  :     SPI_DEVICE *pDevice = pInstance->pDevice;

  00004	e5904004	 ldr         r4, [r0, #4]

; 163  :     
; 164  :     DEBUGMSG(ZONE_FUNCTION, (
; 165  :         L"+PostDmaDeactivation(0x%08x)\r\n", pInstance
; 166  :     ));
; 167  :     
; 168  :     ASSERT(pDevice->nActiveDmaCount > 0);
; 169  : 
; 170  :     // this operation needs to be atomic to handle a corner case
; 171  :     EnterCriticalSection(&pDevice->csDVFS);

  00008	e2840f97	 add         r0, r4, #0x97, 30
  0000c	eb000000	 bl          EnterCriticalSection

; 172  :     
; 173  :     // check if all dma's are inactive and signal ack event if so
; 174  :     InterlockedDecrement(&pDevice->nActiveDmaCount);

  00010	e2840048	 add         r0, r4, #0x48
  00014	eb000000	 bl          InterlockedDecrement

; 175  :     if (pDevice->bDVFSActive == TRUE && pDevice->nActiveDmaCount <= 0)

  00018	e5943044	 ldr         r3, [r4, #0x44]
  0001c	e3530001	 cmp         r3, #1
  00020	1a000007	 bne         |$LN5@PostDmaDea|
  00024	e5943048	 ldr         r3, [r4, #0x48]
  00028	e3530000	 cmp         r3, #0
  0002c	ca000004	 bgt         |$LN5@PostDmaDea|

; 176  :         {
; 177  :         if (pDevice->hDVFSAsyncEvent != NULL) 

  00030	e5943050	 ldr         r3, [r4, #0x50]
  00034	e3530000	 cmp         r3, #0

; 178  :         {
; 179  :             SetEvent(pDevice->hDVFSAsyncEvent);

  00038	13a01003	 movne       r1, #3
  0003c	11a00003	 movne       r0, r3
  00040	1b000000	 blne        EventModify
  00044		 |$LN5@PostDmaDea|

; 180  :         }
; 181  :         }
; 182  : 
; 183  :     LeaveCriticalSection(&pDevice->csDVFS);

  00044	e2840f97	 add         r0, r4, #0x97, 30
  00048	eb000000	 bl          LeaveCriticalSection

; 184  : 
; 185  :     DEBUGMSG(ZONE_FUNCTION, (
; 186  :         L"-PostDmaDeactivation()\r\n"
; 187  :         ));
; 188  : }

  0004c	e8bd4010	 ldmia       sp!, {r4, lr}
  00050	e12fff1e	 bx          lr
  00054		 |$M45849|

			 ENDP  ; |PostDmaDeactivation|

	EXPORT	|SPIPowerTimerThread|
	IMPORT	|ReleaseMutex|
	IMPORT	|SetDevicePowerState|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45873| DCD	|$LN19@SPIPowerTi|
	DCD	0x40003101
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPIPowerTimerThread| PROC

; 201  : {

  00000		 |$LN19@SPIPowerTi|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45870|
  00004	e1a04000	 mov         r4, r0

; 202  :     DWORD nTimeout = INFINITE;

  00008	e3a03cff	 mov         r3, #0xFF, 24
  0000c	e38360ff	 orr         r6, r3, #0xFF
  00010	e3e05000	 mvn         r5, #0
  00014	e3a08004	 mov         r8, #4
  00018	e3a07001	 mov         r7, #1
  0001c		 |$LL7@SPIPowerTi|

; 203  :     SPI_DEVICE *pDevice = (SPI_DEVICE*)(pv);
; 204  : 	BOOL exp = TRUE;
; 205  : 
; 206  :     while (exp)
; 207  :         {
; 208  :         WaitForSingleObject(pDevice->hTimerEvent, nTimeout);

  0001c	e5940278	 ldr         r0, [r4, #0x278]
  00020	e1a01005	 mov         r1, r5
  00024	eb000000	 bl          WaitForSingleObject

; 209  : 
; 210  :         if (pDevice->bExitThread == TRUE) break;

  00028	e5943280	 ldr         r3, [r4, #0x280]
  0002c	e3530001	 cmp         r3, #1
  00030	0a000020	 beq         |$LN15@SPIPowerTi|

; 211  : 
; 212  :         // serialize access to power state changes
; 213  : 		WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  00034	e594001c	 ldr         r0, [r4, #0x1C]
  00038	e3e01000	 mvn         r1, #0
  0003c	eb000000	 bl          WaitForSingleObject

; 214  : 
; 215  :         // by the time this thread got the lock hTimerEvent may 
; 216  :         // have gotten resignaled.  Clear the event to  make
; 217  :         // sure the activity timer thread isn't awaken prematurely
; 218  :         //
; 219  :         ResetEvent(pDevice->hTimerEvent);

  00040	e5940278	 ldr         r0, [r4, #0x278]
  00044	e3a01002	 mov         r1, #2
  00048	eb000000	 bl          EventModify

; 220  : 
; 221  :         // check if we need to reset the timer
; 222  :         if (pDevice->nPowerCounter == 0)

  0004c	e5943284	 ldr         r3, [r4, #0x284]
  00050	e3530000	 cmp         r3, #0
  00054	1a000013	 bne         |$LN4@SPIPowerTi|

; 223  :             {
; 224  :             // We disable the power only when this thread
; 225  :             // wakes-up twice in a row with no power state
; 226  :             // change to D0.  This is achieved by using the
; 227  :             // bDisablePower flag to determine if power state
; 228  :             // changed since the last time this thread woke-up
; 229  :             //
; 230  :             if (pDevice->bDisablePower == TRUE)

  00058	e594327c	 ldr         r3, [r4, #0x27C]
  0005c	e3530001	 cmp         r3, #1
  00060	1a00000d	 bne         |$LN3@SPIPowerTi|

; 231  :                 {
; 232  :                 // force idle
; 233  :                 OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG,
; 234  :                        MCSPI_SYSCONFIG_ENAWAKEUP);

  00064	e5943018	 ldr         r3, [r4, #0x18]

; 235  : 
; 236  :                 // Clear interrupts.
; 237  :                 OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQSTATUS, 0xFFFF);
; 238  :                 
; 239  :                 //EnableDeviceClocks(pDevice->deviceID, FALSE);
; 240  : 
; 241  :                 SetDevicePowerState(pDevice->hParentBus, D4, 0);                

  00068	e3a02000	 mov         r2, #0
  0006c	e3a01004	 mov         r1, #4
  00070	e5838010	 str         r8, [r3, #0x10]
  00074	e5943018	 ldr         r3, [r4, #0x18]
  00078	e5836018	 str         r6, [r3, #0x18]
  0007c	e5940014	 ldr         r0, [r4, #0x14]
  00080	eb000000	 bl          SetDevicePowerState

; 242  :                 pDevice->powerState = D4;
; 243  :                 nTimeout = INFINITE;
; 244  :                 SetEvent(pDevice->hDeviceOffEvent);

  00084	e594028c	 ldr         r0, [r4, #0x28C]
  00088	e3a01003	 mov         r1, #3
  0008c	e5848034	 str         r8, [r4, #0x34]
  00090	e3e05000	 mvn         r5, #0
  00094	eb000000	 bl          EventModify

; 245  :                 }
; 246  :             else

  00098	ea000003	 b           |$LN1@SPIPowerTi|
  0009c		 |$LN3@SPIPowerTi|

; 247  :                 {
; 248  :                 // wait for activity time-out before shutting off power.
; 249  :                 pDevice->bDisablePower = TRUE;
; 250  :                 nTimeout = pDevice->nActivityTimeout;

  0009c	e5945270	 ldr         r5, [r4, #0x270]
  000a0	e584727c	 str         r7, [r4, #0x27C]

; 251  :                 }
; 252  :             }
; 253  :         else

  000a4	ea000000	 b           |$LN1@SPIPowerTi|
  000a8		 |$LN4@SPIPowerTi|

; 254  :             {
; 255  :             // disable power and wait for timer to get restarted
; 256  :             nTimeout = INFINITE;

  000a8	e3e05000	 mvn         r5, #0
  000ac		 |$LN1@SPIPowerTi|

; 257  :             }
; 258  : 		ReleaseMutex(pDevice->hControllerMutex);

  000ac	e594001c	 ldr         r0, [r4, #0x1C]
  000b0	eb000000	 bl          ReleaseMutex
  000b4	eaffffd8	 b           |$LL7@SPIPowerTi|
  000b8		 |$LN15@SPIPowerTi|

; 259  :         }
; 260  : 
; 261  :     return 1;

  000b8	e3a00001	 mov         r0, #1

; 262  : }

  000bc	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000c0	e12fff1e	 bx          lr
  000c4		 |$M45871|

			 ENDP  ; |SPIPowerTimerThread|

	EXPORT	|SetSPIPower|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45892| DCD	|$LN15@SetSPIPowe|
	DCD	0x40003b01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SetSPIPower| PROC

; 276  : {

  00000		 |$LN15@SetSPIPowe|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45889|
  00004	e1a04001	 mov         r4, r1
  00008	e1a05000	 mov         r5, r0

; 277  :     // enable power when the power state request is D0-D2
; 278  : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  0000c	e595001c	 ldr         r0, [r5, #0x1C]
  00010	e3e01000	 mvn         r1, #0
  00014	eb000000	 bl          WaitForSingleObject

; 279  : 
; 280  :     if (state < D3)

  00018	e3540003	 cmp         r4, #3
  0001c	aa000010	 bge         |$LN6@SetSPIPowe|

; 281  :         {
; 282  :         if (pDevice->powerState >= D3)

  00020	e5953034	 ldr         r3, [r5, #0x34]
  00024	e3a04000	 mov         r4, #0
  00028	e3530003	 cmp         r3, #3
  0002c	ba000007	 blt         |$LN5@SetSPIPowe|

; 283  :             {
; 284  : 			//EnableDeviceClocks(pDevice->deviceID, TRUE);
; 285  :             SetDevicePowerState(pDevice->hParentBus, D0, NULL);

  00030	e5950014	 ldr         r0, [r5, #0x14]
  00034	e3a02000	 mov         r2, #0
  00038	e3a01000	 mov         r1, #0
  0003c	eb000000	 bl          SetDevicePowerState

; 286  :             pDevice->powerState = D0;            
; 287  : 
; 288  :             // smart idle
; 289  :             OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG,
; 290  :                 MCSPI_SYSCONFIG_AUTOIDLE |
; 291  :                 MCSPI_SYSCONFIG_SMARTIDLE |
; 292  :                 MCSPI_SYSCONFIG_ENAWAKEUP);

  00040	e5953018	 ldr         r3, [r5, #0x18]
  00044	e3a02015	 mov         r2, #0x15
  00048	e5854034	 str         r4, [r5, #0x34]
  0004c	e5832010	 str         r2, [r3, #0x10]
  00050		 |$LN5@SetSPIPowe|

; 293  :             }
; 294  :         pDevice->bDisablePower = FALSE;
; 295  :         pDevice->nPowerCounter++;

  00050	e5953284	 ldr         r3, [r5, #0x284]
  00054	e585427c	 str         r4, [r5, #0x27C]
  00058	e2833001	 add         r3, r3, #1
  0005c	e5853284	 str         r3, [r5, #0x284]

; 296  :         }
; 297  :     else

  00060	ea00001c	 b           |$LN1@SetSPIPowe|
  00064		 |$LN6@SetSPIPowe|

; 298  :         {
; 299  :         pDevice->nPowerCounter--;

  00064	e5953284	 ldr         r3, [r5, #0x284]
  00068	e2533001	 subs        r3, r3, #1
  0006c	e5853284	 str         r3, [r5, #0x284]

; 300  :         if (pDevice->nPowerCounter == 0)

  00070	1a000018	 bne         |$LN1@SetSPIPowe|

; 301  :             {
; 302  :             if ((pDevice->hTimerEvent != NULL) && (pDevice->systemState != D4))

  00074	e5953278	 ldr         r3, [r5, #0x278]
  00078	e3530000	 cmp         r3, #0
  0007c	0a000009	 beq         |$LN2@SetSPIPowe|
  00080	e5953290	 ldr         r3, [r5, #0x290]
  00084	e3530004	 cmp         r3, #4
  00088	0a000006	 beq         |$LN2@SetSPIPowe|

; 303  :                 {
; 304  :                 // Reset the device OFF event, set
; 305  :                 // after the device is put to D4 state
; 306  :                 ResetEvent(pDevice->hDeviceOffEvent);

  0008c	e595028c	 ldr         r0, [r5, #0x28C]
  00090	e3a01002	 mov         r1, #2
  00094	eb000000	 bl          EventModify

; 307  : 
; 308  :                 SetEvent(pDevice->hTimerEvent);

  00098	e5950278	 ldr         r0, [r5, #0x278]
  0009c	e3a01003	 mov         r1, #3
  000a0	eb000000	 bl          EventModify

; 309  :                 }
; 310  :             else

  000a4	ea00000b	 b           |$LN1@SetSPIPowe|
  000a8		 |$LN2@SetSPIPowe|

; 311  :                 {
; 312  :                 // force idle
; 313  :                 OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG,
; 314  :                        MCSPI_SYSCONFIG_ENAWAKEUP);

  000a8	e5953018	 ldr         r3, [r5, #0x18]
  000ac	e3a04004	 mov         r4, #4
  000b0	e3a02cff	 mov         r2, #0xFF, 24
  000b4	e5834010	 str         r4, [r3, #0x10]

; 315  : 
; 316  :                 // Clear interrupts.
; 317  :                 OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQSTATUS, 0xFFFF);

  000b8	e5951018	 ldr         r1, [r5, #0x18]
  000bc	e38230ff	 orr         r3, r2, #0xFF

; 318  : 
; 319  :                 //EnableDeviceClocks(pDevice->deviceID, FALSE);
; 320  :                 SetDevicePowerState(pDevice->hParentBus, D4, NULL);

  000c0	e3a02000	 mov         r2, #0
  000c4	e5813018	 str         r3, [r1, #0x18]
  000c8	e5950014	 ldr         r0, [r5, #0x14]
  000cc	e3a01004	 mov         r1, #4
  000d0	eb000000	 bl          SetDevicePowerState

; 321  : 
; 322  :                 pDevice->powerState = D4;

  000d4	e5854034	 str         r4, [r5, #0x34]
  000d8		 |$LN1@SetSPIPowe|

; 323  :                 }
; 324  :             }
; 325  :         }
; 326  :     
; 327  : 	ReleaseMutex(pDevice->hControllerMutex);

  000d8	e595001c	 ldr         r0, [r5, #0x1C]
  000dc	eb000000	 bl          ReleaseMutex

; 328  :     return TRUE;

  000e0	e3a00001	 mov         r0, #1

; 329  : }

  000e4	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  000e8	e12fff1e	 bx          lr
  000ec		 |$M45890|

			 ENDP  ; |SetSPIPower|

	EXPORT	|SPI_Deinit|
	IMPORT	|LocalFree|
	IMPORT	|DeleteCriticalSection|
	IMPORT	|KernelIoControl|
	IMPORT	|InterruptDisable|
	IMPORT	|MmUnmapIoSpace|
	IMPORT	|CloseBusAccessHandle|
	IMPORT	|CloseHandle|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T45907| DCD	|$LN16@SPI_Deinit|
	DCD	0x40004802
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_Deinit| PROC

; 552  : {

  00000		 |$LN16@SPI_Deinit|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M45904|
  00008	e1b04000	 movs        r4, r0

; 553  :     BOOL rc = FALSE;

  0000c	e3a00000	 mov         r0, #0

; 554  :     SPI_DEVICE *pDevice = (SPI_DEVICE*)context;
; 555  : 
; 556  :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Deinit(0x%08x)\r\n", context));
; 557  : 
; 558  :     // Check if we get correct context
; 559  :     if (pDevice == NULL || pDevice->cookie != SPI_DEVICE_COOKIE) {

  00010	0a00003d	 beq         |$cleanUp$44709|
  00014	e5942000	 ldr         r2, [r4]
  00018	e59f30fc	 ldr         r3, [pc, #0xFC]
  0001c	e1520003	 cmp         r2, r3
  00020	1a000039	 bne         |$cleanUp$44709|

; 560  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Deinit: "
; 561  :             L"Incorrect context paramer\r\n"
; 562  :         ));
; 563  :         goto cleanUp;
; 564  :     }
; 565  : 
; 566  :     // Check for open instances
; 567  :     if (pDevice->instances > 0) {

  00024	e5943010	 ldr         r3, [r4, #0x10]
  00028	e3530000	 cmp         r3, #0
  0002c	ca000036	 bgt         |$cleanUp$44709|

; 568  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Deinit: "
; 569  :             L"Deinit with active instance (%d instances active)\r\n",
; 570  :             pDevice->instances
; 571  :         ));
; 572  :         goto cleanUp;
; 573  :     }
; 574  : 
; 575  :     // stop interrupt thread
; 576  :     if (pDevice->hTimerThread != NULL)

  00030	e5943274	 ldr         r3, [r4, #0x274]
  00034	e3a05000	 mov         r5, #0
  00038	e3530000	 cmp         r3, #0
  0003c	0a00000a	 beq         |$LN6@SPI_Deinit|

; 577  :         {
; 578  :         pDevice->bExitThread = TRUE;
; 579  :         SetEvent(pDevice->hTimerEvent);

  00040	e5940278	 ldr         r0, [r4, #0x278]
  00044	e3a03001	 mov         r3, #1
  00048	e3a01003	 mov         r1, #3
  0004c	e5843280	 str         r3, [r4, #0x280]
  00050	eb000000	 bl          EventModify

; 580  :         WaitForSingleObject(pDevice->hTimerThread, INFINITE);

  00054	e5940274	 ldr         r0, [r4, #0x274]
  00058	e3e01000	 mvn         r1, #0
  0005c	eb000000	 bl          WaitForSingleObject

; 581  :         CloseHandle(pDevice->hTimerThread);

  00060	e5940274	 ldr         r0, [r4, #0x274]
  00064	eb000000	 bl          CloseHandle

; 582  :         pDevice->hTimerThread = NULL;

  00068	e5845274	 str         r5, [r4, #0x274]
  0006c		 |$LN6@SPI_Deinit|

; 583  :         }
; 584  : 
; 585  :     // Set hardware to D4 and close parent bus driver
; 586  :     if (pDevice->hParentBus!= NULL) 

  0006c	e5943014	 ldr         r3, [r4, #0x14]
  00070	e3530000	 cmp         r3, #0
  00074	0a000004	 beq         |$LN5@SPI_Deinit|

; 587  :     {
; 588  :         SetSPIPower(pDevice,  D4);

  00078	e3a01004	 mov         r1, #4
  0007c	e1a00004	 mov         r0, r4
  00080	eb000000	 bl          SetSPIPower

; 589  :         CloseBusAccessHandle(pDevice->hParentBus);

  00084	e5940014	 ldr         r0, [r4, #0x14]
  00088	eb000000	 bl          CloseBusAccessHandle
  0008c		 |$LN5@SPI_Deinit|

; 590  :     }
; 591  : 
; 592  :     // Unmap SPI controller registers
; 593  :     if (pDevice->pSPIRegs != NULL)

  0008c	e5943018	 ldr         r3, [r4, #0x18]
  00090	e3530000	 cmp         r3, #0

; 594  :     {
; 595  :         MmUnmapIoSpace((VOID*)pDevice->pSPIRegs, sizeof(OMAP_MCSPI_REGS));

  00094	13a0107c	 movne       r1, #0x7C
  00098	11a00003	 movne       r0, r3
  0009c	1b000000	 blne        MmUnmapIoSpace

; 596  :     }
; 597  : 
; 598  :     // Release SPI controller interrupt
; 599  :     if (pDevice->sysIntr != 0) 

  000a0	e5943020	 ldr         r3, [r4, #0x20]
  000a4	e3530000	 cmp         r3, #0
  000a8	0a000008	 beq         |$LN3@SPI_Deinit|

; 600  : 	{
; 601  :         InterruptDisable(pDevice->sysIntr);

  000ac	e1a00003	 mov         r0, r3
  000b0	eb000000	 bl          InterruptDisable

; 602  :         KernelIoControl(
; 603  :             IOCTL_HAL_RELEASE_SYSINTR, &pDevice->sysIntr,
; 604  :             sizeof(pDevice->sysIntr), NULL, 0, NULL
; 605  :         );

  000b4	e59f005c	 ldr         r0, [pc, #0x5C]
  000b8	e3a03000	 mov         r3, #0
  000bc	e3a02004	 mov         r2, #4
  000c0	e2841020	 add         r1, r4, #0x20
  000c4	e58d5004	 str         r5, [sp, #4]
  000c8	e58d5000	 str         r5, [sp]
  000cc	eb000000	 bl          KernelIoControl
  000d0		 |$LN3@SPI_Deinit|

; 606  :     }
; 607  : 
; 608  :     // Close interrupt handler
; 609  :     if (pDevice->hIntrEvent != NULL) CloseHandle(pDevice->hIntrEvent);

  000d0	e5943024	 ldr         r3, [r4, #0x24]
  000d4	e3530000	 cmp         r3, #0
  000d8	11a00003	 movne       r0, r3
  000dc	1b000000	 blne        CloseHandle

; 610  : 
; 611  :     // release dvfs resources
; 612  :     if (pDevice->hDVFSAsyncEvent != NULL) CloseHandle(pDevice->hDVFSAsyncEvent);

  000e0	e5943050	 ldr         r3, [r4, #0x50]
  000e4	e3530000	 cmp         r3, #0
  000e8	11a00003	 movne       r0, r3
  000ec	1b000000	 blne        CloseHandle

; 613  : 
; 614  :     // Delete critical section
; 615  :     DeleteCriticalSection(&pDevice->csDVFS);

  000f0	e2840f97	 add         r0, r4, #0x97, 30
  000f4	eb000000	 bl          DeleteCriticalSection

; 616  : 	
; 617  : 	// Delete mutex
; 618  : 	CloseHandle(pDevice->hControllerMutex);

  000f8	e594001c	 ldr         r0, [r4, #0x1C]
  000fc	eb000000	 bl          CloseHandle

; 619  : 
; 620  :     // Free device structure
; 621  :     LocalFree(pDevice);

  00100	e1a00004	 mov         r0, r4
  00104	eb000000	 bl          LocalFree

; 622  : 
; 623  :     // Done
; 624  :     rc = TRUE;

  00108	e3a00001	 mov         r0, #1
  0010c		 |$cleanUp$44709|

; 625  : 
; 626  : cleanUp:
; 627  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Deinit(rc = %d)\r\n", rc));
; 628  :     return rc;
; 629  : }

  0010c	e28dd008	 add         sp, sp, #8
  00110	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00114	e12fff1e	 bx          lr
  00118		 |$LN17@SPI_Deinit|
  00118		 |$LN18@SPI_Deinit|
  00118	010100d8	 DCD         0x10100d8
  0011c		 |$LN19@SPI_Deinit|
  0011c	73706944	 DCD         0x73706944
  00120		 |$M45905|

			 ENDP  ; |SPI_Deinit|

	EXPORT	|SPI_Open|
	IMPORT	|LocalAlloc|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T45923| DCD	|$LN8@SPI_Open|
	DCD	0x40001b01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_Open| PROC

; 638  : {

  00000		 |$LN8@SPI_Open|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M45920|
  00004	e1b05000	 movs        r5, r0

; 639  :     DWORD rc = (DWORD)NULL;

  00008	e3a04000	 mov         r4, #0

; 640  :     SPI_DEVICE *pDevice = (SPI_DEVICE*)context;
; 641  :     SPI_INSTANCE *pInstance = NULL;
; 642  : 
; 643  : 	UNREFERENCED_PARAMETER(accessCode);
; 644  : 	UNREFERENCED_PARAMETER(shareMode);
; 645  : 
; 646  :     DEBUGMSG(ZONE_FUNCTION, (
; 647  :         L"+SPI_Open(0x%08x, 0x%08x, 0x%08x\r\n", context, accessCode, shareMode
; 648  :     ));
; 649  : 
; 650  :     // Check if we get correct context
; 651  :     if (pDevice == NULL || pDevice->cookie != SPI_DEVICE_COOKIE) {

  0000c	0a000011	 beq         |$cleanUp$44748|
  00010	e5952000	 ldr         r2, [r5]
  00014	e59f304c	 ldr         r3, [pc, #0x4C]
  00018	e1520003	 cmp         r2, r3
  0001c	1a00000d	 bne         |$cleanUp$44748|

; 652  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Open: "
; 653  :             L"Incorrect context parameter\r\n"
; 654  :         ));
; 655  :         goto cleanUp;
; 656  :     }
; 657  : 
; 658  :     // Create device structure
; 659  :     pInstance = (SPI_INSTANCE*)LocalAlloc(LPTR, sizeof(SPI_INSTANCE));

  00020	e3a010c8	 mov         r1, #0xC8
  00024	e3a00040	 mov         r0, #0x40
  00028	eb000000	 bl          LocalAlloc
  0002c	e1b06000	 movs        r6, r0

; 660  :     if (pInstance == NULL) {

  00030	0a000008	 beq         |$cleanUp$44748|

; 661  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Open: "
; 662  :             L"Failed allocate SPI instance structure\r\n"
; 663  :         ));
; 664  :         goto cleanUp;
; 665  :     }
; 666  : 	
; 667  :     memset(pInstance, 0, sizeof(SPI_INSTANCE));

  00034	e3a020c8	 mov         r2, #0xC8
  00038	e3a01000	 mov         r1, #0
  0003c	e1a00006	 mov         r0, r6
  00040	eb000000	 bl          memset

; 668  : 
; 669  :     // Set cookie
; 670  :     pInstance->cookie = SPI_INSTANCE_COOKIE;

  00044	e59f3018	 ldr         r3, [pc, #0x18]

; 671  : 
; 672  :     // Save device reference
; 673  :     pInstance->pDevice = pDevice;
; 674  : 
; 675  :     // Increment number of open instances
; 676  :     InterlockedIncrement(&pDevice->instances);

  00048	e2850010	 add         r0, r5, #0x10
  0004c	e8860028	 stmia       r6, {r3, r5}
  00050	eb000000	 bl          InterlockedIncrement

; 677  : 
; 678  :     // sanity check number of instances
; 679  :     ASSERT(pDevice->instances > 0);
; 680  : 
; 681  :     // Done...
; 682  :     rc = (DWORD)pInstance;

  00054	e1a04006	 mov         r4, r6
  00058		 |$cleanUp$44748|

; 683  : 
; 684  : cleanUp:
; 685  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Open(rc = 0x%08x)\r\n", rc));
; 686  :     return rc;
; 687  : }

  00058	e1a00004	 mov         r0, r4
  0005c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00060	e12fff1e	 bx          lr
  00064		 |$LN9@SPI_Open|
  00064		 |$LN10@SPI_Open|
  00064	73706949	 DCD         0x73706949
  00068		 |$LN11@SPI_Open|
  00068	73706944	 DCD         0x73706944
  0006c		 |$M45921|

			 ENDP  ; |SPI_Open|

	EXPORT	|SPI_Close|
	IMPORT	|SpiDmaDeinit|

  00000			 AREA	 |.pdata|, PDATA
|$T45938| DCD	|$LN8@SPI_Close|
	DCD	0x40002401
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_Close| PROC

; 696  : {

  00000		 |$LN8@SPI_Close|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45935|
  00004	e1b04000	 movs        r4, r0

; 697  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 698  :     SPI_DEVICE *pDevice;
; 699  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 700  : 
; 701  :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Close(0x%08x)\r\n", context));
; 702  : 
; 703  :     // Check if we get correct context
; 704  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  0000c	0a00001c	 beq         |$cleanUp$44770|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f3070	 ldr         r3, [pc, #0x70]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000018	 bne         |$cleanUp$44770|

; 705  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Transfer: "
; 706  :             L"Incorrect context paramer\r\n"
; 707  :         ));
; 708  :         goto cleanUp;
; 709  :     }
; 710  : 
; 711  :     // Shutdown DMA channels
; 712  :     SpiDmaDeinit(pInstance);

  00020	e1a00004	 mov         r0, r4
  00024	eb000000	 bl          SpiDmaDeinit

; 713  : 
; 714  :     // Get device context
; 715  :     pDevice = pInstance->pDevice;

  00028	e5945004	 ldr         r5, [r4, #4]

; 716  : 
; 717  :     // sanity check number of instances
; 718  :     ASSERT(pDevice->instances > 0);
; 719  : 
; 720  :     // Decrement number of open instances
; 721  :     if (InterlockedDecrement(&pDevice->instances) == 0)

  0002c	e2850010	 add         r0, r5, #0x10
  00030	eb000000	 bl          InterlockedDecrement
  00034	e3500000	 cmp         r0, #0
  00038	1a00000e	 bne         |$LN1@SPI_Close|

; 722  :     {
; 723  :         // Get hardware
; 724  : 		WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  0003c	e595001c	 ldr         r0, [r5, #0x1C]
  00040	e3e01000	 mvn         r1, #0
  00044	eb000000	 bl          WaitForSingleObject

; 725  : 
; 726  :         // Set this driver to Active Mode
; 727  :         SetSPIPower(pDevice, D0);

  00048	e3a01000	 mov         r1, #0
  0004c	e1a00005	 mov         r0, r5
  00050	eb000000	 bl          SetSPIPower

; 728  : 
; 729  :         // If number of open instances is 0, reset the eSpiMode to unknown and 
; 730  :         // MCSPI_MODULCTRL to 0 so we can change it later.
; 731  :         pDevice->eSpiMode = UNKNOWN;
; 732  :         OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, 0);

  00054	e5953018	 ldr         r3, [r5, #0x18]
  00058	e3a02000	 mov         r2, #0
  0005c	e5852040	 str         r2, [r5, #0x40]

; 733  : 
; 734  :         // Set this driver to Suspend Mode
; 735  :         SetSPIPower(pDevice, D4);

  00060	e3a01004	 mov         r1, #4
  00064	e1a00005	 mov         r0, r5
  00068	e5832028	 str         r2, [r3, #0x28]
  0006c	eb000000	 bl          SetSPIPower

; 736  : 
; 737  :         // Release hardware
; 738  : 		ReleaseMutex(pDevice->hControllerMutex);

  00070	e595001c	 ldr         r0, [r5, #0x1C]
  00074	eb000000	 bl          ReleaseMutex
  00078		 |$LN1@SPI_Close|

; 739  :     }
; 740  : 
; 741  :     // Free instance structure
; 742  :     LocalFree(pInstance);

  00078	e1a00004	 mov         r0, r4
  0007c	eb000000	 bl          LocalFree

; 743  : 
; 744  :     // Done...
; 745  :     rc = TRUE;

  00080	e3a00001	 mov         r0, #1
  00084		 |$cleanUp$44770|

; 746  : 
; 747  : cleanUp:
; 748  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Close(rc = %d)\r\n", rc));
; 749  :     return rc;
; 750  : }

  00084	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00088	e12fff1e	 bx          lr
  0008c		 |$LN9@SPI_Close|
  0008c		 |$LN10@SPI_Close|
  0008c	73706949	 DCD         0x73706949
  00090		 |$M45936|

			 ENDP  ; |SPI_Close|

	EXPORT	|SPI_Configure|
	IMPORT	|SpiDmaInit|

  00000			 AREA	 |.pdata|, PDATA
|$T45955| DCD	|$LN24@SPI_Config|
	DCD	0x40004d01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_Configure| PROC

; 759  : {

  00000		 |$LN24@SPI_Config|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M45952|
  00004	e1a07002	 mov         r7, r2
  00008	e1a06001	 mov         r6, r1
  0000c	e1b05000	 movs        r5, r0

; 760  :     BOOL rc = FALSE;

  00010	e3a08000	 mov         r8, #0

; 761  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 762  :     SPI_DEVICE *pDevice;
; 763  : 
; 764  :     DEBUGMSG(ZONE_FUNCTION, (L"SPI_Configure Addr = 0x%x  Config = 0x%x\r\n", address, config));
; 765  : 
; 766  :     // Check if we get correct context
; 767  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  00014	0a000042	 beq         |$cleanUp$44792|
  00018	e595e000	 ldr         lr, [r5]
  0001c	e59f310c	 ldr         r3, [pc, #0x10C]
  00020	e15e0003	 cmp         lr, r3
  00024	1a00003e	 bne         |$cleanUp$44792|

; 768  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Configure: "
; 769  :             L"Incorrect context paramer\r\n"
; 770  :         ));
; 771  :         goto cleanUp;
; 772  :     }
; 773  : 
; 774  :     //  Check channel
; 775  :     if (address >= MCSPI_MAX_CHANNELS) {

  00028	e3560004	 cmp         r6, #4
  0002c	2a00003c	 bcs         |$cleanUp$44792|

; 776  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Configure: "
; 777  :             L"Incorrect address paramer\r\n"
; 778  :         ));
; 779  :         goto cleanUp;
; 780  :     }
; 781  : 
; 782  :     // Get Device
; 783  :     pDevice = pInstance->pDevice;

  00030	e5954004	 ldr         r4, [r5, #4]

; 784  : 
; 785  :     if (address > 0)

  00034	e3560000	 cmp         r6, #0
  00038	0a000007	 beq         |$LN13@SPI_Config|

; 786  :     {
; 787  :         switch (pDevice->eSpiMode)

  0003c	e5943040	 ldr         r3, [r4, #0x40]
  00040	e3530000	 cmp         r3, #0
  00044	0a000002	 beq         |$LN11@SPI_Config|
  00048	e3530002	 cmp         r3, #2
  0004c	1a000002	 bne         |$LN13@SPI_Config|

; 788  :         {
; 789  :             case SLAVE:
; 790  :                 DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Configure: "
; 791  :                     L"Incorrect address paramer for slave device\r\n"
; 792  :                 ));
; 793  :                 goto cleanUp;

  00050	ea000033	 b           |$cleanUp$44792|
  00054		 |$LN11@SPI_Config|

; 794  :                 break;
; 795  : 
; 796  :             case UNKNOWN:
; 797  :                 pDevice->eSpiMode = MASTER;

  00054	e3a03001	 mov         r3, #1
  00058	e5843040	 str         r3, [r4, #0x40]
  0005c		 |$LN13@SPI_Config|

; 798  :                 break;
; 799  : 
; 800  :             default:
; 801  :                 break;
; 802  :         }
; 803  : 
; 804  :     }
; 805  : 
; 806  :     // Set Address and config
; 807  :     pInstance->address = address;

  0005c	e5856008	 str         r6, [r5, #8]

; 808  :     pInstance->config  = config;

  00060	e585700c	 str         r7, [r5, #0xC]

; 809  : 
; 810  :     // Get hardware
; 811  : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  00064	e594001c	 ldr         r0, [r4, #0x1C]
  00068	e3e01000	 mvn         r1, #0
  0006c	eb000000	 bl          WaitForSingleObject

; 812  : 
; 813  :     // Setting active instance which is needed for context restore
; 814  :     pDevice->pActiveInstance = (void*)pInstance;
; 815  : 
; 816  :     // Set this driver to Active Mode
; 817  :     SetSPIPower(pDevice, D0);

  00070	e3a01000	 mov         r1, #0
  00074	e1a00004	 mov         r0, r4
  00078	e5845288	 str         r5, [r4, #0x288]
  0007c	eb000000	 bl          SetSPIPower

; 818  :     
; 819  :     // Configure the channel
; 820  :     switch( address )

  00080	e3560000	 cmp         r6, #0
  00084	0a00000e	 beq         |$LN7@SPI_Config|
  00088	e3560001	 cmp         r6, #1
  0008c	0a000009	 beq         |$LN6@SPI_Config|
  00090	e3560002	 cmp         r6, #2
  00094	0a000004	 beq         |$LN5@SPI_Config|
  00098	e3560003	 cmp         r6, #3
  0009c	1a00000c	 bne         |$LN8@SPI_Config|

; 839  : 
; 840  :         case 3:
; 841  :             //  Channel 3 configuration
; 842  :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF3);

  000a0	e5943018	 ldr         r3, [r4, #0x18]
  000a4	e2833068	 add         r3, r3, #0x68

; 843  :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, config);
; 844  :             break;

  000a8	ea000007	 b           |$LN21@SPI_Config|
  000ac		 |$LN5@SPI_Config|

; 833  : 
; 834  :         case 2:
; 835  :             //  Channel 2 configuration
; 836  :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF2);

  000ac	e5943018	 ldr         r3, [r4, #0x18]
  000b0	e2833054	 add         r3, r3, #0x54

; 837  :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, config);
; 838  :             break;

  000b4	ea000004	 b           |$LN21@SPI_Config|
  000b8		 |$LN6@SPI_Config|

; 826  :             break;
; 827  : 
; 828  :         case 1:
; 829  :             //  Channel 1 configuration
; 830  :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF1);

  000b8	e5943018	 ldr         r3, [r4, #0x18]
  000bc	e2833040	 add         r3, r3, #0x40

; 831  :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, config);
; 832  :             break;

  000c0	ea000001	 b           |$LN21@SPI_Config|
  000c4		 |$LN7@SPI_Config|

; 821  :     {
; 822  :         case 0:
; 823  :             //  Channel 0 configuration
; 824  :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF0);

  000c4	e5943018	 ldr         r3, [r4, #0x18]
  000c8	e283302c	 add         r3, r3, #0x2C
  000cc		 |$LN21@SPI_Config|
  000cc	e5853010	 str         r3, [r5, #0x10]

; 825  :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, config);

  000d0	e5837000	 str         r7, [r3]
  000d4		 |$LN8@SPI_Config|

; 845  : 
; 846  :         default:
; 847  :             break;
; 848  :     }
; 849  : 
; 850  :     //  Clear out current DMA configuration
; 851  :     SpiDmaDeinit(pInstance);

  000d4	e1a00005	 mov         r0, r5
  000d8	eb000000	 bl          SpiDmaDeinit

; 852  : 
; 853  :     //  Configure DMA if needed
; 854  :     if( config & (MCSPI_CHCONF_DMAR_ENABLE|MCSPI_CHCONF_DMAW_ENABLE) )

  000dc	e3170903	 tst         r7, #3, 18
  000e0	0a000009	 beq         |$LN1@SPI_Config|

; 855  :     {
; 856  :         if( SpiDmaInit(pInstance) == FALSE ) 

  000e4	e1a00005	 mov         r0, r5
  000e8	eb000000	 bl          SpiDmaInit
  000ec	e3500000	 cmp         r0, #0
  000f0	1a000005	 bne         |$LN1@SPI_Config|

; 857  :         {
; 858  :             DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Configure: "
; 859  :                 L"DMA initialization failed\r\n"
; 860  :             ));
; 861  : 
; 862  :             // Set this driver to Suspend Mode
; 863  :             SetSPIPower(pDevice, D4);

  000f4	e3a01004	 mov         r1, #4
  000f8	e1a00004	 mov         r0, r4
  000fc	eb000000	 bl          SetSPIPower

; 864  : 
; 865  :             // Release hardware
; 866  : 			ReleaseMutex(pDevice->hControllerMutex);

  00100	e594001c	 ldr         r0, [r4, #0x1C]
  00104	eb000000	 bl          ReleaseMutex

; 867  :             goto cleanUp;

  00108	ea000005	 b           |$cleanUp$44792|
  0010c		 |$LN1@SPI_Config|

; 868  :         }
; 869  :     }
; 870  : 
; 871  :     // Set this driver to Suspend Mode
; 872  :     SetSPIPower(pDevice, D4);

  0010c	e3a01004	 mov         r1, #4
  00110	e1a00004	 mov         r0, r4
  00114	eb000000	 bl          SetSPIPower

; 873  :     
; 874  :     // Release hardware
; 875  : 	ReleaseMutex(pDevice->hControllerMutex);

  00118	e594001c	 ldr         r0, [r4, #0x1C]
  0011c	eb000000	 bl          ReleaseMutex

; 876  : 
; 877  :     // Success
; 878  :     rc = TRUE;

  00120	e3a08001	 mov         r8, #1
  00124		 |$cleanUp$44792|

; 879  : 
; 880  : cleanUp:    
; 881  :     return rc;
; 882  : }

  00124	e1a00008	 mov         r0, r8
  00128	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN25@SPI_Config|
  00130		 |$LN26@SPI_Config|
  00130	73706949	 DCD         0x73706949
  00134		 |$M45953|

			 ENDP  ; |SPI_Configure|

	EXPORT	|SPI_SetSlaveMode|

  00000			 AREA	 |.pdata|, PDATA
|$T45969| DCD	|$LN9@SPI_SetSla|
	DCD	0x40002101
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_SetSlaveMode| PROC

; 892  : {

  00000		 |$LN9@SPI_SetSla|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M45966|
  00004	e1b04000	 movs        r4, r0

; 893  :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 894  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 895  :     SPI_DEVICE *pDevice;
; 896  : 
; 897  :     DEBUGMSG(ZONE_FUNCTION, (L"+SSPI_SetSlaveMode.\r\n"));
; 898  : 
; 899  :     // Check if we get correct context
; 900  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  0000c	0a000019	 beq         |$cleanUp$44841|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f3064	 ldr         r3, [pc, #0x64]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000015	 bne         |$cleanUp$44841|

; 901  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_SetSlaveMode: "
; 902  :             L"Incorrect context paramer\r\n"
; 903  :         ));
; 904  :         goto cleanUp;
; 905  :     }
; 906  : 
; 907  :     // Get Device
; 908  :     pDevice = pInstance->pDevice;

  00020	e5945004	 ldr         r5, [r4, #4]

; 909  : 
; 910  :     // once we set eSpiMode to MASTER(someone configured channel 1 to N), we can't 
; 911  :     // change it back
; 912  :     if (pDevice->eSpiMode == MASTER)

  00024	e5953040	 ldr         r3, [r5, #0x40]
  00028	e3530001	 cmp         r3, #1
  0002c	0a000011	 beq         |$cleanUp$44841|

; 913  :     {
; 914  :         goto cleanUp;
; 915  :     }
; 916  :    
; 917  :     if (pDevice->eSpiMode == UNKNOWN)

  00030	e3530000	 cmp         r3, #0
  00034	1a00000e	 bne         |$LN1@SPI_SetSla|

; 918  :     {
; 919  :         // Get hardware
; 920  : 		WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  00038	e595001c	 ldr         r0, [r5, #0x1C]
  0003c	e3e01000	 mvn         r1, #0
  00040	eb000000	 bl          WaitForSingleObject

; 921  : 
; 922  :         // Setting active instance which is needed for context restore
; 923  :         pDevice->pActiveInstance = (void*)pInstance;
; 924  : 
; 925  : 
; 926  :         // Set this driver to Active Mode
; 927  :         SetSPIPower(pDevice, D0);

  00044	e3a01000	 mov         r1, #0
  00048	e1a00005	 mov         r0, r5
  0004c	e5854288	 str         r4, [r5, #0x288]
  00050	eb000000	 bl          SetSPIPower

; 928  : 
; 929  :         OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, MCSPI_MS_BIT);

  00054	e5953018	 ldr         r3, [r5, #0x18]
  00058	e3a02004	 mov         r2, #4

; 930  : 
; 931  :         // Set this driver to Suspend Mode
; 932  :         SetSPIPower(pDevice, D4);

  0005c	e3a01004	 mov         r1, #4
  00060	e1a00005	 mov         r0, r5
  00064	e5832028	 str         r2, [r3, #0x28]
  00068	eb000000	 bl          SetSPIPower

; 933  : 
; 934  :         // Release hardware
; 935  : 		ReleaseMutex(pDevice->hControllerMutex);

  0006c	e595001c	 ldr         r0, [r5, #0x1C]
  00070	eb000000	 bl          ReleaseMutex
  00074		 |$LN1@SPI_SetSla|

; 936  :     }
; 937  : 
; 938  :     // Success
; 939  :     rc = TRUE;

  00074	e3a00001	 mov         r0, #1
  00078		 |$cleanUp$44841|

; 940  : 
; 941  : cleanUp:
; 942  :     return rc;
; 943  : }

  00078	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  0007c	e12fff1e	 bx          lr
  00080		 |$LN10@SPI_SetSla|
  00080		 |$LN11@SPI_SetSla|
  00080	73706949	 DCD         0x73706949
  00084		 |$M45967|

			 ENDP  ; |SPI_SetSlaveMode|

	EXPORT	|SPI_DmaRead|
	IMPORT	|DmaInterruptDone|
	IMPORT	|memcpy|
	IMPORT	|__rt_udiv|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46014| DCD	|$LN27@SPI_DmaRea|
	DCD	0x40006302
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_DmaRead| PROC

; 1077 : {

  00000		 |$LN27@SPI_DmaRea|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M46011|
  00008	e1a05002	 mov         r5, r2
  0000c	e58d1000	 str         r1, [sp]
  00010	e1a04000	 mov         r4, r0

; 1078 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 1079 :     SPI_DEVICE *pDevice;
; 1080 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1081 :     UCHAR* pData = (UCHAR*)pBuffer;
; 1082 :     DWORD dwWordLen;
; 1083 :     DWORD dwWordSize;
; 1084 :     DWORD dwCount = 0;
; 1085 :     DWORD dwDmaSize;
; 1086 :     DWORD dwDmaStatus;
; 1087 : 
; 1088 :     DEBUGMSG(ZONE_DMA, (L"+SPI_DmaRead(0x%08x, 0x%08x, 0x%08x)\r\n", context, pBuffer, size));
; 1089 : 
; 1090 :     // We don't need to check instance since it's already checked by caller    
; 1091 :     ASSERT(pInstance->cookie == SPI_INSTANCE_COOKIE);
; 1092 : 
; 1093 :     // Get pointers to registers
; 1094 :     pDevice = pInstance->pDevice;
; 1095 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;
; 1096 : 
; 1097 : 
; 1098 :     // Get the word length of the data
; 1099 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  00014	e594300c	 ldr         r3, [r4, #0xC]
  00018	e5946004	 ldr         r6, [r4, #4]
  0001c	e5948010	 ldr         r8, [r4, #0x10]
  00020	e1a03a03	 mov         r3, r3, lsl #20
  00024	e1a03da3	 mov         r3, r3, lsr #27
  00028	e2833001	 add         r3, r3, #1

; 1100 : 
; 1101 :     //  Ensure that only SPI words elements are DMA'd
; 1102 :     //  Adjust the DMAsize
; 1103 :     if( dwWordLen > 16 )

  0002c	e3530010	 cmp         r3, #0x10

; 1104 :     {
; 1105 :         size = (size/sizeof(UINT32)) * sizeof(UINT32);

  00030	81a03125	 movhi       r3, r5, lsr #2
  00034	81a05103	 movhi       r5, r3, lsl #2

; 1106 :         dwWordSize = sizeof(UINT32);

  00038	83a07004	 movhi       r7, #4
  0003c	8a000004	 bhi         |$LN6@SPI_DmaRea|

; 1107 :     }
; 1108 :     else if( dwWordLen > 8 )

  00040	e3530008	 cmp         r3, #8

; 1109 :     {
; 1110 :         size = (size/sizeof(UINT16)) * sizeof(UINT16);

  00044	81a030a5	 movhi       r3, r5, lsr #1

; 1111 :         dwWordSize = sizeof(UINT16);

  00048	83a07002	 movhi       r7, #2
  0004c	81a05083	 movhi       r5, r3, lsl #1

; 1112 :     }
; 1113 :     else
; 1114 :     {
; 1115 :         dwWordSize = sizeof(UINT8);

  00050	93a07001	 movls       r7, #1
  00054		 |$LN6@SPI_DmaRea|

; 1116 :     }
; 1117 : 
; 1118 :     //  Get the length of how much can be DMA'd
; 1119 :     dwDmaSize = (size < pInstance->pDevice->dwRxBufferSize) ? size : pInstance->pDevice->dwRxBufferSize;

  00054	e5961030	 ldr         r1, [r6, #0x30]

; 1120 :     dwDmaSize /= dwWordSize;

  00058	e1a00007	 mov         r0, r7
  0005c	e1550001	 cmp         r5, r1
  00060	31a01005	 movcc       r1, r5
  00064	eb000000	 bl          __rt_udiv
  00068	e1a0a000	 mov         r10, r0

; 1121 : 
; 1122 :     // Get hardware
; 1123 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  0006c	e596001c	 ldr         r0, [r6, #0x1C]
  00070	e3e01000	 mvn         r1, #0
  00074	eb000000	 bl          WaitForSingleObject

; 1124 : 
; 1125 :     // Set this driver to Active Mode
; 1126 :     SetSPIPower(pDevice, D0);

  00078	e3a01000	 mov         r1, #0
  0007c	e1a00006	 mov         r0, r6
  00080	eb000000	 bl          SetSPIPower

; 1127 :     
; 1128 :     // Enable the channel
; 1129 : 	if (!pInstance->exclusiveAccess)

  00084	e5943014	 ldr         r3, [r4, #0x14]

; 1130 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1131 : 
; 1132 : 
; 1133 :     //  Write out all the data; loop if necessary
; 1134 :     for( dwCount = 0; dwCount < size; )

  00088	e3a09000	 mov         r9, #0
  0008c	e3530000	 cmp         r3, #0
  00090	05983008	 ldreq       r3, [r8, #8]
  00094	03833001	 orreq       r3, r3, #1
  00098	05883008	 streq       r3, [r8, #8]
  0009c	e3550000	 cmp         r5, #0
  000a0	0a00002b	 beq         |$cleanUp$44949|
  000a4	e1a0b80a	 mov         r11, r10, lsl #16
  000a8	e1a0b82b	 mov         r11, r11, lsr #16
  000ac	e3a02001	 mov         r2, #1
  000b0		 |$LL4@SPI_DmaRea|

; 1135 :     {
; 1136 :         // Set the DMA transfer size
; 1137 :         DmaSetElementAndFrameCount(&pInstance->rxDmaInfo, (UINT16) dwDmaSize, 1);

  000b0	e59430b4	 ldr         r3, [r4, #0xB4]

; 1138 :     
; 1139 :         DEBUGMSG(ZONE_DMA, (L" SPI_DmaRead: DMA Start (# elements, elementSize) = %d, %d\r\n", dwDmaSize, dwWordSize));
; 1140 : 
; 1141 : 
; 1142 :         // Start the DMA
; 1143 :         PreDmaActivation(pInstance);

  000b4	e1a00004	 mov         r0, r4
  000b8	e583b014	 str         r11, [r3, #0x14]
  000bc	e59430b4	 ldr         r3, [r4, #0xB4]
  000c0	e5832018	 str         r2, [r3, #0x18]
  000c4	eb000000	 bl          PreDmaActivation

; 1144 :         DmaStart(&pInstance->rxDmaInfo);

  000c8	e59420b4	 ldr         r2, [r4, #0xB4]
  000cc	e5923000	 ldr         r3, [r2]
  000d0	e3833080	 orr         r3, r3, #0x80
  000d4	e5823000	 str         r3, [r2]

; 1145 : 
; 1146 :         //  Wait for DMA done interrupt or timeout
; 1147 :         if( WaitForSingleObject(pInstance->hRxDmaIntEvent, pInstance->pDevice->timeout) != WAIT_OBJECT_0)

  000d8	e5943004	 ldr         r3, [r4, #4]
  000dc	e5940024	 ldr         r0, [r4, #0x24]
  000e0	e5931028	 ldr         r1, [r3, #0x28]
  000e4	eb000000	 bl          WaitForSingleObject
  000e8	e3500000	 cmp         r0, #0
  000ec	1a000012	 bne         |$LN23@SPI_DmaRea|

; 1157 :             goto cleanUp;
; 1158 :         }
; 1159 : 
; 1160 :         // Get and clear the status
; 1161 :         dwDmaStatus = DmaGetStatus(&pInstance->rxDmaInfo);

  000f0	e59420b4	 ldr         r2, [r4, #0xB4]
  000f4	e592300c	 ldr         r3, [r2, #0xC]

; 1162 :         DmaClearStatus(&pInstance->rxDmaInfo, dwDmaStatus);

  000f8	e582300c	 str         r3, [r2, #0xC]

; 1163 : 
; 1164 :         DEBUGMSG(ZONE_DMA, (L" SPI_DmaRead: DMA Status = %x\r\n", dwDmaStatus));
; 1165 : 
; 1166 :         // Stop the DMA
; 1167 :         DmaInterruptDone(pInstance->hRxDmaChannel);

  000fc	e594001c	 ldr         r0, [r4, #0x1C]
  00100	eb000000	 bl          DmaInterruptDone

; 1168 :         DmaStop(&pInstance->rxDmaInfo);

  00104	e28400a0	 add         r0, r4, #0xA0
  00108	eb000000	 bl          DmaStop

; 1169 :         PostDmaDeactivation(pInstance);

  0010c	e1a00004	 mov         r0, r4
  00110	eb000000	 bl          PostDmaDeactivation

; 1170 : 
; 1171 : 
; 1172 :         // Copy the data from the DMA buffer
; 1173 :         memcpy(&pData[dwCount], pInstance->pRxDmaBuffer, dwDmaSize*dwWordSize);

  00114	e59d3000	 ldr         r3, [sp]
  00118	e59410c0	 ldr         r1, [r4, #0xC0]
  0011c	e002079a	 mul         r2, r10, r7
  00120	e0890003	 add         r0, r9, r3
  00124	eb000000	 bl          memcpy

; 1174 : 
; 1175 :         //  Update amount transferred
; 1176 :         dwCount += dwDmaSize*dwWordSize;

  00128	e029979a	 mla         r9, r10, r7, r9
  0012c	e3a02001	 mov         r2, #1
  00130	e1590005	 cmp         r9, r5
  00134	3affffdd	 bcc         |$LL4@SPI_DmaRea|

; 1145 : 
; 1146 :         //  Wait for DMA done interrupt or timeout
; 1147 :         if( WaitForSingleObject(pInstance->hRxDmaIntEvent, pInstance->pDevice->timeout) != WAIT_OBJECT_0)

  00138	ea000005	 b           |$cleanUp$44949|
  0013c		 |$LN23@SPI_DmaRea|

; 1148 :         {
; 1149 :             DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DmaRead: "
; 1150 :                 L"DMA interrupt timeout\r\n"
; 1151 :             ));
; 1152 : 
; 1153 :             //  Cleanup
; 1154 :             DmaStop(&pInstance->rxDmaInfo);

  0013c	e28400a0	 add         r0, r4, #0xA0
  00140	eb000000	 bl          DmaStop

; 1155 :             DmaInterruptDone(pInstance->hRxDmaChannel);

  00144	e594001c	 ldr         r0, [r4, #0x1C]
  00148	eb000000	 bl          DmaInterruptDone

; 1156 :             PostDmaDeactivation(pInstance);

  0014c	e1a00004	 mov         r0, r4
  00150	eb000000	 bl          PostDmaDeactivation
  00154		 |$cleanUp$44949|

; 1177 :     }
; 1178 : 
; 1179 : cleanUp:
; 1180 :     // Disable the channel.
; 1181 : 	if (!pInstance->exclusiveAccess)

  00154	e5943014	 ldr         r3, [r4, #0x14]

; 1182 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1183 :     
; 1184 :     // Set this driver to Suspend Mode
; 1185 :     SetSPIPower(pDevice, D4);

  00158	e3a01004	 mov         r1, #4
  0015c	e1a00006	 mov         r0, r6
  00160	e3530000	 cmp         r3, #0
  00164	05983008	 ldreq       r3, [r8, #8]
  00168	03c33001	 biceq       r3, r3, #1
  0016c	05883008	 streq       r3, [r8, #8]
  00170	eb000000	 bl          SetSPIPower

; 1186 :     
; 1187 :     // Release hardware
; 1188 : 	ReleaseMutex(pDevice->hControllerMutex);

  00174	e596001c	 ldr         r0, [r6, #0x1C]
  00178	eb000000	 bl          ReleaseMutex

; 1189 : 
; 1190 : 
; 1191 :     DEBUGMSG(ZONE_DMA, (L"-SPI_DmaRead(rc = %d)\r\n", dwCount));
; 1192 : 	return dwCount;
; 1193 : }

  0017c	e1a00009	 mov         r0, r9
  00180	e28dd004	 add         sp, sp, #4
  00184	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00188	e12fff1e	 bx          lr
  0018c		 |$M46012|

			 ENDP  ; |SPI_DmaRead|

	EXPORT	|SPI_DmaWrite|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46055| DCD	|$LN27@SPI_DmaWri|
	DCD	0x40006202
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_DmaWrite| PROC

; 1329 : {

  00000		 |$LN27@SPI_DmaWri|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M46052|
  00008	e1a05002	 mov         r5, r2
  0000c	e58d1000	 str         r1, [sp]
  00010	e1a04000	 mov         r4, r0

; 1330 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 1331 :     SPI_DEVICE *pDevice;
; 1332 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1333 :     UCHAR* pData = (UCHAR*)pBuffer;
; 1334 :     DWORD dwWordLen;
; 1335 :     DWORD dwWordSize;
; 1336 :     DWORD dwCount = 0;
; 1337 :     DWORD dwDmaSize;
; 1338 :     DWORD dwDmaStatus;
; 1339 : 
; 1340 :     DEBUGMSG(ZONE_DMA, (L"+SPI_DmaWrite(0x%08x, 0x%08x, 0x%08x)\r\n", context, pBuffer, size));
; 1341 : 
; 1342 :     // We don't need to check instance since it's already checked by caller    
; 1343 :     ASSERT(pInstance->cookie == SPI_INSTANCE_COOKIE);
; 1344 : 
; 1345 :     // Get pointers to registers
; 1346 :     pDevice = pInstance->pDevice;
; 1347 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;
; 1348 : 
; 1349 : 
; 1350 :     // Get the word length of the data
; 1351 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  00014	e594300c	 ldr         r3, [r4, #0xC]
  00018	e5946004	 ldr         r6, [r4, #4]
  0001c	e5948010	 ldr         r8, [r4, #0x10]
  00020	e1a03a03	 mov         r3, r3, lsl #20
  00024	e1a03da3	 mov         r3, r3, lsr #27
  00028	e2833001	 add         r3, r3, #1

; 1352 : 
; 1353 :     //  Ensure that only SPI words elements are DMA'd
; 1354 :     //  Adjust the DMAsize
; 1355 :     if( dwWordLen > 16 )

  0002c	e3530010	 cmp         r3, #0x10

; 1356 :     {
; 1357 :         size = (size/sizeof(UINT32)) * sizeof(UINT32);

  00030	81a03125	 movhi       r3, r5, lsr #2
  00034	81a05103	 movhi       r5, r3, lsl #2

; 1358 :         dwWordSize = sizeof(UINT32);

  00038	83a07004	 movhi       r7, #4
  0003c	8a000004	 bhi         |$LN6@SPI_DmaWri|

; 1359 :     }
; 1360 :     else if( dwWordLen > 8 )

  00040	e3530008	 cmp         r3, #8

; 1361 :     {
; 1362 :         size = (size/sizeof(UINT16)) * sizeof(UINT16);

  00044	81a030a5	 movhi       r3, r5, lsr #1

; 1363 :         dwWordSize = sizeof(UINT16);

  00048	83a07002	 movhi       r7, #2
  0004c	81a05083	 movhi       r5, r3, lsl #1

; 1364 :     }
; 1365 :     else
; 1366 :     {
; 1367 :         dwWordSize = sizeof(UINT8);

  00050	93a07001	 movls       r7, #1
  00054		 |$LN6@SPI_DmaWri|

; 1368 :     }
; 1369 : 
; 1370 :     //  Get the length of how much can be DMA'd
; 1371 :     dwDmaSize = (size < pInstance->pDevice->dwTxBufferSize) ? size : pInstance->pDevice->dwTxBufferSize;

  00054	e596102c	 ldr         r1, [r6, #0x2C]

; 1372 :     dwDmaSize /= dwWordSize;

  00058	e1a00007	 mov         r0, r7
  0005c	e1550001	 cmp         r5, r1
  00060	31a01005	 movcc       r1, r5
  00064	eb000000	 bl          __rt_udiv
  00068	e1a0a000	 mov         r10, r0

; 1373 : 
; 1374 :     // Get hardware
; 1375 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  0006c	e596001c	 ldr         r0, [r6, #0x1C]
  00070	e3e01000	 mvn         r1, #0
  00074	eb000000	 bl          WaitForSingleObject

; 1376 : 
; 1377 :     // Set this driver to Active Mode
; 1378 :     SetSPIPower(pDevice, D0);

  00078	e3a01000	 mov         r1, #0
  0007c	e1a00006	 mov         r0, r6
  00080	eb000000	 bl          SetSPIPower

; 1379 :     
; 1380 :     // Enable the channel
; 1381 : 	if (!pInstance->exclusiveAccess)

  00084	e5943014	 ldr         r3, [r4, #0x14]

; 1382 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1383 : 
; 1384 :     //  Write out all the data; loop if necessary
; 1385 :     for( dwCount = 0; dwCount < size; )

  00088	e3a09000	 mov         r9, #0
  0008c	e3530000	 cmp         r3, #0
  00090	05983008	 ldreq       r3, [r8, #8]
  00094	03833001	 orreq       r3, r3, #1
  00098	05883008	 streq       r3, [r8, #8]
  0009c	e3550000	 cmp         r5, #0
  000a0	0a00002a	 beq         |$cleanUp$45059|
  000a4	e1a0b80a	 mov         r11, r10, lsl #16
  000a8	e1a0b82b	 mov         r11, r11, lsr #16
  000ac		 |$LL4@SPI_DmaWri|

; 1386 :     {
; 1387 :         // Copy the data to the DMA buffer
; 1388 :         memcpy(pInstance->pTxDmaBuffer, &pData[dwCount], dwDmaSize*dwWordSize);

  000ac	e59d3000	 ldr         r3, [sp]
  000b0	e59400b8	 ldr         r0, [r4, #0xB8]
  000b4	e002079a	 mul         r2, r10, r7
  000b8	e0891003	 add         r1, r9, r3
  000bc	eb000000	 bl          memcpy

; 1389 : 
; 1390 :         // Set the DMA transfer size
; 1391 :         DmaSetElementAndFrameCount(&pInstance->txDmaInfo, (UINT16) dwDmaSize, 1);

  000c0	e594309c	 ldr         r3, [r4, #0x9C]

; 1392 :     
; 1393 :         DEBUGMSG(ZONE_DMA, (L" SPI_DmaWrite: DMA Start (# elements, elementSize) = %d, %d\r\n", dwDmaSize, dwWordSize));
; 1394 : 
; 1395 :         // Start the DMA
; 1396 :         PreDmaActivation(pInstance);

  000c4	e3a02001	 mov         r2, #1
  000c8	e1a00004	 mov         r0, r4
  000cc	e583b014	 str         r11, [r3, #0x14]
  000d0	e594309c	 ldr         r3, [r4, #0x9C]
  000d4	e5832018	 str         r2, [r3, #0x18]
  000d8	eb000000	 bl          PreDmaActivation

; 1397 :         DmaStart(&pInstance->txDmaInfo);

  000dc	e594209c	 ldr         r2, [r4, #0x9C]
  000e0	e5923000	 ldr         r3, [r2]
  000e4	e3833080	 orr         r3, r3, #0x80
  000e8	e5823000	 str         r3, [r2]

; 1398 : 
; 1399 :         //  Wait for DMA done interrupt or timeout
; 1400 :         if( WaitForSingleObject(pInstance->hTxDmaIntEvent, pInstance->pDevice->timeout) != WAIT_OBJECT_0)

  000ec	e5943004	 ldr         r3, [r4, #4]
  000f0	e5940020	 ldr         r0, [r4, #0x20]
  000f4	e5931028	 ldr         r1, [r3, #0x28]
  000f8	eb000000	 bl          WaitForSingleObject
  000fc	e3500000	 cmp         r0, #0
  00100	1a00000c	 bne         |$LN23@SPI_DmaWri|

; 1410 :             goto cleanUp;
; 1411 :         }
; 1412 : 
; 1413 :         // Get and clear the status
; 1414 :         dwDmaStatus = DmaGetStatus(&pInstance->txDmaInfo);

  00104	e594209c	 ldr         r2, [r4, #0x9C]
  00108	e592300c	 ldr         r3, [r2, #0xC]

; 1415 :         DmaClearStatus(&pInstance->txDmaInfo, dwDmaStatus);

  0010c	e582300c	 str         r3, [r2, #0xC]

; 1416 : 
; 1417 :         DEBUGMSG(ZONE_DMA, (L" SPI_DmaWrite: DMA Status = %x\r\n", dwDmaStatus));
; 1418 : 
; 1419 :         // Stop the DMA
; 1420 :         DmaInterruptDone(pInstance->hTxDmaChannel);

  00110	e5940018	 ldr         r0, [r4, #0x18]
  00114	eb000000	 bl          DmaInterruptDone

; 1421 :         DmaStop(&pInstance->txDmaInfo);

  00118	e2840088	 add         r0, r4, #0x88
  0011c	eb000000	 bl          DmaStop

; 1422 :         PostDmaDeactivation(pInstance);

  00120	e1a00004	 mov         r0, r4
  00124	eb000000	 bl          PostDmaDeactivation

; 1423 : 
; 1424 :         //  Update amount transferred
; 1425 :         dwCount += dwDmaSize*dwWordSize;

  00128	e029979a	 mla         r9, r10, r7, r9
  0012c	e1590005	 cmp         r9, r5
  00130	3affffdd	 bcc         |$LL4@SPI_DmaWri|

; 1398 : 
; 1399 :         //  Wait for DMA done interrupt or timeout
; 1400 :         if( WaitForSingleObject(pInstance->hTxDmaIntEvent, pInstance->pDevice->timeout) != WAIT_OBJECT_0)

  00134	ea000005	 b           |$cleanUp$45059|
  00138		 |$LN23@SPI_DmaWri|

; 1401 :         {
; 1402 :             DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DmaWrite: "
; 1403 :                 L"DMA interrupt timeout, ABC\r\n"
; 1404 :             ));
; 1405 : 
; 1406 :             //  Cleanup
; 1407 :             DmaStop(&pInstance->txDmaInfo);

  00138	e2840088	 add         r0, r4, #0x88
  0013c	eb000000	 bl          DmaStop

; 1408 :             DmaInterruptDone(pInstance->hTxDmaChannel);

  00140	e5940018	 ldr         r0, [r4, #0x18]
  00144	eb000000	 bl          DmaInterruptDone

; 1409 :             PostDmaDeactivation(pInstance);

  00148	e1a00004	 mov         r0, r4
  0014c	eb000000	 bl          PostDmaDeactivation
  00150		 |$cleanUp$45059|

; 1426 :     }
; 1427 :     
; 1428 : cleanUp:
; 1429 :     // Disable the channel.
; 1430 : 	if (!pInstance->exclusiveAccess)

  00150	e5943014	 ldr         r3, [r4, #0x14]

; 1431 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1432 : 
; 1433 :     // Set this driver to Suspend Mode
; 1434 :     SetSPIPower(pDevice, D4);

  00154	e3a01004	 mov         r1, #4
  00158	e1a00006	 mov         r0, r6
  0015c	e3530000	 cmp         r3, #0
  00160	05983008	 ldreq       r3, [r8, #8]
  00164	03c33001	 biceq       r3, r3, #1
  00168	05883008	 streq       r3, [r8, #8]
  0016c	eb000000	 bl          SetSPIPower

; 1435 : 
; 1436 :     // Release hardware
; 1437 : 	ReleaseMutex(pDevice->hControllerMutex);

  00170	e596001c	 ldr         r0, [r6, #0x1C]
  00174	eb000000	 bl          ReleaseMutex

; 1438 : 
; 1439 :     DEBUGMSG(ZONE_DMA, (L"-SPI_DmaWrite(rc = %d)\r\n", dwCount));
; 1440 :     return dwCount;
; 1441 : }

  00178	e1a00009	 mov         r0, r9
  0017c	e28dd004	 add         sp, sp, #4
  00180	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00184	e12fff1e	 bx          lr
  00188		 |$M46053|

			 ENDP  ; |SPI_DmaWrite|

	EXPORT	|SPI_AsyncWriteRead|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46111| DCD	|$LN31@SPI_AsyncW|
	DCD	0x40004d01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_AsyncWriteRead| PROC

; 1459 : {

  00000		 |$LN31@SPI_AsyncW|
  00000	e92d47f0	 stmdb       sp!, {r4 - r10, lr}
  00004		 |$M46108|
  00004	e1a0a002	 mov         r10, r2
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 1460 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 1461 :     SPI_DEVICE *pDevice;
; 1462 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1463 :     UCHAR* pOutData = (UCHAR*)pOutBuffer;
; 1464 :     DWORD dwWordLen;
; 1465 :     DWORD dwWordSize;
; 1466 :     DWORD dwDmaSize;
; 1467 : 
; 1468 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_AsyncWriteRead(0x%08x, 0x%08x)\r\n", context, size));
; 1469 :   
; 1470 :     // We don't need to check instance since it's already checked by caller
; 1471 :     ASSERT(pInstance->cookie == SPI_INSTANCE_COOKIE);
; 1472 : 
; 1473 :     if ((SpiDmaTxEnabled(pInstance) == FALSE) || (SpiDmaRxEnabled(pInstance) == FALSE) ||
; 1474 :         (pInstance->pDevice->dwTxBufferSize < size) || (pInstance->pDevice->dwRxBufferSize < size))

  00010	e5963018	 ldr         r3, [r6, #0x18]
  00014	e3530000	 cmp         r3, #0
  00018	0a000041	 beq         |$LN5@SPI_AsyncW|
  0001c	e596301c	 ldr         r3, [r6, #0x1C]
  00020	e3530000	 cmp         r3, #0
  00024	0a00003e	 beq         |$LN5@SPI_AsyncW|
  00028	e5967004	 ldr         r7, [r6, #4]
  0002c	e597302c	 ldr         r3, [r7, #0x2C]
  00030	e1530005	 cmp         r3, r5
  00034	3a00003a	 bcc         |$LN5@SPI_AsyncW|
  00038	e5973030	 ldr         r3, [r7, #0x30]
  0003c	e1530005	 cmp         r3, r5
  00040	3a000037	 bcc         |$LN5@SPI_AsyncW|

; 1477 :     }
; 1478 : 
; 1479 :     // Get pointers to registers
; 1480 :     pDevice = pInstance->pDevice;
; 1481 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;
; 1482 : 
; 1483 : 
; 1484 :     // Get the word length of the data
; 1485 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  00044	e596300c	 ldr         r3, [r6, #0xC]
  00048	e5969010	 ldr         r9, [r6, #0x10]
  0004c	e1a03a03	 mov         r3, r3, lsl #20
  00050	e1a03da3	 mov         r3, r3, lsr #27
  00054	e2833001	 add         r3, r3, #1

; 1486 : 
; 1487 :     //  Ensure that only SPI words elements are DMA'd
; 1488 :     //  Adjust the DMAsize
; 1489 :     if( dwWordLen > 16 )

  00058	e3530010	 cmp         r3, #0x10

; 1490 :     {
; 1491 :         size = (size/sizeof(UINT32)) * sizeof(UINT32);

  0005c	81a03125	 movhi       r3, r5, lsr #2
  00060	81a05103	 movhi       r5, r3, lsl #2

; 1492 :         dwWordSize = sizeof(UINT32);

  00064	83a08004	 movhi       r8, #4
  00068	8a000004	 bhi         |$LN1@SPI_AsyncW|

; 1493 :     }
; 1494 :     else if( dwWordLen > 8 )

  0006c	e3530008	 cmp         r3, #8

; 1495 :     {
; 1496 :         size = (size/sizeof(UINT16)) * sizeof(UINT16);

  00070	81a030a5	 movhi       r3, r5, lsr #1

; 1497 :         dwWordSize = sizeof(UINT16);

  00074	83a08002	 movhi       r8, #2
  00078	81a05083	 movhi       r5, r3, lsl #1

; 1498 :     }
; 1499 :     else
; 1500 :     {
; 1501 :         dwWordSize = sizeof(UINT8);

  0007c	93a08001	 movls       r8, #1
  00080		 |$LN1@SPI_AsyncW|

; 1502 :     }
; 1503 : 
; 1504 :     //  Get the length of how much can be DMA'd
; 1505 :     dwDmaSize = (size < pDevice->dwTxBufferSize) ? size : pDevice->dwTxBufferSize;

  00080	e597102c	 ldr         r1, [r7, #0x2C]

; 1506 :     dwDmaSize /= dwWordSize;

  00084	e1a00008	 mov         r0, r8
  00088	e1550001	 cmp         r5, r1
  0008c	31a01005	 movcc       r1, r5
  00090	eb000000	 bl          __rt_udiv
  00094	e1a04000	 mov         r4, r0

; 1507 : 
; 1508 :     // Get hardware
; 1509 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  00098	e597001c	 ldr         r0, [r7, #0x1C]
  0009c	e3e01000	 mvn         r1, #0
  000a0	eb000000	 bl          WaitForSingleObject

; 1510 : 
; 1511 :     // Set this driver to Active Mode
; 1512 :     SetSPIPower(pDevice, D0);

  000a4	e3a01000	 mov         r1, #0
  000a8	e1a00007	 mov         r0, r7
  000ac	eb000000	 bl          SetSPIPower

; 1513 : 
; 1514 :     // Enable the channel
; 1515 :     SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  000b0	e5993008	 ldr         r3, [r9, #8]

; 1516 : 
; 1517 :    	// Setup transmit
; 1518 :     // Copy the data to the DMA buffer
; 1519 :     memcpy(pInstance->pTxDmaBuffer, pOutData, dwDmaSize*dwWordSize);

  000b4	e0020894	 mul         r2, r4, r8
  000b8	e3833001	 orr         r3, r3, #1
  000bc	e1a0100a	 mov         r1, r10
  000c0	e5893008	 str         r3, [r9, #8]
  000c4	e59600b8	 ldr         r0, [r6, #0xB8]
  000c8	eb000000	 bl          memcpy

; 1520 : 
; 1521 :     // Set the DMA transfer size
; 1522 :     DmaSetElementAndFrameCount(&pInstance->txDmaInfo, (UINT16) dwDmaSize, 1);

  000cc	e596309c	 ldr         r3, [r6, #0x9C]
  000d0	e1a02804	 mov         r2, r4, lsl #16
  000d4	e1a02822	 mov         r2, r2, lsr #16
  000d8	e5832014	 str         r2, [r3, #0x14]
  000dc	e596309c	 ldr         r3, [r6, #0x9C]
  000e0	e3a01001	 mov         r1, #1

; 1523 : 
; 1524 :     DEBUGMSG(ZONE_DMA, (L" SPI_DmaWrite: DMA Start (# elements, elementSize) = %d, %d\r\n", dwDmaSize, dwWordSize));
; 1525 : 
; 1526 : 	// Setup receive DMA
; 1527 :     DmaSetElementAndFrameCount(&pInstance->rxDmaInfo, (UINT16) dwDmaSize, 1);
; 1528 : 	
; 1529 :     // Start the DMA
; 1530 :     PreDmaActivation(pInstance);

  000e4	e1a00006	 mov         r0, r6
  000e8	e5831018	 str         r1, [r3, #0x18]
  000ec	e59630b4	 ldr         r3, [r6, #0xB4]
  000f0	e5832014	 str         r2, [r3, #0x14]
  000f4	e59630b4	 ldr         r3, [r6, #0xB4]
  000f8	e5831018	 str         r1, [r3, #0x18]
  000fc	eb000000	 bl          PreDmaActivation

; 1531 : 
; 1532 :     DmaStart(&pInstance->rxDmaInfo);

  00100	e59620b4	 ldr         r2, [r6, #0xB4]

; 1533 :     DmaStart(&pInstance->txDmaInfo);
; 1534 : 
; 1535 : UNREFERENCED_PARAMETER(pInBuffer);
; 1536 : 
; 1537 :     return size;

  00104	e5923000	 ldr         r3, [r2]
  00108	e3833080	 orr         r3, r3, #0x80
  0010c	e5823000	 str         r3, [r2]
  00110	e596209c	 ldr         r2, [r6, #0x9C]
  00114	e5923000	 ldr         r3, [r2]
  00118	e3833080	 orr         r3, r3, #0x80
  0011c	e5823000	 str         r3, [r2]
  00120	ea000000	 b           |$LN7@SPI_AsyncW|
  00124		 |$LN5@SPI_AsyncW|

; 1475 :     {
; 1476 :         return 0;

  00124	e3a05000	 mov         r5, #0
  00128		 |$LN7@SPI_AsyncW|

; 1538 : }

  00128	e1a00005	 mov         r0, r5
  0012c	e8bd47f0	 ldmia       sp!, {r4 - r10, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$M46109|

			 ENDP  ; |SPI_AsyncWriteRead|

	EXPORT	|SPI_WaitForAsyncWriteReadComplete|
	EXPORT	|??_C@_1O@LGMIGBMA@?$AA?9?$AA?9?$AAT?$AAx?$AA?9?$AA?$DO?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@LLNGBBIH@?$AA?9?$AA?9?$AAR?$AAx?$AA?9?$AA?$DO?$AA?$AA@| [ DATA ] ; `string'
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\inc\omap_sdma_utility.h

  00000			 AREA	 |.pdata|, PDATA
|$T46141| DCD	|$LN17@SPI_WaitFo|
	DCD	0x40004101

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@LGMIGBMA@?$AA?9?$AA?9?$AAT?$AAx?$AA?9?$AA?$DO?$AA?$AA@| DCB "-", 0x0
	DCB	"-", 0x0, "T", 0x0, "x", 0x0, "-", 0x0, ">", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@LLNGBBIH@?$AA?9?$AA?9?$AAR?$AAx?$AA?9?$AA?$DO?$AA?$AA@| DCB "-", 0x0
	DCB	"-", 0x0, "R", 0x0, "x", 0x0, "-", 0x0, ">", 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_WaitForAsyncWriteReadComplete| PROC

; 1553 : {

  00000		 |$LN17@SPI_WaitFo|
  00000	e92d41f0	 stmdb       sp!, {r4 - r8, lr}
  00004		 |$M46138|
  00004	e1a08002	 mov         r8, r2
  00008	e1a07001	 mov         r7, r1
  0000c	e1a04000	 mov         r4, r0

; 1554 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 1555 :     SPI_DEVICE *pDevice;
; 1556 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1557 :     DWORD dwDmaStatus;
; 1558 : 
; 1559 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_WaitForAsyncWriteReadComplete(0x%08x)\r\n", context));
; 1560 : 
; 1561 :     pDevice = pInstance->pDevice;

  00010	e5945004	 ldr         r5, [r4, #4]

; 1562 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;
; 1563 : 
; 1564 :     //  Wait for DMA done interrupt or timeout
; 1565 :     if( WaitForSingleObject(pInstance->hRxDmaIntEvent, pDevice->timeout) != WAIT_OBJECT_0)

  00014	e5940024	 ldr         r0, [r4, #0x24]
  00018	e5946010	 ldr         r6, [r4, #0x10]
  0001c	e5951028	 ldr         r1, [r5, #0x28]
  00020	eb000000	 bl          WaitForSingleObject
  00024	e3500000	 cmp         r0, #0
  00028	0a000007	 beq         |$LN2@SPI_WaitFo|

; 1566 :     {
; 1567 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DmaRead: DMA interrupt timeout\r\n"));
; 1568 : 
; 1569 :         DUMP_DMA_REGS(pInstance->hRxDmaChannel, L"--Rx->");

  0002c	e59f10cc	 ldr         r1, [pc, #0xCC]
  00030	e594001c	 ldr         r0, [r4, #0x1C]
  00034	eb000000	 bl          DUMP_DMA_REGS

; 1570 : 
; 1571 :         //  Cleanup
; 1572 :         DmaStop(&pInstance->rxDmaInfo);

  00038	e28400a0	 add         r0, r4, #0xA0
  0003c	eb000000	 bl          DmaStop

; 1573 :         DmaInterruptDone(pInstance->hRxDmaChannel);

  00040	e594001c	 ldr         r0, [r4, #0x1C]
  00044	eb000000	 bl          DmaInterruptDone

; 1574 :         PostDmaDeactivation(pInstance);
; 1575 :         goto cleanUp;

  00048	ea00001e	 b           |$LN13@SPI_WaitFo|
  0004c		 |$LN2@SPI_WaitFo|

; 1576 :     }
; 1577 : 
; 1578 :     // Get and clear the status
; 1579 :     dwDmaStatus = DmaGetStatus(&pInstance->rxDmaInfo);

  0004c	e59420b4	 ldr         r2, [r4, #0xB4]
  00050	e592300c	 ldr         r3, [r2, #0xC]

; 1580 :     DmaClearStatus(&pInstance->rxDmaInfo, dwDmaStatus);

  00054	e582300c	 str         r3, [r2, #0xC]

; 1581 : 
; 1582 :     DEBUGMSG(ZONE_DMA, (L" SPI_DmaRead: DMA Status = %x\r\n", dwDmaStatus));
; 1583 : 
; 1584 :     // Stop the DMA
; 1585 :     DmaInterruptDone(pInstance->hRxDmaChannel);

  00058	e594001c	 ldr         r0, [r4, #0x1C]
  0005c	eb000000	 bl          DmaInterruptDone

; 1586 :     DmaStop(&pInstance->rxDmaInfo);

  00060	e28400a0	 add         r0, r4, #0xA0
  00064	eb000000	 bl          DmaStop

; 1587 : 
; 1588 :     //  Wait for DMA done interrupt or timeout
; 1589 :     if( WaitForSingleObject(pInstance->hTxDmaIntEvent, pDevice->timeout) != WAIT_OBJECT_0)

  00068	e5951028	 ldr         r1, [r5, #0x28]
  0006c	e5940020	 ldr         r0, [r4, #0x20]
  00070	eb000000	 bl          WaitForSingleObject
  00074	e3500000	 cmp         r0, #0
  00078	0a000007	 beq         |$LN1@SPI_WaitFo|

; 1590 :     {
; 1591 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DmaWrite: DMA interrupt timeout, ABC\r\n"));
; 1592 : 
; 1593 :         DUMP_DMA_REGS(pInstance->hTxDmaChannel, L"--Tx->");

  0007c	e59f1078	 ldr         r1, [pc, #0x78]
  00080	e5940018	 ldr         r0, [r4, #0x18]
  00084	eb000000	 bl          DUMP_DMA_REGS

; 1594 : 
; 1595 :         DmaStop(&pInstance->txDmaInfo);

  00088	e2840088	 add         r0, r4, #0x88
  0008c	eb000000	 bl          DmaStop

; 1596 :         DmaInterruptDone(pInstance->hTxDmaChannel);

  00090	e5940018	 ldr         r0, [r4, #0x18]
  00094	eb000000	 bl          DmaInterruptDone
  00098	ea00000a	 b           |$LN13@SPI_WaitFo|
  0009c		 |$LN1@SPI_WaitFo|

; 1597 :         PostDmaDeactivation(pInstance);
; 1598 :         goto cleanUp;
; 1599 :     }
; 1600 : 
; 1601 :     // Get and clear the status
; 1602 :     dwDmaStatus = DmaGetStatus(&pInstance->txDmaInfo);

  0009c	e594209c	 ldr         r2, [r4, #0x9C]
  000a0	e592300c	 ldr         r3, [r2, #0xC]

; 1603 :     DmaClearStatus(&pInstance->txDmaInfo, dwDmaStatus);

  000a4	e582300c	 str         r3, [r2, #0xC]

; 1604 : 
; 1605 :     DEBUGMSG(ZONE_DMA, (L" SPI_DmaWrite: DMA Status = %x\r\n", dwDmaStatus));
; 1606 : 
; 1607 :     // Stop the DMA
; 1608 :     DmaInterruptDone(pInstance->hTxDmaChannel);

  000a8	e5940018	 ldr         r0, [r4, #0x18]
  000ac	eb000000	 bl          DmaInterruptDone

; 1609 :     DmaStop(&pInstance->txDmaInfo);

  000b0	e2840088	 add         r0, r4, #0x88
  000b4	eb000000	 bl          DmaStop

; 1610 : 
; 1611 :     // Copy the data from the DMA buffer
; 1612 :     memcpy(pInBuffer, pInstance->pRxDmaBuffer, size);

  000b8	e59410c0	 ldr         r1, [r4, #0xC0]
  000bc	e1a02007	 mov         r2, r7
  000c0	e1a00008	 mov         r0, r8
  000c4	eb000000	 bl          memcpy
  000c8		 |$LN13@SPI_WaitFo|

; 1613 : 	
; 1614 :     PostDmaDeactivation(pInstance);

  000c8	e1a00004	 mov         r0, r4
  000cc	eb000000	 bl          PostDmaDeactivation

; 1615 : 
; 1616 : cleanUp:
; 1617 :     // Disable the channel.
; 1618 :     CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  000d0	e5963008	 ldr         r3, [r6, #8]

; 1619 : 
; 1620 :     // Set this driver to Suspend Mode
; 1621 :     SetSPIPower(pDevice, D4);

  000d4	e3a01004	 mov         r1, #4
  000d8	e1a00005	 mov         r0, r5
  000dc	e3c33001	 bic         r3, r3, #1
  000e0	e5863008	 str         r3, [r6, #8]
  000e4		 |$cleanUp$45121|
  000e4	eb000000	 bl          SetSPIPower

; 1622 : 
; 1623 :     // Release hardware
; 1624 : 	ReleaseMutex(pDevice->hControllerMutex);

  000e8	e595001c	 ldr         r0, [r5, #0x1C]
  000ec	eb000000	 bl          ReleaseMutex

; 1625 : 	
; 1626 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_DmaWriteRead(rc = %d)\r\n", size));
; 1627 : 
; 1628 :     return size;
; 1629 : 	
; 1630 : }

  000f0	e1a00007	 mov         r0, r7
  000f4	e8bd41f0	 ldmia       sp!, {r4 - r8, lr}
  000f8	e12fff1e	 bx          lr
  000fc		 |$LN18@SPI_WaitFo|
  000fc		 |$LN19@SPI_WaitFo|
  000fc	00000000	 DCD         |??_C@_1O@LGMIGBMA@?$AA?9?$AA?9?$AAT?$AAx?$AA?9?$AA?$DO?$AA?$AA@|
  00100		 |$LN20@SPI_WaitFo|
  00100	00000000	 DCD         |??_C@_1O@LLNGBBIH@?$AA?9?$AA?9?$AAR?$AAx?$AA?9?$AA?$DO?$AA?$AA@|
  00104		 |$M46139|

			 ENDP  ; |SPI_WaitForAsyncWriteReadComplete|

	EXPORT	|SPI_DmaWriteRead|

  00000			 AREA	 |.pdata|, PDATA
|$T46158| DCD	|$LN6@SPI_DmaWri@2|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_DmaWriteRead| PROC

; 1648 : {

  00000		 |$LN6@SPI_DmaWri@2|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46155|
  00004	e1a04003	 mov         r4, r3
  00008	e1a05001	 mov         r5, r1
  0000c	e1a06000	 mov         r6, r0

; 1649 :     DWORD   dwCount = 0;
; 1650 : 
; 1651 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_DmaWriteRead(0x%08x, 0x%08x)\r\n", context, size));
; 1652 : 
; 1653 :     dwCount = SPI_AsyncWriteRead(context, size, pOutBuffer, pInBuffer);

  00010	eb000000	 bl          SPI_AsyncWriteRead
  00014	e3500000	 cmp         r0, #0

; 1654 :     if (dwCount != 0)
; 1655 :     {
; 1656 :         dwCount = SPI_WaitForAsyncWriteReadComplete(context, size, pInBuffer);

  00018	11a02004	 movne       r2, r4
  0001c	11a01005	 movne       r1, r5
  00020	11a00006	 movne       r0, r6
  00024	1b000000	 blne        SPI_WaitForAsyncWriteReadComplete

; 1657 :     }
; 1658 : 
; 1659 :     return dwCount;	
; 1660 : }

  00028	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M46156|

			 ENDP  ; |SPI_DmaWriteRead|

	EXPORT	|SPI_WriteRead|
	IMPORT	|StallExecution|

  00000			 AREA	 |.pdata|, PDATA
|$T46208| DCD	|$LN50@SPI_WriteR|
	DCD	0x40006f02
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_WriteRead| PROC

; 1678 : {

  00000		 |$LN50@SPI_WriteR|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004	e24dd004	 sub         sp, sp, #4
  00008		 |$M46205|
  00008	e1a0a003	 mov         r10, r3
  0000c	e1a0b002	 mov         r11, r2
  00010	e1a09001	 mov         r9, r1
  00014	e1b05000	 movs        r5, r0

; 1679 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 1680 :     SPI_DEVICE *pDevice;
; 1681 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1682 :     UCHAR* pInData = (UCHAR*)pInBuffer;
; 1683 :     UCHAR* pOutData = (UCHAR*)pOutBuffer;
; 1684 :     DWORD dwWordLen;
; 1685 :     DWORD dwCount = 0;
; 1686 :     DWORD dwWait;
; 1687 : 
; 1688 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_WriteRead(0x%08x, 0x%08x)\r\n", context, size));
; 1689 : 
; 1690 :     // Check if we get correct context
; 1691 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  00018	0a000061	 beq         |$LN22@SPI_WriteR|
  0001c	e5954000	 ldr         r4, [r5]
  00020	e59fe190	 ldr         lr, [pc, #0x190]
  00024	e154000e	 cmp         r4, lr
  00028	1a00005d	 bne         |$LN22@SPI_WriteR|

; 1696 :     }
; 1697 : 
; 1698 :     //  Call DMA function if DMA enabled
; 1699 :     if( SpiDmaTxEnabled(pInstance) && SpiDmaRxEnabled(pInstance))

  0002c	e595e018	 ldr         lr, [r5, #0x18]
  00030	e35e0000	 cmp         lr, #0
  00034	0a00000c	 beq         |$LN21@SPI_WriteR|
  00038	e595e01c	 ldr         lr, [r5, #0x1C]
  0003c	e35e0000	 cmp         lr, #0
  00040	0a000009	 beq         |$LN21@SPI_WriteR|

; 1700 :     {
; 1701 :         return SPI_DmaWriteRead(context, size, pOutBuffer, pInBuffer);

  00044	e1a00005	 mov         r0, r5
  00048	eb000000	 bl          SPI_AsyncWriteRead
  0004c	e1b06000	 movs        r6, r0
  00050	0a000054	 beq         |$LN24@SPI_WriteR|
  00054	e1a0200a	 mov         r2, r10
  00058	e1a01009	 mov         r1, r9
  0005c	e1a00005	 mov         r0, r5
  00060	eb000000	 bl          SPI_WaitForAsyncWriteReadComplete
  00064	e1a06000	 mov         r6, r0
  00068	ea00004e	 b           |$LN24@SPI_WriteR|
  0006c		 |$LN21@SPI_WriteR|

; 1702 :     }
; 1703 : 
; 1704 :     // Get pointers to registers
; 1705 :     pDevice = pInstance->pDevice;
; 1706 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;
; 1707 : 
; 1708 : 
; 1709 :     // Get the word length of the data
; 1710 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  0006c	e595300c	 ldr         r3, [r5, #0xC]
  00070	e5957004	 ldr         r7, [r5, #4]

; 1711 :     
; 1712 :     // Get hardware
; 1713 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  00074	e5954010	 ldr         r4, [r5, #0x10]
  00078	e1a03a03	 mov         r3, r3, lsl #20
  0007c	e597001c	 ldr         r0, [r7, #0x1C]
  00080	e1a03da3	 mov         r3, r3, lsr #27
  00084	e2838001	 add         r8, r3, #1
  00088	e3e01000	 mvn         r1, #0
  0008c	e58d8000	 str         r8, [sp]
  00090	eb000000	 bl          WaitForSingleObject

; 1714 :     
; 1715 :     // Set this driver to Active Mode
; 1716 :     SetSPIPower(pDevice, D0);

  00094	e3a01000	 mov         r1, #0
  00098	e1a00007	 mov         r0, r7
  0009c	eb000000	 bl          SetSPIPower

; 1717 :     
; 1718 :     // Enable the channel
; 1719 : 	if (!pInstance->exclusiveAccess)

  000a0	e5953014	 ldr         r3, [r5, #0x14]

; 1720 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1721 : 
; 1722 :     // Write out the data
; 1723 :     for( dwCount = 0; dwCount < size; )

  000a4	e3a06000	 mov         r6, #0
  000a8	e3530000	 cmp         r3, #0
  000ac	05943008	 ldreq       r3, [r4, #8]
  000b0	03833001	 orreq       r3, r3, #1
  000b4	05843008	 streq       r3, [r4, #8]
  000b8	e3590000	 cmp         r9, #0
  000bc	0a00002d	 beq         |$LN18@SPI_WriteR|
  000c0		 |$LL19@SPI_WriteR|

; 1724 :     {
; 1725 :         //  Write out data on byte/word/dword boundaries
; 1726 :         if( dwWordLen > 16 )

  000c0	e3580010	 cmp         r8, #0x10

; 1727 :         {
; 1728 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT32*)(&pOutData[dwCount]));   

  000c4	8796300b	 ldrhi       r3, [r6, +r11]
  000c8	8a000002	 bhi         |$LN46@SPI_WriteR|

; 1729 :         }
; 1730 :         else if( dwWordLen > 8 )

  000cc	e3580008	 cmp         r8, #8

; 1731 :         {
; 1732 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT16*)(&pOutData[dwCount]));   

  000d0	819630bb	 ldrhih      r3, [r6, +r11]

; 1733 :         }
; 1734 :         else
; 1735 :         {
; 1736 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT8*)(&pOutData[dwCount]));   

  000d4	97d6300b	 ldrlsb      r3, [r6, +r11]
  000d8		 |$LN46@SPI_WriteR|
  000d8	e584300c	 str         r3, [r4, #0xC]

; 1737 :         }   
; 1738 : 
; 1739 :         //  Wait for TX register to empty out
; 1740 :         dwWait = pDevice->timeout;

  000dc	e5973028	 ldr         r3, [r7, #0x28]
  000e0	e1b08003	 movs        r8, r3

; 1741 :         while(dwWait && !(INREG32(&pSPIChannelRegs->MCSPI_CHSTATUS) & MCSPI_CHSTAT_TX_EMPTY))

  000e4	0a000023	 beq         |$LN18@SPI_WriteR|
  000e8		 |$LL13@SPI_WriteR|
  000e8	e5943004	 ldr         r3, [r4, #4]
  000ec	e3130002	 tst         r3, #2
  000f0	1a000003	 bne         |$LN12@SPI_WriteR|

; 1742 :         {
; 1743 :             StallExecution(1);

  000f4	e3a00001	 mov         r0, #1
  000f8	eb000000	 bl          StallExecution

; 1744 :             dwWait--;

  000fc	e2588001	 subs        r8, r8, #1
  00100	1afffff8	 bne         |$LL13@SPI_WriteR|
  00104		 |$LN12@SPI_WriteR|

; 1745 :         }
; 1746 : 
; 1747 :         //  Check if timeout occured
; 1748 :         if( dwWait == 0 )

  00104	e3580000	 cmp         r8, #0
  00108	0a00001a	 beq         |$LN18@SPI_WriteR|

; 1749 :         {
; 1750 :             DEBUGMSG(ZONE_ERROR, (L"SPI_WriteRead write timeout\r\n"));
; 1751 :             
; 1752 :             // Disable the channel.
; 1753 : 			if (!pInstance->exclusiveAccess)
; 1754 :         	    CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1755 : 
; 1756 :             // Set this driver to Suspend Mode
; 1757 :             SetSPIPower(pDevice, D4);
; 1758 : 
; 1759 :             // Release hardware
; 1760 : 			ReleaseMutex(pDevice->hControllerMutex);
; 1761 :             goto clean;
; 1762 :         }
; 1763 : 
; 1764 : 
; 1765 :         //  Wait for RX register to fill
; 1766 :         dwWait = pDevice->timeout;

  0010c	e5973028	 ldr         r3, [r7, #0x28]
  00110	e1b08003	 movs        r8, r3

; 1767 :         while(dwWait && !(INREG32(&pSPIChannelRegs->MCSPI_CHSTATUS) & MCSPI_CHSTAT_RX_FULL))

  00114	0a000017	 beq         |$LN18@SPI_WriteR|
  00118		 |$LL9@SPI_WriteR|
  00118	e5943004	 ldr         r3, [r4, #4]
  0011c	e3130001	 tst         r3, #1
  00120	1a000003	 bne         |$LN8@SPI_WriteR|

; 1768 :         {
; 1769 :             StallExecution(1);

  00124	e3a00001	 mov         r0, #1
  00128	eb000000	 bl          StallExecution

; 1770 :             dwWait--;

  0012c	e2588001	 subs        r8, r8, #1
  00130	1afffff8	 bne         |$LL9@SPI_WriteR|
  00134		 |$LN8@SPI_WriteR|

; 1771 :         }
; 1772 : 
; 1773 :         //  Check if timeout occured
; 1774 :         if( dwWait == 0 )

  00134	e3580000	 cmp         r8, #0
  00138	0a00000e	 beq         |$LN18@SPI_WriteR|

; 1775 :         {
; 1776 :             DEBUGMSG(ZONE_ERROR, (L"SPI_WriteRead read timeout\r\n"));
; 1777 :             
; 1778 :             // Disable the channel.
; 1779 : 			if (!pInstance->exclusiveAccess)
; 1780 :             	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1781 : 
; 1782 :             // Set this driver to Suspend Mode
; 1783 :             SetSPIPower(pDevice, D4);
; 1784 : 
; 1785 :             // Release hardware
; 1786 : 			ReleaseMutex(pDevice->hControllerMutex);
; 1787 : 
; 1788 :             goto clean;
; 1789 :         }
; 1790 : 
; 1791 : 
; 1792 :         //  Read in data on byte/word/dword boundaries
; 1793 :         if( dwWordLen > 16 )

  0013c	e59d8000	 ldr         r8, [sp]
  00140	e3580010	 cmp         r8, #0x10

; 1794 :         {
; 1795 :             *(UINT32*)(&pInData[dwCount]) = INREG32(&pSPIChannelRegs->MCSPI_RX);   

  00144	85943010	 ldrhi       r3, [r4, #0x10]
  00148	8786300a	 strhi       r3, [r6, +r10]

; 1796 :             dwCount += sizeof(UINT32);

  0014c	82866004	 addhi       r6, r6, #4
  00150	8a000006	 bhi         |$LN2@SPI_WriteR|

; 1797 :         }
; 1798 :         else if( dwWordLen > 8 )

  00154	e3580008	 cmp         r8, #8

; 1799 :         {
; 1800 :             *(UINT16*)(&pInData[dwCount]) = (UINT16) INREG32(&pSPIChannelRegs->MCSPI_RX);   

  00158	85943010	 ldrhi       r3, [r4, #0x10]
  0015c	818630ba	 strhih      r3, [r6, +r10]

; 1801 :             dwCount += sizeof(UINT16);
; 1802 :         }
; 1803 :         else
; 1804 :         {
; 1805 :             *(UINT8*)(&pInData[dwCount]) = (UINT8) INREG32(&pSPIChannelRegs->MCSPI_RX);   

  00160	95943010	 ldrls       r3, [r4, #0x10]
  00164	82866002	 addhi       r6, r6, #2
  00168	97c6300a	 strlsb      r3, [r6, +r10]

; 1806 :             dwCount += sizeof(UINT8);

  0016c	92866001	 addls       r6, r6, #1
  00170		 |$LN2@SPI_WriteR|

; 1720 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1721 : 
; 1722 :     // Write out the data
; 1723 :     for( dwCount = 0; dwCount < size; )

  00170	e1560009	 cmp         r6, r9
  00174	3affffd1	 bcc         |$LL19@SPI_WriteR|
  00178		 |$LN18@SPI_WriteR|

; 1807 :         }   
; 1808 :     }
; 1809 :     
; 1810 :     // Disable the channel.
; 1811 : 	if (!pInstance->exclusiveAccess)

  00178	e5953014	 ldr         r3, [r5, #0x14]

; 1812 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1813 : 
; 1814 : 
; 1815 :     // Set this driver to Suspend Mode
; 1816 :     SetSPIPower(pDevice, D4);

  0017c	e3a01004	 mov         r1, #4
  00180	e1a00007	 mov         r0, r7
  00184	e3530000	 cmp         r3, #0
  00188	05943008	 ldreq       r3, [r4, #8]
  0018c	03c33001	 biceq       r3, r3, #1
  00190	05843008	 streq       r3, [r4, #8]
  00194	eb000000	 bl          SetSPIPower

; 1817 : 
; 1818 :     // Release hardware
; 1819 : 	ReleaseMutex(pDevice->hControllerMutex);

  00198	e597001c	 ldr         r0, [r7, #0x1C]
  0019c	eb000000	 bl          ReleaseMutex
  001a0		 |$clean$45199|

; 1820 :     
; 1821 : clean:
; 1822 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_WriteRead(rc = %d)\r\n", dwCount));
; 1823 :     return dwCount;

  001a0	ea000000	 b           |$LN24@SPI_WriteR|
  001a4		 |$LN22@SPI_WriteR|

; 1692 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Write: "
; 1693 :             L"Incorrect context paramer\r\n"
; 1694 :         ));
; 1695 :         return 0;

  001a4	e3a06000	 mov         r6, #0
  001a8		 |$LN24@SPI_WriteR|

; 1824 : }

  001a8	e1a00006	 mov         r0, r6
  001ac	e28dd004	 add         sp, sp, #4
  001b0	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  001b4	e12fff1e	 bx          lr
  001b8		 |$LN51@SPI_WriteR|
  001b8		 |$LN52@SPI_WriteR|
  001b8	73706949	 DCD         0x73706949
  001bc		 |$M46206|

			 ENDP  ; |SPI_WriteRead|

	EXPORT	|ContextRestore|
	EXPORT	|??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|SpiDmaRestore|
	IMPORT	|Sleep|

  00000			 AREA	 |.pdata|, PDATA
|$T46229| DCD	|$LN23@ContextRes|
	DCD	0x40004f01

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "S", 0x0, "P"
	DCB	0x0, "I", 0x0, "\\", 0x0, ".", 0x0, "\\", 0x0, "s", 0x0, "p"
	DCB	0x0, "i", 0x0, ".", 0x0, "c", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "E", 0x0, "R"
	DCB	0x0, "R", 0x0, "O", 0x0, "R", 0x0, " ", 0x0, "h", 0x0, "o"
	DCB	0x0, "l", 0x0, "d", 0x0, "i", 0x0, "n", 0x0, "g", 0x0, " "
	DCB	0x0, "i", 0x0, "n", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "s"
	DCB	0x0, "e", 0x0, "t", 0x0, ".", 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |ContextRestore| PROC

; 1832 : {

  00000		 |$LN23@ContextRes|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46226|
  00004	e1a04000	 mov         r4, r0

; 1833 :     SPI_DEVICE *pDevice = pInstance->pDevice;
; 1834 :     DWORD	dwCount=0;
; 1835 : 
; 1836 :     // Get Device
; 1837 :     pDevice = pInstance->pDevice;

  00008	e5945004	 ldr         r5, [r4, #4]
  0000c	e3a06000	 mov         r6, #0

; 1838 : 
; 1839 :     SETREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG, MCSPI_SYSCONFIG_SOFTRESET);

  00010	e5952018	 ldr         r2, [r5, #0x18]
  00014	e5923010	 ldr         r3, [r2, #0x10]
  00018	e3833002	 orr         r3, r3, #2
  0001c	e5823010	 str         r3, [r2, #0x10]

; 1840 :     // Wait until resetting is done
; 1841 :     while ( !(INREG32(&pDevice->pSPIRegs->MCSPI_SYSSTATUS) & MCSPI_SYSSTATUS_RESETDONE))

  00020	ea000004	 b           |$LN19@ContextRes|
  00024		 |$LL11@ContextRes|

; 1842 :         {
; 1843 :         Sleep (1);

  00024	e3a00001	 mov         r0, #1
  00028	eb000000	 bl          Sleep

; 1844 :         if (dwCount++>0x100)

  0002c	e3560c01	 cmp         r6, #1, 24
  00030	e2866001	 add         r6, r6, #1
  00034	8a00000f	 bhi         |$LN17@ContextRes|
  00038		 |$LN19@ContextRes|
  00038	e5953018	 ldr         r3, [r5, #0x18]
  0003c	e5933014	 ldr         r3, [r3, #0x14]
  00040	e3130001	 tst         r3, #1
  00044	0afffff6	 beq         |$LL11@ContextRes|

; 1849 :             }
; 1850 :         }
; 1851 : 
; 1852 :     // Disable all interrupts.
; 1853 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQENABLE, 0);

  00048	e5953018	 ldr         r3, [r5, #0x18]
  0004c	e3a02000	 mov         r2, #0
  00050	e3a01cff	 mov         r1, #0xFF, 24
  00054	e583201c	 str         r2, [r3, #0x1C]

; 1854 :     // Clear interrupts.
; 1855 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQSTATUS, 0xFFFF);

  00058	e5952018	 ldr         r2, [r5, #0x18]
  0005c	e38130ff	 orr         r3, r1, #0xFF
  00060	e5823018	 str         r3, [r2, #0x18]

; 1856 :     // Setup Module Control as master or slave
; 1857 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, (pDevice->eSpiMode==SLAVE) ? MCSPI_MS_BIT : 0);

  00064	e5953040	 ldr         r3, [r5, #0x40]
  00068	e3530002	 cmp         r3, #2
  0006c	1a00000b	 bne         |$LN14@ContextRes|
  00070	e3a02004	 mov         r2, #4
  00074	ea00000a	 b           |$LN15@ContextRes|
  00078		 |$LN17@ContextRes|

; 1845 :             {
; 1846 :             // Break out dead lock, something is wrong.
; 1847 :             ERRORMSG (TRUE, (TEXT("SPI: ERROR holding in reset.\n")));

  00078	e59f10b8	 ldr         r1, [pc, #0xB8]
  0007c	e59f00b0	 ldr         r0, [pc, #0xB0]
  00080	e3a03c07	 mov         r3, #7, 24
  00084	e3832037	 orr         r2, r3, #0x37
  00088	eb000000	 bl          NKDbgPrintfW
  0008c	e59f009c	 ldr         r0, [pc, #0x9C]
  00090	eb000000	 bl          NKDbgPrintfW

; 1848 :             return FALSE;

  00094	e3a00000	 mov         r0, #0

; 1900 : }

  00098	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0009c	e12fff1e	 bx          lr
  000a0		 |$LN14@ContextRes|

; 1856 :     // Setup Module Control as master or slave
; 1857 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, (pDevice->eSpiMode==SLAVE) ? MCSPI_MS_BIT : 0);

  000a0	e3a02000	 mov         r2, #0
  000a4		 |$LN15@ContextRes|
  000a4	e5953018	 ldr         r3, [r5, #0x18]

; 1858 : 
; 1859 :     OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG, MCSPI_SYSCONFIG_AUTOIDLE |
; 1860 :         MCSPI_SYSCONFIG_SMARTIDLE | MCSPI_SYSCONFIG_ENAWAKEUP);

  000a8	e3a01015	 mov         r1, #0x15
  000ac	e5832028	 str         r2, [r3, #0x28]
  000b0	e5953018	 ldr         r3, [r5, #0x18]
  000b4	e5831010	 str         r1, [r3, #0x10]

; 1861 : 
; 1862 :     // Configure the channel
; 1863 :     switch( pInstance->address)

  000b8	e5943008	 ldr         r3, [r4, #8]
  000bc	e3530000	 cmp         r3, #0
  000c0	0a00000e	 beq         |$LN6@ContextRes|
  000c4	e3530001	 cmp         r3, #1
  000c8	0a000009	 beq         |$LN5@ContextRes|
  000cc	e3530002	 cmp         r3, #2
  000d0	0a000004	 beq         |$LN4@ContextRes|
  000d4	e3530003	 cmp         r3, #3
  000d8	1a00000d	 bne         |$LN7@ContextRes|

; 1882 : 
; 1883 :         case 3:
; 1884 :             //  Channel 3 configuration
; 1885 :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF3);

  000dc	e5953018	 ldr         r3, [r5, #0x18]

; 1886 :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, pInstance->config);

  000e0	e2833068	 add         r3, r3, #0x68

; 1887 :             break;

  000e4	ea000007	 b           |$LN20@ContextRes|
  000e8		 |$LN4@ContextRes|

; 1876 : 
; 1877 :         case 2:
; 1878 :             //  Channel 2 configuration
; 1879 :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF2);

  000e8	e5953018	 ldr         r3, [r5, #0x18]

; 1880 :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, pInstance->config);

  000ec	e2833054	 add         r3, r3, #0x54

; 1881 :             break;

  000f0	ea000004	 b           |$LN20@ContextRes|
  000f4		 |$LN5@ContextRes|

; 1869 :             break;
; 1870 : 
; 1871 :         case 1:
; 1872 :             //  Channel 1 configuration
; 1873 :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF1);

  000f4	e5953018	 ldr         r3, [r5, #0x18]

; 1874 :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, pInstance->config);

  000f8	e2833040	 add         r3, r3, #0x40

; 1875 :             break;

  000fc	ea000001	 b           |$LN20@ContextRes|
  00100		 |$LN6@ContextRes|

; 1864 :     {
; 1865 :         case 0:
; 1866 :             //  Channel 0 configuration
; 1867 :             pInstance->pSPIChannelRegs = (OMAP_MCSPI_CHANNEL_REGS*)(&pDevice->pSPIRegs->MCSPI_CHCONF0);

  00100	e5953018	 ldr         r3, [r5, #0x18]

; 1868 :             OUTREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, pInstance->config);

  00104	e283302c	 add         r3, r3, #0x2C
  00108		 |$LN20@ContextRes|
  00108	e594200c	 ldr         r2, [r4, #0xC]
  0010c	e5843010	 str         r3, [r4, #0x10]
  00110	e5832000	 str         r2, [r3]
  00114		 |$LN7@ContextRes|

; 1888 : 
; 1889 :         default:
; 1890 :             break;
; 1891 :     }
; 1892 : 
; 1893 :     //  Restore DMA if needed
; 1894 :     if (pInstance->config & (MCSPI_CHCONF_DMAR_ENABLE | MCSPI_CHCONF_DMAW_ENABLE))

  00114	e594300c	 ldr         r3, [r4, #0xC]
  00118	e3130903	 tst         r3, #3, 18

; 1895 :         {
; 1896 :         SpiDmaRestore(pInstance);

  0011c	11a00004	 movne       r0, r4
  00120	1b000000	 blne        SpiDmaRestore

; 1897 :         }
; 1898 : 
; 1899 :     return TRUE;

  00124	e3a00001	 mov         r0, #1

; 1900 : }

  00128	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  0012c	e12fff1e	 bx          lr
  00130		 |$LN24@ContextRes|
  00130		 |$LN25@ContextRes|
  00130	00000000	 DCD         |??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@|
  00134		 |$LN26@ContextRes|
  00134	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00138		 |$LN27@ContextRes|
  00138	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  0013c		 |$M46227|

			 ENDP  ; |ContextRestore|

	EXPORT	|SPI_LockController|

  00000			 AREA	 |.pdata|, PDATA
|$T46246| DCD	|$LN8@SPI_LockCo|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_LockController| PROC

; 1910 : {

  00000		 |$LN8@SPI_LockCo|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46243|
  00004	e1b04000	 movs        r4, r0

; 1911 :     BOOL rc = FALSE;

  00008	e3a05000	 mov         r5, #0

; 1912 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 1913 :     SPI_DEVICE *pDevice;
; 1914 : 	UINT32 dwStatus;
; 1915 : 
; 1916 :     DEBUGMSG(ZONE_FUNCTION, (L"SPI_LockController\r\n"));
; 1917 : 	
; 1918 :     // Check if we get correct context
; 1919 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  0000c	0a000015	 beq         |$cleanUp$45289|
  00010	e5942000	 ldr         r2, [r4]
  00014	e59f3058	 ldr         r3, [pc, #0x58]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000011	 bne         |$cleanUp$45289|

; 1920 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_LockController: "
; 1921 :             L"Incorrect context paramer\r\n"
; 1922 :         ));
; 1923 :         goto cleanUp;
; 1924 :     }
; 1925 : 
; 1926 :     // Get Device
; 1927 :     pDevice = pInstance->pDevice;

  00020	e5946004	 ldr         r6, [r4, #4]

; 1928 : 	
; 1929 : 	// Get lock
; 1930 : 	dwStatus = WaitForSingleObject(pDevice->hControllerMutex, dwTimeout);

  00024	e596001c	 ldr         r0, [r6, #0x1C]
  00028	eb000000	 bl          WaitForSingleObject
  0002c	e3500000	 cmp         r0, #0

; 1931 : 	if (dwStatus != WAIT_OBJECT_0)

  00030	1a00000c	 bne         |$cleanUp$45289|

; 1932 : 	{
; 1933 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_LockController: Failed getting the hardware lock!  Status 0x%x\r\n", dwStatus));
; 1934 : 		goto cleanUp;
; 1935 : 	}
; 1936 : 	
; 1937 :     // Set this driver to Active Mode
; 1938 :     SetSPIPower(pDevice, D0);

  00034	e3a01000	 mov         r1, #0
  00038	e1a00006	 mov         r0, r6
  0003c	eb000000	 bl          SetSPIPower

; 1939 : 	
; 1940 : 	// Set controller in single access mode
; 1941 :     SETREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, MCSPI_SINGLE_BIT);

  00040	e5962018	 ldr         r2, [r6, #0x18]

; 1942 : 	
; 1943 :     // Set this driver to Suspend Mode
; 1944 :     SetSPIPower(pDevice, D4);

  00044	e3a01004	 mov         r1, #4
  00048	e1a00006	 mov         r0, r6
  0004c	e5923028	 ldr         r3, [r2, #0x28]
  00050	e3833001	 orr         r3, r3, #1
  00054	e5823028	 str         r3, [r2, #0x28]
  00058	eb000000	 bl          SetSPIPower

; 1945 : 	
; 1946 : 	// Set flag indicating we own the controller lock
; 1947 : 	pInstance->exclusiveAccess = TRUE;

  0005c	e3a03001	 mov         r3, #1
  00060	e5843014	 str         r3, [r4, #0x14]

; 1948 : 	
; 1949 :     // Done
; 1950 :     rc = TRUE;

  00064	e3a05001	 mov         r5, #1
  00068		 |$cleanUp$45289|

; 1951 : 	
; 1952 : cleanUp:
; 1953 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_LockController\r\n"));
; 1954 : 	return rc;
; 1955 : }

  00068	e1a00005	 mov         r0, r5
  0006c	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN9@SPI_LockCo|
  00074		 |$LN10@SPI_LockCo|
  00074	73706949	 DCD         0x73706949
  00078		 |$M46244|

			 ENDP  ; |SPI_LockController|

	EXPORT	|SPI_UnlockController|

  00000			 AREA	 |.pdata|, PDATA
|$T46260| DCD	|$LN9@SPI_Unlock|
	DCD	0x40002001
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_UnlockController| PROC

; 1964 : {

  00000		 |$LN9@SPI_Unlock|
  00000	e92d4070	 stmdb       sp!, {r4 - r6, lr}
  00004		 |$M46257|
  00004	e1b06000	 movs        r6, r0

; 1965 :     BOOL rc = FALSE;

  00008	e3a05000	 mov         r5, #0

; 1966 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 1967 :     SPI_DEVICE *pDevice;
; 1968 : 
; 1969 :     DEBUGMSG(ZONE_FUNCTION, (L"SPI_UnlockController\r\n"));
; 1970 : 	
; 1971 :     // Check if we get correct context
; 1972 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  0000c	0a000017	 beq         |$cleanUp$45309|
  00010	e5962000	 ldr         r2, [r6]
  00014	e59f3060	 ldr         r3, [pc, #0x60]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000013	 bne         |$cleanUp$45309|

; 1973 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_UnlockController: "
; 1974 :             L"Incorrect context paramer\r\n"
; 1975 :         ));
; 1976 :         goto cleanUp;
; 1977 :     }
; 1978 : 	
; 1979 : 	// Check to see if we have exclusive access
; 1980 : 	if (!pInstance->exclusiveAccess)

  00020	e5963014	 ldr         r3, [r6, #0x14]
  00024	e3530000	 cmp         r3, #0
  00028	0a000010	 beq         |$cleanUp$45309|

; 1981 : 	{
; 1982 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_UnlockController: Don't own SPI lock!\r\n"));
; 1983 : 		goto cleanUp;
; 1984 : 	}
; 1985 : 
; 1986 :     // Get Device
; 1987 :     pDevice = pInstance->pDevice;

  0002c	e5964004	 ldr         r4, [r6, #4]

; 1988 : 	
; 1989 :     // Set this driver to Active Mode
; 1990 :     SetSPIPower(pDevice, D0);

  00030	e3a01000	 mov         r1, #0
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          SetSPIPower

; 1991 : 	
; 1992 : 	// Release single access mode
; 1993 :     CLRREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, MCSPI_SINGLE_BIT);

  0003c	e5942018	 ldr         r2, [r4, #0x18]

; 1994 :     
; 1995 : 	// Set this driver to Suspend Mode
; 1996 :     SetSPIPower(pDevice, D4);

  00040	e3a01004	 mov         r1, #4
  00044	e1a00004	 mov         r0, r4
  00048	e5923028	 ldr         r3, [r2, #0x28]
  0004c	e3c33001	 bic         r3, r3, #1
  00050	e5823028	 str         r3, [r2, #0x28]
  00054	eb000000	 bl          SetSPIPower

; 1997 : 	
; 1998 : 	// Clear lock flag
; 1999 : 	pInstance->exclusiveAccess = FALSE;

  00058	e3a03000	 mov         r3, #0
  0005c	e5863014	 str         r3, [r6, #0x14]

; 2000 : 	
; 2001 : 	// Release lock
; 2002 : 	if (!ReleaseMutex(pDevice->hControllerMutex))

  00060	e594001c	 ldr         r0, [r4, #0x1C]
  00064	eb000000	 bl          ReleaseMutex
  00068	e3500000	 cmp         r0, #0

; 2003 : 	{
; 2004 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_UnlockController: Error releasing lock!  Error code 0x%x\r\n", GetLastError()));
; 2005 : 		goto cleanUp;
; 2006 : 	}
; 2007 : 	
; 2008 :     // Done
; 2009 :     rc = TRUE;

  0006c	13a05001	 movne       r5, #1
  00070		 |$cleanUp$45309|

; 2010 : 	
; 2011 : cleanUp:
; 2012 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_UnlockController\r\n"));
; 2013 : 	return rc;
; 2014 : }

  00070	e1a00005	 mov         r0, r5
  00074	e8bd4070	 ldmia       sp!, {r4 - r6, lr}
  00078	e12fff1e	 bx          lr
  0007c		 |$LN10@SPI_Unlock|
  0007c		 |$LN11@SPI_Unlock|
  0007c	73706949	 DCD         0x73706949
  00080		 |$M46258|

			 ENDP  ; |SPI_UnlockController|

	EXPORT	|SPI_EnableChannel|

  00000			 AREA	 |.pdata|, PDATA
|$T46274| DCD	|$LN8@SPI_Enable|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_EnableChannel| PROC

; 2025 : {

  00000		 |$LN8@SPI_Enable|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46271|
  00004	e1b05000	 movs        r5, r0

; 2026 :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 2027 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 2028 :     SPI_DEVICE *pDevice;
; 2029 : 
; 2030 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_EnableChannel\r\n"));
; 2031 : 	
; 2032 :     // Check if we get correct context
; 2033 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  0000c	0a000016	 beq         |$cleanUp$45331|
  00010	e5952000	 ldr         r2, [r5]
  00014	e59f3058	 ldr         r3, [pc, #0x58]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000012	 bne         |$cleanUp$45331|

; 2034 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_EnableChannel: "
; 2035 :             L"Incorrect context paramer\r\n"
; 2036 :         ));
; 2037 :         goto cleanUp;
; 2038 :     }
; 2039 : 	
; 2040 : 	// Check to see if we have exclusive access
; 2041 : 	if (!pInstance->exclusiveAccess)

  00020	e5953014	 ldr         r3, [r5, #0x14]
  00024	e3530000	 cmp         r3, #0
  00028	0a00000f	 beq         |$cleanUp$45331|

; 2042 : 	{
; 2043 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_EnableChannel: Not in single access mode!!\r\n"));
; 2044 : 		goto cleanUp;
; 2045 : 	}
; 2046 : 
; 2047 :     // Get Device
; 2048 :     pDevice = pInstance->pDevice;

  0002c	e5954004	 ldr         r4, [r5, #4]

; 2049 :     
; 2050 : 	// Set this driver to Active Mode
; 2051 :     SetSPIPower(pDevice, D0);

  00030	e3a01000	 mov         r1, #0
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          SetSPIPower

; 2052 : 	
; 2053 :     // Enable the channel
; 2054 :     SETREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);

  0003c	e5952010	 ldr         r2, [r5, #0x10]

; 2055 : 	// Assert the chip select
; 2056 :     SETREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, MCSPI_CHCONF_FORCE);
; 2057 :     
; 2058 : 	// Set this driver to Suspend Mode
; 2059 :     SetSPIPower(pDevice, D4);

  00040	e3a01004	 mov         r1, #4
  00044	e1a00004	 mov         r0, r4
  00048	e5923008	 ldr         r3, [r2, #8]
  0004c	e3833001	 orr         r3, r3, #1
  00050	e5823008	 str         r3, [r2, #8]
  00054	e5952010	 ldr         r2, [r5, #0x10]
  00058	e5923000	 ldr         r3, [r2]
  0005c	e3833601	 orr         r3, r3, #1, 12
  00060	e5823000	 str         r3, [r2]
  00064	eb000000	 bl          SetSPIPower

; 2060 : 	
; 2061 :     // Done
; 2062 :     rc = TRUE;

  00068	e3a00001	 mov         r0, #1
  0006c		 |$cleanUp$45331|

; 2063 : 	
; 2064 : cleanUp:
; 2065 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_EnableChannel\r\n"));
; 2066 : 	return rc;	
; 2067 : }

  0006c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN9@SPI_Enable|
  00074		 |$LN10@SPI_Enable|
  00074	73706949	 DCD         0x73706949
  00078		 |$M46272|

			 ENDP  ; |SPI_EnableChannel|

	EXPORT	|SPI_DisableChannel|

  00000			 AREA	 |.pdata|, PDATA
|$T46288| DCD	|$LN8@SPI_Disabl|
	DCD	0x40001e01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_DisableChannel| PROC

; 2078 : {

  00000		 |$LN8@SPI_Disabl|
  00000	e92d4030	 stmdb       sp!, {r4, r5, lr}
  00004		 |$M46285|
  00004	e1b05000	 movs        r5, r0

; 2079 :     BOOL rc = FALSE;

  00008	e3a00000	 mov         r0, #0

; 2080 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 2081 :     SPI_DEVICE *pDevice;
; 2082 : 
; 2083 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_DisableChannel\r\n"));
; 2084 : 	
; 2085 :     // Check if we get correct context
; 2086 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  0000c	0a000016	 beq         |$cleanUp$45354|
  00010	e5952000	 ldr         r2, [r5]
  00014	e59f3058	 ldr         r3, [pc, #0x58]
  00018	e1520003	 cmp         r2, r3
  0001c	1a000012	 bne         |$cleanUp$45354|

; 2087 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DisableChannel: "
; 2088 :             L"Incorrect context paramer\r\n"
; 2089 :         ));
; 2090 :         goto cleanUp;
; 2091 :     }
; 2092 : 	
; 2093 : 	// Check to see if we have exclusive access
; 2094 : 	if (!pInstance->exclusiveAccess)

  00020	e5953014	 ldr         r3, [r5, #0x14]
  00024	e3530000	 cmp         r3, #0
  00028	0a00000f	 beq         |$cleanUp$45354|

; 2095 : 	{
; 2096 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_DisableChannel: Not in single access mode!!\r\n"));
; 2097 : 		goto cleanUp;
; 2098 : 	}
; 2099 : 
; 2100 :     // Get Device
; 2101 :     pDevice = pInstance->pDevice;

  0002c	e5954004	 ldr         r4, [r5, #4]

; 2102 : 	
; 2103 : 	// Set this driver to Active Mode
; 2104 :     SetSPIPower(pDevice, D0);

  00030	e3a01000	 mov         r1, #0
  00034	e1a00004	 mov         r0, r4
  00038	eb000000	 bl          SetSPIPower

; 2105 : 	
; 2106 : 	// De-assert the chip select
; 2107 :     CLRREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCONF, MCSPI_CHCONF_FORCE);

  0003c	e5952010	 ldr         r2, [r5, #0x10]

; 2108 :     // Disable the channel
; 2109 :     CLRREG32(&pInstance->pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 2110 : 
; 2111 : 	// Set this driver to Suspend Mode
; 2112 :     SetSPIPower(pDevice, D4);

  00040	e3a01004	 mov         r1, #4
  00044	e1a00004	 mov         r0, r4
  00048	e5923000	 ldr         r3, [r2]
  0004c	e3c33601	 bic         r3, r3, #1, 12
  00050	e5823000	 str         r3, [r2]
  00054	e5952010	 ldr         r2, [r5, #0x10]
  00058	e5923008	 ldr         r3, [r2, #8]
  0005c	e3c33001	 bic         r3, r3, #1
  00060	e5823008	 str         r3, [r2, #8]
  00064	eb000000	 bl          SetSPIPower

; 2113 : 	
; 2114 :     // Done
; 2115 :     rc = TRUE;

  00068	e3a00001	 mov         r0, #1
  0006c		 |$cleanUp$45354|

; 2116 : 	
; 2117 : cleanUp:
; 2118 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_DisableChannel\r\n"));
; 2119 : 	return rc;	
; 2120 : }

  0006c	e8bd4030	 ldmia       sp!, {r4, r5, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$LN9@SPI_Disabl|
  00074		 |$LN10@SPI_Disabl|
  00074	73706949	 DCD         0x73706949
  00078		 |$M46286|

			 ENDP  ; |SPI_DisableChannel|

	EXPORT	|SPI_PowerUp|

  00000			 AREA	 |.pdata|, PDATA
|$T46297| DCD	|$LN5@SPI_PowerU|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_PowerUp| PROC

; 2419 : {

  00000		 |$LN5@SPI_PowerU|
  00000		 |$M46294|

; 2420 : 	UNREFERENCED_PARAMETER(context);
; 2421 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M46295|

			 ENDP  ; |SPI_PowerUp|

	EXPORT	|SPI_PowerDown|

  00000			 AREA	 |.pdata|, PDATA
|$T46304| DCD	|$LN5@SPI_PowerD|
	DCD	0x40000100
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_PowerDown| PROC

; 2430 : {

  00000		 |$LN5@SPI_PowerD|
  00000		 |$M46301|

; 2431 : 	UNREFERENCED_PARAMETER(context);
; 2432 : }

  00000	e12fff1e	 bx          lr
  00004		 |$M46302|

			 ENDP  ; |SPI_PowerDown|

	EXPORT	|DllMain|
	IMPORT	|DisableThreadLibraryCalls|
	IMPORT	|RegisterDbgZones|

  00000			 AREA	 |.pdata|, PDATA
|$T46315| DCD	|$LN8@DllMain|
	DCD	0x40000c01
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |DllMain| PROC

; 2448 : {

  00000		 |$LN8@DllMain|
  00000	e92d4010	 stmdb       sp!, {r4, lr}
  00004		 |$M46312|
  00004	e1a04000	 mov         r4, r0

; 2449 :     switch (reason)

  00008	e3510001	 cmp         r1, #1
  0000c	1a000003	 bne         |$LN2@DllMain|

; 2450 :         {
; 2451 :         case DLL_PROCESS_ATTACH:
; 2452 :             RETAILREGISTERZONES((HMODULE)hDLL);

  00010	e59f1014	 ldr         r1, [pc, #0x14]
  00014	eb000000	 bl          RegisterDbgZones

; 2453 :             DisableThreadLibraryCalls((HMODULE)hDLL);

  00018	e1a00004	 mov         r0, r4
  0001c	eb000000	 bl          DisableThreadLibraryCalls
  00020		 |$LN2@DllMain|

; 2454 :             break;
; 2455 :         }
; 2456 : 
; 2457 : UNREFERENCED_PARAMETER(pReserved);
; 2458 :     return TRUE;

  00020	e3a00001	 mov         r0, #1

; 2459 : }

  00024	e8bd4010	 ldmia       sp!, {r4, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$LN9@DllMain|
  0002c		 |$LN10@DllMain|
  0002c	00000000	 DCD         |dpCurSettings|
  00030		 |$M46313|

			 ENDP  ; |DllMain|

	EXPORT	|SPI_Init|
	EXPORT	|??_C@_1EA@JPGNEHHB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|RequestDevicePads|
	IMPORT	|InterruptInitialize|
	IMPORT	|MmMapIoSpace|
	IMPORT	|GetAddressByDevice|
	IMPORT	|GetIrqByDevice|
	IMPORT	|SOCGetMCSPIDeviceByBus|
	IMPORT	|CeSetThreadPriority|
	IMPORT	|CreateThread|
	IMPORT	|CreateBusAccessHandle|
	IMPORT	|CreateEventW|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|CreateMutexW|
	IMPORT	|InitializeCriticalSection|
	IMPORT	|wcslen|

  00000			 AREA	 |.pdata|, PDATA
|$T46338| DCD	|$LN29@SPI_Init|
	DCD	0x4000c602

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JPGNEHHB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?6?$AA?$AA@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "R", 0x0, "e"
	DCB	0x0, "q", 0x0, "u", 0x0, "e", 0x0, "s", 0x0, "t", 0x0, "D"
	DCB	0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e", 0x0, "P"
	DCB	0x0, "a", 0x0, "d", 0x0, "s", 0x0, " ", 0x0, "f", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, ".", 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Ogspy

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_Init| PROC

; 340  : {

  00000		 |$LN29@SPI_Init|
  00000	e92d43f0	 stmdb       sp!, {r4 - r9, lr}
  00004	e24dd008	 sub         sp, sp, #8
  00008		 |$M46335|
  00008	e1a07000	 mov         r7, r0

; 341  :     DWORD rc = (DWORD)NULL;
; 342  :     SPI_DEVICE *pDevice = NULL;
; 343  :     PHYSICAL_ADDRESS pa;
; 344  :     DWORD dwCount=0;
; 345  : 
; 346  : 	UNREFERENCED_PARAMETER(pBusContext);
; 347  : 
; 348  :     DEBUGMSG(ZONE_FUNCTION, (
; 349  :         L"+SPI_Init(%s, 0x%08x)\r\n", szContext, pBusContext
; 350  :     ));
; 351  : 
; 352  :     // Create device structure
; 353  :     pDevice = (SPI_DEVICE *)LocalAlloc(LPTR, sizeof(SPI_DEVICE));

  0000c	e3a01fa5	 mov         r1, #0xA5, 30
  00010	e3a00040	 mov         r0, #0x40
  00014	e3a05000	 mov         r5, #0
  00018	e3a06000	 mov         r6, #0
  0001c	eb000000	 bl          LocalAlloc
  00020	e1b04000	 movs        r4, r0

; 354  :     if (pDevice == NULL) {

  00024	0a0000ad	 beq         |$LN24@SPI_Init|

; 355  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 356  :             L"Failed allocate SPI controller structure\r\n"
; 357  :         ));
; 358  :         goto cleanUp;
; 359  :     }
; 360  :     memset(pDevice, 0, sizeof(SPI_DEVICE));

  00028	e3a02fa5	 mov         r2, #0xA5, 30
  0002c	e3a01000	 mov         r1, #0
  00030	e1a00004	 mov         r0, r4
  00034	eb000000	 bl          memset

; 361  : 
; 362  :     // Set cookie
; 363  :     pDevice->cookie = SPI_DEVICE_COOKIE;

  00038	e59f32d4	 ldr         r3, [pc, #0x2D4]

; 364  :     pDevice->powerState = D4;

  0003c	e3a09004	 mov         r9, #4

; 365  : 
; 366  :     // initialize dvfs variables
; 367  :     pDevice->bDVFSActive = FALSE;

  00040	e3a08000	 mov         r8, #0

; 368  :     pDevice->nActiveDmaCount = 0;
; 369  :     pDevice->hDVFSAsyncEvent = NULL;
; 370  :     pDevice->szDVFSAsyncEventName[0] = _T('\0');
; 371  : 
; 372  :     // Initalize DVFS critical section
; 373  :     InitializeCriticalSection(&pDevice->csDVFS);

  00044	e2840f97	 add         r0, r4, #0x97, 30
  00048	e5843000	 str         r3, [r4]
  0004c	e5849034	 str         r9, [r4, #0x34]
  00050	e5848044	 str         r8, [r4, #0x44]
  00054	e5848048	 str         r8, [r4, #0x48]
  00058	e5848050	 str         r8, [r4, #0x50]
  0005c	e1c485b4	 strh        r8, [r4, #0x54]
  00060	eb000000	 bl          InitializeCriticalSection

; 374  : 	// Initialize controller mutex (needs to be mutex to lock access for multiple transactions)
; 375  : 	pDevice->hControllerMutex = CreateMutex(NULL, FALSE, NULL);

  00064	e3a02000	 mov         r2, #0
  00068	e3a01000	 mov         r1, #0
  0006c	e3a00000	 mov         r0, #0
  00070	eb000000	 bl          CreateMutexW
  00074	e3500000	 cmp         r0, #0
  00078	e584001c	 str         r0, [r4, #0x1C]

; 376  : 	if (pDevice->hControllerMutex == NULL)

  0007c	0a000097	 beq         |$LN24@SPI_Init|

; 377  : 	{
; 378  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: Error creating mutex!\r\n"));
; 379  : 		goto cleanUp;
; 380  : 	}
; 381  : 
; 382  :     // Read device parameters
; 383  :     if (GetDeviceRegistryParams(
; 384  :         szContext, pDevice, dimof(g_deviceRegParams), g_deviceRegParams
; 385  :     ) != ERROR_SUCCESS) {

  00080	e59f3288	 ldr         r3, [pc, #0x288]
  00084	e3a02006	 mov         r2, #6
  00088	e1a01004	 mov         r1, r4
  0008c	e1a00007	 mov         r0, r7
  00090	eb000000	 bl          GetDeviceRegistryParams
  00094	e3500000	 cmp         r0, #0
  00098	1a000090	 bne         |$LN24@SPI_Init|

; 386  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 387  :             L"Failed read SPI driver registry parameters\r\n"
; 388  :         ));
; 389  :         goto cleanUp;
; 390  :     }
; 391  : 
; 392  :     // Create DVFS async dvfs handles if necessary
; 393  :     pDevice->hDVFSInactiveEvent = CreateEvent(NULL, TRUE, TRUE, NULL);

  0009c	e3a03000	 mov         r3, #0
  000a0	e3a02001	 mov         r2, #1
  000a4	e3a01001	 mov         r1, #1
  000a8	e3a00000	 mov         r0, #0
  000ac	eb000000	 bl          CreateEventW

; 394  :     if (_tcslen(pDevice->szDVFSAsyncEventName) > 0)

  000b0	e1a03000	 mov         r3, r0
  000b4	e2840054	 add         r0, r4, #0x54
  000b8	e584304c	 str         r3, [r4, #0x4C]
  000bc	eb000000	 bl          wcslen
  000c0	e3500000	 cmp         r0, #0
  000c4	0a000005	 beq         |$LN16@SPI_Init|

; 395  :         {
; 396  :         pDevice->hDVFSAsyncEvent = CreateEvent(NULL, TRUE, FALSE, 
; 397  :                                         pDevice->szDVFSAsyncEventName
; 398  :                                         );        

  000c8	e2843054	 add         r3, r4, #0x54
  000cc	e3a02000	 mov         r2, #0
  000d0	e3a01001	 mov         r1, #1
  000d4	e3a00000	 mov         r0, #0
  000d8	eb000000	 bl          CreateEventW
  000dc	e5840050	 str         r0, [r4, #0x50]
  000e0		 |$LN16@SPI_Init|

; 399  :         }
; 400  : 
; 401  :     // Open parent bus
; 402  :     pDevice->hParentBus = CreateBusAccessHandle(szContext);

  000e0	e1a00007	 mov         r0, r7
  000e4	eb000000	 bl          CreateBusAccessHandle
  000e8	e3500000	 cmp         r0, #0
  000ec	e5840014	 str         r0, [r4, #0x14]

; 403  :     if (pDevice->hParentBus == NULL) {

  000f0	0a00007a	 beq         |$LN24@SPI_Init|

; 404  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 405  :             L"Failed open parent bus driver\r\n"
; 406  :         ));
; 407  :         goto cleanUp;
; 408  :     }
; 409  : 
; 410  :     // start timer thread
; 411  :     pDevice->hTimerEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  000f4	e3a03000	 mov         r3, #0
  000f8	e3a02000	 mov         r2, #0
  000fc	e3a01000	 mov         r1, #0
  00100	e3a00000	 mov         r0, #0
  00104	eb000000	 bl          CreateEventW
  00108	e3500000	 cmp         r0, #0
  0010c	e5840278	 str         r0, [r4, #0x278]

; 412  :     if (pDevice->hTimerEvent != NULL)

  00110	0a00000a	 beq         |$LN13@SPI_Init|

; 413  :         {
; 414  :         pDevice->hTimerThread = CreateThread(NULL, 0, SPIPowerTimerThread, 
; 415  :             pDevice, 0, NULL
; 416  :             );

  00114	e59f21f0	 ldr         r2, [pc, #0x1F0]
  00118	e1a03004	 mov         r3, r4
  0011c	e3a01000	 mov         r1, #0
  00120	e3a00000	 mov         r0, #0
  00124	e58d8004	 str         r8, [sp, #4]
  00128	e58d8000	 str         r8, [sp]
  0012c	eb000000	 bl          CreateThread
  00130	e3500000	 cmp         r0, #0

; 417  :         
; 418  :         if (pDevice->hTimerThread != NULL)
; 419  :             {
; 420  :             CeSetThreadPriority(pDevice->hTimerThread, TIMERTHREAD_PRIORITY);

  00134	13a01098	 movne       r1, #0x98
  00138	e5840274	 str         r0, [r4, #0x274]
  0013c	1b000000	 blne        CeSetThreadPriority
  00140		 |$LN13@SPI_Init|

; 421  :             }
; 422  :         }
; 423  : 
; 424  :     // Create an Event to wait for Device OFF on Suspend
; 425  :     pDevice->hDeviceOffEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  00140	e3a03000	 mov         r3, #0
  00144	e3a02000	 mov         r2, #0
  00148	e3a01000	 mov         r1, #0
  0014c	e3a00000	 mov         r0, #0
  00150	eb000000	 bl          CreateEventW
  00154	e1a03000	 mov         r3, r0

; 426  :     if (pDevice->hDeviceOffEvent == NULL)
; 427  :     {
; 428  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 429  :             L"Failed to create Device Off Event\r\n"
; 430  :         ));        
; 431  : 	}
; 432  : 	
; 433  : 	// Retrieve device ID
; 434  : 	pDevice->deviceID = SOCGetMCSPIDeviceByBus(pDevice->dwPort);

  00158	e5940038	 ldr         r0, [r4, #0x38]
  0015c	e584328c	 str         r3, [r4, #0x28C]
  00160	eb000000	 bl          SOCGetMCSPIDeviceByBus
  00164	e584003c	 str         r0, [r4, #0x3C]

; 435  : 	if (pDevice->deviceID == OMAP_DEVICE_NONE)

  00168	e3700001	 cmn         r0, #1
  0016c	0a00005b	 beq         |$LN24@SPI_Init|

; 436  : 	{
; 437  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 438  :             L"Failed to find device ID for this SPI controller\r\n"
; 439  :         ));
; 440  :         goto cleanUp;
; 441  : 	}
; 442  : 	
; 443  : 
; 444  :     
; 445  : 	// Retrieve IRQ from device
; 446  : 	pDevice->irq = GetIrqByDevice(pDevice->deviceID, NULL);

  00170	e3a01000	 mov         r1, #0
  00174	eb000000	 bl          GetIrqByDevice
  00178	e584000c	 str         r0, [r4, #0xC]

; 447  : 	if (pDevice->irq == (DWORD)-1)

  0017c	e3700001	 cmn         r0, #1
  00180	0a000056	 beq         |$LN24@SPI_Init|

; 448  : 	{
; 449  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 450  :             L"Failed to find IRQ number for this SPI controller\r\n"
; 451  :         ));
; 452  :         goto cleanUp;
; 453  : 	}
; 454  : 
; 455  :     // Map SPI controller
; 456  : 	pa.QuadPart = GetAddressByDevice(pDevice->deviceID);

  00184	e594003c	 ldr         r0, [r4, #0x3C]
  00188	eb000000	 bl          GetAddressByDevice

; 457  :     pDevice->pSPIRegs = MmMapIoSpace(pa, sizeof(OMAP_MCSPI_REGS), FALSE);

  0018c	e3a01000	 mov         r1, #0
  00190	e3a03000	 mov         r3, #0
  00194	e3a0207c	 mov         r2, #0x7C
  00198	eb000000	 bl          MmMapIoSpace
  0019c	e3500000	 cmp         r0, #0
  001a0	e5840018	 str         r0, [r4, #0x18]

; 458  :     if (pDevice->pSPIRegs == NULL) {

  001a4	0a00004d	 beq         |$LN24@SPI_Init|

; 459  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 460  :             L"Failed map SPI controller registers\r\n"
; 461  :         ));
; 462  :         goto cleanUp;
; 463  :     }
; 464  : 
; 465  :     // Map SPI interrupt
; 466  :     if (!KernelIoControl(
; 467  :         IOCTL_HAL_REQUEST_SYSINTR, &pDevice->irq, sizeof(pDevice->irq), 
; 468  :         &pDevice->sysIntr, sizeof(pDevice->sysIntr), NULL
; 469  :     )) {

  001a8	e59f0158	 ldr         r0, [pc, #0x158]
  001ac	e2843020	 add         r3, r4, #0x20
  001b0	e3a02004	 mov         r2, #4
  001b4	e284100c	 add         r1, r4, #0xC
  001b8	e58d8004	 str         r8, [sp, #4]
  001bc	e58d9000	 str         r9, [sp]
  001c0	eb000000	 bl          KernelIoControl
  001c4	e3500000	 cmp         r0, #0
  001c8	0a000044	 beq         |$LN24@SPI_Init|

; 470  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 471  :             L"Failed map SPI controller interrupt\r\n"
; 472  :         ));
; 473  :         goto cleanUp;
; 474  :     }
; 475  :     
; 476  :     // Set hardware to full power    
; 477  :     SetSPIPower(pDevice, D0);

  001cc	e3a01000	 mov         r1, #0
  001d0	e1a00004	 mov         r0, r4
  001d4	eb000000	 bl          SetSPIPower

; 478  : 
; 479  :     // Create interrupt event
; 480  :     pDevice->hIntrEvent = CreateEvent(NULL, FALSE, FALSE, NULL);

  001d8	e3a03000	 mov         r3, #0
  001dc	e3a02000	 mov         r2, #0
  001e0	e3a01000	 mov         r1, #0
  001e4	e3a00000	 mov         r0, #0
  001e8	eb000000	 bl          CreateEventW
  001ec	e1b01000	 movs        r1, r0
  001f0	e5841024	 str         r1, [r4, #0x24]

; 481  :     if (pDevice->hIntrEvent == NULL) {

  001f4	0a000039	 beq         |$LN24@SPI_Init|

; 482  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_Init: "
; 483  :             L"Failed create interrupt event\r\n"
; 484  :         ));
; 485  :         goto cleanUp;
; 486  :     }
; 487  : 
; 488  :     // Initialize interrupt
; 489  :     if (!InterruptInitialize(pDevice->sysIntr, pDevice->hIntrEvent, NULL, 0)) {

  001f8	e5940020	 ldr         r0, [r4, #0x20]
  001fc	e3a03000	 mov         r3, #0
  00200	e3a02000	 mov         r2, #0
  00204	eb000000	 bl          InterruptInitialize
  00208	e3500000	 cmp         r0, #0
  0020c	0a000033	 beq         |$LN24@SPI_Init|

; 490  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Init: "
; 491  :             L"InterruptInitialize failed\r\n"
; 492  :         ));
; 493  :         goto cleanUp;
; 494  :     }
; 495  : 	
; 496  :     // Reset the SPI controller
; 497  :     SETREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG, MCSPI_SYSCONFIG_SOFTRESET);

  00210	e5942018	 ldr         r2, [r4, #0x18]
  00214	e5923010	 ldr         r3, [r2, #0x10]
  00218	e3833002	 orr         r3, r3, #2
  0021c	e5823010	 str         r3, [r2, #0x10]

; 498  : 
; 499  :     // Wait until resetting is done
; 500  :     while ( !(INREG32(&pDevice->pSPIRegs->MCSPI_SYSSTATUS) & MCSPI_SYSSTATUS_RESETDONE)) {

  00220	ea000004	 b           |$LN26@SPI_Init|
  00224		 |$LL5@SPI_Init|

; 501  :         Sleep (1);

  00224	e3a00001	 mov         r0, #1
  00228	eb000000	 bl          Sleep

; 502  : 
; 503  :         if (dwCount++>0x100)

  0022c	e3560c01	 cmp         r6, #1, 24
  00230	e2866001	 add         r6, r6, #1
  00234	8a00001e	 bhi         |$LN23@SPI_Init|
  00238		 |$LN26@SPI_Init|
  00238	e5943018	 ldr         r3, [r4, #0x18]
  0023c	e5933014	 ldr         r3, [r3, #0x14]
  00240	e3130001	 tst         r3, #1
  00244	0afffff6	 beq         |$LL5@SPI_Init|

; 508  :         }
; 509  :     }
; 510  : 
; 511  :     // Disable all interrupts.
; 512  :     OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQENABLE, 0);

  00248	e5943018	 ldr         r3, [r4, #0x18]
  0024c	e3a02cff	 mov         r2, #0xFF, 24

; 513  : 
; 514  :     // Clear interrupts.
; 515  :     OUTREG32(&pDevice->pSPIRegs->MCSPI_IRQSTATUS, 0xFFFF);

  00250	e38220ff	 orr         r2, r2, #0xFF
  00254	e583801c	 str         r8, [r3, #0x1C]
  00258	e5943018	 ldr         r3, [r4, #0x18]

; 516  : 
; 517  : 
; 518  :     // Setup Module Control as master and eSpiMode to unknown so we can change it later.
; 519  :     pDevice->eSpiMode = UNKNOWN;
; 520  :     OUTREG32(&pDevice->pSPIRegs->MCSPI_MODULCTRL, 0);
; 521  : 
; 522  :     // Return non-null value
; 523  :     rc = (DWORD)pDevice;
; 524  : 
; 525  :     // Set this driver to internal suspend mode
; 526  :     OUTREG32(&pDevice->pSPIRegs->MCSPI_SYSCONFIG, MCSPI_SYSCONFIG_AUTOIDLE |
; 527  :         MCSPI_SYSCONFIG_SMARTIDLE | MCSPI_SYSCONFIG_ENAWAKEUP); 

  0025c	e3a0e015	 mov         lr, #0x15

; 528  :     SetSPIPower(pDevice, D4);

  00260	e3a01004	 mov         r1, #4
  00264	e5832018	 str         r2, [r3, #0x18]
  00268	e5943018	 ldr         r3, [r4, #0x18]
  0026c	e5848040	 str         r8, [r4, #0x40]
  00270	e1a00004	 mov         r0, r4
  00274	e5838028	 str         r8, [r3, #0x28]
  00278	e5943018	 ldr         r3, [r4, #0x18]
  0027c	e1a05004	 mov         r5, r4
  00280	e583e010	 str         lr, [r3, #0x10]
  00284	eb000000	 bl          SetSPIPower

; 529  : 
; 530  :     if (!RequestDevicePads(pDevice->deviceID))

  00288	e594003c	 ldr         r0, [r4, #0x3C]
  0028c	eb000000	 bl          RequestDevicePads
  00290	e3500000	 cmp         r0, #0
  00294	1a00000f	 bne         |$LN2@SPI_Init|

; 531  :     {
; 532  :         ERRORMSG (TRUE, (TEXT("SPI: RequestDevicePads failed.\n")));

  00298	e59f1060	 ldr         r1, [pc, #0x60]
  0029c	e59f0058	 ldr         r0, [pc, #0x58]
  002a0	e3a02f85	 mov         r2, #0x85, 30
  002a4	eb000000	 bl          NKDbgPrintfW
  002a8	e59f0054	 ldr         r0, [pc, #0x54]
  002ac	eb000000	 bl          NKDbgPrintfW

; 533  :         goto cleanUp;

  002b0	ea00000c	 b           |$LN1@SPI_Init|
  002b4		 |$LN23@SPI_Init|

; 504  :         {
; 505  :             // Break out dead lock, something is wrong.
; 506  :             ERRORMSG (TRUE, (TEXT("SPI: ERROR holding in reset.\n")));

  002b4	e59f1044	 ldr         r1, [pc, #0x44]
  002b8	e59f003c	 ldr         r0, [pc, #0x3C]
  002bc	e3a03c01	 mov         r3, #1, 24
  002c0	e38320fa	 orr         r2, r3, #0xFA
  002c4	eb000000	 bl          NKDbgPrintfW
  002c8	e59f0028	 ldr         r0, [pc, #0x28]
  002cc	eb000000	 bl          NKDbgPrintfW

; 507  :             return FALSE;

  002d0	e3a05000	 mov         r5, #0
  002d4	ea000003	 b           |$LN1@SPI_Init|
  002d8		 |$LN2@SPI_Init|

; 534  :     }
; 535  : 
; 536  :     // Return non-null value
; 537  :     rc = (DWORD)pDevice;

  002d8	e1a05004	 mov         r5, r4
  002dc		 |$cleanUp$44620|

; 538  : 
; 539  : cleanUp:
; 540  :     if (rc == 0) SPI_Deinit((DWORD)pDevice);

  002dc	ea000001	 b           |$LN1@SPI_Init|
  002e0		 |$LN24@SPI_Init|
  002e0	e1a00004	 mov         r0, r4
  002e4	eb000000	 bl          SPI_Deinit
  002e8		 |$LN1@SPI_Init|

; 541  :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Init(rc = %d)\r\n", rc));
; 542  :     return rc;
; 543  : }

  002e8	e1a00005	 mov         r0, r5
  002ec	e28dd008	 add         sp, sp, #8
  002f0	e8bd43f0	 ldmia       sp!, {r4 - r9, lr}
  002f4	e12fff1e	 bx          lr
  002f8		 |$LN30@SPI_Init|
  002f8		 |$LN31@SPI_Init|
  002f8	00000000	 DCD         |??_C@_1DM@JFMOKFBI@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?5?$AAh?$AAo?$AAl?$AAd?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAn?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?4?$AA?6?$AA?$AA@|
  002fc		 |$LN32@SPI_Init|
  002fc	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00300		 |$LN33@SPI_Init|
  00300	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00304		 |$LN34@SPI_Init|
  00304	00000000	 DCD         |??_C@_1EA@JPGNEHHB@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAR?$AAe?$AAq?$AAu?$AAe?$AAs?$AAt?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAP?$AAa?$AAd?$AAs?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?4?$AA?6?$AA?$AA@|
  00308		 |$LN35@SPI_Init|
  00308	01010098	 DCD         0x1010098
  0030c		 |$LN36@SPI_Init|
  0030c	00000000	 DCD         |SPIPowerTimerThread|
  00310		 |$LN37@SPI_Init|
  00310	00000000	 DCD         |g_deviceRegParams|
  00314		 |$LN38@SPI_Init|
  00314	73706944	 DCD         0x73706944
  00318		 |$M46336|

			 ENDP  ; |SPI_Init|

	EXPORT	|SPI_Read|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T46377| DCD	|$LN30@SPI_Read|
	DCD	0x40004e01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_Read| PROC

; 959  : {

  00000		 |$LN30@SPI_Read|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M46374|
  00004	e1a09002	 mov         r9, r2
  00008	e1a08001	 mov         r8, r1
  0000c	e1b06000	 movs        r6, r0

; 960  :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 961  :     SPI_DEVICE *pDevice;
; 962  :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 963  :     UCHAR* pData = (UCHAR*)pBuffer;
; 964  :     DWORD dwWordLen;
; 965  :     DWORD dwCount = 0;
; 966  :     DWORD dwWait;
; 967  : 
; 968  :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Read(0x%08x, 0x%08x, 0x%08x)\r\n", context, pBuffer, size));
; 969  : 
; 970  :     // Check if we get correct context
; 971  :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  00010	0a000043	 beq         |$LN14@SPI_Read|
  00014	e596e000	 ldr         lr, [r6]
  00018	e59f3114	 ldr         r3, [pc, #0x114]
  0001c	e15e0003	 cmp         lr, r3
  00020	1a00003f	 bne         |$LN14@SPI_Read|

; 976  :     }
; 977  : 
; 978  :     //  Call DMA function if DMA enabled
; 979  :     if( SpiDmaRxEnabled(pInstance) )

  00024	e596301c	 ldr         r3, [r6, #0x1C]
  00028	e3530000	 cmp         r3, #0
  0002c	0a000003	 beq         |$LN13@SPI_Read|

; 980  :     {
; 981  :         return SPI_DmaRead(context, pBuffer, size);

  00030	e1a00006	 mov         r0, r6
  00034	eb000000	 bl          SPI_DmaRead
  00038	e1a04000	 mov         r4, r0
  0003c	ea000039	 b           |$LN16@SPI_Read|
  00040		 |$LN13@SPI_Read|

; 982  :     }
; 983  : 
; 984  :     // Get pointers to registers
; 985  :     pDevice = pInstance->pDevice;
; 986  :     pSPIChannelRegs = pInstance->pSPIChannelRegs;
; 987  : 
; 988  :     // Get the word length of the data
; 989  :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  00040	e596300c	 ldr         r3, [r6, #0xC]
  00044	e5967004	 ldr         r7, [r6, #4]

; 990  : 
; 991  :     // Get hardware
; 992  : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  00048	e5965010	 ldr         r5, [r6, #0x10]
  0004c	e1a03a03	 mov         r3, r3, lsl #20
  00050	e597001c	 ldr         r0, [r7, #0x1C]
  00054	e1a03da3	 mov         r3, r3, lsr #27
  00058	e3e01000	 mvn         r1, #0
  0005c	e283b001	 add         r11, r3, #1
  00060	eb000000	 bl          WaitForSingleObject

; 993  :     
; 994  :     // Set this driver to Active Mode
; 995  :     SetSPIPower(pDevice, D0);

  00064	e3a01000	 mov         r1, #0
  00068	e1a00007	 mov         r0, r7
  0006c	eb000000	 bl          SetSPIPower

; 996  :     
; 997  :     // Enable the channel
; 998  : 	if (!pInstance->exclusiveAccess)

  00070	e5963014	 ldr         r3, [r6, #0x14]

; 999  :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1000 : 
; 1001 :     // Write out the data
; 1002 :     for( dwCount = 0; dwCount < size; )

  00074	e3a04000	 mov         r4, #0
  00078	e3530000	 cmp         r3, #0
  0007c	05953008	 ldreq       r3, [r5, #8]
  00080	03833001	 orreq       r3, r3, #1
  00084	05853008	 streq       r3, [r5, #8]
  00088	e3590000	 cmp         r9, #0
  0008c	0a000019	 beq         |$LN10@SPI_Read|
  00090		 |$LL11@SPI_Read|

; 1003 :     {
; 1004 :         //  Wait for RX register to fill
; 1005 :         dwWait = pDevice->timeout;

  00090	e5973028	 ldr         r3, [r7, #0x28]
  00094	e1b0a003	 movs        r10, r3

; 1006 :         while(dwWait && !(INREG32(&pSPIChannelRegs->MCSPI_CHSTATUS) & MCSPI_CHSTAT_RX_FULL))

  00098	0a000016	 beq         |$LN10@SPI_Read|
  0009c		 |$LL9@SPI_Read|
  0009c	e5953004	 ldr         r3, [r5, #4]
  000a0	e3130001	 tst         r3, #1
  000a4	1a000003	 bne         |$LN8@SPI_Read|

; 1007 :         {
; 1008 :             StallExecution(1);

  000a8	e3a00001	 mov         r0, #1
  000ac	eb000000	 bl          StallExecution

; 1009 :             dwWait--;

  000b0	e25aa001	 subs        r10, r10, #1
  000b4	1afffff8	 bne         |$LL9@SPI_Read|
  000b8		 |$LN8@SPI_Read|

; 1010 :         }
; 1011 : 
; 1012 :         //  Check if timeout occured
; 1013 :         if( dwWait == 0 )

  000b8	e35a0000	 cmp         r10, #0
  000bc	0a00000d	 beq         |$LN10@SPI_Read|

; 1014 :         {
; 1015 :             DEBUGMSG(ZONE_ERROR, (L"SPI_Read timeout\r\n"));
; 1016 : 
; 1017 : 	        // Disable the channel.
; 1018 : 			if (!pInstance->exclusiveAccess)
; 1019 : 	        	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1020 : 
; 1021 :             // Set this driver to Suspend Mode
; 1022 :             SetSPIPower(pDevice, D4);
; 1023 : 
; 1024 :             // Release hardware
; 1025 : 			ReleaseMutex(pDevice->hControllerMutex);
; 1026 : 
; 1027 :             goto clean;
; 1028 :         }
; 1029 : 
; 1030 : 
; 1031 :         //  Read in data on byte/word/dword boundaries
; 1032 :         if( dwWordLen > 16 )

  000c0	e35b0010	 cmp         r11, #0x10

; 1033 :         {
; 1034 :             *(UINT32*)(&pData[dwCount]) = INREG32(&pSPIChannelRegs->MCSPI_RX);   

  000c4	85953010	 ldrhi       r3, [r5, #0x10]
  000c8	87843008	 strhi       r3, [r4, +r8]

; 1035 :             dwCount += sizeof(UINT32);

  000cc	82844004	 addhi       r4, r4, #4
  000d0	8a000006	 bhi         |$LN2@SPI_Read|

; 1036 :         }
; 1037 :         else if( dwWordLen > 8 )

  000d4	e35b0008	 cmp         r11, #8

; 1038 :         {
; 1039 :             *(UINT16*)(&pData[dwCount]) = (UINT16) INREG32(&pSPIChannelRegs->MCSPI_RX);   

  000d8	85953010	 ldrhi       r3, [r5, #0x10]
  000dc	818430b8	 strhih      r3, [r4, +r8]

; 1040 :             dwCount += sizeof(UINT16);
; 1041 :         }
; 1042 :         else
; 1043 :         {
; 1044 :             *(UINT8*)(&pData[dwCount]) = (UINT8) INREG32(&pSPIChannelRegs->MCSPI_RX);   

  000e0	95953010	 ldrls       r3, [r5, #0x10]
  000e4	82844002	 addhi       r4, r4, #2
  000e8	97c43008	 strlsb      r3, [r4, +r8]

; 1045 :             dwCount += sizeof(UINT8);

  000ec	92844001	 addls       r4, r4, #1
  000f0		 |$LN2@SPI_Read|

; 999  :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1000 : 
; 1001 :     // Write out the data
; 1002 :     for( dwCount = 0; dwCount < size; )

  000f0	e1540009	 cmp         r4, r9
  000f4	3affffe5	 bcc         |$LL11@SPI_Read|
  000f8		 |$LN10@SPI_Read|

; 1046 :         }   
; 1047 :     }
; 1048 :     
; 1049 :     // Disable the channel.
; 1050 : 	if (!pInstance->exclusiveAccess)

  000f8	e5963014	 ldr         r3, [r6, #0x14]

; 1051 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1052 : 
; 1053 :     // Set this driver to Suspend Mode
; 1054 :     SetSPIPower(pDevice, D4);

  000fc	e3a01004	 mov         r1, #4
  00100	e1a00007	 mov         r0, r7
  00104	e3530000	 cmp         r3, #0
  00108	05953008	 ldreq       r3, [r5, #8]
  0010c	03c33001	 biceq       r3, r3, #1
  00110	05853008	 streq       r3, [r5, #8]
  00114	eb000000	 bl          SetSPIPower

; 1055 : 
; 1056 :     // Release hardware
; 1057 : 	ReleaseMutex(pDevice->hControllerMutex);

  00118	e597001c	 ldr         r0, [r7, #0x1C]
  0011c	eb000000	 bl          ReleaseMutex
  00120		 |$clean$44886|

; 1058 : 
; 1059 : clean:
; 1060 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Read(rc = %d)\r\n", dwCount));
; 1061 : 	return dwCount;

  00120	ea000000	 b           |$LN16@SPI_Read|
  00124		 |$LN14@SPI_Read|

; 972  :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Read: "
; 973  :             L"Incorrect context paramer\r\n"
; 974  :         ));
; 975  :         return 0;

  00124	e3a04000	 mov         r4, #0
  00128		 |$LN16@SPI_Read|

; 1062 : }

  00128	e1a00004	 mov         r0, r4
  0012c	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00130	e12fff1e	 bx          lr
  00134		 |$LN31@SPI_Read|
  00134		 |$LN32@SPI_Read|
  00134	73706949	 DCD         0x73706949
  00138		 |$M46375|

			 ENDP  ; |SPI_Read|

	EXPORT	|SPI_Write|
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi_priv.h

  00000			 AREA	 |.pdata|, PDATA
|$T46410| DCD	|$LN31@SPI_Write|
	DCD	0x40004c01
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SPI_Write| PROC

; 1209 : {

  00000		 |$LN31@SPI_Write|
  00000	e92d4ff0	 stmdb       sp!, {r4 - r11, lr}
  00004		 |$M46407|
  00004	e1a09002	 mov         r9, r2
  00008	e1a08001	 mov         r8, r1
  0000c	e1b06000	 movs        r6, r0

; 1210 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 1211 :     SPI_DEVICE *pDevice;
; 1212 :     OMAP_MCSPI_CHANNEL_REGS *pSPIChannelRegs;
; 1213 :     UCHAR* pData = (UCHAR*)pBuffer;
; 1214 :     DWORD dwWordLen;
; 1215 :     DWORD dwCount = 0;
; 1216 :     DWORD dwWait;
; 1217 : 
; 1218 :     DEBUGMSG(ZONE_FUNCTION, (L"+SPI_Write(0x%08x, 0x%08x, 0x%08x)\r\n", context, pBuffer, size));
; 1219 : 
; 1220 :     // Check if we get correct context
; 1221 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  00010	0a000041	 beq         |$LN14@SPI_Write|
  00014	e596e000	 ldr         lr, [r6]
  00018	e59f310c	 ldr         r3, [pc, #0x10C]
  0001c	e15e0003	 cmp         lr, r3
  00020	1a00003d	 bne         |$LN14@SPI_Write|

; 1226 :     }
; 1227 : 
; 1228 :     //  Call DMA function if DMA enabled
; 1229 :     if( SpiDmaTxEnabled(pInstance) )

  00024	e5963018	 ldr         r3, [r6, #0x18]
  00028	e3530000	 cmp         r3, #0
  0002c	0a000003	 beq         |$LN13@SPI_Write|

; 1230 :     {
; 1231 :         return SPI_DmaWrite(context, pBuffer, size);

  00030	e1a00006	 mov         r0, r6
  00034	eb000000	 bl          SPI_DmaWrite
  00038	e1a04000	 mov         r4, r0
  0003c	ea000037	 b           |$LN16@SPI_Write|
  00040		 |$LN13@SPI_Write|

; 1232 :     }
; 1233 : 
; 1234 :     // Get pointers to registers
; 1235 :     pDevice = pInstance->pDevice;
; 1236 :     pSPIChannelRegs = pInstance->pSPIChannelRegs;
; 1237 : 
; 1238 : 
; 1239 :     // Get the word length of the data
; 1240 :     dwWordLen = MCSPI_CHCONF_GET_WL(pInstance->config);

  00040	e596300c	 ldr         r3, [r6, #0xC]
  00044	e5967004	 ldr         r7, [r6, #4]

; 1241 : 
; 1242 :     // Get hardware
; 1243 : 	WaitForSingleObject(pDevice->hControllerMutex, INFINITE);

  00048	e5965010	 ldr         r5, [r6, #0x10]
  0004c	e1a03a03	 mov         r3, r3, lsl #20
  00050	e597001c	 ldr         r0, [r7, #0x1C]
  00054	e1a03da3	 mov         r3, r3, lsr #27
  00058	e3e01000	 mvn         r1, #0
  0005c	e283b001	 add         r11, r3, #1
  00060	eb000000	 bl          WaitForSingleObject

; 1244 :     
; 1245 :     // Set this driver to Active Mode
; 1246 :     SetSPIPower(pDevice, D0);

  00064	e3a01000	 mov         r1, #0
  00068	e1a00007	 mov         r0, r7
  0006c	eb000000	 bl          SetSPIPower

; 1247 :     
; 1248 :     // Enable the channel
; 1249 : 	if (!pInstance->exclusiveAccess)

  00070	e5963014	 ldr         r3, [r6, #0x14]

; 1250 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1251 : 
; 1252 :     // Write out the data
; 1253 :     for( dwCount = 0; dwCount < size; )

  00074	e3a04000	 mov         r4, #0
  00078	e3530000	 cmp         r3, #0
  0007c	05953008	 ldreq       r3, [r5, #8]
  00080	03833001	 orreq       r3, r3, #1
  00084	05853008	 streq       r3, [r5, #8]
  00088	e3590000	 cmp         r9, #0
  0008c	0a000017	 beq         |$LN10@SPI_Write|
  00090		 |$LL11@SPI_Write|

; 1254 :     {
; 1255 :         //  Write out data on byte/word/dword boundaries
; 1256 :         if( dwWordLen > 16 )

  00090	e35b0010	 cmp         r11, #0x10

; 1257 :         {
; 1258 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT32*)(&pData[dwCount]));   

  00094	87943008	 ldrhi       r3, [r4, +r8]

; 1259 :             dwCount += sizeof(UINT32);

  00098	82844004	 addhi       r4, r4, #4
  0009c	8a000004	 bhi         |$LN27@SPI_Write|

; 1260 :         }
; 1261 :         else if( dwWordLen > 8 )

  000a0	e35b0008	 cmp         r11, #8

; 1262 :         {
; 1263 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT16*)(&pData[dwCount]));   

  000a4	819430b8	 ldrhih      r3, [r4, +r8]

; 1264 :             dwCount += sizeof(UINT16);

  000a8	82844002	 addhi       r4, r4, #2

; 1265 :         }
; 1266 :         else
; 1267 :         {
; 1268 :             OUTREG32(&pSPIChannelRegs->MCSPI_TX, *(UINT8*)(&pData[dwCount]));   

  000ac	97d43008	 ldrlsb      r3, [r4, +r8]

; 1269 :             dwCount += sizeof(UINT8);

  000b0	92844001	 addls       r4, r4, #1
  000b4		 |$LN27@SPI_Write|
  000b4	e585300c	 str         r3, [r5, #0xC]

; 1270 :         }   
; 1271 : 
; 1272 :         //  Wait for TX register to empty out
; 1273 :         dwWait = pDevice->timeout;

  000b8	e5973028	 ldr         r3, [r7, #0x28]
  000bc	e1b0a003	 movs        r10, r3

; 1274 :         while(dwWait && !(INREG32(&pSPIChannelRegs->MCSPI_CHSTATUS) & MCSPI_CHSTAT_TX_EMPTY))

  000c0	0a00000a	 beq         |$LN10@SPI_Write|
  000c4		 |$LL5@SPI_Write|
  000c4	e5953004	 ldr         r3, [r5, #4]
  000c8	e3130002	 tst         r3, #2
  000cc	1a000003	 bne         |$LN4@SPI_Write|

; 1275 :         {
; 1276 :             StallExecution(1);

  000d0	e3a00001	 mov         r0, #1
  000d4	eb000000	 bl          StallExecution

; 1277 :             dwWait--;

  000d8	e25aa001	 subs        r10, r10, #1
  000dc	1afffff8	 bne         |$LL5@SPI_Write|
  000e0		 |$LN4@SPI_Write|

; 1278 :         }
; 1279 : 
; 1280 :         //  Check if timeout occured
; 1281 :         if( dwWait == 0 )

  000e0	e35a0000	 cmp         r10, #0
  000e4	0a000001	 beq         |$LN10@SPI_Write|

; 1250 :     	SETREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1251 : 
; 1252 :     // Write out the data
; 1253 :     for( dwCount = 0; dwCount < size; )

  000e8	e1540009	 cmp         r4, r9
  000ec	3affffe7	 bcc         |$LL11@SPI_Write|
  000f0		 |$LN10@SPI_Write|

; 1282 :         {
; 1283 :             DEBUGMSG(ZONE_ERROR, (L"SPI_Write timeout\r\n"));
; 1284 : 
; 1285 : 	        // Disable the channel.
; 1286 : 			if (!pInstance->exclusiveAccess)
; 1287 : 	        	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1288 : 
; 1289 :             // Set this driver to Suspend Mode
; 1290 :             SetSPIPower(pDevice, D4);
; 1291 : 
; 1292 :             // Release hardware
; 1293 : 			ReleaseMutex(pDevice->hControllerMutex);
; 1294 : 
; 1295 :             goto clean;
; 1296 :         }
; 1297 :     }
; 1298 :     
; 1299 :     // Disable the channel.
; 1300 : 	if (!pInstance->exclusiveAccess)

  000f0	e5963014	 ldr         r3, [r6, #0x14]

; 1301 :     	CLRREG32(&pSPIChannelRegs->MCSPI_CHCTRL, MCSPI_CHCONT_EN);
; 1302 : 
; 1303 :     // Set this driver to Suspend Mode
; 1304 :     SetSPIPower(pDevice, D4);

  000f4	e3a01004	 mov         r1, #4
  000f8	e1a00007	 mov         r0, r7
  000fc	e3530000	 cmp         r3, #0
  00100	05953008	 ldreq       r3, [r5, #8]
  00104	03c33001	 biceq       r3, r3, #1
  00108	05853008	 streq       r3, [r5, #8]
  0010c	eb000000	 bl          SetSPIPower

; 1305 : 
; 1306 :     // Release hardware
; 1307 : 	ReleaseMutex(pDevice->hControllerMutex);

  00110	e597001c	 ldr         r0, [r7, #0x1C]
  00114	eb000000	 bl          ReleaseMutex
  00118		 |$clean$45011|

; 1308 : 
; 1309 : 
; 1310 : clean:
; 1311 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_Write(rc = %d)\r\n", dwCount));
; 1312 : 	return dwCount;

  00118	ea000000	 b           |$LN16@SPI_Write|
  0011c		 |$LN14@SPI_Write|

; 1222 :         DEBUGMSG (ZONE_ERROR, (L"ERROR: SPI_Write: "
; 1223 :             L"Incorrect context paramer\r\n"
; 1224 :         ));
; 1225 :         return 0;

  0011c	e3a04000	 mov         r4, #0
  00120		 |$LN16@SPI_Write|

; 1313 : }

  00120	e1a00004	 mov         r0, r4
  00124	e8bd4ff0	 ldmia       sp!, {r4 - r11, lr}
  00128	e12fff1e	 bx          lr
  0012c		 |$LN32@SPI_Write|
  0012c		 |$LN33@SPI_Write|
  0012c	73706949	 DCD         0x73706949
  00130		 |$M46408|

			 ENDP  ; |SPI_Write|

	EXPORT	|SPI_IOControl|
	EXPORT	|??_C@_1DC@IGLIIDFJ@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DC@NKOBOHOD@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@| [ DATA ] ; `string'
	IMPORT	|CeSafeCopyMemory|
	IMPORT	|SetLastError|
	IMPORT	|GetCallerProcess|
	IMPORT	|__C_specific_handler|
	IMPORT	|memcmp|
; File c:\wince600\public\common\sdk\inc\kfuncs.h

  00000			 AREA	 |.pdata|, PDATA
|$T46525| DCD	|$LN130@SPI_IOCont|
	DCD	0xc0016404

  00000			 AREA	 |.pdata|, PDATA
|$T46527| DCD	|$LN74@SPI_IOCont|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T46529| DCD	|$LN95@SPI_IOCont|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T46531| DCD	|$LN88@SPI_IOCont|
	DCD	0x40000301

  00000			 AREA	 |.pdata|, PDATA
|$T46533| DCD	|$LN81@SPI_IOCont|
	DCD	0x40002001

  00000			 AREA	 |.xdata|, DATA
|$T46523| DCD	0x4
	DCD	|$LN78@SPI_IOCont|
	DCD	|$LN79@SPI_IOCont|
	DCD	|$LN74@SPI_IOCont|
	DCD	|$LN75@SPI_IOCont|
	DCD	|$LN99@SPI_IOCont|
	DCD	|$LN100@SPI_IOCont|
	DCD	|$LN95@SPI_IOCont|
	DCD	|$LN96@SPI_IOCont|
	DCD	|$LN92@SPI_IOCont|
	DCD	|$LN93@SPI_IOCont|
	DCD	|$LN88@SPI_IOCont|
	DCD	|$LN89@SPI_IOCont|
	DCD	|$LN85@SPI_IOCont|
	DCD	|$LN86@SPI_IOCont|
	DCD	|$LN81@SPI_IOCont|
	DCD	|$LN82@SPI_IOCont|

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@IGLIIDFJ@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "s", 0x0, "p", 0x0, "i", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DC@NKOBOHOD@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "x", 0x0, "c", 0x0, "e", 0x0, "p", 0x0, "t", 0x0, "i"
	DCB	0x0, "o", 0x0, "n", 0x0, " ", 0x0, "i", 0x0, "n", 0x0, " "
	DCB	0x0, "s", 0x0, "p", 0x0, "i", 0x0, " ", 0x0, "i", 0x0, "o"
	DCB	0x0, "c", 0x0, "t", 0x0, "l", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@| DCB "S"
	DCB	0x0, "P", 0x0, "I", 0x0, ":", 0x0, " ", 0x0, "U", 0x0, "n"
	DCB	0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0, " "
	DCB	0x0, "I", 0x0, "O", 0x0, "C", 0x0, "T", 0x0, "L", 0x0, "_"
	DCB	0x0, "x", 0x0, "x", 0x0, "x", 0x0, "(", 0x0, "0", 0x0, "x"
	DCB	0x0, "%", 0x0, "0", 0x0, ".", 0x0, "8", 0x0, "X", 0x0, ")"
	DCB	0x0, " ", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Ogspy
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\spi\spi.c

  00000			 AREA	 |.text|, CODE, ARM

  00000	00000000	 DCD         |__C_specific_handler|
  00004	00000000	 DCD         |$T46523|

  00008		 |SPI_IOControl| PROC

; 2131 : ) {

  00008		 |$LN130@SPI_IOCont|
  00008	e1a0c00d	 mov         r12, sp
  0000c	e92d5ff0	 stmdb       sp!, {r4 - r12, lr}
  00010	e28db028	 add         r11, sp, #0x28
  00014	e24dd038	 sub         sp, sp, #0x38
  00018		 |$LN128@SPI_IOCont|
  00018	e1a08003	 mov         r8, r3
  0001c	e1a06002	 mov         r6, r2
  00020	e1a05001	 mov         r5, r1
  00024	e1b07000	 movs        r7, r0
  00028	e50b705c	 str         r7, [r11, #-0x5C]

; 2132 :     BOOL bRetVal = FALSE;

  0002c	e3a02000	 mov         r2, #0
  00030	e50b2060	 str         r2, [r11, #-0x60]

; 2133 :     SPI_DEVICE *pDevice = NULL;
; 2134 :     SPI_INSTANCE *pInstance = (SPI_INSTANCE*)context;
; 2135 :     DEVICE_IFC_SPI ifc;
; 2136 :     IOCTL_SPI_CONFIGURE_IN *pConfig;
; 2137 : 
; 2138 :     DEBUGMSG(ZONE_FUNCTION, (
; 2139 :         L"+SPI_IOControl(0x%08x, 0x%08x, 0x%08x, %d, 0x%08x, %d, 0x%08x)\r\n",
; 2140 :         context, dwCode, pInBuffer, inSize, pOutBuffer, outSize, pOutSize
; 2141 :     ));
; 2142 : 
; 2143 :     // Check if we get correct context
; 2144 :     if (pInstance == NULL || pInstance->cookie != SPI_INSTANCE_COOKIE) {

  00034	0a000153	 beq         |$clean$45391|
  00038	e5974000	 ldr         r4, [r7]
  0003c	e59fe5f4	 ldr         lr, [pc, #0x5F4]
  00040	e154000e	 cmp         r4, lr
  00044	1a00014f	 bne         |$clean$45391|

; 2145 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_IOControl: "
; 2146 :             L"Incorrect context paramer\r\n"
; 2147 :         ));
; 2148 :         goto clean;
; 2149 :     }
; 2150 :     
; 2151 :     //Get Device
; 2152 :     pDevice = pInstance->pDevice;
; 2153 : 
; 2154 :     switch (dwCode) {

  00048	e59f35e4	 ldr         r3, [pc, #0x5E4]
  0004c	e1550003	 cmp         r5, r3
  00050	e5974004	 ldr         r4, [r7, #4]
  00054	8a0000a4	 bhi         |$LN71@SPI_IOCont|
  00058	0a0000a0	 beq         |$LN26@SPI_IOCont|
  0005c	e59f35cc	 ldr         r3, [pc, #0x5CC]
  00060	e1550003	 cmp         r5, r3
  00064	8a000085	 bhi         |$LN72@SPI_IOCont|
  00068	0a000078	 beq         |$LN35@SPI_IOCont|
  0006c	e3a03822	 mov         r3, #0x22, 16
  00070	e3833b01	 orr         r3, r3, #1, 22
  00074	e1550003	 cmp         r5, r3
  00078	0a000036	 beq         |$LN56@SPI_IOCont|
  0007c	e3a03822	 mov         r3, #0x22, 16
  00080	e3833b02	 orr         r3, r3, #2, 22
  00084	e1550003	 cmp         r5, r3
  00088	0a000025	 beq         |$LN47@SPI_IOCont|
  0008c	e59f3598	 ldr         r3, [pc, #0x598]
  00090	e1550003	 cmp         r5, r3
  00094	0a000012	 beq         |$LN43@SPI_IOCont|
  00098	e59f3588	 ldr         r3, [pc, #0x588]
  0009c	e1550003	 cmp         r5, r3
  000a0	1a0000a9	 bne         |$LN1@SPI_IOCont|

; 2220 : 
; 2221 :     case IOCTL_SPI_ASYNC_WRITEREAD:
; 2222 :         if (pOutSize != NULL) *pOutSize = inSize;

  000a4	e59b3008	 ldr         r3, [r11, #8]
  000a8	e3530000	 cmp         r3, #0
  000ac	15838000	 strne       r8, [r3]

; 2223 :         if (pInBuffer == NULL || pOutBuffer == NULL || inSize != outSize ) {

  000b0	e3560000	 cmp         r6, #0
  000b4	0a000063	 beq         |$LN53@SPI_IOCont|
  000b8	e59b3000	 ldr         r3, [r11]
  000bc	e3530000	 cmp         r3, #0
  000c0	0a000060	 beq         |$LN53@SPI_IOCont|
  000c4	e59b2004	 ldr         r2, [r11, #4]
  000c8	e1580002	 cmp         r8, r2
  000cc	1a00005d	 bne         |$LN53@SPI_IOCont|

; 2224 :             SetLastError(ERROR_INVALID_PARAMETER);
; 2225 :             break;
; 2226 :         }
; 2227 : 
; 2228 :         bRetVal = SPI_AsyncWriteRead(context, inSize, pInBuffer, pOutBuffer);

  000d0	e1a02006	 mov         r2, r6
  000d4	e1a01008	 mov         r1, r8
  000d8	e1a00007	 mov         r0, r7
  000dc	eb000000	 bl          SPI_AsyncWriteRead

; 2229 :         break;

  000e0	ea000127	 b           |$LN125@SPI_IOCont|
  000e4		 |$LN43@SPI_IOCont|

; 2210 :     
; 2211 :     case IOCTL_SPI_WRITEREAD:
; 2212 :         if (pOutSize != NULL) *pOutSize = inSize;

  000e4	e59b3008	 ldr         r3, [r11, #8]
  000e8	e3530000	 cmp         r3, #0
  000ec	15838000	 strne       r8, [r3]

; 2213 :         if (pInBuffer == NULL || pOutBuffer == NULL || inSize != outSize ) {

  000f0	e3560000	 cmp         r6, #0
  000f4	0a000053	 beq         |$LN53@SPI_IOCont|
  000f8	e59b2000	 ldr         r2, [r11]
  000fc	e3520000	 cmp         r2, #0
  00100	0a000050	 beq         |$LN53@SPI_IOCont|
  00104	e59b3004	 ldr         r3, [r11, #4]
  00108	e1580003	 cmp         r8, r3
  0010c	1a00004d	 bne         |$LN53@SPI_IOCont|

; 2214 :             SetLastError(ERROR_INVALID_PARAMETER);
; 2215 :             break;
; 2216 :         }
; 2217 : 
; 2218 :         bRetVal = SPI_WriteRead(context, inSize, pOutBuffer, pInBuffer);

  00110	e1a03006	 mov         r3, r6
  00114	e1a01008	 mov         r1, r8
  00118	e1a00007	 mov         r0, r7
  0011c	eb000000	 bl          SPI_WriteRead

; 2219 :         break;

  00120	ea000117	 b           |$LN125@SPI_IOCont|
  00124		 |$LN47@SPI_IOCont|

; 2194 :             break;
; 2195 :         }
; 2196 :         SetLastError(ERROR_INVALID_PARAMETER);
; 2197 :         break;
; 2198 :         
; 2199 :     case IOCTL_SPI_CONFIGURE:
; 2200 :         if (pOutSize != NULL) *pOutSize = sizeof(DWORD);

  00124	e59b3008	 ldr         r3, [r11, #8]
  00128	e3530000	 cmp         r3, #0
  0012c	13a02004	 movne       r2, #4
  00130	15832000	 strne       r2, [r3]

; 2201 :         if (pInBuffer == NULL || inSize < sizeof(IOCTL_SPI_CONFIGURE_IN)) {

  00134	e3560000	 cmp         r6, #0
  00138	0a000042	 beq         |$LN53@SPI_IOCont|
  0013c	e3580008	 cmp         r8, #8
  00140	3a000040	 bcc         |$LN53@SPI_IOCont|

; 2202 :             SetLastError(ERROR_INVALID_PARAMETER);
; 2203 :             break;
; 2204 :         }
; 2205 : 
; 2206 :         pConfig = (IOCTL_SPI_CONFIGURE_IN*) pInBuffer;
; 2207 : 
; 2208 :         bRetVal = SPI_Configure(context, pConfig->address, pConfig->config);

  00144	e5962004	 ldr         r2, [r6, #4]
  00148	e5961000	 ldr         r1, [r6]
  0014c	e1a00007	 mov         r0, r7
  00150	eb000000	 bl          SPI_Configure

; 2209 :         break;

  00154	ea00010a	 b           |$LN125@SPI_IOCont|
  00158		 |$LN56@SPI_IOCont|

; 2155 :     case IOCTL_DDK_GET_DRIVER_IFC:
; 2156 :         // We can give interface only to our peer in device process
; 2157 :         if (GetCurrentProcessId() != (DWORD)GetCallerProcess()) {

  00158	e3a0000c	 mov         r0, #0xC
  0015c	eb000000	 bl          __GetUserKData
  00160	e1a04000	 mov         r4, r0
  00164	eb000000	 bl          GetCallerProcess
  00168	e1540000	 cmp         r4, r0
  0016c	0a000003	 beq         |$LN55@SPI_IOCont|

; 2158 :             DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_IOControl: "
; 2159 :                 L"IOCTL_DDK_GET_DRIVER_IFC can be called only from "
; 2160 :                 L"device process (caller process id 0x%08x)\r\n",
; 2161 :                 GetCallerProcess()
; 2162 :             ));
; 2163 :             SetLastError(ERROR_ACCESS_DENIED);

  00170	e3a00005	 mov         r0, #5
  00174		 |$LN126@SPI_IOCont|
  00174	eb000000	 bl          SetLastError

; 2164 :             goto clean;

  00178	e3a02000	 mov         r2, #0
  0017c	ea000101	 b           |$clean$45391|
  00180		 |$LN55@SPI_IOCont|

; 2165 :         }
; 2166 :         // Check input parameters
; 2167 :         if (pInBuffer == NULL || inSize < sizeof(GUID)) {

  00180	e3560000	 cmp         r6, #0
  00184	0a00002f	 beq         |$LN53@SPI_IOCont|
  00188	e3580010	 cmp         r8, #0x10
  0018c	3a00002d	 bcc         |$LN53@SPI_IOCont|

; 2170 :         }
; 2171 :         if (IsEqualGUID(pInBuffer, &DEVICE_IFC_SPI_GUID)) {

  00190	e59f148c	 ldr         r1, [pc, #0x48C]
  00194	e3a02010	 mov         r2, #0x10
  00198	e1a00006	 mov         r0, r6
  0019c	eb000000	 bl          memcmp
  001a0	e3500000	 cmp         r0, #0
  001a4	1a000027	 bne         |$LN53@SPI_IOCont|

; 2172 :             if (pOutSize != NULL) *pOutSize = sizeof(DEVICE_IFC_SPI);

  001a8	e59b3008	 ldr         r3, [r11, #8]
  001ac	e3530000	 cmp         r3, #0
  001b0	13a02030	 movne       r2, #0x30
  001b4	15832000	 strne       r2, [r3]

; 2173 :             if (pOutBuffer == NULL || outSize < sizeof(DEVICE_IFC_SPI)) {

  001b8	e59b0000	 ldr         r0, [r11]
  001bc	e3500000	 cmp         r0, #0
  001c0	0a000020	 beq         |$LN53@SPI_IOCont|
  001c4	e59b3004	 ldr         r3, [r11, #4]
  001c8	e3530030	 cmp         r3, #0x30
  001cc	3a00001d	 bcc         |$LN53@SPI_IOCont|

; 2174 :                 SetLastError(ERROR_INVALID_PARAMETER);
; 2175 :                 break;
; 2176 :             }
; 2177 :             ifc.context = context;
; 2178 :             ifc.pfnConfigure = SPI_Configure;

  001d0	e59f3448	 ldr         r3, [pc, #0x448]

; 2179 :             ifc.pfnRead = SPI_Read;

  001d4	e59f2440	 ldr         r2, [pc, #0x440]

; 2180 :             ifc.pfnWrite = SPI_Write;

  001d8	e59f1438	 ldr         r1, [pc, #0x438]

; 2181 :             ifc.pfnWriteRead = SPI_WriteRead;

  001dc	e59fe430	 ldr         lr, [pc, #0x430]

; 2182 :             ifc.pfnAsyncWriteRead = SPI_AsyncWriteRead;

  001e0	e59f4428	 ldr         r4, [pc, #0x428]

; 2183 :             ifc.pfnWaitForAsyncWriteReadComplete = SPI_WaitForAsyncWriteReadComplete;

  001e4	e59f5420	 ldr         r5, [pc, #0x420]

; 2184 :             ifc.pfnSetSlaveMode = SPI_SetSlaveMode;

  001e8	e59f6418	 ldr         r6, [pc, #0x418]

; 2185 :             ifc.pfnLockController = SPI_LockController;

  001ec	e59f7410	 ldr         r7, [pc, #0x410]

; 2186 :             ifc.pfnUnlockController = SPI_UnlockController;

  001f0	e59f8408	 ldr         r8, [pc, #0x408]

; 2187 :             ifc.pfnEnableChannel = SPI_EnableChannel;

  001f4	e59f9400	 ldr         r9, [pc, #0x400]

; 2188 :             ifc.pfnDisableChannel = SPI_DisableChannel;

  001f8	e59fa3f8	 ldr         r10, [pc, #0x3F8]
  001fc	e50b3054	 str         r3, [r11, #-0x54]
  00200	e50b2050	 str         r2, [r11, #-0x50]
  00204	e50b104c	 str         r1, [r11, #-0x4C]
  00208	e50be048	 str         lr, [r11, #-0x48]
  0020c	e50b4034	 str         r4, [r11, #-0x34]
  00210	e50b5030	 str         r5, [r11, #-0x30]
  00214	e50b602c	 str         r6, [r11, #-0x2C]
  00218	e50b7044	 str         r7, [r11, #-0x44]
  0021c	e50b8040	 str         r8, [r11, #-0x40]
  00220	e50b903c	 str         r9, [r11, #-0x3C]
  00224	e50ba038	 str         r10, [r11, #-0x38]

; 2189 :             if (!CeSafeCopyMemory(pOutBuffer, &ifc, sizeof(DEVICE_IFC_SPI))) {

  00228	e3a02030	 mov         r2, #0x30
  0022c	e24b1058	 sub         r1, r11, #0x58
  00230	e51b305c	 ldr         r3, [r11, #-0x5C]
  00234	e50b3058	 str         r3, [r11, #-0x58]
  00238	eb000000	 bl          CeSafeCopyMemory
  0023c	e3500000	 cmp         r0, #0

; 2192 :             }
; 2193 :             bRetVal = TRUE;

  00240	13a02001	 movne       r2, #1

; 2190 :                 SetLastError(ERROR_INVALID_PARAMETER);
; 2191 :                 break;

  00244	1a0000cf	 bne         |$clean$45391|
  00248		 |$LN53@SPI_IOCont|

; 2168 :             SetLastError(ERROR_INVALID_PARAMETER);

  00248	e3a00057	 mov         r0, #0x57

; 2169 :             break;

  0024c	eaffffc8	 b           |$LN126@SPI_IOCont|
  00250		 |$LN35@SPI_IOCont|

; 2230 : 
; 2231 :     case IOCTL_SPI_ASYNC_WRITEREAD_COMPLETE:
; 2232 :         if (pOutSize != NULL) *pOutSize = inSize;

  00250	e59b3008	 ldr         r3, [r11, #8]
  00254	e3530000	 cmp         r3, #0
  00258	15838000	 strne       r8, [r3]

; 2233 :         if (pOutBuffer == NULL || outSize == 0) {

  0025c	e59b2000	 ldr         r2, [r11]
  00260	e3520000	 cmp         r2, #0
  00264	0afffff7	 beq         |$LN53@SPI_IOCont|
  00268	e59b1004	 ldr         r1, [r11, #4]
  0026c	e3510000	 cmp         r1, #0
  00270	0afffff4	 beq         |$LN53@SPI_IOCont|

; 2236 :         }
; 2237 : 
; 2238 :         bRetVal = SPI_WaitForAsyncWriteReadComplete(context, outSize, pOutBuffer);

  00274	e1a00007	 mov         r0, r7
  00278	eb000000	 bl          SPI_WaitForAsyncWriteReadComplete

; 2239 :         break;

  0027c	ea0000c0	 b           |$LN125@SPI_IOCont|
  00280		 |$LN72@SPI_IOCont|

; 2234 :             SetLastError(ERROR_INVALID_PARAMETER);
; 2235 :             break;

  00280	e3a03822	 mov         r3, #0x22, 16

; 2145 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_IOControl: "
; 2146 :             L"Incorrect context paramer\r\n"
; 2147 :         ));
; 2148 :         goto clean;
; 2149 :     }
; 2150 :     
; 2151 :     //Get Device
; 2152 :     pDevice = pInstance->pDevice;
; 2153 : 
; 2154 :     switch (dwCode) {

  00284	e3833e81	 orr         r3, r3, #0x81, 28
  00288	e1550003	 cmp         r5, r3
  0028c	0a000010	 beq         |$LN31@SPI_IOCont|
  00290	e59f335c	 ldr         r3, [pc, #0x35C]
  00294	e1550003	 cmp         r5, r3
  00298	0a000005	 beq         |$LN30@SPI_IOCont|
  0029c	e59f334c	 ldr         r3, [pc, #0x34C]
  002a0	e1550003	 cmp         r5, r3
  002a4	1a000028	 bne         |$LN1@SPI_IOCont|

; 2252 : 
; 2253 :     case IOCTL_SPI_UNLOCK_CTRL: 
; 2254 :         bRetVal = SPI_UnlockController(context);

  002a8	e1a00007	 mov         r0, r7
  002ac	eb000000	 bl          SPI_UnlockController

; 2255 :         break;

  002b0	ea0000b3	 b           |$LN125@SPI_IOCont|
  002b4		 |$LN30@SPI_IOCont|

; 2244 : 
; 2245 :     case IOCTL_SPI_LOCK_CTRL: 
; 2246 :         if (pInBuffer == NULL || inSize != sizeof(DWORD)) {

  002b4	e3560000	 cmp         r6, #0
  002b8	0affffe2	 beq         |$LN53@SPI_IOCont|
  002bc	e3580004	 cmp         r8, #4
  002c0	1affffe0	 bne         |$LN53@SPI_IOCont|

; 2247 :             SetLastError(ERROR_INVALID_PARAMETER);
; 2248 :             break;
; 2249 :         }
; 2250 :         bRetVal = SPI_LockController(context,*(DWORD*)pInBuffer);

  002c4	e5961000	 ldr         r1, [r6]
  002c8	e1a00007	 mov         r0, r7
  002cc	eb000000	 bl          SPI_LockController

; 2251 :         break;

  002d0	ea0000ab	 b           |$LN125@SPI_IOCont|
  002d4		 |$LN31@SPI_IOCont|

; 2240 : 
; 2241 :     case IOCTL_SPI_SET_SLAVEMODE:
; 2242 :         bRetVal = SPI_SetSlaveMode(context);

  002d4	e1a00007	 mov         r0, r7
  002d8	eb000000	 bl          SPI_SetSlaveMode

; 2243 :         break;

  002dc	ea0000a8	 b           |$LN125@SPI_IOCont|
  002e0		 |$LN26@SPI_IOCont|

; 2256 :     case IOCTL_SPI_ENABLE_CHANNEL: 
; 2257 :         bRetVal = SPI_EnableChannel(context);

  002e0	e1a00007	 mov         r0, r7
  002e4	eb000000	 bl          SPI_EnableChannel

; 2258 :         break;

  002e8	ea0000a5	 b           |$LN125@SPI_IOCont|
  002ec		 |$LN71@SPI_IOCont|
  002ec	e3a03822	 mov         r3, #0x22, 16

; 2145 :         DEBUGMSG(ZONE_ERROR, (L"ERROR: SPI_IOControl: "
; 2146 :             L"Incorrect context paramer\r\n"
; 2147 :         ));
; 2148 :         goto clean;
; 2149 :     }
; 2150 :     
; 2151 :     //Get Device
; 2152 :     pDevice = pInstance->pDevice;
; 2153 : 
; 2154 :     switch (dwCode) {

  002f0	e3833e82	 orr         r3, r3, #0x82, 28
  002f4	e1550003	 cmp         r5, r3
  002f8	0a00009f	 beq         |$LN25@SPI_IOCont|
  002fc	e3a03832	 mov         r3, #0x32, 16
  00300	e3833a01	 orr         r3, r3, #1, 20
  00304	e1550003	 cmp         r5, r3
  00308	0a00007e	 beq         |$LN16@SPI_IOCont|
  0030c	e59f32d8	 ldr         r3, [pc, #0x2D8]
  00310	e1550003	 cmp         r5, r3
  00314	0a000069	 beq         |$LN4@SPI_IOCont|
  00318	e59f32c8	 ldr         r3, [pc, #0x2C8]
  0031c	e1550003	 cmp         r5, r3
  00320	0a00004d	 beq         |$LN9@SPI_IOCont|
  00324	e59f32b8	 ldr         r3, [pc, #0x2B8]
  00328	e1550003	 cmp         r5, r3
  0032c	0a000038	 beq         |$LN13@SPI_IOCont|
  00330	e3a03112	 mov         r3, #0x12, 2
  00334	e3833b82	 orr         r3, r3, #0x82, 22
  00338	e1550003	 cmp         r5, r3
  0033c	0a000013	 beq         |$LN24@SPI_IOCont|
  00340	e59f3298	 ldr         r3, [pc, #0x298]
  00344	e1550003	 cmp         r5, r3
  00348	0a000009	 beq         |$LN19@SPI_IOCont|
  0034c		 |$LN1@SPI_IOCont|

; 2398 :                 }
; 2399 :             }     
; 2400 :         break;
; 2401 :   
; 2402 :     default:
; 2403 :         ERRORMSG(1, (TEXT("SPI: Unknown IOCTL_xxx(0x%0.8X) \r\n"), dwCode));

  0034c	e59f1288	 ldr         r1, [pc, #0x288]
  00350	e59f0280	 ldr         r0, [pc, #0x280]
  00354	e3a03c09	 mov         r3, #9, 24
  00358	e3832063	 orr         r2, r3, #0x63
  0035c	eb000000	 bl          NKDbgPrintfW
  00360	e59f026c	 ldr         r0, [pc, #0x26C]
  00364	e1a01005	 mov         r1, r5
  00368	eb000000	 bl          NKDbgPrintfW

; 2164 :             goto clean;

  0036c	e3a02000	 mov         r2, #0
  00370	ea000084	 b           |$clean$45391|
  00374		 |$LN19@SPI_IOCont|

; 2298 :         }
; 2299 :         break;
; 2300 : 
; 2301 :     case IOCTL_CONTEXT_RESTORE:
; 2302 :         if (pDevice->pActiveInstance != NULL)

  00374	e5943288	 ldr         r3, [r4, #0x288]
  00378	e3530000	 cmp         r3, #0
  0037c	0a000081	 beq         |$clean$45391|

; 2303 :             {
; 2304 :             ContextRestore((SPI_INSTANCE*)pDevice->pActiveInstance);

  00380	e1a00003	 mov         r0, r3
  00384	eb000000	 bl          ContextRestore

; 2164 :             goto clean;

  00388	e3a02000	 mov         r2, #0
  0038c	ea00007d	 b           |$clean$45391|
  00390		 |$LN24@SPI_IOCont|

; 2261 :         break;
; 2262 :   
; 2263 : 
; 2264 :     case IOCTL_DVFS_OPPNOTIFY:
; 2265 :         {
; 2266 :             DWORD i = 0;
; 2267 :             IOCTL_DVFS_OPPNOTIFY_IN *pIn = (IOCTL_DVFS_OPPNOTIFY_IN*)pInBuffer;
; 2268 : 
; 2269 :             if (pIn->ffInfo & DVFS_CORE1_PRE_NOTICE)

  00390	e5963004	 ldr         r3, [r6, #4]
  00394	e3a05000	 mov         r5, #0
  00398	e3130001	 tst         r3, #1

; 2270 :             {
; 2271 :             pDevice->bDVFSActive = TRUE;
; 2272 :                 ResetEvent(pDevice->hDVFSInactiveEvent);                

  0039c	e594004c	 ldr         r0, [r4, #0x4C]

; 2261 :         break;
; 2262 :   
; 2263 : 
; 2264 :     case IOCTL_DVFS_OPPNOTIFY:
; 2265 :         {
; 2266 :             DWORD i = 0;
; 2267 :             IOCTL_DVFS_OPPNOTIFY_IN *pIn = (IOCTL_DVFS_OPPNOTIFY_IN*)pInBuffer;
; 2268 : 
; 2269 :             if (pIn->ffInfo & DVFS_CORE1_PRE_NOTICE)

  003a0	0a000007	 beq         |$LN23@SPI_IOCont|

; 2270 :             {
; 2271 :             pDevice->bDVFSActive = TRUE;
; 2272 :                 ResetEvent(pDevice->hDVFSInactiveEvent);                

  003a4	e3a03001	 mov         r3, #1
  003a8	e3a01002	 mov         r1, #2
  003ac	e5843044	 str         r3, [r4, #0x44]
  003b0	eb000000	 bl          EventModify

; 2273 :             CheckAndHaltAllDma(pInstance, TRUE);

  003b4	e3a01001	 mov         r1, #1
  003b8	e1a00007	 mov         r0, r7
  003bc	eb000000	 bl          CheckAndHaltAllDma

; 2274 :             }
; 2275 :             else

  003c0	ea000008	 b           |$LN110@SPI_IOCont|
  003c4		 |$LN23@SPI_IOCont|

; 2276 :             {
; 2277 :             pDevice->bDVFSActive = FALSE;
; 2278 :                 SetEvent(pDevice->hDVFSInactiveEvent);

  003c4	e3a03000	 mov         r3, #0
  003c8	e3a01003	 mov         r1, #3
  003cc	e5843044	 str         r3, [r4, #0x44]
  003d0	eb000000	 bl          EventModify

; 2279 :             CheckAndHaltAllDma(pInstance, FALSE);

  003d4	e5974004	 ldr         r4, [r7, #4]
  003d8	e2840f97	 add         r0, r4, #0x97, 30
  003dc	eb000000	 bl          EnterCriticalSection
  003e0	e2840f97	 add         r0, r4, #0x97, 30
  003e4	eb000000	 bl          LeaveCriticalSection
  003e8		 |$LN110@SPI_IOCont|

; 2280 :             }
; 2281 :         bRetVal = TRUE;
; 2282 : 
; 2283 :             
; 2284 :             DEBUGMSG( ZONE_ERROR, (L"SPI: DVFS Notification: ffInfo=0x%08X, dwCount=%d\r\n",
; 2285 :                 pIn->ffInfo, pIn->dwCount));
; 2286 : 
; 2287 :             while (i < pIn->dwCount)

  003e8	e5963008	 ldr         r3, [r6, #8]
  003ec	e3a02001	 mov         r2, #1
  003f0	e3530000	 cmp         r3, #0
  003f4	9a000063	 bls         |$clean$45391|
  003f8		 |$LL21@SPI_IOCont|

; 2288 :         {
; 2289 :                 pIn->dwCount--;

  003f8	e5963008	 ldr         r3, [r6, #8]

; 2290 :                 DEBUGMSG( ZONE_ERROR, (L"...SPI(new): voltDomain=%d, opp=%d\r\n",
; 2291 :                     pIn->rgOppInfo[i].domain, pIn->rgOppInfo[i].newOpp));
; 2292 : 
; 2293 :                 DEBUGMSG( ZONE_ERROR, (L"...SPI(old): voltDomain=%d, opp=%d\r\n",
; 2294 :                     pIn->rgOppInfo[i].domain, pIn->rgOppInfo[i].oldOpp));
; 2295 :                 ++i;

  003fc	e2855001	 add         r5, r5, #1
  00400	e2433001	 sub         r3, r3, #1
  00404	e5863008	 str         r3, [r6, #8]
  00408	e1550003	 cmp         r5, r3
  0040c	3afffff9	 bcc         |$LL21@SPI_IOCont|

; 2296 :             }
; 2297 :             break;

  00410	ea00005c	 b           |$clean$45391|
  00414		 |$LN13@SPI_IOCont|

; 2331 :                     }
; 2332 :             }
; 2333 :         break;
; 2334 : 
; 2335 :     case IOCTL_POWER_QUERY: 
; 2336 :         if (pOutBuffer && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  00414	e59b1000	 ldr         r1, [r11]
  00418	e3510000	 cmp         r1, #0
  0041c	0a000059	 beq         |$clean$45391|
  00420	e59b3004	 ldr         r3, [r11, #4]
  00424	e3530004	 cmp         r3, #4
  00428	3a000056	 bcc         |$clean$45391|
  0042c		 |$LN85@SPI_IOCont|

; 2337 :             {
; 2338 :             __try 
; 2339 :                 {
; 2340 :                 CEDEVICE_POWER_STATE ReqDx = *(PCEDEVICE_POWER_STATE)pOutBuffer;

  0042c	e5913000	 ldr         r3, [r1]

; 2341 : 
; 2342 :                 if (VALID_DX(ReqDx)) 

  00430	e3530004	 cmp         r3, #4

; 2343 :                     {
; 2344 :                     bRetVal = TRUE;

  00434	93a02001	 movls       r2, #1
  00438	950b2060	 strls       r2, [r11, #-0x60]
  0043c		 |$LN86@SPI_IOCont|

; 2345 :                     }
; 2346 : 
; 2347 :                 }

  0043c	ea000051	 b           |$clean$45391|
  00440		 |$LN82@SPI_IOCont|

; 2349 :                 {
; 2350 :                 RETAILMSG(ZONE_ERROR, (L"Exception in spi ioctl\r\n"));

  00440	e59f3184	 ldr         r3, [pc, #0x184]
  00444	e5933440	 ldr         r3, [r3, #0x440]
  00448	e3130001	 tst         r3, #1
  0044c	159f017c	 ldrne       r0, [pc, #0x17C]
  00450	1b000000	 blne        NKDbgPrintfW
  00454	e51b2060	 ldr         r2, [r11, #-0x60]
  00458	ea00004a	 b           |$clean$45391|
  0045c		 |$LN9@SPI_IOCont|

; 2351 :                 }
; 2352 :             }
; 2353 :         break;
; 2354 : 
; 2355 :     case IOCTL_POWER_SET: 
; 2356 :         if (pOutBuffer && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  0045c	e59b1000	 ldr         r1, [r11]
  00460	e3510000	 cmp         r1, #0
  00464	0a000047	 beq         |$clean$45391|
  00468	e59b3004	 ldr         r3, [r11, #4]
  0046c	e3530004	 cmp         r3, #4
  00470	3a000044	 bcc         |$clean$45391|
  00474		 |$LN92@SPI_IOCont|

; 2357 :             {
; 2358 :             __try 
; 2359 :                 {
; 2360 :                 CEDEVICE_POWER_STATE newPowerState = *(PCEDEVICE_POWER_STATE)pOutBuffer;

  00474	e5915000	 ldr         r5, [r1]

; 2361 : 
; 2362 :                 // SPI clocks are enabled during read/write and disabled after
; 2363 :                 // nActivityTimeout duration. 
; 2364 :                 // In D4 request wait untill the SPIPowerTimerThread puts the device 
; 2365 :                 // in D4 state
; 2366 :                 if (newPowerState == D4)

  00478	e3550004	 cmp         r5, #4
  0047c	1a000004	 bne         |$LN5@SPI_IOCont|

; 2367 :                     {
; 2368 :                     if (pDevice->powerState != D4)

  00480	e5943034	 ldr         r3, [r4, #0x34]
  00484	e3530004	 cmp         r3, #4

; 2369 :                         {
; 2370 :                         // Wait till the SPI device is put to OFF state
; 2371 :                         WaitForSingleObject(pDevice->hDeviceOffEvent, INFINITE);

  00488	1594028c	 ldrne       r0, [r4, #0x28C]
  0048c	13e01000	 mvnne       r1, #0
  00490	1b000000	 blne        WaitForSingleObject
  00494		 |$LN5@SPI_IOCont|

; 2372 :                         }
; 2373 :                     }
; 2374 :                 
; 2375 :                 pDevice->systemState = newPowerState;

  00494	e5845290	 str         r5, [r4, #0x290]

; 2376 :                 bRetVal = TRUE;

  00498	e3a02001	 mov         r2, #1
  0049c	e50b2060	 str         r2, [r11, #-0x60]
  004a0		 |$LN93@SPI_IOCont|

; 2377 :                 }

  004a0	ea000038	 b           |$clean$45391|
  004a4		 |$LN89@SPI_IOCont|

; 2379 :                 {
; 2380 :                 RETAILMSG(ZONE_ERROR, (L"Exception in spi ioctl\r\n"));

  004a4	e59f3120	 ldr         r3, [pc, #0x120]
  004a8	e5933440	 ldr         r3, [r3, #0x440]
  004ac	e3130001	 tst         r3, #1
  004b0	159f0118	 ldrne       r0, [pc, #0x118]
  004b4	1b000000	 blne        NKDbgPrintfW
  004b8	e51b2060	 ldr         r2, [r11, #-0x60]
  004bc	ea000031	 b           |$clean$45391|
  004c0		 |$LN4@SPI_IOCont|

; 2381 :                 }
; 2382 :         }
; 2383 :         break;
; 2384 : 
; 2385 :     // gets the current device power state
; 2386 :     case IOCTL_POWER_GET: 
; 2387 :         if (pOutBuffer != NULL && outSize >= sizeof(CEDEVICE_POWER_STATE)) 

  004c0	e59b1000	 ldr         r1, [r11]
  004c4	e3510000	 cmp         r1, #0
  004c8	0a00002e	 beq         |$clean$45391|
  004cc	e59b3004	 ldr         r3, [r11, #4]
  004d0	e3530004	 cmp         r3, #4
  004d4	3a00002b	 bcc         |$clean$45391|
  004d8		 |$LN99@SPI_IOCont|

; 2388 :             {
; 2389 :             __try 
; 2390 :                 {
; 2391 :                 *(PCEDEVICE_POWER_STATE)pOutBuffer = pDevice->powerState;

  004d8	e5943034	 ldr         r3, [r4, #0x34]
  004dc	e5813000	 str         r3, [r1]

; 2392 : 
; 2393 :                 bRetVal = TRUE;

  004e0	e3a02001	 mov         r2, #1
  004e4	e50b2060	 str         r2, [r11, #-0x60]
  004e8		 |$LN100@SPI_IOCont|

; 2394 :                 }

  004e8	ea000026	 b           |$clean$45391|
  004ec		 |$LN96@SPI_IOCont|

; 2396 :                 {
; 2397 :                 RETAILMSG(ZONE_ERROR, (L"Exception in spi ioctl\r\n"));

  004ec	e59f30d8	 ldr         r3, [pc, #0xD8]
  004f0	e5933440	 ldr         r3, [r3, #0x440]
  004f4	e3130001	 tst         r3, #1
  004f8	159f00d0	 ldrne       r0, [pc, #0xD0]
  004fc	1b000000	 blne        NKDbgPrintfW
  00500	e51b2060	 ldr         r2, [r11, #-0x60]
  00504	ea00001f	 b           |$clean$45391|
  00508		 |$LN16@SPI_IOCont|

; 2305 :             }
; 2306 :         else
; 2307 :             {
; 2308 :             DEBUGMSG( ZONE_ERROR, (L"SPI: IOCTL_CONTEXT_RESTORE_NOTIFY FAILED\r\n"));
; 2309 :             }
; 2310 :         break;
; 2311 : 
; 2312 :     case IOCTL_POWER_CAPABILITIES: 
; 2313 :         if (pOutBuffer && outSize >= sizeof (POWER_CAPABILITIES) && 
; 2314 :             pOutSize) 

  00508	e59b4000	 ldr         r4, [r11]
  0050c	e3540000	 cmp         r4, #0
  00510	0a00001c	 beq         |$clean$45391|
  00514	e59b3004	 ldr         r3, [r11, #4]
  00518	e3530030	 cmp         r3, #0x30
  0051c	3a000019	 bcc         |$clean$45391|
  00520	e59b5008	 ldr         r5, [r11, #8]
  00524	e3550000	 cmp         r5, #0
  00528	0a000016	 beq         |$clean$45391|
  0052c		 |$LN78@SPI_IOCont|

; 2315 :             {
; 2316 :                 __try 
; 2317 :                     {
; 2318 :                     PPOWER_CAPABILITIES pPowerCaps;
; 2319 :                     pPowerCaps = (PPOWER_CAPABILITIES)pOutBuffer;
; 2320 :      
; 2321 :                     // Only supports D0 and D4 states
; 2322 :                     memset(pPowerCaps, 0, sizeof(*pPowerCaps));

  0052c	e3a02030	 mov         r2, #0x30
  00530	e3a01000	 mov         r1, #0
  00534	e1a00004	 mov         r0, r4
  00538	eb000000	 bl          memset

; 2323 :                     pPowerCaps->DeviceDx = DX_MASK(D0)|DX_MASK(D4);;

  0053c	e3a03011	 mov         r3, #0x11
  00540	e5c43000	 strb        r3, [r4]

; 2324 :                     *pOutSize = sizeof(*pPowerCaps);

  00544	e3a03030	 mov         r3, #0x30
  00548	e5853000	 str         r3, [r5]

; 2325 :                     
; 2326 :                     bRetVal = TRUE;

  0054c	e3a02001	 mov         r2, #1
  00550	e50b2060	 str         r2, [r11, #-0x60]
  00554		 |$LN79@SPI_IOCont|

; 2327 :                     }

  00554	ea00000b	 b           |$clean$45391|
  00558		 |$LN75@SPI_IOCont|

; 2329 :                     {
; 2330 :                     RETAILMSG(ZONE_ERROR, (L"exception in spi ioctl\r\n"));

  00558	e59f306c	 ldr         r3, [pc, #0x6C]
  0055c	e5933440	 ldr         r3, [r3, #0x440]
  00560	e3130001	 tst         r3, #1
  00564	159f005c	 ldrne       r0, [pc, #0x5C]
  00568	1b000000	 blne        NKDbgPrintfW
  0056c	e51b2060	 ldr         r2, [r11, #-0x60]
  00570	ea000004	 b           |$clean$45391|
  00574		 |$LN124@SPI_IOCont|

; 2404 :         break;
; 2405 :     }
; 2406 : 
; 2407 : clean:
; 2408 :     DEBUGMSG(ZONE_FUNCTION, (L"-SPI_IOControl(rc = %d)\r\n", bRetVal));
; 2409 :     return bRetVal;

  00574	e51b205c	 ldr         r2, [r11, #-0x5C]
  00578	ea000002	 b           |$clean$45391|
  0057c		 |$LN25@SPI_IOCont|

; 2259 :     case IOCTL_SPI_DISABLE_CHANNEL: 
; 2260 :         bRetVal = SPI_DisableChannel(context);

  0057c	e1a00007	 mov         r0, r7
  00580	eb000000	 bl          SPI_DisableChannel
  00584		 |$LN125@SPI_IOCont|
  00584	e1a02000	 mov         r2, r0
  00588		 |$clean$45391|

; 2410 : }

  00588	e1a00002	 mov         r0, r2
  0058c	e24bd028	 sub         sp, r11, #0x28
  00590	e89d6ff0	 ldmia       sp, {r4 - r11, sp, lr}
  00594	e12fff1e	 bx          lr

			 ENDP  ; |SPI_IOControl|

  00598		 |$LN74@SPI_IOCont|
  00598		 |$LN129@SPI_IOCont|

; 2328 :                 __except(EXCEPTION_EXECUTE_HANDLER) 

  00598	e52de004	 str         lr, [sp, #-4]!
  0059c		 |$LN77@SPI_IOCont|
  0059c		 |$LN135@SPI_IOCont|
  0059c	e3a00001	 mov         r0, #1
  005a0		 |$LN76@SPI_IOCont|
  005a0	e49df004	 ldr         pc, [sp], #4
  005a4		 |$LN136@SPI_IOCont|
  005a4		 |$LN95@SPI_IOCont|
  005a4		 |$LN131@SPI_IOCont|

; 2395 :             __except(EXCEPTION_EXECUTE_HANDLER) 

  005a4	e52de004	 str         lr, [sp, #-4]!
  005a8		 |$LN98@SPI_IOCont|
  005a8		 |$LN137@SPI_IOCont|
  005a8	e3a00001	 mov         r0, #1
  005ac		 |$LN97@SPI_IOCont|
  005ac	e49df004	 ldr         pc, [sp], #4
  005b0		 |$LN138@SPI_IOCont|
  005b0		 |$LN88@SPI_IOCont|
  005b0		 |$LN132@SPI_IOCont|

; 2378 :             __except(EXCEPTION_EXECUTE_HANDLER) 

  005b0	e52de004	 str         lr, [sp, #-4]!
  005b4		 |$LN91@SPI_IOCont|
  005b4		 |$LN139@SPI_IOCont|
  005b4	e3a00001	 mov         r0, #1
  005b8		 |$LN90@SPI_IOCont|
  005b8	e49df004	 ldr         pc, [sp], #4
  005bc		 |$LN140@SPI_IOCont|
  005bc		 |$LN81@SPI_IOCont|
  005bc		 |$LN133@SPI_IOCont|

; 2348 :             __except(EXCEPTION_EXECUTE_HANDLER) 

  005bc	e52de004	 str         lr, [sp, #-4]!
  005c0		 |$LN84@SPI_IOCont|
  005c0		 |$LN141@SPI_IOCont|
  005c0	e3a00001	 mov         r0, #1
  005c4		 |$LN83@SPI_IOCont|
  005c4	e49df004	 ldr         pc, [sp], #4
  005c8		 |$LN143@SPI_IOCont|
  005c8		 |$LN144@SPI_IOCont|
  005c8	00000000	 DCD         |??_C@_1DC@IGLIIDFJ@?$AAe?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  005cc		 |$LN145@SPI_IOCont|
  005cc	00000000	 DCD         |dpCurSettings|
  005d0		 |$LN146@SPI_IOCont|
  005d0	00000000	 DCD         |??_C@_1DC@NKOBOHOD@?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AA?5?$AAi?$AAn?$AA?5?$AAs?$AAp?$AAi?$AA?5?$AAi?$AAo?$AAc?$AAt?$AAl?$AA?$AN?$AA?6?$AA?$AA@|
  005d4		 |$LN147@SPI_IOCont|
  005d4	00000000	 DCD         |??_C@_1EG@CDHLAJIG@?$AAS?$AAP?$AAI?$AA?3?$AA?5?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAI?$AAO?$AAC?$AAT?$AAL?$AA_?$AAx?$AAx?$AAx?$AA?$CI?$AA0?$AAx?$AA?$CF?$AA0?$AA?4?$AA8?$AAX?$AA?$CJ?$AA?5@|
  005d8		 |$LN148@SPI_IOCont|
  005d8	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  005dc		 |$LN149@SPI_IOCont|
  005dc	00000000	 DCD         |??_C@_1IO@MLHBGINH@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  005e0		 |$LN150@SPI_IOCont|
  005e0	80038140	 DCD         0x80038140
  005e4		 |$LN151@SPI_IOCont|
  005e4	0032100c	 DCD         0x32100c
  005e8		 |$LN152@SPI_IOCont|
  005e8	00321008	 DCD         0x321008
  005ec		 |$LN153@SPI_IOCont|
  005ec	00321004	 DCD         0x321004
  005f0		 |$LN154@SPI_IOCont|
  005f0	00220818	 DCD         0x220818
  005f4		 |$LN155@SPI_IOCont|
  005f4	00220814	 DCD         0x220814
  005f8		 |$LN156@SPI_IOCont|
  005f8	00000000	 DCD         |SPI_DisableChannel|
  005fc		 |$LN157@SPI_IOCont|
  005fc	00000000	 DCD         |SPI_EnableChannel|
  00600		 |$LN158@SPI_IOCont|
  00600	00000000	 DCD         |SPI_UnlockController|
  00604		 |$LN159@SPI_IOCont|
  00604	00000000	 DCD         |SPI_LockController|
  00608		 |$LN160@SPI_IOCont|
  00608	00000000	 DCD         |SPI_SetSlaveMode|
  0060c		 |$LN161@SPI_IOCont|
  0060c	00000000	 DCD         |SPI_WaitForAsyncWriteReadComplete|
  00610		 |$LN162@SPI_IOCont|
  00610	00000000	 DCD         |SPI_AsyncWriteRead|
  00614		 |$LN163@SPI_IOCont|
  00614	00000000	 DCD         |SPI_WriteRead|
  00618		 |$LN164@SPI_IOCont|
  00618	00000000	 DCD         |SPI_Write|
  0061c		 |$LN165@SPI_IOCont|
  0061c	00000000	 DCD         |SPI_Read|
  00620		 |$LN166@SPI_IOCont|
  00620	00000000	 DCD         |SPI_Configure|
  00624		 |$LN167@SPI_IOCont|
  00624	00000000	 DCD         |DEVICE_IFC_SPI_GUID|
  00628		 |$LN168@SPI_IOCont|
  00628	00220808	 DCD         0x220808
  0062c		 |$LN169@SPI_IOCont|
  0062c	00220804	 DCD         0x220804
  00630		 |$LN170@SPI_IOCont|
  00630	0022080c	 DCD         0x22080c
  00634		 |$LN171@SPI_IOCont|
  00634	0022081c	 DCD         0x22081c
  00638		 |$LN172@SPI_IOCont|
  00638	73706949	 DCD         0x73706949
  0063c		 |$LN142@SPI_IOCont|
  0063c		 |$LN134@SPI_IOCont|
	END
