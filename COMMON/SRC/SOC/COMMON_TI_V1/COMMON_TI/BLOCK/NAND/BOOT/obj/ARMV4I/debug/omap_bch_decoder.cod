; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BLOCK\NAND\omap_bch_decoder.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|decode_bch|
	IMPORT	|memset|

  00000			 AREA	 |.pdata|, PDATA
|$T480|	DCD	|$LN6@decode_bch|
	DCD	0x40002f04
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\block\nand\omap_bch_decoder.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |decode_bch| PROC

; 346  : {

  00000		 |$LN6@decode_bch|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd070	 sub         sp, sp, #0x70
  00010		 |$M477|

; 347  : 	int no_of_err;
; 348  : 	unsigned int syn[16] = {0,};	/* 16 Syndromes */

  00010	e3a03000	 mov         r3, #0
  00014	e58d3024	 str         r3, [sp, #0x24]
  00018	e3a0203c	 mov         r2, #0x3C
  0001c	e3a01000	 mov         r1, #0
  00020	e28d0028	 add         r0, sp, #0x28
  00024	eb000000	 bl          memset

; 349  : 	unsigned int err_poly[8] = {0,};

  00028	e3a03000	 mov         r3, #0
  0002c	e58d3004	 str         r3, [sp, #4]
  00030	e3a0201c	 mov         r2, #0x1C
  00034	e3a01000	 mov         r1, #0
  00038	e28d0008	 add         r0, sp, #8
  0003c	eb000000	 bl          memset

; 350  : 	/* Coefficients to the error polynomial
; 351  : 	 * ELP(x) = 1 + err0.x + err1.x^2 + ... + err7.x^8
; 352  : 	 */
; 353  : 
; 354  : 	/* Decoting involes three steps
; 355  : 	 * 1. Compute the syndrom from teh received codeword,
; 356  : 	 * 2. Find the error location polynomial from a set of equations
; 357  : 	 *     derived from the syndrome,
; 358  : 	 * 3. Use the error location polynomial to identify errants bits,
; 359  : 	 *
; 360  : 	 * And correcttion done by bit flips using error locaiton and expected
; 361  : 	 * to be outseide of this implementation.
; 362  : 	 */
; 363  : 	syndrome(select_4_8, ecc, syn);

  00040	e28d2024	 add         r2, sp, #0x24
  00044	e59d107c	 ldr         r1, [sp, #0x7C]
  00048	e59d0078	 ldr         r0, [sp, #0x78]
  0004c	eb000000	 bl          syndrome

; 364  : 	no_of_err = berlekamp(select_4_8, syn, err_poly);

  00050	e28d2004	 add         r2, sp, #4
  00054	e28d1024	 add         r1, sp, #0x24
  00058	e59d0078	 ldr         r0, [sp, #0x78]
  0005c	eb000000	 bl          berlekamp
  00060	e58d0068	 str         r0, [sp, #0x68]
  00064	e59d3068	 ldr         r3, [sp, #0x68]
  00068	e58d3000	 str         r3, [sp]

; 365  : 	if (no_of_err <= (4 << select_4_8))

  0006c	e59d2078	 ldr         r2, [sp, #0x78]
  00070	e3a03004	 mov         r3, #4
  00074	e1a02213	 mov         r2, r3, lsl r2
  00078	e59d3000	 ldr         r3, [sp]
  0007c	e1530002	 cmp         r3, r2
  00080	ca000007	 bgt         |$LN1@decode_bch|

; 366  : 		no_of_err = chien(select_4_8, no_of_err, err_poly, err_loc);

  00084	e59d3080	 ldr         r3, [sp, #0x80]
  00088	e28d2004	 add         r2, sp, #4
  0008c	e59d1000	 ldr         r1, [sp]
  00090	e59d0078	 ldr         r0, [sp, #0x78]
  00094	eb000000	 bl          chien
  00098	e58d006c	 str         r0, [sp, #0x6C]
  0009c	e59d306c	 ldr         r3, [sp, #0x6C]
  000a0	e58d3000	 str         r3, [sp]
  000a4		 |$LN1@decode_bch|

; 367  : 
; 368  : 	return no_of_err;

  000a4	e59d3000	 ldr         r3, [sp]
  000a8	e58d3064	 str         r3, [sp, #0x64]

; 369  : }

  000ac	e59d0064	 ldr         r0, [sp, #0x64]
  000b0	e28dd070	 add         sp, sp, #0x70
  000b4	e89d6000	 ldmia       sp, {sp, lr}
  000b8	e12fff1e	 bx          lr
  000bc		 |$M478|

			 ENDP  ; |decode_bch|


  00008			 AREA	 |.pdata|, PDATA
|$T488|	DCD	|$LN18@chien|
	DCD	0x4000fd04
; Function compile flags: /Odtp

  000bc			 AREA	 |.text|, CODE, ARM

  000bc		 |chien| PROC

; 65   : {

  000bc		 |$LN18@chien|
  000bc	e1a0c00d	 mov         r12, sp
  000c0	e92d000f	 stmdb       sp!, {r0 - r3}
  000c4	e92d5000	 stmdb       sp!, {r12, lr}
  000c8	e24dd07c	 sub         sp, sp, #0x7C
  000cc		 |$M485|

; 66   : 	int i, count; /* Number of dectected errors */
; 67   : 	/* Contains accumulation of evaluation at x^i (i:1->8) */
; 68   : 	unsigned int gammas[8] = {0};

  000cc	e3a03000	 mov         r3, #0
  000d0	e58d3014	 str         r3, [sp, #0x14]
  000d4	e3a0201c	 mov         r2, #0x1C
  000d8	e3a01000	 mov         r1, #0
  000dc	e28d0018	 add         r0, sp, #0x18
  000e0	eb000000	 bl          memset

; 69   : 	unsigned int alpha;
; 70   : 	unsigned int bit, ecc_bits;
; 71   : 	unsigned int elp_sum;
; 72   : 
; 73   : 	ecc_bits = (select_4_8 == 0) ? 52 : 104;

  000e4	e59d3084	 ldr         r3, [sp, #0x84]
  000e8	e3530000	 cmp         r3, #0
  000ec	1a000002	 bne         |$LN14@chien|
  000f0	e3a03034	 mov         r3, #0x34
  000f4	e58d303c	 str         r3, [sp, #0x3C]
  000f8	ea000001	 b           |$LN15@chien|
  000fc		 |$LN14@chien|
  000fc	e3a03068	 mov         r3, #0x68
  00100	e58d303c	 str         r3, [sp, #0x3C]
  00104		 |$LN15@chien|
  00104	e59d303c	 ldr         r3, [sp, #0x3C]
  00108	e58d3008	 str         r3, [sp, #8]

; 74   : 
; 75   : 	/* Start evaluation at Alpha**8192 and decreasing */
; 76   : 	for (i = 0; i < 8; i++)

  0010c	e3a03000	 mov         r3, #0
  00110	e58d300c	 str         r3, [sp, #0xC]
  00114	ea000002	 b           |$LN11@chien|
  00118		 |$LN10@chien|
  00118	e59d300c	 ldr         r3, [sp, #0xC]
  0011c	e2833001	 add         r3, r3, #1
  00120	e58d300c	 str         r3, [sp, #0xC]
  00124		 |$LN11@chien|
  00124	e59d300c	 ldr         r3, [sp, #0xC]
  00128	e3530008	 cmp         r3, #8
  0012c	aa00000c	 bge         |$LN9@chien|

; 77   : 		gammas[i] = err[i];

  00130	e59d100c	 ldr         r1, [sp, #0xC]
  00134	e3a03004	 mov         r3, #4
  00138	e0020391	 mul         r2, r1, r3
  0013c	e59d308c	 ldr         r3, [sp, #0x8C]
  00140	e0830002	 add         r0, r3, r2
  00144	e59d100c	 ldr         r1, [sp, #0xC]
  00148	e3a03004	 mov         r3, #4
  0014c	e0020391	 mul         r2, r1, r3
  00150	e28d3014	 add         r3, sp, #0x14
  00154	e0832002	 add         r2, r3, r2
  00158	e5903000	 ldr         r3, [r0]
  0015c	e5823000	 str         r3, [r2]
  00160	eaffffec	 b           |$LN10@chien|
  00164		 |$LN9@chien|

; 78   : 
; 79   : 	count = 0;

  00164	e3a03000	 mov         r3, #0
  00168	e58d3004	 str         r3, [sp, #4]

; 80   : 	for (i = 1; (i <= nn) && (count < err_nums); i++) {

  0016c	e3a03001	 mov         r3, #1
  00170	e58d300c	 str         r3, [sp, #0xC]
  00174	ea000002	 b           |$LN8@chien|
  00178		 |$LN7@chien|
  00178	e59d300c	 ldr         r3, [sp, #0xC]
  0017c	e2833001	 add         r3, r3, #1
  00180	e58d300c	 str         r3, [sp, #0xC]
  00184		 |$LN8@chien|
  00184	e59d200c	 ldr         r2, [sp, #0xC]
  00188	e3a03c1f	 mov         r3, #0x1F, 24
  0018c	e38330ff	 orr         r3, r3, #0xFF
  00190	e1520003	 cmp         r2, r3
  00194	ca0000b9	 bgt         |$LN6@chien|
  00198	e59d2004	 ldr         r2, [sp, #4]
  0019c	e59d3088	 ldr         r3, [sp, #0x88]
  001a0	e1520003	 cmp         r2, r3
  001a4	aa0000b5	 bge         |$LN6@chien|

; 81   : 
; 82   : 		/* Result of evaluation at root */
; 83   : 		elp_sum = 1 ^ gammas[0] ^ gammas[1] ^
; 84   : 				gammas[2] ^ gammas[3] ^
; 85   : 				gammas[4] ^ gammas[5] ^
; 86   : 				gammas[6] ^ gammas[7];

  001a8	e59d3014	 ldr         r3, [sp, #0x14]
  001ac	e2232001	 eor         r2, r3, #1
  001b0	e59d3018	 ldr         r3, [sp, #0x18]
  001b4	e0222003	 eor         r2, r2, r3
  001b8	e59d301c	 ldr         r3, [sp, #0x1C]
  001bc	e0222003	 eor         r2, r2, r3
  001c0	e59d3020	 ldr         r3, [sp, #0x20]
  001c4	e0222003	 eor         r2, r2, r3
  001c8	e59d3024	 ldr         r3, [sp, #0x24]
  001cc	e0222003	 eor         r2, r2, r3
  001d0	e59d3028	 ldr         r3, [sp, #0x28]
  001d4	e0222003	 eor         r2, r2, r3
  001d8	e59d302c	 ldr         r3, [sp, #0x2C]
  001dc	e0222003	 eor         r2, r2, r3
  001e0	e59d3030	 ldr         r3, [sp, #0x30]
  001e4	e0223003	 eor         r3, r2, r3
  001e8	e58d3010	 str         r3, [sp, #0x10]

; 87   : 
; 88   : 		alpha = PPP >> 1;

  001ec	e3a03a01	 mov         r3, #1, 20
  001f0	e383300d	 orr         r3, r3, #0xD
  001f4	e58d3000	 str         r3, [sp]

; 89   : 		gammas[0] = mpy_mod_gf(gammas[0], alpha);

  001f8	e59d1000	 ldr         r1, [sp]
  001fc	e59d0014	 ldr         r0, [sp, #0x14]
  00200	eb000000	 bl          mpy_mod_gf
  00204	e58d0040	 str         r0, [sp, #0x40]
  00208	e59d3040	 ldr         r3, [sp, #0x40]
  0020c	e58d3014	 str         r3, [sp, #0x14]

; 90   : 		alpha = mpy_mod_gf(alpha, (PPP >> 1));		/* x alphha^-2 */

  00210	e3a01a01	 mov         r1, #1, 20
  00214	e381100d	 orr         r1, r1, #0xD
  00218	e59d0000	 ldr         r0, [sp]
  0021c	eb000000	 bl          mpy_mod_gf
  00220	e58d0044	 str         r0, [sp, #0x44]
  00224	e59d3044	 ldr         r3, [sp, #0x44]
  00228	e58d3000	 str         r3, [sp]

; 91   : 		gammas[1] = mpy_mod_gf(gammas[1], alpha);

  0022c	e59d1000	 ldr         r1, [sp]
  00230	e59d0018	 ldr         r0, [sp, #0x18]
  00234	eb000000	 bl          mpy_mod_gf
  00238	e58d0048	 str         r0, [sp, #0x48]
  0023c	e59d3048	 ldr         r3, [sp, #0x48]
  00240	e58d3018	 str         r3, [sp, #0x18]

; 92   : 		alpha = mpy_mod_gf(alpha, (PPP >> 1));		/* x alphha^-2 */

  00244	e3a01a01	 mov         r1, #1, 20
  00248	e381100d	 orr         r1, r1, #0xD
  0024c	e59d0000	 ldr         r0, [sp]
  00250	eb000000	 bl          mpy_mod_gf
  00254	e58d004c	 str         r0, [sp, #0x4C]
  00258	e59d304c	 ldr         r3, [sp, #0x4C]
  0025c	e58d3000	 str         r3, [sp]

; 93   : 		gammas[2] = mpy_mod_gf(gammas[2], alpha);

  00260	e59d1000	 ldr         r1, [sp]
  00264	e59d001c	 ldr         r0, [sp, #0x1C]
  00268	eb000000	 bl          mpy_mod_gf
  0026c	e58d0050	 str         r0, [sp, #0x50]
  00270	e59d3050	 ldr         r3, [sp, #0x50]
  00274	e58d301c	 str         r3, [sp, #0x1C]

; 94   : 		alpha = mpy_mod_gf(alpha, (PPP >> 1));		/* x alphha^-3 */

  00278	e3a01a01	 mov         r1, #1, 20
  0027c	e381100d	 orr         r1, r1, #0xD
  00280	e59d0000	 ldr         r0, [sp]
  00284	eb000000	 bl          mpy_mod_gf
  00288	e58d0054	 str         r0, [sp, #0x54]
  0028c	e59d3054	 ldr         r3, [sp, #0x54]
  00290	e58d3000	 str         r3, [sp]

; 95   : 		gammas[3] = mpy_mod_gf(gammas[3], alpha);

  00294	e59d1000	 ldr         r1, [sp]
  00298	e59d0020	 ldr         r0, [sp, #0x20]
  0029c	eb000000	 bl          mpy_mod_gf
  002a0	e58d0058	 str         r0, [sp, #0x58]
  002a4	e59d3058	 ldr         r3, [sp, #0x58]
  002a8	e58d3020	 str         r3, [sp, #0x20]

; 96   : 		alpha = mpy_mod_gf(alpha, (PPP >> 1));		/* x alphha^-4 */

  002ac	e3a01a01	 mov         r1, #1, 20
  002b0	e381100d	 orr         r1, r1, #0xD
  002b4	e59d0000	 ldr         r0, [sp]
  002b8	eb000000	 bl          mpy_mod_gf
  002bc	e58d005c	 str         r0, [sp, #0x5C]
  002c0	e59d305c	 ldr         r3, [sp, #0x5C]
  002c4	e58d3000	 str         r3, [sp]

; 97   : 		gammas[4] = mpy_mod_gf(gammas[4], alpha);

  002c8	e59d1000	 ldr         r1, [sp]
  002cc	e59d0024	 ldr         r0, [sp, #0x24]
  002d0	eb000000	 bl          mpy_mod_gf
  002d4	e58d0060	 str         r0, [sp, #0x60]
  002d8	e59d3060	 ldr         r3, [sp, #0x60]
  002dc	e58d3024	 str         r3, [sp, #0x24]

; 98   : 		alpha = mpy_mod_gf(alpha, (PPP >> 1));		/* x alphha^-5 */

  002e0	e3a01a01	 mov         r1, #1, 20
  002e4	e381100d	 orr         r1, r1, #0xD
  002e8	e59d0000	 ldr         r0, [sp]
  002ec	eb000000	 bl          mpy_mod_gf
  002f0	e58d0064	 str         r0, [sp, #0x64]
  002f4	e59d3064	 ldr         r3, [sp, #0x64]
  002f8	e58d3000	 str         r3, [sp]

; 99   : 		gammas[5] = mpy_mod_gf(gammas[5], alpha);

  002fc	e59d1000	 ldr         r1, [sp]
  00300	e59d0028	 ldr         r0, [sp, #0x28]
  00304	eb000000	 bl          mpy_mod_gf
  00308	e58d0068	 str         r0, [sp, #0x68]
  0030c	e59d3068	 ldr         r3, [sp, #0x68]
  00310	e58d3028	 str         r3, [sp, #0x28]

; 100  : 		alpha = mpy_mod_gf(alpha, (PPP >> 1));		/* x alphha^-6 */

  00314	e3a01a01	 mov         r1, #1, 20
  00318	e381100d	 orr         r1, r1, #0xD
  0031c	e59d0000	 ldr         r0, [sp]
  00320	eb000000	 bl          mpy_mod_gf
  00324	e58d006c	 str         r0, [sp, #0x6C]
  00328	e59d306c	 ldr         r3, [sp, #0x6C]
  0032c	e58d3000	 str         r3, [sp]

; 101  : 		gammas[6] = mpy_mod_gf(gammas[6], alpha);

  00330	e59d1000	 ldr         r1, [sp]
  00334	e59d002c	 ldr         r0, [sp, #0x2C]
  00338	eb000000	 bl          mpy_mod_gf
  0033c	e58d0070	 str         r0, [sp, #0x70]
  00340	e59d3070	 ldr         r3, [sp, #0x70]
  00344	e58d302c	 str         r3, [sp, #0x2C]

; 102  : 		alpha = mpy_mod_gf(alpha, (PPP >> 1));		/* x alphha^-7 */

  00348	e3a01a01	 mov         r1, #1, 20
  0034c	e381100d	 orr         r1, r1, #0xD
  00350	e59d0000	 ldr         r0, [sp]
  00354	eb000000	 bl          mpy_mod_gf
  00358	e58d0074	 str         r0, [sp, #0x74]
  0035c	e59d3074	 ldr         r3, [sp, #0x74]
  00360	e58d3000	 str         r3, [sp]

; 103  : 		gammas[7] = mpy_mod_gf(gammas[7], alpha);

  00364	e59d1000	 ldr         r1, [sp]
  00368	e59d0030	 ldr         r0, [sp, #0x30]
  0036c	eb000000	 bl          mpy_mod_gf
  00370	e58d0078	 str         r0, [sp, #0x78]
  00374	e59d3078	 ldr         r3, [sp, #0x78]
  00378	e58d3030	 str         r3, [sp, #0x30]

; 104  : 
; 105  : 		if (elp_sum == 0) {

  0037c	e59d3010	 ldr         r3, [sp, #0x10]
  00380	e3530000	 cmp         r3, #0
  00384	1a00003c	 bne         |$LN5@chien|

; 106  : 			/* calculate location */
; 107  : 			bit = ((i-1) & ~7)|(7-((i-1) & 7));

  00388	e59d300c	 ldr         r3, [sp, #0xC]
  0038c	e2432001	 sub         r2, r3, #1
  00390	e3e03007	 mvn         r3, #7
  00394	e0022003	 and         r2, r2, r3
  00398	e59d300c	 ldr         r3, [sp, #0xC]
  0039c	e2433001	 sub         r3, r3, #1
  003a0	e2033007	 and         r3, r3, #7
  003a4	e2633007	 rsb         r3, r3, #7
  003a8	e1823003	 orr         r3, r2, r3
  003ac	e58d3034	 str         r3, [sp, #0x34]

; 108  : 			if ((select_4_8 == 0) && (i >= 2 * ecc_bits)) {

  003b0	e59d3084	 ldr         r3, [sp, #0x84]
  003b4	e3530000	 cmp         r3, #0
  003b8	1a000016	 bne         |$LN4@chien|
  003bc	e59d1008	 ldr         r1, [sp, #8]
  003c0	e3a03002	 mov         r3, #2
  003c4	e0020391	 mul         r2, r1, r3
  003c8	e59d300c	 ldr         r3, [sp, #0xC]
  003cc	e1530002	 cmp         r3, r2
  003d0	3a000010	 bcc         |$LN4@chien|

; 109  : 				location[count++] = kk_shorten - (bit - 2 * ecc_bits) - 1;

  003d4	e59d1008	 ldr         r1, [sp, #8]
  003d8	e3a03002	 mov         r3, #2
  003dc	e0020391	 mul         r2, r1, r3
  003e0	e59d3034	 ldr         r3, [sp, #0x34]
  003e4	e0433002	 sub         r3, r3, r2
  003e8	e2633a01	 rsb         r3, r3, #1, 20
  003ec	e2430001	 sub         r0, r3, #1
  003f0	e59d1004	 ldr         r1, [sp, #4]
  003f4	e3a03004	 mov         r3, #4
  003f8	e0020391	 mul         r2, r1, r3
  003fc	e59d3090	 ldr         r3, [sp, #0x90]
  00400	e0833002	 add         r3, r3, r2
  00404	e5830000	 str         r0, [r3]
  00408	e59d3004	 ldr         r3, [sp, #4]
  0040c	e2833001	 add         r3, r3, #1
  00410	e58d3004	 str         r3, [sp, #4]
  00414	ea000018	 b           |$LN3@chien|
  00418		 |$LN4@chien|

; 110  : 			} else if ((select_4_8 == 1) && (i >= 2 * ecc_bits)) {

  00418	e59d3084	 ldr         r3, [sp, #0x84]
  0041c	e3530001	 cmp         r3, #1
  00420	1a000015	 bne         |$LN2@chien|
  00424	e59d1008	 ldr         r1, [sp, #8]
  00428	e3a03002	 mov         r3, #2
  0042c	e0020391	 mul         r2, r1, r3
  00430	e59d300c	 ldr         r3, [sp, #0xC]
  00434	e1530002	 cmp         r3, r2
  00438	3a00000f	 bcc         |$LN2@chien|

; 111  : 				location[count++] = kk_shorten - (bit - 2 * ecc_bits) - 1;

  0043c	e59d1008	 ldr         r1, [sp, #8]
  00440	e3a03002	 mov         r3, #2
  00444	e0020391	 mul         r2, r1, r3
  00448	e59d3034	 ldr         r3, [sp, #0x34]
  0044c	e0433002	 sub         r3, r3, r2
  00450	e2633a01	 rsb         r3, r3, #1, 20
  00454	e2430001	 sub         r0, r3, #1
  00458	e59d1004	 ldr         r1, [sp, #4]
  0045c	e3a03004	 mov         r3, #4
  00460	e0020391	 mul         r2, r1, r3
  00464	e59d3090	 ldr         r3, [sp, #0x90]
  00468	e0833002	 add         r3, r3, r2
  0046c	e5830000	 str         r0, [r3]
  00470	e59d3004	 ldr         r3, [sp, #4]
  00474	e2833001	 add         r3, r3, #1
  00478	e58d3004	 str         r3, [sp, #4]
  0047c		 |$LN2@chien|
  0047c		 |$LN3@chien|
  0047c		 |$LN5@chien|

; 112  : 			}
; 113  : 		}
; 114  : 	}

  0047c	eaffff3d	 b           |$LN7@chien|
  00480		 |$LN6@chien|

; 115  : 
; 116  : 	/* Failure: No. of detected errors != No. or corrected errors */
; 117  : 	if (count != err_nums) {

  00480	e59d2004	 ldr         r2, [sp, #4]
  00484	e59d3088	 ldr         r3, [sp, #0x88]
  00488	e1520003	 cmp         r2, r3
  0048c	0a000001	 beq         |$LN1@chien|

; 118  : 		count = -1;

  00490	e3e03000	 mvn         r3, #0
  00494	e58d3004	 str         r3, [sp, #4]
  00498		 |$LN1@chien|

; 119  : 	}
; 120  : 	
; 121  : 	return count;

  00498	e59d3004	 ldr         r3, [sp, #4]
  0049c	e58d3038	 str         r3, [sp, #0x38]

; 122  : }

  004a0	e59d0038	 ldr         r0, [sp, #0x38]
  004a4	e28dd07c	 add         sp, sp, #0x7C
  004a8	e89d6000	 ldmia       sp, {sp, lr}
  004ac	e12fff1e	 bx          lr
  004b0		 |$M486|

			 ENDP  ; |chien|


  00010			 AREA	 |.pdata|, PDATA
|$T494|	DCD	|$LN11@mpy_mod_gf|
	DCD	0x40003804
; Function compile flags: /Odtp

  004b0			 AREA	 |.text|, CODE, ARM

  004b0		 |mpy_mod_gf| PROC

; 32   : {

  004b0		 |$LN11@mpy_mod_gf|
  004b0	e1a0c00d	 mov         r12, sp
  004b4	e92d0003	 stmdb       sp!, {r0, r1}
  004b8	e92d5000	 stmdb       sp!, {r12, lr}
  004bc	e24dd010	 sub         sp, sp, #0x10
  004c0		 |$M491|

; 33   : 	unsigned int R = 0;

  004c0	e3a03000	 mov         r3, #0
  004c4	e58d3008	 str         r3, [sp, #8]

; 34   : 	unsigned int R1 = 0;

  004c8	e3a03000	 mov         r3, #0
  004cc	e58d3000	 str         r3, [sp]

; 35   : 	unsigned int k = 0;

  004d0	e3a03000	 mov         r3, #0
  004d4	e58d3004	 str         r3, [sp, #4]

; 36   : 
; 37   : 	for (k = 0; k < mm; k++) {

  004d8	e3a03000	 mov         r3, #0
  004dc	e58d3004	 str         r3, [sp, #4]
  004e0	ea000002	 b           |$LN6@mpy_mod_gf|
  004e4		 |$LN5@mpy_mod_gf|
  004e4	e59d3004	 ldr         r3, [sp, #4]
  004e8	e2833001	 add         r3, r3, #1
  004ec	e58d3004	 str         r3, [sp, #4]
  004f0		 |$LN6@mpy_mod_gf|
  004f0	e59d3004	 ldr         r3, [sp, #4]
  004f4	e353000d	 cmp         r3, #0xD
  004f8	2a00001e	 bcs         |$LN4@mpy_mod_gf|

; 38   : 
; 39   : 		R = (R << 1) & 0x1FFE;

  004fc	e59d3008	 ldr         r3, [sp, #8]
  00500	e1a02083	 mov         r2, r3, lsl #1
  00504	e3a03c1f	 mov         r3, #0x1F, 24
  00508	e38330fe	 orr         r3, r3, #0xFE
  0050c	e0023003	 and         r3, r2, r3
  00510	e58d3008	 str         r3, [sp, #8]

; 40   : 		if (R1 == 1)

  00514	e59d3000	 ldr         r3, [sp]
  00518	e3530001	 cmp         r3, #1
  0051c	1a000002	 bne         |$LN3@mpy_mod_gf|

; 41   : 			R ^= P;

  00520	e59d3008	 ldr         r3, [sp, #8]
  00524	e223301b	 eor         r3, r3, #0x1B
  00528	e58d3008	 str         r3, [sp, #8]
  0052c		 |$LN3@mpy_mod_gf|

; 42   : 
; 43   : 		if (((a >> (POLY - k)) & 1) == 1)

  0052c	e59d3004	 ldr         r3, [sp, #4]
  00530	e263200c	 rsb         r2, r3, #0xC
  00534	e59d3018	 ldr         r3, [sp, #0x18]
  00538	e1a03233	 mov         r3, r3, lsr r2
  0053c	e2033001	 and         r3, r3, #1
  00540	e3530001	 cmp         r3, #1
  00544	1a000003	 bne         |$LN2@mpy_mod_gf|

; 44   : 			R ^= b;

  00548	e59d2008	 ldr         r2, [sp, #8]
  0054c	e59d301c	 ldr         r3, [sp, #0x1C]
  00550	e0223003	 eor         r3, r2, r3
  00554	e58d3008	 str         r3, [sp, #8]
  00558		 |$LN2@mpy_mod_gf|

; 45   : 
; 46   : 		if (k < POLY)

  00558	e59d3004	 ldr         r3, [sp, #4]
  0055c	e353000c	 cmp         r3, #0xC
  00560	2a000003	 bcs         |$LN1@mpy_mod_gf|

; 47   : 			R1 = (R >> POLY) & 1;

  00564	e59d3008	 ldr         r3, [sp, #8]
  00568	e1a03983	 mov         r3, r3, lsl #19
  0056c	e1a03fa3	 mov         r3, r3, lsr #31
  00570	e58d3000	 str         r3, [sp]
  00574		 |$LN1@mpy_mod_gf|

; 48   : 	}

  00574	eaffffda	 b           |$LN5@mpy_mod_gf|
  00578		 |$LN4@mpy_mod_gf|

; 49   : 	return R;

  00578	e59d3008	 ldr         r3, [sp, #8]
  0057c	e58d300c	 str         r3, [sp, #0xC]

; 50   : }

  00580	e59d000c	 ldr         r0, [sp, #0xC]
  00584	e28dd010	 add         sp, sp, #0x10
  00588	e89d6000	 ldmia       sp, {sp, lr}
  0058c	e12fff1e	 bx          lr
  00590		 |$M492|

			 ENDP  ; |mpy_mod_gf|


  00018			 AREA	 |.pdata|, PDATA
|$T502|	DCD	|$LN33@berlekamp|
	DCD	0x40016104
; Function compile flags: /Odtp

  00590			 AREA	 |.text|, CODE, ARM

  00590		 |berlekamp| PROC

; 130  : {

  00590		 |$LN33@berlekamp|
  00590	e1a0c00d	 mov         r12, sp
  00594	e92d0007	 stmdb       sp!, {r0 - r2}
  00598	e92d5000	 stmdb       sp!, {r12, lr}
  0059c	e24dd0d4	 sub         sp, sp, #0xD4
  005a0		 |$M499|

; 131  : 	unsigned int loop, iteration;
; 132  : 	unsigned int LL = 0;		/* Detected errors */

  005a0	e3a03000	 mov         r3, #0
  005a4	e58d3008	 str         r3, [sp, #8]

; 133  : 	unsigned int d = 0;	/* Distance between Syndromes and ELP[n](z) */

  005a8	e3a03000	 mov         r3, #0
  005ac	e58d30b4	 str         r3, [sp, #0xB4]

; 134  : 	unsigned int invd = 0;		/* Inverse of d */

  005b0	e3a03000	 mov         r3, #0
  005b4	e58d3068	 str         r3, [sp, #0x68]

; 135  : 	/* Intermediate ELP[n](z).
; 136  : 	 * Final ELP[n](z) is Error Location Polynomial
; 137  : 	 */
; 138  : 	unsigned int gammas[16] = {0};

  005b8	e3a03000	 mov         r3, #0
  005bc	e58d3028	 str         r3, [sp, #0x28]
  005c0	e3a0203c	 mov         r2, #0x3C
  005c4	e3a01000	 mov         r1, #0
  005c8	e28d002c	 add         r0, sp, #0x2C
  005cc	eb000000	 bl          memset

; 139  : 	/* Intermediate normalized ELP[n](z) : D[n](z) */
; 140  : 	unsigned int D[16] = {0};

  005d0	e3a03000	 mov         r3, #0
  005d4	e58d3074	 str         r3, [sp, #0x74]
  005d8	e3a0203c	 mov         r2, #0x3C
  005dc	e3a01000	 mov         r1, #0
  005e0	e28d0078	 add         r0, sp, #0x78
  005e4	eb000000	 bl          memset

; 141  : 	/* Temporary value that holds an ELP[n](z) coefficient */
; 142  : 	unsigned int next_gamma = 0;

  005e8	e3a03000	 mov         r3, #0
  005ec	e58d301c	 str         r3, [sp, #0x1C]

; 143  : 
; 144  : 	int e = 0;

  005f0	e3a03000	 mov         r3, #0
  005f4	e58d30bc	 str         r3, [sp, #0xBC]

; 145  : 	unsigned int sign = 0;

  005f8	e3a03000	 mov         r3, #0
  005fc	e58d3024	 str         r3, [sp, #0x24]

; 146  : 	unsigned int u = 0;

  00600	e3a03000	 mov         r3, #0
  00604	e58d3014	 str         r3, [sp, #0x14]

; 147  : 	unsigned int v = 0;

  00608	e3a03000	 mov         r3, #0
  0060c	e58d3000	 str         r3, [sp]

; 148  : 	unsigned int C1 = 0, C2 = 0;

  00610	e3a03000	 mov         r3, #0
  00614	e58d300c	 str         r3, [sp, #0xC]
  00618	e3a03000	 mov         r3, #0
  0061c	e58d3004	 str         r3, [sp, #4]

; 149  : 	unsigned int ss = 0;

  00620	e3a03000	 mov         r3, #0
  00624	e58d30b8	 str         r3, [sp, #0xB8]

; 150  : 	unsigned int tmp_v = 0, tmp_s = 0;

  00628	e3a03000	 mov         r3, #0
  0062c	e58d3070	 str         r3, [sp, #0x70]
  00630	e3a03000	 mov         r3, #0
  00634	e58d306c	 str         r3, [sp, #0x6C]

; 151  : 	unsigned int tmp_poly;
; 152  : 
; 153  : 	/*-------------- Step 0 ------------------*/
; 154  : 	for (loop = 0; loop < 16; loop++)

  00638	e3a03000	 mov         r3, #0
  0063c	e58d3018	 str         r3, [sp, #0x18]
  00640	ea000002	 b           |$LN26@berlekamp|
  00644		 |$LN25@berlekamp|
  00644	e59d3018	 ldr         r3, [sp, #0x18]
  00648	e2833001	 add         r3, r3, #1
  0064c	e58d3018	 str         r3, [sp, #0x18]
  00650		 |$LN26@berlekamp|
  00650	e59d3018	 ldr         r3, [sp, #0x18]
  00654	e3530010	 cmp         r3, #0x10
  00658	2a000007	 bcs         |$LN24@berlekamp|

; 155  : 		gammas[loop] = 0;

  0065c	e59d1018	 ldr         r1, [sp, #0x18]
  00660	e3a03004	 mov         r3, #4
  00664	e0020391	 mul         r2, r1, r3
  00668	e28d3028	 add         r3, sp, #0x28
  0066c	e0832002	 add         r2, r3, r2
  00670	e3a03000	 mov         r3, #0
  00674	e5823000	 str         r3, [r2]
  00678	eafffff1	 b           |$LN25@berlekamp|
  0067c		 |$LN24@berlekamp|

; 156  : 	gammas[0] = 1;

  0067c	e3a03001	 mov         r3, #1
  00680	e58d3028	 str         r3, [sp, #0x28]

; 157  : 	D[1] = 1;

  00684	e3a03001	 mov         r3, #1
  00688	e58d3078	 str         r3, [sp, #0x78]

; 158  : 
; 159  : 	iteration = 0;

  0068c	e3a03000	 mov         r3, #0
  00690	e58d3020	 str         r3, [sp, #0x20]

; 160  : 	LL = 0;

  00694	e3a03000	 mov         r3, #0
  00698	e58d3008	 str         r3, [sp, #8]
  0069c		 |$LN23@berlekamp|

; 161  : 	while ((iteration < ((select_4_8+1)*2*4)) &&
; 162  : 			(LL <= ((select_4_8+1)*4))) {

  0069c	e59d30dc	 ldr         r3, [sp, #0xDC]
  006a0	e2832001	 add         r2, r3, #1
  006a4	e3a03002	 mov         r3, #2
  006a8	e0010392	 mul         r1, r2, r3
  006ac	e3a03004	 mov         r3, #4
  006b0	e0020391	 mul         r2, r1, r3
  006b4	e59d3020	 ldr         r3, [sp, #0x20]
  006b8	e1530002	 cmp         r3, r2
  006bc	2a0000f7	 bcs         |$LN22@berlekamp|
  006c0	e59d30dc	 ldr         r3, [sp, #0xDC]
  006c4	e2831001	 add         r1, r3, #1
  006c8	e3a03004	 mov         r3, #4
  006cc	e0020391	 mul         r2, r1, r3
  006d0	e59d3008	 ldr         r3, [sp, #8]
  006d4	e1530002	 cmp         r3, r2
  006d8	8a0000f0	 bhi         |$LN22@berlekamp|

; 163  : 
; 164  : 		d = 0;

  006dc	e3a03000	 mov         r3, #0
  006e0	e58d30b4	 str         r3, [sp, #0xB4]

; 165  : 		/* Step: 0 */
; 166  : 		for (loop = 0; loop <= LL; loop++) {

  006e4	e3a03000	 mov         r3, #0
  006e8	e58d3018	 str         r3, [sp, #0x18]
  006ec	ea000002	 b           |$LN21@berlekamp|
  006f0		 |$LN20@berlekamp|
  006f0	e59d3018	 ldr         r3, [sp, #0x18]
  006f4	e2833001	 add         r3, r3, #1
  006f8	e58d3018	 str         r3, [sp, #0x18]
  006fc		 |$LN21@berlekamp|
  006fc	e59d2018	 ldr         r2, [sp, #0x18]
  00700	e59d3008	 ldr         r3, [sp, #8]
  00704	e1520003	 cmp         r2, r3
  00708	8a000016	 bhi         |$LN19@berlekamp|

; 167  : 			tmp_poly = mpy_mod_gf(
; 168  : 					gammas[loop], synd[iteration - loop]);

  0070c	e59d2020	 ldr         r2, [sp, #0x20]
  00710	e59d3018	 ldr         r3, [sp, #0x18]
  00714	e0421003	 sub         r1, r2, r3
  00718	e3a03004	 mov         r3, #4
  0071c	e0020391	 mul         r2, r1, r3
  00720	e59d30e0	 ldr         r3, [sp, #0xE0]
  00724	e0833002	 add         r3, r3, r2
  00728	e5931000	 ldr         r1, [r3]
  0072c	e59d0018	 ldr         r0, [sp, #0x18]
  00730	e3a03004	 mov         r3, #4
  00734	e0020390	 mul         r2, r0, r3
  00738	e28d3028	 add         r3, sp, #0x28
  0073c	e0833002	 add         r3, r3, r2
  00740	e5930000	 ldr         r0, [r3]
  00744	eb000000	 bl          mpy_mod_gf
  00748	e58d00c4	 str         r0, [sp, #0xC4]
  0074c	e59d30c4	 ldr         r3, [sp, #0xC4]
  00750	e58d3010	 str         r3, [sp, #0x10]

; 169  : 			d ^= tmp_poly;

  00754	e59d20b4	 ldr         r2, [sp, #0xB4]
  00758	e59d3010	 ldr         r3, [sp, #0x10]
  0075c	e0223003	 eor         r3, r2, r3
  00760	e58d30b4	 str         r3, [sp, #0xB4]

; 170  : 		}

  00764	eaffffe1	 b           |$LN20@berlekamp|
  00768		 |$LN19@berlekamp|

; 171  : 
; 172  : 		/* Step 1: 1 cycle only to perform inversion */
; 173  : 		v = d << 1;

  00768	e59d30b4	 ldr         r3, [sp, #0xB4]
  0076c	e1a03083	 mov         r3, r3, lsl #1
  00770	e58d3000	 str         r3, [sp]

; 174  : 		e = -1;

  00774	e3e03000	 mvn         r3, #0
  00778	e58d30bc	 str         r3, [sp, #0xBC]

; 175  : 		sign = 1;

  0077c	e3a03001	 mov         r3, #1
  00780	e58d3024	 str         r3, [sp, #0x24]

; 176  : 		ss = 0x2000;

  00784	e3a03a02	 mov         r3, #2, 20
  00788	e58d30b8	 str         r3, [sp, #0xB8]

; 177  : 		invd = 0;

  0078c	e3a03000	 mov         r3, #0
  00790	e58d3068	 str         r3, [sp, #0x68]

; 178  : 		u = PPP;

  00794	e3a03a02	 mov         r3, #2, 20
  00798	e383301b	 orr         r3, r3, #0x1B
  0079c	e58d3014	 str         r3, [sp, #0x14]

; 179  : 		for (loop = 0; (d != 0) && (loop <= (2 * POLY)); loop++) {

  007a0	e3a03000	 mov         r3, #0
  007a4	e58d3018	 str         r3, [sp, #0x18]
  007a8	ea000002	 b           |$LN18@berlekamp|
  007ac		 |$LN17@berlekamp|
  007ac	e59d3018	 ldr         r3, [sp, #0x18]
  007b0	e2833001	 add         r3, r3, #1
  007b4	e58d3018	 str         r3, [sp, #0x18]
  007b8		 |$LN18@berlekamp|
  007b8	e59d30b4	 ldr         r3, [sp, #0xB4]
  007bc	e3530000	 cmp         r3, #0
  007c0	0a00003e	 beq         |$LN16@berlekamp|
  007c4	e59d3018	 ldr         r3, [sp, #0x18]
  007c8	e3530018	 cmp         r3, #0x18
  007cc	8a00003b	 bhi         |$LN16@berlekamp|

; 180  : 			C1 = (v >> 13) & 1;

  007d0	e59d3000	 ldr         r3, [sp]
  007d4	e1a03903	 mov         r3, r3, lsl #18
  007d8	e1a03fa3	 mov         r3, r3, lsr #31
  007dc	e58d300c	 str         r3, [sp, #0xC]

; 181  : 			C2 = C1 & sign;

  007e0	e59d200c	 ldr         r2, [sp, #0xC]
  007e4	e59d3024	 ldr         r3, [sp, #0x24]
  007e8	e0023003	 and         r3, r2, r3
  007ec	e58d3004	 str         r3, [sp, #4]

; 182  : 
; 183  : 			sign ^= C2 ^ (e == 0);

  007f0	e59d30bc	 ldr         r3, [sp, #0xBC]
  007f4	e3530000	 cmp         r3, #0
  007f8	1a000002	 bne         |$LN29@berlekamp|
  007fc	e3a03001	 mov         r3, #1
  00800	e58d30c8	 str         r3, [sp, #0xC8]
  00804	ea000001	 b           |$LN30@berlekamp|
  00808		 |$LN29@berlekamp|
  00808	e3a03000	 mov         r3, #0
  0080c	e58d30c8	 str         r3, [sp, #0xC8]
  00810		 |$LN30@berlekamp|
  00810	e59d2004	 ldr         r2, [sp, #4]
  00814	e59d30c8	 ldr         r3, [sp, #0xC8]
  00818	e0222003	 eor         r2, r2, r3
  0081c	e59d3024	 ldr         r3, [sp, #0x24]
  00820	e0233002	 eor         r3, r3, r2
  00824	e58d3024	 str         r3, [sp, #0x24]

; 184  : 
; 185  : 			tmp_v = v;

  00828	e59d3000	 ldr         r3, [sp]
  0082c	e58d3070	 str         r3, [sp, #0x70]

; 186  : 			tmp_s = ss;

  00830	e59d30b8	 ldr         r3, [sp, #0xB8]
  00834	e58d306c	 str         r3, [sp, #0x6C]

; 187  : 
; 188  : 			if (C1 == 1) {

  00838	e59d300c	 ldr         r3, [sp, #0xC]
  0083c	e3530001	 cmp         r3, #1
  00840	1a000007	 bne         |$LN15@berlekamp|

; 189  : 				v ^= u;

  00844	e59d2000	 ldr         r2, [sp]
  00848	e59d3014	 ldr         r3, [sp, #0x14]
  0084c	e0223003	 eor         r3, r2, r3
  00850	e58d3000	 str         r3, [sp]

; 190  : 				ss ^= invd;

  00854	e59d20b8	 ldr         r2, [sp, #0xB8]
  00858	e59d3068	 ldr         r3, [sp, #0x68]
  0085c	e0223003	 eor         r3, r2, r3
  00860	e58d30b8	 str         r3, [sp, #0xB8]
  00864		 |$LN15@berlekamp|

; 191  : 			}
; 192  : 			v = (v << 1) & 0x3FFF;

  00864	e59d3000	 ldr         r3, [sp]
  00868	e1a02083	 mov         r2, r3, lsl #1
  0086c	e3a03c3f	 mov         r3, #0x3F, 24
  00870	e38330ff	 orr         r3, r3, #0xFF
  00874	e0023003	 and         r3, r2, r3
  00878	e58d3000	 str         r3, [sp]

; 193  : 			if (C2 == 1) {

  0087c	e59d3004	 ldr         r3, [sp, #4]
  00880	e3530001	 cmp         r3, #1
  00884	1a000006	 bne         |$LN14@berlekamp|

; 194  : 				u = tmp_v;

  00888	e59d3070	 ldr         r3, [sp, #0x70]
  0088c	e58d3014	 str         r3, [sp, #0x14]

; 195  : 				invd = tmp_s;

  00890	e59d306c	 ldr         r3, [sp, #0x6C]
  00894	e58d3068	 str         r3, [sp, #0x68]

; 196  : 				e = -e;

  00898	e59d30bc	 ldr         r3, [sp, #0xBC]
  0089c	e2633000	 rsb         r3, r3, #0
  008a0	e58d30bc	 str         r3, [sp, #0xBC]
  008a4		 |$LN14@berlekamp|

; 197  : 			}
; 198  : 			invd >>= 1;

  008a4	e59d3068	 ldr         r3, [sp, #0x68]
  008a8	e1a030a3	 mov         r3, r3, lsr #1
  008ac	e58d3068	 str         r3, [sp, #0x68]

; 199  : 			e--;

  008b0	e59d30bc	 ldr         r3, [sp, #0xBC]
  008b4	e2433001	 sub         r3, r3, #1
  008b8	e58d30bc	 str         r3, [sp, #0xBC]

; 200  : 		}

  008bc	eaffffba	 b           |$LN17@berlekamp|
  008c0		 |$LN16@berlekamp|

; 201  : 
; 202  : 		for (loop = 0; (d != 0) && (loop <= (iteration + 1)); loop++) {

  008c0	e3a03000	 mov         r3, #0
  008c4	e58d3018	 str         r3, [sp, #0x18]
  008c8	ea000002	 b           |$LN13@berlekamp|
  008cc		 |$LN12@berlekamp|
  008cc	e59d3018	 ldr         r3, [sp, #0x18]
  008d0	e2833001	 add         r3, r3, #1
  008d4	e58d3018	 str         r3, [sp, #0x18]
  008d8		 |$LN13@berlekamp|
  008d8	e59d30b4	 ldr         r3, [sp, #0xB4]
  008dc	e3530000	 cmp         r3, #0
  008e0	0a000050	 beq         |$LN11@berlekamp|
  008e4	e59d3020	 ldr         r3, [sp, #0x20]
  008e8	e2832001	 add         r2, r3, #1
  008ec	e59d3018	 ldr         r3, [sp, #0x18]
  008f0	e1530002	 cmp         r3, r2
  008f4	8a00004b	 bhi         |$LN11@berlekamp|

; 203  : 			/* Step 2
; 204  : 			 * Interleaved with Step 3, if L<(n-k)
; 205  : 			 * invd: Update of ELP[n](z) = ELP[n-1](z) - d.D[n-1](z)
; 206  : 			 */
; 207  : 
; 208  : 			/* Holds value of ELP coefficient until precedent
; 209  : 			 * value does not have to be used anymore
; 210  : 			 */
; 211  : 			tmp_poly = mpy_mod_gf(d, D[loop]);

  008f8	e59d1018	 ldr         r1, [sp, #0x18]
  008fc	e3a03004	 mov         r3, #4
  00900	e0020391	 mul         r2, r1, r3
  00904	e28d3074	 add         r3, sp, #0x74
  00908	e0833002	 add         r3, r3, r2
  0090c	e5931000	 ldr         r1, [r3]
  00910	e59d00b4	 ldr         r0, [sp, #0xB4]
  00914	eb000000	 bl          mpy_mod_gf
  00918	e58d00cc	 str         r0, [sp, #0xCC]
  0091c	e59d30cc	 ldr         r3, [sp, #0xCC]
  00920	e58d3010	 str         r3, [sp, #0x10]

; 212  : 
; 213  : 			next_gamma = gammas[loop] ^ tmp_poly;

  00924	e59d1018	 ldr         r1, [sp, #0x18]
  00928	e3a03004	 mov         r3, #4
  0092c	e0020391	 mul         r2, r1, r3
  00930	e28d3028	 add         r3, sp, #0x28
  00934	e0833002	 add         r3, r3, r2
  00938	e5932000	 ldr         r2, [r3]
  0093c	e59d3010	 ldr         r3, [sp, #0x10]
  00940	e0223003	 eor         r3, r2, r3
  00944	e58d301c	 str         r3, [sp, #0x1C]

; 214  : 			if ((2 * LL) < (iteration + 1)) {

  00948	e59d1008	 ldr         r1, [sp, #8]
  0094c	e3a03002	 mov         r3, #2
  00950	e0020391	 mul         r2, r1, r3
  00954	e59d3020	 ldr         r3, [sp, #0x20]
  00958	e2833001	 add         r3, r3, #1
  0095c	e1520003	 cmp         r2, r3
  00960	2a000000	 bcs         |$LN10@berlekamp|

; 215  : 				/* Interleaving with Step 3
; 216  : 				 * for parallelized update of ELP(z) and D(z)
; 217  : 				 */
; 218  : 			} else {

  00964	ea00000c	 b           |$LN9@berlekamp|
  00968		 |$LN10@berlekamp|

; 219  : 				/* Update of ELP(z) only -> stay in Step 2 */
; 220  : 				gammas[loop] = next_gamma;

  00968	e59d1018	 ldr         r1, [sp, #0x18]
  0096c	e3a03004	 mov         r3, #4
  00970	e0020391	 mul         r2, r1, r3
  00974	e28d3028	 add         r3, sp, #0x28
  00978	e0832002	 add         r2, r3, r2
  0097c	e59d301c	 ldr         r3, [sp, #0x1C]
  00980	e5823000	 str         r3, [r2]

; 221  : 				if (loop == (iteration + 1)) {

  00984	e59d3020	 ldr         r3, [sp, #0x20]
  00988	e2832001	 add         r2, r3, #1
  0098c	e59d3018	 ldr         r3, [sp, #0x18]
  00990	e1530002	 cmp         r3, r2
  00994	1a000000	 bne         |$LN8@berlekamp|

; 222  : 					/* to step 4 */
; 223  : 					break;

  00998	ea000022	 b           |$LN11@berlekamp|
  0099c		 |$LN8@berlekamp|
  0099c		 |$LN9@berlekamp|

; 224  : 				}
; 225  : 			}
; 226  : 
; 227  : 			/* Step 3
; 228  : 			 * Always interleaved with Step 2 (case when L<(n-k))
; 229  : 			 * Update of D[n-1](z) = ELP[n-1](z)/d
; 230  : 			 */
; 231  : 			D[loop] = mpy_mod_gf(gammas[loop], invd);

  0099c	e59d1068	 ldr         r1, [sp, #0x68]
  009a0	e59d0018	 ldr         r0, [sp, #0x18]
  009a4	e3a03004	 mov         r3, #4
  009a8	e0020390	 mul         r2, r0, r3
  009ac	e28d3028	 add         r3, sp, #0x28
  009b0	e0833002	 add         r3, r3, r2
  009b4	e5930000	 ldr         r0, [r3]
  009b8	eb000000	 bl          mpy_mod_gf
  009bc	e58d00d0	 str         r0, [sp, #0xD0]
  009c0	e59d1018	 ldr         r1, [sp, #0x18]
  009c4	e3a03004	 mov         r3, #4
  009c8	e0020391	 mul         r2, r1, r3
  009cc	e28d3074	 add         r3, sp, #0x74
  009d0	e0832002	 add         r2, r3, r2
  009d4	e59d30d0	 ldr         r3, [sp, #0xD0]
  009d8	e5823000	 str         r3, [r2]

; 232  : 
; 233  : 			/* Can safely update ELP[n](z) */
; 234  : 			gammas[loop] = next_gamma;

  009dc	e59d1018	 ldr         r1, [sp, #0x18]
  009e0	e3a03004	 mov         r3, #4
  009e4	e0020391	 mul         r2, r1, r3
  009e8	e28d3028	 add         r3, sp, #0x28
  009ec	e0832002	 add         r2, r3, r2
  009f0	e59d301c	 ldr         r3, [sp, #0x1C]
  009f4	e5823000	 str         r3, [r2]

; 235  : 
; 236  : 			if (loop == (iteration + 1)) {

  009f8	e59d3020	 ldr         r3, [sp, #0x20]
  009fc	e2832001	 add         r2, r3, #1
  00a00	e59d3018	 ldr         r3, [sp, #0x18]
  00a04	e1530002	 cmp         r3, r2
  00a08	1a000005	 bne         |$LN7@berlekamp|

; 237  : 				/* If update finished */
; 238  : 				LL = iteration - LL + 1;

  00a0c	e59d2020	 ldr         r2, [sp, #0x20]
  00a10	e59d3008	 ldr         r3, [sp, #8]
  00a14	e0423003	 sub         r3, r2, r3
  00a18	e2833001	 add         r3, r3, #1
  00a1c	e58d3008	 str         r3, [sp, #8]

; 239  : 				/* to step 4 */
; 240  : 				break;

  00a20	ea000000	 b           |$LN11@berlekamp|
  00a24		 |$LN7@berlekamp|

; 241  : 			}
; 242  : 			/* Else, interleaving to step 2*/
; 243  : 		}

  00a24	eaffffa8	 b           |$LN12@berlekamp|
  00a28		 |$LN11@berlekamp|

; 244  : 
; 245  : 		/* Step 4: Update D(z): i:0->L */
; 246  : 		/* Final update of D[n](z) = D[n](z).z*/
; 247  : 		for (loop = 0; loop < 15; loop++) /* Left Shift */

  00a28	e3a03000	 mov         r3, #0
  00a2c	e58d3018	 str         r3, [sp, #0x18]
  00a30	ea000002	 b           |$LN6@berlekamp|
  00a34		 |$LN5@berlekamp|
  00a34	e59d3018	 ldr         r3, [sp, #0x18]
  00a38	e2833001	 add         r3, r3, #1
  00a3c	e58d3018	 str         r3, [sp, #0x18]
  00a40		 |$LN6@berlekamp|
  00a40	e59d3018	 ldr         r3, [sp, #0x18]
  00a44	e353000f	 cmp         r3, #0xF
  00a48	2a00000e	 bcs         |$LN4@berlekamp|

; 248  : 			D[15 - loop] = D[14 - loop];

  00a4c	e59d3018	 ldr         r3, [sp, #0x18]
  00a50	e263100e	 rsb         r1, r3, #0xE
  00a54	e3a03004	 mov         r3, #4
  00a58	e0020391	 mul         r2, r1, r3
  00a5c	e28d3074	 add         r3, sp, #0x74
  00a60	e0830002	 add         r0, r3, r2
  00a64	e59d3018	 ldr         r3, [sp, #0x18]
  00a68	e263100f	 rsb         r1, r3, #0xF
  00a6c	e3a03004	 mov         r3, #4
  00a70	e0020391	 mul         r2, r1, r3
  00a74	e28d3074	 add         r3, sp, #0x74
  00a78	e0832002	 add         r2, r3, r2
  00a7c	e5903000	 ldr         r3, [r0]
  00a80	e5823000	 str         r3, [r2]
  00a84	eaffffea	 b           |$LN5@berlekamp|
  00a88		 |$LN4@berlekamp|

; 249  : 
; 250  : 		D[0] = 0;

  00a88	e3a03000	 mov         r3, #0
  00a8c	e58d3074	 str         r3, [sp, #0x74]

; 251  : 
; 252  : 		iteration++;

  00a90	e59d3020	 ldr         r3, [sp, #0x20]
  00a94	e2833001	 add         r3, r3, #1
  00a98	e58d3020	 str         r3, [sp, #0x20]

; 253  : 	} /* while */

  00a9c	eafffefe	 b           |$LN23@berlekamp|
  00aa0		 |$LN22@berlekamp|

; 254  : 
; 255  : 	/* Processing finished, copy ELP to final registers : 0->2t-1*/
; 256  : 	for (loop = 0; loop < 8; loop++)

  00aa0	e3a03000	 mov         r3, #0
  00aa4	e58d3018	 str         r3, [sp, #0x18]
  00aa8	ea000002	 b           |$LN3@berlekamp|
  00aac		 |$LN2@berlekamp|
  00aac	e59d3018	 ldr         r3, [sp, #0x18]
  00ab0	e2833001	 add         r3, r3, #1
  00ab4	e58d3018	 str         r3, [sp, #0x18]
  00ab8		 |$LN3@berlekamp|
  00ab8	e59d3018	 ldr         r3, [sp, #0x18]
  00abc	e3530008	 cmp         r3, #8
  00ac0	2a00000d	 bcs         |$LN1@berlekamp|

; 257  : 		err[loop] = gammas[loop+1];

  00ac4	e59d3018	 ldr         r3, [sp, #0x18]
  00ac8	e2831001	 add         r1, r3, #1
  00acc	e3a03004	 mov         r3, #4
  00ad0	e0020391	 mul         r2, r1, r3
  00ad4	e28d3028	 add         r3, sp, #0x28
  00ad8	e0830002	 add         r0, r3, r2
  00adc	e59d1018	 ldr         r1, [sp, #0x18]
  00ae0	e3a03004	 mov         r3, #4
  00ae4	e0020391	 mul         r2, r1, r3
  00ae8	e59d30e4	 ldr         r3, [sp, #0xE4]
  00aec	e0832002	 add         r2, r3, r2
  00af0	e5903000	 ldr         r3, [r0]
  00af4	e5823000	 str         r3, [r2]
  00af8	eaffffeb	 b           |$LN2@berlekamp|
  00afc		 |$LN1@berlekamp|

; 258  : 
; 259  : 	return LL;

  00afc	e59d3008	 ldr         r3, [sp, #8]
  00b00	e58d30c0	 str         r3, [sp, #0xC0]

; 260  : }

  00b04	e59d00c0	 ldr         r0, [sp, #0xC0]
  00b08	e28dd0d4	 add         sp, sp, #0xD4
  00b0c	e89d6000	 ldmia       sp, {sp, lr}
  00b10	e12fff1e	 bx          lr
  00b14		 |$M500|

			 ENDP  ; |berlekamp|

	IMPORT	|__rt_sdiv|

  00020			 AREA	 |.pdata|, PDATA
|$T508|	DCD	|$LN23@syndrome|
	DCD	0x4000e104
; Function compile flags: /Odtp

  00b14			 AREA	 |.text|, CODE, ARM

  00b14		 |syndrome| PROC

; 271  : {

  00b14		 |$LN23@syndrome|
  00b14	e1a0c00d	 mov         r12, sp
  00b18	e92d0007	 stmdb       sp!, {r0 - r2}
  00b1c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00b20	e24dd040	 sub         sp, sp, #0x40
  00b24		 |$M505|

; 272  : 	unsigned int k, l, t;
; 273  : 	unsigned int alpha_bit, R_bit;
; 274  : 	int ecc_pos, ecc_min;
; 275  : 
; 276  : 	/* 2t-1 = 15 (for t=8) minimal polynomials of the first 15 powers of a
; 277  : 	 * primitive elemmants of GF(m); Even powers minimal polynomials are
; 278  : 	 * duplicate of odd powers' minimal polynomials.
; 279  : 	 * Odd powers of alpha (1 to 15)
; 280  : 	 */
; 281  : 	unsigned int pow_alpha[8] = {0x0002, 0x0008, 0x0020, 0x0080,

  00b24	e3a03002	 mov         r3, #2
  00b28	e58d3000	 str         r3, [sp]
  00b2c	e3a03008	 mov         r3, #8
  00b30	e58d3004	 str         r3, [sp, #4]
  00b34	e3a03020	 mov         r3, #0x20
  00b38	e58d3008	 str         r3, [sp, #8]
  00b3c	e3a03080	 mov         r3, #0x80
  00b40	e58d300c	 str         r3, [sp, #0xC]

; 282  : 				 0x0200, 0x0800, 0x001B, 0x006C};

  00b44	e3a03c02	 mov         r3, #2, 24
  00b48	e58d3010	 str         r3, [sp, #0x10]
  00b4c	e3a03b02	 mov         r3, #2, 22
  00b50	e58d3014	 str         r3, [sp, #0x14]
  00b54	e3a0301b	 mov         r3, #0x1B
  00b58	e58d3018	 str         r3, [sp, #0x18]
  00b5c	e3a0306c	 mov         r3, #0x6C
  00b60	e58d301c	 str         r3, [sp, #0x1C]

; 283  : 
; 284  : 
; 285  : 	if (select_4_8 == 0) {

  00b64	e59d304c	 ldr         r3, [sp, #0x4C]
  00b68	e3530000	 cmp         r3, #0
  00b6c	1a000006	 bne         |$LN18@syndrome|

; 286  : 		t = 4;

  00b70	e3a03004	 mov         r3, #4
  00b74	e58d3038	 str         r3, [sp, #0x38]

; 287  : 		ecc_pos = 55; /* bits(52-bits): 55->4 */

  00b78	e3a03037	 mov         r3, #0x37
  00b7c	e58d3020	 str         r3, [sp, #0x20]

; 288  : 		ecc_min = 4;

  00b80	e3a03004	 mov         r3, #4
  00b84	e58d3028	 str         r3, [sp, #0x28]

; 289  : 	} else {

  00b88	ea000005	 b           |$LN17@syndrome|
  00b8c		 |$LN18@syndrome|

; 290  : 		t = 8;

  00b8c	e3a03008	 mov         r3, #8
  00b90	e58d3038	 str         r3, [sp, #0x38]

; 291  : 		ecc_pos = 103; /* bits: 103->0 */

  00b94	e3a03067	 mov         r3, #0x67
  00b98	e58d3020	 str         r3, [sp, #0x20]

; 292  : 		ecc_min = 0;

  00b9c	e3a03000	 mov         r3, #0
  00ba0	e58d3028	 str         r3, [sp, #0x28]
  00ba4		 |$LN17@syndrome|

; 293  : 	}
; 294  : 
; 295  : 	/* total numbber of syndrom to be used is 2t */
; 296  : 	/* Step1: calculate the odd syndrome(s) */
; 297  : 	R_bit = ((ecc[ecc_pos/8] >> (7 - ecc_pos%8)) & 1);

  00ba4	e59d1020	 ldr         r1, [sp, #0x20]
  00ba8	e3a00008	 mov         r0, #8
  00bac	eb000000	 bl          __rt_sdiv
  00bb0	e59d3050	 ldr         r3, [sp, #0x50]
  00bb4	e0833000	 add         r3, r3, r0
  00bb8	e5d33000	 ldrb        r3, [r3]
  00bbc	e1a04003	 mov         r4, r3
  00bc0	e59d1020	 ldr         r1, [sp, #0x20]
  00bc4	e3a00008	 mov         r0, #8
  00bc8	eb000000	 bl          __rt_sdiv
  00bcc	e2613007	 rsb         r3, r1, #7
  00bd0	e1a03354	 mov         r3, r4, asr r3
  00bd4	e2033001	 and         r3, r3, #1
  00bd8	e58d3034	 str         r3, [sp, #0x34]

; 298  : 	ecc_pos--;

  00bdc	e59d3020	 ldr         r3, [sp, #0x20]
  00be0	e2433001	 sub         r3, r3, #1
  00be4	e58d3020	 str         r3, [sp, #0x20]

; 299  : 	for (k = 0; k < t; k++)

  00be8	e3a03000	 mov         r3, #0
  00bec	e58d302c	 str         r3, [sp, #0x2C]
  00bf0	ea000002	 b           |$LN16@syndrome|
  00bf4		 |$LN15@syndrome|
  00bf4	e59d302c	 ldr         r3, [sp, #0x2C]
  00bf8	e2833001	 add         r3, r3, #1
  00bfc	e58d302c	 str         r3, [sp, #0x2C]
  00c00		 |$LN16@syndrome|
  00c00	e59d202c	 ldr         r2, [sp, #0x2C]
  00c04	e59d3038	 ldr         r3, [sp, #0x38]
  00c08	e1520003	 cmp         r2, r3
  00c0c	2a000009	 bcs         |$LN14@syndrome|

; 300  : 		syn[2 * k] = R_bit;

  00c10	e59d202c	 ldr         r2, [sp, #0x2C]
  00c14	e3a03002	 mov         r3, #2
  00c18	e0010392	 mul         r1, r2, r3
  00c1c	e3a03004	 mov         r3, #4
  00c20	e0020391	 mul         r2, r1, r3
  00c24	e59d3054	 ldr         r3, [sp, #0x54]
  00c28	e0832002	 add         r2, r3, r2
  00c2c	e59d3034	 ldr         r3, [sp, #0x34]
  00c30	e5823000	 str         r3, [r2]
  00c34	eaffffee	 b           |$LN15@syndrome|
  00c38		 |$LN14@syndrome|
  00c38		 |$LN13@syndrome|

; 301  : 
; 302  : 	while (ecc_pos >= ecc_min) {

  00c38	e59d2020	 ldr         r2, [sp, #0x20]
  00c3c	e59d3028	 ldr         r3, [sp, #0x28]
  00c40	e1520003	 cmp         r2, r3
  00c44	ba00006d	 blt         |$LN12@syndrome|

; 303  : 		R_bit = ((ecc[ecc_pos/8] >> (7 - ecc_pos%8)) & 1);

  00c48	e59d1020	 ldr         r1, [sp, #0x20]
  00c4c	e3a00008	 mov         r0, #8
  00c50	eb000000	 bl          __rt_sdiv
  00c54	e59d3050	 ldr         r3, [sp, #0x50]
  00c58	e0833000	 add         r3, r3, r0
  00c5c	e5d33000	 ldrb        r3, [r3]
  00c60	e1a04003	 mov         r4, r3
  00c64	e59d1020	 ldr         r1, [sp, #0x20]
  00c68	e3a00008	 mov         r0, #8
  00c6c	eb000000	 bl          __rt_sdiv
  00c70	e2613007	 rsb         r3, r1, #7
  00c74	e1a03354	 mov         r3, r4, asr r3
  00c78	e2033001	 and         r3, r3, #1
  00c7c	e58d3034	 str         r3, [sp, #0x34]

; 304  : 		ecc_pos--;

  00c80	e59d3020	 ldr         r3, [sp, #0x20]
  00c84	e2433001	 sub         r3, r3, #1
  00c88	e58d3020	 str         r3, [sp, #0x20]

; 305  : 
; 306  : 		for (k = 0; k < t; k++) {

  00c8c	e3a03000	 mov         r3, #0
  00c90	e58d302c	 str         r3, [sp, #0x2C]
  00c94	ea000002	 b           |$LN11@syndrome|
  00c98		 |$LN10@syndrome|
  00c98	e59d302c	 ldr         r3, [sp, #0x2C]
  00c9c	e2833001	 add         r3, r3, #1
  00ca0	e58d302c	 str         r3, [sp, #0x2C]
  00ca4		 |$LN11@syndrome|
  00ca4	e59d202c	 ldr         r2, [sp, #0x2C]
  00ca8	e59d3038	 ldr         r3, [sp, #0x38]
  00cac	e1520003	 cmp         r2, r3
  00cb0	2a000051	 bcs         |$LN9@syndrome|

; 307  : 			/* Accumulate value of x^i at alpha^(2k+1) */
; 308  : 			if (R_bit == 1)

  00cb4	e59d3034	 ldr         r3, [sp, #0x34]
  00cb8	e3530001	 cmp         r3, #1
  00cbc	1a000016	 bne         |$LN8@syndrome|

; 309  : 				syn[2*k] ^= pow_alpha[k];

  00cc0	e59d202c	 ldr         r2, [sp, #0x2C]
  00cc4	e3a03002	 mov         r3, #2
  00cc8	e0010392	 mul         r1, r2, r3
  00ccc	e3a03004	 mov         r3, #4
  00cd0	e0020391	 mul         r2, r1, r3
  00cd4	e59d3054	 ldr         r3, [sp, #0x54]
  00cd8	e0830002	 add         r0, r3, r2
  00cdc	e59d102c	 ldr         r1, [sp, #0x2C]
  00ce0	e3a03004	 mov         r3, #4
  00ce4	e0020391	 mul         r2, r1, r3
  00ce8	e28d3000	 add         r3, sp, #0
  00cec	e0833002	 add         r3, r3, r2
  00cf0	e5902000	 ldr         r2, [r0]
  00cf4	e5933000	 ldr         r3, [r3]
  00cf8	e0220003	 eor         r0, r2, r3
  00cfc	e59d202c	 ldr         r2, [sp, #0x2C]
  00d00	e3a03002	 mov         r3, #2
  00d04	e0010392	 mul         r1, r2, r3
  00d08	e3a03004	 mov         r3, #4
  00d0c	e0020391	 mul         r2, r1, r3
  00d10	e59d3054	 ldr         r3, [sp, #0x54]
  00d14	e0833002	 add         r3, r3, r2
  00d18	e5830000	 str         r0, [r3]
  00d1c		 |$LN8@syndrome|

; 310  : 
; 311  : 			/* Compute a**(2k+1), using LSFR */
; 312  : 			for (l = 0; l < (2 * k + 1); l++) {

  00d1c	e3a03000	 mov         r3, #0
  00d20	e58d3030	 str         r3, [sp, #0x30]
  00d24	ea000002	 b           |$LN7@syndrome|
  00d28		 |$LN6@syndrome|
  00d28	e59d3030	 ldr         r3, [sp, #0x30]
  00d2c	e2833001	 add         r3, r3, #1
  00d30	e58d3030	 str         r3, [sp, #0x30]
  00d34		 |$LN7@syndrome|
  00d34	e59d202c	 ldr         r2, [sp, #0x2C]
  00d38	e3a03002	 mov         r3, #2
  00d3c	e0030392	 mul         r3, r2, r3
  00d40	e2832001	 add         r2, r3, #1
  00d44	e59d3030	 ldr         r3, [sp, #0x30]
  00d48	e1530002	 cmp         r3, r2
  00d4c	2a000029	 bcs         |$LN5@syndrome|

; 313  : 				alpha_bit = (pow_alpha[k] >> POLY) & 1;

  00d50	e59d102c	 ldr         r1, [sp, #0x2C]
  00d54	e3a03004	 mov         r3, #4
  00d58	e0020391	 mul         r2, r1, r3
  00d5c	e28d3000	 add         r3, sp, #0
  00d60	e0833002	 add         r3, r3, r2
  00d64	e5933000	 ldr         r3, [r3]
  00d68	e1a03983	 mov         r3, r3, lsl #19
  00d6c	e1a03fa3	 mov         r3, r3, lsr #31
  00d70	e58d3024	 str         r3, [sp, #0x24]

; 314  : 				pow_alpha[k] = (pow_alpha[k] << 1) & 0x1FFF;

  00d74	e59d102c	 ldr         r1, [sp, #0x2C]
  00d78	e3a03004	 mov         r3, #4
  00d7c	e0020391	 mul         r2, r1, r3
  00d80	e28d3000	 add         r3, sp, #0
  00d84	e0833002	 add         r3, r3, r2
  00d88	e5933000	 ldr         r3, [r3]
  00d8c	e1a02083	 mov         r2, r3, lsl #1
  00d90	e3a03c1f	 mov         r3, #0x1F, 24
  00d94	e38330ff	 orr         r3, r3, #0xFF
  00d98	e0020003	 and         r0, r2, r3
  00d9c	e59d102c	 ldr         r1, [sp, #0x2C]
  00da0	e3a03004	 mov         r3, #4
  00da4	e0020391	 mul         r2, r1, r3
  00da8	e28d3000	 add         r3, sp, #0
  00dac	e0833002	 add         r3, r3, r2
  00db0	e5830000	 str         r0, [r3]

; 315  : 				if (alpha_bit == 1)

  00db4	e59d3024	 ldr         r3, [sp, #0x24]
  00db8	e3530001	 cmp         r3, #1
  00dbc	1a00000c	 bne         |$LN4@syndrome|

; 316  : 					pow_alpha[k] ^= P;

  00dc0	e59d102c	 ldr         r1, [sp, #0x2C]
  00dc4	e3a03004	 mov         r3, #4
  00dc8	e0020391	 mul         r2, r1, r3
  00dcc	e28d3000	 add         r3, sp, #0
  00dd0	e0833002	 add         r3, r3, r2
  00dd4	e5933000	 ldr         r3, [r3]
  00dd8	e223001b	 eor         r0, r3, #0x1B
  00ddc	e59d102c	 ldr         r1, [sp, #0x2C]
  00de0	e3a03004	 mov         r3, #4
  00de4	e0020391	 mul         r2, r1, r3
  00de8	e28d3000	 add         r3, sp, #0
  00dec	e0833002	 add         r3, r3, r2
  00df0	e5830000	 str         r0, [r3]
  00df4		 |$LN4@syndrome|

; 317  : 			}

  00df4	eaffffcb	 b           |$LN6@syndrome|
  00df8		 |$LN5@syndrome|

; 318  : 		}

  00df8	eaffffa6	 b           |$LN10@syndrome|
  00dfc		 |$LN9@syndrome|

; 319  : 	}

  00dfc	eaffff8d	 b           |$LN13@syndrome|
  00e00		 |$LN12@syndrome|

; 320  : 
; 321  : 	/* Step2: calculate the even syndrome(s)
; 322  : 	 * Compute S(a), where a is an even power of alpha
; 323  : 	 * Evenry even power of primitive element has the same minimal
; 324  : 	 * polynomial as some odd power of elemets.
; 325  : 	 * And based on S(a^2) = S^2(a)
; 326  : 	 */
; 327  : 	for (k = 0; k < t; k++)

  00e00	e3a03000	 mov         r3, #0
  00e04	e58d302c	 str         r3, [sp, #0x2C]
  00e08	ea000002	 b           |$LN3@syndrome|
  00e0c		 |$LN2@syndrome|
  00e0c	e59d302c	 ldr         r3, [sp, #0x2C]
  00e10	e2833001	 add         r3, r3, #1
  00e14	e58d302c	 str         r3, [sp, #0x2C]
  00e18		 |$LN3@syndrome|
  00e18	e59d202c	 ldr         r2, [sp, #0x2C]
  00e1c	e59d3038	 ldr         r3, [sp, #0x38]
  00e20	e1520003	 cmp         r2, r3
  00e24	2a000018	 bcs         |$LN1@syndrome|

; 328  : 		syn[2*k+1] = mpy_mod_gf(syn[k], syn[k]);

  00e28	e59d102c	 ldr         r1, [sp, #0x2C]
  00e2c	e3a03004	 mov         r3, #4
  00e30	e0020391	 mul         r2, r1, r3
  00e34	e59d3054	 ldr         r3, [sp, #0x54]
  00e38	e0833002	 add         r3, r3, r2
  00e3c	e5931000	 ldr         r1, [r3]
  00e40	e59d002c	 ldr         r0, [sp, #0x2C]
  00e44	e3a03004	 mov         r3, #4
  00e48	e0020390	 mul         r2, r0, r3
  00e4c	e59d3054	 ldr         r3, [sp, #0x54]
  00e50	e0833002	 add         r3, r3, r2
  00e54	e5930000	 ldr         r0, [r3]
  00e58	eb000000	 bl          mpy_mod_gf
  00e5c	e58d003c	 str         r0, [sp, #0x3C]
  00e60	e59d202c	 ldr         r2, [sp, #0x2C]
  00e64	e3a03002	 mov         r3, #2
  00e68	e0030392	 mul         r3, r2, r3
  00e6c	e2831001	 add         r1, r3, #1
  00e70	e3a03004	 mov         r3, #4
  00e74	e0020391	 mul         r2, r1, r3
  00e78	e59d3054	 ldr         r3, [sp, #0x54]
  00e7c	e0832002	 add         r2, r3, r2
  00e80	e59d303c	 ldr         r3, [sp, #0x3C]
  00e84	e5823000	 str         r3, [r2]
  00e88	eaffffdf	 b           |$LN2@syndrome|
  00e8c		 |$LN1@syndrome|

; 329  : 
; 330  : }

  00e8c	e28dd040	 add         sp, sp, #0x40
  00e90	e89d6010	 ldmia       sp, {r4, sp, lr}
  00e94	e12fff1e	 bx          lr
  00e98		 |$M506|

			 ENDP  ; |syndrome|

	END
