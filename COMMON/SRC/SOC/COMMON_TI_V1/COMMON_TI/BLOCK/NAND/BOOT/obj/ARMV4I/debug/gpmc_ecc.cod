; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BLOCK\NAND\gpmc_ecc.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|gpmc_ecc_func| [ DATA ]
	EXPORT	|gpmc_ecc_hamming_code| [ DATA ]
	EXPORT	|gpmc_ecc_bch_4bits| [ DATA ]
	EXPORT	|gpmc_ecc_bch_8bits| [ DATA ]

  00000			 AREA	 |.bss|, NOINIT
|gpmc_ecc_func| % 0x4

  00000			 AREA	 |.data|, DATA
|gpmc_ecc_hamming_code| DCD |Hamming_ECC_Init|
	DCD	|Hamming_ECC_Calculate|
	DCD	|Hamming_ECC_Reset|
	DCD	|Hamming_ECC_CorrectData|
|gpmc_ecc_bch_4bits| DCD |BCH4_ECC_Init|
	DCD	|BCH4_ECC_Calculate|
	DCD	|BCH4_ECC_Reset|
	DCD	|BCH4_ECC_CorrectData|
|gpmc_ecc_bch_8bits| DCD |BCH8_ECC_Init|
	DCD	|BCH8_ECC_Calculate|
	DCD	|BCH8_ECC_Reset|
	DCD	|BCH8_ECC_CorrectData|

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0

  00000			 AREA	 |.pdata|, PDATA
|$T44155| DCD	|$LN5@Hamming_EC|
	DCD	0x40001d03
; Function compile flags: /Odtp
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\block\nand\gpmc_ecc.c

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |Hamming_ECC_Init| PROC

; 79   : {

  00000		 |$LN5@Hamming_EC|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M44152|

; 80   :     UNREFERENCED_PARAMETER(xfer_mode); 
; 81   : 
; 82   :     //  Configure ECC calculator engine for NAND part
; 83   :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONFIG, configMask);

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e2832f7d	 add         r2, r3, #0x7D, 30
  00014	e59d300c	 ldr         r3, [sp, #0xC]
  00018	e5823000	 str         r3, [r2]

; 84   : 
; 85   :     //  Set ECC field sizes
; 86   :     OUTREG32(&pGpmcRegs->GPMC_ECC_SIZE_CONFIG, 0x3fcff000);

  0001c	e59d3008	 ldr         r3, [sp, #8]
  00020	e2832f7f	 add         r2, r3, #0x7F, 30
  00024	e3a035ff	 mov         r3, #0xFF, 10
  00028	e3833aff	 orr         r3, r3, #0xFF, 20
  0002c	e5823000	 str         r3, [r2]

; 87   : 
; 88   :     //  Select result reg 1 and clear results
; 89   :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_CLEAR);

  00030	e59d3008	 ldr         r3, [sp, #8]
  00034	e2832f7e	 add         r2, r3, #0x7E, 30
  00038	e3a03c01	 mov         r3, #1, 24
  0003c	e5823000	 str         r3, [r2]

; 90   :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_POINTER1);

  00040	e59d3008	 ldr         r3, [sp, #8]
  00044	e2832f7e	 add         r2, r3, #0x7E, 30
  00048	e3a03001	 mov         r3, #1
  0004c	e5823000	 str         r3, [r2]

; 91   : 
; 92   :     //  Enable ECC engine
; 93   :     SETREG32(&pGpmcRegs->GPMC_ECC_CONFIG, GPMC_ECC_CONFIG_ENABLE);

  00050	e59d3008	 ldr         r3, [sp, #8]
  00054	e2833f7d	 add         r3, r3, #0x7D, 30
  00058	e5933000	 ldr         r3, [r3]
  0005c	e3832001	 orr         r2, r3, #1
  00060	e59d3008	 ldr         r3, [sp, #8]
  00064	e2833f7d	 add         r3, r3, #0x7D, 30
  00068	e5832000	 str         r2, [r3]

; 94   : }

  0006c	e89d6000	 ldmia       sp, {sp, lr}
  00070	e12fff1e	 bx          lr
  00074		 |$M44153|

			 ENDP  ; |Hamming_ECC_Init|


  00008			 AREA	 |.pdata|, PDATA
|$T44160| DCD	|$LN7@Hamming_EC@2|
	DCD	0x40004704
; Function compile flags: /Odtp

  00074			 AREA	 |.text|, CODE, ARM

  00074		 |Hamming_ECC_Calculate| PROC

; 103  : {

  00074		 |$LN7@Hamming_EC@2|
  00074	e1a0c00d	 mov         r12, sp
  00078	e92d0007	 stmdb       sp!, {r0 - r2}
  0007c	e92d5000	 stmdb       sp!, {r12, lr}
  00080	e24dd00c	 sub         sp, sp, #0xC
  00084		 |$M44157|

; 104  :     UINT    regIndex = 0;

  00084	e3a03000	 mov         r3, #0
  00088	e58d3000	 str         r3, [sp]

; 105  :     UINT8   eccIndex;
; 106  :     UINT32  regVal;
; 107  : 
; 108  :     // the ecc engine is setup encode 512 bytes at a time
; 109  :     // so reading a sectore of 2048 bytes will require 4 sets of encoded
; 110  :     // groups
; 111  :     
; 112  :     for (eccIndex=0; eccIndex < size;)

  0008c	e3a03000	 mov         r3, #0
  00090	e5cd3008	 strb        r3, [sp, #8]
  00094		 |$LN2@Hamming_EC@2|
  00094	e5dd3008	 ldrb        r3, [sp, #8]
  00098	e1a02003	 mov         r2, r3
  0009c	e59d301c	 ldr         r3, [sp, #0x1C]
  000a0	e1520003	 cmp         r2, r3
  000a4	aa000036	 bge         |$LN1@Hamming_EC@2|

; 113  :         {
; 114  :         regVal = INREG32(((UINT32*)&pGpmcRegs->GPMC_ECC1_RESULT) + regIndex);

  000a8	e59d3014	 ldr         r3, [sp, #0x14]
  000ac	e2831c02	 add         r1, r3, #2, 24
  000b0	e59d2000	 ldr         r2, [sp]
  000b4	e3a03004	 mov         r3, #4
  000b8	e0030392	 mul         r3, r2, r3
  000bc	e0813003	 add         r3, r1, r3
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e58d3004	 str         r3, [sp, #4]

; 115  : 
; 116  :         // ECC-x[0] where x is from A-D
; 117  :         pEcc[eccIndex++] = (BYTE) ECC_P1_128_E(regVal);

  000c8	e59d3004	 ldr         r3, [sp, #4]
  000cc	e20330ff	 and         r3, r3, #0xFF
  000d0	e20310ff	 and         r1, r3, #0xFF
  000d4	e5dd3008	 ldrb        r3, [sp, #8]
  000d8	e1a02003	 mov         r2, r3
  000dc	e59d3018	 ldr         r3, [sp, #0x18]
  000e0	e0833002	 add         r3, r3, r2
  000e4	e5c31000	 strb        r1, [r3]
  000e8	e5dd3008	 ldrb        r3, [sp, #8]
  000ec	e2833001	 add         r3, r3, #1
  000f0	e20330ff	 and         r3, r3, #0xFF
  000f4	e5cd3008	 strb        r3, [sp, #8]

; 118  : 
; 119  :         // ECC-x[1] where x is from A-D
; 120  :         pEcc[eccIndex++] = (BYTE) ECC_P1_128_O(regVal);

  000f8	e59d3004	 ldr         r3, [sp, #4]
  000fc	e1a03403	 mov         r3, r3, lsl #8
  00100	e1a03c23	 mov         r3, r3, lsr #24
  00104	e20310ff	 and         r1, r3, #0xFF
  00108	e5dd3008	 ldrb        r3, [sp, #8]
  0010c	e1a02003	 mov         r2, r3
  00110	e59d3018	 ldr         r3, [sp, #0x18]
  00114	e0833002	 add         r3, r3, r2
  00118	e5c31000	 strb        r1, [r3]
  0011c	e5dd3008	 ldrb        r3, [sp, #8]
  00120	e2833001	 add         r3, r3, #1
  00124	e20330ff	 and         r3, r3, #0xFF
  00128	e5cd3008	 strb        r3, [sp, #8]

; 121  : 
; 122  :         // ECC-x[2] where x is from A-D
; 123  :         pEcc[eccIndex++] = (BYTE) (ECC_P512_2048_E(regVal)|ECC_P512_2048_O(regVal)<<4);

  0012c	e59d3004	 ldr         r3, [sp, #4]
  00130	e1a03a03	 mov         r3, r3, lsl #20
  00134	e1a02e23	 mov         r2, r3, lsr #28
  00138	e59d3004	 ldr         r3, [sp, #4]
  0013c	e1a03203	 mov         r3, r3, lsl #4
  00140	e1a03e23	 mov         r3, r3, lsr #28
  00144	e1a03203	 mov         r3, r3, lsl #4
  00148	e1823003	 orr         r3, r2, r3
  0014c	e20310ff	 and         r1, r3, #0xFF
  00150	e5dd3008	 ldrb        r3, [sp, #8]
  00154	e1a02003	 mov         r2, r3
  00158	e59d3018	 ldr         r3, [sp, #0x18]
  0015c	e0833002	 add         r3, r3, r2
  00160	e5c31000	 strb        r1, [r3]
  00164	e5dd3008	 ldrb        r3, [sp, #8]
  00168	e2833001	 add         r3, r3, #1
  0016c	e20330ff	 and         r3, r3, #0xFF
  00170	e5cd3008	 strb        r3, [sp, #8]

; 124  : 
; 125  :         // read next ecc register
; 126  :         regIndex++;

  00174	e59d3000	 ldr         r3, [sp]
  00178	e2833001	 add         r3, r3, #1
  0017c	e58d3000	 str         r3, [sp]

; 127  :         }

  00180	eaffffc3	 b           |$LN2@Hamming_EC@2|
  00184		 |$LN1@Hamming_EC@2|

; 128  : 
; 129  :     return;
; 130  : }

  00184	e28dd00c	 add         sp, sp, #0xC
  00188	e89d6000	 ldmia       sp, {sp, lr}
  0018c	e12fff1e	 bx          lr
  00190		 |$M44158|

			 ENDP  ; |Hamming_ECC_Calculate|


  00010			 AREA	 |.pdata|, PDATA
|$T44165| DCD	|$LN5@Hamming_EC@3|
	DCD	0x40000d03
; Function compile flags: /Odtp

  00190			 AREA	 |.text|, CODE, ARM

  00190		 |Hamming_ECC_Reset| PROC

; 137  : {

  00190		 |$LN5@Hamming_EC@3|
  00190	e1a0c00d	 mov         r12, sp
  00194	e92d0001	 stmdb       sp!, {r0}
  00198	e92d5000	 stmdb       sp!, {r12, lr}
  0019c		 |$M44162|

; 138  :     //  Disable ECC engine
; 139  :     CLRREG32(&pGpmcRegs->GPMC_ECC_CONFIG, GPMC_ECC_CONFIG_ENABLE);

  0019c	e59d3008	 ldr         r3, [sp, #8]
  001a0	e2833f7d	 add         r3, r3, #0x7D, 30
  001a4	e5932000	 ldr         r2, [r3]
  001a8	e3e03001	 mvn         r3, #1
  001ac	e0022003	 and         r2, r2, r3
  001b0	e59d3008	 ldr         r3, [sp, #8]
  001b4	e2833f7d	 add         r3, r3, #0x7D, 30
  001b8	e5832000	 str         r2, [r3]

; 140  : }

  001bc	e89d6000	 ldmia       sp, {sp, lr}
  001c0	e12fff1e	 bx          lr
  001c4		 |$M44163|

			 ENDP  ; |Hamming_ECC_Reset|

	EXPORT	|??_C@_1EK@NKMJOMA@?$AAm?$AAo?$AAr?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@EJBBFNMJ@?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|NKDbgPrintfW|
	IMPORT	|__rt_sdiv|

  00018			 AREA	 |.pdata|, PDATA
|$T44173| DCD	|$LN23@Hamming_EC@4|
	DCD	0x4000af04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EK@NKMJOMA@?$AAm?$AAo?$AAr?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt@| DCB "m"
	DCB	0x0, "o", 0x0, "r", 0x0, "e", 0x0, " ", 0x0, "t", 0x0, "h"
	DCB	0x0, "a", 0x0, "n", 0x0, " ", 0x0, "1", 0x0, "b", 0x0, "i"
	DCB	0x0, "t", 0x0, " ", 0x0, "e", 0x0, "r", 0x0, "r", 0x0, "o"
	DCB	0x0, "r", 0x0, "s", 0x0, " ", 0x0, "a", 0x0, "r", 0x0, "e"
	DCB	0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@EJBBFNMJ@?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@| DCB " "
	DCB	0x0, "1", 0x0, "b", 0x0, "i", 0x0, "t", 0x0, " ", 0x0, "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, " ", 0x0, "i"
	DCB	0x0, "s", 0x0, " ", 0x0, "d", 0x0, "e", 0x0, "t", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "e", 0x0, "d", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  001c4			 AREA	 |.text|, CODE, ARM

  001c4		 |Hamming_ECC_CorrectData| PROC

; 163  : {

  001c4		 |$LN23@Hamming_EC@4|
  001c4	e1a0c00d	 mov         r12, sp
  001c8	e92d000f	 stmdb       sp!, {r0 - r3}
  001cc	e92d5000	 stmdb       sp!, {r12, lr}
  001d0	e24dd03c	 sub         sp, sp, #0x3C
  001d4		 |$M44170|

; 164  :     BOOL rc = FALSE;

  001d4	e3a03000	 mov         r3, #0
  001d8	e58d3004	 str         r3, [sp, #4]

; 165  :     int   i;
; 166  :     int numOnes;
; 167  :     DWORD ECCxor[ECC_BUFF_LEN];
; 168  :     UCHAR mask;
; 169  :     DWORD byteLocation;
; 170  :     DWORD bitLocation;
; 171  :     UCHAR count;
; 172  :     BOOL  bCorrect;
; 173  : 
; 174  :     //  ECC calculated for every 512 bytes of data
; 175  :     UINT numberOfSectors = (sizeData/DATA_BLOCK_LEN);

  001dc	e59d104c	 ldr         r1, [sp, #0x4C]
  001e0	e3a00c02	 mov         r0, #2, 24
  001e4	eb000000	 bl          __rt_sdiv
  001e8	e58d0020	 str         r0, [sp, #0x20]

; 176  : 
; 177  :     UNREFERENCED_PARAMETER(pGpmcRegs);
; 178  : 
; 179  : 
; 180  :     //----- 1. Check passed parameters -----
; 181  :     for(count=0; count < numberOfSectors; count++ )

  001ec	e3a03000	 mov         r3, #0
  001f0	e5cd3000	 strb        r3, [sp]
  001f4	ea000003	 b           |$LN17@Hamming_EC@4|
  001f8		 |$LN16@Hamming_EC@4|
  001f8	e5dd3000	 ldrb        r3, [sp]
  001fc	e2833001	 add         r3, r3, #1
  00200	e20330ff	 and         r3, r3, #0xFF
  00204	e5cd3000	 strb        r3, [sp]
  00208		 |$LN17@Hamming_EC@4|
  00208	e5dd2000	 ldrb        r2, [sp]
  0020c	e59d3020	 ldr         r3, [sp, #0x20]
  00210	e1520003	 cmp         r2, r3
  00214	2a00008f	 bcs         |$LN15@Hamming_EC@4|

; 182  :         {
; 183  :         //----- 2. XOR the existing ECC info with the new ECC info -----
; 184  :         for(i = 0; i < ECC_BUFF_LEN; i++)

  00218	e3a03000	 mov         r3, #0
  0021c	e58d300c	 str         r3, [sp, #0xC]
  00220	ea000002	 b           |$LN14@Hamming_EC@4|
  00224		 |$LN13@Hamming_EC@4|
  00224	e59d300c	 ldr         r3, [sp, #0xC]
  00228	e2833001	 add         r3, r3, #1
  0022c	e58d300c	 str         r3, [sp, #0xC]
  00230		 |$LN14@Hamming_EC@4|
  00230	e59d300c	 ldr         r3, [sp, #0xC]
  00234	e3530003	 cmp         r3, #3
  00238	aa000010	 bge         |$LN12@Hamming_EC@4|

; 185  :             {
; 186  :                 ECCxor[i] = *(pEccNew+i) ^ *(pEccOld+i);

  0023c	e59d2054	 ldr         r2, [sp, #0x54]
  00240	e59d300c	 ldr         r3, [sp, #0xC]
  00244	e0823003	 add         r3, r2, r3
  00248	e5d33000	 ldrb        r3, [r3]
  0024c	e1a01003	 mov         r1, r3
  00250	e59d2050	 ldr         r2, [sp, #0x50]
  00254	e59d300c	 ldr         r3, [sp, #0xC]
  00258	e0823003	 add         r3, r2, r3
  0025c	e5d33000	 ldrb        r3, [r3]
  00260	e0210003	 eor         r0, r1, r3
  00264	e59d100c	 ldr         r1, [sp, #0xC]
  00268	e3a03004	 mov         r3, #4
  0026c	e0020391	 mul         r2, r1, r3
  00270	e28d3010	 add         r3, sp, #0x10
  00274	e0833002	 add         r3, r3, r2
  00278	e5830000	 str         r0, [r3]

; 187  :             }

  0027c	eaffffe8	 b           |$LN13@Hamming_EC@4|
  00280		 |$LN12@Hamming_EC@4|

; 188  : 
; 189  :         //----- 3. Determine if this is a single-bit error that can be corrected -----
; 190  :         //         NOTE: The total number of bits equal to '1' in the XORed Hamming
; 191  :         //               Codes determines if the error can be corrected.
; 192  :         numOnes = 0;

  00280	e3a03000	 mov         r3, #0
  00284	e58d3024	 str         r3, [sp, #0x24]

; 193  :         for(i = 0; i < ECC_BUFF_LEN; i++)

  00288	e3a03000	 mov         r3, #0
  0028c	e58d300c	 str         r3, [sp, #0xC]
  00290	ea000002	 b           |$LN11@Hamming_EC@4|
  00294		 |$LN10@Hamming_EC@4|
  00294	e59d300c	 ldr         r3, [sp, #0xC]
  00298	e2833001	 add         r3, r3, #1
  0029c	e58d300c	 str         r3, [sp, #0xC]
  002a0		 |$LN11@Hamming_EC@4|
  002a0	e59d300c	 ldr         r3, [sp, #0xC]
  002a4	e3530003	 cmp         r3, #3
  002a8	aa00000d	 bge         |$LN9@Hamming_EC@4|

; 194  :             {
; 195  :             numOnes += CountNumberOfOnes(ECCxor[i]);

  002ac	e59d100c	 ldr         r1, [sp, #0xC]
  002b0	e3a03004	 mov         r3, #4
  002b4	e0020391	 mul         r2, r1, r3
  002b8	e28d3010	 add         r3, sp, #0x10
  002bc	e0833002	 add         r3, r3, r2
  002c0	e5930000	 ldr         r0, [r3]
  002c4	eb000000	 bl          CountNumberOfOnes
  002c8	e5cd0034	 strb        r0, [sp, #0x34]
  002cc	e5dd3034	 ldrb        r3, [sp, #0x34]
  002d0	e1a02003	 mov         r2, r3
  002d4	e59d3024	 ldr         r3, [sp, #0x24]
  002d8	e0833002	 add         r3, r3, r2
  002dc	e58d3024	 str         r3, [sp, #0x24]

; 196  :             }

  002e0	eaffffeb	 b           |$LN10@Hamming_EC@4|
  002e4		 |$LN9@Hamming_EC@4|

; 197  : 
; 198  :         switch( numOnes )

  002e4	e59d3024	 ldr         r3, [sp, #0x24]
  002e8	e58d3038	 str         r3, [sp, #0x38]
  002ec	e59d3038	 ldr         r3, [sp, #0x38]
  002f0	e353000c	 cmp         r3, #0xC
  002f4	ca000009	 bgt         |$LN20@Hamming_EC@4|
  002f8	e59d3038	 ldr         r3, [sp, #0x38]
  002fc	e353000c	 cmp         r3, #0xC
  00300	0a00000d	 beq         |$LN5@Hamming_EC@4|
  00304	e59d3038	 ldr         r3, [sp, #0x38]
  00308	e3530000	 cmp         r3, #0
  0030c	ba00000f	 blt         |$LN4@Hamming_EC@4|
  00310	e59d3038	 ldr         r3, [sp, #0x38]
  00314	e3530001	 cmp         r3, #1
  00318	da000004	 ble         |$LN6@Hamming_EC@4|
  0031c	ea00000b	 b           |$LN4@Hamming_EC@4|
  00320		 |$LN20@Hamming_EC@4|
  00320	e59d3038	 ldr         r3, [sp, #0x38]
  00324	e3530018	 cmp         r3, #0x18
  00328	0a000000	 beq         |$LN6@Hamming_EC@4|
  0032c	ea000007	 b           |$LN4@Hamming_EC@4|
  00330		 |$LN6@Hamming_EC@4|

; 199  :             {
; 200  :             case NO_ERRORS:
; 201  :             case ECC_ERROR:
; 202  :             case ERASED_SECTOR:
; 203  :                 //  No error in the data
; 204  :                 bCorrect = FALSE;

  00330	e3a03000	 mov         r3, #0
  00334	e58d3008	 str         r3, [sp, #8]

; 205  :                 break;

  00338	ea000009	 b           |$LN7@Hamming_EC@4|
  0033c		 |$LN5@Hamming_EC@4|

; 206  :             
; 207  :             case CORRECTABLE_ERROR:
; 208  :                 //  Single bit error; correctable
; 209  :                 DEBUGMSG(ZONE_ERROR, (L" 1bit error is detected\r\n"));

  0033c	e59f0138	 ldr         r0, [pc, #0x138]
  00340	eb000000	 bl          NKDbgPrintfW

; 210  :                 
; 211  :                 bCorrect = TRUE;

  00344	e3a03001	 mov         r3, #1
  00348	e58d3008	 str         r3, [sp, #8]

; 212  :                 break;

  0034c	ea000004	 b           |$LN7@Hamming_EC@4|
  00350		 |$LN4@Hamming_EC@4|

; 213  :             
; 214  :             default:
; 215  :                 //  More than 1 bit error
; 216  :                 DEBUGMSG(ZONE_ERROR, (L"more than 1bit errors are detected\r\n"));

  00350	e59f0120	 ldr         r0, [pc, #0x120]
  00354	eb000000	 bl          NKDbgPrintfW

; 217  :                 rc = FALSE;

  00358	e3a03000	 mov         r3, #0
  0035c	e58d3004	 str         r3, [sp, #4]

; 218  :                 goto cleanUp;

  00360	ea00003e	 b           |$cleanUp$43874|
  00364		 |$LN7@Hamming_EC@4|

; 219  :                 break;
; 220  :             }
; 221  :             
; 222  :             
; 223  :         //----- 4. Compute the location of the single-bit error -----
; 224  :         if( bCorrect )

  00364	e59d3008	 ldr         r3, [sp, #8]
  00368	e3530000	 cmp         r3, #0
  0036c	0a00002f	 beq         |$LN3@Hamming_EC@4|

; 225  :             {
; 226  :             // Note: This is how the ECC is layed out in the ECC buffers.
; 227  :             // ECCxor[0] = P128e  P64e   P32e   P16e   P8e    P4e    P2e    P1e
; 228  :             // ECCxor[1] = P128o  P64o   P32o   P16o   P8o    P4o    P2o    P1o
; 229  :             // ECCxor[2] = P2048o P1024o P512o  P256o  P2048e P1024e P512e  P256e
; 230  : 
; 231  :             // Combine the 'o' xor'ed values to get row and column
; 232  :             byteLocation = ((ECCxor[2] & 0xF0) << 1) | (ECCxor[1] >> 3);

  00370	e59d3018	 ldr         r3, [sp, #0x18]
  00374	e20330f0	 and         r3, r3, #0xF0
  00378	e1a02083	 mov         r2, r3, lsl #1
  0037c	e59d3014	 ldr         r3, [sp, #0x14]
  00380	e1a031a3	 mov         r3, r3, lsr #3
  00384	e1823003	 orr         r3, r2, r3
  00388	e58d3028	 str         r3, [sp, #0x28]

; 233  :             bitLocation = ECCxor[1] & 0x7;

  0038c	e59d3014	 ldr         r3, [sp, #0x14]
  00390	e2033007	 and         r3, r3, #7
  00394	e58d302c	 str         r3, [sp, #0x2C]

; 234  : 
; 235  :             //----- 5. Correct the single-bit error (set the bit to its complementary value) -----
; 236  :             mask = (UCHAR) (0x01 << bitLocation);

  00398	e59d202c	 ldr         r2, [sp, #0x2C]
  0039c	e3a03001	 mov         r3, #1
  003a0	e1a03213	 mov         r3, r3, lsl r2
  003a4	e20330ff	 and         r3, r3, #0xFF
  003a8	e5cd301c	 strb        r3, [sp, #0x1C]

; 237  :             if(pData[byteLocation] & mask)

  003ac	e59d2048	 ldr         r2, [sp, #0x48]
  003b0	e59d3028	 ldr         r3, [sp, #0x28]
  003b4	e0823003	 add         r3, r2, r3
  003b8	e5d33000	 ldrb        r3, [r3]
  003bc	e1a02003	 mov         r2, r3
  003c0	e5dd301c	 ldrb        r3, [sp, #0x1C]
  003c4	e1120003	 tst         r2, r3
  003c8	0a00000c	 beq         |$LN2@Hamming_EC@4|

; 238  :                 {
; 239  :                 pData[byteLocation] &= ~mask;       // 0->1 error, set bit to 0

  003cc	e59d2048	 ldr         r2, [sp, #0x48]
  003d0	e59d3028	 ldr         r3, [sp, #0x28]
  003d4	e0821003	 add         r1, r2, r3
  003d8	e5dd301c	 ldrb        r3, [sp, #0x1C]
  003dc	e1e02003	 mvn         r2, r3
  003e0	e5d13000	 ldrb        r3, [r1]
  003e4	e0031002	 and         r1, r3, r2
  003e8	e59d2048	 ldr         r2, [sp, #0x48]
  003ec	e59d3028	 ldr         r3, [sp, #0x28]
  003f0	e0822003	 add         r2, r2, r3
  003f4	e20130ff	 and         r3, r1, #0xFF
  003f8	e5c23000	 strb        r3, [r2]

; 240  :                 }
; 241  :             else

  003fc	ea00000b	 b           |$LN1@Hamming_EC@4|
  00400		 |$LN2@Hamming_EC@4|

; 242  :                 {
; 243  :                 pData[byteLocation] |= mask;        // 1->0 error, set bit to 1

  00400	e59d2048	 ldr         r2, [sp, #0x48]
  00404	e59d3028	 ldr         r3, [sp, #0x28]
  00408	e0821003	 add         r1, r2, r3
  0040c	e5dd301c	 ldrb        r3, [sp, #0x1C]
  00410	e1a02003	 mov         r2, r3
  00414	e5d13000	 ldrb        r3, [r1]
  00418	e1831002	 orr         r1, r3, r2
  0041c	e59d2048	 ldr         r2, [sp, #0x48]
  00420	e59d3028	 ldr         r3, [sp, #0x28]
  00424	e0822003	 add         r2, r2, r3
  00428	e20130ff	 and         r3, r1, #0xFF
  0042c	e5c23000	 strb        r3, [r2]
  00430		 |$LN1@Hamming_EC@4|
  00430		 |$LN3@Hamming_EC@4|

; 244  :                 }
; 245  :             }
; 246  : 
; 247  :             
; 248  :         //  Advance pointers
; 249  :         pEccOld += ECC_BUFF_LEN;                // Pointer to the ECC on flash

  00430	e59d3050	 ldr         r3, [sp, #0x50]
  00434	e2833003	 add         r3, r3, #3
  00438	e58d3050	 str         r3, [sp, #0x50]

; 250  :         pEccNew += ECC_BUFF_LEN;                // Pointer to the ECC the caller calculated

  0043c	e59d3054	 ldr         r3, [sp, #0x54]
  00440	e2833003	 add         r3, r3, #3
  00444	e58d3054	 str         r3, [sp, #0x54]

; 251  :         pData += DATA_BLOCK_LEN;

  00448	e59d3048	 ldr         r3, [sp, #0x48]
  0044c	e2833c02	 add         r3, r3, #2, 24
  00450	e58d3048	 str         r3, [sp, #0x48]

; 252  :         }

  00454	eaffff67	 b           |$LN16@Hamming_EC@4|
  00458		 |$LN15@Hamming_EC@4|

; 253  : 
; 254  :     rc = TRUE;

  00458	e3a03001	 mov         r3, #1
  0045c	e58d3004	 str         r3, [sp, #4]
  00460		 |$cleanUp$43874|

; 255  :     
; 256  : cleanUp:
; 257  :     return rc;

  00460	e59d3004	 ldr         r3, [sp, #4]
  00464	e58d3030	 str         r3, [sp, #0x30]

; 258  : }

  00468	e59d0030	 ldr         r0, [sp, #0x30]
  0046c	e28dd03c	 add         sp, sp, #0x3C
  00470	e89d6000	 ldmia       sp, {sp, lr}
  00474	e12fff1e	 bx          lr
  00478		 |$LN24@Hamming_EC@4|
  00478		 |$LN25@Hamming_EC@4|
  00478	00000000	 DCD         |??_C@_1EK@NKMJOMA@?$AAm?$AAo?$AAr?$AAe?$AA?5?$AAt?$AAh?$AAa?$AAn?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?5?$AAa?$AAr?$AAe?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt@|
  0047c		 |$LN26@Hamming_EC@4|
  0047c	00000000	 DCD         |??_C@_1DE@EJBBFNMJ@?$AA?5?$AA1?$AAb?$AAi?$AAt?$AA?5?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AAi?$AAs?$AA?5?$AAd?$AAe?$AAt?$AAe?$AAc?$AAt?$AAe?$AAd?$AA?$AN?$AA?6?$AA?$AA@|
  00480		 |$M44171|

			 ENDP  ; |Hamming_ECC_CorrectData|


  00020			 AREA	 |.pdata|, PDATA
|$T44182| DCD	|$LN7@CountNumbe|
	DCD	0x40001904
; Function compile flags: /Odtp

  00480			 AREA	 |.text|, CODE, ARM

  00480		 |CountNumberOfOnes| PROC

; 61   : {

  00480		 |$LN7@CountNumbe|
  00480	e1a0c00d	 mov         r12, sp
  00484	e92d0001	 stmdb       sp!, {r0}
  00488	e92d5000	 stmdb       sp!, {r12, lr}
  0048c	e24dd008	 sub         sp, sp, #8
  00490		 |$M44179|

; 62   :     UCHAR count = 0;

  00490	e3a03000	 mov         r3, #0
  00494	e5cd3000	 strb        r3, [sp]
  00498		 |$LN2@CountNumbe|

; 63   :     while(num)

  00498	e59d3010	 ldr         r3, [sp, #0x10]
  0049c	e3530000	 cmp         r3, #0
  004a0	0a000009	 beq         |$LN1@CountNumbe|

; 64   :         {
; 65   :         num=num&(num-1);

  004a4	e59d3010	 ldr         r3, [sp, #0x10]
  004a8	e2432001	 sub         r2, r3, #1
  004ac	e59d3010	 ldr         r3, [sp, #0x10]
  004b0	e0033002	 and         r3, r3, r2
  004b4	e58d3010	 str         r3, [sp, #0x10]

; 66   :         count++;

  004b8	e5dd3000	 ldrb        r3, [sp]
  004bc	e2833001	 add         r3, r3, #1
  004c0	e20330ff	 and         r3, r3, #0xFF
  004c4	e5cd3000	 strb        r3, [sp]

; 67   :         }

  004c8	eafffff2	 b           |$LN2@CountNumbe|
  004cc		 |$LN1@CountNumbe|

; 68   : 
; 69   :     return count;

  004cc	e5dd3000	 ldrb        r3, [sp]
  004d0	e5cd3004	 strb        r3, [sp, #4]

; 70   : }

  004d4	e5dd0004	 ldrb        r0, [sp, #4]
  004d8	e28dd008	 add         sp, sp, #8
  004dc	e89d6000	 ldmia       sp, {sp, lr}
  004e0	e12fff1e	 bx          lr
  004e4		 |$M44180|

			 ENDP  ; |CountNumberOfOnes|

	EXPORT	|??_C@_1EA@JNFKONCC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'

  00028			 AREA	 |.pdata|, PDATA
|$T44187| DCD	|$LN10@BCH4_ECC_I|
	DCD	0x40003b04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EA@JNFKONCC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "r", 0x0, "r", 0x0, "o", 0x0, "r", 0x0, ":", 0x0, " "
	DCB	0x0, "U", 0x0, "n", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "o"
	DCB	0x0, "g", 0x0, "n", 0x0, "i", 0x0, "z", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "M", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, "["
	DCB	0x0, "%", 0x0, "d", 0x0, "]", 0x0, "!", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  004e4			 AREA	 |.text|, CODE, ARM

  004e4		 |BCH4_ECC_Init| PROC

; 343  : {

  004e4		 |$LN10@BCH4_ECC_I|
  004e4	e1a0c00d	 mov         r12, sp
  004e8	e92d0007	 stmdb       sp!, {r0 - r2}
  004ec	e92d5000	 stmdb       sp!, {r12, lr}
  004f0	e24dd00c	 sub         sp, sp, #0xC
  004f4		 |$M44184|

; 344  :     UINT32 ecc_conf , ecc_size_conf=0;

  004f4	e3a03000	 mov         r3, #0
  004f8	e58d3000	 str         r3, [sp]

; 345  : 
; 346  :     ecc_conf = configMask | GPMC_ECC_CONFIG_BCH | GPMC_ECC_CONFIG_BCH4; 

  004fc	e59d3018	 ldr         r3, [sp, #0x18]
  00500	e3833801	 orr         r3, r3, #1, 16
  00504	e58d3004	 str         r3, [sp, #4]

; 347  : 	
; 348  :     switch (xfer_mode) 

  00508	e59d301c	 ldr         r3, [sp, #0x1C]
  0050c	e58d3008	 str         r3, [sp, #8]
  00510	e59d3008	 ldr         r3, [sp, #8]
  00514	e3530000	 cmp         r3, #0
  00518	0a000003	 beq         |$LN3@BCH4_ECC_I|
  0051c	e59d3008	 ldr         r3, [sp, #8]
  00520	e3530001	 cmp         r3, #1
  00524	0a000009	 beq         |$LN2@BCH4_ECC_I|
  00528	ea000010	 b           |$LN1@BCH4_ECC_I|
  0052c		 |$LN3@BCH4_ECC_I|

; 349  :     {
; 350  :         case NAND_ECC_READ:
; 351  :           /* configration is for ECC at 2 bytes offset  */
; 352  :           ecc_size_conf = (0xD << 22) | (0x4 << 12);

  0052c	e3a0350d	 mov         r3, #0xD, 10
  00530	e3833901	 orr         r3, r3, #1, 18
  00534	e58d3000	 str         r3, [sp]

; 353  :           ecc_conf |= ( (0x09 << 8) | GPMC_ECC_CONFIG_ENABLE);

  00538	e59d2004	 ldr         r2, [sp, #4]
  0053c	e3a03c09	 mov         r3, #9, 24
  00540	e3833001	 orr         r3, r3, #1
  00544	e1823003	 orr         r3, r2, r3
  00548	e58d3004	 str         r3, [sp, #4]

; 354  :           break;

  0054c	ea00000a	 b           |$LN4@BCH4_ECC_I|
  00550		 |$LN2@BCH4_ECC_I|

; 355  : 		  
; 356  :         case NAND_ECC_WRITE:
; 357  :           /* configration is for ECC at 2 bytes offset  */
; 358  :           ecc_size_conf = (0x20 << 22) | (0x00 << 12);

  00550	e3a03302	 mov         r3, #2, 6
  00554	e58d3000	 str         r3, [sp]

; 359  :           ecc_conf |= ((0x06 << 8) |GPMC_ECC_CONFIG_ENABLE);

  00558	e59d2004	 ldr         r2, [sp, #4]
  0055c	e3a03c06	 mov         r3, #6, 24
  00560	e3833001	 orr         r3, r3, #1
  00564	e1823003	 orr         r3, r2, r3
  00568	e58d3004	 str         r3, [sp, #4]

; 360  :           break;

  0056c	ea000002	 b           |$LN4@BCH4_ECC_I|
  00570		 |$LN1@BCH4_ECC_I|

; 361  : 		  
; 362  :         default:
; 363  :           RETAILMSG(1, (L"Error: Unrecognized Mode[%d]!\r\n", xfer_mode));

  00570	e59d101c	 ldr         r1, [sp, #0x1C]
  00574	e59f0050	 ldr         r0, [pc, #0x50]
  00578	eb000000	 bl          NKDbgPrintfW
  0057c		 |$LN4@BCH4_ECC_I|

; 364  :           break;
; 365  :     }
; 366  : 
; 367  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_POINTER1);

  0057c	e59d3014	 ldr         r3, [sp, #0x14]
  00580	e2832f7e	 add         r2, r3, #0x7E, 30
  00584	e3a03001	 mov         r3, #1
  00588	e5823000	 str         r3, [r2]

; 368  :     //  Set ECC field sizes
; 369  :     OUTREG32(&pGpmcRegs->GPMC_ECC_SIZE_CONFIG, ecc_size_conf);

  0058c	e59d3014	 ldr         r3, [sp, #0x14]
  00590	e2832f7f	 add         r2, r3, #0x7F, 30
  00594	e59d3000	 ldr         r3, [sp]
  00598	e5823000	 str         r3, [r2]

; 370  : 
; 371  :     //  Select result reg 1 and clear results
; 372  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_CLEAR | GPMC_ECC_CONTROL_POINTER1);

  0059c	e59d3014	 ldr         r3, [sp, #0x14]
  005a0	e2832f7e	 add         r2, r3, #0x7E, 30
  005a4	e3a03c01	 mov         r3, #1, 24
  005a8	e3833001	 orr         r3, r3, #1
  005ac	e5823000	 str         r3, [r2]

; 373  : 
; 374  : 
; 375  :     //  Configure ECC calculator engine for NAND part
; 376  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONFIG, ecc_conf );

  005b0	e59d3014	 ldr         r3, [sp, #0x14]
  005b4	e2832f7d	 add         r2, r3, #0x7D, 30
  005b8	e59d3004	 ldr         r3, [sp, #4]
  005bc	e5823000	 str         r3, [r2]

; 377  : 
; 378  : }

  005c0	e28dd00c	 add         sp, sp, #0xC
  005c4	e89d6000	 ldmia       sp, {sp, lr}
  005c8	e12fff1e	 bx          lr
  005cc		 |$LN11@BCH4_ECC_I|
  005cc		 |$LN12@BCH4_ECC_I|
  005cc	00000000	 DCD         |??_C@_1EA@JNFKONCC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  005d0		 |$M44185|

			 ENDP  ; |BCH4_ECC_Init|


  00030			 AREA	 |.pdata|, PDATA
|$T44194| DCD	|$LN9@BCH4_ECC_C|
	DCD	0x40008004
; Function compile flags: /Odtp

  005d0			 AREA	 |.text|, CODE, ARM

  005d0		 |BCH4_ECC_Calculate| PROC

; 387  : {

  005d0		 |$LN9@BCH4_ECC_C|
  005d0	e1a0c00d	 mov         r12, sp
  005d4	e92d0007	 stmdb       sp!, {r0 - r2}
  005d8	e92d5000	 stmdb       sp!, {r12, lr}
  005dc	e24dd010	 sub         sp, sp, #0x10
  005e0		 |$M44191|

; 388  :     UINT8   eccIndex=0;

  005e0	e3a03000	 mov         r3, #0
  005e4	e5cd300c	 strb        r3, [sp, #0xC]

; 389  :     UINT32  regVal1, regVal2, i;
; 390  : 
; 391  :     if (size < ECC_BYTES_BCH4) return;

  005e8	e59d3020	 ldr         r3, [sp, #0x20]
  005ec	e353001c	 cmp         r3, #0x1C
  005f0	aa000000	 bge         |$LN4@BCH4_ECC_C|
  005f4	ea000072	 b           |$LN5@BCH4_ECC_C|
  005f8		 |$LN4@BCH4_ECC_C|

; 392  : 	
; 393  :     // the ecc engine is setup encode 512 bytes at a time
; 394  :     // so reading a sectore of 2048 bytes will require 4 sets of encoded
; 395  :     // groups
; 396  :     
; 397  :     for (i=0; i < 4; i++)

  005f8	e3a03000	 mov         r3, #0
  005fc	e58d3000	 str         r3, [sp]
  00600	ea000002	 b           |$LN3@BCH4_ECC_C|
  00604		 |$LN2@BCH4_ECC_C|
  00604	e59d3000	 ldr         r3, [sp]
  00608	e2833001	 add         r3, r3, #1
  0060c	e58d3000	 str         r3, [sp]
  00610		 |$LN3@BCH4_ECC_C|
  00610	e59d3000	 ldr         r3, [sp]
  00614	e3530004	 cmp         r3, #4
  00618	2a000069	 bcs         |$LN1@BCH4_ECC_C|

; 398  :     {
; 399  :         /* Reading HW ECC_BCH_Results
; 400  :          * 0x240-0x24C, 0x250-0x25C, 0x260-0x26C, 0x270-0x27C
; 401  :          */
; 402  :         regVal1 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT0);

  0061c	e59d3018	 ldr         r3, [sp, #0x18]
  00620	e2831d09	 add         r1, r3, #9, 26
  00624	e59d2000	 ldr         r2, [sp]
  00628	e3a03010	 mov         r3, #0x10
  0062c	e0030392	 mul         r3, r2, r3
  00630	e0813003	 add         r3, r1, r3
  00634	e5933000	 ldr         r3, [r3]
  00638	e58d3008	 str         r3, [sp, #8]

; 403  :         regVal2 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT1);

  0063c	e59d3018	 ldr         r3, [sp, #0x18]
  00640	e2831d09	 add         r1, r3, #9, 26
  00644	e59d2000	 ldr         r2, [sp]
  00648	e3a03010	 mov         r3, #0x10
  0064c	e0030392	 mul         r3, r2, r3
  00650	e0813003	 add         r3, r1, r3
  00654	e2833004	 add         r3, r3, #4
  00658	e5933000	 ldr         r3, [r3]
  0065c	e58d3004	 str         r3, [sp, #4]

; 404  :         
; 405  : 
; 406  :         pEcc[eccIndex++] =  (BYTE)((regVal2 >> 16) & 0xFF);

  00660	e59d3004	 ldr         r3, [sp, #4]
  00664	e1a03403	 mov         r3, r3, lsl #8
  00668	e1a03c23	 mov         r3, r3, lsr #24
  0066c	e20310ff	 and         r1, r3, #0xFF
  00670	e5dd300c	 ldrb        r3, [sp, #0xC]
  00674	e1a02003	 mov         r2, r3
  00678	e59d301c	 ldr         r3, [sp, #0x1C]
  0067c	e0833002	 add         r3, r3, r2
  00680	e5c31000	 strb        r1, [r3]
  00684	e5dd300c	 ldrb        r3, [sp, #0xC]
  00688	e2833001	 add         r3, r3, #1
  0068c	e20330ff	 and         r3, r3, #0xFF
  00690	e5cd300c	 strb        r3, [sp, #0xC]

; 407  :         pEcc[eccIndex++] = (BYTE)((regVal2 >> 8) & 0xFF);

  00694	e59d3004	 ldr         r3, [sp, #4]
  00698	e1a03803	 mov         r3, r3, lsl #16
  0069c	e1a03c23	 mov         r3, r3, lsr #24
  006a0	e20310ff	 and         r1, r3, #0xFF
  006a4	e5dd300c	 ldrb        r3, [sp, #0xC]
  006a8	e1a02003	 mov         r2, r3
  006ac	e59d301c	 ldr         r3, [sp, #0x1C]
  006b0	e0833002	 add         r3, r3, r2
  006b4	e5c31000	 strb        r1, [r3]
  006b8	e5dd300c	 ldrb        r3, [sp, #0xC]
  006bc	e2833001	 add         r3, r3, #1
  006c0	e20330ff	 and         r3, r3, #0xFF
  006c4	e5cd300c	 strb        r3, [sp, #0xC]

; 408  :         pEcc[eccIndex++] = (BYTE)(regVal2 & 0xFF);

  006c8	e59d3004	 ldr         r3, [sp, #4]
  006cc	e20330ff	 and         r3, r3, #0xFF
  006d0	e20310ff	 and         r1, r3, #0xFF
  006d4	e5dd300c	 ldrb        r3, [sp, #0xC]
  006d8	e1a02003	 mov         r2, r3
  006dc	e59d301c	 ldr         r3, [sp, #0x1C]
  006e0	e0833002	 add         r3, r3, r2
  006e4	e5c31000	 strb        r1, [r3]
  006e8	e5dd300c	 ldrb        r3, [sp, #0xC]
  006ec	e2833001	 add         r3, r3, #1
  006f0	e20330ff	 and         r3, r3, #0xFF
  006f4	e5cd300c	 strb        r3, [sp, #0xC]

; 409  :         pEcc[eccIndex++] = (BYTE)((regVal1 >> 24) & 0xFF);

  006f8	e59d3008	 ldr         r3, [sp, #8]
  006fc	e1a03c23	 mov         r3, r3, lsr #24
  00700	e20310ff	 and         r1, r3, #0xFF
  00704	e5dd300c	 ldrb        r3, [sp, #0xC]
  00708	e1a02003	 mov         r2, r3
  0070c	e59d301c	 ldr         r3, [sp, #0x1C]
  00710	e0833002	 add         r3, r3, r2
  00714	e5c31000	 strb        r1, [r3]
  00718	e5dd300c	 ldrb        r3, [sp, #0xC]
  0071c	e2833001	 add         r3, r3, #1
  00720	e20330ff	 and         r3, r3, #0xFF
  00724	e5cd300c	 strb        r3, [sp, #0xC]

; 410  :         pEcc[eccIndex++] = (BYTE)((regVal1 >> 16) & 0xFF);

  00728	e59d3008	 ldr         r3, [sp, #8]
  0072c	e1a03403	 mov         r3, r3, lsl #8
  00730	e1a03c23	 mov         r3, r3, lsr #24
  00734	e20310ff	 and         r1, r3, #0xFF
  00738	e5dd300c	 ldrb        r3, [sp, #0xC]
  0073c	e1a02003	 mov         r2, r3
  00740	e59d301c	 ldr         r3, [sp, #0x1C]
  00744	e0833002	 add         r3, r3, r2
  00748	e5c31000	 strb        r1, [r3]
  0074c	e5dd300c	 ldrb        r3, [sp, #0xC]
  00750	e2833001	 add         r3, r3, #1
  00754	e20330ff	 and         r3, r3, #0xFF
  00758	e5cd300c	 strb        r3, [sp, #0xC]

; 411  :         pEcc[eccIndex++] = (BYTE)((regVal1 >> 8) & 0xFF);

  0075c	e59d3008	 ldr         r3, [sp, #8]
  00760	e1a03803	 mov         r3, r3, lsl #16
  00764	e1a03c23	 mov         r3, r3, lsr #24
  00768	e20310ff	 and         r1, r3, #0xFF
  0076c	e5dd300c	 ldrb        r3, [sp, #0xC]
  00770	e1a02003	 mov         r2, r3
  00774	e59d301c	 ldr         r3, [sp, #0x1C]
  00778	e0833002	 add         r3, r3, r2
  0077c	e5c31000	 strb        r1, [r3]
  00780	e5dd300c	 ldrb        r3, [sp, #0xC]
  00784	e2833001	 add         r3, r3, #1
  00788	e20330ff	 and         r3, r3, #0xFF
  0078c	e5cd300c	 strb        r3, [sp, #0xC]

; 412  :         pEcc[eccIndex++] = (BYTE)(regVal1 & 0xFF);

  00790	e59d3008	 ldr         r3, [sp, #8]
  00794	e20330ff	 and         r3, r3, #0xFF
  00798	e20310ff	 and         r1, r3, #0xFF
  0079c	e5dd300c	 ldrb        r3, [sp, #0xC]
  007a0	e1a02003	 mov         r2, r3
  007a4	e59d301c	 ldr         r3, [sp, #0x1C]
  007a8	e0833002	 add         r3, r3, r2
  007ac	e5c31000	 strb        r1, [r3]
  007b0	e5dd300c	 ldrb        r3, [sp, #0xC]
  007b4	e2833001	 add         r3, r3, #1
  007b8	e20330ff	 and         r3, r3, #0xFF
  007bc	e5cd300c	 strb        r3, [sp, #0xC]

; 413  : 
; 414  :     }

  007c0	eaffff8f	 b           |$LN2@BCH4_ECC_C|
  007c4		 |$LN1@BCH4_ECC_C|
  007c4		 |$LN5@BCH4_ECC_C|

; 415  : 
; 416  :     return;
; 417  : }

  007c4	e28dd010	 add         sp, sp, #0x10
  007c8	e89d6000	 ldmia       sp, {sp, lr}
  007cc	e12fff1e	 bx          lr
  007d0		 |$M44192|

			 ENDP  ; |BCH4_ECC_Calculate|


  00038			 AREA	 |.pdata|, PDATA
|$T44199| DCD	|$LN5@BCH4_ECC_R|
	DCD	0x40000d03
; Function compile flags: /Odtp

  007d0			 AREA	 |.text|, CODE, ARM

  007d0		 |BCH4_ECC_Reset| PROC

; 424  : {

  007d0		 |$LN5@BCH4_ECC_R|
  007d0	e1a0c00d	 mov         r12, sp
  007d4	e92d0001	 stmdb       sp!, {r0}
  007d8	e92d5000	 stmdb       sp!, {r12, lr}
  007dc		 |$M44196|

; 425  :     //  Disable ECC engine
; 426  :     CLRREG32(&pGpmcRegs->GPMC_ECC_CONFIG, GPMC_ECC_CONFIG_ENABLE);

  007dc	e59d3008	 ldr         r3, [sp, #8]
  007e0	e2833f7d	 add         r3, r3, #0x7D, 30
  007e4	e5932000	 ldr         r2, [r3]
  007e8	e3e03001	 mvn         r3, #1
  007ec	e0022003	 and         r2, r2, r3
  007f0	e59d3008	 ldr         r3, [sp, #8]
  007f4	e2833f7d	 add         r3, r3, #0x7D, 30
  007f8	e5832000	 str         r2, [r3]

; 427  : }

  007fc	e89d6000	 ldmia       sp, {sp, lr}
  00800	e12fff1e	 bx          lr
  00804		 |$M44197|

			 ENDP  ; |BCH4_ECC_Reset|


  00040			 AREA	 |.pdata|, PDATA
|$T44208| DCD	|$LN7@BCH4_ECC_C@2|
	DCD	0x40001c04
; Function compile flags: /Odtp

  00804			 AREA	 |.text|, CODE, ARM

  00804		 |BCH4_ECC_CorrectData| PROC

; 450  : {

  00804		 |$LN7@BCH4_ECC_C@2|
  00804	e1a0c00d	 mov         r12, sp
  00808	e92d000f	 stmdb       sp!, {r0 - r3}
  0080c	e92d5000	 stmdb       sp!, {r12, lr}
  00810	e24dd018	 sub         sp, sp, #0x18
  00814		 |$M44205|

; 451  : 
; 452  :     int ret;
; 453  :     UNREFERENCED_PARAMETER(sizeData); 
; 454  : 
; 455  :     ret = BCH_correct_data(pGpmcRegs, pData, (BYTE *)pEccOld, (BYTE *)pEccNew , 4);

  00814	e3a03004	 mov         r3, #4
  00818	e58d3000	 str         r3, [sp]
  0081c	e59d3030	 ldr         r3, [sp, #0x30]
  00820	e59d202c	 ldr         r2, [sp, #0x2C]
  00824	e59d1024	 ldr         r1, [sp, #0x24]
  00828	e59d0020	 ldr         r0, [sp, #0x20]
  0082c	eb000000	 bl          BCH_correct_data
  00830	e58d0010	 str         r0, [sp, #0x10]
  00834	e59d3010	 ldr         r3, [sp, #0x10]
  00838	e58d3004	 str         r3, [sp, #4]

; 456  : 
; 457  :     return (ret>=0? TRUE : FALSE);

  0083c	e59d3004	 ldr         r3, [sp, #4]
  00840	e3530000	 cmp         r3, #0
  00844	ba000002	 blt         |$LN3@BCH4_ECC_C@2|
  00848	e3a03001	 mov         r3, #1
  0084c	e58d3014	 str         r3, [sp, #0x14]
  00850	ea000001	 b           |$LN4@BCH4_ECC_C@2|
  00854		 |$LN3@BCH4_ECC_C@2|
  00854	e3a03000	 mov         r3, #0
  00858	e58d3014	 str         r3, [sp, #0x14]
  0085c		 |$LN4@BCH4_ECC_C@2|
  0085c	e59d3014	 ldr         r3, [sp, #0x14]
  00860	e58d300c	 str         r3, [sp, #0xC]

; 458  : 
; 459  : }

  00864	e59d000c	 ldr         r0, [sp, #0xC]
  00868	e28dd018	 add         sp, sp, #0x18
  0086c	e89d6000	 ldmia       sp, {sp, lr}
  00870	e12fff1e	 bx          lr
  00874		 |$M44206|

			 ENDP  ; |BCH4_ECC_CorrectData|

	EXPORT	|??_C@_1BK@PHFJCPMI@?$AAe?$AAr?$AAr?$AA_?$AAl?$AAo?$AAc?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1FK@MIJGLIEO@?$AA?4?$AA?4?$AA?4?$AAb?$AAc?$AAh?$AA?5?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA5?$AA1?$AA2?$AA?5?$AAb?$AAy?$AAt?$AAe?$AA?$CJ?$AA?5?$AAd?$AAo?$AAn?$AAe@| [ DATA ] ; `string'
	IMPORT	|decode_bch|
	IMPORT	|__rt_udiv|

  00048			 AREA	 |.pdata|, PDATA
|$T44219| DCD	|$LN30@BCH_correc|
	DCD	0x4000dc04

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BK@PHFJCPMI@?$AAe?$AAr?$AAr?$AA_?$AAl?$AAo?$AAc?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@| DCB "e"
	DCB	0x0, "r", 0x0, "r", 0x0, "_", 0x0, "l", 0x0, "o", 0x0, "c"
	DCB	0x0, "=", 0x0, "%", 0x0, "x", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@MIJGLIEO@?$AA?4?$AA?4?$AA?4?$AAb?$AAc?$AAh?$AA?5?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA5?$AA1?$AA2?$AA?5?$AAb?$AAy?$AAt?$AAe?$AA?$CJ?$AA?5?$AAd?$AAo?$AAn?$AAe@| DCB "."
	DCB	0x0, ".", 0x0, ".", 0x0, "b", 0x0, "c", 0x0, "h", 0x0, " "
	DCB	0x0, "c", 0x0, "o", 0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c"
	DCB	0x0, "t", 0x0, "(", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, "5"
	DCB	0x0, "1", 0x0, "2", 0x0, " ", 0x0, "b", 0x0, "y", 0x0, "t"
	DCB	0x0, "e", 0x0, ")", 0x0, " ", 0x0, "d", 0x0, "o", 0x0, "n"
	DCB	0x0, "e", 0x0, ",", 0x0, " ", 0x0, "c", 0x0, "o", 0x0, "u"
	DCB	0x0, "n", 0x0, "t", 0x0, "=", 0x0, "%", 0x0, "d", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'
; Function compile flags: /Odtp

  00874			 AREA	 |.text|, CODE, ARM

  00874		 |BCH_correct_data| PROC

; 264  : {

  00874		 |$LN30@BCH_correc|
  00874	e1a0c00d	 mov         r12, sp
  00878	e92d000f	 stmdb       sp!, {r0 - r3}
  0087c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  00880	e24dd050	 sub         sp, sp, #0x50
  00884		 |$M44216|

; 265  :     int i=0, blockCnt=4, j, eccCheck, count, corrected=0;

  00884	e3a03000	 mov         r3, #0
  00888	e58d3010	 str         r3, [sp, #0x10]
  0088c	e3a03004	 mov         r3, #4
  00890	e58d3008	 str         r3, [sp, #8]
  00894	e3a03000	 mov         r3, #0
  00898	e58d3014	 str         r3, [sp, #0x14]

; 266  :     int eccsize = (correct_bits == 8) ? ECC_BYTES_BCH8/4 : ECC_BYTES_BCH4/4;

  0089c	e59d306c	 ldr         r3, [sp, #0x6C]
  008a0	e3530008	 cmp         r3, #8
  008a4	1a000002	 bne         |$LN24@BCH_correc|
  008a8	e3a0300d	 mov         r3, #0xD
  008ac	e58d3044	 str         r3, [sp, #0x44]
  008b0	ea000001	 b           |$LN25@BCH_correc|
  008b4		 |$LN24@BCH_correc|
  008b4	e3a03007	 mov         r3, #7
  008b8	e58d3044	 str         r3, [sp, #0x44]
  008bc		 |$LN25@BCH_correc|
  008bc	e59d3044	 ldr         r3, [sp, #0x44]
  008c0	e58d3000	 str         r3, [sp]

; 267  :     int mode = (correct_bits == 8) ? 1 : 0;

  008c4	e59d306c	 ldr         r3, [sp, #0x6C]
  008c8	e3530008	 cmp         r3, #8
  008cc	1a000002	 bne         |$LN26@BCH_correc|
  008d0	e3a03001	 mov         r3, #1
  008d4	e58d3048	 str         r3, [sp, #0x48]
  008d8	ea000001	 b           |$LN27@BCH_correc|
  008dc		 |$LN26@BCH_correc|
  008dc	e3a03000	 mov         r3, #0
  008e0	e58d3048	 str         r3, [sp, #0x48]
  008e4		 |$LN27@BCH_correc|
  008e4	e59d3048	 ldr         r3, [sp, #0x48]
  008e8	e58d300c	 str         r3, [sp, #0xC]

; 268  :     unsigned int err_loc[8];
; 269  : 
; 270  :     if(correct_bits == 8)

  008ec	e59d306c	 ldr         r3, [sp, #0x6C]
  008f0	e3530008	 cmp         r3, #8
  008f4	1a000004	 bne         |$LN21@BCH_correc|

; 271  :         BCH8_ECC_Calculate(pGpmcRegs, calc_ecc, ECC_BYTES_BCH8);	

  008f8	e3a02034	 mov         r2, #0x34
  008fc	e59d1068	 ldr         r1, [sp, #0x68]
  00900	e59d005c	 ldr         r0, [sp, #0x5C]
  00904	eb000000	 bl          BCH8_ECC_Calculate

; 272  :     else

  00908	ea000003	 b           |$LN20@BCH_correc|
  0090c		 |$LN21@BCH_correc|

; 273  :         BCH4_ECC_Calculate(pGpmcRegs, calc_ecc, ECC_BYTES_BCH4);	

  0090c	e3a0201c	 mov         r2, #0x1C
  00910	e59d1068	 ldr         r1, [sp, #0x68]
  00914	e59d005c	 ldr         r0, [sp, #0x5C]
  00918	eb000000	 bl          BCH4_ECC_Calculate
  0091c		 |$LN20@BCH_correc|

; 274  : 
; 275  :     for (i = 0; i < blockCnt; i++) 

  0091c	e3a03000	 mov         r3, #0
  00920	e58d3010	 str         r3, [sp, #0x10]
  00924	ea000002	 b           |$LN19@BCH_correc|
  00928		 |$LN18@BCH_correc|
  00928	e59d3010	 ldr         r3, [sp, #0x10]
  0092c	e2833001	 add         r3, r3, #1
  00930	e58d3010	 str         r3, [sp, #0x10]
  00934		 |$LN19@BCH_correc|
  00934	e59d2010	 ldr         r2, [sp, #0x10]
  00938	e59d3008	 ldr         r3, [sp, #8]
  0093c	e1520003	 cmp         r2, r3
  00940	aa00009f	 bge         |$LN17@BCH_correc|

; 276  :     {
; 277  :         /* check if any ecc error */
; 278  :         eccCheck = 0;

  00944	e3a03000	 mov         r3, #0
  00948	e58d3038	 str         r3, [sp, #0x38]

; 279  :         for (j = 0; (j < eccsize) && (eccCheck == 0); j++)

  0094c	e3a03000	 mov         r3, #0
  00950	e58d303c	 str         r3, [sp, #0x3C]
  00954	ea000002	 b           |$LN16@BCH_correc|
  00958		 |$LN15@BCH_correc|
  00958	e59d303c	 ldr         r3, [sp, #0x3C]
  0095c	e2833001	 add         r3, r3, #1
  00960	e58d303c	 str         r3, [sp, #0x3C]
  00964		 |$LN16@BCH_correc|
  00964	e59d203c	 ldr         r2, [sp, #0x3C]
  00968	e59d3000	 ldr         r3, [sp]
  0096c	e1520003	 cmp         r2, r3
  00970	aa00000b	 bge         |$LN14@BCH_correc|
  00974	e59d3038	 ldr         r3, [sp, #0x38]
  00978	e3530000	 cmp         r3, #0
  0097c	1a000008	 bne         |$LN14@BCH_correc|

; 280  :     	 {
; 281  :             if (calc_ecc[j] != 0)

  00980	e59d2068	 ldr         r2, [sp, #0x68]
  00984	e59d303c	 ldr         r3, [sp, #0x3C]
  00988	e0823003	 add         r3, r2, r3
  0098c	e5d33000	 ldrb        r3, [r3]
  00990	e3530000	 cmp         r3, #0
  00994	0a000001	 beq         |$LN13@BCH_correc|

; 282  :                 eccCheck = 1;

  00998	e3a03001	 mov         r3, #1
  0099c	e58d3038	 str         r3, [sp, #0x38]
  009a0		 |$LN13@BCH_correc|

; 283  :     	 }

  009a0	eaffffec	 b           |$LN15@BCH_correc|
  009a4		 |$LN14@BCH_correc|

; 284  :         if (eccCheck == 1) 

  009a4	e59d3038	 ldr         r3, [sp, #0x38]
  009a8	e3530001	 cmp         r3, #1
  009ac	1a000017	 bne         |$LN12@BCH_correc|

; 285  :         {
; 286  :             eccCheck = 0;

  009b0	e3a03000	 mov         r3, #0
  009b4	e58d3038	 str         r3, [sp, #0x38]

; 287  :             for (j = 0; (j < eccsize) && (eccCheck == 0); j++)

  009b8	e3a03000	 mov         r3, #0
  009bc	e58d303c	 str         r3, [sp, #0x3C]
  009c0	ea000002	 b           |$LN11@BCH_correc|
  009c4		 |$LN10@BCH_correc|
  009c4	e59d303c	 ldr         r3, [sp, #0x3C]
  009c8	e2833001	 add         r3, r3, #1
  009cc	e58d303c	 str         r3, [sp, #0x3C]
  009d0		 |$LN11@BCH_correc|
  009d0	e59d203c	 ldr         r2, [sp, #0x3C]
  009d4	e59d3000	 ldr         r3, [sp]
  009d8	e1520003	 cmp         r2, r3
  009dc	aa00000b	 bge         |$LN9@BCH_correc|
  009e0	e59d3038	 ldr         r3, [sp, #0x38]
  009e4	e3530000	 cmp         r3, #0
  009e8	1a000008	 bne         |$LN9@BCH_correc|

; 288  :                 if (read_ecc[j] != 0xFF)

  009ec	e59d2064	 ldr         r2, [sp, #0x64]
  009f0	e59d303c	 ldr         r3, [sp, #0x3C]
  009f4	e0823003	 add         r3, r2, r3
  009f8	e5d33000	 ldrb        r3, [r3]
  009fc	e35300ff	 cmp         r3, #0xFF
  00a00	0a000001	 beq         |$LN8@BCH_correc|

; 289  :                     eccCheck = 1;

  00a04	e3a03001	 mov         r3, #1
  00a08	e58d3038	 str         r3, [sp, #0x38]
  00a0c		 |$LN8@BCH_correc|

; 290  :         }

  00a0c	eaffffec	 b           |$LN10@BCH_correc|
  00a10		 |$LN9@BCH_correc|
  00a10		 |$LN12@BCH_correc|

; 291  :         if (eccCheck == 1) 

  00a10	e59d3038	 ldr         r3, [sp, #0x38]
  00a14	e3530001	 cmp         r3, #1
  00a18	1a00005d	 bne         |$LN7@BCH_correc|

; 292  :         {
; 293  :             count = decode_bch(mode, calc_ecc, err_loc);

  00a1c	e28d2018	 add         r2, sp, #0x18
  00a20	e59d1068	 ldr         r1, [sp, #0x68]
  00a24	e59d000c	 ldr         r0, [sp, #0xC]
  00a28	eb000000	 bl          decode_bch
  00a2c	e58d004c	 str         r0, [sp, #0x4C]
  00a30	e59d304c	 ldr         r3, [sp, #0x4C]
  00a34	e58d3004	 str         r3, [sp, #4]

; 294  :             DEBUGMSG(ZONE_ERROR, (L"...bch correct(%d 512 byte) done, count=%d\r\n", i+1, count));

  00a38	e59d2004	 ldr         r2, [sp, #4]
  00a3c	e59d3010	 ldr         r3, [sp, #0x10]
  00a40	e2831001	 add         r1, r3, #1
  00a44	e59f0194	 ldr         r0, [pc, #0x194]
  00a48	eb000000	 bl          NKDbgPrintfW

; 295  :             if (count > correct_bits)

  00a4c	e59d2004	 ldr         r2, [sp, #4]
  00a50	e59d306c	 ldr         r3, [sp, #0x6C]
  00a54	e1520003	 cmp         r2, r3
  00a58	da000002	 ble         |$LN6@BCH_correc|

; 296  :                 return -1;

  00a5c	e3e03000	 mvn         r3, #0
  00a60	e58d3040	 str         r3, [sp, #0x40]
  00a64	ea000058	 b           |$LN22@BCH_correc|
  00a68		 |$LN6@BCH_correc|

; 297  : 
; 298  :             /* When the error bits are in ECC bytes itself, decode_bch() returns -1, this condition will be
; 299  :                  ignored until we get improved BCH decoder  */
; 300  : 	     if ((count < 0) && (count !=-1))

  00a68	e59d3004	 ldr         r3, [sp, #4]
  00a6c	e3530000	 cmp         r3, #0
  00a70	aa000005	 bge         |$LN5@BCH_correc|
  00a74	e59d3004	 ldr         r3, [sp, #4]
  00a78	e3730001	 cmn         r3, #1
  00a7c	0a000002	 beq         |$LN5@BCH_correc|

; 301  :                 return count;

  00a80	e59d3004	 ldr         r3, [sp, #4]
  00a84	e58d3040	 str         r3, [sp, #0x40]
  00a88	ea00004f	 b           |$LN22@BCH_correc|
  00a8c		 |$LN5@BCH_correc|

; 302  :             
; 303  :             for (j = 0; j < count; j++) 

  00a8c	e3a03000	 mov         r3, #0
  00a90	e58d303c	 str         r3, [sp, #0x3C]
  00a94	ea000002	 b           |$LN4@BCH_correc|
  00a98		 |$LN3@BCH_correc|
  00a98	e59d303c	 ldr         r3, [sp, #0x3C]
  00a9c	e2833001	 add         r3, r3, #1
  00aa0	e58d303c	 str         r3, [sp, #0x3C]
  00aa4		 |$LN4@BCH_correc|
  00aa4	e59d203c	 ldr         r2, [sp, #0x3C]
  00aa8	e59d3004	 ldr         r3, [sp, #4]
  00aac	e1520003	 cmp         r2, r3
  00ab0	aa000037	 bge         |$LN2@BCH_correc|

; 304  :             {
; 305  :                 DEBUGMSG(ZONE_ERROR, (L"err_loc=%x\r\n", err_loc[j]));

  00ab4	e59d103c	 ldr         r1, [sp, #0x3C]
  00ab8	e3a03004	 mov         r3, #4
  00abc	e0020391	 mul         r2, r1, r3
  00ac0	e28d3018	 add         r3, sp, #0x18
  00ac4	e0833002	 add         r3, r3, r2
  00ac8	e5931000	 ldr         r1, [r3]
  00acc	e59f0108	 ldr         r0, [pc, #0x108]
  00ad0	eb000000	 bl          NKDbgPrintfW

; 306  : 		  if((err_loc[j] / 8)<DATA_BLOCK_LEN)		

  00ad4	e59d103c	 ldr         r1, [sp, #0x3C]
  00ad8	e3a03004	 mov         r3, #4
  00adc	e0020391	 mul         r2, r1, r3
  00ae0	e28d3018	 add         r3, sp, #0x18
  00ae4	e0833002	 add         r3, r3, r2
  00ae8	e5931000	 ldr         r1, [r3]
  00aec	e3a00008	 mov         r0, #8
  00af0	eb000000	 bl          __rt_udiv
  00af4	e3500c02	 cmp         r0, #2, 24
  00af8	2a000021	 bcs         |$LN1@BCH_correc|

; 307  :                     dat[err_loc[j] / 8] ^=  (0x01 << (err_loc[j] % 8));

  00afc	e59d103c	 ldr         r1, [sp, #0x3C]
  00b00	e3a03004	 mov         r3, #4
  00b04	e0020391	 mul         r2, r1, r3
  00b08	e28d3018	 add         r3, sp, #0x18
  00b0c	e0833002	 add         r3, r3, r2
  00b10	e5931000	 ldr         r1, [r3]
  00b14	e3a00008	 mov         r0, #8
  00b18	eb000000	 bl          __rt_udiv
  00b1c	e59d3060	 ldr         r3, [sp, #0x60]
  00b20	e0834000	 add         r4, r3, r0
  00b24	e59d103c	 ldr         r1, [sp, #0x3C]
  00b28	e3a03004	 mov         r3, #4
  00b2c	e0020391	 mul         r2, r1, r3
  00b30	e28d3018	 add         r3, sp, #0x18
  00b34	e0833002	 add         r3, r3, r2
  00b38	e5931000	 ldr         r1, [r3]
  00b3c	e3a00008	 mov         r0, #8
  00b40	eb000000	 bl          __rt_udiv
  00b44	e3a03001	 mov         r3, #1
  00b48	e1a02113	 mov         r2, r3, lsl r1
  00b4c	e5d43000	 ldrb        r3, [r4]
  00b50	e0234002	 eor         r4, r3, r2
  00b54	e59d103c	 ldr         r1, [sp, #0x3C]
  00b58	e3a03004	 mov         r3, #4
  00b5c	e0020391	 mul         r2, r1, r3
  00b60	e28d3018	 add         r3, sp, #0x18
  00b64	e0833002	 add         r3, r3, r2
  00b68	e5931000	 ldr         r1, [r3]
  00b6c	e3a00008	 mov         r0, #8
  00b70	eb000000	 bl          __rt_udiv
  00b74	e59d3060	 ldr         r3, [sp, #0x60]
  00b78	e0832000	 add         r2, r3, r0
  00b7c	e20430ff	 and         r3, r4, #0xFF
  00b80	e5c23000	 strb        r3, [r2]
  00b84		 |$LN1@BCH_correc|

; 308  :                 corrected++;

  00b84	e59d3014	 ldr         r3, [sp, #0x14]
  00b88	e2833001	 add         r3, r3, #1
  00b8c	e58d3014	 str         r3, [sp, #0x14]

; 309  :             }

  00b90	eaffffc0	 b           |$LN3@BCH_correc|
  00b94		 |$LN2@BCH_correc|
  00b94		 |$LN7@BCH_correc|

; 310  :         }
; 311  :         
; 312  :         calc_ecc = calc_ecc + eccsize;

  00b94	e59d2068	 ldr         r2, [sp, #0x68]
  00b98	e59d3000	 ldr         r3, [sp]
  00b9c	e0823003	 add         r3, r2, r3
  00ba0	e58d3068	 str         r3, [sp, #0x68]

; 313  :         read_ecc = read_ecc + eccsize;

  00ba4	e59d2064	 ldr         r2, [sp, #0x64]
  00ba8	e59d3000	 ldr         r3, [sp]
  00bac	e0823003	 add         r3, r2, r3
  00bb0	e58d3064	 str         r3, [sp, #0x64]

; 314  :         dat += DATA_BLOCK_LEN;

  00bb4	e59d3060	 ldr         r3, [sp, #0x60]
  00bb8	e2833c02	 add         r3, r3, #2, 24
  00bbc	e58d3060	 str         r3, [sp, #0x60]

; 315  :     }

  00bc0	eaffff58	 b           |$LN18@BCH_correc|
  00bc4		 |$LN17@BCH_correc|

; 316  :     
; 317  :     return corrected;

  00bc4	e59d3014	 ldr         r3, [sp, #0x14]
  00bc8	e58d3040	 str         r3, [sp, #0x40]
  00bcc		 |$LN22@BCH_correc|

; 318  : }

  00bcc	e59d0040	 ldr         r0, [sp, #0x40]
  00bd0	e28dd050	 add         sp, sp, #0x50
  00bd4	e89d6010	 ldmia       sp, {r4, sp, lr}
  00bd8	e12fff1e	 bx          lr
  00bdc		 |$LN31@BCH_correc|
  00bdc		 |$LN32@BCH_correc|
  00bdc	00000000	 DCD         |??_C@_1BK@PHFJCPMI@?$AAe?$AAr?$AAr?$AA_?$AAl?$AAo?$AAc?$AA?$DN?$AA?$CF?$AAx?$AA?$AN?$AA?6?$AA?$AA@|
  00be0		 |$LN33@BCH_correc|
  00be0	00000000	 DCD         |??_C@_1FK@MIJGLIEO@?$AA?4?$AA?4?$AA?4?$AAb?$AAc?$AAh?$AA?5?$AAc?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AA?$CI?$AA?$CF?$AAd?$AA?5?$AA5?$AA1?$AA2?$AA?5?$AAb?$AAy?$AAt?$AAe?$AA?$CJ?$AA?5?$AAd?$AAo?$AAn?$AAe@|
  00be4		 |$M44217|

			 ENDP  ; |BCH_correct_data|


  00050			 AREA	 |.pdata|, PDATA
|$T44227| DCD	|$LN10@BCH8_ECC_I|
	DCD	0x40003c04
; Function compile flags: /Odtp

  00be4			 AREA	 |.text|, CODE, ARM

  00be4		 |BCH8_ECC_Init| PROC

; 482  : {

  00be4		 |$LN10@BCH8_ECC_I|
  00be4	e1a0c00d	 mov         r12, sp
  00be8	e92d0007	 stmdb       sp!, {r0 - r2}
  00bec	e92d5000	 stmdb       sp!, {r12, lr}
  00bf0	e24dd00c	 sub         sp, sp, #0xC
  00bf4		 |$M44224|

; 483  :     UINT32 ecc_conf , ecc_size_conf=0;

  00bf4	e3a03000	 mov         r3, #0
  00bf8	e58d3000	 str         r3, [sp]

; 484  : 
; 485  :     ecc_conf = configMask | GPMC_ECC_CONFIG_BCH | GPMC_ECC_CONFIG_BCH8; 

  00bfc	e59d3018	 ldr         r3, [sp, #0x18]
  00c00	e3833801	 orr         r3, r3, #1, 16
  00c04	e3833a01	 orr         r3, r3, #1, 20
  00c08	e58d3004	 str         r3, [sp, #4]

; 486  : 	
; 487  :     switch (xfer_mode) 

  00c0c	e59d301c	 ldr         r3, [sp, #0x1C]
  00c10	e58d3008	 str         r3, [sp, #8]
  00c14	e59d3008	 ldr         r3, [sp, #8]
  00c18	e3530000	 cmp         r3, #0
  00c1c	0a000003	 beq         |$LN3@BCH8_ECC_I|
  00c20	e59d3008	 ldr         r3, [sp, #8]
  00c24	e3530001	 cmp         r3, #1
  00c28	0a000009	 beq         |$LN2@BCH8_ECC_I|
  00c2c	ea000010	 b           |$LN1@BCH8_ECC_I|
  00c30		 |$LN3@BCH8_ECC_I|

; 488  :     {
; 489  :         case NAND_ECC_READ:
; 490  :           /* configration is for ECC at 2 bytes offset  */
; 491  :           ecc_size_conf = (0x1A << 22) | (0x4 << 12);  

  00c30	e3a0351a	 mov         r3, #0x1A, 10
  00c34	e3833901	 orr         r3, r3, #1, 18
  00c38	e58d3000	 str         r3, [sp]

; 492  :           ecc_conf |= ((0x04 << 8)  | (0x1));

  00c3c	e59d2004	 ldr         r2, [sp, #4]
  00c40	e3a03b01	 mov         r3, #1, 22
  00c44	e3833001	 orr         r3, r3, #1
  00c48	e1823003	 orr         r3, r2, r3
  00c4c	e58d3004	 str         r3, [sp, #4]

; 493  :           break;

  00c50	ea00000a	 b           |$LN4@BCH8_ECC_I|
  00c54		 |$LN2@BCH8_ECC_I|

; 494  : 		  
; 495  :         case NAND_ECC_WRITE:
; 496  :           /* configration is for ECC at 2 bytes offset  */
; 497  :           ecc_size_conf = (0x20 << 22) | (0x00 << 12);

  00c54	e3a03302	 mov         r3, #2, 6
  00c58	e58d3000	 str         r3, [sp]

; 498  :           ecc_conf |= ((0x06 << 8)  |(0x1));

  00c5c	e59d2004	 ldr         r2, [sp, #4]
  00c60	e3a03c06	 mov         r3, #6, 24
  00c64	e3833001	 orr         r3, r3, #1
  00c68	e1823003	 orr         r3, r2, r3
  00c6c	e58d3004	 str         r3, [sp, #4]

; 499  :           break;

  00c70	ea000002	 b           |$LN4@BCH8_ECC_I|
  00c74		 |$LN1@BCH8_ECC_I|

; 500  : 		  
; 501  :         default:
; 502  :           RETAILMSG(1, (L"Error: Unrecognized Mode[%d]!\r\n", xfer_mode));

  00c74	e59d101c	 ldr         r1, [sp, #0x1C]
  00c78	e59f0050	 ldr         r0, [pc, #0x50]
  00c7c	eb000000	 bl          NKDbgPrintfW
  00c80		 |$LN4@BCH8_ECC_I|

; 503  :           break;
; 504  :     }
; 505  : 
; 506  : 
; 507  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_POINTER1);

  00c80	e59d3014	 ldr         r3, [sp, #0x14]
  00c84	e2832f7e	 add         r2, r3, #0x7E, 30
  00c88	e3a03001	 mov         r3, #1
  00c8c	e5823000	 str         r3, [r2]

; 508  :     //  Set ECC field sizes
; 509  :     OUTREG32(&pGpmcRegs->GPMC_ECC_SIZE_CONFIG, ecc_size_conf);

  00c90	e59d3014	 ldr         r3, [sp, #0x14]
  00c94	e2832f7f	 add         r2, r3, #0x7F, 30
  00c98	e59d3000	 ldr         r3, [sp]
  00c9c	e5823000	 str         r3, [r2]

; 510  : 
; 511  :     //  Configure ECC calculator engine for NAND part
; 512  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONFIG, ecc_conf );

  00ca0	e59d3014	 ldr         r3, [sp, #0x14]
  00ca4	e2832f7d	 add         r2, r3, #0x7D, 30
  00ca8	e59d3004	 ldr         r3, [sp, #4]
  00cac	e5823000	 str         r3, [r2]

; 513  : 
; 514  :     //  Select result reg 1 and clear results
; 515  :     OUTREG32(&pGpmcRegs->GPMC_ECC_CONTROL, GPMC_ECC_CONTROL_CLEAR | GPMC_ECC_CONTROL_POINTER1);

  00cb0	e59d3014	 ldr         r3, [sp, #0x14]
  00cb4	e2832f7e	 add         r2, r3, #0x7E, 30
  00cb8	e3a03c01	 mov         r3, #1, 24
  00cbc	e3833001	 orr         r3, r3, #1
  00cc0	e5823000	 str         r3, [r2]

; 516  : }

  00cc4	e28dd00c	 add         sp, sp, #0xC
  00cc8	e89d6000	 ldmia       sp, {sp, lr}
  00ccc	e12fff1e	 bx          lr
  00cd0		 |$LN11@BCH8_ECC_I|
  00cd0		 |$LN12@BCH8_ECC_I|
  00cd0	00000000	 DCD         |??_C@_1EA@JNFKONCC@?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?3?$AA?5?$AAU?$AAn?$AAr?$AAe?$AAc?$AAo?$AAg?$AAn?$AAi?$AAz?$AAe?$AAd?$AA?5?$AAM?$AAo?$AAd?$AAe?$AA?$FL?$AA?$CF?$AAd?$AA?$FN?$AA?$CB?$AA?$AN?$AA?6?$AA?$AA@|
  00cd4		 |$M44225|

			 ENDP  ; |BCH8_ECC_Init|


  00058			 AREA	 |.pdata|, PDATA
|$T44234| DCD	|$LN9@BCH8_ECC_C|
	DCD	0x4000dc04
; Function compile flags: /Odtp

  00cd4			 AREA	 |.text|, CODE, ARM

  00cd4		 |BCH8_ECC_Calculate| PROC

; 526  : {

  00cd4		 |$LN9@BCH8_ECC_C|
  00cd4	e1a0c00d	 mov         r12, sp
  00cd8	e92d0007	 stmdb       sp!, {r0 - r2}
  00cdc	e92d5000	 stmdb       sp!, {r12, lr}
  00ce0	e24dd018	 sub         sp, sp, #0x18
  00ce4		 |$M44231|

; 527  :     UINT8   eccIndex=0;

  00ce4	e3a03000	 mov         r3, #0
  00ce8	e5cd3014	 strb        r3, [sp, #0x14]

; 528  :     UINT32  regVal1, regVal2, regVal3, regVal4, i;
; 529  : 
; 530  :     if(size < ECC_BYTES_BCH8) return;

  00cec	e59d3028	 ldr         r3, [sp, #0x28]
  00cf0	e3530034	 cmp         r3, #0x34
  00cf4	aa000000	 bge         |$LN4@BCH8_ECC_C|
  00cf8	ea0000ce	 b           |$LN5@BCH8_ECC_C|
  00cfc		 |$LN4@BCH8_ECC_C|

; 531  : 	
; 532  :     // the ecc engine is setup encode 512 bytes at a time
; 533  :     // so reading a sectore of 2048 bytes will require 4 sets of encoded
; 534  :     // groups
; 535  :     
; 536  :     for (i=0;i<4;i++)

  00cfc	e3a03000	 mov         r3, #0
  00d00	e58d3000	 str         r3, [sp]
  00d04	ea000002	 b           |$LN3@BCH8_ECC_C|
  00d08		 |$LN2@BCH8_ECC_C|
  00d08	e59d3000	 ldr         r3, [sp]
  00d0c	e2833001	 add         r3, r3, #1
  00d10	e58d3000	 str         r3, [sp]
  00d14		 |$LN3@BCH8_ECC_C|
  00d14	e59d3000	 ldr         r3, [sp]
  00d18	e3530004	 cmp         r3, #4
  00d1c	2a0000c5	 bcs         |$LN1@BCH8_ECC_C|

; 537  :     {
; 538  :         /* Reading HW ECC_BCH_Results
; 539  :          * 0x240-0x24C, 0x250-0x25C, 0x260-0x26C, 0x270-0x27C
; 540  :          */
; 541  :         regVal1 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT0);

  00d20	e59d3020	 ldr         r3, [sp, #0x20]
  00d24	e2831d09	 add         r1, r3, #9, 26
  00d28	e59d2000	 ldr         r2, [sp]
  00d2c	e3a03010	 mov         r3, #0x10
  00d30	e0030392	 mul         r3, r2, r3
  00d34	e0813003	 add         r3, r1, r3
  00d38	e5933000	 ldr         r3, [r3]
  00d3c	e58d3010	 str         r3, [sp, #0x10]

; 542  :         regVal2 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT1);

  00d40	e59d3020	 ldr         r3, [sp, #0x20]
  00d44	e2831d09	 add         r1, r3, #9, 26
  00d48	e59d2000	 ldr         r2, [sp]
  00d4c	e3a03010	 mov         r3, #0x10
  00d50	e0030392	 mul         r3, r2, r3
  00d54	e0813003	 add         r3, r1, r3
  00d58	e2833004	 add         r3, r3, #4
  00d5c	e5933000	 ldr         r3, [r3]
  00d60	e58d3008	 str         r3, [sp, #8]

; 543  :         regVal3 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT2);

  00d64	e59d3020	 ldr         r3, [sp, #0x20]
  00d68	e2831d09	 add         r1, r3, #9, 26
  00d6c	e59d2000	 ldr         r2, [sp]
  00d70	e3a03010	 mov         r3, #0x10
  00d74	e0030392	 mul         r3, r2, r3
  00d78	e0813003	 add         r3, r1, r3
  00d7c	e2833008	 add         r3, r3, #8
  00d80	e5933000	 ldr         r3, [r3]
  00d84	e58d3004	 str         r3, [sp, #4]

; 544  :         regVal4 = INREG32((UINT32*)&pGpmcRegs->GPMC_BCH_RESULT[i].GPMC_BCH_RESULT3);

  00d88	e59d3020	 ldr         r3, [sp, #0x20]
  00d8c	e2831d09	 add         r1, r3, #9, 26
  00d90	e59d2000	 ldr         r2, [sp]
  00d94	e3a03010	 mov         r3, #0x10
  00d98	e0030392	 mul         r3, r2, r3
  00d9c	e0813003	 add         r3, r1, r3
  00da0	e283300c	 add         r3, r3, #0xC
  00da4	e5933000	 ldr         r3, [r3]
  00da8	e58d300c	 str         r3, [sp, #0xC]

; 545  : 
; 546  :         pEcc[eccIndex++]  = (BYTE)(regVal4 & 0xFF);

  00dac	e59d300c	 ldr         r3, [sp, #0xC]
  00db0	e20330ff	 and         r3, r3, #0xFF
  00db4	e20310ff	 and         r1, r3, #0xFF
  00db8	e5dd3014	 ldrb        r3, [sp, #0x14]
  00dbc	e1a02003	 mov         r2, r3
  00dc0	e59d3024	 ldr         r3, [sp, #0x24]
  00dc4	e0833002	 add         r3, r3, r2
  00dc8	e5c31000	 strb        r1, [r3]
  00dcc	e5dd3014	 ldrb        r3, [sp, #0x14]
  00dd0	e2833001	 add         r3, r3, #1
  00dd4	e20330ff	 and         r3, r3, #0xFF
  00dd8	e5cd3014	 strb        r3, [sp, #0x14]

; 547  :         pEcc[eccIndex++]  = (BYTE)((regVal3 >> 24) & 0xFF);

  00ddc	e59d3004	 ldr         r3, [sp, #4]
  00de0	e1a03c23	 mov         r3, r3, lsr #24
  00de4	e20310ff	 and         r1, r3, #0xFF
  00de8	e5dd3014	 ldrb        r3, [sp, #0x14]
  00dec	e1a02003	 mov         r2, r3
  00df0	e59d3024	 ldr         r3, [sp, #0x24]
  00df4	e0833002	 add         r3, r3, r2
  00df8	e5c31000	 strb        r1, [r3]
  00dfc	e5dd3014	 ldrb        r3, [sp, #0x14]
  00e00	e2833001	 add         r3, r3, #1
  00e04	e20330ff	 and         r3, r3, #0xFF
  00e08	e5cd3014	 strb        r3, [sp, #0x14]

; 548  :         pEcc[eccIndex++]  = (BYTE)((regVal3 >> 16) & 0xFF);

  00e0c	e59d3004	 ldr         r3, [sp, #4]
  00e10	e1a03403	 mov         r3, r3, lsl #8
  00e14	e1a03c23	 mov         r3, r3, lsr #24
  00e18	e20310ff	 and         r1, r3, #0xFF
  00e1c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00e20	e1a02003	 mov         r2, r3
  00e24	e59d3024	 ldr         r3, [sp, #0x24]
  00e28	e0833002	 add         r3, r3, r2
  00e2c	e5c31000	 strb        r1, [r3]
  00e30	e5dd3014	 ldrb        r3, [sp, #0x14]
  00e34	e2833001	 add         r3, r3, #1
  00e38	e20330ff	 and         r3, r3, #0xFF
  00e3c	e5cd3014	 strb        r3, [sp, #0x14]

; 549  :         pEcc[eccIndex++]  = (BYTE)((regVal3 >> 8) & 0xFF);

  00e40	e59d3004	 ldr         r3, [sp, #4]
  00e44	e1a03803	 mov         r3, r3, lsl #16
  00e48	e1a03c23	 mov         r3, r3, lsr #24
  00e4c	e20310ff	 and         r1, r3, #0xFF
  00e50	e5dd3014	 ldrb        r3, [sp, #0x14]
  00e54	e1a02003	 mov         r2, r3
  00e58	e59d3024	 ldr         r3, [sp, #0x24]
  00e5c	e0833002	 add         r3, r3, r2
  00e60	e5c31000	 strb        r1, [r3]
  00e64	e5dd3014	 ldrb        r3, [sp, #0x14]
  00e68	e2833001	 add         r3, r3, #1
  00e6c	e20330ff	 and         r3, r3, #0xFF
  00e70	e5cd3014	 strb        r3, [sp, #0x14]

; 550  :         pEcc[eccIndex++]  = (BYTE)(regVal3 & 0xFF);

  00e74	e59d3004	 ldr         r3, [sp, #4]
  00e78	e20330ff	 and         r3, r3, #0xFF
  00e7c	e20310ff	 and         r1, r3, #0xFF
  00e80	e5dd3014	 ldrb        r3, [sp, #0x14]
  00e84	e1a02003	 mov         r2, r3
  00e88	e59d3024	 ldr         r3, [sp, #0x24]
  00e8c	e0833002	 add         r3, r3, r2
  00e90	e5c31000	 strb        r1, [r3]
  00e94	e5dd3014	 ldrb        r3, [sp, #0x14]
  00e98	e2833001	 add         r3, r3, #1
  00e9c	e20330ff	 and         r3, r3, #0xFF
  00ea0	e5cd3014	 strb        r3, [sp, #0x14]

; 551  :         pEcc[eccIndex++]  = (BYTE)((regVal2 >> 24) & 0xFF);

  00ea4	e59d3008	 ldr         r3, [sp, #8]
  00ea8	e1a03c23	 mov         r3, r3, lsr #24
  00eac	e20310ff	 and         r1, r3, #0xFF
  00eb0	e5dd3014	 ldrb        r3, [sp, #0x14]
  00eb4	e1a02003	 mov         r2, r3
  00eb8	e59d3024	 ldr         r3, [sp, #0x24]
  00ebc	e0833002	 add         r3, r3, r2
  00ec0	e5c31000	 strb        r1, [r3]
  00ec4	e5dd3014	 ldrb        r3, [sp, #0x14]
  00ec8	e2833001	 add         r3, r3, #1
  00ecc	e20330ff	 and         r3, r3, #0xFF
  00ed0	e5cd3014	 strb        r3, [sp, #0x14]

; 552  :    
; 553  :         pEcc[eccIndex++]  = (BYTE)((regVal2 >> 16) & 0xFF);

  00ed4	e59d3008	 ldr         r3, [sp, #8]
  00ed8	e1a03403	 mov         r3, r3, lsl #8
  00edc	e1a03c23	 mov         r3, r3, lsr #24
  00ee0	e20310ff	 and         r1, r3, #0xFF
  00ee4	e5dd3014	 ldrb        r3, [sp, #0x14]
  00ee8	e1a02003	 mov         r2, r3
  00eec	e59d3024	 ldr         r3, [sp, #0x24]
  00ef0	e0833002	 add         r3, r3, r2
  00ef4	e5c31000	 strb        r1, [r3]
  00ef8	e5dd3014	 ldrb        r3, [sp, #0x14]
  00efc	e2833001	 add         r3, r3, #1
  00f00	e20330ff	 and         r3, r3, #0xFF
  00f04	e5cd3014	 strb        r3, [sp, #0x14]

; 554  :         pEcc[eccIndex++]  = (BYTE)((regVal2 >> 8) & 0xFF);

  00f08	e59d3008	 ldr         r3, [sp, #8]
  00f0c	e1a03803	 mov         r3, r3, lsl #16
  00f10	e1a03c23	 mov         r3, r3, lsr #24
  00f14	e20310ff	 and         r1, r3, #0xFF
  00f18	e5dd3014	 ldrb        r3, [sp, #0x14]
  00f1c	e1a02003	 mov         r2, r3
  00f20	e59d3024	 ldr         r3, [sp, #0x24]
  00f24	e0833002	 add         r3, r3, r2
  00f28	e5c31000	 strb        r1, [r3]
  00f2c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00f30	e2833001	 add         r3, r3, #1
  00f34	e20330ff	 and         r3, r3, #0xFF
  00f38	e5cd3014	 strb        r3, [sp, #0x14]

; 555  :         pEcc[eccIndex++]  = (BYTE)(regVal2 & 0xFF);

  00f3c	e59d3008	 ldr         r3, [sp, #8]
  00f40	e20330ff	 and         r3, r3, #0xFF
  00f44	e20310ff	 and         r1, r3, #0xFF
  00f48	e5dd3014	 ldrb        r3, [sp, #0x14]
  00f4c	e1a02003	 mov         r2, r3
  00f50	e59d3024	 ldr         r3, [sp, #0x24]
  00f54	e0833002	 add         r3, r3, r2
  00f58	e5c31000	 strb        r1, [r3]
  00f5c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00f60	e2833001	 add         r3, r3, #1
  00f64	e20330ff	 and         r3, r3, #0xFF
  00f68	e5cd3014	 strb        r3, [sp, #0x14]

; 556  :         pEcc[eccIndex++]  = (BYTE)((regVal1 >> 24) & 0xFF);

  00f6c	e59d3010	 ldr         r3, [sp, #0x10]
  00f70	e1a03c23	 mov         r3, r3, lsr #24
  00f74	e20310ff	 and         r1, r3, #0xFF
  00f78	e5dd3014	 ldrb        r3, [sp, #0x14]
  00f7c	e1a02003	 mov         r2, r3
  00f80	e59d3024	 ldr         r3, [sp, #0x24]
  00f84	e0833002	 add         r3, r3, r2
  00f88	e5c31000	 strb        r1, [r3]
  00f8c	e5dd3014	 ldrb        r3, [sp, #0x14]
  00f90	e2833001	 add         r3, r3, #1
  00f94	e20330ff	 and         r3, r3, #0xFF
  00f98	e5cd3014	 strb        r3, [sp, #0x14]

; 557  :         pEcc[eccIndex++]  = (BYTE)((regVal1 >> 16) & 0xFF);

  00f9c	e59d3010	 ldr         r3, [sp, #0x10]
  00fa0	e1a03403	 mov         r3, r3, lsl #8
  00fa4	e1a03c23	 mov         r3, r3, lsr #24
  00fa8	e20310ff	 and         r1, r3, #0xFF
  00fac	e5dd3014	 ldrb        r3, [sp, #0x14]
  00fb0	e1a02003	 mov         r2, r3
  00fb4	e59d3024	 ldr         r3, [sp, #0x24]
  00fb8	e0833002	 add         r3, r3, r2
  00fbc	e5c31000	 strb        r1, [r3]
  00fc0	e5dd3014	 ldrb        r3, [sp, #0x14]
  00fc4	e2833001	 add         r3, r3, #1
  00fc8	e20330ff	 and         r3, r3, #0xFF
  00fcc	e5cd3014	 strb        r3, [sp, #0x14]

; 558  :         pEcc[eccIndex++]  = (BYTE)((regVal1 >> 8) & 0xFF);

  00fd0	e59d3010	 ldr         r3, [sp, #0x10]
  00fd4	e1a03803	 mov         r3, r3, lsl #16
  00fd8	e1a03c23	 mov         r3, r3, lsr #24
  00fdc	e20310ff	 and         r1, r3, #0xFF
  00fe0	e5dd3014	 ldrb        r3, [sp, #0x14]
  00fe4	e1a02003	 mov         r2, r3
  00fe8	e59d3024	 ldr         r3, [sp, #0x24]
  00fec	e0833002	 add         r3, r3, r2
  00ff0	e5c31000	 strb        r1, [r3]
  00ff4	e5dd3014	 ldrb        r3, [sp, #0x14]
  00ff8	e2833001	 add         r3, r3, #1
  00ffc	e20330ff	 and         r3, r3, #0xFF
  01000	e5cd3014	 strb        r3, [sp, #0x14]

; 559  :         pEcc[eccIndex++]  = (BYTE)(regVal1 & 0xFF);

  01004	e59d3010	 ldr         r3, [sp, #0x10]
  01008	e20330ff	 and         r3, r3, #0xFF
  0100c	e20310ff	 and         r1, r3, #0xFF
  01010	e5dd3014	 ldrb        r3, [sp, #0x14]
  01014	e1a02003	 mov         r2, r3
  01018	e59d3024	 ldr         r3, [sp, #0x24]
  0101c	e0833002	 add         r3, r3, r2
  01020	e5c31000	 strb        r1, [r3]
  01024	e5dd3014	 ldrb        r3, [sp, #0x14]
  01028	e2833001	 add         r3, r3, #1
  0102c	e20330ff	 and         r3, r3, #0xFF
  01030	e5cd3014	 strb        r3, [sp, #0x14]

; 560  : 
; 561  :     }

  01034	eaffff33	 b           |$LN2@BCH8_ECC_C|
  01038		 |$LN1@BCH8_ECC_C|
  01038		 |$LN5@BCH8_ECC_C|

; 562  : 
; 563  :     return;
; 564  : }

  01038	e28dd018	 add         sp, sp, #0x18
  0103c	e89d6000	 ldmia       sp, {sp, lr}
  01040	e12fff1e	 bx          lr
  01044		 |$M44232|

			 ENDP  ; |BCH8_ECC_Calculate|


  00060			 AREA	 |.pdata|, PDATA
|$T44239| DCD	|$LN5@BCH8_ECC_R|
	DCD	0x40000d03
; Function compile flags: /Odtp

  01044			 AREA	 |.text|, CODE, ARM

  01044		 |BCH8_ECC_Reset| PROC

; 571  : {

  01044		 |$LN5@BCH8_ECC_R|
  01044	e1a0c00d	 mov         r12, sp
  01048	e92d0001	 stmdb       sp!, {r0}
  0104c	e92d5000	 stmdb       sp!, {r12, lr}
  01050		 |$M44236|

; 572  :     //  Disable ECC engine
; 573  :     CLRREG32(&pGpmcRegs->GPMC_ECC_CONFIG, GPMC_ECC_CONFIG_ENABLE);

  01050	e59d3008	 ldr         r3, [sp, #8]
  01054	e2833f7d	 add         r3, r3, #0x7D, 30
  01058	e5932000	 ldr         r2, [r3]
  0105c	e3e03001	 mvn         r3, #1
  01060	e0022003	 and         r2, r2, r3
  01064	e59d3008	 ldr         r3, [sp, #8]
  01068	e2833f7d	 add         r3, r3, #0x7D, 30
  0106c	e5832000	 str         r2, [r3]

; 574  : }

  01070	e89d6000	 ldmia       sp, {sp, lr}
  01074	e12fff1e	 bx          lr
  01078		 |$M44237|

			 ENDP  ; |BCH8_ECC_Reset|


  00068			 AREA	 |.pdata|, PDATA
|$T44248| DCD	|$LN7@BCH8_ECC_C@2|
	DCD	0x40002004
; Function compile flags: /Odtp

  01078			 AREA	 |.text|, CODE, ARM

  01078		 |BCH8_ECC_CorrectData| PROC

; 597  : {

  01078		 |$LN7@BCH8_ECC_C@2|
  01078	e1a0c00d	 mov         r12, sp
  0107c	e92d000f	 stmdb       sp!, {r0 - r3}
  01080	e92d5000	 stmdb       sp!, {r12, lr}
  01084	e24dd020	 sub         sp, sp, #0x20
  01088		 |$M44245|

; 598  :     int ret;
; 599  :     BYTE *read_ecc, *cal_ecc;
; 600  :     
; 601  : 	
; 602  :     UNREFERENCED_PARAMETER(sizeData); 
; 603  : 
; 604  :     read_ecc = (BYTE *)pEccOld;

  01088	e59d3034	 ldr         r3, [sp, #0x34]
  0108c	e58d300c	 str         r3, [sp, #0xC]

; 605  :     cal_ecc = (BYTE *)pEccNew; 

  01090	e59d3038	 ldr         r3, [sp, #0x38]
  01094	e58d3004	 str         r3, [sp, #4]

; 606  : 
; 607  :     ret = BCH_correct_data(pGpmcRegs, pData, read_ecc, cal_ecc, 8);

  01098	e3a03008	 mov         r3, #8
  0109c	e58d3000	 str         r3, [sp]
  010a0	e59d3004	 ldr         r3, [sp, #4]
  010a4	e59d200c	 ldr         r2, [sp, #0xC]
  010a8	e59d102c	 ldr         r1, [sp, #0x2C]
  010ac	e59d0028	 ldr         r0, [sp, #0x28]
  010b0	eb000000	 bl          BCH_correct_data
  010b4	e58d0018	 str         r0, [sp, #0x18]
  010b8	e59d3018	 ldr         r3, [sp, #0x18]
  010bc	e58d3008	 str         r3, [sp, #8]

; 608  : 
; 609  :     return (ret>=0? TRUE : FALSE);

  010c0	e59d3008	 ldr         r3, [sp, #8]
  010c4	e3530000	 cmp         r3, #0
  010c8	ba000002	 blt         |$LN3@BCH8_ECC_C@2|
  010cc	e3a03001	 mov         r3, #1
  010d0	e58d301c	 str         r3, [sp, #0x1C]
  010d4	ea000001	 b           |$LN4@BCH8_ECC_C@2|
  010d8		 |$LN3@BCH8_ECC_C@2|
  010d8	e3a03000	 mov         r3, #0
  010dc	e58d301c	 str         r3, [sp, #0x1C]
  010e0		 |$LN4@BCH8_ECC_C@2|
  010e0	e59d301c	 ldr         r3, [sp, #0x1C]
  010e4	e58d3014	 str         r3, [sp, #0x14]

; 610  : }

  010e8	e59d0014	 ldr         r0, [sp, #0x14]
  010ec	e28dd020	 add         sp, sp, #0x20
  010f0	e89d6000	 ldmia       sp, {sp, lr}
  010f4	e12fff1e	 bx          lr
  010f8		 |$M44246|

			 ENDP  ; |BCH8_ECC_CorrectData|

	EXPORT	|??_C@_1EI@LMGHLBK@?$AAE?$AAC?$AAC?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAe?$AAc?$AAc?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?$CF@| [ DATA ] ; `string'
	EXPORT	|ECC_Init|

  00070			 AREA	 |.pdata|, PDATA
|$T44253| DCD	|$LN12@ECC_Init|
	DCD	0x40003304

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1EI@LMGHLBK@?$AAE?$AAC?$AAC?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAe?$AAc?$AAc?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?$CF@| DCB "E"
	DCB	0x0, "C", 0x0, "C", 0x0, "_", 0x0, "I", 0x0, "n", 0x0, "i"
	DCB	0x0, "t", 0x0, ":", 0x0, " ", 0x0, "u", 0x0, "n", 0x0, "s"
	DCB	0x0, "u", 0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t"
	DCB	0x0, "e", 0x0, "d", 0x0, " ", 0x0, "e", 0x0, "c", 0x0, "c"
	DCB	0x0, " ", 0x0, "m", 0x0, "o", 0x0, "d", 0x0, "e", 0x0, ":"
	DCB	0x0, "%", 0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'
; Function compile flags: /Odtp

  010f8			 AREA	 |.text|, CODE, ARM

  010f8		 |ECC_Init| PROC

; 648  : {

  010f8		 |$LN12@ECC_Init|
  010f8	e1a0c00d	 mov         r12, sp
  010fc	e92d000f	 stmdb       sp!, {r0 - r3}
  01100	e92d5000	 stmdb       sp!, {r12, lr}
  01104	e24dd004	 sub         sp, sp, #4
  01108		 |$M44250|

; 649  :     /* Initialize function table then call ecc_init */
; 650  :     switch(ECC_mode)

  01108	e59d3014	 ldr         r3, [sp, #0x14]
  0110c	e58d3000	 str         r3, [sp]
  01110	e59d3000	 ldr         r3, [sp]
  01114	e3530000	 cmp         r3, #0
  01118	0a000006	 beq         |$LN5@ECC_Init|
  0111c	e59d3000	 ldr         r3, [sp]
  01120	e3530001	 cmp         r3, #1
  01124	0a000007	 beq         |$LN4@ECC_Init|
  01128	e59d3000	 ldr         r3, [sp]
  0112c	e3530002	 cmp         r3, #2
  01130	0a000008	 beq         |$LN3@ECC_Init|
  01134	ea00000b	 b           |$LN2@ECC_Init|
  01138		 |$LN5@ECC_Init|

; 651  :     {
; 652  :         case Hamming1bit:
; 653  :             gpmc_ecc_func = &gpmc_ecc_hamming_code;

  01138	e59f2080	 ldr         r2, [pc, #0x80]
  0113c	e59f306c	 ldr         r3, [pc, #0x6C]
  01140	e5832000	 str         r2, [r3]

; 654  : 	    break;

  01144	ea00000a	 b           |$LN6@ECC_Init|
  01148		 |$LN4@ECC_Init|

; 655  : 
; 656  :         case BCH4bit:
; 657  :             gpmc_ecc_func = &gpmc_ecc_bch_4bits;

  01148	e59f206c	 ldr         r2, [pc, #0x6C]
  0114c	e59f305c	 ldr         r3, [pc, #0x5C]
  01150	e5832000	 str         r2, [r3]

; 658  : 	    break;

  01154	ea000006	 b           |$LN6@ECC_Init|
  01158		 |$LN3@ECC_Init|

; 659  : 
; 660  :         case BCH8bit:
; 661  :             gpmc_ecc_func = &gpmc_ecc_bch_8bits;

  01158	e59f2058	 ldr         r2, [pc, #0x58]
  0115c	e59f304c	 ldr         r3, [pc, #0x4C]
  01160	e5832000	 str         r2, [r3]

; 662  : 	    break;

  01164	ea000002	 b           |$LN6@ECC_Init|
  01168		 |$LN2@ECC_Init|

; 663  : 
; 664  :         default:
; 665  :            RETAILMSG(TRUE, (L"ECC_Init: unsupported ecc mode:%d\r\n", ECC_mode));

  01168	e59d1014	 ldr         r1, [sp, #0x14]
  0116c	e59f0040	 ldr         r0, [pc, #0x40]
  01170	eb000000	 bl          NKDbgPrintfW
  01174		 |$LN6@ECC_Init|

; 666  : 	    break;
; 667  :     }
; 668  :     if(gpmc_ecc_func != NULL)

  01174	e59f3034	 ldr         r3, [pc, #0x34]
  01178	e5933000	 ldr         r3, [r3]
  0117c	e3530000	 cmp         r3, #0
  01180	0a000007	 beq         |$LN1@ECC_Init|

; 669  :         gpmc_ecc_func->ecc_init(pGpmcRegs, configMask, xfer_mode);

  01184	e59d2018	 ldr         r2, [sp, #0x18]
  01188	e59d1010	 ldr         r1, [sp, #0x10]
  0118c	e59d000c	 ldr         r0, [sp, #0xC]
  01190	e59f3018	 ldr         r3, [pc, #0x18]
  01194	e5933000	 ldr         r3, [r3]
  01198	e5933000	 ldr         r3, [r3]
  0119c	e1a0e00f	 mov         lr, pc
  011a0	e12fff13	 bx          r3
  011a4		 |$LN1@ECC_Init|

; 670  : }

  011a4	e28dd004	 add         sp, sp, #4
  011a8	e89d6000	 ldmia       sp, {sp, lr}
  011ac	e12fff1e	 bx          lr
  011b0		 |$LN13@ECC_Init|
  011b0		 |$LN14@ECC_Init|
  011b0	00000000	 DCD         |gpmc_ecc_func|
  011b4		 |$LN15@ECC_Init|
  011b4	00000000	 DCD         |??_C@_1EI@LMGHLBK@?$AAE?$AAC?$AAC?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAu?$AAn?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAe?$AAd?$AA?5?$AAe?$AAc?$AAc?$AA?5?$AAm?$AAo?$AAd?$AAe?$AA?3?$AA?$CF@|
  011b8		 |$LN16@ECC_Init|
  011b8	00000000	 DCD         |gpmc_ecc_bch_8bits|
  011bc		 |$LN17@ECC_Init|
  011bc	00000000	 DCD         |gpmc_ecc_bch_4bits|
  011c0		 |$LN18@ECC_Init|
  011c0	00000000	 DCD         |gpmc_ecc_hamming_code|
  011c4		 |$M44251|

			 ENDP  ; |ECC_Init|

	EXPORT	|ECC_Result|

  00078			 AREA	 |.pdata|, PDATA
|$T44264| DCD	|$LN6@ECC_Result|
	DCD	0x40001303
; Function compile flags: /Odtp

  011c4			 AREA	 |.text|, CODE, ARM

  011c4		 |ECC_Result| PROC

; 679  : {

  011c4		 |$LN6@ECC_Result|
  011c4	e1a0c00d	 mov         r12, sp
  011c8	e92d0007	 stmdb       sp!, {r0 - r2}
  011cc	e92d5000	 stmdb       sp!, {r12, lr}
  011d0		 |$M44261|

; 680  :     if(gpmc_ecc_func != NULL)

  011d0	e59f3034	 ldr         r3, [pc, #0x34]
  011d4	e5933000	 ldr         r3, [r3]
  011d8	e3530000	 cmp         r3, #0
  011dc	0a000008	 beq         |$LN1@ECC_Result|

; 681  :         gpmc_ecc_func->ecc_calculate(pGpmcRegs, pEcc, size);

  011e0	e59d2010	 ldr         r2, [sp, #0x10]
  011e4	e59d100c	 ldr         r1, [sp, #0xC]
  011e8	e59d0008	 ldr         r0, [sp, #8]
  011ec	e59f3018	 ldr         r3, [pc, #0x18]
  011f0	e5933000	 ldr         r3, [r3]
  011f4	e2833004	 add         r3, r3, #4
  011f8	e5933000	 ldr         r3, [r3]
  011fc	e1a0e00f	 mov         lr, pc
  01200	e12fff13	 bx          r3
  01204		 |$LN1@ECC_Result|

; 682  : }

  01204	e89d6000	 ldmia       sp, {sp, lr}
  01208	e12fff1e	 bx          lr
  0120c		 |$LN7@ECC_Result|
  0120c		 |$LN8@ECC_Result|
  0120c	00000000	 DCD         |gpmc_ecc_func|
  01210		 |$M44262|

			 ENDP  ; |ECC_Result|

	EXPORT	|ECC_Reset|

  00080			 AREA	 |.pdata|, PDATA
|$T44271| DCD	|$LN6@ECC_Reset|
	DCD	0x40001103
; Function compile flags: /Odtp

  01210			 AREA	 |.text|, CODE, ARM

  01210		 |ECC_Reset| PROC

; 689  : {

  01210		 |$LN6@ECC_Reset|
  01210	e1a0c00d	 mov         r12, sp
  01214	e92d0001	 stmdb       sp!, {r0}
  01218	e92d5000	 stmdb       sp!, {r12, lr}
  0121c		 |$M44268|

; 690  :     if(gpmc_ecc_func != NULL)

  0121c	e59f302c	 ldr         r3, [pc, #0x2C]
  01220	e5933000	 ldr         r3, [r3]
  01224	e3530000	 cmp         r3, #0
  01228	0a000006	 beq         |$LN1@ECC_Reset|

; 691  :         gpmc_ecc_func->ecc_reset(pGpmcRegs);

  0122c	e59d0008	 ldr         r0, [sp, #8]
  01230	e59f3018	 ldr         r3, [pc, #0x18]
  01234	e5933000	 ldr         r3, [r3]
  01238	e2833008	 add         r3, r3, #8
  0123c	e5933000	 ldr         r3, [r3]
  01240	e1a0e00f	 mov         lr, pc
  01244	e12fff13	 bx          r3
  01248		 |$LN1@ECC_Reset|

; 692  : }

  01248	e89d6000	 ldmia       sp, {sp, lr}
  0124c	e12fff1e	 bx          lr
  01250		 |$LN7@ECC_Reset|
  01250		 |$LN8@ECC_Reset|
  01250	00000000	 DCD         |gpmc_ecc_func|
  01254		 |$M44269|

			 ENDP  ; |ECC_Reset|

	EXPORT	|ECC_CorrectData|

  00088			 AREA	 |.pdata|, PDATA
|$T44280| DCD	|$LN6@ECC_Correc|
	DCD	0x40002004
; Function compile flags: /Odtp

  01254			 AREA	 |.text|, CODE, ARM

  01254		 |ECC_CorrectData| PROC

; 715  : {

  01254		 |$LN6@ECC_Correc|
  01254	e1a0c00d	 mov         r12, sp
  01258	e92d000f	 stmdb       sp!, {r0 - r3}
  0125c	e92d5010	 stmdb       sp!, {r4, r12, lr}
  01260	e24dd014	 sub         sp, sp, #0x14
  01264		 |$M44277|

; 716  :     BOOL rc=FALSE;

  01264	e3a03000	 mov         r3, #0
  01268	e58d3004	 str         r3, [sp, #4]

; 717  : 	
; 718  :     if(gpmc_ecc_func != NULL)

  0126c	e59f305c	 ldr         r3, [pc, #0x5C]
  01270	e5933000	 ldr         r3, [r3]
  01274	e3530000	 cmp         r3, #0
  01278	0a00000e	 beq         |$LN1@ECC_Correc|

; 719  :         rc = gpmc_ecc_func->ecc_correct_data(pGpmcRegs, pData, sizeData, pEccOld, pEccNew);

  0127c	e59d3030	 ldr         r3, [sp, #0x30]
  01280	e58d3000	 str         r3, [sp]
  01284	e59d302c	 ldr         r3, [sp, #0x2C]
  01288	e59d2028	 ldr         r2, [sp, #0x28]
  0128c	e59d1024	 ldr         r1, [sp, #0x24]
  01290	e59d0020	 ldr         r0, [sp, #0x20]
  01294	e59fe034	 ldr         lr, [pc, #0x34]
  01298	e59ee000	 ldr         lr, [lr]
  0129c	e28ee00c	 add         lr, lr, #0xC
  012a0	e59e4000	 ldr         r4, [lr]
  012a4	e1a0e00f	 mov         lr, pc
  012a8	e12fff14	 bx          r4
  012ac	e58d0010	 str         r0, [sp, #0x10]
  012b0	e59d3010	 ldr         r3, [sp, #0x10]
  012b4	e58d3004	 str         r3, [sp, #4]
  012b8		 |$LN1@ECC_Correc|

; 720  : 	
; 721  :     return rc;

  012b8	e59d3004	 ldr         r3, [sp, #4]
  012bc	e58d300c	 str         r3, [sp, #0xC]

; 722  : }

  012c0	e59d000c	 ldr         r0, [sp, #0xC]
  012c4	e28dd014	 add         sp, sp, #0x14
  012c8	e89d6010	 ldmia       sp, {r4, sp, lr}
  012cc	e12fff1e	 bx          lr
  012d0		 |$LN7@ECC_Correc|
  012d0		 |$LN8@ECC_Correc|
  012d0	00000000	 DCD         |gpmc_ecc_func|
  012d4		 |$M44278|

			 ENDP  ; |ECC_CorrectData|

	END
