; Listing generated by Microsoft (R) Optimizing Compiler Version 14.01.60511.01 

	TTL	C:\WINCE600\PLATFORM\COMMON\SRC\SOC\COMMON_TI_V1\COMMON_TI\BLOCK\NAND\fmd.c
	CODE32

  00000			 AREA	 |.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|??_C@_1BA@HGCBINMF@?$AAE?$AAC?$AAC?$AAt?$AAy?$AAp?$AAe?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1O@LBBNFMDB@?$AAM?$AAe?$AAm?$AAL?$AAe?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| [ DATA ] ; `string'

  00000			 AREA	 |.bss|, NOINIT
|s_hNand| %	0x4

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@HGCBINMF@?$AAE?$AAC?$AAC?$AAt?$AAy?$AAp?$AAe?$AA?$AA@| DCB "E", 0x0
	DCB	"C", 0x0, "C", 0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@| DCB "T", 0x0
	DCB	"i", 0x0, "m", 0x0, "e", 0x0, "o", 0x0, "u", 0x0, "t", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1O@LBBNFMDB@?$AAM?$AAe?$AAm?$AAL?$AAe?$AAn?$AA?$AA@| DCB "M", 0x0, "e"
	DCB	0x0, "m", 0x0, "L", 0x0, "e", 0x0, "n", 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@| DCB "M", 0x0
	DCB	"e", 0x0, "m", 0x0, "B", 0x0, "a", 0x0, "s", 0x0, "e", 0x0
	DCB	0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|EdbgVendorIds| DCW 0x0
	DCW	0x0
	DCD	0x4033
	DCB	0x1
	DCB	"AD", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x4005
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x1050
	DCW	0x940
	DCD	0x2078
	DCB	0x1
	DCB	"LS", 0x0
	DCW	0x10ec
	DCW	0x8029
	DCD	0xc0f0
	DCB	0x1
	DCB	"KS", 0x0
	DCW	0x10ec
	DCW	0x8129
	DCD	0x0
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0x900b
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xd0c9
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x10ec
	DCW	0x8139
	DCD	0xe04c
	DCB	0x4
	DCB	"RT", 0x0
	DCW	0x1186
	DCW	0x1300
	DCD	0x50ba
	DCB	0x4
	DCB	"DL", 0x0
	DCW	0x100b
	DCW	0x20
	DCD	0xa0cc
	DCB	0x5
	DCB	"NG", 0x0
	DCW	0x10b7
	DCW	0x9050
	DCD	0x6008
	DCB	0x6
	DCB	"3C", 0x0
	DCW	0x10b7
	DCW	0x9200
	DCD	0x476
	DCB	0x6
	DCB	"3C", 0x0
|g_deviceRegParams| DCD |??_C@_1BA@INLDIDEN@?$AAM?$AAe?$AAm?$AAB?$AAa?$AAs?$AAe?$AA?$AA@|
	DCD	0x3
	DCD	0x1
	DCD	0x30
	DCD	0x8
	DCD	0x0
	DCD	|??_C@_1O@LBBNFMDB@?$AAM?$AAe?$AAm?$AAL?$AAe?$AAn?$AA?$AA@|
	DCD	0x3
	DCD	0x1
	DCD	0x38
	DCD	0x8
	DCD	0x0
	DCD	|??_C@_1BA@BKONPLFM@?$AAT?$AAi?$AAm?$AAe?$AAo?$AAu?$AAt?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x40
	DCD	0x4
	DCD	0x1388
	DCD	|??_C@_1BA@HGCBINMF@?$AAE?$AAC?$AAC?$AAt?$AAy?$AAp?$AAe?$AA?$AA@|
	DCD	0x1
	DCD	0x0
	DCD	0x60
	DCD	0x4
	DCD	0x0
	EXPORT	|??_C@_1HI@CFGHCDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAF?$AAM?$AAD?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1GO@NGKMIDFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAF?$AAM?$AAD@| [ DATA ] ; `string'
	EXPORT	|InitializePointers|
	IMPORT	|MmMapIoSpace|
	IMPORT	|NKDbgPrintfW|
	IMPORT	|GetDeviceRegistryParams|
	IMPORT	|InitializeCriticalSection|

  00000			 AREA	 |.pdata|, PDATA
|$T46607| DCD	|$LN8@Initialize|
	DCD	0x40006104
; File c:\wince600\platform\common\src\soc\common_ti_v1\common_ti\block\nand\fmd.c

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HI@CFGHCDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAF?$AAM?$AAD?$AA?5@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "m"
	DCB	0x0, "a", 0x0, "p", 0x0, " ", 0x0, "F", 0x0, "M", 0x0, "D"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i", 0x0, "s"
	DCB	0x0, "t", 0x0, "e", 0x0, "r", 0x0, "s", 0x0, " ", 0x0, "("
	DCB	0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8", 0x0, "x"
	DCB	0x0, "/", 0x0, "0", 0x0, "x", 0x0, "%", 0x0, "0", 0x0, "8"
	DCB	0x0, "x", 0x0, ")", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1GO@NGKMIDFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAF?$AAM?$AAD@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "F", 0x0, "M", 0x0, "D", 0x0, "_", 0x0, "I", 0x0, "n"
	DCB	0x0, "i", 0x0, "t", 0x0, ":", 0x0, " ", 0x0, "F", 0x0, "a"
	DCB	0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " ", 0x0, "r"
	DCB	0x0, "e", 0x0, "a", 0x0, "d", 0x0, " ", 0x0, "F", 0x0, "M"
	DCB	0x0, "D", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "g", 0x0, "i"
	DCB	0x0, "s", 0x0, "t", 0x0, "r", 0x0, "y", 0x0, " ", 0x0, "p"
	DCB	0x0, "a", 0x0, "r", 0x0, "a", 0x0, "m", 0x0, "e", 0x0, "t"
	DCB	0x0, "e", 0x0, "r", 0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0
	DCB	0x0					; `string'
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |InitializePointers| PROC

; 263  : {

  00000		 |$LN8@Initialize|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd018	 sub         sp, sp, #0x18
  00010		 |$M46604|

; 264  : #ifdef BOOT_MODE
; 265  :     UNREFERENCED_PARAMETER(szContext);
; 266  :     UNREFERENCED_PARAMETER(pDevice);
; 267  : #else
; 268  :     PHYSICAL_ADDRESS pa;
; 269  :     InitializeCriticalSection(&pDevice->cs);

  00010	e59d0024	 ldr         r0, [sp, #0x24]
  00014	eb000000	 bl          InitializeCriticalSection

; 270  : 
; 271  :     // Read device parameters
; 272  :     if (GetDeviceRegistryParams(
; 273  :             szContext, pDevice, dimof(g_deviceRegParams), g_deviceRegParams
; 274  :             ) != ERROR_SUCCESS)

  00018	e59f3160	 ldr         r3, [pc, #0x160]
  0001c	e3a02004	 mov         r2, #4
  00020	e59d1024	 ldr         r1, [sp, #0x24]
  00024	e59d0020	 ldr         r0, [sp, #0x20]
  00028	eb000000	 bl          GetDeviceRegistryParams
  0002c	e58d000c	 str         r0, [sp, #0xC]
  00030	e59d300c	 ldr         r3, [sp, #0xC]
  00034	e3530000	 cmp         r3, #0
  00038	0a000004	 beq         |$LN3@Initialize|

; 275  :         {
; 276  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: FMD_Init: "
; 277  :             L"Failed read FMD registry parameters\r\n"
; 278  :             ));

  0003c	e59f0138	 ldr         r0, [pc, #0x138]
  00040	eb000000	 bl          NKDbgPrintfW

; 279  :         return FALSE;

  00044	e3a03000	 mov         r3, #0
  00048	e58d3008	 str         r3, [sp, #8]
  0004c	ea000045	 b           |$LN4@Initialize|
  00050		 |$LN3@Initialize|

; 280  :         }
; 281  : 
; 282  :     pa.QuadPart = pDevice->memBase[0];

  00050	e59d3024	 ldr         r3, [sp, #0x24]
  00054	e2833030	 add         r3, r3, #0x30
  00058	e5933000	 ldr         r3, [r3]
  0005c	e58d3000	 str         r3, [sp]
  00060	e3a03000	 mov         r3, #0
  00064	e58d3004	 str         r3, [sp, #4]

; 283  :     pDevice->pGpmcRegs = MmMapIoSpace(pa, pDevice->memLen[0], FALSE);

  00068	e3a03000	 mov         r3, #0
  0006c	e59d2024	 ldr         r2, [sp, #0x24]
  00070	e2822038	 add         r2, r2, #0x38
  00074	e5922000	 ldr         r2, [r2]
  00078	e59d0000	 ldr         r0, [sp]
  0007c	e59d1004	 ldr         r1, [sp, #4]
  00080	eb000000	 bl          MmMapIoSpace
  00084	e58d0010	 str         r0, [sp, #0x10]
  00088	e59d3024	 ldr         r3, [sp, #0x24]
  0008c	e283202c	 add         r2, r3, #0x2C
  00090	e59d3010	 ldr         r3, [sp, #0x10]
  00094	e5823000	 str         r3, [r2]

; 284  :     if (pDevice->pGpmcRegs == NULL)

  00098	e59d3024	 ldr         r3, [sp, #0x24]
  0009c	e283302c	 add         r3, r3, #0x2C
  000a0	e5933000	 ldr         r3, [r3]
  000a4	e3530000	 cmp         r3, #0
  000a8	1a00000a	 bne         |$LN2@Initialize|

; 285  :         {
; 286  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: FMD_Init: "
; 287  :             L"Failed map FMD registers (0x%08x/0x%08x)\r\n",
; 288  :             pDevice->memBase[0], pDevice->memLen[0]
; 289  :             ));

  000ac	e59d3024	 ldr         r3, [sp, #0x24]
  000b0	e2833038	 add         r3, r3, #0x38
  000b4	e5932000	 ldr         r2, [r3]
  000b8	e59d3024	 ldr         r3, [sp, #0x24]
  000bc	e2833030	 add         r3, r3, #0x30
  000c0	e5931000	 ldr         r1, [r3]
  000c4	e59f00ac	 ldr         r0, [pc, #0xAC]
  000c8	eb000000	 bl          NKDbgPrintfW

; 290  :         return FALSE;

  000cc	e3a03000	 mov         r3, #0
  000d0	e58d3008	 str         r3, [sp, #8]
  000d4	ea000023	 b           |$LN4@Initialize|
  000d8		 |$LN2@Initialize|

; 291  :         }
; 292  : 
; 293  :     pa.QuadPart = pDevice->memBase[1];

  000d8	e59d3024	 ldr         r3, [sp, #0x24]
  000dc	e2833034	 add         r3, r3, #0x34
  000e0	e5933000	 ldr         r3, [r3]
  000e4	e58d3000	 str         r3, [sp]
  000e8	e3a03000	 mov         r3, #0
  000ec	e58d3004	 str         r3, [sp, #4]

; 294  :     pDevice->pFifo = (NANDREG*)MmMapIoSpace(pa, pDevice->memLen[1], FALSE);

  000f0	e3a03000	 mov         r3, #0
  000f4	e59d2024	 ldr         r2, [sp, #0x24]
  000f8	e282203c	 add         r2, r2, #0x3C
  000fc	e5922000	 ldr         r2, [r2]
  00100	e59d0000	 ldr         r0, [sp]
  00104	e59d1004	 ldr         r1, [sp, #4]
  00108	eb000000	 bl          MmMapIoSpace
  0010c	e58d0014	 str         r0, [sp, #0x14]
  00110	e59d3024	 ldr         r3, [sp, #0x24]
  00114	e2832028	 add         r2, r3, #0x28
  00118	e59d3014	 ldr         r3, [sp, #0x14]
  0011c	e5823000	 str         r3, [r2]

; 295  :     if (pDevice->pFifo == NULL)

  00120	e59d3024	 ldr         r3, [sp, #0x24]
  00124	e2833028	 add         r3, r3, #0x28
  00128	e5933000	 ldr         r3, [r3]
  0012c	e3530000	 cmp         r3, #0
  00130	1a00000a	 bne         |$LN1@Initialize|

; 296  :         {
; 297  :         DEBUGMSG(ZONE_ERROR, (L"ERROR: FMD_Init: "
; 298  :             L"Failed map FMD registers (0x%08x/0x%08x)\r\n",
; 299  :             pDevice->memBase[0], pDevice->memLen[0]
; 300  :             ));

  00134	e59d3024	 ldr         r3, [sp, #0x24]
  00138	e2833038	 add         r3, r3, #0x38
  0013c	e5932000	 ldr         r2, [r3]
  00140	e59d3024	 ldr         r3, [sp, #0x24]
  00144	e2833030	 add         r3, r3, #0x30
  00148	e5931000	 ldr         r1, [r3]
  0014c	e59f0024	 ldr         r0, [pc, #0x24]
  00150	eb000000	 bl          NKDbgPrintfW

; 301  :         return FALSE;

  00154	e3a03000	 mov         r3, #0
  00158	e58d3008	 str         r3, [sp, #8]
  0015c	ea000001	 b           |$LN4@Initialize|
  00160		 |$LN1@Initialize|

; 302  :         }
; 303  : #endif
; 304  :      return TRUE;

  00160	e3a03001	 mov         r3, #1
  00164	e58d3008	 str         r3, [sp, #8]
  00168		 |$LN4@Initialize|

; 305  : }

  00168	e59d0008	 ldr         r0, [sp, #8]
  0016c	e28dd018	 add         sp, sp, #0x18
  00170	e89d6000	 ldmia       sp, {sp, lr}
  00174	e12fff1e	 bx          lr
  00178		 |$LN9@Initialize|
  00178		 |$LN10@Initialize|
  00178	00000000	 DCD         |??_C@_1HI@CFGHCDBN@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAm?$AAa?$AAp?$AA?5?$AAF?$AAM?$AAD?$AA?5@|
  0017c		 |$LN11@Initialize|
  0017c	00000000	 DCD         |??_C@_1GO@NGKMIDFP@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AAF?$AAM?$AAD?$AA_?$AAI?$AAn?$AAi?$AAt?$AA?3?$AA?5?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAF?$AAM?$AAD@|
  00180		 |$LN12@Initialize|
  00180	00000000	 DCD         |g_deviceRegParams|
  00184		 |$M46605|

			 ENDP  ; |InitializePointers|

	EXPORT	|NAND_CorrectEccData|
	IMPORT	|ECC_CorrectData|
	IMPORT	|memcmp|

  00008			 AREA	 |.pdata|, PDATA
|$T46618| DCD	|$LN7@NAND_Corre|
	DCD	0x40002804
; Function compile flags: /Odtp

  00184			 AREA	 |.text|, CODE, ARM

  00184		 |NAND_CorrectEccData| PROC

; 866  : {

  00184		 |$LN7@NAND_Corre|
  00184	e1a0c00d	 mov         r12, sp
  00188	e92d000f	 stmdb       sp!, {r0 - r3}
  0018c	e92d5000	 stmdb       sp!, {r12, lr}
  00190	e24dd01c	 sub         sp, sp, #0x1C
  00194		 |$M46615|

; 867  :     BOOL rc = FALSE;

  00194	e3a03000	 mov         r3, #0
  00198	e58d3008	 str         r3, [sp, #8]

; 868  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  0019c	e59d3024	 ldr         r3, [sp, #0x24]
  001a0	e58d3004	 str         r3, [sp, #4]

; 869  :     
; 870  :     // this call assumes the array size of pEccOld and pEccNew are of the 
; 871  :     // correct size to hold all the parity bits of the given size    
; 872  :     if (memcmp(pEccOld, pEccNew, pDevice->ECCsize) != 0)

  001a4	e59d3004	 ldr         r3, [sp, #4]
  001a8	e2833064	 add         r3, r3, #0x64
  001ac	e5932000	 ldr         r2, [r3]
  001b0	e59d1034	 ldr         r1, [sp, #0x34]
  001b4	e59d0030	 ldr         r0, [sp, #0x30]
  001b8	eb000000	 bl          memcmp
  001bc	e58d0014	 str         r0, [sp, #0x14]
  001c0	e59d3014	 ldr         r3, [sp, #0x14]
  001c4	e3530000	 cmp         r3, #0
  001c8	0a00000d	 beq         |$LN2@NAND_Corre|

; 873  :         {
; 874  :         
; 875  :         // check if data is correctable        
; 876  :         if (ECC_CorrectData(pDevice->pGpmcRegs, pData, size, pEccOld, pEccNew) == FALSE)

  001cc	e59d3034	 ldr         r3, [sp, #0x34]
  001d0	e58d3000	 str         r3, [sp]
  001d4	e59d3030	 ldr         r3, [sp, #0x30]
  001d8	e59d202c	 ldr         r2, [sp, #0x2C]
  001dc	e59d1028	 ldr         r1, [sp, #0x28]
  001e0	e59d0004	 ldr         r0, [sp, #4]
  001e4	e280002c	 add         r0, r0, #0x2C
  001e8	e5900000	 ldr         r0, [r0]
  001ec	eb000000	 bl          ECC_CorrectData
  001f0	e58d0018	 str         r0, [sp, #0x18]
  001f4	e59d3018	 ldr         r3, [sp, #0x18]
  001f8	e3530000	 cmp         r3, #0
  001fc	1a000000	 bne         |$LN1@NAND_Corre|

; 877  :             {
; 878  :             goto cleanUp;

  00200	ea000001	 b           |$cleanUp$46325|
  00204		 |$LN1@NAND_Corre|
  00204		 |$LN2@NAND_Corre|

; 879  :             }
; 880  :         }    
; 881  : 
; 882  :     rc = TRUE;

  00204	e3a03001	 mov         r3, #1
  00208	e58d3008	 str         r3, [sp, #8]
  0020c		 |$cleanUp$46325|

; 883  :     
; 884  : cleanUp:
; 885  :     return rc;

  0020c	e59d3008	 ldr         r3, [sp, #8]
  00210	e58d3010	 str         r3, [sp, #0x10]

; 886  : }

  00214	e59d0010	 ldr         r0, [sp, #0x10]
  00218	e28dd01c	 add         sp, sp, #0x1C
  0021c	e89d6000	 ldmia       sp, {sp, lr}
  00220	e12fff1e	 bx          lr
  00224		 |$M46616|

			 ENDP  ; |NAND_CorrectEccData|

	EXPORT	|FMD_Init|

  00010			 AREA	 |.pdata|, PDATA
|$T46624| DCD	|$LN6@FMD_Init|
	DCD	0x40001d04
; Function compile flags: /Odtp

  00224			 AREA	 |.text|, CODE, ARM

  00224		 |FMD_Init| PROC

; 909  : {

  00224		 |$LN6@FMD_Init|
  00224	e1a0c00d	 mov         r12, sp
  00228	e92d0007	 stmdb       sp!, {r0 - r2}
  0022c	e92d5000	 stmdb       sp!, {r12, lr}
  00230	e24dd00c	 sub         sp, sp, #0xC
  00234		 |$M46621|

; 910  :     HANDLE hRet = NULL;

  00234	e3a03000	 mov         r3, #0
  00238	e58d3000	 str         r3, [sp]

; 911  : 
; 912  :     // Map NAND registers
; 913  :     s_hNand = NAND_Initialize(szContext, pRegIn, pRegOut);

  0023c	e59d201c	 ldr         r2, [sp, #0x1C]
  00240	e59d1018	 ldr         r1, [sp, #0x18]
  00244	e59d0014	 ldr         r0, [sp, #0x14]
  00248	eb000000	 bl          NAND_Initialize
  0024c	e58d0008	 str         r0, [sp, #8]
  00250	e59d2008	 ldr         r2, [sp, #8]
  00254	e59f3038	 ldr         r3, [pc, #0x38]
  00258	e5832000	 str         r2, [r3]

; 914  :     if (s_hNand == NULL)

  0025c	e59f3030	 ldr         r3, [pc, #0x30]
  00260	e5933000	 ldr         r3, [r3]
  00264	e3530000	 cmp         r3, #0
  00268	1a000000	 bne         |$LN1@FMD_Init|

; 915  :         {
; 916  :         goto cleanUp;

  0026c	ea000002	 b           |$cleanUp$46344|
  00270		 |$LN1@FMD_Init|

; 917  :         }
; 918  :         
; 919  :     // We are done
; 920  :     hRet = s_hNand;

  00270	e59f301c	 ldr         r3, [pc, #0x1C]
  00274	e5933000	 ldr         r3, [r3]
  00278	e58d3000	 str         r3, [sp]
  0027c		 |$cleanUp$46344|

; 921  : 
; 922  : cleanUp:
; 923  :     return hRet;

  0027c	e59d3000	 ldr         r3, [sp]
  00280	e58d3004	 str         r3, [sp, #4]

; 924  : }

  00284	e59d0004	 ldr         r0, [sp, #4]
  00288	e28dd00c	 add         sp, sp, #0xC
  0028c	e89d6000	 ldmia       sp, {sp, lr}
  00290	e12fff1e	 bx          lr
  00294		 |$LN7@FMD_Init|
  00294		 |$LN8@FMD_Init|
  00294	00000000	 DCD         |s_hNand|
  00298		 |$M46622|

			 ENDP  ; |FMD_Init|

	EXPORT	|??_C@_1HG@DCOIKHPB@?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAo?$AAn?$AAl?$AAy?$AA?5?$AA1?$AA6?$AAb?$AAi?$AAt?$AAs?$AA?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1KM@BKLPJHHD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| [ DATA ] ; `string'
	EXPORT	|??_C@_1CC@BEPLJHBE@?$AAE?$AAC?$AAC?$AA?5?$AAT?$AAY?$AAP?$AAE?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@MLAOIDDC@?$AAB?$AAC?$AAH?$AA?5?$AA8?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BE@MOAEMOLD@?$AAB?$AAC?$AAH?$AA?5?$AA4?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BM@FIEJIIEI@?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|??_C@_1DE@HHCNAOKK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAc?$AAc?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?$AN?$AA?6?$AA?$AA@| [ DATA ] ; `string'
	IMPORT	|ECC_Reset|
	IMPORT	|ECC_Init|
	IMPORT	|BSPGetNandIrqWait|
	IMPORT	|BSPGetNandInfo|
	IMPORT	|KernelIoControl|
	IMPORT	|memset|
	IMPORT	|BSPGetNandCS|
	IMPORT	|memcpy|

  00004			 AREA	 |.bss|, NOINIT
|s_Device| %	0x68

  00018			 AREA	 |.pdata|, PDATA
|$T46643| DCD	|$LN23@NAND_Initi|
	DCD	0x40016204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1HG@DCOIKHPB@?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAo?$AAn?$AAl?$AAy?$AA?5?$AA1?$AA6?$AAb?$AAi?$AAt?$AAs?$AA?5@| DCB "F"
	DCB	0x0, "M", 0x0, "D", 0x0, " ", 0x0, "d", 0x0, "r", 0x0, "i"
	DCB	0x0, "v", 0x0, "e", 0x0, "r", 0x0, " ", 0x0, "s", 0x0, "u"
	DCB	0x0, "p", 0x0, "p", 0x0, "o", 0x0, "r", 0x0, "t", 0x0, "s"
	DCB	0x0, " ", 0x0, "o", 0x0, "n", 0x0, "l", 0x0, "y", 0x0, " "
	DCB	0x0, "1", 0x0, "6", 0x0, "b", 0x0, "i", 0x0, "t", 0x0, "s"
	DCB	0x0, " ", 0x0, "l", 0x0, "a", 0x0, "r", 0x0, "g", 0x0, "e"
	DCB	0x0, " ", 0x0, "p", 0x0, "a", 0x0, "g", 0x0, "e", 0x0, " "
	DCB	0x0, "(", 0x0, "2", 0x0, "K", 0x0, "B", 0x0, ")", 0x0, " "
	DCB	0x0, "d", 0x0, "e", 0x0, "v", 0x0, "i", 0x0, "c", 0x0, "e"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@| DCB "E"
	DCB	0x0, "R", 0x0, "R", 0x0, "O", 0x0, "R", 0x0, ":", 0x0, " "
	DCB	0x0, "%", 0x0, "s", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, ":", 0x0, " "
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1KM@BKLPJHHD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@| DCB "C"
	DCB	0x0, ":", 0x0, "\\", 0x0, "W", 0x0, "I", 0x0, "N", 0x0, "C"
	DCB	0x0, "E", 0x0, "6", 0x0, "0", 0x0, "0", 0x0, "\\", 0x0, "P"
	DCB	0x0, "L", 0x0, "A", 0x0, "T", 0x0, "F", 0x0, "O", 0x0, "R"
	DCB	0x0, "M", 0x0, "\\", 0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M"
	DCB	0x0, "O", 0x0, "N", 0x0, "\\", 0x0, "S", 0x0, "R", 0x0, "C"
	DCB	0x0, "\\", 0x0, "S", 0x0, "O", 0x0, "C", 0x0, "\\", 0x0, "C"
	DCB	0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N", 0x0, "_"
	DCB	0x0, "T", 0x0, "I", 0x0, "_", 0x0, "V", 0x0, "1", 0x0, "\\"
	DCB	0x0, "C", 0x0, "O", 0x0, "M", 0x0, "M", 0x0, "O", 0x0, "N"
	DCB	0x0, "_", 0x0, "T", 0x0, "I", 0x0, "\\", 0x0, "B", 0x0, "L"
	DCB	0x0, "O", 0x0, "C", 0x0, "K", 0x0, "\\", 0x0, "N", 0x0, "A"
	DCB	0x0, "N", 0x0, "D", 0x0, "\\", 0x0, "D", 0x0, "E", 0x0, "V"
	DCB	0x0, "I", 0x0, "C", 0x0, "E", 0x0, "\\", 0x0, ".", 0x0, "."
	DCB	0x0, "\\", 0x0, "f", 0x0, "m", 0x0, "d", 0x0, ".", 0x0, "c"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1CC@BEPLJHBE@?$AAE?$AAC?$AAC?$AA?5?$AAT?$AAY?$AAP?$AAE?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@| DCB "E"
	DCB	0x0, "C", 0x0, "C", 0x0, " ", 0x0, "T", 0x0, "Y", 0x0, "P"
	DCB	0x0, "E", 0x0, " ", 0x0, "i", 0x0, "s", 0x0, " ", 0x0, "%"
	DCB	0x0, "s", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@MLAOIDDC@?$AAB?$AAC?$AAH?$AA?5?$AA8?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "C", 0x0, "H", 0x0, " ", 0x0, "8", 0x0, " ", 0x0, "b"
	DCB	0x0, "i", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BE@MOAEMOLD@?$AAB?$AAC?$AAH?$AA?5?$AA4?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@| DCB "B"
	DCB	0x0, "C", 0x0, "H", 0x0, " ", 0x0, "4", 0x0, " ", 0x0, "b"
	DCB	0x0, "i", 0x0, "t", 0x0, 0x0, 0x0	; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BM@FIEJIIEI@?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@| DCB "H"
	DCB	0x0, "a", 0x0, "m", 0x0, "m", 0x0, "i", 0x0, "n", 0x0, "g"
	DCB	0x0, " ", 0x0, "1", 0x0, " ", 0x0, "b", 0x0, "i", 0x0, "t"
	DCB	0x0, 0x0, 0x0				; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1DE@HHCNAOKK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAc?$AAc?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?$AN?$AA?6?$AA?$AA@| DCB "F"
	DCB	0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d", 0x0, " "
	DCB	0x0, "t", 0x0, "o", 0x0, " ", 0x0, "r", 0x0, "e", 0x0, "a"
	DCB	0x0, "d", 0x0, " ", 0x0, "E", 0x0, "c", 0x0, "c", 0x0, " "
	DCB	0x0, "t", 0x0, "y", 0x0, "p", 0x0, "e", 0x0, 0xd, 0x0, 0xa
	DCB	0x0, 0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00298			 AREA	 |.text|, CODE, ARM

  00298		 |NAND_Initialize| PROC

; 389  : {

  00298		 |$LN23@NAND_Initi|
  00298	e1a0c00d	 mov         r12, sp
  0029c	e92d0007	 stmdb       sp!, {r0 - r2}
  002a0	e92d5000	 stmdb       sp!, {r12, lr}
  002a4	e24dd06c	 sub         sp, sp, #0x6C
  002a8		 |$M46640|

; 390  :     DWORD chipSelect = BSPGetNandCS();

  002a8	eb000000	 bl          BSPGetNandCS
  002ac	e58d003c	 str         r0, [sp, #0x3C]
  002b0	e59d303c	 ldr         r3, [sp, #0x3C]
  002b4	e58d3010	 str         r3, [sp, #0x10]

; 391  :     const NAND_INFO *  pBSPNandInfo;
; 392  :     HANDLE hDevice = NULL;

  002b8	e3a03000	 mov         r3, #0
  002bc	e58d300c	 str         r3, [sp, #0xC]

; 393  :     UINT ffPrefetchMode = 0;

  002c0	e3a03000	 mov         r3, #0
  002c4	e58d301c	 str         r3, [sp, #0x1C]

; 394  :     UINT8 manufacturer, device;
; 395  :     NandDevice_t *pDevice = &s_Device;

  002c8	e59f354c	 ldr         r3, [pc, #0x54C]
  002cc	e58d3008	 str         r3, [sp, #8]

; 396  : #ifndef BOOT_MODE    
; 397  :     DWORD dwKernelRet;
; 398  : #endif
; 399  : 
; 400  :     UNREFERENCED_PARAMETER(pRegOut);
; 401  :     UNREFERENCED_PARAMETER(szContext);
; 402  :     // initialize structure
; 403  :     memset(pDevice, 0, sizeof(NandDevice_t));

  002d0	e3a02068	 mov         r2, #0x68
  002d4	e3a01000	 mov         r1, #0
  002d8	e59d0008	 ldr         r0, [sp, #8]
  002dc	eb000000	 bl          memset

; 404  : 
; 405  : #ifdef BOOT_MODE    
; 406  :     pDevice->pGpmcRegs = (OMAP_GPMC_REGS*)OALPAtoUA(SOCGetGPMCAddress(0));
; 407  :     pDevice->pFifo = (NANDREG*)OALPAtoUA(pRegIn->MemBase.Reg[0]);
; 408  : 
; 409  :     /* Get ECC mode from BootCfg */
; 410  :     pDevice->ECCtype = g_ecctype;
; 411  :     if((pDevice->ECCtype > BCH8bit) || (pDevice->ECCtype < Hamming1bit))
; 412  :     	{
; 413  :             pDevice->ECCtype = Hamming1bit;
; 414  :             RETAILMSG(TRUE, (L"Incorrect ECC type setting\r\n"));			
; 415  :     	}
; 416  : #else    
; 417  :     if (szContext != NULL)

  002e0	e59d3074	 ldr         r3, [sp, #0x74]
  002e4	e3530000	 cmp         r3, #0
  002e8	0a000008	 beq         |$LN10@NAND_Initi|

; 418  :         {
; 419  :         if (InitializePointers(szContext, pDevice) == FALSE) goto cleanUp;

  002ec	e59d1008	 ldr         r1, [sp, #8]
  002f0	e59d0074	 ldr         r0, [sp, #0x74]
  002f4	eb000000	 bl          InitializePointers
  002f8	e58d0040	 str         r0, [sp, #0x40]
  002fc	e59d3040	 ldr         r3, [sp, #0x40]
  00300	e3530000	 cmp         r3, #0
  00304	1a000000	 bne         |$LN9@NAND_Initi|
  00308	ea000134	 b           |$cleanUp$46087|
  0030c		 |$LN9@NAND_Initi|

; 420  :         }
; 421  :     else

  0030c	ea00003b	 b           |$LN8@NAND_Initi|
  00310		 |$LN10@NAND_Initi|

; 422  :         {
; 423  :         PHYSICAL_ADDRESS pa;
; 424  :         
; 425  :         // if there's not context string then use global macros
; 426  : 
; 427  :         pa.QuadPart = pRegIn->MemBase.Reg[0];

  00310	e59d3078	 ldr         r3, [sp, #0x78]
  00314	e2833e31	 add         r3, r3, #0x31, 28
  00318	e5933000	 ldr         r3, [r3]
  0031c	e58d3028	 str         r3, [sp, #0x28]
  00320	e3a03000	 mov         r3, #0
  00324	e58d302c	 str         r3, [sp, #0x2C]

; 428  :         pDevice->memLen[0] = pRegIn->MemLen.Reg[0];

  00328	e59d3078	 ldr         r3, [sp, #0x78]
  0032c	e2831fcb	 add         r1, r3, #0xCB, 30
  00330	e59d3008	 ldr         r3, [sp, #8]
  00334	e2832038	 add         r2, r3, #0x38
  00338	e5913000	 ldr         r3, [r1]
  0033c	e5823000	 str         r3, [r2]

; 429  :         pDevice->pGpmcRegs = MmMapIoSpace(pa, pDevice->memLen[0], FALSE);

  00340	e3a03000	 mov         r3, #0
  00344	e59d2008	 ldr         r2, [sp, #8]
  00348	e2822038	 add         r2, r2, #0x38
  0034c	e5922000	 ldr         r2, [r2]
  00350	e59d0028	 ldr         r0, [sp, #0x28]
  00354	e59d102c	 ldr         r1, [sp, #0x2C]
  00358	eb000000	 bl          MmMapIoSpace
  0035c	e58d0044	 str         r0, [sp, #0x44]
  00360	e59d3008	 ldr         r3, [sp, #8]
  00364	e283202c	 add         r2, r3, #0x2C
  00368	e59d3044	 ldr         r3, [sp, #0x44]
  0036c	e5823000	 str         r3, [r2]

; 430  :         if (pDevice->pGpmcRegs == NULL) goto cleanUp;

  00370	e59d3008	 ldr         r3, [sp, #8]
  00374	e283302c	 add         r3, r3, #0x2C
  00378	e5933000	 ldr         r3, [r3]
  0037c	e3530000	 cmp         r3, #0
  00380	1a000000	 bne         |$LN7@NAND_Initi|
  00384	ea000115	 b           |$cleanUp$46087|
  00388		 |$LN7@NAND_Initi|

; 431  : 
; 432  :         pa.QuadPart = pRegIn->MemBase.Reg[1];

  00388	e59d3078	 ldr         r3, [sp, #0x78]
  0038c	e2833fc5	 add         r3, r3, #0xC5, 30
  00390	e5933000	 ldr         r3, [r3]
  00394	e58d3028	 str         r3, [sp, #0x28]
  00398	e3a03000	 mov         r3, #0
  0039c	e58d302c	 str         r3, [sp, #0x2C]

; 433  :         pDevice->memLen[1] = pRegIn->MemLen.Reg[1];

  003a0	e59d3078	 ldr         r3, [sp, #0x78]
  003a4	e2831e33	 add         r1, r3, #0x33, 28
  003a8	e59d3008	 ldr         r3, [sp, #8]
  003ac	e283203c	 add         r2, r3, #0x3C
  003b0	e5913000	 ldr         r3, [r1]
  003b4	e5823000	 str         r3, [r2]

; 434  :         pDevice->pFifo = MmMapIoSpace(pa, pDevice->memLen[1], FALSE);

  003b8	e3a03000	 mov         r3, #0
  003bc	e59d2008	 ldr         r2, [sp, #8]
  003c0	e282203c	 add         r2, r2, #0x3C
  003c4	e5922000	 ldr         r2, [r2]
  003c8	e59d0028	 ldr         r0, [sp, #0x28]
  003cc	e59d102c	 ldr         r1, [sp, #0x2C]
  003d0	eb000000	 bl          MmMapIoSpace
  003d4	e58d0048	 str         r0, [sp, #0x48]
  003d8	e59d3008	 ldr         r3, [sp, #8]
  003dc	e2832028	 add         r2, r3, #0x28
  003e0	e59d3048	 ldr         r3, [sp, #0x48]
  003e4	e5823000	 str         r3, [r2]

; 435  :         if (pDevice->pGpmcRegs == NULL) goto cleanUp;

  003e8	e59d3008	 ldr         r3, [sp, #8]
  003ec	e283302c	 add         r3, r3, #0x2C
  003f0	e5933000	 ldr         r3, [r3]
  003f4	e3530000	 cmp         r3, #0
  003f8	1a000000	 bne         |$LN6@NAND_Initi|
  003fc	ea0000f7	 b           |$cleanUp$46087|
  00400		 |$LN6@NAND_Initi|
  00400		 |$LN8@NAND_Initi|

; 436  : 
; 437  :         }
; 438  : 
; 439  : 
; 440  :         if (!KernelIoControl(IOCTL_HAL_GET_ECC_TYPE,
; 441  :                              NULL, 0, &pDevice->ECCtype, sizeof(DWORD), &dwKernelRet))

  00400	e28d3018	 add         r3, sp, #0x18
  00404	e58d3004	 str         r3, [sp, #4]
  00408	e3a03004	 mov         r3, #4
  0040c	e58d3000	 str         r3, [sp]
  00410	e59d3008	 ldr         r3, [sp, #8]
  00414	e2833060	 add         r3, r3, #0x60
  00418	e3a02000	 mov         r2, #0
  0041c	e3a01000	 mov         r1, #0
  00420	e59f03f0	 ldr         r0, [pc, #0x3F0]
  00424	eb000000	 bl          KernelIoControl
  00428	e58d004c	 str         r0, [sp, #0x4C]
  0042c	e59d304c	 ldr         r3, [sp, #0x4C]
  00430	e3530000	 cmp         r3, #0
  00434	1a000005	 bne         |$LN5@NAND_Initi|

; 442  :         {
; 443  :             RETAILMSG( TRUE,(TEXT("Failed to read Ecc type\r\n")));

  00438	e59f03d4	 ldr         r0, [pc, #0x3D4]
  0043c	eb000000	 bl          NKDbgPrintfW

; 444  :             pDevice->ECCtype = Hamming1bit;

  00440	e59d3008	 ldr         r3, [sp, #8]
  00444	e2832060	 add         r2, r3, #0x60
  00448	e3a03000	 mov         r3, #0
  0044c	e5823000	 str         r3, [r2]
  00450		 |$LN5@NAND_Initi|

; 445  :         }   
; 446  : 	
; 447  :         RETAILMSG(TRUE, (L"ECC TYPE is %s\r\n", (pDevice->ECCtype==Hamming1bit)? L"Hamming 1 bit" :
; 448  : 			                                                    (pDevice->ECCtype==BCH4bit)? L"BCH 4 bit" : L"BCH 8 bit"));

  00450	e59d3008	 ldr         r3, [sp, #8]
  00454	e2833060	 add         r3, r3, #0x60
  00458	e5933000	 ldr         r3, [r3]
  0045c	e3530000	 cmp         r3, #0
  00460	1a000002	 bne         |$LN15@NAND_Initi|
  00464	e59f33a4	 ldr         r3, [pc, #0x3A4]
  00468	e58d3050	 str         r3, [sp, #0x50]
  0046c	ea00000b	 b           |$LN16@NAND_Initi|
  00470		 |$LN15@NAND_Initi|
  00470	e59d3008	 ldr         r3, [sp, #8]
  00474	e2833060	 add         r3, r3, #0x60
  00478	e5933000	 ldr         r3, [r3]
  0047c	e3530001	 cmp         r3, #1
  00480	1a000002	 bne         |$LN13@NAND_Initi|
  00484	e59f3380	 ldr         r3, [pc, #0x380]
  00488	e58d3054	 str         r3, [sp, #0x54]
  0048c	ea000001	 b           |$LN14@NAND_Initi|
  00490		 |$LN13@NAND_Initi|
  00490	e59f3370	 ldr         r3, [pc, #0x370]
  00494	e58d3054	 str         r3, [sp, #0x54]
  00498		 |$LN14@NAND_Initi|
  00498	e59d3054	 ldr         r3, [sp, #0x54]
  0049c	e58d3050	 str         r3, [sp, #0x50]
  004a0		 |$LN16@NAND_Initi|
  004a0	e59d1050	 ldr         r1, [sp, #0x50]
  004a4	e59f0358	 ldr         r0, [pc, #0x358]
  004a8	eb000000	 bl          NKDbgPrintfW

; 449  : 	
; 450  : #endif
; 451  : 
; 452  :     pDevice->pNandCmd = (NANDREG*)((UINT32)pDevice->pGpmcRegs + offset(OMAP_GPMC_REGS, GPMC_NAND_COMMAND_0) + (0x30 * chipSelect));

  004ac	e59d3008	 ldr         r3, [sp, #8]
  004b0	e283302c	 add         r3, r3, #0x2C
  004b4	e5933000	 ldr         r3, [r3]
  004b8	e283107c	 add         r1, r3, #0x7C
  004bc	e59d2010	 ldr         r2, [sp, #0x10]
  004c0	e3a03030	 mov         r3, #0x30
  004c4	e0030392	 mul         r3, r2, r3
  004c8	e0812003	 add         r2, r1, r3
  004cc	e59d3008	 ldr         r3, [sp, #8]
  004d0	e283301c	 add         r3, r3, #0x1C
  004d4	e5832000	 str         r2, [r3]

; 453  :     pDevice->pNandAddress= (NANDREG*)((UINT32)pDevice->pGpmcRegs + offset(OMAP_GPMC_REGS, GPMC_NAND_ADDRESS_0) + (0x30 * chipSelect));

  004d8	e59d3008	 ldr         r3, [sp, #8]
  004dc	e283302c	 add         r3, r3, #0x2C
  004e0	e5933000	 ldr         r3, [r3]
  004e4	e2831080	 add         r1, r3, #0x80
  004e8	e59d2010	 ldr         r2, [sp, #0x10]
  004ec	e3a03030	 mov         r3, #0x30
  004f0	e0030392	 mul         r3, r2, r3
  004f4	e0812003	 add         r2, r1, r3
  004f8	e59d3008	 ldr         r3, [sp, #8]
  004fc	e2833020	 add         r3, r3, #0x20
  00500	e5832000	 str         r2, [r3]

; 454  :     pDevice->pNandData= (NANDREG*)((UINT32)pDevice->pGpmcRegs + offset(OMAP_GPMC_REGS, GPMC_NAND_DATA_0) + (0x30 * chipSelect));

  00504	e59d3008	 ldr         r3, [sp, #8]
  00508	e283302c	 add         r3, r3, #0x2C
  0050c	e5933000	 ldr         r3, [r3]
  00510	e2831084	 add         r1, r3, #0x84
  00514	e59d2010	 ldr         r2, [sp, #0x10]
  00518	e3a03030	 mov         r3, #0x30
  0051c	e0030392	 mul         r3, r2, r3
  00520	e0812003	 add         r2, r1, r3
  00524	e59d3008	 ldr         r3, [sp, #8]
  00528	e2833024	 add         r3, r3, #0x24
  0052c	e5832000	 str         r2, [r3]

; 455  :     // Enable GPMC wait-to-nowait edge detection mechanism on NAND R/B pin
; 456  :     NAND_Enable(pDevice, TRUE);

  00530	e3a01001	 mov         r1, #1
  00534	e59d0008	 ldr         r0, [sp, #8]
  00538	eb000000	 bl          NAND_Enable

; 457  : 
; 458  :     // Write RESET command
; 459  :     // (a reset aborts any current READ, WRITE (PROGRAM) or ERASE operation)
; 460  :     NAND_SendCommand(pDevice, NAND_CMD_RESET);

  0053c	e3a010ff	 mov         r1, #0xFF
  00540	e59d0008	 ldr         r0, [sp, #8]
  00544	eb000000	 bl          NAND_SendCommand
  00548		 |$LN4@NAND_Initi|

; 461  : 
; 462  :     // Wait for NAND
; 463  :     while ((NAND_GetStatus(pDevice) & NAND_STATUS_READY) == 0);

  00548	e59d0008	 ldr         r0, [sp, #8]
  0054c	eb000000	 bl          NAND_GetStatus
  00550	e1a03800	 mov         r3, r0, lsl #16
  00554	e1a03823	 mov         r3, r3, lsr #16
  00558	e1cd35b8	 strh        r3, [sp, #0x58]
  0055c	e1dd35b8	 ldrh        r3, [sp, #0x58]
  00560	e3130040	 tst         r3, #0x40
  00564	1a000000	 bne         |$LN3@NAND_Initi|
  00568	eafffff6	 b           |$LN4@NAND_Initi|
  0056c		 |$LN3@NAND_Initi|

; 464  : 
; 465  :     // Send Read ID Command
; 466  :     NAND_SendCommand(pDevice, NAND_CMD_READID);

  0056c	e3a01090	 mov         r1, #0x90
  00570	e59d0008	 ldr         r0, [sp, #8]
  00574	eb000000	 bl          NAND_SendCommand

; 467  : 
; 468  :     // Send Address 00h
; 469  :     WRITE_NAND(pDevice->pNandAddress, 0);

  00578	e59d3008	 ldr         r3, [sp, #8]
  0057c	e2833020	 add         r3, r3, #0x20
  00580	e5932000	 ldr         r2, [r3]
  00584	e3a03000	 mov         r3, #0
  00588	e1c230b0	 strh        r3, [r2]

; 470  : 
; 471  :     // Read the manufacturer ID & device code
; 472  :     manufacturer = (UINT8)READ_NAND(pDevice->pNandData);

  0058c	e59d3008	 ldr         r3, [sp, #8]
  00590	e2833024	 add         r3, r3, #0x24
  00594	e5933000	 ldr         r3, [r3]
  00598	e1d330b0	 ldrh        r3, [r3]
  0059c	e20330ff	 and         r3, r3, #0xFF
  005a0	e5cd3020	 strb        r3, [sp, #0x20]

; 473  :     device = (UINT8)READ_NAND(pDevice->pNandData);

  005a4	e59d3008	 ldr         r3, [sp, #8]
  005a8	e2833024	 add         r3, r3, #0x24
  005ac	e5933000	 ldr         r3, [r3]
  005b0	e1d330b0	 ldrh        r3, [r3]
  005b4	e20330ff	 and         r3, r3, #0xFF
  005b8	e5cd3014	 strb        r3, [sp, #0x14]

; 474  : 
; 475  :  
; 476  :     if ((pBSPNandInfo = BSPGetNandInfo(manufacturer,device))==NULL)

  005bc	e5dd1014	 ldrb        r1, [sp, #0x14]
  005c0	e5dd0020	 ldrb        r0, [sp, #0x20]
  005c4	eb000000	 bl          BSPGetNandInfo
  005c8	e58d005c	 str         r0, [sp, #0x5C]
  005cc	e59d305c	 ldr         r3, [sp, #0x5C]
  005d0	e58d3024	 str         r3, [sp, #0x24]
  005d4	e59d3024	 ldr         r3, [sp, #0x24]
  005d8	e3530000	 cmp         r3, #0
  005dc	1a000000	 bne         |$LN2@NAND_Initi|

; 477  :     {                
; 478  :         goto cleanUp;

  005e0	ea00007e	 b           |$cleanUp$46087|
  005e4		 |$LN2@NAND_Initi|

; 479  :     }
; 480  :     if ((pBSPNandInfo->sectorSize != 2048) && (pBSPNandInfo->wordData != 2))

  005e4	e59d3024	 ldr         r3, [sp, #0x24]
  005e8	e283300c	 add         r3, r3, #0xC
  005ec	e5933000	 ldr         r3, [r3]
  005f0	e3530b02	 cmp         r3, #2, 22
  005f4	0a00000c	 beq         |$LN1@NAND_Initi|
  005f8	e59d3024	 ldr         r3, [sp, #0x24]
  005fc	e2833010	 add         r3, r3, #0x10
  00600	e5933000	 ldr         r3, [r3]
  00604	e3530002	 cmp         r3, #2
  00608	0a000007	 beq         |$LN1@NAND_Initi|

; 481  :     {
; 482  :         ERRORMSG(1,(TEXT("FMD driver supports only 16bits large page (2KB) devices\r\n")));

  0060c	e3a02c01	 mov         r2, #1, 24
  00610	e38220e2	 orr         r2, r2, #0xE2
  00614	e59f11e4	 ldr         r1, [pc, #0x1E4]
  00618	e59f01dc	 ldr         r0, [pc, #0x1DC]
  0061c	eb000000	 bl          NKDbgPrintfW
  00620	e59f01d0	 ldr         r0, [pc, #0x1D0]
  00624	eb000000	 bl          NKDbgPrintfW

; 483  :         goto cleanUp;

  00628	ea00006c	 b           |$cleanUp$46087|
  0062c		 |$LN1@NAND_Initi|

; 484  :     }
; 485  :     pDevice->nandInfo = *pBSPNandInfo;

  0062c	e59d1024	 ldr         r1, [sp, #0x24]
  00630	e59d3008	 ldr         r3, [sp, #8]
  00634	e2830044	 add         r0, r3, #0x44
  00638	e3a02014	 mov         r2, #0x14
  0063c	eb000000	 bl          memcpy

; 486  : 
; 487  :     pDevice->IrqWait = BSPGetNandIrqWait();

  00640	eb000000	 bl          BSPGetNandIrqWait
  00644	e58d0060	 str         r0, [sp, #0x60]
  00648	e59d3008	 ldr         r3, [sp, #8]
  0064c	e283205c	 add         r2, r3, #0x5C
  00650	e59d3060	 ldr         r3, [sp, #0x60]
  00654	e5823000	 str         r3, [r2]

; 488  : 
; 489  :     /* ECCCfg: 16bit bus width, cs0, 4 - 512 bytes blocks per page */
; 490  :     pDevice->ECCCfg = (GPMC_ECC_CONFIG_16BIT | (chipSelect << 1) | (0x3<<4)); 

  00658	e59d3010	 ldr         r3, [sp, #0x10]
  0065c	e1a03083	 mov         r3, r3, lsl #1
  00660	e3833080	 orr         r3, r3, #0x80
  00664	e3832030	 orr         r2, r3, #0x30
  00668	e59d3008	 ldr         r3, [sp, #8]
  0066c	e2833058	 add         r3, r3, #0x58
  00670	e5832000	 str         r2, [r3]

; 491  :     pDevice->ECCsize = (pDevice->ECCtype == Hamming1bit ) ? ECC_BYTES_HAMMING : 
; 492  : 		                      (pDevice->ECCtype == BCH4bit ) ? ECC_BYTES_BCH4 : ECC_BYTES_BCH8; 

  00674	e59d3008	 ldr         r3, [sp, #8]
  00678	e2833060	 add         r3, r3, #0x60
  0067c	e5933000	 ldr         r3, [r3]
  00680	e3530000	 cmp         r3, #0
  00684	1a000002	 bne         |$LN19@NAND_Initi|
  00688	e3a0300c	 mov         r3, #0xC
  0068c	e58d3064	 str         r3, [sp, #0x64]
  00690	ea00000b	 b           |$LN20@NAND_Initi|
  00694		 |$LN19@NAND_Initi|
  00694	e59d3008	 ldr         r3, [sp, #8]
  00698	e2833060	 add         r3, r3, #0x60
  0069c	e5933000	 ldr         r3, [r3]
  006a0	e3530001	 cmp         r3, #1
  006a4	1a000002	 bne         |$LN17@NAND_Initi|
  006a8	e3a0301c	 mov         r3, #0x1C
  006ac	e58d3068	 str         r3, [sp, #0x68]
  006b0	ea000001	 b           |$LN18@NAND_Initi|
  006b4		 |$LN17@NAND_Initi|
  006b4	e3a03034	 mov         r3, #0x34
  006b8	e58d3068	 str         r3, [sp, #0x68]
  006bc		 |$LN18@NAND_Initi|
  006bc	e59d3068	 ldr         r3, [sp, #0x68]
  006c0	e58d3064	 str         r3, [sp, #0x64]
  006c4		 |$LN20@NAND_Initi|
  006c4	e59d3008	 ldr         r3, [sp, #8]
  006c8	e2832064	 add         r2, r3, #0x64
  006cc	e59d3064	 ldr         r3, [sp, #0x64]
  006d0	e5823000	 str         r3, [r2]

; 493  : 							  
; 494  :     //  Enable and reset ECC engine (workaround for engine giving 0s first time)
; 495  :     ECC_Init(pDevice->pGpmcRegs, pDevice->ECCCfg, pDevice->ECCtype, NAND_ECC_READ);

  006d4	e3a03000	 mov         r3, #0
  006d8	e59d2008	 ldr         r2, [sp, #8]
  006dc	e2822060	 add         r2, r2, #0x60
  006e0	e5922000	 ldr         r2, [r2]
  006e4	e59d1008	 ldr         r1, [sp, #8]
  006e8	e2811058	 add         r1, r1, #0x58
  006ec	e5911000	 ldr         r1, [r1]
  006f0	e59d0008	 ldr         r0, [sp, #8]
  006f4	e280002c	 add         r0, r0, #0x2C
  006f8	e5900000	 ldr         r0, [r0]
  006fc	eb000000	 bl          ECC_Init

; 496  :     ECC_Reset(pDevice->pGpmcRegs);

  00700	e59d3008	 ldr         r3, [sp, #8]
  00704	e283302c	 add         r3, r3, #0x2C
  00708	e5930000	 ldr         r0, [r3]
  0070c	eb000000	 bl          ECC_Reset

; 497  : 
; 498  :     //  Only enable during NAND read/write/erase operations
; 499  :     NAND_Enable(pDevice, FALSE);

  00710	e3a01000	 mov         r1, #0
  00714	e59d0008	 ldr         r0, [sp, #8]
  00718	eb000000	 bl          NAND_Enable

; 500  : 
; 501  :     // configure the prefetch engine
; 502  :     pDevice->prefetchMode = kPrefetchOff;

  0071c	e59d3008	 ldr         r3, [sp, #8]
  00720	e2832018	 add         r2, r3, #0x18
  00724	e3a03000	 mov         r3, #0
  00728	e5823000	 str         r3, [r2]

; 503  :     OUTREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONTROL, 0);

  0072c	e59d3008	 ldr         r3, [sp, #8]
  00730	e283302c	 add         r3, r3, #0x2C
  00734	e5933000	 ldr         r3, [r3]
  00738	e2832f7b	 add         r2, r3, #0x7B, 30
  0073c	e3a03000	 mov         r3, #0
  00740	e5823000	 str         r3, [r2]

; 504  : 
; 505  :     // set prefetch mask
; 506  :     ffPrefetchMode = GPMC_PREFETCH_CONFIG_SYNCHROMODE |
; 507  :                      GPMC_PREFETCH_CONFIG_PFPWENROUNDROBIN |
; 508  :                      GPMC_PREFETCH_CONFIG_ENABLEOPTIMIZEDACCESS |
; 509  :                      GPMC_PREFETCH_CONFIG_WAITPINSELECTOR(chipSelect) |
; 510  :                      GPMC_PREFETCH_CONFIG_FIFOTHRESHOLD(FIFO_THRESHOLD) |
; 511  :                      GPMC_PREFETCH_CONFIG_ENGINECSSELECTOR(chipSelect);

  00744	e59d3010	 ldr         r3, [sp, #0x10]
  00748	e1a03203	 mov         r3, r3, lsl #4
  0074c	e2032030	 and         r2, r3, #0x30
  00750	e3a03522	 mov         r3, #0x22, 10
  00754	e3833008	 orr         r3, r3, #8
  00758	e1823003	 orr         r3, r2, r3
  0075c	e3832901	 orr         r2, r3, #1, 18
  00760	e59d3010	 ldr         r3, [sp, #0x10]
  00764	e1a03c03	 mov         r3, r3, lsl #24
  00768	e2033407	 and         r3, r3, #7, 8
  0076c	e1823003	 orr         r3, r2, r3
  00770	e58d301c	 str         r3, [sp, #0x1C]

; 512  : 
; 513  :     OUTREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONFIG1, ffPrefetchMode);

  00774	e59d3008	 ldr         r3, [sp, #8]
  00778	e283302c	 add         r3, r3, #0x2C
  0077c	e5933000	 ldr         r3, [r3]
  00780	e2832e1e	 add         r2, r3, #0x1E, 28
  00784	e59d301c	 ldr         r3, [sp, #0x1C]
  00788	e5823000	 str         r3, [r2]

; 514  : 
; 515  :     // configure prefetch engine
; 516  :     OUTREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONFIG2, 
; 517  :         pBSPNandInfo->sectorSize
; 518  :         );

  0078c	e59d3024	 ldr         r3, [sp, #0x24]
  00790	e283100c	 add         r1, r3, #0xC
  00794	e59d3008	 ldr         r3, [sp, #8]
  00798	e283302c	 add         r3, r3, #0x2C
  0079c	e5933000	 ldr         r3, [r3]
  007a0	e2832f79	 add         r2, r3, #0x79, 30
  007a4	e5913000	 ldr         r3, [r1]
  007a8	e5823000	 str         r3, [r2]

; 519  :         
; 520  :     SETREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONFIG1, 
; 521  :         GPMC_PREFETCH_CONFIG_ENABLEENGINE
; 522  :         );

  007ac	e59d3008	 ldr         r3, [sp, #8]
  007b0	e283302c	 add         r3, r3, #0x2C
  007b4	e5933000	 ldr         r3, [r3]
  007b8	e2833e1e	 add         r3, r3, #0x1E, 28
  007bc	e5933000	 ldr         r3, [r3]
  007c0	e3832080	 orr         r2, r3, #0x80
  007c4	e59d3008	 ldr         r3, [sp, #8]
  007c8	e283302c	 add         r3, r3, #0x2C
  007cc	e5933000	 ldr         r3, [r3]
  007d0	e2833e1e	 add         r3, r3, #0x1E, 28
  007d4	e5832000	 str         r2, [r3]

; 523  : 
; 524  :     // We are done
; 525  :     hDevice = pDevice;

  007d8	e59d3008	 ldr         r3, [sp, #8]
  007dc	e58d300c	 str         r3, [sp, #0xC]
  007e0		 |$cleanUp$46087|

; 526  : 
; 527  : cleanUp:
; 528  :     return hDevice;

  007e0	e59d300c	 ldr         r3, [sp, #0xC]
  007e4	e58d3038	 str         r3, [sp, #0x38]

; 529  : }

  007e8	e59d0038	 ldr         r0, [sp, #0x38]
  007ec	e28dd06c	 add         sp, sp, #0x6C
  007f0	e89d6000	 ldmia       sp, {sp, lr}
  007f4	e12fff1e	 bx          lr
  007f8		 |$LN24@NAND_Initi|
  007f8		 |$LN25@NAND_Initi|
  007f8	00000000	 DCD         |??_C@_1HG@DCOIKHPB@?$AAF?$AAM?$AAD?$AA?5?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAs?$AAu?$AAp?$AAp?$AAo?$AAr?$AAt?$AAs?$AA?5?$AAo?$AAn?$AAl?$AAy?$AA?5?$AA1?$AA6?$AAb?$AAi?$AAt?$AAs?$AA?5@|
  007fc		 |$LN26@NAND_Initi|
  007fc	00000000	 DCD         |??_C@_1CI@OHCJFJPM@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?$CF?$AAs?$AA?5?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$CF?$AAd?$AA?3?$AA?5?$AA?$AA@|
  00800		 |$LN27@NAND_Initi|
  00800	00000000	 DCD         |??_C@_1KM@BKLPJHHD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00804		 |$LN28@NAND_Initi|
  00804	00000000	 DCD         |??_C@_1CC@BEPLJHBE@?$AAE?$AAC?$AAC?$AA?5?$AAT?$AAY?$AAP?$AAE?$AA?5?$AAi?$AAs?$AA?5?$AA?$CF?$AAs?$AA?$AN?$AA?6?$AA?$AA@|
  00808		 |$LN29@NAND_Initi|
  00808	00000000	 DCD         |??_C@_1BE@MLAOIDDC@?$AAB?$AAC?$AAH?$AA?5?$AA8?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@|
  0080c		 |$LN30@NAND_Initi|
  0080c	00000000	 DCD         |??_C@_1BE@MOAEMOLD@?$AAB?$AAC?$AAH?$AA?5?$AA4?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@|
  00810		 |$LN31@NAND_Initi|
  00810	00000000	 DCD         |??_C@_1BM@FIEJIIEI@?$AAH?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?5?$AA1?$AA?5?$AAb?$AAi?$AAt?$AA?$AA@|
  00814		 |$LN32@NAND_Initi|
  00814	00000000	 DCD         |??_C@_1DE@HHCNAOKK@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAr?$AAe?$AAa?$AAd?$AA?5?$AAE?$AAc?$AAc?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?$AN?$AA?6?$AA?$AA@|
  00818		 |$LN33@NAND_Initi|
  00818	01013098	 DCD         0x1013098
  0081c		 |$LN34@NAND_Initi|
  0081c	00000000	 DCD         |s_Device|
  00820		 |$M46641|

			 ENDP  ; |NAND_Initialize|


  00020			 AREA	 |.pdata|, PDATA
|$T46660| DCD	|$LN5@NAND_GetSt|
	DCD	0x40001404
; Function compile flags: /Odtp

  00820			 AREA	 |.text|, CODE, ARM

  00820		 |NAND_GetStatus| PROC

; 714  : {

  00820		 |$LN5@NAND_GetSt|
  00820	e1a0c00d	 mov         r12, sp
  00824	e92d0001	 stmdb       sp!, {r0}
  00828	e92d5000	 stmdb       sp!, {r12, lr}
  0082c	e24dd008	 sub         sp, sp, #8
  00830		 |$M46657|

; 715  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  00830	e59d3010	 ldr         r3, [sp, #0x10]
  00834	e58d3000	 str         r3, [sp]

; 716  : 
; 717  :     // request status
; 718  :     WRITE_NAND(pDevice->pNandCmd, NAND_CMD_STATUS);

  00838	e59d3000	 ldr         r3, [sp]
  0083c	e283301c	 add         r3, r3, #0x1C
  00840	e5932000	 ldr         r2, [r3]
  00844	e3a03070	 mov         r3, #0x70
  00848	e1c230b0	 strh        r3, [r2]

; 719  :     return READ_NAND(pDevice->pNandData);

  0084c	e59d3000	 ldr         r3, [sp]
  00850	e2833024	 add         r3, r3, #0x24
  00854	e5933000	 ldr         r3, [r3]
  00858	e1d330b0	 ldrh        r3, [r3]
  0085c	e1cd30b4	 strh        r3, [sp, #4]

; 720  : }

  00860	e1dd00b4	 ldrh        r0, [sp, #4]
  00864	e28dd008	 add         sp, sp, #8
  00868	e89d6000	 ldmia       sp, {sp, lr}
  0086c	e12fff1e	 bx          lr
  00870		 |$M46658|

			 ENDP  ; |NAND_GetStatus|


  00028			 AREA	 |.pdata|, PDATA
|$T46666| DCD	|$LN8@NAND_Enabl|
	DCD	0x40004e04
; Function compile flags: /Odtp

  00870			 AREA	 |.text|, CODE, ARM

  00870		 |NAND_Enable| PROC

; 745  : {

  00870		 |$LN8@NAND_Enabl|
  00870	e1a0c00d	 mov         r12, sp
  00874	e92d0003	 stmdb       sp!, {r0, r1}
  00878	e92d5000	 stmdb       sp!, {r12, lr}
  0087c	e24dd008	 sub         sp, sp, #8
  00880		 |$M46663|

; 746  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  00880	e59d3010	 ldr         r3, [sp, #0x10]
  00884	e58d3000	 str         r3, [sp]

; 747  : 
; 748  :     if (pDevice->IrqWait)

  00888	e59d3000	 ldr         r3, [sp]
  0088c	e283305c	 add         r3, r3, #0x5C
  00890	e5933000	 ldr         r3, [r3]
  00894	e3530000	 cmp         r3, #0
  00898	0a00003c	 beq         |$LN3@NAND_Enabl|

; 749  :     {
; 750  :         if( bEnable )

  0089c	e59d3014	 ldr         r3, [sp, #0x14]
  008a0	e3530000	 cmp         r3, #0
  008a4	0a00001c	 beq         |$LN2@NAND_Enabl|

; 751  :         {
; 752  :             // Enable GPMC wait-to-nowait edge detection mechanism on NAND R/B pin
; 753  :             SETREG32 (&pDevice->pGpmcRegs->GPMC_IRQENABLE, pDevice->IrqWait);

  008a8	e59d3000	 ldr         r3, [sp]
  008ac	e283302c	 add         r3, r3, #0x2C
  008b0	e5933000	 ldr         r3, [r3]
  008b4	e283201c	 add         r2, r3, #0x1C
  008b8	e59d3000	 ldr         r3, [sp]
  008bc	e283305c	 add         r3, r3, #0x5C
  008c0	e5922000	 ldr         r2, [r2]
  008c4	e5933000	 ldr         r3, [r3]
  008c8	e1822003	 orr         r2, r2, r3
  008cc	e59d3000	 ldr         r3, [sp]
  008d0	e283302c	 add         r3, r3, #0x2C
  008d4	e5933000	 ldr         r3, [r3]
  008d8	e283301c	 add         r3, r3, #0x1C
  008dc	e5832000	 str         r2, [r3]

; 754  : 
; 755  :             //  Reset IRQ status
; 756  :             SETREG32 (&pDevice->pGpmcRegs->GPMC_IRQSTATUS, pDevice->IrqWait);

  008e0	e59d3000	 ldr         r3, [sp]
  008e4	e283302c	 add         r3, r3, #0x2C
  008e8	e5933000	 ldr         r3, [r3]
  008ec	e2832018	 add         r2, r3, #0x18
  008f0	e59d3000	 ldr         r3, [sp]
  008f4	e283305c	 add         r3, r3, #0x5C
  008f8	e5922000	 ldr         r2, [r2]
  008fc	e5933000	 ldr         r3, [r3]
  00900	e1822003	 orr         r2, r2, r3
  00904	e59d3000	 ldr         r3, [sp]
  00908	e283302c	 add         r3, r3, #0x2C
  0090c	e5933000	 ldr         r3, [r3]
  00910	e2833018	 add         r3, r3, #0x18
  00914	e5832000	 str         r2, [r3]

; 757  :         }
; 758  :         else

  00918	ea00001c	 b           |$LN1@NAND_Enabl|
  0091c		 |$LN2@NAND_Enabl|

; 759  :         {
; 760  :             //  Reset IRQ status
; 761  :             SETREG32 (&pDevice->pGpmcRegs->GPMC_IRQSTATUS, pDevice->IrqWait);

  0091c	e59d3000	 ldr         r3, [sp]
  00920	e283302c	 add         r3, r3, #0x2C
  00924	e5933000	 ldr         r3, [r3]
  00928	e2832018	 add         r2, r3, #0x18
  0092c	e59d3000	 ldr         r3, [sp]
  00930	e283305c	 add         r3, r3, #0x5C
  00934	e5922000	 ldr         r2, [r2]
  00938	e5933000	 ldr         r3, [r3]
  0093c	e1822003	 orr         r2, r2, r3
  00940	e59d3000	 ldr         r3, [sp]
  00944	e283302c	 add         r3, r3, #0x2C
  00948	e5933000	 ldr         r3, [r3]
  0094c	e2833018	 add         r3, r3, #0x18
  00950	e5832000	 str         r2, [r3]

; 762  : 
; 763  :             // Disable GPMC wait-to-nowait edge detection mechanism on NAND R/B pin
; 764  :             CLRREG32 (&pDevice->pGpmcRegs->GPMC_IRQENABLE, pDevice->IrqWait);

  00954	e59d3000	 ldr         r3, [sp]
  00958	e283302c	 add         r3, r3, #0x2C
  0095c	e5933000	 ldr         r3, [r3]
  00960	e283101c	 add         r1, r3, #0x1C
  00964	e59d3000	 ldr         r3, [sp]
  00968	e283305c	 add         r3, r3, #0x5C
  0096c	e5933000	 ldr         r3, [r3]
  00970	e1e02003	 mvn         r2, r3
  00974	e5913000	 ldr         r3, [r1]
  00978	e0032002	 and         r2, r3, r2
  0097c	e59d3000	 ldr         r3, [sp]
  00980	e283302c	 add         r3, r3, #0x2C
  00984	e5933000	 ldr         r3, [r3]
  00988	e283301c	 add         r3, r3, #0x1C
  0098c	e5832000	 str         r2, [r3]
  00990		 |$LN1@NAND_Enabl|
  00990		 |$LN3@NAND_Enabl|

; 765  :         }
; 766  :     }
; 767  :     return TRUE;

  00990	e3a03001	 mov         r3, #1
  00994	e58d3004	 str         r3, [sp, #4]

; 768  : }

  00998	e59d0004	 ldr         r0, [sp, #4]
  0099c	e28dd008	 add         sp, sp, #8
  009a0	e89d6000	 ldmia       sp, {sp, lr}
  009a4	e12fff1e	 bx          lr
  009a8		 |$M46664|

			 ENDP  ; |NAND_Enable|


  00030			 AREA	 |.pdata|, PDATA
|$T46672| DCD	|$LN5@NAND_SendC|
	DCD	0x40001304
; Function compile flags: /Odtp

  009a8			 AREA	 |.text|, CODE, ARM

  009a8		 |NAND_SendCommand| PROC

; 808  : {

  009a8		 |$LN5@NAND_SendC|
  009a8	e1a0c00d	 mov         r12, sp
  009ac	e92d0003	 stmdb       sp!, {r0, r1}
  009b0	e92d5000	 stmdb       sp!, {r12, lr}
  009b4	e24dd008	 sub         sp, sp, #8
  009b8		 |$M46669|

; 809  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  009b8	e59d3010	 ldr         r3, [sp, #0x10]
  009bc	e58d3000	 str         r3, [sp]

; 810  :     WRITE_NAND(pDevice->pNandCmd, cmd);

  009c0	e59d3014	 ldr         r3, [sp, #0x14]
  009c4	e1a02803	 mov         r2, r3, lsl #16
  009c8	e1a02822	 mov         r2, r2, lsr #16
  009cc	e59d3000	 ldr         r3, [sp]
  009d0	e283301c	 add         r3, r3, #0x1C
  009d4	e5933000	 ldr         r3, [r3]
  009d8	e1c320b0	 strh        r2, [r3]

; 811  :     return TRUE;

  009dc	e3a03001	 mov         r3, #1
  009e0	e58d3004	 str         r3, [sp, #4]

; 812  : }

  009e4	e59d0004	 ldr         r0, [sp, #4]
  009e8	e28dd008	 add         sp, sp, #8
  009ec	e89d6000	 ldmia       sp, {sp, lr}
  009f0	e12fff1e	 bx          lr
  009f4		 |$M46670|

			 ENDP  ; |NAND_SendCommand|

	EXPORT	|WaitForReadyStatus|
	EXPORT	|FMD_Deinit|

  00038			 AREA	 |.pdata|, PDATA
|$T46678| DCD	|$LN6@FMD_Deinit|
	DCD	0x40002b04
; Function compile flags: /Odtp

  009f4			 AREA	 |.text|, CODE, ARM

  009f4		 |FMD_Deinit| PROC

; 934  : {

  009f4		 |$LN6@FMD_Deinit|
  009f4	e1a0c00d	 mov         r12, sp
  009f8	e92d0001	 stmdb       sp!, {r0}
  009fc	e92d5000	 stmdb       sp!, {r12, lr}
  00a00	e24dd008	 sub         sp, sp, #8
  00a04		 |$M46675|

; 935  :     BOOL rc = FALSE;

  00a04	e3a03000	 mov         r3, #0
  00a08	e58d3000	 str         r3, [sp]

; 936  :     if (pContext != s_hNand) goto cleanUp;

  00a0c	e59d2010	 ldr         r2, [sp, #0x10]
  00a10	e59f3084	 ldr         r3, [pc, #0x84]
  00a14	e5933000	 ldr         r3, [r3]
  00a18	e1520003	 cmp         r2, r3
  00a1c	0a000000	 beq         |$LN1@FMD_Deinit|
  00a20	ea000017	 b           |$cleanUp$46350|
  00a24		 |$LN1@FMD_Deinit|

; 937  : 
; 938  :     //  Only enable during NAND read/write/erase operations
; 939  :     NAND_Enable(s_hNand, TRUE);

  00a24	e3a01001	 mov         r1, #1
  00a28	e59f306c	 ldr         r3, [pc, #0x6C]
  00a2c	e5930000	 ldr         r0, [r3]
  00a30	eb000000	 bl          NAND_Enable

; 940  : 
; 941  :     // Wait for NAND    
; 942  :     // the next command may not work if you remove this wait on the status, 
; 943  :     // because if the R/B pin is asserted during the reset, its deassertion 
; 944  :     // isn't guaranteed to mean that the device is ready
; 945  :     WaitForReadyStatus(s_hNand);   

  00a34	e59f3060	 ldr         r3, [pc, #0x60]
  00a38	e5930000	 ldr         r0, [r3]
  00a3c	eb000000	 bl          WaitForReadyStatus

; 946  : 
; 947  :     // Write RESET command
; 948  :     // (a reset aborts any current READ, WRITE (PROGRAM) or ERASE operation)
; 949  :     NAND_SendCommand(s_hNand, NAND_CMD_RESET);

  00a40	e3a010ff	 mov         r1, #0xFF
  00a44	e59f3050	 ldr         r3, [pc, #0x50]
  00a48	e5930000	 ldr         r0, [r3]
  00a4c	eb000000	 bl          NAND_SendCommand

; 950  : 
; 951  :     // Wait for NAND
; 952  :     WaitForReadyStatus(s_hNand);

  00a50	e59f3044	 ldr         r3, [pc, #0x44]
  00a54	e5930000	 ldr         r0, [r3]
  00a58	eb000000	 bl          WaitForReadyStatus

; 953  : 
; 954  :     // Clear GPMC wait-to-nowait edge detection mechanism on NAND R/B pin
; 955  :     NAND_Enable(s_hNand, FALSE);

  00a5c	e3a01000	 mov         r1, #0
  00a60	e59f3034	 ldr         r3, [pc, #0x34]
  00a64	e5930000	 ldr         r0, [r3]
  00a68	eb000000	 bl          NAND_Enable

; 956  : 
; 957  :     // uninitialize and release allocated resources
; 958  :     NAND_Uninitialize(s_hNand);

  00a6c	e59f3028	 ldr         r3, [pc, #0x28]
  00a70	e5930000	 ldr         r0, [r3]
  00a74	eb000000	 bl          NAND_Uninitialize

; 959  :     s_hNand = NULL;

  00a78	e59f201c	 ldr         r2, [pc, #0x1C]
  00a7c	e3a03000	 mov         r3, #0
  00a80	e5823000	 str         r3, [r2]
  00a84		 |$cleanUp$46350|

; 960  :     
; 961  : cleanUp:
; 962  :     return rc;

  00a84	e59d3000	 ldr         r3, [sp]
  00a88	e58d3004	 str         r3, [sp, #4]

; 963  : }

  00a8c	e59d0004	 ldr         r0, [sp, #4]
  00a90	e28dd008	 add         sp, sp, #8
  00a94	e89d6000	 ldmia       sp, {sp, lr}
  00a98	e12fff1e	 bx          lr
  00a9c		 |$LN7@FMD_Deinit|
  00a9c		 |$LN8@FMD_Deinit|
  00a9c	00000000	 DCD         |s_hNand|
  00aa0		 |$M46676|

			 ENDP  ; |FMD_Deinit|

	IMPORT	|MmUnmapIoSpace|

  00040			 AREA	 |.pdata|, PDATA
|$T46685| DCD	|$LN7@NAND_Unini|
	DCD	0x40002104
; Function compile flags: /Odtp

  00aa0			 AREA	 |.text|, CODE, ARM

  00aa0		 |NAND_Uninitialize| PROC

; 364  : {

  00aa0		 |$LN7@NAND_Unini|
  00aa0	e1a0c00d	 mov         r12, sp
  00aa4	e92d0001	 stmdb       sp!, {r0}
  00aa8	e92d5000	 stmdb       sp!, {r12, lr}
  00aac	e24dd004	 sub         sp, sp, #4
  00ab0		 |$M46682|

; 365  : #ifdef BOOT_MODE
; 366  :     UNREFERENCED_PARAMETER(hNand);
; 367  : #else
; 368  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  00ab0	e59d300c	 ldr         r3, [sp, #0xC]
  00ab4	e58d3000	 str         r3, [sp]

; 369  : 
; 370  :     if (pDevice->pGpmcRegs != NULL)

  00ab8	e59d3000	 ldr         r3, [sp]
  00abc	e283302c	 add         r3, r3, #0x2C
  00ac0	e5933000	 ldr         r3, [r3]
  00ac4	e3530000	 cmp         r3, #0
  00ac8	0a000006	 beq         |$LN2@NAND_Unini|

; 371  :         {
; 372  :         MmUnmapIoSpace((void*)pDevice->pGpmcRegs, pDevice->memLen[0]);

  00acc	e59d3000	 ldr         r3, [sp]
  00ad0	e2833038	 add         r3, r3, #0x38
  00ad4	e5931000	 ldr         r1, [r3]
  00ad8	e59d3000	 ldr         r3, [sp]
  00adc	e283302c	 add         r3, r3, #0x2C
  00ae0	e5930000	 ldr         r0, [r3]
  00ae4	eb000000	 bl          MmUnmapIoSpace
  00ae8		 |$LN2@NAND_Unini|

; 373  :         }
; 374  : 
; 375  :     if (pDevice->pFifo != NULL)

  00ae8	e59d3000	 ldr         r3, [sp]
  00aec	e2833028	 add         r3, r3, #0x28
  00af0	e5933000	 ldr         r3, [r3]
  00af4	e3530000	 cmp         r3, #0
  00af8	0a000006	 beq         |$LN1@NAND_Unini|

; 376  :         {
; 377  :         MmUnmapIoSpace((void*)pDevice->pFifo, pDevice->memLen[1]);

  00afc	e59d3000	 ldr         r3, [sp]
  00b00	e283303c	 add         r3, r3, #0x3C
  00b04	e5931000	 ldr         r1, [r3]
  00b08	e59d3000	 ldr         r3, [sp]
  00b0c	e2833028	 add         r3, r3, #0x28
  00b10	e5930000	 ldr         r0, [r3]
  00b14	eb000000	 bl          MmUnmapIoSpace
  00b18		 |$LN1@NAND_Unini|

; 378  :         }
; 379  : #endif
; 380  : }

  00b18	e28dd004	 add         sp, sp, #4
  00b1c	e89d6000	 ldmia       sp, {sp, lr}
  00b20	e12fff1e	 bx          lr
  00b24		 |$M46683|

			 ENDP  ; |NAND_Uninitialize|


  00000			 AREA	 |.pdata|, PDATA
|$T46690| DCD	|$LN7@WaitForRea|
	DCD	0x40000e04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WaitForReadyStatus| PROC

; 897  : {

  00000		 |$LN7@WaitForRea|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M46687|
  00010		 |$LN2@WaitForRea|

; 898  :     //  Wait for a Ready status
; 899  :     while ((NAND_GetStatus(hNand) & NAND_STATUS_READY) == 0); 

  00010	e59d000c	 ldr         r0, [sp, #0xC]
  00014	eb000000	 bl          NAND_GetStatus
  00018	e1cd00b0	 strh        r0, [sp]
  0001c	e1dd30b0	 ldrh        r3, [sp]
  00020	e3130040	 tst         r3, #0x40
  00024	1a000000	 bne         |$LN1@WaitForRea|
  00028	eafffff8	 b           |$LN2@WaitForRea|
  0002c		 |$LN1@WaitForRea|

; 900  : }

  0002c	e28dd004	 add         sp, sp, #4
  00030	e89d6000	 ldmia       sp, {sp, lr}
  00034	e12fff1e	 bx          lr
  00038		 |$M46688|

			 ENDP  ; |WaitForReadyStatus|

	EXPORT	|NAND_GetGeometry|
	EXPORT	|FMD_GetInfo|

  00048			 AREA	 |.pdata|, PDATA
|$T46698| DCD	|$LN6@FMD_GetInf|
	DCD	0x40005104
; Function compile flags: /Odtp

  00b24			 AREA	 |.text|, CODE, ARM

  00b24		 |FMD_GetInfo| PROC

; 975  : {

  00b24		 |$LN6@FMD_GetInf|
  00b24	e1a0c00d	 mov         r12, sp
  00b28	e92d0001	 stmdb       sp!, {r0}
  00b2c	e92d5000	 stmdb       sp!, {r12, lr}
  00b30	e24dd01c	 sub         sp, sp, #0x1C
  00b34		 |$M46695|

; 976  :     BOOL rc = FALSE;

  00b34	e3a03000	 mov         r3, #0
  00b38	e58d3000	 str         r3, [sp]

; 977  : 
; 978  :     // If we don't support NAND, fail...
; 979  :     if (s_hNand == NULL) goto cleanUp;

  00b3c	e59f3120	 ldr         r3, [pc, #0x120]
  00b40	e5933000	 ldr         r3, [r3]
  00b44	e3530000	 cmp         r3, #0
  00b48	1a000000	 bne         |$LN1@FMD_GetInf|
  00b4c	ea00003e	 b           |$cleanUp$46358|
  00b50		 |$LN1@FMD_GetInf|

; 980  : 
; 981  :     // Memory type is NAND
; 982  :     pFlashInfo->flashType = NAND;

  00b50	e59d2024	 ldr         r2, [sp, #0x24]
  00b54	e3a03000	 mov         r3, #0
  00b58	e5823000	 str         r3, [r2]

; 983  :     pFlashInfo->dwNumBlocks = NAND_GetGeometry(s_hNand)->blocks;

  00b5c	e59f3100	 ldr         r3, [pc, #0x100]
  00b60	e5930000	 ldr         r0, [r3]
  00b64	eb000000	 bl          NAND_GetGeometry
  00b68	e58d0008	 str         r0, [sp, #8]
  00b6c	e59d3008	 ldr         r3, [sp, #8]
  00b70	e2831004	 add         r1, r3, #4
  00b74	e59d3024	 ldr         r3, [sp, #0x24]
  00b78	e2832004	 add         r2, r3, #4
  00b7c	e5913000	 ldr         r3, [r1]
  00b80	e5823000	 str         r3, [r2]

; 984  :     pFlashInfo->wSectorsPerBlock = (WORD) NAND_GetGeometry(s_hNand)->sectorsPerBlock;

  00b84	e59f30d8	 ldr         r3, [pc, #0xD8]
  00b88	e5930000	 ldr         r0, [r3]
  00b8c	eb000000	 bl          NAND_GetGeometry
  00b90	e58d000c	 str         r0, [sp, #0xC]
  00b94	e59d300c	 ldr         r3, [sp, #0xC]
  00b98	e2833008	 add         r3, r3, #8
  00b9c	e5933000	 ldr         r3, [r3]
  00ba0	e1a02803	 mov         r2, r3, lsl #16
  00ba4	e1a02822	 mov         r2, r2, lsr #16
  00ba8	e59d3024	 ldr         r3, [sp, #0x24]
  00bac	e283300c	 add         r3, r3, #0xC
  00bb0	e1c320b0	 strh        r2, [r3]

; 985  :     pFlashInfo->wDataBytesPerSector = (WORD) NAND_GetGeometry(s_hNand)->sectorSize;

  00bb4	e59f30a8	 ldr         r3, [pc, #0xA8]
  00bb8	e5930000	 ldr         r0, [r3]
  00bbc	eb000000	 bl          NAND_GetGeometry
  00bc0	e58d0010	 str         r0, [sp, #0x10]
  00bc4	e59d3010	 ldr         r3, [sp, #0x10]
  00bc8	e283300c	 add         r3, r3, #0xC
  00bcc	e5933000	 ldr         r3, [r3]
  00bd0	e1a02803	 mov         r2, r3, lsl #16
  00bd4	e1a02822	 mov         r2, r2, lsr #16
  00bd8	e59d3024	 ldr         r3, [sp, #0x24]
  00bdc	e283300e	 add         r3, r3, #0xE
  00be0	e1c320b0	 strh        r2, [r3]

; 986  :     pFlashInfo->dwBytesPerBlock = NAND_GetGeometry(s_hNand)->sectorSize;

  00be4	e59f3078	 ldr         r3, [pc, #0x78]
  00be8	e5930000	 ldr         r0, [r3]
  00bec	eb000000	 bl          NAND_GetGeometry
  00bf0	e58d0014	 str         r0, [sp, #0x14]
  00bf4	e59d3014	 ldr         r3, [sp, #0x14]
  00bf8	e283100c	 add         r1, r3, #0xC
  00bfc	e59d3024	 ldr         r3, [sp, #0x24]
  00c00	e2832008	 add         r2, r3, #8
  00c04	e5913000	 ldr         r3, [r1]
  00c08	e5823000	 str         r3, [r2]

; 987  :     pFlashInfo->dwBytesPerBlock *= NAND_GetGeometry(s_hNand)->sectorsPerBlock;

  00c0c	e59f3050	 ldr         r3, [pc, #0x50]
  00c10	e5930000	 ldr         r0, [r3]
  00c14	eb000000	 bl          NAND_GetGeometry
  00c18	e58d0018	 str         r0, [sp, #0x18]
  00c1c	e59d3024	 ldr         r3, [sp, #0x24]
  00c20	e2832008	 add         r2, r3, #8
  00c24	e59d3018	 ldr         r3, [sp, #0x18]
  00c28	e2833008	 add         r3, r3, #8
  00c2c	e5921000	 ldr         r1, [r2]
  00c30	e5933000	 ldr         r3, [r3]
  00c34	e0020391	 mul         r2, r1, r3
  00c38	e59d3024	 ldr         r3, [sp, #0x24]
  00c3c	e2833008	 add         r3, r3, #8
  00c40	e5832000	 str         r2, [r3]

; 988  : 
; 989  :     // Done
; 990  :     rc = TRUE;

  00c44	e3a03001	 mov         r3, #1
  00c48	e58d3000	 str         r3, [sp]
  00c4c		 |$cleanUp$46358|

; 991  : 
; 992  : cleanUp:
; 993  :     return rc;

  00c4c	e59d3000	 ldr         r3, [sp]
  00c50	e58d3004	 str         r3, [sp, #4]

; 994  : }

  00c54	e59d0004	 ldr         r0, [sp, #4]
  00c58	e28dd01c	 add         sp, sp, #0x1C
  00c5c	e89d6000	 ldmia       sp, {sp, lr}
  00c60	e12fff1e	 bx          lr
  00c64		 |$LN7@FMD_GetInf|
  00c64		 |$LN8@FMD_GetInf|
  00c64	00000000	 DCD         |s_hNand|
  00c68		 |$M46696|

			 ENDP  ; |FMD_GetInfo|


  00000			 AREA	 |.pdata|, PDATA
|$T46706| DCD	|$LN5@NAND_GetGe|
	DCD	0x40000b04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NAND_GetGeometry| PROC

; 324  : {

  00000		 |$LN5@NAND_GetGe|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M46703|

; 325  :     return &(((NandDevice_t*)hNand)->nandInfo);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e2833044	 add         r3, r3, #0x44
  00018	e58d3000	 str         r3, [sp]

; 326  : }

  0001c	e59d0000	 ldr         r0, [sp]
  00020	e28dd004	 add         sp, sp, #4
  00024	e89d6000	 ldmia       sp, {sp, lr}
  00028	e12fff1e	 bx          lr
  0002c		 |$M46704|

			 ENDP  ; |NAND_GetGeometry|

	EXPORT	|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| [ DATA ] ; `string'
	EXPORT	|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| [ DATA ] ; `string'
	EXPORT	|NAND_GetGpmcRegs|
	EXPORT	|FMD_ReadSectorOOB|

  00050			 AREA	 |.pdata|, PDATA
|$T46716| DCD	|$LN9@FMD_ReadSe|
	DCD	0x40007504

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@| DCB "%"
	DCB	0x0, "s", 0x0, ":", 0x0, " ", 0x0, "D", 0x0, "E", 0x0, "B"
	DCB	0x0, "U", 0x0, "G", 0x0, "C", 0x0, "H", 0x0, "K", 0x0, " "
	DCB	0x0, "f", 0x0, "a", 0x0, "i", 0x0, "l", 0x0, "e", 0x0, "d"
	DCB	0x0, " ", 0x0, "i", 0x0, "n", 0x0, " ", 0x0, "f", 0x0, "i"
	DCB	0x0, "l", 0x0, "e", 0x0, " ", 0x0, "%", 0x0, "s", 0x0, " "
	DCB	0x0, "a", 0x0, "t", 0x0, " ", 0x0, "l", 0x0, "i", 0x0, "n"
	DCB	0x0, "e", 0x0, " ", 0x0, "%", 0x0, "d", 0x0, " ", 0x0, 0xd
	DCB	0x0, 0xa, 0x0, 0x0, 0x0			; `string'

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@| DCB "U", 0x0
	DCB	"n", 0x0, "k", 0x0, "n", 0x0, "o", 0x0, "w", 0x0, "n", 0x0
	DCB	0x0, 0x0				; `string'
; Function compile flags: /Odtp

  00c68			 AREA	 |.text|, CODE, ARM

  00c68		 |FMD_ReadSectorOOB| PROC

; 1007 : {

  00c68		 |$LN9@FMD_ReadSe|
  00c68	e1a0c00d	 mov         r12, sp
  00c6c	e92d0003	 stmdb       sp!, {r0, r1}
  00c70	e92d5000	 stmdb       sp!, {r12, lr}
  00c74	e24dd024	 sub         sp, sp, #0x24
  00c78		 |$M46713|

; 1008 :     BOOL rc = FALSE;

  00c78	e3a03000	 mov         r3, #0
  00c7c	e58d3004	 str         r3, [sp, #4]

; 1009 :     UINT32 oldIdleMode;
; 1010 :     UINT32 sectorSize;
; 1011 : 
; 1012 :     // Fail if FMD wasn't opened
; 1013 :     if (s_hNand == NULL) goto cleanUp;

  00c80	e59f31b0	 ldr         r3, [pc, #0x1B0]
  00c84	e5933000	 ldr         r3, [r3]
  00c88	e3530000	 cmp         r3, #0
  00c8c	1a000000	 bne         |$LN2@FMD_ReadSe|
  00c90	ea000049	 b           |$cleanUp$46372|
  00c94		 |$LN2@FMD_ReadSe|

; 1014 :     
; 1015 :     NAND_MutexEnter(s_hNand);

  00c94	e59f319c	 ldr         r3, [pc, #0x19C]
  00c98	e5930000	 ldr         r0, [r3]
  00c9c	eb000000	 bl          NAND_MutexEnter

; 1016 : 
; 1017 :     //  Change idle mode to no-idle to ensure access to GPMC registers
; 1018 :     sectorSize = NAND_GetGeometry(s_hNand)->sectorSize;

  00ca0	e59f3190	 ldr         r3, [pc, #0x190]
  00ca4	e5930000	 ldr         r0, [r3]
  00ca8	eb000000	 bl          NAND_GetGeometry
  00cac	e58d0010	 str         r0, [sp, #0x10]
  00cb0	e59d3010	 ldr         r3, [sp, #0x10]
  00cb4	e283300c	 add         r3, r3, #0xC
  00cb8	e5933000	 ldr         r3, [r3]
  00cbc	e58d3000	 str         r3, [sp]

; 1019 :     oldIdleMode = INREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG));

  00cc0	e59f3170	 ldr         r3, [pc, #0x170]
  00cc4	e5930000	 ldr         r0, [r3]
  00cc8	eb000000	 bl          NAND_GetGpmcRegs
  00ccc	e58d0014	 str         r0, [sp, #0x14]
  00cd0	e59d3014	 ldr         r3, [sp, #0x14]
  00cd4	e2833010	 add         r3, r3, #0x10
  00cd8	e5933000	 ldr         r3, [r3]
  00cdc	e58d3008	 str         r3, [sp, #8]

; 1020 :     OUTREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG), SYSCONFIG_NOIDLE);

  00ce0	e59f3150	 ldr         r3, [pc, #0x150]
  00ce4	e5930000	 ldr         r0, [r3]
  00ce8	eb000000	 bl          NAND_GetGpmcRegs
  00cec	e58d0018	 str         r0, [sp, #0x18]
  00cf0	e59d3018	 ldr         r3, [sp, #0x18]
  00cf4	e2832010	 add         r2, r3, #0x10
  00cf8	e3a03008	 mov         r3, #8
  00cfc	e5823000	 str         r3, [r2]

; 1021 :     
; 1022 :         {
; 1023 :         //  Only enable during NAND read/write/erase operations
; 1024 :         NAND_Enable(s_hNand, TRUE);

  00d00	e3a01001	 mov         r1, #1
  00d04	e59f312c	 ldr         r3, [pc, #0x12C]
  00d08	e5930000	 ldr         r0, [r3]
  00d0c	eb000000	 bl          NAND_Enable

; 1025 : 
; 1026 :         // Make sure of the NAND status
; 1027 :         WaitForReadyStatus(s_hNand);

  00d10	e59f3120	 ldr         r3, [pc, #0x120]
  00d14	e5930000	 ldr         r0, [r3]
  00d18	eb000000	 bl          WaitForReadyStatus

; 1028 : 
; 1029 :         // Send the command
; 1030 :         NAND_SendCommand(s_hNand, NAND_CMD_READ1);

  00d1c	e3a01000	 mov         r1, #0
  00d20	e59f3110	 ldr         r3, [pc, #0x110]
  00d24	e5930000	 ldr         r0, [r3]
  00d28	eb000000	 bl          NAND_SendCommand

; 1031 : 
; 1032 :         // Send the address
; 1033 :         NAND_Seek(s_hNand, sector, sectorSize);

  00d2c	e59d2000	 ldr         r2, [sp]
  00d30	e59d102c	 ldr         r1, [sp, #0x2C]
  00d34	e59f30fc	 ldr         r3, [pc, #0xFC]
  00d38	e5930000	 ldr         r0, [r3]
  00d3c	eb000000	 bl          NAND_Seek

; 1034 : 
; 1035 :         // Send the command
; 1036 :         NAND_SendCommand(s_hNand, NAND_CMD_READ2);

  00d40	e3a01030	 mov         r1, #0x30
  00d44	e59f30ec	 ldr         r3, [pc, #0xEC]
  00d48	e5930000	 ldr         r0, [r3]
  00d4c	eb000000	 bl          NAND_SendCommand

; 1037 : 
; 1038 :         // Wait for the action to finish
; 1039 :         WaitForReadyStatus(s_hNand);

  00d50	e59f30e0	 ldr         r3, [pc, #0xE0]
  00d54	e5930000	 ldr         r0, [r3]
  00d58	eb000000	 bl          WaitForReadyStatus

; 1040 : 
; 1041 :         //Force a read here, else we will read the status again
; 1042 :         NAND_SendCommand (s_hNand, NAND_CMD_READ1);

  00d5c	e3a01000	 mov         r1, #0
  00d60	e59f30d0	 ldr         r3, [pc, #0xD0]
  00d64	e5930000	 ldr         r0, [r3]
  00d68	eb000000	 bl          NAND_SendCommand

; 1043 : 
; 1044 :         // read spare area
; 1045 :         NAND_Read(s_hNand, (BYTE*)pBuffer, 64, NULL);

  00d6c	e3a03000	 mov         r3, #0
  00d70	e3a02040	 mov         r2, #0x40
  00d74	e59d1030	 ldr         r1, [sp, #0x30]
  00d78	e59f00b8	 ldr         r0, [pc, #0xB8]
  00d7c	e5900000	 ldr         r0, [r0]
  00d80	eb000000	 bl          NAND_Read

; 1046 :         
; 1047 :         //  Only enable during NAND read/write/erase operations
; 1048 :         NAND_Enable(s_hNand, FALSE);

  00d84	e3a01000	 mov         r1, #0
  00d88	e59f30a8	 ldr         r3, [pc, #0xA8]
  00d8c	e5930000	 ldr         r0, [r3]
  00d90	eb000000	 bl          NAND_Enable

; 1049 : 
; 1050 :         }
; 1051 : 
; 1052 :     //  Change idle mode back
; 1053 :     OUTREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG), oldIdleMode);

  00d94	e59f309c	 ldr         r3, [pc, #0x9C]
  00d98	e5930000	 ldr         r0, [r3]
  00d9c	eb000000	 bl          NAND_GetGpmcRegs
  00da0	e58d001c	 str         r0, [sp, #0x1C]
  00da4	e59d301c	 ldr         r3, [sp, #0x1C]
  00da8	e2832010	 add         r2, r3, #0x10
  00dac	e59d3008	 ldr         r3, [sp, #8]
  00db0	e5823000	 str         r3, [r2]

; 1054 :     
; 1055 :     // Done
; 1056 :     rc = TRUE;

  00db4	e3a03001	 mov         r3, #1
  00db8	e58d3004	 str         r3, [sp, #4]
  00dbc		 |$cleanUp$46372|

; 1057 : 
; 1058 : cleanUp:
; 1059 :     // Release hardware lock
; 1060 :     if (s_hNand != NULL) NAND_MutexExit(s_hNand);

  00dbc	e59f3074	 ldr         r3, [pc, #0x74]
  00dc0	e5933000	 ldr         r3, [r3]
  00dc4	e3530000	 cmp         r3, #0
  00dc8	0a000002	 beq         |$LN1@FMD_ReadSe|
  00dcc	e59f3064	 ldr         r3, [pc, #0x64]
  00dd0	e5930000	 ldr         r0, [r3]
  00dd4	eb000000	 bl          NAND_MutexExit
  00dd8		 |$LN1@FMD_ReadSe|

; 1061 :     
; 1062 :     ASSERT(rc);

  00dd8	e59d3004	 ldr         r3, [sp, #4]
  00ddc	e3530000	 cmp         r3, #0
  00de0	0a000002	 beq         |$LN5@FMD_ReadSe|
  00de4	e3a03001	 mov         r3, #1
  00de8	e58d3020	 str         r3, [sp, #0x20]
  00dec	ea000008	 b           |$LN6@FMD_ReadSe|
  00df0		 |$LN5@FMD_ReadSe|
  00df0	e3a03b01	 mov         r3, #1, 22
  00df4	e3833026	 orr         r3, r3, #0x26
  00df8	e59f2034	 ldr         r2, [pc, #0x34]
  00dfc	e59f102c	 ldr         r1, [pc, #0x2C]
  00e00	e59f0024	 ldr         r0, [pc, #0x24]
  00e04	eb000000	 bl          NKDbgPrintfW
  00e08	e6000010	 __debugbreak_ce
  00e0c	e3a03000	 mov         r3, #0
  00e10	e58d3020	 str         r3, [sp, #0x20]
  00e14		 |$LN6@FMD_ReadSe|

; 1063 :     return rc;

  00e14	e59d3004	 ldr         r3, [sp, #4]
  00e18	e58d300c	 str         r3, [sp, #0xC]

; 1064 : }

  00e1c	e59d000c	 ldr         r0, [sp, #0xC]
  00e20	e28dd024	 add         sp, sp, #0x24
  00e24	e89d6000	 ldmia       sp, {sp, lr}
  00e28	e12fff1e	 bx          lr
  00e2c		 |$LN10@FMD_ReadSe|
  00e2c		 |$LN11@FMD_ReadSe|
  00e2c	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  00e30		 |$LN12@FMD_ReadSe|
  00e30	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  00e34		 |$LN13@FMD_ReadSe|
  00e34	00000000	 DCD         |??_C@_1KM@BKLPJHHD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  00e38		 |$LN14@FMD_ReadSe|
  00e38	00000000	 DCD         |s_hNand|
  00e3c		 |$M46714|

			 ENDP  ; |FMD_ReadSectorOOB|


  00000			 AREA	 |.pdata|, PDATA
|$T46727| DCD	|$LN5@NAND_GetGp|
	DCD	0x40000c04
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |NAND_GetGpmcRegs| PROC

; 313  : {

  00000		 |$LN5@NAND_GetGp|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M46724|

; 314  :     return ((NandDevice_t*)hNand)->pGpmcRegs;

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283302c	 add         r3, r3, #0x2C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e58d3000	 str         r3, [sp]

; 315  : }

  00020	e59d0000	 ldr         r0, [sp]
  00024	e28dd004	 add         sp, sp, #4
  00028	e89d6000	 ldmia       sp, {sp, lr}
  0002c	e12fff1e	 bx          lr
  00030		 |$M46725|

			 ENDP  ; |NAND_GetGpmcRegs|

	EXPORT	|SectorAccess|

  00058			 AREA	 |.pdata|, PDATA
|$T46735| DCD	|$LN5@NAND_Seek|
	DCD	0x40001004
; Function compile flags: /Odtp

  00e3c			 AREA	 |.text|, CODE, ARM

  00e3c		 |NAND_Seek| PROC

; 538  : {

  00e3c		 |$LN5@NAND_Seek|
  00e3c	e1a0c00d	 mov         r12, sp
  00e40	e92d0007	 stmdb       sp!, {r0 - r2}
  00e44	e92d5000	 stmdb       sp!, {r12, lr}
  00e48	e24dd008	 sub         sp, sp, #8
  00e4c		 |$M46732|

; 539  :     // seek to address
; 540  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  00e4c	e59d3010	 ldr         r3, [sp, #0x10]
  00e50	e58d3000	 str         r3, [sp]

; 541  :     SectorAccess(pDevice, sector, offset);

  00e54	e59d2018	 ldr         r2, [sp, #0x18]
  00e58	e59d1014	 ldr         r1, [sp, #0x14]
  00e5c	e59d0000	 ldr         r0, [sp]
  00e60	eb000000	 bl          SectorAccess

; 542  :     return TRUE;

  00e64	e3a03001	 mov         r3, #1
  00e68	e58d3004	 str         r3, [sp, #4]

; 543  : }

  00e6c	e59d0004	 ldr         r0, [sp, #4]
  00e70	e28dd008	 add         sp, sp, #8
  00e74	e89d6000	 ldmia       sp, {sp, lr}
  00e78	e12fff1e	 bx          lr
  00e7c		 |$M46733|

			 ENDP  ; |NAND_Seek|

	IMPORT	|__rt_udiv|

  00000			 AREA	 |.pdata|, PDATA
|$T46741| DCD	|$LN5@SectorAcce|
	DCD	0x40003403
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |SectorAccess| PROC

; 217  : {

  00000		 |$LN5@SectorAcce|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0007	 stmdb       sp!, {r0 - r2}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46738|

; 218  :     
; 219  :     // Offset is provided to this function in bytes; NAND device requires words
; 220  :     offset = offset / 2;

  0000c	e59d1010	 ldr         r1, [sp, #0x10]
  00010	e3a00002	 mov         r0, #2
  00014	eb000000	 bl          __rt_udiv
  00018	e58d0010	 str         r0, [sp, #0x10]

; 221  :     WRITE_NAND(pDevice->pNandAddress, (offset & 0xFF));

  0001c	e59d3010	 ldr         r3, [sp, #0x10]
  00020	e20330ff	 and         r3, r3, #0xFF
  00024	e1a02803	 mov         r2, r3, lsl #16
  00028	e1a02822	 mov         r2, r2, lsr #16
  0002c	e59d3008	 ldr         r3, [sp, #8]
  00030	e2833020	 add         r3, r3, #0x20
  00034	e5933000	 ldr         r3, [r3]
  00038	e1c320b0	 strh        r2, [r3]

; 222  :     WRITE_NAND(pDevice->pNandAddress, ((offset >> 8) & 0xFF));

  0003c	e59d3010	 ldr         r3, [sp, #0x10]
  00040	e1a03803	 mov         r3, r3, lsl #16
  00044	e1a03c23	 mov         r3, r3, lsr #24
  00048	e1a02803	 mov         r2, r3, lsl #16
  0004c	e1a02822	 mov         r2, r2, lsr #16
  00050	e59d3008	 ldr         r3, [sp, #8]
  00054	e2833020	 add         r3, r3, #0x20
  00058	e5933000	 ldr         r3, [r3]
  0005c	e1c320b0	 strh        r2, [r3]

; 223  :     WRITE_NAND(pDevice->pNandAddress, (sector & 0xFF));

  00060	e59d300c	 ldr         r3, [sp, #0xC]
  00064	e20330ff	 and         r3, r3, #0xFF
  00068	e1a02803	 mov         r2, r3, lsl #16
  0006c	e1a02822	 mov         r2, r2, lsr #16
  00070	e59d3008	 ldr         r3, [sp, #8]
  00074	e2833020	 add         r3, r3, #0x20
  00078	e5933000	 ldr         r3, [r3]
  0007c	e1c320b0	 strh        r2, [r3]

; 224  :     WRITE_NAND(pDevice->pNandAddress, ((sector >> 8) & 0xFF));

  00080	e59d300c	 ldr         r3, [sp, #0xC]
  00084	e1a03803	 mov         r3, r3, lsl #16
  00088	e1a03c23	 mov         r3, r3, lsr #24
  0008c	e1a02803	 mov         r2, r3, lsl #16
  00090	e1a02822	 mov         r2, r2, lsr #16
  00094	e59d3008	 ldr         r3, [sp, #8]
  00098	e2833020	 add         r3, r3, #0x20
  0009c	e5933000	 ldr         r3, [r3]
  000a0	e1c320b0	 strh        r2, [r3]

; 225  :     WRITE_NAND(pDevice->pNandAddress, ((sector >> 16) & 0xFF));

  000a4	e59d300c	 ldr         r3, [sp, #0xC]
  000a8	e1a03403	 mov         r3, r3, lsl #8
  000ac	e1a03c23	 mov         r3, r3, lsr #24
  000b0	e1a02803	 mov         r2, r3, lsl #16
  000b4	e1a02822	 mov         r2, r2, lsr #16
  000b8	e59d3008	 ldr         r3, [sp, #8]
  000bc	e2833020	 add         r3, r3, #0x20
  000c0	e5933000	 ldr         r3, [r3]
  000c4	e1c320b0	 strh        r2, [r3]

; 226  : }

  000c8	e89d6000	 ldmia       sp, {sp, lr}
  000cc	e12fff1e	 bx          lr
  000d0		 |$M46739|

			 ENDP  ; |SectorAccess|

	IMPORT	|ECC_Result|
	IMPORT	|memcpy|

  00060			 AREA	 |.pdata|, PDATA
|$T46749| DCD	|$LN19@NAND_Read|
	DCD	0x40008604
; Function compile flags: /Odtp

  00e7c			 AREA	 |.text|, CODE, ARM

  00e7c		 |NAND_Read| PROC

; 553  : {

  00e7c		 |$LN19@NAND_Read|
  00e7c	e1a0c00d	 mov         r12, sp
  00e80	e92d000f	 stmdb       sp!, {r0 - r3}
  00e84	e92d5000	 stmdb       sp!, {r12, lr}
  00e88	e24dd00c	 sub         sp, sp, #0xC
  00e8c		 |$M46746|

; 554  :     UINT32 fifoLevel;
; 555  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  00e8c	e59d3014	 ldr         r3, [sp, #0x14]
  00e90	e58d3000	 str         r3, [sp]

; 556  : 
; 557  :     // Start ECC if a valid ECC buffer is passed in
; 558  :     if (pEcc != NULL)

  00e94	e59d3020	 ldr         r3, [sp, #0x20]
  00e98	e3530000	 cmp         r3, #0
  00e9c	0a00000a	 beq         |$LN14@NAND_Read|

; 559  :         {
; 560  :         ECC_Init(pDevice->pGpmcRegs, pDevice->ECCCfg, pDevice->ECCtype, NAND_ECC_READ);

  00ea0	e3a03000	 mov         r3, #0
  00ea4	e59d2000	 ldr         r2, [sp]
  00ea8	e2822060	 add         r2, r2, #0x60
  00eac	e5922000	 ldr         r2, [r2]
  00eb0	e59d1000	 ldr         r1, [sp]
  00eb4	e2811058	 add         r1, r1, #0x58
  00eb8	e5911000	 ldr         r1, [r1]
  00ebc	e59d0000	 ldr         r0, [sp]
  00ec0	e280002c	 add         r0, r0, #0x2C
  00ec4	e5900000	 ldr         r0, [r0]
  00ec8	eb000000	 bl          ECC_Init
  00ecc		 |$LN14@NAND_Read|

; 561  :         }
; 562  : 
; 563  :     // enable prefetch if it's been properly configured
; 564  :     if (pDevice->prefetchMode == kPrefetchRead )

  00ecc	e59d3000	 ldr         r3, [sp]
  00ed0	e2833018	 add         r3, r3, #0x18
  00ed4	e5933000	 ldr         r3, [r3]
  00ed8	e3530001	 cmp         r3, #1
  00edc	1a000031	 bne         |$LN13@NAND_Read|

; 565  :         {
; 566  :         SETREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONTROL, 
; 567  :             GPMC_PREFETCH_CONTROL_STARTENGINE
; 568  :             );

  00ee0	e59d3000	 ldr         r3, [sp]
  00ee4	e283302c	 add         r3, r3, #0x2C
  00ee8	e5933000	 ldr         r3, [r3]
  00eec	e2833f7b	 add         r3, r3, #0x7B, 30
  00ef0	e5933000	 ldr         r3, [r3]
  00ef4	e3832001	 orr         r2, r3, #1
  00ef8	e59d3000	 ldr         r3, [sp]
  00efc	e283302c	 add         r3, r3, #0x2C
  00f00	e5933000	 ldr         r3, [r3]
  00f04	e2833f7b	 add         r3, r3, #0x7B, 30
  00f08	e5832000	 str         r2, [r3]
  00f0c		 |$LN12@NAND_Read|

; 569  : 
; 570  :         // start copying data into passed in buffer
; 571  :         while (size > 0)

  00f0c	e59d301c	 ldr         r3, [sp, #0x1C]
  00f10	e3530000	 cmp         r3, #0
  00f14	da00001e	 ble         |$LN11@NAND_Read|

; 572  :             {
; 573  :             // wait for fifo threshold to be reached
; 574  :             fifoLevel = 0;

  00f18	e3a03000	 mov         r3, #0
  00f1c	e58d3004	 str         r3, [sp, #4]
  00f20		 |$LN10@NAND_Read|

; 575  :             while (fifoLevel < FIFO_THRESHOLD)

  00f20	e59d3004	 ldr         r3, [sp, #4]
  00f24	e3530040	 cmp         r3, #0x40
  00f28	2a00000c	 bcs         |$LN9@NAND_Read|

; 576  :                 {
; 577  :                 fifoLevel = INREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_STATUS);

  00f2c	e59d3000	 ldr         r3, [sp]
  00f30	e283302c	 add         r3, r3, #0x2C
  00f34	e5933000	 ldr         r3, [r3]
  00f38	e2833e1f	 add         r3, r3, #0x1F, 28
  00f3c	e5933000	 ldr         r3, [r3]
  00f40	e58d3004	 str         r3, [sp, #4]

; 578  :                 fifoLevel &= GPMC_PREFETCH_STATUS_FIFOMASK;

  00f44	e59d3004	 ldr         r3, [sp, #4]
  00f48	e203347f	 and         r3, r3, #0x7F, 8
  00f4c	e58d3004	 str         r3, [sp, #4]

; 579  :                 fifoLevel >>= GPMC_PREFETCH_STATUS_FIFOSHIFT;

  00f50	e59d3004	 ldr         r3, [sp, #4]
  00f54	e1a03c23	 mov         r3, r3, lsr #24
  00f58	e58d3004	 str         r3, [sp, #4]

; 580  :                 }

  00f5c	eaffffef	 b           |$LN10@NAND_Read|
  00f60		 |$LN9@NAND_Read|

; 581  : 
; 582  :             // copy data to buffer
; 583  :             memcpy(pData, (BYTE*)pDevice->pFifo, FIFO_THRESHOLD);

  00f60	e3a02040	 mov         r2, #0x40
  00f64	e59d3000	 ldr         r3, [sp]
  00f68	e2833028	 add         r3, r3, #0x28
  00f6c	e5931000	 ldr         r1, [r3]
  00f70	e59d0018	 ldr         r0, [sp, #0x18]
  00f74	eb000000	 bl          memcpy

; 584  :             pData += FIFO_THRESHOLD;

  00f78	e59d3018	 ldr         r3, [sp, #0x18]
  00f7c	e2833040	 add         r3, r3, #0x40
  00f80	e58d3018	 str         r3, [sp, #0x18]

; 585  :             size -= FIFO_THRESHOLD;        

  00f84	e59d301c	 ldr         r3, [sp, #0x1C]
  00f88	e2433040	 sub         r3, r3, #0x40
  00f8c	e58d301c	 str         r3, [sp, #0x1C]

; 586  :             }

  00f90	eaffffdd	 b           |$LN12@NAND_Read|
  00f94		 |$LN11@NAND_Read|

; 587  : 
; 588  :         // NOTE:
; 589  :         //  Prefetch engine will automatically stop on the completion
; 590  :         // of data transfer
; 591  :         pDevice->prefetchMode = kPrefetchOff;

  00f94	e59d3000	 ldr         r3, [sp]
  00f98	e2832018	 add         r2, r3, #0x18
  00f9c	e3a03000	 mov         r3, #0
  00fa0	e5823000	 str         r3, [r2]

; 592  :         }
; 593  :     else

  00fa4	ea000024	 b           |$LN8@NAND_Read|
  00fa8		 |$LN13@NAND_Read|
  00fa8		 |$LN7@NAND_Read|

; 594  :         {
; 595  :         // NOTE:
; 596  :         //  Code assumes the entire page is read at once
; 597  :         while (size >= sizeof(NANDREG))

  00fa8	e59d301c	 ldr         r3, [sp, #0x1C]
  00fac	e3530002	 cmp         r3, #2
  00fb0	3a000021	 bcc         |$LN6@NAND_Read|

; 598  :             {
; 599  :             *(NANDREG*)pData = READ_NAND(pDevice->pNandData);

  00fb4	e59d3000	 ldr         r3, [sp]
  00fb8	e2833024	 add         r3, r3, #0x24
  00fbc	e5933000	 ldr         r3, [r3]
  00fc0	e1d320b0	 ldrh        r2, [r3]
  00fc4	e59d3018	 ldr         r3, [sp, #0x18]
  00fc8	e1c320b0	 strh        r2, [r3]

; 600  :             pData += sizeof(NANDREG);

  00fcc	e59d3018	 ldr         r3, [sp, #0x18]
  00fd0	e2833002	 add         r3, r3, #2
  00fd4	e58d3018	 str         r3, [sp, #0x18]

; 601  :             size -= sizeof(NANDREG);

  00fd8	e59d301c	 ldr         r3, [sp, #0x1C]
  00fdc	e2433002	 sub         r3, r3, #2
  00fe0	e58d301c	 str         r3, [sp, #0x1C]

; 602  : 
; 603  : 	     /* workaround for BCH engine when ECC is not put at the end of OOB area.  
; 604  : 		  the checking is based on puting ECC at the BootROM expected location -
; 605  : 		  with 2 bytes offset from the start of the OOB area */
; 606  :             if(pDevice->ECCtype == BCH4bit || pDevice->ECCtype == BCH8bit)

  00fe4	e59d3000	 ldr         r3, [sp]
  00fe8	e2833060	 add         r3, r3, #0x60
  00fec	e5933000	 ldr         r3, [r3]
  00ff0	e3530001	 cmp         r3, #1
  00ff4	0a000004	 beq         |$LN4@NAND_Read|
  00ff8	e59d3000	 ldr         r3, [sp]
  00ffc	e2833060	 add         r3, r3, #0x60
  01000	e5933000	 ldr         r3, [r3]
  01004	e3530002	 cmp         r3, #2
  01008	1a00000a	 bne         |$LN5@NAND_Read|
  0100c		 |$LN4@NAND_Read|

; 607  :                 if (size == (int)(sizeof(NAND_SPARE_AREA) - ECC_OFFSET - pDevice->ECCsize))

  0100c	e59d3000	 ldr         r3, [sp]
  01010	e2833064	 add         r3, r3, #0x64
  01014	e5933000	 ldr         r3, [r3]
  01018	e263203e	 rsb         r2, r3, #0x3E
  0101c	e59d301c	 ldr         r3, [sp, #0x1C]
  01020	e1530002	 cmp         r3, r2
  01024	1a000003	 bne         |$LN3@NAND_Read|

; 608  :         	         ECC_Reset(pDevice->pGpmcRegs);  

  01028	e59d3000	 ldr         r3, [sp]
  0102c	e283302c	 add         r3, r3, #0x2C
  01030	e5930000	 ldr         r0, [r3]
  01034	eb000000	 bl          ECC_Reset
  01038		 |$LN3@NAND_Read|
  01038		 |$LN5@NAND_Read|

; 609  :                 }

  01038	eaffffda	 b           |$LN7@NAND_Read|
  0103c		 |$LN6@NAND_Read|
  0103c		 |$LN8@NAND_Read|

; 610  :         }
; 611  : 
; 612  :     // get ECC result
; 613  :     if (pEcc != NULL)

  0103c	e59d3020	 ldr         r3, [sp, #0x20]
  01040	e3530000	 cmp         r3, #0
  01044	0a000008	 beq         |$LN2@NAND_Read|

; 614  :         {
; 615  :         // UNDONE:
; 616  :         //  should pass in sector size???
; 617  :         ECC_Result(pDevice->pGpmcRegs, pEcc, pDevice->ECCsize);

  01048	e59d3000	 ldr         r3, [sp]
  0104c	e2833064	 add         r3, r3, #0x64
  01050	e5932000	 ldr         r2, [r3]
  01054	e59d1020	 ldr         r1, [sp, #0x20]
  01058	e59d3000	 ldr         r3, [sp]
  0105c	e283302c	 add         r3, r3, #0x2C
  01060	e5930000	 ldr         r0, [r3]
  01064	eb000000	 bl          ECC_Result

; 618  :         }
; 619  :     else

  01068	ea000003	 b           |$LN1@NAND_Read|
  0106c		 |$LN2@NAND_Read|

; 620  :     	{
; 621  :     	ECC_Reset(pDevice->pGpmcRegs);

  0106c	e59d3000	 ldr         r3, [sp]
  01070	e283302c	 add         r3, r3, #0x2C
  01074	e5930000	 ldr         r0, [r3]
  01078	eb000000	 bl          ECC_Reset
  0107c		 |$LN1@NAND_Read|

; 622  :     	}
; 623  :     return TRUE;

  0107c	e3a03001	 mov         r3, #1
  01080	e58d3008	 str         r3, [sp, #8]

; 624  : }

  01084	e59d0008	 ldr         r0, [sp, #8]
  01088	e28dd00c	 add         sp, sp, #0xC
  0108c	e89d6000	 ldmia       sp, {sp, lr}
  01090	e12fff1e	 bx          lr
  01094		 |$M46747|

			 ENDP  ; |NAND_Read|

	IMPORT	|EnterCriticalSection|

  00068			 AREA	 |.pdata|, PDATA
|$T46755| DCD	|$LN5@NAND_Mutex|
	DCD	0x40000f04
; Function compile flags: /Odtp

  01094			 AREA	 |.text|, CODE, ARM

  01094		 |NAND_MutexEnter| PROC

; 775  : {   

  01094		 |$LN5@NAND_Mutex|
  01094	e1a0c00d	 mov         r12, sp
  01098	e92d0001	 stmdb       sp!, {r0}
  0109c	e92d5000	 stmdb       sp!, {r12, lr}
  010a0	e24dd008	 sub         sp, sp, #8
  010a4		 |$M46752|

; 776  : #ifdef DEVICE_MODE
; 777  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  010a4	e59d3010	 ldr         r3, [sp, #0x10]
  010a8	e58d3000	 str         r3, [sp]

; 778  :     EnterCriticalSection(&pDevice->cs); 

  010ac	e59d0000	 ldr         r0, [sp]
  010b0	eb000000	 bl          EnterCriticalSection

; 779  :     return pDevice->cs.LockCount;

  010b4	e59d3000	 ldr         r3, [sp]
  010b8	e5933000	 ldr         r3, [r3]
  010bc	e58d3004	 str         r3, [sp, #4]

; 780  : #else
; 781  :     UNREFERENCED_PARAMETER(hNand);
; 782  :     return 0;
; 783  : #endif
; 784  : }

  010c0	e59d0004	 ldr         r0, [sp, #4]
  010c4	e28dd008	 add         sp, sp, #8
  010c8	e89d6000	 ldmia       sp, {sp, lr}
  010cc	e12fff1e	 bx          lr
  010d0		 |$M46753|

			 ENDP  ; |NAND_MutexEnter|

	IMPORT	|LeaveCriticalSection|

  00070			 AREA	 |.pdata|, PDATA
|$T46761| DCD	|$LN5@NAND_Mutex@2|
	DCD	0x40000f04
; Function compile flags: /Odtp

  010d0			 AREA	 |.text|, CODE, ARM

  010d0		 |NAND_MutexExit| PROC

; 791  : {

  010d0		 |$LN5@NAND_Mutex@2|
  010d0	e1a0c00d	 mov         r12, sp
  010d4	e92d0001	 stmdb       sp!, {r0}
  010d8	e92d5000	 stmdb       sp!, {r12, lr}
  010dc	e24dd008	 sub         sp, sp, #8
  010e0		 |$M46758|

; 792  : #ifdef DEVICE_MODE
; 793  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  010e0	e59d3010	 ldr         r3, [sp, #0x10]
  010e4	e58d3000	 str         r3, [sp]

; 794  :     LeaveCriticalSection(&pDevice->cs); 

  010e8	e59d0000	 ldr         r0, [sp]
  010ec	eb000000	 bl          LeaveCriticalSection

; 795  :     return pDevice->cs.LockCount;

  010f0	e59d3000	 ldr         r3, [sp]
  010f4	e5933000	 ldr         r3, [r3]
  010f8	e58d3004	 str         r3, [sp, #4]

; 796  : #else
; 797  :     UNREFERENCED_PARAMETER(hNand);
; 798  :     return 0;
; 799  : #endif
; 800  : }

  010fc	e59d0004	 ldr         r0, [sp, #4]
  01100	e28dd008	 add         sp, sp, #8
  01104	e89d6000	 ldmia       sp, {sp, lr}
  01108	e12fff1e	 bx          lr
  0110c		 |$M46759|

			 ENDP  ; |NAND_MutexExit|

	EXPORT	|??_C@_1FO@NIMLMHMI@?$AAN?$AAA?$AAN?$AAD?$AA_?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AAE?$AAc?$AAc?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAs?$AA?5?$AAF?$AAA?$AAL?$AAS@| [ DATA ] ; `string'
	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|FMD_ReadSector|
	IMPORT	|__security_cookie|
	IMPORT	|__GSHandlerCheck|
	IMPORT	|__security_check_cookie|

  00078			 AREA	 |.pdata|, PDATA
|$T46775| DCD	|$LN25@FMD_ReadSe@2|
	DCD	0xc0012204

  00000			 AREA	 |.rdata|, DATA, READONLY
|??_C@_1FO@NIMLMHMI@?$AAN?$AAA?$AAN?$AAD?$AA_?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AAE?$AAc?$AAc?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAs?$AA?5?$AAF?$AAA?$AAL?$AAS@| DCB "N"
	DCB	0x0, "A", 0x0, "N", 0x0, "D", 0x0, "_", 0x0, "C", 0x0, "o"
	DCB	0x0, "r", 0x0, "r", 0x0, "e", 0x0, "c", 0x0, "t", 0x0, "E"
	DCB	0x0, "c", 0x0, "c", 0x0, "D", 0x0, "a", 0x0, "t", 0x0, "a"
	DCB	0x0, " ", 0x0, "r", 0x0, "e", 0x0, "t", 0x0, "u", 0x0, "r"
	DCB	0x0, "n", 0x0, "s", 0x0, " ", 0x0, "F", 0x0, "A", 0x0, "L"
	DCB	0x0, "S", 0x0, "E", 0x0, ",", 0x0, " ", 0x0, "s", 0x0, "e"
	DCB	0x0, "c", 0x0, "t", 0x0, "o", 0x0, "r", 0x0, "=", 0x0, "%"
	DCB	0x0, "d", 0x0, 0xd, 0x0, 0xa, 0x0, 0x0, 0x0 ; `string'

  00000			 AREA	 |.xdata|, DATA
|$T46771| DCD	0xffffffc4
; Function compile flags: /Odtp

  0110c			 AREA	 |.text|, CODE, ARM

  0110c	00000000	 DCD         |__GSHandlerCheck|
  01110	00000000	 DCD         |$T46771|

  01114		 |FMD_ReadSector| PROC

; 1079 : {

  01114		 |$LN25@FMD_ReadSe@2|
  01114	e1a0c00d	 mov         r12, sp
  01118	e92d000f	 stmdb       sp!, {r0 - r3}
  0111c	e92d5000	 stmdb       sp!, {r12, lr}
  01120	e24dd0b0	 sub         sp, sp, #0xB0
  01124		 |$M46772|
  01124	e59f346c	 ldr         r3, [pc, #0x46C]
  01128	e5933000	 ldr         r3, [r3]
  0112c	e58d308c	 str         r3, [sp, #0x8C]

; 1080 :     BOOL rc = FALSE;

  01130	e3a03000	 mov         r3, #0
  01134	e58d3008	 str         r3, [sp, #8]

; 1081 :     NAND_SPARE_AREA sa;
; 1082 :     UINT32 oldIdleMode;
; 1083 :     UINT32 sectorSize;
; 1084 :     BYTE rgEcc[ECC_BYTES];
; 1085 : 
; 1086 :     // Fail if FMD wasn't opened
; 1087 :     if (s_hNand == NULL) goto cleanUp;

  01138	e59f3450	 ldr         r3, [pc, #0x450]
  0113c	e5933000	 ldr         r3, [r3]
  01140	e3530000	 cmp         r3, #0
  01144	1a000000	 bne         |$LN18@FMD_ReadSe@2|
  01148	ea0000ef	 b           |$cleanUp$46402|
  0114c		 |$LN18@FMD_ReadSe@2|

; 1088 :     
; 1089 :     NAND_MutexEnter(s_hNand);

  0114c	e59f343c	 ldr         r3, [pc, #0x43C]
  01150	e5930000	 ldr         r0, [r3]
  01154	eb000000	 bl          NAND_MutexEnter

; 1090 : 
; 1091 :     //  Change idle mode to no-idle to ensure access to GPMC registers
; 1092 :     sectorSize = NAND_GetGeometry(s_hNand)->sectorSize;

  01158	e59f3430	 ldr         r3, [pc, #0x430]
  0115c	e5930000	 ldr         r0, [r3]
  01160	eb000000	 bl          NAND_GetGeometry
  01164	e58d0098	 str         r0, [sp, #0x98]
  01168	e59d3098	 ldr         r3, [sp, #0x98]
  0116c	e283300c	 add         r3, r3, #0xC
  01170	e5933000	 ldr         r3, [r3]
  01174	e58d3004	 str         r3, [sp, #4]

; 1093 :     oldIdleMode = INREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG));

  01178	e59f3410	 ldr         r3, [pc, #0x410]
  0117c	e5930000	 ldr         r0, [r3]
  01180	eb000000	 bl          NAND_GetGpmcRegs
  01184	e58d009c	 str         r0, [sp, #0x9C]
  01188	e59d309c	 ldr         r3, [sp, #0x9C]
  0118c	e2833010	 add         r3, r3, #0x10
  01190	e5933000	 ldr         r3, [r3]
  01194	e58d3080	 str         r3, [sp, #0x80]

; 1094 :     OUTREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG), SYSCONFIG_NOIDLE);

  01198	e59f33f0	 ldr         r3, [pc, #0x3F0]
  0119c	e5930000	 ldr         r0, [r3]
  011a0	eb000000	 bl          NAND_GetGpmcRegs
  011a4	e58d00a0	 str         r0, [sp, #0xA0]
  011a8	e59d30a0	 ldr         r3, [sp, #0xA0]
  011ac	e2832010	 add         r2, r3, #0x10
  011b0	e3a03008	 mov         r3, #8
  011b4	e5823000	 str         r3, [r2]
  011b8		 |$LN17@FMD_ReadSe@2|

; 1095 : 	
; 1096 :     while (sectors > 0)

  011b8	e59d30c4	 ldr         r3, [sp, #0xC4]
  011bc	e3530000	 cmp         r3, #0
  011c0	9a0000c7	 bls         |$LN16@FMD_ReadSe@2|

; 1097 :         {
; 1098 :         //  Only enable during NAND read/write/erase operations
; 1099 :         NAND_Enable(s_hNand, TRUE);

  011c4	e3a01001	 mov         r1, #1
  011c8	e59f33c0	 ldr         r3, [pc, #0x3C0]
  011cc	e5930000	 ldr         r0, [r3]
  011d0	eb000000	 bl          NAND_Enable

; 1100 :         
; 1101 :         // Read sector from A
; 1102 :         if (pBuffer != NULL)

  011d4	e59d30bc	 ldr         r3, [sp, #0xBC]
  011d8	e3530000	 cmp         r3, #0
  011dc	0a00002a	 beq         |$LN15@FMD_ReadSe@2|

; 1103 :             {
; 1104 :             // be sure to do this before sending the READ command and not after ! or the
; 1105 :             // status register would remain at status read mode, which would have to be changed
; 1106 :             // before retreiving the data
; 1107 :             WaitForReadyStatus(s_hNand);

  011e0	e59f33a8	 ldr         r3, [pc, #0x3A8]
  011e4	e5930000	 ldr         r0, [r3]
  011e8	eb000000	 bl          WaitForReadyStatus

; 1108 : 
; 1109 : 			
; 1110 :             // configure prefetch engine for input and start it
; 1111 :             NAND_ConfigurePrefetch(s_hNand, NAND_DATA_READ);

  011ec	e3a01001	 mov         r1, #1
  011f0	e59f3398	 ldr         r3, [pc, #0x398]
  011f4	e5930000	 ldr         r0, [r3]
  011f8	eb000000	 bl          NAND_ConfigurePrefetch

; 1112 :            
; 1113 :             // Send the command
; 1114 :             NAND_SendCommand (s_hNand, NAND_CMD_READ1);

  011fc	e3a01000	 mov         r1, #0
  01200	e59f3388	 ldr         r3, [pc, #0x388]
  01204	e5930000	 ldr         r0, [r3]
  01208	eb000000	 bl          NAND_SendCommand

; 1115 : 
; 1116 :             // Send the address
; 1117 :             NAND_Seek(s_hNand, sector, 0);

  0120c	e3a02000	 mov         r2, #0
  01210	e59d10b8	 ldr         r1, [sp, #0xB8]
  01214	e59f3374	 ldr         r3, [pc, #0x374]
  01218	e5930000	 ldr         r0, [r3]
  0121c	eb000000	 bl          NAND_Seek

; 1118 : 
; 1119 :             // Send the command
; 1120 :             NAND_SendCommand(s_hNand, NAND_CMD_READ2);

  01220	e3a01030	 mov         r1, #0x30
  01224	e59f3364	 ldr         r3, [pc, #0x364]
  01228	e5930000	 ldr         r0, [r3]
  0122c	eb000000	 bl          NAND_SendCommand

; 1121 : 
; 1122 :             // Wait for the action to finish
; 1123 :             WaitForReadyStatus(s_hNand);

  01230	e59f3358	 ldr         r3, [pc, #0x358]
  01234	e5930000	 ldr         r0, [r3]
  01238	eb000000	 bl          WaitForReadyStatus

; 1124 : 
; 1125 :             //Force a read here, else we will read the status again
; 1126 :             NAND_SendCommand (s_hNand, NAND_CMD_READ1);

  0123c	e3a01000	 mov         r1, #0
  01240	e59f3348	 ldr         r3, [pc, #0x348]
  01244	e5930000	 ldr         r0, [r3]
  01248	eb000000	 bl          NAND_SendCommand

; 1127 : 
; 1128 : 	     // read data
; 1129 :             NAND_Read(s_hNand, pBuffer, sectorSize, rgEcc);

  0124c	e28d300c	 add         r3, sp, #0xC
  01250	e59d2004	 ldr         r2, [sp, #4]
  01254	e59d10bc	 ldr         r1, [sp, #0xBC]
  01258	e59f0330	 ldr         r0, [pc, #0x330]
  0125c	e5900000	 ldr         r0, [r0]
  01260	eb000000	 bl          NAND_Read

; 1130 : 			
; 1131 :             // read spare area
; 1132 :             NAND_Read(s_hNand, (BYTE*)&sa, sizeof(sa), NULL);

  01264	e3a03000	 mov         r3, #0
  01268	e3a02040	 mov         r2, #0x40
  0126c	e28d1040	 add         r1, sp, #0x40
  01270	e59f0318	 ldr         r0, [pc, #0x318]
  01274	e5900000	 ldr         r0, [r0]
  01278	eb000000	 bl          NAND_Read

; 1133 : 
; 1134 :             // Make sure of the NAND status
; 1135 :             WaitForReadyStatus(s_hNand);

  0127c	e59f330c	 ldr         r3, [pc, #0x30C]
  01280	e5930000	 ldr         r0, [r3]
  01284	eb000000	 bl          WaitForReadyStatus

; 1136 :             }
; 1137 :         else

  01288	ea00001f	 b           |$LN14@FMD_ReadSe@2|
  0128c		 |$LN15@FMD_ReadSe@2|

; 1138 :          {
; 1139 :             // Make sure of the NAND status
; 1140 :             WaitForReadyStatus(s_hNand);

  0128c	e59f32fc	 ldr         r3, [pc, #0x2FC]
  01290	e5930000	 ldr         r0, [r3]
  01294	eb000000	 bl          WaitForReadyStatus

; 1141 :             // Send the command
; 1142 :             NAND_SendCommand(s_hNand, NAND_CMD_READ1);

  01298	e3a01000	 mov         r1, #0
  0129c	e59f32ec	 ldr         r3, [pc, #0x2EC]
  012a0	e5930000	 ldr         r0, [r3]
  012a4	eb000000	 bl          NAND_SendCommand

; 1143 :     
; 1144 :             // Send the address
; 1145 :             NAND_Seek(s_hNand, sector, sectorSize);

  012a8	e59d2004	 ldr         r2, [sp, #4]
  012ac	e59d10b8	 ldr         r1, [sp, #0xB8]
  012b0	e59f32d8	 ldr         r3, [pc, #0x2D8]
  012b4	e5930000	 ldr         r0, [r3]
  012b8	eb000000	 bl          NAND_Seek

; 1146 :     
; 1147 :             // Send the command
; 1148 :             NAND_SendCommand(s_hNand, NAND_CMD_READ2);

  012bc	e3a01030	 mov         r1, #0x30
  012c0	e59f32c8	 ldr         r3, [pc, #0x2C8]
  012c4	e5930000	 ldr         r0, [r3]
  012c8	eb000000	 bl          NAND_SendCommand

; 1149 :     
; 1150 :             // Wait for the action to finish
; 1151 :             WaitForReadyStatus(s_hNand);

  012cc	e59f32bc	 ldr         r3, [pc, #0x2BC]
  012d0	e5930000	 ldr         r0, [r3]
  012d4	eb000000	 bl          WaitForReadyStatus

; 1152 :             //Force a read here, else we will read the status again
; 1153 :             NAND_SendCommand (s_hNand, NAND_CMD_READ1);

  012d8	e3a01000	 mov         r1, #0
  012dc	e59f32ac	 ldr         r3, [pc, #0x2AC]
  012e0	e5930000	 ldr         r0, [r3]
  012e4	eb000000	 bl          NAND_SendCommand

; 1154 :     
; 1155 :             // read spare area
; 1156 :             NAND_Read(s_hNand, (BYTE*)&sa, sizeof(sa), NULL);

  012e8	e3a03000	 mov         r3, #0
  012ec	e3a02040	 mov         r2, #0x40
  012f0	e28d1040	 add         r1, sp, #0x40
  012f4	e59f0294	 ldr         r0, [pc, #0x294]
  012f8	e5900000	 ldr         r0, [r0]
  012fc	eb000000	 bl          NAND_Read

; 1157 : 
; 1158 :             // Make sure of the NAND status
; 1159 :             WaitForReadyStatus(s_hNand);

  01300	e59f3288	 ldr         r3, [pc, #0x288]
  01304	e5930000	 ldr         r0, [r3]
  01308	eb000000	 bl          WaitForReadyStatus
  0130c		 |$LN14@FMD_ReadSe@2|

; 1160 :     
; 1161 :         }        // Copy sector info
; 1162 :         if (pSectorInfo != NULL)

  0130c	e59d30c0	 ldr         r3, [sp, #0xC0]
  01310	e3530000	 cmp         r3, #0
  01314	0a00001e	 beq         |$LN13@FMD_ReadSe@2|

; 1163 :             {
; 1164 :             pSectorInfo->bBadBlock    = sa.hwBadBlock[0] & sa.hwBadBlock[1];    // HW bad block check

  01318	e5dd3040	 ldrb        r3, [sp, #0x40]
  0131c	e1a02003	 mov         r2, r3
  01320	e5dd3041	 ldrb        r3, [sp, #0x41]
  01324	e0021003	 and         r1, r2, r3
  01328	e59d30c0	 ldr         r3, [sp, #0xC0]
  0132c	e2832005	 add         r2, r3, #5
  01330	e20130ff	 and         r3, r1, #0xFF
  01334	e5c23000	 strb        r3, [r2]

; 1165 :             pSectorInfo->bBadBlock    = pSectorInfo->bBadBlock & sa.swBadBlock; // SW bad block flag check

  01338	e59d30c0	 ldr         r3, [sp, #0xC0]
  0133c	e2833005	 add         r3, r3, #5
  01340	e5d33000	 ldrb        r3, [r3]
  01344	e1a02003	 mov         r2, r3
  01348	e5dd307c	 ldrb        r3, [sp, #0x7C]
  0134c	e0021003	 and         r1, r2, r3
  01350	e59d30c0	 ldr         r3, [sp, #0xC0]
  01354	e2832005	 add         r2, r3, #5
  01358	e20130ff	 and         r3, r1, #0xFF
  0135c	e5c23000	 strb        r3, [r2]

; 1166 :             pSectorInfo->bOEMReserved = sa.oemReserved;

  01360	e59d30c0	 ldr         r3, [sp, #0xC0]
  01364	e2832004	 add         r2, r3, #4
  01368	e5dd307d	 ldrb        r3, [sp, #0x7D]
  0136c	e5c23000	 strb        r3, [r2]

; 1167 : 
; 1168 :             memcpy(
; 1169 :                 &pSectorInfo->dwReserved1, sa.reserved1,
; 1170 :                 sizeof(pSectorInfo->dwReserved1)
; 1171 :                 );

  01370	e3a02004	 mov         r2, #4
  01374	e28d1076	 add         r1, sp, #0x76
  01378	e59d00c0	 ldr         r0, [sp, #0xC0]
  0137c	eb000000	 bl          memcpy

; 1172 : 
; 1173 :             memcpy(
; 1174 :                 &pSectorInfo->wReserved2, sa.reserved2,
; 1175 :                 sizeof(pSectorInfo->wReserved2)
; 1176 :                 );

  01380	e3a02002	 mov         r2, #2
  01384	e28d107a	 add         r1, sp, #0x7A
  01388	e59d30c0	 ldr         r3, [sp, #0xC0]
  0138c	e2830006	 add         r0, r3, #6
  01390	eb000000	 bl          memcpy
  01394		 |$LN13@FMD_ReadSe@2|

; 1177 :             }
; 1178 :         
; 1179 :         //  Only enable during NAND read/write/erase operations
; 1180 :         NAND_Enable(s_hNand, FALSE);

  01394	e3a01000	 mov         r1, #0
  01398	e59f31f0	 ldr         r3, [pc, #0x1F0]
  0139c	e5930000	 ldr         r0, [r3]
  013a0	eb000000	 bl          NAND_Enable

; 1181 : 
; 1182 :         // perform ecc correction and correct data when possible
; 1183 :         if ((pBuffer != NULL) &&
; 1184 :             (NAND_CorrectEccData(s_hNand, pBuffer, sectorSize, sa.ecc, rgEcc) == FALSE))

  013a4	e59d30bc	 ldr         r3, [sp, #0xBC]
  013a8	e3530000	 cmp         r3, #0
  013ac	0a00003b	 beq         |$LN12@FMD_ReadSe@2|
  013b0	e28d300c	 add         r3, sp, #0xC
  013b4	e58d3000	 str         r3, [sp]
  013b8	e28d3042	 add         r3, sp, #0x42
  013bc	e59d2004	 ldr         r2, [sp, #4]
  013c0	e59d10bc	 ldr         r1, [sp, #0xBC]
  013c4	e59f01c4	 ldr         r0, [pc, #0x1C4]
  013c8	e5900000	 ldr         r0, [r0]
  013cc	eb000000	 bl          NAND_CorrectEccData
  013d0	e58d00a4	 str         r0, [sp, #0xA4]
  013d4	e59d30a4	 ldr         r3, [sp, #0xA4]
  013d8	e3530000	 cmp         r3, #0
  013dc	1a00002f	 bne         |$LN12@FMD_ReadSe@2|

; 1185 :             {
; 1186 :             UINT count;
; 1187 :             UCHAR *pData = pBuffer;

  013e0	e59d30bc	 ldr         r3, [sp, #0xBC]
  013e4	e58d3084	 str         r3, [sp, #0x84]

; 1188 :             DEBUGMSG (ZONE_ERROR, (L"NAND_CorrectEccData returns FALSE, sector=%d\r\n", sector));	

  013e8	e59d10b8	 ldr         r1, [sp, #0xB8]
  013ec	e59f01a0	 ldr         r0, [pc, #0x1A0]
  013f0	eb000000	 bl          NKDbgPrintfW

; 1189 : 
; 1190 :             for (count = 0; count < sizeof(sa); count++)

  013f4	e3a03000	 mov         r3, #0
  013f8	e58d3088	 str         r3, [sp, #0x88]
  013fc	ea000002	 b           |$LN11@FMD_ReadSe@2|
  01400		 |$LN10@FMD_ReadSe@2|
  01400	e59d3088	 ldr         r3, [sp, #0x88]
  01404	e2833001	 add         r3, r3, #1
  01408	e58d3088	 str         r3, [sp, #0x88]
  0140c		 |$LN11@FMD_ReadSe@2|
  0140c	e59d3088	 ldr         r3, [sp, #0x88]
  01410	e3530040	 cmp         r3, #0x40
  01414	2a00000e	 bcs         |$LN9@FMD_ReadSe@2|

; 1191 :                 {
; 1192 :                 // Allow OEMReserved byte to be set to reserved/readonly
; 1193 :                 if (&(((UINT8*)&sa)[count]) == &sa.oemReserved) continue;

  01418	e28d2040	 add         r2, sp, #0x40
  0141c	e59d3088	 ldr         r3, [sp, #0x88]
  01420	e0822003	 add         r2, r2, r3
  01424	e28d307d	 add         r3, sp, #0x7D
  01428	e1520003	 cmp         r2, r3
  0142c	1a000000	 bne         |$LN8@FMD_ReadSe@2|
  01430	eafffff2	 b           |$LN10@FMD_ReadSe@2|
  01434		 |$LN8@FMD_ReadSe@2|

; 1194 :                 if (((UINT8*)&sa)[count] != 0xFF) goto cleanUp;

  01434	e28d2040	 add         r2, sp, #0x40
  01438	e59d3088	 ldr         r3, [sp, #0x88]
  0143c	e0823003	 add         r3, r2, r3
  01440	e5d33000	 ldrb        r3, [r3]
  01444	e35300ff	 cmp         r3, #0xFF
  01448	0a000000	 beq         |$LN7@FMD_ReadSe@2|
  0144c	ea00002e	 b           |$cleanUp$46402|
  01450		 |$LN7@FMD_ReadSe@2|

; 1195 :                 }

  01450	eaffffea	 b           |$LN10@FMD_ReadSe@2|
  01454		 |$LN9@FMD_ReadSe@2|

; 1196 : 
; 1197 :             for (count = 0; count < sectorSize; count++)

  01454	e3a03000	 mov         r3, #0
  01458	e58d3088	 str         r3, [sp, #0x88]
  0145c	ea000002	 b           |$LN6@FMD_ReadSe@2|
  01460		 |$LN5@FMD_ReadSe@2|
  01460	e59d3088	 ldr         r3, [sp, #0x88]
  01464	e2833001	 add         r3, r3, #1
  01468	e58d3088	 str         r3, [sp, #0x88]
  0146c		 |$LN6@FMD_ReadSe@2|
  0146c	e59d2088	 ldr         r2, [sp, #0x88]
  01470	e59d3004	 ldr         r3, [sp, #4]
  01474	e1520003	 cmp         r2, r3
  01478	2a000008	 bcs         |$LN4@FMD_ReadSe@2|

; 1198 :                 {
; 1199 :                 if (*pData != 0xFF) goto cleanUp;

  0147c	e59d3084	 ldr         r3, [sp, #0x84]
  01480	e5d33000	 ldrb        r3, [r3]
  01484	e35300ff	 cmp         r3, #0xFF
  01488	0a000000	 beq         |$LN3@FMD_ReadSe@2|
  0148c	ea00001e	 b           |$cleanUp$46402|
  01490		 |$LN3@FMD_ReadSe@2|

; 1200 :                 ++pData;

  01490	e59d3084	 ldr         r3, [sp, #0x84]
  01494	e2833001	 add         r3, r3, #1
  01498	e58d3084	 str         r3, [sp, #0x84]

; 1201 :                 }

  0149c	eaffffef	 b           |$LN5@FMD_ReadSe@2|
  014a0		 |$LN4@FMD_ReadSe@2|
  014a0		 |$LN12@FMD_ReadSe@2|

; 1202 :             }
; 1203 :         
; 1204 :         // Move to next sector
; 1205 :         sector++;

  014a0	e59d30b8	 ldr         r3, [sp, #0xB8]
  014a4	e2833001	 add         r3, r3, #1
  014a8	e58d30b8	 str         r3, [sp, #0xB8]

; 1206 :         if (pBuffer != NULL) pBuffer += sectorSize;

  014ac	e59d30bc	 ldr         r3, [sp, #0xBC]
  014b0	e3530000	 cmp         r3, #0
  014b4	0a000003	 beq         |$LN2@FMD_ReadSe@2|
  014b8	e59d20bc	 ldr         r2, [sp, #0xBC]
  014bc	e59d3004	 ldr         r3, [sp, #4]
  014c0	e0823003	 add         r3, r2, r3
  014c4	e58d30bc	 str         r3, [sp, #0xBC]
  014c8		 |$LN2@FMD_ReadSe@2|

; 1207 :         pSectorInfo++;

  014c8	e59d30c0	 ldr         r3, [sp, #0xC0]
  014cc	e2833008	 add         r3, r3, #8
  014d0	e58d30c0	 str         r3, [sp, #0xC0]

; 1208 :         sectors--;

  014d4	e59d30c4	 ldr         r3, [sp, #0xC4]
  014d8	e2433001	 sub         r3, r3, #1
  014dc	e58d30c4	 str         r3, [sp, #0xC4]

; 1209 :         }

  014e0	eaffff34	 b           |$LN17@FMD_ReadSe@2|
  014e4		 |$LN16@FMD_ReadSe@2|

; 1210 : 
; 1211 :     //  Change idle mode back
; 1212 :     OUTREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG), oldIdleMode);

  014e4	e59f30a4	 ldr         r3, [pc, #0xA4]
  014e8	e5930000	 ldr         r0, [r3]
  014ec	eb000000	 bl          NAND_GetGpmcRegs
  014f0	e58d00a8	 str         r0, [sp, #0xA8]
  014f4	e59d30a8	 ldr         r3, [sp, #0xA8]
  014f8	e2832010	 add         r2, r3, #0x10
  014fc	e59d3080	 ldr         r3, [sp, #0x80]
  01500	e5823000	 str         r3, [r2]

; 1213 :     
; 1214 :     // Done
; 1215 :     rc = TRUE;

  01504	e3a03001	 mov         r3, #1
  01508	e58d3008	 str         r3, [sp, #8]
  0150c		 |$cleanUp$46402|

; 1216 : 
; 1217 : cleanUp:
; 1218 :     // Release hardware lock
; 1219 :     if (s_hNand != NULL) NAND_MutexExit(s_hNand);

  0150c	e59f307c	 ldr         r3, [pc, #0x7C]
  01510	e5933000	 ldr         r3, [r3]
  01514	e3530000	 cmp         r3, #0
  01518	0a000002	 beq         |$LN1@FMD_ReadSe@2|
  0151c	e59f306c	 ldr         r3, [pc, #0x6C]
  01520	e5930000	 ldr         r0, [r3]
  01524	eb000000	 bl          NAND_MutexExit
  01528		 |$LN1@FMD_ReadSe@2|

; 1220 :     
; 1221 :     ASSERT(rc);

  01528	e59d3008	 ldr         r3, [sp, #8]
  0152c	e3530000	 cmp         r3, #0
  01530	0a000002	 beq         |$LN21@FMD_ReadSe@2|
  01534	e3a03001	 mov         r3, #1
  01538	e58d30ac	 str         r3, [sp, #0xAC]
  0153c	ea000008	 b           |$LN22@FMD_ReadSe@2|
  01540		 |$LN21@FMD_ReadSe@2|
  01540	e3a03b01	 mov         r3, #1, 22
  01544	e38330c5	 orr         r3, r3, #0xC5
  01548	e59f203c	 ldr         r2, [pc, #0x3C]
  0154c	e59f1034	 ldr         r1, [pc, #0x34]
  01550	e59f002c	 ldr         r0, [pc, #0x2C]
  01554	eb000000	 bl          NKDbgPrintfW
  01558	e6000010	 __debugbreak_ce
  0155c	e3a03000	 mov         r3, #0
  01560	e58d30ac	 str         r3, [sp, #0xAC]
  01564		 |$LN22@FMD_ReadSe@2|

; 1222 :     return rc;

  01564	e59d008c	 ldr         r0, [sp, #0x8C]
  01568	eb000000	 bl          __security_check_cookie
  0156c	e59d3008	 ldr         r3, [sp, #8]
  01570	e58d3094	 str         r3, [sp, #0x94]

; 1223 : }

  01574	e59d0094	 ldr         r0, [sp, #0x94]
  01578	e28dd0b0	 add         sp, sp, #0xB0
  0157c	e89d6000	 ldmia       sp, {sp, lr}
  01580	e12fff1e	 bx          lr
  01584		 |$LN26@FMD_ReadSe@2|
  01584		 |$LN27@FMD_ReadSe@2|
  01584	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01588		 |$LN28@FMD_ReadSe@2|
  01588	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  0158c		 |$LN29@FMD_ReadSe@2|
  0158c	00000000	 DCD         |??_C@_1KM@BKLPJHHD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01590		 |$LN30@FMD_ReadSe@2|
  01590	00000000	 DCD         |s_hNand|
  01594		 |$LN31@FMD_ReadSe@2|
  01594	00000000	 DCD         |??_C@_1FO@NIMLMHMI@?$AAN?$AAA?$AAN?$AAD?$AA_?$AAC?$AAo?$AAr?$AAr?$AAe?$AAc?$AAt?$AAE?$AAc?$AAc?$AAD?$AAa?$AAt?$AAa?$AA?5?$AAr?$AAe?$AAt?$AAu?$AAr?$AAn?$AAs?$AA?5?$AAF?$AAA?$AAL?$AAS@|
  01598		 |$LN32@FMD_ReadSe@2|
  01598	00000000	 DCD         |__security_cookie|
  0159c		 |$M46773|

			 ENDP  ; |FMD_ReadSector|


  00080			 AREA	 |.pdata|, PDATA
|$T46788| DCD	|$LN7@NAND_Confi|
	DCD	0x40004604
; Function compile flags: /Odtp

  0159c			 AREA	 |.text|, CODE, ARM

  0159c		 |NAND_ConfigurePrefetch| PROC

; 820  : {

  0159c		 |$LN7@NAND_Confi|
  0159c	e1a0c00d	 mov         r12, sp
  015a0	e92d0003	 stmdb       sp!, {r0, r1}
  015a4	e92d5000	 stmdb       sp!, {r12, lr}
  015a8	e24dd014	 sub         sp, sp, #0x14
  015ac		 |$M46785|

; 821  :     DWORD chipSelect = BSPGetNandCS();

  015ac	eb000000	 bl          BSPGetNandCS
  015b0	e58d0010	 str         r0, [sp, #0x10]
  015b4	e59d3010	 ldr         r3, [sp, #0x10]
  015b8	e58d3004	 str         r3, [sp, #4]

; 822  :     UINT ffPrefetchMode = 0;

  015bc	e3a03000	 mov         r3, #0
  015c0	e58d3008	 str         r3, [sp, #8]

; 823  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  015c4	e59d301c	 ldr         r3, [sp, #0x1C]
  015c8	e58d3000	 str         r3, [sp]

; 824  : 
; 825  :     // disable prefetch engine
; 826  :     pDevice->prefetchMode = kPrefetchOff;

  015cc	e59d3000	 ldr         r3, [sp]
  015d0	e2832018	 add         r2, r3, #0x18
  015d4	e3a03000	 mov         r3, #0
  015d8	e5823000	 str         r3, [r2]

; 827  :     
; 828  :     OUTREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONTROL, 0);

  015dc	e59d3000	 ldr         r3, [sp]
  015e0	e283302c	 add         r3, r3, #0x2C
  015e4	e5933000	 ldr         r3, [r3]
  015e8	e2832f7b	 add         r2, r3, #0x7B, 30
  015ec	e3a03000	 mov         r3, #0
  015f0	e5823000	 str         r3, [r2]

; 829  : 
; 830  :     // set prefetch mask
; 831  :     ffPrefetchMode = GPMC_PREFETCH_CONFIG_PFPWENROUNDROBIN |
; 832  :                      GPMC_PREFETCH_CONFIG_ENABLEOPTIMIZEDACCESS |
; 833  :                      GPMC_PREFETCH_CONFIG_WAITPINSELECTOR(chipSelect) |
; 834  :                      GPMC_PREFETCH_CONFIG_FIFOTHRESHOLD(FIFO_THRESHOLD) |
; 835  :                      GPMC_PREFETCH_CONFIG_ENGINECSSELECTOR(chipSelect);

  015f4	e59d3004	 ldr         r3, [sp, #4]
  015f8	e1a03203	 mov         r3, r3, lsl #4
  015fc	e2033030	 and         r3, r3, #0x30
  01600	e3833522	 orr         r3, r3, #0x22, 10
  01604	e3832901	 orr         r2, r3, #1, 18
  01608	e59d3004	 ldr         r3, [sp, #4]
  0160c	e1a03c03	 mov         r3, r3, lsl #24
  01610	e2033407	 and         r3, r3, #7, 8
  01614	e1823003	 orr         r3, r2, r3
  01618	e58d3008	 str         r3, [sp, #8]

; 836  : 
; 837  :     if (accessType == NAND_DATA_WRITE)

  0161c	e59d3020	 ldr         r3, [sp, #0x20]
  01620	e3530002	 cmp         r3, #2
  01624	1a000007	 bne         |$LN2@NAND_Confi|

; 838  :         {
; 839  :         pDevice->prefetchMode = kPrefetchWrite;

  01628	e59d3000	 ldr         r3, [sp]
  0162c	e2832018	 add         r2, r3, #0x18
  01630	e3a03002	 mov         r3, #2
  01634	e5823000	 str         r3, [r2]

; 840  :         ffPrefetchMode |= GPMC_PREFETCH_CONFIG_WRITEPOST;

  01638	e59d3008	 ldr         r3, [sp, #8]
  0163c	e3833001	 orr         r3, r3, #1
  01640	e58d3008	 str         r3, [sp, #8]

; 841  :         }
; 842  :     else

  01644	ea000003	 b           |$LN1@NAND_Confi|
  01648		 |$LN2@NAND_Confi|

; 843  :         {
; 844  :         pDevice->prefetchMode = kPrefetchRead;

  01648	e59d3000	 ldr         r3, [sp]
  0164c	e2832018	 add         r2, r3, #0x18
  01650	e3a03001	 mov         r3, #1
  01654	e5823000	 str         r3, [r2]
  01658		 |$LN1@NAND_Confi|

; 845  :         }
; 846  :         
; 847  :     OUTREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONFIG1, ffPrefetchMode);

  01658	e59d3000	 ldr         r3, [sp]
  0165c	e283302c	 add         r3, r3, #0x2C
  01660	e5933000	 ldr         r3, [r3]
  01664	e2832e1e	 add         r2, r3, #0x1E, 28
  01668	e59d3008	 ldr         r3, [sp, #8]
  0166c	e5823000	 str         r3, [r2]

; 848  : 
; 849  :     SETREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONFIG1, 
; 850  :         GPMC_PREFETCH_CONFIG_ENABLEENGINE
; 851  :         );

  01670	e59d3000	 ldr         r3, [sp]
  01674	e283302c	 add         r3, r3, #0x2C
  01678	e5933000	 ldr         r3, [r3]
  0167c	e2833e1e	 add         r3, r3, #0x1E, 28
  01680	e5933000	 ldr         r3, [r3]
  01684	e3832080	 orr         r2, r3, #0x80
  01688	e59d3000	 ldr         r3, [sp]
  0168c	e283302c	 add         r3, r3, #0x2C
  01690	e5933000	 ldr         r3, [r3]
  01694	e2833e1e	 add         r3, r3, #0x1E, 28
  01698	e5832000	 str         r2, [r3]

; 852  : 
; 853  :     return TRUE;

  0169c	e3a03001	 mov         r3, #1
  016a0	e58d300c	 str         r3, [sp, #0xC]

; 854  : }

  016a4	e59d000c	 ldr         r0, [sp, #0xC]
  016a8	e28dd014	 add         sp, sp, #0x14
  016ac	e89d6000	 ldmia       sp, {sp, lr}
  016b0	e12fff1e	 bx          lr
  016b4		 |$M46786|

			 ENDP  ; |NAND_ConfigurePrefetch|

	EXPORT	|__$ArrayPad$| [ DATA ]
	EXPORT	|FMD_WriteSector|

  00088			 AREA	 |.pdata|, PDATA
|$T46800| DCD	|$LN19@FMD_WriteS|
	DCD	0xc0010904

  00004			 AREA	 |.xdata|, DATA
|$T46796| DCD	0xffffffc0
; Function compile flags: /Odtp

  016b4			 AREA	 |.text|, CODE, ARM

  016b4	00000000	 DCD         |__GSHandlerCheck|
  016b8	00000000	 DCD         |$T46796|

  016bc		 |FMD_WriteSector| PROC

; 1236 : {

  016bc		 |$LN19@FMD_WriteS|
  016bc	e1a0c00d	 mov         r12, sp
  016c0	e92d000f	 stmdb       sp!, {r0 - r3}
  016c4	e92d5000	 stmdb       sp!, {r12, lr}
  016c8	e24dd080	 sub         sp, sp, #0x80
  016cc		 |$M46797|
  016cc	e59f3408	 ldr         r3, [pc, #0x408]
  016d0	e5933000	 ldr         r3, [r3]
  016d4	e58d3058	 str         r3, [sp, #0x58]

; 1237 :     BOOL rc = FALSE;

  016d8	e3a03000	 mov         r3, #0
  016dc	e58d300c	 str         r3, [sp, #0xC]

; 1238 :     NAND_SPARE_AREA sa;
; 1239 :     UINT32 oldIdleMode;
; 1240 :     UINT32 sectorSize;
; 1241 :     SECTOR_ADDR startSector = sector;

  016e0	e59d3088	 ldr         r3, [sp, #0x88]
  016e4	e58d3004	 str         r3, [sp, #4]

; 1242 :     SECTOR_ADDR endSector = sector + sectors;

  016e8	e59d2088	 ldr         r2, [sp, #0x88]
  016ec	e59d3094	 ldr         r3, [sp, #0x94]
  016f0	e0823003	 add         r3, r2, r3
  016f4	e58d3050	 str         r3, [sp, #0x50]

; 1243 :     NandDevice_t *pDevice = (NandDevice_t*)s_hNand;

  016f8	e59f33d8	 ldr         r3, [pc, #0x3D8]
  016fc	e5933000	 ldr         r3, [r3]
  01700	e58d3000	 str         r3, [sp]

; 1244 : 
; 1245 :     // Fail if FMD wasn't opened
; 1246 :     if (s_hNand == NULL) goto cleanUp;

  01704	e59f33cc	 ldr         r3, [pc, #0x3CC]
  01708	e5933000	 ldr         r3, [r3]
  0170c	e3530000	 cmp         r3, #0
  01710	1a000000	 bne         |$LN10@FMD_WriteS|
  01714	ea0000ce	 b           |$cleanUp$46462|
  01718		 |$LN10@FMD_WriteS|

; 1247 :     
; 1248 :     // Obtain hardware lock
; 1249 :     NAND_MutexEnter(s_hNand);

  01718	e59f33b8	 ldr         r3, [pc, #0x3B8]
  0171c	e5930000	 ldr         r0, [r3]
  01720	eb000000	 bl          NAND_MutexEnter

; 1250 : 
; 1251 :     //  Change idle mode to no-idle to ensure access to GPMC registers
; 1252 :     sectorSize = NAND_GetGeometry(s_hNand)->sectorSize;

  01724	e59f33ac	 ldr         r3, [pc, #0x3AC]
  01728	e5930000	 ldr         r0, [r3]
  0172c	eb000000	 bl          NAND_GetGeometry
  01730	e58d0060	 str         r0, [sp, #0x60]
  01734	e59d3060	 ldr         r3, [sp, #0x60]
  01738	e283300c	 add         r3, r3, #0xC
  0173c	e5933000	 ldr         r3, [r3]
  01740	e58d3008	 str         r3, [sp, #8]

; 1253 :     oldIdleMode = INREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG));

  01744	e59f338c	 ldr         r3, [pc, #0x38C]
  01748	e5930000	 ldr         r0, [r3]
  0174c	eb000000	 bl          NAND_GetGpmcRegs
  01750	e58d0064	 str         r0, [sp, #0x64]
  01754	e59d3064	 ldr         r3, [sp, #0x64]
  01758	e2833010	 add         r3, r3, #0x10
  0175c	e5933000	 ldr         r3, [r3]
  01760	e58d3054	 str         r3, [sp, #0x54]

; 1254 :     OUTREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG), SYSCONFIG_NOIDLE);

  01764	e59f336c	 ldr         r3, [pc, #0x36C]
  01768	e5930000	 ldr         r0, [r3]
  0176c	eb000000	 bl          NAND_GetGpmcRegs
  01770	e58d0068	 str         r0, [sp, #0x68]
  01774	e59d3068	 ldr         r3, [sp, #0x68]
  01778	e2832010	 add         r2, r3, #0x10
  0177c	e3a03008	 mov         r3, #8
  01780	e5823000	 str         r3, [r2]

; 1255 : 
; 1256 :     //  Only enable during NAND read/write/erase operations    
; 1257 :     NAND_Enable(s_hNand, TRUE);

  01784	e3a01001	 mov         r1, #1
  01788	e59f3348	 ldr         r3, [pc, #0x348]
  0178c	e5930000	 ldr         r0, [r3]
  01790	eb000000	 bl          NAND_Enable

; 1258 :     NAND_LockBlocks(s_hNand, startSector, endSector, FALSE);

  01794	e3a03000	 mov         r3, #0
  01798	e59d2050	 ldr         r2, [sp, #0x50]
  0179c	e59d1004	 ldr         r1, [sp, #4]
  017a0	e59f0330	 ldr         r0, [pc, #0x330]
  017a4	e5900000	 ldr         r0, [r0]
  017a8	eb000000	 bl          NAND_LockBlocks
  017ac		 |$LN9@FMD_WriteS|

; 1259 :     
; 1260 :     while (sectors > 0)

  017ac	e59d3094	 ldr         r3, [sp, #0x94]
  017b0	e3530000	 cmp         r3, #0
  017b4	9a00008a	 bls         |$LN8@FMD_WriteS|

; 1261 :         {
; 1262 :         // Clear out spare area struct
; 1263 :         memset(&sa, 0xFF, sizeof(NAND_SPARE_AREA));

  017b8	e3a02040	 mov         r2, #0x40
  017bc	e3a010ff	 mov         r1, #0xFF
  017c0	e28d0010	 add         r0, sp, #0x10
  017c4	eb000000	 bl          memset

; 1264 : 
; 1265 :         // When there is buffer write data
; 1266 :         if (pBuffer != NULL)

  017c8	e59d308c	 ldr         r3, [sp, #0x8C]
  017cc	e3530000	 cmp         r3, #0
  017d0	0a000013	 beq         |$LN7@FMD_WriteS|

; 1267 :             {
; 1268 :             // enable prefetch
; 1269 :             NAND_ConfigurePrefetch(s_hNand, NAND_DATA_WRITE);

  017d4	e3a01002	 mov         r1, #2
  017d8	e59f32f8	 ldr         r3, [pc, #0x2F8]
  017dc	e5930000	 ldr         r0, [r3]
  017e0	eb000000	 bl          NAND_ConfigurePrefetch

; 1270 : 
; 1271 :             // send the write command
; 1272 :             NAND_SendCommand(s_hNand, NAND_CMD_WRITE1);

  017e4	e3a01080	 mov         r1, #0x80
  017e8	e59f32e8	 ldr         r3, [pc, #0x2E8]
  017ec	e5930000	 ldr         r0, [r3]
  017f0	eb000000	 bl          NAND_SendCommand

; 1273 : 
; 1274 :             // send the address to write to
; 1275 :             NAND_Seek(s_hNand, sector, 0);

  017f4	e3a02000	 mov         r2, #0
  017f8	e59d1088	 ldr         r1, [sp, #0x88]
  017fc	e59f32d4	 ldr         r3, [pc, #0x2D4]
  01800	e5930000	 ldr         r0, [r3]
  01804	eb000000	 bl          NAND_Seek

; 1276 : 
; 1277 :             // send data to flash
; 1278 :             NAND_Write(s_hNand, pBuffer, sectorSize, sa.ecc);

  01808	e28d3012	 add         r3, sp, #0x12
  0180c	e59d2008	 ldr         r2, [sp, #8]
  01810	e59d108c	 ldr         r1, [sp, #0x8C]
  01814	e59f02bc	 ldr         r0, [pc, #0x2BC]
  01818	e5900000	 ldr         r0, [r0]
  0181c	eb000000	 bl          NAND_Write

; 1279 : 
; 1280 :             }
; 1281 :         else

  01820	ea000028	 b           |$LN6@FMD_WriteS|
  01824		 |$LN7@FMD_WriteS|

; 1282 :             {
; 1283 :             // Send the command
; 1284 :             NAND_SendCommand(s_hNand, NAND_CMD_READ1);

  01824	e3a01000	 mov         r1, #0
  01828	e59f32a8	 ldr         r3, [pc, #0x2A8]
  0182c	e5930000	 ldr         r0, [r3]
  01830	eb000000	 bl          NAND_SendCommand

; 1285 : 
; 1286 :             // Send the address
; 1287 :             NAND_Seek(s_hNand, sector, NAND_GetGeometry(s_hNand)->sectorSize);

  01834	e59f329c	 ldr         r3, [pc, #0x29C]
  01838	e5930000	 ldr         r0, [r3]
  0183c	eb000000	 bl          NAND_GetGeometry
  01840	e58d006c	 str         r0, [sp, #0x6C]
  01844	e59d306c	 ldr         r3, [sp, #0x6C]
  01848	e283300c	 add         r3, r3, #0xC
  0184c	e5932000	 ldr         r2, [r3]
  01850	e59d1088	 ldr         r1, [sp, #0x88]
  01854	e59f327c	 ldr         r3, [pc, #0x27C]
  01858	e5930000	 ldr         r0, [r3]
  0185c	eb000000	 bl          NAND_Seek

; 1288 : 
; 1289 :             // Send the command
; 1290 :             NAND_SendCommand(s_hNand, NAND_CMD_READ2);

  01860	e3a01030	 mov         r1, #0x30
  01864	e59f326c	 ldr         r3, [pc, #0x26C]
  01868	e5930000	 ldr         r0, [r3]
  0186c	eb000000	 bl          NAND_SendCommand

; 1291 : 
; 1292 :             // Wait for the action to finish
; 1293 :             WaitForReadyStatus(s_hNand);

  01870	e59f3260	 ldr         r3, [pc, #0x260]
  01874	e5930000	 ldr         r0, [r3]
  01878	eb000000	 bl          WaitForReadyStatus

; 1294 : 
; 1295 :             //Force a read here, else we will read the status again
; 1296 :             NAND_SendCommand (s_hNand, NAND_CMD_READ1);

  0187c	e3a01000	 mov         r1, #0
  01880	e59f3250	 ldr         r3, [pc, #0x250]
  01884	e5930000	 ldr         r0, [r3]
  01888	eb000000	 bl          NAND_SendCommand

; 1297 : 
; 1298 :             // read spare area
; 1299 :             NAND_Read(s_hNand, (BYTE*)&sa, sizeof(sa), NULL);

  0188c	e3a03000	 mov         r3, #0
  01890	e3a02040	 mov         r2, #0x40
  01894	e28d1010	 add         r1, sp, #0x10
  01898	e59f0238	 ldr         r0, [pc, #0x238]
  0189c	e5900000	 ldr         r0, [r0]
  018a0	eb000000	 bl          NAND_Read

; 1300 : 
; 1301 : 
; 1302 :             // send the write command
; 1303 :             NAND_SendCommand(s_hNand, NAND_CMD_WRITE1);

  018a4	e3a01080	 mov         r1, #0x80
  018a8	e59f3228	 ldr         r3, [pc, #0x228]
  018ac	e5930000	 ldr         r0, [r3]
  018b0	eb000000	 bl          NAND_SendCommand

; 1304 : 
; 1305 :             // send the address to write to
; 1306 :             NAND_Seek(s_hNand, sector, sectorSize);

  018b4	e59d2008	 ldr         r2, [sp, #8]
  018b8	e59d1088	 ldr         r1, [sp, #0x88]
  018bc	e59f3214	 ldr         r3, [pc, #0x214]
  018c0	e5930000	 ldr         r0, [r3]
  018c4	eb000000	 bl          NAND_Seek
  018c8		 |$LN6@FMD_WriteS|

; 1307 : 			
; 1308 :             }
; 1309 : 		
; 1310 :         /* used for test purpose */ 
; 1311 :         if((pSectorInfo != NULL) && (pSectorInfo->bOEMReserved == SKIP_ECC_WRITE_MAGIC_NUMBER) )

  018c8	e59d3090	 ldr         r3, [sp, #0x90]
  018cc	e3530000	 cmp         r3, #0
  018d0	0a000009	 beq         |$LN5@FMD_WriteS|
  018d4	e59d3090	 ldr         r3, [sp, #0x90]
  018d8	e2833004	 add         r3, r3, #4
  018dc	e5d33000	 ldrb        r3, [r3]
  018e0	e353000f	 cmp         r3, #0xF
  018e4	1a000004	 bne         |$LN5@FMD_WriteS|

; 1312 :         {
; 1313 :             /* skip updating ECC */
; 1314 :             ECC_Reset(pDevice->pGpmcRegs);			

  018e8	e59d3000	 ldr         r3, [sp]
  018ec	e283302c	 add         r3, r3, #0x2C
  018f0	e5930000	 ldr         r0, [r3]
  018f4	eb000000	 bl          ECC_Reset

; 1315 : 	     goto  skip_ecc; 	

  018f8	ea000019	 b           |$skip_ecc$46477|
  018fc		 |$LN5@FMD_WriteS|

; 1316 :         }
; 1317 : 
; 1318 :         if (pSectorInfo != NULL)

  018fc	e59d3090	 ldr         r3, [sp, #0x90]
  01900	e3530000	 cmp         r3, #0
  01904	0a000010	 beq         |$LN4@FMD_WriteS|

; 1319 :             {
; 1320 :             // Fill in rest of spare area info (we already have ECC from above)
; 1321 :             sa.swBadBlock     = pSectorInfo->bBadBlock;

  01908	e59d3090	 ldr         r3, [sp, #0x90]
  0190c	e2833005	 add         r3, r3, #5
  01910	e5d33000	 ldrb        r3, [r3]
  01914	e5cd304c	 strb        r3, [sp, #0x4C]

; 1322 :             sa.oemReserved  = pSectorInfo->bOEMReserved;

  01918	e59d3090	 ldr         r3, [sp, #0x90]
  0191c	e2833004	 add         r3, r3, #4
  01920	e5d33000	 ldrb        r3, [r3]
  01924	e5cd304d	 strb        r3, [sp, #0x4D]

; 1323 :             memcpy(sa.reserved1, &pSectorInfo->dwReserved1, sizeof(sa.reserved1));

  01928	e3a02004	 mov         r2, #4
  0192c	e59d1090	 ldr         r1, [sp, #0x90]
  01930	e28d0046	 add         r0, sp, #0x46
  01934	eb000000	 bl          memcpy

; 1324 :             memcpy(sa.reserved2, &pSectorInfo->wReserved2, sizeof(sa.reserved2));

  01938	e3a02002	 mov         r2, #2
  0193c	e59d3090	 ldr         r3, [sp, #0x90]
  01940	e2831006	 add         r1, r3, #6
  01944	e28d004a	 add         r0, sp, #0x4A
  01948	eb000000	 bl          memcpy
  0194c		 |$LN4@FMD_WriteS|

; 1325 :             }
; 1326 : 
; 1327 :         // write new spare info
; 1328 :         NAND_Write(s_hNand, (BYTE*)&sa, sizeof(sa), NULL);

  0194c	e3a03000	 mov         r3, #0
  01950	e3a02040	 mov         r2, #0x40
  01954	e28d1010	 add         r1, sp, #0x10
  01958	e59f0178	 ldr         r0, [pc, #0x178]
  0195c	e5900000	 ldr         r0, [r0]
  01960	eb000000	 bl          NAND_Write
  01964		 |$skip_ecc$46477|

; 1329 : 
; 1330 : skip_ecc:
; 1331 :         // initiate the data programming process :
; 1332 :         NAND_SendCommand(s_hNand, NAND_CMD_WRITE2);

  01964	e3a01010	 mov         r1, #0x10
  01968	e59f3168	 ldr         r3, [pc, #0x168]
  0196c	e5930000	 ldr         r0, [r3]
  01970	eb000000	 bl          NAND_SendCommand

; 1333 : 
; 1334 :         // wait until completion of the operation :
; 1335 :         WaitForReadyStatus(s_hNand);

  01974	e59f315c	 ldr         r3, [pc, #0x15C]
  01978	e5930000	 ldr         r0, [r3]
  0197c	eb000000	 bl          WaitForReadyStatus

; 1336 : 
; 1337 :         if ((NAND_GetStatus(s_hNand) & NAND_STATUS_ERROR) != 0)

  01980	e59f3150	 ldr         r3, [pc, #0x150]
  01984	e5930000	 ldr         r0, [r3]
  01988	eb000000	 bl          NAND_GetStatus
  0198c	e1cd07b0	 strh        r0, [sp, #0x70]
  01990	e1dd37b0	 ldrh        r3, [sp, #0x70]
  01994	e3130001	 tst         r3, #1
  01998	0a000000	 beq         |$LN3@FMD_WriteS|

; 1338 :             {
; 1339 :             break;

  0199c	ea000010	 b           |$LN8@FMD_WriteS|
  019a0		 |$LN3@FMD_WriteS|

; 1340 :             }
; 1341 :         // Move to next sector
; 1342 :         sector++;

  019a0	e59d3088	 ldr         r3, [sp, #0x88]
  019a4	e2833001	 add         r3, r3, #1
  019a8	e58d3088	 str         r3, [sp, #0x88]

; 1343 :         if (pBuffer != NULL) pBuffer += sectorSize;

  019ac	e59d308c	 ldr         r3, [sp, #0x8C]
  019b0	e3530000	 cmp         r3, #0
  019b4	0a000003	 beq         |$LN2@FMD_WriteS|
  019b8	e59d208c	 ldr         r2, [sp, #0x8C]
  019bc	e59d3008	 ldr         r3, [sp, #8]
  019c0	e0823003	 add         r3, r2, r3
  019c4	e58d308c	 str         r3, [sp, #0x8C]
  019c8		 |$LN2@FMD_WriteS|

; 1344 :         pSectorInfo++;

  019c8	e59d3090	 ldr         r3, [sp, #0x90]
  019cc	e2833008	 add         r3, r3, #8
  019d0	e58d3090	 str         r3, [sp, #0x90]

; 1345 :         sectors--;

  019d4	e59d3094	 ldr         r3, [sp, #0x94]
  019d8	e2433001	 sub         r3, r3, #1
  019dc	e58d3094	 str         r3, [sp, #0x94]

; 1346 :         }

  019e0	eaffff71	 b           |$LN9@FMD_WriteS|
  019e4		 |$LN8@FMD_WriteS|

; 1347 : 
; 1348 :     //  Only enable during NAND read/write/erase operations    
; 1349 :     NAND_LockBlocks(s_hNand, startSector, endSector, TRUE);

  019e4	e3a03001	 mov         r3, #1
  019e8	e59d2050	 ldr         r2, [sp, #0x50]
  019ec	e59d1004	 ldr         r1, [sp, #4]
  019f0	e59f00e0	 ldr         r0, [pc, #0xE0]
  019f4	e5900000	 ldr         r0, [r0]
  019f8	eb000000	 bl          NAND_LockBlocks

; 1350 :     NAND_Enable(s_hNand, FALSE);

  019fc	e3a01000	 mov         r1, #0
  01a00	e59f30d0	 ldr         r3, [pc, #0xD0]
  01a04	e5930000	 ldr         r0, [r3]
  01a08	eb000000	 bl          NAND_Enable

; 1351 : 
; 1352 :     //  Change idle mode back
; 1353 :     OUTREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG), oldIdleMode);

  01a0c	e59f30c4	 ldr         r3, [pc, #0xC4]
  01a10	e5930000	 ldr         r0, [r3]
  01a14	eb000000	 bl          NAND_GetGpmcRegs
  01a18	e58d0074	 str         r0, [sp, #0x74]
  01a1c	e59d3074	 ldr         r3, [sp, #0x74]
  01a20	e2832010	 add         r2, r3, #0x10
  01a24	e59d3054	 ldr         r3, [sp, #0x54]
  01a28	e5823000	 str         r3, [r2]

; 1354 : 
; 1355 :     // All is ok, when we read all sectors
; 1356 :     rc = (sectors == 0);

  01a2c	e59d3094	 ldr         r3, [sp, #0x94]
  01a30	e3530000	 cmp         r3, #0
  01a34	1a000002	 bne         |$LN13@FMD_WriteS|
  01a38	e3a03001	 mov         r3, #1
  01a3c	e58d3078	 str         r3, [sp, #0x78]
  01a40	ea000001	 b           |$LN14@FMD_WriteS|
  01a44		 |$LN13@FMD_WriteS|
  01a44	e3a03000	 mov         r3, #0
  01a48	e58d3078	 str         r3, [sp, #0x78]
  01a4c		 |$LN14@FMD_WriteS|
  01a4c	e59d3078	 ldr         r3, [sp, #0x78]
  01a50	e58d300c	 str         r3, [sp, #0xC]
  01a54		 |$cleanUp$46462|

; 1357 : 
; 1358 : cleanUp:
; 1359 :     // Release hardware lock
; 1360 :     if (s_hNand != NULL) NAND_MutexExit(s_hNand);

  01a54	e59f307c	 ldr         r3, [pc, #0x7C]
  01a58	e5933000	 ldr         r3, [r3]
  01a5c	e3530000	 cmp         r3, #0
  01a60	0a000002	 beq         |$LN1@FMD_WriteS|
  01a64	e59f306c	 ldr         r3, [pc, #0x6C]
  01a68	e5930000	 ldr         r0, [r3]
  01a6c	eb000000	 bl          NAND_MutexExit
  01a70		 |$LN1@FMD_WriteS|

; 1361 :     
; 1362 :     ASSERT(rc);

  01a70	e59d300c	 ldr         r3, [sp, #0xC]
  01a74	e3530000	 cmp         r3, #0
  01a78	0a000002	 beq         |$LN15@FMD_WriteS|
  01a7c	e3a03001	 mov         r3, #1
  01a80	e58d307c	 str         r3, [sp, #0x7C]
  01a84	ea000008	 b           |$LN16@FMD_WriteS|
  01a88		 |$LN15@FMD_WriteS|
  01a88	e3a03c05	 mov         r3, #5, 24
  01a8c	e3833052	 orr         r3, r3, #0x52
  01a90	e59f203c	 ldr         r2, [pc, #0x3C]
  01a94	e59f1034	 ldr         r1, [pc, #0x34]
  01a98	e59f002c	 ldr         r0, [pc, #0x2C]
  01a9c	eb000000	 bl          NKDbgPrintfW
  01aa0	e6000010	 __debugbreak_ce
  01aa4	e3a03000	 mov         r3, #0
  01aa8	e58d307c	 str         r3, [sp, #0x7C]
  01aac		 |$LN16@FMD_WriteS|

; 1363 :     return rc;

  01aac	e59d0058	 ldr         r0, [sp, #0x58]
  01ab0	eb000000	 bl          __security_check_cookie
  01ab4	e59d300c	 ldr         r3, [sp, #0xC]
  01ab8	e58d305c	 str         r3, [sp, #0x5C]

; 1364 : }

  01abc	e59d005c	 ldr         r0, [sp, #0x5C]
  01ac0	e28dd080	 add         sp, sp, #0x80
  01ac4	e89d6000	 ldmia       sp, {sp, lr}
  01ac8	e12fff1e	 bx          lr
  01acc		 |$LN20@FMD_WriteS|
  01acc		 |$LN21@FMD_WriteS|
  01acc	00000000	 DCD         |??_C@_1FK@FNONLNGN@?$AA?$CF?$AAs?$AA?3?$AA?5?$AAD?$AAE?$AAB?$AAU?$AAG?$AAC?$AAH?$AAK?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAi?$AAn?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CF?$AAs?$AA?5?$AAa@|
  01ad0		 |$LN22@FMD_WriteS|
  01ad0	00000000	 DCD         |??_C@_1BA@LEPJIIOK@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?$AA@|
  01ad4		 |$LN23@FMD_WriteS|
  01ad4	00000000	 DCD         |??_C@_1KM@BKLPJHHD@?$AAC?$AA?3?$AA?2?$AAW?$AAI?$AAN?$AAC?$AAE?$AA6?$AA0?$AA0?$AA?2?$AAP?$AAL?$AAA?$AAT?$AAF?$AAO?$AAR?$AAM?$AA?2?$AAC?$AAO?$AAM?$AAM?$AAO?$AAN?$AA?2?$AAS?$AAR?$AAC?$AA?2@|
  01ad8		 |$LN24@FMD_WriteS|
  01ad8	00000000	 DCD         |s_hNand|
  01adc		 |$LN25@FMD_WriteS|
  01adc	00000000	 DCD         |__security_cookie|
  01ae0		 |$M46798|

			 ENDP  ; |FMD_WriteSector|


  00090			 AREA	 |.pdata|, PDATA
|$T46812| DCD	|$LN8@NAND_LockB|
	DCD	0x40002f04
; Function compile flags: /Odtp

  01ae0			 AREA	 |.text|, CODE, ARM

  01ae0		 |NAND_LockBlocks| PROC

; 336  : {

  01ae0		 |$LN8@NAND_LockB|
  01ae0	e1a0c00d	 mov         r12, sp
  01ae4	e92d000f	 stmdb       sp!, {r0 - r3}
  01ae8	e92d5000	 stmdb       sp!, {r12, lr}
  01aec	e24dd00c	 sub         sp, sp, #0xC
  01af0		 |$M46809|

; 337  :     BOOL rc = FALSE; 

  01af0	e3a03000	 mov         r3, #0
  01af4	e58d3004	 str         r3, [sp, #4]

; 338  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  01af8	e59d3014	 ldr         r3, [sp, #0x14]
  01afc	e58d3000	 str         r3, [sp]

; 339  : 
; 340  :     UNREFERENCED_PARAMETER(blockEnd);
; 341  :     UNREFERENCED_PARAMETER(blockStart);
; 342  : 
; 343  :     if (pDevice == NULL) goto cleanUp;

  01b00	e59d3000	 ldr         r3, [sp]
  01b04	e3530000	 cmp         r3, #0
  01b08	1a000000	 bne         |$LN3@NAND_LockB|
  01b0c	ea00001c	 b           |$cleanUp$46047|
  01b10		 |$LN3@NAND_LockB|

; 344  : 
; 345  :     if (bLock)

  01b10	e59d3020	 ldr         r3, [sp, #0x20]
  01b14	e3530000	 cmp         r3, #0
  01b18	0a00000c	 beq         |$LN2@NAND_LockB|

; 346  :         {
; 347  :         CLRREG32(&pDevice->pGpmcRegs->GPMC_CONFIG, GPMC_CONFIG_WRITEPROTECT);        

  01b1c	e59d3000	 ldr         r3, [sp]
  01b20	e283302c	 add         r3, r3, #0x2C
  01b24	e5933000	 ldr         r3, [r3]
  01b28	e2833050	 add         r3, r3, #0x50
  01b2c	e5932000	 ldr         r2, [r3]
  01b30	e3e03010	 mvn         r3, #0x10
  01b34	e0022003	 and         r2, r2, r3
  01b38	e59d3000	 ldr         r3, [sp]
  01b3c	e283302c	 add         r3, r3, #0x2C
  01b40	e5933000	 ldr         r3, [r3]
  01b44	e2833050	 add         r3, r3, #0x50
  01b48	e5832000	 str         r2, [r3]

; 348  :         }
; 349  :     else

  01b4c	ea00000a	 b           |$LN1@NAND_LockB|
  01b50		 |$LN2@NAND_LockB|

; 350  :         {
; 351  :         SETREG32(&pDevice->pGpmcRegs->GPMC_CONFIG, GPMC_CONFIG_WRITEPROTECT);

  01b50	e59d3000	 ldr         r3, [sp]
  01b54	e283302c	 add         r3, r3, #0x2C
  01b58	e5933000	 ldr         r3, [r3]
  01b5c	e2833050	 add         r3, r3, #0x50
  01b60	e5933000	 ldr         r3, [r3]
  01b64	e3832010	 orr         r2, r3, #0x10
  01b68	e59d3000	 ldr         r3, [sp]
  01b6c	e283302c	 add         r3, r3, #0x2C
  01b70	e5933000	 ldr         r3, [r3]
  01b74	e2833050	 add         r3, r3, #0x50
  01b78	e5832000	 str         r2, [r3]
  01b7c		 |$LN1@NAND_LockB|

; 352  :         }
; 353  :     rc = TRUE;

  01b7c	e3a03001	 mov         r3, #1
  01b80	e58d3004	 str         r3, [sp, #4]
  01b84		 |$cleanUp$46047|

; 354  : 
; 355  : cleanUp:
; 356  :     return rc;

  01b84	e59d3004	 ldr         r3, [sp, #4]
  01b88	e58d3008	 str         r3, [sp, #8]

; 357  : }

  01b8c	e59d0008	 ldr         r0, [sp, #8]
  01b90	e28dd00c	 add         sp, sp, #0xC
  01b94	e89d6000	 ldmia       sp, {sp, lr}
  01b98	e12fff1e	 bx          lr
  01b9c		 |$M46810|

			 ENDP  ; |NAND_LockBlocks|

	EXPORT	|WaitOnEmptyWriteBufferStatus|

  00098			 AREA	 |.pdata|, PDATA
|$T46818| DCD	|$LN17@NAND_Write|
	DCD	0x40007d04
; Function compile flags: /Odtp

  01b9c			 AREA	 |.text|, CODE, ARM

  01b9c		 |NAND_Write| PROC

; 635  : {

  01b9c		 |$LN17@NAND_Write|
  01b9c	e1a0c00d	 mov         r12, sp
  01ba0	e92d000f	 stmdb       sp!, {r0 - r3}
  01ba4	e92d5000	 stmdb       sp!, {r12, lr}
  01ba8	e24dd010	 sub         sp, sp, #0x10
  01bac		 |$M46815|

; 636  :     UINT32 fifoLevel;
; 637  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  01bac	e59d3018	 ldr         r3, [sp, #0x18]
  01bb0	e58d3000	 str         r3, [sp]

; 638  : 
; 639  :     // Start ECC if a valid ECC buffer is passed in
; 640  :     if (pEcc != NULL)

  01bb4	e59d3024	 ldr         r3, [sp, #0x24]
  01bb8	e3530000	 cmp         r3, #0
  01bbc	0a00000a	 beq         |$LN12@NAND_Write|

; 641  :         {
; 642  :         ECC_Init(pDevice->pGpmcRegs, pDevice->ECCCfg, pDevice->ECCtype, NAND_ECC_WRITE);

  01bc0	e3a03001	 mov         r3, #1
  01bc4	e59d2000	 ldr         r2, [sp]
  01bc8	e2822060	 add         r2, r2, #0x60
  01bcc	e5922000	 ldr         r2, [r2]
  01bd0	e59d1000	 ldr         r1, [sp]
  01bd4	e2811058	 add         r1, r1, #0x58
  01bd8	e5911000	 ldr         r1, [r1]
  01bdc	e59d0000	 ldr         r0, [sp]
  01be0	e280002c	 add         r0, r0, #0x2C
  01be4	e5900000	 ldr         r0, [r0]
  01be8	eb000000	 bl          ECC_Init
  01bec		 |$LN12@NAND_Write|

; 643  :         }
; 644  : 
; 645  :     // enable prefetch if it's been properly configured
; 646  :     if (pDevice->prefetchMode == kPrefetchWrite )

  01bec	e59d3000	 ldr         r3, [sp]
  01bf0	e2833018	 add         r3, r3, #0x18
  01bf4	e5933000	 ldr         r3, [r3]
  01bf8	e3530002	 cmp         r3, #2
  01bfc	1a000031	 bne         |$LN11@NAND_Write|

; 647  :         {
; 648  :         SETREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_CONTROL, 
; 649  :             GPMC_PREFETCH_CONTROL_STARTENGINE
; 650  :             );

  01c00	e59d3000	 ldr         r3, [sp]
  01c04	e283302c	 add         r3, r3, #0x2C
  01c08	e5933000	 ldr         r3, [r3]
  01c0c	e2833f7b	 add         r3, r3, #0x7B, 30
  01c10	e5933000	 ldr         r3, [r3]
  01c14	e3832001	 orr         r2, r3, #1
  01c18	e59d3000	 ldr         r3, [sp]
  01c1c	e283302c	 add         r3, r3, #0x2C
  01c20	e5933000	 ldr         r3, [r3]
  01c24	e2833f7b	 add         r3, r3, #0x7B, 30
  01c28	e5832000	 str         r2, [r3]
  01c2c		 |$LN10@NAND_Write|

; 651  :         // start copying data into passed in buffer
; 652  :         while (size > 0)

  01c2c	e59d3020	 ldr         r3, [sp, #0x20]
  01c30	e3530000	 cmp         r3, #0
  01c34	da00001e	 ble         |$LN9@NAND_Write|

; 653  :             {
; 654  :             // copy data to buffer
; 655  :             memcpy((BYTE*)pDevice->pFifo, pData, FIFO_THRESHOLD);

  01c38	e3a02040	 mov         r2, #0x40
  01c3c	e59d101c	 ldr         r1, [sp, #0x1C]
  01c40	e59d3000	 ldr         r3, [sp]
  01c44	e2833028	 add         r3, r3, #0x28
  01c48	e5930000	 ldr         r0, [r3]
  01c4c	eb000000	 bl          memcpy

; 656  :             pData += FIFO_THRESHOLD;

  01c50	e59d301c	 ldr         r3, [sp, #0x1C]
  01c54	e2833040	 add         r3, r3, #0x40
  01c58	e58d301c	 str         r3, [sp, #0x1C]

; 657  :             size -= FIFO_THRESHOLD;  

  01c5c	e59d3020	 ldr         r3, [sp, #0x20]
  01c60	e2433040	 sub         r3, r3, #0x40
  01c64	e58d3020	 str         r3, [sp, #0x20]

; 658  :             
; 659  :             // wait for fifo threshold to be reached
; 660  :             fifoLevel = 0;

  01c68	e3a03000	 mov         r3, #0
  01c6c	e58d3004	 str         r3, [sp, #4]
  01c70		 |$LN8@NAND_Write|

; 661  :             while (fifoLevel < FIFO_THRESHOLD)

  01c70	e59d3004	 ldr         r3, [sp, #4]
  01c74	e3530040	 cmp         r3, #0x40
  01c78	2a00000c	 bcs         |$LN7@NAND_Write|

; 662  :                 {
; 663  :                 fifoLevel = INREG32(&pDevice->pGpmcRegs->GPMC_PREFETCH_STATUS);

  01c7c	e59d3000	 ldr         r3, [sp]
  01c80	e283302c	 add         r3, r3, #0x2C
  01c84	e5933000	 ldr         r3, [r3]
  01c88	e2833e1f	 add         r3, r3, #0x1F, 28
  01c8c	e5933000	 ldr         r3, [r3]
  01c90	e58d3004	 str         r3, [sp, #4]

; 664  :                 fifoLevel &= GPMC_PREFETCH_STATUS_FIFOMASK;

  01c94	e59d3004	 ldr         r3, [sp, #4]
  01c98	e203347f	 and         r3, r3, #0x7F, 8
  01c9c	e58d3004	 str         r3, [sp, #4]

; 665  :                 fifoLevel >>= GPMC_PREFETCH_STATUS_FIFOSHIFT;

  01ca0	e59d3004	 ldr         r3, [sp, #4]
  01ca4	e1a03c23	 mov         r3, r3, lsr #24
  01ca8	e58d3004	 str         r3, [sp, #4]

; 666  :                 }

  01cac	eaffffef	 b           |$LN8@NAND_Write|
  01cb0		 |$LN7@NAND_Write|

; 667  :             }

  01cb0	eaffffdd	 b           |$LN10@NAND_Write|
  01cb4		 |$LN9@NAND_Write|

; 668  : 
; 669  :         // NOTE:
; 670  :         //  Prefetch engine will automatically stop on the completion
; 671  :         // of data transfer
; 672  :         pDevice->prefetchMode = kPrefetchOff;

  01cb4	e59d3000	 ldr         r3, [sp]
  01cb8	e2832018	 add         r2, r3, #0x18
  01cbc	e3a03000	 mov         r3, #0
  01cc0	e5823000	 str         r3, [r2]

; 673  :         }
; 674  :     else

  01cc4	ea00001b	 b           |$LN6@NAND_Write|
  01cc8		 |$LN11@NAND_Write|

; 675  :         {
; 676  :         int writeCount = 0;

  01cc8	e3a03000	 mov         r3, #0
  01ccc	e58d3008	 str         r3, [sp, #8]
  01cd0		 |$LN5@NAND_Write|

; 677  : 		
; 678  :         while (size >= sizeof(NANDREG))

  01cd0	e59d3020	 ldr         r3, [sp, #0x20]
  01cd4	e3530002	 cmp         r3, #2
  01cd8	3a000016	 bcc         |$LN4@NAND_Write|

; 679  :             {
; 680  :             WRITE_NAND(pDevice->pNandData, *(NANDREG*)pData);

  01cdc	e59d301c	 ldr         r3, [sp, #0x1C]
  01ce0	e1d320b0	 ldrh        r2, [r3]
  01ce4	e59d3000	 ldr         r3, [sp]
  01ce8	e2833024	 add         r3, r3, #0x24
  01cec	e5933000	 ldr         r3, [r3]
  01cf0	e1c320b0	 strh        r2, [r3]

; 681  : 
; 682  :             // Workaround Errata 1.53
; 683  :             // need to check on EMPTYWRITEBUFFERSTATUS on every
; 684  :             // 255 bytes
; 685  :             if (++writeCount >= 255)

  01cf4	e59d3008	 ldr         r3, [sp, #8]
  01cf8	e2833001	 add         r3, r3, #1
  01cfc	e58d3008	 str         r3, [sp, #8]
  01d00	e59d3008	 ldr         r3, [sp, #8]
  01d04	e35300ff	 cmp         r3, #0xFF
  01d08	ba000003	 blt         |$LN3@NAND_Write|

; 686  :                 {
; 687  :                 WaitOnEmptyWriteBufferStatus(pDevice);

  01d0c	e59d0000	 ldr         r0, [sp]
  01d10	eb000000	 bl          WaitOnEmptyWriteBufferStatus

; 688  :                 writeCount = 0;

  01d14	e3a03000	 mov         r3, #0
  01d18	e58d3008	 str         r3, [sp, #8]
  01d1c		 |$LN3@NAND_Write|

; 689  :                 }
; 690  :             
; 691  :             pData += sizeof(NANDREG);

  01d1c	e59d301c	 ldr         r3, [sp, #0x1C]
  01d20	e2833002	 add         r3, r3, #2
  01d24	e58d301c	 str         r3, [sp, #0x1C]

; 692  :             size -= sizeof(NANDREG);

  01d28	e59d3020	 ldr         r3, [sp, #0x20]
  01d2c	e2433002	 sub         r3, r3, #2
  01d30	e58d3020	 str         r3, [sp, #0x20]

; 693  :             }

  01d34	eaffffe5	 b           |$LN5@NAND_Write|
  01d38		 |$LN4@NAND_Write|
  01d38		 |$LN6@NAND_Write|

; 694  : 		
; 695  :         }
; 696  : 
; 697  :     // get ECC result
; 698  :     if (pEcc != NULL)

  01d38	e59d3024	 ldr         r3, [sp, #0x24]
  01d3c	e3530000	 cmp         r3, #0
  01d40	0a000008	 beq         |$LN2@NAND_Write|

; 699  :         {
; 700  :         ECC_Result(pDevice->pGpmcRegs, pEcc, pDevice->ECCsize);

  01d44	e59d3000	 ldr         r3, [sp]
  01d48	e2833064	 add         r3, r3, #0x64
  01d4c	e5932000	 ldr         r2, [r3]
  01d50	e59d1024	 ldr         r1, [sp, #0x24]
  01d54	e59d3000	 ldr         r3, [sp]
  01d58	e283302c	 add         r3, r3, #0x2C
  01d5c	e5930000	 ldr         r0, [r3]
  01d60	eb000000	 bl          ECC_Result

; 701  :         }
; 702  :     else

  01d64	ea000003	 b           |$LN1@NAND_Write|
  01d68		 |$LN2@NAND_Write|

; 703  :     	{
; 704  : 	 ECC_Reset(pDevice->pGpmcRegs);

  01d68	e59d3000	 ldr         r3, [sp]
  01d6c	e283302c	 add         r3, r3, #0x2C
  01d70	e5930000	 ldr         r0, [r3]
  01d74	eb000000	 bl          ECC_Reset
  01d78		 |$LN1@NAND_Write|

; 705  :     	}
; 706  :     return TRUE;

  01d78	e3a03001	 mov         r3, #1
  01d7c	e58d300c	 str         r3, [sp, #0xC]

; 707  : }

  01d80	e59d000c	 ldr         r0, [sp, #0xC]
  01d84	e28dd010	 add         sp, sp, #0x10
  01d88	e89d6000	 ldmia       sp, {sp, lr}
  01d8c	e12fff1e	 bx          lr
  01d90		 |$M46816|

			 ENDP  ; |NAND_Write|


  00000			 AREA	 |.pdata|, PDATA
|$T46823| DCD	|$LN8@WaitOnEmpt|
	DCD	0x40001004
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |WaitOnEmptyWriteBufferStatus| PROC

; 249  : {

  00000		 |$LN8@WaitOnEmpt|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0001	 stmdb       sp!, {r0}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c	e24dd004	 sub         sp, sp, #4
  00010		 |$M46820|
  00010		 |$LN3@WaitOnEmpt|

; 250  :     UINT status;
; 251  :     do
; 252  :     {
; 253  :         status = INREG32(&pDevice->pGpmcRegs->GPMC_STATUS);

  00010	e59d300c	 ldr         r3, [sp, #0xC]
  00014	e283302c	 add         r3, r3, #0x2C
  00018	e5933000	 ldr         r3, [r3]
  0001c	e2833054	 add         r3, r3, #0x54
  00020	e5933000	 ldr         r3, [r3]
  00024	e58d3000	 str         r3, [sp]

; 254  :     } while ((status & GPMC_STATUS_EMPTYWRITEBUFFER) == 0);

  00028	e59d3000	 ldr         r3, [sp]
  0002c	e3130001	 tst         r3, #1
  00030	0afffff6	 beq         |$LN3@WaitOnEmpt|

; 255  : }

  00034	e28dd004	 add         sp, sp, #4
  00038	e89d6000	 ldmia       sp, {sp, lr}
  0003c	e12fff1e	 bx          lr
  00040		 |$M46821|

			 ENDP  ; |WaitOnEmptyWriteBufferStatus|

	EXPORT	|FMD_EraseBlock|

  000a0			 AREA	 |.pdata|, PDATA
|$T46831| DCD	|$LN8@FMD_EraseB|
	DCD	0x40005d04
; Function compile flags: /Odtp

  01d90			 AREA	 |.text|, CODE, ARM

  01d90		 |FMD_EraseBlock| PROC

; 1376 : {

  01d90		 |$LN8@FMD_EraseB|
  01d90	e1a0c00d	 mov         r12, sp
  01d94	e92d0001	 stmdb       sp!, {r0}
  01d98	e92d5000	 stmdb       sp!, {r12, lr}
  01d9c	e24dd01c	 sub         sp, sp, #0x1C
  01da0		 |$M46828|

; 1377 :     BOOL rc = FALSE;

  01da0	e3a03000	 mov         r3, #0
  01da4	e58d3000	 str         r3, [sp]

; 1378 :     UINT32 oldIdleMode;
; 1379 : 
; 1380 :     // Check if we know flash geometry
; 1381 :     if (s_hNand == NULL) return rc;

  01da8	e59f3150	 ldr         r3, [pc, #0x150]
  01dac	e5933000	 ldr         r3, [r3]
  01db0	e3530000	 cmp         r3, #0
  01db4	1a000002	 bne         |$LN3@FMD_EraseB|
  01db8	e59d3000	 ldr         r3, [sp]
  01dbc	e58d3008	 str         r3, [sp, #8]
  01dc0	ea00004a	 b           |$LN4@FMD_EraseB|
  01dc4		 |$LN3@FMD_EraseB|

; 1382 : 
; 1383 :     // Obtain hardware lock
; 1384 :     NAND_MutexEnter(s_hNand);

  01dc4	e59f3134	 ldr         r3, [pc, #0x134]
  01dc8	e5930000	 ldr         r0, [r3]
  01dcc	eb000000	 bl          NAND_MutexEnter

; 1385 : 
; 1386 :     //  Change idle mode to no-idle to ensure access to GPMC registers
; 1387 :     oldIdleMode = INREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG));

  01dd0	e59f3128	 ldr         r3, [pc, #0x128]
  01dd4	e5930000	 ldr         r0, [r3]
  01dd8	eb000000	 bl          NAND_GetGpmcRegs
  01ddc	e58d000c	 str         r0, [sp, #0xC]
  01de0	e59d300c	 ldr         r3, [sp, #0xC]
  01de4	e2833010	 add         r3, r3, #0x10
  01de8	e5933000	 ldr         r3, [r3]
  01dec	e58d3004	 str         r3, [sp, #4]

; 1388 :     OUTREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG), SYSCONFIG_NOIDLE);

  01df0	e59f3108	 ldr         r3, [pc, #0x108]
  01df4	e5930000	 ldr         r0, [r3]
  01df8	eb000000	 bl          NAND_GetGpmcRegs
  01dfc	e58d0010	 str         r0, [sp, #0x10]
  01e00	e59d3010	 ldr         r3, [sp, #0x10]
  01e04	e2832010	 add         r2, r3, #0x10
  01e08	e3a03008	 mov         r3, #8
  01e0c	e5823000	 str         r3, [r2]

; 1389 : 
; 1390 :     //  Only enable during NAND read/write/erase operations    
; 1391 :     NAND_Enable(s_hNand, TRUE);

  01e10	e3a01001	 mov         r1, #1
  01e14	e59f30e4	 ldr         r3, [pc, #0xE4]
  01e18	e5930000	 ldr         r0, [r3]
  01e1c	eb000000	 bl          NAND_Enable

; 1392 :     NAND_LockBlocks(s_hNand, blockId, blockId, FALSE);

  01e20	e3a03000	 mov         r3, #0
  01e24	e59d2024	 ldr         r2, [sp, #0x24]
  01e28	e59d1024	 ldr         r1, [sp, #0x24]
  01e2c	e59f00cc	 ldr         r0, [pc, #0xCC]
  01e30	e5900000	 ldr         r0, [r0]
  01e34	eb000000	 bl          NAND_LockBlocks

; 1393 :     
; 1394 :     // send block id to erase
; 1395 :     NAND_EraseBlock(s_hNand, blockId);

  01e38	e59d1024	 ldr         r1, [sp, #0x24]
  01e3c	e59f30bc	 ldr         r3, [pc, #0xBC]
  01e40	e5930000	 ldr         r0, [r3]
  01e44	eb000000	 bl          NAND_EraseBlock

; 1396 : 
; 1397 :     // wait for completion    
; 1398 :     WaitForReadyStatus(s_hNand);

  01e48	e59f30b0	 ldr         r3, [pc, #0xB0]
  01e4c	e5930000	 ldr         r0, [r3]
  01e50	eb000000	 bl          WaitForReadyStatus

; 1399 : 
; 1400 :     //Verify there wasn't any error by checking the NAND status register :
; 1401 :     if ((NAND_GetStatus(s_hNand) & NAND_STATUS_ERROR) != 0)

  01e54	e59f30a4	 ldr         r3, [pc, #0xA4]
  01e58	e5930000	 ldr         r0, [r3]
  01e5c	eb000000	 bl          NAND_GetStatus
  01e60	e1cd01b4	 strh        r0, [sp, #0x14]
  01e64	e1dd31b4	 ldrh        r3, [sp, #0x14]
  01e68	e3130001	 tst         r3, #1
  01e6c	0a000002	 beq         |$LN2@FMD_EraseB|

; 1402 :         {
; 1403 :         rc = FALSE;

  01e70	e3a03000	 mov         r3, #0
  01e74	e58d3000	 str         r3, [sp]

; 1404 :         goto cleanUp;

  01e78	ea000001	 b           |$cleanUp$46502|
  01e7c		 |$LN2@FMD_EraseB|

; 1405 :         }
; 1406 : 
; 1407 :     // Done
; 1408 :     rc = TRUE;

  01e7c	e3a03001	 mov         r3, #1
  01e80	e58d3000	 str         r3, [sp]
  01e84		 |$cleanUp$46502|

; 1409 : 
; 1410 : cleanUp:
; 1411 :     //  Only enable during NAND read/write/erase operations    
; 1412 :     NAND_LockBlocks(s_hNand, blockId, blockId, TRUE);

  01e84	e3a03001	 mov         r3, #1
  01e88	e59d2024	 ldr         r2, [sp, #0x24]
  01e8c	e59d1024	 ldr         r1, [sp, #0x24]
  01e90	e59f0068	 ldr         r0, [pc, #0x68]
  01e94	e5900000	 ldr         r0, [r0]
  01e98	eb000000	 bl          NAND_LockBlocks

; 1413 :     NAND_Enable(s_hNand, FALSE);

  01e9c	e3a01000	 mov         r1, #0
  01ea0	e59f3058	 ldr         r3, [pc, #0x58]
  01ea4	e5930000	 ldr         r0, [r3]
  01ea8	eb000000	 bl          NAND_Enable

; 1414 :    
; 1415 : 
; 1416 :     //  Change idle mode back
; 1417 :     OUTREG32(&(NAND_GetGpmcRegs(s_hNand)->GPMC_SYSCONFIG), oldIdleMode);

  01eac	e59f304c	 ldr         r3, [pc, #0x4C]
  01eb0	e5930000	 ldr         r0, [r3]
  01eb4	eb000000	 bl          NAND_GetGpmcRegs
  01eb8	e58d0018	 str         r0, [sp, #0x18]
  01ebc	e59d3018	 ldr         r3, [sp, #0x18]
  01ec0	e2832010	 add         r2, r3, #0x10
  01ec4	e59d3004	 ldr         r3, [sp, #4]
  01ec8	e5823000	 str         r3, [r2]

; 1418 : 
; 1419 :     // Release hardware lock
; 1420 :     if (s_hNand != NULL) NAND_MutexExit(s_hNand);

  01ecc	e59f302c	 ldr         r3, [pc, #0x2C]
  01ed0	e5933000	 ldr         r3, [r3]
  01ed4	e3530000	 cmp         r3, #0
  01ed8	0a000002	 beq         |$LN1@FMD_EraseB|
  01edc	e59f301c	 ldr         r3, [pc, #0x1C]
  01ee0	e5930000	 ldr         r0, [r3]
  01ee4	eb000000	 bl          NAND_MutexExit
  01ee8		 |$LN1@FMD_EraseB|

; 1421 : 
; 1422 :     return rc;

  01ee8	e59d3000	 ldr         r3, [sp]
  01eec	e58d3008	 str         r3, [sp, #8]
  01ef0		 |$LN4@FMD_EraseB|

; 1423 : }

  01ef0	e59d0008	 ldr         r0, [sp, #8]
  01ef4	e28dd01c	 add         sp, sp, #0x1C
  01ef8	e89d6000	 ldmia       sp, {sp, lr}
  01efc	e12fff1e	 bx          lr
  01f00		 |$LN9@FMD_EraseB|
  01f00		 |$LN10@FMD_EraseB|
  01f00	00000000	 DCD         |s_hNand|
  01f04		 |$M46829|

			 ENDP  ; |FMD_EraseBlock|

	EXPORT	|BlockAccess|

  000a8			 AREA	 |.pdata|, PDATA
|$T46839| DCD	|$LN5@NAND_Erase|
	DCD	0x40001504
; Function compile flags: /Odtp

  01f04			 AREA	 |.text|, CODE, ARM

  01f04		 |NAND_EraseBlock| PROC

; 728  : {    

  01f04		 |$LN5@NAND_Erase|
  01f04	e1a0c00d	 mov         r12, sp
  01f08	e92d0003	 stmdb       sp!, {r0, r1}
  01f0c	e92d5000	 stmdb       sp!, {r12, lr}
  01f10	e24dd008	 sub         sp, sp, #8
  01f14		 |$M46836|

; 729  :     NandDevice_t *pDevice = (NandDevice_t*)hNand;

  01f14	e59d3010	 ldr         r3, [sp, #0x10]
  01f18	e58d3000	 str         r3, [sp]

; 730  :     
; 731  :     // Calculate the sector number
; 732  :     NAND_SendCommand(hNand, NAND_CMD_ERASE_SETUP);    

  01f1c	e3a01060	 mov         r1, #0x60
  01f20	e59d0010	 ldr         r0, [sp, #0x10]
  01f24	eb000000	 bl          NAND_SendCommand

; 733  :     BlockAccess(pDevice, blockId);

  01f28	e59d1014	 ldr         r1, [sp, #0x14]
  01f2c	e59d0000	 ldr         r0, [sp]
  01f30	eb000000	 bl          BlockAccess

; 734  :     NAND_SendCommand(hNand, NAND_CMD_ERASE_CONFIRM);

  01f34	e3a010d0	 mov         r1, #0xD0
  01f38	e59d0010	 ldr         r0, [sp, #0x10]
  01f3c	eb000000	 bl          NAND_SendCommand

; 735  :     
; 736  :     return TRUE;

  01f40	e3a03001	 mov         r3, #1
  01f44	e58d3004	 str         r3, [sp, #4]

; 737  : }

  01f48	e59d0004	 ldr         r0, [sp, #4]
  01f4c	e28dd008	 add         sp, sp, #8
  01f50	e89d6000	 ldmia       sp, {sp, lr}
  01f54	e12fff1e	 bx          lr
  01f58		 |$M46837|

			 ENDP  ; |NAND_EraseBlock|


  00000			 AREA	 |.pdata|, PDATA
|$T46844| DCD	|$LN5@BlockAcces|
	DCD	0x40002503
; Function compile flags: /Odtp

  00000			 AREA	 |.text|, CODE, ARM

  00000		 |BlockAccess| PROC

; 235  : {

  00000		 |$LN5@BlockAcces|
  00000	e1a0c00d	 mov         r12, sp
  00004	e92d0003	 stmdb       sp!, {r0, r1}
  00008	e92d5000	 stmdb       sp!, {r12, lr}
  0000c		 |$M46841|

; 236  :     blockId *= pDevice->nandInfo.sectorsPerBlock;

  0000c	e59d3008	 ldr         r3, [sp, #8]
  00010	e283304c	 add         r3, r3, #0x4C
  00014	e59d200c	 ldr         r2, [sp, #0xC]
  00018	e5933000	 ldr         r3, [r3]
  0001c	e0030392	 mul         r3, r2, r3
  00020	e58d300c	 str         r3, [sp, #0xC]

; 237  :     WRITE_NAND(pDevice->pNandAddress, (blockId & 0xFF));

  00024	e59d300c	 ldr         r3, [sp, #0xC]
  00028	e20330ff	 and         r3, r3, #0xFF
  0002c	e1a02803	 mov         r2, r3, lsl #16
  00030	e1a02822	 mov         r2, r2, lsr #16
  00034	e59d3008	 ldr         r3, [sp, #8]
  00038	e2833020	 add         r3, r3, #0x20
  0003c	e5933000	 ldr         r3, [r3]
  00040	e1c320b0	 strh        r2, [r3]

; 238  :     WRITE_NAND(pDevice->pNandAddress, ((blockId >> 8) & 0xFF));

  00044	e59d300c	 ldr         r3, [sp, #0xC]
  00048	e1a03803	 mov         r3, r3, lsl #16
  0004c	e1a03c23	 mov         r3, r3, lsr #24
  00050	e1a02803	 mov         r2, r3, lsl #16
  00054	e1a02822	 mov         r2, r2, lsr #16
  00058	e59d3008	 ldr         r3, [sp, #8]
  0005c	e2833020	 add         r3, r3, #0x20
  00060	e5933000	 ldr         r3, [r3]
  00064	e1c320b0	 strh        r2, [r3]

; 239  :     WRITE_NAND(pDevice->pNandAddress, ((blockId >> 16) & 0xFF));

  00068	e59d300c	 ldr         r3, [sp, #0xC]
  0006c	e1a03403	 mov         r3, r3, lsl #8
  00070	e1a03c23	 mov         r3, r3, lsr #24
  00074	e1a02803	 mov         r2, r3, lsl #16
  00078	e1a02822	 mov         r2, r2, lsr #16
  0007c	e59d3008	 ldr         r3, [sp, #8]
  00080	e2833020	 add         r3, r3, #0x20
  00084	e5933000	 ldr         r3, [r3]
  00088	e1c320b0	 strh        r2, [r3]

; 240  : }

  0008c	e89d6000	 ldmia       sp, {sp, lr}
  00090	e12fff1e	 bx          lr
  00094		 |$M46842|

			 ENDP  ; |BlockAccess|

	EXPORT	|FMD_GetBlockStatus|

  000b0			 AREA	 |.pdata|, PDATA
|$T46852| DCD	|$LN11@FMD_GetBlo|
	DCD	0x40003d04
; Function compile flags: /Odtp

  01f58			 AREA	 |.text|, CODE, ARM

  01f58		 |FMD_GetBlockStatus| PROC

; 1431 : {

  01f58		 |$LN11@FMD_GetBlo|
  01f58	e1a0c00d	 mov         r12, sp
  01f5c	e92d0001	 stmdb       sp!, {r0}
  01f60	e92d5000	 stmdb       sp!, {r12, lr}
  01f64	e24dd024	 sub         sp, sp, #0x24
  01f68		 |$M46849|

; 1432 :     DWORD rc = 0;

  01f68	e3a03000	 mov         r3, #0
  01f6c	e58d3000	 str         r3, [sp]

; 1433 :     SECTOR_ADDR sector;
; 1434 :     SectorInfo sectorInfo[2];
; 1435 : 
; 1436 : 
; 1437 :     // Check if we know flash geometry
; 1438 :     if (s_hNand == NULL) goto cleanUp;

  01f70	e59f30d0	 ldr         r3, [pc, #0xD0]
  01f74	e5933000	 ldr         r3, [r3]
  01f78	e3530000	 cmp         r3, #0
  01f7c	1a000000	 bne         |$LN6@FMD_GetBlo|
  01f80	ea00002a	 b           |$cleanUp$46515|
  01f84		 |$LN6@FMD_GetBlo|

; 1439 : 
; 1440 :     // Calculate sector
; 1441 :     sector = blockId * NAND_GetGeometry(s_hNand)->sectorsPerBlock;

  01f84	e59f30bc	 ldr         r3, [pc, #0xBC]
  01f88	e5930000	 ldr         r0, [r3]
  01f8c	eb000000	 bl          NAND_GetGeometry
  01f90	e58d001c	 str         r0, [sp, #0x1C]
  01f94	e59d301c	 ldr         r3, [sp, #0x1C]
  01f98	e2833008	 add         r3, r3, #8
  01f9c	e59d202c	 ldr         r2, [sp, #0x2C]
  01fa0	e5933000	 ldr         r3, [r3]
  01fa4	e0030392	 mul         r3, r2, r3
  01fa8	e58d3004	 str         r3, [sp, #4]

; 1442 : 
; 1443 :     if (!FMD_ReadSector(sector, NULL, sectorInfo, 2))

  01fac	e3a03002	 mov         r3, #2
  01fb0	e28d2008	 add         r2, sp, #8
  01fb4	e3a01000	 mov         r1, #0
  01fb8	e59d0004	 ldr         r0, [sp, #4]
  01fbc	eb000000	 bl          FMD_ReadSector
  01fc0	e58d0020	 str         r0, [sp, #0x20]
  01fc4	e59d3020	 ldr         r3, [sp, #0x20]
  01fc8	e3530000	 cmp         r3, #0
  01fcc	1a000002	 bne         |$LN5@FMD_GetBlo|

; 1444 :         {
; 1445 :         rc = BLOCK_STATUS_UNKNOWN;

  01fd0	e3a03001	 mov         r3, #1
  01fd4	e58d3000	 str         r3, [sp]

; 1446 :         goto cleanUp;

  01fd8	ea000014	 b           |$cleanUp$46515|
  01fdc		 |$LN5@FMD_GetBlo|

; 1447 :         }
; 1448 : 
; 1449 :     if ((sectorInfo[0].bBadBlock != 0xFF) || (sectorInfo[1].bBadBlock != 0xFF))

  01fdc	e5dd300d	 ldrb        r3, [sp, #0xD]
  01fe0	e35300ff	 cmp         r3, #0xFF
  01fe4	1a000002	 bne         |$LN3@FMD_GetBlo|
  01fe8	e5dd3015	 ldrb        r3, [sp, #0x15]
  01fec	e35300ff	 cmp         r3, #0xFF
  01ff0	0a000002	 beq         |$LN4@FMD_GetBlo|
  01ff4		 |$LN3@FMD_GetBlo|

; 1450 :         {
; 1451 :         rc |= BLOCK_STATUS_BAD;

  01ff4	e59d3000	 ldr         r3, [sp]
  01ff8	e3833002	 orr         r3, r3, #2
  01ffc	e58d3000	 str         r3, [sp]
  02000		 |$LN4@FMD_GetBlo|

; 1452 :         }
; 1453 : 
; 1454 :     if ((sectorInfo[0].bOEMReserved & OEM_BLOCK_READONLY) == 0)

  02000	e5dd300c	 ldrb        r3, [sp, #0xC]
  02004	e3130002	 tst         r3, #2
  02008	1a000002	 bne         |$LN2@FMD_GetBlo|

; 1455 :         {
; 1456 :         rc |= BLOCK_STATUS_READONLY;

  0200c	e59d3000	 ldr         r3, [sp]
  02010	e3833004	 orr         r3, r3, #4
  02014	e58d3000	 str         r3, [sp]
  02018		 |$LN2@FMD_GetBlo|

; 1457 :         }
; 1458 : 
; 1459 :     if ((sectorInfo[0].bOEMReserved & OEM_BLOCK_RESERVED) == 0)

  02018	e5dd300c	 ldrb        r3, [sp, #0xC]
  0201c	e3130001	 tst         r3, #1
  02020	1a000002	 bne         |$LN1@FMD_GetBlo|

; 1460 :         {
; 1461 :         rc |= BLOCK_STATUS_RESERVED;

  02024	e59d3000	 ldr         r3, [sp]
  02028	e3833008	 orr         r3, r3, #8
  0202c	e58d3000	 str         r3, [sp]
  02030		 |$LN1@FMD_GetBlo|
  02030		 |$cleanUp$46515|

; 1462 :         }
; 1463 : 
; 1464 : cleanUp:
; 1465 :     return rc;

  02030	e59d3000	 ldr         r3, [sp]
  02034	e58d3018	 str         r3, [sp, #0x18]

; 1466 : }

  02038	e59d0018	 ldr         r0, [sp, #0x18]
  0203c	e28dd024	 add         sp, sp, #0x24
  02040	e89d6000	 ldmia       sp, {sp, lr}
  02044	e12fff1e	 bx          lr
  02048		 |$LN12@FMD_GetBlo|
  02048		 |$LN13@FMD_GetBlo|
  02048	00000000	 DCD         |s_hNand|
  0204c		 |$M46850|

			 ENDP  ; |FMD_GetBlockStatus|

	EXPORT	|FMD_SetBlockStatus|

  000b8			 AREA	 |.pdata|, PDATA
|$T46860| DCD	|$LN9@FMD_SetBlo|
	DCD	0x40003704
; Function compile flags: /Odtp

  0204c			 AREA	 |.text|, CODE, ARM

  0204c		 |FMD_SetBlockStatus| PROC

; 1477 : {

  0204c		 |$LN9@FMD_SetBlo|
  0204c	e1a0c00d	 mov         r12, sp
  02050	e92d0003	 stmdb       sp!, {r0, r1}
  02054	e92d5000	 stmdb       sp!, {r12, lr}
  02058	e24dd020	 sub         sp, sp, #0x20
  0205c		 |$M46857|

; 1478 :     BOOL rc = FALSE;

  0205c	e3a03000	 mov         r3, #0
  02060	e58d3000	 str         r3, [sp]

; 1479 :     SECTOR_ADDR sector;
; 1480 :     SectorInfo sectorInfo;
; 1481 : 
; 1482 :     // Check if we know flash geometry
; 1483 :     if (s_hNand == NULL) goto cleanUp;

  02064	e59f30b8	 ldr         r3, [pc, #0xB8]
  02068	e5933000	 ldr         r3, [r3]
  0206c	e3530000	 cmp         r3, #0
  02070	1a000000	 bne         |$LN4@FMD_SetBlo|
  02074	ea000024	 b           |$cleanUp$46532|
  02078		 |$LN4@FMD_SetBlo|

; 1484 : 
; 1485 :     // Calculate sector
; 1486 :     sector = blockId * NAND_GetGeometry(s_hNand)->sectorsPerBlock;

  02078	e59f30a4	 ldr         r3, [pc, #0xA4]
  0207c	e5930000	 ldr         r0, [r3]
  02080	eb000000	 bl          NAND_GetGeometry
  02084	e58d0014	 str         r0, [sp, #0x14]
  02088	e59d3014	 ldr         r3, [sp, #0x14]
  0208c	e2833008	 add         r3, r3, #8
  02090	e59d2028	 ldr         r2, [sp, #0x28]
  02094	e5933000	 ldr         r3, [r3]
  02098	e0030392	 mul         r3, r2, r3
  0209c	e58d3004	 str         r3, [sp, #4]

; 1487 : 
; 1488 :     if ((status & BLOCK_STATUS_BAD) != 0)

  020a0	e59d302c	 ldr         r3, [sp, #0x2C]
  020a4	e3130002	 tst         r3, #2
  020a8	0a000015	 beq         |$LN3@FMD_SetBlo|

; 1489 :         {
; 1490 :         // Read the sector info
; 1491 :         if (!FMD_ReadSector(sector, NULL, &sectorInfo, 1)) goto cleanUp;

  020ac	e3a03001	 mov         r3, #1
  020b0	e28d2008	 add         r2, sp, #8
  020b4	e3a01000	 mov         r1, #0
  020b8	e59d0004	 ldr         r0, [sp, #4]
  020bc	eb000000	 bl          FMD_ReadSector
  020c0	e58d0018	 str         r0, [sp, #0x18]
  020c4	e59d3018	 ldr         r3, [sp, #0x18]
  020c8	e3530000	 cmp         r3, #0
  020cc	1a000000	 bne         |$LN2@FMD_SetBlo|
  020d0	ea00000d	 b           |$cleanUp$46532|
  020d4		 |$LN2@FMD_SetBlo|

; 1492 : 
; 1493 :         // Set the bad block marker
; 1494 :         sectorInfo.bBadBlock = 0;

  020d4	e3a03000	 mov         r3, #0
  020d8	e5cd300d	 strb        r3, [sp, #0xD]

; 1495 : 
; 1496 :         // Complete the write (no erase, we changed 0xFF -> 0x00)
; 1497 :         if (!FMD_WriteSector(sector, NULL, &sectorInfo, 1)) goto cleanUp;

  020dc	e3a03001	 mov         r3, #1
  020e0	e28d2008	 add         r2, sp, #8
  020e4	e3a01000	 mov         r1, #0
  020e8	e59d0004	 ldr         r0, [sp, #4]
  020ec	eb000000	 bl          FMD_WriteSector
  020f0	e58d001c	 str         r0, [sp, #0x1C]
  020f4	e59d301c	 ldr         r3, [sp, #0x1C]
  020f8	e3530000	 cmp         r3, #0
  020fc	1a000000	 bne         |$LN1@FMD_SetBlo|
  02100	ea000001	 b           |$cleanUp$46532|
  02104		 |$LN1@FMD_SetBlo|
  02104		 |$LN3@FMD_SetBlo|

; 1498 :         }
; 1499 : 
; 1500 : #ifdef BOOT_MODE
; 1501 :     if ( ((status & BLOCK_STATUS_READONLY) != 0) || ((status & BLOCK_STATUS_RESERVED) != 0) )
; 1502 :         {
; 1503 :         // Read the sector info
; 1504 :         if (!FMD_ReadSector(sector, NULL, &sectorInfo, 1)) goto cleanUp;
; 1505 : 
; 1506 :         // Set the OEM field
; 1507 :         sectorInfo.bOEMReserved &= ((status & BLOCK_STATUS_READONLY) != 0) ? ~(OEM_BLOCK_READONLY) : 0xFF;
; 1508 :         sectorInfo.bOEMReserved &= ((status & BLOCK_STATUS_RESERVED) != 0) ? ~(OEM_BLOCK_RESERVED) : 0xFF;
; 1509 :         
; 1510 :         // Complete the write (no erase, changed bits from 1s to 0s)
; 1511 :         if (!FMD_WriteSector(sector, NULL, &sectorInfo, 1)) goto cleanUp;
; 1512 :         }
; 1513 : #endif
; 1514 : 
; 1515 :     rc = TRUE;

  02104	e3a03001	 mov         r3, #1
  02108	e58d3000	 str         r3, [sp]
  0210c		 |$cleanUp$46532|

; 1516 : 
; 1517 : cleanUp:
; 1518 :     return rc;

  0210c	e59d3000	 ldr         r3, [sp]
  02110	e58d3010	 str         r3, [sp, #0x10]

; 1519 : }

  02114	e59d0010	 ldr         r0, [sp, #0x10]
  02118	e28dd020	 add         sp, sp, #0x20
  0211c	e89d6000	 ldmia       sp, {sp, lr}
  02120	e12fff1e	 bx          lr
  02124		 |$LN10@FMD_SetBlo|
  02124		 |$LN11@FMD_SetBlo|
  02124	00000000	 DCD         |s_hNand|
  02128		 |$M46858|

			 ENDP  ; |FMD_SetBlockStatus|

	EXPORT	|FMD_PowerUp|

  000c0			 AREA	 |.pdata|, PDATA
|$T46867| DCD	|$LN6@FMD_PowerU|
	DCD	0x40002101
; Function compile flags: /Odtp

  02128			 AREA	 |.text|, CODE, ARM

  02128		 |FMD_PowerUp| PROC

; 1528 : {

  02128		 |$LN6@FMD_PowerU|
  02128	e52de004	 str         lr, [sp, #-4]!
  0212c		 |$M46864|

; 1529 :     // exit if FMD wasn't opened
; 1530 :     if (s_hNand == NULL) return;

  0212c	e59f3074	 ldr         r3, [pc, #0x74]
  02130	e5933000	 ldr         r3, [r3]
  02134	e3530000	 cmp         r3, #0
  02138	1a000000	 bne         |$LN1@FMD_PowerU|
  0213c	ea000017	 b           |$LN2@FMD_PowerU|
  02140		 |$LN1@FMD_PowerU|

; 1531 :     
; 1532 :     // Obtain hardware lock
; 1533 :     NAND_MutexEnter(s_hNand);

  02140	e59f3060	 ldr         r3, [pc, #0x60]
  02144	e5930000	 ldr         r0, [r3]
  02148	eb000000	 bl          NAND_MutexEnter

; 1534 : 
; 1535 :     //  Only enable during NAND read/write/erase operations
; 1536 :     NAND_Enable(s_hNand, TRUE);

  0214c	e3a01001	 mov         r1, #1
  02150	e59f3050	 ldr         r3, [pc, #0x50]
  02154	e5930000	 ldr         r0, [r3]
  02158	eb000000	 bl          NAND_Enable

; 1537 : 
; 1538 :     // Wait for NAND
; 1539 :     WaitForReadyStatus(s_hNand);   

  0215c	e59f3044	 ldr         r3, [pc, #0x44]
  02160	e5930000	 ldr         r0, [r3]
  02164	eb000000	 bl          WaitForReadyStatus

; 1540 : 
; 1541 :     // Write the reset command
; 1542 :     NAND_SendCommand(s_hNand, NAND_CMD_RESET);

  02168	e3a010ff	 mov         r1, #0xFF
  0216c	e59f3034	 ldr         r3, [pc, #0x34]
  02170	e5930000	 ldr         r0, [r3]
  02174	eb000000	 bl          NAND_SendCommand

; 1543 : 
; 1544 :     // Wait for NAND
; 1545 :     WaitForReadyStatus(s_hNand);

  02178	e59f3028	 ldr         r3, [pc, #0x28]
  0217c	e5930000	 ldr         r0, [r3]
  02180	eb000000	 bl          WaitForReadyStatus

; 1546 : 
; 1547 :     //  Only enable during NAND read/write/erase operations
; 1548 :     NAND_Enable(s_hNand, FALSE);

  02184	e3a01000	 mov         r1, #0
  02188	e59f3018	 ldr         r3, [pc, #0x18]
  0218c	e5930000	 ldr         r0, [r3]
  02190	eb000000	 bl          NAND_Enable

; 1549 : 
; 1550 :     // Release hardware lock
; 1551 :     NAND_MutexExit(s_hNand);

  02194	e59f300c	 ldr         r3, [pc, #0xC]
  02198	e5930000	 ldr         r0, [r3]
  0219c	eb000000	 bl          NAND_MutexExit
  021a0		 |$LN2@FMD_PowerU|

; 1552 : }

  021a0	e49de004	 ldr         lr, [sp], #4
  021a4	e12fff1e	 bx          lr
  021a8		 |$LN7@FMD_PowerU|
  021a8		 |$LN8@FMD_PowerU|
  021a8	00000000	 DCD         |s_hNand|
  021ac		 |$M46865|

			 ENDP  ; |FMD_PowerUp|

	EXPORT	|FMD_PowerDown|

  000c8			 AREA	 |.pdata|, PDATA
|$T46874| DCD	|$LN6@FMD_PowerD|
	DCD	0x40002101
; Function compile flags: /Odtp

  021ac			 AREA	 |.text|, CODE, ARM

  021ac		 |FMD_PowerDown| PROC

; 1561 : {

  021ac		 |$LN6@FMD_PowerD|
  021ac	e52de004	 str         lr, [sp, #-4]!
  021b0		 |$M46871|

; 1562 :     // exit if FMD wasn't opened
; 1563 :     if (s_hNand == NULL) return;

  021b0	e59f3074	 ldr         r3, [pc, #0x74]
  021b4	e5933000	 ldr         r3, [r3]
  021b8	e3530000	 cmp         r3, #0
  021bc	1a000000	 bne         |$LN1@FMD_PowerD|
  021c0	ea000017	 b           |$LN2@FMD_PowerD|
  021c4		 |$LN1@FMD_PowerD|

; 1564 :     
; 1565 :     // Obtain hardware lock
; 1566 :     NAND_MutexEnter(s_hNand);

  021c4	e59f3060	 ldr         r3, [pc, #0x60]
  021c8	e5930000	 ldr         r0, [r3]
  021cc	eb000000	 bl          NAND_MutexEnter

; 1567 : 
; 1568 :     //  Only enable during NAND read/write/erase operations
; 1569 :     NAND_Enable(s_hNand, TRUE);

  021d0	e3a01001	 mov         r1, #1
  021d4	e59f3050	 ldr         r3, [pc, #0x50]
  021d8	e5930000	 ldr         r0, [r3]
  021dc	eb000000	 bl          NAND_Enable

; 1570 : 
; 1571 :     // Wait for NAND
; 1572 :     WaitForReadyStatus(s_hNand);   

  021e0	e59f3044	 ldr         r3, [pc, #0x44]
  021e4	e5930000	 ldr         r0, [r3]
  021e8	eb000000	 bl          WaitForReadyStatus

; 1573 : 
; 1574 :     // Write the reset command
; 1575 :     NAND_SendCommand(s_hNand, NAND_CMD_RESET);

  021ec	e3a010ff	 mov         r1, #0xFF
  021f0	e59f3034	 ldr         r3, [pc, #0x34]
  021f4	e5930000	 ldr         r0, [r3]
  021f8	eb000000	 bl          NAND_SendCommand

; 1576 : 
; 1577 :     // Wait for NAND
; 1578 :     WaitForReadyStatus(s_hNand);

  021fc	e59f3028	 ldr         r3, [pc, #0x28]
  02200	e5930000	 ldr         r0, [r3]
  02204	eb000000	 bl          WaitForReadyStatus

; 1579 : 
; 1580 :     //  Only enable during NAND read/write/erase operations
; 1581 :     NAND_Enable(s_hNand, FALSE);

  02208	e3a01000	 mov         r1, #0
  0220c	e59f3018	 ldr         r3, [pc, #0x18]
  02210	e5930000	 ldr         r0, [r3]
  02214	eb000000	 bl          NAND_Enable

; 1582 : 
; 1583 :     // Release hardware lock
; 1584 :     NAND_MutexExit(s_hNand);

  02218	e59f300c	 ldr         r3, [pc, #0xC]
  0221c	e5930000	 ldr         r0, [r3]
  02220	eb000000	 bl          NAND_MutexExit
  02224		 |$LN2@FMD_PowerD|

; 1585 : }

  02224	e49de004	 ldr         lr, [sp], #4
  02228	e12fff1e	 bx          lr
  0222c		 |$LN7@FMD_PowerD|
  0222c		 |$LN8@FMD_PowerD|
  0222c	00000000	 DCD         |s_hNand|
  02230		 |$M46872|

			 ENDP  ; |FMD_PowerDown|

	EXPORT	|FMD_OEMIoControl|

  000d0			 AREA	 |.pdata|, PDATA
|$T46882| DCD	|$LN5@FMD_OEMIoC|
	DCD	0x40000a04
; Function compile flags: /Odtp

  02230			 AREA	 |.text|, CODE, ARM

  02230		 |FMD_OEMIoControl| PROC

; 1600 : {

  02230		 |$LN5@FMD_OEMIoC|
  02230	e1a0c00d	 mov         r12, sp
  02234	e92d000f	 stmdb       sp!, {r0 - r3}
  02238	e92d5000	 stmdb       sp!, {r12, lr}
  0223c	e24dd004	 sub         sp, sp, #4
  02240		 |$M46879|

; 1601 : 
; 1602 :     UNREFERENCED_PARAMETER(code);
; 1603 : 
; 1604 :     UNREFERENCED_PARAMETER(pInBuffer);
; 1605 :     UNREFERENCED_PARAMETER(inSize);
; 1606 :     UNREFERENCED_PARAMETER(pOutBuffer);
; 1607 :     UNREFERENCED_PARAMETER(outSize);
; 1608 :     UNREFERENCED_PARAMETER(pOutSize);
; 1609 :     
; 1610 :     return FALSE;    

  02240	e3a03000	 mov         r3, #0
  02244	e58d3000	 str         r3, [sp]

; 1611 : }

  02248	e59d0000	 ldr         r0, [sp]
  0224c	e28dd004	 add         sp, sp, #4
  02250	e89d6000	 ldmia       sp, {sp, lr}
  02254	e12fff1e	 bx          lr
  02258		 |$M46880|

			 ENDP  ; |FMD_OEMIoControl|

	END
